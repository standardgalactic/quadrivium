TEXTBOOKS in MATHEMATICS
I N T R O D U C T I O N  T O 
MATHEMATICAL LOGIC
Elliott Mendelson
SIXTH EDITION

I N T R O D U C T I O N  T O 
MATHEMATICAL LOGIC
SIXTH EDITION

TEXTBOOKS in MATHEMATICS
Series Editors: Al Boggess and Ken Rosen
PUBLISHED TITLES
ABSTRACT ALGEBRA: AN INQUIRY-BASED APPROACH
Jonathan K. Hodge, Steven Schlicker, and Ted Sundstrom
ABSTRACT ALGEBRA: AN INTERACTIVE APPROACH
William Paulsen
ADVANCED CALCULUS: THEORY AND PRACTICE
John Srdjan Petrovic
ADVANCED LINEAR ALGEBRA
Nicholas Loehr
ANALYSIS WITH ULTRASMALL NUMBERS
Karel Hrbacek, Olivier Lessmann, and Richard O’Donovan
APPLIED DIFFERENTIAL EQUATIONS: THE PRIMARY COURSE
Vladimir Dobrushkin
APPLYING ANALYTICS: A PRACTICAL APPROACH
Evan S. Levine
COMPUTATIONS OF IMPROPER REIMANN INTEGRALS
Ioannis Roussos 
CONVEX ANALYSIS
Steven G. Krantz
COUNTEREXAMPLES: FROM ELEMENTARY CALCULUS TO THE BEGINNINGS OF ANALYSIS
Andrei Bourchtein and Ludmila Bourchtein
DIFFERENTIAL EQUATIONS: THEORY, TECHNIQUE, AND PRACTICE, SECOND EDITION
Steven G. Krantz
DIFFERENTIAL EQUATIONS WITH MATLAB®: EXPLORATION, APPLICATIONS, AND THEORY
Mark A. McKibben and Micah D. Webster
ELEMENTARY NUMBER THEORY 
James S. Kraft and Lawrence C. Washington
ELEMENTS OF ADVANCED MATHEMATICS, THIRD EDITION
Steven G. Krantz

EXPLORING LINEAR ALGEBRA: LABS AND PROJECTS WITH MATHEMATICA® 
Crista Arangala
AN INTRODUCTION TO NUMBER THEORY WITH CRYPTOGRAPHY
James Kraft and Larry Washington
AN INTRODUCTION TO PARTIAL DIFFERENTIAL EQUATIONS WITH MATLAB®, SECOND EDITION
Mathew Coleman
INTRODUCTION TO THE CALCULUS OF VARIATIONS AND CONTROL WITH MODERN APPLICATIONS
John T. Burns
INTRODUCTION TO MATHEMATICAL LOGIC, SIXTH EDITION
Elliott Mendelson
INTRODUCTION TO MATHEMATICAL PROOFS: A TRANSITION TO ADVANCED MATHEMATICS, SECOND EDITION
Charles E. Roberts, Jr.
LINEAR ALGEBRA, GEOMETRY AND TRANSFORMATION 
Bruce Solomon 
THE MATHEMATICS OF GAMES: AN INTRODUCTION TO PROBABILITY
David G. Taylor
QUADRACTIC IRRATIONALS: AN INTRODUCTION TO CLASSICAL NUMBER THEORY
Franz Holter-Koch
REAL ANALYSIS AND FOUNDATIONS, THIRD EDITION
Steven G. Krantz 
RISK ANALYSIS IN ENGINEERING AND ECONOMICS, SECOND EDITION
Bilal M. Ayyub
RISK MANAGEMENT AND SIMULATION
Aparna Gupta
TRANSFORMATIONAL PLANE GEOMETRY 
Ronald N. Umble and Zhigang Han
PUBLISHED TITLES CONTINUED


TEXTBOOKS in MATHEMATICS
I N T R O D U C T I O N  T O 
MATHEMATICAL LOGIC
Elliott Mendelson
Queens College
Flushing, New York, USA
SIXTH EDITION

CRC Press
Taylor & Francis Group
6000 Broken Sound Parkway NW, Suite 300
Boca Raton, FL 33487-2742
© 2015 by Taylor & Francis Group, LLC
CRC Press is an imprint of Taylor & Francis Group, an Informa business
No claim to original U.S. Government works
Version Date: 20150205
International Standard Book Number-13: 978-1-4822-3778-8 (eBook - PDF)
This book contains information obtained from authentic and highly regarded sources. Reasonable efforts 
have been made to publish reliable data and information, but the author and publisher cannot assume 
responsibility for the validity of all materials or the consequences of their use. The authors and publishers 
have attempted to trace the copyright holders of all material reproduced in this publication and apologize to 
copyright holders if permission to publish in this form has not been obtained. If any copyright material has 
not been acknowledged please write and let us know so we may rectify in any future reprint.
Except as permitted under U.S. Copyright Law, no part of this book may be reprinted, reproduced, transmit-
ted, or utilized in any form by any electronic, mechanical, or other means, now known or hereafter invented, 
including photocopying, microfilming, and recording, or in any information storage or retrieval system, 
without written permission from the publishers.
For permission to photocopy or use material electronically from this work, please access www.copyright.
com (http://www.copyright.com/) or contact the Copyright Clearance Center, Inc. (CCC), 222 Rosewood 
Drive, Danvers, MA 01923, 978-750-8400. CCC is a not-for-profit organization that provides licenses and 
registration for a variety of users. For organizations that have been granted a photocopy license by the CCC, 
a separate system of payment has been arranged.
Trademark Notice: Product or corporate names may be trademarks or registered trademarks, and are used 
only for identification and explanation without intent to infringe.
Visit the Taylor & Francis Web site at
http://www.taylorandfrancis.com
and the CRC Press Web site at
http://www.crcpress.com

To Arlene


ix
Contents
Preface.................................................................................................................... xiii
Introduction............................................................................................................xv
 1. The Propositional Calculus...........................................................................1
1.1	
Propositional Connectives: Truth Tables............................................1
1.2	
Tautologies..............................................................................................6
1.3	
Adequate Sets of Connectives............................................................19
1.4	
An Axiom System for the Propositional Calculus..........................27
1.5	
Independence: Many-Valued Logics.................................................36
1.6	
Other Axiomatizations........................................................................39
 2. First-Order Logic and Model Theory........................................................45
2.1	
Quantifiers............................................................................................45
2.1.1	
Parentheses..............................................................................48
2.2	
First-Order Languages and Their Interpretations: 
Satisfiability and Truth: Models.........................................................53
2.3	
First-Order Theories............................................................................66
2.3.1	
Logical Axioms.......................................................................66
2.3.2	
Proper Axioms........................................................................67
2.3.3	
Rules of Inference...................................................................67
2.4	
Properties of First-Order Theories....................................................69
2.5	
Additional Metatheorems and Derived Rules.................................73
2.5.1	
Particularization Rule A4...................................................... 74
2.5.2	
Existential Rule E4.................................................................. 74
2.6	
Rule C.....................................................................................................78
2.7	
Completeness Theorems.....................................................................82
2.8	
First-Order Theories with Equality...................................................93
2.9	
Definitions of New Function Letters and Individual 
Constants......................................................................................... 102
2.10	 Prenex Normal Forms....................................................................... 105
2.11	 Isomorphism of Interpretations: Categoricity of Theories.......... 111
2.12	 Generalized First-Order Theories: Completeness and 
Decidability......................................................................................... 113
2.12.1	 Mathematical Applications................................................. 117
2.13	 Elementary Equivalence: Elementary Extensions.........................123
2.14	 Ultrapowers: Nonstandard Analysis..............................................128
2.14.1	 Reduced Direct Products..................................................... 131
2.14.2	 Nonstandard Analysis.........................................................136

x
Contents
2.15	 Semantic Trees.................................................................................... 140
2.15.1	 Basic Principle of Semantic Trees....................................... 142
2.16	 Quantification Theory Allowing Empty Domains....................... 146
 3. Formal Number Theory.............................................................................153
3.1	
An Axiom System..............................................................................153
3.2	
Number-Theoretic Functions and Relations.................................. 169
3.3	
Primitive Recursive and Recursive Functions............................... 174
3.4	
Arithmetization: Gödel Numbers................................................... 192
3.5	
The Fixed-Point Theorem: Gödel’s Incompleteness Theorem.....205
3.6	
Recursive Undecidability: Church’s Theorem............................... 218
3.7	
Nonstandard Models.........................................................................228
 4. Axiomatic Set Theory.................................................................................231
4.1	
An Axiom System..............................................................................231
4.2	
Ordinal Numbers...............................................................................247
4.3	
Equinumerosity: Finite and Denumerable Sets.............................260
4.3.1	
Finite Sets...............................................................................265
4.4	
Hartogs’ Theorem: Initial Ordinals—Ordinal Arithmetic..........270
4.5	
The Axiom of Choice: The Axiom of Regularity...........................282
4.6	
Other Axiomatizations of Set Theory.............................................293
4.6.1	
Morse–Kelley (MK)..............................................................293
4.6.2	
Zermelo–Fraenkel (ZF)........................................................294
4.6.3	
The Theory of Types (ST).....................................................296
4.6.3.1	
ST1 (Extensionality Axiom).................................297
4.6.3.2	
ST2 (Comprehension Axiom Scheme)................297
4.6.3.3	
ST3 (Axiom of Infinity).........................................298
4.6.4	
Quine’s Theories NF and ML..............................................300
4.6.4.1	
NF1 (Extensionality).............................................300
4.6.4.2	
NF2 (Comprehension)...........................................301
4.6.5	
Set Theory with Urelements................................................303
 5. Computability.............................................................................................. 311
5.1	
Algorithms: Turing Machines.......................................................... 311
5.2	
Diagrams............................................................................................. 317
5.3	
Partial Recursive Functions: Unsolvable Problems......................325
5.4	
The Kleene–Mostowski Hierarchy: Recursively 
Enumerable Sets.................................................................................341
5.5	
Other Notions of Computability......................................................355
5.5.1	
Herbrand–Gödel Computability........................................355
5.5.2	
Markov Algorithms..............................................................362
5.6	
Decision Problems.............................................................................373

xi
Contents
Appendix A: Second-Order Logic...................................................................379
Appendix B: First Steps in Modal Propositional Logic..............................395
Appendix C: A Consistency Proof for Formal Number Theory...............407
Answers to Selected Exercises......................................................................... 419
Bibliography........................................................................................................451
Notations..............................................................................................................467
Index......................................................................................................................473


xiii
Preface
This book is a compact introduction to many of the important topics of 
mathematical logic, comprising natural and unrestricted set-theoretic 
methods. Here is a very brief sketch of some of its contents:
	
1.	One of the most prominent features of this new edition is a con-
sistency proof for formal number theory due to Kurt Schütte. This 
proof had been included in the first edition in 1964. It was dropped 
in later editions and is now brought back by “popular demand.” 
Quite a few people thought I had made a mistake in abandoning it. 
	
2.	There is now a greatly enlarged bibliography, with items that should 
be interesting to a wide audience. Many of them have to do with 
the philosophical significance of some important results of modern 
mathematical logic.
As before, the material in this book can be covered in two semesters, 
but Chapters 1 through 3 are quite adequate for a one-semester course. 
Bibliographic references are aimed at giving the best source of information, 
which is not always the earliest; hence, these references give no indication of 
priority.
I believe that the essential parts of the book can be read with ease by any-
one with some experience in abstract mathematical thinking. There is, how-
ever, no specific prerequisite.
This book owes an obvious debt to the standard works of Hilbert and 
Bernays (1934, 1939), Kleene (1952), Rosser (1953), and Church (1956). I am also 
grateful to many people for their help, including my editor Jessica Vakili, as 
well as the editors of the earlier editions.


xv
Introduction
One of the popular definitions of logic is that it is the analysis of methods of 
reasoning. In studying these methods, logic is interested in the form rather 
than the content of the argument. For example, consider these two arguments:
	
1.	All men are mortal. Socrates is a man. Hence, Socrates is mortal.
	
2.	All cats like fish. Silvy is a cat. Hence, Silvy likes fish.
Both have the same form: All A are B. S is an A. Hence, S is a B. The truth or 
falsity of the particular premises and conclusions is of no concern to logi-
cians. They want to know only whether the premises imply the conclusion. 
The systematic formalization and cataloguing of valid methods of reasoning 
are a main task of logicians. If the work uses mathematical techniques or if it 
is primarily devoted to the study of mathematical reasoning, then it may be 
called mathematical logic. We can narrow the domain of mathematical logic if 
we define its principal aim to be a precise and adequate understanding of the 
notion of mathematical proof.
Impeccable definitions have little value at the beginning of the study of a 
subject. The best way to find out what mathematical logic is about is to start 
doing it, and students are advised to begin reading the book even though 
(or especially if) they have qualms about the meaning and purpose of the 
subject.
Although logic is basic to all other studies, its fundamental and apparently 
self-evident character discouraged any deep logical investigations until the 
late nineteenth century. Then, under the impetus of the discovery of non-
Euclidean geometry and the desire to provide a rigorous foundation for 
calculus and higher analysis, interest in logic was revived. This new inter-
est, however, was still rather unenthusiastic until, around the turn of the 
century, the mathematical world was shocked by the discovery of the para-
doxes—that is, arguments that lead to contradictions. The most important 
paradoxes are described here.
	
1.	Russell’s paradox (1902): By a set, we mean any collection of objects—
for example, the set of all even integers or the set of all saxophone 
players in Brooklyn. The objects that make up a set are called its 
members or elements. Sets may themselves be members of sets; for 
example, the set of all sets of integers has sets as its members. Most 
sets are not members of themselves; the set of cats, for example, is not 
a member of itself because the set of cats is not a cat. However, there 
may be sets that do belong to themselves—perhaps, for example, 

xvi
Introduction
a set containing all sets. Now, consider the set A of all those sets X 
such that X is not a member of X. Clearly, by definition, A is a mem-
ber of A if and only if A is not a member of A. So, if A is a member of 
A, then A is also not a member of A; and if A is not a member of A, 
then A is a member of A. In any case, A is a member of A and A is not 
a member of A (see Link, 2004).
	
2.	Cantor’s paradox (1899): This paradox involves the theory of cardinal 
numbers and may be skipped by those readers having no previous 
acquaintance with that theory. The cardinal number Y of a set Y is a 
measure of the size of the set; Y
Z
=
 if and only if Y is equinumerous 
with Z (i.e., there is a one–one correspondence between Y and Z). 
We define Y
Z

 to mean that Y is equinumerous with a subset of 
Z; by Y
Z
<
 we mean Y Z
  and Y
Z
≠
. Cantor proved that if P (Y) 
is the set of all subsets of Y, then Y
Y
< P ( ). Let V be the universal 
set—that is, the set of all sets. Now, P (V) is a subset of V; so it fol-
lows easily that P ( )
V
V

. On the other hand, by Cantor’s theorem, 
V
V
< P ( ). Bernstein’s theorem asserts that if Y
Z
  and Z
Y
 , then 
Y
Z
=
. Hence, V
V
= P ( ), contradicting V
V
< P ( ).
	
3.	Burali-Forti’s paradox (1897): This paradox is the analogue in the the-
ory of ordinal numbers of Cantor’s paradox and requires familiarity 
with ordinal number theory. Given any ordinal number, there is still 
a larger ordinal number. But the ordinal number determined by the 
set of all ordinal numbers is the largest ordinal number.
	
4.	The liar paradox: A man says, “I am lying.” If he is lying, then what he 
says is true and so he is not lying. If he is not lying, then what he says 
is true, and so he is lying. In any case, he is lying and he is not lying.*
	
5.	Richard’s paradox (1905): Some phrases of the English language denote 
real numbers; for example, “the ratio between the circumference and 
diameter of a circle” denotes the number π. All the phrases of the 
English language can be enumerated in a standard way: order all 
phrases that have k letters lexicographically (as in a dictionary) and 
then place all phrases with k letters before all phrases with a larger 
number of letters. Hence, all phrases of the English language that 
denote real numbers can be enumerated merely by omitting all other 
phrases in the given standard enumeration. Call the nth real number 
in this enumeration the nth Richard number. Consider the phrase: 
“the real number whose nth decimal place is 1 if the nth decimal 
*	 The Cretan “paradox,” known in antiquity, is similar to the liar paradox. The Cretan philoso-
pher Epimenides said, “All Cretans are liars.” If what he said is true, then, since Epimenides 
is a Cretan, it must be false. Hence, what he said is false. Thus, there must be some Cretan 
who is not a liar. This is not logically impossible; so we do not have a genuine paradox. 
However, the fact that the utterance by Epimenides of that false sentence could imply the 
existence of some Cretan who is not a liar is rather unsettling.

xvii
Introduction
place of the nth Richard number is not 1, and whose nth decimal 
place is 2 if the nth decimal place of the nth Richard number is 1.” 
This phrase defines a Richard number—say, the kth Richard num-
ber; but, by its definition, it differs from the kth Richard number in 
the kth decimal place.
	
6.	Berry’s paradox (1906): There are only a finite number of symbols (let-
ters, punctuation signs, etc.) in the English language. Hence, there 
are only a finite number of English expressions that contain fewer 
than 200 occurrences of symbols (allowing repetitions). There are, 
therefore, only a finite number of positive integers that are denoted 
by an English expression containing fewer than 200 occurrences 
of symbols. Let k be the least positive integer that is not denoted by an 
English expression containing fewer than 200 occurrences of symbols. The 
italicized English phrase contains fewer than 200 occurrences of 
symbols and denotes the integer k.
	
7.	Grelling’s paradox (1908): An adjective is called autological if the prop-
erty denoted by the adjective holds for the adjective itself. An adjec-
tive is called heterological if the property denoted by the adjective 
does not apply to the adjective itself. For example, “polysyllabic” and 
“English” are autological, whereas “monosyllabic” and “French” are 
heterological. Consider the adjective “heterological.” If “heterologi-
cal” is heterological, then it is not heterological. If “heterological” is 
not heterological, then it is heterological. In either case, “heterologi-
cal” is both heterological and not heterological.
	
8.	Löb’s paradox (1955): Let A be any sentence. Let B be the sentence: “If 
this sentence is true, then A.” So B asserts, “If B is true, then A.” Now 
consider the following argument: Assume B is true; then, by B, since 
B is true, A holds. This argument shows that if B is true, then A. But 
this is exactly what B asserts. Hence, B is true. Therefore, by B, since 
B is true, A is true. Thus, every sentence is true. (This paradox may 
be more accurately attributed to Curry [1942].)
All of these paradoxes are genuine in the sense that they contain no obvi-
ous logical flaws. The logical paradoxes (1–3) involve only notions from the 
theory of sets, whereas the semantic paradoxes (4–8) also make use of con-
cepts like “denote,” “true,” and “adjective,” which need not occur within our 
standard mathematical language. For this reason, the logical paradoxes are 
a much greater threat to a mathematician’s peace of mind than the semantic 
paradoxes.
Analysis of the paradoxes has led to various proposals for avoiding them. 
All of these proposals are restrictive in one way or another of the “naive” 
concepts that enter into the derivation of the paradoxes. Russell noted the 
self-reference present in all the paradoxes and suggested that every object 
must have a definite nonnegative integer as its “type.” Then an expression 

xviii
Introduction
“x is a member of the set y” is to be considered meaningful if and only if the 
type of y is one greater than the type of x.
This approach, known as the theory of types and systematized and devel-
oped in Principia Mathematica by Whitehead and Russell (1910–1913), is suc-
cessful in eliminating the known paradoxes,* but it is clumsy in practice and 
has certain other drawbacks as well. A different criticism of the logical para-
doxes is aimed at their assumption that, for every property P(x), there exists 
a corresponding set of all objects x that satisfy P(x). If we reject this assump-
tion, then the logical paradoxes are no longer derivable.† It is necessary, how-
ever, to provide new postulates that will enable us to prove the existence of 
those sets that are needed by the practicing mathematician. The first such 
axiomatic set theory was invented by Zermelo (1908). In Chapter 4, we shall 
present an axiomatic theory of sets that is a descendant of Zermelo’s system 
(with some new twists given to it by von Neumann, R. Robinson, Bernays, 
and Gödel). There are also various hybrid theories combining some aspects 
of type theory and axiomatic set theory—for example, Quine’s system NF.
A more radical interpretation of the paradoxes has been advocated by 
Brouwer and his intuitionist school (see Heyting, 1956). They refuse to accept 
the universality of certain basic logical laws, such as the law of excluded 
middle: P or not P. Such a law, they claim, is true for finite sets, but it is 
invalid to extend it on a wholesale basis to all sets. Likewise, they say it is 
invalid to conclude that “There exists an object x such that not-P(x)” follows 
from the negation of “For all x, P(x)”; we are justified in asserting the exis-
tence of an object having a certain property only if we know an effective 
method for constructing (or finding) such an object. The paradoxes are not 
derivable (or even meaningful) if we obey the intuitionist strictures, but so 
are many important theorems of everyday mathematics, and for this reason, 
intuitionism has found few converts among mathematicians.
Exercises
P.1	 Use the sentence
	
(*) This entire sentence is false or 2 + 2 = 5 to prove that 2 + 2 = 5. Comment 
on the significance of this proof.
P.2	 Show how the following has a paradoxical result.
	
The smallest positive integer that is not denoted by a phrase in this 
book.
*	 Russells’s paradox, for example, depends on the existence of the set A of all sets that are not 
members of themselves. Because, according to the theory of types, it is meaningless to say 
that a set belongs to itself, there is no such set A.
†	 Russell’s paradox then proves that there is no set A of all sets that do not belong to them-
selves. The paradoxes of Cantor and Burali-Forti show that there is no universal set and no 
set that contains all ordinal numbers. The semantic paradoxes cannot even be formulated, 
since they involve notions not expressible within the system.

xix
Introduction
Whatever approach one takes to the paradoxes, it is necessary first to 
examine the language of logic and mathematics to see what symbols may be 
used, to determine the ways in which these symbols are put together to form 
terms, formulas, sentences, and proofs and to find out what can and cannot 
be proved if certain axioms and rules of inference are assumed. This is one of 
the tasks of mathematical logic, and until it is done, there is no basis for com-
paring rival foundations of logic and mathematics. The deep and devastat-
ing results of Gödel, Tarski, Church, Rosser, Kleene, and many others have 
been ample reward for the labor invested and have earned for mathematical 
logic its status as an independent branch of mathematics.
For the absolute novice, a summary will be given here of some of the basic 
notations, ideas, and results used in the text. The reader is urged to skip 
these explanations now and, if necessary, to refer to them later on.
A set is a collection of objects.* The objects in the collection are called 
­elements or members of the set. We shall write “x ∈ y” for the statement that 
x is a member of y. (Synonymous expressions are “x belongs to y” and “y 
­contains x.”) The negation of “x ∈ y” will be written “x ∉ y.”
By “x ⊆ y” we mean that every member of x is also a member of y (synony-
mously, that x is a subset of y or that x is included in y). We shall write “t = s” to 
mean that t and s denote the same object. As usual, “t ≠ s” is the negation of 
“t = s.” For sets x and y, we assume that x = y if and only if x ⊆ y and y ⊆ x—that 
is, if and only if x and y have the same members. A set x is called a proper 
subset of a set y, written “x ⊂ y” if x ⊆ y but x ≠ y. (The notation x ⊈ y is often 
used instead of x ⊂ y.)
The union x ∪ y of sets x and y is defined to be the set of all objects that are 
members of x or y or both. Hence, x ∪ x = x, x ∪ y = y ∪ x, and (x ∪ y) ∪ z = 
x ∪ (y ∪ z). The intersection x ∩ y is the set of objects that x and y have in com-
mon. Therefore, x ∩ x = x, x ∩ y = y ∩ x, and (x ∩ y) ∩ z = x ∩ (y ∩ z). Moreover, 
x ∩ (y ∪ z) = (x ∩ y) ∪ (x ∩ z) and x ∪ (y ∩ z) = (x ∪ y) ∩ (x ∪ z). The relative 
complement x − y is the set of members of x that are not members of y. We also 
postulate the existence of the empty set (or null set) ∅—that is, a set that has no 
members at all. Then x ∩ ∅ = ∅, x ∪ ∅ = x, x −∅ = x, ∅ −x = ∅, and x − x = ∅. 
Sets x and y are called disjoint if x ∩ y = ∅.
Given any objects b1, …, bk, the set that contains b1, …, bk as its only mem-
bers is denoted {b1, …, bk}. In particular, {x, y} is a set having x and y as its only 
members and, if x ≠ y, is called the unordered pair of x and y. The set {x, x} 
is identical with {x} and is called the unit set of x. Notice that {x, y} = {y, x}. 
By 〈b1, …, bk〉 we mean the ordered k-tuple of b1, …, bk. The basic property of 
ordered k-tuples is that 〈b1, …, bk〉 = 〈c1, …, ck〉 if and only if b1 = c1, b2 = c2, …, 
bk = ck. Thus, 〈b1, b2〉 = 〈b2, b1〉 if and only if b1 = b2. Ordered 2-tuples are called 
*	 Which collections of objects form sets will not be specified here. Care will be exercised to 
avoid using any ideas or procedures that may lead to the paradoxes; all the results can be 
formalized in the axiomatic set theory of Chapter 4. The term “class” is sometimes used as a 
synonym for “set,” but it will be avoided here because it has a different meaning in Chapter 4. 
If a property P(x) does determine a set, that set is often denoted {x|P(x)}.

xx
Introduction
ordered pairs. The ordered 1-tuple 〈b〉 is taken to be b itself. If X is a set and k 
is a positive integer, we denote by Xk the set of all ordered k-tuples 〈b1, …, bk〉 
of elements b1, …, bk of X. In particular, X1 is X itself. If Y and Z are sets, then 
by Y × Z we denote the set of all ordered pairs 〈y, z〉 such that y ∈ Y and z ∈ Z. 
Y × Z is called the Cartesian product of Y and Z.
An n-place relation (or a relation with n arguments) on a set X is a subset 
of Xn—that is, a set of ordered n-tuples of elements of X. For example, the 
3-place relation of betweenness for points on a line is the set of all 3-tuples 
〈x, y, z〉 such that the point x lies between the points y and z. A 2-place relation 
is called a binary relation; for example, the binary relation of fatherhood on 
the set of human beings is the set of all ordered pairs 〈x, y〉 such that x and y 
are human beings and x is the father of y. A 1-place relation on X is a subset 
of X and is called a property on X.
Given a binary relation R on a set X, the domain of R is defined to be the set 
of all y such that 〈y, z〉 ∈ R for some z; the range of R is the set of all z such that 
〈y, z〉 ∈ R for some y; and the field of R is the union of the domain and range 
of R. The inverse relation R−1 of R is the set of all ordered pairs 〈y, z〉 such that 
〈z, y〉 ∈ R. For example, the domain of the relation < on the set ω of nonnega-
tive integers* is ω, its range is ω − {0}, and the inverse of < is >. Notation: Very 
often xRy is written instead of 〈x, y〉 ∈ R. Thus, in the example just given, we 
usually write x < y instead of 〈x, y〉 ∈ <.
A binary relation R is said to be reflexive if xRx for all x in the field of R; R 
is symmetric if xRy implies yRx; and R is transitive if xRy and yRz imply xRz. 
The following are examples: The relation ≤ on the set of integers is reflexive 
and transitive but not symmetric. The relation “having at least one parent 
in common” on the set of human beings is reflexive and symmetric, but not 
transitive.
A binary relation that is reflexive, symmetric, and transitive is called an 
equivalence relation. Examples of equivalence relations are (1) the identity rela-
tion IX on a set X, consisting of all pairs 〈x, x〉, where x ∈ X; (2) given a fixed 
positive integer n, the relation x ≡ y (mod n), which holds when x and y are 
integers and x − y is divisible by n; (3) the congruence relation on the set of 
triangles in a plane; and (4) the similarity relation on the set of triangles in 
a plane. Given an equivalence relation R whose field is X, and given any 
y ∈ X, define [y] as the set of all z in X such that yRz. Then [y] is called 
the R-equivalence class of y. Clearly, [u] = [v] if and only if uRv. Moreover, if 
[u] ≠ [v], then [u] ∩ [v] = ∅; that is, different R-equivalence classes have no 
elements in common. Hence, the set X is completely partitioned into the 
R-equivalence classes. In example (1) earlier, the equivalence classes are just 
the unit sets {x}, where x ∈ X. In example (2), there are n equivalence classes, 
the kth equivalence class (k = 0, 1, …, n − 1) being the set of all integers that 
leave the remainder k upon division by n.
*	 ω will also be referred to as the set of natural numbers.

xxi
Introduction
A function f is a binary relation such that 〈x, y 〉 ∈ f and 〈x, z〉 ∈ f imply y = z. 
Thus, for any element x of the domain of a function f, there is a unique y such 
that 〈x, y〉 ∈ f; this unique y is denoted f(x). If x is in the domain of f, then f(x) 
is said to be defined. A function f with domain X and range Y is said to be a 
function from X onto Y. If f is a function from X onto a subset of Z, then f is 
said to be a function from X into Z. For example, if the domain of f is the set 
of integers and f(x) = 2x for every integer x, then f is a function from the set of 
integers onto the set of even integers, and f is a function from the set of inte-
gers into the set of integers. A function whose domain consists of n-tuples is 
said to be a function of n arguments. A total function of n arguments on a set X is 
a function f whose domain is Xn. It is customary to write f(x1, …, xn) instead 
of f(〈x1, …, xn〉), and we refer to f(x1, …, xn) as the value of f for the arguments 
x1, …, xn. A partial function of n arguments on a set X is a function whose 
domain is a subset of Xn. For example, ordinary division is a partial, but not 
total, function of two arguments on the set of integers, since division by 0 is 
not defined. If f is a function with domain X and range Y, then the restriction 
fz of f to a set Z is the function f ∩ (Z × Y). Then fZ(u) = v if and only if u ∈ Z 
and f(u) = v. The image of the set Z under the function f is the range of fz. The 
inverse image of a set W under the function f is the set of all u in the domain 
of f such that f(u) ∈ W. We say that f maps X onto (into) Y if X is a subset of the 
domain of f and the image of X under f is (a subset of) Y. By an n-place opera-
tion (or operation with n arguments) on a set X we mean a function from Xn 
into X. For example, ordinary addition is a binary (i.e., 2-place) operation 
on the set of natural numbers {0, 1, 2, …}. But ordinary subtraction is not a 
binary operation on the set of natural numbers.
The composition f ⚬ ɡ (sometimes denoted fɡ) of functions f and ɡ is the 
function such that (f ⚬ ɡ)(x) = f(ɡ(x)); (f ⚬ ɡ)(x) is defined if and only if ɡ(x) 
is defined and f(ɡ(x)) is defined. For example, if ɡ(x) = x2 and f(x) = x + 1 for 
every integer x, then (f ⚬ ɡ)(x) = x2 + 1 and (ɡ ⚬ f)(x) = (x + 1)2. Also, if h(x) = −x 
for every real number x and f x
x
( ) =
 for every nonnegative real number x, 
then (f ⚬ h)(x) is defined only for x ⩽ 0, and, for such x
f h x
x
,(
)( )
°
=
−. A func-
tion f such that f(x) = f(y) implies x = y is called a 1–1 (one–one) function. For 
example, the identity relation IX on a set X is a 1–1 function, since IX(y) = y for 
every y ∈ X; the function g with domain ω, such that ɡ(x) = 2x for every x ∈ ω, 
is 1–1 (one–one); but the function h whose domain is the set of integers and 
such that h(x) = x2 for every integer x is not 1–1, since h(−1) = h(1). Notice that 
a function f is 1–1 if and only if its inverse relation f −1 is a function. If the 
domain and range of a 1–1 function f are X and Y, then f is said to be a 1–1 
­correspondence between X and Y; then f −1 is a 1–1 correspondence between 
Y and X, and (f −1 ⚬ f) = IX and (f ⚬ f −1) = IY. If f is a 1–1 correspondence 
between X and Y and ɡ is a 1–1 correspondence between Y and Z, then ɡ ⚬ f 
is a 1–1 correspondence between X and Z. Sets X and Y are said to be equinu-
merous (written X ≅ Y) if and only if there is a 1–1 correspondence between 
X and Y. Clearly, X ≅ X, X ≅ Y implies Y ≅ X, and X ≅ Y and Y ≅ Z implies 
X ≅ Z. It is somewhat harder to show that, if X ≅ Y1 ⊆ Y and Y ≅ X1 ⊆ X, then 

xxii
Introduction
X ≅ Y (see Bernstein’s theorem in Chapter 4). If X ≅ Y, one says that X and Y 
have the same cardinal number, and if X is equinumerous with a subset of Y but 
Y is not equinumerous with a subset of X, one says that the cardinal number 
of X is smaller than the cardinal number of Y.*
A set X is denumerable if it is equinumerous with the set of positive integers. 
A denumerable set is said to have cardinal number ℵ0, and any set equinu-
merous with the set of all subsets of a denumerable set is said to have the 
cardinal number 2
0
ℵ (or to have the power of the continuum). A set X is finite 
if it is empty or if it is equinumerous with the set {1, 2, …, n} of all positive 
integers that are less than or equal to some positive integer n. A set that is 
not finite is said to be infinite. A set is countable if it is either finite or denu-
merable. Clearly, any subset of a denumerable set is countable. A denumerable 
sequence is a function s whose domain is the set of positive integers; one usu-
ally writes sn instead of s(n). A finite sequence is a function whose domain is 
the empty set or {1, 2, …, n} for some positive integer n.
Let P(x, y1, …, yk) be some relation on the set of nonnegative integers. 
In particular, P may involve only the variable x and thus be a property. If 
P(0, y1, …, yk) holds, and, if, for every n, P(n, y1, …, yk) implies P(n + 1, y1, …, yk), 
then P(x, y1, …, yk) is true for all nonnegative integers x (principle of mathemati-
cal induction). In applying this principle, one usually proves that, for every n, 
P(n, y1, …, yk) implies P(n + 1, y1, …, yk) by assuming P(n, y1, …, yk) and then 
deducing P(n + 1, y1, …, yk); in the course of this deduction, P(n, y1, …, yk) 
is called the inductive hypothesis. If the relation P actually involves variables 
y1, …, yk other than x, then the proof is said to proceed by induction on x. 
A similar induction principle holds for the set of integers greater than some 
fixed integer j. An example is as follows: to prove by mathematical induc-
tion that the sum of the first n odd integers 1 + 3 + 5 + ⋯ + (2n − 1) is n2, first 
show that 1 = 12 (i.e., P(1)), and then, that if 1
3
5
2
1
2
+
+
+
+
−
=

(
)
n
n , then 
1
3
5
2
1
2
1
1 2
+
+
+
+
−
+
+
=
+

(
)
(
)
(
)
n
n
n
 (i.e., if P(n), then P(n + 1)). From the 
principle of mathematical induction, one can prove the principle of complete 
induction: If for every nonnegative integer x the assumption that P(u, y1, …, yk) 
is true for all u < x implies that P(x, y1, …, yk) holds, then, for all nonnegative 
integers x, P(x, y1, …, yk) is true. (Exercise: Show by complete induction that 
every integer greater than 1 is divisible by a prime number.)
A partial order is a binary relation R such that R is transitive and, for every 
x in the field of R, xRx is false. If R is a partial order, then the relation R′ that 
is the union of R and the set of all ordered pairs 〈x, x〉, where x is in the field 
of R, we shall call a reflexive partial order; in the literature, “partial order” is 
used for either partial order or reflexive partial order. Notice that (xRy and 
yRx) is impossible if R is a partial order, whereas (xRy and yRx) implies x = y 
if R is a reflexive partial order. A (reflexive) total order is a (reflexive) partial 
*	 One can attempt to define the cardinal number of a set X as the collection [X] of all sets equi-
numerous with X. However, in certain axiomatic set theories, [X] does not exist, whereas in 
others [X] exists but is not a set.

xxiii
Introduction
order such that, for any x and y in the field of R, either x = y or xRy or yRx. For 
example, (1) the relation < on the set of integers is a total order, whereas ≤ is 
a reflexive total order; (2) the relation ⊂ on the set of all subsets of the set of 
positive integers is a partial order but not a total order, whereas the relation ⊆ 
is a reflexive partial order but not a reflexive total order. If B is a subset of the 
field of a binary relation R, then an element y of B is called an R-least element 
of B if yRz for every element z of B different from y. A well-order (or a well-
ordering relation) is a total order R such that every nonempty subset of the 
field of R has an R-least element. For example, (1) the relation < on the set of 
nonnegative integers is a well-order, (2) the relation < on the set of nonnega-
tive rational numbers is a total order but not a well-order, and (3) the relation 
< on the set of integers is a total order but not a well-order. Associated with 
every well-order R having field X, there is a complete induction principle: if P is 
a property such that, for any u in X, whenever all z in X such that zRu have 
the property P, then u has the property P, then it follows that all members 
of X have the property P. If the set X is infinite, a proof using this principle 
is called a proof by transfinite induction. One says that a set X can be well-
ordered if there exists a well-order whose field is X. An assumption that is 
useful in modern mathematics but about the validity of which there has been 
considerable controversy is the well-ordering principle: every set can be well-
ordered. The well-ordering principle is equivalent (given the usual axioms of 
set theory) to the axiom of choice: for any set X of nonempty pairwise disjoint 
sets, there is a set Y (called a choice set) that contains exactly one element in 
common with each set in X.
Let B be a nonempty set, f a function from B into B, and g a function from 
B2 into B. Write x′ for f(x) and x ∩ y for g(x, y). Then 〈B, f, g〉 is called a Boolean 
algebra if B contains at least two elements and the following conditions are 
satisfied:
	
1.	x ∩ y = y ∩ x for all x and y in B.
	
2.	(x ∩ y) ∩ z = x ∩ (y ∩ z) for all x, y, z in B.
	
3.	x ∩ y′ = z ∩ z′ if and only if x ∩ y = x for all x, y, z in B.
Let x ∪ y stand for (x′ ∩ y′)′, and write x ⩽ y for x ∩ y = x. It is easily proved 
that z ∩ z′ = w ∩ w′ for any w and z in B; we denote the value of z ∩ z′ by 0. 
Let 1 stand for 0′. Then z ∪ z′ = 1 for all z in B. Note also that ≤ is a reflexive 
partial order on B, and 〈B, f, ∪〉 is a Boolean algebra. (The symbols ∩, ∪, 0, 1 
should not be confused with the corresponding symbols used in set theory 
and arithmetic.) An ideal J in 〈B, f, ɡ〉 is a nonempty subset of B such that (1) if 
x ∈ J and y ∈ J, then x ∪ y ∈ J, and (2) if x ∈ J and y ∈ B, then x ∩ y ∈ J. Clearly, 
{0} and B are ideals. An ideal different from B is called a proper ideal. A maxi-
mal ideal is a proper ideal that is included in no other proper ideal. It can be 
shown that a proper ideal J is maximal if and only if, for any u in B, u ∈ J or 
u′ ∈ J. From the axiom of choice it can be proved that every Boolean algebra 

xxiv
Introduction
contains a maximal ideal, or, equivalently, that every proper ideal is included 
in some maximal ideal. For example, let B be the set of all subsets of a set X; 
for Y ∈ B, let Y′ = X −Y, and for Y and Z in B, let Y ∩ Z be the ordinary set-
theoretic intersection of Y and Z. Then 〈B,′ ∩〉 is a Boolean algebra. The 0 of B 
is the empty set ∅, and 1 is X. For each element u in X, the set Ju of all subsets 
of X that do not contain u is a maximal ideal. For a detailed study of Boolean 
algebras, see Sikorski (1960), Halmos (1963), and Mendelson (1970).

1
1
The Propositional Calculus
1.1  Propositional Connectives: Truth Tables
Sentences may be combined in various ways to form more complicated sen-
tences. We shall consider only truth-functional combinations, in which the 
truth or falsity of the new sentence is determined by the truth or falsity of its 
component sentences.
Negation is one of the simplest operations on sentences. Although a sen-
tence in a natural language may be negated in many ways, we shall adopt a 
uniform procedure: placing a sign for negation, the symbol ¬, in front of the 
entire sentence. Thus, if A is a sentence, then ¬A denotes the negation of A.
The truth-functional character of negation is made apparent in the follow-
ing truth table:
	
A
A
¬
T
F
F
T
When A is true, ¬A is false; when A is false, ¬A is true. We use T and F to 
denote the truth values true and false.
Another common truth-functional operation is the conjunction: “and.” The 
conjunction of sentences A and B will be designated by A ∧ B and has the 
following truth table:
	
A
B
A
B
∧
T
T
T
F
T
F
T
F
F
F
F
F
A ∧ B is true when and only when both A and B are true. A and B are called 
the conjuncts of A ∧ B. Note that there are four rows in the table, correspond-
ing to the number of possible assignments of truth values to A and B.
In natural languages, there are two distinct uses of “or”: the inclusive and 
the exclusive. According to the inclusive usage, “A or B” means “A or B or 
both,” whereas according to the exclusive usage, the meaning is “A or B, but 

2
Introduction to Mathematical Logic
not both,” We shall introduce a special sign, ∨, for the inclusive connective. 
Its truth table is as follows:
	
A
B
A
B
∨
T
T
T
F
T
T
T
F
T
F
F
F
Thus, A ∨ B is false when and only when both A and B are false. “A ∨ B” is 
called a disjunction, with the disjuncts A and B.
Another important truth-functional operation is the conditional: “if A, then 
B.” Ordinary usage is unclear here. Surely, “if A, then B” is false when the 
antecedent A is true and the consequent B is false. However, in other cases, 
there is no well-defined truth value. For example, the following sentences 
would be considered neither true nor false:
	
1.	If 1 + 1 = 2, then Paris is the capital of France.
	
2.	If 1 + 1 ≠ 2, then Paris is the capital of France.
	
3.	If 1 + 1 ≠ 2, then Rome is the capital of France.
Their meaning is unclear, since we are accustomed to the assertion of some 
sort of relationship (usually causal) between the antecedent and the conse-
quent. We shall make the convention that “if A, then B” is false when and 
only when A is true and B is false. Thus, sentences 1–3 are assumed to be 
true. Let us denote “if A, then B” by “A ⇒ B.” An expression “A ⇒ B” is called 
a conditional. Then ⇒ has the following truth table:
	
A
B
A
B
⇒
T
T
T
F
T
T
T
F
F
F
F
T
This sharpening of the meaning of “if A, then B” involves no conflict with 
ordinary usage, but rather only an extension of that usage.*
*	 There is a common non-truth-functional interpretation of “if A, then B” connected with 
causal laws. The sentence “if this piece of iron is placed in water at time t, then the iron will 
dissolve” is regarded as false even in the case that the piece of iron is not placed in water at 
time t—that is, even when the antecedent is false. Another non-truth-functional usage occurs 
in so-called counterfactual conditionals, such as “if Sir Walter Scott had not written any nov-
els, then there would have been no War Between the States.” (This was Mark Twain’s conten-
tion in Life on the Mississippi: “Sir Walter had so large a hand in making Southern character, as 
it existed before the war, that he is in great measure responsible for the war.”) This sentence 
might be asserted to be false even though the antecedent is admittedly false. However, causal 
laws and counterfactual conditions seem not to be needed in mathematics and logic. For a 
clear treatment of conditionals and other connectives, see Quine (1951). (The quotation from 
Life on the Mississippi was brought to my attention by Professor J.C. Owings, Jr.)

3
The Propositional Calculus
A justification of the truth table for ⇒ is the fact that we wish “if A and 
B, then B” to be true in all cases. Thus, the case in which A and B are true 
justifies the first line of our truth table for ⇒, since (A and B) and B are both 
true. If A is false and B true, then (A and B) is false while B is true. This cor-
responds to the second line of the truth table. Finally, if A is false and B is 
false, (A and B) is false and B is false. This gives the fourth line of the table. 
Still more support for our definition comes from the meaning of statements 
such as “for every x, if x is an odd positive integer, then x2 is an odd positive 
integer.” This asserts that, for every x, the statement “if x is an odd positive 
integer, then x2 is an odd positive integer” is true. Now we certainly do not 
want to consider cases in which x is not an odd positive integer as coun-
terexamples to our general assertion. This supports the second and fourth 
lines of our truth table. In addition, any case in which x is an odd positive 
integer and x2 is an odd positive integer confirms our general assertion. 
This corresponds to the first line of the table.
Let us denote “A if and only if B” by “A ⇔ B.” Such an expression is called 
a biconditional. Clearly, A ⇔ B is true when and only when A and B have the 
same truth value. Its truth table, therefore is:
	
A
B
A
B
⇔
T
T
T
F
T
F
T
F
F
F
F
T
The symbols ¬, ∧, ∨, ⇒, and ⇔ will be called propositional connectives.* Any 
sentence built up by application of these connectives has a truth value that 
depends on the truth values of the constituent sentences. In order to make 
this dependence apparent, let us apply the name statement form to an expres-
sion built up from the statement letters A, B, C, and so on by appropriate appli-
cations of the propositional connectives.
	
1.	All statement letters (capital italic letters) and such letters with 
numerical subscripts† are statement forms.
	
2.	If B and C are statement forms, then so are (¬B), (B ∧ C), (B ∨ C), 
(B ⇒ C), and (B ⇔ C).
*	 We have been avoiding and shall in the future avoid the use of quotation marks to form 
names whenever this is not likely to cause confusion. The given sentence should have quota-
tion marks around each of the connectives. See Quine (1951, pp. 23–27).
†	 For example, A1, A2, A17, B31, C2, ….

4
Introduction to Mathematical Logic
	
3.	Only those expressions are statement forms that are determined 
to be so by means of conditions 1 and 2.* Some examples of state-
ment forms are B, (¬C2), (D3 ∧ (¬B)), (((¬B1) ∨ B2) ⇒ (A1 ∧ C2)), and 
(((¬A) ⇔ A) ⇔ (C ⇒ (B ∨ C))).
For every assignment of truth values T or F to the statement letters that occur 
in a statement form, there corresponds, by virtue of the truth tables for the 
propositional connectives, a truth value for the statement form. Thus, each 
statement form determines a truth function, which can be graphically repre-
sented by a truth table for the statement form. For example, the statement 
form (((¬A) ∨ B) ⇒ C) has the following truth table:
	
A
B
C
A
A
B
A
B
C
(
)
((
)
)
(((
)
)
)
¬
¬
∨
¬
∨
⇒
T
T
T
F
T
T
F
T
T
T
T
T
T
F
T
F
F
T
F
F
T
T
T
T
F
F
F
F
T
T
T
T
T
T
T
T
T
T
F
F
F
F
F
F
F
F
F
F
Each row represents an assignment of truth values to the statement letters 
A, B, and C and the corresponding truth values assumed by the statement 
forms that appear in the construction of (((¬A) ∨ B) ⇒ C).
The truth table for ((A ⇔ B) ⇒ ((¬A) ∧ B)) is as follows:
	
A
B
A
B
A
A
B
A
B
A
B
(
)
(
)
((
)
)
((
)
((
)
))
⇔
¬
¬
∧
⇔
⇒
¬
∧
T
T
T
F
F
F
F
T
F
T
T
T
T
F
F
F
F
T
F
F
T
T
F
F
If there are n distinct letters in a statement form, then there are 2n possible 
assignments of truth values to the statement letters and, hence, 2n rows in 
the truth table.
*	 This can be rephrased as follows: C  is a statement form if and only if there is a finite sequence 
B1, …, Bn (n ≥ 1) such that Bn = C  and, if 1 ≤ i ≤ n, Bi is either a statement letter or a negation, con-
junction, disjunction, conditional, or biconditional constructed from previous expressions in 
the sequence. Notice that we use script letters A, B, C, … to stand for arbitrary expressions, 
whereas italic letters are used as statement letters.

5
The Propositional Calculus
A truth table can be abbreviated by writing only the full statement form, 
putting the truth values of the statement letters underneath all occurrences 
of these letters, and writing, step by step, the truth values of each component 
statement form under the principal connective of the form.* As an example, 
for ((A ⇔ B) ⇒ ((¬A) ∧ B)), we obtain
	
((
)
((
)
))
A
B
A
B
⇔
⇒
¬
∧
T
T
T
F
FT
F
T
F
F
T
T
TF
T
T
T
F
F
T
FT
F
F
F
T
F
F
TF
F
F
Exercises
1.1	
Let ⊕ designate the exclusive use of “or.” Thus, A ⊕ B stands for “A or 
B but not both.” Write the truth table for ⊕.
1.2	 Construct truth tables for the statement forms ((A ⇒ B) ∨ (¬A)) and 
((A ⇒ (B ⇒ C)) ⇒ ((A ⇒ B) ⇒ (A ⇒ C))).
1.3	
Write abbreviated truth tables for ((A ⇒ B) ∧ A) and ((A ∨ (¬C)) ⇔ B).
1.4	
Write the following sentences as statement forms, using statement let-
ters to stand for the atomic sentences—that is, those sentences that are 
not built up out of other sentences.
	
a.	 If Mr Jones is happy, Mrs Jones is not happy, and if Mr Jones is not 
happy, Mrs Jones is not happy.
	
b.	 Either Sam will come to the party and Max will not, or Sam will not 
come to the party and Max will enjoy himself.
	
c.	 A sufficient condition for x to be odd is that x is prime.
	
d.	 A necessary condition for a sequence s to converge is that s be 
bounded.
	
e.	 A necessary and sufficient condition for the sheikh to be happy is 
that he has wine, women, and song.
	
f.	 Fiorello goes to the movies only if a comedy is playing.
	
g.	 The bribe will be paid if and only if the goods are delivered.
	
h.	 If x is positive, x2 is positive.
	
i.	 Karpov will win the chess tournament unless Kasparov wins 
today.
*	 The principal connective of a statement form is the one that is applied last in constructing the 
form.

6
Introduction to Mathematical Logic
1.2  Tautologies
A truth function of n arguments is defined to be a function of n arguments, the 
arguments and values of which are the truth values T or F. As we have seen, 
any statement form containing n distinct statement letters determines a cor-
responding truth function of n arguments.*
A statement form that is always true, no matter what the truth values of its 
statement letters may be, is called a tautology. A statement form is a tautol-
ogy if and only if its corresponding truth function takes only the value T, 
or equivalently, if, in its truth table, the column under the statement form 
contains only Ts. An example of a tautology is (A ∨ (¬A)), the so-called law 
of the excluded middle. Other simple examples are (¬(A ∧ (¬A))), (A ⇔ (¬(¬A))), 
((A ∧ B) ⇒ A), and (A ⇒ (A ∨ B)).
B is said to logically imply C (or, synonymously, C is a logical consequence of B) 
if and only if every truth assignment to the statement letters of B and C that 
makes B true also makes C true. For example, (A ∧ B) logically implies A, A 
logically implies (A ∨ B), and (A ∧ (A ⇒ B)) logically implies B.
B and C are said to be logically equivalent if and only if B and C receive the 
same truth value under every assignment of truth values to the statement 
letters of B and C. For example, A and (¬(¬A)) are logically equivalent, as are 
(A ∧ B) and (B ∧ A).
*	 To be precise, enumerate all statement letters as follows: A, B, …, Z; A1, B1, …, Z1; A2, …,.  If a 
statement form contains the i
in
1th
th
,
,
…
 statement letters in this enumeration, where i1 < ⋯ < in, 
then the corresponding truth function is to have x
x
i
in
1 ,
,
…
, in that order, as its arguments, 
where xij corresponds to the ijth statement letter. For example, (A ⇒ B) generates the truth 
function:
	
x
x
f x
x
1
2
1
2
,
(
)
T
T
T
F
T
T
T
F
F
F
F
T
	 whereas (B ⇒ A) generates the truth function:
	
x
x
x
x
1
2
1
2
g
,
(
)
T
T
T
F
T
F
T
F
T
F
F
T

7
The Propositional Calculus
Proposition 1.1
	
a.	B logically implies C if and only if (B ⇒ C) is a tautology.
	
b.	B and C are logically equivalent if and only if (B ⇔ C) is a tautology.
Proof
	
a.	(i) Assume B logically implies C. Hence, every truth assignment 
that makes B true also makes C true. Thus, no truth assignment 
makes B true and C false. Therefore, no truth assignment makes 
(B ⇒ C) false, that is, every truth assignment makes (B ⇒ C) true. 
In other words, (B ⇒ C) is a tautology. (ii) Assume (B ⇒ C) is a 
tautology. Then, for every truth assignment, (B ⇒ C) is true, and, 
therefore, it is not the case that B is true and C false. Hence, every 
truth assignment that makes B true makes C true, that is, B logi-
cally implies C.
	
b.	(B ⇔ C) is a tautology if and only if every truth assignment makes (B ⇔ C) 
true, which is equivalent to saying that every truth assignment gives 
B and C the same truth value, that is, B and C are logically equivalent.
By means of a truth table, we have an effective procedure for determining 
whether a statement form is a tautology. Hence, by Proposition 1.1, we have 
effective procedures for determining whether a given statement form logi-
cally implies another given statement form and whether two given statement 
forms are logically equivalent.
To see whether a statement form is a tautology, there is another method 
that is often shorter than the construction of a truth table.
Examples
	
1.	Determine whether ((A ⇔ ((¬B) ∨ C)) ⇒ ((¬A) ⇒ B)) is a tautology.
Assume that the statement form 
sometimes is F (line 1). Then (A ⇔ 
((¬B) ∨ C)) is T and ((¬A) ⇒ B) is F 
(line 2). Since ((¬A) ⇒ B) is F, (¬A) 
is T and B is F (line 3). Since (¬A)is 
T, A is F (line 4). Since A  is F and 
(A ⇔ ((¬B) ∨ C)) is T, ((¬B) ∨ C) is F 
(line 5). Since ((¬B) ∨ C) is F, (¬B) 
and C are F (line 6). Since (¬B) is F, 
B is T (line 7). But B is both T and F 
(lines 7 and 3). Hence, it is impos-
sible for the form to be false.	
((A ⇔ ((¬B) ∨ C)) ⇒ ((¬A) ⇒ B))
F
1
T
F
2
T	
F
3
F
F
4
F
5
F
F
6
T
7

8
Introduction to Mathematical Logic
	
2.	Determine whether ((A ⇒ (B ∨ C)) ∨ (A ⇒ B)) is a tautology.
Assume that the form is F 
(line 1). Then (A ⇒ (B ∨ C)) and 
(A ⇒ B) are F (line 2). Since 
(A  ⇒ B) is F, A  is T and B is F 
(line 3). Since (A ⇒ (B ∨ C)) is F, 
A is T and (B ∨ C) is F (line 4). 
Since (B  ∨ C) is F, B and C are 
F (line 5). Thus, when A is T, B 
is F, and C is F, the form is F. 
Therefore, it is not a tautology.
((A ⇒ (B ∨ C)) ∨ (A ⇒ B))
F
1
F
F
2
T	
F
3
T
F
4
F
F
5
Exercises
1.5	
Determine whether the following are tautologies.
	
a.	 (((A ⇒ B) ⇒ B) ⇒ B)
	
b.	 (((A ⇒ B) ⇒ B) ⇒ A)
	
c.	 (((A ⇒ B) ⇒ A) ⇒ A)
	
d.	 (((B ⇒ C) ⇒ (A ⇒ B)) ⇒ (A ⇒ B))
	
e.	 ((A ∨ (¬(B ∧ C))) ⇒ ((A ⇔ C) ∨ B))
	
f.	 (A ⇒ (B ⇒ (B ⇒ A)))
	
g.	 ((A ∧ B) ⇒ (A ∨ C))
	
h.	 ((A ⇔ B) ⇔ (A ⇔ (B ⇔ A)))
	
i.	
((A ⇒ B) ∨ (B ⇒ A))
	
j.	
((¬(A ⇒ B)) ⇒ A)
1.6	
Determine whether the following pairs are logically equivalent.
	
a.	 ((A ⇒ B) ⇒ A) and A
	
b.	 (A ⇔ B) and ((A ⇒ B) ∧ (B ⇒ A))
	
c.	 ((¬A) ∨ B) and ((¬B) ∨ A)
	
d.	 (¬(A ⇔ B)) and (A ⇔ (¬B))
	
e.	 (A ∨ (B ⇔ C)) and ((A ∨ B) ⇔ (A ∨ C))
	
f.	 (A ⇒ (B ⇔ C)) and ((A ⇒ B) ⇔ (A ⇒ C))
	
g.	 (A ∧ (B ⇔ C)) and ((A ∧ B) ⇔ (A ∧ C))
1.7	
Prove:
	
a.	 (A ⇒ B) is logically equivalent to ((¬A) ∨ B).
	
b.	 (A ⇒ B) is logically equivalent to (¬(A ∧ (¬B))).
1.8	
Prove that B is logically equivalent to C if and only if B logically implies 
C and C logically implies B.

9
The Propositional Calculus
1.9	
Show that B and C are logically equivalent if and only if, in their truth 
tables, the columns under B and C are the same.
1.10	 Prove that B and C are logically equivalent if and only if (¬B) and (¬C) 
are logically equivalent.
1.11	 Which of the following statement forms are logically implied by (A ∧ B)?
	
a.	 A
	
b.	 B
	
c.	 (A ∨ B)
	
d.	 ((¬A) ∨ B)
	
e.	 ((¬B) ⇒ A)
	
f.	 (A ⇔ B)
	
g.	 (A ⇒ B)
	
h.	 ((¬B) ⇒ (¬A))
	
i.	
(A ∧ (¬B))
1.12	 Repeat Exercise 1.11 with (A ∧ B) replaced by (A ⇒ B) and by (¬(A ⇒ B)), 
respectively.
1.13	 Repeat Exercise 1.11 with (A ∧ B) replaced by (A ∨ B).
1.14	 Repeat Exercise 1.11 with (A ∧ B) replaced by (A ⇔ B) and by (¬(A ⇔ B)), 
respectively.
A statement form that is false for all possible truth values of its statement 
letters is said to be contradictory. Its truth table has only Fs in the column 
under the statement form. One example is (A ⇔ (¬A)):
	
A
A
A
A
(
)
(
(
))
¬
⇔¬
T
F
F
F
T
F
Another is (A ∧ (¬A)).
Notice that a statement form B is a tautology if and only if (¬B) is contra-
dictory, and vice versa.
A sentence (in some natural language like English or in a formal theory)* 
that arises from a tautology by the substitution of sentences for all the state-
ment letters, with occurrences of the same statement letter being replaced by 
the same sentence, is said to be logically true (according to the propositional 
calculus). Such a sentence may be said to be true by virtue of its truth-func-
tional structure alone. An example is the English sentence, “If it is raining or 
it is snowing, and it is not snowing, then it is raining,” which arises by substi-
tution from the tautology (((A ∨ B) ∧ (¬B)) ⇒ A). A sentence that comes from 
*	 By a formal theory we mean an artificial language in which the notions of meaningful expres-
sions, axioms, and rules of inference are precisely described (see page 27).

10
Introduction to Mathematical Logic
a contradictory statement form by means of substitution is said to be logically 
false (according to the propositional calculus).
Now let us prove a few general facts about tautologies.
Proposition 1.2
If B and (B ⇒ C) are tautologies, then so is C.
Proof
Assume that B and (B ⇒ C) are tautologies. If C took the value F for some 
assignment of truth values to the statement letters of B and C, then, since B 
is a tautology, B would take the value T and, therefore, (B ⇒ C) would have 
the value F for that assignment. This contradicts the assumption that (B ⇒ C) 
is a tautology. Hence, C never takes the value F.
Proposition 1.3
If T   is a tautology containing as statement letters A1, A2, …, An, and B 
arises from T   by substituting statement forms S1, S2, …, Sn for A1, A2, …, An, 
respectively, then B is a tautology; that is, substitution in a tautology yields 
a tautology.
Example
Let T   be ((A1 ∧ A2) ⇒ A1), let S1 be (B ∨ C) and let S2 be (C ∧ D). Then B is 
(((B ∨ C) ∧ (C ∧ D)) ⇒ (B ∨ C)).
Proof
Assume that T   is a tautology. For any assignment of truth values to the state-
ment letters in B, the forms S1, …, Sn  have truth values x1, …, xn (where each 
xi is T or F). If we assign the values x1, …, xn to A1, …, An, respectively, then 
the resulting truth value of T    is the truth value of B for the given assign-
ment of truth values. Since T   is a tautology, this truth value must be T. Thus, 
B always takes the value T.
Proposition 1.4
If C1 arises from B1 by substitution of C for one or more occurrences of B, then 
((B ⇔ C) ⇒ (B1 ⇔ C 1)) is a tautology. Hence, if B and C are logically equivalent, 
then so are B1 and C 1.

11
The Propositional Calculus
Example
Let B1 be (C  ∨ D), let B   be C , and let C   be (¬(¬C )). Then C 1 is ((¬(¬C )) ∨ D). Since 
C  and (¬(¬C )) are logically equivalent, (C  ∨ D) and ((¬(¬C )) ∨ D) are also logi-
cally equivalent.
Proof
Consider any assignment of truth values to the statement letters. If B and 
C have opposite truth values under this assignment, then (B ⇔ C) takes the 
value F, and, hence, ((B ⇔ C) ⇒ (B1 ⇔ C 1)) is T. If B and C take the same truth 
values, then so do B1 and C 1, since C 1 differs from B1 only in containing 
C in some places where B 1 contains B. Therefore, in this case, (B ⇔ C) is T, 
(B1 ⇔ C1) is T, and, thus, ((B ⇔ C) ⇒ (B1 ⇔ C1)) is T.
Parentheses
It is profitable at this point to agree on some conventions to avoid the use 
of so many parentheses in writing formulas. This will make the reading of 
complicated expressions easier.
First, we may omit the outer pair of parentheses of a statement form. (In the 
case of statement letters, there is no outer pair of parentheses.)
Second, we arbitrarily establish the following decreasing order of strength 
of the connectives: ¬, ∧, ∨, ⇒, ⇔. Now we shall explain a step-by-step process 
for restoring parentheses to an expression obtained by eliminating some or 
all parentheses from a statement form. (The basic idea is that, where possible, 
we first apply parentheses to negations, then to conjunctions, then to disjunc-
tions, then to conditionals, and finally to biconditionals.) Find the leftmost 
occurrence of the strongest connective that has not yet been processed.
	
i.	If the connective is ¬ and it precedes a statement form B, restore left 
and right parentheses to obtain (¬B).
	
ii.	If the connective is a binary connective C and it is preceded by a state-
ment form B and followed by a statement form D , restore left and right 
parentheses to obtain (B C D).
	 iii.	If neither (i) nor (ii) holds, ignore the connective temporarily and find 
the leftmost occurrence of the strongest of the remaining unprocessed 
connectives and repeat (i–iii) for that connective.
Examples
Parentheses are restored to the expression in the first line of each of the fol-
lowing in the steps shown:
	 1.	 A ⇔ (¬B) ∨ C ⇒ A
	
	
A ⇔ ((¬B) ∨ C) ⇒ A
	
	
A ⇔ (((¬B) ∨ C) ⇒ A)
	
	
(A ⇔ (((¬B) ∨ C) ⇒ A))

12
Introduction to Mathematical Logic
	 2.	 A ⇒ ¬B ⇒ C
	
	
A ⇒ (¬B) ⇒ C
	
	
(A ⇒ (¬B)) ⇒ C
	
	
((A ⇒ (¬B)) ⇒ C)
	 3.	 B ⇒ ¬¬A
	
	
B ⇒ ¬(¬A)
	
	
B ⇒ (¬(¬A))
	
	
(B ⇒ (¬(¬A)))
	 4.	 A ∨ ¬(B ⇒ A ∨ B)
	
	
A ∨ ¬(B ⇒ (A ∨ B))
	
	
A ∨ (¬(B ⇒ (A ∨ B)))
	
	
(A ∨ (¬(B ⇒ (A ∨ B))))
Not every form can be represented without the use of parentheses. For exam-
ple, parentheses cannot be further eliminated from A ⇒ (B ⇒ C), since A ⇒ 
B ⇒ C stands for ((A ⇒ B) ⇒ C). Likewise, the remaining parentheses cannot 
be removed from ¬(A ∨ B) or from A ∧ (B ⇒ C).
Exercises
1.15	 Eliminate as many parentheses as possible from the following forms.
	
a.	 ((B ⇒ (¬A)) ∧ C)
	
b.	 (A ∨ (B ∨ C))
	
c.	 (((A ∧ (¬B)) ∧ C) ∨ D)
	
d.	 ((B ∨ (¬C)) ∨ (A ∧ B))
	
e.	 ((A ⇔ B) ⇔ (¬(C ∨ D)))
	
f.	 ((¬(¬(¬(B ∨ C)))) ⇔ (B ⇔ C))
	
g.	 (¬((¬(¬(B ∨ C))) ⇔ (B ⇔ C)))
	
h.	 ((((A ⇒ B) ⇒ (C ⇒ D)) ∧ (¬A)) ∨ C)
1.16	 Restore parentheses to the following forms.
	
a.	 C ∨ ¬A ∧ B
	
b.	 B ⇒ ¬¬¬A ∧ C
	
c.	 C ⇒ ¬(A ∧ B ⇒ C) ∧ A ⇔ B
	
d.	 C ⇒ A ⇒ A ⇔ ¬A ∨ B
1.17	 Determine whether the following expressions are abbreviations of 
statement forms and, if so, restore all parentheses.
	
a.	 ¬¬A ⇔ A ⇔ B ∨ C
	
b.	 ¬(¬A ⇔ A) ⇔ B ∨ C
	
c.	 ¬(A ⇒ B) ∨ C ∨ D ⇒ B

13
The Propositional Calculus
	
d.	 A ⇔ (¬A ∨ B) ⇒ (A ∧ (B ∨ C)))
	
e.	 ¬A ∨ B ∨ C ∧ D ⇔ A ∧ ¬A
	
f.	 ((A ⇒ B ∧ (C ∨ D) ∧ (A ∨ D))
1.18	 If we write ¬B instead of (¬B), ⇒B C instead of (B ⇒ C), ∧B C instead of 
(B ∧ C), ∨B C instead of (B ∨ C), and ⇔B C instead of (B ⇔ C), then there 
is no need for parentheses. For example, ((¬A) ∧ (B ⇒ (¬D))), which is 
ordinarily abbreviated as ¬A ∧ (B ⇒ ¬D), becomes ∧ ¬A ⇒ B ¬D. This 
way of writing forms is called Polish notation.
	
a.	 Write ((C ⇒ (¬A)) ∨ B) and (C ∨ ((B ∧ (¬D)) ⇒ C)) in this notation.
	
b.	 If we count ⇒, ∧, ∨, and ⇔ each as +1, each statement letter as −1 
and ¬ as 0, prove that an expression B in this parenthesis-free nota-
tion is a statement form if and only if (i) the sum of the symbols of 
B is −1 and (ii) the sum of the symbols in any proper initial segment 
of B is nonnegative. (If an expression B can be written in the form 
CD, where C ≠ B, then C is called a proper initial segment of B.)
	
c.	 Write the statement forms of Exercise 1.15 in Polish notation.
	
d.	 Determine whether the following expressions are statement forms 
in Polish notation. If so, write the statement forms in the standard 
way.
	
	
i.	 ¬⇒ ABC ∨ AB ¬C
	
	
ii.	 ⇒⇒ AB ⇒⇒ BC ⇒¬AC
	
	
iii.	 ∨ ∧ ∨ ¬A¬BC ∧ ∨ AC ∨ ¬C ¬A
	
	
iv.	 ∨ ∧ B ∧ BBB
1.19	 Determine whether each of the following is a tautology, is contradic-
tory, or neither.
	
a.	 B ⇔ (B ∨ B)
	
b.	 ((A ⇒ B) ∧ B) ⇒ A
	
c.	 (¬A) ⇒ (A ∧ B)
	
d.	 (A ⇒ B) ⇒ ((B ⇒ C) ⇒ (A ⇒ C))
	
e.	 (A ⇔ ¬B) ⇒ A ∨ B
	
f.	 A ∧ (¬(A ∨ B))
	
g.	 (A ⇒ B) ⇔ ((¬A) ∨ B)
	
h.	 (A ⇒ B) ⇔ ¬(A ∧ (¬B))
	
i.	 (B ⇔ (B ⇔ A)) ⇒ A
	
j.	 A ∧ ¬A ⇒ B
1.20	 If A and B are true and C is false, what are the truth values of the fol-
lowing statement forms?
	
a.	 A ∨ C
	
b.	 A ∧ C

14
Introduction to Mathematical Logic
	
c.	 ¬A ∧ ¬C
	
d.	 A ⇔ ¬B ∨ C
	
e.	 B ∨ ¬C ⇒ A
	
f.	 (B ∨ A) ⇒ (B ⇒ ¬C)
	
g.	 (B ⇒ ¬A) ⇔ (A ⇔ C)
	
h.	 (B ⇒ A) ⇒ ((A ⇒ ¬C) ⇒ (¬C ⇒ B))
1.21	 If A ⇒ B is T, what can be deduced about the truth values of the 
following?
	
a.	 A ∨ C ⇒ B ∨ C
	
b.	 A ∧ C ⇒ B ∧ C
	
c.	 ¬A ∧ B ⇔ A ∨ B
1.22	 What further truth values can be deduced from those shown?
	
a.	 ¬A ∨ (A ⇒ B)
	
F
	
b.	 ¬(A ∧ B) ⇔ ¬A ⇒ ¬B
	
T
	
c.	 (¬A ∨ B) ⇒ (A ⇒ ¬C)
	
F
	
d.	 (A ⇔ B) ⇔ (C ⇒ ¬A)
	
F	
T
1.23	 If A ⇔ B is F, what can be deduced about the truth values of the 
following?
	
a.	 A ∧ B
	
b.	 A ∨ B
	
c.	 A ⇒ B
	
d.	 A ∧ C ⇔ B ∧ C
1.24	 Repeat Exercise 1.23, but assume that A ⇔ B is T.
1.25	 What further truth values can be deduced from those given?
	
a.	 (A ∧ B) ⇔ (A ∨ B)
	
F	 F
	
b.	 (A ⇒ ¬B) ⇒ (C ⇒ B)
	
F
1.26	 a.	 Apply Proposition 1.3 when T   is A1 ⇒ A1 ∨ A2, S1 is B ∧ D, and S2 
is ¬B.
	
b.	 Apply Proposition 1.4 when B1 is (B ⇒ C) ∧ D, B  is B ⇒ C, and C  
is ¬B ∨ C.

15
The Propositional Calculus
1.27	 Show that each statement form in column I is logically equivalent to 
the form next to it in column II.
I 
II 
a.	 A ⇒ (B ⇒ C)
(A ∧ B) ⇒ C
b.	 A ∧ (B ∨ C)
(A ∧ B) ∨ (A ∧ C)
(Distributive law)
c.	 A ∨ (B ∧ C)
(A ∨ B) ∧ (A ∨ C)
(Distributive law)
d.	 (A ∧ B) ∨ ¬ B A ∨ ¬ B
e.	 (A ∨ B) ∧ ¬ B A ∧ ¬ B
f.	
A ⇒ B
¬ B ⇒ ¬A
(Law of the contrapositive)
g.	 A ⇔ B
B ⇔ A
(Biconditional commutativity)
h.	 (A ⇔ B) ⇔ C
A ⇔ (B ⇔ C)
(Biconditional associativity)
i.	
A ⇔ B
(A ∧ B)  ∨ (¬A ∧¬B)
j.	
¬(A ⇔ B)
A ⇔ ¬ B
k.	 ¬(A ∨ B)
(¬A) ∧ (¬B)
(De Morgan’s law)
l.	
¬(A ∧ B)
(¬A) ∨ (¬B)
(De Morgan’s law)
m.	 A ∨ (A ∧ B)
A
n.	 A ∧ (A ∨ B)
A
o.	 A ∧ B
B ∧ A
(Commutativity of conjunction)
p.	 A ∨ B
B ∨ A
(Commutativity of disjunction)
q.	 (A ∧ B) ∧ C
A ∧ (B  ∧ C)
(Associativity of conjunction)
r.	
(A ∨ B) ∨ C
A ∨ (B  ∨ C)
(Associativity of disjunction)
s.	 A ⊕ B
B ⊕ A
(Commutativity of exclusive “or”)
t.	
A ⊕ B) ⊕ C
A ⊕ (B ⊕ C)
(Associativity of exclusive “or”)
u.	 A ∧ (B ⊕ C)
(A ∧ B) ⊕ (A ∧ C)
(Distributive law)
1.28	 Show the logical equivalence of the following pairs.
	
a.	 T  ∧ B and B, where T   is a tautology.
	
b.	 T   ∨ B and T, where T   is a tautology.
	
c.	 F  ∧ B and F, where F   is contradictory.
	
d.	 F  ∨ B and B, where F   is contradictory.
1.29	 a.	 Show the logical equivalence of ¬(A ⇒ B) and A ∧ ¬B.
	
b.	 Show the logical equivalence of ¬(A ⇔ B) and (A ∧ ¬B) ∨ (¬A ∧ B).
	
c.	 For each of the following statement forms, find a statement form 
that is logically equivalent to its negation and in which negation 
signs apply only to statement letters.
	
i.	 A ⇒ (B ⇔ ¬C)
	
ii.	 ¬A ∨ (B ⇒ C)
	
iii.	 A ∧ (B ∨ ¬C)

16
Introduction to Mathematical Logic
1.30	 (Duality)
	
a.	 If B  is a statement form involving only ¬, ∧, and ∨, and B ′ results 
from B by replacing each ∧ by ∨ and each ∨ by ∧, show that B is a 
tautology if and only if ¬B ′ is a tautology. Then prove that, if B ⇒ C 
is a tautology, then so is C ′ ⇒ B ′, and if B ⇔ C  is a tautology, then so 
is B ′ ⇔ C ′. (Here C  is also assumed to involve only ¬, ∧, and ∨.)
	
b.	 Among the logical equivalences in Exercise 1.27, derive (c) from (b), 
(e) from (d), (l) from (k), (p) from (o), and (r) from (q).
	
c.	 If B is a statement form involving only ¬, ∧, and ∨, and B* results 
from B by interchanging ∧ and ∨ and replacing every statement let-
ter by its negation, show that B* is logically equivalent to ¬B. Find a 
statement form that is logically equivalent to the negation of (A ∨ B 
∨ C) ∧ (¬A ∨ ¬B ∨ D), in which ¬ applies only to statement letters.
1.31	 a.	 Prove that a statement form that contains ⇔ as its only connective 
is a tautology if and only if each statement letter occurs an even 
number of times.
	
b.	 Prove that a statement form that contains ¬ and ⇔ as its only con-
nectives is a tautology if and only if ¬ and each statement letter 
occur an even number of times.
1.32	 (Shannon, 1938) An electric circuit containing only on–off switches 
(when a switch is on, it passes current; otherwise it does not) can be 
represented by a diagram in which, next to each switch, we put a letter 
representing a necessary and sufficient condition for the switch to be on 
(see Figure 1.1). The condition that a current flows through this network 
can be given by the statement form (A ∧ B) ∨ (C ∧ ¬A). A statement form 
representing the circuit shown in Figure 1.2 is (A ∧ B) ∨ ((C ∨ A) ∧ ¬B), 
which is logically equivalent to each of the following forms by virtue 
of the indicated logical equivalence of Exercise 1.27.
A
B
C
A
Figure 1.1
A
A
B
C
B
Figure 1.2

17
The Propositional Calculus
	
((
)
(
))
((
)
)
A
B
C
A
A
B
B
∧
∨
∨
∧
∧
∨¬
	
(c)
	
((
)
(
))
(
)
A
B
C
A
A
B
∧
∨
∨
∧
∨¬
	
(d)
	
((
)
(
))
(
)
A
B
A
C
A
B
∧
∨
∨
∧
∨¬
	
(p)
	
(((
)
)
)
(
)
A
B
A
C
A
B
∧
∨
∨
∧
∨¬
	
(r)
	
(
)
(
)
A
C
A
B
∨
∧
∨¬
	
(p), (m)
	
A
C
B
∨
∧¬
(
) 	
(c)
	
Hence, the given circuit is equivalent to the simpler circuit shown 
in Figure 1.3. (Two circuits are said to be equivalent if current flows 
through one if and only if it flows through the other, and one circuit is 
simpler if it contains fewer switches.)
	
a.	 Find simpler equivalent circuits for those shown in Figures 1.4 
through 1.6.
	
b.	 Assume that each of the three members of a committee votes yes on 
a proposal by pressing a button. Devise as simple a circuit as you 
can that will allow current to pass when and only when at least 
two of the members vote in the affirmative.
	
c.	 We wish a light to be controlled by two different wall switches in a 
room in such a way that flicking either one of these switches will 
turn the light on if it is off and turn it off if it is on. Construct a 
simple circuit to do the required job.
A
B
C
Figure 1.3
C
A
A
C
B
C
B
C
Figure 1.4

18
Introduction to Mathematical Logic
1.33	 Determine whether the following arguments are logically correct by 
representing each sentence as a statement form and checking whether 
the conclusion is logically implied by the conjunction of the assump-
tions. (To do this, assign T to each assumption and F to the conclusion, 
and determine whether a contradiction results.)
	
a.	 If Jones is a communist, Jones is an atheist. Jones is an atheist. 
Therefore, Jones is a communist.
	
b.	 If the temperature and air pressure remained constant, there was 
no rain. The temperature did remain constant. Therefore, if there 
was rain, then the air pressure did not remain constant.
	
c.	 If Gorton wins the election, then taxes will increase if the deficit 
will remain high. If Gorton wins the election, the deficit will remain 
high. Therefore, if Gorton wins the election, taxes will increase.
	
d.	 If the number x ends in 0, it is divisible by 5. x does not end in 0. 
Hence, x is not divisible by 5.
	
e.	 If the number x ends in 0, it is divisible by 5. x is not divisible by 5. 
Hence, x does not end in 0.
	
f.	 If a = 0 or b = 0, then ab = 0. But ab ≠ 0. Hence, a ≠ 0 and b ≠ 0.
	
g.	 A sufficient condition for f to be integrable is that ɡ be bounded. 
A necessary condition for h to be continuous is that f is integrable. 
Hence, if ɡ is bounded or h is continuous, then f is integrable.
	
h.	 Smith cannot both be a running star and smoke cigarettes. Smith is 
not a running star. Therefore, Smith smokes cigarettes.
	
i.	 If Jones drove the car, Smith is innocent. If Brown fired the gun, 
then Smith is not innocent. Hence, if Brown fired the gun, then 
Jones did not drive the car.
A
C
C
D
D
B
A
A
B
Figure 1.6
A
C
C
C
B
B
B
A
Figure 1.5

19
The Propositional Calculus
1.34	 Which of the following sets of statement forms are satisfiable, in the 
sense that there is an assignment of truth values to the statement let-
ters that makes all the forms in the set true?
	
a.	 A ⇒ B
	
	 B ⇒ C
	
	 C ∨ D ⇔ ¬B
	
b.	 ¬(¬B ∨ A)
	
	 A ∨ ¬C
	
	 B ⇒ ¬C
	
c.	 D ⇒ B
	
	 A ∨ ¬B
	
	 ¬(D ∧ A)
	
	 D
1.35	 Check each of the following sets of statements for consistency by rep-
resenting the sentences as statement forms and then testing their con-
junction to see whether it is contradictory.
	
a.	 Either the witness was intimidated or, if Doherty committed 
suicide, a note was found. If the witness was intimidated, then 
Doherty did not commit suicide. If a note was found, then Doherty 
committed suicide.
	
b.	 The contract is satisfied if and only if the building is completed 
by 30 November. The building is completed by 30 November 
if and only if the electrical subcontractor completes his work by 
10 November. The bank loses money if and only if the contract is 
not satisfied. Yet the electrical subcontractor completes his work by 
10 November if and only if the bank loses money.
1.3  Adequate Sets of Connectives
Every statement form containing n statement letters generates a correspond-
ing truth function of n arguments. The arguments and values of the func-
tion are T or F. Logically equivalent forms generate the same truth function. 
A natural question is whether all truth functions are so generated.
Proposition 1.5
Every truth function is generated by a statement form involving the connec-
tives ¬, ∧, and ∨.

20
Introduction to Mathematical Logic
Proof
(Refer to Examples 1 and 2 below for clarification.) Let f(x1, …, xn) be a truth func-
tion. Clearly f can be represented by a truth table of 2n rows, where each row 
represents some assignment of truth values to the variables x1, …, xn, followed 
by the corresponding value of f(x1, …, xn). If 1 ≤ i ≤ 2n, let Ci be the conjunction 
U
U
U
i
i
n
i
1
2
∧
∧…∧
, where Uj
i is Aj if, in the ith row of the truth table, xj takes the 
value T, and Uj
i is ¬Aj if xj takes the value F in that row. Let D be the disjunction of 
all those Cis such that f has the value T for the ith row of the truth table. (If there 
are no such rows, then f always takes the value F, and we let D be A1 ∧ ¬A1, which 
satisfies the theorem.) Notice that D involves only ¬, ∧, and ∨. To see that D has 
f as its corresponding truth function, let there be given an assignment of truth 
values to the statement letters A1, …, An, and assume that the corresponding 
assignment to the variables x1, …, xn is row k of the truth table for f. Then Ck has 
the value T for this assignment, whereas every other Ci has the value F. If f has 
the value T for row k, then Ck is a disjunct of D. Hence, D would also have the 
value T for this assignment. If f has the value F for row k, then Ck is not a dis-
junct of D and all the disjuncts take the value F for this assignment. Therefore, 
D would also have the value F. Thus, D generates the truth function f.
Examples
	
1.	
x
x
f x
x
1
2
1
2
(
,
)
T
T
F
F
T
T
T
F
T
F
F
T
	
	 D is (¬A1 ∧ A2) ∨ (A1 ∧ ¬A2) ∨ (¬A1 ∧ ¬A2).
	
2.
		
x
x
x
x
x
x
1
2
3
1
2
3
g
,
,
(
)
T
T
T
T
F
T
T
F
T
F
T
T
F
F
T
T
T
T
F
F
F
T
F
F
T
F
F
F
F
F
F
T
	
D
A
A
A
A
A
A
A
A
A
A
A
A
is (
)
(
)
(
)
(
).
1
2
3
1
2
3
1
2
3
1
2
3
∧
∧
∨
∧¬
∧
∨¬
∧¬
∧
∨¬
∧¬
∧¬

21
The Propositional Calculus
Exercise
1.36	 Find statement forms in the connectives ¬, ∧, and ∨ that have the fol-
lowing truth functions.
	
x
x
x
f x
x
x
x
x
x
h x
x
x
1
2
3
1
2
3
1
2
3
1
2
3
,
,
,
,
,
,
(
)
(
)
(
)
g
T
T
T
T
T
F
F
T
T
T
T
T
T
F
T
T
T
F
F
FF
T
F
F
F
T
T
F
F
T
T
F
T
F
F
F
T
T
F
F
F
T
F
F
F
F
T
F
T
Corollary 1.6
Every truth function can be generated by a statement form containing as 
connectives only ∧ and ¬, or only ∨ and ¬, or only ⇒ and ¬.
Proof
Notice that B ∨ C is logically equivalent to ¬(¬B ∧ ¬C). Hence, by the sec-
ond part of Proposition 1.4, any statement form in ∧, ∨, and ¬ is logically 
equivalent to a statement form in only ∧ and ¬ [obtained by replacing all 
expressions B ∨ C  by ¬(¬B ∧ ¬C  )]. The other parts of the corollary are similar 
consequences of the following tautologies:
	
B
C
B
C
B
C
B
C
B
C
B
C
∧
⇔
∨
(
)
∨
⇔
⇒
(
)
∧
⇔
⇒
(
)
¬ ¬
¬
¬
¬
¬
We have just seen that there are certain pairs of connectives—for exam-
ple, ∧ and ¬—in terms of which all truth functions are definable. It turns 
out that there is a single connective, ↓ (joint denial), that will do the same 
job. Its truth table is
	
A
B
A
B
↓
T
T
F
F
T
F
T
F
F
F
F
T

22
Introduction to Mathematical Logic
A ↓ B is true when and only when neither A nor B is true. Clearly, ¬A ⇔ (A ↓ 
A) and (A ∧ B) ⇔ ((A ↓ A) ↓ (B ↓ B)) are tautologies. Hence, the adequacy of ↓ 
for the construction of all truth functions follows from Corollary 1.6.
Another connective, | (alternative denial), is also adequate for this pur-
pose. Its truth table is
	
A
B
A B
|
T
T
F
F
T
T
T
F
T
F
F
T
A|B is true when and only when not both A and B are true. The adequacy 
of | follows from the tautologies ¬A ⇔ (A|A) and (A ∨ B) ⇔ ((A|A)|(B|B)).
Proposition 1.7
The only binary connectives that alone are adequate for the construction 
of all truth functions are ↓ and |.
Proof
Assume that h(A, B) is an adequate connective. Now, if h(T, T) were T, then 
any statement form built up using h alone would take the value T when all 
its statement letters take the value T. Hence, ¬A would not be definable in 
terms of h. So, h(T, T) = F. Likewise, h(F, F) = T. Thus, we have the partial 
truth table:
	
A
B
h A B
(
,
)
T
T
F
F
T
T
F
F
F
T
If the second and third entries in the last column are F, F or T, T, then h is ↓ 
or |. If they are F, T, then h(A, B) ⇔ ¬B is a tautology; and if they are T, F, then 
h(A, B) ⇔ ¬A is a tautology. In both cases, h would be definable in terms of ¬. 

23
The Propositional Calculus
But ¬ is not adequate by itself because the only truth functions of one vari-
able definable from it are the identity function and negation itself, whereas 
the truth function that is always T would not be definable.
Exercises
1.37	 Prove that each of the pairs ⇒, ∨ and ¬, ⇔ is not alone adequate to 
express all truth functions.
1.38	 a.	 Prove that A ∨ B can be expressed in terms of ⇒ alone.
	
b.	 Prove that A ∧ B cannot be expressed in terms of ⇒ alone.
	
c.	 Prove that A ⇔ B cannot be expressed in terms of ⇒ alone.
1.39	 Show that any two of the connectives {∧, ⇒, ⇔} serve to define the 
remaining one.
1.40	 With one variable A, there are four truth functions:
	
A
A
A
A
A
A
¬
∨¬
∧¬
T
F
T
F
F
T
T
F
	
a.	 With two variable A and B, how many truth functions are there?
	
b.	 How many truth functions of n variables are there?
1.41	 Show that the truth function h determined by (A ∨ B) ⇒ ¬C generates 
all truth functions.
1.42	 By a literal we mean a statement letter or a negation of a statement 
letter. A statement form is said to be in disjunctive normal form (dnf) 
if it is a disjunction consisting of one or more disjuncts, each of 
which is a conjunction of one or more literals—for example, (A ∧ B) 
∨ (¬A ∧ C), (A ∧ B ∧ ¬A) ∨ (C ∧ ¬B) ∨ (A ∧ ¬C), A, A ∧ B, and A ∨ (B 
∨ C). A form is in conjunctive normal form (cnf) if it is a conjunction 
of one or more conjuncts, each of which is a disjunction of one or 
more literals—for example, (B ∨ C) ∧ (A ∨ B), (B ∨ ¬C) ∧ (A ∨ D), A ∧ 
(B ∨ A) ∧ (¬B ∨ A), A ∨ ¬B, A ∧ B, A. Note that our terminology con-
siders a literal to be a (degenerate) conjunction and a (degenerate) 
disjunction.
	
a.	 The proof of Proposition 1.5 shows that every statement form B is 
logically equivalent to one in disjunctive normal form. By applying 
this result to ¬B, prove that B is also logically equivalent to a form 
in conjunctive normal form.

24
Introduction to Mathematical Logic
	
b.	 Find logically equivalent dnfs and cnfs for ¬(A ⇒ B) ∨ (¬A ∧ C) and 
A ⇔ ((B ∧ ¬A) ∨ C). [Hint: Instead of relying on Proposition 1.5, it is 
usually easier to use Exercise 1.27(b) and (c).]
	
c.	 A dnf (cnf) is called full if no disjunct (conjunct) contains two occur-
rences of literals with the same letter and if a letter that occurs in 
one disjunct (conjunct) also occurs in all the others. For example, 
(A ∧ ¬A ∧ B) ∨ (A ∧ B), (B ∧ B ∧ C) ∨ (B ∧ C) and (B ∧ C) ∨ B are 
not full, whereas (A ∧ B ∧ ¬C) ∨ (A ∧ B ∧ C) ∨ (A ∧ ¬B ∧ ¬C) and 
(A ∧ ¬B) ∨ (B ∧ A) are full dnfs.
	
i.	
Find full dnfs and cnfs logically equivalent to (A ∧ B) ∨ ¬A 
and ¬(A ⇒ B) ∨ (¬A ∧ C).
	
ii.	
Prove that every noncontradictory (nontautologous) state-
ment form B  is logically equivalent to a full dnf (cnf) C, and, 
if C  contains exactly n letters, then B  is a tautology (is contra-
dictory) if and only if C  has 2n disjuncts (conjuncts).
	
d.	 For each of the following, find a logically equivalent dnf (cnf), and 
then find a logically equivalent full dnf (cnf):
	
i.	 (A ∨ B) ∧ (¬B ∨ C)
	
ii.	 ¬A ∨ (B ⇒ ¬C)
	
iii.	 (A ∧ ¬B) ∨ (A ∧ C)
	
iv.	 (A ∨ B) ⇔ ¬C
	
e.	 Construct statement forms in ¬ and ∧ (respectively, in ¬ and ∨ or in 
¬ and ⇒) logically equivalent to the statement forms in (d).
1.43	 A statement form is said to be satisfiable if it is true for some assignment 
of truth values to its statement letters. The problem of determining the 
satisfiability of an arbitrary cnf plays an important role in the theory of 
computational complexity; it is an example of a so-called NP-complete 
problem (see Garey and Johnson, 1978).
	
a.	 Show that B is satisfiable if and only if ¬B is not a tautology.
	
b.	 Determine whether the following are satisfiable:
	
i.	
(A ∨ B) ∧ (¬A ∨ B ∨ C) ∧ (¬A ∨ ¬B ∨ ¬C)
	
ii.	
((A ⇒ B) ∨ C) ⇔ (¬B ∧ (A ∨ C))
	
c.	 Given a disjunction D of four or more literals: L1 ∨ L2 ∨ … ∨ Ln, let 
C1, …, Cn−2 be statement letters that do not occur in D, and construct 
the cnf E:
	
(
)
(
)
(
)
(
)
(
L
L
C
C
L
C
C
L
C
C
L
C
C
n
n
n
1
2
1
1
3
2
2
4
3
3
1
2
∨
∨
∧¬
∨
∨
∧¬
∨
∨
∧…
∧¬
∨
∨
∧¬
−
−
−
n
n
L
C
−∨
∨¬
2
1)
	
	
Show that any truth assignment satisfying D can be extended 
to a truth assignment satisfying E and, conversely, any truth 

25
The Propositional Calculus
assignment satisfying E is an extension of a truth assignment sat-
isfying D. (This permits the reduction of the problem of satisfy-
ing cnfs to the corresponding problem for cnfs with each conjunct 
containing at most three literals.)
	
d.	 For a disjunction D of three literals L1 ∨ L2 ∨ L3, show that a 
form that has the properties of E in (c) cannot be constructed, 
with E a cnf in which each conjunct contains at most two literals 
(R. Cowen).
1.44	 (Resolution) Let B be a cnf and let C be a statement letter. If C is a dis-
junct of a disjunction D1 in B and ¬C is a disjunct of another disjunc-
tion D2 in B, then a nonempty disjunction obtained by eliminating C 
from D1 and ¬C from D2 and forming the disjunction of the remaining 
literals (dropping repetitions) is said to be obtained from B by resolu-
tion on C. For example, if B is
	
(
)
(
)
(
)
A
C
B
A
D
B
C
D
A
∨¬
∨¬
∧¬
∨
∨¬
∧
∨
∨
	
the first and third conjuncts yield A ∨ ¬B ∨ D by resolution on C. In 
addition, the first and second conjuncts yield ¬C ∨ ¬B ∨ D by resolu-
tion on A, and the second and third conjuncts yield D ∨ ¬B ∨ C by 
resolution on A. If we conjoin to B any new disjunctions obtained by 
resolution on all variables, and if we apply the same procedure to 
the new cnf and keep on iterating this operation, the process must 
eventually stop, and the final result is denoted Res(B). In the example, 
Res(B) is
	
(
)
(
)
(
)
(
)
(
)
(
)
(
A
C
B
A
D
B
C
D
A
C
B
D
D
B
C
A
B
D
D
∨¬
∨¬
∧¬
∨
∨¬
∧
∨
∨
∧¬
∨¬ ∨
∧
∨¬ ∨
∧
∨¬ ∨
∧
∨¬B)
	
Notice that we have not been careful about specifying the order in 
which conjuncts or disjuncts are written, since any two arrangements 
will be logically equivalent.)
	
a.	 Find Res(B ) when B is each of the following:
	
i.	 (A ∨ ¬B) ∧ B
	
ii.	 (A ∨ B ∨ C) ∧ (A ∨ ¬B ∨ C)
	
iii.	 (A ∨ C) ∧ (¬A ∨ B) ∧ (A ∨ ¬C) ∧ (¬A ∨ ¬B)
	
b.	 Show that B logically implies Res(B).
	
c.	 If B is a cnf, let BC be the cnf obtained from B by deleting those con-
juncts that contain C or ¬C. Let rC(B ) be the cnf that is the conjunc-
tion of BC and all those disjunctions obtained from B  by resolution 

26
Introduction to Mathematical Logic
on C. For example, if B   is the cnf in the example above, then rC(B) 
is (¬A ∨ D ∨ ¬B) ∧ (A ∨ ¬B ∨ D). Prove that, if rC(B) is satisfiable, 
then so is B (R. Cowen).
	
d.	 A cnf B is said to be a blatant contradiction if it contains some letter 
C and its negation ¬C as conjuncts. An example of a blatant contra-
diction is (A ∨ B) ∧ B ∧ (C ∨ D) ∧ ¬B. Prove that if B is unsatisfiable, 
then Res(B) is a blatant contradiction. [Hint: Use induction on the 
number n of letters that occur in B. In the induction step, use (c).]
	
e.	 Prove that B is unsatisfiable if and only if Res(B) is a blatant 
contradiction.
1.45	 Let B and D be statement forms such that B ⇒ D is a tautology.
	
a.	 If B and D have no statement letters in common, show that either B 
is contradictory or D is a tautology.
	
b.	 (Craig’s interpolation theorem) If B and D have the statement letters 
B1, …, Bn in common, prove that there is a statement form C having 
B1, …, Bn as its only statement letters such that B ⇒ C and C ⇒ D are 
tautologies.
	
c.	 Solve the special case of (b) in which B is (B1 ⇒ A) ∧ (A ⇒ B2) and D 
is (B1 ∧ C) ⇒ (B2 ∧ C).
1.46	 a.	 A certain country is inhabited only by truth-tellers (people who 
always tell the truth) and liars (people who always lie). Moreover, 
the inhabitants will respond only to yes or no questions. A tourist 
comes to a fork in a road where one branch leads to the capital 
and the other does not. There is no sign indicating which branch 
to take, but there is a native standing at the fork. What yes or 
no question should the tourist ask in order to determine which 
branch to take? [Hint: Let A stand for “You are a truth-teller” 
and let B stand for “The left-hand branch leads to the capital.” 
Construct, by means of a suitable truth table, a statement form 
involving A and B such that the native’s answer to the question as 
to whether this statement form is true will be yes when and only 
when B is true.]
	
b.	 In a certain country, there are three kinds of people: workers (who 
always tell the truth), businessmen (who always lie), and students 
(who sometimes tell the truth and sometimes lie). At a fork in the 
road, one branch leads to the capital. A worker, a businessman and 
a student are standing at the side of the road but are not identifiable 
in any obvious way. By asking two yes or no questions, find out 
which fork leads to the capital (Each question may be addressed to 
any of the three.)
More puzzles of this kind may be found in Smullyan (1978, Chapter 3; 1985, 
Chapters 2, 4 through 8).

27
The Propositional Calculus
1.4  An Axiom System for the Propositional Calculus
Truth tables enable us to answer many of the significant questions concerning 
the truth-functional connectives, such as whether a given statement form is a 
tautology, is contradictory, or neither, and whether it logically implies or is logi-
cally equivalent to some other given statement form. The more complex parts 
of logic we shall treat later cannot be handled by truth tables or by any other 
similar effective procedure. Consequently, another approach, by means of for-
mal axiomatic theories, will have to be tried. Although, as we have seen, the 
propositional calculus surrenders completely to the truth table method, it will 
be instructive to illustrate the axiomatic method in this simple branch of logic.
A formal theory S  is defined when the following conditions are satisfied:
	
1.	A countable set of symbols is given as the symbols of S .* A finite 
sequence of symbols of S  is called an expression of S.
	
2.	There is a subset of the set of expressions of S called the set of well-
formed formulas (wfs) of S. There is usually an effective procedure to 
determine whether a given expression is a wf.
	
3.	There is a set of wfs called the set of axioms of S. Most often, one can 
effectively decide whether a given wf is an axiom; in such a case, S  is 
called an axiomatic theory.
	
4.	There is a finite set R1, …, Rn of relations among wfs, called rules of infer-
ence. For each Ri, there is a unique positive integer j such that, for every 
set of j wfs and each wf B, one can effectively decide whether the given 
j wfs are in the relation Ri to B, and, if so, B is said to follow from or to be 
a direct consequence of the given wfs by virtue of Ri.†
A proof in S  is a sequence B1, …, Bk of wfs such that, for each i, either Bi is an 
axiom of S  or Bi is a direct consequence of some of the preceding wfs in the 
sequence by virtue of one of the rules of inference of S.
A theorem of S  is a wf B of S such that B is the last wf of some proof in S. 
Such a proof is called a proof of B in S.
Even if S is axiomatic—that is, if there is an effective procedure for check-
ing any given wf to see whether it is an axiom—the notion of “theorem” is 
not necessarily effective since, in general, there is no effective procedure for 
determining, given any wf B, whether there is a proof of B. A theory for 
which there is such an effective procedure is said to be decidable; otherwise, 
the theory is said to be undecidable.
*	 These “symbols” may be thought of as arbitrary objects rather than just linguistic objects. 
This will become absolutely necessary when we deal with theories with uncountably many 
symbols in Section 2.12.
†	 An example of a rule of inference will be the rule modus ponens (MP): C  follows from B and 
B ⇒ C. According to our precise definition, this rule is the relation consisting of all ordered 
triples 〈B, B ⇒ C, C 〉, where B and C are arbitrary wfs of the formal system.

28
Introduction to Mathematical Logic
From an intuitive standpoint, a decidable theory is one for which a machine 
can be devised to test wfs for theoremhood, whereas, for an undecidable 
theory, ingenuity is required to determine whether wfs are theorems.
A wf C   is said to be a consequence in S of a set Γ of wfs if and only if there 
is a sequence B1, …, Bk of wfs such that C is Bk and, for each i, either Bi is an 
axiom or Bi is in Γ, or Bi is a direct consequence by some rule of inference of 
some of the preceding wfs in the sequence. Such a sequence is called a proof 
(or deduction) of C from Γ. The members of Γ are called the hypotheses or prem-
isses of the proof. We use Γ ⊢ C as an abbreviation for “C is a consequence of 
Γ”. In order to avoid confusion when dealing with more than one theory, we 
write Γ ⊢S  C, adding the subscript S  to indicate the theory in question.
If Γ is a finite set {H 1, …, Hm}, we write H1, …, Hm ⊢ C instead of {H1, …, 
Hm} ⊢ C. If Γ is the empty set ∅, then ∅ ⊢ C if and only if C is a theorem. It is 
customary to omit the sign “∅” and simply write ⊢C. Thus, ⊢C is another way 
of asserting that C  is a theorem.
The following are simple properties of the notion of consequence:
	 1.	 If Γ ⊆ Δ and Γ ⊢ C, then Δ ⊢ C.
	 2.	 Γ ⊢ C if and only if there is a finite subset Δ of Γ such that Δ ⊢ C.
	 3.	 If Δ ⊢ C, and for each B in Δ, Γ ⊢ B, then Γ ⊢ C.
Assertion 1 represents the fact that if C is provable from a set Γ of premisses, 
then, if we add still more premisses, C is still provable. Half of 2 follows from 
1. The other half is obvious when we notice that any proof of C from Γ uses 
only a finite number of premisses from Γ. Proposition 1.3 is also quite simple: 
if C is provable from premisses in Δ, and each premiss in Δ is provable from 
premisses in Γ, then C is provable from premisses in Γ.
We now introduce a formal axiomatic theory L for the propositional calculus.
	 1.	 The symbols of L are ¬, ⇒, (, ), and the letters Ai with positive integers 
i as subscripts: A1, A2, A3, …. The symbols ¬ and ⇒ are called primitive 
connectives, and the letters Ai are called statement letters.
	 2.	 a.	 All statement letters are wfs.
	
	
b.	 If B and C are wfs, then so are (¬B) and (B ⇒C).* Thus, a wf of L 
is just a statement form built up from the statement letters Ai by 
means of the connectives ¬ and ⇒.
	 3.	 If B, C, and D are wfs of L, then the following are axioms of L:
(A1) (B ⇒ (C ⇒B ))
(A2) ((B ⇒ (C ⇒D )) ⇒ ((B ⇒C ) ⇒ (B ⇒D )))
(A3) (((¬C ) ⇒ (¬B )) ⇒(((¬C ) ⇒B) ⇒C ))
*	 To be precise, we should add the so called extremal clause: (c) an expression is a wf if and 
only if it can be shown to be a wf on the basis of clauses (a) and (b). This can be made rigorous 
using as a model the definition of statement form in the footnote on page 4.

29
The Propositional Calculus
	 4.	 The only rule of inference of L is modus ponens: C is a direct consequence 
of B and (B ⇒ C). We shall abbreviate applications of this rule by MP.*
We shall use our conventions for eliminating parentheses.
Notice that the infinite set of axioms of L is given by means of three axiom 
schemas (A1)–(A3), with each schema standing for an infinite number of axi-
oms. One can easily check for any given wf whether or not it is an axiom; 
therefore, L is axiomatic. In setting up the system L, it is our intention to 
obtain as theorems precisely the class of all tautologies.
We introduce other connectives by definition:
D
for
1
(
)
∧
(
)
⇒
(
)
B
C
B
C
¬
¬
D
for
2
(
)
∨
(
)
(
) ⇒
B
C
B
C
¬
D
for
3
(
)
⇔
(
)
⇒
(
) ∧
⇒
(
)
B
C
B
C
C
B
The meaning of (D1), for example, is that, for any wfs B and C, “(B ∧ C )” is an 
abbreviation for “¬(B ⇒ ¬C)”.
Lemma 1.8:  ⊢L B ⇒ B for all wfs B.
Proof†
We shall construct a proof in L of B ⇒ B.
	 1.	 (B  ⇒ ((B ⇒ B) ⇒ B)) ⇒	
Instance of axiom schema (A2)
	
	
((B ⇒ (B ⇒ B)) ⇒ (B ⇒ B))
*	 A common English synonym for modus ponens is the detachment rule.
†	 The word “proof” is used in two distinct senses. First, it has a precise meaning defined above as 
a certain kind of finite sequence of wfs of L. However, in another sense, it also designates certain 
sequences of the English language (supplemented by various technical terms) that are supposed to 
serve as an argument justifying some assertion about the language L (or other formal theories). In 
general, the language we are studying (in this case, L) is called the object language, while the language 
in which we formulate and prove statements about the object language is called the metalanguage. 
The metalanguage might also be formalized and made the subject of study, which we would carry 
out in a metametalanguage, and so on. However, we shall use the English language as our (unfor-
malized) metalanguage, although, for a substantial part of this book, we use only a mathematically 
weak portion of the English language. The contrast between object language and metalanguage 
is also present in the study of a foreign language; for example, in a Sanskrit class, Sanskrit is the 
object language, while the metalanguage, the language we use, is English. The distinction between 
proof and metaproof (i.e., a proof in the metalanguage) leads to a distinction between theorems of 
the object language and metatheorems of the metalanguage. To avoid confusion, we generally use 
“proposition” instead of “metatheorem.” The word “metamathematics” refers to the study of logi-
cal and mathematical object languages; sometimes the word is restricted to those investigations 
that use what appear to the metamathematician to be constructive (or so-called finitary) methods.

30
Introduction to Mathematical Logic
	 2.	 B ⇒ ((B ⇒ B) ⇒ B)	
Axiom schema (A1)
	 3.	 (B ⇒ (B ⇒ B)) ⇒ (B ⇒ B)	
From 1 and 2 by MP
	 4.	 B ⇒ (B ⇒ B)	
Axiom schema (A1)
	 5.	 B ⇒ B	
From 3 and 4 by MP*
Exercise
1.47	 Prove:
	
a.	 ⊢L (¬B ⇒ B) ⇒ B
	
b.	 B ⇒ C, C ⇒ D ⊢L B ⇒ D
	
c.	 B ⇒ (C ⇒ D) ⊢L C ⇒ (B ⇒ D)
	
d.	 ⊢L (¬C ⇒ ¬B) ⇒ (B ⇒ C)
In mathematical arguments, one often proves a statement C on the assump-
tion of some other statement B and then concludes that “if B, then C ” is 
true. This procedure is justified for the system L by the following theorem.
Proposition 1.9 (Deduction Theorem)†
If Γ is a set of wfs and B and C are wfs, and Γ, B ⊢ C, then Γ ⊢ B ⇒ C. In par-
ticular, if B ⊢ C, then ⊢B ⇒ C (Herbrand, 1930).
Proof
Let C1, …, Cn be a proof of C from Γ ∪ {B}, where Cn is C. Let us prove, by induction 
on j, that Γ ⊢ B ⇒ Cj for 1 ≤ j ≤ n. First of all, C1 must be either in Γ or an axiom of 
L or B itself. By axiom schema (A1), C1 ⇒ (B ⇒ C1) is an axiom. Hence, in the first 
two cases, by MP, Γ ⊢ B ⇒ C1. For the third case, when C1 is B, we have ⊢B ⇒ C1 by 
Lemma 1.8, and, therefore, Γ ⊢ B ⇒ C1. This takes care of the case j = 1. Assume 
now that Γ ⊢ B ⇒ Ck for all k < j. Either Cj is an axiom, or Cj is in Γ, or Cj is B, or Cj fol-
lows by modus ponens from some Cℓ and Cm, where ℓ < j, m < j, and Cm has the form 
Cℓ ⇒ Cj. In the first three cases, Γ ⊢ B ⇒ Cj as in the case j = 1 above. In the last case, 
we have, by inductive hypothesis, Γ ⊢ B ⇒ Cℓ and Γ ⊢ B ⇒ (Cℓ ⇒ Cj). But, by axiom 
schema (A2), ⊢ (B ⇒ (Cℓ ⇒ Cj)) ⇒ ((B ⇒ Cℓ) ⇒ (B ⇒ Cj)). Hence, by MP, Γ ⊢ (B ⇒ Cℓ) ⇒ 
(B ⇒ Cj), and, again by MP, Γ ⊢ B ⇒ Cj. Thus, the proof by induction is complete. 
The case j = n is the desired result. [Notice that, given a deduction of C from Γ and 
*	 The reader should not be discouraged by the apparently unmotivated step 1 of the proof. As 
in most proofs, we actually begin with the desired result, B ⇒ B, and then look for an appro-
priate axiom that may lead by MP to that result. A mixture of ingenuity and experimentation 
leads to a suitable instance of axiom (A2).
†	 For the remainder of the chapter, unless something is said to the contrary, we shall omit the 
subscript L in ⊢L. In addition, we shall use Γ, B ⊢ C to stand for Γ ∪ {B} ⊢ C. In general, we let 
Γ, B1, …, Bn ⊢ C stand for Γ ∪ {B1, …, Bn} ⊢ C.

31
The Propositional Calculus
B, the proof just given enables us to construct a deduction of B ⇒ C  from Γ. Also 
note that axiom schema (A3) was not used in proving the deduction theorem.]
Corollary 1.10
	 a.	 B ⇒ C, C ⇒ D ⊢ B ⇒ D
	 b.	 B ⇒ (C ⇒ D), C ⊢ B ⇒ D
Proof
For part (a):
	 1.	 B ⇒ C	
Hyp (abbreviation for “hypothesis”)
	 2.	 C ⇒ D	
Hyp
	 3.	 B	
Hyp
	 4.	 C	
1, 3, MP
	 5.	 D	
2, 4, MP
Thus, B ⇒ C, C ⇒ D, B ⊢ D. So, by the deduction theorem, B ⇒ C, C ⇒ D ⊢ B ⇒ D.
To prove (b), use the deduction theorem.
Lemma 1.11
For any wfs B and C, the following wfs are theorems of L.
	 a.	 ¬¬B ⇒ B
	 b.	 B ⇒ ¬¬B
	 c.	 ¬B ⇒ (B ⇒ C)
	 d.	 (¬C ⇒ ¬B) ⇒ (B ⇒ C)
	 e.	 (B ⇒ C) ⇒ (¬C ⇒ ¬B)
	 f.	 B ⇒ (¬C ⇒ ¬(B ⇒ C))
	 g.	 (B ⇒ C) ⇒ ((¬B ⇒ C) ⇒ C)
Proof
	 a.	 ⊢ ¬¬B ⇒ B
	
1.	 (¬B ⇒ ¬¬B) ⇒ ((¬B ⇒ ¬B) ⇒ B)      Axiom (A3)
	
2.	 ¬B ⇒ ¬B	
Lemma 1.8*
*	 Instead of writing a complete proof of ¬B ⇒ ¬B, we simply cite Lemma 1.8. In this way, we indi-
cate how the proof of ¬¬B ⇒ B could be written if we wished to take the time and space to do so. 
This is, of course, nothing more than the ordinary application of previously proved theorems.

32
Introduction to Mathematical Logic
	
3.	 (¬B ⇒ ¬¬B) ⇒ B	
1, 2, Corollary 1.10(b)
	
4.	 ¬¬B ⇒ (¬B ⇒ ¬¬B)	
Axiom (A1)
	
5.	 ¬¬B ⇒ B	
3, 4, Corollary 1.10(a)
	 b.	 ⊢ B ⇒ ¬¬B
	
1.	 (¬¬¬B ⇒ ¬B) ⇒ ((¬¬¬B ⇒ B) ⇒ ¬¬B)	
Axiom (A3)
	
2.	 ¬¬¬B ⇒ ¬B	
Part (a)
	
3.	 (¬¬¬B ⇒ B) ⇒ ¬¬B	
1, 2, MP
	
4.	 B ⇒ (¬¬¬B ⇒ B)	
Axiom (A1)
	
5.	 B ⇒ ¬¬B	
3, 4, Corollary 1.10(a)
	 c.	 ⊢ ¬B ⇒ (B ⇒ C)
	
1.	 ¬B	
Hyp
	
2.	 B	
Hyp
	
3.	 B ⇒ (¬C ⇒ B)	
Axiom (A1)
	
4.	 ¬B ⇒ (¬C ⇒ ¬B)	
Axiom (A1)
	
5.	 ¬C ⇒ B	
2, 3, MP
	
6.	 ¬C ⇒ ¬B	
1, 4, MP
	
7.	 (¬C ⇒ ¬B) ⇒ ((¬C ⇒ B) ⇒ C)	
Axiom (A3)
	
8.	 (¬C ⇒ B) ⇒ C	
6, 7, MP
	
9.	 C	
5, 8, MP
	
10.	 ¬B, B ⊢ C	
1–9
	
11.	 ¬B ⊢ B ⇒ C	
10, deduction theorem
	
12.	 ⊢ ¬B ⇒ (B ⇒ C)	
11, deduction theorem
	 d.	 ⊢ (¬C ⇒ ¬B) ⇒ (B ⇒ C)
	
1.	 ¬C ⇒ ¬B	
Hyp
	
2.	 (¬C ⇒ ¬B) ⇒ ((¬C ⇒ B) ⇒ C)	
Axiom (A3)
	
3.	 B ⇒ (¬C ⇒ B)	
Axiom (A1)
	
4.	 (¬C ⇒ B) ⇒ C	
1, 2, MP
	
5.	 B ⇒ C	
3, 4, Corollary 1.10(a)
	
6.	 ¬C ⇒ ¬B ⊢ B ⇒ C	
1–5
	
7.	 ⊢ (¬C ⇒ ¬B) ⇒ (B ⇒ C)	
6, deduction theorem
	 e.	 ⊢ (B ⇒ C) ⇒ (¬C ⇒ ¬B)
	
1.	 B ⇒ C	
Hyp
	
2.	 ¬¬B ⇒ B	
Part (a)
	
3.	 ¬¬B ⇒ C	
1, 2, Corollary 1.10(a)
	
4.	 C ⇒ ¬¬C	
Part (b)

33
The Propositional Calculus
	
5.	 ¬¬B ⇒ ¬¬C	
3, 4, Corollary 1.10(a)
	
6.	 (¬¬B ⇒ ¬¬C) ⇒ (¬C ⇒ ¬B)	
Part (d)
	
7.	 ¬C ⇒ ¬B	
5, 6, MP
	
8.	 B ⇒ C ⊢ ¬C ⇒ ¬B	
1–7
	
9.	 ⊢ (B ⇒ C) ⇒ (¬C ⇒ ¬B)	
8, deduction theorem
	 f.	 ⊢ B ⇒ (¬C ⇒ ¬(B ⇒ C))
	
	 Clearly, B, B ⇒ C⊢C by MP. Hence, ⊢B ⇒ ((B ⇒ C) ⇒ C)) by two uses of 
the deduction theorem. Now, by (e), ⊢((B ⇒ C) ⇒ C) ⇒ (¬C ⇒ ¬(B ⇒ C)). 
Hence, by Corollary 1.10(a), ⊢B ⇒ (¬C ⇒ ¬(B ⇒ C)).
	 g.	 ⊢ (B ⇒ C) ⇒ ((¬B ⇒ C) ⇒ C)
	
1.	 B ⇒ C	
Hyp
	
2.	 ¬B ⇒ C	
Hyp
	
3.	 (B ⇒ C) ⇒ (¬C ⇒ ¬B)	
Part (e)
	
4.	 ¬C ⇒ ¬B	
1, 3, MP
	
5.	 (¬B ⇒ C) ⇒ (¬C ⇒ ¬¬B)	
Part (e)
	
6.	 ¬C ⇒ ¬¬B	
2, 5, MP
	
7.	 (¬C ⇒ ¬¬B) ⇒ ((¬C ⇒ ¬B) ⇒ C)	
Axiom (A3)
	
8.	 (¬C ⇒ ¬B) ⇒ C	
6, 7, MP
	
9.	 C	
4, 8, MP
	
10.	 B ⇒ C, ¬B ⇒ C ⊢ C	
1–9
	
11.	 B ⇒ C ⊢ (¬B ⇒ C) ⇒ C	
10, deduction theorem
	
12.	 ⊢(B ⇒ C) ⇒ ((¬B ⇒ C) ⇒ C)	
11, deduction theorem
Exercises
1.48	 Show that the following wfs are theorems of L.
	
a.	 B ⇒ (B ∨ C)
	
b.	 B ⇒ (C ∨ B)
	
c.	 C ∨ B ⇒ B ∨ C
	
d.	 B ∧ C ⇒ B
	
e.	 B ∧ C ⇒ C
	
f.	 (B ⇒ D) ⇒ ((C ⇒ D) ⇒ (B ∨ C ⇒ D))
	
g.	 ((B ⇒ C) ⇒ B) ⇒ B
	
h.	 B ⇒ (C ⇒ (B ∧ C))
1.49	 Exhibit a complete proof in L of Lemma 1.11(c). [Hint: Apply the proce-
dure used in the proof of the deduction theorem to the demonstration 

34
Introduction to Mathematical Logic
given earlier of Lemma 1.11(c).] Greater fondness for the deduction the-
orem will result if the reader tries to prove all of Lemma 1.11 without 
using the deduction theorem.
It is our purpose to show that a wf of L is a theorem of L if and only if it is 
a tautology. Half of this is very easy.
Proposition 1.12
Every theorem of L is a tautology.
Proof
As an exercise, verify that all the axioms of L are tautologies. By Proposition 
1.2, modus ponens leads from tautologies to other tautologies. Hence, every 
theorem of L is a tautology.
The following lemma is to be used in the proof that every tautology is a 
theorem of L.
Lemma 1.13
Let B be a wf and let B1, …, Bk be the statement letters that occur in B. For 
a given assignment of truth values to B1, …, Bk, let Bj′ be Bj if Bj takes the 
value T; and let Bj′ be ¬Bj if Bj takes the value F. Let B ′ be B if B takes the 
value T under the assignment, and let B ′ be ¬B if B takes the value F. Then 
B
Bk
1′ …
′
′
,
,
⊢B .
For example, let B be ¬(¬A2 ⇒ A5). Then for each row of the truth table
	
A
A
A
A
2
5
2
5
¬ ¬
⇒
(
)
T
T
F
F
T
F
T
F
F
F
F
T
Lemma 1.13 asserts a corresponding deducibility relation. For instance, cor-
responding to the third row there is A2, ¬A5 ⊢ ¬¬(¬A2 ⇒ A5), and to the fourth 
row, ¬A2, ¬A5 ⊢ ¬(¬A2 ⇒ A5).
Proof
The proof is by induction on the number n of occurrences of ¬ and ⇒ in B. 
(We assume B written without abbreviations.) If n = 0, B is just a statement 

35
The Propositional Calculus
letter B1, and then the lemma reduces to B1 ⊢ B1 and ¬B1 ⊢ ¬B1. Assume now 
that the lemma holds for all j < n.
Case 1: B is ¬C. Then C  has fewer than n occurrences of ¬ and ⇒.
Subcase 1a: Let C take the value T under the given truth value assignment. 
Then B takes the value F. So, C ′ is C and B ′ is ¬B. By the inductive hypoth-
esis applied to C, we have B
Bk
1′ …
′
,
,
⊢C . Then, by Lemma 1.11(b) and MP, 
B
Bk
1′ …
′
,
,
⊢¬¬C . But ¬¬C is B ′.
Subcase 1b: Let C take the value F. Then B takes the value T. So, C ′ is ¬C and B ′ 
is B, By inductive hypothesis, B
Bk
1′ …
′
,
,
⊢¬C . But ¬C is B ′.
Case 2: B is C ⇒ D. Then C and D have fewer occurrences of ¬ and ⇒ than B. 
So, by inductive hypothesis, B
Bk
1′ …
′
′
,
,
⊢¬C  and B
Bk
1′ …
′
′
,
,
⊢¬D .
Subcase 2a: C takes the value F. Then B takes the value T. So, C ′ is ¬ C and B ′ 
is B. Hence, B
Bk
1′ …
′
,
,
⊢¬C . By Lemma 1.11(c) and MP, B
Bk
1′ …
′
⇒
,
,
⊢C
D . 
But C ⇒ D is B ′.
Subcase 2b: D takes the value T. Then B takes the value T. So, D ′ is D and B ′ 
is B. Hence, B
Bk
1′ …
′
,
,
⊢D . Then, by axiom (A1) and MP, B
Bk
1′ …
′
⇒
,
,
.
⊢C
D  
But C ⇒ D is B ′.
Subcase 2c: C takes the value T and D takes the value F. Then B takes the value F. 
So, C ′ is C, D ′ is ¬D, and B ′ is ¬B. Therefore, B
Bk
1′ …
′
,
,
⊢C  and B
Bk
1′ …
′
,
,
⊢¬D. 
Hence, by Lemma 1.11(f) and MP, B
Bk
1′ …
′
⇒
(
)
,
,
⊢¬ C
D . But ¬(C ⇒ D) is B ′.
Proposition 1.14 (Completeness Theorem)
If a wf B of L is a tautology, then it is a theorem of L.
Proof
(Kalmár, 1935) Assume B is a tautology, and let B1, …, Bk be the statement 
letters in B. For any truth value assignment to B1, …, Bk, we have, by Lemma 
1.13, B
Bk
1′ …
′
,
,
⊢B . (B ′ is B because B always takes the value T.) Hence, when 
Bk′ is given the value T, we obtain B
Bk
1
1
′ …
′−
,
,
, Bk ⊢ B, and, when Bk is given 
the value F, we obtain B
Bk
1
1
′ …
′−
,
,
, ¬Bk ⊢ B. So, by the deduction theorem, 
B
Bk
1
1
′ …
′−
,
,
 ⊢ Bk ⇒ B and B
Bk
1
1
′ …
′−
,
,
, ⊢ ¬Bk ⇒ B. Then by Lemma 1.11(g) and 
MP, B
Bk
1
1
′ …
′−
,
,
 ⊢ B. Similarly, Bk−1 may be chosen to be T or F and, again 
applying the deduction theorem, Lemma 1.11(g) and MP, we can eliminate 
Bk−′ 1 just as we eliminated Bk′. After k such steps, we finally obtain ⊢B.
Corollary 1.15
If C  is an expression involving the signs ¬, ⇒, ∧, ∨, and ⇔ that is an abbrevia-
tion for a wf B of L, then C is a tautology if and only if B is a theorem of L.

36
Introduction to Mathematical Logic
Proof
In definitions (D1)–(D3), the abbreviating formulas replace wfs to which 
they are logically equivalent. Hence, by Proposition 1.4, B and C are logically 
equivalent, and C is a tautology if and only if B is a tautology. The corollary 
now follows from Propositions 1.12 and 1.14.
Corollary 1.16
The system L is consistent; that is, there is no wf B such that both B and ¬B 
are theorems of L.
Proof
By Proposition 1.12, every theorem of L is a tautology. The negation of a 
tautology cannot be a tautology and, therefore, it is impossible for both B 
and ¬B to be theorems of L.
Notice that L is consistent if and only if not all wfs of L are theorems. In fact, 
if L is consistent, then there are wfs that are not theorems (e.g., the negations of 
theorems). On the other hand, by Lemma 1.11(c), ⊢ L ¬B ⇒ (B ⇒ C), and so, if L 
were inconsistent, that is, if some wf B and its negation ¬B were provable, then 
by MP any wf C  would be provable. (This equivalence holds for any theory that 
has modus ponens as a rule of inference and in which Lemma 1.11(c) is provable.) 
A theory in which not all wfs are theorems is said to be absolutely consistent, and 
this definition is applicable even to theories that do not contain a negation sign.
Exercise
1.50	 Let B be a statement form that is not a tautology. Let L+ be the formal 
theory obtained from L by adding as new axioms all wfs obtainable 
from B by substituting arbitrary statement forms for the statement let-
ters in B, with the same form being substituted for all occurrences of a 
statement letter. Show that L+ is inconsistent.
1.5  Independence: Many-Valued Logics
A subset Y of the set of axioms of a theory is said to be independent if some 
wf in Y cannot be proved by means of the rules of inference from the set of 
those axioms not in Y.
Proposition 1.17
Each of the axiom schemas (A1)–(A3) is independent.

37
The Propositional Calculus
Proof
To prove the independence of axiom schema (A1), consider the following 
tables:
	
A
A
A
B
A
B
¬
⇒
0
1
0
0
0
1
1
1
0
2
2
0
2
0
0
0
1
2
1
1
2
2
1
0
0
2
2
1
2
0
2
2
0
For any assignment of the values 0, 1, and 2 to the statement letters of a wf 
B, these tables determine a corresponding value of B. If B always takes the 
value 0, B is called select. Modus ponens preserves selectness, since it is easy 
to check that, if B and B ⇒ C are select, so is C. One can also verify that all 
instances of axiom schemas (A2) and (A3) are select. Hence, any wf deriv-
able from (A2) and (A3) by modus ponens is select. However, A1 ⇒ (A2 ⇒ A1), 
which is an instance of (A1), is not select, since it takes the value 2 when A1 
is 1 and A2 is 2.
To prove the independence of axiom schema (A2), consider the following 
tables:
	
A
A
A
B
A
B
¬
⇒
0
1
0
0
0
1
0
1
0
0
2
1
2
0
0
0
1
2
1
1
2
2
1
0
0
2
1
1
2
0
2
2
0
Let us call a wf that always takes the value 0 according to these tables 
­grotesque. Modus ponens preserves grotesqueness and it is easy to verify 

38
Introduction to Mathematical Logic
that all instances of (A1) and (A3) are grotesque. However, the instance 
(A1 ⇒ (A2 ⇒ A3)) ⇒ ((A1 ⇒ A2) ⇒ (A1 ⇒ A3)) of (A2) takes the value 2 when A1 
is 0, A2 is 0, and A3 is 1 and, therefore, is not grotesque.
The following argument proves the independence of (A3). Let us call a wf 
B super if the wf h(B ) obtained by erasing all negation signs in B is a tautol-
ogy. Each instance of axiom schemas (A1) and (A2) is super. Also, modus 
ponens preserves the property of being super; for if h(B ⇒ C) and h(B) are 
tautologies, then h(C ) is a tautology. (Just note that h(B ⇒ C) is h(B) ⇒ h(C) 
and use Proposition 1.2.) Hence, every wf B derivable from (A1) and (A2) by 
modus ponens is super. But h((¬A1 ⇒ ¬A1) ⇒ ((¬A1 ⇒ A1) ⇒ A1)) is (A1 ⇒ A1) ⇒ 
((A1 ⇒ A1) ⇒ A1), which is not a tautology. Therefore, (¬A1 ⇒ ¬A1) ⇒ ((¬A1 ⇒ 
A1) ⇒ A1), an instance of (A3), is not super and is thereby not derivable from 
(A1) and (A2) by modus ponens.
The idea used in the proof of the independence of axiom schemas (A1) 
and (A2) may be generalized to the notion of a many-valued logic. Select a 
positive integer n, call the numbers 0, 1, …, n truth values, and choose a num-
ber m such that 0 ≤ m < n. The numbers 0, 1, …, m are called designated values. 
Take a finite number of “truth tables” representing functions from sets of 
the form {0, 1, …, n}k into {0, 1, …, n}. For each truth table, introduces a sign, 
called the corresponding connective. Using these connectives and state-
ment letters, we may construct “statement forms,” and every such state-
ment form containing j distinct letters determines a “truth function” from 
{0, 1, …, n}j into {0, 1, …, n}. A statement form whose corresponding truth 
function takes only designated values is said to be exceptional. The numbers 
m and n and the basic truth tables are said to define a (finite) many-valued 
logic M. A formal theory involving statement letters and the connectives of 
M is said to be suitable for M if and only if the theorems of the theory coin-
cide with the exceptional statement forms of M. All these notions obviously 
can be generalized to the case of an infinite number of truth values. If n = 1 
and m = 0 and the truth tables are those given for ¬ and ⇒ in Section 1.1, 
then the corresponding two-valued logic is that studied in this chapter. The 
exceptional wfs in this case were called tautologies. The system L is suit-
able for this logic, as proved in Propositions 1.12 and 1.14. In the proofs of 
the independence of axiom schemas (A1) and (A2), two three-valued logics 
were used.
Exercises
1.51	 Prove the independence of axiom schema (A3) by constructing appro-
priate “truth tables” for ¬ and ⇒.
1.52	 (McKinsey and Tarski, 1948) Consider the axiomatic theory P in which 
there is exactly one binary connective *, the only rule of inference is 
modus ponens (that is, C follows from B and B * C), and the axioms 
are all wfs of the form B * B. Show that P is not suitable for any (finite) 
many-valued logic.

39
The Propositional Calculus
1.53	 For any (finite) many-valued logic M, prove that there is an axiomatic 
theory suitable for M.
Further information about many-valued logics can be found in Rosser 
and Turquette (1952), Rescher (1969), Bolc and Borowik (1992), and 
Malinowski (1993).
1.6  Other Axiomatizations
Although the axiom system L is quite simple, there are many other systems 
that would do as well. We can use, instead of ¬ and ⇒, any collection of 
primitive connectives as long as these are adequate for the definition of all 
other truth-functional connectives.
Examples
L1: ∨ and ¬ are the primitive connectives. We use B ⇒ C as an abbreviation for 
¬B ∨ C. We have four axiom schemas: (1) B ∨ B ⇒ B; (2) B ⇒ B ∨ C; (3) B ∨ C ⇒ 
C ∨ B; and (4) (C ⇒ D) ⇒ (B ∨ C ⇒ B ∨ D). The only rule of inference is modus 
ponens. Here and below we use the usual rules for eliminating parentheses. 
This system is developed in Hilbert and Ackermann (1950).
L2: ∧ and ¬ are the primitive connectives. B ⇒ C is an abbreviation for 
¬(B ∧ ¬C). There are three axiom schemas: (1) B ⇒ (B ∧ B); (2) B ∧ C ⇒ B; 
and (3) (B ⇒ C) ⇒ (¬(C ∧ D) ⇒ ¬(D ∧ B)). Modus ponens is the only rule of 
inference. Consult Rosser (1953) for a detailed study.
L3: This is just like our original system L except that, instead of the axiom 
schemas (A1)–(A3), we have three specific axioms: (1) A1 ⇒(A2 ⇒ A1); (2) (A1 
⇒(A2 ⇒ A3)) ⇒((A1 ⇒ A2) ⇒(A1 ⇒ A3)); and (3) (¬A2 ⇒ ¬A1) ⇒((¬A2 ⇒ A1) ⇒ A2). 
In addition to modus ponens, we have a substitution rule: we may substitute 
any wf for all occurrences of a statement letter in a given wf.
L4: The primitive connectives are ⇒, ∧, ∨, and ¬. Modus ponens is the only rule, 
and we have 10 axiom schemas: (1) B ⇒ (C ⇒ B); (2) (B ⇒ (C ⇒ D)) ⇒ ((B ⇒ C ) 
⇒ (B ⇒ D)); (3) B ∧ C ⇒ B ; (4) B ∧ C ⇒ C; (5) B ⇒ (C ⇒ (B ∧ C )); (6) B ⇒ (B ∨ C ); 
(7) C ⇒ (B ∨ C ); (8) (B ⇒ D) ⇒ ((C ⇒ D) ⇒ (B ∨ C ⇒ D)); (9) (B ⇒ C ) ⇒ ((B ⇒ ¬C ) 
⇒ ¬B); and (10) ¬¬B ⇒ B. This system is discussed in Kleene (1952).
Axiomatizations can be found for the propositional calculus that contain 
only one axiom schema. For example, if ¬ and ⇒ are the primitive connec-
tives and modus ponens the only rule of inference, then the axiom schema
	
B
D
E
D
F
F
B
E
B
C
⇒
(
) ⇒
⇒
(
)
(
) ⇒
(
) ⇒
⇒
]
[
⇒
(
) ⇒
⇒
(
)




¬
¬

40
Introduction to Mathematical Logic
is sufficient (Meredith, 1953). Another single-axiom formulation, due to 
Nicod (1917), uses only alternative denial |. Its rule of inference is: D follows 
from B |(C |D) and B, and its axiom schema is
	
(
|( |
))|{[ |( | )]|[(
| )|((
|
)|(
|
))]}
B
C
D
E
E E
F
C
B F
B F
Further information, including historical background, may be found 
in Church (1956) and in a paper by Lukasiewicz and Tarski in Tarski 
(1956, IV).
Exercises
1.54	 (Hilbert and Ackermann, 1950) Prove the following results about the 
theory L1.
	
a.	 B ⇒ C ⊢ L1 D ∨ B ⇒ D ∨ C
	
b.	 ⊢ L1 (B ⇒ C) ⇒ ((D ⇒ B) ⇒ (D ⇒ C))
	
c.	 D ⇒ B, B ⇒ C ⊢ L1 D ⇒ C
	
d.	 ⊢ L1 B ⇒ B (i.e., ⊢ L1 ¬B ∨ B)
	
e.	 ⊢ L1 B ∨ ¬B
	
f.	 ⊢ L1 B ⇒ ¬¬B
	
g.	 ⊢ L1 ¬B ⇒ (B ⇒ C)
	
h.	 ⊢ L1 B ∨ (C ∨ D) ⇒ ((C ∨ (B ∨ D)) ∨ B)
	
i.	 ⊢ L1 (C ∨ (B ∨ D)) ∨ B ⇒ C ∨ (B ∨ D)
	
j.	 ⊢ L1 B ∨ (C ∨ D) ⇒ C ∨ (B ∨ D)
	
k.	 ⊢ L1 (B ⇒ (C ⇒ D)) ⇒ (C ⇒ (B ⇒ D))
	
l.	 ⊢ L1 (D ⇒ B) ⇒ ((B ⇒ C) ⇒ (D ⇒ C))
	
m.	 B ⇒ (C ⇒ D), B ⇒ C ⊢ L1 B ⇒ (B ⇒ D)
	
n.	 B ⇒ (C ⇒ D), B ⇒ C ⊢ L1 B ⇒ D
	
o.	 If Γ, B ⊢ L1 C, then Γ ⊢ L1 B ⇒ C (Deduction theorem)
	
p.	 C ⇒ B, ¬C ⇒ B ⊢ L1 B
	
q.	 ⊢ L1 B if and only if B is a tautology.
1.55	 (Rosser, 1953) Prove the following facts about the theory L2.
	
a.	 B ⇒ C, C ⇒ D ⊢ L2 ¬(¬D ∧ B)
	
b.	 ⊢ L2 ¬(¬B ∧ B)
	
c.	 ⊢ L2 ¬¬B ⇒ B
	
d.	 ⊢ L2 ¬(B ∧ C) ⇒ (C ⇒ ¬B)
	
e.	 ⊢ L2 B ⇒ ¬¬B
	
f.	 ⊢ L2 (B ⇒ C) ⇒ (¬C ⇒ ¬B)

41
The Propositional Calculus
	
g.	 ¬B ⇒ ¬C ⊢ L2 C ⇒ B
	
h.	 B ⇒ C ⊢ L2 D ∧ B ⇒ C ∧ D
	
i.	 B ⇒ C, C ⇒ D, D ⇒ E ⊢ L2 B ⇒ E
	
j.	 ⊢ L2 B ⇒ B
	
k.	 ⊢ L2 B ∧ C ⇒ C ∧ B
	
l.	 B ⇒ C, C ⇒ D ⊢ L2 B ⇒ D
	
m.	 B ⇒ C, D ⇒ E ⊢ L2 B ∧ D ⇒ C ∧ E
	
n.	 C ⇒ D ⊢ L2 B ∧ C ⇒ B ∧ D
	
o.	 ⊢ L2 (B ⇒ (C ⇒ D)) ⇒ ((B ∧ C) ⇒ D)
	
p.	 ⊢ L2 ((B ∧ C) ⇒ D) ⇒ (B ⇒ (C ⇒ D))
	
q.	 B ⇒ C, B ⇒ (C ⇒ D) ⊢ L2 B ⇒ D
	
r.	 ⊢ L2 B ⇒ (C ⇒ B ∧ C)
	
s.	 ⊢ L2 B ⇒ (C ⇒ B)
	
t.	 If Γ, B ⊢ L2 C, then Γ ⊢ L2 B ⇒ C (Deduction theorem)
	
u.	 ⊢ L2 (¬B ⇒ B) ⇒ B
	
v.	 B ⇒ C, ¬B ⇒ C ⊢ L2 C
	
w.	 ⊢ L2 B if and only if B is a tautology.
1.56	 Show that the theory L3 has the same theorems as the theory L.
1.57	 (Kleene, 1952) Derive the following facts about the theory L4.
	
a.	 ⊢ L4 B ⇒ B
	
b.	 If Γ, B ⊢ L4 C, then Γ ⊢ L4 B ⇒ C (deduction theorem)
	
c.	 B ⇒ C, C ⇒ D ⊢ L4 B ⇒ D
	
d.	 ⊢ L4 (B ⇒ C) ⇒ (¬C ⇒ ¬B)
	
e.	 B, ¬B ⊢ L4 C
	
f.	 ⊢ L4 B ⇒ ¬¬B
	
g.	 ⊢ L4 ¬B ⇒ (B ⇒ C)
	
h.	 ⊢ L4 B ⇒ (¬C ⇒ ¬(B ⇒ C))
	
i.	 ⊢ L4 ¬B ⇒ (¬C ⇒ ¬(B ∨ C))
	
j.	 ⊢ L4 (¬C ⇒ B) ⇒ ((C ⇒ B) ⇒ B)
	
k.	 ⊢ L4 B if and only if B is a tautology.
1.58D	Consider the following axiomatization of the propositional calculus L 
(due to Lukasiewicz). L  has the same wfs as our system L. Its only rule 
of inference is modus ponens. Its axiom schemas are:
	
a.	 (¬B ⇒ B) ⇒ B
	
b.	 B ⇒ (¬B ⇒ C)
	
c.	 (B ⇒ C) ⇒ ((C ⇒ D) ⇒ (B ⇒ D))

42
Introduction to Mathematical Logic
	
Prove that a wf B of L  is provable in L  if and only if B is a tautology. 
[Hint: Show that L and L  have the same theorems. However, remember 
that none of the results proved about L (such as Propositions 1.8–1.13) 
automatically carries over to L . In particular, the deduction theorem is 
not available until it is proved for L .]
1.59	 Show that axiom schema (A3) of L can be replaced by the schema 
(¬B ⇒ ¬C) ⇒ (C ⇒ B ) without altering the class of theorems.
1.60	 If axiom schema (10) of L4 is replaced by the schema (10)′: ¬B ⇒ (B ⇒ C), 
then the new system LI is called the intuitionistic propositional calcu-
lus.* Prove the following results about LI.
	
a.	 Consider an (n + 1)-valued logic with these connectives: ¬B is 0 
when B is n, and otherwise it is n; B ∧ C has the maximum of the 
values of B and C, whereas B  ∨ C has the minimum of these values; 
and B ⇒ C is 0 if B has a value not less than that of C, and otherwise 
it has the same value as C. If we take 0 as the only designated value, 
all theorems of LI are exceptional.
	
b.	 A1 ∨ ¬A1 and ¬ ¬A1 ⇒ A1 are not theorems of LI.
	
c.	 For any m, the wf
	
A
A
A
A
A
A
A
A
A
A
m
m
m
m
1
2
1
2
3
2
1
⇔
(
)∨… ∨
⇔
(
)∨
⇔
(
)∨…
∨
⇔
(
)∨… ∨
⇔
(
)
−
	
	
is not a theorem of LI
	
d.	 (Gödel, 1933) LI is not suitable for any finite many-valued logic.
	
e.	
i.	 If Γ, B ⊢ LI C, then Γ ⊢ LI B ⇒ C (deduction theorem)
	
ii.	 B ⇒ C, C ⇒ D ⊢ LI B ⇒ D
	
iii.	 ⊢ LI B ⇒ ¬¬B
	
iv.	 ⊢ LI (B ⇒ C) ⇒ (¬C ⇒ ¬B)
	
v.	 ⊢ LI B ⇒ (¬B ⇒ C)
	
vi.	 ⊢ LI ¬¬(¬¬B ⇒ B)
	
vii.	 ¬¬(B ⇒ C), ¬¬B ⊢ LI ¬¬C
	
viii.	 ⊢ LI ¬¬¬B ⇒ ¬B
	
fD.	 ⊢LI ¬¬B if and only if B is a tautology.
*	 The principal origin of intuitionistic logic was L.E.J. Brouwer’s belief that classical logic is 
wrong. According to Brouwer, B ∨ C is proved only when a proof of B or a proof of C has 
been found. As a consequence, various tautologies, such as B ∨ ¬B, are not generally accept-
able. For further information, consult Brouwer (1976), Heyting (1956), Kleene (1952), Troelstra 
(1969), and Dummett (1977). Jaśkowski (1936) showed that LI is suitable for a many-valued 
logic with denumerably many values.

43
The Propositional Calculus
	
g.	 ⊢ LI ¬B if and only if ¬B is a tautology.
	
h.D	 If B  has ∨ and ¬ as its only connectives, then ⊢ LI B if and only if B 
is a tautology.
1.61A	Let B and C be in the relation R if and only if ⊢ L B ⇔ C. Show that R is 
an equivalence relation. Given equivalence classes [B ] and [C], let [B] ∪ 
[C ] = [B ∨ C], [B] ∩ [C] = [B ∧ C], and [B ] = [¬B]. Show that the equiva-
lence classes under R form a Boolean algebra with respect to ∩, ∪, and −, 
called the Lindenbaum algebra L* determined by L. The element 0 of L* is 
the equivalence class consisting of all contradictions (i.e., negations of 
tautologies). The unit element 1 of L* is the equivalence class consisting 
of all tautologies. Notice that ⊢ L B ⇒ C if and only if [B] ≤ [C] in L*, and 
that ⊢ L B ⇔ C if and only if [B] = [C]. Show that a Boolean function f 
(built up from variables, 0, and 1, using ∪, ∩, and −) is equal to the con-
stant function 1 in all Boolean algebras if and only if ⊢L  f #, where f # is 
obtained from f by changing ∪, ∩, −, 0, and 1 to ∨, ∧, ¬, A1 ∧ ¬A1, and 
A1 ∨ ¬A1, respectively.


45
2
First-Order Logic and Model Theory
2.1  Quantifiers
There are various kinds of logical inference that cannot be justified on the 
basis of the propositional calculus; for example:
	
1.	Any friend of Martin is a friend of John.
	
	 Peter is not John’s friend.
	
	 Hence, Peter is not Martin’s friend.
	
2.	All human beings are rational.
	
	 Some animals are human beings.
	
	 Hence, some animals are rational.
	
3.	The successor of an even integer is odd.
	
	 2 is an even integer.
	
	 Hence, the successor of 2 is odd.
The correctness of these inferences rests not only upon the meanings of the 
truth-functional connectives, but also upon the meaning of such expressions 
as “any,” “all,” and “some,” and other linguistic constructions.
In order to make the structure of complex sentences more transparent, it 
is convenient to introduce special notation to represent frequently occur-
ring expressions. If P(x) asserts that x has the property P, then (∀x)P(x) means 
that property P holds for all x or, in other words, that everything has the 
­property P. On the other hand, (∃x)P(x) means that some x has the property 
P—that is, that there is at least one object having the property P. In (∀x)P(x), 
“(∀x)” is called a universal quantifier; in (∃x)P(x), “(∃x)” is called an existential 
quantifier. The study of quantifiers and related concepts is the principal sub-
ject of this chapter.

46
Introduction to Mathematical Logic
Examples
	
1′. Inference 1 above can be represented symbolically:
	
(
)( ( ,
)
( , ))
( , )
( ,
)
∀
⇒
¬
¬
x F x m
F x j
F p j
F p m
	
	 Here, F(x, y) means that x is a friend of y, while m, j, and p denote 
Martin, John, and Peter, respectively. The horizontal line above 
“¬F(p, m)” stands for “hence” or “therefore.”
	
2′. Inference 2 becomes:
	
(
)(
( )
( ))
(
)( ( )
( ))
(
)( ( )
( ))
∀
⇒
∃
∧
∃
∧
x H x
R x
x A x
H x
x A x
R x
	
	 Here, H, R, and A designate the properties of being human, rational, 
and an animal, respectively.
	
3′. Inference 3 can be symbolized as follows:
	
(
)( ( )
( )
( ( )))
( )
( )
( ( ))
∀
∧
⇒
∧
x I x
E x
D s x
I b
E b
D s b
	
	 Here, I, E, and D designate respectively the properties of being an 
integer, even, and odd; s(x) denotes the successor of x; and b denotes 
the integer 2.
Notice that the validity of these inferences does not depend upon the par-
ticular meanings of F, m, j, p, H, R, A, I, E, D, s, and b.
Just as statement forms were used to indicate logical structure dependent 
upon the logical connectives, so also the form of inferences involving quan-
tifiers, such as inferences 1–3, can be represented abstractly, as in 1′–3′. For 
this purpose, we shall use commas, parentheses, the symbols ¬ and ⇒ of the 

47
First-Order Logic and Model Theory
propositional calculus, the universal quantifier symbol ∀, and the following 
groups of symbols:
Individual variables: x1, x2, …, xn, …
Individual constants: a1, a2, …, an, …
Predicate letters: Ak
n (n and k are any positive integers)
Function letters: fk
n (n and k are any positive integers)
The positive integer n that is a superscript of a predicate letter Ak
n or of a 
function letter fk
n indicates the number of arguments, whereas the subscript 
k is just an indexing number to distinguish different predicate or function 
letters with the same number of arguments.*
In the preceding examples, x plays the role of an individual variable; m, 
j, p, and b play the role of individual constants; F is a binary predicate letter 
(i.e., a predicate letter with two arguments); H, R, A, I, E, and D are monadic 
predicate letters (i.e., predicate letters with one argument); and s is a function 
letter with one argument.
The function letters applied to the variables and individual constants gen-
erate the terms:
	
1.	Variables and individual constants are terms.
	
2.	If fk
n is a function letter and t1, t2, …, tn are terms, then f
t t
t
k
n
n
( ,
,
,
)
1
2 …
 
is a term.
	
3.	An expression is a term only if it can be shown to be a term on the 
basis of conditions 1 and 2.
Terms correspond to what in ordinary languages are nouns and noun 
phrases—for example, “two,” “two plus three,” and “two plus x.”
The predicate letters applied to terms yield the atomic formulas; that is, if Ak
n 
is a predicate letter and t1, t2, …, tn are terms, then A t t
t
k
n
n
( ,
,
,
)
1
2 …
 is an atomic 
formula.
The well-formed formulas (wfs) of quantification theory are defined as follows:
	
1.	Every atomic formula is a wf.
	
2.	If B and C are wfs and y is a variable, then (¬B), (B ⇒ C), and ((∀y)B) 
are wfs.
	
3.	An expression is a wf only if it can be shown to be a wf on the basis 
of conditions 1 and 2.
*	 For example, in arithmetic both addition and multiplication take two arguments. So, we 
would use one function letter, say f1
2, for addition, and a different function letter, say f2
2 for 
multiplication.

48
Introduction to Mathematical Logic
In ((∀y)B), “B” is called the scope of the quantifier “(∀y).” Notice that B need 
not contain the variable y. In that case, we understand ((∀y)B) to mean the 
same thing as B.
The expressions (B ∧ C), (B ∨ C), and (B ⇔ C) are defined as in system L (see 
page 29). It was unnecessary for us to use the symbol ∃ as a primitive symbol 
because we can define existential quantification as follows:
	
((
)
)
( ((
)(
)))
∃
∀
x
x
B
B
stands for
¬
¬
This definition is faithful to the meaning of the quantifiers: B(x) is true for 
some x if and only if it is not the case that B(x) is false for all x.*
2.1.1  Parentheses
The same conventions as made in Chapter 1 (page 11) about the omission of 
parentheses are made here, with the additional convention that quantifiers 
(∀y) and (∃y) rank in strength between ¬, ∧, ∨ and ⇒, ⇔. In other words, 
when we restore parentheses, negations, conjunctions, and disjunctions are 
handled first, then we take care of universal and existential quantifications, 
and then we deal with conditionals and biconditionals. As before, for con-
nectives of the same kind, we proceed from left to right. For consecutive 
negations and quantifications, we proceed from right to left.
Examples
Parentheses are restored in the following steps.
	
1.	(
)
(
)
(
,
)
∀
⇒
x A x
A x
x
1
1
1
1
1
2
2
1
	
	 ((
)
(
))
(
,
)
∀
⇒
x A x
A x
x
1
1
1
1
1
2
2
1
	
	 (((
)
(
))
(
,
))
∀
⇒
x A x
A x
x
1
1
1
1
1
2
2
1
	
2.	(
)
(
)
(
,
)
∀
∨
x A x
A x
x
1
1
1
1
1
2
2
1
	
	 (
)(
(
)
(
,
))
∀
∨
x
A x
A x
x
1
1
1
1
1
2
2
1
	
	 ((
)(
(
))
(
,
)))
∀
∨
x
A x
A x
x
1
1
1
1
1
2
2
1
*	 We could have taken ∃ as primitive and then defined ((∀x)B) as an abbreviation for (¬((∃x)
(¬B))), since B(x) is true for all x if and only if it is not the case that B(x) is false for some x.

49
First-Order Logic and Model Theory
	
3.	(
) (
)
(
,
)
∀
¬ ∃
x
x A x x
1
2
1
2
1
2
	
	 (
) ((
)
(
,
))
∀
¬ ∃
x
x A x x
1
2
1
2
1
2
	
	
(
)( ((
)
(
,
)))
∀
¬ ∃
x
x A x x
1
2
1
2
1
2
	
	 ((
)( ((
)
(
,
))))
∀
¬ ∃
x
x A x x
1
2
1
2
1
2
Exercises
2.1	
Restore parentheses to the following.
	
a.	 (
)
(
)
(
)
∀
∧¬
x A x
A x
1
1
1
1
1
1
2
	
b.	 (
)
(
)
(
)
∀
⇔
x A x
A x
2
1
1
2
1
1
2
	
c.	 (
)(
)
(
,
)
∀
∃
x
x A x x
2
1
1
2
1
2
	
d.	 (
)(
)(
)
(
)
(
)
(
)
∀
∀
∀
⇒
∧¬
x
x
x A x
A x
A x
1
3
4
1
1
1
1
1
2
1
1
1
	
e.	 (
)(
)(
)
(
)
(
) (
)
(
,
)
∃
∀
∃
∨∃
¬ ∀
x
x
x A x
x
x A x
x
1
2
3
1
1
1
2
3
1
2
3
2
	
f.	 (
)
(
)
(
,
,
)
(
)
(
)
∀
¬
⇒
∨∀
x
A x
A x x x
x A x
2
1
1
1
1
3
1
1
2
1
1
1
1
	
g.	 ¬ ∀
⇒∃
⇒
∧
(
)
(
)
(
)
(
)
(
,
)
(
)
x A x
x A x
A x x
A x
1
1
1
1
2
1
1
2
1
2
1
2
1
1
2
2.2	
Eliminate parentheses from the following wfs as far as is possible.
	
a.	 (((
)(
(
)
(
)))
((
)
(
)))
∀
⇒
∨
∃
x
A x
A x
x A x
1
1
1
1
1
1
1
1
1
1
1
	
b.	 (( ((
)(
(
)
(
))))
(
))
¬ ∃
∨
⇔
x
A x
A a
A x
2
1
1
2
1
1
1
1
1
2
	
c.	 (((
)( (
(
))))
(
(
)
(
)))
∀
¬ ¬
⇒
⇒
x
A a
A x
A x
1
1
1
3
1
1
1
1
1
2
An occurrence of a variable x is said to be bound in a wf B if either it is the 
occurrence of x in a quantifier “(∀x)” in B or it lies within the scope of a quan-
tifier “(∀x)” in B. Otherwise, the occurrence is said to be free in B.
Examples
	
1.	A x x
1
2
1
2
(
,
)
	
2.	A x x
x A x
1
2
1
2
1
1
1
1
(
,
)
(
)
(
)
⇒∀
	
3.	(
)(
(
,
)
(
)
(
))
∀
⇒∀
x
A x x
x A x
1
1
2
1
2
1
1
1
1
	
4.	(
)
(
,
)
∃x A x x
1
1
2
1
2
In Example 1, the single occurrence of x1 is free. In Example 2, the occurrence 
of x1 in A x x
1
2
1
2
(
,
) is free, but the second and third occurrences are bound. In 
Example 3, all occurrences of x1 are bound, and in Example 4 both occur-
rences of x1 are bound. (Remember that (
)
(
,
)
∃x A x x
1
1
2
1
2  is an abbreviation of 
¬ ∀
¬
(
)
(
,
)
x
A x x
1
1
2
1
2 .) In all four wfs, every occurrence of x2 is free. Notice that, 

50
Introduction to Mathematical Logic
as in Example 2, a variable may have both free and bound occurrences in the 
same wf. Also observe that an occurrence of a variable may be bound in some 
wf B but free in a subformula of B. For example, the first occurrence of x1 is free 
in the wf of Example 2 but bound in the larger wf of Example 3.
A variable is said to be free (bound) in a wf B if it has a free (bound) occur-
rence in B. Thus, a variable may be both free and bound in the same wf; for 
example, x1 is free and bound in the wf of Example 2.
Exercises
2.3	
Pick out the free and bound occurrences of variables in the following wfs.
	
a.	 (
)(((
)
(
,
))
(
,
))
∀
∀
⇒
x
x A x x
A x
a
3
1
1
2
1
2
1
2
3
1
	
b.	 (
)
(
,
)
(
)
(
,
)
∀
⇒∀
x A x
x
x A x
x
2
1
2
3
2
3
1
2
3
2
	
c.	 ((
)(
)
(
,
,
(
,
)))
(
)
(
,
(
))
∀
∃
∨¬ ∀
x
x A x x
f
x x
x A x
f
x
2
1
1
3
1
2
1
2
1
2
1
1
2
2
1
1
1
2.4	
Indicate the free and bound occurrences of all variables in the wfs of 
Exercises 2.1 and 2.2.
2.5	
Indicate the free and bound variables in the wfs of Exercises 2.1–2.3.
We shall often indicate that some of the variables x
x
i
ik
1,
,
…
 are free vari-
ables in a wf B by writing B as B (
,
,
).
x
x
i
ik
1 …
 This does not mean that B 
contains these variables as free variables, nor does it mean that B does not 
contain other free variables. This notation is convenient because we can then 
agree to write as B(t1, …, tk) the result of substituting in B the terms t1, …, tk 
for all free occurrences (if any) of x
x
i
ik
1,
,
…
, respectively.
If B  is a wf and t is a term, then t is said to be free for xi in B  if no free occurrence 
of xi in B  lies within the scope of any quantifier (∀xj), where xj is a variable in t. 
This concept of t being free for xi in a wf B   (xi) will have certain technical applica-
tions later on. It means that, if t is substituted for all free occurrences (if any) of 
xi in B  (xi), no occurrence of a variable in t becomes a bound occurrence in B  (t).
Examples
	
1.	The term x2 is free for x1 in A x
1
1
1
(
), but x2 is not free for x1 in (
)
(
).
∀x A x
2
1
1
1
	
2.	The term f
x x
1
2
1
3
(
,
) is free for x1 in (
)
(
,
)
(
)
∀
⇒
x A x x
A x
2
1
2
1
2
1
1
1  but is not 
free for x1 in (
)(
)
(
,
)
(
).
∃
∀
⇒
x
x A x x
A x
3
2
1
2
1
2
1
1
1
The following facts are obvious.
	
1.	A term that contains no variables is free for any variable in any wf.
	
2.	A term t is free for any variable in B if none of the variables of t is 
bound in B.
	
3.	xi is free for xi in any wf.
	
4.	Any term is free for xi in B if B contains no free occurrences of xi.

51
First-Order Logic and Model Theory
Exercises
2.6	
Is the term f
x x
1
2
1
2
(
,
) free for x1 in the following wfs?
	
a.	 A x x
x A x
1
2
1
2
2
1
1
2
(
,
)
(
)
(
)
⇒∀
	
b.	 ((
)
(
,
))
(
)
(
,
)
∀
∨∃
x A x
a
x A x x
2
1
2
2
1
2
1
2
1
2
	
c.	 (
)
(
,
)
∀x A x x
1
1
2
1
2
	
d.	 (
)
(
,
)
∀x A x x
2
1
2
1
2
	
e.	 (
)
(
)
(
,
)
∀
⇒
x A x
A x x
2
1
1
2
1
2
1
2
2.7	 Justify facts 1–4 above.
When English sentences are translated into formulas, certain general guide-
lines will be useful:
	
1.	A sentence of the form “All As are Bs” becomes (∀x)(A(x) ⇒ B(x)). For 
example, Every mathematician loves music is translated as (∀x)(M(x) ⇒ 
L(x)), where M(x) means x is a mathematician and L(x) means x loves 
music.
	
2.	A sentence of the form “Some As are Bs” becomes (∃x)(A(x) ∧ B(x)). 
For example, Some New Yorkers are friendly becomes (∃x)(N(x) ∧ F(x)), 
where N(x) means x is a New Yorker and F(x) means x is friendly.
	
3.	A sentence of the form “No As are Bs” becomes (∀x)(A(x) ⇒ ¬B(x)).* 
For example, No philosopher understands politics becomes (∀x)(P(x) ⇒ 
¬U(x)), where P(x) means x is a philosopher and U(x) means x under-
stands politics.
Let us consider a more complicated example: Some people respect everyone. 
This can be translated as (∃x)(P(x) ∧ (∀y)(P(y) ⇒ R(x, y))), where P(x) means x 
is a person and R(x, y) means x respects y.
Notice that, in informal discussions, to make formulas easier to read we 
may use lower-case letters u, v, x, y, z instead of our official notation xi for 
individual variables, capital letters A, B, C,… instead of our official notation 
Ak
n for predicate letters, lower-case letters f, g, h,… instead of our official nota-
tion fk
n for function letters, and lower-case letters a, b, c,… instead of our 
official notation ai for individual constants.
Exercises
2.8	
Translate the following sentences into wfs.
	
a.	 Anyone who is persistent can learn logic.
	
b.	 No politician is honest.
*	 As we shall see later, this is equivalent to ¬(∃x)(A(x) ∧ B(x)).

52
Introduction to Mathematical Logic
	
c.	 Not all birds can fly.
	
d.	 All birds cannot fly.
	
e.	 x is transcendental only if it is irrational.
	
f.	 Seniors date only juniors.
	
g.	 If anyone can solve the problem, Hilary can.
	
h.	 Nobody loves a loser.
	
i.	 Nobody in the statistics class is smarter than everyone in the logic 
class.
	
j.	 John hates all people who do not hate themselves.
	
k.	 Everyone loves somebody and no one loves everybody, or some-
body loves everybody and someone loves nobody.
	
l.	 You can fool some of the people all of the time, and you can fool all 
the people some of the time, but you can’t fool all the people all the 
time.
	
m.	  Any sets that have the same members are equal.
	
n.	  Anyone who knows Julia loves her.
	
o.	  There is no set belonging to precisely those sets that do not belong 
to themselves.
	
p.	  There is no barber who shaves precisely those men who do not 
shave themselves.
2.9	
Translate the following into everyday English. Note that everyday 
English does not use variables.
	
a.	 (∀x)(M(x) ∧ (∀y) ¬W(x, y) ⇒ U(x)), where M(x) means x is a man, W(x, y) 
means x is married to y, and U(x) means x is unhappy.
	
b.	 (∀x)(V(x) ∧ P(x) ⇒ A(x, b)), where V(x) means x is an even integer, P(x) 
means x is a prime integer, A(x, y) means x = y, and b denotes 2.
	
c.	 ¬(∃y)(I(y) ∧ (∀x)(I(x) ⇒ L(x, y))), where I(y) means y is an integer and 
L(x, y) means x ≤ y.
	
d.	 In the following wfs, A x
1
1( ) means x is a person and A x y
1
2( , ) means 
x hates y.
	
i.	 (
)(
( )
(
)(
( )
( , )))
∃
∧∀
⇒
x A x
y A y
A x y
1
1
1
1
1
2
	
ii.	 (
)(
( )
(
)(
( )
( , )))
∀
⇒∀
⇒
x A x
y A y
A x y
1
1
1
1
1
2
	
iii.	 (
)(
( )
(
)(
( )
(
( , )
( , ))))
∃
∧∀
⇒
⇔
x A x
y A y
A x y
A y y
1
1
1
1
1
2
1
2
	
e.	 (∀x)(H(x) ⇒ (∃y)(∃z)(¬A(y, z) ∧ (∀u)(P(u, x) ⇔ (A(u, y) ∨ A(u, z))))), where 
H(x) means x is a person, A(u, v) means “u = v,” and P(u, x) means u is 
a parent of x.

53
First-Order Logic and Model Theory
2.2  First-Order Languages and Their Interpretations: 
Satisfiability and Truth: Models
Well-formed formulas have meaning only when an interpretation is given for 
the symbols. We usually are interested in interpreting wfs whose symbols 
come from a specific language. For that reason, we shall define the notion of 
a first-order language.*
Definition
A first-order language L contains the following symbols.
	
a.	The propositional connectives ¬ and ⇒, and the universal quantifier 
symbol ∀.
	
b.	Punctuation marks: the left parenthesis “(”, the right parenthesis “)”, 
and the comma “,”.†
	
c.	Denumerably many individual variables x1, x2, .…
	
d.	A finite or denumerable, possibly empty, set of function letters.
	
e.	A finite or denumerable, possibly empty, set of individual constants.
	
f.	A nonempty set of predicate letters.
	
	 By a term of L we mean a term whose symbols are symbols of L.
	
	 By a wf of L we mean a wf whose symbols are symbols of L.
Thus, in a language L, some or all of the function letters and individual con-
stants may be absent, and some (but not all) of the predicate letters may be 
absent.‡ The individual constants, function letters, and predicate letters of a 
language L are called the nonlogical constants of L. Languages are designed 
in accordance with the subject matter we wish to study. A language for arith-
metic might contain function letters for addition and multiplication and a 
*	 The adjective “first-order” is used to distinguish the languages we shall study here from 
those in which there are predicates having other predicates or functions as arguments or in 
which predicate quantifiers or function quantifiers are permitted, or both. Most mathemati-
cal theories can be formalized within first-order languages, although there may be a loss 
of some of the intuitive content of those theories. Second-order languages are discussed in 
the appendix on second-order logic. Examples of higher-order languages are studied also in 
Gödel (1931), Tarski (1933), Church (1940), Leivant (1994), and van Bentham and Doets (1983). 
Differences between first-order and higher-order theories are examined in Corcoran (1980) 
and Shapiro (1991).
†	 The punctuation marks are not strictly necessary; they can be avoided by redefining the 
notions of term and wf. However, their use makes it easier to read and comprehend formulas.
‡	 If there were no predicate letters, there would be no wfs.

54
Introduction to Mathematical Logic
predicate letter for equality, whereas a language for geometry is likely to 
have predicate letters for equality and the notions of point and line, but no 
function letters at all.
Definition
Let L  be a first-order language. An interpretation M of L  consists of the fol-
lowing ingredients.
	
a.	A nonempty set D, called the domain of the interpretation.
	
b.	For each predicate letter Aj
n of L, an assignment of an n-place relation 
(
)
Aj
n M in D.
	
c.	For each function letter fj
n of L, an assignment of an n-place opera-
tion (
)
fj
n M in D (that is, a function from Dn into D).
	
d.	For each individual constant ai of L, an assignment of some fixed ele-
ment (ai)M of D.
Given such an interpretation, variables are thought of as ranging over the 
set D, and ¬, ⇒ and quantifiers are given their usual meaning. Remember 
that an n-place relation in D can be thought of as a subset of Dn, the set of all 
n-tuples of elements of D. For example, if D is the set of human beings, then 
the relation “father of” can be identified with the set of all ordered pairs 〈x, y〉 
such that x is the father of y.
For a given interpretation of a language L, a wf of L  without free variables 
(called a closed wf or a sentence) represents a proposition that is true or false, 
whereas a wf with free variables may be satisfied (i.e., true) for some values 
in the domain and not satisfied (i.e., false) for the others.
Examples
Consider the following wfs:
	
1.	A x x
1
2
1
2
(
,
)
	
2.	 (
)
(
,
)
∀x A x x
2
1
2
1
2
	
3.	 (
)(
)
(
,
)
∃
∀
x
x A x x
1
2
1
2
1
2
Let us take as domain the set of all positive integers and interpret A y z
1
2( , ) as 
y ≤ z. Then wf 1 represents the expression “x1 ≤ x2”, which is satisfied by all 
the ordered pairs 〈a, b〉 of positive integers such that a ≤ b. Wf 2 represents the 
expression “For all positive integers x2, x1 ≤ x2”,* which is satisfied only by the 
integer 1. Wf 3 is a true sentence asserting that there is a smallest positive integer. 
If we were to take as domain the set of all integers, then wf 3 would be false.
*	 In ordinary English, one would say “x1 is less than or equal to all positive integers.”

55
First-Order Logic and Model Theory
Exercises
2.10	 For the following wfs and for the given interpretations, indicate for 
what values the wfs are satisfied (if they contain free variables) or 
whether they are true or false (if they are closed wfs).
	
i.	A
f
x x
a
1
2
1
2
1
2
1
(
(
,
),
)
	
ii.	A x x
A x
x
1
2
1
2
1
2
2
1
(
,
)
(
,
)
⇒
	
iii.	(
)(
)(
)(
(
,
)
(
,
)
(
,
))
∀
∀
∀
∧
⇒
x
x
x
A x x
A x
x
A x x
1
2
3
1
2
1
2
1
2
2
3
1
2
1
3
	
a.	 The domain is the set of positive integers, A y z
1
2( , ) is y
z f
y z
≥,
( , )
1
2
 
is y · z, and a1 is 2.
	
b.	 The domain is the set of integers, A y z
1
2( , ) is y
z f
y z
= ,
( , )
1
2
 is 
y + z, and a1 is 0.
	
c.	 The domain is the set of all sets of integers, A y z
1
2( , ) is 
y
z f
y z
⊆,
( , )
1
2
 is y ∩ z, and a1 is the empty set ∅.
2.11	 Describe in everyday English the assertions determined by the follow-
ing wfs and interpretations.
	
a.	 (
)(
)(
( , )
(
)(
( )
( , )
( , )))
∀
∀
⇒∃
∧
∧
x
y A x y
z A z
A x z
A z y
1
2
1
1
1
2
1
2
, 
where 
the 
domain D is the set of real numbers, A x y
1
2( , ) means x < y, and A z
1
1( ) 
means z is a rational number.
	
b.	 (
)(
( )
(
)(
( )
( , )))
∀
⇒∃
∧
x A x
y A y
A y x
1
1
2
1
1
2
, where D is the set of all days 
and people, A x
1
1( ) means x is a day, A y
2
1( ) means y is a sucker, and 
A y x
1
2( , ) means y is born on day x.
	
c.	 (
)(
)(
( )
( )
(
( , )))
∀
∀
∧
⇒
x
y A x
A y
A
f
x y
1
1
1
1
2
1
1
2
, where D is the set of integers, 
A x
1
1( ) means x is odd, A x
2
1( ) means x is even, and f
x y
1
2( , ) denotes x + y.
	
d.	 For the following wfs, D is the set of all people and A u v
1
2( , ) means u 
loves v.
	
i.	(
)(
)(
( , )
∃
∀
x
y A x y
1
2
	
ii.	(
)(
)
( , )
∀
∃
y
x A x y
1
2
	
iii.	(
)(
)((
)(
( , ))
( , ))
∃
∀
∀
⇒
x
y
z A y z
A x y
1
2
1
2
	
iv.	(
)(
)
( , )
∃
∀
¬
x
y
A x y
1
2
	
e.	 (∀x) (∀u) (∀v) (∀w)(E(f(u, u), x) ∧ E(f(v, v), x) ∧ E(f(w, w), x) ⇒ E(u, v) ∨ 
E(u, w) ∨ E(v, w)), where D is the set of real numbers, E(x, y) means 
x = y, and f denotes the multiplication operation.
	
f.	 A x
x
A x x
A x
x
1
1
1
3
2
2
1
3
2
2
3
2
(
)
(
)(
(
,
)
(
,
))
∧∃
∧
 where D is the set of people, 
A u
1
1( ) means u is a woman and A u v
2
2( , ) means u is a parent of v.
	
g.	 (
)(
)(
(
)
(
)
(
(
,
)))
∀
∀
∧
⇒
x
x
A x
A x
A
f
x x
1
2
1
1
1
1
1
2
2
1
2
1
1
2
 where D is the set of real 
numbers, A u
1
1( ) means u is negative, A u
2
1( ) means u is positive, and 
f
u v
1
2( , ) is the product of u and v.
The concepts of satisfiability and truth are intuitively clear, but, following 
Tarski (1936), we also can provide a rigorous definition. Such a definition is 
necessary for carrying out precise proofs of many metamathematical results.

56
Introduction to Mathematical Logic
Satisfiability will be the fundamental notion, on the basis of which the notion 
of truth will be defined. Moreover, instead of talking about the n-tuples of objects 
that satisfy a wf that has n free variables, it is much more convenient from a tech-
nical standpoint to deal uniformly with denumerable sequences. What we have 
in mind is that a denumerable sequence s = (s1, s2, s3, …) is to be thought of as 
satisfying a wf B  that has x
x
x
j
j
jn
1
2
,
,
,
…
 as free variables (where j1 < j2 < ⋯ < jn) 
if the n-tuple 〈
…
〉
s
s
s
j
j
jn
1
2
,
,
,
 satisfies B in the usual sense. For example, a denu-
merable sequence (s1, s2, s3, …) of objects in the domain of an interpretation M 
will turn out to satisfy the wf A x
x
1
2
2
5
(
,
) if and only if the ordered pair, 〈s2, s5〉 is 
in the relation (
)
A1
2 M assigned to the predicate letter A1
2 by the interpretation M.
Let M be an interpretation of a language L and let D be the domain of M. 
Let Σ be the set of all denumerable sequences of elements of D. For a wf B of 
L, we shall define what it means for a sequence s = (s1, s2, …) in Σ to satisfy B 
in M. As a preliminary step, for a given s in Σ we shall define a function s* 
that assigns to each term t of L   an element s*(t) in D.
	
1.	If t is a variable xj, let s * (t) be sj.
	
2.	If t is an individual constant aj, then s*(t) is the interpretation (aj)M of 
this constant.
	
3.	If fk
n is a function letter, (
)
fk
n M is the corresponding operation in D, 
and t1, …, tn are terms, then
	
s
f
t
t
f
s t
s t
k
n
n
k
n
n
*
*
*
M
(
( ,
,
))
(
) (
( ),
,
( ))
1
1
…
=
…
Intuitively, s*(t) is the element of D obtained by substituting, for each j, a 
name of sj for all occurrences of xj in t and then performing the operations 
of the interpretation corresponding to the function letters of t. For instance, 
if t is f
x
f
x a
2
2
3
1
2
1
1
(
,
(
,
)) and if the interpretation has the set of integers as its 
domain, f2
2 and f1
2 are interpreted as ordinary multiplication and addition, 
respectively, and a1 is interpreted as 2, then, for any sequence s = (s1, s2, …) 
of integers, s*(t) is the integer s3 · (s1 + 2). This is really nothing more than the 
ordinary way of reading mathematical expressions.
Now we proceed to the definition of satisfaction, which will be an induc-
tive definition.
	
1.	If B is an atomic wf A t
t
k
n
n
( ,
,
)
1 …
 and (
)
Ak
n M is the corresponding 
n-place relation of the interpretation, then a sequence s = (s1, s2, …) 
satisfies B if and only if (
) (
( ),
,
( ))
A
s t
s t
k
n
n
M
*
*
1 …
—that is, if the n-tuple 
〈s*(t1), …, s*(tn)〉 is in the relation (
)
Ak
n M.*
*	 For example, if the domain of the interpretation is the set of real numbers, the interpreta-
tion of A1
2 is the relation ≤, and the interpretation of f1
1 is the function ex, then a sequence 
s = (s1, s2, …) of real numbers satisfies A
f
x
x
1
2
1
1
2
5
(
(
),
) if and only if e
s
s2
5
≤
. If the domain is the 
set of integers, the interpretation of A
x y u v
1
4( ,
, , ) is x . v = u . y, and the interpretation of a1 is 3, 
then a sequence s = (s1, s2, …) of integers satisfies A
x
a
x
x
1
4
3
1
1
3
(
,
,
,
) if and only if (s3)2 = 3s1.

57
First-Order Logic and Model Theory
	
2.	s satisfies ¬B if and only if s does not satisfy B.
	
3.	s satisfies B ⇒ C   if and only if s does not satisfy B or s satisfies C.
	
4.	s satisfies (∀xi)B  if and only if every sequence that differs from s in at 
most the ith component satisfies B.*
Intuitively, a sequence s = (s1, s2, …) satisfies a wf B  if and only if, when, for 
each i, we replace all free occurrences of xi (if any) in B  by a symbol repre-
senting si, the resulting proposition is true under the given interpretation.
Now we can define the notions of truth and falsity of wfs for a given 
interpretation.
Definitions
	
1.	A wf B is true for the interpretation M (written ⊧M B) if and only if 
every sequence in Σ satisfies B.
	
2.	B is said to be false for M if and only if no sequence in Σ satisfies B.
	
3.	An interpretation M is said to be a model for a set Γ of wfs if and only 
if every wf in Γ is true for M.
The plausibility of our definition of truth will be strengthened by the fact 
that we can derive all of the following expected properties I–XI of the notions 
of truth, falsity, and satisfaction. Proofs that are not explicitly given are left 
to the reader (or may be found in the answer to Exercise 2.12). Most of the 
results are also obvious if one wishes to use only the ordinary intuitive 
understanding of the notions of truth, falsity, and satisfaction.
	
I.	a.	 B is false for an interpretation M if and only if ¬B is true for M.
	
	 b.	 B is true for M if and only if ¬B is false for M.
	
II.	It is not the case that both ⊧M B and ⊧M ¬B; that is, no wf can be both 
true and false for M.
	 III.	If ⊧M B and ⊧M B ⇒ C, then ⊧M C.
	 IV.	B ⇒ C is false for M if and only if ⊧M B and ⊧M ¬C.
	
V.	 †Consider an interpretation M with domain D.
	
	 a.	 A sequence s satisfies B ∧ C  if and only if s satisfies B  and s satisfies C.
	
	 b.	 s satisfies B  ∨ C  if and only if s satisfies B or s satisfies C.
	
	 c.	 s satisfies B ⇔ C   if and only if s satisfies both B and C or s satisfies 
neither B  nor C.
*	 In other words, a sequence s = (s1, s2, …, si, …) satisfies (∀xi)B if and only if, for every element 
c of the domain, the sequence (s1, s2, …, c, …) satisfies B. Here, (s1, s2, …, c, …) denotes the 
sequence obtained from (s1, s2, …, si, …) by replacing the ith component si by c. Note also that, 
if s satisfies (∀xi)B, then, as a special case, s satisfies B.
†	 Remember that B ∧ C, B ∨ C, B ⇔ C and (∃xi)B are abbreviations for ¬(B ⇒ ¬C), ¬B ⇒ C, 
(B ⇒ C) ∧ (C ⇒ B) and ¬(∀xi) ¬B, respectively.

58
Introduction to Mathematical Logic
	
	 d.	 s satisfies (∃xi)B if and only if there is a sequence s′ that differs from s 
in at most the ith component such that s′ satisfies B. (In other words 
s = (s1, s2, …, si, …) satisfies (∃xi)B if and only if there is an element c 
in the domain D such that the sequence (s1, s2, …, c, …) satisfies B.)
	 VI.	⊧M B if and only if ⊧M(∀xi)B.
	
	 We can extend this result in the following way. By the closure* of B we 
mean the closed wf obtained from B by prefixing in universal quanti-
fiers those variables, in order of descending subscripts, that are free 
in B. If B has no free variables, the closure of B is defined to be B itself. 
For example, if B is A x x
x A x x x
1
2
2
5
2
1
3
1
2
3
(
,
)
(
)
(
,
,
)
⇒¬ ∃
, its closure is (∀x5)
(∀x3)(∀x2)(∀x1)B. It follows from (VI) that a wf B is true if and only if its 
closure is true.
	 VII.	Every instance of a tautology is true for any interpretation. (An instance 
of a statement form is a wf obtained from the statement form by sub-
stituting wfs for all statement letters, with all occurrences of the same 
statement letter being replaced by the same wf. Thus, an instance of 
A1 ⇒ ¬A2 ∨ A1 is A x
x A x
A x
1
1
2
1
1
1
1
1
1
2
(
)
( (
)
(
))
(
)
⇒¬ ∀
∨
.)
	
	 To prove (VII), show that all instances of the axioms of the system L are 
true and then use (III) and Proposition 1.14.
	VIII.	If the free variables (if any) of a wf B occur in the list x
x
i
ik
1,
,
…
 and if 
the sequences s and s′ have the same components in the i1th, …, ikth 
places, then s satisfies B if and only if s′ satisfies B [Hint: Use induc-
tion on the number of connectives and quantifiers in B. First prove this 
lemma: If the variables in a term t occur in the list x
x
i
ik
1,
,
…
, and if s 
and s′ have the same components in the i1th, …, ikth places, then s*(t) = 
(s′)*(t). In particular, if t contains no variables at all, s*(t) = (s′)*(t) for any 
sequences s and s′.]
Although, by (VIII), a particular wf B with k free variables is essentially satis-
fied or not only by k-tuples, rather than by denumerable sequences, it is more 
convenient for a general treatment of satisfaction to deal with infinite rather 
than finite sequences. If we were to define satisfaction using finite sequences, 
conditions 3 and 4 of the definition of satisfaction would become much more 
complicated.
Let x
x
i
ik
1,
,
…
 be k distinct variables in order of increasing subscripts. Let 
B (
,
,
)
x
x
i
ik
1 …
 be a wf that has x
x
i
ik
1,
,
…
 as its only free variables. The set of 
k-tuples 〈b1, …, bk〉 of elements of the domain D such that any sequence with 
b1, …, bk in its i1th, …, ikth places, respectively, satisfies B (
,
,
)
x
x
i
ik
1 …
 is called 
the relation (or property†) of the interpretation defined by B. Extending our ter-
minology, we shall say that every k-tuple 〈b1, …, bk〉 in this relation satisfies 
B (
,
,
)
x
x
i
ik
1 …
 in the interpretation M; this will be written ⊧M B[b1, …, bk] . This 
extended notion of satisfaction corresponds to the original intuitive notion.
*	 A better term for closure would be universal closure.
†	 When k = 1, the relation is called a property.

59
First-Order Logic and Model Theory
Examples
	
1.	If the domain D of M is the set of human beings, A x y
1
2( , ) is inter-
preted as x is a brother of y, and A x y
2
2( , ) is interpreted as x is a par-
ent of y, then the binary relation on D corresponding to the wf 
B (
,
):(
)(
(
,
)
(
,
))
x x
x
A x x
A x
x
1
2
3
1
2
1
3
2
2
3
2
∃
∧
 is the relation of unclehood. 
⊧M B[b, c] when and only when b is an uncle of c.
	
2.	If the domain is the set of positive integers, A1
2 is interpreted as =, f1
2 is 
interpreted as multiplication, and a1 is interpreted as 1, then the wf B(x1):
	
¬
∧∀
∃
⇒
∨
A x a
x
x A x
f
x
x
A x
x
A x
1
2
1
1
2
3
1
2
1
1
2
2
3
1
2
2
1
1
2
(
,
)
(
)((
)
(
,
(
,
))
(
,
)
(
2
1
,
))
a
	
	 determines the property of being a prime number. Thus ⊧M B[k] if 
and only if k is a prime number.
	 IX.	 If B is a closed wf of a language L, then, for any interpretation M, 
either ⊧M B or ⊧M ¬B—that is, either B is true for M or B is false for 
M. [Hint: Use (VIII).] Of course, B may be true for some interpreta-
tions and false for others. (As an example, consider A a
1
1
1
(
). If M is 
an interpretation whose domain is the set of positive integers, A1
1 is 
interpreted as the property of being a prime, and the interpretation 
of a1 is 2, then A a
1
1
1
(
) is true. If we change the interpretation by inter-
preting a1 as 4, then A a
1
1
1
(
) becomes false.)
If B is not closed—that is, if B contains free variables—B may be 
neither true nor false for some interpretation. For example, if B is 
A x x
1
2
1
2
(
,
) and we consider an interpretation in which the domain 
is the set of integers and A y z
1
2( , )  is interpreted as y < z, then B is 
satisfied by only those sequences s = (s1, s2, …) of integers in which 
s1 < s2. Hence, B is neither true nor false for this interpretation. On 
the other hand, there are wfs that are not closed but that neverthe-
less are true or false for every interpretation. A simple example is the 
wf A x
A x
1
1
1
1
1
1
(
)
(
),
∨¬
 which is true for every interpretation.
	
X.	Assume t is free for xi in B(xi). Then (∀xi)B(xi) ⇒ B(t) is true for all 
interpretations.
	
	 The proof of (X) is based upon the following lemmas.
Lemma 1
If t and u are terms, s is a sequence in Σ, t′ results from t by replacing all 
occurrences of xi by u, and s′ results from s by replacing the ith component 
of s by s*(u), then s*(t′) = (s′)*(t). [Hint: Use induction on the length of t.*]
*	 The length of an expression is the number of occurrences of symbols in the expression.

60
Introduction to Mathematical Logic
Lemma 2
Let t be free for xi in B(xi). Then:
	
a.	A sequences s = (s1, s2, …) satisfies B(t) if and only if the sequence s′, 
obtained from s by substituting s*(t) for si in the ith place, satisfies B(xi). 
[Hint: Use induction on the number of occurrences of connectives and 
quantifiers in B(xi), applying Lemma 1.]
	
b.	If (∀xi)B(xi) is satisfied by the sequence s, then B(t) also is satisfied by s.
	 XI.	If B does not contain xi free, then (∀xi)(B ⇒ C) ⇒ (B ⇒ (∀xi)C) is true for 
all interpretations.
Proof
Assume (XI) is not correct. Then (∀xi)(B ⇒ C) ⇒ (B ⇒ (∀xi)C) is not true for some 
interpretation. By condition 3 of the definition of satisfaction, there is a sequence 
s such that s satisfies (∀xi)(B ⇒ C) and s does not satisfy B ⇒ (∀xi)C. From the latter 
and condition 3, s satisfies B and s does not satisfy (∀xi)C. Hence, by condition 4, 
there is a sequence s′, differing from s in at most the ith place, such that s′ does 
not satisfy C. Since xi is free in neither (∀xi)(B ⇒ C) nor B, and since s satisfies 
both of these wfs, it follows by (VIII) that s′ also satisfies both (∀xi)(B ⇒ C) and B. 
Since s′ satisfies (∀xi)(B ⇒ C), it follows by condition 4 that s′ satisfies B ⇒ C. Since 
s′ satisfies B ⇒ C and B, condition 3 implies that s′ satisfies C, which contradicts 
the fact that s′ does not satisfy C. Hence, (XI) is established.
Exercises
2.12	 Verify (I)–(X).
2.13	 Prove that a closed wf B is true for M if and only if B is satisfied by some 
sequence s in Σ. (Remember that Σ is the set of denumerable sequences 
of elements in the domain of M.)
2.14	 Find the properties or relations determined by the following wfs and 
interpretations.
	
a.	 [(
)
(
( , ), )]
[(
)
(
( , ), )]
∃
∧∃
u A
f
x u y
v A
f
x v z
1
2
1
2
1
2
1
2
, where the domain D is the 
set of integers, A1
2 is =, and f1
2 is multiplication.
	
b.	 Here, D is the set of nonnegative integers, A1
2 is =, a1 denotes 0, f1
2 is 
addition, and f2
2 is multiplication.
	
i.	 [(
)(
( ,
)
(
( , ), ))]
∃
¬
∧
z
A z a
A
f
x z y
1
2
1
1
2
1
2
	
ii.	 (
)
( ,
( , ))
∃y A x f
y y
1
2
2
2
	
c.	 (
)
(
(
,
),
)
∃x A
f
x x
x
3
1
2
1
2
1
3
2 , where D is the set of positive integers, A1
2 is =, 
and f1
2 is multiplication,

61
First-Order Logic and Model Theory
	
d.	 A x
x
A x x
1
1
1
2
1
2
1
2
(
)
(
)
(
,
)
∧∀
¬
, where D is the set of all living people, A x
1
1( ) 
means x is a man and A x y
1
2( , ) means x is married to y.
	
e.	 i.	 (
)(
)(
(
,
)
(
,
)
(
,
))
∃
∃
∧
∧
x
x
A x x
A x
x
A x x
1
2
1
2
1
3
1
2
2
4
2
2
1
2
	
	
ii.	 (
)(
(
,
)
(
,
))
∃
∧
x
A x x
A x
x
3
1
2
1
3
1
2
3
2
	
	
	
where D is the set of all people, A x y
1
2( , ) means x is a parent of y, 
and A x y
2
2( , ) means x and y are siblings.
	
f.	 (
)((
)(
(
(
,
),
)
(
)(
(
(
,
),
))
∀
∃
∧∃
⇒
x
x
A
f
x
x
x
x
A
f
x
x
x
A
3
4
1
2
1
2
4
3
1
4
1
2
1
2
4
3
2
11
2
3
1
(
,
)),
x
a
 
where D is the set of positive integers, A1
2 is =, f1
2 is multiplication, 
and a1 denotes 1.
	
g.	 ¬
∧∃
∧
A x
x
y A y x
A x
y
1
2
2
1
1
2
1
2
2
2
(
,
)
(
)(
( ,
)
(
, )), where D is the set of all peo-
ple, A u v
1
2( , ) means u is a parent of v, and A u v
2
2( , ) means u is a wife 
of v.
2.15	 For each of the following sentences and interpretations, write a transla-
tion into ordinary English and determine its truth or falsity.
	
a.	 The domain D is the set of nonnegative integers, A1
2 is =, f1
2 is addi-
tion, f2
2 is multiplication, a1 denotes 0, and a2 denotes 1.
	
	
i.	 (
)(
)(
( ,
( , ))
( ,
(
( , ),
)))
∀
∃
∨
x
y A x f
y y
A x f
f
y y a
1
2
1
2
1
2
1
2
1
2
2
	
	
ii.	 (
)(
)(
(
( , ),
)
( ,
)
( ,
))
∀
∀
⇒
∨
x
y A
f
x y a
A x a
A y a
1
2
2
2
1
1
2
1
1
2
1
	
	
iii.	(
)
(
( , ),
)
∃y A
f
y y a
1
2
1
2
2
	
b.	 Here, D is the set of integers, A1
2 is =, and f1
2 is addition.
	
	
i.	 (
)(
)
(
(
,
),
(
,
))
∀
∀
x
x A
f
x x
f
x
x
1
2
1
2
1
2
1
2
1
2
2
1
	
	
ii.	 (
)(
)(
)
(
(
,
(
,
)),
(
(
,
),
))
∀
∀
∀
x
x
x A
f
x
f
x
x
f
f
x x
x
1
2
3
1
2
1
2
1
1
2
2
3
1
2
1
2
1
2
3
	
	
iii.	(
)(
)(
)
(
(
,
),
)
∀
∀
∃
x
x
x A
f
x x
x
1
2
3
1
2
1
2
1
3
2
	
c.	 The wfs are the same as in part (b), but the domain is the set of posi-
tive integers, A1
2 is =, and f
x y
1
2( , ) is xy.
	
d.	 The domain is the set of rational numbers, A1
2 is =, A2
2 is <, f1
2 is mul-
tiplication, f
x
1
1( ) is x + 1, and a1 denotes 0.
	
	
i.	 (
)
(
( , ),
(
(
)))
∃x A
f
x x
f
f
a
1
2
1
2
1
1
1
1
1
	
	
ii.	 (
)(
)(
( , )
(
)(
( , )
( , )))
∀
∀
⇒∃
∧
x
y A x y
z A x z
A z y
2
2
2
2
2
2
	
	
iii.	(
)(
( ,
)
(
)
(
( , ),
(
)))
∀
¬
⇒∃
x
A x a
y A
f
x y
f
a
1
2
1
1
2
1
2
1
1
1
	
e.	 The domain is the set of nonnegative integers, A u v
1
2( , ) means u ≤ v, 
and A u v w
1
3( , ,
) means u + v = w.
	
	
i.	 (
)(
)(
)(
( , , )
( , , ))
∀
∀
∀
⇒
x
y
z A x y z
A y x z
1
3
1
3
	
	
ii.	 (
)(
)(
( , , )
( , ))
∀
∀
⇒
x
y A x x y
A x y
1
3
1
2
	
	
iii.	(
)(
)(
( , )
( , , ))
∀
∀
⇒
x
y A x y
A x x y
1
2
1
3
	
	
iv.	(
)(
)
( , , )
∃
∀
x
y A x y y
1
3

62
Introduction to Mathematical Logic
	
	
v.	 (
)(
)
( , )
∃
∀
y
x A x y
1
2
	
	
vi.	(
)(
)(
( , )
(
)
( , , ))
∀
∀
⇔∃
x
y A x y
z A x z y
1
2
1
3
	
f.	 The domain is the set of nonnegative integers, A u v
1
2( , ) means 
u
v f
u v
u
v
=
=
+
,
( , )
1
2
, and f
u v
u v
2
2( , ) =
⋅
	
(
)(
)(
)
( ,
(
( , ),
( , )))
∀
∃
∃
x
y
z A x f
f
y y
f
z z
1
2
1
2
2
2
2
2
Definitions
A wf B is said to be logically valid if and only if B is true for every 
interpretation.*
B is said to be satisfiable if and only if there is an interpretation for which B 
is satisfied by at least one sequence.
It is obvious that B is logically valid if and only if ¬B is not satisfiable, and 
B is satisfiable if and only if ¬B is not logically valid.
If B is a closed wf, then we know that B is either true or false for any given 
interpretation; that is, B is satisfied by all sequences or by none. Therefore, if 
B is closed, then B is satisfiable if and only if B is true for some interpretation.
A set Γ of wfs is said to be satisfiable if and only if there is an interpretation 
in which there is a sequence that satisfies every wf of Γ.
It is impossible for both a wf B and its negation ¬B to be logically valid. 
For if B is true for an interpretation, then ¬B is false for that interpretation.
We say that B is contradictory if and only if B is false for every interpreta-
tion, or, equivalently, if and only if ¬B is logically valid.
B is said to logically imply C if and only if, in every interpretation, every 
sequence that satisfies B also satisfies C. More generally, C is said to be a logi-
cal consequence of a set Γ of wfs if and only if, in every interpretation, every 
sequence that satisfies every wf in Γ also satisfies C.
B and C are said to be logically equivalent if and only if they logically imply 
each other.
The following assertions are easy consequences of these definitions.
	
1.	B  logically implies C   if and only if B ⇒ C  is logically valid.
	
2.	B  and C   are logically equivalent if and only if B ⇔ C   is logically valid.
	
3.	If B  logically implies C and B  is true in a given interpretation, then 
so is C.
	
4.	If C   is a logical consequence of a set Γ of wfs and all wfs in Γ are true 
in a given interpretation, then so is C.
*	 The mathematician and philosopher G.W. Leibniz (1646–1716) gave a similar definition: B is 
logically valid if and only if B is true in all “possible worlds.”

63
First-Order Logic and Model Theory
Exercise
2.16	 Prove assertions 1–4.
Examples
	
1.	Every instance of a tautology is logically valid (VII).
	
2.	If t is free for x in B(x), then (∀x)B(x) ⇒ B(t) is logically valid (X).
	
3.	If B does not contain x free, then (∀x)(B ⇒ C) ⇒ (B ⇒ (∀x)C) is logi-
cally valid (XI).
	
4.	B is logically valid if and only if (∀y1) … (∀yn)B is logically valid (VI).
	
5.	The wf (
)(
)
(
,
)
(
)(
)
(
,
)
∀
∃
⇒∃
∀
x
x A x x
x
x A x x
2
1
1
2
1
2
1
2
1
2
1
2  is not logically 
valid. As a counterexample, let the domain D be the set of integers 
and let A y z
1
2( , ) mean y < z. Then (
)(
)
(
,
)
∀
∃
x
x A x x
2
1
1
2
1
2  is true but 
(
)(
)
(
,
)
∃
∀
x
x A x x
1
2
1
2
1
2  is false.
Exercises
2.17	 Show that the following wfs are not logically valid.
	
a.	 [(
)
(
)
(
)
(
)]
[(
)(
(
)
(
))]
∀
⇒∀
⇒
∀
⇒
x A x
x A x
x
A x
A x
1
1
1
1
1
2
1
1
1
1
1
1
2
1
1
	
b.	 [(
)(
(
)
(
))]
[((
))
(
))
(
)
(
)]
∀
∨
⇒
∀
∨∀
x
A x
A x
x
A x
x A x
1
1
1
1
2
1
1
1
1
1
1
1
2
1
1
2.18	 Show that the following wfs are logically valid.*
	
a.	 B(t) ⇒ (∃xi)B(xi) if t is free for xi in B(xi)
	
b.	 (∀xi)B ⇒ (∃xi)B
	
c.	 (∀xi)(∀xj)B ⇒ (∀xj)(∀xi)B
	
d.	 (∀xi)B ⇔ ¬(∃xi)¬B
	
e.	 (∀xi)(B ⇒ C) ⇒ ((∀xi)B ⇒ (∀xi)C)
	
f.	 ((∀xi)B) ∧ (∀xi)C ⇔ (∀xi)(B ∧ C)
	
g.	 ((∀xi)B) ∨ (∀xi)C ⇒ (∀xi)(B ∨ C)
	
h.	 (∃xi)(∃xj)B ⇔ (∃xj)(∃xi)B
	
i.	 (∃xi)(∀xj)B ⇒ (∀xj)(∃xi)B
2.19 a.	 If B is a closed wf, show that B logically implies C if and only if C is 
true for every interpretation for which B is true.
	
b.	 Although, by (VI), (
)
(
)
∀x A x
1
1
1
1  is true whenever A x
1
1
1
(
) is true, find 
an interpretation for which A x
x A x
1
1
1
1
1
1
1
(
)
(
)
(
)
⇒∀
 is not true. (Hence, 
the hypothesis that B is a closed wf is essential in (a).)
*	 At this point, one can use intuitive arguments or one can use the rigorous definitions of 
satisfaction and truth, as in the argument above for (XI). Later on, we shall discover another 
method for showing logical validity.

64
Introduction to Mathematical Logic
2.20	 Prove that, if the free variables of B are y1, …, yn, then B is satisfiable if 
and only if (∃y1), …, (∃yn)B is satisfiable.
2.21	 Produce counterexamples to show that the following wfs are not logi-
cally valid (that is, in each case, find an interpretation for which the wf 
is not true).
	
a.	 [(
)(
)(
)(
( , )
( , )
( , ))
(
)
( , )]
∀
∀
∀
∧
⇒
∧∀
¬
x
y
z A x y
A y z
A x z
x
A x x
1
2
1
2
1
2
1
2
 
	
	
⇒∃
∀
¬
(
)(
)
( , )
x
y
A x y
1
2
	
b.	 (
)(
)
( , )
(
)
( , )
∀
∃
⇒∃
x
y A x y
y A y y
1
2
1
2
	
c.	 (
)(
)
( , )
(
)
( , )
∃
∃
⇒∃
x
y A x y
y A y y
1
2
1
2
	
d.	 [(
)
( )
(
)
( )]
(
)(
( )
( ))
∃
⇔∃
⇒∀
⇔
x A x
x A x
x A x
A x
1
1
2
1
1
1
2
1
	
e.	 (
)(
( )
( ))
((
)
( )
(
)
( ))
∃
⇒
⇒
∃
⇒∃
x A x
A x
x A x
x A x
1
1
2
1
1
1
2
1
	
f.	 [(
)(
)(
( , )
( , ))
(
)(
)(
)(
( , )
( ,
∀
∀
⇒
∧∀
∀
∀
∧
x
y A x y
A y x
x
y
z A x y
A y z
1
2
1
2
1
2
1
2
)
	
	
⇒
⇒∀
A x z
x A x x
1
2
1
2
( , ))]
(
)
( , )
	
g.D	(
)(
)(
( , )
( , )
[
( , )
( , )])
∃
∀
∧¬
⇒
⇔
x
y A x y
A y x
A x x
A y y
1
2
1
2
1
2
1
2
	
h.	 (
)(
)(
)(
( , )
(
( , )
( , )
( , )))
∀
∀
∀
∧
⇒
∨
x
y
z A x x
A x z
A x y
A y z
1
2
1
2
1
2
1
2
	
	
⇒∃
∀
(
)(
)
( , )
y
z A y z
1
2
	
i.	 (
)(
)(
)((
( , )
( , ))
(
( , )
( , )))
∃
∀
∃
⇒
⇒
⇒
x
y
z
A y z
A x z
A x x
A y x
1
2
1
2
1
2
1
2
2.22	 By introducing appropriate notation, write the sentences of each of the 
following arguments as wfs and determine whether the argument is 
correct, that is, determine whether the conclusion is logically implied 
by the conjunction of the premisses
	
a.	 All scientists are neurotic. No vegetarians are neurotic. Therefore, 
no vegetarians are scientists.
	
b.	 All men are animals. Some animals are carnivorous. Therefore, 
some men are carnivorous.
	
c.	 Some geniuses are celibate. Some students are not celibate. 
Therefore, some students are not geniuses.
	
d.	 Any barber in Jonesville shaves exactly those men in Jonesville who 
do not shave themselves. Hence, there is no barber in Jonesville.
	
e.	 For any numbers x, y, z, if x > y and y > z, then x > z. x > x is false for 
all numbers x. Therefore, for any numbers x and y, if x > y, then it is 
not the case that y > x.
	
f.	 No student in the statistics class is smarter than every student in 
the logic class. Hence, some student in the logic class is smarter 
than every student in the statistics class.
	
g.	 Everyone who is sane can understand mathematics. None of 
Hegel’s sons can understand mathematics. No madmen are fit to 
vote. Hence, none of Hegel’s sons is fit to vote.

65
First-Order Logic and Model Theory
	
h.	 For every set x, there is a set y such that the cardinality of y is greater 
than the cardinality of x. If x is included in y, the cardinality of x 
is not greater than the cardinality of y. Every set is included in V. 
Hence, V is not a set.
	
i.	 For all positive integers x, x ≤ x. For all positive integers x, y, z, if 
x ≤ y and y ≤ z, then x ≤ z. For all positive integers x and y, x ≤ y or 
y ≤ x. Therefore, there is a positive integer y such that, for all posi-
tive integers x, y ≤ x.
	
j.	 For any integers x, y, z, if x > y and y > z, then x > z. x > x is false for 
all integers x. Therefore, for any integers x and y, if x > y, then it is 
not the case that y > x.
2.23	 Determine whether the following sets of wfs are compatible—that is, 
whether their conjunction is satisfiable.
	
a.	 (
)(
)
( , )
∃
∃
x
y A x y
1
2
	
	
(
)(
)(
)(
( , )
( , ))
∀
∀
∃
∧
x
y
z A x z
A z y
1
2
1
2
	
b.	 (
)(
)
( , )
∀
∃
x
y A y x
1
2
	
	
(
)(
)(
( , )
( , ))
∀
∀
⇒¬
x
y A x y
A y x
1
2
1
2
	
	
(
)(
)(
)(
( , )
( , )
( , ))
∀
∀
∀
∧
⇒
x
y
z A x y
A y z
A x z
1
2
1
2
1
2
	
c.	 All unicorns are animals.
	
	
No unicorns are animals.
2.24	 Determine whether the following wfs are logically valid.
	
a.	 ¬ ∃
∀
⇔¬
(
)(
)(
( , )
( , ))
y
x A x y
A x x
1
2
1
2
	
b.	 [(
)
( )
(
)
( )]
(
)(
( )
( ))
∃
⇒∃
⇒∃
⇒
x A x
x A x
x A x
A x
1
1
2
1
1
1
2
1
	
c.	 (
)(
( )
(
)
( ))
∃
⇒∀
x A x
y A y
1
1
1
1
	
d.	 (
)(
( )
( ))
(((
)
( ))
(
)
( ))
∀
∨
⇒
∀
∨∃
x A x
A x
x A x
x A x
1
1
2
1
1
1
2
1
	
e.	 (
)(
)(
( , )
(
)
( , ))
∃
∃
⇒∀
x
y A x y
z A z y
1
2
1
2
	
f.	 (
)(
)(
( )
( ))
(
)(
( )
( ))
∃
∃
⇒
⇒∃
⇒
x
y A x
A y
x A x
A x
1
1
2
1
1
1
2
1
	
g.	 (
)(
( )
( ))
(
)(
( )
( ))
∀
⇒
⇒¬ ∀
⇒¬
x A x
A x
x A x
A x
1
1
2
1
1
1
2
1
	
h.	 (
)
( , )
(
)(
)
( , )
∃
⇒∃
∃
x A x x
x
y A x y
1
2
1
2
	
i.	 ((
)
( ))
(
)
( )
(
)(
( )
( ))
∃
∧∃
⇒∃
∧
x A x
x A x
x A x
A x
1
1
2
1
1
1
2
1
	
j.	 ((
)
( ))
(
)
( )
(
)(
( )
( ))
∀
∨∀
⇒∀
∨
x A x
x A x
x A x
A x
1
1
2
1
1
1
2
1
2.25	 Exhibit a logically valid wf that is not an instance of a tautology. 
However, show that any logically valid open wf (that is, a wf without 
quantifiers) must be an instance of a tautology.

66
Introduction to Mathematical Logic
2.26	 a.	 Find a satisfiable closed wf that is not true in any interpretation 
whose domain has only one member.
	
b.	 Find a satisfiable closed wf that is not true in any interpretation 
whose domain has fewer than three members.
2.3  First-Order Theories
In the case of the propositional calculus, the method of truth tables provides an 
effective test as to whether any given statement form is a tautology. However, 
there does not seem to be any effective process for determining whether a 
given wf is logically valid, since, in general, one has to check the truth of a 
wf for interpretations with arbitrarily large finite or infinite domains. In fact, 
we shall see later that, according to a plausible definition of “effective,” it may 
actually be proved that there is no effective way to test for logical validity. The 
axiomatic method, which was a luxury in the study of the propositional cal-
culus, thus appears to be a necessity in the study of wfs involving quantifiers,* 
and we therefore turn now to the consideration of first-order theories.
Let L be a first-order language. A first-order theory in the language L will 
be a formal theory K whose symbols and wfs are the symbols and wfs of L 
and whose axioms and rules of inference are specified in the following way.†
The axioms of K are divided into two classes: the logical axioms and the 
proper (or nonlogical) axioms.
2.3.1  Logical Axioms
If B, C, and D are wfs of L, then the following are logical axioms of K:
(A1) B ⇒ (C ⇒ B)
(A2) (B ⇒ (C ⇒ D)) ⇒ ((B ⇒ C) ⇒ (B ⇒ D))
(A3) (¬C ⇒ ¬B) ⇒ ((¬C ⇒ B) ⇒ C)
*	 There is still another reason for a formal axiomatic approach. Concepts and propositions 
that involve the notion of interpretation and related ideas such as truth and model are often 
called semantical to distinguish them from syntactical concepts, which refer to simple rela-
tions among symbols and expressions of precise formal languages. Since semantical notions 
are set-theoretic in character, and since set theory, because of the paradoxes, is considered 
a rather shaky foundation for the study of mathematical logic, many logicians consider a 
syntactical approach, consisting of a study of formal axiomatic theories using only rather 
weak number-theoretic methods, to be much safer. For further discussions, see the pioneer-
ing study on semantics by Tarski (1936), as well as Kleene (1952), Church (1956), and Hilbert 
and Bernays (1934).
†	 The reader might wish to review the definition of formal theory in Section 1.4. We shall use 
the terminology (proof, theorem, consequence, axiomatic, ⊢ B, etc.) and notation (Γ ⊢ B, ⊢ B) 
introduced there.

67
First-Order Logic and Model Theory
(A4) (∀xi)B(xi) ⇒ B(t) if B(xi) is a wf of L  and t is a term of L  that is free 
for xi in B(xi). Note here that t may be identical with xi so that all 
wfs (∀xi)B ⇒ B are axioms by virtue of axiom (A4).
(A5) (∀xi)(B ⇒ C) ⇒ (B ⇒ (∀xi)C) if B contains no free occurrences of xi.
2.3.2  Proper Axioms
These cannot be specified, since they vary from theory to theory. A first-
order theory in which there are no proper axioms is called a first-order predi-
cate calculus.
2.3.3  Rules of Inference
The rules of inference of any first-order theory are:
	
1.	Modus ponens: C follows from B and B ⇒ C.
	
2.	Generalization: (∀xi)B follows from B.
We shall use the abbreviations MP and Gen, respectively, to indicate applica-
tions of these rules.
Definition
Let K be a first-order theory in the language L. By a model of K we mean an 
interpretation of L for which all the axioms of K are true.
By (III) and (VI) on page 57, if the rules of modus ponens and general-
ization are applied to wfs that are true for a given interpretation, then the 
results of these applications are also true. Hence every theorem of K is true in 
every model of K.
As we shall see, the logical axioms are so designed that the logical conse-
quences (in the sense defined on pages 63–64) of the closures of the axioms of 
K are precisely the theorems of K. In particular, if K is a first-order predicate 
calculus, it turns out that the theorems of K are just those wfs of K that are 
logically valid.
Some explanation is needed for the restrictions in axiom schemas (A4) 
and (A5). In the case of (A4), if t were not free for xi in B(xi), the following 
unpleasant result would arise: let B(x1) be ¬ ∀
(
)
(
,
)
x A x x
2
1
2
1
2  and let t be x2. 
Notice that t is not free for x1 in B(x1). Consider the following pseudo-
instance of axiom (A4):
	
( )
(
)
(
)
(
,
)
(
)
(
,
)
∇
∀
¬ ∀
(
) ⇒¬ ∀
x
x A x x
x A x
x
1
2
1
2
1
2
2
1
2
2
2

68
Introduction to Mathematical Logic
Now take as interpretation any domain with at least two members and let 
A1
2 stand for the identity relation. Then the antecedent of (∇) is true and the 
consequent false. Thus, (∇) is false for this interpretation.
In the case of axiom (A5), relaxation of the restriction that xi not be free in 
B would lead to the following disaster. Let B and C both be A x
1
1
1
(
). Thus, x1 is 
free in B. Consider the following pseudo-instance of axiom (A5):
	
(
)
(
)
(
)
(
)
(
)
(
)
(
)
∇∇
∀
⇒
(
) ⇒
⇒∀
(
)
x
A x
A x
A x
x A x
1
1
1
1
1
1
1
1
1
1
1
1
1
1
The antecedent of (∇∇) is logically valid. Now take as domain the set of 
integers and let A x
1
1( ) mean that x is even. Then (
)
(
)
∀x A x
1
1
1
1  is false. So, any 
sequence s = (s1, s2, …) for which s1 is even does not satisfy the consequent of 
(∇∇).* Hence, (∇∇) is not true for this interpretation.
Examples of first-order theories
	
1.	Partial order. Let the language L have a single predicate letter A2
2 and 
no function letters and individual constants. We shall write xi < xj 
instead of A x x
i
j
2
2(
,
). The theory K has two proper axioms.
	
a.	 (∀x1)(¬ x1 < x1)	
(irreflexivity)
	
b.	 (∀x1)(∀x2)(∀x3)(x1 < x2 ∧ x2 < x3 ⇒ x1 < x3)	
(transitivity)
	
	 A model of the theory is called a partially ordered structure.
	
2.	Group theory. Let the language L have one predicate letter A1
2, one 
function letter f1
2, and one individual constant a1. To conform with 
ordinary notation, we shall write t = s instead of A t s t
s
1
2( , ), +  instead 
of f
t s
1
2( , ), and 0 instead of a1. The proper axioms of K are:
	
a.	 (∀x1)(∀x2)(∀x3)(x1 +(x2 + x3) 	
(associativity)
	
	
= (x1 + x2) + x3)
	
b.	 (∀x1)(0 + x1 = x1)	
(identity)
	
c.	 (∀x1)(∃x2)(x2 + x1 = 0)	
(inverse)
	
d.	 (∀x1)(x1 = x1)	
(reflexivity of =)
	
e.	 (∀x1)(∀x2)(x1 = x2 ⇒ x2 = x1)	
(symmetry of =)
	
f.	 (∀x1)(∀x2)(∀x3)(x1 = x2 ∧ x2 = x3 ⇒ x1 = x3)	
(transitivity of =)
	
g.	 (∀x1)(∀x2)(∀x3)(x2 = x3 ⇒ x1 + x2 	
(substitutivity of =)
	
	
= x1 + x3 ∧ x2 + x1 = x3 + x1)
A model for this theory, in which the interpretation of = is the identity rela-
tion, is called a group. A group is said to be abelian if, in addition, the wf (∀x1)
(∀x2)(x1 + x2 = x2 + x1) is true.
*	 Such a sequence would satisfy A x
1
1
1
(
), since s1 is even, but would not satisfy (
)
(
)
∀x A x
1
1
1
1 , since 
no sequence satisfies (
)
(
).
∀x A x
1
1
1
1

69
First-Order Logic and Model Theory
The theories of partial order and of groups are both axiomatic. In general, 
any theory with a finite number of proper axioms is axiomatic, since it is 
obvious that one can effectively decide whether any given wf is a logical 
axiom.
2.4  Properties of First-Order Theories
All the results in this section refer to an arbitrary first-order theory K. Instead 
of writing ⊢K B, we shall sometimes simply write ⊢ B. Moreover, we shall 
refer to first-order theories simply as theories, unless something is said to the 
contrary.
Proposition 2.1
Every wf B of K that is an instance of a tautology is a theorem of K, and it 
may be proved using only axioms (A1)–(A3) and MP.
Proof
B arises from a tautology S by substitution. By Proposition 1.14, there is a 
proof of S in L. In such a proof, make the same substitution of wfs of K for 
statement letters as were used in obtaining B from S, and, for all statement 
letters in the proof that do not occur in S, substitute an arbitrary wf of K. 
Then the resulting sequence of wfs is a proof of B, and this proof uses only 
axiom schemes (A1)–(A3) and MP.
The application of Proposition 2.1 in a proof will be indicated by writing 
“Tautology.”
Proposition 2.2
Every theorem of a first-order predicate calculus is logically valid.
Proof
Axioms (A1)–(A3) are logically valid by property (VII) of the notion of truth 
(see page 58), and axioms (A4) and (A5) are logically valid by properties (X) 
and (XI). By properties (III) and (VI), the rules of inference MP and Gen pre-
serve logical validity. Hence, every theorem of a predicate calculus is logi-
cally valid.

70
Introduction to Mathematical Logic
Example
The wf (
)(
)
(
,
)
(
)(
)
(
,
)
∀
∃
⇒∃
∀
x
x A x x
x
x A x x
2
1
1
2
1
2
1
2
1
2
1
2  is not a theorem of any first-
order predicate calculus, since it is not logically valid (by Example 5, page 63).
Definition
A theory K is consistent if no wf B and its negation ¬B are both provable in K. 
A theory is inconsistent if it is not consistent.
Corollary 2.3
Any first-order predicate calculus is consistent.
Proof
If a wf B and its negation ¬B were both theorems of a first-order predicate 
calculus, then, by Proposition 2.2, both B and ¬B would be logically valid, 
which is impossible.
Notice that, in an inconsistent theory K, every wf C of K is provable in K. In 
fact, assume that B and ¬B are both provable in K. Since the wf B ⇒ (¬B  ⇒ C) 
is an instance of a tautology, that wf is, by Proposition 2.1, provable in K. 
Then two applications of MP would yield ⊢C.
It follows from this remark that, if some wf of a theory K is not a theorem 
of K, then K is consistent.
The deduction theorem (Proposition 1.9) for the propositional calculus can-
not be carried over without modification to first-order theories. For example, 
for any wf B, B ⊢K(∀xi)B, but it is not always the case that ⊢K B ⇒ (∀xi)B. 
Consider a domain containing at least two elements c and d. Let K be a predi-
cate calculus and let B be A x
1
1
1
(
). Interpret A1
1 as a property that holds only 
for c. Then A x
1
1
1
(
) is satisfied by any sequence s = (s1, s2, …) in which s1 = c, 
but (
)
(
)
∀x A x
1
1
1
1  is satisfied by no sequence at all. Hence, A x
x A x
1
1
1
1
1
1
1
(
)
(
)
(
)
⇒∀
 
is not true in this interpretation, and so it is not logically valid. Therefore, by 
Proposition 2.2, A x
x A x
1
1
1
1
1
1
1
(
)
(
)
(
)
⇒∀
 is not a theorem of K.
A modified, but still useful, form of the deduction theorem may be derived, 
however. Let B be a wf in a set Γ of wfs and assume that we are given a 
deduction D1, …, Dn from Γ , together with justification for each step in the 
deduction. We shall say that Di depends upon B in this proof if and only if:
	
1.	Di is B and the justification for Di is that it belongs to Γ, or
	
2.	Di is justified as a direct consequence by MP or Gen of some preced-
ing wfs of the sequence, where at least one of these preceding wfs 
depends upon B.

71
First-Order Logic and Model Theory
Example
B, (∀x1)B ⇒ C ⊢ (∀x1)C
(D1)
B
Hyp
(D2)
(∀x1) B
(D1), Gen
(D3)
(∀x1) B ⇒ C
Hyp
(D4)
C
(D2), (D3), MP
(D5)
(∀x1)C
(D4), Gen
Here, (D1) depends upon B, (D2) depends upon B, (D3) depends upon (∀x1)
B ⇒ C, (D4) depends upon B and (∀x1)B ⇒ C, and (D5) depends upon B and 
(∀x1)B ⇒ C.
Proposition 2.4
If C does not depend upon B in a deduction showing that Γ, B ⊢ C, then Γ ⊢ C.
Proof
Let D1 …, Dn be a deduction of C  from Γ and B, in which C  does not depend 
upon B. (In this deduction, Dn is C.) As an inductive hypothesis, let us 
assume that the proposition is true for all deductions of length less than n. If 
C  belongs to Γ or is an axiom, then Γ ⊢ C. If C  is a direct consequence of one 
or two preceding wfs by Gen or MP, then, since C  does not depend upon B, 
neither do these preceding wfs. By the inductive hypothesis, these preceding 
wfs are deducible from Γ alone. Consequently, so is C.
Proposition 2.5 (Deduction Theorem)
Assume that, in some deduction showing that Γ, B ⊢ C, no application of Gen 
to a wf that depends upon B has as its quantified variable a free variable 
of B. Then Γ ⊢ B ⇒ C.
Proof
Let D1, …, Dn be a deduction of C from Γ and B, satisfying the assumption of 
our proposition. (In this deduction, Dn is C.) Let us show by induction that Γ 
⊢ B ⇒ Di for each i ≤ n. If Di is an axiom or belongs to Γ, then Γ ⊢ B ⇒ Di, since 
Di ⇒ (B ⇒ Di) is an axiom. If Di is B, then Γ ⊢ B ⇒ Di, since, by Proposition 
2.1, ⊢ B ⇒ B. If there exist j and k less than i such that Dk is Dj ⇒ Di, then, by 
inductive hypothesis, Γ ⊢ B ⇒ Dj and Γ ⊢ B ⇒ (Dj ⇒ Di). Now, by axiom (A2), 
⊢ (B ⇒ (Dj ⇒ Di)) ⇒ ((B ⇒ Dj) ⇒ (B ⇒ Di)). Hence, by MP twice, Γ ⊢ B ⇒ Di. 
Finally, suppose that there is some j < i such that Di is (∀xk)Dj. By the inductive 

72
Introduction to Mathematical Logic
hypothesis, Γ ⊢ B ⇒ Dj, and, by the hypothesis of the theorem, either Dj does 
not depend upon B or xk is not a free variable of B. If Dj does not depend 
upon B, then, by Proposition 2.4, Γ ⊢ Dj and, consequently, by Gen, Γ ⊢ (∀xk)
Dj. Thus, Γ ⊢ Di. Now, by axiom (A1), ⊢ Di ⇒ (B ⇒ Di). So, Γ ⊢ B ⇒ Di by MP. If, 
on the other hand, xk is not a free variable of B, then, by axiom (A5), ⊢ (∀xk)
(B  ⇒ Dj) ⇒ (B ⇒ (∀xk)Dj). Since Γ ⊢ B ⇒ Dj, we have, by Gen, Γ ⊢ (∀xk)(B ⇒ Dj), 
and so, by MP, Γ ⊢ B ⇒ (∀xk)Dj; that is, Γ ⊢ B ⇒ Di. This completes the induc-
tion, and our proposition is just the special case i = n.
The hypothesis of Proposition 2.5 is rather cumbersome; the following 
weaker corollaries often prove to be more useful.
Corollary 2.6
If a deduction showing that Γ, B ⊢ C involves no application of Gen of which 
the quantified variables is free in B, then Γ ⊢ B ⇒ C.
Corollary 2.7
If B is a closed wf and Γ, B ⊢ C, then Γ ⊢ B ⇒ C.
Extension of Propositions 2.4–2.7
In Propositions 2.4–2.7, the following additional conclusion can be drawn from 
the proofs. The new proof of Γ ⊢ B ⇒ C (in Proposition 2.4, of Γ ⊢ C) involves 
an application of Gen to a wf depending upon a wf E of Γ only if there is an 
application of Gen in the given proof of Γ, B ⊢ C that involves the same quan-
tified variable and is applied to a wf that depends upon E. (In the proof of 
Proposition 2.5, one should observe that Dj depends upon a premiss E of Γ in 
the original proof if and only if B ⇒ Dj depends upon E in the new proof.)
This supplementary conclusion will be useful when we wish to apply the 
deduction theorem several times in a row to a given deduction—for example, 
to obtain Γ ⊢ D ⇒ (B ⇒ C) from Γ, D, B ⊢ C; from now on, it is to be considered 
an integral part of the statements of Propositions 2.4–2.7.
Example
	
⊢(
)(
)
(
)(
)
∀
∀
⇒∀
∀
x
x
x
x
1
2
2
1
B
B
Proof
	
1.	(∀x1)(∀x2)B	
Hyp
	
2.	(∀x1)(∀x2)B ⇒(∀x2)B	
(A4)

73
First-Order Logic and Model Theory
	
3.	(∀x2)B	
1, 2, MP
	
4.	(∀x2)B ⇒ B	
(A4)
	
5.	B	
3, 4, MP
	
6.	(∀x1)B	
5, Gen
	
7.	(∀x2)(∀x1)B	
6, Gen
Thus, by 1–7, we have (∀x1)(∀x2)B ⊢ (∀x2)(∀x1)B, where, in the deduction, no 
application of Gen has as a quantified variable a free variable of (∀x1)(∀x2)B. 
Hence, by Corollary 2.6, ⊢ (∀x1)(∀x2)B ⇒ (∀x2)(∀x1)B.
Exercises
2.27	
Derive the following theorems.
	
a.	 ⊢ (∀x)(B ⇒ C) ⇒ ((∀x)B ⇒ (∀x)C)
	
b.	 ⊢ (∀x)(B ⇒ C) ⇒ ((∃x)B ⇒ (∃x)C)
	
c.	 ⊢ (∀x)(B ∧ C) ⇔ (∀x)B) ∧ (∀x)C
	
d.	 ⊢ (∀y1) … (∀yn)B ⇒ B
	
e.	 ⊢ ¬(∀x)B ⇒ (∃x) ¬B
2.28D	 Let K be a first-order theory and let K# be an axiomatic theory having 
the following axioms:
	
a.	 (∀y1) … (∀yn)B, where B is any axiom of K and y1, …, yn(n ≥ 0) are 
any variables (none at all when n = 0);
	
b.	 (∀y1) … (∀yn)(B ⇒ C) ⇒ [(∀y1) … (∀yn)B ⇒ (∀y1) … (∀yn)C ] where B 
and C are any wfs and y1 …, yn are any variables.
	
Moreover, K# has modus ponens as its only rule of inference. Show 
that K# has the same theorems as K. Thus, at the expense of adding 
more axioms, the generalization rule can be dispensed with.
2.29	
Carry out the proof of the Extension of Propositions 2.4–2.7 above.
2.5  Additional Metatheorems and Derived Rules
For the sake of smoothness in working with particular theories later, we 
shall introduce various techniques for constructing proofs. In this section it 
is assumed that we are dealing with an arbitrary theory K.
Often one wants to obtain B(t) from (∀x)B(x), where t is a term free for x in 
B(x). This is allowed by the following derived rule.

74
Introduction to Mathematical Logic
2.5.1  Particularization Rule A4
If t is free for x in B(x), then (∀x)B(x) ⊢ B(t).*
Proof
From (∀x)B(x) and the instance (∀x)B(x) ⇒ B(t) of axiom (A4), we obtain B(t) 
by modus ponens.
Since x is free for x in B(x), a special case of rule A4 is: (∀x)B ⊢ B.
There is another very useful derived rule, which is essentially the contra-
positive of rule A4.
2.5.2  Existential Rule E4
Let t be a term that is free for x in a wf B(x, t), and let B(t, t) arise from B(x, t) by 
replacing all free occurrences of x by t. (B(x, t) may or may not contain occur-
rences of t.) Then, B(t, t) ⊢ (∃x)B(x, t)
Proof
It suffices to show that ⊢B(t, t) ⇒ (∃x)B(x, t). But, by axiom (A4), ⊢(∀x)¬B(x, t) 
⇒ ¬B(t, t). Hence, by the tautology (A ⇒ ¬B) ⇒ (B ⇒ ¬A) and MP, ⊢B(t, t) ⇒ 
¬(∀x)¬B(x, t), which, in abbreviated form, is ⊢ B(t, t) ⇒ (∃x)B(x, t).
A special case of rule E4 is B(t) ⊢ (∃x)B(x), whenever t is free for x in B(x). 
In particular, when t is x itself, B(x) ⊢ (∃x)B(x).
Example
⊢ (∀x)B ⇒ (∃x)B
	
1.	(∀x)B	
Hyp
	
2.	B	
1, rule A4
	
3.	(∃x)B	
2, rule E4
	
4.	(∀x)B ⊢ (∃x)B	
1–3
	
5.	⊢ (∀x)B ⇒ (∃x)B	
1–4, Corollary 2.6
The following derived rules are extremely useful.
Negation elimination:
¬¬B ⊢ B
Negation introduction:
B ⊢ ¬¬B
Conjunction elimination:
B ∧ C ⊢ B
B ∧ C ⊢ C
¬(B ∧ C) ⊢ ¬B ∨ ¬C
*	 From a strict point of view, (∀x)B(x) ⊢ B(t) states a fact about derivability. Rule A4 should be 
taken to mean that, if (∀x)B(x) occurs as a step in a proof, we may write B(t) as a later step 
(if t is free for x in B(x)). As in this case, we shall often state a derived rule in the form of the 
corresponding derivability result that justifies the rule.

75
First-Order Logic and Model Theory
Conjunction introduction:
B, C ⊢ B ∧ C
Disjunction elimination:
B ∨ C, ¬B ⊢ C
B ∨ C, ¬C ⊢ B
¬(B ∨ C) ⊢ ¬B ∧ ¬C
B ⇒ D, C ⇒ D, B ∨ C ⊢ D
Disjunction introduction:
B ⊢ B ∨ C
C ⊢ B ∨ C
Conditional elimination:
B ⇒ C, ¬C ⊢ ¬B
B ⇒ ¬C, C ⊢ ¬B
¬B ⇒ C, ¬C ⊢ B
¬B ⇒ ¬C, C ⊢ B
¬(B ⇒ C) ⊢ B
¬(B ⇒ C) ⊢ ¬C
Conditional introduction:
B, ¬C ⊢ ¬(B ⇒ C)
Conditional contrapositive:
B ⇒ C ⊢ ¬C ⇒ ¬B
¬C ⇒ ¬B ⊢ B ⇒ C
Biconditional elimination:
B ⇔ C, B ⊢ C B ⇔ C, ¬B ⊢ ¬C
B ⇔ C, C ⊢ B B ⇔ C, ¬C ⊢ ¬B
B ⇔ C ⊢ B ⇒ C B ⇔ C ⊢ C ⇒ B
Biconditional introduction:
B ⇒ C, C ⇒ B ⊢ B ⇔ C
Biconditional negation:
B ⇔ C ⊢ ¬B ⇔ ¬C
¬B ⇔ ¬C ⊢ B ⇔ C
Proof by contradiction: If a proof of Γ, ¬B ⊢ C ∧ ¬C involves no application 
of Gen using a variable free in B, then Γ ⊢B. (Similarly, one obtains Γ ⊢ ¬B 
from Γ, B ⊢C ∧ ¬C.)
Exercises
2.30	 Justify the derived rules listed above.
2.31	 Prove the following.
	
a.	 ⊢(
)(
)
( , )
(
)
( , )
∀
∀
⇒∀
x
y A x y
x A x x
1
2
1
2
	
b.	 ⊢ [(∀x)B] ∨ [(∀x)C] ⇒ (∀x)(B ∨ C)
	
c.	 ⊢ ¬(∃x)B ⇒ (∀x) ¬B
	
d.	 ⊢ (∀x)B ⇒ (∀x)(B ∨ C)
	
e.	 ⊢(
)(
)(
( , )
( , ))
(
)
( , )
∀
∀
⇒
⇒∀
x
y A x y
A y x
x
A x x
1
2
1
2
1
2
¬
¬
	
f.	 ⊢ [(∃x)B ⇒ (∀x)C] ⇒ (∀x)(B ⇒ C)
	
g.	 ⊢ (∀x)(B ∨ C) ⇒ [(∀x)B] ∨ (∃x)C
	
h.	 ⊢(
)(
( , )
(
)
( , ))
∀
⇒∃
x A x x
y A x y
1
2
1
2

76
Introduction to Mathematical Logic
	
i.	 ⊢ (∀x)(B ⇒ C) ⇒ [(∀x) ¬C ⇒ (∀x) ¬B]
	
j.	 ⊢(
)[
( )
(
)
( )]
∃
⇒∀
y A y
y A y
1
1
1
1
	
k.	 ⊢ [(∀x)(∀y)(B(x, y) ⇒ B(y, x)) ∧ (∀x)(∀y)(∀z)(B(x, y) ∧
	
B(y, z) ⇒ B(x, z))] ⇒ (∀x)(∀y)(B(x, y) ⇒ B(x, x))
	
l.	 ⊢(
)
( , )
(
)(
)
( , )
∃
⇒∃
∃
x A x x
x
y A x y
1
2
1
2
2.32	 Assume that B and C are wfs and that x is not free in B. Prove the 
following.
	
a.	 ⊢ B ⇒ (∀x)B
	
b.	 ⊢ (∃x)B ⇒ B
	
c.	 ⊢ (B ⇒ (∀x)C) ⇔ (∀x)(B ⇒ C)
	
d.	 ⊢ ((∃x)C ⇒ B) ⇔ (∀x)(C ⇒ B)
	
	   We need a derived rule that will allow us to replace a part C of a wf B 
by a wf that is provably equivalent to C. For this purpose, we first must 
prove the following auxiliary result.
Lemma 2.8
For any wfs B and C, ⊢ (∀x)(B ⇔ C) ⇒ ((∀x)B ⇔ (∀x)C).
Proof
	
1.	(∀x)(B ⇔ C)	
Hyp
	
2.	(∀x)B	
Hyp
	
3.	B ⇔ C	
1, rule A4
	
4.	B	
2, rule A4
	
5.	C	
3, 4, biconditional elimination
	
6.	(∀x)C	
5, Gen
	
7.	(∀x)(B ⇔ C), (∀x)B ⊢ (∀x)C	
1–6
	
8.	(∀x)(B ⇔ C) ⊢ (∀x)B ⇒ (∀x)C	
1–7, Corollary 2.6
	
9.	(∀x)(B ⇔ C) ⊢ (∀x)C ⇒ (∀x)B	
Proof like that of 8
	 10.	(∀x)(B ⇔ C) ⊢ (∀x)B ⇔ (∀x)C	
8, 9, Biconditional introduction
	 11.	⊢ (∀x)(B ⇔ C) ⇒ ((∀x)B ⇔ (∀x)C)	
1–10, Corollary 2.6
Proposition 2.9
If C is a subformula of B, B ′ is the result of replacing zero or more occur-
rences of C in B by a wf D, and every free variable of C or D that is also a 
bound variable of B occurs in the list y1, …, yk, then:
	
a.	⊢ [(∀y1) … (∀yk)(C ⇔ D)] ⇒ (B ⇔ B ′) (Equivalence theorem)
	
b.	If ⊢ C ⇔ D, then ⊢ B ⇔ B ′ (Replacement theorem)
	
c.	If ⊢ C ⇔ D and ⊢ B, then ⊢ B ′

77
First-Order Logic and Model Theory
Example
	
a.	⊢(
)(
( )
( ))
[(
)
( )
(
)
( )]
∀
⇔
⇒
∃
⇔∃
x A x
A x
x A x
x A x
1
1
2
1
1
1
2
1
Proof
	
a.	We use induction on the number of connectives and quantifiers in B. 
Note that, if zero occurrences are replaced, B ′ is B and the wf to be 
proved is an instance of the tautology A ⇒ (B ⇔ B). Note also that, if C 
is identical with B and this occurrence of C  is replaced by D, the wf to 
be proved, [(∀y1) … (∀yk)(C ⇔ D)] ⇒ (B ⇔ B ′), is derivable by Exercise 
2.27(d). Thus, we may assume that C is a proper part of B and that at 
least one occurrence of C is replaced. Our inductive hypothesis is that the 
result holds for all wfs with fewer connectives and quantifiers than B.
	
	 Case 1. B is an atomic wf. Then C cannot be a proper part of B.
	
	 Case 2. B is ¬E. Let B ′ be ¬E ′. By inductive hypothesis, ⊢ [(∀y1) … (∀yk) 
(C ⇔ D)] ⇒ (E ⇔ E ′). Hence, by a suitable instance of the tautology (C ⇒ 
(A ⇔ B)) ⇒ (C ⇒ (¬A ⇔ ¬B)) and MP, we obtain ⊢ [(∀y1) … (∀yk)(C ⇔ D)] 
⇒ (B ⇔ B ′).
	
	 Case 3. B is E ⇒ F. Let B ′ be E ′ ⇒ F ′. By inductive hypothesis, ⊢ [(∀y1) … 
(∀yk)(C ⇔ D)] ⇒ (E ⇔ E ′) and ⊢ [(∀y1) … (∀yk)(C ⇔ D)] ⇒ (F ⇔ F ′). Using a 
suitable instance of the tautology
	
(
(
))
(
(
))
(
[(
)
(
)])
A
B
C
A
D
E
A
B
D
C
E
⇒
⇔
∧
⇒
⇔
⇒
⇒
⇒
⇔
⇒
	
	 we obtain ⊢ [(∀y1) … (∀yk)(C ⇔ D)] ⇒ (B ⇔ B ′).
	
	 Case 4. B is (∀x)E. Let B ′ be (∀x)E ′. By inductive hypothesis, ⊢ [(∀y1) … 
(∀yk) (C ⇔ D)] ⇒ (E ⇔ E ′). Now, x does not occur free in (∀y1) … (∀yk)
(C ⇔ D) because, if it did, it would be free in C or D and, since it is 
bound in B, it would be one of y1, …, yk and it would not be free in 
(∀y1) … (∀yk)(C ⇔ D). Hence, using axiom (A5), we obtain ⊢ (∀y1) … 
(∀yk)(C ⇔ D) ⇒ (∀x)(E ⇔ E ′). However, by Lemma 2.8, ⊢ (∀x)(E ⇔ E) ⇒ 
((∀x)E ⇔ (∀x)E ′). Then, by a suitable tautology and MP, ⊢ [(∀y1) … (∀yk)
(C ⇔ D)] ⇒ (B ⇔ B ′).
	
b.	From ⊢ C ⇔ D, by several applications of Gen, we obtain ⊢ (∀y1) … (∀yk)
(C ⇔ D). Then, by (a) and MP, ⊢ B ⇔ B ′.
	
c.	Use part (b) and biconditional elimination.
Exercises
2.33	 Prove the following:
	
a.	 ⊢ (∃x) ¬B ⇔ ¬(∀x)B
	
b.	 ⊢ (∀x)B ⇔ ¬(∃x) ¬B
	
c.	 ⊢ (∃x)(B ⇒ ¬(C ∨ D)) ⇒ (∃x)(B ⇒ ¬C ∧ ¬D)

78
Introduction to Mathematical Logic
	
d.	 ⊢ (∀x)(∃y)(B ⇒ C) ⇔ (∀x)(∃y)(¬B ∨ C)
	
e.	 ⊢ (∀x)(B ⇒ ¬C) ⇔ ¬(∃x)(B ∧ C)
2.34	 Show by a counterexample that we cannot omit the quantifiers (∀y1) … 
(∀yk) in Proposition 2.9(a).
2.35	 If C is obtained from B by erasing all quantifiers (∀x) or (∃x) whose 
scope does not contain x free, prove that ⊢ B ⇔ C.
2.36	 For each wf B below, find a wf C such that ⊢ C ⇔ ¬B and negation signs 
in C apply only to atomic wfs.
	
a.	 (
)(
)(
)
( , , )
∀
∀
∃
x
y
z A x y z
1
3
	
b.	 (∀ε)(ε > 0 ⇒ (∃δ)(δ > 0 ∧ (∀x)(|x − c| < δ ⇒ |f(x) − f(c) | < ε))
	
c.	 (∀ε)(ε > 0 ⇒ (∃n)(∀m)(m > n ⇒ |am − b| < ε))
2.37	 Let B be a wf that does not contain ⇒ and ⇔. Exchange universal and 
existential quantifiers and exchange ∧ and ∨. The result B* is called the 
dual of B.
	
a.	 In any predicate calculus, prove the following.
	
i.	 ⊢ B if and only if ⊢ ¬B*
	
ii. ⊢ B ⇒ C if and only if ⊢ C * ⇒ B*
	
iii. ⊢ B ⇔ C if and only if ⊢ B * ⇔ C *
	
iv.	  ⊢ (∃x)(B ∨ C) ⇔ [((∃x)B) ∨ (∃x)C]. [Hint: Use Exercise 2.27(c).]
	
b.	 Show that the duality results of part (a), (i)–(iii), do not hold for arbi-
trary theories.
2.6  Rule C
It is very common in mathematics to reason in the following way. Assume 
that we have proved a wf of the form (∃x)B(x). Then we say, let b be an object 
such that B(b). We continue the proof, finally arriving at a formula that does 
not involve the arbitrarily chosen element b.
For example, let us say that we wish to show that (∃x)(B (x) ⇒ C (x)), 
(∀x)B (x) ⊢ (∃x)C (x).
	
1.	(∃x)(B (x) ⇒ C (x))	
Hyp
	
2.	(∀x)B (x)	
Hyp
	
3.	B (b) ⇒ C (b) for some b	
1
	
4.	B (b)	
2, rule A4
	
5.	C (b)	
3, 4, MP
	
6.	(∃x)C (x)	
5, rule E4

79
First-Order Logic and Model Theory
Such a proof seems to be perfectly legitimate on an intuitive basis. In fact, 
we can achieve the same result without making an arbitrary choice of an ele-
ment b as in step 3. This can be done as follows:
	
1.	(∀x)B (x)	
Hyp
	
2.	(∀x) ¬C (x)	
Hyp
	
3.	B (x)	
1, rule A4
	
4.	¬C (x)	
2, rule A4
	
5.	¬(B (x) ⇒ C (x))	
3, 4, conditional introduction
	
6.	(∀x) ¬(B (x) ⇒ C (x))	
5, Gen
	
7.	(∀x)B (x), (∀x) ¬C (x) 	
1–6
	
	 ⊢ (∀x) ¬(B (x) ⇒ C (x))
	
8.	(∀x)B (x) ⊢ (∀x) ¬C (x) ⇒	
1–7, corollary 2.6
	
	  (∀x) ¬(B (x) ⇒ C (x))
	
9.	(∀x)B (x) ⊢ ¬(∀x) ¬(B (x) ⇒	
8, contrapositive
	
	 C (x)) ⇒ ¬(∀x) ¬C (x)
	 10.	(∀x)B (x) ⊢ (∃x)(B (x) ⇒	
Abbreviation of 9
	
	 C (x)) ⇒ (∃x)C (x)
	 11.	(∃x)(B (x) ⇒ C (x)),	
10, MP
	
	 (∀x)B (x) ⊢ (∃x)C (x)
In general, any wf that can be proved using a finite number of arbitrary 
choices can also be proved without such acts of choice. We shall call the rule 
that permits us to go from (∃x)B (x) to B (b), rule C (“C” for “choice”). More 
precisely, a rule C deduction in a first-order theory K is defined in the follow-
ing manner: Γ ⊢C B if and only if there is a sequence of wfs D1, …, Dn such that 
Dn is B and the following four conditions hold:
	
1.	For each i < n, either
	
a.	 Di is an axiom of K, or
	
b.	 Di is in Γ, or
	
c.	 Di follows by MP or Gen from preceding wfs in the sequence, or
	
d.	 there is a preceding wf (∃x)C (x) such that Di is C (d), where d is a 
new individual constant (rule C).
	
2.	As axioms in condition 1(a), we also can use all logical axioms that 
involve the new individual constants already introduced in the 
sequence by applications of rule C.

80
Introduction to Mathematical Logic
	
3.	No application of Gen is made using a variable that is free in some 
(∃x)C (x) to which rule C has been previously applied.
	
4.	B contains none of the new individual constants introduced in the 
sequence in any application of rule C.
A word should be said about the reason for including condition 3. If an appli-
cation of rule C to a wf (∃x)C (x) yields C (d), then the object referred to by d 
may depend on the values of the free variables in (∃x)C (x). So that one object 
may not satisfy C (x) for all values of the free variables in (∃x)C (x). For exam-
ple, without clause 3, we could proceed as follows:
	
1.	(
)(
)
( , )
∀
∃
x
y A x y
1
2
	
Hyp
	
2.	(
)
( , )
∃y A x y
1
2
	
1, rule A4
	
3.	A x d
1
2( , ) 	
2, rule C
	
4.	(
)
( , )
∀x A x d
1
2
	
3, Gen
	
5.	(
)(
)
( , )
∃
∀
y
x A x y
1
2
	
4, rule E4
However, there is an interpretation for which (
)(
)
( , )
∀
∃
x
y A x y
1
2
 is true but 
(
)(
)
( , )
∃
∀
y
x A x y
1
2
 is false. Take the domain to be the set of integers and let 
A x y
1
2( , ) mean that x < y.
Proposition 2.10
If Γ ⊢C B, then Γ ⊢ B. Moreover, from the following proof it is easy to verify 
that, if there is an application of Gen in the new proof of B from Γ using a 
certain variable and applied to a wf depending upon a certain wf of Γ, then 
there was such an application of Gen in the original proof.*
Proof
Let (∃y1)C1(y1), …, (∃yk)Ck(yk) be the wfs in order of occurrence to which rule C 
is applied in the proof of Γ ⊢C B, and let d1, …, dk be the corresponding new 
­individual constants. Then Γ, C1(d1), …, Ck(dk) ⊢ B. Now, by condition 3 of the 
definition above, Corollary 2.6 is applicable, yielding Γ, C1(d1), …, Ck−1(dk−1) ⊢ 
Ck(dk) ⇒ B. We replace dk everywhere by a variable z that does not occur in 
the proof.
Then
	
Γ,
(
),
,
(
)
( )
C
C
C
B
1
1
1
1
d
d
z
k
k
k
…
⇒
−
−
⊢
*	 The first formulation of a version of rule C similar to that given here seems to be due to Rosser 
(1953).

81
First-Order Logic and Model Theory
and, by Gen,
	
Γ,
(
),
,
(
)
(
)(
( )
)
C
C
C
B
1
1
1
1
d
d
z
z
k
k
k
…
∀
⇒
−
−
⊢
Hence, by Exercise 2.32(d),
	
Γ,
(
),
,
(
)
(
) (
)
C
C
C
B
1
1
1
1
d
d
y
y
k
k
k
k
k
…
∃
⇒
−
−
⊢
But,
	
Γ,
(
),
,
(
)
(
) (
)
C
C
C
1
1
1
1
d
d
y
y
k
k
k
k
k
…
∃
−
−
⊢
Hence, by MP,
	
Γ,
(
),
,
(
)
C
C
B
1
1
1
1
d
d
k
k
…
−
−
⊢
Repeating this argument, we can eliminate Ck−1(dk−1), …, C1(d1) one after the 
other, finally obtaining Γ ⊢ B.
Example
	
⊢(
)(
( )
( ))
((
)
( )
(
) ( ))
∀
⇒
⇒
∃
⇒∃
x
x
x
x
x
x
x
B
C
B
C
	
1.	(∀x)((B x) ⇒ C (x))	
Hyp
	
2.	(∃x)B (x)	
Hyp
	
3.	B (d)	
2, rule C
	
4.	B (d) ⇒ C (d)	
1, rule A4
	
5.	C (d)	
3, 4, MP
	
6.	(∃x)C (x)	
5, rule E4
	
7.	(∀x)(B (x) ⇒ C (x)), (∃x)B (x) ⊢C (∃x)C (x)	
1–6
	
8.	(∀x)(B (x) ⇒ C (x)), (∃x)B (x) ⊢ (∃x)C (x)	
7, Proposition 2.10
	
9.	(∀x)(B (x) ⇒ C (x)) ⊢ (∃x)B (x) ⇒ (∃x)C (x)	
1–8, corollary 2.6
	 10.	⊢ (∀x)(B (x) ⇒ C (x)) ⇒ ((∃x)B (x) ⇒ (∃x)C (x))	 1–9, corollary 2.6
Exercises
Use rule C and Proposition 2.10 to prove Exercises 2.38–2.45.
2.38	 ⊢ (∃x)(B (x) ⇒ C (x)) ⇒ ((∀x)B (x) ⇒ (∃x)C (x))

82
Introduction to Mathematical Logic
2.39	 ⊢¬
¬
(
)(
)(
( , )
( , ))
∃
∀
⇔
y
x A x y
A x x
1
2
1
2
2.40	 ⊢[(
)(
( )
( )
( ))
(
)(
( )
( ))]
(
)(
∀
⇒
∨
∧
∀
⇒
⇒∃
x A x
A x
A x
x A x
A x
x A
1
1
2
1
3
1
1
1
2
1
1
¬
1( )
x ∧ 
A x
3
1( ))
2.41	 ⊢ [(∃x)B (x)] ∧ [(∀x)C (x)] ⇒ (∃x)(B (x) ∧ C (x))
2.42	 ⊢ (∃x)C (x) ⇒ (∃x)(B (x) ∨ C (x))
2.43	 ⊢ (∃x)(∃y)B (x, y) ⇔ (∃y)(∃x)B (x, y)
2.44	 ⊢ (∃x)(∀y)B (x, y) ⇒ (∀y)(∃x)B (x, y)
2.45	 ⊢ (∃x)(B (x) ∧ C (x)) ⇒ ((∃x)B (x)) ∧ (∃x)C (x)
2.46	 What is wrong with the following alleged derivations?
	
a.	 1.	 (∃x)B (x)	
Hyp
	
2.	 B (d)	
1, rule C
	
3.	 (∃x)C (x)	
Hyp
	
4.	 C (d)	
3, rule C
	
5.	 B (d) ∧ C (d)	
2, 4, conjunction introduction
	
6.	 (∃x)(B (x) ∧ C (x))	
5, rule E4
	
7.	 (∃x)B (x), (∃x)C (x) 	
1–6, Proposition 2.10
	
	 ⊢ (∃x)(B (x) ∧ C (x))
	
b.	 1.	 (∃x)(B (x) ⇒ C (x))	
Hyp
	
2.	 (∃x)B (x)	
Hyp
	
3.	 B (d) ⇒ C (d)	
1, rule C
	
4.	 B (d)	
2, rule C
	
5.	 C (d)	
3, 4, MP
	
6.	 (∃x)C (x)	
5, rule E4
	
7.	 (∃x)(B (x) ⇒ C (x)),	
1–6, Proposition 2.10
	
	 (∃x)B (x) ⊢ (∃x)C (x)
2.7  Completeness Theorems
We intend to show that the theorems of a first-order predicate calculus K are 
precisely the same as the logically valid wfs of K. Half of this result was proved 
in Proposition 2.2. The other half will follow from a much more general prop-
osition established later. First we must prove a few preliminary lemmas.
If xi and xj are distinct, then B(xi) and B(xj) are said to be similar if and only 
if xj is free for xi in B(xi) and B(xi) has no free occurrences of xj. It is assumed 
here that B(xj) arises from B(xi) by substituting xj for all free occurrences 
of xi. It is easy to see that, if B(xi) and B(xj) are similar, then xi is free for xj in 

83
First-Order Logic and Model Theory
B(xj) and B(xj) has no free occurrences of xi. Thus, if B(xi) and B(xj) are simi-
lar, then B(xj) and B(xi) are similar. Intuitively, B(xi) and B(xj) are similar if 
and only if B(xi) and B(xj) are the same except that B(xi) has free occurrences 
of xi in exactly those places where B(xj) has free occurrences of xj.
Example
	
(
)
(
,
)
(
(
[
(
,
)
(
)
)
∀
∨


∀
∨


x
A x x
A x
x
A x
x
A x
3
1
2
1
3
1
1
1
3
1
2
2
3
1
1
2
and
are similar.
Lemma 2.11
If B (xi) and B (xj) are similar, then ⊢ (∀xi)B (xi) ⇔ (∀xj)B (xj).
Proof
⊢ (∀xi)B (xi) ⇒ B (xj) by axiom (A4). Then, by Gen, ⊢ (∀xj)((∀xi)B (xi) ⇒ B (xj)), 
and so, by axiom (A5) and MP, ⊢ (∀xi)B (xi) ⇒ (∀xj)B(xj). Similarly, ⊢ (∀xj) B (xj) 
⇒ (∀xi)B (xi). Hence, by biconditional introduction, ⊢ (∀xi)B (xi) ⇔ (∀xj)B (xj).
Exercises
2.47	 If B (xi) and B (xj) are similar, prove that ⊢ (∃xi)B (xi) ⇔ (∃xj)B (xj).
2.48	 Change of bound variables. If B (x) is similar to B (y), (∀x)B (x) is a subfor-
mula of C, and C ′ is the result of replacing one or more occurrences of 
(∀x)B (x) in C by (∀y)B (y), prove that ⊢ C ⇔ C ′.
Lemma 2.12
If a closed wf ¬B of a theory K is not provable in K, and if K′ is the theory 
obtained from K by adding B as a new axiom, then K′ is consistent.
Proof
Assume K′ inconsistent. Then, for some wf C, ⊢K′ C and ⊢K′ ¬C. Now, ⊢K′ C ⇒ 
(¬C ⇒ ¬B) by Proposition 2.1. So, by two applications of MP, ⊢K′ ¬B. Now, 
any use of B as an axiom in a proof in K′ can be regarded as a hypothesis 
in a proof in K. Hence, B ⊢K ¬B. Since B is closed, we have ⊢K B ⇒ ¬B by 
Corollary 2.7. However, by Proposition 2.1, ⊢K(B ⇒ ¬B) ⇒ ¬B. Therefore, by 
MP, ⊢K ¬B, contradicting our hypothesis.
Corollary
If a closed wf B of a theory K is not provable in K, and if K′ is the theory 
obtained from K by adding ¬B as a new axiom, then K′ is consistent.

84
Introduction to Mathematical Logic
Lemma 2.13
The set of expressions of a language L is denumerable. Hence, the same is 
true of the set of terms, the set of wfs and the set of closed wfs.
Proof
First assign a distinct positive integer g(u) to each symbol u as follows: 
g(() = 3, g()) = 5, g(,) = 7, g(¬) = 9, g(⇒) = 11, g(∀) = 13, g(xk) = 13 + 8k, g(ak) = 7 + 
8k, g fk
n
n
k
(
)
(
)
=
+
1
8 2 3
, and g Ak
n
n
k
(
)
(
)
=
+
3
8 2 3
. Then, to an expression u0u1 … 
ur associate the number 2
3
0
1
g u
g u
r
g u
p
r
(
)
(
)
(
)
…
, where pj is the jth prime number, 
starting with p0 = 2. (Example: the number of A x
1
1
2
(
) is 2513352975.) We can enu-
merate all expressions in the order of their associated numbers; so, the set of 
expressions is denumerable.
If we can effectively tell whether any given symbol is a symbol of L, then this 
enumeration can be effectively carried out, and, in addition, we can effectively 
decide whether any given number is the number of an expression of L. The 
same holds true for terms, wfs and closed wfs. If a theory K in the language L  is 
axiomatic, that is, if we can effectively decide whether any given wf is an axiom 
of K, then we can effectively enumerate the theorems of K in the following man-
ner. Starting with a list consisting of the first axiom of K in the enumeration just 
specified, add to the list all the direct consequences of this axiom by MP and by 
Gen used only once and with x1 as quantified variable. Add the second axiom to 
this new list and write all new direct consequences by MP and Gen of the wfs in 
this augmented list, with Gen used only once and with x1 and x2 as quantified 
variables. If at the kth step we add the kth axiom and apply MP and Gen to the 
wfs in the new list (with Gen applied only once for each of the variables x1, …, xk), 
we eventually obtain in this manner all theorems of K. However, in contradis-
tinction to the case of expressions, terms, wfs and closed wfs, it turns out that 
there are axiomatic theories K for which we cannot tell in advance whether any 
given wf of K will eventually appear in the list of theorems.
Definitions
	
i.	A theory K is said to be complete if, for every closed wf B of K, either 
⊢K B or ⊢K ¬B.
	
ii. A theory K′ is said to be an extension of a theory K if every theorem of K 
is a theorem of K′. (We also say in such a case that K is a subtheory of K′.)
Proposition 2.14 (Lindenbaum’s Lemma)
If K is a consistent theory, then there is a consistent, complete extension of K.

85
First-Order Logic and Model Theory
Proof
Let B1, B2, … be an enumeration of all closed wfs of the language of K, by 
Lemma 2.13. Define a sequence J0, J1, J2, … of theories in the following way. 
J0 is K. Assume Jn is defined, with n ≥ 0. If it is not the case that ⊢J
n
n ¬B +1, then 
let Jn+1 be obtained from Jn by adding Bn+1 as an additional axiom. On the other 
hand, if ⊢J
n
n ¬B +1, let Jn+1 = Jn. Let J be the theory obtained by taking as axioms 
all the axioms of all the Jis. Clearly, Ji+1 is an extension of Ji, and J is an exten-
sion of all the Jis, including J0 = K. To show that J is consistent, it suffices to 
prove that every Ji is consistent because a proof of a contradiction in J, involv-
ing as it does only a finite number of axioms, is also a proof of a contradiction 
in some Ji. We prove the consistency of the Jis, by induction. By hypothesis, 
J0 = K is consistent. Assume that Ji is consistent. If Ji+1 = Ji, then Ji+1 is consistent. 
If Ji ≠ Ji+1, and therefore, by the definition of Ji+1, ¬Bi+1 is not provable in Ji, then, 
by Lemma 2.12, Ji+1 is also consistent. So, we have proved that all the Jis are 
consistent and, therefore, that J is consistent. To prove the completeness of J, 
let  C   be any closed wf of K. Then C = Bj+1 for some j ≥ 0. Now, either ⊢J
j
j ¬B +1 or 
⊢J
j
j+
+
1
1
B
, since, if it is not the case that ⊢J
j
j ¬B +1, then Bj+1 is added as an axiom 
in Jj+1. Therefore, either ⊢J ¬Bj+1 or ⊢J Bj+1. Thus, J is complete.
Note that even if one can effectively determine whether any wf is an axiom 
of K, it may not be possible to do the same with (or even to enumerate effec-
tively) the axioms of J; that is, J may not be axiomatic even if K is. This is due 
to the possibility of not being able to determine, at each step, whether or not 
¬Bn+1 is provable in Jn.
Exercises
2.49	
Show that a theory K is complete if and only if, for any closed wfs B 
and C of K, if ⊢K B ∨ C, then ⊢K B or ⊢K C.
2.50D	 Prove that every consistent decidable theory has a consistent, decid-
able, complete extension.
Definitions
	
1.	A closed term is a term without variables.
	
2.	A theory K is a scapegoat theory* if, for any wf B (x) that has x as its 
only free variable, there is a closed term t such that
	
⊢K
x
x
t
(
)
( )
( )
∃
⇒
¬
¬
B
B
*	 If a scapegoat theory assumes that a given property B fails for at least one object, then there 
must be a name (that is, a suitable closed term t) of a specific object for which B provably fails. 
So, t would play the role of a scapegoat, in the usual meaning of that idea. Many theories lack 
the linguistic resources (individual constants and function letters) to be scapegoat theories, 
but the notion of scapegoat theory will be very useful in proving some deep properties of first-
order theories.

86
Introduction to Mathematical Logic
Lemma 2.15
Every consistent theory K has a consistent extension K′ such that K′ is a 
scapegoat theory and K′ contains denumerably many closed terms.
Proof
Add to the symbols of K a denumerable set {b1, b2, …} of new individual con-
stants. Call this new theory K0. Its axioms are those of K plus those logical 
axioms that involve the symbols of K and the new constants. K0 is consistent. 
For, if not, there is a proof in K0 of a wf B ∧ ¬B. Replace each bi appearing in 
this proof by a variable that does not appear in the proof. This transforms 
axioms into axioms and preserves the correctness of the applications of the 
rules of inference. The final wf in the proof is still a contradiction, but now 
the proof does not involve any of the bis and therefore is a proof in K. This 
contradicts the consistency of K. Hence, K0 is consistent.
By Lemma 2.13, let F x
F x
F x
i
i
k
ik
1
2
1
2
(
),
(
),
,
(
),
…
… be an enumeration of all wfs 
of K0 that have one free variable. Choose a sequence b
b
j
j
1
2
,
,… of some of the 
new individual constants such that each bjk is not contained in any of the 
wfs F x
F x
i
k
ik
1
1
(
),
,
(
)
…
 and such that bjk is different from each of b
b
j
jk
1
1
,
,
.
…
− 
Consider the wf
	
(
)
(
)
(
)
(
)
S
x
F x
F b
k
i
k
i
k
j
k
k
k
∃
¬
⇒¬
Let Kn be the theory obtained by adding (S1), …, (Sn) to the axioms of K0, 
and let K∞ be the theory obtained by adding all the (Si)s as axioms to K0. 
Any proof in K∞ contains only a finite number of the (Si)s and, therefore, 
will also be a proof in some Kn. Hence, if all the Kns are consistent, so is 
K∞. To demonstrate that all the Kns are consistent, proceed by induction. 
We know that K0 is consistent. Assume that Kn−1 is consistent but that Kn 
is inconsistent (n ≥ 1). Then, as we know, any wf is provable in Kn (by the 
tautology ¬A ⇒ (A ⇒ B), Proposition 2.1 and MP). In particular, ⊢K
n
n
S
¬(
). 
Hence, (
)
(
).
S
S
n
K
n
n
⊢
−1 ¬
 Since (Sn) is closed, we have, by Corollary 2.7, 
⊢K
n
n
n
S
S
−1 (
)
(
).
⇒¬
 But, by the tautology (A ⇒ ¬A) ⇒ ¬A, Proposition 2.1 and 
MP, we then have ⊢K
n
n
S
−1 ¬(
); that is, ⊢K
i
n
i
n
j
n
n
n
n
x
F x
F b
−1 ¬
¬
¬
[(
)
(
)
(
)]
∃
⇒
. Now, 
by conditional elimination, we obtain ⊢K
i
n
i
n
n
n
x
F x
−1 (
)
(
)
∃
¬
 and ⊢K
n
j
n
n
F b
−1 ¬¬
(
), 
and then, by negation elimination, ⊢K
n
j
n
n
F b
−1
(
). From the latter and the fact 
that bjn does not occur in (S0), …, (Sn−1), we conclude ⊢K
n
r
n
F x
−1
(
), where xr 
is a variable that does not occur in the proof of F b
n
jn
(
). (Simply replace in 
the proof all occurrences of bjn by xr.) By Gen, ⊢K
r
n
r
n
x F x
−1 (
)
(
)
∀
, and then, by 
Lemma 2.11 and biconditional elimination, ⊢K
i
n
i
n
n
n
x
F x
−1 (
)
(
)
∀
. (We use the 
fact that Fn(xr) and F x
n
in
(
) are similar.) But we already have ⊢K
i
n
i
n
n
n
x
F x
−1 (
)
(
),
∃
¬
 
which is an abbreviation of ⊢K
i
n
i
n
n
n
x
F x
−1 ¬
¬¬
(
)
(
)
∀
, whence, by the replace-
ment theorem, ⊢K
i
n
i
n
n
n
x
F x
−1 ¬(
)
(
),
∀
 contradicting the hypothesis that Kn−1 is 

87
First-Order Logic and Model Theory
consistent. Hence, Kn must also be consistent. Thus K∞ is consistent, it is 
an extension of K, and it is clearly a scapegoat theory.
Lemma 2.16
Let J be a consistent, complete scapegoat theory. Then J has a model M whose 
domain is the set D of closed terms of J.
Proof
For any individual constant ai of J, let (ai)M = ai. For any function letter fk
n 
of J and for any closed terms t1, …, tn of J, let (
) ( ,
,
)
( ,
,
)
f
t
t
f
t
t
k
n
n
k
n
n
M
1
1
…
=
…
. 
(Notice that f
t
t
k
n
n
( ,
,
)
1 …
 is a closed term. Hence, (
)
fk
n M is an n-ary operation 
on D.) For any predicate letter Ak
n of J, let (
)
Ak
n M consist of all n-tuples 〈t1, …, tn〉 
of closed terms t1, …, tn of J such that ⊢J
k
n
n
A t
t
( ,
,
)
1 …
. It now suffices to show 
that, for any closed wf C of J:
	
( )


⊢
M C
C
if and only if
J
(If this is established and B is any axiom of J, let C be the closure of B. By Gen, 
⊢J C. By (□), ⊧M C. By (VI) on page 58, ⊧M B. Hence, M would be a model of J.) 
The proof of (□) is by induction on the number r of connectives and quanti-
fiers in C. Assume that (□) holds for all closed wfs with fewer than r connec-
tives and quantifiers.
Case 1. C  is a closed atomic wf A t
t
k
n
n
( ,
,
)
1 …
. Then (□) is a direct consequence 
of the definition of (
)
Ak
n M.
Case 2. C is ¬D. If C is true for M, then D is false for M and so, by inductive 
hypothesis, not-⊢J D. Since J is complete and D is closed, ⊢J ¬D—that is, ⊢J C. 
Conversely, if C is not true for M, then D is true for M. Hence, ⊢J D. Since J is 
consistent, not-⊢J ¬D, that is, not-⊢J C.
Case 3. C is D ⇒ E. Since C is closed, so are D and E. If C is false for M, then D 
is true and E is false. Hence, by inductive hypothesis, ⊢J D and not-⊢J E. By 
the completeness of J, ⊢J ¬E. Therefore, by an instance of the tautology D ⇒ 
(¬E ⇒ ¬(D ⇒ E)) and two applications of MP, ⊢J ¬(D ⇒ E), that is, ⊢J ¬C, and 
so, by the consistency of J, not-⊢J C. Conversely, if not-⊢J C, then, by the com-
pleteness of J, ⊢J ¬C, that is, ⊢J ¬(D ⇒ E). By conditional elimination, ⊢J D and 
⊢J ¬E. Hence, by (□) for D, D is true for M. By the consistency of J, not-⊢J E 
and, therefore, by (□) for E, E is false for M. Thus, since D is true for M and E 
is false for M, C is false for M.
Case 4. C is (∀xm)D.
Case 4a. D is a closed wf. By inductive hypothesis, ⊧M D if and only if 
⊢J D. By Exercise 2.32(a), ⊢J D ⇔ (∀xm)D. So, ⊢J D  if and only if ⊢J(∀xm)D, by 

88
Introduction to Mathematical Logic
biconditional elimination. Moreover, ⊧M D if and only if ⊧M(∀xm)D by prop-
erty (VI) on page 58. Hence, ⊧M C if and only if ⊢J C.
Case 4b. D is not a closed wf. Since C is closed, D has xm as its only free vari-
able, say D is F(xm). Then C is (∀xm)F(xm).
	
i.	Assume ⊧M C and not-⊢J C. By the completeness of J, ⊢J ¬C, that is, 
⊢J ¬(∀xm)F(xm). Then, by Exercise 2.33(a) and biconditional elimina-
tion, ⊢J(∃xm) ¬F(xm). Since J is a scapegoat theory, ⊢J ¬F(t) for some 
closed term t of J. But ⊧M C, that is, ⊧M(∀xm)F(xm). Since (∀xm)F(xm) ⇒ F(t) 
is true for M by property (X) on page 59, ⊧MF(t). Hence, by (□) for F(t), 
⊢JF(t). This contradicts the consistency of J. Thus, if ⊧M C, then, ⊢J C.
	
ii. Assume ⊢J C and not-⊧M C. Thus,
	
(#)
(
) (
)
(##)
(
) (
).
⊢

J
and
∀
∀
x
F x
x
F x
m
m
M
m
m
not−
By (##), some sequence of elements of the domain D does not satisfy (∀xm)
F(xm). Hence, some sequence s does not satisfy F(xm). Let t be the ith compo-
nent of s. Notice that s*(u) = u for all closed terms u of J (by the definition of 
(ai)M and (
)
fk
n M). Observe also that F(t) has fewer connectives and quantifiers 
than C and, therefore, the inductive hypothesis applies to F(t), that is, (□) 
holds for F(t). Hence, by Lemma 2(a) on page 60, s does not satisfy F(t). So, F(t) 
is false for M. But, by (#) and rule A4, ⊢J F(t), and so, by (□) for F(t), ⊧M F(t). This 
contradiction shows that, if ⊢J C, then ⊧M C.
Now we can prove the fundamental theorem of quantification theory. By 
a denumerable model we mean a model in which the domain is denumerable.
Proposition 2.17*
Every consistent theory K has a denumerable model.
Proof
By Lemma 2.15, K has a consistent extension K′ such that K′ is a scapegoat 
theory and has denumerably many closed terms. By Lindenbaum’s lemma, 
K′ has a consistent, complete extension J that has the same symbols as K′. 
Hence, J is also a scapegoat theory. By Lemma 2.16, J has a model M whose 
domain is the denumerable set of closed terms of J. Since J is an extension of 
K, M is a denumerable model of K.
*	 The proof given here is essentially due to Henkin (1949), as simplified by Hasenjaeger (1953). 
The result was originally proved by Gödel (1930). Other proofs have been published by 
Rasiowa and Sikorski (1951, 1952) and Beth (1951), using (Boolean) algebraic and topologi-
cal methods, respectively. Still other proofs may be found in Hintikka (1955a,b) and in Beth 
(1959).

89
First-Order Logic and Model Theory
Corollary 2.18
Any logically valid wf B of a theory K is a theorem of K.
Proof
We need consider only closed wfs B, since a wf D is logically valid if and only 
if its closure is logically valid, and D is provable in K if and only if its closure 
is provable in K. So, let B be a logically valid closed wf of K. Assume that 
not-⊢K B. By Lemma 2.12, if we add ¬B as a new axiom to K, the new theory 
K′ is consistent. Hence, by Proposition 2.17, K′ has a model M. Since ¬B is an 
axiom of K′, ¬B is true for M. But, since B is logically valid, B is true for M. 
Hence, B is both true and false for M, which is impossible (by (II) on page 57). 
Thus, B must be a theorem of K.
Corollary 2.19 (Gödel’s Completeness Theorem, 1930)
In any predicate calculus, the theorems are precisely the logically valid wfs.
Proof
This follows from Proposition 2.2 and Corollary 2.18. (Gödel’s original proof 
runs along quite different lines. For other proofs, see Beth (1951), Dreben 
(1952), Hintikka (1955a,b) and Rasiowa and Sikorski (1951, 1952).)
Corollary 2.20
Let K be any theory.
	
a.	A wf B is true in every denumerable model of K if and only if ⊢K B.
	
b.	If, in every model of K, every sequence that satisfies all wfs in a set Γ 
of wfs also satisfies a wf B, then Γ ⊢K B.
	
c.	If a wf B of K is a logical consequence of a set Γ of wfs of K, then Γ ⊢K B.
	
d.	If a wf B of K is a logical consequence of a wf C of K, then C ⊢K B.
Proof
	
a.	We may assume B is closed (Why?). If not-⊢K B, then the theory K′ = 
K + {¬B} is consistent, by Lemma 2.12.* Hence, by Proposition 2.17, K′ 
has a denumerable model M. However, ¬B, being an axiom of K′, is 
true for M. By hypothesis, since M is a denumerable model of K, B is 
true for M. Therefore, B is true and false for M, which is impossible.
*	 If K is a theory and Δ is a set of wfs of K, then K + Δ denotes the theory obtained from K by 
adding the wfs of Δ as axioms.

90
Introduction to Mathematical Logic
	
b.	Consider the theory K + Γ. By the hypothesis, B is true for every 
model of this theory. Hence, by (a), ⊢K+Γ B. So, Γ ⊢K B.
Part (c) is a consequence of (b), and part (d) is a special case of (c).
Corollaries 2.18–2.20 show that the “syntactical” approach to quantifica-
tion theory by means of first-order theories is equivalent to the “semantical” 
approach through the notions of interpretations, models, logical validity, 
and so on. For the propositional calculus, Corollary 1.15 demonstrated the 
analogous equivalence between the semantical notion (tautology) and the 
syntactical notion (theorem of L). Notice also that, in the propositional cal-
culus, the completeness of the system L (see Proposition 1.14) led to a solu-
tion of the decision problem. However, for first-order theories, we cannot 
obtain a decision procedure for logical validity or, equivalently, for prov-
ability in first-order predicate calculi. We shall prove this and related results 
in Section 3.6.
Corollary 2.21 (Skolem–Löwenheim Theorem, 1920, 1915)
Any theory that has a model has a denumerable model.
Proof
If K has a model, then K is consistent, since no wf can be both true and 
false for the same model M. Hence, by Proposition 2.17, K has a denumer-
able model.
The following stronger consequence of Proposition 2.17 is derivable.
Corollary 2.22A
For any cardinal number 𝔪 ≥ℵ0, any consistent theory K has a model of car-
dinality 𝔪.
Proof
By Proposition 2.17, we know that K has a denumerable model. Therefore, it 
suffices to prove the following lemma.
Lemma
If 𝔪 and 𝔫 are two cardinal numbers such that 𝔪 ⩽ 𝔫 and if K has a model 
of cardinality 𝔪, then K has a model of cardinality 𝔫.

91
First-Order Logic and Model Theory
Proof
Let M be a model of K with domain D of cardinality 𝔪. Let D′ be a set of 
cardinality n that includes D. Extend the model M to an interpretation M′ 
that has D′ as domain in the following way. Let c be a fixed element of D. We 
stipulate that the elements of D′ − D behave like c. For example, if Bj
n is the 
interpretation in M of the predicate letter Aj
n and (
)
Bj
n ′ is the new interpreta-
tion in M′, then for any d1, …, dn in D′
′
, (
)
Bj
n  holds for (d1, …, dn) if and only 
if Bj
n holds for (u1, …, un), where ui = di if di ∈ D and ui = c if di ∈ D′ − D. The 
interpretation of the function letters is extended in an analogous way, and 
the individual constants have the same interpretations as in M. It is an easy 
exercise to show, by induction on the number of connectives and quantifiers 
in a wf B, that B is true for M′ if and only if it is true for M. Hence, M′ is a 
model of K of cardinality 𝔫.
Exercises
2.51	 For any theory K, if Γ ⊢K B and each wf in Γ is true for a model M of K, 
show that B is true for M.
2.52	 If a wf B without quantifiers is provable in a predicate calculus, prove 
that B is an instance of a tautology and, hence, by Proposition 2.1, has 
a proof without quantifiers using only axioms (A1)–(A3) and MP. [Hint: 
if B were not a tautology, one could construct an interpretation, having 
the set of terms that occur in B as its domain, for which B is not true, 
contradicting Proposition 2.2.]
	
	 Note that this implies the consistency of the predicate calculus and 
also provides a decision procedure for the provability of wfs without 
quantifiers.
2.53	 Show that ⊢K B if and only if there is a wf C that is the closure of the 
conjunction of some axioms of K such that C ⇒ B is logically valid.
2.54	 Compactness. If all finite subsets of the set of axioms of a theory K have 
models, prove that K has a model.
2.55	 a.	 For any wf B, prove that there is only a finite number of interpreta-
tions of B on a given domain of finite cardinality k.
	
b.	 For any wf B, prove that there is an effective way of determining 
whether B is true for all interpretations with domain of some 
fixed cardinality k.
	
c.	 Let a wf B be called k-valid if it is true for all interpretations that 
have a domain of k elements. Call B precisely k-valid if it is k-valid 
but not (k + 1)-valid. Show that (k + 1)-validity implies k-validity 
and give an example of a wf that is precisely k-valid. (See Hilbert 
and Bernays (1934, § 4–5) and Wajsberg (1933).)

92
Introduction to Mathematical Logic
2.56	
Show that the following wf is true for all finite domains but is false for 
some infinite domain.
	
(
)(
)(
)
( , )
( , )
( , )
( , )
( , )
∀
∀
∀
∧
∧
⇒
) ∧
∨
x
y
z
A x x
A x y
A y z
A x z
A x y
1
2
1
2
1
2
1
2
1
2
A y x
y
x A y x
1
2
1
2
( , )
(
)(
)
( , )
(
)
(


⇒∃
∀
2.57	
Prove that there is no theory K whose models are exactly the interpre-
tations with finite domains.
2.58	
Let B be any wf that contains no quantifiers, function letters, or indi-
vidual constants.
	
	
a.	 Show that a closed prenex wf (∀x1) … (∀xn)(∃y1) … (∃ym)B, with m ≥ 0 
and n ≥ 1, is logically valid if and only if it is true for every interpre-
tation with a domain of n objects.
	
	
b.	 Prove that a closed prenex wf (∃y1) … (∃ym)B is logically valid if and 
only if it is true for all interpretations with a domain of one element.
	
	
c.	 Show that there is an effective procedure to determine the logical 
validity of all wfs of the forms given in (a) and (b).
2.59	
Let K1 and K2 be theories in the same language L. Assume that any 
interpretation M of L is a model of K1 if and only if M is not a model 
of K2. Prove that K1 and K2 are finitely axiomatizable, that is, there are 
finite sets of sentences Γ and Δ such that, for any sentence B
B
, ⊢K1
 if 
and only if Γ ⊢ B, and ⊢K2 B  if and only if Δ ⊢ B.*
2.60	
A set Γ of sentences is called an independent axiomatization of a theory K 
if (a) all sentences in Γ are theorems of K, (b) Γ ⊢ B for every theorem B 
of K, and (c) for every sentence C of Γ, it is not the case that Γ − {C } ⊢ C.* 
Prove that every theory K has an independent axiomatization.
2.61A	 If, for some cardinal 𝔪 ≥ ℵ0, a wf B is true for every interpretation of 
cardinality 𝔪, prove that B is logically valid.
2.62A	 If a wf B is true for all interpretations of cardinality 𝔪 prove that B is 
true for all interpretations of cardinality less than or equal to 𝔪.
2.63	
a.	 Prove that a theory K is a scapegoat theory if and only if, for any wf 
B (x) with x as its only free variable, there is a closed term t such that 
⊢K (∃x)B (x) ⇒ B(t).
	
	
b.	 Prove that a theory K is a scapegoat theory if and only if, for any wf 
B (x) with x as its only free variable such that ⊢K (∃x)B (x), there is a 
closed term t such that ⊢K B (t).
	
	
c.	 Prove that no predicate calculus is a scapegoat theory.
*	 Here, an expression Γ ⊢ B, without any subscript attached to ⊢, means that B is derivable 
from Γ using only logical axioms, that is, within the predicate calculus.

93
First-Order Logic and Model Theory
2.8  First-Order Theories with Equality
Let K be a theory that has as one of its predicate letters A1
2. Let us write t = s 
as an abbreviation for A t s
1
2( , ), and t ≠ s as an abbreviation for ¬A t s
1
2( , ). Then 
K is called a first-order theory with equality (or simply a theory with equality) if 
the following are theorems of K:
	
(
) (
)
(
)
(
)
(
( , )
( ,
A
x x
x
A
x
y
x x
x y
6
7
1
1
1
∀
=
=
⇒
⇒
reflexivity of equality
B
B
)) (
)
substitutivity of equality
where x and y are any variables, B(x, x) is any wf, and B(x, y) arises from 
B(x, x) by replacing some, but not necessarily all, free occurrences of x by y, 
with the proviso that y is free for x in B(x, x). Thus, B(x, y) may or may not 
contain free occurrences of x.
The numbering (A6) and (A7) is a continuation of the numbering of the 
logical axioms.
Proposition 2.23
In any theory with equality,
	
a.	⊢ t = t for any term t;
	
b.	⊢ t = s ⇒ s = t for any terms t and s;
	
c.	⊢ t = s ⇒ (s = r ⇒ t = r) for any terms t, s, and r.
Proof
	
a.	By (A6), ⊢ (∀x1)x1 = x1. Hence, by rule A4, ⊢ t = t.
	
b.	Let x and y be variables not occurring in t or s. Letting B(x, x) be x = x 
and B(x, y) be y = x in schema (A7), ⊢ x = y ⇒ (x = x ⇒ y = x). But, 
by (a), ⊢ x = x. So, by an instance of the tautology (A ⇒ (B ⇒ C)) ⇒ 
(B ⇒ (A ⇒ C)) and two applications of MP, we have ⊢ x = y ⇒ y = x. 
Two applications of Gen yield ⊢ (∀x)(∀y)(x = y ⇒ y = x), and then two 
applications of rule A4 give ⊢ t = s ⇒ s = t.
	
c.	Let x, y, and z be three variables not occurring in t, s, or r. Letting 
B(y, y) be y = z and B(y, x) be x = z in (A7), with x and y inter-
changed, we obtain ⊢ y = x ⇒ (y = z ⇒ x = z). But, by (b), ⊢ x = 
y ⇒ y = x. Hence, using an instance of the tautology (A ⇒ B) ⇒ 
((B ⇒ C) ⇒ (A ⇒ C)) and two applications of MP, we obtain ⊢ x = 
y ⇒(y = z ⇒ x = z). By three applications of Gen, ⊢ (∀x)(∀y)(∀z)(x = 
y ⇒ (y = z ⇒ x = z)), and then, by three uses of rule A4, ⊢ t = s ⇒ 
(s = r ⇒ t = r).

94
Introduction to Mathematical Logic
Exercises
2.64	 Show that (A6) and (A7) are true for any interpretation M in which 
(
)
A1
2 M is the identity relation on the domain of the interpretation.
2.65	 Prove the following in any theory with equality.
	
a.	 ⊢ (∀x)(B (x) ⇔ (∃y)(x = y ∧ B (y))) if y does not occur in B (x)
	
b.	 ⊢ (∀x)(B (x) ⇔ (∀y)(x = y ⇒ B (y))) if y does not occur in B (x)
	
c.	 ⊢ (∀x)(∃y)x = y
	
d.	 ⊢ x = y ⇒ f(x) = f(y), where f is any function letter of one argument
	
e.	 ⊢ B (x) ∧ x = y ⇒ B (y), if y is free for x in B (x)
	
f.	 ⊢ B (x) ∧ ¬B (y) ⇒ x ≠ y, if y is free for x in B (x)
We can reduce schema (A7) to a few simpler cases.
Proposition 2.24
Let K be a theory for which (A6) holds and (A7) holds for all atomic wfs 
B (x, x) in which there are no individual constants. Then K is a theory with 
equality, that is, (A7) holds for all wfs B (x, x).
Proof
We must prove (A7) for all wfs B (x, x). It holds for atomic wfs by assump-
tion. Note that we have the results of Proposition 2.23, since its proof used 
(A7) only with atomic wfs without individual constants. Note also that we 
have (A7) for all atomic wfs B (x, x). For if B (x, x) contains individual con-
stants, we can replace those individual constants by new variables, obtaining 
a wf B*(x, x) without individual constants. By hypothesis, the correspond-
ing instance of (A7) with B*(x, x) is a theorem; we can then apply Gen with 
respect to the new variables, and finally apply rule A4 one or more times to 
obtain (A7) with respect to B (x, x).
Proceeding by induction on the number n of connectives and quantifiers in 
B (x, x), we assume that (A7) holds for all k < n.
Case 1. B (x, x) is ¬C (x, x). By inductive hypothesis, we have ⊢ y = x ⇒ (C (x, y) 
⇒ C (x, x)), since C (x, x) arises from C (x, y) by replacing some occurrences of 
y by x. Hence, by Proposition 2.23(b), instances of the tautologies (A ⇒ B) ⇒ 
(¬B ⇒ ¬A) and (A ⇒ B) ⇒ ((B ⇒ C) ⇒ (A ⇒ C)) and MP, we obtain ⊢ x = y ⇒ 
(B (x, x) ⇒ B (x, y)).
Case 2. B (x, x) is C (x, x) ⇒ D (x, x). By inductive hypothesis and Proposition 
2.23(b), ⊢ x = y ⇒ (C (x, y) ⇒ C (x, x)) and ⊢ x = y ⇒ (D(x, x) ⇒ D(x, y)). Hence, 
by the tautology (A ⇒ (C1 ⇒ C)) ⇒ [(A ⇒ (D ⇒ D1)) ⇒ (A ⇒ ((C ⇒ D) ⇒ (C1 ⇒ 
D1)))] , we have ⊢ x = y ⇒ (B (x, x) ⇒ B (x, y)).

95
First-Order Logic and Model Theory
Case 3. B(x, x) is (∀z)C (x, x, z). By inductive hypothesis, ⊢ x = y ⇒ (C (x, x, z) ⇒ 
C (x, y, z)). Now, by Gen and axiom (A5), ⊢ x = y ⇒(∀z) (C (x, x, z) ⇒ C (x, y, z)). 
By Exercise 2.27(a), ⊢ (∀z)(C (x, x, z) ⇒ C (x, y, z)) ⇒ [(∀z)C (x, x, z) ⇒ (∀z)C (x, y, z)], 
and so, by the tautology (A ⇒ B) ⇒ ((B ⇒ C) ⇒ (A ⇒ C)), ⊢ x = y ⇒ (B (x, x) ⇒ 
B (x, y)).
The instances of (A7) can be still further reduced.
Proposition 2.25
Let K be a theory in which (A6) holds and the following are true.
	
a.	Schema (A7) holds for all atomic wfs B (x, x) such that no function 
letters or individual constants occur in B(x, x) and B (x, y) comes 
from B (x, x) by replacing exactly one occurrence of x by y.
	
b.	⊢x
y
f
z
z
f
w
w
j
n
n
j
n
n
=
⇒
…
=
…
(
,
,
)
(
,
,
)
1
1
, where fj
n is any function 
letter of K, z1, …, zn are variables, and f
w
w
j
n
n
(
,
,
)
1 …
 arises from 
f
z
z
j
n
n
(
,
,
)
1 …
 by replacing exactly one occurrence of x by y.
Then K is a theory with equality.
Proof
By repeated application, our assumptions can be extended to replacements 
of more than one occurrence of x by y. Also, Proposition 2.23 is still deriv-
able. By Proposition 2.24, it suffices to prove (A7) for only atomic wfs without 
individual constants. But, hypothesis (a) enables us easily to prove
	
⊢(
)
(
(
,
,
)
(
,
,
))
y
z
y
z
y
y
z
z
n
n
n
n
1
1
1
1
=
∧…∧
=
⇒
…
⇒
…
B
B
for all variables y1, …, yn, z1, …, zn and any atomic wf B(y1, …, yn) without 
function letters or individual constants. Hence, it suffices to show:
(*) If t(x, x) is a term without individual constants and t(x, y) comes from 
t(x, x) by replacing some occurrences of x by y, then ⊢ x = y ⇒ t(x, x) = t(x, y).*
But (*) can be proved, using hypothesis (b), by induction on the number of 
function letters in t(x,x), and we leave this as an exercise.
It is easy to see from Proposition 2.25 that, when the language of K has only 
finitely many predicate and function letters, it is only necessary to verify 
(A7) for a finite list of special cases (in fact, n wfs for each Aj
n and n wfs for 
each fj
n).
*	 The reader can clarify how (*) is applied by using it to prove the following instance of (A7): 
⊢x
y
A
f
x
A
f
y
=
⇒
⇒
(
(
( ))
(
( )))
1
1
1
1
1
1
1
1
. Let t(x,  x) be f
x
1
1( ) and let t(x,  y) be f
y
1
1( ).

96
Introduction to Mathematical Logic
Exercises
2.66	 Let K1 be a theory whose language has only = as a predicate letter and 
no function letters or individual constants. Let its proper axioms be 
(∀x1)x1 = x1, (∀x1)(∀x2)(x1 = x2 ⇒ x2 = x1), and (∀x1)(∀x2)(∀x3)(x1 = x2 ⇒ (x2 = 
x3 ⇒ x1 = x3)). Show that K1 is a theory with equality. [Hint: It suffices 
to prove that ⊢ x1 = x3 ⇒ (x1 = x2 ⇒ x3 = x2) and ⊢ x2 = x3 ⇒ (x1 = x2 ⇒ 
x1 = x3).] K1 is called the pure first-order theory of equality.
2.67	 Let K2 be a theory whose language has only = and < as predicate letters 
and no function letters or individual constants. Let K2 have the follow-
ing proper axioms.
	
a.	 (∀x1)x1 = x1
	
b.	 (∀x1)(∀x2)(x1 = x2 ⇒ x2 = x1)
	
c.	 (∀x1)(∀x2)(∀x3)(x1 = x2 ⇒ (x2 = x3 ⇒ x1 = x3))
	
d.	 (∀x1)(∃x2)(∃x3)(x1 < x2 ∧ x3 < x1)
	
e.	 (∀x1)(∀x2)(∀x3)(x1 < x2 ∧ x2 < x3 ⇒ x1 < x3)
	
f.	 (∀x1)(∀x2)(x1 = x2 ⇒ ¬ x1 < x2)
	
g.	 (∀x1)(∀x2)(x1 < x2 ∨ x1 = x2 ∨ x2 < x1)
	
h.	 (∀x1)(∀x2)(x1 < x2 ⇒ (∃x3)(x1 < x3 ∧ x3 < x2))
	
	 Using Proposition 2.25, show that K2 is a theory with equality. K2 is 
called the theory of densely ordered sets with neither first nor last element.
2.68	 Let K be any theory with equality. Prove the following.
	
a.	 ⊢ x1 = y1 ∧ … ∧ xn = yn ⇒ t(x1, …, xn) = t(y1, …, yn), where t(y1, …, yn) 
arises from the term t(x1, …, xn) by substitution of y1, …, yn for x1, …, 
xn, respectively.
	
b.	 ⊢ x1 = y1 ∧ … ∧ xn = yn ⇒ (B (x1, …, xn) ⇔ B (y1, …, yn)), where B (y1, …, 
yn) is obtained by substituting y1, …, yn for one or more occurrences 
of x1, …, xn, respectively, in the wf B (x1, …, xn), and y1, …, yn are free 
for x1, …, xn, respectively, in the wf B (x1, …, xn).
Examples
(In the literature, “elementary” is sometimes used instead of “first-order.”)
	
1.	Elementary theory G of groups: predicate letter =, function letter f1
2, 
and individual constant a1. We abbreviate f
t s
1
2( , ) by t + s and a1 by 0. 
The proper axioms are the following.
	
a.	 x1 + (x2 + x3) = (x1 + x2) + x3
	
b.	 x1 + 0 = x1
	
c.	 (∀x1)(∃x2)x1 + x2 = 0

97
First-Order Logic and Model Theory
	
d.	 x1 = x1
	
e.	 x1 = x2 ⇒ x2 = x1
	
f.	 x1 = x2 ⇒ (x2 = x3 ⇒ x1 = x3)
	
g.	 x1 = x2 ⇒ (x1 + x3 = x2 + x3 ∧ x3 + x1 = x3 + x2)
	
	 That G is a theory with equality follows easily from Proposition 2.25. 
If one adds to the axioms the following wf:
	
h.	 x1 + x2 = x2 + x1
	
	
the new theory is called the elementary theory of abelian groups.
	
2.	Elementary theory F of fields: predicate letter =, function letters f1
2 and 
f2
2, and individual constants a1 and a2. Abbreviate f
t s
1
2( , ) by t + s, 
f
t s
2
2( , ) by t · s, and a1 and a2 by 0 and 1. As proper axioms, take (a)–(h) 
of Example 1 plus the following.
	
i.	 x1 = x2 ⇒ (x1 · x3 = x2 · x3 ∧ x3 · x1 = x3 · x2)
	
j.	 x1 · (x2 · x3) = (x1 · x2) · x3
	
k.	 x1 · (x2 + x3) = (x1 · x2) + (x1 · x3)
	
l.	 x1 · x2 = x2 · x1
	
m.	  x1 · 1 = x1
	
n.	  x1 ≠ 0 ⇒ (∃x2)x1 · x2 = 1
	
o.	  0 ≠ 1
F is a theory with equality. Axioms (a)–(m) define the elementary theory RC 
of commutative rings with unit. If we add to F the predicate letter A2
2, abbre-
viate A t s
2
2( , ) by t < s, and add axioms (e), (f), and (g) of Exercise 2.67, as well 
as x1 < x2 ⇒ x1 + x3 < x2 + x3 and x1 < x2 ∧ 0 < x3 ⇒ x1 · x3 < x2 · x3, then the new 
theory F< is called the elementary theory of ordered fields.
Exercise
2.69	 a.	 What formulas must be derived in order to use Proposition 2.25 to 
conclude that the theory G of Example 1 is a theory with equality?
	
b.	 Show that the axioms (d)–(f) of equality mentioned in Example 1 
can be replaced by (d) and
	
(
) :
(
).
′
=
⇒
=
⇒
=
f
x
x
x
x
x
x
1
2
3
2
1
3
One often encounters theories K in which=may be defined; that is, there 
is a wf E(x, y) with two free variables x and y, such that, if we abbreviate 
E(t, s) by t = s, then axioms (A6) and (A7) are provable in K. We make the 

98
Introduction to Mathematical Logic
convention that, if t and s are terms that are not free for x and y, respectively, 
in E (x, y), then, by suitable changes of bound variables (see Exercise 2.48), we 
replace E (x, y) by a logically equivalent wf E*(x, y) such that t and s are free for 
x and y, respectively, in E*(x, y); then t = s is to be the abbreviation of E*(t, s). 
Proposition 2.23 and analogues of Propositions 2.24 and 2.25 hold for such 
theories. There is no harm in extending the term theory with equality to cover 
such theories.
In theories with equality it is possible to define in the following way phrases 
that use the expression “There exists one and only one x such that.…”
Definition
	
(
)
( )
(
)
( )
(
)(
)(
( )
( )
)
∃
∃
∧∀
∀
∧
⇒
=
1x
x
x
x
x
y
x
y
x
y
B
B
B
B
for
In this definition, the new variable y is assumed to be the first variable that 
does not occur in B(x). A similar convention is to be made in all other defini-
tions where new variables are introduced.
Exercise
2.70	 In any theory with equality, prove the following.
	
a.	 ⊢ (∀x)(∃1y)x = y
	
b.	 ⊢ (∃1x)B (x) ⇔ (∃x)(∀y)(x = y ⇔ B (y))
	
c.	 ⊢ (∀x)(B (x) ⇔ C (x)) ⇒ [(∃1x)B (x) ⇔ (∃1x)C (x)]
	
d.	 ⊢ (∃1x)(B ∨ C) ⇒ ((∃1x)B) ∨ (∃1x)C
	
e.	 ⊢ (∃1x)B (x) ⇔ (∃x)(B (x) ∧ (∀y)(B (y) ⇒ y = x))
In any model for a theory K with equality, the relation E in the model corre-
sponding to the predicate letter = is an equivalence relation (by Proposition 
2.23). If this relation E is the identity relation in the domain of the model, 
then the model is said to be normal.
Any model M for K can be contracted to a normal model M* for K by taking the 
domain D* of M* to be the set of equivalence classes determined by the relation 
E in the domain D of M. For a predicate letter Aj
n and for any equivalence classes 
[b1], …, [bn] in D* determined by elements b1, …, bn in D, we let (
)
Aj
n M* hold for 
([b1], …, [bn]) if and only if (
)
Aj
n M holds for (b1, …, bn). Notice that it makes no differ-
ence which representatives b1, …, bn we select in the given equivalence classes 
because, from (A7), ⊢x
y
x
y
A
x
x
A
y
y
n
n
j
n
n
j
n
n
1
1
1
1
=
∧…∧
=
⇒
…
⇔
…
(
(
,
,
)
(
,
,
)). 
Likewise, for any function letter fj
n and any equivalence classes [b1], …, 
[bn] in D*, let (
)
([ ],
, [
])
[(
) ( ,
,
)]
f
b
b
f
b
b
j
n
n
j
n
n
M*
M
1
1
…
=
…
. Again note that this is 
independent of the choice of the representatives b1, …, bn, since, from (A7), 

99
First-Order Logic and Model Theory
we can prove ⊢x
y
x
y
f
x
x
f
y
y
n
n
j
n
n
j
n
n
1
1
1
1
=
∧…∧
=
⇒
…
=
…
(
,
,
)
(
,
,
). For any 
individual constant ai let (ai)M* = [(ai)M]. The relation E* corresponding to = in 
the model M* is the identity relation in D*: E*([b1], [b2]) if and only if E(b1, b2), 
that is, if and only if [b1] = [b2]. Now one can easily prove by induction the 
following lemma: If s = (b1, b2, …) is a denumerable sequence of elements of 
D, and s′ = ([b1], [b2], …) is the corresponding sequence of equivalence classes, 
then a wf B is satisfied by s in M if and only if B is satisfied by s′ in M*. It fol-
lows that, for any wf B, B is true for M if and only if B is true for M*. Hence, 
because M is a model of K, M* is a normal model of K.
Proposition 2.26 (Extension of Proposition 2.17)
(Gödel, 1930) Any consistent theory with equality K has a finite or denumer-
able normal model.
Proof
By Proposition 2.17, K has a denumerable model M. Hence, the contraction 
of M to a normal model yields a finite or denumerable normal model M* 
because the set of equivalence classes in a denumerable set D is either finite 
or denumerable.
Corollary 2.27 (Extension of the Skolem–Löwenheim Theorem)
Any theory with equality K that has an infinite normal model M has a denu-
merable normal model.
Proof
Add to K the denumerably many new individual constants b1, b2, … together 
with the axioms bi ≠ bj for i ≠ j. Then the new theory K′ is consistent. If K′ 
were inconsistent, there would be a proof in K′ of a contradiction C ∧ ¬C, 
where we may assume that C is a wf of K. But this proof uses only a finite 
number of the new axioms: bi1 ≠ bj1, …, bin ≠ bjn. Now, M can be extended to a 
model M# of K plus the axioms bi1 ≠ bj1, …, bin ≠ bjn; in fact, since M is an infi-
nite normal model, we can choose interpretations of bi1, bj1, …, bin, bjn, so that 
the wfs bi1 ≠ bj1, …, bin ≠ bjn are true. But, since C ∧ ¬C is derivable from these 
wfs and the axioms of K, it would follow that C ∧ ¬C is true for M#, which is 
impossible. Hence, K′ must be consistent. Now, by Proposition 2.26, K′ has a 
finite or denumerable normal model N. But, since, for i ≠ j, the wfs bi ≠ bj are 
axioms of K′, they are true for N. Thus, the elements in the domain of N that 
are the interpretations of b1, b2, … must be distinct, which implies that the 
domain of N is infinite and, therefore, denumerable.

100
Introduction to Mathematical Logic
Exercises
2.71	 We define (∃nx)B (x) by induction on n ≥ 1. The case n = 1 has already 
been taken care of. Let (∃n+1x)B(x) stand for (∃y)(B(y) ∧ (∃nx) (x ≠ y ∧ B 
(x))).
	
a.	
Show that (∃nx)B (x) asserts that there are exactly n objects for 
which B holds, in the sense that in any normal model for (∃nx)B(x) 
there are exactly n objects for which the property corresponding 
to B(x) holds.
	
b.	 i.	
For each positive integer n, write a closed wf Bn such that Bn 
is true in a normal model when and only when that model 
contains at least n elements.
	
	
ii.	
Prove that the theory K, whose axioms are those of the pure 
theory of equality K1 (see Exercise 2.66), plus the axioms B1, 
B2, …, is not finitely axiomatizable, that is, there is no theory 
K′ with a finite number of axioms such that K and K′ have the 
same theorems.
	
	
iii.	 For a normal model, state in ordinary English the meaning of 
¬Bn+1.
	
c.	
Let n be a positive integer and consider the wf (En) (∃nx)x = x. Let Ln 
be the theory K1 + {En}, where K1 is the pure theory of equality.
	
	
i.	
Show that a normal model M is a model of Ln if and only if 
there are exactly n elements in the domain of M.
	
	
ii.	
Define a procedure for determining whether any given sen-
tence is a theorem of Ln and show that Ln is a complete theory.
2.72	 a.	
Prove that, if a theory with equality K has arbitrarily large finite 
normal models, then it has a denumerable normal model.
	
b.	 Prove that there is no theory with equality whose normal models 
are precisely all finite normal interpretations.
2.73	 Prove that any predicate calculus with equality is consistent. (A predi-
cate calculus with equality is assumed to have (A1)–(A7) as its only 
axioms.)
2.74D	 Prove the independence of axioms (A1)–(A7) in any predicate calculus 
with equality.
2.75	 If B is a wf that does not contain the = symbol and B is provable in a 
predicate calculus with equality K, show that B is provable in K with-
out using (A6) or (A7).
2.76D	 Show that = can be defined in any theory whose language has only a 
finite number of predicate letters and no function letters.
2.77	 a.A	 Find a nonnormal model of the elementary theory of groups G.

101
First-Order Logic and Model Theory
	
b.	 Show that any model M of a theory with equality K can be 
extended to a nonnormal model of K. [Hint: Use the argument in 
the proof of the lemma within the proof of Corollary 2.22.]
2.78	 Let B be a wf of a theory with equality. Show that B is true in every 
normal model of K if and only if ⊢K B.
2.79	 Write the following as wfs of a theory with equality.
	
a.	
There are at least three moons of Jupiter.
	
b.	 At most two people know everyone in the class.
	
c.	
Everyone in the logic class knows at least two members of the 
geometry class.
	
d.	 Every person loves at most one other person.
2.80	 If P(x) means x is a person, A(x, y) means x is a parent of y, G(x, y) means 
x is a grandparent of y, and x = y means x and y are identical, translate the 
following wfs into ordinary English.
	
i. (
)( ( )
[(
)( ( , )
(
)( ( ,
)
( , )))])
∀
⇒
∀
⇔∃
∧
x P x
y G y x
w A y w
A w x
	
ii.(
)( ( )
(
)(
)(
)(
)(
∀
⇒∃
∃
∃
∃
≠
∧
≠
∧
≠
∧
≠
∧
x P x
x
x
x
x
x
x
x
x
x
x
x
x
1
2
3
4
1
2
1
3
1
4
2
3
x
x
x
x
G x x
G x
x
G x
x
G x
x
y G y x
y
2
4
3
4
1
2
3
4
≠
∧
≠
∧
∧
∧
∧
∧∀
⇒
(
, )
(
, )
(
, )
(
, )
(
)( ( , )
=
∨
=
∨
=
∨
=
x
y
x
y
x
y
x
1
2
3
4)))
2.81	 Consider the wf
	
( )
(
)(
)(
)(
( )).
∗
∀
∀
∃
≠
∧
≠
∧
x
y
z z
x
z
y
A z
	
Show that (*) is true in a normal model M of a theory with equality if 
and only if there exist in the domain of M at least three things having 
property A(z).
2.82	 Let the language L  have the four predicate letters =, P, S, and L. Read 
u = v as u and v are identical, P(u) as u is a point, S(u) as u is a line, and 
L(u, v) as u lies on v. Let the theory of equality G of planar incidence 
geometry have, in addition to axioms (A1)–(A7), the following nonlogi-
cal axioms.
	
1.	
P(x) ⇒ ¬S(x)
	
2.	
L(x, y) ⇒ P(x) ∧ S(y)
	
3.	
S(x) ⇒ (∃y)(∃z)(y ≠ z ∧ L(y, x) ∧ L(z, x))
	
4.	
P(x) ∧ P(y) ∧ x ≠ y ⇒ (∃1z)(S(z) ∧ L(x, z) ∧ L(y, z))
	
5.	
(∃x)(∃y)(∃z)(P(x) ∧ P(y) ∧ P(z) ∧ ¬C (x, y, z))

102
Introduction to Mathematical Logic
	
where C (x, y, z) is the wf (∃u)(S(u) ∧ L(x, u) ∧ L(y, u) ∧ L(z, u)), which is 
read as x, y, z are collinear.
	
a.	
Translate (1)–(5) into ordinary geometric language.
	
b.	 Prove ⊢G (∀u)(∀v)(S(u) ∧ S(v) ∧ u ≠ v ⇒ (∀x)(∀y)(L(x, u) ∧ L(x, v) ∧ 
L(y, u) ∧ L(y, v) ⇒ x = y)), and translate this theorem into ordinary 
geometric language.
	
c.	
Let R(u, v) stand for S(u) ∧ S(v) ∧ ¬(∃w)(L(w, u) ∧ L(w, v)). Read R(u, v) 
as u and v are distinct parallel lines.
	
	
i.	
Prove: ⊢G R(u, v) ⇒ u ≠ v
	
	
ii.	
Show that there exists a normal model of G with a finite 
domain in which the following sentence is true:
	
(
)(
)( ( )
( )
( , )
(
)( ( , )
( , )))
∀
∀
∧
∧¬
⇒∃
∧
x
y S x
P y
L y x
z L y z
R z x
1
	
d.	 Show that there exists a model of G in which the following sen-
tence is true:
	
(
)(
)( ( )
( )
( , ))
∀
∀
∧
∧
≠
⇒¬
x
y S x
S y
x
y
R x y
2.9  Definitions of New Function Letters 
and Individual Constants
In mathematics, once we have proved, for any y1, …, yn, the existence of 
a unique object u that has a property B(u, y1, …, yn), we often introduce a 
new function letter f(y1, …, yn) such that B(f(y1, …, yn), y1, …, yn) holds for all 
y1, …, yn. In cases where we have proved the existence of a unique object u 
that satisfies a wf B(u) and B(u) contains u as its only free variable, then we 
introduce a new individual constant b such that B(b) holds. It is generally 
acknowledged that such definitions, though convenient, add nothing really 
new to the theory. This can be made precise in the following manner.
Proposition 2.28
Let K be a theory with equality. Assume that ⊢K (∃1u)B (u, y1, …, yn). Let K# 
be the theory with equality obtained by adding to K a new function letter f 
of n arguments and the proper axiom B (f(y1, …, yn), y1, …, yn),* as well as all 
*	 It is better to take this axiom in the form (∀u)(u = f(y1, …, yn) ⇒ B(u, y1, …, yn)), since f(y1, …, yn) 
might not be free for u in B(u, y1, …, yn).

103
First-Order Logic and Model Theory
instances of axioms (A1)–(A7) that involve f. Then there is an effective trans-
formation mapping each wf C of K# into a wf C # of K such that:
	
a.	If f does not occur in C, then C # is C.
	
b.	(¬ C)# is ¬ (C #).
	
c.	(C ⇒ D)# is C# ⇒ D#.
	
d.	((∀x)C)# is (∀x)(C #).
	
e.	⊢K#(C⇐ C #).
	
f.	If ⊢K#C, then ⊢K C #.
Hence, if C does not contain f and ⊢K
# C, then ⊢K C.
Proof
By a simple f-term we mean an expression f(t1, …, tn) in which t1, …, tn are terms 
that do not contain f. Given an atomic wf C of K#, let C  * be the result of replac-
ing the leftmost occurrence of a simple term f(t1, …, tn) in C by the first variable 
v not in C or B. Call the wf (∃v)(B (v, t1, …, tn) ∧ C *) the f-transform of C. If C does 
not contain f, then let C be its own f-transform. Clearly, ⊢K#(∃v)(B(v, t1, …, tn) ∧ 
C  *)⇐C. (Here, we use ⊢K (∃1u)B(u, y1, …, yn) and the axiom B (f(y1, …, yn), y1, …, 
yn) of K#.) Since the f-transform C ′ of C contains one less f than C and ⊢K#C ′⇔C, 
if we take successive f-transforms, eventually we obtain a wf C# that does not 
contain f and such that ⊢K#C  #⇔C. Call C  # the f-less transform of C. Extend the 
definition to all wfs of K# by letting ( ¬ D)# be  ¬ (D #),(D ⇒E)# be D #⇒E  #, and 
((∀ x)D)# be (∀ x)D#. Properties (a)–(e) of Proposition 2.28 are then obvious. 
To prove property (f), it suffices, by property (e), to show that, if C does not 
contain f and ⊢K#C, then ⊢K C. We may assume that C is a closed wf, since a wf 
and its closure are deducible from each other.
Assume that M is a model of K. Let M1 be the normal model obtained by 
contracting M. We know that a wf is true for M if and only if it is true for 
M1. Since ⊢K (∃1u)B (u, y1, …, yn), then, for any b1, …, bn in the domain of M1, 
there is a unique c in the domain of M1 such that M
n
c b
b
1
1
B [ ,
,
,
]
…
. If we 
define f1(b1, …, bn) to be c, then, taking f1 to be the interpretation of the func-
tion letter f, we obtain from M1 a model M# of K#. For the logical axioms of K# 
(including the equality axioms of K#) are true in any normal interpretation, 
and the axiom B (f(y1, …, yn), y1, …, yn) also holds in M# by virtue of the defi-
nition of f1. Since the other proper axioms of K# do not contain f and since 
they are true for M1, they are also true for M#. But ⊢K#C. Therefore, C is true 
for M#, but since C does not contain f, C is true for M1 and hence also for M. 
Thus, C is true for every model of K. Therefore, by Corollary 2.20(a), ⊢K C. 
(In the case where ⊢K (∃1u)B (u) and B (u) contains only u as a free variable, 
we form K# by adding a new individual constant b and the axiom B (b). Then 
the analogue of Proposition 2.28 follows from practically the same proof as 
the one just given.)

104
Introduction to Mathematical Logic
Exercise
2.83	 Find the f-less transforms of the following wfs.
	
a.	 (
)(
)(
( , , ( ,
,
,
))
( , ,
, )
)
∀
∃
…
⇒
…
=
x
y A x y f x y
y
f y x
x
x
n
1
3
1
	
b.	 A
f y
y
f y
y
x A x f y
y
n
n
n
1
1
1
1
1
1
2
1
( (
,
,
, (
,
,
)))
(
)
( , (
,
,
))
…
…
∧∃
…
−
Note that Proposition 2.28 also applies when we have introduced several 
new symbols f1, …, fm because we can assume that we have added each fi to 
the theory already obtained by the addition of f1, …, fi−1; then m successive 
applications of Proposition 2.28 are necessary. The resulting wf C  # of K can be 
considered an (f1, …, fm)-free transform of C into the language of K.
Examples
	
1.	In the elementary theory G of groups, one can prove (∃1y)x + y = 0. 
Then introduce a new function f of one argument, abbreviate f(t) by 
(−t), and add the new axiom x + (−x) = 0. By Proposition 2.28, we now 
are not able to prove any wf of G that we could not prove before. 
Thus, the definition of (−t) adds no really new power to the original 
theory.
	
2.	In the elementary theory F of fields, one can prove that (∃1y)((x ≠ 0 ∧ 
x · y = 1) ∨ (x = 0 ∧ y = 0)). We then introduce a new function letter g 
of one argument, abbreviate g(t) by t−1, and add the axiom (x ≠ 0 ∧ x · 
x−1 = 1) ∨ (x = 0 ∧ x−1 = 0), from which one can prove x ≠ 0 ⇒ x · x−1 = 1.
From the statement and proof of Proposition 2.28 we can see that, in theories 
with equality, only predicate letters are needed; function letters and indi-
vidual constants are dispensable. If fj
n is a function letter, we can replace it 
by a new predicate letter Ak
n+1 if we add the axiom (
)
( ,
,
,
)
∃
…
+
1
1
1
u A
u y
y
k
n
n . An 
individual constant is to be replaced by a new predicate letter Ak
1 if we add 
the axiom (
)
( )
∃1
1
u A u
k
.
Example
In the elementary theory G of groups, we can replace + and 0 by predicate 
letters A1
3 and A1
1 if we add the axioms (
)(
)(
)
(
,
,
)
∀
∀
∃
x
x
x A x x
x
1
2
1
3
1
3
1
2
3  and 
(
)
(
)
∃1
1
1
1
1
x A x , and if we replace axioms (a), (b), (c), and (g) by the following:
	
a′.	A x
x
u
A x u v
A x x
w
A w x
y
v
y
1
3
2
3
1
3
1
1
3
1
2
1
3
3
(
,
, )
(
, , )
(
,
,
)
( ,
, )
∧
∧
∧
⇒
=
	
b′.	A y
A x y z
z
x
1
1
1
3
( )
( , , )
∧
⇒
=
	
c′.	(
)(
)(
)(
( )
( , , )
)
∃
∀
∀
∧
⇒
=
y
u
v A u
A x y v
v
u
1
1
1
3
	
g′.	[
(
, , )
(
, , )
( ,
, )
( ,
,
)]
x
x
A x
y z
A x
y u
A y x v
A y x
w
z
1
2
1
3
1
1
3
2
1
3
1
1
3
2
=
∧
∧
∧
∧
⇒
= u
∧
=
v
w 

105
First-Order Logic and Model Theory
Notice that the proof of Proposition 2.28 is highly nonconstructive, since it 
uses semantical notions (model, truth) and is based upon Corollary 2.20(a), 
which was proved in a nonconstructive way. Constructive syntactical proofs 
have been given for Proposition 2.28 (see Kleene, 1952, § 74), but, in general, 
they are quite complex.
Descriptive phrases of the kind “the u such that B (u, y1, …, yn)” are 
very common in ordinary language and in mathematics. Such phrases 
are called definite descriptions. We let ιu(B (u, y1, …, yn)) denote the unique 
object u such that B (u, y1, …, yn) if there is such a unique object. If there 
is no such unique object, either we may let ιu(B (u, y1, …, yn)) stand for 
some fixed object, or we may consider it meaningless. (For example, we 
may say that the phrases “the present king of France” and “the smallest 
integer” are meaningless or we may arbitrarily make the convention that 
they denote 0.) There are various ways of incorporating these ι-terms in 
formalized theories, but since in most cases the same results are obtained 
by using new function letters or individual constants as above, and since 
they all lead to theorems similar to Proposition 2.28, we shall not discuss 
them any further here. For details, see Hilbert and Bernays (1934) and 
Rosser (1939, 1953).
2.10  Prenex Normal Forms
A wf (Q1y1) … (Qnyn)B, where each (Qiyi) is either (∀yi) or (∃yi), yi is different 
from yj for i ≠ j, and B contains no quantifiers, is said to be in prenex normal 
form. (We include the case n = 0, when there are no quantifiers at all.) We 
shall prove that, for every wf, we can construct an equivalent prenex nor-
mal form.
Lemma 2.29
In any theory, if y is not free in D, and C (x) and C (y) are similar, then the 
­following hold.
	
a.	⊢ ((∀x)C (x) ⇒ D) ⇔ (∃y)(C (y) ⇒ D)
	
b.	⊢ ((∃x)C (x) ⇒ D) ⇔ (∀y)(C (y) ⇒ D)
	
c.	⊢ (D ⇒ (∀x)C (x)) ⇔ (∀y)(D ⇒ C (y))
	
d.	⊢ ¬(D ⇒ (∃x)C (x)) ⇔ (∃y)(D ⇒ C (y))
	
e.	⊢ ¬(∀x)C ⇔ (∃x) ¬C
	
f.	⊢ ¬(∃x)C ⇔ (∀x) ¬C

106
Introduction to Mathematical Logic
Proof
For part (a):
	
1.	(∀x)C (x) ⇒ D	
Hyp
	
2.	¬(∃y)(C (y) ⇒ D)	
Hyp
	
3.	¬¬(∀y) ¬(C (y) ⇒ D)	
2, abbreviation
	
4.	(∀y) ¬(C (y) ⇒ D)	
3, negation elimination
	
5.	(∀y)(C (y) ∧ ¬D)	
4, tautology, Proposition 2.9(c)
	
6.	C (y) ∧ ¬D	
5, rule A4
	
7.	C (y)	
6, conjunction elimination
	
8.	(∀y)C (y)	
7, Gen
	
9.	(∀x)C (x)	
8, Lemma 2.11, Biconditional elimination
	 10.	D	
1, 9, MP
	 11.	¬D	
6, conjunction elimination
	 12.	D ∧ ¬D	
10, 11, conjunction introduction
	 13.	(∀x)C (x) ⇒ D, 	
1–12
	
	 ¬(∃y)(C (y) ⇒ D) ⊢ D ∧ ¬D
	 14.	(∀x)C (x) ⇒ D	
1–13, proof by contradiction
	
	 ⊢ (∃y)(C (y) ⇒ D)
	 15.	⊢ (∀x)C (x) ⇒	
1–14, Corollary 2.6
	
	 D ⇒ (∃y)(C (y) ⇒ D)
The converse is proven in the following manner.
	
1.	(∃y)(C (y) ⇒ D)	
Hyp
	
2.	(∀x)C (x)	
Hyp
	
3.	C (b) ⇒ D	
1, rule C
	
4.	C (b)	
2, rule A4
	
5.	D	
3, 4, MP
	
6.	(∃y)(C (y) ⇒ D), (∀x)C (x) ⊢C D	
1–5
	
7.	(∃y)(C (y) ⇒ D), (∀x)C (x) ⊢ D	
6, Proposition 2.10
	
8.	⊢ (∃y)(C (y) ⇒ D) ⇒ ((∀x)C (x) ⇒ D)	
1–7, Corollary 2.6 twice
Part (a) follows from the two proofs above by biconditional introduction. 
Parts (b)–(f) are proved easily and left as an exercise. (Part (f) is trivial, and 
(e) follows from Exercise 2.33(a); (c) and (d) follow easily from (b) and (a), 
respectively.)
Lemma 2.29 allows us to move interior quantifiers to the front of a wf. This 
is the essential process in the proof of the following proposition.
Proposition 2.30
There is an effective procedure for transforming any wf B into a wf C in 
prenex normal form such that ⊢ B ⇔ C.

107
First-Order Logic and Model Theory
Proof
We describe the procedure by induction on the number k of occurrences of 
connectives and quantifiers in B. (By Exercise 2.32(a,b), we may assume that 
the quantified variables in the prefix that we shall obtain are distinct.) If k = 0, then 
let C  be B itself. Assume that we can find a corresponding C for all wfs with 
k < n, and assume that B has n occurrences of connectives and quantifiers.
Case 1. If B is ¬D, then, by inductive hypothesis, we can construct a wf E 
in prenex normal form such that ⊢ D ⇔ E. Hence, ⊢ ¬D ⇔ ¬E by bicondi-
tional negation. Thus, ⊢ B ⇔ ¬E, and, by applying parts (e) and (f) of Lemma 
2.29 and the replacement theorem (Proposition 2.9(b)), we can find a wf C in 
prenex normal form such that ⊢ ¬E ⇔ C. Hence, ⊢ B ⇔ C.
Case 2. If B is D ⇒ E, then, by inductive hypothesis, we can find wfs D1 and 
E1 in prenex normal form such that ⊢ D ⇔ D1 and ⊢ E ⇔ E1. Hence, by a suit-
able tautology and MP, ⊢ (D ⇒ E) ⇔ (D1 ⇒ E1), that is, ⊢ B ⇔ (D1 ⇒ E1). Now, 
applying parts (a)–(d) of Lemma 2.29 and the replacement theorem, we can 
move the quantifiers in the prefixes of D1 and E1 to the front, obtaining a wf C 
in prenex normal form such that ⊢ B ⇔ C.
Case 3. If B is (∀x)D, then, by inductive hypothesis, there is a wf D1 in prenex 
normal form such that ⊢ D ⇔ D1; hence, ⊢ B ⇔ (∀x)D1 by Gen, Lemma 2.8, and 
MP. But (∀x)D1 is in prenex normal form.
Examples
	
1.	Let B be (
)(
( )
(
)(
( , )
(
)(
( , )))
∀
⇒∀
⇒¬ ∀
x A x
y A x y
z A y z
1
1
2
2
3
2
. By part (e) 
of Lemma 2.29: (
)(
( )
(
)[
( , )
(
)
( , )]).
∀
⇒∀
⇒∃¬
x A x
y A x y
z
A y z
1
1
2
2
3
2
	
	 By part (d): (
)(
( )
(
)(
)[
( , )
( , )]).
∀
⇒∀
∃
⇒¬
x A x
y
u A x y
A y u
1
1
2
2
3
2
	
	 By part (c): (
)(
)(
( )
(
)[
( , )
( , )]).
∀
∀
⇒∃
⇒¬
x
v A x
u A x v
A v u
1
1
2
2
3
2
	
	 By part (d): (
)(
)(
)(
( )
(
( , )
( ,
))).
∀
∀
∃
⇒
⇒¬
x
v
w A x
A x v
A v w
1
1
2
2
3
2
	
	 Changing bound variables: (
)(
)(
)(
( )
(
( , )
( , ))).
∀
∀
∃
⇒
⇒¬
x
y
z A x
A x y
A y z
1
1
2
2
3
2
	
2.	Let B be A x y
y A y
x A x
A y
1
2
1
1
1
1
2
1
( , )
(
)[
( )
([(
)
( )]
( ))].
⇒∃
⇒
∃
⇒
	
	 By part (b): A x y
y A y
u A u
A y
1
2
1
1
1
1
2
1
( , )
(
)(
( )
(
)[
( )
( )]).
⇒∃
⇒∀
⇒
	
	 By part (c): A x y
y
v A y
A v
A y
1
2
1
1
1
1
2
1
( , )
(
)(
)(
( )
[
( )
( )]).
⇒∃
∀
⇒
⇒
	
	 By part (d): (
)(
( , )
(
)[
( )
(
( )
( ))]).
∃
⇒∀
⇒
⇒
w A x y
v A w
A v
A w
1
2
1
1
1
1
2
1
	
	 By part (c): (
)(
)(
( , )
[
( )
(
( )
( ))]).
∃
∀
⇒
⇒
⇒
w
z A x y
A w
A z
A w
1
2
1
1
1
1
2
1
Exercise
2.84 Find prenex normal forms equivalent to the following wfs.
	
a.	[(
)(
( )
( , ))]
([(
)
( )]
(
)
( , ))
∀
⇒
⇒
∃
⇒∃
x A x
A x y
y A y
z A y z
1
1
1
2
1
1
1
2
	
b.	(
)
( , )
(
( )
(
)
( , ))
∃
⇒
⇒¬ ∃
x A x y
A x
u A x u
1
2
1
1
1
2

108
Introduction to Mathematical Logic
A predicate calculus in which there are no function letters or individual 
constants and in which, for any positive integer n, there are infinitely many 
predicate letters with n arguments, will be called a pure predicate calculus. 
For pure predicate calculi we can find a very simple prenex normal form 
theorem. A wf in prenex normal form such that all existential quantifiers 
(if any) precede all universal quantifiers (if any) is said to be in Skolem 
normal form.
Proposition 2.31
In a pure predicate calculus, there is an effective procedure assigning to each 
wf B another wf S  in Skolem normal form such that ⊢ B  if and only if ⊢ S 
(or, equivalently, by Gödel’s completeness theorem, such that B is logically 
valid if and only if S  is logically valid).
Proof
First we may assume that B is a closed wf, since a wf is provable if and only 
if its closure is provable. By Proposition 2.30 we may also assume that B is in 
prenex normal form. Let the rank r of B be the number of universal quanti-
fiers in B that precede existential quantifiers. By induction on the rank, we 
shall describe the process for finding Skolem normal forms. Clearly, when 
the rank is 0, we already have the Skolem normal form. Let us assume that 
we can construct Skolem normal forms when the rank is less than r, and let r 
be the rank of B. B can be written as follows: (∃y1) … (∃yn) (∀u)C (y1, …, yn, u), 
where C  (y1, …, yn, u) has only y1, …, yn, u as its free variables. Let Aj
n+1 be the 
first predicate letter of n + 1 arguments that does not occur in B. Construct 
the wf
	
(
) (
)
(
)([(
)( (
,
,
, )
(
,
,
, ))]
(
)
B
C
1
1
1
1
1
∃
… ∃
∀
…
⇒
…
⇒∀
+
y
y
u
y
y
u
A
y
y
u
u
n
n
j
n
n
A
y
y
u
j
n
n
+
…
1
1
(
,
,
, ))
Let us show that ⊢ B if and only if ⊢ B1. Assume ⊢ B1. In the proof of B1, 
replace all occurrences of A
z
z
w
j
n
n
+
…
1
1
( ,
,
,
) by C *(z1, …, zn, w)), where C * is 
obtained from C by replacing all bound variables having free occurrences 
in the proof by new variables not occurring in the proof. The result is a 
proof of
	
(
)
(
)(((
)( (
,
,
, )
(
,
,
, )))
(
)
(
,
∃
… ∃
∀
…
⇒
…
⇒∀
…
y
y
u
y
y
u
y
y
u
u
y
n
n
n
1
1
1
1
C
C
C
*
*
,
, ))
y
u
n

109
First-Order Logic and Model Theory
(C * was used instead of C so that applications of axiom (A4) would remain 
applications of the same axiom.) Now, by changing the bound variables back 
again, we see that
	
⊢(
)
(
)[(
)( (
,
,
, )
(
,
,
, ))
(
) (
,
,
∃
… ∃
∀
…
⇒
…
⇒∀
…
y
y
u
y
y
u
y
y
u
u
y
y
n
n
n
n
1
1
1
1
C
C
C
, u)]
Since ⊢ (∀u)(C (y1, …, yn, u) ⇒ C (y1, …, yn, u)), we obtain, by the replace-
ment theorem, ⊢ (∃y1) … (∃yn)(∀u)C (y1, …, yn, u), that is, ⊢ B. Conversely, 
assume that ⊢ B. By rule C, we obtain (∀u)C (b1, …, bn, u). But, ⊢ (∀u)D ⇒ 
((∀u)(D ⇒ E) ⇒ (∀u)E) (see Exercise 2.27 (a)) for any wfs D and E. Hence, 
⊢C
n
j
n
n
j
n
u
b
b
u
A
b
b
u
u A
(
)( ( ,
,
, )
( ,
,
, ))
(
)
∀
…
⇒
…
⇒∀
+
+
C
1
1
1
1  (b1, …, bn, u). So, 
by rule E4, 
⊢C
n
n
j
n
n
y
y
u
b
b
u
A
y
y
u
(
)
(
)([(
)(
,
,
,
,
,
,
)]
∃
… ∃
∀
…
(
) ⇒
…
(
) ⇒
+
1
1
1
1
C
(
)
(
,
,
, ))
∀
…
+
u A
y
y
u
j
n
n
1
1
, that is, ⊢C B1. By Proposition 2.10, ⊢ B1. A prenex nor-
mal form of B1 has the form B2: (∃y1) … (∃yn) (∃u)(Q1z1) … (Qszs)(∀v)G, where 
G has no quantifiers and (Q1z1) … (Qszs) is the prefix of C. [In deriving the 
prenex normal form, first, by Lemma 2.29(a), we pull out the first (∀u), which 
changes to (∃u); then we pull out of the first conditional the quantifiers in 
the prefix of C. By Lemma 2.29(a,b), this exchanges existential and universal 
quantifiers, but then we again pull these out of the second conditional of B1, 
which brings the prefix back to its original form. Finally, by Lemma 2.29(c), 
we bring the second (∀u) out to the prefix, changing it to a new quantifier 
(∀v).] Clearly, B2 has rank one less than the rank of B and, by Proposition 
2.30, ⊢ B1 ⇔ B2. But, ⊢ B if and only if ⊢ B1. Hence, ⊢ B if and only if ⊢ B2. By 
inductive hypothesis, we can find a Skolem normal form for B2, which is also 
a Skolem normal form for B.
Example
B: (∀x)(∀y)(∃z)C (x, y, z), where C contains no quantifiers
	
B
C
1
1
1
:(
)((
)(
) ( , , )
( ))
(
)
( )
∀
∀
∃
⇒
⇒∀
x
y
z
x y z
A x
x A x
j
j
, where Aj
1 is not in C.
We obtain the prenex normal form of B1:
	
(
)
(
)(
) ( , , )
( )
(
)
( )
∃
∀
∃
⇒

⇒∀
(
)
x
y
z
x y z
A x
x A x
j
j
C
1
1
	
2.29(a)
	
(
) (
) [(
) ( , , )
( )
(
)
( )
∃
∃
∃
⇒

⇒∀
(

x
y
z
x y z
A x
x A x
j
j
C
1
1
	
2.29(a)
	
(
) (
)(
)
( , , )
( )
(
)
( )
∃
∃
∀
⇒

⇒∀
(
)
x
y
z
x y z
A x
x A x
j
j
C
1
1
	
2.29(b)

110
Introduction to Mathematical Logic
	
(
)(
) (
)
( , , )
( )
(
)
( )
∃
∀
∀
⇒
(
) ⇒∀


x
y
z
x y z
A x
x A x
j
j
C
1
1
	
2.29(b)
	
(
)(
)(
)
( , , )
( )
(
)
( )
∃
∀
∃
⇒

⇒∀
(

x
y
z
x y z
A x
x A x
j
j
C
1
1
	
2.29(a)
	
(
)(
)(
)(
)
( , , )
( )
( )
∃
∀
∃
∀
⇒
(
) ⇒


x
y
z
v
x y z
A x
A v
j
j
C
1
1
	
2.29(c)
We repeat this process again: Let D(x, y, z, v) be ( ( , , )
( ))
( )
C x y z
A x
A v
j
j
⇒
⇒
1
1
. 
Let Ak
2 not occur in D. Form:
	
(
)
(
) (
)(
)(
( , , , ))
( , )
(
)
( , )
∃
∀
∃
∀
⇒



⇒∀
x
y
z
v
x y z v
A x y
y A x y
k
k
D
2
2
(
)
	
(
)(
)[[(
)(
)(
( , , , ))
( , )]
(
)
( , )]
∃
∃
∃
∀
⇒
⇒∀
x
y
z
v
x y z v
A x y
y A x y
k
k
D
2
2
	
2.29(a)
	
(
)(
)(
)(
)([(
( , , , )
( , )]
(
)
( , ))
∃
∃
∃
∃
⇒
⇒∀
x
y
z
v
x y z v
A x y
y A x y
k
k
D
2
2
	 2.29(a,b)
	
(
)(
)(
)(
)(
)([
( , , , )
( , )]
( ,
)]
∃
∃
∃
∀
∀
⇒
⇒
x
y
z
v
w
x y z v
A x y
A x w
k
k
D
2
2
	
2.29(c)
Thus, a Skolem normal form of B is:
	 (
)(
)(
)(
)(
)([(( ( , , )
( ))
( ))
( , )]
∃
∃
∃
∀
∀
⇒
⇒
⇒
x
y
z
v
w
x y z
A x
A v
A x y
j
j
k
C
1
1
2
⇒A x w
k
2( ,
))
Exercises
2.85	 Find Skolem normal forms for the following wfs.
	
a.	 ¬ ∃
⇒∀
∃
∀
(
)
( )
(
)(
)(
)
( , , )
x A x
u
y
x A u x y
1
1
1
3
	
b.	 (
)(
)(
)(
)
( , , , )
∀
∃
∀
∃
x
y
u
v A x y u v
1
4
2.86	 Show that there is an effective procedure that gives, for each wf B 
of a pure predicate calculus, another wf D of this calculus of the form 
(∀y1) … (∀yn)(∃z1) … (∃zm)C, such that C is quantifier-free, n, m ≥ 0, and 
B is satisfiable if and only if D is satisfiable. [Hint: Apply Proposition 
2.31 to ¬B.]
2.87	 Find a Skolem normal form S for (
)(
)
( , )
∀
∃
x
y A x y
1
2
 and show that it 
is not the case that ⊢S ⇔∀
∃
(
)(
)
( , )
x
y A x y
1
2
. Hence, a Skolem normal 
form for a wf B is not necessarily logically equivalent to B, in contra-
distinction to the prenex normal form given by Proposition 2.30.

111
First-Order Logic and Model Theory
2.11  Isomorphism of Interpretations: Categoricity of Theories
We shall say that an interpretation M of some language L  is isomorphic with 
an interpretation M* of L   if and only if there is a one–one correspondence g 
(called an isomorphism) of the domain D of M with the domain D* of M* 
such that:
	
1.	For any predicate letter Aj
n of L   and for any b1, …, bn in D, MA b
b
j
n
n
[ ,
,
]
1 …
 
if and only if M* A
b
b
j
n
n
[ (
),
,
(
)]
g
g
1 …
.
	
2.	For any function letter fj
n of L and for any b1, …, bn in D, 
g
g
g
((
) ( ,
,
))
(
)
( (
),
, (
))
f
b
b
f
b
b
j
n
n
j
n
n
M
M*
1
1
…
=
…
.
	
3.	For any individual constant aj of L, ɡ((aj)M) = (aj)M*.
The notation M ≈ M* will be used to indicate that M is isomorphic with M*. 
Notice that, if M ≈ M*, then the domains of M and M* must be of the same 
cardinality.
Proposition 2.32
If g is an isomorphism of M with M*, then:
	
a.	for any wf B of L, any sequence s = (b1, b2, …) of elements of the 
domain D of M, and the corresponding sequence ɡ(s) = (ɡ(b1), 
ɡ(b2), …), s satisfies B in M if and only if ɡ(s) satisfies B in M*;
	
b.	hence, ⊧M B if and only if ⊧M* B.
Proof
Part (b) follows directly from part (a). The proof of part (a) is by induction 
on the number of connectives and quantifiers in B and is left as an exercise.
From the definition of isomorphic interpretations and Proposition 2.32 we 
see that isomorphic interpretations have the same “structure” and, thus, dif-
fer in no essential way.
Exercises
2.88	 Prove that, if M is an interpretation with domain D and D* is a set that 
has the same cardinality as D, then one can define an interpretation M* 
with domain D* such that M is isomorphic with M*.
2.89	 Prove the following: (a) M is isomorphic with M. (b) If M1 is isomorphic 
with M2, then M2 is isomorphic with M1. (c) If M1 is isomorphic with M2 
and M2 is isomorphic with M3, then M1 is isomorphic with M3.

112
Introduction to Mathematical Logic
A theory with equality K is said to be 𝔪—categorical, where 𝔪 is a car-
dinal number, if and only if: any two normal models of K of cardinality m 
are isomorphic, and K has at least one normal model of cardinality 𝔪 (see 
Loś, 1954c).
Examples
	
1.	Let K2 be the pure theory of equality K1 (see page 96) to which has 
been added axiom (E2): (∃x1)(∃x2)(x1 ≠ x2 ∧ (∀x3)(x3 = x1 ∨ x3 = x2)). 
Then K2 is 2-categorical. Every normal model of K2 has exactly two 
elements. More generally, define (En) to be:
	
(
)
(
)
(
)(
)
∃
… ∃
∧
≠
∧∀
=
∨…∨
=




≤< ≤
x
x
x
x
y y
x
y
x
n
i j n
i
j
n
1
1
1
	
	 where ∧1≤i<j≤n xi ≠ xj is the conjunction of all wfs xi ≠ xj with 1 ≤ i < j 
≤ n. Then, if Kn is obtained from K1 by adding (En) as an axiom, Kn is 
n-categorical, and every normal model of Kn has exactly n elements.
	
2.	The theory K2 (see page 96) of densely ordered sets with neither first 
nor last element is ℵ0–categorical (see Kamke, 1950, p. 71: every denu-
merable normal model of K2 is isomorphic with the model consisting 
of the set of rational numbers under their natural ordering). But one 
can prove that K2 is not 𝔪–categorical for any 𝔪 different from ℵ0.
Exercises
2.90A	 Find a theory with equality that is not ℵ0–categorical but is 𝔪–categori-
cal for all 𝔪 > ℵ0. [Hint: Consider the theory GC of abelian groups 
(see page 96). For each integer n, let ny stand for the term (y + y) + ⋯ + y 
consisting of the sum of n ys. Add to GC the axioms (Bn):(∀x)(∃1y)(ny = x) 
for all n ≥ 2. The new theory is the theory of uniquely divisible abelian 
groups. Its normal models are essentially vector spaces over the field 
of rational numbers. However, any two vector spaces over the rational 
numbers of the same nondenumerable cardinality are isomorphic, and 
there are denumerable vector spaces over the rational numbers that are 
not isomorphic (see Bourbaki, 1947).]
2.91A	 Find a theory with equality that is 𝔪–categorical for all infinite cardi-
nals 𝔪. [Hint: Add to the theory GC of abelian groups the axiom (∀x1)
(2x1 = 0). The normal models of this theory are just the vector spaces 
over the field of integers modulo 2. Any two such vector spaces of the 
same cardinality are isomorphic (see Bourbaki, 1947).]
2.92	
Show that the theorems of the theory Kn in Example 1 above are pre-
cisely the set of all wfs of Kn that are true in all normal models of 
cardinality n.

113
First-Order Logic and Model Theory
2.93A	 Find two nonisomorphic densely ordered sets of cardinality 2
0
ℵ 
with neither first nor last element. (This shows that the theory K2 of 
Example 2 is not 2
0
ℵ–categorical.)
	Is there a theory with equality that is 𝔪–categorical for some noncountable 
cardinal 𝔪 but not 𝔪–categorical for some other noncountable cardinal 
𝔫? In Example 2 we found a theory that is only ℵ0-categorical; in Exercise 
2.90 we found a theory that is 𝔪–categorical for all infinite 𝔪 > ℵ0 but not 
ℵ0–­categorical, and in Exercise 2.91, a theory that is 𝔪–categorical for any 
infinite  𝔪. The elementary theory G of groups is not 𝔪–categorical  for 
any  infinite  𝔪. The problem is whether these four cases exhaust all the 
­possibilities. That this is so was proved by Morley (1965).
2.12  Generalized First-Order Theories: 
Completeness and Decidability*
If, in the definition of the notion of first-order language, we allow a non-
countable number of predicate letters, function letters, and individual con-
stants, we arrive at the notion of a generalized first-order language. The notions 
of interpretation and model extend in an obvious way to a generalized first-
order language. A generalized first-order theory in such a language is obtained 
by taking as proper axioms any set of wfs of the language. Ordinary first-
order theories are special cases of generalized first-order theories. The reader 
may easily check that all the results for first-order theories, through Lemma 
2.12, hold also for generalized first-order theories without any changes in 
the proofs. Lemma 2.13 becomes Lemma 2.13′: if the set of symbols of a gen-
eralized theory K has cardinality ℵα, then the set of expressions of K also 
can be well-ordered and has cardinality ℵα. (First, fix a well-ordering of the 
symbols of K. Second, order the expressions by their length, which is some 
positive integer, and then stipulate that if e1 and e2 are two distinct expres-
sions of the same length k, and j is the first place in which they differ, then e1 
precedes e2 if the jth symbol of e1 precedes the jth symbol of e2 according to the 
given well-ordering of the symbols of K.) Now, under the same assumption 
as for Lemma 2.13′, Lindenbaum’s Lemma 2.14′ can be proved for generalized 
theories much as before, except that all the enumerations (of the wfs Bi and of 
the theories Ji) are transfinite, and the proof that J is consistent and complete 
uses transfinite induction. The analogue of Henkin’s Proposition 2.17 runs 
as follows.
*	 Presupposed in parts of this section is a slender acquaintance with ordinal and cardinal 
numbers (see Chapter 4; or Kamke, 1950; or Sierpinski, 1958).

114
Introduction to Mathematical Logic
Proposition 2.33
If the set of symbols of a consistent generalized theory K has cardinality ℵα, 
then K has a model of cardinality ℵα.
Proof
The original proof of Lemma 2.15 is modified in the following way. Add 
ℵα new individual constants b1, b2, …, bλ, …. As before, the new theory 
K0 is consistent. Let F x
F x
i
i
1
1
(
),
,
(
),
(
)
…
…
<
λ
α
λ
λ
ω
 be a sequence consist-
ing of all wfs of K0 with exactly one free variable. Let (Sλ) be the sentence 
(
)
(
)
(
)
∃
¬
⇒¬
x
F x
F b
i
i
j
λ
λ
λ
λ
λ
, where the sequence b
b
b
j
j
j
1
2
,
,
,
…
…
λ
 of distinct indi-
vidual constants is chosen so that bjλ does not occur in F xi
β
β
(
)  for β ≤ λ. The 
new theory K∞, obtained by adding all the wfs (Sλ) as axioms, is proved to 
be consistent by a transfinite induction analogous to the inductive proof 
in Lemma 2.15. K∞ is a scapegoat theory that is an extension of K and con-
tains ℵα closed terms. By the extended Lindenbaum Lemma 2.14′, K∞ can 
be extended to a consistent, complete scapegoat theory J with ℵα closed 
terms. The same proof as in Lemma 2.16 provides a model M of J of cardi-
nality ℵα.
Corollary 2.34
	
a.	If the set of symbols of a consistent generalized theory with equality 
K has cardinality ℵα, then K has a normal model of cardinality less 
than or equal to ℵα.
	
b.	If, in addition, K has an infinite normal model (or if K has arbitrarily 
large finite normal models), then K has a normal model of any cardi-
nality ℵβ ≥ ℵα.
	
c.	In particular, if K is an ordinary theory with equality (i.e., ℵα = ℵ0) 
and K has an infinite normal model (or if K has arbitrarily large 
finite normal models), then K has a normal model of any cardinality 
ℵβ(β ≥ 0).
Proof
	
a.	The model guaranteed by Proposition 2.33 can be contracted to a 
normal model consisting of equivalence classes in a set of cardinal-
ity ℵα. Such a set of equivalence classes has cardinality less than or 
equal to ℵα.
	
b.	Assume ℵβ ≥ ℵα. Let b1, b2, … be a set of new individual constants of 
cardinality ℵβ, and add the axioms bλ ≠ bμ for λ ≠ μ. As in the proof 
of Corollary 2.27, this new theory is consistent and so, by (a), has a 

115
First-Order Logic and Model Theory
normal model of cardinality less than or equal to ℵβ (since the new 
theory has ℵβ new symbols). But, because of the axioms bλ ≠ bμ, the 
normal model has exactly ℵβ elements.
	
c.	This is a special case of (b).
Exercise
2.94	 If the set of symbols of a predicate calculus with equality K has 
­cardinality ℵα, prove that there is an extension K′ of K (with the same 
symbols as K) such that K′ has a normal model of cardinality ℵα, but K′ 
has no normal model of cardinality less than ℵα.
From Lemma 2.12 and Corollary 2.34(a,b), it follows easily that, if a gen-
eralized theory with equality K has ℵα symbols, is ℵβ-categorical for some 
β ≥ α, and has no finite models, then K is complete, in the sense that, for any 
closed wf B, either ⊢K B or ⊢K ¬B (Vaught, 1954). If not-⊢K B and not-⊢K ¬B, 
then the theories K′ = K + {¬B} and K′′ = K + {B} are consistent by Lemma 
2.12, and so, by Corollary 2.34(a), there are normal models M′ and M″ of K′ 
and K″, respectively, of cardinality less than or equal to ℵα. Since K has no 
finite models, M′ and M″ are infinite. Hence, by Corollary 2.34(b), there are 
normal models N′ and N″ of K′ and K″, respectively, of cardinality ℵβ. By the 
ℵβ-categoricity of K, N′ and N″ must be isomorphic. But, since ¬B is true in 
N′ and B is true in N′′, this is impossible by Proposition 2.32(b). Therefore, 
either ⊢K B or ⊢K ¬B.
In particular, if K is an ordinary theory with equality that has no 
finite models and is ℵβ-categorical for some β ≥ 0, then K is complete. 
As an example, consider the theory K2 of densely ordered sets with nei-
ther first nor last element (see page 96). K2 has no finite models and is 
ℵ0-categorical.
If an ordinary theory K is axiomatic (i.e., one can effectively decide whether 
any wf is an axiom) and complete, then K is decidable, that is, there is an 
effective procedure to determine whether any given wf is a theorem. To see 
this, remember (see page 84) that if a theory is axiomatic, one can effectively 
enumerate the theorems. Any wf B is provable if and only if its closure is 
provable. Hence, we may confine our attention to closed wfs B. Since K is 
complete, either B is a theorem or ¬B is a theorem, and, therefore, one or the 
other will eventually turn up in our enumeration of theorems. This provides 
an effective test for theoremhood. Notice that, if K is inconsistent, then every 
wf is a theorem and there is an obvious decision procedure; if K is consistent, 
then not both B and ¬B can show up as theorems and we need only wait until 
one or the other appears.
If an ordinary axiomatic theory with equality K has no finite models and is 
ℵβ-categorical for some β ≥ 0, then, by what we have proved, K is decidable. 
In particular, the theory K2 discussed above is decidable.

116
Introduction to Mathematical Logic
In certain cases, there is a more direct method of proving completeness 
or decidability. Let us take as an example the theory K2 of densely ordered 
sets with neither first nor last element. Langford (1927) has given the fol-
lowing procedure for K2. Consider any closed wf B. By Proposition 2.30, 
we can assume that B is in prenex normal form (Q1y1) … (Qnyn)C, where 
C contains no quantifiers. If (Qnyn) is (∀yn), replace (∀yn)C by ¬(∃yn)¬C. In 
all cases, then, we have, at the right side of the wf, (∃yn)D, where D has no 
quantifiers. Any negation x ≠ y can be replaced by x < y ∨ y < x, and ¬(x < y) 
can be replaced by x = y ∨ y < x. Hence, all negation signs can be eliminated 
from D. We can now put D into disjunctive normal form, that is, a disjunc-
tion of conjunctions of atomic wfs (see Exercise 1.42). Now (∃yn)(D1 ∨ D2 ∨ 
… ∨ Dk) is equivalent to (∃yn)D1 ∨ (∃yn)D2 ∨ … ∨ (∃yn)Dk. Consider each (∃yn)
Di separately. Di is a conjunction of atomic wfs of the form t < s and t = s. If 
Di does not contain yn, just erase (∃yn). Note that, if a wf E does not contain 
yn, then (∃yn)(E ∧ F  ) may be replaced by E ∧ (∃yn)F. Hence, we are reduced 
to the consideration of (∃yn)F, where F is a conjunction of atomic wfs of the 
form t < s or t = s, each of which contains yn. Now, if one of the conjuncts is 
yn = z for some z different from yn, then replace in F  all occurrences of yn by 
z and erase (∃yn). If we have yn = yn alone, then just erase (∃yn). If we have 
yn = yn as one conjunct among others, then erase yn = yn. If F  has a conjunct 
yn < yn, then replace all of (∃yn)F  by yn < yn. If F  consists of yn < z1 ∧ … ∧ yn 
< zj ∧ u1 < yn ∧ … ∧ um < yn, then replace (∃yn)F  by the conjunction of all the 
wfs ui < zp for 1 ≤ i ≤ m and 1 ≤ p ≤ j. If all the uis or all the zps are missing, 
replace (∃yn)F   by yn = yn. This exhausts all possibilities and, in every case, 
we have replaced (∃yn)F  by a wf containing no quantifiers, that is, we have 
eliminated the quantifier (∃yn). We are left with (Q1y1) … (Qn−1yn−1)G, where G 
contains no quantifiers. Now we apply the same procedure successively to 
(Qn−1yn−1), …, (Q1y1). Finally we are left with a wf without quantifiers, built 
up of wfs of the form x = x and x < x. If we replace x = x by x = x ⇒ x = x 
and x < x by ¬(x = x ⇒ x = x), the result is either an instance of a tautology 
or the negation of such an instance. Hence, by Proposition 2.1, either the 
result or its negation is provable. Now, one can easily check that all the 
replacements we have made in this whole reduction procedure applied to B 
have been replacements of wfs H  by other wfs U such that ⊢K H ⇔ U. Hence, 
by the replacement theorem, if our final result R is provable, then so is the 
original wf B, and, if ¬R is provable, then so is ¬B. Thus, K2 is complete and 
decidable.
The method used in this proof, the successive elimination of existential 
quantifiers, has been applied to other theories. It yields a decision procedure 
(see Hilbert and Bernays, 1934, §5) for the pure theory of equality K1 (see 
page 96). It has been applied by Tarski (1951) to prove the completeness and 
decidability of elementary algebra (i.e., of the theory of real-closed fields; see 
van der Waerden, 1949) and by Szmielew (1955) to prove the decidability of 
the theory GC of abelian groups.

117
First-Order Logic and Model Theory
Exercises
2.95	 (Henkin, 1955) If an ordinary theory with equality K is finitely axi-
omatizable and ℵα-categorical for some α, prove that K is decidable.
2.96	 a.	 Prove the decidability of the pure theory K1 of equality.
	
b.	 Give an example of a theory with equality that is ℵα-categorical for 
some α, but is incomplete.
2.12.1  Mathematical Applications
	
1.	Let F be the elementary theory of fields (see page 96). We let n 
stand for the term 1 + 1 + ⋯ + 1, consisting of the sum of n 1s. Then 
the assertion that a field has characteristic p can be expressed by 
the wf Cp: p = 0. A field has characteristic 0 if and only if it does 
not have characteristic p for any prime p. Then for any closed wf 
B of F that is true for all fields of characteristic 0, there is a prime 
number q such that B is true for all fields of characteristic greater 
than or equal to q. To see this, notice that, if F0 is obtained from 
F by adding as axioms ¬C2, ¬C3, …, ¬Cp, … (for all primes p), the 
normal models of F0 are the fields of characteristic 0. Hence, by 
Exercise 2.77, ⊢F0 B . But then, for some finite set of new axioms 
¬
¬
¬
C
C
C
q
q
qn
1
2
,
,
,
…
, we have ¬
¬
¬
C
C
C
B
q
q
qn
1
2
,
,
,
.
…
⊢F
 Let q be a prime 
greater than all q1, …, qn, In every field of characteristic greater 
than or equal to q, the wfs ¬
¬
¬
C
C
C
q
q
qn
1
2
,
,
,
…
 are true; hence, B is also 
true. (Other applications in algebra may be found in A. Robinson 
(1951) and Cherlin (1976).)
	
2.	A graph may be considered as a set with a symmetric binary rela-
tion R (i.e., the relation that holds between two vertices if and 
only if they are connected by an edge). Call a graph k-colorable 
if and only if the graph can be divided into k disjoint (possibly 
empty) sets such that no two elements in the same set are in the 
relation R. (Intuitively, these sets correspond to k colors, each color 
being painted on the points in the corresponding set, with the pro-
viso that two points connected by an edge are painted different 
colors.) Notice that any subgraph of a k-colorable graph is k-color-
able. Now we can show that, if every finite subgraph of a graph G 
is k-colorable, and if G can be well-ordered, then the whole graph 
G is k-colorable. To prove this, construct the following generalized 
theory with equality K (Beth, 1953). There are two binary predi-
cate letters, A1
2( )
=  and A2
2 (corresponding to the relation R on G); 
there are k monadic predicate letters A
Ak
1
1
1
,
,
…
 (corresponding to 
the k subsets into which we hope to divide the graph); and there 
are individual constants ac, one for each element c of the graph G. 

118
Introduction to Mathematical Logic
As proper axioms, in addition to the usual assumptions (A6) and 
(A7), we have the following wfs:
	
I.	¬A x x
2
2( , ) 	
(irreflexivity of R)
	
II.	A x y
A y x
2
2
2
2
( , )
( , )
⇒
	
(symmetry of R)
	
III.	(
)(
( )
( )
( ))
∀
∨
∨
∨
x A x
A x
A x
k
1
1
2
1
1
…
	 (division into k classes)
	
IV.	(
)
(
( )
( ))
∀
¬
∧
x
A x
A x
j
i
1
1
	
(disjointness of the k classes)
	
	 	
for 1 ≤ i < j ≤ k	
V.	(
)(
)(
( )
( )
∀
∀
∧
⇒
x
y A x
A y
i
i
1
1
	
(two elements of the same
	
	 ¬
≤≤
A x y
i
k
2
2
1
( , )) for
	
class are not in the relation R)
	
VI.	ab ≠ ac,	
for any two distinct elements b 
and c of G
	
VII.	A a a
b
c
2
2(
,
), ,	
if R(b, c) holds in G
Now, any finite set of these axioms involves only a finite number of the indi-
vidual constants a
a
c
cn
1,
,
…
, and since the corresponding subgraph {c1, …, cn}
is, by assumption, k-colorable, the given finite set of axioms has a model 
and is, therefore, consistent. Since any finite set of axioms is consistent, K 
is consistent. By Corollary 2.34(a), K has a normal model of cardinality less 
than or equal to the cardinality of G. This model is a k-colorable graph and, 
by (VI)–(VII), has G as a subgraph. Hence G is also k-colorable. (Compare this 
proof with a standard mathematical proof of the same result by de Bruijn and 
Erdös (1951). Generally, use of the method above replaces complicated appli-
cations of Tychonoff’s theorem or König’s Unendlichkeits lemma.)
Exercises
2.97A	(Loś, 1954b) A group B is said to be orderable if there exists a binary 
relation R on B that totally orders B such that, if xRy, then (x + z)
R(y + z) and (z + x)R(z + y). Show, by a method similar to that used 
in Example 2 above, that a group B is orderable if and only if every 
finitely generated subgroup is orderable (if we assume that the set B 
can be well-ordered).
2.98A	Set up a theory for algebraically closed fields of characteristic p(≥ 0) by 
adding to the theory F of fields the new axioms Pn, where Pn states that 
every nonconstant polynomial of degree n has a root, as well as axioms 
that determine the characteristic. Show that every wf of F that holds for 
one algebraically closed field of characteristic 0 holds for all of them. 
[Hint: This theory is ℵβ-categorical for β > 0, is axiomatizable, and has 
no finite models. See A. Robinson (1952).]
2.99	 By ordinary mathematical reasoning, solve the finite marriage problem. 
Given a finite set M of m men and a set N of women such that each man 
knows only a finite number of women and, for 1 ≤ k ≤ m, any subset 

119
First-Order Logic and Model Theory
of M having k elements knows at least k women of N (i.e., there are at 
least k women in N who know at least one of the k given men), then it is 
possible to marry (monogamously) all the men of M to women in N so 
that every man is married to a women whom he knows. [Hint (Halmos 
and Vaughn, 1950): m = 1 is trivial. For m > 1, use induction, consider-
ing the cases: (I) for all k with 1 ≤ k < m, every set of k men knows at 
least k + 1 women; and (II) for some k with 1 ≤ k < m, there is a set of k 
men knowing exactly k women.] Extend this result to the infinite case, 
that is, when M is infinite and well-orderable and the assumptions 
above hold for all finite k. [Hint: Construct an appropriate generalized 
theory with equality, analogous to that in Example 2 above, and use 
Corollary 2.34(a).]
2.100	Prove that there is no generalized theory with equality K, having one 
predicate letter < in addition to =, such that the normal models of K are 
exactly those normal interpretations in which the interpretation of < is 
a well-ordering of the domain of the interpretation.
Let B be a wf in prenex normal form. If B is not closed, form its closure 
instead. Suppose, for example, B is (∃y1)(∀y2)(∀y3)(∃y4)(∃y5)(∀y6)C (y1, y2, y3, 
y4, y5, y6), where C contains no quantifiers. Erase (∃y1) and replace y1 in C  by 
a new individual constant b1: (∀y2)(∀y3)(∃y4)(∃y5)(∀y6) C (b1, y2, y3, y4, y5, y6). 
Erase (∀y2) and (∀y3), obtaining (∃y4)(∃y5)(∀y6)C (b1, y2, y3, y4, y5, y6). Now 
erase (∃y4) and replace y4 in C  by g(y2, y3), where g is a new function letter: 
(∃y5)(∀y6)C (b1, y2, y3, g(y2, y3), y5, y6). Erase (∃y5) and replace y5 by h(y2, y3), 
where h is another new function letter: (∀y6)C (b1, y2, y3, g(y2, y3), h(y2, y3), y6). 
Finally, erase (∀y6). The resulting wf C (b1, y2, y3, g(y2, y3), h(y2, y3), y6) con-
tains no quantifiers and will be denoted by B*. Thus, by introducing new 
function letters and individual constants, we can eliminate the quantifiers 
from a wf.
Examples
	
1.	If B is (∀y1)(∃y2)(∀y3)(∀y4)(∃y5)C (y1, y2, y3, y4, y5), where C is quantifier-
free, then B* is of the form C (y1, g(y1), y3, y4, h(y1, y3, y4)).
	
2.	If B is (∃y1)(∃y2)(∀y3)(∀y4)(∃y5)C (y1, y2, y3, y4, y5), where C is quantifier-
free, then B* is of the form C (b, c, y3, y4, g(y3, y4)).
Notice that B * ⊢ B, since we can put the quantifiers back by applications 
of Gen and rule E4. (To be more precise, in the process of obtaining B*, we 
drop all quantifiers and, for each existentially quantified variable yi, we 
substitute a term g(z1, …, zk), where g is a new function letter and z1, …, zk 
are the variables that were universally quantified in the prefix preceding 
(∃yi). If there are no such variables z1, …, zk, we replace yi by a new indi-
vidual constant.)

120
Introduction to Mathematical Logic
Proposition 2.35 (Second ε-Theorem)
(Rasiowa, 1956; Hilbert and Bernays, 1939) Let K be a generalized theory. 
Replace each axiom B of K by B*. (The new function letters and individual 
constants introduced for one axiom are to be different from those introduced 
for another axiom.) Let K* be the generalized theory with the proper axi-
oms B*. Then:
	
a.	If D is a wf of K and ⊢K*D , then ⊢K D.
	
b.	K is consistent if and only if K* is consistent.
Proof
	
a.	Let D be a wf of K such that ⊢K*D . Consider the ordinary theory K° 
whose axioms B1, …, Bn are such that B1*, …, Bn* are the axioms used 
in the proof of D. Let K○* be the theory whose axioms are B1*, …, Bn*. 
Hence ⊢K*D . Assume that M is a denumerable model of K°. We may 
assume that the domain of M is the set P of positive integers (see 
Exercise 2.88). Let B be any axiom of K°. For example, suppose that B 
has the form (∃y1)(∀y2)(∀y3)(∃y4)C (y1, y2, y3, y4), where C is quantifier-
free. B* has the form C (b, y2, y3, g(y2, y3)). Extend the model M step by 
step in the following way (noting that the domain always remains P); 
since B is true for M, (∃y1)(∀y2)(∀y3) (∃y4)C (y1, y2, y3, y4) is true for M. 
Let the interpretation b* of b be the least positive integer y1 such that 
(∀y2)(∀y3)(∃y4) C (y1, y2, y3, y4) is true for M. Hence, (∃y4)C (b, y2, y3, y4) is 
true in this extended model. For any positive integers y2 and y3, let 
the interpretation of g(y2, y3) be the least positive integer y4 such that 
C (b, y2, y3, y4) is true in the extended model. Hence, C  (b, y2, y3, g(y2, y3)) 
is true in the extended model. If we do this for all the axioms B of K°, 
we obtain a model M* of K°*. Since ⊢K°*D D
,
 is true for M*. Since M* 
differs from M only in having interpretations of the new individual 
constants and function letters, and since D does not contain any of 
those symbols, D is true for M. Thus, D is true in every denumerable 
model of K°. Hence, ⊢K° D, by Corollary 2.20(a). Since the axioms of 
K° are axioms of K, we have ⊢K D. (For a constructive proof of an 
equivalent result, see Hilbert and Bernays (1939).)
	
b.	Clearly, K* is an extension of K, since B * ⊢ B. Hence, if K* is consis-
tent, so is K. Conversely, assume K is consistent. Let D be any wf of 
K. If K* is inconsistent, ⊢K*D ∧ ¬ D. By (a), ⊢K D ∧ ¬D, contradicting the 
consistency of K.
Let us use the term generalized completeness theorem for the proposition that 
every consistent generalized theory has a model. If we assume that every set 
can be well-ordered (or, equivalently, the axiom of choice), then the general-
ized completeness theorem is a consequence of Proposition 2.33.

121
First-Order Logic and Model Theory
By the maximal ideal theorem (MI) we mean the proposition that every proper 
ideal of a Boolean algebra can be extended to a maximal ideal.* This is equiva-
lent to the Boolean representation theorem, which states that every Boolean 
algebra is isomorphic to a Boolean algebra of sets (Compare Stone 1936). For 
the theory of Boolean algebras, see Sikorski (1960) or Mendelson (1970). The 
usual proofs of the MI theorem use the axiom of choice, but it is a remarkable 
fact that the MI theorem is equivalent to the generalized completeness theo-
rem, and this equivalence can be proved without using the axiom of choice.
Proposition 2.36
(Loś, 1954a; Rasiowa and Sikorski, 1951, 1952) The generalized completeness 
theorem is equivalent to the maximal ideal theorem.
Proof
	
a.	Assume the generalized completeness theorem. Let B be a Boolean 
algebra. Construct a generalized theory with equality K having the 
binary function letters ∪ and ∩, the singulary function letter f1
1 [we 
denote f
t
1
1( ) by t ], predicate letters=and A1
1, and, for each element b 
in B, an individual constant ab. By the complete description of B, we 
mean the following sentences: (i) ab ≠ ac if b and c are distinct ele-
ments of B; (ii) ab ∪ ac = ad if b, c, d are elements of B such that b ∪ c = d 
in B; (iii) ab ∩ ac = ae if b, c, e are elements of b such that b ∩ c = e in B; 
and (iv) a
a
b
c
=
 if b and c are elements of B such that b
c
=  in B, where b 
denotes the complement of b. As axioms of K we take a set of axioms 
for a Boolean algebra, axioms (A6) and (A7) for equality, the complete 
description of B, and axioms asserting that A1
1 determines a maxi-
mal ideal (i.e., A x
x
1
1(
)
∩
, A x
A y
A x
y
1
1
1
1
1
1
( )
( )
(
),
∧
⇒
∪
 A x
A x
y
1
1
1
1
( )
(
),
⇒
∩
 
A x
A x
1
1
1
1
( )
( )
∨
, and ¬
∪
A x
x
1
1(
)). Now K is consistent, for, if there were 
a proof in K of a contradiction, this proof would contain only a 
finite number of the symbols ab, ac, …—say, a
a
b
bn
1,
,
…
. The elements 
b1, …, bn generate a finite subalgebra B′ of B. Every finite Boolean 
algebra clearly has a maximal ideal. Hence, B′ is a model for the wfs 
that occur in the proof of the contradiction, and therefore the contra-
diction is true in B′, which is impossible. Thus, K is consistent and, by 
the generalized completeness theorem, K has a model. That model 
can be contracted to a normal model of K, which is a Boolean alge-
bra A with a maximal ideal I. Since the complete description of B is 
included in the axioms of K, B is a subalgebra of A, and then I ∩ B is 
a maximal ideal in B.
*	 Since {0} is a proper ideal of a Boolean algebra, this implies (and is implied by) the proposition 
that every Boolean algebra has a maximal ideal.

122
Introduction to Mathematical Logic
	
b.	Assume the maximal ideal theorem. Let K be a consistent gener-
alized theory. For each axiom B of K, form the wf B* obtained by 
constructing a prenex normal form for B and then eliminating the 
quantifiers through the addition of new individual constants and 
function letters (see the example preceding the proof of Proposition 
2.35). Let K# be a new theory having the wfs B*, plus all instances of 
tautologies, as its axioms, such that its wfs contain no quantifiers and 
its rules of inference are modus ponens and a rule of substitution 
for variables (namely, substitution of terms for variables). Now, K# is 
consistent, since the theorems of K# are also theorems of the consis-
tent K* of Proposition 2.35. Let B be the Lindenbaum algebra deter-
mined by K# (i.e., for any wfs C and D, let C Eq D mean that ⊢K# C  ⇔ D; 
Eq is an equivalence relation; let [C] be the equivalence class of C; 
define [C] ∪ [D] = [C ∨ D], [ ]
[
]
[
], [ ]
[
]
C
D
C
D
C
C
∩
=
∧
= ¬
; under these 
operations, the set of equivalence classes is a Boolean algebra, called 
the Lindenbaum algebra of K#). By the maximal ideal theorem, let I 
be a maximal ideal in B. Define a model M of K# having the set of 
terms of K# as its domain; the individual constants and function let-
ters are their own interpretations, and, for any predicate letter Aj
n, we 
say that A t
t
j
n
n
( ,
,
)
1 …
 is true in M if and only if [
( ,
,
)]
A t
t
j
n
n
1 …
 is not 
in I. One can show easily that a wf C of K# is true in M if and only if 
[C] is not in I. But, for any theorem D of K#, [D] = 1, which is not in I. 
Hence, M is a model for K#. For any axiom B of K, every substitution 
instance of B*(y1, …, yn) is a theorem in K#; therefore, B*(y1, …, yn) is 
true for all y1, …, yn in the model. It follows easily, by reversing the 
process through which B* arose from B, that B is true in the model. 
Hence, M is a model for K.
The maximal ideal theorem (and, therefore, also the generalized complete-
ness theorem) turns out to be strictly weaker than the axiom of choice (see 
Halpern, 1964).
Exercise
2.101	 Show that the generalized completeness theorem implies that every 
set can be totally ordered (and, therefore, that the axiom of choice 
holds for any set of nonempty disjoint finite sets).
The natural algebraic structures corresponding to the propositional calcu-
lus are Boolean algebras (see Exercise 1.60, and Rosenbloom, 1950, Chapters 
1 and 2). For first-order theories, the presence of quantifiers introduces more 
algebraic structure. For example, if K is a first-order theory, then, in the cor-
responding Lindenbaum algebra B, [(∃x)B(x)] = Σt[B(t)], where Σt indicates 
the least upper bound in B, and t ranges over all terms of K that are free 
for x in B(x). Two types of algebraic structure have been proposed to serve 

123
First-Order Logic and Model Theory
as algebraic counterparts of quantification theory. The first, cylindrical alge-
bras, have been studied extensively by Tarski, Thompson, Henkin, Monk, 
and others (see Henkin et al., 1971). The other approach is the theory of poly-
adic algebras, invented and developed by Halmos (1962).
2.13  Elementary Equivalence: Elementary Extensions
Two interpretations M1 and M2 of a generalized first-order language L  are said 
to be elementarily equivalent (written M1 ≡ M2) if the sentences of L  true for M1 are 
the same as the sentences true for M2. Intuitively, M1 ≡ M2 if and only if M1 and 
M2 cannot be distinguished by means of the language L. Of course, since L   is a 
generalized first-order language, L   may have nondenumerably many symbols.
Clearly, (1) M ≡ M; (2) if M1 ≡ M2, then M2 ≡ M1; (3) if M1 ≡ M2 and M2 ≡ M3, 
then M1 ≡ M3.
Two models of a complete theory K must be elementarily equivalent, since 
the sentences true in these models are precisely the sentences provable in K. 
This applies, for example, to any two densely ordered sets without first or 
last elements (see page 115).
We already know, by Proposition 2.32(b), that isomorphic models are ele-
mentarily equivalent. The converse, however, is not true. Consider, for exam-
ple, any complete theory K that has an infinite normal model. By Corollary 
2.34(b), K has normal models of any infinite cardinality ℵα. If we take two 
normal models of K of different cardinality, they are elementarily equivalent 
but not isomorphic. A concrete example is the complete theory K2 of densely 
ordered sets that have neither first nor last element. The rational numbers 
and the real numbers, under their natural orderings, are elementarily equiv-
alent nonisomorphic models of K2.
Exercises
2.102	 Let K∞, the theory of infinite sets, consist of the pure theory K1 of 
equality plus the axioms Bn, where Bn asserts that there are at least n 
elements. Show that any two models of K∞ are elementarily equiva-
lent (see Exercises 2.66 and 2.96(a)).
2.103D	 If M1 and M2 are elementarily equivalent normal models and M1 is 
finite, prove that M1 and M2 are isomorphic.
2.104	 Let K be a theory with equality having ℵα symbols.
	
a.	 Prove that there are at most 2ℵα models of K, no two of which are 
elementarily equivalent.
	
b.	 Prove that there are at most 2ℵλ mutually nonisomorphic models 
of K of cardinality ℵβ, where γ is the maximum of α and β.

124
Introduction to Mathematical Logic
2.105	 Let M be any infinite normal model of a theory with equality K hav-
ing ℵα symbols. Prove that, for any cardinal ℵγ ≥ ℵα, there is a normal 
model M* of K of cardinality ℵα such that M ≡ M*.
A model M2 of a language L is said to be an extension of a model M1 of L 
(written M1 ⊆ M2)* if the following conditions hold:
	
1.	 The domain D1 of M1 is a subset of the domain D2 of M2.
	
2.	 For any individual constant c of L, cM2 = cM1, where cM2 and cM1 are 
the interpretations of c in M2 and M1.
	
3.	 For any function letter fj
n of L and any b1,…, bn in D1, 
(
)
( ,
,
)
(
)
( ,
,
).
f
b
b
f
b
b
j
n
n
j
n
n
M
M
2
1
1
1
…
=
…
	
4.	 For any predicate letter Aj
n  of L and any b1, …, bn in D1, M1
1
A b
b
j
n
n
[ ,
,
]
…
 
if and only if M2
1
A b
b
j
n
n
[ ,
,
]
…
.
When M1 ⊆ M2, one also says that M1 is a substructure (or submodel) of M2.
Examples
	
1.	If L  contains only the predicate letters = and <, then the set of ratio-
nal numbers under its natural ordering is an extension of the set of 
integers under its natural ordering.
	
2.	If L  is the language of field theory (with the predicate letter =, func-
tion letters + and ×, and individual constants 0 and 1), then the field 
of real numbers is an extension of the field of rational numbers, the 
field of rational numbers is an extension of the ring of integers, and 
the ring of integers is an extension of the “semiring” of nonnegative 
integers. For any fields F1 and F2, F1 ⊆ F2 if and only if F1 is a subfield 
of F2 in the usual algebraic sense.
Exercises
2.106	 Prove:
	
a.	 M ⊆ M;
	
b.	 if M1 ⊆ M2 and M2 ⊆ M3, then M1 ⊆ M3;
	
c.	 If M1 ⊆ M2 and M2 ⊆ M1, then M1 = M2.
2.107	 Assume M1 ⊆ M2.
	
a.	 Let B(x1, …, xn) be a wf of the form (∀y1) … (∀ym)C (x1, …, xn, y1, …, ym), 
where C is quantifier-free. Show that, for any b1, …, bn in the domain 
of M1, if M2 B [ ,
,
]
b
bn
1 …
, then M1 B [ ,
,
]
b
bn
1 …
. In particular, any 
sentence (∀y1) … (∀ym) C (y1, …, ym), where C is quantifier-free, is true 
in M1 if it is true in M2.
*	 The reader will have no occasion to confuse this use of ⊆ with that for the inclusion relation.

125
First-Order Logic and Model Theory
	
b.	 Let B(x1, …, xn) be a wf of the form (∃y1) … (∃ym)C (x1, …, xn, y1, …, ym), 
where C is quantifier-free. Show that, for any b1, …, bn in the domain 
of M1, if M1 B [ ,
,
]
b
bn
1 …
, then M2 B [ ,
,
]
b
bn
1 …
. In particular, any 
sentence (∃y1) … (∃ym) C (y1, …, ym), where C is quantifier-free, is true 
in M2 if it is true in M1.
2.108	 a.	 Let K be the predicate calculus of the language of field theory. Find 
a model M of K and a nonempty subset X of the domain D of M 
such that there is no substructure of M having domain X.
	
b.	 If K is a predicate calculus with no individual constants or func-
tion letters, show that, if M is a model of K and X is a subset of the 
domain D of M, then there is one and only one substructure of M 
having domain X.
	
c.	 Let K be any predicate calculus. Let M be any model of K and let 
X be any subset of the domain D of M. Let Y be the intersection of 
the domains of all submodels M* of M such that X is a subset of the 
domain DM* of M*. Show that there is one and only one submodel of 
M having domain Y. (This submodel is called the submodel generated 
by X.)
A somewhat stronger relation between interpretations than “extension” is 
useful in model theory. Let M1 and M2 be models of some language L. We say 
that M2 is an elementary extension of M1 (written M1 ≤e M2) if (1) M1 ⊆ M2 and 
(2) for any wf B(y1, …, yn) of L and for any b1, …, bn in the domain D1 of M1, 
M1
1
B [ ,
,
]
b
bn
…
 if and only if M2
1
B [ ,
,
]
b
bn
…
. (In particular, for any sentence 
B of L, B is true for M1 if and only if B is true for M2.) When M1 ≤e M2, we shall 
also say that M1 is an elementary substructure (or elementary submodel) of M2.
It is obvious that, if M1 ≤e M2, then M1 ⊆ M2 and M1 ≡ M2. The converse is not 
true, as the following example shows. Let G be the elementary theory of groups 
(see page 96). G has the predicate letter =, function letter +, and individual con-
stant 0. Let I be the group of integers and E the group of even integers. Then E ⊆ I 
and I ≅ E. (The function g such that g(x) = 2x for all x in I is an isomorphism 
of I with E.) Consider the wf B(y): (∃x)(x + x = y). Then ⊧I B[2], but not-⊧E B[2]. Thus, 
I is not an elementary extension of E. (This example shows the stronger result 
that even assuming M1 ⊆ M2 and M1 ≅ M2 does not imply M1 ≤e M2.)
The following theorem provides an easy method for showing that M1 ≤e M2.
Proposition 2.37 (Tarski and Vaught, 1957)
Let M1 ⊆ M2. Assume the following condition:
($) For every wf B (x1, …, xk) of the form (∃y)C (x1, …, xk, y) and for all b1, …, bk in 
the domain D1 of M1, if .
[ ,
,
]
M2
1
B b
bk
…
, then there is some d in D1 such 
that M2
1
C [ ,
,
, ]
b
b
d
k
…
.
Then M1 ≤e M2.

126
Introduction to Mathematical Logic
Proof
Let us prove:
(*) M1
1
D[ ,
,
]
b
bk
…
 if and only if M2
1
D[ ,
,
]
b
bk
…
 for any wf D(x1, …, xk) and 
any b1, …, bk in D1.
The proof is by induction on the number m of connectives and quantifiers in D. 
If m = 0, then (*) follows from clause 4 of the definition of M1 ⊆ M2. Now assume 
that (*) holds true for all wfs having fewer than m connectives and quantifiers.
Case 1. D is ¬E. By inductive hypothesis, M1
1
E [ ,
,
]
b
bk
…
 if and only if 
M2
1
E [ ,
,
]
b
bk
…
. Using the fact that not-M1
1
E [ ,
,
]
b
bk
…
 if and only if 
M1
1
¬E [ ,
,
]
b
bk
…
, and similarly for M2, we obtain (*).
Case 2. D is E ⇒ F. By inductive hypothesis, M1
1
E [ ,
,
]
b
bk
…
 if and only if 
M2
1
E [ ,
,
]
b
bk
…
 and similarly for F. (*) then follows easily.
Case 3. D is (∃y)E(x1, …, xn, y). By inductive hypothesis,
(**) M1
1
E [ ,
,
, ]
b
b
d
k
…
 if and only if M2
1
E [ ,
,
, ]
b
b
d
k
…
, for any b1, …, bk, d in D1.
Case 3a. Assume M1
1
1
(
) (
,
,
,
)[ ,
,
]
∃
…
…
y
x
x
y b
b
k
k
E
 for some b1, …, bk in D1. 
Then M1
1
E [ ,
,
, ]
b
b
d
k
…
 for some d in D1. So, by (**), M2
1
E [ ,
,
, ]
b
b
d
k
…
. Hence, 
M2
1
1
(
) (
,
,
,
)[ ,
,
]
∃
…
…
y
x
x
y b
b
k
k
E
.
Case 3b. Assume M2
1
1
(
) (
,
,
,
)[ ,
,
]
∃
…
…
y
x
x
y b
b
k
k
E
 for some b1, …, bk in D1. By 
assumption ($), there exists d in D1 such that M2
1
E [ ,
,
, ]
b
b
d
k
…
. Hence, by (**), 
M1
1
E [ ,
,
, ]
b
b
d
k
…
 and therefore M1
1
1
(
) (
,
,
,
)[ ,
,
]
∃
…
…
y
x
x
y b
b
k
k
E
.
This completes the induction proof, since any wf is logically equivalent to 
a wf that can be built up from atomic wfs by forming negations, conditionals 
and existential quantifications.
Exercises
2.109	 Prove:
	
a.	 M ≤e M;
	
b.	 if M1 ≤e M2 and M2 ≤e M3, then M1 ≤e M3;
	
c.	 if M1 ≤e M and M2 ≤e M and M1 ⊆ M2, then M1 ≤e M2.
2.110	 Let K be the theory of totally ordered sets with equality (axioms (a)–
(c) and (e)–(g) of Exercise 2.67). Let M1 and M2 be the models for K 
with domains the set of positive integers and the set of nonnegative 
integers, respectively (under their natural orderings in both cases). 
Prove that M1 ⊆ M2 and M1 ≃ M2, but M1 ≰eM2.
Let M be an interpretation of a language L. Extend L to a language L * by 
adding a new individual constant ad for every member d of the domain of M. 
We can extend M to an interpretation of L * by taking d as the interpretation 

127
First-Order Logic and Model Theory
of ad. By the diagram of M we mean the set of all true sentences of M of the 
forms A
a
a
A
a
a
j
n
d
d
j
n
d
d
n
n
(
,
,
),
(
,
,
)
1
1
…
¬
…
, and f
a
a
a
j
n
d
d
d
n
m
(
,
,
)
1 …
=
. In particular, 
a
a
d
d
1
2
≠
 belongs to the diagram if d1 ≠ d2. By the complete diagram of M we 
mean the set of all sentences of L * that are true for M.
Clearly, any model M# of the complete diagram of M determines an ele-
mentary extension M## of M,* and vice versa.
Exercise
2.111	 a.	 Let M1 be a denumerable normal model of an ordinary theory K 
with equality such that every element of the domain of M1 is the 
interpretation of some closed term of K.
	
	
i.	 Show that, if M1 ⊆ M2 and M1 ≡ M2, then M1 ≤e M2.
	
	
ii.	 Prove that there is a denumerable normal elementary extension 
M3 of M1 such that M1 and M3 are not isomorphic.
	
b.	 Let K be a predicate calculus with equality having two function 
letters + and × and two individual constants 0 and 1. Let M be the 
standard model of arithmetic with domain the set of natural num-
bers, and +, ×, 0 and 1 having their ordinary meaning. Prove that 
M has a denumerable normal elementary extension that is not iso-
morphic to M, that is, there is a denumerable nonstandard model 
of arithmetic.
Proposition 2.38 (Upward Skolem–Löwenheim–Tarski Theorem)
Let K be a theory with equality having ℵα symbols, and let M be a normal 
model of K with domain of cardinality ℵβ. Let γ be the maximum of α and β. 
Then, for any δ ≥ γ, there is a model M* of cardinality ℵδ such that M ≠ M* 
and M ≤e M*.
Proof
Add to the complete diagram of M a set of cardinality ℵδ of new individual 
constants bτ, together with axioms bτ ≠ bρ for distinct τ and ρ and axioms 
bτ ≠ ad for all individual constants ad corresponding to members d of the 
domain of M. This new theory K# is consistent, since M can be used as a 
model for any finite number of axioms of K#. (If b
b
a
a
z
d
d
k
m
τ
τ
1
1
,
,
,
,
,
…
…
 are the 
new individual constants in these axioms, interpret b
b k
τ
τ
1 ,
,
…
 as distinct 
elements of the domain of M different from d1, …, dm.) Hence, by Corollary 
2.34(a), K# has a normal model M# of cardinality ℵδ such that M ⊆ M#, 
M ≠ M#, and M ≤e M#.
*	 The elementary extension M## of M is obtained from M# by forgetting about the interpreta-
tions of the ads.

128
Introduction to Mathematical Logic
Proposition 2.39 (Downward Skolem–Löwenheim–Tarski Theorem)
Let K be a theory having ℵα symbols, and let M be a model of K with domain 
of cardinality ℵγ ≥ ℵα. Assume A is a subset of the domain D of M having 
cardinality n, and assume ℵβ is such that ℵγ ≥ ℵβ ≥ max(ℵα, 𝔫). Then there 
is an elementary submodel M* of M of cardinality ℵβ and with domain D* 
including A.
Proof
Since 𝔫 ≤ ℵβ ≤ ℵγ, we can add ℵβ elements of D to A to obtain a larger set 
B of cardinality ℵβ. Consider any subset C of D having cardinality ℵβ. For 
every wf B(y1, …, yn, z) of K, and any c1, …, cn in C such that ⊧M (∃z)B(y1, …, 
yn, z)[c1, …, cn] , add to C the first element d of D (with respect to some fixed 
well-ordering of D) such that ⊧M (∃z)B[c1, …, cn, d] . Denote the so-enlarged 
set by C#. Since K has ℵα symbols, there are ℵα wfs. Since ℵα ≤ ℵβ, there 
are at most ℵβ new elements in C# and, therefore, the cardinality of C# is 
ℵβ. Form by induction a sequence of sets C0, C1, … by setting C0 = B and 
C
C
n
n
+ =
1
#. Let D* = ∪n∈ωCn. Then the cardinality of D* is ℵβ. In addition, D* 
is closed under all the functions (
)
fj
n M. (Assume d1, …, dn in D*. We may 
assume d1, …, dn in Ck for some k. Now M (
)(
(
,
,
)
)[ ,
,
].
∃
…
=
…
z
f
x
x
z d
d
j
n
n
n
1
1
 
Hence, (
) (
,
,
)
f
d
d
j
n
n
M
1 …
, being the first and only member d of D such that 
M (
(
,
,
)
)[ ,
,
, ]
f
x
x
z d
d
d
j
n
n
n
1
1
…
=
…
, must belong to C
C
D
k
k
# =
⊆
+1
*.) Similarly, 
all interpretations (aj)M of individual constants are in D*. Hence, D* deter-
mines a substructure M* of M. To show that M* ≤e M, consider any wf 
B (y1, …, yn, z) and any d1, …, dn in D* such that ⊧M(∃z)B(y1, …, yn, z) [d1, …, dn]. 
There exists Ck such that d1, …, dn are in Ck. Let d be the first element of D 
such that ⊧M B[d1, …, dn, d]. Then d
C
C
D
k
k
∈
=
⊆
+
#
1
*. So, by the Tarski–Vaught 
theorem (Proposition 2.37), M* ≤e M.
2.14  Ultrapowers: Nonstandard Analysis
By a filter* on a nonempty set A we mean a set F of subsets of A such that:
	
1.	A ∈ F
	
2.	B ∈ F ∧ C ∈ F ⇒ B ∩ C ∈ F
	
3.	B ∈ F ∧ B ⊆ C ∧ C ⊆ A ⇒ C ∈ F
*	 The notion of a filter is related to that of an ideal. A subset F  of P  (A) is a filter on A if and only 
if the set G = {A − B|B ∈ F} of complements of sets in F  is an ideal in the Boolean algebra P  (A). 
Remember that P  (A) denotes the set of all subsets of A.

129
First-Order Logic and Model Theory
Examples
Let B ⊆ A. The set FB = {C|B ⊆ C ⊆ A} is a filter on A. FB consists of all subsets 
of A that include B. Any filter of the form FB is called a principal filter. In par-
ticular, FA = {A} and F∅ = P(A) are principal filters. The filter P(A) is said to be 
improper and every other filter is said to be proper.
Exercises
2.112	 Show that a filter F  on A is proper if and only if ∅ ∉ F.
2.113	 Show that a filter F  on A is a principal filter if and only if the intersec-
tion of all sets in F  is a member of F.
2.114	 Prove that every finite filter is a principal filter. In particular, any filter 
on a finite set A is a principal filter.
2.115	 Let A be infinite and let F    be the set of all subsets of A that are comple-
ments of finite sets: F = {C|(∃W)(C = A − W ∧ Fin(W)}, where Fin(W) 
means that W is finite. Show that F  is a nonprincipal filter on A.
2.116	 Assume A has cardinality ℵβ. Let ℵα ≤ ℵβ. Let F  be the set of all sub-
sets of A whose complements have cardinality < ℵα. Show that F  is a 
nonprincipal filter on A.
2.117	 A collection G of sets is said to have the finite intersection property if B1 ∩ 
B2 ∩ … ∩ Bk ≠ ∅ for any sets B1, B2, …, Bk in G. If G is a collection of sub-
sets of A having the finite intersection property and H is the set of all 
finite intersections B1 ∩ B2 ∩ … ∩ Bk of sets in G, show that F = {D|(∃C)
(B ∈ H ∧ C ⊆ D ⊆ A)} is a proper filter on A.
Definition
A filter F on a set A is called an ultrafilter on A if F  is a maximal proper filter 
on A, that is, F is a proper filter on A and there is no proper filter G on A such 
that F ⊂ G.
Example
Let d ∈ A. The principal filter Fd = {B|d ∈ B ∧ B ⊆ A} is an ultrafilter on A. 
Assume that G is a filter on A such that Fd ⊂ G. Let C ∈ G − Fd. Then C ⊆ A and 
d ∉ C. Hence, d ∈ A − C. Thus, A − C ∈ Fd ⊂ G. Since G is a filter and C and 
A − C are both in G, then ∅ = C ∩ (A − C) ∈ G. Hence, G is not a proper filter.
Exercises
2.118	 Let F  be a proper filter on A and assume that B ⊆ A and A − B ∉ F. 
Prove that there is a proper filter F′ ⊇F  such that B ∈ F′.
2.119	 Let F  be a proper filter on A. Prove that F is an ultrafilter on A if and 
only if, for every B ⊆ A, either B ∈ F  or A − B ∈ F.

130
Introduction to Mathematical Logic
2.120	 Let F  be a proper filter on A. Show that F  is an ultrafilter on A if and 
only if, for all B and C in P  (A), if B ∉ F  and C ∉ F, then B ∪ C ¬ ∈ F.
2.121	 a.	Show that every principal ultrafilter on A is of the form Fd = {B|d ∈ 
B ∧ B ⊆ A} for some d in A.
	
	 b.	Show that a nonprincipal ultrafilter on A contains no finite sets.
2.122	 Let F  be a filter on A and let I   be the corresponding ideal: B ∈ I  if and 
only if A − B ∈ F. Prove that F  is an ultrafilter on A if and only if I  is 
a maximal ideal.
2.123	 Let X be a chain of proper filters on A, that is, for any B and C in X, 
either B ⊆ C or C ⊆ B. Prove that the union ∪X = {a|(∃B)(B ∈ X ∧ a ∈ B)} 
is a proper filter on A, and B ⊆ ∪X for all B in X.
Proposition 2.40 (Ultrafilter Theorem)
Every proper filter F on a set A can be extended to an ultrafilter on A.*
Proof
Let F   be a proper filter on A. Let I  be the corresponding proper ideal: B ∈ I 
if and only if A − B ∈ F. By Proposition 2.36, every ideal can be extended to 
a maximal ideal. In particular, I  can be extended to a maximal ideal H. If 
we let U  = {B|A − B ∈ H  }, then U is easily seen to be an ultrafilter and F  ⊆ U.
Alternatively, the existence of an ultrafilter including F  can be proved easily 
on the basis of Zorn’s lemma. (In fact, consider the set X of all proper filters F′ 
such that F   ⊆ F   ′. X is partially ordered by ⊂, and any ⊂ -chain in X has an upper 
bound in X, namely, by Exercise 2.123, the union of all filters in the chain. Hence, 
by Zorn’s lemma, there is a maximal element F   * in X, which is the required 
ultrafilter.) However, Zorn’s lemma is equivalent to the axiom of choice, which is 
a stronger assumption than the generalized completeness theorem.
Corollary 2.41
If A is an infinite set, there exists a nonprincipal ultrafilter on A.
Proof
Let F  be the filter on A consisting of all complements A − B of finite subsets 
B of A (see Exercise 2.115). By Proposition 2.40, there is an ultrafilter U ⊇F. 
Assume U is a principal ultrafilter. By Exercise 2.121(a), U = Fd for some d ∈ A. 
Then A − {d} ∈ F  ⊆ U. Also, {d} ∈ U. Hence, ∅ = {d} ∩ (A − {d}) ∈ U, contradicting 
the fact that an ultrafilter is proper.
*	 We assume the generalized completeness theorem.

131
First-Order Logic and Model Theory
2.14.1  Reduced Direct Products
We shall now study an important way of constructing models. Let K be any 
predicate calculus with equality. Let J be a nonempty set and, for each j in 
J, let Mj be some normal model of K. In other words, consider a function F 
assigning to each j in J some normal model. We denote F(j) by Mj.
Let F  be a filter on J. For each j in J, let Dj denote the domain of the model 
Mj. By the Cartesian product Πj∈JDj we mean the set of all functions f with 
domain J such that f(j) ∈ Dj for all j in J. If f ∈ Πj∈JDj, we shall refer to f(j) as 
the jth component of f. Let us define a binary relation =F in Πj∈JDj as follows:
	
f
g
j f j
g j
=
=
∈
F
F
if and only if
{ | ( )
( )}
If we think of the sets in F as being “large” sets, then, borrowing a phrase 
from measure theory, we read f =F g as “f(j) = g(j) almost everywhere.”
It is easy to see that =F is an equivalence relation: (1) f =F f; (2) if f =F g then 
g =F f; (3) if f =F g and g =F h, then f =F h. For the proof of (3), observe that 
{j|f(j) = g(j)} ∩ {j|g(j) = h(j)} ⊆ {j|f(j) = h(j)}. If {j|f(j) = g(j)} and {j|g(j) = h(j)} are 
in F, then so is their intersection and, therefore, also {j|f(j) = h(j)}.
On the basis of the equivalence relation =F  , we can divide Πj∈JDj into 
equivalence classes: for any f in Πj∈JDj, we define its equivalence class fF  as 
{g|f =F g}. Clearly, (1) f ∈ fF; (2) fF = hF  if and only if f =F h; and (3) if fF   ≠ hF, 
then fF  ∩ hF = ∅. We denote the set of equivalence classes fF  by Πj∈JDj/F. 
Intuitively, Πj∈JDj/F  is obtained from Πj∈JDj by identifying (or merging) ele-
ments of Πj∈JDj that are equal almost everywhere.
Now we shall define a model M of K with domain Πj∈JDj/F.
	
1.	Let c be any individual constant of K and let cj be the interpretation 
of c in Mj. Then the interpretation of c in M will be fF, where f is the 
function such that f(j) = cj for all j in J. We denote f by {cj}j∈J.
	
2.	Let fk
n be any function letter of K and let Ak
n be any predicate letter of 
K. Their interpretations (
)
fk
n M and (
)
Ak
n M are defined in the following 
manner. Let (g1)F, …, (gn)F  be any members of Πj∈JDj/F.
	
a.	 (
) ((
) ,
, (
) )
f
g
g
h
k
n
n
M
1 F
F
F
…
=
, where h j
f
g
j
g
j
k
n
n
j
( )
(
)
(
( ),
,
( ))
=
…
M
1
 
for all j in J.
	
b.	 (
) ((
) ,
, (
) )
A
g
g
k
n
n
M
1 F
F
…
 
holds 
if 
and 
only 
if 
{ |
j
j
M  
A
g j
g
j
k
n
n
[
( ),
,
( )]}
1
…
∈F .
Intuitively, (
)
fk
n M is calculated componentwise, and (
)
Ak
n M holds if and 
only if Ak
n holds in almost all components. Definitions (a) and (b) have 
to be shown to be independent of the choice of the representatives 
g1, …, gn in the equivalence classes (g1)F, …, (gn)F: if g
g
g
g
n
n
1
1
=
…
=
F
F
*
*
,
,
, 
and 
h
j
f
g
j
g
j
k
n
n
j
*
*
*
( )
(
)
(
( ),
,
( ))
=
…
M
1
, 
then 
(i) 
hF 
=F 
hF* 
and 
(ii) 
j
A
g j
g
j
j
k
n
n
|
[
( ),
,
( )]}
M
{
…
∈
1
F  if and only if j
A
g
j
g
j
j
k
n
n
|
[
( ),
,
( )]
.
M
*
*
1
…
{
}∈F

132
Introduction to Mathematical Logic
Part (i) follows from the inclusion:
	
{ |
( )
*( )}
{ |
( )
*( )}
|
(
( ),
,
(
j g
j
g
j
j g
j
g
j
j
f
g
j
g
j
n
n
k
n
n
j
1
1
1
=
∩… ∩
=
⊆
(
)
…
M
))
(
( ),
,
*( ))
= (
)
…
{
}
f
g
j
g
j
k
n
n
j
M
1 *
Part (ii) follows from the inclusions:
	
{ |
( )
*( )}
{ |
( )
*( )}
|
[
( ),
,
( )
j g
j
g
j
j g
j
g
j
j
A
g
j
g
j
n
n
k
n
n
j
1
1
1
=
…
=
⊆
…
∩
∩
M
]
[
( ),
,
*( )]
if and only if
*
M

j A
g
j
g
j
k
n
n
1
…
{
}
and
	
j
A
g
j
g
j
j
A
g
j
g
j
j
j
k
n
n
k
n
n
|
[
( ),
,
( )]
|
[
( ),
,
( )]


M
M
if and
onl
1
1
…
{
}
…
{
∩
y if
M
M


j
j
A
g
j
g
j
j
A
g
j
g
j
k
n
n
k
n
n
[ *( ),
,
*( )]
|
[ *( ),
,
*( )]
1
1
…
} ⊆
…
{
}
In the case of the equality relation =, which is an abbreviation for A1
2,
	
(
) (
,
)
|
[ ( ), ( )]
A
g
h
j
A g j h j
j
1
2
1
2
M
M
if and only if
if and only if
F
F
F

{
}∈
{ | ( )
( )}
j g j
h j
g
h
=
∈
=
F
F
if and only if
that is, if and only if gF = hF  . Hence, the interpretation (
)
A1
2 M is the identity 
relation and the model M is normal.
The model M just defined will be denoted Πj∈JMj/F and will be called a 
reduced direct product. When F  is an ultrafilter, Πj∈JMj/F is called an ultra-
product. When F  is an ultrafilter and all the Mjs are the same model N, then 
Πj∈JMj/F  is denoted NJ/F and is called an ultrapower.
Examples
	
1.	Choose a fixed element r of the index set J, and let F   be the prin-
cipal ultrafilter Fr = {B|r ∈ B ∧ B ⊆ J}. Then, for any f, g in Πj∈JDj, 
f =F g if and only if {j|f(j) = g(j)} ∈ F, that is, if and only if f(r) = 
g(r) . Hence, a member of Πj∈JDj/F consists of all f in Πj∈JDj that 
have the same rth component. For any predicate letter Ak
n of 
K and any g1, …, gn in Π j J
j
k
n
n
D
A
g
g
∈
…
,
[(
) ,
, (
) ]
M
1 F
F
 if and 
only if 
j
A
g j
g
j
j
k
n
n
|
[
( ),
,
( )]
M
1
…
{
}∈F , that is, if and only if 
Mr A
g j
g
j
k
n
n
[
( ),
,
( )]
1
…
. Hence, it is easy to verify that the function φ: 
Πj∈JDj/F → Dr, defined by φ(gF) = g(r) is an isomorphism of Πj∈JMj/F 
with Mr. Thus, when F  is a principal ultrafilter, the ultraproduct 
Πj∈JMj/F  is essentially the same as one of its components and yields 
nothing new.

133
First-Order Logic and Model Theory
	
2.	Let F be the filter {J}. Then, for any f, g in Πj∈JDj, f =F g if and only 
if {j|f(j) = g(j)} ∈ F, that is, if and only if f(j) = g(j) for all j in J, or 
if and only if f = g. Thus, every member of Πj∈JDj/F is a singleton 
{g} for some g in Πj∈JDj. Moreover, (
) ((
) ,
, (
) )
{ }
f
g
g
g
k
n M
n
1 F
F
…
=
, 
where g is such that g j
f
g j
g
j
k
n
n
j
( )
(
)
(
( ),
,
( ))
=
…
M
1
 for all j in J. Also, 
M A
g
g
k
n
n
[(
) ,
, (
) ]
1 F
F
…
 if and only if Mj A
g
j
g
j
k
n
n
[
( ),
,
( )]
1
…
 for all j 
in J. Hence, Πj∈JMj/F  is, in this case, essentially the same as the ordi-
nary “direct product” Πj∈JMj, in which the operations and relations 
are defined componentwise.
	
3.	Let F  be the improper filter P  (J). Then, for any f, g in Πj∈JDj, f =F g 
if and only if {j|f(j) = g(j)} ∈ F, that is, if and only if {j|f(j) = g(j)} ∈ 
P  (J). Thus, f =F g for all f and g, and Πj∈JDj/F consists of only one 
element. For any predicate letter A
A
f
f
k
n
k
n
,
[
,
,
]
M
F
F
…
 if and only if 
{
[ ( ),
,
( )]}
( )
j
A
f j
f j
P J
j
k
n
M
…
∈
; that is, every atomic wf is true.
The basic theorem on ultraproducts is due to Loś (1955b).
Proposition 2.42 (Loś’s Theorem)
Let F  be an ultrafilter on a set J and let M = Πj∈JMj/F  be an ultraproduct.
	
a.	Let s = ((g1)F, (g2)F, …) be a denumerable sequence of elements of 
Πj∈JDj/F. For each j in J, let sj be the denumerable sequence (g1(j), 
g2(j), …) in Dj. Then, for any wf B of K, s satisfies B in M if and only 
if {j|sj satisfies B in Mj} ∈ F.
	
b.	For any sentence B of K, B is true in Πj∈JMj/F   if and only if j
Mj
|
.

B
F
∈
 
(Thus, (b) asserts that a sentence B is true in an ultraproduct if and 
only if it is true in almost all components.)
Proof
	
a.	We shall use induction on the number m of connectives and quanti-
fiers in B. We can reduce the case m = 0 to the following subcases*: 
(i) A
x
x
k
n
i
in
(
,
,
)
1 …
; (ii) x
f
x
x
k
n
i
in
ℓ=
…
(
,
,
)
1
; and (iii) xℓ = ak. For subcase 
(i), s satisfies A
x
x
k
n
i
in
(
,
,
)
1 …
 if and only if M A
g
g
k
n
i
in
[(
) ,
, (
) ],
1 F
F
…
 
which is equivalent to { |
[
( ),
,
( )]}
j
A
g
j
g
j
j
n
k
n
i
i
M
1
…
∈F ; that is 
j s satisfies A
x
x
in M
F
j
k
n
i
i
j
n
|
(
,
,
)
1 …
{
}∈. Subcases (ii) and (iii) are han-
dled in similar fashion.
*	 A wf A t
t
k
n
n
( ,
,
)
1 …
 can be replaced by (
)
(
)(
(
,
,
))
∀
… ∀
=
∧…∧
=
⇒
…
u
u
u
t
u
t
A u
u
n
n
n
k
n
n
1
1
1
1
, and a 
wf x
f
t
t
k
n
n
=
…
( ,
,
)
1
 can be replaced by (
)
(
)(
(
,
,
))
∀
… ∀
=
∧…∧
=
⇒
=
…
z
z
z
t
z
t
x
f
z
z
n
n
n
k
n
n
1
1
1
1
. In 
this way, every wf is equivalent to a wf built up from wfs of the forms (i)–(iii) by applying 
connectives and quantifiers.

134
Introduction to Mathematical Logic
	
	 Now, let us assume the result holds for all wfs that have fewer than 
m connectives and quantifiers.
	
	 Case 1. B is ¬C. By inductive hypothesis, s satisfies C in M if and only 
if {j|sj satisfies C in Mj} ∈ F. s satisfies ¬C in M if and only if {j|sj sat-
isfies C in Mj} ∉ F. But, since F is an ultrafilter,the last condition is 
equivalent, by exercise 2.119, to {j|sj satisfies ¬C in Mj} ∈ F.
	
	 Case 2. B is C ∧ D. By inductive hypothesis, s satisfies C in M if and 
only if {j|sj satisfies C in Mj} ∈ F, and s satisfies D in M if and only if 
{j|sj satisfies D in Mj} ∈ F. Therefore, s satisfies C ∧ D if and only 
if both of the indicated sets belong to F. But, this is equivalent to their 
intersection belonging to F, which, in turn, is equivalent to {j|sj satisfies 
C ∧ D in Mj} ∈ F.
	
	 Case 3. B is (∃xi)C. Assume s satisfies (∃xi)C. Then there exists h in 
Πj∈JDj such that s′ satisfies C in M, where s′ is the same as s except that 
hF is the ith component of s′. By inductive hypothesis, s′ satisfies C  in 
M if and only if {j|sj′ satisfies C in Mj} ∈ F. Hence, {j|sj satisfies(∃xi)C 
in Mj} ∈ F, since, if sj′ satisfies C in Mj then sj satisfies (∃xi)C in Mj.
	
	   Conversely, assume W = {j|sj satisfies (∃xi)C in Mj} ∈ F. For each j in 
W, choose some sj′ such that sj′ is the same as sj except in at most the 
ith component and sj′ satisfies C. Now define h in Πj∈JDj as follows: 
for j in W, let h(j) be the ith component of sj′, and, for j ∉ W, choose h(j) 
to be an arbitrary element of Dj. Let s′′ be the same as s except that its 
ith component is hF. Then W
j s
M
j
j
⊆
∈
′′
{ |
}
satisfies
in
C
F . Hence, 
by the inductive hypothesis, s′′ satisfies C in M. Therefore, s satisfies 
(∃xi)C in M.
	
b.	This follows from part (a) by noting that a sentence B is true in a 
model if and only if some sequence satisfies B.
Corollary 2.43
If M is a model and F is an ultrafilter on J, and if M* is the ultrapower MJ/F, 
then M* ≡ M.
Proof
Let B be any sentence. Then, by Proposition 2.42(b), B is true in M* if and 
only if {j|B is true in Mj} ∈ F. If B is true in M, {j|B is true in Mj} = J ∈ F. If B 
is false in M, {j|B is true in Mj} = ∅ ∉ F.
Corollary 2.43 can be strengthened considerably. For each c in the domain 
D of M, let c# stand for the constant function such that c#(j) = c for all j in J. 
Define the function ψ such that, for each c in D, ψ(c) = (c#)F ∈ DJ/F, and denote 
the range of ψ by M#. M# obviously contains the interpretations in M* of the 
individual constants. Moreover, M# is closed under the operations (
)
fk
n M*; for 

135
First-Order Logic and Model Theory
(
)
((
) ,
, (
) )
#
#
f
c
c
k
n
n
M*
1
F
F
…
 is hF  , where h j
f
c
c
k
n
n
( )
(
) ( ,
,
)
=
…
M
1
 for all j in J, and 
(
) (( ,
,
)
f
c
c
k
n
n
M
1 …
 is a fixed element b of D. So, hF = (b#)F ∈ M#. Thus, M# is a 
substructure of M*.
Corollary 2.44
ψ is an isomorphism of M with M#, and M# ≤e M*.
Proof
	
a.	By definition of M#, the range of ψ is M#.
	
b.	ψ is one–one. (For any c, d in D, (c#)F = (d#)F if and only if c# = F   d#, 
which is equivalent to {j|c#(j) = d#(j)} ∈ F  ; that is, {j|c = d} ∈ F. If 
c
d
j c
d
≠
=
= ∅∈
, { |
}
F , and, therefore, ψ (c) ≠ ψ (d).
	
c.	For any c1, …, cn in D, (
)
( ( )
,
(
))
(
)
((
) ,
,
#
f
c
c
f
c
k
n
n
k
n
M
M
*
*
ψ
ψ
1
1
…
=
…
F
 
(
) )
#c
h
n F
F
=
, 
where 
h j
f
c
j
c
j
f
c
c
k
n
n
k
n
n
( )
(
) (
( ),
,
( ))
(
) ( ,
,
)
#
#
=
…
=
…
M
M
1
1
. 
Thus, h
f
c
c
f
c
c
k
n
n
k
n
n
F
F
=
…
=
…
((
) ( ,
,
))
((
) ( ,
,
))
#
M
M
1
1
/
ψ
.
	
d.	M* A
c
c
k
n
n
[ ( )
,
(
)]
ψ
ψ
1 …
 if and only if { |
( ( )( ),
,
( )( ))}
,
j
A
c
j
c
j
M
k
n
n

ψ
ψ
1
…
∈F  
which 
is 
equivalent 
to 
j
A c
c
k
n
n
|
( ,
,
)
M
1 …
{
}∈F , 
that 
is, 
M A c
c
k
n
n
[ ,
,
].
1 …
 Thus, ψ is an isomorphism of M with M#.
To see that M# ≤ eM*, let B  be any wf and (
) ,
, (
)
#
#
#
c
c
M
n
1 F
F
…
∈
. Then, by proposi-
tion 2.42(a), M* B
F
F
[(
) ,
, (
) ]
#
#
c
cn
1
…
 if and only if { |
[
( ),
,
( )]}
#
#
j
c
j
c
j
n
M B
F
1
…
∈
, 
which is equivalent to {j| ⊨MB[c1, …, cn]} ∈ F, which, in turn, is equivalent to 
⊨M B[c1, …, cn], that is, to M#
[(
) ,
, (
) ]
#
#
B
F
c
c
F
n
1
…
, since ψ is an isomorphism of 
M with M#.
Exercises
2.124	 (The compactness theorem again; see Exercise 2.54) If all finite subsets 
of a set of sentences Γ have a model, then Γ has a model.
2.125	 a.	 A class W  of interpretations of a language L  is called elementary if 
there is a set Γ of sentences of L such that W   is the class of all mod-
els of Γ. Prove that W   is elementary if and only if W   is closed under 
elementary equivalence and the formation of ultraproducts.
	
	
b.	 A class W  of interpretations of a language L  will be called sentential 
if there is a sentence B of L such that W  is the class of all models of 
B. Prove that a class W   is sentential if and only if both W    and its 
complement W  (all interpretations of L   not in W   ) are closed with 
respect to elementary equivalence and ultraproducts.
	
	
c.	 Prove that theory K of fields of characteristic 0 (see page 116) is 
axiomatizable but not finitely axiomatizable.

136
Introduction to Mathematical Logic
2.14.2  Nonstandard Analysis
From the invention of the calculus until relatively recent times the idea of 
infinitesimals has been an intuitively meaningful tool for finding new results 
in analysis. The fact that there was no rigorous foundation for infinitesimals 
was a source of embarrassment and led mathematicians to discard them in 
favor of the rigorous limit ideas of Cauchy and Weierstrass. However, almost 
fifty years ago, Abraham Robinson discovered that it was possible to res-
urrect infinitesimals in an entirely legitimate and precise way. This can be 
done by constructing models that are elementarily equivalent to, but not iso-
morphic to, the ordered field of real numbers. Such models can be produced 
either by using Proposition 2.33 or as ultrapowers. We shall sketch here the 
method based on ultrapowers.
Let R be the set of real numbers. Let K be a generalized predicate calculus 
with equality having the following symbols:
	
1.	For each real number r, there is an individual constant ar.
	
2.	For every n-ary operation φ on R, there is a function letter fφ.
	
3.	For every n-ary relation Φ on R, there is a predicate letter AΦ.
We can think of R as forming the domain of a model R for K; we simply let 
(ar)R = r, (fφ)R = φ, and (AΦ)R = Φ.
Let F be a nonprincipal ultrafilter on the set ω of natural numbers. We can 
then form the ultrapower R * = R  ω/F. We denote the domain Rω/F of R* by R*. 
By Corollary 2.43, R * ≡ R and, therefore, R* has all the properties formaliz-
able in K that R possesses. Moreover, by Corollary 2.44, R* has an elementary 
submodel R  # that is an isomorphic image of R. The domain R# of R  # consists 
of all elements (c#)F  corresponding to the constant functions c#(i) = c for all i in 
ω. We shall sometimes refer to the members of R# also as real numbers; the 
elements of R* − R# will be called nonstandard reals.
That there exist nonstandard reals can be shown by explicitly exhibiting 
one. Let ι(j) = j for all j in ω. Then ιF ∈ R*. However, (c#)F < ιF for all c in R, by 
virtue of Loś’s theorem and the fact that {j|c#(j) < ι(j)} = {j|c < j}, being the set 
of all natural numbers greater than a fixed real number, is the complement 
of a finite set and is, therefore, in the nonprincipal ultrafilter F. ιF is an “infi-
nitely large” nonstandard real. (The relation < used in the assertion (c#)F < ιF 
is the relation on the ultrapower R* corresponding to the predicate letter < of 
K. We use the symbol < instead of (<)R * in order to avoid excessive notation, 
and we shall often do the same with other relations and functions, such as 
u + v, u × v, and |u|.)
Since R* possesses all the properties of R formalizable in K, R* is an 
ordered field having the real number field R  # as a proper subfield. (R* is non-
Archimedean: the element ιF   defined above is greater than all the natural 
numbers (n#)F  of R*.) Let R1, the set of “finite” elements of R*, contain those 
elements z such that |z| < u for some real number u in R#. (R1 is easily seen 

137
First-Order Logic and Model Theory
to form a subring of R*.) Let R0 consist of 0 and the “infinitesimals” of R*, that 
is, those elements z ≠ 0 such that |z| < u for all positive real numbers u in R#. 
The reciprocal 1/ιF is an infinitesimal.) It is not difficult to verify that R0 is an 
ideal in the ring R1. In fact, since x ∈ R1 − R0 implies that 1/x ∈ R1 − R0, it can 
be easily proved that R0 is a maximal ideal in R1.
Exercises
2.126	 Prove that the cardinality of R* is 2
0
ℵ.
2.127	 Prove that the set R0 is closed under the operations of +, −, and ×.
2.128	 Prove that, if x ∈ R1 and y ∈ R0, then xy ∈ R0.
2.129	 Prove that, if x ∈ R1 − R0, then 1/x ∈ R1 − R0.
Let x ∈ R1. Let A = {u|u ∈ R# ∧ u < x} and B = {u|u ∈ R# ∧ u > x}. Then 〈A, B〉 
is a “cut” and, therefore, determines a unique real number r such that (1) (∀x)
(x ∈ A ⇒ x ≤ r) and (2) (∀x)(x ∈ B ⇒ x ≥ r).* The difference x − r is 0 or an 
infinitesimal. (Proof: Assume x − r is not 0 or an infinitesimal. Then |x − r| 
> r1 for some positive real number r1. If x > r, then x − r > r1. So x > r + r1 > r. 
But then r + r1 ∈ A, contradicting condition (1). If x < r, then r − x > r1, and so 
r > r − r1 > x. Thus, r − r1 ∈ B, contradicting condition (2).) The real number 
r such that x − r is 0 or an infinitesimal is called the standard part of x and is 
denoted st(x). Note that, if x is itself a real number, then st(x) = x. We shall use 
the notation x ≈ y to mean st(x) = st(y). Clearly, x ≈ y if and only if x − y is 0 or 
an infinitesimal. If x ≈ y, we say that x and y are infinitely close.
Exercises
2.130	 If x ∈ R1, show that there is a unique real number r such that x − r is 0 
or an infinitesimal. (It is necessary to check this to ensure that st(x) is 
well-defined.)
2.131	 If x and y are in R1, prove the following.
	
a.	 st(x + y) = st(x) + st(y)
	
b.	 st(xy) = st(x)st(y)
	
c.	 st(−x) = −st(x) ∧ st(y − x) = st(y) − st(x)
	
d.	 x ≥ 0 ⇒ st(x) ≥ 0
	
e.	 x ≤ y ⇒ st(x) ≤ st(y)
The set of natural numbers is a subset of the real numbers. Therefore, in the 
theory K there is a predicate letter N corresponding to the property x ∈ ω. 
Hence, in R*, there is a set ω* of elements satisfying the wf N(x). An element 
*	 See Mendelson (1973, Chapter 5).

138
Introduction to Mathematical Logic
fF of R* satisfies N(x) if and only if {j|f(j) ∈ ω} ∈ F. In particular, the elements 
nF
# , for n ∈ ω, are the “standard” members of ω*, whereas ιF   , for example, is a 
“nonstandard” natural number in R*.
Many of the properties of the real number system can be studied from the 
viewpoint of nonstandard analysis. For example, if s is an ordinary denu-
merable sequence of real numbers and c is a real number, one ordinarily says 
that lim sn = c if
	
(&)
(
)(
(
)(
(
)(
)))
∀
>
⇒∃
∈
∧∀
∈
∧
≥
⇒
−
<
ε ε
ω
ω
ε
0
n n
k k
k
n
s
c
k
Since s ∈ Rω, s is a relation and, therefore, the theory K contains a predicate 
letter S(n, x) corresponding to the relation sn = x. Hence, R* will have a rela-
tion of all pairs 〈n, x〉 satisfying S(n, x). Since R * ≡ R, this relation will be a 
function that is an extension of the given sequence to the larger domain ω*. 
Then we have the following result.
Proposition 2.45
Let s be a denumerable sequence of real numbers and c a real number. Let s* 
denote the function from ω* into R* corresponding to s in R*. Then lim sn = c 
if and only if s*(n) ≈ c for all n in ω* − ω. (The latter condition can be para-
phrased by saying that s*(n) is infinitely close to c when n is infinitely large.)
Proof
Assume lim sn = c. Consider any positive real ε. By (&), there is a natural 
number n0 such that (∀k)(k ∈ ω ∧ k ≥ n0 ⇒ |sk − c| < ε) holds in R. Hence, the 
corresponding sentence (∀k)(k ∈ ω* ∧ k ≥ n0 ⇒ |s*(k) − c| < ε) holds in R*. For 
any n in ω* − ω, n > n0 and, therefore, |s*(n) − c| < ε. Since this holds for all 
positive real ε, s*(n) − c is 0 or an infinitesimal.
Conversely, assume s*(n) ≈ c for all n ε ω* − ω. Take any positive real ε. Fix 
some n1 in ω* − ω. Then (∀k)(k ≥ n1 ⇒ |s*(k) − c| < ε). So the sentence (∃n)(n ∈ ω 
∧ (∀k)(k ∈ ω ∧ k ≥ n ⇒ |sk − c| < ε)) is true for R* and, therefore, also for R. So 
there must be a natural number n0 such that (∀k)(k ∈ ω ∧ k ≥ n0 ⇒ |sk − c| < ε). 
Since ε was an arbitrary positive real number, we have proved lim sn = c.
Exercise
2.132	 Using Proposition 2.45, prove the following limit theorems for the real 
number system. If s and u are denumerable sequences of real numbers 
and c1 and c2 are real numbers such that lim sn = c1 and lim un = c2, then:
	
a.	 lim (sn + un) = c1 + c2;
	
b.	 lim (snun) = c1c2;
	
c.	 If c2 ≠ 0 and all un ≠ 0, lim (sn/un) = c1/c2.

139
First-Order Logic and Model Theory
Let us now consider another important notion of analysis, continuity. Let B 
be a set of real numbers, let c ∈ B, and let f be a function defined on B and 
taking real values. One says that f is continuous at c if
	
(¶)
(
)(
(
)(
(
)(
|
|
| ( )
( )|
)))
∀
>
⇒∃
>
∧∀
∈∧
−
<
⇒
−
<
ε ε
δ δ
δ
ε
0
0
x x
B
x
c
f x
f c
Proposition 2.46
Let f be a real-valued function on a set B of real numbers. Let c ∈ B. Let B* be 
the subset of R* corresponding to B, and let f* be the function corresponding 
to f.† Then f is continuous at c if and only if (∀x)(x ∈ B* ∧ x ≈ c ⇒ f*(x) ≈ f(c)).
Exercises
2.133	 Prove Proposition 2.46.
2.134	 Assume f and g are real-valued functions defined on a set B of real 
numbers and assume that f and g are continuous at a point c in B. 
Using Proposition 2.46, prove the following.
	
a.	f + g is continuous at c.
	
b.	f · g is continuous at c.
2.135	 Let f be a real-valued function defined on a set B of real numbers and 
continuous at a point c in B, and let g be a real-valued function defined 
on a set A of real numbers containing the image of B under f. Assume 
that g is continuous at the point f(c). Prove, by Proposition 2.46, that 
the composition g ○ f is continuous at c.
2.136	 Let C ⊆ R.
	
a.	C is said to be closed if (∀x)((∀ε)[ε > 0 ⇒ (∃y)(y ∈ C ∧|x − y| < ε)] ⇒ 
x ∈ C). Show that C is closed if and only if every real number that is 
infinitely close to a member of C* is in C.
	
b.	C is said to be open if (∀x)(x ∈ C ⇒ (∃δ)(δ > 0 ∧ (∀y)(|y − x| < δ ⇒ 
y ∈ C))). Show that C is open if and only if every nonstandard real 
number that is infinitely close to a member of C is a member of C*.
Many standard theorems of analysis turn out to have much simpler proofs 
within nonstandard analysis. Even stronger results can be obtained by start-
ing with a theory K that has symbols, not only for the elements, operations and 
relations on R, but also for sets of subsets of R, sets of sets of subsets of R, and 
*	 To be more precise, f is represented in the theory K by a predicate letter Af, where Af(x, y) 
corresponds to the relation f(x) = y. Then the corresponding relation Af* in R* determines a 
function f* with domain B*.

140
Introduction to Mathematical Logic
so on. In this way, the methods of nonstandard analysis can be applied to all 
areas of modern analysis, sometimes with original and striking results. For fur-
ther development and applications, see A. Robinson (1966), Luxemburg (1969), 
Bernstein (1973), Stroyan and Luxemburg (1976), and Davis (1977a). A calculus 
textbook based on nonstandard analysis has been written by Keisler (1976) and 
has been used in some experimental undergraduate courses.
Exercises
2.137	 A real-valued function f defined on a closed interval [a, b] = {x|a ≤ x ≤ 
b} is said to be uniformly continuous if
	
(
)(
(
)(
(
)(
)(
|
|
| ( )
( )|
∀
>
⇒∃
>
∧∀
∀
≤
≤
∧
≤
≤∧
−
<
⇒
−
ε ε
δ δ
δ
0
0
x
y a
x
b
a
y
b
x
y
f x
f y
< ε)))
	
Prove that f is uniformly continuous if and only if, for all x and y in 
[a, b]*, x ≈ y ⇒ f*(x) ≈ f*(y).
2.138	 Prove by nonstandard methods that any function continuous on [a, b] 
is uniformly continuous on [a, b].
2.15  Semantic Trees
Remember that a wf is logically valid if and only if it is true for all interpre-
tations. Since there are uncountably many interpretations, there is no sim-
ple direct way to determine logical validity. Gödel’s completeness theorem 
(Corollary 2.19) showed that logical validity is equivalent to derivability in 
a predicate calculus. But, to find out whether a wf is provable in a predicate 
calculus, we have only a very clumsy method that is not always applicable: 
start generating the theorems and watch to see whether the given wf ever 
appears. Our aim here is to outline a more intuitive and usable approach in 
the case of wfs without function letters. Throughout this section, we assume 
that no function letters occur in our wfs.
A wf is logically valid if and only if its negation is not satisfiable. We shall 
now explain a simple procedure for trying to determine satisfiability of a 
closed wf B.* Our purpose is either to show that B is not satisfiable or to find 
a model for B.
We shall construct a figure in the shape of an inverted tree. Start with the 
wf B at the top (the “root” of the tree). We apply certain rules for writing 
*	 Remember that a wf is logically valid if and only if its closure is logically valid. So it suffices 
to consider only closed wfs.

141
First-Order Logic and Model Theory
wfs below those already obtained. These rules replace complicated wfs by 
simpler ones in a way that corresponds to the meaning of the connectives 
and quantifiers.
	
¬¬
¬
¬
¬
x
¬
x
¬
x ¬
x ¬
¬
¬
C
C
D
C
D
C
C
C
C
C
C
C
C
D
(
)
(
)
(
)
(
)
(
)
(
)
∨
⇒
∀
∃
↓
↓
↓
↓
↓
∃
∀
Negation
Conjunction
Disjunctio
:
(
)
(
)
:
¬
¬
¬
¬
¬
¬
C
D
C
D
C
D
C
C
D
D
C
D
C
D
∧
⇔
∧
↓
↙↘
↙↘
n
Conditional
Biconditional
Uni
:
:
:
C
D
C
D
C
D
C
D
C
D
C
C
D
D
∨
⇒
⇔
↙↘
↙↘
↙↘
¬
¬
¬
versal quantifier
Rule U
Here, b is any individu
:
(
) ( )
( )
(
) [
∀
↓
x
x
b
C
C
al constant
already present
Existential quantifier
.]
:
(
) ( )
∃
↓
x
x
C
C ( )
[
.]
c
c is a new individual
constant not already in
the figure
 
Note that some of the rules require a fork or branching. This occurs when the 
given wf implies that one of two possible situations holds.
A branch is a sequence of wfs starting at the top and proceeding down the fig-
ure by applications of the rules. When a wf and its negation appear in a branch, 
that branch becomes closed and no further rules need be applied to the wf at the 
end of the branch. Closure of a branch will be indicated by a large cross ×.
Inspection of the rules shows that, when a rule is applied to a wf, the useful-
ness of that wf has been exhausted (the formula will be said to be discharged) 
and that formula need never be subject to a rule again, except in the case of a 
universally quantified wf. In the latter case, whenever a new individual constant 

142
Introduction to Mathematical Logic
appears in a branch below the wf, rule U can be applied with that new constant. 
In addition, if no further rule applications are possible along a branch and no individual 
constant occurs in that branch, then we must introduce a new individual constant for 
use in possible applications of rule U along that branch. (The idea behind this require-
ment is that, if we are trying to build a model, we must introduce a symbol for at 
least one object that can belong to the domain of the model.)
2.15.1  Basic Principle of Semantic Trees
If all branches become closed, the original wf is unsatisfiable. If, however, a 
branch remains unclosed, that branch can be used to construct a model in 
which the original wf is true; the domain of the model consists of the indi-
vidual constants that appear in that branch.
We shall discuss the justification of this principle later on. First, we shall 
give examples of its use.
Examples
	 1.	
To prove that (∀x)C (x) ⇒ C (b) is logically valid, we build a semantic tree 
starting from its negation.
	 	
i.	 ¬((∀x)C (x) ⇒ C (b))
	 	
ii.	  (∀x)C (x)	
(i)
	 	
iii.	 ¬C (b)	
(i)
	 	
iv.	  C ( )
b
× 	
(ii)
The number to the right of a given wf indicates the number of the line 
of the wf from which the given wf is derived. Since the only branch in 
this tree is closed, ¬((∀x)C (x) ⇒ C (b)) is unsatisfiable and, therefore, (∀x)
C (x) ⇒ C (b) is logically valid.
	 2.	
i.	  ¬[(∀x)(C (x) ⇒ D(x)) ⇒ ((∀x)C (x) ⇒ (∀x)D(x))]
	 	
ii.	 (∀x)(C (x) ⇒ D(x))	
(i)
	 	
iii.	 ¬((∀x)C (x) ⇒ (∀x)D(x))	
(i)
	 	
iv.	 (∀x)C (x)	
(iii)
	 	
v.	 ¬(∀x)D(x)	
(iii)
	 	
vi.	 (∃x) ¬D(x)	
(v)
	 	
vii.	 ¬D(b)	
(vi)
	 	
viii.	 C (b)	
(iv)
	 	
ix.
	
C
D
( )
( )
b
b
⇒
↙↘
	
(ii)
	 	
x.
	
¬
b
b
C
D
( )
( )
×
× 	
(ix)

143
First-Order Logic and Model Theory
Since both branches are closed, the original wf (i) is unsatisfiable and, 
therefore, (∀x)(C (x) ⇒ D(x)) ⇒ ((∀x)C (x) ⇒ (∀x)D(x)) is logically valid.
	 3.	
i.	 ¬ ∃
⇒∀
[(
)
( )
(
)
( )]
x A x
x A x
1
1
1
1
	 	
ii.	 (
)
( )
∃x A x
1
1
	
(i)
	 	
iii.	 ¬ ∀
(
)
( )
x A x
1
1
	
(i)
	 	
iv.	 A b
1
1( ) 	
(ii)
	 	
v.	 (
)
( )
∃
¬
x
A x
1
1
	
(iii)
	 	
vi.	 ¬A c
1
1( ) 	
(v)
No further applications of rules are possible and there is still an open 
branch. Define a model M with domain {b, c} such that the interpretation 
of A1
1 holds for b but not for c. Thus, (
)
( )
∃
¬
x
A x
1
1
 is true in M but (
)
( )
∀x A x
1
1
 
is false in M. Hence, (
)
( )
(
)
( )
∃
⇒∀
x A x
x A x
1
1
1
1
 is false in M and is, therefore, 
not logically valid.
	 4.	
i.	  ¬[(∃y)(∀x)B(x, y) ⇒ (∀x)(∃y)B(x, y)]
	 	
ii.	 (∃y)(∀x)B(x, y)	
(i)
	 	
iii.	 ¬(∀x)(∃y)B(x, y)	
(i)
	 	
iv.	 (∀x)B(x, b)	
(ii)
	 	
v.	 (∃x)¬(∃y)B(x, y)	
(iii)
	 	
vi.	 B(b, b)	
(iv)
	 	
vii.	 ¬(∃y)B(c, y)	
(v)
	 	
viii.	 B(c, b)	
(iv)
	 	
ix.	 (∀y)¬B(c, y)	
(vii)
	 	
x.	 ¬
c b
B ( ,
)
×
	
(ix)
Hence, (∃y)(∀x)B(x, y) ⇒ (∀x)(∃y)B(x, y) is logically valid.
Notice that, in the last tree, step (vi) served no purpose but was required 
by our method of constructing trees. We should be a little more precise 
in describing that method. At each step, we apply the appropriate rule 
to each undischarged wf (except universally quantified wfs), starting 
from the top of the tree. Then, to every universally quantified wf on a 
given branch we apply rule U with every individual constant that has 
appeared on that branch since the last step. In every application of a 
rule to a given wf, we write the resulting wf(s) below the branch that 
contains that wf.
	 5.	
i.	  ¬[(∀x)B(x) ⇒ (∃x)B(x)]
	 	
ii.	 (∀x)B(x)	
(i)
	 	
iii.	 ¬(∃x)B(x)	
(i)
	 	
iv.	  (∀x)¬B(x)	
(iii)

144
Introduction to Mathematical Logic
	 	
v.	  B(b)	
(ii)*
	 	
vi.	  ¬
b
B ( )
×
	
(iv)
Hence, (∀x)B(x) ⇒ (∃x)B(x) is logically valid.
	 6.	
i.	 ¬ ∀
¬
⇒∃
∀
¬
[(
)
( , )
(
)(
)
( , )]
x
A x x
x
y
A x y
1
2
1
2
	 	
ii.	 (
)
( , )
∀
¬
x
A x x
1
2
	
(i)
	 	
iii.	 ¬
x
y
A x y
(
)(
)
( , )
∃
∀
¬
1
2
	
(ii)
	 	
iv.	 (
) (
)
( , )
∀
¬ ∀
¬
x
y
A x y
1
2
	
(iii)
	 	
v.	 ¬A a a
1
2
1
1
(
,
) 	
(ii)†
	
vi.	 ¬ ∀
¬
(
)
(
, )
y
A a y
1
2
1
	
(iv)
	 	
vii.	 (
)
(
, )
∃
¬¬
y
A a y
1
2
1
	
(vi)
	 	
viii.	 ¬¬A a a
1
2
1
2
(
,
) 	
(vii)
	 	
ix.	 A a a
1
2
1
2
(
,
) 	
(viii)
	 	
x.	 ¬A a
a
1
2
2
2
(
,
) 	
(ii)
	 	
xi.	 ¬ ∀
¬
(
)
(
, )
y
A a
y
1
2
2
	
(iv)
	 	
xii.	 (
)
(
, )
∃
¬¬
y
A a
y
1
2
2
	
(xi)
	 	
xiii.	 ¬¬A a
a
1
2
2
3
(
,
) 	
(xii)
	 	
xiv.	 A a
a
1
2
2
3
(
,
)	
(xiii)
We can see that the branch will never end and that we will obtain a sequence 
of constants a1, a2, … with wfs A a
a
n
n
1
2
1
(
,
)
+  and ¬A a
a
n
n
1
2(
,
). Thus, we construct 
a model M with domain {a1, a2, …} and we define (
)
A1
2 M to contain only the 
pairs 〈an, an+1〉. Then, (
)
( , )
∀
¬
x
A x x
1
2
 is true in M, whereas (
)(
)
( , )
∃
∀
¬
x
y
A x y
1
2
 is 
false in M. Hence, (
)
( , )
(
)(
)
( , )
∀
¬
⇒∃
∀
¬
x
A x x
x
y
A x y
1
2
1
2
 is not logically valid.
Exercises
2.139	 Use semantic trees to determine whether the following wfs are logi-
cally valid.
	
a.	 (
)(
( )
( ))
((
)
( ))
(
)
( )
∀
∨
⇒
∀
∨∀
x A x
A x
x A x
x A x
1
1
2
1
1
1
2
1
	
b.	 ((∀x)B(x)) ∧ (∀x)C (x) ⇒ (∀x)(B(x) ∧ C (x))
	
c.	 (∀x)(B(x) ∧ C (x)) ⇒ ((∀x)B(x)) ∧ (∀x)C (x)
*	 Here, we must introduce a new individual constant for use with rule U since, otherwise, the 
branch would end and would not contain any individual constants.
†	 Here, we must introduce a new individual constant for use with rule U since, otherwise, the 
branch would end and would not contain any individual constants.

145
First-Order Logic and Model Theory
	
d.	 (
)(
( )
( ))
((
)
( )
(
)
( ))
∃
⇒
⇒
∃
⇒∃
x A x
A x
x A x
x A x
1
1
2
1
1
1
2
1
	
e.	 (
)(
)
( , )
(
)
( , )
∃
∃
⇒∃
x
y A x y
z A z z
1
2
1
2
	
f.	 ((
)
( ))
(
)
( )
(
)(
( )
( ))
∀
∨∀
⇒∀
∨
x A x
x A x
x A x
A x
1
1
2
1
1
1
2
1
	
g.	 (
)(
)(
( , )
(
)
( , ))
∃
∃
⇒∀
x
y A x y
z A z y
1
2
1
2
	
h.	 The wfs of Exercises 2.24, 2.31(a, e, j), 2.39, and 2.40.
	
i.	 The wfs of Exercise 2.21(a, b, g).
	
j.	 (
)(
( )
( ))
(
)(
( )
( ))
∀
⇒
⇒¬ ∀
⇒¬
x A x
A x
x A x
A x
1
1
2
1
1
1
2
1
Proposition 2.47
Assume that Γ is a set of closed wfs that satisfy the following closure condi-
tions: (a) if ¬¬B is in Γ, then B is in Γ; (b) if ¬(B ∨ C) is in Γ, then ¬B and ¬C are 
in Γ; (c) if ¬(B ⇒ C) is in Γ, then B and ¬C are in Γ; (d) if ¬(∀x)B is in Γ, then (∃x) 
¬B is in Γ; (e) if ¬(∃x)B is in Γ, then (∀x) ¬B is in Γ; (f) if ¬(B ∧ C) is in Γ, then at 
least one of ¬B and ¬C is in Γ; (g) if ¬(B ⇔ C) is in Γ, then either B and ¬C are 
in Γ, or ¬B and C are in Γ; (h) if B ∧ C is in Γ, then so are B and C; (i) if B ∨ C 
is in Γ, then at least one of B and C is in Γ, (j) if B ⇒ C is in Γ, then at least one 
of ¬B and C is in Γ; (k) if B ⇔ C is in Γ, then either B and C are in Γ or ¬B and 
¬C are in Γ; (l) if ∀x)B(x) is in Γ, then B(b) is in Γ (where b is any individual 
constant that occurs in some wf of Γ); (m) if (∃x)B(x) is in Γ, then B(b) is in Γ 
for some individual constant b. If no wf and its negation both belong to Γ and 
some wfs in Γ contain individual constants, then there is a model for Γ whose 
domain is the set D of individual constants that occur in wfs of Γ.
Proof
Define a model M with domain D by specifying that the interpretation 
of any predicate letter Ak
n in Γ contains an n-tuple 〈b1, …, bn〉 if and only if 
A b
b
k
n
n
( ,
,
)
1 …
 is in Γ. By induction on the number of connectives and quanti-
fiers in any closed wf E, it is easy to prove: (i) if E is in Γ, then E is true in M; 
and (ii) if ¬E is in Γ then E is false in M. Hence, M is a model for Γ.
If a branch of a semantic tree remains open, the set Γ of wfs of that branch 
satisfies the hypotheses of Proposition 2.47. If follows that, if a branch of a 
semantic tree remains open, then the set Γ of wfs of that branch has a model 
M whose domain is the set of individual constants that appear in that branch. 
This yields half of the basic principle of semantic trees.
Proposition 2.48
If all the branches of a semantic tree are closed, then the wf B at the root of 
the tree is unsatisfiable.

146
Introduction to Mathematical Logic
Proof
From the derivation rules it is clear that, if a sequence of wfs starts at B and 
continues down the tree through the applications of the rules, and if the 
wfs in that sequence are simultaneously satisfiable in some model M, then 
that sequence can be extended by another application of a rule so that the 
added wf(s) would also be true in M. Otherwise, the sequence would form 
an unclosed branch, contrary to our hypothesis. Assume now that B is sat-
isfiable in a model M. Then, starting with B, we could construct an infi-
nite branch in which all the wfs are true in M. (In the case of a branching 
rule, if there are two ways to extend the sequence, we choose the left-hand 
wf.) Therefore, the branch would not be closed, contrary to our hypothesis. 
Hence, B is unsatisfiable.
This completes the proof of the basic principle of semantic trees. Notice 
that this principle does not yield a decision procedure for logical validity. If 
a closed wf B is not logically valid, the semantic tree of ¬B may (and often 
does) contain an infinite unclosed branch. At any stage of the construction of 
this tree, we have no general procedure for deciding whether or not, at some 
later stage, all branches of the tree will have become closed. Thus, we have 
no general way of knowing whether B is unsatisfiable.
For the sake of brevity, our exposition has been loose and imprecise. 
A clear and masterful study of semantic trees and related matters can be 
found in Smullyan (1968).
2.16  Quantification Theory Allowing Empty Domains
Our definition in Section 2.2 of interpretations of a language assumed that 
the domain of an interpretation is nonempty. This was done for the sake of 
simplicity. If we allow the empty domain, questions arise as to the right way 
of defining the truth of a formula in such a domain.* Once that is decided, 
the corresponding class of valid formulas (that is, formulas true in all inter-
pretations, including the one with an empty domain) becomes smaller, and 
it is difficult to find an axiom system that will have all such formulas as its 
theorems. Finally, an interpretation with an empty domain has little or no 
importance in applications of logic.
Nevertheless, the problem of finding a suitable treatment of such a more 
inclusive logic has aroused some curiosity and we shall present one possible 
approach. In order to do so, we shall have to restrict the scope of the investi-
gation in the following ways.
*	 For example, should a formula of the form (
)(
( )
( ))
∀
∧¬
x A x
A x
1
1
1
1
 be considered true in the 
empty domain?

147
First-Order Logic and Model Theory
First, our languages will contain no individual constants or function let-
ters. The reason for this restriction is that it is not clear how to interpret indi-
vidual constants or function letters when the domain of the interpretation is 
empty. Moreover, in first-order theories with equality, individual constants 
and function letters always can be replaced by new predicate letters, together 
with suitable axioms.*
Second, we shall take every formula of the form (∀x)B(x) to be true in the 
empty domain. This is based on parallelism with the case of a nonempty 
domain. To say that (∀x)B(x) holds in a nonempty domain D amounts to 
asserting
	
( )
,
,
( )
∗
∈
for any object
if
then
c
c
D
B c
When D is empty, “c ∈ D” is false and, therefore, “if c ∈ D, then B(c)” is true. 
Since this holds for arbitrary c, (*) is true in the empty domain D, that is, (∀x)
B(x) is true in an empty domain. Not unexpectedly, (∃x)B(x) will be false in 
an empty domain, since (∃x)B(x) is equivalent to ¬(∀x)¬B(x).
These two conventions enable us to calculate the truth value of any closed 
formula in an empty domain. Every such formula is a truth-functional com-
bination of formulas of the form (∀x)B(x). Replace every subformula (∀x)B(x) 
by the truth value T and then compute the truth value of the whole formula.
It is not clear how we should define the truth value in the empty domain of 
a formula containing free variables. We might imitate what we do in the case 
of nonempty domains and take such a formula to have the same truth values 
as its universal closure. Since the universal closure is automatically true in the 
empty domain, this would have the uncomfortable consequence of declaring 
the formula A x
A x
1
1
1
1
( )
( )
∧¬
 to be true in the empty domain. For this reason, we 
shall confine our attention to sentences, that is, formulas without free variables.
A sentence will be said to be inclusively valid if it is true in all interpreta-
tions, including the interpretation with an empty domain. Every inclusively 
valid sentence is logically valid, but the converse does not hold. To see this, 
let f stand for a sentence C ∧ ¬C, where C is some fixed sentence. Now, f is false 
in the empty domain but (∀x)f is true in the empty domain (since it begins 
with a universal quantifier). Thus the sentence (∀x)f ⇒ f is false in the empty 
domain and, therefore, not inclusively valid. However, it is logically valid, 
since every formula of the form (∀x)B ⇒ B is logically valid.
The problem of determining the inclusive validity of a sentence is reduc-
ible to that of determining its logical validity, since we know how to deter-
mine whether a sentence is true in the empty domain. Since the problem of 
determining logical validity will turn out to be unsolvable (by Proposition 
3.54), the same applies to inclusive validity.
*	 For example, an individual constant b can be replaced by a new monadic predicate letter P, 
together with the axiom (∃y)(∀x)(P(x) ⇔ x = y). Any axiom B(b) should be replaced by (∀x)(P(x) 
⇒ B(x)).

148
Introduction to Mathematical Logic
Now let us turn to the problem of finding an axiom system whose theo-
rems are the inclusively valid sentences. We shall adapt for this purpose an 
axiom system PP# based on Exercise 2.28. As axioms we take all the follow-
ing formulas:
(A1) B ⇒ (C ⇒ B)
(A2) (B ⇒ (C ⇒ D)) ⇒ ((B ⇒ C) ⇒ (B ⇒ D))
(A3) (¬C ⇒ ¬B) ⇒ ((¬C ⇒ B) ⇒ C)
(A4) (∀x)B(x) ⇒ B(y) if B(x) is a wf of L and y is a variable that is free for x in 
B(x). (Recall that, if y is x itself, then the axiom has the form (∀x)B ⇒ B. 
In addition, x need not be free in B(x).)
(A5) (∀x)(B ⇒ C) ⇒ (B ⇒ (∀x)C) if B contains no free occurrences of x.
(A6) (∀y1) … (∀yn)(B ⇒ C) ⇒ [(∀y1) … (∀yn)B ⇒ (∀y1) … (∀yn)C]
together with all formulas obtained by prefixing any sequence of universal 
quantifiers to instances of (A1)–(A6).
Modus ponens (MP) will be the only rule of inference.
PP denotes the pure first-order predicate calculus, whose axioms are (A1)–
(A5), whose rules of inference are MP and Gen, and whose language contains 
no individual constants or function letters. By Gödel’s completeness theorem 
(Corollary 2.19), the theorems of PP are the same as the logically valid for-
mulas in PP. Exercise 2.28 shows first that Gen is a derived rule of inference 
of PP#, that is, if ⊢PP# D, then ⊢PP# (∀x)D, and second that PP and PP# have the 
same theorems. Hence, the theorems of PP# are the logically valid formulas.
Let PPS# be the same system as PP# except that, as axioms, we take only the 
axioms of PP# that are sentences. Since MP takes sentences into sentences, 
all theorems of PPS# are sentences. Since all axioms of PPS# are axioms of 
PP#, all theorems of PPS# are logically valid sentences. Let us show that the 
converse holds.
Proposition 2.49
Every logically valid sentence is a theorem of PPS#.
Proof
Let B be any logically valid sentence. We know that B is a theorem of PP#. 
Let us show that B is a theorem of PPS#. In a proof of B in PP#, let u1, …, un be 
the free variables (if any) in the proof, and prefix (∀u1) … (∀un) to all steps of 
the proof. Then each step goes into a theorem of PPS#. To see this, first note 
that axioms of PP# go into axioms of PPS#. Second, assume that D comes from 
C and C ⇒ D by MP in the original proof and that (∀u1) … (∀un)C and (∀u1) … 
(∀un)(C ⇒ D) are provable in PPS#. Since (∀u1) … (∀un)(C ⇒ D) ⇒ [(∀u1) … (∀un)C 
⇒ (∀u1) … (∀un)D] is an instance of axiom (A6) of PPS#, it follows that (∀u1) … 
(∀un)D is provable in PPS#. Thus, (∀u1) … (∀un)B is a theorem of PPS#. Then n 
applications of axiom (A4) and MP show that B is a theorem of PPS#.

149
First-Order Logic and Model Theory
Not all axioms of PPS# are inclusively valid. For example, the sentence (∀x) f ⇒ 
f discussed earlier is an instance of axiom (A4) that is not inclusively valid. So, 
in order to find an axiom system for inclusive validity, we must modify PPS#.
If P is a sequence of variables u1, …, un, then by ∀P we shall mean the 
expression (∀u1) … (∀un).
Let the axiom system ETH be obtained from PPS# by changing axiom 
(A4) into:
(A4′) All sentences of the form ∀P[(∀x)B(x) ⇒ B(y)], where y is free for x in 
B(x) and x is free in B(x), and P is a sequence of variables that includes all 
variables free in B (and possibly others).
MP is the only rule of inference.
It is obvious that all axioms of ETH are inclusively valid.
Lemma 2.50
If T is an instance of a tautology and P is a sequence of variables that 
­contains all free variables in T,  then ⊢ETH ∀PT.
Proof
By the completeness of axioms (A1)–(A3) for the propositional calculus, there 
is a proof of T   using MP and instances of (A1)–(A3). If we prefix ∀P to all 
steps of that proof, the resulting sentences are all theorems of ETH. In the 
case when an original step B was an instance of (A1)–(A3), ∀PB is an axiom 
of ETH. For steps that result from MP, we use axiom (A6).
Lemma 2.51
If P is a sequence of variables that includes all free variables of B ⇒ C, and 
⊢ETH ∀PB and ⊢ETH ∀P[B ⇒ C], then ⊢ETH ∀PC.
Proof
Use axiom (A6) and MP.
Lemma 2.52
If P is a sequence of variables that includes all free variables of B, C, D, and 
⊢ETH ∀P[B ⇒ C] and ⊢ETH ∀P[C ⇒ D], then ⊢ETH ∀P[B ⇒ D].
Proof
Use the tautology (B ⇒ C ⇒ ((C ⇒ D) ⇒ (B ⇒ D)), Lemma 2.50, and Lemma 
2.51 twice.

150
Introduction to Mathematical Logic
Lemma 2.53
If x is not free in B and P is a sequence of variables that contains all free vari-
ables of B, ⊢ETH ∀P[B ⇒ (∀x)B].
Proof
By axiom (A5), ⊢ETH ∀P[(∀x)(B ⇒ B) ⇒ (B ⇒ (∀x) B)]. By Lemma 2.50, ⊢ETH 
∀P[(∀x)(B ⇒ B)]. Now use Lemma 2.51.
Corollary 2.54
If B has no free variables, then ⊢ETH B ⇒ (∀x)B.
Lemma 2.55
If x is not free in B and P is a sequence of variables that includes all variables 
free in B, then ⊢ETH ∀P[¬(∀x) f ⇒ ((∀x)B ⇒ B)].
Proof
⊢ETH ∀P[¬B ⇒ (B ⇒ f)] by Lemma 2.50. By Lemma 2.53, ⊢ETH ∀P[(B ⇒ f) ⇒ (∀x)
(B ⇒ f)]. Hence, by Lemma 2.52, ⊢ETH ∀P[¬B ⇒ (∀x)(B ⇒ f)]. By axiom (A6), ⊢ETH 
∀P[(∀x)(B ⇒ f) ⇒ ((∀x)B ⇒ (∀x)f)]. Hence, by Lemma 2.52, ⊢ETH ∀P[¬B ⇒ ((∀x)B 
⇒ (∀x)f)]. Since [¬B ⇒ ((∀x)B ⇒ (∀x)f)] ⇒ [¬(∀x)f ⇒ ((∀x)B ⇒ B)] is an instance 
of a tautology, Lemmas 2.50 and 2.51 yield ⊢ETH ∀P[¬(∀x)f ⇒ ((∀x)B ⇒ B)].
Proposition 2.56
ETH + {¬(∀x)f} is a complete axiom system for logical validity, that is, a sen-
tence is logically valid if and only if it is a theorem of the system.
Proof
All axioms of the system are logically valid. (Note that (∀x)f is false in all 
interpretations with a nonempty domain and, therefore, ¬(∀x)f is true in all 
such domains.) By Proposition 2.49, all logically valid sentences are prov-
able in PPS#. The only axioms of PPS# missing from ETH are those of the 
form ∀P[(∀x)B ⇒ B], where x is not free in B and P is any sequence of vari-
ables that include all free variables of B. By Lemma 2.55, ⊢ETH ∀P[¬(∀x)f ⇒ 
((∀x)B ⇒ B)]. By Corollary 2.54, ∀P[¬(∀x)f] will be derivable in ETH + {¬(∀x)f}. 
Hence, ∀P[(∀x)B ⇒ B] is obtained by using axiom (A6).

151
First-Order Logic and Model Theory
Lemma 2.57
If P is a sequence of variables that include all free variables of B, ⊢ETH ∀P[(∀x)
f ⇒ ((∀x)B ⇔ t)], where t is ¬ f.
Proof
Since f ⇒ B is an instance of a tautology, Lemma 2.50 yields ⊢ETH ∀P(∀x)[f ⇒ 
B]. By axiom (A6), ⊢ETH ∀P [(∀x)[f ⇒ B] ⇒ [(∀x)f ⇒ (∀x)B]]. Hence, ⊢ETH ∀P[(∀x)
f ⇒ (∀x)B] by Lemma 2.51. Since (∀x)B ⇒ [(∀x)B ⇔ t] is an instance of a tautol-
ogy, Lemma 2.50 yields ⊢ETH ∀P[(∀x)B ⇒ [(∀x)B ⇔ t]]. Now, by Lemma 2.52, 
⊢ETH ∀P [(∀x)f ⇒ [(∀x)B ⇔ t]].
Given a formula B, construct a formula B* in the following way. Moving 
from left to right, replace each universal quantifier and its scope by t.
Lemma 2.58
If P is a sequence of variables that include all free variables of B, then 
⊢ETH ∀P [(∀x) f ⇒ [B ⇔ B*]].
Proof
Apply Lemma 2.57 successively to the formulas obtained in the stepwise 
construction of B*. We leave the details to the reader.
Proposition 2.59
ETH is a complete axiom system for inclusive validity, that is, a sentence B is 
inclusively valid if and only if it is a theorem of ETH.
Proof
Assume B is a sentence valid for all interpretations. We must show that ⊢ETH 
B. Since B is valid in all nonempty domains, Proposition 2.56 implies that B 
is provable in ETH + {¬(∀x)f}. Hence, by the deduction theorem,
	
( )
(
)
.
+
∀
⇒
⊢ETH ¬
x f
B
Now, by Lemma 2.58,
	
(
)
(
)
[
]
%
x f
B
B
⊢ETH ∀
⇒
⇔
*

152
Introduction to Mathematical Logic
(Since B has no free variables, we can take P in Lemma 2.58 to be empty.) 
Hence, [(∀x)f ⇒ [B ⇔ B*]] is valid for all interpretations. Since (∀x)f is valid 
in the empty domain and B is valid for all interpretations, B* is valid in the 
empty domain. But B* is a truth-functional combination of ts. So, B* must 
be truth-functionally equivalent to either t or f. Since it is valid in the empty 
domain, it is truth-functionally equivalent to t. Hence, ⊢ETH B*. Therefore by 
(%), ⊢ETH (∀x)f ⇒ B. This, together with (+), yields ⊢ETH B.
The ideas and methods used in this section stem largely, but not entirely, 
from a paper by Hailperin (1953).* That paper also made use of an idea in 
Mostowski (1951b), the idea that underlies the proof of Proposition 2.59. 
Mostowski’s approach to the logic of the empty domain is quite different 
from Hailperin’s and results in a substantially different axiom system for 
inclusive validity. For example, when B does not contain x free, Mostowski 
interprets (∀x)B and (∃x)B to be B itself. This makes (∀x)f equivalent to f, 
rather than to t, as in our development.
*	 The name ETH comes from “empty domain” and “Theodore Hailperin.” My simplification of 
Hailperin’s axiom system was suggested by a similar simplification in Quine (1954).

153
3
Formal Number Theory
3.1  An Axiom System
Together with geometry, the theory of numbers is the most immediately intui-
tive of all branches of mathematics. It is not surprising, then, that attempts to 
formalize mathematics and to establish a rigorous foundation for mathemat-
ics should begin with number theory. The first semiaxiomatic presentation of 
this subject was given by Dedekind in 1879 and, in a slightly modified form, 
has come to be known as Peano’s postulates.* It can be formulated as follows:
(P1) 0 is a natural number.†
(P2) If x is a natural number, there is another natural number denoted 
by x′ (and called the successor of x).‡
(P3) 0 ≠ x′ for every natural number x.
(P4) If x′ =  y′, then x = y.
(P5) If Q is a property that may or may not hold for any given natural 
number, and if (I) 0 has the property Q and (II) whenever a natural 
number x has the property Q, then x′ has the property Q, then 
all natural numbers have the property Q (mathematical induction 
principle).
These axioms, together with a certain amount of set theory, can be used to 
develop not only number theory but also the theory of rational, real, and 
complex numbers (see Mendelson, 1973). However, the axioms involve cer-
tain intuitive notions, such as “property,” that prevent this system from 
being a rigorous formalization. We therefore shall build a first-order theory 
S that is based upon Peano’s postulates and seems to be adequate for the 
proofs of all the basic results of elementary number theory.
The language LA of our theory S will be called the language of arithmetic. 
LA has a single predicate letter A1
2. As usual, we shall write t = s for A t s
1
2( , ). 
*	 For historical information, see Wang (1957).
†	 The natural numbers are supposed to be the nonnegative integers 0, 1, 2, … .
‡	 The intuitive meaning of x′ is x + 1.

154
Introduction to Mathematical Logic
LA has one individual constant a1. We shall use 0 as an alternative notation 
for a1. Finally, LA has three function letters, f
f
1
1
1
2
,
, and f2
2. We shall write (t′) 
instead of f
t
t
s
1
1( ), (
)
+
 instead of f
t s
1
2( , ), and (t s⋅) instead of f
t s
2
2( , ). However, 
we shall write t′, t + s, and t s⋅ instead of (t′), (t + s), and (t s⋅) whenever this 
will cause no confusion.
The proper axioms of S are
(S1)	 x1 = x2 ⇒ (x1 = x3 ⇒ x2 = x3)
(S2)	 x1 = x2 ⇒ x1′ = x2′
(S3)	 0 ≠ x1′
(S4)	 x1′ = x2′ ⇒ x1 = x2
(S5)	 x1 + 0 = x1
(S6)	 x1 + x2′ = (x1 + x2)′
(S7)	 x1 0
⋅ = 0
(S8)	 x
x
x
x
x
1
2
1
2
1
⋅
′ =
⋅
+
(
)
(
)
(S9)	 B (0) ⇒ ((∀x)(B (x) ⇒ B (x′)) ⇒ (∀x)B (x)) for any wf B (x) of S.
We shall call (S9) the principle of mathematical induction. Notice that axioms 
(S1)–(S8) are particular wfs, whereas (S9) is an axiom schema providing an 
infinite number of axioms.*
Axioms (S3) and (S4) correspond to Peano postulates (P3) and (P4), respec-
tively. Peano’s axioms (P1) and (P2) are taken care of by the presence of 0 as 
an individual constant and f1
1 as a function letter. Our axioms (S1) and (S2) 
furnish some needed properties of equality; they would have been assumed 
as intuitively obvious by Dedekind and Peano. Axioms (S5)–(S8) are the 
recursion equations for addition and multiplication. They were not assumed 
by Dedekind and Peano because the existence of operations + and · satisfy-
ing (S5)–(S8) is derivable by means of intuitive set theory, which was presup-
posed as a background theory (see Mendelson, 1973, Chapter 2, Theorems 
3.1 and 5.1).
Any theory that has the same theorems as S is often referred to in the lit-
erature as Peano arithmetic, or simply PA.
From (S9) by MP, we can obtain the induction rule:
	
B
B
B
B
0( )
∀
(
)
( ) ⇒
( )
(
)
∀
(
)
( )
′
,
.
x
x
x
x
x
⊢s
It will be our immediate aim to establish the usual rules of equality; that is, 
we shall show that the properties (A6) and (A7) of equality (see page 93) are 
derivable in S and, hence, that S is a first-order theory with equality.
*	 However, (S9) cannot fully correspond to Peano’s postulate (P5), since the latter refers intui-
tively to the 2
0
ℵ properties of natural numbers, whereas (S9) can take care of only the denu-
merable number of properties defined by wfs of LA.

155
Formal Number Theory
First, for convenience and brevity in carrying out proofs, we cite some 
immediate, trivial consequences of the axioms.
Lemma 3.1
For any terms t, s, r of LA, the following wfs are theorems of S.
(S1′)	 t = r ⇒ (t = s ⇒ r = s)
(S2′)	 t = r ⇒ t′ = r′
(S3′)	 0 ≠ t′
(S4′)	 t′ = r′ ⇒ t = r
(S5′)	 t + 0 = t
(S6′)	 t + r′ = (t + r)′
(S7′)	 t⋅
=
0
0
(S8′)	 t r
t r
t
⋅′ =
⋅
+
(
)
Proof
(S1′)–(S8′) follow from (S1)–(S8), respectively. First form the closure by means 
of Gen, use Exercise 2.48 to change all the bound variables to variables not 
occurring in terms t, r, s, and then apply rule A4 with the appropriate terms 
t, r, s.*
Proposition 3.2
For any terms t, s, r, the following wfs are theorems of S.
	 a.	 t = t
	 b.	 t = r ⇒ r = t
	 c.	 t = r ⇒ (r = s ⇒ t = s)
	 d.	 r = t ⇒ (s = t ⇒ r = s)
	 e.	 t = r ⇒ t + s = r + s
	 f.	 t = 0 + t
	 g.	 t′ + r = (t + r)′
	 h.	 t + r = r + t
	 i.	 t = r ⇒ s + t = s + r
	
j.	 (t + r) + s = t + (r + s)
*	 The change of bound variables is necessary in some cases. For example, if we want to obtain 
x2 = x1 ⇒ x2′ = x1′ from x1 = x2 ⇒ x1′ = x2′, we first obtain (∀x1)(∀x2)(x1 = x2 ⇒ x1′ = x2′). We can-
not apply rule A4 to drop (∀x1) and replace x1 by x2, since x2 is not free for x1 in (∀x2)(x1 = x2 ⇒ 
x1′ = x2′). From now on, we shall assume without explicit mention that the reader is aware that 
we sometimes have to change bound variables when we use Gen and rule A4.

156
Introduction to Mathematical Logic
	 k.	 t = r ⇒t s⋅ = r s⋅
	 l.	 0
0
⋅=
t
	 m.	
′⋅
= ⋅+
t r
t r
r
	 n.	 t r
r t
⋅
=
⋅
	 o.	 t
r
s t
s r
=
⇒⋅= ⋅
Proof
	
a.	 1.	 t + 0 = t	
(S5′)
	
	
2.	 (t + 0 = t) ⇒ (t + 0 = t ⇒ t = t)	
(S1′)
	
	
3.	 t + 0 = t ⇒ t = t	
1, 2, MP
	
	
4.	 t = t	
1, 3, MP
	
b.	 1.	 t = r ⇒ (t = t ⇒ r = t)	
(S1′)
	
	
2.	 t = t ⇒ (t = r ⇒ r = t)	
1, tautology, MP
	
	
3.	 t = r ⇒ r = t	
2, part (a), MP
	
c.	 1.	 r = t ⇒ (r = s ⇒ t = s)	
(S1′)
	
	
2.	 t = r ⇒ r = t	
Part (b)
	
	
3.	 t = r ⇒ (r = s ⇒ t = s)	
1, 2, tautology, MP
	
d.	 1.	 r = t ⇒ (t = s ⇒ r = s)	
Part (c)
	
	
2.	 t = s ⇒ (r = t ⇒ r = s)	
1, tautology, MP
	
	
3.	 s = t ⇒ t = s	
Part (b)
	
	
4.	 s = t ⇒ (r = t ⇒ r = s)	
2, 3, tautology, MP
	
e.	 Apply the induction rule to B (z): x = y ⇒ x + z = y + z.
	
	
i.	 1.	 x + 0 = x	
(S5′)
	
	
	
2.	 y + 0 = y	
(S5′)
	
	
	
3.	 x = y	
Hyp
	
	
	
4.	 x + 0 = y	
1, 3, part (c), MP
	
	
	
5.	 x + 0 = y + 0	
4, 2, part (d), MP
	
	
	
6.	 ⊢S x = y ⇒ x + 0 = y + 0	
1–5, deduction theorem
	
	
Thus, ⊢S B (0).
	
	
ii.	 1.	 x = y ⇒ x + z = y + z	
Hyp
	
	
	
2.	 x = y	
Hyp
	
	
	
3.	 x + z′ = (x + z)′	
(S6′)
	
	
	
4.	 y + z′ = (y + z)′	
(S6′)
	
	
	
5.	 x + z = y + z	
1, 2, MP
	
	
	
6.	 (x + z)′ = (y + z)′	
5, (S2′), MP
	
	
	
7.	 x + z′ = (y + z)′	
3, 6, part (c), MP
	
	
	
8.	 x + z′ = y + z′	
4, 7, part (d), MP
	
	
	
9.	 ⊢S (x = y ⇒ x + z = y + z) ⇒	 1–8, deduction theorem twice
	
	
	
	
(x = y ⇒ x + z′ = y + z′)
Thus, ⊢S B (z) ⇒ B (z′), and, by Gen, ⊢S(∀z)(B (z) ⇒ B (z′)). Hence, 
⊢S(∀z)B (z) by the induction rule. Therefore, by Gen and rule A4, 
⊢S t = r ⇒ t + s = r + s.

157
Formal Number Theory
	
f.	 Let B (x) be x = 0 + x.
	
	
i.	 ⊢S 0 = 0 + 0 by (S5′), part (b) and MP; thus, ⊢S B (0).
	
	
ii.	 1.	 x = 0 + x	
Hyp
	
	
	
2.	 0 + x′ = (0 + x)′	
(S6′)
	
	
	
3.	 x′ = (0 + x)′	
1, (S2′), MP
	
	
	
4.	 x′ = 0 + x′	
3, 2, part (d), MP
	
	
	
5.	 ⊢S x = 0 + x ⇒ x′ = 0 + x′	
1–4, deduction theorem
	
	
Thus, ⊢S B (x) ⇒ B (x′) and, by Gen, ⊢S (∀x)(B (x) ⇒ B (x′)). So, by (i), 
(ii) and the induction rule, ⊢S (∀x)(x = 0 + x), and then, by rule A4, 
⊢S t = 0 + t.
	
g.	 Let B (y) be x′ + y =(x + y)′.
	
	
i.	 1.	 x′ + 0 = x′	
(S5′)
	
	
	
2.	 x + 0 = x	
(S5′)
	
	
	
3.	 (x + 0)′ = x′	
2, (S2′), MP
	
	
	
4.	 x′ + 0 =(x + 0)′	
1, 3, part (d), MP
	
	
Thus, ⊢S B (0).
	
	
ii.	 1.	 x′ + y = (x + y)′	
Hyp
	
	
	
2.	 x′ + y′ = (x′ + y)′	
(S6′)	
	
	
	
3.	 (x′ + y)′ = (x + y)″	
1, (S2′), MP
	
	
	
4.	 x′ + y′ = (x + y)″	
2, 3, part (c), MP
	
	
	
5.	 x + y′ = (x + y)′	
(S6′)
	
	
	
6.	 (x + y′)′ = (x + y)″	
5, (S2′), MP
	
	
	
7.	 x′ + y′ = (x + y′)′	
4, 6, part (d), MP
	
	
	
8.	 ⊢S x′ + y = (x + y)′ ⇒	
1–7, deduction theorem
	
	
	
	
x′ + y′ = (x + y′)′
	
	
Thus, ⊢S B (y) ⇒ B (y′), and, by Gen, ⊢S (∀y)(B (y) ⇒ B (y′)). Hence, by 
(i), (ii), and the induction rule, ⊢S (∀y)(x′ + y =(x + y)′). By Gen and 
rule A4, ⊢S t′ + r = (t + r)′.
	
h.	 Let B (y) be x + y = y + x.
	
	
i.	 1.	 x + 0 = x	
(S5′)
	
	
	
2.	 x = 0 + x	
Part (f)
	
	
	
3.	 x + 0 = 0 + x	
1, 2, part (c), MP
	
	
Thus, ⊢S B (0).
	
	
ii.	 1.	 x + y = y + x	
Hyp
	
	
	
2.	 x + y′ =(x + y)′	
(S6′)
	
	
	
3.	 y′ + x =(y + x)′	
Part (g)
	
	
	
4.	 (x + y)′ = (y + x)′	
1, (S2′), MP
	
	
	
5.	 x + y′ = (y + x)′	
2, 4, part (c), MP
	
	
	
6.	 x + y′ = y′ + x	
5, 3, part (d), MP
	
	
	
7.	 ⊢S x + y = y + x ⇒	
1–6, deduction theorem
	
	
	
	
x + y′ = y′ + x
Thus, ⊢S B (y) ⇒ B (y′) and, by Gen, ⊢S (∀y)(B (y) ⇒ B (y)′). So, by (i), 
(ii) and the induction rule, ⊢S (∀y)(x + y = y + x). Then, by rule A4, 
Gen and rule A4, ⊢S t + r = r + t.

158
Introduction to Mathematical Logic
	
i.	
1.	 t = r ⇒ t + s = r + s	
Part (e)
		
	
2.	 t + s = s + t	
Part (h)
		
	
3.	 r + s = s + r	
Part (h)
		
	
4.	 t = r	
Hyp
		
	
5.	 t + s = r + s	
1, 4, MP
		
	
6.	 s + t = r + s	
2, 5, (S1′) MP
		
	
7.	 s + t = s + r	
6, 3, part (c), MP
		
	
8.	 ⊢S t = r ⇒ s + t = s + r	
1–7, deduction theorem
		
j.	 Let B (z) be (x + y) + z = x + (y + z).
		
	
i.	 1.	
(x + y) + 0 = x + y	
(S5′)
		
	
	
2.	
y + 0 = y	
(S5′)
		
	
	
3.	
x + (y + 0) = x + y	
2, part (j), MP
		
	
	
4.	
(x + y) + 0 = x + (y + 0)	
1, 3, part (d), MP
		
	
Thus, ⊢S B (0).
		
	
ii.	 1.	 (x + y) + z = x + (y + z)	
Hyp
		
	
	
2.	 (x + y) + z′ =((x + y) + z)′	
(S6′)
		
	
	
3.	 ((x + y) + z)′ =(x +(y + z))′	
1, (S2′), MP
		
	
	
4.	 (x + y) + z′ =(x +(y + z))′	
2, 3, part (c), MP
		
	
	
5.	 y + z′ = (y + z)′	
(S6′)
		
	
	
6.	 x + (y + z′) = x + (y + z)′	
5, part (i), MP
		
	
	
7.	 x + (y + z)′ = (x + (y + z))′	
(S6′)
		
	
	
8.	 x +(y + z′) = (x + (y + z))′	
6, 7, part (c), MP
		
	
	
9.	 (x + y) + z′ = x + (y + z′)	
4, 8, part (d), MP
		
	
	
10.	 ⊢S (x + y) + z = x + (y + z) ⇒	
1–9, deduction theorem
		
	
	
	
(x + y) + z′ = x +(y + z′)
Thus, ⊢S B (z) ⇒ B (z′) and, by Gen, ⊢S (∀z)(B (z)) ⇒ (B (z′)). So, by (i), (ii) and 
the induction rule, ⊢S (∀z)B (z), and then, by Gen and rule A4, ⊢S (t + r) + s = 
t + (r + s).
Parts (k)–(o) are left as exercises.
Corollary 3.3
S is a theory with equality.
Proof
By Proposition 2.25, this reduces to parts (a)–(e), (i), (k) and (o) of proposition 
3.2, and (S2′).
Notice that the interpretation in which
	
a.	 The set of nonnegative integers is the domain
	
b.	 The integer 0 is the interpretation of the symbol 0

159
Formal Number Theory
	
c.	 The successor operation (addition of 1) is the interpretation of the ′ 
function (that is, of f1
1)
	
d.	 Ordinary addition and multiplication are the interpretations of + 
and ·
	
e.	 The interpretation of the predicate letter = is the identity relation
is a normal model for S. This model is called the standard interpretation or 
standard model. Any normal model for S that is not isomorphic to the stan-
dard model will be called a nonstandard model for S.
If we recognize the standard interpretation to be a model for S, then, of 
course, S is consistent. However, this kind of semantic argument, involving 
as it does a certain amount of set-theoretic reasoning, is regarded by some 
as too precarious to serve as a basis for consistency proofs. Moreover, we 
have not proved in a rigorous way that the axioms of S are true under the 
standard interpretation, but we have taken it as intuitively obvious. For these 
and other reasons, when the consistency of S enters into the argument of a 
proof, it is common practice to take the statement of the consistency of S as 
an explicit unproved assumption.
Some important additional properties of addition and multiplication are 
covered by the following result.
Proposition 3.4
For any terms t, r, s, the following wfs are theorems of S.
	
a.	 t
r
s
t r
t s
⋅
+
=
⋅
+
⋅
(
)
(
)
(
) (distributivity)
	
b.	 (
)
(
)
(
)
r
s t
r t
s t
+
⋅=
⋅
+
⋅ (distributivity)
	
c.	 (
)
(
)
t r
s
t
r s
⋅
⋅= ⋅
⋅
 (associativity of ·)
	
d.	 t + s = r + s ⇒ t = r (cancellation law for +)
Proof
	
a.	 Prove ⊢S x · (y + z) = (x · y) + (x · z) by induction on z.
	
b.	 Use part (a) and Proposition 3.2(n).
	
c.	 Prove ⊢S (x · y) · z = x · (y · z) by induction on z.
	
d.	 Prove ⊢S x + z = y + z ⇒ x = y by induction on z. This requires, for the 
first time, use of (S4′).
The terms 0, 0′, 0″, 0″′, … we shall call numerals and denote by 0 1 2 3
, , , , … 
More precisely, 0 is 0 and, for any natural number n n
,
+1 is (n)′. In general, 
if n is a natural number, n stands for the numeral consisting of 0 followed 
by n strokes. The numerals can be defined recursively by stating that 0 is a 
numeral and, if u is a numeral, then u′ is also a numeral.

160
Introduction to Mathematical Logic
Proposition 3.5
The following are theorems of S.
	
a.	 t
t
+
= ′
1
	
b.	 t
t
⋅
=
1
	
c.	 t
t
t
⋅
= +
2
	
d.	 t + s = 0 ⇒ t = 0 ∧ s = 0
	
e.	 t ≠ 0 ⇒ (s · t = 0 ⇒ s = 0)
	
f.	 t
s
t
s
t
s
+
=
⇒
=
∧
=
∨
=
∧
=
1
0
1
1
0
(
)
(
)
	
g.	 t s
t
s
⋅=
⇒
=
∧
=
1
1
1
(
)
	
h.	 t ≠ 0 ⇒ (∃y)(t = y′)
	
i.	 s ≠ 0 ⇒ (t · s = r · s ⇒ t = r)
	
j.	 t ≠ 0 ⇒ (t ≠ 1 ⇒ (∃y)(t = y″))
Proof
	
a.	 1.	 t + 0′ = (t + 0)′	
(S6′)
	
	
2.	 t + 0 = t	
(S5′)
	
	
3.	 (t + 0)′ = t′	
2, (S2′), MP
	
	
4.	 t + 0′ = t′	
1, 3, Proposition 3.2(c), MP
	
	
5.	 t
t
+
= ′
1
	
4, abbreviation
	
b.	 1.	 t · 0′ = t · 0 + t	
(S8′)
	
	
2.	 t · 0 = 0	
(S7′)
	
	
3.	 t · 0 + t = 0 + t	
2, Proposition 3.2(e), MP
	
	
4.	 t · 0′ = 0 + t	
1, 3, Proposition 3.2(c), MP
	
	
5.	 0 + t = t	
Proposition 3.2(f, b), MP
	
	
6.	 t · 0′ = t	
4, 5, Proposition 3.2(c), MP
	
	
7.	 t
t
⋅
=
1
	
6, abbreviation
	
c.	 1.	 t
t
t
⋅
′=
⋅
(
) +
( )
1
1
	
(S8′)
	
	
2.	 t
t
⋅
=
1
	
Part (b)
	
	
3.	
t
t
t
t
⋅
(
) + = +
1
	
2, Proposition 3.2(e), MP
	
	
4.	 t
t
t
⋅( )′= +
1
	
1, 3, Proposition 3.2(c), MP
	
	
5.	 t
t
t
⋅
= +
2
	
4, abbreviation
	
d.	 Let B (y) be x + y = 0 ⇒ x = 0 ∧ y = 0. It is easy to prove that ⊢S B (0). 
Also, since ⊢S (x + y)′ ≠ 0 by (S3′) and Proposition 3.2(b), it follows 
by (S6′) that ⊢S x + y′ ≠ 0. Hence, ⊢S B (y′) by the tautology ¬A ⇒ 
(A ⇒ B). So, ⊢S B (y) ⇒ B (y′) by the tautology A ⇒ (B ⇒ A). Then, by 
the induction rule, ⊢S (∀y)B (y) and then, by rule A4, Gen and rule 
A4, we obtain the theorem.
	
e.	 The proof is similar to that for part (d) and is left as an exercise.
	
f.	 Use induction on y in the wf x
y
x
y
x
y
+
= ⇒
= ∧
=
∨
=
∧
=
1
0
1
1
0
((
)
(
)).
	
g.	 Use induction on y in x y
x
y
⋅
=
⇒
=
∧
=
1
1
1
(
).
	
h.	 Perform induction on x in x ≠ 0 ⇒ (∃w)(x = w′).

161
Formal Number Theory
	
i.	 Let B (y) be (∀x)(z ≠ 0 ⇒ (x · z = y · z ⇒ x = y)).
	
	
i.	 1.	 z ≠ 0	
Hyp
	
	
	
2.	 x · z = 0 · z	
Hyp
	
	
	
3.	 0 · z = 0	
Proposition 3.2(l)
	
	
	
4.	 x · z = 0	
2, 3 Proposition 3.2(c), MP
	
	
	
5.	 x = 0	
1, 4, part(e), MP
	
	
	
6.	 ⊢S z ≠ 0 ⇒ (x · z = 0 · z ⇒ x = 0)	
1–5, deduction theorem
	
	
	
7.	 ⊢S (∀z)(z ≠ 0 ⇒ (x · z = 0 · z 	
6, Gen
	
	
	
	 	
⇒ x = 0))
	
	
	
	Thus, ⊢S B (0).
	
	
ii.	1.	 (∀x)(z ≠ 0 ⇒ (x · z = y · z ⇒ x = y))	
Hyp (B (y))
	
	
	
2.	 z ≠ 0	
Hyp
	
	
	
3.	 x · z = y′ · z	
Hyp
	
	
	
4.	 y′ ≠ 0	
(S3′), Proposition 3.2(b), MP
	
	
	
5.	 y′ · z ≠ 0	
2, 4, part (e), a tautology, MP
	
	
	
6.	 x · z ≠ 0	
3, 5, (S1′), tautologies, MP
	
	
	
7.	 x ≠ 0	
6, (S7′), Proposition 3.2(o, n),
	
	
(S1′), tautologies, MP
	
	
	
8.	 (∃w)(x = w′)	
7, part (h), MP
	
	
	
9.	 x = b′	
8, rule C
	
	
	 10.	 b′ · z = y′ · z	
3, 9, (A7), MP
	
	
	 11.	 b · z + z = y · z + z	
10, Proposition 3.2(m, d), MP
	
	
	 12.	 b · z = y · z	
11, Proposition 3.4(d), MP
	
	
	 13.	 z ≠ 0 ⇒ (b · z = y · z ⇒ b = y)	
1, rule A4
	
	
	 14.	 b · z = y · z ⇒ b = y	
2, 13, MP
	
	
	 15.	 b = y	
12, 14, MP
	
	
	 16.	 b′ = y′	
15, (S2′), MP
	
	
	 17.	 x = y′	
9, 16, Proposition 3.2(c), MP
	
	
	 18.	 B (y), z ≠ 0, x · z = y′ · z ⊢S x = y′	
1–17, Proposition 2.10
	
	
	 19.	 B (y) ⊢S z ≠ 0 ⇒	
18, deduction theorem twice
	
	
	 	
(x · z = y′ · z ⇒ x = y′)
	
	
	 20.	 B (y) ⊢S(∀x)(z ≠ 0 ⇒	
19, Gen
	
	
	 	
(x · z = y′ · z ⇒ x = y′))
	
	
	 21.	 ⊢S B (y) ⇒ B (y′)	
20, deduction theorem
	
	
Hence, by (i), (ii), Gen, and the induction rule, we obtain ⊢S(∀y)B (y) 
and then, by Gen and rule A4, we have the desired result.
	
j.	 This is left as an exercise.
Proposition 3.6
	
a.	 Let m and n be any natural numbers.
	
	
i.	 If m ≠ n, then ⊢S m
n
≠
.
	
	
ii.	 ⊢S m
n
m
n
+
=
+  and ⊢S m n
m n
⋅
=
⋅.

162
Introduction to Mathematical Logic
	
b.	
Any model for S is infinite.
	
c.	
For any cardinal number ℵβ, S has a normal model of cardinality ℵβ.
Proof
	
a.	 i.	 Assume m ≠ n. Either m < n or n < m. Say, m < n.
	
	
	
1.	 m
n
=
	
Hyp
	
	
	
2.	
m
n
times
times




 




′′
′
… = ′′′
′
…
0
0
	
1 is an abbreviation of 2
	
	
	
3.	 Apply (S4′) and MP m times in a row. We get 
n
m
Let
−
= ′′
′
…
times





0
0
 be 
n
m
−
−1. Since n > m, n −m −1 ≥ 0. Thus, we obtain 0 = t′.
	
	
	
4.	 0 ≠ t′	
(S3′)
	
	
	
5.	 0 = t′ ∧ 0 ≠ t′	
3, 4, conjunction introduction
	
	
	
6.	
⊢
m
n
t
t
=
= ′ ∧
≠
S 0
0
	
1–5
	
	
	
7.	 ⊢S m
n
≠
	
1–6, proof by contradiction
	
	
	
A similar proof holds in the case when n < m. (A more rigor-
ous proof can be given by induction in the metalanguage with 
respect to n.)
	
	
ii.	 We use induction in the metalanguage. First, m + 0 is m. 
Hence, ⊢S m +
=
0
 m + 0 by (S5′). Now assume ⊢S m
n
m
n
+
=
+ . 
Then ⊢S m
n
m
n
+
(
)′ =
+
′
( )  by (S2′) and (S6′). But m
n
+
+
(
)1  
is 
m
n
+
(
)′  and n +1 is n
( )′. Hence, ⊢S m
n
m
n
+
+
(
) =
+
+
(
)
1
1 . 
Thus, ⊢S m
n
m
n
+
=
+ . The proof that ⊢S m n
m n
⋅
=
⋅ is left as an 
exercise.
	
b.	 By part (a), (i), in a model for S the objects corresponding to the 
numerals must be distinct. But there are denumerably many 
numerals.
	
c.	 This follows from Corollary 2.34(c) and the fact that the standard 
model is an infinite normal model.
An order relation can be introduced by definition in S.
Definitions
	
t
s
w
w
w
t
s
t
s
t
s
t
s
t
s
s
t
t
s
s
t
t
s
<
∃
≠
∧
+ =
(
)
≤
< ∨=
>
<
≥
≤
/<
for
for
for
for
fo
(
)
0
r
and so on
¬
<
(
),
t
s
In the first definition, as usual, we choose w to be the first variable not in t or s.

163
Formal Number Theory
Proposition 3.7
For any terms t, r, s, the following are theorems.
	 a.	 t /< t
	 b.	 t < s ⇒ (s < r ⇒ t < r)
	 c.	 t < s ⇒ s /< t
	 d.	 t < s ⇔ t + r < s + r
	 e.	 t ≤ t
	
f.	 t ≤ s ⇒ (s ≤ r ⇒ t ≤ r)
	 g.	 t ≤ s ⇔ t + r ≤ s + r
	 h.	 t ≤ s ⇒ (s < r ⇒ t < r)
	
i.	 0 ≤ t
	
j.	 0 < t′
	 k.	 t < r ⇔ t′ ≤ r
	
l.	 t ≤ r ⇔ t < r′
	 m.	 t < t′
	 n.	 0
1 1
2 2
3
<
<
<
…
,
,
,
	 o.	 t ≠ r ⇒ (t < r ∨ r < t)
	 p.	 t = r ∨ t < r ∨ r < t
	 q.	 t ≤ r ∨ r ≤ t
	
r.	 t + r ≥ t
	 s.	 r ≠ 0 ⇒ t + r > t
	
t.	 r ≠ 0 ⇒ t · r ≥ t
	 u.	 r ≠ 0 ⇔ r > 0
	 v.	 r > 0 ⇒ (t > 0 ⇒ r · t > 0)
	 w.	 r ≠ 0 ⇒ (t > 1 ⇒ t · r > r)
	 x.	 r ≠ 0 ⇒ (t < s ⇔ t · r < s · r)
	 y.	 r ≠ 0 ⇒ (t ≤ s ⇔ t · r ≤ s · r)
	 z.	 t /< 0
	 z′.	 t ≤ r ∧ r ≤ t ⇒ t = r
Proof
	
a.	 1.	 t < t 	
Hyp
	
	
2.	 (∃w)(w ≠ 0 ∧ w + t = t)	
1 is an abbreviation of 2
	
	
3.	 b ≠ 0 ∧ b + t = t	
2, rule C
	
	
4.	 b + t = t	
3, conjunction rule
	
	
5.	 t = 0 + t	
Proposition 3.2(f)
	
	
6.	 b + t = 0 + t	
3, 4, Proposition 3.2(c), MP
	
	
7.	 b = 0	
6, Proposition 3.4(d), MP
	
	
8.	 b ≠ 0	
3, conjunction elimination
	
	
9.	 b = 0 ∧ b ≠ 0	
7, 8, conjunction elimination
	
	 10.	 0 = 0 ∧ 0 ≠ 0	
9, tautology: B ∧ ¬B ⇒ C, MP
	
	 11.	 t < t ⊢S 0 = 0 ∧ 0 ≠ 0	
1–10, Proposition 2.10
	
	 12.	 ⊢S t /< t	
1–11, proof by contradiction

164
Introduction to Mathematical Logic
	
b.	 1.	 t < s	
Hyp
	
	
2.	 s < r	
Hyp
	
	
3.	 (∃w)(w ≠ 0 ∧ w + t = s)	
1 is an abbreviation of 3
	
	
4.	 (∃v)(v ≠ 0 ∧ v + s = r)	
2 is an abbreviation of 4
	
	
5.	 b ≠ 0 ∧ b + t = s	
3, rule C
	
	
6.	 c ≠ 0 ∧ c + s = r	
4, rule C
	
	
7.	 b + t = s	
5, conjunction elimination
	
	
8.	 c + s = r	
6, conjunction elimination
	
	
9.	 c + (b + t) = c + s	
7, Proposition 3.2(i), MP
	
	 10.	 c + (b + t) = r	
9, 8, Proposition 3.2(c), MP
	
	 11.	 (c + b) + t = r	
10, Proposition 3.2(j, c), MP
	
	 12.	 b ≠ 0	
5, conjunction elimination
	
	 13.	 c + b ≠ 0	
12, Proposition 3.5(d), tautology, MP
	
	 14.	 c + b ≠ 0 ∧ (c + b) + t = r	
13, 11, conjunction introduction
	
	 15.	 (∃u)(u ≠ 0 ∧ u + t = r)	
14, rule E4
	
	 16.	 t < r	
Abbreviation of 15
	
	 17.	 ⊢S t < s ⇒ (s < r ⇒ t < r)	
1–15, Proposition 2.10,
	
deduction theorem
Parts (c)–(z′) are left as exercises.
Proposition 3.8
	
a.	 For any natural number k
x
x
k
x
k
,
.
⊢S
=
∨… ∨
=
⇔
≤
0
	
a′.	 For any natural number k and any wf B
B
B
B
,
( )
( )
( )
⊢S
0
1
∧
∧… ∧
⇔
k
	
	
(
)(
( )).
∀
≤
⇒
x x
k
x
B
	
b.	 For any natural number k
x
x
k
x
k
>
=
∨… ∨
=
−
⇔
<
0
0
1
,
(
)
⊢S
	
b′.	 For any natural number k > 0 and any wf B
B
,
( )
⊢S
0 ∧ 
B
B
B
( )
(
)
(
)(
( )).
1
1
∧… ∧
−
⇔∀
<
⇒
k
x x
k
x
	
c.	 ⊢S ((∀x)(x < y ⇒ B (x)) ∧ (∀x)(x ≥ y ⇒ C (x))) ⇒ (∀x)(B (x) ∨ C (x))
Proof
	
a.	 We prove ⊢S x
x
k
x
k
=
∨… ∨
=
⇔
≤
0
 by induction in the metalan-
guage on k. The case for 
⊢
k
x
x
=
=
⇔
≤
0
0
0
,
S
, is obvious from the 
definitions and Proposition 3.7, Assume as inductive hypothesis 
⊢S x
x
k
x
k
=
∨… ∨
=
⇔
≤
0
. Now assume x
x
k
x
k
=
∨… ∨
=
∨
=
+
0
1. 
But 
⊢S x
k
x
k
=
+
⇒
≤
+
1
1  and, by the inductive hypothesis, 
⊢S x
x
k
x
k
=
∨… ∨
=
⇒
≤
0
. Also ⊢S x
k
x
k
≤
⇒
≤
+1. Thus, x
k
≤
+1. So, 
⊢S x
x
k
x
k
x
k
=
∨… ∨
=
∨
=
+ ⇒
≤
+
0
1
1. Conversely, assume x
k
≤
+1. 
Then x
k
k
x
=
+
+
∨
<
1
1. If x
k
=
+1, then x
x
k
x
k
=
∨… ∨
=
∨
=
+
0
1. 
If x
k
<
+1, then since k +1 is ( ) ,
k ′  we have x
k
≤
 by Proposition 
3.7(l). By the inductive hypothesis, x
x
k
=
∨… ∨
=
0
, and, therefore, 

165
Formal Number Theory
x
x
k
x
k
=
∨… ∨
=
∨
=
+
0
1. In either case, x
x
k
x
k
=
∨… ∨
=
∨
=
+
0
1. 
This proves ⊢S x
k
≤
+
⇒
1
 x
x
k
x
k
=
∨… ∨
=
∨
=
+
0
1. From the induc-
tive hypothesis, we have derived ⊢S x
x
k
x
k
=
∨… ∨
=
+
⇔
≤
+
0
1
1 
and this completes the proof. (This proof has been given in an infor-
mal manner that we shall generally use from now on. In particular, 
the deduction theorem, the eliminability of rule C, the replacement 
theorem, and various derived rules and tautologies will be applied 
without being explicitly mentioned.)
Parts (a′), (b), and (b′) follow easily from part (a). Part (c) follows almost imme-
diately from Proposition 3.7(o), using obvious tautologies.
There are several other forms of the induction principle that we can prove 
at this point.
Proposition 3.9
	
a.	 Complete induction. ⊢S (∀x)((∀z)(z < x ⇒ B (z)) ⇒ B (x)) ⇒ (∀x)B (x). In ordi-
nary language, consider a property P such that, for any x, if P holds for 
all natural numbers less than x, then P holds for x also. Then P holds 
for all natural numbers.
	
b.	 Least-number principle. ⊢S (∃x)B (x) ⇒ (∃y)B (y) ∧ (∀z)(z < y ⇒ ¬B (z)). If a 
property P holds for some natural number, then there is a least number 
satisfying P.
Proof
	
a.	 Let C (x) be (∀z)(z ≤ x ⇒ B (z)).
	
	
i.	 1.	 (∀x)((∀z)(z < x ⇒ B (z)) ⇒ B (x))	
Hyp
	
	
	
2.	 (∀z)(z < 0 ⇒ B (z)) ⇒ B (0)	
1, rule A4
	
	
	
3.	 z /< 0	
Proposition 3.7(y)
	
	
	
4.	 (∀z)(z < 0 ⇒ B (z))	
3, tautology, Gen
	
	
	
5.	 B (0)	
2, 4, MP
	
	
	
6.	 (∀z)(z ≤ 0 ⇒ B (z)) i.e., C (0)	
5, Proposition 3.8(a′)
	
	
	
7.	 (∀x)((∀z)(z < x ⇒ B (z))	
1–6
	
	
	
	 ⇒ B (x)) ⊢S C (0)
	
	
ii.	 1.	 (∀x)((∀z)(z < x ⇒ B (z)) ⇒ B (x))	
Hyp
	
	
	
2.	 C (x), i.e., (∀z)(z ≤ x ⇒ B (z))	
Hyp
	
	
	
3.	 (∀z)(z < x′ ⇒ B (z))	
2, Proposition 3.7(ℓ)
	
	
	
4.	 (∀z)(z < x′ ⇒ B (z)) ⇒ B (x′)	
1, rule A4
	
	
	
5.	 B (x′)	
3, 4, MP
	
	
	
6.	 z ≤ x′ ⇒ z < x′ ∨ z = x′	
Definition, tautology
	
	
	
7.	 z < x′ ⇒ B (z)	
3, rule A4

166
Introduction to Mathematical Logic
	
	
	
8.	 z = x′ ⇒ B (z)	
5, axiom (A7), Proposition
	
	
	
	 	
2.23(b), tautologies
	
	
	
9.	 (∀z)(z ≤ x′ ⇒ B (z)) i.e., C (x′)	
6, 7, 8, Tautology, Gen
	
	
	 10.	 (∀x)((∀z)(z < x ⇒ B (z)) ⇒ B (x))	
1–9, deduction theorem, Gen
	
	
	
	 ⊢S (∀x)(C (x) ⇒ C (x′))
By (i), (ii), and the induction rule, we obtain D ⊢S (∀x)C (x), that is, D ⊢S (∀x)
(∀z)(z ≤ x ⇒ B (z)), where D is (∀x)((∀z)(z < x ⇒ B (z)) ⇒ B (x)). Hence, by rule 
A4 twice, D ⊢S x ≤ x ⇒ B (x). But ⊢S x ≤ x. So, D ⊢S B (x), and, by Gen and the 
deduction theorem, ⊢S D ⇒ (∀x)B (x).
	
b.	 1.	 ¬(∃y)(B (y) ∧ (∀z)
	
	
	
(z < y ⇒ ¬B (z)))	
Hyp
	
	
2.	 (∀y) ¬(B (y) ∧ (∀z)	
1, derived rule for negation
	
	
	
(z < y ⇒ ¬B (z)))
	
	
3.	 (∀y)((∀z)(z < y ⇒	
2, tautology, replacement
	
	
	
¬B (z)) ⇒ ¬B (y))	
	
	
4.	 (∀y) ¬B (y)	
3, part (a) with ¬B instead of B
	
	
5.	 ¬(∃y)B (y)	
4, derived rule for negation
	
	
6.	 ¬(∃x)B (x)	
5, change of bound variable
	
	
7.	 ⊢S ¬(∃y)(B (y) ∧ (∀z)(z < y ⇒	
1–6, deduction theorem
	
	
	
¬B (z))) ⇒ ¬(∃x)B (x)
	
	
8.	 ⊢S(∃x)B (x) ⇒ (∃y)(B (y) ∧ (∀z)	
7, derived rule
	
	
	
(z < y ⇒ ¬B (z)))
Exercise
3.1	 (Method of infinite descent)
Prove ⊢S (∀x)(B (x) ⇒ (∃y)(y < x ∧ B (y))) ⇒ (∀x) ¬B (x)
Another important notion in number theory is divisibility, which we now 
define.
Definition
t|s for (∃z)(s = t · z). (Here, z is the first variable not in t or s.)
Proposition 3.10
The following wfs are theorems for any terms t, s, r.
	 a.	 t|t
	 b.	 1|t

167
Formal Number Theory
	 c.	 t|0
	 d.	 t|s ∧ s|r ⇒ t|r
	 e.	 s ≠ 0 ∧ t|s ⇒ t ≤ s
	
f.	 t|s ∧ s|t ⇒ s = t
	 g.	 t|s ⇒ t|(r · s)
	 h.	 t|s ∧ t|r ⇒ t|(s + r)
Proof
	
a.	 t
t
= ·1. Hence, t|t.
	
b.	 t
t
= 1· . Hence, 1| .t
	
c.	 0 = t · 0. Hence, t|0.
	
d.	 If s = t · z and r = s · w, then r = t · (z · w).
	
e.	 If s ≠ 0 and t|s, then s = t · z for some z. If z = 0, then s = 0. Hence, z ≠ 0. 
So, z = u′ for some u. Then s = t · (u′) = t · u + t ≥ t.
	 f–h.	 These proofs are left as exercises.
Exercises
3.2	 Prove ⊢S t
t
|1
1
⇒
=
.
3.3	 Prove ⊢S (t|s ∧ t|s′) ⇒ t = 1.
It will be useful for later purposes to prove the existence of a unique quo-
tient and remainder upon division of one number x by another nonzero 
number y.
Proposition 3.11
	
⊢S y
u
v
x
y u
v
v
y
u
v
x
y u
v
v
y
u
u
≠
⇒∃
(
) ∃
(
)
=
⋅
+
∧
<
∧∀
(
) ∀
(
)
=
⋅
+
∧
<
⇒
=
0
1
1
1
1
1
[
((
)
1
1
∧
=
v
v )]
Proof
Let B (x) be y ≠ 0 ⇒ (∃u)(∃v)(x = y · u + v ∧ v < y).
	
i.	 1.	
y ≠ 0	
Hyp
	
2.	 0 = y · 0 + 0	
(S5′), (S7′)
	
3.	 0 < y	
1, Proposition 3.7(t)
	
4.	 0 = y · 0 + 0 ∧ 0 < y	
2, 3, conjunction rule
	
5.	 (∃u)(∃v)(0 = y · u + v ∧ v < y)	
4, rule E4 twice
	
6.	 y ≠ 0 ⇒ (∃u)(∃v)(0 = y · u + v ∧ v < y)	
1–5, deduction theorem

168
Introduction to Mathematical Logic
	
ii.	 1.	 B (x), i.e., y ≠ 0 ⇒ (∃u)(∃v)	
Hyp
	
(x = y · u + v ∧ v < y)
	
	
2.	 y ≠ 0	
Hyp
	
	
3.	 (∃u)(∃v)(x = y · u + v ∧ v < y)	
1, 2, MP
	
	
4.	 x = y · a + b ∧ b < y	
3, rule C twice
	
	
5.	 b < y	
4, conjunction elimination
	
	
6.	 b′ ≤ y	
5, Proposition 3.7(k)
	
	
7.	 b′ < y ∨ b′ = y	
6, definition
	
	
8.	 b′ < y ⇒ (x′ = y · a + b′ ∧ b′ < y)	
4, (S6′), derived rules
	
	
9.	 b′ < y ⇒ (∃u)(∃v)(x′ = y · u + v ∧ v < y)	 8, rule E4, deduction theorem
	
	
10.	
′ =
⇒′ =
⋅+
⋅
b
y
x
y a
y 1	
4, (S6′), Proposition 3.5(b)
	
	
11.	
′ =
⇒
′ =
⋅
+
(
)
b
y
x
y
a
(
1 	
10, Proposition 3.4, 2,
	
	
	 + 0 ∧ 0 < y)	
Proposition 3.7(t), (S5′)
	
	
12.	 b′ = y ⇒ (∃u)(∃v)(x′ = y · u	
11, rule E4 twice, deduction
	
	
+ v ∧ v < y)	
theorem
	
	
13.	 (∃u)(∃v)(x′ = y · u + v ∧ v < y)	
7, 9, 12, disjunction elimination
	
	
14.	 B (x) ⇒ (y ≠ 0 ⇒ (∃u)(∃v)	
1–13, deduction theorem
	
	
(x′ = y · u + v ∧ v < y)),
	
	
i.e., B (x) ⇒ B (x′)
By (i), (ii), Gen and the induction rule, ⊢S (∀x)B (x). This establishes the exis-
tence of a quotient u and a remainder v. To prove uniqueness, proceed as 
follows. Assume y ≠ 0. Assume x = y · u + v ∧ v < y and x = y · u1 + v1 ∧ v1 < y. 
Now, u = u1 or u < u1 or u1 < u. If u = u1, then v = v1 by Proposition 3.4(d). If 
u < u1, then u1 = u + w for some w ≠ 0. Then y · u + v = y · (u + w) + v1 = y · u + 
y · w + v1. Hence, v = y · w + v1. Since w ≠ 0, y · w ≥ y. So, v = y · w + v1 ≥ y, 
contradicting v < y. Hence, u /< u1. Similarly, u1 /< u. Thus, u = u1. Since y · u + 
v = x = y · u1 + v1, it follows that v = v1.
From this point on, one can generally translate into S and prove the results 
from any text on elementary number theory. There are certain number-the-
oretic functions, such as xy and x!, that we have to be able to define in S, 
and this we shall do later in this chapter. Some standard results of number 
theory, such as Dirichlet’s theorem, are proved with the aid of the theory of 
complex variables, and it is often not known whether elementary proofs (or 
proofs in S) can be given for such theorems. The statement of some results 
in number theory involves nonelementary concepts, such as the logarithmic 
function, and, except in special cases, cannot even be formulated in S. More 
information about the strength and expressive powers of S will be revealed 
later. For example, it will be shown that there are closed wfs that are neither 
provable nor disprovable in S, if S is consistent; hence there is a wf that is 
true under the standard interpretation but is not provable in S. We also will 
see that this incompleteness of S cannot be attributed to omission of some 
essential axiom but has deeper underlying causes that apply to other theo-
ries as well.

169
Formal Number Theory
Exercises
3.4	
Show that the induction principle (S9) is independent of the other axi-
oms of S.
3.5D	 a.	 Show that there exist nonstandard models for S of any cardinality ℵα.
	
b.	 Ehrenfeucht (1958) has shown the existence of at least 2
0
ℵ mutually 
nonisomorphic models of cardinality ℵα. Prove the special case that 
there are 2
0
ℵ mutually nonisomorphic denumerable models of S.
3.6D	 Give a standard mathematical proof of the categoricity of Peano’s pos-
tulates, in the sense that any two “models” are isomorphic. Explain 
why this proof does not apply to the first-order theory S.
3.7D	 (Presburger, 1929) If we eliminate from S the function letter f2
2 for mul-
tiplication and the axioms (S7) and (S8), show that the new system S+ is 
complete and decidable (in the sense of Chapter 1, page 27).
3.8	
a.	 Show that, for every closed term t of S, we can find a natural num-
ber n such that ⊢S t
n
=
.
	
b.	 Show that every closed atomic wf t = s of S is decidable—that is, 
either ⊢S t = s or ⊢S t ≠ s.
	
c.	 Show that every closed wf of S without quantifiers is decidable.
3.2  Number-Theoretic Functions and Relations
A number-theoretic function is a function whose arguments and values are nat-
ural numbers. Addition and multiplication are familiar examples of number-
theoretic functions of two arguments. By a number-theoretic relation we mean 
a relation whose arguments are natural numbers. For example, = and < are 
binary number-theoretic relations, and the expression x + y < z determines a 
number-theoretic relation of three arguments.* Number-theoretic functions 
and relations are intuitive and are not bound up with any formal system.
Let K be any theory in the language LA of arithmetic. We say that a num-
ber-theoretic relation R of n arguments is expressible in K if and only if there 
is a wf B (x1, …, xn) of K with the free variables x1, …, xn such that, for any 
natural numbers k1, …, kn, the following hold:
	
1.	 If R(k1, …, kn) is true, then ⊢K B k
kn
1,
,
…
(
).
	
2.	 If R(k1, …, kn) is false, then ⊢K ¬
…
(
)
B k
kn
1,
,
.
*	 We follow the custom of regarding a number-theoretic property, such as the property of 
being even, as a “relation” of one argument.

170
Introduction to Mathematical Logic
For example, the number-theoretic relation of identity is expressed in S by 
the wf x1 = x2. In fact, if k1 = k2, then k1 is the same term as k2 and so, by 
Proposition 3.2(a), ⊢S k
k
1
2
=
. Moreover, if k1 ≠ k2, then, by Proposition 3.6(a), 
⊢S k
k
1
2
≠
.
Likewise, the relation “less than” is expressed in S by the wf x1 < x2. Recall 
that x1 < x2 is (∃x3)(x3 ≠ 0 ∧ x3 + x1 = x2). If k1 < k2, then there is some nonzero 
number n such that k2 = n + k1. Now, by Proposition 3.6(a)(ii), ⊢S k
n
k
2
1
=
+
. 
Also, by (S3′), since n
n
≠
≠
0
0
,
.
⊢S
 Hence, by rule E4, one can prove in S the wf 
(
)
∃
≠
∧
+
=
(
)
w
w
w
k
k
0
1
2 ; that is, ⊢S k
k
1
2
<
.  On the other hand, if k1 /< k2, then 
k2 < k1 or k2 = k1. If k2 < k1, then, as we have just seen, ⊢S k
k
2
1
<
. If k2 = k1, then 
⊢S k
k
2
1
=
. In either case, ⊢S k
k
2
1
≤
 and then, by Proposition 3.7(a,c), ⊢S k
k
1
2
/<
.
Observe that, if a relation is expressible in a theory K, then it is expressible 
in any extension of K.
Exercises
3.9	
Show that the negation, disjunction, and conjunction of relations 
that are expressible in K are also expressible in K.
3.10	 Show that the relation x + y = z is expressible in S.
Let K be any theory with equality in the language LA of arithmetic. A num-
ber-theoretic function f of n arguments is said to be representable in K if and 
only if there is a wf B (x1, …, xn, y) of K with the free variables x1, …, xn, y such 
that, for any natural numbers k1, …, kn, m, the following hold:
	 1.	 If f(k1, …, kn) = m, then ⊢K B k
k
m
n
1,
,
,
…
(
) .
	 2.	 ⊢K ∃
(
)
…
(
)
1
1
y
k
k
y
n
B
,
,
,
.
	
	 If, in this definition, we replace condition 2 by
	 2′.	 ⊢K ∃
(
)
…
(
)
1
1
y
x
x
y
n
B
,
,
,
.
	
	 then the function f is said to be strongly representable in K. Notice 
that 2′ implies 2, by Gen and rule A4. Hence, strong representability 
implies representability. The converse is also true, as we now prove.
Proposition 3.12 (V.H. Dyson)
If f(x1, …, xn) is representable in K, then it is strongly representable in K.
Proof
Assume f representable in K by a wf B (x1, …, xn, y). Let us show that f is 
strongly representable in K by the following wf C (x1, …, xn, y):
	
∃
(
)
…
(
)

∧
…
(
)
(
)∨¬
∃
(
)
…
(
)


1
1
1
1
1
y
x
x
y
x
x
y
y
x
x
y
n
n
n
B
B
B
,
,
,
,
,
,
,
,
,
∧
=
(
)
y
0

171
Formal Number Theory
	
1.	Assume f(k1, …,  kn) = m. Then ⊢K B (
,
,
,
)
k
k
m
n
1 …
 and ⊢K (
)
∃1y
B k
k
y
n
1,
,
,
.
…
(
)  So, by conjunction introduction and disjunction 
introduction, we get ⊢K C k
k
m
n
1,
,
,
…
(
).
	
2′. We must show ⊢K(∃1y)C (x1, …, xn, y).
Case 1. Take (∃1y)B (x1, …, xn, y) as hypothesis. (i) It is easy, using rule C, 
to obtain B (x1, …, xn, b) from our hypothesis, where b is a new individual 
constant. Together with our hypothesis and conjunction and disjunction 
introduction, this yields C (x1, …, xn, b) and then, by rule E4, (∃y)C (x1, …, 
xn, y). (ii) Assume C (x1, …, xn, u) ∧ C (x1, …, xn, v). From C (x1, …, xn, u) and 
our hypothesis, we obtain B (x1, …, xn, u), and, from C (x1, …, xn, v) and our 
hypothesis, we obtain B (x1, …, xn, v). Now, from B (x1, …, xn, u) and B (x1, …, 
xn, v) and our hypothesis, we get u = v. The deduction theorem yields C (x1, 
…, xn, u)∧ C (x1, …, xn, v) ⇒ u = v. From (i) and (ii), (∃1y) C (x1, …, xn, y). Thus, 
we have proved ⊢K(∃1y)B (x1, …, xn, y) ⇒ (∃1y) C (x1, …, xn, y).
Case 2. Take ¬(∃1y)B (x1, …, xn, y) as hypothesis. (i) Our hypothesis, together 
with the theorem 0 = 0, yields, by conjunction introduction, ¬(∃1y)B (x1, …, xn, 
y) ∧, 0 = 0. By disjunction introduction, C (x1, …, xn, 0), and, by rule E4, (∃y) 
C (x1, …, xn, y). (ii) Assume C (x1, …, xn, u) ∧ C (x1, …, xn, v). From C (x1, …, xn, u) 
and our hypothesis, it follows easily that u = 0. Likewise, from C (x1, …, xn, v) 
and our hypothesis, v = 0. Hence, u = v. By the deduction theorem, C (x1, …, xn, 
u) ∧ C (x1, …, xn, v) ⇒ u = v. From (i) and (ii), (∃1y) C (x1, …, xn, y). Thus we have 
proved ⊢K ¬(∃1y) B (x1, …, xn, y) ⇒ (∃1y)C (x1, …, xn, y).
By case 1 and case 2 and an instance of the tautology [(D ⇒ E) ∧ (¬ D ⇒ E)] ⇒ 
E, we can obtain ⊢K(∃1y)C (x1, …, xn, y).
Since we have proved them to be equivalent, from now on we shall use 
representability and strong representability interchangeably.
Observe that a function representable in K is representable in any exten-
sion of K.
Examples
In these examples, let K be any theory with equality in the language LA.
	 1.	 The zero function, Z(x) = 0, is representable in K by the wf x1 = x1 ∧ 
y = 0. For any k and m, if Z(k) = m, then m = 0 and ⊢K k
k
=
∧
=
0
0; 
that is, condition 1 holds. Also, it is easy to show that ⊢K(∃1y)(x1 = x1 
∧ y = 0). Thus, condition 2′ holds.
	 2.	 The successor function, N(x) = x + 1, is representable in K by the 
wf y = x1′. For any k and m, if N(k) = m, then m = k + 1; hence, m is ′k . 
Then ⊢K m
k
=
′ . It is easy to verify that ⊢K(∃1y)(y = x′1).
	 3.	 The projection function, U
x
x
x
j
n
n
j
1,
,
…
(
) =
, is representable in K 
by x1 = x1 ∧ x2 = x2 ∧ … ∧ xn = xn ∧ y = xj. If U
k
k
m
j
n
n
1,
,
,
…
(
) =
then m  = kj. Hence, ⊢K k
k
k
k
k
k
m
k
n
n
j
1
1
2
2
=
∧
=
∧… ∧
=
∧
=
. Thus, 

172
Introduction to Mathematical Logic
condition 1 holds. Also, ⊢K (∃1y)(x1 = x1 ∧ x2 = x2 ∧ … ∧ xn = xn ∧ y = xj), 
that is, condition 2′ holds.
	 4.	 Assume that the functions ɡ(x1, …, xm), h1(x1, …, xn), …, hm(x1, …, xn) 
are strongly representable in the theory with equality K by the 
wfs C (x1, …, xm, z), B1(x1, …, xn, y1), …, Bm(x1, …, xn, ym), respectively. 
Define a new function f by the equation
	
f x
x
h
x
x
h
x
x
n
n
m
n
1
1
1
1
,
,
,
,
,
,
,
,
…
(
) =
…
(
) …
…
(
)
(
)
g
f is said to be obtained from ɡ, h1, …, hm by substitution. Then f is also strongly 
representable in K by the following wf D(x1, …, xn, z):
	 ∃
(
) … ∃
(
)
…
(
) ∧… ∧
…
(
) ∧
…
(
)
(
)
y
y
x
x
y
x
x
y
y
y
z
m
n
m
n
m
m
1
1
1
1
1
1
B
B
C
,
,
,
,
,
,
,
,
,
To prove condition 1, let f(k1, …, kn) = p. Let hj(k1, …, kn) = rj for 1 ≤ j ≤ m; then ɡ(r1, 
…, rm) = p. Since C, B1, …, Bm represent ɡ, h1, …, hm, we have ⊢K Bj
n
j
k
k
r
1,
,
,
…
(
) 
for 1 ≤
≤
j
m and ⊢K C
r
r
p
m
1,
,
,
…
(
). So by conjunction introduction, 
⊢K B
B
C
1
1
1
1
1
k
k
r
k
k
r
r
r
p
n
m
n
m
m
,
,
,
,
,
,
,
…
(
) ∧… ∧
…
(
) ∧
…
(
). Hence, by rule E4, 
⊢K D k
k
p
n
1,
,
,
…
(
). Thus, condition 1 holds. Now we shall prove condition 2′. 
Assume D(x1, …, xn, u) ∧ D(x1, …, xn, v), that is
	 ∆
( )
∃
(
)… ∃
(
)
…
(
) ∧…∧
…
(
) ∧
…
(
)
y
y
x
x
y
x
x
y
y
y
u
m
n
m
n
m
m
1
1
1
1
1
1
B
B
C
,
,
,
,
,
,
,
,
,
(
)
And
	 
( ) ∃
(
)… ∃
(
)
…
(
) ∧…∧
…
(
) ∧
…
(
)
y
y
x
x
y
x
x
y
y
y
v
m
n
m
n
m
m
1
1
1
1
1
1
B
B
C
,
,
,
,
,
,
,
,
,
(
)
By (Δ), using rule C m times,
	
B
B
C
1
1
1
1
1
x
x
b
x
x
b
b
b
u
n
m
n
m
m
,
,
,
,
,
,
,
,
,
…
(
) ∧… ∧
…
(
) ∧
…
(
)
By (□) using rule C again,
	
B
B
C
1
1
1
1
1
x
x
c
x
x
c
c
c
v
n
m
n
m
m
,
,
,
,
,
,
,
,
,
…
(
) ∧… ∧
…
(
) ∧
…
(
)
Since ⊢K (∃1yj)Bj(x1, …, xn, yj), we obtain from Bj(x1, …, xn, bj) and Bj(x1, …, xn, cj), 
that bj = cj. From C (b1, …, bm, u) and b1 = c1, …, bm = cm, we have C (c1, …, cm, u). 
This, with ⊢K (∃1z)C (x1, …, xn, z) and C (c1, …, cm, v) yields u = v. Thus, we have 

173
Formal Number Theory
shown ⊢K D (x1, …, xn, u) ∧ D (x1, …, xn, v) ⇒ u = v. It is easy to show that ⊢K (∃z)
D (x1, …, xn, z). Hence, ⊢K (∃1z) D (x1, …, xn, z).
Exercises
3.11	 Let K be a theory with equality in the language LA. Show that the fol-
lowing functions are representable in K.
	
a.	 Zn(x1, …, xn) = 0 Hint Z x
x
Z U
x
x
n
n
n
n
:
,
,
(
,
,
).
(
)
(
)
1
1
1
…
=
…


	
b.	 C
x
x
k
k
n
n
1,
,
…
(
) =
, where k is a fixed natural number. [Hint: Use 
mathematical induction in the metalanguage with respect to k.]
3.12	 Prove that addition and multiplication are representable in S.
	
	 If R is a relation of n arguments, then the characteristic function CR 
is defined as follows:
	
C
x
x
x
x
x
x
R
n
n
n
1
1
1
0
1
,
,
(
,
,
)
(
,
,
)
…
(
) =
…
…



if
is true
if
is false
R
R
Proposition 3.13
Let K be a theory with equality in the language LA such that ⊢K 0
1
≠
. Then a 
number-theoretic relation R is expressible in K if and only if CR is represent-
able in K.
Proof
If R is expressible in K by a wf B (x1, …, xn), it is easy to verify that CR is rep-
resentable in K by the wf B
B
x
x
y
x
x
y
n
n
1
1
0
1
,
,
,
,
.
…
(
) ∧
=
(
)∨¬
…
(
) ∧
=
(
)  
Conversely, if CR is representable in K by a wf C (x1, …, xn, y), then, using the 
assumption that ⊢K 0
1
≠, we can easily show that R is expressible in K by the 
wf C (x1, …, xn, 0).
Exercises
3.13	 The graph of a function f(x1, …, xn) is the relation f(x1, …, xn) = xn+1. Show 
that f(x1, …, xn) is representable in S if and only if its graph is expressible 
in S.
3.14	 If Q and R are relations of n arguments, prove that Cnot−R = 1 − CR, 
C (Q or R) = CQ · CR, and C (Q and R) = CQ + CR − CQ · CR.
3.15	 Show that f(x1, …, xn) is representable in a theory with equality K in the 
language LA if and only if there is a wf B (x1, …, xn, y) such that, for any 
k1, …, kn, m, if f(k1, …, kn) = m, then ⊢K ∀
(
)
…
(
) ⇔
=
(
)
y
k
k
y
y
m
n
B
1,
,
,
.

174
Introduction to Mathematical Logic
3.3  Primitive Recursive and Recursive Functions
The study of representability of functions in S leads to a class of number-
theoretic functions that turn out to be of great importance in mathematical 
logic and computer science.
Definition
	
1.	The following functions are called initial functions.
	
I.	The zero function, Z(x) = 0 for all x.
	
II.	The successor function, N(x) = x + 1 for all x.
	
III.	The projection functions, U
x
x
x
i
n
n
i
1,
,
…
(
) =
 for all x1, …, xn.
	
2.	The following are rules for obtaining new functions from given 
functions.
	
IV.	 Substitution:
	
f x
x
h
x
x
h
x
x
n
n
m
n
1
1
1
1
,
,
,
,
,
,
,
,
…
(
) =
…
(
) …
…
(
)
(
)
g
	
	
f is said to be obtained by substitution from the functions
	
g y
y
h
x
x
h
x
x
m
n
m
n
1
1
1
1
,
,
,
,
,
,
,
,
,
…
(
)
…
(
) …
…
(
)
	
V.	 Recursion:
	
f x
x
x
x
f x
x
y
h x
x
y f x
x
n
n
n
n
n
1
1
1
1
1
0
1
,
,
,
,
,
,
,
,
,
,
, ,
,
,
,
…
(
) =
…
(
)
…
+
(
) =
…
…
g
y
(
)
(
)
	
	
Here, we allow n = 0, in which case we have
	
f
k
k
f y
h y f y
( )
(
)
,
( )
0
1
=
+
= (
)
where
is a fixed natural number
We shall say that f is obtained from ɡ and h (or, in the case n = 0, 
from h alone) by recursion. The parameters of the recursion are 
x1, …, xn. Notice that f is well defined: f(x1, …, xn, 0) is given by the 
first equation, and if we already know f(x1, …, xn, y), then we can 
obtain f(x1, …, xn, y + 1) by the second equation.
	
VI.	 Restricted μ-Operator. Assume that ɡ(x1, …, xn, y) is a func-
tion such that for any x1, …, xn there is at least one y such that 

175
Formal Number Theory
ɡ(x1, …, xn, y) = 0. We denote by μy(ɡ(x1, …, xn, y) = 0) the least 
number y such that ɡ(x1, …, xn, y) = 0. In general, for any rela-
tion R(x1, …, xn, y), we denote by μyR(x1, …, xn, y) the least y 
such that R(x1, …, xn, y) is true, if there is any y at all such that 
R(x1, …, xn, y) holds. Let f(x1, …, xn) = μy(ɡ(x1, …, xn, y) = 0). 
Then f is said to be obtained from ɡ by means of the restricted 
μ-operator if the given assumption about ɡ holds, namely, for 
any x1, …, xn, there is at least one y such that ɡ(x1, …, xn, y) = 0.
	
3.	A function f is said to be primitive recursive if and only if it can be 
obtained from the initial functions by any finite number of substitu-
tions (IV) and recursions (V)—that is, if there is a finite sequence 
of functions f0, …,  fn such that fn = f and, for 0 ≤ i ≤ n, either fi is an 
initial function or fi comes from preceding functions in the sequence 
by an application of rule (IV) or rule (V).
	
4.	A function f is said to be recursive if and only if it can be obtained from 
the initial functions by any finite number of applications of substitution 
(IV), recursion (V) and the restricted μ-operator (VI). This differs from 
the definition above of primitive recursive functions only in the addi-
tion of possible applications of the restricted μ-operator. Hence, every 
primitive recursive function is recursive. We shall see later that the con-
verse is false.
We shall show that the class of recursive functions is identical with the class 
of functions representable in S. (In the literature, the phrase “general recur-
sive” is sometimes used instead of “recursive.”)
First, let us prove that we can add “dummy variables” to and also per-
mute and identify variables in any primitive recursive or recursive function, 
obtaining a function of the same type.
Proposition 3.14
Let ɡ(y1, …, yk) be primitive recursive (or recursive). Let x1, … xn be distinct 
variables and, for 1 ≤ i ≤ k, let zi be one of x1, …, xn. Then the function f such 
that f(x1, …, xn) = ɡ(z1, …, zk) is primitive recursive (or recursive).
Proof
Let z
x
i
ji
=
, where 1 ≤ ji ≤ n. Then z
U
x
x
i
j
n
n
i
=
…
(
,
,
)
1
. Thus,
	
f x
x
U
x
x
U
x
x
n
j
n
n
j
n
n
k
1
1
1
1
,
,
,
,
,
,
,
,
…
(
) =
…
(
) …
…
(
)
(
)
g
and therefore f is primitive recursive (or recursive), since it arises from 
g,
,
,
U
U
j
n
j
n
k
1 …
 by substitution.

176
Introduction to Mathematical Logic
Examples
	
1.	 Adding dummy variables. If ɡ(x1, x3) is primitive recursive and if f(x1, x2, 
x3) = ɡ(x1, x3), then f(x1, x2, x3) is also primitive recursive. In Proposition 
3.14, let z1 = x1 and z2 = x3. The new variable x2 is called a “dummy 
variable” since its value has no influence on the value of f(x1, x2, x3).
	 2.	 Permuting variables. If ɡ(x1, x2, x3) is primitive recursive and if f(x1, 
x2, x3) = ɡ(x3, x1, x2), then f(x1, x2, x3) is also primitive recursive. In 
Proposition 3.14, let z1 = x3, z2 = x1, and z3 = x2.
	 3.	 Identifying variables. If ɡ(x1, x2, x3) is primitive recursive and if f(x1, x2) = 
ɡ(x1, x2, x1), then f(x1, x2) is primitive recursive. In Proposition 3.14, let 
n = 2 and z1 = x1, z2 = x2 and z3 = x1.
Corollary 3.15
	 a.	 The zero function Zn(x1, …, xn) = 0 is primitive recursive.
	 b.	 The constant function C
x
x
k
k
n
n
1,
,
…
(
) =
, where k is some fixed nat-
ural number, is primitive recursive.
	 c.	 The substitution rule (IV) can be extended to the case where each 
hi may be a function of some but not necessarily all of the variables. 
Likewise, in the recursion rule (V), the function g may not involve 
all of the variables x1, …, xn, y, or f(x1, …, xn, y) and h may not involve all 
of the variables x1, …, xn, y, or f(x1, …, xn, y).
Proof
	 a.	 In Proposition 3.14, let g be the zero function Z; then k = 1. Take 
z1 to be x1.
	 b.	 Use mathematical induction. For k = 0, this is part (a). Assume Ck
n 
primitive recursive. Then C
x
x
k
n
n
+
…
1
1
(
,
,
) is primitive recursive by 
the substitution C
x
x
N C
x
x
k
n
n
k
n
n
+
…
(
) =
…
(
)
(
)
1
1
1
,
,
,
,
.
	 c.	 By Proposition 3.14, any variables among x1, …, xn not 
present in a function can be added as dummy vari-
ables. For example, if h(x1, x3) is primitive recursive, then 
h
x
x
x
h x
x
h U
x
x
x
U
x
x
x
*
1
2
3
1
3
1
3
1
2
3
3
3
1
2
3
,
,
,
,
,
,
,
,
(
) = (
) =
(
)
(
)
(
) 
is 
also 
primitive recursive, since it is obtained by a substitution.
Proposition 3.16
The following functions are primitive recursive.
	 a.	 x + y
	 b.	 x · y
	
c.	 xy

177
Formal Number Theory
	
d.
	
δ( )
x
x
x
x
=
−
>
=



1
0
0
0
if
if
	
	 δ is called the predecessor function.
	
e.
	
x
y
x
y
x
y
x
y
−
=
−
≥
<



if
if
0
	
f.
	
x
y
x
y
x
y
x
y
y
x
−
=
−
≥
<


−
if
if
	
g.
	
sg
if
if
x
x
x
( ) =
=
≠



0
0
1
0
	
h.
	
sg
if
if
( )
x
x
x
=
=
≠



1
0
0
0
	
i.	 x!
	
j.	 min (x, y) = minimum of x and y
	 k.	 min (x1, …, xn)
	
l.	 max (x, y) = maximum of x and y
	 m.	 max (x1, …, xn)
	 n.	 rm (x, y) = remainder upon division of y by x
	 o.	 qt (x, y) = quotient upon division of y by x
Proof
	 a.	 Recursion rule (V)
	
b.
	
x
x
f x
U x
x
y
N x
y
f x y
N f x y
x
+
=
=
+
+
=
+
+
=
⋅
=
0
0
1
1
0
0
1
1
or
o
( , )
( )
(
)
(
)
( ,
)
( ( , ))
r
g
g
g
( , )
( )
(
)
(
)
( ,
)
( ( , ), )
x
Z x
x
y
x y
x
x y
f
x y x
0
1
1
=
⋅
+
=
⋅
+
+
=
	
	 where f is the addition function
	
c.
	
x
x
x
x
y
y
0
1
1
=
= (
) ⋅
+
	
d.
	
δ
δ
( )
(
)
0
0
1
=
+
=
y
y
	
e.
	
x
x
x
y
x
y



−
=
−
+
=
−
0
1
(
)
(
)
δ
	
f.	 |
| (
)
(
)
x
y
x
y
y
x
−
=
−
+
−


 (substitution)
	 g.	 sg( )
( )
x
x
x
=
− δ
 (substitution)
	 h.	 sg
sg
( )
( )
x
x
=
−
1 
 (substitution)

178
Introduction to Mathematical Logic
	
i.
	
0
1
1
1
!
(
)!
( !) (
)
=
+
=
⋅
+
y
y
y
 
	
j.	 min( , )
(
)
x y
x
x
y
=
−
−


	 k.	 Assume min x
xn
1,
,
…
(
) already shown primitive recursive.
	
min
,
,
,
min min
,
,
,
x
x
x
x
x
x
n
n
n
n
1
1
1
1
…
(
) =
…
(
)
(
)
+
+
	
l.	 max( , )
(
)
x y
y
x
y
=
+
−
	 m.	 max
,
,
,
max max
,
,
,
x
x
x
x
x
x
n
n
n
n
1
1
1
1
…
(
) =
…
(
)
(
)
+
+
	
n.
	
rm
rm
rm
sg
rm
( , )
( ,
)
(
( , ))
(|
(
( , ))|)
x
x y
N
x y
x
N
x y
0
0
1
=
+
=
⋅
−
	
o.
	
qt
qt
sg
rm( , ))
( , )
( ,
)
( , )
(
(
)
x
x y
qt x y
x
N
x y
0
0
1
=
+
=
+
−
In justification of (n) and (o), note that, if q and r denote the quotient qt(x, y) 
and remainder rm(x, y) upon division of y by x, then y = qx + r and 0 ≤ r < x. 
So, y + 1 = qx + (r + 1). If r + 1 < x (that is, if |x −N(rm(x, y))|> 0), then the quo-
tient qt(x, y + 1) and remainder rm(x, y + 1) upon division of y + 1 by x are q 
and r + 1, respectively. If r + 1 = x (that is, if |x −N(rm(x, y))| = 0), then y + 1 = 
(q + 1)x, and qt(x, y + 1) and rm(x, y + 1) are q + 1 and 0, respectively.*
Definitions
	
f x
x
y
z
f x
x
f x
x
z
z
y z
n
n
n
<∑
…
(
) =
=
…
+
+
…
−
>

1
1
1
0
0
0
1
0
,
,
,
(
,
,
, )
(
,
,
,
)
if
if



…
=
…
…
=
≤
< +
<
∑
∑
∏
f x
x
y
f x
x
y
f x
x
y
y z
n
y z
n
y z
n
(
,
,
, )
(
,
,
, )
(
,
,
, )
1
1
1
1
1 if z
f x
x
f x
x
z
z
f x
x
y
f
n
n
y z
n
y
=
…
…
…
−
>



…
=
≤∏
0
0
1
0
1
1
1
(
,
,
, )
(
,
,
,
)
(
,
,
, )
if
< +∏
…
z
n
x
x
y
1
1
(
,
,
, )
*	 Since one cannot divide by 0, the values of rm(0, y) and qt(0, y) have no intuitive significance. 
It can be easily shown by induction that the given definitions yield rm(0, y) = y and qt(0, y) = 0.

179
Formal Number Theory
These bounded sums and products are functions of x1, …, xn, z. We can also 
define doubly bounded sums and products in terms of the ones already 
given; for example,
	
f x
x
y
f x
x
u
f x
x
v
f
u y v
n
n
n
y
v
< <
<
∑
…
(
) =
…
+
(
) +
+
…
−
(
)
=
1
1
1
1
1
,
,
,
,
,
,
,
,
,
(


δ
−−∑
…
+
+
(
)
u
n
x
x
y
u
)
,
,
,
1
1
Proposition 3.17
If f(x1, …, xn, y) is primitive recursive (or recursive), then all the bounded 
sums and products defined above are also primitive recursive (or recursive).
Proof
Let g x
x
z
x
x
y
n
y z
n
1
1
,
,
,
,
,
,
…
(
) =
…
(
)
<∑f
. Then we have the following recursion:
	
g
g
g
x
x
x
x
z
x
x
z
f x
x
z
n
n
n
n
1
1
1
1
0
0
1
,
,
,
,
,
,
,
,
,
,
,
,
…
(
) =
…
+
(
) =
…
(
) +
…
(
)
	
If
then
h x
x
z
f x
x
y
n
y z
n
1
1
,
,
,
,
,
,
,
…
(
) =
…
(
)
≤∑
	
h x
x
z
x
x
z
n
n
1
1
1
,
,
,
,
,
,
…
(
) =
…
+
(
)(
)
g
substitution
The proofs for bounded products and doubly bounded sums and products 
are left as exercises.
Examples
Let τ(x) be the number of divisors of x, if x > 0, and let τ(0) = 1. (Thus, τ(x) is 
the number of divisors of x that are less than or equal to x.) Then τ is primi-
tive recursive, since
	
τ( )
(
( , ))
x
y x
y x
=
≤∑sg rm
Given expressions for number-theoretic relations, we can apply the connec-
tives of the propositional calculus to them to obtain new expressions for 

180
Introduction to Mathematical Logic
relations. For example, if R1(x, y) and R2(x, u, v) are relations, then R1(x, y) ∧ 
R2(x, u, v) is a new relation that holds for x, y, u, v when and only when both 
R1(x, y) and R2(x, u, v) hold. We shall use (∀y)y<zR(x1, …, xn, y) to express the 
relation: for all y, if y is less than z, then R(x1, …, xn, y) holds. We shall use 
(∀y)y≤z, (∃y)y<z, and (∃y)y≤z in an analogous way; for example, (∃y)y<zR(x1, …, xn, y) 
means that there is some y < z such that R(x1, …, xn, y) holds. We shall call 
(∀y)y<z, (∀y)y≤z, (∃y)y<z, and (∃y)y≤z bounded quantifiers. In addition, we define a 
bounded μ-operator:
	
µy
R x
x
y
y
z
R x
x
y
y z
n
n
<
…
=
<
…
(
,
,
, )
(
,
,
, )
1
1
the least
for which
holds if theere is such a
otherwise
y
z



The value z is chosen in the second case because it is more convenient in later 
proofs; this choice has no intuitive significance. We also define μyy≤zR(x1, …, 
xn, y) to be μyy<z+1R(x1, …, xn, y).
A relation R(x1, …, xn) is said to be primitive recursive (or recursive) if and 
only if its characteristic function CR(x1, …, xn) is primitive recursive (or recur-
sive). In particular, a set A of natural numbers is primitive recursive (or 
recursive) if and only if its characteristic function CA(x) is primitive recursive 
(or recursive).
Examples
	 1.	 The relation x1 = x2 is primitive recursive. Its characteristic function 
is sg(|x1 − x2|), which is primitive recursive, by Proposition 3.16(f, g).
	 2.	 The relation x1 < x2 is primitive recursive, since its characteristic 
function is sg x
x
2
1
−
(
), which is primitive recursive, by Proposition 
3.16(e, h).
	 3.	 The relation x1|x2 is primitive recursive, since its characteristic func-
tion is sg(rm(x1, x2)).
	 4.	 The relation Pr(x), x is a prime, is primitive recursive, since CPr(x) = 
sg(|τ(x) − 2|). Note that an integer is a prime if and only if it has 
exactly two divisors; recall that τ(0) = 1.
Proposition 3.18
Relations obtained from primitive recursive (or recursive) relations by means 
of the propositional connectives and the bounded quantifiers are also primi-
tive recursive (or recursive). Also, applications of the bounded μ-operators 
μyy<z and μyy≤z lead from primitive recursive (or recursive) relations to primi-
tive recursive (or recursive) functions.

181
Formal Number Theory
Proof
Assume R1(x1, …, xn) and R2(x1, …, xn) are primitive recursive (or recursive) rela-
tions. Then the characteristic functions CR1 and CR2 are primitive recursive (or 
recursive). But C
x
x
C
x
x
R
n
R
n
¬
…
=
−
…
1
1
1
1
1
(
,
,
)
(
,
,
);

 hence ¬R1 is primitive recur-
sive (or recursive). Also, C
x
x
C
x
x
C
x
x
R
R
n
R
n
R
n
1
2
1
2
1
1
1
∨
…
=
…
⋅
…
(
,
,
)
(
,
,
)
(
,
,
); 
so, R1 ∨ R2 is primitive recursive (or recursive). Since all propositional connec-
tives are definable in terms of ¬ and ∨, this takes care of them. Now, assume 
R(x1, …, xn, y) is primitive recursive (or recursive). If Q(x1, …, xn, z) is the rela-
tion (∃y)y<zR(x1, …, xn, y), then it is easy to verify that CQ(x1, …, xn, z) = Πy<zCR(x1, 
…, xn, y), which, by Proposition 3.17, is primitive recursive (or recursive). The 
bounded quantifier (∃y)y≤z is equivalent to (∃y)y<z+1, which is obtainable from 
(∃y)y<z by substitution. Also, (∀y)y<z is equivalent to ¬(∃y)y<z¬, and (∀y)y≤z is 
equivalent to ¬(∃y)y≤z¬. Doubly bounded quantifiers, such as (∃y)u<y<v, can be 
defined by substitution, using the bounded quantifiers already mentioned. 
Finally, Πu≤yCR(x1, …, xn, u) has the value 1 for all y such that R(x1, …, xn, u) is 
false for all u ≤ y; it has the value 0 as soon as there is some u ≤ y such that 
R(x1, …, xn, u) holds. Hence, 
(
(
,
,
, ))
Πu y
R
n
y z
C
x
x
u
≤
<
…
∑
1
 counts the number of 
integers from 0 up to but not including the first y < z such that R(x1, …, xn, y) 
holds and is z if there is no such y; thus, it is equal to μyy<zR(x1, …, xn, y) and 
so the latter function is primitive recursive (or recursive) by Proposition 3.17.
Examples
	 1.	 Let p(x) be the xth prime number in ascending order. Thus, p(0) = 2, 
p(1) = 3, p(2) = 5, and so on. We shall write px instead of p(x). Then px 
is a primitive recursive function. In fact,
	
p
p
y
p
y
y
x
y
p
x
x
0
1
1
2
=
=
<
∧
+
≤
+
µ
(
)! (
)
( )
Pr
	
	 Notice that the relation u < y ∧ Pr(y) is primitive recursive. Hence, 
by Proposition 3.18, the function μyy≤v(u < y ∧ Pr(y)) is a primitive 
recursive function g(u, v). If we substitute the primitive recursive 
functions z and z! + 1 for u and v, respectively, in ɡ(u, v), we obtain 
the primitive recursive function
	
h z
y
z
y
y
y z
( )
( )
(
)
!
=
<
∧
≤
+
µ
1
Pr
	
	 and the right-hand side of the second equation above is h(px); hence, 
we have an application of the recursion rule (V). The bound (px)! + 1 
on the first prime after px is obtained from Euclid’s proof of the 
infinitude of primes (see Exercise 3.23).
	 2.	 Every positive integer x has a unique factorization into prime pow-
ers: x
p p
p
a
a
k
ak
=
0
1
0
1 
. Let us denote by (x)j the exponent aj in this 

182
Introduction to Mathematical Logic
factorization. If x = 1, (x)j = 1 for all j. If x = 0, we arbitrarily let 
(x)j = 0 for all j. Then the function (x)j is primitive recursive, since 
( )
|
|
.
x
y
p
x
p
x
j
y x
j
y
j
y
=
∧¬(
)
(
)
<
+
µ
1
	 3.	 For x > 0, let ℓħ(x) be the number of nonzero exponents in the fac-
torization of x into powers of primes, or, equivalently, the number 
of distinct primes that divide x. Let ℓħ(0) = 0. Then ℓħ is primitive 
recursive. To see this, let R(x, y) be the primitive recursive rela-
tion Pr(y) ∧ y|x ∧ x ≠ 0. Then ℓℏ( )
,
x
C
x y
R
y x
=
(
)
(
)
≤
∑
sg
. Note that 
this yields the special cases ℓħ(0) = ℓħ(1) = 0. The expression “ℓħ(x)” 
should be read “length of x.”
	 4.	 If the number x
p
a
a
k
ak
=
…
2 3
0
1
 is used to “represent” or “encode” 
the sequence of positive integers a0, a1, …, ak, and y
p
b
b
m
bm
=
…
2 3
0
1
 
­“represents” the sequence of positive integers b0, b1, …, bm, then the 
number
	
x y
p p
p
p
a
a
k
a
k
b
k
b
k
m
b
k
m
*
=
…
…
+
+
+ +
2 3
0
1
0
1
1
2
1
	
	 “represents” the new sequence a0, a1, …, ak, b0, b1, …, bm obtained by 
juxtaposing the two sequences. Note that ℓħ(x) = k + 1, which is the 
length of the first sequence, ℓħ(y) = m + 1, which is the length of the 
second sequence, and bj = (y)j. Hence,
	
x y
x
p
x
j
y
j
y
j
*
=
(
)
+
<∏
×
ℓℏ
ℓℏ
( )
( )
( )
	
	 and, thus, * is a primitive recursive function, called the juxtaposition 
function. It is not difficult to show that x * (y * z) = (x * y) * z as long 
as y ≠ 0 (which will be the only case of interest to us). Therefore, 
there is no harm in omitting parentheses when writing two or more 
applications of *. Also observe that x * 0 = x * 1 = x.
Exercises
3.16	 Assume that R(x1, …, xn, y) is a primitive recursive (or recursive) rela-
tion. Prove the following:
	
a.	 (∃y)u<y<vR(x1, …, xn, y), (∃y)u≤y≤vR(x1, …, xn, y), and (∃y)u≤y<vR (x1, …, xn, 
y) are primitive (or recursive) relations.
	
b.	 μyu<y<vR(x1, …, xn, y), μyu≤y≤vR(x1, …, xn, y), and μyu≤y<vR (x1, …, xn, y) 
are primitive recursive (or recursive) functions.
	
c.	 If, for all natural numbers x1, …, xn, there exists a natural number y 
such that R(x1, …, xn, y), then the function f(x1, …, xn) = μyR(x1, …, xn, y) 
is recursive. [Hint: Apply the restricted μ-operator to CR(x1, …, xn, y).]

183
Formal Number Theory
3.17	 a.	Show that the intersection, union and complement of primitive 
recursive (or recursive) sets are also primitive recursive (or recur-
sive). Recall that a set A of numbers can be thought of as a relation 
with one argument, namely, the relation that is true of a number x 
when and only when x ∈ A.
	
b.	Show that every finite set is primitive recursive.
3.18	 Prove that a function f(x1, …, xn) is recursive if and only if its represent-
ing relation f(x1, …, xn) = y is a recursive relation.
3.19	 Let [
]
n  denote the greatest integer less than or equal to n, and let 
Π(n) denote the number of primes less than or equal to n. Show that 
[
]
n  and Π(n) are primitive recursive.
3.20	 Let e be the base of the natural logarithms. Show that [ne], the greatest 
integer less than or equal to ne, is a primitive recursive function.
3.21	 Let RP(y, z) hold if and only if y and z are relatively prime, that is, y and 
z have no common factor greater than 1. Let φ(n) be the number of posi-
tive integers less than or equal to n that are relatively prime to n. Prove 
that RP and φ are primitive recursive.
3.22	 Show that, in the definition of the primitive recursive functions, one 
need not assume that Z(x) = 0 is one of the initial functions.
3.23	 Prove that pk+1 ≤ (p0p1… pk) + 1. Conclude that pk+1 ≤ pk! + 1.
For use in the further study of recursive functions, we prove the following 
theorem on definition by cases.
Proposition 3.19
Let
	
f x
x
x
x
R x
x
x
x
R x
n
n
n
n
(
,
,
)
(
,
,
)
(
,
,
)
(
,
,
)
(
1
1
1
1
1
2
1
2
1
…
=
…
…
…
g
g
if
holds
if
,
,
)
(
,
,
)
(
,
,
)
…
…
…






x
x
x
R x
x
n
k
n
k
n
holds
if
holds

g
1
1
If the functions ɡ1, …, ɡk and the relations R1, …, Rk are primitive recursive 
(or recursive), and if, for any x1, …, xn, exactly one of the relations R1(x1, …, xn), 
…, Rk(x1, …, xn) is true, then f is primitive recursive (or recursive).
Proof
	
f x
x
x
x
C
x
x
x
x
n
n
R
n
k
n
(
,
,
)
(
,
,
)
(
(
,
,
))
(
,
,
)
(
1
1
1
1
1
1
…
=
…
⋅
…
+
+
…
⋅
g
g
sg
sg
 

C
x
x
R
n
k(
,
,
)).
1 …

184
Introduction to Mathematical Logic
Exercises
3.24	 Show that in Proposition 3.19 it is not necessary to assume that Rk is 
primitive recursive (or recursive).
3.25	 Let
	
f x
x
x
x
x
( ) =
+



2
1
if
is even
if
is odd
	
	 Prove that f is primitive recursive.
3.26	 Let
	
h x
( ) = 2
1
if Goldbach’s conjecture is true
if Goldbach’s conjecture iss false



Is h primitive recursive?
It is often important to have available a primitive recursive one–one cor-
respondence between the set of ordered pairs of natural numbers and the set 
of natural numbers. We shall enumerate the pairs as follows:
	
( , ),
( , ),( , ),( , ),
( , ),( , ),( , ),( , ),( , ),
0 0
0 1
1 0
1 1
0 2
2 0
1 2
2 1
2 2
…
After we have enumerated all the pairs having components less than or 
equal to k, we then add a new group of all the new pairs having components 
less than or equal to k + 1 in the following order: (0, k + 1), (k + 1, 0), (1, k + 1), 
(k + 1, 1), …, (k, k + 1), (k + 1, k), (k + 1, k + 1). If x < y, then (x, y) occurs before (y, x) 
and both are in the (y + 1)th group. (Note that we start from 1 in counting 
groups.) The first y groups contain y2 pairs, and (x, y) is the (2x + 1)th pair 
in the (y + 1)th group. Hence, (x, y) is the (y2 + 2x + 1)th pair in the ordering, 
and (y, x) is the (y2 + 2x + 2)th pair. On the other hand, if x = y, (x, y) is 
the ((x + 1)2)th pair. This justifies the following definition, in which σ2(x, y) 
denotes the place of the pair (x, y) in the above enumeration, with (0, 0) con-
sidered to be in the 0th place:
	
σ2
2
2
2
1
2
( , )
(
) (
)
(
) (
)
x y
x
y
x
y
x
y
y
x
=
−
⋅
+
+
+
−
⋅
+
sg
sg


Clearly, σ2 is primitive recursive.
Let us define inverse functions σ1
2 and σ2
2 such that σ σ
1
2
2
(
( , ))
,
x y
x
=
σ σ
2
2
2
(
( , ))
x y
y
=  and σ σ
σ
2
1
2
2
2
(
( ),
( ))
z
z
z
= . Thus, σ1
2( )z  and σ2
2( )z  are the first and 
second components of the zth ordered pair in the given enumeration. Note 
first that σ
σ
1
2
2
2
0
0
0
0
( )
,
( )
=
= ,
	
σ
σ
σ
σ
σ
σ
σ
σ
1
2
2
2
1
2
2
2
2
2
1
2
2
2
1
1
1
0
(
)
( )
( )
( )
( )
( )
( )
n
n
n
n
n
n
n
+
=
<
+
>
if
if
if
2
2
2
( )
( )
n
n
=





σ

185
Formal Number Theory
and
	
σ
σ
σ
σ
σ
σ
σ
2
2
1
2
1
2
2
2
1
2
1
2
2
2
1
1
(
)
( )
( )
( )
( )
( )
( )
n
n
n
n
n
n
n
+
=
≠
+
=



if
if
Hence,
	
σ
σ
σ
σ
σ
σ
1
2
2
2
2
2
1
2
2
2
1
2
1
1
(
)
( ) (
(
( )
( )))
(
( )
) (
(
( )
n
n
n
n
n
n
+
=
⋅
−
+
+
⋅
sg
sg

−
=
+
=
⋅
−
σ
φ σ
σ
σ
σ
σ
σ
2
2
1
2
2
2
2
2
1
2
2
2
1
1
( )))
(
( ),
( ))
(
)
( ) (
(|
( )
n
n
n
n
n
n
sg
2
1
2
1
2
2
2
1
2
2
2
1
( )|))
(
( )
) (
(|
( )
( )|))
(
( ),
( ))
n
n
n
n
n
n
+
+
⋅
−
=
σ
σ
σ
ψ σ
σ
sg
where ϕ and ψ are primitive recursive functions. Thus, σ1
2 and σ2
2 are defined 
recursively at the same time. We can show that σ1
2 and σ2
2 are primitive recur-
sive in the following devious way. Let h u
u
u
( )
.
( )
( )
= 2
3
1
2
2
2
σ
σ
 Now, h is primitive 
recursive, since h( )
,
( )
( )
0
2
3
2
3
1
1
2
2
2
0
0
0
0
=
=
=
⋅
σ
σ
 and h n
n
n
(
)
(
)
(
)
+
=
=
+
+
1
2
3
1
2
2
2
1
1
σ
σ
2
3
2
3
1
2
2
2
1
2
2
2
0
1
φ σ
σ
ψ σ
σ
φ
ψ
(
( ),
( ))
(
( ),
( ))
(( ( )) ,( ( )) )
((
n
n
n
n
h n
h n
=
h n
h n
( )) ,( ( )) ).
0
1  Remembering. that the 
function ( )
x i is primitive recursive (see Example 2 on page 181), we conclude 
by recursion rule (V) that h is primitive recursive. But σ1
2
0
( )
( ( ))
x
h x
=
 and 
σ2
2
1
( )
( ( ))
x
h x
=
. By substitution, σ1
2 and σ2
2 are primitive recursive.
One–one primitive recursive correspondences between all n-tuples of nat-
ural numbers and all natural numbers can be defined step-by-step, using 
induction on n. For n = 2, it has already been done. Assume that, for n = k, we 
have primitive recursive functions σ
σ
σ
k
k
k
k
k
x
x
x
x
(
,
,
),
( ),
,
( )
1
1
…
…
 such that 
σ σ
i
k
k
k
i
x
x
x
(
(
,
,
))
1 …
=
 for 1 ≤≤
i
k, and σ σ
σ
k
k
k
k
x
x
x
(
( ),
,
( )
)
1
…
=
. Now, for 
n
k
=
+1, define σ
σ σ
σ
σ σ
k
k
k
k
k
k
i
k
i
k
x
x
x
x
x
x
x
x
+
+
+
+
…
=
…
=
1
1
1
2
1
1
1
1
2
(
,
,
,
)
(
(
,
,
),
),
( )
(
( ))) 
for 1 ≤≤
i
k and σ
σ
k
k
x
x
+
+
=
1
1
2
2
( )
( ). Then σ
σ
σ
k
k
k
k
+
+
+
+
…
1
1
1
1
1
,
,
,
 are all primitive recur-
sive, and we leave it as an exercise to verify that σ
σ
i
k
k
k
i
x
x
x
+
+
+
…
=
1
1
1
1
(
(
,
,
))
 for 
1
1
≤≤
+
i
k
, and σ σ
σ
k
k
k
k
x
x
x
(
( ),
,
( ))
1
1
1
1
+
+
+
…
=
.
It will be essential in later work to define functions by a recursion in which 
the value of f(x1, …, xn, y + 1) depends not only upon f(x1, …, xn, y) but also upon 
several or all values of f(x1, …, xn, u) with u ≤ y. This type of recursion is called 
a course-of-values recursion. Let f
x
x
y
p
n
u
f x
x
u
u y
n
#(
,
,
, )
.
(
,
,
, )
1
1
…
=
…
<
∏
 Note that 
f can be obtained from f # as follows: f x
x
y
f
x
x
y
n
n
y
(
,
,
, )
( #(
,
,
,
))
1
1
1
…
=
…
+
.
Proposition 3.20 (Course-of-Values Recursion)
If h(x1, …, xn, y, z) is primitive recursive (or recursive) and f (x1, …, xn, y) = h(x1, 
…, xn, y, f #(x1, …, xn, y)), then f is primitive recursive (or recursive).

186
Introduction to Mathematical Logic
Proof
	
f
x
x
f
x
x
y
f
x
x
y p
n
n
n
y
f x
x
y
n
#(
,
,
, )
#(
,
,
,
)
#(
,
,
, )
(
,
,
,
1
1
1
0
1
1
1
…
=
…
+
=
…
⋅
…
)
(
,
,
, ,
#(
,
,
, ))
#(
,
,
, )
=
…
⋅
…
…
f
x
x
y
p
n
y
h x
x
y f
x
x
y
n
n
1
1
1
Thus, by the recursion rule, f# is primitive recursive (or recursive), and 
f(x1, …, xn, y) = (f#(x1, …, xn, y + 1))y.
Example
The Fibonacci sequence is defined as follows: f(0) = 1, f(1) = 1, and f(k + 2) = f(k) + 
f(k + 1) for k ≥ 0. Then f is primitive recursive, since
	
f n
n
n
f
n
f
n
n
n
n
( )
( )
(|
|)
(( #( ))
( #( ))
)
)
=
+
−
+
+
⋅
−
−
−
sg
sg
sg(
1
1
1
2



The function
	
h y z
y
y
z
z
y
y
y
( , )
( )
(|
|)
(( )
( )
)
(
)
=
+
−
+
+
⋅
−
−
−
sg
sg
sg
1
1
1
2



is primitive recursive, and f(n) = h(n, f # (n)).
Exercise
3.27	 Let ɡ(0) = 2, ɡ(1) = 4, and ɡ(k + 2) = 3ɡ(k + 1) −(2ɡ(k) + 1). Show that g is 
primitive recursive.
Corollary 3.21 (Course-of-Values Recursion for Relations)
If H(x1, …, xn, y, z) is a primitive recursive (or recursive) relation and 
R(x1, …, xn, y) holds if and only if H x
x
y C
x
x
y
n
R
n
(
,
,
, ,(
)#(
,
,
, ))
1
1
…
…
, where CR 
is the characteristic function of R, then R is primitive recursive (or recursive).
Proof
CR(x1, …, xn, y) = CH(x1, …, xn, y, (CR)#(x1, …, xn, y)). Since CH is primitive 
recursive (or recursive), Proposition 3.20 implies that CR is primitive 
recursive (or recursive) and, therefore, so is R.
Proposition 3.20 and Corollary 3.21 will be drawn upon heavily in what 
follows. They are applicable whenever the value of a function or relation for y 
is defined in terms of values for arguments less than y (by means of a primi-
tive recursive or recursive function or relation). Notice in this connection 

187
Formal Number Theory
that R(x1, …, xn, u) is equivalent to CR(x1, …, xn, u) = 0, which, in turn, for u < y, 
is equivalent to ((CR)#(x1, …, xn, y))u = 0.
Exercises
3.28	 Prove that the set of recursive functions is denumerable.
3.29	 If f0, f1, f2, … is an enumeration of all primitive recursive functions (or 
all recursive functions) of one variable, prove that the function fx(y) is 
not primitive recursive (or recursive).
Lemma 3.22 (Gödel’s β-Function)
Let β(x1, x2, x3) = rm(1 + (x3 + 1) · x2, x1). Then β is primitive recursive, by 
Proposition 3.16(n). Also, β is strongly representable in S by the following wf 
Bt(x1, x2, x3, y):
	
(
)(
(
(
)
)
(
)
)
∃
=
+
+
⋅
⋅
+
∧
<
+
+
⋅
w x
x
x
w
y
y
x
x
1
3
2
3
2
1
1
1
1
Proof
By Proposition 3.11 ⊢S (∃1y)Bt(x1, x2, x3, y). Assume β(k1, k2, k3) = m. 
Then k1 = (1 + (k3 + 1) · k2) · k + m for some k, and m < 1 + (k3 + 1) · k2. 
So, 
⊢S k
k
k
k
m
1
3
2
1
1
=
+
+
(
)
(
)
+
·
·
, 
by 
Proposition 
3.6(a). 
Moreover, 
⊢S m
k
k
<
+
+
(
)⋅
1
1
3
2 by the expressibility of < and Proposition 3.6(a). Hence, 
⊢S k
k
k
k
m
m
k
k
1
3
2
3
2
1
1
1
1
=
+
+
(
)⋅
(
)⋅
+
∧
<
+
+
(
)⋅
 from which by rule E4,
⊢S Bt k k
k
m
1
2
3
,
,
,
.
(
)  Thus, Bt strongly represents β in S.
Lemma 3.23
For any sequence of natural numbers k0, k1, …, kn, there exist natural numbers 
b and c such that β(b, c, i) = ki for 0 ≤ i ≤ n.
Proof
Let j = max(n, k0, k1, …, kn) and let c = j!. Consider the numbers ui = 1 + (i + 1)c 
for 0 ≤ i ≤ n; no two of them have a factor in common other than 1. In fact, 
if p were a prime dividing both 1 + (i + 1)c and 1 + (m + 1)c with 0 ≤ i < m ≤ n, 
then p would divide their difference (m − i)c. Now, p does not divide c, since, 
in that case p would divide both (i + 1)c and 1 + (i + 1)c, and so would divide 1, 
which is impossible. Hence, p also does not divide (m − i); for m − i ≤ n ≤ j 
and so, m − i divides j! = c. If p divided m − i, then p would divide c. 

188
Introduction to Mathematical Logic
Therefore, p does not divide (m − i)c, which yields a contradiction. Thus, 
the numbers ui, 0 ≤ i ≤ n, are relatively prime in pairs. Also, for 0 ≤ i ≤ n, ki ≤ j ≤ 
j! = c < 1 + (i + 1)c = ui; that is, ki < ui. Now, by the Chinese remainder theorem 
(see Exercise 3.30), there is a number b < u0u1 … un such that rm(ui, b) = ki for 
0 ≤ i ≤ n. But β(b, c, i) = rm(1 + (i + 1)c, b) = rm(ui, b) = ki.
Lemmas 3.22 and 3.23 enable us to express within S assertions about finite 
sequences of natural numbers, and this ability is crucial in part of the proof 
of the following fundamental theorem.
Proposition 3.24
Every recursive function is representable in S.
Proof
The initial functions Z, N, and Ui
n are representable in S, by Examples 1–3 on 
page 171. The substitution rule (IV) does not lead out of the class of repre-
sentable functions, by Example 4 on page 172.
For the recursion rule (V), assume that ɡ(x1, …, xn) and h(x1, …, xn, y, z) are 
representable in S by wfs B (x1, …, xn+1) and C (x1, …, xn+3), respectively, and let
	
I.
	
f x
x
x
x
f x
x
y
h x
x
y f x
x
n
n
n
n
n
1
1
1
1
1
0
1
,
,
,
,
,
,
,
,
,
,
, ,
,
,
,
…
(
) =
…
(
)
…
+
(
) =
…
…
g
y
(
)
(
)
Now, f(x1, …, xn, y) = z if and only if there is a finite sequence of numbers 
b0, …, by such that b0 = ɡ(x1, …, xn), bw+1 = h(x1, …, xn, w, bw) for w + 1 ≤ y, and 
by = z. But, by Lemma 3.23, reference to finite sequences can be paraphrased 
in terms of the function β and, by Lemma 3.22, β is representable in S by the 
wf Bt(x1, x2, x3, y).
We shall show that f(x1, …, xn, xn+1) is representable in S by the following 
wf D(x1, …, xn+2):
	
(
)(
)[((
)(
( , , ,
)
(
,
,
,
)))
( , ,
,
∃
∃
∃
∧
…
∧
+
+
u
v
w
u v
w
x
x
w
u v x
x
n
n
n
Bt
Bt
0
1
1
2
B
)
(
)(
(
)(
)(
( , ,
, )
( , ,
, )
(
,
,
∧∀
<
⇒∃
∃
∧
′
∧
…
+
w w
x
y
z
u v w y
u v w z
x
x
n
n
1
1
Bt
Bt
C
,
, , )))]
w y z
	
i.	First, assume that f(x1, …, xn, p) = m. We wish to show that 
⊢S D k
k
p m
n
1,
,
, ,
…
(
). If p = 0, then m = ɡ(k1, …, kn). Consider the 
sequence consisting of m alone. By Lemma 3.23, there exist b and c 
such that β(b, c, 0) = m. Hence, by Lemma 3.22,
	
X
( )
(
)
⊢S Bt b c
m
, , ,0

189
Formal Number Theory
	
	 Also, since m = ɡ(k1, …, kn), we have ⊢S B k
k m
n
1,
,
,
.
…
(
) Hence, by rule E4,
	
XX
(
)
∃
(
)
(
) ∧
…
(
)
(
)
⊢S
Bt
w
b c
w
k
k
w
n
, , ,
,
,
,
0
1
B
	
	 In addition, since ⊢S w ≮ 0, a tautology and Gen yield
	
XXX
(
) ∀
(
)
<
⇒∃
(
) ∃
(
)
(
)
(
)
∧
(
) ∧
…
′
w
w
y
z
b c w y
b c w z
k
kn
(
, ,
,
, ,
,
,
,
,
0
1
Bt
Bt
C
w y z
, ,
(
)
(
)))
	
	 Applying rule E4 to the conjunction of (X), (XX), and (XXX), we obtain 
⊢S D k
k
m
n
1
0
,
,
, ,
.
…
(
)  Now, for p > 0, f(k1, …, kn, p) is calculated from 
the equations (I) in p + 1 steps. Let ri = f(k1, …, kn, i). For the sequence 
of numbers r0, …, rp, there are, by Lemma 3.23, numbers b and c such 
that β(b, c, i) = ri for 0 ≤ i ≤ p. Hence, by Lemma 3.22, ⊢S Bt b c i ri
, , ,
.
(
)  
In particular, β b c
r
f k
k
k
k
n
n
, ,
,
,
,
,
,
.
0
0
0
1
1
(
) =
=
…
(
) =
…
(
)
g
 Therefore, 
⊢S Bt b c
r
k
k
r
n
, , ,
,
,
,
0
0
1
0
(
) ∧
…
(
)
B
, and, by rule E4, (i) ⊢S ∃
(
)
w
Bt b c
w
k
k
w
n
, , ,
,
,
,
.
0
1
(
) ∧
…
(
)
(
)
B
 
Since 
r
f k
k
p
m
p
n
=
…
=
(
,
,
, )
,
1
 
we 
have 
β( , , )
.
b c p
m
=
 
Hence, 
(ii) 
⊢S Bt b c p m
, , ,
.
(
)  
For 
0
1
1
< ≤
−
=
=
i
p
b c i
r
f k
k
i
i
n
, ( , , )
(
,
,
, )
β
…
 
and 
β( , ,
)
b c i
ri
+
=
=
+
1
1
f k
k
i
h k
k
i f k
k
i
h k
k
i r
n
n
n
n
i
(
,
,
,
)
(
,
,
, , (
,
,
, ))
(
,
,
, , ).
1
1
1
1
1
…
+
=
…
…
=
…
 
Therefore, ⊢S Bt
Bt
b c i r
b c i
r
k
k
i r r
i
i
n
i
i
, , ,
, ,
,
,
,
, , ,
.
(
)∧
(
) ∧
…
(
)
′
+
+
1
1
1
C
 By 
Rule E4, ⊢S
Bt
Bt
∃
(
) ∃
(
)
(
) ∧
(
) ∧
(
′
y
z
b c i y
b c i
z
, , ,
, ,
,
C k
k
i y z
n
1,
,
, , ,
…
(
) 
So, 
by 
Proposition 
3.8(b′), 
(iii) 
⊢S ∀
(
)
<
⇒∃
(
) ∃
(
)
w
w
p
y
z
(
Bt
Bt
b c w y
b c w z
k
k
w y z
n
, ,
,
, ,
,
,
,
,
, ,
)
(
) ∧
(
) ∧
…
(
)
(
)
′
C
1
. Then, apply-
ing rule E4 twice to the conjunction of (i), (ii), and (iii), we obtain 
⊢S D k
k
p m
n
1,
,
, ,
…
(
). Thus, we have verified clause 1 of the definition 
of representability (see page 170).
	
ii.	We must show that ⊢S ∃
(
)
…
(
)
+
+
1
2
1
2
x
k
k
p x
n
n
n
D
,
,
, ,
. The proof is by 
induction on p in the metalanguage. Notice that, by what we have 
proved above, it suffices to prove only uniqueness. The case of p = 0 is 
left as an easy exercise. Assume ⊢S ∃
(
)
…
(
)
+
+
1
2
1
2
x
k
k
p x
n
n
n
D
,
,
, ,
. Let α = 
ɡ(k1,  …,  kn), β = f(k1,  …,  kn, p), and γ = f(k1,  …,  kn, p + 1) = h(k1,  …,  kn, p, β). Then
	
( )
(
,
,
, , , )
( )
(
,
,
, )
( )
(
,
,
, , )
(
1
2
3
1
1
1
⊢
⊢
⊢
S
S
S
C
B
D
k
k
p
k
k
k
k
p
n
n
n
…
…
…
β γ
α
β
4
1
5
1
1
2
1
2
)
(
,
,
,
, )
( )
(
) (
,
,
, ,
)
⊢
⊢
S
S
D
D
k
k
p
x
k
k
p x
n
n
n
n
…
+
∃
…
+
+
γ

190
Introduction to Mathematical Logic
Assume
	
6
1
1
2
( )
…
+
(
)
+
D k
k
p
x
n
n
,
,
,
,
We must prove xn+ =
2
γ. From (6), by rule C,
	
a.
	
∃
(
)
(
) ∧
…
(
)
(
)
w
b c
w
k
k
w
n
Bt
, , ,
,
,
,
0
1
B
	 b.	 Bt( , ,
,
)
b c p
xn
+
+
1
2
	
c.
	
∀
(
)
<
+ ⇒∃
(
) ∃
(
)
(
) ∧
(
)
(
∧
…
′
w
w
p
y
z
b c w y
b c w z
k
k
w y
n
(
, ,
,
, ,
,
,
,
,
, ,
1
1
Bt
Bt
C
z
(
)))
	
	 From (c),
	
d.
	
∀
(
)
<
⇒∃
(
) ∃
(
)
(
) ∧
(
)
(
∧
…
(
′
w
w
p
y
z
b c w y
b c w z
k
k
w y z
n
(
, ,
,
, ,
,
,
,
,
, ,
Bt
Bt
C
1
)))
	
	 From (c) by rule A4 and rule C,
	
e.
	
Bt
Bt
b c p d
b c p
e
k
k
p d e
n
, , ,
, ,
,
,
,
, , ,
(
) ∧
+
(
) ∧
…
(
)
1
1
C
	
	 From (a), (d), and (e),
	
f.
	
D k
k
p d
n
1,
,
, ,
…
(
)
	
	 From (f), (5) and (3),
	 g.	 d = β
	
	 From (e) and (g),
	
h.
	 C k
k
p
e
n
1,
,
, , ,
…
(
)
β
	
	 Since β represents h, we obtain from (l) and (h),
	
i.	 γ = e
	
	 From (e) and (i),
	
j.	 Bt( , ,
, )
b c p +1 γ
	
	 From (b), (j), and Lemma 3.22,
	 k.	 xn+ =
2
γ
This completes the induction.
The μ-operator (VI). Let us assume, that, for any x1, …, xn, there is some y 
such that ɡ(x1, …, xn, y) = 0, and let us assume ɡ is representable in S by a wf 
E(x1, …, xn+2). Let f(x1, …, xn) = μy(ɡ(x1, …, xn, y) = 0). Then we shall show that f 
is representable in S by the wf F (x1, …, xn+1):
	
E
E
x
x
y
y
x
x
x
y
n
n
n
1
1
1
1
0
0
,
,
,
,
,
, ,
…
(
) ∧∀
(
)
<
⇒¬
…
(
)
(
)
+
+

191
Formal Number Theory
Assume f(k1, …, kn) = m. Then ɡ(k1, …, kn, m) = 0 and, for k < m, ɡ(k1, …, kn, k) ≠ 0. 
So, ⊢S E k
k
m
n
1
0
,
,
,
,
…
(
) and, for k
m
k
k
k
n
<
¬
…
(
)
,
,
,
, ,
⊢S
E
1
0 . By Proposition 
3.8(b′), 
⊢S ∀
(
)
<
⇒¬
…
(
)
(
)
y
y
m
k
k
y
n
E
1
0
,
,
, ,
. 
Hence, 
⊢S F
k
k
m
n
1,
,
,
.
…
(
)  
We  must also show: ⊢S ∃
(
)
…
(
)
+
+
1
1
1
1
x
k
k
x
n
n
n
F
,
,
,
. It suffices to prove the 
uniqueness. Assume E
E
k
k
u
y
y
u
k
k
y
n
n
1
1
0
0
,
,
, ,
,
,
, ,
.
…
(
) ∧∀
(
)
<
⇒¬
…
(
)
(
)  By 
Proposition 3.7(o′), ⊢S m
u
m
u
u
m
<
∨
=
∨
<
. Since ⊢S E k
k
m
n
1
0
,
,
,
,
…
(
), we 
cannot have m
u
< . Since ⊢S ∀
(
)
<
⇒¬
…
(
)
(
)
y
y
m
k
k
y
n
E
1
0
,
,
, ,
, we cannot 
have u
m
<
. Hence, u
m
=
. This shows the uniqueness.
Thus, we have proved that all recursive functions are representable in S.
Corollary 3.25
Every recursive relation is expressible in S.
Proof
Let R(x1, …, xn) be a recursive relation. Then its characteristic function CR 
is recursive. By Proposition 3.24, CR is representable in S and, therefore, by 
Proposition 3.13, R is expressible in S.
Exercises
3.30A	 a.	 Show that, if a and b are relatively prime natural numbers, then 
there is a natural number c such that ac ≡ 1(mod b). (Two numbers 
a and b are said to be relatively prime if their greatest common divi-
sor is 1. In general, x ≡ y(mod z) means that x and y leave the same 
remainder upon division by z or, equivalently, that x − y is divisible 
by z. This exercise amounts to showing that there exist integers u 
and v such that 1 = au + bv.)
	
b.	 Prove the Chinese remainder theorem: if x1, …, xk are relatively 
prime in pairs and y1, …, yk are any natural numbers, there is a nat-
ural number z such that z ≡ y1(mod x1), …, z ≡ yk(mod xk). Moreover, 
any two such z’s differ by a multiple of x1 … xk. [Hint: Let x = x1 … xk 
and let x
w x
w x
w x
k
k
=
=
=
=
1
1
2
2

. Then, for 1 ≤ j ≤ k, wj is relatively 
prime to xj and so, by (a), there is some zj such that wjzj ≡ 1(mod xj). 
Now let z
w z y
w z y
w z y
k
k
k
=
+
+
+
1 1
1
2
2
2

. Then z ≡ wjzjyj ≡ yj(mod xj). 
In addition, the difference between any two such solutions is divis-
ible by each of x1, …, xk and hence by x1 … xk.]
3.31	 Call a relation R(x1, …, xn) arithmetical if it is the interpretation of some 
wf B (x1, …, xn) in the language LA of arithmetic with respect to the 
standard model. Show that every recursive relation is arithmetical. 
[Hint: Use Corollary 3.25.]

192
Introduction to Mathematical Logic
3.4  Arithmetization: Gödel Numbers
For an arbitrary first-order theory K, we correlate with each symbol u of K an 
odd positive integer g(u), called the Gödel number of u, in the following manner:
	
g
g
g
g
g
g
g
(()
,
())
,
(,)
,
( )
,
(
)
,
( )
,
(
)
=
=
=
¬ =
⇒=
∀=
=
+
3
5
7
9
11
13
13
8
x
k
k
for k
a
k
k
f
k n
A
k
k
n
n
k
k
n
n
≥
=
+
≥
=
+
≥
=
+
1
7
8
1
1
8 2 3
1
3
8 2 3
g
g
g
(
)
(
)
(
)
,
(
)
(
for
for
k
k n
)
,
for
≥1
Clearly, every Gödel number of a symbol is an odd positive integer. Moreover, 
when divided by 8, ɡ(u) leaves a remainder of 5 when u is a variable, a remain-
der of 7 when u is an individual constant, a remainder of 1 when u is a func-
tion letter, and a remainder of 3 when u is a predicate letter. Thus, different 
symbols have different Gödel numbers.
Examples
	
g
g
g
g
x
a
f
A
2
4
1
2
2
1
29
39
97
147
(
) =
(
) =
(
) =
(
) =
,
,
,
Given an expression u0u1 … ur, where each uj is a symbol of K, we define its 
Gödel number ɡ(u0u1 … ur) by the equation
	
g u u
u
p
r
g u
g u
r
g ur
0
1
2
3
0
1
…
(
) =
…
(
)
(
)
(
)
where pj denotes the jth prime number and we assume that p0 = 2. For 
example,
	
g
g
A x x
A
x
x
1
2
1
2
99
3
2
2
3
5
7
11
13
2 3 5
1
2
1
2
(
,
)
(
)
(()
(
)
(,)
(
)
())
(
) =
=
g
g
g
g
g
1
7
29
5
7 11 13
Observe that different expressions have different Gödel numbers, by virtue 
of the uniqueness of the factorization of integers into primes. In addition, 
expressions have different Gödel numbers from symbols, since the former 
have even Gödel numbers and the latter odd Gödel numbers. Notice also 
that a single symbol, considered as an expression, has a different Gödel 
number from its Gödel number as a symbol. For example, the symbol x1 has 
Gödel number 21, whereas the expression that consists of only the symbol x1 
has Gödel number 221.

193
Formal Number Theory
If e0, e1, …, er is any finite sequence of expressions of K, we can assign a 
Gödel number to this sequence by setting
	
g e
e
e
p
r
g e
g e
r
g er
0
1
2
3
0
1
,
,
,
…
(
) =
…
(
)
(
)
(
)
Different sequences of expressions have different Gödel numbers. Since a 
Gödel number of a sequence of expressions is even and the exponent of 2 in 
its prime power factorization is also even, it differs from Gödel numbers of 
symbols and expressions. Remember that a proof in K is a certain kind of 
finite sequence of expressions and, therefore, has a Gödel number.
Thus, ɡ is a one–one function from the set of symbols of K, expressions of K, and 
finite sequences of expressions of K, into the set of positive integers. The range of 
ɡ is not the whole set of positive integers. For example, 10 is not a Gödel number.
Exercises
3.32	 Determine the objects that have the following Gödel numbers.
	
a.	 1944  b. 49  c. 15  d. 13 824  e. 25131159
3.33	 Show that, if n is odd, 4n is not a Gödel number.
3.34	 Find the Gödel numbers of the following expressions.
	
a.	 f
a
1
1
1
(
)  b. ((
)
(
,
)))
∀
¬
x
A a x
3
1
2
1
3
(
This method of associating numbers with symbols, expressions and 
sequences of expressions was originally devised by Gödel (1931) in order to 
arithmetize metamathematics,* that is, to replace assertions about a formal 
system by equivalent number-theoretic statements and then to express these 
statements within the formal system itself. This idea turned out to be the key 
to many significant problems in mathematical logic.
The assignment of Gödel numbers given here is in no way unique. Other meth-
ods are found in Kleene (1952, Chapter X) and in Smullyan (1961, Chapter 1, § 6).
Definition
A theory K is said to have a primitive recursive vocabulary (or a recursive vocabu-
lary) if the following properties are primitive recursive (or recursive):
	
a.	IC(x): x is the Gödel number of an individual constant of K;
	
b.	FL(x): x is the Gödel number of a function letter of K;
	
c.	PL(x): x is the Gödel number of a predicate letter of K.
*	 An arithmetization of a theory K is a one–one function ɡ from the set of symbols of K, expres-
sions of K and finite sequences of expressions of K into the set of positive integers. The fol-
lowing conditions are to be satisfied by the function ɡ: (1) ɡ is effectively computable; (2) there 
is an effective procedure that determines whether any given positive integer m is in the range 
of ɡ and, if m is in the range of ɡ, the procedure finds the object x such that ɡ(x) = m.

194
Introduction to Mathematical Logic
Remark
Any theory K that has only a finite number of individual constants, func-
tion letters, and predicate letters has a primitive recursive vocabulary. For 
example, if the individual constants of K are a
a
a
j
j
jn
1
2
,
,
,
…
, then IC(x) if and 
only if x = 7 + 8j1 ∨ x = 7 + 8j2 ∨ … ∨ x = 7 + 8jn. In particular, any theory K in 
the language LA of arithmetic has a primitive recursive vocabulary. So, S has 
a primitive recursive vocabulary.
Proposition 3.26
Let K be a theory with a primitive recursive (or recursive) vocabulary. Then 
the following relations and functions (1–16) are primitive recursive (or recur-
sive). In each case, we give first the notation and intuitive definition for the 
relation or function, and then an equivalent formula from which its primi-
tive recursiveness (or recursiveness) can be deduced.
	 1.	 EVbl(x): x is the Gödel number of an expression consisting of a vari-
able, (∃z)z<x(1 ≤ z ∧ x = 213+8z). By Proposition 3.18, this is primitive 
recursive.
	
	 EIC(x): x is the Gödel number of an expression consisting of an indi-
vidual constant, (∃y)y<x(IC(y) ∧ x = 2y) (Proposition 3.18).
	
	 EFL(x): x is the Gödel number of an expression consisting of a func-
tion letter, (∃y)y<x(FL(y) ∧ x = 2y) (Proposition 3.18).
	
	 EPL(x): x is the Gödel number of an expression consisting of a predi-
cate letter, (∃y)y<x(PL(y) ∧ x = 2y) (Proposition 3.18).
	 2.	 Arg
qt
T( )
(
( ,
))
x
x
=
−
8
1
0

: If x is the Gödel number of a function letter 
fj
n, then ArgT(x) = n. ArgT(x) is primitive recursive.
	
	 Arg
qt
P( )
(
( ,
))
x
x
=
−
8
3
0

: If x is the Gödel number of a predicate letter 
Aj
n, then Arg
Arg
P
P
( )
.
( )
x
n
x
=
 is primitive recursive.
	 3.	 Gd(x): x is the Gödel number of an expression of K, EVbl(x) ∨ EIC(x) 
∨ EFL(x) ∨ EPL(x) ∨ x = 23 ∨ x = 25 ∨ x = 27 ∨ x = 29 ∨ x = 211∨ x = 213 ∨ 
(∃u)u<x(∃v)v<x(x = u * v ∧ Gd(u) ∧ Gd(v)). Use Corollary 3.21. Here, * is 
the juxtaposition function defined in Example 4 on page 182.
	 4.	 MP (x, y, z): The expression with Gödel number z is a direct conse-
quence of the expressions with Gödel numbers x and y by modus 
ponens, y
x
z
x
z
=
∧
∧
2
2
2
3
11
5
*
*
* *
Gd
Gd
( )
( ).
	 5.	 Gen(x, y): The expression with Gödel number y comes from the 
expression with Gödel number x by the generalization rule:
	
(
)
(
( )
( ))
∃
∧
=
∧
<
v
v
y
v
x
x
v y EVbl
Gd
2
2
2
2
2
3
3
13
5
5
*
*
*
*
*
*
	 6.	 Trm(x): x is the Gödel number of a term of K. This holds when and 
only when either x is the Gödel number of an expression consisting 
of a variable or an individual constant, or there is a function letter fk
n 

195
Formal Number Theory
and terms t1, …, tn such that x is the Gödel number of f
t
t
k
n
n
( ,
,
).
1 …
 
The latter holds if and only if there is a sequence of n + 1 expressions
	
f
f
t
f
t t
f
t
t
f
t
t
t
k
n
k
n
k
n
k
n
n
k
n
n
n
1
1
2
1
1
1
1
(
(
…
…
(
…
−
−
,
,
,
,
,
,
( ,
,
,
)
	
	 the last of which, f
t
t
k
n
n
( ,
,
)
1 …
, has Gödel number x. This 
sequence can be represented by its Gödel number y. Clearly, 
y
p
p
p
p
x
x
n
x
n
n
x
x
x
<
…
=
⋅⋅
⋅
<
<
2 3
2 3
(
)
(
!)
(
!) .
…
 Note that ℓh(y) = n + 1 
and also that n = ArgT((x)0), since (x)0 is the Gödel number of fk
n. 
Hence, Trm(x) is equivalent to the following relation:
	
EVbl
EIC
ArgT
( )
( )
(
)
( )
( )
(( ) )
[
(
)
( )
!
x
x
y
x
y
h y
x
y
p
h y
x x
∨
∨∃
=
∧
=
<
−
ℓ

ℓ
1
0 + ∧
∧
=
∧
=
∧∀
∃
<
−
<
1
3
2
0 0
0 1
0
2
FL((( ) ) )
(( ) )
(( ) )
(
)
(
)
( )
y
y
h y
u
v
u
h y
v x
ℓ
ℓ

(( )
( )
( ))
(
)
(( )
( )
( )
( )
y
y
v
v
v
y
y
u
u
v x
h y
h y
+
<
−
−
=
∧
∧
∃
=
1
7
1
2
2
*
*
Trm
ℓ

ℓ
 *
*
v
v
25 ∧Trm( ))]
	
	 Thus, Trm(x) is primitive recursive (or recursive) by Corollary 3.21, 
since the formula above involves Trm(v) for only v < x. In fact, if we 
replace both occurrences of Trm(v) in the formula by (z)v = 0, then the 
new formula defines a primitive recursive (or recursive) relation H(x, z), 
and Trm(x) ⇔ H(x, (CTrm)#(x)). Therefore, Corollary 3.21 is applicable.
	
7.	 Atfml(x): x is the Gödel number of an atomic wf of K. This holds if 
and only if there are terms t1, …, tn and a predicate letter Ak
n such 
that x is the Gödel number of A t
t
k
n
n
( ,
,
)
1 …
. The latter holds if and 
only if there is a sequence of n + 1 expressions:
	
A
A
t
A
t t
A
t
t
A t
t
t
k
n
k
n
k
n
k
n
n
k
n
n
n
1
1
2
1
1
1
1
(
…
(
…
(
…
−
−
,
,
,
,
,
,
( ,
,
,
)
	
	 the last of which, A t
t
k
n
n
( ,
,
)
1 …
, has Gödel number x. This sequence 
of expressions can be represented by its Gödel number y. Clearly, 
y < (px!)x (as in (6) above) and n = ArgP((x)0). Thus, Atfml(x) is equiva-
lent to the following:
	
(
)
( )
( )
(( ) )
((( ) ) )
[
(
!)
( )
∃
=
∧
=
+ ∧
∧
<
−
y
x
y
h y
x
y
y
p
h y
x
x
ℓ

ℓ
1
0
0 0
1
Arg
PL
P
(( ) )
(( ) )
(
)
(
)
(( )
( )
( )
y
h y
u
v
y
y
v
u
h y
v x
u
u
0 1
0
2
1
3
2
=
∧
=
∧
∀
∃
=
<
−
<
+
ℓ
ℓ

*
* 2
2
7
1
2
5
∧
∧
∃
=
∧
<
−
−
Trm
Trm
( ))
(
)
(( )
( )
( ))]
( )
( )
v
v
y
y
v
v
v x
h y
h y
ℓ

ℓ
 *
*
	
	 Hence, by Proposition 3.18, Atfml(x) is primitive recursive (or 
recursive)

196
Introduction to Mathematical Logic
	 8.	 Fml(y): y is the Gödel number of a formula of K:
	
Atfml
Fml
Fml
Fml
( )
(
)
(
( )
)
(
(( ) )
(( )
[
y
z
z
y
z
z
z
z
y
∨∃
∧
=
∨
∧
<3
3
9
5
0
2
2
2
*
* *
1
3
0
11
1
5
0
1
3
3
2
2
2
2
2
2
)
( )
( )
)
(
(( ) )
(( ) )
∧
=
∨
∧
∧
=
y
z
z
z
z
y
*
*
*
*
*
*
Fml
EVbl
13
1
5
0
5
2
2
*
*
*
*
( )
( )
)]
z
z
	
	 It is easy to verify that Corollary 3.21 is applicable.
	 9.	 Subst(x, y, u, v): x is the Gödel number of the result of substituting in 
the expression with Gödel number y the term with Gödel number u 
for all free occurrences of the variable with Gödel number v:
	
Gd
Trm
EVbl
( )
( )
(
)
[(
)
(
)
(
)
(
y
u
y
x
u
w
y
y
x
y
v
v
w y
w
v
∧
∧
∧
=
∧
=
∨
∃
=
∧
≠
∧
=
∨
<
2
2
2
2
∃
∃
∧
=
∧
∃
=
<
<
<
z
w
w
y
w z
x
z y
w y
v
x
)
(
)
(
( )
(
)
(
Fml
2
2
2
2
2
2
3
13
5
3
13
*
*
*
*
*
*
*
α α
2
2
2
2
5
3
1
v
z y
w y
w
z u v
z
w
w
y
*
*
*
*
α
α
∧
∨
¬ ∃
∃
∧
=
<
<
Subst
Fml
( , , , )))
(
)
(
)
(
( )
3
5
2
2
1
2
0
*
*
*
*
*
*
v
x
x
z y
y
w z
z
z
y
z
x
(
)
(
) ∧
∃
∃
∃
<
∧
=
∧
=
<
<
<
(
)
(
)
(
)
(
( )
α
β
α β
α
β
∧
∧
Subst
Subst
( ,
, , )
( , , , )))]
( )
α
β
2
0
y
u v
z u v
	
	 Corollary 3.21 is applicable.* The reader should verify that this for-
mula actually captures the intuitive content of Subst(x, y, u, v).
	 10.	 SuB (y, u, v): the Gödel number of the result of substituting the term 
with Gödel number u for all free occurrences in the expression with 
Gödel number y of the variable with Gödel number v:
	
Sub
Subst
( , , )
( , , , )
(
!)
y u v
x
u y u v
x
puy
uy
=
<
µ
	
	 Therefore, Sub is primitive recursive (or recursive) by Proposition 
3.18. (When the conditions on u, v, and y are not met, SuB (y, u, v) is 
defined, but its value is of no interest.)
	 11.	 Fr(y, v): y is the Gödel number of a wf or term of K that contains free 
occurrences of the variable with Gödel number v:
	
(
( )
( ))
(
)
( , ,
)
,
Fml
Trm
EVbl
Subst
y
y
y y
v
v
v
∨
∧
∧¬
+
2
213 8
*	 Actually a simultaneous recursion in x and y is involved. In the given formula, replace “x” 
by “(q)0” and “y” by “(q)1” and the result by Corollary 3.21 yields a recursive relation R(q, u, v). 
Now define Subst(x, y, u, v) as R(2x3y, u, v).

197
Formal Number Theory
	
	 (That is, substitution in the wf or term with Gödel number y of a 
certain variable different from the variable with Gödel number v 
for all free occurrences of the variable with Gödel number v yields 
a different expression.)
	 12.	 Ff(u, v, w): u is the Gödel number of a term that is free for the vari-
able with Gödel number v in the wf with Gödel number w:
	
Trm
EVbl
Fml
Atfml
Ff
( )
(
)
( )
[
( )
(
)
(
(
u
w
w
y
w
y
u
v
y w
∧
∧
∧
∧∃
=
∧
<
2
2
2
2
3
9
5
*
*
*
, , ))
(
)
(
)
(
( , , )
( , , )
v y
y
z
w
y
z
u v y
u v z
y w
z w
∨∃
∃
=
∧
∧
<
<
2
2
2
3
11
5
*
*
* *
Ff
Ff
)
(
)
(
)
(
(
)
(
(
∨
∃
∃
=
∧
∧
≠
⇒
<
<
y
z
w
y
z
v
y w
z w
z
z
2
2
2
2
2
2
2
3
3
13
5
5
*
*
*
*
*
*
EVbl
Ff u v y
u z
y v
, , )
(
( , )
( , ))))]
∧
⇒¬
Fr
Fr
	
	 Use Corollary 3.21 again.
	 13.	 a.	 Ax1(x): x is the Gödel number of an instance of axiom schema (A1):
	
(
)
(
)
( )
( )
(
)
∃
∃
∧
∧
=
<
<
u
v
u
v
x
u
v
u
u x
v x Fml
Fml
2
2
2
2
2
2
3
11
3
11
5
5
*
*
*
*
*
*
*
*
	
b.	 Ax2(x): x is the Gödel number of an instance of axiom schema (A2):
	
(
)
(
)
(
)
( )
( )
( )
(
∃
∃
∃
∧
∧
∧
=
<
<
<
u
v
w
u
v
w
x
u
u x
v x
w x Fml
Fml
Fml
2
2
2
2
3
3
11
*
*
*
*
3
11
5
5
11
3
3
11
5
11
3
11
5
5
2
2
2
2
2
2
2
2
2
2
2
2
2
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
v
w
u
v
u
w
* 25)
	
c.	 Ax3(x): x is the Gödel number of an instance of axiom schema (A3):
	
(
)
(
)
( )
( )
(
∃
∃
∧
∧
=
<
<
u
v
u
v
x
v
u x
v x Fml
Fml
2
2
2
2
2
2
2
2
3
3
3
9
5
11
3
9
*
*
*
*
*
*
*
*
* u
v
u
v
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
2
2
2
2
2
2
2
2
2
2
2
2
2
5
5
11
3
3
3
9
5
11
5
11
5
5)
	
d.	 Ax4(x): x is the Gödel number of an instance of axiom schema (A4):
	
(
)
(
)
(
)
( )
( )
(
)
( , , )
(
∃
∃
∃
∧
∧
∧
∧
=
<
<
<
u
v
y
y
u
u v y
x
u x
v x
y x
v
Fml
Trm
EVbl
Ff
2
23
3
3
13
5
11
5
2
2
2
2
2
2
2
*
*
*
*
*
*
*
*
*
v
y
y u v
Sub( , , )
)

198
Introduction to Mathematical Logic
	
e.	 Ax5(x): x is the Gödel number of an instance of axiom schema (A5):
	
(
)
(
)
(
)
( )
( )
(
)
( , )
(
∃
∃
∃
∧
∧
∧¬
∧
=
<
<
<
u
v
w
u
w
u v
x
u x
v x
w x
v
Fml
Fml
EVbl
Fr
2
23 *
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
3
3
13
5
3
11
5
5
11
3
11
3
3
13
v
u
w
u
2
2
2
2
2
5
5
5
5
v
w
*
*
*
*
*
)
	
f.	 LAX(y): y is the Gödel number of a logical axiom of K
	
Ax
Ax
Ax
Ax
Ax
1
2
3
4
5
( )
( )
( )
( )
( )
y
y
y
y
y
∨
∨
∨
∨
	 14.	 The following negation function is primitive recursive. Neg(x): the 
Gödel number of (¬B) if x is the Gödel number of B:
	
Neg( )
x
x
= 2
2
2
3
9
5
*
*
*
	 15.	 The following conditional function is primitive recursive. Cond(x, y): 
the Gödel number of (B ⇒ C) if x is the Gödel number of B and y is 
the Gödel number of C:
	
Cond( , )
x y
x
y
= 2
2
2
3
11
5
*
*
*
*
	 16.	 Clos(u): the Gödel number of the closure of B if u is the Gödel num-
ber of a wf B. First, let V(u) = μvv≤u(EVbl(2v) ∧ Fr(u, v)). V is primi-
tive recursive (or recursive). V(u) is the least Gödel number of a free 
variable of u (if there are any). Let Sent(u) be Fml(u) ∧ ¬(∃v)v≤uFr(u, v). 
Sent is primitive recursive (or recursive). Sent(u) holds when and 
only when u is the Gödel number of a sentence (i.e., a closed wf). 
Now let
	
G
if Fml
Sent
otherwise
( )
( )
( )
( )
u
u
u
u
u
V u
=
∧¬

2
2
2
2
2
2
3
3
13
5
5
*
*
*
*
*
*

G is primitive recursive (or recursive). If u is the Gödel number of a wf B that 
is not a closed wf, then G(u) is the Gödel number of (∀x)B, where x is the free 
variable of B that has the least Gödel number. Otherwise, G(u) = u. Now, let
	
H
G
H
G H
( , )
( )
( ,
)
(
( , ))
u
u
u y
u y
0
1
=
+
=
H is primitive recursive (or recursive). Finally,
	
Clos
H
H
H
( )
( ,
(
( , )
( ,
)))
u
u
y
u y
u y
y u
=
=
+
≤
µ
1
Thus, Clos is primitive recursive (or recursive).

199
Formal Number Theory
Proposition 3.27
Let K be a theory having a primitive recursive (or recursive) vocabulary and 
whose language contains the individual constant 0 and the function letter 
f1
1 of LA. (Thus, all the numerals are terms of K. In particular, K can be S 
itself.) Then the following functions and relation are primitive recursive (or 
recursive).
	 17.	 Num(y): the Gödel number of the expression y
	
Num
Num
Num
( )
(
)
( )
0
2
1
2
2
2
15
49
3
5
=
+
=
y
y
*
*
*
	
	 Num is primitive recursive by virtue of the recursion rule (V).
	 18.	 Nu(x): x is the Gödel number of a numeral
	
(
)
(
( ))
∃
=
<
y
x
y
y x
Num
	
	 Nu is primitive recursive by Proposition 3.18.
	 19.	 D(u): the Gödel number of B u
( ), if u is the Gödel number of a wf B (x1):
	
D( )
( ,
( ),
)
u
u
u
= Sub
Num
21
	
	 Thus, D is primitive recursive (or recursive). D is called the diagonal 
function.
Definition
A theory K will be said to have a primitive recursive (or recursive) axiom set if 
the following property PrAx is primitive recursive (or recursive):
	
PrAx
is the Godel number of a proper axiom of K
( ):
y
y

Notice that S has a primitive recursive axiom set. Let a1, a2, …, a8 be the 
Gödel numbers of axioms (S1)–(S8). It is easy to see that a number y is the Gödel 
number of an instance of axiom schema (S9) if and only if
	
(
)
(
)
(
(
)
( )
( ,
, )
∃
∃
∧
∧
=
<
<
v
w
w
y
w
v
v y
w y
v
EVbl
Fml
Sub
2
2
2
2
2
2
3
15
11
3
3
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
2
2
2
2
2
2
2
2
2
2
2
2
2
2
3
13
5
3
11
49
3
5
5
5
11
3
v
v
w
w
v
Sub( ,
, )
*
*
*
*
*
*
*
2
2
2
2
2
2
3
13
5
5
5
v
w
)

200
Introduction to Mathematical Logic
Denote the displayed formula by A9(y). Then y is the Gödel number of a 
proper axiom of S if and only if
	
y
a
y
a
y
a
y
=
∨
=
∨… ∨
=
∨
1
2
8
9
A ( )
Thus, PrAx(y) is primitive recursive for S.
Proposition 3.28
Let K be a theory having a primitive recursive (or recursive) vocabulary and 
a primitive recursive (or recursive) axiom set. Then the following three rela-
tions are primitive recursive (or recursive).
	 20.	 Ax(y): y is the Gödel number of an axiom of K:
	
LAX
PrAx
( )
( )
y
y
∨
	 21.	 Prf(y): y is the Gödel number of a proof in K:
	
(
)
(
)
(
)
(
)
([
( )]
( )
(( )
[
∃
∃
∃
∃
=
∧
∨
∧
<
<
<
<
u
v
z
w
y
w
u
u
u y
v y
z y
w y
w
w
2
Ax
Prf
Fml
)
(( ) , )]
( )
(( ) )
(( ) )
[
∧
=
∧
∨
∧
∧
∧
=
∧
y
u
u
v
u
u
u
y
u
v
w
z
w
v
*
*
2
2
Gen
Prf
Fml
Fml
MP
Prf
Ax
(( ) ,( ) , )]
[
( )
( )]
u
u
v
u
y
u
v
z
w
v
∨
∧
=
∧
* 2
	
	 Apply Corollary 3.21.
	 22.	 Pf(y, x): y is the Gödel number of a proof in K of the wf with Gödel 
number x:
	
Prf( )
( ) ( )
y
x
y lh y
∧
=
− 1
The relations and functions of Propositions 3.26–3.28 should have the sub-
script “K” attached to the corresponding signs to indicate the dependence 
on K. If we considered a different theory, then we would obtain different 
relations and functions.
Exercise
3.35	 a.	 If K is a theory for which the property Fml(y) is primitive recursive 
(or recursive), prove that K has a primitive recursive (or recursive) 
vocabulary.
	
b.	 Let K be a theory for which the property Ax(y) is primitive recur-
sive (or recursive).

201
Formal Number Theory
	
	
i.	
Show that K has a primitive recursive (or recursive) vocabulary.
	
	
ii.	 Assuming also that no proper axiom of K is a logical axiom, 
prove that K has a primitive recursive (or recursive) axiom set.
Proposition 3.29
Let K be a theory with equality whose language contains the individual con-
stant 0 and the function letter f1
1 and such that K has a primitive recursive (or 
recursive) vocabulary and axiom set. Also assume:
	
∗( )
=
=
For any natural numbers
and
if
then
K
r
s
r
s
r
s
,
,
.
⊢
Then any function f(x1, …, xn) that is representable in K is recursive.
Proof
Let B (x1, …, xn, xn+1) be a wf of K that represents f. Let PB(u1, …, un, un+1, y) mean 
that y is the Gödel number of a proof in K of the wf B u
u
u
n
n
1
1
,
,
,
.
…
(
)
+
 Note 
that, if PB(u1, …, un, un+1, y), then f(u1, …, un) = un+1. (In fact, let f(u1, …, un) = r. 
Since B represents f in K, ⊢K B u
u
r
n
1,
,
,
…
(
) and ⊢K ∃
(
)
…
(
)
1
1
y
u
u
y
n
B
,
,
,
. By 
hypothesis, PB(u1, …, un, un+1, y). Hence, ⊢K B u
u
u
n
n
1
1
,
,
,
…
(
)
+
. Since K is a the-
ory with equality, it follows that ⊢K r
un
=
+1. By (*), r = un+1.) Now let m be the 
Gödel number of B (x1, …, xn, xn+1). Then PB (u1, …, un, un+1, y) is equivalent to:
	 Pf
Sub
Sub Sub m Num
Num
Num
( ,
(
(
(
,
(
),
),
(
),
)
(
),
y
u
u
un
…
…
+
+
1
2
1
21
29
21
8n))
So, by Propositions 3.26–3.28, PB (u1, …, un, un+1, y) is primitive recursive (or 
recursive). Now consider any natural numbers k1, …, kn. Let f(k1, …, kn) = r. Then 
⊢K B k
k
r
n
1,
,
,
.
…
(
)  Let j be the Gödel number of a proof in K of B k
k
r
n
1,
,
,
.
…
(
)  
Then P
k
k
r j
n
B
1,
,
, ,
…
(
). Thus, for any x1, …, xn, there is some y such that PB (x1, 
…, xn, (y)0, (y)1). Then, by Exercise 3.16(c), μy(PB (x1, …, xn, (y)0, (y)1)) is recursive. 
But, f(x1, …, xn) = (μy(PB (x1, …, xn, (y)0, (y)1)))0 and, therefore, f is recursive.
Exercise
3.36	 Let K be a theory whose language contains the predicate letter =, the 
individual constant 0, and the function letter f1
1.
	
a.	 If K satisfies hypothesis (*) of Proposition 3.29, prove that K must be 
consistent.
	
b.	 If K is inconsistent, prove that every number-theoretic function is 
representable in K.
	
c.	 If K is consistent and the identity relation x = y is expressible in K, 
show that K satisfies hypothesis (*) of Proposition 3.29.

202
Introduction to Mathematical Logic
Corollary 3.30
Assume S consistent. Then the class of recursive functions is identical with 
the class of functions representable in S.
Proof
We have observed that S has a primitive recursive vocabulary and axiom 
set. By Exercise 3.36(c) and the already noted fact that the identity relation is 
expressible in S, we see that Proposition 3.29 entails that every function rep-
resentable in S is recursive. On the other hand, Proposition 3.24 tells us that 
every recursive function is representable in S.
In Chapter 5, it will be made plausible that the notion of recursive function 
is a precise mathematical equivalent of the intuitive idea of effectively comput-
able function.
Corollary 3.31
A number-theoretic relation R(x1, …, xn) is recursive if and only if it is express-
ible in S.
Proof
By definition, R is recursive if and only if CR is recursive. By Corollary 3.30, 
CR is recursive if and only if CR is representable in S. But, by Proposition 3.13, 
CR is representable in S if and only if R is expressible in S.
It will be helpful later to find weaker theories than S for which the repre-
sentable functions are identical with the recursive functions. Analysis of the 
proof of Proposition 3.24 leads us to the following theory.
Robinson’s System
Consider the theory in the language LA with the following finite list of proper 
axioms.
	 1.	 x1 = x1
	 2.	 x1 = x2 ⇒ x2 = x1
	 3.	 x1 = x2 ⇒ (x2 = x3 ⇒ x1 = x3)
	 4.	 x1 = x2 ⇒ x1′ = x2′
	 5.	 x1 = x2 ⇒ (x1 + x3 = x2 + x3 ∧ x3 + x1 = x3 + x2)
	 6.	 x1 = x2 ⇒ (x1 · x3 = x2 · x3 ∧ x3 · x1 = x3 · x2)
	
7.	 x1′ = x2′ ⇒ x1 = x2
	 8.	 0 ≠ x1′
	 9.	 x1 ≠ 0 ⇒ (∃x2)(x1 = x2′)
	 10.	 x1 + 0 = x1

203
Formal Number Theory
	 11.	 x1 + x2′ = (x1 + x2)′
	 12.	 x1 · 0 = 0
	 13.	 x1 · x2′ = (x1 · x2) + x1
	 14.	 (x2 = x1 · x3 + x4 ∧ x4 < x1 ∧ x2 = x1 · x5 + x6 ∧ x6 < x1) ⇒ x4 = x6 (unique-
ness of remainder)
We shall call this theory RR. Clearly, RR is a subtheory of S, since all the axioms 
of RR are theorems of S. In addition, it follows from Proposition 2.25 and axioms 
(1)–(6) that RR is a theory with equality. (The system Q of axioms (1)–(13) is due 
to R.M. Robinson (1950). Axiom (14) has been added to make one of the proofs 
below easier.) Notice that RR has only a finite number of proper axioms.
Lemma 3.32
In RR, the following are theorems.
	 a.	 n
m
n
m
+
=
+
 for any natural numbers n and m
	 b.	 n m
n m
⋅
=
⋅
 for any natural numbers n and m
	
c.	 n
m
≠
 for any natural numbers such that n ≠ m
	 d.	 n
m
<
 for any natural numbers n and m such that n
m
<
	 e.	 x ≮ 0
	
f.	 x
n
x
x
x
n
≤
⇒
=
∨
=
∨… ∨
=
0
1
 for any natural number n
	 g.	 x
n
n
x
≤
∨
≤ for any natural number n
Proof
Parts (a)–(c) are proved the same way as Proposition 3.6(a). Parts (d)–(g) are 
left as exercises.
Proposition 3.33
All recursive functions are representable in RR.
Proof
The initial functions Z, N, and Ui
n are representable in RR by the same wfs 
as in Examples 1–3, page 171. That the substitution rule does not lead out of 
the class of functions representable in RR is proved in the same way as in 
Example 4 on page 172. For the recursion rule, first notice that β(x1, x2, x3) is 
represented in RR by Bt(x1, x2, x3, y) and that ⊢RR Bt(x1, x2, x3, y) ∧ Bt(x1, x2, x3, z) 
⇒ y = z. Reasoning like that in the proof of Proposition 3.24 shows that the 
recursion rule preserves representability in RR.* The argument given for the 
restricted μ-operator rule also remains valid for RR.
*	 This part of the argument is due to Gordon McLean, Jr.

204
Introduction to Mathematical Logic
By Proposition 3.33, all recursive functions are representable in any exten-
sion of RR. Hence, by Proposition 3.29 and Exercise 3.36(c), in any consistent 
extension of RR in the language LA that has a recursive axiom set, the class 
of representable functions is the same as the class of recursive functions. 
Moreover, by Proposition 3.13, the relations expressible in such a theory are 
the recursive relations.
Exercises
3.37D	 Show that RR is a proper subtheory of S. [Hint: Find a model for RR 
that is not a model for S.] (Remark: Not only is S different from RR, but 
it is not finitely axiomatizable at all, that is, there is no theory K having 
only a finite number of proper axioms, whose theorems are the same 
as those of S. This was proved by Ryll-Nardzewski, 1953.)
3.38	
Show that axiom (14) of RR is not provable from axioms (1)–(13) and, 
therefore, that Q is a proper subtheory of RR. [Hint: Find a model of 
(1)–(13) for which (14) is not true.]
3.39	
Let K be a theory in the language LA with just one proper axiom: (∀x1)
(∀x2)x1 = x2.
	
a.	
Show that K is a consistent theory with equality.
	
b.	 Prove that all number-theoretic functions are representable in K.
	
c.	
Which number-theoretic relations are expressible in K? [Hint: Use 
elimination of quantifiers.]
	
d.	 Show that the hypothesis ⊢K 0 ≠ 1 cannot be eliminated from 
Proposition 3.13.
	
e.	
Show that, in Proposition 3.29, the hypothesis (*) cannot be 
replaced by the assumption that K is consistent.
3.40	
Let R be the theory in the language LA having as proper axioms the 
equality axioms (1)–(6) of RR as well as the following five axiom sche-
mas, in which n and m are arbitrary natural numbers:
	
(R1) n
m
n
m
+
=
+
	
(R2) n m
n m
⋅
=
⋅
	
(R3) n
m
n
m
≠
≠
if
	
(R4) x
n
x
x
n
≤
⇒
=
∨… ∨
=
0
	
(R5) x
n
n
x
≤
∨
≤
	
Prove the following.
	
a.	
R is not finitely axiomatizable. [Hint: Show that every finite subset 
of the axioms of R has a model that is not a model of R.]
	
b.	 R is a proper subtheory of Q.

205
Formal Number Theory
	
c.D	
Every recursive function is representable in R. (See Monk, 1976, p. 248.)
	
d.	 The functions representable in R are the recursive functions.
	
e.	
The relations expressible in R are the recursive relations.
3.5  The Fixed-Point Theorem: Gödel’s Incompleteness Theorem
If K is a theory in the language LA, recall that the diagonal function D has the 
property that, if u is the Gödel number of a wf B (x1), then D(u) is the Gödel 
number of the wf B u
( ).
Notation
When C is an expression of a theory and the Gödel number of C is q, then we 
shall denote the numeral q by ⌜⌝
C . We can think of ⌜⌝
C  as being a “name” for 
C within the language LA.
Proposition 3.34 (Diagonalization Lemma)
Assume that the diagonal function D is representable in a theory with equal-
ity K in the language LA. Then, for any wf E (x1) in which x1 is the only free 
variable, there exists a closed wf C  such that
	
⊢
⌜⌝
K C
E
C
⇔
(
)
Proof
Let D(x1, x2) be a wf representing D in K. Construct the wf
	
∇
( ) ∀
(
)
(
) ⇒
(
)
(
)
x
x x
x
2
1
2
2
D
E
,
Let m be the Gödel number of (∇). Now substitute m for x1 in (∇):
	
C
D
E
( ) ∀
(
)
(
) ⇒
(
)
(
)
x
m x
x
2
2
2
,
Let q be the Gödel number of this wf C. So, q is ⌜⌝
C . Clearly, D(m) = q. (In fact, 
m is the Gödel number of a wf B (x1), namely, (∇), and q is the Gödel number 
of B m
( ).) Since D represents D in K,
	
∂( )
(
)
⊢K D m q
,

206
Introduction to Mathematical Logic
	 a.	 Let us show ⊢K C
E
⇒( )
q .
	
1.	 C	
Hyp
	
2.	
∀
(
)
(
) ⇒
(
)
(
)
x
m x
x
2
2
2
D
E
,
	
Same as 1
	
3.	 D
E
m q
q
,
(
) ⇒( )	
2, rule A4
	
4.	 D m q
,
(
) 	
(∂)
	
5.	 E q( )	
3, 4, MP
	
6.	 C
E
⊢K
q( ) 	
1–5
	
7.	 ⊢K C
E
⇒( )
q 	
1–6, Corollary 2.6
	 b.	 Let us prove ⊢K E
C
q( ) ⇒
.
	
1.	 E q( )	
Hyp
	
2.	 D m x
,
2
(
)	
Hyp
	
3.	
∃
(
)
(
)
1
2
2
x
m x
D
,
	
D represents D
	
4.	 D m q
,
(
)	
(∂)
	
5.	 x
q
2 = 	
2–4, properties of =
	
6.	 E x2
(
)	
1, 5, substitutivity of =
	
7.	 E
D
E
q
m x
x
( )
(
)
(
)
,
,
2
2
⊢K
	
1–6
	
8.	 E
D
E
q
m x
x
( )
(
) ⇒
(
)
⊢K
,
2
2 	
1–7, Corollary 2.6
	
9.	 E
D
E
q
x
m x
x
( )
∀
(
)
(
) ⇒
(
)
(
)
⊢K
2
2
2
,
	
8, Gen
	
10.	 ⊢K E
D
E
q
x
m x
x
( ) ⇒∀
(
)
(
) ⇒
(
)
(
)
2
2
2
,
	 1–9, Corollary 2.6
	
11.	 ⊢K E
C
q( ) ⇒
	
Same as 10
From parts (a) and (b), by biconditional introduction, ⊢K C
E
⇔
( )
q .
Proposition 3.35 (Fixed-Point Theorem)*
Assume that all recursive functions are representable in a theory with equal-
ity K in the language LA. Then, for any wf E (x1) in which x1 is the only free 
variable, there is a closed wf C such that
	
⊢
⌜⌝
K C
E
C
⇔
(
)
*	 The terms “fixed-point theorem” and “diagonalization lemma” are often used interchange-
ably, but I have adopted the present terminology for convenience of reference. The central 
idea seems to have first received explicit mention by Carnap (1934), who pointed out that the 
result was implicit in the work of Gödel (1931). The use of indirect self-reference was the key 
idea in the explosion of progress in mathematical logic that began in the 1930s.

207
Formal Number Theory
Proof
By Proposition 3.27, D is recursive.* Hence, D is representable in K and 
Proposition 3.34 is applicable.
By Proposition 3.33, the fixed-point theorem holds when K is RR or any 
extension of RR. In particular, it holds for S.
Definitions
Let K be any theory whose language contains the individual constant 0 and 
the function letter f1
1. Then K is said to be ω-consistent if, for every wf B (x) of 
K containing x as its only free variable, if ⊢K ¬
( )
B n  for every natural number 
n, then it is not the case that ⊢K (∃x)B (x).
Let K be any theory in the language LA. K is said to be a true theory if all 
proper axioms of K are true in the standard model. (Since all logical axioms 
are true in all models and MP and Gen lead from wfs true in a model to wfs 
true in that model, all theorems of a true theory will be true in the standard 
model.)
Any true theory K must be ω-consistent. (In fact, if ⊢K ¬
( )
B n  for all natural 
numbers n, then B (x) is false for every natural number and, therefore, (∃x)B 
(x) cannot be true for the standard model. Hence, (∃x)B (x) cannot be a theo-
rem of K.) In particular, RR and S are ω-consistent.
Proposition 3.36
If K is ω-consistent, then K is consistent.
Proof
Let E(x) be any wf containing x as its only free variable. Let B (x) be E(x) ∧ 
¬E(x). Then ¬
( )
B n  is an instance of a tautology. Hence, ⊢K ¬
( )
B n  for every 
natural number n. By ω-consistency, not-⊢K (∃x)B (x). Therefore, K is consis-
tent. (Remember that every wf is provable in an inconsistent theory, by virtue 
of the tautology ¬A ⇒ (A ⇒ B). Hence, if at least one wf is not provable, the 
theory must be consistent.)
It will turn out later that the converse of Proposition 3.36 does not hold.
*	 In fact, D is primitive recursive, since K, being a theory in LA, has a primitive recursive 
vocabulary.

208
Introduction to Mathematical Logic
Definition
An undecidable sentence of a theory K is a closed wf B of K such that neither B 
nor ¬B is a theorem of K, that is, such that not-⊢K B and not-⊢K ¬B.
Gödel’s Incompleteness Theorem
Let K be a theory with equality in the language LA satisfying the following 
three conditions:
	 1.	 K has a recursive axiom set (that is, PrAx(y) is recursive).
	 2.	 ⊢K 0
1
≠.
	 3.	 Every recursive function is representable in K.
By assumption 1, Propositions 3.26–3.28 are applicable. By assumptions 
2 and 3 and Proposition 3.13, every recursive relation is expressible in K. 
By assumption 3, the fixed-point theorem is applicable. Note that K can 
be taken to be RR, S, or, more generally, any extension of RR having a 
recursive axiom set. Recall that Pf(y, x) means that y is the Gödel number 
of a proof in K of a wf with Gödel number x. By Proposition 3.28, Pf is 
recursive. Hence, Pf is expressible in K by a wf PF (x2, x1). Let E (x1) be the 
wf (∀x2) ¬P F (x2, x1). By the fixed-point theorem, there must be a closed 
wf G such that
	
$
,
.
( )
⇔∀
(
)¬
(
)
⊢
⌜⌝
K G
Pf
G
x
x
2
2
Observe that, in terms of the standard interpretation, ∀
(
)¬
(
)
x
x
2
2
Pf
G
,⌜⌝ says 
that there is no natural number that is the Gödel number of a proof in K of the 
wf G, which is equivalent to asserting that there is no proof in K of G. Hence, 
G is equivalent in K to an assertion that G is unprovable in K. In other words, 
G says “I am not provable in K”. This is an analogue of the liar paradox: “I am 
lying” (that is, “I am not true”). However, although the liar paradox leads to 
a contradiction, Gödel (1931) showed that G is an undecidable sentence of K. 
We shall refer to G as a Gödel sentence for K.
Proposition 3.37 (Gödel’s Incompleteness Theorem)
Let K satisfy conditions 1–3. Then
	
a.	If K is consistent, not-⊢K G.
	
b.	If K is ω-consistent, not-⊢K ¬G.
Hence, if K is ω-consistent, G is an undecidable sentence of K.

209
Formal Number Theory
Proof
Let q be the Gödel number of G.
	 a.	 Assume ⊢K G. Let r be the Gödel number of a proof in K of G. Then 
Pf(r, q). Hence, ⊢K
r q
P f
,
(
), that is ⊢
⌜⌝
K
r
P f
G
,
(
). But, from ($) 
above by biconditional elimination, ⊢K(∀x2) ¬P  f (x2, ⌊G ⌋). By rule A4, 
⊢
⌜⌝
K ¬
(
)
Pf
G
r ,
. Therefore, K is inconsistent.
	 b.	 Assume K is ω-consistent and ⊢K ¬G. From ($) by biconditional elim-
ination, ⊢K ¬(∀x2)¬P  f (x2, ⌜G⌝), which abbreviates to
	
∗( )
∃
(
)
(
)
⊢
⌜⌝
K
x
x
2
2
P f
G
,
On the other hand, since K is ω-consistent, Proposition 3.36 implies that K 
is consistent. But, ⊢K ¬G. Hence, not-⊢K G, that is, there is no proof in K of G. 
So, Pf(n, q) is false for every natural number n and, therefore, ⊢
⌜⌝
K ¬
(
)
Pf
G
n,
 
for every natural number n. (Remember that ⌜G⌝ is q.) By ω-consistency, not-
⊢K(∃x2)P  f (x2, ⌜G⌝), contradicting (*).
Remarks
Gödel’s incompleteness theorem has been established for any theory with 
equality K in the language LA that satisfies conditions 1–3 above. Assume 
that K also satisfies the following condition:
	
( )
.
+
K is a true theory
(In particular, K can be S or any subtheory of S.) Proposition 3.37(a) shows 
that, if K is consistent, G is not provable in K. But, under the standard inter-
pretation, G asserts its own unprovability in K. Therefore, G is true for the 
standard interpretation.
Moreover, when K is a true theory, the following simple intuitive argu-
ment can be given for the undecidability of G in K.
	
i.	 Assume ⊢K G. Since ⊢K G ⇔ (∀x2) ¬P  f  (x2, ⌜G⌝), it follows that ⊢K(∀x2) 
¬P  f  (x2, ⌜G⌝). Since K is a true theory, (∀x2) ¬P  f (x2, ⌜G⌝) is true 
for the standard interpretation. But this wf says that G is not 
provable in K, contradicting our original assumption. Hence, 
not-⊢K G.
	 ii.	 Assume ⊢K ¬G. Since ⊢K G ⇔ (∀x2) ¬P  f (x2, ⌜G⌝), ⊢K ¬(∀x2) ¬ P  f (x2, ⌜G⌝). 
So, ⊢K (∃x2)P  f (x2, ⌜G⌝). Since K is a true theory, this wf is true for the 
standard interpretation, that is, G is provable in K. This contradicts 
the result of (i). Hence, not-⊢K ¬G.

210
Introduction to Mathematical Logic
Exercises
3.41	 Let G be a Gödel sentence for S. Let Sg be the extension of S obtained 
by adding ¬G as a new axiom. Prove that, if S is consistent, then Sg is 
consistent, but not ω-consistent.
3.42	 A theory K whose language has the individual constant 0 and func-
tion letter f1
1 is said to be ω-incomplete if there is a wf E (x) with one free 
variable x such that ⊢K E n
( ) for every natural number n, but it is not 
the case that ⊢K (∀x)E (x). If K is a consistent theory with equality in the 
language LA and satisfies conditions 1–3 on page 208, show that K is 
ω-incomplete. (In particular, RR and S are ω-incomplete.)
3.43	 Let K be a theory whose language contains the individual constant 0 
and function letter f1
1. Show that, if K is consistent and ω-inconsistent, 
then K is ω-incomplete.
3.44	 Prove that S, as well as any consistent extension of S having a recursive 
axiom set, is not a scapegoat theory. (See page 85.)
3.45	 Show that there is an ω-consistent extension K of S such that K is not a 
true theory. [Hint: Use the fixed point theorem.]
The Gödel–Rosser Incompleteness Theorem
The proof of undecidability of a Gödel sentence G required the assumption 
of ω-consistency. We will now prove a result of Rosser (1936) showing that, at 
the cost of a slight increase in the complexity of the undecidable sentence, the 
assumption of ω-consistency can be replaced by consistency.
As before, let K be a theory with equality in the language LA satisfying 
conditions 1–3 on page 208. In addition, assume:
	
4.	⊢K x
n
x
x
x
n
≤
⇒
=
∨
=
∨… ∨
=
0
1
 for every natural number n.
	
5.	⊢K x
n
n
x
≤
∨
≤ for every natural number n.
Thus, K can be any extension of RR with a recursive axiom set. In particular, 
K can be RR or S.
Recall that, by Proposition 3.26 (14), Neg is a primitive recursive function 
such that, if x is the Gödel number of a wf B, then Neg(x) is the Gödel num-
ber of (¬B). Since all recursive functions are representable in K, let Neg(x1, x2) 
be a wf that represents Neg in K. Now construct the following wf E (x1):
	
∀
(
)
(
) ⇒∀
(
)
(
) ⇒∃
(
)
≤
∧
(
)
(
)
(
)
(
)
x
x
x
x
x x
x
x
x
x
x
2
2
1
3
1
3
4
4
2
4
3
Pf
Neg
Pf
,
,
,
By the fixed-point theorem, there is a closed wf R such that
	
*( )
⇔
(
)
⊢
⌜
⌝
K R
E
R

211
Formal Number Theory
R is called a Rosser sentence for K. Notice what the intuitive meaning of R is 
under the standard interpretation. R asserts that, if R has a proof in K, say 
with Gödel number x2, then ¬R has a proof in K with Gödel number smaller 
than x2. This is a roundabout way for R to claim its own unprovability under 
the assumption of the consistency of K.
Proposition 3.38 (Gödel–Rosser Theorem)
Let K satisfy conditions 1–5. If K is consistent, then R is an undecidable sen-
tence of K.
Proof
Let p be the Gödel number of R. Thus, ⌜R⌝ is p. Let j be the Gödel number 
of ¬R.
	 a.	 Assume ⊢K R. Since ⊢K R ⇒ E(⌜R⌝), biconditional elimination yields 
⊢K E(⌜R⌝), that is
	
⊢K ∀
(
)
(
) ⇒∀
(
)
(
) ⇒∃
(
)
≤
∧
(
)
(
)
(
)
(
)
x
x
p
x
p x
x
x
x
x
x
2
2
3
3
4
4
2
4
3
Pf
Neg
Pf
,
,
,
	
	 Let k be the Gödel number of a proof in K of R. Then Pf(k, p) and, 
therefore, ⊢K Pf
k p
,
(
). Applying rule A4 to E(⌜R⌝), we obtain
	
⊢K Pf
Neg
Pf
k p
x
p x
x
x
k
x
x
,
,
,
(
) ⇒∀
(
)
(
) ⇒∃
(
)
≤
∧
(
)
(
)
(
)
3
3
4
4
4
3
	
	 So, by MP,
	
%
,
,
(
)
∀
(
)
(
) ⇒∃
(
)
≤
∧
(
)
(
)
(
)
⊢K
x
p x
x
x
k
x
x
3
3
4
4
4
3
Neg
Pf
	
	 Since j is the Gödel number of ¬R, we have Neg(p, j), and, 
therefore, ⊢K Neg p j,
(
). Applying rule A4 to (%), we obtain 
⊢K Neg
Pf
p j
x
x
k
x
j
,
,
(
) ⇒∃
(
)
≤
∧
(
)
(
)
4
4
4
. Hence, by MP, ⊢K ∃
(
)
x4
x
k
x
j
4
4
≤
∧
(
)
(
)
Pf
,
, which is an abbreviation for
	
#
,
( )
¬ ∀
(
)¬
≤
∧
(
)
(
)
⊢K
x
x
k
x
j
4
4
4
Pf
	
	 Since ⊢K R, the consistency of K implies not-⊢K ¬R. Hence, Pf(n, j) is 
false for all natural numbers n. Therefore, ⊢K ¬
(
)
Pf
n j,
 for all natural 

212
Introduction to Mathematical Logic
numbers n. Since K is a theory with equality, ⊢K x
n
x
j
4
4
=
⇒¬
(
)
Pf
,
 
for all natural numbers n. By condition 4,
	
( )
≤
⇒
=
∨
=
∨… ∨
=
⊢K x
k
x
x
x
k
4
4
4
4
0
1
	
	 But
	
 
( )
=
⇒¬
(
)
=
…
⊢K
for
x
n
x
j
n
k
4
4
0 1
Pf
,
, ,
,
	
	 So, by a suitable tautology, ( )  and  
( )  yield ⊢K x
k
x
j
4
4
≤
⇒¬
(
)
Pf
,
 
and then, by another tautology, ⊢K ¬
≤
∧
(
)
(
)
x
k
x
j
4
4
Pf
,
. By Gen, 
⊢K ∀
(
)¬
≤
∧
(
)
(
)
x
x
k
x
j
4
4
4
Pf
,
. This, together with (#), contradicts 
the consistency of K.
	
b.	 Assume ⊢K ¬R. Let m be the Gödel number of a proof of ¬R   in K. So, 
Pf(m, j) is true and, therefore, ⊢K Pf
m
j
,
(
). Hence, by an application of rule 
E4 and the deduction theorem, ⊢K m
x
x
x
x
x
j
≤
⇒∃
(
)
≤
∧
(
)
(
)
2
4
4
2
4
Pf
,
. 
By consistency of K, not-⊢K R  and, therefore, Pf(n, p) is false for all 
natural numbers n. Hence, ⊢K ¬
(
)
Pf
n p
,
 for all natural numbers 
n. By condition 4, ⊢K x
m
x
x
x
m
2
2
2
2
0
1
≤
⇒
=
∨
=
∨… ∨
=
. Hence, 
⊢K x
m
x
p
2
2
≤
⇒¬
(
)
Pf
,
. Consider the following derivation.
	
1.	 Pf
x
p
2,
(
) 	
Hyp
	
2.	
Neg p x
,
3
(
) 	
Hyp
	
3.	
x
m
m
x
2
2
≤
∨
≤
	
Condition 5
	
4.
	
m
x
x
x
x
x
j
≤
⇒∃
(
)
≤
∧
(
)
(
)
2
4
4
2
4
Pf
,
	
Proved above
	
5.	 x
m
x
p
2
2
≤
⇒¬
(
)
Pf
,
	
Proved above
	
6.
	
¬
(
)∨∃
(
)
≤
∧
(
)
(
)
Pf
Pf
x
p
x
x
x
x
j
2
4
4
2
4
,
,
	
3–5, tautology
	
7.
	
∃
(
)
≤
∧
(
)
(
)
x
x
x
x
j
4
4
2
4
Pf
,
	
1, 6, disjunction rule
	
8.	
Neg p j,
(
) 	
Proved in part (a)
	
9.	
∃
(
)
(
)
1
3
3
x
p x
Neg
,
	
Neg represents Neg
	
10.	 x
j
3 =
	
2, 8, 9, properties of =
	
11.	
∃
(
)
≤
∧
(
)
(
)
x
x
x
x
x
4
4
2
4
3
Pf
,
	
7, 10, substitutivity of =
	
12.	 Pf
Neg
x
p
p x
x
2
3
4
,
,
,
(
)
(
)
∃
(
)
⊢K
	
1–11
	
	
x
x
x
x
4
2
4
3
≤
∧
(
)
(
)
Pf
,

213
Formal Number Theory
	
13.	 P f
Neg
(
, )
( ,
)
(
)
x
p
p x
x
2
3
4
⊢K
⇒∃
	
1–12, Corollary 2.6
	
	
(
(
,
))
x
x
x
x
4
2
4
3
≤
∧P f
	
14.	 Pf
Neg
x
p
x
p x
2
3
3
,
(
( ,
)
(
)
∀
(
)
⊢K
	
13, Gen
	
	
⇒∃
≤
∧
(
)(
)
(
,
))
x
x
x
x
x
4
4
2
4
3
P f
	
15.	 ⊢K P f
Neg
(
, )
(
)(
( ,
)
x
p
x
p x
2
3
3
⇒∀
	
1–14, Corollary 2.6
	
	
⇒∃
≤
∧
(
)(
(
,
)))
x
x
x
x
x
4
4
2
4
3
P f
	
16.	 ⊢K (
)(
(
, )
(
)(
( ,
)
∀
⇒∀
x
x
p
x
p x
2
2
3
3
Pf
Neg
	
15, Gen
	
	
 ⇒ (∃x4)(x4 ≤ x2 ∧ P F   (x4, x3))))
	
17.	 ⊢K R	
((*), 
16, 
biconditional 
elimination)
	
	
Thus, ⊢K R and ⊢K ¬R, contradicting the consistency of K.
The Gödel and Rosser sentences for the theory S are undecidable sentences 
of S. They have a certain intuitive metamathematical meaning; for exam-
ple, a Gödel sentence G asserts that G is unprovable in S. Until recently, no 
undecidable sentences of S were known that had intrinsic mathematical 
interest. However, in 1977, a mathematically significant sentence of combi-
natorics, related to the so-called finite Ramsey theorem, was shown to be 
undecidable in S (see Kirby and Paris, 1977; Paris and Harrington, 1977; and 
Paris, 1978).
Definition
A theory K is said to be recursively axiomatizable if there is a theory K* having 
the same theorems as K such that K* has a recursive axiom set.
Corollary 3.39
Let K be a theory in the language LA. If K is a consistent, recursively axiomat-
izable extension of RR, then K has an undecidable sentence.
Proof
Let K* be a theory having the same theorems as K and such that K* has a recur-
sive axiom set. Conditions 1–5 of Proposition 3.38 hold for K*. Hence, a Rosser 
sentence for K* is undecidable in K* and, therefore, also undecidable in K.
An effectively decidable set of objects is a set for which there is a mechanical 
procedure that determines, for any given object, whether or not that object 

214
Introduction to Mathematical Logic
belongs to the set. By a mechanical procedure we mean a procedure that is 
carried out automatically without any need for originality or ingenuity in 
its application. On the other hand, a set A of natural numbers is said to be 
recursive if the property x ∈ A is recursive.* The reader should be convinced 
after Chapter 5 that the precise notion of recursive set corresponds to the intuitive 
idea of an effectively decidable set of natural numbers. This hypothesis is known 
as Church’s thesis.
Remember that a theory is said to be axiomatic if the set of its axioms 
is effectively decidable. Clearly, the set of axioms is effectively decidable 
if and only if the set of Gödel numbers of axioms is effectively decidable 
(since we can pass effectively from a wf to its Gödel number and, con-
versely, from the Gödel number to the wf). Hence, if we accept Church’s 
thesis, to say that K has a recursive axiom set is equivalent to saying that K 
is an axiomatic theory, and, therefore, Corollary 3.39 shows RR is essentially 
incomplete, that is, that every consistent axiomatic extension of RR has an 
undecidable sentence. This result is very disturbing; it tells us that there 
is no complete axiomatization of arithmetic, that is, there is no way to set 
up an axiom system on the basis of which we can decide all problems of 
number theory.
Exercises
3.46	 Church’s thesis is usually taken in the form that a number-theoretic func-
tion is effectively computable if and only if it is recursive. Prove that this is 
equivalent to the form of Church’s thesis given above.
3.47	 Let K be a true theory that satisfies the hypotheses of the Gödel–Rosser 
theorem. Determine whether a Rosser sentence R for K is true for the 
standard interpretation.
3.48	 (Church, 1936b) Let Tr be the set of Gödel numbers of all wfs in the lan-
guage LA that are true for the standard interpretation. Prove that Tr is 
not recursive. (Hence, under the assumption of Church’s thesis, there is 
no effective procedure for determining the truth or falsity of arbitrary 
sentences of arithmetic.)
3.49	 Prove that there is no recursively axiomatizable theory that has Tr as 
the set of Gödel numbers of its theorems.
3.50	 Let K be a theory with equality in the language LA that satisfies condi-
tions 4 and 5 on page 210. If every recursive relation is expressible in K, 
prove that every recursive function is representable in K.
*	 To say that x ∈ A is recursive means that the characteristic function CA is a recursive function, 
where CA(x) = 0 if x ∈ A and CA(x) = 1 if x ∉ A (see page 180).

215
Formal Number Theory
Gödel’s Second Theorem
Let K be an extension of S in the language LA such that K has a recursive 
axiom set. Let Con K be the following closed wf of K:
	
∀
(
) ∀
(
) ∀
(
) ∀
(
)¬
(
) ∧
(
) ∧
(
)
(
)
x
x
x
x
x x
x
x
x
x
1
2
3
4
1
3
2
4
3
4
Pf
Pf
Neg
,
,
,
For the standard interpretation, Con K asserts that there are no proofs in K of a 
wf and its negation, that is, that K is consistent.
Consider the following sentence:
	
G
( )
⇒
Con
G
K
where G is a Gödel sentence for K. Remember that G asserts that G is unprov-
able in K. Hence, (G) states that, if K is consistent, then G is not provable in 
K. But that is just the first half of Gödel’s incompleteness theorem. The meta-
mathematical reasoning used in the proof of that theorem can be expressed 
and carried through within K itself, so that one obtains a proof in K of (G) 
(see Hilbert and Bernays, 1939, pp. 285–328; Feferman, 1960). Thus, ⊢K Con K ⇒ G. 
But, by Gödel’s incompleteness theorem, if K is consistent, G is not provable 
in K. Hence, if K is consistent, Con K is not provable in K.
This is Gödel’s second theorem (1931). One can paraphrase it by stating that, 
if K is consistent, then the consistency of K cannot be proved within K, or, 
equivalently, a consistency proof of K must use ideas and methods that go 
beyond those available in K. Consistency proofs for S have been given by 
Gentzen (1936, 1938) and Schütte (1951), and these proofs do, in fact, employ 
notions and methods (for example, a portion of the theory of denumerable 
ordinal numbers) that apparently are not formalizable in S.
Gödel’s second theorem is sometimes stated in the form that, if a “sufficiently 
strong” theory K is consistent, then the consistency of K cannot be proved 
within K. Aside from the vagueness of the “sufficiently strong” (which can be 
made precise without much difficulty), the way in which the consistency of 
K is formulated is crucial. Feferman (1960, Cor. 5.10) has shown that there is a 
way of formalizing the consistency of S—say, Con S*—such that ⊢S Con S*. A pre-
cise formulation of Gödel’s second theorem may be found in Feferman (1960). 
(See Jeroslow 1971, 1972, 1973) for further clarification and development.)
In their proof of Gödel’s second theorem, Hilbert and Bernays (1939) based 
their work on three so-called derivability conditions. For the sake of definite-
ness, we shall limit ourselves to the theory S, although everything we say also 
holds for recursively axiomatizable extensions of S. To formulate the Hilbert–
Bernays results, let Bew(x1) stand for (∃x2)P   f (x2, x1). Thus, under the standard 
interpretation, Bew(x1) means that there is a proof in S of the wf with Gödel 
number x1; that is, the wf with Gödel number x1 is provable in S.* Notice that a 
Gödel sentence G for S satisfies the fixed-point condition: ⊢S G ⇔ ¬Bew(⌜G⌝).
*	 Bew” consists of the first three letters of the German word beweisbar, which means “provable.”

216
Introduction to Mathematical Logic
The Hilbert–Bernays Derivability Conditions*
	
HB
If
then
S
S
1
(
)
(
)
⊢
⊢
⌜⌝
C
Bew
C
,
	
HB
S
2
(
)
⇒
(
) ⇒
(
) ⇒
(
)
(
)
⊢
⌜
⌝
⌜⌝
⌜⌝
Bew
C
D
Bew
C
Bew
D
	
HB
S
3
(
)
(
) ⇒
(
)
(
)
⊢
⌜⌝
⌜
⌜⌝⌝
Bew
C
Bew
Bew
C
Here, C and D are arbitrary closed wfs of S. (HB1) is straightforward and 
(HB2) is an easy consequence of properties of P  f. However, (HB3) requires 
a careful and difficult proof. (A clear treatment may also be found in Boolos 
(1993, Chapter 2), and in Shoenfield (1967, pp. 211–213).)
A Gödel sentence G for S asserts its own unprovability in S: ⊢S G ⇔ ¬Bew(⌜G⌝). 
We also can apply the fixed-point theorem to obtain a sentence H  such that 
⊢S H ⇔ Bew(⌜H⌝). H is called a Henkin sentence for S. H   asserts its own provability 
in S. On intuitive grounds, it is not clear whether H  is true for the standard 
interpretation, nor is it easy to determine whether H   is provable, disprovable 
or undecidable in S. The problem was solved by Löb (1955) on the basis of 
Proposition 3.40 below. First, however, let us introduce the following conve-
nient abbreviation.
Notation
Let □C stand for Bew(⌜C⌝), where C  is any wf. Then the Hilbert–Bernays deriv-
ability conditions become
	
HB
If
then
S
S
1
(
)
⊢
⊢
C
C
,

	
HB
S
2
(
)
⇒
(
) ⇒
⇒
(
)
⊢


C
D
C
D
	
HB
S
3
(
)
⇒
⊢

C
C
The Gödel sentence G and the Henkin sentence H satisfy the equivalences 
⊢S G ⇔ ¬ □ G and ⊢S H ⇔ □ H.
Proposition 3.40 (Löb’s Theorem)
Let C be a sentence of S. If ⊢S □ C ⇒ C, then ⊢S C.
*	 These three conditions are simplifications by Löb (1955) of the original Hilbert–Bernays 
conditions.

217
Formal Number Theory
Proof
Apply the fixed-point theorem to the wf Bew(x1) ⇒ C to obtain a sentence L 
such that ⊢S L ⇔ (Bew(⌜L⌝) ⇒ C). Thus, ⊢S L ⇔ (□L ⇒ C). Then we have the fol-
lowing derivation of C.
	 1.	 ⊢S L ⇔ (□L ⇒ C )	
Obtained above
	 2.	 ⊢S L ⇒ (□L ⇒ C )	
1, biconditional
	
	 	
elimination
	 3.	 ⊢S □ (L ⇒ (□L ⇒ C ))	
2, (HB1)
	 4.	 ⊢S □L ⇒ □ (□L ⇒ C )	
3, (HB2), MP
	 5.	 ⊢S □ (□L ⇒ C) ⇒ (□□L ⇒ □ C )	
(HB2)
	 6.	 ⊢S □L ⇒ (□□L ⇒ □ C )	
4, 5 tautology
	
7.	 ⊢S □L ⇒ □□L	
(HB3)
	 8.	 ⊢S □L ⇒ □ C	
6, 7, tautology
	 9.	 ⊢S □ C ⇒ C	
Hypothesis of the theorem
	 10.	 ⊢S □L ⇒ C	
8, 9, tautology
	 11.	 ⊢S L	
1, 10, biconditional
	
	 	
elimination
	 12.	 ⊢S □L	
11, (HB1)
	 13.	 ⊢S C	
10, 12, MP
Corollary 3.41
Let H  be a Henkin sentence for S. Then ⊢S H  and H  is true for the standard 
interpretation.
Proof
⊢S H ⇔ □ H. By biconditional elimination, ⊢S □ H ⇒ H. So, by Löb’s theorem, 
⊢S H. Since H asserts that H  is provable in S, H  is true
Löb’s theorem also enables us to give a proof of Gödel’s second theorem 
for S.
Proposition 3.42 (Gödel’s Second Theorem)
If S is consistent, then not-⊢S ConS.
Proof
Assume S consistent. Since ⊢S 0
1
≠, the consistency of S implies not-⊢S 0
1
= . By 
Löb’s theorem, not-⊢S 0
1
0
1
=
(
) ⇒
= . Hence, by the tautology ¬A ⇒ (A ⇒ B), 
we have:
	
*( )
¬
=
(
)
not- S⊢
 0
1

218
Introduction to Mathematical Logic
But, since ⊢S 0
1
≠
, (HB1) yields ⊢S 0
1
≠
(
). Then it is easy to show that 
⊢S
S
Con ⇒¬
=
(
)
 0
1 . So, by (*), not-⊢S
S
Con .
Boolos (1993) gives an elegant and extensive study of the fixed-point theo-
rem and Löb’s theorem in the context of an axiomatic treatment of provabil-
ity predicates. Such an axiomatic approach was first proposed and developed 
by Magari (1975).
Exercises
3.51	 Prove (HB1) and (HB2).
3.52	 Give the details of the proof of ⊢
⌜
⌝
S
S
Con
Bew
⇒¬
=
(
)
0
1
, which was used 
in the proof of Proposition 3.42.
3.53	 If G is a Gödel sentence of S, prove ⊢
⌜
⌝
S G
Bew
⇔¬
=
(
)
0
1
. (Hence, any 
two Gödel sentences for S are provably equivalent. This is an instance 
of a more general phenomenon of equivalence of fixed-point sentences, 
first noticed and verified independently by Bernardi (1975, 1976), 
De Jongh and Sambin (1976). See Smoryński (1979, 1982).
3.54	 In each of the following cases, apply the fixed-point theorem for S 
to obtain a sentence of the indicated kind; determine whether that 
sentence is provable in S, disprovable in S, or undecidable in S; 
and determine the truth or falsity of the sentence for the standard 
interpretation.
	
a.	 A sentence C that asserts its own decidability in S (that is, that ⊢S C 
or ⊢S ¬C).
	
b.	 A sentence that asserts its own undecidability in S.
	
c.	 A sentence C asserting that not-⊢S ¬C.
	
d.	 A sentence C asserting that ⊢S ¬C.
3.6  Recursive Undecidability: Church’s Theorem
If K is a theory, let TK be the set of Gödel numbers of theorems of K.
Definitions
K is said to be recursively decidable if TK is a recursive set (that is, the property 
x ∈ TK is recursive). K is said to be recursively undecidable if TK is not recursive. 

219
Formal Number Theory
K is said to be essentially recursively undecidable if K and all consistent exten-
sions of K are recursively undecidable.
If we accept Church’s thesis, then recursive undecidability is equivalent to 
effective undecidability, that is, nonexistence of a mechanical decision pro-
cedure for theoremhood. The nonexistence of such a mechanical procedure 
means that ingenuity is required for determining whether arbitrary wfs are 
theorems.
Exercise
3.55	 Prove that an inconsistent theory having a recursive vocabulary is 
recursively decidable.
Proposition 3.43
Let K be a consistent theory with equality in the language LA in which 
the diagonal function D is representable. Then the property x ∈ TK is not 
expressible in K.
Proof
Assume x ∈ TK is expressible in K by a wf T  (x1). Thus
	
a.	If n
T
n
∈
( )
K
K
,⊢T
.
	
b.	If n
T
n
∉
K
K
,⊢¬
( )
T
.
	
	 By the diagonalization lemma applied to ¬T  (x1), there is a sentence C 
such that ⊢K C ⇔ ¬T  (⌜C⌝). Let q be the Gödel number of C. So
	
c.	⊢K C
T
⇔¬
( )
q .
Case 1: ⊢K C. Then q ∈ TK. By (a), ⊢K T
q( ). But, from ⊢K C and (c), by bicon-
ditional elimination, ⊢K ¬
( )
T
q . Hence K is inconsistent, contradicting our 
hypothesis.
Case 2: not-⊢K C. So, q ∉ TK. By (b), ⊢K ¬
( )
T
q . Hence, by (c) and biconditional 
elimination, ⊢K C.
Thus, in either case a contradiction is reached.
Definition
A set B of natural numbers is said to be arithmetical if there is a wf B (x) in the 
language LA, with one free variable x, such that, for every natural number n, 
n ∈ B if and only if B n
( ) is true for the standard interpretation.

220
Introduction to Mathematical Logic
Corollary 3.44 [Tarski’s Theorem (1936)]
Let Tr be the set of Gödel numbers of wfs of S that are true for the standard 
interpretation. Then Tr is not arithmetical.
Proof
Let N  be the extension of S that has as proper axioms all those wfs that 
are true for the standard interpretation. Since every theorem of N  must be 
true for the standard interpretation, the theorems of N  are identical with 
the axioms of N.  Hence, TN = Tr. Thus, for any closed wf B, B  holds for the 
standard interpretation if and only if ⊢N B. It follows that a set B is arithmeti-
cal if and only if the property x ∈ B is expressible in N.  We may assume that 
N  is consistent because it has the standard interpretation as a model. Since 
every recursive function is representable in S, every recursive function is 
representable in N   and, therefore, D is representable in N.  By Proposition 
3.43, x ∈ Tr is not expressible in N.  Hence, Tr is not arithmetical. (This result 
can be roughly paraphrased by saying that the notion of arithmetical truth is 
not arithmetically definable.)
Proposition 3.45
Let K be a consistent theory with equality in the language LA in which all 
recursive functions are representable. Assume also that ⊢K 0
1
≠. Then K is 
recursively undecidable.
Proof
D is primitive recursive and, therefore, representable in K. By Proposition 
3.43, the property x ∈ TK is not expressible in K. By Proposition 3.13, the char-
acteristic function CTK is not representable in K. Hence, CTK is not a recursive 
function. Therefore, TK is not a recursive set and so, by definition, K is recur-
sively undecidable.
Corollary 3.46
RR is essentially recursively undecidable.
Proof
RR and all consistent extensions of RR satisfy the conditions on K in 
Proposition 3.45 and, therefore, are recursively undecidable. (We take for 
granted that RR is consistent because it has the standard interpretation as 

221
Formal Number Theory
a model. More constructive consistency proofs can be given along the same 
lines as the proofs by Beth (1959, § 84) or Kleene (1952, § 79).)
We shall now show how this result can be used to give another derivation 
of the Gödel-Rosser theorem.
Proposition 3.47
Let K be a theory with a recursive vocabulary. If K is recursively axiomatiz-
able and recursively undecidable, then K is incomplete (i.e., K has an unde-
cidable sentence).
Proof
By the recursive axiomatizability of K, there is a theory J with a recursive 
axiom set that has the same theorems as K. Since K and J have the same theo-
rems, TK = TJ and, therefore, J is recursively undecidable, and K is incomplete 
if and only if J is incomplete. So, it suffices to prove J incomplete. Notice that, 
since K and J have the same theorems, J and K must have the same individual 
constants, function letters, and predicate letters (because all such symbols 
occur in logical axioms). Thus, the hypotheses of Propositions 3.26 and 3.28 
hold for J. Moreover, J is consistent, since an inconsistent theory with a recur-
sive vocabulary is recursively decidable.
Assume J is complete. Remember that, if x is the Gödel number of a wf, 
Clos(x) is the Gödel number of the closure of that wf. By Proposition 3.26 (16), 
Clos is a recursive function. Define:
	
H
Fml
Pf
Clos
Pf
Neg Clos
Fml
( )
[(
( )
(
( ,
( ))
( ,
(
( )))))
(
x
y
x
y
x
y
x
x
=
∧
∨
∨¬
µ
)]
Notice that, if x is not the Gödel number of a wf, H(x) = 0. If x is the Gödel 
number of a wf B, the closure of B   is a closed wf and, by the completeness of 
J, there is a proof in J of either the closure of B or its negation. Hence, H(x) is 
obtained by a legitimate application of the restricted μ-operator and, therefore, 
H is a recursive function. Recall that a wf is provable if and only if its closure 
is provable. So, x ∈ TJ if and only if Pf(H(x), Clos(x)). But Pf(H(x), Clos(x)) is 
recursive. Thus, TJ is recursive, contradicting the recursive undecidability of J.
The intuitive idea behind this proof is the following. Given any wf B, we 
form its closure C  and start listing all the theorems in J. (Since PrAx is recur-
sive, Church’s Thesis tells us that J is an axiomatic theory and, therefore, by 
the argument on page 84, we have an effective procedure for generating all 
the theorems.) If J is complete, either C  or ¬C  will eventually appear in the 
list of theorems. If C  appears, B is a theorem. If ¬C  appears, then, by the con-
sistency of J, C  will not appear among the theorems and, therefore, B  is not 
a theorem. Thus, we have a decision procedure for theoremhood and, again 
by Church’s thesis, J would be recursively decidable.

222
Introduction to Mathematical Logic
Corollary 3.48 (Gödel–Rosser Theorem)
Any consistent recursively axiomatizable extension of RR has undecidable 
sentences.
Proof
This is an immediate consequence of Corollary 3.46 and Proposition 3.47.
Exercises
3.56	 Prove that a recursively decidable theory must be recursively axiomatizable.
3.57	 Let K be any recursively axiomatizable true theory with equality. 
(So, TK  ⊆ Tr.) Prove that K has an undecidable sentence. [Hint: Use 
Proposition 3.47 and Exercise 3.48.]
3.58	 Two sets A and B of natural numbers are said to be recursively inseparable 
if there is no recursive set C such that A ⊆ C and B
C
⊆
. (C is the com-
plement ω −C.) Let K be any consistent theory with equality in the lan-
guage LA in which all recursive functions are representable and such that 
⊢K 0
1
≠
. Let RefK be the set of Gödel numbers of refutable wfs of K, that 
is, {x|Neg(x) ∈ TK}. Prove that TK and RefK are recursively inseparable.
Definitions
Let K1 and K2 be two theories in the same language.
	
a.	K2 is called a finite extension of K1 if and only if there is a set A of wfs 
and a finite set B of wfs such that (1) the theorems of K1 are precisely 
the wfs derivable from A; and (2) the theorems of K2 are precisely the 
wfs derivable from A ∪ B.
	
b.	Let K1 ∪ K2 denote the theory whose set of axioms is the union of the 
set of axioms of K1 and the set of axioms of K2. We say that K1 and K2 
are compatible if K1 ∪ K2 is consistent.
Proposition 3.49
Let K1 and K2 be two theories in the same language. If K2 is a finite extension 
of K1 and if K2 is recursively undecidable, then K1 is recursively undecidable.
Proof
Let A be a set of axioms of K1 and A ∪ {B1, …, Bn} a set of axioms for K2. We 
may assume that B1, …, Bn are closed wfs. Then, by Corollary 2.7, it is easy to 

223
Formal Number Theory
see that a wf C  is provable in K2 if and only if (B1 ∧ … ∧ Bn) ⇒ C   is provable 
in K1. Let c be a Gödel number of (B1 ∧ … ∧ Bn). Then b is a Gödel number of 
a theorem of K2 when and only when 23 * c * 211 * b * 25 is a Gödel number of a 
theorem of K1; that is, b is in TK2 if and only if 23 * c * 211 * b * 25 is in TK1. Hence, 
if TK1 were recursive, TK2 would also be recursive, contradicting the recursive 
undecidability of K2.
Proposition 3.50
Let K be a theory in the language LA. If K is compatible with RR, then K is 
recursively undecidable.
Proof
Since K is comptatible with RR, the theory K ∪ RR is a consistent extension 
of RR. Therefore, by Corollary 3.46, K ∪ RR is recursively undecidable. Since 
RR has a finite number of axioms, K ∪ RR is a finite extension of K. Hence, by 
Proposition 3.49, K is recursively undecidable.
Corollary 3.51
Every true theory K is recursively undecidable.
Proof
K ∪ RR has the standard interpretation as a model and is, therefore, consis-
tent. Thus, K is compatible with RR. Now apply Proposition 3.50.
Corollary 3.52
Let PS be the predicate calculus in the language LA. Then PS is recursively 
undecidable.
Proof
PS ∪ RR = RR. Hence, PS is compatible with RR and, therefore, by Proposition 
3.50, recursively undecidable.
By PF we mean the full first-order predicate calculus containing all predi-
cate letters, function letters and individual constants. Let PP be the pure 
first-order predicate calculus, containing all predicate letters but no function 
letters or individual constants.

224
Introduction to Mathematical Logic
Lemma 3.53
There is a recursive function h such that, for any wf B of PF having Gödel 
number u, there is a wf B ′ of PP having Gödel number h(u) such that B is 
provable in PF if and only if B ′ is provable in PP.
Proof
Let Φ be a wf of PF. First we will eliminate any individual constants from Φ. 
Assume b is an individual constant in Φ. Let Am
1 be the first new symbol of 
that form. Intuitively we imagine that Am
1 represents a property that holds 
only for b. Let Φ*(z) be obtained from Φ by replacing all occurrences of b by z. 
We will associate with Φ a new wf Ψ, where Ψ has the form
	 ((
)
( ))
(
)(
)
( )
( )
(
)
( )
∃
∧∀
∀
=
⇒
⇔


(
)
{
} ⇒∀
1
1
1
1
1
z A
z
x
y
x
y
A
x
A
y
z
A
z
m
m
m
m
⇒
∗


Φ ( )z
Then Ψ is logically valid if and only if Φ is logically valid. We apply the 
same procedure to Ψ and so on until we obtain a wf Φ$ that contains no 
individual constants and is logically valid if and only if Φ is logically 
valid. Now we apply to Φ$ a similar, but somewhat more complicated, pro-
cedure to obtain a wf Θ that contains no function letters and is logically 
valid if and only if Φ is logically valid. Consider the first function letter fj
n 
in Φ$. Take the first new symbol Ar
n+1 of that form. Intuitively we imagine 
that Ar
n+1 holds for (x1, …, xn+1) if and only if f
x
x
x
j
n
n
n
(
,
,
)
.
1
1
…
=
+  We wish 
to construct a wf that plays a role similar to the role played by Ψ above. 
However, the situation is more complex here because there may be iterated 
applications of fj
n in Φ$. We shall take a relatively easy case where fj
n has 
only simple (noniterated) occurrences, say, f
s
s
j
n
n
( ,
,
)
1 …
 and f
t
t
j
n
n
( ,
,
).
1 …
 
Let Φ$* be obtained from Φ$ by replacing the occurrences of f
s
s
j
n
n
( ,
,
)
1 …
 
by v and the occurrences of f
t
t
j
n
n
( ,
,
)
1 …
 by w. In the wf Θ analogous to 
Ψ, use as conjuncts in the antecedent (
)
(
)(
)
(
,
,
, )
∀
… ∀
∃
…
+
x
x
z A
x
x
z
n
r
n
n
1
1
1
1
 
and the n + 1 equality substitution axioms for Ar
n+1, and, as the consequent 
(
)(
)(
(
,
,
, )
( ,
,
,
)
)
$
∀
∀
…
∧
…
⇒
+
+
v
w A
S
S
v
A
t
t
w
r
n
n
r
n
n
1
1
1
1
Φ * . We leave it to the 
reader to construct Θ when there are nonsimple occurrences of fj
n. If u is 
the Gödel number of the original wf Φ, let h(u) be the Gödel number of the 
result Θ. When u is not the Gödel number of a wf of PF, define h(u) to be 0. 
Clearly, h is effectively computable because we have described an effective 
procedure for obtaining Θ from Φ. Therefore, by Church’s thesis, h is 
recursive. Alternatively, an extremely diligent reader could avoid the use 
of Church’s thesis by “arithmetizing” all the steps described above in the 
computation of h.

225
Formal Number Theory
Proposition 3.54 (Church’s Theorem (1936a))
PF and PP are recursively undecidable.
Proof
	 a.	 By Gödel’s completeness theorem, a wf B of PS is provable in PS if 
and only if B is logically valid, and B is provable in PF if and only 
if B is logically valid. Hence, ⊢PS B  if and only if ⊢PF B. However, 
the set FmlPS of Gödel numbers of wfs of PS is recursive. Then 
T
T
P
PF
P
S
S
Fml
=
∩
, where TPS and TPF are, respectively, the sets of 
Gödel numbers of the theorems of PS and PF. If TPF were recursive, 
TPS would be recursive, contradicting Corollary 3.52. Therefore, PF is 
recursively undecidable.
	 b.	 By Lemma 3.53, u is in TPF if and only if h(u) is in TPP. Since h is recur-
sive, the recursiveness of TPP would imply the recursiveness of TPF, 
contradicting (a). Thus, TPP is not recursive; that is, PP is recursively 
undecidable.
If we accept Church’s thesis, then “recursively undecidable” can be replaced 
everywhere by “effectively undecidable.” In particular, Proposition 3.54 
states that there is no decision procedure for recognizing theoremhood, 
either for the pure predicate calculus PP or the full predicate calculus PF. By 
Gödel’s completeness theorem, this implies that there is no effective method for 
determining whether any given wf is logically valid.
Exercises
3.59D	 a.	 By a wf of the pure monadic predicate calculus (PMP) we mean 
a wf of the pure predicate calculus that does not contain predi-
cate letters of more than one argument. Show that, in contrast to 
Church’s theorem, there is an effective procedure for determining 
whether a wf of PMP is logically valid. [Hint: Let B1, B2, …, Bk be the 
distinct predicate letters in a wf B. Then B is logically valid if and 
only if B is true for every interpretation with at most 2k elements. 
(In fact, assume B is true for every interpretation with at most 2k 
elements, and let M be any interpretation. For any elements b and c 
of the domain D of M, call b and c equivalent if the truth values of 
B1(b), B2(b), …, Bk(b) in M are, respectively, the same as those of B1(c), 
B2(c), …, Bk(c). This defines an equivalence relation in D, and the 
corresponding set of equivalence classes has at most 2k members 
and can be made the domain of an interpretation M* by defining 
interpretations of B1, …, Bk, in the obvious way, on the equivalence 
classes. By induction on the length of wfs C that contain no predicate 

226
Introduction to Mathematical Logic
letters other than B1, …, Bk, one can show that C is true for M if and 
only if it is true for M*. Since B is true for M*, it is also true for M. 
Hence, B is true for every interpretation.) Note also that whether B 
is true for every ­interpretation that has at most 2k elements can be 
effectively determined.]*
	
b.	 Prove that a wf B of PMP is logically valid if and only if B is true for 
all finite interpretations. (This contrasts with the situation in the 
pure predicate calculus; see Exercise 2.56 on page 92.)
3.60	 If a theory K* is consistent, if every theorem of an essentially recursively 
undecidable theory K1 is a theorem of K*, and if the property FmlK1( )
y  
is recursive, prove that K* is essentially recursively undecidable.
3.61	 (Tarski et al., 1953, I)
	
a.	 Let K be a theory with equality. If a predicate letter Aj
n, a function 
letter fj
n and an individual constant aj are not symbols of K, then 
by possible definitions of A
f
j
n
j
n
,
, and aj in K we mean, respectively, 
expressions of the form
	
	
i.
	
∀
(
) … ∀
(
)
…
(
) ⇔
…
(
)
(
)
x
x
A
x
x
x
x
n
j
n
n
n
1
1
1
,
,
,
,
B
	
	
ii.
	
∀
(
) … ∀
(
) ∀
(
)
…
(
) =
⇔
…
(
)
(
)
x
x
y
f
x
x
y
x
x
y
n
j
n
n
n
1
1
1
,
,
,
,
,
C
	
	
iii.	 (∀y)(aj = y ⇔ D(y))
	
	
	
where B, C, and D are wfs of K; moreover, in case (ii), 
we must also have ⊢K(∀x1) … (∀xn)(∃1y)C (x1, …, xn, y), 
and, in case (iii), ⊢K(∃1y)D(y). Moreover, add to (ii) the 
requirement of n new equality axioms of the form 
y
z
f
x
x
y x
x
f
x
x
z x
x
j
n
i
i
n
j
n
i
i
n
=
⇒
…
…
=
…
…
−
+
−
+
(
,
, ,
,
,
)
(
,
,
, ,
,
,
).
1
1
1
1
1
1
 
If K is consistent, prove that addition of any possible defini-
tions to K as new axioms (using only one possible definition 
for each symbol and assuming that the set of new logical con-
stants and the set of possible definitions are recursive) yields 
a consistent theory K′, and K′ is recursively undecidable if and 
only if K is.
	
b.	 By a nonlogical constant we mean a predicate letter, function let-
ter or individual constant. Let K1 be a theory with equality that 
has a finite number of nonlogical constants. Then K1 is said to be 
interpretable in a theory with equality K if we can associate with 
*	 The result in this exercise is, in a sense, the best possible. By a theorem of Kalmár (1936), there 
is an effective procedure producing for each wf B of the pure predicate calculus another wf 
B2 of the pure predicate calculus such that B2 contains only one predicate letter, a binary one, 
and such that B is logically valid if and only if B2 is logically valid. (For another proof, see 
Church, 1956, § 47.) Hence, by Church’s theorem, there is no decision procedure for logical 
validity of wfs that contain only binary predicate letters. (For another proof, see Exercise 4.68 
on page 277.)

227
Formal Number Theory
each nonlogical constant of K1 that is not a nonlogical constant of 
K a possible definition in K such that, if K* is the theory obtained 
from K by adding these possible definitions as axioms, then every 
axiom (and hence every theorem) of K1 is a theorem of K*. Notice 
that, if K1 is interpretable in K, it is interpretable in every extension 
of K. Prove that, if K1 is interpretable in K and K is consistent, and 
if K1 is essentially recursively undecidable, then K is essentially 
recursively undecidable.
3.62	 Let K be a theory with equality and Aj
1 a monadic predicate let-
ter not in K. Given a closed wf C, let C
Aj
1
(
) (called the relativization of 
C with respect to Aj
1) be the wf obtained from C by replacing every 
subformula (starting from the smallest subformulas) of the form 
(∀x)B (x) by ∀
(
)
( ) ⇒
( )
(
)
x
A
x
x
j
1
B
. Let the proper axioms of a new 
theory with equality K
Aj
1
 be: (i) all wfs C
Aj
1
(
), where C is the clo-
sure of any proper axiom of K; (ii) (
)
( )
∃x A x
j
1
; (iii) A a
j
m
1(
) for each 
individual constant am of K; (iv) x
x
A x
A x
j
j
1
2
1
1
1
2
=
⇒
⇒
(
(
)
(
)); and 
(v)  A x
A x
A
f
x
x
j
j
n
j
k
n
n
1
1
1
1
1
(
)
(
)
(
(
,
,
))
∧… ∧
⇒
…
 for any function letter fk
n 
of K. Prove the following.
	
a.	 As proper axioms of K
Aj
1
 we could have taken all wfs C
Aj
1
(
), where C 
is the closure of any theorem of K.
	
b.	 K
Aj
1
 is interpretable in K.
	
c.	 K
Aj
1
 is consistent if and only if K is consistent.
	
d.	 K
Aj
1
 is essentially recursively undecidable if and only if K is (Tarski 
et al., 1953, pp. 27–28).
3.63	 K is said to be relatively interpretable in K′ if there is some predicate 
letter Aj
1 not in K such that K
Aj
1
 is interpretable in K′. If K is relatively 
interpretable in a consistent theory with equality K′ and K is essen-
tially recursively undecidable, prove that K′ is essentially recursively 
undecidable.
3.64	 Call a theory K in which RR is relatively interpretable sufficiently 
strong. Prove that any sufficiently strong consistent theory K is essen-
tially recursively undecidable, and, if K is also recursively axiomatiz-
able, prove that K is incomplete. Roughly speaking, we may say that 
K is sufficiently strong if the notions of natural number, 0, 1, addi-
tion and multiplication are “definable” in K in such a way that the 
axioms of RR (relativized to the “natural numbers” of K) are prov-
able in K. Clearly, any theory adequate for present-day mathematics 
will be sufficiently strong and so, if it is consistent, then it will be 
recursively undecidable and, if it is recursively axiomatizable, then it 
will be incomplete. If we accept Church’s thesis, this implies that any 

228
Introduction to Mathematical Logic
consistent sufficiently strong theory will be effectively undecidable 
and, if it is axiomatic, it will have undecidable sentences. (Similar 
results also hold for higher-order theories; for example, see Gödel, 
1931.) This destroys all hope for a consistent and complete axiomatization of 
mathematics.
3.7  Nonstandard Models
Recall from Section 3.1 that the standard model is the interpretation of the lan-
guage £A of arithmetic in which:
	 a.	 The domain is the set of nonnegative integers
	 b.	 The integer 0 is the interpretation of the symbol 0
	
c.	 The successor operation (addition of 1) is the interpretation of the 
function ′ (that is, of f1
1)
	 d.	 Ordinary addition and multiplication are the interpretations of + 
and ·
	 e.	 The predicate letter = is interpreted by the identity relation
By a nonstandard model of arithmetic we shall mean any normal interpretation 
M of £A that is not isomorphic to the standard model and in which all formu-
las are true that are true in the standard model (that is, M and the standard 
model are elementarily equivalent). Also of interest are nonstandard models of 
S, that is, normal models of S that are not isomorphic to the standard model, 
and much of what we prove about nonstandard models of arithmetic also 
holds for nonstandard models of S. (Of course, all nonstandard models of 
arithmetic would be nonstandard models of S, since all axioms of S are true 
in the standard model.)
There exist denumerable nonstandard models of arithmetic. Proof: 
Remember (page 221) that N   is the theory whose axioms are all wfs true 
for the standard interpretation. Add a constant c to the language of arith-
metic and consider the theory K obtained from N   by adding the axioms 
c
n
≠
 for all numerals n. K is consistent, since any finite set of axioms of 
K has as a model the standard model with a suitable interpretation of  c. 
(If c
n c
n
c
nr
≠
≠
…
≠
1
2
,
,
,
 are the new axioms in the finite set, choose the inter-
pretation of c to be a natural number not in {n1, …, nr}.) By Proposition 2.26, 
K has a finite or denumerable normal model M. M is not finite, since the 
interpretations of the numerals will be distinct. M will be a nonstandard 
model of arithmetic. (If M were isomorphic to the standard model, the inter-
pretation cM of c would correspond under the isomorphism to some natural 
number m and the axiom c
m
≠
 would be false.)

229
Formal Number Theory
Let us see what a nonstandard model of arithmetic M must look like. 
Remember that all wfs true in the standard model are also true in M. So, for 
every x in M, there is no element between x and its successor x′ = x + 1. Thus, 
if z is the interpretation of 0, then z, z′, z″, z′″, …, form an initial segment z < 
z′ < z″ < z′″ <…, of M that is isomorphic to the standard model. Let us call 
these elements the standard elements of M. The other elements of M will be 
greater than the standard elements and will be called nonstandard elements 
of M. Since every nonzero element w of M has an “immediate predecessor” u 
such that w = u′ and u will have an immediate predecessor t, and so on, every 
nonstandard element w will belong to a block Bw={…, t, u, w, w′, w″, …} con-
sisting of nonstandard elements. Bw is isomorphic to a copy of the ordinary 
integers, where w, w′, w″, …, correspond to 0, 1, 2, …, and …, t, u correspond 
to …, −2, −1. More precisely, we can define a binary relation R on the set of 
nonstandard elements by specifying that x R y if and only if there is a stan-
dard element s such that x + s = y or y + s = x. R is an equivalence relation and 
the resulting equivalence classes are the blocks. The blocks inherit an order 
relation from M. If one element of a block B1 is less than an element of a block 
B2, then every element of B1 is less than every element of B2; in that case, we 
specify that B1 < B2. The resulting ordering of the blocks is obviously a total 
order and it is dense and without first or last member. (See Exercise 2.67.) To 
see that there is no last member, note that, if w belongs to a block B, then 2w 
belongs to a larger block. To see that there is no first member, note that, if w 
belongs to a block B, then there exists a non-standard element x such that 
either w = 2x or w = 2x + 1, and, therefore, the block of x is smaller than B. To 
show that the ordering is dense, assume that x belongs to a block B1 and that 
y belongs to a larger block B2. We may assume that x and y are even. (If x is 
not even, we could consider x + 1, and similarly for y.) Then there is a non-
standard element z such that 2z = x + y. We leave it as an exercise to check that 
x < z and z < y and that the block of z is strictly between B1 and B2.
Exercise 3.65
Show that, if < and <2 are dense total orders without first and last element 
and their domains D1 and D2 are denumerable, then there is a “similarity 
mapping” f from D1 onto D2 (that is, for any x and y in D1, x <1 y if and only 
if f(x) <2 f(y)). (Hint: Start with enumerations <a1, a2, …> and <b1, b2, …> of D1 
and D2. Map a1 to b1. Then look at a2. If a2 >1 a1, map a2 to the first unused bj 
such that bj >2 b1 in D2. On the other hand, if a2 <1 a1, map a2 to the first unused 
bj such that bj <2 b1 in D2. Now look at a3, observe its relation to a1 and a2, and 
map a3 to the first unused bk so that the b’s are in the same relation as the a’s. 
Continue to extend the mapping in similar fashion.)
Note that, with respect to its natural ordering, the set of rational num-
bers is a denumerable totally ordered set without first or last element. So, by 
Exercise 3.65, the totally ordered set of blocks of any denumerable nonstan-
dard model of arithmetic looks just like the ordered set of rational numbers. 

230
Introduction to Mathematical Logic
Thus, the model can be pictured in the following way: First come the natural 
numbers 0, 1, 2, … . These are followed by a denumerable collection of blocks, 
where each block looks like the integers in their natural order, and this denu-
merable collection of blocks is ordered just like the rational numbers.
Exercise 3.66
Prove that there is no wf Φ(x) of the language of arithmetic such that, in each 
nonstandard model M of arithmetic, Φ is satisfied by those and only those 
elements of M that are standard. (Hint: Note that Φ(0) and (∀x)(Φ(x) ⇒ Φ(x′)) 
would be true in M, and the principle of mathematical induction holds in M.)
We have proved that there are denumerable nonstandard models of S, as 
well as denumerable nonstandard models of arithmetic. We may assume 
that the domain of any such model M is the set ω of natural numbers. The 
addition and multiplication operations in the model M are binary opera-
tions on ω (and the successor operation is a unary operation on ω). Stanley 
Tennenbaum proved that, in any denumerable nonstandard model of arith-
metic, it is not the case that the addition and multiplication operations are 
both recursive. (See Tennenbaum, 1959.) This was strengthened by Georg 
Kreisel, who proved that addition cannot be recursive, and by Kenneth 
McAloon, who proved that multiplication cannot be recursive, and by 
George Boolos, who proved that addition and multiplication each cannot be 
arithmetical. (See Kaye, 1991; Boolos et al., 2007.)

231
4
Axiomatic Set Theory
4.1  An Axiom System
A prime reason for the increase in importance of mathematical logic in the 
twentieth century was the discovery of the paradoxes of set theory and the 
need for a revision of intuitive (and contradictory) set theory. Many differ-
ent axiomatic theories have been proposed to serve as a foundation for set 
theory but, no matter how they may differ at the fringes, they all have as 
a common core the fundamental theorems that mathematicians require for 
their daily work. We make no claim about the superiority of the system we 
shall use except that, from a notational and conceptual standpoint, it is a 
convenient basis for present-day mathematics.
We shall describe a first-order theory NBG, which is basically a system of 
the same type as one originally proposed by J. von Neumann (1925, 1928) 
and later thoroughly revised and simplified by R. Robinson (1937), Bernays 
(1937–1954), and Gödel (1940). (We shall follow Gödel’s monograph to a great 
extent, although there will be some significant differences.)*
NBG has a single predicate letter A2
2 but no function letter or individual 
constants.† In order to conform to the notation in Bernays (1937–1954) and 
Gödel (1940), we shall use capital italic letters X1, X2, X3, … as variables instead 
of x1, x2, x3, … . (As usual, we shall use X, Y, Z, … to represent arbitrary vari-
ables.) We shall abbreviate A X Y
2
2(
,
) by X ∈ Y, and ¬A X Y
2
2(
,
) by X ∉ Y.
Intuitively, ∈ is to be thought of as the membership relation and the values 
of the variables are to be thought of as classes. Classes are certain collections 
of objects. Some properties determine classes, in the sense that a property 
P may determine a class of all those objects that possess that property. This 
“interpretation” is as imprecise as the notions of “collection” and “property.” 
The axioms will reveal more about what we have in mind. They will provide 
us with the classes we need in mathematics and appear modest enough so 
that contradictions are not derivable from them.
Let us define equality in the following way.
*	 I coined the name NBG in honor of von Neumann, Bernays, and Gödel. Paul Halmos, who 
favored the Zermelo-Fraenkel system, suggested that “NBG” stood for “No Bloody Good.”
†	 We use A2
2 instead of A1
2 because the latter was used previously for the equality relation.

232
Introduction to Mathematical Logic
Definition
	
X
Y
Z Z
X
Z
Y
=
∀
∈
⇔
∈
for(
)(
)*
Thus, two classes are equal when and only when they have the same 
members.
Definitions
	
X
Y
Z Z
X
Z
Y
X
Y
X
Y
X
Y
⊆
∀
∈
⇒
∈
⊂
⊆
∧
≠
for
inclusion
for
proper inclusio
(
)(
)
(
)
(
n)
When X ⊆ Y, we say that X is a subclass of Y. When X ⊂ Y, we say that X is a 
proper subclass of Y.
As easy consequences of these definitions, we have the following.
Proposition 4.1†
	
a.	⊢ X = Y ⇔ (X ⊆ Y ∧ Y ⊆ X)
	
b.	⊢ X = X
	
c.	⊢ X = Y ⇒ Y = X
	
d.	⊢ X = Y ⇒ (Y = Z ⇒ X = Z)
We shall now present the proper axioms of NBG, interspersing among the 
axioms some additional definitions and various consequences of the axioms.
We shall define a class to be a set if it is a member of some class. Those 
classes that are not sets are called proper classes.
Definitions
	
M
for
is a set
Pr
for
M
is a proper class
(
)
(
)(
)
(
)
(
)
(
)
(
)
X
Y X
Y
X
X
X
X
∃
∈
¬
It will be seen later that the usual derivations of the paradoxes now no lon-
ger lead to contradictions but only yield the results that various classes are 
proper classes, not sets. The sets are intended to be those safe, comfortable 
classes that are used by mathematicians in their daily work, whereas proper 
*	 As usual, Z is to be the first variable different from X and Y.
†	 The subscript NBG will be omitted from ⊢NBG in the rest of this chapter.

233
Axiomatic Set Theory
classes are thought of as monstrously large collections that, if permitted to be 
sets (i.e., allowed to belong to other classes), would engender contradictions.
Exercise
4.1	
Prove ⊢ X ∈ Y ⇒ M(X).
The system NBG is designed to handle classes, not concrete individuals.* 
The reason for this is that mathematics has no need for objects such as cows 
and molecules; all mathematical objects and relations can be formulated in 
terms of classes alone. If nonclasses are required for applications to other 
sciences, then the system NBG can be modified slightly so as to apply to both 
classes and nonclasses alike (see the system UR in Section 4.6 below).
Let us introduce lower-case letters x1, x2, … as special restricted variables 
for sets. In other words, (∀xj)B (xj) stands for (∀X)(M(X) ⇒ B (X)), that is, B 
holds for all sets, and (∃xj)B (xj) stands for (∃X)(M(X) ∧ B (X)), that is, B holds 
for some set. As usual, the variable X used in these definitions should be 
the first one that does not occur in B (xj). We shall use x, y, z, … to stand for 
arbitrary set variables.
Example
	
(
)(
)(
)(
)(
)
(
)(
)(
(
)
(
∀
∀
∃
∃
∈
∧
∈
∀
∀
⇒∃
X
x
y
X
X
x
y
X
X
X
X
X
1
3
1
3
1
2
2
stands for
M
4
4
3
1
2
4
3
)(
(
)
(
)(
)))
M X
X
X
X
X
X
∧∃
∈
∧
∈
Exercise
4.2	
Prove that ⊢ X = Y ⇔ (∀z)(z ∈ X ⇔ z ∈ Y). This is the so-called exten-
sionality principle: two classes are equal when and only when they 
contain the same sets as members.
Axiom T
	
X
X
X
X
X
X
1
2
1
3
2
3
=
⇒
∈
⇔
∈
(
)
This axiom tells us that equal classes belong to the same classes.
Exercise
4.3	
Prove that ⊢ M(Z) ∧ Z = Y ⇒ M(Y).
*	 If there were concrete individuals (that is, objects that are not classes), then the definition 
of equality would have to be changed, since all such individuals have the same members 
(namely, none at all).

234
Introduction to Mathematical Logic
Proposition 4.2
NBG is a first-order theory with equality.
Proof
Use Proposition 4.1, axiom T, the definition of equality, and the discussion 
on page 97.
Note that Proposition 4.2 entails the substitutivity of equality, which will 
be used frequently in what follows, usually without explicit mention.
Axiom P (Pairing Axiom)
	
(
)(
)(
)(
)(
)
∀
∀
∃
∀
∈
⇔
=
∨
=
x
y
z
u u
z
u
x
u
y
Thus, for any sets x and y, there is a set z that has x and y as its only members.
Exercises
4.4	 Prove ⊢ (∀x)(∀y)(∃1z)(∀u)(u ∈ z ⇔ u = x ∨ u = y). This asserts that there 
is a unique set z, called the unordered pair of x and y, such that z has 
x and y as its only members. Use axiom P and the extensionality 
principle.
4.5	 Prove ⊢ (∀X)(M(X) ⇔ (∃y)(X ∈ y)).
4.6	 Prove ⊢ (∃X) Pr(X) ⇒ ¬(∀Y)(∀Z)(∃W)(∀U)(U ∈ W ⇔ U = Y ∨ U = Z).
Axiom N (Null Set)
	
(
)(
)(
)
∃
∀
∉
x
y y
x
Thus, there is a set that has no members. From axiom N and the extensionality 
principle, there is a unique set that has no members—that is, ⊢ (∃1x)(∀y)(y ∉ x). 
Therefore, we can introduce a new individual constant ∅ by means of the 
following condition.
Definition
	
(
)(
)
∀
∉∅
y y
It then follows from axiom N and Exercise 4.3 that ∅ is a set.
Since we have (by Exercise 4.4) the uniqueness condition for the unordered 
pair, we can introduce a new function letter ɡ(x, y) to designate the unor-
dered pair of x and y. In accordance with the traditional notation, we shall 

235
Axiomatic Set Theory
write {x, y} instead of ɡ(x, y). Notice that we have to define a unique value for 
{X, Y} for any classes X and Y, not only for sets x and y. We shall let {X, Y} be 
∅ whenever X is not a set or Y is not a set. One can prove
⊢(
)([(
(
)
( ))
] [
(
)
( ) (
)(
)]).
∃
¬
∨¬
∧
=∅∨
∧
∧∀
∈⇔=
∨=
1Z
X
Y
Z
X
Y
u u Z
u
X u Y
M
M
M
M
This justifies the introduction of a term {X, Y} satisfying the following 
condition:
	
[
(
)
( )
(
)(
{
,
}
)]
[(
(
)
( ))
{
,
}
]
M
M
M
M
X
Y
u u
X Y
u
X
u
Y
X
Y
X Y
∧
∧∀
∈
⇔
=
∨
=
∨¬
∨¬
∧
= ∅
One can then prove ⊢ (∀x)(∀y)(∀u)(u ∈ {x, y} ⇔ u = x ∨ u = y) and ⊢ (∀X)(∀Y)
M({X, Y}).
Definition
	
{ }
{
,
}
X
X X
for
For a set x, {x} is called the singleton of x. It is a set that has x as its only 
member.
In connection with these definitions, the reader should review Section 2.9 
and, in particular, Proposition 2.28, which assures us that the introduction 
of new individual constants and function letters, such as ∅ and {X, Y}, adds 
nothing essentially new to the theory NBG.
Exercise
4.7	 a.	 Prove ⊢ {X, Y} = {Y, X}.
	b.	 Prove ⊢ (∀x)(∀y)({x} = {y} ⇔ x = y).
Definition
	
〈
〉
X Y
X
X Y
,
{{ },{
,
}}
for
For sets x and y, 〈x, y〉 is called the ordered pair of x and y.
The definition of 〈X, Y〉 does not have any intrinsic intuitive meaning. It 
is just a convenient way (discovered by Kuratowski, 1921) to define ordered 
pairs so that one can prove the characteristic property of ordered pairs 
expressed in the following proposition.

236
Introduction to Mathematical Logic
Proposition 4.3
	
⊢∀
(
) ∀
(
) ∀
(
) ∀
(
) 〈
〉= 〈
〉⇒
=
∧
=
(
)
x
y
u
v
x y
u v
x
u
y
v
,
,
Proof
Assume 〈x, y〉 = 〈u, v〉. Then {{x}, {x, y}} = {{u}, {u, v}}. Since {x} ∈ {{x}, {x, y}}, 
{x} ∈ {{u}, {u, v}}. Hence, {x} = {u} or {x} = {u, v}. In either case, x = u. Now, {u, v} 
∈ {{u}, {u, v}}; so, {u, v} ∈ {{x}, {x, y}}. Then {u, v} = {x} or {u, v} = {x, y}. Similarly, 
{x, y} = {u} or {x, y} = {u, v}. If {u, v} = {x} and {x, y} = {u}, then x = y = u = v; 
if not, {u, v} = {x, y}. Hence, {u, v} = {u, y}. So, if v ≠ u, then y = v; if v = u, then 
y = v. Thus, in all cases, y = v.
Notice that the converse of Proposition 4.3 holds by virtue of the substitu-
tivity of equality.
Exercise
4.8	 a.	 Show that, instead of the definition of an ordered pair given in the 
text, we could have used 〈X, Y〉 = {{∅, X}, {{∅}, Y}}; that is, Proposition 
4.3 would still be provable with this new meaning of 〈X, Y〉.
	
b.	 Show that the ordered pair also could be defined as {{∅, {X}}, {{Y}}}. 
(This was the first such definition, discovered by Wiener (1914). For a 
thorough analysis of such definitions, see A. Oberschelp (1991).)
We now extend the definition of ordered pairs to ordered n-tuples.
Definitions
	
〈
〉=
〈
…
〉= 〈〈
…
〉
〉
+
+
X
X
X
X
X
X
X
X
n
n
n
n
1
1
1
1
,
,
,
,
,
,
Thus, 〈X, Y, Z〉 = 〈〈X, Y〉, Z〉 and 〈X, Y, Z, U〉 = 〈〈〈X, Y〉, Z〉, U〉.
It is easy to establish the following generalization of Proposition 4.3:
	
⊢∀
(
) … ∀
(
) ∀
(
) … ∀
(
) 〈
…
〉= 〈
…
〉⇒
=
∧… ∧
=
x
x
y
y
x
x
y
y
x
y
x
y
n
n
n
n
n
n
1
1
1
1
1
1
(
,
,
,
,
)
Axioms of Class Existence
(B1)	 (∃X)(∀u)(∀v)(〈u, v〉 ∈ X ⇔ u ∈ v)	
(∈-relation)
(B2)	 (∀X)(∀Y)(∃Z)(∀u)(u ∈ Z ⇔ u ∈ X ∧ u ∈ Y)	
(intersection)
(B3)	 (∀X)(∃Z)(∀u)(u ∈ Z ⇔ u ∉ X)	
(complement)
(B4)	 (∀X)(∃Z)(∀u)(u ∈ Z ⇔ (∃v)(〈u, v〉 ∈ X))	
(domain)

237
Axiomatic Set Theory
(B5)	 (∀X)(∃Z)(∀u)(∀v)(〈u, v〉 ∈ Z  ⇔ u  ∈ X)
(B6)	 (∀X)(∃Z)(∀u)(∀v)(∀w)(〈u, v, w〉 ∈ Z  ⇔ 〈v, w, u〉 ∈ X)
(B7)	 (∀X)(∃Z)(∀u)(∀v)(∀w)(〈u, v, w〉 ∈ Z  ⇔ 〈u, w, v〉 ∈ X)
From axioms (B2)–(B4) and the extensionality principle, we obtain:
	
⊢∀
(
) ∀
(
) ∃
(
) ∀
(
)
∈
⇔
∈
∧
∈
(
)
X
Y
Z
u
u
Z
u
X
u
Y
1
	
⊢∀
(
) ∃
(
) ∀
(
)
∈
⇔
∉
(
)
X
Z
u
u
Z
u
X
1
	
⊢∀
(
) ∃
(
) ∀
(
)
∈
⇔∃
(
) 〈
〉∈
(
)
(
)
X
Z
u
u
Z
v
u v
X
1
,
These results justify the introduction of new function letters: ∩, −, and D.
Definitions
	
  
intersection of
and
                
(
)(
)
(
)
∀
∈
∩
⇔
∈
∧
∈
u u
X
Y
u
X
u
Y
X
Y
     
complement of
(
)(
)
(
)
(
)(
(
)
(
)(
,
∀
∈
⇔
∉
∀
∈
⇔∃
〈
〉∈
u u
X
u
X
X
u u
X
v
u v
X
D
))
(
)
(
domain of
                                
unio
X
X
Y
X
Y
∪
=
∩
n of
and
                                              
X
Y
V
)
= ∅
−
=
∩
(
)
universal class
                                
∗
X
Y
X
Y
(
)
difference of
and
X
Y
Exercises
4.9	
Prove:
	
a.	 ⊢ (∀u)(u ∈ X ∪ Y ⇔ u ∈ X ∨ u ∈ Y)
	
b.	 ⊢ (∀u)(u ∈ V)
	
c.	 ⊢ (∀u)(u ∈ X − Y ⇔ u ∈ X ∧ u ∉ Y)
4.10	 Prove:
	a.	 ⊢ X ∩ Y = Y ∩ X
	b.	 ⊢ X ∪ Y = Y ∪ X
	c.	 ⊢ X ⊆ Y ⇔ X ∩ Y = X
	d.	 ⊢ X ⊆ Y ⇔ X ∪ Y = Y
	e.	 ⊢ (X ∩ Y) ∩ Z = X ∩ (Y ∩ Z)
	 f.	 ⊢ (X ∪ Y) ∪ Z = X ∪ (Y ∪ Z)
*	 It will be shown later that V is a proper class, that is, V is not a set.

238
Introduction to Mathematical Logic
	g.	 ⊢ (X ∩ X) = X
	h.	 ⊢ X ∪ X = X
	 i.	 ⊢ X ∩ ∅ = ∅
	 j.	 ⊢ X ∪ ∅ = X
	k.	 ⊢ X ∩ V = X
	 l.	 ⊢ X ∪ V = V
	m.	 ⊢X
Y
X
Y
∪
=
∪
	n.	 ⊢X
Y
X
Y
∩
=
∪
	o.	 ⊢ X − X = ∅
	p.	 ⊢V
X
X
−
=
	q.	 ⊢ X −(X − Y) = X ∩ Y
	 r.	 ⊢Y
X
X
Y
X
⊆
⇒
−
=
	s.	 ⊢X
X
=
	 t.	 ⊢V = ∅
	u.	 ⊢ X ∩ (Y ∪ Z) = (X ∩ Y) ∪ (X ∩ Z)
	v.	 ⊢ X ∪ (Y ∩ Z) = (X ∪ Y) ∩ (X ∪ Z)
4.11	 Prove the following wfs.
	a.	 ⊢ (∀X)(∃Z)(∀u)(∀v)(〈u, v〉 ∈ Z ⇔ 〈v, u〉 ∈ X) [Hint: Apply axioms (B5), 
(B7), (B6), and (B4) successively.]
	b.	 ⊢ (∀X)(∃Z)(∀u)(∀v)(∀w)(〈u, v, w〉 ∈ Z ⇔ 〈u, w〉 ∈ X) [Hint: Use (B5) 
and (B7).]
	c.	 ⊢ (∀X)(∃Z)(∀v)(∀x1) … (∀xn)(〈x1, …, xn, v〉 ∈ Z ⇔ 〈x1, …, xn〉 ∈ X) [Hint: 
Use (B5).]
	d.	 ⊢ (∀X)(∃Z)(∀v1) … (∀vm)(∀x1) … (∀xn)(〈x1, …, xn, v1, …, vm〉 ∈ Z ⇔ 
〈x1, … , xn〉 ∈ X) [Hint: Iteration of part (c).]
	e.	 ⊢ (∀X)(∃Z)(∀v1) … (∀vm)(∀x1) … (∀xn)(〈x1, …, xn−1, v1, …, vm, xn〉 ∈ Z ⇔ 
〈x1, …, xn〉 ∈ X) [Hint: For m = 1, use (b), substituting 〈x1, …, xn−1〉 for 
u and xn for w; the general case then follows by iteration.]
	 f.	 ⊢ (∀X)(∃Z)(∀x)(∀v1) … (∀vm)(〈v1, …, vm, x〉 ∈ Z ⇔ x ∈ X) [Hint: Use (B5) 
and part (a).]
	g.	 ⊢ (∀X)(∃Z)(∀x1) … (∀xn)(〈x1, …, xn〉 ∈ Z ⇔ (∃y)(〈x1, …, xn, y〉 ∈ X)) [Hint: 
In (B4), substitute 〈xn, …, xn〉 for u and y for v.]
	h.	 ⊢ (∀X)(∃Z)(∀u)(∀v)(∀w)(〈v, u, w〉 ∈ Z ⇔ 〈u, w〉 ∈ X) [Hint: Substitute 
〈u, w〉 for u in (B5) and apply (B6).]
	 i.	 ⊢ (∀X)(∃Z)(∀v1) … (∀vk)(∀u)(∀w)(〈v1, …, vk, u, w〉 ∈ Z ⇔ 〈u, w〉 ∈ X) 
[Hint: Substitute 〈v1, …, vk〉 for v in part (h).]
Now we can derive a general class existence theorem. By a predicative wf we mean 
a wf φ(X1, …, Xn, Y1, …, Ym) whose variables occur among X1, …, Xn, Y1, … , Ym 

239
Axiomatic Set Theory
and in which only set variables are quantified (i.e., φ can be abbreviated in such 
a way that only set variables are quantified).
Examples
(∃x1)(x1 ∈ Y1) is predicative, whereas (∃Y1)(x1 ∈ Y1) is not predicative.
Proposition 4.4 (Class Existence Theorem)
Let φ(X1, …, Xn, Y1, …, Ym) be a predicative wf. Then ⊢ (∃Z)(∀x1) … (∀xn) 
(〈x1, … , xn〉 ∈ Z ⇔ φ(x1, …, xn, Y1, …, Ym)).
Proof
We shall consider only wfs φ in which no wf of the form Yi ∈ W occurs, since 
Yi ∈ W can be replaced by (∃x)(x = Yi ∧ x ∈ W), which is equivalent to (∃x) [(∀z)(z ∈ x 
⇔ z ∈ Yi) ∧ x ∈ W]. Moreover, we may assume that φ contains no wf of the form 
X ∈ X, since this may be replaced by (∃u)(u = X ∧ u ∈ X), which is equivalent to 
(∃u) [(∀z)(z ∈ u ⇔ z ∈ X) ∧ u ∈ X]. We shall proceed now by induction on the num-
ber k of connectives and quantifiers in φ (written with restricted set variables).
Base: k = 0. Then φ has the form xi ∈ xj or xj ∈ xi or xi ∈ Yℓ, where 1 ≤ i < j ≤ n. 
For xi ∈ xj, axiom (B1) guarantees that there is some W1 such that (∀xi)(∀xj)(〈xi, 
xj〉 ∈ W1 ⇔ xi ∈ xj). For xj ∈ xi, axiom (B1) implies that there is some W2 such 
that (∀xi)(∀xj)(〈xi, xj〉 ∈ W2 ⇔ xj ∈ xi) and then, by Exercise 4.11(a), there is some 
W3 such that (∀xi)(xj)(〈xi, xj〉 ∈ W3 ⇔ xj ∈ xi). So, in both cases, there is some 
W such that (∀xi)(∀xj)(〈xi, xj〉 ∈ W ⇔ φ(x1, …, xn, Y1, …, Ym)). Then, by Exercise 
4.11(i) with W = X, there is some Z1 such that (∀x1) … (∀xi−1)(∀xi)(∀xj)(〈x1, …, 
xi−1, xi, xj〉 ∈ Z1 ⇔ φ(x1, …, xn, Y1, …, Ym)). Hence, by Exercise 4.11(e) with Z1 = X, 
there exists Z2 such that (∀x1) … (∀xi)(∀xi+1) … (∀xj)(〈x1, …, xj〉 ∈ Z2 ⇔ φ(x1, …, 
xn, Y1, …, Ym)). Then, by Exercise 4.11(d) with Z2 = X, there exists Z such that 
(∀x1) … (∀xn)(〈x1, …, xn〉 ∈ Z ⇔ φ(x1, …, xn, Y1, …, Ym)). In the remaining case, xi 
∈ Yℓ, the theorem follows by application of Exercise 4.11(f, d).
Induction step. Assume the theorem provable for all k < r and assume that φ 
has r connectives and quantifiers.
	
a.	φ is ¬ψ. By inductive hypothesis, there is some W such that (∀x1) … (∀xn)
(〈x1, …, xn〉 ∈ W ⇔ ψ(x1, …, xn, Y1, …, Ym)). Let Z
W
=
.
	
b.	φ is ψ ⇒ ϑ. By inductive hypothesis, there are classes Z1 and Z2 such 
that (∀x1) … (∀xn)(〈x1, …, xn〉 ∈ Z1 ⇔ ψ(x1, …, xn, Y1, …, Ym)) and (∀x1) … 
(∀xn)(〈x1, …, xn〉 ∈ Z2, ϑ(x1, …, xn, Y1, …, Ym)). Let Z
Z
Z
=
∩
1
2.
	
c.	φ is (∀x)ψ. By inductive hypothesis, there is some W such that (∀x1) … 
(∀xn)(∀x)(〈x1, …, xn, x〉 ∈ W ⇔ ψ(x1, …, xn, x, y1, …, Ym)). Apply Exercise 
4.11(g) with X
W
=
 to obtain a class Z1 such that (∀x1) … (∀xn)(〈x1, …, xn〉 
∈ Z1 ⇔ (∃x) ¬ ψ(x1, …, xn, x, Y1, …, Ym)) Now let Z
Z
=
1, noting that (∀x)ψ 
is equivalent to ¬(∃x)¬ψ.

240
Introduction to Mathematical Logic
Examples
	
1.	Let φ(X, Y1, Y2) be (∃u)(∃v)(X = 〈u, v〉 ∧ u ∈ Y1 ∧ v ∈ Y2). The only 
quantifiers in φ involve set variables. Hence, by the class existence 
theorem, ⊢ (∃Z)(∀x)(x ∈ Z ⇔ (∃u)(∃v)(x = 〈u, v〉 ∧ u ∈ Y1 ∧ v ∈ Y2)). By 
the extensionality principle,
	
⊢(
)(
)(
(
)(
)(
,
).
∃
∀
∈
⇔∃
∃
= 〈
〉∧
∈
∧
∈
1
1
2
Z
x x
Z
u
v x
u v
u
Y
v
Y
So, we can introduce a new function letter ×.
Definition
(Cartesian product of Y1 and Y2)
	
(
)(
(
)(
)(
,
))
∀
∈
×
⇔∃
∃
= 〈
〉∧
∈
∧
∈
x x
Y
Y
u
v x
u v
u
Y
v
Y
1
2
1
2
Definitions
	
Y
Y
Y
Y
Y
Y
n
X
X
V
X
relation
n
n
2
1
2
2
for
for
when
Rel
for
is a
×
×
>
⊆
−
(
)
(
)*
V2 is the class of all ordered pairs, and Vn is the class of all ordered n-tuples. 
In ordinary language, the word “relation” indicates some kind of connection 
between objects. For example, the parenthood relation holds between parents 
and their children. For our purposes, we interpret the parenthood relation to 
be the class of all ordered pairs 〈u, v〉 such that u is a parent of v.
	
2.	Let φ(X, Y) be X ⊆ Y. By the class existence theorem and the extension-
ality principle, ⊢ (∃1Z)(∀x)(x ∈ Z ⇔ x ⊆ Y). Thus, there is a unique class Z 
that has as its members all subsets of Y. Z is called the power class of Y 
and is denoted P(Y).
Definition
	
∀
(
)
∈( ) ⇔
⊆
(
)
x
x
Y
x
Y
P
	
3.	Let φ(X, Y) be (∃v)(X ∈ v ∧ v ∈ Y)). By the class existence theorem and 
the extensionality principle, ⊢ (∃1Z)(∀x)(x ∈ Z ⇔ (∃v)(x ∈ v ∧ v ∈ Y)). 
*	 More precisely, Rel(X) means that X is a binary relation.

241
Axiomatic Set Theory
Thus, there is a unique class Z that contains all members of members 
of Y. Z is called the sum class of Y and is denoted ⋃ Y.
Definition
	
(
)(
(
)(
))
∀
∈
⇔∃
∈
∧
∈
x x
Y
v x
v
v
Y
∪
	
4.	Let φ(X) be (∃u)(X = 〈u, u〉). By the class existence theorem and the exten-
sionality principle, there is a unique class Z such that (∀x)(x ∈ Z ⇔ (∃u)
(x = 〈u, u〉)). Z is called the identity relation and is denoted I.
Definition
	
(
)(
(
)(
,
))
∀
∈⇔∃
= 〈
〉
x x
I
u x
u u
Corollary 4.5
If φ(X1, …, Xn, Y1, …, Ym) is a predicative wf, then
	
⊢∃
(
)
⊆
∧∀
(
) … ∀
(
) 〈
…
〉∈
⇔
…
…
(
)
(
)
(
)
1
1
1
1
1
W
W
V
x
x
x
x
W
x
x
Y
Y
n
n
n
n
m
,
,
,
,
,
,
,
ϕ
Proof
By Proposition 4.4, there is some Z such that (∀x1) … (∀xn)(〈x1, …, xn〉 ∈ Z ⇔ 
φ(x1, …, xn, Y1, …, Ym)). Then W = Z ∩ Vn satisfies the corollary, and the unique-
ness follows from the extensionality principle.
Definition
Given a predicative wf φ(X1, …, Xn, Y1, …, Ym), let {〈x1, …, xn〉|φ(x1, …, xn, Y1, …, 
Ym)} denote the class of all n-tuples 〈x1, …, xn〉 that satisfy φ(x1, …, xn, Y1, …, 
Ym); that is,
	
(
)(
{
,
,
| (
,
,
,
,
,
)}
(
)
(
)(
,
,
∀
∈〈
…
〉
…
…
⇔
∃
… ∃
= 〈
…
u u
x
x
x
x
Y
Y
x
x
u
x
i
n
n
m
n
ϕ
1
1
1
1
x
x
x
Y
Y
n
n
m
〉∧
…
…
ϕ(
,
,
,
,
,
)))
1
1
This definition is justified by Corollary 4.5. In particular, when n = 1, ⊢ (∀u)
(u ∈ {x|φ(x, Y1, …, Ym)} ⇔ φ(u, Y1, …, Ym)).

242
Introduction to Mathematical Logic
Examples
	
1.	Take φ to be 〈x2, x1〉 ∈ Y. Let 
⌣
Y be an abbreviation for {〈x1, x2〉|〈x2, x1〉 ∈ Y}. 
Hence, 
⌣
⌣
Y
V
x
x
x x
Y
x
x
Y
⊆
∧∀
∀
〈
〉∈
⇔〈
〉∈
2
1
2
1
2
2
1
(
)(
)(
,
,
) . Call ⌣
Y the inverse 
relation of Y.
	
2.	Take φ to be (∃v)(〈v, x〉 ∈ Y). Let R (Y) stand for {x|(∃v)(〈v, x〉 ∈ Y)}. Then 
⊢ (∀u)(u ∈ R (Y) ⇔ (∃v)(〈v, x〉 ∈ Y)). R (Y) is called the range of Y. Clearly, 
⊢R
D
( )
( ).
Y
Y
=
⌣
Notice that axioms (B1)–(B7) are special cases of the class existence theo-
rem, Proposition 4.4. Thus, instead of the infinite number of instances of the 
axiom schema in Proposition 4.4, it sufficed to assume only a finite number 
of instances of that schema.
Exercises
4.12	 Prove:
	
a.	 ⊢ ⋃ ∅ = ∅
	
b.	 ⊢ ⋃ {∅} = ∅
	
c.	 ⊢ ⋃ V = V
	
d.	 ⊢ P (V) = V
	
e.	 ⊢ X ⊆ Y ⇒ ⋃ X ⊆ ⋃ Y ∧ P  (X) ⊆ P  (Y)
	
f.	 ⊢ ⋃ P  (X) = X
	
g.	 ⊢ X ⊆ P  ( ⋃ X)
	
h.	 ⊢ (X ∩ Y) × (W ∩ Z) = (X × W) ∩ (Y × Z)
	
i.	 ⊢ (X ∪ Y) × (W ∪ Z) = (X × W) ∪ (X × Z) ∪ (Y × W) ∩ (Y × Z)
	
j.	 ⊢ P (X ∩ Y) = P (X) ∩ P (Y)
	
k.	 ⊢ P (X) ∪ P (Y) ⊆ P (X ∪ Y)
	
l.	 ⊢ Rel(Y) ⇒ Y ⊆ D (Y) × R (Y)
	
m.	 ⊢ ⋃ (X ⋃ Y) = ( ⋃ X) ⋃ ( ⋃ Y)
	
n.	 ⊢ ⋃ (X ∩ Y) ⊆ ( ⋃ X) ∩ ( ⋃ Y)
	
o.	 ⊢Z
Y
Z
Y
V
=
⇒
=
∩
⌣
⌣
2
	
p.	 ⊢Rel( )I
I
I
∧
=
⌣
	
q.	 ⊢ P (∅) = {∅}
	
r.	 ⊢ P ({∅}) = {∅, {∅}}
	
s.	 ⊢ (∀x)(∀y)(x × y ⊆ P (P (x ∪ y)))
	
t.	 What simple condition on X and Y is equivalent to P (X ∪ Y) ⊆ P 
(X) ∪ P (Y)?

243
Axiomatic Set Theory
Until now, although we can prove, using Proposition 4.4, the existence of a 
great many classes, the existence of only a few sets, such as ∅, {∅}, {∅, {∅}}, 
and {{∅}}, is known to us. To guarantee the existence of sets of greater com-
plexity, we require more axioms.
Axiom U (Sum Set)
	
(
)(
)(
)(
(
)(
))
∀
∃
∀
∈
⇔∃
∈
∧
∈
x
y
u u
y
v u
v
v
x
This axiom asserts that the sum class ⋃ x of a set x is also a set, which we 
shall call the sum set of x, that is, ⊢(∀ x)M( ⋃ x). The sum set ⋃ x is usu-
ally referred to as the union of all the sets in the set x and is often denoted 
∩v xv
∈
.
Exercises
4.13	 Prove:
	
a.	 ⊢(∀x)(∀y)( ⋃ {x, y} = x ∪ y)
	
b.	 ⊢(∀x)(∀y)M(x ∪ y)
	
c.	 ⊢(∀x)( ⋃ {x} = x)
	
d.	 ⊢(∀x)(∀y)( ⋃ 〈x, y〉 = {x, y})
4.14	 Define by induction {x1, …, xn} to be {x1, …, xn−1} ∪ {xn}. Prove ⊢ (∀x1) … 
(∀xn)(∀u)(u ∈ {x1, …, xn} ⇔ u = x1 ∨ … ∨ u = xn) Thus, for any sets x1, …, xn, 
there is a set that has x1, …, xn as its only members.
Another means of generating new sets from old is the formation of the set 
of subsets of a given set.
Axiom W (Power Set)
	
(
)(
)(
)(
)
∀
∃
∀
∈
⇔
⊆
x
y
u u
y
u
x
This axiom asserts that the power class P (x) of a set x is itself a set, that is, 
⊢ (∀x)M(P (x)).
A much more general way to produce sets is the following axiom of 
subsets.
Axiom S (Subsets)
	
(
)(
)(
)(
)(
)
∀
∀
∃
∀
∈
⇔
∈
∧
∈
x
Y
z
u u
z
u
x
u
Y

244
Introduction to Mathematical Logic
Corollary 4.6
	
a.	⊢ (∀x)(∀Y) M(x ∩ Y) (The intersection of a set and a class is a set.)
	
b.	⊢ (∀x)(∀Y)(Y ⊆ x ⇒ M(Y)) (A subclass of a set is a set.)
	
c.	For any predicative wf B (y), ⊢ (∀x)M({y|y ∈ x ∧ B (y)}).
Proof
	
a.	By axiom S, there is a set z such that (∀u)(u ∈ z ⇔ u ∈ x ∧ u ∈ Y), which 
implies (∀u)(u ∈ z ⇔ u ∈ x ∩ Y). Thus, z = x ∩ Y and, therefore, x ∩ Y is a 
set.
	
b.	If Y ⊆ x, then x ∩ Y = Y and the result follows by part (a).
	
c.	Let Y = {y|y ∈ x ∧ B (y)}.* Since Y ⊆ x, part (b) implies that Y is a set.
Exercise
4.15	 Prove:
	
a.	 ⊢ (∀x)(M(D (x)) ∧ M(R (x))).
	
b.	 ⊢ (∀x)(∀y) M(x × y). [Hint: Exercise 4.12(s).]
	
c.	 ⊢ M(D (Y)) ∧ M(R (Y)) ∧ Rel(Y) ⇒ M(Y). [Hint: Exercise 4.12(t).]
	
d.	 ⊢ Pr(Y) ∧ Y ⊆ X ⇒ Pr(X).
On the basis of axiom S, we can show that the intersection of any nonempty 
class of sets is a set.
Definition
	
∩X
y
x x
X
y
x
for
(intersection)
{ |(
)(
)}
∀
∈
⇒
∈
 
Proposition 4.7
	
a.	⊢(∀x)(x ∈ X ⇒ ⋂ X ⊆ x)
	
b.	⊢X ≠ ∅ ⇒ M( ⋂ X)
	
c.	⊢ ⋂ ∅ = V
Proof
	
a.	Assume u ∈ X. Consider any y in ⋂ X. Then (∀x)(x ∈ X ⇒ y ∈ x). Hence, 
y ∈ u. Thus, ⋂ X ⊆ u.
*	 More precisely, the wf Y ∈ X ∧ B (Y) is predicative, so that the class existence theorem yields 
a class {y|y ∈ X ∧ B (y)}. In our case, X is a set x.

245
Axiomatic Set Theory
	
b.	Assume X ≠ ∅. Let x ∈ X. By part (a), ⋂ X ⊆ x. Hence, by Corollary 
4.6(b), ⋂ X is a set.
	
c.	Since ⊢ (∀x)(x ∉ ∅), ⊢ (∀y)(∀x)(x ∈ ∅ ⇒ y ∈ x), from which we obtain ⊢(∀ y)
(y ∈ ⋂ ∅). From ⊢ (∀y)(y ∈ V) and the extensionality principle, ⊢ ⋂ ∅ = V.
Exercise
4.16	 Prove:
	
a.	 ⊢ ⋂ {x, y} = x ⋂ y
	
b.	 ⊢ ⋂ {x} = x
	
c.	 ⊢X ⊆ Y ⇒ ⋂ Y ⊆ ⋂ X
A stronger axiom than axiom S will be necessary for the full development of 
set theory. First, a few definitions are convenient.
Definitions
Fnc(X)	
for Rel(X) ∧ (∀x)(∀y)(∀z)(〈x, y〉 ∈ X ∧ 〈x, z〉 ∈ X ⇒ y = z) (X is a 
function)
X:Y → Z	
for Fnc(X)  ∧ D (X) = Y  ∧ R (X) ⊆ Z (X is a function from Y into Z)
Y X	
for X ∩ (Y × V) (restriction of X to the domain Y)
Fnc1(X)	
for Fnc
Fnc
(
)
(
)
X
X
∧
⌣
 (X is a one–one function)
X Y
z
u
Y u
u
′
=
∀
〈
〉∈
⇔
=
∅



if
otherwise
(
)(
,
)
X
z
X″Y = R (Y X)
If there is a unique z such that 〈y, z〉 ∈ X, then z = X′y; otherwise, X′y = ∅. 
If X is a function and y is a set in its domain, X′y is the value of the function 
applied to y. If X is a function, X″Y is the range of X restricted to Y.*
Exercise
4.17 Prove:
	
a.	 ⊢ Fnc(X) ∧ y ∈ D(X) ⇒ (∀z)(X′y = z ⇔ 〈y, z〉 ∈ X)
	
b.	 ⊢ Fnc(X) ∧ Y ⊆ D(X) ⇒ Fnc(Y X) ∧D(Y X) = Y ∧ (∀y)(y ∈ Y ⇒ X′y = 
(Y X)′y)
	
c.	 ⊢ Fnc(X) ⇒ [Fnc1(X) ⇔ (∀y)(∀z)(y ∈ D(X) ∧ z ∈ D(X) ∧ y ≠ z ⇒ X′y ≠ X′z)]
	
d.	 ⊢ Fnc(X) ∧ Y ⊆ D(X) ⇒ (∀z)(z ∈ X″Y ⇔ (∃y)(y ∈ Y ∧ X′y = z))
*	 In traditional set-theoretic notation, if F is a function and y is in its domain, F′y is written as 
F(y), and if Y is included in the domain of F, F″Y is sometimes written as F[Y].

246
Introduction to Mathematical Logic
Axiom R (Replacement)
	
Fnc( )
(
)(
)(
)(
(
)(
,
))
Y
x
y
u u
y
v
v u
Y
v
x
⇒∀
∃
∀
∈
⇔∃
〈
〉∈
∧
∈
Axiom R asserts that, if Y is a function and x is a set, then the class of second 
components of ordered pairs in Y whose first components are in x is a set (or, 
equivalently, R(x Y) is a set).
Exercises
4.18	 Show that, in the presence of the other axioms, the replacement axiom 
(R) implies the axiom of subsets (S).
4.19	 Prove ⊢ Fnc(Y) ⇒ (∀x)M(Y″x).
4.20	 Show that axiom R is equivalent to the wf Fnc(Y) ∧ M(D (Y)) ⇒ M(R (Y)).
4.21	 Show that, in the presence of all axioms except R and S, axiom R is 
equivalent to the conjunction of axiom S and the wf Fnc1(Y) ∧ M(D (Y)) 
⇒ M(R (Y)).
To ensure the existence of an infinite set, we add the following axiom.
Axiom I (Axiom of Infinity)
	
(
)(
(
)(
{ }
))
∃
∅∈
∧∀
∈
⇒
∪
∈
x
x
u u
x
u
u
x
Axiom I states that there is a set x that contains ∅ and such that, whenever 
a set u belongs to x, then u ∪ {u} also belongs to x. Hence, for such a set x, 
{∅} ∈ x, {∅, {∅}} ∈ x, {∅, {∅}, {∅, {∅}}} ∈ x, and so on. If we let 1 stand for {∅}, 
2 for {∅, 1}, 3 for {∅, 1, 2}, …, n for {∅, 1, 2, …, n − 1}, etc., then, for all ordinary 
integers n ≥ 0, n ∈ x, and ∅ ≠ 1, ∅ ≠ 2, 1 ≠ 2, ∅ ≠ 3, 1 ≠ 3, 2 ≠ 3, … .
Exercise
4.22	 a.	 Prove that any wf that implies (∃X)M(X) would, together with axiom 
S, imply axiom N.
	
b.	 Show that axiom I is equivalent to the following sentence (I*):
	
(
)((
)(
(
)(
))
(
)(
{ }
))
∃
∃
∈
∧∀
∉
∧∀
∈
⇒
∪
∈
x
y y
x
u u
y
u u
x
u
u
x
	
Then prove that (I*) implies axiom N. (Hence, if we assumed (I*) 
instead of (I), axiom N would become superfluous.)
This completes the list of axioms of NBG, and we see that NBG has only 
a finite number of axioms—namely, axiom T, axiom P (pairing), axiom 
N (null set), axiom U (sum set), axiom W (power set), axiom S (subsets), 

247
Axiomatic Set Theory
axiom R (replacement), axiom I (infinity), and the seven class existence axi-
oms (B1)–(B7). We have also seen that axiom S is provable from the other axi-
oms; it has been included here because it is of interest in the study of certain 
weaker subtheories of NBG.
Let us verify now that the usual argument for Russell’s paradox does not 
hold in NBG. By the class existence theorem, there is a class Y = {x|x ∉ x}. 
Then (∀x)(x ∈ Y ⇔ x ∉ x). In unabbreviated notation this becomes (∀X)(M(X) 
⇒ (X ∈ Y ⇔ X ∉ X)). Assume M(Y). Then Y ∈ Y ⇔ Y ∉ Y, which, by the tau-
tology (A ⇔ ¬A) ⇒ (A ∧ ¬A), yields Y ∈ Y ∧ Y ∉ Y. Hence, by the derived 
rule of proof by contradiction, we obtain ⊢ ¬M(Y). Thus, in NBG, the argu-
ment for Russell’s paradox merely shows that Russell’s class Y is a proper 
class, not a set. NBG will avoid the paradoxes of Cantor and Burali-Forti in 
a similar way.
Exercise
4.23	 Prove ⊢ ¬M(V), that is, the universal class V is not a set. [Hint: Apply 
Corollary 4.6(b) with Russell’s class Y.]
4.2  Ordinal Numbers
Let us first define some familiar notions concerning relations.
Definitions
X Irr Y for Rel(X) ∧ (∀y)(y  ∈ Y  ⇒ 〈y, y〉 ∉ X)
	
(X is an irreflexive relation on Y)
X Tr Y for Rel(X) ∧ (∀u)(∀v)(∀w)([u  ∈ Y ∧ v  ∈ Y ∧ w ∈ Y ∧
〈u, v〉 ∈ X ∧ 〈v, w〉 ∈ X]  ⇒ 〈u, w〉 ∈ X)
(X is a transitive relation on Y)
X Part Y for (X Irr Y) ∧ (X Tr Y)	
(X partially orders Y)
X Con Y for Rel(X) ∧ (∀u)(∀v)([u ∈ Y ∧ v ∈ Y ∧ u ≠ v] ⇒ 〈u, v〉 ∈ X ∨ 〈v, u〉 ∈ X)
(X is a connected relation on Y)
X Tot Y for (X Irr Y) ∧ (X Tr Y) ∧ (X Con Y)	 (X totally orders Y)
X We Y for (X Irr Y) ∧ (∀Z)([Z ⊆ Y ∧ Z ≠ ∅] ⇒ (∃y)(y ∈ Z ∧
(∀v)(v ∈ Z ∧ v ≠ y ⇒ 〈y, v〉 ∈ X ∧ 〈v, y〉 ∉ X)))
(X well-orders Y, that is, the relation X is irreflexive on Y and every nonempty 
subclass of Y has a least element with respect to X).

248
Introduction to Mathematical Logic
Exercises
4.24	 Prove ⊢ X We Y ⇒ X Tot Y. [Hint: To show X Con Y, let x ∈ Y ∧ y ∈ Y ∧ 
x ≠ y. Then {x, y} has a least element, say x. Then 〈x, y〉 ∈ X. To show X 
Tr Y, assume x ∈ Y ∧ y ∈ Y ∧ z ∈ Y ∧ 〈x, y〉 ∈ X ∧ 〈y, z〉 ∈ X. Then {x, y, z} 
has a least element, which must be x.]
4.25	 Prove ⊢ X We Y ∧ Z ⊆ Y ⇒ X We Z.
Examples (from intuitive set theory)
	
1.	The relation < on the set P of positive integers well-orders P.
	
2.	The relation < on the set of all integers totally orders, but does not well-
order, this set. The set has no least element.
	
3.	The relation ⊂ on the set W of all subsets of the set of integers par-
tially orders W but does not totally order W. For example, {1} ⊄ {2} and 
{2} ⊄ {1}.
Definition
Simp(Z, W1, W2) for (∃x1)(∃x2)(∃r1)(∃r2)(Rel(r1) ∧ Rel(r2) ∧ W1 = 〈r1, x1〉 ∧ W2 = 
〈r2, x2〉 ∧ Fnc1(Z) ∧ D(Z) = x1 ∧ R(Z) = x2 ∧ (∀u)(∀v)(u ∈ x1 ∧ v ∈ x1 ⇒ (〈u, v〉 ∈ r1 
⇔ 〈Z′u, Z′v〉 ∈ r2)))
(Z is a similarity mapping of the relation r1 on x1 onto the relation r2 on x2.)
Definition
	
Sim
for
Simp
and
are
(
,
)
(
)
( ,
,
)
(
W W
z
z W W
W
W
similar ordered str
1
2
1
2
1
2
∃
uctures)
Example
Let r1 be the less-than relation < on the set A of nonnegative integers {0, 1, 
2, …}, and let r2 be the less-than relation < on the set B of positive integers 
{1, 2, 3, …}. Let z be the set of all ordered pairs 〈x, x + 1〉 for x ∈ A. Then z is a 
similarity mapping of 〈r1, A〉 onto 〈r2, B〉.
Definition
	
X
X
u v
z
u z
X
z v
X
composition
X
1
2
2
1
2

for
the
of
{
,
|(
)(
,
,
)}
(
〈
〉
∃
〈
〉∈
∧〈
〉∈
and X1)

249
Axiomatic Set Theory
Exercises
4.26	 Prove:
	a.	 ⊢ Simp(Z, X, Y) ⇒ M(Z) ∧ M(X) ∧ M(Y)
	b.	 ⊢Simp Z X Y
,
,
(
) ⇒ Simp
⌣
Z Y X
,
,
(
)
4.27	 a.	 Prove: ⊢ Rel(X1) ∧ Rel(X2) ⇒ Rel(X1 ⚬ X2)
	b.	 Let X1 and X2 be the parent and brother relations on the set of human 
beings. What are the relations X1 ⚬ X1 and X1 ⚬ X2?
	c.	 Prove: ⊢ Fnc(X1) ∧ Fnc(X2) ⇒ Fnc(X1 ⚬ X2)
	d.	 Prove: ⊢ Fnc1(X1) ∧ Fnc1(X2) ⇒ Fnc1(X1 ⚬ X2)
	e.	 Prove: ⊢ (X1: Z → W ∧ X2: Y → Z) ⇒ X1 ⚬ X2: Y → W
Definitions
	
Fld
for
the
of
TOR
for Rel
Tot Fld
(
)
(
)
(
)
(
)
(
)
(
)
(
(
(
X
X
D
R
X
X
field
X
X
X
X
∪
∧
)))
(
)
(
)
(
)
(
(
(
)))
(
X
total order
X
X
X
X
well
is a
WOR
for Rel
We Fld
is a
X
∧
−ordering relation)
Exercise
4.28	 Prove:
	
a.	 ⊢ Sim(W1, W2) ⇒ Sim(W2, W1)
	
b.	 ⊢ Sim(W1, W2) ∧ Sim(W2, W3) ⇒ Sim(W1, W3)
	
c.	 ⊢ Sim(〈X, Fld(X)〉, 〈Y, Fld(Y)〉) ⇒ (TOR(X) ⇔ TOR(Y)) ∧ (WOR(X) ⇔ 
WOR(Y))
If x is a total order, then the class of all total orders similar to x is called the 
order type of x. We are especially interested in the order types of well-­ordering 
relations, but, since it turns out that all order types are proper classes (except 
the order type {∅} of ∅), it will be convenient to find a class W of well-ordered 
structures such that every well-ordering is similar to a unique member of W. 
This leads us to the study of ordinal numbers.
Definitions
E for {〈x, y〉|x ∈ y}	
(the membership relation)
Trans(X) for (∀u)(u ∈ X ⇒ u ⊆ X)	
(X is transitive)
SectY(X, Z) for Z ⊆ X ∧ (∀u)(∀v)([u ∈ X ∧ v ∈ Z ∧ 〈u, v〉 ∈ Y] ⇒ u ∈ Z)
(Z is a Y-section of X, that is, Z is a subclass of X and every 
member of X that Y-precedes a member of Z is also a member 
of Z.)

250
Introduction to Mathematical Logic
SegY(X, W) for {x|x ∈ X ∧ 〈x, W〉 ∈ Y} (the Y-segment of X determined by W, 
that is, the class of all members of X that Y-precede W).
Exercises
4.29	 Prove:
	
a.	 ⊢ Trans(X) ⇔ (∀u)(∀v)(v ∈ u ∧ u ∈ X ⇒ v ∈ X)
	
b.	 ⊢Trans(X)⇔ ⋃ X ⊆ X
	
c.	 ⊢ Trans(∅)
	
d.	 ⊢ Trans({∅})
	
e.	 ⊢ Trans(X) ∧ Trans(Y) ⇒ Trans(X ∪ Y) ∧ Trans(X ∩ Y)
	
f.	 ⊢Trans(X) ⇒ Trans(⋃ X)
	
g.	 ⊢(∀ u)(u ∈ X ⇒ Trans(u)) ⇒ Trans(⋃ X)
4.30	 Prove:
	
a.	 ⊢ (∀u) [SegE(X, u) = X ∩ u ∧ M(SegE(X, u))]
	
b.	 ⊢ Trans(X) ⇔ (∀u)(u ∈ X ⇒ SegE(X, u) = u)
	
c.	 ⊢ E We X ∧ SectE(X, Z) ∧ Z ≠ X ⇒ (∃u)(u ∈ X ∧ Z = SegE(X, u))
Definitions
Ord(X) for E We X ∧ Trans(X)	
(X is an ordinal class if and only if the 
∈-relation well – orders X and any mem-
ber of X is a subset of X)
On for {x|Ord(x)}	
(The class of ordinal numbers)
Thus, ⊢ (∀x)(x ∈ On ⇔ Ord(x)). An ordinal class that is a set is called an ordi-
nal number, and On is the class of all ordinal numbers. Notice that a wf x ∈ 
On is equivalent to a predicative wf—namely, the conjunction of the follow-
ing wfs:
	
a.	(∀u)(u ∈ x ⇒ u ∉ u)
	
b.	(∀u)(u ⊆ x ∧ u ≠ ∅ ⇒ (∃v)(v ∈ u ∧ (∀w)(w ∈ u ∧ w ≠ v ⇒ v ∈ w ∧ w ∉ v)))
	
c.	(∀u)(u ∈ x ⇒ u ⊆ x)
(The conjunction of (a) and (b) is equivalent to E We x, and (c) is Trans(x).) In 
addition, any wf On ∈ Y can be replaced by the wf (∃y)(y ∈ Y ∧ (∀z)(z ∈ y ⇔ 
z ∈ On)). Hence, any wf that is predicative except for the presence of “On” is 
equivalent to a predicative wf and therefore can be used in connection with 
the class existence theorem.

251
Axiomatic Set Theory
Exercise
4.31	 Prove: (a) ⊢ ∅ ∈ On. (b) ⊢ 1 ∈ On, where 1 stands for {∅}.
We shall use lower-case Greek letters α, β, γ, δ, τ, … as restricted variables 
for ordinal numbers. Thus, (∀α)B (α) stands for (∀x)(x ∈ On ⇒ B (x)), and (∃α)B 
(α) stands for (∃x)(x ∈ On ∧ B (x)).
Proposition 4.8
	
a.	⊢ Ord(X) ⇒ (X ∉ X ∧ (∀u)(u ∈ X ⇒ u ∉ u))
	
b.	⊢ Ord(X) ∧ Y ⊂ X ∧ Trans(Y) ⇒ Y ∈ X
	
c.	⊢ Ord(X) ∧ Ord(Y) ⇒ (Y ⊂ X ⇔ Y ∈ X)
	
d.	⊢ Ord(X) ∧ Ord(Y) ⇒ [(X ∈ Y ∨ X = Y ∨ Y ∈ X) ∧ ¬(X ∈ Y ∧ Y ∈ X) ∧ 
¬(X ∈ Y ∧ X = Y)]
	
e.	⊢ Ord(X) ∧ Y ∈ X ⇒ Y ∈ On
	
f.	⊢ E We On
	
g.	⊢ Ord(On)
	
h.	⊢ ¬ M(On)
	
i.	⊢ Ord(X) ⇒ X = On ∨ X ∈ On
	
j.	⊢ y ⊆ On ∧ Trans(y) ⇒ y ∈ On
	
k.	⊢ x ∈ On ∧ y ∈ On ⇒ (x ⊆ y ∨ y ⊆ x)
Proof
	
a.	If Ord(X), then E is irreflexive on X; so, (∀u)(u ∈ X ⇒ u ∉ u); and, if X ∈ X, 
X ∉ X. Hence, X ∉ X.
	
b.	Assume Ord(X) ∧ Y ⊂ X ∧ Trans(Y). It is easy to see that Y is a proper 
E-section of X. Hence, by Exercise 4.30(b, c), Y ∈ X.
	
c.	Assume Ord(X) ∧ Ord(Y). If Y ∈ X, then Y ⊆ X, since X is transitive; but 
Y ≠ X by (a); so, Y ⊂ X. Conversely, if Y ⊂ X, then, since Y is transitive, 
we have Y ∈ X by (b).
	
d.	Assume Ord(X) ∧ Ord(Y) ∧ X ≠ Y. Now, X ∩ Y ⊆ X and X ∩ Y ⊆ Y. Since 
X and Y are transitive, so is X ∩ Y. If X ∩ Y ⊂ X and X ∩ Y ⊂ Y, then, by 
(b), X ∩ Y ∈ X and X ∩ Y ∈ Y; hence, X ∩ Y ∈ X ∩ Y, contradicting the 
irreflexivity of E on X. Hence, either X ∩ Y = X or X ∩ Y = Y; that is, X ⊆ Y 
or Y ⊆ X. But X ≠ Y. Hence, by (c), X ∈ Y or Y ∈ X. Also, if X ∈ Y and 
Y ∈ X, then, by (c), X ⊂ Y and Y ⊂ X, which is impossible. Clearly, 
X ∈ Y ∧ X = Y is impossible, by (a).
	
e.	Assume Ord(X) ∧ Y ∈ X. We must show E We Y and Trans(Y). Since 
Y ∈ X and Trans(X), Y ⊂ X. Hence, since E We X, E We Y. Moreover, 
if u ∈ Y and v ∈ u, then, by Trans(X), v ∈ X. Since E Con X and Y ∈ X ∧ 
v ∈ X, then v ∈ Y ∨ v = Y ∨ Y ∈ v. If either v = Y or Y ∈ v, then, since 
E Tr X and u ∈ Y ∧ v ∈ u, we would have u ∈ u, contradicting (a). Hence 
v ∈ Y. So, if u ∈ Y, then u ⊆ Y, that is, Trans(Y).

252
Introduction to Mathematical Logic
	
f.	By (a), E Irr On. Now assume X ⊆ On ∧ X ≠ ∅. Let α ∈ X. If α is the least 
element of X, we are done. (By least element of X we mean an element 
v in X such that (∀u)(u ∈ X ∧ u ≠ v ⇒ v ∈ u).) If not, then E We α and X ∩ 
α ≠ ∅; let β be the least element of X ∩ α. It is obvious, using (d), that β is 
the least element of X.
	
g.	We must show E We On and Trans(On). The first part is (f). For the 
­second, if u ∈ On and v ∈ u, then, by (e), v ∈ On. Hence, Trans(On).
	
h.	If M(On), then, by (g), On ∈ On, contradicting (a).
	
i.	Assume Ord(X). Then X ⊆ On. If X ≠ On, then, by (c), X ∈ On.
	
j.	Substitute On for X and y for Y in (b). By (h), y ⊂ On.
	
k.	Use parts (d) and (c).
We see from Proposition 4.8(i) that the only ordinal class that is not an ordi-
nal number is the class On itself.
Definitions
	
x
y
x
On
y
On
x
y
x
y
y
On
x
y
x
y
<
∈
∧
∈
∧
∈
≤
∈
∧
=
∨
<
o
o
o
for
for
(
)
Thus, for ordinals, <⚬ is the same as ∈; so, <⚬ well-orders On. In particular, 
from Proposition 4.8(e) we see that any ordinal x is equal to the set of smaller 
ordinals.
Proposition 4.9 (Transfinite Induction)
	
⊢∀
(
)
∀
(
)
∈
⇒
∈
(
) ⇒
∈

⇒
⊆
β
α
α
β
α
β
X
X
On
X
(If, for every β, whenever all ordinals less than β are in X, β must also be in X, 
then all ordinals are in X.)
Proof
Assume (∀β) [(∀α)(α ∈ β ⇒ α ∈ X) ⇒ β ∈ X]. Assume there is an ordinal in 
On – X. Then, since On is well-ordered by E, there is a least ordinal β in On – X. 
Hence, all ordinals less than β are in X. So, by hypothesis, β is in X, which is 
a contradiction.
Proposition 4.9 is used to prove that all ordinals have a given prop-
erty B(α). We let X = {x|B(x) ∧ x ∈ On} and show that (∀β)[(∀α)(α ∈ β ⇒ 
B(α)) ⇒B(β)].

253
Axiomatic Set Theory
Definition
x′ for x ∪ {x}
Proposition 4.10
	
a.	⊢ (∀x)(x ∈ On ⇔ x′ ∈ On)
	
b.	⊢ (∀α) ¬(∃β)(α <⚬ β <⚬ α′)
	
c.	⊢ (∀α)(∀β)(α′ = β′ ⇒ α = β)
Proof
	
a.	x ∈ x′. Hence, if x′ ∈ On, then x ∈ On by Proposition 4.8(e). Conversely, 
assume x ∈ On. We must prove E We (x ∪ {x}) and Trans(x ∪ {x}). Since 
E We x and x ∉ x, E Irr (x ∩ {x}). Also, if y ≠ ∅ ∧ y ⊆ x ∪ {x}, then either 
y = {x}, in which case the least element of y is x, or y ∩ x ≠ ∅ and the least 
element of y ∩ x is then the least element of y. Hence, E we (x ∪ {x}). In 
addition, if y ∈ x ∪ {x} and u ∈ y, then u ∈ x. Thus, Trans(x ∪ {x}).
	
b.	Assume α <⚬ β <⚬ α′. Then, α ∈ β ∧ β ∈ α′. Since α ∈ β, β ∉ α, and β ≠ α by 
Proposition 4.8(d), contradicting β ∈ α′.
	
c.	Assume α′ = β′. Then β <⚬ α′ and, by part (b), β ≤⚬ α. Similarly, α ≤⚬ β. 
Hence, α = β.
Exercise
4.32	 Prove: ⊢ (∀α)(α ⊂ α′)
Definitions
Suc(X) for X ∈ On ∧ (∃α)(X = α′)	
(X is a successor ordinal)
K1 for {x|x = ∅ ∨ Suc(x)}	
(the class of ordinals of the first kind)
ω for {x|x ∈ K1 ∧ ∀u)(u ∈ x ⇒ u ∈ K1)}	
(ω is the class of all ordinals
		
α of the first kind such that
		
all ordinals smaller than α are
		
also of the first kind)
Example
⊢ ∅ ∈ ω ∧ 1 ∈ ω. (Recall that 1 = {∅}.)
Proposition 4.11
	
a.	⊢ (∀α)(α ∈ ω ⇔ α′ ∈ ω)
	
b.	⊢ M(ω)
	
c.	⊢ ∅ ∈ X ∧ (∀u)(u ∈ X ⇒ u′ ∈ X) ⇒ ω ⊆ X
	
d.	⊢ (∀α)(α ∈ ω ∧ β <⚬ α ⇒ β ∈ ω)

254
Introduction to Mathematical Logic
Proof
	
a.	Assume α ∈ ω. Since Suc(α′), α′ ∈ K1. Also, if β ∈ α′, then β ∈ α or β = α. 
Hence, β ∈ K1. Thus, α′ ∈ ω. Conversely, if α′ ∈ ω, then, since α ∈ α′ and 
(∀β)(β ∈ α ⇒ β ∈ α′), it follows that α ∈ ω.
	
b.	By the axiom of infinity (I), there is a set x such that ∅ ∈ x and (∀u)(u ∈ 
x ⇒ u′ ∈ x). We shall prove ω ⊆ x. Assume not. Let α be the least ordinal 
in ω − x. Clearly, α ≠ ∅, since ∅ ∈ x. Hence, Suc(α). So, (∃β)(α = β′). Let δ be 
an ordinal such that α = δ′. Then δ <⚬ α and, by part (a), δ ∈ ω. Therefore, 
δ ∈ x. Hence, δ′ ∈ x. But α = δ′. Therefore, α ∈ x, which yields a contradic-
tion. Thus, ω ⊆ x. So, M(ω) by Corollary 4.6(b).
	
c.	This is proved by a procedure similar to that used for part (b).
	
d.	This is left as an exercise.
The elements of ω are called finite ordinals. We shall use the standard nota-
tion: 1 for ∅′, 2 for 1′, 3 for 2′, and so on. Thus, ∅ ∈ ω, 1 ∈ ω, 2 ∈ ω, 3 ∈ ω, ….
The nonzero ordinals that are not successor ordinals are called limit 
ordinals.
Definition
Lim(x) for x ∈ On ∧ x ∉ K1
Exercise
4.33	 Prove:
	
a.	 ⊢ Lim(ω)
	
b.	 ⊢ (∀α)(∀β)(Lim(α) ∧ β <⚬ α ⇒ β′ <⚬ α).
Proposition 4.12
	 a.	 ⊢∀
(
)
⊆
⇒
∈
∧∀
(
)

(
∈
⇒
≤
(
) ∧∀
(
)
∀
(
)
(
x
x
On
On
x
∪
∪
x
x
α
α
α
β
α
o
 
(
)
α
α
β
β
∈
⇒
≤
⇒
≤
))
x
o
o
∪x
. (If x is a set of ordinals, then ⋃ x is an 
ordinal that is the least upper bound of x.)
	 b.	 ⊢ (∀x)(x ⊆ On ∧ x ≠ ∅ ∧ (∀α)(α ∈ x ⇒ (∃β)(β ∈ x ∧ α <⚬ β))] ⇒ Lim( ⋃ x)). 
(If x is a nonempty set of ordinals without a maximum, then ⋃ x is a 
limit ordinal.)
Proof
	
a.	Assume x ⊆ On. ⋃ x, as a set of ordinals, is well-ordered by E. 
Also, if α ∈ ⋃ x ∧ β ∈ α, then there is some γ with γ ∈ x and α ∈ γ. 

255
Axiomatic Set Theory
Then β ∈ α ∧ α ∈ γ; since every ordinal is transitive, β ∈ γ. So, β ∈ ⋃ x. 
Hence, ⋃ x is transitive and, therefore, ⋃ x ∈ On. In addition, if 
α ∈ x, then α ⊆ ⋃ x; so, α ≤⚬ ⋃ x, by Proposition 4.8(c). Assume now 
that (∀α)(α ∈ x ⇒ α ≤⚬ β). Clearly, if δ ∈ ⋃ x, then there is some γ such 
that δ ∈ γ ∧ γ ∈ x. Hence, γ ≤⚬ β and so, δ <⚬ β. Therefore, ⋃ x ⊆ β and, 
by Proposition 4.8(c), ⋃ x ≤⚬ β.
	
b.	Assume x ⊆ On ∧ x ≠ ∅ ∧ (∀α)(α ∈ x ⇒ (∃β)(β ∈ x ∧ α <⚬ β)). If ⋃ x = 
∅, then α ∈ x implies α = ∅. So, x = ∅ or x = 1, which contradicts our 
assumption. Hence, ⋃ x ≠ ∅. Assume Suc( ⋃ x). Then ⋃ x = γ′ for 
some γ. By part (a), ⋃ x is a least upper bound of x. Therefore, γ is not 
an upper bound of x; there is some δ in x with γ <⚬ δ. But then δ = ⋃ x, since 
⋃ x is an upper bound of x. Thus, ⋃ x is a maximum element of x, 
contradicting our hypothesis. Hence, ¬ Suc( ⋃ x), and Lim( ⋃ x) is the 
only possibility left.
Exercise
4.34	 Prove:
	
a.	 ⊢∀
(
)
( ) ⇒(
)′=


(
∧
( ) ⇒
=
)


α
α
α
α
α
Suc
Lim
∪
∪
α
α
.
	
b.	 If ∅ ≠ x ⊆ On, then ⋂ x is the least ordinal in x.
We can now state and prove another form of transfinite induction.
Proposition 4.13 (Transfinite Induction: Second Form)
	
a.	⊢ [∅ ∈ X ∧ (∀α)(α ∈ X ⇒ α′ ∈ X) ∧ (∀α)(Lim(α) ∧ (∀β)(β <⚬ α ⇒ β ∈ X) 
⇒ α ∈ X)] ⇒ On ⊆ X
	
b.	(Induction up to δ.) ⊢ [∅ ∈ X ∧ (∀α)(α <⚬ δ ∧ α ∈ X
	
	 ⇒ α′ ∈ X) ∧ (∀α)(α <⚬ δ ∧ Lim(α) ∧ (∀β)(β <⚬ α
	
	 ⇒ β ∈ X) ⇒ α ∈ X)] ⇒ δ ⊆ X.
	
c.	(Induction up to ω.) ⊢ ∅ ∈ X ∧ (∀α)(α <⚬ ω ∧ α ∈ X ⇒ α′ ∈ X) ⇒ ω ⊆ X.
Proof
	
a.	Assume the antecedent. Let Y = {x|x ∈ On ∧ (∀α)(α ≤⚬ x ⇒ α ∈ X)}. It is 
easy to prove that (∀α)(α <⚬ γ ⇒ α ∈ Y) ⇒ γ ∈ Y. Hence, by Proposition 
4.9, On ⊆ Y. But Y ⊆ X. Hence, On ⊆ X.
	
b.	The proof is left as an exercise.
	
c.	This is a special case of part (b), noting that ⊢ (∀α)(α <⚬ ω ⇒ ¬Lim(α)).
Set theory depends heavily upon definitions by transfinite induction, which 
are justified by the following theorem.

256
Introduction to Mathematical Logic
Proposition 4.14
	
a.	⊢ (∀X)(∃1Y)(Fnc(Y) ∧ D(Y) = On ∧ (∀α)(Y′α = X′ (α   Y))). (Given X, there is 
a unique function Y defined on all ordinals such that the value of Y at α 
is the value of X applied to the restriction of Y to the set of ordinals less 
than α.)
	
b.	⊢ (∀x)(∀X1)(∀X2)(∃1Y)(Fnc(Y) ∧ D(Y) = On ∧ Y′∅ = x ∧ (∀α)(Y′(α′) = X1′(Y′α)) 
∧ (∀α)(Lim(α) ⇒Y′α = X2′ (α   Y))).
	
c.	(Induction up to δ.) ⊢ (∀x)(∀X1)(∀X2)(∃1Y)(Fnc(Y) ∧ D(Y) = δ ∧ Y′∅ = x 
∧ (∀α)(α′ <⚬ δ ⇒ Y′ (α′) = X1′ (Y′ α)) ∧ (∀α)(Lim(α) ∧ α <0 δ ⇒Y′ α = X2′ 
(α   Y))).
Proof
	
a.	Let Y1 = {u|Fnc(u) ∧ D (u) ∈ On ∧ (∀α)(α ∈ D (u) ⇒ u′α = X′(α   u))}. Now, 
if u1 ∈ Y1 and u2 ∈ Y1, then u1 ⊆ u2 or u2 ⊆ u1. In fact, let γ1 = D (u1) and 
γ2 = D (u2). Either γ1 ≤⚬ γ2 or γ2 ≤⚬ γ1; say, γ1 ≤⚬ γ2. Let w be the set of 
ordinals α <⚬ γ1 such that u1′α ≠ u2′α; assume w ≠ ∅ and let η be the 
least ordinal in w. Then for all β <⚬ η, u1′β = u2′β. Hence, u1′α = η   u2. But 
u1′η = X′ (η   u1) and u2′η = X′ (η   u2); and so, u1′η = u2′η, contradicting 
our assumption. Therefore, w = ∅; that is, for all α ≤⚬ γ1, u1′α = u2′α. 
Hence, u1 = γ1   u1 = γ1   u2 ⊆ u2. Thus, any two functions in Y1 agree in 
their common domain. Let Y = ⋃ Y1. We leave it as an exercise to prove 
that Y is a function, the domain of which is either an ordinal or the 
class On, and (∀α)(α ∈ D (Y) ⇒ Y′α = X′ (α   Y)). That D (Y) = On follows 
easily from the observation that, if D (Y) = δ and if we let W = Y ∪ {〈δ, 
X′Y〉}, then W ∈ Y1; so, W ⊆ Y and δ ∈ D (Y) = δ, which contradicts the 
fact that δ ∉ δ. The uniqueness of Y follows by a simple transfinite 
induction (Proposition 4.9).
The proof of part (b) is similar to that of (a), and part (c) follows from (b).
Using Proposition 4.14, one can introduce new function letters by transfi-
nite induction.
Examples
	
1.	Ordinal addition. In Proposition 4.14(b), take
	
x
X
u v
v
u
X
u v
v
u
=
= 〈
〉
=
= 〈
〉
=
( )
′
β
1
2
{
,
|
}
{
,
|
}
∪R
	
	 Hence, for each ordinal β, there is a unique function Yβ such that
	
Y
Y
Y
Y
Y
β
β
β
β
β
β
α
α
α
α
α
α
′∅=
∧∀
′
′ =
′
′ ∧
⇒
′
=
″
(
)(
(
)
(
)
[
( )
(
)])
Lim
∪

257
Axiomatic Set Theory
	
	 Hence there is a unique binary function +⚬ with domain (On)2 such that, 
for any ordinals β and γ, + ⚬(β, γ) = Yβ′γ. As usual, we write β +⚬ γ instead 
of +⚬(β, γ). Notice that:
	
β
β
β
γ
β
γ
α
β
α
β
τ
τ
α
+ ∅=
+
′ =
+
′
⇒
+
=
+
<
o
o
o
o
o
Lim
o
( )
(
)
( )
(
)
∪
	
	 In particular,
	
β
β
β
β
+
=
+
′
∅=
+ ∅′ = ′
o
o
o
1
(
)
(
)
	
2.	Ordinal multiplication. In Proposition 4.14(b), take
	
x
X
u v
v
u
X
u v
v
u
= ∅
= 〈
〉
=
+
= 〈
〉
=
1
2
{
,
|
}
{
,
|
( )}
o β
R
∪
Then, as in Example 1, one obtains a function β ×⚬ γ with the properties
	
β
β
γ
β
γ
β
α
β
α
β
τ
τ
α
× ∅= ∅
×
′ =
×
+
⇒
×
=
×
<
o
o
o
o
o
o
Lim
o
( )
(
)
( )
(
)
∪
Exercises
4.35	 Prove: ⊢ β ×⚬ 1 = β ∧ β ×⚬ 2 = β +⚬ β.
4.36	 Justify the following definition of ordinal exponentiation.*
	
exp( ,
)
exp( ,
)
exp( , )
( )
exp( , )
exp
β
β γ
β γ
β
α
β α
τ
α
∅=
′ =
×
⇒
=
∅<
<
1
o
Lim
o
o∪
( , )
β τ
For any class X, let EX be the membership relation restricted to X; that is, 
EX = {〈u, v〉|u ∈ v ∧ u ∈ X ∧ v ∈ X}.
*	 We use the notation exp (β, α) instead of βα in order to avoid confusion with the notation XY to 
be introduced later.

258
Introduction to Mathematical Logic
Proposition 4.15*
Let R be a well-ordering relation on a class Y; that is, R We Y. Let F be a ­function 
from Y into Y such that, for any u and v in Y, if 〈u, v〉 ∈ R, then 〈F′u, F′v〉 ∈ R. 
Then, for all u in Y, u = F′ u or 〈u, F′u〉 ∈ R.
Proof
Let X = {u|〈F′u, u〉 ∈ R}. We wish to show that X = ∅. Assume X ≠ ∅. Since 
X ⊆ Y and R well-orders Y, there is an R-least element u0 of X. Hence, 〈F′u0, u0〉 
∈ R. Therefore 〈F′(F′u0), F′u0〉 ∈ R. Thus, F′u0 ∈ X, but F′u0 is R-smaller than u0, 
contradicting the definition of u0.
Corollary 4.16
If Y is a class of ordinals, F: Y → Y, and F is increasing on Y (that is, α ∈ Y ∧ β 
∈ Y ∧ α <⚬ β ⇒ F′α <⚬ F′β), then α ≤⚬ F′α for all α in Y.
Proof
In Proposition 4.15, let R be EY. Note that EY well-orders Y, by Proposition 
4.8(f) and Exercise 4.25.
Corollary 4.17
Let α <⚬ β and y ⊆ α; that is, let y be a subset of a segment of β. Then 〈Eβ, β〉 is 
not similar to 〈Ey, y〉.
Proof
Assume 〈Eβ, β〉 is similar to 〈Ey, y〉. Then there is a function f from β onto y such 
that, for any u and v in β, u <⚬ v ⇔ f′u <⚬ f′v. Since the range of f is y, f′α ∈ y. But 
y ⊆ α. Hence f′α <⚬ α. But, by Corollary 4.16, α ≤⚬ f′α, which yields a contradiction.
Corollary 4.18
	 a.	 For α ≠ β, 〈Eα, α〉 and 〈Eβ, β〉 are not similar.
	 b.	 For any α, if f is a similarity mapping of 〈Eα, α〉 with 〈Eα, α〉, then f is 
the identity mapping, that is, f′β = β for all β <⚬ α.
*	 From this point on, we shall express many theorems of NBG in English by using the cor-
responding informal English translations. This is done to avoid writing lengthy wfs that are 
difficult to decipher and only in cases where the reader should be able to produce from the 
English version the precise wf of NBG.

259
Axiomatic Set Theory
Proof
	
a.	Since α ≠ β, it follows by Proposition 4.8(d, c) that one of α and β is a 
segment of the other; say, α is a segment of β. Then Corollary 4.17 tells 
us that 〈Eβ, β〉 is not similar to 〈Eα, α〉.
	
b.	By Corollary 4.16, f′β ≥⚬ β for all β <⚬ α. But, noting by Exercise 4.26(b) that 
⌣
f is a similarity mapping of 〈Eα, α〉 with 〈Eα, α〉, we again use Corollary 
4.16 to conclude that (
⌣
f)′β ≥⚬ β for all β <⚬ α. Hence β = (
⌣
f )′(f′β) ≥⚬ f ′β ≥⚬ 
β and, therefore, f′β = β.
Proposition 4.19
Assume that a nonempty set u is the field of a well-ordering r. Then there is a 
unique ordinal γ and a unique similarity mapping of 〈Eγ, γ〉 with 〈r, u〉.
Proof
Let F = {〈v, w〉|w ∈ u − v ∧ (∀z)(z ∈ u − v ⇒ 〈z, w〉 ∉ r)}. F is a function such that, 
if v is a subset of u and u − v ≠ ∅, then F′v is the r-least element of u − v. Let 
X = {〈v, w〉|〈R(v), w〉 ∈ F}. Now we use a definition by transfinite induction 
(Proposition 4.14) to obtain a function Y with On as its domain such that (∀α)
(Y′α = X′ (α   Y)). Let W = {α|Y′′α ⊆ u ∧ u − Y′′α ≠ ∅}. Clearly, if α ∈ W and β ∈ α, 
then β ∈ W. Hence, either W = On or W is some ordinal γ. (If W ≠ On, let γ be the 
least ordinal in On − W.) If α ∈ W, then Y′α = X′ (α   Y) is the r-least element of 
u − Y′′α; so, Y′α ∈ u and, if β ∈ α, Y′α ≠ Y′β. Thus, Y is a one-one function on W 
and the range of Y restricted to W is a subset of u. Now, let h = (W   Y) and f
h
=
⌣
; 
that is, let f be the inverse of Y restricted to W. So, by the replacement axiom (R), 
W is a set. Hence, W is some ordinal γ. Let ɡ = γ   Y. Then ɡ is a one–one func-
tion with domain γ and range a subset u1 of u. We must show that u1 = u and 
that, if α and β are in γ and β <⚬ α, then 〈ɡ′β, ɡ′α〉 ∈ r. Assume α and β are in 
γ and β <⚬ α. Then ɡ′′β ⊆ ɡ′′α and, since ɡ′α ∈ u − ɡ′′α, ɡ′α ∈ u − ɡ′′β. But ɡ′′β 
is the r-least element of u − ɡ′′β. Hence, 〈ɡ′β, ɡ′α〉 ∈ r. It remains to prove that 
u1 = u. Now, u1 = Y′′γ. Assume u −u1 ≠ ∅. Then γ ∈ W. But W = γ, which yields 
a contradiction. Hence, u = u1. That γ is unique follows from Corollary 4.18(a).
Exercise
4.37	 Show that the conclusion of Proposition 4.19 also holds when u = ∅ and 
that the unique ordinal γ is, in that case, ∅.
Proposition 4.20
Let R be a well-ordering of a proper class X such that, for each y ∈ X, the class 
of all R-predecessors of y in X (i.e., the R-segment in X determined by y) is a set. 

260
Introduction to Mathematical Logic
Then R is “similar” to E⚬n; that is, there is a (unique) one–one mapping H of 
On onto X such that α ∈ β ⇔ 〈H′α, H′β〉 ∈ R.
Proof
Proceed as in the proof of Proposition 4.19. Here, however, W = On; also, one 
proves that R(Y) = X by using the hypothesis that every R-segment of X is a 
set. (If X − R(Y) ≠ ∅, then, if w is the R-least element of X − R(Y), the proper 
class On is the range of ⌣
Y, while the domain of ⌣
Y is the R-segment of X deter-
mined by w, contradicting the replacement axiom.)
Exercise
4.38	 Show that, if X is a proper class of ordinal numbers, then there 
is a unique one–one mapping H of On onto X such that α ∈ β ⇔ H′α 
∈ H′β.
4.3  Equinumerosity: Finite and Denumerable Sets
We say that two classes X and Y are equinumerous if and only if there is a one–
one function F with domain X and range Y. We shall denote this by X ≅ Y.
Definitions
	
X
Y
F
F
X
F
Y
X
Y
F
X
Y
F
F
≅
∧
=
∧
=
≅
∃
(
)
≅
for Fnc
for
1( )
( )
( )
(
)
D
R
Notice that ⊢(
)(
)(
(
)(
))
∀
∀
≅
⇔∃
≅
x
y x
y
z x
y
z
. Hence, a wf x ≅ y is predicative 
(that is, is equivalent to a wf using only set quantifiers).
Clearly, if X
Y
F≅
, then Y
X
G≅
, where G
F
=
⌣
. Also, if X
Y
F≅
1
 and Y
Z
F≅
2
, then X
Z
H≅
, 
where H is the composition F2 ⚬ F1. Hence, we have the following result.
Proposition 4.21
	
a.	⊢ X ≅ X
	
b.	⊢ X ≅ Y ⇒ Y ≅ X
	
c.	⊢ X ≅ Y ∧ Y ≅ Z ⇒ X ≅ Z

261
Axiomatic Set Theory
Proposition 4.22
	
a.	⊢ (X ≅ Y ∧ Z ≅ W ∧ X ∩ Z = ∅ ∧ Y ∩ W = ∅) ⇒ X ∪ Z ≅ Y ∪ W
	
b.	⊢ (X ≅ Y ∧ Z ≅ W) ⇒ X × Z ≅ Y × W
	
c.	⊢ X × {y} ≅ X
	
d.	⊢ X × Y ≅ Y × X
	
e.	⊢ (X × Y) × Z ≅ X × (Y × Z)
Proof
	
a.	Let X
Y
F≅
 and Z W
G≅
. Then X
Z
Y
W
H
∪
∪
≅
, where H = F ∪ G.
	
b.	Let X
Y
F≅
 and Z W
G≅
. Let H = {〈u, v〉|(∃x)(∃y)(x ∈ X ∧ y ∈ Z ∧ u = 〈x, y〉 
∧ v = 〈F′x, G′y〉)}. Then X
Z
Y W
H
×
≅
×
.
	
c.	Let F = {〈u, v〉|u ∈ X ∧ v = 〈u, y〉}. Then
 
X
X
y
F≅
×{ }.
	
d.	Let F = {〈u, v〉|(∃x)(∃y)(x ∈ X ∧ y ∈ Y ∧ u = 〈x, y〉 ∧ v = 〈y, x〉)}. Then 
X
Y
Y
X
F
×
≅
×
.
	
e.	Let F = {〈u, v〉|(∃x)(∃y)(∃z)(x ∈ X ∧ y ∈ Y ∧ z ∈ Z ∧ u = 〈〈x, y〉, z〉 ∧ v = 
〈x, 〈y, z〉〉)}. Then (
)
(
)
X
Y
Z
X
Y
Z
F
×
×
≅
×
×
.
Definition
XY for {u|u: Y → X}
XY is the class of all sets that are functions from Y into X.
Exercises
Prove the following.
4.39	 ⊢ (∀X)(∀Y)(∃X1)(∃Y1)(X ≅ X1 ∧ Y ≅ Y1 ∧ X1 ∩ Y1 = ∅)
4.40	 ⊢P (y) ≅ 2y (Recall that 2 = {∅, 1} and 1 = {∅}.)
4.41	 a.	 ⊢ ¬M(Y) ⇒ XY = ∅
	
b.	 ⊢ (∀x)(∀y) M(xy)
4.42	 a.	 ⊢ X∅ = 1
	
b.	 ⊢ 1y ≅ 1
	
c.	 ⊢ Y ≠ ∅ ⇒ ∅Y = ∅
4.43	 ⊢ X ≅ X{u}
4.44	 ⊢ X ≅ Y ∧ Z ≅ W ⇒ XZ ≅ YW
4.45 ⊢ X ∩ Y = ∅ ⇒ ZX∪Y ≅ ZX × ZY
4.46	 ⊢ (∀x)(∀y)(∀z) [(xy)z ≅ xy×z]
4.47	 ⊢ (X × Y)Z ≅ XZ × YZ
4.48	 ⊢ (∀x)(∀R)(R We x ⇒ (∃α)(x ≅ α))

262
Introduction to Mathematical Logic
We can define a partial order ≼ on classes such that, intuitively, X ≼ Y if 
and only if Y has at least as many elements as X.
Definitions
X ≼ Y for (∃Z)(Z ⊆ Y ∧ X ≅ Z)
	
(
)
X
Y
is equinumerous with a subclass of
X
Y
≺
 for X ≼ Y ∧ ¬(X ≅ Y)
	
(
)
Y
X
is strictly greater in size than
Exercises
Prove the following.
4.49	 ⊢ X ≼Y ⇔ (X ≺ Y ∨ X ≅ Y)
4.50	 ⊢ X ≼ Y ∧ ¬M(X) ⇒ ¬M(Y)
4.51	 ⊢ X ≼ Y ∧ (∃Z)(Z We Y) ⇒ (∃Z)(Z We X)
4.52	 ⊢ (∀α)(∀β)(α ≼ β ∨ β ≼ α) [Hint: Proposition 4.8(k).]
Proposition 4.23
	
a.	⊢ X ≼ X ∧ ¬(X ≺ X)
	
b.	⊢ X ⊆ Y ⇒ X ≼ Y
	
c.	⊢ X ≼ Y ∧ Y ≼ Z ⇒ X ≼ Z
	
d.	⊢ X ≼ Y ∧ Y ≼ X ⇒ X ≅ Y (Bernstein’s theorem)
Proof
	(a), (b) These proofs are obvious.
	
c.	Assume X
Y
Y
Y
Y
Z
Z
Z
F
G
≅
∧
⊆
∧
≅
∧
⊆
1
1
1
1
. Let H be the composition of 
F and G. Then R
R
H
Z
X
H
H
(
) ⊆
∧
≅
(
). So, X ≼ Z.
	
d.	There are many proofs of this nontrivial theorem. The following one 
was devised by Hellman (1961). First we derive a lemma.
Lemma
Assume X ∩ Y = ∅, X ∩ Z = ∅ and Y ∩ Z = ∅, and let X
X
Y
Z
F≅
∪
∪
. Then there 
is a G such that X
X
Y
G≅
∪
.
Proof
Define a function H on a subclass of X × ω as follows: 〈〈u, k〉, v〉 ∈ H if and 
only if u ∈ X and k ∈ ω and there is a function f with domain k′ such that 

263
Axiomatic Set Theory
f′∅ = F′u and, if j ∈ k, then f′j ∈ X and f′(j′) = F′(f′j) and f′k = v. Thus, H′(〈u, ∅〉) = 
F′u, H′(〈u, 1〉) = F′(F′u) if F′u ∈ X, and H′(〈u, 2〉) = F′(F′(F′u)) if F′u and F′(F′u) 
are in X, and so on. Let X* be the class of all u in X such that (∃y)(y ∈ ω ∧ 
〈u, y〉 ∈ D (H) ∧ H′(〈u, y〉) ∈ Z). Let Y* be the class of all u in X such that (∀y)
(y ∈ ω ∧ 〈u, y〉 ∈ D (H) ⇒ H′(〈u, y〉) ∉ Z). Then X = X * ∪ Y *. Now define G 
as follows: D (G) = X and, if u ∈ X *, then G′u = u, whereas, if u ∈ Y *, then 
G′u = F′u. Then X
X
Y
G≅
∪.(This is left as an exercise.)
Now, to prove Bernstein’s theorem, assume X
Y
Y
Y
Y
X
X
X
F
G
≅
∧
⊆
∧
≅
∧
⊆
1
1
1
1
. 
Let A = G′′Y1 ⊆ X1 ⊆ X. But A ∩ (X1 −A) = ∅, A ∩ (X −X1) = ∅ and (X −X1) 
∩ (X1 −A) = ∅. Also, X = (X −X1) ∪ (X1 −A) ∪ A, and the composition H of F 
and G is a one–one function with domain X and range A. Hence, A
X
H≅
. So, 
by the lemma, there is a one–one function D such that A
X
D≅
1 (since (X1 −A) ∪ 
A = X1). Let T be the composition of the functions H, D and 
⌣
G; that is, T′u = 
(Ğ)′(D′(H′u)). Then X
Y
T≅
, since X
A
H≅
 and A
X
D≅
1 and X
Y
G
1 ≅
.
Exercises
4.53	 Carry out the details of the following proof (due to J. Whitaker) 
of Bernstein’s theorem in the case where X and Y are sets. Let 
X
Y
Y
Y
Y
X
X
X
F
G
≅
∧
⊆
∧
≅
∧
⊆
1
1
1
1
. We wish to find a set Z ⊆ X such 
that G, restricted to Y − F″Z, is a one–one function of Y − F″Z onto X 
−Z. [If we have such a set Z, let H = (Z   F)∪((X − Z)   G); that is, H′x = 
F′x for x ∈ Z, and H′x = Ğ′x for x ∈ X −Z. Then X
Y
H≅
.] Let Z = {x|(∃u)
(u ⊆ X ∧ x ∈ u ∧ G″(Y − F″u) ⊆ X − u)}. Notice that this proof does not 
presuppose the definition of ω nor any other part of the theory of 
ordinals.
4.54	 Prove: (a) ⊢ X ≼ X ∪ Y (b) ⊢ X ≺ Y ⇒ ¬(Y ≺ X) (c) ⊢ X ≺ Y ∧ Y ≼ Z ⇒ 
X ≺ Z
Proposition 4.24
Assume X ≼ Y and A ≼ B. Then:
	
a.	Y ∩ B = ∅ ⇒ X ∪ A ≼ Y ∪ B
	
b.	X × A ≼ Y × B
	
c.	XA ≼ YB if B is a set and ¬(X = A = Y = ∅ ∧ B ≠ ∅)
Proof
	
a.	Assume X
Y
Y
F≅
⊆
1
 and A
B
B
G≅
⊆
1
. Let H be a function with domain 
X ∪ A such that H′x = F′x for x ∈ X, and H′x = G′x for x ∈ A −X. Then 
X
A
H X
A
Y
B
H
∪
≅
′′
∪
⊆
∪
(
)
.
	
b.	and (c) are left as exercises.

264
Introduction to Mathematical Logic
Proposition 4.25
	
a.	⊢ ¬(∃f)(Fnc(f) ∧ D (f) = x ∧ R (f) = P (x)). (There is no function from x 
onto P (x).)
	
b.	⊢ x ≺ P (x) (Cantor’s theorem)
Proof
	
a.	Assume Fnc(f) ∧D (f) = x ∧ R (f) = P (x). Let y = {u|u ∈ x ∧ u ∉ f′u}. 
Then y ∈ P (x). Hence, there is some z in x such that f′z = y. But, (∀u)(u 
∈ y ⇔ u ∈ x ∧ u ∉ f′u). Hence, (∀u)(u ∈ f′z ⇔ u ∈ x ∧ u ∉ f′u). By rule A4, 
z ∈ f′z ⇔ z ∈ x ∧ z ∉ f′z. Since z ∈ x, we obtain z ∈ f′z ⇔ z ∉ f′z, which 
yields a contradiction.
	
b.	Let f be the function with domain x such that f′u = {u} for each u in x. 
Then f″x ⊆ P (x) and f is one–one. Hence, x ≼ P (x). By part (a), x ≅ P (x) 
is impossible. Hence, x ≺ P (x).
In naive set theory, Proposition 4.25(b) gives rise to Cantor’s paradox. If we 
let x = V, then V ≺ P (V). But P (V) ⊆V and, therefore, P (V) ≼ V. From V ≺ P (V), 
we have V ≼ P (V). By Bernstein’s theorem, V ≅ P (V), contradicting V ≺ P (V). 
In NBG, this argument is just another proof that V is not a set.
Notice that we have not proved ⊢ (∀x)(∀y)(x ≼ y ∨ y ≼ x). This intuitively 
plausible statement is, in fact, not provable, since it turns out to be equivalent 
to the axiom of choice (which will be discussed in Section 4.5).
The equinumerosity relation ≅ has all the properties of an equivalence 
relation. We are inclined, therefore, to partition the class of all sets into 
equivalence classes under this relation. The equivalence class of a set x would 
be the class of all sets equinumerous with x. The equivalence classes are 
called Frege–Russell cardinal numbers. For example, if u is a set and x = {u}, then 
the equivalence class of x is the class of all singletons {v} and is referred to 
as the cardinal number 1c. Likewise, if u ≠ v and y = {u, v}, then the equiva-
lence class of y is the class of all sets that contain exactly two elements and 
would be the cardinal number 2c; that is 2c is {x|(∃w)(∃z)(w ≠ z ∧ x = {w, z})}. 
All the Frege–Russell cardinal numbers, except the cardinal number 
Oc of ∅ (which is {∅}), turn out to be proper classes. For example, V ≅ 1c. 
(Let F′x = {x} for all x. Then V
F≅1c.) But, ¬M(V). Hence, by the replacement 
axiom, ¬M(1c).
Exercise
4.55	 Prove ⊢ ¬M(2c).
Because all the Frege–Russell cardinal numbers (except Oc) are proper 
classes, we cannot talk about classes of such cardinal numbers, and it is dif-
ficult or impossible to say and prove many interesting things about them. 

265
Axiomatic Set Theory
Most assertions one would like to make about cardinal numbers can be 
paraphrased by the suitable use of ≅, ≼, and ≺. However, we shall see later 
that, given certain additional plausible axioms, there are other ways of defin-
ing a notion that does essentially the same job as the Frege–Russell cardinal 
numbers.
To see how everything we want to say about cardinal numbers can be said 
without explicit mention of cardinal numbers, consider the following treat-
ment of the “sum” of cardinal numbers.
Definition
X +cY for (X × {∅}) ∪ (Y × {1})
Note that ⊢ ∅ ≠ 1 (since 1 is {∅}). Hence, X × {∅} and Y × {1} are disjoint 
and, therefore, their union is a class whose “size” is the sum of the “sizes” of 
X and Y.
Exercise
4.56	 Prove:
	
a.	 ⊢ X ≼ X +c Y ∧ Y ≼ X +c Y
	
b.	 ⊢ X ≅ A ∧ Y ≅ B ⇒ X +c Y ≅ A + cB
	
c.	 ⊢ X +c Y ≅ Y +c X
	
d.	 ⊢ M(X +c Y) ⇔ M(X) ∧ M(Y)
	
e.	 ⊢ X +c (Y +c Z) ≅ (X +c Y) +c Z
	
f.	 ⊢ X ≼ Y ⇒ X +c Z ≼ Y +c Z
	
g.	 ⊢ X +c X = X × 2 (Recall that 2 is {∅, 1}.)
	
h.	 ⊢XY +c
 Z ≅ XY × XZ
	
i.	 ⊢ x ≅ x +c 1 ⇒ 2x +c x ≅ 2x
4.3.1  Finite Sets
Remember that ω is the set of all ordinals α and all smaller ordinals are 
successor ordinals or ∅. The elements of ω are called finite ordinals, and the 
elements of On – ω are called infinite ordinals. From an intuitive standpoint, 
ω consists of ∅, 1, 2, 3, …, where each term in this sequence after ∅ is the 
successor of the preceding term. Note that ∅ contains no members, 1 = {∅} 
and contains one member, 2 = {∅, 1} and contains two members, 3 = {∅, 1, 2} 
and contains three members, etc. Thus, it is reasonable to think that, for each 
intuitive finite number n, there is exactly one finite ordinal that contains 
exactly n members. So, if a class has n members, it should be equinumerous 
with a finite ordinal. Therefore, a class will be called finite if and only if it is 
equinumerous with a finite ordinal.

266
Introduction to Mathematical Logic
Definition
	
Fin
for
is finite
(
)
(
)(
)
(
)
X
X
X
∃
∈
∧
≅
α α
ω
α
Exercise
4.57	 Prove:
	
a.	 ⊢ Fin(X) ⇒ M(X) (Every finite class is a set)
	
b.	 ⊢ (∀α)(α ∈ ω ⇒ Fin(α)) (Every finite ordinal is finite.)
	
c.	 ⊢ Fin(X) ∧ X ≅ Y ⇒ Fin(Y)
Proposition 4.26
	
a.	⊢ (∀α)(α ∉ ω ⇒ α ≅ α′).
	
b.	⊢ (∀α)(∀β)(α ∈ ω ∧ α ≠ β ⇒ ¬(α ≅ β)). (No finite ordinal is equinumer-
ous with any other ordinal.)
	
c.	⊢ (∀α)(∀x)(α ∈ ω ∧ x ⊂ α ⇒ ¬(α ≅ x)). (No finite ordinal is equinumer-
ous with a proper subset of itself.)
Proof
	
a.	Assume α ∉ ω. Define a function f with domain α′ as follows: f′δ = δ′ 
if δ ∈ ω; f′δ = δ if δ ∈ α′ ∧ δ ∉ ω ∪ {α}; and f′α = ∅. Then ′≅
α
α
f
.
	
b.	Assume this is false, and let α be the least ordinal such that α ∈ ω 
and there is β ≠ α such that α ≅ β. Hence, α <⚬ β. (Otherwise, β would 
be a smaller ordinal than α and β would also be in ω, and β would 
be equinumerous with another ordinal, namely, α.) Let α
β
≅
f
. If α = ∅, 
then f = ∅ and β = ∅, contradicting α ≠ β. So, α ≠ ∅. Since α ∈ ω, α = δ′ 
for some δ ∈ ω. We may assume that β = γ′ for some γ. (If β ∈ ω, then 
β ≠ ∅; and if β ∉ ω, then, by part (a), β ≅ β′ and we can take β′ instead 
of β.) Thus, ′ =
≅′
δ
α
γ
f
. Also, δ ≠ γ, since α ≠ β.
	
Case 1. f′δ = γ. Then δ
γ
≅
g , where ɡ = δ    f.
	
	 Case 2. f′δ ≠ γ. Then there is some μ ∈ δ such that f′μ = γ. Let h = ((δ  f) − 
{〈μ, γ〉}) ∪ {〈μ, f′δ〉}; that is, let h′τ = f′τ if τ ∉ {δ, μ}, and h′μ = f′δ. 
Then δ
γ
≅
h .
	
	 In both cases, δ is a finite ordinal smaller than α that is equinumer-
ous with a different ordinal γ, contradicting the minimality of α.
	
c.	Assume β ∈ ω ∧ x ⊂ β ∧ β ≅ x holds for some β, and let α be the least 
such β. Clearly, α ≠ ∅; hence, α = γ′ for some γ. But, as in the proof 
of part (b), one can then show that γ is also equinumerous with a 
proper subset of itself, contradicting the minimality of α.

267
Axiomatic Set Theory
Exercises
4.58	 Prove: ⊢ (∀α)(Fin(α) ⇔ α ∈ ω).
4.59	 Prove that the axiom of infinity (I) is equivalent to the following 
sentence.
	
( )
(
)((
)(
)
(
)(
(
)(
)))
∗
∃
∃
∈
∧∀
∈
⇒∃
∈
∧
⊂
x
u u
x
y y
x
z z
x
y
z
Proposition 4.27
	
a.	⊢ Fin(X) ∧ Y ⊆ X ⇒ Fin(Y)
	
b.	⊢ Fin(X) ⇒ Fin(X ∪ {y})
	
c.	⊢ Fin(X) ∧ Fin(Y) ⇒ Fin(X ∪ Y)
Proof
	
a.	Assume Fin(X) ∧ Y ⊆ X. Then X ≅ α, where α ∈ ω. Let g = Y   f and 
W = g″Y ⊆ α. W is a set of ordinals, and so, EW is a well-ordering of 
W. By Proposition 4.19, 〈EW, W〉 is similar to 〈Eβ, β〉 for some ordinal 
β. Hence, W ≅ β. In addition, β ≤⚬ α. (If α <⚬ β, then the similarity of 
〈Eβ, β〉 to 〈EW, W〉 contradicts Corollary 4.17.) Since α ∈ ω, β ∈ ω. From 
Y
W
W
g≅
∧
≅β, it follows that Fin(Y).
	
b.	If y ∈ X, then X ∪ {y} = X and the result is trivial. So, assume y ∉ X. 
From Fin(X) it follows that there is a finite ordinal α and a func-
tion f such that α ≅
f X. Let g = f ∪ {〈α, y〉}. Then ′≅
∪
α
g X
y
{ }. Hence, 
Fin(X ∪ {y}).
	
c.	Let Z
u u
x
y
f
x
u
y
x
y
f
=
∈
∧∀
∀
∀
≅
∧
⇒
∪
{ |
(
)(
)(
)(
( )
(
))}
ω
Fin
Fin
. We must 
show that Z = ω. Clearly, ∅ ∈ Z, for if x ≅ ∅, then x = ∅ and x ∪ y = y. 
Assume that α ∈ Z. Let x
f≅′
α  and Fin(y). Let w be such that f′w = α 
and let x1 = x −{w}. Then x1 ≅ α. Since α ∈ Z, Fin(x1 ∪ y). But x ∪ y = 
(x1 ∪ y) ∪ {w}. Hence, by part (b), Fin(x ∪ y). Thus, α′ ∈ Z. Hence, by 
Proposition 4.11(c), Z = ω.
Definitions
DedFin(X) for M(X) ∧ (∀Y)(Y ⊂ X ⇒ ¬(X ≅ Y))
(X is Dedekind-finite, that is, X is a set that is not equinumerous with any 
proper subset of itself)
DedInf(X) for M(X) ∧ ¬DedFin(X)
(X is Dedekind-infinite, that is, X is a set that is equinumerous with a proper 
subset of itself)

268
Introduction to Mathematical Logic
Corollary 4.28
(∀x)(Fin(x) ⇒ DedFin(x)) (Every finite set is Dedekind-finite)*
Proof
This follows easily from Proposition 4.26(c) and the definition of “finite.”
Definitions
Inf(X) for ¬Fin(X)	
(X is infinite)
Den(X) for X ≅ ω	
(X is denumerable)
Count(X) for Fin(X) ∨ Den(X)	
(X is countable)
Exercise
4.60	 Prove:
	
a.	 ⊢ Inf(X) ∧ X ≅ Y ⇒ Inf(Y)
	
b.	 ⊢ Den(X) ∧ X ≅ Y ⇒ Den(Y)
	
c.	 ⊢ Den(X) ⇒ M(X)
	
d.	 ⊢ Count(X) ∧ X ≅ Y ⇒ Count(Y)
	
e.	 ⊢ Count(X) ⇒ M(X)
Proposition 4.29
	
a.	⊢ Inf(X) ∧ X ⊆ Y ⇒ Inf(Y)
	
b.	⊢ Inf(X) ⇔ Inf(X ∪ {y})
	
c.	⊢ DedInf(X) ⇒ Inf(X)
	
d.	⊢ Inf(ω)
Proof
	
a.	This follows from Proposition 4.27(a).
	
b.	⊢ Inf(X) ⇒ Inf(X ∪ {y}) by part (a), and ⊢ Inf(X ∪ {y}) ⇒ Inf(X) by 
Proposition 4.27(b)
	
c.	Use Corollary 4.28.
	
d.	⊢ ω ∉ ω. If Fin(ω), then ω ≅ α for some α in ω, contradicting Proposition 
4.26(b).
*	 The converse is not provable without additional assumptions, such as the axiom of choice.

269
Axiomatic Set Theory
Proposition 4.30
⊢ (∀v)(∀z)(Den(v) ∧ z ⊆ v ⇒ Count(z)). (Every subset of a denumerable set is 
countable.)
Proof
It suffices to prove that z ⊆ ω ⇒ Fin(z) ∨ Den(z). Assume z ⊆ ω ∧ ¬Fin(z). Since 
¬Fin(z), for any α in z, there is some β in z with α <⚬ β. (Otherwise, z ⊆ α′ and, 
since Fin(α′), Fin(z).), Let X be a function such that, for any α in ω, X′α is the 
least ordinal β in z with α <⚬ β. Then, by Proposition 4.14(c) (with δ = ω), there 
is a function Y with domain ω such that Y′∅ is the least ordinal in z and, for 
any γ in ω, Y′(γ′) is the least ordinal β in z with β >⚬ Y′γ. Clearly, Y is one–one, 
D(Y) = ω, and Y″ω ⊆ z. To show that Den(z), it suffices to show that Y″ω = z. 
Assume z − Y″ω ≠ ∅. Let δ be the least ordinal in z − Y″ω, and let τ be the least 
ordinal in Y″ω with τ >⚬ δ. Then τ = Y′σ for some σ in ω. Since δ <⚬ τ, σ ≠ ∅. 
So, σ = μ′ for some μ in ω. Then τ = Y′σ is the least ordinal in z that is greater 
than Y′μ. But δ >⚬ Y′μ, since τ is the least ordinal in Y″ω that is greater than δ. 
Hence, τ ≤⚬ δ, which contradicts δ <⚬ τ.
Exercises
4.61	 Prove: ⊢ Count(X) ∧ Y ⊆ X ⇒ Count(Y).
4.62	 Prove:
	
a.	 ⊢ Fin(X) ⇒ Fin(P (X))
	
b.	 ⊢Fin(X) ∧ (∀ y)(y ∈ X ⇒ Fin(y)) ⇒ Fin(⋃ X)
	
c.	 ⊢ X ≼ Y ∧ Fin(Y) ⇒ Fin(X)
	
d.	 ⊢ Fin(P (X)) ⇒ Fin(X)
	
e.	 ⊢Fin(⋃ X)⇒Fin(X) ∧ (∀ y)(y ∈ X ⇒ Fin(y))
	
f.	 ⊢ Fin(X) ⇒ (X ≼ Y ∨ Y ≼ X)
	
g.	 ⊢ Fin(X) ∧ Inf(Y) ⇒ X ≺ Y
	
h.	 ⊢ Fin(X) ∧ Y ⊂ X ⇒ Y ≺ X
	
i.	 ⊢ Fin(X) ∧ Fin(Y) ⇒ Fin(X × Y)
	
j.	 ⊢ Fin(X) ∧ Fin(Y) ⇒ Fin(XY)
	
k.	 ⊢ Fin(X) ∧ y ∉ X ⇒ X ≺ X ∪ {y}
4.63	 Define X to be a minimal (respectively, maximal) element of Y if and only 
if X ∈ Y and (∀y)(y ∈ Y ⇒ ¬(y ⊂ X)) (respectively, (∀y)(y ∈ Y ⇒ ¬(X ⊂ y))). 
Prove that a set Z is finite if and only if every nonempty set of subsets 
of Z has a minimal (respectively, maximal) element (Tarski, 1925).

270
Introduction to Mathematical Logic
4.64	 Prove:
	
a.	 ⊢ Fin(X) ∧ Den(Y) ⇒ Den(X ∪ Y)
	
b.	 ⊢ Fin(X) ∧ Den(Y) ∧ X ≠ ∅ ⇒ Den(X × Y)
	
c.	 ⊢ (∀x)[DedInf(x) ⇔ (∃y)(y ⊆ x ∧ Den(y))]. (A set is Dedekind-infinite 
if and only if it has a denumerable subset)
	
d.	 ⊢ (∀x)[(∃y)(y ⊆ x ∧ Den(y)) ⇔ ω ≼ x]
	
e.	 ⊢ (∀α)(α ∉ ω ⇒ DedInf(α)) ∧ (∀α)(Inf(α) ⇒ α ∉ ω)
	
f.	 ⊢ (∀x)(∀y)(y ∉ x ⇒ [DedInf(x) ⇔ x ≅ x ∪ {y}])
	
g.	 ⊢ (∀x)(ω ≼ x ⇔ x +c 1 ≅ x)
4.65	 If NBG is consistent, then, by Proposition 2.17, NBG has a denumer-
able model. Explain why this does not contradict Cantor’s theorem, 
which implies that there exist nondenumerable infinite sets (such as 
P (ω)). This apparent, but not genuine, contradiction is sometimes called 
Skolem’s paradox.
4.4  Hartogs’ Theorem: Initial Ordinals—Ordinal Arithmetic
An unjustly neglected proposition with many uses in set theory is Hartogs’ 
theorem.
Proposition 4.31 (Hartogs, 1915)
⊢ (∀x)(∃α)(∀y)(y ⊆ x ⇒ ¬(α ≅ y)). (For any set x, there is an ordinal that is not 
equinumerous with any subset of x.)
Proof
Assume that every ordinal α is equinumerous with some subset y of x. 
Hence, y
f≅α for some f. Define a relation r on y by stipulating that 〈u, v〉 
∈ r if and only if f′u ∈ f′v. Then r is a well-ordering of y such that 〈r, y〉 
is similar to 〈Eα, α〉. Now define a function F with domain On such that, 
for any α, F′α is the set w of all pairs 〈z, y〉 such that y ⊆ x, z is a well-
ordering of y, and 〈Eα, α〉 is similar to 〈z, y〉. (w is a set, since w ⊆ P (x × x) × 
P (x).) Since, F″(On) ⊆ P (P (x × x) × P (x)), F″(On) is a set. F is one–one; 
hence, On
F F On
=
″
″
⌣
(
(
)) is a set by the replacement axiom, contradicting 
Proposition 4.8(h).

271
Axiomatic Set Theory
Definition
Let H denote the function with domain V such that, for every x, H ′x is the 
least ordinal α that is not equinumerous with any subset of x. (H is called 
Hartogs’ function.)
Corollary 4.32
	
(
)(
( ))
∀
′
≤
x
x
x
H
PPPP
Proof
With each β <⚬ H ′x, associate the set of relations r such that r ⊆ x × x, r is a 
well-ordering of its field y, and 〈r, y〉 is similar to 〈Eβ, β〉. This defines a one–
one function from H ′x into PP (x × x). Hence, H ′x ≼ PP (x × x). By Exercise 
4.12(s), x × x ⊆ PP (x). So, PP (x × x) ⊆ PPPP (x), and therefore, H ′x ≼ PPPP (x).
Definition
	
Init
for
is an
(
)
(
)(
(
))
(
)
X
X
On
X
X
X
initial ordinal
∈
∧∀
<°
⇒¬
≅
β β
β
An initial ordinal is an ordinal that is not equinumerous with any smaller 
ordinal.
Exercises
4.66	 a.	 ⊢ (∀α)(α ∈ ω ⇒ Init(α)). (Every finite ordinal is an initial ordinal.)
	
b.	 ⊢ Init(ω).
	
[Hint: Use Proposition 4.26(b) for both parts.]
4.67	 Prove:
	
a.	 For every x, H ′x is an initial ordinal.
	
b.	 For any ordinal α, H ′α is the least initial ordinal greater than α.
	
c.	 For any set x, H ′x = ω if any only if x is infinite and x is Dedekind-
finite. [Hint: Exercise 4.64(c).]
Definition by transfinite induction (Proposition 4.14(b)) yields a function G 
with domain On such that
	
G
G
G
G
G
′∅=
′(
) =
′
′
(
)
′
=
″
′
ω
α
α
α
λ
λ
H
for every
for every limit ordin
∪(
( ))
al λ

272
Introduction to Mathematical Logic
Proposition 4.33
	
a.	⊢ (∀α)(Init(G′α) ∧ ω ≤⚬ G′α ∧ (∀β)(β <⚬ α ⇒ G′β <⚬ G′α))
	
b.	⊢ (∀α)(α ≤⚬ G′α)
	
c.	⊢ (∀β)(ω ≤⚬ β ∧ Init(β) ⇒ (∃α)(G′α = β))
Proof
	
a.	Let X = {α|Init(G′α) ∧ ω ≤⚬ G′α ∧ (∀β)(β <⚬ α ⇒ G′β <⚬ G′α)}.
	
	 We must show that On ⊆ X. To do this, we use the second form of 
transfinite induction (Proposition 4.13(a)). First, ∅ ∈ X, since G′∅ = ω. 
Second, assume α ∈ X. We must show that α′ ∈ X. Since α ∈ X, G′α 
is an infinite initial ordinal such that (∀β)(β <⚬ α ⇒ G′β <⚬ G′α). By 
definition, G′(α′) = H ′(G′α), the least initial ordinal >⚬ G′(α). Assume 
β <⚬ α′. Then β <⚬ α ∨ β = α. If β <⚬ α, then, since α ∈ X, G′β <⚬ G′α <⚬ 
G′(α′). If β = α, then G′β = G′α <⚬ G′(α′). In either case, G′β <⚬ G″(α′), 
Hence, α′ ∈ X. Finally, assume Lim(α) ∧ (∀β)(β <o α ⇒ β ∈ X). We 
must show that α ∈ X. By definition, G′α = ∪ (G′(α)). Now consider 
any β <⚬ α. Since Lim(α), β′ <⚬ α. By assumption, β′ ∈ X, that is, G′(β′) 
is an infinite initial ordinal such that, for any γ <⚬ β′, G′γ <⚬ G′(β′). It 
follows that G″(α) is a nonempty set of ordinals without a maximum 
and, therefore, by Proposition 4.12, G′α, which is ∪ (G″(a)), is a limit 
ordinal that is the least upper bound of G′(α). To conclude that G′α ∈ X, 
we must show that G′α is an initial ordinal. For the sake of contradic-
tion, assume that there exist δ such that δ <⚬ G′(α) and δ ≅ G′α. Since 
G′α is the least upper bound of G″(α), there must exist some μ in G″(α) 
such that δ <⚬ μ. Say, μ = G′β with β <⚬ α. So, δ ⊆ μ = G′β ⊂ G′(β′) ⊆ 
G′α ≅ δ. Since δ ⊂ G′(β′), δ ∈ G′(β′) and δ ≼ G′(β′). On the other hand, 
since G′(β′) ⊆ G′α ≅ δ, G′(β′) ≼ δ. By Bernstein’s theorem, δ ≅ G′(β′), 
contradicting the fact that G′(β′) is an initial ordinal.
	
b.	This follows from Corollary 4.16 and part (a).
	
c.	Assume, for the sake of contradiction, that there is an infinite initial 
ordinal that is not in the range of G, and let σ be the least such. 
By part (b), σ ≤⚬ G′σ and, by part (a), G′σ is an initial ordinal. Since 
σ is not in the range of G, σ <⚬ G′σ. Let μ be the least ordinal such that 
σ <⚬ G′μ. Clearly, μ ≠ ∅, since G′∅ = ω <⚬ σ. Assume first that μ is a suc-
cessor ordinal γ′. Then, by the minimality of μ, G′γ <⚬ σ. Since G′(γ′) = 
H ′(G′γ), G′(γ′) is the least initial ordinal greater than G′γ. However, 
this contradicts the fact that σ is an initial ordinal greater than G′γ 
and σ <⚬ G′(γ′). So, μ must be a limit ordinal. Since G′μ = ⋃ (G″(μ)), 
the least upper bound of G″(μ), and σ <⚬ G′μ, there is some δ <⚬ μ such 
that σ <⚬ G′δ <⚬ G′μ, contradicting the minimality of μ.
Thus, by Proposition 4.33, G is a one–one <⚬-preserving function from On 
onto the class of all infinite initial ordinals.

273
Axiomatic Set Theory
Notation
ωα for G′α
Hence, (a) ω∅ = ω; (b) ωα′ is the least initial ordinal greater than ωα; (c) for a 
limit ordinal λ, ωλ is the initial ordinal that is the least upper bound of the 
set of all ωγ with γ <⚬ λ. Moreover, ωα ≥⚬ α for all α. In addition, any infinite 
ordinal α is equinumerous with a unique initial ordinal ωβ ≤⚬ α, namely, with 
the least ordinal equinumerous with α.
Let us return now to ordinal arithmetic. We already have defined ordi-
nal addition, multiplication and exponentiation (see Examples 1–2 on 
pages 256–257 and Exercise 4.36).
Proposition 4.34
The following wfs are theorems.
	
a.	β +⚬ 1 = β′
	
b.	∅ +⚬ β = β
	
c.	∅ <⚬ β ⇒ (α <⚬ α +⚬ β ∧ β ≤⚬ α +⚬ β)
	
d.	β <⚬ γ ⇒ α +⚬ β <⚬ α +⚬ γ
	
e.	α +⚬ β = α +⚬ δ ⇒ β = δ
	
f.	α <⚬ β ⇒ (∃1 δ)(α +⚬ δ = β)
	
g.	∅≠
⊆
⇒
+
=
+
∈
∈
x
On
x
x
α
β
α
β
β
β


∪
∪(
)
	
h.	∅ <⚬ α ∧ 1 <⚬ β ⇒ α <⚬ α ×⚬ β
	
i.	∅ <⚬ α ∧ ∅ <⚬ β ⇒ α ≤⚬ α ×⚬ β
	
j.	γ <⚬ β ∧ ∅ <⚬ α ⇒ α ×⚬ γ <⚬ α ×⚬ β
	
k.	x
On
x
x
⊆
⇒
×
=
×
∈
∈
α
β
α
β
β
β


∪
∪(
)
Proof
	
a.	β +⚬ 1 = β +⚬(∅′) = (β +⚬ ∅)′ = β′
	
b.	Prove ∅ +⚬ β = β by transfinite induction (Proposition 4.13(a)). Let 
X = {β|∅ +⚬ β = β}. First, ∅ ∈ X, since ∅ +⚬ ∅ = ∅. If ∅ +⚬ γ = γ, then 
∅ +⚬ γ′ = (∅ +⚬ γ)′ = γ′. If Lim(α) and ∅ +⚬ τ = τ for all τ <⚬ α, then 
∅+
=
∅+
=
=
<
<




α
τ
τ
α
τ
α
τ
α
∪
∪
(
)
, since ∪τ
ατ
<
 is the least upper 
bound of the set of all τ <⚬ α, which is α.
	
c.	Let X = {β|∅ <⚬ β ⇒ α <⚬ α +⚬ β}. Prove X = On by transfinite 
induction. Clearly, ∅ ∈ X. If γ ∈ X, then α ≤⚬ α +⚬ γ; hence α ≤⚬ 
α +⚬ γ <⚬(α +⚬ γ)′ = α +⚬ γ′. If Lim(λ) and τ ∈ X for all τ <⚬ λ, then 
α
α
α
α
τ
α
λ
τ
λ
τ
λ
<
′ =
+
≤
+
=
+
<
°
<





1
∪
(
)
. The second part is left as an 
exercise.
	
d.	Let X = {γ|(∀α)(∀β)(β <⚬ γ ⇒ α +⚬ β <⚬ α +⚬ γ)} and use transfinite induc-
tion. Clearly, ∅ ∈ X. Assume γ ∈ X and β <⚬ γ′. Then β <⚬ γ or β = γ. If β 
<⚬ γ then, since γ ∈ X, α +⚬ β <⚬ α +⚬ γ <⚬(α +⚬ γ)′ = α +⚬ γ′. If β = γ, then 

274
Introduction to Mathematical Logic
α +⚬ β = α +⚬ γ <⚬ (α +⚬ γ)′ = α +⚬ γ′. Hence, γ′ ∈ X. Assume Lim(λ) and 
τ ∈ X for all τ <⚬ λ. Assume β <⚬ λ. Then β <⚬ τ for some τ <⚬ λ, since 
Lim(λ). Hence, since τ ∈ X, α +⚬ β <⚬ α +⚬ τ ≤⚬ ∪τ
λ α
τ
α
λ
<°
+
=
+
(
)
.


Hence, λ ∈ X.
	
e.	Assume α +⚬ β = α +⚬ δ. Now, either β <⚬ δ or δ <⚬ β or δ = β. If β <⚬ δ, then 
α +⚬ β <⚬ α +⚬ δ by part (d), and, if δ <⚬ β, then α +⚬ δ <⚬ α +⚬ β by part (d); 
in either case, we get a contradiction with α +⚬ β = α +⚬ δ. Hence, δ = β.
	
f.	The uniqueness follows from part (e). Prove the existence by induc-
tion on β. Let X = {β|α <⚬ β ⇒ (∃1 δ)(α +⚬ δ = β)}. Clearly, ∅ ∈ X. 
Assume γ ∈ X and α <⚬ γ′. Hence, α = γ or α <⚬ γ. If α = γ, then (∃δ)
(α +⚬ δ = γ′), namely, δ = 1. If α <⚬ γ, then, since γ ∈ X, (∃1 δ)(α +⚬ δ = γ). 
Take an ordinal σ such that α +⚬ σ = γ. Then α +⚬ σ′ = (α +⚬ σ)′ = γ′; 
thus, (∃δ)(α +⚬ δ = γ′); hence, γ′ ∈ X. Assume now that Lim(λ) and 
τ ∈ X for all τ <⚬ λ. Assume α <⚬ λ. Now define a function f such 
that, for α <⚬ μ <⚬ λ, f ′μ is the unique ordinal δ such that α +⚬ δ = μ. 
But λ
µ
α
µ
µ
λ
α
µ
λ
=
=
+
′
<
<
<
<
∪
∪




a
f
(
)

. Let ρ
µ
α
µ
λ
=
′
<
<
∪

 (
)
f
. Notice 
that, if α <⚬ μ <⚬ λ, then f′μ <° f′(μ′); hence, ρ is a limit ordinal. Then 
λ
α
µ
ρ α
σ
α
ρ
α
µ
λ
σ
=
+
′
=
+
=
+
<
<
<
∪
∪

o
o
(
)
(
)



f
.
	
g.	Assume ∅ ≠ x ⊆ On. By part (f), there is some δ such that 
α
δ
α
β
β
+
=
+
∈


∪
x(
). We must show that δ
β
β
=
∈
∪
x . If β ∈ x, then α +⚬ 
β ≤ ⚬α + ⚬δ. Hence, β ≤ ⚬δ by part (d). Therefore, δ is an upper bound 
of the set of all β in x. So, ∪β β
δ
∈
≤
x
 . On the other hand, if β ∈ x, then 
α
β
α
β
β
+
≤
+
∈


 ∪
x . Hence, α
δ
α
β
α
β
β
β
+
=
+
≤
+
∈
∈




∪
∪
x
x
(
)
. Hence, 
α
δ
α
β
α
β
β
β
+
=
+
≤
+
∈
∈




∪
∪
x
x
(
)
 and so, by part (d), δ
β
β
≤°
∈
∪
x . 
Therefore, δ
β
β
=
∈
∪
x .
	(h)–(k) are left as exercises.
Proposition 4.35
The following wfs are theorems.
	
a.	β ×o 1 = β ∧ 1 ×o β = β
	
b.	∅ ×o β = ∅
	
c.	(α +o β) +o γ = α +o (β +o γ)
	
d.	(α ×o β) ×o γ = α ×o (β ×o γ)
	
e.	α ×o (β +o γ) = (α ×o β) +o (α ×o γ)
	
f.	exp(β, 1) = β ∧ exp(1, β) = 1
	
g.	exp(exp(β, γ), δ) = exp(β, γ ×o δ)
	
h.	exp(β, γ +o δ) = exp(β, γ) ×o exp(β, δ)*
	
i.	α >o 1 ∧ β <o γ ⇒ exp(α, β) <o exp(α, γ)
*	 In traditional notation, the results of (f)–(h) would be written as β1 = β, 1β = 1, 
(
)
,
.
β
β
β
β
β
γ δ
γ
δ
γ
δ
γ
δ
=
=
×
×
+
o
o
o

275
Axiomatic Set Theory
Proof
	
a.	β ×o 1 = β ×o ∅′ = (β ×o ∅) +o β = ∅ +o β = β, by Proposition 4.34(b). 
Prove 1 ×o β = β by transfinite induction.
	
b.	Prove ∅ ×o β = ∅ by transfinite induction.
	
c.	Let X = {γ|(∀ α)(∀ β)((α +o β) +⚬ γ = α +o(β +o γ))}. ∅ ∈ X, since (α +o 
β) + o∅ = (α + oβ) = α + o(β + o∅). Now assume γ ∈ X. Then (α + oβ) + 
oγ′ = ((α +o β) +o γ)′ = (α +o (β +o γ))′ = α +o (β +o γ)′ = α +o (β +o γ′). 
Hence, γ′ ∈ X. Assume now that Lim(γ) and τ ∈ X for all τ <⚬ λ. Then 
(
)
((
)
)
(
(
))
(
)
α
β
γ
α
β
τ
α
β
τ
α
β
τ
τ
λ
τ
λ
τ
λ
+
+
=
+
+
=
+
+
=
+
+
<
<
<
o
o
o
o
o
o
o
o
o
o
o
∪
∪
∪
,
by Proposition 4.34(g), and this is equal to α +o(β +o λ).
	
(d)–(i) are left as exercises.
We would like to consider for a moment the properties of ordinal addition, 
multiplication and exponentiation when restricted to ω.
Proposition 4.36
Assume α, β, γ are in ω. Then:
	
a.	α +o β ∈ ω
	
b.	α ×o β ∈ ω
	
c.	exp(α, β) ∈ ω
	
d.	α +o β = β +o α
	
e.	α ×o β = β ×o α
	
f.	(α +o β) ×o γ = (α ×o γ) +o (β ×o γ)
	
g.	exp(α ×o β, γ) = exp(α, γ) ×o exp(β, γ)
Proof
	
a.	Use induction up to ω (Proposition 4.13(c)). Let X = {β|β ∈ ω ∧ (∀α)
(α ∈ ω ⇒ α +o β ∈ ω)}. Clearly, ∅ ∈ X. Assume β ∈ X. Consider any α ∈ 
ω. Then α +o β ∈ ω. Hence, α +o β′ = (α +o β)′ ∈ ω by Proposition 4.11(a). 
Thus, β′ ∈ X.
	
b.	and (c) are left as exercises.
	
d.	Lemma. ⊢ α ∈ ω ∧ β ∈ ω ⇒ α′ +o β = α +o β′. Let Y = {β|β ∈ ω ∧ (∀α)
(α ∈ ω ⇒ α′ +o β = α +⚬ β′)}. Clearly, ∅ ∈ Y. Assume β ∈ Y. Consider 
any α ∈ ω. So, α′ +o β = α +o β′. Then α′ +o β′ = (α′ +o β)′ = (α +o β′)′ = 
α +o(β′)′. Hence, β′ ∈ Y.
	
	 To prove (d), let X = {β|β ∈ ω ∧ (∀α)(α ∈ ω ⇒ α +o β = β +o α)}. Then ∅ ∈ X 
and it is easy to prove, using the lemma, that β ∈ X ⇒ β′ ∈ X.
(e)–(g) are left as exercises.
The reader will have noticed that we have not asserted for ordinals cer-
tain well-known laws, such as the commutative laws for addition and 

276
Introduction to Mathematical Logic
multiplication, that hold for other familiar number systems. In fact, these 
laws fail for ordinals, as the following examples show.
Examples
	
1.	(∃α)(∃β)(α +o β ≠ β +o α)
	
1
1
1
+
=
+
=
+
=
′ >
<
o
o
o
o
o
ω
α
ω
ω
ω
ω
α
ω
(
)
∪
	
2.	(∃α)(∃β)(α ×o β ≠ β ×o α)
	
2
2
2
1
1
1
1
×
=
×
=
×
=
×
+
=
×
+
×
=
+
>
<
o
o
o
o
o
o
o
o
o
o
o
ω
α
ω
ω
ω
ω
ω
ω
ω
ω
α
ω
(
)
(
)
(
)
(
)
∪
	
3.	(∃α)(∃β)(∃γ)((α +o β) ×o γ ≠ (α ×o γ) +o(β ×o γ))
	
(
)
(
)
(
)
1
1
2
1
1
+
×
=
×
=
×
+
×
=
+
>
o
o
o
o
o
o
o
o
ω
ω
ω
ω
ω
ω
ω
ω
	
4.	(∃α)(∃β)(∃γ)(exp(α ×o β, γ) ≠ exp(α, γ) ×o exp(β, γ))
	
exp(
, )
exp( , )
exp( , )
exp( , )
exp( , )
2
2
4
4
2
2
×
=
=
=
=
<
<
o
o
o
ω
ω
α
ω
ω
α
α
ω
α
ω
∪
∪
= ω
	
	 So, exp(2, ω) ×oexp(2, ω) = ω ×o ω >o ω.
Given any wf B of formal number theory S (see Chapter 3), we can associ-
ate with B a wf B * of NBG as follows: first, replace every “+” by “+⚬,” every “·” 
by “×⚬,” and every “ f
t
1
1( )” by “t ∪ {t}”*; then, if B is C ⇒ D or ¬C, respectively, 
and we have already found C * and D*, let B* be C * ⇒ D* or ¬ C *, respectively; 
if B is (∀x)C(x), replace it by (∀x)(x ∈ ω ⇒ C *(x)). This completes the definition 
of B *. Now, if x1, …, xn are the free variables (if any) of B, prefix (x1 ∈ ω ∧ … ∧ 
xn ∈ ω) ⇒ to B *, obtaining a wf B #. This amounts to restricting all variables 
*	 In abbreviated notation for S, “ f
t
1
1( )” is written as t′, and in abbreviated notation in NBG, 
“t ∪ {t}” is written as t′. So, no change will take place in these abbreviated notations.

277
Axiomatic Set Theory
to ω and interpreting addition, multiplication and the successor function on 
natural numbers as the corresponding operations on ordinals. Then every 
axiom B of S is transformed into a theorem B # of NBG. (Axioms (S1)–(S3) 
are obviously transformed into theorems, (S4) # is a theorem by Proposition 
4.10(c), and (S5)#–(S8)# are properties of ordinal addition and multiplica-
tion.) Now, for any wf B of S, B # is predicative. Hence, by Proposition 4.4, all 
instances of (S9)# are provable by Proposition 4.13(c). (In fact, assume B #(∅) ∧ 
(∀x)(x ∈ ω ⇒ (B #(x) ⇒ B#(x′)))). Let X = {y|y ∈ ω ∧ B #(y)}. Then, by Proposition 
4.13(c), (∀x)(x ∈ ω ⇒ B#(x)).) Applications of modus ponens are easily seen to 
be preserved under the transformation of B into B #. As for the generaliza-
tion rule, consider a wf B(x) and assume that B #(x) is provable in NBG. But 
B #(x) is of the form x ∈ ω ∧ y1 ∈ ω ∧…∧ yn ∈ ω ⇒ B*(x). Hence, y1 ∈ ω ∧…∧ yn 
∈ ω ⇒ (∀x)(x ∈ ω ⇒ B*(x)) is provable in NBG. But this wf is just ((∀x)B(x))#. 
Hence, application of Gen leads from theorems to theorems. Therefore, for 
every theorem B of S, B # is a theorem of NBG, and we can translate into 
NBG all the theorems of S proved in Chapter 3.
One can check that the number-theoretic function h such that, if x is the 
Gödel number of a wf B of S, then h(x) is the Gödel number of B #, and if x is 
not the Gödel number of a wf of S, then h(x) = 0, is recursive (in fact, primi-
tive recursive). Let K be any consistent extension of NBG. As we saw above, 
if x is the Gödel number of a theorem of S, then h(x) is the Gödel number of 
a theorem of NBG and, hence, also a theorem of K. Let S(K) be the extension 
of S obtained by taking as axioms all wfs B of the language of S such that B # 
is a theorem of K. Since K is consistent, S(K) must be consistent. Therefore, 
since S is essentially recursively undecidable (by Corollary 3.46), S(K) is 
recursively undecidable. Now, assume K is recursively decidable; that is, the 
set TK of Gödel numbers of theorems of K is recursive. But C
x
C
h x
T
T
S K
K
(
)( )
( ( ))
=
 
for any x, where CTS K
(
) and CTK are the characteristic functions of TS(K) and TK. 
Hence, TS(K) would be recursive, contradicting the recursive undecidability 
of S(K). Therefore, K is recursively undecidable, and thus, if NBG is consis-
tent, NBG is essentially recursively undecidable. Recursive undecidability of 
a recursively axiomatizable theory implies incompleteness (see Proposition 
3.47). Hence, NBG is also essentially incomplete. Thus, we have the following 
result: if NBG is consistent, then NBG is essentially recursively undecidable and 
essentially incomplete. (It is possible to prove this result directly in the same 
way that the corresponding result was proved for S in Chapter 3.)
Exercise
4.68	 Prove that a predicate calculus with a single binary predicate letter is 
recursively undecidable. [Hint: Use Proposition 3.49 and the fact that 
NBG has a finite number of proper axioms.]
There are a few facts about the “cardinal arithmetic” of ordinal numbers 
that we would like to deal with now. By “cardinal arithmetic” we mean 

278
Introduction to Mathematical Logic
properties connected with the operations of union (⋃), Cartesian product 
(×) and XY, as opposed to the properties of +⚬, ×⚬, and exp. Observe that × is 
distinct from ×⚬; also notice that ordinal exponentiation exp(α, β) has nothing 
to do with XY, the class of all functions from Y into X. From Example 4 on 
page 276 we see that exp(2, ω) is ω, whereas, from Cantor’s theorem, ω ≺ 2ω, 
where 2ω is the set of functions from ω into 2.
Proposition 4.37
	
a.	⊢ ω × ω ≅ ω
	
b.	⊢ 2 ≼ X ∧ 2 ≼ Y ⇒ X ∪ Y ≼ X × Y
	
c.	⊢ Den(x) ∧ Den(y) ⇒ Den(x ∪ y)
Proof
	
a.	Let f be a function with domain ω such that, if α ∈ ω, then f′α = 〈α, ∅〉. 
Then f is a one–one function from ω into a subset of ω × ω. Hence, ω 
≼ ω × ω. Conversely, let g be a function with domain ω × ω such that, 
for any 〈α, β〉 in ω × ω, g′〈α, β〉 = exp(2, α) ×⚬ exp(3, β). We leave it as 
an exercise to show that g is a one–one function from ω × ω into ω. 
Hence, ω × ω ≼ ω. So, by Bernstein’s theorem, ω × ω ≅ ω.
	
b.	Assume a1 ∈ X, a2 ∈ X, a1 ≠ a2, b1 ∈ Y, b2 ∈ Y, b1 ≠ b2. Define
	
′ =
〈
〉
∈
〈
〉
∈
−
≠
〈
〉
=
∈
−

f x
a b
x
X
a x
x
Y
X
x
b
a b
x
b
x
Y
X
1
1
1
1
2
2
1
,
,
,
if
if
and
if
and


	
	 Then f is a one–one function with domain X ∪ Y and range a subset 
of X × Y. Hence, X ∪ Y ≼ X × Y.
	
c.	Assume Den(x) and Den(y). Hence, each of x and y contains at least 
two elements. Then, by part (b), x ∪ y ≼ x × y. But x ≅ ω and y ≅ ω. 
Hence, x × y ≅ ω × ω. Therefore, x ∪ y ≼ ω × ω. By Proposition 4.30, 
either Den(x ∪ y) or Fin(x ∪ y). But x ⊆ x ∪ y and Den(x); hence, 
¬Fin(x ∪ y).
For the further study of ordinal addition and multiplication, it is quite useful 
to obtain concrete interpretations of these operations.
Proposition 4.38 (Addition)
Assume that 〈r, x〉 is similar to 〈Eα, α〉, that 〈s, y〉 is similar to 〈Eβ, β〉, and that 
x ∩ y = ∅. Let t be the relation on x ∪ y consisting of all 〈u, v〉 such that 

279
Axiomatic Set Theory
〈u, v〉 ∈ x × y or u ∈ x ∧ v ∈ x ∧ 〈u, v〉 ∈ r or u ∈ y ∧ v ∈ y ∧ 〈u, v〉 ∈ s (i.e., t is 
the same as r in the set x, the same as s in the set y, and every element of x 
t-precedes every element of y). Then t is a well-ordering of x ∪ y, and 〈t, x ∪ y〉 
is similar to 〈
+
〉
+
Eα
β α
β
o
o
,
.
Proof
First, it is simple to verify that t is a well-ordering of x ∪ y, since r is a well-
ordering of x and s is a well-ordering of y. To show that 〈t, x ∪ y〉 is similar 
to 〈
+
〉
+
Eα
β α
β
o
o
,
, use transfinite induction on β. For β = ∅, y = ∅. Hence, t = r, 
x ∪ y = x, and α +⚬ β = α. So, 〈t, α ∪ β〉 is similar to 〈
+
〉
+
Eα
β α
β
o
o
,
. Assume the 
proposition for γ and let β = γ′. Since 〈s, y〉 is similar to 〈Eβ, β〉, we have a 
function f with domain y and range β such that, for any u, v in y, 〈u, v〉 ∈ s if 
and only if f′u ∈ f′v. Let b
f
=
′
( )
⌣
γ, let y1 = y −{b} and let s1 = s ∩ (y1 × y1). Since 
b is the s-­maximum of y, it follows easily that s1 well-orders y1. Also, y1 f is 
a similarity mapping of y1 onto γ. Let t1 = t ∩ ((x ∪ y1) × (x ∪ y1)). By induc-
tive hypothesis, 〈t1, x ∪ y1〉 is similar to 〈
+
〉
+
Eα
γ α
γ
o
o
,
, by means of some 
similarity mapping ɡ with domain x ∪ y1 and range α +⚬ γ. Extend ɡ to ɡ1 = 
ɡ ∪ {〈b, α +⚬ γ〉}, which is a similarity mapping of x ∪ y onto (α +⚬ γ)′ = α +⚬ 
γ′ = α +⚬ β. Finally, if Lim(β) and our proposition holds for all τ <⚬ β, assume 
that f is a similarity mapping of y onto β. Now, for each τ <⚬ β, let y
f
τ
τ
=
′
( ) ,
⌣
 
sτ = s ∩ (yτ × yτ), and tτ = t ∩ ((x ∪ yτ) × (x ∪ yτ)). By inductive hypothesis 
and Corollary 4.18(b), there is a unique similarity mapping ɡτ of 〈tτ, x ∪ yτ〉 
with 〈
+
〉
+
Eα
τ α
τ
o
o
,
; also, if τ1 <⚬ τ2 <⚬ β, then, since (
)
x
y
∪
τ1   gτ2 is a similar-
ity mapping of 〈
∪
〉
t
x
y
τ
τ
1
1
,
 with 〈
+
〉
+
Eα
τ α
τ
o
o
1
1
,
 and, by the uniqueness of 
gτ1, (
)
x
y
∪
τ1   g
g
τ
τ
2
1
=
; that is, gτ2 is an extension of gτ1. Hence, if g
g
=
<
∪τ
β
τ
o
 
and λ
α
τ
τ
β
=
+
<
∪
o
o
(
), then ɡ is a similarity mapping of 〈
∪
〉
<
t
x
y
,
)
(
∪τ
β
τ
o
 with 
〈
〉
Eλ λ
,
. But, ∪τ
β
τ
<
∪
=
∪
o (
)
x
y
x
y and ∪τ
β α
τ
α
β
<
+
=
+
o
o
o
(
)
. This completes the 
transfinite induction.
Proposition 4.39 (Multiplication)
Assume that 〈r, x〉 is similar to 〈Eα, α〉 and that 〈s, y〉 is similar to 〈Eβ, β〉. Let 
the relation t on x × y consist of all pairs 〈〈u, v〉, 〈w, z〉〉 such that u and w are 
in x and v and z are in y, and either 〈v, z〉 ∈ s or (v = z ∧ 〈u, w〉 ∈ r). Then t is a 
well-ordering of x × y and 〈t, x × y〉 is similar to 〈
×
〉
×
Eα
β α
β
o
o
,
.*
Proof
This is left as an exercise. Proceed as in the proof of Proposition 4.38.
*	 The ordering t is called an inverse lexicographical ordering because it orders pairs as follows: 
first, according to the size of their second components and then, if their second components 
are equal, according to the size of their first components.

280
Introduction to Mathematical Logic
Examples
	
1.	2 ×o ω = ω. Let 〈r, x〉 = 〈E2, 2〉 and 〈s, y〉 = 〈Eω, ω〉. Then the Cartesian 
product 2 × ω is well-ordered as follows: 〈∅, ∅〉, 〈1, ∅〉, 〈∅, 1〉, 〈1, 1〉, 
〈∅, 2〉, 〈1, 2〉, …, 〈∅, n〉, 〈1, n〉, 〈∅, n + 1〉, 〈1, n + 1〉, …
	
2.	By Proposition 4.34(a), 2 = 1′ = 1 +o 1. Then by Proposition 4.35(e,a), 
ω ×o 2 = (ω ×o 1) +o(ω ×o 1) = ω +o ω. Let 〈r, x〉 = 〈Eω, ω〉 and 〈s, y〉 = 〈E2, 2〉. 
Then the Cartesian product ω × 2 is well-ordered as follows: 〈∅, ∅〉, 
〈1, ∅〉, 〈2, ∅〉, …, 〈∅, 1〉, 〈1, 1〉, 〈2, 1〉, …
Proposition 4.40
For all α, ωα × ωα ≅ ωα.
Proof
(Sierpinski, 1958) Assume this is false and let α be the least ordinal such that 
ωα × ωα ≅ ωα is false. Then ωβ × ωβ ≅ ωβ for all β <o α. By Proposition 4.37(a), 
α >o ∅. Now let P = ωα × ωα and, for β <o ωα, let Pβ = {〈γ, δ〉|γ +o δ = β}. First 
we wish to show that P
P
=
<
∪β
ω
β
α
o
. Now, if γ +o δ = β <o ωα, then γ ≤o β <o 
ωα and δ ≤o β <o ωα; hence, 〈γ, δ〉 ∈ ωα × ωα = P. Thus, ∪β
ω
β
α
<
⊆
o
P
P. To show 
that P
P
⊆
<
∪β
ω
β
α
o
, it suffices to show that, if γ <o ωα and δ <o ωα, then γ +o δ 
<o ωα. This is clear when γ or δ is finite. Hence, we may assume that γ and 
δ are equinumerous with initial ordinals ωσ ≤o γ and ωρ ≤o δ, respectively. 
Let ζ be the larger of σ and ρ. Since γ <o ωα and δ <o ωα, then ωζ <o ωα. Hence, 
by the minimality of α, ωζ × ωζ ≅ ωζ. Let x = γ × {∅} and y = δ × {1}. Then, by 
Proposition 4.38, x ∪ y ≅ γ +o δ. Since γ ≅ ωσ and δ ≅ ωρ, x ≅ ωσ × {∅} and y ≅ 
ωρ × {1}. Hence, since x ∩ y = ∅, x ∪ y ≅ (ωσ × {∅}) ∪ (ωρ × {1}). But, by Proposition 
4.37(b), (ωσ × {∅}) ∪ (ωρ × {1}) ≼ (ωσ × {∅}) × (ωρ × 1}) ≅ ωσ × ωρ ≼ ωζ × ωζ ≅ ωζ. 
Hence, γ +o δ ≼ ωζ <o ωα. It follows that γ +o δ <o ωα. (If ωα ≤o γ +o δ, then ωα ≼ 
ωζ. Since ωζ <o ωα, ωζ ≼ ωα. So, by Bernstein’s theorem, ωα ≅ ωζ, contradicting 
the fact that ωα is an initial ordinal.) Thus, P
P
=
<
∪β
ω
β
α
o
. Consider Pβ for any 
β <o ωα. By Proposition 4.34(f), for each γ ≤o β, there is exactly one ordinal 
δ such that γ +o δ = β. Hence, there is a similarity mapping from β′ onto Pβ, 
where Pβ is ordered according to the size of the first component γ of the pairs 
〈γ, δ〉. Define the following relation R on P. For any γ <o ωα, δ <o ωα, μ <o ωα, ν 
<o ωα, 〈〈γ, δ〉, 〈μ, ν〉〉 ∈ R if and only if either γ +o δ <o μ +o ν or (γ +o δ = μ +o ν ∧ 
γ <o μ). Thus, if β1 <o β2 <0 ωα, then the pairs in Pβ1 R-precede the pairs in Pβ2, 
and, within each Pβ, the pairs are R-ordered according to the size of their 
first components. One easily verifies that R well-orders P. Since P = ωα × ωα, 
it suffices now to show that 〈R, P〉 is similar to 〈
〉
Eω
α
α ω
,
. By Proposition 4.19, 
〈R, P〉 is similar to some 〈Eξ, ξ〉, where ξ is an ordinal. Hence, P ≅ ξ. Assume 
that ξ >o ωα. There is a similarity mapping f between 〈Eξ, ξ〉 and 〈R, P〉. Let 
b = f′(ωα); then b is an ordered pair 〈γ, δ〉 with γ <o ωα, δ <o ωα, and ωα  f is a 

281
Axiomatic Set Theory
similarity mapping between 〈
〉
Eω
α
α ω
,
 and the R-segment Y = SegR(P, 〈γ, δ〉) of 
P determined by 〈γ, δ〉. Then Y ≅ ωα. If we let β = γ +o δ, then, if 〈σ, ρ〉 ∈ Y, we 
have σ +o ρ ≤o γ +o δ = β; hence, σ ≤o β and ρ ≤o β. Therefore, Y ⊆ β′ × β′. But 
β′ <o ωα. Since β is obviously not finite, β′ ≅ ωμ with μ <o α. By the minimality 
of α, ωμ × ωμ ≅ ωμ. So, ωα ≅ Y ≼ ωμ, contradicting ωμ ≺ ωα. Thus, ξ ≤o ωα and, 
therefore, P ≼ ωα. Let h be the function with domain ωα such that h′β = 〈β, ∅〉 
for every β <o ωα. Then h is a one–one correspondence between ωα and the 
subset ωα × {∅} of P and, therefore, ωα ≼ P. By Bernstein’s theorem, ωα ≅ P, 
contradicting the definition of α. Hence, ωβ × ωβ ≅ ωβ for all β.
Corollary 4.41
If x ≅ ωα and y ≅ ωβ, and if γ is the maximum of α and β, then x × y ≅ ωγ and x 
∪ y ≅ ωγ. In particular, ωα × ωβ ≅ ωγ.
Proof
By Propositions 4.40 and 4.37(b), ωγ ≼ x ∪ y ≼ x × y ≅ ωα × ωβ ≼ ωγ × ωγ ≅ ωγ. 
Hence, by Bernstein’s theorem, x × y ≅ ωγ and x ∪ y ≅ ωγ.
Exercises
4.69	 Prove that the following are theorems of NBG.
	
a.	 x ≼ ωα ⇒ x ∪ ωα ≅ ωα
	
b.	 ωα +c ωα ≅ ωα
	
c.	 ∅ ≠ x ≼ ωα ⇒ x × ωα ≅ ωα
	
d.	 ∅ ≠ x ≺ ω ⇒ (ωα )x ≅ ωα
4.70	 Prove that the following are theorems of NBG
	
a.	 P (ωα) × P (ωα) ≅ P (ωα)
	
b.	 x ≼ P (ωα) ⇒ x ∪ P (ωα) ≅ P (ωα)
	
c.	 ∅ ≠ x ≼ P (ωα) ⇒ x × P (ωα) ≅ P (ωα)
	
d.	 ∅ ≠ x ≼ ωα ⇒ (P (ωα))x ≅ P (ωα)
	
e.	 1 ≺ x ≼ ωα ⇒ xωα ≅ (ωα )ωα ≅ (P  (ωα))ωα ≅ P  (ωα).
4.71	 Assume y ≠ ∅ ∧ y ≅ y +c y. (This assumption holds for y = ωα by Corollary 
4.41 and for y = P (ωα ) by Exercise 4.70(b). It will turn out to hold for all 
infinite sets y if the axiom of choice holds.) Prove the following proper-
ties of y.
	
a.	 Inf(y)
	
b.	 y ≅ 1 +cy
	
c.	 (∃u)(∃v)(y = u ∪ v ∧ u ∩ v = ∅ ∧ u ≅ y ∧ v ≅ y)

282
Introduction to Mathematical Logic
	
d.	 {z|z ⊆ y ∧ z ≅ y} ≅ P  (y)
	
e.	 {z|z ⊆ y ∧ Inf(z)} ≅ P  (y)
	
f.	 (
)(
(
)(
))
∃
≅
∧∀
∈
⇒
≠
f
y
y
u u
y
f u
u
f
‘
4.72	 Assume y ≅ y × y ∧ 1 ≺ y. (This holds when y = ωα by Proposition 4.40 
and for y = P (ωα) by Exercise 4.70(a). It is true for all infinite sets y if the 
axiom of choice holds.) Prove the following properties of y.
	
a.	 y ≅ y +c y
	
b.D	Let Perm(y) denote { |
}
f
y
y
f≅
. Then Perm(y) ≅ P  (y).
4.5  The Axiom of Choice: The Axiom of Regularity
The axiom of choice is one of the most celebrated and contested statements 
of the theory of sets. We shall state it in the next proposition and show its 
equivalence to several other important assertions.
Proposition 4.42
The following wfs are equivalent.
	
a.	Axiom of choice (AC). For any set x, there is a function f such that, for 
any nonempty subset y of x, f′y ∈ y. (f is called a choice function for x.)
	
b.	Multiplicative axiom (Mult). If x is a set of pairwise disjoint nonempty 
sets, then there is a set y (called a choice set for x) such that y contains 
exactly one element of each set in x:
	
(
)(
(
)(
))
(
)(
)(
(
)(
∀
∈
⇒
≠∅∧∀
∈
∧
≠
⇒
∩
= ∅
⇒
∃
∀
∈
⇒∃
∈
∩
u u
x
u
v v
x
v
u
v
u
y
u u
x
u
y
1ω ω
))
	
c.	Well-ordering principle (WO). Every set can be well-ordered: (∀x)(∃y)
(y We x).
	
d.	Trichotomy (Trich). (∀x)(∀y)(x ≼ y ∨ y ≼ x)*
	
e.	Zorn’s Lemma (Zorn). Any nonempty partially ordered set x, in which 
every chain (i.e., every totally ordered subset) has an upper bound, 
has a maximal element:
	
(
)(
)([(
)
(
)(
(
)(
(
)(
∀
∀
∧∀
⊆
∧
⇒
∃
∈
∧∀
∈
⇒
=
∨〈
x
y
y
x
u u
x
y
u
v v
x
w w
u
w
v
w
Part
Tot
,
)))]
(
)(
(
)(
,
)))
v
y
v v
x
w w
x
v w
y
〉∈
⇒
∃
∈
∧∀
∈
⇒〈
〉∉
*	 This is equivalent to (∀x)(∀y)(x ≺ y ∨ x ≅ y ∨ y ≺ x), which explains the name “trichotomy” for 
this principle.

283
Axiomatic Set Theory
Proof
	
1.	⊢ WO ⇒ Trich. Given sets x and y, then, by WO, x and y can be well-
ordered. Hence, by Proposition 4.19, x ≅ α and y ≅ β for some ordinals 
α and β. But, by Exercise 4.52, α ≼ β or β ≼ α. Therefore, x ≼ y or y ≼ x.
	
2.	⊢ Trich ⇒ WO. Given a set x, Hartogs’ theorem yields an ordinal α 
such that α is not equinumerous with any subset of x, that is, α ≼ x is 
false. So, by Trich, x ≼ α, that is, x is equinumerous with some subset 
y of α. Hence, by translating the well-ordering Ey of y to x, x can be 
well-ordered.
	
3.	⊢ WO ⇒ Mult. Let x be a set of nonempty pairwise disjoint sets. By 
WO, there is a well-ordering R of ⋃ x. Hence, there is a function f 
with domain x such that, for any u in x, f′u is the R-least element of u. 
(Notice that u is a subset of ⋃ x.)
	
4.	⊢ Mult ⇒ AC. For any set x, we can define a one–one function g such 
that, for each nonempty subset u of x, ɡ′u = u × {u}. Let x1 be the range 
of ɡ. Then x1 is a set of nonempty pairwise disjoint sets. Hence, by 
Mult, there is a choice set y for x1. Therefore, if u is a nonempty subset 
of x, then u × {u} is in x1, and so y contains exactly one element 〈v, u〉 in 
u × {u}. Then the function f such that f′u = v is a choice function for x.
	
5.	⊢ AC ⇒ Zorn. Let y partially order a nonempty set x such that 
every y-chain in x has an upper bound in x. By AC, there is a choice 
function f for x. Let b be any element of x. By transfinite induction 
(Proposition 4.14(a)), there is a function F such that F′∅ = b and, for 
any α >⚬ ∅, F′α is f′u, where u is the set of y-upper bounds v in x of 
F″α such that v ∉ F″α. Let β be the least ordinal such that the set of 
y-upper bounds in x of F″β that are not in F″β is empty. (There must 
be such an ordinal. Otherwise, F would be a one–one function with 
domain On and range a subset of x, which, by the replacement axiom 
R, would imply that On is a set.) Let ɡ = β   F. Then it is easy to check 
that g is one-one and, if α <⚬ γ <⚬ β, 〈ɡ′α, ɡ′γ 〉 ∈ y. Hence, ɡ″β is a 
y-chain in x; by hypothesis, there is a y-upper bound w of ɡ″β. Since 
the set of y-upper bounds of F″β(= g″β) that are not in g″β is empty, 
w ∈ ɡ″β and w is the only y-upper bound of g″β (because a set can 
contain at most one of its y-upper bounds). Hence, w is a y-maximal 
element. (If 〈w, z〉 ∈ y and z ∈ x, then z is a y-upper bound of ɡ″β, 
which is impossible.)
	
6.	⊢ Zorn ⇒ WO. Given a set z, let X be the class of all one–one func-
tions with domain an ordinal and range a subset of z. By Hartogs’ 
theorem, X is a set. Clearly, ∅ ∈ X. X is partially ordered by the 
proper inclusion relation ⊂. Given any chain of functions in X, of 
any two, one is an extension of the other. Hence, the union of all the 
functions in the chain is also a one–one function from an ordinal 
into z, which is a ⊂-upper bound of the chain. Hence, by Zorn, X has 
a maximal element g, which is a one–one function from an ordinal 

284
Introduction to Mathematical Logic
α into z. Assume z − ɡ″α ≠ ∅ and let b ∈ z − ɡ″α. Let f = ɡ ∪ {< α, β >}. 
Then f ∈ X and ɡ ⊂ f, contradicting the maximality of g. So, ɡ″α = z. 
Thus, α ≅
g z. By means of ɡ, we can transfer the well-ordering Eα of α 
to a well-ordering of z.
Exercises
4.73	 Show that each of the following is equivalent to the axiom of choice.
	
a.	 Any set x is equinumerous with some ordinal.
	
b.	 Special case of Zorn’s lemma. If x is a nonempty set and if the union 
of each nonempty ⊂ -chain in x is also in x, then x has a ⊂ -maximal 
element.
	
c.	 Hausdorff maximal principle. If x is a set, then every ⊂ -chain in x is a 
subset of some maximal ⊂ -chain in x.
	
d.	 Teichmüller–Tukey Lemma. Any set of finite character has a ⊂ -maxi-
mal element. (A nonempty set x is said to be of finite character if and 
only if: (i) every finite subset of an element of x is also an element of x; 
and (ii) if every finite subset of a set y is a member of x, then y ∈ x.)
	
e.	 (∀x)(Rel(x) ⇒ (∃y)(Fnc(y) ∧ D(x) = D(y) ∧ y ⊆ x))
	
f.	 For any nonempty sets x and y, either there is a function with 
domain x and range y or there is a function with domain y and 
range x.
4.74	 Show that the following finite axiom of choice is provable in NBG: if x 
is a finite set of nonempty disjoint sets, then there is a choice set y for x. 
[Hint: Assume x ≅ α where α ∈ ω. Use induction on α.]
Proposition 4.43
The following are consequences of the axiom of choice.
	
a.	Any infinite set has a denumerable subset.
	
b.	An infinite set is Dedekind-infinite.
	
c.	If x is a denumberable set whose elements are denumerable sets, 
then ⋃ x is denumerable.
Proof
Assume AC.
	
a.	Let x be an infinite set. By Exercise 4.73(a), x is equinumerous with 
some ordinal α. Since x is infinite, so is α. Hence, ω ≤o α; therefore, 
ω is equinumerous with some subset of x.

285
Axiomatic Set Theory
	
b.	The proof is by part (a) and Exercise 4.64(c).
	
c.	Assume x is a denumerable set of denumerable sets. Let f be a func-
tion assigning to each u in x the set of all one–one correspondences 
between u and ω. Let z be the union of the range of f. Then, by AC 
applied to z, there is a function ɡ such that ɡ′v ∈ v for each non-
empty v ⊆ z. In particular, if u ∈ X, then ɡ′(f′u) is a one–one cor-
respondence between u and ω. Let h be a one–one correspondence 
between ω and x. Define a function F on ⋃ x as follows: let y ∈ ⋃ x 
and let n be the smallest element of ω such that y ∈ h′n. Now, h′n ∈ x; 
so, ɡ′(f′(h′n)) is a one–one correspondence between h′n and ω. Define 
F′y = 〈n, (ɡ′(f′(h′n)))′y〉. Then F is a one–one function with domain ⋃ x 
and range a subset of ω × ω. Hence, ⋃ x ≤ ω × ω. But ω × ω ≅ ω and, 
therefore, ⋃ x ≤ ω. If v ∈ x, then v ⊆ ⋃ x and v ≅ ω. Hence, ω ≤  ⋃ x. 
By Bernstein’s theorem, ⋃ x ≅ ω.
Exercises
4.75	 If x is a set, the Cartesian product Πu∈xu is the set of functions f with 
domain x such that f′u ∈ u for all u ∈ x. Show that AC is equivalent to 
the proposition that the Cartesian product of any set x of nonempty sets 
is also nonempty.
4.76	 Show that AC implies that any partial ordering of a set x is included in 
a total ordering of x.
4.77	 Prove that the following is a consequence of AC: for any ordinal α, if x is 
a set such that x ≼ ωα and such that (∀u)(u ∈ x ⇒ u ≼ ωα), then ⋃ x ≤ ωα. 
[Hint: The proof is like that of Proposition 4.43(c).]
4.78	 a.	 Prove y ≼ x ⇒ (∃f)(Fnc(f) ∧D(f) = x ∧R(f) = y).
	
b.	 Prove that AC implies the converse of part (a).
4.79D	a.	 Prove (u +c v)2 ≅ u2 +c (2 × (u × v)) +c v2.
	
b.	 Assume y is a well-ordered set such that x × y ≅ x +c y and ¬(y ≼ x). 
Prove that x ≼ y.
	
c.	 Assume y ≅ y × y for all infinite sets y. Prove that, if Inf(x) and z = H  ′x, 
then x × z ≅ x +c z.
	
d.	 Prove that AC is equivalent to (∀y)(Inf(y) ⇒ y ≅ y × y) (Tarski, 1923).
A stronger form of the axiom of choice is the following sentence: (∃X)(Fnc(X) 
∧ (∀u)(u ≠ ∅ ⇒ X′u ∈ u)). (There is a universal choice function (UCF)—i.e., a 
function that assigns to every nonempty set u an element of u.) UCF obvi-
ously implies AC, but W.B. Easton proved in 1964 that UCF is not provable 
from AC if NBG is consistent. However, Felgner (1971b) proved that, for any 
sentence B in which all quantifiers are restricted to sets, if B is provable from 
NBG + (UCF), then B is provable in NBG + (AC). (See Felgner (1976) for a 
thorough treatment of the relations between UCF and AC.)

286
Introduction to Mathematical Logic
The theory of cardinal numbers can be simplified if we assume AC; for AC 
implies that every set is equinumerous with some ordinal and, therefore, 
that every set x is equinumerous with a unique initial ordinal, which can 
be designated as the cardinal number of x. Thus, the cardinal numbers would 
be identified with the initial ordinals. To conform with the standard nota-
tion for ordinals, we let ℵα stand for ωα. Proposition 4.40 and Corollary 4.41 
establish some of the basic properties of addition and multiplication of 
cardinal numbers.
The status of the axiom of choice has become less controversial in recent 
years. To most mathematicians it seems quite plausible, and it has so many 
important applications in practically all branches of mathematics that not to 
accept it would seem to be a willful hobbling of the practicing mathemati-
cian. We shall discuss its consistency and independence later in this section.
Another hypothesis that has been proposed as a basic principle of set the-
ory is the so-called regularity axiom (Reg):
	
(
)(
(
)(
))
∀
≠∅⇒∃
∈
∧
∩
= ∅
X X
y y
X
y
X
(Every nonempty class X contains a member that is disjoint from X.)
Proposition 4.44
	
a.	The regularity axiom implies the Fundierungsaxiom:
	
¬ ∃
(
)
( ) ∧
( ) =
∧∀
(
)
∈
⇒
′( )∈′
(
))
′
f
f
f
u
u
f
u
f u
Fnc
D
ω
ω
	
	 that is, there is no infinitely descending ∈-sequence x0 ∋ x1 ∋ x2 ∋…
	
b.	If we assume AC, then the Fundierungsaxiom implies the regularity 
axiom.
	
c.	The regularity axiom implies the nonexistence of finite ∈-cycles—
that is, of functions f on a nonzero finite ordinal α such that f′∅ ∈ f′1 
∈ … ∈ f′α ∈ f′∅. In particular, it implies that there is no set y such that 
y ∈ y.
Proof
	
a.	Assume Fnc(f) ∧D(f) = ω ∧ (∀u)(u ∈ ω ⇒ f′(u′) ∈ f′u). Let z = f″ω. By 
(Reg), there is some element y in z such that y ∩ z = ∅. Since y ∈ z, 
there is a finite ordinal α such that y = f′α. Then f′(α′) ∈ y ∩ z, contra-
dicting y ∩ z = ∅.
	
b.	First, we define the transitive closure TC(u) of a set u. Intuitively, we 
want TC(u) to be the smallest transitive set that contains u. Define by 
induction a function g on ω such that ɡ′∅ = {u} and ɡ′(α′) = ⋃ (ɡ′α) 

287
Axiomatic Set Theory
for each α in ω. Thus, ɡ′1 = u, ɡ′2 = ⋃ u, ɡ′3 = ⋃ (⋃ u), and so on. Let 
TC(u) = ⋃ (ɡ″ω) be called the transitive closure of u. For any u, TC(u) 
is transitive; that is, (∀v)(v ∈ TC(u) ⇒ v ⊆ TC(u)). Now, assume AC and 
the Fundierungsaxiom; also, assume X ≠ ∅ but there is no y in X 
such that y ∩ X = ∅. Let b be some element of X; hence, b ∩ X ≠ ∅. Let 
c = TC(b) ∩ X. By AC, let h be a choice function for c. Define a func-
tion f on ω such that f′∅ = b and, for any α in ω, f′(α′) = h′((f′α) ∩ X). 
It follows easily that, for each α in ω, f′(α′) ∈ f′α, contradicting the 
Fundierungsaxiom. (The proof can be summarized as follows: we 
start with an element b of X; then, using h, we pick an element f′1 in 
b ∩ X; since, by assumption, f′1 and X cannot be disjoint, we pick an 
element f′2 in f′1 ∩ X, and so on.)
	
c.	Assume given a finite ∈-cycle: f′∅ ∈ f′1 ∈ … ∈ f′n ∈ f′∅. Let X be the 
range of f:{f′∅, f′1, …, f′n}. By (Reg), there is some f′j in X such that f′j 
∩ X = ∅. But each element of X has an element in common with X.*
Exercises
4.80	 If z is a transitive set such that u ∈ z, prove that TC(u) ⊆ z.
4.81	 By the principle of dependent choices (PDC) we mean the following: if 
r is a nonempty relation whose range is a subset of its domain, then 
there is a function f: ω → D(r) such that (∀u)(u ∈ ω ⇒ 〈f′u, f′(u′)〉 ∈ r) 
(Mostowski, 1948).
	
a.	 Prove ⊢ AC ⇒ PDC.
	
b.	 Show that PDC implies the denumerable axiom of choice (DAC):
Den( )
(
)(
)
(
)(
:
(
)(
))
x
u u x
u
f
f
x
x
u u x
f u u
∧∀
∈⇒
≠∅⇒∃
→
∧∀
∈⇒′ ∈
∪
	
c.	 Prove ⊢ PDC ⇒ (∀x)(Inf(x) ⇒ ω ≼ x) (Hence, by Exercise 4.64(c), PDC 
implies that a set is infinite if and only if it is Dedekind-infinite.)
	
d.	 Prove that the conjunction of PDC and the Fundierungsaxiom 
implies (Reg).
Let us define by transfinite induction the following function Ψ with domain On:
	
Ψ
Ψ
Ψ
Ψ
Ψ
′∅= ∅
′(
) =
′
(
)
( ) ⇒
′
=
′
′
<
α
α
λ
λ
β
β
λ
P
Lim
o
∪
*	 The use of AC in deriving (Reg) from the Fundierungsaxiom is necessary. Mendelson (1958) 
proved that, if NBG is consistent and if we add the Fundierungsaxiom as an axiom, then 
(Reg) is not provable in this enlarged theory.

288
Introduction to Mathematical Logic
Let H stand for ∪ (Ψ″On), that is, H consists of all members of sets of the form 
Ψ′α. Let Hβ stand for Ψ′(β′). Thus, Hβ = P (Ψ′β) and Hβ′ = P (Ψ′(β′)) = P (Hβ). In 
particular, H∅ = P (Ψ′∅) = P (∅) = {∅}, H1 = P (H∅) = P ({∅}) = {∅, {∅}}, and H2 = P 
(H1) = P ({∅, {∅}}) = {∅, {∅}, {{∅}}, {∅, {∅}}}.
Define a function ρ on H such that, for any x in H, ρ′x is the least ordinal α 
such that x ∈ Ψ′α. ρ′x is called the rank of x. Observe that ρ′x must be a suc-
cessor ordinal. (In fact, there are no sets of rank ∅, since Ψ′∅ = ∅. If λ is a limit 
ordinal, every set in Ψ′λ already was a member of Ψ′β for some β <⚬ λ.) As 
examples, note that ρ′∅ = 1, ρ′{∅} = 1, ρ′{∅, {∅}} = 2, and ρ′{{∅}} = 2.
Exercise
4.82	 Prove that the following are theorems of NBG.
	
a.	 (∀α) Trans (Ψ′α)
	
b.	 Trans(H)
	
c.	 (∀α)(Ψ′α ⊆ Ψ′(α′))
	
d.	 (∀α)(∀β)(α <⚬ β ⇒ Ψ′α ⊆ Ψ′β)
	
e.	 On ⊆ H
	
f.	 (∀α)(ρ′α = α′)
	
g.	 (∀u)(∀v)(u ∈ H ∧ v ∈ H ∧ u ∈ v ⇒ ρ′u <⚬ ρ′v)
	
h.	 (∀u)(u ⊆ H ⇒ u ∈ H)
Proposition 4.45
The regularity axiom is equivalent to the assertion that V = H, that is, that 
every set is a member of H.
Proof
	
a.	Assume V = H. Let X ≠ ∅. Let α be the least of the ranks of all the 
members of X, and let b be an element of X such that ρ′b = α. Then b ∩ 
X = ∅; for, if u ∈ b ∩ X, then, by Exercise 4.82(g), ρ′u ∈ ρ′b = α, contra-
dicting the minimality of α.
	
b.	Assume (Reg). Assume V ≠ H. Then V − H ≠ ∅. By (Reg), there is 
some y in V − H such that y ∩ (V − H) = ∅. Hence, y ⊆ H and so, by 
Exercise 4.82(h), y ∈ H, contradicting y ∈ V − H.
Exercises
4.83	 Show that (Reg) is equivalent to the special case: (∀x)(x ≠ ∅ ⇒ (∃y)(y ∈ 
x ∧ y ∩ x = ∅)).

289
Axiomatic Set Theory
4.84	 Show that, if we assume (Reg), then Ord(X) is equivalent to Trans(X) ∧ 
E ConX, that is, to the wf
	
(
)(
)
(
)(
)(
)
∀
∈
⇒
⊆
∧∀
∀
∈
∧
∈
∧
≠
⇒
∈∨
∈
u u
X
u
X
u
v u
X
v
X
u
v
u
v
v
u
Thus, with the regularity axiom, a much simpler definition of the notion of 
ordinal class is available, a definition in which all quantifiers are restricted 
to sets.
4.85	 Show that (Reg) implies that every nonempty transitive class contains ∅
Proposition 4.45 certainly increases the attractiveness of adding (Reg) as 
a new axiom to NBG. The proposition V = H asserts that every set can be 
obtained by starting with ∅ and applying the power set and union oper-
ations any transfinite number of times. The assumption that this is so is 
called the iterative conception of set. Many set theorists now regard this con-
ception as the best available formalization of our intuitive picture of the 
universe of sets.*
By Exercise 4.84, the regularity axiom would also simplify the definition 
of ordinal numbers. In addition, we can develop the theory of cardinal num-
bers on the basis of the regularity axiom; namely, just define the cardinal 
number of a set x to be the set of all those y of lowest rank such that y ≅ x. 
This would satisfy the basic requirement of a theory of cardinal numbers, 
the existence of a function Card whose domain is V and such that (∀x)(∀y)
(Card′x = Card′y ⇔ x ≅ y).
There is no unanimity among mathematicians about whether we have suffi-
cient grounds for adding (Reg) as a new axiom, for, although it has great sim-
plifying power, it does not have the immediate plausibility that even the axiom 
of choice has, nor has it had any mathematical applications. Nevertheless, it is 
now often taken without explicit mention to be one of the axioms.
The class H determines an inner model of NBG in the following sense. For any 
wf B (written in unabbreviated notation), let RelH(B) be the wf obtained from 
B by replacing every subformula (∀X)C  (X) by (∀X)(X ⊆ H ⇒ C  (X)) (in mak-
ing the replacements we start with the innermost subformulas) and then, if B 
contains free variables. Y1, …, Yn, prefixing (Y1 ⊆ H ∧ Y2 ⊆ H ∧ … ∧ Yn ⊆ H) ⇒.
In other words, in forming RelH (B), we interpret “class” as “subclass of H.” 
Since M(X) stands for (∃Y)(X ∈ Y), RelH(M(X)) is (∃Y)(Y ⊆ H ∧ X ∈ Y), which 
is equivalent to X ∈ H; thus, the “sets” of the model are the elements of H. 
Hence, RelH ((∀x)B) is equivalent to (∀x)(x ∈ H ⇒ B#), where B# is RelH(B). 
Note also that ⊢ X ⊆ H ∧ Y ⊆ H ⇒ [RelH(X = Y) ⇔ X = Y]. Then it turns out 
that, for any theorem B of NBG, RelH (B) is also a theorem of NBG.
*	 The iterative conception seems to presuppose that we understand the power set and union 
operations and that ordinal numbers (or something essentially equivalent to them) are avail-
able for carrying out the transfinite iteration of the power set and union operations.

290
Introduction to Mathematical Logic
Exercises
4.86	 Verify that, for each axiom B of NBG, ⊢NBG RelH(B). If we adopt a 
semantic approach, one need only show that, if M is a model for NBG, 
in the usual sense of “model,” then the objects X of M that satisfy the wf 
X ⊆ H also form a model for NBG. In addition, one can verify that (Reg) 
holds in this model; this is essentially just part (a) of Proposition 4.45. 
A direct consequence of this fact is that, if NBG is consistent, then so is 
the theory obtained by adding (Reg) as a new axiom. That (Reg) is inde-
pendent of NBG (that is, cannot be proved in NBG) can be shown by 
means of a model that is somewhat more complex than the one given 
above for the consistency proof (see Bernays, 1937–1954, part VII). Thus, 
we can consistently add either (Reg) or its negation to NBG, if NBG is 
consistent. Practically the same arguments show the independence and 
consistency of (Reg) with respect to NBG + (AC).
4.87	 Consider the model whose domain is Hα and whose interpretation of 
∈ is EHα, the membership relation restricted to Hα. Notice that the “sets” 
of this model are the sets of rank ≤⚬ α and the “proper classes” are the sets 
of rank α′. Show that the model Hα satisfies all axioms of NBG (except 
possibly the axioms of infinity and replacement) if and only if Lim(α). 
Prove also that Hα satisfies the axiom of infinity if and only if α >⚬ ω.
4.88	 Show that the axiom of infinity is not provable from the other axioms 
of NBG, if the latter form a consistent theory.
4.89	 Show that the replacement axiom (R) is not provable from the other axi-
oms (T, P, N, (B1)–(B7), U, W, S) if these latter form a consistent theory.
4.90	 An ordinal α such that Hα is a model for NBG is called inaccessible. Since 
NBG has only a finite number of proper axioms, the assertion that α is 
inaccessible can be expressed by the conjunction of the relativization 
to Hα of the proper axioms of NBG. Show that the existence of inacces-
sible ordinals is not provable in NBG if NBG is consistent. (Compare 
Shepherdson (1951–1953), Montague and Vaught (1959), and, for 
related results, Bernays (1961) and Levy (1960).) Inaccessible ordinals 
have been shown to have connections with problems in measure theory 
and algebra (see Ulam, 1930; Zeeman, 1955; Erdös and Tarski, 1961).* 
The consistency of the theory obtained from NBG by adding an axiom 
asserting the existence of an inaccessible ordinal is still an open ques-
tion. More about inaccessible ordinals may be found in Exercise 4.91.
The axiom of choice turns out to be consistent and independent with 
respect to the theory NBG + (Reg). More precisely, if NBG is consistent, AC 
is an undecidable sentence of the theory NBG + (Reg). In fact, Gödel (1938, 
*	 Inaccessible ordinals are involved also with attempts to provide a suitable set-theoretic founda-
tion for category theory (see MacLane, 1971; Gabriel, 1962; Sonner, 1962; Kruse, 1966; Isbell, 1966).

291
Axiomatic Set Theory
1939, 1940) showed that, if NBG is consistent, then the theory NBG + (AC) + 
(Reg) + (GCH) is also consistent, where (GCH) stands for the generalized con-
tinuum hypothesis:
	
∀
(
)
( ) ⇒¬ ∃
(
)
∧
( )
(
)
(
)
x
x
y
x
y
y
x
Inf
≺
≺P
(Our statement of Gödel’s result is a bit redundant, since ⊢NBG (GCH) ⇒ 
(AC) has been proved by Sierpinski (1947) and Specker (1954). This result 
will be proved below.) The unprovability of AC from NBG + (Reg), if NBG is 
consistent, has been proved by P.J. Cohen (1963–1964), who also has shown 
the independence of the special continuum hypothesis, 2ω ≅ ω1, in the theory 
NBG + (AC) + (Reg). Expositions of the work of Cohen and its further devel-
opment can be found in Cohen (1966) and Shoenfield (1971b), as well as in 
Rosser (1969) and Felgner (1971a). For a thorough treatment of these results 
and other independence proofs in set theory, Jech (1978) and Kunen (1980) 
should be consulted.
We shall present here a modified form of the proof in Cohen (1966) of 
Sierpinski’s theorem that GCH implies AC.
Definition
For any set v, let P  0(v) = v, P  1(v) = P  (v), P  2(v) = P  (P (v)), …, P  k + 1(v) = P  (P  k(v)) 
for all k in ω.
Lemma 4.46
If ω ≼ v, then P  k(v) +c P  k(v) ≅ P  k(v) for all k ≥⚬ 1.
Proof
Remember that P  (x) ≅ 2x (see Exercise 4.40). From ω ≼ v we obtain ω ≼ P  k(v) 
for all k in ω. Hence, P  k(v) +c 1 ≅ P  k(v) for all k in ω, by Exercise 4.64(g). Now, 
for any k ≥⚬ 1,
	
P
P
P
P P
P
P
k
k
k
k
v
v
v
v
v
v
k
k
( )
( )
( )
(
( ))
( )
( )
+
=
×
=
×
≅
×
≅
×
≅
−
−
−
c
2
2
2
2
2
2
2
1
1
1
1
P
P
P P
P
k
k
v
v
k
k
v
v
−
−
+
−
≅
≅
=
1
1
1
1
2
( )
( )
(
( ))
( )
c
Lemma 4.47
If y +c x ≅ P  (x +c x), then P  (x) ≼ y.

292
Introduction to Mathematical Logic
Proof
Notice that P  (x + cx) ≅ 2x + 
c
x ≅ 2x × 2x ≅ P  (x) × P  (x). Let y* = y × {∅} and x* = 
x × {1}. Since y +c x ≅ P  (x +c x) ≅ P  (x) × P  (x), there is a function f such that 
y
x
x
x
f
∗
∗≅
×
∪
P
P
( )
( ). Let h be the function that takes each u in x* into the first 
component of the pair f′u. Thus, h: x* ⇒ P  (x). By Proposition 4.25(a), there 
must exist c in P  (x) − h″(x*). Then, for all z in P  (x), there exists a unique v in 
y* such that f′v = 〈c, z〉. This determines a one–one function from P  (x) into y. 
Hence, P  (x) ≼ y.
Proposition 4.48
Assume GCH.
	
a.	If u cannot be well-ordered and u +c u ≅ u and β is an ordinal such 
that β ≼ 2u, then β ≼ u.
	
b.	The axiom of choice holds.
Proof
	
a.	Notice that u +c u ≅ u implies 1 +c u ≅ u, by Exercise 4.71(b). Therefore, 
by Exercise 4.55(i), 2u +c u ≅ 2u. Now, u ≼ β +c u ≅ 2u. By GCH, either 
(i) u ≅ β +c u or (ii) β +c u ≅ 2u. If (ii) holds, β +c u ≅ 2u +c u ≅ P(u +c u). 
Hence, by Lemma 4.47, P(u) ≼ β and, therefore, u ≼ β. Then, since 
u would be equinumerous with a subset of an ordinal, u could be 
well-ordered, contradicting our assumption. Hence, (i) must hold. 
But then, β ≼ β +c u ≅ u.
	
b.	We shall prove AC by proving the equivalent sentence asserting that 
every set can be well-ordered (WO). To that end, consider any set 
x and assume, for the sake of contradiction, that x cannot be well-
ordered. Let v = 2x∪ω. Then ω ≼ x ∪ ω ≼ v. Hence, by Lemma 4.46, 
P  k(v) +c P  k(v) ≅ P  k(v) for all k ≥⚬ 1. Also, since x ≼ x ∪ ω ≼ v ≺ P  (v) ≺ 
P (P (v)) ≺…, and x cannot be well-ordered, each P k(v) cannot be well-
ordered, for k ≥⚬ 0. Let β = H  ′v. We know that β ≼ P  4(v) by Corollary 
4.32. Hence, by part (a), with u = P  3(v), we obtain β ≼ P  3(v). Using 
part (a) twice more (successively with u = P  2(v) and u = P (v)), we 
obtain H ′v = β ≼ v. But this contradicts the definition of H ′v as the 
least ordinal not equinumerous with a subset of v.
Exercise
4.91	 An α-sequence is defined to be a function f whose domain is α. If the 
range of f consists of ordinals, then f is called an ordinal α-sequence and, 
if, in addition, β <o γ <⚬ α implies f′β <⚬ f′γ, then f is called an increasing 

293
Axiomatic Set Theory
ordinal α-sequence. By Proposition 4.12, if f is an increasing ordinal 
α-sequence, then ⋃ (f″α) is the least upper bound of the range of f. An 
ordinal δ is said to be regular if, for any increasing ordinal α-sequence 
such that α <⚬ δ and the ordinals in the range of f are all <⚬ δ, ∪ (f″α) + o1<oδ. 
Nonregular ordinals are called singular ordinals.
	
a.	 Which finite ordinals are regular?
	
b.	 Show that ω0 is regular and ωω is singular
	
c.	 Prove that every regular ordinal is an initial ordinal.
	
d.	 Assuming the AC, prove that every ordinal of the form ωγ+° 1 is regular.
	
e.	 If ωα is regular and Lim(α), prove that ωα = α. (A regular ordinal ωα 
such that Lim(α) is called a weakly inaccessible ordinal.)
	
f.	 Show that, if ωα has the property that γ <⚬ ωα implies P(γ) ≺ ωα, then 
Lim(α). The converse is implied by the generalized continuum 
hypothesis. A regular ordinal ωα such that α >⚬ ∅ and such that 
γ <⚬ ωα implies P(γ) ≺ ωα, is called strongly inaccessible. Thus, every 
strongly inaccessible ordinal is weakly inaccessible and, if (GCH) 
holds, the strongly inaccessible ordinals coincide with the weakly 
inaccessible ordinals.
	
g.	 (i) If γ is inaccessible (i.e., if Hγ is a model of NBG), prove that γ is 
weakly inaccessible. (ii)D In the theory NBG + (AC), show that γ is 
inaccessible if and only if γ is strongly inaccessible (Sheperdson, 
1951–1953; Montague and Vaught, 1959).
	
h.	 If NBG is consistent, then in the theory NBG + (AC) + (GCH), show 
that it is impossible to prove the existence of weakly inaccessible 
ordinals.
4.6  Other Axiomatizations of Set Theory
We have chosen to develop set theory on the basis of NBG because it is rela-
tively simple and convenient for the practicing mathematician. There are, of 
course, many other varieties of axiomatic set theory, of which we will now 
make a brief survey.
4.6.1  Morse–Kelley (MK)
Strengthening NBG, we can replace axioms (B1)–(B7) by the axiom schema:
	

( )
∃
∀
∈
⇔
(
)(
)(
)
( )
Y
x x
Y
x s
B
where
B(x) is any wf (not necessarily predicative) of NBG
 Y is not free in B(x)

294
Introduction to Mathematical Logic
The new theory MK, called Morse–Kelley set theory, became well-known 
through its appearance as an appendix in a book on general topology by 
Kelley (1955). The basic idea was proposed independently by Mostowski, 
Quine, and Morse (whose rather unorthodox system may be found in Morse 
(1965)). Axioms (B1)–(B7) follow easily from (□) and, therefore, NBG is a 
subtheory of MK. Mostowski (1951a) showed that, if NBG is consistent, then 
MK is really stronger than NBG. He did this by constructing a “truth defi-
nition” in MK on the basis of which he proved ⊢MK ConNBG, where ConNBG is a 
standard arithmetic sentence asserting the consistency of NBG. On the other 
hand, by Gödel’s second theorem, ConNBG is not provable in NBG if the latter 
is consistent.
The simplicity and power of schema (□) make MK very suitable for use 
by mathematicians who are not interested in the subtleties of axiomatic set 
theory. But this very strength makes the consistency of MK a riskier gamble. 
However, if we add to NBG + (AC) the axiom (In) asserting the existence 
of a strongly inaccessible ordinal θ, then Hθ is a model of MK. Hence, MK 
involves no more risk than NBG + (AC) + (In).
There are several textbooks that develop axiomatic set theory on the basis 
of MK (Rubin, 1967; Monk, 1980; Chuquai, 1981). Some of Cohen’s indepen-
dence results have been extended to MK by Chuquai (1972).
Exercises
4.92	 Prove that axioms (B1)–(B7) are theorems of MK.
4.93	 Verify that, if θ is a strongly inaccessible ordinal, then Hθ is a model 
of MK.
4.6.2  Zermelo–Fraenkel (ZF)
The earliest axiom system for set theory was devised by Zermelo (1908). The 
objects of the theory are thought of intuitively as sets, not the classes of NBG 
or MK. Zermelo’s theory Z can be formulated in a language that contains 
only one predicate letter ∈. Equality is defined extensionally: x = y stands for 
(∀z)(z ∈ x ⇔ z ∈ y). The proper axioms are:
T: x = y ⇒ (x ∈ z ⇔ y ∈ z)	
(substitutivity of =)
P: (∃z)(∀u)(u  ∈ z  ⇔ u = x ∨ u = y)	
(pairing)
N: (∃x)(∀y)(y ∉ x)	
(null set)
U: (∃y)(∀u)(u ∈ y ⇔ (∃v)(u ∈ v ∧ v ∈ x))	
(sum set)
W: (∃y)(∀u)(u ∈ y ⇔ u ⊆ x)	
(power set)
S*: (∃y)(∀u)(u ∈ y ⇔ (u ∈ x ∧ B(u))), 	
(selection)
where B(u) is any wf not containing y free
I: (∃x)(∅ ∈ x ∧ (∀z)(z ∈ x ⇒ z ∪ {z} ∈ x))	
(infinity)
Here we have assumed the same definitions of ⊆, ∅, ∪ and {u} as in NBG.

295
Axiomatic Set Theory
Zermelo’s intention was to build up mathematics by starting with a few 
simple sets (∅ and ω) and then constructing further sets by various well-
defined operations (such as formation of pairs, unions and power sets). In 
fact, a good deal of mathematics can be built up within Z. However, Fraenkel 
(1922a) observed that Z was too weak for a full development of mathemat-
ics. For example, for each finite ordinal n, the ordinal ω +⚬ n can be shown to 
exist, but the set A of all such ordinals cannot be proved to exist, and, there-
fore, ω +⚬ ω, the least upper bound of A, cannot be shown to exist. Fraenkel 
proposed a way of overcoming such difficulties, but his idea could not be 
clearly expressed in the language of Z. However, Skolem (1923) was able to 
recast Fraenkel’s idea in the following way: for any wf B(x, y), let Fun(B) 
stand for (∀x)(∀u)(∀v)(B(x, u) ∧ B(x, v) ⇒ u = v). Thus, Fun (B) asserts that B 
determines a function. Skolem’s axiom schema of replacement can then be for-
mulated as follows:
	
(
)
(
)(
)(
)(
(
)(
( , )))
( ,
R
w
z
v v
z
u u
w
u v
x y
#
Fun(
)
for any wf
B
B
B
⇒∀
∃
∀
∈
⇔∃
∈
∧
)
This is the best approximation that can be found for the replacement axiom 
R of NBG.
The system Z + (R#) is denoted ZF and is called Zermelo–Fraenkel set the-
ory. In recent years, ZF is often assumed to contain a set-theoretic regularity 
axiom (Reg*): x ≠ ∅ ⇒ (∃y)(y ∈ x ∧ y ∩ x = ∅). The reader should always check 
to see whether (Reg*) is included within ZF. ZF is now the most popular 
form of axiomatic set theory; most of the modern research in set theory on 
independence and consistency proofs has been carried out with respect to 
ZF. For expositions of ZF, see Krivine (1971), Suppes (1960), Zuckerman (1974), 
Lévy (1978), and Hrbacek and Jech (1978).
ZF and NBG yield essentially equivalent developments of set theory. Every 
sentence of ZF is an abbreviation of a sentence of NBG since, in NBG, lower-
case variables x, y, z, … serve as restricted set variables. Thus axiom N is an 
abbreviation of (∃x)(M(x) ∧ (∀y)(M(y) ⇒ y ∉ x)) in NBG. It is a simple mat-
ter to verify that all axioms of ZF are theorems in NBG. Indeed, NBG was 
originally constructed so that this would be the case. We can conclude that, 
if NBG is consistent, then so is ZF. In fact, if a contradiction could be derived 
in ZF, the same proof would yield a contradiction in NBG.
The presence of class variables in NBG seems to make it much more pow-
erful than ZF. At any rate, it is possible to express propositions in NBG that 
either are impossible to formulate in ZF (such as the universal choice axiom) 
or are much more unwieldy in ZF (such as transfinite induction theorems). 
Nevertheless, it is a surprising fact that NBG is no riskier than ZF. An even 
stronger result can be proved: NBG is a conservative extension of ZF in the 
sense that, for any sentence B of the language of ZF, if ⊢NBG B, then ⊢ZF B (see 
Novak (Gal) 1951; Rosser and Wang, 1950; Shoenfield, 1954). This implies that, 

296
Introduction to Mathematical Logic
if ZF is consistent, then NBG is consistent. Thus, NBG is consistent if and only 
if ZF is consistent, and NBG seems to be no stronger than ZF. However, NBG 
and ZF do differ with respect to the existence of certain kinds of models (see 
Montague and Vaught, 1959). Moreover, another important difference is that 
NBG is finitely axiomatizable, whereas Montague (1961a) showed that ZF (as 
well as Z) is not finitely axiomatizable. Montague (1961b) proved the stronger 
result that ZF cannot be obtained by adding a finite number of axioms to Z.
Exercise
4.94	 Let H
H
α
α
* = ∪
 (see page 288).
	
a.	 Verify that Hα* consists of all sets of rank less than α.
	
b.	 If α is a limit ordinal >⚬ ω, show that Hα* is a model for Z.
	
c.D	 Find an instance of the axiom schema of replacement (R#) that is 
false in Hω
ω
+°
*
. [Hint: Let B(x, y) be x ∈ ω ∧ y = ω +⚬ x. Observe that 
ω
ω
ω
ω
+
∉
°
+°
H*
 and ω +⚬ ω = ⋃ {v|(∃u)(u ∈ ω ∧ B(u, v))}.]
	
d.	 Show that, if ZF is consistent, then ZF is a proper extension of Z.
4.6.3  The Theory of Types (ST)
Russell’s paradox is based on the set K of all those sets that are not members 
of themselves: K = {x|x ∉ x}. Clearly, K ∈ K if and only if K ∉ K. In NBG this 
argument simply shows that K is a proper class, not a set. In ZF the conclu-
sion is just that there is no such set K.
Russell himself chose to find the source of his paradox elsewhere. He 
maintained that x ∈ x and x ∉ x should be considered “illegitimate” and 
“ungrammatical” formulas and, therefore, that the definition of K makes no 
sense. However, this alone is not adequate because paradoxes analogous to 
Russell’s can be obtained from slightly more complicated circular properties, 
like x ∈ y ∧ y ∈ x.
Exercise
4.95	 a.	 Derive a Russell-style paradox by using x ∈ y ∧ y ∈ x.
	
b.	 Use x ∈ y1 ∧ y1 ∈ y2 ∧ … ∧ yn−1 ∈ yn ∧ yn ∈ x to obtain a paradox, 
where n ≥ 1.
Thus, to avoid paradoxes, one must forbid any kind of indirect circularity. 
For this purpose, we can think of the universe divided up into types in the 
following way. Start with a collection W of nonsets or individuals. The ele-
ments of W are said to have type 0. Sets whose members are of type 0 are 
the objects of type 1. Sets whose members are of type1 will be the objects of 
type 2, and so on.

297
Axiomatic Set Theory
Our language will have variables of different types. The superscript of a 
variable will indicate its type. Thus, x0 is a variable of type 0, y1 is a variable 
of type 1, and so on. There are no variables other than type variables. The 
atomic wfs are of the form xn ∈ yn+1, where n is one of the natural numbers 
0, 1, 2, … . The rest of the wfs are built up from the atomic wfs by means of 
logical connectives and quantifiers. Observe that ¬(x ∈ x) and ¬(x ∈ y ∧ y ∈ x) 
are not wfs.
The equality relation must be defined piecemeal, one definition for each type.
Definition
	
x
y
z
x
z
y
z
n
n
n
n
n
n
n
=
∀
∈
⇔
∈
+
+
+
for
(
)(
)
1
1
1
Notice that two objects are defined to be equal if they belong to the same 
sets of the next higher type. The basic property of equality is provided by the 
following axiom scheme.
4.6.3.1  ST1 (Extensionality Axiom)
	
(
)(
)
∀
∈
⇔
∈
⇒
=
+
+
+
+
x
x
y
x
z
y
z
n
n
n
n
n
n
n
1
1
1
1
This asserts that two sets that have the same members must be equal. On the 
other hand, observe that the property of having the same members could 
not be taken as a general definition of equality because it is not suitable for 
objects of type 0.
Given any wf B(xn), we wish to be able to define a set {xn|B(xn)}.
4.6.3.2  ST2 (Comprehension Axiom Scheme)
For any wf B(xn), the following wf is an axiom:
	
∃(
) ∀
(
)
∈
⇔
(
)
(
)
+
+
y
x
x
y
x
n
n
n
n
n
1
1
B
Here, yn+1 is any variable not free in B(xn). If we use the extensionality axiom, 
then the set yn+1 asserted to exist by axiom ST2 is unique and can be denoted 
by {xn|B(xn)}.
Within this system, we can define the usual set-theoretic notions and 
operations, as well as the natural numbers, ordinal numbers, cardinal num-
bers and so on. However, these concepts are not unique but are repeated 
for each type (or, in some cases, for all but the first few types). For example, 
the comprehension scheme provides a null set Λn+1 = {xn|xn ≠ xn} for each 

298
Introduction to Mathematical Logic
nonzero type. But there is no null set per se. The same thing happens for 
natural numbers. In type theory, the natural numbers are not defined as they 
are in NBG. Here they are the finite cardinal numbers. For example, the set 
of natural numbers of type 2 is the intersection of all sets containing {Λ1} and 
closed under the following successor operation: the successor S(y2) of a set 
y2 is {v1|(∃u1)(∃z0)(u1 ∈ y2 ∧ z0 ∉ u1 ∧ v1 = u1 ∪ {z0})}. Then, among the natural 
numbers of type 2, we have 0 = {Λ1}, 1 = S(0), 2 = S(1), and so on. Here, the 
numerals 0, 1, 2, … should really have a superscript “2” to indicate their type, 
but the superscripts were omitted for the sake of legibility. Note that 0 is the 
set of all sets of type 1 that contain no elements, 1 is the set of all sets of type 1 
that contain one element, 2 is the set of all sets of type 1 that contain two ele-
ments, and so on.
This repetition of the same notion in different types makes it somewhat 
inconvenient for mathematicians to work within a type theory. Moreover, 
it is easy to show that the existence of an infinite set cannot be proved from 
the extensionality and comprehension schemas.* To see this, consider the 
“model” in which each variable of type n ranges over the sets of rank less 
than or equal to n +⚬ 1. (There is nothing wrong about assigning overlapping 
ranges to variables of different types.)
We shall assume an axiom that guarantees the existence of an infinite 
set. As a preliminary, we shall adopt the usual definition {{xn}, {xn, yn}} of the 
ordered pair: 〈xn, yn〉, where {xn, yn} stands for {un|un = xn ∨ un = yn}. Notice 
that 〈xn, yn〉 is of type n + 2. Hence, a binary relation on a set A, being a set of 
ordered pairs of elements of A, will have type 2 greater than the type of A. In 
particular, a binary relation on the universe V1 = {x0|x0 = x0} of all objects of 
type 0 will be a set of type 3.
4.6.3.3  ST3 (Axiom of Infinity)
	
(
)([(
)(
)(
,
)]
(
)(
)(
)(
,
∃
∃
∃
〈
〉∈
∧
∀
∀
∀
〈
〉∉
∧
x
u
v
u
v
x
u
v
w
u
u
x
3
0
0
0
0
3
0
0
0
0
0
3
[
,
,
,
]
[
,
(
)(
,
〈
〉∈
∧〈
〉∈
⇒
〈
〉∈
∧〈
〉∈
⇒∃
〈
u
v
x
v
w
x
u
w
x
u
v
x
z
v
0
0
3
0
0
3
0
0
3
0
0
3
0
0 z
x
0
3
〉∈
)]))
This asserts that there is a nonempty irreflexive, transitive binary relation x3 
on V1 such that every member of the range of x3 also belongs to the domain 
of x3. Since no such relation exists on a finite set, V1 must be infinite.
The system based on ST1–ST3 is called the simple theory of types and is 
denoted ST. Because of its somewhat complex notation and the repetition 
of concepts at all (or, in some cases, almost all) type levels, ST is not gen-
erally used as a foundation of mathematics and is not the subject of much 
*	 This fact seemed to undermine Russell’s doctrine of logicism, according to which all of math-
ematics could be reduced to basic axioms that were of an essentially logical character. An 
axiom of infinity could not be thought of as a logical truth.

299
Axiomatic Set Theory
contemporary research. Suggestions by Turing (1948) to make type theory 
more usable have been largely ignored.
With ST we can associate a first-order theory ST*. The nonlogical constants 
of ST* are ∈ and monadic predicates Tn for each natural number n. We then 
translate any wf B of ST into ST* by replacing subformulas (∀xn)C (xn) by (∀x)
(Tn(x) ⇒ C  (x)) and, finally, if y
y
j
jk
1,
,
…
 are the free variables of B, prefixing 
to the result T
y
T
y
j
j
k
k
1
1
(
)
(
)
∧…∧
⇒ and changing each y j1 into yi. In a rigor-
ous presentation, we would have to specify clearly that the replacements are 
made by proceeding from smaller to larger subformulas and that the vari-
ables x, y1, …, yk are new variables. The axioms of ST* are the translations of 
the axioms of ST. Any theorem of ST translates into a theorem of ST*.
Exercise
4.96	 Exhibit a model of ST* within NBG.
By virtue of Exercise 4.96, NBG (or ZF) is stronger than ST: (1) any theorem 
of ST can be translated into a corresponding theorem of NBG, and (2) if NBG 
is consistent, so is ST.*
To provide a type theory that is easier to work with, one can add axi-
oms that impose additional structure on the set V1 of objects of type 0. For 
example, Peano’s axioms for the natural numbers were adopted at level 0 in 
Gödel’s system P, for which he originally proved his famous incompleteness 
theorem (see Gödel, 1931).
In Principia Mathematica (1910–1913), the three-volume work by Alfred 
North Whitehead and Bertrand Russell, there is a theory of types that is 
further complicated by an additional hierarchy of orders. This hierarchy was 
introduced so that the comprehension scheme could be suitably restricted 
in order not to generate an impredicatively defined set, that is, a set A defined 
by a formula in which some quantified variable ranges over a set that turns 
out to contain the set A itself. Along with the mathematician Henri Poincaré, 
Whitehead and Russell believed impredicatively defined sets to be the root 
of all evil. However, such concepts are required in analysis (e.g., in the proof 
that any nonempty set of real numbers that is bounded above has a least 
upper bound). Principia Mathematica had to add the so-called axiom of reduc-
ibility to overcome the order restrictions imposed on the comprehension 
scheme. The Whitehead–Russell system without the axiom of reducibility is 
called ramified type theory; it is mathematically weak but is of interest to those 
who wish an extreme constructivist approach to mathematics. The axiom 
of reducibility vitiates the effect of the order hierarchy; therefore, it is much 
simpler to drop the notion of order and the axiom of reducibility. The result 
is the simple theory of types ST, which we have described above.
*	 A stronger result was proved by John Kemeny (1949) by means of a truth definition within Z: 
if Z is consistent, so is ST.

300
Introduction to Mathematical Logic
In ST, the types are natural numbers. For a smoother presentation, some 
logicians allow a larger set of types, including types for relations and/or 
functions defined on objects taken from previously defined types. Such a 
system may be found in Church (1940).
Principia Mathematica must be read critically; for example, it often overlooks 
the distinction between a formal theory and its metalanguage. The idea of 
a simple theory of types goes back to Ramsey (1925) and, independently, 
to Chwistek (1924–1925). Discussions of type theory are found in Andrews 
(1986), Hatcher (1982) and Quine (1963).
4.6.4  Quine’s Theories NF and ML
Quine (1937) invented a type theory that was designed to do away with some 
of the unpleasant aspects of type theory while keeping the essential idea of the 
comprehension axiom ST2. Quine’s theory NF (New Foundations) uses only one 
kind of variable x, y, z, … and one binary predicate letter ∈. Equality is defined 
as in type theory: x = y stands for (∀z)(x ∈ z ⇔ y ∈ z). The first axiom is familiar:
4.6.4.1  NF1 (Extensionality)
	
(
)(
)
∀
∈
⇔
∈
⇒
=
z z
x
z
y
x
y
In order to formulate the comprehension axiom, we introduce the notion 
of stratification. A wf B is said to be stratified if one can assign integers to 
the variables of B so that: (1) all occurrences of the same free variable are 
assigned the same integer, (2) all bound occurrences of a variable that are 
bound by the same quantifier must be assigned the same integer, and (3) for 
every subformula x ∈ y of B, the integer assigned to y is 1 greater than the 
integer assigned to x.
Examples
	
1.	(∃y)(x ∈ y ∧ y ∈ z) ∨ u ∈ x is stratified by virtue of the assignment 
indicated below by superscripts:
	
(
)(
)
∃
∈
∧
∈
∨
∈
y
x
y
y
z
u
x
2
1
2
2
3
0
1
	
2.	((∃y)(x ∈ y)) ∧ (∃y)(y ∈ x) is stratified as follows:
	
((
)(
))
(
)(
)
∃
∈
∧∃
∈
y
x
y
y
y
x
2
1
2
0
0
1
	
	 Notice that the ys in the second conjunct do not have to have the 
same integers assigned to them as the ys in the first conjunct.

301
Axiomatic Set Theory
	
3.	x ∈ y ∨ y ∈ x is not stratified. If x is assigned an integer n, then the 
first y must be assigned n + 1 and the second y must be assigned 
n − 1, contradicting requirement (1).
4.6.4.2  NF2 (Comprehension)
For any stratified wf B(x),
	
∃
(
) ∀
(
)
∈
⇔
( )
(
)
y
x
x
y
x
B
is an axiom. (Here, y is assumed to be the first variable not free in B(x).)
Although NF2 is an axiom scheme, it turns out that NF is finitely axiomat-
izable (Hailperin, 1944).
Exercise
4.97	 Prove that equality could have been defined as follows: x = y for (∀z)(x 
∈ z ⇒ y ∈ z). (More precisely, in the presence of NF2, this definition is 
equivalent to the original one.)
The theory of natural numbers, ordinal numbers and cardinal numbers 
is developed in much the same way as in type theory, except that there is 
no longer a multiplicity of similar concepts. There is a unique empty set Λ = 
{x|x ≠ x} and a unique universal set V = {x|x = x}. We can easily prove V ∈ V, 
which immediately distinguishes NF from type theory (and from NBG, MK 
and ZF).
The usual argument for Russell’s paradox does not hold in NF, since 
x ∉ x is not stratified. Almost all of standard set theory and mathematics 
is derivable in NF; this is done in full detail in Rosser (1953). However, NF 
has some very strange properties. First of all, the usual proof of Cantor’s 
theorem, A ≺ P (A), does not go through in NF; at a key step in the proof, 
a set that is needed is not available because its defining condition is not 
stratified. The apparent unavailability of Cantor’s theorem has the desir-
able effect of undermining the usual proof of Cantor’s paradox. If we could 
prove A ≺ P (A), then, since P (V) = V, we could obtain a contradiction 
from V ≺ P (V). In NF, the standard proof of Cantor’s theorem does yield 
USC(A) ≺ P (A), where USC(A) stands for {x|(∃u)(u ∈ A ∧ x = {u})}. If we let 
A = V, we conclude that USC(V) ≺ V. Thus, V has the peculiar property that 
it is not equinumerous with the set of all unit sets of its elements. In NBG, 
the function f, defined by f(u) = {u} for all u in A, establishes a one–one cor-
respondence between A and USC(A) for any set A. However, the defining 
condition for f is not stratified, so that f may not exist in NF. If f does exist, 
A is said to be strongly Cantorian.

302
Introduction to Mathematical Logic
Other surprising properties of NF are the following.
	
1.	The axiom of choice is disprovable in NF (Specker, 1953).
	
2.	Any model for NF must be nonstandard in the sense that a well-
ordering of the finite cardinals or of the ordinals of the model is not 
possible in the metalanguage (Rosser and Wang, 1950).
	
3.	The axiom of infinity is provable in NF (Specker, 1953).
Although property 3 would ordinarily be thought of as a great advantage, 
the fact of the provability of an axiom of infinity appeared to many logicians 
to be too strong a result. If that can be proved, then probably anything can be 
proved, that is, NF is likely to be inconsistent. In addition, the disprovability 
of the axiom of choice seems to make NF a poor choice for practicing math-
ematicians. However, if we restrict attention to so-called Cantorian sets, sets 
A for which A and USC(A) are equinumerous, then it might be consistent to 
assume the axiom of choice for Cantorian sets and to do mathematics within 
the universe of Cantorian sets.
NF has another attractive feature. A substantial part of category theory (see 
MacLane, 1971) can be developed in a straightforward way in NF, whereas 
this is not possible in ZF, NBG, or MK. Since category theory has become an 
important branch of mathematics, this is a distinct advantage for NF.
If the system obtained from NF by assuming the existence of an inac-
cessible ordinal is consistent, then ZF is consistent (see Collins, 1955; Orey, 
1956a). If we add to NF the assumption of the existence of an infinite strongly 
Cantorian set, then Zermelo’s set theory Z is consistent (see Rosser, 1954). The 
question of whether the consistency of ZF implies the consistency of NF is 
still open (as is the question of the reverse implication).
Let ST− be the simple theory of types ST without the axiom of infinity. 
Given any closed wf B of ST, let B+ denote the result of adding 1 to the types 
of all variables in B. Let SP denote the theory obtained from ST− by adding as 
axioms the wfs B ⇔ B+ for all closed wfs B. Specker (1958, 1962) proved that 
NF is consistent if and only if SP is consistent.
Let NFU denote the theory obtained from NF by restricting the extension-
ality axiom to nonempty sets:
	
NF *
1
(
)(
)
(
)(
)
∃
∈
∧∀
∈
⇔
∈
⇒
=
u u
x
z z
x
z
y
x
y
Jensen (1968–1969) proved that NFU is consistent if and only if ST− is con-
sistent, and the equiconsistency continues to hold when both theories are 
supplemented by the axiom of infinity or by axioms of infinity and choice.
Discussions of NF may be found in Hatcher (1982) and Quine (1963). Forster 
(1983) gives a survey of more recent results.
Quine also proposed a system ML that is formally related to NF in much 
the same way that MK is related to ZF. The variables are capital italic letters 

303
Axiomatic Set Theory
X, Y, Z, …; these variables are called class variables. We define M(X), X is a 
set,* by (∃Y)(X ∈ Y), and we introduce lower-case italic letters x, y, z, … as 
variables restricted to sets. Equality is defined as in NBG: X = Y for (∀Z)(Z ∈ 
X ⇔ Z ∈ Y). Then we introduce an axiom of equality:
	
ML1:
X
Y
X
Z
Y
Z
=
∧
∈
⇒
∈
There is an unrestricted comprehension axiom scheme:
	
ML2 :
(
)(
)(
( ))
∃
∀
∈
⇔
Y
x x
Y
x
B
where B(x) is any wf of ML. Finally, we wish to introduce an axiom that has 
the same effect as the comprehension axiom scheme NF2:
	
ML3
1
:
(
)(
)(
)(
( ))
(
)
∀
… ∀
∃
∀
∈
⇔
y
y
z
x x
z
x
n
B
where B(x) is any stratified wf whose free variables are x, y1, …, yn(n ≥ 0) and 
whose quantifiers are set quantifiers.
All theorems of NF are provable in ML. Hence, if ML is consistent, so is NF. 
The converse has been proved by Wang (1950). In fact, any closed wf of NF 
provable in ML is already provable in NF.
ML has the same advantages over NF that MK and NBG have over ZF: a 
greater ease and power of expression. Moreover, the natural numbers of ML 
behave much better than those of NF; the principle of mathematical induc-
tion can be proved in full generality in ML.
The prime source for ML is Quine (1951).† Consult also Quine (1963) and 
Fraenkel et al. (1973).
4.6.5  Set Theory with Urelements
The theories NBG, MK, ZF, NF, and ML do not allow for objects that are 
not sets or classes. This is all well and good for mathematicians, since only 
sets or classes seem to be needed for dealing with mathematical concepts 
and problems. However, if set theory is to be a part of a more inclusive 
theory having to do with the natural or social sciences, we must permit 
reference to things like electrons, molecules, people, companies, etc., and to 
sets and classes that contain such things. Things that are not sets or classes 
are sometimes called urelements.‡ We shall sketch a theory UR similar to 
*	 Quine uses the word “element” instead of “set.”
†	 Quine’s earlier version of ML, published in 1940, was proved inconsistent by Rosser (1942). 
The present version is due to Wang (1950).
‡	 “Ur” is a German prefix meaning primitive, original or earliest. The words “individual” and 
“atom” are sometimes used as synonyms for “urelement.”

304
Introduction to Mathematical Logic
NBG that allows for the existence of urelements.* Like NBG, UR will have a 
finite number of axioms.
The variables of UR will be the lower-case Latin boldface letters x1, x2, … . 
(As usual, let us use x, y, z, … to refer to arbitrary variables.) In addition to 
the binary predicate letter A2
2 there will be a monadic predicate letter A1
1. We 
abbreviate A2
2( , )
x y  by x
y
x y
∈
¬
,
( , )
A2
2
 by x ∉ y, and A1
1( )
x  by Cls (x). (Read 
“Cls(x)” as “x is a class.”) To bring our notation into line with that of NBG, 
we shall use capital Latin letters as restricted variables for classes. Thus, 
(∀X)B(X) stands for (∀x)(Cls(x) ⇒ B(x)), and (∃X)B(X) stands for (∃x)(Cls(x) ∧ 
B(x)). Let M(x) stand for Cls(x) ∧ (∃y (x ∈ y), and read “M(x)” as “x is a set.” 
As in NBG, use lower-case Latin letters as restricted variables for sets. Thus, 
(∀x)B(x) stands for (∀x)(M(x) ⇒ B(x)), and (∃x)B(x) stands for (∃x)(M(x) ∧ B(x)). 
Let Pr(x) stand for Cls(x) ∧ ¬M(x), and read “Pr(x)” as “x is a proper class.” 
Introduce Ur(x) as an abbreviation for ¬Cls(x), and read “Ur(x)” as “x is an 
urelement.” Thus, the domain of any model for UR will be divided into two 
disjoint parts consisting of the classes and the urelements, and the classes 
are divided into sets and proper classes. Let El(x) stand for M(x) ∨ Ur(x), and 
read “El(x)” as “x is an element.” In our intended interpretation, sets and ure-
lements are the objects that are elements (i.e., members) of classes.
Exercise
4.98	 Prove: ⊢UR (∀x)(El(x) ⇔ ¬Pr(x)).
We shall define equality in a different way for classes and urelements.
Definition
x = y is an abbreviation for:
	 [
( )
( )
(
)(
)]
[
( )
( )
(
)(
)]
Cls
Cls
Ur
Ur
x
y
z z
x
z
y
x
y
z x
z
y
z
∧
∧∀
∈
⇔
∈
∨
∧
∧∀
∈
⇔
∈
Exercise
4.99	 Prove: ⊢UR(∀x)(x = x).
Axiom UR1
	
(
)(
( )
(
)(
)]
∀
⇒∀
∉
x
x
y y
x
Ur
Thus, urelements have no members.
*	 Zermelo’s 1908 axiomatization permitted urelements. Fraenkel was among the first to draw 
attention to the fact that urelements are not necessary for mathematical purposes (see 
Fraenkel, 1928, pp. 355f). Von Neumann’s (1925, 1928) axiom systems excluded urelements.

305
Axiomatic Set Theory
Exercise
4.100	 Prove: ⊢UR(∀x)(∀y)(x ∈ y ⇒ Cls(y) ∧ El(x)).
Axiom UR2
	
(
)(
)(
)(
)
∀
∀
∀
=
∧
∈
⇒
∈
X
Y
Z X
Y
X
Z
Y
Z
Exercise
4.101	 Show:
	
a.	 ⊢UR (∀x)(∀y)(x = y ⇒ (∀z)(z ∈ x ⇔ z ∈ y))
	
b.	 ⊢UR (∀x)(∀y)(x = y ⇒ (∀z)(x ∈ z ⇔ y ∈ z))
	
c.	 ⊢UR (∀x)(∀y)(x = y ⇒ [Cls(x) ⇔ Cls(y)] ∧ [Ur(x) ⇔ Ur(y)] ∧ [M(x) ⇔ M(y)])
	
d.	 ⊢UR (∀x)(∀y)[x = y ⇒ (B(x, x) ⇒ B(x, y))], where B(x, y) arises from 
B(x, x) by replacing some, but not necessarily all, free occurrences 
of x by y, with the proviso that y is free for x in B(x, x).
	
e.	 UR is a first-order theory with equality (with respect to the given 
definition of equality).
Axiom UR3 (Null Set)
	
(
)(
)(
)
∃
∀
∉
x
x
y y
This tell us that there is a set that has no members. Of course, all urelements 
also have no elements.
Exercise
4.102	 Show: ⊢UR (∃1x)(∀y)(y ∉ x). On the basis of this exercise we can introduce 
a new individual constant ∅ satisfying the condition M(∅) ∧ (∀y)(y ∉ ∅).
Axiom UR4 (Pairing)
	
(
)(
)(
( )
( )
(
)(
)(
[
])
∀
∀
∧
⇒∃
∀
∈
⇔
=
∨
=
x
y
x
y
u u
u
x
u
y
El
El
z
z
Exercise
4.103	 Prove: ⊢UR (∀x)(∀y)(∃1z)([El(x) ∧ El(y) ∧ (∀u)(u ∈ z ⇔ [u = x ∨ u = y]) ∨ 
[(¬El(x) ∨ ¬El(y)) ∧ z = ∅]) On the basis of this exercise we can intro-
duce the unordered pair notation {x, y}. When x and y are elements, 
{x, y} is the set that has x and y as its only members; when x or y is 
a proper class, {x, y} is arbitrarily chosen to be the empty set ∅. As 
usual, the singleton notation {x} stands for {x, x}.

306
Introduction to Mathematical Logic
Definition (Ordered Pair)
Let 〈x, y〉 stand for {{x}, {x, y}}. As in the proof of Proposition 4.3, one can 
show that, for any elements x, y, u, v, 〈x, y〉 = 〈u, v〉 ⇔ [x = u ∧ y = v]. Ordered 
n-tuples can be defined as in NBG.
The class existence axioms B1–B7 of NBG have to be altered slightly by 
sometimes replacing universal quantification with respect to sets by univer-
sal quantification with respect to elements.
Axioms of Class Existence
(UR5)	
(∃X)(∀u)(∀v)(El(u) ∧ El(v) ⇒ [〈u, v〉 ∈ X ⇔ u ∈ v])
(UR6)	
(∀X)(∀Y)(∃Z)(∀u)(u ∈ Z ⇔ u ∈ X ∧ u ∈ Y)
(UR7)	
(∀X)(∃Z)(∀u)(El(u) ⇒ [u ∈ Z ⇔ u ∉ X])
(UR8)	
(∀X)(∃Z)(∀u)(El(u) ⇒ (u ∈ Z ⇔ (∃v)(〈u, v〉 ∈ X))
(UR9)	
(∀X)(∃Z)(∀u)(∀v)(El(u) ∧ El(v) ⇒ (〈u, v〉 ∈ Z ⇔ u ∈ X))
(UR10)	
(∀X)(∃Z)(∀u)(∀v)(∀w)(El(u) ∧ El(v) ∧ El(w) ⇒ [〈u, v, w〉 ∈ Z ⇔ 
〈v, w, u〉 ∈ X])
(UR11)	
(∀X)(∃Z)(∀u)(∀v)(∀w)(El(u) ∧ El(v) ∧ El(w) ⇒ [〈u, v, w〉 ∈ Z ⇔ 
〈u, w, v〉 ∈ X])
As in NBG, we can prove the existence of the intersection, complement and 
union of any classes, and the existence of the class V of all elements. But in 
UR we also need an axiom to ensure the existence of the class VM of all sets, 
or, equivalently, of the class Vur of all urelements.
Axiom UR12
	
(
)(
)(
( ))
∃
∀
∈
⇔
X
X
u u
u
Ur
This yields the existence of Vur and implies the existence of VM, that is, (∃X)
(∀u)(u ∈ X ⇔ M(u)). The class VEl of all elements is then the union Vur ∪ VM. 
Note that this axiom also yields (∃X)(∀u)(El(u) ⇒ [u ∈ X ⇔ Cls(u)]), since VM 
can be taken as the required class X.
As in NBG, we can prove a general class existence theorem.
Exercise
4.104	 Let φ(x1, …, xn, y1, …, ym) be a formula in which quantification takes 
place only with respect to elements, that is, any subformula (∀u)B has 
the form (∀u)(El(u) ⇒ C  ). Then
	
⊢UR
x
x
El x
El x
x
x
x
x
y
∃
(
) ∀
(
) … ∀
(
)
(
) ∧… ∧
(
) ⇒
〈
…
〉∈
⇔
…
Z
Z
n
n
n
n
1
1
1
1
1
(
,
,
,
,
,
ϕ
,
,
.
…
(
)


ym

307
Axiomatic Set Theory
The sum set, power set, replacement and infinity axioms can be translated 
into UR.
Axiom UR13
	
(
)(
)(
)(
(
)(
))
∀
∃
∀
∈
⇔∃
∈
∧
∈
x
y
y
x
u u
v u
v
v
Axiom UR14
	
(
)(
)(
)(
)
∀
∃
∀
∈
⇔
⊆
x
y
y
x
u u
u
where u ⊆ x stands for M(u) ∧ M(x) ∧ (∀v)(v ∈ u ⇒ v ∈ x).
Axiom UR15
	
(
)(
)(
( )
(
)(
)[
(
)(
,
)])
∀
∀
⇒∃
∀
∈
⇔∃
〈
〉∈
∧
∈
Y
x
Y
y
y
Y
x
Un
u u
v
v u
v
where Un(z) stands for
	(
)(
)(
)[
(
)
(
)
(
)
(
,
,
∀
∀
∀
∧
∧
⇒〈
〉∈
∧〈
〉∈
⇒
x
x
x
x
x
x
x
x
z
x
x
z
1
2
3
1
2
3
1
2
1
3
El
El
El
x
x
2
3
=
)]
Axiom UR16
	
(
)(
(
)(
{ }
))
∃
∅∈
∧∀
∈
⇒
∪
∈
x
x
u u
x
u
u
x
From this point on, the standard development of set theory including the 
theory of ordinal numbers, can be imitated in UR.
Proposition 4.49
NBG is a subtheory of UR.
Proof
It is easy to verify that every axiom of NBG is provable in UR, provided that 
we take the variables of NBG as restricted variables for “classes” in UR. The 
restricted variables for sets in NBG become restricted variables for “sets” 
in UR.*
*	 In fact, a formula (∀x)B(x) in NBG is an abbreviation in NBG for (∀X)((∃Y)(X ∈ Y) ⇒ B(X)). The 
latter formula is equivalent in UR to (∀x)(M(x) ⇒ B(x)), which is abbreviated as (∀x)B(x) in UR.

308
Introduction to Mathematical Logic
Proposition 4.50
UR is consistent if and only if NBG is consistent.
Proof
By Proposition 4.49, if UR is consistent, NBG is consistent. For the converse, 
note that any model of NBG yields a model of UR in which there are no ure-
lements. In fact, if we replace “Cls(x)” by the NBG formula “x = x,” then the 
axioms of UR become theorems of NBG. Hence, a proof of a contradiction in 
UR would produce a proof of a contradiction in NBG.
The axiom of regularity (Reg) takes the following form in UR.
	
(
)
(
)(
(
)(
(
)(
)))
Reg
u u
v v
v
u
UR
∀
≠∅⇒∃
∈
∧¬ ∃
∈
∧
∈
X X
X
X
It is clear that an analogue of Proposition 4.49 holds: UR + (RegUR) is an 
extension of NBG + (Reg). Likewise, the argument of Proposition 4.50 shows 
the equiconsistency of NBG + (Reg) and UR + (RegUR).
Since definition by transfinite induction (Proposition 4.14(b)) holds in UR, 
the cumulative hierarchy can be defined
	
Ψ
Ψ
Ψ
Ψ
Ψ
′∅= ∅
′(
) =
′
(
)
( ) ⇒
′
=
′
′
<
α
α
λ
λ
β
β
λ
P
Lim
o
∪
and the union H = ⋃ (Ψ″On) is the class of “pure” sets in UR and forms a 
model of NBG + (Reg). In NBG, by Proposition 4.45, (Reg) is equivalent to 
V = H, where V is the class of all sets.
If the class Vur of urelements is a set, then we can define the following by 
transfinite induction:
	
Ξ
Ξ
Ξ
Ξ
Ξ
′∅=
′(
) =
′
(
)
( ) ⇒
′
=
′
′
<
Vur
Lim
o
α
α
λ
λ
β
β
λ
P
∪
The union Hur = ∪ (Ξ″On) is a model of UR + (RegUR), and (RegUR) holds in UR 
if and only if Hur is the class VEl of all elements.
If the class Vur of urelements is a proper class, it is possible to obtain an 
analogue of Hur in the following way. For any set x whose members are 

309
Axiomatic Set Theory
urelements and any ordinal γ, we can define a function Ξx
γ by transfinite 
induction up to γ:
	
Ξ
Ξ
Ξ
Ξ
Ξ
x
x
x
o
x
x
x
if
Lim
if
o
γ
γ
γ
γ
β
λ
γ
α
α
α
γ
λ
λ
β
λ
′∅=
′(
) =
(
)
<
( ) ⇒
′
=
′
<
′
′
′
<
P
∪
o γ
Let Hur*  be the class of all elements v such that, for some x and γ, v is in 
the range of Ξx
γ. Then Hur*  determines a model of UR + (RegUR), and, in UR, 
(RegUR) holds if and only if Hur*  is the class VEl of all elements.
The equiconsistency of NBG and UR can be strengthened to show the fol-
lowing result.
Proposition 4.51
If NBG is consistent, then so is the theory UR + (Regur) + “Vur is denumerable.”
Proof
Within NBG one can define a model with domain ω that is a model of NBG 
without the axiom of infinity. The idea is due to Ackermann (1937). For any 
n and m in ω, define m
n
∈ to mean that 2m occurs as a term in the expansion 
of n as a sum of different powers of 2.* If we take “A-sets” to be members 
of ω and “proper A-classes” to be infinite subsets of ω, it is easy to verify 
all axioms of NBG + (Reg) except the axiom of infinity.† (See Bernays 1954, 
pp. 81–82 for a sketch of the argument.) Then we change the “membership” 
relation on ω by defining m ∈1 n to mean that 2m n
∈. Now we define a “set” 
to be either 0 or a member n of ω for which there is some m in ω such that 
m ∈1n. We take the “urelements” to be the members of ω that are not “sets.” 
For example, 8 is an “urelement,” since 8 = 23 and 3 is not a power of 2. 
Other small “urelements” are 1, 9, 32, 33, and 40. In general, the “urele-
ments” are sums of one or more distinct powers 2k, where k is not a power 
of 2. The “proper classes” are to be the infinite subsets of ω. Essentially the 
same argument as for Ackermann’s model shows that this yields a model 
M of all axioms of UR + (RegUR) except the axiom of infinity. Now we want 
to extend M to a model of UR. First, let r stand for the set of all finite subsets 
*	 This is equivalent to the statement that the greatest integer k such that k · 2m ≤ n is odd.
†	 For distinct natural numbers n1, …, nk, the role of the finite set {n1, …, nk} is played by the 
natural number 2n
1 + ⋯ + 2n
k.

310
Introduction to Mathematical Logic
of ω that are not members of ω, and then define by transfinite induction the 
following function Θ.
	
Θ
Θ
Θ
Θ
Θ
′∅=
′(
) =
′
(
) −
( ) ⇒
′ =
′
′
<
ω
α
α
λ
λ
β
β
λ
P
r
Lim
o
∪
Let HB = ∪ (Θ″On). Note that HB contains no members of r. Let us define a 
membership relation ∈* on HB. For any members x and y of HB, define x ∈* y 
to mean that either x and y are in ω and x ∈1y, or y ∉ ω and x ∈ y. The “urele-
ments” will be those members of ω that are the “urelements” of M. The “sets” 
will be the ordinary sets of HB that are not “urelements,” and the “proper 
classes” will be the proper classes of NBG that are subclasses of HB. It now 
requires a long careful argument to show that we have a model of UR + 
(RegUR) in which the class of urelements is a denumerable set.
A uniform method for constructing a model of UR + (RegUR) in which the 
class of urelements is a set of arbitrary size may be found in Brunner (1990, 
p. 65).* If AC holds in the underlying theory, it holds in the model as well.
The most important application of axiomatic set theories with urelements 
used to be the construction of independence proofs. The first independence 
proof for the axiom of choice, given by Fraenkel (1922b), depended essen-
tially on the existence of a denumerable set of urelements. More precise 
formulations and further developments may be found in Lindenbaum and 
Mostowski (1938) and Mostowski (1939).† Translations of these proofs into 
set theories without urelements were found by Shoenfield (1955), Mendelson 
(1956b) and Specker (1957), but only at the expense of weakening the axiom of 
regularity. This shortcoming was overcome by the forcing method of Cohen 
(1966), which applies to theories with (Reg) and without urelements.
*	 Brunner attributes the idea behind the construction to J. Truss.
†	 For more information about these methods, see Levy (1965), Pincus (1972), Howard (1973), 
and Brunner (1990).

311
5
Computability
5.1  Algorithms: Turing Machines
An algorithm is a computational method for solving each and every problem 
from a large class of problems. The computation has to be precisely specified 
so that it requires no ingenuity for its performance. The familiar technique 
for adding integers is an algorithm, as are the techniques for computing the 
other arithmetic operations of subtraction, multiplication and division. The 
truth table procedure to determine whether a statement form is a tautology 
is an algorithm within logic itself.
It is often easy to see that a specified procedure yields a desired algorithm. 
In recent years, however, many classes of problems have been proved not to 
have an algorithmic solution. Examples are:
	
1.	Is a given wf of quantification theory logically valid?
	
2.	Is a given wf of formal number theory S true (in the standard 
interpretation)?
	
3.	Is a given wf of S provable in S?
	
4.	Does a given polynomial f(x1, …, xn) with integral coefficients have 
integral roots (Hilbert’s 10th problem)?
In order to prove rigorously that there does not exist an algorithm for answer-
ing such questions, it is necessary to supply a precise definition of the notion 
of algorithm.
Various proposals for such a definition were independently offered in 1936 
by Church (1936b), Turing (1936–1937), and Post (1936). All of these defini-
tions, as well as others proposed later, have been shown to be equivalent. 
Moreover, it is intuitively clear that every procedure given by these defini-
tions is an algorithm. On the other hand, every known algorithm falls under 
these definitions. Our exposition will use Turing’s ideas.
First of all, the objects with which an algorithm deals may be assumed to 
be the symbols of a finite alphabet A = {a0, a1, …, an}. Nonsymbolic objects can 

312
Introduction to Mathematical Logic
be represented by symbols, and languages actually used for computation 
require only finitely many symbols.*
A finite sequence of symbols of a language A is called a word of A. It is con-
venient to admit an empty word Λ consisting of no symbols at all. If P and Q 
are words, then PQ denotes the word obtained by writing Q to the right of P. 
For any positive integer k, Pk shall stand for the word made up of k consecu-
tive occurrences of P.
The work space of an algorithm often consists of a piece of paper or a 
blackboard. However, we shall make the simplifying assumption that all 
calculations take place on a tape that is divided into squares (see Figure 5.1). 
The tape is potentially infinite in both directions in the sense that, although 
at any moment it is finite, more squares always can be added to the right- 
and left-hand ends of the tape. Each square contains at most one symbol of 
the alphabet A. At any one time, only a finite number of squares contain 
symbols, while the rest are blank. The symbol a0 will be reserved for the 
content of a blank square. (In ordinary language, a space is sometimes used 
for the same purpose.) Thus, the condition of the tape at a given moment 
can be represented by a word of A; the tape in Figure 5.1 is a2a0a5a1. Our 
use of a one-dimensional tape does not limit the algorithms that can be 
handled; the information in a two-dimensional array can be encoded as a 
finite sequence.†
Our computing device, which we shall refer to as a Turing machine, works 
in the following way. The machine operates at discrete moments of time, not 
continuously. It has a reading head which, at any moment, will be scanning 
one square of the tape. (Observation of a larger domain could be reduced to 
consecutive observations of individual squares.) The device then reacts in 
any of four different ways:
	
1.	It prints a symbol in the square, erasing the previous symbol.
	
2.	It moves to the next square to the right.
	
3.	It moves to the next square to the left.
	
4.	It stops.
*	 If a language has a denumerable alphabet {a0, a1, …}, then we can replace it by the alphabet 
{b, *}. Each symbol an of the old alphabet can be replaced by the expression b* ⋯* , consisting 
of b followed by n occurrences of*.
†	 This follows from the fact that there is an effective one–one correspondence between the set 
of pairs of natural numbers and the set of natural numbers. For the details, see pages 184–185.
a2
a5
a1
Figure 5.1

313
Computability
What the machine does depends not only on the observed symbol but also on 
the internal state of the machine at that moment (which, in turn, depends on 
the previous steps of the computation and on the structure of the machine). 
We shall make the plausible assumption that a machine has only a finite 
number of internal states {q0, q1, …, qm}. The machine will always begin its 
operation in the initial state q0.
A step in a computation corresponds to a quadruple of one of the following 
three forms: (1) qjaiakqr; (2) qjaiRqr; (3) qjaiLqr. In each case, qj is the present 
internal state, ai is the symbol being observed, and qr is the internal state 
after the step. In form (1), the machine erases ai and prints ak. In form (2), the 
reading head of the machine moves one square to the right, and, in form (3), 
it moves one square to the left. We shall indicate later how the machine is 
told to stop.
Now we can give a precise definition. A Turing machine with an alphabet A 
of tape symbols {a0, a1, …, an} and with internal states {q0, q1, …, qm} is a finite set 
T  of quadruples of the forms (1) qjaiakqr, (2) qjaiRqr, and (3) qjaiLqr such that 
no two quadruples of T    have the same first two symbols.
Thus, for fixed qjai, no two quadruples of types (1), (2), and (3) are in T. 
This condition ensures that there is never a situation in which the machine is 
instructed to perform two contradictory operations.
The Turing machine T   operates in accordance with its list of quadruples. 
This can be made precise in the following manner.
By a tape description of T    we mean a word such that: (1) all symbols in the 
word but one are tape symbols; (2) the only symbol that is not a tape symbol 
is an internal state qj; and (3) qj is not the last symbol of the word.
A tape description describes the condition of the machine and the tape at a 
given moment. When read from left to right, the tape symbols in the descrip-
tion represent the symbols on the tape at that moment, and the tape symbol 
that occurs immediately to the right of qj in the tape description represents 
the symbol being scanned by the reading head at that moment. If the internal 
state qj is the initial state q0, then the tape description is called an initial tape 
description.
Example
The tape description a2a0q1a0a1a1 indicates that the machine is in the internal 
state q1, the tape is as shown in Figure 5.2, and the reading head is scanning 
the square indicated by the arrow.
a2
a0
a0
a1
a1
Figure 5.2 

314
Introduction to Mathematical Logic
We say that T   moves one tape description α into another one β (abbreviated 
α
β
↠
T
) if and only if one of the following is true.
	
1.	α is of the form PqjaiQ, β is of the form PqrakQ, and qjaiakqr is one of 
the quadruples of T . *
	
2.	α is of the form PasqjaiQ, β is of the form PqrasaiQ, and qjaiLqr is one 
of the quadruples of T .
	
3.	α is of the form qjaiQ, β is of the form qra0aiQ, and qjaiLqr is one of the 
quadruples of T .
	
4.	α is of the form PqjaiakQ, β is of the form PaiqrakQ, and qjaiRqr is one 
of the quadruples of T .
	
5.	α is of the form Pqjai, β is of the form Paiqra0, and qjaiRqr is one of the 
quadruples of T .
According to our intuitive picture, “T   moves α into β” means that, if the con-
dition at a time t of the Turing machine and tape is described by α, then the 
condition at time t + 1 is described by β. Notice that, by clause 3, whenever 
the machine reaches the left-hand end of the tape and is ordered to move 
left, a blank square is attached to the tape on the left; similarly, by clause 5, 
a blank square is added on the right when the machine reaches the right-
hand end and has to move right.
We say that T  stops at tape description α if and only if there is no tape 
description β such that α
β
↠
T
. This happens when qjai occurs in α but qjai is 
not the beginning of any quadruple of T .
A computation of T   is a finite sequence of tape descriptions α0, …, αk (k ≥ 0) 
such that the following conditions hold.
	
1.	α0 is an initial tape description, that is, the internal state occurring in 
α is q0.
	
2.	α
α
i
i
↠
T
+1 for 0 ≤ i < k
	
3.	T  stops at αk.
This computation is said to begin at α0 and end at αk. If there is a computation 
beginning at α0, we say that T    is applicable to α0.
The algorithm AlgT   determined by T   is defined as follows:
For any words P and Q of the alphabet A of T , AlgT  (P) = Q if and only if 
there is a computation of T    that begins with the tape description q0P and 
ends with a tape description of the form R1qjR2, where Q = R1R2.
This means that, when T    begins at the left-hand end of P and there is nothing 
else on the tape, T   eventually stops with Q as the entire content of the tape. 
*	 Here and below, P and Q are arbitrary (possibly empty) words of the alphabet of T.

315
Computability
Notice that AlgT   need not be defined for certain words P. An algorithm AlgT  
determined by a Turing machine T    is said to be a Turing algorithm.
Example
In any computation of the Turing machine T    given by
	
q a Rq
q a a q
q a a q
q a a q
0
0
0
0
1
0
1
0
2
0
1
0
0
1
,
,
,
,
…
n
T   locates the first nonblank symbol (if any) at or to the right of the square 
scanned at the beginning of the computation, erases that symbol, and then 
stops. If there are only blank squares at or to the right of the initial square, 
T    keeps on moving right forever.
Let us now consider computations of number-theoretic functions. For con-
venience, we sometimes will write | instead of a1 and B instead of a0. (Think 
of B as standing for “blank.”) For any natural number k, its tape representation 
k will stand for the word |k+1, that is, the word consisting of k + 1 occurrences 
of |. Thus, 0
1
2
=
=
=
|,
||,
|||, and so on. The reason why we represent k by 
k + 1 occurrences of | instead of k occurrences is that we wish 0 to be a non-
empty word, so that we will be aware of its presence. The tape representation 
(
,
,
,
)
k k
kn
1
2 …
 of an n-tuple of natural numbers (k1, k2, …, kn) is defined to be 
the word k
k
kn
1
2
B
B
B

. For example, ( , , , )
3 1 0 5  is ||||B||B|B||||||.
A Turing machine T    will be thought of as computing the following partial 
function fT ,1 of one variable.*
fT ,1(k)=m if and only if the following condition holds: AlgT ( )
k  is defined 
and Alg
E
E
T ( )
k
m
=
1
2, where E1 and E2 are certain (possibly empty) words 
consisting of only Bs (blanks).
The function fT,  1 is said to be Turing-computable. Thus, a one-place partial 
function f is Turing-computable if and only if there is a Turing machine such 
that f = fT,  1.
For each n > 1, a Turing machine T  also computes a partial function fT,  n of 
n variables. For any natural numbers k1, …, kn:
fT,   n(k1, …, kn) = m if and only if the following condition holds:
AlgT ((
,
,
,
))
k
k
kn
1
2 …
 is defined and Alg
E
E
T ((
,
,
,
))
k
k
k
m
n
1
2
1
2
…
=
, where 
E1 and E2 are certain (possibly empty) words consisting of only Bs (blanks).
The partial function fT,  n is said to be Turing-computable. Thus, an n-place 
­partial function f is Turing-computable if and only if there is a Turing 
machine T   such that f = fT,  n.
Notice that, at the end of a computation of a value of a Turing-computable 
function, only the value appears on the tape, aside from blank squares at 
either or both ends, and the location of the reading head does not matter. 
Also observe that, whenever the function is not defined, either the Turing 
*	 Remember that a partial function may fail to be defined for some values of its argument. 
Thus, a total function is considered to be a special case of a partial function.

316
Introduction to Mathematical Logic
machine will never stop or, if it does stop, the resulting tape is not of the 
appropriate form E
E
1
2
m
.
Examples
	
1.	Consider the Turing machine T, with alphabet {B, |}, defined 
by q0|Lq1, q1B|q2. T  computes the successor function N(x), 
since q k
q Bk
q k
0
1
2
1
↠
↠
T
T
+ , and T  stops at q2
1
k + . Hence N(x) is 
Turing-computable.
	
2.	The Turing machine T    defined by
	
q
Bq
q BRq
q B q
0
1
1
0
0
2
|
,
,
|
	
	 computes the zero function Z(x). Given k on the tape, T   moves right, 
erasing all |s until it reaches a blank, which it changes to a |. So, 0 is 
the final result. Thus, Z(x) is Turing-computable.
	
3.	The addition function is computed by the Turing machine T defined 
by the following seven quadruples:
	
q
Bq
q BRq
q
Rq
q B q
q
Rq
q BL q
q
Bq
0
0
0
1
1
1
1
2
2
2
2
3
3
3
|
,
,
|
,
|
,
|
,
|
,
|
In fact, for any natural numbers m and n,
	
q
q
B
q B
B
Bq
B
B
q B
0
0
1
1
0
1
1
1
1
1
(
, )
|
|
|
|
|
|
|
|
m n
m
n
m
n
m
n
m
n
=
+
+
+
+
+
↠
↠
↠
↠
T
T
T
T

↠
↠
↠
↠
↠
T
T
T
T
T
B
q
B
q B
B
q
B
B
q BB
B
|
||
||
|
|
|
m
n
m n
m n
m n
m
2
1
2
2
1
3
1
3
+
+
+ +
+ +
=
+

nq BB
3
and T   stops at B
q BB
m
n
+
3
.
Exercises
5.1	 Show that the function U2
2 such that U
x x
x
2
2
1
2
2
(
,
) =
 is Turing-computable.
5.2	 a.	
What function f(x1, x2, x3) is computed by the following Turing 
machine?
	
q
q
q
Bq
q BRq
q BRq
q
Rq
q BRq
q
Bq
q BRq
||
0
1
1
0
0
1
1
2
2
2
2
3
3
4
4
3
,
|
,
,
,
|
,
,
|
,
	
b.	 What function f(x) is computed by the following Turing machine?
	
q
Bq
q BRq
q B q
0
1
1
2
2
2
|
,
,
|

317
Computability
5.3	 a.	
State in plain language the operation of the Turing machine, 
described in Example 3, for computing the addition function.
	
b.	 Starting with the tape description q0|||B|||, write the sequence of 
tape descriptions that make up the computation by the addition 
machine of Example 3.
5.4	 What function f(x) is computed by the following Turing machine?
	
q
Rq
q
Rq
q B q
q
Bq
q B q
q B q
q BRq
q
Lq
q
Lq
q
R
0
1
4
4
6
0
1
2
4
5
1
7
2
3
5
5
7
7
3
|
|
|
|
|
|
|
|
| qq
q BLq
q BRq
q BRq
q
Lq
q
Bq
3
5
6
7
8
3
4
6
6
8
8
|
|
5.5	 Find a Turing machine that computes the function sg(x). (Recall that 
sg(0) = 0 and sg(x) = 1 for x > 0.)
5.6D	Find Turing machines that compute the following functions.
	
a.	 x
y
− (Remember that x
y
x
y
−
=
− if x ≥ y, and x
y
−
= 0 if x < y.)
	
b.	 [x/2] (Recall that [x/2] is the greatest integer less than or equal to 
x/2. Thus, [x/2] = x/2 if x is even, and [x/2] = (x − 1)/2 if x is odd.)
	
c.	 x · y, the product of x and y.
5.7	 If a function is Turing-computable, show that it is computable by infi-
nitely many different Turing machines.
5.2  Diagrams
Many Turing machines that compute even relatively simple functions (like 
multiplication) require a large number of quadruples. It is difficult and 
tedious to construct such machines, and even more difficult to check that 
they do the desired job. We shall introduce a pictorial technique for con-
structing Turing machines so that their operation is easier to comprehend. 
The basic ideas and notation are due to Hermes (1965).
	
1.	Let T1, …, Tr   be any Turing machines with alphabet A = {a0, a1, …, ak}.
	
2.	Select a finite set of points in a plane. These points will be called 
vertices.
	
3.	To each vertex attach the name of one of the machines T1, …, Tr. Copies 
of the same machine may be assigned to more than one vertex.

318
Introduction to Mathematical Logic
	
4.	Connect some vertices to others by arrows. An arrow may go from 
a vertex to itself. Each arrow is labeled with one of the numbers 
0, 1, …, k. No two arrows that emanate from the same vertex are 
allowed to have the same label.
	
5.	One vertex is enclosed in a circle and is called the initial vertex.
The resulting graph is called a diagram.
Example
See Figure 5.3.
We shall show that every diagram determines a Turing machine whose 
operation can be described in the following manner. Given a tape and a spe-
cific square on the tape, the Turing machine of the initial vertex V of the dia-
gram begins to operate, with its reading head scanning the specified square 
of the tape. If this machine finally stops and the square being scanned at the 
end of the computation contains the symbol ai, then we look for an arrow 
with label i emanating from the vertex V. If there is no such arrow, the com-
putation stops. If there is such an arrow, it leads to a vertex to which another 
Turing machine has been assigned. Start that machine on the tape produced 
by the previous computation, at the square that was being scanned at the end 
of the computation. Repeat the same procedure that was just performed, and 
keep on doing this until the machine stops. The resulting tape is the output 
of the machine determined by the diagram. If the machine never stops, then 
it is not applicable to the initial tape description.
The quadruples for this Turing machine can be specified in the following 
way.
	
1.	For each occurrence in the diagram of a machine Tj, write its qua-
druples, changing internal states so that no two machine occur-
rences have an internal state in common. The initial vertex machine 
is not to be changed. This retains q0 as the initial internal state of 
the machine assigned to the initial vertex. For every other machine 
occurrence, the original initial state q0 has been changed to a new 
internal state.
0
0
2
1
2
3
0
1
1
1
Figure 5.3 

319
Computability
	
2.	If an occurrence of some Ti  is connected by an arrow →
u  to some 
Tj, then, for every (new) internal state qs of that occurrence of Ti 
such that no (new) quadruple of Ti  begins with qsau, add the qua-
druple qsauauqt, where qt is the (new) initial state for Tj. (Step 2 
ensures that, whenever Ti  stops while scanning au, Tj  will begin 
operating.)
The following abbreviations are used in diagrams:
	
1.	If one vertex is connected to another vertex by all arrows →→… →
0
1
,
,
,
,
k
we replace the arrows by one unlabelled arrow.
	
2.	If one vertex is connected to another by all arrows except →
u , we 
replace all the arrows by →
≠u.
	
3.	Let T1T2 stand for T1  → T2, let T1T2T3 stand for T1 → T2 → T3, and so on. 
Let T   2 be T T, let T   3 be T T T, and so forth.
	
4.	If no vertex is circled, then the leftmost vertex is to be initial.
To construct diagrams, we need a few simple Turing machines as building 
blocks.
	
1.	r (right machine). Let {a0, a1, …, ak} be the alphabet. r consists of the 
quadruples q0aiRq1 for all ai. This machine, which has k + 1 qua-
druples, moves one square to the right and then stops.
	
2.	l (left machine). Let {a0, a1, …, ak} be the alphabet. l consists of the 
quadruples q0aiLq1 for all ai. This machine, which has k + 1 quadru-
ples, moves one square to the left and then stops.
	
3.	aj (constant machine) for the alphabet {a0, a1, …, ak}. aj consists of 
the quadruples q0aiajq1 for all ai. This machine replaces the initial 
scanned symbol by aj and then stops. In particular, a0 erases the 
scanned symbol, and a1 prints |.
Examples of Turing Machines Defined by Diagrams
	
1.	P (Figure 5.4) finds the first blank to the right of the initially scanned 
square. In an alphabet {a0, a1, …, ak}, the quadruples for the machine 
P are q0aiRq1 for all ai, and q1aiaiq0 for all ai ≠ a0.
r
 ≠ 0
Figure 5.4 

320
Introduction to Mathematical Logic
	
2.	Λ (Figure 5.5) finds the first blank to the left of the initially scanned 
square.
Exercises
5.8	 Describe the operations of the Turing machines ρ (Figure 5.6) and λ 
(Figure 5.7) and write the list of quadruples for each machine.
5.9	 Show that machine S in Figure 5.8 searches the tape for a nonblank 
square. If there are such squares, S finds one and stops. Otherwise, 
S never stops.
≠ 0
1
Figure 5.5 
r
0
Figure 5.6 
1
0
Figure 5.7 
≠ 0
0
0
a11
a1ρa0r
λa0ρ  
ρa0λ
a1λa0
r
0
≠ 0
Figure 5.8 

321
Computability
To describe some aspects of the operation of a Turing machine on part of a 
tape, we introduce the following notation:
~	
arbitrary symbol
B … B	 sequence of blanks
B …	
everything blank to the right
… B	
everything blank to the left
W	
nonempty word consisting of nonblanks
X	
W1BW2B … Wn(n ≥ 1), a sequence of nonempty words of nonblanks, 
separated by blanks
Underlining will indicate the scanned symbol.
More Examples of Turing Machines Defined by Diagrams
	
3.	R (right-end machine). See Figure 5.9.
	
 XBB
XBB
⇒~
	
	 Squares on the rest of the tape are not affected. The same assump-
tion is made in similar places below. When the machine R begins 
on a square preceding a sequence of one or more nonempty words, 
followed by at least two blank squares, it moves right to the first of 
those blank squares and stops.
	
4.	L  (left-end machine). See Figure 5.10.
	
BBX
BBX
 ⇒
~
	
5.	T (left-translation machine). See Figure 5.11.*
	
 BWB
WBB
⇒~
	
	 This machine shifts the whole word W one square to the left.
*	 There is a separate arrow from r2 to each of the groups on the right and a separate arrow from 
each of these, except la0, back to r2.
Pr
1
0
≠ 0
Figure 5.9 

322
Introduction to Mathematical Logic
	
6.	σ (shift machine). See Figure 5.12.
	
BW BW B
BW B
B
1
2
2
⇒
…
	
	 In the indicated situation, W1 is erased and W2 is shifted leftward so 
that it begins where W1 originally began.
	
7.	C (clean-up machine). See Figure 5.13.
	
~
~
BBXBWB
WB
B
⇒
…
	
8.	K (word-copier). See Figure 5.14.
	
BWB
BWBWB
…⇒
…
r
0
≠ 0
Λ1
Figure 5.10 
r2
1
0
k
1a0
1a1
1ak
Figure 5.11 
a0T
T
0
≠ 0
Λ1
Figure 5.12 

323
Computability
	
9.	Kn (n-shift copier). See Figure 5.15.
	
BW BW
B
W B
BW BW
B
W BW B
n
n
n
n
n
−
−
…
… ⇒
…
…
1
1
1
1
Exercises
5.10	 Find the number-theoretic function f(x) computed by each of the fol-
lowing Turing machines.
	a.	 1a1
	b.	 Figure 5.16
	c.	 PKΛa1Λ(ra0)2
5.11	 Verify that the given functions are computed by the indicated Turing 
machines.
	a.	 |x − y| (Figure 5.17)
	b.	 x + y Pa1Λ(ra0)2
	c.	 x · y (Figure 5.18)
5.12	 Draw diagrams for Turing machines that will compute the following 
functions: (a) max(x, y) (b) min(x, y) (c) x
y
− (d) [x/2].
rPσ
TΛ1T
0
≠ 0
Λ1
Figure 5.13 
1
0
P
k
a0P2akΛ2ak
a0P2a1Λ2a1
Λr
Figure 5.14 

324
Introduction to Mathematical Logic
1
0
Pn
k
a0Pn+1a1Λn+1a1
a0Pn+1akΛn+1ak
Λnr
Figure 5.15 
0
a0r
a1ra1
≠ 0
Figure 5.16 
0
P2 1a01
1
1
a0r
Λa1
Λ2r
Figure 5.17 
0
0
K
r
r
Pra1rC
1a0(r2)
1a0
1a1Λ(ra0)2 P
1
1
1
Figure 5.18 

325
Computability
5.13	 Prove that, for any Turing machine T    with alphabet {a0, …, ak}, there is 
a diagram using the Turing machines r, l, a0, …, ak that defines a Turing 
machine T  such that T   and S   have the same effect on all tapes. (In fact, 
S  can be defined so that, except for two additional trivial initial moves 
left and right, it carries out the same computations as T  .)
5.3  Partial Recursive Functions: Unsolvable Problems
Recall, from Section 3.3, that the recursive functions are obtained from the 
initial functions (the zero function Z(x), the successor function N(x), and the 
projection functions U
x
x
i
n
n
(
,
,
)
1 …
) by means of substitution, recursion, and 
the restricted μ-operator. Instead of the restricted μ-operator, let us introduce 
the unrestricted μ-operator:
	
If
f x
x
y
x
x
y
x
x
n
n
n
(
,
,
)
( (
,
,
,
)
)
(
,
,
1
1
1
0
…
=
…
=
=
…
µ g
g
the least
such that
y
,
)
y = 0
then
is said to arise from
by means of the unrestricted
ope
f
g
µ
rator.
Notice that, for some x1, …, xn, the value f(x1, …, xn) need not be defined; this 
happens when there is no y such that ɡ(x1, …, xn, y) = 0.
If we replace the restricted μ-operator by the unrestricted μ-operator in 
the definition of the recursive functions, we obtain a definition of the par-
tial recursive functions. In other words, the partial recursive functions are 
those functions obtained from the initial functions by means of substitution, 
recursion and the unrestricted μ-operator.
Whereas all recursive functions are total functions, some partial recursive 
functions will not be total functions. For example, μy(x + y = 0) is defined 
only when x = 0.
Since partial recursive functions may not be defined for certain arguments, 
the definition of the unrestricted μ-operator should be made more precise:
	
µy
x
x
y
k
u
k
x
x
u
n
n
( (
,
,
, )
)
,
,
(
,
,
, )
g
g
1
1
0
0
…
=
=
≤
<
…
means that for
is defineed and
and
g
g
(
,
,
, )
,
(
,
,
, )
x
x
u
x
x
k
n
n
1
1
0
0
…
≠
…
=
Observe that, if R(x1, …, xn, y) is a recursive relation, then μy(R(x1, …, xn, y)) 
can be considered an admissible application of the unrestricted μ-operator. 
In fact, μy(R(x1, …, xn, y)) = μy(CR(x1, …, xn, y) = 0), where CR is the characteristic 
function of R. Since R is a recursive relation, CR is, by definition, a recursive 
function.

326
Introduction to Mathematical Logic
Exercises
5.14	 Describe the following partial recursive functions.
	a.	 μy(x + y + 1 = 0)
	b.	 μy(y > x)
	c.	 μy(y + x = x)
5.15	 Show that all recursive functions are partial recursive.
5.16	 Show that every partial function whose domain is a finite set of natural 
numbers is a partial recursive function.
It is easy to convince ourselves that every partial recursive function 
f(x1, …, xn) is computable, in the sense that there is an algorithm that computes 
f(x1, …, xn) when f(x1, …, xn) is defined and gives no result when f(x1, …, xn) 
is undefined. This property is clear for the initial functions and is inher-
ited under the operations of substitution, recursion and the unrestricted 
μ-operator.
It turns out that the partial recursive functions are identical with the 
Turing-computable functions. To show this, it is convenient to introduce a 
different kind of Turing-computablility.
A partial number-theoretic function f(x1, …, xn) is said to be standard Turing-
computable if there is a Turing machine T   such that, for any natural numbers 
k1, …, kn, the following holds.
Let B B
B
B
k
k
kn
1
2 …
 be called the argument strip.* Notice that the argument 
strip is B(
,
,
)
k
kn
1 …
. Take any tape containing the argument strip but with-
out any symbols to the right of it. (It may contain symbols to the left.) The 
machine T   is begun on this tape with its reading head scanning the first | 
of k1. Then
	
1.	T   stops if and only if f(k1, …, kn) is defined.
	
2.	If T  stops, the tape contains the same argument strip as before, 
­followed by B f k
kn
(
,
,
)
1 …
. Thus, the final tape contains
	
B B
B
B
B
k
k
k
f k
k
n
n
1
2
1
…
…
(
,
,
)
	Moreover:
	
3.	The reading head is scanning the first | of f k
kn
(
,
,
)
1 …
.
	
4.	There is no nonblank symbol on the tape to the right of f k
kn
(
,
,
)
1 …
.
	
5.	During the entire computation, the reading head never scans any 
square to the left of the argument strip.
*	 For a function of one variable, the argument strip is taken to be Bk1.

327
Computability
For the sake of brevity, we shall say that the machine T   described above 
ST-computes the function f(x1, …, xn).
Thus, the additional requirement of standard Turing computability is that 
the original arguments are preserved, the machine stops if and only if the 
function is defined for the given arguments, and the machine operates on 
or to the right of the argument strip. In particular, anything to the left of the 
argument strip remains unchanged.
Proposition 5.1
Every standard Turing-computable function is Turing-computable.
Proof
Let T  be a Turing machine that ST-computes a partial function f(x1, …, xn). 
Then f is Turing-computable by the Turing machine T  PC. In fact, after T 
­operates, we obtain B
B
B
B
x
x
f x
x
n
n
1
1
…
…
(
,
,
), with the reading head at the 
leftmost | of f x
xn
(
,
,
)
1 …
. P then moves the reading head to the right of 
f x
xn
(
,
,
)
1 …
, and then C removes the original argument strip.
Proposition 5.2
Every partial recursive function is standard Turing-computable.
Proof
	
a.	Pra1 ST-computes the zero function Z(x).
	
b.	The successor function N(x) is ST-computed by PKa1Λr.
	
c.	The projection function U
x
x
x
i
n
n
i
(
,
,
)
1 …
=
 is ST-computed by R Kn−i+1Λr.
	
d.	(Substitution.) Let f(x1, …, xn) = g(h1(x1, …, xn), …, hm(x1, …, xn)) and 
assume that T    ST-computes g and Tj  ST-computes hj for 1 ≤ j ≤ m. Let 
Sj be the machine Tj    Pσn(Kn+j)nΛnr. The reader should verify that f is 
ST-computed by
	
T
S S
S
T
T
1
1
2
3
1
P K
r
P
r
P
r
(
)
n
n
n
m
m
n
m
m
+
−
…
ΛΛ
σσ ΛΛ
σσ ΛΛ
	
	 We take advantage of the ST-computability when, storing x
xn
1,
,
,
…
 
h x
x
h x
x
n
i
n
1
1
1
(
,
,
),
,
(
,
,
)
…
…
…
 on the tape, we place (
,
,
)
x
xn
1 …
 on the tape 
to the right and compute h
x
x
i
n
+
…
1
1
(
,
,
) without disturbing what we have 
stored on the left.

328
Introduction to Mathematical Logic
	
e.	(Recursion.) Let
	
f x
x
g x
x
f x
x
y
h x
x
y f x
x
n
n
n
n
(
,
,
, )
(
,
,
)
(
,
,
,
)
(
,
,
, , (
,
,
1
1
1
1
1
0
1
…
=
…
…
+
=
…
…
n y
, ))
	
	 Assume that T  ST-computes ɡ and T    ST-computes h. Then the reader 
should verify that the machine in Figure 5.19 ST-computes f.
	
f.	Unrestricted μ-operator. Let f(x1, … xn) = μy(ɡ(x1, …, xn, y) = 0) and assume 
that T    ST-computes ɡ. Then the machine in Figure 5.20 ST-computes f.
Exercise
5.17	 For a recursion of the form
	
f
k
f y
h y f y
( )
(
)
( , ( ))
0
1
=
+
=
show how the diagram in Figure 5.19 must be modified.
Corollary 5.3
Every partial recursive function is Turing-computable.
ra1rK2 (Kn+3)n Λn+11a0 r Pr     PKn+2 1a01
r(Kn+2)n ra1r Kn+3 Λn+2r     PKn+4 1a01
r(Kn+4)n+1
1
CΛr
1
0
0
Figure 5.19 
   ra1Λn+1r    r
1ao1Λr
1
0
Pra1rσ1a01
Figure 5.20 

329
Computability
Exercise
5.18	 Prove that every partial recursive function is Turing-computable by a 
Turing machine with alphabet {a0, a1}.
In order to prove the converse of Corollary 5.3, we must arithmetize 
the language of Turing computability by assigning numbers, called Gödel 
numbers, to the expressions arising in our study of Turing machines. “R” 
and “L” are assigned the Gödel numbers 3 and 5, respectively. The tape 
symbols ai are assigned the numbers 7 + 4i, while the internal state sym-
bols qi are given the numbers 9 + 4i. For example, the blank B, which is a0, 
receives the number 7; the stroke |, which is a1, has the number 11; and the 
initial internal state symbol q0 has the number 9. Notice that all symbols 
have odd Gödel numbers, and different symbols have different numbers 
assigned to them.
As in Section 3.4, a finite sequence u0, u1, …, uk of symbols is assigned the 
Gödel number p
p
p
g u
g u
k
g uk
0
1
0
1
(
)
(
)
(
)
…
, where p0, p1, p2, … are the prime numbers 
2, 3, 5, … in ascending order and g(ui) is the Gödel number assigned to ui. For 
example, the quadruple q0a0a1q0 receives the Gödel number 293751179.
By an expression we mean a finite sequence of symbols. We have just shown 
how to assign Gödel numbers to expressions. In a similar manner, to any finite 
sequence E0, E1, …, Em of expressions we assign the number p
p
p
g E
g E
m
g Em
0
1
0
1
(
)
(
)
(
).
…
 
For example, this assigns Gödel numbers to finite sequences of Turing 
machine quadruples and to finite sequences of tape descriptions. Observe 
that the Gödel number of an expression is even and, therefore, different from 
the Gödel number of a symbol, which is odd. Moreover, the Gödel number 
of a sequence of expressions has an even number as an exponent of p0 and is, 
therefore, different from the Gödel number of an expression, which has an 
odd number as an exponent of p0.
The reader should review Sections 3.3 and 3.4, especially the functions lh(x), 
(x)i, and x * y. Assume that x is the Gödel number of a finite sequence w0, 
w1, …, wk; that is, x
p
p
p
g w
g w
k
g wk
=
…
0
1
0
1
(
)
(
)
(
), where g(wj) is the Gödel number 
of wj. Recall that lh(x) = k + 1, the length of the sequence, and (x)j = g(wj), the 
Gödel number of the jth term of the sequence. If in addition, y is the Gödel 
number of a finite sequence v0, v1, …, vm, then x * y is the Gödel number of the 
juxtaposition w0, w1, …, wk, v0, v1, …, vm of the two sequences.
Proposition 5.4
The following number-theoretic relations and functions are primitive recur-
sive. In each case, we write first the notation for the relation or function, then, 
the intuitive interpretation in terms of Turing machines, and, finally, the 
exact definition. (For the proofs of primitive recursiveness, use Proposition 
3.18 and various primitive relations and functions defined in Section 3.3. 

330
Introduction to Mathematical Logic
At a first reading, it may be advisable to concentrate on just the intuitive 
meanings and postpone the technical verification until later.)
IS(x): x is the Gödel number of an internal state symbol qu:
	
(
)
(
)
∃
=
+
<
u
x
u
u x
9
4
Sym(x): x is the Gödel number of an alphabet symbol au:
	
(
)
(
)
∃
=
+
<
u
x
u
u x
7
4
Quad(x): x is the Gödel number of a Turing machine quadruple:
	
lh( )
(( ) )
(( ) )
(( ) )
[
(( ) )
( )
( )
x
x
x
x
x
x
x
=
∧
∧
∧
∧
∨
=
∨
4
3
0
1
3
2
2
2
IS
Sym
IS
Sym
= 5]
TM(x): x is the Gödel number of a Turing machine (in the form of a finite 
sequence of appropriate quadruples):
	
(
)
(( ) )
(
)
(
)
(
[(( )
( )
( )
( )
∀
∧
>
∧∀
∀
≠
⇒
<
<
<
u
x
x
u
v
u
v
x
u
x
u
u
x
v
x
lh
lh
lh
Quad
1
u
v
u
v
x
x
x
)
(( ) )
(( ) )
(( ) ) ]
0
0
1
1
≠
∨
≠
TD(x): x is the Gödel number of a tape description:
	
x
u
x
x
u
x
u
x
u
u
u
x
u
> ∧∀
∨
∧∃
∧
<
<
1
1
(
)
[
(( ) )
(( ) )]
(
)
(( ) )
(
( )
( )
lh
lh
IS
Sym
IS
∀
⇒
+ <
<
u
x
u
x
u
x
u
)
(
(( ) )
( ))
( )
lh
lh
IS
1
Cons(x, y, z): x and y are Gödel numbers of tape descriptions α and β, and z 
is the Gödel number of a Turing machine quadruple that transforms α into β:
	
TD
TD
Quad
IS
( )
( )
( )
(
)
[
(( ) )
( )
( )
( )
( )
x
y
z
w
x
x
z
x
w
x
w
w
w
∧
∧
∧∃
∧
=
∧
<
−
lh
1
0
+
+
=
∧
∧
=
∧
=
∧
=
∧∀
1
1
2
1
2
3
( )
([
(( ) )
( )
( )
( )
( )
( )
( )
(
z
z
y
z
y
z
x
y
w
w
I
Sym
lh
lh
u
u
w
u
w
x
y
z
y
x
u
x
u
u
w
w
)
(
( )
( ) )]
[( )
( )
( )
( )
<
+
≠
∧
≠
+ ⇒
=
∨



=
∧
=
∧
lh
1
3
2
1
II
( )
( )
(
)
(
( )
( ) )
([
( )
( )
y
z
u
u
w
u
w
y
x
w
x
w
u
x
u
u
+
<
=
∧
∀
≠
∧
≠
+ ⇒
=
∧
+
<
∧
1
3
1
2
lh
lh
lh
lh
lh
lh
lh
( )
( )]
[
( )
( )
( )
( )
])]
y
x
w
x
y
x
y w
=
∨
+
=
∧
=
+ ∧
=
∨






+
2
1
7
2
III
[( )
{[
( )
( )
( )
( )
( )
( )
(
z
w
y
z
y
x
y
x
w
w
w
2
1
3
1
5
0
=
∧
≠
∧
=
∧
=
∧
=
∧∀
−
−


lh
lh
u
u
w
u
w
y
x
w
y
z
y
u
x
u
u
)
(
( )
( ) )]
[
( )
( )
( )
( )
<
≠
−∧
≠
⇒
=
∨
=
∧
=
∧
=
∧
lh
lh
 1
0
7
0
3
1
( )
( )
(
)
( )
( ) ]}])]
( )
y
x
u
y
x
u
x
u
u
=
+ ∧∀
=






< <
+
lh
lh
1
0
1

331
Computability
I corresponds to a quadruple qjaiakqr, II to a quadruple qjaiRqr, and III to a 
quadruple qjaiLqr.
NTD(x): x is the Gödel number of a numerical tape description—that is, a 
tape description in which the tape has the form E E
1
2
k
, where each of E1 and 
E2 is empty or consists entirely of blanks, and the location of the reading 
head is arbitrary:
	
TD
Sym
( )
(
)
(
(( ) )
( )
( )
)
(
)
(
( )
( )
x
u
x
x
x
u
v
u
x
u
u
u
u
x
∧∀
⇒
=
∨
=
∧∀
∀
<
<
lh
lh
7
11
)
(
)
(
( )
( )
( )
)
(
)
( )
( )
v
x
w
x
u
w
v
u
w
u
v
v
w
x
x
x
u
<
<
∀
<
∧
<
∧
=
∧
=
⇒
≠
∧∃
lh
lh
11
11
7
<
=
lh ( )(( )
)
x
u
x
11
Stop (x, z): z is the Gödel number of a Turing machine T   
    and x is the Gödel 
number of a tape description α such that T   stops at α:
	
TM
TD
IS
( )
( )
(
)
[
(( ) )
(
)
((( ) )
( )
( )
( )
z
x
u
x
v
z
x
u
x
u
v
z
v
u
∧
∧¬ ∃
∧∃
=
<
<
lh
lh
0
∧
=
+
(( ) )
( )
)]
z
x
v
u
1
1
Comp(y, z): z is the Gödel number of a Turing machine T   and y is the Gödel 
number of a computation of T   
         :
	
y
z
u
y
y
z
u
u
y
u
y
u
>
∧
∧∀
∧
∧
∀
<
−
<
1
1
TM
TD
Stop
( )
(
)
(( ) )
(( )
, )
(
)
( )
( )
lh
lh
lh

( )
( )
(( ) )
(
)
(( ) ,( )
,( ) )
(
)
(
y
w
z
u
u
w
v
y
w
y
y
z
v
−
<
+
<
∃
∧
∀
1
1
0
lh
lh
Cons
IS((( ) ) )
(( ) )
)
y
y
v
v
0
0
9
⇒
=
Num(x): The Gödel number of the word x—that is, of |x+1:
	
Num( )
x
pu
u x
=
≤∏
11
TR(x1, …, xn): The Gödel number of the tape representation (
,
,
)
x
xn
1 …
 of the 
n-tuple (x1, …, xn):
	
TR
Num
Num
Num
(
,
,
)
(
)
(
)
(
)
x
x
x
x
x
n
n
1
1
7
2
7
7
2
2
2
…
=
∗
…
*
*
*
*
*
U(y): If y is the Gödel number of a computation that results in a numerical 
tape description, then U(y) is the number represented on that final tape.*
	
U y
y
u
y
y
u
h y
( )
(|(( )
)
|)
(( )
( )
( )
)
=
−







−
<
−
−
∑
lh
lh
ℓ



1
1
11
1
sg
*	 If y is not the Gödel number of a computation that yields a numerical tape description, U(y) 
is defined, but its value in such cases will be of no significance.

332
Introduction to Mathematical Logic
[Let w be the number, represented by |w+1, on the final tape. The calculation 
of U(y) tallies a 1 for every stroke | that appears on the final tape. This yields 
a sum of w + 1, and then 1 is subtracted to obtain w.]
Tn(z, x1, …, xn, y): y is the Gödel number of a computation of a Turing 
machine with Gödel number z such that the computation begins on the tape 
(
,
,
)
x
xn
1 …
, with the reading head scanning the first | in x1, and ends with a 
numerical tape description:
	
Comp
TR
NTD
( , )
( )
*
(
,
,
)
(( )
)
( )
y z
y
x
x
y
n
y
∧
=
…
∧
−
0
9
1
1
2
lh

When n = 1, replace TR(x1, …, xn) by Num(x1). (Observe that, if Tn(z, x1, …, xn, y1) 
and Tn(z, x1, …, xn, y2), then y1 = y2, since there is at most one computation of a 
Turing machine starting with a given initial tape.)
Proposition 5.5
If T   is a Turing machine that computes a number-theoretic function f(x1, …, xn) 
and e is a Gödel number of T,  then*
	
f x
x
U
yT e x
x
y
n
n
n
(
,
,
)
(
( ,
,
,
, ))
1
1
…
=
…
µ
Proof
Let k1, …, kn be any natural numbers. Then f(k1, …, kn) is defined if and only 
if there is a computation of T  beginning with (
,
,
)
k
kn
1 …
 and ending with 
a numerical tape description—that is, if and only if (∃y)Tn(e, k1, …, xn, y). So, 
f(k1, …, kn) is defined if and only if μyTn(e, k1, …, kn, y) is defined. Moreover, 
when f(k1, …, kn) is defined, μyTn(e, k1, …, kn, y) is the Gödel number of a 
computation of T   beginning with (
,
,
)
k
kn
1 …
 and U(μyTn(e, k1, …, kn, y)) is the 
value yielded by the computation, namely, f(k1, …, kn).
Corollary 5.6
Every Turing-computable function is partial recursive.
Proof
Assume f(x1, …, xn) is Turing-computable by a Turing machine with Gödel 
number e. Then f(x1, …, xn) = U(μyTn(e, x1, …, xn, y)). Since Tn is primitive 
*	 Remember that an equality between two partial functions means that, whenever one of them 
is defined, the other is also defined and the two functions have the same value.

333
Computability
­recursive, μyTn(e, x1, …, xn, y) is partial recursive. Hence, U(μyTn(e, x1, …, xn, y)) 
is partial recursive.
Corollary 5.7
The Turing-computable functions are identical with the partial recursive 
functions.
Proof
Use Corollaries 5.6 and 5.3.
Corollary 5.8
Every total partial recursive function is recursive.
Proof
Assume that the total partial recursive function f(x1, …, xn) is Turing-
computable by the Turing machine with Gödel number e. Then, for all x1, …, 
xn, (∃y)Tn(e, x1, …, xn, y). Hence, μyTn(e, x1, …, xn, y) is produced by an application 
of the restricted μ-operator and is, therefore, recursive. So, U(μyTn(e, x1, …, 
xn, y)) is also recursive. Now use Proposition 5.5.
Corollary 5.9
For any total number-theoretic function f, f is recursive if and only if f is 
Turing-computable.
Proof
Use Corollaries 5.7–5.8 and Exercise 5.15.
Church’s thesis amounts to the assertion that the recursive functions 
are the same as the computable total functions. By Corollary 5.9, this is 
equivalent to the identity, for total functions, of computability and Turing 
computability. This strengthens the case for Church’s thesis because of the 
plausibility of the identification of Turing computability with computabil-
ity. Let us now widen Church’s thesis to assert that the computable func-
tions (partial or total) are the same as the Turing-computable functions. By 
Corollary 5.7, this implies that a function is computable if and only if it is 
partial recursive.

334
Introduction to Mathematical Logic
Corollary 5.10
Any number-theoretic function is Turing-computable if and only if it is stan-
dard Turing-computable.
Proof
Use Proposition 5.1, Corollary 5.6, and Proposition 5.2.
Corollary 5.11 (Kleene’s Normal Form Theorem)
As z varies over all natural numbers, U(μyTn(z, x1, …, xn, y)) enumerates with 
repetitions all partial recursive functions of n variables.
Proof
Use Corollary 5.3 and Proposition 5.5. The fact that every partial recur-
sive function of n variables reappears for infinitely many z follows from 
Exercise  5.7. (Notice that, when z is not the Gödel number of a Turing 
machine, there is no y such that Tn(z, x1, …, xn, y), and, therefore, the corre-
sponding partial recursive function is the empty function.*)
Corollary 5.12
For any recursive relation R(x1, …, xn, y), there exist natural numbers z0 and v0 
such that, for all natural numbers x1, …, xn:
	
a.	(∃y)R(x1, …, xn, y) if and only if (∃y)Tn(z0, x1, …, xn, y)
	
b.	(∀y)R(x1, …, xn, y) if and only if (∀y)¬Tn(v0, x1, …, xn, y)
Proof
	
a.	The function f(x1, …, xn) = μyR(x1, …, xn, y) is partial recursive. Let z0 
be a Gödel number of a Turing machine that computes f. Hence, f(x1, 
…, xn) is defined if and only if (∃y)Tn(z0, x1, …, xn, y). But f(x1, …, xn) is 
defined if and only if (∃y)R(x1, …, xn, y).
	
b.	Applying part (a) to the recursive relation ¬R(x1, …, xn, y), we obtain 
a number v0 such that:
	
(
)
(
,
,
, )
(
)
(
,
,
,
, )
∃
¬
…
∃
…
y
R x
x
y
y T v
x
x
y
n
n
n
1
0
1
if and only if
Now take the negations of both sides of this equivalence.
*	 The empty function is the empty set ∅. It has the empty set as its domain.

335
Computability
Exercise
5.19	 Extend Corollary 5.12 to two or more quantifiers. For example, if R(x1, …, 
xn, y, z) is a recursive relation, show that there are natural numbers z0 
and v0 such that, for all x1, …, xn:
	a.	 (∀z)(∃y)R(x1, …, xn, y, z) if and only if (∀z)(∃y)Tn+1(z0, x1, …, xn, z, y).
	b.	 (∃z)(∀y)R(x1, …, xn, y, z) if and only if (∃z)(∀y)¬Tn+1(v0, x1, …, xn, z, y).
Corollary 5.13
	
a.	(∃y)Tn(x1, x1, x2, …, xn, y) is not recursive.
	
b.	(∃y)Tn(z, x1, …, xn, y) is not recursive.
Proof
	
a.	Assume (∃y)Tn(x1, x1, x2, …, xn, y) is recursive. Then the relation ¬(∃y)
Tn(x1, x1, x2, …, xn, y) ∧ z = z is recursive. So, by Corollary 5.12(a), there 
exists z0 such that
	
(
)( (
)
(
,
,
,
,
, )
)
(
)
(
,
,
∃
¬ ∃
…
∧
=
∃
z
y T x x x
x
y
z
z
z T z
x
n
n
n
1
1
2
0
1
if and only if
x
x
z
n
2,
,
, )
…
	
	 Hence, since z obviously can be omitted on the left,
	
¬ ∃
…
∃
…
(
)
(
,
,
,
,
, )
(
)
(
,
,
,
,
, )
y T x x x
x
y
z T z
x x
x
z
n
n
n
n
1
1
2
0
1
2
if and only if
	
	 Let x1 = x2 = ⋯ = xn = z0. Then we obtain the contradiction
	
¬ ∃
…
∃
…
(
)
(
,
,
,
,
, )
(
)
(
,
,
,
,
, )
y T z
z
z
z
y
z T z
z
z
z
z
n
n
0
0
0
0
0
0
0
0
if and only if
	
b.	If (∃y)Tn(z, x1, x2, …, xn, y) were recursive, so would be, by substitu-
tion, (∃y)Tn(x1, x1, x2, …, xn, y), contradicting part (a).
Exercises
5.20	 Prove that there is a partial recursive function ɡ(z, x) such that, for 
any partial recursive function f(x), there is a number z0 for which f(x) = 
ɡ(z0, x) holds for all x. Then show that there must exist a number v0 such 
that ɡ(v0, v0) is not defined.
5.21	 Let h1(x1, …, xn), …, hk(x1, …, xn) be partial recursive functions, and let 
R1(x1, …, xn), …, Rk(x1, …, xn) be recursive relations that are exhaustive 

336
Introduction to Mathematical Logic
(i.e., for any x1, …, xn, at least one of the relations holds) and pairwise 
mutually exclusive (i.e., for any x1, …, xn, no two of the relations hold). 
Define
	
g(
,
,
)
(
,
,
)
(
,
,
)
(
,
,
)
(
,
,
x
x
h x
x
R x
x
h x
x
R x
x
n
n
n
k
n
k
n
1
1
1
1
1
1
1
…
=
…
…
…
…
if
if
)



	
	 Prove that ɡ is partial recursive.
5.22	 A partial function f(x) is said to be recursively completable if there is a 
recursive function h(x) such that, for every x in the domain of f, h(x) = f(x).
	a.	 Prove that μy T1(x, x, y) is not recursively completable.
	b.	 Prove that a partial recursive function f(x) is recursively complet-
able if the domain D of f is a recursive set—that is, if the property 
“x ∈ D” is recursive.
	c.	 Find a partial recursive function f(x) that is recursively completable 
but whose domain is not recursive.
5.23	 If R(x, y) is a recursive relation, prove that there are natural numbers z0 
and v0 such that
	a.	 ¬[(∃y)R(z0, y) ⇔ (∀y) ¬T1(z0, z0, y)]
	b.	 ¬[(∀y)R(v0, y) ⇔ (∃y)T1(v0, v0, y)]
5.24	 If S(x) is a recursive property, show that there are natural numbers z0 
and v0 such that
	a.	 ¬[S(z0) ⇔ (∀y) ¬T1(z0, z0, y)]
	b.	 ¬[S(v0) ⇔ (∃y)T1(v0, v0, y)]
5.25	 Show that there is no recursive function B(z, x1, …, xn) such that, if z is a 
Gödel number of a Turing number T    and k1, …, kn are natural numbers 
for which fT,   n (k1, …, kn) is defined, then the number of steps in the com-
putation of fT,   n(k1, …, kn) is less than B(z, k1, …, kn).
Let T   be a Turing machine. The halting problem for T   is the problem of 
determining, for each tape description β, whether T    is applicable to β, that 
is, whether there is a computation of T   that begins with β.
We say that the halting problem for T   is algorithmically solvable if there is 
an algorithm that, given a tape description β, determines whether T    is appli-
cable to β. Instead of a tape description β, we may assume that the algorithm 
is given the Gödel number of β. Then the desired algorithm will be a comput-
able function HT   such that
	
H
x
T
T
( ) =
0
if
is the Godel number of a tape description
to which
is a
x

β
pplicable
otherwise
1




337
Computability
If we accept Turing algorithms as exact counterparts of algorithms (that is, 
the extended Church’s thesis), then the halting problem for T   is algorithmi-
cally solvable if and only if the function HT    is Turing-computable, or equiva-
lently, by Corollary 5.9, recursive. When the function HT    is recursive, we say 
that the halting problem for T    is recursively solvable. If HT    is not recursive, we 
say that the halting problem for T    is recursively unsolvable.
Proposition 5.14
There is a Turing machine with a recursively unsolvable halting problem.
Proof
By Proposition 5.2, let T    be a Turing machine that ST-computes the partial 
recursive function μyT1(x, x, y). Remember that, by the definition of standard 
Turing computability, if T    is begun on the tape consisting of only x with its 
reading head scanning the leftmost |, then T   stops if and only if μyT1(x, x, y) 
is defined. Assume that T    has a recursively solvable halting problem, that is, 
that the function HT   is recursive. Recall that the Gödel number of the tape 
description q x
0  is 29 * Num(x). Now,
	
(
)
( , , )
( , , )
,
∃y T x x y
yT x x y
1
1
if and only if
isdefined
if and only if
b
µ
T
egun on
performs a computation
if and only if
* Num
q x
H
x
0
9
2
0
,
(
( ))
T
=
Since HT   , Num, and * are recursive, (∃y)T1(x, x, y) is recursive, contradicting 
Corollary 5.13(a) (when n = 1).
Exercises
5.26	 Give an example of a Turing machine with a recursively solvable halt-
ing problem.
5.27	 Show that the following special halting problem is recursively unsolvable: 
given a Gödel number z of a Turing machine T   and a natural number 
x, determine whether T    is applicable to q x
0 .
5.28	 Show that the following self-halting problem is recursively unsolvable: 
given a Gödel number z of a Turing machine T,  determine whether T     is 
applicable to q z
0 .
5.29	 The printing problem for a Turing machine T    and a symbol ak is the 
problem of determining, for any given tape description α, whether T, 
begun on α, ever prints the symbol ak. Find a Turing machine T   and a 
symbol ak for which the printing problem is recursively unsolvable.

338
Introduction to Mathematical Logic
5.30	 Show that the following decision problem is recursively unsolvable: 
given any Turing machine T,  if T   is begun on an empty tape, deter-
mine whether T   stops (that is, whether T    is applicable to q0B).
5.31D	Show that the problem of deciding, for any given Turing machine, 
whether it has a recursively unsolvable halting problem is itself recur-
sively unsolvable.
To deal with more intricate decision problems and other aspects of the 
theory of computability, we need more powerful tools. First of all, let us 
introduce the notation
	
ϕ
µ
z
n
n
n
n
x
x
U
yT z x
x
y
(
,
,
)
(
( ,
,
,
, ))
1
1
…
=
…
Thus, by Corollary 5.11, ϕ
ϕ
ϕ
0
1
2
n
n
n
,
,
, … is an enumeration of all partial recur-
sive functions of n variables. The subscript j is called an index of the func-
tion ϕj
n. Each partial recursive function of n variables has infinitely many 
indices.
Proposition 5.15 (Iteration Theorem or s-m-n Theorem)
For any positive integers m and n, there is a primitive recursive function 
s
z y
y
n
m
m
( ,
,
,
)
1 …
 such that
	
ϕ
ϕ
z
m n
n
m
s
z y
y
n
n
x
x
y
y
x
x
nm
m
+
…
…
…
=
…
(
,
,
,
,
,
)
(
,
,
)
( ,
,
,
)
1
1
1
1
Thus, not only does assigning particular values to z, y1, …, ym in 
ϕz
m n
n
m
x
x
y
y
+
…
…
(
,
,
,
,
,
)
1
1
 yield a new partial recursive function of n vari-
ables, but also the index of the resulting function is a primitive recursive 
function of the old index z and of y1, …, ym.
Proof
If T    is a Turing machine with Gödel number z, let T y
ym
1 ,
,
…
 be a Turing 
machine that, when begun on (
,
,
)
x
xn
1 …
, produces (
,
,
,
,
,
)
x
x
y
y
n
m
1
1
…
…
, 
moves back to the leftmost | of x1, and then behaves like T.  Such a machine 
is defined by the diagram
	
Rr a r
r a r
r
r a r
r
(
)
(
)
(
)
1
1
1
y
y
ym
1
2
1
1
1
+
+
+
…
L T
The Gödel number s
z y
y
n
m
m
( ,
,
,
)
1 …
 of this Turing machine can be effectively 
computed and, by Church’s thesis, would be partial recursive. In fact, sn
m can 
be computed by a primitive recursive function ɡ(z, y1, …, ym) defined in the 

339
Computability
following manner. Let t = y1 + ⋯ + ym + 2m + 1. Also, let u(i) = 29+4i3751179+4i 
and v(i) = 29+4i31153713+4i. Notice that u(i) is the Gödel number of the quadru-
ple qiB|qi and v(i) is the Gödel number of the quadruple qi|Rqi+1. Then take 
ɡ(z, y1, …, ym) to be
	
[
]
|
|
( )
2
3
5
7
2 3
5 7
2 3 5 7
2
3
5 7
2
3 5 7
2
4
9 11 3 9
9 7 3 13
13 11 3 9
13 7 7 17
*
p i
u i
i
−
=2
2
2
3
2
3 5 7
2
4
1
9 4
1 3
7 3 9 4
1
4
1
2
y
i
v i
i
y
u
p
p
y
y
+
−
−
+
∏
∗
+
+
+
+
|
|
( )
| (
)|
(
)
(
)
*
( )
| (
)|
( )
(
)
i
i y
y
y
i
y
v i
p
y
y
=
+
+
+
−
+
+
∏
+
+
+
+
1
1
2
1
9 4
5
7 3 9
4
4
2
4
1
2
3 5 7
2
1
2
*
4
2
6
9 4
1 2
1
7 3 9 4
1 2
1
1
1
22
3 5 7
(
)
(
)
(
)
y
y
y
ym
m
y
ym
m
+
+
+
+
+
−+
−
+
+
+
−+
…
*
*
*


p
p
i
y
y
m
u i
i y
y
m
y
y
m
i
y
m
m
m
2
2
2
2
2
1
1
1
1
1
1
| (
)|
( )
| (
−
+
+
+
=
+
+
+
+
+
+
−
−
−
∏



+
+
+
+
−
+
+
+
+
+
 y
m
v i
m
t
t
t
t
1
9 4
11 5 9 4
9 4
7 5 9 4
1
9
2
1
2
3
5 7
2
3 5 7
2
2
3
5
)|
( )
(
)
*
+
+
+
+
+
+
+
+
+
4
1
11 5 9 4
9 4
1
7 3 9 4
2
9 4
2
7 3
3
5 7
2
3 5 7
2
3 5 7
7
11
(
)
(
)
(
)
(
)
.
t
t
t
t
t
9 4
3
0
4
3
1
2
3
4
3
2
3
5
7
+
+
+
+
+
+
(
)
(( ) )
(
) (( ) )
(( ) )
(( ) )
(
)
t
z i
t
z i
z i
z i
t
pi
*
i
z
=∏
0
δ( ( ))
lh
ɡ is primitive recursive by the results of Section 3.3. When z is not a Gödel 
number of a Turing machine, ϕz
m n
+  is the empty function and, therefore, 
s
z y
y
n
m
m
( ,
,
,
)
1 …
 must be an index of the empty function and can be taken to 
be 0. Thus, we define
	
s
z y
y
z y
y
TM z
n
m
m
m
( ,
,
,
)
( ,
,
)
( )
,
1
1
0
…
=
…



g
if
otherwise
Hence, sn
m is primitive recursive.
Corollary 5.16
For any partial recursive function f(x1, …, xn, y1, …, ym), there is a recursive 
function g(y1, …, ym) such that
	
f x
x
y
y
x
x
n
m
g y
y
n
n
m
(
,
,
,
,
,
)
(
,
,
)
(
,
,
)
1
1
1
1
…
…
=
…
…
ϕ

340
Introduction to Mathematical Logic
Proof
Let e be an index of f. By Proposition 5.15,
	
ϕ
ϕ
e
m n
n
m
s
e y
y
n
x
x
y
y
x
x
nm
m
+
…
…
…
=
…
(
,
,
,
,
,
)
(
,
,
)
( ,
,
,
)
1
1
1
1
Let g y
y
s
e y
y
m
n
m
m
(
,
,
)
( ,
,
,
)
1
1
…
=
…
.
Examples
	
1.	Let G(x) be a fixed partial recursive function with nonempty 
domain. Consider the following decision problem: for any u, deter-
mine whether ϕu
G
1 =
. Let us show that this problem is recursively 
unsolvable, that is, that the property R(u), defined by ϕu
G
1 =
, is not 
recursive. Assume, for the sake of contradiction, that R is recursive. 
Consider the function f(x, u) = G(x) · N(Z(μyT1(u, u, y))). (Recall that 
N(Z(t)) = 1 for all t). Applying Corollary 5.16 to f(x, u), we obtain a 
recursive function g(u) such that f x u
x
g u
( , )
( )
( )
= ϕ1
. For any fixed 
u
G
g u
,
( )
ϕ1
=
 if and only if (∃y)T1(u, u, y). (Here, we use the fact that G 
has nonempty domain.) Hence, (∃y)T1(u, u, y) if and only if R(g(u)). 
Since R(g(u)) is recursive, (∃y)T1(u, u, y) would be recursive, contra-
dicting Corollary 5.13(a).
	
2.	A universal Turing machine. Let the partial recursive function 
U(μyT1(z, x, y)) be computed by a Turing machine V     with Gödel num-
ber e. Thus, U(μyT1(z, x, y)) = U(μyT2(e, z, x, y)). V    is universal in the 
following sense. First, it can compute every partial recursive func-
tion f(x) of one variable. If z is a Gödel number of a Turing machine 
that computes f, then, if V   begins on the tape ( , )
z x , it will compute 
U(μyT1(z, x, y)) = f(x). Further, V   can be used to compute any partial 
recursive function h(x1, …, xn). Let v0 be a Gödel number of a Turing 
machine that computes h, and let f(x) = h((x)0, (x)1, …, (x)n−1). Then 
h x
x
f p
p
n
x
n
xn
(
,
,
)
1
0
1
1
…
=
…
(
)
−. By applying Corollary 5.16 to the partial 
recursive function U(μyTn(v, (x)0, (x)1, …, (x)n−1, y)), we obtain a recur-
sive function g(v) such that U
yT v x
x
x
y
x
n
n
g v
(
( ,( ) ,( ) ,
, ( )
, ))
( )
( )
µ
ϕ
0
1
1
1
…
=
−
. 
Hence, f x
x
g v
( )
( )
( )
= ϕ1
. So h(x1, …, xn) is computed by applying V   to the 
tape g v
p
p
x
n
xn
(
),
0
0
1
1 …
(
)
−.
Exercises
5.32	 Find a superuniversal Turing machine V    * such that, for any Turing 
machine T,  if z is a Gödel number of T   and x is the Gödel number of 
an initial tape description α of T,  then V    * is applicable to q z x
0( , ) if and 

341
Computability
only if T   is applicable to α; moreover, if T,  when applied to α, ends 
with a tape description that has Gödel number w, then V     *, when applied to 
q z x
0( , ), produces w.
5.33	 Show that the following decision problem is recursively unsolvable: for 
any u and v, determine whether ϕ
ϕ
u
v
1
1
=
.
5.34	 Show that the following decision problem is recursively unsolv-
able: for any u, determine whether ϕu
1 has empty domain. (Hence, 
the condition in Example 1 above, that G(x) has nonempty domain is 
unnecessary).
5.35	 a. Prove that there is a recursive function g(u, v) such that
	
ϕ
ϕ
ϕ
g u v
u
v
x
x
x
( , )( )
( )
( )
1
1
1
=
⋅
	b.	 Prove that there is a recursive function C(u, v) such that
	
ϕ
ϕ ϕ
C u v
u
v
x
x
( , )( )
(
( ))
1
1
1
=
5.4  The Kleene–Mostowski Hierarchy: 
Recursively Enumerable Sets
Consider the following array, where R(x1, …, xn, y1, …, ym) is a recursive 
relation:
	
R x
x
y R x
x
y
y R x
x
y
y
y R
n
n
n
(
,
,
)
(
) (
,
,
,
)
(
) (
,
,
,
)
(
)(
) (
1
1
1
1
1
1
1
1
2
…
∃
…
∀
…
∃
∀
x
x
y
y
y
y R x
x
y
y
y
y
y R
n
n
1
1
2
1
2
1
1
2
1
2
3
,
,
,
,
)
(
)(
) (
,
,
,
,
)
(
)(
)(
) (
…
∀
∃
…
∃
∀
∃
x
x
y
y
y
y
y
y R x
x
y
y
y
n
n
1
1
2
3
1
2
3
1
1
2
3
,
,
,
,
,
)
(
)(
)(
) (
,
,
,
,
,
)
…
∀
∃
∀
…


Let ∑=
=
0
0
n
n
Π
 the set of all n-place recursive relations. For k > 0, let ∑k
n be the 
set of all n-place relations expressible in the prenex form (∃y1)(∀y2) … (Q yk)
R(x1, …, xn, y1, …, yk), consisting of k alternating quantifiers beginning with an 
existential quantifier and followed by a recursive relation R. (Here, “(Q yk)” 
denotes (∃yk) or (∀yk), depending on whether k is odd or even.) Let Πk
n be the 
set of all n-place relations expressible in the prenex form (∀y1)(∃y2) … (Qyk)
R(x1, …, xn, y1, …, yk), consisting of k alternating quantifiers beginning with 

342
Introduction to Mathematical Logic
a universal quantifier and followed by a recursive relation R. Then the array 
above can be written
	
0
1
1
2
2
3
3
n
n
n
n
n
n
n
∑
∑∏
∑∏
∑∏


This array of classes of relations is called the Kleene–Mostowski hierarchy, or 
the arithmetical hierarchy.
Proposition 5.17
	
a.	Every relation expressible in any form listed above is expressible in all 
the forms in lower rows; that is, for all j > k,
	
⊆
∩
⊆
∩
∑∑∏
∏∑∏
k
n
j
n
j
n
k
n
j
n
j
n
and
	
b.	There is a relation of each form, except ∑0
n, that is not expressible in the 
other form in the same row and, hence, by part (a), not in any of the 
rows above; that is, for k > 0,
	
−
≠∅
−
≠∅
∑∏
∏∑
k
n
k
n
k
n
k
n
and
	
c.	Every arithmetical relation is expressible in at least one of these forms.
	
d.	(Post) For any relation Q(x1, …, xn), Q is recursive if and only if both Q 
and ¬Q are expressible in the form (∃y1)R(x1, …, xn, y1), where R is recur-
sive; that is, ∑∩
= ∑
1
1
0
n
n
n
Π
.

343
Computability
	
e.	If Q
k
n
1 ∈∑ and Q
k
n
2 ∈∑, then Q1 ∨ Q2 and Q1 ∧ Q2 are in ∑k
n. If Q
k
n
1 ∈Π  and 
Q
k
n
2 ∈Π , then Q1 ∨ Q2 and Q1 ∧ Q2 are in Πk
n.
	
f.	In contradistinction to part (d), if k > 0, then
	
∩







−
∪







≠∅
+
+
∑
∑
∏
∏
k
n
k
n
k
n
k
n
1
1
Proof
	
a.	(∃z1)(∀y1) … (∃zk)(∀yk)R(x1, …, xn, z1, y1, …, zk, yk) ⇔
	
(
)(
)(
)
(
)(
)( (
,
,
,
,
,
,
,
)
)
(
∀
∃
∀
… ∃
∀
…
…
∧
=
⇔
∃
u
z
y
z
y
R x
x
z y
z
y
u
u
k
k
n
k
k
1
1
1
1
1
z
y
z
y
u R x
x
z y
z
y
u
u
k
k
n
k
k
1
1
1
1
1
)(
)
(
)(
)(
)( (
,
,
,
,
,
,
,
)
)
∀
… ∃
∀
∃
…
…
∧
=
	
	 Hence, any relation expressible in one of the forms in the array is 
expressible in both forms in any lower row.
	
b.	Let us consider a typical case, say ∑3
n. Take the relation (∃v)(∀z)(∃y)
Tn+2(x1, x1, x2, …, xn, v, z, y), which is in ∑3
n. Assume that this is in Π3
n, 
that is, it is expressible in the form (∀v)(∃z)(∀y)R(x1, …, xn, v, z, y), 
where R is recursive. By Exercise 5.19, this relation is equivalent to (∀v)
(∃z)(∀y) ¬Tn+2(e, x1, …, xn, v, z, y) for some e. When x1 = e, this yields a 
contradiction.
	
c.	Every wf of the first-order theory S can be put into prenex normal form. 
Then, it suffices to note that (∃u)(∃v)R(u, v) is equivalent to (∃z)R((z)0, 
(z)1), and (∀u)(∀v)R(u, v) is equivalent to (∀z)R((z)0, (z)1). Hence, suc-
cessive quantifiers of the same kind can be condensed into one such 
quantifier.
	
d.	If Q is recursive, so is ¬Q, and, if P(x1, …, xn) is recursive, then P(x1, …, 
xn) ⇔ (∃y)(P(x1, …, xn) ∧ y = y). Conversely, assume Q is expressible as 
(∃y)R1(x1, …, xn, y) and ¬Q as (∃y)R2(x1, …, xn, y), where the relations R1 
and R2 are recursive. Hence, (∀x1) … (∀xn) (∃y)(R1(x1, …, xn, y) ∨ R2(x1, 
…, xn, y)). So, ψ(x1, …, xn) = μy (R1(x1, …, xn, y) ∨ R2(x1, …, xn, y)) is recur-
sive. Then, Q(x1, …, xn) ⇔ R1(x1, …, xn, ψ(x1, …, xn)) and, therefore, Q is 
recursive.
	
e.	Use the following facts. If x is not free in A.
	
⊢
⊢
⊢
(
)(
)
(
(
)
),
(
)(
)
(
(
)
),
(
)(
)
(
(
∃
∨
⇔
∨∃
∃
∧
⇔
∧∃
∀
∨
⇔
∨∀
x
x
x
x
x
A
B
A
B
A
B
A
B
A
B
A
x
x
x
)
),
(
)(
)
(
(
)
)
B
A
B
A
B
⊢∀
∧
⇔
∧∀

344
Introduction to Mathematical Logic
	
f.	We shall suggest a proof in the case n = 1; the other cases are then 
easy consequences. Let Q x
k
k
( )∈∑−∏
1
1. Define P(x) as (∃z) [(x = 2z ∧ 
Q(z)) ∨ (x = 2z + 1 ∧ ¬Q(z))]. It is easy to prove that P
k
k
∉∑∪
1
1
Π  and that 
P
k
∈∑+1
1 . Observe that P(x) holds if and only if
	
(
)(
( ))
((
)
(
)
(
)(
( )))
∃
=
∧
∨
∃
=
+
∧∀
=
+
⇒¬
<
z x
z
Q z
z
x
z
z x
z
Q z
z x
2
2
1
2
1
Hence, P
k
∈
+
Π
1
1  (Rogers, 1959).
Exercises
5.36	 For any relation W of n variables, prove that W
k
n
∈∑ if and only if 
W
k
n
∈∏, where W is the complement of W with respect to the set of all 
n-tuples of natural numbers.
5.37	 For each k > 0, find a universal relation Vk in ∑+
k
n 1; that is, for any rela-
tion W of n variables: (a) if W
k
n
∈∑, then there exists z0 such that, for all 
x1, …, xn, W(x1, …, xn) if and only if Vk(z0, x1, …, xn); and (b) if W
k
n
∈∏, 
there exists v0 such that, for all x1, …, xn, W(x1, …, xn) if and only if ¬Vk(v0, 
x1, …, xn). [Hint: Use Exercise 5.19.]
The s-m-n theorem (Proposition 5.15) enables us to prove the following 
basic result of recursion theory.
Proposition 5.18 (Recursion Theorem)
If n > 1 and f(x1, …, xn) is a partial recursive function, then there exists a 
­natural number e such that
	
f x
x
e
x
x
n
e
n
n
(
,
,
, )
(
,
,
)
1
1
1
1
1
…
=
…
−
−
−
ϕ
Proof
Let d be an index of f x
x
s
x
x
n
n
n
n
(
,
,
,
(
,
))
1
1
1
1
…
−
−
. Then
	
f x
x
s
x
x
x
x
x
n
n
n
n
d
n
n
n
(
,
,
,
(
,
))
(
,
,
,
)
1
1
1
1
1
1
…
=
…
−
−
−
ϕ
By the s-m-n theorem, ϕ
ϕ
d
n
n
s
d x
n
n
x
x
x
x
n
n
(
,
,
)
(
,
,
)
( ,
)
1
1
1
1
1
1
…
=
…
−
−
−. Let e
s
d d
n
=
−1
1 ( , ). 
Then
	
f x
x
e
f x
x
s
d d
x
x
d
n
n
n
d
n
n
s
(
,
,
, )
(
,
,
,
( , ))
(
,
,
, )
1
1
1
1
1
1
1
1
…
=
…
=
…
=
−
−
−
−
ϕ
ϕ
n
d d
n
n
e
n
n
x
x
x
x
−
−
−
−
−
…
=
…
1
1
1
1
1
1
1
1
( , )(
,
,
)
(
,
,
)
ϕ

345
Computability
Corollary 5.19 (Fixed-Point Theorem)
If h(x) is recursive, then there exists e such that ϕ
ϕ
e
h e
1
1
=
( ).
Proof
Applying the recursion theorem to f x u
x
h u
( , )
( )
( )
= ϕ1
, we obtain a number e 
such that f x e
x
e
( , )
( )
= ϕ1
. But f x e
x
h e
( , )
( )
( )
= ϕ1
.
Corollary 5.20 (Rice’s Theorem) (Rice, 1953)
Let F   be a set consisting of at least one, but not all, partial recursive func-
tions of one variable. Then the set A
u
u
=
∈
{ |
}
ϕ1
F  is not recursive.
Proof
By hypothesis, there exist numbers u1 and u2 such that u1 ∈ A and u2 ∉ A. 
Now assume that A is recursive. Define
	
h x
u
x
A
u
x
A
( ) =
∉
∈



1
2
if
if
Clearly, h(x) ∈ A if and only if x ∉ A. h is recursive, by Proposition 3.19. By the 
fixed-point theorem, there is a number e such that ϕ
ϕ
e
h e
1
1
=
( ). Then we obtain 
a contradiction as follows:
	
e
A
h e
A
e
h e
∈
∈
∈
∈
if and only if
if and only if
if and only if
if a
ϕ
ϕ
1
1
F
F
( )
( )
nd only if
e
A
∉
Rice’s theorem can be used to show the recursive unsolvability of various 
decision problems.
Example
Consider the following decision problem: for any u, determine whether ϕu
1 
has an infinite domain. Let F  be the set of all partial recursive functions of 
one variable that have infinite domain. By Rice’s theorem, { |
}
u
F
u
ϕ1 ∈
 is not 
recursive. Hence, the problem is recursively undecidable.
Notice that Example 1 on page 340 and Exercise 5.34 can be handled in the 
same way.

346
Introduction to Mathematical Logic
Exercises
5.38	 Show that the following decision problems are recursively unsolvable.
	a.	 For any u, determine whether ϕu
1 has infinite range.
	b.	 For any u, determine whether ϕu
1 is a constant function.
	c.	 For any u, determine whether ϕu
1 is recursive.
5.39	 a. Show that there is a number e such that the domain of ϕe
1 is {e}.
	b.	 Show that there is a number e such that the domain of ϕe
1 is ω −{e}.
5.40	 This exercise will show the existence of a recursive function that is not 
primitive recursive.
	a.	 Let 
x

 be the largest integer less than or equal to x. Show that 
x

 is defined by the recursion
	
κ
κ
κ
κ
( )
(
)
( )
|(
)
( ( )
) |
0
0
1
1
1 2
=
+
=
+
+
−
+
x
x
x
x
sg
	
	
Hence, 
x

 is primitive recursive.
	b.	 The function Quadrem( )
[
]
x
x
x
=
−
2 is primitive recursive and 
­represents the difference between x and the largest square less than 
or equal to x.
	c.	 Let ρ(x, y) = ((x + y)2 + y)2 + x, ρ1(z) = Quadrem(z), and 
ρ2( )
([
])
z
z
= Quadrem
. These functions are primitive recursive. 
Prove the following:
	 i.	 ρ1 (ρ (x, y)) = x and ρ2 (ρ (x, y)) = y.
	ii.	 ρ is a one–one function from ω2 into ω.
	iii.	 ρ1(0) = ρ2(0) = 0 and
	
ρ
ρ
ρ
ρ
ρ
1
1
2
2
1
1
1
1
1
0
(
)
( )
(
)
( )
(
)
x
x
x
x
x
+
=
+
+
=



+
≠
if
	iv.	 Let ρ2 denote ρ, and, for n ≥ 3, define ρn(x1, …, xn) = ρ(ρn−1 
(x1, …, xn−1), xn). Then each ρn is primitive recursive. Define 
ρ
ρ
ρ
i
n
i
n
x
x
( )
(
( ))
=
−1
1
 for 1 ≤ i ≤ n − 1, and ρ
ρ
n
n x
x
( )
( )
=
2
. Then each 
ρi
n
i
n
,1 ≤≤, is primitive recursive, and ρ ρ
i
n
n
n
i
x
x
x
(
(
,
,
))
1 …
=
. 
Hence, ρn is a one–one function of ωn into ω. The ρns and the ρi
ns 
are obtained from ρ, ρ1, and ρ2 by substitution.
	d.	 The recursion rule (V) (page 174) can be limited to the form
	
F x
x
x
n
F x
x
y
G x
x
y F x
n
n
n
n
(
,
,
, )
(
)
(
,
,
,
)
(
,
,
, , (
1
1
1
1
1
1
1
0
0
1
…
=
≥
…
+
=
…
+
+
+
+
1
1
,
,
, ))
…
+
x
y
n

347
Computability
		
[Hint: Given
	
f x
x
x
x
f x
x
y
h x
x
y f x
x
n
n
n
n
(
,
,
, )
(
,
,
)
(
,
,
,
)
(
,
,
, , (
,
,
1
1
1
1
1
0
1
…
=
…
…
+
=
…
…
g
n y
, ))
		
define F as above, letting G(x1, …, xn+1, y, z) = h(x1, …, xn, y, z). Then 
f(x1, …, xn, y) = F(x1, …, xn, ɡ(x1, …, xn), y).]
	e.	 Taking x + y, x · y, and [
]
x  as additional initial functions, we can 
limit the recursion rule to the one-parameter form:
	
F x
G x
F x y
H x y F x y
( , )
( )
( ,
)
( , , ( , ))
0
1
=
+
=
		
[Hint: Let n ≥ 2. Given
	
f x
x
g x
x
f x
x
y
h x
x
y f x
x
n
n
n
n
(
,
,
, )
(
,
,
)
(
,
,
,
)
(
,
,
, , (
,
,
1
1
1
1
1
0
1
…
=
…
…
+
=
…
…
n y
, ))
		
let F u y
f
u
u y
n
n
n
( , )
(
( ),
,
( ), )
=
…
ρ
ρ
1
. Define F by a permissible ­recursion. 
(Note that δ
ρ
( ),
,
x x
y
n
−
, and ρi
n are available.) f(x1, …, xn,  y)  = 
F(ρn(x1, …, xn), y).]
	f.	 Taking x + y, x · y, and [
]
x  as additional initial functions, we can 
use h(y, F(x, y)) instead of H(x, y, F(x, y)) in part (e).
		
[Hint: Given
	
F x
G x
F x y
H x y F x y
( , )
( )
( ,
)
( , , ( , ))
0
1
=
+
=
		
let F1(x, y) = ρ(x, F(x, y)). Then x = ρ1(F1(x, y)) and F(x, y) = ρ2(F1(x, y)). 
Define F1(x, y) by a permissible recursion.]
	g.	 Taking x + y, x · y, and [
]
x  as additional initial functions, we can 
limit uses of the recursion rule to the form
	
f x
x
f x y
h y f x y
( , )
( ,
)
( , ( , ))
0
1
=
+
=

348
Introduction to Mathematical Logic
		
Hint: Given
	
F x
G x
F x y
h y F x y
( , )
( )
( ,
)
( , ( , ))
0
1
=
+
=
		
define f as above. Then f(x, y) = f(G(x), y).
	h.	 Taking x
y x y
x
+ ,
,[
]
⋅
 and x y
− as additional initial functions, we 
can limit uses of the recursion rule to those of the form
	
g
g
g
( )
(
)
( , ( ))
0
0
1
=
+
=
y
H y
y
		
[Hint: First note that |
| (
)
(
)
x
y
x
y
y
x
−
=
−
+
−


 and that [
]
x  is ­definable 
by a suitable recursion. Now, given
	
f x
x
f x y
h y f x y
( , )
( ,
)
( , ( , ))
0
1
=
+
=
		
let g(x) = f(ρ2(x), ρ1(x)). Then
	
g
f
f
g x
f
x
x
x
( )
(
( ),
( ))
( , )
(
)
(
(
),
(
))
(
0
0
0
0 0
0
1
1
1
2
1
2
1
2
=
=
=
+
=
+
+
=
ρ
ρ
ρ
ρ
ρ
+
+
−
+
+
−



+
=
1
1
1
1
1
1
1
0
1
2
1
1
1
)
(
(
)
, (
(
),
(
)
))
(
)
(
h
x
f
x
x
x
ρ
ρ
ρ
ρ
ρ


if
if
x
x
h
x
f
x
x
x
x
+
≠
=
+



+
=
1
0
1
1
0
2
1
1
2
1
1
)
(
)
(
( ), (
( ),
( )))
(
)
(
ρ
ρ
ρ
ρ
ρ
ρ
if
if
+
≠
=
+



+
=
+
≠
=
+
1
0
1
1
0
1
0
2
1
1
1
2
)
(
)
(
( ), ( ))
(
)
(
)
(
ρ
ρ
ρ
ρ
ρ
x
h
x
x
x
x
x
g
if
if
1
1
1
1
1
1
)
(
(
))
(
( ), ( ))
(
(
))
( , ( ))
⋅
+
+
⋅
+
=
sg
sg
ρ
ρ
ρ
x
h
x
x
x
H x
x
g
g
		
Then f(x, y) = ɡ(ρ (y, x)). (Note that sg is obtainable by a recursion of 
the appropriate form and sg( )
x
x
=
−
1 
.)
	i.	 In part (h), H(y, ɡ(y)) can be replaced by H(ɡ(y)).
		
[Hint: Given
	
g
g
g
( )
(
)
( , ( ))
0
0
1
=
+
=
y
H y
y

349
Computability
		
let f(u) = ρ (u, ɡ(u)) and φ(w) = ρ (ρ1(w) + 1, H(ρ1(w), ρ2(w))). Then
	
f
f y
f y
( )
(
)
( ( ))
0
0
1
=
+
= ϕ
		
and ɡ(u) = ρ2(f(u)). (Note that sg(x) is given by a recursion of the 
specified form.)
	j.	 Show that the equations
	
ψ
ψ
ψ
ψ
ψ ψ
( , )
( ,
)
( , )
(
,
)
( ( ,
), )
x
x
y
y
x
y
x y
y
0
1
0
1
1
1
1
1
=
+
+
=
+
+
=
+
		
define a number-theoretic function. In addition, prove:
	
	
I.	 ψ(x, y) > x.
	
	
II.	 ψ(x, y) is monotonic in x, that is, if x < z, then ψ(x, y) < ψ(z, y).
	
	
III.	 ψ(x + 1, y) ≤ ψ(x, y + 1).
	
	
IV.	 ψ(x, y) is monotonic in y, that is, if y < z, then ψ(x, y) < ψ(x, z).
	
	
V.D	Use the recursion theorem to show that ψ is recursive. [Hint: 
Use Exercise 5.21 to show that there is a partial recursive 
function ɡ such that g
g
( , , )
, ( ,
, )
( , )
x
u
x
y
u
y
u
0
1
0
1
1
2
=
+
+
= ϕ
, and 
g(
,
, )
(
( ,
), )
x
y
u
x y
y
u
u
+
+
=
+
1
1
1
2
2
ϕ ϕ
. Then use the recursion the-
orem to find e such that g( , , )
( , )
x y e
x y
e
= ϕ2
. By induction, show 
that ɡ(x, y, e) = ψ(x, y).]
	
	
VI.	 For every primitive recursive function f(x1, …, xn), there is 
some fixed m such that
	
f x
x
x
x
m
n
n
(
,
,
)
(max(
,
,
),
)
1
1
…
<
…
ψ
	
	 for all x1, …, xn. [Hint: Prove this first for the initial functions 
Z N U
x
y x
y
x
i
n
,
,
,
,
,[
]
+
×
 and x
y
−, and then show that it is 
preserved by substitution and the recursion of part (i).] Hence, 
for every primitive recursive function f(x), there is some m 
such that f(x) < ψ(x, m) for all x.
	
	
VII.	 Prove that ψ(x, x) + 1 is recursive but not primitive recursive. 
For other proofs of the existence of recursive functions that 
are not primitive recursive, see Ackermann (1928), Péter (1935, 
1967), and R.M. Robinson (1948).
A set of natural numbers is said to be recursively enumerable (r.e.) if and 
only if it is either empty or the range of a recursive function. If we accept 

350
Introduction to Mathematical Logic
Church’s Thesis, a collection of natural numbers is recursively enumerable 
if and only if it is empty or it is generated by some mechanical process or 
effective procedure.
Proposition 5.21
	
a.	A set B is r.e. if and only if x ∈ B is expressible in the form (∃y)R(x, y), 
where R is recursive. (We even can allow R here to be primitive 
recursive.)
	
b.	B is r.e. if and only if B is either empty or the range of a partial recursive 
function.*
	
c.	B is r.e. if and only if B is the domain of a partial recursive function.
	
d.	B is recursive if and only if B and its complement B are r.e.†
	
e.	The set K = {x|(∃y) T1(x, x, y)} is r.e. but not recursive.
Proof
	
a.	Assume B is r.e. If B is empty, then x ∈ B ⇔ (∃y)(x ≠ x ∧ y ≠ y). If B is non-
empty, then B is the range of a recursive function g. Then x ∈ B ⇔ (∃y)
(ɡ(y) = x). Conversely, assume x ∈ B ⇔ (∃y)R(x, y), where R is recursive. 
If B is empty, then B is r.e. If B is nonempty, then let k be a fixed element 
of B. Define
	
θ( )
(( ) ,( ) )
( )
(( ) ,( ) )
z
k
R z
z
z
R z
z
=
¬



if
if
0
1
0
0
1
	
	 θ is recursive by Proposition 3.19. Clearly, B is the range of θ. (We 
can take R to be primitive recursive, since, if R is recursive, then, by 
Corollary 5.12(a), (∃y)R(x, y) ⇔ (∃y)T1(e, x, y) for some e, and T1(e, x, y) is 
primitive recursive.)
	
b.	Assume B is the range of a partial recursive function ɡ. If B is empty, 
then B is r.e. If B is nonempty, then let k be a fixed element of B. By 
Corollary 5.11, there is a number e such that g(x) = U(μy T1(e, x, y)). Let
	
h z
U z
T e z
z
k
T e z
z
( )
(( ) )
( ,( ) ,( ) )
( ,( ) ,( ) )
=
¬



1
1
0
1
1
0
1
if
if
	
	 By Proposition 3.19, h is primitive recursive. Clearly, B is the range of h. 
Hence, B is r.e.
*	 Since the empty function is partial recursive and has the empty set as its range, the condition 
that B is empty can be omitted.
†	 B
B
=
−
ω
, where ω is the set of natural numbers.

351
Computability
	
c.	Assume B is r.e. If B is empty, then B is the domain of the partial recur-
sive function μy(x + y + 1 = 0). If B is nonempty, then B is the range of a 
recursive function ɡ. Let G be the partial recursive function such that 
G(y) = μx(ɡ(x) = y). Then B is the domain of G. Conversely, assume B is 
the domain of a partial recursive function H. Then there is a number e 
such that H(x) = U(μy T1(e, x, y)). Hence, x ∈ B if and only if (∃y)T1(e, x, y). 
Since T1(e, x, y) is recursive, B is r.e. by part (a).
	
d.	Use part (a) and Proposition 5.17(d). (The intuitive meaning of part (d) is 
the following: if there are mechanical procedures for generating B and 
B, then to determine whether any number n is in B we need only wait 
until n is generated by one of the procedures and then observe which 
procedure produced it.)
	
e.	Use parts (a) and (d) and Corollary 5.13(a).
Remember that the functions ϕ
µ
n x
U
yT n x y
1
1
( )
(
( , , ))
=
 form an enumeration 
of all partial recursive functions of one variable. If we designate the domain 
of ϕn
1 by Wn, then Proposition 5.21(c) tells us that W0, W1, W2, … is an enu-
meration (with repetitions) of all r.e. sets. The number n is called the index of 
the set Wn.
Exercises
5.41	 Prove that a set B is r.e. if and only if it is either empty or the range of a 
primitive recursive function. [Hint: See the proof of Proposition 5.21(b).]
5.42	 a.	 Prove that the inverse image of a r.e. set B under a partial recursive 
function f is r.e. (that is, {x|f(x) ∈ B} is r.e.).
	b.	 Prove that the inverse image of a recursive set under a recursive 
function is recursive.
	c.	 Prove that the image of a r.e. set under a partial recursive function 
is r.e.
	d.	 Using Church’s thesis, give intuitive arguments for the results in 
parts (a)–(c).
	e.	 Show that the image of a recursive set under a recursive function 
need not be recursive.
5.43	 Prove that an infinite set is recursive if and only if it is the range of 
a strictly increasing recursive function. (ɡ is strictly increasing if x < y 
implies ɡ(x) < ɡ(y).)
5.44	 Prove that an infinite set is r.e. if and only if it is the range of a one–one 
recursive function.
5.45	 Prove that every infinite r.e. set contains an infinite recursive subset.
5.46	 Assume that A and B are r.e. sets.
	a.	 Prove that A ∪ B is r.e. [In fact, show that there is a recursive ­function 
ɡ(u, v) such that Wɡ(u,v) = Wu ∪ Wv.]

352
Introduction to Mathematical Logic
	b.	 Prove that A ∩ B is r.e. [In fact, show that there is a recursive ­function 
h(u, v) such that Wh(u, v) = Wu ∩ Wv.]
	c.	 Show that A need not be r.e.
	d.	 Prove that ∪n A
n
W
∈
 is r.e.
5.47	 Show that the assertion
	
	 (∇) A set B is r.e. if and only if B is effectively enumerable (that is, there 
is a mechanical procedure for generating the numbers in B) is equiva-
lent to Church’s thesis.
5.48	 Prove that the set A = {u|Wu = ω} is not r.e.
5.49	 A set B is called creative if and only if B is r.e. and there is a partial recur-
sive function h such that, for any n, if W
B
n ⊆
, then h n
B
Wn
( )∈
−
.
	a.	 Prove that {x|(∃y)T1(x, x, y)} is creative.
	b.	 Show that every creative set is nonrecursive.
5.50D	A set B is called simple if B is r.e., B is infinite, and B contains no infinite 
r.e. set. Clearly, every simple set is nonrecursive. Show that a simple set 
exists.
5.51	 A recursive permutation is a one–one recursive function from ω onto ω. 
Sets A and B are called isomorphic (written A ≃ B) if there is a recursive 
permutation that maps A onto B.
	a.	 Prove that the recursive permutations form a group under the oper-
ation of composition.
	b.	 Prove that ≃ is an equivalence relation.
	c.	 Prove that, if A is recursive (r.e., creative, simple) and A ≃ B, then 
B is recursive (r.e., creative, simple).
	
	 Myhill (1955) proved that any two creative sets are isomorphic. (See 
also Bernays, 1957.)
5.52	 A is many–one reducible to B (written ARmB) if there is a recursive 
function f such that u ∈ A if and only if f(u) ∈ B. (Many–one reduc-
ibility of A to B implies that, if the decision problem for membership 
in B is recursively solvable, so is the decision problem for member-
ship in A.) A and B are called many–one equivalent (written A ≡ mB) 
if ARmB and BRmA. A is one–one reducible to B (written AR1B) if there 
is a one–one recursive function f such that u ∈ A if and only if f(u) ∈ 
B. A and B are called one–one equivalent (written A ≡1 B) if AR1B 
and BR1A.
	a.	 Prove that ≡m and ≡1 are equivalence relations.
	b.	 Prove that, if A is creative, B is r.e., and ARmB, then B is creative. 
[Myhill (1955) showed that, if A is creative and B is r.e., then 
BRmA.]

353
Computability
	c.	
(Myhill, 1955) Prove that, if AR1B then ARmB, and if A ≡ 1B then A ≡ mB. 
However, many–one reducibility does not imply one–one reducibil-
ity, and many–one equivalence does not imply one–one equivalence. 
[Hint: Let A be a simple set, C an infinite recursive subset of A, and 
B = A − C. Then AR1B and BRmA but not-(BR1A).] It can be shown that 
A ≡ 1B if and only if A ≃ B.
5.53	 (Dekker, 1955) A is said to be productive if there is a partial recur-
sive function f such that, if Wn ⊆ A, then f(n) ∈ A − Wn. Prove the 
following.
	a.	 If A is productive, then A is not r.e.; hence, both A and A are infinite.
	b.D	If A is productive, then A has an infinite r.e. subset. Hence, if A is 
productive, A is not simple.
	c.	 If A is r.e., then A is creative if and only if A is productive.
	d.D	There exist 2
0
ℵ productive sets.
5.54	 (Dekker and Myhill, 1960) A is recursively equivalent to B (written A ~ B) 
if there is a one–one partial recursive function that maps A onto B.
	a.	
Prove that ~ is an equivalence relation.
	b.	
A is said to be immune if A is infinite and A has no infinite r.e. 
subset. A is said to be isolated if A is not recursively equivalent 
to a proper subset of A. (The isolated sets may be considered the 
counterparts of the Dedekind-finite sets.) Prove that an infinite set 
is isolated if and only if it is immune.
	c.D	 Prove that there exist 2
0
ℵ immune sets.
	
Recursively enumerable sets play an important role in logic 
because, if we assume Church’s thesis, the set TK of Gödel num-
bers of the theorems of any axiomatizable first-order theory K is 
r.e. (The same holds true of arbitrary formal axiomatic systems.) In 
fact, the relation (see page 200)
	
Pf
is the G del number of a proof in K of a wf with
Godel numbe
K( , ) :
y x
y

r x
	
is recursive if the set of Gödel numbers of the axioms is recursive, 
that is, if there is a decision procedure for axiomhood and Church’s 
thesis holds. Now, x ∈ TK if and only if (∃y)PfK(y, x) and, therefore, 
TK is r.e. Thus, if we accept Church’s thesis, K is decidable if and 
only if the r.e. set TK is recursive. It was shown in Corollary 3.46 
that every consistent extension K of the theory RR is recursively 
undecidable, that is, TK is not recursive.

354
Introduction to Mathematical Logic
	Much more general results along these lines can be proved (see 
Smullyan, 1961; Feferman, 1957; Putnam, 1957; Ehrenfeucht and 
Feferman, 1960; and Myhill, 1955). For example, if K is a first-order 
theory with equality in the language LA of arithmetic: (1) if every 
recursive set is expressible in K, then K is essentially recursively 
undecidable, that is, for every consistent extension K′ of K, TK′ is 
not recursive (see Exercise 5.58); (2) if every recursive function is 
representable in K and K satisfies conditions 4 and 5 on page 210, 
then the set TK is creative. For further study of r.e. sets, see Post 
(1944) and Rogers (1967); for the relationship between logic and 
recursion theory, see Yasuhara (1971) and Monk (1976, part III).
Exercises
5.55	 Let K be a first-order theory with equality in the language LA of arith-
metic. A number-theoretic relation B(x1, …, xn) is said to be weakly 
expressible in K if there is a wf B(x1, …, xn) of K such that, for any natural 
numbers k1, …, kn, B(k1, …, kn) if and only if ⊢K
n
k
k
B (
,
,
)
1 …
.
	a.	 Show that, if K is consistent, then every relation expressible in K is 
weakly expressible in K.
	b.	 Prove that, if every recursive relation is expressible in K and K is 
ω-consistent, every r.e. set is weakly expressible in K. (Recall that, when 
we refer here to a r.e. set B, we mean the corresponding relation “x ∈ B.”)
	c.	 If K has a recursive vocabulary and a recursive axiom set, prove 
that any set that is weakly expressible in K is r.e.
	d.	 If formal number theory S is ω-consistent, prove that a set B is r.e. if 
and only if B is weakly expressible in S.
5.56	 a.	 (Craig, 1953) Let K be a first-order theory such that the set TK of 
Gödel numbers of theorems of K is r.e. Show that, if K has a recur-
sive vocabulary, K is recursively axiomatizable.
	
b.	 For any wf B of formal number theory S, let B  # represent its translation 
into axiomatic set theory NBG (see page 276). Prove that the set of wfs 
B such that ⊢NBG B  # is a (proper) recursively axiomatizable extension 
of S. (However, no “natural” set of axioms for this theory is known.)
5.57	 Given a set A of natural numbers, let u ∈ A* if and only if u is a Gödel 
number of a wf B(x1) and the Gödel number of B ( )
u . is in A. Prove that, 
if A is recursive, then A* is recursive.
5.58	 Let K be a consistent theory in the language LA of arithmetic.
	a.	 Prove that (
)
TK * is not weakly expressible in K.
	b.	 If every recursive set is weakly expressible in K, show that K is 
recursively undecidable.
	c.	 If every recursive set is expressible in K, prove that K is essentially 
recursively undecidable.

355
Computability
5.5  Other Notions of Computability
Computability has been treated here in terms of Turing machines because 
Turing’s definition is probably the one that makes clearest the equivalence 
between the precise mathematical concept and the intuitive notion.* We 
already have encountered other equivalent notions: standard Turing com-
putability and partial recursiveness. One of the strongest arguments for the 
rightness of Turing’s definition is that all of the many definitions that have 
been proposed have turned out to be equivalent. We shall present several of 
these other definitions.
5.5.1  Herbrand–Gödel Computability
The idea of defining computable functions in terms of fairly simple systems 
of equations was proposed by Herbrand, given a more precise form by Gödel 
(1934), and developed in detail by Kleene (1936a). The exposition given here 
is a version of the presentation in Kleene (1952, Chapter XI.)
First let us define the terms.
	
1.	All variables are terms.
	
2.	0 is a term.
	
3.	If t is a term, then (t)′ is a term.
	
4.	If t1, …, tn are terms and fj
n is a function letter, then f
t
t
j
n
n
( ,
,
)
1 …
 is a term.
For every natural number n, we define the corresponding numeral n as 
­follows: (1) 0 is 0 and (2) n +1 is ( )
n ′. Thus, every numeral is a term.
An equation is a formula r = s where r and s are terms. A system E of equa-
tions is a finite sequence r1 = s1, r2 = s2, …, rk = sk of equations such that rk is 
of the form f
t
t
j
n
n
( ,
,
)
1 …
. The function letter fj
n is called the principal letter of 
the system E. Those function letters (if any) that appear only on the right-
hand side of equations of E are called the initial letters of E; any function 
letter other than the principal letter that appears on the left-hand side of 
some equations and also on the right-hand side of some equations is called 
an auxiliary letter of E.
We have two rules of inference:
R1: An equation e2 is a consequence of an equation e1 by R1 if and only 
if e2 arises from e1 by substituting any numeral n for all occurrences of a 
variable.
*	 For further justification of this equivalence, see Turing (1936–1937), Kleene (1952, pp. 317–323, 
376–381), Mendelson (1990), Dershowitz and Gurevich (2008), and the papers in the collection 
Olszewski (2006). The work of Dershowitz and Gurevich, based on a finer analysis of the 
notion of computation, provides much stronger support for Church’s Thesis.

356
Introduction to Mathematical Logic
R2: An equation e is a consequence by R2 of equations f
n
n
p
h
m
m
(
,
,
)
1 …
=  
and r = s if and only if e arises from r = s by replacing one occurrence of 
f
n
n
h
m
m
(
,
,
)
1 …
 in s by p, and r = s contains no variables.
A proof of an equation e from a set B of equations is a sequence e0, …, en of 
equations such that en is e and, if 0 ≤ i ≤ n, then: (1) ei is an equation of B, or 
(2) ei is a consequence by R1 of a preceding equation ej(j < i), or (3) ei is a con-
sequence by R2 of two preceding equations ej and em(j < i, m < i). We use the 
notation B ⊢ e to state that there is a proof from B of e (or, in other words, that 
e is derivable from B).
Example
Let E be the system
	
f
x
x
f
x x
f
x
f
x
1
1
1
1
1
2
1
2
1
3
2
1
1
1
2
(
)
(
)
(
,
)
( ,
,
(
))
’
=
=
The principal letter of E is f1
2, f1
1 is an auxiliary letter, and f1
3 f is an initial 
­letter. The sequence of equations
	
f
x x
f
x
f
x
f
x
f
x
f
f
1
2
1
2
1
3
2
1
1
1
1
2
2
1
3
2
1
1
1
2
2
2
2
2
(
,
)
( ,
,
(
))
( ,
)
( ,
,
( ))
(
=
=
2 1
2 1
2
2
2
2
1
3
1
1
1
1
1
1
1
1
1
1
, )
( , ,
( ))
(
)
(
)
( )
( ) ( . .,
( )
’
’
=
=
=
=
f
f
f
x
x
f
f
i e
3
2 1
2 1 3
1
2
1
3
)
( , )
( , , )
f
f
=
is a proof of f
f
1
2
1
3
2 1
2 1 3
( , )
( , , )
=
 from E.
A number-theoretic partial function φ(x1, …, xn) is said to be computed by a 
system E of equations if and only if the principal letter of E is a letter fj
n and, 
for any natural numbers k1, …, kn, p,
	E
if and only if
isdefined and
⊢f
k
k
p
k
k
k
k
j
n
n
n
n
(
,
,
)
(
,
,
)
(
,
,
1
1
1
…
=
…
…
ϕ
ϕ
)=


p
The function φ is called Herbrand–Gödel-computable (for short, HG-computable) 
if and only if there is a system E of equations by which φ is computed.
Examples
	
1.	Let E be the system f
x
1
1
1
0
(
) = . Then E computes the zero function Z. 
Hence, Z is HG-computable.

357
Computability
	
2.	Let E be the system f
x
x
1
1
1
1
(
)
(
)
=
′. Then E computes the successor func-
tion N. Hence, N is HG-computable.
	
3.	Let E be the system f
x
x
x
i
n
n
i
(
,
,
)
1 …
=
. Then E computes the projection 
function Ui
n. Hence, Ui
n is HG-computable.
	
4.	Let E be the system
	
f
x
x
f
x
x
f
x x
1
2
1
1
1
2
1
2
1
2
1
2
0
(
, )
(
,(
))
(
(
,
))
=
′ =
′
	
	 Then E computes the addition function.
	
5.	Let E be the system
	
f
x
f
x
x
1
1
1
1
1
1
1
0
(
)
(
)
=
=
The function φ(x1) computed by E is the partial function with domain {0} 
such that φ(0) = 0. For every k
f
k
≠
=
0
0
1
1
,
( )
E ⊢
 and E ⊢f
k
k
1
1( ) = . Hence, φ(x1) 
is not defined for x1 ≠ 0.
Exercises
5.59	 a.	 What functions are HG-computable by the following systems of 
equations ?
	i.	
f
f
x
x
1
1
1
1
1
1
0
0
( )
,
((
) )
=
′ =
	ii.	
f
x
x
f
x
f
x
x
f
x x
1
2
1
1
1
2
2
1
2
1
2
1
2
1
2
0
0
0
(
, )
,
( ,
)
,
((
) , (
) )
(
,
)
=
=
′
′ =
	iii.	
f
x
f
x
1
1
1
1
1
1
0
0
(
)
,
(
)
=
= ′
	iv.	
f
x
x
f
x
x
f
x x
f
x
f
x x
1
2
1
1
1
2
1
2
1
2
1
2
1
1
1
1
2
1
1
0
(
, )
,
(
,(
))
(
(
,
)),
(
)
(
,
=
′ =
′
=
)
	b.	 Show that the following functions are HG-computable.
	i.	
|x1 − x2 |
	ii.	
x1 · x2
	iii.	 ϕ( )
x
x
x
= 


0
1
if
is even
if
is odd
5.60	 a.	 Find a system E of equations that computes the n-place function that 
is nowhere defined.
	b.	 Let f be an n-place function defined on a finite domain. Find a sys-
tem of equations that computes f.
	c.	 If f(x) is an HG-computable total function and ɡ(x) is a partial func-
tion that coincides with f(x) except on a finite set A, where ɡ is unde-
fined, find a system of equations that computes ɡ.

358
Introduction to Mathematical Logic
Proposition 5.22
Every partial recursive function is HG-computable.
Proof
	
a.	Examples 1–3 above show that the initial functions Z, N, and Ui
n are 
HG-computable.
	
b.	(Substitution rule (IV).) Let φ(x1, …, xn) = η(ψ1(x1, …, xn), …, 
ψm(x1,  …,  xn))  where η, ψ1, …, ψm have been shown to be 
HG-computable. Let Ei be a system of equations computing ψi, with 
principal letter fi
n, and let Em+1 be a system of equations computing 
η, with principal letter fm
n
+1. By changing indices we may  assume 
that no two of E1, …, Em+1 have any function letters in common. 
Construct a system E for φ by listing E1, …, Em+1 and then adding 
the equation 
f
x
x
f
f
x
x
f
x
x
m
n
n
m
m
n
n
m
n
n
+
+
…
=
…
…
…
2
1
1
1
1
1
(
,
,
)
(
(
,
,
),
,
(
,
,
)).
(We may assume that fm
n
+2 does not occur in E1, …, Em+1.) It is clear 
that, if φ(k1, …, kn) = p, then E
f
k
k
p
m
m
n
⊢
+
…
=
2
1
(
,
,
)
. Conversely, 
if 
E
f
k
k
p
m
n
n
⊢
+
…
=
2
1
(
,
,
)
, 
then 
E
f
k
k
p
E
f
n
n
m
n
⊢
⊢
1
1
1
(
,
,
)
,
,
…
=
…
 
(
,
,
)
k
k
p
n
m
1 …
=
 
and 
E
f
p
p
p
m
m
m
⊢
+
…
=
1
1
(
,
,
)
. 
Hence, 
it 
­readily 
­follows that E
f
k
k
p
E
f
k
k
p
n
n
m
m
n
n
m
1
1
1
1
1
⊢
⊢
(
,
,
)
,
,
(
,
,
)
…
=
…
…
=
  and 
E
f
p
p
p
m
m
m
m
+
+
…
=
1
1
1
⊢
(
,
,
)
. Consequently, ψ
ψ
1
1
1
1
( ,
,
)
,
,
( ,
,
)
k
k
p
k
k
p
n
m
n
m
…
=
…
…
=
 
and η(p1, …, pm) = p. So, φ(k1, …, kn) = p. [Hints as to the details of 
the proof may be found in Kleene (1952, Chapter XI, especially, pp. 
262–270).] Hence, φ is HG-computable.
	
c.	(Recursion rule (V).) Let
	
ϕ
ψ
ϕ
ϑ
ϕ
(
,
,
, )
(
,
,
)
(
,
,
,
)
(
,
,
, (
,
x
x
x
x
x
x
x
x
x
x
n
n
n
n
n
1
1
1
1
1
1
1
0
1
…
=
…
…
+
=
…
+
+
…
+
,
))
xn 1
	
	 where ψ and ϑ are HG-computable. Assume that E1 is a system of equa-
tions computing ψ with principal letter f n
1  and that E2 is a system of 
equations computing ϑ with principal letter f n
1
2
+ . Then form a system 
for computing φ by adding to E1 and E2
	
f
x
x
f
x
x
f
x
x
x
f
n
n
n
n
n
n
n
n
1
1
1
1
1
1
1
1
1
1
2
0
+
+
+
+
…
=
…
…
=
(
,
,
, )
(
,
,
)
(
,
,
,(
) )
(
′
x
x
f
x
x
n
n
n
1
1
1
1
1
1
,
,
,
(
,
,
))
…
…
+
+
+
	
	 (We assume that E1 and E2 have no function letters in common.) Clearly, 
if φ(k1, …, kn, k) = p, then E ⊢f
k
k
k
p
n
n
1
1
1
+
…
=
(
,
,
, )
. Conversely, one can 
prove easily by induction on k that, if E ⊢f
k
k
k
p
n
n
1
1
1
+
…
=
(
,
,
, )
, then 
φ(k1, …, kn, k) = p. Therefore, φ is HG-computable. (The case when the 
recursion has no parameters is even easier to handle.)

359
Computability
	
d.	(μ-operator rule (VI).) Let φ(x1, …, xn) = μy(ψ(x1, …, xn, y) = 0) and assume 
that ψ is HG-computable by a system E1 of equations with principal 
­letter f n
1
1
+ . By parts (a)–(c), we know that every primitive recursive func-
tion is HG-computable. In particular, multiplication is HG-computable; 
hence, there is a system E2 of equations having no function letters in 
common with E1 and with principal letter f2
2 such that E2
2
2
1
2
⊢f
k k
p
(
,
) =
 
if and only if k1 · k2 = p. We form a system E3 by adding to E1 and E2 the 
equations
	
f
x
x
f
x
x
x
f
f
x
x
n
n
n
n
n
n
n
3
1
1
3
1
1
1
2
2
3
1
1
0
1
+
+
+
′
+
…
=
…
=
…
(
,
,
, )
(
,
,
, (
) )
(
(
,
,
,
),
(
,
,
))
x
f
x
x x
n
n
n
n
+
+
+
…
1
1
1
1
1
One can prove by induction that E3 computes the function ∏
…
<
y z
n
x
x
y
ψ(
,
,
, );
1
that is, E3
3
1
1
⊢f
k
k
k
p
n
n
+
…
=
(
,
,
,
)
 if and only if ∏
…
=
<
y z
n
k
k
y
p
ψ(
,
,
, )
1
. Now 
construct the system E by adding to E3 the equations
	
f
x
x
x
f
x
x
f
f
x
x
x
f
n
n
n
n
n
n
4
3
1
3
3
3
1
4
3
3
1
1
1
3
0
((
) , ,
)
(
,
,
)
(
(
,
,
,
),
′
=
…
=
…
+
+
+
+
+
…
1
1
1
1
(
,
,
,(
) ),
)
x
x
x
x
n
n
n
′
Then E computes the function φ(x1, …, xn) = μy(ψ(x1, …, xn, y) = 0). If μy(ψ (k1, …, 
kn, y) = 0) = q, then E3
3
1
1
⊢f
k
k
q
p
n
n
+
…
= ′
(
,
,
,
)
, where p
k
k
y
y q
n
+
= ∏
…
<
1
1
ψ(
,
,
, ), 
and E3
3
1
1
0
⊢f
k
k
q
n
n
+
…
′ =
(
,
,
,
)
. Hence, E
f
k
k
f
p
q
n
n
⊢
3
1
4
3
0
(
,
,
)
( , , ).
…
=
′
  But, 
E⊢f
p
q
q
4
3
0
( , , )
′
= , and so, E⊢f
k
k
q
n
n
3
1
(
,
,
)
…
= . Conversely, if E ⊢f
k
k
q
n
n
3
1
(
,
,
)
,
…
=
 
then 
E⊢f
m
q
q
4
3
0
(
, ,
)
′
= , 
where 
E3
3
1
1
⊢f
k
k
q
m
n
n
+
…
=
′
(
,
,
,
) (
) 
and 
E3
3
1
1
0
⊢f
k
k
q
n
n
+
…
′ =
(
,
,
,
)
. 
Hence, 
∏
…
=
+
≠
<
y q
n
k
k
y
m
ψ(
,
,
,
)
1
1
0 
and 
∏
…
=
< +
y q
n
k
k
y
1
1
0
ψ(
,
,
,
)
. So, ψ(k1, …, kn, y) ≠ 0 for y < q, and ψ(k1, …, kn, q) = 0. 
Thus, μy(ψ(k1, …, kn, y) = 0) = q. Therefore, φ is HG-computable.
We now shall proceed to show that every HG-computable function is par-
tial recursive by means of an arithmetization of the apparatus of Herbrand–
Gödel computability. We shall employ the arithmetization used for first-order 
theories in Section 3.4, except for the following changes. The Gödel number 
ɡ(′) is taken to be 17. The only individual constant 0 is assigned the Gödel 
number 19, that is, g(0) = 19. The only predicate letter “=” is identified with 
“A1
2” and is assigned the Gödel number 99 (as in Section 3.4). Thus, an equa-
tion “r = s” is an abbreviation for “A1
2(r, s)”. The following relations and func-
tions are primitive recursive (compare Propositions 3.26–3.27).
FL(x): x is the Gödel number of the function letter
	
(
)
(
)
(
(
)
)
∃
∃
=
+
∧
>
∧
>
<
<
y
z
x
y
z
y x
z x
y
z
1
8 2
3
0
0
⋅
EVbl(x): x is the Gödel number of an expression consisting of a variable
EFL(x): x is the Gödel number of an expression consisting of a function letter

360
Introduction to Mathematical Logic
Num(x): the Gödel number of the numeral x
	
Num(0) = 19
	
Num(y + 1) = 23 * Num(y) * 25 * 217
Trm(x): x is the Gödel number of a term
Nu(x): x is the Gödel number of a numeral
	
(
)
(
( ))
∃
=
<
y
x
y
y x
Num
ArgT(x) = number of arguments of a function letter, f, if x is the Gödel number 
of f
x * y = the Gödel number of an expression AB if x is the Gödel number of the 
expression A and y is the Gödel number of B
Subst(x, y, u, v): v is the Gödel number of a variable xi, u is the Gödel number 
of a term t, y is the Gödel number of an expression B, and x is 
the Gödel number of the result of substituting t for all occur-
rences of xi in B
The following are also primitive recursive:
Eqt(x): x is the Gödel number of an equation:
	
(
)
(
)
(
( )
( )
)
∃
∃
∧
∧
=
<
<
u
w
u
w
x
u x
w x
u
w
Trm
Trm
2
2
2
2
2
2
99
3
7
5
*
*
*
*
*
(Remember that = is A1
2, whose Gödel number is 99.)
Syst(x): x is the Gödel number of a system of equations:
	
(
)
(( ) )
(
)
(
)
[
( )
( )
( )
( )
∀
∧∃
∃
∧
∧
<
<
<
−
y
x
u
w
w
w
x
y
x
y
u x
w x
x
lh
lh
Eqt
EFL
Trm
1
99
3
7
5
2
2
2
2
=
*
*
*
*
*
w
u
]
Occ(u, v): u is the Gödel number of a term t or equation B and v is the Gödel 
number of a term that occurs in t or B:
	
(
( )
( ))
( )
(
)
(
)
(
Trm
Eqt
Trm
u
u
v
x
y
u
x v y
u
x v
u
v y
x u
y u
∨
∧
∧∃
∃
=
∨
=
∨
=
∨
<
<
*
*
*
*
u
v
= )
Cons1(u, v): u is the Gödel number of an equation e1, v is the Gödel number of 
an equation e2, and e2 is a consequence of e1 by rule R1:
	
Eqt
Eqt
Nu
Subst
Occ
( )
( )
(
)
(
)
(
( )
( , , , )
( , )
u
v
x
y
y
v u y x
u x
x u
y v
∧
∧∃
∃
∧
∧
<
<
)

361
Computability
Cons2(u, z, v): u, z, v are Gödel numbers of equations e1, e2, e3, respectively, and 
e3 is a consequence of e1 and e2 by rule R2:
	
Eqt
Eqt
Eqt
EVbl
Occ
( )
( ).
( )
(
)
(
( )
( , ))
(
)
(
u
z
v
x
x
z x
x
x z
x u
∧
∧
∧¬ ∃
∧
∧¬ ∃
<
< EVbl
Occ
( )
( , ))
(
)
(
)
(
)
(
)
(
)
[
x
u x
p
t
x
y
q
q
p u
t u
x u
y u
q u
∧
∧∃
∃
∃
∃
∃
=
<
<
<
<
<
21 8 2 3
99
3
7
5
2
2
2
2
+
<
<
∧
=
∧
∃
∃
(
)
( )
(
)
(
)
(
( )
x y
t
u
q
p
z
z
*
*
* *
*
*
Num
Trm
α
β
α
α
β
∧
∧
=
∧
=
∧
=
Trm
Num
( )
{[
( )
]
β
α
β
β
α
z
q
v
p
2
2
2
2
2
2
2
2
99
3
7
5
99
3
7
5
*
*
*
*
*
*
*
*
*
*
∨∃
∃
=
∧
=
∨
=
∧
<
<
(
)
(
)
[(
( )
)
(
γ
δ
β
γ
α
γ
β
δ
γ
δ
z
z
q
v
p
q
*
*
*
*
* *
*
*
2
2
2
2
99
3
7
5
Num
v
p
q
v
p
=
∨
=
∧
=
2
2
2
2
2
2
2
99
3
7
5
99
3
7
*
*
*
*
*
*
* *
*
*
*
* *
α
β
γ
δ
α
γ
q Num
Num
( )
)
(
( )
)]})
*
*
δ 25
Ded(u, z): u is the Gödel number of a system of equations E and z is the Gödel 
number of a proof from E:
	
Syst
Cons
( )
(
)
((
)
( )
( )
(
)
(( )
( )
( )
u
x
w
u
z
y
z
x
z
w
u
w
x
y x
y
∧∀
∃
=
∨∃
<
<
<
lh
lh
1
,( ) )
(
)
(
)
(( ) ,( ) ,( ) ))
z
y
v
z
z
z
x
y x
v x
y
v
x
∨∃
∃
<
< Cons2
Sn(u, x1, …, xn, z): u is the Gödel number of a system of equations E whose 
principal letter is of the form fj
n, and z is the Gödel number of a proof from E 
of an equation of the form f
x
x
p
j
n
n
(
,
,
)
1 …
=
:
	
Ded
*
*
*
( , )
(
)
(
)
[( )
(
( )
(
)
u z
w
y
u
y
w u
y u
u
n w
∧∃
∃
=
∧
∃
<
<
−
+
lh
1
99
3
1 8 2 3
2
2
2
t
t
z
x
t u
z
n w
)
(
( )
(( )
(
)
( )
(
)
<
−
+
∧
=
∗
∗
Nu
*
* Num
*
*
lh
1
99
3
1 8 2 3
3
1
7
2
2
2
2
2
Num
*
*
* Num
*
*
(
)
(
)
)]
x
x
t
n
2
7
5
2
2

Remember that ɡ(() = 3, ɡ()) = 5, and ɡ(,) = 7.
	
U x
y
w
x
w
y
y x
w x
x
( )
(
)
(( )
( )
)
( )
=
∃
=
<
<
−
µ
lh
1
99
3
7
5
2
2
2
2
*
*
*
* Num
*
(The significance of this formula is that, if x is the Gödel number of a proof 
of an equation r
p
= , then U(x) = p.)
Proposition 5.23
(Kleene, 1936a) If φ(x1, …, xn) is HG-computable by a system of equations E 
with Gödel number e, then
	
ϕ
µ
(
,
,
)
(
(
( ,
,
,
, )))
x
x
U
y
e x
x
y
n
n
n
1
1
…
=
…
S

362
Introduction to Mathematical Logic
Hence, every HG-computable function φ is partial recursive, and, if φ is total, 
then φ is recursive.
Proof
φ(k1, …, kn) = p if and only if E ⊢f
k
k
p
j
n
n
(
,
,
)
1 …
= , where fj
n is the principal let-
ter of E. φ(k1, …, kn) is defined if and only if (∃y)Sn(e, k1, …, kn, y). If φ(k1, …, kn) 
is defined, μy(Sn(e, k1, …, kn, y)) is the Gödel number of a proof from E of an 
equation f
k
k
p
j
n
n
(
,
,
)
1 …
=
. Hence, U(μy(Sn(e, k1, …, kn, y))) = p = φ(k1, …, kn). 
Also, since Sn is primitive recursive, μy(Sn(e, x1, …, xn, y)) is partial recursive. 
If φ is total, then (∀x1) … (∀xn)(∃y)Sn(e, x1, …, xn, y); hence, μy(Sn(e, x1, …, xn, y)) 
is recursive, and then, so is U(μy(Sn(e, x1, …, xn, y))).
Thus, the class of HG-computable functions is identical with the class of 
partial recursive functions. This is further evidence for Church’s thesis.
5.5.2  Markov Algorithms
By an algorithm in an alphabet A we mean a computable function 𝔄 whose 
domain is a subset of the set of words of A and the values of which are 
also words in A. If P is a word in A, 𝔄 is said to be applicable to P if P is in 
the domain of 𝔄; if 𝔄 is applicable to P, we denote its value by 𝔄(P). By an 
algorithm over an alphabet A we mean an algorithm 𝔄 in an extension B 
of A.* Of course, the notion of algorithm is as hazy as that of computable 
function.
Most familiar algorithms can be broken down into a few simple steps. 
Starting from this observation and following Markov (1954), we select a par-
ticularly simple operation, substitution of one word for another, as the basic 
unit from which algorithms are to be constructed. To this end, if P and Q are 
words of an alphabet A, then we call the expressions P → Q and P → ·Q pro-
ductions in the alphabet A. We assume that “→” and “·” are not symbols of A. 
Notice that P or Q is permitted to be the empty word. P → Q is called a simple 
production, whereas P → ·Q is a terminal production. Let us use P → (·)Q to 
denote either P → Q or P → ·Q. A finite list of productions in A
	
P
Q
P
Q
P
Q
1
1
2
2
→
→
→
( )
( )
( )
⋅
⋅
⋅

r
r
is called an algorithm schema and determines the following algorithm 𝔄 in A. 
As a preliminary definition, we say that a word T occurs in a word Q if there 
are words U, V (either one possibly the empty word Λ) such that Q = UTV. 
*	 An alphabet B is an extension of A if A ⊆ B.

363
Computability
Now, given a word P in A: (1) We write 𝔄 : P ⊐ if none of the words P1, …, Pr 
occurs in P. (2) Otherwise, if m is the least integer, with 1 ≤ m ≤ r, such that 
Pm occurs in P, and if R is the word that results from replacing the leftmost 
occurrence of Pm in P by Qm, then we write
	
a.
P
R
 :
⊢
if Pm → (·)Qm is simple (and we say that 𝔄 simply transforms P into R);
	
b
P
R
.
:

⊢⋅
if Pm → (·)Qm is terminal (and we say that 𝔄 terminally transforms P into R). 
We then define 𝔄. P ⊧ R to mean that there is a sequence R0, R1, …, Rk such 
that
	
i.	P = R0.
	
ii.	R = Rk.
	 iii.	For 0 ≤ j ≤ k −  2, 𝔄: Rj ⊢ Rj+1.
	 iv.	Either 𝔄: Rk−1 ⊢ Rk or 𝔄: Rk−1 ⊢ · Rk. (In the second case, we write 𝔄: 
P ⊧ · R.)
We set 𝔄(P) = R if and only if either 𝔄: P ⊧ · R, or 𝔄: P ⊧ R and 𝔄: R ⊐. The 
algorithm thus defined is called a normal algorithm (or a Markov algorithm) 
in the alphabet A.
The action of 𝔄 can be described as follows: given a word P, we find the 
first production Pm → (·)Qm in the schema such that Pm occurs in P. We then 
substitute Qm for the leftmost occurrence of Pm in P. Let R1 be the new word 
obtained in this way. If Pm → (·)Qm was a terminal production, the process 
stops and the value of the algorithm is R1. If Pm → (·)Qm was simple, then we 
apply the same process to R1 as was just applied to P, and so on. If we ever 
obtain a word Ri such that 𝔄: Ri ⊐, then the process stops and the value 𝔄(P) 
is Ri. It is possible that the process just described never stops. In that case, 
𝔄 is not applicable to the given word P.
Our exposition of the theory of normal algorithms will be based on Markov 
(1954).
Examples
	
1.	Let A be the alphabet {b, c}. Consider the schema
	
b
c
c
→
→
·Λ

364
Introduction to Mathematical Logic
	
	 The normal algorithm 𝔄 defined by this schema transforms any word 
that contains at least one occurrence of b into the word obtained by 
erasing the leftmost occurrence of b. 𝔄 transforms the empty word Λ 
into itself. 𝔄 is not applicable to any nonempty word that does not con-
tain b.
	
2.	Let A be the alphabet {a0, a1, …, an}. Consider the schema
	
a
a
a
0
1
→
→
→
Λ
Λ
Λ

n
	
	 We can abbreviate this schema as follows:
	
ξ
ξ
→Λ
(
)
in A
	
	 (Whenever we use such abbreviations, the productions intended may 
be listed in any order.) The corresponding normal algorithm trans-
forms every word into the empty word. For example,
	



:
:
.
,
(
a a a a a
a a a a
a a a
a a
a
and
Hence
a a
1
2
1
3
0
1
2
1
3
2
1
3
1
2
⊢
⊢
⊢
⊢
⊢
2
3
3
Λ
Λ ⊐
a a a
1
3
0)
.
= Λ
	
3.	Let A be an alphabet containing the symbol a1, which we shall abbre-
viate |. For natural numbers n, we define n inductively as follows: 
0 =| and n
n
+
=
1
|. Thus, 1
2
=
=
||,
|||, and so on. The words n will be 
called numerals. Now consider the schema Λ → ·|, defining a normal 
algorithm 𝔄. For any word P in A, 𝔄(P) = | P.* In particular, for every 
natural number n, ( )
.
n
n
=
+1
	
4.	Let A be an arbitrary alphabet {a0, a1, …, an}. Given a word P
a a
a
=
j
j
jk
0
1 
, 
let 
⌣

P
a
a a
=
j
j
j
k
1
0 be the inverse of P. We seek a normal algorithm 𝔄 such 
that ( )
P
P
=
⌣
. Consider the following (abbreviated) algorithm schema 
in the alphabet B = 𝔄 ∪ {α, β}.
	a.	
αα → β
	b.	 βξ → ξβ (ξ in A)
	c.	
βα → β
	d.	 β → · Λ
*	 To see this, observe that Λ occurs at the beginning of any word P, since P = ΛP.

365
Computability
	e.	
αηξ → ξαη (ξ, η in A)
	f.	
Λ → α
	
	 This determines a normal algorithm 𝔄 in B. Let P
a a
a
=
j
j
jk
0
1 
 
be any word in A. Then 𝔄: P ⊢ αP by production (f). Then, 
α
α
α
α
P
a
a a
a
a a
a a
a
a a
a
a
⊢
⊢
⊢
j
j
j
j
j
j
j
j
j
j
j
j
j
k
k
k
1
0
2
1
2
0
3
1
2
0
…
…
…
…
, all by pro-
duction (e). Thus, 𝔄: P ⊧ aj1 aj2 … ajk αaj0. Then, by production (f), 𝔄: P ⊧ aj2 
aj3 … ajk αaj1 αaj0 Iterating this process, we obtain 𝔄: P ⊧ αajk αajk−1 α … αaj1 
αaj0. Then, by production (f), 𝔄: P ⊧ ααajk αajk−1 α … αaj1 αaj0, and, by pro-
duction (a), 𝔄: P ⊧ βajk αajk−1 α … αaj1 αaj0. Applying productions (b) and (c) 
and finally (d), we arrive at  : P
P
 ⋅
⌣
. Thus, 𝔄 is a normal algorithm over 
A that inverts every word of A.*
Exercises
5.61	 Let A be an alphabet. Describe the action of the normal algorithms 
given by the following schemas.
	a.	 Let Q be a fixed word in A and let the algorithm schema be: Λ → · Q.
	b.	 Let Q be a fixed word in A and let α be a symbol not in A. Let B = 
A ∪ {α}. Consider the schema
	
αξ
ξα
ξ
α
α
→
→
→
(
)
in A
Q
⋅
Λ
	c.	 Let Q be a fixed word in A. Take the schema
	
ξ
ξ
→
→
Λ
Λ
(
)
in A
Q
⋅
	d.	 Let B = A ∪ {|}. Consider the schema
	
ξ
ξ
→
−
→
| (
{|})
|
in A
Λ
⋅
*	 The distinction between a normal algorithm in A and a normal algorithm over A is impor-
tant. A normal algorithm in A uses only symbols of A, whereas a normal algorithm over A 
may use additional symbols not in A. Every normal algorithm in A is a normal algorithm 
over A, but there are algorithms in A that are determined by normal algorithms over A but 
that are not normal algorithms in A (for example, the algorithm of Exercise 5.62(d)).

366
Introduction to Mathematical Logic
5.62	 Let A be an alphabet not containing the symbols α, β, γ. Let B = A ∪ {α} 
and C = A ∪ {α, β, γ}.
	a.	 Construct a normal algorithm 𝔄 in B such that 𝔄(Λ) = Λ and 
𝔄(ξP) = P for any symbol ξ in A and any word P in A. Thus, 𝔄 erases 
the first letter of any nonempty word in A.
	b.	 Construct a normal algorithm 𝔇 in B such that 𝔇(Λ) = Λ and 
𝔇(Pξ) = P for any symbol ξ in A and any word P in A. Thus, 𝔇 
erases the last letter of any nonempty word in A.
	c.	 Construct a normal algorithm ℭ in B such that ℭ(P) equals Λ if P 
contains exactly two occurrences of α and ℭ(P) is defined and is not 
equal to Λ in all other cases.
	d.	 Construct a normal algorithm B  in C such that, for any word P of 
A, 𝔅(P) = PP.
5.63	 Let A and B be alphabets and let α be a symbol in neither A nor B. For 
certain symbols a1, …, ak in A, let Q1, …, Qk be corresponding words 
in B. Consider the algorithm that associates with each word P of A 
the word Sub
P
Q
Q
a
a
1
1
…
k
k

( ) obtained by simultaneous substitution of each 
Qi for ai(i = 1, …, k). Show that this is given by a normal algorithm in 
A ∪ B ∪ {α}.
5.64	 Let H = {|} and M = {|, B}. Every natural number n is represented by its 
numeral n, which is a word in H. We represent every k-tuple (n1, n2, …, nk) 
of natural numbers by the word n
n
nk
1
2
B
B
B
…
 in M. We shall denote 
this word by (
,
,
,
)
n n
nk
1
2 …
. For example, ( , , )
3 1 2  is ||||B||B|||.
	a.	 Show that the schema
	
B
B
→
→
→
→
α
α
α
α

|
|
|
⋅
Λ
	
	
defines a normal algorithm 𝔄Z over M such that  Z n
( ) = 0 for 
any n, and 𝔄Z is applicable only to numerals in M.
	b.	 Show that the schema
	
B
B
→
→
→
α
α
|
⋅
Λ
	
	
defines a normal algorithm 𝔄N over M such that  N n
n
( ) =
+1 for 
all n, and 𝔄N is applicable only to numerals in M.

367
Computability
	c.	 Let α1, …, α2k be symbols not in M. Let 1 ≤ j ≤ k. Let Si be the list
	
α
α
α
α
α
α
α
α
2
1
2
1
2
1
2
2
2
2
2
1
i
i
i
i
i
i
i
i
−
−
−
+
→
→
→
→
B
B
B
|
|
|
	
If
consider
If
consider
If
consider
the algorithm sch
1
1
<
<
=
=
j
k
j
j
k
,
,
ema
the schema
the schema
B
B
S
S
S
S
1
1
1
1
1
2
1
2
2
1
α
α
α
α
α
α
α
→
→
→
−
−


|
|
| |
j
k
2
1
2
1
2
3
2
1
2
1
2
1
2
2
2
1
2
2
j
j
k
k
j
j
k
k
−
−
−
−
−
−
→
→
→
→
→
B
B
B
B
B
α
α
α
α
α
α
α
α
α
α
|
|
|
|
S
j
j
k
k
j
j
k
k
k
j
k
k
| |
| |
→
→
→
→
→
+
−
+
−
−
α
α
α
α
α
α
α
α
α
2
2
2
2
2
1
1
2
2
1
2
1
2
1

B
B
B
B
B
S
S
α
α
α
α
α
α
α
α
α
α
2
2
1
2
1
1
2
2
2
1
2
1
2
2
k
k
k
k
k
k
k
k
k
k
→
→
→
→
→
→
−
−
−
−
·
|
|
|
Λ
Λ

S
B
B
B
B
B
α
α
α
α
α
α
α
α
α
α
2
1
2
2
2
2
1
2
2
2
1
k
k
k
k
k
k
k
k
−→
→
→
→
→
→
→
|
·
|
·
Λ
Λ
Λ
Λ
B
B
	
	
Show that the corresponding normal algorithm  j
k is such that 
 j
k
k
j
n
n
n
((
,
,
))
1 …
=
; and  j
k is applicable to only words of the 
form (
,
,
)
n
nk
1 …
.
	d.	 Construct a schema for a normal algorithm in M transforming 
(
,
)
n n
1
2  into |
|
n
n
1
2
−
.
	e.	 Construct a normal algorithm in M for addition.
	f.	 Construct a normal algorithm over M for multiplication.
Given algorithms 𝔄 and B and a word P, we write 𝔄(P) ≈ 𝔅(P) if and only if 
either 𝔄 and B are both applicable to P and 𝔄(P) = 𝔅(P) or neither 𝔄 nor 𝔅 is 
applicable to P. More generally, if C and D are expressions, then C ≈ D is to 
hold if and only if neither C nor D is defined, or both C and D are defined and 

368
Introduction to Mathematical Logic
denote the same object. If 𝔄 and 𝔅 are algorithms over an alphabet A, then we 
say that 𝔄 and 𝔅 are fully equivalent relative to A if and only if 𝔄(P) ≈ 𝔅(P) for 
every word P in A; we say that 𝔄 and 𝔅 are equivalent relative to A if and only if, 
for any word P in A, whenever 𝔄(P) or 𝔅(P) exists and is in A, then 𝔄(P) ≈ 𝔅(P).
Let M be the alphabet {|, B}, as in Exercise 5.64, and let ω be the set of natu-
ral numbers. Given a partial number-theoretic function φ of k arguments, 
that is, a function from a subset of ωk into ω, we denote by 𝔅φ the correspond-
ing function in M; that is, ϕ
ϕ
((
,
,
))
(
,
,
)
n
n
n
n
k
k
1
1
…
=
…
 whenever either of 
the two sides of the equation is defined. 𝔅φ is assumed to be inapplicable 
to words not of the form (
,
,
)
n
nk
1 …
. The function φ is said to be Markov-
computable if and only if there is a normal algorithm 𝔄 over M that has the 
value ϕ(
,
,
)
n
nk
1 …
 when applied to (
,
,
)
n
nk
1 …
.*
A normal algorithm is said to be closed if and only if one of the productions in 
its schema has the form Λ → · Q. Such an algorithm can end only terminally—
that is, by an application of a terminal production. Given an arbitrary normal 
algorithm 𝔄, add on at the end of the schema for 𝔄 the new production Λ → · Λ, 
and denote by 𝔄· the normal algorithm determined by this enlarged schema. 
𝔄 · is closed, and 𝔄 · is fully equivalent to 𝔄 relative to the alphabet of 𝔄.
Let us now show that the composition of two normal algorithms is again 
a normal algorithm. Let 𝔄 and 𝔅 be normal algorithms in an alphabet A. 
For each symbol b in A, form a new symbol b, called the correlate of b. Let A 
be the alphabet consisting of the correlates of the symbols of A. We assume 
that A and A have no symbols in common. Let α and β be two symbols not in 
A
A
∪
. Let 𝔖A be the schema of 𝔄 · except that the terminal dot in terminal 
productions is replaced by α. Let 𝔖𝔅 be the schema of 𝔅 · except that every 
symbol is replaced by its correlate, every terminal dot is replaced by β, pro-
ductions of the form Λ → Q are replaced by α → αQ, and productions Λ → ·Q 
are replaced by α → αβQ. Consider the abbreviated schema
	
a
a
a in A
a
a
a in A
a
b
a, b in A
a
a
a in A
a
a
a in A
a
α
α
α
α
β
β
β
β
→
→
→
→
→
(
)
(
)
(
)
(
)
(
)
b
a
b
ab
a, b in A
B
A
→
→
(
)
αβ
⋅Λ


*	 In this and in all other definitions in this chapter, the existential quantifier “there is” is meant 
in the ordinary “classical” sense. When we assert that there exists an object of a certain kind, 
we do not necessarily imply that any human being has found or ever will find such an object. 
Thus, a function φ may be Markov-computable without our ever knowing it to be so.

369
Computability
This schema determines a normal algorithm 𝔊 over A such that 𝔊(P) ≈ 
𝔅(𝔄(P)) for any word P in A. 𝔊 is called the composition of 𝔄 and 𝔅 and is 
denoted 𝔅 ○ 𝔄.
Let 𝔜 be an algorithm in an alphabet A and let B be an extension of A. If we 
take a schema for 𝔜 and prefix to it the production b → b for each symbol b 
in B − A, then the new schema determines a normal algorithm 𝔜B in B such 
that 𝔜B(P) ≈ 𝔜(P) for every word P in A, and 𝔜B is not applicable to any word 
in B that contains any symbol of
B − A. 𝔜B is fully equivalent to 𝔜 relative to A and is called the propagation 
of 𝔜 onto B.
Assume that 𝔄 is a normal algorithm in an alphabet A1 and 𝔅 is a normal 
algorithm in an alphabet A2. Let A = A1 ∪ A2. Let 𝔄A and 𝔅A be the propaga-
tions of 𝔄 and 𝔅, respectively, onto A. Then the composition 𝔊 of 𝔄A and 𝔅A 
is called the normal composition of 𝔄 and 𝔅 and is denoted by 𝔅 ○ 𝔄. (When 
A1 = A2, the normal composition of 𝔄 and 𝔅 is identical with the composition 
of 𝔄 and 𝔅; hence the notation 𝔅 ○ 𝔄 is unambiguous.) 𝔊 is a normal algo-
rithm over A such that 𝔊(P) ≈ 𝔅(𝔄(P)) for any word P in A1, and 𝔊 is appli-
cable to only those words P of A such that P is a word of A1, 𝔄 is applicable 
to P, and 𝔅 is applicable to 𝔄(P). For a composition of three or more normal 
algorithms, we must use normal compositions, since a composition enlarges 
the alphabet.
Proposition 5.24
Let T   be a Turing machine with alphabet A. Then there is a normal algo-
rithm 𝔄 over A that is fully equivalent to the Turing algorithm AlgT  relative 
to A.
Proof*
Let D
q
q
=
…
k
km
0 ,
,
, where q
q
k
km
0 ,
,
…
 are the internal states of T    and q
q
k0
0
=
.
Write the algorithm schema for 𝔄 as follows: Choose a new symbol α and 
start by taking the productions αai → q0ai for all symbols ai in A, followed by 
the production α → α. Now continue with the algorithm schema in the fol-
lowing manner. First, for all quadruples qjaiakqr of T,  take the production qjai 
→ qrak. Second, for each quadruple qjaiLqr of T,  take the productions anqjai → 
qranai for all symbols an of A; then take the production
qjai → qra0ai. Third, for each quadruple qjaiRqr of T, take the productions 
qjaian → aiqran for all symbols an of A; then take the production qjai → aiqra0. 
Fourth, write the productions qki →·Λ for each internal state qki of T, and 
finally take Λ → α. This schema defines a normal algorithm 𝔄 over A, and it 
is easy to see that, for any word P of A, AlgT (P) ≈ 𝔄(P).
*	 This version of the proof is due to Gordon McLean, Jr.

370
Introduction to Mathematical Logic
Corollary 5.25
Every Turing-computable function is Markov-computable.
Proof
Let f(x1, …, xn) be standard Turing-computable by a Turing machine T    with 
alphabet A ⊇ {|, B}. (Remember that B is a0 and | is a1).) We know that, for 
any natural numbers k1, …, kn, if f(k1, …, kn) is not defined, then AlgT is not 
applicable to (
,
,
)
k
kn
1 …
, whereas, if f(k1, …, kn) is defined, then
	
AlgT ((
,
,
))
(
,
,
)
(
,
,
)
k
k
R k
k B f k
k R
n
n
n
1
1
1
1
2
…
≈
…
…
where R1 and R2 are (possibly empty) sequences of Bs. Let 𝔅 be a normal 
algorithm over A that is fully equivalent to AlgT    relative to A. Let 𝔊 be the 
normal algorithm over {|, B} determined by the schema
	
α
α
α
β
β
β
β
γ
γ
β
γ
γ
γ
β
α
B
B
B
B
B
→
→
→
→
→
→
→
→
→
|
|
| |
|
|
⋅
⋅
Λ
Λ
Λ
If R1 and R2 are possibly empty sequences of Bs, then 𝔊, when applied to 
R
B
R
1
1
1
2
(
,
,
)
(
,
,
)
k
k
f k
k
n
n
…
…
, will erase R1 and R2. Finally, let  n
n
+
+
1
1 be the 
­normal “projection” algorithm defined in Exercise 5.64(c). Then the normal 
composition 


n
n
+
+
°
°
1
1
 is a normal algorithm that computes f.
Let A be any algorithm over an alphabet A
a
a
=
…
{
,
,
}
j
jm
0
. We can associate 
with 𝔄 a partial number-theoretic function ψ𝔄 such that ψ𝔄 (n) = m if and 
only if either n is not the Gödel number* of a word of A and m = 0, or n and 
m are Gödel numbers of words P and Q of A such that 𝔄(P) = Q.
Proposition 5.26
If 𝔄 is a normal algorithm over A
a
a
=
…
{
,
,
}
j
jm
0
, then ψ𝔄 is partial recursive.
*	 Here and below, we use the Gödel numbering of the language of Turing computability given in 
Section 5.3 (page 325). Thus, the Gödel number ɡ(ai) of ai is 7 + 4i. In particular, ɡ(B) = ɡ(a0) = 7 
and ɡ(|) = ɡ(a1) = 11.

371
Computability
Proof
We may assume that the symbols of the alphabet of A are of the form ai. 
Given a simple production P → Q, we call 213g(P)5g(Q) its index; given a termi-
nal production P → ·Q, we let 223g(P)5g(Q) be its index. If P0 → (·)Q0, …, Pr → (·)Qr 
is an algorithm schema, we let its index be 2 3
0
1
k
k
r
kr
… p , where ki is the index 
of Pi → (·)Qi. Let Word(u) be the recursive predicate that holds if and only if u 
is the Gödel number of a finite sequence of symbols of the form ai:
	
u
u
z z
h u
y y
u
u
y
z
≠
∧
=
∨∀
<
⇒∃
<
∧
=
+
0
1
7
4
[
(
)(
( )
(
)(
( )
))]
ℓ
Let SI(u) be the recursive predicate that holds when u is the index of a simple 
production: l h(u) = 3 ∧ (u)0 = 1 ∧ Word((u)1) ∧ Word((u)2). Similarly, TI(u) is the 
recursive predicate that holds when u is the index of a terminal production: 
l h(u) = 3 ∧ (u)0 = 2 ∧ Word((u)1) ∧ Word((u)2). Let Ind(u) be the recursive predi-
cate that holds when u is the index of an algorithm schema: u>1 ∧ (∀ z)(z < 
l h(u)⇒SI((u)z) ∨ TI((u)z)). Let Lsub(x, y, e) be the recursive predicate that holds 
if and only if e is the index of a production P→(·)Q and x and y are Gödel 
numbers of words U and V such that P occurs in U, and V is the result of 
substituting Q for the leftmost occurrence of P in U:
	
Word
Word
SI
TI
( )
( )
(
( )
( ))
(
)
(
)
(
( )
x
y
e
e
u
v
x
u
e
v
y
u x
v x
∧
∧
∨
∧∃
∃
=
∧
=
≤
≤
*
*
1
u
e
v
w
z
x
w
e
z
w
u
w x
z x
*
*
*
*
( )
(
)
(
)
(
( )
))
2
1
∧¬ ∃
∃
=
∧
<
≤
≤
Let Occ(x, y) be the recursive predicate that holds when x and y are Gödel 
numbers of words U and V such that V occurs in U: Word(x) ∧ Word(y) ∧ 
(∃v)v≤x(∃z)z≤x (x = v * y * z). Let End(e, z) be the recursive predicate that holds 
when and only when z is the Gödel number of a word P, and e is the index 
of an algorithm schema defining an algorithm 𝔄 that cannot be applied to 
P (i.e., 𝔄: P ⊐): Ind(e) ∧ Word(z) ∧ (∀w)wht (e) ¬Occ(z,( (e)w)1). Let SCons(e, y, x) be 
the recursive predicate that holds if and only if e is the index of an algorithm 
schema and y and x are Gödel numbers of words V and U such that V arises 
from U by a simple production of the schema:
	
Ind
Word
Word
SI
Lsub
( )
( )
( )
(
)
[
(( ) )
( , ,( ) )
( )
e
x
y
v
e
x y e
v lh e
v
v
∧
∧
∧∃
∧
<
∧∀
¬
<
(
)
( ,(( ) ) )]
z
x
e
z v
z
Occ
1
Similarly, one defines the recursive predicate TCons(e, y, x), which differs 
from SCons(e, y, x) only in that the production in question is terminal. Let 
Der(e, x, y) be the recursive predicate that is true when and only when e 
is the index of an algorithm schema that determines an algorithm 𝔄, x is 
the Gödel number of a word U0, y is the Gödel number of a sequence of 
words U0, …, Uk(k ≥ 0) such that, for 0
1
1
≤<
−
+
i
k
i
 ,U
 arises from Ui by a 

372
Introduction to Mathematical Logic
production of the schema, and either  :U
U
k
k
−1 ⊢⋅
 or  :U
U
k
k
−1 ⊢
 and 𝔄: 
Uk ⊐ (or, if k = 0, just 𝔄: Uk ⊐):
	
Ind
Word
Word
( )
( )
(
)
(( ) )
( )
(
)
( )
( )
e
x
z
y
y
x
z
z
y
z
z
y
∧
∧∀
∧
=
∧∀
<
<
−
lh
lh
0
2
 SCons
End
TCo
( ,( )
,( ) )
[( ( )
( ,( ) ))
( ( )
{
e y
y
y
e y
y
z
z
+
∧
=
∧
∨
>
∧
1
0
1
1
lh
lh
ns
SCons
( ,( )
,( )
)
(
( ,( )
,
( )
( )
( )
( )
(
e y
y
e y
y
y
y
y
lh
lh
lh
lh



−
−
−
∨
1
2
1
y
y
e y
)
( )
)
( ,( )
))})]


−
−
∧
2
1
End
lh
Let WA(u) be the recursive predicate that holds if and only if u is the Gödel 
number of a word of A:
	
u
u
z
u
u
z
u
z
j
z
jm
≠
∧
=
∨∀
=
+
∨…∨
=
+
<
0
1
7
4
7
4
0
(
(
)
(( )
( )
)
( )
lh
Let e be the index of an algorithm schema for 𝔄. Now define the partial recur-
sive function φ(x) = μy((WA(x) ∧ Der(e, x, y)) ∨ ¬WA(x)). But ψ
ϕ
φ
( )
( ( ))
.
( ( ))
x
x
h
x
=
−
ℓ
1
Therefore, ψ𝔄 is partial recursive.
Corollary 5.27
Every Markov-computable function φ is partial recursive.
Proof
Let 𝔄 be a normal algorithm over {1, B} such that φ(k1, …, kn) = l if and only 
if ((
,
,
))
k
k
l
n
1 …
=
. By Proposition 5.26, the function ψ𝔄 is partial recur-
sive. Define the recursive function γ( )
( )
x
x
=
−
lh
 1. If x
p
i
n
i
=
=
Π
0
11, then n = γ(x). 
(Remember that a stroke |, which is an abbreviation for a1, has Gödel number 
11. So, if x is the Gödel number of the numeral n, then γ(x) = n.) Recall that 
TR(k1, …, kn) is the Gödel number of (
,
,
)
k
kn
1 …
.
TR is primitive recursive (by Proposition 5.4). Then φ = γ ○ ψ𝔄 ○ TR is 
partial recursive.
The equivalence of Markov computability and Turing computability fol-
lows from Corollaries 5.25 and 5.27 and the known equivalence of Turing 
computability and partial recursiveness. Many other definitions of comput-
ability have been given, all of them turning out to be equivalent to Turing 
computability. One of the earliest definitions, λ-computability, was developed 
by Church and Kleene as part of the theory of λ-conversion (see Church, 1941). 
Its equivalence with the intuitive notion of computability is not immediately 
plausible and gained credence only when λ-computability was shown to be 
equivalent to partial recursiveness and Turing computability (see Kleene, 
1936b; Turing, 1937). All reasonable variations of Turing computability seem 
to yield equivalent notions (see Oberschelp, 1958; Fischer, 1965).

373
Computability
5.6  Decision Problems
A class of problems is said to be unsolvable if there is no effective procedure for 
solving each problem in the class. For example, given any polynomial f(x) with 
integral coefficients (for example, 3x5 − 4x4 + 7x2 − 13x + 12), is there an integer 
k such that f(k) = 0? We can certainly answer this question for various special 
polynomials, but is there a single general procedure that will solve the prob-
lem for every polynomial f(x)? (The answer is given below in paragraph 4.)
If we can arithmetize the formulation of a class of problems and assign 
to each problem a natural number, then this class is unsolvable if and only 
if there is no computable function h such that, if n is the number of a given 
problem, then h(n) yields the solution of the problem. If Church’s thesis is 
assumed, the function h has to be partial recursive, and we then have a more 
accessible mathematical question.
Davis (1977b) gives an excellent survey of research on unsolvable prob-
lems. Let us look at a few decision problems, some of which we already have 
solved.
	
1.	Is a statement form of the propositional calculus a tautology? Truth tables 
provide an easy, effective procedure for answering any such question.
	
2.	Decidable and undecidable theories. Is there a procedure for determining 
whether an arbitrary wf of a formal system S  is a theorem of S  ? If so, 
S  is called decidable; otherwise, it is undecidable.
	a.	 The system L of Chapter 1 is decidable. The theorems of L are the 
tautologies, and we can apply the truth table method.
	b.	 The pure predicate calculus PP and the full predicate calculus PF 
were both shown to be recursively undecidable in Proposition 3.54.
	c.	 The theory RR and all its consistent extensions (including Peano 
arithmetic S) have been shown to be recursively undecidable in 
Corollary 3.46.
	d.	 The axiomatic set theory NBG and all its consistent extensions are 
recursively undecidable (see page 273).
	e.	 Various theories concerning order structures or algebraic structures 
have been shown to be decidable (often by the method of quanti-
fier elimination). Examples are the theory of unbounded densely 
ordered sets (see page 115 and Langford, 1927), the theory of abe-
lian groups (Szmielew, 1955), and the theory of real-closed fields 
(Tarski, 1951). For further information, consult Kreisel and Krivine 
(1967, Chapter 4); Chang and Keisler (1973, Chapter 1.5); Monk (1976, 
Chapter 13); Ershov et al. (1965); Rabin (1977); and Baudisch et al. 
(1985). On the other hand, the undecidability of many algebraic the-
ories can be derived from the results in Chapter 3 (see Tarski et al., 
1953, II.6, III; Monk, 1976, Chapter 16).

374
Introduction to Mathematical Logic
	
3.	Logical validity. Is a given wf of quantification theory logically valid? By 
Gödel’s completeness theorem (Corollary 2.19), a wf is logically valid if 
and only if it is provable in the full predicate calculus PF. Since PF is 
recursively undecidable (Proposition 3.54), the problem of logical valid-
ity is recursively unsolvable.
However, there is a decision procedure for the logical validity of wfs 
of the pure monadic predicate calculus (Exercise 3.59).
There have been extensive investigations of decision procedures for 
various important subclasses of wfs of the pure predicate calculus; for 
example, the class (∀ ∃ ∀) of all closed wfs of the form (∀x)(∃y)(∀z)B(x, 
y, z), where B(x, y, z) contains no quantifiers. See Ackermann (1954), 
Dreben and Goldfarb (1980) and Lewis (1979).
	
4.	Hilbert’s Tenth Problem. If f(x1, …, xn) is a polynomial with integral coeffi-
cients, are there integers k1, …, kn such that f(k1, …, kn) = 0? This difficult 
decision problem is known as Hilbert’s tenth problem.
For one variable, the solution is easy. When a0, a1, …, an are integers, 
any integer x such that anxn + ⋯ + a1x + a0 = 0 must be a divisor of a0.
Hence, when a0 ≠ 0, we can test each of the finite number of divisors 
of a0. If a0 = 0, then x = 0 is a solution. However, there is no analogous 
procedure when the polynomial has more than one variable. It was 
finally shown by Matiyasevich (1970) that there is no decision procedure 
for determining whether a polynomial with integral coefficients has 
a solution consisting of integers. His proof was based in part on some 
earlier work of Davis et al. (1961). The proof ultimately relies on basic 
facts of recursion theory, particularly the existence of a non-recursive 
r.e. set (Proposition 5.21(e)). An up-to-date exposition may be found in 
Matiyasevich (1993).
	
5.	Word problems.
	
	 Semi-Thue Systems. Let B = {b1, …, bn} be a finite alphabet. Remember that 
a word of B is a finite sequence of elements of B. Moreover, the empty 
sequence Λ is considered a word of B. By a production of B we mean an 
ordered pair 〈u, v〉, where u and v are words of B. If p = 〈u, v〉 is a produc-
tion of B, and if w and w′ are words of B, we write w ⇒p w′ if w′ arises from 
w by replacing a part u of w by v. (Recall that u is a part of w if there exist 
(possibly empty) words w1 and w2 such that w = w1uw2.)
By a semi-Thue system on B we mean a finite set S of productions of B. For 
words w and w′ of B, we write w ⇒S w′ if there is a finite sequence w0, w1, …, 
wk (k ≥ 0) of words of B such that w = w0, w′ = wk, and, for 0 ≤ i < k, there is a 
production p of S such that wi ⇒p wi+1. Observe that w ⇒S w for any word w 
of B. Moreover, if w1 ⇒S w2 and w2 ⇒S w3, then w1 ⇒S w3. In addition, if w1 ⇒S 
w2 and w3 ⇒S w4, then w1 w3 ⇒S w2 w4. Notice that there is no fixed order in 
which the productions have to be applied and that many different produc-
tions of S  might be applicable to the same word.

375
Computability
By a Thue system we mean a semi-Thue system such that, for every produc-
tion 〈u, v〉, the inverse 〈v, u〉 is also a production. Clearly, if S  is a Thue system 
and w ⇒S w′, then
w′ ⇒S w. Hence, ⇒S is an equivalence relation on the set of words of the 
alphabet of S.
Example
Let S  # be the Thue system that has alphabet {b} and productions 〈b3, Λ〉 and 
〈Λ, b3〉. It is easy to see that every word is transformable into b2, b, or Λ.
By a semigroup we mean a nonempty set G together with a binary operation 
on G (denoted by the juxtaposition uv of elements u and v) that satisfies the 
associative law x(yz) = (xy)z. An element y such that xy = yx = x for all x in G 
is called an identity element. If an identity element exists, it is unique and is 
denoted 1.
A Thue system S  on an alphabet B determines a semigroup G with an 
identity element. In fact, for each word w of B, let [w] be the set of all words 
w′ such that w ⇒S w′. [w] is just the equivalence class of w with respect to ⇒S . 
Let G consist of the sets [w] for all words w of B. If U and V are elements of 
G, choose a word u in U and a word v in V. Let UV stand for the set [uv]. This 
defines an operation on G, since, if u′ is any word in U and v′ is any word in 
V, [uv] = [u′v′].
Exercises
5.65	 For the set G determined by the Thue system S, prove:
	
a.	 (UV) W = U(VW) for all members U, V and W of G.
	
b.	 The equivalence class [Λ] of the empty word Λ acts as an identity 
element of G.
5.66	 a.	 Show that a semigroup contains at most one identity element.
	b.	 Give an example of a semigroup without an identity element.
A Thue system S provides what is called a finite presentation of the corre-
sponding semigroup G. The elements b1, …, bm of the alphabet of S  are called 
generators, and the productions 〈u, v〉 of S  are written in the form of equa-
tions u = v. These equations are called the relations of the presentation. Thus, 
in the Example above, b is the only generator and b3 = Λ can be taken as the 
only relation. The corresponding semigroup is a cyclic group of order 3.
If S  is a semi-Thue or Thue system, the word problem for S  is the problem 
of determining, for any words w and w′, whether w ⇒S w′.
Exercises
5.67	 Show that, for the Thue system S  # in the Example, the word problem is 
solvable.

376
Introduction to Mathematical Logic
5.68	 Consider the following Thue system S. The alphabet is {a, b, c, d} and 
the productions are 〈ac, Λ〉, 〈ca, Λ〉, 〈bd, Λ〉, 〈db, Λ〉, 〈a3, Λ〉, 〈b2, Λ〉, 〈ab, 
ba〉, and their inverses.
	a.	 Show that c ⇒S a2 and d ⇒S b.
	b.	 Show that every word of S  can be transformed into one of the words 
a, a2, b, ab, a2b, and Λ.
	c.	 Show that the word problem for S  is solvable. [Hint: To show that 
the six words of part (b) cannot be transformed into one another, 
use the cyclic group of order 6 generated by an element g, with 
a = g2 and b = g3.]
Proposition 5.30
(Post, 1947) There exists a Thue system with a recursively unsolvable word 
problem.
Proof
Let T   be a Turing machine with alphabet {a0, a1, …, an} and internal states 
{q0, q1, …, qm}. Remember that a tape description is a sequence of symbols 
describing the condition of T  at any given moment; it consists of symbols 
of the alphabet of T  plus one internal state qj, and qj is not the last symbol 
of the description. T  is in state qj, scanning the symbol following qj, and 
the alphabet symbols, read from left to right, constitute the entire tape at 
the given moment. We shall construct a semi-Thue system S  that will reflect 
the operation of T   : each action induced by quadruples of T   will be copied 
by productions of S. The alphabet of S  consists of {a0, a1, …, an, q0, q1, …, qm, β, 
δ, ξ}. The symbol β will be placed at the beginning and end of a tape descrip-
tion in order to “alert” the semi-Thue system when it is necessary to add an 
extra blank square on the left or right end of the tape. We wish to ensure that, 
if W
W
⇒
′
T
, then βWβ ⇒S βW′β. The productions of S are constructed from 
the quadruples of T   in the following manner.
	
a.	If qjaiakqr is a quadruple of T,  let 〈qjai, arqk〉 be a production of S.
	
b.	If qjaiRqr is a quadruple of T, let 〈qjaiaℓ, aiqraℓ〉 be a production of S  for 
every aℓ. In addition, let 〈qjai β ai, qra0 β〉 be a production of S. (This last 
production adds a blank square when Treaches the right end of the 
tape and is ordered to move right.)
	
c.	If qjaiLqr is a quadruple of T, let 〈aℓqjai, qralai〉 be a production of S   for 
each aℓ. In addition, let 〈β qjai, β qra0ai〉 be a production of S. (This last 
production adds a blank square to the left of the tape when this is 
required.)
	
d.	If there is no quadruple of T     beginning with qjai, let S  contain the following 
productions: 〈qjai, δ〉, 〈δ aℓ, δ〉 for all aℓ; 〈δ β, ξ〉, 〈aℓ ξ, ξ〉 for all aℓ; and 〈β ξ, ξ〉.

377
Computability
T   stops when it is in a state qj, scanning a symbol ai, such that qjai does not 
begin a quadruple of T.   In such a case, S  would replace qjai in the final tape 
description of T   by δ. Then δ proceeds to annihilate all the other symbols to 
its right, including the rightmost β, whereupon it changes to ξ. ξ then anni-
hilates all symbols to its left, including the remaining β. The final result is ξ 
alone. Hence:
(□) For any initial tape description α, T     halts when and only when βαβ ⇒S ξ
Now, enlarge S  to a Thue system S  ′ by adding to S  the inverses of all the 
productions of S. Let us show that
(∇) For any initial tape description α of T,  βαβ ⇒S′ ξ if and only if βαβ ⇒S ξ
Clearly, if βαβ ⇒S ξ, then βαβ ⇒S′ ξ. Conversely, assume for the sake of 
contradiction that βαβ ⇒S′ ξ, but it is not the case that βαβ ⇒S ξ. Consider a 
sequence of words leading from β α β to ξ in S  ′:
	
βαβ
ξ
=
⇒
…⇒
⇒
=
′
′
′
−
w
w
w
0
1
S
S
S
t
t
Here, each arrow is intended to indicate a single application of a produc-
tion. It is clear from the definition of S   that no production of S   applies to ξ 
alone. Hence, the last step in the sequence wt−1 ⇒S′ ξ must be the result of a 
production of S. So, wt−1 ⇒S ξ. Working backward, let us find the least p such 
that wp ⇒S ξ. Since we have assumed that it is not true that βαβ ⇒S ξ, we must 
have p > 0. By the minimality of p, it is not true that wp−1 ⇒S wp. Therefore, 
wp ⇒S wp−1. Examination of the productions of S shows that each of the words 
w0, w1, …, wt must contain exactly one of the symbols q0, q1, …, qm, δ, or ξ, 
and that, to such a word, at most one production of S   is applicable. But, wp is 
transformed into both wp+1 and wp−1 by productions of S. Hence, wp−1 = wp+1. 
But, wp+1 ⇒S ξ. Hence, wp−1 ⇒S ξ, contradicting the definition of p. This estab-
lishes (∇).
Now, let T be a Turing machine with a recursively unsolvable halting 
problem (Proposition 5.14). Construct the corresponding Thue system S  ′ as 
above. Then, by (□) and (∇), for any tape description α, T    halts if and only if 
βαβ ⇒S′ ξ. So, if the word problem for S′ were recursively solvable, the halt-
ing problem for T   would be recursively solvable. (The function that assigns 
to the Gödel number of α the Gödel number of 〈βαβ, ξ〉 is clearly recursive 
under a suitable arithmetization of the symbolism of Turing machines and 
Thue systems.) Thus, S′ has a recursively unsolvable word problem.
That the word problem is unsolvable even for certain Thue systems on a two-
element alphabet (semigroups with two generators) was proved by Hall (1949).
	
a.	Finitely presented groups. A finite presentation of a group consists of a finite 
set of generators g1, …, gr and a finite set of equations W1 = W1′, …, Wt 
= Wt′ between words of the alphabet B
g
g g
g
=
…
…
−
−
{
,
,
,
,
,
}.
1
1
1
1
r
r
 What 
is really involved here is a Thue system S with alphabet B, produc-
tions 〈W1, W1′〉, …, 〈Wt, Wt′〉 and their inverses, and all the productions 

378
Introduction to Mathematical Logic
〈
〉〈
〉
−
−
g g
g g
i
i
i
i
1
1
,
,
,
Λ
Λ  and their inverses. The corresponding semigroup 
G is actually a group and is called a finitely presented group. The word 
problem for G (or, rather, for the finite presentation of G) is the word 
problem for the Thue system S.
Problems that concern word problems for finitely presented groups are 
generally much more difficult than corresponding problems for finitely 
presented semigroups (Thue systems). The existence of a finitely presented 
group with a recursively unsolvable word problem was proved, indepen-
dently, by Novikov (1955) and Boone (1959). Other proofs have been given by 
Higman (1961), Britton (1963), and McKenzie and Thompson (1973). (See also 
Rotman, 1973.) Results on other decision problems connected with groups 
may be found in Rabin (1958). For corresponding problems in general alge-
braic systems, consult Evans (1951).

379
Appendix A: Second-Order Logic
Our treatment of quantification theory in Chapter 2 was confined to first-
order logic; that is, the variables used in quantifiers were only individual 
variables. The axiom systems for formal number theory in Chapter 3 and 
set theory in Chapter 4 also were formulated within first-order languages. 
This restriction brings with it certain advantages and disadvantages, and 
we wish now to see what happens when the restriction is lifted. That will 
mean allowing quantification with respect to predicate and function vari-
ables. Emphasis will be on second-order logic, since the important differ-
ences between first-order and higher-order logics already reveal themselves 
at the second-order level. Our treatment will offer only a sketch of the basic 
ideas and results of second-order logic.
Let L1C be the first-order language in which C is the set of nonlogical 
constants (i.e., individual constants, function letters, and predicate letters). 
Start with the language L1C, and add function variables gi
n gand predicate 
variables Ri
n, where n and i are any positive integers.* (We shall use gn, hn, … 
to stand for any function variables of n arguments and Rn, Sn, …, Xn, Yn, Zn 
to stand for any predicate variables of n arguments; we shall also omit the 
superscript n when the value of n is clear from the context.) Let 〈u〉n stand 
for any sequence of individual variables u1, …, un
† and let ∀〈u〉n stand for 
the expression (∀u1) … (∀un). Similarly, let 〈t〉n stand for a sequence of terms 
t1, …, tn. We expand the set of terms by allowing formation of terms gn(〈t〉n), 
where gn is a function variable, and we then expand the set of formulas by 
allowing formation of atomic formulas A
t
i
n
n
〈〉
(
) and Rn(〈t〉n) where 〈t〉n is 
any sequence of the newly enlarged set of terms, Ai
n is any predicate letter 
of C, and Rn is any n-ary predicate variable. Finally, we expand the set of 
formulas by quantification (∀gn) B and (∀Rn) B with respect to function and 
predicate variables.
Let L2C denote the second-order language obtained in this way. The lan-
guage L2C will be called a full second-order language. The adjective “full” 
indicates that we allow both function variables and predicate variables and 
that there is no restriction on the arity n of those variables. An example of 
a nonfull second-order language is the second-order monadic predicate 
*	 We use bold letters to avoid confusion with function letters and predicate letters. Note that 
function letters and predicate letters are supposed to denote specific operations and rela-
tions, whereas function variables and predicate variables vary over arbitrary operations and 
relations.
†	 In particular, 〈x〉n will stand for x1, …, xn.

380
Appendix A: Second-Order Logic
­language in which there are no function letters or variables, no predicate let-
ters, and only monadic predicate variables.*
It is not necessary to take = as a primitive symbol, since it can be defined 
in the following manner.
Definitions
	
t
u
t
u
x
x
x
n
n
n
n
n
n
=
∀
⇔
=
∀〈〉
〈〉
(
) =
〈
stands for
stands for
(
)(
)
R
R
R
g
h
g
h
1
1
1
〉
(
)
(
)
=
∀〈〉
〈〉
(
) ⇔
〈〉
(
)
(
)
n
n
n
n
n
n
n
n
x
x
x
R
S
R
S
stands for
Standard Second-Order Semantics for L2C
For a given language L2C, let us start with a first-order interpretation with 
domain D. In the first-order case, we defined satisfaction for the set ∑ of 
denumerable sequences of members of D. Now, instead of ∑, we use the 
set ∑2 of functions s that assign to each individual variable a member of 
D, to each function variable gn some n-ary operation s(gn) on D, and to 
each predicate variable Rn some n-ary relation† s(Rn) on D. For each such 
s, we extend the denotations determined by s by specifying that, for any 
terms t1, …, tn and any function variable gn, the denotation s(gn(t1, …, tn)) is 
s(gn)(s(t1), …, s(tn)). The first-order definition of satisfaction is extended as 
follows:
	
a.	For any predicate variable Rn and any finite sequence 〈t〉n of terms, s 
satisfies Rn(〈t〉n) if and only if 〈s(t1), …, s(tn)〉 ∈ s(Rn).
	
b.	s satisfies (∀gn) B if and only if s′ satisfies B for every s′ in ∑2  that 
agrees with s except possibly at gn.
	
c.	s satisfies (∀Rn) B if and only if s′ satisfies B  for every s′ in ∑2  that 
agrees with s except possibly at Rn.
The resulting interpretation M  is called a standard interpretation of the given 
language.
*	 Third-order logics are obtained by adding function and predicate letters and variables that 
can have as arguments individual variables, function and predicate letters, and second-order 
function and predicate variables and then allowing quantification with respect to the new 
function and predicate variables. This procedure can be iterated to obtain nth-order logics for 
all n ≥ 1.
†	 An n-ary relation on D is a subset of the set Dn of n-tuples of D. When n = 1, an n-ary relation 
is just a subset of D.

381
Appendix A: Second-Order Logic
A formula B  is said to be true for a standard interpretation M  (written 
M  ⊧ B) if B is satisfied by every s in ∑2. B  is false for M  if no function s in ∑2 
satisfies B.
A formula B  is said to be standardly valid if B is true for all standard 
interpretations. B   is said to be standardly satisfiable if B   is satisfied by 
some s in ∑2 in some standard interpretation. A formula C  is said to be 
a ­standard logical consequence of a set Γ of formulas if, for every standard 
interpretation, every s in ∑2 that satisfies every formula in Γ also satisfies C. 
A formula B is said to standardly logically imply a formula C if C is a logical 
consequence of {B }.
The basic properties of satisfaction, truth, logical consequence, and logi-
cal implication that held in the first-order case (see (I)–(XI) on pages 57–60) 
also hold here for their standard versions. In particular, a sentence 
B   is standardly satisfiable if and only if B   is true for some standard 
interpretation.
We shall see that second-order languages have much greater expressive 
power than first-order languages. This is true even in the case where the set 
C of nonlogical constants is empty. The corresponding language L2∅ will 
be denoted L2 and called the pure full second-order language. Consider the 
following sentence in L2:
	
( ) (
)(
)(
)[( ( )
(
)( ( )
( ( ))))
(
) ( )]
1
∃
∃
∀
∧∀
⇒
⇒∀
g
R
R
R
R g
R
x
x
y
y
y
x
x
This sentence is true for a standard interpretation if and only if the domain 
D is finite or denumerable. To see this, consider an operation ɡ and ele-
ment x given by this sentence. By induction, define the sequence x, ɡ(x), 
ɡ(ɡ(x)), ɡ(ɡ(ɡ(x))), …, and let R be the set of objects in this sequence. R is 
finite or denumerable, and (1) tells us that every object in D is in R. Hence, 
D = R and D is finite or denumerable. Conversely, assume that D is finite or 
denumerable. Let F be a one–one function from D onto ω (when D is denu-
merable) or onto an initial segment {0, 1, …, n} of ω (when D is finite).* Let 
x = F1(0) and define an operation g on D in the following manner. When D 
is denumerable, ɡ(u) = F−1(F(u) + 1) for all u in D; when D is finite, let ɡ(u) = 
F−1(F(u) + 1)) if F(u) < n and ɡ(u) = x if F(u) = n. With this choice of ɡ and x, 
(1) holds.
Exercise
A.1	 Show that there is no first-order sentence B such that B is true in an 
interpretation if and only if its domain is finite or denumerable. (Hint: 
Use Corollary 2.22.)
*	 Remember that the domain of an interpretation is assumed to be nonempty.

382
Appendix A: Second-Order Logic
Let us introduce the abbreviations Y1 ⊆ X1 for (∀u)(Y1(u) ⇒ X1(u)), NonEm 
(X1) for (∃u)(X1(u)), and Asym (R2, X1) for (∀u)(∀v)(X1(u) ∧ X1(v) ∧ R2(u, v) ⇒ 
¬R2(v, u)). Let R2 We X1 stand for the second-order formula:
	
Asym(
NonEm
R
X
Y
Y
X
Y
Y
Y
2
1
1
1
1
1
1
1
,
)
(
)(
(
)
(
)(
( )
(
)(
( )
∧∀
⊆
∧
⇒∃
∧∀
∧
≠
u
u
v
v
v
uu
u v
⇒R2( , )))
Then R2 We X1 is satisfied by an assignment in a given standard interpre-
tation if and only if the binary relation assigned to R2 well-orders the set 
assigned to X1. (First note that the asymmetry Asym(R2, X1) implies that R2 is 
irreflexive on X1. To see that R2 is transitive on X1, assume R2(u, v) and R2(v, w). 
Letting Y1 = {u, v, w}, we leave it as an exercise to conclude that R2(u, w). To 
show that R2 is connected on X1, take any two distinct elements x and y of X1 
and consider Y2 = {x, y}.)
Let Suc(u, v, R2) stand for R2(v, u) ∧ (∀w)¬(R2(v, w) ∧ R2(w, u)), and let 
First(u, R2) stand for (∀v)(v ≠ u ⇒ R2(u, v)). Consider the following second-
order formula:
	
( ) (
)(
)(
(
)
( )
(
)(
( ,
)
(
)
(
2
2
1
2
1
1
2
∃
∃
∧∀
∧∀
¬
⇒∃
R
X
R
X
X
R
We
First
Suc
u
u
u
u
v
u, ,
))
(
)(
)(
( , )))
v
u
v v
u
v u
R
R
2
2
∧∃
∀
≠
⇒
This is true for a standard interpretation if and only if there is a well-­ordering 
of the domain in which every element other than the first is a successor and 
there is a last element. But this is equivalent to the domain being finite. 
Hence, (2) is true for a standard interpretation if and only if its domain is 
finite.
Exercise
A.2	 (a) Show that, for every natural number n, there is a first-order sentence 
the models of which are all interpretations whose domain contains at 
least n elements. (b) Show that, for every positive integer n, there is 
a first-order theory the models of which are all interpretations whose 
domain contains exactly n elements. (c) Show that there is no first-order 
sentence B that is true for any interpretation if and only if its domain is 
finite.
The second-order sentence (1) ∧ ¬(2) is true for a standard interpretation if 
and only if the domain is denumerable.
Exercises
A.3	 Show that there is no first-order sentence B  the models of which are all 
interpretations whose domain is denumerable.

383
Appendix A: Second-Order Logic
A.4	 Construct a second-order formula Den(X1) that is satisfied by an 
assignment in a standard interpretation if and only if the set assigned 
to X1 is denumerable.
Second-Order Theories
We define a second-order theory in a language L2C by adding the following 
new logical axioms and rules to the first-order axioms and rules:
(B4a) (∀Rn) B (Rn) ⇒B (Wn), where B (Wn) arises from B (Rn) by replacing 
all free occurrences of Rn by Wn and Wn is free for Rn in B (Rn).
(B4b) (∀gn) B (gn) ⇒B (hn), where B (hn) arises from B (gn) by replacing all 
free occurrences of gn by hn and hn is free for gn in B (gn).
(B5a) (∀Rn)( B ⇒C) ⇒ (B ⇒ (∀Rn) C), where Rn is not free in B.
(B5b) (∀gn)( B ⇒C) ⇒ (B ⇒ (∀gn) C), where gn is not free in B.
Comprehension Schema (COMP)
(∃Rn)(∀〈x〉n)(Rn(〈x〉n) ⇔B ), provided that all free variables of B  occur in 〈x〉n 
and Rn is not free in B.
Function Definition Schema (FUNDEF)
	
(
)
(
)
,
(
)
,
∀
∀〈〉
(
) ∃
〈〉
(
) ⇒∃
∀〈〉
(
)
〈〉
〈〉
+
+
+
R
R
g
R
g
n
n
n
n
n
n
n
n
n
x
y
x
y
x
x
x
1
1
1
1
n
(
)
(
)


New Rules
(Gen2a) (∀Rn) B  follows from B
(Gen2b) (∀gn) B  follows from B
Exercises
A.5	 Show that we can prove analogues of the usual equality axioms 
(A6)–(A7) in any second-order theory:
	
i.	 ⊢ t = t ∧ gn = gn ∧ Rn = Rn
	
ii.	 ⊢ t = s ⇒ (B  (t, t) ⇒B (t, s)), where B (t, s) arises from B (t, t) by replac-
ing zero or more occurrences of t by s, provided that s is free for t in 
B (t, t).
	
iii.	 ⊢ gn = hn ⇒ (B (gn, gn) ⇒B (gn, hn)), where B (gn, hn) arises from B (gn, 
gn) by replacing zero or more occurrences of gn by hn, provided that 
hn is free for gn in B (gn, gn).
	
iv.	 ⊢ Rn = Sn ⇒ (B (Rn, Rn) ⇒B (Rn, Sn)), where B (Rn, Sn) arises from B 
(Rn, Rn) by replacing zero or more occurrences of Rn by Sn, provided 
that Sn is free for Rn in B (Rn, Rn).

384
Appendix A: Second-Order Logic
A.6	 Formulate and prove a second-order analogue of the first-order deduc-
tion theorem (Proposition 2.5).
Let PC2 denote the second-order theory in the language L2C without any 
nonlogical axioms. PC2 is called a second-order predicate calculus.
Proposition A.1 (Soundness)
Every theorem of PC2 is standardly valid.
Proof
That all the logical axioms (except Comp and FunDef) are standardly 
valid and that the rules of inference preserve standard validity follow by 
­arguments like those for the analogous first-order properties. The standard 
validity of Comp and FunDef follows by simple set-theoretic arguments.
We shall see that the converse of Proposition A.1 does not hold. This will 
turn out to be not a consequence of a poor choice of axioms and rules but an 
inherent incompleteness of second-order logic.
Let us consider the system of natural numbers. No first-order theory will 
have as its models those and only those interpretations that are isomorphic 
to the system of natural numbers.* However, a second-order characterization 
of the natural numbers is possible. Let AR2 be the conjunction of the axioms 
(S1)–(S8) of the theory S of formal arithmetic (see page 154), and the following 
second-order principle of mathematical induction:
	
(
)
(
)
( )
(
)
( )
( )
(
)
( )
2 9
0
1
1
1
1
1
S
∀
∧∀
⇒
′
(
) ⇒∀


R
R
x
R x
R x
x R x
Notice that, with the help of Comp, all instances of the first-order axiom 
schema (S9) can be derived from (2S9).†
For any standard interpretation that is a model of AR2 we can prove the 
following result that justifies inductive definition.
*	 Let K be any first-order theory in the language of arithmetic whose axioms are true in the 
system of natural numbers. Add a new individual constant b and the axioms b
n
≠
 for every 
natural number n. The new theory K* is consistent, since any finite set of its axioms has a 
model in the system of natural numbers. By Proposition 2.17, K* has a model, but that model 
cannot be isomorphic to the system of natural numbers, since the object denoted by b cannot 
correspond to a natural number. 
†	 In AR2, the function letters for addition and multiplication and the associated axioms (S5)–
(S8) can be omitted. The existence of operations satisfying (S5)–(S8) can then be proved. See 
Mendelson (1973, Sections 2.3 and 2.5).

385
Appendix A: Second-Order Logic
Proposition A.2 (Iteration Theorem)
Let M  be a standard interpretation that is a model of AR2, and let D be the 
domain of M. Let c be an element of an arbitrary set W and let ɡ be a singu-
lary operation of W. Then there is a unique function F from D into W such 
that F(0) = c and (∀x)(x ∈ D ⇒ F(x′) = g(F(x))).*
Proof
Let C be the set of all subsets H of D × W such that 〈1, c〉 ∈ H and (∀x)(∀w)
(〈x, w〉 ∈ H ⇒ 〈x′, ɡ(w)〉 ∈ H). Note that D × W ∈ C. Let F be the intersection 
of all sets H in C. We leave it to the reader to prove the following assertions:
	
a.	F ∈ C
	
b.	F is a function from D into W. (Hint: Let B be the set of all x in D for 
which there is a unique w in W such that 〈x, w〉∈ F. By mathematical 
induction, show that B = D.)
	
c.	F(0) = c.
	
d.	F(x′) = ɡ(F(x)) for all x in D.
The uniqueness of F can be shown by a simple application of mathematical 
induction.
Proposition A.3 (Categoricity of AR2)
Any two standard interpretations M  and M  * that are models of AR2 are 
isomorphic.
Proof
Let D and D* be the domains of M  and M  *, 0 and 0* the respective zero 
elements, and f and f* the respective successor operations. By the iteration 
theorem applied to M, with W = D*, c = 0* and ɡ = f*, we obtain a function F 
from D into D* such that F(0) = 0* and F(f(x)) = f*(F(x)) for any x in D. An easy 
application of mathematical induction in M  * shows that every element of D* 
is in the range of F. To show that F is one–one, apply mathematical induction 
in M  to the set of all x in D such that (∀ y)[(y ∈ D ∧ y ≠ x)⇒F(x) ≠ F(y)].†
Let A consist of the nonlogical constants of formal arithmetic (zero, 
­successor, addition, multiplication, equality). Let N   be the standard 
*	 In order to avoid cumbersome notation, “0” denotes the interpretation in M of the individual 
constant “0,” and “x′” denotes the result of the application to the object x of the interpretation 
of the successor function.
†	 Details of the proof may be found in Mendelson (1973, Section 2.7).

386
Appendix A: Second-Order Logic
­interpretation of L2A  with the set of natural numbers as its domain and the 
usual interpretations of the nonlogical constants.
Proposition A.4
Let B  be any formula of L2 A . Then B  is true in N  if and only if AR2 ⇒B  is 
standardly valid.
Proof
Assume AR2 ⇒B is standardly valid. So AR2 ⇒B  is true in N . But AR2 is 
true in N. Hence, B is true in N . Conversely, assume B  is true in N. We must 
show that AR2 ⇒B  is standardly valid. Assume that AR2 is true in some 
standard interpretation M  of L2A. By the categoricity of AR2, M  is isomor-
phic to N. Therefore, since B  is true in N, B  is true in M. Thus, AR2 ⇒B  is 
true in every standard interpretation of L2A , that is, AR2 ⇒B  is standardly 
valid.
Proposition A.5
	
a.	The set SV of standardly valid formulas of L2A  is not effectively 
enumerable.
	
b.	SV is not recursively enumerable, that is, the set of Gödel numbers of 
formulas in SV is not recursively enumerable.
Proof
	
a.	Assume that SV is effectively enumerable. Then, by Proposition A4, 
we could effectively enumerate the set TR of all true formulas of first-
order arithmetic by running through SV, finding all formulas of the 
form AR2 ⇒B, where B  is a formula of first-order arithmetic, and 
listing those formulas B. Then the theory TR  would be decidable, 
since, for any closed formula C, we could effectively enumerate TR 
until either C or its negation appears. By Church’s thesis, TR  would 
be recursively decidable, contradicting Corollary 3.46 (since TR  is a 
consistent extension of RR).
	
b.	This follows from part (a) by Church’s thesis.
The use of Church’s thesis in the proof could be avoided by a consistent use 
of recursion-theoretic language and results. The same technique as the one 
used in part (a), together with Tarski’s theorem (Corollary 3.44), would show 
the stronger result that the set (of Gödel numbers) of the formulas in SV is 
not arithmetical.

387
Appendix A: Second-Order Logic
Corollary A.6
The set of all standardly valid formulas is not effectively (or recursively) 
enumerable.
Proof
An enumeration of all standardly valid formulas would yield an enumera-
tion of all standardly valid formulas of L2A , since the set of formulas of 
L2A  is decidable (recursively decidable).
Corollary A.7
There is no axiomatic formal system whose theorems are the standardly 
valid formulas of L2A .
Proof
If there were such an axiom system, we could enumerate the standardly 
valid formulas of L2A , contradicting Corollary A.5.
Proposition A.8 (Incompleteness of Standard Semantics)
There is no axiomatic formal system whose theorems are all standardly valid 
formulas.
Proof
If there were such an axiom system, we could enumerate the set of all stan-
dardly valid formulas, contradicting Corollary A.6.
Proposition A.8 sharply distinguishes second-order logic from first-order 
logic, since Gödel’s completeness theorem tells us that there is an axiomatic 
formal system whose theorems are all logically valid first-order formulas. 
Here are some additional important properties enjoyed by first-order theo-
ries that do not hold for second-order theories:
	
I.	Every consistent theory has a model. To see that this does not hold 
for second-order logic (with “model” meaning “model in the sense 
of the standard semantics”), add to the theory AR2 a new individ-
ual constant b. Let T  be the theory obtained by adding to AR2 the 
set of axioms b
n
≠
 for all natural number n. T  is consistent. (Any 
proof involves a finite number of the axioms b
n
≠
. AR2 plus any 
finite number of the axioms b
n
≠
 has the standard interpretation as 

388
Appendix A: Second-Order Logic
a model, with b interpreted as a suitable natural number. So every 
step of the proof would be true in N. Therefore, a contradiction can-
not be proved.). But T has no standard model. (If M  were such a 
model, AR2 would be true in M. Hence, M  would be isomorphic to 
N, and so the domain of M  would consist of the objects denoted by 
the numerals n. But this contradicts the requirement that the domain 
of M  would have to have an object denoted by “b” that would satisfy 
the axioms b
n
≠
 for all natural numbers n.)
	
II.	The compactness property: a set Γ of formulas has a model if and 
only if every finite subset of Γ has a model. A counterexample is 
furnished by the set of axioms of the theory T  in (I) earlier.
	 III.	The upward Skolem–Löwenheim theorem: every theory that has an 
infinite model has models of every infinite cardinality. In second-
order logic this fails for the theory AR2. By Proposition A.3, all mod-
els of AR must be denumerable.
	 IV.	The downward Skolem–Löwenheim theorem: every model M  of a 
theory has a countable elementary submodel.* In second-order logic, 
a counterexample is furnished by the second-order categorical the-
ory for the real number system.† Another argument can be given 
by the following considerations. We can express by the following 
second-order formula P (Y1, X1) the assertion that Y1 is equinumer-
ous with the power set of X1:
	
(
) (
)(
)(
(
)
(
)
(
)(
( )
[
(
, )
(
,
∃
∀
∀
[
∧
∧∀
⇒
⇔
R
X
X
Y
R
2
1
2
1
1
1
2
1
2
1
2
2
x
x
x
x
y
y
R x y
x
y
x
x
x
x
y
y
x y
)])
(
)(
(
)(
( )
(
)(
( )(
( , )))
)
⇒
=
∧∀
⊆
⇒∃
∧
∀
⇔

1
2
1
1
1
1
1
2
W
W
Y
X
W
R

R2 correlates with each x in X1 the set of all y in Y1 such that R2(x, y). Now 
consider the following sentence Cont:
	
∃(
) ∃(
)
(
) ∧∀
(
)
( ) ∧
(
)
(
)
X
Y
X
Y
Y
X
1
1
1
1
1
1
Den
y
y
P
,
Then Cont is true in a standard interpretation if and only if the domain of the 
interpretation has the power of the continuum, since the power set of a denu-
merable set has the power of the continuum. See Shapiro (1991, Section 5.1.2) 
*	 For a definition of elementary submodel, see Section 2.13.
†	 The axioms are those for an ordered field (see page 97) plus a second-order completeness 
axiom. The latter can be taken to be the assertion that every nonempty subset that is bounded 
above has a least upper bound (or, equivalently, that no Dedekind cut is a gap). For a proof of 
categoricity, see Mendelson (1973, Section 5.4).

389
Appendix A: Second-Order Logic
and Garland (1974) for more information about the definability of cardinal 
numbers in second-order logic.
Exercises
A.7 Show that a sentence of pure second-order logic is true in a standard 
interpretation M  if and only if it is true in any other standard interpre-
tation whose domain has the same cardinal number as that of M.
A.8	 a.	 Show that there is a formula Cont (X1) of pure second-order logic 
that is satisfied by an assignment in an interpretation if and only if 
the set assigned to X1 has the power of the continuum.
	
b.	 Find a sentence CH of pure second-order logic that is standardly 
valid if and only if the continuum hypothesis is true.*
Henkin Semantics for L2C
In light of the fact that completeness, compactness, and the Skolem–
Löwenheim theorems do not hold in second-order logic, it is of some inter-
est that there is a modification of the semantics for second-order logic that 
removes those drawbacks and restores a completeness property. The funda-
mental ideas sketched later are due to Henkin (1950).
Start with a first-order interpretation with domain D. For each positive 
integer n, choose a fixed collection D (n) of n-ary relations on D and a fixed 
collection F  (n) of n-ary operations on D. Instead of ∑2, we now use the set 
∑2
H of assignments s in ∑2 such that, for each predicate variable Rn, s(Rn) is 
in D  (n) and, for each function variable gn, s(gn) is in F  (n). The definitions of 
satisfaction and truth are the same as for standard semantics, except that ∑2 
is replaced by ∑2
H. Such an interpretation will be called a Henkin interpreta-
tion. Using a Henkin interpretation amounts to restricting the ranges of the 
predicate and function variables. For example, the range of a predicate vari-
able R1 need not be the entire power set P  (D) of the domain D. In order for 
a Henkin interpretation H   to serve as an adequate semantic framework, we 
must require that all instances of the comprehension schema and the func-
tion definition schema are true in H   . A Henkin interpretation for which this 
condition is met will be called a general model. A formula that is true in all 
general models will be said to be generally valid, and a formula that is satis-
fied by some assignment in some general model will be said to be generally 
satisfiable. We say that B  generally implies C if B  ⇒C is generally valid and that 
B  is generally equivalent to C if B  ⇔C is generally valid.
A standard interpretation on a domain D determines a corresponding gen-
eral model in which D  (n) is the set of all n-ary relations on D and F  (n) is the 
set of all n-ary operations on D. Such a general model is called a full general 
*	 We take as the continuum hypothesis the assertion that every subset of the set of real num-
bers is either finite or denumerable or is equinumerous with the set of all real numbers.

390
Appendix A: Second-Order Logic
model. Standard satisfaction and truth are equivalent to Henkin satisfaction 
and truth for the corresponding full general model. Hence, the following 
statements are obvious.
Proposition A.9
	
a.	Every generally valid formula is also standardly valid.
	
b.	Every standardly satisfiable formula is generally satisfiable.
We also have the following strengthening of Proposition A.1.
Proposition A.10
Every theorem of PC2 is generally valid.
Proof
The general validity of (Comp) and (FunDef) follows from the definition of 
a general model. The proofs for the other logical axioms are similar to those 
in the first-order case, as is the verification that general validity is preserved 
by the rules of inference.
Proposition A.11 (General Second-Order Completeness)
The theorems of PC2 coincide with the generally valid formulas of L2C.
Proof
Let B  be a generally valid formula of L2C. We must show that B is a theorem 
of PC2. (It suffices to consider only closed formulas.) Assume, for the sake of 
contradiction, that B  is not a theorem of PC2. Then, by the deduction theo-
rem, the theory PC2+{¬B } is consistent. If we could prove that any consistent 
extension of PC2 has a general model, then it would follow that PC2+{¬B } 
has a general model, contradicting our hypothesis that B is generally valid. 
Hence, it suffices to establish the following result.
Henkin’s Lemma
Every consistent extension T  of PC2 has a general model.
Proof
The strategy is the same as in Henkin’s proof of the fact that every consis-
tent first-order theory has a model. One first adds enough new individual 

391
Appendix A: Second-Order Logic
constants, function letters, and predicate letters to provide “witnesses” for all 
existential sentences. For example, for each sentence (∃x) C (x), there will be a 
new individual constant b such that (∃x) C (x) ⇒C (b) can be consistently added 
to the theory. (See Lemma 2.15 for the basic technique.) The same thing is 
done for existential quantifiers (∃gn) and (∃Rn). Let T * be the consistent exten-
sion of T  obtained by adding all such conditionals as axioms. Then, by the 
method of Lindenbaum’s lemma (Lemma 2.14), we inductively extend T * to a 
maximal consistent theory T #. A general model M  of T  can be extracted from 
T #. The domain consists of the constant terms of T #. The range of the predi-
cate variables consists of the relations determined by the predicate letters of 
T #. A predicate letter B determines the relation B# such that B#〈t〉n holds in 
M  if and only if B#〈t〉n is a theorem of T #. The range of the function variables 
consists of the operations determined by the function letters of T #. If f is a 
function letter of T #, define an operation f # by letting f #(〈t〉n) = f(〈t〉n). A proof 
by induction shows that, for every sentence C, C is true in M  if and only if C is 
a theorem of T #. In particular, all theorems of T  are true in M.
The compactness property and the Skolem–Löwenheim theorems also 
hold for general models. See Manzano (1996, Chapter IV) or Shapiro (1991) 
for detailed discussions.*
Corollary A.12
There are standardly valid formulas that are not generally valid.
Proof
By Corollary A.7, there is no axiomatic formal system whose theorems are 
the standardly valid formulas of L2A . By Proposition A.11, the generally 
valid formulas of L2A  are the theorems of the second-order theory PA 2. 
Hence, the set of standardly valid formulas of L2A  is different from the set 
of generally valid formulas of L2A . Since all generally valid formulas are 
standardly valid, there must be some standardly valid formula that is not 
generally valid.
We can exhibit an explicit sentence that is standardly valid but not gener-
ally valid. The Gödel–Rosser incompleteness theorem (Proposition 3.38) can 
be proved for the second-order theory AR2. Let R be Rosser’s undecidable 
sentence for AR2.† If AR2 is consistent, R  is true in the standard model of 
arithmetic. (Recall that R  asserts that, for any proof in AR2 of R, there is a 
proof in AR2, with a smaller Gödel number, of ¬R. If AR2 is consistent, R 
is undecidable in AR2 and, therefore, there is no proof in AR2 of R, which 
*	 Lindström (1969) has shown that, in a certain very precise sense, first-order logic is the stron-
gest logic that satisfies the countable compactness and Skolem–Löwenheim theorems. So 
general models really are disguised first-order models.
†	 We must assume that AR is consistent.

392
Appendix A: Second-Order Logic
makes R trivially true.) Hence, AR2 ⇒R is standardly valid, by Proposition 
A.4. However, AR2 ⇒R is not generally valid. For, if AR2 ⇒R  were generally 
valid, it would be provable in PA  2, by Proposition A.11. Hence, R  would be 
provable in AR2, contradicting the fact that it is an undecidable sentence of 
AR2.
Exercise
A.9 a.	 Show that the second-order theory AR2 is recursively undecidable.
	
b.	 Show that the pure second-order predicate calculus PA  2 is recur-
sively undecidable.*
It appears that second-order and higher-order logics were the implicitly 
understood logics of mathematics until the 1920s. The axiomatic charac-
terization of the natural numbers by Dedekind and Peano, the axiomatic 
characterization of the real numbers as a complete ordered field by Hilbert 
in 1900, and Hilbert’s axiomatization of Euclidean geometry in 1902 (in the 
French translation of his original 1899 book) all presupposed a second-order 
logic in order to obtain the desired categoricity. The distinction between 
first-order and second-order languages was made by Löwenheim (1915) and 
by Hilbert in unpublished 1917 lectures and was crystal clear in Hilbert and 
Ackermann’s (1950),† where the problem was posed about the completeness 
of their axiom system for first-order logic. The positive solution to this prob-
lem presented in Gödel (1930), and the compactness and Skolem–Löwenheim 
theorems that followed therefrom, probably made the use of first-order logic 
more attractive. Another strong point favoring first-order logic was the fact 
that Skolem in 1922 constructed a first-order system for axiomatic set theory 
that overcame the imprecision in the Zermelo and Fraenkel systems.‡ Skolem 
was always an advocate of first-order logic, perhaps because it yielded the 
relativity of mathematical notions that Skolem believed in. Philosophical 
support for first-order logic came from W.V. Quine, who championed the 
position that logic is first-order logic and that second-order logic is just set 
theory in disguise.
The rich lodes of first-order model theory and proof theory kept logicians 
busy and satisfied for over a half-century, but recent years have seen a revival 
of interest in higher-order logic and other alternatives to first-order logic, 
*	 The pure second-order monadic predicate logic MP2 (in which there are no nonlogical con-
stants and no function variables and all second-order predicate variables are monadic) is 
recursively decidable. See Ackermann (1954) for a proof. The earliest proof was found by 
Löwenheim (1915), and simpler proofs were given by Skolem (1919) and Behmann (1922).
†	 Hilbert and Ackermann (1950) is a translation of the second (1938) edition of a book which 
was first published in 1928 as Grundzüge der theoretischen Logik.
‡	 See Moore (1988) and Shapiro (1991) for more about the history of first-order logic. Shapiro 
(1991) is a reliable and thorough study of the controversies involving first-order and second-
order logic.

393
Appendix A: Second-Order Logic
and the papers in the book Model-Theoretic Logics (edited by Barwise and 
Feferman 1985) offer a picture of these new developments.* Barwise (1985) 
lays down the challenge to the old first-order orthodoxy, and Shapiro (1991) 
and Corcoran (1987, 1998) provide philosophical, historical, and technical 
support for higher-order logic. Of course, we need not choose between first-
order and higher-order logic; there is plenty of room for both.
*	 Van Benthem and Doets (1983) also provide a high-level survey of second-order logic and its 
ramifications.


395
Appendix B: First Steps in 
Modal Propositional Logic
(#) It is necessary that 1 + 1 = 2.
(##) It is possible that George Washington never met King George III of 
England.
These assertions are examples of the application of the modal operators “nec-
essary” and “possible.” We understand here that “necessity” and “possibil-
ity” are used in the logical or mathematical sense.* There are other usages, 
such as “scientific necessity,” but, unless something is said to the contrary, 
we shall hold to the logical or mathematical sense.
In its classical usage, the notation ◻α stands for the assertion that α is neces-
sary. Here, “α” and other lowercase Greek letters will stand for propositions. 
In traditional modal logic, ⬦α was taken to assert that α is possible. As before, 
as basic propositional connectives we choose negation ¬ and the condi-
tional ⇒. The other standard connectives, conjunction ∧, disjunction ∨, and the 
biconditional ⇔, are introduced by definition in the usual way. The well-formed 
formulas (wfs) of modal propositional logic are obtained from the propositional 
letters A1, A2, A3, … by applying ¬, ⇒, and ◻ in the usual ways. Thus, each Aj is 
a wf, and if α and β are wfs, then (¬α), (α ⇒ β), and (◻α) are wfs. The expression 
(⬦α) is defined as (¬ (◻ (¬ α))), since asserting that α is possible is intuitively 
equivalent to asserting that the negation of α is not necessary.
We shall adopt the same conventions for omitting parentheses as in 
Chapter 1, with the additional proviso that ◻ and ⬦ are treated like ¬. For 
example, (¬ (◻ (¬ A1))) is abbreviated as ¬ ◻ ¬ A1, and ◻A1 ⇒ A1 is an abbre-
viation of ((◻A1) ⇒ A1). Finally, to avoid writing too many subscripts, we 
often will write A, B, C, D instead of A1, A2, A3, A4.
Our study of modal logic will begin with the study of various axiomatic 
theories. A theory is a set of formulas closed with respect to two rules: the 
traditional modus ponens rule
(MP): β follows from α and α ⇒ β
and the necessitation rule
(N): ◻α follows from α
*	 We could also say that the sentence “1 + 1 = 2” is logically necessary and the sentence “George 
Washington never met King George III of England” is logically possible by virtue of the mean-
ing of those sentences, but some people prefer to avoid use of the concept of “meaning.” If we 
should find out that George Washington actually did meet King George III, then the sentence 
(##) would still be true, but uninteresting. If we should find out that George Washington 
never did meet King George III, then, although (##) is true, it would be silly to assert it when 
we knew a stronger statement. In general, a sentence A logically implies that A is possible.

396
Appendix B: First Steps in Modal Propositional Logic
An axiomatic theory will be determined in the usual way by a set of axioms 
and the rules of inference (MP) and (N). Thus, a proof in such a theory is a 
finite sequence of wfs such that each wf in the sequence is either an axiom or 
follows by (MP) or (N) from the preceding wfs in the sequence, and a theorem 
of a theory is the last wf of any proof in the theory. We shall study several 
modal theories that have historical and theoretical importance. For some of 
those theories, the principal interpretation of ◻α will not be “α is necessary.” 
For example, ◻α may mean that α is provable (in a specified formal system).
Inclusion of the necessitation rule (N) may call for some explanation, since 
we ordinarily would not want the necessity of α to follow from α. However, 
the systems to be studied here initially will have as theorems logical or 
mathematical truths, and these are necessary truths. Moreover, in most of 
the systems that are now referred to as modal logics, rule (N) will be seen 
to be acceptable. Axiomatic systems for which this is not so will not include 
rule (N).*
By K we shall denote the modal theory whose axioms are the following 
axiom schemas:
(A1) All instances of tautologies
(A2) All wfs of the form ◻(α ⇒ β) ⇒ (◻α ⇒ ◻β)
These are reasonable assumptions, given our interpretation of the necessity 
operator ◻, and they also will be reasonable with the other interpretations 
of ◻ that we shall study.
By a normal theory we shall mean any theory for which all instances of (A1) 
and (A2) are theorems. Unless something is said to the contrary, in what fol-
lows all our theories will be assumed to be normal. Note that any extension† 
of a normal theory is a normal theory.
Exercises
B.1	 a.	 If α is a tautology, then |−K ◻α.
	
b.	 If α ⇒ β is a tautology, then |−K ◻α ⇒ ◻β
	
c.	 If α ⇒ β is a tautology and |−K ◻α, then |−K ◻β.
	
d.	 If α ⇔ β is a tautology, then |−K ◻α ⇔ ◻β. (Note that, if α ⇔ β is a 
tautology, then so are α ⇒ β and β ⇒ α.)
	
e.	 If |−K α ⇒ β, then |−K ◻α ⇒ ◻β. (Use (N) and (A2).)
	
f.	 If |−K α ⇒ β, then |−K ⬦α ⇒ ⬦β. (First get |−K ¬ β ⇒ ¬ α and use (e).)
*	 When needed, the effect of rule (N) can be obtained for special cases by adding suitable 
axioms.
†	 A theory V is defined to be an extension of a theory U if all theorems of U are theorems of V. 
Moreover, an extension V of U is called a proper extension of U if V has a theorem that is not 
a theorem of U.

397
Appendix B: First Steps in Modal Propositional Logic
B.2	 a.	 |−K ◻(α ∧ β) ⇒ ◻α and |−K ◻(α ∧ β) ⇒ ◻β. (Use the tautologies 
α ∧ β ⇒ α and α ∧ β ⇒ β, and B.1(b).)
	
b.	 |−K ◻α ⇒ (◻β ⇒ ◻(α ∧ β)). (Use the tautology α ⇒ (β ⇒ α ∧ β), and 
B.1(b).)
	
c.	 |−K ◻α ∧ ◻β ⇔ ◻(α ∧ β)). (Use (a) and (b).)
	
d.	 If |−K α ⇔ β, then |−K ◻(α ⇔ β).
	
e.	 |−K ◻(α ⇔ β) ⇒ (◻α ⇔ ◻β). (Use (c) and (A2), recalling that γ ⇔ δ is 
defined as (γ ⇒ δ) ∧ (δ ⇒ γ).)
	
f.	 If |−K α ⇔ β then |−K ◻α ⇔ ◻β.
B.3	 |−K ⬦(α ∨ β) ⇔ ⬦α ∨ ⬦β. (Note that ¬ ⬦(α ∨ β) is provably equivalent* in 
K to ◻¬ (α ∨ β), which, by B.1(d), is, in turn, provably equivalent in K 
to ◻ (¬ α ∧ ¬ β) and the latter, by B.2(c), is provably equivalent in K to 
◻ ¬ α ∧ ◻ ¬ β. This wf is provably equivalent in K to ¬ (¬ ◻ ¬ α ∨ ¬ ◻ ¬ β), 
which is ¬ (⬦α ∨ ⬦β). Putting together these equivalences, we see that ¬ 
⬦(α ∨ β) is provably equivalent in K to ¬ (⬦α ∨ ⬦β) and, therefore, that 
⬦(α ∨ β) is provably equivalent in K to ⬦α ∨ ⬦β.)
B.4	 a. |−K ◻α ⇔ ¬ ⬦ ¬ α (note that ◻α is, by B.1(d), provably equivalent in 
K to ◻¬ ¬ α, and the latter is provably equivalent in K to ¬ ¬◻ ¬¬ α, 
which is ¬ ⬦ ¬ α)
	
b.	 |−K ¬ ◻α ⇔ ⬦ ¬ α
	
c.	 |−K ¬ ⬦ α ⇔ ◻ ¬ α
	
d.	 |−K ◻(α ⇔ β) ⇒ ◻ (¬ α ⇔ ¬ β)
	
e.	 |−K ◻(α ⇔ β) ⇒ (◻ ¬ α ⇔ ◻ ¬ β)
	
f.	 |−K ◻(α ⇔ β) ⇒ (⬦α ⇔ ⬦β)
	
g.	 |−K ¬ ◻◻ α ⇔ ⬦⬦ ¬ α
B.5	 a.	 |−K ◻α ∨ ◻β ⇒ ◻(α ∨ β).
	
b.	 |−K ⬦(α ∧ β) ⇒ ⬦α ∧ ⬦β.
	
c.	 |−K ◻α ⇒ (⬦β ⇒ ⬦(α ∧ β)).
Define α υ β as ◻(α ⇒ β). This relation is called strict implication.
B.6	 a.	 |−K α υ β ⇔ ¬ ⬦(α ∧ ¬ β)
	
b.	 |−K α υ β ∧ β υ γ ⇒ α υ γ
	
c.	 |−K ◻ α ⇒ (β υ α) (this says that a necessary wf is strictly implied by 
every wf)
	
d.	 |−K ◻¬ α ⇒ (α υ β) (this says that an impossible wf strictly implies 
every wf)
	
e.	 |−K ◻α ⇔ ((¬ α) υ α)
*	 To say that γ is provably equivalent in K to δ amounts to saying that |−K γ ⇔ δ.

398
Appendix B: First Steps in Modal Propositional Logic
Theorem B.1 Substitution of Equivalents
Let Γα be a modal wf containing the wf α and let Γβ be obtained from Γα by 
replacing one occurrence of α by β. If |−K α ⇔ β, then |−K Γα ⇔ Γβ.
Proof
Induction on the number n of connectives (including ◻) in Γα. If n = 0, then Γα 
is a statement letter A and α is A itself. So Γβ is β, the hypothesis is |−K A ⇔ β, 
and the required conclusion |−K Γα ⇔ Γβ is the same as the hypothesis. For 
the inductive step, assume that the theorem holds for all wfs having fewer 
than n connectives.
Case 1. Γα has the form ¬ Δα. Then Γβ has the form ¬ Δβ, where Δβ is obtained 
from Δα by replacing one occurrence of α by β. By the inductive hypothesis, 
|−K Δα ⇔ Δβ. Hence, |−K ¬ Δα ⇔ ¬ Δβ, which is the desired conclusion.
Case 2. Γα has the form Δα ⇒ Λα. By the inductive hypothesis, |−K Δα ⇔ Δβ 
and |−K Λα ⇔ Λβ, where Δβ and Λβ are obtained from Δα and Λα by replacing 
zero or one occurrence of α by β. But from |−K Δα ⇔ Δβ and |−K Λα ⇔ Λβ, one 
can derive |−K (Δα ⇒ Λα) ⇔ (Δβ ⇒ Λβ), which is the required conclusion |−K 
Γα ⇔ Γβ.
Case 3. Γα has the form ◻Δα. By the inductive hypothesis, |−K Δα ⇔ Δβ, where 
Δβ is obtained from Δα by replacing one occurrence of α by β. By B.2(f), |−K 
◻Δα ⇔ ◻Δβ, that is, |−K Γα ⇔ Γβ.
Note that, by iteration, this theorem can be extended to cases where more 
than one occurrence of α is replaced by β.
Theorem B.2 General Substitution of Equivalents
The result of Theorem B.1 holds in any extension of K (i.e., in any modal the-
ory containing (A1) and (A2)). The same proof works as that for Theorem B.1.
Exercise
B.7	 a.	 |−K ⬦◻⬦ (A ∨ B) ⇔ ⬦◻⬦ (¬ A ⇒ B)
	
b.	 |−K (◻α ⇒ ¬ ⬦β) ⇔ ¬ ¬ (◻α ⇒ ◻ ¬ β)
Notice that, if ◻α is interpreted as “α is necessary,” acceptance of the neces-
sitation rule limits us to theories in which all axioms are necessary. For, if α 
were an axiom that is not a necessary proposition, then ◻α would be a theo-
rem, contrary to the intended interpretation. Moreover, since it is obvious that 
(MP) and (N) lead from necessary propositions to necessary propositions, all 

399
Appendix B: First Steps in Modal Propositional Logic
theorems would be necessary. So, if we want an applied modal logic with 
some theorems that are not necessary, as we would, say, in physics, then we 
would be impelled to give up rule (N). To still have the theorem on substitu-
tion of equivalences, we would have to add as axioms certain necessary wfs 
that would enable us to obtain the result of Exercise B.2(f), namely, if |−K 
α ⇔ β, then |−K ◻α ⇔ ◻β. However, to avoid the resulting complexity, we 
shall keep (N) as a rule of inference in our treatment of modal logic.
Let us extend the normal theory K to a stronger theory T by adding to K 
the axiom schema:
(A3) All wfs of the form ◻α ⇒ α.
This schema is sometimes called the necessity schema. It asserts that every 
necessary proposition is true. We shall show later that T is stronger than K, 
that is, that there are wfs ◻α ⇒ α that are not theorems of K. Note that, in 
T, strict implication α υ β implies the ordinary conditional α ⇒ β (which is 
sometimes called a material implication).
Exercise
B.8	 a.	 |−T α ⇒ ⬦α (use the instance ◻ ¬ α ⇒ ¬ α of (A3) and an instance of 
the tautology (γ ⇒ ¬ δ) ⇒ (δ ⇒ ¬ γ))
	
b.	 |−T ◻◻α ⇒ ◻α (replace α by ◻α in (A3))
	
c.	 |−T ◻ … ◻α ⇒ ◻α (for any positive number of ◻′s in the antecedent)
	
d.	 |−T α ⇒ ⬦ … ⬦ α
Now we turn to an extension of the system T obtained by adding the axiom 
schema:
(A4) All wfs of the form ◻α ⇒ ◻◻α
This enlarged system is traditionally designated as S4. This notation is 
taken from the work Symbolic Logic (New York, 1932) by C.I. Lewis and C.H. 
Langford, one of the earliest treatments of modal logic from the standpoint 
of modern formal logic.
The justification of (A4) is not as straightforward as that for the previous 
axioms. If ◻α is true, then the necessity of α is due to the form of α, that is, 
to the logical structure of the proposition asserted by α. Since that structure 
is not an empirical fact, that is, it does not depend on the way our world is 
constituted, the truth of ◻α is necessary. Hence, ◻◻α follows.
Exercises
B.9	 a.	 |−S4 ◻◻α ⇒ ◻◻◻α (and so on, for any number of ◻′s)
	
b.	 |−S4 ◻α ⇒ ◻ … ◻α (and so on, for any number of ◻′s)
	
c.	 |−S4 ◻α ⇔ ◻◻α (use (A3) and B.8(b))
	
d.	 |−S4 ◻α ⇔ ◻ … ◻α (use (b) and B.8(c))

400
Appendix B: First Steps in Modal Propositional Logic
B.10	 a.	 |−S4 ◻α ⇔ ¬ ¬ ◻α
	
b.	 |−S4 ◻◻α ⇔ ◻¬ ¬ ◻α (use B.2(e))
	
c.	 |−S4 ◻α ⇔ ◻¬ ¬ ◻α (use (b) and B.9(c))
	
d.	 |−S4 ◻¬ α ⇔ ◻¬ ¬ ◻¬ α (replace α by ¬ α in (c))
	
e.	 |−S4 ¬ ◻¬ α ⇔ ¬ ◻¬ ¬ ◻¬ α
	
f.	 |−S4 ⬦α ⇔ ⬦⬦α (abbreviation of (e))
	
g.	 |−S4 ⬦α ⇔ ⬦ … ⬦α
By B.9(d) and substitution of equivalents, any sequence of consecutive ◻′s 
within a modal wf γ can be replaced by a single occurrence of ◻ to yield a wf 
that is provably equivalent to γ in S4 or any extension of S4. By B.10(g), the 
same holds for ⬦ instead of ◻.
Exercise
B.11 (A Sharper Substitution of Equivalents) Let Γα be a modal wf containing 
the wf α and let Γβ be obtained from Γα by replacing one occurrence 
of α by β. Then |−S4 ◻(α ⇔ β) ⇒ (Γα ⇔ Γβ). (Hint: The proof, like that of 
Theorem B.1, is by induction, except that the induction wf, instead of 
being
	
	   “If |−K α ⇔ β, then |−K Γα ⇔ Γβ,” is now “|−S4 ◻(α ⇔ β) ⇒ (Γα ⇔ Γβ).”
	
	   When n = 0, we now need (A3). For Case 3 of the induction step, we 
must use B.1(e), (A4), and B.2(e).) Note that we can extend B.11 to the case 
where two or more occurrences of α are replaced by β.
Exercises
B.12	 a.	 |−S4 ⬦◻⬦α ⇒ ⬦α (use (A3) to get |−S4 ◻⬦α ⇒ ⬦α and then B.1(f) to 
get |−S4 ⬦◻⬦α ⇒ ⬦⬦α and then B.10(f))
	
b.	 |−S4 ◻⬦α ⇒ ◻⬦◻⬦α (use B.8(a) to get |−S4 ◻⬦α ⇒ ⬦◻⬦α and then 
B.1(e) to get |−S4 ◻◻⬦α ⇒ ◻⬦◻⬦α; finally, apply B.9(c))
	
c.	 |−S4 ◻⬦α ⇔ ◻⬦◻⬦α (apply B.1(e) to B.12(a), and use B.12(b))
	
d.	 |−S4 ⬦◻α ⇔ ⬦◻⬦◻α (use (c) and negations)
B.13	 Consecutive occurrences of ◻′s and/or ⬦′s can be reduced in S4 to 
either ◻ or ⬦ or ◻⬦ or ⬦◻ or ◻⬦◻ or ⬦◻⬦.
We have seen (in B.9(d) and B.10(g)) that the axiom (A4) entails that con-
secutive occurrences of the same modal operator are reducible in S4 to 
a single occurrence of that operator. Now we shall introduce a similar 
simplification when there are consecutive occurrences of different modal 
operators.

401
Appendix B: First Steps in Modal Propositional Logic
Let S5 be the theory obtained by adding to T the following schema:
(A5)	


α
α
⇒
This amounts to saying that a proposition that is possible is necessarily possible.
Now we aim to show that (A4) is provable in S5.
Exercises
B.14	 a.	 |−S5 ⬦ ¬ α ⇒ ◻⬦ ¬ α (use (A5) with α replaced by ¬ α)
	
b.	 |−S5 ¬ ◻⬦ ¬ α ⇒ ¬ ⬦ ¬ α (use contrapositive of (a))
	
c.	 |−S5 ⬦ ¬ ⬦ ¬ α ⇔ ¬ ◻⬦ ¬ α (use B.4(b))
	
d.	 |−S5 ⬦ ¬ ⬦ ¬ α ⇒ ¬ ⬦ ¬ α (use (b) and (c))
	
e.	 |−S5 ⬦◻α ⇒ ◻α (use (d), B.4(a), and Theorem B.2)
	
f.	 |−S5 ◻α ⇒ ⬦◻α (use B.8(a), with α replaced by ◻α)
	
g.	 |−S5 ⬦◻α ⇔ ◻α (use (e) and (f))
B.15	 a.	 |−S5 ⬦α ⇔ ◻⬦α (use (A5), and (A3) with α replaced by ⬦α)
	
b.	 |−S5 ⬦◻α ⇔ ◻⬦◻α (replace α by ◻α in (a))
	
c.	 |−S5 ◻α ⇒ ⬦◻α (use B.8(a))
	
d.	 |−S5 ◻α ⇒ ◻⬦◻α (use (b) and (c))
	
e.	 |−S5 ◻α ⇒ ◻◻α (apply Theorem B.1 to (d) and B.12(g))
Note that B.15(e) is (A4). Since (A4) is a theorem of S5, it follows that S5 is an 
extension of S4. We shall prove later that (A5) is not provable in S4, so that S5 
is a proper extension of S4.
Exercise
B.16 If ⬦◻α ⇒ ◻α (which, by B.13(e), is a theorem of S5) is added as an axiom 
schema to T, show that schema (A5) becomes derivable. (Hence, ⬦◻α ⇒ 
◻α could be used as an axiom schema for S5 instead of (A5).)
Notice that the two theorem schemas ◻⬦α ⇔ ⬦α and ⬦◻α ⇔ ◻α of S5 
enable us (by substitution of equivalents) to reduce any sequence of modal 
operators in a wf to the last modal operator of the sequence.
Exercise
B.17 Find a modal wf that is provably equivalent in S5 to the wf
	
 





A
B
C
∨
¬
⇒
(
and contains no sequence of consecutive modal operators.
Note that the justification of (A5) is similar to the justification of (A4). If ⬦α 
is true, then the fact that α is possible is due to the form of α, that is, to the 

402
Appendix B: First Steps in Modal Propositional Logic
logical structure of the proposition asserted by α. Since that structure is not 
an empirical fact, that is, it does not depend on the way our world is consti-
tuted, the truth of ⬦α is necessary. Hence, ◻⬦α follows.
Semantics for Modal Logic
Recall that the basic wfs in propositional modal logic consist of the denumer-
able sequence A1, A2, A3, … of propositional letters. By a world we shall mean 
a function that assigns to each of the letters A1, A2, A3, … the value t (true) 
or the value f (false). By a Kripke frame* we shall mean a nonempty set W of 
worlds together with a binary relation R on W. If wRw* for worlds w and 
w*, then we shall say that w is R-related to w*. (Note that we are making no 
assumptions about the relation R. It may or may not be reflexive and it may 
or may not have any other special property of binary relations.)
Assume now that the pair (W, R) is a Kripke frame. (W, R) determines a 
truth value t or f for each modal wf α in each world w of W according to the 
following inductive definition, where the induction takes place with respect 
to the number of connectives (including ◻) in the wf α. If there are no con-
nectives in α, then α is a letter Aj and the truth value of α in w is taken to be 
the value assigned to Aj by the world w. For the inductive step, assume that 
the wf α has a positive number n of connectives and that the truth value 
of any wf β having fewer than n connectives is already determined in all 
worlds of W. If α is a negation ¬ β or a conditional β ⇒ γ, then the number of 
connectives in β and the number of connectives in γ are smaller than n and, 
therefore, the truth values of β and γ in every world w in W are already deter-
mined. The usual truth tables for ¬ and ⇒ then determine the truth value of 
¬ β and β ⇒ γ in w. Finally, assume that α has the form ◻β. Then the number 
of connectives in β is smaller than n and, therefore, the truth value of β in 
every world w in W is already determined. Now define the truth value of ◻β 
in a world w in W to be t if and only if the truth value of β in every world w* 
to which w is R-related is t. In other words, ◻β is true in w if and only if, for 
every world w* in W such that wRw*, β is true in w*.
A wf α is said to be valid in a Kripke frame (W, R) if it is true in every world 
w in W. α is said to be universally valid if it is valid in every Kripke frame.
Exercises
B.18	 For any world w in a Kripke frame (W, R), ⬦β is true in w if and only if 
there is a world w* in W such that wRw* and β is true in w*.
(Hint: Since ⬦β is ¬ ◻ ¬ β, ⬦β is true in w if and only if ◻ ¬ β is not true 
in w. Moreover, ◻ ¬ β is not true in w if and only if there exists w* in 
W such that wRw* and ¬ ¬ β is true in w*. But ¬ ¬ β is true in w* if and 
only if β is true in w*.)
*	 In honor of Saul Kripke, who is responsible for a substantial part of the development of mod-
ern modal logic

403
Appendix B: First Steps in Modal Propositional Logic
B.19	 If α and α ⇒ β are true in a world w in a Kripke frame, then so is β.
B.20	 Every modal wf that is an instance of a tautology is universally valid.
B.21	 α and α ⇒ β are universally valid, so is β.
B.22	 If α is universally valid, so is ◻α. (Hint: If ◻α is not universally valid, 
then it is not in some Kripke frame (W, R). Hence, ◻α is not true in some 
world w in W. Therefore, α is not true in some world w* in W such that 
wRw*. Thus, α is not valid in (W, R), contradicting the universal validity 
of α.)
B.23	 ◻(α ⇒ β) ⇒ (◻α ⇒ ◻β) is universally valid. (Hint: Assume the given wf 
is not valid in some Kripke frame (W, R). So it is false in some world w 
in W. Hence, ◻(α ⇒ β) is true in w, and ◻α ⇒ ◻β is false in w. Therefore, 
◻α is true in w and ◻β is false in w. Since ◻β is false in w, β is false in 
some world w* such that wRw*. Since ◻(α ⇒ β) and ◻α are true in w, 
and wRw*, it follows that α ⇒ β and α are true in w*. Hence, β is true in 
w*, contradicting the fact that β is false in w*.)
B.24	 a.	 The set of universally valid wfs form a theory. (Use B.21 and B.22.)
	
b.	 The set of valid wfs in a Kripke frame form a theory.
	
c.	 If all the axioms of a theory are valid in a Kripke frame (W, R), then 
all theorems of the theory are valid in (W, R).
B.25	 All theorems of K are universally valid. (Use B.20–B.23.)
Theorem B.3  ◻A1 ⇒ A1 Is Not Universally Valid
Proof
Let w1 be a world that assigns f to every propositional letter, and let w2 be 
a world that assigns t to every propositional letter. Let W = {w1, w2}, and let 
R be a binary relation on W that holds only for the pair (w1, w2). (W, R) is a 
Kripke frame and ◻A1 is true in the world w1 of that Kripke frame, since A1 
is true in every world w* of W such that w1Rw*. (In fact, w2 is the only such 
world in W, and A1 is true in w2.) On the other hand, A1 is false in w1. Thus, 
◻A1 ⇒ A1 is false in w1. So ◻A1 ⇒ A1 is not valid in the Kripke frame (W, R) 
and, therefore, ◻A1 ⇒ A1 is not universally valid.
Corollary B.4  ◻A1 ⇒ A1 Is Not a Theorem of the Theory K
Proof
Theorem B.3 and Exercise B.25.
Corollary B.4 shows that the theory T is a proper extension of K.
Let us call a Kripke frame (W, R) reflexive if R is a reflexive relation 
(i.e., wRw for all w in W.)

404
Appendix B: First Steps in Modal Propositional Logic
Exercise
B.26	 Every wf ◻α ⇒ α is valid in every reflexive Kripke frame (W, R).
(Hint: If ◻α is true in a world w in W, then α is true in every world w* 
such that wRw*. But wRw and, therefore, α is true in w. Thus, ◻α ⇒ α is 
true in every world in W.)
Exercise
B.27	 Every theorem of T is valid in every reflexive Kripke frame (W, R).
(Use Exercise B.24(c) and B.26.)
Let us call a Kripke frame (W, R) transitive if R is a transitive relation.*
Exercise
B.28	 Every wf ◻α ⇒ ◻◻α is valid in every transitive Kripke frame (W, R).
(Hint: Let w be a world in W, and assume ◻α true in w. Let us then show 
that ◻◻α is true in w. Assume wRw*, where w* is a world in W. We must 
show that ◻α is then true in w*. Assume w*Rw#, where w# is in W. By tran-
sitivity of R, wRw#. Since ◻α is true in w, α is true in w#. Hence, ◻α is true 
in w*. So ◻◻α is true in w. Thus, ◻α ⇒ ◻◻α is true in w for every w in W.)
Exercise
B.29	 Every theorem of S4 is valid in every reflexive, transitive Kripke frame.
Theorem B.5  There Is a Reflexive Kripke Frame 
in Which ◻A1 ⇒ ◻◻A1 Is Not Valid
Proof
Let w1 and w2 be worlds in which A1 is true and let w3 be a world in which 
A1 is false. Let W = {w1, w2, w3} and assume that R is a binary relation in W 
for which w1Rw1, w2Rw2, w3Rw3, w1Rw2, and w2Rw3, but R holds for no other 
pairs. (In particular, w1Rw3 is false.) Now, ◻A1 is true in w1, since, for any w* 
in W, if w1Rw*, then A1 is true in w*. On the other hand, ◻◻A1 is false in w1. 
To see this, first note that w1Rw2. Moreover, ◻A1 is false in w2, since w2Rw3 
and A1 is false in w3.
Thus, ◻A1 is true in w1 and ◻◻A1 is false in w1. Hence, ◻A1 ⇒ ◻◻A1 is false 
in w1 and, therefore, not valid in (W, R).
*	 R is said to be transitive if and only if whenever xRy and yRz, then xRz.

405
Appendix B: First Steps in Modal Propositional Logic
Corollary B.6  ◻A1 ⇒ ◻◻A1 Is a Theorem of S4 That Is Not a Theorem of T
Proof
Use Theorem B.5 and Exercise B.27.
Corollary B.7 S4 Is a Proper Extension of T
We want to show now that S5 is a proper extension of S4. Let us say that a 
Kripke frame (W, R) is symmetric if the relation R is symmetric in W, that is, 
for any w and w* in W, if wRw*, then w*Rw.
Exercise
B.30	 If a Kripke frame (W, R) is symmetric and transitive, then every instance 
⬦α ⇒ ◻⬦α of (A5) is valid in (W, R). (Hint: Let w be a world in W. 
Assume ⬦α is true in w. We wish to show that ◻⬦α is true in w. Since 
⬦α is ¬◻¬ α, ◻ ¬ α is false in w. Hence, there is a world w* in W such 
that wRw* and ¬ α is false in w*. So α is true in w*. In order to prove 
that ◻⬦α is true in w, assume that w# is in W and wRw#. We must prove 
that ⬦α is true in w#. Since (W, R) is symmetric and wRw#, it follows 
that w#Rw. Since wRw* and (W, R) is transitive, w#Rw*. But α is true in 
w*. So, by B.16, ⬦α is true in w#.)
Exercise
B.31	 All theorems of S5 are valid in every reflexive, symmetric, transitive 
Kripke frame.
Exercise
B.32	 ⬦A1 ⇒ ◻⬦A1 is not a theorem of S4. (Hint: Let W = {w1, w2}, where w1 
and w2 are worlds such that A1 is true in w1 and false in w2. Let R be the 
binary relation on W such that w1Rw1, w2Rw2, and w1Rw2, but w2Rw1 
is false. R is reflexive and transitive. ⬦A1 is true in w1 and false in w2. 
◻⬦A1 is false in w1 because w1Rw2 and ⬦A1 is false in w2. Hence, ⬦A1 ⇒ 
◻⬦A1 is false in w1 and, therefore, not valid in the reflexive, transitive 
Kripke frame (W, R). Now use B.29.)
Exercise
B.33	 S5 is a proper extension of S4.

406
Appendix B: First Steps in Modal Propositional Logic
Exercise
B.34	 S5 and all its subtheories (including K, T, and S4) are consistent. (Hint: 
Transform every wf α into the wf α* obtained by deleting all ◻’s. Each 
axiom of S5 is transformed into a tautology. Every application of MP 
taking wfs β and β ⇒ γ into γ is transformed into an application of MP 
taking β* and β* ⇒ γ* into γ*, and every application of N taking β into 
◻β simply takes β* into β*. Hence, the transform of every theorem is a 
tautology. So it is impossible to prove a wf δ and ¬ δ because in such a 
case both δ* and ¬ δ* would be tautologies.)
Exercise
B.35	 The theory obtained by adding to the theory T the schema
	
(Б)
α
α
⇒
	
will be denoted B and called Becker’s theory.*
	
a.	 All instances of Б are provable in S5, and therefore, S5 is an exten-
sion of B. (Hint: Use B.8(a) and (A5).)
	
b.	 A1 ⇒ ◻⬦A1 is not provable in S4 and, therefore, not provable in T. 
(Hint: Use the Kripke frame in the Hint for B.32.)
	
c.	 B is a proper extension of T.
	
d.	 All theorems of B are valid in every reflexive, symmetric Kripke 
frame (W, R). (Hint: Since (W, R) is reflexive, all theorems of T are 
valid in (W, R). We must show that every wf α ⇒ ◻⬦α is valid in 
(W, R). Assume, for the sake of contradiction, that there is a world 
w in W such that α is true and ◻⬦α is false in w. Since ◻⬦α is false 
in w, there exists a world w* in W such that wRw* and ⬦α is false in 
w*. Since R is symmetric, w*Rw and, since α is true in w, ⬦α is true 
in w*, which yields a contradiction.)
	
e.	 ◻A1 ⇒ ◻◻A1 is not a theorem of B. (Hint: Let W = {w1, w2, w3}, where 
w1, w2, w3 are worlds such that A1 is true in w1 and w2 and false 
in w3. Let R be a reflexive, binary relation on W such that w1Rw2, 
w2Rw1, w2Rw3, w3Rw2 hold, but w1Rw3 and w3Rw1 do not hold. Then 
◻A1 is true in w1 and, since ◻A1 is false in w2, ◻◻A1 is false in w1. 
Hence, ◻A1 ⇒ ◻◻A1 is false in w1 and, therefore, is not valid in the 
reflexive, symmetric Kripke frame (W, R). So, by (d), ◻A1 ⇒ ◻◻A1 is 
not a theorem of B.)
	
f.	 S4 is not an extension of B.
	
g.	 S5 is a proper extension of B. (Hint: Use (a) and (f).)
*	 B is usually called the Brouwerian system and Б is called the Brouwerian axiom because of 
a connection with L.E.J. Brouwer’s intuitionism. However, the system was proposed by O. 
Becker in Becker [1930].

407
Appendix C: A Consistency Proof 
for Formal Number Theory
The first consistency proof for first-order number theory S was given by 
Gentzen (1936, 1938). Since then, other proofs along similar lines have been 
given by Ackermann (1940), Schütte (1951). As can be expected from Gödel’s 
second theorem, all these proofs use methods that apparently are not avail-
able in S. Our exposition will follow Schütte’s proof (1951).
The consistency proof will apply to a system S∞ that is much stronger 
than S. S∞ is to have the same individual constant 0 and the same function 
letters +, ·, ′ as S, and the same predicate letter =. Thus, S and S∞ have the 
same terms and, hence, the same atomic formulas (i.e., formulas s = t, where s 
and t are terms). However, the primitive propositional connectives of S∞ will 
be ∨ and ~, whereas S had ⊃ and ~ as its basic connectives. We define a wf of 
S∞ to be an expression built up from the atomic formulas by a finite number 
of applications of the connectives ∨ and ~ and of the quantifiers (xi) (i = 1, 
2, …). We let A ⊃ B stand for (~A  ) ∨ B; then any wf of S is an abbreviation of 
a wf of S∞.
A closed atomic wf s = t (i.e., an atomic wf containing no variables) is called 
correct, if, when we evaluate s and t according to the usual recursion equa-
tions for + and ·, the same value is obtained for s and t; if different values are 
obtained, s = t is said to be incorrect. Clearly, one can effectively determine 
whether a given closed atomic wf is correct or incorrect.
As axioms of S∞ we take: (1) all correct closed atomic wfs and (2) negations 
of all incorrect closed atomic wfs. Thus, for example, (0″) · (0″) + 0″ = (0′″) · (0″) 
and 0′ + 0″ ≠ 0′· 0″ are axioms of S∞.
S∞ has the following rules of inference:
	
I.	Weak rules
	
a.	Exchange: C
A
B
D
C
B
A
D
∨
∨
∨
∨
∨
∨
	
b.	Consolidation: A
A
D
A
D
∨
∨
∨
	
II.	Strong rules
	
a.	Dilution: 
D
A
D
∨
 (where A  is any closed wf)
	
b.	De Morgan: ∼
∼
∼
A
D
B
D
A
B
D
∨
∨
∨
∨
(
)

408
Appendix C: A Consistency Proof for Formal Number Theory
	
c.	Negation: A
D
A
D
∨
∨
∼∼
	
d.	Quantification: 
~
( )
(~ ( )
( ))
A
D
A
D
t
x
x
∨
∨
 
(where t is a closed term)
	
e.	Infinite induction: 
A
D
A
D
( )
(( )
( ))
n
x
x
n
∨
∨
for all natural number
	 III.	Cut: C
A
A
D
C
D
∨
∨
∨
∼
In all these rules, the wfs above the line are called premisses, and the wfs 
below the line, conclusions. The wfs denoted by C and D are called the side wfs 
of the rule; in every rule either or both side wfs may be absent—except that 
D must occur in a dilution (II(a)), and at least one of C  and D in a cut (III). For 
­
example,  A
A
D
D
∼
∨
 
is a cut, and ∼
∼
∼
A
B
A
B
(
)
∨
 is an instance of De Morgan’s 
rule, II(b). In any rule, the wfs that are not side wfs are called the principal 
wfs; these are the wfs denoted by A  and B in the earlier presentation of the 
rules. The principal wf A  of a cut is called the cut wf; the number of proposi-
tional connectives and quantifiers in ~A  is called the degree of the cut.
We still must define the notion of a proof in S∞. Because of the rule of 
infinite induction, this is much more complicated than the notion of proof in 
S. A G-tree is defined to be a graph the points of which can be decomposed 
into disjoint “levels” as follows: At level 0, there is a single point, called the 
terminal point; each point at level i + 1 is connected by an edge to exactly one 
point at level i; each point P at level i is connected by edges to either zero, one, 
two, or denumerably many points at level i + 1 (these latter points at level 
i + 1 are called the predecessors of P); each point at level i is connected only to 
points at level i − 1 or i + 1; a point at level i not connected to any points at 
level i + 1 is called an initial point.
Examples of G-trees.
A
B
D
C
E
Level   4
Level   2
Level   3
Level   1
Level   0

409
Appendix C: A Consistency Proof for Formal Number Theory
A
B
C1 C2
C3
E
A
E
	
1.	A, B, C, D, are initial points. E is the terminal point.
	
2.	A, B, C1, C2, C3, … are the initial points. E is the terminal point.
	
3.	A is the only initial point.
E is the terminal point.
By a proof-tree, we mean an assignment of wfs of S∞ to the points of a G-tree 
such that
	
1.	The wfs assigned to the initial points are axioms of S∞;
	
2.	The wfs assigned to a non-initial point P and to the predecessors 
of P are, respectively, the conclusion and premisses of some rule of 
inference;
	
3.	There is a maximal degree of the cuts appearing in the proof-tree. 
This maximal degree is called the degree of the proof-tree. If there are 
no cuts, the degree is 0;
	
4.	There is an assignment of an ordinal number to each wf occurring in the 
proof-tree such that (a) the ordinal of the conclusion of a weak rule is the 
same as the ordinal of the premiss and (b) the ordinal of the conclusion 
of a strong rule or a cut is greater than the ordinals, of the premisses.

410
Appendix C: A Consistency Proof for Formal Number Theory
The wf assigned to the terminal point of a proof-tree is called the terminal 
wf; the ordinal of the terminal wf is called the ordinal of the proof-tree. 
The proof-tree is said to be a proof of the terminal wf, and the theorems of 
S∞ are defined to be the wfs that are terminal wfs of proof-trees. Notice 
that, since all axioms of S∞ are closed wfs and the rules of inference 
take closed premisses into closed consequences, all theorems of S∞ are 
closed wfs.
A thread in a proof-tree is a finite or denumerable sequence A 1,A 2, … of 
wfs starting with the terminal wf and such that each wf A i + 1 is a predeces-
sor of A i. Hence, the ordinals α1, α2, … assigned to the wfs in a thread do 
not increase, and they decrease at each application of a strong rule or a cut. 
Since there cannot exist a denumerably decreasing sequence of ordinals, it 
follows that only a finite number of applications of strong rules or cuts can 
be involved in a thread. Also, to a given wf, only a finite number of applica-
tions of weak rules are necessary. Hence, we can assume that there are only 
a finite number of consecutive applications of weak rules in any thread of 
a proof-tree. (Let us make this part of the definition of “proof-tree.”) Then 
every thread of a proof-tree is finite.
If we restrict the class of ordinals that may be assigned to the wfs of a 
proof-tree, then this restricts the notion of a proof-tree, and, therefore, we 
obtain a (possibly) smaller set of theorems. If one uses various “construc-
tive” segments of denumerable ordinals, then the systems so obtained and 
the methods used in the consistency proof later may be considered more or 
less “constructive”.
Exercise
Prove that the associative rules (
)
(
)
C
A
B
C
A
B
∨
∨
∨
∨
 
and
 
C
A
B
C
A
B
∨
∨
∨
∨
(
)
(
)
 are derivable 
from the exchange rule, assuming association to the left. Hence, parentheses 
may be omitted from a disjunction.
Lemma A.l
Let A  be a closed wf having n connectives and quantifiers. Then there is a proof of 
~A  ∨ A  of ordinal ≤ 2n + 1 (in which no cut is used).
Proof
Induction on n.
	
1.	n = 0. Then A  is a closed atomic wf. Hence, either A or ~A is 
an axiom, because A is either correct or incorrect. Hence, by 

411
Appendix C: A Consistency Proof for Formal Number Theory
one application of the dilution rule, one of the following is a 
proof-tree.
	
dilution
or
dilution
exchange
A
A
A
A
A
A
A
A
∼
∼
∼
∼
∨
∨
∨
	
	 Hence, we can assign ordinals so that the proof of ~A    ∨ A   has ­ordinal 1.
	
2.	Assume true for all k < n.
Case (i): A  is A 1 ∨ A 2. By inductive hypothesis, there are proofs of ~A 1 ∨ A 
and  ~A 2 ∨ A 2 of ordinals ≤2(n − 1) + 1 = 2n − 1. By dilution, we obtain 
proofs of ~A 1 ∨ A 1 ∨ A 2 and ~A 2 ∨ A 1 ∨ A 2, respectively, of order 2n and, by 
De Morgan’s rule, a proof of ~(A 1 ∨ A 2) ∨ A 1 ∨ A 2 of ordinal 2n + 1.
Case (ii): A  is ~B. Then, by inductive hypothesis, there is a proof of ~B   ∨ B of 
ordinal 2n − 1. By the exchange rule, we obtain a proof of B ∨ ~B of ordinal 
2n − 1, and then, applying the negation rule, we have a proof of ~~B  ∨ ~B, 
that is of ~A   ∨ A, of ordinal 2n ≤ 2n + 1.
Case (iii): A  is (x)B (x). By inductive hypothesis, for every natural number k, 
there is a proof of ~B ∨ B of ordinal ≤2n − 1. Then, by the quantification rule, 
for each k there is a proof of (~ ( )
( ))
( )
x
x
k
B
B
∨
 of ordinal ≤2n and; hence, by 
the exchange rule, a proof of B
B
( )
( )
( )
k
x
x
∨∼
 of ordinal ≤2n. Finally, by an 
application of the infinite induction rule, we obtain a proof of ((x)B(x)) ∨ ~(x)
B (x) of ordinal ≤2n + 1 and, by the exchange rule, a proof of (~(x)B(x)) ∨ 
(x)B (x) of ordinal ≤2n + 1.
Lemma A.2
For any closed terms t and s, and any wf A  (x) with x as its only free variable, the 
wf  s ≠ t ∨ ~A  (s) ∨ A  (t) is a theorem of S∞ and is provable without applying the 
gut rule.
Proof
In general, if a closed wf B(t) is provable in S∞, and s has the same value as t, 
then B(s) is also provable in S∞. (Simply replace all occurrences of t that are 
“deductively connected” with the t in the terminal wf B(t) by s.) Now, if s has 
the same value n as t, then, since ~
( )
( )
A
A
n
n
∨
 is provable, it follows by the 
previous remark that ~A(s) ∨ A(t) is provable. Hence, by dilution, s ≠ t ∨ ~A  (s) ∨ 
A  (t) is provable. If s and t have different values, s = t is incorrect; hence, s ≠ t is 
an axiom. So, by dilution and exchange, s ≠ t ∨ ~A  (s) ∨ A  (t) is a theorem.

412
Appendix C: A Consistency Proof for Formal Number Theory
Lemma A.3
Every closed wf that is a theorem of S is also a theorem of S∞.
Proof
Let A be a closed wf that is a theorem of S. Clearly, every proof in S can be 
represented in the form of a finite proof-tree, where the initial wfs are axioms 
of S and the rules of inference are modus ponens and generalization. Let n be 
an ordinal assigned to such a proof-tree for A.
If n = 0, then A  is an axiom of S.
	
1.	A is B ⊃ (C  ⊃ B), that is, ~B ∨ (~C ∨ B). But, ~B ∨ B is provable in 
S∞ (Lemma A.1). Hence, so is ~B ∨ ~C ∨ B  by a dilution and an 
exchange.
	
2.	A  is (B ⊃ (C  ⊃ D) ⊃ ((B  ⊃ C ) ⊃ (B  ⊃ D)), that is, ~(~B ∨ ~C ∨ ~D) ∨ 
~(~B ∨ C) ∨ (~B ∨ D). By Lemma A.l, we have ~(~B ∨ C ) ∨ ~B ∨ C and 
(~B ∨ ~C ∨ D) ∨ ~(~B ∨ ~C ∨ D). Then, by exchange, a cut (with C as 
cut formula), and consolidation, ~(~B ∨ ~C ∨ D) ∨ ~(~B ∨ C ) ∨ ~B ∨ D 
is provable.
	
3.	A is (~B ⊃ ~A) ⊃ ((~B ⊃ A  ) ⊃ B)), that is, ~(~~B ∨ ~A) ∨ ~(~~B ∨ A ) 
∨ B. Now, by Lemma A.l we have ~B ∨ B, and then, by the negation 
rule, ~~~B ∨ B, and, by dilution and exchange,
	
a.	 ~~~B ∨ ~(~~B ∨ A ) ∨ B.
		
Similarly, we obtain ~~~B ∨ B ∨ ~~A and ~A ∨ B ∨ ~ ~A, and by 
De Morgan’s rule, ~(~  ~B ∨ A  ) ∨ B ∨ ~  ~A; then, by exchange,
	
b.	 ~ ~A   ∨ ~(~ ~B ∨ A  ) ∨ B.
	
	
From (a) and (b), by De Morgan’s rule, we have ~(~~B ∨ ~A   ∨ 
~(~~B ∨ A  ) ∨ B.
	
4.	A is (x)B(x) ⊃ B(t), that is, (~(x)B(x)) ∨ B (t). Then, by Lemma A.1, we 
have ~B (t) ∨ B (t); by the quantification rule, (~(x)B (x)) ∨ B(t).
	
5.	A  is (x)(B ⊃ C ) ⊃ (B ⊃ (x)C ), where x; is not free in B, that is, ~(x)(~B ∨ 
C (x) ∨ ~B ∨ (x)C  (x). Now, by Lemma A-1, for every natural number n, 
there is a proof of ~ (~
( ))
~
( )
B
C
B
C
∨
∨
∨
n
n .
Note that the ordinals of these proofs are bounded by 2k + 1, where k is the 
number of propositional connectives and quantifiers in ~B  ∨ C  (x).)
Hence, by the quantification rule, for each n, there is a proof of
	
~ ( )(~
( ))
~
( )
(
)
x
x
n
k
B
C
B
C
∨
∨
∨
≤
+
of ordinal
2
2
Hence, by exchange and infinite induction, there is a proof of
	
~ ( )(~
( ))
~
( ) ( )
(
)
x
B
C x
B
x C x
k
∨
∨
∨
≤
+
of ordinal
2
3

413
Appendix C: A Consistency Proof for Formal Number Theory
(S1) A  is t1 = t2 ⊃ (t1 = t3 ⊃ t2 = t3), that is, tl ≠ t2 ∨ tl ≠ t3 ∨ t2 = t3.
Apply Lemma A-2, with x; = t3 as A  (x), t1 as s, t2 as t.
(S2) A  is t1 = t2 ⊃ (t1)′ = (t2)′, that is, tl ≠ t2 ∨ (t1)′ = (t2)′. If t1 and t2 have the same 
value, then so do (t1)′ and (t2)′. Hence (t1)′ = (t2)′ is correct and therefore an 
axiom. By dilution, we obtain tl ≠ t2 ∨ (t1)′ ≠ (t2)′. If t1 and t2 have different 
values, t1 ≠ t2 is an axiom; hence, by dilution and exchange, t1 ≠ t2 ∨ (t1)′ = (t2)′ 
is provable.
(S3) A  is 0 ≠ t′. 0 and t′ have different values; hence, 0 ≠ t′ is an axiom.
(S4) A  is (t1)′ = (t2)′ ⊃ t1 = t2, that is, (t1)′ ≠ (t2)′ ∨ t1 = t2. (Exercise.)
(S5) A  is t + 0 = t. t + 0 and t have the same values. Hence, + 0 = t is an axiom.
(S6)–(S8) follow similarly from the recursion equations for evaluating close 
terms.
(S9) A  is B (0) ⊃ ((x)(B (x) ⊃ B (x′)) ⊃ (x)B (x)), that is,
	
~
( )
~ ( )(~
( )
( ))
( )
( )
B
B
B
B
0 ∨
∨
′ ∨
x
x
x
x
x
	
1.	Clearly, by Lemma A.l, exchange and dilution,
	
~ ( )
~ ( )(~ ( )
( ))
( )
B
x
B x
B x
B
0
0
∨
∨
′ ∨
is provable.
	
2.	For k ≥ 0, let us prove by induction that the following wf is provable:
	
~
( )
~ (~
( )
( ))
~ (~
( )
( ))
( ).
B
B
B
B
B
B
0
0
∨
∨
∨… ∨
∨
′ ∨
′
l
k
k
k
	
a.	 For k = 0, ⊢S
l
∞~ ~
( )
~
( )
( )
B
B
B
0
0
∨
∨
 by Lemma A.l, dilution, 
and exchange; similarly, ⊢S
l
l
∞~
( )
~
( )
( )
B
B
B
∨
∨
0
. Hence, by 
De Morgan’s rule, ⊢S
l
l
∞~ (~
( )
( ))
~
( )
( )
B
B
B
B
0
0
∨
∨
∨
 (l), and by 
exchange,
	
⊢S
l
l
∞~
( )
~ (~
( )
( ))
( )
B
B
B
B
0
0
∨
∨
∨
	
b.	 Assume for k:
	
⊢S
l
k
k
k
∞~
( )
~ (~
( )
( ))
~ (~
( )
~
( ))
( )
B
B
B
B
B
B
0
0
∨
∨
∨…
∨
∨
′ ∨
′
Hence, by exchange, negation, and dilution,
	
⊢S
k
l
k
k
k
∞~ ~
( )
~
( )
~ (~
( )
(( ))
~ (~
( )
~
( ))
(
)
B
B
B
B
B
B
B
∨
∨
∨
∨…
∨
∨
′ ∨
′′
0
0

414
Appendix C: A Consistency Proof for Formal Number Theory
Also, by Lemma A.l for B (
)′′
k , dilution and exchange,
	
⊢S
B k
B
B
B l
B k
B k
B k
∞~ (
)
~ ( )
~ (~ ( )
(( ))
~ (~ ( )
~ ( ))
(
)
′′ ∨
∨
∨
∨…
∨
∨
′ ∨
′′
0
0
Hence, by De Morgan’s rule,
	
⊢S
k
k
l
k
k
∞~ (~
( )
~
(
)
~
( )
~ (~
( ))
(( ))
~ (~
( )
~
( )
B
B
B
B
B
B
B
′ ∨
′′ ∨
∨
∨
∨…
∨
∨
′
0
0
)
(
)
∨
′′
B k
and, by exchange, the result follows for k + 1.
Now, applying the exchange and quantification rules k times to the result 
of (2), we have, for each k ≥ 0,
	
⊢S
x
x
x
x
x
x
k
∞~
( )
~ ( )
( )
( ))
~ ( )(~
( )
~
( ))
( )
B
B
B
B
B
B
0 ∨
∨
′
∨…
∨
∨
′ ∨
′
and, by consolidation, ⊢S
x
x
x
k
∞~
( )
~ ( )(~
( )
( ))
( )
B
B
B
B
0 ∨
∨
′ ∨
′ . Hence, together 
with (1), we have, for all k ≥ 0,
	
⊢S
x
x
x
k
∞~
( )
~ ( )(~
( )
( ))
( )
B
B
B
B
0 ∨
∨
′ ∨
Then, by infinite induction,
	
⊢S
x
x
x
x
x
∞~
( )
~ ( )(~
( )
( ))
( )
( )
B
B
B
B
0 ∨
∨
′ ∨
Thus, all the closed axioms of S are provable in S∞. We assume now that 
n > 0. Then, (i) A may arise by modus ponens from B and B ⊃ A, where 
B  and B ⊃ A  have smaller ordinals in the proof-tree. We may assume that 
B contains no free variables, since we can replace any such free variables by 
0 in B and its predecessors in the proof-tree.
Hence, by inductive hypothesis, ⊢S∞B  and ⊢S∞B
A
⊃
, that is, ⊢S∞~ B
A
∨
.
Hence, by a cut, we obtain ⊢S∞A . The other possibility (ii) is that A is (x)B(x) and 
comes by generalization from B(x). Now, in the proof-tree, working backward 
from B(x), replaces the appropriate free occurrences of x by n. We then obtain a 
proof of B ( )
n , of the same ordinal. This holds for all n; by inductive hypothesis, 
⊢S
n
∞B ( ) for all n. Hence, by infinite induction, ⊢S
x
x
∞( )
( )
B
, that is, ⊢S∞A .
Corollary A.4
If S∞ is consistent, S is consistent.

415
Appendix C: A Consistency Proof for Formal Number Theory
Proof
If S is inconsistent, then ⊢s0 ≠ 0. Hence, by Lemma A-3, ⊢s∞0
0
≠. But, ⊢s∞0
0
= , 
since 0 = 0 is correct. For any wf  A    of S∞, we would have, by dilution, 
⊢s∞0
0
≠
∨A , and, together with ⊢s∞0
0
= , by a cut, ⊢s∞A . Thus, any wf of S∞ 
is provable; so S∞ is inconsistent.
By Corollary A.4, to prove the consistency of S, it suffices to show the 
­consistency of S∞.
Lemma A.5
The rules of De Morgan, negation, and infinite induction are invertible, that is, from 
a proof of a wf that is a consequence of some premisses by one of these rules one can 
obtain a proof of the premisses (and the ordinal and degree of such a proof are no 
higher than the ordinal and degree of the original proof).
Proof
	
1.	De Morgan. A  is ~(B ∨ E ) ∨ D. Take a proof of A. Take all those 
subformulas ~(B ∨ E) of wfs of the proof-tree obtained by starting 
with ~(B ∨ E) in A and working back up the proof-tree. This pro-
cess continues through all applications of weak rules and through 
all strong rules in which ~(B ∨ E) is part of a side wf. It can end 
only at dilutions 
F
B
E
F
~ (
)
∨
∨
 or applications of De Morgan’s rule: 
~
~
~ (
)
.
B
F
E
F
B
E
F
∨
∨
∨
∨
 The set of all occurrences of ~(B ∨ E ) obtained by
 
this process is called the history of ~(B   ∨ E ). Let us replace all occur-
rences of ~(B   ∨ E ) in its history by ~B. Then we still have a proof-tree 
(after unnecessary formulas are erased), and the terminal wf is ~B   ∨ D. 
Similarly, if we replace ~(B   ∨ E ) by, ~E we obtain a proof of ~E ∨ D.
	
2.	Negation A   is ~ ~B  ∨ D. Define the history of ~ ~B as was done for 
~(B ∨ B ) in (1); replace all occurrences of ~ ~B in its history by B; the 
result is a proof of B  ∨ D.
	
3.	Infinite induction. A   is ((x)B (x)) ∨ D. Define the history of (x)B (x) as 
in (1); replace (x)B(x) in its history by B ( )
n  (and if one of the ­initial 
occurrences in its history appears as the consequence of an infi-
nite induction, erase the tree above all the premisses except the one 
involving n); we then obtain a proof of B
D
( )
n ∨
.
Lemma A.6
(Schütte 1951: Reduktionssatz). Given a proof of A  in S∞, of positive degree m and 
ordinal α, there is a proof of A  in S∞ of lower degree and ordinal 2α.

416
Appendix C: A Consistency Proof for Formal Number Theory
Proof
By transfinite induction on the ordinal α of the given proof of A., α = 0: this 
proof can contain no cuts and, hence, has degree 0. Assume the theorem 
proved for all ordinals < α. Starting from the terminal wf A, find the first 
application of a nonweak rule, that is, of a strong rule or a cut. If it is a strong 
rule, each premiss has ordinal α1 < α. By inductive hypothesis, for these prem-
isses, there are proof-trees of lower degree and ordinal 2
1
α. Substitute these 
proof-trees for the proof-trees above the premisses in the original proof. We 
thus obtain a new proof for A  except that the ordinal of A   should be taken to 
be 2α, which is greater than every 2
1
α.
The remaining case is that of a cut:
	
C
B
B
D
C
D
∨
∨
∨
~
If the ordinals of C  ∨ B and ~B  ∨ D are α1, α2, then, by inductive hypothesis, 
we can replace the proof-trees above them so that the degrees are reduced 
and the ordinals are 2
1
α, 2
2
α , respectively. We shall distinguish various cases 
according to the form of the cut formula B :
	
a.	B is an atomic wf. Either B or ~B  must be an axiom. Let K  be the 
non-axiom of B and ~B. By inductive hypothesis, the proof-tree 
above the premiss containing K   can be replaced by a proof-tree with 
a lower degree having ordinal 2
1
α(i = 1 or 2). In this new proof-tree, 
consider the history of K  (as defined in the proof of Lemma A-5). The 
initial wfs in this history can arise only by dilutions. So, if we erase 
all occurrences of K  in this history, we obtain a proof-tree for C  or for 
D of ordinal 2
1
α; then, by dilution, we obtain C   ∨ D, of ordinal 2α. The 
degree of the new proof-tree is less than m.
	
b.	B is C
E
E
D
C
D
∨
∨
∨
~
~ ~
	
	 There is a proof-tree for ~  ~E  ∨ D of degree < m and ordinal 2
2
α . By 
Lemma A-5, there is a proof-tree for E   ∨ D of degree < m and ordinal 
2
2
α  There is also, by inductive hypothesis, a proof-tree for C  ∨ ~E of 
degree < m and ordinal 2
1
α. Now, construct
	
Exchange
Exchange
Cut
Exchange
E
D
D
E
C
D
B
C
D
C
C
D
∨
∨
∨
∨
∨
∨



417
Appendix C: A Consistency Proof for Formal Number Theory
	
	 The degree of the indicated cut is the degree of ~E that is one less 
than the degree of ~~  ~E, which, in turn, is ≤m. The ordinal of D  ∨ C 
can be taken to be 2
2
α . Hence, we have a proof of lower degree and 
ordinal 2α.
	
c.	B is E
F
C
E
F
E
F
D
C
D
∨
∨
∨
∨
∨
∨
:
~ (
)
	
	 There is a proof-tree for~(E ∨ F  ) ∨ D of lower degree and ordinal 2
2
α . 
Hence, by Lemma A-5, there are proof-trees for ~E ∨ D and ~F    ∨ D of 
degree <m and ordinal 2
2
α . There is also a proof-tree for B  ∨ E  ∨ F  of 
degree <m and ordinal 2
1
α. Construct
	
C
E
F
F
D
C
E
D
C
D
E
E
D
C
D
D
∨
∨
∨
∨
∨
∨
∨
∨
∨
∨



~
~
Cut
Exchange
Cut
Consolidation
C
D
∨
	
	 The cuts indicated have degrees < m; hence, the new proof-tree has 
degree < m; the ordinal of C   ∨ E   ∨ D can be taken as 2
1
2
max(
,
)
α α  + 01 and 
then the ordinal C  ∨ D  ∨ D and C   ∨ D as 2α.
	
d.	B is ( )
:
( )
(~ ( ) )
x
x
x
E
C
E
E
D
C
D
∨
∨
∨
	
	 By inductive hypothesis, the proof-tree above C    ∨ (x)E  can 
be replaced by one with smaller degree and ordinal 2α1. By Lemma 
A.5 and the remark at the beginning of the proof of Lemma A.2, we 
can obtain proofs of C   ∨  E(t) of degree <m and ordinal 2α, for any 
closed term t. Now, the proof-tree above the right-hand formula 
(~(x)E)  ∨ D can be replaced, by inductive hypothesis, by one with 
smaller degree and ordinal 2
2
α . The history of ~(x)E  in this proof ter-
minates above either at dilutions or as principal wfs in applications 
of the Quantification rule:
	
~
( )
E
G
t
i
1 ∨
	
(~ ( )
x
i
E
G
∨

418
Appendix C: A Consistency Proof for Formal Number Theory
Replace every such application by the cut
	
C
E
E
G
∨
∨
( )
(~
( ))
t
t
i
1
1
	
C
G
∨
i
Replace all occurrences in the history of ~(x)E(x) by C. The result is still a 
proof-tree, and the terminal wf is C   ∨ D. The proof-tree has degree < m, 
since the degree of ~E(t1) is less than the degree of ~(x)E. Replace each old 
ordinal β of the proof-tree by 2
1
0
α
β
+
. If β was the ordinal of the premiss 
~(x)E(t1) ∨ Gi of an eliminated quantification rule application earlier, and if 
γ was the ordinal of the conclusion (~(x)E) ∨ Gi, then, in the new cut intro-
duced, C ∨ E(t) has ordinal 2
1
α , ~E(t1) ∨ Gi has ordinal 2
1
α , and the conclu-
sion C ∨ Gi has ordinal 2
2
2
1
1
1
0
0
α
α
α
γ
β
+
>
+
max(
,
). At all other places, the 
ordinal of the conclusion is still greater than the ordinal of the ­premisses, 
since δ <0 μ implies 2
1
α  + 0δ<0 2
1
α  + 0μ. Finally, the right-hand ­premiss 
(~(x)E) ∨ D (originally of ordinal α2) goes over into C ∨ D with ordinal 
2
2
2
2
2
2
2
1
2
1
2
1
2
1
2
1
0
0
0
α
α
α
α
α
α
α
α
α
α
+
≤
+
=
×
=
max(
,
)
max(
,
)
max(
,
)
max(
,
2
0 1
2
)
.
+
≤
α  If this 
is <02α, the ordinal of C ∨ D can be raised to 2α.
Corollary A.7
Every proof of A  of ordinal α and degree m can be replaced by a proof of A  of ordinal 
22
2 2
 (
)
α
 and degree 0 (i.e., a cut-free proof).
Proposition A-8
S∞ is consistent.
Proof
Consider any wf A  of the form (0 ≠ 0) ∨ (0 ≠ 0) ∨ … ∨ (0 ≠ 0). If there is a 
proof of A, then by Corollary A-7, there is a cut-free proof of A. By inspection 
of the rules of inference, A can be derived only from other wfs of the same 
form: (0 ≠ 0) ∨ … ∨ (0 ≠ 0). Hence, the axioms of the proof would have to be 
of this form. But there are no axioms of this form; hence, A   is unprovable. 
Therefore, S∞ is consistent.

419
Answers to Selected Exercises
Chapter 1
1.1	
A
B
T
T
F
F
T
T
T
F
T
F
F
F
1.2
	
A
B
A
A
B
A
B
A
¬
⇒
⇒
∨¬
(
)
T
T
F
T
T
F
T
T
T
T
T
F
F
F
F
F
F
T
T
T
1.3
	
((
)
)
A
B
A
⇒
∧
T
T
T
T
T
F
T
T
F
F
T
F
F
F
T
F
T
F
F
F
1.4	
a.	
A
B
A
B
⇒¬
(
) ∧
¬
⇒¬
(
)
(
)
(
)
(
)
(
)
		
c.	
(A ⇒ B),	
A: x is prime, B: x is odd.
		
d.	 (A ⇒ B),	
A: the sequence s converges,
		
B: the sequence s is bounded.
		
e.	
(A ⇔ (B ∧ (C ∧ D)))	
A: the sheikh is happy,
		
B: the sheikh has wine,
		
C: the sheikh has women,
		
D: the sheikh has song.
		
f.	
(A ⇒ B),		
A: Fiorello goes to the movies.
		
i.	
((¬A) ⇒ B),	
A: Kasparov wins today,
		
B: Karpov will win the tournament.
1.5 
(c), (d), (f), (g), (i), (j) are tautologies.

420
Answers to Selected Exercises
1.6	
(a), (b), (d), (e), (f) are logically equivalent pairs.
1.11	
All except (i).
1.13	
Only (c) and (e).
1.15	
a.	
(B ⇒ ¬A) ∧ C 	
(e) A ⇔ B ⇔ ¬(C ∨ D)
		
c.	
Drop all parentheses.	(g) ¬(¬¬(B ∨ C) ⇔ (B ⇔ C))
1.16	
a.	
(C ∨((¬A) ∧ B))	
(c) ((C ⇒((¬((A ∨ B) ⇒ C)) ∧ A)) ⇔ B)
1.17	
a.	
(((¬(¬A)) ⇔ A) ⇔ (B ∨ C)) (d) and (f) are the only ones that are not 
abbreviations of statement forms.
1.18	
a.	
∨ ⇒ C¬AB and ∨C ⇒ ∧B¬DC
		
c.	
(a) ∧ ⇒ B¬AC   (b) ∨A ∨ BC
		
d.	 (i) is not. (ii) (A ⇒ B) ⇒((B ⇒ C) ⇒ (¬A ⇒ C))
1.19	
f.	
is contradictory, and (a), (d), (e), (g)–(j) are tautologies.
1.20	
(b)–(d) are false.
1.21	
a.	
T (b) T (c) indeterminate
1.22	
a.	
A is T, B is F, and ¬A ∨ (A ⇒ B) is F.
		
c.	
A is T, C is T, B is T.
1.29	
c.	
(i) A ∧((B ∧ C) ∨ (¬B ∧ ¬C)) (ii) A ∧ B ∧ ¬C
		
	
(iii) ¬A ∨ (¬B ∧ C)
1.30	
a.	
If B is a tautology, the result of replacing all statement letters by 
their negations is a tautology. If we then move all negation signs 
outward by using Exercise 1.27 (k) and (l), the resulting tautology 
is ¬B ′. Conversely, if ¬B ′ is a tautology, let C  be ¬B ′. By the first 
part, ¬C ′ is a tautology. But ¬C ′ is ¬¬B.
		
c.	
(¬A ∧ ¬B ∧ ¬C) ∨ (A ∧ B ∧ ¬D)
1.32	
a.	
For figure 1.4:
B
A
1.33	
(a), (d) and (h) are not correct.
1.34	
a.	
Satisfiable: Let A, B, and C be F, and let D be T.
1.36	
For f,
	
(
)
(
)
(
)
(
)
A
B
C
A
B
C
A
B
C
A
B
C
∧
∧
∨¬
∧
∧
∨
∧¬ ∧
∨¬
∧¬ ∧¬
1.37	
For ⇒ and ∨, notice that any statement form built up using ⇒ and ∨ 
will always take the value T when the statement letters in it are T. In 
the case of ¬ and ⇔, using only the statement letters A and B, find all 

421
Answers to Selected Exercises
the truth functions of two variables that can be generated by applying 
¬ and ⇔ any number of times.
1.40	
a.	
24 = 16 (b) 22n
1.41	
h(C, C, C) = ¬C and h(B, B, ¬C) is B ⇒ C.
1.42	
b.	
For ¬(A ⇒ B) ∨ (¬A ∧ C), a disjunctive normal form is (A ∧ ¬B) ∨ (¬A 
∧ C), and a conjunctive normal form is (A ∨ C) ∧ (¬B ∨ ¬A) ∧ (¬B ∨ C).
		
c.	
(i) For (A ∧ B) ∨ ¬A, a full dnf is (A ∧ B) ∨ (¬A ∧ B) ∨ (¬A ∧ ¬B), and 
a full cnf is B ∨ ¬A.
1.43	
b.	 (i) Yes. A: T, B: T, C: F (ii) Yes. A: T, B: F, C: T
1.45	
b.	 A conjunction E of the form B
Bn
1
*
*
∧… ∧
, where each Bi
* is either Bi 
or ¬Bi, is said to be eligible if some assignment of truth values to 
the statement letters of B  that makes B  true also makes E  true. 
Let C  be the disjunction of all eligible conjunctions.
1.47 
b.	 1.	
C ⇒ D	
Hypothesis
		
	
2.	
B ⇒ C	
Hypothesis
		
	
3.	
(B ⇒ (C ⇒ D)) ⇒((B ⇒ C ) ⇒ (B ⇒ D))	 Axiom (A2)
		
	
4.	
(C ⇒ D) ⇒(B ⇒ (C ⇒ D))	
Axiom (A1)
		
	
5.	
B ⇒ (C ⇒ D)	
1, 4, MP
		
	
6.	
(B ⇒ C) ⇒ (B ⇒ D)	
3, 5, MP
		
	
7.	
B ⇒ D	
2, 6, MP
1.48	
a.	
1.	
B ⇒ ¬¬B	
Lemma 1.11(b)
		
	
2.	
¬¬B  ⇒ (¬B ⇒ C )	
Lemma 1.11(c)
		
	
3.	
B ⇒ (¬B ⇒ C )	
1, 2, Corollary 1.10(a)
		
	
4.	
B ⇒ (B ∨ C )	
3, Abbreviation
		
c.	
1.	
¬C ⇒ B	
Hypothesis
		
	
2.	
(¬C ⇒ B) ⇒ (¬B ⇒ ¬¬C )	
Lemma 1.11(e)
		
	
3.	
¬B ⇒ ¬¬C	
1, 2, MP
		
	
4.	
¬¬C ⇒ C	
Lemma 1.11(a)
		
	
5.	
¬B ⇒ C	
3, 4, Corollary 1.10(a)
		
	
6.	
¬C ⇒ B ⊢ ¬B ⇒ C	
1–5
		
	
7.	
⊢ (¬C ⇒ B) ⇒ (¬B ⇒ C )	
6, deduction theorem
		
	
8.	
⊢ (C  ∨ B) ⇒ (B ∨ C )	
7, abbreviation
1.50	
Take any assignment of truth values to the statement letters of B that 
makes B false. Replace in B each letter having the value T by A1 ∨ ¬A1, 
and each letter having the value F by A1 ∧ ¬A1. Call the resulting state-
ment form C. Thus, C is an axiom of L*, and, therefore, ⊢L*C. Observe 
that C always has the value F for any truth assignment. Hence, ¬C  is a 
tautology. So ⊢L ¬C  and, therefore, ⊢L* ¬ C.

422
Answers to Selected Exercises
1.51	
(Deborah Moll) Use two truth values. Let ⇒ have its usual table and 
let ¬ be interpreted as the constant function F. When B is F, (¬B ⇒ ¬A) 
⇒((¬B ⇒ A) ⇒ B) is F.
1.52	
The theorems of P are the same as the axioms. Assume that P is suitable for 
some n-valued logic. Then, for all values k, k * k will be a designated value. 
Consider the sequence of formulas B0 = A, Bj+1 = A  * Bj. Since there are nn 
possible truth functions of one variable, among B0, …, Bnn there must be 
two different formulas Bj and Bk that determine the same truth function. 
Hence, Bj  * Bk will be an exceptional formula that is not a theorem.
1.53	
Take as axioms all exceptional formulas, and the identity function as 
the only rule of inference.
Chapter 2
2.1	
a.	
(
)
(
)
(
)
∀
∧¬
(
)
(
)
(
)
x
A x
A x
1
1
1
1
1
1
2
 (b) 
(
)
(
)
(
)
∀
(
) ⇔
(
)
x A x
A x
2
1
1
2
1
1
2
		
d.	
(
) (
) (
)
(
)
(
)
(
)
∀
∀
∀
(
)
(
)
(
) ⇒
∧¬
(
)
(
)
(
)
x
x
x A x
A x
A x
1
3
4
1
1
1
1
1
2
1
1
1
2.2	
a.	
(
)
(
)
(
)
(
)
(
)
∀
⇒
(
)
(
)∨∃
x
A x
A x
x A x
1
1
1
1
1
1
1
1
1
1
1
2.3	
a.	
The only free occurrence of a variable is that of x2.
		
b.	 The first occurrence of x3 is free, as is the last occurrence of x2.
2.6	
Yes, in parts (a), (c) and (e)
2.8	
a.	
(∀x)(P(x) ⇒ L(x))
		
b.	 (∀x)(P(x) ⇒ ¬H(x)) or ¬(∃x)(P(x) ∧ H(x))
		
c.	
¬(∀x)(B(x) ⇒ F(x))
		
d.	 (∀x)(B(x) ⇒ ¬F(x)) (e) T(x) ⇒ I(x)
		
f.	
(∀x)(∀y)(S(x) ∧ D(x, y) ⇒ J(y))
		
j.	
(∀x)(¬H(x, x) ⇒ H(j, x)) or (∀x)(P(x) ∧ ¬H(x, x) ⇒ H(j, x))
		
	
(In the second wf, we have specified that John hates those persons 
who do not hate themselves, where P(x) means x is a person.)
2.9	
a.	
All bachelors are unhappy. (c) There is no greatest integer.
2.10	
a.	
i.	
Is satisfied by all pairs 〈x1, x2〉 of positive integers such that 
x1 · x2 ≥ 2.
		
	
ii.	
Is satisfied by all pairs 〈x1, x2〉 of positive integers such that 
either x1 < x2 (when the antecedent is false) or x1 = x2 (when the 
antecedent and consequent are both true).
		
	
iii.	 Is true.

423
Answers to Selected Exercises
2.11	
a.	
Between any two real numbers there is a rational number.
2.12	
I.	 A sequence s satisfies ¬B if and only if s does not satisfy B. 
Hence, all sequences satisfy ¬B if and only if no sequence satis-
fies B; that is, ¬B is true if and only if B  is false.
		
II.	 There is at least one sequence s in Σ. If s satisfies B, B cannot 
be false for M. If s does not satisfy B, B cannot be true for M.
		
III.	 If a sequence s satisfies both B and B ⇒ C, then s satisfies C by 
condition 3 of the definition.
		
V.	 a.	 s satisfies B ∧ C if and only if s satisfies ¬(B ⇒ ¬C)
		
	 	
if and only if s does not satisfy B ⇒ ¬C
		
	 	
if and only if s satisfies B but not ¬C
		
	 	
if and only if s satisfies B and s satisfiesC
		
VI.	 a.  Assume ⊧M B. Then every sequence satisfies B. In particular, 
every sequence that differs from a sequence s in at most the 
ith place satisfies B. So, every sequence satisfies (∀xi)B; that is, 
⊧M (∀xi)B.
		
	 b.	 Assume ⊧M (∀xi)B. If s is a sequence, then any sequence that dif-
fers from s in at most the ith place satisfies B, and, in particular, 
s satisfies B. Then every sequence satisfies B; that is, ⊧M B.
		
VIII.	 Lemma. If all the variables in a term t occur in the list x
x
i
ik
1 ,
,
…
 
(k ≥ 0; when k = 0, t has no variables), and if the sequences s 
and s′ have the same components in the i1th, …, ikth places, then 
s* (t) = (s′)*(t).
		
	
Proof. Induction on the number m of function letter in t. Assume 
the result holds for all integers less than m.
		
	
Case 1. t is an individual constant ap. Then s*(ap) = (ap)M = (s′)*(ap).
		
	
Case 2. t is a variable xij. Then s
x
s
s
s
x
i
i
i
i
j
j
j
j
*(
)
( )*(
)
=
= ′ =
′
.
		
	
Case 3. t is of the form f
t
t
j
n
n
( ,
,
)
1 …
. For q ≤ n, each tq has 
fewer than m function letters and all its variables occur 
among x
x
i
ik
1 ,
,
.
…
 By inductive hypothesis s*(tq) = (s′)*(tq).
Then 
s
f
t
t
f
s
t
s
t
f
s
j
n
n
j
n
n
j
n
*
*
*
*
( ,
,
)
( ),
,
( )
(( )
1
1
…
(
) = (
)
…
(
) = (
)
′
M
M
 
( ),
, ( ) ( ))
( )
( ,
,
) .
t
s
t
s
f
t
t
n
j
n
n
1
1
…
′
=
′
…
(
)
*
*
		
	
Proof of (VIII). Induction on the number r of connectives and 
quantifiers in B. Assume the result holds for all q < r.
		
	
Case 1. B is of the form A t
t
j
n
n
( ,
,
)
1 …
; that is, r = 0. All the variables 
of each ti occur among x
x
i
ik
1,
,
…
. Hence, by the lemma, s*(ti) = 
(s′)*(ti). But s satisfies A t
t
j
n
n
( ,
,
)
1 …
 if and only if 〈s*(t1), …, s*(tn)〉 is 
in Aj
n
(
)
M—that is, if and only if 〈(s′)*(t1), …, (s′)*(tn)〉 is in Aj
n
(
)
M , 
which is equivalent to s′ satisfying A t
t
j
n
n
( ,
,
)
1 …
.

424
Answers to Selected Exercises
		
	
Case 2. B is of the form ¬C.
		
	
Case 3. B is of the form C ⇒ D. Both cases 2 and 3 are easy.
		
	
Case 4. B is of the form (∀xj)C. The free variables of C occur among 
x
x
i
ik
1 ,
,
…
 and xj. Assume s satisfies B. Then every sequence that 
differs from s in at most the jth place satisfies C. Let s# be any 
sequence that differs from s′ in at most the jth place. Let sb be 
a sequence that has the same components as s in all but the jth 
place, where it has the same component as s#. Hence, sb satisfies 
C. Since sb and s# agree in the i1th, …, ikth and jth places, it follows 
by inductive hypothesis that sb satisfies C if and only if s# satis-
fies C. Hence, s# satisfies C. Thus, s′ satisfies B. By symmetry, the 
converse also holds.
		
IX.	 Assume B is closed. By (VIII), for any sequence s and s′, s satis-
fies B if and only if s′ satisfies B. If ¬B is not true for M, some 
sequence s′ does not satisfy ¬B; that is, s′ satisfies B. Hence, 
every sequence s satisfies B; that is, ⊧M B.
		
X.	 Proof of Lemma 1: induction on the number m of function letters 
in t.
		
	
Case 1. t is aj. Then t′ is aj. Hence,
	s
t
s
a
a
s
a
s
t
j
j
j
*
*
*
*
( )
(
)
(
)
( ) (
)
( ) ( )
′ =
=
=
′
=
′
M
		
	
Case 2. t is xj, where j ≠ i. Then t′ is xj. By the lemma of (VIII), 
s*(t′) = (s′)*(t), since s and s′ have the same component in the jth 
place.
		
	
Case 3. t is xi. Then t′ is u. Hence, s*(t′) = s*(u), while (s′)*(t) = (s′)*(xi) = 
′si = s*(u).
		
	
Case 4. t is of the form f
t
t
j
n
n
( ,
,
)
1 …
. For 1 ≤ q ≤ n, let ′tq result 
from tq by the substitution of u for xi. By inductive hypothesis, 
s
t
s
t
q
q
*( )
( )*( )
′ =
′
. But
	
s
t
s
f
t
t
f
s
t
s
t
f
j
n
n
j
n
n
j
n
*
*
*
*
( )
,
,
,
,
′ =
′ …
′
(
)
(
) = (
)
′
( ) …
′
( )
(
)
= (
)
1
1
M
M ( ) ( ),
, ( ) ( )
( )
( ,
,
)
( ) ( )
′
…
′
(
) =
′
…
(
) =
′
s
t
s
t
s
f
t
t
s
t
n
j
n
n
*
*
*
*
1
1
		
	
Proof of Lemma 2(a): induction on the number m of connectives and 
quantifiers in B(xi).
		
	
Case 1. m = 0. Then B(xi) is A t
t
j
n
n
( ,
,
)
1 …
. Let ′tq be the result of sub-
stituting t for all occurrences of xi in tq. Thus, B(t) is A
t
j
n
n
1,
,
.
…
′
(
)  
By Lemma 1, s
t
s
t
q
q
*
*
′
( ) =
′
( ) ( ). Now, s satisfies B (t) if and only if 
〈
′
…
′ 〉
s
t
s
tn
*( ),
, *( )
1
 belongs to Aj
n
(
)
M, which is equivalent to 〈(s′)*(t1), …, 
(s′)*(tn)〉 belonging to Aj
n
(
)
M—that is, to s′ satisfying B (xi).

425
Answers to Selected Exercises
		
	
Case 2. B (xi) is ¬C (xi); this is straightforward.
		
	
Case 3. B (xi) is C (xi) ⇒ D (xi); this is straightforward.
		
	
Case 4. B (xi) is (∀xj) B (xi).
		
	
Case 4a. xj is xi. Then xi is not free in B (xi), and B (t) is B (xi). Since 
xi is not free in B (xi), it follows by (VIII) that s satisfies B (t) if and 
only if s′ satisfies B (xi).
		
	
Case 4b. xj is different from xi. Since t is free for xi in B (xi), t is also 
free for xi in C (xi).
		
	
Assume s satisfies (∀xj) C (t). We must show that s′ satisfies (∀xj) 
C (xi). Let s# differ from s′ in at most the jth place. It suffices to show 
that s# satisfies C (xi). Let sb be the same as s# except that it has the 
same ith component as s. Hence, sb is the same as s except in its jth 
component. Since s satisfies (∀xj) C (t), sb satisfies C (t). Now, since t is 
free for xi in (∀xj) C (xi), t does not contain xj. (The other possibility, 
that xi is not free in C (xi), is handled as in case 4a.) Hence, by the 
lemma of (VIII), (sb)*(t) = s*(t). Hence, by the inductive hypothesis 
and the fact that s# is obtained from sb by substituting (sb)*(t) for the 
ith component of sb, it follows that s# satisfies C (xi), if and only if sb 
satisfies C (t). Since sb satisfies C (t), s# satisfies C (xi).
		
	
Conversely, assume s′ satisfies (∀xj) C (xi). Let sb differ from s in 
at most the jth place. Let s# be the same as s′ except in the jth 
place, where it is the same as sb. Then s# satisfies C  (xi). As above, 
s*(t) = (sb)*(t). Hence, by the inductive hypothesis, sb satisfies C  (t) if 
and only if s# satisfies C (xi). Since s# satisfies C (xi), sb satisfies C (t). 
Therefore, s satisfies (∀xj)C (t).
		
	
Proof of Lemma 2(b). Assume s satisfies (∀xi)B (xi). We must show 
that s satisfies B (t). Let s′ arise from s by substituting s*(t) for the 
ith component of s. Since s satisfies (∀xi)B (xi) and s′ differs from s 
in at most the ith place, s′ satisfies B (xi). By Lemma 2(a), s satisfies 
B (t).
2.13	
Assume B is satisfied by a sequence s. Let s′ be any sequence. By (VIII), 
s′ also satisfies B. Hence, B is satisfied by all sequences; that is, ⊧M B.
2.14	
a.	
x is a common divisor of y and z. (d) x1 is a bachelor.
2.15	
a.	
i.	
Every nonnegative integer is even or odd. True.
		
	
ii.	
If the product of two nonnegative integers is zero, at least one 
of them is zero. True.
		
	
iii.	 1 is even. False.
2.17	
(a) Consider an interpretation with the set of integers as its domain. 
Let A x
1
1( ) mean that x is even and let A x
2
1( ) mean that x is odd. Then 
(
)
(
)
∀x A x
1
1
1
1  is false, and so (
)
(
)
(
)
(
)
∀
⇒∀
x A x
x A x
1
1
1
1
1
2
1
1  is true. However, 
(
)
(
)
(
)
∀
⇒
(
)
x
A x
A x
1
1
1
1
2
1
1  is false, since it asserts that all even integers 
are odd.

426
Answers to Selected Exercises
2.18	
a.	
[(∀xi) ¬B (xi) ⇒ ¬B (t)] ⇒ [B (t) ⇒ ¬(∀xi) ¬B (xi)] is logically valid 
because it is an instance of the tautology (A ⇒ ¬B) ⇒ (B ⇒ ¬A). By 
(X), (∀xi)¬B (xi) ⇒ ¬B (t) is logically valid. Hence, by (III), B (t) ⇒ 
¬(∀xi)¬B (xi) is logically valid.
		
b.	 Intuitive proof: If B is true for all xi, then B is true for some xi. 
Rigorous proof: Assume (∀xi)B ⇒ (∃xi)B is not logically valid. Then 
there is an interpretation M for which it is not true. Hence, there is 
a sequence s in ∑ such that s satisfies (∀xi)B and s does not satisfy 
¬(∀xi)¬B. From the latter, s satisfies (∀xi)¬B. Since s satisfies (∀xi)B, 
s satisfies B, and, since s satisfies (∀xi)¬B, s satisfies ¬B. But then s 
satisfies both B and ¬B, which is impossible.
2.19	
b.	 Take the domain to be the set of integers and let A u
1
1( ) mean that 
u is even. A sequence s in which s1 is even satisfies A x
1
1
1
(
) but does 
not satisfy (
)
(
)
∀x A x
1
1
1
1 .
2.21	
a.	
Let the domain be the set of integers and let A x y
1
2( , ) mean that x < 
y. (b) Same interpretation as in (a).
2.22	 a.	
The premisses are (i) (∀x)(S(x) ⇒ N(x)) and (ii) (∀x)(V(x) ⇒ ¬N(x)), 
and the conclusion is (∀x)(V(x) ⇒ ¬S(x)). Intuitive proof: Assume 
V(x). By (ii), ¬N(x). By (i), ¬S(x). Thus, ¬S(x) follows from V(x), and 
the conclusion holds. A more rigorous proof can be given along 
the lines of (I)–(XI), but a better proof will become available after 
the study of predicate calculi.
2.26	
a.	 (
)(
)
( )
( )
∃
∃
∧¬
(
)
x
y
A x
A y
1
1
1
1
2.27	
a.	
1.	 (∀x)(B ⇒ C)	
Hyp
		
	
2.	 (∀x)B	
Hyp
		
	
3.	 (∀x)(B ⇒ C) ⇒ (B ⇒ C)	
Axiom (A4)
		
	
4.	 B  ⇒ C	
1, 3, MP
		
	
5.	 (∀x)B ⇒ B	
Axiom (A4)
		
	
6.	 B	
2, 5, MP
		
	
7.	 C	
4, 6, MP
		
	
8.	 (∀x)C	
7, Gen
		
	
9.	 (∀x)(B ⇒ C), (∀x)B ⊢ (∀x)C	
1–8
		
	
10.	 (∀x)(B  ⇒ C) ⊢ (∀x)B ⇒ (∀x)C	
1–9, Corollary 2.6
		
	
11.	 ⊢ (∀x)(B ⇒ C) ⇒ ((∀x)B ⇒ (∀x)C)	
1–10, Corollary 2.6
2.28	
Hint: Assume ⊢K B. By induction on the number of steps in the proof of 
B in K, prove that, for any variables y1, …, yn (n ≥ 0), ⊢K#(∀ y1) … (∀ yn)B.
2.31 
a.	
1.	
(
)(
)
( , )
∀
∀
x
y A x y
1
2
	
Hyp
		
	
2.	
(
)
( , )
∀y A x y
1
2
	
1, Rule A4

427
Answers to Selected Exercises
		
	
3.	
A x x
1
2( , ) 	
2, Rule A4
		
	
4.	
(
)
( , )
∀x A x x
1
2
	
3, Gen
		
	
5.	
∀
(
) ∀
(
)
(
)
∀
(
)
(
)
x
y A
x y
x A
x x
1
2
1
2
,
,
⊢
	
1–4
		
	
6.	
⊢∀
(
) ∀
(
)
(
) ⇒∀
(
)
(
)
x
y A
x y
x A
x x
1
2
1
2
,
,
	 1–5, Corollary 2.6
2.33	
a.	
⊢ ¬(∀x)¬¬B ⇔ ¬(∀x)¬B by the replacement theorem and the fact 
that ⊢ ¬¬B ⇔ B. Replace ¬(∀x)¬¬B  by its abbreviation (∃x)¬B.
2.36	
b.	 (∃ε)(ε > 0 ∧ (∀δ)(δ > 0 ⇒ (∃x)(|x − c|< δ ∧ ¬|f(x) − f(c) |< ε)))
2.37	
a.	
i.	
Assume ⊢B. By moving the negation step-by-step inward to 
the atomic wfs, show that ⊢ ¬B* ⇔ C, where C is obtained 
from B by replacing all atomic wfs by their negations. But, 
from ⊢B it can be shown that ⊢C. Hence, ⊢ ¬B*. The converse 
follows by noting that (B*)* is B.
		
	
(ii)	 Apply (i) to ¬B ∨ C.
2.39	
1.	
(
)(
)
( , )
( , )
∃
∀
⇔¬
(
)
y
x
A x y
A x x
1
2
1
2
	
Hyp
		
2.	 (
)
( , )
( , )
∀
⇔¬
(
)
x
A x b
A x x
1
2
1
2
	
1, Rule C
		
3.	
A b y
A b b
1
2
1
2
( , )
( , )
⇔¬
	
2, Rule A4
		
4.	
C ∧ ¬C	
3, Tautology
		
(C is any wf not containing b.) Use Proposition 2.10 and proof by 
contradiction.
2.46	
a.	
In step 4, b is not a new individual constant. It was already used in 
step 2.
2.49	
Assume K is complete and let B and C  be closed wfs of K such that 
⊢K B ∨ C. Assume not-⊢K B. Then, by completeness, ⊢K ¬B. Hence, 
by the tautology ¬ A ⇒ ((A ∨ B) ⇒ B), ⊢K B. Conversely, assume K is 
not complete. Then there is a sentence B of K such that not-⊢K B and 
not-⊢K ¬B. However, ⊢K B ∨ ¬B.
2.50	
See Tarski, Mostowski and Robinson (1953, pp. 15–16).
2.55	 b.	 It suffices to assume B is a closed wf. (Otherwise, look at the 
closure of B.) We can effectively write all the interpretations on 
a finite domain {b1, …, bk}. (We need only specify the interpreta-
tions of the symbols that occur in B.) For every such interpreta-
tion, replace every wf (∀x) C (x), where C (x) has no quantifiers, 
by C  (b1) ∧ … ∧ C (bk), and continue until no quantifiers are left. 
One can then evaluate the truth of the resulting wf for the given 
interpretation.
2.59	
Assume K is not finitely axiomatizable. Let the axioms of K1 be B1, 
B2, …, and let the axioms of K2 be C 1, C 2, .… Then {B1, C1, B2, C2, …} is 
consistent. (If not, some finite subset {B1, B2, …, Bk, C1, …, Cm} is incon-
sistent. Since K1 is not finitely axiomatizable, there is a theorem B of 

428
Answers to Selected Exercises
K1 such that B1, B2, …, Bk ⊢ B does not hold. Hence, the theory with 
axioms {B1, B2, …, Bk, ¬B} has a model M. Since ⊢KB, M must be a 
model of K2, and, therefore, M is a model of {B1, B2, …, Bk, C 1, …, Cm}, 
contradicting the inconsistency of this set of wfs.) Since {B1, C1, B2, C2, …} 
is consistent, it has a model, which must be a model of both K1 and K2.
2.60	
Hint: Let the closures of the axioms of K be B1, B2, .… Choose a sub-
sequence Bj1, Bj2, … such that Bjn+1 is the first sentence (if any) after 
Bjn that is not deducible from B
B
j
jn
1 ∧… ∧
 Let Ck be B
B
B
j
j
jk
1
2
∧
∧… ∧
. 
Then the C k form an axiom set for the theorems of K such that ⊢Ck+1 ⇒ 
Ck but not-⊢Ck ⇒ Ck+1. Then {C 1, C 1 ⇒ C2, C2 ⇒ C3, …} is an independent 
axiomatization of K.
2.61	
Assume B is not logically valid. Then the closure C of B is not logi-
cally valid. Hence, the theory K with ¬C as its only proper axiom has 
a model. By the Skolem–Löwenheim theorem, K has a denumerable 
model and, by the lemma in the proof of Corollary 2.22, K has a model 
of cardinality m. Hence, C is false in this model and, therefore, B is not 
true in some model of cardinality m.
2.65	
c.	
1.	 x = x 	
Proposition 2.23(a)
		
	
2.	 (∃y)x = y 	
1, rule E4
		
	
3.	 (∀x)(∃y)x = y 	
2, Gen
2.68	
a.	
The problem obviously reduces to the case of substitution for a single 
variable at a time: ⊢ x1 = y1 ⇒ t(x1) = t(y1). From (A7), ⊢ x1 = y1 ⇒ 
(t(x1) = t(x1) ⇒ t(x1) = t(y1)). By Proposition 2.23 (a), ⊢ t(x1) = t(x1). Hence, 
⊢ x1 = y1 ⇒ t(x1) = t(y1).
2.70	
a.	 By Exercise 2.65(c), ⊢ (∃y)x = y. By Proposition 2.23(b, c), ⊢ (∀y)
(∀z)(x = y ∧ x = z ⇒ y = z). Hence, ⊢ (∃1y)x = y. By Gen, ⊢ (∀x)(∃1y)
x = y.
2.71	
b.	 i.	
Let ∧1 ≤ i< j ≤ nxi ≠ xj stand for the conjunction of all wfs of the 
form xi ≠ xj, where 1 ≤ i < j ≤ n. Let Bn be (∃x1) … (∃xn) ∧1 ≤i <j ≤n 
xi ≠ xj.
		
	
ii.	
Assume there is a theory with axioms A1, …, An that has the 
same theorems as K. Each of A1, …, An is provable from K1 
plus a finite number of the wfs B1, B2, .… Hence, K1 plus a 
finite number of wfs B
B
j
jn
1 ,
,
…
 suffices to prove all theorems 
of K. We may assume j1< ⋯ <jn. Then an interpretation whose 
domain consists of jn objects would be a model of K, contra-
dicting the fact that Bjn +1 is an axiom of K.
2.74	
For the independence of axioms (A1)–(A3), replace all t = s by the 
statement form A ⇒ A; then erase all quantifiers, terms and associ-
ated commas and parentheses; axioms (A4)–(A6) go over into state-
ment forms of the form P ⇒ P, and axiom (A7) into (P ⇒ P) ⇒ (Q ⇒ Q). 

429
Answers to Selected Exercises
For the independence of axiom (A1), the following four-valued logic, 
due to Dr D.K. Roy, works, where 0 is the only designated value.
A
B
A
B
A
B
A
B
A
B
A
B
A
B
A
B
A
A
⇒
⇒
⇒
⇒
¬
0
0
0
1
0
0
2
0
0
3
0
0
0
1
0
1
1
1
1
0
2
1
0
3
1
1
1
0
0
2
1
1
2
0
2
2
0
3
2
1
2
0
0
3
1
1
3
0
2
3
0
3
3
0
3
0
		
When A and B take the values 3 and 0, respectively, axiom (A1) takes 
the value 1. For the independence of axiom (A2), Dr Roy devised the 
following four-valued logic, where 0 is the only designated value.
A
B
A
B
A
B
A
B
A
B
A
B
A
B
A
B
A
A
⇒
⇒
⇒
⇒
¬
0
0
0
1
0
0
2
0
0
3
0
0
0
1
0
1
1
1
1
0
2
1
0
3
1
0
1
0
0
2
1
1
2
0
2
2
0
3
2
1
2
0
0
3
1
1
3
0
2
3
0
3
3
0
3
0
		
If A, B, and C take the values 3, 0, and 2, respectively, then axiom (A2) 
is 1. For the independence of axiom (A3), the proof on page 36 works. 
For axiom (A4), replace all universal quantifiers by existential quanti-
fiers. For axiom (A5), change all terms t to x1 and replace all universal 
quantifiers by (∀x1). For axiom (A6), replace all wfs t = s by the negation 
of some fixed theorem. For axiom (A7), consider an interpretation in 
which the interpretation of = is a reflexive nonsymmetric relation.
2.83	
a.	
∀
(
) ∃
(
)
∃
(
)
…
(
) ∧
(
)
(
) ⇒∃
(
)
(
x
y
z
z x y
y
A
x y z
z
B
, , ,
,
, ,
1
3
 (B(z, y, x, …, x) 
∧ z = x))
2.84	
a.	 (
)(
)(
)
( )
( , )
( )
( , )
∃
∀
∃
⇒

⇒
⇒


(
)
z
w
x
A x
A x y
A w
A y z
1
1
1
2
1
1
1
2
2.87	
S has the form (
)(
)(
)
( , )
( )
( )
∃
∃
∀
⇒

⇒
(
)
x
y
z
A x y
A x
A z
1
2
1
1
1
1
. Let the 
domain D be {1, 2}, let A1
2 be <, and let A u
1
1( ) stand for u = 2. Then S  is 
true, but (
)(
)
( , )
∀
∃
x
y A x y
1
2
 is false.
2.88	
Let g be a one–one correspondence between D* and D. Define:
a
a
f
b
b
f
b
b
j
j
j
n
n
j
n
n
( )
=
( )
(
) (
)
…
(
) =
(
)
(
) …
(
)
(
)

∗
∗
M
M
M
M
g
g
g
g
;
,
,
,
,
1
1
1
−



…


(
) …
(
)


;
,
,
,
,


M*
M
if and only if
A
b
b
A
b
b
j
n
n
j
n
n
1
1
g
g

430
Answers to Selected Exercises
2.95	
Hint: Extend K by adding axioms Bn, where Bn asserts that there are at 
least n elements. The new theory has no finite models.
2.96	
(a) Hint: Consider the wfs Bn, where Bn asserts that there are at least 
n elements. Use elimination of quantifiers, treating the Bns as if they 
were atomic wfs.
2.101	 Let W be any set. For each b in W, let ab be an individual constant. Let 
the theory K have as its proper axioms: ab ≠ ac for all b, c in W such that 
b ≠ c, plus the axioms for a total order. K is consistent, since any finite 
subset of its axioms has a model. (Any such finite subset contains only 
a finite number of individual constants. One can define a total order 
on any finite set B by using the one–one correspondence between B 
and a set {1, 2, 3, …, n} and carrying over to B the total order < on 
{1, 2, 3, …, n}.) Since K is consistent, K has a model M by the general-
ized completeness theorem. The domain D of M is totally ordered by 
the relation <M; hence, the subset Dw of D consisting of the objects (ab)M 
is totally ordered by <M. This total ordering of Dw can then be carried 
over to a total ordering of W: b <w c if and only if ab <M ac.
2.103	 Assume M1 is finite and M1 ≡ M2. Let the domain D1 of M1 have n ele-
ments. Then, since the assertion that a model has exactly n elements 
can be written as a sentence, the domain D2 of M2 must also have n 
elements. Let D1 = {b1, …, bn} and D2 = {c1, …, cn}.
Assume M1 and M2 are not isomorphic. Let φ be any one of the 
n! one–one correspondences between D1 and D2. Since φ is not an 
­isomorphism, either: (1) there is an individual constant a and an ele-
ment bj of D1 such that either (i) b
a
j =
M1 ∧ φ (b
a
j) ≠
M2 or (ii) b
a
j ≠
M1 ∧ 
φ(bj) = aM2; or (2) there is a function letter fk
m and b b
b
j
jm
ℓ,
,
,
1 …
 in D1 
such that
	
b
f
b
b
b
f
b
b
k
m
j
j
k
m
j
j
m
m
ℓ
ℓ
= (
)
…
(
)
≠(
)
(
) …
(
)
(
)
M
M
and
1
1
2
1
,
,
(
)
,
,
ϕ
ϕ
ϕ
		
or (3) there is a predicate letter Ak
m and b
b
j
jm
1 ,
,
…
 in D1 such that either
		
i.	
M1
1
A
b
b
k
m
j
jm
,
,
…

 and M2
1
¬A
b
b
k
m
j
jm
ϕ
ϕ
(
) …
(
)


,
,
 or
		
ii.	
M1
1
¬A
b
b
k
m
j
jm
,
,
…

 and M2
1
A
b
b
k
m
j
jm
ϕ
ϕ
(
) …
(
)


,
,
. Construct a 
wf B φ as follows:
	
Bϕ is
if 1 i holds
if 1 ii holds
if
x
a
x
a
x
f
x
x
j
j
k
m
j
jm
=
≠
=
…
( ) ( )
( ) ( )
(
,
,
)
ℓ
1
( )
(
,
,
)
( ) ( )
(
,
,
)
( ) (
2 holds
if 3
i holds
if 3
i
A
x
x
A
x
x
k
m
j
j
k
m
j
j
m
m
1
1
…
¬
…
i holds
)









431
Answers to Selected Exercises
		
Let φ1, …, φn be the one–one correspondences between D1 and D2. Let 
A  be the wf
	
∃
(
) … ∃
(
)
≠
∧
∧
∧… ∧




∧
≤< ≤
x
x
x
x
n
i j n
i
j
n
1
1
1
2
B
B
B
ϕ
ϕ
ϕ
		
Then A  is true for M1 but not for M2.
2.104	 a.	 There are ℵα sentences in the language, of K. Hence, there are 
2ℵα sets of sentences. If M1 ≡ M2 does not hold, then the set of 
sentences true for M1 is different from the set of sentences true 
for M2.
2.105	 Let K* be the theory with ℵγ new symbols bτ and, as axioms, all sen-
tences true for M and all bτ ≠ bρ for τ ≠ ρ. Prove K* consistent and apply 
Corollary 2.34.
2.108	 a.	 Let M be the field of rational numbers and let X = {−1}.
2.110	 Consider the wf (∃x2)x2 < x1.
2.111	 a.	 ii.	
Introduce a new individual constant b and form a new theory 
by adding to the complete diagram of M1 all the sentences 
b ≠ t for all closed terms t of the language of K.
2.112	 If ∅ ∉ F, F  ≠ P (A). Conversely, if ∅ ∈ F, then, by clause (3) of the defini-
tion of filter, F  = P (A).
2.113	 If F  = FB, then ∩C ∈F C = B ∈ F. Conversely, if B = ∩C∈F C ∈ F, then 
F   = F B.
2.114	 Use Exercise 2.113.
2.115	 a.	 A ∈ F, since A = A − ∅.
		
b.	 If B = A − W1 ∈ F  and C = A − W2 ∈ F, where W1 and W2 are finite, 
then B ∩ C = A − (W1 ∪ W2) ∈ F, since W1 ∪ W2 is finite.
		
c.	 If B = A − W ∈ F, where W is finite, and if B ⊆ C, then C = A − 
(W − C) ∈ F, since W − C is finite.
		
d.	 Let B ⊆ C. So, B = A − W, where W is finite. Let b ∈ B. Then W ∪ 
{b} is finite. Hence, C = A − (W ∪ {b}) ∈ F. But, B ⊈ C, since b ∉ C. 
Therefore, F ≠ FB.
2.118	 Let F   ′ = {D|D ⊆ A ∧ (∃C)(C ∈ F ∧ B ∩ C ⊆ D)}.
2.119	 Assume that, for every B ⊆ A, either B ∈ F  or A − B ∈ F. Let G be a 
filter such that F   ⊂ G. Let B ∈ G − F . Then A − B ∈ F . Hence, A − B ∈ G. 
So, ∅ = B ∩ (A − B) ∈ G and G is improper. The converse follows from 
Exercise 2.118.
2.120	 Assume F  is an ultrafilter and B ∉ F, C ∉ F. By Exercise 2.119, A − B 
∈ F and A − C ∈ F. Hence, A − (B ∪ C) = (A − B) ∩ (A − C) ∈ F. Since F 
is proper, B ∪ C ∉ F. Conversely, assume B ∉ F ∧ C ∉ F  ⇒ B ∪ C ∉ F. 

432
Answers to Selected Exercises
Since B ∪ (A − B) = A ∈ F, this implies that, if B ∉ F, then A − B ∈ F. Use 
Exercise 2.119.
2.121	 a.	 Assume FC is a principal ultrafilter. Let a ∈ C and assume C ≠ {a}. 
Then {a} ∉ FC and C − {a} ∉ FC. By Exercise 2.120, C = {a} ∪ (C − {a}) 
∉ FC, which yields a contradiction.
		
b.	 Assume a nonprincipal ultrafilter F   contains a finite set, and let B 
be a finite set in F   of least cardinality. Since F   is nonprincipal, the 
cardinality of B is greater than 1. Let b ∈ B. Then B − {b} ≠ ∅. Both 
{b} and B − {b} are finite sets of lower cardinality than B. Hence, 
{b} ∉ F   and B − {b} ∉ F. By Exercise 2.120, B = {b} ∪ (B − {b}) ∉ F, 
which contradicts the definition of B.
2.124	 Let J be the set of all finite subsets of Γ. For each Δ in J, choose a model 
MΔ of Δ. For Δ in J, let Δ* = {Δ′|Δ′ ∈ J ∧ Δ ⊆ Δ′}. The collection G of all 
Δ*s has the finite-intersection property. By Exercise 2.117, there is a 
proper filter F  ⊇ G. By the ultrafilter theorem, there is an ultrafilter 
F ′ ⊇ F  ⊇ G. Consider 
M /
∆
∆∈
∏
′
J
F . Let B ∈ Γ. Then {B}* ∈ G ⊆ F ′. 
Therefore, {
}
|
B
G
B
F
* ⊆
∈
∧
{
}∈
′
∆∆
∆
M
. By Loś’s theorem, B is true 
in 
M /
∆
∆∈
∏
′
J
F .
2.125	 a.	 Assume W    is closed under elementary equivalence and ultraprod-
ucts. Let Δ be the set of all sentences of L that are true in every 
interpretation in W. Let M be any model of Δ. We must show that 
M is in W.  Let Γ be the set of all sentences true for M. Let J be the 
set of finite subsets of Γ. For Γ′ = {B1, …, Bn} ∈ J, choose an interpre-
tation NΓ′ in W   such that B1 ∧ … ∧ Bn is true in NΓ′. (If there were 
no such interpretation, ¬(B1 ∧ … ∧ Bn), though false in M, would 
be in Δ.) As in Exercise 2.124, there is an ultrafilter F′ such that 
N
N /
* =
′
′
′∈
∏
Γ
Γ
J
F  is a model of Γ. Now, N* ∈ W. Moreover, M ≡ 
N*. Hence, M ∈ W.
		
b.	 Use (a) and Exercise 2.59.
		
c.	 Let W   be the class of all fields of characteristic 0. Let F   be a nonprin-
cipal ultrafilter on the set P of primes, and consider M
/ .
=
∈∏
p P
P
Z
F  
Apply (b).
2.126	 R# ⊆ R*. Hence, the cardinality of R* is ≥ 2ℵ0. On the other hand, Rω 
is equinumerous with 2ω and, therefore, has cardinality 2ℵ0. But the 
­cardinality of R* is at most that of Rω.
2.127	 Assume x and y are infinitesimals. Let ε be any positive real. Then 
|x| < ε/2 and |y| < ε/2. So, |x + y| ≤ |x| + |y|<ε/2 + ε/2 = ε; |xy| = 
|x||y|<1 ⋅ ε = ε; |x − y| ≤ |x| + |−y|<ε/2 + ε/2 = ε.
2.128	 Assume | x| < r1 and |y| < ε for all positive real ε. Let ε be a posi-
tive real. Then ε/r1 is a positive real. Hence | y| < ε/r1, and so, |xy| = 
|x|| y|< r1(ε/r1) = ε.

433
Answers to Selected Exercises
2.130	 Assume x − r1 and x − r2 are infinitesimals, with r1 and r2 real. Then 
(x − r1) − (x − r2) = r2 − r1 is infinitesimal and real. Hence, r2 − r1 = 0.
2.131	 a.	 x − st(x) and y − st(y) are infinitesimals. Hence, their sum (x + y) − 
(st(x) + st(y)) is an infinitesimal. Since st(x) + st(y) is real, st(x) + 
st(y) = st(x + y) by Exercise 2.130.
2.132	 a.	 By Proposition 2.45, s*(n) ≈ c1 and u*(n) ≈ c2 for all n ∈ ω* − ω. 
Hence, s * (n) + u*(n) ≈ c1 + c2 for all n ∈ ω* − ω. But s*(n) + u*(n) = 
(s + u)*(n). Apply Proposition 2.45.
2.133	 Assume f continuous at c. Take any positive real ε. Then there is a 
positive real δ such that (∀x)(x ∈ B ∧ |x − c|< δ ⇒ |f(x) − f(c) |< ε) 
holds in R. Therefore, (∀x)(x ∈ B* ∧ |x − c|< δ ⇒ |f*(x) − f(c) |< ε) holds 
in R *. So, if x ∈ B* and x ≈ c, then |x − c| < δ and, therefore, |f*(x) − 
f(c)|< ε. Since ε was arbitrary, f*(x) ≈ f(c). Conversely, assume x ∈ B* ∧ 
x ≈ c ⇒ f*(x) ≈ f(c). Take any positive real ε. Let δ0 be a positive infini-
tesimal. Then (∀x)(x ∈ B* ∧ |x − c| < δ0 ⇒ |f*(x) − f(c) | < ε) holds for 
R  *. Hence, (∃δ)(δ > 0 ∧ (∀x)(x ∈ B* ∧ |x − c| < δ ⇒ |f′(x) − f(c) |< ε)) holds 
for R  *, and so, (∃δ)(δ > 0 ∧ (∀x)(x ∈ B ∧ |x − c| < δ ⇒ |f(x) − f(c) |< ε)) 
holds in R.
2.134	 a.	 Since x ∈ B* ∧ x ≈ C ⇒ (f*(x) ≈ f(c) ∧ g*(x) ≈ g(c)) by Proposition 2.46, 
we can conclude x ∈ B* ∧ x ≈ c ⇒ (f + g)*(x) ≈ (f + g)(c), and so, by 
Proposition 2.46, f + g is continuous at c.
2.139	 a.	 i.	
¬
∀
∨
(
) ⇒
∀
(
)∨∀


(
)
( )
( )
(
)
( )
(
)
( )
x
A x
A x
x A x
x A x
1
1
2
1
1
1
2
1
		
	
ii.	
(
)
( )
( )
∀
∨
(
)
x
A x
A x
1
1
2
1
	
(i)
		
	
iii.	
¬
∀
(
)∨∀


(
)
( )
(
)
( )
x A x
x A x
1
1
2
1
	
(i)
		
	
iv.	
¬ ∀
(
)
( )
x A x
1
1
	
(iii)
		
	
v.	
¬ ∀
(
)
( )
x A x
2
1
	
(iii)
		
	
vi.	
(
)
( )
∃
¬
x
A x
1
1
	
(iv)
		
	
vii.	
(
)
( )
∃
¬
x
A x
2
1
	
(v)
		
	
viii.	 ¬A b
1
1( ) 	
(vi)
		
	
ix.	
¬A c
2
1( )	
(vii)
		
	
x.
	
A b
A b
1
1
2
1
( )
( )
∨
↙
↘
	
(ii)
		
	
xi.	
A b
A b
1
1
2
1
( )
( )	
(x)
		
	
xii.
	
×
∨
A c
A c
1
1
2
1
( )
( )
↙
↘	
(ii)
		
	
xiii.
	
A c
A c
1
1
2
1
( )
( )
×
	
(xii)

434
Answers to Selected Exercises
		
	
No further rules are applicable and there is an unclosed branch. 
Let the model M have domain {b, c}, let A1
1
(
)
M hold only for c, 
and let A2
1
(
)
M hold for only b. Then, (
)
( )
( )
∀
∨
(
)
x
A x
A x
1
1
2
1
 is true 
for M, but (
)
( )
∀x A x
1
1
 and (
)
( )
∀x A x
2
1
 are both false for M. Hence, 
(
)
( )
( )
(
)
( )
(
)
( )
∀
∨
(
) ⇒
∀
(
)∨∀
x
A x
A x
x A x
x A x
1
1
2
1
1
1
2
1
 is not logically 
valid.
Chapter 3
3.4	
Consider the interpretation that has as its domain the set of polynomi-
als with integral coefficients such that the leading coefficient is non-
negative. The usual operations of addition and multiplication are the 
interpretations of + and ·. Verify that (S1)–(S8) hold but that Proposition 
3.11 is false (substituting the polynomial x for x and 2 for y).
3.5	
a.	 Form a new theory S′ by adding to S a new individual constant b 
and the axioms b
b
b
b
n
≠
≠
≠
…
≠
…
0
1
2
,
,
,
,
,
 Show that S′ is con-
sistent, and apply Proposition 2.26 and Corollary 2.34(c).
		
b.	 By a cortège let us mean any denumerable sequence of 0s and 1s. 
There are 2ℵ0 cortèges. An element c of a denumerable model M of 
S determines a cortège (s0, s1, s2, …) as follows: si = 0 if ⊧M pi|c, and 
si = 1 if ⊧M ¬(pi|c). Consider now any cortège s. Add a new constant 
b to S, together with the axioms Bi(b), where Bi(b) is pi|b if si = 0 and 
Bi(b) is ¬(pi|b) if si = 1. This theory is consistent and, therefore, has 
a denumerable model Ms, in which the interpretation of b deter-
mines the cortège s. Thus, each of the 2ℵ0 cortèges is determined 
by an element of some denumerable model. Every denumer-
able model determines denumerably many cortèges. Therefore, 
if a maximal collection of mutually nonisomorphic denumerable 
models had cardinality m < 2ℵ0, then the total number of cortèges 
represented in all denumerable models would be  ≤ m × ℵ0 < 2ℵ0. 
(We use the fact that the elements of a denumerable model deter-
mine the same cortèges as the elements of an isomorphic model.)
3.6	
Let (D, 0, ′) be one model of Peano’s postulates, with 0 ∈ D and ′ the 
successor operation, and let (D#, 0#,*) be another such model. For 
each x in D, by an x-mapping we mean a function f from Sx = {u|u ∈ 
D ∧ u ≤ x} into D# such that f(0) = 0# and f(u′) = (f(u)) * for all u < x. 
Show by induction that, for every x in D, there is a unique x-mapping 
(which will be denoted fx). It is easy to see that, if x1 < x2, then the 
restriction of fx2 to Sx1 must be fx1. Define F(x) = fx(x) for all x in D. Then 
F is a function from D into D# such that F(0) = 0# and F(x′) = (F(x))* 

435
Answers to Selected Exercises
for all x in D. It is easy to prove that F is one–one. (If not, a contra-
diction results when we consider the least x in D for which there is 
some y in D such that x ≠ y and F(x) = F(y).) To see that F is an iso-
morphism, it only remains to show that the range of F is D#. If not, 
let z be the least element of D# not in the range of F. Clearly, z ≠ 0#. 
Hence, z = w* for some w. Then w is in the range of F, and so w = F(u) 
for some u in D. Therefore, F(u′) = (F(u))* = w* = z, contradicting the 
fact that z is not in the range of F.
The reason why this proof does not work for models of first-order 
number theory S is that the proof uses mathematical induction and 
the least-number principle several times, and these uses involve prop-
erties that cannot be formulated within the language of S. Since the 
validity of mathematical induction and the least-number principle in 
models of S is guaranteed to hold, by virtue of axiom (S9), only for wfs 
of S, the categoricity proof is not applicable. For example, in a nonstan-
dard model for S, the property of being the interpretation of one of the 
standard integers 0 1 2 3
, , , , … is not expressible by a wf of S. If it were, 
then, by axiom (S9), one could prove that 0 1 2 3
, , , , …
{
} constitutes the 
whole model.
3.7	
Use a reduction procedure similar to that given for the theory K2 on 
pages 114–115. For any number k, define k · t by induction: 0 · t is 0 and 
(k + 1) · t is (k · t) + t; thus, k · t is the sum of t taken k times. Also, for any 
given k, let t ≡ s(mod k) stand for (∃x)(t = s + k · x ∨ s = t + k · x). In the 
reduction procedure, consider all such wfs t ≡ s(mod k), as well as the 
wfs t < s, as atomic wfs, although they actually are not. Given any wfs 
of S+, we may assume by Proposition 2.30 that it is in prenex normal 
form. Describe a method that, given a wf (∃y)C, where C contains no 
quantifiers (remembering the convention that t ≡ s(mod k) and t < s are 
considered atomic), finds an equivalent wf without quantifiers (again 
remembering our convention). For help on details, see Hilbert and 
Bernays (1934, I, pp. 359–366).
3.8	
b.	 Use part (a) and Proposition 3.6(a)(i).
		
c.	 Use part (b) and Lemma 1.12.
3.13	
Assume f(x1, …, xn) = xn+1 is expressible in S by B(x1, …, xn+1). Let 
C  (x1, …, xn+1) be B(x1, …, xn+1) ∧ (∀z)(z < xn+1 ⇒ ¬B(x1, …, xn+1)). Show 
that C  represents f (x1, …, xn) in S. [Use Proposition 3.8(b).] Assume, 
conversely, that f (x1, …, xn) is representable in S by A (x1, …, xn+1). Show 
that the same wf expresses f (x1, …, xn = xn+1 in S.
3.16	
a.	 (∃y)u<y<vR(x1, …, xn, y) is equivalent to (
)
(
,
,
,
),
(
)
∃
…
+
+
< −
+
z
x
x
z
u
z v
u
n

1
1
1
R
 
and similarly for the other cases.
3.18	
If the relation R(x1, …, xn, y): f(x1, …, xn) = y is recursive, then CR is recur-
sive and, therefore, so is f(x1, …, xn) = μy(CR(x1, …, xn, y) = 0). Conversely, 
if f (x1, …, xn) is recursive, CR(x1, …, xn, y) = sg|f(x1, …, xn) − y | is recursive.

436
Answers to Selected Exercises
3.19
	
n
y
y
n
n
C
y
y n
y n

=
>
(
)
=
(
)
≤+
≤
∏
∑
δ µ
1
2
(
)
( )
( )
sg
Pr
3.20	
[
]
(
!
!
!)
ne
n
n
=
+ +
+
+
+




1
1
1
2
1
3
1

, since n
n
n
n
1
1
1
2
1
(
)!
(
)!
!.
+
+
+
+



<

 
Let 1
1
1
2
1
+ +
+
+
=
!
!
( )
! .

n
g n
n
 Then g(0) = 1 and g(n + 1) = 
(n + 1)g(n) + 1. Hence, g is primitive recursive. Therefore, so is 
[
]
( )
!
( !,
( )).
ne
ng n
n
n ng n
= 


= qt
3.21	
RP(y, z) stands for (∀x)x≤y+z(x|y ∧ x|z ⇒ x = 1).
	
ϕ( )
( , )
n
C
y n
y n
=
(
)
≤∑sg
RP
3.22	
Z
Z y
U
y Z y
( )
, (
)
, ( )
0
0
1
2
2
=
+
=
(
) .
3.23	
Let v = (p0p1 … pk) + 1. Some prime q is a divisor of v. Hence, q ≤ v. But 
q is different from p0, p1, …, pk. If q = pj, then pj|v and pj|p0 p1 … pk would 
imply that pj|1 and, therefore, pj = 1. Thus, pk+1 ≤ q ≤ (p0 p1…pk) + 1.
3.26	
If Goldbach’s conjecture is true, h is the constant function 2. If 
Goldbach’s conjecture is false, h is the constant function 1. In either 
case, h is primitive recursive.
3.28	
List the recursive functions step by step in the following way. In the 
first step, start with the finite list consisting of Z(x), N(x), and U x
1
1( ) . At 
the (n + 1)th step, make one application of substitution, recursion and 
the μ-operator to all appropriate sequences of functions already in the 
list after the nth step, and then add the n + 1 functions U
x
x
j
n
n
+
+
…
1
1
1
(
,
,
) 
to the list. Every recursive function eventually appears in the list.
3.29	
Assume fx(y) is primitive recursive (or recursive). Then so is fx(x) + 1. 
Hence, fx(x) + 1 is equal to fk(x) for some k. Therefore, fk(x) = fx(x) + 1 for 
all x and, in particular, fk(k) = fk(k) + 1.
3.30	
a.	 Let d be the least positive integer in the set Y of integers of the form 
au + bv, where u and v are arbitrary integers—say, d = au0 + bv0. 
Then d|a and d|b. (To see this for a, let a = qd + r, where 0 ≤ r < d. 
Then r = a − qd = a − q(au0 + bv0) = (1 − qu0)a + (− qv0)b ∈ Y. Since d 
is the least positive integer in Y and r < d, r must be 0. Hence d|a.) 

437
Answers to Selected Exercises
If a and b are relatively prime, then d = 1. Hence, 1 = au0 + bv0. 
Therefore, au0 ≡ 1 (mod b).
3.32	
a.	 1944 = 2335. Hence, 1944 is the Gödel number of the expression ().
		
b.	 49 = 1 + 8(2131). Hence, 49 is the Gödel number of the function 
­letter f1
1.
3.34	
a.	 g f1
1
49
(
) =
 and ɡ(a1) = 15. So, g f
a
1
1
1
49
3
15
5
2 3 5 7
(
)
(
) =
.
3.37	
Take as a normal model for RR, but not for S, the set of polynomials 
with integral coefficients such that the leading coefficient is nonnega-
tive. Note that (∀x)(∃y)(x = y + y ∨ x = y + y + 1) is false in this model 
but is provable in S.
3.38	 Let ∞ be an object that is not a natural number. Let ∞′ = ∞, ∞ + 
x = x + ∞ = ∞ for all natural numbers x, ∞ · 0 = 0 · ∞ = 0, and ∞ · x = x · 
∞ = ∞ for all x ≠ 0.
3.41	
Assume S is consistent. By Proposition 3.37(a), G is not provable in S. 
Hence, by Lemma 2.12, the theory Sg is consistent. Now, ¬G  is equiva-
lent to (∃x2)Pf (x2, ⌜G⌝). Since there is no proof of G in S, Pf (k, q) is false for 
all natural numbers k, where q = ⌜G⌝. Hence, ⊢s ¬Pf (k q
, ) for all natural 
numbers k. Therefore, ⊢sg ¬
k q
Pf
,
(
). But, sg ∃
(
)
(
)
x
x
q
2
2
Pf
,
. Thus Sg is 
ω-inconsistent.
3.45	
(G. Kreisel, Mathematical Reviews, 1955, Vol. 16, p. 103) Let B(x1) be a 
wf of S that is the arithmetization of the following: x1 is the Gödel 
number of a closed wf B such that the theory S + {B} is ω-inconsistent. 
(The latter says that there is a wf E(x) such that, for every n, E n
( ) is 
provable in S + {B}, and such that (∃x)¬E (x) is provable in S + {B}.) By 
the fixed-point theorem, let C be a closed wf such that ⊢S C ⇔ B(⌜C⌝). 
Let K = S + {C}. (1) C is false in the standard model. (Assume C true. 
Then K is a true theory. But, C ⇔ B (⌜C⌝)) is true, since it is provable 
in S. So, B (⌜C⌝) is true. Hence, K is ω-inconsistent and, therefore, K is 
not true, which yields a contradiction.) (2) K is ω-consistent. (Assume 
K ω-inconsistent. Then B (⌜C⌝) is true and, therefore, C is true, contra-
dicting (1).)
3.46	
a.	 Assume the “function” form of Church’s thesis and let A be an 
effectively decidable set of natural numbers. Then the characteris-
tic function CA is effectively computable and, therefore, recursive. 
Hence, by definition, A is a recursive set.
		
b.	 Assume the “set” form of Church’s thesis and let f (x1, …, xn) be any 
effectively computable function. Then the relation f (x1, …, xn) = y 
is effectively decidable. Using the functions σ
σ
k
i
k
,
 of pages 184–185 
let A be the set of all z such that f
z
z
z
n
n
n
n
n
σ
σ
σ
1
1
1
1
1
+
+
+
+
…
(
) =
( ),
,
( )
( ). 
Then A is an effectively decidable set and, therefore, recursive. 
Hence, f x
x
z C
z
n
n
n
A
(
,
,
)
( )
1
1
1
0
…
=
=
(
)
(
)
+
+
σ
µ
 is recursive.

438
Answers to Selected Exercises
3.48	
Let K be the extension of S that has as proper axioms all wfs that are 
true in the standard model. If Tr were recursive, then, by Proposition 
3.38, K would have an undecidable sentence, which is impossible.
3.49	
Use Corollary 3.39.
3.50	
Let f (x1, …, xn) be a recursive function. So, f (x1, …, xn) = y is a recursive 
relation, expressible in K by a wf A (x1, …, xn, y). Then f is representable 
by A (x1, …, xn, y) ∧ (∀z)(z < y ⇒ ¬A (x1, …, xn, z)), where z < y stands for 
z ≤ y ∧ z ≠ y.
3.53	
a.	 ⊢ 0 = 1 ⇒ G. Hence, ⊢ Bew(⌜
⌝
0
1
=
) ⇒ Bew(⌜G⌝) and, therefore, 
⊢¬Bew(⌜G⌝) ⇒ ¬Bew(⌜
⌝
0
1
=
). Thus, ⊢G ⇒ ¬Bew(⌜
⌝
0
1
=
).
		
b.	 ⊢ Bew(⌜G ⌝) ⇒ Bew(⌜Bew(⌜G ⌝) ⌝). Also, ⊢ ¬G ⇔ Bew(⌜G ⌝), and so, 
⊢ Bew(⌜¬G ⌝) ⇔ Bew(⌜Bew(⌜G ⌝) ⌝). Hence ⊢ Bew(⌜G ⌝) ⇒ Bew(⌜¬G ⌝). By 
a tautology, ⊢ G ⇒ (¬G ⇒ (G ∧ ¬G)); hence, ⊢ Bew(⌜G ⌝) ⇒ Bew(⌜¬G ⇒ 
(G ∧ ¬G)⌝). Therefore, ⊢ Bew(⌜G ⌝) ⇒ (Bew(⌜¬G ⌝) ⇒ Bew(⌜(G ∧ ¬G)⌝)). It 
follows that ⊢ Bew(⌜G ⌝) ⇒ Bew(⌜(G ∧ ¬G)⌝). But, ⊢G
G
∧
⇒
=
¬
0
1; so, 
⊢ Bew(⌜(G ∧ ¬G)⌝) ⇒ Bew(⌜
⌝
0
1
=
). Thus, ⊢ Bew(⌜G ⌝) ⇒ Bew(⌜
⌝
0
1
=
), 
and ⊢ ¬Bew(⌜
⌝
0
1
=
) ⇒ ¬Bew(⌜G ⌝). Hence, ⊢ ⌜Bew(⌜
⌝
0
1
=
) ⇒ G.
3.56	
If a theory K is recursively decidable, the set of Gödel numbers of the-
orems of K is recursive. Taking the theorems of K as axioms, we obtain 
a recursive axiomatization.
3.58	
Assume there is a recursive set C such that TK ⊆ C and RefK ⊆C;. Let 
C be expressible in K by A (x). Let F, with Gödel number k, be a fixed 
point for ¬A (x). Then, ⊢K F  ⇔ ¬A (k). Since A (x) expresses C in K, 
⊢K A (k) or ⊢K ¬A (k).
		
a.	 If ⊢K A (k), then ⊢K ¬F. Therefore, k
C
∈
⊆
RefK
. Hence, ⊢K ¬A ( k ), 
contradicting the consistency of K.
		
b.	 If ⊢K ¬A (k ), then ⊢K F.   So, k ∈ TK ⊆ C and therefore, ⊢K A (k), con-
tradicting the consistency of K.
3.60	
Let K2 be the theory whose axioms are those wfs of K1 that are prov-
able in K*. The theorems of K2 are the axioms of K2. Hence, x
T
∈
K2 if 
and only if FmlK
K
1( )
x
x
T
∧
∈
∗. So, if K* were recursively decidable—
that is, if TK∗ were recursive—TK2 would be recursive. Since K2 is a con-
sistent extension of K1, this would contradict the essential recursive 
undecidability of K1.
3.61	
a.	 Compare the proof of Proposition 2.28.
		
b.	 By part (a), K* is consistent. Hence, by Exercise 3.60, K* is essentially 
recursively undecidable. So, by (a), K is recursively undecidable.
3.62	
b.	 Take (
)
( )
∀
⇔
=
(
)
x
A x
x
x
j
1
 as a possible definition of Aj
1.
3.63	
Use Exercises 3.61(b) and 3.62.
3.64	
Use Corollary 3.46, Exercise 3.63, and Proposition 3.47.

439
Answers to Selected Exercises
Chapter 4
4.12	
(s) Assume u ∈ x × y. Then u = 〈v, w〉 = {{v}, {v, w}} for some v in x and w 
in y. Then v ∈ x ∪ y and w ∈ x ∪ y. So, {v} ∈ P (x ∪ y) and {v, w} ∈ P (x ∪ y). 
Hence, {{v}, {v, w}} ∈ P(P(x ∪ y)).
		
(t) X ⊆ Y ∨ Y ⊆ X
4.15	
a.	 D(x)⊆ ∪ ( ∪ x) and R(x)⊆ ∪ ( ∪ x). Apply Corollary 4.6(b).
		
b.	 Use Exercises 4.12(s), 4.13(b), axiom W, and Corollary 4.6(b).
		
c.	 If Rel(Y), then Y ⊆ D(Y) × R(Y). Use part (b) and Corollary 4.6(b).
4.18	
Let X = {〈y1, y2〉|y1 = y2 ∧ y1 ∈ Y}; that is, X is the class of all ordered 
pairs 〈u, u〉 with u ∈ Y. Clearly, Fnc(X) and, for any set x, (∃v)(〈v, u〉 ∈ X 
∧ v ∈ x) ⇔ u ∈ Y ∩ x. So, by axiom R, M(Y ∩ x)
4.19	
Assume Fnc(Y). Then Fnc(x  Y) and D(x  Y) ⊆ x. By axiom R, M (Y″x).
4.22	
a.	 Let ∅ be the class {u|u ≠ u}. Assume M(X). Then ∅ ⊆ X. So, ∅ = ∅ ∩ X. 
By axiom S, M (∅).
4.23	 Assume M(V). Let Y = {x|x ∉ x}. It was proved above that ¬M(Y). But 
Y ⊆ V. Hence, by Corollary 4.6(b), ¬M(V).
4.27	
b.	 grandparent and uncle
4.30	
c.	 Let u be the least ∈-element of X − Z.
4.33	
a.	 By Proposition 4.11(a), Trans(ω). By Proposition 4.11(b) and 
Proposition 4.8(j), ω ∈ On. If ω ∈ K1 then ω ∈ ω, contradicting 
Proposition 4.8(a). Hence, ω ∉ K1.
4.39	
Let X1 = X × {∅} and Y1 = Y × {1}.
4.40	
For any u ⊆ y, let the characteristic function Cu be the function with 
domain y such that ′
= ∅
C w
u
 if w ∈ u and ′
=
C w
u
1 if w ∈ y − u. Let F be 
the function with domain P (y) such that F′u = Cu for u ∈ P (y). Then 
P
x
F
y
( )≅
≅
2
4.41	
a.	 For any set u, D (u) is a set by Exercise 4.15(a).
		
b.	 If u ∈ xy, then u ⊆ y × x. So, xy ⊆  P  (y × x).
4.42	
a.	 ∅ is the only function with domain ∅.
		
c.	 If D (u) ≠ ∅, then R (u) ≠ ∅.
4.43	
Define a function F with domain X such that, for any x0 in X, F(x0) is 
the function ɡ in X{u} such that ɡ′u = x0. Then X
X
F
u
≅
{ } .
4.44	 Assume X
Y
F≅
 and Z W
G≅
. If ¬M(W), then ¬M(Z) and XZ = YW = ∅ 
by Exercise 4.41(a). Hence, we may assume M(W) and M(Z). Define 
a function Φ on XZ as follows: if f ∈ XZ, let Φ ′f = F ⚬ f ⚬ G−1. Then 
X
Y
Z
W
≅
Φ
.

440
Answers to Selected Exercises
4.45	
If X or Y is not a set, then ZX∪Y and ZX × ZY are both ∅. We may assume 
then that X and Y are sets. Define a function Φ with domain ZX∪Y as 
follows: if f ∈ ZX∪Y, let Φ ′f = 〈X  f, Y  f〉. Then Z
Z
Z
X
Y
X
Y
∪≅
×
Φ
.
4.46	
Define a function F with domain (xy)z as follows: for any f in (xy)z, let F′f 
be the function in xy×z such that (F′f)′〈u, v〉 = (f′v)′u for all 〈u, v〉 ∈ y × z. 
Then (
)
x
x
y z
F
y z
≅
× .
4.47	
If  ¬ M(Z),(X × Y)Z = ∅ = ∅ × ∅ = XZ × YZ. Assume then that M(Z). 
Define a function F:XZ × YZ → (X × Y)Z as follows: for any f ∈ XZ, ɡ ∈ 
YZ, (F′〈f, ɡ〉)′z = 〈f′z, ɡ′z〉 for all z in Z. Then X
Y
X
Y
Z
Z
F
Z
×
≅
×
(
) .
4.48	
This is a direct consequence of Proposition 4.19.
4.54	
b.	 Use Bernstein’s theorem (Proposition 4.23(d)).
		
c.	 Use Proposition 4.23(c, d).
4.55	
Define a function F from V into 2c as follows: F‘u = {u, ∅} if u ≠ ∅; F′∅ = 
{1, 2}. Since, F is one-one, V ≼ 2c. Hence, by Exercises 4.23 and 4.50, ¬M(2c).
4.56	
(h) Use Exercise 4.45.
		
i.	
2x≼2x + cx≼2x + c2x = 2x × 2 ≅ 2x × 21 ≅ 2X + 
c
1 ≅ 2x.
		
Hence, by Bernstein’s Theorem, 2x +cx ≅ 2x.
4.59	
Under the assumption of the axiom of infinity, ω is a set such that (∃u)(u ∈ 
ω) ∧ (∀y)(y ∈ ω ⇒ (∃z)(z ∈ ω ∧ y ⊂ z)). Conversely, assume (*) and let b be a 
set such that (i) (∃u)(u ∈ b) and (ii) (∀y)(y ∈ b ⇒ (∃z)(z ∈ b ∧ y ⊂ z)). Let 
d = {u|(∃z)(z ∈ b ∧ u ⊆ z)}. Since d ⊆ P  ( ⋃ (b), d is a set. Define a relation 
R = {〈n, v〉|n ∈ ω ∧ v = {u|u ∈ d ∧ u ≅ n}}. Thus, 〈n, v〉 ∈ R is and only 
if n ∈ ω and v consists of all elements of d that are equinumerous with n. 
R is a one–one function with domain ω and range a subset of P (d). Hence, 
by the replacement axiom applied to R−1, ω is a set and, therefore, axiom I 
holds.
4.62	
a.	 Induction on α in (∀x)(x ≅ α ∧ α ∈ ω ⇒ Fin(P(x))).
		
b.	 Induction on α in (∀ x)(x ≅ α ∧ α ∈ ω ∧ (∀ y)(y ∈ x ⇒ Fin(y)) ⇒ Fin(⋃ x)).
		
c.	 Use Proposition 4.27(a).
		
d.	 x ⊆ P  (⋃ x) and y ∈ x ⇒ y ⊆ ⋃ x.
		
e.	 Induction on α in (∀x)(x ≅ α ∧ α ∈ ω ⇒ (x ≼ y ∨ y ≼ x))
		
g.	 Induction on α in (∀x)(x ≅ α ∧ α ∈ ω ∧ Inf(Y) ⇒ x ≼ y)
		
h.	 Use Proposition 4.26(c).
		
j.	
xy ⊆ P (y × x)
4.63	
Let Z be a set such that every non-empty set of subsets of Z has a mini-
mal element. Assume Inf(Z). Let Y be the set of all infinite subsets of Z. 
Then Y is a non-empty set of subsets of Z without a minimal element. 
Conversely, prove by induction that, for all α in ω, any non-empty sub-
set of P (α) has a minimal element. The result then carries over to non-
empty subsets of P (z), where z is any finite set.

441
Answers to Selected Exercises
4.64	
a.	 Induction on α in (∀x)(x ≅ α ∧ α ∈ ω ∧ Den(y) ⇒ Den(x ∪ y)).
		
b.	 Induction on α in (∀ x)(x ≅ α ∧ x ≠ ∅ ∧ Den(y)⇒Den(x × y))
		
c.	 Assume z ⊆ x and Den(z). Let z
f≅ω. Define a function g on x as fol-
lows: g′u = u if u
x
z g u
f
f u
∈
= (
) (
)
(
)
−
′
′
′
′
;
⌣
 if u ∈ z. Assume x is 
Dedekind-infinite. Assume z ⊂ x and x
z
f≅. Let v ∈ x − z. Define a 
function h on ω such that h′∅ = v and h‘(α‘) = f‘(h‘α) if α ∈ ω. Then h 
is one–one. So, Den (h′′ω) and h′′ω ⊆ x.
		
f.	
Assume y ∉ x. (i) Assume x ∪ {y} ≅ x. Define by induction a function g 
on ω such that ɡ′∅ = y and ɡ′(n + 1) = f′(ɡ′n). ɡ is a one–one func-
tion from ω into x. Hence, x contains a denumerable subset and, by 
part (c), x is Dedekind-infinite. (ii) Assume x is Dedekind-infinite. 
Then, by part (c), there is a denumerable subset z of x. Assume 
z
f≅ω. Let c0 = (f −1)′∅. Define a function F as follows: F′u = u for 
u ∈ x − z; F′c0 = y; F′u = (f −1)′(f′u−1) for u ∈ z − {c0}. Then x
x
y
F≅
∪{ }. 
If z is {c0, c1, c2, …}, F takes ci+1 into ci and moves c0 into y.
		
g.	 Assume ω ≼ x. By part (c), x is Dedekind-infinite. Choose y ∉ x. By 
part (f), x ≅ x ∪ {y}. Hence, x +c 1 = (x × {∅}) ∪ {〈∅, 1〉} ≅ x ∪ {y} ≅ x.
4.65	
Assume M is a model of NBG with denumerable domain D. Let d be 
the element of D satisfying the wf x = 2ω. Hence, d satisfies the wf ¬(x ≅ ω). 
This means that there is no object in D that satisfies the condition of 
being a one–one correspondence between d and ω. Since D is denu-
merable, there is a one–one correspondence between the set of “ele-
ments” of d (that is, the set of objects c in D such that ⊧M c ∈ d) and the 
set of natural numbers. However, no such one–one correspondence 
exists within M.
4.68	
NBG is finitely axiomatizable and has only the binary predicate letter 
A2
2. The argument on pages 273–274 shows that NBG is recursively 
undecidable. Hence, by Proposition 3.49, the predicate calculus with 
A2
2 as its only non-logical constant is recursively undecidable.
4.69	
a.	 Assume x ≼ ωα. If 2 ≼ x, then, by Propositions 4.37(b) and 4.40, 
ωα ≼ x ∪ ωα ≼ x × ωα ≼ ωα × ωα ≅ ωα. If x contains one element, use 
Exercise 4.64(c, f).
		
b.	 Use Corollary 4.41.
4.70	
a.	 P  (ωα ) × P  (ωα ) ≅ 2ωα × 2ωα ≅ 2ωα +cωα ≅ 2ωα ≅ P(ωα)
		
b.	
P
P
ω
ω
α
ω
ω
ω
α
α
α
α
(
)
(
) ≅(
) ≅
≅
≅
(
)
×
x
x
x
2
2
2
4.71	
a.	 If y were non-empty and finite, y ≅ y +c y would contradict Exercise 
4.62(b).
		
b.	 By part (c), let y = u ∪ v, u ∩ v = ∅, u ≅ y, v ≅ y. Let y
v
f≅. Define a func-
tion ɡ on P(y) as follows: for x ⊆ y, let ɡ′x = u ∪ (f″x). Then ɡ′x ⊆ y and 
y ≅ u ≼ ɡ′x ≼ y. Hence, ɡ′x ≅ y. So, ɡ is a one–one function from P  (y) 
into A = {z|z ⊆ y ∧ z ≅ y}. Thus, P (y) ≼ A. Since A ⊆ P (y), A ≼ P  (y).

442
Answers to Selected Exercises
		
e.	 Use part (d): {z|z ⊆ y ∧ z ≅ y} ⊆ {z|z ⊆ y ∧ Inf(z)}.
		
f.	
By part (c), let y = u ∪ v, u ∩ v = ∅, u ≅ y, v ≅ y. Let u ≅ fv. Define f 
on y as follows: f′x = h′x if x ∈ u and f′x = (h−1)′x if x ∈ v.
4.72	
a.	 Use Proposition 4.37(b).
		
b.	 i.	 Perm y
y
y
y
y
y
y y
y
( ) ⊆
(
) ≅
≅
≅
( )
×
⪯2
2
2
P
.
		
	
ii.	 By part (a), we may use Exercise 4.7 (c). Let y = u ∪ v, u ∩ v = 
∅, u ≅ y, v ≅ y. Let u
v
H≅
 and y
u
G≅. Define a function F: P(y) → 
Perm(y) in the following way: assume z ∈ P(y). Let ψz: y → y be 
defined as follows: ψz′x = H′x if x ∈ G″z; ψz′x = (H−1′x if (H−1′x ∈ 
G″z;  ψz′x = x otherwise. Then ψz ∈ Perm(y). Let F′z = ψz. F is 
one–one. Hence, P(y) ≼ Perm(y).
4.73	
a.	 Use WO and Proposition 4.19.
		
b.	 The proof of Zorn ⇒ WO in Proposition 4.42 uses only this special 
case of Zorn’s Lemma.
		
c.	 To prove the Hausdorff maximal principal (HMP) from Zorn, 
consider some ⊂-chain C0 in x. Let y be the set of all ⊂-chains C 
in x such that C0 ⊆ C and apply part (b) to y. Conversely, assume 
HMP. To prove part (b), assume that the union of each nonempty 
⊂ -chain in a given non-empty set x is also in x. By HMP applied to 
the ⊂ -chain ∅, there is some maximal ⊂ -chain C in x. Then ⋃ (C) 
is an ⊂ -maximal element of x.
		
d.	 Assume the Teichmüller–Tukey lemma (TT). To prove part (b), 
assume that the union of each non-empty ⊂ -chain in a given non-
empty set x is also in x. Let y be the set of all ⊂ -chains in x. y is 
easily seen to be a set of finite character. Therefore, y contains a 
⊂-maximal element C. Then ∪ (C) is a ⊂ -maximal element of x. 
Conversely, let x be any set of finite character. In order to prove TT 
by means of part (b), we must show that, if C is a ⊂ -chain in x, then 
∪ (C) ∈ x. By the finite character of x, it suffices to show that every 
finite subset z of ∪ (C) is in x. Now, since z is finite, z is a subset of 
the union of a finite subset W of C. Since C is a ⊂ -chain, W has a 
⊂-greatest element w ∈ x, and z is a subset of w. Since x is of finite 
character, z ∈ x.
		
e.	 Assume Rel(x). Let u = {z|(∃v)(v ∈ D(x) ∧ z = {v} x}; that is, z ∈ 
u if z is the set of all ordered pairs 〈v, w〉 in x, for some fixed v. 
Apply the multiplicative axiom to u. The resulting choice set 
y ⊆ x is a function with domain D(x). Conversely, the given 
property easily yields the multiplicative axiom. If x is a set of 
disjoint non-empty sets, let r be the set of all ordered pairs 〈u, v〉 
such that u ∈ x and v ∈ u. Hence, there is a function f ⊆ r such 
that D(f) = D(r) = x. The range R(f) is the required choice set 
for x.

443
Answers to Selected Exercises
		
f.	
By trichotomy, either x ≼ y or y ≼ x. If x ≼ y, there is a function with 
domain y and range x. (Assume x
y
y
f≅
⊆
1
.) Take c ∈ x. Define ɡ′u = c 
if u ∈ y − y1, and ɡ′u = (f−1′u  if  u ∈ y1.) Similarly, if y ≼ x, there is 
a function with domain x and range y. Conversely, to prove WO, 
apply the assumption (f) to x and H  ′(P (x)). Note that, if (∃f)(f:u→v ∧ 
R(f) = v), then P (v) ≼ P (u). Therefore, if there were a function f from 
x onto H  ′(P  (x)), we would have H
P
P H
P
P
′
( )
(
)
′
( )
(
)
(
)
( )
x
x
x
≺
≺
 
contradicting the definition of H  ′(P (x)). Hence, there is a function 
from H  ′(P (x)) onto x. Since H  ′(P (x)) is an ordinal, one can define 
a one–one function from x into H  ′(P (x)). Thus x ≺ H  ′(P (x)) and, 
therefore, x can be well-ordered.
4.76	
If < is a partial ordering of x, use Zorn’s lemma to obtain a maximal 
partial ordering <* of x with < ⊆ <*. But a maximal partial ordering 
must be a total ordering. (If u, v were distinct elements of x unrelated 
by <*, we could add to <* all pairs 〈u1, v1〉 such that u1 ≤* u and v ≤* v1. 
The new relation would be a partial ordering properly containing <*.)
4.79	
b.	 Since x × y ≅ x +cy, x × y = a ∪ b with a ∩ b = ∅, a ≅ x, b ≅ y. Let r be 
a well-ordering of y. (i) Assume there exists u in x such that 〈u, v〉 
∈ a for all v in y. Then y ≼ a. Since a ≅ x, y ≼ x, contradicting ¬(y ≼ x). 
Hence, (ii) for any u in x, there exists v in y such that 〈u, v〉 ∈ b. 
Define f: x → b such that f′u = 〈u, v〉, where v is the r-least element 
of y such that 〈u, v〉 ∈ b. Since f is one–one, x ≼ b ≅ y.
		
c.	 Clearly Inf(z) and Inf(x +c z). Then x +c z ≅ (x +c z)2 ≅ x2 +c 2 × 
(x × z) +c z2 ≅ x +c 2 × (x × z) +c z
		
	
Therefore, x × z ≼ 2 × (x × z) ≼ x +c 2 × (x × z) +c z ≅ x +c z. Conversely, 
x +c z ≼ x × z by Proposition 4.37(b).
		
d.	 If AC holds, (∀y)(Inf(y) ⇒ y ≅ y × y) follows from Proposition 4.40 
and Exercise 4.73(a). Conversely, if we assume y ≅ y × y for all 
infinite y, then, by parts (c) and (b), it follows that x ≼ H ′ x for any 
infinite set x. Since H ′x is an ordinal, x can be well-ordered. Thus, 
WO holds.
4.81	
a.	 Let 〈 be a well-ordering of the range of r. Let f′∅ be the 〈-least ele-
ment of R (r), and let f′n be the 〈-least element of those v in R (r) 
such that 〈 f′n, v〉 ∈r.
		
b.	 Assume Den(x) ∧ (∀ u)(u ∈ x ⇒ u ≠ ∅). Let ω≅
g x. Let r be the set of 
all pairs 〈a, b〉 such that a and b are finite sequences 〈v0, v1, …, vn〉 
and 〈v0, v1, …, vn + 1〉 such that, for 0 ≤ i ≤ n + 1, vi ∈ ɡ′i. Since R (r) ⊆ 
D (r), PDC produces a function h: ω → D (r) such that 〈h′n, h′(n′)〉 ∈ r 
for all n in ω. Define the choice function f by taking, for each u in 
x, f′u to be the (ɡ′u) th component of the sequence h′ (ɡ′u).
		
c.	 Assume PDC and Inf(x). Let r consist of all ordered pairs 〈u, u ∪ {a}〉, 
where u ∪ {a} ⊆ x,Fin(u ∪ {a}), and a ∉ u. By PDC, there is a function 

444
Answers to Selected Exercises
f: ω → D(r) such that 〈 f′n,f′(n′)〉 ∈ r for all n in ω. Define g: ω → x 
by setting g′n equal to the unique element of f′(n′) − f′n. Then ɡ is 
one–one, and so, ω ≼ x.
		
d.	 In the proof of Proposition 4.44(b), instead of using the choice 
function h, apply PDC to obtain the function f. As the relation r, 
use the set of all pairs 〈u, v〉 such that u ∈ c, v ∈ c, v ∈ u ∩ X.
4.82	
a.	 Use transfinite induction.
		
d.	 Use induction on β.
		
(e)–(f) Use transfinite induction and part (a).
		
h.	 Assume u ⊆ H. Let v be the set of ranks ρ′x of elements x in u. Let 
β = ∪ v. Then u ⊆ Ψ′ β. Hence u ∈ P (Ψ′β) = Ψ′(β) ⊆ H.
4.83	
Assume X ≠ ∅ ∧  ¬ (∃y)(y ∈ X ∧ y ∩ X = ∅). Choose u ∈ X. Define a 
function ɡ such  that ɡ′ ∅ = u ∩ X, ɡ′(n′) = ∪ (ɡ′n) ∩ X. Let x = ∪ (R(ɡ)). 
Then x ≠ ∅ and (∀ y)(y ∈ x ⇒ y ∩ x ≠ ∅).
4.88	
Hint: Assume that the other axioms of NBG are consistent and that the 
Axiom of Infinity is provable from them. Show that Hω is a model for 
the other axioms but not for the Axiom of Infinity.
4.89	
Use Hω
ω
+°
4.95	
a.	 Let C = {x|¬(∃y)(x ∈ y ∧ y ∈ x)}.
Chapter 5
5.1	
q0|Bq0
		
q0BRq1
		
q1||q0
		
q1BRq2
5.2	
a.	U2
3  b. δ(x)
5.7	
Let a Turing machine F  compute the function f. Replace all occur-
rences of q0 in the quadruples of F  by a new internal state qr. Then 
add the quadruples q0 ai ai qr for all symbols ai of the alphabet of F. 
The Turing machine defined by the enlarged set of quadruples also 
computes the function f.
5.8	
ρ finds the first non-blank square to the right of the initially scanned 
square and then stops; if there is no such square, it keeps moving to 
the right forever. λ’s behavior is similar to that of ρ, except that it moves 
to the left.
5.10	
a. N(x) = x + 1  b. f(x) = 1 for all x  c. 2x

445
Answers to Selected Exercises
5.12	
a.	
(K2)2 1a01
K3C
ra0r
1
0
C
0
1
5.14	
a. The empty function  b. N (x) = x + 1  c. Z(x)
5.16	
If f(a1) = b1, …, f(an) = bn, then
	
f x
y
x
a
y
b
x
a
y
b
n
n
( )
(
)
(
)
=
=
∧
=
∨
∨
=
∧
=


µ
1
1

5.20	
Let ɡ(z, x) = U(μyT1(z, x, y)) and use Corollary 5.11. Let v0 be a number 
such that ɡ(x, x) + 1 = ɡ(v0, x). Then, if ɡ(v0, v0) is defined, ɡ(v0, v0) + 1 = 
ɡ(v0, v0), which is impossible.
5.21	
g x
x
h
x
x
C
x
x
n
n
R
n
1
1
1
1
1
,
,
,
,
,
,
…
(
) =
…
(
)⋅
…
(
)
(
) +
+
sg

	
h x
x
C
x
x
k
n
R
n
k
(
,
,
)
(
,
,
)
1
1
…
⋅
…
(
)
sg
5.22	
a.	 Assume that h(x) is a recursive function such that h(x) = μyT1(x, x, y) 
for every x in the domain of μyT1(x, x, y). Then (∃y)T1(x, x, y) if and 
only if T1(x, x, h(x)). Since T1(x, x, h(x)) is a recursive relation, this 
contradicts Corollary 5.13(a).
		
b.	 Use Exercise 5.21.
		
c.	 Z(μyT1(x, x, y)) is recursively completable, but its domain is {x|(∃y)
T1(x, x, y)}, which, by Corollary 5.13(a), is not recursive.
5.29	
Let T     be a Turing machine with a recursively unsolvable halting prob-
lem. Let ak be a symbol not in the alphabet of T. Let qr be an internal 
state symbol that does not occur in the quadruples of T. For each qi 
of T  and aj of T, if no quadruple of T  begins with qi aj, then add the 
quadruple qi aj ak qr. Call the new Turing machine T*. Then, for any 
initial tape description α of T, T  *, begun on α, prints ak if and only if 
T   is applicable to α. Hence, if the printing problem for T  * and ak were 
recursively solvable, then the halting problem for T  would be recur-
sively solvable.
5.31	
Let T     be a Turing machine with a recursively unsolvable halting prob-
lem. For any initial tape description α for T,   construct a Turing machine 
Tα that does the following: for any initial tape description β, start T  on 
α; if T   stops, erase the result and then start T  on β. It is easy to check 
that T  is applicable to α if and only if Tα has a recursively unsolvable 
halting problem. It is very tedious to show how to construct Tα and to 
prove that the Gödel number of Tα is a recursive function of the Gödel 
number of α.

446
Answers to Selected Exercises
5.33	
Let v0 be the index of a partial recursive function G(x) with non-empty 
domain. If the given decision problem were recursively solvable, so 
would be the decision problem of Example 1 on page 340.
5.34	 By Corollary 5.16, there is a recursive function ɡ(u) such that 
ϕ
µ
g u
x
x
yT u u y
( ) ( ) =
⋅
(
)
1
1
, ,
. Then ϕg u
( )
1
 has an empty domain if and 
only if ¬(∃y)T1(u, u, y). But, ¬(∃y)T1(u, u, y) is not recursive by 
Corollary 5.13(a).
5.39	
a.	 By Corollary 5.16, there is a recursive function ɡ(u) such that 
ϕ
µ
g u
x
y x
u
y
x
( ) ( ) =
=
∧
=
(
)
1
. The domain of ϕg u
( )
1
 is {u}. Apply the 
fixed-point theorem to ɡ.
		
b.	 There is a recursive function g(u) such that ϕ
µ
g u
x
y x u y
( ) ( )=
≠∧
=
(
)
1
0 . 
Apply the fixed-point theorem to ɡ.
5.42	
a.	 Let A = {x|f(x) ∈ B}. By Proposition 5.21(c), B is the domain of a 
partial recursive function ɡ. Then A is the domain of the composi-
tion ɡ ⚬ f. Since ɡ ⚬ f is partial recursive by substitution, A is r.e. by 
Proposition 5.21(c).
		
b.	 Let B be a recursive set and let D be the inverse image of B under 
a recursive function f. Then x ∈ D if and only if CB(f(x)) = 0, and 
CB(f(x)) = 0 is a recursive relation.
		
c.	 Let B be an r.e. set and let A be the image {f(x)|x ∈ B} under a partial 
recursive function f. If B is empty, so is A. If B is nonempty, then B is 
the range of a recursive function ɡ. Then A is the range of the partial 
recursive function f(ɡ(x)) and, by Proposition 5.21(b), A is r.e.
		
d.	 Consider part (b). Given any natural number x, compute the value 
f(x) and determine whether f(x) is in B. This is an effective pro-
cedure for determining membership in the inverse image of B. 
Hence, by Church’s thesis, B is recursive.
		
e.	 Any non-empty r.e. set that is not recursive (such as that of 
Proposition 5.21(e)) is the range of a recursive function ɡ and is, 
therefore, the image of the recursive set ω of all natural numbers 
under the function ɡ.
5.43	
The proof has two parts:
		
1.	 Let A be an infinite recursive set. Let ɡ(i) = μx(x ∈ A ∧ (∀j)j<i (x ≠ ɡ(j)). 
Then ɡ(i) = h(i, ɡ#(i)), where h(i, u) = μx(x ∈ A ∧ (∀j)j < i (x ≠ (u)j)). 
h is recursive, and ɡ is recursive by Preposition 3.20. ɡ is strictly 
increasing and its range is A. (This proof is due to Gordon 
McLean, Jr.)
		
2.	 Let A be the range of a strictly increasing recursive function ɡ. 
Then ɡ(x) ≥ x for all x (by the special case of Proposition 4.15). 
Hence, x ∈ A if and only if (∃u)u≤xɡ(u) = x. So, A is recursive by 
Proposition 3.18.

447
Answers to Selected Exercises
5.44	
Assume A is an infinite r.e. set. Let A be the range of the recursive 
function ɡ(x). Define the function f by the following course-of-values 
recursion:
	
f n
y
z
y
f z
y
z
y
f
n
z n
z n
z
( ) =
∀
(
)
( ) ≠
( )
(
)
(
) =
∀
(
)
( ) ≠
( )
(
)
(
)
(
)
<
<
g
g
g
g
µ
µ
#
		
Then A is the range of f, f is one–one, and f is recursive by Propositions 
3.18 and 3.20. Intuitively, f(0) = ɡ(0) and, for n > 0, f(n) = ɡ(y), where y is 
the least number for which ɡ(y) is different from f(0), f(1), …, f(n − 1).
5.45	
Let A be an infinite r.e. set, and let A be the range of the recursive 
function ɡ. Since A is infinite, F(u) = μy(ɡ(y) > u) is a recursive func-
tion. Define G(0) = ɡ(0), G(n + 1) = ɡ(μy(ɡ(y) > G(n))) = ɡ(F(G(n))). G is 
a strictly increasing recursive function whose range is infinite and 
included in A. By Exercise 5.43, the range of G is an infinite recursive 
subset of A.
5.46	
a. By Corollary 5.16, there is a recursive function ɡ(u, v) such that
	
ϕ
µ
g u v
x
y T u x y
T v x y
,
, ,
, ,
.
(
) ( ) =
(
)∨
(
)
(
)
1
1
1
5.47	
Assume (∇). Let f(x1, …, xn) be effectively computable. Then the set 
B = {u|f((u)1, …, (u)n) = (u)n+1} is effectively enumerable and, there-
fore, by (∇), r.e. Hence, u ∈ B ⇔ (∃y)R(u, y) for some recursive rela-
tion R. Then
	f x
x
v
v
x
v
x
R
v
v
n
n
n
(
,
,
)
( )
( )
( ) ,( )
1
0 1
1
0
0
1
0
…
=
(
) =
∧… ∧(
) =
∧
(
)
(
)


(
)
µ
n+1
		
So, f is recursive. Conversely, assume Church’s thesis and let W be an 
effectively enumerable set. If W is empty, then W is r.e. If W is non-
empty, let W be the range of the effectively computable function ɡ. By 
Church’s thesis, ɡ is recursive. But, x ∈ W ⇔ (∃u)(ɡ(u) = x). Hence, W is 
r.e. by Proposition 5.21(a).
5.48	
Assume A is r.e. Since A ≠ ∅, A is the range of a recursive function ɡ(z). 
So, for each z, U(μyT1(ɡ(z), x, y)) is total and, therefore, recursive. Hence, 
U(μyT1(ɡ(x), x, y)) + 1 is recursive. Then there must be a number z0 such 
that U(μyT1(ɡ(x), x, y)) + 1 is recursive. Then there must be a number 
z0 such that U(μyT1(ɡ(x), x, y)) + 1 = U(μyT1(ɡ(z0), x, y)). A contradiction 
results when x = z0.
5.49	
(a) Let φ(n) = n for all n.

448
Answers to Selected Exercises
5.50	
Let ϕ
σ
µ
σ
σ
σ
( )
,
( ),
( )
( )
z
y T z
y
y
y
z
=
(
) ∧
>


(
)
1
2
1
1
2
2
2
1
2
2
, and let B be the 
range of φ.
5.55	
b.	 Let A be r.e. Then x ∈ A ⇔ (∃y)R(x, y), where R is recursive. Let R(x, y) 
express R(x, y) in K. Then k
A
y
k y
∈
⇔
∃
(
)
(
)
⊢K
R
,
.
		
c.	 Assume k
A
k
∈
⇔
( )
⊢K A
 for all natural numbers k. Then k ∈ A ⇔ 
(∃y)BA(k, y) and BA is recursive (see the proof of Proposition 3.29 on 
page 201.
5.56	 a.	 Clearly TK is infinite. Let f(x) be a recursive function with range 
TK. Let B0, B1, … be the theorems of K, where Bj is the wf of K 
with Gödel number f (j). Let ɡ(x, y) be the recursive function such 
that, if x is the Gödel number of a wf C, then ɡ(x, j) is the Gödel 
number of the conjunction C ∧ C ∧ … ∧ C consisting of j conjuncts; 
and, otherwise, ɡ(x, j)=0. Then ɡ( f(j), j) is the Gödel number of 
the j-fold conjunction Bj ∧ Bj ∧ … ∧ Bj. Let K′ be the theory whose 
axioms are all these j-fold conjunctions, for j = 0, 1, 2, … Then K′ 
and K have the same theorems. Moreover, the set of axioms of K′ 
is recursive. In fact, x is the Gödel number of an axiom of K′ if 
and only if x ≠ 0 ∧ (∃y)y≤x(ɡ(f(y), y) = x). From an intuitive stand-
point using Church’s thesis, we observe that, given any wf A, one 
can decide whether A is a conjunction C ∧ C ∧ … ∧ C; if it is such 
a conjunction, one can determine the number j of conjuncts and 
check whether C  is Bj.
		
b.	 Part (b) follows from part (a).
5.58	
a.	 Assume B(x1) weakly expresses (
)
TK * in K. Then, for any n, 
⊢K B n
( ) if and only if n
T
∈(
)
K *.  Let p be the Gödel number of 
B(x1). Then ⊢K B p
( ) if and only if p
T
∈(
)
K *. Hence, ⊢K B(p) if and 
only if the Gödel number of B(p) is in TK; that is, ⊢K B(p) if and only 
if not-⊢K B(p).
		
b.	 If K is recursively decidable, TK is recursive. Hence, TK is recursive 
and, by Exercise 5.57, (
)
TK * is recursive. So, (
)
TK * is weakly express-
ible in K, contradicting part (a).
		
c.	 Use part (b); every recursive set is expressible, and, therefore, 
weakly expressible, in every consistent extension of K.
5.59	
a.	 i.	
δ(x).
		
	
ii.	
x
x
1
2
−
		
	
iii.	 The function with empty domain.
		
	
iv.	 The doubling function.
		
b.	 i.	
f
x
x
1
2
1
1
0
(
, ) =
		
	
	
f
x
x
1
2
2
2
0
( ,
) =
		
	
	
f
x
x
f
x x
1
2
1
2
1
2
1
2
(
) ,(
)
(
,
)
′
′
(
) =

449
Answers to Selected Exercises
		
	
ii.	
f
x
x
1
2
1
1
0
(
, ) =
		
	
	
f
x
x
f
x x
1
2
1
2
1
2
1
2
,(
)
(
,
)
′
(
) = (
)′
		
	
	
f
x
2
2
1 0
0
(
, ) =
		
	
	
f
x
x
f
f
x x
x
2
2
1
2
1
2
2
2
1
2
1
,(
)
(
,
),
′
(
) =
(
)
		
	
iii.	 f1
1 0
1
( ) =
		
	
	
f
x
1
1
1
0
(
)′
(
) =
		
	
	
f2
1 0
0
( ) =
		
	
	
f
x
f
f
x
2
1
1
1
1
2
1
1
(
)
(
)
′
(
) =
(
)
5.61	
a.	 Any word P is transformed into QP.
		
b.	 Any word P in A is transformed into PQ.
		
c.	 Any word P in A is transformed into Q.
		
d.	 Any word P in A is transformed into n, where n is the number of 
symbols in P.
5.62	
a.	 α ξ → · Λ (ξ in A)
		
	
α → · Λ
		
	
Λ → α
		
b.	 α ξ → ξ α (ξ in A)
		
	
ξ α → · Λ (ξ in A)
		
	
α → · Λ
		
	
Λ → α
		
c.	 ξ → Λ (ξ in A)
		
	
α α → · Λ
		
	
Λ → · α
		
d.	 ξ η β → η β ξ (ξ, η in A)
		
	
α ξ → ξ β ξ α (ξ in A)
		
	
β → γ
		
	
γ → Λ
		
	
α → · Λ
		
	
Λ → α
5.63	
α ai → Qi α (i = 1, …, k)
		
α ξ → ξ α (ξ in A − {a1, …, ak})
		
α → · Λ
		
Λ → α

450
Answers to Selected Exercises
5.64	
d.	 | B|→ B
		
	
B →|
		
e.	 |B|→ |
		
f
Let
,
and
be new symbols.
B
.
|
|
|
|
α β
δ
β
β
α
βα
α
Λ
δ
δα
δ
δ
δ
δ
δ
β
→
→
→
→
→
→
→
→
→
→


δ

451
Bibliography
Listed here are not only books and papers mentioned in the text but also 
some other material that will be helpful in a further study of mathematical 
logic. We shall use the following abbreviations:
AML	
for Annals of Mathematical Logic
AMS	
for American Mathematical Society
Arch.	
for Archiv für mathematische Logik und Grundlagenforschung
FM	
for Fundamenta Mathematicae
HML	
for Handbook of Mathematical Logic, Springer-Verlag
HPL	
for Handbook of Philosophical Logic, Reidel
JSL	
for Journal of Symbolic Logic
MTL	
for Model-Theoretic Logics, Springer-Verlag
NDJFL	 for Notre Dame Journal of Formal Logic
NH	
for North-Holland Publishing Company
ZML	
for Zeitschrift für mathematische Logik und Grundlagen der Mathematik 
(since 1993, Mathematical Logic Quarterly)
Ackermann, W. (1928) Zum Hilbertschen Aufbau der reellen Zahlen. Math. Ann., 99, 
118–133.
Ackermann, W. (1937) Die Widerspruchsfreiheit der allgemeinen Mengenlehre. 
Math. Ann., 114, 305–315.
Ackermann, W. (1940) Zur Widerspruchsfreiheit der Zahlentheorie. Math. Ann., 117, 
162–194.
Ackermann, W. (1954) Solvable Cases of the Decision Problem. North-Holland.
Andrews, P. (1965) Transfinite Type Theory with Type Variables. North-Holland.
Andrews, P. (1986) An Introduction to Mathematical Logic and Type Theory: To Truth 
through Proof. Academic.
Barwise, J. (1985) Model-theoretic logics: Background and aims. Model-Theoretic Logics 
(eds. J. Barwise and S. Feferman), Springer, pp. 3–23.
Baudisch, A., D. Seese, P. Tuschik, and M. Weese (1985) Decidability and Quantifier 
Elimination, MTL. Springer, pp. 235–268.
Beall, J. (ed.) (2008) The Revenge of the Liar. Oxford University Press.
Becker, O. (1930) Zur Logik der Modalitäten. Jahrbuch für Philosophie und 
Phänomenologische Forschung., 11, 497–548.
Behmann, H. (1992) Beiträge zur Algebra der Logik, insbesondere zum 
Entscheidungsproblem, Math. Ann., 86, 163–229.
Bell, J.L. (1977) Boolean-Valued Models and Independence Proofs in Set Theory. Oxford 
University Press.
Ben-Ari, M. (2012) Mathematical Logic for Computer Science. Springer Verlag.
Bergelson, V., A. Blass, M. Di Nasso, and R. Jin (2010) Ultrafilters across Mathematics, 
Vol. 530. Contemporary Mathematics.

452
Bibliography
Bernardi, C. (1975) The fixed-point theorem for diagonalizable algebras. Stud. Logica, 
34, 239–252.
Bernardi, C. (1976) The uniqueness of the fixed-point in every diagonalizable algebra. 
Stud. Logica, 35, 335–343.
Bernays, P. (1937–1954) A system of axiomatic set theory. I. JSL, 2, 65–77.
Bernays, P. (1941) A system of axiomatic set theory. II. JSL, 6, 1–17.
Bernays, P. (1942) A system of axiomatic set theory. III. JSL, 7, 65–89.
Bernays, P. (1942) A system of axiomatic set theory. IV. JSL, 7, 133–145.
Bernays, P. (1943) A system of axiomatic set theory. V. JSL, 8, 89–104.
Bernays, P. (1948) A system of axiomatic set theory. VI. JSL, 13, 65–79.
Bernays, P. (1954) A system of axiomatic set theory. VII. JSL, 19, 81–96.
Bernays, P. (1957) Review of Myhill (1955). JSL, 22, 73–76.
Bernays, P. (1961) Zur Frage der Unendlichkeitsschemata in der axiomatischen 
Mengenlehre. Essays on the Foundations of Mathematics, Jerusalem, Israel, pp. 3–49.
Bernays, P. (1976) On the problem of schemata of infinity in axiomatic set theory. Sets 
and Classes, North-Holland.
Bernstein, A.R. (1973) Non-standard analysis. in Studies in Model Theory, Mathematical 
Association of America, pp. 35–58.
Beth, E. (1951) A topological proof of the theorem of Löwenheim–Skolem–Gödel. 
Indag. Math., 13, 436–444.
Beth, E. (1953) Some consequences of the theorem of Löwenheim–Skolem–Gödel–
Malcev. Indag. Math., 15, 66–71.
Beth, E. (1959) The Foundations of Mathematics. North-Holland.
Bezboruah, A. and J.C. Shepherdson (1976) Gödel’s second incompleteness theorem 
for Q. JSL, 41, 503–512.
Black, R. (2000) Proving Church’s thesis. Philos. Math., 8, 244–258.
Bolc, L. and P. Borowik (1992) Many-Valued Logics. Vol. I: Theoretical Foundations, 
Springer.
Boolos, G. (1979) The Unprovability of Consistency: An Essay in Modal Logic. Cambridge 
University Press.
Boolos, G. (1984) Trees and finite satisfiability: Proof of a conjecture of Burgess. 
NDJFL, 25, 193–197.
Boolos, G. (1989) A new proof of the Gödel incompleteness theorem. Not AMS, 36, 
388–390.
Boolos, G. (1993) The Logic of Provability. Cambridge University Press.
Boolos, G.S., J.P. Burgess, and R.C. Richard (2007) Computability and Logic, 5th edn. 
Cambridge University Press.
Boone, W. (1959) The word problem. Ann. Math., 70, 207–265.
Bourbaki, N. (1947) Algèbre. Hermann, Paris, France, Book II, Chapter II.
Britton, J.L. (1963) The word problem. Ann. Math., 77, 16–32.
Brouwer, L.E.J. (1976) Collected Works. Vol. 1, Philosophy and Foundations of 
Mathematics. North-Holland.
Brunner, N. (1990) The Fraenkel–Mostowski method revisited. NDJFL, 31, 64–75.
Burali-Forti, C. (1897) Una Questione sui numeri transfinite. Rendiconti del Circolo 
Matematico di Palermo, 11, 154–165 and 260.
Calude, C., S. Marcus, and I. Tevy (1979) The first example of a recursive function 
which is not primitive recursive. Hist. Math., 6, 380–384.
Carnap, R. (1934) Die Logische Syntax der Sprache, Springer (English translation, The Logical 
Syntax of Language, Routledge & Kegan Paul, 1937; text edition, Humanities, 1964.).

453
Bibliography
Chaitin, G. (1992) Information-Theoretic Incompleteness. World Scientific.
Chang, C.C. and H.J. Keisler (1973) Model Theory, 2nd edn. North-Holland.
Chang, C.C. and H.J. Keisler (1990) Model Theory, 3rd edn. North-Holland.
Cherlin, G. (1976) Model Theoretic Algebra, Selected Topics. Springer.
Chimakinam, J.O. (2012) Proof in Alonzo Church’s and Alan Turing’s Mathematical Logic: 
Undecidability of First-Order Logic. Author House.
Ciesielski, K. (1997) Set Theory for the Working Mathematician. London Mathematical 
Society Student Texts.
Chuquai, R. (1972) Forcing for the impredicative theory of classes. JSL, 37, 1–18. 
Chuquai, R. (1981) Axiomatic Set Theory: Impredicative Theories of Classes. North-Holland.
Church, A. (1936a) A note on the Entscheidungsproblem. JSL, 1, 40–41; correction, JSL, 
101–102 (reprinted in Davis, 1965).
Church, A. (1936b) An unsolvable problem of elementary number theory. Am. J. 
Math., 58, 345–363 (reprinted in Davis, 1965).
Church, A. (1940) A formulation of the simple theory of types. JSL, 5, 56–68. 
Church, A. (1941) The Calculi of Lambda Conversion. Princeton University Press (second 
printing, 1951).
Church, A. (1956) Introduction to Mathematical Logic. I. Princeton University Press.
Chwistek, L. (1924–1925) The theory of constructive types. Ann. de la Soc. Polonaise de 
Math., 2, 9–48.
Chwistek, L. (1924–1925) The theory of constructive types. Ann. de la Soc. Polonaise de 
Math., 3, 92–141.
Cohen, P.J. (1963) A minimal model for set theory. Bull. Am. Math. Soc., 69, 537–540.
Cohen, P.J. (1963–1964) The independence of the continuum hypothesis. Proc. Natl. 
Acad. Sci. USA, 50, 1143–1148.
Cohen, P.J. (1963–1964) The independence of the continuum hypothesis. Proc. Natl. 
Acad. Sci. USA, 51, 105–110.
Cohen, P.J. 1966. Set Theory and the Continuum Hypothesis. Benjamin, Germany.
Collins, G.E. (1955) The modeling of Zermelo set theories in New Foundations, PhD 
thesis, Cornell, NY.
Cook, R.T. (2010) The Arché Papers on the Mathematics of Abstraction. Springer.
Cooper, S.B. (2004) Computability Theory. CRC Press.
Copeland, B.J. (ed.) (2004) Alan Mathison Turing: The Essential Turing. Oxford 
University Press.
Corcoran, J. (1980) Categoricity. Hist. Philos. Log., 1, 187–207.
Corcoran, J. (1987) Second-order logic, Proceedings Inference OUIC 86 (eds. D. Moates 
and R. Butrick), Ohio University Press, pp. 7–31.
Corcoran, J. (1998) Second-order Logic. Logic, Meaning and Computation: Essays in 
Memory of Alonzo Church (eds. C.A. Anderson and M. Zeleny), Kluwer.
Corcoran, J. (2006) Schemata: The concept of schema in the history of logic. Bull. Symb. 
Log., 12, 219–240.
Craig, W. (1953) On axiomatizability within a system. JSL, 18, 30–32.
Cucker, F., L. Blum, and M. Shub (1997) Complexity and Real Computation. Springer.
Curry, H. (1942) The inconsistency of certain formal logics. J. Symb. Log., 7, 115–117.
Curry, H.B. and R. Feys (1958) Combinatory Logic. I. North-Holland.
Curry, H.B., J.R. Hindley, and J. Seldin (1972) Combinatory Logic. II. North-Holland.
Davis, M. (1958) Computability and Unsolvability. McGraw-Hill (Dover, 1983).
Davis, M. (ed.) (1965) The Undecidable: Basic Papers on Undecidable Propositions, 
Unsolvable Problems, and Computable Functions. Raven Press.

454
Bibliography
Davis, M. (1973) Hilbert’s tenth problem is unsolvable. Am. Math. Mon., 80, 233–269.
Davis, M. (1977a) Applied Nonstandard Analysis. Wiley.
Davis, M. (1977b) Unsolvable problems. HML, 567–594.
Davis, M. (1982) Why Gödel didn’t have Church’s thesis. Inform. Control, 54, 3–24.
Davis, M., H. Putnam, and J. Robinson (1961) The decision problem for exponential 
Diophantine equations. Ann. Math., 74, 425–436.
de Bruijn, N.G. and P. Erdös (1951) A colour problem for infinite graphs and a prob-
lem in the theory of relations. Indag. Math., 13, 369–373.
Dedekind, R. (1901) Essays on the Theory of Numbers. Open Court (Dover, 1963).
Dekker, J.C.E. (1953) Two notes on recursively enumerable sets. Proc. AMS, 4, 495–501.
Dekker, J.C.E. (1955) Productive sets. Trans. AMS, 78, 129–149.
Dekker, J.C.E. and J. Myhill (1960) Recursive equivalence types. Univ. Calif. Publ. 
Math., 3, 67–213.
Denyer, N. (1991) Pure second-order logic. NDJFL, 33, 220–224.
Dershowitz, N. and Y. Gurevich. (2008) A natural axiomatization of computability 
and proof of Church’s thesis. Bull. Symb. Log., 14, 299–350.
Detlefsen, M. (2001) Pillars of computer science: Gödel’s 2nd theorem, Philos. Math., 
37–71.
Dreben, B. (1952) On the completeness of quantification theory. Proc. Natl. Acad. Sci. 
USA, 38, 1047–1052.
Dreben, B. and W.D. Goldfarb (1980) Decision Problems, Solvable Classes of Quantificational 
Formulas. Addison-Wesley.
Drucker, T. (ed.) (2008) Perspectives of the History of Mathematical Logic. Springer.
Dummett, M. (1977) Elements of Intuitionism. Oxford University Press.
Easton, W.B. (1970) Powers of regular cardinals. AML, 1, 139–178.
Ehrenfeucht, A. (1957) On theories categorical in power. FM, 44, 241–248.
Ehrenfeucht, A. (1958) Theories having at least continuum non-isomorphic models in 
each infinite power (abstract). Not. AMS, 5, 680.
Ehrenfeucht, A. and S. Feferman (1960) Representability of recursively enumerable 
sets in formal theories. Arch. fur Math. Logik und Grundlagenforschung, 5, 37–41.
Enayat, A. and R. Kossak (ed.) (2004) Nonstandard Models of Arithmetic and Set Theory. 
American Mathematical Society.
Engeler, E. (1968) Formal Languages: Automata and Structures. Markham.
Engeler, E. (1973) Introduction to the Theory of Computability. Academic.
Erdös, P. and A. Tarski (1961) On some problems involving inaccessible cardinals. 
Essays on the Foundations of Mathematics, Magnes, Jerusalem, Israel, pp. 50–82.
Ershov, Yu., I. Lavrov, A. Taimanov, and M. Taitslin (1965) Elementary theories. Russ. 
Math. Surv., 20, 35–105.
Evans, T. (1951) The word problem for abstract algebras. J. London Math. Soc., 26, 
64–71.
Feferman, S. (1957) Degrees of unsolvability associated with classes of formalized 
theories. JSL, 22, 165–175.
Feferman, S. (1960) Arithmetization of metamathematics in a general setting. FM, 49, 
35–92.
Feferman, S. (1962) Transfinite recursive progressions of axiomatic theories. JSL, 27, 
259–316.
Felgner, U. (1971a) Models of ZF-Set Theory. Springer.
Felgner, U. (1971b) Comparisons of the axioms of local and universal choice. FM, 71, 
43–62.

455
Bibliography
Felgner, U. (1976) Choice functions on sets and classes. Sets and Classes, North-
Holland, pp. 217–255.
Ferreiros, J. (2007) Labyrinth of Thought. A History of Set Theory and its Role in Modern 
Mathematics, 2nd edn. Birkhauser.
Fischer, P.C. (1965) On formalisms for Turing machines. J. Assoc. Comp. Mach., 12, 
570–580.
Fitting, M. (1983) Proof Methods for Modal and Intuitionistic Logics. Reidel.
Fitting, M. and R. Mendelsohn. (1998) First-Order Modal Logic. Kluwer.
Forster, T.E. (1983) Quine’s New Foundations (An Introduction), Cahiers du Centre de 
Logique 5, Université Catholique de Louvain.
Forster, T.E. (1992) Set Theory with a Universal Set: Exploring an Untyped Universe. 
Oxford University Press.
Fraenkel, A.A. (1922a) Zu den Grundlagen der Cantor-Zermeloschen Mengenlehre. 
Math. Ann., 86, 230–237.
Fraenkel, A.A. (1922b) Der Begriff ‘definit’ und die Unabhängigkeit des 
Auswahlaxioms. Sitzungsberichte der Preussischen Akademie der Wissenschaften, 
Physikalisch-mathematische Klasse, 253–257.
Fraenkel, A.A. (1928) Einleitung in die Mengenlehre, 3rd edn. Springer.
Fraenkel, A., Y. Bar-Hillel, and A. Lévy. (1973) Foundations of Set Theory. North-Holland 
(second revised edition).
Frayne, T., A. Morel, and D. Scott. 1956. Reduced direct products. FM, 51, 195–228.
Frege, G. (1893, 1903) Grundgesetze der Arithmetik, Begriffschriftlich Abgeleitet, Vols. 1–2. 
Jena (partial English translation in The Basic Laws of Arithmetic: Exposition of the 
System, University of California Press, 1964).
Gabriel, P. (1962) Des catégories abéliennes. Bull. de la Soc. Math. de France, 90, 
323–448.
Gandy, R. (1988) The confluence of ideas in 1936. The Universal Turing Machine—​
A Half-Century Survey (ed. R. Herken), Oxford University Press, pp. 55–111.
Garey, M.R. and D.S. Johnson. (1978) Computers and Intractability: A Guide to the Theory 
of NP-Completeness. Freeman.
Garland, S.J. (1974) Second-order cardinal characterizability. Axiomatic Set Theory, 
Proceedings   of the Symposia in Pure Mathematics, Vol. XIII, Part II. American 
Mathematical Society, pp. 127–146.
Gentzen, G. (1936) Die Widerspruchsfreiheit der reinen Zahlentheorie. Math. Ann., 
112, 493–565.
Gentzen, G. (1938) Neue Fassung des Widerspruchsfreiheitsbeweises für die reine 
Zahlentheorie. Forschungen zur Logik, 4, 5–18.
Gentzen, G. (1969) Collected Papers, (ed. M.E. Szabo), North-Holland.
George, A. and D.J. Velleman. (2001) Philosophies of Mathematics. Wiley-Blackwell.
Gillies, D.A. (1982) Frege, Dedekind, and Peano on the Foundations of Arithmetic. 
Van Gorcum.
Gillies, D.A. (1992) The Fregean revolution in logic. Revolutions in Mathematics (ed. 
D.A. Gillies), Oxford University Press, pp. 265–305.
Gödel, K. (1930) Die Vollständigkeit der Axiome des logischen Funktionenkalküls, 
Monatsh. Math. Phys., 37, 349–360 (English translation in Van Heijenoort, 1967, 
582–591).
Gödel, K. (1931) Ueber formal unentscheidbare Sätze der Principia Mathematica und 
verwandter Systeme. I. Monatsh. Math. Phys., 38, 173–198 (English translation in 
Davis, 1965).

456
Bibliography
Gödel, K. (1933) Zum intuitionistischen Aussagenkalkül; Zur intuitionistischen 
Arithmetik und Zahlentheorie. Ergeb. Math. Koll., 4, 34–38 and 40 (translation 
in Davis, 1965).
Gödel, K. (1934) On undecidable propositions of formal mathematical systems, 
Lecture Notes, Institute for Advanced Study, Princeton University Press, 
(reprinted in Davis, 1965, 39–73).
Gödel, K. (1938) The consistency of the axiom of choice and the generalized con-
tinuum hypothesis. Proc. Natl. Acad. Sci. USA, 24, 556–557.
Gödel, K. (1939) Consistency proof for the generalized continuum hypothesis. Proc. 
Natl. Acad. Sci. USA, 25, 220–226.
Gödel, K. (1940) The Consistency of the Axiom of Choice and the Generalized Continuum 
Hypothesis with the Axioms of Set Theory. Princeton University Press.
Gödel, K. (1947) What is Cantor’s continuum problem? Am. Math. Mon., 54, 515–525.
Gödel, K. (1986, 1990, 1995) Collected Works, Volume I, Publications 1929–1936; Volume 
II, Publications 1938–1974; Volume III, Unpublished Essays and Lectures, 
Oxford University Press.
Goldfarb, W. (1990) Herbrand’s theorem and the incompleteness of arithmetic. Iyyun: 
A Jerusalem Philos. Q., 39, 45–69.
Grelling, K. and L. Nelson. (1907/1908) Bemerkungen zu den Paradoxien von Russell 
und Burali-Forti. Abhandlungen der Fries’schen Schule N.F., 2, 301–324.
Hailperin, T. (1944) A set of axioms for logic. JSL, 9, 1–19.
Hailperin, T. (1953) Quantification theory and empty individual domains. JSL, 18, 
197–200.
Hajek, P. (1993) Metamathematics of First-Order Arithmetic. Springer.
Hajek, P. and P. Pudlak (1992) Metamathematics of First-Order Arithmetic. Springer.
Hale, B. and C. Wright. The Reason’s Proper Study: Essays Toward A Neo- Fregean 
Philosophy of Mathematics. Oxford University Press.
Hall, M., Jr. (1949) The word problem for semigroups with two generators. JSL, 14, 
115–118.
Halmos, P. (1960) Naive Set Theory. Van Nostrand (Springer, 1974).
Halmos, P. (1962) Algebraic Logic. Chelsea.
Halmos, P. (1963) Lectures on Boolean Algebra. Van Nostrand (Springer, 1977).
Halmos, P. and H. Vaughn (1950) The marriage problem. Am. J. Math., 72, 214–215.
Halpern, J.D. (1964) The independence of the axiom of choice from the Boolean prime 
ideal theorem. FM, 55, 57–66.
Halpern, J.D. and A. Lévy (1971) The Boolean prime ideal theorem does not imply the 
axiom of choice. Proc. Symp. Pure Math., 13 AMS, 83–134.
Hamkins, J.D. and A. Lewis. (2000) Infinite time Turing machines. J. Symb. Log., 65, 
567–604.
Hartmanis, J. (1989) Computational Complexity Theory. American Mathematical Society.
Hartogs, F. (1915) Über das Problem der Wohlordnung. Math. Ann., 76, 438–443.
Hasenjaeger, G. (1953) Eine Bemerkung zu Henkin’s Beweis für die Vollständigkeit 
des Prädikatenkalküls der ersten Stufe. JSL, 18, 42–48.
Hasenjaeger, G. and H. Scholz (1961) Grundzüge der mathematischen Logik. Springer.
Hatcher, W. (1982) The Logical Foundations of Mathematics. Pergamon.
Hellman, M. (1961) A short proof of an equivalent form of the Schröder–Bernstein 
theorem. Am. Math. Mon., 68, 770.
Henkin, L. (1949) The completeness of the first-order functional calculus. JSL, 14, 
159–166.

457
Bibliography
Henkin, L. (1950) Completeness in the theory of types. JSL, 15, 81–91.
Henkin (1955) On a theorem of Vaught. JSL, 20, 92–93.
Henkin, L., J.D. Monk, and A. Tarski. (1971, 1985) Cylindric Algebras, Vol. I (1971), 
Vol. II (1985). North-Holland.
Herbrand, J. (1930) Recherches sur la théorie de la démonstration. Travaux de la Société 
des Sciences et des Lettres de Varsovie, III, 33, 33–160.
Herbrand, J. (1971) Logical Writings. Harvard University Press and Reidel.
Hermes, H. (1965) Enumerability, Decidability, Computability. Springer (second edition, 
1969).
Heyting, A. (1956) Intuitionism. North-Holland (third revised edition, 1971).
Higman, G. (1961) Subgroups of finitely presented groups. Proc. R. Soc., Series A, 262, 
455–475.
Hilbert, D. and W. Ackermann (1950) Principles of Mathematical Logic. Chelsea.
Hilbert, D. and P. Bernays (1934, 1939) Grundlagen der Mathematik, Vol. I (1934), Vol. II 
(1939). Springer (second edition, 1968, 1970).
Hintikka, J. (1955a) Form and content in quantification theory. Acta Philos. Fennica, 
11–55.
Hintikka, J. (1955b) Notes on the quantification theory. Comment. Phys.-Math., Soc. Sci. 
Fennica, 17, 1–13.
Hirohiko, K. (2010) The Modal Logic of Gödel Sentences. Springer.
Howard, P.E. (1973) Limitations on the Fraenkel–Mostowski method. JSL, 38, 
416–422.
Hrbacek, K. and T. Jech (1978) Introduction to Set Theory. Academic (third edition, CRC 
Press, 1999).
Hughes, G.E. and M.J. Creswell (1968) An Introduction to Modal Logic. Methuen.
Isbell, J. (1966) Structure of categories. Bull. AMS, 72, 619–655.
Jaśkowski, S. (1936) Recherches sur le système de la logique intuitioniste. Acta Sci. 
Ind., Paris, 393, 58–61.
Jech, T. (1973) The Axiom of Choice. North-Holland, (Dover, 2008). Set Theory. Academic 
(third edition, Springer, 2006).
Jech, T. (2010) Multiple Forcing. Cambridge University Press.
Jensen, R.B. (1968–1969) On the consistency of a slight (?) modification of Quine’s 
New Foundations. Synthese, 19, 250–263.
Jeroslow, R.G. (1971) Consistency statements in formal theories. FM, 72, 17–40. 
Jeroslow, R.G. (1972) On the encodings used in the arithmetization of mathematics, 
unpublished manuscript.
Jeroslow, R.G. (1973) Redundancies in the Hilbert–Bernays derivability conditions for 
Gödel’s second incompleteness theorem. JSL, 38, 359–367. 
Jeroslow, R.G. (1976) Consistency statements in formal theories. FM, 72, 17–40.
Jones, J. (1982) Universal Diophantine Equations. J. Symbolic Logic, 47, 549–571.
Joyal, A. and I. Moerdijk. (1995) Algebraic Set Theory. Cambridge University Press.
Kalmár, L. (1935) Über die Axiomatisierbarkeit des Aussagenkalküls. Acta Sci. Math., 
7, 222–243.
Kalmár, L. (1936) Zuruckführung des Entscheidungsproblems auf den Fall von 
Formeln mit einer einzigen binären Funktionsvariablen. Comp. Math., 4, 137–144.
Kamke, E. (1950) Theory of Sets. Dover.
Kanamori, A. (1994) The Higher Infinite. Springer.
Kanamori, A. (2003) The empty set, the singleton, and the ordered pair. Bull. Symb. 
Log., 9, 273–298.

458
Bibliography
Kanamori, A. (2008) Cohen and set theory. Bull. Symb. Log., 14, 351–378.
Kaye, R. (1991) Models of Peano Arithmetic. Oxford University Press.
Kaye, R. (1994) Automorphisms of First Order Structures. Oxford University Press.
Keisler, H.J. (1976) Elementary Calculus: An Approach Using Infinitesimals. Prindle, 
Weber & Schmidt (second edition, 1985).
Kelley, J. (1955) General Topology. Van Nostrand (Springer, 1975).
Kemeny, J. (1949) Type theory vs. set theory, PhD thesis, Princeton, NJ.
Kirby, L. and J. Paris (1977) Initial segments of models of Peano’s axioms, Proceedings 
of the Bierutowice Conference 1976, Lecture Notes in Mathematics, Springer, 
pp. 211–226.
Kirby, L. and J. Paris (1982) Accessible independence results for Peano arithmetic. 
Bull. London Math. Soc., 14, 285–293.
Kleene, S.C. (1936a) General recursive functions of natural numbers. Math. Ann., 112, 
727–742 (reprinted in Davis, 1965).
Kleene, S.C. (1936b) λ-definability and recursiveness. Duke Math. J., 2, 340–353.
Kleene, S.C. (1943) Recursive predicates and quantifiers, Transactions of the AMS, 53, 
41–73 (reprinted in Davis, 1965).
Kleene, S.C. (1952) Introduction to Metamathematics. Van Nostrand.
Kleene, S.C. (1955a) Hierarchies of number-theoretic predicates. Bull. AMS, 61, 
193–213.
Kleene, S.C. (1955b) Arithmetical predicates and function quantifiers. Trans. AMS, 79, 
312–340.
Kleene, S.C. and E.L. Post (1954) The upper semi-lattice of degrees of recursive 
unsolvability. Ann. Math., 59, 379–407.
Kleene, S.C. and R.E. Vesley (1965) The Foundations of Intuitionist Mathematics. 
North-Holland.
Koslow, A. (1992) A Structuralist Theory of Logic. Cambridge University Press.
Kossak, R. and J. Schmerl. (2006) The Structure of Models of Peano Arithmetic. Oxford 
University Press.
Kreisel, G. (1976) The continuum hypothesis and second-order set theory. J. Philos. 
Log., 5, 281–298.
Kreisel, G. and J.-L. Krivine (1967) Elements of Mathematical Logic. North-Holland.
Kripke, S. (1975) Outline of a theory of truth. J. Philos., 72, 690–716.
Krivine, J.-L. (1971) Introduction to Axiomatic Set Theory. Reidel.
Kruse, A.H. (1966) Grothendieck universes and the super-complete models of 
Shepherdson. Comp. Math., 17, 86–101.
Kunen, K. (1980) Set Theory: An Introduction to Independence Proofs. Elsevier.
Kuratowski, K. (1921) Sur la notion d’ordre dans la théorie des ensembles. FM, 
2, 161–171.
Lambek, J. (1961) How to program an infinite abacus. Can. Math. Bull., 4, 295–302; 
5, 297.
Langford, C.H. (1927) Some theorems on deducibility. Ann. Math., I, 28, 16–40; II, 
28, 459–471.
Leinster, T. (2014) Basic Category Theory. Cambridge University Press.
Leivant, D. (1994) Higher order logic. Handbook of Logic in Artificial Intelligence and 
Logic Programming, Vol. 2 (eds. D.M. Gabbay, C.J. Hogger, and J.A. Robinson), 
Clarendon Press, pp. 229–321.
Lévy, A. (1960) Axiom schemata of strong infinity. Pacific J. Math., 10, 223–238.

459
Bibliography
Lévy, A. (1965) The Fraenkel–Mostowski method for independence proofs in set 
theory, The Theory of Models, Proceedings of the 1963 International Symposium at 
Berkeley, North-Holland, pp. 221–228.
Lévy, A. (1978) Basic Set Theory. Springer.
Lewis, C.I. and C.H. Langford (1960) Symbolic Logic.  Dover (reprint of 1932 edition).
Lewis, H.R. (1979) Unsolvable Classes of Quantificational Formulas. Addison-Wesley.
Lindenbaum, A. and A. Mostowski (1938) Über die Unabhängigkeit des Auswahl-
axioms und einiger seiner Folgerungen. Comptes Rendus Sciences Varsovie, III, 
31, 27–32.
Lindström, P. (1969) On extensions of elementary logic. Theoria, 35, 1–11.
Lindstrom, P. (2003) Aspects of Incompleteness, 2nd edn. Association for Symbolic Logic.
Link, G. (2004) One Hundred Years of Russell’s Paradox: Mathematics, Logic, Philosophy. 
De Gruyter.
Löb, M.H. (1955) Solution of a problem of Leon Henkin. JSL, 20, 115–118.
Loś, J. (1954a) Sur la théorème de Gödel sur les theories indénombrables. Bull. de l’Acad. 
Polon. des Sci., III, 2, 319–320.
Loś, J. (1954b) On the existence of a linear order in a group. Bull. de l’Acad. Polon. des 
Sci., 21–23.
Loś, J. (1954c) On the categoricity in power of elementary deductive systems and 
some related problems. Coll. Math., 3, 58–62.
Loś, J. (1955a) The algebraic treatment of the methodology of elementary deductive 
systems. Stud. Log., 2, 151–212.
Loś, J. (1955b) Quelques remarques, théorèmes et problèmes sur les classes 
definissables d’algèbres. Mathematical Interpretations of Formal Systems, North-
Holland, pp. 98–113.
Löwenheim, L. (1915) Ueber Möglichkeiten im Relativkalkül. Math. Ann., 76, 447–470.
Luxemburg, W.A.J. (1962) Non-Standard Analysis. Caltech Bookstore, Pasadena, CA.
Luxemburg, W.A.J. (1969) Applications of Model Theory to Algebra, Analysis, and 
Probability. Holt, Rinehart and Winston. 
Luxemburg, W.A.J. (1973) What is non-standard analysis? Papers in the Foundations 
of Mathematics. Am. Math. Mon., 80(6), Part II, 38–67.
Machtey, M. and P. Young (1978) An Introduction to the General Theory of Algorithms. 
North-Holland.
MacLane, S. (1971) Categorical algebra and set-theoretic foundations, Proceedings of 
the Symposium of Pure Mathematics, AMS, XIII, Part I, pp. 231–240.
Maclaughlin, T. 1961. A muted variation on a theme of Mendelson. ZML, 17, 57–60.
Maddy, P. (2013) Defending the Axioms: On the Philosophical Foundations of Set Theory. 
Oxford University Press.
Magari, R. (1975) The diagonalizable algebras. Boll. Un. Mat. Ital., (4), 12, 117–125.
Malinowski, G. (1993) Many-Valued Logics. Oxford University Press.
Mancosu, P. (1997) From Brouwer to Hilbert: The Debate on the Foundations of Mathematics 
in the 1920s. Oxford University Press.
Mancosu, P. (2010) The Adventure of Reason: Interplay Between Philosophy of Mathematics 
and Mathematical Logic, 1900–1940. Oxford University Press.
Mancosu, P. (ed.) (2011) The Philosophy of Mathematical Practice. Oxford University 
Press.
Manzano, M. (1996) Extensions of First Order Logic. Cambridge University Press.
Margaris, A. (1967) First-Order Mathematical Logic. Blaisdell (Dover, 1990).

460
Bibliography
Markov, A.A. (1954) The Theory of Algorithms, Tr. Mat. Inst. Steklov, XLII (translation: 
Office of Technical Services, U.S. Department of Commerce, 1962).
Matiyasevich, Y. (1970) Enumerable sets are Diophantine. Doklady Akademii Nauk 
SSSR, 191, 279–282 (English translation, Soviet Math. Doklady, 1970, 354–357).
Matiyasevich, Y. (1993) Hilbert’s Tenth Problem. MIT Press.
McKenzie, R. and R.J. Thompson (1973) An elementary construction of unsolvable 
word problems in group theory. Word Problems (eds. W.W. Boone, F.B. Cannonito, 
and R.C. Lyndon), North-Holland.
McKinsey, J.C.C. and A. Tarski (1948) Some theorems about the sentential calculi of 
Lewis and Heyting. JSL, 13, 1–15.
Melzak, Z.A. (1961) An informal arithmetical approach to computability and compu-
tation. Can. Math. Bull., 4, 279–293.
Mendelson, E. (1956a) Some proofs of independence in axiomatic set theory. JSL, 21, 
291–303. 
Mendelson, E. (1956b) The independence of a weak axiom of choice. JSL, 350–366.
Mendelson, E. (1958) The axiom of Fundierung and the axiom of choice. Archiv für 
mathematische Logik und Grundlagenforschung, 4, 65–70.
Mendelson, E. (1961) On non-standard models of number theory. Essays on the 
Foundations of Mathematics, Magnes, Jerusalem, Israel, pp. 259–268.
Mendelson, E. (1961b) Fraenkel’s addition to the axioms of Zermelo. Essays on the 
Foundations of Mathematics, Magnes, Jerusalem, Israel, pp. 91–114.
Mendelson, E. (1970) Introduction to Boolean Algebra and Switching Circuits. Schaum, 
McGraw-Hill.
Mendelson, E. (1973) Number Systems and the Foundations of Analysis. Academic. 
(reprint Krieger, 1985).
Mendelson, E. (1980) Introduction to Set Theory. Krieger.
Mendelson, E. (1990) Second Thoughts about Church’s thesis and mathematical 
proofs. J. Philos., 225–233.
Meredith, C.A. (1953) Single axioms for the systems (C,N), (C,O) and (A,N) of the 
two-valued propositional calculus. J. Comp. Syst., 3, 155–164.
Monk, J.D. (1976) Mathematical Logic. Springer.
Montagna, F. (1979) On the diagonalizable algebra of Peano arithmetic. Boll. Un. Mat. 
Ital., 5, 16-B, 795–812.
Montague, R. (1961a) Semantic closure and non-finite axiomatizability. Infinitistic 
Methods, Pergamon, pp. 45–69.
Montague, R. and R.L. Vaught (1959) Natural models of set theories. FM, 47, 219–242.
Moore, G.H. (1980) Beyond first-order logic: The historical interplay between math-
ematical logic and set theory. Hist. Philos. Log., 1, 95–137.
Moore, G.H. (1982) Zermelo’s Axiom of Choice: Its Origin, Development and Influence. 
Springer.
Moore, G.H. (1988) The emergence of first-order logic. History and Philosophy of 
Modern Mathematics (eds. W. Aspray and P. Kitcher), University of Minnesota 
Press, pp. 95–135.
Morley, M. (1965) Categoricity in power. Trans. AMS, 114, 514–538.
Morse, A. (1965) A Theory of Sets. Academic.
Mostowski, A. (1939) Ueber die Unabhängigkeit des Wohlordnungsatzes vom 
Ordnungsprinzip. FM, 32, 201–252.
Mostowski, A. (1947) On definable sets of positive integers. FM, 34, 81–112.
Mostowski, A. (1948) On the principle of dependent choices. FM, 35, 127–130.

461
Bibliography
Mostowski, A. (1951a) Some impredicative definitions in the axiomatic set theory. 
FM, 37, 111–124 (also 38, 1952, 238).
Mostowski, A. (1951b) On the rules of proof in the pure functional calculus of the first 
order. JSL, 16, 107–111.
Murawski, R. (1998) Undefinability of truth. The problem of the priority: Tarski vs. 
Gödel. Hist. Philos. Log., 19, 153–160.
Murawski, R. (2010) Recursive Functions and Metamathematics: Problems of Completeness 
and Decidability, Gödel’s Theorems. Springer.
Myhill, J. (1955) Creative sets. ZML, 1, 97–108.
Nerode, A. (1993) Logic for Applications. Springer.
Neumann, J. von (1925) Eine Axiomatisierung der Mengenlehre. J. für Math., 154, 
219–240 (also 155, 128) (English translation in Van Heijenoort, 1967, 393–413).
Neumann, J. von (1928) Die Axiomatisierung der Mengenlehre. Math. Z., 27, 669–752.
Nicod, J.G. (1917) A reduction in the number of primitive propositions of logic. Proc. 
Camb. Philos. Soc., 19, 32–41.
Novak, I.L. (Gal, L.N.) (1951) A construction for models of consistent systems. FM, 
37, 87–110.
Novikov, P.S. (1955) On the algorithmic unsolvability of the word problem for group 
theory, Tr. Mat. Inst. Steklov, 44 (Amer. Math. Soc. Translations, Series 2, 9, 1–124).
Oberschelp, A. (1991) On pairs and tuples. ZML, 37, 55–56.
Oberschelp, W. (1958) Varianten von Turingmaschinen. Archiv für mathematische Logik 
und Grundlagenforschung, 4, 53–62.
Odifreddi, P. Classical Recursion Theory: The Theory of Functions and Sets of Natural 
Numbers. North-Holland, 1992.
Olszewski, A., J. Wolenski, and R. Janusz (eds.) (2006) Church’s Thesis after 70 Years. 
Ontos Verlag.
Olszewski, A., J. Wolenski, and R. Janusz (eds.) (2007) Church’s Thesis After 70 Years. 
Ontos Verlag.
Orey, S. (1956a) On ω-consistency and related properties. JSL, 21, 246–252.
Orey, S. (1956b) On the relative consistency of set theory. JSL, 280–290.
Parikh, R. (1971) Existence and feasibility in arithmetic. JSL, 36, 494–508.
Paris, J.B. (1972) On models of arithmetic, Conference in Mathematical Logic—London, 
1970, Springer, pp. 251–280.
Paris, J.B. (1978) Some independence results for Peano arithmetic. JSL, 43, 725–731.
Paris, J. and L. Harrington. (1977) A mathematical incompleteness in Peano arithme-
tic. HML (ed. J. Barwise), North-Holland, pp. 1133–1142.
Peano, G. (1891) Sul concetto di numero. Rivista di Math, 1, 87–102.
Péter, R. (1935) Konstruktion nichtrekursiver Funktionen. Math. Ann., 111, 42–60.
Péter, R. (1967) Recursive Functions. Academic.
Pincus, D. (1972) ZF consistency results by Fraenkel–Mostowski methods. JSL, 37, 
721–743.
Poizat, B. (2012) A Course in Model Theory: An Introduction to Contemporary Mathematical 
Logic. Springer.
Ponse, A., M. de Rijke, and Y. Venema. (1995) Modal Logic and Process Algebra, 
a Bisimulation Perspective. CSLI Publications.
Post, E.L. (1921) Introduction to a general theory of elementary propositions. Am. J. Math., 
43, 163–185.
Post, E.L. (1936) Finite combinatory process-formulation 1. JSL, 1, 103–105 (reprinted 
in Davis, 1965).

462
Bibliography
Post, E.L. (1941) The Tw-Valued Iterative Systems of Mathematical Logic. Princeton 
University Press.
Post, E.L. (1943) Formal reductions of the general combinatorial decision problem. 
Am. J. Math., 65, 197–215.
Post, E.L. (1944) Recursively enumerable sets of positive integers and their decision 
problems. Bull. AMS, 50, 284–316 (reprinted in Davis, 1965).
Post, E.L. (1947) Recursive unsolvability of a problem of Thue. JSL, 12, 1–11 (reprinted 
in Davis, 1965).
Post, E.L. (1994) Solvability, Provability, Definability: The Collected Works of Emil L. Post 
(ed. M. Davis), Birkhäuser.
Priest, G. (2001) An Introduction to Non-Classical Logic. Cambridge University Press.
Presburger, M. (1929) Ueber die Vollständigkeit eines gewissen Systems der 
Arithmetik ganzer Zahlen in welchem die Addition als einziger Operation her-
vortritt, Comptes Rendus, 1 Congres des Math. des Pays Slaves, Warsaw, 192–201, 
395.
Putnam, H. (1957) Decidability and essential undecidability. JSL, 22, 39–54.
Putnam, H. (2000) Nonstandard models and Kripke’s proof of the Gödel theorem. 
Notre Dame J. Formal Logic, 41, 53–58.
Quine, W.V. (1937) New foundations for mathematical logic, Am. Math. Mon., 44, 
70–80.
Quine, W.V. (1951) Mathematical Logic. Harvard University Press (second revised 
edition). 
Quine, W.V. (1954) Quantification and the empty domain. JSL, 19, 177–179 (reprinted 
in Quine, 1965, 220–223).
Quine, W.V. (1963) Set Theory and its Logic. Harvard University Press. (revised edition, 
1969).
Quine, W.V. (1965) Selected Logical Papers. Random House.
Rabin, M. (1958) On recursively enumerable and arithmetic models of set theory. JSL, 
23, 408–416.
Rabin, M. (1977) Decidable theories. HML, 595–629.
Ramsey, F.P. (1925) New foundations of mathematics. Proc. London Math. Soc., 25, 
338–384.
Rasiowa, H. (1956) On the ε-theorems. FM, 43, 156–165.
Rasiowa, H. (1974) An Algebraic Approach to Non-Classical Logics. North-Holland.
Rasiowa, H. and R. Sikorski (1951) A proof of the completeness theorem of Gödel. 
FM, 37, 193–200. 
Rasiowa, H. and R. Sikorski (1952) A proof of the Skolem–Löwenheim theorem. FM, 
38, 230–232.
Rasiowa, H. and R. Sikorski (1963) The Mathematics of Metamathematics. Państwowe 
Wydawnictwo Naukowe.
Rescher, N. (1969) Many-Valued Logics. McGraw-Hill.
Rescorla, M. (2007) Church’s Thesis and the conceptual analysis of computability. 
Notre Dame J. Formal Logic, 48, 253–280.
Rice, H.G. (1953) Classes of recursively enumerable sets and their decision problems. 
Trans. AMS, 74, 358–366.
Richard, J. (1905) Les principes des mathématiques et le problème des ensembles. 
Revue générale des sciences pures et appliqués, 16, 541–543.
Robinson, A. (1951) On the Metamathematics of Algebra. North-Holland.

463
Bibliography
Robinson, A. (1952) On the application of symbolic logic to algebra. International 
Congress on Mathematicians, Vol. 2. Cambridge, MA, pp. 686–694.
Robinson, A. (1966) Non-Standard Analysis. North-Holland.
Robinson, A. (1979) Selected Papers, Vol. 1, Model Theory and Algebra, North-Holland; 
Vol. 2, Nonstandard Analysis and Philosophy, Yale University Press.
Robinson, J. (1947) Primitive recursive functions. Bull. AMS, 53, 925–942.
Robinson, J. (1948) Recursion and double recursion. Bull. AMS, 54, 987–993.
Robinson, J. (1949) Definability and decision problems in arithmetic. JSL, 14, 98–114. 
Robinson, J. (1950) Anessentially undecidable axiom system, Proceedings of the 
International Congress Mathematicians, Vol. 1. Cambridge, MA, pp. 729–730.
Robinson, J. (1950) General recursive functions. Proc. AMS, 1, 703–718.
Robinson, J. (1952) Existential definability in arithmetic. Trans. AMS, 72, 437–449.
Robinson, J.A. (1965) A machine-oriented logic based on the resolution principle. 
J. Assoc. Comp. Mach., 12, 23–41.
Robinson, R.M. (1937) The theory of classes. A modification of von Neumann’s sys-
tem. JSL, 2, 69–72.
Rogers, H., Jr. (1959) Computing degrees of unsolvability. Math. Ann., 138, 125–140.
Rogers (1967) Theory of Recursive Functions and Effective Computability. McGraw-Hill.
Rosenbloom, P. (1950) Elements of Mathematical Logic. Dover.
Rosser, J.B. (1936) Extensions of some theorems of Gödel and Church. JSL, 87–91 
(reprinted in Davis, 1965).
Rosser, J.B. (1937) Gödel theorems for non-constructive logics. JSL, 2, 129–137. 
Rosser, J.B. (1939) An informal exposition of proofs of Gödel’s theorem and Church’s 
theorem. JSL, 53–60 (reprinted in Davis, 1965). 
Rosser, J.B. (1942) The Burali-Forti paradox. JSL, 7, 1–17.
Rosser, J.B. (1953) Logic for Mathematicians. McGraw-Hill (second edition, Chelsea, 1978).
Rosser, J.B. (1954) The relative strength of Zermelo’s set theory and Quine’s New 
Foundations, Proceedings of the International Congress on Mathematicians, 
Amsterdam, the Netherlands, III, pp. 289–294.
Rosser, J.B. (1969) Simplified Independence Proofs. Academic.
Rosser, J.B. and A. Turquette (1952) Many-Valued Logics, North-Holland (second edi-
tion, 1977, Greenwood).
Rosser, J.B. and H. Wang (1950) Non-standard models for formal logics. JSL, 15, 
113–129.
Rotman, J.J. (1973) The Theory of Groups, 2nd edn. Allyn & Bacon.
Rubin, H. and J. Rubin (1963) Equivalents of the Axiom of Choice. North-Holland.
Rubin, J. (1967) Set Theory for the Mathematician. Holden-Day.
Russell, B. (1906) Les paradoxes de la logique. Revue de métaphysique et de morale, 14, 
627–650.
Russell, B. (1908) Mathematical logic as based on the theory of types. Am. J. Math., 
30, 222–262.
Ryll-Nardzewski, C. (1953) The role of the axiom of induction in elementary arithme-
tic. FM, 39, 239–263.
Sambin, G. (1976) An effective fixed point theorem in intuitionistic diagonalizable 
algebras. Stud. Log., 35, 345–361.
Sereny, G. (2004) Boolos-style proofs of limitative theorems. Math. Log. Q., 50, 211–216.
Schütte, K. (1951). Beweistheoretische Erfassung der unendlichen Induktion in der 
Zahlentheorie. Math. Ann., 122, 368–389.

464
Bibliography
Scott, D. and D. McCarty. (2008) Reconsidering ordered pairs. Bull. Symb. Log., 14, 
379–397.
Shannon, C. (1938) A symbolic analysis of relay and switching circuits. Trans. Am. Inst. 
Elect. Eng., 57, 713–723.
Shapiro, S. (1988) The Lindenbaum construction and decidability. NDJFL, 29, 208–213. 
Shapiro, S. (1991) Foundations without Foundationalism: A Case for Second-order Logic. 
Oxford University Press.
Shapiro, S. (ed.) (2007) The Oxford Handbook of Philosophy of Mathematics and Logic. 
Oxford University Press.
Shepherdson, J.C. (1951–1953) Inner models for set theory. JSL, 1, 16, 161–190; II, 17, 
225–237; III, 18, 145–167.
Shepherdson, J.C. (1961) Representability of recursively enumerable sets in formal 
theories. Archiv für mathematische Logik und Grundlagenforschung, 5, 119–127.
Shepherdson, J.C. and H.E. Sturgis (1963) Computability of recursive functions. J. Assoc. 
Comp. Mach., 10, 217–255.
Sher, G. (ed.) (2010) Between Logic and Intuition: Essays in Honor of Charles Parson. 
Cambridge University Press.
Shoenfield, J. (1954) A relative consistency proof. JSL, 19, 21–28.
Shoenfield, J. (1955) The independence of the axiom of choice, Abstract. JSL, 20, 202.
Shoenfield, J. (1961) Undecidable and creative theories, FM, 49, 171–179.
Shoenfield, J. (1967) Mathematical Logic. Addison-Wesley.
Shoenfield, J. (1971a) Unramified forcing, Proceedings of the Symposium on Pure 
Mathematics, Vol. 13. AMS, pp. 357–381.
Shoenfield, J.R. (1971b) Unramified forcing, Axiomatic set theory, Proceedings of 
Symposia in Pure Mathematics, Vol. 13. American Mathematical Society, pp. 357–381.
Sierpinski, W. (1947) L’Hypothèse généralisée du continu et l’axiome du choix. FM, 
34, 1–5.
Sierpinski, W. (1958) Cardinal and Ordinal Numbers. Warsaw.
Sikorski, R. (1960) Boolean Algebra. Springer (third edition, 1969).
Skolem, T. (1919) Untersuchungen über die Axiome des Klassenkalküls und über 
Produktations- und Summationsprobleme, welche gewisse Klassen von 
Aussagen betreffen. Skrifter-Vidensk, Kristiana, I, 1–37.
Skolem, T. (1920) Logisch-kombinatorische Untersuchungen über die Erfüllbarkeit oder 
Beweisbarkeit mathematischer Sätze. Skrifter-Vidensk, Kristiana, 1–36 (English 
translation in Van Heijenoort, 1967, 252–263).
Skolem, T. (1923) Einige Bemerkungen zur axiomatischen Begründung der 
Mengenlehre. Wiss. Vorträge gehalten auf dem 5. Kongress der skandinav. 
Mathematiker in Helsingförs, 1922, 217–232 (reprinted in Van Heijenoort, 1967, 
290–301).
Skolem, T. (1934) Ueber die Nicht-Characterisierbarkeit der Zahlenreihe mit-
tels endlich oder abzählbar unendlich vieler Aussagen mit ausschliesslich 
Zahlenvariablen. FM, 23, 150–161.
Smoryński, C. (1977) The incompleteness theorems. HML, 821–866.
Smoryński, C. (1981) Fifty years of self-reference. NDJFL, 22, 357–374.
Smoryński, C. (1985) Self-Reference and Modal Logic. Springer.
Smoryński, C. (1991) Logical Number Theory I. Springer.
Smullyan, R. (1961) Theory of Formal Systems. Princeton University Press.
Smullyan, R. (1968) First-Order Logic. Springer (reprint Dover, 1995).
Smullyan, R. (1978) What is the Name of This Book. Prentice Hall.

465
Bibliography
Smullyan, R. (1985) To Mock a Mockingbird. Knopf.
Smullyan, R. (1992) Gödel’s Incompleteness Theorems. Oxford University Press.
Smullyan, R. (1993) Recursion Theory for Metamathematics. Oxford University Press.
Smullyan, R. (1994) Diagonalization and Self-Reference. Oxford University Press.
Smullyan, R. (1976) Provability interpretations of modal logic. Israel J. Math., 25, 
287–304.
Sonner, J. (1962) On the formal definition of categories. Math. Z., 80, 163–176.
Specker, E. (1949) Nicht-konstruktiv beweisbare Sätze der Analysis. JSL, 14, 145–148.
Specker, E. (1953) The axiom of choice in Quine’s ‘New Foundations for Mathematical 
Logic’. Proc. Natl. Acad. Sci. USA, 39, 972–975.
Specker, E. (1954) Verallgemeinerte Kontinuumhypothese und Auswahlaxiom. Archiv 
der Math., 5, 332–337.
Specker, E. (1957) Zur Axiomatik der Mengenlehre (Fundierungs- und Auswahlaxiom). 
ZML, 3, 173–210.
Specker, E. (1958) Dualität. Dialectica, 12, 451–465.
Specker, E. (1962) Typical ambiguity, Logic, Methodology and Philosophy of Science, 
Proceedings of the International Congress, 1960, Stanford, CA, pp. 116–124.
Stone, M. (1936) The representation theorem for Boolean algebras. Tran. AMS, 40, 
37–111.
Stroyan, K.D. and W.A.J. Luxemburg (1976) Introduction to the Theory of Infinitesimals. 
Academic.
Suppes, P. (1960) Axiomatic Set Theory. Van Nostrand (Dover, 1972).
Szmielew, W. (1955) Elementary properties of abelian groups. FM, 41, 203–271.
Takeuti, G. and W.M. Zaring (1971) Introduction to Axiomatic Set Theory. Springer.
Takeuti, G. and W.M. Zaring (1973) Axiomatic Set Theory. Springer.
Tao, T. (2006) Solving Mathematical Problems: A Personal Perspective. Oxford University 
Press.
Tarski, A. (1923) Sur quelques théorèmes qui equivalent à l’axiome de choix. FM, 5, 
147–154. 
Tarski, A. (1925) Sur les ensembles finis. FM, 6, 45–95. 
Tarski, A. (1933) Einige Berachtungen über die Begriffe der ω-Widerspruchsfreiheit 
und der ω-Vollstandigkeit. Monatsh. Math. Phys., 40, 97–112.
Tarski, A. (1936) Der Wahrheitsbegriff in den formalisierten Sprachen. Stud. Philos., 1, 
261–405 (English translation in Tarski, 1956).
Tarski, A. (1938) Ueber unerreichbare Kardinalzahlen. FM, 30, 68–89.
Tarski, A. (1944) The semantic conception of truth and the foundations of semantics. 
Philos. Phenom. Res., 4, 341–376.
Tarski, A. (1951) A Decision Method for Elementary Algebra and Geometry. Berkeley, CA. 
Tarski, A. (1952) Some notions and methods on the borderline of algebra and meta-
mathematics, International Congress on Mathematics, Cambridge, MA, 1950, 
AMS, pp. 705–720. 
Tarski, A. (1956) Logic, Semantics, Metamathematics. Oxford University Press (second 
edition, 1983, J. Corcoran (ed.), Hackett).
Tarski, A., A. Mostowski, and R. Robinson (1953) Undecidable Theories. North-Holland.
Tarski, A. and R.L. Vaught (1957) Arithmetical extensions of relational systems. Comp. 
Math., 18, 81–102.
Tennenbaum, S. (1959) Non-archimedean models for arithmetic. (Abstract) Not. Am. 
Math. Soc., 270.
Torkel, F. (2005) Gödel’s Theorem: An Incomplete Guide in Its Use and Abuse. CRC Press.

466
Bibliography
Troelstra, A.S. (1969) Principles of Intuitionism. Springer.
Troelstra, A.S. and D. van Dalen. (1988) Constructivism in Mathematics, Vols. 1–2. 
Elsevier.
Turing, A. (1936–1937) On computable numbers, with an application to the 
Entscheidungsproblem. Proc. London Math. Soc., 42, 230–265; 43, 544–546.
Turing, A. (1937) Computability and λ-definability. JSL, 2, 153–163.
Turing, A. (1948) Practical forms of type theory. JSL, 13, 80–94.
Turing, A. (1950a) The word problem in semigroups with cancellation. Ann. Math., 52, 
491–505 (review by W.W. Boone, Ann. Math., 1952, 74–76).
Turing, A. (1950b) Computing machinery and intelligence. Mind, 59, 433–460.
Ulam, S. (1930) Zur Masstheorie in der allgemeinen Mengenlehre. FM, 16, 140–150.
van Atten, M. (2003) On Brouwer. Wadsworth.
van Atten, M., P. Boldini, M. Bourdeau, and G. Heinzmann (2008) One Hundred Years 
of Intuitionism. Birkhäuser.
van Benthem, J. and K. Doets. (1983) Higher-order logic. HPL, I, 275–330.
van der Waerden, B.L. (1949) Modern Algebra. Ungar.
van Heijenoort, J. (ed.) (1967) From Frege to Gödel (A Source Book in Mathematical Logic, 
1879–1931). Harvard University Press.
Väth, M. (2007) Nonstandard Analysis. Birkhauser.
Vaught, R.L. (1954) Applications of the Löwenheim–Skolem–Tarski theorem to prob-
lems of completeness and decidability. Indag. Math., 16, 467–472.
Voevodski, V. (2013) Univalent Foundations and Set Theory. Association for Symbolic 
Logic.
Wajsberg, M. (1933) Untersuchungen über den Funktionenkalkül für endliche 
Individuenbereiche. Math. Ann., 108, 218–228.
Wang, H. (1949) On Zermelo’s and von Neumann’s axioms for set theory. Proc. Natl. 
Acad. Sci. USA, 35, 150–155. 
Wang, H. (1950) A formal system of logic. JSL, 15, 25–32.
Wang, H. (1957) The axiomatization of arithmetic. JSL, 22, 145–158.
Weston, T.S. (1977) The continuum hypothesis is independent of second-order ZF. 
Notre Dame J. Formal Logic, 18, 499–503.
Whitehead, A.N. and B. Russell (1910–1913) Principia Mathematica, Vols. I–III. 
Cambridge University Press.
Wiener, N. (1914) A simplification of the logic of relations. Proc. Camb. Philos. Soc., 17, 
387–390 (reprinted in Van Heijenoort, 1967, 224–227).
Yanofsky, N.S. (2003) A Universal approach to self-referential paradoxes, incomplete-
ness and fixed points. Bull. Symb. Log., 9, 362–386.
Yasuhara, A. (1971) Recursive Function Theory and Logic. Academic.
Zach, R. (1999) Completeness before Post: Bernays, Hilbert, and the development of 
propositional logic. Bull. Symb. Log., 5, 331–366.
Zeeman, E.C. (1955) On direct sums of free cycles. J. London Math. Soc., 30, 195–212.
Zermelo, E. (1904) Beweis, dass jede Menge wohlgeordnet werden kann. Math. Ann., 
59, 514–516 (English translation in Van Heijenoort, 1967, 139–141). 
Zermelo, E. (1908) Untersuchungen über die Grundlagen der Mengenlehre. Math. 
Ann., 65, 261–281 (English translation in Van Heijenoort, 1967, pp. 199–215).
Zuckerman, M. (1974) Sets and Transfinite Numbers. Macmillan.

467
Notations
Y	
xiv
P (Y)	
xiv, 240
∈, ∉	
xvii, 231
{x|P(x)}	
xvii
⊂, ⊆	
xvii, 232
=, #	
xvii, 93
∪, ∩	
xvii
0	
xvii, 234
x − y	
xvii
{b1, …, bk}	
xvii
{x, y}, {x}	
xvii, 235
〈b1, b2〉, 〈b1, …, bk〉	
xvii, 235–236
Xk	
xvii, 240
Y × Z	
xvii, 240
R−1	
xviii
ω	
xviii, 253
IX	
xviii
[y]	
xviii
f(x), f(x1, …, xn)	
xix
fZ	
xix
f ○ g	
xix
1 − 1	
xix
X ≅ Y	
xix
ℵ, 2ℵ
0
0	
xx
¬, ∧	
1
T, F	
1
∨, ⇒	
1, 2
⇔	
3
↓, |	
21, 22
dnf, cnf	
23
Res(A  )	
25
wf	
27
⊢	
28
L	
28
MP	
29
Hyp	
31
L1 – L4	
39
(∀x), (∃x)	
41
A
f
a
k
n
k
n
j
,
,
	
42

468
Notations
A
f
a
j
n
j
n
j
(
)
(
)
( )
M
M
M
,
,
	
49
Σ	
56
s*	
59
⊨M A	
57
⊨M A  [b1, …, bk]	
58
Gen	
67
A4, E4	
74
⊢C	
78
g	
84, 192, 329
K1, K2	
96
G, GC, F, RC, F<	
96, 97
(∃1x)	
98
(∃nx)	
100
ι	
105, 132
≈	
111, 137
K2, Kn	
112
M1 ≡ M2	
123
K∞	
123
M1 ⊆ M2	
124
M1 ≤e M2	
125
∏
∈
j J
j
D 	
131
=ℱ, fℱ	
131
Π
j J
j
D
∈
/	
131
{cj}j∈J	
131
Π
j J
j
D
∈
/	
132
Nj/ℱ	
132
c#, M#	
134
R, ℛ	
136
R*, ℛ*, R#, ℛ#	
136
st(x)	
137
×	
141
f	
147
pp#	
148
PPS#	
147
ETH	
148
∀P	
149
ℒA	
149
S, t′, +, 0	
153
PA	
154
n	
159
<, ≤, >, ≥	
162
t|s	
166
S+	
169

469
Notations
Z	
171
N, Uj
n	
171
CR	
173
μ	
175
δ, −	
177
|x – y|	
177
sg, sg	
177
min, max	
177
rm, qt	
177
Σ
Σ
Π Π
y z y z y z y z
>
≤
>
≤
,
,
,
	
177
Σ
u y v
< < 	
179
τ(x)	
179
(∀y)y<z, (∀y)y≤z, (∃y)y<z, (∃y)y≤z	
179
μyy<z	
180
Pr	
180
px	
181
(x)j, ℓh(x)	
182
x * y	
182
n

, Π(n), RP(y, z)	
183
σ2, σ1
2, σ2
2 	
184
σk, σi
k 	
185
f#	
185
β, Bt	
187
IC, FL, PL	
193
EVbl, EIC, EFL, EPL	
194
ArgT, ArgP, Gd	
194
MP(x, y, z), Gen(x, y), Trm(x)	
194
Atfml, Fml	
195–196
Subst, Sub	
196
Fr, Ff, Axj	
196–198
LAX, Neg, Cond, Clos	
198
Num, Nu, D	
199
PrAx, Ax, Prf, Pf	
199–200
RR, Q	
203
R	
204
⌜𝒞⌝	
205
𝒢	
205
ℛ	
211
Tr	
214
𝒞onK, ℬew	
215
(HB1)−(HB3)	
216
ℋ	
216
TK	
218
PF, PP, PS	
223

470
Notations
PMP	
225
NBG	
231
M, Pr	
232
∩, X, 𝒟, ∪, V, −	
237
Rel	
240
∪(Y), 𝒫(Y)	
240, 241
{〈x1, …, xn〉|φ}	
241
I, 
⌣
Y	
241, 242
ℛ(Y)	
242
∪v∈x v	
243
Fnc	
245
X: Y → Z	
245
Y ↓ X	
245
X′Y, X″Y, Fnc, (X)	
245
Irr, Tr, Part, Con, Tot, We	
247
Sim	
248
Fld, TOR, WOR	
249
E, Trans, SectY, SegY	
249–250
Ord, On	
250
1	
251
<0, ≤0	
252
x′	
253
Suc, K1	
253
2, 3	
254
Lim	
254
+0, ×0, exp	
257
EX	
257
≅
F,≅	
260
XY	
261
≼, ≺	
262
X +c Y	
265
Fin	
266
Inf, Den, Count, Dedfin, DedInf	
268
ℋ′x	
271
Init	
271
ωα	
273
AC, Mult, WO, Trich, Zorn	
282
UCF	
285
Reg	
286
TC(u)	
286
PDC, DAC	
287
Ψ	
287
H, Hβ	
288
ρ′x	
288

471
Notations
GCH	
292
MK	
294
ZF, Z	
295
ST	
298
NF	
300
ST−, NFU, ML	
302–303
UR	
303–304
RegUR	
308
Λ	
312
α
β
↠
T
	
314
AlgT	
314
|, B	
315
k, k
kn
1,
,
…
(
)	
315
fT, 1	
315
fT, n	
315
r, l, aj, P, ∧, ρ	
319, 320
λ, S	
320
~, W, X	
321
ℛ	
321
ℒ, T, σ, C	
321, 322
K, Kn	
322, 323
ST	
327
IS, Sym, Quad, TM, TD, NTD	
330–331
Stop, Comp, Num, TR, U, Tn	
331–332
φz
n	
338
Sn
m	
338
Σ
Π
k
n
k
n
,
	
342
r.e.	
349
Wn	
351
HG	
356
Eqt, Syst, Occ, Cons1, Cons2	
360–362
Ded, Sn, U	
361
→, → ·	
362
𝕬: P ⊐	
363
𝕬:P ⊢ R	
363
𝕬(P) ≈ 𝔅(P)	
367
𝔖𝔅	
368
𝔅 ο 𝕬, 𝕹B	
369
ψ𝔅	
370
L1C	
379
L2C, Σ2	
379, 380
L2	
381
COMP, FUNDEF	
383
Gen 2a, Gen 2b	
383

472
Notations
PC2	
384
AR2	
384
L2A	
386
SV	
386
Cont	
388
∑Z
H 	
389


K23184
w w w . c r c p r e s s . c o m
TEXTBOOKS in MATHEMATICS
Mathematics
The new edition of this classic textbook, Introduction to Mathemati-
cal Logic, Sixth Edition explores the principal topics of mathematical 
logic. It covers propositional logic, first-order logic, first-order number 
theory, axiomatic set theory, and the theory of computability. The text 
also discusses the major results of Gödel, Church, Kleene, Rosser, 
and Turing.
The sixth edition incorporates recent work on Gödel’s second incom-
pleteness theorem as well as restoring an appendix on consistency 
proofs for first-order arithmetic. This appendix last appeared in the 
first edition. It is offered in the new edition for historical considerations. 
The text also offers historical perspectives and many new exercises 
of varying difficulty, which motivate and lead students to an in-depth, 
practical understanding of the material.
I N T R O D U C T I O N  T O 
MATHEMATICAL LOGIC
SIXTH EDITION

