Peter Dalmaris
Lecture 35
Arduino Step by Step
A simple reporting web server 
The Web is an open and well understood technology for disseminating information. 
Equipped with an Ethernet shield, your Arduino can host a simple web server to which 
clients can connect and interact with. 
In the simplest of cases, an Arduino web server will be used to report readings from its 
sensors to whomever is asking. In this lecture, we’ll look into the scenario of using a web 
server running on the Arduino that reports values from its sensors. We will do this reporting 
in two diﬀerent modes: First, for humans to view using HTML, and second for machines to 
read where the data reported will be formatted as simple comma separated values. 
Before we get started with the demos, let’s go through a really quick discussion on running 
a web server on the Arduino. 
Principals of Arduino web servers 
The Arduino is a remarkable piece of hardware, but it isn’t built to be a full blown web 
server. It has a single tiny processor with very limited memory when compared to build-for-
purpose web servers. And this processing power is really optimised for dealing with 
sensors and input/output components, not with the kind of processing that a web server is 
required to do. 
Another limitation is the programming language. The Arduino language is standard C with 
added libraries, like the Ethernet library we saw in the Ethernet Shield lecture. It is a bare-
minimal language that is fairly close to the hardware so that it can be compiled eﬃciently 
for the AtMega micro-controllers, and as a result it doesn’t have the kind of programming 
“sugar” that high-level languages like Ruby and PHP have. This “sugar” makes it a lot more 
easier for programmers to build elaborate web applications with relative ease when using, 
for example, Ruby, as opposed to C. 
For example, take images. A jpeg image you might ﬁnd in a simple web site may be 15 or 
20Kbytes. The Arduino Uno only has room for 32KBytes in its RAM, so the image will not ﬁt 
and we will need to store it in an SD card or on another web server and make a reference to 
it from the Arduino sketch. 
What about SSL encryption? This is a standard feature for most non-trivial web sites these 
days, but the Arduino simply does not have the computational power required to support 
SSL. 
These reasons, in a nutshell, require that any server we host on an Arduino, be it a web 
server, a telnet server, or anything else, has to be minimal.  
$1

Peter Dalmaris
Lecture 35
Arduino Step by Step
Minimal, because we don’t have much memory to spare, because programming anything 
more complicate will take a lot of programming eﬀorts, and because we want to maintain 
CPU resources for sensing and control, rather than reporting. 
However, with all that said, it is possible to interface the Arduino with a more capable 
computer and oﬄoad to that computer the more elaborate features we would like to enrich 
our Arduino-power web site with. 
Here is a possible architecture for something like this: 
 
With 
this kind of arrangement, you use the Arduino for sensing and control. You also have a very 
simple web server running on it, like the one we’ll see in this lecture. But instead of opening 
it up to the whole world, you allow only a single client to connect to it. The green device in 
the middle of this schematic is a Raspberry Pi, a single board computer that costs around 
$45. Yes, this is an actual computer which can run Linux, and that means that you can have 
a full-blown web server on it build with a high-level language. You can build your 
application on the Raspberry Pi (or similar) so that clients from the Internet will connect to it, 
and use it as a proxy for your Arduino. This architecture makes it possible and easy to have 
an Arduino-powered web site with SSL, graphics, CSS, and all the bells and whistles to 
which we are accustomed. 
Showing you exactly how to do this, is a topic for another lecture though. Just know that it 
is possible for the time being. 
With these points in mind, let’s go ahead and have a look at an Arduino bare-minimal web 
server. 
Demo 1: The essential Arduino web server 
In this Demo, I’ll show you how to setup a basic reporting web server on your Arduino. We’ll 
look at the simple web server from one of the examples that come with the IDE. In Demo 2 
we’ll make a few changes to it so that it reports data from a humidity/temperature sensor, 
and a photo-resistor. 
To assemble the hardware, just plug the Ethernet shield on the Arduino. The sketch we will 
play with takes measurements from the analog pins and shows them in a web page. You 
$2

Peter Dalmaris
Lecture 35
Arduino Step by Step
can connect whatever analog sensors you have handy, but that is not necessary. In the 
absence of actual sensors providing readings, the values on the analog pins will be random. 
To load this sketch, go to File —> Example —> Ethernet —> WebServer. 
This block of the sketch is familiar: it is identical to the deﬁnition and setup parts of the sketch in 
Lecture 33. It sets up the Ethernet connection and a server. The only diﬀerence is that in this sketch, 
the server will be listening for connections on TCP port 80 (highlighted in red). 
The next block is a lot more interesting. It is there where the parsing logic of a web server is 
implemented. Have a quick read but don’t spent too much time on it for now. There is something 
else I should show you ﬁrst before the parser can make sense. 
… sketch continues next page … 
$3
#include <SPI.h> 
#include <Ethernet.h> 
// Enter a MAC address and IP address for your controller below. 
// The IP address will be dependent on your local network: 
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED }; 
IPAddress ip(192,168,1,177); 
// Initialize the Ethernet server library 
// with the IP address and port you want to use  
// (port 80 is default for HTTP): 
EthernetServer server(80); 
void setup() { 
 // Open serial communications and wait for port to open: 
  Serial.begin(9600); 
   while (!Serial) { 
    ; // wait for serial port to connect. Needed for Leonardo only 
  } 
  // start the Ethernet connection and the server: 
  Ethernet.begin(mac, ip); 
  server.begin(); 
  Serial.print("server is at "); 
  Serial.println(Ethernet.localIP()); 
}

Peter Dalmaris
Lecture 35
Arduino Step by Step
$4
void loop() { 
  EthernetClient client = server.available(); 
  if (client) { 
    Serial.println("new client"); 
    boolean currentLineIsBlank = true;    // an http request ends with a blank line 
    while (client.connected()) { 
      if (client.available()) { 
        char c = client.read(); 
        Serial.write(c); 
        // if you've gotten to the end of the line (received a newline 
        // character) and the line is blank, the http request has ended, 
        // so you can send a reply 
        if (c == '\n' && currentLineIsBlank) { 
          // send a standard http response header 
          client.println("HTTP/1.1 200 OK"); 
          client.println("Content-Type: text/html"); 
          client.println("Connection: close");  // the connection will be closed    
                                                //after completion of the response 
 
  client.println("Refresh: 5");  // refresh the page automatically  
                                        // every 5 sec 
          client.println(); 
          client.println("<!DOCTYPE HTML>"); 
          client.println("<html>"); 
          // output the value of each analog input pin 
          for (int analogChannel = 0; analogChannel < 6; analogChannel++) { 
            int sensorReading = analogRead(analogChannel); 
            client.print("analog input "); 
            client.print(analogChannel); 
            client.print(" is "); 
            client.print(sensorReading); 
            client.println("<br />");        
          } 
          client.println("</html>"); 
          break; 
        } 
        if (c == '\n') { 
          // you're starting a new line 
          currentLineIsBlank = true; 
        }  
        else if (c != '\r') { 
          // you've gotten a character on the current line 
          currentLineIsBlank = false; 
        } 
      } 
    } 
    // give the web browser time to receive the data 
    delay(1); 
    // close the connection: 
    client.stop(); 
    Serial.println("client disonnected"); 
  } 
}

Peter Dalmaris
Lecture 35
Arduino Step by Step
Parsing a HTTP request 
Web pages travel from web server to web client on top of HTTP: the Hyper Text Transfer 
Protocol. This protocol has certain rules which web servers and clients must abide by if 
they are to work together. A web server or client parser is a computer program that knows 
how to understand HTTP. When your web browsers send a request to a web server, it 
makes a HTTP request. 
Lets have a look at what a HTTP request looks like ﬁrst.  
I’ll use Requestbin, requestb.in, a website that shows me the bare content of a HTTP 
request, a kind of X-ray vision for the Web. Visit this site, and you will see this: 
Click on the green button, this will create a RequestBin for you, which is a URL to which 
you can send an HTTP request.  
Go ahead, create a new RequestBin. 
As a response, you will see something like this (next page): 
$5

Peter Dalmaris
Lecture 35
Arduino Step by Step
In the Bin URL box, you have exactly that, a URL to which you can send HTTP requests.  
In a new window or tab of your web browser (keep the page above handy), copy/paste the 
URL in the Bin URL box, and hit Enter. 
You will get something like this: 
This just means that RequestBin received your HTTP request. Now go back to the tab or 
window that contains the Bin URL box and refresh it. You will see something like this: 
(see next page) 
 
$6

Peter Dalmaris
Lecture 35
Arduino Step by Step
What you see here are the raw contents of your HTTP request. In the red box, I have 
highlighted the most important part of this request for our present discussion: It is the ﬁrst 
line that your web browser trasmitted to the server. It starts with a verb, in this case “GET”, 
and a path for the resource that was requested, in this case pebptxpe. 
There are other bits of information provided here, like in the headers section.  
All this is text that the Arduino will have to parse in order to correctly respond to a client’s 
request. 
Back to our ﬁrst example now… 
Our Arduino sample web server sketch is only programmed to identify the end of a client 
HTTP request, and then to send out its HTTP response.  
$7

Peter Dalmaris
Lecture 35
Arduino Step by Step
According to the HTTP protocol, a HTTP GET request must end with a blank line. In the box 
below, you can see the complete HTTP GET request, and the last blank line. 
This blank line is identiﬁed by this statement in the sketch: 
  if (c == '\n' && currentLineIsBlank)  
This means: “if the current line is blank and the current character is a new line”, then the 
expression is true, so the sketch will go ahead and print its response. 
The boolean currentLineIsBlank is there to keep track of new lines: when a new line 
character is found (“\n”), then currentLineIsBlank becomes true. When anything else is 
found, it becomes false. This is happening in this code block: 
if (c == '\n') {          
          currentLineIsBlank = true; 
} else if (c != '\r') { 
           currentLineIsBlank = false; 
} 
So, the Arduino, will know that the HTTP request is ﬁnished if it ﬁnds two new lines (“\n”) 
are found, one right after the other. 
You may need to read these last coupe of pages a few times before you continue, but 
before doing that, consider this: we did all this just so that we can detect when a HTTP 
request has ﬁnished so that the server can respond. We haven’t done any serious parsing 
yet!!! 
$8
GET / HTTP/1.1 
Host: 192.168.111.177 
Connection: keep-alive 
Cache-Control: max-age=0 
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 
(KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36 
Referer: http://192.168.111.177/ 
Accept-Encoding: gzip,deﬂate,sdch 
Accept-Language: en-US,en;q=0.8,el;q=0.6 
blank line

Peter Dalmaris
Lecture 35
Arduino Step by Step
Creating the response 
This request is more like a trigger, it asks the server to send back whatever it wants to send. 
For the server to send a response back, it needs to be formatted in accordance with the 
HTTP rules. A response needs to start with a response header, followed by the response 
body. 
This code implements the response header: 
In the ﬁrst line, the server sends a “200” HTTP code, which tells the client that it understood 
its request and there is no problem to worry about. Always nice to hear that! 
Next line informs the client of the type of content that will be following in the body of the 
response. In this case, it will be HTML text. 
Next, the server tells the client that once it sends what it has to send, it will close the 
connection. If the client needs something else, it will have to initiate a new connection via a 
new HTTP request. 
Next line contains a “non-standard” instruction. “Refresh” tells the browser to send a new 
GET request to the server in order to get an updated page. Most browsers are able to 
understand this instruction, even though it is not a standard HTTP instruction. 
Finally, the server prints a new line. Don’t forget that! In order for the client to know that the 
HTTP response header has completed its transmission, there has to be a blank line! 
The body of the response follows, and the Arduino will construct the HTML for it line-by-
line. Here’s the code for this: 
$9
client.println("HTTP/1.1 200 OK"); 
client.println("Content-Type: text/html"); 
client.println("Connection: close");  // the connection will be closed after completion of the 
response 
client.println("Refresh: 5");  // refresh the page automatically every 5 sec 
client.println(); 
client.println("<!DOCTYPE HTML>"); 
client.println("<html>"); 
          // output the value of each analog input pin 
for (int analogChannel = 0; analogChannel < 6; analogChannel++) { 
            int sensorReading = analogRead(analogChannel); 
            client.print("analog input "); 
            client.print(analogChannel); 
            client.print(" is "); 
            client.print(sensorReading); 
            client.println("<br />");        
} 
client.println("</html>"); 
break;

Peter Dalmaris
Lecture 35
Arduino Step by Step
The ﬁrst bit of text printed to the client stream is the HTML declaration. This is not actually 
an HTML tag, but an instruction to the browser informing it about the version of HTML used 
in the page that follows. 
The actual HTML follows. You can see that there is a “for” loop that samples the analog 
ports, and the prints out their captured values to the client stream. 
When the loop ends, we close the HTML page. 
Finally, there is a break statement. This breaks the while loop that started with the “while 
(client.connected())” instruction earlier. The sketch is about to close the connection by 
calling the stop() function of the client object, but before doing so it waits for 1 millisecond 
for the client to ﬁnish receiving the response. 
Upload the sketch and ﬁre up your browser. Visit your Arduino’s web site, and this is what 
you should see: 
I have not connected any sensors to the analog ports, so the values you see here are 
random. 
With this detailed discussion on getting a web server running on the Arduino for simple 
reporting, let’s go ahead and try out a simple modiﬁcation from this basic example sketch. 
Lets connect a humidity and temperature sensor, and a photo-resistor, and report the 
values they report through our web server using HTML and CSV. The HTML will be useful 
for humans, while the CSV is more machine-friendly. 
$10

Peter Dalmaris
Lecture 35
Arduino Step by Step
Demo 2: Practical reporting for humans and 
machines 
In this demo, I would like to use my trusty DHT22 and photo-resistor sensors. I would like 
to be able to use my web browser and get readings from the sensors like this: 
If a machine makes the same request, I would like it to receive this response instead: 
The two sketches that correspond to these 
two scenarios are almost identical. The only 
diﬀerence is that one outputs HTML, while 
the other one outputs text as comma-
separated values. 
Here’s the hardware schematic: 
It includes the DHT sensor connected to 
digital pin 2, and a photo-resistor with a 
10KΩ resistor as voltage divider connected 
to analog pin 0. 
Have a look at the HTML version of the 
sketch in the next page. 
$11

Peter Dalmaris
Lecture 35
Arduino Step by Step
$12
… first part of this sketch is omitted because it is identical to Demo 1 …  
void loop() { 
  EthernetClient client = server.available(); 
  if (client) { 
    Serial.println("new client"); 
    boolean currentLineIsBlank = true; 
    while (client.connected()) { 
      if (client.available()) { 
        char c = client.read(); 
        Serial.write(c); 
        if (c == '\n' && currentLineIsBlank) { 
          client.println("HTTP/1.1 200 OK"); 
          client.println("Content-Type: text/html"); 
          client.println("Connection: close"); 
          client.println("Refresh: 5");  
          client.println(); 
          client.println("<!DOCTYPE HTML>"); 
          client.println("<html>"); 
          int sensorReading = analogRead(0); 
          client.print("analog input "); 
          client.print(0); 
          client.print(" is "); 
          client.print(sensorReading); 
          client.println("<br />");        
          float h = dht.readHumidity(); 
          float t = dht.readTemperature(); 
          if (isnan(t) || isnan(h)) { 
            Serial.println("Failed to read from DHT"); 
          }  
          else { 
            client.print("Humidity: "); 
            client.print(h); 
            client.println("<br />");        
            client.print("Temperature: "); 
            client.print(t); 
            client.print(" *C"); 
            client.println("<br />"); } 
          client.println("</html>"); 
          break; 
        } 
        if (c == '\n') { 
          currentLineIsBlank = true; 
        }  
        else if (c != '\r') { 
          currentLineIsBlank = false; 
        } 
      } 
    } 
    delay(1); 
    // close the connection: 
    client.stop(); 
    Serial.println("client disonnected"); 
  } 
} 

Peter Dalmaris
Lecture 35
Arduino Step by Step
What is new in the sketch compared to the one in demo 1 is highlighted in red. The new 
sketch just takes readings from the DHT sensor and from the analog pin 0 and prints them 
out in the client stream.  
What about the CSV version of the sketch? 
Just replace the red block with this: 
We removed any printouts of HTML tags, and add commas to delimit the values.  
Although it is out of scope for this lecture, it is worth mentioning that for transmitting simple 
values like the numbers in this example, the CSV format is a very eﬃcient of going about 
sending data from one machine to the other. 
Conclusion 
You covered a lot of ground in this lecture. You learned about how HTTP requests are 
structured, and how the Arduino can host a very simple reporting server. There were a lot of 
details involved, but what I think would be most useful to remember is the fact that a web 
server is essentially a parser of text which interprets HTTP requests and responses. 
Although the examples in this lecture did not do much parsing other than ﬁguring out where 
a HTTP request ends so that a responds can be sent, what you learn will prove very useful 
in the next lecture. In that lecture, you will learn about creating a server that parses a 
request so that it can ﬁnd out the speciﬁc parameters of what is it that it is being requested 
to do. You will learn, for example, how to get the server (i.e. the Arduino) to turn on the LED 
at pin 9. I call this kind of server “controlling”, because it allows you to control the Arduino 
via the web, not just to get readings of its status. 
$13
int sensorReading = analogRead(0); 
client.print(sensorReading); 
client.print(",");        
float h = dht.readHumidity(); 
float t = dht.readTemperature(); 
if (isnan(t) || isnan(h)) { 
     
Serial.println("Failed to read from DHT"); 
}  
else  
{ 
 
client.print(h); 
 
client.print(",");        
 
client.print(t); 
}

Peter Dalmaris
Lecture 35
Arduino Step by Step
Exercises 
Try to add a couple of sensors of your choice to the HTML version of the Demo 2 sketch. 
Adjust the sketch so that the values are printed nicely to the client. If you have CSS skills, 
perhaps improve the looks of the output by incorporating some styling to the page that the 
Arduino generates.
$14

