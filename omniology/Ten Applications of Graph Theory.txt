Ten Applications of Graph Theory 

Mathematics and Its Applications 
(Ea8t European Series) 
Managing Editor: 
M. HAZEWINKEL 
Oentre for Mathematics and Oomputer Science, Amsteraam, The Netherlands 
Editorial Board: 
A. BIALYNICKI.BIRULDA, Institute of Mathematics PKIN, Warsaw, Poland 
J. KURZWEIL, Mathematics Institute, Academy of Sciences, Prague, Czechoslovakia 
L. LEINDLER, Bolyai Institute, Szegea, Hungary 
L. LOVASZ, Bolyai, Institute, Szeged, Hungary 
D. S. MITRINOVIC, University of Belgrade, Yugoslavia 
S. ROLEWICZ, Polish Academy of Sciences, Warsaw, Poland 
BL. H. SENDOV, Bulgarian Academy of Sciences, Sofia, Bulgaria 
I. T. TODOROV, Academy of Sciences, Sofia, Bulgaria 
H. TRIEBEL, Universitiit Jena, D.D.R. 

Hansjoachim Walther 
Institute 0/ Technology, Ilmenau, G.D.H. 
Ten Applications 
of Graph Theory 
D. Reidel Publishing Company 
A MEMBER OF THE KLUWER ACADEMIC PUBLISHERS GROUP 
Dordrecht / Boston / Lancaster 

Library of Congress Cataloging in Publication Data 
Walther, Hansjoachim. 
Ten applications of graph theory. 
(Mathematics and its applications. East European 
series; v. ) 
Translation of: Anwendungen der Graphentheorie. 
Bibliography: p. 
Includes index. 
1. Graph theory. I. Title. II. Series: Mathematics 
and its applications (D. Reidel Publishing Company). 
East European series ; v. 
QA166.W3213 1984 
5U'.5 
83-13854 
ISBN-13 :978-94-009-7156-1 
e-ISBN-13 :978-94-009-7154-7 
DOl: 10.1007/978-94-009-7154-7 
Translated from the German by Ursula Nixdorf 
Distributors for the Socialist Countries 
VEB Deutscher Verlag der Wissenschaften, Berlin 
Distributors for the U.S.A. and Canada 
Kluwer Academic Publishers, 
190 Old Derby Street, Hingham, MA 02043, U.S.A. 
Distributors for all remaining countries 
Kluwer Academic Publishers Group, 
P. O. Box 322, 3300 AH Dordrecht, Holland 
All Rights Reserved 
Â® 1984 by VEB Deutscher Verlag der Wissenschaften, Berlin 
Softcover reprint of the hardcover 1st edition 1984 
No part of the material protected by this copyright notice may be 
reproduced or utilized in any form or by any means, electronic or 
mechanical, including photocopying, recording or by any information 
storage and retrieval systems, without written permission from the 
copyright owner. 

Contents 
Editor's Preface 
IX 
Preface 
XI 
Chapter O. Introduction 
1 
Chapter 1. Flows and tensions on networks 
5 
1.1. 
Basic concepts 
5 
1.2. 
Properties of flows and tensions 
23 
1.3. 
The maximum flow problem 
31 
1.3.1. Introduction 
31 
1.3.2. The theorem of Ford and Fulkerson 
33 
1.3.3. Generalized theorem of Ford and Fulkerson 
38 
1.3.4. The multi-terminal problem 
49 
1.4. 
The maximum tension problem 
54 
1.4.1. The existence theorem for a tension 
54 
1.4.2. The problems of the shortest and the longest paths as poten-
tial problems 
55 
1.4.3. Algorithm for determining a shortest simple path 
57 
1.5. 
The conception of network analysis 
60 
1.6. 
Bibliography 
68 
Chapter 2. The linear transportation problem 
69 
2.1. 
Formulation of the problem 
69 
2.2. 
The solution according to Busacker and Gowen 
70 
2.3. 
The solution according to Klein 
72 
2.4. 
Proof of minimality 
77 
2.5. 
Conclusions 
80 
2.6. 
Bibliography 
81 
Chapter 3. The cascade algorithm 
82 
3.1. 
Formulation of the problem 
82 
3.2. 
TJle standard method 
82 
3.3. 
The revised matrix algorithm 
88 

VI 
Contents 
3.4. 
The cascade algorithm 
3.5. 
Bibliography 
Chapter 4. Nonlinear transportation problems 
4.1. 
Formulation of the problem 
4.2. 
A convex transportation problem 
4.3. 
A multi-flow problem 
4.4. 
Bibliography 
90 
99 
100 
100 
100 
110 
125 
Chapter 5. Communication and supply networks 
126 
5.1. 
Formulation of the problem 
126 
5.2. 
Networks without Steiner's points 
131 
5.3. 
Networks containing Steiner's points 
137 
5.4. 
Influence exerted by the cost function on the structure 
of the optimal network 
145 
5.5. 
Bibliography 
147 
Chapter 6. The assignment and the travelling salesman problems 
149 
6.1. 
The assignment problem 
149 
6.1.1. Formulation of the problem 
149 
6.1.2. A solution algorithm for the assignment problem 
150 
6.2. 
The travelling salesman problem 
157 
6.2.1. Formulation of the problem 
157 
6.2.2. A branch-and-bound solution algorithm for the travelling 
salesman problem 
159 
6.2.3. A heuristic method for solving the travelling salesman 
problem 
166 
6.3. 
Final observations 
169 
6.4. 
Bibliography 
170 
Chapter 7. Coding and decision graphs 
172 
7.1. 
Formulation of the problem 
172 
7.2. 
Algorithm for the generation of a cycle-free questionnaire 176 
7.3. 
Optimal questionnaires 
179 
7.4. 
An example from coding 
184 
7.5. 
Bibliography 
186 
Chapter 8. Signal flow graphs 
187 
8.1. 
Formulation of the problem 
187 
8.2. 
The algorithm of Mason for solving linear systems of 
equations 
190 
8.3. 
Bibliography 
196 
Chapter 9. Minimum sets of feedback arcs 
9.1. 
Formulation of the problem 
9.2. 
The algorithm of Lempel and Cederbaum 
197 
197 
198 

9.3. 
The idea of Younger 
9.4. 
Bibliography 
Contents 
VII 
201 
216 
Chapter 10. Embedding of planar graphs in the plane 
217 
10.1. 
Formulation of the problem 
217 
10.2. 
Theorems of Kuratowski, MacLane and Whitney 
217 
10.3. 
The planarity algorithm of Dambitis 
222 
10.4. 
Planarity studies made by decomposing graphs 
234 
10.5. 
The embedding algorithm of Demoucron, Malgrange 
and Pertuiset 
239 
10.6. 
The planarity algorithm of Tutte 
241 
10.7. 
Bibliography 
243 
Algorithms 
245 
Author Index 
247 
Subject Index 
249 

Editor's Preface 
Growing specialization and diversification have brought a host of monographs and 
textbooks on increasingly specialized topics. However, the "tree" of knowledge 
of mathematics and related fields does not grow only by putting forth new bran-
ches. It also happens, quite often in fact, that branches which were thought to 
be completely disparate are suddenly seen to be related. 
Further, the kind and level of sophistication of mathematics applied in various 
sciences has changed drastically in recent years: measure theory is used (non-tri-
vially) in regional and theoretical economics; algebraic geometry interacts with 
physics; the Minkowsky lemma, coding theory and the structure of water meet 
one another in packing and covering theory; quantum fields, crystal defects 
and mathematical programming profit from homotopy theory; Lie algebras are 
relevant to filtering; and prediction and electrical engineering can use Stein spaces. 
And in addition to this there are such new emerging subdisciplines as "completely 
integrable systems", "chaos, synergetics and large-scale order", which are almost 
impossible to fit into the existing classification schemes. They draw upon widely 
different sections of mathematics. 
This program, Mathematics and Its Applications, is devoted to such (new) 
interrelations as exempla gratia: 
-
a central concept which plays an important role in several different mathe-
matical and/or scientific specialized areas; 
-
new applications of the results and ideas from one area of scientific endeavor 
into another; 
-
influences which the results, problems and concepts of one field of enquiry 
have and have had on the development of another. 
The Mathematics and Its Applications programme tries to make available a 
careful selection of books which fit the philosophy outlined above. With such books, 
which are stimulating rather than definitive, intriguing rather than encyclopaedic, 
we hope to contribute something towards better communication among the prac-
titioners in diversified fields. 
Because of the wealth of scholarly research being undertaken in the Soviet 

x 
Editor's Preface 
Union, Eastern Europe, and Japan, it was decided to devote special attention 
to the work emanating from these particular regions. 
Thus it was decided to start three regional series under the umbrella of the main 
MIA programme. 
Graph theory, the topic of the present volume in the MIA (East European 
Series), is a fully-established subdiscipline in itself and related to many parts of 
(pure) mathematics. It is also eminently and directly applicable in a large number 
of concrete situations. This is what this book is about. For people who want to 
know how to apply graph theory (or who need examples for lectures on the topic) 
it has an almost ideal structure in that it first sets out the original problem, then 
proceeds to discuss the graph theory involved, and finally presents the algorithm(s) 
which exist to solve them. 
The 
unreasonable effectiveness of 
mathematics in science ... 
Eugene Wigner 
Well, if you knows of a better 'ole, go 
to it. 
Bruce Bairnsfather 
What is now proved was once only 
imagined. 
William Blake 
Am8terdam, March 1983 
As long as algebra and geometry pro-
ceeded along separate paths, their ad-
vance was slow and their applications 
limited. 
But when these sciences joined com-
pany they drew from each other fresh 
vitality and thenceforward marched 
on at a rapid pace towards perfection. 
Joseph Louis Lagrange 
Michiel Hazewinkel 

Preface 
The present book is a translation of the textbook Anwendungen der Graphentheorie 
which was published by Deutscher Verlag der Wissenschaften in 1978. It is meant 
for students studying all branches of operations research, and for graduates and 
practical men to give them a means for modelling and solving organization and 
optimization problems, in particular with a combinatorial component. 
The application of graph theory implies two aspects. On the one hand, it is 
applied graph theory with attention being given to the numerical ascertainment 
of the characteristic values of a given graph (e.g. the question arises of how to 
find a minimal set of arcs in a graph after the removal of which the graph is cir-
cuit-free; cf. Chapter 9). On the other hand, it implies the application of theorems 
and algorithms of graph theory in other scientific domains (when determining an 
optimal sequence of computation in algorithm, a decisive role is played, for exam-
ple, by loops, and the question arises how many feedback arcs have to be cut 
to make the running of the algorithm loop-free; cf. Chapter 9). Both aspects 
are connected with each other and are discussed in the book. 
The short introduction contains the most necessary concepts of graph theory 
which will be used in the text, and those concepts, which are required for one chap-
ter only, are defined. Chapter 1 forms the basis for all other chapters dealing with 
flow problems, while the remaining chapters are, in essence, independent. 
On the basis of well-known theorems of graph and network theory which will 
be discussed in more detail in the first chapter, a number of theorems will be formu-
lated and proved, resulting in practicable algorithms. These will then be given 
at great length and elucidated by means of examples. Particular attention has 
been attached to the choice of examples used. They are by no means simple, but 
have been chosen, where possible, such that all difficulties, and also all subtleties 
of the algorithm, become apparent. Although the algorithms given are construct-
ed such that they can be directly executed by computer engineering means, we 
had to desist from further preparation for those with practical experience, since 
the character of a textbook should be preserved. 
In some chapters (Chapter 5 and 10) the bounds of current applications re-
search are touched upon but, in general, mention is made in the bibliography of 

XII 
Preface 
more or less dispersed methods which give an insight into the variety of spheres 
of application. Of course, completeness has not been aimed at and numerous 
examples of application (e.g. graph spectra in chemistry) could not be included. 
Much attention has been given to flow and tension and supply and transportation 
problems, and to planarity studies. 
All theorems mentioned are proved and the reader who is primarily interested 
in the approaches and algo.rithms may skip the proofs for the time being. The more 
mathematically inclined reader, however, has the chance of checking his own 
capabilities in attempting to solve the numerous exercices contained in the text. 
The large number of figures are not only helpful for understanding, but they also 
point out the advantages offered by the possibility of representing graph and net-
work problems in an illustrative way. The reader should thus become acquainted 
with standard problems and procedures and should also be enabled to recognize 
the combinatorial core of many other problems and, finally, to solve them on the 
basis of graph- and network-theoretical approaches. 
In the framework of the translation the problematic nature of the complexity 
of problems (NPC problems), which has come to the fore at an even higher degree 
in recent years, has been indicated only briefly (cf. Chapter 6 "Assignment and 
travelling salesman problems"). 
Many thanks to all my colleagues who helped me to elaborate on the German 
original version and I wish to thank Mrs. Brigitte SchOnefeld for having conscien-
tiously typed the manuscript. My special thanks are due to Mrs. Ursula Nixdorf, 
who made the translation, and to my wife Ute who showed a lot of understanding 
for this work. 
llmenau, February 1983 
Hansjoachim Walther 

Chapter 0 
Introduction 
Many problems encountered in various spheres of life involve graphs, directly or 
indirectly. Who would not have tried, as a schoolboy, to draw the "House of 
Santa Claus" with a single stroke (cf. Fig. 0.1) or to solve the problem of the three 
houses and the three factories (cf. Fig. 0.2) requiring each house to be connected 
with each factory by strokes which do not cross? Though less obviously, some of 
them may be formulated as problems of graph theory like, for example, the fol-
lowing: 
A group of seven chess-players wants to find the best lightning-chess-player 
among them. Each one of them has to play twice for five minutes against each 
of the others. How can the match be organized so that after seven rounds each of 
the players has played one game against each of the others? 
Fig. 0.1 
Fig. 0.2 
By assigning a suitable graph to the problem, we transform the task into the 
following: assign a node to each player, connect each node with each of the others 
by an edge and then try to split up the resulting graph, which is a complete graph 
with seven nodes, in such a way that in each part there are exactly three edges 
and six nodes. In the language of graph theory: try to decompose the graph into 
seven matchings. 
To the credit of the chess-players, it should be said that in fact they solved 
this problem long ago, for any number of players. In the case of an odd number 
of players, each of them plays exactly as many times as black, and in the case 
of an even number of players, half of them have white once more often than they 
have black and the other half have black once more often than they have white. 

2 
Chapter 0 
Let us now define some terms which we will use more frequently: 
By a graph G = G('Â£, U~, we mean a set U of edges (or arcs), a set 'Â£ of vertices 
and an incidence function f assigning to each of the edges u E U an ordered or an 
unordered pair (X, Y) of vertices X and Y from 'Â£. X and Yare called the end-
points of the edge u; if X = Y, u is called a loop. If only ordered pairs of vertices 
are assigned to them, the graph is called directed or oriented, otherwise undirected. 
In the case of a directed graph G and f(u) = (X, Y), X is called the initial vertex 
and Y the terminal vertex of the arc u. 
c 
Fig. 0.3 
w 
o 
E 
y 
u 
H a::---4--I--~ 
Fig. 0.4 
Directed graphs will be represented as in Fig. 0.3, the undirected ones as in 
Fig. 0.4. Graphs which are partially directed and partially undirected will not 
be considered here. The elements of 'Â£ and U will often be chosen from the set of 
natural numbers as shown in Fig. 0.5. 
If several edges of an undirected graph have the same end-points, for example, 
the three edges of Fig. 0:4 having the end-points T and Y, the set of those edges is 
called a multiple edge. (In the case of the example cited, a triple edge.) Correspond-
ingly, arcs which have the same initial and terminal vertices are called multiple 
arcs. Thus, in Fig. 0.3, the arcs with the initial point A and the terminal point B 

Introduction 
3 
form a quintuple are, the two arcs with the terminal points X and Y, respectively, 
do not form a double arc, because the arcs are distinctly oriented. 
Let Ul' U2' â¢â¢â¢ , U r be edges of an undirected graph G, with for each subscript i 
(i = 2, 3, ... , r -
1) the edge Ui-l having one of its end-points in common with Ui_l 
and the other in common with Ui+l. Then we call W = (Ul' U2, â¢.. , u r) a chain of G. 
Thus, u, v, w, U, x, y in Fig. 0.4 form a chain. A chain is called a simple chain when 
it does not use the same edge twice, for example (w, u, v, t). A simple chain that 
does not encounter the same vertex twice is called elementary, for example (t, w, 
u, x). If a simple chain is closed, without the same vertex being used twice, we 
call it a circuit, as for example in Fig. 0.4 (t, w, u, x, y, s). 
~--------------~5 
e~--------------~4 
Fig. 0.5 
A graph G is called connected if there exists an elementary chain for each pair 
of distinct vertices of G. The graphs in Figs. 0.1, 0.2 and 0.5 are connected; that 
in Fig. 0.4 is not connected, it possesses five components. A component is a maxi-
mal connected subgraph of a graph. 
Two vertices X, Yare called neighbouring or adjacent if there is an edge U with 
t(u) = (X, Y); X and Yare said to be incident with u. A vertex that is not inci-
dent with any edge is called isolated, as it is, for example, vertex Z in Fig. 0.4. 
The number of edges incident with a vertex X is called degree v(X) of X. In 
Fig. 0.4, v(S) = 4 holds. Furthermore, we put v(X) = 5 (the incidence with a loop 
shall yield an increase of the degree of 2). 
Let us consider some further concepts relating to directed graphs (details will be 
given in the first chapter): 
A sequence U1, U2, â¢â¢. , U r of arcs forms an elementary chain (or simply, chain) 
if it goes over into a path of the resulting undirected graph, with the orientations 
of the arcs being ignored. If all arcs are oriented in the direction of the traversing 
of a chain, then the chain is a simple path (or an elementary chain). In Fig. 0.3, 
a, d, e, h, m form a chain, but not a simple path, connecting the vertices A and X, 
and p, n, l, h, c form a simple path connecting the vertices Y and C. 
A directed graph is called connected if there exists, for each pair of vertices, 
a chain joining these vertices, if the undirected graph resulting from ignoring all 

4 
Chapter 0 
orientations is connected. We call it strongly connected if for each pair of vertices 
there exists a simple path joining these two points. 
The graph represented in Fig. 0.3 is strongly connected, that of Fig. 0.6 only 
connected. 
Explaining the vertices as states of a Markov's chain and joining X and Y by an 
arc -
if it should be possible to go from state X over to state Y with positive 
probability -
would mean that the resulting graph would be strongly connected 
so that the states of the Markov's chain form a class of essential states. 
We shall deal exclusively with finite graphs. These are graphs with a finite 
number of vertices, edges or arcs. 
Finally, let us explain two more concepts: We shall frequently use the terms 
maximal and maximum (correspondingly minimal and minimum). A clear distinc-
tion has to be made between them. We always use maximal in the sense of relati-
vely maximal, whereas maximum is used in the sense of absolutely maximal. We 
explain this by means of an example which is typical for the following expositions: 
We consider the graph G in Fig. 0.6. The vertices X, Y, Z span a maximal strongly 
connected subgraph G' since there is no "larger" strongly connected su bgra ph of G 
containing G'. But becavse of the strong connectivity, the graph G' is not a 
maximum subgraph, since the subgraph spanned by the vertices A, B, C, D, E is 
also strongly connected and contains five vertices. 
We take another example (cf. Fig. 0.5): We search for those sets of vertices 
which represent all circuits, i.e., for a set ID of vertices containing at least one vertex 
from each circuit. 
Evidently, {5, 6, 7, 8} represents all circuits. This set is even minimal, because 
there is no proper subset representing all circuits. On the other hand, {2, 3, 5} or 
{2, 3, 4} forms a minimum set representing all circuits. 
If we think, however, of a vertex valuation w(X) (weighting) to be given, say 
in the form w(X) = v(X), i.e. if its degree is assigned as valuation to each vertex, 
then for the above minimal sets such valuations result that {5, 6, 7, 8} with a 
total weight of 12 becomes' a minimum set, just like {2, 3, 5}. 
In the course of our expositions, we shall constantly come across such weight-
ings or valuations of vertices (say by potentials) or of edges or arcs (by flows, 
tensions, lengths, capacities, costs, etc.), and it is through the valu~tion of the ele-
ments of a graph that we leave the hard graph theory as denoted by G. A. Dirac 
and come to the network theory or to the application of graph theory. 
A 
B 
y 
Fig. 0.6 

Chapter 1 
Flows and tensions on networks 
1.1. BASIC CONCEPTS 
For setting up a theory of flows and tensions the conoepts of cycle and cocycle are 
of fundamental significance. Therefore, we want to put them at the top of our 
considerations. 
Let G(I" U) be a directed graph with m arcs Ul' ... , Um' A cycle fl is a cyclically 
ordered set of arcs Ui" ..â¢ , Ui. of G that are pairwise different, with the property 
that the arc Uij has one of its end-points in common with one of the end-points 
of Ui j _ l , and the other of its end-points in common with one of the end-points of 
Uij +l ' Here, j is to be reduced modvlo k (Fig. 1.1). 
Fig. 1.1 
elementary cycle 
We denote by fl* the set of all arcs in fl, without taking into consideration the 
order: 
fl* = {Ui" ... , Ui.}. 
By the cyclic order of the arcs the cycle fl is given a direction of traversing decom-
posing fl* into two classes fl+ and fl-' The set fl+ contains all arcs in fl* that are 
in the direction in which the cycle fl is traversed, and the set fl- contains all arcs 

6 
Chapter 1 
in fl* that are in the opposite direction in which fl is traversed. Thus, we get the 
relation 
fl* = fl+ U fl- . 
Let tL+ and tL- be the characteristic vectors of fl+ and fl-, respectively. We assign 
to the cycle fl the vector 
tL = tL+ -
tL-
such that if we put 
it holds: 
f 
tL = (fll, fl2' ... , flm), 
1 if Ui is contained in cycle fl and is in the direction in which this cycle 
is traversed, 
fli = 1-1 if Ui is contained in cycle fl and is in the opposite direction in which 
this cycle is traversed, 
o if Ui is not contained in cycle fl. 
If the direction of traversing is inverted, a cycle fl will be transformed into a 
cycle p,. Evidently, it holds for the related vectors: 
P+ = tL-, 
We can also write 
p, = -flÂ· 
P- = tL+, 
(1) 
The set of the terminal vertices of the arcs of a cycle fl is called the 8et of vertice8 
of flÂ· 
A cycle fl is called an elementary cycle if, when traversing it, no vertex is encoun-
tered more than once. A cycle fl is called minimal if the set fl* of its arcs contains 
no proper subset the arcs of which may be arranged themselves to form a cycle 
The following theorem is evident (task!): 
THEOREM 1.1. A cycle i8 minimal if and only if it i8 an elementary cycle. 
If for a given cycle fl pairwise arc-disjoint cycles fll, ... , flq with q ~ 1 can be 
found such that the appertaining vectors satisfy the equation 
tL = tLl + tL2 + .. + tLq , 
it is said that fl can be partitioned into the cycles fll, fl2, ... , flqâ¢ 
Furthermore, it holds: 
THEOREM 1.2. Each cycle fl can be partitioned into elementary cycle8. 
Proof. Follow a traversing of fl and split off an elementary cycle fli when reaching 
for the first time a vertex already traversed. If fl is not identical to fll, then pursue 

Flows and tensions on networks 
7 
the traversing and split off an elementary cycle fl2 correspondingly, etc., until 
all arcs of fl are traversed (Fig. 1.2). 
REMARK. Fig. 1.2 shows that, in general, the partition into elementary cycles 
is not unique. 
A cycle is called a con/ormally directed cycle fl (c-cycle for short) if all of its arcs 
are directed in the sense of the orientation of fl (cf. Fig. 1.3). Thus, it holds fli =l= -1 
for all i's. We call a conformally directed elementary cycle an elementary circuit 
(shortly also, circuit (cf. Fig. 1.3)). 
In order to get the concept of a cocycle, we proceed as follows. Let the set X of 
the vertices of G(x, U) be partitioned into two non-empty classes S2{, )B such that 
the following relations hold: 
S2{ u )B = X, 
S2{n)B=0, 
Furthermore, let w* be the set of those arcs that have one of their end-points in S2{ 
and the other end-point in )B (we assume that w* =l= 0). Considering the classes 
starting point 
starting point 
Fig. 1.2 
circuit 
Fig. 1.3 

8 
Chapter 1 
Ill, 18 = X - III to be an ordered pair we fix an orientation a ("from III to 18"). 
Together with this orientation a we denote the set w* to be the cocycle w = w(lll) 
generated by III (of. Fig. 1.4). 
By giving an orientation a to the co cycle w, the set w* of arcs is divided into two 
classes w+ and W-, with !ll+ and w- containing exactly those arcs of w* which are 
directed in the sense and in the countersense, respectively, of the orientation a. 
According to the relations for cycles, it follows 
Let w+ and w- be the characteristic vectors of w+ and W-, respectively. Assign 
to the cocycle w the vector 
such that, when putting w = (Wb ... , wm), it holds for the components: 
1 if Uj is contained in the cocycle wand directed in the sense of its 
orientation, 
Wi = 
-1 if Uj is contained in the co cycle wand directed in the countersense 
of its orientation, 
o if Uj is not contained in the cocycle w. 
Fig. 1.4 
cocycle OJ 
Evidently, by reversing its orientation a co cycle w = w(lll) is transformed into 
the co cycle w generated by 18 = X - Ill, and analogously to the equations (1) 
for cycles, it holds: 
w- = w+, 
w = -w. 
(2) 
We can also write 
w= -w 
or 
If only a single vertex X is contained in set Ill, then instead of w( (X}) write simply 
w(X). 

Flows and tensions on networks 
9 
A clear idea of the structure of the cocycles may be got in the following way 
(cf. Fig. 1.5): 
Let w = w(m) be a cocycle of the graph G, and let G be that graph resulting 
from G by deleting the arcs of w. Evidently, G represents the union ofthe two 
(disjoint) graphs G~ and GlB generated (spanned) in G by m and by )S = I - m. 
Let G~ have the components AI, A 2, â¢â¢â¢ , As and GlB the components Bl> 
B 2, â¢â¢â¢ , B t. Let 
Ai = (m;, Ui) 
and B j = ()Sj, ~j) 
Thus, it holds: 
(i= 1, ... ,8;j= 1, ... ,t). 
t 
U = U Uj U U ~j U w*. 
i=1 
j=1 
A cocycle w is called elementary if all of its arcs connect one and the same com-
ponent Ai of G~ with one and the same componentBj of GlB (cf. Fig. 1.6). This 
can be expressed also in the following way: The co cycle w is elementary if and only 
if the number p( G) of the components of G is increased by exactly 1 by deleting 
the arcs of w, i.e.: 
p( G -
w) = p( G) + 1. 
A cocycle w is called mininal if the set w* of its arcs does not contain a proper 
subset, the arcs of which also form a cocycle. 
Let us prove a lemma for cocycles that corresponds to lemma 1.1. 
THEOREM 1.3. A cocycle is minimal it and only it it i8 an elementary cocycle. 
Proof. Let w be an elementary cocycle. We shall show that w is minimal. 
G 
G 
@ 
---
-----w-
Go. 
ill 
G\& 
Go. 
G';Q. ) 
"-
J 
"-
v 
v 
G 
G 
Fig. 1.5 
Fig. 1.6 

10 
Chapter 1 
Without restriction of generality we assume that each arc of W connects one 
vertex of Al with one vertex of B 1â¢ Evidently, it is sufficient to consider the sub-
graph G1 generated by II = 2f1 U \81 in G and to take W as co cycle WI of G 1â¢ 
Cocycle WI is generated in G1 by the set 2f1 of vertices. If then WI' = W1'(2f1') is 
any other cocycle of G1> it results either from WI by reversing the orientation, in 
which case Wl'* is not properly contained in Wl*' or there exists a pair X E 2fI' 
and Y E \81' = II -
2fI' of vertices which belong both to 2fl or both to \81' We 
may assume that X and Yare both contained in 2fI â¢ Since Al is connected, there 
is in Al a chain of arcs connecting X and Y. No arc of this chain belongs to WI' 
but at least one of its arcs belongs to WI', because X E 2fI ' and Y E \81'. From this, 
it follows that WI'* is not contained in WI*' where the assertion results from. 
Conversely, let W be a non-elementary cocycle. We shall show that W is not 
minimal in this case. 
Since W is not elementary, there are either in Gil( two components Ail' Ai, or 
in Gj8 two of them, say B il, B i , containing end-points of arcs which belong to w. 
We may assume that this applies say to B1 and B2 (of. Fig. 1.5). Obviously, 
the arcs of w*, one of the end-points of which lies in B 2, but not the other, are then 
forming a cocycle, because, when these arcs are deleted, B2 becomes a new com-
ponent which was not contained in G. Then, however, W was not minimal. This 
proves lemma 1.3. 
Next we show: 
THEOREM 1.4. Each cocycle W may be decomposed into elementary cocycles. 
Analogously to the decomposition of a cycle, we mean by the decomposition 
0/ a cocycle W into cocycles wI, ... , wq a decomposition of the set w* of arcs, with 
each one, wi*, being a cocycle. 
Proof. Show that there are pairwise arc-disjoint elementary cocycles WI, â¢â¢â¢ , wq 
such that for the vectors assigned to them the equation 
w = WI + w 2 + ... + w q 
holds. 
Evidently, 
w = w(2f) = W(2f1) +w(2f2) + ... + w(2fs) 
with the cocycles w(2fj) being pairwise arc-disjoint (Fig. 1.5). Therefore, it is suf-
ficient to show that each of the single cocycles w(2fj) can be decomposed into pair-
wise arc-disjoint elementary cocycles. We prove this for W(2fI)' Let 2f' = 2fl and 
\8' = I -
2fI. Then the graph G -
W(2f1) splits into the components B k' 
= (\8/, )B/) with k = 1, ... , r (r ~ 1). Here, we may assume that the numbering 
has been made in such a way that exactly the components B l ', B 2', ... , B/ 
(1 ~ l ~ r) in G are connected with Al by at least one arc each (Fig. 1.7). Then, 
all of the cocycles generated by the \8,"s (v = 1, ... , l) are elementary and pair-

Az 
A3 
A. 
AS 
G OL 
\ 
"Y 
c! 
G 
6 3 
6 -
G 
Gi!-
-w(~; I- w (de-~; I 
â¢ 
Flows and tensions on networks 
11 
Gil\' 
G!fl.' 
-y 
G 
bl 
'~--------------------v~------------------J) 
G 
cl 
Fig. 1.7 

12 
Chapter 1 
wise arc-disjoint. Furthermore, it holds: 
w(~h) = -W(\81') -
W(\82') -
... -w(\8/). 
That means that W(~I) is decomposed into the pairwise arc-disjoint elementary 
cocycles -w(\8.') = w(1: -
\8.') with 11 = 1, ... , l. This proves theorem 1.4. 
The reader will have noticed the "duality" existing between the concepts of 
cycle and cocycle (to which also the designation refers). This is, however, an essen-
tial phenomenon, and as we shall see, the analogies may be carried much further: 
consider, for example, the field of electrical engineering where in particular the 
"duality" known between current and voltage can be based on it. This is, never-
theless, not duality in the true sense, i.e., in the sense that'it would be possible to 
base the whole theory on a system of axioms being dual in itself. If this were the 
case, then it would also be possible to dualize the proofs, and it would be hard 
to see why proving theorems 1.3 and 1.4 for cocycles should give more trouble than 
the proofs of the analogous theorems 1.1 and 1.2 for cycles. But if we restrict 
ourselves only to planar graphs (cf. p. 29), duality can actually be encountered 
in the true sense. In a general case we can only speak of a "partial duality". 
Dealing with these questions in more detail leads to the Theory of Matroid8 estab-
lished by H. Whitney [19] and developed to an essential degree in particular by 
W. T. Tutte [15-17]. The interested reader's attention is drawn to the book of 
W. T. Tutte [18] and to the fundamental work of G. J. Minty [11]. 
For our further studies let us explain some other concepts. 
DEFINITION. A conformally directed cocycle w (simply called c-cocycle) is a 
cocycle, all edges of which are directed in the sense of the orientation of w. 
Thus, for the components Wi of a c-cocycle, it holds: Wj =f= -1. 
DEFINITIONS. An elementary c-cocycle is called a cocircuit. A 8panning tree 
(cotree) of a connected graph is a partial graph without cycles (or cocycles) having 
the property of forming a cycle (or cocycle) after any other arc has been added. 
Let us first formulate and prove an important lemma. 
LEMMA of Minty (Arc Colouring Lemma). Con8ider a graph G with any m arC8 
1, ... , m. Colour arc 1 black, and arbitrarily colour the remaining arC8 2,3, ... , m 
black, green or red. 
One of the following condition8 hold8: 
a) There i8 an elementary cycle containing arc 1 and only red and black arC8 
with the property that all black arC8 are directed in the 8en8e of the cycle1 ). 
b) There i8 an elementary cocycle containing arc 1 and only green and black arC8 
with the property that all black arC8 are directed in the 8en8e of the cocycle1). 
1) Containing black and red arcs and black and green arcs, respectively, also means that 
red or green need not necessarily occur. 

Flows and tensions on networks 
13 
Proof. Let arc 1 = (X, Y) be directed from X to Y. Successively, label the ver-
tices using the following procedure: 
(i) Label Y. 
(ii) Label vertex Z if there is either 
a black arc (U, Z) with labelled U or 
-
a red arc (U, Z) with labelled U or 
-
a red arc (Z, U) with labelled U. 
Because of the finiteness of the graph, the labelling procedure stops and the fol-
lowing two cases may occur: 
Case 1: X has been labelled. According to the labelling procedure, there will be 
a cycle containing arc 1 and only black and red arcs, with all black arcs being direct-
ed in the sense of the cycle. Following theorem 1.2, this cycle splits into elemen-
tary cycles among which there is obviously one elementary cycle f1 satisfying the 
condition a). Suppose arc 1 to be contained in an elementary co cycle w according 
to b), then w separates X from Y, i.e., at least one arc of each path between X 
and Y is contained in w. Thus, there must be still another arc of f1 lying in w. 
But this is either a red one,or a black arc directed in the sense of wand opposite to 
arc 1. This, however, contradicts our assumption. If there exists an elementary 
cycle according to a) through 1, there will be no elementary co cycle according 
to b) through 1. 
Case 2: X is not labelled. Let m: be the set of the labelled and >B be the set of the 
unlabelled vertices of the graph. The arcs between m: and >B form a cocycle w con-
taining arc 1. According to the labelling procedure, w contains no red arc and a 
black one if and only if this arc is directed from >B to m:. Thus, we have found a 
cocycle according to b). Then, using theorem 1.4, there will also be an elementary 
cocycle according to b). Suppose there exists an elementary cycle f1 according to a). 
Following our considerations in case 1, this assumption can be proved to be a con-
tradiction. 
The lemma is thus proved. 
COROLLARY. Let u be any arc 01 a graph G. Then, u belongs either to a circuit 
or to a cocircuit, but never to both. 
To prove this, colour all arcs black and apply the lemma of Minty. 
We now turn to the "Partial duality" mentioned above. The following theorem 
holds: 
THEOREM 1.5. Let G be a connected graph, Vand Wany spanning tree and span-
ning cotree, respectively, 01 G. Then, the arcs 01 G that do not belong to V and W, 
respectively, lorm a spanning cotree and a spanning tree, respectively, 01 G. 

14 
Chapter 1 
Proof. Let V = (I, l8) be a spanning tree of G = (I, U). Suppose the graph 
G' = (I, U -
l8) has a cocycle w(~) of G. Because there exists a chain of arcs in 
V directed from ~ to I -
~, at least one of the arcs from w(~) lies in l8. This 
yields, however, a contradiction to the definition of a cocycle in G'. Adding any 
arc of l8 to G' leads to the decomposition of V. The resulting graph thus contains 
a cocycle of G. 
Conversely, let W be a spanning cotree of G, say W = (I, ~). W does not 
contain a cocycle, but such a cocycle arises after adding any other arc. Consider the 
set of arcs l8* = U -
~, choose any arc in l8* and denote it by 1. Now, colour 
the arcs of G. The arc 1 is coloured black, the remaining arcs of l8* are coloured red. 
The arcs of ~ are coloured green. 
Since W is a cotree, ~ u (1) contains a cocycle going through 1 which is 
coloured black and green in conformity with the colouring procedure. According 
to the lemma of Minty, no cycle coloured black and red will then go through arc 
1, thus l8* contains no cycle through arc 1. Since arc 1 has been arbitrarily 
chosen, there will be no cycle in l8* at all. 
It remains to show that a cycle arises when adding any arc to l8*. 
Let 1 be any arc not contained in l8*, i.e., let 1 E ~. Colour the graph. The arc 
1 is coloured black, the arcs from l8* are coloured red, those from ~ -
{1} are 
coloured green. 
Since W is a cotree, no subset of ~ is a cocycle, thus, G contains no cocycle 
coloured green and black going through arc 1. Then, according to the lemma of 
Minty, there exists in G a cycle coloured black and red which is formed by arcs 
of l8* u {I} following the colouring procedure. Since here again arc 1 has been 
arbitrarily chosen, all is proved. 
Q.E.D. 
Let us now come to a concept which is of essential importance for the theory 
of flows and tensions. 
DEFINITION. The cycles p,I, p,2, â¢â¢â¢ , p,P (and the cocycles wI, w2, â¢â¢â¢ , wP, respec-
tively) are called independent if the systems of the associated vectors (11, (12, ... , (1P 
(and WI, w2, â¢â¢â¢ , wP, respectively) are linearly independent. 
We may continue the theorems confirming the "partial duality". 
THEOREM 1.6. Let G be a connected graph with m arcs and n vertices. Then, it 
holds: 
a) There exist m -
n + 1, but not more independent elementary cycles. 
b) There exist n -
1, but not more independent elementary cocycles. 
Proof. Obviously, any spanning tree Vof G contains n -
1 arcs. If we select 
arbitrarily one of the remaining m -
(n -
1) arcs and add it to V, one elementary 
cycle is generated the orientation of which is thought to be in the sense of the 
arc added. 

Flows and tensions on networks 
15 
In this way it is possible to generate exactly m - n + 1 elementary cycles 
which are obviously independent, since each of the vectors assigned to these 
cycles has a unity in a component in which all other vectors have a zero. 
Now, we show that there exist n -
1 independent elementary cocycles. For 
this, consider any spanning cotree W. According to the definition, W contains 
no cocycle. If one adds, however, any arc, a cocycle will arise that is obviously 
elementary. Using theorem 1.5 there are exactly n -
1 arcs not contained in 
W. It is easy to see that these n -
1 cocycles are independent, since the vectors 
being assigned to the elementary cocycles also have the property that each of 
them has a unity in a component in which all others have a zero. 
Finally, we still show that for any cycle fl and for any cocycle W the relation 
Â«(L, (1) = 0 
holds, i.e., the scalar product of the vectors assigned to them equals zero. That 
means, however, (since the sum of the dimensions of the two subspaces spanned 
by the cycles and the cocycles, respectively, cannot be greater than m) that there 
are neither more than m -
n + 1 independent elementary cycles (and thus 
cycles) nor more than n -
1 independent elementary cocycles. 
We consider the scalar product 
Â«(L, (1) = fllWl + fl2 W 2 + ... + flmWm 
with only those components being of interest in case of which the arcs correspond-
ing to them are contained in both fl and W because in the other cases, at least 
one of the two factors fli' wi is equal to zero. Furthermore, consider two successive 
arcs k, 1 in fl also lying in w. The following four cases may occur: 
1. Wk = 
1 =? flk = 
1 or 
flk = -1 
Wl = 
1 
fll = -1 
fll = 
1 
2. Wk = 
1 =? flk = 
1 or 
flk = -1 
Wl = -1 
fll = 
1 
fll = -1 
3. Wk = -1 =? flk = 
1 or 
flk = -1 
Wl = 
1 
fll = 
1 
fll = -1 
4. Wk = -1 =? flk = 
1 or 
flk = -1 
Wl = -1 
fll = -1 
fll = 
1 
In each of the four cases it holds: 
Wkflk + Wlfli = O. 
Since the number of the arcs contained in fl and W is certainly even, we can divide 
the totality of all these arcs into pairs of successive arcs in fl. For each pair the 
share in the scalar product equals zero, thus also the whole scalar product, as 
stated. 
The above remarks prove theorem 1.6. 

16 
Chapter 1 
Hence we see that the elementary cycles and cocycles constructed for this 
proof form a basis of the corresponding vector space. 
The following theorem can also be proved using some adequate reflections. 
THEOREM 1.6'. If the graph G has exactly p components, then it holds: 
a) There exist m -
n + p independent elementary cycles, but not more. 
b) There exist n -
pindependent elementary cocycles, but not more. 
As for maps, for example, a cycle basis may be given in a simple form. 
Fig. 1.8 
Assume a graph G drawn in the plane, with no arcs crossing one another, and 
assume that this graph remains connected even after removing any vertex. An 
exact introduction of the concept of a map may be found by the reader in Sachs [12]. 
Then, the following theorem, which we give without proof, holds: 
THEOREM 1.7. The outlines of the finite areas of a map form a system of indepen-
dent cycles, sometimes even a cycle basis. 
Let us explain this theorem by means of an example (of. Fig. 1.8). Naturally, 
the orientation of the arcs is of no consequence to the planarity itself. Writing the 
vectors (.ti line for line, the result for our example is: 
Arc 
1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
11 
12 
p,1 
1 
-1 
1 
0 
0 
0 
1 
1 
0 
0 
0 
0 
p,2 
0 
0 
0 
0 
0 
0 
0 -1 
1 
1 
0 
0 
p,3 
0 
0 
0 
0 
0 
1 
0 
0 
0 
-1 
1 
-1 
p,4 
0 
0 
0 
0 
1 
1 
1 
0 
0 
0 
0 
0 
p,5 
0 
0 
1 -1 -1 
0 
0 
0 
0 
0 
1 
0 

Flows and tensions on networks 
17 
For example, in the case of the doubly drawn cycle fl of Fig. 1.8, it follows: 
Let us now turn to the important concept of a strongly connected graph. 
DEFINITION. A path 
with Xi, =1= Xi, for ir =1= is (with pairwise distinct ii) is called a simple path from 
Xi, to Xi.+!' A graph G is called strongly connected if there exists between any two 
different vertices X and Y a simple path going from X to Y. 
Fig. 1.9 shows a strongly connected graph and a path (doubly drawn) from X 
to Y. 
x 
Fig. 1.9 
THEOREM 1.8. Let G be a connected graph with at least one arc. 
a) The following statements are equivalent.' 
(1) Every arc of G lies on a circttit. 
(2) No arc of G lies on a cocircuit. 
(3) G is strongly connected. 
b) The following statements are equivalent.' 
(1') Each arc of G is contained in a cocircuit. 
(2') No arc of G lies on a circuit. 
Proof. a) We show: (2) follows from (1). Assume that the arc (X, Y) is contained 
in a cocircuit. By colouring all arcs black and using the lemma of Minty we see 
that there is no circuit containing (X, Y). This contradicts (1). 
Analogously, it can be proved that (1) follows from (2) (task I). 
Now, we show that (1) follows from (3). Assume that (X, Y) is not contained 
in any circuit. Then, there will be no simple path going from Y to X . This contra-
dicts (3). 

18 
Chapter 1 
From (1) there follows (3): Assume that there exists no simple path going from 
X to Y. Consider the set 2t: of the vertices that can be reached from X via simple 
paths. Obviously, all arcs of w(2t:) are directed to 2t:. Since G is connected, it holds: 
w(2t:) :::j= 0. Then, however, no arc of w(2t:) can be contained in a circuit. This con-
tradicts (1). 
b) From (I') there follows (2'). Assume that the arc (X, Y) is contained in a 
circuit. By colouring all arcs black and applying the lemma of Minty, we recognize 
that the arc (X, Y) is not contained in any cocircuit, which contradicts (I'). 
Analogously, (1') follows from (2'). Thus, theorem 1.8 is proved. 
We should point out that there exists for the concept of "strongly connected" 
no (reasonable) dual concept used in the sense of the "partial duality" described 
above. 
One problem arising fairly often in graph theory applications is to decide 
whether or not a given graph is strongly connected. The following simple algo-
rithm makes such a decision possible. 
Algorithm 1.1 (for deciding whether or not a graph is strongly connected). 
Choose from G any vertex Z and mark it with "+" and "-". Now, mark a 
vertex X with "+" if there exists an arc (Y, X) with Y marked with" +", and 
similarly, mark a vertex U with" -" if there exists an arc (U, Y) with Y marked 
with "-". 
It can easily be seen that G is strongly connected if and only if at the end of 
the labelling procedure each vertex is marked both with "+" and with "-". If 
not all of the vertices are labelled with both marks during this labelling procedure, 
then those vertices labelled with both marks form the strongly connected component 
of G containing Z . 
..,....,..---, 
/' 
"-
/ 
\ 
I 
\ 
I 
\ 
\ 
\. 
Fig. 1.10 

Flows and tensions on networks 
19 
If one chooses successively each vertex of G as the beginning of the labelling 
procedure Z, then the graph splits into strongly connected components. Of course, 
such an equivalence class may possibly contain only one single vertex, too. 
To understand this equivalence relation, look at the example shown in Fig. 1.10. 
Before becoming acquainted with the next algorithm let us set the following task for 
the reader. 
TASK 1. Let G be a graph (containing at least one arc) with no circuit contained in it. 
Then, G possesses at least one source (one vertex into which no arc enters) and at least one 
sink (a vertex which no arc leaves). 
Algorithm 1.2 (for deciding whether or not a graph is circuit-free). 
If there exists a source in G, we remove this and all arcs being incident with it 
(leaving it). If there exists a source in the remaining graph, we remove this and 
all incident arcs, etc. 
If the algorithm breaks off when there is no more vertex, the graph is circuit-
free. If, nevertheless, a circuit was contained, one would have removed a vertex 
of this circuit in the course of the algorithm which was not a source, since some 
arcs (one of the circuit) entered it and at least one arc (of the circuit) also left it. 
If the algorithm ends before all of the vertices are removed, we start out from 
any vertex X I in the remaining graph G', follow any arc enteting X I in the reverse 
direction and arrive at a vertex X 2 which at least one arc enters, too. Again we 
follow this arc in the reverse direction, say to X 3, etc. Because of the finiteness of 
graph G (and thus G/) we finally arrive at a vertex that we have already reached 
on our reverse way (not necessarily Xl)' In such a case, however, we have found 
a circuit. 
Let us now make a statement concerning the bases of the spaces of the cycles 
and cocycles. 
THEOREM 1.9. Let G be a connected graph with m arC8 and n vertice8. 
a) If G i8 a 8trongly connected graph, there exi8t m - n + 1 independent circuits 
in G, i.e., the vector 8pace of the cycle8 p088e88e8 a circuit ba8i8. 
b) If G p088e88e8 no circuit, then there exi8t n -
1 independent cocircuit8 in G, 
i.e., the 8pace of the cocycle8 p088e88e8 a cocircuit ba8i8. 
Proof. First, we prove a) in showing that any cycle may be represented as a sum 
of circuits. The following lemma is true: 
LEMMA. Each cl08ed 8equence of arC8 directed in the 8ame 8en8e (including a 
repetition of arcs) may be 8plit into circuits. 
The lemma may easily be proved by means of mathematical induction accord-
ing to the number of arcs by traversing the closed sequence of arcs until a vertex 

20 
Chapter 1 
is traversed twice. Then, one will have traversed a circuit that can be split off; 
the remaining part splits into components, with each of them satisfying the as-
sumption of the lemma. 
Fig. 1.11 
The idea of the proof of a) is the following: We partition a cycle P into two sets 
of arcs. One of these sets contains all those arcs oriented in the direction of p, the 
other one will be completed to form circuits, which is possible because of the strong 
connectivity. All sets of arcs which have been added, together with the arcs of 
p oriented in the direction of ft, also form circuits (satisfying the assumptions 
of the lemma). According to theorem 1.2, we may confine ourselves to the partition 
of elementary cycles. We partition p into maximal paths (cf. Fig. 1.11). Denote the 
vertices such that the simple paths run along between Bi and Ai+l in the direction 
of p (if 8 maximal paths run..along in the direction of p, we have to calculate modulo 
8; then, also 8 maximal paths run along in the opposite direction of p) ansI in the 
opposite direction of p from B j to A j â¢ The simple path on p connecting Bi with 
Ai+1 is denoted by p;', and thus it has the direction of p. The simple path on p 
connecting Bi with Ai is denoted by Pi' The simple path (which exists because 
of the strong connectivity of the graph) connecting Ai with B j is denoted by Yi' 
Let us call a closed sequence of arcs directed in the same sense a c-cycloid, only 
when carrying out the proof. This designation is made on the model of "confor-
mally directed cycle" where the arcs, however, may be contained several times. 
Let us first consider the c-cycloid A that is generated in the following way 
(cf. Fig. 1.11): 

Flows and tensions on networks 
21 
We follow ft provided that the arcs have the same orientation as ft, leave out those 
parts of the elementary cycle ft on which the arcs are oriented in the opposite 
direction of ft and pass along on the simple paths Vi from Ai to Bj, which exist 
because of the strong connectivity. Now we have traversed also the Vj, which is 
too much, but we have also left out all fti' which is too little. 
But c-cycloids are just formed by the 
Ai = fti U vi 
and since the arcs of fti are traversed in the countersense of ft, we get the following 
expression using the vectorial method of writing for sets of arcs (characteristic 
function) : 
n 
Since c-cycloids may be decomposed into circuits, as we have seen in the lemma, 
we have proved assertion a). 
Now, let us prove b). Since G has no circuit, a complete order of the vertices 
may be given as follows: We choose any source in G and denote it by AI' Now, 
remove Al and all arcs incident with Al (i.e. leaving arcs) and denote by A2 a 
source of the remaining graph, etc. Obviously, the set of those arcs separating 
m = {AI, ... , Ai} from )8 = {Ai+I' ... , An} forms a cocircuit because all arcs are 
going from m to )8. The independence of these n -
1 cocircuits is guaranteed, 
since in each of them there will be contained an arc not lying on any other, provided 
that there are no isolated vertices occurring during decomposition. In case an 
isolated vertex X appears during decomposition after the removal of Ai (i.e., 
after the removal of Ai I only one arc (Ai, X) enters X), we choose this one to be 
the cocircuit. In this way, the connectivity of G assures that n -
1 independent 
cocircuits can be found (task). 
This proves theorem 1.9. 
COROLLARY from a). A graph G without cocircuits having p components possesses 
m -
n + p independent circuits. 
COROLLARY from b). A graph G without circuits having p components possesses 
a cocyclic basis consisting of n -
p cocircuits. 
Now, we can still deduce an interesting corollary from the lemma of Minty. 
THEOREM 1.10 (Camion). 
a) Let G be a graph in which each cycle possesses as many components + 1 as -1. 
Then, the set of arcs of G splits into pairwise disjoint cocircuits. 
b) Let G be a graph in which each cocycle possesses as many components + 1 as -1. 
Then, the set of arcs splits into pairwise disjoint circuits. 

22 
Chapter 1 
Proof. a) We imagine the arcs of disjoint co circuits WI' â¢â¢â¢ W Tl to be successively 
removed from G. The resulting graph a' will no longer contain a cocircuit. If G' 
no longer contains an arc, then the proof is obvious. We thus may assume that 
there still exists at least one arc in G'. Colour all arcs black that belong to G' and 
assign to anyone of them the number 1. Colour the arcs of WI* U W2* U â¢â¢â¢ U wr* 
red. Since there exist no green arcs and G' does not contain a cocircuit, then, 
according to the lemma of Minty, there is in G a cycle fl coloured black and red 
which contains the arc 1, with all black arcs being directed conform ally. Consider 
any red arc u of fl. Since u lies in one of the cocircuits WI' W2' â¢â¢â¢ , w" say in WI' 
there is a red arc v lying in fl which is equally directed with u relative to WI> but 
oppositely directed relative to fl. That means that fl has as many -red arcs of the 
direction of fl as red arcs of the opposite direction of fl. Thus, in the components 
corresponding to the red arcs of fl, + 1 occurs as often as -1. The black arcs of fl, 
however, have all either + 1 or -1. Because the set of the black arcs of fl is not 
empty, there exists a cycle fl in G whose number of components + 1 does not equal 
the number of components -1, which contradicts the assumption of the theorem 
1.10a). Statement b) may be proved by the reader himself. 
The following theorem follows: 
THEOREM 1.11. A c-cycle containing all arcs of a graph G exists if and only if G 
is connected and each cocycle contains as many components + 1 as -1. 
ProDÂ£. Given a c-cycle containing all arcs (such a chain is also called a Euler 
line). Obviously, G is connected. ChDose any cocycle w. The number 'Of the arcs 
'Of W is DbviDusly even, and they are traversed half in the direction 'Of the c-cycle 
and half in the 'Opposite direction. Conversely, let each co cycle 'Of G have the same 
number of positive as negative cDmponents. AccDrding tD the theorem of CamiDn, 
the set 'Of arcs splits intD disjoint circuits. Since G is cDnnected, these circuits 
may be cDmpDsed tD fDrm a c-cycle such that all arcs are traversed in the same 
directiDn. 
This proves the theDrem. 
In cDnclusiDn of this section, the following few remarks are made. 
1. If we imagine the graph to be undirected, then we get as an equivalent con-
dition fDr the existence of a Euler line (which is now undirected): a is connected, 
and each cut (corresponding tD the co cycle when directed) pDssesses an even num-
ber of edges. It is sufficient to claim that the cuts generated by the vertices have 
an even number of edges. That, hDwever, means that the degree of each vertex 
must be even. 
2. The "partially dual" statement is obtained in the following form. A cut CDn-
taining all edges 'Of a exists if and 'Only if each circuit (more precisely, each clDsed 

Flows and tensions on networks 
23 
chain) has an even length, i.e., possesses an even number of edges. This is equi-
valent to the already known statement that a cut containing all edges of G exists 
if and only if G is bipartite. (G is said to be bipartite if the vertices of G may be 
partitioned into two classes such that the vertices contained in the same class 
are not adjacent.) 
3. The reader may construct an example showing that there exist graphs in 
which each cycle contains as many positive as negative components, but in which 
there exists no cocircuit containing all arcs. 
1.2. PROPERTIES OF FLOWS AND TENSIONS 
DEFINITIONS. Imagine the arcs of a graph to be numbered from 1 to m. We 
mean by an arc function 1p(u) a vector of the G-dimensional vector space Rm 
with, in general, real components. For many problems it will be seen that one 
may assume the components to be integers. In principle, the components may 
also be complex, but for most applications, however, real components 1pj = 1p(Uj) 
of the vector tf' can be presupposed. For an arc U = (X, Y) we also write, instead 
of 1p((u)), simply 1p(u) = 1p(X, Y). An arc function cp is called flow if for each ver-
tex X the following relation holds: 
}; cp(u) -
}; cp(u) = O. 
uEw+(X) 
uEw-(X) 
The ith component of the vector p is called flUX through the arc i or flux through 
the arc Uj, respectively, if the natural numbers are used for other purposes and 
confusions might occur. 
The definition of a flow obviously includes the well-known Kirchhoff's node rule 
for electrical networks. Using another way of writing we get: 
An arc function cp is a flow if and only if for any vertex X E X of a graph 
G = (x, U) the scalar product equals zero: 
(w(x), p) = 0. 
In other words: 
m 
}; WiCPi = 0 with w(X) = (WI' ... , wm). 
;=1 
The reader may prove the following theorem: 
THEOREM 1.12. For any subset III of the set X of vertices of a graph G and for any 
flow cp defined on G, it holds: (w(Ill), cp) = 0, i.e., 
}; cp(u) -
}; cp(u) = Â° for all III ~ X. 
UEw+(\l.{) 
uEw-('l{) 

24 
Chapter 1 
DEFINITION. If for an arc function {} and for any elementary cycle fl the rela-
tion 
J: {}(u) - I: {}(u) = 0 
uE~+ 
UE~-
holds, then {} is called a tension on the graph G. The value {}i = {}(Ui) of the ith 
component of -&0 is called partial tension on Uj. 
The definition of the tension obviously contains the Kirchhoff's mesh rule for 
electrical networks. From this it can be seen that an arc function {} is a tension if 
and only if it holds for each cycle: 
m 
(t-t, -&0) = 0 or 1: fli{}i = O. 
i=1 
DEFINITION. A function that assigns to each vertex of a graph a (generally 
real) number is said to be a node function or a potential. 
It is really not characteristic of a mathematician to introduce for a term already 
given (node function) yet another one (potential). As will be shown by the follow-
ing theorem, we may not, however, ignore the close connection between tension 
and potential which is already known to us from the field of electrical engineering. 
THEOREM 1.13. 
a) Let t be a potential defined on any graph G. Then, the arc function d assigning 
to each arc u = (P, Q) the potential difference d(u) = d(P, Q) = t(Q) - t(P) is a 
tension. 
b) Let G be a connected graph and {} any tension defined on G. Then, there exists 
a potential t, which is uniquely defined, except for an additive constant, such that 
the potential difference obtained from t is in conformity with {}, i.e., for each arc 
u = (P, Q) the relation {}(u) = t(Q) - t(P) holds. 
Proof. 
a) We only have to show that d with d(P, Q) = t(Q) - t(P) is a tension. Consider 
any elementary cycle fl' with PI> ... , Pk> P k+1 = PI being the vertices of fl as they 
are met successively when traversing fl. Choose two successive vertices Pi> Pi+!' 
If there exists in fl the arc (Pi' P i+1), it holds: 
fl(Pi> P i+1) = 1 and d(Pi; Pi+1) = t(Pi+1) - t(Pi) , 
i.e., 
If, however, the arc (Pi+I' Pi) lies in fl' then 

Flows and tensions on networks 
25 
In this case, too, we get: 
/J(Pi+1, Pi) . d(Pi+1' Pi) = t(Pi+1) - t(Pi)Â· 
Forming the scalar product leads to: 
k 
(fL, d) = L fli . di 
;=1 
This proves that d is a tension. 
b) A node function t is defined as follows. Let P E I be any fixed vertex. 
Let t(P) = to' Let t( U) be already determined, and let (U, V) exist with t( V) not 
yet determined. Then, put t( V) = t( U) + -&( U, V). But if t( U) is already known, 
if the arc (V, U) exists and if t( V) is not yet determined, we put t( V) = t( U) 
-
-&( V, U). We show that this explains a node function. In other words,: If t(P) = to 
is already given, then all t(X) are uniquely determined independently of the order 
in which the X are being chosen. 
Assume that it would be possible to assign to a vertex Q (if the vertices are label-
led in different order) two different values (say t( Q) and t'(Q)). Then, there will be 
two different labelling paths, namely 
)illl = (P = Po, P l , .â¢. , Pq- l , Pq = Q) 
and 
Let Pi., Pi" ... , Pi, be the vertices lying on )illl and )ill2 in the order in which they 
are encountered on )ill!. Certainly, t(Pi .) = t'(Pi,) and t(Pi ,) =!= t'(P i,). Choose 
k such that t(Pi) = t'(Pi) 
for j ~ k and that t(Pik+.) =!= t'(Pi .. .). The 
arcs lying on )ill! between P ik and P ik+! form, together with certai)1 arcs from )ill2, 
an elementary cycle along which the tension drop does not equal zero, and this 
contradicts the assumption. The proof of theorem 1.13 is evident. 
From this there results immediately the 
COROLLARY. The set of all tensions on a graph G with n vertices and p components 
depends exactly on n -
p paramters. 
Now, we come to some essential properties of flows and tensions. 
THEOREM 1.14. 
a) Each linear combination of flows is a flow, too. The flows thus form a subspace 
l/J of Rm. 
b) Each linear combination of tensions is a tension, too. The tensions thus form a 
subspace â¬J of Rm. 

26 
Chapter 1 
Proof. a) It is to be shown: If for any vertex X the relation (w(X), pi) = 0 holds, 
then for any numbers Cj the relation (w(X), I: piC;) = 0 is true. This, however, 
is clear because of the linearity of the scalar product, since it holds: 
(w(X), I: piCj) = I: Cj(w(X), pi) = I: Cj' 0 = O. 
The proof of b) is to be established analogously to that of a). 
Now, we turn to a theorem the form of which may be, however, somewhat 
surprising. 
THEOREM 1.15. 
a) Each cycle i8 a flow. 
b) Each cocycle i8 a ten8ion. 
This theorem is to be understood in the following way. An arc function (its 
characteristic function) had been assigned to a cycle (cocycle). This arc function 
satisfies the conditions of a flow (or a tension, respectively) function. 
Proof. 
a) First, we show that an elementary cycle is a flow, too. In the proof of theorem 
1.6 we saw that for any cycle fJ, and for any cocycle w of a graph the relation Â«(1-, w) 
= 0 holds. It holds in particular also for the special cocycles w(X) with X E I. 
According to the definition of a flow, fJ, is thus a flow. 
If there is any cycle given, we decompose it into elementary cycles; each of these 
cycles is a flow, and even the original cycle itself is a flow because of theorem 1.14. 
The reader may prove b) in an analogous way. 
This proves theorem 1.15. 
We have seen that the space of the cycles is contained in the space of the flows 
(is thus subspace) and that the space of the co cycles is subspace of the space of 
the tensions. All these spaces are subspaces of Rm, if we consider the set of the 
graphs with m arcs. In the first paragraph, we also saw that the spaces of the 
cycles and the cocycles are orthogonal to each other. 
This enables us to formulate the principal theorem of flows and tensions. 
THEOREM 1.16. The 8pace (/J of the flow8 i8 identical to the 8pace M generated by 
the elementary cycle8. The 8pace @ of the ten8ion8 i8 identical to the 8pace 1,2 formed 
by the elementary cocycle8. 
Proof. We have already shown by our last remarks that the space of the flows 
contains that of the elementary cycles. We shall see in the following that this is 
true also in the reverse case. Let q; be any flow, then, for each elementary cocycle 
w(X), it holds (w(X), p) = O. But this meas that Dlies in the orthogonal comple-
ment of ,2. Thus, q; lies in M, as was to be shown, since ,2 and M are orthogonal 
complements in Rm. 
The second part of the theorem may be proved in quite an analogous way. 

Flows and tensions on networks 
27 
REMARK. l/J and @ are thus orthogonal complements in Rm. 
Consider now any spanning tree (maximal subgraph without cycles) H of a 
connected graph G with the arcs V1' â¢â¢â¢ , V n_ 1 of the spanning tree and with the 
remaining arcs u1, â¢â¢â¢ , U m- n+V which naturally form a COLree (according to theorem 
1.5). Together with H, exactly one elementary cycle fli corresponds to each arc Uj 
of the cotree. The elementary cycles fli are independent (cf. proof of theorem 1.6). 
The following proposition is true: 
THEOREM 1.17. With the assumptions mentioned it holds: Any flow tp may be 
linearly combined from the fli in exactly one way, and it holds: 
withz=m-n+ 1. 
Proof. Let us first recall that the orientation of the elementary cycle fli had been 
chosen such that the orientation of Uj corresponds to that of fli' 
H there actually exists such a representation (given by the theorem) of a flow, 
then it will certainly be unique, since it is only fli that has a non-zero value on the 
component belonging to the arc fli' Thus, tp is certainly represented on the arcs 
of the cotree. It remains to show that also on the arcs vi of the spanning tree H 
the flow tp is represented in accordance with the theorem. For this, we form a new 
flow 
<j/ = <jJ -
tp(U1) (.'1 -
'" -
tp(uz) (.'zÂ· 
As already said, the relation <jJ' = 0 is valid on the arcs of the cotree. Choose 
now any vertex X that is incident with only one arc within the spanning tree 
(there exist at least two of this kindl Cf. Tasks). Since on all other arcs incident 
with X (these are the arcs of cotrees), the relation <jJ' = 0 holds, then, also tp'( v) = 0 
for the arc v incident with X, because of the flow condition. Carrying on these 
reflections (mathematical induction l) will lead us to the conclusion that <jJ' has 
disappeared also for the arcs of the spanning tree. 
This proves theorem 1.17. 
From this theorem there result some corollaries. The reader may be recom-
mended to solve them. 
TASK 2. A flow on a graph is already determined if the fluxes on the arcs of a cotree are 
known. 
TASK 3. The elementary cycles fll> .â¢. , flz (z = m -
n + 1) form a basis of the vector 
space l/J of all flows, consequently it holds: l/J = M and thus dim l/J = z. 
We call z = m -
n + 1 the cyclomatic number of the connected graph G. 
We also may formulate a theorem that is "dual" to the last one, but let us first 
give some reminders. 

28 
Chapter 1 
Let G be a connected graph, H any spanning tree of G and VI, â¢â¢â¢ , Vn-I the arcs 
of H. As is well-known, each arc Vj of H uniquely defines an elementary co cycle wi' 
We thus get n -
1 independent elementary cocycles WI> â¢â¢â¢ , Wn-I' 
THEOREM 1.18. Let f} be a tension on a connected graph G. Then, f} may be linearly 
combined trom the c = n -
1 independent elementary cocycles WI> â¢â¢â¢ , We in exactly 
one way, and it holds: 
Proof. Let us first recall that the orientation of the cocycle wi corresponds to that 
of the arc vi' 
If it is actually possible to represent f} in the form shown in the theorem, then 
this representation will certainly be unique, since the component corresponding 
to the arc vi is equal to 1 only in wi and equals zero in all other Wi' The partial 
tensions f}( vi) on the arcs vi of the spanning treeH are represented in the form given 
by the theorem. It remains to show that the representation is also true for the re-
maining arcs. 
Consider the tension f}' with 
Certainly, for all arcs vi of the spanning tree, it holds: f}'(vi) = o. 
Now we define a potential t' on the vertices of G as follows. To any fixed vertex 
PI there is assigned the potential t'(PI ) = 0 (or a, with a being any real number). 
To the other vertices there are assigned the potentials according to the rule in 
theorem 1.13b), with the valuation being made along the spanning tree H. Evi-
dently, all vertices get the zero potential (or the value a), because on all arcs ofthe 
spanning tree, the tension is equal to zero. Thus, the value of the tension on any 
arc becomes zero, representing the difference of the potential values of those 
vertices that are incident with this arc. That means that, in fact, {).' = 0 holds, 
which was to be shown. 
The proof of theorem 1.18 is evident. 
As it was the case already in theorem 1.17, some conclusions may also be drawn 
which we recommend to the reader. 
TASK 4. A tension {} on a connected graph is uniquely defined if the partial tensions on the 
arcs of a spanning tree are known. 
TASK 5. The elementary cocycles WI' â¢â¢. , We form a basis in the space e of all tensions, and 
it consequently holds; @ = .Q and thus, dim @ = c = n -
1. 
Another conclusion is the already well-known fact that each flow is othogonal 
to each tension, and that the space iP of all flows and the space e of all tensions 

Flows and tensions on networks 
29 
are orthogonal to each other and complementary with respect to Rm. The number 
c = n -
1 = dim e is called cocyclomatic number of G. 
TASK 6. How large are the values for the cyclomatic and for the cocyclomatic number in 
case of a graph having p components? 
We sum up the results that we have obtained so far. 
-
The vector spaces lP and 0 are orthogonal to each other and complementary sub-
spaces of the space Rm of all arc functions. 
-
The scalar product of any flow and any tension is equal to zero. 
-
An arc function is a flow (a tension) if and only if it is orthogonal to all tensions 
(flows). 
-
Any arc function is the unique sum of a certain tension and a certain flow (the 
components result as orthogonal projections into the spaces lP and 0). 
To conclude this paragraph, let us make a few more statements about planar 
graphs, that is, about graphs that can be embedded in a plane without edge cros-
sing. 
Let us first recall theorem 1. 7, which said that the boundary of the finite faces 
of a planar graph form a cycle basis and thus, according to what we have learned 
in this paragraph, a basis for the space lP of all flows. 
We now get the well-known Euler's polyhedron formula for connected planar 
graphs: 
Let f be the number of all faces of a planar graph G. Then, the number of all 
finite faces will be equal to f -
1, and this number is equal to the dimension of the 
space of all flows, i.e., equal to the cyclomatic number z = m -
n + 1, that is, 
n -
m + f = 2. 
Of course, this may also be proved in a direct way by means of mathematical 
induction (cf. Sachs [12]). 
TASK 7. In a planar graph without loops and without multiple edges there exist vertices 
of a degree ;;;; 5. 
Let G be a plane graph (i.e., a planar graph embedded in a plane). Assign to the 
graph G another plane graph G' = DG (dual graph) as follows: A vertex M of 
DG is assigned to each (elementary) boundary cycle fl, of G and this is considered 
to be mathematically positively oriented for each finite face. Two vertices M l , M2 
are connected in DG if and only if the elementary cycles fl,l' fl,2 corresponding 
to them in G possess a common boundary arc (PI' P2). In other words, we draw in 
DG the edge (MI> M 2) if (PI> P2) lies in the direction of cycle fl,1' Otherwise we 
draw the edge (M2' M 1) (cf. Fig. 1.12). 
The reader will easily ascertain that DDG = (Gf)' is a planar graph which is 
obtained from G by reversing all arcs in G. 

30 
Chapter 1 
If a graph G has a loop which forms the boundary of a face, then DG has a 
vertex of degree 1 corresponding to this loop. If a domain borders on itself in G, 
then the vertex corresponding to this domain is incident with a loop in DG (i.e., 
is adjacent to itself), etc. 
I 
I 
I 
\ 
\ 
\ 
\ 
Fig. 1.12 
" '- .... 
-----~ ...... ..... 
...... 
....... 
....... 
-----
...-
THEOREM 1.19. An elementary cocycle (cocircuit or elementary cycle or circuit, 
respectively) in DG corresponds to an elementary cycle in G (circuit, elementary 
cocycle, cocircuit). 
Proof. We only prove one of the assertions, the other proofs are to be made ana-
logously. Let p, = {ul , u2, â¢â¢â¢ , u r} be any elementary cycle of G and .\)' the set 
of the vertices of DG lying in the interior of p, (i.e., to put it more exactly: we 
consider the set of the elementary cycles of G forming the boundaries of a domain 
and lying within p,). 
Consider the cocycle w(.\)'). The subgraph of DG, which is spanned by.\)', is 
connected, since one can get from any domain within fl to any other domain with-
in it without crossing p. The same applies, however, to the vertices of DG that do 
not belong to .\)'. Thus, w(.\)') is an elementary cocycle. 
TASK 8. Prove the other three assertions of theorem 1.19. 
COROLLARY. The cyclomatic number at G equals the cocyclomatic number ot DG, 
and vice versa, which is due to the fact that the cycle in G and the cocycle in DG 

Flows and tensions on networks 
31 
uniquely correspond to each other (Task I), in particular also maximal sets of indepen-
dent cycles and cocycles, respectively. 
Exactly one cotree in DG corresponds to one spanning tree of G, and vice versa. 
The proof of the last statement may be established by the reader. 
1.3. 
THE MAXIMUM FLOW PROBLEM 
1.3.1. Introduction 
In this chapter, we shall deal with the following problem. Given a directed graph 
G(I, U) with valuated arcs. The arc valuations c(u) ;:;; 0 with u E U are called 
capacities of the arcs. Let two vertices Q and 8 (source and sink, respectively) be 
marked in G, in assuming that an arc (8, Q) does not exist in U. Find an arc 
function rp(u) which 
1. is compatible with the capacities, i.e., the relation 0:;;:; rp(u) :;;:; c(u) holds 
for all u E U, 
2. satisfies in each vertex P, perhaps with the exception of Q and 8, the Kirch-
hoff's node rule: 
J: rp(u) = 
J: rp(u) 
for all PEl" {Q, 8), 
3. maximizes the value of Q among all arc functions satisfying the conditions 
1 and 2, i.e.: 
J: rp(u) -
J: rp(u) -+ Max! 
uEw+(Q) 
uEw-(Q) 
The condition c( u) ;:;; 0 for all u E U guarantees the existence of a flow satis-
fying the conditions 1 and 2, that is, rp(u) = 0 for all u E U. We call a flow satis-
fying the conditions 1 and 2 a feasible flow, which is done on the model of the 
designations occurring in optimization theory. 
Since with the possible exception of Q and 8 the Kirchhoff's node condition is 
satisfied in each vertex, we can find among all flows {rp(u)} maximizing the value 
of Q such a flow -
say rpo(u) -
that rpo(u) = 0 holds for each arc u entering Q 
and also for each arc u leaving 8. Without restriction of generality we thus may 
assume that no arc enters Q (in other words, we may omit such arcs without caus-
ing a change in the maximum flow distribution) and no arc leaves 8. 
In order to make the formulation of our optimization problem more simple 
and to ensure that the node condition is satisfied in each vertex, we introduce 
an auxiliary arc Uo = (8, Q) with c(uo) = 00 and turn to the following task: 
Given a directed graph G(I, U) with arc valuations c(u) ;:;; 0 for all u E U. Let two 
vertices Q, 8 be marked in G as well as one arc Uo = (8, Q) with c(uo) = 00 (uo 
is called a return arc). Let also w-(Q) = w+(8) = {uo} be true. (Such graphs will be 

32 
Chapter 1 
called network8,-too.) Find an arc function (a flow) tp(u) for which the following 
relations are true: 
1. 0 ;;;; tp(u) ;;;; c(u) 
2. I 
tp(U) = I 
tp(u) 
UEw+(P) 
uEw-(P) 
3. tp(uo) 
is maximum. 
for all u E U, 
for all P E Â£, 
If several source points Qi (i = 1, ... , r) or several sink points Si (j = 1, ... ,8) 
are given by the problem, then thIs task can be transformed into the above-
mentioned one by adding two auxiliary points Q' and 8' and by adding the arcs 
Uo = (S', Q'), (Q', Qi) (i = 1, ... , r) and (8i, S') (j = 1, ... ,8) with a capacity of 
00 each. (Note, however, that the sum of the sets of flows going from the Qi to 
the 8 j is to be maximized, with the capacity restrictions being taken into conside-
ration.) 
Before trying to solve the problem, let us explain it by means of a simple 
example (cf. Fig. 1.13). 
Q 
Fig. 1.13 
Let the numbers assigned to the arcs be the capacities of them. (The meaning 
of the doubly drawn arcs will be explained in the next chapter.) One can see that 
a maximum flow may assume the value 14 at the most since more cannot leave 
the source. Furthermore, one can easily ascertain that the sum of the capacities 
of any cut (of a set of arcs after the removal of which there will no longer exist a 
directed path -
a simple path -
from Q to 8) represents an upper bound for the 
value of the maximum flow. 
The theorem of Ford and Fulkerson to be proved in the next chapter will then 
show that the maximal flow value is equal to the cut capacity (i.e., equal to the 
sum of the capacities of the arcs of a cut) of a minimal cut. 
The following problem is investigated in 1.3.3: Given a directed graph G(Â£, U), 
with two numbers b(Ui) = bi and c(Uj) = Cj with -00 ;;;; bi ;;;; Ci ;;;; 00 being assigned 
to each arc Ui' Furthermore, let two vertices Q and 8 and one arc Uo = (8, Q) be 
marked in G, with b(uo) = bo = -00 and c(uo) = Co = 00 as well as w-(Q) 
= w+(8) = {uo} being valid. 

Flows and tensions on networks 
33 
Find an arc function (a flow) tp(u;} = tpi for which the following conditions are 
fulfilled: 
1. bj ~ tp(Ui) ~ Cj 
for all Ui E U, 
2. 1: tp(u) = 1: tp(u) 
for all P E X, 
3. tp( uo) = tpo 
is maximum. 
For the case bi = Â° 
(i = 0, ... , m) the problem obviously becomes the "classic" 
prob)em of Ford and Fulkerson. 
In paragraph 1.3.4, we will treat the question of how it is possible, in an undi-
rected graph with the edges valuated (by capacities), to calculate at the same time 
for all pairs of vertices Pi and Pi the maximal flow quantities which can be trans-
ported from Pi to PI' There will also be given the algorithm found by Gomory 
and Hu for the solution of this problem. 
1.3.2. The theorem of Ford and Fulkerson 
Let G(x, U) be a network, i.e., a directed graph in which to each arc Ui there is 
assigned one arc valuation c(Uj) ~ 0, which is called the capacity of Ui' Further-
more, let two marked vertices Q, 8 exist in X as well as one marked arc Uo 
= (8, Q) E U with c(uo) = 00. Here, Uo is the only arc enteringQ and also the only 
one leaving 8, i.e., thus w+(8) = w-(Q) = {uo}. 
DEFINITION. A set 6 ~ U of arcs is called a cut of G if the vertices of G may 
be subdivided into two disjoint classes 18 and m5 such that Q E 18,8 E m5 and 6 is 
composed of all arcs U = (A, B) with A E 18 and B E m5. 
In other words: A cut % is such a set of arcs that no path (no directed simple 
path) going from Q to 8 exists any longer in the graph after the removal of the 
arcs of %, or: for some set ~ of vertices containing Q and not containing 8, it 
holds % = 
w+(~). In network theory, especially in the case of transportation and 
flow problems, the concept of a cut is usually used. 
DEFINITION. The capacity c(6) of a cut 6 = (18/m5) is the sum of the capacities 
of all arcs of 6, i.e., 
c( 6) = c( 18/m5) = 1: c(A, B) 
AE)8 
BEml 
if c(A, B) denotes the capacity of the arc (A, B). (If 6 = 0, then c(6) = 0.) 
The doubly drawn arcs in Fig. 1.13 form a cut 6 = (18/m5), with 18 containing 
all filled vertices and m5 all those that are not filled. Obviously, the capacity of the 
cut equals 13. 
In a network, some special cuts form the sets of arcs w+(Q) and w-(8). 

34 
Chapter 1 
Before formulating the theorem of Ford and Fulkerson, we shall give a few 
lemmata. 
LEMMA 1. Let cP be a flow on a network G (x, U) with cp(uo) = cp(S, Q) = cpo. If 
~ = (18/m5) is any cut of G, then it holds: 
L cp(u) = L cp(u) + CPoÂ· 
UEw+(\8) 
UEw-(\8) 
U,,"Uo 
The proof is direct. Because the flow condition is satisfied in each vertex, the 
sum of the flows going from vertices of ~ to vertices of m5 equals the sum of the 
flows going from vertices of m5 to vertices of )8. 
LEMMA 2. Let cP be a feasible flow in a network G(x, U) of the value CPo (i.e., cp(uo) 
= CPo)' The capacity c ()8/m5) of a cut ~ = ()8/m5) will then be given by the relation 
CPo ;;; c(~/m5). 
This statement is evident since the quantity of flow which can be transported 
from vertices of )8 with Q E )8 to vertices of m5 with S E m5 cannot exceed the 
capacity of any cut. 
LEMMA 3. If for a special cut ~o = ()8o/m5o) and a flow cp the equality CPo = c( )8o/m5o) 
holds, then CPo is a maximum flow. 
This lemma is clear because of lemma 2. 
DEFINITION. A cut ~o = ()8o/m5o) for which c( ~o) ;;; c(~) for any cut ~ is 
true is called minimal cut. 
Interpreting the statements of lemmata 2 and 3 from a physical point of view 
will lead us to the clear result that the quantity which may be transported via 
a pipe line system cannot be greater than that passing through its tightest section. 
LEMMA 4. Let G (x, U) be a network and ~ a cut of finite capacity, i.e., c(~) < 00. 
Then, there exists on G a maximum flow CPo (that is, for any feasible flow cp it holds 
cp(uo) ;;; CPo(uo))Â· 
Proof. Since G is finite, there is only a finite number of cuts. Since the existence 
of a finite cut (that is, a cut of finite capacity) is being assumed; there is also a 
minimal cut ~o = ()8o/m5o). The fact that there exists on G also a flow CPo satis-
fying the condition 
will later be proved in connection with the algorithm of Ford and Fulkerson. 
The existence of a maximum flow may also directly be proved by means of the 
theory of linear optimization, which is due to the fact that the flow problem may 

Flows and tensions on networks 
35 
be represented in the form of a linear program, too, and the flows are also finite 
because of the existence of a finite cut. 
To solve our problem by means of the algorithms set up in optimization theory 
(for example the simplex method) would, however, not be useful, since it is not 
possible to take the specific structure of the task into account as is the case in the 
following algorithm. 
Let us assume, from now on, all capacities to be integers or 00. This is not so 
essential a restriction for practical applications, especially with a view to the use 
of digital computers. 
Algorithm of Ford and Fulkerson 
Given a feasible flow CPI on G (e.g. CPI = 0 is feasible), that is, for all u E U the rela-
tion 0 ~ CPI(U) ~ c(u) holds. Since the capacities are integers, we also may assume 
the arc flows to be integers. 
1. Labelling procedure 
(i) Label source Q. 
(il) Let the vertex Pk be labelled and let an arc (Pk> Pi) exist with CPI(Pk, Pi) 
< c(Pk, Pi)Â· Then label PiÂ· 
(iii) Let Pk be labelled and let an arc (Pi' Pk) exist with CPI(Pi' Pk ) > O. Then 
label Pi. 
2. A ugmenting step 
If sink S is labelled according to the labelling procedure, the flow can be aug-
mented (i.e., it can be changed in such a way that the flow quantity of the return 
arc Uo is larger than CPI(UO)). This augmentation is made along a chain from Q to S 
by at least 1. Let K = (Q = Po, PI' ... , P r = S) be a labelling chain (cf. the 
doubly drawn arcs in Fig. 1.14). 
(i') If (Pi' Pi+l) in K is traversed in the sense of its orientation, that is, if P i+1 
is labelled according to (ii), then we put 
CP2(Pi> P i+1) = CPI(Pj, Pi+I) + 1. 
(ii') If (Pi> P i+1) in K is traversed in its opposite direction, i.e., if it is labelled 
according to (iii), then we put 
CP2(P i , Pi+l) = CPI(Pj, P i+1) -
1. 
(iii') Put CP2( Uo) = CPI( Uo) + 1. 
(iv') For all those arcs u not lying on K put CP2(U) = CPI(U). 
One can easily make sure that in each vertex the flow condition (node rule) 
remains satisfied. 

36 
Chapter 1 
Let now, in Fig. 1.14, the capacity of an arc be indicated by the first number 
on it and let the number in parentheses indicate a feasible flow TI. Small crosses 
at the vertices serve as labels. If labelling took place according to (ii), then the 
cross would be found above, if it was done according to (iii), then the cross would 
be made below. 
As can be seen, the flow on Uo may be augmented according to the labelling chain 
described (doubly drawn arcs 1). The example shows that it can even be augmented 
by the value 2. 
TASK 9. Find out the least value by which the flow along a labelling chain may be augÂ· 
mented. 
In Fig. 1.15 the last possible augmentation is carried out and also the new label-
ling is given. The doubly drawn arcs in this figure possess the property that 
the initial point of such an arc is labelled, 
-
the end-point of such an arc is not labelled, 
-
T(u) = c(u) holds for such an arc. 
One can also recognize that these arcs form a cut (which is still to be proved for 
the general case) and that this cut forms a minimum cut because ofthe relation 
Q 
s 
Fig. 1.14 
Fig. 1.15 

Flows and tensions on networks 
37 
g;(u) = c(u) holding for each arc of the cut. That means, however, that we have 
found a maximum flow. 
Consider th~ limiting arcs, i.e., all those arcs which have one labelled end-point 
and one unlabelled. Let)8 be the set of the labelled and)ill the set of the unlabelled 
vertices. Evidently, the relations Q E )8 and S E )ill are true. 
a) For an arc u = (A, B) with A E )8 and B E )ill, it holds g;(u) = c(u); other-
wise, B would have been labelled according to (ii), i.e., B E )8 would be valid; 
b) For an arc u = (A, B) with A E )ill and BE )8, it holds rp(u) = 0; otherwise, 
A would have been labelled according to (iii). 
Now, we show that the set @) of all arcs u = (A, B) with labelled A and unlabelled 
lJ forms a cut. 
It is clear that the subdivision of the vertices into two classes (with )8 contain-
ing all labelled and )ill all unlabelled vertices) represents in fact a decomposition 
(the source Q lies in )8 and the sink S in )ill). The other property of a cut, however, 
may directly be seen from the labelling rule. 
Because of the validity of the Kirchhoff's node theorem, the flow rp( uo) equals 
the cut capacity of @). The flow found in this way is maximal by lemma 3. 
The results achieved may now be summed up; in the case of non-integer capa-
cities, we refer to the textbook of Sachs [12]: 
FUNDAMENTAL THEOREM 1.20. If the network G(:Â£, U) p088e88e8 a cut of 
finite capacity, then the maximum flow rpo( up) of all flow8 compatible with the capacitie8 
of the network equal8 the minimum cut capacity (minimal under all cuts); if the net-
work doe8 not p088e88 a cut of finite capacity, then there exi8t flow8 of any value being 
compatible with the capacitie8 of the network. 
Using the algorithm of Ford and Fulkerson it is possible, in the case of the 
existence of a finite cut, to find both a maximum flow and a cut of minimal capacity. 
To conclude, let us give another example from the field of simple mathematics 
concerning the application of the fundamental theorem mentioned above. 
In a group of n boys and n girls let each boy be acquainted with exactly m girls 
and each girl be acquainted with exactly m boys. Is it possible that in the course 
of m dancing sets each boy dances exactly once with each of his acquaintances, 
and each girl dances exactly once with each of her acquaintances, too? 
Construct a graph G(:Â£, U) in the following way (cf. Fig. 1.16): :Â£ consists of 
two classes 
An arc u is of the form u = (J;, M I). Such an arc u will be drawn if the boy J j is 
acquainted with the girl Mi' Furthermore, there will be inserted two auxiliary 

38 
Chapter 1 
points Q and 8 and ail arcs of the form (Q, J i) and (Mi' 8) (i, j = 1, ... , n) as well 
as the return arc (8, Q). The arcs (Q, J i ) and (Mi' 8) are provided with the capa-
city 1, all other arcs with 00. Evidently, a minimal cut will then have the. capa-
city n (in our example, this is 6) and contains either all arcs leaving Q or all arcs 
entering 8. Because the capacities are integers, one can find such a maximum flow 
of the value p(uo) = n, by using the above algorithm, that t,here are only flows 
of the value zero or 1, except for the return arc uo. 
5 
Q 
Fig. 1.16 
The arcs (J;, M I ) with p(Ji> M i) = 1 represent just one dancing set. (According 
to the graph theory terminology, these arcs are forming a linear factor.) The other 
dancing sets can be found out by eliminating the arcs forming the first dancing set, 
applying once again the algorithm, etc. 
The reader who wants to familiarize himself in more detail with the existence 
of factors in graphs should consult the textbook of Sachs [12]. 
1.3.3. Generalized theorem of Ford and Fulkerson 
This chapter deals with the following problem. 
Given a simple!) graph G(I" U). Let two numbers btu;) = bj and c(u;) = c j 
with -00 ~ hi ~ Cj ~ 00 be assigned to each arc Uj (i = 1, ... , m). Furthermore, 
let two vertices Q,8 and an arc (8, Q) = Uo with bo = -00, Co = 00 be marked. 
1) A graph is called simple if it contains neither loops nor multiple arcs. 

Flows and tensions on networks 
39 
Let the relation w-(Q) = w+(S) = {uo} be true. Find an arc function rp (a flow) 
for which 
1. bi ;Â£; rpi ;Â£; Ci 
(i = 1, ... , m), 
2. I: rp(u) = I: rp(u) 
for all P E I, 
uEw+(P) 
UEw-(P) 
3. rp(uo) = rpo 
is maximal. 
A few remarks are still to be made. 
a) The case bi = 0 for each i and Ci ~ 0 remains the most important applica-
tion. This case then represents the problem dealt with in point 1.3.2, where there 
will always be the possibility of indicating a feasible initial flow rp == O. 
b) As for the problem just formulated, the question of the existence of a fea-
sible initial flow is of great importance. Let us give here a necessary and sufficient 
condition for the existence of a flow that is compatible with the capacity restric-
tions. 
THEOREM 1.21. Given numbers bi' Cj with -00 ;Â£; bi ;Â£; Ci ;Â£; 00 (i = 1,2, ... , m). 
Then, for each i there will exist a flow rp = {rpl' ... , rp".l with bi ;Â£; rpi ;Â£; Ci if and 
only if for each elementary cocycle w the relations 
are true. 
The reader will recognize the necessity of these conditions if he takes into account 
that the bi are demanding a minimum quantity of the flows to pass through the 
arc Uj, whereas the Cj require maximum quantities to flow. 
Now, we show the sufficiency of these conditions and make the proof by means 
of mathematical induction via the number of vertices. 
For a graph containing n = 1 vertices, the condition may easily be satisfied 
(in the absence of cocycles), since if any arc exists, it will always be a loop. Never-
theless, it is possible for any flow to pass through these (eventual) loops as far as 
it is compatible with the bounds bi and Ci' 
Let the theorem be proved for all graphs with n (n = 1,2, ... , N -
1; N ~ 2) 
vertices. 
Let G be any graph containing N vertices. If G contains no cocycle (that is, 
only loops at the most), then it will be easy to give a feasible flow (see case n = 1). 
Let now w be any cocycle of G. Consider any arc u, = (P, R) E w. By removing 
ui from G and identifying P and R, the resulting graph G+ contains N -
1 ver-
tices. According to the induction hypothesis, there exists in G+ a feasible flow 
rp+ with bi ;Â£; ,{!,+ ;Â£; Ci for each arc Ui =l= Uj of G. 

40 
Chapter 1 
In the chapter on cocycles, we had assigned to a co cycle w(P) a vector having 
m components Wj(P) according to 
Putting 
w,(P) ~ I 
o if Uj is not incident with P, 
1 if Uj is going away from P, 
-1 if Uj is going to P. 
CPt = cPj+ 
for 
i =l= j, 
we get a flow <p" for which, however, the relation bi ~ <p/, ~ Gi is not necessarily 
true. 
Let us define some certain intervals J. We assign the interval Ji := [b;, Gj] to 
each arc Uj. Assign to each cocycle W an interval J en with 
To each cocycle W containing the arc ui there will be assigned an interval JL with 
Ji 
en 
We show first that these are really intervals, and furthermore, that for each 
cocycle W containing ui the relation <p/, E JL is true. 
As for Ji and J w there is nothing to show since this is directly included in the 
hypothesis. 
Thus, we show that J j is an interval for which cP/' E J j holds. By taking 
the definitions of cP+ and cP" into account, we distinguish between two cases. 
1. ui E w+, then 
}; bj -
}; Gj ~ }; CPt -
}; CPt + cp/, = cP/' ~ }; Gj -
}; bj. 
UtEw-
U,Ew+ 
uiEw-
UtEw+ 
UtEw-
UtEw+ 
i+i 
i+i 
2. ui E W-, then 
}; bj -
}; Gj ~ }; CPt - 1: CPt + cP/' = cP/' ~ 1: Cj -
1: bi â¢ 
U(Ew+ 
u,Ew-
uiEw+ 
UiEw-
UfEw+ 
u,Ew~ 
i+i 

Flows and tensions on networks 
41 
Since for any co cycle OJ containing ui it holds that rp/, lies In Jj, we have 
proved at the same time that 
n Jj =F 0 
is true. 
Now, let us show that the relation Jj n Ji =1= (0 holds. If we denote the initial 
point of the interval Jwi by Ywi and the terminal point by bj, that is, Jj 
= [Ywi, bj], then we get, with two cases being distinguished again: 
1. ui E OJ+: The conditions of our theorem result in 
.E bj -
.E Cj ~ 0, 
that is, 
yj = .E bj -
.E Cj ~ ci 
u,Ew-
ulEru+ 
i+j 
and because of .E bj -
L Cj ~ Â° 
the relation 
UiEw+ 
Ui Ew-
bj = L Cj -
.E bj ~ bi 
UiEw-
u,Ew+ 
i+i 
holds. From the respective position of yj, bj, bi' ci' however, there follows 
directly the assertion 
JjnJi=F (0. 
The case 
2. ui E OJ-
may be treated in quite an analogous way, which proves the assertion. 
Thus, we have shown that all of the intervals Ji andJj, with OJ passing through 
all cocycles containing Uj' intersect. That is, there is a number Yi that lies in each 
of the intervals Ji, Jj (ui E OJ). 
Now, we define some other intervals: 
ji := [b j , Gj] = [bi' Ci] = Ji for i =F j. 
ji := [bi, Gi] = [Yi' Yi]Â· 
We will show that with the new interval end-points bj, Gj the cOI,lditions of the 
theorem are satisfied, too. 
1. ui E OJ+: Since bi = Gi = Yi E Jj, it follows 
.E bj -
.E Gj = .E bj -
.E Cj ~ bi = G, 
u"Ew-
UiEw+ 
u,Ew-
u,Ew+ 
i+i 
i+j 
~ .E Cj -
.E bj = .E Gj - .E bj â¢ 
u,Ew-
u"Ew+ 
u"Ew-
U,Ew+ 
i+j 
Hi 

42 
Chapter 1 
Consequently, the relation 
1.: b; - 1.: Cj ~ 0 ~ 1.: Cj - 1.: b; 
ucEw-
U,ElÂ»+ 
u,Ew-
UtEw+ 
is true. 
2. Uj E w-: This case is to be dealt with analogously. 
From this there results the relation 
Thus, we can state that the conditions of the theorem are fulfilled by the bj , Cj in 
both cases. 
Q 
s 
Fig. 1.17 
Thus, we have managed to contract one of the given intervals [bj, ej] to a point 
without violating the premises of the theorem. We make this contraction for each 
arc in succession and in doing so, the premises of the theorem are never violated. 
Having achieved this, then there will be just the flow condition (the components 
of this flow are exactly the Yrvalues calculated) in place of the condition assumed. 
That means that we have found a flow also for a graph with N vertices. 
Q.E.D. 
By this, the theorem of the existence of a flow is entirely proved.1) 
The reader may solve the following tasks relating to the existence theorem proved 
just now: 
TASK 10. For each arc Uj, there exists a flow q; with q;j ;;;; bj if and only if the condition 
}; b; ~ 0 is fulfilled for each co circuit w. 
u,Ew 
TASK 11. A flow q; with q;j ~ Cj exists if and only if the condition 1.: cj = 0 is fulfilled for 
each cocircuit w. 
w,Ew 
1) A generalization of theorem 1.21 and a simpler proof of it are given by L. Hempel and 
D. Wiirbach in their article published in the periodical "Mathematische Operationsfor-
schung und Statistik", series "Optimization". 

Flows and tensions on networks 
43 
Here again we consider only the most important case, i.e., if the b; and the Cj 
and thus also the fluxes cp; are integers. Let us assume as well as the simplicity 
of the network, although the proof may be made even without this restriction 
by making some slight modifications only. 
We will explain the problem to be described and the following algorithm by 
means of a small example (of. Fig. 1.17). Let the first number of the number 
pair at the arcs U; denote the value of bj and the second one that of Cj. A feasible 
flow is easy to find (task I), that is, the necessary and sufficient conditions indi-
cated above are satisfied, although it is in general very difficult to verify them. 
The algorithm which has been mentioned before and which is necessary for the 
solution of the given task is decomposed into two parts as follows. 
1. Algorithm for finding a feasible flow 
From the graph G(I, U) with the capacity restrictions bj and Cj we go over to a 
graph G'(I', U'). For the capacity restrictions in G', the conditions bj ' = 0 and 
C;' ~ 0 will be true. 
All vertices and all arcs lying in G also lie in G', and for these arcs U;' = Uj we put 
b;' = b(u;') = 0 and 
C;' = c(u;') = Cj -
bj â¢ 
Add now in G' two more vertices being marked, namely Q' and 8', and some 
more arcs marked as well, according to the following rule (cf. Figs. 1.17 and 1.18): 
a) If Uj = (Pk , PI) is an arc of G with bj ~ 0, then two arcs (Q', Ptl and (Pk , 8') 
with the capacity restrictions c'(Q', Ptl = c'(Pk , 8') = b; will be added. (For bj = 0 
these arcs need not necessarily be added, since no flow at all can pass through 
these arcs.) 
b) Let Uj = (Pk , PI) be an arc of G with bj < O. Here again, two new arcs 
(Q', Pk ) and (PI,8') will be added, with the capacity restrictions c'(Q', Pk ) 
= c'(PI , 8') = -b j being valid. For all arcs U; of G, except for the return arc Uo 
= (8, Q), new arcs are then added. 
The new graph may contain double arcs. There will, for example, result two 
arcs going from P l to 8', since one arc of the form (Pl , 8') with c'(Pl , 8') = 1 is 
provided by the arc (Pl , P 3) -
cf. case a) and another arc (Pl , 8') withc'(Pl , 8') = 1, 
too, is being provided by the arc (Q, P l ). Such multiple arcs may be avoided 
by adding only one arc and assigning to it as capacity the sum of all capacities of 
the arcs virtually resulting from the construction of G'. Figure 1.18 shows the 
result of the generation of G'; there we have also inserted the return arc marked 
(8', Q') with a capacity of 00. The number at an arc indicates the newly established 
capacity. 
In the new graph G', we have to search for such a flow cp' that the arcs leaving 
Q' (and thus, also the arcs entering 8') are saturated. We shall prove a theorem 

44 
Chapter 1 
Q 
Fig. 1.18 
Fig. 1.19 

Flows and tensions on networks 
45 
which assures, on the basis of the knowledge of a maximum flow in G', the existence 
of a feasible flow in G. 
THEOREM 1.22. To each flow cp in G compatible with the capacity intervals [b(u), 
c( u)] there corresponds in G' a flow cp' compatible with the capacity intervals [0, c' (u')] 
that saturates the outgoing arcs (P, S'), and vice versa. It holds 
cpj = cp;' + bj (i = 1, ... , m), 
Proof. Let cp' be a flow in G' saturating all arcs leaving Q' (and thus, all arcs 
entering S'). Show ~hat a feasible flow cp in G may be obtained from cp'. Let Pbe any 
vertex of G (cf. Fig. 1.19). Four different types of arcs may be incident with P: 
1. U 1 = (X, P) with bl > 0, 
2. U 2 = (Y, P) with b2 < 0, 
3. U 3 = (P, Z) 
with 
b3 < 0, 
4. U4 = (P, U) with b4 > 0. 
According to the formation rule for G', there exist arcs v/ as follows (analogously 
to the above order). 
1. VI' = (Q:, P) with 
C'(VI') = bI , 
2. v2' = (P, S') with c'(v2') = -b2, 
3. V3' = (Q', P) 
with 
C'(V3') = -b3 , 
4. v4' = (P, S') with 
C'(V4') = b4. 
Now, one can easily see that a feasible flow cp is induced on G by a flow cp' satu-
rating all arcs leaving Q' and also all arcs entering S'. 
1. The flux CPI = cp(ul ) on UI must satisfy in G the condition bl ~ CPI ~ CI with 
the flux going to P. If there is a flow cp' from Q' to P which saturates the arcs 
leaving Q', then the flow quantity in G' will be CP'(VI') = bl â¢ If on VI' the flux is re-
duced by bl> then it may be increased on U 1 by bl (thus, the flux is feasible in this 
arc for the initial graph G). Furthermore, the arc VI' is without flux and may be 
omitted. 
Correspondingly, consider the remaining three cases. 
These reflections being made for each vertex, they result in a feasible flow cP on 
G, with cp(Uj) = cp'(Uj) + bj for each arc Uj in G. 
Now, we show that the relation cp(uo) = cp'(uo) holds for the return arc uo. 
Consider vertex S (cf. Fig. 1.20). To an arc U2 with b(U2) = b2 < Â° there was 
added in G' an arc v2' with c'(v2') = -b2 for which cp'(v2') = -b2 holds according 
to the premise. If the flux on v2' is reduced by the amount -b2 and if it is also 
reduced on arc U2 by this amount, then the flow condition remains fulfilled in S, 
there is no flux any longer on the auxiliary arc V2' (it may thus be omitted), and 
the flux cp(u2), which has resulted in this way, satisfies the required conditions 
b2 ~ CP(U2) ~ C2 on arc U2. 

46 
Chapter 1 
Correspondingly, we increase the flux by the amount bI on an arc uIleading to 
8 with b(uI ) = bI > 0, and we reduce it by the amount bI on the arc VI' leading 
in G' from Q' to 8. Thus, this arc becomes free of fluxes, whereas the flux on Ul 
satisfies just the capacity restrictions. On the returning arc Uo = (8, Q), the flux 
does not change since we have explicitly failed to introduce auxiliary arcs for it. 
This proves, however, that fIl(uo) = fIl'(uo) is valid. 
Fig. 1.20 
5''\, 
\ 
CO\ 
:'s. 
_: I 
vI 
/ 
Now, we turn to the second part of the proof of theorem 1.22. 
Let fIl be a feasible flow on G. Show that the graph G' which has been generated 
according to our construction rule has such a structure that a flow fIl' may be found 
on it saturating the arcs leaving Q' (and entering S'). Let UI = (X, Y) =1= Uo be 
any arc of G with bI > O. In addition to this arc, two arcs (cf. Fig. 1.21) WI' 
= (Q', Y) and VI' = (X, S') are introduced in G', with the capacity c'(wI ') = c'(vI ') 
= bI being assigned to them. If on UI the flux fIl(UI) is reduced by the amount bI 
(the capacity limits bI and CI are reduced at the same time by the amount bI each), 
then the arc UI in G' will have the capacity limits 0 and CI -
bI , and the flux fIl' (uI) 
lies within these bounds. In order to ensure that the flow condition remains satis-
fied in the vertices X and Y, we let a flux of the value bI pass from X via arc VI' to 
S' and a flux of the value bI from Q' via WI' to Y. This however, makes, these 
two arcs saturated. The reader may carryon by himself an analogous reflection for 
an arc U2 = (X, Y) with b2 < O. 
Since we have not introduced any new arcs for the return arc uo, we obtain the 
relation fIl'(uo) = fIl(uo) by making some similar reflections as in the first part of 
this proof. 
Thus, the proof of theorem 1.22 is complete. 

Flows and tensions on networks 
47 
Fig. 1.21 
As for our problem, the following task results for finding a feasible flow in G: 
(i) 
Construct G' on the basis of G and determine the capacity restrictions c{. 
(il) Find a maximum flow in G', i.e., a flow for which the value on the arc 
(S', Q') becomes maximal. 
(iii) If all arcs leaving Q' are saturated, we will find a feasible flow for each 
arc u =l= Uo = (S, Q) and IP(uo) = qy'(uo) of the graph G according to the relation 
IP(U) = IP'(u) + b(u). 
(iv) If a maximum flow in G' does not saturate all arcs leaving Q', then there 
is no feasible flow in G. 
Now, we come to the construction of a maximum flow in G (as far as we have 
found a feasible flow in G'). 
2. Algorithm for determining a maximum flow in G 
(i) Label the source Q in G. 
(il) If Pi is labelled and Pk is not, the latter will also be labelled, in so far as 
there exists an arc (Pi' P k ) with IP(Pi, Pk ) < c(Pi, Pk ). 
(iii) If Pi is labelled and Pk is not, then we label also Pk, in so far as there exists 
an arc (Pk , Pi) with IP(Pk! Pi) > b(Pk! Pi)Â· 

48 
Chapter 1 
If we succeed in this procedure in labelling the sink 8, then we can augment the 
flux on the returning arc (according to the algorithm of Ford and Fulkerson dealt 
with in section 1.3.2.) by at least 1 (with the capacity restrictions being assumed 
as integers). In this case, repeat the algorithm. If it is not possible to label 8, then 
the flux on the return arc (8, Q) will be maximum. 
Let 6 be the set of all those vertices being labelled after having broken off the 
labelling rule (Le., Q E 6, 8 ~ 6). Then, the relation fP(u) = c(u) holds for any 
arc u E w+( 6), and fP( u) = b( v) holds for any arc v E w-( 6). Thus, it results that 
the flow quantity from Q to 8 (or on the return arc (8, Q), too) cannot be further 
augmented since no greater quantity of flow may pass through the arcs of w+( 6) 
because the upper capacity limits have been reached. 
For the maximum flow fPo = fP(uo) obtained in this way, we get: 
These considerations result in the following generalized theorem of Ford and 
Fulkerson: 
THEOREM 1.23.1t in a graph G with capacity limits bi> Ci tor the arcs Uj there exists 
a flow fP, i.e. 
bi :;;;; fP(Ui) :;;;; Ci 
(i = 1, ... , m), 
then the maximum flow fPo on the return arc Uo = (8, Q) has the value 
with the minimum being formed over all sets 6 at vertices tor which Q E 6, 8 ~ 6 
hold. 
Thus, for the problem indicated at the beginning of this chapter the solution 
assumes the value five for the maximum flow (cf. Fig. 1.22). 
L-------------~~r_----------~/ 
Fig. 1.22 

Flows and tensions on networks 
49 
1.3.4. The multi-terminal problem 
In this section, we restrict ourselves to undirected graphs or to symmetric graphs 
(there is no substantial difference between them). Symmetric graphs are graphs 
in which there exists an arc (X, Y) if and only if (Y, X) exists. Loops and also 
parallel edges will not be allowed. Let a capacity c(Pi> Pi) = cii = ci; be assigned 
to each arc (Pi> Pi). Here again, we only consider integer values of the cii. As re-
quired we will use either the directed symmetric graph G introduced just now or the 
undirected graph G' thus resulting from G so that we substitute the (undirected) 
edge (P;,Pi) having a capacity cii for the two arcs (Pi' Pi) and (Pi' Pi)Â· 
Let us now examine which flow quantity can be sent through the graph, and 
that from any chosen vertex Pk to any other vertex Pi. We denote this maximum 
flow quantity by Iki' and because of the symmetry of the graph, it is clear that the 
relation Iii = Iii holds for any vertices Pi' Pi. In addition, suppose that Iii = 00 
for each vertex Pi. 
In this paragraph, we try to find t~ese lij all at once by a suitable algorithm 
(which has been found by R. E. Gomory and T. C. Hu) for each couple of vertices. 
Before beginning, note that the quantities Iii and Ikl may, in general, not be 
transported at the same time. 
The following theorem reveals a simple connection between the Iii. 
THEOREM 1.24. A set iY = {Iii: lij = fii> i, j, = 1, ... , n} may be considered to 
be the set of the maximum flow quantities of a certain network G if and only if the 
relation 
fik ~ min (fii' fik) 
holds for all i, j, k. 
Proof. 
(1) 
1. Necessity. According to the theorem of Ford and Fulkerson, there exists in 
Gacut6 = (~/m!)withPi E ~,Pk E m!andfik = c(~/m!),i.e.,acutofminimum 
capacity separating Pi from Pk. Let Pi be any third vertex of G. Then there will 
be two possibilities: 
a) Pi E ~: Since Pk E m!, the set 6 = (~/m!) also turns out to be a cut sepa-
rating Pi from Pk, i.e., it holds: 
fik ~ c(~/m!) = fikÂ· 
b) Pi Em!: Since Pi E ~, the set 6 is also separating the vertices Pi from Pi' 
i.e., it holds: 
Iii = c(~/m!) = likÂ· 
One of the two cases a) or b) occurs, i.e., the inequality (1) holds. 

50 
Chapter 1 
2. Sulliciency. Consider a set of (;) numbers hi (we had assumed Iii = 00 
and Iii = Iii for all i, j) satisfying the inequality (1). Let G be a symmetric, com-
plete graph with n vertices PI' ... , Pn (complete in the sense that for any two 
different vertices Pi' Pi there exists not only the arc (Pi' Pi)' but also the arc 
(Pi' Pi))' We assign to each of the arcs (Pi> Pi) a valuation Iii and call hi the length 
of the arc assigned to it. We search for a spanning tree M in G in which the sum 
of the lengths of the arcs (or of the edges when undirected) of M is maximum. 
Let Uis = (Pi' Ps) be an edge of G not contained in M. Then, there is in M a 
unique path W = (uij, Uik, ... , urs) going from Pi to P s. We will show that 
Suppose that there exists an edge upq on W the length of which is shorter than 
that of Uis' If we remove from M the edge upq and add Uis, a spanning tree M' of 
G will develop which is longer than M which contradicts the maximality of M. 
On the other hand, it is easy to see (mathematical induction!) that theorem 
1.24 may be extended, namely that the condition (1) is equivalent to the condition 
(2) 
From the last two inequalities, however, it results 
(3) 
with (uij, Ujk> ... , urs) being that path between Pi and Ps which has been uniquely 
fixed by the maximum spanning tree. 
Because of (3), the maximum spanning tree M of G with the capacities cii 
= tii for all (i, j) EM is a graph possessing property (1). 
REMARKS. 
1. Let Pi' Pi' Pk be any three vertices of G. Then, at least two of the three 
maximum flow values Iii' tjk' tki are equal, which follows immediately from (3). 
2. Of the (;) maximum flow values lij there differ from each other n -
1 
values at the most, and this also follows directly from (3). There exist n - 1 values 
of the Iii differing from each other only if the lengths of the edges of a maximal 
spanning tree M are pairwise different. 
Now, we come to Gomory's and Hu's algorithm for finding all iii at once. Here, 
we take into consideration that it is sufficient to construct a spanning tree with 
maximum length, since the formula (3) offers the possibility of calculating the 
remaining maximum flow values. 

Flows and tensions on networks 
51 
Algorithm of Gomory and Hu 
Let us first specify the concept of condensation ot a set ot vertices. Let m 
~ I be 
a subset of the set I of vertices of an undirected graph G. 
We substitute a vertex A for m, and the edges to be newly introduced have to 
be drawn according to Fig. 1.23. If in G, for example, the vertices AI, ... , Ar of 
m are connected with a vertex B ~ m, then an edge (A, B) with the capacity 
r L c(Aj, B) will be substituted for the edges (Aj, B), i = 1, ... , r in the condensa-
i=1 
tion graph G+. The capacities of those edges having no end-point in m remain 
unchanged. 
(i) Choose any two vertices Pj, Pi in G and determine a maximum flow of the 
value Iii flowing between them, by means of the algorithm of Ford and Fulkerson. 
The algorithm supplies a minimum cut iSl = ()81/~th) with Pi E )81 and Pi E m.\1' 
and tii = C()8dm.\I). For the sake of brevity we put C1 = c(iS1) and represent the 
result in Fig. 1.24a. 
(ii) If one of the two classes )81' m.\1 contains more than one vertex (this is say 
m.\d, then a maximum flow will again be determined between any two vertices 
P k and PI of m.\1 by means of the algorithm of Ford and Fulkerson. This maximum 
flow in turn induces a minimum cut iS2 = ()82/m.\2) ()81 may remain condensed 
Fig. 1.23 
01 
cl 
Fig. 1.24 

52 
Chapter 1 
in this case). This process is represented in Fig. 1.24b. Here, we decompose m!l 
into two classes and join them to each other by an edge with the valuation C2 
= c( (2). If in G the cut 62 disconnects the sets ~2 and ~1o then the "node" m!2 
will be connected with the "node" ~l. But if 62 disconnects the sets m!2 and ~l 
from each other, we connect ~2 and ~l. 
(iii) Now, find among the three classes of nodes ~l' m!b ~2 such one containing 
more than one vertex (if there is none, we have finished). This class, however, will 
be decomposed according to (ii). The procedure will be continued as long as there 
can still be found classes of nodes comprising more than one element. 
Let us look at an example (cf. Fig. 1.25). The numbers at the edges stand for 
the capacities assigned to them. We try to find the maximum flow values occurring 
between each couple of vertices of this network. Six vertices can be found in the 
network G; that means, we have to determine five edges of the spanning tree 
with "maximum lengths", i.e., to solve five maximum flow problems. 
1. Choose arbitrarily two vertices, say P 2 and P 3, and determine a maximum flow 
going between them, and also a cut of minimum capacity that separates these 
two vertices from each other. We get for the maximum flow a value of 123 = 14. In 
such a minor case, this may be found by trying out, but in general the algorithm 
of Ford and Fulkerson will have to be applied. Here, each edge u is to be replaced 
by two oppositely oriented arcs having the same capacity like u, two auxiliary 
points Q and S are to be introduced, with one arc going from Q toP2 , the second 
from P 3 to S and the third from S to Q; to these three arcs there must be assigned 
a capacity of 00 and the flow going on the arc (S, Q) is to maximize. A cut 
of minimum capacity disconnects the vertices PI' P2, P 6 from P 3, P 4, Ps 
(cf. Fig. 1.25b). 
2. We go on decomposing for example m!l = {Pl' P2, P6} and condense ~l 
= {P3' P 4, Ps} to form avertex(Fig.1.25c). If we now look for a maximum flow 
between PI and P 2, we can do this in the network of Fig. 1.25c. We get for the 
maximum flow a value of 112 = 15 and as minimum cut ({P2}/{Pl' P 3,P4, P 5, P6}). 
An edge with the valuation of 15 is drawn from {P2} to {Pl' P6}, since P2 is dis-
connected from the remaining vertices when this minimum cut is removed 
(Fig. 1.25d). 
3. Now, we search for a maximum flow going from PI to P6, etc. (cf. Fig. 1.25e 
to j). 
Figure 1.25j shows furthermore' the single minimum cuts (interrupted line), 
whereas the maximum flow tree is represented in Fig.1.25i. If we want to find, for 
example, the maximum flow from P 2 to P 4, we have to seek the path joining P2 
to P4 in this tree. In this way, we get for the maximum flow the value 124 = 14, 
because the "shortest" edge on this path has the value 14. 

Flows and tensions on networks 
53 
11. 
( 
c' 
$) 
q~
PJ'~_'P~ 
b 
~ 
c, 
dl 
R $) 
~~
~.P'P5 
" 
. 
Po 
;;1 
p. 
II 
j) 
Fig. 1.25 

54 
Chapter 1 
The following maximum flow matrix results for our example: 
PI P2 P3 P, P5 P6 
PI 
00 15 14 14 13 17 
P2 
15 
00 14 14 13 15 
P3 
14 14 
00 14 13 14 
P4 
14 14 14 
00 13 14 
P5 
13 13 13 13 
00 13 
P6 
1'7 
15 14 14 13 
00 
Further maximum flow problems will be treated in chapters 3 and 4. The inter-
ested reader, however, may find other flow problems in the books of Hu [9], 
Ghouila-Houri/Berge [7], Busacker/Saaty [1], Ford/Fulkerson [5], Lawler [20] 
and Carre [21]. 
1.4. 
THE MAXIMUM TENSION PROBLEM 
1.4.1. The existence theorem tor a tension 
In this section, we shall discuss the following problem: 
Let G('Â£, U) be a finite directed graph. Let an interval [k j , 1;] be assigned to 
each arc Uj E U. Find a tension 0. = (0.1, â¢â¢â¢ , o.m) on G with the restrictions 
k;~o.;~l; (i=l, ... ,m). 
We first want to give an existence theorem. 
THEOREM 1.25. Givenrealnumbersk;, liwith -00 ~ k; ~ l; ~ 00 (i = 1, ... , m). 
A tension 0. with k; ~ 0.; ~ li tor each i exists it and only it tor each elementary 
cycle fl the relations 
(1) 
hold. 
This theorem may be proved analogously to the method applied for proving 
theorem 1.21. We recommend this to the interested reader. 
Furthermore, the reader may also solve the following tasks resulting as corol-
laries from the theorem. 
TASK 12. A tension f} with f}i ~ ki (i = 1, 2, ... , m) exists if and only if for each circuit fJ, 
the relation I kj :;;: 0 is true. 
UiEI-t 
TASK 13. A tension f} with f}j :;;: 1; (i = 1,2, ... , m) exists if and only if for each circuit fJ, the 
relation 1: 1; ~ 0 is true. 
U.E~ 

Flows and tensions on networks 
55 
1.4.2. The problems of the shortest and the longest paths as potential problems 
Given a directed graph G with two vertices marked, namely Q (source) and 8 
(sink), and one arc Uo 0:= (8, Q) also marked, with an arc function d assigning to 
each arc u a number d(u) ;;; O. Find a potential t (a node function t(X)) such that 
for each arc u = (X, Y) the tension {} induced by the potential t satisfies the con-
dition 
{}(u) = t( Y) -
t(X) ~ d(u). 
In addition, find among all potentials also a t such that t(8) is maximum, with 
t(Q) = 0 being given. 
Putting d(uo) = 0, we can also formulate this problem as follows. 
Among all tensions {} which are compatible with the arc valuations find a tension 
for which 
-{}(uo) = t(8) -
t(Q) 
is maximum. 
If we interpret the arc valuations d(u) as distance between the end-point of u 
and the initial point of u, then t(8) -
t(Q) is just the shortest distance from Q 
to 8 (for the case when t is induced by a tension {} maximizing -{}(uo)); on no 
arc, however, the tension is allowed to exceed the arc valuation (i.e., the length), 
thus, the sum of all tensions along any path oriented from Q to 8 must not exceed 
the total length of this path. That means that the sum of the tensions (i.e., the 
potential difference t(8) - t(Q)) on a shortest path is not greater than the length 
of this shortest path. 
We still have to show that a tension may be found, the sum of which along a 
shortest path equals the length of the shortest path (i.e., the tension along such a 
path is equal to the arc valuation). Suppose that for the tension maximizing 
-{}(uo) and for each path W connecting Q with 8 it holds 
t(8) < l(W) , 
with t(8) being the potential value of 8 (induced by {}) and l(W) the length of a 
path W, which is supposed to be of minimum length for our further considerations, 
i.e., 
l(W) = }; d(u), 
t(8) = };{}(u). 
UEW 
UEW 
Then, there will exist on each path going from Q to 8 at least one arc the tension 
of which might be augmented without violating the restriction d, but this, how-
ever, would contradict the maximality of {}. 
Before turning to the solution of the shortest path problem, let us formulate 
the problem of the determination of a longest path between two vertices as a 
potential problem. I,et us suppose the graphs examined to be circuit-free (other-

56 
Chapter 1 
wise it would be possible, when traversing such a circuit sufficiently often, to indi-
cate sequences of arcs between two vertices, the length of which may exceed any 
value). 
Given a circuit-free directed graph with two vertices Q and 8 being marked, one 
arc Uo = (8, Q) marked and an arc valuation assigning to each arc u a number 
d(u), which is also called length of u. Find a tension {} (and thus, the potential t 
assigned to this tension, with two potentials differing from each other only by 
an additive constant; we put t(Q) = 0) which satisfies the following conditions: 
a) {}(u) = t( Y) -
t(X) ~ d(u) for each arc u = (X, Y), 
b) {}(uo) = t(Q) -
t(8) is to maximize. 
Why is this the problem of the determination of a longest path 1 
On each path going from Q to 8 (all arcs being oriented in this direction!) the po-
tential is growing from vertex to vertex (provided that the arc valuations are all 
positive). For the arc u the growth of the potential is at least d(u), that is, the 
potential growth t(S) -
t(Q) on any path Wfrom Q to 8 is at least l(W) = J; d(u). 
UEW 
Since this is true for each path going from Q to S, this relation holds also for a 
longest path from Q to 8. 
Suppose that there exists a tension {} such that for the potential t assigned to {} 
the relation 
t(S) > max l(W) 
W 
holds, with W traversing all paths from Q to 8. Say that there is, among all such 
tensions, one tension {} such that t(8) is minimum (for the sake of uniqueness, we 
have generally put t(Q) = 0 for the potentials assigned to the tensions).l) Then, 
on each path going from Q to 8 there is at least one arc u = (X, Y) with {}(u) > d(u). 
Consider the set of arcs UO = {u E U} : {}(u) > d(u)}. As we saw, UO =F 0. Let 
u* E UO be such that 
min ({}(u) -
d(u)) = {}(u*) -
d(u*). 
UEU' 
Since on each path from Q to 8 there lies at least one arc of uo, the set UO contains 
a cut (50 disconnecting Q from 8. As u* has been chosen in this way, it holds for 
each of the arcs u = (X, Y) E (50: 
{}(u) -
d(u) ~ {}(u*) -
d(u*) > O. 
We thus can reduce the value t( Y) for each end-point Y of such an arc u E (50, 
which will also cause t(8) to decrease, by at least {}(u*) -
d(u*). This, however, 
would contradict the choice of {} and thus the choice of its potential. 
1) The existence of the minimum is guaranteed by wellÂ·known theorems of linear optimi-
zation. 

Flows and tensions on networks 
57 
The problem of the determination of a longest path will be discussed in para-
graph 1.5 in connection with an introduction to the problems related to network 
analysis. 
Now, we come to an algorithm for determining a shortest path, or more preci-
sely a shortest simple path, in a graph. 
1.4.3. Algorithm for determining a shortest simple path 
We consider a directed graph G(x, U) with valuated arcs, with the arc valuation 
l(u) of the arc u being called the length of u. In this graph, we imagine two vertices 
Q and S to be marked and try to determine a shortest simple path (if there is one) 
going from Q to S, as well as its length. In chapter 3 we shall be dealing with this 
problem once again, and we shall then determine by means of an algorithm, for 
each pair of vertices, the lengths of the shortest simple paths between them. 
We assume all arc valuations to be non-negative. 
Let the sequence of arcs 
B = {(Q = AI> A 2), (A2' Aa), ... , (Ak-I, Ak = S)} 
denote a simple path from Q to S. Let l(B) be the length of the simple path B 
connecting Ai with Ak â¢ Then, it holds 
k-I 
l(B) = 2: l(Ai, A i+1)' 
If we denote by l(Ar) the length of a shortest simple path connecting the vertex 
Q = Al with the vertex A" then 
l(Ar) = min l(B) , 
B 
with B being taken over all simple paths going from Q = Al to AT' 
Algorithm for determining a shortest simple path 
(i) Put t(Q) = t(AI) = O. 
(ii) For the set xm consisting of m vertices (m ~ 1) let t(Ai) (Ai E xm) be already 
determined. Among all arcs u = (X, Y) with X E Xm, Y 1xm (if any exist) we 
choose such an arc for which t(X) + l(u) is minimum (if several such arcs u exist, 
choose anyone of them). If u' = (X', Y') is such an are, i.e., for which t(X') + l(u') 
is minimum, then put 
t( Y') = t(X') + l( u') 
and 

58 
Chapter 1 
(iii) If a value t cannot be assigned to any other vertex, then the algorithm 
terminates. 
If to the vertex Ar a value t(Ar) is ascribed, then t(Ar) will be the length of a 
shortest simple path going from Q to An i.e., t(Ar) = l(A r). 
Before proving the latter statement, note that in each step of the algorithm a 
tree is constructed which entirely contains its predecessor. It is a rooted tree with 
the root Q. Relative to Q we also call it distance tree. In Fig. 1.26, we have given 
a distance tree for an undirected graph. If we replace each edge by two oppositely 
oriented arcs, we get a directed graph on which the distance tree is generated; 
in this case, it is the distance of all places of the country of Ilmenau from Ilmenau 
itself. In addition, the distances have been indicated at the vertices. 
Fig. 1.26 
We now show that for a vertex Ak which has been valuated in this procedure 
with t(Ak) the relation t(Ak) = l(Ak) actually holds. 
As the value t(Ak) has been assigned to Ak, there exists a simple path going from 
Q = Al to A k â¢ 
The assertion is certainly true for the set Xl of vertices, since Xl = {AI}' and we 
have put t(AI) = O. However, the distance of a point from itself is certainly equal 
to zero. 
Let the assertion be proved for all vertices of Xm, i.e., t(A) = l(A) for each ver-
tex A E xmâ¢ If no other vertex may be found according to (ii), the proof is complete. 
Let Y be a vertex found in accordance with (ii), i.e., Xm
+1 = xm U {Y}. We 
suppose that there exists a simple path B going from Al to Y the length l(B) of 
which is shorter than t( Y). Let Z be the first vertex found on B and not belonging 

Flows and tensions on networks 
59 
to xm (it may hold Z = Y). Let u = (X', Z) E B (i.e., X' E xm). Because of the 
choice of Y according to (ii), it holds that t( Y) ~ t(Z) (if assignment of the value 
t is carried out up to the end). This means that, when reaching Z, the simple path 
B (assumed to be shorter than t( Y)) has already a length which is at least as long 
as t( Y). Since we have supposed all arc valuations (i.e. lengths) to be non-negative, 
the simple path B will be at least of length t( Y) when reaching Y, which contra-
dicts the assumption that the length of B is shorter than t( Y). 
Thus, the proof of the assertion is evident. The algorithm given yields shortest 
simple paths going from Q = At to each vertex that may be reached from Q. 
The order of the arcs added according to the algorithm, and thus the order of 
the vertices added, determines at the same time the order of the vertices with a 
view to their distance from Q. 
Let us give another algorithm making it possible to admit to a limited extent 
also negative lengths of certain arcs. 
Let G be a directed graph without circuits of negative length with valuated 
arcs. Then, the following algorithm yields shortest simple paths and their lengths 
from a fixed starting point Q to all vertices which can be reached via simple paths. 
We shall not prove it here as the interested reader may find it in the textbook 
of Sachs [12]. 
Algorithm 
(i') Apply the preceding algorithm which will lead to the arc valuations to(X) 
for all vertices X that can be reached from Q. Let Ho be the tree resulting from 
this step (in general, this is not the distance tree I). 
(ii') Let a tree Hi (i ~ 0) be already constructed and let it have the arc valua-
tions tj(X). Among all arcs of the graph G which do not belong to Hi choose such 
an arc u' = (X', Y') (if one exists) for which 
is true. Then, remove the arc going to Y' in Hi and add the arc u'. The tree Hi+1 
generated in this way (proof!) is provided with the arc valuations ti+1(X) as follows. 
Put 
and reduce the valuations of all those vertices of Hi+1 which can be reached on 
simple paths from Y' (on simple paths of H i+1) by the value 
Do not change all the other arc valuations. The valuations which we have got 
in this way are denoted by ti+1(X), 

60 
Chapter 1 
(iii') If there exists no arc u' satisfying the conditions in (ii'), the algorithm 
terminates. When this case occurs after p steps, then we put H = Hp and t(X) 
= tp(X). 
THEOREM 1.26. Let G be a directed graph with its arcs being valuated and without 
circuits of negative length. For any vertex X which can be reached from Q the above-
mentioned algorithm yields a shortest simple path B(X) of length t(X) connecting Q 
with X. 
We subdivide the proof into single tasks which may be recommended to the 
reader to solve. 
TASK 14. Show that the graphs constructed in the course of the algorithm are trees. 
TASK 15. For each of the trees Hi it holds: 
a) No arc enters Q. 
b) Exactly one arc enters any vertex X =1= Q. 
c) To any vertex X =1= Q there exists exactly one simple path from Q to X of length 
ti(X). 
TASK 16. Show that the algorithm terminates after a finite number of steps. 
TASK 17. Any simple path connecting Q with X in G has a length which is at least as long 
as the simple path connecting Q with X in Hp = H (that one possessing length t(X)). 
Figure 1.27 illustrates the second algorithm. Figure 1.27 a shows (in double 
lines) the tree Ho with the valuations to(X), whereas in Fig. 1.27b one can see a 
tree HI with the valuations tl(X). Figure 1.27 c illustrates the tree H = Hp and the 
valuations t(X), in fact the distance tree. 
1.5. -THE CONCEPTION OF NETWORK ANALYSIS 
Only a very small insight into the conception of network analysis will be given 
in this section. We restrict ourselves to a description of the critical path method 
(CPM), that is, in graph theory terminology, to the determination of a longest 
path between two vertices marked in a directed circuit-free graph, with its arcs 
being valuated. We shall not enlarge on the PERT method, since the CPM method 
suffices to make clear which role is played by graph theory in network analysis. 
Problems relating to resource planning, etc. will also not be treated. The reader 
wishing to familiarize himself in more detail with all these problems may study the 
book of G6tzke [8] and [10, 13, 14]. 
In recent years, network analysis which has stood the test so excellently, for 
example in the planning of production processes and building projects, has been 
developing so rapidly, especially by the application of electronic data processing, 
that it is quite impossible to specify the present status in only one section of 
a textbook. 

Flows and tensions on networks 
61 
Consider the example of a building project. The entire project is decomposed 
into single ones which are called activitie8 or proce88e8. The beginning and the 
end of such activities are called event8. We assign to each activity an arc (some-
times also called arrow), the initial and the end-point of which are called the begin-
ning and the end, respectively, of this activity. An arc thus indicates the direct 
dependence of events on each other. We mark two vertices Q and S, i.e., the begin-
ning and the end, respectively, of the building project. 
'5 
Fig. 1.27 
To elaborate a network is, as is known, in general a very difficult job, but we 
do not wish to treat this problem here. When elaborating a network, the following 
aspects must be considered: 
-
What kinds of activities are necessary (listing of these activities)? 
-
Which activities must be finished before beginning another well-defined acti-
vity. For example, in the case of the construction of a house the painting works 
can be carried out only when the walls have been erected. (Why? -
Solve this 
problem!) 
-
Which activities may be effected simultaneously (independence)? 

62 
Chapter 1 
-
How much time will it take to carry out one activity~ (These time durations 
will later be the arc valuations.) 
Because on the whole a circuit-free graph (network) must be produced (other-
wise it would not be possible either to start or to finish certain activities) in which 
each event and each activity must be attainable from the beginning Q and also 
the end S from each event and each activity, it will often be necessary to introduce 
some so-called auxiliary activities. That means that we will have to introduce arcs 
which only reflect dependences in their chronological order, but do not require 
themselves any time durations when being "treated". These arcs will thus have 
the arc valuation zero. 
' 
The acyclicity of a network G(N" U) makes it possible to arrange and to number 
the vertices (events) in a particularly favourable manner: 
Algorithm for numbering a circuit-free graph 
(i) Q is numbered 0, and we set 6 0 = {Q}. 
(ii) We remove from G the vertex Q and all arcs which are incident with Q 
these arcs all have the point Q as initial point because of the acyclicity). 
Fig. 1.28 

Flows and tensions on networks 
63 
(iii) Let ell = {Pn, P 12, â¢â¢â¢ , P lr,} be the set of all source points of Gl = G -
elo 
(these are the vertices in which no arc enters into the graph Gl ). These r l vertices 
are labelled with the numbers 1,2, ... , r l (rl > 0 is true because of the acyclicity), 
with the assignment being made in any chosen but fixed order. 
(iv) We remove from Gl all vertices of ell and all arcs which are incident with 
these vertices. 
(v) Let el2 = {P2l, P 22 , â¢â¢â¢ , P 2r.} be the set of all source points of G2 = Gl -
ellÂ· 
The r 2 vertices are labelled, in any chosen but fixed order, with the numbers 
rl + 1, rl + 2, ... , rl + r2' etc. 
If G possesses exactly n vertices, there exists a natural number k with 6 k = IS} 
and eli = 0 for i > k and 6 j =1= 0 for i ~ k. Furthermore, it holds 
n = 1 + r l + r2 + ... + rk-l + 1. 
Each vertex of G lies in exactly one of the classes eli> i E {O, 1, ... , k}. It proves to 
be practical to arrange the vertices of the same class on a vertical line and the 
classes with an ascending index from the left to the right (cf. Fig. 1.28). 
Let us take the following example, given the following list of activities, with 
t(X, Y) indicating the duration of the activity (X, Y) which combines the event 
X with the event Y: 
t(A, B) = 16 
t(A, 0) = 8 
t(A, L) = 14 
t(H, M) = 16 
t(H,1) = 16 
t(H, K) = 18 
t(H, D) = 24 
t(O, G) 
= 21 
t(O, M) = 20 
t(O, E) = 12 
t(E, M) = 30 
t(E, N) = 13 
t(O, P) = 10 
t(G, P) = 10 
t(F, D) = 11 
t(L, M) = 15 
t(L, E) = 18 
t(B, 1) = 12 
t(B, H) = 13 
t(1, F) = 18 
t(M, D) = 16 
t(M, P) = 19 
t(M, G) = 12 
t(N, G) = 15 
t(K, F) = 20 
t(K, D) "= 15 
t(F,O) = 13 
t(D,O) = 
5 
t(D, P) = 17 
A possible numbering is illustrated in Fig. 1.28. The numbering has obviously 
the property that for any activity (i, j) the relation i < j is always true. If we 
arrange the classes 6; of vertices from the left to the right, the end-point of 

64 
Chapter 1 
any arc must then lie on the right of the initial point. If this is not the case, the 
numbering might be wrong or the graph is not circuit-free. In the latter case, the 
fault will be in the list of activities. 
A rectangular scheme may obviously be assigned to a network. Calling it a matrix 
would not be correct, since certain cells will not be occupied. This may be seen 
in our example in the table below. 
o 
16 
8 
14 
32 
29 
T.-row 
Buffer 
O=A 
1=B 
2=0 
3=L 
4=E 
5=H 
6=1 
7=M 
8=K 
9=N 
10 = G 
11 = F 
12 = D 
13 = 0 
14 = P 
o 
1 
A 
B 
234 
OLE 
16 8 14 
5 
6 
H 1 
13 
12 
7 
8 
9 10 
11 
12 
13 14 
MKNGFDOP 
12 
21 
20 
18 
15 
30 
16 16 
18 
4 
13 
12 
15 
24 
18 
16 
20 15 
19 
10 
11 
13 
5 
17 
10 
85 67 
78 
85 95 
25 9 
2 
If an activity (i, j) is carried out and if the events are numbered, then the dura-
tion t(i, i) of (i, i) will be entered in that cell which is found in the ith row and the 
ith column. The acyclicity of the network is shown by the fact that no entries 
are made below the main diagonaL The rectangular scheme representation proves 
to be advantageous especially when using electronic computers. 
Now, the following task is to be solved. Find the longest path (if one takes the 
time valuations t(X, Y) as the lengths of the arcs (X, Y)) of all paths going from 
Q to S, for the length of such a longest path indicates the shortest possible duration 
of the project. 
In order to appreciate this, consider two vertices (events) which are joined with 
each other by an arc (an activity) (i, j) and denoted by the numbers i and j (i < j) 

Flows and tensions on networks 
65 
Before the event j can take place, the event i must have occurred and the time 
duration t(i, j) = tii necessary for realizing the activity (i, j) must have elapsed. 
Consider now any directed path W = (iI' i2, ... , iT) in G. The event i2 can take 
place after the event iI, but not before at least time interval tili, has gone by, and 
the event i3 can take place after the event i 2, but not before at least the time inter-
val tiâ¢iâ¢ has gone by. That means, the time interval between the events ia and il 
must be at least tili, + ti,i, 
This leads us to the result that the event im can happen later than the event 
il after a time period of at least 
Considering in particular any path linking Q with S, i.e. 
the the final event S can take place later than the beginning of the project (e.g. 
to = 0) after a time interval of at least 
Since this relation holds for each path connecting the source Q with the sink S, 
we get in particular: 
The duration of the project cannot be shorter than a longest path connecting 
Q with S. 
Furthermore, the following theorem which we give below without proof is 
true: 
THEOREM 1.27. The duration ot a project equals the length ot a longest path going 
from Q to S. 
Let us now turn to the problem of finding a longest path connecting Q with S. 
Algorithm for determining earliest possible dates 
We denote by TA i) the earliest possible date and by T.( i) the latest possible date 
for the event i to take place (so that a certain project can be realized within a 
shortest time). 
(i) Put Tf(O) = 0, that is, the project is started at t = O. 
(ii) Let j be a vertex for all predecessors jI' ... , js (these are vertices for which 
there exists an arc (ji' j)) of which the earliest possible dates TAji) have already 
been determined. Then, we put 
Tf(j) = max [TAji) + t(ji' j)]. 
I~i~s 
(iii) If the network has exactly n vertices, then TAn -
1) will just be the mini-
mum duration of the project. 

66 
Chapter 1 
Before verifying that the algorithm given above supplies in fact the solution for 
our task, we will apply this algorithm to our example. 
According to (i), we get TAO) = 0. 
The earliest possible dates of the predecessor vertices of 6 1 are already known 
(there is only one predecessor vertex, namely Q, with Tf(Q) = Tf(O) = 0). It 
results: 
We are now able to determine the TA i) for the vertices of class 62 and get: 
TA4) = max (14 + 18, 8 + 12) = 32, 
Tf (5) = max ( 8 + 21, 16 + 13) = 29. 
It is thus possible to determine successively all TAi). 
The "matrix" on page 64 contains the values to be found at the vertices assign-
ed to them. We have not filled out some of the cells; this will be left to the reader. 
Now, we come to the calculation of the latest possible dates T8(i). 
Algorithm for determining latest possible dates 
(i/) For the sink S we put 
T8(n -
1) = TAn -
1) 
(in our example we have 95). 
(ii') Let i be a vertex for all successors iI' ... , if of which the T8Ui) have already 
been determined. Then, we put 
T8(j) = min (T8Uj) - t(i, i,))Â· 
I;:;;;;:;;r 
As in the case of the determination of the TAi), we proceed as follows for 
finding out the T8(i). Determine the T.(i) in the order n -
1, n -
2, ... ,1,0, 
that is, successively for the classes 6 k , 6 k - I , â¢â¢â¢ , 6 0â¢ Below the "matrix" you find 
some of the T.(i), and the reader himself may find the remaining ones. 
It is easy to recognize that the relation 
T.(i) -
Tf(i) ~ Â° 
is true for el1ch vertex i. 
In network analysis, an essential roleÂ· is played by those events and activities 
lying on a so-called critical path. 
DEFINITION. A path W = (0 = iI' i2, i3, ... , if = n -
1) is called critical if 
for each arc (ij' ij+1) of W the relation 
TAij ) = T.(ij ) 
for 
j = 1,2, ... , r 
and 

Flows and tensions on networks 
67 
is true. Those activities and events which lie on a critical path are also called 
critical. 
The three existing critical paths are marked in our example by doubly drawn 
arcs (cf. Fig. 1.28). 
If an event i does not lie on a critical path, then for this event 
T.(i) - Tf(i) = s; > 0 
holds. The s; are called dummy times or buffer times. 
These times may be utilized to a limited extent by making a non-critical activity 
start not immediately after the beginning of this activity, but without endan-
gering the planned completion of the whole project. In some measure, dummy times 
reflect the reserves of a project. These dummy times may, in general, not be 
utilized arbitrarily. A difference is made between them, and in the literature one 
speaks of freely available, conditionally available and independent dummy times. 
Details cannot be treated in this section. 
We do not think that it is necessary here to prove explicitly that the algorithm 
given above really supplies in each case a longest path from Q to S (establishing 
this proof will be recommended to the reader). 
If we want to determine the TAi) by means of the network matrix 
T = (tij)i,i=Ol..,n-l, we proceed as follows. 
Insert the value 0 in the first row of the Tf column. 
Let the TAO), TAl), ... , TAi -
1) be determined. These values have been 
put down in the first, the second, ... , the ith row, respectively, of the Tf column. 
Tf(i) is obtained as follows. Search for all cells occupied by a number t(ii' i) in 
the (i + l)th column (this is the column assigned to the vertex i). Say that these 
are the cells (ii' i) with i = 1, ... , r. Now, find .m~x (TAii) + ti,i) and insert 
I;5;J;5;r 
this value in the (i + l)th row of the Tf column as the value Tf(i). 
The T s values can be obtained in a similar way: Insert in the last column of the 
Ts row the value Ts(n -
1) = Tf(n -
1) (of. our example where we have 95). 
Having determined the Ts(n -
1), T.(n - '2), ... , T 8(i + 1) and having inserted 
these values in the nth, the (n -
l)th, ... , the (i + 2)th column, respectively, of 
the Ts row, we can obtain T.(i) in the following manner. 
Search for all cells occupied by a tii, value in the (i + l)th row. Say, these are the 
cells (i, ill, ... , (i, q. Now, find m~n (Ts(ii) - tii,) and put down this value in the 
l;5;J;5;T 
(i + l)th column of the T8 row as value T.(i). 
At the end, Ts(O) = 0 must result as verification. 
In conclusion, let us still make some remarks on critical activities. If the acti-
vity (i, j) is critical and if it is not possible to observe the planned time period tit 
for realizing (i, f), then the project cannot be completed within the shortest possible 

68 
Chapter 1 
time, not even if for all other activities the given time delays will be observed. If 
one aims at reducing the overall duration of the project, then the times along 
critical paths have to be shortened. In doing this, it is possible for new critical 
paths to develop. 
1.6. BIBLIOGRAPHY 
[1] Berge, C., und A. Ghouila-Houri: Programme, Spiele, Transportnetze, 2nd edn., 
Leipzig 1969. (Translated from French.) 
[2] Busacker, R. G., and T. L. Saaty: Finite Graphs and Networks. An Introduction with 
Applications. New York 1965 (German: Munich/Vienna 1968; Russian: Moscow 1974). 
[3] Danzig, G. B.: On the shortest route through a network, Management Sci. 6 (1960), 
187-190. 
[4] Diick, W., und M. Bliefernich: Operationsforschung, Vol. 3: Mathematische Grund-
lagen, Methoden und Modelle, Berlin 1973. 
[5] Ford, L. R, and D. R Fulkerson: Maximal flow through a network, Canad. J. Math. 8 
(1956), 399-404. 
[6] Ford, L. R, and D. R Fulkerson: Flows in Networks~ Princeton, N. J., 1962 (Russian: 
Moscow 1966). 
[7] Ford, L. R, and D. R Fulkerson: A simple algorithm for finding maximal network 
. 
flows and an application to the Hitchcock problem, Canad. J. Math. 9 (1957), 210-218. 
[8] Witzke, H.: Netzplantechnik -
Theorie und Praxis, Berlin 1969. 
[9] Hu, T. C.: Integer Programming and Network Flows, Reading, Mass., 1970 (German: 
Munich/Vienna 1972; Russian: Moscow 1974). 
[10] Lewandowski, R: Zu einer internationalen Bibliographie der Netzplantechnik, 
Elektron. Datenverarb. 10 (1968), 78-83, 156-162. 
[11] Minty, G. J.: On the axiomatic foundations of the theories of directed linear graphs, 
electrical networks, and network-programming, J. Math. Mech. 11) (1966), 485-520. 
[12] Sachs, H.: Einfiihrung in die Theorie der endlichen Graphen, Teil I, II, Leipzig 1970, 
1972. 
[13] Schreiter, D., D. Stempell und F. Frotscher: Kritischer Weg und PERT, Berlin 1965. 
[14] Suchowizki, S. 1., und 1. A. Radtschik: Mathematische Methoden der Netzplantechnik. 
2nd edn., Leipzig 1969. (Translated from Russian.) 
[15] Tutte, W. T.: Lectures on matroids, J. Res. Nat. Bur. Stand. 69 (1965), 1-47. 
[16] Tutte, W. T.: A homotopy theorem for matroids I, II, Trans. Amer. Math. Soc. 88 
(1958),144-174. 
[17] Tutte, W. T.: Matroids and graphs, Trans. Amer. Math. Soc. 90 (1959), 527-552. 
[18] Tutte, W. T.: Introduction to the Theory of Matroids, New York 1971. 
[19] Whitney, H.: On the abstract properties of linear independence, Amer. J. Math. 57 
(1935), 507 -533. 
[20] Lawler, E.: Combinatorial Optimization: Networks and Matroids, Holt, Rinehart and 
Winston, New York 1976. 
[21] Carre, B.: Graphs and Networks, Clarendon Press, Oxford 1979. 
[22] Even, S.: Graph Algorithms, Pitman, London 1979. 
[23] Ebert, J.: Effiziente Graphenalgorithmen, Wiesbaden 1981. 

Chapter 2 
The linear transportation problem 
2.1. FORMULATION OF THE PROBLEM 
The classical transportation problem as formulated by F. L. Hitchcock in 1941 
reads as follows: 
Given m producers Xl, ... , Xm of an article, with Xi being capable of producing 
a(Xi) = a; ~ O. In addition, given n consumers YI , ... , Y n of this article, with 
Yj having the need b( Y j ) = bJ ~ 0 of this product. Furthermore, let the costs 
k(Xi' Y i ) = kii be known for transporting one unit of this article from Xi to Y j â¢ 
The problem is to satisfy all needs b( Yi) such that the overall transportation costs 
are minimal. 
If all data are given, then this problem can be solved using the means made 
available by the theory of optimization, provided that the cost functions kij are 
"decent", i.e., linear or convex. 
In this chapter, we want to restrict ourselves to the case the transportation can 
be realized only via certain given paths. Furthermore, imagine two auxiliary 
points, source Q and sink S, being introduced so that only one producer and one 
consumer are formally present. In addition, some further points may appear 
playing the role, say, of a distributor. The fact that there are only one producer 
and one consumer does not essentially restrict generality, since we can also con-
ceive in the transportation network, besides the auxiliary points Q andS, edges to be 
added (for the undirected case) and arcs (for the directed case) going from Q to the 
producers Xi and having capacity restrictions which equal the quantity that is 
producible in point Xi> and we can also conceive arcs added going from the con-
sumers Y j to sink S with capacity restrictions equalling the need in Y i . 
The problem which we would like to deal with here can thus be formulated as 
follows: 
Given a (undirected) graph G(l;, U) with two vertices Q and S being marked. 
A capacity c( A, B) (c( A, B) = c( B, A) ) is assigned to each edge u = (A, B) from U. 
Furthermore, let a real number k(A, B) = k(B, A), also called costs per unit (in 

70 
Chapter 2 
general, we will presume integrality), be assigned to each edge (A, B). The number 
c(A, B) means that c(A, B) product unities at the most can be transported on the 
edge(A,B), and this independently of whether from A to B or from B to A. The 
number k(A, B) indicates that the transportation of one product unit along the 
edge (A, B), independently of the transportation direction, entails costs amounting 
to k(A, B). If in addition to this the quantity v of goods to be transported from 
Q to S is also given, we search among all possibilities of the realization of this 
transportation (as far as it is actually possible to realize it) for the one entailing 
minimum overall costs. 
For solving the given problem, we think the vertices of the graph to be numbered 
from 1 to n. We shall also presume the graph to be simple, i.e., without loops and 
multiple edges. Then, the edges of G can be written in the form (i, j), with i and j 
being natural numbers between 1 and n. 
If we denote by Xii that quantity of the product which is transported from the 
vertex i to the vertex j along the edge (i, j), as far as this edge exists in G (in gen-
eral, Xii = 0 will be true for the case xii> 0) and with Xii = 0 for i = 1, 2, ... , n 
and Xii = Xii = 0 for (i, j) ~ U, our problem takes the following form: 
Find a flow f{J = (Xii) on a graph G, with the constraints 
(i, j) E U, 
n 
n 
I-V for 
j = Q, 
;; Xii - 1: xik = 
V 
for 
j = S, 
'=1 
k=1 
0 otherwise 
being effective. Then, the objective function 
Z = 1: kii â¢ Xij 
(i.i) 
will be minimized. 
For the existence of a minimum, it is obviously necessary and sufficient that 
v does not exceed the maximally possible flow going from Q to S. 
2.2. THE SOLUTION ACCORDING TO BUSACKER AND GOWEN 
Let us try to solve the transportation problem formulated in paragraph 2.1 by 
using an algorithm found by R.G. Busacker and P. J. Gowen. The proof that 
the algorithm really yields minimum transportation costs will be established in 
section 2.4. 

The linear transportation problem 
71 
Algorithm of Busacker and Gowen 
(i) Put xii = xii = 0 for each edge (j, i) = (i, j) E U. 
(ii) Define modified costs 
{ kif 0 ~ xii < cii' 
k~i = 
~ if xii = cii' 
-kii if xii> O. 
(iii) Find a least expensive (= shortest) path from Q to S using the modified 
costs kijâ¢ Then let so much flow pass through this cheapest simple path that it 
will no longer be the cheapest one. Either one succeeds in obtaining the required 
flow of the value v composed of the sum of the original flow going from Q to Sand 
the flow found on the cheapest simple path (in this case, the algorithm terminates 
and the problem is solved), or the cheapest simple path has been saturated without 
the desired flow of value v being obtained yet. In the latter case, go back to 
step (ii). 
Fig. 2.1 
Which effect is achieved by these modified costs? 
If a flow is already passing through the edge (i, j), and this from i to j, and if 
one likes to send an even greater flow quantity in this direction through (i, j), 
then the costs k ii have to be spent per product unit. If the edge (i, j) is saturated, 
then no flow can go any longer in the direction of the saturation flow. Therefore, 
the costs are set infinite for an additional transportation, thus preventing a supple-
mentary quantity of goods from being transported in this direction. But if a flow 

72 
Chapter 2 
is going through (i, j) from j to i, then, if this flow direction is not favourable, 
the flow direction from ito j is favoured by a negative cost set-up. 
Let us take an example. Given the graph in Fig. 2.1. At the edges we have left 
space for four sets of data. The number at the upper right indicates the capacity 
of the edge, the number at the upper left stands for the transportation costs. per 
unit along this edge. The space at the lower left is reserved as "field of operation", 
the number at the lower right indicates an optimum flow distribution for a given 
v = Vo' In the space at the lower left, the flow which already goes along this edge 
(and which changes in the course of the algorithm) can be written, say in pencil, 
and, if necessary, erased and replaced by another number according to the algo-
rithm. 
We have successively applied the algorithm to the graph represented in 
Fig. 2.1 and we got the least expensive paths with their costs in the order given 
by the table, as well as the quantities transportable along these paths (it will be 
easy for the reader to check it himself): 
I Least expensive path 
Costs per 
Transportable 
unit 
quantity 
1 
Q 
3 
7 
8 
S 
14 
3 
2 
Q 
3 
7 
6 
S 
24 
2 
3 
Q 
1 
2 
6 
S 
25 
6 
4 
Q 
1 
4 
5 
6 
S 
25 
2 
5 
Q 
3 
2 
1 
4 
5 
S 
27 
1 
6 
Q 
3 
2 
4 
5 
S 
28 
1 
In the case of path 5, advantage is derived from the fact that modified costs entail 
a less expensive path from Q to S. 
In Fig. 2.1, we have indicated, in the space at the lower left, the product quan-
tity which must flow in order to realize in S a need 13 with minimum expenditure; 
at the lower right there is indicated the product quantity which must be, transport-
ed along this edge in order to satisfy a need of Vo = 14 with minimum costs. The 
flow direction is not represented at the edges, since it can be directly seen when 
using the node rules. On the edge going from node 1 to node 2 a flow quantity 
will pass in case of a need of Vo = 13 with minimum costs which is greater than 
in the case of a need of Vo = 14. This effect is achieved by using modified costs. 
In each step of the algorithm given in chapter 1 it is possible to find a least 
expensive (i.e. a shortest) path. 
2.3. THE SOLUTION ACCORDING TO KLEIN 
The approach used in this algorithm is in a way opposite to that of the preceding 
algorithm. In Busacker's and Gowen's algorithm, the essential point was to in-
crease in each step the product flow quantity only by as much as to make the costs 

The linear transportation problem 
73 
minimum, whereas in this new algorithm, any flow with a value Vo prescribed is 
sent from Q to S (ifthis is possible), and the flow direction is then diverted and 
the costs are stepwise reduced down to the minimum. 
Algorithm according to Klein 
(i) Find any feasible flow (which is compatible with the capacities) of the value 
Vo prescribed going from Q to S (this step can be realized, for exam pIe, by means of 
the algorithm of Ford and Fulkerson described in chapter 1). 
(ii) Make up the modified costs 
1 
k 
if 0 ~ xii < Gii' 
k;j = 
:, if 
xii = Gii' 
-kii if xii> O. 
(iii) Find a circuit of negative length by means of the modified costs. If such a 
circuit does not exist, the flow is optimum (the proof will still be established). If 
there exists a negative circuit K (i.e. a circuit of negative length, with the modified 
costs being taken as lengths), then it is possible to reduce the costs by "diverting" 
the flow along this citcuit. The flow quantity which can be diverted along a nega-
tive circuit (d. Fig. 2.2) may be increased so that an edge of Kis saturated, which 
means, its capacity Gii is reached. Then go back to (ii). 
The diversion of a flow along a circuit K is illustrated in Fig. 2.2. The edge valua-
tions at the upper right indicate the capacity, at the upper left they indicate the 
Fig. 2.2 

74 
Chapter 2 
costs per unit, at the lower left a flow going through the edge, namely in the direc-
tion fixed by the arrow at the edge, and at the lower right the new flow after 
"diversion" of two product units in the direction of K. Obviously, K is a circuit 
of negative length, since the lengths (i.e. the costs) in the order of the edges (1, 2), 
(2,3), ... , (6, 1) are equal to 
2, -3,1, -10,4, -4, 
that is, -1Oin the sum. Two units may be sent in the direction ofK, thus entail-
ing a reduction of the costs by 20 units. 
Fig. 2.3 
Figure 2.3 serves us for illustrating the algorithm of M. Klein. The vertices have 
been numbered. The numbers at the upper left stand for the costs per unit, at the 
upper right they indicate the edge capacities, at the lower left a flow distribution 
causing a total flow of 20 units from Q to S (it is easy to recognize that 20 units 
make up a maximum flow), and at the lower right we have drawn crosses in some 
cases. The corresponding edges (cf. the algorithm of Ford and Fulkerson dealt 
with in chapter 1) belong to a minimum cut. As can easily be seen, there are two 
such cuts: one of them is formed by the edges (Q, 5), (Q,4), (3,8), (7,8), (7,10), 
(6,10), the other one by the edges (5,14), (9, 14), (12,13), (12,11), (7,10), (6,10). 
You can recognize that those edges which belong to a cut of minimum capacity 
and which are saturated cannot belong to a circuit of negative length. If the flow 

The linear transportation problem 
75 
Vo required is smaller than the maximum flow, then edges of a minimum cut may, 
of course, belong to circuits of negative length. It is also possible for saturated 
edges not belonging to a minimum cut to lie in circuits of negative length. 
How can circuits of negative length be found now? The procedure is essentially 
described with the algorithm for determining shortest simple paths of negative 
length (cf. chapter 1) even though we have explicitly excluded negative circuits 
there. For the method presented in that chapter for finding a shortest simple 
path it was necessary to exclude circuits of negative length, since otherwise one 
could not determine the length of a "shortest" simple path by traversing such a 
circuit sufficiently often, because this length would have become smaller than any 
negative number. In our case, however, there is not so much to happen, since 
a circuit of negative length cannot be traversed as often as one likes, because each 
traversal produces a change in the flow. Any increase of the flow, however, is 
not feasible because of the capacity restrictions on the edges. 
So we first try to find the distances (i.e. the least expensive paths) between Q 
and each of the vertices. Using the values indicated in Fig. 2.3 for the costs (at 
the upper left), for the capacities (at the upper right) and the initial flow (at the 
lower left) and applying the modified costs, we get one after the other the fol-
lowing distances: 
Number of I Distance I Reasons 
the node 
2 
5 
flux q;(Q, 2) through arc (Q, 2) (= 6) is 
smaller than its capacity c(Q, 2) (= 8) 
1 
10 
q;(Q, 1) < c(Q, 1) 
3 
10 
g;(Q, 3) < c(Q,3) 
7 
11 
q;(2, 7) < c(2, 7) 
6 
16 
q;(7, 6) < c(7, 6) 
All other vertices get the distance 00, since they lie beyond a minimum cut. In 
such a case, those negative circuits containing vertices of a distance shorter than 
00 cannot contain vertices of a distance 00 as well. 
Above all, we shall remove all circuits of negative length in that part of which 
the vertices have a finite distance fromQ. For this, consider the distance tree (see 
the doubly drawn arcs in Fig. 2.4) and all edges of which the two end-points 
are included in the distance tree (in other words, consider the graph which is 
spanned by all vertices having a finite distance from Q). Then, consider any edge 
with both of its end-points lying in the distance tree (the edge itself, however, 
does not belong to it). Together with the distance tree a circuit is generated which 
we want to examine. We choose the edge say (1, 7). The resulting circuit (Q, 2, 7, 
1, Q) is obviously of negative length, since on the simple path (Q, 1, 7) a unit is 
being transported with the costs 10 + 6 = 16, although on the cheaper simple path 

76 
Chapter 2 
(Q, 2, 7), which only costs 11 units, goods could still be transported. If one suc-
cessively carries out these "price reductions", then one obtains for the subgraph 
of Fig. 2.4 a least expensive transportation, as indicated in the space at the lower 
right. 
Fig. 2.4 
Difficulties may possibly arise in the search for negative circuits, since no dis-
tance tree is constructible in the whole graph if the product quantity to be trans-
ported is equal to a minimum cut capacity. In such a case, the vertices lying be-
yond this cut are not "reachable", that is, they have the distance 00 from Q. But 
then, one can easily proceed in the following way: Consider the set of those ver-
tices that can be reached from the end-points of the arcs of a minimum cut. As for 
this graph, we make analogous reflections choosing, for example, the value 0 as 
node valuations for these end-points (cf. Fig. 2.5). Thus, the vertices 10, 11, 13, 14, 
which are the end-points of minimum cut arcs, get a distance valuation of 0, the 
vertex S is provided with the valuation 8, since the arc (13, S) is not saturated 
an~ yields, in addition to this, the smallest increase of costs in comparison with all 
the other non-saturated arcs. We obtain a circuit of negative length, for example, 
(13, S, 11, 13). Using the modified costs this circuit is of length -
1. So we divert 
Fig. 2.5 

The linear transportation problem 
77 
a part of the flow, and that one unit is transported along the arc (13, S) and not 
along the simple path (13,11, S). The reduction of the costs amounts to 1. Subse-
quently to this, another circuit of negative length is found, namely (14, 13, 11, 
S, 14), etc. 
The flow distribution entailing minimum costs is indicated in the space at the 
lower right. 
For reducing the costs, one would have to proceed in an analogous way when 
several minimum cuts, the capacities of which would be equal to the required 
product quantity Vo, can be found in the graph. Obviously, it is then possible to 
effect a diminution of costs separately for each part of the graph as these single 
parts are separated from each other by minimum cuts. In the example given in 
Fig. 2.3, no further reduction of the costs can be obtained in that part of the graph 
lying between the two minimum cuts (cf. Fig. 2.6). 
Fig. 2.6 
2.4. PROOF OF MINIMALITY 
In this section, we want to show that the two algorithms formulated in the pre-
ceding expositions really yield a flow with minimum transportation costs. For 
this, the following theorem will be proved: 
THEOREM 2.1. A flow rp of the value v is optimum if and only if no circuit of 
negative length exists in the graph G with the costs modified in respect of rp. 
Proof. The necessity of the condition is immediately clear. We shall show its suffi-
ciency. Let rp be a flow of the value v. Assume that in respect of this flow there 
exists no circuit of negative length in the graph G",. Furthermore, let 'Po be a 
flow of the value v entailing minimum (i.e. optimum) costs. The graph G",o, which 
is provided with the costs modified with respect to rpo, also has no circuit of nega-
tive length, because of optimality. Since no circuits of negative length are 
present, the following relations hold for any edge (i, j) : 
if 
rp(i, j) > 0, then 
rp(j, i) = 0, 
if 
rpO( i, j) > 0, then 
rpO(j, i) = 0. 
(1) 

78 
Chapter 2 
A directed graph G' is formed from G in the following way: If there exists in 
G an (undirected) edge (i, j) = (j, i) with the capacity Cij = 
Cji' we form in G' 
two (directed) arcs (i, j)' and (j, i)' with the capacities c'(i, j)' = c( i, j) and c'(j, i)' 
= c(i, j), respectively. Because of the relations given in (1), the flux going through 
(i, j)' and (j, i)' is not greater than c(i, j) independently of the kind q; or q;o. 
If for an arc (i, j)' the relation q;(i, j)' > q;O(i, j)' ~ 0 holds, colour (i, j)' red. 
But if for an arc (i, j)' the relation q;O(i, j)' > q;(i, j)' ~ 0 holds, then colour (i, j)' 
blue. First, it is possible that, say, (i, j)' is red and (j, i)' is blue if a flow of the type 
q; is going from i to j, but from j to i a flow of type q;o. Arcs for which q;(i, j)' 
= q;O( i, j)' is true do not concern us and will thus not be coloured. 
Furthermore, we imagine q;O (among all cheapest, that means, optimum flows) 
to be chosen such that the sum of the red and blue arcs is minimum. 
Assume that q; is not optimal. Let the costs of the transportation of v units 
according to q; thus be higher than those of the transportation of v units according 
to q;o. Then, q; and q;O do not coincide; there exists at least a blue arc (ill i 2),. Task! 
We prove the following lemma. 
LEMMA 1. In G' there exists an elementary cycle p composed ot blue and red arcs, 
with the blue arcs all being in the same direction as p and the red ones being oppo-
sitely directed to p. 
For proving the lemma we distinguish between three cases (the task set before 
was to show that there exists a blue arc (iI' i2)'): 
a) A larger quantity of flow of the type q;O than of the type q; is flowing through 
vertex i2. Then, there exists at least one arc (i2' i3)' starting from i2 which has 
more flow of the type q;O than of the type q;; so this arc is blue. 
b) A larger quantity of flow of the type q; than of the type q;O is flowing through 
vertex i 2; that means that in particular more flow q; than q;O flows into i2. Thus, 
there exists an arc (i3' i2), which has more flow q; than q;O and which therefore is red. 
c) The same quantity of flow of the type q; as of the type q;O is flowing through i2. 
Since the arc (iI' i2), is a blue one, more flow q;O than q; is flowing on it, and there-
fore a larger quantity of flow of the type q; than of the type q;O is flowing on the 
other arcs going to i 2â¢ But then, there is an arc (i3' i2)' which transports more 
flow q; than q;O to i 2, and which therefore is a red one. 
Naturally, it can be the case that red edges enter a vertex and blue ones leave it, 
but this is of no importance. 
An elementary cycle ft given in the lemma can be found without difficulty. 
One travels on the blue arc (iI' i 2)' from i l to i 2, goes on travelling from there to 
i3 on a blue arc (i2' i3)' or on a red arc (i3' i 2), etc. When a vertex is reached twice, 
which will happen because of the finiteness of the graph, then one gets an elemen-

The linear transportation problem 
79 
tary cycle fl, as stated. It is quite evident that fl does not consist either only of 
red arcs or only of blue ones, since these form in Gcp or in Gcpo a circuit which would 
entail negative costs. This, however, was not possible in both cases. 
LEMMA 2. In an elementary cycle fl, as it exists according to lemma 1, it holds: 
The sum of the costs (per product unit) of all blue arcs of fl equals the sum of the costs 
(per product unit) of all red arcs of fl. 
Proof. Let fl be an elementary cycle consisting only of blue arcs (having the 
same direction as fl) and of red ones (being oppositely directed to fl). 
Consider fl in Gcp. The blue arcs (since more flow cpo than cp is flowing on them) 
are still capable of absorbing flow of the type cpo The red arcs (since more flow cp 
than cpo is flowing on them) can still absorb flow of the type cp in the sense of the 
orientation of fl, because the flow of the type cp is flowing in the opposite direction 
of fl. If we permitted an additional quantity of flow of the type cp to pass in the 
direction of fl, the costs would not be lower, since no circuits of negative length 
(i.e. costs) exist in Grrâ¢ Thus, it holds: 
The sum of the costs per unit on the blue arcs of fl is at least as high as the sum 
of the costs per unit on the red arcs of fl' since in case of an increase of cp on the 
red arcs, costs could be saved along fl, whereas on the blue arcs the costs would 
go up. 
The cpo flow may be increased in the direction of -fl without exceeding the 
capacities (task !). In doing so, the costs do not decrease (since there exists no cir-
cuit of negative length in G). 
Since also in Gcp. there exist no circuits of negative length when augmenting 
the cpo flow in the direction of -fl, which would be possible, however, without 
exceeding the capacities (the reader can easily verify this), i.e., since the costs 
are not allowed to lower, we get: 
The sum of the costs per unit on the red arcs of fl is at least as high as the sum 
of the costs per unit on the blue arcs of fl. 
This proves lemma 2. 
TASK 1. In an elementary cycle according to lemma 1, it holds: If (i, j)' is red, then (j, i)' 
is not blue, and if (i, j)' is blue, then (j, i)' is not red. 
Let us now complete the proof of our theorem. Since in an elementary cycle fl 
according to lemma 1 the red arcs entail costs as high as those of the blue ones, the 
cpo flow in Gcpo can be increased in the direction of -fl without exceeding the capa-
cities (see proof of lemma 2) and without changing the costs, i.e., the flow fjjo result-
ing in this way from cpo is also optimal, since cpo was optimal as well according to the 
assumption. Now, increase cpo as long as either on an originally blue edge of fl the 
flow quantity of type cpo is as large as that of type cp (because the flow of the type 
cpo diminishes in this case on the blue arcs) or an originally red arc of fl is not red 
any longer, since the cpo flow increases in the direction of this arc. In each case, 

80 
Chapter 2 
however, the sum of all blue and red arcs diminishes, but the flow passing through 
is still optimal. This contradicts the assumption that q;O was an optimum flow for 
which this sum was minimum. 
Thus, the theorem is proved. 
We have proved at the same time that the algorithm of Klein really yields an 
optimum flow. 
It remains to show that also the algorithm of Busacker and Gowen provides an 
optimum flow of value v. For this, we prove that at no time of the algorIthm are 
circu\ts of negative length generated, which verifies all because of the theorem 
proved just now. Imagme the algorithm to be applied step by step (that is, 
increasing the flow always by the value 1). Let no circuits of negative length 
appear in graph Gi (i = 1, ... , w) with a flow value i, but let this be for graph 
GW+1 with a flow value of w + 1 ~ v. 
Obviously, a circuit K of negative length in GW+1 contains an arc which was 
required in the last step of the algorithm for transporting flow. Consider now this 
flow path B going from Q to S, which is in Gwa cheapest one according to the 
rules, and consider also an arc (i, j) onB, which is contained in a circuit K of nega-
tive length of GW+I â¢ If we change the path B such that the arcs lying in K and B 
are removed and, instead of this, the arcs lying in K but not in B are added, then 
one obtains a simple pathB' of GW+1' which is cheaper thanB because of the nega-
tive value of the costs of K. This, however, contradicts the choice of B as a least 
expensive simple path. 
So we have proved as well that the algorithm set up by Busacker and Gowen 
yields flows of the value v entailing lowest costs. 
2.5. CONCLUSIONS 
Our originally set problem involved m producers Xl, ... , Xm having an output 
a(Xi) and n consumers Y I , .â¢. , Yn with the need b(Yj), whereas in the algorithms 
only one source (and not m pieces) and one sink (and not n pieces) could be taken 
into consideration. At the very beginning we mentioned that this was no essen-
tial restriction of generality; you only need to add in the original graph two more 
auxiliary points Q and S, m auxiliary edges (Q, Xi) and n auxiliary edges (Yj , S). 
For these auxiliary edges choose zero as cost functions and c(Q, Xi) = a(Xi) 
and c(Yj, S) = b(Yj), respectively, as capacities. If it is possible to realize a flow 
of the value v going from the consumers to the producers in the original graph, it 
will also be feasible in the auxiliary graph. There, this will be in particular a maxi-
mum flow, because in the case that v = }; a(Xi ) = }; b( Y j ) the set of the edges 
i 
j 
(Q, Xi) or even the set of the edges (Yi , S) forms a cut of minimum capacity. It is, 
however, difficult to decide which of the two algorithms is the more advanta-

The linear transportation problem 
81 
geous one. When v is relatively small, the first one would be more suitable, whereas 
preference is given to the second algorithm for a relatively large v, since a maxi-
mum flow may be easily found by applying the algorithm of Ford and Fulker-
son. Of course, the following iteration (for finding circuits of negative length) 
will entail much calculation. 
The simple case of a transportation problem involving no capacity restrictions 
for the arcs is obviously solvable by means of both algorithms, with the second 
one requiring to be slightly modified, since no maximum flow exists in a graph 
without capacity restrictions. It will then be possible to use the algorithms if 
auxiliary points and edges with capacity restrictions on these auxiliary edges are 
introduced as described above. 
The linear transportation problem just described, like the problem of the deter-
mination of a maximum flow, represents a special case of the so-called circulation 
problem. 
The circulation problem may be solved, for example, by means of the out-of-
kilter algorithm (cf. E. Lawler: Combinatorial Optimization, Networks and 
Matroids; Holt, Rinehart and Winston, 1976). 
In chapter 4, we shall discuss some non-linear transportation problems. 
2.6. BIBLIOGRAPHY 
[1] Busacker, R. G., and P. J. Gowen: A Procedure for Determining a Family of Minimal-
Cost Network Flow Patterns, ORO Techn. Report 15, Operations Res. Office, Johns 
Hopkins Univ., Baltimore 1961. 
[2] Busacker, R. G., and T. L. Saaty: Finite Graphs and Networks, An Introduction with 
Applications, New York 1965 (German: Munich/Vienna 1968; Russian: Moscow 1974). 
[3] Ford, L. R., and D. R. Fulkerson: Flows in Networks, Princeton, N.J., 1962 (Russian: 
Moscow 1966). 
[4] Hu, T. C.: Integer Programming and Network Flows, Reading, Mass., 1970 (German: 
Munich/Vienna 1972; Russian: Moscow 1974). 
[5] Klein, M.: A primal method for minimal cost flows, Management Sci. 14 (1967), 205 
to 220. 

Chapter 3 
The cascade algorithm 
3.1. FORMULATION OF THE PROBLEM 
This chapter is devoted to a problem which we have already discussed in chapter 1. 
There, we wereÂ· searching for a shortest path between two given vertices in a 
(directed or undirected) graph provided with edge or arc valuations, respectively, 
as lengths (cf. 1.4.). Now, we want to determine at once in a directed graph the 
distances between two vertices at a time, with an arc valuation being given (to 
be understood as length). 
Given the arc length matrix B(G) for an arc-valuated directed graph G(x, U), 
that is, B = B(G) = (bij)i.i=l, ... ,n if G possesses exactly n vertices. Let 
bÂ·Â· - t 
~i 
'1 -
00 
for i = j, 
if there exists an arc of length lii 
going from vertex i to vertex j, 
otherwise. 
Our aim is to derive from B(G) the distance matrix D(G) = (dii), with dii being 
the length of a shortest path (= simple path) from vertex i to vertex j. 
3.2. THE STANDARD METHOD 
The method to be described in this section for determining the distance matrix 
D( G) using the arc length matrix B( G) of a directed graph G( X, U) is based on an 
approach by M. Hasse [1]. 
The distance matrix D( G) is calculated by means of the matrix operation de-
scribed below. 
DEFINITION. Given two (n, n) square matrices A = (aij) and B = (bii) with 
aii' bij E R+ U {oo} (all non-negative real numbers and 00 are allowed as matrix 
elements). We understand by the fB-prod'Uct A fBB a matrix C = (Ciiki=l,.,.,n 
with 
cii = min (aik + bki)Â· 
1;": k;": n 

The cascade algorithm 
83 
Here, the rules of operation 
r + 00 = 00 + r = 00, 
will be effective for each r E R+. 
Let us explain the multiplication by means of an example. Given the matrices 
r 
1 4 
A= 
00 
2 
o 1 
3 1 
Determine say Cn , and we find 
Cn = min (1 + 3,4 + 4, 00 + 3, 3 + 4) = 4. 
Analogously, find the other Cij, and we get: 
[4 6 00 1] 
5 4 
00 
4 
C = A EBB = 
3 3 
1 0 . 
5 3 
3 2 
The following two theorems contain simple properties of this matrix operation. 
THEOREM 3.1. For the EB-product of matrice8 the a880ciative law i8 valid, that i8, 
(R EB 8) EB T = REB (8 EB T), 
with R, 8, T being (n, n) 8quare matrice8. 
The reader may prove this theorem by himself. 
REMARK. The EB-product of matrices is not commutative as demonstrated by 
the following example. 
[ 2 3 
00] 
A=0014, 
2 1 
5 
B = [~ : ~]. 
4 00 
0 
It results: 
AÂ®B~ [~ 6 4] 
4 2 , 
4 2 
4 8] 
2 
6 . 
1 5 
DEFINITION. We understand by the k-th power Ak of an (n, n) square matrix A 
with respect to the multiplication EB 
Al =A, 
Ak+I = Ak EB A. 

84 
Chapter 3 
The truth of the following theorem may be verified by the reader himself. 
THEOREM 3.2. Let A be a square matrix and k and 1 any natural numbers. Then, 
it holds: 
In particular, the relation 
results. 
L'et us now go back to our problem and prove the following theorem. 
THEOREM 3.3. Given the directed graph G with the vertices Xl, X 2, â¢â¢â¢ , Xn and 
the arc length matrix B. It we form Bm (with respect to the EEl-product), then tor 
the element bij of the matrix Bm it holds: 
r 
length of a shortest simple path (of a directed path) going from 
Xi to Xi with m arcs at the most (if such a simple path exists), 
bij = 
~ 0 for i = j, 
I 
00 otherwise (that is, if there exists no simple path going 
~ from Xi to Xi with m arcs at the most and with i =!= j). 
Proof. The truth is verified by means of mathematical induction over m. For 
m = 1 we just employ the definition of the matrix B = BI. Assuming the theorem 
to be valid for m ~ k, we want to prove it for the case that m = k + 1. 
Case 1: i = j. 
It holds bti = 0 (because of the definition of B) and bf; = 0 (because of the induc-
tion hypothesis). According to the definition of the EEl-product, and because of 
the non-negativity of all elements occurring in all of the matrices,it holds bf;+l = O. 
Case 2: i =1= j. 
Let no simple path exist in G going from Xi to Xi with a number of arcs ~ k + 1. 
It holds bt+ l = min (bt + b}j)' and one can easily See that at least one of the two 
summands bi~ and b}j is infinite for each l. 
Case 3: i =!= j, and there exists in G a simple path with a number of arcs 
~ k + 1 going from Xi to Xi' 
Among all these simple paths choose a simple path RO(X;, Xi) of which the 
length is minimum. Let 
RO(Xi, Xi) = (Xi = Xi., Xi" ... , .xi. = Xi)' 
We get 
bft = min (bt + b1i) ~ bfi + bii = bii , 
(1) 
l;Â£l;Â£n 
since according to definition it holds bf; = O. 

The cascade algorithm 
85 
We also distinguish between two other cases. 
Case 3.1: q = 1 (i.e., the number of arcs of the simple path RO (Xi> Xi) equals 1, 
that is, the simple path consists of one arc only, namely of (Xi> Xi))' Then, the 
relation l(RO) = bii is true for the length l(RO). 
According to the induction hypothesis, b~ is the length of a shortest simple 
path going from Xi to XI (l = 1,2, ... , n) with k arcs at the most. Then, however, 
bfl + bli is the length of a sequence of equally directed arcs from Xi to Xi' and 
because RO is the shortest of all simple paths going from Xi to Xi it holds 
bii ~ bfl + bli (l = 1,2, ... , n) and also 
bii ~ min (bfl + bli) = 
b~+1. 
l:;;l:;;n 
Together with (1) it follows 
bii = min MI + bli) = 
b~+1. 
l:;;l:;;n 
As asserted, bf/ 1 is just the length of a shortest simple path going from X; to Xi 
with k + 1 arcs at the most. 
Case 3.2: q > 1 (i.e., a shortest simple path from Xi to Xi with k + 1 arcs at 
the most contains at least two arcs). 
Then, for the shortest simple path RO the relation X iq_1 =f: Xi is valid. RO will 
then split into two partial simple paths RO(X;, Xiq) (this is a shortest simple 
path going from Xi toXiq_1 with k arcs at the most) and RO(X;q_l'Xi) (this is a 
shortest simple path consisting of an arc of the length biq_1i). 
Employing the induction hypothesis we get for the length of this simple path 
l(RO(X;, Xi)) = l(RO(Xil Xiq_J) + l(RO(Xiq_1, Xj)) = bf.q_1 + biq_d . 
Obviously, for each 1 = 1, ... , n it holds 
bfiq_1 + biq_1i ~ bfl + bu , 
and thus, also 
bfiq_1 + biq_1i ~ min (b~ + blj) = bft. 
l:;;l:;;n 
When forming the minimum on the right side, the index 1 = i q_ 1 had also been 
taken into account, and therefore it also holds: 
min (b~ + bli) ~ bfiq_1 + biq_1i . 
1:;; I:;; n 
Thus, the equality 
b~.+1 - M. + bÂ· . 
1,J 
-
Hq_l 
tq _ 1l 
holds. 

86 
Chapter 3 
The right side of the relation, how~ver, was just the length of a shortest simple 
path going from Xi to Xj with k + 1 arcs at the most. 
Thus, the discussion of all three cases is terminated and theorem 3.3 proved. 
COROLLARY. Since in a graph with n vertices there are no simple paths containing 
more than n -
1 arcs, it holds: 
So we have found a fundamental possibility of determining the distance matrix 
of a graph. 
Furthermore, it can be seen without difficulty that the following theorem is 
true. 
THEOREM 3.4. Let G be a directed graph with n vertices. If there is a natural num-
ber k such that Bk+I(G) = Bk(G), then 
D(G) = Bk(G). 
Now, we want to calculate the distance matrix of a graph taken as example 
by means of this standard method (cf. Fig. 3.1): 
0 
2 
00 
00 
3-
, W(G)~r: 
2 5 
00 3l 
00 
0 
3 
00 
4 
0 3 
00 
~' 
B(G) = 
3 
00 
0 
00 
00 
5 0 
00 
6 
00 
2 
0 
3 . 
L~ 
7 2 
o 3 
00 
4 
00 
00 
0 
4 
7 
00 
0 
ro 2 5 
00 
3 
6 0 3 
00 
4 
B3(G) = 
3 5 0 
00 
6 
B4( G) = B3( G). 
5 7 
2 
0 3 
10 4 
7 
00 0 
Using the previous theorem, we get B3( G) = D( G). That this result is true may 
also easily be verified directly with the graph. 
REMARK. If G is a graph with the vertices Xl, X 2, â¢â¢â¢ , X n, then there exists for 
each ordered pair i, j a smallest number kij (~n) with dij = b~'j = b~. For 
d ij =!= 00 this means: In G there exists a simple path of minimum length (namely 
of the length bt") going from X, to Xi with exactly kii arcs, and no simple path 
of the same minimum length with less than kij arcs. Of course, simple paths of 
minimum length containing a larger number of arcs may occur. 

The cascade algorithm 
87 
In our example, the following relations for instance are true: 
kl2 = 1; dl2 = bi2 = 2, 
k51 = 3; d51 = b~l = 10. 
Fig. 3.1 
Consider still another one. Given a graph G with the arc length matrix 
0, 00 
00 
00 
2 
00 
00 
00 
0 
00 
00 
00 
00 
3 
00 
00 
0 
2 
00 
4 
00 
B(G) = 
00 
00 
2 
0 
4 
00 
00 
2 
00 
00 
3 
0 
00 
00 
00 
00 
3 
00 
00 
0 
1 
00 
2 
00 
00 
00 
1 
0 
If we establish successively the Eij-powers, then it will finally result: 
0 14 7 5 
2 11 12 
15 
0 7 9 13 
4 
3 
8 
7 0 2 
6 
4 
5 
B6(G) = 
6 
9 2 0 
4 
6 
7 
2 
12 
5 3 
0 
9 10 
11 
3 3 5 
9 
0 
1 
12 
2 4 6 10 
1 
0 
and B6(G) = D(G), but B5(G) =1= D(G). In this example, we really have to set 
up n - 1 Eij-powers of B( G) to obtain D( G). Of course, this can also be seen directly 
in graph G itself, since a simple path going from Xl to X 2, for example, contains 
six arcs, and there are no shorter ones. Thus, k12 = 6. 

88 
Chapter 3 
In order to calculate the distance matrix D( G) of a graph G with a large number n 
of vertices a lot of calculation processes will be required. This, however, can be 
simplified, by using the corollary resulting from theorem 3.3, as follows: The matrix 
found is squared, and we form one after another the matrices 
BI(G) = B(G), B2(G), B4(G), B8(G), ... 
We stop the EB-exponentiation by B2k(G) either if 2k ~ n -
1 or if B2k-,(G) 
= B2k(G). Then, obviously D(G) = B2k(G). 
In our last example, only three matrix multiplications instead of five would be 
necessary. We do not want to ignore one disadvantage of this latter method. The 
first method made it possible to determine exactly the numberskiifor each couple 
of natural numbers i, j, whereas with the second one only the bounds of the kij 
may be obtained (namely two 2-powers, i.e. 2r ~ k ii ~ 2r+1, with r depending on 
the choice of the pair i, j). 
3.3. THE REVISED MATRIX ALGORITHM 
The calculation processes necessary for determining the distance matrix D( G) 
of a graph G may be reduced in general if instead of the matrix product EB intro-
duced above another one is used. 
DEFINITION. Let G be a directed graph, B(G) its arc length matrix and 
Xl, X 2, â¢â¢â¢ , Xn its vertices. Put Â°B(G) = B(G) = (Ob ii ). By the EBl-productB(G) 
EBI B( G) we mean that matrix IB (G) = (lbii) the elements Ibii of which are calcu-
lated in the following order (row by row) 
and in the following way: 
Ibii = min (Pb il + qbti). 
l;:;;t;:;;n 
Here, it holds: 
{ 0 for 1 ~ j, 
p= 
1 for 1 < j, 
{ 0 for 1 ~ i, 
q= 
1 for 1 < i. 
That is to say, we "square" the matrix B( G) with respect to the EB-product 
introduced in 3.2 and immediately put each calculated v,alue in the matrix, or in 
other words: Using the assertion instruction known from programming languages 
we form in the above-mentioned order 
bii := min (bi! + bti)' 
I;:;; t;:;; n 

The cascade algorithm 
89 
It is evident that in the case of the use of digital computers storage locations will 
be saved, since for both the calculation and storage the elements of only one ma-
trix (which is continuously changing) are necessary. 
Now, we are able to determine also EEh-powers of higher order according to 
kB(G) = k-lB(G) EBl k-lB(G). 
Consider the graph represented in Fig. 3.2a. The arc length matrix B( G) 
= Â°B(G) has the following structure: 
0 30 18 
6 
00 
00 
0 
00 
00 
00 
Â°B(G) = 
00 
10 
0 
00 
00 
00 
00 
00 
0 
7 
00 
13 
2 
00 
0 
30 
X, 
Xz 
Xs 
6 
13 
13 
2 
x4 
7 
Xs 
X3 
7 
Fig. 3.2 
0) 
b) 
Applying the rules of the EBl-multiplication we get successively: 
0 28 
18 
6 
13 
0 25 
15 
6 
13 
00 
0 
00 
00 
00 
00 
0 
00 
00 
00 
IB(G) = 
00 
10 
0 
00 
00 
2B(G) = 
00 
10 
0 
00 
00 
00 
20 
9 
0 
7 
00 
19 
9 
0 
7 
00 
12 
2 
00 
0 
00 
12 
2 
00 
0 
0 25 
15 
6 lS 
00 
0 
00 
00 
00 
3B(G) = 
00 
10 
0 
00 
00 
00 
19 
9 
0 
7 
00 
12 
2 
00 
0 
Furthermore, the relation D(G) = 3B(G) results. 

90 
Chapter 3 
If, however, we number the vertices otherwise, as for example, in Fig. 3.2h, 
then IB( G) = D( G) will follow, which the reader can recognize without difficulty. 
N.S. Narahari Pandit [3] conjectured that two Etkmultiplications would suffice 
to get the distance matrix for each graphG, i.e., that2B(G) = D(G) is valid. The 
graph represented in Fig. 3.3., however, proves (task!) that this is not the case, 
and certainly not if the vertices are numbered in any way. In paragraph 3.4, we 
will show that the relation 3B(G) = D(G) is always true. 
Fig. 3.3 
3.4. THE CASCADE ALGORITHM 
On the basis of the revised matrix algorithm explained in 3.3, the cascade algorithm 
for determining the distance matrix D( G) of a graph G was developed. In order to 
understand this algorithm better, we shall describe another matrix operation, 
namely the Efkproduct. 
DEFINITION. Given a square (n, n)-matrix A = (Oaii) with oaii E R+ U {oo}. 
The product A EB2 A is understood to be a matrix lA = (laij) whose elements 
are calculated in the order 
according to the rule 
with 
laij = min (pail + qati) 
l;:;;l;:;;n 
{ 0 for l ~ j, 
p= 
1 for l > j, 
{ 0 for l ~ i, 
q= 
1 for l > i. 
The EB2-product differs from the EBl-product only in the fact that the new 
matrix elements are calculated in exactly the opposite order as in the case of the 
EBl-product. Thus, the newly found matrix elements laij are also immediately 
put in the place (i, j) of the matrix. 
The reader may ascertain that the distance matrix is already obtained with 
EB2-multiplication of the arc length matrix of the graph shown in Fig. 3.2a by 
applying it only once. 

The cascade algorithm 
91 
It is easy to see that, if the vertices are numbered in another order, one single 
EB2-multiplication is not necessarily sufficient. 
Now, we combine the two multiplications EBl and EB2 as follows. 
DEFINITION. Let G be a directed graph with the vertices Xl> X 2, â¢â¢â¢ , Xn and 
the arc length matrix B( G). The method used to determine the matrix l(lB( G)) is 
called cascade algorithm. 
The matrix IB(G) is set up in the first cascade step (forward procedure of the 
cascade algorithm), the determination of the matrix 
l(lB(G)) = IB(G) EB21B(G) 
follows in the second cascade step (backward procedure of the cascade algorithm). 
EXAMPLE. Apply the cascade algorithm to the graph of the example at page 87. 
Calculate successively 
0 
00 
00 
5 
2 
00 
00 
00 
0 
00 
00 
00 
4 
3 
00 
00 
0 
2 
6 
4 
5 
IB(G) = B(G) EBIB(G) = 
6 
00 
2 
0 
4 
6 
7 
2 
00 
5 
3 
0 
9 10 
00 
3 
3 
5 
9 
0 
1 
00 
2 
4 
6 10 
1 
0 
in the forward procedure and 
0 14 
7 5 
2 11 
12 
15 
0 
7 9 13 
4 
3 
8 
7 0 2 
6 
4 
5 
l(lB(G)) = IB(G) E82 IB(G) = 
6 
9 2 0 
4 
6 
7 
2 12 5 3 
0 
9 10 
11 
3 3 5 
9 
0 
1 
12 
2 4 6 
10 
1 
0 
in the subsequent backward procedure and you will get l(lB(G)) = D(G), that 
is, the distance matrix, after two matrix operations. 
The purpose of our further considerations is to prove the following theorem. 
THEOREM 3.5. If the cascade algorithm is applied to the arc length matrix B(G) 
of a graph G, then one gets the distance matrix D( G) of G, that is, 
l(lB(G)) = D(G). 

92 
Chapter 3 
The proof will be based on T. C. Hu [2]. Some preliminary considerations still 
need to be made. 
Let R(X;, Xi) be a shortest simple path going from Xi to Xi' and let X k be an 
interior vertex of this simple path. Then, the subpath R(X;, X k) of R(X;, Xj) is 
a shortest simple path going from Xi to X k â¢ Hence it follows that in a directed 
graph G there exist shortest simple paths connecting two vertices of G and which 
consist only of one arc. Such arcs shall be called base arcs. 
DEFINITION. An arc (X;, Xj) of a graph G is called a base arc if a shortest simple 
path from Xi to Xj is exactly as long as the arc (Xi, Xj), i.e., if dij = bij with 
B = (bjj) as arc length matrix of G. 
If we try to find shortest simple paths going from a fixed vertex of a graph G 
to all other vertices of G (cf. 1.4.3), and if we are satisfied with one single shortest 
simple path found (if such simple paths really exist), then it can be shown that 
the subgraph of G which has been composed of these simple paths is a tree. 
Fig. 3.4 
If G contains a subgraph as it is represented in Fig. 3.4, and if we are only 
interested in shortest simple paths leaving Xi' then one of the two arcs (X;, X k ) 
and (Xj, X k) can surely be removed according as bik ~ bij + bjk or bij + bjk ~ bik' 
But if we like to consider all shortest simple paths (as in the example given in 
Fig. 3.4, such shortest simple paths going from Xi to X k and Xj and from Xi to 
X k), then it may be that all arcs are required as base arcs, say if bii = bik = bik' 
But if bik > bij + bik, then one can substitute bij + bjk for the valuation bik of the 
arc (Xi' X k ) without changing the lengths of the shortest simple paths. This modi-
fied arc can then be treated as base arc. For proving theorem 3.5 we shall also 
introduce new base arcs in this way. 
For the following let us explain some further concepts. 
DEFINITION. The vertices Xi" Xi" ... , Xi. of a graph G form 
a) an ascending sequence if il < i2 < ... < ik , 
b) a descending sequence if il > i2 > .. , > ik, 
c) a down-and-up sequence if min (iI, ik) > max ij' 
2:Â£j:Â£k-1 

The cascade al!{9rithm 
!l.1 
If, in particular, Xi" Xi" ... , Xi. are vertices of a simple path going from Xi, 
to Xi. (these vertices are in the same order as they are met when traversing the 
simple path), then we call them an ascending sequence or descending sequence or 
down-and-up sequence at the simple path. 
DEFINITION. An interior vertex Xi. of a simple path 
is called minimal (maximal) in the path R(Xi' Xj) if ik < min (ik- 1, ik+1) (and if 
ik > max (ik- 1, ik+1)' respectively). 
DEFINITION. Let Q be a sequence of vertices of G. A sequence $ of vertices 
of G is called a subsequence of Q if it holds: 
a) Each vertex of $ belongs to Q. 
b) Those vertices which directly succeed one another in $ are also directly 
successive in Q. 
In other words: Only those partial sequences in which only "borders" of the 
original sequence "have been cut away" at the most are called subsequences. 
DEFINITION. Given a sequence Q of vertices (not necessarily a simple path) of 
G. Delete the vertices in Q as follows: 
a) Choose (if there is one) a subsequence $ = {Xi" ... , Xi.} of Q which is a 
down-and-up sequence. Then delete all interior vertices Xi (j = 2, ... , k -
1) of 
j 
$ in Q. 
b) Apply a) to the remaining sequence. 
c) If a) cannot be applied any more, the remaining sequence is called a reduced 
sequence of Q. 
EXAMPLE. Let 
Q = {1, 8, 2, 10, 14, 15, 7, 6, 3, 12, 8, 13, 18,25, 11, 9}. 
The subsequence {7, 6, 3, 12} forms a down-and-up sequence. Applying a) yields 
{1, 8, 2, 10, 14, 15, 7, 12, 8, 13, 18,25, 11, 9}. The further application of a) finally 
leads to a reduced sequence {1, 8,10,14,15,18,25,11, 9}, and that, indepen-
dently of how the down-and-up sequences are chosen, since the following theorem 
is true: 
THEOREM 3.6. The reduced sequence ffi is well-determined by the basic sequence Q. 
Another way to find ffi consists in searching for all maximal down-and-up 
sequences in Q (in our example, these are {8, 10, 2}, {15, 7, 6, 3, 12, 8, 13, 18} and 
in applying a) to them. 

94 
Ohapter 3 
Proof. Let 0. be any sequence of vertices of G. We search for all maximal down-
and-up sequences in 0. and denote them by $1' ... , $/ in the order of the travers-
ing of 0.. If we delete all interior vertices in the $ i> then a sequence $ results 
containing all end-points of the $; and ~lso vertices which possibly exist in 0 
between the down-and-up sequences $i (in our example, the vertices 1, 14,25, 11, 
9 are of this type). $ is certainly a reduced sequence, since if there still existed 
a down-and-up sequence in $, we would not choose the $i'S all maximal. 
It can also be seen that, if the down-and-up sequences are chosen in another 
way, the sequence $ is obtained when breaking off the reduction rule, since each 
down-and-up sequence is uniquely embedded in a maximal down-and-up sequence 
(task I). 
THEOREM 3.7. The reduced sequence m of a sequence 0 is either 
a) an ascending sequence or 
b) a descending sequence or 
c) an ascending sequence with subsequent descending sequence. 
In our example, m is of type c). 
Proof. 
1. m contains no minimal point (a minimal point is a point whose two neigh-
bouring points in the sequence possess a larger index), since this would then lie in 
a down-and-up sequence. 
2. m contains one maximal point at the most, since otherwise a minimal point 
would exist (namely between those two maximal points). 
3. Let m contain no maximal point (that is, no point whose two neighbouring 
points have a smaller index) and no minimal point as well. In this case, however, 
m will be ascending or descending. 
4. Let m contain exactly one maximal point. Then, m consists of an ascending 
and of a subsequent descending sequence. 
Q.E.D. 
THEOREM 3.8. Let R(X j , Xi) be a shortest simple path going from Xi to Xi' If the 
vertices of R form an ascending or a descending sequence, then it holds: 
Ib ji = du, 
that is, one gets the shortest distance between Xi and Xi (the length of a shortest simple 
path going from Xi to Xi) after having performed the forward procedure of the cas-
cade algorithm. 
Proof. Consider a shortest simple path R(Xj, Xi) = (Xi = Xi" Xi" ... , Xi. 
= Xi) going from Xi to Xi' 
a) Let Xi" ... , Xi. form an ascending sequence, i.e., let i 1 < i2 < ... < i k â¢ 

The cascade algorithm 
95 
First, note that for any indices r, s always the relation Ibrs ~ drs is valid, since 
Ibrs is either 00 (then, there is nothing to show) or results as the length of a 
simple path from Xr to Xs (i.e., it has never been smaller than the value of a 
shortest simple path length). Since the arc (Xi" Xi,) is an arc of a shortest simple 
path and thus a base arc, it holds: 
In the first step of the cascade algorithm Ibi,i, is calculated as the second of the 
values Ibi,r (r = i 2, â¢â¢â¢ , i k ). Since also the arc (Xi" Xi,) is a base arc, it results: 
Proceed in this manner so that you get: 
It is naturally possible to calculate other drs also in the course of the forward 
step. 
b) Let the vertices Xi' Xi' ... , Xi of a shortest simple path R(Xi' Xi ) 
i 
2 
k 
1 
r.: 
going from Xi, to Xi. form a descending sequence, i.e., let i1 > i2 > ... > ik â¢ 
In the forward procedure of the cascade algo.rithm the first number of the 
Ibrik (r = iI' i2, â¢â¢â¢ , ik- l) to be calculated will be the value Ib i._Iik Since the arc 
(Xik-l' Xi.) is an arc of a shortest simple path and thus also a base arc, it holds: 
Analogously to case a) (taking into account the order in which the Ib rik are to 
be calculated), we get the proposition of the theorem of which the proof is thus 
established. 
THEOREM 3.9. Let R(Xi' Xi) be a shortest simple path going from Xi to XiÂ· If 
the vertices of R(Xi' Xi) form a down-and-up sequence, the relation Ibii = dii is 
true. 
That means that dij is already ascertained in the forward step of the cascade 
algorithm (as also in the case of a descending or an ascending sequence; cf. theorem 
3.8). 
Proof. Let the vertices Xi = Xi" Xi" ... , X ik = Xi of a shortest simple path 
R(X;, Xi) form a down-and-up sequence. This down-and-up sequence 0 possesses 
at least one minimal point. 

96 
Chapter 3 
1. Let 0 possess exactly one minimal point. This minimal point shall be X im. 
Then, the subsequence Xi" Xi., ... , Xim is a descending, and the subsequence 
X im, X im +1' â¢â¢â¢ , Xi. an ascending sequence. According to theorem 3.8, it holds: 
Because of the calculation rule for determining the Ibii, the value Ibi,im is calcu" 
lated before Ibi,i. and Ibimiâ¢ before Ibi,i.' Since our simple path going from 
X i, to X i. is of minimum length, we get 
2. Let 0 have more than one minimal vertex. Delete all those interior points 
in 0 which are not maximal points. Let the sequence ~ of vertices develop (if, for 
example, 0 = {15, 4, 8, 3, 7,12,1,5,10, 17}, then ~ = {15, 8,12, 17}). 
Write ~ = {Xi, = Y1, Y2, YJ' ... , Yt = Xi.). Here, Y2, â¢â¢â¢ , Yt- 1 are maximal 
vertices of O. Among all couples of indices p, q with Y t = Xp and Y t+1 = Xq con-
sider that one for which the value Ibpq is calculated first in the forward step of the 
cascade algorithm. We denote this couple of indices by p, q (in our example we 
would have p = 8, q = 12) .. The subsequence {Xp, ... , X q} (in our example, this 
is {8, 3, 7,12}) of 0 possesses only one minimal point (this is point 3 in our example). 
Thus, because of the case already discussed, we get the relation Ibpq = dpq-
The substitution of Ibpq for obpq in the course of the forward step corresponds 
to the replacement of the corresponding subpath (which is in our case of minimum 
length) by an arc of this subpath length, and that, by a base arc to which the 
length dpq is assigned. Now, take 0 and form a sequence 0' of vertices by deleting 
all intermediate points of the subsequence {Xp, ... , X q}. 0' has one minimal ver-
tex less than O. On the basis of 0, form a sequence ~' (this corresponds to the 
transition from 0 to m by deleting that one of the two vertices Xp or Xq which 
has the smaller index. Now, consider all successive couples of ~' of vertices and turn 
to that couple Xp, Xq for which the value Ibpq is calculated first in the forward 
step of the cascade algorithm, etc. (mathematical induction I). 
This procedure can be carried on as long as the remaining down-and-up sequence 
possesses still one single minimal point (according to the definition of a down-and-
up sequence, none of the two points Xi" Xi. has been deleted in the course of 
this process). Thus, case 1 is established, and the proof of theorem 3.9 is obvious. 
THEOREM 3.10. Let R(X;, Xi) be a shortest simple path in G from Xi to Xi' If 
the vertices of R(X;, Xi) form 
a) an ascending sequence or 
b) a descending sequence or 
c) an ascending with a subsequent descending sequence, then it holds: 
lb ij = dij â¢ 

The cascade algorithm 
97 
Proof. 
a) If the vertices Xi = 
Xi"~ Xi" ... , Xi. = Xi form an ascending sequence, i.e., 
if il < i2 < ... < i k , then the backward procedure yields step by step 
llb i 
i = Obi 
i = di i, since (XL' Xi) is a base arc, 
k-l k 
k-} k 
k-l k 
k-l 
k 
b) If the vertices Xi = 
Xi"~ Xi" ... , Xi. = Xi form a descending sequence, 
thenil > i2 > ... > i k , and we can proceed as in case a). 
c) If the vertices first form an ascending sequence Xi = Xi" Xi" ... , Xij and 
subsequently a descending one X,I' X ijH, ... , X ik, then we conclude as follows: 
since ik < ii and i l < ii' then in the backward step ~bilik is calculated after ibi,ij 
and after ~bijik' Using a), however, it follows 
and hence it follows 
Now, we come to the proof of theorem 3.5. 
Let R(Xil' Xi.) be a shortest simple path in G from Xi to Xi' We have to 
show that ~bilik = di,i k is true independently of the type of sequence :0 = {Xi" 
Xi" ... , X i.}- For this, consider the reduced sequence ffi of :0. 
Two neighbouring vertices in ffi are either connected by a base arc or they 
are end-points of a down-and-up sequence in :0. In both cases, the distances be-
tween these two neighbouring points in ffi are calculated in the forward process 
of the cascade algorithm according to the theorems 3.8 and 3.9. Following theorem 
3.7, ffi is either an ascending or descending sequence or an ascending with a subse-
quent descending sequence, and therefore, it holds according to theorem 3.10: 
This proves theorem 3.5. 
COROLLARY 1. If in a directed graph with n vertices only the distance between 
two vertices Y and Z of G is to be calculated, then change the numeration of the 
vertices of G such that Y is provided with the index n - 1 and Z with the index n. 
Then, the vertices of any simple path going from Y to Z (thus also of a shortest 
one) always form a down-and-up sequence, and following theorem 3.9, the distance 

98 
Chapter 3 
between these two vertices can already be calculated in the forward step of the 
cascade algorithm. A comparison betweyn this method and that described in 
chapter 1, however, shows that no advantage is obtained. 
COROLLARY 2. If in a directed graph G only the distance between one fixed 
vertex and all other vertices of G is to be determined, then give the largest index 
to this vertex when making a renumbering of the vertices of G. Those elements 
tb;j which have been calculated in the backward step are not changed any more, 
and it holds tbjj = dii. Thus, we can stop in the backward step when the last line 
has been calculated. 
COROLLARY 3. If only the shortest distances between the vertices of a subset 
of all vertices are to be calculated, then assign the highest indices to these vertices. 
If just p vertices are considered, we can break off the backward algorithm when 
the last p-lines have been calculated. 
THEOREM 3.11. Given a directed graph G without circuits. Then, the vertices of G 
can suitably be numbered such that IB( G) = D( G) is true. 
Proof. In paragraph 1.5, we have given a vertex numeration (in graphs without 
circuits) in such a way that arcs only go from vertices with a lower index to vertices 
with larger indices. Thus, according to our terminology, each simple path is as-
cending. Using theorem 3.8, the proof is evident. 
The proposition set up in 3.3 can also be proved now. 
THEOREM 3.12. Let G be a directed graph containing the vertices Xl, X 2, â¢â¢â¢ , Xn 
with the arc length matrix B(G). Then, the relation 3B(G) = D(G) holds. 
It is thus asserted that the distance matrix can also be calculated by succes-
sively carrying out the forward step of the cascade algorithm three times. 
Proof. Let R(Xj, Xj) be a shortest simple path going from Xi to Xj' and let 0. 
be the sequence of the vertices of R(X;, Xj). If we form the reduced sequence ffi 
pertaining to Q, then we get all distances between the neighbouring vertices in ffi 
during the first forward process. According to theorem 3.7, it holds: 
Either 
a) ffi is ascending or descending. Then, according to theorem 3.8, the value 
dij is calculated in the second forward step, i.e., 2bij = dij ; 
or 
b) ffi is ascending and has a subsequent descending sequence, i.e., m = {Xi' ... , 
X m, ... , Xi} with Xm being maximal. Then, dim and dmi are calculated in the second 
forward step, but not necessarily du (unless ffi consists of only three vertices Xj, 
X m, Xj). According to theorem 3.8, however, the relation dii = 3bii results. 

The cascade algorithm 
99 
FINAL REMARKS. By using the for-statement known from the programming 
languages, the cascade algorithm can be described as follows: 
for i = 1, 2, ... , n do 
} 
for j = 1, 2, ... , n do 
f 
d 
orwar step 
for r = 1, 2, ... , n do 
bii := min (bi;, biT + bTi ); 
for i = n, n -
1, ... ,2,1 do 
} 
for j = n, n -
1, ... ,2,1 do 
b k 
ac ward step 
for r = 1,2, ... , n do 
bii := min (bii, biT + bri); 
B = (bii) is now the distance matrix D(G). 
R. W. Floyd (Algorithm 97: "Shortest Path", Comm. ACM I) (1962), 345) 
suggests a modification of the instruction sequence which makes it possible to 
reduce the number of the necessary operations by half: 
for r = 1, 2, ... , n do 
for i = 1, 2, ... , n do 
for j = 1, 2, ... , n do 
bi; := min (bi;, biT + bT;); 
B = (bii) is now the distance matrix D(G) wanted. 
However, this algorithm is not suitable for calculation by hand, as the reader 
may see without difficulty. Instead of only two matrices IB and fB, n matrices 
will have to be written down when applying the algorithm of Floyd. 
With this we conclude our treatise on the problem of the determination of shor-
test simple paths in directed graphs. 
3.5. BIBLIOGRAPHY 
[1] Hasse, M.: tJber die Behandlung graphentheoretisch~r Probleme unter Verwendung 
der Matrizenrechnung, Wiss. Z. TU Dresden 10 (1961), 1313-1316. 
[2] Hu, T. C.: Revised matrix algorithms for shortest paths, SIAM J. Appl. Math. 15 
(1967), 207 -218. 
[3] Narahari Pandit, N. S.: The shortest route problem, An addendum, Operations Res. 
D (1961), 129-132. 

Chapter 4 
Nonlinear transportation problems 
4.1. FORMULATION OF THE PROBLEM 
Chapter 2 was devoted to the linear transportation problem. There we considered 
a directed arc-valuated graph (capacity restrictions \) with two vertices Q, 8 mark-
ed and one (return) arc (8, Q) marked of unbounded capacity. On the return arc 
of this graph we searched for a flow of a given value which was compatible with 
the capacities and minimized the transportation costs, with the costs k i; resulting 
for the transportation of one product unit along the arc (i, j). The function to be 
minimized was 
Z =.E kijxj; 
(i.j) 
with Xi; being the flow quantity compatible with the capacities on the arc (i, j). 
In section 4.2, we shall relax the assumptions for the cost functions, that is, 
we will presuppose the kij(x) to be only convex. In addition to this, we allow the 
Kirchhoff's node rule not to be satisfied, in other words: Goods may be produced 
or consumed in the vertices of the graph. 
In paragraph 4.3, we shall turn to a generalization of the classical flow problem 
treated by Ford and Fulkerson, namely: taking into consideration the capacity 
restrictions, two different flow types shall be transported from two sources to two 
sinks in a graph. The sum of the two flows is to be maximized. We do not know 
a solution of the problem for more than two types of flow .. 
4.2. A CONVEX TRANSPORTATION PROBLEM 
We examine the following problem: Given an undirected graph G(:f" U) with n 
vertices denoted by 1, 2, ... , n. Let an intensity (source strength) d; be assigned to 
n 
each vertex i with the relation .E d i = 0 being valid. 
i=l 
In other words: the quantity produced in the graph must also be consumed. 

Nonlinear transportation problems 
101 
Let an edge function (a flow) Xjj exist on G for which it holds that 
1: Xij - 1: Xji = di 
for all i Ex, 
jEI,+ 
jEiIi,-
(1) 
where Xj+ and Xi- denote the set of those vertices of G to which a positive flow goes 
from i and from which a positive flow goes to i, respectively (the denotation corre-
sponds to that used in chapter 1), since a positive flow going from i to j gives an 
orientation from i to j to the edge (i, j) = (j, i). Thus, we can take our graph to 
be directed with a non-negative arc function xii' (Some remarks on the existence 
of such a flow will be made later.) Let the transportation of the flow quantity 
xii ~ 0 along (i, j) entail the costs kii(Xii) ~ O. Find a flow on G which minimizes 
the total costs, i.e., for which relation (1) is true and which minimizes 
1: kji(Xii)' 
(i.j)EU 
In the following, we shall assume the cost functions kii(X) to be convex. Thus, let 
kii(AX + (1 -
A) y) ~ Akii(X) + (1 -
A) kji(y) 
for any A E [0, 1]. 
As is well known, a convex functiol). possesses a left-hand and a right-hand deri-
vative in each interior point and is continuous there. Furthermore, we presuppose 
that the kii(X) are right-hand continuous for x = O. We denote the right-hand and 
the left-hand derivative of kij(x) by k~(x) and klj(x), respectively. It holds: 
klj(x) ~ k~(x). 
First, let us give a criterion indicating the point at which a convex function be-
comes minimum. 
LEMMA 1. The point Xo minimizes the convex function g(x)/x ~ 0 if and only if 
g+(xo) ~ 0 and /T(xo) ~ 0 for Xo > 0 and g+(xo) ~ 0 for Xo = O. 
Before proving the lemma, let us provide some properties of convex functions 
without proving them. 
PROPERTY 1. Let g(x) be convex and 0 < a < A. Then, it holds 
g(x + a) -
g(x) < g(x + A) -
g(x) 
a 
= 
A 
' 
i.e., the difference quotients of convex functions are monotonically increasing with 
the steplengths. 
PROPERTY 2. Let g(x) be convex and 0 < a < A. Then, it holds 
g(x) -
g(x -
A) :::;: g(x) - g(x - a) 
A 
a 

102 
Chapter 4 
PROPERTY 3. For any a > 0 and convex g(x) it holds 
g(x) -
g(x -
a) ~ g(x + a) -
g(x) 
a 
a 
PROPERTY 4. For any interior point x of the domain of a convex function g(x) it 
holds 
PROPERTY 5. Let h > 0, g(x) be convex and x as well as x -
h be interior points 
of the domain of g(x). Then, it holds 
hg+(x -
h) ~ g(x) -
g(x -
h) ~ hg-(x). 
We recommend the reader to prove the above properties by himself. 
Now, we come to the proof of lemma 1. 
1. Let Xo be the minimum point of g(x). 
a) Let Xo > O. Since Xo is the minimum point, it holds for h > 0 
thus 
g(xo + h) -
g(xo) ;;:;; 0, 
g(xo + h) -
g(xo) ;;:;; 0 
Ii, 
and thus g+(xo) ;;:;; O. 
Correspondingly, it holds for h > 0 
g(xo) -
g(xo -
h) ~ 0, 
thus 
g(xo) -
g(xo -
h) ::::;: 0 
h 
-
and thus, the relation g-(xo) ~ 0 holds. 
b) Let Xo = O. Then, g(O + h) -
g(O) ;;:;; 0 is true, and thus 
g(O + h) -
g(O) ;;:;; 0 
h 
and thus g+(O) ;;:;; O. 
2. Let Xo > 0 and g+(xo) ;;:;; 0, g-(xo) ~ O. Suppose that Xo would not be a 
minimum point. Then, there exists a point Xl with g(XI) < g(xo). 

Nonlinear transportation problems 
103 
a) Let Xl > xo. Put Xl = Xo + h, and hence it follows using property 5: 
which is certainly wrong. 
b) Let Xl < Xo' We put Xo = Xl + h and get by using property 5 
which is wrong as well. 
c) Let Xo = 0 and g+(xo) ~ O. Then, with Xl = Xo + h being supposed to be 
the minimum point, it results 
which is not possible. 
Thus, the lemma is completely proved. 
Now, we are able to give a criterion for the minimization of the transportation 
costs realized by a flow which satisfies the modified node condition (2): 
THEOREM 4.1. A flow {xii} satisfying the condition 
I.: xii - I.: Xii = di for all i E X 
(2) 
jEI,+ 
jEI,-
minimizes the total costs 
in case of convex cost functions kij(x) ~ 0 if and only if there exists for each vertex 
i a number Vi (called potential) for which it holds: 
Vi -
Vi ~ k~(Xii) 
if Xii = 0, } 
k-:.(x.Â·) < VÂ· -
VÂ· < k::(xÂ·Â·) if xÂ·Â· > 0 
'J 
'1 
= 
1 
,= 'J 
'1 
'" 
(3) 
Proof. 
1. Let the conditions (3) be satisfied for a flow {Xii}' We will show that {Xii} is 
optimum, that is, it minimizes the total costs. Since a flow is certainly not opti-
mum if for an edge Xij > 0 and Xii> 0, we may put Xji = 0 if Xij > O. We also 
want to put kii(Xij) = 0 if the edge (i, j) does not lie in G at all or if Xii> O. Then, 
the modified node condition (2) assumes the form 
n 
n 
I.: xii - I.: xji = d; 
(i=l, ... ,n). 
(2') 
j=l 
j=! 

104 
Chapter 4 
Using (2'), the total costs can be written as follows: 
n 
R 
n 
(R 
n 
) 
I: kij(Xii) = I: kii(Xii) + I: Vi I: Xii - I: Xii -
di 
j,j=l 
i,j=l 
i=l 
j=l 
j=l 
n 
n 
n 
n 
= I: kii(Xii) + I: ViXii - I: Vixii - I: Vjd j 
j,j=l 
i.j=l 
i.j=l 
i=l 
n 
n 
= I: (kij(Xii) + (Vi -
Vi) Xii) - I: VidiÂ· 
i,j=l 
;=1 
Obviously, together with kii(Xij), also g(Xii) = kii(Xij) + (Vi -
Vi) xii is convex. 
Applying lemma 1 and taking into consIderation the conditions fixed in (3), the 
minimum value of g(xii) just results in the point xii = Xii' The convex function 
n I: kii(Xii) ' 
i.j=l 
however, assumes its minimum value when each summand is minimum. Since the 
n 
summand I: Vjdj is a constant, and thus without any influence on the situation 
i=l 
of the minimum, the total costs become minimum when the conditions (3) of the 
theorem are fulfilled. 
2. We show the necessity of the conditions (3) for the minimality of the total 
costs. Let {Xii} be a minimum flow. In order to verify the necessity of(3), we have 
to define a suitable potential. 
First, consider the subgraph G'(Â£, U') of G(Â£, U) which has the same set of 
vertices as G, but the set U' = {(i, j): kij(Xii) = klj(Xii) = k~j(xij)}ofedges(which 
depends on the minimum flow). We call G' the support of G. On each edge of 
G' there goes a flow =+ 0, since for xii = Â° 
the expression klj(Xii) is not defined. 
According to our remark made above, the graph G' has assumed an orientation 
such that on each arc there goes a positive flow. 
First, let us presuppose that G' is connected. Let Gil be a spanning tree of G'. 
Starting from any vertex io, to which the potential V i. = Â° 
is assigned, we assign 
a potential to all other vertices in the following manner: 
Let the value Vi be already assigned to vertex i. Then, we put 
~i = ~i + k~(~ii) 
~f Xii> 0, l 
Vi = Vi -
kij(Xii) 
If Xii> 0, 
(4) 
Thus, each vertex has been provided with a potential. We will show that the con-
ditions (3) are fulfilled. 
2.1. First, we show that the conditions (3) are true for the arcs of G', i.e" for 
those arcs of G for which the cost function at the minimum point is differentiable. 
Suppose that in G' there exists an arc (s, t) with xs! > Â° 
and V, - Vs =+ k:t. In the 

Nonlinear transportation problems 
105 
spanning tree Gil the value Vs has been coordinated to 8 along a chain (io, iI' ... , 
im = 8), and the value Vt to t along a chain (io = ip, i p_1, ... , im+1 = t). Together 
with the arc (8, t) = (im' i m+l) we get a closed sequence of arcs!) 
ft = (io, iI' ... , im = 8, im+1 = t, ... , ip = io)Â· 
The flow going on each arc of ft is always positive (according to the orientation 
just given to the edges). Now, we modify the flows on the arcs of ft slightly and show 
that the new flow can be transported "with lower costs". On the arcs of ft+ (there 
are arcs on which the flow goes in the same direction as the orientation of ft) we 
increase the fluxes by a value h which is still to be verified; on the arcs of ft- we 
decrease the fluxes by the value h, and the fluxes on all the other arcs remain 
unchanged. Obviously, the modified node condition (2) continues to be satisfied 
when effecting this step. The flow modified in this way is denoted by {Yij}' 
Now, consider the cost difference Lf resulting between the old flow and the new 
one: 
Lf = }; [kij(Xij) -
kij(Xij + h)] + }; [kij(Xij) -
kij(Xij -
h)]. 
(i.j)EI'+ 
(i.j)E~-
Using the Taylor series, we get 
Lf = h [-}; k~i(Xij) + 2: k~/Xij)] + o(h). 
(i.j)E~+ 
(i.j)EI'-
According to the formation rule for the V;, it results 
Lf = h(V. - VÂ· + VÂ· - + ... + - V - k' (x t) 
Zo 
'1 
'1 
8 
8t 
8 
+ Vt - + ... + - Viol + o(h) 
= h(Vt - Vs - k;lxst)) + o(h) 
when traversing ft. 
For sufficiently small h > 0, however, this expression is certainly greater than 
zero if Vt - Vs > k:ixst). But if Vt - Vs < k:t(xst), we modify the flow as 
follows: On the arcs of ft+ we decrease the flow by h, on that of ft- we increase 
it by h. The resulting difference Lf may be estimated in an analogous way. 
So we have shown that on the arcs of G' the relation Vt - V 
8 = k;t(xst) is 
true. This is exactly the condition (3) for those points at which the cost function is 
differentiable. 
2.2. In the following, we assume that in G there exists an arc (8, t) (not lying 
in the support of G') for which k:t(xst) < Vt - Vs or k;t(x 8t) > Vt - Vs for 
Xst > 0 is valid. 
Because G' was presupposed to be connected, there exist in G' chains from io 
to 8 and from t to io (cf. part 2.1 of the proof). Thus, we have a closed sequence 
1) {t possesses an elementary cycle containing the arc (8, t). {t itself may also contain cer-
tain arcs twice, but then once in {t+ and once in {t-. 

106 
Chapter 4 
a) Let k;t < Vt -
Vs' We transform the minimum cost flow {xij} into a flow 
{Yij} along fl as follows: I 
Xij + h for (i, j) E fl+ , 
Yij = 
~ij -
h . for 
(i.'~) E fl-, 
x ij 
for (t, J) ~ fl. 
The value of h will be fixed later. 
Now again, we estimate the cost difference. It holds: 
Ll = I: [kij(Xij) -
kij(Xij + h)] + I: [kij(Xij) -
kii(Xii -
h)] 
(i.jlEI'+ 
(i.jlE,,-
= h [-I: k~lxii) + I: k~j(Xii)J + kst(xst) -
kst(xst + h) + o(h) 
(i.jlEI'+ 
(i.jlEI'-
(i.jl4'(s.t) 
~ h [-.~ k;j(xij) -
k:e(xst) +.J: k~j(Xii)] + o(h) 
('.J lEI'+ 
(I.J lE,,-
(i.jl4'(s.t) 
=h[Vio - Vi, + Vi,- + ... + -Vs-k:e(xst) + Vt - + ... + - Vi.] +o(h) 
= h[Vt -
Vs -
k:e(Xsf)] + o(h) > 0, 
for a correspondingly small value of h, which contradicts the optimality of {xii}' 
Case 
b) where k;t > Vt -
VB is to be treated analogously. The transformation of the 
flow Xii into Yij will be made as in case a). 
In the case of an edge without flux proceed as in case a). 
To conclude the proof of the theorem, we still have to examine the case in 
which the graph G' (the support of G) is not connected. 
Suppose that G' is not connected. We form a graph Gil in the following way: 
Let the graph G' possess exactly q components. Choose now (any) vertex i j in 
each of these components. We still introduce a vertex n + 1 and connect it with 
each of the vertices ii by an arc (n + 1, ii)' We decrease the intensities of the q 
vertices ii by the value s each and assign the intensity qs to the vertex n + 1. 
Furthermore, we imagine s > Â° 
to be sufficiently small. We presuppose the costs 
on these new arcs to vanish identically, and consequently, also the derivatives. 
All other vertices, edges and costs remain unchanged. Let the graph resulting in 
this way be Gil. 
1) Cf. footnote p. 105. 

Nonlinear transportation problems 
107 
If {Xii} is an optimal flow in G, than a flow {Yii} is feasible in G" if we put 
Yii = xii for all arcs from G and Yn+1.il = e for the newly introduced arcs. The 
support (i.e., the set of those arcs for which k+ = k- = k' is true) is connected 
in G". For the continuity of the cost functions, we ensure that, in case of a suffi-
ciently small E, the costs of an optimal flow in G" differ as slightly as required 
from the costs of an optimal flow in G. 
Now, we perform these studies with the graph G", with the potentials Vjforthe 
vertices ii' n -
1 being equated to zero. The potentials of the other vertices then 
result (along the arcs of the support) as described above. 
EXAMPLE. First, we shall explain the simpler case by means of an example in 
which the cost functions are all differentiable. Consider the transportation task 
of Fig. 4.1. At each vertex there is space for two numbers, with the upper one 
indicating the strength of the point and the lower one the actual potential value. 
In addition to this, there are also two values assigned to the edges, with the first 
one (the upper value) indicating the cost function and the second the quantity of 
flow actually going through the edge. 
In Fig. 4.1a, it can be seen that a connected support (these are, in case of differen-
tiable cost functions, all those edges on which a non-zero flow is going) is obtained 
with the given feasible initial flow (indicated by the lower number on the edges). 
In this support, we have chosen a spanning tree (doubly drawn edges) and assign-
ed a potential to the vertices according to the rule (4) along this spanning tree 
(the potentials are indicated by the lower number at each vertex). It can be 
recognized that, for example, the edge having the cost function x2 and the flow 
quantity 4 does not satisfy the optimality condition (3). The potential difference 
on this edge should virtually be k~i(Xii) = 2Â· 4 = 8, but in fact it is 21 -
3 = 18. 
It is thus possible to increase the flow by simultaneously reducing the costs along 
the cycle f-l drawn in. If it is increased by the value h, then the costs 
3(4 + h} + (4 + h}2 + 2(5 -
h)2 + (2 -
h) 
will result on the edges of f-l. 
The costs become minimum for h = 5/3. Figure 4.1 b shows the improved flow. 
Here again, the vertices are provided with the new potentials. On the edge with 
the cost function 4x the optimality criterion is violated (although there is no flow 
going through this edge). The flow can be augmented in the direction ofthe aris-
ing cycle f-l. The resulting costs amount to 
( 17 
)2 
4h + (3 -
h) 6 + (1 + h}2 + 3"" - h 
for the arcs of f-l and take their minimum for h = 17/6. 
The reader may perform the improvements step by step by himself. The opti-
mal transportation is represented in Fig. 4.1 c. 

108 
Chapter 4 
costs: 99 
ol 
Fig. 4.1 
costs: 56"3 
minimum 
cl 
costs: 902/3 
bl 
We were not able to decide the question of the finiteness of the algorithm de-
scribed above. It has been made clear that a relatively large number of steps was 
necessary, although all cost functions had been presupposed to be differentiable. 
Now let us take another example without a connected support of the initial 
graph. 
For this, consider Fig. 4.2a. The strength (need or quantity produced) is put 
in the vertices of the graph, the cost functions and a feasible initial flow are indi-
cated at the edges. The support of the graph, which, of course; depends on the flow 
value, is marked by doubly drawn edges. The direction of the flow is marked by 
the orientation of the edges. It can be seen that the support is not connected, and 
therefore, we have to introduce an auxiliary point to which we assign a strength 28 

Nonlinear transportation problems 
109 
since the support possesses two components. We connect the auxiliary point with 
an arbitrarily chosen vertex of each of the components. The strength of each of 
these two vertices is reduced bye, and arcs going from the auxiliary point to each 
of the chosen vertices are introduced, with e flowing on each of them. The trans-
portation on them is free of charge. The result is represented in Fig. 4.2b. Now, 
we are able to assign a potential to each vertex along a support (in our case, this 
is a spanning tree). 
c ' 
bl 
costs :',34-3t~ E 2 
7 
cl 
d l 
Fig. 4.2 
We have drawn in a cycle fl along which the costs may be reduced, since for 
the arc of fl' which is not contained in the support, the optimality criterion (3) is 
violated. 
The result of the improvement is indicated in Fig. 4.2c. 
We recommend the reader to complete the algorithm. Figure 4.2d shows an 
optimal flow. 
The doubly drawn edges in Figs. 4.2c and 4.2d satisfy the optimality criterion 
each time; the numbers indicated in the vertices stand for the potentials devel-
oping along a support of the graph. 

110 
Chapter 4 
In the course of the algorithm, it may happen that unconnected supports develop 
again. In such a case, an auxiliary point will have to be introduced. Once a con-
nected support is ascertained in the course of the algorithm, than one can also 
immediately make 8 tend to zero in order to omit the auxiliary point. Here, it 
may occur, however, that the new support is not connected any more. Thus, 
the support is not connected any more in the optimal graph (after 8 has tended to 
zero), since the vertex with the potential 5 is incident with two edges on which no 
flow is going. In case of the third edge, the cost function is not differentiable, 
with the flow value being 2, nevertheless the optimality criterion is fulfilled for 
all arcs. 
With this, we conclude our expositions on transportation problems involving 
convex cost functions. 
If we assume the cost functions to be not only convex, but, in addition to this, 
also differentiable, the optimality criterion will be simplified as follows: 
THEOREM 4.2. Let the cost functions kii(Xii) be convex and differentiable. A flow 
{Xii} is optimal if and only if there exists a potential {Vk } such that 
Vi -
Vi ~ kii(Xii) 
for 
Xii = 0 
and 
VÂ· -
VÂ· = eÂ·(xÂ·Â·) 
, 
, 
'J 
IJ 
for 
Xii> O. 
If we also suppose that a capacity restriction is imposed on each. edge, i.e., that 
Â° ~ Xii ~ cii for all (i, j) E U, 
then there results as optimality criterion: 
THEOREM 4.3. Let the cost functions be convex and differentiable. Then, a flow 
{xii} is optimal if and only if there exists a potential {Vk } such that 
VÂ· -
VÂ· < k-t.(xÂ·Â·) 
for 
x,',' = 0, 
1 
,= I} 
" 
VÂ· - vÂ· = V(x .. ) for 
, 
, 
'} 
'1 
VÂ· -
VÂ· > V(xÂ·.) 
for 
J 
I = '} 
I, 
For the case where the cost functions are convex and piecewise linear, the so-called 
combined method offers itself. This method makes it possible to transform the 
nonlinear transportation task into a linear one. The interested reader's attention is 
drawn to the textbook of Ermolev and Mel'nik [2]. 
4.3. A MULTI-FLOW PROBLEM 
Extending the flow problems discussed in chapter 1 (the algorithm of Ford and 
Fulkerson will be mentioned here in particular), this section will be devoted to 
the following: 

Nonlinear transportation problems 
111 
Given a connected graph G(l" U) thought to be undirected. The vertices are 
numbered, and the edges are denoted by Uij' If the graph is simple (and this 
assumption does not restrict our problem to be dealt with in the following), let 
Uij = (i, j) be true, that is, let uij be incident with i and j. 
The flow problems discussed so far took into account only one single type of 
flow. The extension made will be in the sense that various types of flows are con-
sidered. 
Thus, the kth type of flow is shortly called kth flow. For a fixed type of flow, 
say for the kth flow, we imagine exactly one source Nk in G from which kth flow 
will be sent to exactly one sink N k ,. By possibly introducing auxiliary points it 
can be arranged that for m types of flow there are exactly m sources and exactly m 
sinks available. By F(k; k') we mean a kth flow which is sent from Nk to Nk ,. 
The value of the flow F(k; k'), i.e., its amount, is denoted by f(k; k'). Let a real 
number Gij > 0, i.e., the capacity, be assigned to each edge Uij of G. Let Gij = Gji 
be true (since G has been supposed to be undirected). 
Let X~j be the value of the kth flow in the edge uij going from i to j. Because no 
multiple edges have been admitted (and since loops are obviously useless), let 
Xk, = 
-x~, for all k 
IJ 
J' 
(that means that positive kth flow is suitably sent through an edge in one direction 
only; but positive flow of differing types, however, can pass through an edge in 
the opposite direction). 
N2 o----::=:--.!L~=,~~~=-~=_O N l ' 
Fig. 4.3 
For this consider Fig. 4.3. Let Gij = 2 be true for each edge of the graph. The 
numbers which are circled indicate the respective value of the second flow, the 
other numbers to be found at the edges stand for the value of the first flow. It can 
be seen that for all those vertices which are neither sources nor sinks the Kirch-
hoff's node conditions are fulfilled for each type of flow. Since the source edges 
only have a capacity of 2 each, no type of flow can be of a value greater than 2. 
Thus, the flow distribution from Fig. 4.3 already yields a maximum flow, and the 
following relation holds: 
fmax(1; 1') = fmax(2; 2') = 2. 
The exact definition of what we understand by a maximum flow will still be given. 
As far as our example is concerned, no error can arise, since a maximum value of 
only 2 of each type can be transported. 

112 
Chapter 4 
Another flow distribution on the graph, however, entails a reduction of at least 
one of the two flow values, as can easily be seen. 
For m types of flow, let the capacity restrictions 
m }; Ixrjl ~ Cij for all 
Uij E U 
k=l 
be required. 
The first problem which we are faced with is the following: 
Given the capacities Cij of the edges and also m non-negative numbers rj 
(i = 1,2, ... , m). Do then m types of flow F(k; k') exist such that f(k; k') = rk 
is true for k = 1, ... , m and 
m 
}; Ixfil ~ Cij holds for all 
Ujj E U? 
1(.=1-
In this section, we shall consider almost exclusively the case m = 2. Although it 
could be shown that some properties also apply to any number m, there are no 
far-reaching properties of graphs known on which m different types of flow are 
to be transported, except for the case m = 1, 2. 
DEFINITION. A set {vij} of edges is called a cut disconnecting the vertices {Nl' 
N 2, ... , N m} from the vertices {Nl' N 2, â¢â¢â¢ , N m,} if 
a) after removing the edges of Vij from G, there exists no path from Nk to 
N k , for any k (k = 1,2, ... , m) and 
b) no proper subset of {Vij} satisfies condition a). 
Note that for i =1= j, the vertices N i and Nj' may be contained in one componentÂ· 
when the edges from {Vij} have been removed. 
By the capacity of such a cut we mean the sum of the capacities of all edges ofthe 
cut. 
A minimum cut is a cut of minimum capacity. 
Let us denote a cut by (1, ... , mil', ... , m') and its capacity by c(l, ... , mil', 
... , m')., 
LEMMA 1. If a cut (1, ... , mil', ... , m') is removed from a graph, then the result-
ing graph possesses m + 1 components at the most. 
Proof. Imagine the edges of the cut to be successively deleted from the graph G. 
Because a cut is required to be minimum (b), each edge lies on (at least) one path 
from N; to Ni' for (at least) one i (1 ~ i ~ m). If the number of the components 
increases when deleting, one after the other, the edges of the cut, then at least 
one pair N; and N;, of vertices have been disconnected. That means, however, 
that m + 1 components at the most can result, since there exist exactly m pairs 
of such vertices. This proves lemma 1. 

Nonlinear transportation problems 
113 
Now we turn to an estimation of the capacity of a minimum cut for the case 
m = 2. For this purpose, consider two particular operations. 
Operation a): We identify the vertices N 1 and N 2 to form one point, and the 
vertices N 1, and N 2, to form another one. Let the resulting graph be Ga. 
Operation b): We identify the vertices N 1 and N 2' to form one point, and the 
vertices N2 and N 1, to form another one. Let the graph resulting in this way be Gbâ¢ 
In these operations, multiple edges may develop, but on the other hand, edges 
may also get lost, as for example in a) if Nl and N2 or if N 1, and N2, are connected 
by an edge. All other edges, however, remain unchanged like their capacities 
(of. Fig. 4.4). 
Possibly arising double edges may be replaced by one single edge the capacity 
of which is put equal to the sum of the capacities of the edges from which this 
edge has resulted. In Fig. 4.4b, the vertices Nl> N2 and the vertices Nl', N2, are 
A 
01 
N.,=-
2' 
Fig. 4.4 

114 
Chapter 4 
identified (operation a)), whereas the operation b) has been carried out in case of the 
representations in Fig. 4.4c. In this latter case, a non-planar graph results, as 
can easily be verified (i.e., however the graph is drawn in the plane, edge cros-
sings will result in every case). 
We denote by (1-211'-2') a cut in Ga which disconnects the vertex being 
formed by identifying NI and N2 from that vertex ensuing from the identification 
ofNI , andN2,. Let (1- 2' 11' -
2) be a corresponding cutin Gb(inFigs. 4.4band 
4.4c, we have marked corresponding cuts by a doubly drawn edge). Now we can 
make a statement about minimum cuts in G, as far as we know the minimum 
cuts in Ga and Gbâ¢ 
LEMMA 2. Let (1,211',2'), (1-211'-2'), (1-2' 11'-2) be minimum cuts in 
G, G a and G b, respectively. Then, the following relation exists between their capacities: 
c(l, 211', 2') = min [c(1-211'-2'), c(1'-211-2')]. 
Proof. If we remove a minimum cut (1,2 I 1',2') = S from G, then the result-
ing graph splits into two or three components according to lemma 1. 
1. Let G-S consist of two components. 
a) Let one of the components contain NI and N 2, and let the other one contain 
N I, and N 2,. Then, there will be contained in G-S a path W 12 going from NI 
to N2 (since each component is connected), as well as a path W{2 (in the other com-
ponent) connecting Nl' with N 2,. In Ga let the set Sa of edges correspond to the 
set S of edges of G. This set Sa of edges disconnects the vertex (1-2), which has 
emerged from the identification of N I and N 2, from the vertex (1' - 2') resulting 
from the identification of N I , and N 2,. That is, Sa contains a cut (or it is already 
the cut itself) disconnecting (1-2) from (1' -2'). For the minimum cuts, however, 
this leads to the relation 
c(l, 211', 2') ~ c(I-211'-2'). 
Suppose the relation 
c(l, 211', 2') > c(1-211'-2') 
(1) 
would be true. 
Let :ta be a minimum cut in Ga, and let :t be the set of edges corresponding to 
:ta in G. According to (1), :t is no cut in G, thus, without restriction of generality, 
there exists in G a path W going from NI to NI, which contains no edge of:t. Not 
all edges of W can have an edge in Ga corresponding to them, since otherwise 
:ta would not be a cut of Ga. Without restriction of generality, W contains the 
dege (NI' N 2) and perhaps also (NI" N 2,). To all other edges of W there corre-
sponds in Ga a set ~a of edges forming in Ga a path Wa connecting (1-2) with 
(1'-2'). Wa, however, has no edge in common with :ta, which contradicts the 

Nonlinear transportation problems 
115 
property of 'ta of being a cut. Thus, we have shown that the relation 
c(l, 211', 2') = c(1-211'-2') 
is true. 
b) Let one of the components contain NI and N 2, and the other one NI, and 
N 2â¢ By rewriting N2 ~ N 2" we get case a). Then, it results 
c(l, 211', 2') = c(1-2' 11'-2). 
That case a) is obtained, indeed, by merely rewriting the vertices becomes clear in 
the following way. Whether the flow of type 2 is sent from N 2 to N 2' or vice versa, 
is of no importance because of the symmetry (undirected graph I). 
2. Let G- S have three components. 
a) Let Nl and N2 be contained in one component, N I , in the second and N 2, 
in the third component (Fig. 4.5). Obviously, the edges Sa in Ga corresponding 
to the edges of S disconnect the vertices (1-2) and (1'-2'), i.e., it holds: 
c(1,211',2') ~c(1-2' 11'-2). 
Suppose the following relation would hold: 
c(1,2 11',2') > c(1-2' 11' -2). 
Considering a minimum cut :ta in Ga, we shall state that the reflections made in 
1a) can easily be applied. 
Fig. 4.5 
b) Let the first component contain NI and N 2" the second one N2 and the third 
one N I ,. Rewriting N2 ~ N 2, leads to case 2a), and it follows: 
c(l, 211', 2') = c(1-2' 11'-2). 
Since in case of three resulting components in S-G either of the cases 2a) or 
2b) will occur, lemma 2 is finally proved. 
Now, let (1 11') and (2 I 2') be minimum cuts in G disconnecting Nl from N 1 
and N2 from N 2" respectively (i.e., the minimum cuts disconnecting the source 

116 
Chapter 4 
from the sink in the simple flow problem of Ford and Fulkerson). Then, the fol-
lowing lemma will hold. 
LEMMA 3. The relation c(111') + c(2 I 2') ;;;; c(1, 211', 2') hold8. 
Proof. If we remove from G all edges of a cut disconnecting NI from NI, and, 
in addition, all edges of a cut disconnecting N2 from N2, (here, some edges may 
be contained in both cuts, but they are counted only once in a cut (1,2 11',2')), 
then, of course, NI is disconnected from NI, and also N2 from N2" which proves 
lemma 3. 
THEOREM 4.4. Two flow8 F( 1; 1') and F(2; 2') can be realized in a graph at the 
8ame time if and only if 
a) f(1; 1') ~ c(111'), 
b) f(2; 2') ~ c(212'), 
c) f(1; 1') + f(2; 2') ~ c(1, 211', 2') hold. 
Furthermore, the maximum of the 8um of both type8 of flow i8 equal to the minimum 
of the capacitie8 of all CUt8 which di8connect two pair8 of vertice8 at a time (namely NI 
from N I , and N2 from N 2,), i.e., 
max (1(1; 1') + f(2; 2')) = minc(l, 211', 2') 
= min (c(1-211'-2'), c(1-2' 11'-2)). 
(2) 
Proof. The necessity of the conditions a) to c) is immediately clear. The suffi-
ciency of the conditions and the truth of the relation (2) are verified by means of 
a suitable algorithm. 
To avoid mistakes, we denote in the following the vertices not only by natural 
numbers (i.e., by 1,2, ... , i, j, k, 1',2', ... ), but by writing N I , N 2, â¢â¢â¢ , N i, N j , Nk , 
N I " N 2" ... By a chain from Ni to N j we mean an edge sequence 
If none of the vertices incident with the edges of a chain occurs more than twice, 
then the chain is called 8imple or path going from Nito N j. By the capacity of a path 
W we mean the smallest of the edge capacities of W. A flow of the value x going 
on a path W from N j to N j is shortly called path flow of the value x. First, we perform 
labelling procedures similarly to the algorithm of Ford and Fulkerson described 
in chapter 1. 
Define four classes of vertices II> I 2, I b, If (note that for each edge Ujj the 
relation IX}jl + IX~jl ~ Cij is true): 
1. II: N 1 belongs to II' 
Let N j E II and Ujj be an edge with x}j + IXIjl < Cij' Then also let N j E II' 
Together with N;, N j will also belong to II if an amount of the first flow can still 

Nonlinear transportation problems 
117 
be sent from N; to N j without causing a change in the value or in the direction of 
the second flow. 
2. I 2 : N2 belongs to I 2â¢ 
Let Ni E I2 and uii be an edge with IX}jl + XTj < Cij. Then also let N j E I 2. 
Together with N i, Ni will also belong to I2 if an amount of the second flow could 
still be sent from Ni to N j without changing the value or the direction of the first 
one. 
3. Ib: N2 belongs to I b. 
Let Ni E Ib and Uij be an edge with x!j + XIj < Cij. Then also let N j E I bâ¢ 
Together with N i , N j will also belong to Ib if at least either of the two flows going 
from Ni to Ni can still be augmented. 
4. I( N2 belongs to If. 
Let N i E If and Uij be an edge with XJi + Xlj < cij. Then also let N j E If. 
Ni will also belong to If' together with N i, if either second flow going from Ni 
to Ni or first flow going from N j to Nt could be augmented. 
It is immediately clear that, together with N i , N j also pertains to each (the 
same) of the four classes of vertices if one edge Uij is not saturated (thus, if IX!jl 
+ IXTjl < cij). That means that those edges are especially interesting of which the 
capacity is saturated. In the following, discussion will be of how to divert flows in 
a suitable manner in order to augment the sum of both flows. 
NÂ· J, 
@ 
Njz 
N; 
Nj3 
@ 
Nj4 
Fig. 4.6 
Let us haveÂ· another look at Fig. 4.6. The reader may prove that the following 
statement holds: Together with Ni also Nj, and N j, are contained in II if the 
doubly circled number indicates the capacity, the simply circled number is Xlj. 
and the non-circled number is x}j" 
Find out which of the vertices N j â¢ (k = 1,2, 3, 4) lie in the classes I 2, I b, If 
together with N i . 
The reader will recognize without difficulty that the prescription for deter-

118 
Chapter 4 
mining the set Il of vertices represents the labelling algorithm of Ford and 
Fulkerson (for the first flow) and the prescription for determining I2 that for. the 
second flow. 
Assume N2, E III' Then there exists a labelling path W going from N2 to N2" 
and let 
Imagine each edge (Nij, N ij+1) with j = 1, ... , s -
1 to be oriented from Nil to 
N,' . For each of these edges Uj i 
it holds: 
j+1 
j j+l 
Such a W is called a backward path. Correspondingly, a path W is called a forward 
path if N2, is contained in If and if W is a labelling path from N2 to N 2, so that 
with W = (N2 = Nk" Nk., â¢â¢â¢ , Nk , = N2,) for each edge Ukjkj+1 (j = 1, .â¢â¢ , l -
1) 
of W the relation 
Xl 
+x2 
<c 
kJ+lkj 
kjkjH 
kjkjH 
is valid. If there exist in G both a forward path and a backward path, then we say 
that G contains a double path. 
Let III be the set of those vertices of G not containM in III, and let Ii> 12, If' 
be defined correspondingly. 
LEMMA 4. It holds N 2, E III if and only if there exists no backward path. 
Proof. 
1. Let N2, E III be true. Consider the set 6 of the edges Uij = (Nh N j) with 
Ni E III and N j E III, For each of these edges, it holds 
1 + 2_ 
Xij 
Xjj -
Cij' 
Since 6 disconnects the vertices N 2 and N i: from each other, and since on each 
path between these two vertices at least one edge of 6 can be found, there is no 
backward path. 
2. Assume there exists no backward path and N 2, E III' Then, there exists a 
chain and thus a path W = (N2 = Ni" N i., ... , Nik = N2,) going from N2 to 
N 2" and for each edge Uijij+1 it holds: 
x!. + x? 
< cÂ·Â· 
'i'i+l 
'lli+l 
'i'.1+1 â¢ 
In this case, however, these edges form a backward path, which contradicts the 
assumption. 
This proves lemma 4. 
We can prove the following lemma quite analogously. 
LEMMA 5. It holds N 2, E If if and only if there exists no forward path. 

Nonlinear transportation problems 
119 
LEMMA 6. Let N2, E Ib be true and :s be the set of all edges (X, Y) with X E Xb 
and Y E lb' If there exists an edge Uij E :s with x}j =1= 0, then it holds NI E Xb and 
N I , E lb' 
In other words: A set :s of edges through which goes an amount of first flow di-
rected in any way disconnects NI and N2 from N2, and NI,. 
Proof. 
1. Suppose that it would hold NI E I b, NI, E Xb' Since an amount of first 
flow goes (from NI to N 1,), there is an edge Uij E :s with N j E I b, N j E Xb and 
xli = 
-X~j > Â° (cf. Fig. 4.7). According to the definition of the set Xb, it holds 
x}j + XTj = Cij, thus 
X7j = Cij -
x}j = Cij + xli ~ Cij' 
But since the relation XIj ~ Cij is equally true because of the capacity restriction, 
we get XTj = Cij' thus x}j = 0, which contradicts the assumption x}j =1= 0. 
Fig. 4.7 
2. Let N I, NI, ~Xb or N I, NI, E Ib be true. Choose any edge Uij E :s with 
Ni E Xb and N j E Xb, and let Xii> Â° be true without restriction of generality. 
Then, one gets 
XTj = Cij -
x}j = Cij + xli> Cij 
which yields a contradiction to the relation XTj ~ Cij' 
Thus, lemma 6 is proved. 
The following proposition can be verified quite analogously: 
LEMMA 7. Let N 2' Elf be true and let :s be the set of all edges (X, Y) with X E Xf 
and Y Elf. If there exists an edge Uij withx}j =1= O,thenitholdsNI , E XfandNI Elf. 
In other words: A set Â® of edges through which goes an amount of first flow directed 
in any way disconnects NI, and N2 from NI and N2,. 
The next lemma follows directly from lemmata 4 and 5. 
LEMMA 8. A double path (i.e., both a forward and a backward path from N2 to N2,) 
exists if and only if neither N2, E If nor N2, E Ib is true. 
Now, we give an algorithm which makes it possible to decide whether or not 

120 
Chapter 4 
flows F(l ; 1') and F(2; 2') are realizable in a graph. If so, we shall construct these 
flows. This algorithm also makes it possible to construct such flows that /(1; 1') 
+ 1(2; 2') becomes maximal. 
For all Gij we suppose the character of being even-numbered and we are thus 
able, as we shall see, to assure the integrality of the particular flows. For any real 
Gij > 0, Hu [5] writes that the theorem can be proved as well, but this would be 
very troublesome. Supposing the character of being even-numbered certainly re-
presents no restriction for machine computation. 
We set ourselves the task of constructing flows of the values rl = 1(1; 1') and 
rz = 1(2; 2'), with r l and rz being assumed to be even numbers. 
Algorithm for finding a two-type flow 
(i) Using the algorithm of Ford and Fulkerson (chapter 1), starting out from 
the feasible flow of the value zero, augment successively the value ofthe first flow 
up to the value rl' If rl ~ G(l [1'), this task can be fulfilled, otherwise the condi-
tion of theorem 4.4, which we wish to prove, is not satisfied. 
If it is required to maximize the sum of the two flows, then maximize first 
F(l; 1'). Since all Gij are even numbers, the maximum flow of type 1 will also 
be even-numbered. 
(ii) If possible, construct a flow of type 2 of the value rz, by using the algorithm 
of Ford and Fulkerson, on this same graph with the reduced capacities G;j = Gij 
-
IX}jl; in case of a maximization of the sum of both flows, construct a maximum 
flow of type 2. If, however, the flow of type 2 to be constructed in this way does 
not reach the desired value rz, then go over to (iii) just as in case of a maximization 
of the sum of both flows. 
(iii) Search for a double path. If none exists (i.e., if no forward and backward 
path can be found at the same time), the task is unsolvable or the sum of the flows 
is already maximum. 
(iv) If a forward and a backward path exist, then proceed as follows: On the 
forward path, 
flow 1 is decreased by 1 on each edge, 
flow 2 is augmented by 1 on each edge. 
On the backward path, 
flow 1 is augmented by 1 on each edge, 
flow 2 is augmented by 1 on each edge. 
The steps (ii), (iii), (iv) are repeated as often as either the desired flow value rz 
is reached (the flow value of the first flow remains unchanged!) or the sum of the 
flows cannot be augmented any more. In the latter case, a flow distribution has 
been obtained such that the sum of both types is maximum. 

Nonlinear transportation problems 
121 
Before proving all our assertions set up, we want to explain the algorithm by 
means of an example. 
For this, take the graph represented in Fig. 4.8 (it is the same as in Fig. 4.4). Let 
the first number on each edge indicate its capacity, the second number will indi-
cate the value of the first flow (obviously, this value is maximum) and the third 
the value of the second flow. The orientation given in Fig. 4.8a has been chosen 
so that the first flows are all non-negative. Now, determine a maximum flow of 
type 2 on the graph with reduced capacities. The result of this procedure is illus-
trated in Fig. 4.8b. We have now reached a total flow of the value 8 + 4 = 12. 
Step (ii) is just finished so that we can go over to step (iii) in searching for a double 
(j\ 
2.2.0 
\.'.)cx--+------<----Â» 
4.2.2 
b 
6.2.2 
4..2.2 
4.2.-2 
f.b 
42.0 
b 
Â® 
0) 
c) 
Fig. 4.8 
path. In Fig. 4.8 b, labellings f and b have been made on certain vertices according 
to whether they lie in If or i~ I b, respectively. Of course, it is also possible for 
vertices to have both labels. Now, step (iv) is to be effected. A repeated applica-
tion of (iii) and (iv) yields the graph represented in Fig. 4.8c. The sum of the 
flows amounts to 8 + 8 = 16 in this case. This sum is maximum, too, as can 
easily be seen. After step (iv) has been carried out, it-may occur that step (ii) has 
to be performed again. 
Our next task is to prove the following assertions: 
a) After step (i v) has been performed, the relation 
Ixlil + IX7il ~ Cij 
holds for each edge Uij' 
b) If the algorithm terminates, we have obtained a maximum sum of the flows 
(or a first flow of the value r 1 and a second one of the value r2), or the required values r 1 
and r2 can never be reached. 

122 
Chapter 4 
c) Both flows ha~e integer values on each edge. 
d) The algorithm is finite. 
First, we prove c). After having carried out the steps (i) and (ii), the statement 
is obviously satisfied. Imagining step (iv) to be performed, each type of flow is 
1 
then augmented by 1 on the backward path and thus remains integer, whereas 
on the forward path, the first flow is decreased by 1 and the second one augmented 
by 1, both remaining integer in this way. 
A special characteristic to be recognized is that, when determining the maxi-
mum sum, the sum of both flows on each edge is even-numbered (this is the case 
even if the character of being even-numbered is required for rl)' The remaining 
capacity on each edge wiil also be even-numbered, since the sum of the flows is 
even (and since also the Cij have been supposed to be even). Thus, in the case of a 
possible application of step (ii), the flow of type 2 will be modified by the value 2 
on each edge. This means, however, that the sum of the flows remains even-num-
bered. 
Proof of d). Since carrying out step (iv) will not change the value of the first 
flow, but will cause an increase in the second flow by 2, the algorithm terminates 
in case the capacities are assumed to be finite. If there is no finite cut disconnecting 
Nl from Nt' and N2 from N 2" then the flow can become as high as required. 
Proof of a). As we have seen, the relation 
I x~Â·1 + IX?'I < cÂ·Â· - 2 
'} 
'} = 
'I 
holds (even in the case of rl and r2 being even-numbered) on edges of a forward 
path or on edges of a backward path on which the capacities are not saturated. 
Thus, we can change the flow values by 1 in each case without exceeding the 
capacity. Of special interest therefore are those cases in which the capacities 
are saturated, i.e., in which IX}jl + IX~jl = Cij is true. 
Because of the relation 
-X}j + X~j < Cij 
the following cases may occur on a forward path: 
1. X~j :;::; 0, Xlj :;::; 0. Since all flow values are integers, we get after having per-
formed step (iv): 
IX}j -
11 + Ix~ + 11 = cij. 
2. X~j :;::; 0, X~j ;;:;; 0. Here, in at least one of the two inequalities there is no 
sign of equality, since no flow would then go through this edge, i.e., the capacity 
of this edge would not be saturated. After step (iv), it follows 
IX~j -
11 + IX~j + 11 ;;:;; IX}jl + IX~jl = Cij 
and for the case xtj > 0, X~j < 0, even an inequality develops leading to step 
(ii) to be possibly carried out. 

Nonlinear transportation problems 
123 
3. xtj < 0, xlj < 0. Then, it holds 
Ixtj -
11 + IX7j + 11 = Ixtjl + 1 + IX7jl -
1 = cuÂ· 
Because of IX}jl + IX7jl = Cij and 
1 + 2 < 
Xii 
xii 
Cij 
the following three cases are possible on a backward path: 
1. x~ ~ 0, x7i < 0. According to (iv), it results 
2. x}j < 0, x7i ~ 0. Then, it holds 
Ixtj + 11 + IX7i + 11 = Ixtil -
1 + IX7il + 1 = cij. 
3. x}i < 0, x7i < 0. We get 
IX}i + 
11 + IX7i + 11 = IX}il -
1 + IX7il -
1 = Cij -
2. 
In this case as well, the edge is not saturated any more, and it may happen that 
step (ii) has to be carried out. 
Proof of b): If we have flow values of rl and r 2 for the flows 1 and 2, respec-
tively, when breaking off the algorithm, then nothing is to be shown. 
The algorithm terminates if neither (ii) nor (iv) is applicable. Since incase of 
the applicability of (ii), also (iv) would be applicable (in that case, however, there 
exists a path from N2 to N 2, on which no edge has a saturated capacity; but this 
path is both a forward and also a backward path and is thus a double path; there-
fore (iv) is applicable), we may assume that there exists no double path when ter-
minating the algorithm. Thus, it holds either N 2, Elf or N 2, E lb. 
1. N 2, E lb. Consider the set IS of all edges Uij with Ni E Xb and N j E lb. It 
holds 
1 + 2_ 
Xii 
Xii -
Cij' 
i.e., xtj ~ Â° andxTi ~ Â° 
(since it is not possible to send through Uij an amount 
of any type of flow greater th~n Cij). If xtj > 0, then, because of lemma 6, it 
follows that Nl E Xb and N 1, E Xb. Increasing one !'If the two types of flow going 
through the edge Uij (and thus, aiming at increasing the sum of the flows) leads 
to a diminution of the other type of flow by this very amount (and thus, to no 
increase in the sum). If x}i = 0, the second flow will saturate the capacity Cij, 
and this type of flow may not be augmented on Uij at all (not even at the cost of 
the first flow). If one has first flow of the value r1, but not yet second flow ofthe 
value r2, then second flow may be increased only by diminishing the first flow. 

124 
Chapter 4 
That means that the demand made on the values of the two types of flow can-
not be satisfied. 
2. N 2, E If. Consider the set (5 of all edges u;i with N; E If and Ni E If. Then, 
it holds 
Thus, a non-negative flow of type 1 is flowing from Ni to N i â¢ 
If xl; = 0, the edge u;i is saturated with second flow, and no greater amount of 
second flow may pass through this edge. If the value r 2 for the second flow is not 
yet reached, then it will not be possible to reach it by further using uij. 
But if xi; > 0, then, because of lemma 7, it holds N 1, E If and Nl E If. Increas-
ing the first flow thus brings about an equal reduction of the second flow, and 
vice versa. In any case, the sum of the two flows cannot be further increased. 
Thereby, we have shown how a flow distribution can be found such that the 
sum of both flows is maximum. 
Using lemma 2 and including the considerations made last, one can also see 
that the conditions a) to c) of theorem 4.4 are in fact sufficient for assuring flows 
F(1; 1') and F(2; 2'). 
The proof of this statement may be left to the reader. 
It can be seen without difficulty that, when searching for a maximum flow 
(i.e., for a flow distribution in the case of which the sum of the two flows is maxi-
mum), the second type of flow can be increased, if need be, also by more than one 
unit. The reader who has to deal with this task will find out, after a little practice, 
by how much the flow can be augmented. Writing down the formulae and prov-
ing them turns out to be rather complicated. We think that the algorithm given 
by us in this form is also complicated enough. 
It can easily be seen that the case in which, say, Nl coincides with one of the 
other points, say with N 2, can be treated as a special case by suitably introducing 
an auxiliary vertex and an edge of a sufficiently high capacity. 
CONCLUSIONS. A conjecture that an m-type flow F(1, ... , m; 1', ... , m') exists if 
and only if the 2m -
1 inequalities of the form 
t(k; k') ~ c(k I k'), ... 
(7) inequalities, 
t(i; i') + t(j; j') ~ c(i, j Ii', j'), ... (~) inequalities, 
are fulfilled, turns out to be wrong, as is shown by the example of Fig. 4.9. It can 

Nonlinear transportation problems 
125 
Fig. 4.9 
be verified without difficulty that it holds 
c(111') = 4, 
c(212') = 6, 
c(3 I 3') = 6, 
A flow of the value 
/(1; 1') = 4, 
/(2; 2') = 2, 
/(3; 3') = 1 
c(1,2 11',2') 
= 6, 
c(1,3 11',3') 
= 6, 
c(2,3 I 2',3') 
= 8, 
c(l, 2, 311',2',3') = 8. 
satisfies, however, the conditions mentioned above, but cannot be realized. 
As far as we know, maximum flows in case of more than two types of flow can 
only be found by the use of optimization methods, i.e., by means of algorithms 
in the programs of which only little of graphs can be recognized. These algorithms 
thus become rather sophisticated. 
4.4. BIBLIOGRAPHY 
[1] Busacker, R. G., and T. L. Saaty.; Finite Graphs and Networks, An Introduction with 
Applications, New York 1965 (German; Munich/Vienna 1968; Russian; Moscow 1974). 
[2] Ermolev, Ju. M., and I. M. Mel'nik; Extremal Problems on Graphs [Russian], Kiev 
1968. 
[3] Ford, L. R., and D. R. Fulkerson; Flows in Networks, Princeton, N.J., 1962 (Russian; 
Moscow 1966). 
[4] Hu, T. C.; Multi-commodity networks flows, Operations Res. 11 (1963), 344-360. 
[5] Hu, T. C.; Integer Programming and Network Flows, Reading, Mass., 1970 (German; 
Munich/Vienna 1972; Russian: Moscow 1974). 

Chapter 5 
Communication and supply networks 
5.1. FORMULATION OF THE PROBLEM 
In contrast with the preceding chapters, where the graphs were fixed, this one is 
concerned with finding a suitable graph which serves to solve either a supply or 
a communication problem with costs as low as possible. 
Let us first set up a mathematical formulation of the supply problem. 
Given two finite sets of points of the Euclidean plane, namely the set I.l5 = {Xl' 
X 2, â¢â¢â¢ , Xm} of the producers (sources) and the set (Â£ = {Xm+1' X m+2, â¢â¢â¢ , X m+n} 
of the consumers (sinks). Both sets form together the set I of the pairwise distinct 
fixed points: I = I.l5 u (Â£. Let the producer XI' produce exactly aJl units of a well-
defined material per time unit (aJl > 0, integer; It = 1,2, ... , m). Here, a!, will be 
called the yield of the producer XI" Let the consumerXm+v have a need of bv units 
of this very material per time unit (bv > 0, integer; 'V = 1,2, ... , n). Assume the 
total demand may be satisfied by the total yield, i.e., let 
m 
n 
Ea!, ~ Eb â¢. 
!,~1 
v=1 
Further, let k(y) be a defined function for y = 0, 1,2, ... the so-called cost func-
tion with the properties: 
k(O) = 0, 
k(y) > Â° for y> 0, 
k(y + 1) ~ k(y), 
k(x + y) ~ k(x) + k(y) for x, y = 0, 1, 2, ... 
Let the installation of a supply channel of the length l, along which y material 
units at the most may be transported per time unit, entail the costs lÂ· k(y). By 
a supply network N = (I*, U; c) we mean the geometric realization of a finite 
directed graph with the set I* of vertices and the set U of arcs. To each u E U there 
is assigned a non-negative integer y = c(u), called capacity of u. We explain c(u) 
as maximally possible flux on u with the dimension "material units per time unit". 
In a supply network, each arc u has a positive geometric length l(u). 

Communication and supply networks 
127 
Consider the set 91* of all supply networks assuring the supply of the consu-
mers X"'+1, X"'+2' ... , X",+n (that is, the simultaneous supply of each of the X"'H 
with the required quantity bv) by the producers Xl' X 2, â¢â¢â¢ , X mâ¢ For these net-
works of 91*, especially x ~ x* holds. 
The total costs caused by installing a supply network N E 91* are denoted 
by K = K(N). Then, it holds 
K(N) = 1: k(c(u)) Â·l(u) with N = (x*, U, c). 
uEll 
Among the points of the set x* we distinguish between the fixed point8 (these 
form the set x) and those branching points which are not fixed points at the same 
time. The last-mentioned points are called Steiner'8 point8 (after Jakob Steiner, 
1796-1863) and are put together to form the set IS. Thus, it holds X n 6 = 0 
and X u IS = x*. 
Let 91 denote the set of all supply networks N E 91* which possess no Steiner's 
points (thus, for these networks it holds X = x*, and no branching point of the 
supply flow is allowed to occur beyond fixed points). According to whether we 
allow all networks of 91* or only those of 91 to compete, we get the first or the se-
cond problem formulated in the following. 
PROBLEM A (Unrestricted problem of the cheapest supply network). Among all 
supply networks N E 91* find those which cause the lowest total costs of installa-
tion (let the Steiner's points cause no costs). 
PROBLEM B (Restricted problem of the cheapest supply network). Among all 
supply networks N E 91 find those which cause the lowest total costs of installa-
tion. 
We subsequently come to the formulation of the communication problem. 
Given a finite set X = {Xl' X 2, â¢â¢â¢ , Xn} of points of the Euclidean plane. These 
points are to be connected by a (generally connected) network (like, for example, a 
telephone network). Let the number Xii of the telephone connections be fixed for 
each couple of points Xi, Xi' with Xii = Xii and Xii = O(i,j = 1,2, ... ,n) being sup-
posed. Let k(y) be a defined function (the so-called c08t function) for y = 0, 1,2, ... 
with the properties 
k(O) = 0, k(y) > Â° for y > 0, k(y + 1) ~ k(y), 
k(x + y) ;;;; k(x) + k(y) 
for x, y = 0, 1,2, ... 
Let the overall laying of X connections (in a ditch) of the length l involve the costs 
k(x) . l. By a communication network N = (x*, U, c) we mean the geometric reali-
zation of a finite undirected graph consisting of the set x* of vertices and the set 
U of edges on the edges u of which a capacity c is defined which assigns to each 
edge u a non-negative integer y = c(u). Here, c(u) stands for the maximum num-

128 
Chapter 5 
ber of the lines that can be laid along u. In a communication network, each edge 
is of positive geometric length l( u). 
Consider the set ~* of all communication networks assuring each of the num-
bers of connections xu. For these networks, especially x ~ x* holds. The total 
costs caused by the installation of a communication network N E ~* are denoted 
by K = K(N). Then, it holds 
K(N) =.E k(c(u)) Â·l(u) with N = (x*, u, c). 
tLEU 
Among the points of the set x* we distinguish between the fixed points (these 
form the set x) and those branching points which are not fixed points at the same 
time (as in the case of the supply networks, these points are called Steiner's 
points). These Steiner's points are put together to form the set ~. Thus, it holds 
x n e = 0, x U ~ = x*. 
Let ~ denote the set of all communication networks N E ~* which do not con-
tain any Steiner's points (it holds x = x*, and branchings are allowed only in the 
fixed points). According to whether we allow all networks of ~* or only those of ~ 
to compete, we distinguish between the two following problems. 
PROBLEM A' (Unrestricted problem of the cheapest communication network). 
Among all communication networks N E ~* find those causing the lowest total 
installation costs K (let any Steiner's points cause no costs at all). 
PROBLEM B' (Restricted problem of the cheapest communication network). 
Among all communication networks N E ~ find those causing the lowest total 
installation costs K. 
EXAMPLE 1. The four corner points of a square are to be connected by a tele-
phone network. The number of cables to be laid for each couple of points will be 
given by the following table (cf. Fig. 5.1): 
Xii 
Xl 
X2 
Xa 
X4 
Xl 
0 
1 
1 
1 
X2 
1 
0 
1 
1 
Xa 
1 
0 
4 
X4 
1 
4 
0 
In Fig. 5.1, three networks are indicated which establish the required connections. 
The first two networks ramify only in fixed points, the third one contains a branch-
ing point which is not a fixed point and thus a Steiner's point. If we denote by 
d(Xi' Xi) the Euclidean distance of the points Xi and Xi from each other, then the 
first network will cause the costs 

Communication and supply networks 
129 
ol 
oj 
cl 
Fig. 5.1 
Trying to solve this "minor" task (i.e., to find the minimum network) by calcu-
lating the costs of all possible networks, with the restriction, however, that net-
work ramifications are only allowed at fixed points (problem B) and that the 
connection between two places is realized always by a straight line, would necessi-
tate the application of computers for calculating this whole range of variants. 
EXAMPLE 2. In Fig. 5.2a, there are represented two producers and five consu-
mers of a material, with the distances between the fixed points being given by the 
following table (the producible or the required quantities are indicated at the 
vertices of Fig. 5.2a): 
Xl 
X2 
X3 
X4 
X5 
X6 
X7 
Xl 
0 
10 
6 
9 
6.5 
3 
6.5 
X2 
0 
7 
2 
4 
7 
5 
X3 
0 
5.1 
3.2 
4.3 
7.1 
X4 
0 
2.5 
6 
5.4 
X5 
0 
3.6 
4.4 
Xs 
0 
4 
X7 
0 
Figures 5.2b and 5.2c show two "feasible" networks without any Steiner's 
points, Fig. 5.2d represents a network containing two Steiner's points, with all 
demands being fulfilled. Finally, in Fig. 5.2e there is shown a network with one 
Steiner's point and one fixed point which is at the same time a branching point. 
A network as shown in Fig. 5.2f can certainly not be a minimum network, 
since material is transported in both directions along a certain segment. Of course, 
it is a network satisfying the needs of the consumers without overtaxing any 
source, and it is therefore a feasible network. 
Let us make some further observations concerning the prerequisites to be ful-
filled by the cost function k(y): 
The conditions k(O) = 0 and k(y) > 0 for y = 1, 2, ... are immediately clear. 
The monotonicity condition k(y + 1) ;;;: k(y) for y = 0, 1, 2, ... is obvious in so 

130 
Chapter 5 
x30 b,*2 
XSob3=1 
X40 bz=l 
X, 
X60 b4 =1 
X2- 02=6 
-
X, 
X5 
0,,6 
0,=5 
b4 =1 
X70 bsÂ·1 
X7 
bs=l 
01 
bJ 
2 
\ 
3 
c) 
dJ 
2 
2 
\ 
2 
2 
4 
3 
2 
eJ 
fJ 
Fig. 5.2 
far as the costs will not be lower if a greater quantity of material is sent along a 
certain segment or if more cables are laid in this same ditch. 
The condition k(x + y) ~ k(x) + k(y), called 8ubadditivity, becomes clear as 
follows: The simultaneous laying of x + y cables (or the simultaneous transpor-
tation of x + y material units) should not be more expensive than a separate 
laying of x cables and of y cables (or than a separate transportation of x material 
units and of y material units). 

Comm unication and supply networks 
131 
5.2. NETWORKS WITHOUT STEINER'S POINTS 
For treating the supply problem (problem B) implying the restriction that rami-
fications are only allowed at the fixed points, we formulate the following algorithm. 
In case of any (monotonic, subadditive) cost function, however, this algorithm 
does not yield the minimum network, but in many practical cases an optimum net-
work or also a network that can be regarded as useful. It is largely based on that of 
Busacker and Gowen formulated in chapter 2: 
Algorithm 
Let Xl' X 2, â¢â¢â¢ , Xm+n be exactly m + n pairwise distinct points of the Euclidean 
plane, and let Km+n denote the geometric realization of the complete graph with 
m + n vertices Xl, X 2, â¢â¢â¢ , Xm+n (two vertices are connected by a straight line 
each time). Let d(X;, Xi) be the Euclidean distance of Xi and Xi from each other 
with 
dii : = d(Xi' Xi) 
with dii > 0 for i =1= j and du = 0 
being true. We introduce integer auxiliary values Yii' Yji ~ 0 (i =1= j) which have 
the dimension "material units per time unit" (i.e., the dimension of a flux), which 
change in the course of the algorithm and which indicate the capacity of a supply 
network N E in when the algorithm terminates. Then, all needs of the consumers 
are satisfied without exceeding the source strengths. At least one of the two num-
bers Yii and Yii is equal to zero (that means: A flow goes through an edge of Km+n 
in one direction at the most). 
Minimum costi growth algorithm 
(i) Put Yij = Yii = 0 for all i, j = 1,2, ... , m + n (i =1= j). 
(ii) Assign to each edge (X;, Xj) the so-called cost growths k~j and kji as follows: 
If Yii = Yii = 0, let k~j = kji = k(l) dij be valid; 
If Yij > 0 (and thus Yji = 0), let k~j = (k(Yij + 1) -
k(Yij)) dii , 
k~Â· = (k(y .. -
1) -
k(y .. )) d .. be true 
l' 
I) 
I) 
I) 
â¢ 
The case Yij = 0 and Yji > 0 is transformed into that just discussed by exchang-
ing the indices. 
(iii) Regard the numbers Yij as fluxes and that on the edge (X;, Xj) with the 
flow direction from Xi to Xi' Among all directed paths going from a source not 
yet exhausted to a sink which is not yet satisfied, choose such a path for which 
the total cost growth is minimum (the total cost growth is the sum of all k~j along 
the arcs of this path). Then, increase the flow (by taking the flow direction into 
account) by the value 1 along this path. 
(iv) If not all of the needs are satisfied, then go back to (ii). 

132 
Chapter 5 
(v) Delete all edges (Xi> Xi) for which Yii = Yii = 0 holds. For each pair i, j 
(i =f= j) for which Yii > 0 holds (and thus, Yii = 0) introduce a straight-line direct-
ed canal (arc) going from Xi to Xi with the capacity Gii = Yij. 
Thus, the algorithm terminates. 
Consider the example of Fig. 5.3 relating to two sources and four consumers 
with the cost function k(y) = Vy. Let the distance matrix (dij) be given by 
Xl X2 Xa 
X4 
Xi> 
X6 
Xl 
0 
4 
V5 
VS 
5 
V17 
X2 
0 
V13 
V40 
3 
5 
Xa 
0 
5 
V34 
6 
X4 
0 
V37 
V13 
Xi> 
0 
V10 
X6 
0 
The numbers indicated at the vertices of Fig. 5.3a stand for the yields for Xl and 
X 2 and indicate the required quantities for X 3, X 4, X 5, X 6â¢ 
-
Applying our algorithm we first choose the arc (Xl' X 3), since this is the short-
est which goes from a source to a sink. For sending a flow of the value 1, costs 
which amount to {t. dl3 = Vii will be caused along this arc. 
In order to send another material unit from Xl to X 3, costs amounting to 
(Vi - 1) dl3 = (V2 - 1) V5 are necessary. One can easily see that this is also 
a least expensive path going from a non-exhausted source to an unsatisfied sink. 
Now, X3 is satisfied. The next least expensive path going from a source to a 
sink turns out to be the arc from Xl to X4 entailing the costs Vi. du = VB. 
Again the arc going from Xl to X 4 turns out to be the next least expensive path, 
but now entailing the costs (V2 - 1) VS. 
Now, source Xl is exhausted, and the demand of X 4 cannot be satisfied directly 
from Xl. 
The next cheapest path going from a source which is not exhausted to a sink 
which is not satisfied is the arc (X2' X 5). Two material units can be sent one after 
the other along this arc. The intermediate situation represented in Fig. 5.3b 
follows. X 4 and X6 remain as unsatisfied sinks, and the only non-exhausted source 
which remains is X 2â¢ 
The next cheapest path is (X2' Xa, Xl, X 4 ) entailing the costs 
V13 - V5(V2 - 1) + VS(V3 - V2). 
The result is shown in Fig. 5.3c. 

Communication and supply networks 
133 
2 
Xz 
â¢ 
6 
01 k!yl=Vy 
6 
dlkly)=Yy 
Fig. 5.3 
2 
, ,;(3 
X~ 
2 
2 
â¢ 
6 
blk(ykVy 
3 
3 
4-
2 
2 
6 
2 
e) k(y)=y 
3 
4-
o 
2 
1 
2 
6 
c) k(y)=Vy 
The next cheapest path which results is (X2' X 3, Xv X 6 ) with the costs 
yi3(Y2 - 1) - y5 + yn. 
Now, all sinks are satisfied, the algorithm terminates (cf. Fig. 5.3d). 
3 
z 
o 
1 
The resulting network, however, is not optimal, since it is still possible to send 
a flow of the value 1 along the path (X2' X 5 , X 6 , Xl) from the source X 2 to the 
source Xl. The cost saving achieved in this case then amounts to exactly 
Y17 - Y 
10 -
3 (Y3 - Y2) > o. 
From this result we conclude that it is expedient to verify at the end of the algo-
rithm whether there is still a path with negative costs going from a non-exhausted 
source to an exhausted one. In case there exists such a path, send one material 
unit along it. Whether an optimal network is always obtained in this way, how-
ever, is to be doubted. 
If we had chosen k(y) = y as cost function, i.e., a linear function, then the net-
work represented in Fig. 5.3e would have resulted as optimal network. But in 
practice, linear cost functions are unreal, since the simultaneous laying of supply 

134 
Chapter 5 
channels of the capacities x and y would be as costly as the laying of one channel 
with the total capacity of x + y. 
For the communication problem also, an algorithm can be found which is 
similar to the algorithm given for the supply problem. The steps to be performed 
are all the same, but we must start out from the complete graph with n vertices. 
When searching for paths causing, if possible, a small increase in costs, it is not 
necessary for us to search among all paths going from a non-exhausted source to 
an unsatisfied sink, but among all paths between two vertices each time for which 
all telephone cables are not yet realized. 
EXAMPLE. In the case of example 1 given on page 128, the following network 
could be generated for a cost function k(y) = fij (the side length of the square is 
set equal to 1): 
First, say (X2' Xa) is realized (but not necessarily) with the costs Vi = 1. 
-
Then, say (Xl' X 2) is realized with the costs VI = 1. 
-
After this, the connection between Xl and Xa is realized along the broken 
line Xl' X 2, Xa with the costs (V2 - Vi) + (V2 - Vi) = 0.828 ... 
-
After this, the direct connection between Xl and X 4 with the costs 1 could be 
chosen. 
-
Then, take the connection from X 2 to X 4, and that, by embedding the broken 
line X 2 , Xl> X 4 with the costs V2 - 1 + y3 - Y2 = 0.732 ... 
-
Now, we would realize one after the other the last four remaIning connections 
between Xa and X 4 along the broken line X 4, Xl' X 2, Xa, and the first one of the 
four broken lines would cause the costs 
V3 - Y2 + V4 - y3 + V3 - V2 = 0.90 ... 
whereas the direct connection from Xa to X 4 would cause the costs 1. 
It is immediately clear that the network resulting in this way is rather expensive. 
If the four connections from Xa to X 4 had not been embedded one after the other 
at the end, but simultaneously, then the direct connection would have been cho-
sen, since this one costs exactly 2 (for the four cable connections) whereas the 
laying of the four connections via Xl and X 2 causes the costs 
2(V6 - V2") + fi - V3 = 2.98 ... 
From this, it can be seen that, in general, also in the case of communication net-
works no minimum network will be obtained (by applying the algorithm). 
The reader may try to find the minimum network (without Steiner's points) for 
our example with the cost function k(y) = Vy. 

Communication and supp y networks 
135 
The following theorems, however, may be proved: 
THEOREM 5.1. If the cost function is linear (i.e., k(y) = ay), then the aZuorithm 
yields a minimum network both for the case of a supply problem and for that of a 
communication problem. If all selection possibilities left open by the aZuorithm are 
realized, then all optimal supply networks will be obtained as well. 
This statement can be proved by means of the considerations made in chapter 2 
in connection with the algorithm of R. G. Busacker and P. J. Gowen. 
THEOREM 5.2. If the cost function is quasi-constant (i.e., k(O) = 0, k(y) = a 
= const for y > 0), then the aZuorithm yields a minimum network for the case of a 
communication problem (problem B'), and for that of a supply problem (problem B) 
it yields a minimum network if each of the producers is capable of satisfying the total 
need, i.e., if 
m 
ap :;::; }; b, 
for 
fl = 1, 2, ... , m 
v~l 
holds. 
The minimum network obtained is circuit-free in both cases. As for the supply 
network, each (connected) component of the minimum network still contains exactly 
one source. 
,REMARK. Even if not all of the producers are capable of satisfying the total 
demand, the algorithm yields a circuit-free network in the single components of 
which several sources may be found. Whether the supply network obtained is 
optimal in this case, however, is not known to us. 
X1 
z 
3. 
Fig. 5.4 
EXAMPLE. Consider the example 2 (Fig. 5.2a) with the distances given in the 
table on page 129. Let branchings of the network be allowed only in fixed points 
and the cost function quasi-constant. Then, the network represented in Fig. 5.4 is 
optimal. The number above each arc indicates the flux on this arc, and the number 
below shows in what step this arc has been added. 

136 
Chapter 5 
In the case of the supply problem (B) with exactly one source or in the case of the 
communication problem (B') with quasi-constant cost function each time, both 
problems turn into that of the determination of a minimum spanning tree in a 
length-valuated complete graph G. Here, the algorithm becomes considerably 
simpler. We give an algorithm which yields a sequence {H;} of trees and, when 
breaking it off, just a minimum spanning tree (cf. H. Sachs [8]). 
Algorithm for determining a minimum spanning tree 
(i) Let H be a graph consisting of any vertex of G (for example, of the only 
source Xl in problem B). 
(ii) Among all edges of G with one of its end-points lying inH and the other one 
lying in G, but not in H, choose an edge with minimum length; let u be this edge. 
Add u and that end-point of u which does not lie in H to H. 
(iii) If H does not contain all vertices of G, go back to (ii). 
The algorithm terminates. 
Still other algorithms have been developed for determining minimum spanning 
trees (in not necessarily complete graphs) which we shall not discuss here 
(further algorithms may be found, for example, in [1, 7, 8, 9]). Of course, it is not 
necessary to start out from a complete graph. Using the above algorithm, minimum 
spanning trees may also be determined in any edge-valuated connected graphs. In 
this ease, use only a length valuation 00 instead of edges not existing originally. 
The case of quasi-constant costs is of interest in so far as it enables us, byemploy-
ing the costs for such a network, to estimate the costs for a network when these 
costs are not quasi-constant. 
Estimation of the optimal network costs. Given the problem B or B' (i.e. 
without any Steiner's points), with only one source being available in the case of 
the supply network. Let the cost function be denoted by k(y). Further, let Lo' be the 
length of a minimum spanning tree No'(l, U') (in a graph with given fixed points). 
Consider a minimum network with quasi-constant costs k'(y) = k'(1) = k' for 
y > O. Such a network thus causes the costs k' . Lo'. Among all supply networks 
N(l, U, c) E iJ( let No = No(l, uo, co) be an optimal network (which, in general, 
is not known to us and only difficult to calculate in contrast to No'). Thus, it holds 
K(No) = L k(co(u)) l(u) = min L k(c(u)) l(u). 
UEU, 
NE?R UEU 
From this, the following two inequalities result: 
On the one hand, it holds 
K(No) = min L k(c(u)) l(u) ;2 L k(c(u)) l(u) 
NE?R UEU 
UEU, 
;2 k(z) L l(u) = k(z) Lo'Â· 
UEU,' 

Communication and supply networks 
137 
n 
In the case of the communication problem, it holds z ~ }; Xi} and in that of the 
n+l 
i,j~l 
supply problem, it holds z ~ }; b,. The first inequality arises from the fact that 
,~1 
the network No' must also be taken into consideration when forming the mini-
mum. 
On the other hand, it holds 
k'Â· Lo' = k' min}; l(u) ~ k' }; l(u) ~}; k(c(u)) l(u) = K(No). 
NE\J1 UEU 
UEUo 
UEUo 
From both inequalities, it follows 
o ~ K(No) -
k'Â· Lo' ~ (k(z) -
k') Lo'. 
If k' and k(z) do not deviate too much from each other, then the latter inequality 
yields an estimation of the mistake that can be made at worst if the spanlling 
tree of minimum length is chosen instead of the real cost minimum network (which 
is, however, only difficult to obtain). 
5.3. NETWORKS CONTAINING STEINER'S POINTS 
This section is devoted to the problems A and A', which means that network 
branchings are allowed to occur also beyond the fixed points. Let us first give a 
theorem by means of which an algorithm is set up which makes it possible to find 
the optimal position of the Steiner's points, but this only under the strongly re-
stricting condition that the structure of the network is given in all cases. That 
means that we have to indicate the adjacency relations (between fixed and fixed 
points, between Steiner's and Steiner's points and between fixed and Steiner's 
points), and we are then able to optimize the geometry of the network (in the case 
of an optimal solution, what are then the distances of the "movable" Steiner's 
points from each other and from the fixed points adjacent to them?). 
We shall discuss in great detail only the case of a road network, that is, the case 
causing quasi-constant costs. The case with costs which are not quasi-constant 
can also be treated (quite analogously), but the interested reader's attention will be 
directed to the bibliography [5, 6]. 
THEOREM 5.3. Given the problem A with quasi-constant cost function and one 
source (i.e., the problem of determining a shortest network connecting n + 1 fixed 
points with each other, with Steiner's points being allowed to occur). Then, any optimaZ 
network No * has the following properties: 
1. No * contains no cycles (circuits). 
2. Each Steiner's point has the degree 3. 
3. Two segments meeting in a Steiner's point form an angle of 120Â°. 

138 
Chapter 5 
4. Two segments meeting in a fixed point form an angle of at least 120Â° (thus, also 
a fixed point has the degree 3 at the most). 
5. If n + 1 is the number of the fixed points of No*, then there exist n -
1 Steiner's 
points at the .most. There exist exactly n -
1 Steiner's points if and only if each fixed 
point in No * has the degree 1. 
Proof. 
1. Obviously, this statement is true since otherwise, it would be possible to 
reduce the total length by omitting any edge of the circuit. 
2. If a Steiner's point S had the degree 1, then it would be possible to omit the 
edge incident with S, which would also lead to a reduction of the total length. 
If a Steiner's point S had the degree'2, that would mean that, because ofthe mini-
mality of No*, S would lie on that straight line which connects the two neigh-
bouring points of S with each other. In this case, however, S could be omitted 
without causing a loss. 
Suppose S to be in the neighbourhood of at least four vertices. Then, one encoun-
ters, during the cyclic traversing of the edges incident with S, two successive seg-
ments SX and S Y which form an angle (3 of 90Â° at the most. 
If (3 < 90Â°, the total length is reduced by modifying No* as follows. In the 
triangle SXY, the interior angle at S, i.e., (3, is maximal, since the segment XY 
is not shorter than each of the two segments SX and SY because of the mini-
mality of No *. If we draw the perpendicular to the segment S Y from X and replace 
the segment SX by the perpendicular without changing all else, then a shorter 
network results, which contradicts the minimality of No*. 
We may thus assume that the smallest of all angles at S is exactly 90Â° (i.e., 
exactly four vertices are lying in the neighbourhood of S and all angles at S are 
90Â° each). Look at Fig. 5.5. Let X, Y, Z, U be the four neighbours of S, and also 
u 
Fig. 5.5 

Communication and supply networks 
139 
let X be the neighbour lying nearest to S and Xl' X2, X3, "new" vertices lying on 
the segments SY, SU, SZ which have a distance from S of exactly SX. Thus, X, 
Xl, X2, X3 form a square. An elementary calculation reveals that, when omitting 
XS, XIS, X2S, X 3S and adding XISll X2S11 SIS2, XS2, X3S2 (with XISI, X 2SI, 
XS2, X3S2 having all the same length), a network is obtained shorter than No* 
(by exactly 4 - V"6 - V2), which contradicts the minimality of No*. This proves 
assertion 2. 
3. Let So be a Steiner's point in an optimal network with the three neighbour-
ing points Xl, X 2, X3. For any point S lying in the interior of the triangle Xll X 2, 
X 3, we denote the "costs" of S by K(S) = SXI + SX2 + SX3. Obviously, 
K(S) becomes minimum exactly for S = So. If we denote by (Xi, Yi) the co-ordi-
nates of Xi (i = 1,2,3) in a Cartesian system of co-ordinates, then we get as 
necessary minimum condition for the co-ordinates X, Y of the Steiner's point: 
3 I; 
X -
Xi 
= 0, 
;=1 V(X -
Xi)2 + (y -
Yi)2 
An elementary calculation, though involving a lot of writing, proves assertion 3. 
4. This assertion can be proved analogously to the procedure described for asser-
tions 2 and 3. 
5. If t is the number of the Steiner's points (n + 1 was the number of the fixed 
points), then there results for the number of the edges on the one hand: 
number of the edges = n + t 
since the network is a circuit-free connected graph (i.e., a tree), and on the other 
hand: 
n+l 
t 
2 X number of the edges = I; v(X i) + I; v(Sj) 
i=l 
i=l 
if we denote the fixed points by Xi and the Steiner's points by S;, as happens 
when counting the degrees of all vertices. From both equations it results 
1 n+l 
1 
t 
1 
3 
n + t = -
I; v(Xj) + - I; v(Sj) ~ -
(n + 1) + - t, 
2 i=1 
2 i=l 
2 
2 
since the fixed points have at least the degree 1 and the Steiner's points exactly 
the degree 3. Hence it follows directly t ~ n -
1 (and t = n -
1 if there is a 
sign of equality in the above estimation, i.e. if each fixed point has the degree 1). 
This proves theorem 5.3. 
REMARK (cf. Fig. 5.6). If the cost function is not quasi-constant any more and a 
cheapest network is to be found connecting the three points Xl' X 2, X3 with each 
other (here, let the laying of the segment SXj cause just the costs kjd(S, Xj)), then 
a theorem similar to 5.3 holds. The properties 1 and 2 are valid, but at one Steiner's 

140 
Chapter 5 
point the 1200 relation does not necessarily occur, and it holds there: 
kl 2 -
k22 -
k32 
cos <Xl = --=-----"--::.... 
2k2k3 
(0) 
This relation is true correspondingly for <X2 and <X3 by cyclic exchange. An addi-
tional condition (which is always met in practice) has to be fulfilled by the cost 
function, namely k2(x + y) < k2(x) + k2(y) (a linear cost function does not meet 
this requirement!), otherwise it may happen that the degree of a Steiner's point 
is higher than 3. 
Now, the question arises of how the Steiner's point can be found (in the easiest 
way possible) in order to construct a shortest network that connects three fixed 
points with each other. Since the procedure to be described for the case with three 
fixed points may also be applied to the case with more than three fixed points, we 
shall explain this in detail. 
Zl y __ 
_ 
Fig. 5.6 
Fig. 5.7 
Construction of the Steiner's point (cf. Fig. 5.7) 
1. The (optimal) Steiner's point S lies on a circular arc which is a part of the 
circumcircle of the equilateral triangle X 2, X 3, Zl. That this assertion is true fol-
lows directly from the theorem of the angle at the circumference since just in this 
case, the interior angle S takes on a value of 1200 (of course, S lies also on a cir-
cular arc which is a part of the circumcircle of the equilateral triangle Xl, X 2 , Z3 
and X 3, Xl' Z2, respectively). 
2. The (optimal) Steiner's point S lies on the connecting line going through Xl 
and Zl (and, of course, also on the straight line going through X 2, Z2 and X 3, Z3). 

Communication and supply networks 
141 
The validity of this assertion follows directly from the Ptolemy's theorem: In an 
inscribed tetragon, the SUIll of the products of the opposite sides equals the product 
of the diagonals. Thus, for our case it holds 
d(S, X 3) d(X2' Zl) + d(S, X 2) d(X3' Zl) = d(X2' X 3) d(S, Zl). 
Because of the relation d(X2' X 3) = d(X2' Zl) = d(X3' Zl) it follows 
d(S, X 3) + d(S, X 2) = d(S, Zl). 
Obviously, the sum d(S, Xl) + d(S, X 2 ) + d(S, X 3) becomes minimum if and only 
if S lies -
as asserted -
on the connecting line between Xl and Zl. 
Moreover, it is seen that in the minimum case, the network spanned by the 
points Xl' X 2, X 3, So has the same length as the segment XIZI. We are thus pro-
vided with the basis for determining the exact position of the Steiner's points in 
the case of any number of fixed points (with the topological structure of the net-
work being"given). 
REMARK. The construction given above may also be applied to the case of not 
quasi-constant cost functions, but in the place of step 1, do not construct an 
equilateral triangle X 2, X 3, Zl, but a triangle which just realizes the relation (0) 
because of the theorem of the angle at the circumference. This can be achieved 
by choosing Zl such that the segments X 2X 3, X 3Zl, ZlX2 are to each other as 
kl
: k2 : k3 (cf. Fig. 5.6). Moreover, it can be shown that the optimal point So also 
lies on the connecting line between Xl and Zl and that the network costs kld(S, Xl) 
+ k2d(S, X 2) + k3d(S, X 3) are equal to kld(Xl' Zl). The interested reader is 
recommended to verify these properties. 
We shall now become acquainted with an algorithm which makes it possible, 
in the case of a given structure of the network, to determine the position of the 
Steiner's points so that a minimum network arises among all networks having this 
structure. 
A problem not yet solved is how to decide from what structure one has to start 
out in order to solve problem A. To find, among the great variety of all "possible 
structures, such one which solves problem A, would not be possible without per-
forming a great deal of work. 
In [2], a model of analogy for treating the road network problem by way of expe-
riment is proposed by R. Courant and H. Robbins. This model (cf. Fig. 5.8) con-
sists of two parallel transparent plates which are connected with each other by 
bars perpendicular to them. Each bar corresponds to a fixed point, the ratios of 
the distances between the bars conform with the ratios of the distances between 
the respective fixed points. If this model is plunged into a soap solution and then 
taken out, the soap film forms a connected system of planes perpendicular to 

142 
Chapter 5 
the plates. Seen from the top, there will develop a network that can easily be meas-
ured after being photographed. A repetition of this experiment should reveal a 
certain structure turning up most frequently. Then, an approximated solution 
(often called "suboptimal") is found on the basis of this predominant structure. 
Fig.5.S 
Algorithm of Z. A. Melzak (for optimizing the position of the Steiner's points in 
case of a given network structure) 
Let us explain the algorithm by means of an example. The size of the example 
chosen should suffice to illustrate how any other case is to be treated. The exact 
algorithm can be read in E. N. Gilbert and H. O. Pollak [4]. 
Consider the graph of Fig. 5.9a. The fixed points Xl' ... , X6 form the corner 
points of a regular hexagon, the fixed points X 6 , X 7, Xs as well as X 5, X 6 , X 7 form 
the corner points of an equilateral triangle each time. Find among all networks 
having the structure indicated in Fig. 5.9a a network of minimum total length 
(by determining the optimal position of the Steiner's points). 
This task can be decomposed into two minor ones (C) and (D) by splitting up 
the vertex X 5â¢ Combining the solutions of (0) and (D) leads to a solution of the 
original task (Fig. 5.9b). 
In the following construction, we use -
without proving it -
the fact that if 
there exists a solution of task (e), then the Steiner's points 8 1, 8 2, 8 3 belong to the 
convex hull of the fixed points Xl, ... , X 5â¢ 
First, find such a Steiner's point which is connected with two fixed points, say 8 1. 
If we knew the exact position of the Steiner's point 8 2, we would be able to 
determine the exact (that is, the optimal) position of 8 1 by applying the construc-
tion rule given on page 140. However, we can certainly construct the point Zl as 
third point of an equilateral triangle together with the other two corner points 
X3 and X 4 (cf. Fig. 5.9c). Because the sum of the lengths of the three segments 
8 28 1, X 38 l , X 48 l equals the length of the segment 8 2Zl, as already stated, Zl 
stands vicariously for the two vertices X3 and X 4, and the optimal network of 
task (e) is exactly as long as that of task (el ). 

Communication and supply networks 
143 
oj 
c. 
/3 
/ 
c) 
z 
d 
\ 

144 
Chapter 5 
Now, we consider Zl to be a fixed point and search for a Steiner's point again 
lying in the neighbourhood of two fixed points. This is, say, S2 with the two 
neighbouring points Zl and X 2â¢ Construct Z2 as third corner point of the equi-
lateral triangle with the other two corner points Zl andX2 (cf. Fig. 5.9d). If we knew 
the exact position of S3' we would be able to construct S2. If we consider Z2 vica-
riously for the fixed points Zl and X 2, then it remains to determine the optimal 
position of the Steiner's point S3 with the three fixed points Xl> X 5c and Z2 as its 
neighbours. According to the construction rule for determining the optimal posi-
tion of a Steiner's point lying in the neighbourhood of the three fixed points 
(cf. Fig. 5.7), we find S3' (the optimal point for S3) on the arc segment.Â£Z2 of the 
circumcircle of the equilateral triangle with the corner points Z3, Z2, Xl and also 
on the connecting line between Z3 and X 5c (Fig. 5.ge). 
__ 
Now, we find S2' as intersection point of the arc segment X 2Z1 of the circum-
circle of the equilateral triangle with the corner points X 2, Zl, Z2 and the straight 
line going through the points Z2 and S3' (cf. Fig. 5.9f). Finally, construct Sl' 
analogously (Fig. 5.9g). Thus, task (C) is solved. 
The reader is recommended to solve task (D) by himself. Figure 5.9h illustrates 
the result of the combination of the solutions obtained for task (C) and task (D). 
Although the network thus found is certainly not the shortest one among all 
networks connecting the fixed points Xl' ... ' Xs (as the segments X 5S3' and 
X 5S5' form an angle of less than 120Â°, which is in contradiction to theorem 5.3, 
property 4), it is, nevertheless, minimum on condition that the structure indicated 
in Fig. 5.9a is realized. 
It is not always possible to realize a given structure in an optimal way. This 
--
holds when the arc segment X 2X 3 of the circumcircle of the equilateral triangle 
with the corner points Zl, X 2 , X3 does not intersect the straight line going through 
Zl and Xl (cf. Fig. 5.7). 
If a given structure cannot be optimally realized, then this will be revealed in 
the course of the algorithm. 
We have already mentioned that the algorithm discussed just now may be 
extended to the case of not quasi-constant costs, but this, however, is on condition 
that the relation 
k2(x + y) < k2(x) + k2(y) 
for x, y > 0 
holds. This condition assures that exactly three edges meet together in a Steiner's 
point (task!). 
The auxiliary vertex Zi which is to be constructed in each case is then not the 
third corner point of an equilateral triangle, but of a triangle which resembles a 
triangle with the side proportions of kl : k2 : k3' when kl, k2' k3 are the costs per 
unit on the segments S'XI and S'X2 and S'X3, resp. (cf. Fig. 5.6 and also p. 140). 

Communication and supply networks 
145 
5.4. INFLUENCE EXERTED BY THE COST FUNCTION 
ON THE STRUCTURE OF THE OPTIMAL NETWORK 
Besides the general monotonicity and subadditivity conditions for the cost func-
tion, we have treated so far, in the essence, only the case of a quasi-constant cost 
function and the case in which a triangular inequality is valid for the squares of 
the cost function, namely 
k2(x + y) < k2(x) + k2(y) 
for any x, y > o. 
In most cases, this latter condition turned out to be satisfied in the practical 
examples concerning heat supply networks and also cable networks which we have 
dealt with. 
Now, let us make a few more statements for the case where, in addition to the 
general conditions to be met by the cost function, we require this function to be 
concave, thus 
k(x + 1) -
k(x) ;;::: k(x) -
k(x -
1) 
for x = 1,2, ... 
holds. This condition applies in particular also to linear cost functions although, 
as already mentioned above, linear cost functions do not really occur in practice. 
However, the case of affine-linear functions, which are more likely in reality, is in-
cluded, i.e. 
k(x) = a + bx for x > 0 (a, b constants). 
For example, in the case of heat supply problems we have (usefully approximated) 
cost functions of the form 
k(x) = axb + c for x> 0 (a, c > 0; 0 < b < ~) 
which even meet the requirement k2(X + y) < k2(x) + k2(y). That, however, 
means that we can use for them all considerations made in the preceding section. 
Now, the following theorem may be proved: 
THEOREM 5.4. Let the cost function be concave. 
1. In the case of either problem A or B, there exists an optimal network No which 
is a forest (and thus cycle-free). If moreover each of the producers is able to satisfy the 
total demand of all consumers (i.e., with only one source available), then each compo-
nent of the forest contains one producer. 
2. In the case of either problem A' or B', there exists an optimal network having 
the following property: 
n 
If we consider only the partial graph Gi which realizes the Zi = 1.; Xii connections 
j~l 

146 
Chapter 5 
of the fixed point Xi with the other fixed points, then G j constitutes a cycle-free sub-
network of the optimal network. 
Proof. 
1. Consider an optimal supply network No = (x, Uo) containing a minimum 
number s of cycles. For s = O,there is nothing to prove. 
In the following, assume No to be chosen such that s is minimum with s ~ 1. 
Orient the edges of No so that the orientation corresponds with the flowing direc-
tion on this edge (note that an edge exists only if there is a non-vanishing flux 
on it). 
We denote by ft any cycle of NoÂ· Certainly, ft is not a circuit, i.e., no cycle of 
which the arcs are oriented in the same direction, since otherwise it would be 
possible to lower the flow along ft and thus also the costs. This, however, would be 
in contradiction to the cost minimality of No. Let ft+ and ft- be the sets of arcs of ft 
which are equally and oppositely directed to ft, respectively, and let s+ and S- be the 
minima of the flux quantities going through the arcs of ft+ and ft-, respectively. 
We transform No to Nt in the following way: In each of the arcs of ft+, the flux 
is increased by t, in each of the arcs of ft-, it is reduced by t, and on all other arcs 
the flux remains unchanged. In doing so, we confine t to the range -S+ ~ t ~ S-. 
The costs K(Nt) for the network formed in this way amount to 
k(Nt) = I: k(xy) l(y) + I: k(xy + t) l(y) + I: k(xy -
t) l(y). 
YEU, \1' 
YEI'+ 
yE,,-
Here, we denote by Xy the flux on the edge y in the direction of the orientation of 
u. Since k(x) is concave and l(u) > 0, also K(Nt) is a concave function with re-
spect to t (task!). Therefore, because of -S+ ~ t ~ S-, K(Nt) assumes its mini-
mum at a limit point t', i.e., either for t = -S+ odor t = S-. Consider the network 
Nt': In Nt" we delete all arcs on which no flux exists any more. For the choice 
of t', such an arc exists at least on the cycle ft. 
A network results satisfying all demands, and it contains one cycle less than 
No and causes costs not higher than those of No. This, however, contradicts the 
assumption that No had been chosen as optimal network with a minimum number 
1 2; 1 of cycles. 
The second part of statement 1 may be proved in a similar way. Consider in-
stead of a cycle ft a sequence of arcs (i.e., a chain) between two producers contained 
in one component. Thus, the proof of statement 1 is complete. 
To prove statement 2 of theorem 5.4 may be left to the reader. 
If we suppose strict concavity (which is, however, not fulfilled in case of affine 
functions), then the proof makes clear that for the case of either problem A or B, 
each minimum network is cycle-free. 
We give another example which shows that if the cost function is not concave, 
the optimal network is, in general, not circuit-free. 

Communication and supply networks 
147 
EXAMPLE. Let Xl' X 2, X3 be the corner points of an equilateral triangle, let 
. 
. 
[X+2] 
the cost functIOn k(x) be gIven by k(x) = -3- . Here, let [z] mean the largest 
integer which is not larger than z. Let the number of the telephone connections 
to be realized be given by the following table: 
Xl 
Xl 
X3 
Xl 
0 
1 
1 
X 2 
1 
0 
14 
X3 
1 
14 
0 
X3 
2 
X2 
~ 
3 
Fig. 5.10 
X, 
Xz 
x, 
2 
X3 
oj 
bJ 
Then, Fig. 5.10a represents the only optimal network. In addition, it is not cycle-
free. 
The following example shows that even if no Steiner's points are allowed it 
cannot be ensured that the optimal network is circuit-free. 
EXAMPLE. The producer Xl with the yield 4 will provide for two consumers X 2 
and X3 having a need of 1 and 3, respectively. Let branchings of the network be 
allowed only at fixed points. Let the distances of the fixed points from each other 
be d(XI' X 2 ) = d(X2' X 3 ) = 1, d(XI' X 3 ) = 1.5. Let the cost function k(x) be given 
by k(l) = k(2) = 1, k(x) = 2 for x = 3,4, ... The reader may show that the net-
work represented in Fig. 5.lOb is the only optimal network. 
We thus conclude this chapter with these considerations. The reader wishing 
to become acquainted with further results in more detail is referred to the works 
in [3, 4, 5, 6]. 
5.5. BIBLIOGRAPHY 
[1] Berge, C., und A. Ghouila-Houri: Programme, Spiele, Transportnetze, Leipzig 1969. 
(Translated from French.) 
[2] Courant, R., und H. Robbins: Was ist Mathematik?, 3. edn., Berlin/Heidelberg/New 
York 1973 (Translated from the Englisch). 

148 
Chapter 5 
[3] Gilbert, E. N.: Minimum Cost Communication Networks, Bell Teleph. Lab. 1966. 
[4] Gilbert, E. N., and H. O. Pollak: Steiner minimal trees, SIAM J. Appl. Math. 16 
(1968), 1-29. 
[5] Hutschenreuther, tH.: Eine Losung des Steiner-Weber-Problems und ihre Anwendung 
in der Praxis, Diss. A TH Ilmenau, 1972. 
[6] Melzak, Z. A.: On the problem of Steiner, Canad. Math. Bull. 4 (1961),143-148. 
[7] Noltemeier, H.: Graphentheorie mit Algorithmen und Anwendungen, Berlin/New 
York 1976. 
[8] Sachs, H.: Einfiihrung in die Theorie der endlichen Graphen, Teil I, Leipzig 1970. 
[9] Tinhofer, G.: Methoden der angewandten Graphentheorie, Vienna/New York 1976. 

Chapter 6 
The assignment and the travelling slVesman problems 
In this chapter, we wish to treat two discrete optimization problems. However, 
we shall not conceal that only a small insight into the solution methods can be 
given, since today there already exist such a variety of different methods and algo-
rithms based on them for solving especially the travelling salesman problem that 
it is impossible at present to make a final evaluation. 
It is well known that a large number of discrete optimization problems exist. 
Of course, there was good reason for us to choose just the assignment and' the 
travelling salesman problems. For the solution of the assignment problem as 
we shall describe it (using the so-called Hungarian method), theorems from the 
field of graph theory (theorem of Ford and Fulkerson, cf. chapter 1; theorem of 
Konig, Ore and Hall, cf. Sachs [11]) will be applied, and the travelling salesman 
problem is a perfectly classical problem of graph theory, as we shall see. 
Paragraph 6.1 will be devoted to the assignment problem, section 6.2 to the 
travelling salesman problem. We wish to present there two solution methods, 
namely a branch-and-bound algorithm and a heuristic one. In section 6.3, we 
only want to give the interested reader a short survey of the literature used. 
6.1. 
THE ASSIGNMENT PROBLEM 
6.1.1. Formulation oj the problem 
Let us explain the problem by means of an example. For the fulfilment of n 
diverse tasks Ai there are available n machines Mi each of which can be employed 
to fulfil each of the tasks. For each pair (i, j) of natural numbers it is known that 
the expenditure dii ~ 0, i, j = 1,2, ... , n (e.g., in money or time units) is required 
for the machine Mi to fulfil the task Ai' Now, find such an assignment of the 
machines to the tasks (here, each machine will fulfil exactly one task) that the 
total expenditure becomes minimum. 
Using the terminology of graph theory, the following problem is to be solved: 
Given a directed completely bipartite graph G = G(I u ID; U) with the n 
vertices Xl' ... , Xn of one class and the n vertices Y I , ... , Y n of the other class, 

150 
Chapter 6 
as well as with the n2 arcs (Xi> Yj ), i, j = 1,2, ... , n. Further, let an arc function 
d be given which assigns to each arc u E U a non-negative integer d(u). Find a set 
of n independent arcs (i.e., a linear factor), thus a set of n arcs so that each of the 
2n vertices is incident with exactly one arc, with the sum of the valuations d(u) 
of these n arcs being minimum. 
Being an integer optimization task the assignment problem takes on the form 
n I; dUxij --7 min! 
i,j=l 
with the constraints 
n 
I;Xij= 1, i= 1, ... n. 
j=l 
n 
I; xii = 1, j = 1, ... , n, 
i=l 
xUE{O,l}, i,j=1, ... ,n. 
The constraints assure that in each row and in each column of the solution 
matrix X = (Xij)i,j=l, ... ,n there is exactly one 1, with the other numbers all being 
zeros, that is, X is a permutation matrix. 
. 
In 'principle, the matrix D = (d ij)i,j=l, ... ,n would be allowed to have some ele-
ments of the "value" of infinity. For the problem set at the beginning, this would 
mean drs = 00: the task Ar cannot be treated by the machine Ms. But if D has 
a too large number of elements of the value of infinity, then the finiteness of the 
minimum value of the objective function cannot be guaranteed any more. 
6.1.2. A solution algorithm for the assignment problem 
Before being able to explain the algorithm, we have to give a few definitions. 
DEFINITIONS. Two elements Cij and Ckl of a matrix 
C = (cÂ·Â·)Â· . 
tJ 1,,1 = 1, ... ,n 
are called independent if i =1= k and j =1= 1. A set 0 of elements of C is called indepen-
dent if two elements of 0 at a time are independent. A set 0 of elements of C is 
called independent zero-set if it is independent and if each element of 0 is of the 
value zero. 0 is called maximum zero-set if it is an independent zero-set with maxi-
mum number of elements. 
A set 9C = 3 u S consisting of a set of rows 3 = {Zi" Zi" ... , Zi.l of z rows, 
and of a set of columns 6 = {SJ" Si,' ... , Sj,} of s columns of a matrix C is called 
zero-covering of C if, after having removed the rows from 3 and the columns from 
6, no zero-element remains any more in C. 9( is called minimum if among all 
zero-coverings z + s is minimum. 

The assignment and the travelling salesman problems 
151 
When solving the assignment problem by means of the Hungarian method, the 
following three partial tasks have to be solved one after the other: 
a) transformation of a matrix to reduce the value ofthe objective function and to 
increase the number of the zeros; 
b) determination of a maximum zero-set in the transformed matrix; 
c) determination of a minimum zero-covering for the maximum zero-set deter-
mined in b); 
In order to substantiate theoretically the step from b) to c), we prove the follow-
ing theorem. 
THEOREM 6.1. In a matrix C = (Ciikj=I, ... ,n, the maximum number 01 inde-
pendent zeros equals the minimum number 01 rows and colums alter the removal 01 
which the matrix contains no zero-elements any more. 
Proof. Consider the bipartite graph G = (,8, S, U). Here, the set 3 of vertices 
of the one class of the bipartite graph G consists of n "row vertices" ZI, ... , Zn, 
and the set S of vertices of the other class of G is composed of n "column vertices" 
SI, ... , Sn. An edge u = (Zj, Si) is added to U if and only if the element Cii of the 
matrix C is a zero-element, i.e., if cii = 0 holds. 
Obviously, a set of pairwise non-adjacent edges of G corresponds to any in-
dependent zero-set in C, and vice versa. Thus, a maximum set ~ ~ U with 
~ = {(Zi" Si,)' ... , (Zit' Si,)} of pairwise non-adjacent edges of G corresponds to a 
maximum set 0 = {qid,' ... , qioi,} of independent zeros, and vice versa. 
Let us say that a set im of vertices of G disconnects the sets 3 and S of vertices 
from each other if, after having removed the vertices of im from G, the residual 
graph contains no more edges. It can directly be seen that a zero-covering 91 of C 
corresponds to any set disconnecting the sets 3 and S of vertices from each other, 
and vice versa and that, in particular, a minimum zero-covering 91 of C corre-
sponds to a minimum set im of vertices disconnecting 3 and S from each other, and 
vice versa. But now, the following theorem of D. Konig holds the proof of which may 
be found in [11]. 
THEOREM 6.2. In a bipartite graph G = (I, ID, U), the maximum number 01 
pairwise non-adjacent edges equals the number 01 vertices 01 a minimum set 01 vertices 
disconnecting I and ID Irom each other. 
Figure 6.1 gives some illustration of this latter theorem. 
By applying it, one will also be able to prove theorem 6.1. The reader must make 
it clear to himself in detail. 
First, we solve the three partial tasks a), b) and c). 
al) First, we have to carry out a transformation T of the matrix (which is other 
than the forthcoming ones), thus transforming the matrix D = (dii) ;underlying 
the assignment problem into a matrix DO = (d?j)i,j=I,2, ... ,n. In principle, this 

152 
Chapter 6 
Fig. 6.1 
transformation could be omitted, nevertheless one achieves, as a rule, a greater 
reduction of the minimum of the objective function (compared to the other trans-
formations). The transformation T has the following form: 
with 
UjO := min d ji , 
v/ := min (dii -
UjO) 
for i, j = 1,2, ... , n. 
i 
i 
The objective function changes according to 
n 
n 
}; diiXji = }; [d?i + Ujo + vIol Xjl 
;,/=1 
i,i=1 
n 
n 
n 
n 
n 
= }; d?iXji + }; Ujo }; Xii + }; v/ }; Xjl 
i,j=1 
i=1 
j=1 
j=1 
;=1 
n 
n 
n 
= }; d?jXji + }; Ujo + }; v/. 
i,j=1 
i=1 
j=1 
n 
Thus, the value of the objective function}; diixii differs from that of the objective 
n 
~=1 
function }; d~jXji only by the sum of the transformation constants Ujo, vt That is, 
i,j=1 
after the transformation we have in principle the same optimization problem (of 
course, with a modified matrix) the only difference being that the value of the objec-
tive function is smaller by exactly 
n 
n 
}; Ujo + }; vio. 
i=1 
i=1 

The assignment and the travelling salesman problems 
153 
The transformations to be carried out later will have the same effect. They are 
carried on as long as the minimum value of the objective function becomes zero. 
An example of this type of transformation can be found later as a part of the 
case treated at the end of section 6.1.2. 
By this transformation T we have thus assured that each row and each column 
of the current matrix contain at least one zero (i.e. that the maximum number of 
independent zeros is ~ 2 if n ~ 2). 
b) Determination of a maximum set of independent zeros. In the following, consi-
der an n-rowed square matrix Dk (which we have already constructed for k = 0). 
For determining a maximum set of independent zeros we use the algorithm of 
Ford and Fulkerson described in the first chapter. Consider the following transpor-
tation network Nk = (I, Uk, c): The set I consists of n "row vertices" Zl' ... , Zm 
n "column vertices" E 1, â¢â¢â¢ , En, the source Q and the sink E. The set Uk of arcs is 
composed of the narcs (Q, Zi), the narcs (Ei' E), the return arc (E, Q) and of all 
those arcs (Zb Ei ) for which d~ = 0 holds. 
With the exception of the return arc (E, Q), for which c (E, Q) = 00 is true, the 
capacity bound c is always 1, i.e., c(u) = 1 for all u E U with u =1= (E, Q). 
Now, we determine a maximum Â£low fPok in Nk. 
ASSERTION. A maximum set Ok of independent zeros in Dk corresponds to the 
set of arcs {(Zb Ei ): fPok(Zb Si) = 1}, and it holds: 
Ok = 
{d~: fPok(Zj, Si) = 1}. 
Proof. If fPl(S, Q) = n, there is nothing to be proved, since in this case each of 
the arcs (Si' S) and thus also each of the arcs (Q, Zi) is traversed by a maximum 
flux (of the value fPl(Si'S) = fPl(Q, Zi) = 1). But then, there will also exist n 
arcs (Zir' Eir), r = 1, ... , n, with fPok(Zir' Si,l = 1. Since these n arcs are pairwise 
non-adjacent (task !), there corresponds to them a set of n independent zeros 
dtir in Dk. But since there exist in Dk n independent zeros at the most, the proof 
of the assertion is obvious in this case. 
Let us assume that the maximum number mk of independent zeros in Dk 
satisfies the relation mk > fPok(S, Q). Since a set of mk pairwise non-adjacent arcs 
(Zir' Si,) r = 1,2, ... , mb corresponds to the mk indepe.pdent zeros of Dk, a Â£low of 
the value mk > fPok(E, Q) can be sent through the transportation network Nk, which 
contradicts the maximality of fPok. 
The reader may find an example for the application of the algorithm of Ford 
and Fulkerson for ascertaining a maximum Â£low in chapter 1, page 36. 
c) Determination of a minimum zero-covering. As we have seen in theorem 6.1, 
the number of the rows and columns of a minimum zero-covering is equal to the 
maximum number of independent zeros of a matrix. 

154 
Chapter 6 
Having applied the algorithm described for determining a maximum zero set, 
it is now very easy to determine a minimum zero-covering. For this, we prove the 
following 
ASSERTION. Let 3+ and 3- be the sets of the row vertices marked and not marked, 
respectively (after breaking off the algorithm of Ford and Fulkerson for the deter-
mination of a maximum set of pairwise non-adjacent edges). Correspondingly, let 
@)+ and @)- be the sets of the column vertices marked and not marked, respectively. 
Then, 3- u @)+ is a set of vertices disconnecting the sets 3 and @). That is, the 
rows which correspond to the non-marked row vertices in Dk form together with the 
columns of Dk, which correspond to the marked column vertices, a minimum zero-
covering \no 
Proof. First, we show that 3- u @)+ is a set disconnecting the sets of vertices 3 
and @). 
Let we denote the set of the arcs (Zj, Sj) of U on which a flow of the value 1 is 
flowing after breaking off the algorithm of Ford and Fulkerson, thus the maximum 
set of pairwise non-adjacent arcs (Zj, Sj) found. Assume there exists an arc 
u = (Z+, S-) E U with Z+ E 3+ and S- E @)-. Then, u E we is true since otherwise, 
S- would be marked according to the algorithm. But then, a flow of the value 1 
goes on the arc (Q, Z+), that is, Z+ has been labelled backwards, which means that 
there exists an Sl+ E @)+ with f(!ok(Z+, Sl+) = 1. In this case, however,Z+ is incident 
with two arcs of we, which is in contradiction to the circumstance that the value 
of the flow going through a row vertex equals 1 at the most. 
Now, we show that to each vertex P E 3- u @)+ there exists an arc u E we inci-
dent with P. 
Obviously, this assertion is true for P E @)+ since otherwise, f(!ok would not be 
maximum (that is to say, it would be possible, according to the algorithm, to 
label the sink S via the arc (P, S) and to increase the flow in this way). Now, let 
P E 3-. If there existed no arc of we incident with P, one could label P via the 
arc (Q, P), which contradicts P E 3-. 
Finally, we show that there exists only one vertex of 3- u @)+ which is incident 
with any arc u E we. 
Assume it would hold u = (Z-, 8+) E we with Z- E 3- and S+ E e+. In this 
case, using the algorithm of Ford and Fulkerson, Z- would have to be labelled, 
since 8+ is labelled and a flow of the value 1 goes through (Z-, 8+). But this, how-
ever, is in contradiction to the choice of u = (Z-, S+). The assertion is thus 
proved. 
If we have determined a maximum zero-set, i.e., if the algorithm for deter-
mining a maximum set of pairwise disjoint arcs breaks off, then the unlabelled 
vertices of 3 and the labelled vertices of @) represent a minimum zero-
covering. 

The assignment and the travelling salesman problems 
155 
a2) The transformation T k : Dk ---c> Dk+1, k = 0, 1,2, ... We imagine the matrix 
Dk = (d~);,j=I, ... ,n to be given for k ;.:;; 0 and form the matrix DkH by means of 
Here, let 
with 
dlf.+1 '= dlf. _ 
U.k+I _ 
v.k+1 
IJ' 
IJ 
1 
l' i,j=1,2, ... ,n. 
U .k+l ._ { 0 
I 
.-
ek 
if the ith row is covered, i.e., if Zj E in, 
if the ith row is not covered, i.e., if Zj ~ in, 
{ -ek if the jth column is covered, i.e., if Si E in, 
VÂ·k+I 
1 
.-
0 
if the jth column is not covered, i.e., if Si ~ in, 
ek : = {~i? dfj: the index pair (i, j) is not covered}. 
I,J 
By this transformation it is assured (task!) that d~+1 ;.:;; 0 holds for all i, j = 1,2, 
... , n (taking into account that no negative elements oc~urred either in D or 
in DO). 
If we consider the change of the objective function, then, analogously to the 
transition from D to DO, it results: 
n 
n 
\' dlf.x .. = Y' [dlf:"1 + uÂ·k+1 + v.k+1] x .. 
.:... 
IJ 'I 
"-" 
IJ 
I 
1 
11 
i,j=1 
i,j=1 
n 
n 
n 
= Y' dlfÂ·+1x .. + \' UÂ·k+l + \' VÂ·k+l 
~ 'lt1 
"1 
L..J 
t 
L..J 
J 
' 
i,j=1 
i=1 
j=1 
thus 
for k = 0, 1,2, ... 
n 
n 
Further, we can determine the transformation constant E Ujk+1 + E v/+1. Let 
i=1 
j=1 
Zk be the number of the rows and Sk the number of the columns of the zero-cover-
ing in. Then, it follows 
n 
n 
E Ujk+l + E v/+1 = (n -
Zk) ek -
Skek = (n -
Zk -
Sk) ek ;;;; 1, 
i=1 
j=1 
since ek ;;;; 1 (for the definition of ek and the integrality of the dfj ;;;; 0) and since 
n -
Zk -
Sk ;.:;; 1 as far as the zero-covering in consists of less than n elements 
(i.e., if the maximum number of independent zeros is still smaller than n). 
In the course of each cycle traversed when solving the assignment problem, 
n E dtXii decreases by at least 1 if the Xii are fixed. Because the XiI and the dfj are 
i,j=1 
non-negative, there exists an index t such that 
n 
min E d!jXii = 0 
(X'i) i,j=1 

156 
Chapter 6 
holds. This, however, is achieved if there is a set of exactly n independent zeros 
in Dt. Then, the minimum value of the original objective function is 
t [ n 
n] 
1: .1: u/ + .1: v/ . 
8=0 ,=1 
J=1 
The optimal solution, i.e., the solution of the assignment problem, is yielded by a 
minimum set of independent zeros in Dt. 
To conclude this section, let us calculate a little example. 
Ujo 
9 
7 8 8 6 2 
2 
10 6 8 10 8 3 
3 
12 8 9 10 7 2 
2 
6 
6 
D= 
1: UiO + 1:v/ = 16 
6 9 12 12 10 1 
1 
;=1 
j=1 
10 11 
9 8 10 
1 
1 
1 2 1 3 4 10 
1 
via 
0 
1 
0 
2 
3 
0 
t 
uÂ·1 
By labelling the zeros with a prime, we 
, 
have indicated a maximum zero set 
wJl~ 
4 6 4 1 0 
1 
in DO. The arrows indicate the rows 
2 5 5 2 0 
1 
and columns which belong to the mini-
5 7 6 2 0 
t 
mum zero-covering 9(. Since (1, 5) is not 
~U 
7 11 
9 6 0' 
t 
covered and d15 = 1, it holds eo = 1. 
9 8 5 6 0 
1 
It results 
0 0' 0 0 9 
0 
n 
n 
vl 
0 
0 
0 
0 0-1 
1: u? + 1: v/ = (n -
Zo -
80) eo = 4. 
;=1 
j=1 
t t 
uÂ· 2 , 
6 3 5 3 0' 0 l 
1 
6 1 4 4 1 0 
1 
Since d~2 = 1 is not covered, it holds 
Dl= 
9 4 6 5 1 0 
1 
e1 = 1. We get 
4 610 8 5 0 
1 
n 
n 
8 
8 
7 4 5 0' 
t 
J.; Uj2+ J.; Vi2 = 3. 
i=l 
i=l 
-+ 
0 0 0' 0 o 10 
0 
vl 
0 0 
0 0-1-1 

The assignment and the travelling salesman problems 
157 
+ 
UÂ·3 
! 
--+ 
5 2 4 2 0' 0 
0 
We get e2 = 1 and 
--+ 
5 0' 3 3 1 0 
0 
n 
n 
8 3 5 4 1 0 
1 
}; Ui3 + }; v/ = 2. 
5 9 7 5 0' 
1 
i=1 
j=1 
D'~l ; 7 6 3 5 0 
1 
If in = {Z6' 8 2, 8 5, 8 6} had been chosen, 
--+ 
0 0 0 0' 1 11 
0 
then it would even hold e2 = 2. 
vÂ·3 
J 
0 
0 
0 0 
0-1 
+ 
+ + 
uÂ·4 
! 
5 2 4 2 0' 1 
2 
5 0' 3 3 1 1 
2 
It results e3 = 2 and 
7 2 4 3 0 0 
2 
D3= 
2 
6 
0' 
n 
n 
4 8 
4 
2 
L Ui4 + L vi4 = 4. 
6 6 5 2 4 0 
2 
;=1 
j=1 
--+ 
0' 0 0 0 1 12 
0 
Vi4 
o -2 0 0-2 -2 
3 2 2 0' 0 1 1 
3 0' 1 1 1 1 
Now, the number of the elements of a 
5 2 2 1 0' 0 
D4= 
0' 4 6 4 4 
maximum set of independent zeros is 
4 6 3 0 4 ~, J 
equal to 6. 
0 2 0' 0 3 14 
We find two maximum zero-sets: 
(h = {(1, 5), (2,2), (3, 6), (4, 1), (5,4), (6, 3)}, 
0 2 = {(1, 4), (2,2), (3, 5), (4, 1), (5,6), (6, 3)}. 
Both sets solve the assignment problem. The minimum value of the objective 
4 r 6 
6] 
function is d15 + d22 + d36 + du + d54 + d63 = sfo if u;" + jf v/ = 29. 
6.2. 
THE TRAVELLING SALESMAN PROBLEM 
6.2.1. Formulation 01 the problem 
The travelling salesman problem was named after the following practical task: 
Given n places. The traveller starting from one ofthem, each place must be visited 
exactly once. In doing so, the place of departure must be reached again at the end 
of the travel, and the total distance covered during the travel must be minimum. 

158 
Chapter 6 
Even the following problem can be regarded as a travelling salesman problem: 
In a rolling-mill, a number of n various profiles must be produced on a rolling 
train. When going over from the production of one profile to another, a certain 
number of roll stands have to be altered each time. Here, the number of the roll 
stands to be altered depends on from what profile one goes to which other one. 
Find now an order for the production of the types of profiles which entails a mini-
mum number of all roll stands to be rebuilt. 
By introducing another (fictitious) profile, this task can be modelled as a travel-
ling salesman problem. 
J. Piehler and E. Seiffart [10, 13] showed that some certain scheduling prob-
lems can be regarded as a travelling salesman problem. 
Using the terminology of graph theory, the following task can be formulated: 
Given a simple directed arc-valuated graph G = G(Â£, U) with n vertices Xl> X 2, 
... , X nâ¢ Let a non-negative integer d(i, j) = dij' called arc length, be assigned to 
each arc (Xi> Xj) = (i, j). Consider the arc length matrix D = (dij), with dij = 00 
being set if (i, j) ~ U, especially also du = 00 being set for i = 1,2, ... , n. 
Find a hamiltonian circuit (i.e., a circuit which contains each vertex of G exact-
ly once) H = (Xi" Xi" ... , X in, X in+1 = Xi,) with minimum total length, thus 
n 
.E dilil+1 -Â» min! 
i~1 
When treated as a linear integer optimization problem, the travelling salesman 
problem takes the following form: 
n 
.E dijzii -Â» min!, 
i,i~1 
n 
.E zii = 1 for i = 1,2, ... , n, 
j~1 
n 
(1) 
.E Zij = 1 for 
j = 1,2, ... , n. 
(2) 
i~1 
If 8 is any natural number with 1 ~ 8 ~ [;] and if iI, i 2, â¢â¢â¢ , is E {I, 2, ... , n} are 
8 pairwise distinct of the first n natural numbers, i.e., ik =1= i 1 if k =1= 1, then let it 
be true that 
Zii E {O, I} 
for 
i, j = 1, 2, ... , n. 
(3) 
(4) 

The assignment and the travelling salesman prohlems 
159 
The constraints (1), (2) and (4) classify Z = (Zij)i,j=1,2 .... ,n as a permutation 
matrix (analogously to the matrix X in the case of the assignment problem). The 
constraints (3) assure that a feasible selection zi" zi" â¢.. , Zi n is constituted such 
that the sequence of arcs 
{(Xi" Xi,), (Xi" Xi.), ... , (Xin_" XiJ, (Xin' Xi,)} 
forms a hamiltonian circuit (that there occur no circuits of a length < n). 
If the arc length matrix D is regarded as a matrix corresponding to an assign-
ment problem, then one could try to solve it hoping that the solution of the assign-
ment problem yields a solution of the travelling salesman problem. However, 
this will generally not be the case. For this, consider the example dealt with in the 
preceding section where the set Â£11 of arcs is decomposed into the three circuits 
(1,5,4), (2), (3, 6) (when interpreting it as a travelling salesman problem), where-
as the set (l,2 of arcs is decomposed into the three circuits (1, 4), (2), (3,5,6). 
We observe that the number of the constraints (3) considerably increases with 
the number n of vertices (say like nn/2). Therefore, it is certainly not expedient to 
use the classical solution methods of linear optimization for solving the travelling 
salesman problem. 
In what follows, we shall discuss two of the various solution procedures which 
have been developed so far. The first of these two solution algorithms treated is 
to be owed to J. D. C. Little, K. G. Murty, D. W. Sweeney and C. Karel [7]. It is 
a procedure based on the so-called branch and bound method. It will not be withheld 
from the reader that this method is, in principle, nothing else but a checking 
up (though rather ingenious) of all possibilities while some certain cases can already 
be excluded according to the state of the procedure. After this, we shall indicate 
a heuristic method devised by M. Held and R. M. Karp. 
6.2.2. A branch-and-bound 8olution algorithm jor the travelling 8ale8man problem 
An example will serve us to explain the algorithm, since this might be the best 
way to comprehend it. Given the arc length matrix 
J1 
6 
6 
8 
5 
7 
00 
5 12 
4 10 
D 
5 
00 
5 10 
7 
6 
7 
3 
00 
6 
3 
8 
6 
8 10 
00 
8 
9 
4 
2 
7 
5 
00 
Find a round trip of minimum total length leading through the six points. 
As is well known, in a complete graph with n vertices there are (n -
1)! various 
hamiltonian circuits. Thus, checking up all possibilities would involve a great 
deal of work, especially in the case where the number n of vertices is not small. 

160 
Chapter 6 
First, carry out the transformation T which has already been applied in the 
solution of the assignment problem: 
drj := dij -
Ujo -
vio 
with Ujo := min d ji, vio := min (dji -
UjO) for i, j = 1,2, ... , n. 
j 
i 
In the course of this transformation, the matrix D is transformed into the matrix 
DO with 
00 
1 
1 
2 
0 n 
0 
00 
2 
8 
1 
DO= 
0 
1 
00 
0 
6 
3 
4 
0 
00 
3 
lJ 
2 
0 
2 
3 
00 
7 
2 
0 
4 
3 
Here, it holds 
6 
6 
I: Ujo + I: vio = 24. 
i=1 
j=1 
In principle, we thus still have the former problem which is to be solved, with the 
difference that the length of a minimum round trip having the matrix DO is shor-
ter than that having the matrix D, namely by 24 (the proof is already given in 
6.1.2). Thus, a round trip has a length of at least 24. 
In the following, let 30 denote the set of all hamiltonian circuits in G and 
c(30) a lower bound for the length of any hamiltonian circuit of 30. With the 
present state, we can say that c(30) = 24 holds. 
The idea of the procedure is the following: The set 30 of all hamiltonian circuits 
is decomposed into two disjoint subsets 30' and 30" (branch). For this, we choose 
(in principle) any arc (Xi> Xi) = (i, j), which is done, however, according to a 
purposeful rule. Then, we group all those hamiltonian circuits to 30' which do 
not contain the arc (i, j), and all those hamiltonian circuits containing the arc 
(i, j) are grouped to the subset 30". 
lt is easy to recognize that of all (n -
1)! hamiltonian circuits from 30 exactly 
(n -
2)! lie in 30" and (n -
2) (n -
2)! in 30'. As in the case of an increasing n, 
30' contains considerably more hamiltonian circuits than 30'" the arc (i, j) is 
chosen such that the lower bound for the length of a hamiltonian circuit of 30' 
becomes as large as possible. The matrix Do' assigned to the set 30' has 00 in the 
position i, j, since the arc (i, j) is contained in no hamiltonian circuit. (Now, i, j 
is chosen so that after having carried out the transformation T, the reduction con-
n 
n 
stant I: Ui + I: Vi becomes maximum when applied to Do'. This is just what as-
;=1 
j=1 

The assignment and the travelling salesman problems 
161 
sures the maximum increase of the lower bound c(30') for the length of any hamil-
tonian circuit of 30'), 
For determining the arc (i, j) precisely, we proceed as follows: To each element 
drs E DO with drs = 0 form 
W rs : = min d rk + min dkB 
and then 
k 
k 
(k""s) 
(k""r) 
W := max W rs 
r,8 
(d,,=O) 
Now, determine a pair of indices (i, j) for which wij = W holds. In our example, 
this means 
W 15 = 2, W21 = 1, W31 = 0, W46 = 2, W52 = 3, W43 = 0, W63 = 2, W 34 = 2. 
Since W 52 = max W rs' we choose the arc (5,2). The following two matrices Do' 
and Do" correspond to the two sets 30' and 30'" respectively (the abbreviations 
used will probably be clear without any commentaries): 
{(5,2)} ~ 30' 
Do' = 
0011202l 
o 00 
2 8 1 7 
0100063 
34000301 
20023002 
7204300 
We apply the transformation T to Do' 
and get (with 
U5 = 2, V2 = 1 and 
Uj = Vi = 0 otherwise) 
Do' = 
0001202 
0002817 
0000063 
3300030 
00001000 
7 104 3 00 
In doing so, we have continued to use 
the designation Do' although the trans-
formation T is carried out. We get 
c(30') = 24 + 3 = 27 
{(5, 2)} ~ 30" 
D"-
o -
00001202l 
00028007 
00000063 
300 000 3 OJ 
00 000000000 
70004300 
The oo-values of the fifth row are 
obtained, since one must go from the 
vertex X5 to X 2 by all means. The 
oo-vahies of the second column are ob-
tained analogously. It is clear that the 
element at the position (2,5) is equal 
to 00 since otherwise, there could occur 
circuits of length 2. 
Obviously, we can omit the second 
column and the fifth row _ without 
undergoing a loss of information if 
we only remember that they have been 
omitted. The designations used for the 
reduced matrix are probably easy to 
understand. 

162 
Chapter'6 
for the lower bound of the length of 
any hamiltonian circuit which does 
not contain the arc (5,2). 
D"-
o -
00 
1 2 0 2 
0 2 800 7 
000 0 6 3 
3 000 3 0 
7 0 4 300 
1 3 4 5 
6 
1 
2 
3 
4 
6 
Although we have omitted one row 
and one column, we want to stick to 
the designation Do". Applying a trans-
formation T to Do" entails no increase 
of the lower bound, thus 
c(,Bo") = 24 holds. 
Now, we seek an element ~ E {,Bo', 30"} so that 
c(~) = min {c(30'), c(30")} 
holds. Thus, we choose ~ = 30" for our example. 
We set 31:= ~:= 30'" and using the matrix D 1 := Do", we determine an 
arc (i, j) such that Wij : = max W rs with drs = 0 and drs E Do" holds (cf. p. 161). 
In our example, we ascertain the arc (1, 5) with W15 = 4. We get: 
{(5, 2), (1,5)} ~ 3t' 
00120021 
0280072 
0000633 
3000304 
704300 6 
1 
3 
4 5 
6 
{(5, 2), (1, 5)} ~ 31" 
D"=[~ ~ ~ ~l: 
I 
300004 
70400 
6 
1 
3 
4 
6 
Applying the transformation T to the matrices D I ', D I " leads to 
00010011 
0280072 
D I '.-
0 00 
0 3 3 
3 
3000004 
704000 
6 
1 345 6 
D " := [~~ ~ ~]: 
I 
300004 
70400 
6 
134 6 

The assignment and the travelling salesman problem 
163 
Now, we seek the element )B E {30', 31', 31"} with the minimum e()B), i.e., for 
our case 31" with e(31") = 26. We set 32 := 3t" and determine the arc (2,3) 
with the aid of the branching criterion for W23 = max W rs = 5. We continue this 
branching process relative to that arc, and after having carried out the transfor-
mation T, we get: 
{(5, 2), (1, 5), (2, 3)} ~ 32' 
D2' 
r~: ~ ~] ~ 
300004 
70400 
6 
1 346 
with U 1 = 5 and Ui = vi = 0 
otherwise, thus 
e(32') = C(31") + 5 = 31. 
{(5, 2), (1,5), (2, 3)} ~ 32" 
[
00 0 3- 3 
D2" = 
0 00 
0 
4 
o 0 00 
6 
146 
with U3 = 4, VI = 3 and 
Ui = vi = 0 otherwise, thus 
C(32") = C(31") + 7 = 33. 
The lower bound e which is now the smallest one is c(30') = 27. We set 33:= 30" 
determine for example the arc (1,5) with the aid of the branching criterion (it 
could have been also one of the other three arcs (2, 1), (3,4), (6,3) with W rs = 1) 
and get: 
{(D), (U)} ~ 33' 
{(D), (1, 5)} ~ 33" 
00 
0 1 200 2 
000 2 8 7 
2 
000 2 8 0 7 
0 000 0 3 
3 
D3' := 
0 000 0 5 3 
D"-
3 3 000 0 
4 
3 -
3 
3 000 2 0 
00 00 
0 1 0 
5 
000 0 1 00 
0 
7 1 0 400 
6 
7 1 0 4 200 
1 
2 
3 4 
6 
with C(33') = C(23) + 1 = 28. 
with C(23") = e(23) = 27. 
Then, we branch 23" and choose the arc (2, 1). With 24:= 23" we get: 
0000287 
0000 0 3 
D 4' 
3 3 0 00 
0 
0000010 
710400 
12346 
2 
3 
4 
5 
6 
with e(3/) := C(34) + 2 = 29. 
{(5.2), (1,5), (2, 1)} ~ 34" 
D"=r~~~ ~~! 
4 
000105 
10400 
6 
234 6 

164 
Chapter 6 
We continue to branch 35:= 34" and can choose for example the arc (3,4) for 
branching. We get 
{(5,2), (1,5), (2, 1), (3, 4)} ~ 35' 
D 5' = l 
~ ~: ~J! 
000005 
10300 
6 
2 
3 
4 
6 
with C(35') = C(35) + 1 = 28. 
{(D), (1,5), (2, 1), (3, 4)} ~ 35" 
D 5" = [~~ ~J: 
o 0 00 
6 
2 
3 
6 
with C(35") = C(35) + 1 = 28. 
We thus have four sets with the same lower bound C = 28 at our disposal, namely 
31" 3a', 35' and 35", to continue the branching process. It is advisable to carry 
on branching in that set which contains as few elements as possible. In our case, 
we would choose 36 := 35" and get (when branching say the arc (6,2)) 
{(5, 2), (1, 5), (2,1), (3, 4), (6, 2)} ~ 36' 
{(5,2), (1,5), (2,1), (3,4), (6, 2)} ~ 36" 
D 6' =[~ ~ ~ I: 
00 
0 ~ J 
6 
D 6" = [~ ~J : 
3 6 
236 
with C(36') = C(36) + 2 = 30. 
with C(36") = C(36) + 0 = 28 .. 
Thus, we have found a hamiltonian circuit of minimum length, namely 
{(l, 5), (5,3), (3,4), (4, 6), (6,2), (2, l)} 
of the length 
5 
+8 
+5 
+3 
+4 +3 
= 28. 
The procedure given above can be described by means of a valuated rooted 
tree. Figure 6.2 shows the rooted tree for our example. 
If one wishes to find all hamiltonian circuits of minimum length, then branch-
ing has to be carried on wherever the lower bound has not yet exceeded the value 
28. The reader may find out by himself that there exist still other hamiltonian 
circuits of length 28. 
In an analogous way one can make out all hamiltonian circuits which do not 
exceed a well-defined value in their lengths. 
In an unfavourable situation, however, this procedure may involve a great 
deal of work. From the point of view of computation, it is less advantageous if a 

The assignment and the travelling salesman problems 
165 
set S;' or St which has been rejected for the present might perhaps be required 
again, after a certain time. The number of the sets to be branched potentially 
increases by 1 with each branching. 
33 
Fig. 6.2 
Algorithm for solving the travelling salesman problem 
(ii) Reduce Dk by means of the transformation T, i.e., if A = (aij) is a matrix 
and C(Sk) a natural number, then form Ui:= min aij, Vj:= min (a;j -
Ui), 
j 
i 
n 
n 
cUh):= C(Sk) + .E Ui + .E Vj' 
i=l 
j=l 
(iii) Choose an arc (i, j) (this is done by means of the reduced matrix Dk 
= (drs) by determining the numbers W rs according to W rs : = min d rt + min d ts for 
t 
t 
1*8 
t""r 
all pairs r, 8 for which drs = 0 holds: Wij:= max W rs with drs = 0). 
r,s 
(iv) Decompose Sk into two sets S/ and Sk" (here, Sk' and Sk" are the sets of 
those hamiltonian circuits of Sk which do not contain the arc (i, j) and those 
which do, respectively) and form ms := ms u {Sk', Sk"}. 
(v) From Dk form the matrices Dk" Dk" which correspond to the sets Sk' and 
Sk", respectively (Dk' is obtained from Dk by substituting 00 for the element 
dii, with all other elements remaining unchanged; Dk" is obtained from Dk by 

166 
Chapter 6 
omitting the ith row and the jth column and by substituting 00 for that element 
which corresponds to an arc that would yield, together with those already chosen, 
a circuit of a length < n; all other elements, however, remain unchanged). 
(vi) Reduce Dk' and Dk" according to (ii) and determine C(8k') and cUh"). 
(vii) Determine)8 Em! such that c()8) = min c(;t) holds. m! := m! " {)8} (this 
~Em 
ensures that the set )8 is split up only once). 
(viii) If the set )8 contains still one hamiltonian circuit, then go to the end. 
(ix) Set k:= k + 1, 2k:= )8; go to (iii). 
End: The element from )8 is a hamiltonian circuit of minimum length. 
6.2.3. A heuri8tic method tor 80lving the travelling 8ale8man problem 
In this section, let us suppose that the matrix D = (diiki=1.2 ....â¢ n underlying 
the travelling salesman problem is symmetrical, that means that the graph 
G = (x, U) is undirected. This restriction is not absolutely necessary, but it makes 
some things simpler. Our intention is to illustrate only the principle of the 
approach devised by M. Held and R. M. Karp. 
First, we need the term of a i-tree. Let G = (x, U) be an undirected connected 
graph with n vertices and ~ n edges. We imagine any vertex (say that with the 
number 1) to be marked and suppose that the relation v(l) ~ 2 is true for its 
degree. A i-tree T = (x, U) of G is a connected subgraph with n vertices and n 
edges, with v( 1) = 2 being valid in T and the only circuit contained in T (cf. chap-
ter 1) containing the vertex 1. 
One can find a i-tree in G in the following way: Delete the vertex 1 and all edges 
from G which are incident with it. Then, search for a spanning tree in the residual 
graph and add the vertex 1 and two edges incident with it. The resulting graph is a 
i-tree T. 
One can see in particular that a hamiltonian circuit, that is, a round trip, is a 
i-tree. 
For a hamiltonian circuit H' of minimum length, that is, for an optimal round 
trip in G, it holds: The length of H' is at least that of a i-tree of minimum length. 
The purpose of the procedure to be described in the following is to have differ-
ences only in the valuations d~, i, j = 1,2, ... , n. The edge valuations - preceded by 
a suitable valuation of the vertices - are made such that if T k ' is an optimal round 
trip in Gk, it is also an optimal one in G = GO. 
Given the graph G = GO with the arc length matrix 
D = DO = 
(d~.).. 1 2 
. 
tJ "',1= 
J 
j â¢â¢â¢ ,n 
Let further pO = (PIO' P20, ... , PnO) be any vertex valuation of G, that is, the num-
ber PIO, which is in general an integer, is assigned to the vertex l. From pO we con-

The assignment and the travelling salesman problems 
167 
struct an edge valuation as follows: 
DI = 
(d~.)Â·. 12 
IJ 1,1= , ,,,,,n 
(1 ) 
with dti = d?i + Pin + Pin fori, j = 1,2, ... , n. 
Let H = (iI, i 2 , ... , in, i n+l = il) be any round trip in G with the edges (iI, i 2 ), 
(i2' i3), ... , (in-I, in), (in> il) and the length 
dO(H) = d~Â· + d~Â· + ... + d~ . + d~ .. 
Zlh 
t2 t 8 
Zn-1Zn 
'nh 
Then, for the modified edge valuation and any round trip H, it follows: 
dl(H) = dO(H) + 2(PIO + P20 + ... + PnO) , 
(2) 
since the valuation of each vertex is counted exactly twice when making the 
summation over all edges of H according to (1). This, however, means: A dO-
optimal round trip is also dl-optimal, and vice versa. Both differ from each other 
only in their "valuation" length by the fixed value 2 (PIO + P20 + ... + PnO). 
If we consider any I-tree T I ' of minimum dl-Iength, then the relation 
(3) 
is true for an optimal round trip H' because the set of the I-trees also contains the 
round trips, as already said. 
Now, we calculate dl(TI '). Let rl = (rll, r21, ... , rnl) be the degree vector of T I ', 
thus let r/ be the degree of the vertex i in Tt Then, it holds 
( 4) 
since besides the original edge valuations each vertex contributes to the total 
length, and the vertex i delivers the value Pin just as often as it is indicated by the 
number ril of the edges incident with it in T/. 
From (2), (3) and (4), it follows 
dO(H') ;;;; dO(T/) + Plohl -
2) + P2Â°(rl- 2) + ... + PnO(rnl -
2). (5) 
Since this inequality is true in the case of any vertex valuation pO, then, after 
having given pO and having determined a I-tree T I ' of minimum length (relative 
to the edge valuation Dl evoked by pO), we get a lower bound for the length of an 
optimal round trip H'. 
In the following, we will consider only those vertex valuations p = (PI, P2' ... , 
Pn) for which PI + P2 + ... + Pn = Â° 
is true. Then, because of (2) it even follows 
dO(TI ') = dl(TI ') if T I ' is both a minimum I-tree and a round trip. 
Algorithm of Held and Karp 
Given G = (I, U) with the arc length matrix DO = (d?i)' 
(i) Set p : = (PI, P2, ... , Pn) : = (0, 0, ... , 0), 
k:= 0. 
Fix lo (cf. (vi)). 

168 
Chapter 6 
(ii) Set D := (d iiki=1,2, .... n with dij : = dPj + Pi + Pi for i, j = 1,2, ... , n. 
(iii) Determine a minimum 1-tree T' in G relative to the valuation D. 
(iv) Form the degree vector r = h, r2, ... , rn) of T'. 
Form k:= max {k, dO(T') + Pl(rl -
2) + P2h -
2) + ... + Pn(rn -
2)). 
Formp:= p + r - (2,2, ... , 2). 
(v) If T' is a round trip, go to the end. 
(vi) If k has not improved in the course of the last lo iterations (that is, if it has 
not increased), then break it off. 
(vii) Go to (ii). 
End: T' is an optimal round trip of length dO(T') = d(T'). 
Breaking-off: An optimal round trip has a length ~ k. An optimal round trip 
was not found. 
To conclude, let us calculate a little example drawn from the textbook of 
H. Noltemeier [9]. Consider the graph represented in Fig. 6.3a. The vertices are 
numbered from 1 to 7, and the valuations dij := dPj are written at the edges. The 
unique 1-tree T' of minimum length is indicated by doubly drawn edges; it holds 
dO(T') = d(T') = 18, a first lower bound for the length of a minimum round trip 
is thus found. We get 
r = (2, 3, 1, 1, 1, 4, 2), 
k = 18, 
P = (0, 1, -1, -1, -1,2,0); 
T' is no round trip, we go back to (ii). 
The valuations Pi are inscribed in the vertices of Fig. 6.3 b, the new edge valua-
tions dii are written at the edges .. Here again, a minimum 1-tree is indicated by 
doubly drawn edges (obviously, T' is not unique). We get 
r = (2,3,2,3, 1, 1,2), 
k = max (18, 22 -
1) = 21, 
p = (0,2, -1,0, -2, 1,0); 
T' is not a round trip; an optimal round trip has a length ~ 21. We go back to (ii). 
The new valuations Pi are inscribed in the vertices of Fig. 6.3c, the new edge 
valuations dij are written at the edges. A minimum 1-tree T' is again marked by 
doubly drawn edges (T' is not unique). Since the new degree vector r possesses 
only just the number 2 as components, we have finished. T' is a round trip, and 
thus we have found an optimal round trip of length 24. 
One can easily verify that there exists still another optimal round trip (task I). 

The assignment and the travelling salesman problems 
169 
In the graph represented in Fig. 6.3c, one can also find minimum i-trees which 
are not round trips. If such a tree had been found, then the calculation would have 
to be carried on. Of course, the vertex valuation p need not necessarily be made in 
the way indicated by us. The purpose of our valuation is (since in a round trip, 
each vertex has the degree 2) to lower the degree of the vertices having a high 
degree in T' by a high valuation of the edges incident with them, in the next 
step. 
01 
bl 
cl 
Fig. 6.3 
6.3. FINAL OBSERVATIONS 
From a computational point of view, too, the Hungarian method for solving 
the linear assignment problem can be considered satisfactory. On the other hand, 
the situation is quite different for the solution algorithms for the travelling sales-
man problem known so far. 
Considering the vast amount of articles published so far on this problem, and 
the algorithms suggested there, one can say that no generally satisfactory algo-
rithm has yet been set up. What ever algorithm is proposed and considered suffi-
cient, one can always form classes of travelling salesman problems to wh'ich this 
algorithm can successfully be applied, but there will also exist classes in the case 
of which its use is hardly efficient. 
As is also the case with other optimization tasks to be solved, the exact methods 
(e.g. the branch-and-bound algorithm for solving the travelling salesman problem) 
are seldom the most rapid ones. 
The algorithm for solving the travelling salesman problem, which had been 
suggested by M. Held apd R. M. Karp [5, 6] and improved later by K. H. Hansen 
and J. Krarup [4] and which is based on the highly efficient algorithm for deter-
mining a minimum spanning tree in a graph, leads quickly to an optimal round 
trip in many practical cases, but the finiteness of the algorithm is not guaranteed. 
M. Schoch et al. developed for a number of combinatorial optimization problems 
(as also for the assignment problem and the travelling salesman problem) solu-
tion algorithms on the basis of the principle of permanence elaborated by them 
[12]. The algorithm based on this principle turned out to be rather efficient for 
their examples concerning the travelling salesman problem. 

170 
Chapter 6 
Another algorithm founded on the branch-and-bound principle is proposed by 
W. L. Eastman [1]. He regards the matrix corresponding to the travelling sales-
man problem as the matrix of an assignment problem. If the solution consists of 
only one cycle, then we have finished (in our example concerning the assignment 
problem on page 157, both optimal solutions to the assignment problem com-
prised three cycles each). Otherwise, any cycle (ib i 2, â¢â¢â¢ , it. i l ) of the solution ZO to 
the assignment problem is considered. By setting one after another the elements 
d~i2' d?,ia' â¢â¢â¢ , dL,i" d?,i1 of the matrix DO of the assignment problem equal to 
00, t (t < n) new assignment problems arise, with the solution ZO being excluded 
from all possible solutions. The procedure is continued with that matrix for which 
the value of the objective function of the appertaining assignment problem be-
comes minimum. The task is solved if an assignment problem is found which ensures 
that the set of cycles corresponding to the solution consists of only one element. 
An improved Eastman's method for symmetrical round trips can be found by 
the reader in H. Steckhan and R. Thome [15]. 
In [3], the reader will find another representation of the travelling salesman 
problem as a linear optimization task. 
Long discussions about solution methods for the travelling salesman problem 
can be read in [2, 9, 16, 17]. General information about branch-and-bound meth-
ods can be found in [8]. 
In [14], complete FORTRAN programs will be found suitable for a number of 
problems of Operations Research as also for the assignment and the travelling 
salesman problems. 
In recent times, it has become common practice to judge the quality of algorithms 
through time evaluations of the worst case. Without going into details here, we 
shall make a few remarks on it (the interested reader is referred to the excellent 
book of M. R. Garey and D. S. Johnson: Computers and Intractability: A Guide 
to the Theory of NP-Completeness, San Francisco, Cal., 1978): 
The solution algorithm for the assignment problem (Hungarian method) is 
polynomial, or expressed in a somewhat lax way, it is a good algorithm. 
Things are quite different in the case of all exact solution algorithms for the trav-
elling salesman problem. Compared with the worst case, they are altogether non-
polynomial or, in other words, exponential, simply bad. It must be pointed out that 
the finding of an exact solution algorithm (i.e., of an algorithm which yields in eyery 
exemplifying case an optimal round trip) would be equivalent to solving a fundamen-
tal mathematical hypothesis. Such an attempt is not recommended to the reader. 
6.4. BIBLIOGRAPHY 
[1] Eastman, W. L.: A solution to the Traveling Salesman Problem, American Summer 
Meeting of the Econometric Society, Cambridge, Mass., August 1958. 
[2] Finkel'stein, Ju. Ju.: Naherungsverfahren und Anwendungsprobleme der diskreten 
Optimierung (Russian), Moscow 1976. 

The assignment and the travelling salesman problems 
171 
[3] Korbut, A. A., und J. J. Finkelstein: Diskrete Optimierung, Berlin 1971. (Translated 
from Russian.) 
[4] Hansen, K. H., and J. Krarup: Improvements of the Held-Karp-algorithm for the 
symmetric Traveling Salesman Problem, Math. Progr. 7 (1974), 87 -96. 
[5] Held, M., and R. M. Karp: The Traveling Salesman Problem and minimum spanning 
trees, Operations Res. 18 (1970), 1138-1162. 
[6] Held, M., and R. M. Karp: The Traveling Salesman Problem and minimum spanning 
trees II, Math. Progr. 1 (1971), 6-25. 
[7] Little, J., K. Murty, D. Sweeney and C. Karel: An algorithm for the Traveling Sales-
man Problem, Operations Res. 11 (1963), 972-989. 
[8] Mitten, L. G.: Branch-and-bound methods: General formulation and properties, 
Operations Res. 18 (1970), 24-34. 
[9] Noltemeier, H.: Graphentheorie mit Algorithmen und Anwendungen, Berlin/New York 
1976. 
[10] Piehler, J.: Ein Beitrag zum Reihenfolgeproblem, Unternehmensforschung 4 (1960), 
138-142. 
[11] Sachs, H.: Theorie der endlichen Graphen, Teil I, Leipzig 1970. 
[12] Schoch, M.: Das Erweiterungsprinzip und seine Anwendung, Berlin and Munich/ 
Vienna 1976. 
[13] Seiffart, E.: mer Lasungsmethoden einiger Reihenfolgeprobleme, Wiss. Z. TH Magde-
burg 9 (1965), 1-5. 
[14] Spath, H.: Ausgewahlte Operations-Research-Algorithmen in FORTRAN, Munich! 
Vienna 1975. 
[15] Steckhan, H., und R. Thome: Vereinfachungen der Eastmanschen Branch-and-
Bound-Lasung fur symmetrische Traveling Salesman Probleme, in: Operations-Res. 
Verfahren Bd. XIV. Meisenheim 1972, p. 361-389. 
[16] Thompson, G. L.: Algorithmic and computational methods for solving symmetric 
and asymmetric traveling salesman problems, in: Workshop in Integer Programming, 
Bonn 1975 (in print). 
[17] Tinhofer, G.: Methoden der Angewandten Graphentheorie, Vienna/New York 1976. 

Chapter 7 
Coding and decision graphs 
7.1. FORMULATION OF THE PROBLEM 
To illustrate the problematic nature of this chapter, we shall start with a simple 
example. 
ln an urn there are lO{fbifls 0111 CfiUerent colours. -We denote them -by 1\, 1'2, 
... , F ll. Let the relative frequency of the colour Fi be denoted by Pi, and let the 
values 30, 19, 11, 10,9,6, 5, 4, 3, 2 and 1 stand for the frequencies. One player 
takes a ball out of the urn (i.e., randomly), without the other player knowing the 
colour of the ball. The other player tries to find out the colour of the ball by asking 
a series of questions which have to be truthfully answered by the first player 
with "yes" or "no". (The first question could be for example: "Is the ball a mem-
ber of one of the colour classes F 1, F 4 or F 91".) The conditions of play are as follows: 
For each question asked by the second player, he has to pay one Mark to the first 
one. When he has found out the colour of the ball, he gets three Marks from the 
first player. 
Does there exist for the second player a questioning strategy which permits him 
to win "at long sight" (when repeating the game sufficiently often) 1 In the course 
of this chapter, we shall see how the second player has to run the play. 
To begin our study of the general problematic nature of questionnaires, we con-
sider the following model: 
Given a set 
~ = {Y1, â¢â¢â¢ , Y N } 
of N events (in our example, it holds N = 11, and the event Yi corresponds to the 
taking out of a ball belonging to the colour class F i) with a given probability 
distribution of 
{p( Y i)};~ 1 â¢.. .,N' 
thus 
N 
L'p(Yi ) = 1, 
N~2. 
i~l 

Coding and decision graphs 
173 
Further, let a set 
of questions be given. 
We consider the following directed graph F(x, U) which becomes a rooted tree 
with the root Xo: 
Let 'X = ~ u @ be the set of vertices. Let the set Uofthe directed edges (= arcs) 
be a subset of (@X@) u (@X 6), i.e., there exist only arcs of the types (Xj, Xj) 
and (Xk' Yl). We denote by rz the set of the immediate successors of a vertex Z 
and by r-1z the set of the immediate predecessors of a vertex Z, and let the 
following relations be true: 
a) r-1 Xo = 0 (that means that the first question to be asked has no prede-
cessor) ; 
b) IrXI ~ 2 for all X E @ (that means that at least two different answers 
can be given to each question asked, and one of the answers can result in the iden-
tification of an event, thus rx n ~ =F 0, or the formulation of a new question, 
thus TX n @ =F 0); 
c) ry = 0 for all Y E ~ (that means that after the identification of an event 
- say after the determination of the colour of the ball in our example - no other 
question is asked), which already follows from the definition of U; 
Ys 
bl 
Fig. 7.1 

174 
Chapter 7 
d) to any Y E ?J there exists a path (Xo = Xi" Xi., ... , Xi., Y) with Xii E @ 
and (Xir' X ir+,) E U for r = 0, 1, ... , k -
1 and (Xi., Y) E U (that means that 
the set of the available questions must be of such a kind that each event can be 
identified by a finite number of questions). 
Such a graph is called a questionnaire. The vertices X E @ are called questions. 
The events Y E ?J are sinks of the graph G. Xo (the first question) is the only 
source existing in G. 
No special interest is attached to those questions which never have an event as 
immediate or mediate successor, and to those questions which can never be attain-
ed by a sequence of questions starting from Xo (cf. Fig. 7.1). Therefore, reductions 
can be made according to Fig. 7.1 without any restrictions. In Fig. 7.1, we have 
not yet indicated any probabilities for the occurrence of the Y io It can be seen 
that, in order to save questions (and thereby in our example, to save money!), one 
would never ask the question Xo, since all events that can be attained via X 2 are 
also attainable via Xa, that is, the first question Xo can be saved and X3 becomes 
the first question (although we have not yet defined what we mean by an optimal 
questionnaire) . 
Fig. 7.2 
Let us now come to the definition of an optimal questionnaire. As four our game, 
the point is to minimize the average number of questions needed to identify the 
colour of the ball drawn. It is presumably not the aim of the second player to iden-
tify a large part of the events by asking only a few questions if, on the other hand, 
he has to ask a large number of questions for determining the events with only 
small probabilities (cf. Fig. 7.2). The denotations on the graph will probably be 
understood without being explained in detail. 
Question 1: Is the ball of colour Fl1 If the answer is "Yes", then the second 
player has won two Marks, if the answer is "No", we go to 

Coding and decision graphs 
175 
Question 2: Is the ball of colour F2? If the answer is "Yes", then the second 
player has won one Mark, if the answer is "No", we go to 
Question 3: Is the ball of colour F3? and so on ... 
The reader may find out by himself that by proceeding in this manner, 3.46 
questions on average are necessary, that in the long run the second player will 
lose although he gets two Marks in 30% of all cases, at least one Mark in almost 
50% of all cases, and although the first player wins something in only 40% of all 
cases. 
First of all, we have to give a few concepts necessary for solving the problem of 
finding an optimal questioning strategy. 
DEFINITION. A questionnaire is said to be homogeneous of the order a if for each 
vertex X E @ the relation ITXI = a holds. 
As we shall see in what follows, the so-called quasi-homogeneous questionnaires 
are of special importance. 
DEFINITION. A questionnaire is said to be quasi-homogeneous of the order (a, b) 
if for all X E @, except for one vertex Xi E @ at the most, the relation Irxi = a 
holds and if for that single vertex Xi the relation IrXd = b ~ a is true. 
In order to speak of optimal questionnaires, we first have to define that class of 
questionnaires which we wish to consider. 
We call two quasi-homogeneous questionnaires F and F' of the order (a, b) 
equivalent if there exists an injective mapping X ofthe set ~ of sinks onto the 'set 
![Y' of sinks in case of which the probability distributions are preserved, i.e.: 
p(Y) = p'(X(Y)) for all 
Y E ![Y. 
Now, we turn to the concept of the mean length of a questionnaire. This notion 
makes no difficulties at all if the graph considered is a rooted tree, thus cycle-free. 
Then, there exists to each event Y E ![Y precisely one directed path going from 
Xo to Y. The number of edges of such a path W( Y) is called length l(W( Y)) of 
W( Y) or simply length l( Y) of Y. By the mean length L(F) of the questionnaire 
F(x, U) we mean the value 
L:= I: p( Y) l(W( Y)). 
YEry 
From this, we can deduce the value 3.46 for the average number of questions of 
our special questionnaire depicted in Fig. 7.2. 
We might now be inclined to say that a quasi-homogeneous questionnaire is 
optimal if it has a minimal mean path length with respect to all questionnaires 

176 
Chapter 7 
F 
Fig. 7.3 
X' o 
F' 
that are equivalent to it. As is shown by Fig. 7.3, a class of equivalent question-
naires also contains questionnaires having cycles or circuits. For such graphs, 
however, the number of paths going from the source Xo to an event Y may be 
larger than 1, and in the case of the existence of circuits, this number can even 
go ad infinitum. 
7.2. ALGORITHM FOR THE GENERATION OF A CYCLE-FREE 
QUESTIONNAIRE 
Looking at the two questionnaires F and F' of Fig. 7.3, we see that any path 
joining XO' to Y' in F' (yl E g:' arbitrarily) is at least as long as the path joining 
Xo to Yin]l (we set Y' = x( Y)). We would certainly prefer the questionnaire F 
to the questionnaire F'. 
Thus, it will be our aim to generate from a given questionnaire F' having cycles 
or circuits a questionnaire F which has no cycles and in which tIle path length 
from Xo to Y (Y E g: arbitrarily) is not longer than any path in F' joining XO' to 
Y'. Then, we restrict the equivalence classes so that only so-called questionnaires 
of arborescences (i.e. rooted trees) are investigated, among which we seek one that is 
of minimum path length (in general, we cannot expect unicity). 
Algorithm for eliminating circuits and cycles 
(i) Let K' be a circuit in F'. Since XO' has no predecessors, it holds XO' ~ K'. 
Further, let W' be a shortest path joining XO' to a vertex, say to Z', of K' (since 
each vertex of F' can be reached from Xo via at least one path, W' exists, but not 
necessarily uniquely). We can ascertain without difficulty that the arc of K' 
whose end-point is Z' can be omitted without causing a change in the distance 
between any vertex V' and XO' in F' (this is the length of a shortest path going 
from XO' to V'). 

Coding and decision graphs 
177 
(ii) Let all circuits of p' be eliminated by (i). Let C' be a cycle of the graph 
that has resulted in this way (for the sake of simplicity, we continue to denote 
this graph by P'). Since C' is not a circuit, there exists on C' a vertex Z' with at 
least two immediate predecessors. Thus, there exist at least two paths from 
Xo' to Z' (which differ from each other by at least one arc). We omit the last arc 
of the longer of both paths (if the two paths are of equal length, we omit the last 
arc of any of them). Also in this operation, there still exists at least one path from 
Xo to each vertex of the resulting graph, and the length of such a shortest path 
is not increased. If all cycles are eliminated in this manner, then the resulting 
graph is a rooted tree, but this one is not necessarily equivalent to P' (e.g., several 
questions might arise with a number of successors smaller than a). 
(iii) Let X' E @' be a vertex of the newly generated graph (which we continue 
to denote by P') without successors. Then (since no path is going to any event via 
X') we omit X' and also the arc entering X' (only one arc can enter each vertex, 
since otherwise P' would still contain cycles). This operation is carried on as long 
as possible. 
(iv) Let X' E @' be a vertex with less than a successors, and let Xl' E @' be 
a question which has at least one event YI ' E ~' as successor. If l(X/) > l(X'), then 
we eliminate the arc (Xl', YI ') and insert the arc (X', Y/). In this way, we "satu-
rate" all questions with a view to their succession, except perhaps for some ques-
tions that have a maximum distance fromXo'. Obviously, after the saturation 
procedure no vertex is reached on a longer path than before step (iv) has been 
performed. 
(v) All questions not yet saturated (which, as far as they exist, all have the 
same, and even maximum distance from X o') are completed, except for one, per-
haps so that (cf. (iv)) all remaining questions, except for one at the most, namely 
X n', are saturated when (iii) is repeatedly applied (among the questions X n' has 
maximum distance from Xo'). 
Because the questionnaire is finite, the algorithm terminates, i.e., neither 
(iii) nor (iv) nor (v) is then applicable. 
(vi) If X n' has exactly one successor, say Y' (of course, the successor of X n' can-
not be a question), then we remove the arcs (X;', X n') and (Xn', Y') in case 
X/ is the immediate predecessor of X n' as well as the question X n', and insert the 
arc (X/, Y'). 
If (vi) is applicable, then even a homogeneous questionnaire of order a is gen-
erated. In all other cases, however, it is a quasi-homogeneous one of order (a, b). 
An example will serve to illustrate the algorithm (0Â£. Fig. 7.4). The events have 
been numbered and indicated in large circles, whereas the questions are marked 
by small circles. 

a) 
application of (i) 
b) 
application of (i i ) 
c) 
application of (i i ) 
d) 
appLica~ion of (i v) 
e) 
application of (i i i ) 
fl 
application of (v) 
Fig. 7.4 
g) 
application of (vi) 
h) 

Coding and decision graphs 
179 
No definition has been made of what we understand by the mean length of a 
questionnaire with circuits or cycles. However, a meaningful definition has to 
ensure that the mean length of F (constructed from F' according to (i) to (vi)), is 
not longer than that of F'. 
All the problems relating to the definition of the mean length in questionnaires 
containing cycles are discussed in more detail in the book of C. F. Picard [1]. 
7.3. OPTIMAL QUESTIONNAIRES 
Now we turn to the second problem to be solved, namely to find among all equi-
valent questionnaires of arborescences (i.e. rooted trees) an optimal one, that is, 
such a questionnaire whose mean length is minimum. 
First, we make a detailed designation (coding) of the questions and events in 
a quasi-homogeneous questionnaire (cf. Fig. 7.5). 
2 
2 
Z'=[2,12J 
0 
2 
0 
2 
Z~(4) 1002J 
0 
2 
o 
2 
0 
0 
2 
2--...0 
0 
Fig. 7.5 
Two natural numbers (!, a are assigned to each vertex Z of the questionnaire. 
Thus, (! is the length of Z (distance from Xo) and a a code-word consisting of (! 
figures in the number system with the base a. For fixing the figures of a we need 
the path W going from Xo to Z. If rxo = {g;(Xo), i = 0, 1, ... , a -
1} is the set 
of the a successors of Xo and if W contains the vertex g;(Xo), then let i be the first 
figure of (J. Correspondingly, the other figures of a are then fixed according to Fig. 
7.5. Note that (! is given in the decimal system and a in the a-adic system (it is, 
of course, possible to give also a in the decimal system). If a is given in the a-adic 
system, one could easily do without the indication of the number (!, since the length 

180 
Chapter 7 
of the vertex can also be seen from the number of figures of G. In the case of decod-
ing problems, however, the indication of (} could possibly play an essential part. 
Let us recall that to each event (i.e., to each vertex of tr) we had assigned a 
probability of its occurrence. If we have a questionnaire of arborescences, then we 
also assign recursively a probability to each question. Let X be a question of which 
all immediate successors already possess a probability. Then, we assign to X the 
sum of the probabilities of all immediate successors of it as its (own) probability. 
Now, we come to the important concept of the permutation ot disjoint subarbores-
cences. Given a questionnaire Qf arborescences F. A subarborescence H of F is a 
subgraph of F which contains not only any vertex, but also all of its successors 
(with respect to F), as well as exactly one vertex (the root of the subarborescence) 
which has all other vertices of H (except for itself) as immediate or mediate 
successors (cf. Fig. 7.6). 
: 
Z/Â·. 
Fig. 7.6 
The probabilities of the questions and of the events remain in H the same as 
in F, but this means that a subarborescence is in general not a questionnaire. 
Let Z and Z' be the roots of two disjoint subarborescences Hand H', respec-
tively, of F with the probabilities p(Z) and p(Z'), respectively. If one exchanges H 
for H' including the probabilities of the vertices of Hand H' (followed by the 
redetermination of the probabilities of the predecessor vertices of Z and Z'), 
then a questionnaire of arborescences equivalent to F is obviously generated 
(cf. Fig. 7.7). 
In the following, we give a few rules by means of which one can construct from a 
given questionnaire of arbotescences another such questionnaire with a mean length 
that is certainly not longer. 

Coding and decision graphs 
181 
RULE 1 (Permutation of events): Let Z, Z' be events with l(Z) < l(Z') and 
p(Z) < p(Z'). Then, we exchange the event Z for Z'. Obviously, the mean length 
of the questionnaire is decreased by this operation. 
0.4 
0.2 
0.15 
Xo 
0.1 
Xo 
0.1 
0.05 
0.4-
0.15 
0.2 
aJ 
bJ 
0.1 
Fig. 7.7 
RULE 2 (Permutation of subarborescences): Given two disjoint subarborescences 
H, H' with the roots Z and Z', respectively, with at least one of the subarbores-
cences consisting of not only one event. Let l(Z) < l(Z') and p(Z) < p(Z') be true. 
Exchanging the two subarborescences leads to an equivalent questionnaire with 
shorter mean length. 
The truth of this assertion may be verified by the reader himself. 
Likewise verify the truth of the following assertion: 
LEMMA. Let F be an optimal homogeneous questionnaire of arborescences, and let 
further Z and Z' be two vertices of F with p(Z) = p(Z'). Then, it holds Il(Z) -
l(Z')1 
~ 1. But if p(Z) < p(Z'), then it holds l(Z) ~ l(Z'). 
It might be thought that the repeated application of the two rules leads inevi-
tably to an optimal questionnaire of arborescences. However, the example repre-
sented in Fig. 7.8 shows that this is not the case. 
Using a third rule, which causes no change even in the mean length (namely 
exchange of arborescences of those subarborescences whose roots have the same 
length), the probabilities of some certain vertices that are no events will be 
altered so that it will again become possible to apply rule 1 or rule 2. 
RULE 3: Rearrange the vertices so that for two vertices Zl = [(1,0"1] and Z2 
= [(I, 0"2] with 0"1 < 0"2 it always holds P(Zl) ~ P(Z2)' If possible, apply now rule 1 
or rule 2, etc. 

182 
Chapte1 
0.4 
0.4 
0.1 
0.3 
0.1 
0.1 
0.1 
0.1 
oj 
0.1 
bJ 
Fig. 7.8 
If one applies rule 3 say to the questionnaire Fig.7.8a, then the graph of 
Fig. 7.8b is generated to which rule 2 is applicable. 
Now, we come to the optimality criterion. 
THEOREM 7.1. Let F be a quasi-homogeneous questionnaire of arborescences of 
order (a, b) to which none of the rules 1 to 3 is applicable any more. Then, F is optimal, 
that is, it has minimum mean length. 
If this theorem should be proved, we shall be able to obtain an optimal question-
naire from a quasi-homogeneous questionnaire of arborescences by using a simple 
method. 
A new concept will now be introduced for the proof of the theorem. 
DEFINITION: We call a questionnaire of arborescences (shortly QA) F ordered 
(shortly OQA) if none of the rules 1 to 3 is applicable any more. 
LEMMA. Let F be an optimal QA. Then, by applying the rule 3 (the rules 1 or 2 are 
not applicable because of the optimality of F), F can be rearranged to form an 
optimal OQA Fl' 
The proof of this lemma is clear. 
By using the above-given acronym, our theorem takes on the following shape: 
THEOREM 7.2. Let F be a quasi-homogeneous OQA of order (a, b). Then, F is 
optimal. 
First, we mention that an optimal quasi-homogeneous QA of order (a, b) satis-
fies the relation 2 :;2;; b :;2;; a, since for b = 1, one question could be saved, which 
would then lead to a reduction of the mean length. 

Codmg and decision graphs 
183 
Proof. Let F be an optimal questionnaire of arborescences (QA) of order (a, b), 
and let Fl be an OQA of same order which has emerged from F by applying the 
rules 1 to 3. Because of the lemma, F 1 is optimal. 
Let F2 be any quasi-homogeneous OQA of same order (a, b) with 2 ~ b ~ a 
equivalent to Fl' We shall show that F2 is also optimal, which would then prove the 
theorem. 
We consider in F j (i = 1,2) a question Xjl of minimum probability. Since F j 
is ordered, XiI has exactly b successors Yji (j = 1, ... , b), and these b succeeding 
events have minimum probability (that means: For any event Yj ~ {Yjl, ... , y;b} 
it holds p( Yj ) ~ max p( Y/) for i = 1,2). Now, we form from F; = F/ 
l~j~b 
new OQA's by omitting the b events Y/ and also the arcs going to them, and by 
b 
making Xii a new event with the probability p(Xjl) =}; p( Yji). Since F J and F2 
j=1 
are equivalent, it holds P(Xll) = P(X21). The mean lengths of the two OQA F j2 
which result in this way (the reader will prove by himself that these questionnaires 
of arborescences are ordered) have been decreased by the same amount, namely 
by p(Xh since it holds: the mean length of a QA equals the sum of all probabi-
lities of the questions contained in the QA (task!). 
Now, we carryon the "shrinkage" of the F j â¢ In F j2 (i = 1,2) there exists again 
a question Xj2 of minimum probability, whose a succeeding events also have mini-
mum probabilities (among the probabilities of the events in F j2). We omit these a 
events and also the arcs leading to them and turn Xj2 into an event of the OQA 
generated in this manner with a probability p(Xj2). Here again, the relation 
P(XI2) = P(X22) is true because the QA is ordered, and the mean length of the 
two OQA decreases by the same amount p(Xj2). 
We carryon this shrinkage (mathematical induction!) and get two OQA 
F;" after n -
1 steps of shrinkage (if there exist in F j exactly n questions). These 
two OQA possess only one question and a events and have the same mean lengths, 
namely 1. Each step of shrinkage has caused a reduction of the mean lengths of 
30 
40 
"cD 
Fig. 7.9 
19 

184 
Chapter 7 
the OQA by the same amount, which makes it clear that they already had the 
same mean lengths at the beginning of the shrinkage. Since Fl was optimal by 
premise, F2 is also optimal. 
This proves the theorem, and we have also found a way to obtain an optimal 
QA. Either we seek any questionnaire of arborescences of a given equivalence class 
and repeatedly apply the rules 1 to 3 to it until the algorithm terminates, or, which 
will enable us to achieve our goal more quickly, we combine the b events of least 
probability into one question, transform this question "temporarily" into a new 
event, combine now the remaining events of least probabilities into a new question, 
transform this question again "temporarily" into a new question, transform this 
question again "temporarily" into a new event, and so on. This algorithm has 
been devised by D. A. Huffman (cf. [1]). For the game formulated in 7.1 there 
results an optimal questioning strategy according to Fig. 7.9 (task: Is it possible 
for the second player to win in the long run?). 
7.4. AN EXAMPLE FROM CODING 
In the case of coding, the following problem is to be solved: A communication 
source emits n distinct symbols Sj (i = 1, ... , n). (In the German language for 
example 26 letters ignoring whether one puts a = ae, etc. and ignoring. , ! ? -
etc.) A code having N symbols Ti (j = 1, ... , N) consists of n code-words for the 
Sj, each consisting of a sequence of symbols Ti, with the kth code-word being 
composed of lk symbols. For making a unique decoding, however, it is necessary 
to assure that a code-word is not the left-hand part of another code-word. 
Let us take as example the Morse code (cf. Fig. 7.10). 
In this case, it is N = 3 with the symbols point, da8h, ignore. The numbers 
at the end-points indicate the probabilities (cf. [3]) for the occurrence of the single 
letters of the German alphabet in the texts considered by the author. In our re-
presentation, all signs such as point, comma, spacing, question-mark, etc. come 
under "ignore". Since the "ignore" used in the Morse code only serves to separate 
the single letters (from each other), a unique decoding can be guaranteed. However, 
the reader may realize that this way of coding is not optimal in the sense described 
above. An optimal Morse code containing three signs -
and the reader may veri-
fy this -
has the length 2.6130. Thus, the mean length of the Morse code is greater 
by almost 0.5 than an "optimal" alphabet containing three signs. Of course, we 
do not want to conceal that the "optimal alphabet" would entail some other diffi-
culties, for example problems in the error detection in case of transmission errors. 
Another problem might be that certain code-words require very many symbols. 
If one tried to comply more conveniently with the concrete linguistic conven-
tions of a living language (the single letters occur by no means independently of 
each other, as a living language possesses a high degree of redundancy), then one 
would have to consider pairs, triples, quadruples, etc., of letters and their proba-

bilities in a language. Such attempts have been made. The interested reader is 
referred to [2]. Naturally, the words to be coded are numerically increasing. Con-
sidering pairs of letters, one would have to code already 272 words (although some 
of these pairs are unlikely to occur, for example, in the German language, say the 
pair "qy"). However, with this approach it is possible to make the mean lengths 
of the corresponding questionnaires (with respect to a letter) considerably shorter 

186 
Cha pteI' 7 
than for instance in the above-mentioned case with only 27 "words" (in natural 
language, each of these "words" represents l'!- letter). 
TASK. How long is the mean length of the "optimal alphabet" in the case of two code 
symbols, using the probabilities according to Sacco [3] (cf. Fig. 7.10)? 
An illustrative combinatorial introduction to the fundamental concepts of 
information theory and to codes and error correcting codes is given in [5]. Further, 
the reader is referred to the code developed by R. Hamming [4]. 
7.5. BIBLIOGRAPHY 
[1] Picard, C. P.: Theorie der Fragebogen, Berlin 1973. (Translated from the French.) 
[2] Fey, P.: Informationstheorie, 3rd edn., Berlin 1968. 
[3] Sacco, L.: Manuel de scriptographie, Paris 1951. 
[4] Hamming, R.: Error detecting and error correcting codes, Bell System Techn. J. 26 (1950), 
147-160. 
[5] Zemanek, H.: Elementare Informationstheorie, Munich 1959. 

Chapter 8 
Signal flow graphs 
8.1. FORMULATION OF THE PROBLEM 
Given, for example, the electrical circuit of Fig. 8.1. Let the Ri denote the ohmic 
resistances, the Ei electromotive forces and the h branch currents and their arbi-
trarily prescribed direction. 
The branch currents are unknown quantities which can be calculated by using the 
Kirchhoff's laws (cf. chapter 1). The problem set leads to the solution of a linear 
inhomogeneous system of equations for the h values. 
Fig. 8.1 
For setting up the equations by using the Kirchhoff's node rule, only those points 
are of interest at which branchings occur. These points have been set off in Fig. 
8.1. One sees exactly four, and according to the flow theory discussed in chapter 1, 
we get exactly three independent vertex equations. 
For setting up equations using the second Kirchhoff's theorem (mesh rule), we 
need the number of independent circuits. In our case, there are exactly three such 
circuits, i.e., three mesh equations are added to the three node equations. When 
suitably chosen, these equations provide together a system of six equations for the 
six unknowns Ik (k = 1,2, ... ,6) for which the appertaining matrix of coefficients 
is regul~r. Thus, a unique solution of the system of equations is assured. 

188 
Chapter 8 
For our example, the following system of equations would be of the required 
type: 
Rl 
0 
0 
0 
R5 
-R6 
- 11 -E'l 
0 
R2 
0 
R4 
R5 
0 
12 
E2 
0 
0 
-R3 
-R4 
0 
-R6 
13 
0 
1 
1 
0 
0 
-1 
0 
14 U 
0 
0 
0 
-1 
1 
1 
16 
-1 
0 
1 
0 
0 
-1 
15 
The first three equations result from the mesh rule, the last three from the node 
rule. 
In chapter 1, we saw that in a graph (network) with n vertices and exactly m 
arcs (branches), there exist exactly m - n + 1 independent cycles (meshes) and 
that one can always find a system of equations with a regular matrix of coefficients 
(which is composed of n -
1 node equations and m -
n + 1 mesh equations) for 
the branch currents wanted. 
The analysis of linear electrical networks leads either directly or indirectly to 
the solution of linear systems of equations (directly: see example of Fig. 8.1). 
An example of the analysis of a network resulting indirectly in the solution of 
a system of equations will be considered at the end of paragraph 8.2. 
In 1953, S. J. Mason published his work on linear flow graphs [2]. Since that 
time, a number of graphs have been introduced for the analysis of networks. We 
shall consider two types of them, namely structure and signal flow graphs. Nguyen 
Mong Hung [4] means by a 8tructure graph a (directed or undirected) graph which 
has the same structure as the given network (namely an isomorphic one), and by 
a 8ignal flow graph he means a directed arc-valuated graph reflecting the algebraic 
relations between the variables occurring in the network. Thus, for example, the 
complete graph K4 with four vertices has the same structure as the network repre-
sented in Fig. 8.l. 
In most of the chapters of this book, we deal - in the sense of this definition -
with structure graphs. The present section will be devoted to some remarks con-
cerning signal flow graphs. 
The main purpose of signal flow graphs is to illustrate the courses of signals, but 
the valuations written at the arcs must, on no account, suggest flows. In control 
engineering, for example, it is agreed that a fully traced point represents a branch-
ing point (0Â£. Fig. 8.2a) for which the relations indicated apply, as is also the 
case for the other figures. As shown by the Figs. 8.2c and d, not only linear alge-
braic operations (e.g. multiplication and division) can be represented this way. At 
the end of 8.2, we shall show by means of an example that it is also possible to 
describe by this kind of representation, for example, systems of differential equa-
tions in a clearly arranged way. It will be mentioned here that, in order to get a 

Signal flow graphs 
189 
lucid solution of such systems, one deliberately goes over from the time domain to 
the frequency range using the Laplace transformation. The interested reader may 
find for example in [6] an introduction to these problems given in special considera-
tion of control engineering aspects. 
As for investigations conducted in the frequency range, the representation of the 
transfer processes in the form of block flow charts has been adopted. Figure 8.3 
shows a few examples (parallel connection, series connection and feedback) with 
the appropriate simplification rules (to the right of them). The transfer function 
0) 
b) 
Fig. 8.2 
c; 
d) 
parallel connection 
series connection 
u 
x 
Fig. 8.3 
x ~ 
feedback 

190 
Chapter 8 
for feedback ensues, for examp.le, from the relation (which holds in the frequency 
range) : 
X(p) = Gv(p) U(p) + Gr(p) Gv(p) X(p) , 
from which the traIltlfer function indicated can be derived without difficulty: 
G(p) = 
Gv(p) 
1 -
Gv(p) Gr(p) 
Figure 8.4 shows the different kinds of description, namely using the block 
chart on the one hand and the signal flow graph on the other, and the conversion 
of one into the other. 
-L.j G(p) p--. 
U 
G(p) 
x 
o>-----~~o 
Fig. 8.4 
8.2. THE ALGORITHM OF MASON FOR SOLVING LINEAR SYSTEMS 
OF EQUATIONS 
Let us now present an algorithm which makes it possible to solve a system of equa-
tions and to follow constantly the successive solving (eliminat~on of variables), 
which explains why this approach is so popular. 
Consider a system of equations 
A:r = b 
or, written in another way, 
anXl + .. , + alixi + ... + alkxk + ... + alnXn = b1 , 
a21x l + ... + a 2ix i + ... + a 2kx k + ... + a 2nX n = b2 , 
If we choose any row, say the ith one (make sure that aii =F 0), and if we solve it 
for Xi> then we get 
1 
Xi = -
(b i -
aj1xl -
â¢â¢â¢ -
ai,i-lxi-l -
ai,i+1Xi+1 -
â¢â¢. -
aikxk 
ajj 

Signal flow graphs 
191 
If we substitute Xi in the kth row, then we get 
1 
+ aki -
(b i -
a,lxl -
... -ai,i-lxi-l -ai,i+1x i+1 -
... -
aikxk-'" -
ainXn) 
ai; 
+ ak,i+1x i+1 + ... + akkxk + .. , + aknXn = bk 
or in an ordered form 
Assign to this system of equations a graph with n vertices in the following way: 
each of the variables corresponds precisely to one of the vertices. In Fig. 8.5, we 
have drawn the vertices by large circles which contain a small circle; this one 
corresponds to the variable assigned to it (the index is drawn in the small circle) 
oj 
Fig. 8.5 

192 
Chapter 8 
The vertex assigned to the variable Xi is provided with the coefficient aii. An arc 
with a valuation alk going from the vertex having the indexl(in the small circle) to 
the vertex having the index k is then introduced. If alk = 0, the arc can also be 
omitted. The arc (whose end-point is not denoted at all) leaving the vertex with the 
index 1 is provided with the valuation bl â¢ 
lt is thus possible to read immediately from the graph the system of equations 
which corresponds to it (cf. Fig. 8.6), namely: 
6 
2 -1 -1 
1 
Xl 
5-
0 
2 
1 
2 
3 
X2 
8 
-1 
0 
4 
2 -5 
X3 
-4 
-3 -1 
0 
3 
0 
X4 
6 
1 
1 -2 
0 
4 
X5 
7 
Now, we consider the substitution of a variable of the graph, say Xi (Fig. 8.5a). 
When X. has been eliminated, the coefficients change as follows: for the modified 
right-hand sides of the originally kth row we get 
for the modified element a~1 
(l =l= k) 

Signal flow graphs 
193 
and for the new diagonal element a~k 
which represents the same expression as for l = k. 
These new values are indicated in the reduced graph in Fig. 8.5 b (that is, in the 
graph reduced by the vertex with the index i). Figure 8.7 shows the graph which 
belongs to the system of equations after the elimination of Xl in our example. It 
~; -
c 
Fig. 8.7 
B 
;. 5 
c; 
will not be difficult for the reader to follow up the single elimination steps. Accord-
ing to the Gaussian algorithm, one can now go the other way round and derive 
the solution from the reduced graphs. Then, one gets 
Kai Wai Chen [7] suggests a "generalized" Mason's algorithm making it possible 
to eliminate not only one single vertex (i.e., only one variable). Describing this 
algorithm seemed to us too sophisticated (an example with only seven variables re-
quires, according to this method, very many drawings and calculation filling sev-
eral pages). As we have already stated at the beginning of this chapter, Mason's 
algorithm does not serve exclusively for solving systems of equations, but rather 

194 
Chapter 8 
for signal tracing and monitoring. Therefore, it will be necessary for the interested 
reader to familiarize himself with some special literature. Our concern is to give 
only some ideas and an introduction to certain methods. 
Let us consider an example (which we have taken from the textbook [6] of 
K. Reinisch) that leads to a linear system of equations containing one parameter 
and that can be solved by means of the algorithm given by Mason (but, of course, 
also by other means). 
i1 
[u 
Rz 
R1 
Ix 
12 
i1 
I u2 Â·q2 
e1I 
! U1 ~q1 
v 2I 
~ 
t 
I 
t 
t 
o. 
0 
Fig. 8.8 
We consider the electrical transfer element of Fig. 8.8. Using Kirchhoff's rules 
and the relations 
(k = 1,2) 
and introducing the time constants 
we get the system of linear differential equations of the first order for the state 
variables ql and q2: 
1 
1 
(iI = -
Tl ql + Tl q2, 
(0) 
. 
T21 
Tl + T2l 
1 
q2 = TIT2 ql -
TIT2 
q2 + T2 U 
with the output equation x = ql' A system of linear ordinary differential equa-
tions of the first order of type (0) can be transformed into a system of linear equa-
tions by applying the Laplace transformation. InÂ· our example, the following 
system of equations results: 
Here, we denote by Qk(P) the Laplace transform of qk(t) (k = 1, 2) and by U(p) the 
Laplace transform of u(t) (unilateral transform in either case if we imagine a ten-
sion u(t) to be applied to the input of the transfer element at the time t = 0). 

Signal flow graphs 
195 
If we assign, as agreed above, a graph to the system of ~quations, then we ob-
tain the graph represented in Fig. 8.9. Solving this system according to the speci-
fications given in Fig. 8.5 or also according to the formulae calculated results 
for the variable Ql(P) wanted in 
(with given time constants say Tl = T2 = 2T21 = T), as can be verified by the 
reader. 
Since there are products of Laplace transforms in the transformed domain, the 
output function x(t) = ql(t) results in the form of a convolution integral in the 
TZ1 
- Tl T2 
_1-
Tl 
Fig. 8.9 
case of any u(t) as input tension. In order to get an insight into the solution, one 
can choose for instance a step function 
u(t) = a(t) = Uo (for t ~ 0) 
as input. Hence it follows for the solution of our specialization (in consideration 
. 
1 
of the fact that the Laplace transform of a(t) IS equal to -): 
P 
x(t) = ql(t) = Uo [a(t) -
~ exp ( __ 
t ) +..!.. exp ( __ 
t )J- . 
3 
2T 
3 
..!.. T 
2 
Our concern in this chapter was not to deal with problems relating to the appli-
cation of the Laplace transformations. We only wanted to present a possible way 
(which is often applied by control engineers) of not only solving, by using the 
idea of Mason (which ensued from the treatment of the transmission of signals), 
systems of equations (for this, the well-known Gaussian algorithm is certainly more 
suitable), but furthermore, of following up constantly the signal courses and reci-
procal dependences when solving systems of equations. 
Mason's graphs and generalized Mason's graphs, as, for example, the normalized 
Mason's graph introduced by M. Roth, are widely applied in the investigation of 
electrical and electronic networks (for example in the analysis of RC operational 
amplifier networks). The normalized Mason's graph is a vertex-valuated graph, 

196 
Chapter 8 
with the vertex valuations causing a certain relativization of the valuations of 
arcs which are incident with these vertices. 
The reader who is interested in this subject is referred to [4] and [5]. 
In addition, the textbook [7] of Wai Kai Chen gives a useful survey of the appli-
cations of Coates' graphs and Mason's graphs. 
Fig. 8.10 
In conclusion, we indicate a possible variant of representing systems of, for example, 
linear differential equations by using signal flow graphs. Figure 8.10 shows the 
signal flow graph of the system 
ql = allql + al2q2 + blu, 
tl2 = a21ql + a22q2 + b2u 
with the output equation 
x = Clql + c2q2 + duo 
8.3. BIBLIOGRAPHY 
[1] Busacker, R. G., and T. L. Saaty: Finite Graphs and Networks, An Introduction with 
Applications. New York 1965 (German: Munich/Vienna 1968; Russian: Moscow 
1974). 
[2] Mason, S. J.: Feedback theory: Some properties of linear flow graphs, Proc. IRE 41 
(1953), 1144-1156 .. 
[3] Mason, S. J.: Feedback theory: Further properties of linear flow graphs, Proc. IRE 44 
(1956), 920-926. 
[4] Nguyen Mong Hung: Entwicklung und Anwendung von Graphenmethoden zur Analyse 
von RG-Operationsverstarker-Netzwerken und zur Untersuchung des Realentwur-
fes derartiger Netzwerke, Diss. TH Ilmenau 1973. 
[5] Roth, M., und Nguyen Mong Hung: Zur topologischen Analyse linearer Netzwerke, 
Wiss. Z. TH Ilmenau 17 (1971), 115-127. 
[6] Reinisch, K.: Kybernetische Grundlagen und Beschreibung kontinuierlicher Systeme, 
Berlin 1974. 
[7] Wai Kai Chen: Applied Graph Theory, Amsterdam/London 1971. 

Chapter 9 
Minimum. sets of feedback arcs 
9.1. FORMULATION OF THE PROBLEM 
During the running of algorithms, for instance for determining an optimal order 
of calculation, loops often playa decisive role. How many feedback arcs have to be 
dissected in order to make the running loop-free or cyc1e-free1 How can minimum 
sets of feedback arcs be found 1 
Using the terminology of graph theory we can formulate the problem dealt 
with in this chapter in the following way: 
Given a directed graph G(I" U). 
1. Find a set of arcs )B ~ U such that the graph r~sulting after the removal of the 
arcs from )B does not contain a circuit (i.e., a uniformly directed cycle). Here, )B shall 
be minimal in the sense that no proper subset of U represents (contains) all circuits. 
)B is called minimal set of feedback arcs. 
2. Among all minimal sets representing all circuits, find a set with minimum number 
of arcs. Such a set is called minimum set of feedback arcs. 
3. Find now algorithms which solve the problems 1 and 2. 1) 
The reader who is interested in more theoretic questions relating to this field is 
referred to monograph [3] (part II). There, a number of statements are made on 
arc and vertex numbers representing all circuits in an undirected graph, but mainly 
with a given number of independent circuits! that is, of circuit sets of which two 
circuits are pairwise disjoint at a time. 
An interesting case of application of the subject introduced above is known 
to us from the field of chemical engineering. Certain flows (of material) corr~spond 
to the arcs, and to the vertices there correspond process units between which there 
are flows. In addition, an arc valuation is given to which correspond parameters 
for determining the flows. First, the total graph is to be decomposed into a sequence 
1) The formulated problem belongs to the class of the NP-hard-problems, that means that 
an exact algorithm always leads to a complete enumeration [5]. 

198 
Chapter 9 
of complexes, with a complex being regarded as calculable if all complexes lying 
before it in the sequence are calculated (it is, however, not our intention to dis-
cuss this decomposition and determination of the order of calculation). In our ter-
minology, a complex is a strongly connected graph. In order to calculate by way 
of iteration the resulting system of equations in a complex, arcs have to be cut 
off, the flows at the cut points have to be evaluated and calculation has to be 
started with these estimates. It is desirable to execute the dissection so that the 
resulting graph is not only circuit-free, but, in addition, the sum of the arc valua-
tions of the dissected arcs is minimized. 
In what follows, we will deal with two algorithms for solving the problems set. 
Section 9.2 is then devoted to an algorithm found by Lempel and Cederbaum, and 
in 9.3 we shall be concerned with an algorithm devised by D. H. Younger. The lite-
rature used for this latter paragraph especially is not so easy to read. 
9.2. THE ALGORITHM OF LEMPEL AND CEDERBAUM 
The method described here can be called a direct one. Each particular step can 
be seen directly from the task to be solved. To what extent this algorithm seems 
to us advantageous will be discussed at the end of this chapter. 
In the first part of this section, we shall deal with the determination of all circuits 
of a simple directed graph. 
Let the graph G be given in the form of its adjacency matrix A. Let the vertices 
of G be numbered from 1 to n. The element aii is equated to zero, for i =1= j we set 
aij = 1 if the vertex i is connected with the vertex j by an arc directed towards j, 
otherwise we set aii = o. From the adjacency matrix A we set up a new matrix B 
in the following way: Let the arcs of G be numbered from 1 to m. We set bii = 1, 
bii = 0 if aii = 0 (i =1= j) holds, and bii = Xr if the arc with the number r is going 
from the vertex i to the vertex j. Consider the example of the graph represented in 
Fig. 9.1. The following matrix B is assigned to this graph: 
1 
0 
Xu 
Xl3 
0 
0 
0 
1 
Xl 
0 
X12 
0 
B= 0 
0 
1 
X2 
0 
Xs 
0 
Xs 
0 
1 
X3 
X4 
X7 
0 
0 
0 
1 
Xs 
XIO 
Xg 
0 
0 
0 
1 
Let {ib i2, ... , in} be a non-trivial permutation of the first n natural numbers 
(n indicates the number of the vertices of G). Consider a product bli,b2i, â¢â¢â¢ bnin 
(as everybody knows, such products occur when forming the determinant of B). 
A product of this kind either represents a set of edge-disjoint circuits (if it is un-
equal to 0), or it is equal to 0 and would then be of no interest for us. 

Minimum sets of feedback arcs 
199 
In our example, say b14b23b36b45b51b62 represents two disjoint circuits, namely 
(X3' X 7, X13) and (xs, X9' Xl)' 
How can we now determine all circuits in G? 
Calculate the determinant of the matrix B. Examine each summand which is 
different from zero and find out whether it represents a circuit or a set of disjoint 
circuits. A summand of the value zero does not yield a circuit (nor does the circuit 
of the value 1 = bu ... bnn ). 
Fig. 9.1 
As determinant of B we get for our example (here, we write for the products the 
sign "+" and for the sums the sign "( ... )" for reasons which become evident only 
when determining minimum sets of arcs which represent all circuits): 
+ + 
/B/ = (1 + 2 + 5) (9 + 1 + 8) (9 + 1 + 2 + 3 + 6) (9 + 1 + 2 + 4) 
(12 + 9 + 6) (7 + 9 + 11 + 8 + 12) (7 + 9 + 11 + 2 + 4 + 12) 
(7 + 9 + 13 + 1 + 3 + 8) (7 + 9 + 13 + 4 + 12) 
(7 + 5 + 12 + 13) (7 + 5 + 12 + 2 + 11) (10 + 13 + 4) 
(10 + 11 + 8) (10 + 11 + 2 + 4) (10 + 1 + 5 + 13 + 8) 
(10 + 6 + 3 + 13) (10 + 6 + 3 + 2 + 11) (10 + 6 + 5 + 12 + 13) 
(10 + 6 + 5 + 12 + 11 + 2) (3 + 7 + 13) (2 + 3 + 7 + 11). 
It can easily be seen by trying out that all circuits are in fact contained. It may 
also happen that some certain circuits occur several times, namely those circuits 
whose determinant summand does not only represent a circuit. Such circuits 
occurring several times may be treated just as if they are encountered only once. 
It can be seen directly that really no circuit is omitted when using this method. 

200 
Chapter 9 
Now, we deal with the question of how to determine minimal sets of arcs repre-
senting all circuits, that is, those sets which do not contain a proper subset already 
representing all circuits. The method described in the following can also be defined 
to be a direct one. 
Assume there exist in G precisely k circuits K I , ... , Kk â¢ Further, we assume that 
we have ascertained all minimal sets of arcs representing those k -
1 circuits 
KI , .. . ,Kk- l (that is, not only those sets of arcs which have a minimum number of 
circuits). Let for instance 9)/: = {Xi" X", â¢â¢â¢ , Xi) be such a minimal set of arcs. 
If Kk contains at least one of these arcs Xii' then 9)/: is also representative of all k 
circuits. But if 9)/: and Kk do not contain an arc in common, then each set 9)/:' of 
arcs is represent~tive of all k circuits if it contains not only all arcs of 9)/:, but also 
one arc of Kk â¢ This, however, does not mean that 9)/:' must also be minimal. 
The following can be stated: Let 9)/:' = {Xi" Xi" â¢.â¢ , Xir, X} be representative of 
all circuits, but not minimal (with X E Kb and no arc of 9)/: is contained in Kk). 
Then, without restriction of generality,9)/:" = {Xi" â¢â¢. , Xi,' X} is already represen-
tative of all circuits. If 9)/:",is minimal, then it represents also all circuits Kl> ... , 
Kk- l and is minimal for this set of circuits or it contains a proper minimal subset 
representing the circuits K I , ... , K k- l â¢ In the first case, we can do without 9)/:' 
for representation, and we find among the minimal sets of arcs representing the 
first k -
1 circuits a set which has 9)/:' as superset. Of course, this applies also if 9)/:" 
is not minimal. 
In order to make this fact profitable for our algorithm, we only need to include 
successively all circuits in the examination and to introduce new minimal sets if 
there exists no single proper subset among the hitherto existing ones .. 
For this, we take our example. We have taken down all circuits. We imagine 
the circuits to be numbered in the order indicated. For representing the circuit 
(1 + 2 + 5) each of its arcs can be used. Moreover, it is a minimal-representing 
one, thus 
Obviously, 
R2 : {1}, {2, 8}, {2, 9}, {5, 8}, {5, 9} 
are minimal-representative of KI and K 2â¢ Furthermore, 
R3: {1}, {2, 8}, {2, 9}, {3, 5, 8}, {5, 6, 8}, {5,9} 
arc minimal-representative of K I , K2 and K 3â¢ We continue in this way. 
The reader will verify that for representing all 20 circuits ((7 + 9 + 13 + 1 + 3 
+ 8) was the sum of two circuits) the following sets turn out to be minimal (this, 

Minimum sets of feedback arcs 
201 
however, already involves much calculation): 
{1, 3, 10, 12}, {1, 6, 7, 10}, {1, 6, 11, 13}, {1, 7, 9, 1O}, {1, 7, 10, 12}, 
{1, 9, 11, 13}, {1, 11, 12, 13}, {2, 6, 8, 13}, {2, 7, 9, 10}, {2, 8, 9, 13}, 
{2, 8, 12, 13}, {2, 9, 10, 13}, {2, 9, 11, 13}, {3, 5, 9, 10}, {5, 7, 9, 10}, 
{5, 9, 11, 13}, {1, 2, 10, 12, 13}, {1, 3~ 4, 8, 12}, {1, 3, 4, 11, 12}, 
{1, 4, 6, 7, 8}, {1, 4, 6, 7, 11}, {1, 5, 6,11, 13}, {1, 6,7,8, 13}, 
{2, 3, 4, 8, 12}, {2, 3, 8, 10, 12}, {2, 3, 9, 10, 12}, {2, 4, 6, 7, 8}, 
{2, 6, 7, 8, 10}, {2, 7, 8, 10, 12}, {3, 4, 5, 6, 8}, {3, 4, 5, 8, 9}, 
{3, 4, 5, 8, 12}, {3, 4, 5, 9, 11}, {4, 5, 6, 7, 8}, {1, 3,4,5,6, 11}, 
{4, 5, 6, 7, 9, 11}, {4, 5, 6, 8, 11, 13}. 
If we want to find minimum sets, we examine the sets consisting of f01.1r ele-
ments each. 
. 
It can immediately be seen that for representing all circuits at least four arcs 
are in fact required, because the four circuits (1,2,5), (6,9,12), (8,10,11), 
(3, 7, 13) are pairwise disjoint, and for representing them one arc is necessary 
for each circuit. 
If the arcs are weighted (that is, if it is desired to take certain arcs in a minimal 
set wanted into considtJration), all minimal sets have to be calculated, which makes 
it possible to determine among them the minimum with respect to the weighting. 
9.3. THE IDEA OF YOUNGER 
In this section, we are concerned with a method for determining minimum sets 
of feedback arcs published by D. H. Younger in 1963. To run the algorithm 
devised by him up to the end, one would certainly need more computing operations 
than for the approach suggested byCederbaum and Lempel which itself requires 
a lot of computation. Nevertheless, some of his ideas are very interesting, so we 
want to present them in what follows. 
On the whole, the algorithm can be rather sophisticated (and it will be so), 
since the well-known branch-and-bound idea is used here in a modified form. 
First of all we compile a few lemmata which are more or less directly clear (task !). 
LEMMA 1. Let G be a circuit-free directed graph. Then, the vertices can be numbered 
so that for any arc x it holds: the initial point of x has a smrlller number than the 
terminal point. 
The reader is referred to 1.5 where a numeration is given. 
LEMMA 2. Let (according to lemma 1) the vertices Xl> X 2, â¢â¢â¢ , Xn of a circuit-free 
graph G be numbered so that for any arc (Xi> Xi) it holds: i < j. Then, the adjacency 

202 
Chapter 9 
matrix appertaining to this numeration has only zeros below the main diagonal 
(and also in the main diagonal because the graph possesses no loops). 
Let lR be any numeration of the vertices of a graph G with n vertices, that is, 
an injective mapping lR of the vertices of G into the first n natural numbers. 
We set 
~m = {(P, Q): lR(P) ~ lR(Q); P, Q E I}. 
Thus, ~m is the set of the arcs which are oppositely directed to the numeration lR. 
We choose any vertex numeration lR in G and consider the adjacency matrix 
Am( G) of the graph G relative to the numeration lR. If we remove from G all 
those arcs for which non-zero (natural) numbers can be found on the main dia-
gonal (if there exist loops) or below it, then the resulting graph is obviously cir-
cuit-free. This set of arcs is thus a set of feedback arcs, namely ~m' 
LEMMA 3. Let ~m be a set of feedback arcs tof a connected graph) with mini-
mum number of arcs. Then, the graph resulting after the removal of the arcs from ~m 
is connected. 
Otherwise, we could remove from ~m an arc (joining two components of the 
graph which is assumed to be unconnected) without violating the property that 
there exists a set of feedback arcs. This, however, contradicts the minimality. 
DEFINITION. A vertex numeration lR is called optimal if ~m is a set of feedback 
arcs with minimum number of arcs. 
LEMMA 4. The set of all optimal vertex numerations is invariant relative to the 
deletion of loops and circuits of length 2. 
In other words: A numeration which is optimal for the total graph yields an 
optimal numeration also for the graph if we remove the loops and circuits of 
length 2. 
The proof of this statement is immediately clear, since loops are contained in 
each set of feedback arcs, and as for a circuit of length 2 consisting for instance of 
the arcs (X, Y) and (Y, X), at least one of the two arcs always lies in a set of feed-
back arcs. 
When examining sets offeedback arcs, however, we can restrict ourselves always 
to the reduced graph from which the loops and circuits of length 2 have been re-
moved. Therefore, we shall consider in the following only reduced graphs. 
Forfurther discussion we need the notion ofan lR-sequentialsubgraph. We imagi ne 
a vertex numeration lR to be given, say as a permutation {iI> ... , in}. The form of 
the adjacency matrix Am( G) induced by ffi will then be such that in the first row 
all arcs leaving X;. are taken into consideration, in the second row all arcs leav-
ing X;" etc. 

Minimum sets of feedback arcs 
203 
DEFINITION. Given a graph with the vertices Xl, ... , Xn and a vertex numera-
tion ffi = (iI, i2, ... , in). A subgraph of G spanned by the vertices 
(1 :;;;: j, k ~ 0, j + k :;;;: n) 
is called ffi-sequential. 
LEMMA 5. Let ffi be an optimal vertex numeration and G' an ffi-sequentialsubgraph 
of a graph G. 
a) Then, the set of arcs 
~1J[' = {(P, Q): ffi(P) ~ ffi(Q); P, Q E G'} 
is a set of feedback arcs with minimum number of arcs in G'. 
b) If we delete in G all arcs of G' and contract all vertices of G' to one vertex, 
which is then labelled with the number of one of the vertices of G', the following 
applies to the resulting graph H: the set of arcs 
~1J[" = {(P, Q): ffi(P) ~ ffi(Q); P, Q E H} 
is a set of feedback arcs of H with minimum number of arcs. 
Before carrying on, let us explain by means of an example the notions intro-
duced so that it can be left up to the reader to prove the lemmata given above. 
Consider the graph of Fig. 9.1. The adjacency matrix 
2 
5 
3 
4 
6 
2 
I~ 
1 0 1 0 0 
5 
0 1 0 0 1 
A1J[(G) = 
1 
0 0 1 1 0 
3 U 
0 0 0 1 1 
4 
1 0 0 0 1 
6 
0 1 0 0 0 
corresponds to a vertex numeration 
ffi = (iI, i2, i3, i4, i5, i6) = (2, 5, 1, 3, 4, 6). 
The set of feedback arcs relative to ffi is 
~1J[ = {X3' X5' x9' XlO} â¢ 
As calculated in 9.2, this set of feedback arcs is minimal (i.e., no subset is also a 
set of feedback arcs). In addition, it is a minimum set of feedback arcs (i.e., among 
all sets of feedback arcs it has a minimum number of arcs). Thus, ffi is an optimal 
vertex numeration. 

204 
Chapter 9 
If we remove from G the arcs of ~m, then the resulting graph is connected, 
which is in conformity with lemma 3 (the reader may easily verify this). 
For our given m, for instance the graph generated by the vertices X 5, Xl' X3 is 
m-sequential, whereas the graph spanned by the vertices Xl' X 2, X3 is not 
m -sequential. 
Lemma 5a says, for example, that for the subgraph G' spanned by the vertices 
Xl' X 3, X 4, Xs a minimum set of feedback arcs can be obtained by considering 
those rows and columns (with the numbers 3, 4, 5, 6) of the adjacency matrix 
Am( G) which correspond to these four vertices, by determining all non-zero ele-
ments below the main diagonal (in our case, there is only one, namely that in the 
sixth row and third column) and by going to the corresponding arcs in the original 
graph. We get the arc XlO as minimum set in G'. 
If we contract the four vertices Xl' X3, X 4, X6 to one vertex X and consider the 
graph H (which is formed according to lemma 5b), then the minimum set ofarcs 
relative to m contains precisely three elements, namely the original arcs x5, x9' x3â¢ 
From lemma 5a) it follows that in the case of an optimal vertex numeration m 
in a reduced graph (i.e., in a graph without loops and without circuits of length 2), 
only zeros will turn up directly below the main diagonal of Am(G). 
The reader may make sure of the truth of the latter statement by making a better 
vertex numeration if in case of a reduced graph G, for instance the relation ak+1.k > 0 
holds in Am( G). For the case of a graph which is not yet reduced, it follows from 
lemma 5a that in the case of an optimal numeration m, the adjacency matrix 
Am(G) has the property that aU+1 ;;;;; ak+1,k is true for ak+1.k > O. 
Consider now in a graph G two m-sequential subgraphs G 1, G2.in the case of an 
optimal vertex numeration m. Let the vertices belonging to G 1 U G2 span an 
m-sequential subgraph, too, but G l and G2 must have no vertex in common, i.e., 
the vertices of Gl and G 2 lie one after another with respect to m. Using the 
vertex numeration m = (2, 5,1,3,4,6) in our example, we could imagine G l to be 
spanned for instance by the vertices X 5, Xl, X3 and G 2 by the vertices X 4, X6 
(or also only X 4). 
LEMMA 6. Let G l and G2 be two m-sequential subgraphs ot G with nl and n 2 ver-
tices, respectively, with m being optimal. Let the graph spanned by the vertices ot G 1 
and G2 be m-sequential, too, with nl + n2 vertices. Then, it holds tor the numbers 
C12' C21 ot the arcs going trom Gl to G2 (and from G2 to G1> respectively): 
a) C12 ;;;;; C21' 
b) It C12 = C2l' then also rh;e vertex numeration m' resulting trom m is optimal, 
with this numeration being generated when "exchanging" G l tor G2 and maintaining 
the order in Gl and G2. 
To illustrate this, we consider in the optimal numeration m = (2, 5, 1,3,4, 6) 
the m-sequential graph G 1 spanned by the vertex X5 and the m-sequential subgraph 

Minimum sets of feedback arcs 
205 
G2 spanned by the vertices Xl' X 3, X 4â¢ If we exchange GI for G2, the vertex 
numeration ffi' = (2, 1, 3, 4, 5, 6) results with the appertaining adjacency matrix 
2 
1 
3 
4 
5 
6 
2 
0 0 1 0 1 0-
1 
0 0 1 1 0 0 
Am,(G) = 
3 
0 0 0 1 0 1 
4 
1 0 0 0 1 1 
5 
0 1 0 0 0 1 
6 
1 1 0 0 0 0 
We get again a minimum set of feedback arcs (represented below the main 
diagonal) consisting of the arcs X5, X7, X9, XIO, which has already been found in 
section 9.2. 
We are now capable of constructing a set of feedback arcs which is not neces-
sarily minimum, but quite often minimal. 
(i) We start out from a minimal set of feedback arcs (i.e., a set which contains 
no proper subset that is a set of feedback arcs as well). For finding such a set, we 
proceed in the following way: 
We start out from any numeration ffi and consider the set th of the feedback 
arcs (these arcs can be made out in the adjacency matrix below the main dia-
gonal). If we remove from G the arcs of (}m, then a circuit-free graph G' results. 
If possible, we add now to G' any arc of (}m, as far as the graph generated in this 
way is circuit-free. We carryon adding further arcs as long as the resulting graph 
remains circuit-free. The remaining set of arcs of (}m is minimal. 
(ii) Now, applying lemma 6, we try to reduce the set of feedback arcs by ex-
changing ffi-sequential successive subgraphs GI , G2â¢ This can easily be done by 
hand by covering the adjacency matrix. 
Let us take an example. We start out from the numeration ffi = (2, 3, 6, 1, 4s 5) 
of the graph represented in Fig. 9.1. As adjacency matrix Am(G) we get 
2 
3 
6 
1 
4 
5 
2 
0 1 0 0 
0 1 
3 
0 0 1 0 
1 0 
6 
1 0 0 1 
0 0 
1 
0 1 0 0 
1 0 
4 
1 0 
1 0 
0 1 
5 
0 0 1 1 
0 0 
Below the main diagonal, there is represented the minimal set {X9' Xu, x 5, X4, x S' x 7} 
ascertained on page 201. When we cover the matrix following the lines drawn, we 

206 
Chapter 9 
see that the exchange of the ffi-sequential graph GI (formed by the vertices 
X 2, X a, Xs, Xl) for G2 (spanned by X 4, X 5) reduces the number of arcs of a set 
of feedback arcs by 1. 
We obtain the modified numeration ffi' = (4, 5,2,3,6,1), and the apper-
taining adjacency matrix Am,( G) reads: 
4 
5 
2 
3 
6 
1 
4 
0 1 
1 0 
1 0 
5 
0 0 
0 0 
1 1 
-----
2 
0 1 
0 1 
0 0 
3 
1 0 
0 0 
1 0 
6 
0 0 
1 0 
0 1 
1 
1 0 
0 1 
0 0 
The set of the feedback arcs still consists of five arcs, namely X~, Xg, Xu, X12, XIS. 
It is interesting to note that this set of feedback arcs is not minimal, since 
the arc Xl2 can be removed from it, which leads to a minimum set {X2, X9, Xu, xIS!. 
However, this minimum set may also be obtained by exchanging the second 
and third rows and columns. But if we make a covering as in the last matrix 
(according to lemma 6), thus obtaining a numeration ffi" = (2, 3, 4, 5,6, 1), we 
get the adjacency matrix 
2 
3 
4 
Am,,(G) = 5 
6 
1 
2 
3 456 1 
o 1 0 1 0 0 
o 0 1 010 
100 1 1 0 
o 0 001 1 
1 000 0 1 
o 1 1 000 
with the minimum set of feedback arcs {x5, Xg, Xu, xIS!. 
Note that if a set of feedback arcs is given which is minimal or even a minimum 
set, the vertex numeration inducing this set is not unique. The reader may verify 
without difficulty that both ffi = (4, 2, 3, 5, 6, 1) and ffi' = (4, 2, 5, 3, 6, 1) induce 
the minimum set {x2 , Xg, Xu, xIS!. 
It would now appear that the repeated application of the following two ope-
rations a) and b), inevitably entails that a minimum set of feedback arcs is found: 
Given a set ~m of feedback arcs (i.e., ~m is a set of arcs after the removal of which 
from G there exists no circuit in the residual graph G'). 

MinÂ·mum sets of feedback arcs 
207 
a) Choose from iY~ any arc u and add it to G f â¢ If the resulting graph Gff con-
tains no circuit, remove u from iY~. 
b) If the number of arcs of iY~ can be reduced by exchanging two successive 
m-sequential subgraphs, carry out this exchange. 
As the example of Fig. 9.2 shows, the operations a) and b) are not sufficient to 
guarantee that the minimum set will be found. 
For the vertex numeration m of a graph G let the following adjacency matrix 
1 
2 
3 
4 
5 
6 
- 0 
1 0 0 oÂ· 
1 
1 
2 
0 0 0 1 0 0 
3 
0 0 0 0 
1 1 
4 
1 0 0 0 
1 0 
5 
0 1 0 0 0 1 
6 
0 0 0 1 0 
with a set of feedback arcs iY~ = {(4, 1), (5,2), (6, 4)} be given. 
The reader may ascertain without difficulty that applying a) or b) does not 
lead to a smaller set of feedback arcs although for instance the two arcs (4, 1) and 
(4,5) contain all circuits. Nevertheless, by performing the operations a) and b), 
one will obtain in general a set of feedback arcs which is not too far from being a 
minimum set. 
Fig. 9.2 
D. H. Younger suggests an algorithm for further reducing sets of feedback arcs. 
The interested reader is referred to the original work [4] which is by no means easy 
to read. As no example is worked out there, we can only quote the author's opinion 
that the algorithm is also suitable for calculation by hand. 
We call a numeration fea8ible if neither a) nor b) is applicable. 

208 
Chapter 9 
Algorithm of Younger 
(i) Choose a feasible numeration' ffio = ffi = (iI' i 2, â¢â¢â¢ ,' in) of the n vertices. 
Determine the set iYm of the feedback arcs (represented by the non-zero elements 
below the main diagonal of the adjacency matrix Am = Am(G) of the graph G). 
Put the arcs of iYm on the branching level 1. 
Introduce a counting variable z and set z = o. 
Denote by b(ffi) the number of the arcs of the set of feedback arcs with respect 
to ffi, thus b(ffi) = liYml. 
(ii) Choose from iYm a feedback arc r = (ii+k' ij) with k > 0 and make the new 
numeration ffi' = (iI> i 2, ... , ii-I> ii+k, ii' ij+1' â¢.. , ii+k-l, ii+k+1' i j+k+2, ... , iii) (i.e., the 
initial point ij+k of the arc r becomes the immediate predecessor of if in the numere-
tion ffi', and all other positions of ffi remain unchanged). Thus, r is no longer 
a feedback arc, but it is possible that new feedback arcs arise. 
Delete the arc r and identify the two vertices i j+k and ii. 
Delete any circuits of length 2 which may arise and add the number of these 
circuits to the counting variable z. Let ffi" result from ffi' by setting i j+k = ii 
(thus, ffi" becomes a numeration of l -
1 vertices as far as ffi' is a numeration of 
l vertices). 
(iii) Form b(ffiO) -
z. If b(ffiO) - z < 0, go to (iv), otherwise to (v). 
(iv) Dismiss the vertex numeration ffi'. Go to (ii), with the next feedback arc 
being chosen. Make z assume the value that it had before the last possible change 
(if z had been augmented during the last running of (ii), then we undo this aug-
mentation; if z had not been increased, we do not change it). If on the current 
branching level all feedback arcs have been taken into consideration, choose the 
next feedback arc on the next lower level. 
If there are no more arcs to be considered on the first branching level, .the algo-
rithm terminates. 
(v) Change the numeration ffi" until it is feasible. We continue to denote this 
feasible numeration by ffi". 
(vi) a) If b(ffi") < b(ffiO) -
z, choose the numeration ffio" as new numeration 
ffio = ffi and go to (i). Here" ffio" arises from ffi" by undoing the vertex contractions 
which have been effected each time in step (ii). However, make sure that if+k is 
the immediate predecessor of ij. It turns out that the ffio" determined during 
this procedure possesses less feedback arcs than the original ffio = ffi considered 
in step (i). 
b) If b(ffi") = b(ffiO) -
z, put ffio" on the list of the potentially optimal nume-
rations (as the number of the feedback arcs of ffio" is equal to that of the original 
numeration mOl. 
e) If b(m") ~ b(mO) - z, determine the set iYm" of the feedback arcs with re-
spect to ffi" (here, note that m" is not a numeration of all n vertices), put this set 

Minimum sets of feedback arcs 
209 
of feedback arcs on a branching level that is higher by 1 than the level which re-
sulted from m", and go with m = m" back to (ii) (by taking the current z). 
When all feedback arcs on the branching level 1 are taken into account, the nume-
rations put on the list of the potentially optimal numerations represent minimum 
sets of feedback arcs, thus optimal numerations. 
To illustrate the algorithm, which is by no means a simple one, an example is 
given. 
Consider the following vertex numeration mo = m = (1,2,3,4,5,6,7,8) of the 
graph G with the following adjacency matrix Am(G) (zeros have to be inserted 
in the free cells!): 
12345678 
1 
0 1 
1 
1 
2 
0 1 
1 
3 
0 1 
1 
4 
1 
0 1 
1 
5 
0 1 
6 
1 
0 1 
7 
1 
1 
0 1 
8 
1 
0 
Make sure that m is feasible with the set of feedback arcs 
~m = {(4, 2), (6,3), (7, 1), (7, 5), (8, 2)}. 
These five arcs are to be found on the branching level 1, we set z = 0, it holds 
b(mO) = 5. Now, we go to (ii). 
O. We choose (4,2). Thus, it results m' = (1,4,2,3,5,6,7,8). For the sake 
of clarity, let us write down the adjacency matrix of the reduced graph to be used 
for further calculation: 
4 
1 
2 
3 
5 
6 
7 
8 
1 
0 1 
1 
1 
4=2 
0 1* 2 
1* 
3 
1* 0 
1 
Am,,(G) = 
5 
0 1 
6 
1 
0 1 
7 
1 
1 
0 1 
8 
1* 
0 

210 
Chapter 9 
The unit elements provided with an asterisk indicate the resulting circuits of 
length 2. Thus, z becomes 2. We get 91" = (1,4 = 2, 3, 5, 6, 7, 8). Now, we get to 
(iii). It holds b(910) - z = 5 -
2 = 3 > o. 
We carry on at (v) and make the numeration 91" feasible (this procedure, how-
ever, can result in various feasible numerations). For example, we get the following 
feasible 91" = (1,4 = 2,5,6,3, 7, 8) with the adjacency matrix 
4 
1 
2 
5 
6 
3 
7 
8 
-0 1 
1 
1 -
1 
4=2 
0 2 
5 
0 1 
A 81,,(G) = 
6 
0 1 1 
3 
0 1 
7 
1 
1 
0 1 
8 
0 
Since b(91") = 2 < b(910) - z = 3, the case (vi), a), occurs. Thul;!, we get as im-
proved vertex numeration 910" = (1,4,2,5,6,3,7,8), and we go on at (i), or 
which is even better, we begin anew at (i). 
We put down the adjacency matrix A81(G) for 910 = 910" and set 910 = 91: 
1 
4 
2 
5 
6 
3 
7 
8 
1 
1Â° 
1 
1 
1 
4 
0 1 1 
1 
2 
0 1 
1 
5 
0 1 
6 II 1 
0 1 1 
3 
0 1 
7 
1 
0 1 
8 
1 
0 
This arrangement is feasible with the set of feedback arcs 
~81 = {(3, 4), (7, 1), (7,5), (8, 2)}. 
The arcs of ~81 are put on the branching level 1, we set z = 0, and b(91) = 4 
holds. 
1. We choose (3, 4) according to (ii) as feedback arc and get 91' = (1,3,4,2,5, 
6,7,8). Hence it follows 91" = (1,3 = 4, 2, 5, 6, 7, 8) with the appertaining 

Minimum sets of feedback arcs 
211 
adjacency matrix 
3 
1 
4 
2 
5 
6 
7 
8 
0 
1 
1 
1 
3=4 
0 1* 1 
1 1 
2 
1* 0 1 
5 
0 1 
6 
1 
0 1 
7 
1 
1 
0 1 
8 
1 
0 
A circuit of length 2 has resulted, thus z becomes equal to 1. 
According to (iii), we form b(mO) -
z = 4 -
1 = 3. We make 91" feasible and 
get as adjacency matrix of the 91" which is now feasible: 
3 
6 
4 
7 
8 
2 
5 
1 
0 1 
1 1 
6 
0 1 1 
3=4 
0 1 1 
1 
7 
1 
0 1 
1 
8 
0 1 
2 
0 1 
5 
1 
0 
With b(m") = 2 it results b(m") =; 2 < b(mO) -
z = 4 -
1 = 3, thus case (vi), 
a) occurs. 
We choose 91Â° = 91 = (1,6,3,4,7,8,2,5) as new feasible starting numeration 
and go back to (i) (we forget all other open cases). As adjacency matrix with re-
spect to 91 = 91Â° we get 
1 
6 
3 
4 
7 
8 
2 
5 
1 
,0 
1 
1 1 
6 
0 1 
1 
3 
0 1 1 
4 
0 
1 1 1 
7 
1 
0 
1 
1 
8 
0 
1 
2 
1 
0 
1 
5 
1 
0 

212 
Chapter 9 
It holds ~m = {(7, 1), (2,3), (5, 6)}. These three arcs are put on the branching 
level 1, we set z = 0 and get b(mO) = 3. 
2. We choose (7,1) and find m' = (7, 1,6,3,4,8,2,5), mil = (7 = 1,6,3,4, 
8,2,5). As adjacency matrix Am" we get 
7 
1 
6 
3 
7 = 1 
0 
1* 
6 
1* 0 1 
3 
1 
0 
4 
8 
2 
1 
5 
1 
4 
1 
0 
8 2 
5 
2 1 1 
1 1 1 
0 1 
0 1 
0 
There results a circuit of length 2, thus it holds z = 1, and b(mO) - z = 3 -
1 
= 2 > 0 is true. We carry on at (v). 
A feasible mil follows from the adjacency matrix 
7 
6 
3 
1 
4 
8 
2 
5 
-
6 
0 1 
3 
0 
1 
1 
7 = 1 
0 
2 1 1 
4 
0 
1 1 1 
8 
0 1 
2 
1 
0 1 
5 
1 
0 
with mil = (6,3, 7 = 1,4, 8,2,5). We get b(m") = 2 = b(mO) - z = 3 -
1, 
thus with mo" = (6, 3, 7, 1, 4, 8, 2, 5) and the appertaining adjacency matrix 
6 
3 
7 
1 
4 
8 
2 
5 
6 
0 1 1 
3 
0 1 
1 
7 
0 1 
1 
1 
1 
1 
0 
1 1 
Am,,= 
0 1 . 1 1 
o 
4 
8 
0 1 
2 
1 
0 1 
5 
1 
0 

Minimum sets of feedback arcs 
213 
it holds bono") = 3 = b(ffiO), i.e., the ease (vi), b), oeeurs. Thus, this ffio" can be 
put on the list of the potentially optimal numerations. Now, we carryon at (vi), 
e), and determine ~lR" = {(2, 3), (5, 6)}. These ares are put on the branehing level 2, 
and we earry on at (ii) with z = 1. 
2.1. We choose (2, :~), ))i' = (6,2,3,7 = 1,4,8,5), ffi" = (6,2 = 3, 7 = 1,4, 
8, 5), the adjaecncy matrix A lR" follows as 
2 
7 
6 
3 
1 
4 
8 
5 
6 
0 1 
2=3 
0 1* 1* 
1 
7 = 1 
II 
1* 0 
2 
1 
4 
1* 
0 1 1 
8 
1 
0 
5 
0 
Two new circuits of length 2 develop, thus z becomes equal to 3, further it follows 
b(ffiO) -
z = 3 -
:3 = 0, i.e., we continue at (v) and make ffi" feasible. The adja-
cency matrix of a feasible ffi" results for instance as 
7 
2 
1 
4 
8 
5 
6 
3 
7 = 1 
f" 
2 
1 
4 
'0 
1 1 
8 
0 
1 
5 
0 1 
6 
0 
1 
2=3 
1 
0 
From this, we get b(ffi") = 1 > b(ffiO) - z = 0 and carryon at (vi), c). The ffio" 
appertaining to ffi" has the form ffio" = (7, 1,4, 8, 5, 6, 2, 3), and b(ffi") = 4 
holds. The set of the feedback arcs with respect to the current ffi" has the form 
~9l" = {(2 = 3, 5)}. We go on at (ii) on the branching level 3. The variable z has 
now taken on the value 3. 
2.1.1. We choose (2 = 3, 5) (of course, there is only one feedback arc), ffi' 
= (7 = 1,4, 8, 2 = 3, 5, 6), ffi" = (7 = 1,4, 8, 2 = 3 = 5, 6). The adjaceney 

214 
Chapter 9 
matrix appertaining to ffi" results as 
2 
7 
3 
1 
4 
8 
5 
6 
7 = 1 
0 
2 1 
4 
0 1 1 
8 
0 1 
2=3=5 
0 1* 
6 
1* 0 
A new circuit of length 2 develops, thus z = 4 holds. Now, it follows b(ffiO) - z 
= 3 -
4 < o. We go on at (iv), dismiss ffi' and reduce z to 3. 
As no more feedback arc is to be considered on the branching level 3, we go 
back to the level 2, choosing the next feedback arc. 
2.2. We choose (5,6,) ffi' = (5,6,3,7 = 1,4,8,2), ffi" = (5 = 6,3,7 = 1,4, 
8,2). The appertaining adjacency matrix iR 
5 
7 
6 
3 
4 
8 
2 
5=6 
0 1 
3 
0 
1 
1 
7 = 1 
1 
0 
2 1 
4 
1 
0 
1 1 
8 
0 
1 
2 
1 1 
0 
No circuits of length 2 develop, z remains equal to 1 and b(ffiO) - z = 3 -
1 = 2 
> 0 holds. A feasible numeration ffi" = (3, 7 = 1,4, 8, 2, 5 = 6) results with 
b(ffi") = 2 = b(ffi) - z = 3 -
1, 
b(ffio") = 3 = b(ffiO) 
(as can easily be checked by the reader). 
ffio" is put on the list of the potentially optimal numerations, and we carryon 
branching ffi" with 
iYm" = {(2, 3), (5 = 6, 3)). 
We are now on the branching level 3. We set ffi = ffi" and go on at (ii). 
2.2.1. We choose (2, 3). The reader will verify that three new circuits of Jength 
2 occur, and therefore, the numeration ffi' is dismissed according to (iv). 

Minimum sets of feedback arcs 
215 
2.2.2. We choose (5 = 6, :~). Make sure of the two new circuits of length 2 which 
arise. Thus, Z hecomes :~, and the adjacency matrix of a feasible ffi" = (7 = 1, 
4. S, 2, 5 = 6 = 
:~) results as 
5 
7 
6 
1 
4-
R 2 
3 
7,= 1 
0 
2 
1 
4 
0 
1 1 
H l 
0 
1 
~J 
2 
0 
5=6=:3 
with b(ffi") = 0 = b()Jr) -
z and mo" = (7, 1, 4, 8, 2. 5, 6, 3) and b()J{O") = 3, 
causing ffiO" to be put on the list of the potentially optimal numerations. 
Thus, case 2 is completed, and we carryon at z = 0, b(ffiO) = :t 
:~. We choose (2,3). This case and also case 4, where (5,6) is chosen, are treated 
analogously. 
This example is relatively simple, but it shows that a lot of calculation is required. 
The interested reader may verify that using the algorithm given, no set of 
feedhack arcs can be found containing less than three arcs. However, a consider-
able number of sets with precisely three arcs can he ascertained, even though not 
all of them arc generally found. 
D. H. Younger says that this algorithm yields a minimum set in every case, 
hut does not completely prove his assertion. Establishing this proof, however, 
does not seem imperative. As is already indicated by our example, the ahove algo-
rithm goes beyond the determination of feasible numerations in most' cases. 
In particular, we doubt the following: If we have found, say in case of our last 
example, a feasihle numeration with the set of feedback arcs 
and if we do not succed in finding a better numeration in the course of the algo-
rithm, then all numerations that are optimal in the sense of the algorithm (and 
that can be found) have the property that there exists an index t sllCh that it is 
the immediate predecessor of jt in this optimal numeration (although it could be 
possihle that it is the predecessor of jt, in fact, but not necessarily the immediate 
one; this means for our example that in each optimal numeration found, 7 is the 
immediate predecessor of 1, or 2 the im mediate predecessor of 3, or 5 the immediate 
predecessor of 6). But what will happen if the minimum sets of feedback arcs and 
the set offeedhack arcs found so far are disjoint and if we are in a "local minimum"? 

216 
Chapter H 
Of course, by using lemma 6 b, it is possible to find further numerations with 
the same number of feedback arcs as those with minimal number of feedback arcs 
found in the course of the algorithm (which is also said by D. H. Younger), but 
those other numerations are not considered in the algorithm. 
Despite our doubts, we have discussed this latter algorithm in great detail, 
since it is really quite promising. In comparison with the algorithm of Lempel 
and Cederbaum, where it was not simply a determinant that had to be calculated 
(in the case of n vertices of circumference n), but a determinant such that one 
variable per arc had to be taken along in the graph, the algorithm given by 
Younger seems us to be more efficient and also more suitable especially for 
machine computation. 
9.4. BIBLIOGRAPHY 
[1] Lempel, A., and 1. Cederbaum: On directed circuits and cutsets of a linear graph, 
Faculty of Electrical Engineering, Technion -
Israel Inst. Technology, Haifa (Israel), 
Pub!. :31. June 1H65. 
[2] Lempel, A., and 1. Cederbaum: Minimum feedback arc and vertex sets of a directed 
graph, IEEE Trans. Circuit Theory CT-13 (1H66), 3H9-403. 
[3] Walther, H., und H.-J. Voss: Uber Kreise in Graphen, Berlin 1H74. 
[4] Younger, D. H.: Minimum feedback arc sets for a directed graph, IEEE Trans. Circuit 
Theory CT-IO (1H63), 238-245. 
[5] Garey, M. R., and D. S. Johnson: Computers and Intractability, A guide to the Theory 
of NP-Completeness, San Francisco 1979. 

Chapter 10 
Embedding of planar graphs in the plane 
10.1. FORMULATION OF THE PROBLEM 
In practice, there often arises the problem of drawing in the plane graphs which 
exist, say, in the form of electric networks or time schedules, without any crossing. 
Such an embedding without crossing is important for the design of printed cir-
cuits. If all of the components of an electric network are left-. unconsidered, the 
graph a of the netwÂ·ork remains and the embedding of this yields a solution to 
the problem. 
By trial and error, one could attempt to obtain a representation without 
crossings, which would possibly lead to a quick solution in the case of graphs 
containing only few vertices. However, for many vertices and edges such an ap-
proach would be troublesome, and a decision on whether or not the given graph 
is embeddable could hardly be made. 
In this chapter, we shall deal with some methods which make it possible to 
embed a given graph in the plane provided that such an embedding is possible 
at all. 
10.2. THEOREMS OF KURATOWSKI, MACLANE AND WHITNEY 
DEFINITION. A graph a is said to be planar if it can be embedded in the plane. 
The embedd1:ng of a is called a plane graph a'. 
Figure 10.1 b shows a plane graph a' to the planar graph a of Fig. 10.la. We 
shall restrict ourselves to undirected simple graphs, i.e., to graphs without loops 
and multiple edges. If a given graph is not simple, then remove loops from it, 
replace the multiple edges by a single edge and examine whether the graph which 
results in this way is planar. If this graph is planar, then the original graph is 
also planar. But if not, the original graph is not planar either (task I). 
We may also restrict ourselves to connected graphs, since in case of an un-
directed graph, each component has to be considered separately. Obviously, the 
graph is planar if amI. only if each of its components is planar. 

218 
Chapter 10 
Before addressing ourselves to the first planarity criterion, we st ill wish to 
show that it is sufficient to consider only :3-connected graphs. For this purpose, 
we give without proof a theorem that can be read in H. Sachs [21]: 
Fig. 10.1 
THEOREM 1O.l. 
a) Let G be exactly 1-connected. Then, G possesses a cut-vertex P, and G is 
union of two connected 8ubgraphs Gl and G2 which have the vertex Pin common, 
and only this one (cf. Fig. 10.2). It holds: G is planar if and only if Gl and G2 are 
planar. 
Fig. 10.2 
0) 
b) 
p o 
Q 
Fig. 10.3 
b) 
b) Let G be exactly 2-connected. Then, it holds: G is union of two connected 8ub-
graphs Gl and G2 which have precisely two vertices P and Q in common and in 
addition to this, also the edge (P, Q) if P and Q are adjacent. If, however, P and 
Q are not adjacent, then we add the edge (P, Q) to both 0 1 and G 2. Thus, let the 
graphs Gt' and G 2' develop. If (P, Q) is contained in G and thus also in G1 and 
I 

Embedding of planar graphs in the plane 
219 
G2, then let 
be true. 
In this case,Â£( holds: G is 'planar if and only if G1' and G2' are planar (cf. 
Fig.lO.H). 
We have thus shown that we can restrict onrselves to :~-connected graphs when 
making planarity examinations (it is no f>ecret that a great deal of work might 
be required for \'erifying that a graph is 3-eonnected). Let us call such graphs 
primitive. 
DEFINITION. Two manifolds (of topological spaces) are called homeomorphic if 
there exists an injective mapping of the two manifolds one onto the other which 
is together with its inverse mapping continuolls (neighbourhood-preserving). 
A theorelll which is of importance for embedding is given without proof: 
THEOREM 10.2. A primitive planar graph i8 uniquely embeddable in the plane 
except fer homeomorphism. 
DEFINITION. A graph H is called subdivision of a graph G if II results from G 
by inserting vertices in the interior of edges of G. 
It will be agreed that for the case G = H, the graph H is also a subdivision 
of G (cf. :Fig. 10.4). 
Fig. 10.4 
~Fig. 10.5 
THEOREM 10.3 (Kuratowski [14]). A graph i8 not planar if and only if it con-
tal:n8 a 8ubdivi8ion of the complete graph K5 with five vertice8 or of the complete 
bipartite graph K 3,3 with three vertices in each of the two clas8e8 (cf. Figs. 10.4 and 
10.5). 
Of course, the application of Kuratowski's theorem in practical planarity 
studies involves the difficulty that it will not always be easy to recognize in a 
graph subdivisions of the K3,3 or K5â¢ Therefore, this planarity criterion is hardly 

220 
Chapter 10 
recommendable for practical purposes. On the other hand, Kuratowski's criterion 
is often used in theoretical reflections. 
Let G be an at least 2-connected graph. A graph DG is called dual to G ifthere 
exists an injective mapping of the edges of G onto DG satisfying the following 
condition: A set of edges of G forms a cut (of. section 1.4.; in the case of any 
orientation of the edges of G, a cut becomes an elementary cocycle) if and only if 
the set of edges corresponding to it in DG forms a circuit. 
THEOREM 10.4 (Whitney [27,28]). A graph G is planar it and only it there 
exists a graph DG which is dual to it. 
It turns out that the graph which is dual to a planar graph G is also planar. 
A graph which is dual to a planar graph can be generated in the following way 
(cf. Fig. 10.6): 
Let G be at least 2-connected and embedded in the plane. By this embedding, 
the plane is subdivided in several domains, with each of them being bounded by 
a circuit. The set of vertices of DG is obtained by inserting a vertex (that belongs 
to DG) in tht't interior of each of the domains of G. Two vertices of DG are con-
nected by an edge (of DG) if and only if the domains corresponding to them in G 
are adjacent (if two domains have precisely k edges in common, the vertices cor-
responding to them in DG are connected by kedges). 
The interested reader is referred to H. Whitney [27]. 
We still want to give a third planarity criterion. 
/"--/~ 
........ 
/' 
/ 
'" " 
/ 
/ 
I 
\ "-
/1/ 
I 
1 
\ 
",,-
/ 
/ 
\ 
\\ 
! 
\ 
( 
I 
\ 
J 
"-
/ 
/ 
./ 
Fig. 10.6 

Embedding of planar graphs in the plane 
221 
Let 0i be a circuit of a graph G. We assign to 0i a vector with m components 
if G possesses precisely m edges (of. the definition of a vector assigned to a cycle, 
chapter 1). The jth component of the vector Ci = (c/, Ci2, â¢â¢â¢ , Cim) assigned to 
Oi is 1 if the jth edge of G lies in OJ (in case of any fixed numeration of the edges 
of G). If, however, the jth edge is not contained in OJ, then we set c,i = o. 
DEFINITION. We say that k circuits 01> O2, â¢â¢â¢ , Ok form a complete system of 
circuits in G if any circuit 0 of G can uniquely be represented in the form 
C = (Cl' ... , cm) = J; Cjj 
(mod. 2) 
with the i j being taken from the set {1, ... , k}. 
Fig. 10.7 
Each graph contains at least one complete system of k circuits with 
k = number of edges -
number of vertices + 1J,umber of components. 
For this, consider the graph of Fig. 10.7. The three circuits 
0 1 = (1,2,3,7), 
O2 = (1,2,4,8,7), 
0 3 = (5,6,7,8), 
C l = (1, 1, 1,0,0,0,1,0), 
c2 = (1, 1,0,1,0,0,1,1), 
C3 = (0,0,0,0, 1, 1, 1, 1) 
obviously form a complete system, since for the remaining four circuits, it holds: 
0 4 = (1,2,3,8,5,6), 
0 5 = (1,2,4,5,6), 
0 6 = (3,4,8), 
0 7 = (3,4,5,6,7), 
C4 == Cl + C3 (mod. 2), 
C5 == C2 + C3 , 
c6 == Cl + C2' 
C 7 == Cl + c2 + C3 â¢ 
THEOREM 10.5 (MacLane [17]). A graph is planar if and only if it possesses a 
complete system of circuits such that no edge is contained in more than two of these 
circuits. 

222 
Chapter 10 
10.3. THE PLANARITY ALGORITHM OF DAMBITIS 
Let G' be a primitive graph with n vertices and m edges, and let L' ,be a spanning 
tree of G' . We number the edges not lying in L' (called chords) from 1 to m -
n + 1, 
and the edges contained in L' from m -
n + 2 to m. Let H' be the incidence 
matrix of G'. We arrange H' such that the last n -
1 columns correspond to the 
spanning tree edges of L'. We partition H' in the following way: 
chords 
spanning tree edges 
H' = 
A12 
. ---------.---. -------------------"1: ---.---------------------------------
A21 
A22 
12 ... m-n+1 m-n+2 ... m 
1 
2 
n-2 
n-1 
n 
vertices 
Starting from H' we calculate a matrix B' representing m -
n + 1 linearly inde-
pendent circuits (linearly independent in the sense of the definition of a complete 
system of circuits): 
B' = [Em- n+1' Aft(A1illT ]. 
Here, E j is an (i X i)-identity matrix. When forming the products and when ad-
ding up, we always calculate modulo 2. The edges of the graph are assigned to the 
columns of B' as in case of H'. 
Let us consider an example for illustrating this. The construction represented 
in Fig. 10.8 ensures that each circuit occurring in B' consists of exactly one chord 
and one path as part of L', with this path connecting the end-points of the chord 
with each other. This chord can be denoted by representing the edge of the circuit 
Fig. 10.8 

Embedding of planar graphs in the plane 
223 
(with a given invariant spanning tree L'). The reader is also referred to chapter 1 
where the notion of the cycle basis is explained. The representing edges can imme-
diately be read from the identity matrix contained in B'. In the case of our example 
given by Fig. 10.8, we get 
R'= 
B f = 
o 1 0 0 
lOOlO!lOOO 
00100!1110, 
~--~-+-}--~-1~-~--1--; J 
1 100 1 
10000 
o 1 000 
1 1 0 0 
o 1 1 0 
o 0 1 0 0 001 1 
000 1 0 i 1 0 1 1 
OÂ·Â·Â·Â·Â·OÂ·Â·Â·Â·OÂ·Â·Â·Â·oÂ·Â·Â·Â·TÂ· iÂ·Â·OÂ·Â·Â·Â·"!"Â·Â·Â·Â·iÂ·Â·Â·Â·i 
Assume a planar graph G' to be given. Let Gf be primitive. Then, Gf possesses 
a dual graph G. 
A cut of G corresponds to a circuit of G', and vice versa. 
We set Q = B' and call Q the cut-set matrix of G. 
J. J. Dambitis gives an algorithm which makes it possible to calculate from Q 
the incidence matrix R of G. 
It turns out that G' is planar if and only if the following algorithm can be run 
up to the end, which then leads to the matrix R. This algorithm utilizes the 
planarity criterion of Withney. 
However, let us clarify a few concepts and notions before turning to the algo-
rithm. 
Representing edge: In the course of dualizing, a spanning tree edge of G' is 
transformed into a chord of G, and vice versa. The edges with the numbers 
1,2, ... , m -
n + 1 thus form in G a spanning tree L. In the course of dualizing, 
an edge representing in G f a circuit (i.e., which is a chord there) is transformed into 
a cut edge that lies in the spanning tree L induced by Lf in G. This edge is thus an 
edge representing the cut (these notions have already been discussed in detail in 
chapter 1; thus, there corresponds 'to the set of chords a cotree, with the edges 
being oriented in any way). If the edge i represents the cut Qi in G, then the span-
ning tree L divides into two trees LI and L2 after the removal of i .. The cut Q i 
contains not only the edge i, but also all chords in G, with one of their end-points 
lying in LI and the other in L Qâ¢ 

224 
Chapter 10 
Pendant row: A row qj of the cut-set matrix Q is called pendantiftherepre-
senting edge i is a terminal edge of the spanning tree L, that is, if it is incident with 
an end-point (i.e., with a vertex of the degree 1) in L. Let P be the end-point of 
a terminal edge of L. Then, the edges of G incident with P just form the cut Qj. 
The pendant rows of the matrix Q are determined in the following way: 
Let us find out for example whether the ith row qj of Q is pendant. For this, we 
delete all those columns of Q in which qj has a 1, subsequently the row qj is also 
deleted. We denote the matrix which results in this way by Qi. Neglecting the 
identity matrix contained in Qi, this latter represents a system of chords. 
We call two rows of Qi joined if there exists a column in which both rows have a 1. 
Now, we try to combine the rows of Qi according to a certain rule. Let v and w 
be two joined rows of Qi. Add these two rows by using the following rules: 
1 + 1 = 1, 
1 + 0 = 1, 
0+ 1 = 1, 
The resulting row is then substituted for either of the two rows v and w, with the 
other one being deleted. This addition of rows is performed as long as possible. 
If it turns out that all rows of Qi can be com~ined to one row, then the row qi is 
pendant. If this is not possible, however, we get several connected systems Hi!> 
â¢.. , Hik of chords with 1 < k < m - n + 1 into which the graph G is decom-
posed after the removal of the cut Q j. Such a connected system of chords is charac-
terized by a maximal set of rows which can be combined. 
We consider the example of Fig. 10.8. We need not write down the identity 
matrix E m- n+1, since this part of the matrix is of no importance for the addition 
of the rows: 
Is the row ql in Q = B' pendant? 
8. 
9. 
column 
2nd I 
3rd 
row with respect to Q 
4th 
5th 
Obviously, ql is pendant. 
Is q4 pendant? 
7. 
1st I 
2nd 
row with respect to Q 
3rd 
5th 
column 

Embedding of planar graphs in the plane 
225 
It can be seen that the rows 1,2,5 are joined. The row 3 is not joined'to any row 
of Q4. 
Since not all rows can be combined, the row q4 is not pendant. The following 
connected systems of chords arise: 
H41 = (1,2,5), 
H42 = (3). 
Checking up all rows yields: 
q1' Q2' Q3 pendant, 
Q4 not pendant with H41 = (1, 2, 5), H42 = (3), 
Q5 not pendant with H51 = (1,4), H52 = (2), H53 = (3). 
Thus, each row of Q can be characterized as "pendant" or "not pendant plus cor-
responding systems of chords". 
Termina tion condition: Since each spanning tree containing not less than 
three vertices possesses at least two terminal edges, there must exist in Q at least 
two pendant rows. Otherwise, there would be a contradiction revealing that the 
assumption of planarity of G' is not justified. That is, G' is not planar in this 
case. 
If there is in Q a column in which three or more pendant rows have a 1, then 
this would be in contradiction to the fact that an edge is incident with exactly 
two distinct vertices. From this, we also conclude that G' is not planar. 
These two breakoff conditions bring the algorithm to a stop and indicate the 
nonplanarity of G'. 
Now, we come to the construction of the incidence matrix R. To describe the 
planarity algorithm of J. J. Dambitis, we shall use a special method introduced 
by Ljapunov for the description of an algori:thm. For the sake of simplicity, how-
ever, we shall write the single steps one beneath the other. In doing so, the letter A 
means an instruction and the letter P a test. We shall not discuss in detail why 
the algorithm indicated always makes it possible to decide whether or not a given 
graph is planar. The interested reader is referred to [4]. 
Algorithm of Dambitis 
(At) Calculate the matrix Q = B' (the circuit matrix of G'). 
(A 2) Determine all pendant rows of Q and use them to form the matrix RO 
(which already constitutes a part of the incidence matrix R of G to be determined). 
(P3) Check whether RO consists of less than two rows. If so, then the graph G' 
is not planar, 
go to the End. 
If not, 

226 
Chapter 10 
(P4) Check whether there exists in RO a column containing more than two l's. 
If so, then the graph G' is not planar, 
got to the End, 
If not, 
(P5) Check whether there is no column of Q with more than two l's. 
If so, then make up the matrix R = [~], with T resulting as one row, namely 
as the sum mod. 2 of all rows of Q. R is then the required incidence matrix of G. 
Go to the End. 
If not, 
(A6) Form for each non-pendant row qj of Q the connected systems of chords 
6 j = {Hi!, H j2, ... , H;pJ as well as the set in = {qj: qj not pendant}. 
(A 7) Put the matrix Q on a waiting list. 
(P8) Check whether the waiting list is empty. 
If so, then R = RO is the required incidence matrix of G. 
If not, 
(A9) Choose a matrix from the waiting list (e.g. in the order oftheir inscription) 
and denote it by Q. 
(PI0) Check whether there exists in Q a non-pendant row qj with Pi = 2 (thus 
16 jl = 2). 
If so, then go to (A 16). 
If not, 
(A 11) Make up for each qk E in the number Zk of those connected systems of 
chords from ek which contain denotations for non-pendant rows of Q. 
(AI2) Form z:= minzk' 
qkEm 
(A 13) Form in' = {qr: q, E in andÂ· Zr = z}. 
(A14) Find a qi E in' with leil ~ 16,1 for all qr E in' (that is, among all non-
pendant rows belonging to in' find one (namely qj) for which the number of the 
connected systems of chords is minimum). 
(PI5) Check whether 6 i can be decomposed into two non-empty disjoint clas-
ses 6/, 6 j 2 in the following manner: Form from qj and the rows with denotations 
from 6/ (and e j2) a matrix Ql (Q2' respectively) such that in none of the sub-
matrices Ql' ~ Ql and Q2' ~ Q2 (made up of qj and the pendant rows of Qland Q2' 
respectively) more than two l's occur in any column. 
If so, then go to (A17). 
If not, then G' is not planar, 
go to the End. 
(A 16) Form from qj and the rows with denotations from Hi! (andHd the matrix 
Ql (Q2' respectively). 

Embedding of planar graphs in the plane 
227 
(AI7) Mark the row qi as pendant in both Ql and Q2' 
(AI8) If qk is a row of Ql (Q2' respectively) and if qk is pendant in Q, then mark 
also qk as pendant in Ql (Q2' respectively). 
(PI9) Check whether there is in the submatrix made up of the pendant rows 
of Ql a column containing more than two l's. 
If so, then G' is not planar, 
go to the End. 
If not, 
(P20) Check whether there is in the submatrix made up of the pendant rows 
of Q2 a column containing more than two l's. 
If so, then G' is not planar, 
go to the End. 
If not, 
(A 21) If qk is a row of Ql (Q2, respectively) and not pendant in Q, then mark qk 
also in Ql (Q2' respectively) as not pendant (for qk =f= qi)' Make up for each of the 
matrices Ql' Q2 the set in = {qk:qk not pendant}. 
(A22) Take from Q the connected systems of chords for non-pendant rows 
(thus not for qi any more) going to Ql and to Q2 (according to which matrix such 
a row is contained in after the decomposition of Q into Ql and Q2) and delete in 
the connected systems of chords of non-pendant rows of Ql and Q2 all denotations 
k if the row qk does not lie in Ql and Q2' respectively. 
(P23) Check whether in Ql all rows are pendant. 
If so, form a row 
r = 1: qk 
(mod. 2) 
qkEQ. 
and enlarge RO by the row r. Then, go to (P24). 
If not, put Ql on the waiting list and go on at 
(P24) Check whether in Q2 all rows are pendant. 
If so, form a row 
r = 1: qk (mod. 2) 
qkEQ, 
and enlarge RO by the row r. Then, go to (P8). 
If not, put Q2 on the waiting list and go on at (P8). 
End: Termination of the algorithm. 
To help the reader understand the algorithm, let us calculate an example. Con-
sider the graph in Fig. 10.9. For the spanning tree drawn here with double lines, the 

228 
Chapter 10 
matrix Q = B' (circuit matrix) results as (fill in the blank cells by a 0): 
1 
2 
3 
4 
5 
6 
7 
8 
9 10 11 12 
-
1 
1 
1 1 1 1 1 
(2) (3) (4) (5) (6) (7) 
2 
1 
1 1 1 1 
(1, 3, 7) (4) (5) (6) 
3 
1 
1 1 
pendant 
B'= 4 
1 
1 1 
pendant 
5 
1 
1 1 
pendant 
6 
1 
1 1 
pendant 
7 
1 1 1 1 
(1, 2, 4, 6) (3) (5) 
Fig. 10.9 
The instructions are executed in the order given below: 
1. (Al) B' is given above. 
2. (A2) The pendant rows are indicated at B', and RO consists of the four pendant 
rows. 
3. (P3) No. 
4. (P4) No. 
5. (P5) No. 
6. (A 6) Sj are indicated at B' (confusions in the denotation are presumably not 
possible), the set 91 can also be read. 
7. (A 7) Q = B' is put on the waiting list. 
8. (P8) No, since B' is on the waiting list. 
9. (A9) B' becomes the matrix Q. 
10. (PlO) No. 
11. (All) Zl = 2, Z2 = 1, Z7 = 1. 
12. (A12) Z = 1. 
13. (A 13) 91' = {q2' Q7}' 
14. (A14) Qj = Q7' 

Embedding of planar graphs in the plane 
229 
15. (P 15) Yes, since we can write in Q1 the rows q7, q1, q2, q4, q6, q3 and in Q2 the 
rows q7, q5 (the following representation is probably clear): 
8 
9 10 11 12 
7 
1 1 1 
pendant 
1 
1 1 1 1 
1 
(2) (3) (4) (6) (7) 
2 
1 1 1 
1 
(1,3,7) (4) (6) 
Q1= 4 
1 1 
pendant 
6 
1 
1 
pendant 
3 
1 1 
pendant 
8 
9 10 11 12 
7 [ 1 1 1 
] 
pendant 
Q2 = 
_ 
D 
1 1 
pendant 
16. (AI7) Has been executed in the above matrices Ql> Q2' 
17. (A 18) Has been executed in the above matrices. 
18. (P 19) No. 
19. (P20) No. 
20. (A21) Has been executed in the above matrices. 
21. (A22) Has been executed in the above matrices. 
22. (P23) No, Q1 is put ont he waiting list. 
23. (P24) Yes, we add to RO the new row r = q7 + q5; this row has thus a 1 in 
the columns with the numbers 5, 7, 8, in all other columns a O. 
24. (P8) No. 
25. (A 9) The matrix Q1madeup by the rows Q7' Ql>Q2,Q4,Q6,Q3 becomes the matrix Q. 
26. (P 10) No. 
27. (All) Zl = Z2 = 1. 
28. (AI2) Z = 1: 
29. (A 13) 9(' = {ql> Q2}' 
30. (A 14) Qi = q2' 
31. (P 15) No, since however we decompose the connected systems of chords of 
q;. one of the two matrices, say Q1, would still have to contain at least 
q1, Q3' q7 in addition to Q2' thus 
8 
9 10 11 12 
; l; ; : : :1 
nonÂ·pendant 
pendant 
pendant 
In the column belonging to the edge 9, there is a 1 in the row 2 and also 
in the two pendant rows, that is, G' is not planar. 
Thus, the algorithm terminates. 

230 
Chapter 10 
According to the theorem of Kuratowski, G' would have a subdivision of the K5 
or K 3,3' This is the case, in fact. Deleting say, the edge 11, yields a subdivision of 
the K 5â¢ By deleting the edges 6, 8, 10, one also gets the K 3,3' 
Let us give, in an abridged form, another example of a graph which will turn out 
to be planar and which will also be embedded by us. 
Given the following circuit matrix: 
1 
2 
3 
4 
5 
6 
7 
8 
9 10 
11 
1 
1 
1 1 1 1 
:l 
(2) (3) (4) (5) (6) 
2 
1 
1 1 1 
pendant 
3 
1 
1 1 1 
(1, 2, 4) (5) (6) 
4 
1 
1 1 1 1 
(1,3) (2) (5) (6) 
5 
1 
1 1 1 
(1,2,3,4) (6) 
6 
1 
1 1 
pendant 
The instructions and tests up to (A9) run well, we state "Yes" at (P 10), g@ on at 
(A 16) and get the matrices Qt, Q2 with qj = q5: 
1 
2 
3 
4 
5 
6 
7 
8 
9 10 11 
1 
1 
1 1 1 1 
1 
(2) (3) (4) (5) 
2 
1 
1 1 1 
pendant 
Ql = 3 
1 
1 1 1 
1 
(1,2,4) (5) 
4 
1 
1 1 1 1 
(1,3) (2) (5) 
5 
1 
1 1 1 
pendant 
5 [ 
1 
1 1 1 ] 
pendant 
Q2= 6 
1 
1 1 
pendant 
Since all rows from Q2 are pendant, we determine from Q2 a row of the matrix RO: 
r = q5 + qa' 
Next we determine the row q3 with the splitting of Ql into 
1 
2 
3-
4 
5 
6 
7 
8 
9 10 11 
1 
r
1 
1 1 1 
1 
:l 
(2) (3) (4) 
2 
1 
1 1 1 
pendant 
Qt= 3 
1 
1 1 
1 
pendant 
4 
1 
1 1 1 
1 
(1,3) (2) 
3 [ 
1 
1 1 
1 
1] 
pendant 
Q2= 
1 
1 1 
1 
pendant 
5 

Embedding of planar graphs in the plane 
231 
Q2 cannot be decomposed further and supplies a row of RO, namely 
r = q3 + q5Â· 
The reader can easily verify that a further decomposition of the matrices succes-
sively put on the waiting list is possible and that the following rows still missing 
can be obtained for RO: 
r = q2 + q4, 
= ql + q3' 
= ql + q4Â· 
Thus, we find as incidence matrix R of the graph G which is dual to G', the fol-
lowing matrix (however, let us point out that because of the theorem of Whitney, 
the mere existence of the incidence matrix R of G assures that G' is planar): 
2 
3 
4 
5 
6 
7 
8 
9 10 11 
1 
1 
1 1 1 
2 
1 
1 
1 
3 
1 1 
1 
R= 4 
1 
1 
1 
5 
1 
1 
1 
6 
1 
1 
1 
7 
1 
1 
1 
Now, we turn to an algorithm which, knowing the matrix R, makes it possible 
to embed G'. 
First, let us take into account that exactly one edge in G corresponds to one edge 
in G', and vice versa, and that to each vertex in G' there corresponds exactly 
one face, and vice versa (here, that face is also to be taken into consideration which 
is not finite, which is why the number of rows in R is greater by 1 than in B /). 
If thus R' is the incidence matrix of G', then this matrix can also be taken as a 
matrix of circuits of G (that is, of all those circuits which bound faces). 
Consider any vertex P.' in G' of the degree v(P;') = v;'. Let Sf;' = {k~J: j = 1, 
â¢.. , Vi'} be the set of the edges of G' which are incident with P;'. The embedding 
method discussed in the following utilizes consistently the duality between G and 
G' described in chapter 1. 
Embedding algorithm of Dambitis 
(i) Choose any row q/ in R' (the unities of this row correspond to the edges k~j 
which are incident with the vertex P;' in G'). The set Sf i of edges, which corre-
sponds to the set Sf i ' of edges of G' in case of dualizing, forms a circuit C j in G. 
From the incidence matrix R of G one can determine the set of those vertices 
which are incident with the edges of C j â¢ Embed Cj in the plane and orient all 

232 
Chapter 10 
edges of OJ so that OJ is traversed in anti-clockwise direction (that is, a circuit 
is generated in the directed graph). Now, embed in the plane, together with the 
edges from Sf/ (in the order of the traversal of the corresponding edges of OJ), 
the vertex P/ which corresponds to the circuit OJ in case of dualizing (this em-
bedding, however, is carried out independently of that of G). 
(ii) Choose in R' any row q/ other than q/, with q/ and q/ having a common 
unity in at least one column. In the embedding of G realized so far, reorient all 
those (common) edges which correspond to the columns of R' in which q/ andq/ 
have 1 each. Now, embed the elementary circuit OJ corresponding to the row q/ 
in G in such a way that the circuit that corresponds to the row q/ + q/ in G is 
traversed in anti-clockwise direction. 
Delete q/ and q/ in R', add to R' the new row q/ + q/ (mod. 2) and denote it 
by q;'. 
From the order of the edges of OJ we get an embedding of the vertex P/ of G' 
together with all edges which are incident with P/, again in consideration of the 
order of the edges. Now, go back to (ii). 
If R' still contains one single row, we break off, thus having embedded both G 
and G'. 
Let us illustrate the embedding algorithm by giving a further example. 
In the preceding one, we have determined the incidence matrix R of a graph G 
dual to a planar graph G'. If we apply once again the algorithm of Dambitis, that 
is, if we denote in the following R by R ', form the matrix B' and then determine 
R (task !), we obtain the incidence matrix of the original graph G' : 
1 
2 
3 
4 
5 
6 
7 
8 
9 10 11 
1 
1 1 
1 
1 
2Â· 
1 
1 
1 1 
R' = 3 
1 
1 1 
4 
II 
1 
1 
1 
5 
1 1 1 
1 
1 
6 
1 
1 
To embed immediately as many vertices as possible, choose as qj' a row which 
contains as many unities as possible, say q/ = q5" From the incidence matrix R we 
find that the order of edges in 0 5 is 4, 11, 5, 6, 10. 
Figure 10.10a shows the embedding of Â°5, Fig. 10.10b that ofthe vertex P5 " As 
next row choose for instance qt'. The result of the embedding is represented in 
Fig. 10.10e and in Fig. 10.10d. Now, make up the sum q5' + qI' (mod. 2), which 
leads to 
(1,1,0,0,1,1,1,0,0,1,1). 

0: 
dl 
5 
Cz 
9 
g) 
Fig. 10.10 
Embedding of planar graphs in the plane 
233 
bl 
5 
e) 
8 
Q---..... ----7Wp~ 
D' 
'4 
h) 
7 
5 
c) 
9 
Obviously, to this corresponds in G the exterior circuit of Fig. 10.10c. Now, choose 
say the row Q4' as Q;'. Figures 10.10e and 10.10f illustrate the result of the embed-
ding. If we choose next the row Q2', then there results the complete embedding of 
G and G' (represented in Figs. 10.10g and h) which we sought at the beginning. 
Although there are still a few rows of H' left, all edges of G' are already embedded; 
thus we can stop. 
Obviously, the algorithm found by Dambitis requires only matrix operations 
to be performed for its realization. Thus, no topological investigations at all are 
made. That means that this procedure offers some advantages for its implemen-

234 
Chapter 10 
tation from the point of view of computer engineering. Of course, larger matrices 
entail some difficulties in so far as the memorY capacity might be exceeded. 
The examples given so far have shown that the non-planarity of the graphs 
under examination can be verified within a relatively short time, whereas a lot of 
time is necessary to determine the incidence matrix of G in case of planarity. 
10.4. PLANARITY STUDIES MADE BY DECOMPOSING GRAPHS 
Let G(:Â£, U) be a connected simple graph and C any subgraph of G. Let l be any 
edge of G which does not belong to C. We consider the set of all paths of G con-
taining l, with the condition that no interior vertex of a path belongs to C. Let 
H(C, l) denote the subgraph spanned by all these paths (cf. Fig. 10.11a). We 
call H(C, l) a bridge of G with respect to H. Figure 1O.11a contains exactly four 
bridges (if we choose for C that subgraph whose edges are drawn with double lines). 
Bridges can be generated in the following manner: Consider the set of all edges 
which do not belong to C and which are incident with at least one vertexofC. Let 
k be such an edge with the end-points P and Q, of which P belongs to C and Q 
does not (if also Q belongs to C, k forms by itself a bridge). Detach k from P and 
provide it with a terminal vertex P' (which has thus the degree 1). If Q also lies 
on C, perform this operation also with Q (cf. Fig. 10.11 b). Each component which 
results in this way and which does not belong to C represents a bridge. 
It can immediately be seen that an edge k which lies in a bridge H(C, l) gene-
rated by the edge l also generates the bridge H(C, l) = H(C, k) with respect to C. 
Therefore, we say in the following that C generates the bridges HI, ... , Hr in G, 
and do not denominante a generating edge (cf. [20]). 
Vertices of a bridge which also belong to C are called boundary points of t~e 
bridge, and all other vertices (if any) of a bridge are called interior points of it. 
Let us now define a few graphs. Let G be a graph, C a subgraph and {HI' ... , 
Hfl the set of bridges of G with respect to C (that is, the bridges generated by 
C in G). Let the graph Go result from taking C, assigning to each of the Hi a 
vertex Pi of Gc and joining Pi in Go to each of the boundary points of Hi in Gc 
by an edge (cf. Fig. 10.11c for the graph of Fig. 10.11 a). 
Let the graph G(Hi) be generated by combining all edges and vertices belong-
ing to C and Hi (cf. Fig.10.11d). 
The following theorem holds, it is proved byW. Bader, G. J. Fischer, O. Wing, 
L. Auslander and S. V. Parter: 
THEOREM 10.6 ([1], [2], [6]). A graph G is planar if and only if the following 
conditions are satisfied: 
a) The graph G c is planar. 
b) Each of the graphs G(Hi) is planar. 
Here, C is any circuit of G, and Hi (i = 1, ... , r) are the bridges generated by C in G. 

Embedding of planar graphs in the plane 
235 
c) 
c) 
Fig. 10.11 

236 
Chapter 10 
Proof. The necessity of the condition is immediately clear. 
Conversely, let the conditions a) and b) be satisfied. First we embed Gc in the 
plane, which is possible by premise. After this, each of the vertices Pi is "blown up" 
to form that bridge Hi from which it originally emerged. Thus, we obtain an 
embedding of the whole graph G in the plane. 
The basic idea of the procedure discussed in the following is that on the basis 
of the preceding theorem the graph which is to be examined for planarity is decom-
posed into parts, and each of these parts undergoes a separate planarity test. The 
planarity of the large graph can then be deduced from the possible planarity of 
the smaller ones. 
First, let us suppose that the given graph G possesses a hamiltonian circuit, 
that is, a circuit which contains all vertices of G. (We also know some graphs, 
even with restricting conditions, which have no hamiltonian circuit. Therefore, 
such a premise is very drastic. If it is known that the graph in question possesses 
a hamiltonian circuit, then it is by no means easy to identify such a hamiltonian 
circuit). 
Let C be a hamiltonian circuit of G. Then, the bridges generated by C in G are 
all edges. We consider two edges II = (PI' QI) and l2 = (P2, Q2) which do not 
belong to C (which are therefore bridges). We say that II and l2 are incompatible 
if the vertices PI' P2, Ql> Q2 are pairwise distinct from each other (that is, if the 
edges are not adjacent) and if they lie on C in the order 
Pl ... P2Â·Â·Â·QlÂ·Â·Â·Q2Â·Â·. or P 1 Â·Â·Â·Q2Â·Â·Â·Ql ... P 2 â¢â¢â¢ 
(cf. Fig. 10.12). 
P1 
... 
incompatible 
bi 
compatible 
Fig. 10.12 
The hamiltonian circuit C being embedded in the plane, it decomposes this 
plane into an interior (finite) and an exterior (infinite) domain. To embed two 
incompatible edges lb l2 together with C, one of the edges has to be embedded in 
the interior domain and the other in the exterior one. Otherwise, planarity is not 
assured. 

Embedding of planar graphs in the plane 
237 
Now, we construct an auxiliary graph F. We assign to each bridge (that is, 
to each edge that does not belong to C) a vertex from F and join two vertices inF by 
an edge if the edges corresponding to them in G are incompatible. If the graph 
F which results in this way is bipartite, i.e., if the vertices of F can be subdivided 
into two classes such that vertices of the same class are not joined, then the ini-
tial graph G is planar. We only have to embed the edges corresponding to the ver-
tices of the one class in the interior domain and those corresponding to the vertices 
of the other class in the exterior domain of C. 
If the auxiliary graph F is not bipartite, then, in each attempt to embed G, 
there will be two incompatible edges in at least one of the domains. But then, G 
is not planar. 
To check whether F is bipartite, we can proceed as follows: First, we look for a 
spanning tree in F (if F is not connected, we look for a spanning tree in each com-
ponent of F). This spanning tree is bipartite. We can assign to each of the vertices 
of F a label along the spannirrg tree, for example the label "+" or "-" such that 
vertices with the same label are never joined in the spanning tree. Now, we try 
to add one after the other all edges of F which are still missing without joining 
vertices with the same label. If this is possible, then F is bipartite and thus, Gis 
planar. If the edges of F cannot be added in this way, then G is not planar. 
Now, we discuss the case in which G possesses no hamiltonian circuit or in which 
it is difficult to obtain such a circuit. 
Choose inG any circuit C1 (if there exists no circuit in G, then G is a forest, i.e., 
a union of trees, and is thus planar). Let Ql and Q2 be two successive vertices lying 
on C1. If there exists a path W joining Ql to Q2 which has no vertex, besides Ql 
and Q2, in common with C1, we delete the edge (Ql> Q2) and add the path W. 
Obviously, a circuit is generated that is longer than C1 (such a path W exists if 
and only if there is a bridge of G with respect to C1 which contains Ql' Q2 and at 
least still another vertex). Denote the circuit resulting in this way by C2 â¢ 
We carryon enlarging the circuits until they cannot be enlarged in this way any 
more. We denote the circuit which has eventually been generated by C. If C is a 
hamiltonian circuit, we continue the procedure described above. We may thus 
assume that C is not a hamiltonian circuit. 
We consider the set of bridges Hi of G with respect to C as well as the graph G t 
which is formed by assigning to each bridge Hi a vertex Pi and by joining Pi in 
Gc to all those vertices of C which were adjacent to vertices from Hi' that is, by 
joining Pi to all boundary vertices of Hi (cf. Fig. 10.11). Obviously, exactly one 
bridge Ei in Gc corresponds to each bridge Hi of G (Ei consists of one vertex P j 
and all edges (Pi> X), with X being boundary point of Hi in G with respect to C), 
and vice versa. 
In analogy to the incompatibility concept for edges with respect to a hamilto-
nian circuit, we say that two bridges E j and E j of Gc with respect to Care in'Com-

238 
Chapter 10 
patible if in case of any (planar) embedding of C and E j and E j the two bridges 
E j and Ei are embedded in different domains (for example, Ei in the interior do-
main of C and Ei in the exterior domain, or vice versa). It is not difficult to recog-
nize already in G the compatibility or incompatibility of two bridges Ei and Ei. 
Let Xl> X 2, ... , Xs be the boundary points of Hi lying in cyclic order on C, and 
let Wk be the path on C joining Xk to Xk+1 (here let X S+1 = Xl be true with k 
= 1, ... , 8). If there is an index k such that all boundary points of Hi belong to W k , 
then E j and Ei in Ge are compatible, otherwise they are incompatible. In the first 
case, we shall also call Hi and H j in G compatible (independently of whether or 
not H j and H j are planar). Here again, we construct for Ge an auxiliary graph Fe 
by assigning a vertex Ri to each bridge E; and by joining in Fe two vertices Ri 
and Rk by an edge if and only if Ei and Ek are incompatible. We can now also state 
that Gt is planar provided that Fe is a bipartite graph. Otherwise, planarity can-
not be deduced. 
Fig. 10.13 
In order to find out whether G is planar, we have to check up each bridge HI 
separately for its planarity, that is, to be more precise, we have to investigate the 
planarity of the graph G(Hj ) for each i. 
Let us take a little example. Let the graph G be given by its adjacency matrix 
1 
2 
3 
1 
2 
3 
1 
1 
1 
4 
1 
5 
6 
1 
7 
8 
1 
1 
1 
1 
4 
5 
1 
1 
1 
1 
6 7 
1 
1 
1 
8 
1 
1 
1 
1 
1 
1 
1 
1 

Embedding of planar graphs in the plane 
239 
Fill in all empty cells of the matrix with a 0 (cf. Fig. 10.13). We seek a circuit, say 
Cl = (2, 3, 7, 6, 5, 4,1,2). 
ObvIOusly, it is not possible to enlarge the circuit in the manner described above. 
Thus, we set C = Cl and consider all bridges. There are three to be found, namely 
HI = {(P3, P 4)), 
H2 = {(PI' P6 )} , 
H3 = {(Ps, P2), (pg, P5), (Pg, P 7)}Â· 
It is seen without difficulty that these three bridges are pairwise incompatible, 
i.e., the auxiliary graph F equals K 3, the complete graph with three vertices. This 
one, however, is not bipartite, and the graph indicated is therefore not planar. 
It is clear that in the case of non-existence of a hamiltonian circuit (or when 
no hamiltonian circuit can be found although one possibly exists), the algorithm 
becomes useful only if the required circuit C generates at least two bridges. This 
is achieved by a successive extension of the circuit C generating the bridges so 
far as the initial graph is 3-connected (prove this statement!). 
As was proved in [6], all operations required by the algorithm can be performed 
as matrix operations. 
10.5. THE EMBEDDING ALGORITHM OF DEMOUCRON, MALGRANGE 
AND PERTUISET 
The idea of this embedding algorithm is as follows: Let G be a simple graph 
which is at least 2-connected. The embedding of G in the plane is carried out step 
by step starting with a circuit Gl ~ G and a successively added path which de-
composes a face into two parts. 
Algorithm 
(i) Let Co be a circuit of G. We set G l = Co and seek an embedding G l ' of G l 
in the plane. 
(ii) Let Gk ' be an embedding of Gk> and let H be any bridge of G with respect 
to Gk , and this bridge can be embedded in only one face of G/. Then, we choose in 
H a path W whose end-points (and only these) belong to Gk (and which are distinct 
from each other, which is assured because of the double connectivity), embed this 
path in the face found above and denote by Gk+l the union of Gk and W. 
(iii) If (ii) cannot be performed, we seek a bridge H in Gk that can be embedded 
in two faces of Gk', and embed a path of H (which has besides its end-points 
no common vertex with Gk ) in one of the two domains. Here again, we set Gk+! 
= Gk U W. If neither (ii) nor (iii) is applicable, the algorithm terminates. 

6 
9 
9 
8 
9 
8 
5 
5 
4 
4 
3 
2 
3 
3 
~ , 
C 
c) 
6 
d) 
6 
4 
4 
e) 
f) 
6 
~) 
5 
h) 
6 
Fig. 10.14 

Embedding of planar graphs in the plane 
241 
The following theorem holds: 
THEOREM 10.7. Let G be a simple 2-connected graph with m edges and n vertices. 
G is planar if and only if the algorithm breaks off after the construction of Gm- n+1' 
Since on the one hand the graph Gk possesses exactly k + 1 faces after the con-
struction of the sequence {G i }, and since on the other hand, however, exactly 
m -
n + 2 faces exist in G according to Euler's theorem, the algorithm termina-
tes (in case of planarity) after the construction of Gm- n+l . 
The proof that, in the case of a planar graph, Gm+1-n can always be constructed 
(by using the algorithm presented) will not be given here. The interested reader is 
referred to the original literature. 
The example of Fig. 10.14 serves to illustrate the embedding of a given graph. 
An algorithm suggested by G. Hotz [12] is similar to that described above. Hotz 
does not use the concept of a bridge, but seeks only paths (as parts of bridges). 
Investigating all bridges in the case of relatively large graphs requires a great 
deal of work, which makes the procedure described above rather complicated. 
The embedding algorithm of G. Hotz is of great clarity and is described in detail 
by H. Sachs [21]. 
10.6. THE PLANARITY ALGORITHM OF TUTTE 
The following is devoted to an algorithm of W. T. Tutte which is presumably 
the most ingenious idea of solving the embedding problem. 
Let G be a primitive (that is, 3-connected) planar graph with at least three 
vertices. 
We call a circuit C of G peripheral if C generates exactly one bridge in G. 
Let PI' .... ' P r be the vertices lying on C in the order of the traversal of C, and 
let P r+1' ... , P n be the remaining vertices of G. We imagine the graph G(I, U) to 
be embedded in the plane, and let Pi have the Cartesian co-ordinates (Xi> Yi)' 
The idea of the planarity algorithm of Tutte is as follows: We embed the peri-
pheral circuit C in the plane such that the points PI' ... , P r span a convex polygon 
(no three points are allowed to lie on one and the same straight Tine). These ver-
tices are provided with the co-ordinates (Xi> Yi) when performing the embedding 
(i = 1, ... , r). The remaining n - r vertices Pi (j = r + 1, ... , n) get as co-ordi-
nates (Xi' Yi) such values that Pi just lies at the centroid of its neighbours (i.e., 
of those vertices to which Pi is adjacent). 
How does the algorithm present itself now? Let A be the admittance matrix 
of the graph G, thus 
if Pi and Pi are adjacent. 
if i = j, 
otherwise. 

242 
Chapter 10 
Here, v(Pi) stands for the degree of the vertex Pi> i.e., it indicates the number of 
the vertices lying in the neighbourhood of Pi' Then, the co-ordinates (Xi> Yi) of 
Pi (i = r + 1, ... , n) result as the solutions of the two systems of equations 
n 
}; aijxj = 0, 
j=1 
n 
}; aijYj = Â° 
j=1 
(i=r+1, ... ,n). 
It is supposed that the co-ordinates (Xi> Yi) of the vertices Pi (i = 1, ... , r) of the 
peripheral circuit C are known, like the co-ordinates of the convex r-gon. Thus, 
we have to solve the two systems of equations 
By=q 
where x, y, p, q are column vectors of the dimension n -
r, and B is a square 
matrix with n -
r rows, which results from the admittance matrix A by deleting 
the first r rows and the first r columns. 
One can verify in the following manner that the matrixB is regular (that means 
that the two systems of equations admit a unique solution in case of given p and q) : 
The following matrix is defined by us as the admittance matrix A = (aij) of a 
(connected) graph G (which is not necessarily without multiple edges): 
for i = j, 
for i =1= j 
(here, let rij be just the number of the edges joining Pi to P , for the case i =1= j). 
If we delete in the graph G all edges of the peripheral circuit C and if we con-
tract the vertices of C to one point P, then the graph S results. Let As be the admit-
tance matrix of S. Here, we imagine the adjacency relations of P to be indicated 
in the first row and column. Since S is connected, it possesses a spanning tree. 
According to the matrix tree theorem of Kirchhoff and Trent (cf. [20]), the number 
of the spanning trees of S equals the determinant of the submatrix of As which 
results by deleting any (say the 'first) row and column. This sub matrix As> how-
ever, is obviously equal to B. Since S has a positive number of spanning trees, the 
determinant of B is also positive. Thus, B is regular. 
In order to be able to apply the algorithm (to solve the two systems of equations), 
we need a peripheral circuit. We think of a primitive graph (only such graphs are 
considered) embedded in the plane. Then, each circuit bounding a face is periphe-
ral, because the existence of more than one bridge to such a circuit would contra-
dict the triple connectivity of a primitive graph (task!). Thus, we know that each 
edge of a primitive graph lies in at least two peripheral circuits (and, as can easily 
be seen, also in two at the most), namely just in those two circuits bounding the 
face with which the edge is incident. However, this does not yet enable us to find 
a peripheral circuit. By utilizing the reflections made in paragraph 10.3. (plana-

Embedding of planar graphs in the plane 
243 
rity algorithm of Dambitis), we shall be in the position to solve the task, since we 
have seen that in case of a planar graph, each circuit basis has at least two circuits 
bounding a face. We had obtained them by seeking pendant rows in the circuit 
matrix. The circuits that correspond to the terminal edges are just peripheral. 
Now, we can formulate the theorem of Tutte: 
THEOREM 10.8. Let G be a planar 3-connected graph, and let C be a peripheral 
circuit of G with r ~ 3 vertices PI, ... , Pro If we fixe these r points as the corner points 
of a convex r-gon, then it holds: If each of the remaining vertices is put at the centroid 
of its neighbouring points (neighbourhood = adjacency), then an embedding of G 
is obtained by connecting adjacent vertices by a straight line [22]. 
This theorem will not be proved by us either. The reader is referred to the ori-
ginalliterature. 
But what happens if the initial graph is not planar? The given system of equa-
tions also admits a unique solution in case of triple connectivity of the graph. 
Joining adjacent vertices by a straight line yields either edge crossing or coinci-
dence of vertices (in case they have the same neighbouring points). 
This latter embedding algorithm is fairly obvious. After finding a peripheral 
circuit, one has only to solve a system of equations (with two different right-
hand sides). This algorithm is very suitable for being applied on a computing 
machine. If it is possible in addition to connect an X-Y-plotter to the calculator, 
then the planar (or also the non-planar) graph can even be plotted. 
The following reference books are recommended to all those who wish to get 
a deeper insight into the theory of planar graphs in general and into the embed-
ding of planar graphs in the plane in particular: [9-11, 13, 15, 16, 18,23-26]. 
10.7. BIBLIOGRAPHY 
[1] Auslander, L., and S. V. Parter: On imbedding graphs in the sphere, J. Math. Mech. 
10 (1961), 517 -523. 
[2] Bader, W.: Das topologische Problem der gedruckten Schaltung und seine Liisung. 
Arch. Elektrotechnik 49 (1964), 2-12. 
[3] Berge, C., und A. Ghouila-Houri: Programme, Spiele, Transportnetze, 2nd edn., 
Leipzig 1969. (Translated from French.) 
[4] Dambitis, J. J.: Methode zur Konstruktion ebener Graphen (Russian), Latv. matem. 
ezegodnik 6 (1969), 41-63. 
[5] Demoucron, G., Y. Malgrange et R. Pertuiset: Graphes planaires: Reconnaissance et 
construction de representations planaires topologiques, Rev. FranÂ«;. Recherche 
Operat. 8, Nr. 30 (1964), 33-47. 
[6] Fischer, G. J., and O. Wing: An algorithm for testing planar graphs from the incidence 
matrix, in: Proc. 7th Midwest Symp. on Circuit Theory, Ann Arbor, Mich., May 1964. 

244 
Chapter 10 
[7] Fischer, G. J., and Wing, 0: On correspondence between a class of planar graphs and 
bipartite graphs, IEEE Trans. Circuit Theory CTÂ·12 (1965), 266-267. 
[8] Guillemin, E. A.: How to grow your trees from given cut-set or tie-set matrices, IRE 
Trans. Circuit Theory CTÂ·S, Spec. Suppl. (1959), 110-126. 
[9] Halin, R.: Bemerkungen iiber ebene Graphen, Ma,th. Ann. 163 (1964), 38-46. 
[10] Halin, R.: Vber simpliziale Zerfallung n beliebiger (endlicher oder unendlicher) Gra-
phen, Math. Ann. HiS (1964), 216-225. 
[11] Harary, F., and W. T. Tutte: A dual form of Kuratowski's theorem, Canad. Math. 
Bull. 8 (1965), 17-20. 
[12] Hotz, G.: Einbettung von Streckenkomplexen in die Ebene, Math. Ann. lS7 (1966), 
214-223. 
[13] Jung, H. A.: Eine Verallgemeinerung des n-fachen Zusammenhanges fiir Graphen, 
Math. Ann. 187 (1970),95-103. 
[14] Kuratowski, C.: Sur Ie probleme des courves gauches en Topologie, Fund. Math. 16 
(1930), 271-283. 
[15] Lempel, A., S. Even and I. Cederbaum: An algorithm for planarity testing of graphs, 
in: TMorie des Graphes, Paris/New York 1967, p. 215-232. 
[16] Lin, P. M.: On methods of detecting planar graphs, in: Proc. 8th Midwest Symp. on 
Circuit Theory, Colorado State Univ., June 1965, p. 14-15. 
[17] MacLane, S.: A structural characterisation of planar combinatorial graphs, Duke 
Math. J. 3 (1937), 340-472. 
[18] MacLane, S.: A combinatorial condition for planar graphs, Fund. Math. 28 (1937), 
22-32. 
[19] Mayeda, W.: Necessary and sufficient conditions for realizability of cut-set matrices. 
IRE Trans. CTÂ·j' (1969), 79-81. 
[20] Sachs, H.: Einfiihrung in die Theorie der endlichen Graphen, Teil I, Leipzig 1970. 
[21] Sachs, H.: Einfiihrung in die Theorie der endlichen Graphen, Teil II, Leipzig 1972. 
[22] Tutte, W. T.: How to draw a graph, Proc. London Math. Soc. 13 (1963), 743-767. 
[23] Tutte, W. T.: A theorem on planar graphs, Trans. Amer. Math. Soc. 82 (1956), 99-116. 
[24] Tutte, W. T.: Separation of vertices by a circuit, Department of Combinatorics and 
Optimization, Research Report CORR 74-18, University of Waterloo, Ontario, 1974. 
[25] Wagner, K.: Vber eine Eigenschaft der ebenen Komplexe, Math. Ann. 114 (1937), 
570-590. 
[26] Wagner, K.: Eine Klasse minimaler nichtplattbarer Graphen, Math. Ann. 187 (1970), 
104-113. 
[27] Whitney, H.: Non-separable and planar graphs, Trans. Amer. Math. Soc. 34 (1932), 
339-362. 
[28] Whitney, H.: Planar graphs, Fund. Math. 21 (1933), 73-84. 

Algorithms 
Algorithm for deciding the strong connectivity 18 
Algorithm for deciding whether or not a graph is circuit-free 19 
Algorithm of Ford and Fulkerson 35 
Algorithm for finding a feasible flow 43 
Algorithm for determining a maximum flow 
47 
Algorithm of Gomory and Hu 51 
Algorithm for determining a shortest simple path 57, 59 
Algorithm for numbering a circuit-free graph 62 
Algorithm for determining earliest possible dates 65 
Algorithm for determining latest possible dates 66 
Algorithm of Busacker and Gowen 71 
Algorithm according to Klein 73 
Revised matrix algorithm 88 
Cascade algorithm 90 
Algorithm for finding a two-type flow 
120 
Minimum cost growth algorithm 131 
Algorithm for determining a minimum spanning tree 136 
Algorithm of Melzak for optimizing the position of the Steiner points 142 
Algorithm for solving the travelling salesman problem devised by Little, Murty, 
Sweeny and Karel 159 
Algorithm for solving the travelling salesman problem 165 
Algorithm of Held and Karp 167 
Algorithm for eliminating circuits and cycles 176 
Algorithm of Mason 190 
Algorithm of Lempel and Cederbaum 198 

246 
Algorithms 
Algorithm of Younger 208 
Algorithm of Dambitis 225 
Embedding algorithm of Dambitis 231 
Algorithm of Demoucron, Malgrange and Pertuiset 239 
Algorithm of Tutte 241 

Author Index 
Auslander, L., 234, 243 
Bader, W., 234, 243 
Berge, C., 68, 243 
Bliefernich, M., 68 
Busacker, R. G., 68, 70, 81, 125, 196 
Carre, B., 68 
Cederbaum, I., 216, 244 
Courant, R., 141, 147 
Dambitis, J. J., 223, 243 
Danzig, G. B., 68 
Demoucron, G., 239, 243 
Dirac, G. A., 4 
Diick, W., 68 
Eastman, W. L., 170 
Ebert, J., 68 
Ermolev, Ju. M. 110, 125 
Even, S., 68, 244 
Fey, P., 186 
Finkel'stejn, Ju. Ju., 170, 171 
Fischer, G. J., 234, 243, 244 
Floyd, R. W., 99 
Ford, L. R., 68, 125 
Frotscher, F., 68 
Fulkerson, D. R., 68, 125 
Garey, M. R., 170, 216 
Ghouila-Houri, A., 68, 243 
Gilbert, E. N., 142, 148 
Gomory, R. E., 49 
Gatzke, H., 60, 68 
Gowen, P. J., 70, 81 
Guillemin, E. A., 244 
Halin, R., 244 
Hamming, R., 186 
Hansen, K. H., 169, 171 
Harary, F., 244 
Hasse, M., 99 
Held, M., 159, 166, 169, 171 
Hempel, L., 42 
Hitchcock, F. L., 68 
Hotz, G., 241, 244 
Hu, T. C., 49, 68, 81, 92, 99, 125 
Huffman, D. A., 184 
Hutschenreuther, H., 148 
Johnson, D. S., 170, 216 
Jung, H. A., 244 
Kai Wai Chen, 193, 196 
Karel, C., 159, 171 
Karp, R. M., 159, 166, 169, 171 
Klein, M., 73, 74, 81 
Konig, D., 151 
Korbut, A. A., 171 
Krarup, J., 169, 171 
Kuratowski, C., 219, 244 
Lawler, E., 68, 81 
Lempel, A., 216, 244 
Lewandowski, R., 68 
Lin, P. M., 244 
Little, J. D. C., 159, 171 
Ljapunov, A. A., 225 

248 
Author Index 
MacLane, S., 221, 244 
Malgrange, Y., 239, 243 
Mason, S. J., 188, 196 
Mayeda, W., 244 
Mel'nik,1. M., 110, 125 
Melzak, Z. A., 142, 148 
Minty, G. J., 12, 68 
Murty, K. G., 159, 171 
Narahari Pandit, N. S., 90, 99 
Nguyen Mong Hung, 188, 196 
Noltemeier, H., 148, 171 
Parter, S. V., 234, 243 
Pertuiset, R., 239, 243 
Picard, C. F., 179, 186 
Piehler, J., 158, 171 
Pollak, H. 0., 142, 148 
Radtschik, 1. A., 68 
Reinisch, K., 194, 196 
Robbins, H., 141, 147 
Roth, M., 195 
Saaty, T. L., 68, 81, 125, 196 
Sacco, L., 186 
Sachs, H., 29, 37, 38, 59, 68, 136, 148, 
171,218,241,244 
Schoch, M., 169, 171 
Schreiter, D., 68 
Seiffart, E., 158, 171 
Spath, H., 171 
Steckhan, H., 171 
Steiner, J., 127 
Stempell, D., 68 
Suchowizki, S. 1., 68 
Sweeny, D. W., 159, 171 
Thome, R., 171 
Thompson, G. L., 171 
Tinhofer, G., 148, 171 
Tutte, W. T., 12, 68, 241, 244 
Voss, H.-J., 216 
Wagner, K., 244 
Walther, H., 216 
Whitney, H., 68, 220, 244 
Wing, 0., 234, 243, 244 
Wiirbach, D., 42 
Younger, D. H., 198, 201, 207, 216 
Zemanek, H., 186 

Subject Index 
Activity, 61 
auxiliary, 62 
critical, 67 
Adjacent vertex, 3 
Affine-linear function, 145 
Arc Colouring Lemma, 12 
Arc length matrix, 82 
Arrow, 61 
Ascending sequence, 92 
Assignment problem, 149 
Auxiliary activity, 62 
Backward path, 118 
Base arc, 92 
Bipartite graph, 23, 237 
Branch, 160 
Branch-and-bound, 159, 201 
Bridges, 234 
incompatible, 237 
Boundary point of a bridge, 234 
Buffer time, 67 
Busacker's and Gowen's algorithm, 71 
Cable network, 145 
Camion's theorem, 21 
Capacity, 4, 31, 33, 69, 112 
of a cut, 33 
of a path, 116 
Cascade algorithm, 91 
Chain, 3, 116 
elementary, 3 
Markov's, 4 
path, 116 
simple, 3, 116 
Chord, 222, 223 
Chord system, connected, 224 
Circuit, 3, 7 
elementary, 7 
hamiltonian, 236 
linearly independent, 222 
peripheral, 241 
Circuit system, complete, 221 
Circulation problem, 81 
Cocircuit, 12 
Cocycle,8 
conformally directed, 12 
elementary, 9 
minimal, 9 
c-cocycle, 12 
Cocyclomatic number, 29 
Coding, 184 
Column vertices, 151 
Communication network, 127 
Communication problem, 127 
Complete circuit system, 221 
Component of a graph, 3 
Concave function, 145 
Condensation of a vertex set, 51 
Conformally directed cocycle, 12 
cycle, 7 
Connected chord system, 224 
graph, 3 
Convex cost function, 101 
Cost function, 126, 127 
Cost growth, 131 
Costs, 4, 127 
modified, 71, 73 
per unit, 69 
quasi-constant, 137, 144 

250 
Subject Index 
Cotree, 12, 223 
CPM,60 
Critical activity, 67 
Critical event, 67 
path,66 
Critical path method, 60 
Cut, 33, 220 
disconnecting the vertices, 112 
minimal, 34 
Cut edge, 223 
Cut-set matrix, 223 
Cycle, 5 
conformally directed, 7 
elementary, 5, 6 
independent, 14 
c-cycle,7 
Cycle basis, 16 
c-cycloid, 20 
CyClomatic number, 27 
Dambitis' algorithm, 225 
embedding algorithm, 231 
Degree, 3 
Demoucron's, Malgrange's and Pertui-
set's embedding algorithm, 239 
Descending sequence, 92 
Determinant, 199 
Directed graph, 2 
Disconnected sets, 151 
Disconnecting cut, 112 
Distance matrix, 82 
Distance tree, 58 
Domain, 220 
Double path, 118 
Down-and-up sequence, 92 
Dual graph, 29, 220 
Dummy time, 67 
Earliest possible date, 65 
Edge, 2 
incompatible, 236 
multiple, 2 
representing, 222, 223 
terminal,224 
Elementary chain, 3 
circuit, 7 
Elementary cocycle, 9 
of a cut, 220 
cycle, 5, 6 
End-point, 2 
Equivalent questionnaires, 175 
Euler's line, 22 
polyhedron formula, 29 
Event, 61, 172, 175 
critical, 67 
length of, 175 
Exponential algorithm, 170 
Existence theorem, for a flow, 39 
for a tension, 54 
Feasible vertex numeration, 207 
Feedback are, 197 
Fixed point, 126, 127 
Flow, 4, 23 
Flux, 23 
Ford's and Fulkerson's theorem, 33 
Forward path, 118 
Function, affine-linear, 145 
concave, 145 
convex, 101 
Graph,2 
bipartite, 23, 237 
connected, 3 
directed,2 
dual, 29, 220 
oriented,2 
planar, 217 
plane, 217 
primitive, 219, 241 
reduced, 202 
simple, 38 
strongly connected, 4, 17 
symmetric, 49 
undirected, 2 
Graph component, 3 
Hamiltonian circuit, 158, 236 
Heat supply network, 145 
Held's and Karp's algorithm, 167 
Homeomorphic manifolds, 219 

Homogeneous questionnaire, 175 
House of Santa Claus. 1 
Hungarian method, 151 
Incidence function, 2 
matrix, 222 
Incident vertex, 3 
Incompatible bridges, 237 
edges, 236 
Indepent cycles, 14 
elements of a matrix, 150 
zero-set, 150 
Initial vertex, 2 
Interior point of a bridge, 234 
Isolated vertex, 3 
Joined rows, 224 
Kirchhoff's mesh rule, 24, 187 
node rule, 23, 31 
Klein's algorithm, 73 
Laplace's transformation, 189 
Latest possible date, 65 
Lemma of Minty, 12 
Lempel's and Cederbaum's algorithm, 
198 
Length,4 
of an arc, 56, 57 
of an event, 175 
Linear factor, 38, 150 
Linearly independent circuit, 222 
Loop, 2 
Markov's chain, 4 
Mason's algorithm, 190 
Matroid theory, 12 
Maximal, 4 
Maximum, 4 
Maximum flow problem, 31 
Maximum tension problem, 54 
Maximum zero-set, 150 
Mean length of a q nestionnaire, 175 
Mesh rule, 24, 187 
Minimal,4 
cocycle,9 
Subject Index 
251 
Minimal cut, 34 
set of feedback arcs, 197 
Minimum, 4 
Minimum cut, 112 
zero-covering, 150, 151 
Minty's lemma, 12 
Modified costs, 71, 73 
Morse code, 184 
Multiple edge, 2 
Multi-terminal problem, 49 
Need,126 
Neighbouring vertex, 3 
Network, 32, 62 
Network analysis, 57, 60 
Node function, 24 
Node rule, 23, 31 
Non-polynomial algorithm, 170 
Number, cocyclomatic, 29 
cyclomatic, 27 
Optimal vertex numeration, 202 
Oriented graph, 2 
Out-of-kilter-algorithm, 81 
Partial duality, 13, 14 
tension, 24 
Path, backward, 118 
critical, 66 
double, 118 
forward, 118 
simple, 3,17,116 
Path chain, 116 
flow, 116 
Pendant rows, 224 
Peripheral circuit, 241 
Permutations of subarborescences, 180 
PERT, 60 
Planar graph, 217 
Plane graph, 217 
Point, fixed, 126, 127 
Steiner's, 127 
polynomial algorithm, 170 
Potential, 4, 24, 103 
Primitive graph, 219, 241 
Process, 61 

252 
Subject Index 
Quasi-constant costs, 137, 144 
Quasi-homogeneous questionnaire, 175 
Question, 173, 174 
Questionnaire, 172, 174 
of arborescences (QA), 176 
ordered (OQA), 182 
equivalent, 175 
homogeneous, 175 
mean length of, 175 
quasi-homogeneous, 175 
Reduced graph, 202 
sequence, 92 
Representing edge, 222, 223 
Return are, 31 
Road network problem, 141 
Rooted tree, 164, 173, 176 
Row vertices, 151 
Rows, joined, 224 
pendent, 224 
Sequence, ascending, 92 
descending, 92 
down-and-up, 92 
reduced,92 
ffi-sequential subgraph, 202, 203 
Signal flow graph, 188 
Simple chain, 3, 116 
graph,38 
path, 3, 17, 118 
Simplex method, 35 
Sink, 31, 69, 174 
Source, 31, 69, 174 
Spanning tree, 12, 222 
Standard method, 82 
Steiner's point, 127 
Strongly connected graph, 4, 17 
Structure graph, 188 
Subadditivity, 130 
Subdivision of a graph, 219 
Subgraph, ffi-sequential, 203 
Supply network, 126 
Supply problem, 126 
Support, 104 
Symmetric graph, 49 
Tension, 4 
partial,24 
Terminal edge, 224 
vertex, 2 
Theorem of Camion, 21 
of Ford and Fulkerson, 33, 37, 149 
generalized, 39 
of Kirchhoff and Trent, 242 
of Konig, 151 
of Konig, Ore and Hall, 149 
of Kuratowski, 217, 219 
of MacLane, 217, 221 
of Tutte, 243 
of Whitney, 217, 220 
Theory of matroids, 12 
Transfer function, 189 
Transportation problem, 69 
convex, 100 
nonlinear, 100 
Travelling salesman problem, 157 
Tree, rooted, 164, 173, 176 
spanning, 12, 222 
I-tree, 166 
Tutte's theorem, 243 
Undirected graph, 2 
Valuation, 4 
Vertex, 2 
adjacent, 3 
incident, 3 
initial, 2 
isolated,3 
neighbouring, 3 
terminal,2 
valuation of, 4 
Vertex numeration, feasible, 207 
optimal, 202 
Weighting, 4 
Yield, 126 
Younger's algorithm, 208 
Zero-covering, 150 
minimum 150, 151 
Zero-set, maximum 151 

