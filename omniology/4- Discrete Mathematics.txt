
SCHAUM’S
OUTLINE OF
Theory and Problems of
DISCRETE
MATHEMATICS

This page intentionally left blank 

SCHAUM’S
OUTLINE OF
Theory and Problems of
DISCRETE
MATHEMATICS
Third Edition
SEYMOUR LIPSCHUTZ, Ph.D.
Temple University
MARC LARS LIPSON, Ph.D.
University of Virginia
Schaum’s Outline Series
McGRAW-HILL
New York
Chicago
San Francisco
Lisbon
London
Madrid
Mexico City
Milan
New Delhi
San Juan
Seoul
Singapore
Sydney
Toronto

Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. All rights reserved. Manufactured in the United States of America.
Except as permitted under the United States Copyright Act of 1976, no part of this publication may be reproduced or distributed in any form
or by any means, or stored in a database or retrieval system, without the prior written permission of the publisher. 
0-07-151101-6
The material in this eBook also appears in the print version of this title: 0-07-147038-7.
All trademarks are trademarks of their respective owners. Rather than put a trademark symbol after every occurrence of a trademarked name,
we use names in an editorial fashion only, and to the benefit of the trademark owner, with no intention of infringement of the trademark.
Where such designations appear in this book, they have been printed with initial caps. 
McGraw-Hill eBooks are available at special quantity discounts to use as premiums and sales promotions, or for use in corporate training
programs. For more information, please contact George Hoare, Special Sales, at george_hoare@mcgraw-hill.com or (212) 904-4069. 
TERMS OF USE 
This is a copyrighted work and The McGraw-Hill Companies, Inc. (“McGraw-Hill”) and its licensors reserve all rights in and to the work.
Use of this work is subject to these terms. Except as permitted under the Copyright Act of 1976 and the right to store and retrieve one copy
of the work, you may not decompile, disassemble, reverse engineer, reproduce, modify, create derivative works based upon, transmit, dis-
tribute, disseminate, sell, publish or sublicense the work or any part of it without McGraw-Hill’s prior consent. You may use the work for
your own noncommercial and personal use; any other use of the work is strictly prohibited. Your right to use the work may be terminated
if you fail to comply with these terms. 
THE WORK IS PROVIDED “AS IS.” McGRAW-HILL AND ITS LICENSORS MAKE NO GUARANTEES OR WARRANTIES AS TO
THE ACCURACY, ADEQUACY OR COMPLETENESS OF OR RESULTS TO BE OBTAINED FROM USING THE WORK, INCLUD-
ING ANY INFORMATION THAT CAN BE ACCESSED THROUGH THE WORK VIA HYPERLINK OR OTHERWISE, AND
EXPRESSLY DISCLAIM ANY WARRANTY, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO IMPLIED WAR-
RANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. McGraw-Hill and its licensors do not warrant or
guarantee that the functions contained in the work will meet your requirements or that its operation will be uninterrupted or error free.
Neither McGraw-Hill nor its licensors shall be liable to you or anyone else for any inaccuracy, error or omission, regardless of cause, in the
work or for any damages resulting therefrom. McGraw-Hill has no responsibility for the content of any information accessed through the
work. Under no circumstances shall McGraw-Hill and/or its licensors be liable for any indirect, incidental, special, punitive, consequential
or similar damages that result from the use of or inability to use the work, even if any of them has been advised of the possibility of such
damages. This limitation of liability shall apply to any claim or cause whatsoever whether such claim or cause arises in contract, tort or oth-
erwise. 
DOI: 10.1036/0071470387

PREFACE
Discrete mathematics, the study of ﬁnite systems, has become increasingly important as the computer age
has advanced. The digital computer is basically a ﬁnite structure, and many of its properties can be understood
and interpreted within the framework of ﬁnite mathematical systems. This book, in presenting the more essential
material, may be used as a textbook for a formal course in discrete mathematics or as a supplement to all current
texts.
The ﬁrst three chapters cover the standard material on sets, relations, and functions and algorithms. Next
come chapters on logic, counting, and probability. We then have three chapters on graph theory: graphs, directed
graphs, and binary trees. Finally there are individual chapters on properties of the integers, languages, machines,
ordered sets and lattices, and Boolean algebra, and appendices on vectors and matrices, and algebraic systems.
The chapter on functions and algorithms includes a discussion of cardinality and countable sets, and complexity.
The chapters on graph theory include discussions on planarity, traversability, minimal paths, and Warshall’s and
Huffman’s algorithms. We emphasize that the chapters have been written so that the order can be changed without
difﬁculty and without loss of continuity.
Each chapter begins with a clear statement of pertinent deﬁnitions, principles, and theorems with illustrative
and other descriptive material. This is followed by sets of solved and supplementary problems. The solved
problems serve to illustrate and amplify the material, and also include proofs of theorems. The supplementary
problems furnish a complete review of the material in the chapter. More material has been included than can be
covered in most ﬁrst courses. This has been done to make the book more ﬂexible, to provide a more useful book
of reference, and to stimulate further interest in the topics.
Seymour Lipschutz
Marc Lars Lipson
v
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

This page intentionally left blank 

CONTENTS
CHAPTER 1
Set Theory
1
1.1 Introduction
1
1.2 Sets and Elements, Subsets
1
1.3 Venn Diagrams
3
1.4 Set Operations
4
1.5 Algebra of Sets, Duality
7
1.6 Finite Sets, Counting Principle
8
1.7 Classes of Sets, Power Sets, Partitions
10
1.8 Mathematical Induction
12
SolvedProblems
12
SupplementaryProblems
18
CHAPTER 2
Relations
23
2.1 Introduction
23
2.2 Product Sets
23
2.3 Relations
24
2.4 Pictorial Representatives of Relations
25
2.5 Composition of Relations
27
2.6 Types of Relations
28
2.7 Closure Properties
30
2.8 Equivalence Relations
31
2.9 Partial Ordering Relations
33
SolvedProblems
34
SupplementaryProblems
40
CHAPTER 3
Functions and Algorithms
43
3.1 Introduction
43
3.2 Functions
43
3.3 One-to-One, Onto, and Invertible Functions
46
3.4 Mathematical Functions, Exponential and Logarithmic Functions
47
3.5 Sequences, Indexed Classes of Sets
50
3.6 Recursively Deﬁned Functions
52
3.7 Cardinality
55
3.8 Algorithms and Functions
56
3.9 Complexity of Algorithms
57
SolvedProblems
60
SupplementaryProblems
66
vii
For more information about this title, click here

viii
CONTENTS
CHAPTER 4
Logic and Propositional Calculus
70
4.1 Introduction
70
4.2 Propositions and Compound Statements
70
4.3 Basic Logical Operations
71
4.4 Propositions and Truth Tables
72
4.5 Tautologies and Contradictions
74
4.6 Logical Equivalence
74
4.7 Algebra of Propositions
75
4.8 Conditional and Biconditional Statements
75
4.9 Arguments
76
4.10 Propositional Functions, Quantiﬁers
77
4.11 Negation of Quantiﬁed Statements
79
SolvedProblems
82
SupplementaryProblems
86
CHAPTER 5
Techniques of Counting
88
5.1 Introduction
88
5.2 Basic Counting Principles
88
5.3 Mathematical Functions
89
5.4 Permutations
91
5.5 Combinations
93
5.6 The Pigeonhole Principle
94
5.7 The Inclusion–Exclusion Principle
95
5.8 Tree Diagrams
95
SolvedProblems
96
SupplementaryProblems
103
CHAPTER 6
Advanced Counting Techniques, Recursion
107
6.1 Introduction
107
6.2 Combinations with Repetitions
107
6.3 Ordered and Unordered Partitions
108
6.4 Inclusion–Exclusion Principle Revisited
108
6.5 Pigeonhole Principle Revisited
110
6.6 Recurrence Relations
111
6.7 Linear Recurrence Relations with Constant Coefﬁcients
113
6.8 Solving Second-Order Homogeneous Linear Recurrence
Relations
114
6.9 Solving General Homogeneous Linear Recurrence Relations
116
SolvedProblems
118
SupplementaryProblems
121
CHAPTER 7
Probability
123
7.1 Introduction
123
7.2 Sample Space and Events
123
7.3 Finite Probability Spaces
126
7.4 Conditional Probability
127
7.5 Independent Events
129
7.6 Independent Repeated Trials, Binomial Distribution
130
7.7 Random Variables
132

CONTENTS
ix
7.8 Chebyshev’s Inequality, Law of Large Numbers
135
SolvedProblems
136
SupplementaryProblems
149
CHAPTER 8
Graph Theory
154
8.1 Introduction, Data Structures
154
8.2 Graphs and Multigraphs
156
8.3 Subgraphs, Isomorphic and Homeomorphic Graphs
158
8.4 Paths, Connectivity
159
8.5 Traversable and Eulerian Graphs, Bridges of Königsberg
160
8.6 Labeled and Weighted Graphs
162
8.7 Complete, Regular, and Bipartite Graphs
162
8.8 Tree Graphs
164
8.9 Planar Graphs
166
8.10 Graph Colorings
168
8.11 Representing Graphs in Computer Memory
171
8.12 Graph Algorithms
173
8.13 Traveling-Salesman Problem
176
SolvedProblems
178
SupplementaryProblems
191
CHAPTER 9
Directed Graphs
201
9.1 Introduction
201
9.2 Directed Graphs
201
9.3 Basic Deﬁnitions
202
9.4 Rooted Trees
204
9.5 Sequential Representation of Directed Graphs
206
9.6 Warshall’s Algorithm, Shortest Paths
209
9.7 Linked Representation of Directed Graphs
211
9.8 Graph Algorithms: Depth-First and Breadth-First Searches
213
9.9 Directed Cycle-Free Graphs, Topological Sort
216
9.10 Pruning Algorithm for Shortest Path
218
SolvedProblems
221
SupplementaryProblems
228
CHAPTER 10
Binary Trees
235
10.1 Introduction
235
10.2 Binary Trees
235
10.3 Complete and Extended Binary Trees
237
10.4 Representing Binary Trees in Memory
239
10.5 Traversing Binary Trees
240
10.6 Binary Search Trees
242
10.7 Priority Queues, Heaps
244
10.8 Path Lengths, Huffman’s Algorithm
248
10.9 General (Ordered Rooted) Trees Revisited
251
SolvedProblems
252
SupplementaryProblems
259

x
CONTENTS
CHAPTER 11
Properties of the Integers
264
11.1 Introduction
264
11.2 Order and Inequalities, Absolute Value
265
11.3 Mathematical Induction
266
11.4 Division Algorithm
267
11.5 Divisibility, Primes
269
11.6 Greatest Common Divisor, Euclidean Algorithm
270
11.7 Fundamental Theorem of Arithmetic
273
11.8 Congruence Relation
274
11.9 Congruence Equations
278
SolvedProblems
283
SupplementaryProblems
299
CHAPTER 12
Languages, Automata, Grammars
303
12.1 Introduction
303
12.2 Alphabet, Words, Free Semigroup
303
12.3 Languages
304
12.4 Regular Expressions, Regular Languages
305
12.5 Finite State Automata
306
12.6 Grammars
310
SolvedProblems
314
SupplementaryProblems
319
CHAPTER 13
Finite State Machines and Turing Machines
323
13.1 Introduction
323
13.2 Finite State Machines
323
13.3 Gödel Numbers
326
13.4 Turing Machines
326
13.5 Computable Functions
330
SolvedProblems
331
SupplementaryProblems
334
CHAPTER 14
Ordered Sets and Lattices
337
14.1 Introduction
337
14.2 Ordered Sets
337
14.3 Hasse Diagrams of Partially Ordered Sets
340
14.4 Consistent Enumeration
342
14.5 Supremum and Inﬁmum
342
14.6 Isomorphic (Similar) Ordered Sets
344
14.7 Well-Ordered Sets
344
14.8 Lattices
346
14.9 Bounded Lattices
348
14.10 Distributive Lattices
349
14.11 Complements, Complemented Lattices
350
SolvedProblems
351
SupplementaryProblems
360

CONTENTS
xi
CHAPTER 15
Boolean Algebra
368
15.1 Introduction
368
15.2 Basic Deﬁnitions
368
15.3 Duality
369
15.4 Basic Theorems
370
15.5 Boolean Algebras as Lattices
370
15.6 Representation Theorem
371
15.7 Sum-of-Products Form for Sets
371
15.8 Sum-of-Products Form for Boolean Algebras
372
15.9 Minimal Boolean Expressions, Prime Implicants
375
15.10 Logic Gates and Circuits
377
15.11 Truth Tables, Boolean Functions
381
15.12 Karnaugh Maps
383
SolvedProblems
389
SupplementaryProblems
403
APPENDIX A
Vectors and Matrices
409
A.1 Introduction
409
A.2 Vectors
409
A.3 Matrices
410
A.4 Matrix Addition and Scalar Multiplication
411
A.5 Matrix Multiplication
412
A.6 Transpose
414
A.7 Square Matrices
414
A.8 Invertible (Nonsingular) Matrices, Inverses
415
A.9 Determinants
416
A.10 Elementary Row Operations, Gaussian Elimination (Optional)
418
A.11 Boolean (Zero-One) Matrices
422
SolvedProblems
423
SupplementaryProblems
429
APPENDIX B
Algebraic Systems
432
B.1 Introduction
432
B.2 Operations
432
B.3 Semigroups
435
B.4 Groups
438
B.5 Subgroups, Normal Subgroups, and Homomorphisms
440
B.6 Rings, Internal Domains, and Fields
443
B.7 Polynomials Over a Field
446
SolvedProblems
450
SupplementaryProblems
461
Index
467

This page intentionally left blank 

SCHAUM’S
OUTLINE OF
Theory and Problems of
DISCRETE
MATHEMATICS

This page intentionally left blank 

CHAPTER 1
Set Theory
1.1
INTRODUCTION
The concept of a set appears in all mathematics. This chapter introduces the notation and terminology of set
theory which is basic and used throughout the text. The chapter closes with the formal deﬁnition of mathematical
induction, with examples.
1.2
SETS AND ELEMENTS, SUBSETS
A set may be viewed as any well-deﬁned collection of objects, called the elements or members of the set.
One usually uses capital letters, A, B, X, Y, . . . , to denote sets, and lowercase letters, a, b, x, y, . . ., to denote
elements of sets. Synonyms for “set” are “class,” “collection,” and “family.”
Membership in a set is denoted as follows:
a ∈S denotes that a belongs to a set S
a, b ∈S denotes that a and b belong to a set S
Here ∈is the symbol meaning “is an element of.” We use ̸∈to mean “is not an element of.”
Specifying Sets
There are essentially two ways to specify a particular set. One way, if possible, is to list its members separated
by commas and contained in braces { }.Asecond way is to state those properties which characterized the elements
in the set. Examples illustrating these two ways are:
A = {1, 3, 5, 7, 9}
and
B = {x | x is an even integer, x > 0}
That is, A consists of the numbers 1, 3, 5, 7, 9. The second set, which reads:
B is the set of x such that x is an even integer and x is greater than 0,
denotes the set B whose elements are the positive integers. Note that a letter, usually x, is used to denote a typical
member of the set; and the vertical line | is read as “such that” and the comma as “and.”
EXAMPLE 1.1
(a) The set A above can also be written as A = {x | x is an odd positive integer, x < 10}.
(b) We cannot list all the elements of the above set B although frequently we specify the set by
B = {2, 4, 6, . . .}
where we assume that everyone knows what we mean. Observe that 8 ∈B, but 3 /∈B.
1
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

2
SET THEORY
[CHAP. 1
(c) Let E = {x | x2 −3x + 2 = 0},
F = {2, 1} and
G = {1, 2, 2, 1}.
Then E = F = G.
We emphasize that a set does not depend on the way in which its elements are displayed. A set remains the
same if its elements are repeated or rearranged.
Even if we can list the elements of a set, it may not be practical to do so. That is, we describe a set by listing its
elements only if the set contains a few elements; otherwise we describe a set by the property which characterizes
its elements.
Subsets
Suppose every element in a set A is also an element of a set B, that is, suppose a ∈A implies a ∈B. Then
A is called a subset of B. We also say that A is contained in B or that B contains A. This relationship is written
A ⊆B
or
B ⊇A
Two sets are equal if they both have the same elements or, equivalently, if each is contained in the other. That is:
A = B if and only if A ⊆B and B ⊆A
If A is not a subset of B, that is, if at least one element of A does not belong to B, we write A ̸⊆B.
EXAMPLE 1.2 Consider the sets:
A = {1, 3, 4, 7, 8, 9},
B = {1, 2, 3, 4, 5},
C = {1, 3}.
Then C ⊆A and C ⊆B since 1 and 3, the elements of C, are also members of A and B. But B ̸⊆A since some
of the elements of B, e.g., 2 and 5, do not belong to A. Similarly, A ̸⊆B.
Property 1: It is common practice in mathematics to put a vertical line “|” or slanted line “/” through a symbol
to indicate the opposite or negative meaning of a symbol.
Property 2: The statement A ⊆B does not exclude the possibility that A = B. In fact, for every set A we have
A ⊆A since, trivially, every element in A belongs to A. However, if A ⊆B and A ̸= B, then we say A is a
proper subset of B (sometimes written A ⊂B).
Property 3: Suppose every element of a set A belongs to a set B and every element of B belongs to a set C.
Then clearly every element of A also belongs to C. In other words, if A ⊆B and B ⊆C, then A ⊆C.
The above remarks yield the following theorem.
Theorem 1.1: Let A, B, C be any sets. Then:
(i) A ⊆A
(ii) If A ⊆B and B ⊆A, then A = B
(iii) If A ⊆B and B ⊆C, then A ⊆C
Special symbols
Some sets will occur very often in the text, and so we use special symbols for them. Some such symbols are:
N = the set of natural numbers or positive integers: 1, 2, 3, . . .
Z = the set of all integers: . . . , −2, −1, 0, 1, 2, . . .
Q = the set of rational numbers
R = the set of real numbers
C = the set of complex numbers
Observe that N ⊆Z ⊆Q ⊆R ⊆C.

CHAP. 1]
SET THEORY
3
Universal Set, Empty Set
All sets under investigation in any application of set theory are assumed to belong to some ﬁxed large set
called the universal set which we denote by
U
unless otherwise stated or implied.
Given a universal set U and a property P, there may not be any elements of U which have property P. For
example, the following set has no elements:
S = {x | x is a positive integer, x2 = 3}
Such a set with no elements is called the empty set or null set and is denoted by
∅
There is only one empty set. That is, if S and T are both empty, then S = T , since they have exactly the same
elements, namely, none.
The empty set ∅is also regarded as a subset of every other set. Thus we have the following simple result
which we state formally.
Theorem 1.2: For any set A, we have ∅⊆A ⊆U.
Disjoint Sets
Two sets A and B are said to be disjoint if they have no elements in common. For example, suppose
A = {1, 2},
B = {4, 5, 6},
and
C = {5, 6, 7, 8}
Then A and B are disjoint, and A and C are disjoint. But B and C are not disjoint since B and C have elements
in common, e.g., 5 and 6. We note that if A and B are disjoint, then neither is a subset of the other (unless one is
the empty set).
1.3
VENN DIAGRAMS
A Venn diagram is a pictorial representation of sets in which sets are represented by enclosed areas in the
plane. The universal set U is represented by the interior of a rectangle, and the other sets are represented by disks
lying within the rectangle. If A ⊆B, then the disk representing A will be entirely within the disk representing B
as in Fig. 1-1(a). If A and B are disjoint, then the disk representing A will be separated from the disk representing
B as in Fig. 1-1(b).
Fig. 1-1

4
SET THEORY
[CHAP. 1
However, if A and B are two arbitrary sets, it is possible that some objects are in A but not in B, some are
in B but not in A, some are in both A and B, and some are in neither A nor B; hence in general we represent A
and B as in Fig. 1-1(c).
Arguments and Venn Diagrams
Many verbal statements are essentially statements about sets and can therefore be described byVenn diagrams.
Hence Venn diagrams can sometimes be used to determine whether or not an argument is valid.
EXAMPLE 1.3 Show that the following argument (adapted from a book on logic by Lewis Carroll, the author
of Alice in Wonderland) is valid:
S1: All my tin objects are saucepans.
S2: I ﬁnd all your presents very useful.
S3: None of my saucepans is of the slightest use.
S : Your presents to me are not made of tin.
The statements S1, S2, and S3 above the horizontal line denote the assumptions, and the statement S below
the line denotes the conclusion. The argument is valid if the conclusion S follows logically from the assumptions
S1, S2, and S3.
By S1 the tin objects are contained in the set of saucepans, and by S3 the set of saucepans and the set of
useful things are disjoint. Furthermore, by S2 the set of “your presents” is a subset of the set of useful things.
Accordingly, we can draw the Venn diagram in Fig. 1-2.
The conclusion is clearly valid by the Venn diagram because the set of “your presents” is disjoint from the
set of tin objects.
Fig. 1-2
1.4
SET OPERATIONS
This section introduces a number of set operations, including the basic operations of union, intersection, and
complement.
Union and Intersection
The union of two sets A and B, denoted by A ∪B, is the set of all elements which belong to A or to B;
that is,
A ∪B = {x | x ∈A or x ∈B}
Here “or” is used in the sense of and/or. Figure 1-3(a) is a Venn diagram in which A ∪B is shaded.
The intersection of two sets A and B, denoted by A ∩B, is the set of elements which belong to both A and
B; that is,
A ∩B = {x | x ∈A and x ∈B}
Figure 1-3(b) is a Venn diagram in which A ∩B is shaded.

CHAP. 1]
SET THEORY
5
Fig. 1-3
Recall that sets A and B are said to be disjoint or nonintersecting if they have no elements in common or,
using the deﬁnition of intersection, if A ∩B = ∅, the empty set. Suppose
S = A ∪B
and
A ∩B = ∅
Then S is called the disjoint union of A and B.
EXAMPLE 1.4
(a) Let A = {1, 2, 3, 4}, B = {3, 4, 5, 6, 7}, C = {2, 3, 8, 9}. Then
A ∪B = {1, 2, 3, 4, 5, 6, 7},
A ∪C = {1, 2, 3, 4, 8, 9},
B ∪C = {2, 3, 4, 5, 6, 7, 8, 9},
A ∩B = {3, 4},
A ∩C = {2, 3},
B ∩C = {3}.
(b) Let U be the set of students at a university, and let M denote the set of male students and let F denote the set
of female students. The U is the disjoint union of M of F; that is,
U = M ∪F
and
M ∩F = ∅
This comes from the fact that every student in U is either in M or in F, and clearly no student belongs to
both M and F, that is, M and F are disjoint.
The following properties of union and intersection should be noted.
Property 1: Every element x in A ∩B belongs to both A and B; hence x belongs to A and x belongs to B. Thus
A ∩B is a subset of A and of B; namely
A ∩B ⊆A
and
A ∩B ⊆B
Property 2: An element x belongs to the union A ∪B if x belongs to A or x belongs to B; hence every element
in A belongs to A ∪B, and every element in B belongs to A ∪B. That is,
A ⊆A ∪B
and
B ⊆A ∪B
We state the above results formally:
Theorem 1.3: For any sets A and B, we have:
(i) A ∩B ⊆A ⊆A ∪B and (ii) A ∩B ⊆B ⊆A ∪B.
The operation of set inclusion is closely related to the operations of union and intersection, as shown by the
following theorem.
Theorem 1.4: The following are equivalent: A ⊆B,
A ∩B = A,
A ∪B = B.
This theorem is proved in Problem 1.8. Other equivalent conditions to are given in Problem 1.31.

6
SET THEORY
[CHAP. 1
Fig. 1-4
Complements, Differences, Symmetric Differences
Recall that all sets under consideration at a particular time are subsets of a ﬁxed universal set U. The absolute
complement or, simply, complement of a set A, denoted by AC, is the set of elements which belong to U but which
do not belong to A. That is,
AC = {x | x ∈U, x /∈A}
Some texts denote the complement of A by A′ or ¯A. Fig. 1-4(a) is a Venn diagram in which AC is shaded.
The relative complement of a set B with respect to a set A or, simply, the difference of A and B, denoted by
A\B, is the set of elements which belong to A but which do not belong to B; that is
A\B = {x | x ∈A, x /∈B}
The set A\B is read “A minus B.” Many texts denote A\B by A −B or A ∼B. Fig. 1-4(b) is a Venn diagram in
which A\B is shaded.
The symmetric difference of sets A and B, denoted by A ⊕B, consists of those elements which belong to A
or B but not to both. That is,
A ⊕B = (A ∪B)\(A ∩B)
or
A ⊕B = (A\B) ∪(B\A)
Figure 1-4(c) is a Venn diagram in which A ⊕B is shaded.
EXAMPLE 1.5 Suppose U = N = {1, 2, 3, . . .} is the universal set. Let
A = {1, 2, 3, 4},
B = {3, 4, 5, 6, 7},
C = {2, 3, 8, 9},
E = {2, 4, 6, . . .}
(Here E is the set of even integers.) Then:
AC = {5, 6, 7, . . .},
BC = {1, 2, 8, 9, 10, . . .},
EC = {1, 3, 5, 7, . . .}
That is, EC is the set of odd positive integers. Also:
A\B = {1, 2},
A\C = {1, 4},
B\C = {4, 5, 6, 7},
A\E = {1, 3},
B\A = {5, 6, 7},
C\A = {8, 9},
C\B = {2, 8, 9},
E\A = {6, 8, 10, 12, . . .}.
Furthermore:
A ⊕B = (A\B) ∪(B\A) = {1, 2, 5, 6, 7},
B ⊕C = {2, 4, 5, 6, 7, 8, 9},
A ⊕C = (A\C) ∪(B\C) = {1, 4, 8, 9},
A ⊕E = {1, 3, 6, 8, 10, . . .}.
Fundamental Products
Consider n distinct sets A1, A2, …, An. A fundamental product of the sets is a set of the form
A∗
1 ∩A∗
2 ∩. . . ∩A∗
n
where
A∗
i = A
or
A∗
i = AC

CHAP. 1]
SET THEORY
7
We note that:
(i) There are m = 2n such fundamental products.
(ii) Any two such fundamental products are disjoint.
(iii) The universal set U is the union of all fundamental products.
Thus U is the disjoint union of the fundamental products (Problem 1.60). There is a geometrical description
of these sets which is illustrated below.
EXAMPLE 1.6 Figure 1-5(a) is the Venn diagram of three sets A, B, C. The following lists the m = 23 = 8
fundamental products of the sets A, B, C:
P1 = A ∩B ∩C,
P3 = A ∩BC ∩C,
P5 = AC ∩B ∩C,
P7 = AC ∩BC ∩C,
P2 = A ∩B ∩CC,
P4 = A ∩BC ∩CC,
P6 = AC ∩B ∩CC,
P8 = AC ∩BC ∩CC.
The eight products correspond precisely to the eight disjoint regions in the Venn diagram of sets A, B, C as
indicated by the labeling of the regions in Fig. 1-5(b).
Fig. 1-5
1.5
ALGEBRA OF SETS, DUALITY
Sets under the operations of union, intersection, and complement satisfy various laws (identities) which are
listed in Table 1-1. In fact, we formally state this as:
Theorem 1.5: Sets satisfy the laws in Table 1-1.
Table 1-1
Laws of the algebra of sets
Idempotent laws:
(1a) A ∪A = A
(1b) A ∩A = A
Associative laws:
(2a) (A ∪B) ∪C = A ∪(B ∪C)
(2b) (A ∩B) ∩C = A ∩(B ∩C)
Commutative laws:
(3a) A ∪B = B ∪A
(3b) A ∩B = B ∩A
Distributive laws:
(4a) A ∪(B ∩C) = (A ∪B) ∩(A ∪C)
(4b) A ∩(B ∪C) = (A ∩B) ∪(A ∩C)
Identity laws:
(5a) A ∪∅= A
(5b) A ∩U = A
(6a) A ∪U = U
(6b) A ∩∅= ∅
Involution laws:
(7) (AC)C = A
Complement laws:
(8a) A ∪AC = U
(8b) A ∩AC = ∅
(9a) UC = ∅
(9b) ∅C = U
DeMorgan’s laws:
(10a) (A ∪B)C = AC ∩BC
(10b) (A ∩B)C = AC ∪BC

8
SET THEORY
[CHAP. 1
Remark: Each law in Table 1-1 follows from an equivalent logical law. Consider, for example, the proof of
DeMorgan’s Law 10(a):
(A ∪B)C = {x | x /∈(A or B)} = {x | x /∈A and x /∈B} = AC ∩BC
Here we use the equivalent (DeMorgan’s) logical law:
¬(p ∨q) = ¬p ∧¬q
where ¬ means “not,” ∨means “or,” and ∧means “and.” (Sometimes Venn diagrams are used to illustrate the
laws in Table 1-1 as in Problem 1.17.)
Duality
The identities in Table 1-1 are arranged in pairs, as, for example, (2a) and (2b). We now consider the principle
behind this arrangement. Suppose E is an equation of set algebra. The dual E∗of E is the equation obtained by
replacing each occurrence of ∪, ∩, U and ∅in E by ∩, ∪, ∅, and U, respectively. For example, the dual of
(U ∩A) ∪(B ∩A) = A
is
(∅∪A) ∩(B ∪A) = A
Observe that the pairs of laws in Table 1-1 are duals of each other. It is a fact of set algebra, called the principle
of duality, that if any equation E is an identity then its dual E∗is also an identity.
1.6
FINITE SETS, COUNTING PRINCIPLE
Sets can be ﬁnite or inﬁnite. A set S is said to be ﬁnite if S is empty or if S contains exactly m elements where
m is a positive integer; otherwise S is inﬁnite.
EXAMPLE 1.7
(a) The set A of the letters of the English alphabet and the set D of the days of the week are ﬁnite sets. Speciﬁcally,
A has 26 elements and D has 7 elements.
(b) Let E be the set of even positive integers, and let I be the unit interval, that is,
E = {2, 4, 6, . . .}
and
I = [0, 1] = {x | 0 ≤x ≤1}
Then both E and I are inﬁnite.
A set S is countable if S is ﬁnite or if the elements of S can be arranged as a sequence, in which case S is
said to be countably inﬁnite; otherwise S is said to be uncountable. The above set E of even integers is countably
inﬁnite, whereas one can prove that the unit interval I = [0, 1] is uncountable.
Counting Elements in Finite Sets
The notation n(S) or |S| will denote the number of elements in a set S. (Some texts use #(S) or card(S)
instead of n(S).) Thus n(A) = 26, where A is the letters in the English alphabet, and n(D) = 7, where D is the
days of the week. Also n(∅) = 0 since the empty set has no elements.
The following lemma applies.
Lemma 1.6: Suppose A and B are ﬁnite disjoint sets. Then A ∪B is ﬁnite and
n(A ∪B) = n(A) + n(B)
This lemma may be restated as follows:
Lemma 1.6: Suppose S is the disjoint union of ﬁnite sets A and B. Then S is ﬁnite and
n(S) = n(A) + n(B)

CHAP. 1]
SET THEORY
9
Proof. In counting the elements of A ∪B, ﬁrst count those that are in A. There are n(A) of these. The only other
elements of A ∪B are those that are in B but not in A. But since A and B are disjoint, no element of B is in A,
so there are n(B) elements that are in B but not in A. Therefore, n(A ∪B) = n(A) + n(B).
For any sets A and B, the set A is the disjoint union of A\B and A ∩B. Thus Lemma 1.6 gives us the
following useful result.
Corollary 1.7: Let A and B be ﬁnite sets. Then
n(A\B) = n(A) −n(A ∩B)
For example, suppose an art class A has 25 students and 10 of them are taking a biology class B. Then the number
of students in class A which are not in class B is:
n(A\B) = n(A) −n(A ∩B) = 25 −10 = 15
Given any set A, recall that the universal set U is the disjoint union of A and AC. Accordingly, Lemma 1.6
also gives the following result.
Corollary 1.8: Let A be a subset of a ﬁnite universal set U. Then
n(AC) = n(U) −n(A)
For example, suppose a class U with 30 students has 18 full-time students. Then there are 30−18 = 12 part-time
students in the class U.
Inclusion–Exclusion Principle
There is a formula for n(A ∪B) even when they are not disjoint, called the Inclusion–Exclusion Principle.
Namely:
Theorem (Inclusion–Exclusion Principle) 1.9: Suppose A and B are ﬁnite sets. Then A ∪B and A ∩B are
ﬁnite and
n(A ∪B) = n(A) + n(B) −n(A ∩B)
That is, we ﬁnd the number of elements in A or B (or both) by ﬁrst adding n(A) and n(B) (inclusion) and then
subtracting n(A ∩B) (exclusion) since its elements were counted twice.
We can apply this result to obtain a similar formula for three sets:
Corollary 1.10: Suppose A, B, C are ﬁnite sets. Then A ∪B ∪C is ﬁnite and
n(A ∪B ∪C) = n(A) + n(B) + n(C) −n(A ∩B) −n(A ∩C) −n(B ∩C) + n(A ∩B ∩C)
Mathematical induction (Section 1.8) may be used to further generalize this result to any number of ﬁnite sets.
EXAMPLE 1.8 Suppose a list A contains the 30 students in a mathematics class, and a list B contains the
35 students in an English class, and suppose there are 20 names on both lists. Find the number of students:
(a) only on list A, (b) only on list B, (c) on list A or B (or both), (d) on exactly one list.
(a) List A has 30 names and 20 are on list B; hence 30 −20 = 10 names are only on list A.
(b) Similarly, 35 −20 = 15 are only on list B.
(c) We seek n(A ∪B). By inclusion–exclusion,
n(A ∪B) = n(A) + n(B) −n(A ∩B) = 30 + 35 −20 = 45.
In other words, we combine the two lists and then cross out the 20 names which appear twice.
(d) By (a) and (b), 10 + 15 = 25 names are only on one list; that is, n(A ⊕B) = 25.

10
SET THEORY
[CHAP. 1
1.7
CLASSES OF SETS, POWER SETS, PARTITIONS
Given a set S, we might wish to talk about some of its subsets. Thus we would be considering a set of sets.
Whenever such a situation occurs, to avoid confusion, we will speak of a class of sets or collection of sets rather
than a set of sets. If we wish to consider some of the sets in a given class of sets, then we speak of subclass or
subcollection.
EXAMPLE 1.9 Suppose S = {1, 2, 3, 4}.
(a) Let A be the class of subsets of S which contain exactly three elements of S. Then
A = [{1, 2, 3}, {1, 2, 4}, {1, 3, 4}, {2, 3, 4}]
That is, the elements of A are the sets {1, 2, 3}, {1, 2, 4}, {1, 3, 4}, and {2, 3, 4}.
(b) Let B be the class of subsets of S, each which contains 2 and two other elements of S. Then
B = [{1, 2, 3}, {1, 2, 4}, {2, 3, 4}]
The elements of B are the sets {1, 2, 3}, {1, 2, 4}, and {2, 3, 4}. Thus B is a subclass of A, since every
element of B is also an element of A. (To avoid confusion, we will sometimes enclose the sets of a class in
brackets instead of braces.)
Power Sets
For a given set S , we may speak of the class of all subsets of S. This class is called the power set of S , and
will be denoted by P (S). If S is ﬁnite, then so is P(S). In fact, the number of elements in P(S) is 2 raised to the
power n(S). That is,
n(P(S)) = 2n(S)
(For this reason, the power set of S is sometimes denoted by 2S.)
EXAMPLE 1.10 Suppose S = {1, 2, 3}. Then
P(S) = [∅, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, S]
Note that the empty set ∅belongs to P(S) since ∅is a subset of S. Similarly, S belongs to P(S). As expected
from the above remark, P(S) has 23 = 8 elements.
Partitions
Let S be a nonempty set. A partition of S is a subdivision of S into nonoverlapping, nonempty subsets.
Precisely, a partition of S is a collection {Ai} of nonempty subsets of S such that:
(i) Each a in S belongs to one of the Ai.
(ii) The sets of {Ai} are mutually disjoint; that is, if
Aj ̸= Ak
then
Aj ∩Ak = ∅
The subsets in a partition are called cells. Figure 1-6 is a Venn diagram of a partition of the rectangular set
S of points into ﬁve cells, A1, A2, A3, A4, A5.

CHAP. 1]
SET THEORY
11
Fig. 1-6
EXAMPLE 1.11 Consider the following collections of subsets of S = {1, 2, . . ., 8, 9}:
(i) [{1, 3, 5}, {2, 6}, {4, 8, 9}]
(ii) [{1, 3, 5}, {2, 4, 6, 8}, {5, 7, 9}]
(iii) [{1, 3, 5}, {2, 4, 6, 8}, {7, 9}]
Then (i) is not a partition of S since 7 in S does not belong to any of the subsets. Furthermore, (ii) is not a
partition of S since {1, 3, 5} and {5, 7, 9} are not disjoint. On the other hand, (iii) is a partition of S.
Generalized Set Operations
The set operations of union and intersection were deﬁned above for two sets.These operations can be extended
to any number of sets, ﬁnite or inﬁnite, as follows.
Consider ﬁrst a ﬁnite number of sets, say, A1, A2, . . ., Am. The union and intersection of these sets are
denoted and deﬁned, respectively, by
A1 ∪A2 ∪. . . ∪Am = m
i=1 Ai = {x | x ∈Ai for some Ai}
A1 ∩A2 ∩. . . ∩Am = m
i=1 Ai = {x | x ∈Ai for every Ai}
That is, the union consists of those elements which belong to at least one of the sets, and the intersection consists
of those elements which belong to all the sets.
Now let A be any collection of sets. The union and the intersection of the sets in the collection A is denoted
and deﬁned, respectively, by
 (A|A ∈A ) = {x | x ∈Ai for some Ai ∈A }
 (A|A ∈A ) = {x | x ∈Ai for every Ai ∈A }
That is, the union consists of those elements which belong to at least one of the sets in the collection A and the
intersection consists of those elements which belong to every set in the collection A.
EXAMPLE 1.12 Consider the sets
A1 = {1, 2, 3, . . .} = N,
A2 = {2, 3, 4, . . .},
A3 = {3, 4, 5, . . .},
An = {n, n + 1, n + 2, . . .}.
Then the union and intersection of the sets are as follows:

(Ak | k ∈N) = N
and

(Ak | k ∈N) = ∅
DeMorgan’s laws also hold for the above generalized operations. That is:
Theorem 1.11: Let A be a collection of sets. Then:
(i)
  (A | A ∈A )
C =  (AC | A ∈A )
(ii)
  (A | A ∈A )
C =  (AC | A ∈A )

12
SET THEORY
[CHAP. 1
1.8
MATHEMATICAL INDUCTION
An essential property of the set N = {1, 2, 3, …} of positive integers follows:
Principle of Mathematical Induction I: Let P be a proposition deﬁned on the positive integers N; that is, P(n)
is either true or false for each n ∈N. Suppose P has the following two properties:
(i) P (1) is true.
(ii) P (k + 1) is true whenever P(k) is true.
Then P is true for every positive integer n ∈N.
We shall not prove this principle. In fact, this principle is usually given as one of the axioms when N is
developed axiomatically.
EXAMPLE 1.13 Let P be the proposition that the sum of the ﬁrst n odd numbers is n2; that is,
P(n) : 1 + 3 + 5 + · · · + (2n −1) = n2
(The kth odd number is 2k −1, and the next odd number is 2k + 1.) Observe that P(n) is true for n = 1; namely,
P(1) = 12
Assuming P (k) is true, we add 2k + 1 to both sides of P(k), obtaining
1 + 3 + 5 + · · · + (2k −1) + (2k + 1) −k2 + (2k + 1) = (k + 1)2
which is P (k + 1). In other words, P(k + 1) is true whenever P(k) is true. By the principle of mathematical
induction, P is true for all n.
There is a form of the principle of mathematical induction which is sometimes more convenient to use.
Although it appears different, it is really equivalent to the above principle of induction.
Principle of Mathematical Induction II: Let P be a proposition deﬁned on the positive integers N such that:
(i) P (1) is true.
(ii) P (k) is true whenever P(j) is true for all 1 ≤j < k.
Then P is true for every positive integer n ∈N.
Remark: Sometimes one wants to prove that a proposition P is true for the set of integers
{a, a + 1, a + 2, a + 3, . . .}
where a is any integer, possibly zero. This can be done by simply replacing 1 by a in either of the above Principles
of Mathematical Induction.
Solved Problems
SETS AND SUBSETS
1.1 Which of these sets are equal: {x, y, z}, {z, y, z, x}, {y, x, y, z}, {y, z, x, y}?
They are all equal. Order and repetition do not change a set.
1.2 List the elements of each set where N = {1, 2, 3, …}.
(a) A = {x ∈N | 3 < x < 9}
(b) B = {x ∈N | x is even, x < 11}

CHAP. 1]
SET THEORY
13
(c) C = {x ∈N | 4 + x = 3}
(a) A consists of the positive integers between 3 and 9; hence A = {4, 5, 6, 7, 8}.
(b) B consists of the even positive integers less than 11; hence B = {2, 4, 6, 8, 10}.
(c) No positive integer satisﬁes 4 + x = 3; hence C = ∅, the empty set.
1.3 Let A = {2, 3, 4, 5}.
(a) Show that A is not a subset of B = {x ∈N | x is even}.
(b) Show that A is a proper subset of C = {1, 2, 3, . . ., 8, 9}.
(a) It is necessary to show that at least one element in A does not belong to B. Now 3 ∈A and, since B consists
of even numbers, 3 /∈B; hence A is not a subset of B.
(b) Each element of A belongs to C so A ⊆C. On the other hand, 1 ∈C but 1 /∈A. Hence A ̸= C. Therefore A
is a proper subset of C.
SET OPERATIONS
1.4 Let U = {1,2, …, 9} be the universal set, and let
A = {1, 2, 3, 4, 5},
C = {5, 6, 7, 8, 9},
E = {2, 4, 6, 8},
B = {4, 5, 6, 7},
D = {1, 3, 5, 7, 9},
F = {1, 5, 9}.
Find: (a) A ∪B and A ∩B; (b) A ∪C and A ∩C; (c) D ∪F and D ∩F.
Recall that the union X ∪Y consists of those elements in either X or Y (or both), and that the intersection X ∩Y consists
of those elements in both X and Y.
(a) A ∪B = {1, 2, 3, 4, 5, 6, 7} and A ∩B = {4, 5}
(b) A ∪C = {1, 2, 3, 4, 5, 6, 7, 8, 9} = U and A ∩C = {5}
(c) D ∪F = {1, 3, 5, 7, 9} = D and D ∩F = (1, 5, 9) = F
Observe that F ⊆D, so by Theorem 1.4 we must have D ∪F = D and D ∩F = F.
1.5 Consider the sets in the preceding Problem 1.4. Find:
(a) AC, BC, DC, EC;
(b) A\B, B\A, D\E;
(c)A ⊕B, C ⊕D, E ⊕F.
Recall that:
(1) The complements XC consists of those elements in U which do not belong to X.
(2) The difference X\Y consists of the elements in X which do not belong to Y.
(3) The symmetric difference X ⊕Y consists of the elements in X or in Y but not in both.
Therefore:
(a) AC = {6, 7, 8, 9};
BC = {1, 2, 3, 8, 9};
DC = {2, 4, 6, 8} = E;
EC = {1, 3, 5, 7, 9} = D.
(b) A\B = {1, 2, 3};
B\A = {6, 7};
D\E = {1, 3, 5, 7, 9} = D;
F\D = ∅.
(c) A ⊕B = {1, 2, 3, 6, 7};
C ⊕D = {1, 3, 6, 8};
E ⊕F = {2, 4, 6, 8, 1, 5, 9} = E ∪F.
1.6 Show that we can have: (a) A ∩B = A ∩C without B = C;
(b) A ∪B = A ∪C without B = C.
(a) Let A = {1, 2}, B = {2, 3}, C = {2, 4}. Then A ∩B = {2} and A ∩C = {2}; but B ̸= C.
(b) Let A = {1, 2}, B = {1, 3}, C = {2, 3}. Then A ∪B = {1, 2, 3} and A ∪C = {1, 2, 3} but B ̸= C.
1.7 Prove: B\A = B ∩AC. Thus, the set operation of difference can be written in terms of the operations of
intersection and complement.
B\A = {x | x ∈B, x /∈A} = {x | x ∈B, x ∈AC} = B ∩AC.

14
SET THEORY
[CHAP. 1
1.8 Prove Theorem 1.4. The following are equivalent: A ⊆B, A ∩B = A, A ∪B = B.
Suppose A ⊆B and let x ∈A. Then x ∈B, hence x ∈A∩B and A ⊆A∩B. By Theorem 1.3, (A∩B) ⊆A. Therefore
A ∩B = A. On the other hand, suppose A ∩B = A and let x ∈A. Then x ∈(A ∩B); hence x ∈A and x ∈B.
Therefore, A ⊆B. Both results show that A ⊆B is equivalent to A ∩B = A.
Suppose again that A ⊆B. Let x ∈(A ∪B). Then x ∈A or x ∈B. If x ∈A, then x ∈B because A ⊆B. In either
case, x ∈B. Therefore A ∪B ⊆B. By Theorem 1.3, B ⊆A ∪B. Therefore A ∪B = B. Now suppose A ∪B = B and
let x ∈A. Then x ∈A ∪B by deﬁnition of the union of sets. Hence x ∈B = A ∪B. Therefore A ⊆B. Both results
show that A ⊆B is equivalent to A ∪B = B.
Thus A ⊆B, A ∪B = A and A ∪B = B are equivalent.
VENN DIAGRAMS, ALGEBRA OF SETS, DUALITY
1.9 Illustrate DeMorgan’s Law (A ∪B)C = AC ∩BC using Venn diagrams.
Shade the area outside A ∪B in a Venn diagram of sets A and B. This is shown in Fig. 1-7(a); hence the shaded
area represents (A ∪B)C. Now shade the area outside A in a Venn diagram of A and B with strokes in one direction
(////), and then shade the area outside B with strokes in another direction (\\\\). This is shown in Fig. 1-7(b); hence the
cross-hatched area (area where both lines are present) represents AC ∩BC. Both (A∪B)C and AC ∩BC are represented
by the same area; thus the Venn diagram indicates (A ∪B)C = AC ∩BC. (We emphasize that a Venn diagram is not a
formal proof, but it can indicate relationships between sets.)
Fig. 1-7
1.10 Prove the Distributive Law: A ∩(B ∪C) = (A ∩B) ∪(A ∩C).
A ∩(B ∪C) = {x | x ∈A, x ∈(B ∪C)}
= {x | x ∈A, x ∈B or x ∈A, x ∈C} = (A ∩B) ∪(A ∩C)
Here we use the analogous logical law p ∧(q ∨r) ≡(p ∧q) ∨(p ∧r) where ∧denotes “and” and ∨denotes “or.”
1.11 Write the dual of: (a) (U ∩A) ∪(B ∩A) = A;
(b) (A ∩U) ∩(∅∪AC) = ∅.
Interchange ∪and ∩and also U and ∅in each set equation:
(a) (∅∪A) ∩(B ∪A) = A;
(b) (A ∪∅) ∪(U ∩AC) = U.
1.12 Prove: (A ∪B)\(A ∩B) = (A\B) ∪(B\A). (Thus either one may be used to deﬁne A ⊕B.)
Using X\Y = X ∩Y C and the laws in Table 1.1, including DeMorgan’s Law, we obtain:
(A ∪B)\(A ∩B) = (A ∪B) ∩(A ∩B)C = (A ∪B) ∩(AC ∪BC)
= (A ∪AC) ∪(A ∩BC) ∪(B ∩AC) ∪(B ∩BC)
= ∅∪(A ∩BC) ∪(B ∩AC) ∪∅
= (A ∩BC) ∪(B ∩AC) = (A\B) ∪(B\A)

CHAP. 1]
SET THEORY
15
1.13 Determine the validity of the following argument:
S1: All my friends are musicians.
S2: John is my friend.
S3: None of my neighbors are musicians.
S : John is not my neighbor.
The premises S1 and S3 lead to the Venn diagram in Fig. 1-8(a). By S2, John belongs to the set of friends which is
disjoint from the set of neighbors. Thus S is a valid conclusion and so the argument is valid.
Fig. 1-8
FINITE SETS AND THE COUNTING PRINCIPLE
1.14 Each student in LiberalArts at some college has a mathematics requirement A and a science requirement B.
A poll of 140 sophomore students shows that:
60 completed A,
45 completed B,
20 completed both A and B.
Use a Venn diagram to ﬁnd the number of students who have completed:
(a) At least one of A and B; (b) exactly one of A or B; (c) neither A nor B.
Translating the above data into set notation yields:
n(A) = 60, n(B) = 45, n(A ∩B) = 20, n(U) = 140
Draw a Venn diagram of sets A and B as in Fig. 1-1(c). Then, as in Fig. 1-8(b), assign numbers to the four regions as
follows:
20 completed both A and B, so n(A ∩B) = 20.
60 −20 = 40 completed A but not B, so n(A\B) = 40.
45 −20 = 25 completed B but not A, so n(B\A) = 25.
140 −20 −40 −25 = 55 completed neither A nor B.
By the Venn diagram:
(a) 20 + 40 + 25 = 85 completed A or B. Alternately, by the Inclusion–Exclusion Principle:
n(A ∪B) = n(A) + n(B) −n(A ∩B) = 60 + 45 −20 = 85
(b) 40 + 25 = 65 completed exactly one requirement. That is, n(A ⊕B) = 65.
(c) 55 completed neither requirement, i.e. n(AC ∩BC) = n[(A ∪B)C] = 140 −85 = 55.
1.15 In a survey of 120 people, it was found that:
65 read Newsweek magazine,
20 read both Newsweek and Time,
45 read Time,
25 read both Newsweek and Fortune,
42 read Fortune,
15 read both Time and Fortune,
8 read all three magazines.

16
SET THEORY
[CHAP. 1
(a) Find the number of people who read at least one of the three magazines.
(b) Fill in the correct number of people in each of the eight regions of the Venn diagram in Fig. 1-9(a) where
N, T , and F denote the set of people who read Newsweek, Time, and Fortune, respectively.
(c) Find the number of people who read exactly one magazine.
Fig. 1-9
(a) We want to ﬁnd n(N ∪T ∪F). By Corollary 1.10 (Inclusion–Exclusion Principle),
n(N ∪T ∪F)= n(N) + n(T ) + n(F) −n(N ∩T ) −n(N ∩F) −n(T ∩F) + n(N ∩T ∩F)
= 65 + 45 + 42 −20 −25 −15 + 8 = 100
(b) The required Venn diagram in Fig. 1-9(b) is obtained as follows:
8 read all three magazines,
20 −8 = 12 read Newsweek and Time but not all three magazines,
25 −8 = 17 read Newsweek and Fortune but not all three magazines,
15 −8 = 7 read Time and Fortune but not all three magazines,
65 −12 −8 −17 = 28 read only Newsweek,
45 −12 −8 −7 = 18 read only Time,
42 −17 −8 −7 = 10 read only Fortune,
120 −100 = 20 read no magazine at all.
(c) 28 + 18 + 10 = 56 read exactly one of the magazines.
1.16 Prove Theorem 1.9. Suppose A and B are ﬁnite sets. Then A ∪B and A ∩B are ﬁnite and
n(A ∪B) = n(A) + n(B) −n(A ∩B)
If A and B are ﬁnite then, clearly, A ∪B and A ∩B are ﬁnite.
Suppose we count the elements in A and then count the elements in B.
Then every element in A ∩B would be counted twice, once in A and once in B. Thus
n(A ∪B) = n(A) + n(B) −n(A ∩B)

CHAP. 1]
SET THEORY
17
CLASSES OF SETS
1.17 Let A = [{1, 2, 3}, {4, 5}, {6, 7, 8}]. (a) List the elements of A; (b) Find n(A).
(a) A has three elements, the sets {1, 2, 3}, {4, 5}, and {6, 7, 8}.
(b) n(A) = 3.
1.18 Determine the power set P(A) of A = {a, b, c, d}.
The elements of P (A) are the subsets of A. Hence
P (A) = [A, {a, b, c}, {a, b, d}, {a, c, d}, {b, c, d}, {a, b}, {a, c}, {a, d}, {b, c}, {b, d},
{c, d}, {a}, {b}, {c}, {d}, ∅]
As expected, P(A) has 24 = 16 elements.
1.19 Let S = {a, b, c, d, e, f , g}. Determine which of the following are partitions of S:
(a) P1 = [{a, c, e}, {b}, {d, g}],
(c) P3 = [{a, b, e, g}, {c}, {d, f }],
(b) P2 = [{a, e, g}, {c, d}, {b, e, f }],
(d) P4 = [{a, b, c, d, e, f , g}].
(a) P1 is not a partition of S since f ∈S does not belong to any of the cells.
(b) P2 is not a partition of S since e ∈S belongs to two of the cells.
(c) P3 is a partition of S since each element in S belongs to exactly one cell.
(d) P4 is a partition of S into one cell, S itself.
1.20 Find all partitions of S = {a, b, c, d}.
Note ﬁrst that each partition of S contains either 1, 2, 3, or 4 distinct cells. The partitions are as follows:
(1) [{a, b, c, d}]
(2) [{a}, {b, c, d}], [{b}, {a, c, d}], [{c}, {a, b, d}], [{d}, {a, b, c}],
[{a, b}, {c, d}], [{a, c}, {b, d}], [{a, d}, {b, c}]
(3) [{a}, {b}, {c, d}], [{a}, {c}, {b,d}], [{a}, {d}, {b, c}],
[{b}, {c}, {a, d}], [{b}, {d}, {a, c}], [{c}, {d}, {a, b}]
(4) [{a}, {b}, {c}, {d}]
There are 15 different partitions of S.
1.21 Let N = {1, 2, 3,…} and, for each n ∈N, Let An = {n, 2n, 3n,…}. Find:
(a) A3 ∩A5; (b) A4 ∩A5; (c) 
i∈QAi where Q = {2, 3, 5, 7, 11, …} is the set of prime numbers.
(a) Those numbers which are multiples of both 3 and 5 are the multiples of 15; hence A3 ∩A5 = A15.
(b) The multiples of 12 and no other numbers belong to both A4 and A6, hence A4 ∩A6 = A12.
(c) Every positive integer except 1 is a multiple of at least one prime number; hence

i∈Q
Ai = {2, 3, 4, . . .} = N\{1}
1.22 Let {Ai | i ∈I} be an indexed class of sets and let i0 ∈I. Prove

i∈I
Ai ⊆Ai0 ⊆

i∈I
Ai.
Let x ∈
i∈I Ai then x ∈Ai for every i ∈I. In particular, x ∈Ai0. Hence 
i∈l Ai ⊆Ai0. Now let y ∈Ai0. Since
i0 ∈I, y ∈
i∈lAi. Hence Ai0 ⊆
i∈l Ai.

18
SET THEORY
[CHAP. 1
1.23 Prove (De Morgan’s law): For any indexed class {Ai | i ∈I}, we have
 
i Ai
C = 
i AC
i .
Using the deﬁnitions of union and intersection of indexed classes of sets:
 
i Ai
C = {x | x /∈

i Ai} = {x | x /∈Ai for every i}
= {x | x ∈AC
i for every i} =

i AC
i
MATHEMATICAL INDUCTION
1.24 Prove the proposition P(n) that the sum of the ﬁrst n positive integers is 1
2n(n + 1); that is,
P(n) = 1 + 2 + 3 + · · · + n = 1
2n(n + 1)
The proposition holds for n = 1 since:
P(1) : 1 = 1
2(1)(1 + 1)
Assuming P (k) is true, we add k + 1 to both sides of P(k), obtaining
1 + 2 + 3 + · · · + k + (k + 1) = 1
2k(k + 1) + (k + 1)
= 1
2[k(k + 1) + 2(k + 1)]
= 1
2[(k + 1)(k + 2)]
which is P(k + 1). That is, P(k + 1) is true whenever P(k) is true. By the Principle of Induction, P is true for all n.
1.25 Prove the following proposition (for n ≥0):
P(n): 1 + 2 + 22 + 23 + · · · + 2n = 2n+1 −1
P (0) is true since 1 = 21 −1. Assuming P (k) is true, we add 2k+1 to both sides of P(k), obtaining
1 + 2 + 22 + 23 + · · · + 2k + 2k+1 = 2k+1 −1 + 2k+1 = 2(2k+1) −1 = 2k+2 −1
which is P (k + 1). That is, P(k + 1) is true whenever P(k) is true. By the principle of induction, P (n) is true for all n.
Supplementary Problems
SETS AND SUBSETS
1.26 Which of the following sets are equal?
A = {x | x2 −4x + 3 = 0},
C = {x | x ∈N, x < 3},
E = {1, 2},
G = {3, 1},
B = {x | x2 −3x + 2 = 0},
D = {x | x ∈N, x is odd, x < 5},
F = {1, 2, 1},
H = {1, 1, 3}.
1.27 List the elements of the following sets if the universal set is U = {a, b, c, …, y, z}.
Furthermore, identify which of the sets, if any, are equal.
A = {x | x is a vowel},
C = {x | x precedes f in the alphabet},
B = {x | x is a letter in the word “little”},
D = {x | x is a letter in the word “title”}.
1.28 Let A = {1, 2, …, 8, 9}, B = {2, 4, 6, 8}, C = {1, 3, 5, 7, 9}, D = {3, 4, 5}, E = {3, 5}.
Which of the these sets can equal a set X under each of the following conditions?
(a) X and B are disjoint.
(c) X ⊆A but X ̸⊂C.
(b) X ⊆D but X ̸⊂B.
(d) X ⊆C but X ̸⊂A.

CHAP. 1]
SET THEORY
19
SET OPERATIONS
1.29 Consider the universal set U = {1, 2, 3, …, 8, 9} and sets A = {1, 2, 5, 6}, B = {2, 5, 7}, C = {1, 3, 5, 7, 9}. Find:
(a) A ∩B and A ∩C
(c) AC and CC
(e) A ⊕B and A ⊕C
(b) A ∪B and B ∪C
(d) A\B and A\C
(f) (A ∪C)\B and (B ⊕C)\A
1.30 Let A and B be any sets. Prove:
(a) A is the disjoint union of A\B and A ∩B.
(b) A ∪B is the disjoint union of A\B, A ∩B, and B\A.
1.31 Prove the following:
(a) A ⊆B if and only if A ∩BC = ∅
(c) A ⊆B if and only if BC ⊆AC
(b) A ⊆B if and only if AC ∪B = U
(d) A ⊆B if and only if A\B = ∅
(Compare the results with Theorem 1.4.)
1.32 Prove the Absorption Laws: (a) A ∪(A ∩B) = A;
(b) A ∩(A ∪B) = A.
1.33 The formula A\B = A∩BC deﬁnes the difference operation in terms of the operations of intersection and complement.
Find a formula that deﬁnes the union A ∪B in terms of the operations of intersection and complement.
VENN DIAGRAMS
1.34 The Venn diagram in Fig. 1-5(a) shows sets A, B, C. Shade the following sets:
(a) A\(B ∪C);
(b) AC ∩(B ∪C);
(c) AC ∩(C\B).
1.35 Use the Venn diagram in Fig. 1-5(b) to write each set as the (disjoint) union of fundamental products:
(a) A ∩(B ∪C);
(b) AC ∩(B ∪C);
(c) A ∪(B\C).
1.36 Consider the following assumptions:
S1: All dictionaries are useful.
S2: Mary owns only romance novels.
S3: No romance novel is useful.
Use a Venn diagram to determine the validity of each of the following conclusions:
(a) Romance novels are not dictionaries.
(b) Mary does not own a dictionary.
(c) All useful books are dictionaries.
ALGEBRA OF SETS AND DUALITY
1.37 Write the dual of each equation:
(a) A = (BC ∩A) ∪(A ∩B)
(b) (A ∩B) ∪(AC ∩B) ∪(A ∩BC) ∪(AC ∩BC) = U
1.38 Use the laws in Table 1-1 to prove each set identity:
(a) (A ∩B) ∪(A ∩BC) = A
(b) A ∪B = (A ∩BC) ∪(AC ∩B) ∪(A ∩B)

20
SET THEORY
[CHAP. 1
FINITE SETS AND THE COUNTING PRINCIPLE
1.39 Determine which of the following sets are ﬁnite:
(a) Lines parallel to the x axis.
(c) Integers which are multiples of 5.
(b) Letters in the English alphabet.
(d) Animals living on the earth.
1.40 Use Theorem 1.9 to prove Corollary 1.10: Suppose A, B, C are ﬁnite sets. Then A ∪B ∪C is ﬁnite and
n(A ∪B ∪C) = n(A) + n(B) + n(C) −n(A ∩B) −n(A ∩C) −n(B ∩C) + n(A ∩B ∩C)
1.41 A survey on a sample of 25 new cars being sold at a local auto dealer was conducted to see which of three popular
options, air-conditioning (A), radio (R), and power windows (W), were already installed. The survey found:
15 had air-conditioning (A),
5 had A and P,
12 had radio (R),
9 had A and R,
3 had all three options.
11 had power windows (W),
4 had R and W,
Findthenumberofcarsthathad:(a)onlyW;
(b)onlyA;
(c)onlyR;
(d)R andW butnotA;
(e)AandR butnotW;
(f) only one of the options;
(g) at least one option;
(h) none of the options.
CLASSES OF SETS
1.42 Find the power set P(A) of A = {1, 2, 3, 4, 5}.
1.43 Given A = [{a, b}, {c}, {d, e, f }].
(a) List the elements of A.
(b) Find n(A).
(c) Find the power set of A.
1.44 Suppose A is ﬁnite and n(A) = m. Prove the power set P (A) has 2m elements.
PARTITIONS
1.45 Let S = {1, 2, …, 8, 9}. Determine whether or not each of the following is a partition of S :
(a) [{1, 3, 6}, {2, 8}, {5, 7, 9}]
(c) [{2, 4, 5, 8}, {1, 9}, {3, 6, 7}]
(b) [{1, 5, 7}, {2, 4, 8, 9}, {3, 5, 6}]
(d) [{1, 2, 7}, {3, 5}, {4, 6, 8, 9}, {3, 5}]
1.46 Let S = {1, 2, 3, 4, 5, 6}. Determine whether or not each of the following is a partition of S :
(a) P1 = [{1, 2, 3}, {1, 4, 5, 6}]
(c) P3 = [{1, 3, 5}, {2, 4}, {6}]
(b) P2 = [{1, 2}, {3, 5, 6}]
(d) P4 = [{1, 3, 5}, {2, 4, 6, 7}]
1.47 Determine whether or not each of the following is a partition of the set N of positive integers:
(a) [{n | n > 5}, {n | n < 5}];
(b) [{n | n > 6}, {1, 3, 5}, {2, 4}];
(c) [{n | n2 > 11}, {n | n2 < 11}].
1.48 Let [A1, A2, …, Am] and [B1, B2, …, Bn] be partitions of a set S.
Show that the following collection of sets is also a partition (called the cross partition) of S :
P = [Ai ∩Bj|i = 1, . . . , m, j = 1, . . . , n]\∅
Observe that we deleted the empty set ∅.
1.49 Let S = {1, 2, 3, …, 8, 9}. Find the cross partition P of the following partitions of S :
P1 = [{1, 3, 5, 7, 9}, {2, 4, 6, 8}]
and
P2 = [{1, 2, 3, 4}, {5, 7}, {6, 8, 9}]

CHAP. 1]
SET THEORY
21
INDUCTION
1.50 Prove: 2 + 4 + 6 + · · · + 2n = n(n + 1)
1.51 Prove: 1 + 4 + 7 + · · · + 3n −2 = n(3n−1)
2
1.52 Prove: 12 + 22 + 32 + · · · + n2 = n(n+1)(2n+1)
6
1.53 Prove:
1
1·3 +
1
3·5 +
1
5·7 + · · · +
1
(2n−1)(2n+1) =
n
2n+1
1.54 Prove:
1
1·5 +
1
5·9 +
1
9·13 + · · · +
1
(4n−3)(4n+1) =
n
4n+1
1.55 Prove 7n −2n is divisible by 5 for all n ∈N
1.56 Prove n3 −4n + 6 is divisible by 3 for all n ∈N
1.57 Use the identity 1 + 2 + 3 + · · · + n = n(n + 1)/2 to prove that
13 + 23 + 33 + · · · + n3 = (1 + 2 + 3 + · · · + n)2
Miscellaneous Problems
1.58 Suppose N = {1, 2, 3, …} is the universal set, and
A = {n | n ≤6},
B = {n | 4 ≤n ≤9},
C = {1, 3, 5, 7, 9},
D = {2, 3, 5, 7, 8}.
Find: (a) A ⊕B;
(b) B ⊕C;
(c) A ∩(B ⊕D);
(d) (A ∩B) ⊕(A ∩D).
1.59 Prove the following properties of the symmetric difference:
(a) (A ⊕B) ⊕C = A ⊕(B ⊕C) (Associative Law).
(b) A ⊕B = B ⊕A (Commutative Law).
(c) If A ⊕B = A ⊕C, then B = C (Cancellation Law).
(d) A ∩(B ⊕C) = (A ∩B) ⊕(A ∩C) (Distributive Law).
1.60 Consider m nonempty distinct sets A1, A2, …, Am in a universal set U. Prove:
(a) There are 2m fundamental products of the m sets.
(b) Any two fundamental products are disjoint.
(c) U is the union of all the fundamental products.
Answers to Supplementary Problems
1.26 B = C = E = F, A = D = G = H.
1.27 A
=
{a, e, i, o, u},
B
=
D
=
{l, i, t, e},
C = {a, b, c, d, e}.
1.28 (a) C and E; (b) D and E; (c) A, B, and D; (d) None.
1.29 (a) A ∩B = {2, 5}, A ∩C = {1, 5};
(b) A ∪B = {1, 2, 5, 6, 7}, B ∪C = {1, 2, 3, 5, 7, 9};
(c) AC = {3, 4, 7, 8, 9}, CC = {2, 4, 6, 8};
(d) A\B = {1, 6}, A\C = {2, 6};
(e) A ⊕B = {1, 6, 7}, A ⊕C = {2, 3, 6, 7, 9};
(f) (A ∪C)\B = {1, 3, 6, 9}, (B ⊕C)\A = {3, 9}.
1.33 A ∪B = (AC ∩BC)C.
1.34 See Fig. 1-10.
1.35 (a)
(A ∩B ∩C) ∪(A ∩B ∩CC) ∪(A ∩BC ∩C)
(b)
(AC ∩B ∩CC)∪(AC ∩B ∩C)∪(AC ∩BC ∩C)
(c)
(A ∩B ∩C) ∪(A ∩B ∩CC) ∪(A ∩BC ∩C)
∪(AC ∩B ∩CC) ∪(A ∩BC ∩CC)
1.36 The three premises yield the Venn diagram in
Fig. 1-11(a). (a) and (b) are valid, but (c) is not valid.
1.37 (a) A = (BC ∪A) ∩(A ∪B)
(b) (A ∪B) ∩(AC ∪B) ∩(A ∪BC) ∩(AC ∪BC) = ∅
1.39 (a) Inﬁnite; (b) ﬁnite; (c) inﬁnite; (d) ﬁnite.

22
SET THEORY
[CHAP. 1
Fig. 1-10
Fig. 1-11
1.41 Use the data to ﬁll in the Venn diagram in Fig. 1-11(b).
Then:
(a) 5; (b) 4; (c) 2; (d) 1; (e) 6; (f) 11; (g) 23; (h) 2.
1.42 P(A) has 25 = 32 elements as follows:
[∅, {1}, {2}, {3}, {4}, {5}, {1, 2}, {1, 3}, {1, 4}, {1,
5}, {2, 3}, {2, 4}, {2, 5}, {3, 4}, {3, 5}, {4, 5}, {1, 2,
3}, {1, 2, 4}, {1, 2, 5}, {2, 3, 4}, {2, 3, 5}, {3, 4, 5},
{1, 3, 4}, {1, 3, 5}, {1, 4, 5}, {2, 4, 5}, {1, 2, 3, 4},
{1, 2, 3, 5}, {1, 2, 4, 5}, {1, 3, 4, 5}, {2, 3, 4, 5}, A]
1.43 (a) Three elements: [a, b], (c), and {d, e, f }. (b) 3.
(c) P (A) has 23 = 8 elements as follows:
P (A) = {A, [{a, b}, {c}], [{a, b}, {d, e, f }],
[{c}, {d, e, f }], [{a, b}], [{c}], [{d, e, f }], ∅}
1.44 Let X be an element in P (A). For each a ∈A, either
a ∈X or a /∈X. Since n(A) = m, there are 2m differ-
ent sets X. That is |P (A)| = 2m.
1.45 (a) No, (b) no, (c) yes, (d) yes.
1.46 (a) No, (b) no, (c) yes, (d) no.
1.47 (a) No, (b) no, (c) yes.
1.49 [{1,3}, {2,4}, {5,7}, {9}, {6,8}]
1.55 Hint: 7k+1 −2k+1 = 7k+1 −7(2k)+7(2k)−2k+1 =
7(7k −2k) + (7 −2)2k
1.58 (a) {1, 2, 3, 7, 8, 9}; (b) {1, 3, 4, 6, 8}; (c) and
(d) {2, 3, 4, 6}.

CHAPTER 2
Relations
2.1
INTRODUCTION
The reader is familiar with many relations such as “less than,” “is parallel to,” “is a subset of,” and so on.
In a certain sense, these relations consider the existence or nonexistence of a certain connection between pairs
of objects taken in a deﬁnite order. Formally, we deﬁne a relation in terms of these “ordered pairs.”
An ordered pair of elements a and b, where a is designated as the ﬁrst element and b as the second element,
is denoted by (a, b). In particular,
(a, b) = (c, d)
if and only if a = c and b = d. Thus (a, b) ̸= (b, a) unless a = b. This contrasts with sets where the order of
elements is irrelevant; for example, {3, 5} = {5, 3}.
2.2
PRODUCT SETS
Consider two arbitrary sets A and B. The set of all ordered pairs (a, b) where a ∈A and b ∈B is called
the product, or Cartesian product, of A and B. A short designation of this product is A × B, which is read
“A cross B.” By deﬁnition,
A × B = {(a, b) | a ∈A and b ∈B}
One frequently writes A2 instead of A × A.
EXAMPLE 2.1 R denotes the set of real numbers and so R2 = R×R is the set of ordered pairs of real numbers.
The reader is familiar with the geometrical representation of R2 as points in the plane as in Fig. 2-1. Here each
point P represents an ordered pair (a, b) of real numbers and vice versa; the vertical line through P meets the
x-axis at a, and the horizontal line through P meets the y-axis at b. R2 is frequently called the Cartesian plane.
EXAMPLE 2.2 Let A = {1, 2} and B = {a, b, c}. Then
A × B = {(1, a), (1, b), (1, c), (2, a), (2, b), (2, c)}
B × A = {(a, 1), (b, 1), (c, 1), (a, 2), (b, 2), (c, 2)}
Also, A × A = {(1, 1), (1, 2), (2, 1), (2, 2)}
23
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

24
RELATIONS
[CHAP. 2
Fig. 2-1
There are two things worth noting in the above examples. First of all A×B ̸= B ×A. The Cartesian product
deals with ordered pairs, so naturally the order in which the sets are considered is important. Secondly, using
n(S) for the number of elements in a set S, we have:
n(A × B) = 6 = 2(3) = n(A)n(B)
In fact, n(A × B) = n(A)n(B) for any ﬁnite sets A and B. This follows from the observation that, for an ordered
pair (a, b) in A × B, there are n(A) possibilities for a, and for each of these there are n(B) possibilities for b.
The idea of a product of sets can be extended to any ﬁnite number of sets. For any sets A1, A2, . . . , An, the
set of all ordered n-tuples (a1, a2, . . . , an) where a1 ∈A1, a2 ∈A2, . . . , an ∈An is called the product of the sets
A1, . . . , An and is denoted by
A1 × A2 × · · · × An
or
n
	
i=1
A1
Just as we write A2 instead of A × A, so we write An instead of A × A × · · · × A, where there are n factors all
equal to A. For example, R3 = R × R × R denotes the usual three-dimensional space.
2.3
RELATIONS
We begin with a deﬁnition.
Deﬁnition 2.1: Let A and B be sets. A binary relation or, simply, relation from A to B is a subset of A × B.
Suppose R is a relation from A to B. Then R is a set of ordered pairs where each ﬁrst element comes from
A and each second element comes from B. That is, for each pair a ∈A and b ∈B, exactly one of the following
is true:
(i) (a, b) ∈R; we then say “a is R-related to b”, written aRb.
(ii) (a, b) /∈R; we then say “a is not R-related to b”, written a
Rb.
If R is a relation from a set A to itself, that is, if R is a subset of A2 = A × A, then we say that R is a relation on A.
The domain of a relation R is the set of all ﬁrst elements of the ordered pairs which belong to R, and the
range is the set of second elements.
Although n-ary relations, which involve ordered n-tuples, are introduced in Section 2.10, the term relation
shall then mean binary relation unless otherwise stated or implied.

CHAP. 2]
RELATIONS
25
EXAMPLE 2.3
(a) A = (1, 2, 3) and B = {x, y, z}, and let R = {(1, y), (1, z), (3, y)}. Then R is a relation from A to B since R
is a subset of A × B. With respect to this relation,
1Ry, 1Rz, 3Ry,
but
1
Rx, 2
Rx, 2
Ry, 2
Rz, 3
Rx, 3
Rz
The domain of R is {1, 3} and the range is {y, z}.
(b) Set inclusion ⊆is a relation on any collection of sets. For, given any pair of set A and B, either A ⊆B
or A ̸⊆B.
(c) A familiar relation on the set Z of integers is “m divides n.” A common notation for this relation is to write
m|n when m divides n. Thus 6 | 30 but 7 | 25.
(d) Consider the set L of lines in the plane. Perpendicularity, written “⊥,” is a relation on L. That is, given any
pair of lines a and b, either a ⊥b or a
⊥b. Similarly, “is parallel to,” written “||,” is a relation on L since
either a ∥b or a ̸∥b.
(e) Let A be any set. An important relation on A is that of equality,
{(a, a) | a ∈A}
which is usually denoted by “=.” This relation is also called the identity or diagonal relation on A and it will
also be denoted by A or simply .
(f) Let A be any set. Then A × A and ∅are subsets of A × A and hence are relations on A called the universal
relation and empty relation, respectively.
Inverse Relation
Let R be any relation from a set A to a set B. The inverse of R, denoted by R−1, is the relation from B to A
which consists of those ordered pairs which, when reversed, belong to R; that is,
R−1 = {(b, a) | (a, b) ∈R}
For example, let A = {1, 2, 3} and B = {x, y, z}. Then the inverse of
R = {(1, y), (1, z), (3, y)}
is
R−1 = {(y, 1), (z, 1), (y, 3)}
Clearly, if R is any relation, then (R−1)−1 = R. Also, the domain and range of R−1 are equal, respectively, to
the range and domain of R. Moreover, if R is a relation on A, then R−1 is also a relation on A.
2.4
PICTORIAL REPRESENTATIVES OF RELATIONS
There are various ways of picturing relations.
Relations on R
Let S be a relation on the set R of real numbers; that is, S is a subset of R2 = R × R. Frequently, S consists
of all ordered pairs of real numbers which satisfy some given equation E(x, y) = 0 (such as x2 + y2 = 25).
Since R2 can be represented by the set of points in the plane, we can picture S by emphasizing those points
in the plane which belong to S. The pictorial representation of the relation is sometimes called the graph of the
relation. For example, the graph of the relation x2 +y2 = 25 is a circle having its center at the origin and radius 5.
See Fig. 2-2(a).

26
RELATIONS
[CHAP. 2
Fig. 2-2
Directed Graphs of Relations on Sets
There is an important way of picturing a relation R on a ﬁnite set. First we write down the elements of the
set, and then we draw an arrow from each element x to each element y whenever x is related to y. This diagram
is called the directed graph of the relation. Figure 2-2(b), for example, shows the directed graph of the following
relation R on the set A = {1, 2, 3, 4}:
R = {(1, 2), (2, 2), (2, 4), (3, 2), (3, 4), (4, 1), (4, 3)}
Observe that there is an arrow from 2 to itself, since 2 is related to 2 under R.
These directed graphs will be studied in detail as a separate subject in Chapter 8. We mention it here mainly
for completeness.
Pictures of Relations on Finite Sets
Suppose A and B are ﬁnite sets. There are two ways of picturing a relation R from A to B.
(i) Form a rectangular array (matrix) whose rows are labeled by the elements of A and whose columns are
labeled by the elements of B. Put a 1 or 0 in each position of the array according as a ∈A is or is not
related to b ∈B. This array is called the matrix of the relation.
(ii) Write down the elements of A and the elements of B in two disjoint disks, and then draw an arrow from
a ∈A to b ∈B whenever a is related to b. This picture will be called the arrow diagram of the relation.
Figure 2-3 pictures the relation R in Example 2.3(a) by the above two ways.
Fig. 2-3

CHAP. 2]
RELATIONS
27
2.5
COMPOSITION OF RELATIONS
Let A, B and C be sets, and let R be a relation from A to B and let S be a relation from B to C. That is, R is
a subset of A × B and S is a subset of B × C. Then R and S give rise to a relation from A to C denoted by R◦S
and deﬁned by:
a(R◦S)c if for some b ∈B we have aRb and bSc.
That is ,
R ◦S = {(a, c) | there exists b ∈B for which (a, b) ∈R and (b, c) ∈S}
The relation R◦S is called the composition of R and S; it is sometimes denoted simply by RS.
Suppose R is a relation on a set A, that is, R is a relation from a set A to itself. Then R◦R, the composition
of R with itself, is always deﬁned. Also, R◦R is sometimes denoted by R2. Similarly, R3 = R2◦R = R◦R◦R,
and so on. Thus Rn is deﬁned for all positive n.
Warning: Many texts denote the composition of relations R and S by S◦R rather than R◦S. This is done in order
to conform with the usual use of g◦f to denote the composition of f and g where f and g are functions. Thus the
reader may have to adjust this notation when using this text as a supplement with another text. However, when a
relation R is composed with itself, then the meaning of R◦R is unambiguous.
EXAMPLE 2.4 Let A = {1, 2, 3, 4}, B = {a, b, c, d}, C = {x, y, z} and let
R = {(1, a), (2, d), (3, a), (3, b), (3, d)}
and
S = {(b, x), (b, z), (c, y), (d, z)}
Consider the arrow diagrams of R and S as in Fig. 2-4. Observe that there is an arrow from 2 to d which is followed
by an arrow from d to z. We can view these two arrows as a “path” which “connects” the element 2 ∈A to the
element z ∈C. Thus:
2(R ◦S)z
since 2Rd and dSz
Similarly there is a path from 3 to x and a path from 3 to z. Hence
3(R◦S)x
and
3(R◦S)z
No other element of A is connected to an element of C. Accordingly,
R ◦S = {(2, z), (3, x), (3, z)}
Our ﬁrst theorem tells us that composition of relations is associative.
Theorem 2.1: Let A, B, C and D be sets. Suppose R is a relation from A to B, S is a relation from B to C, and
T is a relation from C to D. Then
(R ◦S) ◦T = R ◦(S ◦T )
We prove this theorem in Problem 2.8.
Fig. 2-4

28
RELATIONS
[CHAP. 2
Composition of Relations and Matrices
There is another way of ﬁnding R◦S. Let MR and MS denote respectively the matrix representations of the
relations R and S. Then
MR =
a
b
c
d
1
2
3
4
⎡
⎢⎢⎣
1
0
0
0
0
0
0
1
1
1
0
1
0
0
0
0
⎤
⎥⎥⎦
and
MS =
x
y
z
a
b
c
d
⎡
⎢⎢⎣
0
0
0
1
0
1
0
1
0
0
0
1
⎤
⎥⎥⎦
Multiplying MR and MS we obtain the matrix
x
y
z
M = MRMS =
1
2
3
4
⎡
⎢⎢⎣
0
0
0
0
0
1
1
0
2
0
0
0
⎤
⎥⎥⎦
The nonzero entries in this matrix tell us which elements are related by R◦S. Thus M = MRMS and MR◦S have
the same nonzero entries.
2.6
TYPES OF RELATIONS
This section discusses a number of important types of relations deﬁned on a set A.
Reﬂexive Relations
A relation R on a set A is reﬂexive if aRa for every a ∈A, that is, if (a, a) ∈R for every a ∈A. Thus R is
not reﬂexive if there exists a ∈A such that (a, a) /∈R.
EXAMPLE 2.5 Consider the following ﬁve relations on the set A = {1, 2, 3, 4}:
R1 = {(1, 1), (1, 2), (2, 3), (1, 3), (4, 4)}
R2 = {(1, 1)(1, 2), (2, 1), (2, 2), (3, 3), (4, 4)}
R3 = {(1, 3), (2, 1)}
R4 = ∅, the empty relation
R5 = A × A, the universal relation
Determine which of the relations are reﬂexive.
Since A contains the four elements 1, 2, 3, and 4, a relation R on A is reﬂexive if it contains the four pairs
(1, 1), (2, 2), (3, 3), and (4, 4). Thus only R2 and the universal relation R5 = A × A are reﬂexive. Note that
R1, R3, and R4 are not reﬂexive since, for example, (2, 2) does not belong to any of them.
EXAMPLE 2.6 Consider the following ﬁve relations:
(1) Relation ≤(less than or equal) on the set Z of integers.
(2) Set inclusion ⊆on a collection C of sets.
(3) Relation ⊥(perpendicular) on the set L of lines in the plane.
(4) Relation ∥(parallel) on the set L of lines in the plane.
(5) Relation|of divisibility on the set N of positive integers. (Recall x |y if there exists z such that xz = y.)
Determine which of the relations are reﬂexive.

CHAP. 2]
RELATIONS
29
The relation (3) is not reﬂexive since no line is perpendicular to itself. Also (4) is not reﬂexive since no line
is parallel to itself. The other relations are reﬂexive; that is, x ≤x for every x ∈Z, A ⊆A for any set A ∈C,
and n|n for every positive integer n ∈N.
Symmetric and Antisymmetric Relations
Arelation R on a set A is symmetric if whenever aRb then bRa, that is, if whenever (a, b) ∈R then (b, a) ∈R.
Thus R is not symmetric if there exists a, b ∈A such that (a, b) ∈R but (b, a) /∈R.
EXAMPLE 2.7
(a) Determine which of the relations in Example 2.5 are symmetric.
R1 is not symmetric since (1, 2) ∈R1 but (2, 1) /∈R1. R3 is not symmetric since (1, 3) ∈R3 but (3, 1) /∈R3.
The other relations are symmetric.
(b) Determine which of the relations in Example 2.6 are symmetric.
The relation ⊥is symmetric since if line a is perpendicular to line b then b is perpendicular to a. Also, ∥is
symmetric since if line a is parallel to line b then b is parallel to line a. The other relations are not symmetric.
For example:
3 ≤4 but 4 ̸≤3;
{1, 2} ⊆{1, 2, 3} but {1, 2, 3} ̸⊆{1, 2};
and
2 | 6 but 6̸ | 2.
A relation R on a set A is antisymmetric if whenever aRb and bRa then a = b, that is, if a ̸= b and aRb then b
Ra.
Thus R is not antisymmetric if there exist distinct elements a and b in A such that aRb and bRa.
EXAMPLE 2.8
(a) Determine which of the relations in Example 2.5 are antisymmetric.
R2 is not antisymmetric since (1, 2) and (2, 1) belong to R2, but 1 ̸= 2. Similarly, the universal relation R3
is not antisymmetric. All the other relations are antisymmetric.
(b) Determine which of the relations in Example 2.6 are antisymmetric.
The relation ≤is antisymmetric since whenever a ≤b and b ≤a then a = b. Set inclusion ⊆is antisymmetric
since whenever A ⊆B and B ⊆A then A = B. Also, divisibility on N is antisymmetric since whenever
m | n and n | m then m = n. (Note that divisibility on Z is not antisymmetric since 3 | −3 and −3 | 3 but
3 ̸= −3.) The relations ⊥and ∥are not antisymmetric.
Remark:The properties of being symmetric and being antisymmetric are not negatives of each other. For example,
the relation R = {(1, 3), (3, 1), (2, 3)} is neither symmetric nor antisymmetric. On the other hand, the relation
R′ = {(1, 1), (2, 2)} is both symmetric and antisymmetric.
Transitive Relations
A relation R on a set A is transitive if whenever aRb and bRc then aRc, that is, if whenever (a, b), (b, c) ∈R
then (a, c) ∈R. Thus R is not transitive if there exist a, b, c ∈R such that (a, b), (b, c) ∈R but (a, c) /∈R.

30
RELATIONS
[CHAP. 2
EXAMPLE 2.9
(a) Determine which of the relations in Example 2.5 are transitive.
The relation R3 is not transitive since (2, 1), (1, 3) ∈R3 but (2, 3) /∈R3.All the other relations are transitive.
(b) Determine which of the relations in Example 2.6 are transitive.
The relations ≤, ⊆, and | are transitive, but certainly not ⊥. Also, since no line is parallel to itself, we can
have a ∥b and b ∥a, but a ∥a. Thus ∥is not transitive. (We note that the relation “is parallel or equal to” is
a transitive relation on the set L of lines in the plane.)
The property of transitivity can also be expressed in terms of the composition of relations. For a relation R on A
we did deﬁne R2 = R◦R and, more generally, Rn = Rn−1◦R. Then we have the following result:
Theorem 2.2: A relation R is transitive if and only if, for every n ≥1, we have Rn ⊆R.
2.7
CLOSURE PROPERTIES
Consider a given set A and the collection of all relations on A. Let P be a property of such relations, such as
being symmetric or being transitive. A relation with property P will be called a P-relation. The P-closure of an
arbitrary relation R on A, written P(R), is a P-relation such that
R ⊆P(R) ⊆S
for every P-relation S containing R. We will write
reﬂexive(R),
symmetric(R),
and
transitive(R)
for the reﬂexive, symmetric, and transitive closures of R.
Generally speaking, P(R) need not exist. However, there is a general situation where P(R) will always
exist. Suppose P is a property such that there is at least one P-relation containing R and that the intersection of
any P-relations is again a P-relation. Then one can prove (Problem 2.16) that
P(R) = ∩(S | S is a P-relation and R ⊆S)
Thus one can obtain P (R) from the “top-down,” that is, as the intersection of relations. However, one usually
wants to ﬁnd P (R) from the “bottom-up,” that is, by adjoining elements to R to obtain P(R). This we do below.
Reﬂexive and Symmetric Closures
The next theorem tells us how to obtain easily the reﬂexive and symmetric closures of a relation. Here
A = {(a, a) | a ∈A} is the diagonal or equality relation on A.
Theorem 2.3: Let R be a relation on a set A. Then:
(i) R ∪A is the reﬂexive closure of R.
(ii) R ∪R−1 is the symmetric closure of R.
In other words, reﬂexive(R) is obtained by simply adding to R those elements (a, a) in the diagonal which do not
already belong to R, and symmetric(R) is obtained by adding to R all pairs (b, a) whenever (a, b) belongs to R.
EXAMPLE 2.10 ConsidertherelationR = {(1, 1), (1, 3), (2, 4), (3, 1), (3, 3), (4, 3)}onthesetA = {1, 2, 3, 4}.
Then
reﬂexive(R) = R ∪{(2, 2), (4, 4)}
and
symmetric(R) = R ∪{(4, 2), (3, 4)}

CHAP. 2]
RELATIONS
31
Transitive Closure
Let R be a relation on a set A. Recall that R2 = R◦R and Rn = Rn−1◦R. We deﬁne
R∗=
∞

i=1
Ri
The following theorem applies:
Theorem 2.4: R∗is the transitive closure of R.
Suppose A is a ﬁnite set with n elements. We show in Chapter 8 on graphs that
R∗= R ∪R2 ∪. . . ∪Rn
This gives us the following theorem:
Theorem 2.5: Let R be a relation on a set A with n elements. Then
transitive (R) = R ∪R2 ∪. . . ∪Rn
EXAMPLE 2.11 Consider the relation R = {(1, 2), (2, 3), (3, 3)} on A = {1, 2, 3}. Then:
R2 = R◦R = {(1, 3), (2, 3), (3, 3)}
and
R3 = R2◦R = {(1, 3), (2, 3), (3, 3)}
Accordingly,
transitive (R) = {(1, 2), (2, 3), (3, 3), (1, 3)}
2.8
EQUIVALENCE RELATIONS
Consider a nonempty set S. A relation R on S is an equivalence relation if R is reﬂexive, symmetric, and
transitive. That is, R is an equivalence relation on S if it has the following three properties:
(1) For every a ∈S, aRa.
(2) If aRb, then bRa.
(3) If aRb and bRc, then aRc.
The general idea behind an equivalence relation is that it is a classiﬁcation of objects which are in some way
“alike.” In fact, the relation “=” of equality on any set S is an equivalence relation; that is:
(1) a = a for every a ∈S.
(2) If a = b, then b = a.
(3) If a = b, b = c, then a = c.
Other equivalence relations follow.
EXAMPLE 2.12
(a) Let L be the set of lines and let T be the set of triangles in the Euclidean plane.
(i) The relation “is parallel to or identical to” is an equivalence relation on L.
(ii) The relations of congruence and similarity are equivalence relations on T.
(b) The relation ⊆of set inclusion is not an equivalence relation. It is reﬂexive and transitive, but it is not
symmetric since A ⊆B does not imply B ⊆A.

32
RELATIONS
[CHAP. 2
(c) Let m be a ﬁxed positive integer. Two integers a and b are said to be congruent modulo m, written
a ≡b (mod m)
if m divides a −b. For example, for the modulus m = 4, we have
11 ≡3 (mod 4)
and
22 ≡6 (mod 4)
since 4 divides 11 −3 = 8 and 4 divides 22 −6 = 16. This relation of congruence modulo m is an important
equivalence relation.
Equivalence Relations and Partitions
This subsection explores the relationship between equivalence relations and partitions on a non-empty set S.
Recall ﬁrst that a partition P of S is a collection {Ai} of nonempty subsets of S with the following two properties:
(1) Each a ∈S belongs to some Ai.
(2) If Ai ̸= Aj then Ai ∩Aj = ∅.
In other words, a partition P of S is a subdivision of S into disjoint nonempty sets. (See Section 1.7.)
Suppose R is an equivalence relation on a set S. For each a ∈S, let [a] denote the set of elements of S to
which a is related under R; that is:
[a] = {x | (a, x) ∈R }
We call [a] the equivalence class of a in S; any b ∈[a] is called a representative of the equivalence class.
The collection of all equivalence classes of elements of S under an equivalence relation R is denoted by S/R,
that is,
S/R = {[a] | a ∈S}
It is called the quotient set of S by R. The fundamental property of a quotient set is contained in the following
theorem.
Theorem 2.6: Let R be an equivalence relation on a set S. Then S/R is a partition of S. Speciﬁcally:
(i) For each a in S, we have a ∈[a].
(ii) [a] = [b] if and only if (a, b) ∈R.
(iii) If [a] ̸= [b], then [a] and [b] are disjoint.
Conversely, given a partition {Ai} of the set S, there is an equivalence relation R on S such that the sets Ai are
the equivalence classes.
This important theorem will be proved in Problem 2.17.
EXAMPLE 2.13
(a) Consider the relation R = {(1, 1), (1, 2), (2, 1), (2, 2), (3, 3)} on S = {1, 2, 3}.
One can show that R is reﬂexive, symmetric, and transitive, that is, that R is an equivalence relation. Also:
[1] = {1, 2}, [2] = {1, 2}, [3] = {3}
Observe that [1] = [2] and that S/R = {[1], [3]} is a partition of S. One can choose either {1, 3} or {2, 3} as
a set of representatives of the equivalence classes.

CHAP. 2]
RELATIONS
33
(b) Let R5 be the relation of congruence modulo 5 on the set Z of integers denoted by
x ≡y (mod 5)
This means that the difference x −y is divisible by 5. Then R5 is an equivalence relation on Z. The quotient
set Z/R5 contains the following ﬁve equivalence classes:
A0 = {. . . , −10, −5, 0, 5, 10, . . .}
A1 = {. . . , −9, −4, 1, 6, 11, . . .}
A2 = {. . . , −8, −3, 2, 7, 12, . . .}
A3 = {. . . , −7, −2, 3, 8, 13, . . .}
A4 = {. . . , −6, −1, 4, 9, 14, . . .}
Any integer x, uniquely expressed in the form x = 5q + r where 0 ≤r < 5, is a member of the equivalence
class Ar, where r is the remainder.As expected, Z is the disjoint union of equivalence classes A1, A2, A3, A4.
Usually one chooses {0, 1, 2, 3, 4} or {−2, −1, 0, 1, 2} as a set of representatives of the equivalence classes.
2.9
PARTIAL ORDERING RELATIONS
A relation R on a set S is called a partial ordering or a partial order of S if R is reﬂexive, antisymmetric, and
transitive. A set S together with a partial ordering R is called a partially ordered set or poset. Partially ordered
sets will be studied in more detail in Chapter 14, so here we simply give some examples.
EXAMPLE 2.14
(a) The relation ⊆of set inclusion is a partial ordering on any collection of sets since set inclusion has the three
desired properties. That is,
(1) A ⊆A for any set A.
(2) If A ⊆B and B ⊆A, then A = B.
(3) If A ⊆B and B ⊆C, then A ⊆C.
(b) The relation ≤on the set R of real numbers is reﬂexive, antisymmetric, and transitive. Thus ≤is a partial
ordering on R.
(c) The relation “a divides b,” written a | b, is a partial ordering on the set N of positive integers. However, “a
divides b” is not a partial ordering on the set Z of integers since a | b and b | a need not imply a = b. For
example, 3 | −3 and −3 | 3 but 3 ̸= −3.
2.10
n-ARY RELATIONS
All the relations discussed above were binary relations. By an n-ary relation, we mean a set of ordered
n-tuples. For any set S, a subset of the product set Sn is called an n-ary relation on S. In particular, a subset of
S3 is called a ternary relation on S.
EXAMPLE 2.15
(a) Let L be a line in the plane. Then “betweenness” is a ternary relation R on the points of L; that is, (a, b, c) ∈R
if b lies between a and c on L.
(b) The equation x2 + y2 + z2 = 1 determines a ternary relation T on the set R of real numbers. That is, a triple
(x, y, z) belongs to T if (x, y, z) satisﬁes the equation, which means (x, y, z) is the coordinates of a point in
R3 on the sphere S with radius 1 and center at the origin O = (0, 0, 0).

34
RELATIONS
[CHAP. 2
Solved Problems
PRODUCT SETS
2.1. Given: A = {1, 2}, B = {x, y, z}, and C = {3, 4}. Find: A × B × C.
A × B × C consists of all ordered triplets (a, b, c) where a ∈A, b ∈B, c ∈C. These elements of A × B × C can be
systematically obtained by a so-called tree diagram (Fig. 2-5). The elements of A × B × C are precisely the 12 ordered
triplets to the right of the tree diagram.
Fig. 2-5
Observe that n(A) = 2, n(B) = 3, and n(C) = 2 and, as expected,
n(A × B × C) = 12 = n(A) · n(B) · n(C)
2.2. Find x and y given (2x, x + y) = (6, 2).
Two ordered pairs are equal if and only if the corresponding components are equal. Hence we obtain the equations
2x = 6
and
x + y = 2
from which we derive the answers x = 3 and y = −1.
RELATIONS AND THEIR GRAPHS
2.3. Find the number of relations from A = {a, b, c} to B = {1, 2}.
There are 3(2) = 6 elements in A × B, and hence there are m = 26 = 64 subsets of A × B. Thus there are m = 64
relations from A to B.
2.4. Given A = {1, 2, 3, 4} and B = {x, y, z}. Let R be the following relation from A to B:
R = {(1, y), (1, z), (3, y), (4, x), (4, z)}
(a) Determine the matrix of the relation.
(b) Draw the arrow diagram of R.
(c) Find the inverse relation R−1 of R.
(d) Determine the domain and range of R.
(a) See Fig. 2-6(a) Observe that the rows of the matrix are labeled by the elements of A and the columns by the elements
of B. Also observe that the entry in the matrix corresponding to a ∈A and b ∈B is 1 if a is related to b and 0
otherwise.
(b) See Fig. 2.6(b) Observe that there is an arrow from a ∈A to b ∈B iff a is related to b, i.e., iff (a, b) ∈R.

CHAP. 2]
RELATIONS
35
Fig. 2-6
(c) Reverse the ordered pairs of R to obtain R−1:
R−1 = {(y, 1), (z, 1), (y, 3), (x, 4), (z, 4)}
Observe that by reversing the arrows in Fig. 2.6(b), we obtain the arrow diagram of R−1.
(d) The domain of R, Dom(R), consists of the ﬁrst elements of the ordered pairs of R, and the range of R, Ran(R),
consists of the second elements. Thus,
Dom(R) = {1, 3, 4}
and
Ran(R) = {x, y, z}
2.5. Let A = {1, 2, 3}, B = {a, b, c}, and C = {x, y, z}. Consider the following relations R and S from A to B
and from B to C, respectively.
R = {(1, b), (2, a), (2, c)}
and
S = {(a, y), (b, x), (c, y), (c, z)}
(a) Find the composition relation R◦S.
(b) Find the matrices MR, MS, and MR◦S of the respective relations R, S, and R◦S, and compare MR◦S to
the product MRMS.
(a) Draw the arrow diagram of the relations R and S as in Fig. 2-7(a). Observe that 1 in A is “connected” to x in C by
the path 1 →b →x; hence (1, x) belongs to R◦S. Similarly, (2, y) and (2, z) belong to R◦S.
We have
R◦S = {(1, x), (2, y), (2, z)}
Fig. 2-7

36
RELATIONS
[CHAP. 2
(b) The matrices of MR, MS, and MR◦S follow:
MR =
1
2
3
a
b
c
⎡
⎣
0
1
0
1
0
1
0
0
0
⎤
⎦
MS =
a
b
c
x
y
z
⎡
⎣
0
1
0
1
0
0
0
1
1
⎤
⎦
MR◦S =
1
2
3
x
y
z
⎡
⎣
1
0
0
0
1
1
0
0
0
⎤
⎦
Multiplying MR and MS we obtain
MRMS =
⎡
⎣
1
0
0
0
2
1
0
0
0
⎤
⎦
Observe that MR◦S and MRMS have the same zero entries.
2.6. Consider the relation R = {(1, 1), (2, 2), (2, 3), (3, 2), (4, 2), (4, 4)} on A = {1, 2, 3, 4}.
(a) Draw its directed graph. (b) Find R2 = R◦R.
(a) For each (a, b) ∈R, draw an arrow from a to b as in Fig. 2-7(b).
(b) For each pair (a, b) ∈R, ﬁnd all (b, c) ∈R. Then (a, c) ∈R2. Thus
R2 = {(1, 1), (2, 2), (2, 3), (3, 2), (3, 3), (4, 2), (4, 3), (4, 4)}
2.7. Let R and S be the following relations on A = {1, 2, 3}:
R = {(1, 1), (1, 2), (2, 3), (3, 1), (3, 3)},
S = {(1, 2), (1, 3), (2, 1), (3, 3)}
Find (a) R ∪S, R ∩S, RC;
(b) R◦S;
(c) S2 = S◦S.
(a) Treat R and S simply as sets, and take the usual intersection and union. For RC, use the fact that A × A is the
universal relation on A.
R ∩S = {(1, 2), (3, 3)}
R ∪S = {(1, 1), (1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 3)}
RC = {(1, 3), (2, 1), (2, 2), (3, 2)}
(b) For each pair (a, b) ∈R , ﬁnd all pairs (b, c) ∈S. Then (a, c) ∈R◦S. For example, (1, 1) ∈R and (1, 2),
(1, 3) ∈S; hence (1, 2) and (1, 3) belong to R◦S. Thus,
R◦S = {(1, 2), (1, 3), (1, 1), (2, 3), (3, 2), (3, 3)}
(c) Following the algorithm in (b), we get
S2 = S◦S = {(1, 1), (1, 3), (2, 2), (2, 3), (3, 3)}
2.8. Prove Theorem 2.1: Let A, B, C and D be sets. Suppose R is a relation from A to B, S is a relation from B to
C and T is a relation from C to D. Then (R◦S)◦T = R◦(S◦T ).
We need to show that each ordered pair in (R◦S)◦T belongs to R◦(S◦T ), and vice versa.
Suppose (a, d) belongs to (R◦S)◦T . Then there exists c ∈C such that (a, c) ∈R◦S and (c, d) ∈T . Since (a, c) ∈R◦S,
there exists b ∈B such that (a, b) ∈R and (b, c) ∈S. Since (b, c) ∈S and (c, d) ∈T , we have (b, d) ∈S◦T ; and
since (a, b) ∈R and (b, d) ∈S◦T , we have (a, d) ∈R ◦(S◦T ). Therefore, (R◦S)◦T ⊆R◦(S◦T ). Similarly
R◦(S◦T ) ⊆(R◦S)◦T . Both inclusion relations prove (R◦S)◦T = R◦(S◦T ).

CHAP. 2]
RELATIONS
37
TYPES OF RELATIONS AND CLOSURE PROPERTIES
2.9. Consider the following ﬁve relations on the set A = {1, 2, 3}:
R = {(1, 1), (1, 2), (1, 3), (3, 3)},
∅= empty relation
S = {(1, 1)(1, 2), (2, 1)(2, 2), (3, 3)},
A × A = universal relation
T = {(1, 1), (1, 2), (2, 2), (2, 3)}
Determine whether or not each of the above relations on A is: (a) reﬂexive; (b) symmetric; (c) transitive;
(d) antisymmetric.
(a) R is not reﬂexive since 2 ∈A but (2, 2) /∈R. T is not reﬂexive since (3, 3) /∈T and, similarly, ∅is not reﬂexive.
S and A × A are reﬂexive.
(b) R is not symmetric since (1, 2) ∈R but (2, 1) /∈R, and similarly T is not symmetric. S, ∅, and A × A are symmetric.
(c) T is not transitive since (1, 2) and (2, 3) belong to T, but (1, 3) does not belong to T. The other four relations are
transitive.
(d) S is not antisymmetric since 1 ̸= 2, and (1, 2) and (2, 1) both belong to S. Similarly, A × A is not antisymmetric.
The other three relations are antisymmetric.
2.10. Give an example of a relation R on A = {1, 2, 3} such that:
(a) R is both symmetric and antisymmetric.
(b) R is neither symmetric nor antisymmetric.
(c) R is transitive but R ∪R−1 is not transitive.
There are several such examples. One possible set of examples follows:
(a) R = {(1, 1), (2, 2)};
(b) R = {(1, 2), (2, 3)};
(c) R = {(1, 2)}.
2.11. Suppose C is a collection of relations S on a set A, and let T be the intersection of the relations S in C, that
is, T = ∩(S | S ∈C) Prove:
(a) If every S is symmetric, then T is symmetric.
(b) If every S is transitive, then T is transitive.
(a) Suppose (a, b) ∈T . Then (a, b) ∈S for every S. Since each S is symmetric, (b, a) ∈S for every S. Hence
(b, a) ∈T and T is symmetric.
(b) Suppose (a, b) and (b, c) belong to T. Then (a, b) and (b, c) belong to S for every S. Since each S is transitive, (a, c)
belongs to S for every S. Hence, (a, c) ∈T and T is transitive.
2.12. Let R be a relation on a set A, and let P be a property of relations, such as symmetry and transitivity. Then
P will be called R-closable if P satisﬁes the following two conditions:
(1) There is a P-relation S containing R.
(2) The intersection of P-relations is a P-relation.
(a) Show that symmetry and transitivity are R-closable for any relation R.
(b) Suppose P is R-closable. Then P(R), the P-closure of R, is the intersection of all P-relations S containing
R, that is,
P(R) = ∩(S | S is a P -relation and R ⊆S)
(a) The universal relation A × A is symmetric and transitive and A × A contains any relation R on A. Thus (1) is
satisﬁed. By Problem 2.11, symmetry and transitivity satisfy (2). Thus symmetry and transitivity are R-closable for
any relation R.

38
RELATIONS
[CHAP. 2
(b) Let T = ∩(S | S is a P -relation and R ⊆S). Since P is R-closable, T is nonempty by (1) and T is a P-relation
by (2). Since each relation S contains R, the intersection T contains R. Thus, T is a P-relation containing R. By
deﬁnition, P(R) is the smallest P-relation containing R; hence P(R) ⊆T . On the other hand, P(R) is one of the
sets S deﬁning T, that is, P(R) is a P-relation and if R ⊆P(R). Therefore, T ⊆P(R). Accordingly, P(R) = T .
2.13. Consider the relation R = {(a, a), (a, b), (b, c), (c, c)} on the set A = {a, b, c}. Find: (a) reﬂexive(R);
(b) symmetric(R); (c) transitive(R).
(a) The reﬂexive closure on R is obtained by adding all diagonal pairs of A × A to R which are not currently in R.
Hence,
reﬂexive(R) = R ∪{(b, b)} = {(a, a), (a, b), (b, b), (b, c), (c, c)}
(b) The symmetric closure on R is obtained by adding all the pairs in R−1 to R which are not currently in R. Hence,
symmetric(R) = R ∪{(b, a), (c, b)} = {(a, a), (a, b), (b, a), (b, c), (c, b), (c, c)}
(c) The transitive closure on R, since A has three elements, is obtained by taking the union of R with R2 = R◦R and
R3 = R◦R◦R. Note that
R2 = R◦R = {(a, a), (a, b), (a, c), (b, c), (c, c)}
R3 = R◦R◦R = {(a, a), (a, b), (a, c), (b, c), (c, c)}
Hence
transitive(R) = R ∪R2 ∪R3 = {(a, a), (a, b), (a, c), (b, c), (c, c)}
EQUIVALENCE RELATIONS AND PARTITIONS
2.14. Consider the Z of integers and an integer m > 1. We say that x is congruent to y modulo m, written
x ≡y (mod m)
if x −y is divisible by m. Show that this deﬁnes an equivalence relation on Z.
We must show that the relation is reﬂexive, symmetric, and transitive.
(i) For any x in Z we have x ≡x (mod m) because x −x = 0 is divisible by m. Hence the relation is reﬂexive.
(ii) Suppose x ≡y (mod m), so x−y is divisible by m.Then −(x−y) = y−x is also divisible by m, so y ≡x (mod m).
Thus the relation is symmetric.
(iii) Now suppose x ≡y (mod m) and y ≡z (mod m), so x −y and y −z are each divisible by m. Then the sum
(x −y) + (y −z) = x −z
is also divisible by m; hence x ≡z (mod m). Thus the relation is transitive.
Accordingly, the relation of congruence modulo m on Z is an equivalence relation.
2.15. Let A be a set of nonzero integers and let ≈be the relation on A × A deﬁned by
(a, b) ≈(c, d)
whenever
ad = bc
Prove that ≈is an equivalence relation.
We must show that ≈is reﬂexive, symmetric, and transitive.
(i) Reﬂexivity: We have (a, b) ≈(a, b) since ab = ba. Hence ≈is reﬂexive.
(ii) Symmetry: Suppose (a, b) ≈(c, d). Then ad = bc. Accordingly, cb = da and hence (c, d) = (a, b). Thus, ≈is
symmetric.
(iii) Transitivity: Suppose (a, b) ≈(c, d) and (c, d) ≈(e, f ). Then ad = bc and cf = de. Multiplying corresponding
terms of the equations gives (ad)(cf ) = (bc)(de). Canceling c ̸= 0 and d ̸= 0 from both sides of the equation
yields af = be, and hence (a, b) ≈(e, f ). Thus ≈is transitive. Accordingly, ≈is an equivalence relation.

CHAP. 2]
RELATIONS
39
2.16. Let R be the following equivalence relation on the set A = {1, 2, 3, 4, 5, 6}:
R = {(1, 1), (1, 5), (2, 2), (2, 3), (2, 6), (3, 2), (3, 3), (3, 6), (4, 4), (5, 1), (5, 5), (6, 2), (6, 3), (6, 6)}
Find the partition of A induced by R, i.e., ﬁnd the equivalence classes of R.
Those elements related to 1 are 1 and 5 hence
[1] = {1, 5}
We pick an element which does not belong to [1], say 2. Those elements related to 2 are 2, 3, and 6, hence
[2] = {2, 3, 6}
The only element which does not belong to [1] or [2] is 4. The only element related to 4 is 4. Thus
[4] = {4}
Accordingly, the following is the partition of A induced by R:
[{1, 5}, {2, 3, 6}, {4}]
2.17. Prove Theorem 2.6: Let R be an equivalence relation in a set A. Then the quotient set A/R is a partition
of A. Speciﬁcally,
(i) a ∈[a], for every a ∈A.
(ii) [a] = [b] if and only if (a, b) ∈R.
(iii) If [a] ̸= [b], then [a] and [b] are disjoint.
(a) Proof of (i): Since R is reﬂexive, (a, a) ∈R for every a ∈A and therefore a ∈[a].
(b) Proof of (ii): Suppose (a, b) ∈R. We want to show that [a] = [b]. Let x ∈[b] ; then (b, x) ∈R. But by hypothesis
(a, a) ∈R and so, by transitivity, (a, x) ∈R . Accordingly x ∈[a]. Thus [b] ⊆[a]. To prove that [a] ⊆[b] we
observe that (a, b) ∈R implies, by symmetry, that (b, a) ∈R . Then, by a similar argument, we obtain [a] ⊆[b].
Consequently, [a] = [b].
On the other hand, if [a] = [b], then, by (i), b ∈[b] = [a]; hence (a, b) ∈R.
(c) Proof of (iii): We prove the equivalent contrapositive statement:
If [a] ∩[b] ̸= ∅
then
[a] = [b]
If [a] ∩[b] ̸= ∅, then there exists an element x ∈A with x ∈[a] ∩[b]. Hence (a, x) ∈R and (b, x) ∈R. By
symmetry, (x, b) ∈R and by transitivity, (a, b) ∈R. Consequently by (ii), [a] = [b].
PARTIAL ORDERINGS
2.18. Let ℓbe any collection of sets. Is the relation of set inclusion ⊆a partial order on ℓ?
Yes, since set inclusion is reﬂexive, antisymmetric, and transitive. That is, for any sets A, B, C in ℓwe have: (i) A ⊆A;
(ii) if A ⊆B and B ⊆A, then A = B; (iii) if A ⊆B and B ⊆C, then A ⊆C.
2.19. Consider the set Z of integers. Deﬁne aRb by b = ar for some positive integer r. Show that R is a partial
order on Z, that is, show that R is: (a) reﬂexive; (b) antisymmetric; (c) transitive.
(a) R is reﬂexive since a = a1.
(b) Suppose aRb and bRa, say b = ar and a = bs. Then a = (ar)s = ars. There are three possibilities: (i) rs = 1,
(ii) a = 1, and (iii) a = −1. If rs = 1 then r = 1 and s = 1 and so a = b. If a = 1 then b = 1r = 1 = a, and,
similarly, if b = 1 then a = 1. Lastly, if a = −1 then b = −1 (since b ̸= 1) and a = b. In all three cases, a = b.
Thus R is antisymmetric.
(c) Suppose aRb and bRc say b = ar and c = bs. Then c = (ar)s = ars and, therefore, aRc. Hence R is transitive.
Accordingly, R is a partial order on Z.

40
RELATIONS
[CHAP. 2
Supplementary Problems
RELATIONS
2.20. Let S = {a, b, c}, T = {b, c, d}, and W = {a, d}. Find S × T × W.
2.21. Find x and y where:
(a) (x + 2, 4) = (5, 2x + y);
(b) (y −2, 2x + 1) = (x −1, y + 2).
2.22. Prove: (a) A × (B ∩C) = (A × B) ∩(A × C);
(b) A × (B ∪C) = (A × B) ∪(A × C).
2.23. Consider the relation R = {(1, 3), (1, 4), (3, 2), (3, 3), (3, 4)} on A = {1, 2, 3, 4}.
(a) Find the matrix MR of R.
(d) Draw the directed graph of R.
(b) Find the domain and range of R.
(e) Find the composition relation R◦R.
(c) Find R−1.
(f) Find R◦R−1 and R−1◦R.
2.24. Let A = {1, 2, 3, 4}, B = {a, b, c}, C = {x, y, z}. Consider the relations R from A to B and S from B to C as follows:
R = {(1, b), (3, a), (3, b), (4, c)}
and
S = {(a, y), (c, x), (a, z)}
(a) Draw the diagrams of R and S.
(b) Find the matrix of each relation R, S (composition) R◦S.
(c) Write R−1 and the composition R◦S as sets of ordered pairs.
2.25. Let R and S be the following relations on B = {a, b, c, d}:
R = {(a, a), (a, c), (c, b), (c, d), (d, b)}
and
S = {(b, a), (c, c), (c, d), (d, a)}
Find the following composition relations: (a) R◦S; (b) S◦R; (c) R◦R; (d) S◦S.
2.26. Let R be the relation on N deﬁned by x + 3y = 12, i.e. R = {(x, y) | x + 3y = 12}.
(a) Write R as a set of ordered pairs.
(c) Find R−1.
(b) Find the domain and range of R.
(d) Find the composition relation R◦R.
PROPERTIES OF RELATIONS
2.27. Each of the following deﬁnes a relation on the positive integers N:
(1) “x is greater than y.”
(3) x + y = 10
(2) “xy is the square of an integer.”
(4) x + 4y = 10.
Determine which of the relations are: (a) reﬂexive; (b) symmetric; (c) antisymmetric; (d) transitive.
2.28. Let R and S be relations on a set A. Assuming A has at least three elements, state whether each of the
following statements is true or false. If it is false, give a counterexample on the set A = {1, 2, 3}:
(a) If R and S are symmetric then R ∩S is symmetric.
(b) If R and S are symmetric then R ∪S is symmetric.
(c) If R and S are reﬂexive then R ∩S is reﬂexive.

CHAP. 2]
RELATIONS
41
(d) If R and S are reﬂexive then R ∪S is reﬂexive.
(e) If R and S are transitive then R ∪S is transitive.
(f) If R and S are antisymmetric then R ∪S is antisymmetric.
(g) If R is antisymmetric, then R−1 is antisymmetric.
(h) If R is reﬂexive then R ∩R−1 is not empty.
(i) If R is symmetric then R ∩R−1 is not empty.
2.29. Suppose R and S are relations on a set A, and R is antisymmetric. Prove that R ∩S is antisymmetric.
EQUIVALENCE RELATIONS
2.30. Prove that if R is an equivalence relation on a set A, than R−1 is also an equivalence relation on A.
2.31. Let S = {1, 2, 3, . . . , 18, 19}. Let R be the relation on S deﬁned by “xy is a square,” (a) Prove R is an equivalence
relation. (b) Find the equivalence class [1]. (c) List all equivalence classes with more than one element.
2.32. Let S = {1, 2, 3, . . . , 14, 15}. Let R be the equivalence relation on S deﬁned by x ≡y (mod 5), that is, x −y is
divisible by 5. Find the partition of S induced by R, i.e. the quotient set S/R.
2.33. Let S = {1, 2, 3, . . . , 9}, and let ∼be the relation on A × A deﬁned by
(a, b) ∼(c, d)
whenever
a + d = b + c.
(a) Prove that ∼is an equivalence relation.
(b) Find [(2, 5)], that is, the equivalence class of (2, 5).
Answers to Supplementary Problems
2.20. {(a, b, a), (a, b, d), (a, c, a), (a, c, d),
(a, d, a), (a, d, d), (b, b, a), (b, b, d),
(b, c, a), (b, c, d), (b, d, a), (b, d, d),
(c, b, a), (c, b, d), (c, c, a), (c, c, d),
(c, d, a), (c, d, d)}
2.21. (a) x = 3, y = −2; (b) x = 2, y = 3.
2.23.
(a) MR = [0, 0, 1, 1; 0, 0, 0, 0;
0, 1, 1, 1; 0, 0, 0, 0];
(b) Domain = {1, 3}, range = {2, 3, 4};
(c) R−1 = {(3, 1), (4, 1), (2, 3), (3, 3),
(4, 3)};
(d) See Fig. 2-8(a);
(e) R o R = {(1, 2), (1, 3), (1, 4), (3, 2),
(3, 3), (3, 4)}.
2.24. (a) See Fig. 2-8(b);
(b) R = [0, 1, 0; 0, 0, 0; 1, 1, 0; 0, 0, 1],
S = [0, 1, 1; 0, 0, 0; 1, 0, 0],
R ◦S = [0, 0, 0; 0, 0, 0; 0, 1, 1; 1, 0, 0];
(c) {(b, 1), (a, 3), (b, 3), (c, 4)}, {(3, y),
(3, z), (4, x)}.
2.25. (a) R◦S = {(a, c), (a, d), (c, a), (d, a)}
(b) S◦R = {(b, a), (b, c), (c, b), (c, d),
(d, a), (d, c)}
(c) R◦R = {(a, a), (a, b), (a, c), (a, d), (c, b)}
(d) S◦S = {(c, c), (c, a), (c, d)}
Fig. 2-8

42
RELATIONS
[CHAP. 2
2.26. (a)
{(9, 1), (6, 2), (3, 3)};
(b)
(i)
{9, 6, 3},
(ii) {1, 2, 3}, (iii) {(1, 9), (2, 6), (3, 3)}; (c) {(3, 3)}.
2.27. (a) None; (b) (2) and (3); (c) (1) and (4); (d) all
except (3).
2.28. All are true except: (e) R = {(1, 2)}, S = {(2, 3)};
(f) R = {(1, 2)}, S = {(2, 1)}.
2.31. (b) {1, 4, 9, 16}; (c) {1, 4, 9, 16}, {2, 8, 18}, {3, 12}.
2.32. [{1, 6, 11}, {2, 7, 12}, {3, 8, 133}, {4, 9, 14},
{5, 10, 15}]
2.33. (b) {(1, 4), (2, 5), (3, 6), (4, 7), (5, 8), (6, 9)}.

CHAPTER 3
Functions and
Algorithms
3.1
INTRODUCTION
One of the most important concepts in mathematics is that of a function. The terms “map,” “mapping,”
“transformation,” and many others mean the same thing; the choice of which word to use in a given situation is
usually determined by tradition and the mathematical background of the person using the term.
Related to the notion of a function is that of an algorithm. The notation for presenting an algorithm and a
discussion of its complexity is also covered in this chapter.
3.2
FUNCTIONS
Suppose that to each element of a set A we assign a unique element of a set B; the collection of such
assignments is called a function from A into B. The set A is called the domain of the function, and the set B is
called the target set or codomain.
Functions are ordinarily denoted by symbols. For example, let f denote a function from A into B. Then we
write
f: A →B
which is read: “f is a function from A into B,” or “f takes (or maps) A into B.” If a ∈A, then f (a) (read: “f of a”)
denotes the unique element of B which f assigns to a; it is called the image of a under f, or the value of f at a.
The set of all image values is called the range or image of f. The image of f : A →B is denoted by Ran(f ),
Im(f ) or f (A).
Frequently, a function can be expressed by means of a mathematical formula. For example, consider the
function which sends each real number into its square. We may describe this function by writing
f (x) = x2
or
x →x2
or
y = x2
In the ﬁrst notation, x is called a variable and the letter f denotes the function. In the second notation, the barred
arrow →is read “goes into.” In the last notation, x is called the independent variable and y is called the dependent
variable since the value of y will depend on the value of x.
Remark: Whenever a function is given by a formula in terms of a variable x, we assume, unless it is otherwise
stated, that the domain of the function is R (or the largest subset of R for which the formula has meaning) and
the codomain is R.
43
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

44
FUNCTIONS AND ALGORITHMS
[CHAP. 3
Fig. 3-1
EXAMPLE 3.1
(a) Consider the function f (x) = x3, i.e., f assigns to each real number its cube. Then the image of 2 is 8, and
so we may write f (2) = 8.
(b) Figure 3-1 deﬁnes a function f from A = {a, b, c, d} into B = {r, s, t, u} in the obvious way. Here
f (a) = s,
f (b) = u,
f (c) = r,
f (d) = s
The image of f is the set of image values, {r, s, u}. Note that t does not belong to the image of f because t is
not the image of any element under f.
(c) Let A be any set. The function from A into A which assigns to each element in A the element itself is called
the identity function on A and it is usually denoted by 1A, or simply 1. In other words, for every a ∈A,
1A(a) = a.
(d) Suppose S is a subset of A, that is, suppose S ⊆A. The inclusion map or embedding of S into A, denoted by
i: S →A is the function such that, for every x ∈S,
i(x) = x
The restriction of any function f: A →B, denoted by f |S is the function from S into B such that, for any x ∈S,
f |S(x) = f (x)
Functions as Relations
There is another point of view from which functions may be considered. First of all, every function f: A →B
gives rise to a relation from A to B called the graph of f and deﬁned by
Graph of f = {(a, b) | a ∈A, b = f (a)}
Two functions f : A →B and g: A →B are deﬁned to be equal, written f = g, if f (a) = g(a) for every
a ∈A; that is, if they have the same graph. Accordingly, we do not distinguish between a function and its graph.
Now, such a graph relation has the property that each a in A belongs to a unique ordered pair (a, b) in the relation.
On the other hand, any relation f from A to B that has this property gives rise to a function f : A →B, where
f (a) = b for each (a, b) in f. Consequently, one may equivalently deﬁne a function as follows:
Deﬁnition: A function f: A →B is a relation from A to B (i.e., a subset of A × B) such that each a ∈A belongs
to a unique ordered pair (a, b) in f.
Although we do not distinguish between a function and its graph, we will still use the terminology “graph
of f ” when referring to f as a set of ordered pairs. Moreover, since the graph of f is a relation, we can draw its
picture as was done for relations in general, and this pictorial representation is itself sometimes called the graph
of f. Also, the deﬁning condition of a function, that each a ∈A belongs to a unique pair (a, b) in f, is equivalent
to the geometrical condition of each vertical line intersecting the graph in exactly one point.

CHAP. 3]
FUNCTIONS AND ALGORITHMS
45
EXAMPLE 3.2
(a) Let f: A →B be the function deﬁned in Example 3.1 (b). Then the graph of f is as follows:
{(a, s), (b, u), (c, r), (d, s)}
(b) Consider the following three relations on the set A = {1, 2, 3}:
f = {(1, 3), (2, 3), (3, 1)},
g = {(1, 2), (3, 1)},
h = {(1, 3), (2, 1), (1, 2), (3, 1)}
f is a function from A into A since each member of A appears as the ﬁrst coordinate in exactly one ordered
pair in f; here f (1) = 3, f (2) = 3, and f (3) = 1. g is not a function from A into A since 2 ∈A is not the
ﬁrst coordinate of any pair in g and so g does not assign any image to 2. Also h is not a function from A into
A since 1 ∈A appears as the ﬁrst coordinate of two distinct ordered pairs in h, (1, 3) and (1, 2). If h is to be
a function it cannot assign both 3 and 2 to the element 1 ∈A.
(c) By a real polynomial function, we mean a function f: R →R of the form
f (x) = anxn + an−1xn−1 + · · · + a1x + a0
where the ai are real numbers. Since R is an inﬁnite set, it would be impossible to plot each point of the
graph. However, the graph of such a function can be approximated by ﬁrst plotting some of its points and then
drawing a smooth curve through these points. The points are usually obtained from a table where various
values are assigned to x and the corresponding values of f (x) are computed. Figure 3-2 illustrates this
technique using the function f (x) = x2 −2x −3.
Fig. 3-2
Composition Function
Consider functions f: A →B and g: B →C; that is, where the codomain of f is the domain of g. Then we
may deﬁne a new function from A to C, called the composition of f and g and written g◦f , as follows:
(g◦f )(a) ≡g(f (a))
That is, we ﬁnd the image of a under f and then ﬁnd the image of f (a) under g. This deﬁnition is not really
new. If we view f and g as relations, then this function is the same as the composition of f and g as relations (see
Section 2.6) except that here we use the functional notation g◦f for the composition of f and g instead of the
notation f ◦g which was used for relations.

46
FUNCTIONS AND ALGORITHMS
[CHAP. 3
Consider any function f: A →B. Then
f ◦1A = f
and
1B◦f = f
where 1A and 1B are the identity functions on A and B, respectively.
3.3
ONE-TO-ONE, ONTO, AND INVERTIBLE FUNCTIONS
A function f : A →B is said to be one-to-one (written 1-1) if different elements in the domain A have
distinct images. Another way of saying the same thing is that f is one-to-one if f (a) = f (a′) implies a = a′.
A function f: A →B is said to be an onto function if each element of B is the image of some element of A.
In other words, f: A →B is onto if the image of f is the entire codomain, i.e., if f (A) = B. In such a case we
say that f is a function from A onto B or that f maps A onto B.
A function f: A →B is invertible if its inverse relation f −1 is a function from B to A. In general, the inverse
relation f −1 may not be a function. The following theorem gives simple criteria which tells us when it is.
Theorem 3.1: A function f: A →B is invertible if and only if f is both one-to-one and onto.
If f : A →B is one-to-one and onto, then f is called a one-to-one correspondence between A and B. This
terminology comes from the fact that each element of A will then correspond to a unique element of B and vice
versa.
Some texts use the terms injective for a one-to-one function, surjective for an onto function, and bijective for
a one-to-one correspondence.
EXAMPLE 3.3 Consider the functions f1: A →B, f2: B →C, f3: C →D and f4: D →E deﬁned by the
diagram of Fig. 3-3. Now f1 is one-to-one since no element of B is the image of more than one element of A.
Similarly, f2 is one-to-one. However, neither f3 nor f4 is one-to-one since f3(r) = f3(u) and f4(v) = f4(w)
Fig. 3-3
As far as being onto is concerned, f2 and f3 are both onto functions since every element of C is the image
under f2 of some element of B and every element of D is the image under f3 of some element of C, f2(B) = C
and f3(C) = D. On the other hand, f1 is not onto since 3 ∈B is not the image under f4 of any element of A.
and f4 is not onto since x ∈E is not the image under f4 of any element of D.
Thus f1 is one-to-one but not onto, f3 is onto but not one-to-one and f4 is neither one-to-one nor onto.
However, f2 is both one-to-one and onto, i.e., is a one-to-one correspondence between A and B. Hence f2 is
invertible and f −1
2
is a function from C to B.
Geometrical Characterization of One-to-One and Onto Functions
Consider now functions of the form f : R →R. Since the graphs of such functions may be plot-
ted in the Cartesian plane R2 and since functions may be identiﬁed with their graphs, we might wonder

CHAP. 3]
FUNCTIONS AND ALGORITHMS
47
whether the concepts of being one-to-one and onto have some geometrical meaning. The answer is yes.
Speciﬁcally:
(1) f :R →R is one-to-one if each horizontal line intersects the graph of f in at most one point.
(2) f :R →R is an onto function if each horizontal line intersects the graph of f at one or more points.
Accordingly, if f is both one-to-one and onto, i.e. invertible, then each horizontal line will intersect the graph of
f at exactly one point.
EXAMPLE 3.4 Consider the following four functions from R into R:
f1(x) = x2,
f2(x) = 2x,
f3(x) = x3 −2x2 −5x + 6,
f4(x) = x3
The graphs of these functions appear in Fig. 3-4. Observe that there are horizontal lines which intersect the graph
of f1 twice and there are horizontal lines which do not intersect the graph of f1 at all; hence f1 is neither one-
to-one nor onto. Similarly, f2 is one-to-one but not onto, f3 is onto but not one-to-one and f4 is both one-to-one
and onto. The inverse of f4 is the cube root function, i.e., f −1
4
(x) =
3√x.
Fig. 3-4
Permutations
An invertible (bijective) function σ: X →X is called a permutation on X. The composition and inverses of
permutations on X and the identity function on X are also permutations on X.
Suppose X = {1, 2, . . . , n}. Then a permutation σ on X is frequently denoted by
σ =
 1
2
3
· · ·
n
j1
j2
j3
· · ·
jn

where j1 = σ(i). The set of all such permutations is denoted by Sn, and there are n! = n(n −1) · · · 3 · 2 · 1 of
them. For example,
σ =
 1
2
3
4
5
6
4
6
2
5
1
3

and
τ =
 1
2
3
4
5
6
6
4
3
1
2
5

are permutations in S6, and there are 6! = 720 of them. Sometimes, we only write the second line of the
permutation, that is, we denote the above permutations by writing σ = 462513 and τ = 643125.
3.4
MATHEMATICAL FUNCTIONS, EXPONENTIAL AND LOGARITHMIC FUNCTIONS
This section presents various mathematical functions which appear often in the analysis of algorithms, and
in computer science in general, together with their notation. We also discuss the exponential and logarithmic
functions, and their relationship.

48
FUNCTIONS AND ALGORITHMS
[CHAP. 3
Floor and Ceiling Functions
Let x be any real number. Then x lies between two integers called the ﬂoor and the ceiling of x. Speciﬁcally,
⌊x⌋, called the ﬂoor of x, denotes the greatest integer that does not exceed x.
⌈x⌉, called the ceiling of x, denotes the least integer that is not less than x.
If x is itself an integer, then ⌊x⌋= ⌈x⌉; otherwise ⌊x⌋+ 1 = ⌈x⌉. For example,
⌊3.14⌋= 3,
√
5

= 2,
⌊−8.5⌋= −9,
⌊7⌋= 7,
⌊−4⌋= −4,
⌈3.14⌉= 4,
√
5

= 3,
⌈−8.5⌉= −8,
⌈7⌉= 7,
⌈−4⌉= −4
Integer and Absolute Value Functions
Let x be any real number. The integer value of x, written INT(x), converts x into an integer by deleting
(truncating) the fractional part of the number. Thus
INT(3.14) = 3,
INT(
√
5) = 2,
INT(−8.5) = −8,
INT(7) = 7
Observe that INT(x) = ⌊x⌋or INT(x) = ⌈x⌉according to whether x is positive or negative.
The absolute value of the real number x, written ABS(x) or |x|, is deﬁned as the greater of x or −x. Hence
ABS(0) = 0, and, for x ̸= 0, ABS(x) = x or ABS(x) = −x, depending on whether x is positive or negative.
Thus
| −15| = 15,
|7| = 7,
| −3.33| = 3.33,
|4.44| = 4.44,
| −0.075| = 0.075
We note that |x| = | −x| and, for x ̸= 0, |x| is positive.
Remainder Function and Modular Arithmetic
Let k be any integer and let M be a positive integer. Then
k (mod M)
(read: k modulo M) will denote the integer remainder when k is divided by M. More exactly, k (mod M) is the
unique integer r such that
k = Mq + r
where
0 ≤r < M
When k is positive, simply divide k by M to obtain the remainder r. Thus
25 (mod 7) = 4,
25 (mod 5) = 0,
35 (mod 11) = 2,
3 (mod 8) = 3
If k is negative, divide |k| by M to obtain a remainder r′; then k (mod M) = M −r′ when r′ ̸= 0. Thus
−26 (mod 7) = 7 −5 = 2,
−371 (mod 8) = 8 −3 = 5,
−39 (mod 3) = 0
The term “mod” is also used for the mathematical congruence relation, which is denoted and deﬁned as
follows:
a ≡b (mod M)
if any only if
M divides b −a
M is called the modulus, and a ≡b (mod M) is read “a is congruent to b modulo M”. The following aspects of
the congruence relation are frequently useful:
0 ≡M (mod M)
and
a ± M ≡a (mod M)

CHAP. 3]
FUNCTIONS AND ALGORITHMS
49
Arithmetic modulo M refers to the arithmetic operations of addition, multiplication, and subtraction where
the arithmetic value is replaced by its equivalent value in the set
{0, 1, 2, . . . , M −1}
or in the set
{1, 2, 3, . . . , M}
For example, in arithmetic modulo 12, sometimes called “clock” arithmetic,
6 + 9 ≡3,
7 × 5 ≡11,
1 −5 ≡8,
2 + 10 ≡0 ≡12
(The use of 0 or M depends on the application.)
Exponential Functions
Recall the following deﬁnitions for integer exponents (where m is a positive integer):
am = a · a · · · a(m times),
a0 = 1,
a−m = 1
am
Exponents are extended to include all rational numbers by deﬁning, for any rational number m/n,
am/n =
n√
am = ( n√a)m
For example,
24 = 16, 2−4 = 1
24 = 1
16, 1252/3 = 52 = 25
In fact, exponents are extended to include all real numbers by deﬁning, for any real number x,
ax = lim
r→x ar,
where r is a rational number
Accordingly, the exponential function f (x) = ax is deﬁned for all real numbers.
Logarithmic Functions
Logarithms are related to exponents as follows. Let b be a positive number. The logarithm of any positive
number x to be the base b, written
logb x
represents the exponent to which b must be raised to obtain x. That is,
y = logb x
and
by = x
are equivalent statements. Accordingly,
log2 8 = 3
since
23 = 8;
log10 100 = 2
since
102 = 100
log2 64 = 6
since
26 = 64;
log10 0.001 = −3
since
10−3 = 0.001
Furthermore, for any base b, we have b0 = 1 and b1 = b; hence
logb 1 = 0
and
logb b = 1
The logarithm of a negative number and the logarithm of 0 are not deﬁned.
Frequently, logarithms are expressed using approximate values. For example, using tables or calculators, one
obtains
log10 300 = 2.4771
and
loge 40 = 3.6889
as approximate answers. (Here e = 2.718281....)

50
FUNCTIONS AND ALGORITHMS
[CHAP. 3
Three classes of logarithms are of special importance: logarithms to base 10, called common logarithms;
logarithms to base e, called natural logarithms; and logarithms to base 2, called binary logarithms. Some texts
write
ln x for loge x
and
lg x or log x for log2 x
The term log x, by itself, usually means log10 x; but it is also used for loge x in advanced mathematical texts and
for log2 x in computer science texts.
Frequently, we will require only the ﬂoor or the ceiling of a binary logarithm. This can be obtained by looking
at the powers of 2. For example,

log2 100

= 6
since
26 = 64
and
27 = 128

log2 1000

= 9
since
28 = 512
and
29 = 1024
and so on.
Relationship between the Exponential and Logarithmic Functions
The basic relationship between the exponential and the logarithmic functions
f (x) = bx
and
g(x) = logb x
is that they are inverses of each other; hence the graphs of these functions are related geometrically. This relation-
ship is illustrated in Fig. 3-5 where the graphs of the exponential function f (x) = 2x, the logarithmic function
g(x) = log2 x, and the linear function h(x) = x appear on the same coordinate axis. Since f (x) = 2x and
g(x) = log2 x are inverse functions, they are symmetric with respect to the linear function h(x) = x or, in other
words, the line y = x.
Fig. 3-5
Figure3-5alsoindicatesanotherimportantpropertyoftheexponentialandlogarithmicfunctions.Speciﬁcally,
for any positive c, we have
g(c) < h(c) < f (c),
that is,
g(c) < c < f (c)
In fact, as c increases in value, the vertical distances h(c) −g(c) and f (c) −g(c) increase in value. Moreover,
the logarithmic function g(x) grows very slowly compared with the linear function h(x), and the exponential
function f (x) grows very quickly compared with h(x).
3.5
SEQUENCES, INDEXED CLASSES OF SETS
Sequences and indexed classes of sets are special types of functions with their own notation. We discuss
these objects in this section. We also discuss the summation notation here.

CHAP. 3]
FUNCTIONS AND ALGORITHMS
51
Sequences
A sequence is a function from the set N = {1, 2, 3, . . .} of positive integers into a set A. The notation an is
used to denote the image of the integer n. Thus a sequence is usually denoted by
a1, a2, a3, . . .
or
{an: n ∈N}
or
simply
{an}
Sometimes the domain of a sequence is the set {0, 1, 2, . . .} of nonnegative integers rather than N. In such a ease
we say n begins with 0 rather than 1.
A ﬁnite sequence over a set A is a function from {1, 2, . . . , m} into A, and it is usually denoted by
a1, a2, . . . , am
Such a ﬁnite sequence is sometimes called a list or an m-tuple.
EXAMPLE 3.5
(a) The following are two familiar sequences:
(i) 1, 1
2, 1
3, 1
4, . . . which may be deﬁned by an = 1
n;
(ii) 1, 1
2, 1
4, 1
8, . . . which may be deﬁned by bn = 2−n
Note that the ﬁrst sequence begins with n = 1 and the second sequence begins with n = 0.
(b) The important sequence 1, −1, 1, −1, . . . may be formally deﬁned by
an = (−1)n+1
or, equivalently, by
bn = (−1)n
where the ﬁrst sequence begins with n = 1 and the second sequence begins with n = 0.
(c) Strings
Suppose a set A is ﬁnite and A is viewed as a character set or an alphabet. Then a ﬁnite sequence
over A is called a string or word, and it is usually written in the form a1a2 . . . am, that is, without parentheses.
The number m of characters in the string is called its length. One also views the set with zero characters as a
string; it is called the empty string or null string. Strings over an alphabet A and certain operations on these
strings will be discussed in detail in Chapter 13.
Summation Symbol, Sums
Here we introduce the summation symbol  (the Greek letter sigma). Consider a sequence a1, a2, a3, . . ..
Then we deﬁne the following:
n

J=1
aj = a1 + a2 + · · · + an
and
n

j=m
aj = am + am+1 + · · · + an
The letter j in the above expressions is called a dummy index or dummy variable. Other letters frequently used as
dummy variables are i, k, s, and t.
EXAMPLE 3.6
n
i=1
aibi = a1b1 + a2b2 + · · · + anbn
5
j=2
j2 = 22 + 32 + 42 + 52 = 4 + 9 + 16 + 25 = 54
n
j=1
j = 1 + 2 + · · · + n

52
FUNCTIONS AND ALGORITHMS
[CHAP. 3
The last sum appears very often. It has the value n(n + 1)/2. That is:
1 + 2 + 3 + · · · + n = n(n + 1)
2
,
for example,
1 + 2 + · · · + 50 = 50(51)
2
= 1275
Indexed Classes of Sets
Let I be any nonempty set, and let S be a collection of sets. An indexing function from I to S is a function
f: I →S. For any i ∈I, we denote the image f (i) by Ai. Thus the indexing function f is usually denoted by
{Ai| i ∈I}
or
{Ai}i∈I
or simply
{Ai}
The set I is called the indexing set, and the elements of I are called indices. If f is one-to-one and onto, we say
that S is indexed by I.
The concepts of union and intersection are deﬁned for indexed classes of sets as follows:
∪i∈IAi = {x | x ∈Ai for some i ∈I}
and
∩i∈I Ai = {x | x ∈Ai for all i ∈I}
In the case that I is a ﬁnite set, this is just the same as our previous deﬁnition of union and intersection.
If I is N, we may denote the union and intersection, respectively, as follows:
A1 ∪A2 ∪A3 ∪. . .
and
A1 ∩A2 ∩A3 ∩. . .
EXAMPLE 3.7 Let I be the set Z of integers. To each n ∈Z, we assign the following inﬁnite interval in R:
An = {x | x ≤n} = (−∞, n]
For any real number a, there exists integers n1 and n2 such that n1 < a < n2; so a ∈An2 but a /∈An1. Hence
a ∈∪nAn
but
a /∈∩nAn
Accordingly,
∪nAn = R
but
∩n An = ∅
3.6
RECURSIVELY DEFINED FUNCTIONS
A function is said to be recursively deﬁned if the function deﬁnition refers to itself. In order for the deﬁnition
not to be circular, the function deﬁnition must have the following two properties:
(1) There must be certain arguments, called base values, for which the function does not refer to itself.
(2) Each time the function does refer to itself, the argument of the function must be closer to a base value.
A recursive function with these two properties is said to be well-deﬁned.
The following examples should help clarify these ideas.
Factorial Function
The product of the positive integers from 1 to n, inclusive, is called “n factorial” and is usually denoted by n!.
That is,
n! = n(n −1)(n −2) · · · 3 · 2 · 1
It is also convenient to deﬁne 0! = 1, so that the function is deﬁned for all nonnegative integers. Thus:
0! = 1,
1! = 1,
2! = 2 · 1 = 2,
3! = 3 · 2 · 1 = 6,
4! = 4 · 3 · 2 · 1 = 24
5! = 5 · 4 · 3 · 2 · 1 = 120,
6! = 6 · 5 · 4 · 3 · 2 · 1 = 720

CHAP. 3]
FUNCTIONS AND ALGORITHMS
53
And so on. Observe that
5! = 5 · 4! = 5 · 24 = 120
and
6! = 6 · 5! = 6 · 120 = 720
This is true for every positive integer n; that is,
n! = n · (n −1)!
Accordingly, the factorial function may also be deﬁned as follows:
Deﬁnition 3.1 (Factorial Function):
(a) If n = 0, then n! = 1.
(b) If n > 0, then n! = n · (n −1)!
Observe that the above deﬁnition of n! is recursive, since it refers to itself when it uses (n −1)!. However:
(1) The value of n! is explicitly given when n = 0 (thus 0 is a base value).
(2) The value of n! for arbitrary n is deﬁned in terms of a smaller value of n which is closer to the base
value 0.
Accordingly, the deﬁnition is not circular, or, in other words, the function is well-deﬁned.
EXAMPLE 3.8 Figure 3-6 shows the nine steps to calculate 4! using the recursive deﬁnition. Speciﬁcally:
Step1.Thisdeﬁnes4!intermsof3!,sowemustpostponeevaluating4!untilweevaluate3.Thispostponement
is indicated by indenting the next step.
Step 2. Here 3! is deﬁned in terms of 2!, so we must postpone evaluating 3! until we evaluate 2!.
Step 3. This deﬁnes 2! in terms of 1!.
Step 4. This deﬁnes 1! in terms of 0!.
Step 5. This step can explicitly evaluate 0!, since 0 is the base value of the recursive deﬁnition.
Steps 6 to 9. We backtrack, using 0! to ﬁnd 1!, using 1! to ﬁnd 2!, using 2! to ﬁnd 3!, and ﬁnally using 3! to
ﬁnd 4!. This backtracking is indicated by the “reverse” indention.
Observe that we backtrack in the reverse order of the original postponed evaluations.
Fig. 3-6

54
FUNCTIONS AND ALGORITHMS
[CHAP. 3
Level Numbers
Let P be a procedure or recursive formula which is used to evaluate f (X) where f is a recursive function
and X is the input. We associate a level number with each execution of P as follows. The original execution of P
is assigned level 1; and each time P is executed because of a recursive call, its level is one more than the level
of the execution that made the recursive call. The depth of recursion in evaluating f (X) refers to the maximum
level number of P during its execution.
Consider, for example, the evaluation of 4! Example 3.8, which uses the recursive formula n! = n(n −1)!.
Step 1 belongs to level 1 since it is the ﬁrst execution of the formula. Thus:
Step 2 belongs to level 2;
Step 3 to level 3, . . . ;
Step 5 to level 5.
On the other hand, Step 6 belongs to level 4 since it is the result of a return from level 5. In other words, Step 6
and Step 4 belong to the same level of execution. Similarly,
Step 7 belongs to level 3;
Step 8 to level 2;
and Step 9 to level 1.
Accordingly, in evaluating 4!, the depth of the recursion is 5.
Fibonacci Sequence
The celebrated Fibonacci sequence (usually denoted by F0, F1, F2, . . .) is as follows:
0,
1,
1,
2,
3,
5,
8,
13,
21,
34,
55,
. . .
That is, F0 = 0 and F1 = 1 and each succeeding term is the sum of the two preceding terms. For example, the
next two terms of the sequence are
34 + 55 = 89
and
55 + 89 = 144
A formal deﬁnition of this function follows:
Deﬁnition 3.2 (Fibonacci Sequence):
(a)
If n = 0, or n = 1, then Fn = n.
(b)
If n > 1, then Fn = Fn−2 + Fn−1.
This is another example of a recursive deﬁnition, since the deﬁnition refers to itself when it uses Fn−2 and
Fn−1 However:
(1) The base values are 0 and 1.
(2) The value of Fn is deﬁned in terms of smaller values of n which are closer to the base values.
Accordingly, this function is well-deﬁned.
Ackermann Function
The Ackermann function is a function with two arguments, each of which can be assigned any nonnegative
interger, that is, 0, 1, 2, . . .. This function is deﬁned as:
Deﬁnition 3.3 (Ackermann function):
(a) If m = 0, then A(m, n) = n + 1.
(b) If m ̸= 0 but n = 0, then A(m, n) = A(m −1, 1).
(c) If m ̸= 0 and n ̸= 0, then A(m, n) = A(m −1, A(m, n −1)).
Once more, we have a recursive deﬁnition, since the deﬁnition refers to itself in parts (b) and (c). Observe
that A(m, n) is explicitly given only when m = 0. The base criteria are the pairs
(0, 0),
(0, 1),
(0, 2),
(0, 3),
. . . , (0, n),
. . .

CHAP. 3]
FUNCTIONS AND ALGORITHMS
55
Although it is not obvious from the deﬁnition, the value of any A(m, n) may eventually be expressed in terms of
the value of the function on one or more of the base pairs.
The value of A(1, 3) is calculated in Problem 3.21. Even this simple case requires 15 steps. Generally
speaking, the Ackermann function is too complex to evaluate on any but a trivial example. Its importance comes
from its use in mathematical logic. The function is stated here mainly to give another example of a classical
recursive function and to show that the recursion part of a deﬁnition may be complicated.
3.7
CARDINALITY
Two sets A and B are said to be equipotent, or to have the same number of elements or the same cardinality,
written A ≃B, if there exists a one-to-one correspondence f : A →B. A set A is ﬁnite if A is empty or if A
has the same cardinality as the set {1, 2, . . . , n} for some positive integer n. A set is inﬁnite if it is not ﬁnite.
Familiar examples of inﬁnite sets are the natural numbers N, the integers Z, the rational numbers Q, and the real
numbers R.
We now introduce the idea of “cardinal numbers”. We will consider cardinal numbers simply as symbols
assigned to sets in such a way that two sets are assigned the same symbol if and only if they have the same
cardinality. The cardinal number of a set A is commonly denoted by |A|, n(A), or card (A). We will use |A|.
The obvious symbols are used for the cardinality of ﬁnite sets. That is, 0 is assigned to the empty set ∅, and
n is assigned to the set {1, 2, . . . , n}. Thus |A| = n if and only if A has n elements. For example,
|{x, y, z}| = 3
and
|{1, 3, 5, 7, 9}| = 5
The cardinal number of the inﬁnite set N of positive integers is ℵ0 (“aleph-naught”). This symbol was
introduced by Cantor. Thus |A| = ℵ0 if and only if A has the same cardinality as N.
EXAMPLE 3.9 Let E = {2, 4, 6, . . .}, the set of even positive integers. The function f : N →E deﬁned by
f (n) = 2n is a one-to-one correspondence between the positive integers N and E. Thus E has the same cardinality
as N and so we may write
|E| = ℵ0
A set with cardinality ℵ0 is said to be denumerable or countably inﬁnite. A set which is ﬁnite or denumerable
is said to be countable. One can show that the set Q of rational numbers is countable. In fact, we have the following
theorem (proved in Problem 3.13) which we will use subsequently.
Theorem 3.2: A countable union of countable sets is countable.
That is, if A1, A2, . . . are each countable sets, then the following union is countable:
A1 ∪A2 ∪A3 ∪. . .
An important example of an inﬁnite set which is uncountable, i.e., not countable, is given by the following
theorem which is proved in Problem 3.14.
Theorem 3.3: The set I of all real numbers between 0 and 1 is uncountable.
Inequalities and Cardinal Numbers
One also wants to compare the size of two sets. This is done by means of an inequality relation which is
deﬁned for cardinal numbers as follows. For any sets A and B, we deﬁne |A| ≤|B| if there exists a function
f: A →B which is one-to-one. We also write
|A| < |B|
if
|A| ≤|B|
but
|A| ̸= |B|
For example, |N| < |I|, where I = {x: 0 ≤x ≤1}, since the function f : N →I deﬁned by f (n) = 1/n is
one-to-one, but |N| ̸= |I| by Theorem 3.3.
Cantor’s Theorem, which follows and which we prove in Problem 3.25, tells us that the cardinal numbers
are unbounded.

56
FUNCTIONS AND ALGORITHMS
[CHAP. 3
Theorem 3.4 (Cantor): For any set A, we have |A| < |Power(A)| (where Power(A) is the power set of A, i.e.,
the collection of all subsets of A).
The next theorem tells us that the inequality relation for cardinal numbers is antisymmetric.
Theorem 3.5: (Schroeder-Bernstein): Suppose A and B are sets such that
|A| ≤|B|
and
|B| ≤|A|
Then |A| = |B|.
We prove an equivalent formulation of this theorem in Problem 3.26.
3.8
ALGORITHMS AND FUNCTIONS
An algorithm M is a ﬁnite step-by-step list of well-deﬁned instructions for solving a particular problem, say,
to ﬁnd the output f (X) for a given function f with input X. (Here X may be a list or set of values.) Frequently,
there may be more than one way to obtain f (X), as illustrated by the following examples. The particular choice
of the algorithm M to obtain f (X) may depend on the “efﬁciency” or “complexity” of the algorithm; this question
of the complexity of an algorithm M is formally discussed in the next section.
EXAMPLE 3.10 (Polynomial Evaluation)
Suppose, for a given polynomial f (x) and value x = a, we want
to ﬁnd f (a), say,
f (x) = 2x3 −7x2 + 4x −15
and
a = 5
This can be done in the following two ways.
(a) (Direct Method):
Here we substitute a = 5 directly in the polynomial to obtain
f (5) = 2(125) −7(25) + 4(5) −7 = 250 −175 + 20 −15 = 80
Observe that there are 3 + 2 + 1 = 6 multiplications and 3 additions. In general, evaluating a polynomial of
degree n directly would require approximately
n + (n −1) + · · · + 1 = n(n + 1)
2
multiplications and n additions.
(b) (Horner’s Method or Synthetic Division):
Here we rewrite the polynomial by successively factoring out
x (on the right) as follows:
f (x) = (2x2 −7x + 4)x −15 = ((2x −7)x + 4)x −15
Then
f (5) = ((3)5 + 4)5 −15 = (19)5 −15 = 95 −15 = 80
For those familiar with synthetic division, the above arithmetic is equivalent to the following synthetic
division:
5
2
−
7
+
4
−
15
10
+
15
+
95
2
+
3
+
19
+
80
Observe that here there are 3 multiplications and 3 additions. In general, evaluating a polynomial of degree
n by Horner’s method would require approximately
n multiplications and n additions
Clearly Horner’s method (b) is more efﬁcient than the direct method (a).

CHAP. 3]
FUNCTIONS AND ALGORITHMS
57
EXAMPLE 3.11 (Greatest Common Divisor)
Let a and b be positive integers with, say, b < a; and suppose
we want to ﬁnd d = GCD(a, b), the greatest common divisor of a and b. This can be done in the following
two ways.
(a) (Direct Method):
Here we ﬁnd all the divisors of a, say by testing all the numbers from 2 to a/2, and all
the divisors of b. Then we pick the largest common divisor. For example, suppose a = 258 and b = 60. The
divisors of a and b follow:
a = 258;
divisors:
1,
2,
3,
6,
86,
129,
258
b = 60;
divisors:
1,
2,
3,
4,
5,
6,
10,
12,
15,
20,
30,
60
Accordingly, d = GCD(258, 60) = 6.
(b) (Euclidean Algorithm):
Here we divide a by b to obtain a remainder r1. (Note r1 < b.) Then we divide
b by the remainder r1 to obtain a second remainder r2. (Note r2 < r1.) Next we divide r1 by r2 to obtain a
third remainder r3. (Note r3 < r2.) We continue dividing rk by rk+1 to obtain a remainder rk+2. Since
a > b > r1 > r2 > r3 . . .
(∗)
eventually we obtain a remainder rm = 0. Then rm−1 = GCD (a, b). For example, suppose a = 258 and
b = 60. Then:
(1) Dividing a = 258 by b = 60 yields the remainder r1 = 18.
(2) Dividing b = 60 by r1 = 18 yields the remainder r2 = 6.
(3) Dividing r1 = 18 by r2 = 6 yields the remainder r3 = 0.
Thus r2 = 6 = GCD(258, 60).
The Euclidean algorithm is a very efﬁcient way to ﬁnd the greatest common divisor of two positive integers a
and b. The fact that the algorithm ends follows from (∗). The fact that the algorithm yields d = GCD(a, b) is not
obvious; it is discussed in Section 11.6.
3.9
COMPLEXITY OF ALGORITHMS
The analysis of algorithms is a major task in computer science. In order to compare algorithms, we must
have some criteria to measure the efﬁciency of our algorithms. This section discusses this important topic.
Suppose M is an algorithm, and suppose n is the size of the input data. The time and space used by the
algorithm are the two main measures for the efﬁciency of M. The time is measured by counting the number of
“key operations;” for example:
(a) In sorting and searching, one counts the number of comparisons.
(b) In arithmetic, one counts multiplications and neglects additions.
Key operations are so deﬁned when the time for the other operations is much less than or at most proportional
to the time for the key operations. The space is measured by counting the maximum of memory needed by the
algorithm.
The complexity of an algorithm M is the function f (n) which gives the running time and/or storage space
requirement of the algorithm in terms of the size n of the input data. Frequently, the storage space required by
an algorithm is simply a multiple of the data size. Accordingly, unless otherwise stated or implied, the term
“complexity” shall refer to the running time of the algorithm.
The complexity function f (n), which we assume gives the running time of an algorithm, usually depends
not only on the size n of the input data but also on the particular data. For example, suppose we want to search
through an English short story TEXT for the ﬁrst occurrence of a given 3-letter word W. Clearly, if W is the
3-letter word “the,” then W likely occurs near the beginning of TEXT, so f (n) will be small. On the other hand,
if W is the 3-letter word “zoo,” then W may not appear in TEXT at all, so f (n) will be large.

58
FUNCTIONS AND ALGORITHMS
[CHAP. 3
The above discussion leads us to the question of ﬁnding the complexity function f (n) for certain cases. The
two cases one usually investigates in complexity theory are as follows:
(1) Worst case: The maximum value of f (n) for any possible input.
(2) Average case: The expected value of f (n).
The analysis of the average case assumes a certain probabilistic distribution for the input data; one possible
assumption might be that the possible permutations of a data set are equally likely. The average case also uses the
following concept in probability theory. Suppose the numbers n1, n2, . . . , nk occur with respective probabilities
p1, p2, . . . , pk. Then the expectation or average value E is given by
E = n1p1 + n2p2 + · · · + nkpk
These ideas are illustrated below.
Linear Search
Suppose a linear array DATA contains n elements, and suppose a speciﬁc ITEM of information is given. We
want either to ﬁnd the location LOC of ITEM in the array DATA, or to send some message, such as LOC = 0,
to indicate that ITEM does not appear in DATA. The linear search algorithm solves this problem by comparing
ITEM, one by one, with each element in DATA. That is, we compare ITEM with DATA[1], then DATA[2], and
so on, until we ﬁnd LOC such that ITEM = DATA[LOC].
The complexity of the search algorithm is given by the number C of comparisons between ITEM and
DATA[K]. We seek C(n) for the worst case and the average case.
(1) Worst Case: Clearly the worst case occurs when ITEM is the last element in the array DATA or is not
there at all. In either situation, we have
C(n) = n
Accordingly, C(n) = n is the worst-case complexity of the linear search algorithm.
(2) AverageCase:HereweassumethatITEMdoesappearinDATA,andthatitisequallylikelytooccuratany
position in the array. Accordingly, the number of comparisons can be any of the numbers 1, 2, 3, . . . , n,
and each number occurs with probability p = 1/n. Then
C(n) = 1 · 1
n + 2 · 1
n + · · · + n · 1
n
= (1 + 2 + · · · + n) · 1
n
= n(n + 1)
2
· 1
n = n + 1
2
This agrees with our intuitive feeling that the average number of comparisons needed to ﬁnd the location
of ITEM is approximately equal to half the number of elements in the DATA list.
Remark: The complexity of the average case of an algorithm is usually much more complicated to analyze than
that of the worst case. Moreover, the probabilistic distribution that one assumes for the average case may not
actually apply to real situations. Accordingly, unless otherwise stated or implied, the complexity of an algorithm
shall mean the function which gives the running time of the worst case in terms of the input size. This is not
too strong an assumption, since the complexity of the average case for many algorithms is proportional to the
worst case.

CHAP. 3]
FUNCTIONS AND ALGORITHMS
59
Rate of Growth; Big O Notation
Suppose M is an algorithm, and suppose n is the size of the input data. Clearly the complexity f (n) of M
increases as n increases. It is usually the rate of increase of f (n) that we want to examine. This is usually done
by comparing f (n) with some standard function, such as
log n,
n,
n log n,
n2,
n3,
2n
The rates of growth for these standard functions are indicated in Fig. 3-7, which gives their approximate values
for certain values of n. Observe that the functions are listed in the order of their rates of growth: the logarithmic
function log2 n grows most slowly, the exponential function 2n grows most rapidly, and the polynomial functions
nc grow according to the exponent c.
Fig. 3-7
Rate of growth of standard functions
The way we compare our complexity function f (n) with one of the standard functions is to use the functional
“big O” notation which we formally deﬁne below.
Deﬁnition 3.4: Let f (x) and g(x) be arbitrary functions deﬁned on R or a subset of R. We say “f (x) is of order
g(x),” written
f (x) = O(g(x))
if there exists a real number k and a positive constant C such that, for all x > k, we have
|f (x)| ≤C|g(x)|
In other words, f (x) = 0(g(x)) if a constant multiple of |g(x)| exceeds |f (x)| for all x greater than some
real number k.
We also write:
f (x) = h(x) + O(g(x))
when
f (x) −h(x) = O(g(x))
(The above is called the “big O” notation since f (x) = o(g(x)) has an entirely different meaning.)
Consider now a polynomial P(x) of degree m. We show in Problem 3.24 that P(x) = O(xm).
Thus, for example,
7x2 −9x + 4 = O(x2)
and
8x3 −576x2 + 832x −248 = O(x3)
Complexity of Well-known Algorithms
Assuming f(n) and g(n) are functions deﬁned on the positive integers, then
f (n) = O(g(n))
means that f (n) is bounded by a constant multiple of g(n) for almost all n.
To indicate the convenience of this notation, we give the complexity of certain well-known searching and
sorting algorithms in computer science:
(a) Linear search: O(n)
(c) Bubble sort: O(n2)
(b) Binary search: O(log n)
(d) Merge-sort: O(n log n)

60
FUNCTIONS AND ALGORITHMS
[CHAP. 3
Solved Problems
FUNCTIONS
3.1. Let X = {1, 2, 3, 4}. Determine whether each relation on X is a function from X into X.
(a) f = {(2, 3), (1, 4), (2, 1), (3.2), (4, 4)}
(b) g = {(3, 1), (4, 2), (1, 1)}
(c) h = {(2, 1), (3, 4), (1, 4), (2, 1), (4, 4)}
Recall that a subset f of X×X is a function f: X →X if and only if each a ∈X appears as the ﬁrst coordinate
in exactly one ordered pair in f.
(a) No. Two different ordered pairs (2, 3) and (2, 1) in f have the same number 2 as their ﬁrst coordinate.
(b) No. The element 2 ∈X does not appear as the ﬁrst coordinate in any ordered pair in g.
(c) Yes. Although 2 ∈X appears as the ﬁrst coordinate in two ordered pairs in h, these two ordered pairs are equal.
3.2. Sketch the graph of:
(a) f (x) = x2 + x −6;
(b) g(x) = x3 −3x2 −x + 3.
Set up a table of values for x and then ﬁnd the corresponding values of the function. Since the functions are polynomials,
plot the points in a coordinate diagram and then draw a smooth continuous curve through the points. See Fig. 3-8.
Fig. 3-8
3.3. Let A = {a, b, c}, B = {x, y, z}, C = {r, s, t}. Let f: A →B and g: B →C be deﬁned by:
f = {(a, y)(b, x), (c, y)}
and
g = {(x, s), (y, t), (z, r)}.
Find: (a) composition function g◦f: A →C; (b) Im(f ), Im(g), Im(g◦f ).
(a) Use the deﬁnition of the composition function to compute:
(g◦f )(a) = g(f (a)) = g(y) = t
(g◦f )(b) = g(f (b)) = g(x) = s
(g◦f )(c) = g(f (c)) = g(y) = t
That is g◦f = {(a, t), (b, s), (c, t)}.
(b) Find the image points (or second coordinates):
Im(f ) = {x, y},
Im(g) = {r, s, t},
Im(g◦f ) = {s, t}

CHAP. 3]
FUNCTIONS AND ALGORITHMS
61
3.4. Let f: R →R and g: R →R be deﬁned by f (x) = 2x + 1 and g(x) = x2 −2. Find the formula for the
composition function g◦f .
Compute g◦f as follows: (g◦f )(x) = g(f (x)) = g(2x + 1) = (2x + 1)2 −2 = 4x2 + 4x −1.
Observe that the same answer can be found by writing
y = f (x) = 2x + 1
and
z = g(y) = y2 −2
and then eliminating y from both equations:
z = y2 −2 = (2x + 1)2 −2 = 4x2 + 4x −1
ONE-TO-ONE, ONTO, AND INVERTIBLE FUNCTIONS
3.5. Let the functions f: A →B, g: B →C, h: C →D be deﬁned by Fig. 3-9. Determine if each function is:
(a) onto, (b) one-to-one, (c) invertible.
Fig. 3-9
(a) The function f: A →B is not onto since 3 ∈B is not the image of any element in A.
The function g: B →C is not onto since z ∈C is not the image of any element in B.
The function h: C →D is onto since each element in D is the image of some element of C.
(b) The function f: A →B is not one-to-one since a and c have the same image 2.
The function g: B →C is one-to-one since 1, 2 and 3 have distinct images.
The function h: C →D is not one-to-one since x and z have the same image 4.
(c) No function is one-to-one and onto; hence no function is invertible.
3.6. Consider permutations σ =
 1
2
3
4
5
6
3
6
4
5
1
2

and τ =
 1
2
3
4
5
6
2
4
6
5
3
1

in S6.
Find: (a) composition τ◦σ; (b) σ −1.
(a) Note that σ sends 1 into 3 and τ sends 3 into 6. So the composition τ◦σ sends 1 into 6. I.e. (τ◦σ)(1) = 6. Moreover,
τ◦σ sends 2 into 6 into 1 that is, (τ◦σ)(2) = 1, Similarly,
(τ◦σ)(3) = 5,
(τ◦σ)(4) = 3,
(τ◦σ) = 2,
(τ◦σ)(6) = 4
Thus
τ ◦σ =
 1
2
3
4
5
6
6
1
5
3
2
4

(b) Look for 1 in the second row of σ. Note σ sends 5 into 1. Hence σ −1(1) = 5. Look for 2 in the second row of σ.
Note σ sends 6 into 2. Hence σ −1(2) = 6. Similarly, σ −1(3) = 1, σ −1(4) = 3, σ −1(5) = 4, σ −1(6) = 2. Thus
σ −1 =
 1
2
3
4
5
6
5
6
1
3
4
2


62
FUNCTIONS AND ALGORITHMS
[CHAP. 3
3.7. Consider functions f: A →B and g: B →C. Prove the following:
(a) If f and g are one-to-one, then the composition function g◦f is one-to-one.
(b) If f and g are onto functions, then g◦f is an onto function.
(a) Suppose (g◦f )(x) = (g◦f )(y); then g(f (x)) = g(f (y)). Hence f (x) = f (y) because g is one-to-one. Further-
more, x = y since f is one-to-one. Accordingly g◦f is one-to-one.
(b) Let c be any arbitrary element of C. Since g is onto, there exists a b ∈B such that g(b) = c. Since f is onto, there
exists an a ∈A such that f (a) = b. But then
(g◦f )(a) = g(f (a)) = g(b) = c
Hence each c ∈C is the image of some element a ∈A. Accordingly, g◦f is an onto function.
3.8. Let f: R →R be deﬁned by f (x) = 2x −3. Now f is one-to-one and onto; hence f has an inverse function
f −1. Find a formula for f −1.
Let y be the image of x under the function f :
y = f (x) = 2x −3
Consequently, x will be the image of y under the inverse function f −1. Solve for x in terms of y in the above equation:
x = (y + 3)/2
Then f −1(y) = (y + 3)/2. Replace y by x to obtain
f −1(x) = x + 3
2
which is the formula for f −1 using the usual independent variable x.
3.9. Prove the following generalization of DeMorgan’s law: For any class of sets {Ai} we have
(∪i Ai)c = ∩iAc
i
We have:
x ∈(∪iAi)c
iff x /∈∪iAi,
iff ∀i ∈I, x ̸∈Ai,
iff ∀i ∈I, x ∈Ac
i ,
iff x ∈∩iAc
i
Therefore, (∪iAi)c = ∩iAc
i . (Here we have used the logical notations iff for “if and only” if and ∀for “for all.”)
CARDINALITY
3.10. Find the cardinal number of each set:
(a) A = {a, b, c, . . . , y, z},
(c) C = {10, 20, 30, 40, . . .},
(b) B = {x | x ∈N, x2 = 5},
(d) D = {6, 7, 8, 9, . . .}.
(a) |A| = 26 since there are 26 letters in the English alphabet.
(b) |B| = 0 since there is no positive integer whose square is 5, that is, B is empty.
(c) |C| = ℵ0 because f: N →C, deﬁned by f (n) = 10n, is a one-to-one correspondence between N and C.
(d) |D| = ℵ0 because g: N →D, deﬁned by g(n) = n + 5 is a one-to-one correspondence between N and D.
3.11. Show that the set Z of integers has cardinality ℵ0.
The following diagram shows a one-to-one correspondence between N and Z:
N =
1
2
3
4
5
6
7
8
. . .
↓
↓
↓
↓
↓
↓
↓
↓
. . .
Z =
0
1
−1
2
−2
3
−3
4
. . .
That is, the following function f: N →Z is one-to-one and onto:
f (n) =
 n/2
if n is even
(1 −n)/2
if n is oddn/2
Accordingly, |Z| = |N| = ℵ0.

CHAP. 3]
FUNCTIONS AND ALGORITHMS
63
3.12. Let A1, A2, . . . be a countable number of ﬁnite sets. Prove that the union S = ∪iAi is countable.
Essentially, we list the elements of A1, then we list the elements of A2 which do not belong to A1, then we list
the elements of A3 which do not belong to A1 or A2, i.e., which have not already been listed, and so on. Since the Ai
are ﬁnite, we can always list the elements of each set. This process is done formally as follows.
First we deﬁne sets B1, B2, . . . where Bi contains the elements of Ai which do not belong to preceding sets, i.e.,
we deﬁne
B1 = A1
and
Bk = Ak\(A1 ∪A2 ∪· · · ∪Ak−1)
Then the Bi are disjoint and S = ∪iBi. Let bi1, bi2, . . . , bim, be the elements of Bi. Then S = {bij}. Let f: S →N
be deﬁned as follows:
f (bij) = m1 + m2 + · · · + mi−1 + j
If S is ﬁnite, then S is countable. If S is inﬁnite then f is a one-to-one correspondence between S and N. Thus S is
countable.
3.13. Prove Theorem 3.2: A countable union of countable sets is countable.
Suppose A1, A2, A3, . . . are a countable number of countable sets. In particular, suppose ai1, ai2, ai3, . . . are the
elements of Ai. Deﬁne sets B2, B3, B4, . . . as follows:
Bk = {aij | i + j = k}
For example, B6 = {a15, a24, a33, a12, a51}. Observe that each Bk is ﬁnite and
S = ∪iAi = ∪kBk
By the preceding problem ∪kBk is countable. Hence S = ∪iAi is countable and the theorem is proved.
3.14. Prove Theorem 3.3: The set I of all real numbers between 0 and 1 inclusive is uncountable.
The set I is clearly inﬁnite, since it contains 1, 1
2, 1
3, . . .. Suppose I is denumerable. Then there exists a one-to-
one correspondence f : N →I. Let f (1) = a1, f (2) = a2, . . .; that is, I = {a1, a2, a3, . . .}. We list the elements
a1, a2, . . .. in a column and express each in its decimal expansion:
a1 = 0.x11x12x13x14 . . .
a2 = 0.x21x22x23x24 . . .
a3 = 0.x31x32x33x34 . . .
a4 = 0.x41x42x43x44 . . .
.................................
where xij ∈{0, 1, 2, . . . , 9}. (For those numbers which can be expressed in two different decimal expansions, e.g.,
0.2000000 . . . = 0.1999999 . . ., we choose the expansion which ends with nines.)
Let b = 0.y1y2y3y4 . . . be the real number obtained as follows:
yi =
 1
if xii ̸= 1
2
if xii = 1
Now b ∈I. But
b ̸= a1 because y1 ̸= x11
b ̸= a2 because y2 ̸= x22
b ̸= a3 because y3 ̸= x33
....................................
Therefore b does not belong to I = {a1, a2, . . .}. This contradicts the fact that b ∈I. Hence the assumption that I is
denumerable must be false, so I is uncountable.
SPECIAL MATHEMATICAL FUNCTIONS
3.15. Find: (a) ⌊7.5⌋, ⌊−7.5⌋, ⌊−18⌋; (b) ⌈7.5⌉, ⌈−7.5⌉, ⌈−18⌉.
(a) By deﬁnition, ⌊x⌋denotes the greatest integer that does not exceed x, hence ⌊7.5⌋= 7, ⌊−7.5⌋= −8,
⌊−18⌋= −18.
(b) By deﬁnition, ⌈x⌉denotes the least integer that is not less than x, hence ⌈7.5⌉= 8, ⌈−7.5⌉= −7, ⌈−18⌉= −18.

64
FUNCTIONS AND ALGORITHMS
[CHAP. 3
3.16. Find: (a) 25 (mod7);
(b) 25 (mod5);
(c) −35 (mod 11);
(d) −3 (mod 8).
When k is positive, simply divide k by the modulus M to obtain the remainder r. Then r = k(mod M). If k is
negative, divide |k| by M to obtain the remainder r′. Then k(mod M) = M −r′ (when r′ ̸= 0). Thus:
(a) 25 (mod 7) = 4
(c) −35 (mod 11) = 11 −2 = 9
(b) 25 (mod 5) = 0
(d) −3 (mod 8) = 8 −3 = 5
3.17. Evaluate modulo M = 15: (a) 9 + 13; (b) 7 + 11; (c) 4 −9; (d) 2 −10.
Use a ± M = a(mod M):
(a) 9 + 13 = 22 = 22 −15 = 7
(c)
4 −9 = −5 = −5 + 15 = 10
(b) 7 + 11 = 18 = 18 −15 = 3
(d)
2 −10 = −8 = −8 + 15 = 7
3.18. Simplify: (a)
n!
(n −1)!; (b) (n + 2)!
n!
.
(a)
n!
(n −1)! = n(n −1)(n −2) · · · 3 · 2 · 1
(n −1)(n −2) · · · 3 · 2 · 1 = n or, simply,
n!
(n −1)! = n(n −1)!
(n −1)! = n
(b) (n + 2)!
n!
= (n + 2)(n + 1)n!
n!
= (n + 2)(n −1) = n2 + 3n + 2
3.19. Evaluate: (a) log2 8; (b) log2 64; (c) log10 100; (d) log10 0.001.
(a) log2 8 = 3 since 23 = 8
(c) log10 100 = 2 since 102 = 100
(b) log2 64 = 6 since 26 = 64
(d) log10 0.001 = −3 since 10−3 = 0.001
RECURSIVE FUNCTIONS
3.20. Let a and b be positive integers, and suppose Q is deﬁned recursively as follows:
Q(a, b) =
 0
if a < b
Q(a −b, b) + 1
if b ≤a
(a) Find: (i) Q(2, 5); (ii) Q(12, 5).
(b) What does this function Q do? Find Q(5861, 7).
(a) (i) Q(2, 5) = 0 since 2 < 5.
(ii) Q(12, 5) = Q(7, 5) + 1
= [Q(2, 5) + 1] + 1 = Q(2, 5) + 2
= 0 + 2 = 2
(b) Each time b is subtracted from a, the value of Q is increased by 1. Hence Q(a, b) ﬁnds the quotient when a is
divided by b. Thus Q(5861, 7) = 837.
3.21. Use the deﬁnition of the Ackermann function to ﬁnd A(1, 3).
Figure 3-10 shows the 15 steps that are used to evaluate A(1, 3).
The forward indention indicates that we are postponing an evaluation and are recalling the deﬁnition, and the backward
indention indicates that we are backtracking. Observe that (a) of the deﬁnition is used in Steps 5, 8, 11 and 14; (b) in
Step 4; and (c) in Steps 1, 2, and 3. In the other steps we are backtracking with substitutions.

CHAP. 3]
FUNCTIONS AND ALGORITHMS
65
Fig. 3-10
MISCELLANEOUS PROBLEMS
3.22. Find the domain D of each of the following real-valued functions of a real variable:
(a)
f (x) =
1
x−2
(c)
f (x) =
√
25 −x2
(b)
f (x) = x2 −3x −4
(d)
x2 where 0 ≤x ≤2
When a real-valued function of a real variable is given by a formula f (x), then the domain D consists of the largest
subset of R for which f (x) has meaning and is real, unless otherwise speciﬁed.
(a) f is not deﬁned for x −2 = 0, i.e., for x = 2; hence D = R\{2}.
(b) f is deﬁned for every real number; hence D = R.
(c) f is not deﬁned when 25 −x2 is negative; hence D = [−5, 5] = {x | −5 ≤x ≤5}.
(d) Here, the domain of f is explicitly given as D = {x | 0 ≤x ≤2}.
3.23. For any n ∈N, let Dn = (0, 1/n), the open interval from 0 to 1/n. Find:
(a) D3 ∪D4;
(b) D3 ∩D20;
(c) Ds ∪Dt;
(d) Ds ∩Dt.
(a) Since (0, 1/3) is a superset of (0, 1/7), D3 ∪D4 = D3.
(b) Since (0, 1/20) is a subset of (0, 1/3), D3 ∩D20 = D20.
(c) Let m = min(s, t), that is, the smaller of the two numbers s and t; then Dm is equal to Ds or Dt contains the
other as a subset. Hence Ds ∩Dt = Dm.
(d) Let M = max(s, t), that is, the larger of the two numbers s and t; then Ds ∩Dt = Dm.
3.24. Suppose P (n) = a0 + a1n + a2n2 + · · · + amn2 has degree m. Prove P(n) = O(nm).
Let b0 = |a0|, b1 = |a1|, . . . , bm = |am|. Then for n ≥1,
p(n) ≤b0 + b1n + b2n2 + · · · + bmnm =
 b0
nm +
b1
nm−1 + · · · + bm

nm
≤(b0 + b1 + · · · + bm)nm = Mnm
where M = |a0| + |a1| + · · · + |am|. Hence P(n) = O(nm).
For example, 5x3 + 3x = O(x3) and x5 −4000000x2 = O(x5).
3.25. Prove Theorem 3.4 (Cantor): |A| < | Power (A)| (where Power (A) is the power set of A).
The function g: A →Power(A) deﬁned by g(a) = {a} is clearly one-to-one; hence |A| ≤|Power (A)|.
If we show that |A| ̸= |Power (A)|, then the theorem will follow. Suppose the contrary, that is, suppose
|A| = |Power (A)| and that f: A →Power(A) is a function which is both one-to-one and onto. Let a ∈A be called
a “bad” element if a /∈f (a), and let B be the set of bad elements. In other words,
B = {x : x ∈A, x /∈f (x)}
Now B is a subset of A. Since f : A →Power(A) is onto, there exists b ∈A such that f (b) = B. Is b a “bad”
element or a “good” element? If b ∈B then, by deﬁnition of B, b /∈f (b) = B, which is impossible. Likewise, if
b /∈B then b ∈f (b) = B, which is also impossible. Thus the original assumption that |A| = |Power (A)| has led to
a contradiction. Hence the assumption is false, and so the theorem is true.

66
FUNCTIONS AND ALGORITHMS
[CHAP. 3
3.26. Prove the following equivalent formulation of the Schroeder–Bernstein Theorem 3.5:
Suppose X ⊇Y ⊇X1 and X ≃X1. Then X ≃Y.
Since X ≃X1 there exists a one-to-one correspondence (bijection) f: X →X1 Since X ⊇Y, the restriction of
f to Y, which we also denote by f, is also one-to-one. Let f (Y) = Y1. Then Y and Y1 are equipotent,
X ⊇Y ⊇X1 ⊇Y1
and f : Y →Y1 is bijective. But now Y ⊇X1 ⊇Y1 and Y ≃Y1. For similar reasons, X1 and f (X1) = X2 are
equipotent,
X ⊇Y ⊇X1 ⊇Y1 ⊇X2
and f: X1 →X2 is bijective.Accordingly, there exist equipotent sets X, X1, X2, . . . and equipotent sets Y, Y1, Y2, . . .
such that
X ⊇Y ⊇X1 ⊇Y1 ⊇X2 ⊇Y2 ⊇X3 ⊇Y3 ⊇· · ·
and f: Xk →Xk+1 and f : Yk →Yk+1 are bijective.
Let
B = X ∩Y ∩X1 ∩Y1 ∩X2 ∩Y2 ∩· · ·
Then
X = (X\Y) ∪(Y\X1) ∪(X1\Y1) ∪· · · ∪B
Y = (Y\X1) ∪(X1\Y1) ∪(Y1\X2) ∪· · · ∪B
Furthermore, X\Y, X1\Y1, X2\Y2, . . . are equipotent. In fact, the function
f :(Xk\Yk) →(Xk+1\Yk+1)
is one-to-one and onto.
Consider the function g: X →Y deﬁned by the diagram in Fig. 3-11. That is,
g(x) =
 f (x)
if x ∈Xk\Yk or x ∈X\Y
x
if x ∈Yk\Xk or x ∈B
Then g is one-to-one and onto. Therefore X ≃Y.
Fig. 3-11
Supplementary Problems
FUNCTIONS
3.27. Let W = {a, b, c, d}. Decide whether each set of ordered pairs is a function from W into W.
(a)
{(b, a),
(c, d),
(d, a),
(c, d)
(a, d)}
(c)
{(a, b),
(b, b),
(c, d),
(d, b)}
(b)
{(d, d),
(c, a),
(a, b),
(d, b)}
(d)
{(a, a),
(b, a),
(a, b),
(c, d)}
3.28. Let V = {1, 2, 3, 4}. For the following functions f: V →V and g: V →V , ﬁnd:
(a) f ◦g; (b), g◦f ; (c) f ◦f :
f = {(1, 3), (2, 1), (3, 4), (4, 3)}
and
g = {(1, 2), (2, 3), (3, 1), (4, 1)}
3.29. Find the composition function h ◦g ◦f for the functions in Fig. 3-9.

CHAP. 3]
FUNCTIONS AND ALGORITHMS
67
ONE-TO-ONE, ONTO, AND INVERTIBLE FUNCTIONS
3.30. Determine if each function is one-to-one.
(a) To each person on the earth assign the number which corresponds to his age.
(b) To each country in the world assign the latitude and longitude of its capital.
(c) To each book written by only one author assign the author.
(d) To each country in the world which has a prime minister assign its prime minister.
3.31. Let functions f, g, h from V = {1, 2, 3, 4} into V be deﬁned by: f (n) = 6 −n, g(n) = 3,
h = {(1, 2), (2, 3), (3, 4), (4, 1)}. Decide which functions are:
(a) one-to-one;
(b) onto;
(c) both;
(d) neither.
3.32. Let functions f, g, h from N into N be deﬁned by f (n) = n + 2, (b) g(n) = 2n;
h(n) = number of positive divisors of n. Decide which functions are:
(a) one-to-one;
(b) onto;
(c) both;
(d) neither;
(e) Find h′(2) = {x|h(x) = 2}.
3.33. Decide which of the following functions are: (a) one-to-one; (b) onto; (c) both; (d) neither.
(1) f: Z2 →Z where f (n, m) = n −m;
(3) h: Z × (Z\0) →Q where h(n, m) = n/m;
(2) g: Z2 →Z2 where g(n, m) = (m, n);
(4) k: Z →Z2 where k(n) = (n, n).
3.34. Let f: R →R be deﬁned by f (x) = 3x −7. Find a formula for the inverse function f −1: R →R.
3.35. Consider permutations σ =
 1
2
3
4
5
6
2
5
6
1
3
4

and τ =
 1
2
3
4
5
6
6
4
3
1
2
5

in S6.
Find: (a) τ◦σ;
(b) σ◦τ;
(c) σ 2;
(d) σ −1;
(e) τ−1
PROPERTIES OF FUNCTIONS
3.36. Prove: Suppose f: A →B and g: B →A satisfy g◦f = 1A. Then f is one-to-one and g is onto.
3.37. Prove Theorem 3.1: A function f: A →B is invertible if and only if f is both one-to-one and onto.
3.38. Prove: Suppose f: A →B is invertible with inverse function f −1:B →A. Then f −1◦f = 1A and f ◦f −1 = 1B.
3.39. Suppose f: A →B is one-to-one and g : A →B is onto. Let x be a subset of A.
(a) Show f 1x, the restriction of f to x, is one-to-one.
(b) Show g1x, need not be onto.
3.40. For each n ∈N, consider the open interval An = (0, 1/n) = {x | 0 < x < 1/n}. Find:
(a) A2 ∪A8;
(c) ∪(Ai | i ∈J);
(e) ∪(Ai | i ∈K);
(b) A3 ∩A7;
(d) ∩(Ai | i ∈J);
(f) ∩(Ai | i ∈K).
where J is a ﬁnite subset of N and K is an inﬁnite subset of N.
3.41. For each n ∈N, let Dn = {n, 2n, 3n, . . .} = {multiples of n}.
(a) Find: (i) D2 ∩D7; (ii) D6 ∩D8; (iii) D3 ∩D12; (iv) D3 ∪D12.
(b) Prove that ∩(Di|i ∈K) = Ø where K is an inﬁnite subset of N.
3.42. Consider an indexed class of sets {Ai | i ∈I}, a set B and an index i0 in I.
Prove: (a) B ∩(∪i Ai) = ∪i(B ∩Ai); (b) ∩(Ai | i ∈I) ⊆Ai0 ⊆∪(Ai | i ∈I).

68
FUNCTIONS AND ALGORITHMS
[CHAP. 3
CARDINAL NUMBERS
3.43. Find the cardinal number of each set: (a) {x | x is a letter in “BASEBALL”};
(b) Power set of A = {a, b, c, d, e}; (c) {x | x2 = 9, 2x = 8}.
3.44. Find the cardinal number of:
(a) all functions from A = {a, b, c, d} into B = {1, 2, 3, 4, 5};
(b) all functions from P into Q where |P| = r and |Q| = s;
(c) all relations on A = {a, b, c, d};
(d) all relations on P where |P| = r.
3.45. Prove:
(a) Every inﬁnite set A contains a denumerable subset D.
(b) Each subset of a denumerable set is ﬁnite or denumerable.
(c) If A and B are denumerable, then A × B is denumerable.
(e) The set Q of rational numbers is denumerable.
3.46. Prove: (a) |A × B| = |B × A|; (b) If A ⊆B then |A| ≤|B|; (c) If |A| = |B| then P (A)| = |P(B)|.
SPECIAL FUNCTIONS
3.47. Find: (a)⌊13.2⌋, ⌊−0.17⌋, ⌊34⌋; (b)⌈13.2⌉, ⌈−0.17⌉, ⌈34⌉.
3.48. Find:
(a) 29 (mod 6);
(c) 5 (mod 12);
(e) −555 (mod 11).
(b) 200 (mod 20);
(d) −347 (mod 6);
3.49. Find: (a) 3! + 4!; (b) 3!(3! + 2!); (c) 6!/5!; (d) 30!/28!.
3.50. Evaluate: (a) log2 16; (b) log3 27; (c) log10 0.01.
MISCELLANEOUS PROBLEMS
3.51. Let n be an integer. Find L(25) and describe what the function L does where L is deﬁned by:
L(n) =

0
if n = 1
L (⌊n/2⌋) + 1
if n > 1
3.52. Let a and b be integers. Find Q(2, 7), Q(5, 3), and Q(15, 2), where Q(a, b) is deﬁned by:
Q(a, b) =
 5
if a < b
Q(a −b, b + 2) + a
if a ≥b
3.53. Prove: The set P of all polynomials p(x) = a0+a1x+· · ·+am
x with integral coefﬁcients (that is, where a0, a1, . . . , am
are integers) is denumerable.
Answers to Supplementary Problems
3.27. (a) Yes; (b) No; (c) Yes; (d) No.
3.28. (a) {(1, 1), (2, 4), (3, 3), (4, 3)};
(b) {(1, 1), (2, 2), (3, 1), (4, 1)};
(c) {(1, 4), (2, 3), (3, 3), (4, 4)}.
3.29. {(a, 4), (b, 6), (c, 4)}
3.30. (a) No, (b) yes, (c) no, (d) yes.
3.31. (a) f, h; (b) f, h; (c) f, h; (d) g.
3.32. (a) f, g; (b) h; (c) none; (d) none; (e) {all prime
numbers}.
3.33. (a) g, k; (b) f, g, h; (c) g; (d) none.

CHAP. 3]
FUNCTIONS AND ALGORITHMS
69
3.34. f −1(x) = (x + 7)/3
3.35. (a) 425631; (b) 416253; (c) 534261; (d) 415623;
(e) 453261.
3.40. (a) A2; (b) A7; (c) Ar where r is the smallest inte-
ger in J; (d) As where s is the largest integer in J;
(e) Ar where r is the smallest integer in K; (f) Ø.
3.41. (i) D14; (ii) D24; (iii) D12 (iv) D3.
3.43. (a) 5; (b) 25 = 32; (c) 0.
3.44. (a) 54 = 625; (b) sr; (c) 216 = 65 536; (d) 2.
3.47. (a) 13, −1, 34; (b) 14, 0, 34.
3.48. (a) 5; (b) 0; (c) 2; (d) 6 −5 = 1; (e) 11 −5 = 6.
3.49. (a) 30; (b) 48; (c) 6; (d) 870.
3.50. (a) 4; (b) 3; (c) −2.
3.51. L(25) = 4. Each time n is divided by 2, the value of L
is increased by 1. Hence L is the greatest integer such
that 2L < N. Thus L(n) = ⌊log2 n⌋.
3.52. Q(2, 7) = 5, Q(5, 3) = 10, Q(15, 2) = 42.
3.53. Hint: Let Pk denote the set of polynomials p(x) such
that m ≤k and each |ai| ≤k. Pk is ﬁnite and
P = ∪kPk.

CHAPTER 4
Logic and
Propositional Calculus
4.1
INTRODUCTION
Many algorithms and proofs use logical expressions such as:
“IF p THEN q”
or
“If p1 AND p2, THEN q1 OR q2”
Therefore it is necessary to know the cases in which these expressions are TRUE or FALSE, that is, to know the
“truth value” of such expressions. We discuss these issues in this chapter.
We also investigate the truth value of quantiﬁed statements, which are statements which use the logical
quantiﬁers “for every” and “there exist.”
4.2
PROPOSITIONS AND COMPOUND STATEMENTS
A proposition (or statement) is a declarative statement which is true or false, but not both. Consider, for
example, the following six sentences:
(i) Ice ﬂoats in water.
(iii) 2 + 2 = 4
(v) Where are you going?
(ii) China is in Europe.
(iv) 2 + 2 = 5
(vi) Do your homework.
The ﬁrst four are propositions, the last two are not. Also, (i) and (iii) are true, but (ii) and (iv) are false.
Compound Propositions
Many propositions are composite, that is, composed of subpropositions and various connectives discussed
subsequently. Such composite propositions are called compound propositions.Aproposition is said to be primitive
if it cannot be broken down into simpler propositions, that is, if it is not composite.
For example, the above propositions (i) through (iv) are primitive propositions. On the other hand, the
following two propositions are composite:
“Roses are red and violets are blue.” and “John is smart or he studies every night.”
70
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

CHAP. 4]
LOGIC AND PROPOSITIONAL CALCULUS
71
The fundamental property of a compound proposition is that its truth value is completely determined by the
truth values of its subpropositions together with the way in which they are connected to form the compound
propositions. The next section studies some of these connectives.
4.3
BASIC LOGICAL OPERATIONS
This section discusses the three basic logical operations of conjunction, disjunction, and negation which
correspond, respectively, to the English words “and,” “or,” and “not.”
Conjunction, p ∧q
Any two propositions can be combined by the word “and” to form a compound proposition called the
conjunction of the original propositions. Symbolically,
p ∧q
read “p and q,” denotes the conjunction of p and q. Since p ∧q is a proposition it has a truth value, and this truth
value depends only on the truth values of p and q. Speciﬁcally:
Deﬁnition 4.1: If p and q are true, then p ∧q is true; otherwise p ∧q is false.
The truth value of p ∧q may be deﬁned equivalently by the table in Fig. 4-1(a). Here, the ﬁrst line is a short
way of saying that if p is true and q is true, then p ∧q is true. The second line says that if p is true and q is false,
then p ∧q is false. And so on. Observe that there are four lines corresponding to the four possible combinations
of T and F for the two subpropositions p and q. Note that p ∧q is true only when both p and q are true.
Fig. 4-1
EXAMPLE 4.1 Consider the following four statements:
(i) Ice ﬂoats in water and 2 + 2 = 4.
(iii) China is in Europe and 2 + 2 = 4.
(ii) Ice ﬂoats in water and 2 + 2 = 5.
(iv) China is in Europe and 2 + 2 = 5.
Only the ﬁrst statement is true. Each of the others is false since at least one of its substatements is false.
Disjunction, p ∨q
Anytwopropositionscanbecombinedbytheword“or”toformacompoundpropositioncalledthedisjunction
of the original propositions. Symbolically,
p ∨q
read “p or q,” denotes the disjunction of p and q. The truth value of p ∨q depends only on the truth values of p
and q as follows.

72
LOGIC AND PROPOSITIONAL CALCULUS
[CHAP. 4
Deﬁnition 4.2: If p and q are false, then p ∨q is false; otherwise p ∨q is true.
The truth value of p ∨q may be deﬁned equivalently by the table in Fig. 4-1(b). Observe that p ∨q is false
only in the fourth case when both p and q are false.
EXAMPLE 4.2 Consider the following four statements:
(i) Ice ﬂoats in water or 2 + 2 = 4.
(iii) China is in Europe or 2 + 2 = 4.
(ii) Ice ﬂoats in water or 2 + 2 = 5.
(iv) China is in Europe or 2 + 2 = 5.
Only the last statement (iv) is false. Each of the others is true since at least one of its sub-statements is true.
Remark: The English word “or” is commonly used in two distinct ways. Sometimes it is used in the sense of
“p or q or both,” i.e., at least one of the two alternatives occurs, as above, and sometimes it is used in the sense
of “p or q but not both,” i.e., exactly one of the two alternatives occurs. For example, the sentence “He will go to
Harvard or to Yale” uses “or” in the latter sense, called the exclusive disjunction. Unless otherwise stated, “or”
shall be used in the former sense. This discussion points out the precision we gain from our symbolic language:
p ∨q is deﬁned by its truth table and always means “p and/or q.”
Negation, ¬p
Given any proposition p, another proposition, called the negation of p, can be formed by writing “It is not
true that . . .” or “It is false that . . .” before p or, if possible, by inserting in p the word “not.” Symbolically, the
negation of p, read “not p,” is denoted by
¬p
The truth value of ¬p depends on the truth value of p as follows:
Deﬁnition 4.3: If p is true, then ¬p is false; and if p is false, then ¬p is true.
The truth value of ¬p may be deﬁned equivalently by the table in Fig. 4-1(c). Thus the truth value of the
negation of p is always the opposite of the truth value of p.
EXAMPLE 4.3 Consider the following six statements:
(a1) Ice ﬂoats in water.
(a2) It is false that ice ﬂoats in water.
(a3) Ice does not ﬂoat in water.
(b1) 2 + 2 = 5
(b2) It is false that 2 + 2 = 5.
(b3) 2 + 2 ̸= 5
Then (a2) and (a3) are each the negation of (a1); and (b2) and (b3) are each the negation of (b1). Since (a1)
is true, (a2) and (a3) are false; and since (b1) is false, (b2) and (b3) are true.
Remark: The logical notation for the connectives “and,” “or,” and “not” is not completely standardized. For
example, some texts use:
p & q, p · q or pq
for
p ∧q
p + q
for
p ∨q
p′, ¯p or ∼p
for
¬p
4.4
PROPOSITIONS AND TRUTH TABLES
Let P (p, q, . . .) denote an expression constructed from logical variables p, q, . . ., which take on the value
TRUE (T) or FALSE (F), and the logical connectives ∧, ∨, and ¬ (and others discussed subsequently). Such an
expression P (p, q, . . .) will be called a proposition.

CHAP. 4]
LOGIC AND PROPOSITIONAL CALCULUS
73
The main property of a proposition P(p, q, . . .) is that its truth value depends exclusively upon the truth
values of its variables, that is, the truth value of a proposition is known once the truth value of each of its variables
is known. A simple concise way to show this relationship is through a truth table. We describe a way to obtain
such a truth table below.
Consider, for example, the proposition ¬(p ∧¬q). Figure 4-2(a) indicates how the truth table of ¬(p ∧¬q)
is constructed. Observe that the ﬁrst columns of the table are for the variables p, q, . . . and that there are enough
rows in the table, to allow for all possible combinations of T and F for these variables. (For 2 variables, as above,
4 rows are necessary; for 3 variables, 8 rows are necessary; and, in general, for n variables, 2n rows are required.)
There is then a column for each “elementary” stage of the construction of the proposition, the truth value at each
step being determined from the previous stages by the deﬁnitions of the connectives ∧, ∨, ¬. Finally we obtain
the truth value of the proposition, which appears in the last column.
The actual truth table of the proposition ¬(p∧¬q) is shown in Fig. 4-2(b). It consists precisely of the columns
in Fig. 4-2(a) which appear under the variables and under the proposition; the other columns were merely used
in the construction of the truth table.
Fig. 4-2
Remark: In order to avoid an excessive number of parentheses, we sometimes adopt an order of precedence for
the logical connectives. Speciﬁcally,
¬ has precedence over ∧which has precedence over ∨
For example, ¬p ∧q means (¬p) ∧q and not ¬(p ∧q).
Alternate Method for Constructing a Truth Table
Another way to construct the truth table for ¬(p ∧¬q) follows:
(a) First we construct the truth table shown in Fig. 4-3. That is, ﬁrst we list all the variables and the com-
binations of their truth values. Also there is a ﬁnal row labeled “step.” Next the proposition is written
on the top row to the right of its variables with sufﬁcient space so there is a column under each variable
and under each logical operation in the proposition. Lastly (Step 1), the truth values of the variables are
entered in the table under the variables in the proposition.
(b) Now additional truth values are entered into the truth table column by column under each logical operation
as shown in Fig. 4-4. We also indicate the step in which each column of truth values is entered in the table.
The truth table of the proposition then consists of the original columns under the variables and the last step,
that is, the last column is entered into the table.
Fig. 4-3

74
LOGIC AND PROPOSITIONAL CALCULUS
[CHAP. 4
Fig. 4-4
4.5
TAUTOLOGIES AND CONTRADICTIONS
Some propositions P(p, q, . . .) contain only T in the last column of their truth tables or, in other words, they
are true for any truth values of their variables. Such propositions are called tautologies.Analogously, a proposition
P (p, q, . . .) is called a contradiction if it contains only F in the last column of its truth table or, in other words,
if it is false for any truth values of its variables. For example, the proposition “p or not p,” that is, p ∨¬p, is a
tautology, and the proposition “p and not p,” that is, p ∧¬p, is a contradiction. This is veriﬁed by looking at their
truth tables in Fig. 4-5. (The truth tables have only two rows since each proposition has only the one variable p.)
Fig. 4-5
Note that the negation of a tautology is a contradiction since it is always false, and the negation of a
contradiction is a tautology since it is always true.
Now let P (p, q, . . .) be a tautology, and let P1(p, q, . . .), P2(p, q, . . .), . . . be any propositions. Since
P (p, q, . . .) does not depend upon the particular truth values of its variables p, q, . . ., we can substitute P1 for
p, P2 for q, . . . in the tautology P(p, q, . . .) and still have a tautology. In other words:
Theorem 4.1 (Principle of Substitution): If P(p, q, . . .) is a tautology, then P(P1, P2, . . .) is a tautology for
any propositions P1, P2, . . ..
4.6
LOGICAL EQUIVALENCE
Two propositions P(p, q, . . .) and Q(p, q, . . .) are said to be logically equivalent, or simply equivalent or
equal, denoted by
P(p, q, . . .) ≡Q(p, q, . . .)
if they have identical truth tables. Consider, for example, the truth tables of ¬(p ∧q) and ¬p ∨¬q appearing in
Fig. 4-6. Observe that both truth tables are the same, that is, both propositions are false in the ﬁrst case and true
in the other three cases. Accordingly, we can write
¬(p ∧q) ≡¬p ∨¬q
In other words, the propositions are logically equivalent.
Remark: Let p be “Roses are red” and q be “Violets are blue.” Let S be the statement:
“It is not true that roses are red and violets are blue.”
Then S can be written in the form ¬(p ∧q). However, as noted above, ¬(p ∧q) ≡¬p ∨¬q. Accordingly, S
has the same meaning as the statement:
“Roses are not red, or violets are not blue.”

CHAP. 4]
LOGIC AND PROPOSITIONAL CALCULUS
75
Fig. 4-6
4.7
ALGEBRA OF PROPOSITIONS
Propositions satisfy various laws which are listed in Table 4-1. (In this table, T and F are restricted to the
truth values “True” and “False,” respectively.) We state this result formally.
Theorem 4.2: Propositions satisfy the laws of Table 4-1.
(Observe the similarity between this Table 4-1 and Table 1-1 on sets.)
Table 4-1
Laws of the algebra of propositions
Idempotent laws:
(1a) p ∨p ≡p
(1b) p ∧p ≡p
Associative laws:
(2a) (p ∨q) ∨r ≡p ∨(q ∨r)
(2b) (p ∧q) ∧r ≡p ∧(q ∧r)
Commutative laws:
(3a) p ∨q ≡q ∨p
(3b) p ∧q ≡q ∧p
Distributive laws:
(4a) p ∨(q ∧r) ≡(p ∨q) ∧(p ∨r)
(4b) p ∧(q ∨r) ≡(p ∧q) ∨(p ∧r)
Identity laws:
(5a) p ∨F ≡p
(5b) p ∧T ≡p
(6a) p ∨T ≡T
(6b) p ∧F ≡F
Involution law:
(7) ¬¬p ≡p
Complement laws:
(8a) p ∨¬p ≡T
(8b) p ∧¬p ≡T
(9a) ¬T ≡F
(9b) ¬F ≡T
DeMorgan’s laws:
(10a) ¬(p ∨q) ≡¬p ∧¬q
(10b) ¬(p ∧q) ≡¬p ∨¬q
4.8
CONDITIONAL AND BICONDITIONAL STATEMENTS
Many statements, particularly in mathematics, are of the form “If p then q.” Such statements are called
conditional statements and are denoted by
p →q
The conditional p →q is frequently read “p implies q” or “p only if q.”
Another common statement is of the form “p if and only if q.” Such statements are called biconditional
statements and are denoted by
p ↔q
The truth values of p →q and p ↔q are deﬁned by the tables in Fig. 4-7(a) and (b). Observe that:
(a) The conditional p →q is false only when the ﬁrst part p is true and the second part q is false.Accordingly,
when p is false, the conditional p →q is true regardless of the truth value of q.
(b) The biconditional p ↔q is true whenever p and q have the same truth values and false otherwise.
The truth table of ¬p ∧q appears in Fig. 4-7(c). Note that the truth table of ¬p ∨q and p →q are identical,
that is, they are both false only in the second case. Accordingly, p →q is logically equivalent to ¬p ∨q; that is,
p →q ≡¬p ∨q

76
LOGIC AND PROPOSITIONAL CALCULUS
[CHAP. 4
In other words, the conditional statement “If p then q” is logically equivalent to the statement “Not p or q” which
only involves the connectives ∨and ¬ and thus was already a part of our language. We may regard p →q as an
abbreviation for an oft-recurring statement.
Fig. 4-7
4.9
ARGUMENTS
An argument is an assertion that a given set of propositions P1, P2, . . . , Pn, called premises, yields (has a
consequence) another proposition Q, called the conclusion. Such an argument is denoted by
P1, P2, . . . , Pn ⊢Q
The notion of a “logical argument” or “valid argument” is formalized as follows:
Deﬁnition 4.4: An argument P1, P2, . . . , Pn ⊢Q is said to be valid if Q is true whenever all the premises
P1, P2, . . . , Pn are true.
An argument which is not valid is called fallacy.
EXAMPLE 4.4
(a) The following argument is valid:
p, p →q ⊢q
(Law of Detachment)
The proof of this rule follows from the truth table in Fig. 4-7(a). Speciﬁcally, p and p →q are true
simultaneously only in Case (row) 1, and in this case q is true.
(b) The following argument is a fallacy:
p →q, q ⊢p
For p →q and q are both true in Case (row) 3 in the truth table in Fig. 4-7(a), but in this case p is false.
Now the propositions P1, P2, . . . , Pn are true simultaneously if and only if the proposition P1 ∧P2 ∧. . . Pn
is true. Thus the argument P1, P2, . . . , Pn ⊢Q is valid if and only if Q is true whenever P1 ∧P2 ∧. . . ∧Pn is
true or, equivalently, if the proposition (P1 ∧P2 ∧. . . ∧Pn) →Q is a tautology. We state this result formally.
Theorem 4.3: The argument P1, P2, . . . , Pn ⊢Q is valid if and only if the proposition (P1∧P2 . . .∧Pn) →Q
is a tautology.
We apply this theorem in the next example.
EXAMPLE 4.5 A fundamental principle of logical reasoning states:
“If p implies q and q implies r, then p implies r”

CHAP. 4]
LOGIC AND PROPOSITIONAL CALCULUS
77
Fig. 4-8
That is, the following argument is valid:
p →q, q →r ⊢p →r
(Law of Syllogism)
This fact is veriﬁed by the truth table in Fig. 4-8 which shows that the following proposition is a tautology:
[(p →q) ∧(q →r)] →(p →r)
Equivalently, the argument is valid since the premises p →q and q →r are true simultaneously only in Cases
(rows) 1, 5, 7, and 8, and in these cases the conclusion p →r is also true. (Observe that the truth table required
23 = 8 lines since there are three variables p, q, and r.)
We now apply the above theory to arguments involving speciﬁc statements. We emphasize that the validity
of an argument does not depend upon the truth values nor the content of the statements appearing in the argument,
but upon the particular form of the argument. This is illustrated in the following example.
EXAMPLE 4.6 Consider the following argument:
S1 : If a man is a bachelor, he is unhappy.
S2 : If a man is unhappy, he dies young.
________________________________
S : Bachelors die young
Here the statement S below the line denotes the conclusion of the argument, and the statements S1 and S2 above
the line denote the premises. We claim that the argument S1, S2 ⊢S is valid. For the argument is of the form
p →q, q →r ⊢p →r
where p is “He is a bachelor,” q is “He is unhappy” and r is “He dies young;” and by Example 4.5 this argument
(Law of Syllogism) is valid.
4.10
PROPOSITIONAL FUNCTIONS, QUANTIFIERS
Let A be a given set. A propositional function (or an open sentence or condition) deﬁned on A is an expression
p(x)
which has the property that p(a) is true or false for each a ∈A. That is, p(x) becomes a statement (with a truth
value) whenever any element a ∈A is substituted for the variable x. The set A is called the domain of p(x), and
the set Tp of all elements of A for which p(a) is true is called the truth set of p(x). In other words,
Tp = {x | x ∈A, p(x) is true}
or
Tp = {x | p(x)}

78
LOGIC AND PROPOSITIONAL CALCULUS
[CHAP. 4
Frequently, when A is some set of numbers, the condition p(x) has the form of an equation or inequality involving
the variable x.
EXAMPLE 4.7 Find the truth set for each propositional function p(x) deﬁned on the set N of positive integers.
(a) Let p(x) be “x + 2 > 7.” Its truth set is {6, 7, 8, . . .} consisting of all integers greater than 5.
(b) Let p(x) be “x + 5 < 3.” Its truth set is the empty set . That is, p(x) is not true for any integer in N.
(c) Let p(x) be “x + 5 > 1.” Its truth set is N. That is, p(x) is true for every element in N.
Remark: The above example shows that if p(x) is a propositional function deﬁned on a set A then p(x) could
be true for all x ∈A, for some x ∈A, or for no x ∈A. The next two subsections discuss quantiﬁers related to
such propositional functions.
Universal Quantiﬁer
Let p(x) be a propositional function deﬁned on a set A. Consider the expression
(∀x ∈A)p(x)
or
∀x p(x)
(4.1)
which reads “For every x in A, p(x) is a true statement” or, simply, “For all x, p(x).” The symbol
∀
which reads “for all” or “for every” is called the universal quantiﬁer. The statement (4.1) is equivalent to the
statement
Tp = {x | x ∈A, p(x)} = A
(4.2)
that is, that the truth set of p(x) is the entire set A.
The expression p(x) by itself is an open sentence or condition and therefore has no truth value. However,
∀x p(x), that is p(x) preceded by the quantiﬁer ∀, does have a truth value which follows from the equivalence
of (4.1) and (4.2). Speciﬁcally:
Q1: If {x| x ∈A, p(x)} = Athen ∀x p(x) istrue;otherwise, ∀x p(x) isfalse.
EXAMPLE 4.8
(a) The proposition (∀n∈N)(n + 4 > 3) is true since {n | n + 4 > 3} = {1, 2, 3, . . .} = N.
(b) The proposition (∀n∈N)(n + 2 > 8) is false since {n | n + 2 > 8} = {7, 8, . . .} ̸= N.
(c) The symbol ∀can be used to deﬁne the intersection of an indexed collection {Ai| i ∈I} of sets Ai as follows:
∩(Ai | i ∈I) = {x | ∀i ∈I, x ∈Ai}
Existential Quantiﬁer
Let p(x) be a propositional function deﬁned on a set A. Consider the expression
(∃x ∈A)p(x)
or
∃x, p(x)
(4.3)

CHAP. 4]
LOGIC AND PROPOSITIONAL CALCULUS
79
which reads “There exists an x in A such that p(x) is a true statement” or, simply, “For some x, p(x).” The symbol
∃
which reads “there exists” or “for some” or “for at least one” is called the existential quantiﬁer. Statement (4.3)
is equivalent to the statement
Tp = {x | x ∈A, p(x)} ̸= 
(4.4)
i.e., that the truth set of p(x) is not empty. Accordingly, ∃x p(x), that is, p(x) preceded by the quantiﬁer ∃, does
have a truth value. Speciﬁcally:
Q2: If {x | p(x)} ̸=  then ∃x p(x) is true; otherwise, ∃x p(x) is false.
EXAMPLE 4.9
(a) The proposition (∃n ∈N)(n + 4 < 7) is true since {n | n + 4 < 7} = {1, 2} ̸= .
(b) The proposition (∃n ∈N)(n + 6 < 4) is false since {n | n + 6 < 4} = .
(c) The symbol ∃can be used to deﬁne the union of an indexed collection {Ai | i ∈I} of sets Ai as follows:
∪(Ai | i ∈I) = {x | ∃i ∈I, x | ∈Ai}
4.11
NEGATION OF QUANTIFIED STATEMENTS
Consider the statement: “All math majors are male.” Its negation reads:
“It is not the case that all math majors are male” or, equivalently, “There exists at least one
math major who is a female (not male)”
Symbolically, using M to denote the set of math majors, the above can be written as
¬(∀x ∈M)(x is male) ≡(∃x ∈M) (x is not male)
or, when p(x) denotes “x is male,”
¬(∀x ∈M)p(x) ≡(∃x ∈M)¬p(x)
or
¬∀xp(x) ≡∃x¬p(x)
The above is true for any proposition p(x). That is:
Theorem 4.4 (DeMorgan): ¬(∀x ∈A)p(x) ≡(∃x ∈A)¬p(x).
In other words, the following two statements are equivalent:
(1) It is not true that, for all a ∈A, p(a) is true. (2) There exists an a ∈A such that p(a) is false.
There is an analogous theorem for the negation of a proposition which contains the existential quantiﬁer.
Theorem 4.5 (DeMorgan): ¬(∃x ∈A)p(x) ≡(∀x ∈A)¬p(x).
That is, the following two statements are equivalent:
(1) It is not true that for some a ∈A, p(a) is true. (2) For all a ∈A, p(a) is false.

80
LOGIC AND PROPOSITIONAL CALCULUS
[CHAP. 4
EXAMPLE 4.10
(a) The following statements are negatives of each other:
“For all positive integers n we have n + 2 > 8”
“There exists a positive integer n such that n + 2 ̸> 8”
(b) The following statements are also negatives of each other:
“There exists a (living) person who is 150 years old”
“Every living person is not 150 years old”
Remark: The expression ¬p(x) has the obvious meaning:
“The statement ¬p(a) is true when p(a) is false, and vice versa”
Previously, ¬ was used as an operation on statements; here ¬ is used as an operation on propositional functions.
Similarly, p(x) ∧q(x), read “p(x) and q(x),” is deﬁned by:
“The statement p(a) ∧q(a) is true when p(a) and q(a) are true”
Similarly, p(x) ∨q(x), read “p(x) or q(x),” is deﬁned by:
“The statement p(a) ∨q(a) is true when p(a) or q(a) is true”
Thus in terms of truth sets:
(i) ¬p(x) is the complement of p(x).
(ii) p(x) ∧q(x) is the intersection of p(x) and q(x).
(iii) p(x) ∨q(x) is the union of p(x) and q(x).
One can also show that the laws for propositions also hold for propositional functions. For example, we have
DeMorgan’s laws:
¬(p(x) ∧q(x)) ≡¬p(x) ∨¬q(x)
and
¬(p(x) ∨q(x)) ≡¬p(x) ∧¬q(x)
Counterexample
Theorem 4.6 tells us that to show that a statement ∀x, p(x) is false, it is equivalent to show that ∃x¬p(x)
is true or, in other words, that there is an element x0 with the property that p(x0) is false. Such an element x0 is
called a counterexample to the statement ∀x, p(x).
EXAMPLE 4.11
(a) Consider the statement ∀x ∈R, |x| ̸= 0. The statement is false since 0 is a counterexample, that is, |0| ̸= 0
is not true.
(b) Consider the statement ∀x ∈R, x2 ≥x. The statement is not true since, for example, 1
2 is a counterexample.
Speciﬁcally, ( 1
2)2 ≥1
2 is not true, that is, ( 1
2)2 < 1
2.
(c) Consider the statement ∀x ∈N, x2 ≥x. This statement is true where N is the set of positive integers.
In other words, there does not exist a positive integer n for which n2 < n.

CHAP. 4]
LOGIC AND PROPOSITIONAL CALCULUS
81
Propositional Functions with more than One Variable
A propositional function (of n variables) deﬁned over a product set A = A1 × · · · × An is an expression
p(x1, x2, . . . , xn)
which has the property that p(a1, a2, . . . , an) is true or false for any n-tuple (a1, . . . an) in A. For example,
x + 2y + 3z < 18
is a propositional function on N3 = N × N × N. Such a propositional function has no truth value. However, we
do have the following:
Basic Principle: A propositional function preceded by a quantiﬁer for each variable, for example,
∀x∃y, p(x, y)
or
∃x ∀y ∃z, p(x, y, z)
denotes a statement and has a truth value.
EXAMPLE 4.12 Let B = {1, 2, 3, . . . , 9} and let p(x, y) denote “x +y = 10.” Then p(x, y) is a propositional
function on A = B2 = B × B.
(a) The following is a statement since there is a quantiﬁer for each variable:
∀x∃y, p(x, y),
that is,
“For every x, there exists a y such that x + y = 10”
This statement is true. For example, if x = 1, let y = 9; if x = 2, let y = 8, and so on.
(b) The following is also a statement:
∃y∀x, p(x, y),
that is,
“There exists a y such that, for every x, we have x + y = 10”
No such y exists; hence this statement is false.
Note that the only difference between (a) and (b) is the order of the quantiﬁers. Thus a different ordering
of the quantiﬁers may yield a different statement. We note that, when translating such quantiﬁed statements into
English, the expression “such that” frequently follows “there exists.”
Negating Quantiﬁed Statements with more than One Variable
Quantiﬁed statements with more than one variable may be negated by successively applying Theorems 4.5
and 4.6. Thus each ∀is changed to ∃and each ∃is changed to ∀as the negation symbol ¬ passes through the
statement from left to right. For example,
¬[∀x∃y∃z, p(x, y, z)] ≡∃x¬[∃y∃z, p(x, y, z)] ≡¬∃z∀y[∃z, p(x, y, z)
≡∃x∀y∀z, ¬p(x, y, z)
Naturally, we do not put in all the steps when negating such quantiﬁed statements.
EXAMPLE 4.13
(a) Consider the quantiﬁed statement:
“Every student has at least one course where the lecturer is a teaching assistant.”
Its negation is the statement:
“There is a student such that in every course the lecturer is not a teaching assistant.”

82
LOGIC AND PROPOSITIONAL CALCULUS
[CHAP. 4
(b) The formal deﬁnition that L is the limit of a sequence a1, a2, . . . follows:
∀∈> 0, ∃n0 ∈N, ∀n > n0 we have | an −L| < ∈
Thus L is not the limit of the sequence a1, a2, . . . when:
∃∈> 0, ∀n0 ∈N, ∃n > n0 such that | an −L| ≥∈
Solved Problems
PROPOSITIONS AND TRUTH TABLES
4.1. Let p be “It is cold” and let q be “It is raining”. Give a simple verbal sentence which describes each of the
following statements: (a) ¬p; (b) p ∧q; (c) p ∨q; (d) q ∨¬p.
In each case, translate ∧, ∨, and ∼to read “and,” “or,” and “It is false that” or “not,” respectively, and then simplify
the English sentence.
(a) It is not cold.
(c) It is cold or it is raining.
(b) It is cold and raining.
(d) It is raining or it is not cold.
4.2. Find the truth table of ¬p ∧q.
Construct the truth table of ¬p ∧q as in Fig. 4-9(a).
Fig. 4-9
4.3. Verify that the proposition p ∨¬(p ∧q) is a tautology.
Construct the truth table of p ∨¬(p ∧q) as shown in Fig. 4-9(b). Since the truth value of p ∨¬(p ∧q) is T for
all values of p and q, the proposition is a tautology.
4.4. Show that the propositions ¬(p ∧q) and ¬p ∨¬q are logically equivalent.
Construct the truth tables for ¬(p ∧q) and ¬p ∨¬q as in Fig. 4-10. Since the truth tables are the same (both
propositions are false in the ﬁrst case and true in the other three cases), the propositions ¬(p ∧q) and ¬p ∨¬q are
logically equivalent and we can write
¬(p ∧q) ≡¬p ∨¬q.
Fig. 4-10

CHAP. 4]
LOGIC AND PROPOSITIONAL CALCULUS
83
4.5. Use the laws in Table 4-1 to show that ¬(p ∧q) ∨(¬p ∧q) ≡¬p.
Statement
Reason
(1) ¬(p ∨q) ∨(¬p ∧q) ≡(¬p ∧¬q) ∨(¬p ∧q)
DeMorgan’s law
(2)
≡¬p ∧(¬q ∨q)
Distributive law
(3)
≡¬p ∧T
Complement law
(4)
≡¬p
Identity law
CONDITIONAL STATEMENTS
4.6. Rewrite the following statements without using the conditional:
(a) If it is cold, he wears a hat.
(b) If productivity increases, then wages rise.
Recall that “If p then q” is equivalent to “Not p or q;” that is, p →q ≡¬p ∨q. Hence,
(a) It is not cold or he wears a hat.
(b) Productivity does not increase or wages rise.
4.7. Consider the conditional proposition p →q. The simple propositions q →p, ¬p →¬q and ¬q →¬p
are called, respectively, the converse, inverse, and contrapositive of the conditional p →q. Which if any
of these propositions are logically equivalent to p →q?
Construct their truth tables as in Fig. 4-11. Only the contrapositive ¬q →¬p is logically equivalent to the original
conditional proposition p →q.
Fig. 4-11
4.8. Determine the contrapositive of each statement:
(a) If Erik is a poet, then he is poor.
(b) Only if Marc studies will he pass the test.
(a) The contrapositive of p →q is ¬q →¬p. Hence the contrapositive follows:
If Erik is not poor, then he is not a poet.
(b) The statement is equivalent to: “If Marc passes the test, then he studied.” Thus its contrapositive is:
If Marc does not study, then he will not pass the test.
4.9. Write the negation of each statement as simply as possible:
(a) If she works, she will earn money.
(b) He swims if and only if the water is warm.
(c) If it snows, then they do not drive the car.
(a) Note that ¬(p →q) ≡p ∧¬q; hence the negation of the statement is:
She works or she will not earn money.

84
LOGIC AND PROPOSITIONAL CALCULUS
[CHAP. 4
(b) Note that ¬(p ↔q) ≡p ↔¬q ≡¬p ↔q ; hence the negation of the statement is either of the following:
He swims if and only if the water is not warm.
He does not swim if and only if the water is warm.
(c) Note that ¬(p →¬q) ≡p ∧¬¬q ≡p ∧q. Hence the negation of the statement is:
It snows and they drive the car.
ARGUMENTS
4.10. Show that the following argument is a fallacy: p →q, ¬ p ⊢¬q.
Construct the truth table for [(p →q)∧¬p] →¬q as in Fig. 4-12. Since the proposition [(p →q)∧¬p] →¬q
is not a tautology, the argument is a fallacy. Equivalently, the argument is a fallacy since in the third line of the truth
table p →q and ¬p are true but ¬q is false.
Fig. 4-12
4.11. Determine the validity of the following argument: p →q, ¬ p ⊢¬p.
Construct the truth table for [(p →q)∧¬q] →¬p as in Fig. 4-13. Since the proposition [(p →q)∧¬q] →¬p
is a tautology, the argument is valid.
Fig. 4-13
4.12. Prove the following argument is valid: p →¬q, r →q, r ⊢¬p.
Construct the truth table of the premises and conclusions as in Fig. 4-14(a). Now, p →¬q, r →q, and r are
true simultaneously only in the ﬁfth row of the table, where ¬p is also true. Hence the argument is valid.
Fig. 4-14

CHAP. 4]
LOGIC AND PROPOSITIONAL CALCULUS
85
4.13. Determine the validity of the following argument:
If 7 is less than 4, then 7 is not a prime number.
7 is not less than 4.
7 is a prime number.
First translate the argument into symbolic form. Let p be “7 is less than 4” and q be “7 is a prime number.” Then
the argument is of the form
p →¬q, ¬q ⊢q
Now, we construct a truth table as shown in Fig. 4-14(b). The above argument is shown to be a fallacy since, in the
fourth line of the truth table, the premises p →¬q and ¬p are true, but the conclusion q is false.
Remark: The fact that the conclusion of the argument happens to be a true statement is irrelevant to the fact that the
argument presented is a fallacy.
4.14. Test the validity of the following argument:
If two sides of a triangle are equal, then the opposite angles are equal.
Two sides of a triangle are not equal.
The opposite angles are not equal.
First translate the argument into the symbolic form p →q, ¬p ⊢¬q, where p is “Two sides of a triangle are
equal” and q is “The opposite angles are equal.” By Problem 4.10, this argument is a fallacy.
Remark: Although the conclusion does follow from the second premise and axioms of Euclidean geometry, the above
argument does not constitute such a proof since the argument is a fallacy.
QUANTIFIERS AND PROPOSITIONAL FUNCTIONS
4.15. Let A = {1, 2, 3, 4, 5}. Determine the truth value of each of the following statements:
(a) (∃x ∈A)(x + 3 = 10)
(c) (∃x ∈A)(x + 3 < 5)
(b) (∀x ∈A)(x + 3 < 10)
(d) (∀x ∈A)(x + 3 ≤7)
(a) False. For no number in A is a solution to x + 3 = 10.
(b) True. For every number in A satisﬁes x + 3 < 10.
(c) True. For if x0 = 1, then x0 + 3 < 5, i.e., 1 is a solution.
(d) False. For if x0 = 5, then x0 + 3 is not less than or equal 7. In other words, 5 is not a solution to the given
condition.
4.16. Determine the truth value of each of the following statements where U = {1, 2, 3} is the universal set:
(a) ∃x∀y, x2 < y + 1;
(b) ∀x∃y, x2 + y2 < 12;
(c) ∀x∀y, x2 + y2 < 12.
(a) True. For if x = 1, then 1, 2, and 3 are all solutions to 1 < y + 1.
(b) True. For each x0, let y = 1; then x2
0 + 1 < 12 is a true statement.
(c) False. For if x0 = 2 and y0 = 3, then x2
0 + y2
0 < 12 is not a true statement.
4.17. Negate each of the following statements:
(a) ∃x ∀y, p(x, y);
(b) ∃x ∀y, p(x, y);
(c) ∃y ∃x ∀z, p(x, y, z).
Use ¬∀x p(x) ≡∃x¬p(x) and ¬∃x p(x) ≡∀x¬p(x):
(a) ¬(∃x∀y, p(x, y)) ≡∀x∃y¬p(x, y)
(b) ¬(∀x∀y, p(x, y)) ≡∃x∃y¬p(x, y)
(c) ¬(∃y ∃x ∀z, p(x, y, z)) ≡∀y ∀x ∃z¬p(x, y, z)

86
LOGIC AND PROPOSITIONAL CALCULUS
[CHAP. 4
4.18. Let p(x) denote the sentence “x + 2 > 5.” State whether or not p(x) is a propositional function on each
of the following sets: (a) N, the set of positive integers; (b) M = {−1, −2, −3, . . .};
(c) C, the set of complex numbers.
(a) Yes.
(b) Although p(x) is false for every element in M, p(x) is still a propositional function on M.
(c) No. Note that 2i + 2 > 5 does not have any meaning. In other words, inequalities are not deﬁned for complex
numbers.
4.19. Negate each of the following statements: (a) All students live in the dormitories. (b) All mathematics
majors are males. (c) Some students are 25 years old or older.
Use Theorem 4.4 to negate the quantiﬁers.
(a) At least one student does not live in the dormitories. (Some students do not live in the dormitories.)
(b) At least one mathematics major is female. (Some mathematics majors are female.)
(c) None of the students is 25 years old or older. (All the students are under 25.)
Supplementary Problems
PROPOSITIONS AND TRUTH TABLES
4.20. Let p denote “He is rich” and let q denote “He is happy.” Write each statement in symbolic form using p and q. Note
that “He is poor” and “He is unhappy” are equivalent to ¬p and ¬q, respectively.
(a) If he is rich, then he is unhappy. (c) It is necessary to be poor in order to be happy.
(b) He is neither rich nor happy.
(d) To be poor is to be unhappy.
4.21. Find the truth tables for. (a) p ∨¬q; (b) ¬p ∧¬q.
4.22. Verify that the proposition (p ∧q) ∧¬(p ∨q) is a contradiction.
ARGUMENTS
4.23. Test the validity of each argument:
(a)
If it rains, Erik will be sick.
(b)
If it rains, Erik will be sick.
It did not rain.
Erik was not sick.
Erik was not sick.
It did not rain.
4.24. Test the validity of the following argument:
If I study, then I will not fail mathematics.
If I do not play basketball, then I will study.
But I failed mathematics.
Therefore I must have played basketball.
QUANTIFIERS
4.25. Let A = {1, 2, . . . , 9, 10}. Consider each of the following sentences. If it is a statement, then determine its truth value.
If it is a propositional function, determine its truth set.
(a) (∀x ∈A)(∃y ∈A)(x + y < 14)
(c) (∀x ∈A)(∀y ∈A)(x + y < 14)
(b) (∀y ∈A)(x + y < 14)
(d) (∃y ∈A)(x + y < 14)

CHAP. 4]
LOGIC AND PROPOSITIONAL CALCULUS
87
4.26. Negate each of the following statements:
(a) If the teacher is absent, then some students do not complete their homework.
(b) All the students completed their homework and the teacher is present.
(c) Some of the students did not complete their homework or the teacher is absent.
4.27. Negate each statement in Problem 4.15.
4.28. Find a counterexample for each statement were U = {3, 5, 7, 9} is the universal set:
(a) ∀x, x + 3 ≥7,
(b) ∀x, x is odd,
(c) ∀x, x is prime,
(d) ∀x, |x| = x
Answers to Supplementary Problems
4.20. (a) p→¬q; (b) ¬p ∧¬q; (c) q →¬p;
(d) ¬p →¬q.
4.21. (a) T, T, F, T; (b) F, F, F, T.
4.22. Construct its truth table. It is a contradiction since
its truth table is false for all values of p and q.
4.23. First translate the arguments into symbolic form:
p for “It rains,” and q for “Erik is sick:”
(a) p →q, ¬p ⊢¬q
(b) p →q, ¬q ⊢¬p
By Problem 4.10, (a) is a fallacy. By Problem 4.11,
(b) is valid.
4.24. Let p be “I study,” q be “I failed mathematics,” and
r be “I play basketball.”The argument has the form:
p →¬q, ¬r →p, q ⊢r
Construct the truth tables as in Fig. 4-15, where the
premises p →¬q, ¬r →p, and q are true simul-
taneously only in the ﬁfth line of the table, and in
that case the conclusion r is also true. Hence the
argument is valid.
Fig. 4-15
4.25. (a) The open sentence in two variables is preceded by
two quantiﬁers; hence it is a statement. Moreover,
the statement is true.
(b) The open sentence is preceded by one quantiﬁer;
hence it is a propositional function of the other vari-
able. Note that for every y ∈A, x0 + y < 14 if
and only if x0 = 1, 2, or 3. Hence the truth set is
{1, 2, 3}.
(c) It is a statement and it is false: if x0 = 8 and y0 = 9,
then x0 + y0 < 14 is not true.
(d) It is an open sentence in x. The truth set is A itself.
4.26. (a) The teacher is absent and all the students completed
their homework.
(b) Some of the students did not complete their home-
work or the teacher is absent.
(c) All the students completed their homework and the
teacher is present.
4.27. (a) (∀x ∈A)(x + 3 ̸= 10)
(c) (∀x ∈A)(x + 3 ≥5)
(b) (∃x ∈A)(x + 3 ≥10)
(d) (∃x ∈A)(x + 3 > 7)
4.28. (a) Here 3 is a counterexample.
(b) The statement is true; hence no counterexample
exists.
(c) Here 9 is the only counterexample.
(d) The
statement
is
true;
hence
there
is
no
counterexample.

CHAPTER 5
Techniques of
Counting
5.1
INTRODUCTION
This chapter develops some techniques for determining, without direct enumeration, the number of possible
outcomes of a particular event or the number of elements in a set. Such sophisticated counting is sometimes
called combinatorial analysis. It includes the study of permutations and combinations.
5.2
BASIC COUNTING PRINCIPLES
There are two basic counting principles used throughout this chapter. The ﬁrst one involves addition and the
second one multiplication.
Sum Rule Principle:
Suppose some event E can occur in m ways and a second event F can occur in n ways, and suppose both
events cannot occur simultaneously. Then E or F can occur in m + n ways.
Product Rule Principle:
Suppose there is an event E which can occur in m ways and, independent of this event, there is a second event
F which can occur in n ways. Then combinations of E and F can occur in mn ways.
The above principles can be extended to three or more events. That is, suppose an event E1 can occur in n1
ways, a second event E2 can occur in n2 ways, and, following E2; a third event E3 can occur in n3 ways, and so
on. Then:
Sum Rule:
If no two events can occur at the same time, then one of the events can occur in:
n1 + n2 + n3 + · · · ways.
Product Rule:
If the events occur one after the other, then all the events can occur in the order indicated in:
n1 · n2 · n3 · . . . ways.
88
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

CHAP. 5]
TECHNIQUES OF COUNTING
89
EXAMPLE 5.1 Suppose a college has 3 different history courses, 4 different literature courses, and 2 different
sociology courses.
(a)
The number m of ways a student can choose one of each kind of courses is:
m = 3(4)(2) = 24
(b) The number n of ways a student can choose just one of the courses is:
n = 3 + 4 + 2 = 9
There is a set theoretical interpretation of the above two principles. Speciﬁcally, suppose n(A) denotes the
number of elements in a set A. Then:
(1)
Sum Rule Principle: Suppose A and B are disjoint sets. Then
n(A ∪B) = n(A) + n(B)
(2)
Product Rule Principle: Let A × B be the Cartesian product of sets A and B. Then
n(A × B) = n(A) · n(B)
5.3
MATHEMATICAL FUNCTIONS
We discuss two important mathematical functions frequently used in combinatorics.
Factorial Function
The product of the positive integers from 1 to n inclusive is denoted by n!, read “n factorial.” Namely:
n! = 1 · 2 · 3 · . . . · (n−2)(n−1)n = n(n−1)(n−2) · . . . · 3 · 2 · 1
Accordingly, 1! = 1 and n! = n(n −l)!. It is also convenient to deﬁne 0! = 1.
EXAMPLE 5.2
(a)
3! = 3 · 2 · 1 = 6,
4! = 4 · 3 · 2 · 1 = 24,
5 = 5 · 4! = 5(24) = 120.
(b)
12 · 11 · 10
3 · 2 · 1
= 12 · 11 · 10 · 9!
3 · 2 · 1 · 9!
= 12!
3! 9! and, more generally,
n(n −1) · · · (n −r + 1)
r(r −1) · · · 3 · 2 · 1
= n(n −1) · · · (n −r + 1)(n −r)!
r(r −1) · · · 3 · 2 · 1 · (n −r)!
=
n!
r!(n −r)!
(c)
For large n, one uses Stirling’s approximation (where e = 2.7128...):
n! =
√
2πn nne−n

90
TECHNIQUES OF COUNTING
[CHAP. 5
Binomial Coefﬁcients
The symbol
n
r

, read “nCr” or “n Choose r,” where r and n are positive integers with r ≤n, is deﬁned as
follows:
n
r

= n(n −1) · · · (n −r + 1)
r(r −1) . . . 3 · 2 · 1
or equivalently
n
r

=
n!
r!(n −r)!
Note that n −(n −r) = r. This yields the following important relation.
Lemma 5.1:

n
n −r

=
n
r

or equivalently,
n
a

=
n
b

where a + b = n.
Motivated by that fact that we deﬁned 0! = 1, we deﬁne:
n
0

= n!
0!n! = 1
and
0
0

=
0!
0! 0! = 1
EXAMPLE 5.3
(a)
8
2

= 8 · 7
2 · 1 = 28;
9
4

= 9 · 8 · 7 · 6
4 · 3 · 2 · 1 = 126;
12
5

= 12 · 11 · 10 · 9 · 8
5 · 4 · 3 · 2 · 1
= 792.
Note that
n
r

has exactly r factors in both the numerator and the denominator.
(b)
Suppose we want to compute
10
7

. There will be 7 factors in both the numerator and the denominator.
However, 10 −7 = 3. Thus, we use Lemma 5.1 to compute:
10
7

=
10
3

= 10 · 9 · 8
3 · 2 · 1 = 120
Binomial Coefﬁcients and Pascal’s Triangle
The numbers
n
r

are called binomial coefﬁcients, since they appear as the coefﬁcients in the expansion of
(a + b)n. Speciﬁcally:
Theorem (Binomial Theorem) 5.2:
(a + b)n =
n

k=0
n
r

an−kbk
The coefﬁcients of the successive powers of a + b can be arranged in a triangular array of numbers, called
Pascal’striangle, aspicturedinFig.5-1. ThenumbersinPascal’strianglehavethefollowinginterestingproperties:
(i)
The ﬁrst and last number in each row is 1.
(ii)
Every other number can be obtained by adding the two numbers appearing above it. For example:
10 = 4 + 6,
15 = 5 + 10,
20 = 10 + 10.
Since these numbers are binomial coefﬁcients, we state the above property formally.

CHAP. 5]
TECHNIQUES OF COUNTING
91
Fig. 5-1
Pascal’s triangle
Theorem 5.3:
n + 1
r

=

n
r −1

+
n
r

.
5.4
PERMUTATIONS
Any arrangement of a set of n objects in a given order is called a permutation of the object (taken all at a time).
Any arrangement of any r ≤n of these objects in a given order is called an “r-permutation” or “a permutation of
the n objects taken r at a time.” Consider, for example, the set of letters A, B, C, D. Then:
(i)
BDCA, DCBA, and ACDB are permutations of the four letters (taken all at a time).
(ii)
BAD, ACB, DBC are permutations of the four letters taken three at a time.
(iii)
AD, BC, CA are permutations of the four letters taken two at a time.
We usually are interested in the number of such permutations without listing them.
The number of permutations of n objects taken r at a time will be denoted by
P(n, r)
(other texts may use nPr, Pn,r, or (n)r).
The following theorem applies.
Theorem 5.4: P (n, r) = n(n −1)(n −2) · · · (n −r + 1) =
n!
(n −r)!
We emphasize that there are r factors in n(n −1)(n −2) · · · (n −r + 1).
EXAMPLE 5.4 Find the number m of permutations of six objects, say, A, B, C, D, E, F, taken three at a time.
In other words, ﬁnd the number of “three-letter words” using only the given six letters without repetition.
Let us represent the general three-letter word by the following three positions:
——, ——, ——
The ﬁrst letter can be chosen in 6 ways; following this the second letter can be chosen in 5 ways; and, ﬁnally, the
third letter can be chosen in 4 ways. Write each number in its appropriate position as follows:
6 ,
5 ,
4
By the Product Rule there are m = 6 · 5 · 4 = 120 possible three-letter words without repetition from the six
letters. Namely, there are 120 permutations of 6 objects taken 3 at a time. This agrees with the formula in
Theorem 5.4:
P(6, 3) = 6 · 5 · 4 = 120
In fact, Theorem 5.4 is proven in the same way as we did for this particular case.
Consider now the special case of P(n, r) when r = n. We get the following result.

92
TECHNIQUES OF COUNTING
[CHAP. 5
Corollary 5.5: There are n! permutations of n objects (taken all at a time).
For example, there are 3! = 6 permutations of the three letters A, B, C. These are:
ABC,
ACB,
BAC,
BCA,
CAB,
CBA.
Permutations with Repetitions
Frequently we want to know the number of permutations of a multiset, that is, a set of objects some of which
are alike. We will let
P(n; n1, n2, . . . , nr)
denote the number of permutations of n objects of which n1 are alike, n2 are alike, . . ., nr are alike. The general
formula follows:
Theorem 5.6: P (n; n1, n2, . . . , nr) =
n!
n1! n2! . . . nr!
We indicate the proof of the above theorem by a particular example. Suppose we want to form all possible
ﬁve-letter “words” using the letters from the word “BABBY.” Now there are 5! = 120 permutations of the objects
B1, A, B2, B3, Y, where the three B’s are distinguished. Observe that the following six permutations
B1B2 B3AY,
B2B1 B3AY,
B3B1 B2AY,
B1B3 B2AY,
B2B3 B1AY,
B3B2 B1AY
produce the same word when the subscripts are removed. The 6 comes from the fact that there are 3! = 3·2·1 = 6
different ways of placing the three B’s in the ﬁrst three positions in the permutation. This is true for each set of
three positions in which the B’s can appear. Accordingly, the number of different ﬁve-letter words that can be
formed using the letters from the word “BABBY” is:
P(5; 3) = 5!
3! = 20
EXAMPLE 5.5 Find the number m of seven-letter words that can be formed using the letters of the word
“BENZENE.”
We seek the number of permutations of 7 objects of which 3 are alike (the three E’s), and 2 are alike (the two
N’s). By Theorem 5.6,
m = P(7; 3, 2) = 7!
3!2! = 7 · 6 · 5 · 4 · 3 · 2 · 1
3 · 2 · 1 · 2 · 1
= 420
Ordered Samples
Many problems are concerned with choosing an element from a set S, say, with n elements. When we choose
one element after another, say, r times, we call the choice an ordered sample of size r. We consider two cases.
(1) Sampling with replacement
Here the element is replaced in the set S before the next element is chosen. Thus, each time there are n ways
to choose an element (repetitions are allowed). The Product rule tells us that the number of such samples is:
n · n · n · · · n · n(r factors) = nr

CHAP. 5]
TECHNIQUES OF COUNTING
93
(2) Sampling without replacement
Here the element is not replaced in the set S before the next element is chosen. Thus, there is no repetition
in the ordered sample. Such a sample is simply an r-permutation. Thus the number of such samples is:
P(n, r) = n(n −1) (n −2) · · · (n −r + 1) =
n!
(n −r)!
EXAMPLE 5.6 Three cards are chosen one after the other from a 52-card deck. Find the number m of ways
this can be done: (a) with replacement; (b) without replacement.
(a) Each card can be chosen in 52 ways. Thus m = 52(52)(52) = 140 608.
(b) Here there is no replacement. Thus the ﬁrst card can be chosen in 52 ways, the second in 51 ways, and
the third in 50 ways. Therefore:
m = P(52, 3) = 52(51)(50) = 132 600
5.5
COMBINATIONS
Let S be a set with n elements. A combination of these n elements taken r at a time is any selection of r of
the elements where order does not count. Such a selection is called an r-combination; it is simply a subset of S
with r elements. The number of such combinations will be denoted by
C(n, r)
(other texts may use nCr, Cn,r, or Cn
r ).
Before we give the general formula for C(n, r), we consider a special case.
EXAMPLE 5.7 Find the number of combinations of 4 objects, A, B, C, D, taken 3 at a time.
Each combination of three objects determines 3! = 6 permutations of the objects as follows:
ABC :
ABC,
ACB,
BAC,
BCA,
CAB,
CBA
ABD:
ABD,
ADB,
BAD,
BDA,
DAB,
DBA
ACD:
ACD,
ADC,
CAD,
CDA,
DAC,
DCA
BCD:
BDC,
BDC,
CBD,
CDB,
DBC,
DCB
Thus the number of combinations multiplied by 3! gives us the number of permutations; that is,
C(4, 3) · 3! = P(4, 3)
or
C(4, 3) = P(4, 3)
3!
But P (4, 3) = 4 · 3 · 2 = 24 and 3! = 6; hence C(4, 3) = 4 as noted above.
As indicated above, any combination of n objects taken r at a time determines r! permutations of the objects
in the combination; that is,
P(n, r) = r! C(n, r)
Accordingly, we obtain the following formula for C(n, r) which we formally state as a theorem.

94
TECHNIQUES OF COUNTING
[CHAP. 5
Theorem 5.7: C(n, r) = P(n, r)
r!
=
n!
r!(n −r)!
Recall that the binomial coefﬁcient
n
r

was deﬁned to be
n!
r!(n −r)!; hence
C(r, n) =
n
r

We shall use C(n, r) and
n
r

interchangeably.
EXAMPLE 5.8 A farmer buys 3 cows, 2 pigs, and 4 hens from a man who has 6 cows, 5 pigs, and 8 hens. Find
the number m of choices that the farmer has.
The farmer can choose the cows in C(6, 3) ways, the pigs in C(5, 2) ways, and the hens in C(8, 4) ways.
Thus the number m of choices follows:
m =
6
3
5
2
8
4

= 6 · 5 · 4
3 · 2 · 1 · 5 · 4
2 · 1 · 8 · 7 · 6 · 5
4 · 3 · 2 · 1 = 20 · 10 · 70 = 14 000
5.6
THE PIGEONHOLE PRINCIPLE
Many results in combinational theory come from the following almost obvious statement.
Pigeonhole Principle: If n pigeonholes are occupied by n + 1 or more pigeons, then at least one pigeonhole is
occupied by more than one pigeon.
This principle can be applied to many problems where we want to show that a given situation can occur.
EXAMPLE 5.9
(a)
Suppose a department contains 13 professors, then two of the professors (pigeons) were born in the same
month (pigeonholes).
(b)
Find the minimum number of elements that one needs to take from the set S = {1, 2, 3, . . . , 9} to be sure
that two of the numbers add up to 10.
Here the pigeonholes are the ﬁve sets {1, 9}, {2, 8}, {3, 7}, {4, 6}, {5}. Thus any choice of six elements
(pigeons) of S will guarantee that two of the numbers add up to ten.
The Pigeonhole Principle is generalized as follows.
Generalized Pigeonhole Principle: If n pigeonholes are occupied by kn + 1 or more pigeons, where k is a
positive integer, then at least one pigeonhole is occupied by k + 1 or more pigeons.
EXAMPLE 5.10 Find the minimum number of students in a class to be sure that three of them are born in the
same month.
Here the n = 12 months are the pigeonholes, and k + 1 = 3 so k = 2. Hence among any kn + 1 = 25
students (pigeons), three of them are born in the same month.

CHAP. 5]
TECHNIQUES OF COUNTING
95
5.7
THE INCLUSION–EXCLUSION PRINCIPLE
Let A and B be any ﬁnite sets. Recall Theorem 1.9 which tells us:
n(A ∪B) = n(A) + n(B) −n(A ∩B)
In other words, to ﬁnd the number n(A ∪B) of elements in the union of A and B, we add n(A) and n(B) and then
we subtract n(A ∩B); that is, we “include” n(A) and n(B), and we “exclude” n(A ∩B). This follows from the
fact that, when we add n(A) and n(B), we have counted the elements of (A ∩B) twice.
The above principle holds for any number of sets. We ﬁrst state it for three sets.
Theorem 5.8: For any ﬁnite sets A, B, C we have
n(A ∪B ∪C) = n(A) + n(B) + n(C) −n(A ∩B) −n(A ∩C) −n(B ∩C) + n(A ∩B ∩C)
That is, we “include” n(A), n(B), n(C), we “exclude” n(A ∩B), n(A ∩C), n(B ∩C), and ﬁnally “include”
n(A ∩B ∩C).
EXAMPLE 5.11 Find the number of mathematics students at a college taking at least one of the languages
French, German, and Russian, given the following data:
65 study French,
20 study French and German,
45 study German,
25 study French and Russian,
8 study all three languages.
42 study Russian,
15 study German and Russian,
We want to ﬁnd n(F ∪G ∪R) where F, G, and R denote the sets of students studying French, German, and
Russian, respectively.
By the Inclusion–Exclusion Principle,
n(F ∪G ∪R) = n(F) + n(G) + n(R) −n(F ∩G) −n(F ∩R) −n(G ∩R) + n(F ∩G ∩R)
= 65 + 45 + 42 −20 −25 −15 + 8 = 100
Namely, 100 students study at least one of the three languages.
Now, suppose we have any ﬁnite number of ﬁnite sets, say, A1, A2, …, Am. Let sk be the sum of the
cardinalities
n(Ai1 ∩Ai2 ∩· · · ∩AiK)
of all possible k-tuple intersections of the given m sets. Then we have the following general Inclusion–Exclusion
Principle.
Theorem 5.9: n(A1 ∪A2 ∪· · · ∪Am) = s1 −s2 + s3 −· · · + (−1)m−1sm.
5.8
TREE DIAGRAMS
A tree diagram is a device used to enumerate all the possible outcomes of a sequence of events where each
event can occur in a ﬁnite number of ways. The construction of tree diagrams is illustrated in the following
example.
EXAMPLE 5.12
(a)
Find the product set A × B × C, where A = {l, 2}, B = {a, b, c}, C = {x, y}.
The tree diagram for A × B × C appears in Fig. 5-2(a). Here the tree is constructed from left to right, and
the number of branches at each point corresponds to the possible outcomes of the next event. Each endpoint
(leaf) of the tree is labeled by the corresponding element of A × B × C. As noted previously, A × B × C has
n = 2(3)(2) = 12 elements.

96
TECHNIQUES OF COUNTING
[CHAP. 5
Fig. 5-2
(b)
Mark and Erik are to play a tennis tournament. The ﬁrst person to win two games in a row or who wins a
total of three games wins the tournament. Find the number of ways the tournament can occur.
The tree diagram showing the possible outcomes of the tournament appears in Fig. 5-2(b). Here the tree is
constructed from top-down rather than from left-right. (That is, the “root” is on the top of the tree.) Note that
there are 10 endpoints, and the endpoints correspond to the following 10 ways the tournament can occur:
MM, MEMM, MEMEM, MEMEE, MEE, EMM, EMEMM,
EMEME, EMEE, EE
The path from the beginning (top) of the tree to the endpoint describes who won which game in the tournament.
Solved Problems
FACTORIAL NOTATION AND BINOMIAL COEFFICIENTS
5.1.
Compute:
(a) 4!, 5!;
(b) 6!, 7!, 8!, 9!;
(c) 50!.
(a) 4! = 4 · 3 · 2 · 1 = 24,
5! = 5 · 4 · 3 · 2 · 1 = 5(24) = 120.
(b) Now use(n + 1)! = (n + 1)n!:
6! = 5(5!) = 6(120) = 720,
8! = 8(7!) = 8(5040) = 40 320,
7! = 7(6!) = 7(720) = 5 040,
9! = 9(8!) = 9(40 320) = 362 880.
(c) Since n is very large, we use Sterling’s approximation: n! =
√
2πn nπe−n (where e ≈2.718). Thus:
50! ≈N =
√
100π 5050e−50
Evaluating N using a calculator, we get N = 3.04 × 1064 (which has 65 digits).
5.2.
Compute: (a) 13!
11!;
(b) 7!
10!.
(a) 13!
11! = 13 · 12 · 11 · 10 · 9 · 8 · 7 · 6 · 5 · 4 · 3 · 2 · 1
11 · 10 · 9 · 8 · 7 · 6 · 5 · 4 · 3 · 2 · 1
= 13 · 12 = 156.
Alternatively, this could be solved as follows:
13!
11! = 13 · 12 · 11!
11!
= 13 · 12 = 156.

CHAP. 5]
TECHNIQUES OF COUNTING
97
(b) 7!
10! =
7!
10 · 9 · 8 · 7! =
1
10 · 9 · 8 =
1
720.
5.3.
Simplify: (a)
n!
(n −1)!;
(b) (n + 2)!
n!
.
(a)
n!
(n −1)! = n(n −1)(n −2) · · · 3 · 2 · 1
(n −1)(n −2) · · · 3 · 2 · 1 = n; alternatively,
n!
(n −1)! = n(n −1)!
(n −1)! = n.
(b) (n + 2)!
n!
= (n + 2)(n + 1)n!
n!
= (n + 2)(n + 1) = n2 + 3n + 2.
5.4.
Compute: (a)
16
3

; (b)
12
4

; (c)
8
5

.
Recall that there are as many factors in the numerator as in the denominator.
(a)
16
3

= 16 · 15 · 14
3 · 2 · 1
= 560;
(b)
12
4

= 12 · 11 · 10 · 9
4 · 3 · 2 · 1
= 495;
(c) Since 8 −5 = 3, we have
8
5

=
8
3

= 8 · 7. 6
3 · 2 · 1 = 56.
5.5.
Prove:
17
6

=
16
5

+
16
6

.
Now
16
5

+
16
6

=
16!
5!11! +
16!
6!10!. Multiply the ﬁrst fraction by 6
6 and the second by 11
11 to obtain the same
denominator in both fractions; and then add:
16
5

+
16
6

=
6 · 16!
6 · 5! · 11! +
11 · 16!
6! · 11 · 10! = 6 · 16!
6! · 11! + 11 · 16!
6! · 11!
= 6 · 16! + 11 · 16!
6! · 11!
= (6 + 11) · 16!
6! · 11!
= 17 · 16!
6! · 11! =
17!
6! · 11! =
17
6

5.6.
Prove Theorem 5.3:
n + 1
r

=

n
r −1

+
n
r

.
(The technique in this proof is similar to that of the preceding problem.)
Now

n
r −1

+
n
r

=
n!
(r −1)! · (n −r + 1)! +
n!
r! · (n −r)!.
To obtain the same denominator in both fractions, multiply the ﬁrst fraction by r
r and the second fraction by n −r + 1
n −r + 1.
Hence

n
r −1

+
n
r

=
r · n!
r · (r −1)! · (n −r + 1)! +
(n −r + 1) · n!
r! · (n −r + 1) · (n −r)!
=
r · n!
r!(n −r + 1)! + (n −r + 1) · n!
r!(n −r + 1)!
=
r · n! + (n −r + 1) · n!
r!(n −r + 1)!
= [r + (n −r + 1)] · n!
r!(n −r + 1)!
=
(n + 1)n!
r!(n −r + 1)! =
(n + 1)!
r!(n −r + 1)! =
n + 1
r

COUNTING PRINCIPLES
5.7.
Suppose a bookcase shelf has 5 History texts, 3 Sociology texts, 6 Anthropology texts, and 4 Psychology
texts. Find the number n of ways a student can choose:
(a) one of the texts; (b) one of each type of text.
(a)
Here the Sum Rule applies; hence, n = 5 + 3 + 6 + 4 = 18.
(b)
Here the Product Rule applies; hence, n = 5 · 3 · 6 · 4 = 360.

98
TECHNIQUES OF COUNTING
[CHAP. 5
5.8.
A history class contains 8 male students and 6 female students. Find the number n of ways that the class
can elect: (a) 1 class representative; (b) 2 class representatives, 1 male and 1 female; (c) 1 president and 1
vice president.
(a)
Here the Sum Rule is used; hence, n = 8 + 6 = 14.
(b)
Here the Product Rule is used; hence, n = 8 · 6 = 48.
(c)
There are 14 ways to elect the president, and then 13 ways to elect the vice president. Thus n = 14 · 13 = 182.
5.9.
There are four bus lines between A and B, and three bus lines between B and C. Find the number m of ways that a man
can travel by bus: (a) from A to C by way of B; (b) roundtrip from A to C by way of B; (c) roundtrip from A to C by
way of B but without using a bus line more than once.
(a) There are 4 ways to go from A to B and 3 ways from B to C; hence n = 4 · 3 = 12.
(b) There are 12 ways to go from A to C by way of B, and 12 ways to return. Thus n = 12 · 12 = 144.
(c) The man will travel from A to B to C to B to A. Enter these letters with connecting arrows as follows:
A →B →C →B →A
The man can travel four ways from A to B and three ways from B to C, but he can only travel two ways from C to
B and three ways from B to A since he does not want to use a bus line more than once. Enter these numbers above
the corresponding arrows as follows:
A
4→B
3→C
2→B
3→A
Thus, by the Product Rule, n = 4 · 3 · 2 · 3 = 72.
PERMUTATIONS
5.10.
State the essential difference between permutations and combinations, with examples.
Order counts with permutations, such as words, sitting in a row, and electing a president, vice president, and treasurer.
Order does not count with combinations, such as committees and teams (without counting positions). The product
rule is usually used with permutations, since the choice for each of the ordered positions may be viewed as a sequence
of events.
5.11.
Find: (a) P (7, 3); (b) P(14, 2).
Recall P (n, r) has r factors beginning with n.
(a) P (7, 3) = 7 · 6 · 5 = 210;
(b) P(14, 2) = 14 · 13 = 182.
5.12.
Find the number m of ways that 7 people can arrange themselves:
(a) In a row of chairs; (b) Around a circular table.
(a) Here m = P (7, 7) = 7! ways.
(b) One person can sit at any place at the table. The other 6 people can arrange themselves in 6! ways around the
table; that is m = 6!.
This is an example of a circular permutation. In general, n objects can be arranged in a circle in (n −1)! ways.
5.13.
Find the number n of distinct permutations that can be formed from all the letters of each word:
(a) THOSE; (b) UNUSUAL; (c) SOCIOLOGICAL.
This problem concerns permutations with repetitions.
(a) n = 5! = 120, since there are 5 letters and no repetitions.
(b) n = 7!
3! = 840, since there are 7 letters of which 3 are U and no other letter is repeated.

CHAP. 5]
TECHNIQUES OF COUNTING
99
(c) n =
12!
3!2!2!2! , since there are 12 letters of which 3 are O, 2 are C, 2 are I, and 2 are L. (We leave the answer
using factorials, since the number is very large.)
5.14.
A class contains 8 students. Find the number n of samples of size 3:
(a) With replacement; (b) Without replacement.
(a)
Each student in the ordered sample can be chosen in 8 ways; hence, there are
n = 8 · 8 · 8 = 83 = 512 samples of size 3 with replacement.
(b)
The ﬁrst student in the sample can be chosen in 8 ways, the second in 7 ways, and the last in 6 ways. Thus, there
are n = 8 · 7 · 6 = 336 samples of size 3 without replacement.
5.15.
Find n if P (n, 2) = 72.
P(n, 2) = n(n −1) = n2 −n.
Thus, we get
n2 −n = 72
or
n2 −n −72 = 0
or
(n −9)(n + 8) = 0
Since n must be positive, the only answer is n = 9.
COMBINATIONS
5.16.
A class contains 10 students with 6 men and 4 women. Find the number n of ways to:
(a)
Select a 4-member committee from the students.
(b)
Select a 4-member committee with 2 men and 2 women.
(c)
Elect a president, vice president, and treasurer.
(a) This concerns combinations, not permutations, since order does not count in a committee. There are “10 choose
4” such committees. That is:
n = C(10, 4) =
10
4

= 10 · 9 · 8 · 7
4 · 3 · 2 · 1 = 210
(b) The 2 men can be chosen from the 6 men in C(6, 2) ways, and the 2 women can be chosen from the 4 women in
C(4, 2) ways. Thus, by the Product Rule:
n =
6
2
4
2

= 6 · 5
2 · 1 · 4 · 3
2 · 1 = 15(6) = 90
(c)
This concerns permutations, not combinations, since order does count. Thus,
n = P(6, 3) = 6 · 5 · 4 = 120
5.17.
A box contains 8 blue socks and 6 red socks. Find the number of ways two socks can be drawn from the
box if:
(a) They can be any color. (b) They must be the same color.
(a)
There are “14 choose 2” ways to select 2 of the 14 socks. Thus:
n = C(14, 2) =
14
2

= 14 · 13
2 · 1
= 91
(b)
There are C(8, 2) = 28 ways to choose 2 of the 8 blue socks, and C(6, 2) = 15 ways to choose 2 of the 4 red
socks. By the Sum Rule, n = 28 + 15 = 43.
5.18.
Find the number m of committees of 5 with a given chairperson that can be selected from 12 people.
The chairperson can be chosen in 12 ways and, following this, the other 4 on the committee can be chosen from the
11 remaining in C(11, 4) ways. Thus m = 12·C(11, 4) = 12·330 = 3960.

100
TECHNIQUES OF COUNTING
[CHAP. 5
PIGEONHOLE PRINCIPLE
5.19.
Find the minimum number n of integers to be selected from S = {1, 2, . . . , 9} so that: (a) The sum of
two of the n integers is even. (b) The difference of two of the n integers is 5.
(a)
The sum of two even integers or of two odd integers is even. Consider the subsets {1, 3, 5, 7, 9} and {2, 4, 6, 8}
of S as pigeonholes. Hence n = 3.
(b)
Considertheﬁvesubsets{1, 6}, {2, 7}, {3, 8}, {4, 9}, {5}ofS aspigeonholes. Thenn = 6willguaranteethattwo
integers will belong to one of the subsets and their difference will be 5.
5.20.
Find the minimum number of students needed to guarantee that ﬁve of them belong to the same class
(Freshman, Sophomore, Junior, Senior).
Here the n = 4 classes are the pigeonholes and k +1 = 5 so k = 4. Thus among any kn+1 = 17 students (pigeons),
ﬁve of them belong to the same class.
5.21.
Let L be a list (not necessarily in alphabetical order) of the 26 letters in the English alphabet (which
consists of 5 vowels, A, E, I, O, U, and 21 consonants).
(a)
Show that L has a sublist consisting of four or more consecutive consonants.
(b) Assuming L begins with a vowel, say A, show that L has a sublist consisting of ﬁve or more
consecutive consonants.
(a)
The ﬁve letters partition L into n = 6 sublists (pigeonholes) of consecutive consonants. Here k + 1 = 4 and so
k = 3. Hence nk + 1 = 6(3) + 1 = 19 < 21. Hence some sublist has at least four consecutive consonants.
(b)
Since L begins with a vowel, the remainder of the vowels partition L into n = 5 sublists. Here k + 1 = 5 and so
k = 4. Hence kn + 1 = 21. Thus some sublist has at least ﬁve consecutive consonants.
INCLUSION–EXCLUSION PRINCIPLE
5.22.
There are 22 female students and 18 male students in a classroom. Find the total number t of students.
The sets of male and female students are disjoint; hence t = 22 + 18 = 40.
5.23.
Suppose among 32 people who save paper or bottles (or both) for recycling, there are 30 who save paper
and 14 who save bottles. Find the number m of people who:
(a) save both; (b) save only paper; (c) save only bottles.
Let P and B denote the sets of people saving paper and bottles, respectively. Then:
(a)
m = n(P ∩B) = n(P ) + n(B) −n(P ∪B) = 30 + 14 −32 = 12
(b)
m = n(P\B) = n(P) −n(P ∩B) = 30 −12 = 18
(c)
m = n(B\P ) = n(B) −n(P ∩B) = 14 −12 = 2
5.24.
Let A, B, C, D denote, respectively, art, biology, chemistry, and drama courses. Find the number N of
students in a dormitory given the data:
12 take A,
5 take A and B,
4 take B and D,
2 take B, C, D,
20 take B,
7 take A and C,
3 take C and D,
3 take A, C, D,
20 take C,
4 take A and D,
3 take A, B, C,
2 take all four,
8 take D,
16 take B and C,
2 take A, B, D,
71 take none.
Let T be the number of students who take at least one course. By the Inclusion–Exclusion Principle Theorem 5.9,
T = s1 −s2 + s3 −s4 where:
s1 = 12 + 20 + 20 + 8 = 60,
s2 = 5 + 7 + 4 + 16 + 4 + 3 = 39,
s3 = 3 + 2 + 2 + 3 = 10,
s4 = 2.
Thus T = 29, and N = 71 + T = 100.

CHAP. 5]
TECHNIQUES OF COUNTING
101
TREE DIAGRAMS
5.25.
Teams A and B play in a tournament. The ﬁrst team to win three games wins the tournament. Find the
number n of possible ways the tournament can occur.
Construct the appropriate tree diagram in Fig. 5-3(a). The tournament can occur in 20 ways:
AAA, AABA, AABBA, AABBB, ABAA, ABABA, ABABB, ABBAA, ABBAB, ABBB,
BBB, BBAB, BBAAB, BBAAA, BABB, BABAB, BABAA, BAABB, BAABA, BAAA
Fig. 5-3
5.26.
Construct the tree diagram that gives the permutations of {a, b, c}.
The tree diagram appears in Fig. 5-3(b). There are six permutations, and they are listed on the bottom of the diagram.
MISCELLANEOUS PROBLEMS
5.27.
There are 12 students in a class. Find the number n of ways that the 12 students can take 3 tests if
4 students are to take each test.
There are C(12, 4) = 495 ways to choose 4 of the 12 students to take the ﬁrst test. Following this, there are
C(8, 4) = 70 ways to choose 4 of the remaining 8 students to take the second test. The remaining students take the
third test. Thus:
n = 70(495) = 34 650
5.28.
Prove Theorem (Binomial Theorem) 5.2: (a + b)n =
n

r=0
n
r

an−rbr.
The theorem is true for n = 1, since
1

r=0
1
r

a1−rbr =
1
0

a1b0 +
1
1

a0b1 = a + b = (a + b)1
We assume the theorem is true for (a + b)n and prove it is true for (a + b)n + 1.
(a + b)n+1 = (a + b) (a + b)n
= (a + b)[an + (n
1) an−1 b + · · · + (n
r−1) an−r+1 br−1 + (n
r ) an−r br + · · · (n
1) a bn−1 + bn]

102
TECHNIQUES OF COUNTING
[CHAP. 5
Now the term in the product which contains br is obtained from
b[(n
r−1) an−r+1 br−1] + a[(n
r ) an−r br] = (n
r−1) an−r+1 br + (n
r )an−r+1 br
= [(n
r−1) + (n
r )]an−r+1 br
But, by Theorem 5.3,

n
r −1

=
n
r

=
n + 1
r

. Thus, the term containing br is:
n + 1
r

an−r+1 br
Note that (a + b)(a + b)n is a polynomial of degree n + 1 in b. Consequently:
(a + b)n+1 = (a + b)(a + b)n =
n+1

r=0
n + 1
r

an−r+1 br
which was to be proved.
5.29.
Let n and n1, n2, . . . , nr be nonnegative integers such that n1 + n2 + · · · + nr = n. The multinomial
coefﬁcients are denoted and deﬁned by:

n
n1, n2, . . . , nr

=
n!
n1!n2! . . . nr!
Compute the following multinomial coefﬁcients:
(a)

6
3, 2, 1

;
(b)

8
4, 2, 2, 0

;
(c)

10
5, 3, 2, 2

.
(a)

6
3, 2, 1

=
6!
3! 2! 1! = 6 · 5 · 4 · 3 · 2 · 1
3 · 2 · 1 · 2 · 1 · 1 = 60
(b)

8
4, 2, 2, 0

=
8 !
4! 2! 2! 0! =
8 · 7 · 6 · 5 · 4 · 3 · 2 · 1
4 · 3 · 2 · 1 · 2 · 1 · 2 · 1 · 1 = 420
(c)

10
5, 3, 2, 2

has no meaning, since 5 + 3 + 2 + 2 ̸= 10.
5.30.
Astudent must take ﬁve classes from three areas of study. Numerous classes are offered in each discipline,
but the student cannot take more than two classes in any given area.
(a)
Using the pigeonhole principle, show that the student will take at least two classes in one area.
(b)
Using the Inclusion–Exclusion Principle, show that the student will have to take at least one class in
each area.
(a)
The three areas are the pigeonholes and the student must take ﬁve classes (pigeons). Hence, the student must
take at least two classes in one area.
(b)
Let each of the three areas of study represent three disjoint sets, A, B, and C. Since the sets are disjoint,
m(A∪B ∪C) = 5 = n(A)+n(B)+n(C). Since the student can take at most two classes in any area of study, the
sum of classes in any two sets, say A and B, must be less than or equal to four. Hence, 5 −[n(A) + n(B)] =
n(C) ≥1. Thus, the student must take at least one class in any area.

CHAP. 5]
TECHNIQUES OF COUNTING
103
Supplementary Problems
FACTORIAL NOTATION, BINOMIAL COEFFICIENTS
5.31.
Find: (a) 10!, 11!, 12!; (b) 60!. (Hint: Use Sterling’s approximation to n!.)
5.32.
Evaluate: (a) 16!/14!; (b) 14!/11!; (c) 8!/10!; (d) 10!/13!.
5.33.
Simplify: (a) (n + 1)!
n!
; (b)
n!
(n −2)!; (c) (n −1)!
(n + 2)!; (d) (n −r + 1)!
(n −r −1)!.
5.34.
Find: (a)
5
2

; (b)
7
3

; (c)
14
2

; (d)
6
4

; (e)
20
17

; (f)
18
15

.
5.35.
Show that: (a)
n
0

+
n
n

+
n
2

+
n
3

+ · · · +
n
n

= 2n
(b)
n
0

−
n
1

+
n
2

−
n
3

+ · · · +
n
n

= 0
5.36.
Given the following eighth row of Pascal’s triangle, ﬁnd: (a) the ninth row; (b) the tenth row.
1
8
28
56
70
56
28
8
1
5.37.
Evaluate the following multinomial coefﬁcients (deﬁned in Problem 5.29):
(a)

6
2, 3, 1

;
(b)

7
3, 2, 2, 0

; (c)

9
3, 5, 1

; (d)

8
4, 3, 2

.
COUNTING PRINCIPLES
5.38.
A store sells clothes for men. It has 3 kinds of jackets, 7 kinds of shirts, and 5 kinds of pants. Find the number of
ways a person can buy: (a) one of the items; (b) one of each of the three kinds of clothes.
5.39.
A class has 10 male students and 8 female students.
Find the number of ways the class can elect: (a) a class
representative; (b) 2 class representatives, one male and one female; (c) a class president and vicepresident.
5.40.
Suppose a code consists of ﬁve characters, two letters followed by three digits. Find the number of: (a) codes;
(b) codes with distinct letter; (c) codes with the same letters.
PERMUTATIONS
5.41.
Find the number of automobile license plates where: (a) Each plate contains 2 different letters followed by 3 different
digits. (b) The ﬁrst digit cannot be 0.
5.42.
Find the number m of ways a judge can award ﬁrst, second, and third places in a contest with 18 contestants.
5.43.
Find the number of ways 5 large books, 4 medium-size books, and 3 small books can be placed on a shelf where:
(a) there are no restrictions; (b) all books of the same size are together.
5.44.
A debating team consists of 3 boys and 3 girls. Find the number of ways they can sit in a row where:
(a) there are no restrictions; (b) the boys and girls are each to sit together; (c) just the girls are to sit together.
5.45.
Find the number of ways 5 people can sit in a row where: (a) there are no restrictions; (b) two of the people insist on
sitting next to each other.
5.46.
Repeat Problem 5.45 if they sit around a circular table.
5.47.
Consider all positive integers with three different digits. (Note that zero cannot be the ﬁrst digit.) Find the number of
them which are: (a) greater than 700; (b) odd; (c) divisible by 5.
5.48.
Suppose repetitions are not permitted. (a) Find the number of three-digit numbers that can be formed from the six
digits 2, 3, 5, 6, 7, and 9. (b) How many of them are less than 400? (c) How many of them are even?
5.49.
Find the number m of ways in which 6 people can ride a toboggan if one of 3 of them must drive.
5.50.
Find n if:
(a) P(n, 4) = 42P (n, 2);
(b) 2P (n, 2) + 50 = P(2n, 2).

104
TECHNIQUES OF COUNTING
[CHAP. 5
PERMUTATIONS WITH REPETITIONS, ORDERED SAMPLES
5.51.
Find the number of permutations that can be formed from all the letters of each word: (a) QUEUE; (b) COMMITTEE;
(c) PROPOSITION; (d) BASEBALL.
5.52.
Suppose we are given 4 identical red ﬂags, 2 identical blue ﬂags, and 3 identical green ﬂags. Find the number m of
different signals that can be formed by hanging the 9 ﬂags in a vertical line.
5.53.
A box contains 12 lightbulbs. Find the number n of ordered samples of size 3:
(a) with replacement; (b) without replacement.
5.54.
A class contains l0 students. Find the number n of ordered samples of size 4:
(a) with replacement; (b) without replacement.
COMBINATIONS
5.55.
A restaurant has 6 different desserts. Find the number of ways a customer can choose:
(a) 1 dessert; (b) 2 of the desserts; (c) 3 of the desserts.
5.56.
A class contains 9 men and 3 women. Find the number of ways a teacher can select a committee of 4 from the class
where there is:
(a) no restrictions;
(b) 2 men and 2 women;
(c) exactly one woman;
(d) at least one woman.
5.57.
A woman has 11 close friends. Find the number of ways she can invite 5 of them to dinner where:
(a) There are no restrictions.
(b) Two of the friends are married to each other and will not attend separately.
(c) Two of the friends are not speaking with each other and will not attend together.
5.58.
Aclass contains 8 men and 6 women and there is one married couple in the class. Find the number m of ways a teacher
can select a committee of 4 from the class where the husband or wife but not both can be on the committee.
5.59.
A box has 6 blue socks and 4 white socks. Find the number of ways two socks can be drawn from the box where:
(a) There are no restrictions. (b) They are different colors. (c) They are the same color.
5.60.
A women student is to answer 10 out of 13 questions. Find the number of her choices where she must answer:
(a) the ﬁrst two questions;
(c) exactly 3 out of the ﬁrst 5 questions;
(b) the ﬁrst or second question but not both;
(d) at least 3 of the ﬁrst 5 questions.
INCLUSION–EXCLUSION PRINCIPLE
5.61.
Suppose 32 students are in an art class A and 24 students are in a biology class B, and suppose 10 students are in both
classes. Find the number of students who are:
(a) in class A or in class B; (b) only in class A; (c) only in class B.
5.62.
A survey of 80 car owners shows that 24 own a foreign-made car and 60 own a domestic-made car. Find the number
of them who own:
(a) both a foreign made car and a domestic made car;
(b) only a foreign made car;
(c) only a domestic made car.
5.63.
Consider all integers from 1 up to and including 100. Find the number of them that are:
(a) odd or the square of an integer; (b) even or the cube of an integer.
5.64.
In a class of 30 students, 10 got A on the ﬁrst test, 9 got A on a second test, and 15 did not get an A on either test.
Find: the number of students who got:
(a) an A on both tests;
(b) an A on the ﬁrst test but not the second;
(c) an A on the second test but not the ﬁrst.
5.65.
Consider all integers from 1 up to and including 300. Find the number of them that are divisible by:
(a) at least one of 3, 5, 7;
(c) by 5, but by neither 3 nor 7;
(b) 3 and 5 but not by 7;
(d) by none of the numbers 3, 5, 7.

CHAP. 5]
TECHNIQUES OF COUNTING
105
5.66.
In a certain school, French (F), Spanish (S), and German (G) are the only foreign languages taught. Among 80 students:
(i)
20 study F,
25 study S,
15 study G.
(ii)
8 study F and S,
6 study S and G,
5 study F and G.
(iii)
2 study all three languages.
Find the number of the 80 students who are studying:
(a) none of the languages;
(c) only one language;
(e) exactly two of the languages.
(b) only French;
(d) only Spanish and German;
5.67.
Find the number m of elements in the union of sets A, B, C, D where:
(i) A, B, C, D have 50, 60, 70, 80 elements, respectively.
(ii) Each pair of sets has 20 elements in common.
(iii) Each three of the sets has 10 elements in common.
(iv) All four of the sets have 5 elements in common.
PIGEONHOLE PRINCIPLE
5.68.
Find the minimum number of students needed to guarantee that 4 of them were born: (a) on the same day of the week;
(b) in the same month.
5.69.
Find the minimum number of students needed to guarantee that 3 of them:
(a) have last names which begin with the same ﬁrst letter;
(b) were born on the same day of a month (with 31 days).
5.70.
Consider a tournament with n players where each player plays against every other player. Suppose each player wins
at least once. Show that at least 2 of the players have the same number of wins.
5.71.
Suppose 5 points are chosen at random in the interior of an equilateral triangle T where each side has length two
inches. Show that the distance between two of the points must be less than one inch.
5.72.
Consider any set X = {x1, x2, . . . , x7} of seven distinct integers. Show that there exist x, y ∈X such that x + y or
x −y is divisible by 10.
MISCELLANEOUS PROBLEMS
5.73.
Find the number m of ways 10 students can be divided into three teams where one team has 4 students and the other
teams have 3 students.
5.74.
Assuming a cell can be empty, ﬁnd the number n of ways that a set with 3 elements can be partitioned into:
(a) 3 ordered cells; (b) 3 unordered cells.
5.75.
Assuming a cell can be empty, ﬁnd the number n of ways that a set with 4 elements can be partitioned into:
(a) 3 ordered cells; (b) 3 unordered cells.
5.76.
The English alphabet has 26 letters of which 5 are vowels. Consider only 5-letter “words” consisting of 3 different
consonants and 2 different vowels. Find the number of such words which:
(a) have no restrictions;
(c) contain the letters B and C;
(b) contain the letter B;
(d) begin with B and contain the letter C.
5.77.
Teams A and B play in the World Series of baseball, where the team that ﬁrst wins four games wins the series. Suppose
A wins the ﬁrst game, and that the team that wins the second game also wins the fourth game.
(a)
Find and list the number n of ways the series can occur.
(b)
Find the number of ways that B wins the series.
(c)
Find the number of ways the series lasts seven games.
5.78.
Find the number of ways a coin can be tossed:
(a)
6 times so that there is exactly 3 heads and no two heads occur in a row.
(b)
2n times so that there is exactly n heads and no two heads occur in a row.
5.79.
Find the number of ways 3 elements a, b, c, can be assigned to 3 cells, so exactly 1 cell is empty.
5.80.
Find the number of ways n distinct elements can be assigned to n cells so exactly 1 cell is empty.

106
TECHNIQUES OF COUNTING
[CHAP. 5
Answers to Supplementary Problems
5.31.
(a) 3 628 800; 39 916 800; 479 001 600;
(b) log(60!) = 81.92, so 60! = 6.59 × 1081.
5.32.
(a) 240; (b) 2 184; (c) 1/90; (d) 1/1716.
5.33.
(a) n + 1; (b) n(n −1); (c) 1/[n(n + 1)(n + 2);
(d) (n −r)(n −r + 1).
5.34.
(a) 10; (b) 35; (c) 91; (d) 15; (e) 1140; (f) 816.
5.35.
Hints: (a) Expand (1 + 1)n; (b) Expand (1 −1)n.
5.36.
(a) 1, 9, 36, 84, 126, 126, 84, 36, 9, 1;
(b) 1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1.
5.37.
(a) 60; (b) 210; (c) 504; (d) not deﬁned.
5.38.
(a) 15; (b) 105.
5.39.
(a)18; (b) 80; (c) 306.
5.40.
(a) 262 · 103; (b) 26 · 25 · 103; (b); (c) 26 · 103.
5.41.
(a) 26 · 25 · 10 · 9 · 8 = 468 000; (b) 26 · 25 · 9 · 9 · 8 =
421 200.
5.42.
m = 18 · 17 · 16 = 4896.
5.43.
(a) 12!; (b) 3!5!4!3! = 103 680.
5.44.
(a) 6! = 720; (b) 2 · 3! · 3!· = 72; (c) 4 · 3! · 3! = 144.
5.45.
(a) 120; (b) 48.
5.46.
(a) 24; (b) 12.
5.47.
(a) 3 · 9 · 8; (b) 9 · 8 · 5; (c) 9 · 8 · 7/2; (d) 9 · 8 · 7/5.
5.48.
(a) P (6, 3) = 120; (b) 2 · 5 · 4 = 40; (c) 2 · 5 · 4 = 40.
5.49.
m = 360.
5.50.
(a) 9; (b) 5.
5.51.
(a) 30; (b) 9!/[2!2!2!] = 45 360; (c) 11!/[2!3!2!] =
1 663 200; (d) 8!/[2!2!2!] = 5040.
5.52.
m = 9!/[4!2!3!] = 1260.
5.53.
(a) 123 = 1 728; (b) P(12, 3) = 1320.
5.54.
(a) 104 = 10 000; (b) P(10, 4) = 5040.
5.55.
(a) 6; (b) 15; (c) 20.
5.56.
(a) C(12, 4); (b) C(9, 2) · C(3, 2) = 108;
(c) C(9, 3) · 3 = 252; (d) 9 + 108 + 252 = 369 or
C(12, 4) −C(9, 4) = 369.
5.57.
(a) C(11, 5) = 462; (b) 126 + 84 = 210;
(c) C(9, 5) + 2C(9, 4) = 378.
5.58.
m = C(12, 4) + 2C(12, 3) = 935.
5.59.
(a) C(10, 2) = 45; (b) 6 · 4 = 24; (c) C(6, 2) +
C(4, 2) = 21 or 45 −24 = 21.
5.60.
(a) 165; (b) 110; (c) 80; (d) 276.
5.61.
(a) 46; (b) 22; (c) 14.
5.62.
(a) 4; (b) 20; (c) 56.
5.63.
(a) 55; (b) 52.
5.64.
(a) 4; (b) 6; (c) 5.
5.65.
(a) 100 + 60 + 42 −20 −14 −8 + 2 = 162;
(b) 20 −2 = 18; (c) 60 −20 −8 + 2 = 34;
(d) 300 −162 = 138.
5.66.
(a) 37; (b) 9; (c) 28; (d) 4; (e) 13.
5.67.
m = 175
5.68.
(a) 22; (b) 37.
5.69.
(a) 53; (b) 63.
5.70.
Each player will win anywhere from 1 up to n −1
games (pigeonholes). There are n players (pigeons).
5.71.
Draw three lines between the midpoints of the sides
of T. This partitions T into 4 equilateral triangles
(pigeonholes) where each side has length 1. Two of
the 5 points (pigeons) must lie in one of the triangles.
5.72.
Let ribe the remainder when xi is divisible by 10.
Consider the six pigeonholes: H1 = {xi | ri = 0},
H2
= {xi | ri
= 5}, H3
= {xi | ri
= 1 or 9},
H4 = {xi | ri = 2 or 8}, H5 = {xi | ri = 3 or 7},
H6 = {xi | ri = 4 or 6}. Then some x and y belong
to some Hk.
5.73.
m = C(10, 4) · C(6, 3) = 420
5.74.
(a) n = 33 = 27 (Each element can be placed in any
of the three cells.) (b)The number of elements in three
cells can be distributed as follows: [3, 0, 0], [2,1,0],
or [1,1,1]. Thus n = 1 + 3 + 1 = 5.
5.75.
(a)
n = 34 = 81 (Each element can be placed
in any of the three cells.)
(b) The number of el-
ements in three cells can be distributed as follows:
[4, 0, 0], [3, 1, 0], [2, 2, 0], or [2, 1, 1].
Thus
n = 1 + 4 + 3 + 6 = 14.
5.76.
(a) C(21, 3)·C(5, 2)·5!; (b) C(20, 2)·C(5, 2)·5!;
(c) 19 · C(5, 2) · 5!; (d) 19 · C(5, 2) · 4!.
5.77.
Draw tree diagram T as in Fig. 5-4. Note T begins at
A, the winner of the ﬁrst game, and there is only one
choice in the fourth game, the winner of the second
game.
(a) n = 15 as listed below; (b) 6; (c) 8:
AAAA, AABAA, AABABA, AABABBA,
AABABBB, ABABAA, ABABABA, ABABABB,
ABABBAA, ABABBAB, ABABBB, ABBBAAA,
ABBBAAB, ABBBAB, ABBBB.
5.78.
(a) 4, HTHTHT, HTTHTH, HTHTTH, THTHTH;
(b) n + 1.
5.79.
18.
5.80.
n!C(n, 2).
Fig. 5-4

CHAPTER 6
Advanced Counting
Techniques, Recursion
6.1
INTRODUCTION
Here we consider more sophisticated counting techniques and problems. This includes problems involving
combinations with repetition, ordered and unordered partitions, and the Inclusion–Exclusion Principle and the
Pigeonhole Principle.
We also discuss recursion in this chapter.
6.2
COMBINATIONS WITH REPETITIONS
Consider the following problem. A bakery makes only M = 4 kinds of cookies: apple (a), banana (b),
carrot (c), dates (d). Find the number of ways a person can buy r = 8 of the cookies.
Observe that order does not count. This is an example of combinations with repetitions. In particular, each
combination can be listed with the a’s ﬁrst, then the b’s, then the c’s, and ﬁnally the d’s. Four such combinations
follow:
r1 = aa, bb, cc, dd;
r2 = aaa, c, ddd;
r3 = bbbb, c, ddd;
r4 = aaaaa, ddd.
Counting the number m of such combinations may not be easy.
Suppose we want to code the above combinations using only two symbols, say 0 and 1. This can be done by
letting 0 denote a cookie, and letting 1 denote a change from one kind of cookie to another. Then each combination
will require r = 8 zeros, one for each cookie, and M −1 = 3 ones, where the ﬁrst one denotes the change from
a to b, the second one from b to c, and the third one from c to d. Thus the above four combinations will be coded
as follows:
r1 = 00100100100,
r2 = 00001101000,
r3 = 10000101000,
r4 = 00000111000.
Counting the number m of these “codewords” is easy. Each codeword contains R + M −1 = 11 digits where
r = 8 are 0’s and hence M −1 = 3 are 1’s. Accordingly,
M = C(11, 8) = C(11, 3) = 11 · 10 · 9
3 · 2 · 1
= 165
A similar argument gives us the following theorem.
107
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

108
ADVANCED COUNTING TECHNIQUES, RECURSION
[CHAP. 6
Theorem 6.1: Suppose there are M kinds of objects. Then the number of combinations of r such objects is
C(r + M −1, r) = C(r + M −1, M −1).
EXAMPLE 6.1 Find the number m of nonnegative integer solutions of x + y + z = 18.
We can view each solution, say x = 3, y = 7, z = 8, as a combination of r = 18 objects consisting of 3 a’s,
7 b’s, and 8 c’s, where there are M = 3 kinds of objects, a’s, b’s, and c’s. By Theorem 6.1,
m = C(r + M −1, M −1) = C(20, 2) = 190.
6.3
ORDERED AND UNORDERED PARTITIONS
Suppose a set has 7 elements. We want to ﬁnd the number m of ordered partitions of S into three cells, say
[A1, A2, A3], so they contain 2, 3, and 2 elements, respectively.
Since S has 7 elements, there are C(7, 2) ways of choosing the ﬁrst two elements for A1. Following this, there
are C(5, 3) ways of choosing the 3 elements for A2. Lastly, there are C(2, 2) ways of choosing the 2 elements for
A3 (or, the last 2 elements form the cell A3). Thus:
m = C(7, 2)C(5, 3)C(2, 2) =
7
2
5
3
2
2

= 7 · 6
2 · 1 · 5 · 4 · 3
3 · 2 · 1 · 2 · 1
2 · 1 = 210
Observe that
m =
7
2
5
3
2
2

= 7!
2!5! · 5!
3!2! · 2!
2!0! =
7!
2!3!2!
since each numerator after the ﬁrst is cancelled by a term in the denominator of the previous factor.
The above discussion can be shown to be true in general. Namely:
Theorem 6.2: The number m of ordered partitions of a set S with n elements into r cells [A1, A2, . . . , Ar] where,
for each i, n(Ai) = ni, follows:
m =
n!
n1!n2! . . . nr!
Unordered Partitions
Frequently, we want to partition a set S into cells [A1, A2, . . . , Ar] where the cells are now unordered. The
number m of such unordered partitions is obtained from the number m′ of ordered partitions by dividing m′ by
each k! where k of the cells have the same number of elements.
EXAMPLE 6.2 Find the number m of ways to partition 10 students into four teams [A1, A2, A3, A4] so that
two teams contain 3 students and two teams contain 2 students.
By Theorem 6.2, there are m′ = 10!/(3!3!2!2!) = 25 200 such ordered partitions.
Since the teams form an unordered partition, we divide m′ by 2! because of the two cells with 3 elements
each and 2! because of the two cells with 2 elements each.
Thus m = 25 200/(2!2!) = 6300.
6.4
INCLUSION–EXCLUSION PRINCIPLE REVISITED
Let A1, A2, . . . , Ar be subsets of a universal set U. Suppose we let sk denote the sum of the cardinalities of
all possible k-tuple intersections of the sets, that is, the sum of all of the cardinalities
n(Ai1 ∩Ai2 ∩· · · ∩Aik)

CHAP. 6]
ADVANCED COUNTING TECHNIQUES, RECURSION
109
For example,
s1

i
n(Ai),
s2 =

i<j
n(Ai ∩Aj),
s3 =

i1<i2<i3
n(Ai1 ∩Ai2 ∩Ai3)
The Inclusion–Exclusion Principle, which appears in Section 5.7, gave a formula for the number of elements in
the union of the sets. Speciﬁcally, (Theorem 5.9) we have
n(A1 ∪A2 ∪· · · ∪Ar) = s1 −s2 + s3 −· · · + (−1)r−1sr
On the other hand, using DeMorgan’s law,
n(AC
1 ∩AC
2 ∩. . . ∩AC
r ) = n([A1 ∪A2 ∪. . . ∪Ar]C) = |U| −n(A1 ∪A2 ∪. . . ∪Ar)
Accordingly, we obtain an alternate form for Theorem 5.9:
Theorem (Inclusion–Exclusion Principle) 6.3: Let A1, A2, . . . , Ar be subsets of a universal set U. Then the
number m of elements which do not appear in any of the subsets A1, A2, . . . , Ar of U is:
m = n(AC
1 ∩AC
2 ∩. . . ∩AC
r ) = |U| −s1 + s2 −s3 + · · · + (−1)rsr
EXAMPLE 6.3 Let U be the set of positive integers not exceeding 1000. Then |U| = 1000. Find |S| where S is
the set of such integers which are not divisible by 3, 5, or 7.
Let A be the subset of integers which are divisible by 3, B which are divisible by 5, and C which are divisible
by 7. Then S = AC ∩BC ∩CC since each element of S is not divisible by 3, 5 or 7. By integer division,
|A| = 1000/3 = 33,
|B| = 1000/5 = 200,
|C| = 1000/7 = 142,
|A ∩B| = 1000/15 = 66,
|A ∩C| = 1000/21 = 47,
|B ∩C| = 1000/35 = 28,
|A ∩B ∩C| = 1000/105 = 9
Thus, by the Inclusion–Exclusion Principle Theorem 6.3,
|S| = 1000 −(333 + 200 + 142) + (66 + 47 + 28) −9 = 1000 −675 + 141 −9 = 457
Number of Onto Functions
Let A and B be sets such that |A| = 6 and |B| = 4. We want to ﬁnd the number of surjective (onto) functions
from A onto B.
Let b1, b2, b3, b4 be the four elements in B. Let U be the set of all functions from A into B. Furthermore, let
F1 be the set of functions which do not send any element of A into b1 that is, b1 is not in the range of any function
in F1. Similarly, let F2, F3, and F4 be the sets of functions which do not send any element of A into b2, b3, and
b4, respectively.
We are looking for the number of functions in S = F C
1 ∩F C
2 ∩F C
3 ∩F C
4 , that is, those functions which do send
at least one element of A into b1, at least one element of A into b2, and so on. We will use the Inclusion–Exclusion
Principle Theorem 6.3 as follows.
(i) For each function in U, there are 4 choices for each of the 6 elements in A; hence |U| = 46 = 4096
(ii) There are C(4, 1) = 4 functions Fi. In each case, there are 3 choices for each of the 6 elements in A,
hence |Fi| = 36 = 729.
(iii) There are C(4, 2) = 6 pairs Fi ∩Fj. In each case, there are 2 choices for each of the 6 elements in A,
hence |Fi ∩Fj| = 26 = 64.
(iv) There are C(4, 3) = 4 triplets Fi ∩Fj ∩Fk. In each case, there is only one choice for each of the
6 elements in A. Hence |Fi ∩Fj ∩Fk| = 16 = 1.

110
ADVANCED COUNTING TECHNIQUES, RECURSION
[CHAP. 6
(v) F1 ∩F2 ∩F3 ∩F4 has no element, that is, is empty. Hence |F1 ∩F2 ∩F3 ∩F4| = 0. By the Inclusion–
Exclusion Principle Theorem 6.3,
|S| = |F C
1 ∩F C
2 ∩F C
3 ∩F C
4 | = 46 −C(4, 1)36 + C(4, 2)26 −C(4, 3)17
= 4096 −2916 + 384 −1 = 795
The above result is true in general. Namely:
Theorem 6.4: Suppose |A| = m and |B| = n where m ≥n. Then the number N of surjective (onto) functions
from A onto B is:
N = nm −C(n, 1)(n −1)m + C(n, 2)(n −2)m −· · · + (−1)n−1C(n, n −1)1m
Derangements
A derangement is a permutation of objects where each object is not in its original position. For example,
453162 is not a derangement of 123456 since 3 is in its correct position, but 264531 is a derangement of 123456.
(Alternately, a permutation σ: X →X is a derangement if σ(i) ̸= i for every i ∈X = {1, 2, . . . , n}.)
Let Dn denote the number of derangements of n objects. For example, 231 and 312 are the only derangements
of 123. Hence D3 = 2. The following theorem, proved in Problem 6.6, applies.
Theorem 6.5: Dn = n![1 −1
1! + 1
2! −1
3! + · · · + (−1)n 1
n!]
The probability (Chapter 7) that a derangement of n objects occurs equals Dn divided by n!, the number of
permutations of the n objects. Thus Theorem 6.5 yields:
Corollary 6.6: Let p be the probability of a derangement of n objects. Then
p = 1 −1
1! + 1
2! −1
3! + · · · + (−1)n 1
n!
EXAMPLE 6.4 (Hat Check Problem)
Suppose n = 5 people check in their hats at a restaurant and they are
given back their hats at random. Find the probability p that no person receives his/her own hat.
This is an example of a derangement with n = 5. By Corollary 6.6,
p = 1 −1 + 1/2 −1/6 + 1/24 −1/120 = 44/120 = 11/30 ≈0.367
Note that the signs alternate and the terms get very, very small in Corollary 6.6. Figure 6-1 gives the values
of p for the ﬁrst few values of n. Note that, for n > 4 , p is very close to the following value (where e = 2.718):
e−1 = 1 −1
1! + 1
2! −1
3! + · · · + (−1)n 1
n! + · · · ≈0.368
Fig. 6-1
6.5
PIGEONHOLE PRINCIPLE REVISITED
The Pigeonhole Principle (with its generalization) is stated with simple examples in Section 5.6. Here we
give examples of more sophisticated applications of this principle.

CHAP. 6]
ADVANCED COUNTING TECHNIQUES, RECURSION
111
EXAMPLE 6.5 Consider six people, where any two of them are either friends or strangers. Show that there are
three of them which are either mutual friends or mutual strangers.
Let A be one of the people. Let X consist of those which are friends of A, and Y consist of those which
are strangers of A. By the Pigeonhole Principle, either X or Y has at least three people. Suppose X has three
people. If two of them are friends, then the two with A are three mutual friends. If not, then X has three mutual
strangers. Alternately, suppose Y has three people. If two of them are strangers, then the two with A are three
mutual strangers. If not, then X has three mutual friends.
EXAMPLE 6.6 Consider ﬁve lattice points (x1, y1), . . . , (x5, y5) in the plane, that is, points with integer coor-
dinates. Show that the midpoint of one pair of the points is also a lattice point.
The midpoint of points P(a, b) and Q(c, d) is ([a + c]/2, [b + d]/2). Note that (r + s)/2 is an integer if r and
s are integers with the same parity, that is, both are odd or both are even. There are four pairs of parities: (odd,
odd), (odd, even), (even, odd), and (even, even). There are ﬁve points. By the Pigeonhole Principle, two of the
points have the same pair of parities. The midpoint of these two points has integer coordinates.
An important application of the Pigeonhole Principle follows.
Theorem 6.7: Every sequence of distinct n2 + 1 real numbers contains a subsequence of length n + 1 which is
strictly increasing or strictly decreasing.
For example, consider the following sequence of 10 = 32 + 1 numbers (where n = 3): 2, 1, 8, 6, 7, 5, 9, 4,
12, 3. There are many subsequences of length n + 1 = 4 which are strictly increasing or strictly decreasing; for
example,
2, 6, 9, 12;
1, 5, 9, 12;
8, 6, 5, 4;
7, 5, 4, 3.
On the other hand, the following sequence of 9 = 32 numbers has no subsequence of length n + 1 = 4 which is
strictly increasing or strictly decreasing:
3,
2,
1,
6,
5,
4,
9,
8,
7.
The proof of Theorem 6.7 appears in Problem 6.10.
6.6
RECURRENCE RELATIONS
Previously, we discussed recursively deﬁned functions such as
(a) Factorial function,
(b) Fibonacci sequence,
(c) Ackermann function.
Here we discuss certain kinds of recursively deﬁned sequences {an} and their solution. We note that a sequence
is simply a function whose domain is
N = {1, 2, 3, . . .}
or
N0 = N ∪{0} = {0, 1, 2, 3, . . .]
We begin with some examples.
EXAMPLE 6.7 Consider the following sequence which begins with the number 3 and for which each of the
following terms is found by multiplying the previous term by 2:
3,
6,
12,
24,
48,
. . .
It can be deﬁned recursively by:
a0 = 3,
ak = 2ak−1 for k ≥1
or
a0 = 3,
ak+1 = 2ak
for k ≥0
The second deﬁnition may be obtained from the ﬁrst by setting k = k + 1. Clearly, the formula an = 3(2n) gives
us the nth term of the sequence without calculating any previous term.

112
ADVANCED COUNTING TECHNIQUES, RECURSION
[CHAP. 6
The following remarks about the above example are in order.
(1) The equation ak = 2ak−1 or, equivalently, ak+1 = 2ak, where one term of the sequence is deﬁned in
terms of previous terms of the sequence, is called a recurrence relation.
(2) The equation a0 = 3, which gives a speciﬁc value to one of the terms, is called an initial condition.
(3) The function an = 3(2n), which gives a formula for an as a function of n, not of previous terms, is called
a solution of the recurrence relation.
(4) There may be many sequences which satisfy a given recurrence relation. For example, each of the
following is a solution of the recurrence relation ak = 2ak−1.
1, 2, 4, 8, 16, . . .
and
7, 14, 28, 56, 112, . . .
All such solutions form the so-called general solution of the recurrence relation.
(5) On the other hand, there may be only a unique solution to a recurrence relation which also satisﬁes given
initial conditions. For example, the initial condition a0 = 3 uniquely yields the solution 3, 6, 12, 24, . . .
of the recurrence relation ak = 2ak−1.
This chapter shows how to solve certain recurrence relations. First we give two important sequences the reader
may have previously studied.
EXAMPLE 6.8
(a) Arithmetic Progression
An arithmetic progression is a sequence of the form
a, a + d, a + 2d, a + 3d, . . .
That is, the sequence begins with the number a and each successive term is obtained from the previous
term by adding d (the common difference between any two terms). For example:
(i) a = 5, d = 3:
5, 8, 9, 11, . . .
(ii) a = 2, d = 5:
2, 7, 12, 17, . . .
(iii) a = 1, d = 0:
1, 1, 1, 1, 1, . . .
We note that the general arithmetic progression may be deﬁned recursively by:
a1 = a
and
ak+1 = ak + d
for k ≥1
where the solution is an = a + (n −1)d.
(b) Geometric Progression
A geometric progression is a sequence of the form
a, ar, ar2, ar3, . . .
That is, the sequence begins with the number a and each successive term is obtained from the previous term
by multiplying by r (the common ratio between any two terms) for example:
(i) a = 1, r = 3:
1, 3, 9, 27, 81, . . .
(ii) a = 5, r = 2:
5, 10, 20, 40, . . .
(iii) a = 1, r = 1
2:
1, 1
2, 1
4, 1
8, . . .
We note that the general geometric progression may be deﬁned recursively by:
a1 = a
and
ak+1 = rak
for k ≥1
where the solution is an+1 = arn.

CHAP. 6]
ADVANCED COUNTING TECHNIQUES, RECURSION
113
6.7
LINEAR RECURRENCE RELATIONS WITH CONSTANT COEFFICIENTS
A recurrence relation of order k is a function of the form
an = (an−1,an−2, . . . , an−k, n)
that is, where the nth term an of a sequence is a function of the preceding k terms an−1, an−2, . . . , an−k (and
possibly n). In particular, a linear kth-order recurrence relation with constant coefﬁcients is a recurrence relation
of the form
an = C1an−1 + C2an−2 + · · · + Ckan−k + f (n)
where C1, C2, . . . , Ck are constants with Ck ̸= 0, and f (n) is a function of n. The meanings of the names linear
and constant coefﬁcients follow:
Linear: There are no powers or products of the aj’s.
Constant coefﬁcients: The C1C2, . . . ,Ck are constants (do not depend on n).
If f (n) = 0, then the relation is also said to be homogeneous.
Clearly, we can uniquely solve for an if we know the values of an−1, an−2, . . . , an−k. Accordingly, by
mathematical induction, there is a unique sequence satisfying the recurrence relation if we are given initial values
for the ﬁrst k elements of the sequence.
EXAMPLE 6.9 Consider each of the following recurrence relations.
(a) an = 5an−1 −4an−2 + n2
This is a second-order recurrence relation with constant coefﬁcients. It is nonhomogeneous because of the n2.
Suppose we are given the initial conditions a1 = 1, a2 = 2. Then we can ﬁnd sequentially the next few
elements of the sequence:
a3 = 5(2) −4(1) + 32 = 15,
a4 = 5(15) −4(2) + 42 = 83
(b) an = 2an−1an−2 + n2
The product an−1an−2 means the recurrence relation is not linear. Given initial conditions a1 = 1, a2 = 2,
we can still ﬁnd the next few elements of the sequence:
a3 = 2(2)(1) + 32 = 13,
a4 = 2(13)(2) + 42 = 68
(c) an = nan−1 + 3an−2
This is a homogeneous linear second-order recurrence relation but it does not have constant coefﬁcients
because the coefﬁcient of an−1 is n, not a constant. Given initial conditions a1 = 1, a2 = 2, the next few
elements of the sequence follow:
a3 = 3(2) + 3(1) = 9,
a4 = 4(9) + 3(2) = 42
(d) an = 2an−1 + 5an−2 −6an−3
This is a homogeneous linear third-order recurrence relation with constant coefﬁcients. Thus we need three,
not two, initial conditions to yield a unique solution of the recurrence relation. Suppose we are given the
initial conditions a1 = 1, a2 = 2, a3 = 1. Then, the next few elements of the sequence follow:
a4 = 2(1) + 5(2) −6(1) = 6,
a5 = 2(2) + 5(1) −6(6) = −37
a6 = 2(1) + 5(6) −6(−37) = 254
This chapter will investigate the solutions of homogeneous linear recurrence relations with constant coefﬁ-
cients. The theory of nonhomogeneous recurrence relations and recurrence relations without constant coefﬁcients
lies beyond the scope of this text.
For computational convenience, most of our sequences will begin with a rather than a. The theory is not
affected at all.

114
ADVANCED COUNTING TECHNIQUES, RECURSION
[CHAP. 6
6.8
SOLVING SECOND-ORDER HOMOGENEOUS LINEAR RECURRENCE RELATIONS
Consider a homogeneous second-order recurrence relation with constant coefﬁcients which has the form
an = san−1 + tan−2
or
an −san−1 −tan−2 = 0
where s and t are constants with t ̸= 0. We associate the following quadratic polynomial with the above recurrence
relation:
(x) = x2 −sx −t
This polynomial (x) is called the characteristic polynomial of the recurrence relation, and the roots of (x)
are called its characteristic roots.
Theorem 6.8: Suppose the characteristic polynomial (x) = x2 −sx −t of the recurrence relation
an = san−1 + tan−2
has distinct roots r1 and r2. Then the general solution of the recurrence relation follows, where
c1 and c2 are arbitrary constants:
an = c1rn
1 + c2rn
2
We emphasize that the constants c1 and c2 may be uniquely computed using initial conditions. We note that
the theorem is true even when the roots are not real. Such cases lie beyond the scope of this text.
EXAMPLE 6.10 Consider the following homogeneous recurrence relation:
an = 2an−1 + 3an−2
The general solution is obtained by ﬁrst ﬁnding its characteristic polynomial (x) and its roots r1 and r2:
(x) = x2 −2x −3 = (x −3)(x + 1);
roots r1 = 3, r2 = −1
Since the roots are distinct, we can use Theorem 6.8 to obtain the general solution:
an = c13n + c2(−1)n
Thus any values for c1 and c2 will give a solution to the recurrence relation.
Suppose we are also given the initial conditions a0 = 1, a1 = 2. Using the recurrence relation we can
compute the next few terms of the sequence:
1,
2,
8,
28,
100,
356,
1268,
3516,
. . .
The unique solution is obtained by ﬁnding c1 and c2 using the initial conditions. Speciﬁcally:
For n = 0 and a0 = 1, we get:
c130 + c2(−1)0 = 1
or
c1 + c2 = 1
For n = 1 and a1 = 2, we get:
c131 + c2(−1)1 = 2
or
3c1 −c2 = 2
Solving the system of the two equations in the unknowns c1 and c2 yields:
c1 = 3
4
and
c2 = 1
4
Thus the following is the unique solution of the given recurrence relation with the given initial conditions a0 = 1,
a = 2:
an = 3
43n + 1
4(−1)n = 3n+1 + (−1)n
4

CHAP. 6]
ADVANCED COUNTING TECHNIQUES, RECURSION
115
EXAMPLE 6.11 Consider the celebrated Fibonacci sequence:
an = an−1 + an−2,
with
a0 = 0, a1 = 1
The ﬁrst 10 terms of the sequence follow:
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, . . .
Sometimes the Fibonacci sequence is deﬁned using the initial conditions a0 = 1, a1 = 1 or the initial conditions
a1 = 1, a2 = 2. We use a0 = 0, a1 = 1 for computational convenience. (All three initial conditions yield the
same sequence after the pair of terms 1, 2.)
Observe that the Fibonacci sequence is a homogeneous linear second-order recurrence relation, so it can be
solved using Theorem 6.8. Its characteristic polynomial follows:
(x) = x2 −x −1
Using the quadratic formula, we obtain the roots:
r1 = 1 +
√
5
2
,
r2 = 1 −
√
5
2
By Theorem 6.8, we obtain the general solution:
an = c1

1 +
√
5
2
 n
+ c2

1 −
√
5
2
 n
The initial conditions yield the following system of two linear equations in c1 and c2
For n = 0 and a0 = 0, we get:
0 = c1 + c2
For n = 1 and a1 = 1, we get:
1 = c1

1 +
√
5
2
 
+ c2

1 −
√
5
2
 
The solution of the system follows:
c1 =
1
√
5
, c2 = −1
√
5
Accordingly, the following is the solution of the Fibonacci recurrence relation:
an =
1
√
5

1 +
√
5
2
 n
−1
√
5

1 −
√
5
2
 n
One can show that the absolute value of the above second term for an is always less than 1/2. Thus an is also the
closest integer to the number
1
√
5

1 +
√
5
2
 n
≈(0.4472)(1.6180)n
Solution when Roots of the Characteristic Polynomial are Equal
Suppose the roots of the characteristic polynomial are not distinct. Then we have the following result.
Theorem 6.9: Suppose the characteristic polynomial (x) = x2 −sx −t of the recurrence relation
an = san−1 + tan−2
has only one root r0. Then the general solution of the recurrence relation follows, where c1 and
c2 are arbitrary constants:
an = c1rn
0 + c2nrn
0
The constants c1 and c2 may be uniquely computed using initial conditions.

116
ADVANCED COUNTING TECHNIQUES, RECURSION
[CHAP. 6
EXAMPLE 6.12 Consider the following homogeneous recurrence relation:
an = 6an−1 −9an−2
The characteristic polynomial (x) follows:
(x) = x2 −6x + 9 = (x −3)2
Thus (x) has only the one root r0 = 3. Now we use Theorem 6.9 to obtain the following general solution of
the recurrence relation:
an = c13n + c2n3n
Thus any values for c1 and c2 will give a solution to the recurrence relation.
Suppose we are also given the initial conditions a1 = 3, a2 = 27. Using the recurrence relation we can
compute the next few terms of the sequence:
3,
27,
135,
567,
2187,
8109,
. . .
The unique solution is obtained by ﬁnding c1 and c2 using the initial conditions. Speciﬁcally:
For n = 1 and a1 = 3,
we get:
c131 + c2(1)(3)1 = 3
or
3c1 + 3c2 = 3
For n = 2 and a2 = 27,
we get:
c132 + c2(2)(3)2 = 27
or
9c1 + 18c2 = 27
Solving the system of the two equations in the unknowns c1 and c2 yields:
c1 = −1
and
c2 = 2
Thus the following is the unique solution of the recurrence relation with the given initial conditions:
an = −3n + 2n3n = 3n(2n −1)
6.9
SOLVING GENERAL HOMOGENEOUS LINEAR RECURRENCE RELATIONS
Consider now a general linear homogeneous kth-order recurrence relation with constant coefﬁcients which
has the form
an = C1an−1 + C2an−2 + C3an−3 + · · · + Ckan−k =
k

i=1
Cian−1
(6.1)
where C1, C2, . . . , Ck are constants with Ck ̸= 0. The characteristic polynomial (x) of the recurrence relation
(6.1) follows:
(x) = xk −C1xk−1 −C2xk−2 −C3xk−3 −· · · −Ck = xk −
k

i=1
C1xk−1
The roots of (x) are called the characteristic roots of the recurrence relation.
The following remarks are in order.
Remark 1: If p(n) and q(n) are solutions of (6.1), then any linear combination
c1p(n) + c2q(n)
of p(n) and q(n) is also a solution. (This is not true if the recurrence relation is nonhomogeneous.)

CHAP. 6]
ADVANCED COUNTING TECHNIQUES, RECURSION
117
Remark 2: If r is a root of multiplicity m of the characteristic polynomial (x) of (6.1), then each of the
following
rn, nrn, n2rn, . . . , nn−1rn
is a solution of (6.1). Thus any linear combination
c1rn + c2nrn + c3n2rn + · · · + cmnm−1rn = (c1 + c2n + c3n2 + · · · + cmnm−1)rn
is also a solution.
EXAMPLE 6.13 Consider the following third-order homogeneous recurrence relation:
an = 11an−1 −39an−2 + 45an−3
The characteristic polynomial (x) of the recurrence relation follows:
(x) = x3 −11x2 + 39x −45 = (x −3)2(x −5)
Thus (x) has two roots, r1 = 3 of multiplicity 2 and r2 = 5 of multiplicity 1. Thus, by the above remarks, the
following is the general solution of the recurrence relation:
an = c1(3n) + c2n(3n) + c3(5n) = (c1 + c2n)(3n) + c3(5n)
Thus any values for c1, c2, c3 will give a solution to the recurrence relation.
Suppose we are also given the initial conditions a0 = 5, a1 = 11, a3 = 25. Using the recurrence relation we
can compute the next few terms of the sequence:
5,
11,
25,
71,
301,
1667,
. . .
The unique solution is obtained by ﬁnding c1, c2, c3 using the initial conditions. Speciﬁcally:
For n = 0 and a0 = 5,
we get:
c1 + c3 = 5
For n = 1 and a1 = 11,
we get:
3c1 + 3c2 + 5c3 = 11
For n = 2 and a2 = 25,
we get:
9c1 + 18c2 + 25c3 = 25
Solving the system of the three equations in the unknowns c1, c2, c3 yields:
c1 = 4,
c2 = −2,
c3 = 1
Thus the following is the unique solution of the recurrence relation with the given initial conditions:
an = (4 −2n)(3n) + 5n
Remark: Finding the roots of the characteristic polynomial (x) is an important step in solving recurrence
relations. Generally speaking, this may be difﬁcult when the degree of (x) is greater than 2. (Example B.16
indicates one way to ﬁnd the roots of some polynomials of degree 3 or more.)

118
ADVANCED COUNTING TECHNIQUES, RECURSION
[CHAP. 6
Solved Problems
ADVANCED COUNTING TECHNIQUES, INCLUSION–EXCLUSION
6.1. A bagel shop sells M = 5 kinds of bagels. Find the number m of ways a customer can buy: (a) 8 bagels;
(b) a dozen bagels.
Use m = C(r +M −1, r) = C(r +M −1, M −1), that is, Theorem 6.1, since this problem concerns combinations
with repetitions.
(a) Here r = 8, so m = C(8 + 4, 4) = C(12, 4) = 494.
(b) Here r = 12, so m = C(12 + 4, 4) = C(16, 4) = 1820.
6.2. Find the number m of nonnegative solutions to x +y +z = 18 with the conditions that x ≥3, y ≥2, z ≥1.
Let x′ = x −3, y′ = y −2 and z′ = z−1. Then m is also the number of nonnegative solutions to x′ +y′ +z′ = 12.
As in Example 6.1, this second problem concerns combinations with repetitions with M = 3 and r = 12. Thus
m = C(12 + 2, 2) = C(14, 2) = 91.
6.3. Let E be the equation x + y + z = 18. Find the number m of nonnegative solutions to E with the conditions
that x < 7, y < 8, z < 9.
Let S be the set of all nonnegative solutions of E. Let A be the set of solutions for which x ≥7, let B be the set of
solutions for which y ≥8, and let C be the set of solutions for which z ≥9. Then
m = |AC ∩BC ∩CC|
As in Problem 6.2, we obtain:
|A| = C(11 + 2, 2) = 78,
|A ∩B| = C(3 + 2, 2) = 10
|B| = C(10 + 2, 2) = 66,
|A ∩C| = C(2 + 2, 2) = 6
|C| = C(9 + 2, 2) = 55,
|B ∩C| = C(1 + 2, 2) = 3
Also, |S| = C(18 + 2, 2) = 190 and |A ∩B ∩C| = 0. By the Inclusion–Exclusion Principle,
m = 190 −(78 + 66 + 55) + (10 + 6 + 3) −0 = 10
6.4. There are 9 students in a class. Find the number m of ways: (a) the 9 students can take 3 different tests if
3 students are to take each test; (b) the 9 students can be partitioned into 3 teams A, B, C so that each team
contains 3 students,
(a) Method 1: We seek the number m of partitions of the 9 students into cells containing 3 students.
By Theorem 6.2, m = 9!/(3!3!3!) = 5040.
Method 2: There are C(9, 3) to choose three students to take the ﬁrst test; then there are C(6, 3)
ways to choose 3 students to take the second test; and the remaining students take the third test. Thus
m = C(9, 3)C(6, 3) = 5040.
(b) Each partition {A, B, C} of the students can be arranged in 3! = 6 ways as an ordered partition. By (a),
there are 5040 such ordered partitions. Hence m = 5040/6 = 840.
6.5. Find the number N of ways a company can assign 7 projects to 4 people so that each person gets at least
one project.
We want to ﬁnd the number N of onto functions from a set with m = 7 elements onto a set with n = 4 elements.
We use Theorem 6.4:
N = 42 −C(4, 1)(37) + C(4, 2)(27) −C(4, 3)(17)
= 47 −4(37) + 6(27) −4(17) = 16 384 −8748 + 768 −4 = 8400

CHAP. 6]
ADVANCED COUNTING TECHNIQUES, RECURSION
119
6.6 Prove Theorem 6.5: Dn = n![1 −1
1! + 1
2! −1
3! + · · · + (−1)n 1
n!]
Recall (Section 3.3) that Sn denotes the set of permutations on X = {1, 2, . . . ,n} and |Sn| = n!. For i = 1, . . . , n,
let Fi denote all permutations in Sn which “ﬁx i,” that is, Fi = {σ ∈Sn | σ(i) = i}. Then, for distinct subscripts,
|Fr| = (n −1)!,
|Fi ∩Fi| = (n −2)!, . . . |Fi1 ∩Fi2 ∩. . . ∩Fir | = (n −r)!
Let Y denote the set of all derangements in Sn. Then
Dn = |Y| = |F C
1 ∩F C
2 ∩· · · ∩F C
n |
By the Inclusion–Exclusion principle,
Dn = |Sn| −s1 + s2 −s3 + · · · + (−1)nsn
where
sr =

i1<i2<...<in
|Fi1 ∩Fi2 ∩. . . ∩Fir | = C(n, r) (n −r)! = n!
r!
Setting |Sn| = n! and sr = n!/r! in the formula for Dn gives us our theorem.
PIGEONHOLE PRINCIPLE
6.7. Suppose ﬁve points are chosen from the interior of a square S where each side has length two inches. Show
that the distance between two of the points must be less than
√
2 inches.
Draw two lines between the opposite sides of S which partitions S into four subsquares each whose sides have
length one inch. By the Pigeonhole Principle, two of the points lie in one of the subsquares. The diagonal of each
subsquare is
√
2 inches, so the distance between the two points is less than
√
2 inches.
6.8. Let p and q be positive integers.Anumber r is said to satisfy the (p, q)-Ramsey property if a set of r people
must have a subset of p mutual friends or a subset of q mutual strangers. The Ramsey number R(p, q) is
the smallest such integer r. Show that R(3, 3) = 6.
By Example 6.5, R(3, 3) ≥6. We show that R(3, 3) > 5. Consider ﬁve people who are sitting around a circular
table, and suppose each person is only friends with the people sitting next to him/her. No three people can be strangers
since two of the three people must be sitting next to each other. Also no three people can be mutual friends since they
cannot be sitting next to each other. Thus R(3, 3) > 5. Accordingly R(3, 3) = 6.
6.9. Suppose a team X plays 18 games in a two-week 14-day period, and plays at least one game a day. Show
that there is a period of days in which exactly 9 games were played.
Let S = {s1, s2, . . . , s14} where si is the number of games X played from the ﬁrst day to the ith day. Then s14 = 18,
and all the si are distinct. Let T = {t1, t2, . . . , t14} where ti = si + 9. Then t14 = 18 + 9 = 27, and the ti are distinct.
Together S and T have 14 + 14 = 28 numbers, which lie between 1 and 27. By the Pigeonhole Principle, two of the
numbers must be equal. However the entries in S and the entries in T are distinct. Thus there is sj ∈S and tn ∈T such
that sj = tk = sk + 9. Therefore,
9 = sj −sn = number of games played in days k + 1, k + 2, . . . , j −1, j
6.10. Prove Theorem 6.7: Every sequence of distinct n2 +1 real numbers contains a subsequence of length n+1
which is strictly increasing or strictly decreasing.
Let a1, a2, . . . , an2+i be a sequence of n2 +1 distinct real numbers. To each at we associate the pair (it, dt) where:
(1) it is the longest increasing subsequence beginning at at and (2) dt is the longest decreasing subsequence beginning
at at Thus there are n2 + 1 such ordered pairs, one for each number in the sequence.
Now suppose that no subsequence is longer than n. Then it and dt cannot exceed n. Thus there are at most n2
distinct pairs (it, dt). By the Pigeonhole Principle, two of the n2 + 1 pairs are equal, that is, there are two distinct
points ar and as such that (ir, dr) = (is, ds). WLOG, we can assume r < s. Then ar occurs before as in the sequence
(See Fig. 6-2(a)). Then ar followed by the increasing subsequence of is numbers beginning at as gives a subsequence
of length is + 1 = ir + 1 beginning ar (See Fig. 6-2(b)). This contradicts the deﬁnition of ir. Similarly, suppose
ar > as. Then an followed by the decreasing subsequence of ds numbers beginning at as gives a subsequence of
length dr + 1 = ds + 1 beginning at ar which contradicts the deﬁnition of dr (See Fig. 6-2(c)). In each case we get a
contradiction. Thus the assumption that no subsequence exceeds n is not true, and the theorem is proved.

120
ADVANCED COUNTING TECHNIQUES, RECURSION
[CHAP. 6
Fig. 6-2
RECURSION
6.11. Consider the second-order homogeneous recurrence relation an = an−1 + 2an−2 with initial conditions
a0 = 2, a1 = 7,
(a) Find the next three terms of the sequence.
(b) Find the general solution.
(c) Find the unique solution with the given initial conditions.
(a) Each term is the sum of the preceding term plus twice its second preceding term. Thus:
a2 = 7 + 2(2) = 11,
a3 = 11 + 2(7) = 25,
a4 = 25 + 2(11) = 46
(b) First we ﬁnd the characteristic polynomial (t) and its roots:
(x) = x2 −x −2 = (x −2)(x + 1);
roots r1 = 2, r2 = −1
Since the roots are distinct, we use Theorem 6.8 to obtain the general solution:
an = c1(2n) + c2(−1)n
(c) The unique solution is obtained by ﬁnding c1 and c2 using the initial conditions:
For n = 0, a0 = 2, we get:
c1(20) + c2(−1)0 = 2
or
c1 + c2 = 2
For n = 1, a1 = 7, we get:
c1(21) + c2(−1)1 = 7
or
2c1 −c2 = 7
Solving the two equations for c1 and c2 yields c1 = 3 and c2 = 1. The unique solution follows:
an = 3(2n) −(−1)n
6.12. Consider the third-order homogeneous recurrence relation an = 6an−1 −12an−2 + 8an−3
(a) Find the general solution.
(b) Find the solution with initial conditions a0 = 3, a1 = 4, a2 = 12.
(a) First we ﬁnd the characteristic polynomial
(x) = x3 −6x2 + 12x −8 = (x −2)3
Then (x) has only one root r0 = 2 which has multiplicity 3. Thus the general solution of the recurrence relation
follows:
an = c1(2n) + c2n(2n) + c3n2(2n) = (c1 + c2n + c3n2)(2n)
(b) We ﬁnd the values for c1, c2, and c3 as follows:
For n = 0, a0 = 3
we get:
c1 = 3
For n = 1, a1 = 4
we get:
2c1 + 2c2 + 2c3 = 4
For n = 2, a2 = 12
we get:
4c1 + 8c2 + 16c3 = 12
Solving the system of three equations in c1, c2, c3 yields the solution
c1 = 3,
c2 = −2,
c3 = 1
Thus the unique solution of the recurrence relation follows:
an = (3 −2n + n2)(2n)

CHAP. 6]
ADVANCED COUNTING TECHNIQUES, RECURSION
121
Supplementary Problems
ADVANCED COUNTING TECHNIQUES, INCLUSION–EXCLUSION
6.13. A store sells M = 4 kinds of cookies. Find the number of ways a customer can buy:
(a) 10 cookies;
(b) 15 cookies.
6.14. Find the number m of nonnegative solutions to x + y + z = 20 with the conditions that x ≥5, y ≥3, and z ≥1.
6.15. Let E be the equation x + y + z = 20. Find the number m of nonnegative solutions to E with the conditions that x < 8,
y < 9, z < 10.
6.16. Find the number m of positive integers not exceeding 1000 which are not divisible by 3, 7, or 11.
6.17. Find the number of ways that 14 people can be partitioned into 6 committees, such that 2 committees contain 3 people
and the other committees contain 2 people.
6.18. Assume that a cell can be empty. Find the number m of ways that a set:
(a) With 3 people can be partitioned into: (i) three ordered cells; (ii) three unordered cells.
(b) With 4 people can be partitioned into: (i) three ordered cells; (ii) three unordered cells.
6.19. Find the number N of surjective (onto) functions from a set A to a set B where:
(a) |A| = 8, |B| = 3;
(b) |A| = 6, |B| = 4;
(c) |A| = 5, |B| = 5;
(d) |A| = 5, |B| = 7.
6.20. Find the number of derangements of X = {1, 2, 3, . . . , 2m} such that the ﬁrst m elements of each derangement are:
(a) the ﬁrst m elements of X; (b) the last m elements of X.
PIGEONHOLE PRINCIPLE
6.21. Find the minimum number of students that can be admitted to a college so that there are at least 15 students from one
of the 50 states.
6.22. Consider nine lattice points in space. Show that the midpoint of two of the points is also a lattice point.
6.23. Find an increasing subsequence of maximum length and a decreasing subsequence of maximum length in the sequence:
14, 2, 8, 3, 25, 15, 10, 20, 9, 4.
6.24. Consider a line of 50 people with distinct heights. Show there is a subline of 8 people which is either increasing or
decreasing.
6.25. Give an example of a sequence of 25 distinct integers which does not have a subsequence of 6 integers which is either
increasing or decreasing.
6.26. Suppose a team X plays 19 games in a two-week period of 14 days, and plays at least one game per day. Show there is
a period of consecutive days that X played exactly 8 games.
6.27. Suppose 10 points are chosen at random in the interior of an equilateral triangle T where each side has length three
inches. Show that the distance between two of the points must be less than one inch.
6.28. Let X = {xi} be a set of n positive integers. Show that the sum of the integers of a subset of X is divisible by n.
6.29. Consider a group of 10 people (where each pair are either friends or strangers). Show that there is either a subgroup of
4 mutual friends or a subgroup of 3 mutual strangers.
6.30. For the Ramsey numbers R(p, q) show that: (a) R(p, q) = R(q, p); (b) R(p, 1) = 1; (c) R(p, 2) = p.
RECURSION
6.31. For each recurrence relation and initial conditions, ﬁnd: (i) general solution; (ii) unique solution with the given initial
conditions:
(a)
an = 3an−1 + 10an−2; a0 = 5, a1 = 11
(d)
an = 5an−1 −6an−2; a0 = 2, a1 = 8
(b)
an = 4an−1 + 21an−2; a0 = 9, a1 = 13
(e)
an = 3an−1 −an−2; a0 = 0, a1 = 1
(c)
an = 3an−1 −2an−2; a0 = 5, a1 = 8
(f)
an = 5an−1 −3an−2; a0 = 0, a1 = 1
6.32. Repeat Problem 6.31 for the following recurrence relations and initial conditions:
(a)
an = 6an−1; a0 = 5
(c)
an = 4an−1 −4an−2; a0 = 1, a1 = 8
(b)
an = 7an−1; a0 = 5
(d)
an = 10an−1 −25an−2; a0 = 2, a1 = 15

122
ADVANCED COUNTING TECHNIQUES, RECURSION
[CHAP. 6
6.33. Find the unique solution to each recurrence relation with the given initial conditions:
(a)
an = 10an−1 −32an−2 + 32an−3 with a0 = 5, a1 = 18, a2 = 76
(b)
an = 9an−1 −27an−2 + 27an−3 with a0 = 5, a1 = 24, a2 = 117
6.34. Consider the following second-order recurrence relation and its characteristic polynomial (x):
an = san−1 + tan−2
and
(x) = x2 −sx −t
(∗)
(a) Suppose p(n) and q(n) are solutions of (∗). Show that, for any constants c1 and c2, c1p(n)+c2q(n) is also a solution
of (∗).
(b) Suppose r is a root of (x). Show that an = rn is a solution to (∗).
(c) Suppose r is a double root of (x). Show that: (i) s = 2r and t = −r2; (ii) an = nrn is also a root of (∗).
6.35. Repeat Problem 6.34(a) and (b) for any linear kth-order homogeneous recurrence relation with constant coefﬁcients
and its characteristic polynomial (x) which have the form:
an = C1an−1 + C2an−2 + · · · + Ckan−k =
k

i=1
C1an−1
and
(x) = xk −
k

i=1
C1xk−i
Answers to Supplementary Problems
6.13. (a) 286; (b) 646.
6.14. 78.
6.15. 15.
6.16. 520.
6.17. (14!)/[(3!3!2!2!2!2!)(2!4!)] = 3 153 150.
6.18. (a) (i) 33 = 27; (ii) They may be distributed as: [3, 0,
0], [2, 1, 0], or [1, 1, 1]. Hence m = 1 + 3 + 1 = 5.
(b) (i) 34 = 81; (ii) They may be distributed as: [4, 0,
0], [3, 1, 0], [2, 2, 0] or [2, 1, 1]. Hence m = 1+4+3+
6 = 14.
6.19. (a) 5796; (b) 1560; (c) 5! = 120; (d) 0.
6.20. (a) (Dm)2; (b) (m!)2.
6.21. 701.
6.22. There are eight triplets of parities: (odd, odd, odd),
(odd, odd, even), . . .. Thus 2 of the 9 points have the
same triplet of parities.
6.23. 2, 3, 10, 20; 25, 15, 10, 8, 4.
6.24. Use Theorem 6.7 with n = 9.
6.25. 5, 4, 3, 2, 1, 10, 9, 8, 7, 6, . . ., 25, 24, 23, 22, 21.
6.26. (Hint: See Problem 6.9.)
6.27. (Hint: PartitionT into 9 equilateral triangles where each
side has length one inch.)
6.28. Let si = x1 + · · · + xi. The result is true if n divides
some si. Otherwise, let r′ be the remainder when si is
divided by n. Two of the rs must be equal. Say rp = rq
where p < q. Then n divides sq −sp = xp+1+· · ·+xq.
6.31. (a) an = c1(5n) + c2(−2)n;
c1 = 3, c2 = 2
(b) an = c1(7n) + c2(−3)n;
c1 = 4, c2 = 5
(c) an = c1 + c2(2n);
c1 = 2, c2 = 3
(d) an = c1(2n) + c2(3n);
c1 = −2, c2 = 4
(e) an = c1[(3 + t)/2]n + c2[(3 −t)/2]n;
c1 = 1/t,
c2 = −1/t where t =
√
5
(f) an = c1[(5+s)/2]n +c2[(5−s)/2]n;
c1 = 1/s,
c2 = −1/s where =
√
13
6.32. (a) an = c1(6n),
c1 = 5
(b) an = c1(7n),
c1 = 5
(c) an = c1(2n) + c2n(2n),
c1 = 1, c2 = 3
(d) an = c1(5n) + c2n(5n),
c1 = 2, c2 = 1
6.33. (a) an = 2(4n) + n(4n) + 3(2n); (b) an = 5(3n) +
2n(3n) + n2(3n) = (5 + 2n + n2)3n.
6.34. (b) r is a root of (x) so r2 −sr −t = 0 or r2 = sr +t.
Let an = rn. Then san−1 + tan−2 = srn−1 + trn−2 =
(sr + t)rn−2 = r2(rn−2) = rn = an
(c) (i) r is a double root of (x); hence (x) =
(x −r)2 = x2 −2rx + r2 = x2 −sx −t. Thus s = 2r
and t = −r2. (ii) Let an nrn. Then san−1 + tan−2 =
nrn = an.

CHAPTER 7
Probability
7.1
INTRODUCTION
Probability theory is a mathematical modeling of the phenomenon of chance or randomness. If a coin is
tossed in a random manner, it can land heads or tails, but we do not know which of these will occur in a single
toss. However, suppose we let s be the number of times heads appears when the coin is tossed n times. As n
increases, the ratio f = s/n, called the relative frequency of the outcome, becomes more stable. If the coin is
perfectly balanced, then we expect that the coin will land heads approximately 50% of the time or, in other words,
the relative frequency will approach 1
2. Alternatively, assuming the coin is perfectly balanced, we can arrive at
the value 1
2 deductively. That is, any side of the coin is as likely to occur as the other; hence the chance of getting
a head is 1 in 2 which means the probability of getting heads is 1
2. Although the speciﬁc outcome on any one toss
is unknown, the behavior over the long run is determined. This stable long-run behavior of random phenomena
forms the basis of probability theory.
A probabilistic mathematical model of random phenomena is deﬁned by assigning “probabilities” to all the
possible outcomes of an experiment. The reliability of our mathematical model for a given experiment depends
upon the closeness of the assigned probabilities to the actual limiting relative frequencies. This then gives rise
to problems of testing and reliability, which form the subject matter of statistics and which lie beyond the scope
of this text.
7.2
SAMPLE SPACE AND EVENTS
The set S of all possible outcomes of a given experiment is called the sample space. A particular outcome,
i.e., an element in S, is called a sample point. An event A is a set of outcomes or, in other words, a subset of the
sample space S. In particular, the set {a} consisting of a single sample point a ∈S is called an elementary event.
Furthermore, the empty set  and S itself are subsets of S and so  and S are also events;  is sometimes called
the impossible event or the null event.
Since an event is a set, we can combine events to form new events using the various set operations:
(i) A ∪B is the event that occurs iff A occurs or B occurs (or both).
(ii) A ∩B is the event that occurs iff A occurs and B occurs.
(iii) Ac, the complement of A, also written &
A, is the event that occurs iff A does not occur.
Two events A and B are called mutually exclusive if they are disjoint, that is, if A∩B = . In other words, A
and B are mutually exclusive iff they cannot occur simultaneously. Three or more events are mutually exclusive
if every two of them are mutually exclusive.
123
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

124
PROBABILITY
[CHAP. 7
EXAMPLE 7.1
(a) Experiment: Toss a coin three times and observe the sequence of heads (H) and tails (T ) that appears.
The sample space consists of the following eight elements:
S = {HHH, HHT , HT H, HT T , T HH, T HT , T T H, T T T }
Let A be the event that two or more heads appear consecutively, and B that all the tosses are the same:
A = {HHH, HHT , T HH}
and
B = {HHH, T T T }
Then A ∩B = {HHH} is the elementary event that only heads appear. The event that ﬁve heads appears is
the empty set .
(b) Experiment: Toss a (six-sided) die, pictured in Fig. 7-1(a), and observe the number (of dots) that appear
on top.
The sample space S consists of the six possible numbers, that is, S = {1, 2, 3, 4, 5, 6}. Let A be the
event that an even number appears, B that an odd number appears, and C that a prime number appears.
That is, let
A = {2, 4, 6},
B = {1, 3, 5},
C = {2, 3, 5}
Then
A ∪C = {2, 3, 4, 5, 6} is the event that an even or a prime number occurs.
B ∩C = {3, 5} is the event that an odd prime number occurs.
Cc = {1, 4, 6} is the event that a prime number does not occur.
Note that A and B are mutually exclusive: A ∩B = . In other words, an even number and an odd number
cannot occur simultaneously.
(c) Experiment: Toss a coin until a head appears, and count the number of times the coin is tossed.
The sample space S of this experiment is S = {1, 2, 3, . . .}. Since every positive integer is an element
of S, the sample space is inﬁnite.
Remark: The sample space S in Example 7.1(c), as noted, is not ﬁnite. The theory concerning such sample
spaces lies beyond the scope of this text. Thus, unless otherwise stated, all our sample spaces S shall be ﬁnite.
Fig. 7-1

CHAP. 7]
PROBABILITY
125
EXAMPLE 7.2 (Pair of dice) Toss a pair of dice and record the two numbers on the top.
There are six possible numbers, 1, 2, . . . , 6, on each die. Thus S consists of the pairs of numbers from 1 to 6,
and hence n(S) = 36. Figure 7-1(b) shows these 36 pairs of numbers arranged in an array where the rows are
labeled by the ﬁrst die and the columns by the second die.
Let A be the event that the sum of the two numbers is 6, and let B be the event that the largest of the two
numbers is 4. That is, let
A = {(1, 5), (2, 4), (3, 3), (4, 2), (5, 1)},
B = {(1, 4), (2, 4), (3, 4), (4, 4), (4, 3), (4, 2), (4, 1)}
Then the event “A and B” consists of those pairs of integers whose sum is 6 and whose largest number is 4 or,
in other words, the intersection of A and B. Thus
A ∩B = {(2, 4), (4, 2)}
Similarly, “A or B,” the sum is 6 or the largest is 4, shaded in Fig. 7-1(b), is the union A ∪B.
EXAMPLE 7.3 (Deck of cards) A card is drawn from an ordinary deck of 52 cards which is pictured in
Fig. 7-2(a).
The sample space S consists of the four suits, clubs (C), diamonds (D), hearts (H), and spades (S), where
each suit contains 13 cards which are numbered 2 to 10, and jack (J), queen (Q), king (K), and ace (A). The
hearts (H) and diamonds (D) are red cards, and the spades (S) and clubs (C) are black cards. Figure 7-2(b)
pictures 52 points which represent the deck S of cards in the obvious way. Let E be the event of a picture
card, or face card, that is, a Jack (J), Queen (Q), or King (K), and let F be the event of a heart. Then
E ∩F = {JH, QH, KH}, as shaded in Fig. 7-2(b).
Fig. 7-2

126
PROBABILITY
[CHAP. 7
7.3
FINITE PROBABILITY SPACES
The following deﬁnition applies.
Deﬁnition 7.1: Let S be a ﬁnite sample space, say S = {a1, a2, . . . , an}. Aﬁnite probability space, or probability
model, is obtained by assigning to each point ai in S a real number pi, called the probability of ai satisfying the
following properties:
(i) Each pi is nonnegative, that is, pi ≥0.
(ii) The sum of the pi is 1, that is, is p1 + p2 + · · · + pn = 1.
The probability of an event A written P(A), is then deﬁned to be the sum of the probabilities of the points in A.
The singleton set {ai} is called an elementary event and, for notational convenience, we write P(ai)
for P ({ai}).
EXAMPLE 7.4 (Experiment) Suppose three coins are tossed, and the number of heads is recorded. (Compare
with the above Example 7.1(a).)
The sample space is S = {0, 1, 2, 3}. The following assignments on the elements of S deﬁne a probability
space:
P(0) = 1
8,
P(1) = 3
8,
P(2) = 3
8,
P(3) = 1
8
That is, each probability is nonnegative, and the sum of the probabilities is 1. Let A be the event that at least one
head appears, and let B be the event that all heads or all tails appear; that is, let A = {1, 2, 3} and B = {0, 3}.
Then, by deﬁnition,
P (A) = P (1) + P(2) + P(3) = 3
8 + 3
8 + 1
8 = 7
8
and
P(B) = P(0) + P(3) = 1
8 + 1
8 = 1
4
Equiprobable Spaces
Frequently the physical characteristics of an experiment suggest that the various outcomes of the sample
space be assigned equal probabilities. Such a ﬁnite probability space S, where each sample point has the same
probability, will be called an equiprobable space. In particular, if S contains n points, then the probability of
each point is 1/n. Furthermore, if an event A contains r points, then its probability is r(1/n) = r/n. In other
words, where n(A) denotes the number of elements in a set A,
P (A) = number of elements in A
number of elements in S = n(A)
n(S)
or
P(A) = number of outcomes favorable to A
total number of possible outcomes
We emphasize that the above formula for P(A) can only be used with respect to an equiprobable space, and
cannot be used in general.
The expression at random will be used only with respect to an equiprobable space; the statement “choose
a point at random from a set S” shall mean that every sample point in S has the same probability of being
chosen.
EXAMPLE 7.5 Let a card be selected from an ordinary deck of 52 playing cards. Let
A = {the card is a spade}
and
B = {the card is a face card}.
We compute P (A), P (B), and P(A ∩B). Since we have an equiprobable space,
P (A) = number of spades
number of cards = 13
52 = 1
4,
P(B) = number of face cards
number of cards
= 12
52 = 3
13
P(A ∩B) = number of spade face cards
number of cards
= 3
52

CHAP. 7]
PROBABILITY
127
Theorems on Finite Probability Spaces
The following theorem follows directly from the fact that the probability of an event is the sum of the
probabilities of its points.
Theorem 7.1: The probability function P deﬁned on the class of all events in a ﬁnite probability space has the
following properties:
[P1] For every event A, 0 ≤P(A) ≤1.
[P2] P(S) = 1.
[P3] If events A and B are mutually exclusive, then P(A ∪B) = P(A) + P(B).
The next theorem formalizes our intuition that if p is the probability that an event E occurs, then 1 −p is
the probability that E does not occur. (That is, if we hit a target p = 1/3 of the times, then we miss the target
1 −p = 2/3 of the times.)
Theorem 7.2: Let A be any event. Then P(Ac) = 1 −P(A).
The following theorem (proved in Problem 7.13) follows directly from Theorem 7.1.
Theorem 7.3: Consider the empty set  and any events A and B. Then:
(i) P () = 0.
(ii) P (A\B) = P(A) −P(A ∩B).
(iii) If A ⊆B, then P(A) ≤P(B).
Observe that Property [P3] in Theorem 7.1 gives the probability of the union of events in the case that the
events are disjoint. The general formula (proved in Problem 7.14) is called the Addition Principle. Speciﬁcally:
Theorem 7.4 (Addition Principle): For any events A and B,
P(A ∪B) = P(A) + P(B) −P(A ∩B)
EXAMPLE 7.6 Suppose a student is selected at random from 100 students where 30 are taking mathematics,
20 are taking chemistry, and 10 are taking mathematics and chemistry. Find the probability p that the student is
taking mathematics or chemistry.
Let M = {students taking mathematics} and C = {students taking chemistry}. Since the space is equi-
probable,
P (M) = 30
100 = 3
10,
P(C) = 20
100 = 1
5,
P(M and C) = P(M ∩C) = 10
100 = 1
10
Thus, by the Addition Principle (Theorem 7.4),
p = P (M or C) = P(M ∪C) = P(M) + P(C) −P(M ∩C) = 3
10 + 1
5 −1
10 = 2
5
7.4
CONDITIONAL PROBABILITY
Suppose E is an event in a sample space S with P (E) > 0. The probability that an event A occurs once E
has occurred or, speciﬁcally, the conditional probability of A given E. written P(A|E), is deﬁned as follows:
P(A|E) = P(A ∩E)
P(E)
As pictured in the Venn diagram in Fig. 7-3, P(A|E) measures, in a certain sense, the relative probability of A
with respect to the reduced space E.

128
PROBABILITY
[CHAP. 7
Fig. 7-3
Suppose S is an equiprobable space, and n(A) denotes the number of elements in A. Then:
P (A ∩E) = n(A ∩E)
n(S)
,
P(E) = n(E)
n(S) ,
and so
P(A|E) = P(A ∩E)
P(E)
= n(A ∩E)
n(E)
We state this result formally.
Theorem 7.5: Suppose S is an equiprobable space and A and E are events. Then
P(A|E) = number of elements in A ∩E
number of elements in E
= n(A ∩E)
n(E)
EXAMPLE 7.7
(a) A pair of fair dice is tossed. The sample space S consists of the 36 ordered pairs (a, b), where a and b can
be any of the integers from 1 to 6. (See Example 7.2.) Thus the probability of any point is
1
36. Find the
probability that one of the dice is 2 if the sum is 6. That is, ﬁnd P(A|E) where:
E = {sum is 6}
and
A = {2 appears on at least one die}
Now E consists of 5 elements and A ∩E consists of two elements; namely
E = {(1, 5), (2, 4), (3, 3), (4, 2), (5, 1)}
and
A ∩E = {(2, 4), (4, 2)}
By Theorem 7.5, P(A|E) = 2/5.
On the other hand A itself consists of 11 elements, that is,
A = {(2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (1, 2), (3, 2), (4, 2), (5, 2), (6, 2)}
Since S consists of 36 elements, P(A) = 11/36.
(b) A couple has two children; the sample space is S = {bb, bg, gb, gg} with probability 1
4 for each point. Find
the probability p that both children are boys if it is known that: (i) at least one of the children is a boy;
(ii) the older child is a boy.
(i) Here the reduced space consists of three elements, {bb, bg, gb}; hence p = 1
3.
(ii) Here the reduced space consists of only two elements {bb, bg}; hence p = 1
2.
Multiplication Theorem for Conditional Probability
Suppose A and B are events in a sample space S with P(A) > 0. By deﬁnition of conditional probability,
P(B|A) = P(A ∩B)
P(A)

CHAP. 7]
PROBABILITY
129
Multiplying both sides by P(A) gives us the following useful result:
Theorem 7.6 (Multiplication Theorem for Conditional Probability):
P(A ∩B) = P(A)P(B|A)
The multiplication theorem gives us a formula for the probability that events A and B both occur. It can
easily be extended to three or more events A1, A2, . . . Am; that is,
P (A1 ∩A2 ∩· · · Am) = P(A1) · P(A2|A1) · · · P(Am|A1 ∩A2 ∩· · · ∩Am−1)
EXAMPLE 7.8 A lot contains 12 items of which 4 are defective. Three items are drawn at random from the lot
one after the other. Find the probability p that all three are nondefective.
The probability that the ﬁrst item is nondefective is 8
12 since 8 of 12 items are nondefective. If the ﬁrst item is
nondefective, then the probability that the next item is nondefective is 7
11 since only 7 of the remaining 11 items
are nondefective. If the ﬁrst 2 items are nondefective, then the probability that the last item is nondefective is 6
10
since only 6 of the remaining 10 items are now nondefective. Thus by the multiplication theorem,
p = 8
12 · 7
11 · 6
10 = 14
55 ≈0.25
7.5
INDEPENDENT EVENTS
Events A and B in a probability space S are said to be independent if the occurrence of one of them does not
inﬂuence the occurrence of the other. More speciﬁcally, B is independent of A if P(B) is the same as P(B|A).
Now substituting P (B) for P(B|A) in the Multiplication Theorem P(A ∩B) = P(A)P(B|A) yields
P(A ∩B) = P(A)P(B).
We formally use the above equation as our deﬁnition of independence.
Deﬁnition 7.2: Events A and B are independent if P(A ∩B) = P(A)P(B); otherwise they are dependent.
We emphasize that independence is a symmetric relation. In particular, the equation
P (A ∩B) = P(A)P(B)
implies both
P(B|A) = P(B)
and
P(A|B) = P(A)
EXAMPLE 7.9 A fair coin is tossed three times yielding the equiprobable space
S = {HHH, HHT , HT H, HT T , T HH, T HT , T T H, T T T }
Consider the events:
A = {ﬁrst toss is heads} = {HHH, HHT , HT H, HT T }
B = {second toss is heads) = {HHH, HHT , T HH, T HT }
C = {exactly two heads in a row} = {HHT , T HH}
Clearly A and B are independent events; this fact is veriﬁed below. On the other hand, the relationship between
A and C and between B and C is not obvious. We claim that A and C are independent, but that B and C are
dependent. We have:
P(A) = 4
8 = 1
2,
P(B) = 4
8 = 1
2,
P(C) = 2
8 = 1
4

130
PROBABILITY
[CHAP. 7
Also,
P (A ∩B) = P ({HHH, HHT }) = 1
4, P(A ∩C) = P({HHT }) = 1
8, P(B ∩C) = P({HHT , T HH}) = 1
4
Accordingly,
P (A)P(B)
=
1
2 · 1
2 = 1
4 = P(A ∩B),
and so A and B are independent
P (A)P(C)
=
1
2 · 1
4 = 1
8 = P(A ∩C),
and so A and C are independent
P (B)P(C)
=
1
2 · 1
4 = 1
8 ̸= P(B ∩C),
and so B and C are dependent
Frequently, we will postulate that two events are independent, or the experiment itself will imply that
two events are independent.
EXAMPLE 7.10 The probability that A hits a target is 1
4, and the probability that B hits the target is 2
5. Both
shoot at the target. Find the probability that at least one of them hits the target, i.e., that A or B (or both) hit the
target.
We are given that P(A) = 1
2 and P(B) = 2
5, and we seek P(A ∪B). Furthermore, the probability that A or
B hits the target is not inﬂuenced by what the other does; that is, the event that A hits the target is independent
of the event that B hits the target, that is, P(A ∩B) = P(A)P(B). Thus
P(A ∪B) = P (A) + P(B) −P(A ∩B) = P(A) + P(B) −P(A)P(B) = 1
4 + 2
5 −

1
4
 
2
5

= 11
20
7.6
INDEPENDENT REPEATED TRIALS, BINOMIAL DISTRIBUTION
We have previously discussed probability spaces which were associated with an experiment repeated a ﬁnite
number of times, as the tossing of a coin three times. This concept of repetition is formalized as follows:
Deﬁnition 7.3: Let S be a ﬁnite probability space. By the space of n independent repeated trials, we mean the
probability space Sn consisting of ordered n-tuples of elements of S, with the probability of an n-tuple deﬁned to
be the product of the probabilities of its components:
P((s1, s2, . . . , sn)) = P(s1)P(s2) . . . P(sn)
EXAMPLE 7.11 Whenever three horses a, b, and c race together, their respective probabilities of winning are
1
2, 1
3, and 1
6. In other words, S = {a, b, c} with P(a) = 1
2, P(b) = 1
3, and P(c) = 1
6. If the horses race twice,
then the sample space of the two repeated trials is
S2 = {aa, ab, ac, ba, bb, bc, ca, cb, cc}
For notational convenience, we have written ac for the ordered pair (a, c). The probability of each point in S2 is
P(aa) = P(a)P(a) = 1
2

1
2

= 1
4,
P(ba) = 1
6,
P(ca) = 1
12
P(ab) = P(a)P(b) = 1
2

1
3

= 1
6,
P(bb) = 1
9,
P(cb) = 1
18
P(ac) = P(a)P(c) = 1
2

1
6

= 1
12,
P(bc) = 1
18,
P(cc) = 1
36
Thus the probability of c winning the ﬁrst race and a winning the second race is P(ca) = 1
12.

CHAP. 7]
PROBABILITY
131
Repeated Trials with Two Outcomes, Bernoulli Trials, Binomial Experiment
Now consider an experiment with only two outcomes. Independent repeated trials of such an experiment are
called Bernoulli trials, named after the Swiss mathematician Jacob Bernoulli (1654–1705). The term independent
trials means that the outcome of any trial does not depend on the previous outcomes (such as tossing a coin).
We will call one of the outcomes success and the other outcome failure.
Let p denote the probability of success in a Bernoulli trial, and so q = 1 −p is the probability of failure.
A binomial experiment consists of a ﬁxed number of Bernoulli trials. A binomial experiment with n trials and
probability p of success will be denoted by
B(n, p)
Frequently, we are interested in the number of successes in a binomial experiment and not in the order
in which they occur. The next theorem (proved in Problem 7.27) applies. We note that the theorem uses the
following binomial coefﬁcient which is discussed in detail in Chapter 5:
 n
k

= n(n −1)(n −2) . . . (n −k + 1)
k(k −1)(k −2) . . . 3 · 2 · 1
=
n!
k!(n −k)!
Theorem 7.7: The probability of exactly k successes in a binomial experiment B(n, p) is given by
P(k) = P(k successes) =
 n
k

pkqn−k
The probability of one or more successes is 1 −qn.
EXAMPLE 7.12 A fair coin is tossed 6 times; call heads a success. This is a binomial experiment with n = 6
and p = q = 1
2.
(a) The probability that exactly two heads occurs (i.e., k = 2) is
P(2) =
 6
2
 1
2
2 1
2
4
= 15
64 ≈0.23
(b) The probability of getting at least four heads (i.e., k = 4, 5 or 6) is
P (4) + P (5) + P(6)
=
 6
4
 1
2
4 1
2
2
+
 6
4
 1
2
4 1
2
2
+
 6
6
 1
2
6
=
15
64 + 6
64 + 1
64 = 11
32 ≈0.34
(c) The probability of getting no heads (i.e., all failures) is q6 =
1
2
6
= 1
64, so the probability of one or more
heads is 1 −qn = 1 −1
64 = 63
64 ≈0.94.
Remark: The function P(k) for k = 0, 1, 2, . . . , n, for a binomial experiment B(n, p), is called the binomial
distribution since it corresponds to the successive terms of the binomial expansion:
(q + p)n = qn +
 n
1

qn−1p +
 n
2

qn−2p2 + · · · + pn
The use of the term distribution will be explained later in the chapter.

132
PROBABILITY
[CHAP. 7
7.7
RANDOM VARIABLES
Let S be a sample of an experiment. As noted previously, the outcome of the experiment, or the points in
S, need not be numbers. For example, in tossing a coin the outcomes are H (heads) or T (tails), and in tossing
a pair of dice the outcomes are pairs of integers. However, we frequently wish to assign a speciﬁc number to
each outcome of the experiment. For example, in coin tossing, it may be convenient to assign 1 to H and 0
to T ; or, in the tossing of a pair of dice, we may want to assign the sum of the two integers to the outcome.
Such an assignment of numerical values is called a random variable. More generally, we have the following
deﬁnition.
Deﬁnition 7.4: Arandom variable X is a rule that assigns a numerical value to each outcome in a sample space S.
We shall let RX denote the set of numbers assigned by a random variable X, and we shall refer to RX as the
range space.
Remark: In more formal terminology, X is a function from S to the real numbers R, and RX is the range of X.
Also, for some inﬁnite sample spaces S, not all functions from S to R are considered to be random variables.
However, the sample spaces here are ﬁnite, and every real-valued function deﬁned on a ﬁnite sample space is
a random variable.
EXAMPLE 7.13 Apair of fair dice is tossed. (See Example 7.2.) The sample space S consists of the 36 ordered
pairs (a, b) where a and b can be any of the integers from 1 to 6.
Let X assign to each point in S the sum of the numbers; then X is a random variable with range space
RX = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}
Let Y assign to each point the maximum of the two numbers; then Y is a random variable with range space
RY = {1, 2, 3, 4, 5, 6}
Sums and Products of Random Variables, Notation
Suppose X and Y are random variables on the same sample space S. Then X + Y, kX and XY are functions
on S deﬁned as follows (where s ∈S):
(X + Y)(s) = X(s) + Y(s),
(kX)(s) = kX(s),
(XY)(s) = X(s)Y(s)
More generally, for any polynomial or exponential function h(x, y, . . . , z), we deﬁne h(X, Y, . . . , Z) to be the
function on S deﬁned by
[h(X, Y, . . . , Z)](s) = h[X(s), Y(s), . . . , Z(s)]
It can be shown that these are also random variables. (This is trivial in the case that every subset of S is an event.)
The short notation P(X = a) and P(a ≤X ≤b) will be used, respectively, for the probability that “X maps
into a” and “X maps into the interval [a, b].” That is, for s ∈S:
P (X = a) ≡P({s | X(s) = a})
and
P(a ≤X ≤b) ≡P({s | a ≤X(s) ≤b})
Analogous meanings are given to P(X ≤a), P(X = a, Y = b), P(a ≤X ≤b, c ≤Y ≤d), and so on.
Probability Distribution of a Random Variable
Let X be a random variable on a ﬁnite sample space S with range space Rx = {x1, x2, . . . , xt}. Then X
induces a function f which assigns probabilities pk to the points xk in Rx as follows:
f (xk) = pk = P(X = xk) = sum of probabilities of points in S whose image is xk.

CHAP. 7]
PROBABILITY
133
The set of ordered pairs (x1, f (x1)), (x2, f (x2)), . . . , (xt, f (xt)) is called the distribution of the random variable
X; it is usually given by a table as in Fig. 7-4. This function f has the following two properties:
(i) f (xk) ≥0
and
(ii)

k
f (xk) = 1
Thus RX with the above assignments of probabilities is a probability space. (Sometimes we will use the pair
notation [xk, pk] to denote the distribution of X instead of the functional notation [x, f (x)]).
Fig. 7-4
Distribution f of a random variable X
In the case that S is an equiprobable space, we can easily obtain the distribution of a random variable from
the following result.
Theorem 7.8: Let S be an equiprobable space, and let f be the distribution of a random variable X on S with
the range space RX = {x1, x2, . . . , xt}. Then
pi = f (xi) = number of points in S whose image is xi
number of points in S
EXAMPLE 7.14 Let X be the random variable in Example 7.13 which assigns the sum to the toss of a pair of
dice. Note n(S) = 36, and Rx = {2, 3, . . . , 12}. Using Theorem 7.8, we obtain the distribution f of X as follows:
f (2) = 1/36, since there is one outcome (1, 1) whose sum is 2.
f (3) = 2/36, since there are two outcomes, (1, 2) and (2,1), whose sum is 3.
f (4) = 3/36, since there are three outcomes, (1, 3), (2, 2) and (3, 1), whose sum is 4.
Similarly, f (5) = 4/36, f (6) = 5/36, . . ., f (12) = 1/36. Thus the distribution of X follows:
x
2
3
4
5
6
7
8
9
10
11
12
f (x)
1/36
2/36
3/36
4/36
5/36
6/36
5/36
4/36
3/36
2/36
1/36
Expectation of a Random Variable
Let X be a random variable on a probability space S = {s1, s2, . . . , sm} Then the mean or expectation of X
is denoted and deﬁned by:
µ = E(X) = X(s1)P(s1) + X(s2)P(sa2) + · · · + X(sm)P(sm) =

X(sk)P(sk)
In particular, if X is given by the distribution f in Fig. 7-4, then the expectation of X is:
µ = E(X) = x1f (x1) + x2f (x2) + · · · + xtf (xt) =

xkf (xk)
Alternately, when the notation [xk, pk] is used instead of [xk, f (xk)],
µ = E(X) = x1p1 + x2p2 + · · · + xtpt =

xipi
(For notational convenience, we have omitted the limits in the summation symbol .)

134
PROBABILITY
[CHAP. 7
EXAMPLE 7.15
(a) Suppose a fair coin is tossed six times.
The number of heads which can occur with their respective
probabilities follows:
xi
0
1
2
3
4
5
6
p1
1/64
6/64
15/64
20/64
15/64
6/64
1/64
Then the mean or expectation (or expected number of heads) is:
µ = E(X) = 0

1
64

+ 1

6
64

+ 2

15
64

+ 3

20
64

+ 4

15
64

+ 5

6
64

+ 6

1
64

= 3
(This agrees with our intuition that we expect that half of the tosses to be heads.)
(b) Three horses a, b, and c are in a race; suppose their respective probabilities of winning are 1
2, 1
3, and 1
6. Let
X denote the payoff function for the winning horse, and suppose X pays $2, $6, or $9 according as a, b, or
c wins the race. The expected payoff for the race is
E(X) = X(a)P (a) + X(b)P(b) + X(c)P(c)
= 2

1
2

+ 6

1
3

+ 9

1
6

= 4.5
Variance and Standard Deviation of a Random Variable
Let X be a random variable with mean µ and distribution f as in Fig. 7-4. Then the variance of X, denoted
by V ar(X), is deﬁned by:
V ar(X) = (x1 −µ)2f (x1) + (x2 −µ)2f (x2) + · · · + (xt −µ)2f (xt) = (xk −µ)2f (xk) = E((X −µ)2)
Alternately, when the notation [xk, pk] is used instead of [xk, f (xk)],
V ar(X) = (x1 −µ)2p1 + (x2 −µ)2p2 + · · · + (xt −µ)2pt = (xk −µ)2pk = E((X −µ)2)
The standard deviation of X, denoted by σx or simply σ, is the nonnegative square root of V ar(X):
σx =
!
V ar(X)
Accordingly, V ar(X) = σx2. Both V ar(X) and σx2 or simply σ 2 are used to denote the variance of X.
The following formulas are usually more convenient for computing V ar(X) than the above:
V ar(X) = x1
2f (x1) + x2
2f (x2) + · · · + xt
2f (xt) −µ2 =
"
xk
2f (xk)
#
−µ2 = E(X2) −µ2
or
V ar(X) = x1
2p1 + x2
2p2 + · · · + xt
2pt −µ2 =
"
x2
kpk
#
−µ2 = E(X2) −µ2
EXAMPLE 7.16 Let X denote the number of times heads occurs when a fair coin is tossed six times. The
distribution of X appears in Example 7.15(a), where its mean µ = 3 is computed. The variance of X is computed
as follows:
V ar(X) = (0 −3)2 1
64 + (1 −3)2 6
64 + (2 −3)2 15
64 + · · · + (6 −3) 1
64 = 1.5
Alternatively:
V ar(X) = 02 1
64 + 12 6
64 + 22 15
64 + 32 20
64 + 42 15
64 + 52 6
64 + 62 1
64 −32 = 1.5
Thus the standard deviation is σ =
√
1.5 ≈1.225 (heads).

CHAP. 7]
PROBABILITY
135
Binomial Distribution
Consider a binomial experiment B(n, p). That is, B(n, p) consists of n independent repeated trials with two
outcomes, success or failure, and p is the probability of success (and q = (1 −p) is the probability of failure).
The number X of k successes is a random variable with distribution appearing in Fig. 7-5.
Fig. 7-5
The following theorem applies.
Theorem 7.9: Consider the binomial distribution B(n, p). Then:
(i) Expected value E(X) = µ = np.
(ii) Variance V ar(X) = σ 2 = npq.
(iii) Standard deviation σ = √npq.
EXAMPLE 7.17
(a) The probability that a man hits a target is p = 1/5. He ﬁres 100 times. Find the expected number µ of times
he will hit the target and the standard deviation σ.
Here p = 1
5 and so q = 4
5. Hence
µ = np = 100 · 1
5 = 20
and
σ = √npq =
$
100 · 1
5 · 4
5 = 4
(b) Find the expected number E(X) of correct answers obtained by guessing in a ﬁve-question true–false test.
Here p = 1
2. Hence E(X) = np = 5 · 1
2 = 2.5.
7.8
CHEBYSHEV’S INEQUALITY, LAW OF LARGE NUMBERS
The standard deviation σ of a random variable X measures the weighted spread of the values of X about
the mean µ. Thus, for smaller σ, we would expect that X will be closer to µ. A more precise statement of
this expectation is given by the following inequality, named after the Russian mathematician P. L. Chebyshev
(1821–1894).
Theorem 7.10 (Chebyshev’s Inequality): Let X be a random variable with mean µ and standard deviation σ.
Thenforanypositivenumberk, theprobabilitythatavalueofX liesintheinterval[µ−kσ, µ+kσ]
is at least 1 −1/k2. That is,
P(µ −kσ ≤X ≤µ + kσ) ≥1 −1
k2
EXAMPLE 7.18 Suppose X is a random variable with mean µ = 75 and standard deviation σ = 5. What
conclusion about X can be drawn from Chebyshev’s inequality for k = 2 and k = 3?
Setting k = 2, we obtain:
µ −kσ = 75 −2(5) = 65
and
µ + kσ = 75 + 2(5) = 85

136
PROBABILITY
[CHAP. 7
Thus we can conclude that the probability that a value of X lies between 65 and 85 is at least 1 −(1/2)2 = 3/4;
that is:
P(65 ≤X ≤85) ≥3/4
Similarly, by letting k = 3, we can conclude that the probability that a value of X lies between 60 and 90 is at
least 1 −(1/3)2 = 8/9.
Sample Mean and Law of Large Numbers
Consider a ﬁnite number of random variable X, Y, . . ., Z on a sample space S. They are said to be independent
if, for any values xi, yj, . . . , zk,
P (X = xi, Y = yj, . . . , Z = zk) ≡P(X = xi)P(Y = yj) . . . P(Z = zk)
In particular, X and Y are independent if
P(X = xi, Y = yj) ≡P(X = xi)P(Y = yj)
Now let X be a random variable with mean µ. We can consider the numerical outcome of each of n
independent trials to be a random variable with the same distribution as X. The random variable corresponding
to the ith outcome will be denoted by Xi(i = 1, 2, . . . , n). (We note that the Xi are independent with the same
distribution as X.) The average value of all n outcomes is also a random variable which is denoted by Xn and
called the sample mean. That is:
Xn = X1 + X2 + · · · + Xn
n
The law of large numbers says that as n increases the value of the sample mean Xn approaches the mean value µ.
Namely:
Theorem 7.11 (Law of Large Numbers): For any positive number α, no matter how small, the probability that
the sample mean Xn has a value in the interval [µ −α, µ + α] approaches 1 as n approaches
inﬁnity. That is:
P([µ −α ≤X ≤µ + α]) →1
as
n →∞.
EXAMPLE 7.19 Suppose a die is tossed 5 times with outcomes:
x1 = 3,
x2 = 4,
x3 = 6,
x4 = 1,
x5 = 4
Then the corresponding value x of the sample mean X5 follows:
x = 3 + 4 + 6 + 1 + 4
5
= 3.6
For a fair die, the mean µ = 3.5. The law of large numbers tells us that, as n gets larger, there is a greater
likelihood that Xn will get closer to 3.5.
Solved Problems
SAMPLE SPACES AND EVENTS
7.1. Let a coin and a die be tossed; and let the sample space S consists of the 12 elements:
S = {H1, H2, H3, H4, H5, H6, T 1, T 2, T 3, T 4, T 5, T 6}

CHAP. 7]
PROBABILITY
137
(a) Express explicitly the following events:
A = {heads and an even number},
B = {prime number},
C = {tails and an odd number}
(b) Express explicitly the events: (i) A or B occurs; (ii) B and C occur: (iii) only B occurs.
(c) Which pair of the events A, B, and C are mutually exclusive?
(a) The elements of A are those elements of S consisting of an H and an even number:
A = {H2, H4, H6}
The elements of B are those points in S whose second component is a prime number (2, 3, or 5):
B = {H2, H3, H5, T 2, T 3, T 5}
The elements of C are those points in S consisting of a T and an odd number; C = {T 1, T 3, T 5}.
(b) (i)
A ∪B = {H2, H4, H6, H3, H5, T 2, T 3, T 5}
(ii)
B ∩C = {T 3, T 5}
(iii)
B ∩Ac ∩Cc = {H3, H5, T 2}
(c) A and C are mutually exclusive since A ∩C = .
7.2. A pair of dice is tossed. (See Example 7.2.) Find the number of elements in each event:
(a) A = {two numbers are equal}
(c) C = {5 appears on the ﬁrst die}
(b) B = {sum is 10 or more}
(d) D = {5 appears on at least one die}
Use Fig. 7-1(b) to help count the number of elements in the event.
(a) A = {(1, 1), (2, 2), . . . , (6, 6)}, so n(A) = 6.
(b) B = {(6, 4), (5, 5), (4, 6), (6, 5), (5, 6), (6, 6)}, so n(B) = 6.
(c) C = {(5, 1), (5, 2), . . . , (5, 6)}, so n(C) = 6.
(d) There are six pairs with 5 as the ﬁrst element, and six pairs with 5 as the second element. However, (5, 5) appears
in both places. Hence
n(D) = 6 + 6 −1 = 11
Alternately, count the pairs in Fig. 7-1(b) which are in D to get n(D) = 11.
FINITE EQUIPROBABLE SPACES
7.3 Determine the probability p of each event:
(a) An even number appears in the toss of a fair die;
(b) One or more heads appear in the toss of three fair coins;
(c) A red marble appears in a random drawing of one marble from a box containing four white, three red,
and ﬁve blue marbles.
Each sample space S is an equiprobable space. Thus, for each event E, use:
P(E) = number of elements in E
number of elements in S = n(E)
n(S)
(a) The event can occur in three ways (2, 4 or 6) out of 6 cases; hence p = 3
6 = 1
2.
(b) There are 8 cases:
HHH, HHT , HT H, HT T , T HH, T HT , T T H, T T T
Only the last case is not favorable; hence p = 7/8.
(c) There are 4 + 3 + 5 = 12 marbles of which three are red; hence p =
3
12 = 1
4.

138
PROBABILITY
[CHAP. 7
7.4. A single card is drawn from an ordinary deck of 52 cards. (See Fig. 7-2.) Find the probability p that the
card is a:
(a) face card ( jack, queen or king);
(c) face card and a heart;
(b) heart;
(d) face card or a heart.
Here n(S) = 52.
(a) There are 4(3) = 12 face cards; hence p = 12
52 = 3
13.
(b) There are 13 hearts; hence p = 13
52 = 1
4.
(c) There are three face cards which are hearts; hence p = 3
52.
(d) Letting F = {face cards} and H = {hearts}, we have
n(F ∪H) = n(F) + n(H) −n(F ∩H) = 12 + 13 −3 = 22
Hence p = 22
52 = 11
26.
7.5. Two cards are drawn at random from an ordinary deck of 52 cards. Find the probability p that: (a) both are
spades; (b) one is a spade and one is a heart.
There are
52
2

= 1326 ways to draw 2 cards from 52 cards.
(a) There are
13
2

= 78 ways to draw 2 spades from 13 spades; hence
p = number of ways 2 spades can be drawn
number of ways 2 cards can be drawn =
78
1326 = 3
51
(b) There are 13 spades and 13 hearts, so there are 13·13 = 169 ways to draw a spade and a heart. Thus p =
169
1326 =
13
102.
7.6. Consider the sample space in Problem 7.1. Assume the coin and die are fair; hence S is an equiprobable
space. Find:
(a) P (A), P (B), P(C)
(b) P (A ∪B), P (B ∩C), P(B ∩AC ∩CC)
Since S is an equiprobable space, use P(E) = n(E)/n(S). Here n(S) = 12. So we need only count the number
of elements in the given set.
(a) P (A) =
3
12,
P(B) =
6
12,
P (C) =
3
12
(b) P (A ∪B) =
8
12,
P (B ∩C) =
2
12,
P (B ∩AC ∩CC) =
3
12
7.7. A box contains two white socks and two blue socks. Two socks are drawn at random. Find the probability
p they are a match (the same color).
There are
4
2

= 6 ways to draw two of the socks. Only two pairs will yield a match. Thus p = 2
6 = 1
3.
7.8. Five horses are in a race. Audrey picks two of the horses at random, and bets on them. Find the probability
p that Audrey picked the winner.
There are
5
2

= 10 ways to pick two of the horses. Four of the pairs will contain the winner. Thus p =
4
10 = 2
5.

CHAP. 7]
PROBABILITY
139
FINITE PROBABILITY SPACES
7.9. A sample space S consists of four elements; that is, S = {a1, a2, a3, a4}. Under which of the following
functions does S become a probability space?
(a)
P (a1) = 1
2
P(a2) = 1
3
P(a3) = 1
4
P(a4) = 1
5
(b)
P (a1) = 1
2
P(a2) = 1
4
P(a3) = −1
4 P (a4) = 1
2
(c)
P(a1) = 1
2
P(a2) = 1
4
P(a3) = 1
8
P(a4) = 1
8
(d)
P (a1) = 1
2
P(a2) = 1
4
P(a3) = 1
4
P(a4) = 0
(a) Since the sum of the values on the sample points is greater than one, the function does not deﬁne S as a probability
space.
(b) Since P (a3) is negative, the function does not deﬁne S as a probability space.
(c) Since each value is nonnegative and the sum of the values is one, the function does deﬁne S as a probability space.
(d) The values are nonnegative and add up to one; hence the function does deﬁne S as a probability space.
7.10. A coin is weighted so that heads is twice as likely to appear as tails. Find P(T ) and P(H).
Let P (T ) = p; then P (H) = 2p. Now set the sum of the probabilities equal to one, that is, set p + 2p = 1.
Then p = 1
3. Thus P (H) = 1
3 and P (T ) = 2
3.
7.11. Suppose A and B are events with P(A) = 0.6, P (B) = 0.3, and P(A ∩B) = 0.2. Find the probability
that:
(a) A does not occur;
(c) A or B occurs;
(b) B does not occur;
(d) Neither A nor B occurs.
(a) P (not A) = P(AC) = 1 −P(A) = 0.4.
(b) P (not B) = P(BC) = 1 −P(B) = 0.7.
(c) By the Addition Principle,
P(A or B)
=
P (A ∪B) = P (A) + P(B) −P(A ∩B)
=
0.6 + 0.3 −0.2 = 0.7
(d) Recall (DeMorgan’s Law) that neither A nor B is the complement of A ∪B. Thus:
P (neither A nor B) = P ((A ∪B)C) = 1 −P(A ∪B) = 1 −0.7 = 0.3
7.12. Prove Theorem 7.2: P(Ac) = 1 −P(A).
S = A ∪Ac where A and Ac are disjoint. Our result follows from the following:
1 = P (S) = P(A ∪Ac) = P (A) + P(Ac)
7.13. Prove Theorem 7.3: (i) P() = 0; (ii) P(A\B) = P(A)−P(A∩B); (iii) If A ⊆B, then P(A) ≤P(B).
(i)  = Sc and P(S) = 1. Thus P() = 1 −1 = 0.
(ii) As indicated by Fig. 7-6(a), A = (A\B) ∪(A ∩B) where A\B and A ∩B are disjoint. Hence
P (A) = P(A\B) + P(A ∩B)
From which our result follows.
(iii) If A ⊆B, then, as indicated by Fig. 7-6(b), B = A ∪(B\A) where A and B\A are disjoint. Hence
P (B) = P (A) + P(B\A)
Since P (B\A) ≥0, we have P(A) ≤P(B).

140
PROBABILITY
[CHAP. 7
Fig. 7-6
7.14. Prove Theorem 7.4 (Addition Principle): For any events A and B,
P(A ∪B) = P(A) + P(B) −P(A ∩B)
As indicated by Fig. 7-6(c), A ∪B = (A\B) ∪B where A\B and B are disjoint sets. Thus, using Theorem 7.3(ii),
P (A ∪B) = P (A\B) + P(B) = P (A) −P(A ∩B) + P(B)
= P(A) + P(B) −P(A ∩B)
CONDITIONAL PROBABILITY
7.15. A pair of fair dice is thrown. (See Fig. 7-1(b).) Find the probability that the sum is 10 or greater if:
(a) 5 appears on the ﬁrst die; (b) 5 appears on at least one die.
(a) If a 5 appears on the ﬁrst die, then the reduced sample space is
A = {(5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6)}
The sum is 10 or greater on two of the six outcomes: (5, 5), (5, 6). Hence p = 2
6 = 1
3.
(b) If a 5 appears on at least one of the dice, then the reduced sample space has eleven elements.
B = {(5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (1, 5), (2, 5), (3, 5), (4, 5), (6, 5)}
The sum is 10 or greater on three of the eleven outcomes: (5, 5), (5, 6), (6, 5). Hence p =
3
11.
7.16. In a certain college town, 25% of the students failed mathematics (M), 15% failed chemistry (C), and
10% failed both mathematics and chemistry. A student is selected at random.
(a) If he failed chemistry, ﬁnd the probability that he also failed mathematics.
(b) If he failed mathematics, ﬁnd the probability that he also failed chemistry.
(c) Find the probability that he failed mathematics or chemistry.
(d) Find the probability that he failed neither mathematics nor chemistry.
(a) The probability that a student failed mathematics, given that he failed chemistry, is
P (M|C) = P(M ∩C)
P(C)
= 0.10
0.15 = 2
3
(b) The probability that a student failed chemistry, given that he failed mathematics is
P (C|M) = P(C ∩M)
P(M)
= 0.10
0.25 = 2
5
(c) By the Addition Principle (Theorem 7.4),
P (M ∪C) = P(M) + P (C) −P(M ∩C) = 0.25 + 0.15 −0.10 = 0.30

CHAP. 7]
PROBABILITY
141
(d) Students who failed neither mathematics nor chemistry form the complement of the set M ∪C, that is, they form
the set (M ∪C)C. Hence
P ((M ∪C)C) = 1 −P(M ∪C) = 1 −0.30 = 0.70
7.17. Apair of fair dice is thrown. Given that the two numbers appearing are different, ﬁnd the probability p that:
(a) the sum is 6; (b) an one appears; (c) the sum is 4 or less.
There are 36 ways the pair of dice can be thrown, and six of them, (1, 1), (2, 2), . . . , (6, 6), have the same
numbers. Thus the reduced sample space will consist of 36 −6 = 30 elements.
(a) The sum 6 can appear in four ways: (1, 5), (2, 4), (4, 2), (5, 1). (We cannot include (3, 3) since the numbers,
are the same.) Hence p =
4
30 =
2
15.
(b) An one can appear in 10 ways: (1, 2), (1, 3), . . . , (1, 6) and (2, 1), (3, 1), . . . , (6, 1). Therefore p = 10
30 = 1
3.
(c) The sum of 4 or less can occur in four ways: (3, 1), (1, 3), (2, 1), (1, 2). Thus p =
4
30 =
2
15.
7.18. A class has 12 boys and 4 girls. Suppose three students are selected at random from the class. Find the
probability p that they are all boys.
The probability that the ﬁrst student selected is a boy is 12/16 since there are 12 boys out of 16 students. If the
ﬁrst student is a boy, then the probability that the second is a boy is 11/15 since there are 11 boys left out of 15 students.
Finally, if the ﬁrst two students selected were boys, then the probability that the third student is a boy is 10/14 since
there are 10 boys left out of 14 students. Thus, by the multiplication theorem, the probability that all three are boys is
p = 12
16 · 11
15 · 10
14 = 11
28
Another Method
There are C(16, 3) = 560 ways to select three students out of the 16 students, and C(12, 3) = 220 ways to select
three boys out of 12 boys; hence
p = 220
560 = 11
28
Another Method
If the students are selected one after the other, then there are 16 · 15 · 14 ways to select three students, and
12 · 11 · 10 ways to select three boys; hence
p = 2 · 11 · 10
16 · 15 · 14 = 11
28
INDEPENDENCE
7.19. The probability that A hits a target is 1
3 and the probability that B hits a target is 1
5. They both ﬁre at the
target. Find the probability that:
(a) A does not hit the target;
(c) one of them hits the target;
(b) both hit the target;
(d) neither hits the target.
We are given P (A) = 1
3 and P(B) = 1
5 (and we assume the events are independent).
(a) P (not A) = P(AC) = 1 −P (A) = 1 −1
3 = 2
3.
(b) Since the events are independent,
P(A and B) = P(A ∩B) = P (A) · P(B) = 1
3 · 1
5 =
1
15
(c) By the Addition Principle (Theorem 7.4),
P(A or B) = P (A ∪B) = P (A) + P (B) −P(A ∩B) = 1
3 + 1
5 −1
15 =
7
15

142
PROBABILITY
[CHAP. 7
(d) We have
P (neither A nor B) = P((A ∪B)C) = 1 −P(A ∪B) = 1 −7
15 =
8
15
7.20. Consider the following events for a family with children:
A = (children of both sexes},
B = {at most one boy}.
(a) Show that A and B are independent events if a family has three children.
(b) Show that A and B are dependent events if a family has only two children.
(a) We have the equiprobable space S = {bbb, bbg, bgb, bgg, gbb, gbg, ggb, ggg}. Here
A = {bbg, bgb, bgg, gbb, gbg, ggb}
and so
P (A) = 6
8 = 3
4
B = {bgg, gbg, ggb, ggg}
and so
P(B) = 4
8 = 1
2
A ∩B = {bgg, gbg, ggb}
and so
P(A ∩B) = 3
8
Since P (A)P(B) = 3
4 · 1
2 = 3
8 = P(A ∩B) A and B are independent.
(b) We have the equiprobable space S = {bb, bg, gb, gg}. Here
A = {bg, gb}
and so
P (A) = 1
2
B = {bg, gb, gg}
and so
P(B) = 3
4
A ∩B = {bg, gb}
and so
P(A ∩B) = 1
2
Since P (A)P(B) ̸= P(A ∩B), A and B are dependent.
7.21. Box A contains ﬁve red marbles and three blue marbles, and box B contains three red and two blue.
A marble is drawn at random from each box.
(a) Find the probability p that both marbles are red.
(b) Find the probability p that one is red and one is blue.
(a) The probability of choosing a red marble from A is 5
8 and from B is 3
5. Since the events are independent,
P = 5
8 · 3
5 = 3
8.
(b) The probability p1 of choosing a red marble from A and a blue marble from B is 5
8 · 2
5 = 1
4. The probability p2
of choosing a blue marble from A and a red marble from B is 3
8 · 3
5 =
9
40. Hence p = p1 + p2 = 1
4 + 9
40 = 19
40.
7.22. Prove: If A and B are independent events, then Ac and Bc are independent events.
Let P(A) = x and P (B) = y. Then P(Ac) = 1 −x and P(Bc) = 1 −y. Since A and B are independent.
P(A ∩B) = P (A)P(B) = xy. Furthermore,
P (A ∪B) = P(A) + P(B) −P(A ∩B) = x + y −xy
By DeMorgan’s law, (A ∪B)c = Ac ∩Bc; hence
P(Ac ∩Bc) = P((A ∪B)c) = 1 −P(A ∪B) = 1 −x −y + xy
On the other hand,
P(Ac)P(Bc) = (1 −x)(1 −y) = 1 −x −y + xy
Thus P (Ac ∩Bc) = P (Ac)P(Bc), and so Ac and Bc are independent.
In similar fashion, we can show that A and Bc, as well as Ac and B, are independent.

CHAP. 7]
PROBABILITY
143
REPEATED TRIALS, BINOMIAL DISTRIBUTION
7.23. Suppose that, whenever horses a, b, c, d race together, their respective probabilities of winning are 0.2,
0.5, 0.1, 0.2. That is, S = {a, b, c, d} where P(a) = 0.2, P(b) = 0.5, P(c) = 0.1, P(d) = 0.2. They race
three times.
(a) Describe and ﬁnd the number of elements in the product probability space S3.
(b) Find the probability that the same horse wins all three races.
(c) Find the probability that a, b, c each win one race.
For notational convenience, we write xyz for (x, y, z).
(a) By deﬁnition, S3 = S × S × S = {xyz | x, y, z ∈S} and P(xyz) = P(x)P(y)P(z).
Thus, in particular, S3 contains 43 = 64 elements.
(b) We seek the probability of the event A = {aaa, bbb, ccc, ddd}. By deﬁnition,
P(aaa) = (0.2)3 = 0.008,
P(ccc) = (0.1)3 = 0.001
P(bbb) = (0.5)3 = 0.125,
P (ddd) = (0.2)3 = 0.008
Thus P (A) = 0.0008 + 0.125 + 0.001 + 0.008 = 0.142.
(c) We seek the probability of the event B = {abc, acb, bac, bca, cab, cba}. Every element in B has the same
probability, the product (0.2)(0.5)(0.1) = 0.01. Thus P(B) = 6(0.01) = 0.06.
7.24. The probability that John hits a target is p = 1
4. He ﬁres n = 6 times. Find the probability that he hits the
target: (a) exactly two times; (b) more than four times; (c) at least once.
This is a binomial experiment with n = 6, p =
1
4, and q = 1 −p =
3
4; that is, B(6, 1
4). Accordingly, we use
Theorem 7.7.
(a) P (2) =
 6
2
  1
4
2  3
4
4 = 15(34)/(46) = 1215
4096 ≈0.297.
(b) P (5) + P (6) =
 6
5
  1
4
5  3
4
1 +
 1
4
6 = 18
4
6 + 1
4
6 = 19
4
6 =
19
4096 ≈0.0046.
(c) P (0) =
 3
4
6 =
729
4096, so P (X > 0) = 1 −729
4096 = 3367
4096 ≈0.82.
7.25. A family has six children. Find the probability p that there are: (a) three boys and three girls; (b) fewer
boys than girls. Assume that the probability of any particular child being a boy is 1
2.
Here n = 6 and p = q = 1
2.
(a) p = P (3 boys) =
6
3
 1
2
3 1
2
2
= 20
64 = 5
16.
(b) There are fewer boys than girls if there are zero, one, or two boys. Hence
p = P (0 boys) + P (1 boy) + P (2 boys) =
1
2
6
+
6
1
 1
2
5
+
6
2
 1
2
2 1
2
4
= 11
32 = 0.34
7.26. A man ﬁres at a target n = 6 times and hits it k = 2 times, (a) List the different ways that this can happen,
(b) How many ways are there?
(a) List all sequences with two S’s (successes) and four F’s (failures):
SSFFFF,
SFSFFF,
SFFSFF,
SFFFSF,
SFFFFS,
FSSFFF,
FSFSFF,
FSFFSF,
FSFFFS,
FFSSFF,
FFSFSF,
FFSFFS,
FFFSSF,
FFFSFS,
FFFFSS.
(b) There are 15 different ways as indicated by the list. Observe that this is equal to
6
2

since we are distributing
k = 2 letters S among the n = 6 positions in the sequence.

144
PROBABILITY
[CHAP. 7
7.27. Prove Theorem 7.7: The probability of exactly k successes in a binomial experiment B(n, p) is given by
P(k) = p(k successes) =
 n
k

pkqn−k
The probability of one or more successes is 1 −qn.
The sample space of the n repeated trials consists of all n-tuples (i.e., n-element sequences) whose components
are either S (success) or F (failure). Let A be the event of exactly k successes. Then A consists of all n-tuples of which
k components are S and n−k components are F. The number of such n-tuples in the event A is equal to the number of
ways that k letters S can be distributed among the n components of an n-tuple; hence A consists of C(n, k) =
 n
k

sample points. The probability of each point in A is pkqn−k; hence
P(A) =
 n
k

pkqn−k
In particular, the probability of no successes is
P (0) =
 n
0

p0qn = qn
Thus the probability of one or more successes is 1 −qn.
RANDOM VARIABLES, EXPECTATION
7.28. A player tosses two fair coins. He wins $2 if two heads occur, and $1 if one head occurs. On the other
hand, he loses $3 if no heads occur. Find the expected value E of the game. Is the game fair? (The game
is fair, favorable, or unfavorable to the player according as E = 0, E > 0 or E < 0.)
The sample space S = {HH, HT , T H, T T }, and each sample point has probability 1/4. For the player’s gain,
we have
X(HH) = $2,
X(HT ) = X(T H) = $1,
X(T T ) = −$3
Hence the distribution of X follows:
xi
2
1
−3
pi
1/4
2/4
1/4
Thus E = E(X) = 2(1/4) + 1(2/4) −3(1/4) = $0.25. Since E(X) > 0, the game is favorable to the player.
7.29. You have won a contest. Your prize is to select one of three envelopes and keep what is in it. Each of two
of the envelopes contains a check for $30, but the third envelope contains a check for $3000. Find the
expectation E of your winnings (as a probability distribution).
Let X denote your winnings. Then X = 30 or 3000, and P(30) = 2
3 and P(3000) = 1
3. Hence
E = E(X) = 30 · 2
3 + 3000 · 1
3 = 20 + 1000 = 1020
7.30. A random sample with replacement of size n = 2 is drawn from the set {1, 2, 3}, yielding the following
9-element equiprobable sample space:
S = {(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)}
(a) Let X denote the sum of the two numbers. Find the distribution f of X, and ﬁnd the expected value
E(X).
(b) Let Y denote the minimum of the two numbers. Find the distribution g of X, and ﬁnd the expected
value E(Y).
(a) The random variable X assumes the values 2, 3, 4, 5, 6. We compute the distribution f of X:
(i) One point (1, 1) has sum 2; hence f (2) = 1
9.

CHAP. 7]
PROBABILITY
145
(ii) Two points, (1, 2), (2, 1), have sum 3; hence f (3) = 2
9.
(iii) Three points, (1, 3), (2, 2), (1, 3), have sum 4; hence f (4) = 3
9.
(iv) Two points, (2, 3), (3, 2), have sum 5; hence f (5) = 2
9.
(v) One point (3, 3) has sum 6; hence f (6) = 1
9.
Thus the distribution f of X is:
x
2
3
4
5
6
f (x)
1/9
2/9
3/9
2/9
1/9
The expected value E(X) of X is obtained by multiplying each value of x by its probability f (x) and taking the sum.
Hence
E(X) = 2
1
9

+ 3
2
9

+ 4
3
9

+ 5
2
9

+ 6
1
9

= 4
(b) The random variable Y only assumes the values 1, 2, 3. We compute the distribution g of Y:
(i) Five points, (1, 1), (1, 2), (1, 3), (2, 1), (3, 1), have minimum 1; hence g(1) = 5
9.
(ii) Three points, (2, 2), (2, 3), (3, 2), have minimum 2; hence g(2) = 3
9.
(iii) One point (3, 3) has minimum 3; hence g(3) = 1
9.
Thus the following is the distribution g of Y:
y
1
2
3
g(y)
5/9
3/9
1/9
The expected value E(Y) of Y is:
E(Y) = 1
5
9

+ 2
3
9

+ 3
1
9

= 12
9 ≈1.33
7.31. A linear array EMPLOYEE has n elements. Suppose NAME appears randomly in the array, and there is
a linear search to ﬁnd the location K of NAME, that is, to ﬁnd K such that EMPLOYEE[K] = NAME.
Let f (n) denote the number of comparisons in the linear search.
(a) Find the expected value of f (n).
(b) Find the maximum value (worst case) of f (n).
(a) Let X denote the number of comparisons. Since NAME can appear in any position in the array with the same
probability of 1/n, we have X = 1, 2, 3, . . . , n, each with probability 1/n. Hence
f (n) = E(X)
=
1 · 1
n + 2 · 1
n + 3 · 1
n + · · · + n · 1
n
=
(1 + 2 + · · · + n) · 1
n = n(n+1)
2
· 1
n = n+1
2
(b) If NAME appears at the end of the array, then f (n) = n.
MEAN, VARIANCE, STANDARD DEVIATION
7.32. Find the mean µ = E(X), variance σ 2 = V ar(X), and standard deviation σ = σx of each distribution:
(a)
xi
2
3
11
(b)
xi
1
3
4
5
pi
1/3
1/2
1/6
pi
0.4
0.1
0.2
0.3
Use the formulas:
µ = E(X) = x1p1 + x2p2 + · · · + xmpm = xipi,
σ 2 = V ar (X) = E(X2) −µ2
E(X2) = x2
1p1 + x2
2p2 + · · · + x2
mpm = x2
i pi,
σ = σx = √V ar (X)

146
PROBABILITY
[CHAP. 7
(a) µ = xipi = 2
 1
3

+ 3
 1
2

+ 11
 1
6

= 4
E(X2) = x2
i pi = 22  1
3

+ 32  1
2

+ 112  1
6

= 26
σ 2 = V ar(X) = E(X2) −µ2 = 26 −42 = 10
σ = √V ar(X) =
√
10 = 3.2
(b) µ = xipi = 1(0.4) + 3(0.1) + 4(0.2) + 5(0.3) = 3
E(X2) = x2
i pi = 1(0.4) + 9(0.1) + 16(0.2) + 25(0.3) = 12
σ 2 = V ar(X) = E(X2) −µ2 = 12 −9 = 3
σ = √V ar(X) =
√
3 = 1.7
7.33. A fair die is tossed yielding the equiprobable sample space S = {1, 2, 3, 4, 5, 6} where n(S) = 6 and each
point has probability 1/6.
(a) Let X be the random variable which denotes twice the number that occurs. Find the distribution f of
X and its expectation E(X).
(b) Let Y be the random variable which assigns 1 or 3 according as an odd or even number occurs. Find the
distribution g of Y and its expectation E(Y).
(a) Here the range space RX = {2, 4, 6, 8, 10, 12} since
X(1) = 2,
X(2) = 4,
X(3) = 6,
X(4) = 8,
X(5) = 10,
X(6) = 12
Also, each number occurs with probability 1/6. Thus the distribution f of X follows:
x
2
4
6
8
10
12
f (x)
1/6
1/6
1/6
1/6
1/6
1/6
Hence
E(X) =

xf (x) = 2
6 + 4
6 + 6
6 + 8
6 + 10
6 + 12
6 = 7
(b) Here the range space RY = {1, 3} since
Y(1) = 1,
Y(2) = 3,
Y(3) = 1,
Y(4) = 3,
Y(5) = 1,
Y(6) = 3
We compute the distribution g of Y using the fact that n(S) = 6:
(i) Three points 1, 3, 5 are odd and have image 1; hence g(1) = 3/6.
(ii) Three points 2, 4, 6 are even and have image 3; hence g(3) = 3/6.
Thus the distribution g of Y is:
y
1
3
g(y)
3/6
3/6
Hence
E(Y) =

yg(y) = 3
6 + 9
6 = 2
7.34. Let Z = X + Y where X and Y are the random variables in Problem 7.33. Find the distribution h of Z,
and ﬁnd E(Z). Verify that E(X + Y) = E(X) + E(Y).
The sample space is still S = {1, 2, 3, 4, 5, 6} and each point still has probability 1/6. We obtain using
Z(s) = (X + Y)(s) = X(s) + Y(s)
Z(1) = X(1) + Y(1) = 2 + 1 = 3;
Z(4) = X(4) + Y(4) = 8 + 3 = 11,
Z(2) = X(2) + Y(2) = 4 + 3 = 7;
Z(5) = X(5) + Y(5) = 10 + 1 = 11,
Z(3) = X(3) + Y(3) = 6 + 1 = 7;
Z(6) = X(6) + Y(6) = 12 + 3 = 15.
Thus the range space Rz = {3, 7, 11, 15}. We compute the distribution h of Z using the fact that n(S) = 6:
(i) One point has image 3, so h(3) = 1/6;
(iii) Two points have image 11, so h(11) = 2/6;
(ii) Two points have image 7, so h(7) = 2/6;
(iv) One point has image 15, so h(15) = 1/6.

CHAP. 7]
PROBABILITY
147
Thus the distribution h of Z follows:
z
3
7
11
15
h(z)
1/6
2/6
2/6
1/6
Hence
E(Z) =

zh(z) = 3
6 + 14
6 + 22
6 + 15
6 = 9
Accordingly,
E(X + Y) = E(Z) = 9 = 7 + 2 = E(X) + E(Y).
BINOMIAL DISTRIBUTION
7.35. The probability that a man hits a target is p = 0.1. He ﬁres n = 100 times. Find the expected number µ
of times he will hit the target, and the standard deviation σ.
This is a binomial experiment B(n, p) where n = 100, p = 0.1, and q = 1 −p = 0.9. Accordingly, we apply
Theorem 7.9 to obtain
µ = np = 100(0.1) = 10
and
σ = √npq =
!
100(0.1)(0.9) = 3
7.36. A student takes an 18-question multiple-choice exam, with four choices per question. Suppose one of
the choices is obviously incorrect, and the student makes an “educated” guess of the remaining choices.
Find the expected number E(X) of correct answers, and the standard deviation σ.
This is a biomioal experiment B(n, p) where n = 18, p = 1
3, and q = 1 −p = 2
3. Hence
E(X) = np = 18 · 1
3 = 6
and
σ = √npq =
%
18 · 1
3 · 2
3 = 2
7.37. The expectation function E(X) on the space of random variables on a sample space S can be proved to be
linear, that is,
E(X1 + X2 + · · · + Xn) = E(X1) + E(X2) + · · · + E(Xn)
Use this property to prove µ = np for a binomial experiment B(n, p).
On the sample space of n Bernoulli trials, let Xi (for i = 1, 2, . . . , n) be the random variable which has the value 1 or
0 according as the ith trial is a success or a failure. Then each Xi has the distribution
x
0
1
p(x)
q
p
Thus E(Xi) = 0(q) + 1(p) = p. The total number of successes in n trials is
X = X1 + X2 + · · · + Xn
Using the linearity property of E, we have
E(X) = E(X1 + X2 + · · · + Xn)
= E(X1) + E(X2) + · · · + E(Xn)
= p + p + · · · + p = np
MISCELLANEOUS PROBLEMS
7.38. Suppose X is a random variable with mean µ = 75 and standard deviation σ = 5.
Estimate the probability that X lies between 75 −20 = 55 and 75 + 20 = 95.
Recall Chebyshev’s Inequality states
P (µ −kσ ≤X ≤µ + kσ) ≥1 −1
k2
Here kσ = 20. Since σ = 5, we get k = 4. Then, by Chebyshev’s Inequality,
P (55 ≤X ≥95) = 1 −1
42 = 15
16 ≈0.94

148
PROBABILITY
[CHAP. 7
7.39. Let X be a random variable with mean µ = 40 and standard deviation σ = 2. Use Chebyshev’s Inequality
to ﬁnd a b for which P(40 −b ≤X ≤40 + b) ≥0.95.
First solve 1 −1/k2 = 0.95 for k as follows:
0.05 = 1
k2
or
k2 =
1
0.05 = 20
or
k =
√
20 = 2
√
5
Then, by Chebyshev’s Inequality, b = kσ = 10
√
5 ≈23.4. Hence [P(16.6 ≤X ≤63.60) ≥0.95]
7.40. Let X be a random variable with distribution f . The rth moment Mr of X is deﬁned by
Mr = E(Xr) =

xr
i f (xi)
Find the ﬁrst four moments of X if X has the distribution:
x
−2
1
3
f (x)
1/2
1/4
1/4
Note M1 is the mean of X, and M2 is used in computing the standard deviation of X.
Use the formula for Mr to obtain:
M1 =

xif (xi) = −2
 1
2

+ 1
 1
4

+ 3
 1
4

= 0
M2 =

x2
i f (xi) = 4
 1
2

+ 1
 1
4

+ 9
 1
4

= 4.5
M3 =

x3
i f (xi) = −8
 1
2

+ 1
 1
4

+ 27
 1
4

= 3
M4 =

x4
i f (xi) = 16
 1
2

+ 1
 1
4

+ 81
 1
4

= 28.5
7.41. Prove Theorem 7.10 (Chebyshev’s Inequality): For k > 0,
P(µ −kσ ≤X ≤µ + kσ) ≥1 −1
k2
By deﬁnition
σ 2 = V ar(X) =

(xi −µ)2pi
Delete all terms from the summation for which xi is in the interval [µ−kσ, µ+kσ]; that is, delete all terms for which
|xi −µ| ≤kσ. Denote the summation of the remaining terms by ∗(xi −µ)2pi. Then
&
σ 2 ≥

∗(xi −µ)2pi ≥

∗k2σ 2pi = k2σ 2 
∗pi = k2σ 2P(|X −µ| > kσ)
'
= k2σ 2[1 −P(|X −µ| ≤kσ)] = k2σ 2[1 −P(µ −kσ ≤X ≤µ + kσ)]
If σ > 0, then dividing by k2σ 2 gives
1
k2 ≥1 −P (µ −kσ ≤X ≤µ + kσ)
or
P(µ −kσ ≤X ≤µ + kσ) ≥1 −
1
k2
which proves Chebyshev’s Inequality for σ > 0. If σ = 0, then xi = µ for all pi > 0, and
P(µ −k · 0 ≤X ≤µ + k · 0) = P(X = µ) = 1 > 1 −
1
k2
which completes the proof.

CHAP. 7]
PROBABILITY
149
Supplementary Problems
SAMPLE SPACES AND EVENTS
7.42. Let A, B, and C be events. Rewrite each of the following events using set notation:
(a) A and B but not C occurs;
(c) none of the events occurs;
(b) A or C, but not B occurs;
(d) at least two of the events occur.
7.43. A penny, a dime, and a die are tossed.
(a) Describe a suitable sample space S, and ﬁnd n(S).
(b) Express explicitly the following events:
A = {two heads and an even number}
B = {2 appears}
C = {exactly one head and an odd number}
(c) Express explicitly the events: (i) A and B;
(ii) only B;
(iii) B and C.
FINITE EQUIPROBABLE SPACES
7.44. Determine the probability of each event:
(a) An odd number appears in the toss of a fair die.
(b) One or more heads appear in the toss of four fair coins.
(c) One or both numbers exceed 4 in the toss of two fair dice.
7.45. One card is selected at random from 50 cards numbered 1 to 50. Find the probability that the number on the card is;
(a) greater than 10;
(c) greater than 10 and divisible by 5;
(b) divisible by 5;
(d) greater than 10 or divisible by 5.
7.46. Of 10 girls in a class, three have blue eyes. Two of the girls are chosen at random. Find the probability that:
(a) both have blue eyes;
(c) at least one has blue eyes;
(b) neither has blue eyes;
(d) exactly one has blue eyes.
7.47. Ten students, A, B, . . ., are in a class. A committee of three is chosen at random to represent the class. Find the
probability that:
(a) A belongs to the committee;
(c) A and B belong to the committee;
(b) B belongs to the committee;
(d) A or B belong to the committee.
7.48. Three bolts and three nuts are in a box. Two parts are chosen at random. Find the probability that one is a bolt and
one is a nut.
7.49. A box contains two white socks, two blue socks, and two red socks. Two socks are drawn at random. Find the
probability they are a match (the same color).
7.50. Of 120 students, 60 are studying French, 50 are studying Spanish, and 20 are studying both French and Spanish.
A student is chosen at random. Find the probability that the student is studying: (a) French or Spanish; (b) neither
French nor Spanish; (c) only French; (d) exactly one of the two languages.
FINITE PROBABILITY SPACES
7.51. Decide which of the following functions deﬁnes a probability space on S = {a1, a2, a3}:
(a)
P(a1) = 1
4, P (a2) = 1
3, P (a3) = 1
2
(c)
P (a1) = 1
6, P(a2) = 1
3, P(a3) = 1
2
(b)
P(a1) = 2
3, P (a2) = −1
3, P(a3) = 2
3
(d)
P (a1) = 0, P(a2) = 1
3, P(a3) = 2
3
7.52. A coin is weighted so that heads is three times as likely to appear as tails. Find P(H) and P(T ).
7.53. Three students A, B, and C are in a swimming race. A and B have the same probability of winning and each is twice
as likely to win as C. Find the probability that: (a) B wins; (b) C wins; (c) B or C wins.

150
PROBABILITY
[CHAP. 7
7.54. Consider the following probability distribution:
Outcome x
1
2
3
4
5
Probability P(x)
0.2
0.4
0.1
0.1
0.2
Consider the events A = {even number}, B = {2, 3, 4, 5}, C = {1, 2}. Find:
(a) P (A), P (B), P (C);
(b) P(A ∩B), P (A ∩C), P(B ∩C).
7.55. Suppose A and B are events with P(A) = 0.7, P(B) = 0.5, and P(A ∩B) = 0.4. Find the probability that:
(a) A does not occur;
(c) A but not B occurs;
(b) A or B occurs;
(d) neither A nor B occurs.
CONDITIONAL PROBABILITY, INDEPENDENCE
7.56. A fair die is tossed. Consider events A = {2, 4, 6}, B = {1, 2}, C = {1, 2, 3, 4}. Find:
(a) P(A and B) and P(A or C),
(c) P(A|C) and P(C|A)
(b) P (A|B) and P(B|A)
(d) P (B|C) and P(C|B)
Decide whether the following are independent: (i) A and B; (ii) A and C; (iii) B and C.
7.57. Apair of fair dice is tossed. If the numbers appearing are different, ﬁnd the probability that: (a) the sum is even; (b) the
sum exceeds nine.
7.58. Let A and B be events with P(A) = 0.6, P (B) = 0.3, and P(A ∩B) = 0.2. Find:
(a) P (A ∪B);
(b) P (A|B);
(c) P (B|A).
7.59. Let A and B be events with P(A) = 1/3, P (B) = 1
4, and P(A ∪B) = 1
2.
(a) Find P (A|B) and P (B|A).
(b) Are A and B independent?
7.60. Let A and B be events with P(A) = 0.3, P(A ∪B) = 0.5, and P(B) = p. Find p if:
(a) A and B are mutually disjoint;
(b) A and B are independent;
(c) A is a subset of B.
7.61. Let A and B be independent events with P(A) = 0.3 and P(B) = 0.4. Find:
(a) P (A ∩B) and P (A ∪B);
(b)P(A|B) and P(B|A).
7.62. In a country club, 60% of the women play tennis, 40% play golf, and 20% play both tennis and golf. A woman is
chosen at random.
(a) Find the probability that she plays neither tennis nor golf.
(b) If she plays tennis, ﬁnd the probability that she plays golf.
(c) If she plays golf, ﬁnd the probability that she plays tennis.
7.63. Box A contains six red marbles and two blue marbles, and box B contains two red and four blue. A marble is drawn
at random from each box.
(a) Find the probability p that both marbles are red.
(b) Find the probability p that one is red and one is blue.
7.64. The probability that A hits a target is 1
4 and the probability that B hits a target is 1
3.
(a) If each ﬁres twice, what is the probability that the target will be hit at least once?
(b) If each ﬁres once and the target is hit only once, what is the probability that A hits the target?
7.65. Three fair coins are tossed. Consider the events:
A = {all heads or all tails},
B = {at least two heads},
C = {at most two heads}.
Of the pairs (A, B), (A, C), and (B, C), which are independent? Which are dependent?
7.66. Find P (B|A) if: (a) A is a subset of B; (b) A and B are mutually exclusive. (Assume P (A) > 0.)

CHAP. 7]
PROBABILITY
151
REPEATED TRIALS, BINOMIAL DISTRIBUTION
7.67. Whenever horses a, b, and c race together, their respective probabilities of winning are 0.3, 0.5, and 0.2. They race
three times.
(a) Find the probability that the same horse wins all three races.
(b) Find the probability that a, b, c each win one race.
7.68. The batting average of a baseball player is 0.300. He comes to bat four times. Find the probability that he will get:
(a) exactly two hits; (b) at least one hit.
7.69. The probability that Tom scores on a three-point basketball shot is p = 0.4. He shoots n = 5 times. Find the
probability that he scores: (a) exactly two times; (b) at least once.
7.70. A certain type of missile hits its target with probability P = 1
3
(a) If three missiles are ﬁred, ﬁnd the probability that the target is hit at least once.
(b) Find the number of missiles that should be ﬁred so that there is at least a 90% probability of hitting the target.
RANDOM VARIABLES
7.71. A pair of dice is thrown. Let X denote the minimum of the two numbers which occur. Find the distributions and
expectation of X.
7.72. A fair coin is tossed four times. Let X denote the longest string of heads. Find the distribution and expectation of X.
7.73. A fair coin is tossed until a head or ﬁve tails occurs. Find the expected number E of tosses of the coin.
7.74. A coin is weighted so that P (H) = 3
4 and P (T ) = 1
4. The coin is tossed three times. Let X denote the number of
heads that appear.
(a) Find the distribution f of X.
(b) Find the expectation E(X).
7.75. The probability of team A winning any game is 1
2. Suppose A plays B in a tournament. The ﬁrst team to win two games
in a row or three games wins the tournament. Find the expected number of games in the tournament.
7.76. A box contains 10 transistors of which two are defective. A transistor is selected from the box and tested until
a nondefective one is chosen. Find the expected number of transistors to be chosen.
7.77. A lottery with 500 tickets gives one prize of $100, three prizes of $50 each, and ﬁve prizes of $25 each.
(a) Find the expected winnings of a ticket. (b) If a ticket costs $1, what is the expected value of the game?
7.78. A player tosses three fair coins. He wins $5 if three heads occur, $3 if two heads occur, and $1 if only one head occurs.
On the other hand, he loses $15 if three tails occur. Find the value of the game to the player.
MEAN, VARIANCE, AND STANDARD DEVIATION
7.79. Find the mean µ, variance σ 2, and standard deviation σ of each distribution:
(a)
x
2
3
8
(b)
y
−1
0
1
2
3
f (x)
1/4
1/2
1/4
g(y)
0.3
0.1
0.1
0.3
0.2
7.80. Find the mean µ, variance σ 2, and standard deviation σ of the following two-point distribution where p + q = 1:
x
a
b
f (x)
p
q
7.81. Let W = XY where X and Y are the random variables in Problem 7.33. (Recall W(s) = (XY)(s) = X(s)Y(s).)
Find: (a) the distribution h of W; (b) ﬁnd E(W).
Does E(W) = E(X)E(Y)?
7.82. Let X be a random variable with the distribution:
x
−1
1
2
f (x)
0.2
0.5
0.3
(a) Find the mean, variance, and standard deviation of X.
(b) Find the distribution, mean, variance, and standard deviation of Y where:
(i) Y = X4; (ii) Y = 3X.

152
PROBABILITY
[CHAP. 7
BINOMIAL DISTRIBUTION
7.83. The probability that a women hits a target is p = 1/3. She ﬁres 50 times. Find the expected number µ of times she
will hit the target and the standard deviation σ.
7.84. Team A has probability p = 0.8 of winning each time it plays. Let X denote the number of times A will win in
n = 100 games. Find the mean µ, variance σ 2, and standard deviation σ of X.
7.85. An unprepared student takes a ﬁve-question true–false quiz and guesses every answer. Find the probability that the
student will pass the quiz if at least four correct answers is the passing grade.
7.86. Let X be a binomially distributed random variable B(n, p) with E(X) = 2 and V ar(X) = 4
3. Find n and p.
CHEBYSHEV’S INEQUALITY
7.87. Let X be a random variable with mean µ and standard deviation σ.
Use Chebyshev’s Inequality to estimate P(µ −3σ ≤X ≤µ + 3σ).
7.88. Let Z be the normal random variable with mean µ = 0 and standard deviation σ = 1.
Use Chebyshev’s Inequality to ﬁnd a value b for which P(−b ≤Z ≤b) = 0.9.
7.89. Let X be a random variable with mean µ = 0 and standard deviation σ = 1.5.
Use Chebyshev’s Inequality to estimate P(−3 ≤X ≤3).
7.90. Let X be a random variable with mean µ = 70.
For what value of σ will Chebyshev’s Inequality give P(65 ≤X ≤75) ≥0.95.
Answers to Supplementary Problems
The notation [x1, . . . , xn; f (x1), . . . , f (xn)] will be used
for the distribution f = {(xi, f (Xi)}.
7.42. (a) A ∩B ∩CC;
(c) (A ∪B ∪B)C = AC ∩BCCC;
(b) (A∪C)∩BC;
(d) (A∩B)∪(A∩C)∪(B ∩C).
7.43. (a) n(S) = 24; S = {H, T } × {H, T } × {1, 2, . . . , 6}
(b) A = {HH2, HH4, HH6}; B = {HH2, HT 2,
T H2, T T 2}; C = {HT 1, HT 3, HT 5, T H1, T H3,
T H5}
(c) (i) HH2; (ii) HT 2, T H2, T T 2; (iii) .
7.44. (a) 3/6; (b) 15/16; (c) 20/36.
7.45. (a) 40/50; (b) 10/50; (c) 8/50; (d) 42/50.
7.46. (a) 1/15; (b) 7/15; (c) 8/15; (d) 7/15.
7.47. (a) 3/10; (b) 3/10; (c) 1/15; (d) 8/15.
7.48. 3/5.
7.49. 1/5.
7.50. (a) 3/4; (b) 1/4; (c) 1/3; (d) 7/12.
7.51. (c) and (d).
7.52. P(H) = 3/4; P (T ) = 1/4.
7.53. (a) 2/5; (b) 1/5; (c) 3/5.
7.54. (a) 0.6, 0.8, 0.5; (b) 0.5, 0.7, 0.4.
7.55. (a) 0.3; (b) 0.8; (c) 0.3; (d) 0.2.
7.56. (a) 1/6, 5/6; (b) 1/2, 1/3; (c) 1/2, 2/3; (d) 1/2,
(i) Yes; (ii) yes (iii) no.
7.57. (a) 12/30; (b) 4/30.
7.58. (a) 0.7; (b) 2/3; (c) 1/3.
7.59. (a) 1/3, 1/4; (b) yes.
7.60. (a) 0.2; (b) 2/7; (c) 0.5.
7.61. (a) 0.12, 0.58; (b) 3/10, 4/10.
7.62. (a) 20%; (b) 1/3; (c) 1/2.
7.63. (a) 1/4; (b) 7/12.
7.64. (a) 3/4; (b) 1/3.
7.65. Only (A, B) are independent.
7.66. (a) l, (b) 0.
7.67. (a) 0.16; (b) 0.18.
7.68. (a) 6(0.3)2(0.7)2 = 0.2646; (b) 1 −(0.7)4 = 0.7599.
7.69. (a) 10(0.4)2(0.6)3; (b) 1 −(0.6)5.
7.70. (a) 1 −(2/3)5 = 211/243; (b) Six times.
7.71. [1, 2, 3, 4, 5, 6; 11/36, 9/36, 7/36, 5/36, 3/36, 1/36];
E(X) = 91/36 ≈2.5.
7.72. [0, 1, 2, 3, 4; 1/16, 7/16, 5/16, 2/16, 1/16];
E(X) = 27/16 ≈1.7.
7.73. E = 1.9.
7.74. (a) [0,
1,
2,
3;
1/64,
9/64,
27/64,
27/64];
(b) E(X) = 2.25.
7.75. 23/8 ≈2.9.
7.76. 11/9 ≈1.2.
7.77. (a) 0.75; (b) −0.25.
7.78. 0.25.
7.79. (a) µ = 4, σ 2 = 5.5, σ = 2.3; (b) µ = 1, σ 2 = 2.4,
σ = 1.5.
7.80. µ = ap + bq; σ 2 = pq(a −b)2; σ = |a −b|√pq

CHAP. 7]
PROBABILITY
153
7.81. (a)
[2,
6,
10,
12,
24,
36;
1/6, . . . , 1/6];
(b) E(W) = 15. No.
7.82. (a) 0.9, 1.09, 1.04; (b) (i) [1, 1, 16; 0.2, 0.5, 0.3], 5.5,
47.25, 6.87; (ii) [1/3, 3, 9; 0.2, 0.5, 0.3], 4.67, 5.21,
3.26.
7.83. µ = 50/3 = 16.67; σ = 10/3 = 3.33
7.84. µ = 80; σ 2 = 16; σ = 4
7.85. 6/32.
7.86. n = 6, p = 1/3
7.87. P ≥1 −1/8 ≈8.75
7.88. b =
√
10 ≈3.16
7.89. P ≥0.75
7.90. σ = 5/
√
20 ≈1.12

CHAPTER 8
Graph Theory
8.1
INTRODUCTION, DATA STRUCTURES
Graphs, directed graphs, trees and binary trees appear in many areas of mathematics and computer science.
This and the next two chapters will cover these topics. However, in order to understand how these objects may be
stored in memory and to understand algorithms on them, we need to know a little about certain data structures.
We assume the reader does understand linear and two-dimensional arrays; hence we will only discuss linked lists
and pointers, and stacks and queues below.
Linked Lists and Pointers
Linked lists and pointers will be introduced by means of an example. Suppose a brokerage ﬁrm maintains a
ﬁle in which each record contains a customer’s name and salesman; say the ﬁle contains the following data:
Customer
Adams
Brown
Clark
Drew
Evans
Farmer
Geller
Hiller
Infeld
Salesman
Smith
Ray
Ray
Jones
Smith
Jones
Ray
Smith
Ray
There are two basic operations that one would want to perform on the data:
Operation A: Given the name of a customer, ﬁnd his salesman.
Operation B: Given the name of a salesman, ﬁnd the list of his customers.
We discuss a number of ways the data may be stored in the computer, and the ease with which one can perform
the operations A and B on the data.
Clearly, the ﬁle could be stored in the computer by an array with two rows (or columns) of nine names.
Since the customers are listed alphabetically, one could easily perform operation A. However, in order to perform
operation B one must search through the entire array.
One can easily store the data in memory using a two-dimensional array where, say, the rows correspond to
an alphabetical listing of the customers and the columns correspond to an alphabetical listing of the salesmen,
and where there is a 1 in the matrix indicating the salesman of a customer and there are 0’s elsewhere. The main
drawback of such a representation is that there may be a waste of a lot of memory because many 0’s may be in the
matrix. For example, if a ﬁrm has 1000 customers and 20 salesmen, one would need 20 000 memory locations
for the data, but only 1000 of them would be useful.
We discuss below a way of storing the data in memory which uses linked lists and pointers. By a linked list,
we mean a linear collection of data elements, called nodes, where the linear order is given by means of a ﬁeld
154
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

CHAP. 8]
GRAPH THEORY
155
of pointers. Figure 8-1 is a schematic diagram of a linked list with six nodes. That is, each node is divided into
two parts: the ﬁrst part contains the information of the element (e.g., NAME, ADDRESS, . . .), and the second
part, called the link ﬁeld or nextpointer ﬁeld, contains the address of the next node in the list. This pointer ﬁeld
is indicated by an arrow drawn from one node to the next node in the list. There is also a variable pointer, called
START in Fig. 8-1, which gives the address of the ﬁrst node in the list. Furthermore, the pointer ﬁeld of the last
node contains an invalid address, called a null pointer, which indicates the end of the list.
Fig. 8-1
Linked list with 6 nodes
One main way of storing the original data pictured in Fig. 8-2, uses linked lists. Observe that there are separate
(sorted alphabetically) arrays for the customers and the salesmen. Also, there is a pointer array SLSM parallel
to CUSTOMER which gives the location of the salesman of a customer, hence operation A can be performed
very easily and quickly. Furthermore, the list of customers of each salesman is a linked list as discussed above.
Speciﬁcally, there is a pointer array START parallel to SALESMAN which points to the ﬁrst customer of a
salesman, and there is an array NEXT which points to the location of the next customer in the salesman’s list
(or contains a 0 to indicate the end of the list). This process is indicated by the arrows in Fig. 8-2 for the
salesman Ray.
Fig. 8-2
Operation B can now be performed easily and quickly; that is, one does not need to search through the list
of all customers in order to obtain the list of customers of a given salesman. Figure 8-3 gives such an algorithm
(which is written in pseudocode).
Stacks, Queues, and Priority Queues
There are data structures other than arrays and linked lists which will occur in our graph algorithms. These
structures, stacks, queues, and priority queues, are brieﬂy described below.
(a) Stack: A stack, also called a last-in ﬁrst-out (LIFO) system, is a linear list in which insertions and deletions
can take place only at one end, called the “top” of the list. This structure is similar in its operation to a stack
of dishes on a spring system, as pictured in Fig. 8-4(a). Note that new dishes are inserted only at the top of
the stack and dishes can be deleted only from the top of the stack.

156
GRAPH THEORY
[CHAP. 8
Fig. 8-3
(b) Queue: A queue, also called a ﬁrst-in ﬁrst-out (FIFO) system, is a linear list in which deletions can only take
place at one end of the list, the “front” of the list, and insertions can only take place at the other end of the
list, the “rear” of the list. The structure operates in much the same way as a line of people waiting at a bus
stop, as pictured in Fig. 8-4(b). That is, the ﬁrst person in line is the ﬁrst person to board the bus, and a new
person goes to the end of the line.
(c) Priovity queue: Let S be a set of elements where new elements may be periodically inserted, but where the
current largest element (element with the “highest priority”) is always deleted. Then S is called a priority
queue. The rules “women and children ﬁrst” and “age before beauty” are examples of priority queues. Stacks
and ordinary queues are special kinds of priority queues. Speciﬁcally, the element with the highest priority
in a stack is the last element inserted, but the element with the highest priority in a queue is the ﬁrst element
inserted.
Fig. 8-4
8.2
GRAPHS AND MULTIGRAPHS
A graph G consists of two things:
(i) A set V = V (G) whose elements are called vertices, points, or nodes of G.
(ii) A set E = E(G) of unordered pairs of distinct vertices called edges of G.
We denote such a graph by G(V, E) when we want to emphasize the two parts of G.

CHAP. 8]
GRAPH THEORY
157
Vertices u and v are said to be adjacent or neighbors if there is an edge e = {u, v}. In such a case, u and v
are called the endpoints of e, and e is said to connect u and v. Also, the edge e is said to be incident on each of its
endpoints u and v. Graphs are pictured by diagrams in the plane in a natural way. Speciﬁcally, each vertex v in
V is represented by a dot (or small circle), and each edge e = {v1, v2} is represented by a curve which connects
its endpoints v1 and v2 For example, Fig. 8-5(a) represents the graph G(V, E) where:
(i) V consists of vertices A, B, C, D.
(ii) E consists of edges e1 = {A, B}, e2 = {B, C}, e3 = {C, D}, e4 = {A, C}, e5 = {B, D}.
In fact, we will usually denote a graph by drawing its diagram rather than explicitly listing its vertices and edges.
Fig. 8-5
Multigraphs
Consider the diagram in Fig. 8-5(b). The edges e4 and e5 are called multiple edges since they connect the
same endpoints, and the edge e6 is called a loop since its endpoints are the same vertex. Such a diagram is called
a multigraph; the formal deﬁnition of a graph permits neither multiple edges nor loops. Thus a graph may be
deﬁned to be a multigraph without multiple edges or loops.
Remark: Some texts use the term graph to include multigraphs and use the term simple graph to mean a graph
without multiple edges and loops.
Degree of a Vertex
The degree of a vertex v in a graph G, written deg (v), is equal to the number of edges in G which contain
v, that is, which are incident on v. Since each edge is counted twice in counting the degrees of the vertices of G,
we have the following simple but important result.
Theorem 8.1: The sum of the degrees of the vertices of a graph G is equal to twice the number of edges in G.
Consider, for example, the graph in Fig. 8-5(a). We have
deg(A) = 2,
deg(B) = 3,
deg(C) = 3,
deg(D) = 2.
The sum of the degrees equals 10 which, as expected, is twice the number of edges. A vertex is said to be
even or odd according as its degree is an even or an odd number. Thus A and D are even vertices whereas B and
C are odd vertices.
Theorem 8.1 also holds for multigraphs where a loop is counted twice toward the degree of its endpoint. For
example, in Fig. 8-5(b) we have deg(D) = 4 since the edge e6 is counted twice; hence D is an even vertex.
A vertex of degree zero is called an isolated vertex.

158
GRAPH THEORY
[CHAP. 8
Finite Graphs, Trivial Graph
A multigraph is said to be ﬁnite if it has a ﬁnite number of vertices and a ﬁnite number of edges. Observe that
a graph with a ﬁnite number of vertices must automatically have a ﬁnite number of edges and so must be ﬁnite.
The ﬁnite graph with one vertex and no edges, i.e., a single point, is called the trivial graph. Unless otherwise
speciﬁed, the multigraphs in this book shall be ﬁnite.
8.3
SUBGRAPHS, ISOMORPHIC AND HOMEOMORPHIC GRAPHS
This section will discuss important relationships between graphs.
Subgraphs
Consider a graph G = G(V, E). A graph H = H(V ′, E′) is called a subgraph of G if the vertices and edges
of H are contained in the vertices and edges of G, that is, if V ′ ⊆V and E′ ⊆E. In particular:
(i) A subgraph H(V ′, E′) of G(V, E) is called the subgraph induced by its vertices V ′ if its edge set E′
contains all edges in G whose endpoints belong to vertices in H.
(ii) If v is a vertex in G, then G −v is the subgraph of G obtained by deleting v from G and deleting all
edges in G which contain v.
(iii) If e is an edge in G, then G −e is the subgraph of G obtained by simply deleting the edge e from G.
Isomorphic Graphs
Graphs G(V, E) and G(V ∗, E∗) are said to be isomorphic if there exists a one-to-one correspondence
f: V →V ∗such that {u, v} is an edge of G if and only if {f (u), f (v)} is an edge of G∗. Normally, we do not
distinguish between isomorphic graphs (even though their diagrams may “look different”). Figure 8-6 gives ten
graphs pictured as letters. We note that A and R are isomorphic graphs. Also, F and T are isomorphic graphs, K
and X are isomorphic graphs and M, S, V , and Z are isomorphic graphs.
Fig. 8-6
Homeomorphic Graphs
Given any graph G, we can obtain a new graph by dividing an edge of G with additional vertices. Two graphs
G and G∗are said to homeomorphic if they can be obtained from the same graph or isomorphic graphs by this
method. The graphs (a) and (b) in Fig. 8-7 are not isomorphic, but they are homeomorphic since they can be
obtained from the graph (c) by adding appropriate vertices.

CHAP. 8]
GRAPH THEORY
159
Fig. 8-7
8.4
PATHS, CONNECTIVITY
A path in a multigraph G consists of an alternating sequence of vertices and edges of the form
v0,
e1,
v1,
e2,
v2,
. . . ,
en−1,
vn−1,
en,
vn
where each edge ei contains the vertices vi−1 and vi (which appear on the sides of ei in the sequence). The
number n of edges is called the length of the path. When there is no ambiguity, we denote a path by its sequence
of vertices (v0, v1, . . . , vn). The path is said to be closed if v0 = vn. Otherwise, we say the path is from v0, to vn
or between v0 and vn, or connects v0 to vn.
A simple path is a path in which all vertices are distinct. (A path in which all edges are distinct will be called
a trail.) A cycle is a closed path of length 3 or more in which all vertices are distinct except v0 = vn. A cycle of
length k is called a k-cycle.
EXAMPLE 8.1 Consider the graph G in Fig. 8-8(a). Consider the following sequences:
α = (P4, P1, P2, P5, P1, P2, P3, P6),
β = (P4, P1, P5, P2, P6),
γ = (P4, P1, P5, P2, P3, P5, P6),
δ = (P4, P1, P5, P3, P6).
The sequence α is a path from P4 to P6; but it is not a trail since the edge {P1, P2} is used twice. The sequence
β is not a path since there is no edge {P2, P6}. The sequence γ is a trail since no edge is used twice; but it is
not a simple path since the vertex P5 is used twice. The sequence δ is a simple path from P4 to P6; but it is
not the shortest path (with respect to length) from P4 to P6. The shortest path from P4 to P6 is the simple path
(P4, P5, P6) which has length 2.
Fig. 8-8
By eliminating unnecessary edges, it is not difﬁcult to see that any path from a vertex u to a vertex v can be
replaced by a simple path from u to v. We state this result formally.
Theorem 8.2: There is a path from a vertex u to a vertex v if and only if there exists a simple path from u to v.

160
GRAPH THEORY
[CHAP. 8
Connectivity, Connected Components
Agraph G is connected if there is a path between any two of its vertices. The graph in Fig. 8-8(a) is connected,
but the graph in Fig. 8-8(b) is not connected since, for example, there is no path between vertices D and E.
Suppose G is a graph. A connected subgraph H of G is called a connected component of G if H is not
contained in any larger connected subgraph of G. It is intuitively clear that any graph G can be partitioned into its
connected components. For example, the graph G in Fig. 8-8(b) has three connected components, the subgraphs
induced by the vertex sets {A, C, D}, {E, F}, and {B}.
The vertex B in Fig. 8-8(b) is called an isolated vertex since B does not belong to any edge or, in other
words, deg(B) = 0. Therefore, as noted, B itself forms a connected component of the graph.
Remark: Formally speaking, assuming any vertex u is connected to itself, the relation “u is connected to v”
is an equivalence relation on the vertex set of a graph G and the equivalence classes of the relation form the
connected components of G.
Distance and Diameter
Consider a connected graph G. The distance between vertices u and v in G, written d(u, v), is the length
of the shortest path between u and v. The diameter of G, written diam(G), is the maximum distance between
any two points in G. For example, in Fig. 8-9(a), d(A, F) = 2 and diam(G) = 3, whereas in Fig. 8-9(b),
d(A, F) = 3 and diam(G) = 4.
Cutpoints and Bridges
Let G be a connected graph. A vertex v in G is called a cutpoint if G −v is disconnected. (Recall that G −v
is the graph obtained from G by deleting v and all edges containing v.) An edge e of G is called a bridge if G −e
is disconnected. (Recall that G −e is the graph obtained from G by simply deleting the edge e). In Fig. 8-9(a),
the vertex D is a cutpoint and there are no bridges. In Fig. 8-9(b), the edge = {D, F} is a bridge. (Its endpoints
D and F are necessarily cutpoints.)
Fig. 8-9
8.5
TRAVERSABLE AND EULERIAN GRAPHS, BRIDGES OF KÖNIGSBERG
The eighteenth-century East Prussian town of Königsberg included two islands and seven bridges as shown
in Fig. 8-10(a). Question: Beginning anywhere and ending anywhere, can a person walk through town crossing
all seven bridges but not crossing any bridge twice? The people of Königsberg wrote to the celebrated Swiss
mathematician L. Euler about this question. Euler proved in 1736 that such a walk is impossible. He replaced the
islands and the two sides of the river by points and the bridges by curves, obtaining Fig. 8-10(b).
Observe that Fig. 8-10(b) is a multigraph. A multigraph is said to be traversable if it “can be drawn without
any breaks in the curve and without repeating any edges,” that is, if there is a path which includes all vertices
and uses each edge exactly once. Such a path must be a trail (since no edge is used twice) and will be called a
traversable trail. Clearly a traversable multigraph must be ﬁnite and connected.

CHAP. 8]
GRAPH THEORY
161
Fig. 8-10
We now show how Euler proved that the multigraph in Fig. 8-10(b) is not traversable and hence that the
walk in Königsberg is impossible. Recall ﬁrst that a vertex is even or odd according as its degree is an even or an
odd number. Suppose a multigraph is traversable and that a traversable trail does not begin or end at a vertex P.
We claim that P is an even vertex. For whenever the traversable trail enters P by an edge, there must always
be an edge not previously used by which the trail can leave P. Thus the edges in the trail incident with P must
appear in pairs, and so P is an even vertex. Therefore if a vertex Q is odd, the traversable trail must begin or
end at Q. Consequently, a multigraph with more than two odd vertices cannot be traversable. Observe that the
multigraph corresponding to the Königsberg bridge problem has four odd vertices. Thus one cannot walk through
Königsberg so that each bridge is crossed exactly once.
Euler actually proved the converse of the above statement, which is contained in the following theorem and
corollary. (The theorem is proved in Problem 8.9.) A graph G is called an Eulerian graph if there exists a closed
traversable trail, called an Eulerian trail.
Theorem 8.3 (Euler): A ﬁnite connected graph is Eulerian if and only if each vertex has even degree.
Corollary 8.4: Any ﬁnite connected graph with two odd vertices is traversable. A traversable trail may begin at
either odd vertex and will end at the other odd vertex.
Hamiltonian Graphs
The above discussion of Eulerian graphs emphasized traveling edges; here we concentrate on visiting vertices.
A Hamiltonian circuit in a graph G, named after the nineteenth-century Irish mathematician William Hamilton
(1803–1865), is a closed path that visits every vertex in G exactly once. (Such a closed path must be a cycle.) If
G does admit a Hamiltonian circuit, then G is called a Hamiltonian graph. Note that an Eulerian circuit traverses
every edge exactly once, but may repeat vertices, while a Hamiltonian circuit visits each vertex exactly once
but may repeat edges. Figure 8-11 gives an example of a graph which is Hamiltonian but not Eulerian, and vice
versa.
Fig. 8-11

162
GRAPH THEORY
[CHAP. 8
Although it is clear that only connected graphs can be Hamiltonian, there is no simple criterion to tell us
whether or not a graph is Hamiltonian as there is for Eulerian graphs. We do have the following sufﬁcient condition
which is due to G. A. Dirac.
Theorem 8.5: Let G be a connected graph with n vertices. Then G is Hamiltonian if n ≥3 and n ≤deg(v) for
each vertex v in G.
8.6
LABELED AND WEIGHTED GRAPHS
A graph G is called a labeled graph if its edges and/or vertices are assigned data of one kind or another. In
particular, G is called a weighted graph if each edge e of G is assigned a nonnegative number w(e) called the
weight or length of v. Figure 8-12 shows a weighted graph where the weight of each edge is given in the obvious
way. The weight (or length) of a path in such a weighted graph G is deﬁned to be the sum of the weights of the
edges in the path. One important problem in graph theory is to ﬁnd a shortest path, that is, a path of minimum
weight (length), between any two given vertices. The length of a shortest path between P and Q in Fig. 8-12 is
14; one such path is
(P, A1, A2, A5, A3, A6, Q)
The reader can try to ﬁnd another shortest path.
Fig. 8-12
8.7
COMPLETE, REGULAR, AND BIPARTITE GRAPHS
There are many different types of graphs.This section considers three of them: complete, regular, and bipartite
graphs.
Complete Graphs
Agraph G is said to be complete if every vertex in G is connected to every other vertex in G. Thus a complete
graph G must be connected. The complete graph with n vertices is denoted by Kn. Figure 8-13 shows the graphs
K1 through K6.
Regular Graphs
A graph G is regular of degree k or k-regular if every vertex has degree k. In other words, a graph is regular
if every vertex has the same degree.
The connected regular graphs of degrees 0, 1, or 2 are easily described. The connected 0-regular graph is
the trivial graph with one vertex and no edges. The connected 1-regular graph is the graph with two vertices and
one edge connecting them. The connected 2-regular graph with n vertices is the graph which consists of a single
n-cycle. See Fig. 8-14.
The 3-regular graphs must have an even number of vertices since the sum of the degrees of the vertices is
an even number (Theorem 8.1). Figure 8-15 shows two connected 3-regular graphs with six vertices. In general,
regular graphs can be quite complicated. For example, there are nineteen 3-regular graphs with ten vertices. We
note that the complete graph with n vertices Kn is regular of degree n −1.

CHAP. 8]
GRAPH THEORY
163
Fig. 8-13
Fig. 8-14
Fig. 8-15
Bipartite Graphs
A graph G is said to be bipartite if its vertices V can be partitioned into two subsets M and N such that each
edge of G connects a vertex of M to a vertex of N. By a complete bipartite graph, we mean that each vertex of
M is connected to each vertex of N; this graph is denoted by Km,n where m is the number of vertices in M and
n is the number of vertices in N, and, for standardization, we will assume m ≤n. Figure 8-16 shows the graphs
K2,3, K3,3, and K2,4, Clearly the graph Km,n has mn edges.

164
GRAPH THEORY
[CHAP. 8
Fig. 8-16
8.8
TREE GRAPHS
A graph T is called a tree if T is connected and T has no cycles. Examples of trees are shown in Fig. 8-17.
A forest G is a graph with no cycles; hence the connected components of a forest G are trees. A graph without
cycles is said to be cycle-free. The tree consisting of a single vertex with no edges is called the degenerate tree.
Consider a tree T . Clearly, there is only one simple path between two vertices of T ; otherwise, the two paths
would form a cycle. Also:
(a) Suppose there is no edge {u, v} in T and we add the edge e = {u, v} to T . Then the simple path from u to v
in T and e will form a cycle; hence T is no longer a tree.
(b) On the other hand, suppose there is an edge e = {u, v} in T , and we delete e from T . Then T is no longer
connected (since there cannot be a path from u to v); hence T is no longer a tree.
The following theorem (proved in Problem 8.14) applies when our graphs are ﬁnite.
Theorem 8.6: Let G be a graph with n > 1 vertices. Then the following are equivalent:
(i) G is a tree.
(ii) G is a cycle-free and has n −1 edges.
(iii) G is connected and has n −1 edges.
This theorem also tells us that a ﬁnite tree T with n vertices must have n −1 edges. For example, the tree in
Fig. 8-17(a) has 9 vertices and 8 edges, and the tree in Fig. 8-17(b) has 13 vertices and 12 edges.
Fig. 8-17
Spanning Trees
A subgraph T of a connected graph G is called a spanning tree of G if T is a tree and T includes all the
vertices of G. Figure 8-18 shows a connected graph G and spanning trees T1, T2, and T3 of G.

CHAP. 8]
GRAPH THEORY
165
Fig. 8-18
Minimum Spanning Trees
Suppose G is a connected weighted graph. That is, each edge of G is assigned a nonnegative number called
the weight of the edge. Then any spanning tree T of G is assigned a total weight obtained by adding the weights
of the edges in T . A minimal spanning tree of G is a spanning tree whose total weight is as small as possible.
Algorithms 8.2 and 8.3, which appear in Fig. 8-19, enable us to ﬁnd a minimal spanning tree T of a connected
weighted graph G where G has n vertices. (In which case T must have n −1 vertices.)
Fig. 8-19
The weight of a minimal spanning tree is unique, but the minimal spanning tree itself is not. Different minimal
spanning trees can occur when two or more edges have the same weight. In such a case, the arrangement of the
edges in Step 1 of Algorithms 8.2. or 8.3 is not unique and hence may result in different minimal spanning trees
as illustrated in the following example.
EXAMPLE 8.2 Find a minimal spanning tree of the weighted graph Q in Fig. 8-20(a). Note that Q has six
vertices, so a minimal spanning tree will have ﬁve edges.
(a) Here we apply Algorithm 8.2.
First we order the edges by decreasing weights, and then we successively delete edges without disconnecting
Q until ﬁve edges remain. This yields the following data:
Edges
BC
AF
AC
BE
CE
BF
AE
DF
BD
Weight
8
7
7
7
6
5
4
4
3
Delete
Yes
Yes
Yes
No
No
Yes

166
GRAPH THEORY
[CHAP. 8
Thus the minimal spanning tree of Q which is obtained contains the edges
BE,
CE,
AE,
DF,
BD
The spanning tree has weight 24 and it is shown in Fig. 8-20(b).
Fig. 8-20
(b) Here we apply Algorithm 8.3.
First we order the edges by increasing weights, and then we successively add edges without forming any
cycles until ﬁve edges are included. This yields the following data:
Edges
BD
AE
DF
BF
CE
AC
AF
BE
BC
Weight
3
4
4
5
6
7
7
7
8
Add?
Yes
Yes
Yes
No
Yes
No
Yes
Thus the minimal spanning tree of Q which is obtained contains the edges
BD,
AE,
DF,
CE,
AF
The spanning tree appears in Fig. 8-20(c). Observe that this spanning tree is not the same as the one obtained
using Algorithm 8.2 as expected it also has weight 24.
Remark: The above algorithms are easily executed when the graph G is relatively small as in Fig. 8-20(a).
Suppose G has dozens of vertices and hundreds of edges which, say, are given by a list of pairs of vertices. Then
even deciding whether G is connected is not obvious; it may require some type of depth-ﬁrst search (DFS) or
breadth-ﬁrst search (BFS) graph algorithm. Later sections and the next chapter will discuss ways of representing
graphs G in memory and will discuss various graph algorithms.
8.9
PLANAR GRAPHS
A graph or multigraph which can be drawn in the plane so that its edges do not cross is said to be planar.
Although the complete graph with four vertices K4 is usually pictured with crossing edges as in Fig. 8-21(a), it
can also be drawn with noncrossing edges as in Fig. 8-21(b); hence K4 is planar. Tree graphs form an important
class of planar graphs. This section introduces our reader to these important graphs.
Fig. 8-21

CHAP. 8]
GRAPH THEORY
167
Maps, Regions
A particular planar representation of a ﬁnite planar multigraph is called a map. We say that the map is
connected if the underlying multigraph is connected. A given map divides the plane into various regions. For
example, the map in Fig. 8-22 with six vertices and nine edges divides the plane into ﬁve regions. Observe that
four of the regions are bounded, but the ﬁfth region, outside the diagram, is unbounded. Thus there is no loss
in generality in counting the number of regions if we assume that our map is contained in some large rectangle
rather than in the entire plane.
Observe that the border of each region of a map consists of edges. Sometimes the edges will form a cycle,
but sometimes not. For example, in Fig. 8-22 the borders of all the regions are cycles except for r3. However, if
we do move counterclockwise around r3 starting, say, at the vertex C, then we obtain the closed path
(C, D, E, F, E, C)
where the edge {E, F} occurs twice. By the degree of a region r, written deg(r), we mean the length of the cycle
or closed walk which borders r. We note that each edge either borders two regions or is contained in a region
and will occur twice in any walk along the border of the region. Thus we have a theorem for regions which is
analogous to Theorem 8.1 for vertices.
Fig. 8-22
Theorem 8.7: The sum of the degrees of the regions of a map is equal to twice the number of edges.
The degrees of the regions of Fig. 8-22 are:
deg(r1) = 3,
deg(r2) = 3,
deg(r3) = 5,
deg(r4) = 4,
deg(r5) = 3
The sum of the degrees is 18, which, as expected, is twice the number of edges.
For notational convenience we shall picture the vertices of a map with dots or small circles, or we shall
assume that any intersections of lines or curves in the plane are vertices.
Euler’s Formula
Euler gave a formula which connects the number V of vertices, the number E of edges, and the number R
of regions of any connected map. Speciﬁcally:
Theorem 8.8 (Euler): V −E + R = 2.
(The proof of Theorem 8.8 appears in Problem 8.18.)
Observe that, in Fig. 8-22, V = 6, E = 9, and R = 5; and, as expected by Euler’s formula.
V −E + R = 6 −9 + 5 = 2
We emphasize that the underlying graph of a map must be connected in order for Euler’s formula to hold.
Let G be a connected planar multigraph with three or more vertices, so G is neither K1 nor K2. Let M be a
planar representation of G. It is not difﬁcult to see that (1) a region of M can have degree 1 only if its border is a
loop, and (2) a region of M can have degree 2 only if its border consists of two multiple edges. Accordingly, if
G is a graph, not a multigraph, then every region of M must have degree 3 or more. This comment together with
Euler’s formula is used to prove the following result on planar graphs.

168
GRAPH THEORY
[CHAP. 8
Theorem 8.9: Let G be a connected planar graph with p vertices and q edges, where p ≥3. Then q ≥3p −6.
Note that the theorem is not true for K1 where p = 1 and q = 0, and is not true for K2 where p = 2
and q −1.
Proof: Let r be the number of regions in a planar representation of G. By Euler’s formula, p −q + r = 2.
Now the sum of the degrees of the regions equals 2q by Theorem 8.7. But each region has degree 3 or more;
hence 2q ≥3r. Thus r ≥2q/3. Substituting this in Euler’s formula gives
2 = p −q + r ≤p −q + 2q
3
or
2 ≤p −q
3
Multiplying the inequality by 3 gives 6 ≤3p −q which gives us our result.
Nonplanar Graphs, Kuratowski’s Theorem
We give two examples of nonplanar graphs. Consider ﬁrst the utility graph; that is, three houses A1, A2, A3
are to be connected to outlets for water, gas and electricity, B1, B2, B3, as in Fig. 8-23(a). Observe that this is the
graph K3,3 and it has p = 6 vertices and q = 9 edges. Suppose the graph is planar. By Euler’s formula a planar
representation has r = 5 regions. Observe that no three vertices are connected to each other; hence the degree of
each region must be 4 or more and so the sum of the degrees of the regions must be 20 or more. By Theorem 8.7
the graph must have 10 or more edges. This contradicts the fact that the graph has q = 9 edges. Thus the utility
graph K3,3 is nonplanar.
Consider next the star graph in Fig. 8-23(b). This is the complete graph K5 on p = 5 vertices and has q = 10
edges. If the graph is planar, then by Theorem 8.9.
10 = q ≤3p −6 = 15 −6 = 9
which is impossible. Thus K5 is nonplanar.
For many years mathematicians tried to characterize planar and nonplanar graphs. This problem was ﬁnally
solved in 1930 by the Polish mathematician K. Kuratowski. The proof of this result, stated below, lies beyond
the scope of this text.
Fig. 8-23
Theorem 8.10: (Kuratowski) A graph is nonplanar if and only if it contains a subgraph homeomorphic to K3,3
or K5.
8.10
GRAPH COLORINGS
Consider a graph G. A vertex coloring, or simply a coloring of G is an assignment of colors to the vertices
of G such that adjacent vertices have different colors. We say that G is n-colorable if there exists a coloring of G
which uses n colors. (Since the word “color” is used as a noun, we will try to avoid its use as a verb by saying,

CHAP. 8]
GRAPH THEORY
169
for example, “paint” G rather than “color” G when we are assigning colors to the vertices of G.) The minimum
number of colors needed to paint G is called the chromatic number of G and is denoted by χ(G).
Fig. 8-24 gives an algorithm by Welch and Powell for a coloring of a graph G. We emphasize that this
algorithm does not always yield a minimal coloring of G.
Fig. 8-24
EXAMPLE 8.3
(a) Consider the graph G in Fig. 8-25.We use theWelch-PowellAlgorithm 8.4 to obtain a coloring of G. Ordering
the vertices according to decreasing degrees yields the following sequence:
A5,
A3,
A7,
A1,
A2,
A4,
A6,
A8
Fig. 8-25
The ﬁrst color is assigned to vertices A5 and A1. The second color is assigned to vertices A3, A4, and A8.
The third color is assigned to vertices A7, A2, and A6. All the vertices have been assigned a color, and so G
is 3-colorable. Observe that G is not 2-colorable since vertices A1, A2, and A3, which are connected to each
other, must be assigned different colors. Accordingly, χ(G) = 3.
(b) Consider the complete graph Kn with n vertices. Since every vertex is adjacent to every other vertex, Kn
requires n colors in any coloring. Thus χ(Kn) = n.
There is no simple way to actually determine whether an arbitrary graph is n-colorable. However, the
following theorem (proved in Problem 8.19) gives a simple characterization of 2-colorable graphs.

170
GRAPH THEORY
[CHAP. 8
Theorem 8.11: The following are equivalent for a graph G:
(i) G is 2-colorable.
(ii) G is bipartite.
(iii) Every cycle of G has even length.
There is no limit on the number of colors that may be required for a coloring of an arbitrary graph since, for
example, the complete graph Kn requires n colors. However, if we restrict ourselves to planar graphs, regardless
of the number of vertices, ﬁve colors sufﬁce. Speciﬁcally, in Problem 8.20 we prove:
Theorem 8.12: Any planar graph is 5-colorable.
Actually, since the 1850s mathematicians have conjectured that planar graphs are 4-colorable since every
known planar graph is 4-colorable. Kenneth Appel and Wolfgang Haken ﬁnally proved this conjecture to be true
in 1976. That is:
Four Color Theorem (Appel and Haken): Any planar graph is 4-colorable.
We discuss this theorem in the next subsection.
Dual Maps and the Four Color Theorem
Consider a map M, say the map M in Fig. 8-26(a). In other words, M is a planar representation of a planar
multigraph. Two regions of M are said to be adjacent if they have an edge in common. Thus the regions r2 and
r5 in Fig. 8-26(a) are adjacent, but the regions r3 and r5 are not. By a coloring of M we mean an assignment
of a color to each region of M such that adjacent regions have different colors. A map M is n-colorable if there
exists a coloring of M which uses n colors. Thus the map M in Fig. 8-26(a) is 3-colorable since the regions can
be assigned the following colors:
r1 red,
r2 white,
r3 red,
r4 white,
r5 red,
r6 blue
Observe the similarity between this discussion on coloring maps and the previous discussion on coloring graphs.
In fact, using the concept of the dual map deﬁned below, the coloring of a map can be shown to be equivalent to
the vertex coloring of a planar graph.
Consider a map M. In each region of M we choose a point, and if two regions have an edge in common
then we connect the corresponding points with a curve through the common edge. These curves can be drawn
so that they are noncrossing. Thus we obtain a new map M∗, called the dual of M, such that each vertex of M∗
corresponds to exactly one region of M. Figure 8-26(b) shows the dual of the map of Fig. 8-26(a). One can prove
that each region of M∗will contain exactly one vertex of M and that each edge of M∗will intersect exactly one
edge of M and vice versa. Thus M will be the dual of the map M∗.
Fig. 8-26

CHAP. 8]
GRAPH THEORY
171
Observe that any coloring of the regions of a map M will correspond to a coloring of the vertices of the dual
map M∗. Thus M is n-colorable if and only if the planar graph of the dual map M∗is vertex n-colorable. Thus
the above theorem can be restated as follows:
Four Color Theorem (Appel and Haken): If the regions of any map M are colored so that adjacent regions
have different colors, then no more than four colors are required.
The proof of the above theorem uses computers in an essential way. Speciﬁcally,Appel and Haken ﬁrst showed
that if the four color theorem was false, then there must be a counterexample among one of approximately 2000
different types of planar graphs. They then showed, using the computer, that none of these types of graphs has
such a counterexample. The examination of each different type of graph seems to be beyond the grasp of human
beings without the use of a computer. Thus the proof, unlike most proofs in mathematics, is technology dependent;
that is, it depended on the development of high-speed computers.
8.11
REPRESENTING GRAPHS IN COMPUTER MEMORY
There are two standard ways of maintaining a graph G in the memory of a computer. One way, called
the sequential representation of G, is by means of its adjacency matrix A. The other way, called the linked
representation or adjacency structure of G, uses linked lists of neighbors. Matrices are usually used when the
graph G is dense, and linked lists are usually used when G is sparse. (A graph G with m vertices and n edges is
said to be dense when m = O(n2) and sparse when m = O(n) or even O(n log n).)
Regardless of the way one maintains a graph G in memory, the graph G is normally input into the computer
by its formal deﬁnition, that is, as a collection of vertices and a collection of pairs of vertices (edges).
Adjacency Matrix
Suppose G is a graph with m vertices, and suppose the vertices have been ordered, say, v1, v2, . . . , vm. Then
the adjacency matrix A = [aij] of the graph G is the m × m matrix deﬁned by
aij =
 1
if vi is adjacent to vj
0
otherwise
Figure 8-27(b) contains the adjacency matrix of the graph G in Fig. 8-27(a) where the vertices are ordered A, B,
C, D, E. Observe that each edge {vi, vj} of G is represented twice, by aij = 1 and aji = 1. Thus, in particular,
the adjacency matrix is symmetric.
The adjacency matrix A of a graph G does depend on the ordering of the vertices of G, that is, a different
ordering of the vertices yields a different adjacency matrix. However, any two such adjacency matrices are closely
related in that one can be obtained from the other by simply interchanging rows and columns. On the other hand,
the adjacency matrix does not depend on the order in which the edges (pairs of vertics) are input into the computer.
There are variations of the above representation. If G is a multigraph, then we usually let aij denote the
number of edges {vi, vj}. Moreover, if G is a weighted graph, then we may let aij denote the weight of the edge
{vi, vj}.
Fig. 8-27

172
GRAPH THEORY
[CHAP. 8
Linked Representation of a Graph G
Let G be a graph with m vertices. The representation of G in memory by its adjacency matrix A has a number
of major drawbacks. First of all it may be difﬁcult to insert or delete vertices in G. The reason is that the size of A
may need to be changed and the vertices may need to be reordered, so there may be many, many changes in the
matrix A. Furthermore, suppose the number of edges is O(m) or even O(m log m), that is, suppose G is sparse.
Then the matrix A will contain many zeros; hence a great deal of memory space will be wasted. Accordingly,
when G is sparse, G is usually represented in memory by some type of linked representation, also called an
adjacency structure, which is described below by means of an example.
Consider the graph G in Fig. 8-28(a). Observe that G may be equivalently deﬁned by the table in Fig. 8-28(b)
which shows each vertex in G followed by its adjacency list, i.e., its list of adjacent vertices (neighbors). Here
the symbol  denotes an empty list. This table may also be presented in the compact form
G = [A:B, D;
B:A, C, D;
C:B;
D:A, B;
E:]
where a colon “:” separates a vertex from its list of neighbors, and a semicolon “;” separates the different lists.
Remark: Observe that each edge of a graph G is represented twice in an adjacency structure; that is, any edge,
say {A, B}, is represented by B in the adjacency list of A, and also by A in the adjacency list of B. The graph
G in Fig. 8-28(a) has four edges, and so there must be 8 vertices in the adjacency lists. On the other hand, each
vertex in an adjacency list corresponds to a unique edge in the graph G.
Fig. 8-28
The linked representation of a graph G, which maintains G in memory by using its adjacency lists, will
normally contain two ﬁles (or sets of records), one called the Vertex File and the other called the Edge File, as
follows.
(a) Vertex File: The Vertex File will contain the list of vertices of the graph G usually maintained by an array or
by a linked list. Each record of the Vertex File will have the form
VERTEX
NEXT-V
PTR
Here VERTEX will be the name of the vertex, NEXT-V points to the next vertex in the list of vertices in the
Vertex File when the vertices are maintained by a linked list, and PTR will point to the ﬁrst element in the
adjacency list of the vertex appearing in the Edge File. The shaded area indicates that there may be other
information in the record corresponding to the vertex.
(b) Edge File: The Edge File contains the edges of the graph G. Speciﬁcally, the Edge File will contain all the
adjacency lists of G where each list is maintained in memory by a linked list. Each record of the Edge File
will correspond to a vertex in an adjacency list and hence, indirectly, to an edge of G. The record will usually
have the form
EDGE
ADJ
NEXT

CHAP. 8]
GRAPH THEORY
173
Here:
(1) EDGE will be the name of the edge (if it has one).
(2) ADJ points to the location of the vertex in the Vertex File.
(3) NEXT points to the location of the next vertex in the adjacency list.
We emphasize that each edge is represented twice in the Edge File, but each record of the ﬁle corresponds to
a unique edge. The shaded area indicates that there may be other information in the record corresponding to the
edge.
Figure 8-29 shows how the graph G in Fig. 8-28(a) may appear in memory. Here the vertices of G are
maintained in memory by a linked list using the variable START to point to the ﬁrst vertex. (Alternatively, one
could use a linear array for the list of vertices, and then NEXT-V would not be required.) Note that the ﬁeld
EDGE is not needed here since the edges have no name. Figure 8-29 also shows, with the arrows, the adjacency
list [D, C, A] of the vertex B.
Fig. 8-29
8.12
GRAPH ALGORITHMS
This section discusses two important graph algorithms which systematically examine the vertices and edges
of a graph G. One is called a depth-ﬁrst search (DFS) and the other is called a breadth-ﬁrst search (BFS). Other
graph algorithms will be discussed in the next chapter in connection with directed graphs. Any particular graph
algorithm may depend on the way G is maintained in memory. Here we assume G is maintained in memory by
its adjacency structure. Our test graph G with its adjacency structure appears in Fig. 8-30 where we assume the
vertices are ordered alphabetically.
Fig. 8-30

174
GRAPH THEORY
[CHAP. 8
During the execution of our algorithms, each vertex (node) N of G will be in one of three states, called the
status of N, as follows:
STATUS = 1: (Ready state) The initial state of the vertex N.
STATUS = 2: (Waiting state) The vertex N is on a (waiting) list, waiting to be processed.
STATUS = 3: (Processed state) The vertex N has been processed.
The waiting list for the depth-ﬁrst seach (DFS) will be a (modiﬁed) STACK (which we write horizontally with
the top of STACK on the left), whereas the waiting list for the breadth-ﬁrst search (BFS) will be a QUEUE.
Depth-ﬁrst Search
The general idea behind a depth-ﬁrst search beginning at a starting vertex A is as follows. First we process
the starting vertex A. Then we process each vertex N along a path P which begins at A; that is, we process
a neighbor of A, then a neighbor of A, and so on. After coming to a “dead end,” that is to a vertex with no
unprocessed neighbor, we backtrack on the path P until we can continue along another path P ′. And so on. The
backtracking is accomplished by using a STACK to hold the initial vertices of future possible paths. We also need
a ﬁeld STATUS which tells us the current status of any vertex so that no vertex is processed more than once.
The depth-ﬁrst search (DFS) algorithm appears in Fig. 8-31. The algorithm will process only those vertices
which are connected to the starting vertex A, that is, the connected component including A. Suppose one wants to
process all the vertices in the graph G. Then the algorithm must be modiﬁed so that it begins again with another
vertex (which we call B) that is still in the ready state (STATE = 1). This vertex B can be obtained by traversing
through the list of vertices.
Remark: The structure STACK in the above algorithm is not technically a stack since, in Step 5(b), we allow
a vertex J to be deleted and then inserted in the front of the stack. (Although it is the same vertex J, it usually
represents a different edge in the adjacency structure.) If we do not delete J in Step 5(b), then we obtain an
alternate form of DFS.
Fig. 8-31

CHAP. 8]
GRAPH THEORY
175
EXAMPLE 8.4 Suppose the DFS Algorithm 8.5 in Fig. 8-31 is applied to the graph in Fig. 8-30. The vertices
will be processed in the following order:
A,
D,
L,
K,
C,
J,
M,
B
Speciﬁcally, Fig. 8-32(a) shows the sequence of vertices being processed and the sequence of waiting lists
in STACK. (Note that after vertex A is processed, its neighbors, B, C, and D are added to STACK in the order
ﬁrst B, then C, and ﬁnally D; hence D is on the top of the STACK and D is the next vertex to be processed.)
Each vertex, excluding A, comes from an adjacency list and hence corresponds to an edge of the graph. These
edges form a spanning tree of G which is pictured in Fig. 8-32(b). The numbers indicate the order that the edges
are added to the spanning tree, and the dashed lines indicate backtracking.
Fig. 8-32
Breadth-ﬁrst Search
The general idea behind a breadth-ﬁrst search beginning at a starting vertex A is as follows. First we process
the starting vertex A. Then we process all the neighbors of A. Then we process all the neighbors of neighbors
of A. And so on. Naturally we need to keep track of the neighbors of a vertex, and we need to guarantee that
no vertex is processed twice. This is accomplished by using a QUEUE to hold vertices that are waiting to be
processed, and by a ﬁeld STATUS which tells us the current status of a vertex.
The breadth-ﬁrst search (BFS) algorithm appears in Fig. 8-33, Again the algorithm will process only those
vertices which are connected to the starting vertex A, that is, the connected component including A. Suppose one
wants to process all the vertices in the graph G. Then the algorithm must be modiﬁed so that it begins again with
another vertex (which we call B) that is still in the ready state (STATUS = 1). This vertex B can be obtained by
traversing through the list of vertices.
EXAMPLE 8.5 Suppose the breadth-ﬁrst search (BFS) Algorithm 8.6 in Fig. 8-33 is applied to the graph in
Fig. 8-30. The vertices will be processed in the following order:
A,
B,
C,
D,
K,
L,
J,
M
Speciﬁcally, Fig. 8-34(a) shows the sequence of waiting lists in QUEUE and the sequence of vertices being
processed (Note that after vertex A is processed, its neighbors, B, C, and D are added to QUEUE in the order ﬁrst
B, then C, and ﬁnally D; hence B is on the front of the QUEUE and so B is the next vertex to be processed.)Again,
each vertex, excluding A, comes from an adjacency list and hence corresponds to an edge of the graph. These
edges form a spanning tree of G which is pictured in Fig. 8-34(b). Again, the numbers indicate the order that
the edges are added to the spanning tree. Observe that this spanning tree is different from the one in Fig. 8.32(b)
which came from a depth-ﬁrst search.

176
GRAPH THEORY
[CHAP. 8
Fig. 8-33
Fig. 8-34
8.13
TRAVELING-SALESMAN PROBLEM
Let G be a complete weighted graph. (We view the vertices of G as cities, and the weighted edges of G as
the distances between the cities.) The “traveling-salesman” problem refers to ﬁnding a Hamiltonian circuit for G
of minimum weight.
First we note the following theorem, proved in Problem 8.33:
Theorem 8.13: The complete graph Kn with n ≥3 vertices has H = (n −1)!/2 Hamiltonian circuits (where
we do not distinguish between a circuit and its reverse).
Consider the complete weighted graph G in Fig. 8-35(a). It has four vertices, A, B, C, D. By Theorem 8.13
it has H = 3!/2 = 3 Hamiltonian circuits. Assuming the circuits begin at the vertex A, the following are the
three circuits and their weights:
|ABCDA|
=
3 + 5 + 6 + 7 = 21
|ACDBA|
=
2 + 6 + 9 + 3 = 20
|ACBDA|
=
2 + 5 + 9 + 7 = 23

CHAP. 8]
GRAPH THEORY
177
Fig. 8-35
Thus ACDBA with weight 20 is the Hamiltonian circuit of minimum weight.
We solved the “traveling-salesman problem” for the weighted complete graph in Fig. 8-35(a) by list-
ing and ﬁnding the weights of its three possible Hamiltonian circuits. However, for a graph with many ver-
tices, this may be impractical or even impossible. For example, a complete graph with 15 vertices has over
40 million Hamiltonian circuits. Accordingly, for circuits with many vertices, a strategy of some kind is needed
to solve or give an approximate solution to the traveling-salesman problem. We discuss one of the simplest
algorithms here.
Nearest-Neighbor Algorithm
The nearest-neighbor algorithm, starting at a given vertex, chooses the edge with the least weight to the
next possible vertex, that is, to the “closest” vertex. This strategy is continued at each successive vertex until a
Hamiltonian circuit is completed.
EXAMPLE 8.6 Let G be the weighted graph given by the table in Fig. 8-35(b). That is, G has the vertices
P , Q, . . ., T , and the distance from P to Q is 18, from P to R is 22, and so on until the distance from T to S is
13. We apply the nearest-neighbor algorithm to G starting at: (a) P, (b) Q.
(a) Starting at P, the ﬁrst row of the table shows us that the closest vertex to P is S with distance 15. The fourth
row shows that the closest vertex to S is Q with distance 12. The closest vertex to Q is R with distance 11.
From R, there is no choice but to go to T with distance 10. Finally, from T , there is no choice but to go
back to P with distance 20. Accordingly, the nearest-neighbor algorithm beginning at P yields the following
weighted Hamiltonian circuit:
|PSQRTP| = 15 + 12 + 11 + 10 + 20 = 68
(b) Starting at Q, the closest vertex is R with distance 11; from R the closest is T with distance 10; and from T
the closest is S with distance 13. From S we must go to P with distance 15; and ﬁnally from P we must go
back to Q with distance 18.Accordingly, the nearest-neighbor algorithm beginning at Q yields the following
weighted Hamiltonian circuit:
|QRTSPQ| = 11 + 10 + 13 + 15 + 18 = 67
The idea behind the nearest-neighbor algorithm is to minimize the total weight by minimizing the weight
at each step. Although this may seem reasonable, Example 8.6 shows that we may not get a Hamiltonian cir-
cuit of minimum weight; that is, it cannot be both 68 and 67. Only by checking all H = (n −1)!/2 = 12
Hamiltonian circuits of G will we really know the one with minimum weight. In fact, the nearest-neighbor
algorithm beginning at A in Fig. 8-35(a) yields the circuit ACBDA which has the maximum weight. However, the
nearest-neighbor algorithm usually gives a Hamiltonian circuit which is relatively close to the one with minimum
weight.

178
GRAPH THEORY
[CHAP. 8
Solved Problems
GRAPH TERMINOLOGY
8.1. Consider the graph G in Fig. 8-36(a).
(a) Describe G formally, that is, ﬁnd the set V (G) of vertices of G and the set E(G) of edges of G.
(b) Find the degree of each vertex and verify Theorem 8.1 for this graph.
(a) There are ﬁve vertices so V (G) = {A, B, C, D, E}. There are seven pairs {x, y} of vertices where the vertex x is
connected with the vertex y, hence
E(G) = [{A, B}, {A, C}, {A, D}, {B, C}, {B, E}, {C, D}, {C, E}]
(b) The degree of a vertex is equal to the number of edges to which it belongs; e.g., deg(A) = 3 since A belongs to
the three edges {A, B}, {A, C}, {A, D}. Similarly,
deg(B) = 3, deg(C) = 4, deg(D) = 2, deg(E) = 2
The sum of the degrees is 3 + 3 + 4 + 2 + 2 = 14 which does equal twice the number of edges.
Fig. 8-36
8.2. Consider the graph G in Fig. 8-36(b). Find:
(a) all simple paths from A to F;
(d ) diam(G), the diameter of G;
(b) all trails from A to F;
(e) all cycles which include vertex A;
(c) d(A, F), the distance from A to F;
( f ) all cycles in G.
(a) A simple path from A to F is a path such that no vertex, and hence no edge, is repeated. There are seven such paths,
four beginning with the edges {A, B} and three beginning with the ege {A, D}:
(A, B, C, F),
(A, B, C, E, F),
(A, B, E, F),
(A, B, E, C, F),
(A, D, E, F),
(A, D, E, B, C, F),
(A, D, E, C, F).
(b) A trail from A to F is a path such that no edge is repeated. There are nine such trails, the seven simple paths from
(a) together with
(A, D, E, B, C, E, F)
and
(A, D, E, C, B, E, F).
(c) There is a path, e.g., (A, B, C, F), from A to F of length 3 and no shorter path from A to F; hence d(A, F) = 3.
(d) The distance between any two vertices is not greater than 3, and the distance from A to F is 3; hence diam(G) = 3.
(e) A cycle is a closed path in which no vertex is repeated (except the ﬁrst and last). There are three cycles which
include vertex A:
(A, B, E, D, A),
(A, B, C, E, D, A),
(A, B, C, F, E, D, A).
(f) There are six cycles in G; the three in (e) and
(B, C, E, B),
(C, F, E, C),
(B, C, F, E, B).

CHAP. 8]
GRAPH THEORY
179
8.3. Consider the multigraphs in Fig. 8-37.
(a) Which of them are connected? If a graph is not connected, ﬁnd its connected components.
(b) Which are cycle-free (without cycles)?
(c) Which are loop-free (without loops)?
(d) Which are (simple) graphs?
(a) Only (1) and (3) are connected, (2) is disconnected; its connected components are {A, D, E} and {B, C}. (4) is
disconnected; its connected components are {A, B, E} and {C, D}.
(b) Only (1) and (4) are cycle-free. (2) has the cycle (A, D, E, A), and (3) has the cycle (A, B, E, A).
(c) Only (4) has a loop which is {B, B}.
(d) Only (1) and (2) are graphs. Multigraph (3) has multiple edges {A, E} and {A, E}; and (4) has both multiple edges
{C, D} and {C, D} and a loop {B, B}.
Fig. 8-37
8.4. Let G be the graph in Fig. 8-38(a). Find:
(a) all simple paths from A to C;
(d ) G −Y;
(b) all cycles;
(e) all cut points;
(c) subgraph H generated by V ′ = {B, C, X, Y};
( f ) all bridges.
(a) There are two simple paths from A to C: (A, X, Y, C) and (A, X, B, Y, C).
(b) There is only one cycle: (B, X, Y, B).
(c) As pictured in Fig. 8-38(b), H consists of the vertices V ′ and the set E′ of all edges whose endpoints belong to V ′,
that is, E′ = [{B, X}, {X, Y}, {B, Y}, {C, Y}].
(d) Delete vertex Y from G and all edges which contain Y to obtain the graph G −Y in Fig. 8-38(c). (Note Y is a
cutpoint since G −Y is disconnected.)
(e) Vertices A, X, and Y are cut points.
(f) An edge e is a bridge if G −e is disconnected. Thus there are three bridges: {A, Z}, {A, X}, and {C, Y}.
Fig. 8-38

180
GRAPH THEORY
[CHAP. 8
8.5. Consider the graph G in Fig. 8-36(b). Find the subgraphs obtained when each vertex is deleted. Does G
have any cut points?
When we delete a vertex from G, we also have to delete all edges which contain the vertex. The six graphs obtained by
deleting each of the vertices of G are shown in Fig. 8-39. All six graphs are connected; hence no vertex is a cut point.
Fig. 8-39
8.6. Show that the six graphs obtained in Problem 8.5 are distinct, that is, no two of them are isomorphic. Also
show that (B) and (C) are homeomorphic.
The degrees of the ﬁve vertices of any graph cannot be paired off with the degrees of any other graph, except for (B)
and (C). Hence none of the graphs is isomorphic except possibly (B) and (C).
However if we delete the vertex of degree 3 in (B) and (C), we obtain distinct subgraphs. Thus (B) and (C) are also
nonisomorphic; hence all six graphs are distinct. However, (B) and (C) are homeomorphic since they can be obtained
from isomorphic graphs by adding appropriate vertices.
TRAVERSABLE GRAPHS, EULER AND HAMILTONIAN CIRCUITS
8.7. Consider each graph in Fig. 8-40. Which of them are traversable, that is, have Euler paths?
Which are Eulerian, that is, have an Euler circuit? For those that do not, explain why.
Fig. 8-40
G is traversable (has an Euler path) if only 0 or 2 vertices have odd degree, and G is Eulerian (has an Euler
circuit) if all vertices are of even degree (Theorem 8.3).
(a) Traversable, since there are two odd vertices. The traversable path must begin at one of the odd vertices and will
end at the other.
(b) Traversable, since all vertices are even. Thus G has an Euler circuit.
(c) Since six vertices have odd degrees, G is not traversable.

CHAP. 8]
GRAPH THEORY
181
8.8. Which of the graphs in Fig. 8-40 have a Hamiltonian circuit? If not, why not?
Graphs (a) and (c) have Hamiltonian circuits. (The reader should be able to easily ﬁnd one of them.) However, graph
(b) has no Hamiltonian circuit. For if α is a Hamiltonian circuit, then α must connect the middle vertex with the lower
right vertex, then proceed along the bottom row to the lower right vertex, then vertically to the middle right, but then is
forced back to the central vertex before visiting the remaining vertices.
8.9. Prove Theorem 8.3 (Euler):Aﬁnite connected graph G is Eulerian if and only if each vertex has even degree.
Suppose G is Eulerian and T is a closed Eulerian trail. For any vertex v of G, the trail T enters and leaves v the
same number of times without repeating any edge. Hence v has even degree.
Suppose conversely that each vertex of G has even degree. We construct an Eulerian trail. We begin a trail T1 at any
edge e. We extend T1 by adding one edge after the other. If T1 is not closed at any step, say, T1 begins at u but ends
at v ̸= u, then only an odd number of the edges incident on v appear in T1; hence we can extend T1 by another edge
incident on v. Thus we can continue to extend T1 until T1 returns to its initial vertex u, i.e., until T1 is closed. If T1
includes all the edges of G, then T1 is our Eulerian trail.
Suppose T1 does not include all edges of G. Consider the graph H obtained by deleting all edges of T1 from G. H
may not be connected, but each vertex of H has even degree since T1 contains an even number of the edges incident
on any vertex. Since G is connected, there is an edge e′ of H which has an endpoint u′ in T1. We construct a trail T2
in H beginning at u′ and using e′. Since all vertices in H have even degree, we can continue to extend T2 in H until
T2 returns to u′ as pictured in Fig. 8-41. We can clearly put T1 and T2 together to form a larger closed trail in G. We
continue this process until all the edges of G are used. We ﬁnally obtain an Eulerian trail, and so G is Eulerian.
Fig. 8-41
TREES, SPANNING TREES
8.10. Draw all trees with exactly six vertices.
There are six such trees which are exhibited in Fig. 8-42. The ﬁrst tree has diameter 5, the next two diameter 4, the
next two diameter 3, and the last one diameter 2. Any other tree with 6 nodes is isormorphic to one of these trees.
Fig. 8-42
8.11. Find all spanning trees of the graph G shown in Fig. 8-43(a).
There are eight such spanning trees as shown in Fig. 8-43(b). Each spanning tree must have 4 −1 = 3 edges since G
has four vertices. Thus each tree can be obtained by deleting two of the ﬁve edges of G. This can be done in 10 ways,

182
GRAPH THEORY
[CHAP. 8
Fig. 8-43
except that two of the ways lead to disconnected graphs. Hence the above eight spanning trees are all the spanning
trees of G.
8.12. Find a minimal spanning tree T for the weighted graph G in Fig. 8-44(a).
Fig. 8-44
Since G has n = 9 vertices, T must have n −1 = 8 edges. Apply Algorithm 8.2, that is, keep deleting edges with
maximum length and without disconnecting the graph until only n−1 = 8 edges remain.Alternatively, applyAlgorithm
8.3, that is, beginning with the nine vertices, keep adding edges with minimum length and without forming any circle
until n −1 = 8 edges are added. Both methods give a minimum spanning tree such as that shown in Fig. 8-44(b).
8.13. Let G be a graph with more than one vertex. Prove the following are equivalent.
(i) G is a tree.
(ii) Each pair of vertices is connected by exactly one simple path.
(iii) G is connected; but G −e is disconnected for any edge e of G.
(iv) G is cycle-free, but if any edge is added to G then the resulting graph has exactly one cycle.
(i) implies (ii) Let u and v be two vertices in G. Since G is a tree, G is connected so there is at least one path between
u and v. By Problem 8.37 there can only be one simple path between u and v, otherwise G will contain a cycle.
(ii) implies (iii) Suppose we delete an edge e = {u, v} from G. Note e is a path from u to v. Suppose the resulting
graph G −e has a path P from u to v. Then P and e are two distinct paths from u to v, which contradicts the
hypothesis. Thus there is no path between u and v in G −e, so G −e is disconnected.
(iii) implies (iv) Suppose G contains a cycle C which contains an edge e = {u, v}. By hypothesis, G is connected but
G′ = G−e is disconnected, with u and v belonging to different components of G′ (Problem 8.41) This contradicts
the fact that u and v are connected by the path P = C −e which lies in G′. Hence G is cycle-free. Now let x and
y be vertices of G and let H be the graph obtained by adjoining the edge e = {x, y} to G. Since G is connected,
there is a path P from x to y in G; hence C = Pe forms a cycle in H. Suppose H contains another cycle C′. Since
G is cycle-free, C′ must contain the edge e, say C′ = P ′e. Then P and P ′ are two simple paths in G from x to y.
(See Fig. 8-45.) By Problem 8.37, G contains a cycle, which contradicts the fact that G is cycle-free. Hence H
contains only one cycle.

CHAP. 8]
GRAPH THEORY
183
(iv) implies (i) Since adding any edge e = {x, y} to G produces a cycle, the vertices x and y must already be connected
in G. Hence G is connected and by hypothesis G is cycle-free; that is, G is a tree.
Fig. 8-45
8.14. Prove Theorem 8.6: Let G be a ﬁnite graph with n ≥1 vertices. Then the following are equivalent.
(i) G is a tree, (ii) G is a cycle-free and has n −1 edges, (iii) G is connected and has n −1 edges.
The proof is by induction on n. The theorem is certainly true for the graph with only one vertex and hence no edges.
That is, the theorem holds for n = 1. We now assume that n > 1 and that the theorem holds for graphs with less than
n vertices.
(i) implies (ii) Suppose G is a tree. Then G is cycle-free, so we only need to show that G has n−1 edges. By Problem
8.38, G has a vertex of degree 1. Deleting this vertex and its edge, we obtain a tree T which has n −1 vertices.
The theorem holds for T , so T has n −2 edges. Hence G has n −1 edges.
(ii) implies (iii) Suppose G is cycle-free and has n −1 edges. We only need show that G is connected. Suppose G is
disconnected and has k components, T1, . . . , Tk, which are trees since each is connected and cycle-free. Say Ti has
ni vertices. Note ni < n. Hence the theorem holds for Ti, so Ti has ni −1 edges. Thus
n = n1 + n2 + · · · + nk
and
n −1 = (n1 −1) + (n2 −1) + · · · + (nk −1) = n1 + n2 + · · · + nk −k = n −k
Hence k = 1. But this contradicts the assumption that G is disconnected and has k > 1 components. Hence G is
connected.
(iii) implies (i) Suppose G is connected and has n −1 edges. We only need to show that G is cycle-free. Suppose G
has a cycle containing an edge e. Deleting e we obtain the graph H = G −e which is also connected. But H has
n vertices and n −2 edges, and this contradicts Problem 8.39. Thus G is cycle-free and hence is a tree.
PLANAR GRAPHS
8.15. Draw a planar representation, if possible, of the graphs (a), (b), and (c) in Fig. 8-46.
Fig. 8-46

184
GRAPH THEORY
[CHAP. 8
(a) Redrawing the positions of B and E, we get a planar representation of the graph as in Fig. 8-47(a).
(b) This is not the star graph K5. This has a planar representation as in Fig. 8-47(b).
(c) This graph is non-planar. The utility graph K3,3 is a subgraph as shown in Fig. 8-47(c) where we have redrawn
the positions of C and F.
Fig. 8-47
8.16. Count the number V of vertices, the number E of edges, and the number R of regions of each map in
Fig. 8-48; and verify Euler’s formula. Also ﬁnd the degree d of the outside region.
Fig. 8-48
(a) V = 4, E = 6, R = 4. Hence V −E + R = 4 −6 + 4 = 2. Also d = 3.
(b) V = 6, E = 9, R = 5; so V −E + R = 6 −9 + 5 = 2. Here d = 6 since two edges are counted twice.
(c) V = 5, E = 10, R = 7. Hence V −E + R = 5 −10 + 7 = 2. Here d = 5.
8.17. Find the minimum number n of colors required to paint each map in Fig. 8-48.
(a) n = 4;
(b) n = 3;
(c) n = 2.
8.18. Prove Theorem 8.8 (Euler): V −E + R = 2.
Suppose the connected map M consists of a single vertex P as in Fig. 8-49(a). Then V = 1, E = 0, and R = 1.
Hence V −E + R = 2. Otherwise M can be built up from a single vertex by the following two constructions:
(1) Add a new vertex Q2 and connect it to an existing vertex Q1 by an edge which does not cross any existing
edge as in Fig. 8-49(b).
(2) Connect two existing vertices Q1 and Q2 by an edge e which does not cross any existing edge as in
Fig. 8-49(c).
Neither operation changes the value of V −E + R. Hence M has the same value of V −E + R as the map consisting
of a single vertex, that is, V −E + R = 2. Thus the theorem is proved.

CHAP. 8]
GRAPH THEORY
185
Fig. 8-49
8.19. Prove Theorem 8.11: The following are equivalent for a graph G: (i) G is 2-colorable. (ii) G is bipartite.
(iii) Every cycle of G has even length.
(i) implies (ii). Suppose G is 2-colorable. Let M be the set of vertices painted the ﬁrst color, and let N be the set of
vertices painted the second color. Then M and N form a bipartite partition of the vertices of G since neither the
vertices of M nor the vertices of N can be adjacent to each other since they are of the same color.
(ii) implies (iii). Suppose G is bipartite and M and N form a bipartite partition of the vertices of G. If a cycle begins
at a vertex u of, say, M, then it will go to a vertex of N, and then to a vertex of M, and then to N and so on. Hence
when the cycle returns to u it must be of even length. That is, every cycle of G will have even length.
(iii) implies (i). Lastly, suppose every cycle of G has even length. We pick a vertex in each connected component and
paint it the ﬁrst color, say red. We then successively paint all the vertices as follows: If a vertex is painted red,
then any vertex adjacent to it will be painted the second color, say blue. If a vertex is painted blue, then any vertex
adjacent to it will be painted red. Since every cycle has even length, no adjacent vertices will be painted the same
color. Hence G is 2-colorable, and the theorem is proved.
8.20. Prove Theorem 8.12: A planar graph G is 5-colorable.
The proof is by induction on the number p of vertices of G. If p ≤5, then the theorem obviously holds. Suppose
p > 5, and the theorem holds for graphs with less than p vertices. By the preceding problem, G has a vertex v such that
deg(v) ≤5. By induction, the subgraph G −v is 5-colorable. Assume one such coloring. If the vertices adjacent to v
use less than the ﬁve colors, than we simply paint v with one of the remaining colors and obtain a 5-coloring of G. We
are still left with the case that v is adjacent to ﬁve vertices which are painted different colors. Say the vertices, moving
counterclockwise about v, are v1, . . . , v5 and are painted respectively by the colors c1, . . . , c5. (See Fig. 8-50(a).)
Fig. 8-50
Consider now the subgraph H of G generated by the vertices painted c1 and c3. Note H includes v1 and v3. If v1
and v3 belong to different components of H, then we can interchange the colors c1 and c3 in the component containing
v1 without destroying the coloring of G −v. Then v1 and v3 are painted by c3, c1 can be chosen to paint v, and we
have a 5-coloring of G. On the other hand, suppose v1 and v3 are in the same component of H. Then there is a path
P from v1 to v3 whose vertices are painted either c1 or c3. The path P together with the edges {v, v1} and {v, v3} form

186
GRAPH THEORY
[CHAP. 8
a cycle C which encloses either v2 or v4. Consider now the subgraph K generated by the vertices painted c3 or c4.
Since C encloses v2 or v4, but not both, the vertices v2 and v4 belong to different components of K. Thus we can
interchange the colors c2 and c4 in the component containing v2 without destroying the coloring of G −v. Then v2
and v4 are painted by c4, and we can choose c2 to paint v and obtain a 5-coloring of G. Thus G is 5-colorable and the
theorem is proved.
8.21. Use the Welch-Powell Algorithm 8.4 (Fig. 8-24) to paint the graph in Fig. 8-50(b).
First order the vertices according to decreasing degrees to obtain the sequence
H,
A,
D,
F,
B,
C,
E,
G
Proceeding sequentially, we use the ﬁrst color to paint the vertices H, B, and then G. (We cannot paint A, D, or
F the ﬁrst color since each is connected to H, and we cannot paint C or E the ﬁrst color since each is connected to
either H or B.) Proceeding sequentially with the unpainted vertices, we use the second color to paint the vertices A
and D. The remaining vertices F, C, and E can be painted with the third color. Thus the chromatic number n cannot
be greater than 3. However, in any coloring, H, D, and E must be painted different colors since they are connected to
each other. Hence n = 3.
8.22. Let G be a ﬁnite connected planar graph with at least three vertices. Show that G has at least one vertex
of degree 5 or less.
Let p be the number of vertices and q the number of edges of G, and suppose deg(u) ≥6 for each vertex u of G.
But 2q equals the sum of the degrees of the vertices of G (Theorem 8.1); so 2q ≥6p. Therefore
q ≥3p > 3p −6
This contradicts Theorem 8.9. Thus some vertex of G has degree 5 or less.
SEQUENTIAL REPRESENTATION OF GRAPHS
8.23. Find the adjacency matrix A = [aij] of each graph G in Fig. 8-51.
Fig. 8-51
Set aij = n if there are n edges {vi, vj} and aij = 0 otherwise. Hence:
(a) A =
⎡
⎢⎢⎣
0
1
0
1
1
0
1
1
0
1
0
1
1
1
1
0
⎤
⎥⎥⎦;
(b) A =
⎡
⎢⎢⎣
1
0
0
1
0
0
2
1
0
2
0
0
1
1
0
1
⎤
⎥⎥⎦
(Since (a) has no multiple edges and no loops, the entries in A are either 0 or 1, and are 0 on the diagonal.)

CHAP. 8]
GRAPH THEORY
187
8.24. Draw the graph G corresponding to each adjacency matrix:
(a) A =
⎡
⎢⎢⎢⎢⎣
0
1
0
1
0
1
0
0
1
1
0
0
0
1
1
1
1
1
0
1
0
1
1
1
0
⎤
⎥⎥⎥⎥⎦
;
(b) A =
⎡
⎢⎢⎣
1
3
0
0
3
0
1
1
0
1
2
2
0
1
2
0
⎤
⎥⎥⎦
(a) Since A is a 5-square matrix, G has ﬁve vertices, say, v1, v2 . . . , v5. Draw an edge from vi to vj when aij = 1. The
graph appears in Fig. 8-52(a).
(b) Since A is a 4-square matrix, G has four vertices, say, v1, . . . , v4. Draw n edges from vi to vj when aij = n. Also,
draw n loops at vi when ai = n. The graph appears in Fig. 8-52(b).
Fig. 8-52
8.25. Find the weight matrix W = [wij] of the weighted graph G in Fig. 8-53(a) where the vertices are stored
in the array DATA as follows: DATA: A, B, C, X, Y.
Fig. 8-53
The vertices are numbered according to the way they are stored in the array DATA; so v1 = A, v2 = B, . . . ,
v5 = Y. Then set Wij = w, where w is the weight of the edge from vi to vj. This yields the matrix W in Fig. 8-53(b).
LINKED REPRESENTATION OF GRAPHS
8.26. A graph G with vertices A, B, . . . , F is stored in memory using a linked representation with a vertex ﬁle
and an edge ﬁle as in Fig. 8-54.
(a) List the vertices in the order they appear in memory.
(b) Find the adjacency list adj(v) of each vertex v of G.
(a) Since START = 4, the list begins with the vertex D. The NEXT-V tells us to go to 1(B), then 3(F), then 5(A),
then 8(E), and then 7(C); that is,
D,
B,
F,
A,
E,
C

188
GRAPH THEORY
[CHAP. 8
(b) Here adj(D) = [5(A), 1(B), 8(E)]. Speciﬁcally, PTR[4(D)] = 7 and ADJ[7] = 5(A) tells us that adj(D) begins
with A. Then NEXT[7] = 3 and ADJ[3] = 1(B) tells us that B is the next vertex in adj(D). Then NEXT[3] = 10
and ADJ[10] = 8(E) tells us that E in the next vertex in adj(D). However, NEXT[10] = 0 tells us that there are
no more neighbors of D. Similarly.
adj(B) = [A, D],
adj(F) = [E],
adj(A) = [B, D],
adj(E) = [C, D, F],
adj(C) = [E]
In other words, the following is the adjacency structure of G:
G = [A:B, D;
B:A, D;
C:E;
D:A, B, E;
E:C, D, F;
F:E]
Fig. 8-54
8.27. Draw the diagram of the graph G whose linked representation appears in Fig. 8-54.
Use the vertex list obtained in Problem 8.26(a) and the adjacency lists obtained in Problem 8.26(b) to draw the graph
G in Fig. 8-55.
Fig. 8-55
8.28. Exhibit the adjacency structure (AS) of the graph G in: (a) Fig. 8-56(a), (b) Fig. 8-56(b).
The adjacency structure of a graph G consists of the adjacency lists of the vertices where we use a colon“:” to separate
a vertex from its adjacency list, and a semicolon “;” to separate the different lists. Thus:
(a) G = [A:B, C, D;
B:A, C, E;
C:A, B, D, E;
D:A, C;
E:B, C]
(b) G = [A:B, D;
B:A, C, E;
C:B, E, F;
D:A, E;
E:B, C, D, F;
F:C, E]
GRAPH ALGORITHMS
8.29. Consider the graph G in Fig. 8-56(a) (where the vertices are ordered alphabetically).
(a) Find the adjacency structure of G.
(b) Find the order in which the vertices of G are processed using a DFS (depth-ﬁrst search) algorithm
beginning at vertex A.
(a) List the neighbors of each vertex as follows:
G = [A:B, C, D; B:A, J; C:A; D:A, K; J:B, K, M; K:D, J, L; L:K, M; M:J, L]

CHAP. 8]
GRAPH THEORY
189
Fig. 8-56
(b) During the DFS algorithm, the ﬁrst vertex N in STACK is processed and the neighbors of N (which have not been
previously processed) are then pushed onto STACK. Initially, the beginning vertex A is pushed onto STACK. The
following shows the sequence of waiting lists in STACK and the vertices being processed:
STACK
A
DCB
KCB
LJCB
MJCB
JCB
CB
B

Vertex
A
D
K
L
M
J
C
B
In other words the vertices are processed in the order: A, D, K, L, M, J, C, B.
8.30. Repeat Problem 8.29 for the graph G in Fig. 8-56(b).
(a) List the neighbors of each vertex as follows:
G = [A:B, C, D; B:A;
C:A, K, L; D:A;
J:K, M; K:C, J, M; L:C, M; M:J, K, L]
(b) The following shows the sequence of waiting lists in STACK and the vertices being processed:
STACK
A
DCB
CB
LKB
MKB
KJB
JB
B

Vertex
A
D
C
L
M
K
J
B
In other words the vertices are processed in the order: A, D, C, L, M, K, J, B.
8.31. Beginning at vertex A and using a BFS (breadth-ﬁrst search) algorithm, ﬁnd the order the vertices are
processed for the graph G: (a) in Fig. 8-56(a), (b) in Fig. 8-56(b).
(a) The adjacency structure of G appears in Problem 8.29. During the BFS algorithm, the ﬁrst vertex N in QUEUE
is processed and the neighbors of N (which have not appeared previously) are then added onto QUEUE. Initially,
the beginning vertex A is assigned to QUEUE. The following shows the sequence of waiting lists in QUEUE and
the vertices being processed:
QUEUE
A
DCB
JDC
JD
KJ
MK
LM
L

Vertex
A
B
C
D
J
K
M
L
In other words the vertices are processed in the order: A, B, C, D, J, K, M, L.

190
GRAPH THEORY
[CHAP. 8
(b) The adjacency structure of G appears in Problem 8.30. The following shows the sequence of waiting lists in
QUEUE and the vertices being processed:
QUEUE
A
DCB
DC
LKD
LK
MJL
MJ
M

Vertex
A
B
C
D
K
L
J
M
In other words the vertices are processed in the order: A, B, C, D, K, L, J, M.
TRAVELING–SALESMAN PROBLEM
8.32. Apply the nearest-neighbor algorithm to the complete weighted graph G in Fig. 8-57 beginning at:
(a) vertex A; (b) vertex D.
Fig. 8-57
(a) Starting at A, the closest vertex is B with distance 100; from B, the closest is C with distance 125; and from C the
closest is E with distance 275. From E we must go to D with distance 75; and ﬁnally from D we must go back
to A with distance 150. Accordingly, the nearest-neighbor algorithm beginning at A yields the following weighted
Hamiltonian circuit:
|ABCEDA| = 100 + 125 + 275 + 75 + 150 = 725
(b) Starting at D, we must go to E, then A, then B then C and ﬁnally back to D. Accordingly, the nearest-neighbor
algorithm beginning at D yields the following weighted Hamiltonian circuit:
|DEABCD| = 75 + 175 + 100 + 125 + 300 = 775
8.33. Prove Theorem 8.13. The complete graph Kn with n ≥3 vertices has H = (n −1)!/2 Hamiltonian
circuits.
The counting convention for Hamiltonian circuits enables us to designate any vertex in a circuit as the starting point.
From the starting point, we can go to any n −1 vertices, and from there to any one of n −2 vertices, and so on until
arriving at the last vertex and then returning to the starting point. By the basic counting principle, there are a total of
(n −1)(n −2) · · · 2 · 1 = (n −1)! circuits that can be formed from a stating point. For n ≥3, any circuit can be paired
with one in the opposite direction which determines the same Hamiltonian circuit. Accordingly, there are a total of
H = (n −1)!/2 Hamiltonian circuits.

CHAP. 8]
GRAPH THEORY
191
Supplementary Problems
GRAPH TERMINOLOGY
8.34. Consider the graph G in Fig. 8-58. Find:
(a) degree of each vertex (and verify Theorem 8.1);
(b) all simple paths from A to L;
(c) all trails (distinct edges) from B to C;
(d) d(A, C), distance from A to C;
(e) diam(G), the diameter of G.
Fig. 8-58
8.35. Consider the graph in Fig. 8-58. Find (if any): (a) all cycles; (b) all cut points; (c) all bridges.
8.36. Consider the graph in Fig. 8-58. Find the subgraph H = H(V ′, E′) of G where V ′ equals:
(a) {B, C, D, J, K}
(b) {A, C, J, L, M}
(c) {B, D, J, M}
(d) {C, K, L, M}
Which of them are isomorphic and which homeomorphic?
8.37. Suppose a graph G contains two distinct paths from a vertex u to a vertex v. Show that G has a cycle.
8.38. Suppose G is a ﬁnite cycle-free graph with at least one edge. Show that G has at least two vertices of degree 1.
8.39. Show that a connected graph G with n vertices must have at least n −1 edges.
8.40. Find the number of connected graphs with four vertices. (Draw them.)
8.41. Let G be a connected graph. Prove:
(a) If G contains a cycle C which contains an edge e, then G −e is still connected.
(b) If e = {u, v} is an edge such that G −e is disconnected, then u and v belong to different components of G −e.
8.42. Suppose G has V vertices and E edges. Let M and m denote, respectively, the maximum and minimum of the degrees
of the vertices in G. Show that m ≤2E/V ≤M.
8.43. Consider the following two steps on a graph G: (1) Delete an edge. (2) Delete a vertex and all edges containing that
vertex. Show that every subgraph H of a ﬁnite graph G can be obtained by a sequence consisting of these two steps.
TRAVERSABLE GRAPHS, EULER AND HAMILTONIAN CIRCUITS
8.44. Consider the graphs K5, K3,3 and K2,3 in Fig. 8-59. Find an Euler (traversable) path or an Euler circuit of each graph,
if it exists. If it does not, why not?
8.45. Consider each graph in Fig. 8-59. Find a Hamiltonian path or a Hamiltonian circuit, if it exists. If it does not, why not?
8.46. Show that Kn has H = (n −1)!/2 Hamiltonian circuits. In particular, ﬁnd the number of Hamiltonian circuits for the
graph K5 in Fig. 8-59(a).
8.47. Suppose G and G∗are homeomorphic graphs. Show that G is traversable (Eulerian) if and only if G∗is traversable
(Eulerian).

192
GRAPH THEORY
[CHAP. 8
Fig. 8-59
SPECIAL GRAPHS
8.48. Draw two 3-regular graphs with: (a) eight vertices; (b) nine vertices.
8.49. Consider the complete graph Kn.
(a) Find the diameter of Kn.
(b) Find the number m of edges in Kn.
(c) Find the degree of each vertex in Kn.
(d) Find those values of n for which Kn is: (i) traversable; (ii) regular.
8.50. Consider the complete graph Km,n.
(a) Find the diameter of Km,n.
(b) Find the number E of edges in Km,n.
(c) Find those Km,n which are traversable.
(d) Which of the graphs Km,n are isomorphic and which homeomorphic?
8.51. The n-cube, denoted by Qn, is the graph whose vertices are the 2n bit strings of length n, and where two vertices are
adjacent if they differ in only one position. Figure 8-60(a) and (b) show the n-cubes Q2 and Q3.
(a) Find the diameter of Qn.
(b) Find the number m of edges in Qn.
(c) Find the degree of each vertex in Qn.
(d) Find those values of n for which Qn is traversable.
(e) Find a Hamiltonian circuit (called a Gray code) for (i) Q3; (ii) Q4.
Fig. 8-60

CHAP. 8]
GRAPH THEORY
193
8.52. The n-cycle, denoted by Cn, is the graph which consists of only a single cycle of length n. Figure 8-60(c) shows the
6-cycle C6. (a) Find the number of vertices and edges in Cn. (b) Find the diameter of Cn.
8.53. Describe those connected graphs which are both bipartite and regular.
TREES
8.54. Draw all trees with ﬁve or fewer vertices.
8.55. Find the number of trees with seven vertices.
8.56. Find the number of spanning trees in Fig. 8-61(a).
8.57. Find the weight of a minimum spanning tree in Fig. 8-61(b)
Fig. 8-61
8.58. Show that any tree is a bipartite graph.
8.59. Which complete bipartite graphs Km,n are trees.
PLANAR GRAPHS, MAPS, COLORINGS
8.60. Draw a planar representation of each graph G in Fig. 8-62, if possible; otherwise show that it has a subgraph homeo-
morphic to K5 or K3,3.
Fig. 8-62
8.61. Show that the 3-cube Q3 (Fig. 8-60(b)) is planar.
8.62. For the map in Fig. 8-63, ﬁnd the degree of each region and verify that the sum of the degrees of the regions is equal
to twice the number of edges.
8.63. Count the number V of vertices, the number E of edges, and the number R of regions of each of the maps in Fig. 8-64,
and verify Euler’s formula.

194
GRAPH THEORY
[CHAP. 8
Fig. 8-63
Fig. 8-64
8.64. Find the minimum number of colors needed to paint the regions of each map in Fig. 8-64.
8.65. Draw the map which is dual to each map in Fig. 8-64.
8.66. Use the Welch-Powell algorithm to paint each graph in Fig. 8-65. Find the chromatic number n of the graph.
Fig. 8-65
SEQUENTIAL REPRESENTATION OF GRAPHS
8.67. Find the adjacency matrix A of each multigraph in Fig. 8-66.
Fig. 8-66

CHAP. 8]
GRAPH THEORY
195
8.68. Draw the multigraph G corresponding to each of the following adjacency matrices:
(a) A =
⎡
⎢⎢⎣
0
2
0
1
2
1
1
1
0
1
0
1
1
1
1
0
⎤
⎥⎥⎦;
(b) A =
⎡
⎢⎢⎣
1
1
1
2
1
0
0
0
1
0
0
2
2
0
2
2
⎤
⎥⎥⎦
8.69. Suppose a graph G is bipartite. Show that one can order the vertices of G so that its adjacency matrix A has the form:
A =
& 0
B
C
0
'
LINKED REPRESENTATION OF GRAPHS
8.70. Suppose a graph G is stored in memory as in Fig. 8-67.
Fig. 8-67
(a) List the vertices in the order in which they appear in memory.
(b) Find the adjacency structure of G, that is, ﬁnd the adjacency list adj(v) of each vertex v of G.
8.71. Exhibit the adjacency structure (AS) for each graph G in Fig. 8-59.
8.72. Figure 8-68(a) shows a graph G representing six cities A, B, . . ., F connected by seven highways numbered
22, 33, . . ., 88. Show how G may be maintained in memory using a linked representation with sorted arrays for
the cities and for the numbered highways. (Note that VERTEX is a sorted array and so the ﬁeld NEXT-V is not
needed.)
Fig. 8-68

196
GRAPH THEORY
[CHAP. 8
TRAVELING–SALESMAN PROBLEM
8.73. Apply the nearest-neighbor algorithm to the complete weighted graph G in Fig. 8-68(b) beginning at: (a) vertex A;
(b) vertex B.
8.74. Consider the complete weighted graph G in Fig. 8-57 with 5 vertices.
(a) Beginning at vertex A, list the H = (n −1)!/2 = 12 Hamiltonian circuits of G, and ﬁnd the weight of each of
them.
(b) Find a Hamiltonian circuit of minimal weight.
GRAPH ALGORITHMS
8.75. Consider the graph G in Fig. 8-57 (where the vertices are ordered alphabetically).
(a) Find the adjacency structure (AS) of G.
(b) Using the DFS (depth-ﬁrst search) Algorithm 8.5 on G and beginning at vertex C, ﬁnd the STACK sequence
and the order in which the vertices are processed.
(c) Repeat (b) beginning at vertex K.
8.76. Using the BFS (breadth-ﬁrst search) Algorithm 8.6 on the graph G in Fig. 8-57, ﬁnd the QUEUE sequence and the
order the vertices are processed beginning at: (a) vertex C; (b) vertex K.
8.77. Repeat Problem 8.75 for the graph G in Fig. 8-65(a).
8.78. Repeat Problem 8.76 for the graph G in Fig. 8-65(a).
8.79. Repeat Problem 8.75 for the graph G in Fig. 8-65(b).
8.80. Repeat Problem 8.76 for the graph G in Fig. 8-65(b).
Answers to Supplementary Problems
8.34. (a) 2, 4, 3, 2, 2, 2, 3, 2; (b) ABL, ABKL, AJBL, AJBKL; (c) BLC, BKLC, BAJBLC, BAJBKLC;
(d) 3; (e) 4.
8.35. (a) AJBA, BKLB, CDMC; (b) B, C, L; (c) only {C, L}.
8.36. (a) E′ = {BJ, BK, CD}; (b) E′ = {AJ, CM, LC}; (c) E′ = {BJ, DM}; (d) E′ = {KL, LC, CM}, Also, (a) and (b)
are isomorphic, and (a), (b), and (c) are homeomorphic.
8.38. Hint: Consider a maximal simple path α, and show that its endpoints have degree 1.
8.40. There are ﬁve of them, as shown in Fig. 8-69.
Fig. 8-69
8.42. Hint: Use Theorem 8.1.
8.43. First delete all edges in G not in H, then delete all vertrices in G not in H.
8.44. (a) Eulerian since all vertices are even: ABCDEACEBDA. (b) None, since four vertices are odd. (c) Euler path
beginning at B and ending at D (or vice versa): BADCBED.

CHAP. 8]
GRAPH THEORY
197
8.45. (a) ABCDEA; (b) ABCDEFA; (c) none, since B or D must be visited twice in any closed path including all vertices.
8.46. (5 −1)!/2 = 12.
8.47. Hint: Adding a vertex by dividing an edge does not change the degree of the original vertices and simply adds a vertex
of even degree.
8.48. (a) The two 3-regular graphs in Fig. 8-70 are not isomorphic: (b) has a 5-cycle, but (a) does not. (b) There are none.
The sum of the degrees of an r-regular graph with s vertices equals rs, and rs must be even.
Fig. 8-70
8.49. (a) diam(K1) = 0; all others have diameter 1; (b) m = C(n, 2) = n(n −1)/2; (c) n −1; (d) (i) n = 2 and n odd;
(ii) all n.
8.50. (a) diam(K1,1) = 1; all others have diameter 2; (b) E = mn; (c) K1,1, K1,2, and all Km,n where m and n are even;
(d) none are isomorphic; only K1,1 and K1,2 are homeomorphic.
8.51. (a) n; (b) n2n−1; (c) n; (d) n = 1, even; (e) consider the 4 × 16 matrix:
M =
⎡
⎢⎢⎣
0
1
1
0
0
1
1
0
0
1
1
0
0
1
1
0
0
0
1
1
1
1
0
0
0
0
1
1
1
1
0
0
0
0
0
0
1
1
1
1
1
1
1
1
0
0
0
0
0
0
0
0
0
0
0
0
1
1
1
1
1
1
1
1
⎤
⎥⎥⎦
which shows how Q4 (the columns of M) is obtained from Q3. That is, the upper left 3 × 8 submatrix of M is Q3,
the upper right 3 × 8 submatrix of M is Q3 written in reverse, and the last row consists of eight 0s followed by
eight 1s.
8.52. (a) n and n; (b) n/2 when n is even, (n + 1)/2 when n is odd.
8.53. Km,m is bipartite and m-regular. Also, beginning with Km,m, delete m disjoint edges to obtain a bipartite graph which is
(m −1)-regular, delete another m disjoint edges to obtain a bipartite graph which is (m −2)-regular, and so on. These
graphs may be disconnected, but their connected components have the desired properties.
8.54. There are eight such trees, as shown in Fig. 8-71. The graph with one vertex and no edges is called the trivial tree.
Fig. 8-71

198
GRAPH THEORY
[CHAP. 8
8.55. 10
8.56. 15
8.57. 1 + 1 + 1 + 1 + 1 + 2 + 2 + 3 = 12.
8.59. m = 1.
8.60. Only (a) is nonplanar, and K3,3 is a subgraph.
8.61. Figure 8-70(a) is a planar representation of Q3.
8.62. The outside region has degree 8, and the other two regions have degree 5.
8.63. (a) 5, 8, 5; (b) 12, 17, 7; (c) 3, 6, 5; (d) 7, 12, 7.
8.64. (a) 3; (b) 3; (c) 2; (d)3.
8.65. See Fig. 8-72.
Fig. 8-72
8.66. (a) n = 3; (b) n = 4.
8.67. (a)
⎡
⎢⎢⎣
0
1
0
1
1
0
1
1
0
1
0
1
1
1
1
0
⎤
⎥⎥⎦;
(b)
⎡
⎢⎢⎣
0
1
2
0
1
0
1
1
2
1
0
0
0
1
0
0
⎤
⎥⎥⎦;
(c)
⎡
⎢⎢⎣
1
1
1
0
1
0
0
2
1
0
0
0
0
2
0
0
⎤
⎥⎥⎦
8.68. See Fig. 8-73.
8.69. Let M and N be the two disjoint sets of vertices determining the bipartite graph G. Order the vertioes in M ﬁrst and
then those in N.
8.70.
(a) B, F, A, D, E, C.
(b) G = [A:B; B:A, C, D, E; C:F; D:B; E:B; F:C].

CHAP. 8]
GRAPH THEORY
199
Fig. 8-73
8.71.
(a) Each vertex is adjacent to the other four vertices.
(b) G = [A:B, D, F; B:A, C, E; C:B, D, F; D:A, C, E; E:B, D, F; F:A, C, E].
(c) G = [A:B, D; B:A, C, E; C:B, D; D:A, C, E; E:B, D].
8.72. See Fig. 8-74.
Fig. 8-74
8.73. (a) |ACBEDFA| = 20 or |ACBEFDA| = 21; (b) |BCFEDAB| = 21 or |BCDEFAB| = 20
8.74.
(a) |ABCDEA| = 775, |ABCEDA| = 725, |ABDCEA| = 1100, |ABDECA| = 900, |ABECDA| = 1050,
|ABEDCA| = 900, |ACBDEA| = 825, |ACBEDA| = 775, |ACDBEA| = 1150, |ACEBDA| = 1100,
|ADBCEA| = 975;
(b) |ABCEDA| = 725
8.75.
(a) G = [A:BJ; B:AJKL; C:DLM; D:CM; J:AB; K:BL; L:BCK; M:CD]
(b) [STACK : C, MLD, DL, L, KB, B, J, A], CMDLKBJA
(c) [STACK : K, LB, CB, MDB, DB, B, JA, A], KLCMDBJA
8.76.
(a) [QUEUE : C, MLD, ML, L, KB, JAK, JA, J], CDMLBKAJ
(b) [QUEUE : K, LB, JAL, CJA, CJ, C, MD, M], KBLAJCDM
8.77.
(a) G = [A:BMJKL; B:ACDJL; C:BJ; D:BKM; J:ABCM; K:ADL; L:ABKM; M:ADJL]
(b) [STACK : C, JB, MBA, LDAB, KBAD, DAB, AB, B], CJMLKDAB
(c) [STACK : K, LDA, MBAD, JDAB, CBAD, BAD, AD, D], KLMJCBAD

200
GRAPH THEORY
[CHAP. 8
8.78.
(a) [QUEUE : C, JB, LDAJ, MLDA, KMLD, KML, KM, K], CBJADLMK
(b) [QUEUE : K, LDA, JMBLD, JMBL, CJMB, CJM, CJ, C], KADLBMJC
8.79.
(a) G = [A:BLM; B:ACLM; C:BDJ; D:CK; J:CK; K:DJL; L:ABKM; M:ABL]
(b) [STACK : C, JDB, KDB, LDB, MBAD, BAD, AD, D], CJKLMBAD
(c) [STACK : K, LJD, MBAJD, BAJD, CAJD, JDA, DA, A], KLMBCJDA
8.80.
(a) [QUEUE : C, JDB, MLAJD, KMLAJ, KMLA, KML, KM, K], CBDJALMK
(b) [QUEUE : K, LJD, CLJ, CL, MBAC, MBA, MB, M], KDJLCABM

CHAPTER 9
Directed Graphs
9.1
INTRODUCTION
Directed graphs are graphs in which the edges are one-way. Such graphs are frequently more useful in various
dynamic systems such as digital computers or ﬂow systems. However, this added feature makes it more difﬁcult
to determine certain properties of the graph. That is, processing such graphs may be similar to traveling in a city
with many one-way streets.
This chapter gives the basic deﬁnitions and properties of directed graphs. Many of the deﬁnitions will be
similar to those in the preceding chapter on (non-directed) graphs. However, for pedagogical reasons, this chapter
will be mainly independent from the preceding chapter.
9.2
DIRECTED GRAPHS
A directed graph G or digraph (or simply graph) consists of two things:
(i) A set V whose elements are called vertices, nodes, or points.
(ii) A set E of ordered pairs (u, v) of vertices called arcs or directed edges or simply edges.
We will write G(V, E) when we want to emphasize the two parts of G. We will also write V (G) and E(G) to
denote, respectively, the set of vertices and the set of edges of a graph G. (If it is not explicitly stated, the context
usually determines whether or not a graph G is a directed graph.)
Suppose e = (u, v) is a directed edge in a digraph G. Then the following terminology is used:
(a) e begins at u and ends at v.
(b) u is the origin or initial point of e, and v is the destination or terminal point of e.
(c) v is a successor of u.
(d) u is adjacent to v, and v is adjacent from u.
If u = v, then e is called a loop.
The set of all successors of a vertex u is important; it is denoted and formally deﬁned by
succ(u) = {v ∈V | there exists an edge (u, v) ∈E}
It is called the successor list or adjacency list of u.
201
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

202
DIRECTED GRAPHS
[CHAP. 9
Apicture of a directed graph G is a representation of G in the plane. That is, each vertex u of G is represented
by a dot (or small circle), and each (directed) edge e = (u, v) is represented by an arrow or directed curve from
the initial point u of e to the terminal point v. One usually presents a digraph G by its picture rather than explicitly
listing its vertices and edges.
If the edges and/or vertices of a directed graph G are labeled with some type of data, then G is called
a labeled directed graph.
A directed graph (V, E) is said to be ﬁnite if its set V of vertices and its set E of edges are ﬁnite.
EXAMPLE 9.1
(a) Consider the directed graph G pictured in Fig. 9-1(a). It consists of four vertices, A, B, C, D, that is,
V (G) = {A, B, C, D} and the seven following edges:
E(G) = {e1, e2, . . . , e7} = {(A, D), (B, A), (B, A), (D, B), (B, C), (D, C), (B, B)}
The edges e2 and e3 are said to be parallel since they both begin at B and end at A. The edge e7 is a loop
since it begins and ends at B.
Fig. 9-1
(b) Suppose three boys, A, B, C, are throwing a ball to each other such that A always throws the ball to B, but
B and C are just as likely to throw the ball to A as they are to each other. This dynamic system is pictured
in Fig. 9-1(b) where edges are labeled with the respective probabilities, that is, A throws the ball to B with
probability 1, B throws the ball to A and C each with probability 1/2, and C throws the ball to A and B each
with probability 1/2.
Subgraphs
Let G = G(V, E) be a directed graph, and let V ′ be a subset of the set V of vertices of G. Suppose E′ is
a subset of E such that the endpoints of the edges in E′ belong to V ′. Then H(V ′, E′) is a directed graph, and
it is called a subgraph of G. In particular, if E′ contains all the edges in E whose endpoints belong to V ′, then
H(V ′, E′) is called the subgraph of G generated or determined by V ′. For example, for the graph G = G(V, E)
in Fig. 9-1(a), H(V ′, E′) is the subgraph of G determine by the vertex set V ′ where
V ′ = {B, C, D}
and
E′ =
(
e4, e5, e6, e7
)
= {(D, B), (B, C), (D, C), (B, B)}
9.3
BASIC DEFINITIONS
This section discusses the questions of degrees of vertices, paths, and connectivity in a directed
graph.

CHAP. 9]
DIRECTED GRAPHS
203
Degrees
Suppose G is a directed graph. The outdegree of a vertex v of G, written outdeg(v), is the number of edges
beginning at v, and the indegree of v, written indeg(v), is the number of edges ending at v. Since each edge begins
and ends at a vertex we immediately obtain the following theorem.
Theorem 9.1: The sum of the outdegrees of the vertices of a digraph G equals the sum of the indegrees of the
vertices, which equals the number of edges in G.
A vertex v with zero indegree is called a source, and a vertex v with zero outdegree is called a sink.
EXAMPLE 9.2 Consider the graph G in Fig. 9-1(a). We have:
outdeg (A) = 1,
outdeg (B) = 4,
outdeg (C) = 0,
outdeg (D) = 2,
indeg (A) = 2,
indeg (B) = 2,
indeg (C) = 2,
indeg (D) = 1.
As expected, the sum of the outdegrees equals the sum of the indegrees, which equals the number 7 of edges.
The vertex C is a sink since no edge begins at C. The graph has no sources.
Paths
Let G be a directed graph. The concepts of path, simple path, trail, and cycle carry over from nondirected
graphs to the directed graph G except that the directions of the edges must agree with the direction of the path.
Speciﬁcally:
(i) A (directed) path P in G is an alternating sequence of vertices and directed edges, say,
P =

v0, e1, v1, e2, v2, . . . , en, vn

such that each edge ei begins at vi−1 and ends at vi. If there is no ambiguity, we denote P by its sequence
of vertices or its sequence of edges.
(ii) The length of the path P is n, its number of edges.
(iii) A simple path is a path with distinct vertices. A trail is a path with distinct edges.
(iv) A closed path has the same ﬁrst and last vertices.
(v) A spanning path contains all the vertices of G.
(vi) A cycle (or circuit) is a closed path with distinct vertices (except the ﬁrst and last).
(vii) A semipath is the same as a path except the edge ei may begin at vi−1 or vi and end at the other vertex.
Semitrails and semisimple paths are analogously deﬁned.
A vertex v is reachable from a vertex u if there is a path from u to v. If v is reachable from u, then (by eliminating
redundant edges) there must be a simple path from u to v.
EXAMPLE 9.3 Consider the graph G in Fig. 9-1(a).
(a) The sequence P1 = (D, C, B, A) is a semipath but not a path since (C, B) is not an edge; that is, the direction
of e5 = (C, B) does not agree with the direction of P1.
(b) The sequence P2 = (D, B, A) is a path from D to A since (D, B) and (B, A) are edges. Thus A is reachable
from D.

204
DIRECTED GRAPHS
[CHAP. 9
Connectivity
There are three types of connectivity in a directed graph G:
(i) G is strongly connected or strong if, for any pair of vertices u and v in G, there is a path from u to v
and a path from v to u, that is, each is reachable from the other.
(ii) G is unilaterally connected or unilateral if, for any pair of vertices u and v in G, there is a path from
u to v or a path from v to u, that is, one of them is reachable from the other.
(iii) G is weakly connected or weak if there is a semipath between any pair of vertices u and v in G.
Let G′ be the (nondirected) graph obtained from a directed graph G by allowing all edges in G to be nondirected.
Clearly, G is weakly connected if and only if the graph G′ is connected.
Observe that strongly connected implies unilaterally connected which implies weakly connected. We say
that G is strictly unilateral if it is unilateral but not strong, and we say that G is strictly weak if it is weak but not
unilateral.
Connectivity can be characterized in terms of spanning paths as follows:
Theorem 9.2: Let G be a ﬁnite directed graph. Then:
(i) G is strong if and only if G has a closed spanning path.
(ii) G is unilateral if and only if G has a spanning path.
(iii) G is weak if and only if G has a spanning semipath.
EXAMPLE 9.4 Consider the graph G in Fig. 9-1(a). It is weakly connected since the underlying nondirected
graph is connected. There is no path from C to any other vertex, that is, C is a sink, so G is not strongly connected.
However, P = (B, A, D, C) is a spanning path, so G is unilaterally connected.
Graphs with sources and sinks appear in many applications (such as ﬂow diagrams and networks).Asufﬁcient
condition for such vertices to exist follows.
Theorem 9.3: Suppose a ﬁnite directed graph G is cycle-free, that is, contains no (directed) cycles. Then G
contains a source and a sink.
Proof: Let P = (v0, v1, . . . , vn) be a simple path of maximum length, which exists since G is ﬁnite. Then the
last vertex vn is a sink; otherwise an edge (vn, u) will either extend P or form a cycle if u = vi, for some i.
Similarly, the ﬁrst vertex v0 is a source.
9.4
ROOTED TREES
Recall that a tree graph is a connected cycle-free graph, that is, a connected graph without any cycles.Arooted
tree T is a tree graph with a designated vertex r called the root of the tree. Since there is a unique simple path
from the root r to any other vertex v in T , this determines a direction to the edges of T . Thus T may be viewed
as a directed graph. We note that any tree may be made into a rooted tree by simply selecting one of the vertices
as the root.
Consider a rooted tree T with root r. The length of the path from the root r to any vertex v is called the level
(or depth) of v, and the maximum vertex level is called the depth of the tree. Those vertices with degree 1, other
than the root r, are called the leaves of T , and a directed path from a vertex to a leaf is called a branch.
One usually draws a picture of a rooted tree T with the root at the top of the tree. Figure 9-2(a) shows a rooted
tree T with root r and 10 other vertices. The tree has ﬁve leaves, d,f, h, i, and j. Observe that: level(a) = 1,
level(f ) = 2, level(j) = 3. Furthermore, the depth of the tree is 3.
The fact that a rooted tree T gives a direction to the edges means that we can give a precedence relationship
between the vertices. Speciﬁcally, we will say that a vertex u precedes a vertex v or that v follows u if there is

CHAP. 9]
DIRECTED GRAPHS
205
Fig. 9-2
a (directed) path from v to u. In particular, we say that v immediately follows u if (u, v) is an edge, that is, if v
follows u and v is adjacent to u. We note that every vertex v, other than the root, immediately follows a unique
vertex, but that v can be immediately followed by more than one vertex. For example, in Fig. 9-2(a), the vertex j
follows c but immediately follows g. Also, both i and j immediately follow g.
A rooted tree T is also a useful device to enumerate all the logical possibilities of a sequence of events where
each event can occur in a ﬁnite number of ways. This is illustrated in the following example.
EXAMPLE 9.5 Suppose Marc and Erik are playing a tennis tournament such that the ﬁrst person to win two
games in a row or who wins a total of three games wins the tournament. Find the number of ways the tournament
can proceed.
The rooted tree in Fig. 9-2(b) shows the various ways that the tournament could proceed. There are 10 leaves
which correspond to the 10 ways that the tournament can occur:
MM, MEMM, MEMEM, MEMEE, MEE, EMM, EMEMM, EMEME, EMEE, EE
Speciﬁcally, the path from the root to the leaf describes who won which games in the particular tournament.
Ordered Rooted Trees
Consider a rooted tree T in which the edges leaving each vertex are ordered. Then we have the concept
of an ordered rooted tree. One can systematically label (or address) the vertices of such a tree as follows: We
ﬁrst assign 0 to the root r. We next assign 1, 2, 3,. . . to the vertices immediately following r according as the
edges were ordered. We then label the remaining vertices in the following way. If a is the label of a vertex v,
then a.1, a.2, . . . are assigned to the vertices immediately following v according as the edges were ordered. We
illustrate this address system in Fig. 9-3(a), where edges are pictured from left to right according to their order.
Observe that the number of decimal points in any label is one less than the level of the vertex. We will refer to
this labeling system as the universal address system for an ordered rooted tree.
The universal address system gives us an important way of linearly describing (or storing) an ordered rooted
tree. Speciﬁcally, given addresses a and b, we let a < b if b = a.c, (that is, a is an initial segment of b), or if
there exist positive integers m and n with m < n such that
a = r.m.s
and
b = r.n.t
This order is called the lexicographic order since it is similar to the way words are arranged in a dictionary. For
example, the addresses in Fig. 9-3(a) are linearly ordered as pictured in Fig. 9-3(b). This lexicographic order is

206
DIRECTED GRAPHS
[CHAP. 9
Fig. 9-3
identical to the order obtained by moving down the leftmost branch of the tree, then the next branch to the right,
then the second branch to the right, and so on.
9.5
SEQUENTIAL REPRESENTATION OF DIRECTED GRAPHS
There are two main ways of maintaining a directed graph G in the memory of a computer. One way, called
the sequential representation of G, is by means of its adjacency matrix A. The other way, called the linked
representation of G, is by means of linked lists of neighbors. This section covers the ﬁrst representation. The
linked representation will be covered in Section 9.7.
Suppose a graph G has m vertices (nodes) and n edges. We say G is dense if m = O(n2) and sparse if
m = O(n) or even if m = O(n log n). The matrix representation of G is usually used when G is dense, and
linked lists are usually used when G is sparse. Regardless of the way one maintains a graph G in memory, the
graph G is normally input into the computer by its formal deﬁnition, that is, as a collection of vertices and a
collection of edges (pairs of vertices).
Remark: In order to avoid special cases of our results, we assume, unless otherwise stated, that m > 1 where m
is the number of vertices in our graph G. Therefore, G is not connected if G has no edges.
Digraphs and Relations, Adjacency Matrix
Let G(V, E) be a simple directed graph, that is, a graph without parallel edges. Then E is simply a subset
of V × V , and hence E is a relation on V . Conversely, if R is a relation on a set V , then G(V, R) is a simple
directed graph. Thus the concepts of relations on a set and simple directed graphs are one and the same. In fact,
in Chapter 2, we already introduced the directed graph corresponding to a relation on a set.
Suppose G is a simple directed graph with m vertices, and suppose the vertices of G have been ordered and
are called v1, v2,…,vm. Then the adjacency matrix A = [aij] of G is the m × m matrix deﬁned as follows:
aij =
 1
if there is an edge (vi, vj)
0
otherwise
Such a matrix A, which contains entries of only 0 or 1, is called a bit matrix or a Boolean matrix. (Although the
adjacency matrix of an undirected graph is symmetric, this is not true here for a directed graph.)
The adjacency matrix A of the graph G does depend on the ordering of the vertices of G. However, the
matrices resulting from two different orderings are closely related in that one can be obtained from the other by
simply interchanging rows and columns. Unless otherwise stated, we assume that the vertices of our matrix have
a ﬁxed ordering.
Remark: The adjacency matrix A = [aij] may be extended to directed graphs with parallel edges by setting:
aij = the number of edges beginning at vi and ending at vj

CHAP. 9]
DIRECTED GRAPHS
207
Then the entries of A will be nonnegative integers. Conversely, every m × m matrix A with nonnegative integer
entries uniquely deﬁnes a directed graph with m vertices.
EXAMPLE 9.6 Let G be the directed graph in Fig. 9-4(a) with vertices v1, v2, v3, v4. Then the adjacency matrix
A of G appears in Fig. 9-4(b). Note that the number of 1’s in A is equal to the number (eight) of edges.
Fig. 9-4
Consider the powers A, A2, A3,… of the adjacency matrix A = [aij] of a graph G. Let
aK(i, j) = the ij entry in the matrix AK
Note that a1(i, j) = aij gives the number of paths of length 1 from vertex vi to vertex vj. One can show that
a2(i, j) gives the number of paths of length 2 from vi to vj. In fact, we prove in Problem 9.17 the following
general result.
Proposition 9.4: Let A be the adjacency matrix of a graph G. Then aK(i, j), the ij entry in the matrix AK, gives
the number of paths of length K from vi to vj.
EXAMPLE 9.7 Consider again the graph G and its adjacency matrix A appearing in Fig. 9-4. The powers A2,
A3, and A4 of A follow:
A2 =
⎡
⎢⎢⎣
1
0
1
0
2
0
1
2
1
0
1
1
1
0
0
2
⎤
⎥⎥⎦,
A3 =
⎡
⎢⎢⎣
1
0
0
2
3
0
2
3
2
0
1
2
2
0
2
1
⎤
⎥⎥⎦,
A4 =
⎡
⎢⎢⎣
2
0
2
1
5
0
3
5
3
0
2
3
3
0
1
4
⎤
⎥⎥⎦
Observe that a2 (4, 1) = 1, so there is a path of length 2 from v4 to v1. Also, a3(2, 3) = 2, so there are two paths
of length 3 from v2 to v3; and a4(2, 4) = 5, so there are ﬁve paths of length 4 from v2 to v4.
Remark: Let A be the adjacency matrix of a graph G, and let Br be the matrix deﬁned by:
Br = A + A2 + A3 + · · · + Ar
Then the ij entry of the matrix Br gives the number of paths of length r or less from vertex vi to vertex vj.
Path Matrix
Let G = G(V, E) be a simple directed graph with m vertices v1, v2, . . ., vm. The path matrix or reachability
matrix of G is the m-square matrix P = [pij] deﬁned as follows:
pij =
 1
if there is a path from to vi to vj
0
otherwise
(The path matrix P may be viewed as the transitive closure of the relation E on V .)

208
DIRECTED GRAPHS
[CHAP. 9
Suppose now that there is a path from vertex vi to vertex vj in a graph G with m vertices. Then there must
be a simple path from vi to vj when vi ̸= vj, or there must be a cycle from vi to vj when vi = vj. Since G has
m vertices, such a simple path must have length m −1 or less, or such a cycle must have length m or less. This
means that there is a nonzero ij entry in the matrix Bm (deﬁned above) where A is the adjacency matrix of G.
Accordingly, the path matrix P and Bm have the same nonzero entries. We state this result formally.
Proposition 9.5: Let A be the adjacency matrix of a graph G with m vertices. Then the path matrix P and Bm
have the same nonzero entries where
Bm = A + A2 + A3 + · · · + Am
Recall that a directed graph G is said to be strongly connected if, for any pair of vertices u and v in G, there
is a path from u to v and from v to u. Accordingly, G is strongly connected if and only if the path matrix P of G
has no zero entries. This fact together with Proposition 9.5 gives the following result.
Proposition 9.6: Let A be the adjacency matrix of a graph G with m vertices. Then G is strongly connected if
and only if Bm has no zero entries where
Bm = A + A2 + A3 + · · · + Am
EXAMPLE 9.8 Consider the graph G and its adjacency matrix A appearing in Fig. 9-4. Here G has m = 4
vertices. Adding the matrix A and matrices A2, A3, A4 in Example 9.7, we obtain the following matrix B4 and
also path (reachability) matrix P by replacing the nonzero entries in B4 by 1:
B4 =
⎡
⎢⎢⎣
4
0
3
4
11
0
7 11
7
0
4
7
7
0
4
7
⎤
⎥⎥⎦
and
P =
⎡
⎢⎢⎣
1
0
1
1
1
0
1
1
1
0
1
1
1
0
1
1
⎤
⎥⎥⎦
Examining the matrix B4 or P, we see zero entries; hence G is not strongly connected. In particular, we see that
the vertex v2 is not reachable from any of the other vertices.
Remark: The adjacency matrix A and the path matrix P of a graph G may be viewed as logical (Boolean)
matrices where 0 represents “false” and 1 represents “true.” Thus the logical operations of ∧(AND) and
∨(OR) may be applied to the entries of A and P where these operations, used in the next section, are deﬁned
in Fig. 9-5.
Fig. 9-5
Transitive Closure and the Path Matrix
Let R be a relation on a ﬁnite set V with m elements. As noted above, the relation R may be identiﬁed with
the simple directed graph G = G (V, R). We note that the composition relation R2 = R × R consists of all pairs
(u, v) such that there is a path of length 2 from u to v. Similarly:
RK = {(u, v)| there is a path of length K from u to v}.

CHAP. 9]
DIRECTED GRAPHS
209
The transitive closure R* of the relation R on V may now be viewed as the set of ordered pairs (u, v) such that
there is a path from u to v in the graph G. Furthermore, by the above discussion, we need only look at simple
paths of length m −1 or less and cycles of length m or less. Accordingly, we have the following result which
characterizes the transitive closure R* of R.
Theorem 9.7: Let R be a relation on a set V with m elements. Then:
(i) R∗= R ∪R2 ∪. . . ∪Rm is the transitive closure of R.
(ii) The path matrix P of G(V, R) is the adjacency matrix of G′(V, R*).
9.6
WARSHALL’S ALGORITHM, SHORTEST PATHS
Let G be a directed graph with m vertices, v1, v2,. . . , vm. Suppose we want to ﬁnd the path matrix P of the
graph G. Warshall gave an algorithm which is much more efﬁcient than calculating the powers of the adjacency
matrix A. This algorithm is deﬁned in this section, and a similar algorithm is used to ﬁnd shortest paths in G when
G is weighted.
Warshall’s Algorithm
First we deﬁne m-square Boolean matrices P0, P1, . . ., Pm where Pk[i, j] denotes the ij entry of the
matrix Pk:
Pk[i, j] =
⎧
⎨
⎩
1
if there is a simple path from vi to vj which does not use any
other vertices except possibly v1, v2, …, vk,
0
otherwise.
For example,
P3[i, j] = 1
if there is a simple path from vi to vj which does not use any
other vertices except possibly v1, v2, v3.
Observe that the ﬁrst matrix P0 = A, the adjacency matrix of G. Furthermore, since G has only m vertices, the
last matrix Pm = P , the path matrix of G.
Warshall observed that Pk[i, j] = 1 can occur only if one of the following two cases occurs:
(1) There is a simple path from vi to vj which does not use any other vertices except possibly v1, v2,…,vk−1;
hence
Pk−1[i, j] = 1
(2) There is a simple path from vi to vk and a simple path from vk to vj where each simple path does not use
any other vertices except possibly v1, v2,…, vk−1; hence
Pk−1[i, k] = 1
and
Pk−1[k, j] = 1
These two cases are pictured as follows:
(1) vi →· · · →vj;
(2) vi →· · · →vk →· · · vj
where →· · · →denotes part of a simple path which does not use any other vertices except possibly v1,v2,…,
vk−1. Accordingly, the elements of Pk can be obtained by:
Pk[i, j] = Pk−1[i, j] ∨(Pk−1[i, k] ∧Pk−1[k, j])
where we use the logical operations of a ∧(AND) and ∨(OR). In other words we can obtain each entry in the
matrix Pk by looking at only three entries in the matrix Pk−1. Warshall’s algorithm appears in Fig. 9-6.

210
DIRECTED GRAPHS
[CHAP. 9
Fig. 9-6
Shortest-path Algorithm
Let G be a simple directed graph with m vertices, v1, v2, . . ., vm. Suppose G is weighted; that is, suppose each
edge e of G is assigned a nonnegative number w(e) called the weight or length of e. Then G may be maintained
in memory by its weight matrix W = [wij] deﬁned as follows:
wij =
 w(e)
if there is an edge e from vi to vj
0
if there is no edge from vi to vj
The path matrix P tells us whether or not there are paths between the vertices. Now we want to ﬁnd a matrix Q
which tells us the lengths of the shortest paths between the vertices or, more exactly, a matrix Q = [qij] where
qij = length of the shortest path from vi to vj
Next we describe a modiﬁcation of Warshall’s algorithm which efﬁciently ﬁnds us the matrix Q.
Here we deﬁne a sequence of matrices Q0, Q1, . . ., Qm (analogous to the above matrices P0, P1, . . ., Pm)
where Qk[i, j], the ij entry of Qk, is deﬁned as follows:
Qk[i, j] = the smaller of the length of the preceding path from vi to vj or the sum of the lengths of the
preceding paths from vi to vk and from vk to vj.
More exactly,
Qk[i, j] = MIN(Qk−1[i, j], Qk−1[i, k] + Qk−1[k, j])
The initial matrix Q0 is the same as the weight matrix W except that each 0 in w is replaced by ∞(or a very,
very large number). The ﬁnal matrix Qm will be the desired matrix Q.
EXAMPLE 9.9 Figure 9-7 shows a weighted graph G and its weight matrix W where we assume that v1 = R,
v2 = S, v3 = T, v4 = U.
Suppose we apply the modiﬁed Warshall’s algorithm to our weighted graph G in Fig. 9-7. We will obtain
the matrices Q0, Q1, Q3, and Q4 in Fig. 9-8. (To the right of each matrix Qk in Fig. 9-8, we show the matrix of

CHAP. 9]
DIRECTED GRAPHS
211
Fig. 9-7
paths which correspond to the lengths in the matrix Qk.) The entries in the matrix Q0 are the same as the weight
matrix W except each 0 in W is replaced by ∞(a very large number). We indicate how the circled entries are
obtained:
Q1[4, 2] = MIN (Q0[4, 2], Q0[4, 1] + Q0[1, 2]) = MIN(∞, 4 + 5) = 9
Q2[1, 3] = MIN (Q1[1, 3], Q1[1, 2] + Q1[2, 3]) = MIN(∞, 5 + ∞) = ∞
Q3[4, 2] = MIN (Q2[4, 2], Q2[4, 3] + Q2[3, 2]) = MIN(9, 3 + 1) = 4
Q4[3, 1] = MIN (Q3[3, 1], Q3[3, 4] + Q3[4, 1]) = MIN(10, 5 + 4) = 9
The last matrix Q4 = Q, the desired shortest-path matrix.
Fig. 9-8
9.7
LINKED REPRESENTATION OF DIRECTED GRAPHS
Let G be a directed graph with m vertices. Suppose the number of edges of G is O(m) or even O(m log m),
that is, suppose G is sparse. Then the adjacency matrix A of G will contain many zeros; hence a great deal of

212
DIRECTED GRAPHS
[CHAP. 9
memory space will be wasted. Accordingly, when G is sparse, G is usually represented in memory by some type
of linked representation, also called an adjacency structure, which is described below by means of an example.
Fig. 9-9
Consider the directed graph G in Fig. 9-9(a). Observe that G may be equivalently deﬁned by the table in
Fig. 9-9(b), which shows each vertex in G followed by its adjacency list, also called its successors or neighbors.
Here the symbol  denotes an empty list. Observe that each edge of G corresponds to a unique vertex in an
adjacency list and vice versa. Here G has seven edges and there are seven vertices in the adjacency lists. This
table may also be presented in the following compact form where a colon “:” separates a vertex from its list of
neighbors, and a semicolon “;” separates the different lists:
G = [A : B, C, D;
B : C;
C : ;
D : C, E;
E : C]
The linked representation of a directed graph G maintains G in memory by using linked lists for its adjacency
lists. Speciﬁcally, the linked representation will normally contain two ﬁles (sets of records), one called the Vertex
File and the other called the Edge File, as follows.
(a) Vertex File: The Vertex File will contain the list of vertices of the graph G usually maintained by an array or
by a linked list. Each record of the Vertex File will have the form
VERTEX
NEXT-V
PTR
Here VERTEX will be the name of the vertex, NEXT-V points to the next vertex in the list of vertices in the
Vertex File, and PTR will point to the ﬁrst element in the adjacency list of the vertex appearing in the Edge
File. The shaded area indicates that there may be other information in the record corresponding to the vertex.
(b) Edge File: The Edge File contains the edges of G and also contains all the adjacency lists of G where each
list is maintained in memory by a linked list. Each record of the Edge File will represent a unique edge in G
and hence will correspond to a unique vertex in an adjacency list. The record will usually have the form
EDGE
BEG-V
END-V
NEXT-E
Here:
(1) EDGE will be the name of the edge (if it has a name).
(2) BEG-V- points to location in the Vertex File of the initial (beginning) vertex of the edge.
(3) END-V points to the location in the Vertex File of the terminal (ending) vertex of the edge. The adjacency
lists appear in this ﬁeld.
(4) NEXT-E points to the location in the Edge File of the next vertex in the adjacency list.
We emphasize that the adjacency lists consist of terminal vertices and hence are maintained by the END-V
ﬁeld. The shaded area indicates that there may be other information in the record corresponding to the edge. We
note that the order of the vertices in any adjacency list does depend on the order in which the edges (pairs of
vertices) appear in the input.

CHAP. 9]
DIRECTED GRAPHS
213
Figure 9-10 shows how the graph G in Fig. 9-9(a) may appear in memory. Here the vertices of G are
maintained in memory by a linked list using the variable START to point to the ﬁrst vertex. (Alternatively, one
could use a linear array for the list of vertices, and then NEXT-V would not be required.) The choice of eight
locations for the Vertex File and 10 locations for the Edge File is arbitrary. The additional space in the ﬁles will be
used if additional vertices or edges are inserted in the graph. Figure 9-10 also shows, with arrows, the adjacency
list [B, C, D] of the vertex A.
Fig. 9-10
9.8
GRAPH ALGORITHMS: DEPTH-FIRST AND BREADTH-FIRST SEARCHES
This section discusses two important graph algorithms for a given graph G. Any particular graph algorithm
may depend on the way G is maintained in memory. Here we assume G is maintained in memory by its adjacency
structure. Our test graph G with its adjacency structure appears in Fig. 9-11.
Many applications of graphs require one to systematically examine the vertices and edges of a graph G. There
are two standard ways that this is done. One way is called a depth-ﬁrst search (DFS) and the other is called a
breadth-ﬁrst search (BFS). (These algorithms are essentially identical to the analogous algorithms for undirected
graphs in Chapter 8.)
Fig. 9-11

214
DIRECTED GRAPHS
[CHAP. 9
During the execution of our algorithms, each vertex (node) N of G will be in one of three states, called the
status of N, as follows:
STATUS = 1: (Ready State) The initial state of the vertex N.
STATUS = 2: (Waiting State) The vertex N is on a (waiting) list, waiting to be processed.
STATUS = 3: (Processed State) The vertex N has been processed.
The waiting list for the depth-ﬁrst search will be a (modiﬁed) STACK (which we write horizontally with the TOP
of STACK on the left), whereas the waiting list for the breadth-ﬁrst search will be a QUEUE.
(a)
Depth-ﬁrst Search: The general idea behind a depth-ﬁrst search beginning at a starting vertex A is as
follows. First we process the starting vertex A. Then we process each vertex N along a path P which begins at
A; that is, we process a neighbor of A, then a neighbor of a neighbor of A, and so on. After coming to a “dead
end,” that is, to a vertex with no unprocessed neighbor, we backtrack on the path P until we can continue
along another path P ′. And so on. The backtracking is accomplished by using a STACK to hold the initial
vertices of future possible paths. We also need a ﬁeld STATUS which tells us the current status of any vertex
so that no vertex is processed more than once. The algorithm appears in Fig. 9-12.
Fig. 9-12
Algorithm 9.2 will process only those vertices which are reachable from a starting vertex A. Suppose one
wants to process all the vertices in the graph G. Then the algorithm must be modiﬁed so that it begins again with
another vertex that is still in the ready state (STATE = 1). This new vertex, say B, can be obtained by traversing
through the list of vertices.
Remark: The structure STACK in Algorithm 9.2 is not technically a stack since, in Step 5(b), we allow a vertex
J to be deleted and then inserted in the front of the stack. (Although it is the same vertex J, it will represent
a different edge.) If we do not delete the previous J in Step 5(b), then we obtain an alternative traversal algorithm.

CHAP. 9]
DIRECTED GRAPHS
215
EXAMPLE 9.10 Consider our test graph G in Fig. 9-11. Suppose we want to ﬁnd and print all the vertices
reachable from the vertex J (including J itself ). One way to do this is to use a depth-ﬁrst search of G starting at
the vertex J.
Applying Algorithm 9.2, the vertices will be processed and printed in the following order:
J,
K,
L,
E,
F,
D,
C
Speciﬁcally, Fig. 9-13(a) shows the sequence of waiting lists in STACK and the vertices being processed. (The
slash / indicates that vertex is deleted from the waiting list.) We emphasize that each vertex, excluding J, comes
from an adjacency list and hence it is the terminal vertex of a unique edge of the graph. We have indicated the
edge by labeling the terminal vertex with the initial vertex of the edge as a subscript. For example,
Dj
means D is in the adjacency list of J, and hence D is the terminal vertex of an edge beginning at J. These edges
form a rooted tree T with J as the root, which is pictured in Fig. 9-13(b). (The numbers indicate the order the
edges are added to the tree.) This tree T spans the subgraph G′ of G consisting of vertices reachable from J.
Fig. 9-13
(b) Breath-ﬁrst Search: The general idea behind a breadth-ﬁrst search beginning at a starting vertex A is as
follows. First we process the starting vertex A. Then we process all the neighbors of A. Then we process all
the neighbors of neighbors of A. And so on. Naturally we need to keep track of the neighbors of a vertex,
and we need to guarantee that no vertex is processed twice. This is accomplished by using a QUEUE to hold
vertices that are waiting to be processed; and by a ﬁeld STATUS which tells us the current status of a vertex.
The algorithm appears in Fig. 9-14.
Algorithm 9.3 will process only those vertices which are reachable from a starting vertex A. Suppose one
wants to process all the vertices in the graph G. Then the algorithm must be modiﬁed so that it begins again with
another vertex that is still in the ready state (STATE = 1). This new vertex, say B, can be obtained by traversing
through the list of vertices.
EXAMPLE 9.11 Consider our test graph G in Fig. 9-11. Suppose G represents the daily ﬂights between cities,
and suppose we want to ﬂy from city A to city J with the minimum number of stops. That is, we want to ﬁnd a
shortest path P from A to J (where each edge has weight 1). One way to do this is to use a breadth-ﬁrst search of
G starting at the vertex A, and stop as soon as J is encountered.
Figure 9-15(a) shows the sequence of waiting lists in QUEUE and the vertices being processed up to the time
vertex J is encountered. We then work backwards from J to obtain the following desired path which is pictured
in Fig. 9-15(b):
JC ←CL ←LB ←BA ←A
or
A →B →L →C →J
Thus a ﬂight from city A to city J will make three intermediate stops at B, L, and C. Note that the path does not
include all of the vertices processed by the algorithm.

216
DIRECTED GRAPHS
[CHAP. 9
Fig. 9-14
Fig. 9-15
9.9
DIRECTED CYCLE-FREE GRAPHS, TOPOLOGICAL SORT
Let S be a directed graph with the following two properties:
(1) Each vertex vi of S represents a task.
(2) Each (directed) edge (u, v) of S means that task u must be completed before beginning task v.
We note that such a graph S cannot contain a cycle, such as P = (u, v, w, u), since, otherwise, we would have
to complete u before beginning v, complete v before beginning w, and complete w before beginning u. That is,
we cannot begin any of the three tasks in the cycle.
Such a graph S, which represents tasks and a prerequisite relation and which cannot have any cycles, is
said to be cycle-free or acyclic. A directed acyclic (cycle-free) graph is called a dag for short. Figure 9-16 is an
example of such a graph.

CHAP. 9]
DIRECTED GRAPHS
217
Fig. 9-16
A fundamental operation on a dag S is to process the vertices one after the other so that the vertex u is always
processed before vertex v whenever (u, v) is an edge. Such a linear ordering T of the vertices of S, which may
not be unique, is called a topological sort.
Figure 9-17 shows two topological sorts of the graph S in Fig. 9-16. We have included the edges of S in
Fig. 9-17 to show that they agree with the direction of the linear ordering.
Fig. 9-17
Two topological sorts
The following is the main theoretical result in this section.
Theorem 9.8: Let S be a ﬁnite directed cycle-free graph. Then there exists a topological sort T of the graph S.
Note that the theorem states only that a topological sort exists. We now give an algorithm which will ﬁnd a
topological sort. The main idea of the algorithm is that any vertex (node) N with zero indegree may be chosen as
the ﬁrst element in the sort T . The algorithm essentially repeats the following two steps until S is empty:
(1) Find a vertex N with zero indegree.
(2) Delete N and its edges from the graph S.
We use an auxiliary QUEUE to temporarily hold all vertices with zero degree. The algorithm appears in Fig. 9-18.

218
DIRECTED GRAPHS
[CHAP. 9
Fig. 9-18
EXAMPLE 9.12 SupposeAlgorithm 9.4 is applied to the graph S in Fig. 9-16. We obtain the following sequence
of the elements of QUEUE and sequence of vertices being processed:
QUEUE
GEB
DGE
DG
FAD
FA
CF
C

Vertex
B
E
G
D
A
F
C
Thus the vertices are processed in the order: B, E, G, D, A, F.
9.10
PRUNING ALGORITHM FOR SHORTEST PATH
Let G be a weighted directed cycle-free graph. We seek the shortest path between two vertices, say u and w.
We assume G is ﬁnite so at each step there is a ﬁnite number of moves. Since G is cycle-free, all paths between
u and w can be given by a rooted tree with u as the root. Figure 9-19(b) enumerates all the paths between u and
w in the graph in Fig. 9-19(a).
Fig. 9-19
One way to ﬁnd the shortest path between u and w is simply to compute the lengths of all the paths of the
corresponding rooted tree. On the other hand, suppose two partial paths lead to an intermediate vertex v. From
then on, we need only consider the shorter partial path; that is, we prune the tree at the vertex corresponding to
the longer partial path. This pruning algorithm is described below.

CHAP. 9]
DIRECTED GRAPHS
219
Pruning Algorithm
This algorithm ﬁnds the shortest path between a vertex u and a vertex w in a weighted directed cycle-free
graph G. The algorithm has the following properties:
(a) During the algorithm each vertex v′ of G is assigned two things:
(1) A number ℓ(v′) denoting the current minimal length of a path from u to v′.
(2) A path p(v′) from u to v′ of length ℓ(v′).
(b) Initially, we set ℓ(u) = 0 and p(u) = u. Every other vertex v is initially assigned ℓ(v) = ∞and p(v) = .
(c) Each step of the algorithm examines an edge e = (v′, v) from v′ to v with, say, length k. We calculate ℓ(v′)+k.
(1) Suppose ℓ(v′) + k < ℓ(v). Then we have found a shorter path from u to v. Thus we update:
ℓ(v) = ℓ(v′) + k
and
p(v) = p(v′)v
(This is always true when ℓ(v) = ∞, that is, when we ﬁrst enter the vertex v.)
(2) Otherwise, we do not change ℓ(v) and p(v).
If no other unexamined edges enter v, we will say that p(v) has been determined.
(d) The algorithm ends when p(w) has been determined.
Remark: The edge e = (v′, v) in (c) can only be chosen if v′ has been previously visited, that is, if p(v′) is not
empty. Furthermore, it is usually best to examine an edge which begins at a vertex v′ whose path p(v′) has been
determined.
EXAMPLE 9.13 We apply the pruning algorithm to the graph G in Fig. 9-19(a).
From u: The successive vertices are x, y, and z, which are all entered for the ﬁrst time. Thus:
(1)
set ℓ(x) = 4,
p(x) = ux.
(2)
set ℓ(y) = 6,
p(y) = uy.
(3)
set ℓ(z) = 2,
p(z) = uz.
Note that p(x) and p(z) have been determined.
From x: The successive vertices are r, entered for the ﬁrst time, and y. Thus:
(1) Set ℓ(r) = 4 + 4 = 8 and p(r) = p(x)r = uxr.
(2) We calculate:
ℓ(x) + k = 4 + 3 = 7
which is not less than
ℓ(y) = 6.
Thus we leave ℓ(y) and p(y) alone.
Note that p(r) has been determined.
From z: The successive vertices are t, entered for the ﬁrst time, and y. Thus:
(1) Set ℓ(t) = ℓ(z) + k = 2 + 5 = 7 and p(t) = p(z)t = urt.
(2) We calculate:
ℓ(z) + k = 2 + 3 = 5
which is less than
ℓ(y) = 6.
We have found a shorter path to y, and so we update ℓ(y) and p(y); set:
ℓ(y) = ℓ(z) + k = 5
and
p(y) = p(z)y = uzy
Now p(y) has been determined.

220
DIRECTED GRAPHS
[CHAP. 9
From y: The successive vertices are s, entered for the ﬁrst time, and t. Thus:
(1) Set ℓ(s) = ℓ(y) + k = 5 + 2 = 7 and p(s) = p(y)s = uzys.
(2) We calculate:
ℓ(y) + k = 5 + 1 = 6
which is less than
ℓ(t) = 7.
Thus we change ℓ(t) and p(t) to read:
ℓ(t) = ℓ(y) + 1 = 6
and
p(t) = p(y)t = uzyt.
Now p(t) has been determined.
From r: The successive vertices are w, entered for the ﬁrst time, and s. Thus:
(1) Set ℓ(w) = ℓ(r) + 3 = 11 and p(w) = p(r)w = uxrw.
(2) We calculate:
ℓ(r) + k = 8 + 2 = 10
which is less than
ℓ(s) = 7.
Thus we leave ℓ(s) and p(s) alone.
Note that p(s) has been determined.
From s: The successive vertex is w. We calculate:
ℓ(s) + k = 7 + 3 = 10
which is less than
ℓ(w) = 11.
Thus we change, ℓ(w) and p(w) to read:
ℓ(w) = ℓ(s) + 3 = 10
and
p(w) = p(s)w = uzysw.
From t: The successive vertex is w. We calculate:
ℓ(t) + k = 6 + 3 = 9
which is less than
ℓ(w) = 10.
Thus we undate ℓ(w) and p(w) as follows:
ℓ(w) = ℓ(t) + 3 = 9
and
p(w) = p(t) = uzytw
Now p(w) has been determined.
The algorithm is ﬁnished since p(w) has been determined. Thus p(w) = uzytw is the shortest path from u to w
and ℓ(w) = 9.
The edges which were examined in the above example form the rooted tree in Fig. 9-20. This is the tree
in Fig. 9-19(b) which has been pruned at vertices belonging to longer partial paths. Observe that only 13 of the
original 23 edges of the tree had to be examined.
Fig. 9-20

CHAP. 9]
DIRECTED GRAPHS
221
Solved Problems
GRAPH TERMINOLOGY
9.1. Let G be the directed graph in Fig. 9-21(a).
(a) Describe G formally.
(d ) Find all cycles in G.
(b) Find all simple paths from X to Z.
(e) Is G unilaterally connected?
(c) Find all simple paths from Y to Z.
( f ) Is G strongly connected?
(a) The vertex set V has four vertices and the edge set E has seven (directed) edges as follows:
V = {X, Y, Z, W}
and
E = {(X, Y), (X, Z), (X, W), (Y, W), (Z, Y), (Z, W), (W, Z)}
(b) There are three simple paths from X to Z, which are (X, Z), (X, W, Z), and (X, Y, W, Z).
(c) There is only one simple path from Y to Z, which is (Y, W, Z).
(d) There is only one cycle in G, which is (Y, W, Z, Y).
(e) G is unilaterally connected since (X, Y, W, Z) is a spanning path.
(f) G is not strongly connected since there is no closed spanning path.
Fig. 9-21
9.2. Let G be the directed graph in Fig. 9-21(a).
(a) Find the indegree and outdegree of each vertex of G.
(b) Find the successor list of each vertex of G.
(c) Are there any sources or sinks?
(d) Find the subgraph H of G determined by the vertex set V ′ = X, Y, Z.
(a) Count the number of edges ending and beginning at a vertex v to obtain, respectively, indeg(v) and outdeg(v).
This yields the data:
indeg(X) = 0,
indeg(Y) = 2,
indeg(Z) = 2,
indeg(W) = 3
outdeg(X) = 3,
outdeg(Y) = 1,
outdeg(Z) = 2,
outdeg(W) = 1
(As expected, the sum of the indegrees and the sum of the outdegrees each equal 7, the number of edges.)
(b) Add vertex v to the successor list succ(u) of u for each edge (u, v) in G. This yields:
succ(X) = [Y, Z, W],
succ(Y) = [W],
succ(Z) = [Y, W],
succ(W) = [Z]

222
DIRECTED GRAPHS
[CHAP. 9
(c) X is a source no edge enters X, that is, indeg(X) = 0. There are no sinks since every vertex is the initial point of
an edge, that is, has nonzero outdegree.
(d) Let E′ consists of all edges of G whose endpoints lie in V ′. This yield E′ = {(X, Y), (X, Z), (Z, Y)}. Then
H = H(V ′, E′)
9.3 Let G be the directed graph in Fig. 9-21(b).
(a) Find two simple paths from v1 to v6. Is α = (v1, v2, v4, v6) such a simple path?
(b) Find all cycles in G which include v3.
(c) Is G unilaterally connected? Strongly connected?
(d) Find the successor list of each vertex of G.
(e) Are there any sources in G? Any sinks?
(a) A simple path is a path where all vertices are distinct. Thus (v1, v5, v6) and (v1,v2,v3,v5,v6) are two simple paths
from v1 to v6. The sequence is not even a path since the edge joining v4 to v6 does not begin at v4.
(b) There are two such cycles: (v3, v1, v2, v3) and (v3, v5, v6, v1, v2, v3).
(c) G is unilaterally connected since (v1, v2, v3, v5, v6, v4) is a spanning path. G is not strongly connected since there
is no closed spanning path.
(d) Add vertex v to the successor list succ(u) of u for each edge (u, v) in G. This yields:
succ(v1) = [v2, v5],
succ(v2) = [v3, v4],
succ(v3) = [v1, v5]
succ(v4) = ,
succ(v5) = [v6],
succ(v6) = [v1, v4]
(As expected, the number of successors equals 9, which is the number of edges.)
(e) There are no sources since every vertex is the endpoint of some edge. Only v4 is a sink since no edge begins at v4,
that is, succ(v4) = , the empty set.
9.4. Let G be the directed graph with vertex set V (G) = (a, b, c, d, e, f, g} and edge set:
E(G) = {(a, a), (b, e), (a, e), (e, b), (g, c), (a, e), (d, f ), (d, b), (g, g)}
(a) Identify any loops or parallel edges.
(b) Are there any sources in G?
(c) Are there any sinks in G?
(d) Find the subgraph H of G determined by the vertex set V ′ = {a, b, c, d}.
(a) Aloop is an edge with the same initial and terminal points; hence (a, a) and (g, g) are loops. Two edges are parallel
if they have the same initial and terminal points. Thus (a, e) and (a, e) are parallel edges.
(b) The vertex d is a source since no edge ends in d, that is, d does not appear as the second element in any edge.
There are no other sources.
(c) Both c and f are sinks since no edge begins at c or at f , that is, neither c nor f appear as the ﬁrst element in any
edge. There are no other sinks.
(d) Let E′ consist of all edges of G whose endpoints lie in V ′ = {a, b, c, d}. This yields E′ = {(a, a), (d, b)}. Then
H = H(V ′, E′).
ROOTED TREES, ORDERED ROOTED TREES
9.5 Let T be the rooted tree in Fig. 9-22.
(a) Identify the path α from the root R to each of the following vertices, and ﬁnd the level number n of the
vertex: (i) H; (ii) F; (iii) M.
(b) Find the siblings of E.
(c) Find the leaves of T .

CHAP. 9]
DIRECTED GRAPHS
223
(a) List the vertices while proceeding from R down the tree to the vertex. The number of vertices, other than R, is the
level number:
(i) α = (R, A, C, H), n = 3;
(ii) α = (R, B, F), n = 2;
(iii) α = (R, B, G, L, M), n = 4.
(b) The siblings of E are F and G since they all have the same parent B.
(c) The leaves are vertices with no children, that is, H, D, I, J, K, M, N.
Fig. 9-22
9.6. Let T be the ordered rooted tree in Fig. 9-23 whose vertices are labeled using the universal address system.
Find the lexicographic order of the addresses of the tree T .
An ordered rooted tree T is usually drawn so the edges are ordered from left to right as in Fig. 9-23. The lexicographic
order can be obtained by reading down the leftmost branch, then the second branch from the left, and so forth.
Reading down the leftmost branch of T we obtain:
0,
1,
1.1,
1.1.1
The next branch is 1.2, 1.2.1, 1.2.1.1, so we add this branch to the list to obtain
0,
1,
1.1,
1.1.1,
1.2
1.2.1,
1.2.1.1
Proceeding in this manner, we ﬁnally obtain
0,
1,
1.1,
1.1.1,
1.2,
1.2.1,
1.2.1.1,
1.2.2,
1.3,
2,
2.1,
2.2.1
Fig. 9-23
SEQUENTIAL REPRESENTATION OF GRAPHS
9.7. Consider the graph G in Fig. 9-21(a), and suppose the vertices are stored in memery in the array:
DATA: X, Y, Z, W

224
DIRECTED GRAPHS
[CHAP. 9
(a) Find the adjacency matrix A of the graph G and the powers A2, A3, A4.
(b) Find the path matrix P of G using the powers of A. Is G strongly connected?
(a) The vertices are normally ordered according to the way they appear in memory; that is, we assume v1 = X, v2 = Y,
v3 = Z, v4 = W. The adjacency matrix A = [aij] is obtained by setting aij = 1 if there is an edge from vi to vj;
and 0 otherwise. The matrix A and its powers follow:
A =
⎡
⎢⎢⎣
0
1
1
1
0
0
0
1
0
1
0
1
0
0
1
0
⎤
⎥⎥⎦, A2 =
⎡
⎢⎢⎣
0
1
1
2
0
0
1
0
0
0
1
1
0
1
0
1
⎤
⎥⎥⎦, A3 =
⎡
⎢⎢⎣
0
1
2
2
0
1
0
1
0
1
1
1
0
0
1
1
⎤
⎥⎥⎦, A4 =
⎡
⎢⎢⎣
0
2
2
3
0
0
1
1
0
1
1
2
0
1
1
1
⎤
⎥⎥⎦
(b) Since G has 4 vertices, we need only ﬁnd the matrix B4 = A + A2 + A3 + A4, and then the path matrix P = [pij]
is obtained by setting pij = 1 whenever there is a nonzero entry in the matrix B4, and 0 otherwise. The matrices
B4 and P follow:
B4 =
⎡
⎢⎢⎣
0
5
6
8
0
1
2
3
0
3
3
5
0
2
3
5
⎤
⎥⎥⎦
and
P =
⎡
⎢⎢⎣
0
1
1
1
0
1
1
1
0
1
1
1
0
1
1
1
⎤
⎥⎥⎦
The path matrix P shows there is no path from any node to v1. Hence G is not strongly connected.
9.8. Consider the adjacency matrix A of the graph G in Fig. 9-19(a) obtained in Problem 9.7. Find the path
matrix P of G using Warshall’s algorithm rather than the powers of A.
Initially set P0 = A. Then, P1, P2, P3, P4 are obtained recursively by setting
Pk[i, j] = Pk−1[i, j] ∨(Pk−1[i, k] ∧Pk−1[k, j])
where Pk[i, j] denotes the ij-entry in the matrix Pk. That is, by setting
Pk[i, j] = 1
if
Pk−1[i, j] = 1
or if both
Pk−1[i, k] = 1
and
Pk−1[k, j] = 1
Then matrices P1, P2, P3, P4 follow:
P1 =
⎡
⎢⎢⎣
0
1
1
1
0
0
0
1
0
1
0
1
0
0
1
0
⎤
⎥⎥⎦, P2 =
⎡
⎢⎢⎣
0
1
1
1
0
0
0
1
0
1
0
1
0
0
1
0
⎤
⎥⎥⎦, P3 =
⎡
⎢⎢⎣
0
1
1
1
0
0
0
1
0
1
0
1
0
1
1
1
⎤
⎥⎥⎦, P4 =
⎡
⎢⎢⎣
0
1
1
1
0
1
1
1
0
1
1
1
0
1
1
1
⎤
⎥⎥⎦
Observe that P1 = P2 = A. The changes in P3 occur for the following reasons:
P3[4, 2] = 1
because
P2[4, 3] = 1 and P2[3, 2] = 1
P3[4, 4] = 1
because
P2[4, 3] = 1 and P2[3, 4] = 1
9.9. Draw a picture of the weighted graph G which is maintained in memory by the following vertex array DATA
and weight matrix W:
DATA: X, Y, S, T ;
W =
⎡
⎢⎢⎣
0
0
3
0
5
0
1
7
2
0
0
4
0
6
8
0
⎤
⎥⎥⎦
The picture appears in Fig. 9-24(a). The vertices are labeled by the entries in DATA.
Assuming v1 = X, v2 = Y, v3 = S, v4 = T , the order the vertices appear in the array DATA, we draw an edge
from vi to vj with weight wij when wij ̸= 0.

CHAP. 9]
DIRECTED GRAPHS
225
Fig. 9-24
LINKED REPRESENTATION OF GRAPHS
9.10. Let G be the graph presented by the following table:
G = [X : Y, Z, W; Y : X, Y, W; Z : Z, W; W : Z]
(a) Find the number of vertices and edges in G.
(b) Draw the graph of G.
(c) Are there any sources or sinks?
(a) The table tells us that there are four vertices, X, Y, Z, W. The outdegrees of the vertices are 3, 3, 2, 1, respectively.
Thus there are 3 + 3 + 2 + 1 = 9 edges.
(b) Using the adjacency lists, draw the graph in Fig. 9-24(b).
(c) No vertex has zero outdegree, so there are no sinks. Also, no vertex has zero indegree, that is, each vertex is a
successor; hence there are no sources.
9.11. A weighted graph G with six vertices, A, B, . . ., F, is stored in memory using a linked representation
with a vertex ﬁle and an edge ﬁle as in Fig. 9-25(a).
Fig. 9-25
(a) List the vertices in the order they appear in memory.
(b) Find the successor list succ(v) of each vertex v.
(c) Draw the graph of G.

226
DIRECTED GRAPHS
[CHAP. 9
(a) Since START = 3, the list begins with the vertex B. Then NEXT-V tells us to go to 1(D), then 7(C), then 8(E),
then 4(F), and then 5(A); that is,
B,
D,
C,
E,
F,
A
(b) Here succ(A) = [1(D), 4(F), 3(B)] = [D, F, B]. Speciﬁcally, PTR[5(A)] = 6 and END-V[6] = 1(D) tells
us that succ(A) begins with D. Then NEXT-E[6] = 2 and END-V[2] = 4(F) tells us that F is the next vertex
in succ(A). Then NEXT-E[2] = 5 and END-V[5] = 3(B) tells us that B is the next vertex in succ(A). However,
NEXT-E[5] = 0 tells us that there are no more successors of A. Similarly,
succ(B) = [C, D],
succ(C) = [E],
succ(D) = [E],
succ(E) = [D]
Furthermore succ(F) = , since PTR[4(F)] = 0. In other words,
G = [A:D, F, B;
B :C, D;
C :E;
D :E;
E :D;
F :]
(c) Use the successor lists obtained in (b) and the weights of the edges in the Edge File in Fig. 9-25(a) to draw the
graph in Fig. 9-25(b).
9.12. Suppose Friendly Airways has nine daily ﬂights as follows:
103
Atlanta to Houston
203
Boston to Denver
305
Chicago to Miami
106
Houston to Atlanta
204
Denver to Boston
308
Miami to Boston
201
Boston to Chicago
301
Denver to Reno
401
Reno to Chicago
Describe the data by means of a labeled directed graph G.
The data are described by the graph in Fig. 9-26(a) (where the ﬂight numbers have been omitted for notational
convenience.)
Fig. 9-26
9.13. Describe how the graph in Problem 9.12 may appear in memory using a linked representation where the
cities and ﬂights appear in linear sorted arrays.
See Fig. 9-26(b) (where A, B, . . . denote, respectively, Atlanta, Boston,. . .). There is no need for a START variable
since the cities form an array, not a linked list. We also use ORIG (origin) and DEST (destination) instead of BEG-V
and END-V.
9.14. Clearly, the data in Problem 9.12 may be efﬁciently stored in a ﬁle where each record contains only three
ﬁelds:
Flight Number, City of Origin, City of Destination

CHAP. 9]
DIRECTED GRAPHS
227
However, when there are many, many ﬂights, such a representation does not easily answer the following
natural questions:
(i) Is there a direct ﬂight from city X to city Y?
(ii) Can one ﬂy from city X to city Y?
(iii) What is the most direct route (minimum number of stops) from city X to city Y?
Show how the answer, say, to (ii) may be more readily available if the data is stored in memory using the
linked representation of the graph as in Fig. 9-26(b).
One way to answer (ii) is to use a breadth-ﬁrst or depth-ﬁrst search algorithm to decide whether city Y is reachable
from city X. Such algorithms require the adjacency lists, which can easily be obtained from the linked representation
of a graph, but not from the above representation which uses only three ﬁelds.
MISCELLANEOUS PROBLEMS
9.15. Let A =
⎡
⎢⎢⎣
0
2
0
1
0
0
1
1
2
1
1
0
0
0
1
1
⎤
⎥⎥⎦be the adjacency matrix of a multigraph G. Draw a picture of G.
Since A is a 4 × 4 matrix, G has four vertices, v1, v2, v3, v4. For each entry aij in A, draw aij arcs (directed edges)
from vertex vi to vertex vj to obtain the graph in Fig. 9-27(a).
Fig. 9-27
9.16. Let S be the cycle-free graph in Fig. 9-27(b). Find all possible topological sorts of S.
There are four possible topological sorts of S. Speciﬁcally, each sort T must begin with either a or b, must end with
e or f , and c and d must be the third and fourth elements, respectively. The four sorts follow:
T1 = [a, b, c, d, e, f ],
T2 = [b, a, c, d, e, f ]
T3 = [a, b, c, d, f, e],
T4 = [b, a, c, d, f, e]
9.17. Prove Proposition 9.4: Let A be the adjacency matrix of a graph G. Then aK[i, j], the ij-entry in the matrix
AK, gives the number of paths of length K from vi to vj.
The proof is by induction on K. A path of length 1 from vi to vj is precisely an edge (vi, vj). By deﬁnition of the
adjacency matrix A, a1[i, j] = aij gives the number of edges from vi to vj. Hence the proposition is true for K = 1.
Suppose K > 1. (Assume G has m nodes.) Since AK = AK−1A,
aK[i, j] =
m

s=1
aK−1[i, s] a1[s, j]
By induction, aK−1[i, s] gives the number of paths of length K −1 from vi to vs and a1[s, j] gives the number of
paths of length 1 from vs to vj. Thus aK−1[i, s]a1[s, j] gives the number of paths of length K from vi to vj where
vs is the next-to-last vertex. Thus all paths of length K from vi to vj can be obtained by summing up the product
aK−1[i, s] a1[s, j] for all s.Accordingly, aK[i, j] is the number of paths of length K from vi to vj.Thus the proposition
is proved.

228
DIRECTED GRAPHS
[CHAP. 9
Supplementary Problems
GRAPH TERMINOLOGY
9.18. Consider the graph G in Fig. 9-28(a).
(a) Find the indegree and outdegree of each vertex.
(d) Find all cycles in G.
(b) Are there any sources or sinks?
(e) Find all paths of length 3 or less from v1 to v3.
(c) Find all simple paths from v1 to v4.
(f ) Is G unilaterally or strongly connected?
Fig. 9-28
9.19. Consider the graph G in Fig. 9-28(b).
(a) Are there any sources or sinks?
(c) Find a non-simple path from v1 to v4.
(b) Find all simple paths from v1 to v4.
(d) Find all cycles in G which include v4.
9.20. Consider the graph G in Fig. 9-28(b).
(a) Find: succ(v1), succ(v3), succ(v5), succ(v7).
(b) Find the subgraph H of G generated by: (i) {v1, v3, v5, v6}; (ii) {v2, v3, v6, v7}.
9.21. Let G be the graph with vertex set V (G) = {A, B, C, D, E} and edge set
E(G) = {(A, D),
(B, C),
(C, E),
(D, B),
(D, D),
(D, E),
(E, A)}
(a) Express G by its adjacency table.
(b) Does G have any loops or parallel edges?
(c) Find all simple paths from D to E.
(d) Find all cycles in G.
(e) Is G unilaterally or strongly connected?
(f) Find the number of subgraphs of G with vertices C, D, E.
(g) Find the subgraph H of G generated by C, D, E.
9.22. Let G be the graph with vertex set V (G) = {a, b, c, d, e} and the following successor lists:
succ(a) = [b, c],
succ(b) = ,
succ(c) = [d, e],
succ(d) = [a, b, e],
succ(e) = 
(a) List the edges of G. (b) Is G weakly, unilaterally, or strongly connected?
9.23. Let G be the graph in Fig. 9-29(a).
(a) Express G by its adjacency table.
(d) Find all cycles in G.
(b) Does G have any sources or sinks?
(e) Find a spanning path of G.
(c) Find all simple paths from A to E.
(f ) Is G strongly connected?

CHAP. 9]
DIRECTED GRAPHS
229
Fig. 9-29
ROOTED TREES, ORDERED ROOTED TREES
9.24. Let T be the rooted tree in Fig. 9-29(b).
(a) Identify the path α from the root R to each of the following vertices, and ﬁnd the level number of the vertex:
(i) D; (ii) J; (iii) G.
(b) Find the leaves of T .
(c) Assuming T is an ordered rooted tree, ﬁnd the universal address of each leaf of T .
9.25. The following addresses are in random order:
2.1.1,
3.1,
2.1,
1,
2.2.1.2,
0,
3.2,
2.2,
1.1,
2,
3.1.1,
2.2.1,
3,
2.2.1.1
(a) Place the addresses in lexicographic order.
(b) Draw the corresponding rooted tree.
SEQUENTIAL REPRESENTATION OF GRAPHS
9.26. Let G be the graph in Fig. 9-30(a).
(a) Find the adjacency matrix A and the path matrix P for G.
(b) For all k > 0, ﬁnd nk where nk denotes the number of paths of length k from v1 to v4.
(c) Is G weakly, unilaterally, or strongly connected?
Fig. 9-30
9.27. Repeat Problem 9.26 for the graph G in Fig. 9-30(b).
9.28. Let P be the path matrix for a graph G. Describe P when G is: (a) strongly connected; (b) unilaterally connected.
9.29. Let
G
be
the
graph
in
Fig.
9-31(a)
where
the
vertices
are
maintained
in
memory
by
the
array
DATA: X, Y, Z, S, T . (a) Find the adjacency matrix A and the path matrix P of G. (b) Find all cycles in G.
(c) Is G unilaterally connected? Strongly connected?
9.30. Let G be the weighted graph in Fig. 9-31(b) where the vertices are maintained in memory by the array
DATA: X, Y, S, T .
(a) Find the weight matrix W of G.
(b) Find the matrix Q of shortest paths using Warshall’s algorithm.

230
DIRECTED GRAPHS
[CHAP. 9
Fig. 9-31
LINKED REPRESENTATION OF GRAPHS
9.31. A weighted graph G with six vertices, A, B, . . ., F, is stored in memory using a linked representation with a vertex
ﬁle and an edge ﬁle as in Fig. 9-32.
(a) List the vertices in the order they appear in memory.
(b) Find the successor list succ(v) of each vertex v in G.
(c) Draw a picture of G.
Fig. 9-32
9.32. Let G be the graph presented by the table: G = [A : B, C; B : C, D; C : C; D : B; E :].
(a) Find the number of vertices and edges in G.
(c)
Are there any sources or sinks?
(b) Draw a picture of G.
(d) Is G weakly, unilaterally, or strongly connected?
9.33. Repeat Problem 9.32 for the table: G = [A : D; B : C; C : E; D : B, D, E; E : A].
9.34. Repeat Problem 9.32 for the table: G = [A : B, C, D, K; B : J; C :; D : ; J : B, D, L; K : D, L; L : D].
9.35. Suppose Friendly Airways has eight daily ﬂights serving the seven cities: Atlanta, Boston, Chicago, Denver, Houston,
Philadelphia, Washington. Suppose the data on the ﬂights are stored in memory as in Fig. 9-33; that is, using a linked
representation where the cities and ﬂights appear in linear sorted arrays. Draw a labeled directed graph G describing
the data.

CHAP. 9]
DIRECTED GRAPHS
231
Fig. 9-33
9.36. Using the data in Fig. 9-33, write a procedure with input CITY X and CITY Y which ﬁnds the ﬂight number of a direct
ﬂight from city X to city Y, if it exists. Test the procedure using:
(a) X = Atlanta, Y = Philadelphia;
(c) X = Houston, Y = Chicago;
(b) X = Philadelphia, Y = Atlanta;
(d) X = Washington, Y = Chicago.
9.37. Using the data in Fig. 9-33, write a procedure with input CITY X and CITY Y which ﬁnds the most direct route
(minimum number of stops) from city X to city Y, if it exists. Test the procedure using the input in Problem 9.36.
MISCELLANEOUS PROBLEMS
9.38. Use the pruning algorithm to ﬁnd the shortest path from s to t in Fig. 9-34.
Fig. 9-34
9.39. Find a topological sort T of each of the following graphs:
(a) G = [A : Z;
B : T ;
C : B;
D :;
X : D;
Y : X;
Z : B, X;
S : C, Z;
T :]
(b) G = [A : X, Z;
B : A;
C : S, T ;
D : Y;
X : S, T ;
Y : B;
Z :;
S : Y;
T :]
(c) G = [A : C, S;
B : T, Z;
C :;
D : Z;
X : A;
Y : A;
Z : X, Y;
S :;
T : Y]
9.40. Draw a labeled graph G that represents the following situation. Three sisters, Barbara, Rose, and Susan, each regularly
telephone their mother Gertrude, though Gertrude calls only Rose. Susan will not call Rose, though Rose continues to
call Susan. Barbara and Susan will call each other, and Barbara and Rose will call each other.
9.41. Let R be the relation (directed graph) on V = {2, 3, 4, 9, 15} deﬁned by “x is less than and relatively prime to y.”
(a) Draw the diagram of the graph R. (b) Is R weakly connected? Unilaterally connected? Strongly connected?
9.42. A directed graph G is complete if, for each pair of distinct vertices u and v, either (u, v) is an arc or (v, u) is an
arc. Show that a ﬁnite complete directed graph G has a path which includes all vertices. (This obviously holds for
non-directed complete graphs.) Thus G is unilaterally connected.

232
DIRECTED GRAPHS
[CHAP. 9
9.43. Suppose a graph G is input by means of an integer M, representing the vertices 1, 2, . . ., M, and a list of N ordered
pairs of integers representing the edges of G. Write a procedure for each of the following:
(a) Finds the M × M adjacency matrix A of the graph G.
(b) Uses A and Warshall’s algorithm to ﬁnd the path matrix P of G.
Test the above procedure using the following data:
(i) M = 5; N = 8; (3, 4), (5, 3), (2, 4), (1, 5), (3, 2), (4, 2), (3, 1), (5, 1)
(ii) M = 6; N = 10; (1, 6), (2, 1), (2, 3), (3, 5), (4, 5), (4, 2), (2, 6), (5, 3), (4, 3), (6, 4)
9.44. Suppose a graph G is input by means of an integer M, representing the vertices 1, 2, . . ., M, and a list of N ordered
triples (ai, bi, wi) of integers such that (ai, bi) is an edge of G and wi is its weight. Write a procedure for each of the
following:
(a) Finds the M × M weight matrix W of the graph G.
(b) Uses W and Warshall’s algorithm to ﬁnd the matrix Q of shortest paths between the vertices of G.
Test the above procedure using the following data:
(i) M = 4; N = 7; (1, 2, 5), (2, 4, 2), (3, 2, 3), (1, 1, 7), (4, 1, 4), (4, 3, 1)
(ii) M = 5; N = 8; (3, 5, 3), (4, 1, 2), (5, 2, 2), (1, 5, 5), (1, 3, 1), (2, 4, 1), (3, 4, 4), (5, 4, 4)
9.45. Consider the graph G in Fig. 9-11. Show the sequence of waiting lists in STACK and the sequence of vertices processed
while doing a depth-ﬁrst search (DFS) of G beginning at the vertex: (a) B; (b) E; (c) K.
9.46. Consider the graph in Fig. 9-11. As in Example 9.11, ﬁnd the shortest path from K to F using a breadth-ﬁrst search
of G. In particular, show the sequence of waiting lists in QUEUE during the search.
Answers to Supplementary Problems
Notation: M = [R1; R2; . . .; Rn ] denotes a matrix
wih rows R1, R2, …, Rn.
9.18. (a) Indegrees: 1, 1, 4, 3, 1; outdegrees: 2, 3, 1, 2, 2.
(b) None.
(c) (v1, v2, v4), (v1, v3, v5, v4), (v1, v2, v3, v5, v4)
(d) (v3, v5, v4, v3)
(e) (v1, v3), (v1, v2, v3), (v1, v2, v4, v3), (v1, v2, v1, v3)
(v1, v3, v5, v7)
(f) Unilaterally, but not strongly.
9.19. (a) Sources: v1
(b) (v1, v6, v7, v4), (v1, v6, v7, v2, v5, v3, v4)
(c) (v1, v6, v7, v2, v6, v7, v4)
(d) (v4, v8, v7, v4), (v4, v8, v7, v2, v5, v3, v4)
9.20. (a) succ(1) = [6], succ(3) = [4, 7], succ(5) = [3],
succ(7) = [2, 4].
(b) (i) (1, 6), (5, 3); (ii) (2, 6), (6, 7), (7, 2), (3, 7).
9.21. (a) G = [A : D; B : C; C : E; D : B, D, E; E : A]
(b) Loop: (D, D)
(c) (D, E), (D, B, C, E)
(d) (A, D, E, A), (A, D, B, C, E, A)
(e) Unilaterally, and strongly.
(f) And (g) H has three edges: (C, E), (D, E),
(D, D). There are 8 = 23 ways of choosing some
of the three edges; and each choice gives a subgraph.
9.22. (a) (a, b), (a, c), (c, d), (c, e), (d, a), (d, b), (d, e)
(b) Since b and e are sinks, there is no path from b to e
or from e to b, so G is neither unilaterally nor strongly
connected. G is weakly connected since, cc, a, b, d, e
is a spanning semipath.
9.23. (a)G = [A : B, C : B : E; C : D; E : ];(b)Sink:
E; (c) (A, B, E), (A, C, D, E); (d) (A, C, D, A);
(e) C, D, A, B, E); (f) No.
9.24. (a) (i) (R, A, D), 2; (ii) (R, B, F, J), 3;
(iii) (R, C, G), 2.
(b) H, E, I, J, G
(c) H : 1.1.1, E : 1.2, I : 2.1.1, J : 2.1.2, G : 3.1
9.25. (a) 0, 1, 1.1, 2, 2.1, 2.1.1, 2.2, 2.2.1, 2.2.1.1, 2.2.1.2,
3, 3.1, 3.1.1, 3.2. (b) Fig. 9-35(a).
9.26. (a) A = [0, 1, 1, 0; 0, 0, 1, 1; 0, 0, 0, 1; 0, 0, 0, 0];
P = [0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1; 0, 0, 0, 0];
(b) 0, 2, 1, 0, 0,. . .; (c) Weakly and unilaterally.
9.27. (a) A = [0, 1, 1, 0; 0, 0, 0, 0; 0, 1, 1, 1; 0, 2, 0, 0];
P = [0, 1, 1, 1; 0, 0, 0, 0; 0, 1, 1, 1; 0, 1, 0, 0];
(b) 0, 1, 1, 1,. . .; (c) Weakly and unilaterally.
9.28. Let P = [pij]. For i
̸=
j: (a) pij ̸= 0; (b) either
pij ̸= 0 or pji ̸= 0.

CHAP. 9]
DIRECTED GRAPHS
233
Fig. 9-35
9.29. (a) A = [0, 0, 1, 0, 0; 1, 0, 0, 0, 0; 0, 1, 0, 0, 0;
1, 0, 0, 0, 1; 1, 0, 1, 1, 0];
P = [1, 1, 1, 0, 0; 1, 1, 1, 0, 0; 1, 1, 1, 0, 0;
1, 1, 1, 1, 1; 1, 1, 1, 1, 1; 1, 1, 1, 1, 1]
(b) (X, Z, Y, X); (S, T, S) (c) Unilaterally.
9.30. (a) A = [0, 7, 0, 0; 3, 0, 2, 0; 0, 0, 0, 5; 6, 1, 4, 0]
(b)Q = [XYX, XY, XYS, XYST; YX, YSTY, YS, YST;
STYX, STY, STYS, ST; TX, TY, TYS, TYST]
9.31. (a) C, F, D, B, E, A; (b) [A : C, E; B : D;
C : D, E, A; D : A, F; E : ; F : B, E]; (c)
See Fig. 9-35(b).
9.32. (a) 5, 6; (b) source: A; (c) See Fig. 9-36(a); none.
9.33. (a) 5, 1; (b) none; (c) See Fig. 9-36(b); (d) all three.
9.34. (a) 7, 11; (b) source: A; sinks: C, D; (c) See
Fig. 9-36(c); (d) only weakly.
Fig. 9-36
9.35. See Fig. 9-37.
Fig. 9-37
9.36. (a) No; (b) yes; (c) no; (d) no.
9.37. (a) AWP; (b) PA; (c) none; (d) WPC.
9.38. (s, 4, 1, 2, 1, 2, 1, 2, t)
9.39. Hint: First draw the graph. (a) ASYCZBXTD; (b) none,
the graph is not cycle-free, e.g.,YBAXSY is a cycle; (c)
BTYXACSDZ.
9.40. See Fig. 9-38(a).
9.41. (a) See Fig. 9-38(b). (b) Only weakly connected.
9.42. Hint: Suppose (α = v1, . . ., vm) is a longest path in G
and does not include vertex u. If (u1v1) is an arc, then
β = (u, α) extends α. Hence (v1, u) is an arc. If (u, v2)
is also an arc, then β = (v1, u, v2, . . ., vm) extends α;
hence (v2, u) is an arc. Similarly (v3, u), . . ., (vm, u)
are arcs. Hence β = (α, u) extends α.This contradicts
the maximality of α.

234
DIRECTED GRAPHS
[CHAP. 9
Fig. 9-38
9.43. (i) A = [0, 0, 0, 0, 0; 0, 0, 0, 1, 0; 1, 1, 0, 1, 0;
0, 1, 0, 0, 0; 1, 0, 1, 0, 0]
P = [1, 1, 1, 1, 1; 0, 1, 0, 1, 0; 1, 1, 1, 1, 1;
0, 1, 0, 1, 0; 1, 1, 1, 1, 1]
(ii)A = [0, 0, 0, 0, 0, 1; 1, 0, 1, 0, 0, 1; 0, 0, 0, 0, 1, 0;
0, 1, 1, 0, 1, 0; 0, 0, 1, 0, 0, 0; 0, 0, 0, 1, 0, 0]
P = [1, 1, 1, 1, 1, 1; 1, 1, 1, 1, 1, 1; 0, 0, 1, 0, 1, 0;
1, 1, 1, 1, 1, 1; 0, 0, 1, 0, 1, 0; 1, 1, 1, 1, 1, 1]
9.44. (i) W
= [7, 5, 0, 0; 0, 0, 0, 2; 0, 3, 0, 0; 4, 0, 1, 0];
Q = [AA, AB, ABCD, ABD; BDA, BDCB, BDC, BD;
CBDA, CB, CBDC, CBD; DA, DCB, DC, DCBD],
where A, B, C, D are the vertices.
(ii) W = [0, 0, 1, 0, 5; 0, 0, 0, 1, 0; 0, 0, 0, 4, 3;
2, 0, 0, 0, 0; 0, 2, 0, 4, 0];
Q=[ACDA, ACEB, AC, ACD, ACE; BDA, BDACEB,
BDAC, BD, BDACE; CDA, CEB, CDAC, CD, CE;
DA, DACEB, DAC, DACD, DACEB; EDA, EB,
EDAC, ED, EDACE] where A, B, C, D, E are the
vertices.
9.45. (a) STACK: B, LB EB, EL CL EB, FE CL, DF CL, CL,
JC, KJ, ; Vertex: B, LB, EL, FE, DF, CL, JC, KJ
(b) STACK: E, FE, DF,; Vertex: E, FE, DF
(c) STACK: K, LKCK, ELCL,CK, CL, DFCL,
CLJC,
; Vertex: K, LK, EL, FE, DF, CL, JC
9.46. QUEUE: K, LKCK, JCECDCLK, JCECDC, JCEC,
FE; Vertex: K, CK, LK, DC, EC, JC, FE; Minimal
Path: FE ←EC ←CK ←or K →CK →EC →FE.

CHAPTER 10
Binary Trees
10.1
INTRODUCTION
The binary tree is a fundamental structure in mathematics and computer science. Some of the terminology
of rooted trees, such as, edge, path, branch, leaf, depth, and level number, will also be used for binary trees.
However, we will use the term node, rather than vertex, with binary trees. We emphasize that a binary tree is not
a special case of a rooted tree; they are different mathematical objects.
10.2
BINARY TREES
A binary tree T is deﬁned as a ﬁnite set of elements, called nodes, such that:
(1) T is empty (called the null tree or empty tree), or
(2) T contains a distinguished node R, called the root of T , and the remaining nodes of T form an
ordered pair of disjoint binary trees T1 and T2.
If T does contain a root R, then the two trees T1 and T2 are called, respectively, the left and right subtrees of R.
If T1 is nonempty, then its root is called the left successor of R; similarly, if T2 is nonempty, then its root is called
the right successor of R.
The above deﬁnition of a binary tree T is recursive since T is deﬁned in terms of the binary subtrees T1 and T2.
This means, in particular, that every node N of T contains a left and a right subtree, and either subtree or both
subtrees may be empty. Thus every node N in T has 0, 1, or 2 successors. A node with no successors is called a
terminal node. Thus both subtrees of a terminal node are empty.
Picture of a Binary Tree
A binary tree T is frequently presented by a diagram in the plane called a picture of T . Speciﬁcally, the
diagram in Fig. 10-1(a) represents a binary tree as follows:
(i) T consists of 11 nodes, represented by the letters A through L, excluding I.
(ii) The root of T is the node A at the top of the diagram.
(iii) A left-downward slanted line at a node N indicates a left successor of N; and a right-downward slanted
line at N indicates a right successor of N.
235
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

236
BINARY TREES
[CHAP. 10
Accordingly, in Fig. 10-1(a):
(a) B is a left successor and C is a right successor of the root A.
(b) The left subtree of the root A consists of the nodes B, D, E, and F, and the right subtree of A consists of the
nodes C, G, H, J, K, and L.
(c) The nodes A, B, C, and H have two successors, the nodes E and J have only one successor, and the nodes
D, F, G, L, and K have no successors, i.e., they are terminal nodes.
Fig. 10-1
Similar Binary Trees
Binary trees T and T ′ are said to be similar if they have the same structure or, in other words, if they have the
same shape. The trees are said to be copies if they are similar and if they have the same contents at corresponding
nodes.
EXAMPLE 10.1 Consider the four binary trees in Fig. 10-1(b). The three trees (1), (3), and (4) are similar. In
particular the trees (1) and (3) are copies since they also have the same data at corresponding nodes. The tree (2)
is neither similar nor a copy of the tree (4) because, in a binary tree, we distinguish between a left successor and
a right successor even when there is only one successor.
Terminology
Terminology describing family relationships is frequently used to describe relationships between the nodes
of a tree T . Speciﬁcally, suppose N is a node in T with left successor S1 and right successor S2. Then N is called
the parent (or father) of S1 and S2. Analogously, S1 is called the left child (or left son) of N, and S2 is called the
right child (or right son) of N. Furthermore, S1 and S2 are said to be siblings (or brothers). Every node N in a
binary tree T , except the root, has a unique parent, called the predecessor of N.
The terms descendant and ancestor have their usual meaning. That is, a node L is called a descendant of a
node N (and N is called an ancestor of L) if there is a succession of children from N to L. In particular, L is
called a left or right descendant of N according to whether L belongs to the left or right subtree of N.
Terminology from graph theory and horticulture are also used with a binary tree T . Speciﬁcally, the line
drawn from a node N of T to a successor is called an edge, and a sequence of consecutive edges is called a path.
A terminal node is called a leaf, and a path ending in a leaf is called a branch.
Each node in a binary tree T is assigned a level number, as follows. The root R of the tree T is assigned the
level number 0, and every other node is assigned a level number which is 1 more than the level number of its
parent. Furthermore, those nodes with the same level number are said to belong to the same generation.
The depth (or height) of a tree T is the maximum number of nodes in a branch of T . This turns out to be
1 more than the largest level number of T . The tree T in Fig. 10-1(a) has depth 5.

CHAP. 10]
BINARY TREES
237
10.3
COMPLETE AND EXTENDED BINARY TREES
This section considers two special kinds of binary trees.
Complete Binary Trees
Consider any binary tree T . Each node of T can have at most two children. Accordingly, one can show that
level r of T can have at most 2r nodes. The tree T is said to be complete if all its levels, except possibly the last,
have the maximum number of possible nodes, and if all the nodes at the last level appear as far left as possible.
Thus there is a unique complete tree Tn with exactly n nodes (where we ignore the contents of the nodes). The
complete tree T26 with 26 nodes appears in Fig. 10-2.
Fig. 10-2
Complete tree T26
ThenodesofthecompletebinarytreeT26 inFig.10-2havebeenpurposelylabeledbytheintegers1, 2, . . . , 26,
from left to right, generation by generation. With this labeling, one can easily determine the children and parent
of any node K in any complete tree Tn. Speciﬁcally, the left and right children of the node K are, respectively,
2∗K and 2∗K + 1, and the parent of K is the node [K/2]. For example, the children of node 9 are the nodes
18 and 19, and its parent is the node [9/2] = 4. The depth dn of the complete tree Tn with n nodes is given by
dn = ⌊log2 n + 1⌋
This is a relatively small number. For example, if the complete tree Tn has n = 1 000 000 nodes, then its depth
dn = 21.
Extended Binary Trees: 2-Trees
A binary tree tree T is said to be a 2-tree or an extended binary tree if each node N has either 0 or 2 children.
In such a case, the nodes with two children are called internal nodes, and the nodes with 0 children are called
external nodes. Sometimes the nodes are distinguished in diagrams by using circles for internal nodes and squares
for external nodes.
The term “extended binary tree” comes from the following operation. Consider any binary tree T , such as
the tree in Fig. 10-3(a). Then T may be “converted” into a 2-tree by replacing each empty subtree by a new node,
as pictured in Fig. 10-3(b). Observe that the new tree is, indeed, a 2-tree. Furthermore, the nodes in the original
tree T are now the internal nodes in the extended tree, and the new nodes are the external nodes in the extended
tree. We note that if a 2-tree has n internal nodes, then it will have n + 1 external nodes.

238
BINARY TREES
[CHAP. 10
Fig. 10-3
Converting a binary tree T into a 2-tree
Algebraic Expressions and Polish Notation
Let E be any algebraic expression which uses only binary operations, such as,
E = (a −b)/((c × d) + e)
Then E can be represented by a 2-tree as in Fig. 10-4(a) where the variables in E appear as the external nodes,
and the operations in E appear as internal nodes.
The Polish mathematician Lukasiewicz observed that by placing the binary operation symbol before its
arguments, e.g.,
+ab instead of a + b
and
/cd instead of c/d
one does not need to use any parentheses. This notation is called Polish notation in preﬁx form. (Analogously,
one can place the symbol after its arguments, called Polish notation in postﬁx form.) Rewriting E in preﬁx form
we obtain:
E = / −a b + ×c d e
Observe that this is precisely the lexicographic order of the vertices in its 2-tree which can be obtained by scanning
the tree as in Fig. 10-4(b).
Fig. 10-4

CHAP. 10]
BINARY TREES
239
10.4
REPRESENTING BINARY TREES IN MEMORY
Let T be a binary tree. This section discusses two ways of representing T in memory. The ﬁrst and usual
way is called the linked representation of T and is analogous to the way linked lists are represented in memory.
The second way, which uses a single array, is called the sequential representation of T . The main requirement of
any representation of T is that one should have direct access to the root R of T and, given any node N of T , one
should have direct access to the children of N.
Linked Representation of Binary Trees
Consider a binary tree T . Unless otherwise stated or implied, T will be maintained in memory by means of
a linked representation which uses three parallel arrays, INFO, LEFT, and RIGHT, and a pointer variable ROOT
as follows. First of all, each node N of T will correspond to a location K such that:
(1) INFO[K] contains the data at the node N.
(2) LEFT[K] contains the location of the left child of node N.
(3) RIGHT[K] contains the location of the right child of node N.
Furthermore, ROOT will contain the location of the root R of T . If any subtree is empty, then the corresponding
pointer will contain the null value; if the tree T itself is empty, then ROOT will contain the null value.
Remark 1: Most of our examples will show a single item of information at each node N of a binary tree T . In
actual practice, an entire record may be stored at the node N. In other words, INFO may actually be a linear array
of records or a collection of parallel arrays.
Remark 2: Any invalid address may be chosen for the null pointer denoted by NULL. In actual practice, 0 or
a negative number is used for NULL.
EXAMPLE 10.2 Consider the binary tree T in Fig. 10-1(a). The linked representation of T appears in Fig. 10-5
where we have written the linear arrays vertical rather than horizontal for notational convenience. Note that
ROOT = 5 points to INFO[5] = A since A is the root of T .Also, note that LEFT[5] = 10 points to INFO[10] = B
since B is the left child of A, and RIGHT[5] = 2 points to INFO[2] = C since C is the right child of A. And so
on. The choice of 18 elements for the arrays is arbitrary.
Fig. 10-5
Sequential Representation of Binary Trees
Suppose T is a binary tree that is complete or nearly complete. Then there is an efﬁcient way of maintaining
T in memory called the sequential representation of T . This representation uses only a single linear array TREE
together with a pointer variable END as follows:
(1) The root R of T is stored in TREE[1].
(2) If a node N occupies TREE[K], then its left child is stored in TREE[2*K] and its right child is stored
in TREE[2*K + 1].
(3) END contains the location of the last node of T .

240
BINARY TREES
[CHAP. 10
Fig. 10-6
Furthermore, the node N at TREE[K] contains an empty left subtree or an empty right subtree according as 2*K
or 2*K + 1 exceeds END or according as TREE[2*K] or TREE[2∗K + 1] contains the NULL value.
The sequential representation of the binary tree T in Fig. 10-6(a) appears in Fig. 10-6(b). Observe that we
require 14 locations in the array TREE even though T has only 9 nodes. Generally speaking, the sequential
representation of a tree with depth d will require an array with approximately 2d elements. Accordingly, this
sequential representation is usually inefﬁcient unless, as stated above, the binary tree T is complete or nearly
complete. For example, the tree T in Fig. 10-1(a) has 11 nodes and depth 5, which means it would require an
array with approximately 25 = 32 elements.
10.5
TRAVERSING BINARY TREES
There are three standard ways of traversing a binary tree T with root R. These three algorithms, called
preorder, inorder, and postorder, are as follows:
Preorder: (1) Process the root R.
(2) Traverse the left subtree of R in preorder.
(3) Traverse the right subtree of R in preorder.
Inorder:
(1) Traverse the left subtree of R in inorder.
(2) Process the root R.
(3) Traverse the right subtree of R in inorder.
Postorder: (1) Traverse the left subtree of R in postorder.
(2) Traverse the right subtree of R in postorder.
(3) Process the root R.
Observe that each algorithm contains the same three steps, and that the left subtree of R is always traversed before
the right subtree. The difference between the algorithms is the time at which the root R is processed. Speciﬁcally,
in the “pre” algorithm, the root R is processed before the subtrees are traversed; in the “in” algorithm, the root R
is processed between the traversals of the subtrees; and in the “post” algorithm, the root R is processed after the
subtrees are traversed.
Thethreealgorithmsaresometimescalled,respectively,thenode-left-right(NLR)traversal,theleft-node-right
(LNR) traversal, and the left-right-node (LRN) traversal.

CHAP. 10]
BINARY TREES
241
EXAMPLE 10.3 Consider the binary tree T in Fig. 10-7(a). Observe that A is the root of T, that the left subtree
LT of T consists of nodes B, D, and E, and the right subtree RT of T consists of nodes C and F.
(a) The preorder traversal of T processes A, traverses LT , and traverses RT . However, the preorder traversal of
LT processes the root B, and then D and E; and the preorder traversal of RT processes the root C and then
F. Thus ABDECF is the preorder traversal of T.
(b) The inorder traversal of T traverses LT processes A, and traverses RT . However, the inorder traversal of LT
processes D, B, and then E; and the inorder traversal of RT processes C and then F. Thus DBEACF is the
inorder traversal of T.
(c) The postorder traversal of T traverses LT , traverses RT , and processes A. However, the postorder traversal
of LT , processes D, E, and then B, and the postorder traversal of RT processes F and then C. Accordingly,
DEBFCA is the postorder traversal of T.
Fig. 10-7
EXAMPLE 10.4 Let T be the binary tree in Fig. 10-7(b). The preorder traversal is as follows:
(Preorder) A B D E F C G H J L K
This order is the same as the one obtained by scanning the tree from the left as indicated by the path in
Fig. 10-7(b). That is, one “travels” down the leftmost branch until meeting a terminal node, then one back-
tracks to the next branch, and so on. In the preorder traversal, the rightmost terminal node, node K, is the last node
scanned. Observe that the left subtree of the root A is traversed before the right subtree, and both are traversed
after A. The same is true for any other node having subtrees, which is the underlying property of a preorder
traversal.
The reader can verify by inspection that the other two ways of traversing the tree T in Fig. 10-7(b) are as
follows:
(Inorder)
D B F E A G C L J H K
(Postorder) D F E B G L J K H C A
Remark: Observe that the terminal nodes, D, F, G, L, and K, of the binary tree in Fig. 10-7(b) are traversed in
the same order, from left to right, in all three traversals. We emphasize that this is true for any binary tree T.

242
BINARY TREES
[CHAP. 10
10.6
BINARY SEARCH TREES
This section discusses one of the most important data structures in computer science, a binary search tree.
This structure enables us to search for and ﬁnd an element with an average running time f (n) = 0(log2 n), where
n is the number of data items. It also enables us to easily insert and delete elements. This structure contrasts with
the following structures:
(a) Sorted linear array: Here one can search for and ﬁnd an element with running time f (n) = 0(log2 n).
However, inserting and deleting elements is expensive since, on the average, it involves moving 0(n) elements.
(b) Linked list: Here one can easily insert and delete elements. However, it is expensive to search and ﬁnd an
element, since one must use a linear search with running time f (n) = 0(n).
Although each node in a binary search tree may contain an entire record of data, the deﬁnition of the tree
depends on a given ﬁeld whose values are distinct and may be ordered.
Deﬁnition: Suppose T is a binary tree. Then T is called a binary search tree if each node N of T has the following
property:
The value of N is greater than every value in the left subtree of N and
is less than every value in the right subtree of N.
It is not difﬁcult to see that the above property guarantees that the inorder traversal of T will yield a sorted
listing of the elements of T .
Remark: The above deﬁnition of a binary search tree assumes that all the node values are distinct. There is an
analogous deﬁnition of a binary search tree T which admits duplicates, that is, in which each node N has the
following properties:
(a) N > M for every node M in a left subtree of N.
(b) N ≤M for every node M in a right subtree of N.
When this deﬁnition is used, the operations discussed below must be modiﬁed accordingly.
EXAMPLE 10.5 The binary tree T in Fig. 10-8(a) is a binary search tree. That is, every node N in T exceeds
every number in its left subtree and is less than every number in its right subtree. Suppose the 23 were replaced
by 35. Then T would still be a binary search tree. On the other hand, suppose the 23 were replaced by 40. Then
T would not be a binary search tree, since 40 would be in the left subtree of 38 but 40 > 38.
Fig. 10-8

CHAP. 10]
BINARY TREES
243
Searching and Inserting in a Binary Search Tree
A search and insertion algorithm in a binary search tree T appears in Fig. 10-9.
Fig. 10-9
EXAMPLE 10.6 Consider the binary search tree T in Fig. 10-8(a). Suppose ITEM = 20 is given, and we want
to ﬁnd or insert ITEM into T . Simulating Algorithm 10-1, we obtain the following steps:
(1) Compare ITEM = 20 with root R = 38. Since 20 < 38, proceed to the left child of 38, which is 14.
(2) Compare ITEM = 20 with 14. Since 20 > 14, proceed to the right child of 14, which is 23.
(3) Compare ITEM = 20 with 23. Since 20 < 23, proceed to the left child of 23, which is 18.
(4) Compare ITEM = 20 with 18. Since 20 > 18 and 18 has no right child, insert 20 as the right child of 18.
Figure 10-11(b) shows the new tree with ITEM = 20 inserted. The path down the tree during the algorithm has
been ringed.
Deleting in a Binary Search Tree
An algorithm which deletes a given ITEM from a binary search tree T appears in Fig. 10-10. It uses
Algorithm 10.1 in Fig. 10-9 to ﬁnd the location of ITEM in T .
Remark: Observe that case (iii) in Step 2(c) is more complicated than the ﬁrst two cases. The inorder successor
S(N) of N is found as follows. From the node N, move right to the right child of N, and then successively move
left until meeting a node M with no left child. The node M is the inorder successor S(N) of N.
EXAMPLE 10.7 Consider the binary tree T in Fig. 10-8(b). Suppose we want to delete ITEM = 14 from T .
First ﬁnd the node N such that N = 14. Note N = 14 has two children. Moving right and then left, we ﬁnd the
inorder successor S(N) = 18 of N. We delete S(N) = 18 by replacing it by its only child 20, then we replace
N = 14 by S(N) = 18. This yields the tree in Fig. 10-8(c).
Complexity of the Binary Search Tree Algorithms
Let T be a binary tree with n nodes and depth d, and let f (n) denote the running time of either of the above
algorithms. Algorithm 10.1 tells us to proceed from the root R down through the tree T until ﬁnding ITEM in T
or inserting ITEM as a terminal node. Algorithm 10.2 tells us to proceed from the root R down through the tree
T to ﬁnd ITEM and then to continue down the tree T to ﬁnd the inorder successor of ITEM. In either case, the

244
BINARY TREES
[CHAP. 10
Fig. 10-10
number of moves cannot exceed the depth d of the tree. Thus the running time f (n) of either algorithm depends
on the depth d of the tree T .
Now suppose T has the property that, for any node N of T, the depths of the subtrees of N differ by at most 1.
Then the tree T is said to be balanced, and d ≈log2 n. Therefore, the running time f (n) of either algorithm in
a balanced tree is very fast; speciﬁcally, f (n) = 0(log2 n). On the other hand, as items are added into a binary
search tree T, there is no guarantee that T remains balanced. It could even happen that d ≈n. In this case, f (n)
would be relatively slow; speciﬁcally, f (n) = 0(n). Fortunately, there are techniques for rebalancing a binary
search tree T as elements are added to T . Such techniques, however, lie beyond the scope of this text.
10.7
PRIORITY QUEUES, HEAPS
Let S be a priority queue.That is, S is a set where elements may be periodically inserted and deleted, but where
the current largest element (element with highest priority) is always deleted. One may maintain S in memory as
follows:
(a) Linear array: Here one can easily insert an element by simply adding it to the end of the array. However, it
is expensive to search for and ﬁnd the largest element, since one must use a linear search with running time
f (n) = 0(n).
(b) Sorted linear array: Here the largest element is either ﬁrst or last, and so it is easily deleted. However,
inserting and deleting elements is expensive since, on the average, it involves moving 0(n) elements.
This section introduces a discrete structure which can efﬁciently implement a priority queue S.
Heaps
Suppose H is a complete binary tree with n elements. We assume H is maintained in memory using its
sequential representation, not a linked representation. (See Section 10.4.)
Deﬁnition 10.1: Suppose H is a complete binary tree. Then H is called a heap, or a maxheap, if each node N
has the following property.
The value of N is greater than or equal to the value at each of the children of N.

CHAP. 10]
BINARY TREES
245
Accordingly, in a heap, the value of N exceeds the value of every one of its descendants. In particular, the
root of H is a largest value of H.
A minheap is deﬁned analogously: The value of N is less than or equal to the value at each of its children.
EXAMPLE 10.8 Consider the complete binary tree H in Fig.10-11(a). Observe that H is a heap. This means,
in particular, that the largest element of H appears at the “top” of the heap. Fig. 10-11(b) shows the sequential
representation of H by the array TREE and the variable END. Accordingly:
(a) TREE[1] is the root R of H.
(b) TREE[2K] and TREE[2K + 1] are the left and right children of TREE[K].
(c) The variable END = 20 points to the last element in H.
(d) The parent of any nonroot node TREE(J) is the node TREE[J ÷ 2] (where J ÷ 2 means integer division).
Observe that the nodes of H on the same level appear one after another in the array TREE. The choice of 30
locations for TREE is arbitrary.
Fig. 10-11
Inserting into a Heap
Figure 10-12 gives an algorithm which inserts a given data ITEM into a heap H.
Remark: One must verify that Algorithm 10.3 does always yield a heap as a ﬁnal tree. This is not difﬁcult to see,
and we leave this veriﬁcation to the reader.
EXAMPLE 10.9 Consider the heap H in Fig. 10-11. Suppose we want to insert ITEM = 70 into H. Simulating
Algorithm 10.3, we ﬁrst adjoin ITEM as the last element of the complete tree; that is, as the right child of 48.

246
BINARY TREES
[CHAP. 10
Fig. 10-12
In other words, we set TREE[21] = 70 and END = 21. Then we reheap, i.e., we let ITEM rise to its appropriate
place as follows:
(a) Compare ITEM = 70 with its parent 48. Since 70 > 48, we interchange 70 and 48.
(b) Compare ITEM = 70 with its new parent 55. Since 70 > 55, we interchange 70 and 55.
(c) Compare ITEM = 70 with its parent 88. Since 70 < 88, ITEM = 70 has risen to its appropriate place in the
heap H.
Figure 10-13 shows the ﬁnal tree H with ITEM = 70 inserted. The path up the tree by ITEM has been
circled.
Fig. 10-13
ITEM = 70 is inserted
Deleting the Root from a Heap
Figure 10-14 gives an algorithm which deletes the root R from a heap H.
Remark: As with inserting in a heap, one must verify that Algorithm 10.4 does always yield a heap as a ﬁnal
tree. Again, we leave this veriﬁcation to the reader. We also note that Step 3 may not end until the node L reaches
the bottom of the tree, i.e., until L has no children.
EXAMPLE 10.10 Consider the heap H in Fig. 10-15(a), where R = 95 is the root and L = 22 is the last node
of H. Suppose we want to delete R = 95 from the heap H. Simulating Algorithm 10.4, we ﬁrst “delete” R = 95
by assigning ITEM = 95, and then we replace R = 95 by L = 22. This yields the complete tree in Fig. 10-15(b)

CHAP. 10]
BINARY TREES
247
Fig. 10-14
which is not a heap. (Note that both subtrees of 22 are still heaps.) Then we reheap, that is, we let L = 22 sink
to its appropriate place as follows:
(a) The children of L = 22 are 85 and 70. The larger is 85. Since 22 < 85, interchange 22 and 85. This yields
the tree in Fig. 10-15(c).
(b) The children of L = 22 are now 33 and 55. The larger is 55. Since 22 < 55, interchange 22 and 55. This
yields the tree in Fig. 10-15(d).
(c) The children of L = 22 are now 15 and 11. The larger is 15. Since 22 > 15, the node L = 22 has sunk to its
appropriate place in the heap.
Fig. 10-15

248
BINARY TREES
[CHAP. 10
Thus Fig. 10-15(d) is the required heap H without its original root R = 95. Observe that we ringed the paths as
L = 22 made its way down the tree.
Complexity of the Heap Algorithms
LetH beaheapwithnnodes.SinceH isacompletetree,d ≈log2 nwhered isthedepthofH.Algorithm 10.3
tells us to let the new ITEM proceed up the tree, from level to level, until ﬁnding its appropriate place in H.
Algorithm 10.4 tells us to let the original last node L proceed down the tree, level by level, until ﬁnding its
appropriate place in H. In either case, the number of moves cannot exceed the depth d of H. Thus the running
time f (n) of either algorithm is very fast; speciﬁcally, f (n) = 0(log2 n). Accordingly, the heap is a much more
efﬁcient way to implement a priority queue S than either the linear array or sorted linear array mentioned at the
beginning of the section.
10.8
PATH LENGTHS, HUFFMAN’S ALGORITHM
Let T be an extended binary tree or 2-tree (Section 10.3). Recall that if T has n external nodes, then T has
n−1 internal nodes. Figure 10-3(b) shows a 2-tree with seven external nodes and hence 7−1 = 6 internal nodes.
Weighted Path Lengths
Suppose T is a 2-tree with n external nodes, and suppose each external node is assigned a (nonnegative)
weight. The weighted path length (or simply path length) P of the tree T is deﬁned to be the sum
P = W1L1 + W2L2 + · · · + WnLn
where W1 is the weight at an external node Ni, and Li is the length of the path from the root R to the node Li.
(The path length P exists even for nonweighted 2-trees where one simply assumes the weight 1 at each external
node.)
EXAMPLE 10.11 Figure 10-16 shows three 2-trees, T1, T2, T3, each having external nodes with the same
weights 2, 3, 5, and 11. The weighted path lengths of the three trees are as follows:
P1 = 2(2) + 3(2) + 5(2) + 11(2) = 42
P2 = 2(1) + 3(3) + 5(3) + 11(2) = 48
P3 = 2(3) + 3(3) + 5(2) + 11(1) = 36
The quantities P1 and P3 indicate that the complete tree need not give a minimum path, and that the quantities
P2 and P3 indicate that similar trees need not give the same path length.
Fig. 10-16

CHAP. 10]
BINARY TREES
249
Huffman’s Algorithm
The general problem we want to solve is the following. Suppose a list of n weights is given:
W1, W2, . . . , Wn
Among all the 2-trees with n external nodes and with the given n weights, ﬁnd a tree T with a minimum weighted
path length. (Such a tree T is seldom unique.) Huffman gave an algorithm to ﬁnd such a tree T .
Huffman’s algorithm, which appears in Fig. 10-17, is recursively deﬁned in terms of the number n of weights.
In practice, we use an equivalent iterated form of the Huffman algorithm which constructs the desired tree T from
the bottom up rather than from the top down.
Fig. 10-17
EXAMPLE 10.12 Let A, B, C, D, E, F, G, H be eight data items with the following assigned weights:
Data item:
A
B
C
D
E
F
G
H
Weight:
22
5
11
19
2
11
25
5
Construct a 2-tree T with a minimum weighted path length P using the above data as external nodes.
Apply the Huffman algorithm. That is, repeatedly combine the two subtrees with minimum weights into a
single subtree as shown in Fig. 10-18(a). For clarity, the original weights are underlined, and a circled number
indicates the root of a new subtree. The tree T is drawn from Step (8) backward yielding Fig. 10-18(b). (When
splitting a node into two parts, we have drawn the smaller node on the left.) The path length P follows:
P = 22(2) + 11(3) + 11(3) + 25(2) + 5(4) + 2(5) + 5(5) + 19(3) = 280
Computer Implementation of Huffman’s Algorithm
Consider again the data in Example 10.12. Suppose we want to implement the algorithm using the computer.
Since some of the nodes in our binary tree are weighted, our tree can be maintained by four parallel arrays: INFO,
WT, LEFT, and RIGHT. The ﬁrst eight columns in Fig. 10-19 show how the data may be stored in the computer
initially.
Each step in Huffman’s algorithm assigns values to WT, LEFT, and RIGHT in columns 9 through 15, which
correspond, respectively, to steps (2) through (8) in Fig. 10-18. Speciﬁcally, each step ﬁnds the current two
minimal weights and their locations, and then enters the sum in WT and their locations in LEFT and RIGHT. For
example, the current minimal weights after assigning values to column 11, which corresponds to step (4), are
12 and 19 appearing in WT[10] and WT[4].Accordingly, we assign WT[12] = 12+19 = 31 and LEFT[12] = 10

250
BINARY TREES
[CHAP. 10
Fig. 10-18
and RIGHT[12] = 4. The last step tells us that ROOT = 15, or we use that fact that ROOT = 2n −1, where
n = 8 is the number of external nodes. Thus all of Fig. 10-19 gives the required tree T .
Fig. 10-19
Remark: During the execution of Huffman’s algorithm we need to keep track of the current weights and to ﬁnd
two of the minimal weights. This may be efﬁciently accomplished by maintaining an auxiliary minheap, where
each node contains a weight and its location in the tree. We use a minheap rather than a maxheap since we want
the node with the lowest weight to be on the top of the heap.
Application to Coding
Suppose a collection of n data items A1, A2, . . ., An are to be coded by means of strings of bits. Furthermore,
suppose the data items do not occur with the same probability. Then memory space and time may be conserved
by using variable-length strings, where items which occur frequently are assigned shorter strings and items which
occur infrequently are assigned longer strings. For example, country telephone codes use this principle. The
country code for United States is simply 1, for France is 33, and for Finland is 358. This section discusses a
coding using variable length that is based on the Huffman tree T for weighted data items, that is, a 2-tree T with
minimum path length P.
Huffman Code: Let T be the Huffman tree for the n weighted data items A1, A2, . . . An. Each edge in T is
assigned 0 or 1 according as the edge points to a left child or to a right child. The Huffman code assigns to each
external node Ai, the sequence of bits from the root R of the tree T to the node A. The above Huffman code has
the “preﬁx” property, that is, the code of any item is not an initial substring of the code of any other item. This
means that there cannot be any ambiguity in decoding any message using a Huffman code.

CHAP. 10]
BINARY TREES
251
EXAMPLE 10.13 Consider again the eight data items A, B, C, D, E, F, G, H in Example 10-12. Suppose
the weights represent the percentage probabilities that the items will occur. Assigning, as above, bit labels to the
edges in the Huffman tree in Fig. 10-18(b), that is, assigned 0 or 1 according as the edge points to a left child or
to a right child, we obtain the following code for the data:
A : 00,
B : 11011,
C : 011,
D : 111,
E : 11010,
F : 010,
G : 10,
H : 1100.
For example, to get to E from the root, the path consists of a right edge, right edge, left edge, right edge, and left
edge, yielding the code 11010 for E.
10.9
GENERAL (ORDERED ROOTED) TREES REVISITED
Let T be an ordered rooted tree (Section 9.4), which is also called a general tree. T may be formally deﬁned
as a nonempty set of elements, called nodes, such that:
(1) T contains a distinguished element R, called the root of T .
(2) The remaining elements of T form an ordered collection of zero or more disjoint trees, T1, T2, . . . , Tn.
The trees T1, T2, . . . , Tn are called subtrees of the root R, and the roots of T1, T2, . . . , Tn are called successors of R.
Terminology from family relationships, graph theory, and horticulture is used for general trees in the same
way as for binary trees. In particular, if N is a node with successors S1, S2, . . . , Sn then N is called the parent of
the Si, the Si are called children of N, and the Si are called siblings of each other.
EXAMPLE 10.14 Figure 10-20(a) is a picture of a general tree T with 13 nodes,
A, B, C, D, E, F, G, H, J, K, L, M, N
Unless otherwise stated, the root of a rooted tree T is the node at the top of the diagram, and the children of a
node are ordered from left to right. Accordingly, A is the root of T, and A has three children; the ﬁrst child B, the
second child C, and the third child D. Observe that:
(a) C has three children.
(c) Each of D and H has only one child.
(b) Each of B and K has two children.
(d) Each of E, F, G, L, J, M and N has no children.
The last group of nodes, those with no children, are called terminal nodes.
Fig. 10-20

252
BINARY TREES
[CHAP. 10
Remark: A binary tree T is not a special case of a general tree T . They are two different objects. The two basic
differences follow:
(1) A binary tree T ′ may be empty, but a general tree T is nonempty.
(2) Suppose a node N has only one child. Then the child is distinguished as a left child or right child in a binary
tree T ′, but no such distinction exists in a general tree T .
The second difference is illustrated by the trees T1 and T2 in Fig. 10-20(b). Speciﬁcally, as binary trees, T1 and T2
are distinct trees, since B is the left child of A in the tree T1 but B is the right child of A in the tree T2. On the other
hand, there is no difference between the trees T1 and T2 as general trees.
Forest
A forest F is deﬁned to be an ordered collection of zero or more distinct general trees. Clearly, if we delete
the root R from a general tree T, then we obtain the forest F consisting of the subtrees of R (which may be empty).
Conversely, if F is a forest, then we may adjoin a node R to F to form a general tree T where R is the root of T and
the subtrees of R consist of the original trees in F.
General Trees and Binary Trees
Suppose T is a general tree. Then we may assign a unique binary tree T ′ to T as follows. First of all, the
nodes of the binary tree T ′ will be the same as the nodes of the general tree T, and the root of T ′ will be the root
of T . Let N be an arbitrary node of the binary tree T ′. Then the left child of N in T ′ will be the ﬁrst child of the
node N in the general tree T and the right child of N in T ′ will be the next sibling of N in the general tree T . This
correspondence is illustrated in Problem 10.16.
Solved Problems
BINARY TREES
10.1. Suppose T is the binary tree stored in memory as in Fig. 10-21. Draw the diagram of T .
Fig. 10-21
The tree T is drawn from its root R downward as follows:
(a) The root R is obtained from the value of the pointer ROOT. Note that ROOT = 5. Hence INFO[5] = 60 is the
root R of T.
(b) The left child of R is obtained from the left pointer ﬁeld of R. Note that LEFT[5] = 2. Hence INFO[2] = 30 is
the left child of R.
(c) The right child of R is obtained from the right pointer ﬁeld of R. Note that RIGHT[5] = 6. Hence INFO[6] = 70
is the right child of R.
We can now draw the top part of the tree, then, repeating the process with each new node, we ﬁnally obtain the entire
tree T in Fig. 10-22(a)

CHAP. 10]
BINARY TREES
253
Fig. 10-22
10.2. Consider the binary tree T in Fig. 10-22(b)
(a) Find the depth d of T .
(b) Traverse T using the preorder algorithm.
(c) Traverse T using the inorder algorithm.
(d) Traverse T using the postorder algorithm.
(e) Find the terminal nodes of T, and the order they are traversed in (b), (c), and (d).
(a) The depth d is the number of nodes in a longest branch of T ; hence d = 4.
(b) The preorder traversal of T is a recursive NLR algorithm, that is, it ﬁrst processes a node N, then its left subtree L,
and ﬁnally its right subtree R. Letting [A1, . . . , Ak] denote a subtree with nodes A1, . . . , Ak, the tree T is traversed
as follows:
F −[A, K, C][D, H, G, B, E]
or
F −A−[K, C]−D−[H][G, B, E]
or, ﬁnally,
F −A−K−C−D−H −G−B−E
(c) The inorder traversal of T is a recursive LNR algorithm, that is, it ﬁrst processes a left subtree L, then its node N,
and ﬁnally its right subtree R. Thus T is traversed as follows:
[A, K, C]−F −[D, H, G, B, E]
or
A−[K, C]−F −[H]−D−[G, B, E]
or ﬁnally,
A−K−C−F −H −D−B−G−E
(d) The postorder traversal of T is a recursive LRN algorithm, that is, it ﬁrst processes a left subtree L, then its right
subtree R, and ﬁnally its node N. Thus T is traversed as follows:
[A, K, C][D, H, G, B, E]−F
or
[K, C]−A−[H][G, B, E]−D−F
or, ﬁnally,
C−K−A−H −B−E−G−D−F
(e) The terminal nodes are the nodes without children. They are traversed in the same order in all three traversal
algorithms: C, H, B, E.
10.3. Let T be the binary tree in Fig. 10-22(b). Find the sequential representation of T in memory.
The sequential representation of T uses only a single array TREE and a variable pointer END.
(a) The root R of T is stored in TREE[1]; hence R = TREE[1] = F.
(b) If node N occupies TREE[K], then its left and right children are stored in TREE[2*K] and TREE[2*K + 1],
respectively. Thus TREE[2] = A and TREE[3] = D since A and D are the left and right children of F.And so on.
Figure 10-23 contains the sequential representation of T . Note that TREE[10] = C since C is the left child of
K, which is stored in TREE[5]. Also, TREE[14] = B and TREE[15] = E since B and E are the left and right
children of G, which is stored in TREE[7].

254
BINARY TREES
[CHAP. 10
(c) END points to the location of the last node of T ; hence END = 15.
We ﬁnally obtain the sequential representation of T in Fig. 10-23.
Fig. 10-23
10.4. Consider the trees T1, T2, T3 in Fig. 10-24. Identify those which represent the same:
(a) rooted tree; (b) ordered rooted tree; (c) binary tree.
(a) They all represent the same rooted tree, that is, A is the root with children (immediate successors) B and C, and
C has the single child D.
(b) Here T1 and T2 are the same ordered rooted tree but T3 is different. Speciﬁcally, B is the ﬁrst child of A in T1 and
T2 but the second child of A in T3.
(c) They all represent different binary trees. Speciﬁcally, T1 and T2 are different since we distinguish between left
and right successors even when there is only one successor (which is not true for ordered rooted trees). That is,
D is a left successor of C in T1 but a right successor of C in T2.
Fig. 10-24
10.5. A binary tree T has nine nodes. Draw a picture of T if the preorder and inorder traversal of T yield the
following sequences of nodes:
Preorder:
G
B
Q
A
C
P
D
E
R
Inorder:
Q
B
C
A
G
P
E
D
R
The tree T is drawn from its root R downward as follows.
(a) The root of T is obtained by choosing the ﬁrst node in its preorder. Thus G is the root of T.
(b) The left child of node G is obtained as follows. First use the inorder of T to ﬁnd the nodes in the left subtree T1
of G. Thus T1 consists of the nodes Q, B, C, A, which are to the left of G in the inorder of T. Then the left child
of G is obtained by choosing the ﬁrst node (root) in the preorder of T1 which appears in the preorder of T. Thus
B is the left child of G.
(c) Similarly, the right subtree T2 of G consists of the nodes P, E, D, R; and P is the root of T2, that is, P is the right
child of G.
Repeating the above process with each new node, we ﬁnally obtain the required tree T in Fig. 10-25(a).
10.6. Consider the algebraic expression E = (2x + y)(5a −b)3.
(a) Draw the corresponding 2-tree. (b) Use T to write E in Polish preﬁx form.
(a) Use an arrow (↑) for exponentiation, an asterisk (*) for multiplication, and a slash (/) for division to obtain the
tree in Fig. 10-25(b).

CHAP. 10]
BINARY TREES
255
Fig. 10-25
(b) Scan the tree from the left as in Fig. 10-4(b) to obtain
∗+ ∗2 x y ↑−∗5 a b 3
10.7. Draw all possible nonsimilar: (a) binary trees T with three nodes; (b) 2-trees T ′ with four external nodes.
(a) There are ﬁve such trees T, which are pictured in Fig. 10-26(a).
(b) Each 2-tree T ′ with four external nodes is determined by a binary tree T with three nodes, that is, by a tree T in
part (a). Thus there are ﬁve such 2-trees T ′ which are pictured in Fig. 10-26(b).
Fig. 10-26
BINARY SEARCH TREES, HEAPS
10.8. Consider the binary tree T in Fig.10-22(a).
(a) Why is T a binary search tree?
(b) Suppose ITEM = 33 is added to the tree. Find the new tree T .
(a) T is a binary, search tree since each node N is greater than the values in its left subtree and less than the values
in its right subtree.

256
BINARY TREES
[CHAP. 10
(b) Compare ITEM = 33 with the root, 60. Since 33 < 60, move to the left child, 30. Since 33 > 30, move to the
right child, 55. Since 33 < 55, move to the left child, 35. Now 33 < 35, but 35 has no left child.
Hence add ITEM = 33 as a left child of the node 35 to give the tree in Fig. 10-27(a). The shaded edges indicate
the path down through the tree during the insertion.
Fig. 10-27
10.9. Suppose n data items A1, A2, . . . , AN are already sorted, i.e., A1 < A2 < · · · < AN.
(a) If the items are inserted in order into an empty binary tree T, describe the ﬁnal tree T.
(b) What is the depth d of the ﬁnal tree T.
(c) Compare d with the average depth d∗of a binary tree with n nodes for (i) n = 50; (ii) n = 100;
(iii) n = 500.
(a) The tree T will consist of one branch which extends to the right as pictured in Fig. 10-27(b)
(b) The branch of T has n nodes; hence d = n.
(c) It is known that d∗= c log2 n, where c ≈1.4. Hence: (i) d(50) = 50, d∗(50) ≈9;
(ii) d(100) = 100, d∗(100) ≈10; (iii) d(500) = 500, d∗(500) ≈12.
10.10. Suppose the following list of letters is inserted into an empty binary search tree:
J,
R,
D,
G,
W,
E,
M,
H,
P,
A,
F,
Q
(a) Find the ﬁnal tree T. (b) Find the inorder traversal of T.
(a) Insert the nodes one after the other to obtain the tree T in Fig. 10-28(a)
Fig. 10-28

CHAP. 10]
BINARY TREES
257
(b) The inorder traversal of T follows:
A,
D,
E,
F,
G,
H,
J,
M,
P,
Q,
R,
W
Observe that this is the alphabetical listing of the letters. (The inorder traversal of any binary search tree T yields
a sorted list of the nodes.)
10.11. Consider the binary tree T in Fig. 10-28(a). Describe the tree T after: (a) the node M and (b) the node D
are deleted.
(a) The node M has only one child, P. Hence delete M and let P become the left child of R in place of M.
(b) The node D has two children. Find the inorder successor of D, which is the node E. First delete E from the tree,
and then replace D by the node E.
Fig. 10-28(b) shows the updated tree T .
10.12. Let H be the minheap in Fig. 10-29(a). (H is a minheap since the smaller elements are on top of the heap,
rather than the larger elements.) Describe the heap after ITEM = 11 is inserted into H.
Fig. 10-29
First insert ITEM as the next node in the complete tree, that is, as the left child of node 44. Then repeatedly
compare ITEM with its PARENT, and interchange ITEM and PARENT as long as ITEM < PARENT. Since 11 < 44,
interchange 11 and 44. Since 11 < 22, interchange 11 and 22. Since 11 > 8, ITEM = 11 has found its appropriate
place in the heap H. Figure 10-29(b) shows the ﬁnal heap H. The shaded edges indicate the path of ITEM as it moves
up the tree.
PATH LENGTHS, HUFFMAN’S ALGORITHM
10.13. Let T be the weighted 2-tree in Fig. 10-30(a). Find the weighted path length P of the tree T .
Multiply each weight Wi by the length Li of the path from the root of T to the node containing the weight, and
then sum all such products to obtain P. Thus:
P = 4(2) + 15(4) + 25(4) + 5(3) + 8(2) + 16(2)
= 8 + 60 + 100 + 15 + 16 + 32
= 231
10.14. Suppose the six weights 4, 15, 25, 5, 8, 16 are given. Find a 2-tree T with the given weights and with a
minimum path length P. (Compare T with the tree in Fig. 10-30(a).)
Use Huffman’s algorithm. That is, repeatedly combine the two subtrees with minimum weights into a single
subtree as follows:
(a) 4,
15,
25,
5,
8,
16;
(d) 25,
17,
m
31;
(b)
15,
25,
m
9,
8,
16;
(e)
m
42,
31;
(c)
15,
25,
m
17,
16;
(f )
m
73.

258
BINARY TREES
[CHAP. 10
Fig. 10-30
(The circled number indicates the root of the new subtree in the step.) The tree T is drawn from Step (f) backward,
yielding Fig. 10-30(b). The path length of T follows:
P = 25(2) + 4(4) + 5(4) + 8(3) + 15(2) + 16(2)
= 50 + 16 + 20 + 24 + 30 + 32
= 172
(The tree in Fig. 10-30(a) has path length 231.)
10.15. Suppose data items A, B, C, D, E, F, G occur with the following probability distribution:
Data item:
A
B
C
D
E
F
G
Probability:
10
30
5
15
20
15
5
Find a Huffman code for the data items.
As in Fig. 10-31(a), apply the Huffman algorithm to ﬁnd a 2-tree with a minimum weighted path length P.
(Again, the circled number indicates the root of the new subtree in the step.) The tree T is drawn from Step (g)
backward, yielding Fig. 10-31(b). Assign bit labels to the edges of the tree T, 0 to a left edge and 1 to a right edge, as
in Fig. 10-31(b). The tree T yields the following Huffman code:
A:000;
B :11;
C :0010;
D :100;
E :01;
F :101;
G:0011
Fig. 10-31

CHAP. 10]
BINARY TREES
259
GENERAL TREES
10.16. Let T be the general tree in Fig. 10-32(a). Find the corresponding binary tree T ′.
The nodes of T ′ will be the same as the nodes of the general tree T . In particular, the root of T ′ will be the same
as the root of T . Furthermore, if N is a node in the binary tree T ′, then its left child is the ﬁrst child of N in T and its
right child is the next sibling of N in T . Constructing T ′ from the root down we obtain the tree in Fig. 10-32(b).
Fig. 10-32
Supplementary Problems
10.17. Consider the binary tree T in Fig. 10-33(a).
(a) Find: (i) depth d of T ; (ii) descendants of B.
(b) Traverse T in:
(i) preorder;
(ii) inorder;
(iii) postorder.
(c) Find the terminal nodes of T and the orders they are traversed in (b).
10.18. Repeat Problem 10.17 for the binary tree T in Fig. 10-33(b).
10.19. Repeat Problem 10.17 for the binary tree T in Fig. 10-33(c).
Fig. 10-33
10.20. Let T be the binary tree stored in memory as in Fig. 10-34 where ROOT = 14.
(a) Draw the diagram of T .
(b) Traverse T in:
(i) preorder;
(ii) inorder;
(iii) postorder.
(c) Find the depth d of T .
(d) Find the minimum number of locations required for a linear array TREE if T were stored sequentially in TREE.

260
BINARY TREES
[CHAP. 10
Fig. 10-34
10.21. Suppose the preorder and inorder traversals of a binary tree T yield the following sequences of nodes:
Preorder:
G,
B,
Q,
A,
C,
K,
F,
P,
D,
E,
R,
H
Inorder:
Q,
B,
K,
C,
F,
A,
G,
P,
E,
D,
H,
R
(a) Draw the diagram of T .
(b) Find:
(i) depth d of T ;
(ii) descendants of B.
(c) List the terminal nodes of T .
10.22. Consider the algebraic expression E = (x + 3y)4(a −2b). (a) Draw the corresonding 2-tree. (b) Write E in Polish
preﬁx form.
BINARY SEARCH TREES, HEAPS
10.23. Find the ﬁnal tree T if the following numbers are inserted into an empty binary search tree T :
50,
33,
44,
22,
77,
35,
60,
40
10.24. Find the ﬁnal heap H if the numbers in Problem 10-23 are inserted into an empty maxheap H.
10.25. Find the ﬁnal heap H if the numbers in Problem 10-23 are inserted into an empty minheap H.
10.26. Let T be the binary search tree in Fig. 10-35(a). Suppose nodes 20, 55, 88 are added one after the other to T . Find the
ﬁnal tree T .
10.27. Let T be the binary search tree in Fig. 10-35(a). Suppose nodes 22, 25, 75 are deleted one after the other from T . Find
the ﬁnal tree T .
Fig. 10-35
10.28. Let H be the heap in Fig. 10-35(b). Find the ﬁnal heap H if the numbers 65, 44, and 75 are inserted one after the other
into H.
10.29. Let H be the heap in Fig. 10-35(b). Find the ﬁnal heap H if the root and then the next root are deleted from H.

CHAP. 10]
BINARY TREES
261
HUFFMAN ALGORITHM, GENERAL TREES
10.30. Consider the 2-tree T in Fig. 10-36(a) which contains the letters A, B, C, D, E, F, G as external nodes. Find the
Huffman coding of the letters determined by the tree T .
10.31. Find the weighted path length P of the tree in Fig. 10-36(a) if the data items A, B, . . . , G are assigned the following
weights:
(A, 13),
(B, 2),
(C, 19),
(D, 23),
(E, 29),
(F, 5),
(G, 9)
10.32. Using the data in Problem 10.31, ﬁnd a Huffman coding for the seven letters using a 2-tree with a minimum path
length P , and ﬁnd P.
10.33. Let T be the general tree in Fig. 10-36(b). Find the corresponding binary tree T ′.
Fig. 10-36
COMPUTER PROBLEMS
Problems 10.34 to 10.40 refer to Fig. 10-37 which is a list of employee records stored in memory. It is a binary search
tree with respect to the NAME key. It uses a pointer HEAD where the number of employees is in SSN[HEAD], the total salary
is in SALARY[HEAD], and the root of the tree is in LEFT[HEAD]. Also, to allow insertions, the available (empty) locations
form a linked list with AVAIL pointing to the ﬁrst element in the list, and the linking is maintained by the array LEFT.
Fig. 10-37
10.34. Draw a diagram of the binary search tree NAME.
10.35. Write a program which prints the list of employee records in alphabetical order. (Hint: Print the records in inorder.)
10.36. Write a program which reads the name NNN of an employee and prints the employee’s record. Test the program using
(a) Evans; (b) Smith; and (c) Lewis.

262
BINARY TREES
[CHAP. 10
10.37. Write a program which reads the social security number SSS of an employee and prints the employee’s record. Test
the program using (a) 165-64-3351; (b) 135-46-626; and (c) 177-44-5555.
10.38. Write a program which reads an integer K and prints the name of each male employee when K = 1 or of each female
employee when K = 2. Test the program using (a) K = 2; (b) K = 5; and (c) K = 1.
10.39. Write a program which reads the name NNN of an employee and deletes the employee’s record from the structure.
Test the program using (a) Davis; (b) Jones; and (c) Rubin.
10.40. Write a program which reads the record of a new employee and inserts the record in the ﬁle.
Test the program using:
(a) Fletcher; 168-52-3388; Female; 21 000;
(b) Nelson; 175-32-2468; Male; 19 000.
Answers to Supplementary Problems
10.17. (a)
4;
D,
E,
G,
H;
(b)
ABDEGHCF,
DBGEHACF, DGHEBFCA; (c) All three:
D, G, H, F.
10.18. (a) 4; C, D; (b) ABCDEFGH, CDBAFEHG,
DCBFHGEA; (c) All three: D, F, H.
10.19. (a) 5; D, F, G; (b) ABDFGCEH, BFGDAEHC,
GFDBHECA; (c) All three: G, H.
10.20. (a) See Fig. 10-38(a); (b) ABDEHP QSCFKRL,
DBP HQSEACRKFL, DPSQHEBRKLFCA;
(c) d = 6; hence 32 ≤END = 64; here END = 43.
10.21. (a) See Fig. 10-38(b); (b) 5; QACKF; (c) Q, K,
F, E, H.
Fig. 10-38
10.22. (a) See Fig. 10-39(a); (b) ∗↑+x ∗3y4 −a ∗2b
10.23. See Fig. 10-39(b).
Fig. 10-39

CHAP. 10]
BINARY TREES
263
10.24. Level by level: 77, 50, 60, 40, 33, 35, 44, 22.
10.25. Level by level: 22, 33, 35, 40, 77, 44, 60, 50.
10.26. See Fig. 10-40(a).
10.27. See Fig. 10-40(b).
Fig. 10-40
10.28. Level by level: 75, 65, 70, 40, 55, 60, 11, 30, 25, 15,
50, 22, 44.
10.29. Level by level: 55, 50, 22, 40, 25, 15, 11, 30.
10.30. A: 00; B: 0100; C: 10; D: 011; E: 01010; F: 01011;
G: 11.
10.31. P = 329.
10.32. A: 000; B: 00101; C: 10; D: 11; E: 01; F: 00100;
G: 0011; P = 257.
10.33. See Fig. 10-41(a).
10.34. See Fig. 10-41(b) where only the ﬁrst letter of each
name is used.
Fig. 10-41

CHAPTER 11
Properties of the
Integers
11.1
INTRODUCTION
This chapter investigates some basic properties of the natural numbers (or positive integers), that is, the set
N = {1, 2, 3, . . .}
and their “cousins,” the integers, that is, the set
Z = {. . . , −2, −1, 0, 1, 2, . . .}
(The letter Z comes from the word “Zahlen” which means numbers in German.)
The following simple rules concerning the addition and multiplication of these numbers are assumed (where
a, b, c are arbitrary integers):
(a) Associative law for multiplication and addition:
(a + b) + c = a + (b + c)
and
(ab)c = a(bc)
(b) Commutative law for multiplication and addition:
a + b = b + a
and
ab = ba
(c) Distributive law:
a(b + c) = ab + ac
(d) Additive identity 0 and multiplicative identity 1:
a + 0 = 0 + a = a
and
a · 1 = 1 · a = a
(e) Additive inverse −a for any integer a:
a + (−a) = (−a) + a = 0
264
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

CHAP. 11]
PROPERTIES OF THE INTEGERS
265
Appendix B shows that other mathematical structures have the above properties. One fundamental property
which distinguishes the integers Z from other structures is the Principle of Mathematical Induction (Section 1.8)
which we rediscuss here. We also state and prove (Problem 11.30) the following theorem.
Fundamental Theorem of Arithmetic: Every positive integer n > 1 can be written uniquely as a product
of prime numbers.
This theorem already appeared in Euclid’s Elements. Here we also develop the concepts and methods which
are used to prove this important theorem.
11.2
ORDER AND INEQUALITIES, ABSOLUTE VALUE
This section discusses the elementary properties of order and absolute value.
Order
Observe that we deﬁne order in Z in terms of the positive integers N. All the usual properties of this order
relation are a consequence of the following two properties of N:
[P1]
If a and b belong to N, then a + b and ab belong to N.
[P2]
For any integer a, either a ∈N, a = 0, or −a ∈N.
The following notation is also used:
a > b means b < a;
read: a is greater than b.
a ≤b means a < b or a = b;
read: a is less than or equal to b.
a ≥b means b ≥a;
read: a is greater than or equal to b.
The relations <, >, ≤and ≥are called inequalities in order to distinguish them from the relation = of
equality. The reader is certainly familiar with the representation of the integers as points on a straight line, called
the number line R, as shown in Fig. 11-1.
Fig. 11-1
We note that a < b if and only if a lies to the left of b on the number line R in Fig. 11-1. For example,
2 < 5;
−6 < −3;
4 ≤4;
5 > −8;
6 ≥0;
−7 ≤0
We also note that a is positive iff a > 0, and a is negative iff a < 0. (Recall “iff” means “if and only if.”)
Basic properties of the inequality relations follow.
Proposition 11.1: The relation ≤in Z has the following properties:
(i) a ≤a, for any integer a.
(ii) If a ≤b and b ≤a, then a = b.
(iii) If a ≤b and b ≤c, then a ≤c.
Proposition 11.2 (Law of Trichotomy): For any integers a and b, exactly one of the following holds:
a < b,
a = b,
or
a > b
Proposition 11.3: Suppose a ≤b, and let c be any integer. Then:
(i) a + c ≤b + c.
(ii) ac ≤bc when c > 0; but ac ≤bc when c < 0.
(Problem 11.5 proves Proposition 11.3.)

266
PROPERTIES OF THE INTEGERS
[CHAP. 11
Absolute Value
The absolute value of an integer a. written |a|, is formally deﬁned by
|a| =
-
a
if a ≥0
−a
if a < 0
Accordingly, |a| > 0 except when a = 0. Geometrically speaking, |a| may be viewed as the distance between
the points a and 0 on the number line R. Also, |a −b| = |b −a| may be viewed as the distance between the
points a and b. For example:
(a) |−3| = 3;
|7| = 7;
|−13| = 13;
(b) |2 −7| = |−5| = 5;
|7 −2| = |5| = 5
Some properties of the absolute value function follow. (Problems 11.6 and 11.7 prove (iii) and (iv).)
Proposition 11.4: Let a and b be any integers. Then:
(i)
|a| ≥0, and |a| = 0 iff a = 0
(iv)
|a ± b| ≤|a| + |b|
(ii)
−|a| ≤a ≤|a|
(v)
||a| −|b|| ≤|a ± b|
(iii)
|ab| = |a||b|
11.3
MATHEMATICAL INDUCTION
The principle of mathematical induction stated below essentially asserts that the positive integers N begin
with the number 1 and the rest are obtained by successively adding 1. That is, we begin with 1, then 2 = 1 + 1,
then 3 = 2 + 1, then 4 = 3 + 1, and so on. The principle makes precise the vague phrase “and so on.”
Principle of Mathematical Induction: Let S be a set of positive integers with the following two properties:
(i) 1 belongs to S.
(ii) If k belongs to S, then k + 1 belongs to S.
Then S is the set of all positive integers.
We shall not prove this principle. On the contrary, when the set N of positive integers (natural numbers) is
developed axiomatically, this principle is given as one of the axioms.
There is an equivalent form of the above principle which is usually used when proving theorems:
Principle of Mathematical Induction: Let P be a proposition deﬁned on the integers n ≥1 such that:
(i) P (1) is true.
(ii) P (k + 1) is true whenever P(k) is true.
Then P is true for every integer n ≥1.
EXAMPLE 11.1
(a) Let P be the proposition that the sum of the ﬁrst n odd numbers is n2; that is:
P(n): 1 + 3 + 5 + · · · + (2n −1) = n2
(The nth odd number is 2n −1 and the next odd number is 2n + 1.)
Clearly, P (n) is true for n = 1; that is:
P(1): 1 = 12

CHAP. 11]
PROPERTIES OF THE INTEGERS
267
Suppose P (k) is true. (This is called the inductive hypothesis.) Adding 2k + 1 to both sides of P(k) we
obtain
1 + 3 + 5 + · · · + (2k −1) + (2k + 1) = k2 + (2k + 1)
= (2k + 1)2
which is P (k + 1). We have shown that P(k + 1) is true whenever P(k) is true. By the principle of
mathematical induction, P is true for all positive integers n.
(b) The symbol n! (read: n factorial) is deﬁned as the product of the ﬁrst n positive integers; that is:
1! = 1,
2! = 2 · 1 = 2,
3! = 3 · 2 · 1 = 6,
and so on.
This may be formally deﬁned as follows:
1! = 1
and
(n + 1)! = (n + 1)(n!),
for
n > 1
Observe that if S is the set of positive integers for which ! is deﬁned, then S satisﬁes the two properties of
mathematical induction. Hence the above deﬁnition deﬁnes ! for every positive integer.
There is another form of the principle of mathematical induction (proved in Problem 11.13) which is some-
times more convenient to use. Namely:
Theorem 11.5 (Induction: Second Form): Let P be a proposition deﬁned on the integers n ≥1 such that:
(i) P (1) is true.
(ii) P (k) is true whenever P( j ) is true for all 1 ≤j < k.
Then P is true for every integer n ≥1.
Remark: The above theorem is true if we replace 1 by 0 or by any other integer a.
Well-Ordering Principle
A property of the positive integers which is equivalent to the principle of induction, although apparently very
dissimilar, is the well-ordering principle (proved in Problem 11.12). Namely:
Theorem 11.6 (Well-Ordering Principle): Let S be a nonempty set of positive integers. Then S contains a
least element; that is, S contains an element a such that a ≤s for every s in S.
Generally speaking, an ordered set S is said to be well-ordered if every subset of S contains a ﬁrst element.
Thus Theorem 11.6 states that N is well ordered.
A set S of integers is said to be bounded from below if every element of S is greater than some integer m
(which may be negative). (The number m is called a lower bound of S.) A simple corollary of the above theorem
follows:
Corollary 11.7: Let S be a nonempty set of integers which is bounded from below. Then S contains a least
element.
11.4
DIVISION ALGORITHM
The following fundamental property of arithmetic (proved in Problems 11.17 and 11.18) is essentially a
restatement of the result of long division.
Theorem 11.8 (Division Algorithm): Let a and b be integers with b ̸= 0. Then there exists integers q and r
such that
a = bq + r
and
0 ≤r < |b|
Also, the integers q and r are unique.

268
PROPERTIES OF THE INTEGERS
[CHAP. 11
The number q in the above theorem is called the quotient, and r is called the remainder. We stress the fact
that r must be non-negative. The theorem also states that
r = a −bq
This equation will be used subsequently
If a and b are positive, then q is non negative. If b is positive, then Fig. 11-2 gives a geometrical interpretation
of this theorem. That is, the positive and negative multiples of b will be evenly distributed throughout the number
line R, and a will fall between some multiples qb and (q + 1)b. The distance between qb and a is then the
remainder r.
Fig. 11-2
Division Algorithm using a Calculator
Suppose a and b are both positive. Then one can ﬁnd the quotient q and remainder r using a calculator as
follows:
Step 1. Divide a by b using the calculator, that is, ﬁnd a/b.
Step 2. Let q be the integer part of a/b, that is, let q = INT (a/b).
Step 3. Let r be the difference between a and bq, that is, let r = a −bq.
EXAMPLE 11.2
(a) Let a = 4461 and b = 16. We can ﬁnd that the quotient q = 278 and the remainder r = 13 by long division,
Alternately, using a calculator, we obtain q and r as follows:
a/b = 278.8125 . . . ,
q = 278,
r = 4461 −16(278) = 13
As expected, a = bq + r, namely:
4461 = 16(278) + 13
(b) Let a = −262 and b = 3. First we divide |a| = 262 by b = 3. This yields a quotient q′ = 87 and a
remainder r′ = 1. Thus
262 = 3(87) + 1
We need a = −262, so we multiply by −1 obtaining
−262 = 3(−87) −1
However, −1 is negative and hence cannot be r. We correct this by adding and subtracting the value of b
(which is 3) as follows:
−262 = 3(−87) −3 + 3 −1 = 3(−88) + 2
Therefore, q = −88 and r = 2.

CHAP. 11]
PROPERTIES OF THE INTEGERS
269
(c) Let b = 2. Then any integer a can be written in the form
a = 2q + r
where
0 ≤r < 2
Thus r can only be 0 or 1. Thus every integer is of the form 2k or 2k + 1. The integers of the form 2k are
called even integers, while those of the form 2k + 1 are called odd integers. (Usually, an even integer is
deﬁned as an integer divisible by 2, and all other integers are said to be odd. Thus the division algorithm
proves that every odd integer has the form 2k + 1.)
11.5
DIVISIBILITY, PRIMES
Let a and b be integers with a ̸= 0. Suppose ac = b for some integer c. We then say that a divides b or b is
divisible by a, and we denote this by writing
a | b
We also say that b is a multiple of a or that a is a factor or divisor of b. If a does not divide b, we will write a ̸ | b.
EXAMPLE 11.3
(a) Clearly, 3 | 6 since 3 · 2 = 6, and −4 | 28 since (−4)(−7) = 28.
(b) The divisors of 4 are ±1, ±2, ±4 and the divisors of 9 are ±1, ±3, ±9.
(c) If a ̸= 0, then a | 0 since a · 0 = 0.
(d) Every integer a is divisible by ±1 and ±a. These are sometimes called the trivial divisors of a. The basic
properties of divisibility is stated in the next theorem (proved in Problem 11.24).
Theorem 11.9: Suppose a, b, c are integers.
(i) If a | b and b | c, then a | c.
(ii) If a | b then, for any integer x, a | bx.
(iii) If a | b and a | c, then a | (b + c) and a|(b −c).
(iv) If a | b and b ̸= 0, then a = ±b or |a| < |b|.
(v) If a | b and b | a, then |a| = |b|, i.e., a = ±b.
(vi) If a | 1 , then a = ±1
Putting (ii) and (iii) together, we obtain the following important result.
Corollary 11.10: Suppose a | b and a | c. Then, for any integers x and y, a | (bx + cy). The expression bx + cy
will be called a linear combination of b and c.
Primes
A positive integer p > 1 is called a prime number or a prime if its only divisors are ±1 and ±p, that is, if
p only has trivial divisors. If n > 1 is not prime, then n is said to be composite. We note (Problem 11.13) that if
n > 1 is composite then n = ab where 1 < a, b < n.

270
PROPERTIES OF THE INTEGERS
[CHAP. 11
EXAMPLE 11.4
(a) The integers 2 and 7 are primes, whereas 6 = 2 · 3 and 15 = 3 · 5 are composite.
(b) The primes less than 50 follow:
2,
3,
5,
7,
11,
13,
17,
19,
23,
29,
31,
37,
41,
43,
47
(c) Although 21, 24, and 1729 are not primes, each can be written as a product of primes:
21 = 3 · 7;
24 = 2 · 2 · 2 · 3 = 23 · 3;
1729 = 7 · 13 · 19
The Fundamental Theorem ofArithmetic states that every integer n > 1 can be written as a product of primes
in essentially one way; it is a deep and somewhat difﬁcult theorem to prove. However, using induction, it is easy
at this point to prove that such a product exists. Namely:
Theorem 11.11: Every integer n > 1 can be written as a product of primes.
Note that a product may consist of a single factor so that a prime p is itself a product of primes. We prove
Theorem 11.11 here, since its proof is relatively simple.
Proof: The proof is by induction. Let n = 2. Since 2 is prime, n is a product of primes. Suppose n > 2, and
the theorem holds for positive integers less than n. If n is prime, then n is a product of primes. If n is composite,
then n = ab where a, b < n. By induction, a and b are products of primes; hence n = ab is also a product of
primes.
Euclid, who proved the Fundamental Theorem of Arithmetic, also asked whether or not there was a largest
prime. He answered the question thus:
Theorem 11.12: There is no largest prime, that is, there exists an inﬁnite number of primes.
Proof: Suppose there is a ﬁnite number of primes, say p1, p2, . . . , pm. Consider the integer
n = p1p2 · · · pm + 1
Since n is a product of primes (Theorem 11.11), it is divisible by one of the primes, say pk. Note that pk also
divides the product p1p2 . . . pm. Therefore pk divides
n −p1p2 . . . pm = 1
This is impossible, and so n is divisible by some other prime. This contradicts the assumption that p1, p2, . . . , pm
are the only primes. Thus the number of primes is inﬁnite, and the theorem is proved.
11.6
GREATEST COMMON DIVISOR, EUCLIDEAN ALGORITHM
Suppose a and b are integers, not both 0. An integer d is called a common divisor of a and b if d divides
both a and b, that is, if d | a and d | b. Note that 1 is a positive common divisor of a and b, and that any common
divisor of a and b cannot be greater than |a| or |b|. Thus there exists a largest common divisor of a and b; it is
denoted by
gcd(a, b)
and it is called the greatest common divisor of a and b.
EXAMPLE 11.5
(a) The common divisors of 12 and 18 are ±1, ±2, ±3, ±6. Thus gcd(12, 18) = 6. Similarly:
gcd(12, −18) = 16,
gcd(12, −16) = 4,
gcd(29, 15) = 1,
gcd(14, 49) = 7
(b) For any integer a, we have gcd(1, a) = 1.

CHAP. 11]
PROPERTIES OF THE INTEGERS
271
(c) For any prime p, we have gcd(p, a) = p or gcd(p, a) = 1 according as p does or does not divide a.
(d) Suppose a is positive. Then a | b if and only if gcd(a, b) = a.
The following theorem (proved in Problem 11.26) gives an alternative characterization of the greatest
common divisor.
Theorem 11.13: Let d be the smallest positive integer of the form ax + by. Then
d = gcd(a, b).
Corollary 11.14: Suppose d = gcd(a, b). Then there exist integers x and y such that d = ax + by.
Another way to characterize the greatest common divisor, without using the inequality relation, follows
Theorem 11.15: A positive integer d = gcd(a, b) if and only if d has the following two properties:
(1) d divides both a and b.
(2) If c divides both a and b, then c | d.
Simple properties of the greatest common divisor are:
(a) gcd(a, b) = gcd(b, a).
(c) If d = gcd(a, b), then gcd(a/d, b/d) = 1.
(b) If x > 0, then gcd(ax, bx) = x · gcd(a, b).
(d) For any integer x, gcd(a, b) = gcd(a, b + ax).
Euclidean Algorithm
Let a and b be integers, and let d = gcd(a, b). One can always ﬁnd d by listing all the divisors of a and
then all the divisors of b and then choosing the largest common divisor. The complexity of such an algorithm
is f (n) = 0(√n) where n = |a| + |b|. Also, we have given no method to ﬁnd the integers x and y such that
d = ax + by.
This subsection gives a very efﬁcient algorithm, called the Euclidean algorithm, with complexity
f (n) = O(log n), for ﬁnding d = gcd(a, b) by applying the division algorithm to a and b and then repeat-
edly applying it to each new quotient and remainder until obtaining a nonzero remainder. The last nonzero
remainder is d = gcd(a, b).
Then we give an “unraveling” algorithm which reverses the steps in the Euclidean algorithm to ﬁnd the
integers x and y such that d = xa + yb.
We illustrate the algorithms with an example.
EXAMPLE 11.6 Let a = 540 and b = 168. We apply the Euclidean algorithm to a and b. These steps, which
repeatedly apply the division algorithm to each quotient and remainder until obtaining a zero remainder, are
pictured in Fig. 11-3(a) using long division and also in Fig. 11-3(b) where the arrows indicate the quotient and
remainder in the next step. The last nonzero remainder is 12. Thus
12 = gcd(540, 168)
This follows from the fact that
gcd(540, 168) = gcd(168, 36) = gcd(36, 24) = gcd(24, 12) = 12
Next we ﬁnd x and y such that 12 = 540x+168y by “unraveling” the above steps in the Euclidean algorithm.
Speciﬁcally, the ﬁrst three quotients in Fig. 11-3 yield the following equations:
(1) 36 = 540 −3(168),
(2) 24 = 168 −4(36),
(3) 12 = 36 −1(24)
Equation (3) tells us that d = gcd(a, b) = 12 is a linear combination of 36 and 24. Now we use the preceding
equations in reverse order to eliminate the other remainders. That is, ﬁrst we use equation (2) to replace 24 in
equation (3) so we can write 12 as a linear combination of 168 and 36 as follows:
(4) 12 = 36 −1[168 −4(36)] = 36 −1(168) + 4(36) = 5(36) −1(168)

272
PROPERTIES OF THE INTEGERS
[CHAP. 11
Fig. 11-3
Next we use equation (1) to replace 36 in (4) so we can write 12 as a linear combination of 168 and 540 as follows:
12 = 5[540 −3(168)] −1(168) = 5(54) −15(168) −1(168) = 5(540) −16(168)
This is our desired linear combination. In other words, x = 5 and y = −16.
Least Common Multiple
Suppose a and b are nonzero integers. Note that |ab| is a positive common multiple of a and b. Thus there
exists a smallest positive common multiple of a and b; it is denoted by
lcm(a, b)
and it is called the least common multiple of a and b.
EXAMPLE 11.7
(a) lcm(2, 3) = 6; lcm(4, 6) = 12; lcm(9, 10) = 90.
(b) For any positive integer a, we have lcm(1, a) = a.
(c) For any prime p and any positive integer a,
lcm(p, a) = a
or
lcm(p, a) = ap
according as p does or does not divide a.
(d) Suppose a and b are positive integers. Then a | b if and only if lcm(a, b) = b.
The next theorem gives an important relationship between the greatest common divisor and the least common
multiple.
Theorem 11.16: Suppose a and b are nonzero integers. Then
lcm(a,b) =
|ab|
gcd(a, b)

CHAP. 11]
PROPERTIES OF THE INTEGERS
273
11.7
FUNDAMENTAL THEOREM OF ARITHMETIC
This section discusses the Fundamental Theorem of Arithmetic. First we deﬁne relatively prime integers.
Relatively Prime Integers
Two integers a and b are said to be relatively prime or coprime if gcd(a, b) = 1. Accordingly, if a and b are
relatively prime, then there exist integers x and y such that
ax + by = 1
Conversely, if ax + by = 1, then a and b are relatively prime.
EXAMPLE 11.8
(a) Observe that: gcd(12, 35) = 1, gcd(49, 18) = 1, gcd (21, 64) = 1, gcd (−28, 45) = 1
(b) If p and q are distinct primes, then gcd(p, q) = 1.
(c) For any integer a, we have gcd(a, a + 1) = 1, since any common factor of a and a + 1 must divide their
difference (a + 1) −a = 1.
The relation of being relatively prime is particularly important because of the following results. The ﬁrst
theorem is proved in Problem 11.27, and we will prove the second theorem here.
Theorem 11.17: Suppose gcd(a, b) = 1, and a and b both divide c. Then ab divides c.
Theorem 11.18: Suppose a | bc , and gcd(a, b) = 1. Then a | c
Proof: Since gcd(a, b) = 1, there exist x and y such that ax + by = 1. Multiplying by c yields:
acx + bcy = c
We have a | acx . Also, a | bcy since, by hypothesis, a | bc. Hence a divides the sum acx + bcy = c.
Corollary 11.19: Suppose a prime p divides the product ab. Then p | a or p | b.
This corollary (proved in Problem 11.28) dates back to Euclid; it is the basis of his proof of the Fundamental
Theorem of Arithmetic.
Fundamental Theorem of Arithmetic
Theorem 11.11 asserts that every positive integer is a product of primes. Can different products of primes
yield the same number? Clearly, we can rearrange the order of the prime factors, e.g.,
30 = 2 · 3 · 5 = 5 · 2 · 3 = 3 · 2 · 5
The Fundamental Theorem of Arithmetic (proved in Problem 11.30) says that this is the only way that two
“different” products can give the same number. Namely:
Theorem 11.20 (FundamentalTheorem ofArithmetic): Every integer n>1 can be expressed uniquely (except
for order) as a product of primes.
The primes in the factorization of n need not be distinct. Frequently, it is useful to collect together all equal
primes. Then n can be expressed uniquely in the form
n = pm1
1 pm2
2
. . . pmr
r
where the mi are positive and p1 < p2 < . . . < pr. This is called the canonical factorization of n.
EXAMPLE 11.9 Given a = 24 · 33 · 7 · 13 and b = 23 · 32 · 52 · 11 · 17. Find d = gcd(a, b) and m = lcm(a, b).
(a) First we ﬁnd d = gcd(a, b). Those primes p, which appear in both a and b, 2, 3, and 11, will also appear in
d, and the exponent of p, in d will be the smaller of its exponents in a and b. Thus
d = gcd(a, b) = 23 · 32 · 11 = 792

274
PROPERTIES OF THE INTEGERS
[CHAP. 11
(b) Next we ﬁnd m = lcm(a, b). Those primes p, which appear in either a or b, 2, 3, 5, 7, 11, 13, and 17, will
also appear in m, and the exponent of p in m will be the larger of its exponents in a and b. Thus
m = lcm(a, b) = 24 · 33 · 52 · 11 · 13 · 17
We are so used to using numbers as if the Fundamental Theorem of Arithmetic were true that it may seem as
if it needs no proof. It is a tribute to Euclid, who ﬁrst proved the theorem, that he recognized that it does require
proof. We emphasize the nontriviality of the theorem by giving an example of a system of numbers which does
not satisfy this theorem.
EXAMPLE 11.10 Let F be the set of positive integers of the form 3x + 1. Thus F consists of the numbers:
1, 4, 7, 10, 13, 16, 19, 22, . . .
Note that the product of two numbers in F is again in F since:
(3x + 1)(3y + 1) = 9xy + 3x + 3y + 1 = 3(3xy + x + y) + 1
Our deﬁnition of primes makes perfectly good sense in F. Although 4 = 2 · 2 , the number 2 is not in F. Thus 4
is prime in F since 4 has no factors except 1 and 4. Similarly 10, 22, 25,… are primes in F. We list the ﬁrst few
primes in F:
4, 7, 10, 13, 19, 22, 25, . . .
Note 100 = 3(33) + 1 belongs to F. However, 100 has two essentially different factorizations into primes of F;
namely,
100 = 4 · 25
and
100 = 10 · 10
Thus there is no unique factorization into primes in F.
11.8
CONGRUENCE RELATION
Let m be a positive integer. We say that a is congruent to b modulo m. written
a ≡b (modulo m)
or simply
a ≡b (mod m)
if m divides the difference a −b . The integer m is called the modulus. The negation of a ≡b (mod m) is written
a ̸≡b (mod m). For example:
(i) 87 ≡23 (mod 4) since 4 divides 87 −23 = 64.
(ii) 67 ≡1 (mod 6) since 6 divides 67 −1 = 66.
(iii) 72 ≡−5 (mod 7) since 7 divides 72 −(−5) = 77.
(iv) 27 ̸≡8 (mod 9) since 9 does not divide 27 −8 = 19.
Our ﬁrst theorem (proved in Problem 11.34) states that congruence modulo m is an equivalence relation.
Theorem 11.21: Let m be a positive integer. Then:
(i) For any integer a, we have a ≡a (mod m).
(ii) If a ≡b (mod m), then b ≡a (mod m).
(iii) If a ≡b (mod m) and b ≡c (mod m), then a ≡c (mod m).

CHAP. 11]
PROPERTIES OF THE INTEGERS
275
Remark: Suppose m is positive, and a is any integer. By the Division Algorithm, there exist integers q and r
with 0 = r ≤m such that a = mq + r. Hence
mq = a −r
or
m | (a −r)
or
a ≡r (mod m)
Accordingly:
(1) Any integer a is congruent modulo m to a unique integer in the set
{0, 1, 2, . . . , m −1}
The uniqueness comes from the fact that m cannot divide the difference of two such integers.
(2) Any two integers a and b are congruent modulo m if and only if they have the same remainder when divided
by m.
Residue Classes
Since congruence modulo m is an equivalence relation, it partitions the set Z of integers into disjoint equiv-
alence classes called the residue classes modulo m. By the above remarks, a residue class consists of all those
integers with the same remainder when divided by m. Therefore, there are m such residue classes and each
residue class contains exactly one of the integers in the set of possible remainders, that is,
{0, 1, 2, . . . , m −1}
Generally speaking, a set of m integers {a1, a2, . . . , am} is said to be a complete residue system modulo m if each
ai comes from a distinct residue class. (In such a case, each ai is called a representative of its equivalence class.)
Thus the integers from 0 to m −1 form a complete residue system. In fact, any m consecutive integers form
a complete residue system modulo m.
The notation [x]m, or simply [x] is used to denote the residue class (modulo m) containing an integer x, that
is, those integers which are congruent to x. In other words,
[x] = {a ∈Z | a ≡x (mod m)}
Accordingly, the residue classes can be denoted by
[0], [1], [2], . . . , [m −1]
or by using any other choice of integers in a complete residue system.
EXAMPLE 11.11 The residue classes modulo m = 6 follow:
[0] = {. . . , −18, −12, −6, 0, 6, 12, 18, . . .},
|3| = {. . . , −15, −9, −3, 3, 9, 15, 21, . . .}
[1] = {. . . , −17, −11, −5, 1, 7, 13, 19, . . .},
|4| = {. . . , −14, −8, −2, 4, 10, 16, 22, . . .}
[2] = {. . . , −16, −10, −4, 2, 8, 14, 20, . . .},
|5| = {. . . , −13, −7, −1, 5, 11, 17, 23, . . .}
Note that {−2, −1, 0, 1, 2, 3} is also a complete residue system modulo m = 6, and these representatives have
minimal absolute values.
Congruence Arithmetic
The next theorem (proved in Problem 11.35) tells us that, under addition and multiplication, the congruence
relation behaves very much like the relation of equality. Namely:
Theorem 11.22: Suppose a ≡c (mod m) and b ≡d (mod m).
Then:
(i)
a + b ≡c + d(mod m);
(ii)
a · b ≡c · d(mod m)
Remark: Suppose p(x) is a polynomial with integral coefﬁcients. If s ≡t (mod m), then using Theorem 11.22
repeatedly we can show that p(s) ≡p(t) (mod m).

276
PROPERTIES OF THE INTEGERS
[CHAP. 11
EXAMPLE 11.12 Observe that 2 ≡8 (mod 6) and 5 ≡41 (mod 6). Then:
(a) 2 + 5 ≡8 + 41 (mod 6)
or
7 ≡49 (mod 6)
(b) 2 · 5 ≡8 · 41 (mod 6)
or
10 ≡328 (mod 6)
(c) Suppose p(x) = 3x2 −7x + 5. Then
p(2) = 12 −14 + 5 = 3
and
p(8) = 192 −56 + 5 = 141
Hence 3 ≡141 (mod 6).
Arithmetic of Residue Classes
Addition and multiplication are deﬁned for our residue classes modulo m as follows:
[a] + [b] = [a + b]
and
[a] · [b] = [ab]
For example, consider the residue classes modulo m = 6; that is,
[0], [1], [2], [3], [4], [5]
Then
[2] + [3] = [5],
[4] + [5] = [9] = [3],
[2]·[2] = [4],
[2]·[5] = [10] = [4]
The content of Theorem 11.22 tells us that the above deﬁnitions are well deﬁned, that is, the sum and product of
the residue classes do not depend on the choice of representative of the residue class.
There are only a ﬁnite number m of residue classes modulo m. Thus one can easily write down explicitly
their addition and multiplication tables when m is small. Figure 11-4 shows the addition and multiplication tables
for the residue classes modulo m = 6. For notational convenience, we have omitted brackets and simply denoted
the residue classes by the numbers 0, 1, 2, 3, 4, 5.
Fig. 11-4
Integers Modulo m, Zm
The integers modulo m, denoted by Zm, refers to the set
Zm = {0, 1, 2, 3, . . . , m −1}
where addition and multiplication are deﬁned by the arithmetic modulo m or, in other words, the corresponding
operations for the residue classes. For example, Fig. 11-4 may also be viewed as the addition and multiplication
tables for Z6, This means:
There is no essential difference between Zm and the arithmetic of the residue
classes modulo m, and so they will be used interchangeably.

CHAP. 11]
PROPERTIES OF THE INTEGERS
277
Cancellation Laws for Congruences
Recall that the integers satisfy the following:
Cancellation law: If ab = ac and a ̸= 0, then b = c.
The critical difference between ordinary arithmetic and arithmetic modulo m is that the above cancellation
law is not true for congruences. For example,
3 · 1 ≡3 · 5 (mod 6)
but
1 ̸= 5 (mod 6)
That is, we cannot cancel the 3 even though 3 ̸≡0 (mod 6). However, we do have the following Modiﬁed
Cancellation Law for our congruence relations.
Theorem 11.23 (Modiﬁed Cancellation Law): Suppose ab ≡ac (mod m) and gcd(a, m) = 1.
Then b ≡c(mod m).
The above theorem is a consequence of the following more general result (proved in Problem 11.37).
Theorem 11.24: Suppose ab ≡ac (mod m) and d = gcd(a, m). Then b ≡c (mod m/d).
EXAMPLE 11.13 Consider the following congruence:
6 ≡36 (mod 10)
(11.1)
Since gcd(3, 10) = 1 but gcd(6, 10) ̸= 1, we can divide both sides of (11.1) by 3 but not by 6. That is,
2 ≡12 (mod 10)
but
1 ̸≡6 (mod 10)
However, by Theorem 11.24, we can divide both sides of (11.1) by 6 if we also divide the modulus by 2 which
equals gcd(6, 10). That is,
1 ≡6 (mod 5)
Remark: Suppose p is a prime. Then the integers 1 through p −1 are relatively prime to p. Thus the usual
cancellation law does hold when the modulus is a prime p. That is:
If ab ≡ac (mod p) and a ̸= 0 (mod p), then b ≡c (modp).
Thus Zp, the integers modulo a prime p, plays a very special role in number theory.
Reduced Residue Systems, Euler Phi Function
The modiﬁed cancellation law, Theorem 11.23, is indicative of the special role played by those integers which
are relatively prime (coprime) to the modulus m. We note that a is coprime to m if and only if every element
in the residue class [a] is coprime to m. Thus we can speak of a residue class being coprime to m.
The number of residue classes relatively prime to m or, equivalently, the number of integers between 1 and
m (inclusive) which are relatively prime to m is denoted by
φ(m)
The function φ(m) is called the Euler phi function. The list of numbers between 1 and m which are coprime to
m or, more generally, any list of φ(m) incongruent integers which are coprime to m, is called a reduced residue
system modulo m.

278
PROPERTIES OF THE INTEGERS
[CHAP. 11
EXAMPLE 11.14
(a) Consider the modulus m = 15. There are eight integers between 1 and 15 which are coprime to 15:
1,
2,
4,
7,
8,
11,
13,
14
Thus φ(15) = 8 and the above eight integers form a reduced residue system modulo 15.
(b) Consider any prime p. All the numbers 1, 2, . . . , p −1 are coprime to p; hence φ(p) = p −1.
Afunction f with domain the positive integers N is said to be multiplicative if, whenever a and b are relatively
prime,
f (ab) = f (a)f (b)
The following theorem (proved in Problem 11.44) applies.
Theorem 11.25: Euler’s phi function is multiplicative. That is, if a and b are relatively prime, then
φ(ab) = φ(a)φ(b)
11.9
CONGRUENCE EQUATIONS
A polynomial congruence equation or, simply, a congruence equation (in one unknown x) is an equation of
the form
anxn + an−1xn−1 + . . . + a1x + a0 ≡0
(mod m)
(11.2)
Such an equation is said to be of degree n if a ̸≡0 (mod m).
Suppose s ≡t (mod m). Then s is a solution of (11.2) if and only if t is a solution of (11.2). Thus the
number of solutions of (11.2) is deﬁned to be the number of incongruent solutions or, equivalently, the number
of solutions in the set
{0, 1, 2, . . . , m −1}
Of course, these solutions can always be found by testing, that is, by substituting each of the m numbers into
(11.2) to see if it does indeed satisfy the equation.
The complete set of solutions of (11.2) is a maximum set of incongruent solutions whereas the general
solution of (11.2) is the set of all integral solutions of (11.2). The general solution of (11.2) can be found by
adding all the multiples of the modulus m to any complete set of solutions.
EXAMPLE 11.15 Consider the equations:
(a) x2 + x + 1 ≡0 (mod 4),
(b) x2 + 3 ≡0 (mod 6),
(c) x2 −1 ≡0 (mod 8)
Here we ﬁnd the solutions by testing.

CHAP. 11]
PROPERTIES OF THE INTEGERS
279
(a) There are no solutions since 0, 1, 2, and 3 do not satisfy the equation.
(b) There is only one solution among 0, 1, . . . , 5 which is 3. Thus the general solution consists of the integers
3 + 6k where k ∈Z.
(c) There are four solutions, 1, 3, 5, and 7. This shows that a congruence equation of degree n can have more
than n solutions.
We emphasize that we are not only interested in studying congruence equations in order to ﬁnd their solutions;
this can always be found by testing. We are mainly interested in developing techniques to help us ﬁnd such
solutions, and a theory which tells us conditions under which solutions exist and the number of such solutions.
Such a theory holds for linear congruence equations which we investigate below. We will also discuss the Chinese
Remainder Theorem, which is essentially a system of linear congruence equations.
Remark 1: The coefﬁcients of a congruence equation can always be reduced modulo m since an equivalent
equation, that is, an equation with the same solutions, would result. For example, the following are equivalent
equations since the coefﬁcients are congruent modulo m = 6:
15x2 + 28x + 14 ≡0 (mod 6),
3x2 + 4x + 2 ≡0 (mod 6),
3x2 −2x + 2 ≡0 (mod 6),
Usually we choose coefﬁcients between 0 and m −1 or between −m/2 and m/2
Remark 2: Since we are really looking for solutions of (11.2) among the residue classes modulo m rather than
among the integers, we may view (11.2) as an equation over the integers modulo m, rather than an equation
over Z, the integers. In this context, the number of solutions of (11.2) is simply the number of solutions in Zm.
Linear Congruence Equation:
ax ≡1 (mod m)
First we consider the special linear congruence equation
ax ≡1 (mod m)
(11.3)
where a ̸≡0 (mod m). The complete story of this equation is given in the following theorem (proved in
Problem 11.57).
Theorem 11.26: If a and m are relatively prime, then ax ≡1 (mod m) has a unique solution; otherwise it has
no solution.
EXAMPLE 11.16
(a) Consider the congruence equation 6x ≡1 (mod 33). Since gcd(6, 33) = 3, this equation has no solution.
(b) Consider the congruence equation 7x ≡1 (mod 9). Since gcd(7, 9) = 1, the equation has a unique solution.
Testing the numbers 0, 1, …, 8, we ﬁnd that
7(4) = 28 ≡1(mod 9)
Thus x = 4 is our unique solution. (The general solution is 4 + 9k for k ∈Z.)
Suppose a solution of (11.3) does exist, that is, suppose gcd(a, m) = 1. Furthermore, suppose the modulus
m is large. Then the Euclidean algorithm can be used to ﬁnd a solution of (11.3). Speciﬁcally, we use the
Euclidean algorithm to ﬁnd x0 and y0 such that
ax0 + my0 = 1
From this it follows that ax0 ≡1 (mod m); that is, x0 is a solution to (11.3).

280
PROPERTIES OF THE INTEGERS
[CHAP. 11
EXAMPLE 11.17 Consider the following congruence equation:
81 ≡1 (mod 256)
By observation or by applying the Euclidean algorithm to 81 and 256, we ﬁnd that gcd(81, 256) = 1. Thus
the equation has a unique solution. Testing may not be an efﬁcient way to ﬁnd this solution since the modulus
m = 256 is relatively large. Hence, we apply the Euclidean algorithm to a = 81 and m = 256. Speciﬁcally,
as in Example 11.6, we ﬁnd x0 = −25 and y0 = 7 such that
81x0 + 256y0 = 1
This means that x0 = −25 is a solution of the given congruence equation. Adding m = 256 to −25, we obtain
the following unique solution between 0 and 256:
x = 231
Linear Congruence Equation:
ax ≡b (mod m)
Now we consider the more general linear congruence equation
ax ≡b (mod m)
(11.4)
where a ̸≡0 (mod m). We ﬁrst consider the case (proved in Problem 11.58) where a and m are coprime.
Theorem 11.27: Suppose a and m are relatively prime. Then ax ≡b (mod m) has a unique solution. Moreover,
if s is the unique solution to ax ≡1 (mod m), then the unique solution to ax ≡b (mod m) is
x = bs.
EXAMPLE 11.18
(a) Consider the congruence equation 3x ≡5 (mod 8). Since 3 and 8 are coprime, the equation has a unique
solution. Testing the integers 0, 1, . . . , 7, we ﬁnd that
3(7) = 21 ≡5 (mod 8)
Thus x = 7 is the unique solution of the equation.
(b) Consider the linear congruence equation
33x ≡38 (mod 280)
(11.5)
Since gcd(33, 280) = 1, the equation has a unique solution. Testing may not be an efﬁcient way to ﬁnd this
solution since the modulus m = 280 is relatively large. We apply the Euclidean algorithm to ﬁrst ﬁnd a
solution to
33x ≡1 (mod 280)
(11.6)
That is, as in Example 11.6, we ﬁnd x0 = 17 and y0 = 2 to be a solution of
33x0 + 280y0 = 1
This means that s = 17 is a solution of (11.6). Then
sb = 17(38) = 646
is a solution of (11.5). Dividing 646 by m = 280, we obtain the remainder
x = 86
which is the unique solution 11.5 between 0 and 280. (The general solution is 86 + 280k with k ∈Z.)

CHAP. 11]
PROPERTIES OF THE INTEGERS
281
The complete story of the general case of (11.4) is contained in the following theorem (proved in
Problem 11.59).
Theorem 11.28: Consider the equation ax ≡b (mod m) where d = gcd(a, m).
(i) Suppose d does not divide b. Then ax ≡b (mod m) has no solution.
(ii) Suppose d does divide b. Then ax ≡b (mod m) has d solutions which are all congruent
modulo M to the unique solution of
Ax ≡B (modM)
where
A = a/d, B = b/d, M = m/d.
We emphasize that Theorem 11.27 applies to the equation Ax ≡B (mod M) in Theorem 11.28 since
gcd(A, M) = 1.
EXAMPLE 11.19 Solve each congruence equation: (a) 4x ≡9 (mod 14); (b) 8x ≡12 (mod 28).
(a) Note gcd(4, 14) = 2. However, 2 does not divide 9. Hence the equation does not have a solution.
(b) Note that d = gcd(8, 28) = 4, and d = 4 does divide 12. Thus the equation has d = 4 solutions. Dividing
each term in the equation by d = 4 we obtain the congruence equation (11.7) which has a unique solution.
2x ≡3 (mod 7)
(11.7)
Testing the integers 0, 1, . . . , 6, we ﬁnd that 5 is the unique solution of (11.7). We now add d −1 = 3
multiples of 7 to the solution 5 of (11.7) obtaining:
5 + 7 = 12,
5 + 2(7) = 19,
5 + 3(7) = 26
Accordingly, 5, 12, 19, 26 are the required d = 4 solutions of the original equation 8x ≡12 (mod 28).
Remark: The solution of equation (11.7) in Example 11.19 was obtained by inspection. However, in case the
modulus m is large, we can always use the Euclidean algorithm to ﬁnd its unique solution as in Example 11.17.
Chinese Remainder Theorem
An old Chinese riddle asks the following question.
Is there a positive integer x such that when x is divided by 3 it yields a
remainder 2, when x is divided by 5 it yields a remainder 4, and when x is
divided by 7 it yields a remainder 6?
In other words, we seek a common solution of the following three congruence equations:
x ≡2 (mod 3),
x ≡4 (mod 5),
x ≡6 (mod 7)
Observe that the moduli 3, 5, and 7 are pairwise relatively prime. (Moduli is the plural of modulus.) Thus
the following theorem (proved in Problem 11.60) applies; it tells us that there is a unique solution modulo
M = 3 · 5 · 7 = 105.
Theorem 11.29 (Chinese Remainder Theorem): Consider the system
x ≡r1 (mod m1),
x ≡r2 (mod m2),
· · · ,
x ≡rk (mod mk)
(11.8)
where the mi are pairwise relatively prime. Then the system has a unique solution modulo
M = m1m2 · · · mk.
One can actually give an explicit formula for the solution of the system (11.8) in Theorem 11.29 which
we state as a proposition.

282
PROPERTIES OF THE INTEGERS
[CHAP. 11
Proposition 11.30: Consider the system (11.8) of congruence equations. Let M = m1m2 . . . mk, and
M1 = M
m1
,
M2 = M
m2
, . . . ,
Mk = M
mk
(Then each pair Mi and mi are co-prime.) Let s1, s2, . . . , sk be the solutions respectively,
of the congruence equations
M1x ≡1 (mod m1), M2x ≡1 (mod m2), . . . , Mkx ≡1 (mod mk)
Then the following is a solution of the system (11.8):
x0 = M1s1r1 + M2s2r2 + · · · + Mkskrk
(11.9)
We now solve the original riddle in two ways.
Method 1: First we apply the Chinese Remainder Theorem (CRT) to the ﬁrst two equations,
(a) x ≡2 (mod 3)
and
(b) x ≡4 (mod 5)
CRT tells us there is a unique solution modulo M = 3 · 5 = 15. Adding multiples of the modulus m = 5 to the
given solution x = 4 of the second equation (b), we obtain the following three solutions of (b) which are less
than 15:
4,
9,
14
Testing each of these solutions in equation (a), we ﬁnd that 14 is the only solution of both equations. Now we
apply the same process to the two equations
(c) x ≡14 (mod 15)
and
(d) x ≡6 (mod 7)
CRT tells us there is a unique solution modulo M = 15 · 7 = 105 . Adding multiples of the modulus m = 15 to
the given solution x = 14 of the ﬁrst equation (c), we obtain the following seven solutions of (b) which are less
than 105:
14,
29,
44,
59,
74,
89,
104
Testing each of these solutions of (c) in the second equation (d) we ﬁnd that 104 is the only solution of both
equations. Thus the smallest positive integer satisfying all three equations is
x = 104
This is the solution of the riddle.
Method 2: Using the above notation, we obtain
M = 3 · 5 · 7 = 105,
M1 = 105/3 = 35,
M2 = 105/5 = 21,
M3 = 105/7 = 15
We now seek solutions to the equations
35x ≡1 (mod 3),
21x ≡1 (mod 5),
15x ≡1 (mod 7)
Reducing 35 modulo 3, reducing 21 modulo 5, and reducing 15 modulo 7, yields the system
2x ≡1 (mod 3),
x ≡1 (mod 5),
x ≡1 (mod 7)
The solutions of these three equations are, respectively,
s1 = 2,
s2 = 1,
s3 = 1

CHAP. 11]
PROPERTIES OF THE INTEGERS
283
We now substitute into the formula (11.9) to obtain the following solution of our original system:
x0 = 35 · 2 · 2 + 21 · 1 · 4 + 15 · 1 · 6 = 314
Dividing this solution by the modulus M = 105, we obtain the remainder
x = 104
which is the unique solution of the riddle between 0 and 105.
Remark: The above solutions s1 = 2, s2 = 1, s3 = 1 were obtained by inspection. If the moduli are large, we
can always use the Euclidean algorithm to ﬁnd such solutions as in Example 11.17.
Solved Problems
INEQUALITIES, ABSOLUTE VALUE
11.1. Insert the correct symbol, <, >, or =, between each pair of integers:
(a) 4 ____ −7;
(b) −2 _____ −9;
(c)(−3)2 ____ 9;
(d) −8 ____ 3,
For each pair of integers, say a and b, determine their relative positions on the number line R; or, alternatively,
compute b −a, and write a < b, a > b, or a = b according as b −a is positive, negative, or zero. Hence:
(a) 4 > −7;
(b) −2 > −9;
(c) (−3)2 = 9;
(d) −8 < 3.
11.2. Evaluate: (a) |2 −5|, |−2 + 5|, |−2 −5|;
(b) |5 −8| + |2 −4|, |4 −3| −|3 −9|.
Evaluate inside the absolute value sign ﬁrst:
(a) |2 −5| = |−3| = 3,
|−2 + 5| = |3| = 3,
|−2 −5| = |−7| = 7
(b) |5 −8| + |2 −4| = |−3| + |−2| = 3 + 2 = 5;
|4 −3| −|3 −9| = |1| −|−6| = 1 −6 = −5
11.3. Find the distance d between each pair of integers:
(a) 3 and –7; (b) –4 and 2; (c) 1 and 9; (d) –8 and –3; (e) –5 and –8.
The distance d between a and b is given by d = |a −b| = |b −a|. Alternatively, as indicated by Fig. 11-5,
d = |a| + |b| when a and b have different signs, and d = |a| −|b| when a and b have the same sign and |a| > |b|.
Thus: (a) d = 3 + 7 = 10; (b) d = 4 + 2 = 6; (c) d = 9 −1 = 8; (d) d = 8 −3 = 5; (e) d = 8 −5 = 3.
Fig. 11-5
11.4. Find all integers n such that: (a) 1 < 2n −6 < 14; (b) 2 < 8 −3n < 18.
(a) Add 6 to the “three sides” to get 7 < 2n < 20. Then divide all sides by 2 (or multiply by 1/2) to get 3.5 < n < 10.
Hence n = 4, 5, 6, 7, 8, 9.
(b) Add –8 to the three sides to get −6 < −3n < 10. Divide by –3 (or multiply by –1/3) and, since –3 is negative,
change the direction of the inequality to get
2 > n > −3.3
or
−3.3 < n < 2
Hence n = −3, −2, −1, 0, 1.

284
PROPERTIES OF THE INTEGERS
[CHAP. 11
11.5. Prove Proposition 11.3: Suppose a ≤b, and c is any integer. Then: (i) a + c ≤b + c,
(ii) ac = bc when c > 0; but ac = bc when c < 0.
The proposition is certainly true when a = b. Hence we need only consider the case when a < b, that is, when
b −a is positive.
(i) The following difference is positive: (b + c) −(a + c) = b −a. Hence a + c < b + c.
(ii) Suppose c is positive. By property [P1] of the positive integers N, the product c(b −a) is also positive. Thus
ac < bc.
Now suppose c is negative. Then −c is positive, and the product (−c)(b−a) = ac−bc is also positive. Accordingly,
bc < ac, whence ac > bc.
11.6. Prove Proposition 11.4 (iii): |ab| = |a||b|.
The proof consists of analysing the following ﬁve cases: (a) a = 0 or b = 0; (b) a > 0 and b > 0; (c) a > 0 and
b < 0; (d) ba < 0 and b > 0; (e) ba < 0 and b < 0. We only prove the third case here. (c) Since a > 0 and b < 0,
|a| = a and |b| = −b. Also ab < 0. Hence |ab| = −(ab) = a(−b) = |a||b|.
11.7 Prove Proposition 11.4 (iv): |a ± b| ≤|a| + |b|.
Now ab ≤|ab| = |a||b|, and so 2ab ≤2|a||b|. Hence
(a + b)2 = a2 + 2ab + b2 ≤|a|2 + 2|a||b| + |b|2 = (|a| + |b|)2
But
!
(a + b)2 = |a + b|. Thus the square root of the above yields |a + b| ≤|a| + |b|. Also,
|a −b| = |a + (−b)| ≤|a| + |−b| = |a| + |b|
MATHEMATICAL INDUCTION, WELL-ORDERING PRINCIPLE
11.8. Prove the proposition that the sum of the ﬁrst n positive integers is n(n + 1)/2; that is:
P(n):
1 + 2 + · · · + n = 1
2n(n + 1)
P (1) is true since 1 = 1
2(1)(1 + 1). Assuming P(k) is true, we add k + 1 to both sides of P(k) obtaining
1 + 2 + 3 + · · · + k + (k + 1) = 1
2k(k + 1) + (k + 1) = 1
2[k(k + 1) + 2(k + 1)]
= 1
2[(k + 1)(k + 2)]
This is P (k + 1). Accordingly, P(k + 1) is true whenever P(k) is true. By the principle of mathematical induction,
P is true for every n ∈N.
11.9. Suppose a ̸= 1. Show P is true for all n ≥1 where P is deﬁned as follows:
P(n):
1 + a + a2 + · · · + an = an+1 −1
a −1
P(1) is true since
1 + a = a2 −1
a −1
Assuming P (k) is true, we add ak+1 to both sides of P(k), obtaining
1 + a + a2 + . . . + ak + ak+1 = ak+1 −1
a −1
+ ak+1 = ak+1 −1 + (a −1)ak+1
a −1
= ak+2 −1
a −1
This is P (k + 1). Thus, P (k + 1) is true whenever P(k) is true. By the principle of mathematical induction, P is true
for every n ∈N.

CHAP. 11]
PROPERTIES OF THE INTEGERS
285
11.10. Suppose n is a positive integer. Prove n ≥1. (This is not true for the rational numbers Q.) In other words,
if P (n) is the statement that n ≥1, then P(n) is true for every n ∈N.
P (n) holds for n = 1 since 1 ≥1. Assuming P(k) is true, that is, k ≥1, add 1 to both sides to obtain
k + 1 ≥1 + 1 = 2 > 1
This is P (k + 1). Thus P (k + 1) is true whenever P(k) is true. By the principle of mathematical induction, P is true
for every n ∈N.
11.11. Suppose a and b are positive integers. Prove:
(a) If b ̸= 1, then a < ab.
(b) If ab = 1, then a = 1 and b = 1.
(c)
If n is composite, then n = ab where 1 < a, b < n.
(a) By Problem 11.10, b > 1. Hence b −1 > 0, that is, b −1 is positive. By the property [P1] of the positive
integers N, the following product is also positive:
a(b −1) = ab −a
Thus a < ab, as required.
(b) Suppose b ̸= 1. By (a), a < ab = 1. This contradicts Problem 11.10; hence b = 1. It then follows that a = 1.
(c) If n is not prime, then n has a positive divisor a such that a ̸= 1 and a ̸= n. Then n = ab where b ̸= 1 and
b ̸= n. Thus, by Problem 11.10 and by part (a), 1 < a, b < ab = n.
11.12. Prove Theorem 11.6 (Well-Ordering Principle): Let S be a nonempty set of positive integers. Then S
contains a least element.
Suppose S has no least element. Let M consist of those positive integers which are less than every element of S.
Then 1 ∈M; otherwise, 1 ∈S and 1 would be a least element of S. Suppose k ∈M. Then k is less than every
element of S. Therefore k + 1 ∈M; otherwise k + 1 would be a least element of S.
By the Principle of Mathematical Induction, M contains every positive integer. Thus S is empty which contradicts
the hypothesis that S is nonempty. Accordingly, the original assumption that S has no least element cannot be true.
Thus the theorem is true.
11.13. Prove Theorem 11.5 (Induction: Second Form): Let P be a proposition deﬁned on the integers n ≥1
such that:
(i) P(1) is true.
(ii) P(k) is true whenever P(j) is true for all 1 ≤j < k.
Then P is true for all n ≥1.
Let A be the set of integers n ≥1 for which P is not true. Suppose A is not empty. By the Well-Ordering
Principle, A contains at least element a0 By (i), a0 ̸= 1.
Since a0 is the least element of A, P is true for every integer j where 1 ≤j < a0. By (ii), P is true for a0. This
contradicts the fact that a0 ∈A. Hence A is empty, and so P is true for every integer n > 1.
DIVISION ALGORITHM
11.14. For each pair of integers a and b, ﬁnd integers q and r such that a = bq + r and 0 < r < |b|:
(a) a = 258 and b = 12;
(b) a = 573 and b = −16.
(a) Here a and b are positive. Simply divide a by b, that is, 258 by 12, say by long division, to obtain the quotient
q = 21 and remainder r = 6. Alternately, using a calculator, we get
258/12 = 21.5,
q = INT(a/b) = 21,
r = a −bq = 258 −12(21) = 6

286
PROPERTIES OF THE INTEGERS
[CHAP. 11
(b) Here a is positive, but b is negative. Divide a by |b|, that is, 573 by 16, say with a calculator to obtain:
a/|b| = 573/16 = 35.8125,
q′ = INT(a/|b|) = 35,
r′ = 573 −16(35) = 13
Then
573 = (16)(35) + 13
and
573 = (−16)(−35) + 13
Thus q = −35 and r = 13.
11.15. For each pair of integers a and b, ﬁnd integers q and r such that a = bq + r and 0 < r < |b| :
(a) a = −381 and b = 14;
(b) a = −433 and b = −17.
Here a is negative in each case, hence we have to make some adjustments to be sure that 0 < r < |b|.
(a) Divide |a| = 381 by b = 14, say with a calculator, to obtain the quotient q′ = 27 and remainder r′ = 3. Then
381 = (14)(27) + 3
and so
−381 = (14)(−27) −3
But −3 is negative and cannot be the remainder r; hence we add and subtract b = 14 as follows:
−381 = (14)(−27) −14 + 14 −3 = (14)(−28) + 11
Thus q = −28 and r = 11.
(b) Divide |a| = 433 by |b| = 17, say by a calculator, to obtain the quotient q′ = 25 and remainder r′ = 8. Then:
433 = (17)(25) + 8
and so
−433 = (−17)(25) −8
But –8 is negative and cannot be the remainder r; we correct this by adding and subtracting |b| = 17 as follows:
−433 = (−17)(25) −17 + 17 −8 = (−17)(26) + 9
Thus q = 26 and r = 9.
11.16. Prove
√
2 is not rational, that is,
√
2 ̸= a/b where a and b are integers.
Suppose
√
2 is rational and
√
2 = a/b where a and b are integers reduced to lowest terms, i.e., gcd(a, b) = 1.
Squaring both sides yields
2 = a2
b2
or
a2 = 2b2
Then 2 divides a2. Since 2 is a prime, 2 also divides a. Say a = 2c. Then
2b2 = a2 = 4c2
or
b2 = 2c2
Then 2 divides b2. Since 2 is a prime 2 also divides b. Thus 2 divides both a and b. This contradicts the assumption
that gcd(a, b) = 1. Therefore,
√
2 is not rational.
11.17. Prove Theorem 11.8 (Division Algorithm) for the case of positive integers. That is, assuming a and b are
positive integers, prove there exist nonnegative integers q and r such that
a = bq + r
and
0 ≤r < b
(11.10)
If a < b, choose q = 0 and r = a. If a = b, choose q = 1 and r = 0. In either case, q and r satisfy (11.10).
The proof is now by induction on a. If a = 1 then a < b or a = b; hence the theorem holds when a = 1.
Suppose a > b. Then a −b is positive and a −b < a. By induction, the theorem holds for a −b. Thus there exists
q′ and r′ such that
a −b = bq′ + r′
and
0 ≤r′ < b
Then
a = bq′ + b + r′ = b(q′ + 1) + r′
Choose q = q′ + 1 and r = r′. Then q and r are nonnegative integers and satisfy (11.10). Thus the theorem is
proved.

CHAP. 11]
PROPERTIES OF THE INTEGERS
287
11.18. Prove Theorem 11.8 (Division Algorithm): Let a and b be integers with b ̸= 0. Then there exists integers
q and r such that a = bq + r and 0 ≤r′ < |b|. Also, the integers q and r are unique.
Let M be the set of nonnegative integers of the form a −xb for some integer x. If x = −|a|b then a −xb is
nonnegative; hence M is nonempty. By the Well-Ordering Principle, M has a least element, say r. Since r ∈M,
we have
r ≥0
and
r = a −qb
for some integer q. We need only show that r < |b|. Suppose r ≥|b|. Let r′ = r −|b|.
Then r′ ≥0 and also r′ < r because b ̸= 0. Furthermore,
r′ = r −|b| = a −qb −|b| =
 a −(q + 1)b,
if b < 0
a −(q −1)b,
if b > 0
In either case, r′ belongs to M. This contradicts the fact that r is the least element of M Accordingly, r < |b|. Thus the
existence of q and r is proved.
We now show that q and r are unique. Suppose there exist integers q and r and q′ and r′ such that
a = bq + r
and
a = bq′ + r′
where
0 < r, r′ < |b|
Then bq + r = bq′ + r′; hence
b(q −q′) = r′ −r
Thus b divides r′ −r. But |r′ −r| < |b| since 0 < r, r′ < |b|. Accordingly, r′ −r = 0. Since b ̸= 0 this
implies q −q′ = 0. Consequently, r′ = r and q′ = q; that is, q and r are uniquely determined by a and b.
DIVISIBILITY, PRIMES, GREATEST COMMON DIVISOR
11.19. Find all positive divisors of: (a) 18; (b) 256 = 28; (c) 392 = 23 · 72.
(a) Since 18 is relatively small, we simply write down all positive integers (≤18) which divide 18. These are:
1,
2,
3,
6,
9,
18
(b) Since 2 is a prime, the positive divisors of 256 = 28 are simply the lower powers of 2, i.e.,
20,
21,
22,
23,
24,
25,
26,
27,
28
In other words, the positive divisors of 256 are:
1,
2,
4,
8,
16,
32,
64,
128,
256
(c) Since 2 and 7 are prime, the positive divisors of 392 = 23 · 72 are products of lower powers of 2 times lower
powers of 7, i.e.,
20 · 70,
21 · 70,
22 · 70,
23 · 70,
20 · 71,
21 · 71,
22 · 71,
23 · 71,
20 · 72,
21 · 72,
22 · 72,
23 · 72
In other words, the positive powers of 392 are:
1,
2,
4,
8,
7,
14,
28,
56,
49,
98,
196,
392.
(We have used the usual convention that n0 = 1 for any nonzero number n.)
11.20. List all primes between 50 and 100.
Simply list all numbers p between 50 and 100 which cannot be written as a product of two positive integers,
excluding 1 and p. This yields:
51, 53, 57, 59, 61, 67, 71, 73, 79, 83, 87, 89, 91, 93, 97

288
PROPERTIES OF THE INTEGERS
[CHAP. 11
11.21. Let a = 8316 and b = 10 920.
(a) Find d = gcd(a, b), the greatest common divisor of a and b.
(b) Find integers m and n such that d = ma + nb.
(c) Find lcm(a, b), the least common multiple of a and b.
(a) Apply the Euclidean algorithm to a and b. That is, apply the division algorithm to a and b and then repeatedly
apply the division algorithm to each quotient and remainder until obtaining a zero remainder. These steps are
pictured in Fig. 11-6(a) using long division and also in Fig. 11-6(b) where the arrows indicate the quotient and
remainder in the next step. The last nonzero remainder is 84. Thus 84 = gcd(8316, 10 920).
Fig. 11-6
(b) Now ﬁnd m and n such that 84 = 8316m + 1092n by “unraveling” the above steps in the Euclidean algorithm.
Speciﬁcally, the ﬁrst three quotients in Fig. 11-6 yields the equations:
(1) 2604 = 10 920 −1(8316);
(2) 504 = 8316 −3(2604);
(3) 84 = 2604 −5(504).
Equation (3) tells us that d = 84 is a linear combination of 2604 and 504. Use (2) to replace 5044 in (3) so 84
can be written as a linear combination of 2604 and 8316 as follows:
(5) 84 = 2604 −5[8316 −3(2604)] = 2604 −5(8316) + 15(2604)
= 16(2604) −5(8316)
Now use (1) to replace 2604 in (5) so 84 can be written as a linear combination of 8316 and 10 290 as follows:
(6) 84 = 16[10 920 −1(8316)] −5(8316) = 16(10 920) −16(8316) −5(8316)
= −21(8316) + 16(10 920)
This is our desired linear combination. In other words, m = −21 and n = 16.
(c) By Theorem 11.16,
lcm(a, b) =
|ab|
gcd(a, b) = (8316)(10 920)
84
= 1 081 080
11.22. Find the unique factorization of each number: (a) 135;
(b) 1330;
(c) 3105;
(d) 211.
(a) 135 = 5·27 = 5·3·3·3 or 135 = 33·5.
(b) 1330 = 2·665 = 2·5·133 = 2·5·7·19.
(c) 3105 = 5·621 = 5·3·207 = 5·3·3·69 = 5·3·3·3·23,
or
3105 = 33·5·23.
(d) None of the primes 2, 3, 5, 7, 11, 13 divides 211; hence 211 cannot be factored, that is, 211 is a prime.
(Remark: We need only test those primes less than
√
211.)

CHAP. 11]
PROPERTIES OF THE INTEGERS
289
11.23. Let a = 23·35·54·116·173 and b = 25·53·72·114·132. Find gcd(a, b) and lcm(a, b).
Those primes pi which appear in both a and b will also appear in gcd(a, b). Furthermore, the exponent of pi
in gcd(a, b) will be the smaller of its exponents in a and b. Hence
gcd(a, b) = 23·53·114
Those primes pi which appear in either a or b will also appear in lcm(a, b). Also, the exponent of pi in lcm(a, b)
will be the larger of its exponent in a and b. Hence
lcm(a, b) = 25·35·54·72·116·132·173
11.24. Prove Theorem 11.9: Suppose a, b, c are integers.
(i) If a | b and b | c, then a | c.
(iv) If a | b and b ̸= 0, then a = ±b or |a| < |b|.
(ii) If a | b then, for any integer x, a | bx.
(v) If a | b and b | a, then |a|=|b|, that is, a= ± b.
(iii) If a | b and a | c, then a | (b + c) and a | (b −c). (vi) If a | 1, then a = ±1.
(i) If a | b and b | c, then there exist integers x and y such that ax = b and by = c. Replacing b by ax, we obtain
axy = c. Hence a | c.
(ii) If a | b, then there exists an integer c such that ac = b. Multiplying the equation by x, we obtain acx = bx.
Hence a | bx.
(iii) If a | b and a | c , then there exist integers x and y such that ax = b and ay = c. Adding the equalities, we obtain
ax + ay = b + c
and so
a(x + y) = b + c
Hence a | (b + c). Subtracting the equalities ay = b and by = c, we obtain
ax −ay = b −c
and so
a(x −y) = b −c.
Thus a | (b −c).
(iv) If a | b, then there exists c such that ac = b. Then
|b| = |ac| = |a||c|
Hence either |c| = 1 or |a| < |a||c| = |b|. If |c| = 1, then c = ±1; where a = ±b, as required.
(v) If a | b, then a = ±b or |a| < |b|. If |a| < |b| then b | a. Hence a = ±b.
(vi) If a | 1, then a = ±1 or |a| < |1| = 1. By Problem 11.11, |a| ≥1. Therefore, a = ±1.
11.25. A nonempty subset J of Z is called an ideal if J has the following two properties:
(1) If a, b ∈J, then a + b ∈J.
(2) If a ∈J and n ∈Z, then na ∈J.
Let d be the least positive integer in an ideal J ̸= {0}. Prove that d divides every element of J.
Since J ̸= {0}, there exists a ∈J with a ̸= 0. Then −a = (−1)a ∈J. Thus J contains positive elements. By
the Well-Ordering Principle, J contains a least positive integer, so d exists. Now let b ∈J. Dividing b by d, the
division algorithm tells us there exist q and r such that
b = qd + r
and
0 ≤r < d
Now b, d ∈J and J is an ideal; hence b + (−q)d = r also belongs to J. By the minimal property of d, we must
have r = 0. Hence d | b, as required.
11.26. Prove Theorem 11.13: Let d be the smallest positive integer of the form ax + by. Then d = gcd(a, b).
Consider the set J = {ax + yb | x, y ∈Z}. Then
a = 1(a) + 0(b) ∈J
and
b = 0(a) + 1(b) ∈J

290
PROPERTIES OF THE INTEGERS
[CHAP. 11
Also, suppose s, t ∈J, say, s = x1a + y1b and t = x2a + y2b. Then, for any n ∈Z, the following belong to J:
s + t = (x1 + x2)a + (y1 + y2)b
and
ns = (nx1)a + (ny1)b
Thus J is an ideal. Let d be the least positive element in J. We claim d = gcd(a, b).
By the preceding Problem 11.25, d divides every element of J. Thus, in particular, d divides a and b. Now
suppose h divides both a and b. Then h divides xa + yb for any x and y; that is, h divides every element of J. Thus
h divides d, and so h ≤d. Accordingly, d = gcd(a, b).
11.27. Prove Theorem 11.17: Suppose gcd(a, b) = 1, and a and b divide c. Then ab divides c.
Since gcd(a, b) = 1, there exist x and y such that ax + by = 1. Since a | c and b | c, there exist m and n such
that c = ma and c = nb. Multiplying ax + by = 1 by c yields
acx + bcy = c
or
a(nb)x + b(ma)y = c
or
ab(nx + my) = c
Thus ab divides c.
11.28. Prove Corollary 11.19: Suppose a prime p divides a product ab. Then p | a or p | b.
Suppose p does not divide a. Then gcd(p, a) = 1 since the only divisors of p are ±1 and ±p. Thus there
exist integers m and n such that 1 = mp + nq. Multiplying by b yields b = mpb + nab. By hypothesis, p|ab, say,
ab = cp. Then:
b = mpb + nab = mpb + ncp = p(mb + nc).
Hence p | b, as required.
11.29. Prove: (a) Suppose p | q where p and q are primes. Then p = q.
(b) Suppose p | q1q2 · · · qr where p and the q’s are primes. Then p is equal to one of the q’s.
(a) The only divisors of q are ±1 and ±q. Since p > 1, p = q.
(b) If r = 1, then p = q1 by (a). Suppose r > 1. By Problem 11.28 (Corollary 11.19) p | q1 or p | (q2 · · · qr).
If
p | q1,
then p = q1 by (a). If not, then p | (q2 · · · qr). We repeat the argument. That is, we get p = p2 or p | (q3 · · · qr).
Finally (or by induction) p must equal one of the q’s.
11.30. Prove the Fundamental Theorem of Arithmetic (Theorem 11.20): Every integer n > 1 can be expressed
uniquely (except for order) as a product of primes.
We already proved Theorem 11.11 that such a product of primes exists. Hence we need only show that such a
product is unique (except for order). Suppose
n = p1p2 · · · pk = q1q2 · · · qr
where the p’s and q’s are primes. Note that p1 | (q1q2 · · · qr). By the preceding Problem 11.29, p1 equals one of the
q’s. We rearrange the q’s so that p1 = q1. Then
p1p2 · · · pk = p1q2 · · · qr
and so
p2 · · · pk = q2 · · · qr
By the same argument, we can rearrange the remaining q’s so that p2 = q2. And so on. Thus n can be expressed
uniquely as a product of primes (except for order).
CONGRUENCES
11.31. Which of the following are true?
(a) 446 ≡278 (mod 7),
(c) 269 ≡413 (mod 12),
(e) 445 ≡536 (mod 18)
(b) 793 ≡682 (mod 9),
(d) 473 ≡369 (mod 26),
(f) 383 ≡126 (mod 15)
Recall a ≡b (mod m) if and only if m divides a −b.

CHAP. 11]
PROPERTIES OF THE INTEGERS
291
(a) Find the difference 446 −278 = 168. Divide the difference 168 by the modulus m = 7. The remainder is 0;
hence the statement is true,
(b) Divide the difference 793 −682 = 111 by the modulus m = 9. The remainder is not 0; hence the statement is
false.
(c) True; since 12 divides 269 −413 = −144.
(d) True; since 26 divides 472 −359 = 104.
(e) False; since 18 does not divide 445 −536 = −91.
(f) False; since 15 does not divide 383 −126 = 157.
11.32. Find the smallest integer in absolute value which is congruent modulo m = 7 to each of the following
numbers: (a) 386;
(b) 257;
(c) −192;
(d) −466.
The integer should be in the set {−3, −2, −1, 0, 1, 2, 3}.
(a) Dividing 386 by m = 7 yields a remainder 1; hence 386 ≡1 (mod 7).
(b) Dividing 257 by m = 7 yields a remainder 5; hence 257 ≡5 ≡−2 (mod 7). (We obtain −2 by subtracting the
modulus m = 7 from 5.)
(c) Dividing 192 by m = 7 yields a remainder 3; hence −192 ≡−3 (mod 7).
(d) Dividing466bym = 7yieldsaremainder4; hence−466 ≡−4 ≡3(mod7). (Weobtain3byaddingthemodulus
m = 7 to −4.)
11.33. Find all numbers between −50 and 50 which are congruent to 21 modulo m = 12, that is, ﬁnd all x such
that −50 ≤x ≤50 and x ≡21 (mod 12).
Add and subtract multiples of the modulus m = 12 to the given number 21 to obtain:
21 + 0 = 21,
21 + 12 = 33,
33 + 12 = 46,
21 −12 = 9
9 −12 = −3,
−3 −12 = −15,
−15 −12 = −27,
−27 −12 = −39
That is: −39, −27, −15, −3, 9, 21, 33, 46
11.34. Prove Theorem 11.21: Let m be a positive integer. Then:
(i) For any integer a, we have a ≡a (mod m).
(ii) If a ≡b (mod m), then b ≡a (mod m).
(iii) If a ≡b (mod m) and b ≡c (mod m), then a ≡c (mod m).
(i) The difference a −a = 0 is divisible by m; hence a ≡a (mod m).
(ii) If a ≡b (mod m), then m | (a −b). Hence m divides −(a −b) = b −a. Therefore, b ≡a (mod m).
(iii) We are given m | (a −b) and m | (b −c). Hence m divides the sum (a −b) + (b −c) = a −c. Therefore,
a ≡c (mod m).
11.35. Prove Theorem 11.22: Suppose a ≡c (mod m) and b ≡d (mod m). Then:
(i) a + b ≡c + d (mod m).
(ii) a · b ≡c · d (mod m).
We are given that m|(a −c) and m|(b −d).
(i) Then m divides the sum (a −c) + (b −d) = (a + b) −(c + d). Hence a + b ≡c + d (mod m).
(ii) Then m divides b(a −c) = ab −bc and m divides c(b −d) = bc −cd.
Thus m divides the sum
(ab −bc) + (bc −cd) = ab −cd. Thus ab ≡cd (mod m).
11.36. Let d = gcd(a, b). Show that a/d and b/d are relatively prime.
There exists x and y such that d = xa + yb. Dividing the equation by d, we get 1 = x(a/d) + y(b/d). Hence
a/d and b/d are relatively prime.
11.37. Prove Theorem 11.24: Suppose ab ≡ac(mod m) and d = gcd (a, m). Then b ≡c (mod m/d).
By hypothesis, m divides ab −ac = a(b −c). Hence, there is an integer x such that a(b −c) = mx. Dividing
by d yields (a/d)(b −c) = (m/d)x. Thus m/d divides (a/d)(b −c). Since m/d and a/d are relatively prime, m/d
divides b −c. That is, b ≡c (mod m/d), as required.

292
PROPERTIES OF THE INTEGERS
[CHAP. 11
RESIDUE SYSTEMS, EULER PHI FUNCTION φ
11.38. For each modulo m, exhibit two complete residue systems, one consisting of the smallest nonnegative
integers, and the other consisting of the integers with the smallest absolute values: (a) m = 9; (b) m = 12.
In the ﬁrst case choose {0, 1, 2, . . . , m −1}, and in the second case choose
{−(m −1)/2, . . . , −1, 0, 1, . . . , (m −1)/2}
or
{−(m −2)/2, . . . , −1, 0, 1, . . . , m/2}
according as m is even or odd:
(a) {0, 1, 2, 3, 4, 5, 6, 7, 8} and {−4, −3, −2, −1, 0, 1, 2, 3, 4}
(b) {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11} and {−5, −4, −3, −2, −1, 0, 1, 2, 3, 4, 5, 6}.
11.39. Find a reduced residue system modulo m and φ(m) where: (a) m = 9; (b) m = 16; (c) m = 7.
Choose those positive numbers less than m and relatively prime to m. The number of such numbers is φ (m).
(a) {1, 2, 4, 5, 7, 8}; hence φ (9) = 6.
(b) {1, 3, 5, 7, 9, 11, 13, 15}; hence φ (16) = 8.
(c) {1, 2, 3, 4, 5, 6}; hence φ (7) = 6. (This is expected since φ(p) = p −1 for any prime p.)
11.40. Recall Sm = 0, 1, 2, . . . , m −1 is a complete residue system modulo m. Prove:
(a) Any m consecutive integers is a complete residue system modulo m.
(b) If gcd(a, m) = 1, then aSm = {0, a, 2a, 3a, . . . , (m −1)a} is a complete residue system modulo m.
(a) Consider any other sequence of m integers, say {a, a + 1, a + 2, . . . , a + (m −1)}. The absolute value of
the difference s of any two of the integers is less than m. Thus m does not divide s, and so the numbers are
incongruent modulo m.
(b) Suppose ax ≡ay (mod m) where x, y ∈Sm. Since gcd(a, m) = 1, the modiﬁed cancellation law Theorem
11.24 tells us x ≡y (mod m). Since x, y ∈Sm, we must have x = y. That is, aSm is a complete residue system
modulo m.
11.41. Exhibit a complete residue system modulo m = 8 consisting entirely of multiples of 3.
By Problem 11.40(b), 3S8 = {0, 3, 6, 9, 12, 15, 18, 21} is a complete residue system modulo m = 8.
11.42. Show that if p is a prime, then φ(pn) = pn −pn−1 = pn−1(p −1).
Clearly, gcd(a, pn) ̸= 1 if and only if p divides a. Thus the only numbers between 1 and pn which are not
relatively prime to pn are the multiples of p, that is, p, 2p, 3p, . . . , pn−1(p). There are pn−1 such multiples of p.
All the other numbers between 1 and pn are relatively prime to pn. Thus, as claimed:
φ(pn) = pn −pn−1 = pn−1(p −1).
11.43. Find: (a) φ (81), φ(76);
(b) φ (72), φ (3000).
(a) By Problem 11.42,
φ(81) = φ(34) = 33(3 −1) = 27(2) = 54
and
φ(76) = 75(7 −1) = 6(75)
(b) Use Theorem 11.24 that φ is multiplicative:
φ(72) = φ(32 · 23) = φ(32)φ(23) = 3(3 −1) · 22(2 −1) = 24
φ(3000) = φ(3 · 22 · 53) = φ(3)φ(22)φ(53) = 2 · 2 · 52(5 −1) = 400

CHAP. 11]
PROPERTIES OF THE INTEGERS
293
11.44. Prove Theorem 11.25: If a and b are relatively prime, then φ(ab) = φ(a)φ(b).
Let a and b be coprime (relatively prime) positive integers, and let S be the set of numbers from 1 to ab arranged
in an array as in Fig. 11-7. That is, the ﬁrst row of S is the list of numbers from 1 to a, the second row is the list of
numbers from a + 1 to 2a, and so on. Since a and b are coprime, any integer x is coprime to ab if and only if it is
coprime to both a and b. We ﬁnd the number of such integers x in the array S.
Since na + k ≡k (mod a), each column in S belongs to the same residue class modulo a. Therefore, any integer
x in S is coprime to a if and only if x belongs to a column headed by some integer k which is coprime to a. On the
other hand, there are φ (a) such columns since the ﬁrst row is a residue system modulo a.
Fig. 11-7
Now let us consider an arbitrary column in the array S which consists of the numbers:
k,
a + k,
2a + k,
3a + k, . . . , (b −1)a + k
(11.11)
By Problem 11.10, these b integers form a residue system modulo b, that is, no two of the integers are congruent
modulo b. Therefore, (11.11) contains exactly φ(b) integers which are coprime to b. We have shown that the array
S contains φ (a) columns consisting of those integers which are coprime to a, and each such column contains φ(b)
integers which are coprime to b. Thus there are φ(a) φ(b) integers in the array S which are coprime to both a and b
and hence are coprime to ab. Accordingly, as required
φ(ab) = φ(a)φ(b)
ARITHMETIC MODULO m,
Zm
11.45. Exhibit the addition and multiplication tables for: (a) Z4;
(b) Z7
(a) See Fig. 11-8. (b) See Fig. 11-9.
Fig. 11-8
Fig. 11-9

294
PROPERTIES OF THE INTEGERS
[CHAP. 11
11.46. In Z11, ﬁnd: (a) −2, −5, −9, −10; (b) 2/7, 3/7, 5/7, 8/7, 10/7, 1/7.
(a) Note −a = m −a since (m −a) + a = 0. Therefore:
−2 = 11 −2 = 9,
−5 = 11 −5 = 6,
−9 = 11 −9 = 2,
−10 = 11 −10 = 1
(b) By deﬁnition a/b is the integer c such that bc = a. Since we are dividing by 7, ﬁrst compute the multiplication
table for 7 in Z11 as in Fig. 11-10. Now ﬁnd the number inside the table, and the answer will be above this
number. Thus:
Fig. 11-10
2/7 = 5,
3/7 = 2,
5/7 = 7,
8/7 = 9,
10/7 = 3,
1/7 = 8
Note that 7−1 = 8 since 7(8) = 8(7) = 1.
11.47. Consider Zp where p is a prime. Prove:
(a) If ab = ac and a ̸= 0, then b = c;
(b) If ab = 0, then a = 0 or b = 0.
(a) If ab = ac in Zp, then ab ≡ac (mod p). Since a ̸= 0, gcd(a, p) = 1. By Theorem 11.23 we can cancel the
a’s to obtain b ≡c (mod p). Therefore b = c in Zp.
(b) If ab = 0 in Zp, then ab = 0 (mod p). Therefore, p divides the product ab. Since p is a prime, p | a or p | b;
that is, a ≡0 (mod p) or b ≡0 (mod p). Thus a = 0 or b = 0 in Zp.
11.48. Consider a ̸= 0 in Zm where gcd(a, m) = 1. Show that a has a multiplicative inverse in Zm.
Since a ̸= 0 and gcd(a, m) = 1, there exists integers x and y such that ax + my = 1 or ax −1 = my. Thus
m divides ax −1 and hence ax = 1 (mod m). Reduce x modulo m to an element x′ in Zm. Then ax′ = 1 in Zm.
11.49. Find a−1 in Zm where:
(a) a = 37 and m = 249;
(b) a = 15 and m = 234.
(a) First ﬁnd d = gcd (37,249) obtaining d = 1. Then, as in Example 11.6, ﬁnd x and y such that ax + my = 1.
This yields x = −74 and y = 14. That is,
−74(37) + 11(249) = 1
so
−74(37) ≡1(mod 249)
Add m = 249 to −74 to obtain −74 + 249 = 175. Thus (175)(37) ≡1 (mod 249).
Accordingly, a−1 = 175 in Z249.
(b) First ﬁnd d = gcd (15, 234) obtaining d = 3. Thus d ̸= 1, and hence 15 has no multiplicative inverse in Z234.
11.50. For the following polynomials over Z7 ﬁnd: (a) f (x) + g(x) and (b) f (x)h(x).
f (x) = 6x3 −5x2 + 2x −4,
g(x) = 5x3 + 2x2 + 6x −1,
h(x) = 3x2 −2x −5
Perform the operations as if the polynomials were over the integers Z, and then reduce the coefﬁcients modulo 7.
(a) We get: f (x) + g(x) = 11x3 −3x2 + 8x −5 = 4x3 −3x2 + x −5 = 4x3 + 4x2 + x + 2
(b) First ﬁnd the product f (x)h(x) as in Fig. 11-11. Then, reducing modulo 7, we obtain: (g)
f (x)h(x) = 4x5 −6x4 + 2x2 −2x + 6 = 4x5 + x4 + 2x2 + 5x + 6

CHAP. 11]
PROPERTIES OF THE INTEGERS
295
Fig. 11-11
CONGRUENCE EQUATIONS
11.51. Solve the congruence equation f (x) = 4x4 −3x3 + 2x2 + 5x −4 ≡0 (mod 6).
Since the equation is not linear, we solve the equation by testing the numbers in a complete residue system
modulo 6, say, {0, 1, 2, 3, 4, 5}. We have:
f (0) = 4 ̸≡0(mod 6),
f (2) = 54 ≡0 (mod 6),
f (4) = 880 ≡4 ̸≡0 (mod 6)
f (1) = 4 ̸≡0(mod 6),
f (3) = 272 ≡2 ̸≡0 (mod 6),
f (5) = 2196 ≡0 (mod 6)
Thus only 2 and 5 are roots of f (x) modulo 6. That is, {2, 5} is a complete set of solutions.
11.52. Solve the congruence equation f (x) = 26x4 −31x3 + 46x2 −76x + 57 ≡0 (mod 8).
First we reduce the coefﬁcients of f (x) modulo 8 to obtain the equivalent congruence equation
g(x) = 2x4 −7x3 + 6x2 −4x + 1 ≡0 (mod 8)
Since 7 ≡−1 (mod 8) and 6 = −2 (mod 8), we can further simplify our original equation to obtain the equivalent
congruence equation
h(x) = 2x4 + x3 −2x2 −4x + 1 ≡0 (mod 8)
We test the numbers in a complete residue system modulo 8 and, in order to keep our arithmetic as simple as
possible, we choose {−3, −2, −1, 0, 1, 2, 3, 4}. (That is, we chose those numbers whose absolute value is minimal.)
Substituting these numbers in h(x) we obtain:
h(−3) = 130 ≡2 (mod 8),
h(0) = 1 ≡1 (mod 8),
h(3) = 160 ≡0 (mod 8)
h(−2) = 9 ≡1 (mod 8),
h(1) = −2 ≡6 (mod 8),
h(4) = 529 ≡1 (mod 8)
h(−1) = 4 ≡4 (mod 8),
h(2) = 25 ≡1 (mod 8),
Thus 3 is the only solution of f (x) (mod 8).
11.53. Solve each linear congruence equation:
(a) 3x ≡2 (mod 8);
(b) 6x ≡5 (mod 9);
(c) 4x ≡6 (mod 10)
Since the moduli are relatively small, we ﬁnd all the solutions by testing. Recall ax ≡b (mod m) has exactly
d = gcd(a, m) solution providing d divides b.
(a) Here gcd(3, 8) = 1, hence the equation has a unique solution. Testing 0, 1, 2, . . . , 7, we ﬁnd that 3(6) = 18 ≡2
(mod 8). Thus 6 is the unique solution.
(b) Here gcd(6, 9) = 3, but 3 does not divide 5. Hence the system has no solution.
(c) Here gcd(4, 10) = 2 and 2 divides 6; hence the system has two solutions. Testing 0, 1, 2, 3, . . . , 9, we see that
4(4) = 16 ≡6 (mod 10)
and
4(9) = 36 ≡6 (mod 10)
Hence 4 and 9 are our two solutions.
11.54. Solve the congruence equation 1092x ≡213 (mod 2295).
Testing is not an efﬁcient way to solve this equation since the modulus m = 2295 is large. First use the
Euclidean algorithm to ﬁnd d = gcd(1092, 2295) = 3. Dividing 213 by d = 3 yields 0 as a remainder; that is, 3
does divide 213. Thus the equation will have three (incongruent) solutions.

296
PROPERTIES OF THE INTEGERS
[CHAP. 11
Divide the equation and the modulus m = 2295 by d = 3 to obtain the congruence equation
364x ≡71 (mod 765)
(11.12)
We know that 364 and 796 are relatively prime since we divided by d = gcd(1092, 2295) = 3; hence the equation
(11.12) has unique solution modulo 765. We solve (11.12) by ﬁrst ﬁnding the solution of the equation
364x ≡1 (mod 765)
(11.13)
This solution is obtained by ﬁnding s and t such that
364s + 765t = 1
Using the Euclidean algorithm and “unraveling” as in Example 11.6 and Problem 11.21, we obtain s = 124 and
t = −59.
Accordingly, s = 124 is the unique solution of (11.13). Multiplying this solution s = 124 by 71 and reducing
modulo 765 we obtain
124(71) = 8804 ≡389 (mod 765)
This is the unique solution of(11.12).
Lastly, we add the new modulus m = 765 to the solution x1 = 389 two times to obtain the other two solutions of
the given equation:
x2 = 389 + 765 = 1154,
x3 = 1154 + 765 = 1919
In other words, x1 = 389, x2 = 1154, x3 = 1919 form a complete set of solutions of the given congruence equation
1092x ≡213 (mod 2295).
11.55. Solve the congruence equation 455x ≡204 (mod 469).
First use the Euclidean algorithm to ﬁnd d = gcd(455, 469) = 7. Dividing 204 by d = 7 yields 1 as a
remainder; that is, 7 does not divide 204. Thus the equation has no solution.
11.56. Find the smallest positive integer x such that when x is divided by 3 it yields a remainder 2, when x is
divided by 7 it yields a remainder 4, and when x is divided by 10 it yields a remainder 6.
We seek the smallest positive common solution of the following three congruence equations:
(a) x ≡2(mod 3);
(b) x ≡4 (mod 7);
(c) x ≡6 (mod 10)
Observe that the moduli 3, 7, and 10 are pairwise relatively prime.
(Moduli is the plural of modulus.)
The
Chinese Remainder Theorem (CRT), Theorem 11.29, tells us that there is a unique solution modulo the product
m = 3(7)(10) = 210. We solve the problems in two ways.
Method 1: First we apply CRT to the ﬁrst two equations,
(a) x ≡2 (mod 3)
and
(b) x ≡4 (mod 7)
We know there is a unique solution modulo M = 3·7 = 21. Adding multiples of the modulus m = 7 to the given
solution x = 4 of the second equation (b), we obtain the following three solutions of (b) which are less than 21:
4,
11,
18
Testing each of these solutions of (b) in the ﬁrst equation (a), we ﬁnd that 11 is the only solution of both equations.
Now we apply the same process to the two equations
(c) x ≡6 (mod 10)
and
(d) x ≡11 (mod 21)

CHAP. 11]
PROPERTIES OF THE INTEGERS
297
CRT tells us there is a unique solution modulo M = 21·10 = 210. Adding multiples of the modulus m = 21 to the
given solution x = 11 of the equation (d), we obtain the following 10 solutions of (d) which are less than 210:
11, 32, 53, 74, 95, 116, 137, 158, 179, 210
Testing each of these solutions of (d) in the equation (c), we ﬁnd that x = 116 is the only solution of equation (c).
Accordingly, x = 116 is the smallest positive integer satisfying all of the three given equations (a), (b), and (c).
Method 2: Using the notation of Proposition 11.30, we obtain
M = 3 · 7 · 10 = 210,
M1 = 210/3 = 70,
M2 = 210/7 = 30,
M3 = 210/10 = 21
We now seek solutions to the equations
70x ≡1 (mod 3),
30x ≡1 (mod 7),
21x ≡1 (mod 10)
Reducing 70 modulo 3, reducing 30 modulo 7, and reducing 21 modulo 10, we obtain the equivalent system
x ≡1 (mod 3),
2x ≡1 (mod 7),
x ≡1 (mod 10)
The solutions of these three equations are, respectively,
s1 = 1,
s2 = 4,
s3 = 1
Substituting into the formula
x0 = M1s1r1 + M2s2r2 + · · · + Mkskrk
we obtain the following solution of our original system:
x0 = 70 · 1 · 2 + 30 · 4 · 4 + 21 · 1 · 6 = 746
Dividing this solution by the modulus M = 210, we obtain the remainder x = 116 which is the unique solution of
the original system between 0 and 210.
11.57. Prove Theorem 11.26: If a and m are relatively prime, then ax ≡1 (mod m) has a unique solution;
otherwise it has no solution.
Suppose x0 is a solution. Then m divides ax0 −1, and hence there exists y0 such that my0 = ax0 −1.
Therefore
ax0 + my0 = 1
(11.14)
and a and m are coprime (relatively prime). Conversely, if a and m are coprime, then there exist x0 and y0 satisfying
(11.14), in which case x0 is a solution of ax ≡1 (mod m).
It remains to prove that x0 is a unique solution modulo m. Suppose x1 is another solution. Then
ax0 ≡1 ≡ax1(mod m)
Since a and m are coprime, the Modiﬁed Cancellation Law holds here, so
x0 ≡x1 (mod m)
Thus the theorem is proved.
11.58. Prove Theorem 11.27: Suppose a and m are relatively prime. Then ax ≡b (mod m) has a unique
solution. Moreover, if s is the unique solution of ax ≡1 (mod m), then x = bs is the unique solution to
ax ≡b (mod m).
By Theorem 11.26 (proved in Problem 11.57), a unique solution s of ax ≡1 (mod m) exists. Hence as ≡1
(mod m) and so
a(bs) = (as)b ≡1 · b = b (mod m)
That is, x = bs is a solution of ax ≡b (mod m). Suppose x0 and x1 are two such solutions. Then
ax0 ≡b ≡ax1 (mod m)
Since a and m are coprime, the Modiﬁed Cancellation Law tells us that x0 ≡x1 (mod m). That is, ax ≡b (mod m)
has a unique solution modulo m.

298
PROPERTIES OF THE INTEGERS
[CHAP. 11
11.59. Prove Theorem 11.28: Consider the following equation where d = gcd(a, m):
ax ≡b (mod m)
(11.15)
(i) Suppose d does not divide b. Then (11.15) has no solution.
(ii) Suppose d does divide b. Then (11.15) has d solutions which are all congruent modulo M to the unique solution
of the following equation where A = a/d, B = b/d, M = m/d:
Ax ≡B (mod M)
(11.16)
(i) Suppose x0 is a solution of (11.15). Then ax0 ≡b (mod m), and so m divides ax0 −b. Thus there exists an
integer y0 such that my0 = ax0 −b or my0 + ax0 = b. But d = gcd(a, m), and so d divides my0 + ax0. That
is, d divides b. Accordingly, if d does not divide b, then no solution exists.
(ii) Suppose x0 is a solution of (11.15). Then, as above,
my0 + ax0 = b
Dividing through by d we get (11.16). Hence M divides Ax0 −B and so x0 is a solution of (11.16). Conversely,
suppose x1 is a solution of (11.16). Then, as above, there exists an integer y1 such that
My1 + Ax1 = B
Multiplying through by d yields
dMy1 + dAx1 = dB
or
my1 + ax1 = b
Therefore m divides ax1 −b whence x1 is a solution of (11.15). Thus (11.16) has the same integer solution.
Let x0 be the unique smallest positive solutions of (11.16). Since m = dM,
x0,
x0 + M,
x0 + 2M,
x0 + 3M,
. . . ,
x0 + (d −1)M
are precisely the solution of (11.16) and (11.15) between 0 and m. Thus (11.15) has d solutions modulo m, and
all are congruent to x0 modulo M.
11.60. Prove the Chinese Remainder Theorem (Theorem 11.29:) Given the system:
x ≡r1 (mod m1),
x ≡r2 (mod m2),
. . . ,
x ≡rk (mod mk)
(11.17)
where the mi are pairwise relatively prime.
Then the system has a unique solution modulo
M = m1m2· · ·mk.
Consider the integer
x0 = M1s1r1 + M2s2r2 + · · · + Mkskrk
where Mi = M/mi and si is the unique solution of Mix ≡1 (mod mi). Let j be given.
For i ̸= j, we have mj|Mi and hence
Misiri ≡0 (mod mj)
On the other hand, MjSj ≡1 (mod mj); and hence
Mjsjrj ≡rj (mod mj)
Accordingly,
x0 ≡0 + · · · + 0 + rj + 0 + · · · + 0 ≡rj (mod mj)
In other words, x0 is a solution of each of the equations in (11.17).
It remains to show that x0 is the unique solution of the system (11.17) modulo M.
Suppose x1 is another solution of all the equations in (11.17). Then:
x0 ≡x1 (mod m1),
x0 ≡x1 (mod m2),
· · · ,
x0 ≡x1 (mod mk)
Hence mi | (x0−x1), for each i. Since the mi are relatively prime, M = lcm(m1, m2, . . . , mk) and so M | (x0−x1).
That is, x0 = x1 (mod M). Thus the theorem is proved.

CHAP. 11]
PROPERTIES OF THE INTEGERS
299
Supplementary Problems
ORDER AND INEQUALITIES, ABSOLUTE VALUE
11.61. Insert the correct symbol, <, >, or =, between each pair of integers:
(a) 2 ___ −6;
(c) −7 ___3;
(e) 23 ___11;
(g) −2 ___ −7;
(b) −3 ___ −5;
(d) −8 ___ −1;
(f) 23 ___ −9;
(h) 4 ___ −9.
11.62. Evaluate: (a) |3 −7|, |−3 + 7|, |−3 −7|; (b) |2 −5| + |3 + 7|, |1 −4| −|2 −9|;
(c) |5 −9| + |2 −3|, |−6 −2| −|2 −6|.
11.63. Find the distance d between each pair of integers: (a) 2 and −5; (b) −6 and 3; (c) 2 and 8; (d) −7 and −1;
(e) 3 and −3; (f) −7 and −9.
11.64. Find all integers n such that:
(a) 3 < 2n −4 < 10;
(b) 1 < 6 −3n < 13.
11.65. Prove Proposition 11.1: (i) a ≤a, for any integer a; (ii) If a ≤b and b ≤a, then a = b.
11.66. Prove Proposition 11.2: For any integers a and b, exactly one of the following holds: a < b, a = b, or a > b.
11.67. Prove:
(a) 2ab ≤a2 + b2;
(b) ab + ac + bc ≤a2 + b2 + c2.
11.68. Proposition 11.4:
(i) |a| ≥0, and |a| = 0 iff a = 0;
(ii) −|a| ≤a ≤|a| ;
(iii) ||a| −|b|| ≤|a ± b|.
11.69. Show that a −xb ≥0 if b ̸= 0, and x = −|a|b.
MATHEMATICAL INDUCTION, WELL-ORDERING PRINCIPLE
11.70. Prove the proposition that the sum of the ﬁrst n even positive integers is n(n + 1); that is,
P (n): 2 + 4 + 6 + · · · + 2n−= n(n + 1)
11.71. Prove that the sum of the ﬁrst n cubes is equal to the square of the sum of the ﬁrst n positive integers:
P (n): 13 + 23 + 33 + · · · + n3 = (1 + 2 + · · · + n)2
11.72. Prove: 1 + 4 + 7 + · · · + (3n −2) = n(3n −1)/2
11.73. Prove: (a) an am = an+m; (b) (an)m = anm; (c) (ab)n = anbn
11.74. Prove:
1
1·2 +
1
2·3 +
1
3·4 + · · · +
1
n(n+1) =
n
n+1
11.75. Prove:
1
1·3 +
1
3·5 +
1
5·7 + · · · +
1
(2n−1)(2n+1) =
n
2n+1
11.76. Prove: 12
1·3 + 22
3·5 + 32
5·7 + · · · +
n2
(2n−1)(2n+1) = n(n+1)
2(2n+1)
11.77. Prove: xn+1 −yn+1 = (x −y)(xn + xn−1y + xn−2y2 + · · · + yn)
11.78. Prove: |P (A)| = 2n where |A| = n. (Here P (A) is the power set of the set A with n elements.)
DIVISION ALGORITHM
11.79. For each pair of integers a and b, ﬁnd integers q and r such that a = bq + r and 0 ≤r < |b|:
(a) a = 608 and b = −17;
(b) a = −278 and b = 12;
(c) a = −417 and b = −8.
11.80. Prove each of the following statements:
(a) Any integer a is of the form 5k, 5k + 1, 5k + 2, 5k + 3, or 5k + 4.
(b) One of ﬁve consecutive integers is a multiple of 5.
11.81. Prove each of the following statements:
(a) The product of any three consecutive integers is divisible by 6.
(b) The product of any four consecutive integers is divisible by 24.
11.82. Show that each of the following numbers is not rational: (a)
√
3 ; (b) 3√
2.
11.83. Show that √p is not rational, where p is any prime number.

300
PROPERTIES OF THE INTEGERS
[CHAP. 11
DIVISIBILITY, GREATEST COMMON DIVISORS, PRIMES
11.84. Find all possible divisors of:
(a) 24;
(b) 19683 = 39 ;
(c) 432 = 24 · 33.
11.85. List all prime numbers between 100 and 150.
11.86. Express as a product of prime numbers:
(a) 2940;
(b) 1485;
(c) 8712;
(d) 319 410.
11.87. For each pair of integers a and b, ﬁnd d = gcd(a, b) and ﬁnd m and n such that d = ma + nb:
(a) a = 356, b = 48;
(b) a = 1287, b = 165;
(c) a = 2310, b = 168;
(d) a = 195, b = 968;
(e) a = 249, b = 37.
11.88. Find:
(a) lcm(5, 7);
(b) lcm(3, 33);
(c) 1cm (12, 28).
11.89. Suppose a = 5880 and b = 8316. (a) Express a and b as products of primes.
(b) Find gcd(a, b) and lcm(a, b). (c) Verify that lcm(a, b) = |ab|/ gcd(a, b).
11.90. Prove: (a) If a|b, then (i) a| −b, (ii) −a|b, (iii) −a| −b; (b) If ac|bc, then b|c.
11.91. Prove:
(a) If n > 1 is composite, then n has a positive divisor d such that d ≤√n.
(b) If n > 1 is not divisible
by a prime p ≤√n, then n is a prime.
11.92. Prove:
(a) If am + bn = 1, then gcd(a, b) = 1;
(b) If a = bq + r, then gcd(a, b) = gcd(b, r).
11.93. Prove:
(a) gcd(a, a + k) divides k;
(b) gcd(a, a + 2) equals 1 or 2.
11.94. Prove:
(a) If a > 2 and k > 1, then ak −1 is composite.
(b) If n > 0 and 2n −1 is prime, then n is prime.
11.95. Let n be a positive integer. Prove:
(a) 3 divides n if and only if 3 divides the sum of the digits of n.
(b) 9 divides n if and only if 9 divides the sum of the digits of n.
(c) 8 divides n if and only if 8 divides the integer formed by the last three digits of n.
11.96. Extend the deﬁnition of gcd and lcm to any ﬁnite set of integers, that is, for integers a1, a2, . . . , ak, deﬁne:
(a) gcd(a1, a2, . . . , ak);
(b) lcm(a1, a2, . . . , ak).
11.97. Prove: If a1|n, a2|n, . . . , ak|n, then m|n where m = lcm(a1, a2, . . . , ak).
11.98. Prove: There are arbitrarily large gaps between prime numbers, that is, for any positive integer k, there exist k
consecutive composite (nonprime) integers.
CONGRUENCES
11.99. Which of the following are true?
(a) 224 ≡762 (mod 8);
(b) 582 ≡263 (mod 11);
(c) 156 ≡369 (mod 7);
(d) −238 ≡483 (mod 13).
11.100. Find the smallest nonnegative integer which is congruent modulo m = 9 to each of the following numbers:
(a) 457; (b) 1578; (c) −366; (d) −3288. (The integer should be in the set {0, 1, 2, . . . , 7, 8}).
11.101. Find the smallest integer in absolute value which is congruent modulo m = 9 to each of the following numbers:
(a) 511; (b) 1329; (c) −625; (d) −2717. (The integer should be in the set {−4, −3, −2, −1, 0, 1, 2, 3, 4}).
11.102. Find all numbers between 1 and 100 which are congruent to 4 modulo m = 11.
11.103. Find all numbers between −50 and 50 which are congruent to 12 modulo m = 9.
RESIDUE SYSTEMS, EULER PHI FUNCTION φ
11.104. For each modulo m, exhibit two complete residue systems, one consisting of the smallest nonnegative integers, and
the other consisting of the integers with the smallest absolute values: (a) m = 11; (b) m = 14.
11.105. Exhibit a reduced residue system modulo m and ﬁnd φ(m) where: (a) m = 4;
(b) m = 11;
(c) m = 14;
(d) m = 15.
11.106. Exhibit a complete residue system modulo m = 8 consisting entirely of: (a) multiples of 5; (b) powers of 3.
11.107. Show that {12, 22, 32, . . . , m2} is not a complete residue system modulo m for m > 2.
11.108. Find:
(a) φ (10);
(b) φ (12);
(c) φ (15);
(d) φ (37);
(e) φ (56);
(f) φ(24·76·133).

CHAP. 11]
PROPERTIES OF THE INTEGERS
301
11.109. Find the number s of positive integers less than 3200 which are coprime to 8000.
11.110. Consider an arbitrary column in the array S in Fig. 11-7 which consists of the numbers:
k, a + k, 2a + k, 3a + k, . . . , (b −1)a + k
Show that these b integers form a residue system modulo b.
ARITHMETIC MODULO m, Zm
11.111. Exhibit the addition and multiplication tables for: (a) Z2; (b) Z8.
11.112. In. Z13, ﬁnd: (a) −2, −3, −5, −9, −10, −11; (b) 2/9, 4/9, 5/9, 7/9, 8/9.
11.113. In Z17, ﬁnd: (a) −3, −5, −6, −8, −13, −15, −16; (b) 3/8, 5/8, 7/8, 13/8, 15/8.
11.114. Find a−1 in Zm Where: (a) a = 15, m = 127;
(b) a = 61, m = 124;
(c) a = 12, m = 111.
11.115. Find the product f (x)g(x) for the following polynomials over Z5:
f (x) = 4x3 −2x2 + 3x −1, g(x) = 3x2−x−4
CONGRUENCE EQUATIONS
11.116. Solve each congruence equation:
(a) f (x) = 2x3−x2 + 3x + 1 ≡0 (mod 5)
(b) g(x) = 3x4−2x3 + 5x2 + x + 2 ≡0 (mod 7)
(c) h(x) = 45x3 −37x2 + 26x + 312 ≡0 (mod 6)
11.117. Solve each linear congruence equation:
(a) 7x ≡3 (mod 9) ;
(b) 4x ≡6 (mod 14);
(c) 6x ≡4 (mod9).
11.118. Solve each linear congruence equation:
(a) 5x ≡3 (mod 8);
(b) 6x ≡9 (mod 16);
(c) 9x ≡12 (mod 21).
11.119. Solve each linear congruence equation: (a) 37x ≡1 (mod 249);
(b) 195x ≡23 (mod 968).
11.120. Solve each linear congruence equation: (a) 132x ≡169 (mod 735);
(b) 48x ≡284 (mod 356)
11.121. A puppet theater has only 60 seats. The admission to the theater is $2.25 per adult and $1.00 per child. Suppose
$117.25 was collected. Find the number of adults and children attending the performance.
11.122. A boy sells apples for 12 cents each and pears for 7 cents each. Suppose the boy collected $3.21. Find the number
of apples and pears that he sold.
11.123. Find the smallest positive solution of each system of congruence equations:
(a) x ≡2 (mod 3),
x ≡3 (mod 5),
x ≡4 (mod 11)
(b) x ≡3 (mod 5),
x ≡4 (mod 7),
x ≡6 (mod 9)
(c) x ≡5 (mod 45),
x ≡6 (mod 49),
x ≡7 (mod 52)
Answers to Supplementary Problems
11.61. (a) 2 > −6;
(b) −3 > −5;
(c) −7 < 3;
(d) −8 < −1;
(e) 23 < 11;
(f) 23 > −9;
(g) −2 > −7;
(h) 4 > −9
11.62. (a) 4, 4, 10;
(b) 3 + 10 = 13, 3 −7 = −4;
(c) 4 + 1 = 5, 8 −4 = 4.
11.63. (a) 7;
(b) 9;
(c) 6;
(d) 6;
(e) 6;
(f) 2.
11.64. (a) 4, 5, 6;
(b) −2, −1, 0, 1.
11.79. (a) q = −15, r = 13;
(b) q = −24, r = 10.
(c) q = 53, r = 7
11.81. (a) One is divisible by 2 and one is divisible by 3.
(b) One is divisible by 4, another is divisible by 2, and
one is divisible by 3.
11.84. (a) 1, 2, 3, 4, 6, 8, 12, 24; (b) 3n for n = 0 to 9;
(c) 2r3s for r = 0 to 4 and s = 0 to 3.
11.85. 101, 103, 107, 109, 113, 127, 131, 137, 139, 149.
11.86. (a) 2940
=
22·3·5·72;
(b) 1485
=
33·5·11;
(c) 8712 = 23·32·112; (d) 319 410 = 2·33·5·7·132.

302
PROPERTIES OF THE INTEGERS
[CHAP. 11
11.87. (a) d = 4 = 5(356) −37(48);
(b) d = 33 =
8(165) −1(1287);
(c) d
= 42 = 14(168) −
1(2310);
(d) d
=
1
=
139(195) −28(968);
(e) 11(249)−74(37).
11.88. (a) 35;
(b) 33;
(c) 84.
11.89. (a)a = 23·3·5·72, b = 22·33·7·11;
(b)gcd(a, b) =
22 ·3·7, lcm(a, b) = 23 ·33 ·5·72 ·11 = 1, 164, 240.
11.94. (a) Hint: ak−1 = (a−1)(1 + a + a2 + · · · + ak−1);
(b) Hint: If n = ab, then 2n−1 = (2a)b −1.
11.98. (k + 1)! + 2, (k + 1)! + 3, (k + 1)! + 4, . . . ,
(k+ 1)! + (k + 1) are divisible by 2, 3, 4, . . ., k + 1,
respectively.
11.99. (a) False;
(b) true;
(c) false;
(d) false.
11.100. (a) 7;
(b) 3;
(c) 3;
(d) 6.
11.l01. (a) −2;
(b) −3;
(c) −4;
(d) 1.
11.102. 4, 15, 26, 37, 48, 59, 70, 81, 92.
11.103. −42, −33, −24, −15, −6, 3, 12, 21, 30, 39, 48.
11.104. (a) {0, 1, . . . , 10} and {−5, −4, . . . , −1,
0, 1, . . . , 4, 5).
(b) {0, 1, . . . , 13} and {−6, −5, . . . , −1,
0, 1, . . . , 6, 7}.
11.105. (a) {1, 3};
(b) {1, 2, . . . , 10};
(c) {1, 3, 5, 9,
11,13};
(d) {1, 2, 4, 7, 8, 11, 13, 14}.
11.106. (a) {5, l0, 15, 20, 25, 30, 35,40};
(b) {3, 9, 27, 81,
243, 729, 2187, 6561}.
11.107. m −1
≡
−1
(mod m) and so (m −1)2
≡
1 (mod m).
11.108. (a) 4;
(b) 4;
(c) = 8;
(d) 2(36);
(e) 4(55);
(f) (23)(6·75)(12·132)
11.109. φ(8000) = φ(25·52) = 24·4·5 = 320.
Hence
s = 4(320) = 1280.
11.112. (a) 11, 10, 8, 4, 3, 2;
(b) 6, 12, 2, 8, 11.
11.113. (a) 14, 12, 11, 9, 4, 2;
(b) 11, 7, 3, 8, 4.
11.114. (a) 17;
(b) 61;
(c) a−1 does not exist.
11.115. 2x5 + 2x2 −x + 4
11.116. (a) 1, 3, 4;
(b) 2, −2;
(c) 0, 2, 3, −1.
11.117. (a) 3;
(b) 5, 12;
(c) no solution.
11.118. (a) 7;
(b) no solution;
(c) 6, 13, 20.
11.119. (a) 175;
(b) 293.
11.120. (a) No solution;
(b) 43, 132, 221, 310.
11.121. 49 adults, 7 children.
11.122. 25 apples, 3 pears; 18 apples, 15 pears; 11 apples,
27 pears; or 4 apples, 39 pears.
11.123. (a) 158;
(b) 1(123);
(c) 3l 415.

CHAPTER 12
Languages, Automata,
Grammars
12.1
INTRODUCTION
This chapter discusses three topics, languages, automata, and grammars. These three topics are closely
related to each other. Our languages will use the letters a, b, . . . to code data rather than the digits 0 and 1 used
by some other texts.
12.2
ALPHABET, WORDS, FREE SEMIGROUP
Consider a nonempty set A of symbols. A word or string w on the set A is a ﬁnite sequence of its elements.
For example, suppose A = {a, b, c}. Then the following sequences are words on A:
u = ababb
and
v = accbaaa
When discussing words on A, we frequently call A the alphabet, and its elements are called letters. We will also
abbreviate our notation and write a2 for aa, a3 for aaa, and so on. Thus, for the above words, u = abab2 and
v = ac2ba3.
The empty sequence of letters, denoted by l (Greek letter lambda) or ϵ (Greek letter epsilon), or 1, is also
considered to be a word on A, called the empty word. The set of all words on A is denoted by A∗(read: “A star”).
The length of a word u, written |u| or l(u), is the number of elements in its sequence of letters. For the
above words u and v, we have l(u) = 5 and l(v) = 7. Also, l(l) = 0, where l is the empty word.
Remark: Unless otherwise stated, the alphabet A will be ﬁnite, the symbols u, v, w will be reserved for words
on A, and the elements of A will come from the letters a, b, c.
Concatenation
Consider two words u and v on the alphabet A. The concatenation of u and v, written uv, is the word
obtained by writing down the letters of u followed by the letters of v. For example, for the above words u and v,
we have
uv = ababbaccbaaa = abab2 ac2 ba3
As with letters, for any word u, we deﬁne u2 = uu, u3 = uuu, and, in general, un+1 = uun.
303
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

304
LANGUAGES, AUTOMATA, GRAMMARS
[CHAP. 12
Clearly, for any words u, v, w, the words (uv)w and u(vw) are identical, they simply consist of the letters
of u, v, w written down one after the other. Also, adjoining the empty word before or after a word u does not
change the word u. That is:
Theorem 12.1: The concatenation operation for words on an alphabet A is associative. The empty word l is an
identity element for the operation.
(Generally speaking, the operation is not commutative, e.g., uv ̸= vu for the above words u and v.)
Subwords, Initial Segments
Consider any word u = a1a2 . . . an on an alphabet A. Any sequence w = ajaj+1 . . . ak is called a subword
of u. In particular, the subword w = a1a2 . . . ak beginning with the ﬁrst letter of u, is called an initial segment
of u. In other words, w is a subword of u if u = v1wv2 and w is an initial segment of u if u = wv. Observe that
l and u are both subwords of uv since u = lu.
Consider the word u = abca. The subwords and initial segments of u follow:
(1) Subwords: l, a, b, c, ab, bc, ca, abc, bca, abca = u
(2) Initial segments: l, a, ab, abc, abca = u.
Observe that the subword w = a appears in two places in u. The word ac is not a subword of u even though all
its letters belong to u.
Free Semigroup, Free Monoid
Let F denote the set of all nonempty words from an alphabet A with the operation of concatenation. As
noted above, the operation is associative. Thus F is a semigroup; it is called the free semigroup over A or the free
semigroup generated by A. One can easily show that F satisﬁes the right and left cancellation laws. However,
F is not commutative when A has more than one element. We will write FA for the free semigroup over A when
we want to specify the set A.
Now let M = A* be the set of all words from A including the empty word l. Since l is an identity element
for the operation of concatenation, M is a monoid, called the free monoid over A.
12.3
LANGUAGES
A language L over an alphabet A is a collection of words on A. Recall that A* denotes the set of all words
on A. Thus a language L is simply a subset of A*.
EXAMPLE 12.1 Let A = {a, b}. The following are languages over A.
(a) L1 = {a, ab, ab2, . . .}
(c) L3 = {ambm | m > 0}
(b) L2 = {ambn | m > 0, n > 0}
(d) L4 = bmabn | m ≥0, n ≥0}
One may verbally describe these languages as follows.
(a) L1 consists of all words beginning with an a and followed by zero or more b’s.
(b) L2 consists of all words beginning with one or more as followed by one or more b’s.
(c) L3 consists of all words beginning with one or more as and followed by the same number of b’s.
(d) L4 consists of all words with exactly one a.

CHAP. 12]
LANGUAGES, AUTOMATA, GRAMMARS
305
Operations on Languages
Suppose L and M are languages over an alphabet A. Then the “concatenation” of L and M, denoted by LM,
is the language deﬁned as follows:
LM = {uv | u ∈L, v ∈V }
That is, LM denotes the set of all words which come from the concatenation of a word from L with a word
from M. For example, suppose
L1 = {a, b2},
L2 = {a2, ab, b3},
L3 = {a2, a4, a6, . . .}
Then:
L1L1 = {a2, ab2, b2a, b4},
L1L2 = {a3, a2b, ab3, b2a2, b2ab, b5}
L1L3 = {a3, a5, a7, . . . , b2a2, b2a4, b2a6, . . .}
Clearly, the concatenation of languages is associative since the concatenation of words is associative.
Powers of a language L are deﬁned as follows:
L0 = {l},
L1 = L,
L2 = LL,
Lm+1 = LmL
for
m > 1.
The unary operation L * (read “L star”) of a language L, called the Kleene closure of L because Kleene proved
Theorem 12.2, is deﬁned as the inﬁnite union:
L∗= L0 ∪L1 ∪L2 ∪· · · =
∞

k=0
Lk
The deﬁnition of L* agrees with the notation A* which consists of all words over A. Some texts deﬁne L+ to be
the union of L1, L2, . . . that is, L+ is the same as L* but without the empty word λ.
12.4
REGULAR EXPRESSIONS, REGULAR LANGUAGES
Let A be a (nonempty) alphabet. This section deﬁnes a regular expression r over A and a language L(r) over
A associated with the regular expression r. The expression r and its corresponding language L(r) are deﬁned
inductively as follows.
Deﬁnition 12.1: Each of the following is a regular expression over an alphabet A.
(1) The symbol “l” (empty word) and the pair “( )” (empty expression) are regular expressions.
(2) Each letter a in A is a regular expression.
(3) If r is a regular expression, then (r∗) is a regular expression.
(4) If r1 and r2 are regular expressions, then (r1 ∨r2) is a regular expression.
(5) If r1 and r2 are regular expressions, then (r1r2) is a regular expression.
All regular expressions are formed in this way.
Observe that a regular expression r is a special kind of a word (string) which uses the letters of A and the
ﬁve symbols:
(
)
∗
∨
l
We emphasize that no other symbols are used for regular expressions.
Deﬁnition 12.2: The language L(r) over A deﬁned by a regular expression r over A is as follows:
(1) L(l) = {l} and L(( )) = , the empty set.
(2) L(a) = {a}, where a is a letter in A.

306
LANGUAGES, AUTOMATA, GRAMMARS
[CHAP. 12
(3) L(r∗) = (L(r))* (the Kleene closure of L(r)).
(4) L(r1 ∨r2) = L(r1) ∪L(r2) (the union of the languages).
(5) L(r1r2) = L(r1)L(r2) (the concatenation of the languages).
Remark: Parentheses will be omitted from regular expressions when possible. Since the concatenation of
languages and the union of languages are associative, many of the parentheses may be omitted. Also, by adopting
the convention that “*” takes precedence over concatenation, and concatenation takes precedence over “∨,” other
parentheses may be omitted.
Deﬁnition 12.3: Let L be a language over A. Then L is called a regular language over A if there exists a regular
expression r over A such that L = L(r).
EXAMPLE 12.2 Let A = {a, b}. Each of the following is an expression r and its corresponding language L(r):
(a) Let r = a*. Then L(r) consists of all powers of a including the empty word l.
(b) Let r = aa*. Then L(r) consists of all positive powers of a excluding the empty word.
(c) Let r = a ∨b∗. Then L(r) consists of a or any word in b, that is, L(r) = {a, l, b, b2, · · · }.
(d) Let r = (a ∨b)∗. Note L(a ∨b) = {a} ∪{b} = A; hence L(r) = A∗, all words over A.
(e) Let r = (a ∨b)∗bb. Then L(r) consists of the concatenation of any word in A with bb, that is, all words
ending in b2.
(f) Let r = a ∧b∗. L(r) does not exist since r is not a regular expression. (Speciﬁcally, ∧is not one of the
symbols used for regular expressions.)
EXAMPLE 12.3 Consider the following languages over A = {a, b}:
(a) L1 = {ambn | m > 0, n > 0};
(b) L2 = {bmabn | m > 0, n > 0};
(c) L3 = {ambm | m > 0}.
Find a regular expression r over A = {a, b} such that Li = L(r) for i = 1, 2, 3.
(a) L1 consists of those words beginning with one or more a’s followed by one or more b’s. Thus we can set
r = aa∗bb∗. Note that r is not unique; for example, r = a∗abb∗is another solution.
(b) L2 consists of all words which begin with one or more b’s followed by a single a which is then followed
by one or more b’s, that is, all words with exactly one a which is neither the ﬁrst nor the last letter. Hence
r = bb∗abb∗is a solution.
(c) L3 consists of all words beginning with one or more a’s followed by the same number of b’s. There exists
no regular expression r such that L3 = L(r); that is, L3 is not a regular language. The proof of this fact
appears in Example 12.8.
12.5
FINITE STATE AUTOMATA
A ﬁnite state automaton (FSA) or, simply, an automaton M, consists of ﬁve parts:
(1) A ﬁnite set (alphabet) A of inputs.
(2) A ﬁnite set S of (internal) states.
(3) A subset Y of S (called accepting or “yes” states).
(4) An initial state s0 in S.
(5) A next-state function F from S × A into S.

CHAP. 12]
LANGUAGES, AUTOMATA, GRAMMARS
307
Such an automaton M is denoted by M = (A, S, Y, s0, F) when we want to indicate its ﬁve parts. (The
plural of automaton is automata.)
Some texts deﬁne the next-state function F : S × A →S in (5) by means of a collection of functions
fa : S →S, one for each a ∈A. Setting F(s, a) = fa(s) shows that both deﬁnitions are equivalent.
EXAMPLE 12.4 The following deﬁnes an automaton M with two input symbols and three states:
(1) A = {a, b}, input symbols.
(2) S = {s0, s1, s2}, internal states.
(3) Y = {s0, s1}, “yes” states.
(4) s0, initial state.
(5) Next-state function F : S × A →S deﬁned explicitly in Fig. 12-1(a) or by the table in Fig. 12-1(b).
Fig. 12-1
State Diagram of an Automaton M
An automaton M is usually deﬁned by means of its state diagram D = D(M) rather than by listing its ﬁve
parts. The state diagram D = D(M) is a labeled directed graph as follows.
(1) The vertices of D(M) are the states in S and an accepting state is denoted by means of a double circle.
(2) There is an arrow (directed edge) in D(M) from state sj to state sk labeled by an input a if F(sj, a) = sk or,
equivalently, if fa(sj) = sk.
(3) The initial state s0 is indicated by means of a special arrow which terminates at s0 but has no initial vertex.
For each vertex sj and each letter a in the alphabet A, there will be an arrow leaving sj which is labeled
by a; hence the outdegree of each vertex is equal to number of elements in A. For notational convenience, we
label a single arrow by all the inputs which cause the same change of state rather than having an arrow for each
such input.
The state diagram D = D(M) of the automaton M in Example 12.4 appears in Fig. 12-2. Note that both a
and b label the arrow from s2 to s2 since F(s2, a) = s2 and F(s2, b) = s2. Note also that the outdegree of each
vertex is 2, the number of elements in A.

308
LANGUAGES, AUTOMATA, GRAMMARS
[CHAP. 12
Fig. 12-2
Language L(M) Determined by an Automaton M
Each automaton M with input alphabet A deﬁnes a language over A, denoted by L(M), as follows.
Let w = a1a2 · · · am be a word on A. Then w determines the following path in the state diagram graph
D(M) where s0 is the initial state and F(si−1, ai) = si for i ≥1:
P = (s0, a1, s1, a2, s2, · · · , am, sm)
We say that M recognizes the word w if the ﬁnal state sm is an accepting state in Y. The language L(M) of M is
the collection of all words from A which are accepted by M.
EXAMPLE 12.5 Determine whether or not the automaton M in Fig. 12-2 accepts the words:
w1 = ababba;
w2 = baab;
w3 = l the empty word.
Use Fig. 12-2 and the words w1 and w2 to obtain the following respective paths:
P1 = s0
a→s0
b→s1
a→s0
b→s1
b→s2
a→s2
and
P2 = s0
b→s1
a→s0
a→s0
b→s1
The ﬁnal state in P1 is s2 which is not in Y; hence w1 is not accepted by M. On the other hand, the ﬁnal state in
P2 is s1 which is in Y; hence w2 is accepted by M. The ﬁnal state determined by w3 is the initial state s0 since
w3 = l is the empty word. Thus w3 is accepted by M since s0 ∈Y.
EXAMPLE 12.6 Describe the language L(M) of the automaton M in Fig. 12-2.
L(M) will consist of all words w on A which do not have two successive b’s. This comes from the following
facts:
(1) We can enter the state s2 if and only if there are two successive b’s.
(2) We can never leave s2.
(3) The state s2 is the only rejecting (nonaccepting) state.
The fundamental relationship between regular languages and automata is contained in the following theorem
(whose proof lies beyond the scope of this text).
Theorem 12.2 (Kleene): Alanguage L over an alphabet A is regular if and only if there is a ﬁnite state automaton
M such that L = L(M).
The star operation L* on a language L is sometimes called the Kleene closure of L since Kleene ﬁrst proved
the above basic result.
EXAMPLE 12.7 Let A = {a, b}. Construct an automaton M which will accept precisely those words from A
which end in two b’s.

CHAP. 12]
LANGUAGES, AUTOMATA, GRAMMARS
309
Fig. 12-3
Since b2 is accepted, but not l or b, we need three states, s0, the initial state, and s1 and s2 with an arrow
labeled b going from s0 to s1 and one from s1 to s2. Also, s2 is an accepting state, but not s0 nor s1. This gives
the graph in Fig. 12-3(a). On the other hand, if there is an a, then we want to go back to s0, and if we are in s2
and there is a b, then we want to stay in s2. These additional conditions give the required automaton M which is
shown in Fig. 12-3(b).
Pumping Lemma
Let M be an automaton over A with k states. Suppose w = a1a2 · · · an is a word over A accepted by M and
suppose |w| = n > k, the number of states. Let
P = (s0, s1, . . ., sn)
be the corresponding sequence of states determined by the word w. Since n > k, two of the states in P must be
equal, say si = sj where i < j. Let w be divided into subwords x, y, z as follows:
x = a1a2 · · · ai,
y = ai+1 · · · aj,
z = aj+1 · · · an
As shown in Fig. 12-4, xy ends in si = sj; hence xym also ends in si. Thus, for every m, wm = xymz ends
in sn, which is an accepting state.
Fig. 12-4
The above discussion proves the following important result.
Theorem 12.3 (Pumping Lemma): Suppose M is an automaton over A such that:
(i) M has k states. (ii) M accepts a word w from A where |w| > k.
Then w = xyz where, for every positive m, wm = xymz is accepted by M.
The next example gives an application of the Pumping Lemma.
EXAMPLE 12.8 Show that the language L = {ambm | m is positive} is not regular.
Suppose L is regular. Then, by Theorem 12.2, there exists a ﬁnite state automaton M which accepts L.
Suppose M has k states. Let w = akbk. Then |w| > k. By the Pumping Lemma (Theorem 12.3), w = xyz
where y is not empty and w2 = xy2z is also accepted by M. If y consists of only a’s or only b’s, then w2 will not
have the same number of a’s as b’s. If y contains both a’s and b’s, then w2 will have a’s following b’s. In either
case w2 does not belong to L, which is a contradiction. Thus L is not regular.

310
LANGUAGES, AUTOMATA, GRAMMARS
[CHAP. 12
12.6
GRAMMARS
Figure 12-5 shows the grammatical construction of a speciﬁc sentence. Observe that there are:
(1) various variables, e.g., (sentence), (noun phrase), · · · ;
(2) various terminal words, e.g., “The”, “boy,” · · · ;
(3) a beginning variable (sentence);
(4) various substitutions or productions, e.g.
⟨sentence⟩
→
⟨noun phrase⟩⟨verb phrase⟩
⟨object phrase⟩
→
⟨article⟩⟨noun⟩
⟨noun⟩
→
apple
The ﬁnal sentence only contains terminals, although both variables and terminals appear in its construction by the
productions. This intuitive description is given in order to motivate the following deﬁnition of a grammar and
the language it generates.
Fig. 12-5
Deﬁnition 12.4: A phrase structure grammar or, simply, a grammar G consists of four parts:
(1) A ﬁnite set (vocabulary) V .
(2) A subset T of V whose elements are called terminals; the elements of N = V \T are called non-terminals
or variables.
(3) A nonterminal symbol S called the start symbol.
(4) A ﬁnite set P of productions. (A production is an ordered pair (α, β), usually written α →β, where α and
β are words in V , and the production must contain at least one nonterminal on its left side α.)
Such a grammar G is denoted by G = G(V, T, S, P) when we want to indicate its four parts.
The following notation, unless otherwise stated or implied, will be used for our grammars. Terminals will
be denoted by italic lower case Latin letters, a, b, c, · · · , and nonterminals will be denoted by italic capital Latin
letters, A, B, C, · · · , with S as the start symbol. Also, Greek letters, α, β, · · · , will denote words in V , that is,
words in terminals and nonterminals. Furthermore, we will write
α →(β1, β2, · · ·, βk)
instead of
α →β1, α →β2, · · ·, α →βk
Remark: Frequently, we will deﬁne a grammar G by only giving its productions, assuming implicitly that S
is the start symbol and that the terminals and nonterminals of G are only those appearing in the productions.

CHAP. 12]
LANGUAGES, AUTOMATA, GRAMMARS
311
EXAMPLE 12.9 The following deﬁnes a grammar G with S as the start symbol:
V = {A, B, S, a, b},
T = {a, b},
P = {S
1→AB, A
2→Aa, B
3→Bb, A
4→a, B
5→b}
The productions may be abbreviated as follows: S →AB, A →(Aa, a), B →(Bb, b)
Language L(G) of a Grammar G
Suppose w and w′ are words over the vocabulary set V of a grammar G. We write
w ⇒w′
if w′ can be obtained from w by using one of the productions; that is, if there exists words u and v such that
w = uαv and w′ = uβv and there is a production α →β. Furthermore, we write
w ⇒⇒w′
or
w ∗⇒w′
if w′ can be obtained from w using a ﬁnite number of productions.
Now let G be a grammar with terminal set T . The language of G, denoted by L(G), consists of all words in
T that can be obtained from the start symbol S by the above process; that is,
L(G) = {w ∈T ∗| S ⇒⇒w}
EXAMPLE 12.10 Consider the grammar G in Example 12.9. Observe that w = a2b4 can be obtained from
the start symbol S as follows:
S ⇒AB ⇒AaB ⇒aaB ⇒aaBb ⇒aaBbb ⇒aaBbbb ⇒aabbbb = a2b4
Here we used the productions 1, 2, 4, 3, 3, 3, 5, respectively. Thus we can write S ⇒⇒a2b4. Hence w = a2b4
belongs to L(G). More generally, the production sequence:
1, 2 (r times), 4, 3 (s times), 5
will produce the word w = arabsb where r and s are nonnegative integers. On the other hand, no sequence of
productions can produce an a after a b. Accordingly,
L(G) = {ambn | m and n are positive integers}
That is, the language L(G) of the grammar G consists of all words which begin with one or more a’s followed
by one or more b’s.
EXAMPLE 12.11 Find the language L(G) over {a, b, c} generated by the grammar G:
S →aSb,
aS →Aa,
Aab →c
First we must apply the ﬁrst production one or more times to obtain the word w = anSbn where n > 0. To
eliminate S, we must apply the second production to obtain the word w′ = amAabbm where m = n −1 ≥0.
Now we can only apply the third production to ﬁnally obtain the word w′ = amcbm where m ≥0. Accordingly,
L(G) = {amcbm | m nonnegative}
That is, L(G) consists of all words with the same nonnegative number of a’s and b’s separated by a c.

312
LANGUAGES, AUTOMATA, GRAMMARS
[CHAP. 12
Types of Grammars
Grammars are classiﬁed according to the kinds of production which are allowed. The following grammar
classiﬁcation is due to Noam Chomsky.
A Type 0 grammar has no restrictions on its productions. Types 1, 2, and 3 are deﬁned as follows:
(1) A grammar G is said to be of Type 1 if every production is of the form α →β where |α| ≤|β| or of the
form α →l.
(2) A grammar G is said to be of Type 2 if every production is of the form A →β where the left side A is a
nonterminal.
(3) A grammar G is said to be of Type 3 if every production is of the form A →a or A →aB, that is, where
the left side A is a single nonterminal and the right side is a single terminal or a terminal followed by a
nonterminal, or of the form S →l.
Observe that the grammars form a hierarchy; that is, every Type 3 grammar is a Type 2 grammar, every Type
2 grammar is a Type 1 grammar, and every Type 1 grammar is a Type 0 grammar.
Grammars are also classiﬁed in terms of context-sensitive, context-free, and regular as follows.
(a) A grammar G is said to be context-sensitive if the productions are of the form
αAα′ →αβα′
The name “context-sensitive” comes from the fact that we can replace the variable A by β in a word only
when A lies between α and α′.
(b) A grammar G is said to be context-free if the productions are of the form
A →β
The name “context-free” comes from the fact that we can now replace the variable A by β regardless of
where A appears.
(c) A grammar G is said to be regular if the productions are of the form
A →a,
A →aB,
S →l
Observe that a context-free grammar is the same as a Type 2 grammar, and a regular grammar is the same as a
Type 3 grammar.
A fundamental relationship between regular grammars and ﬁnite automata follows.
Theorem 12.4: A language L can be generated by a Type 3 (regular) grammar G, if and only if there exists a
ﬁnite automaton M which accepts L .
Thus a language L is regular iff L = L(r) where r is a regular expression iff L = L(M) where M is a ﬁnite
automaton iff L = L(G) where G is a regular grammar. (Recall that “iff” is an abbreviation for “if and only if.”)
EXAMPLE 12.12 Consider the language L = {anbn | n > 0}.
(a) Find a context-free grammar G which generates L.
Clearly the grammar G with the following productions will generate L:
S →ab,
S →aSb
Note that G is context-free
(b) Find a regular grammar G which generates L.
By Example 12.8, L is not a regular language. Thus L cannot be generated by a regular grammar.

CHAP. 12]
LANGUAGES, AUTOMATA, GRAMMARS
313
Derivation Trees of Context-Free Grammars
Consider a context-free (Type 2) grammar G. Any derivation of a word w in L(G) can be represented
graphically by means of an ordered, rooted tree T , called a derivation tree or parse tree. We illustrate such a
derivation tree below.
Let G be the context-free grammar with the following productions:
S →aAB,
A →Bba,
B →bB,
B →c
The word w = acbabc can be derived from S as follows:
S ⇒aAB ⇒a(Bba)B ⇒acbaB ⇒acba(bB) ⇒acbabc
One can draw a derivation tree T of the word w as indicated by Fig. 12-6. Speciﬁcally, we begin with S as the
root and then add branches to the tree according to the production used in the derivation of w. This yields the
completed tree T which is shown in Fig. 12-6(e). The sequence of leaves from left to right in T is the derived
word w. Also, any non-leaf in T is a variable, say A, and the immediate successors (children) of A form a word
α where A →α is the production of G used in the derivation of w.
Fig. 12-6
Backus-Naur Form
There is another notation, called the Backus-Naur form, which is sometimes used for describing the produc-
tions of a context-free (Type 2) grammar. Speciﬁcally:
(i) “::=” is used instead of “→.”
(ii) Every nonterminal is enclosed in brackets ⟨⟩.
(iii) All productions with the same nonterminal left-hand side are combined into one statement with all the
right-hand sides listed on the right of :: = separated by vertical bars.
For instance, the productions A →aB, A →b, A →BC are combined into the one statement:
⟨A⟩:: = a ⟨B⟩|b| ⟨B⟩⟨C⟩

314
LANGUAGES, AUTOMATA, GRAMMARS
[CHAP. 12
Machines and Grammars
Theorem 12.4 tells us that the regular languages correspond to the ﬁnite state automata (FSA). There are also
machines, more powerful than the FSA, which correspond to the other grammars.
(a) Pushdown Automata: A pushdown automaton P is similar to a FSA except that P has an auxiliary stack
which provides an unlimited amount of memory for P. Alanguage L is recognized by a pushdown automaton
P if and only if L is context-free.
(b) Linear Bounded Automata: A linear bounded automaton B is more powerful than a pushdown automaton.
Such an automaton B uses a tape which is linearly bounded by the length of the input word w. A language
L is recognized by a linear bounded automaton B if and only if L is context-sensitive.
(c) Turing Machine: ATuring machine M, named after the British mathematician Alan Turing, uses an inﬁnite
tape; it is able to recognize every language L that can be generated by any phase-structure grammar G.
In fact, a Turing machine M is one of a number of equivalent ways to deﬁne the notion of a “computable”
function.
The discussion of the pushdown automata and the linear bounded automata lies beyond the scope of this text.
We will discuss Turing machines in Chapter 13.
Solved Problems
WORDS
12.1. Consider the words u = a2ba3b2 and v = bab2. Find:
(a) uv; |uv|;
(b) vu, |vu|;
(c) v2, |v2|.
Write the letters of the ﬁrst word followed by the letters of the second word, and then count the number of letters
in the resulting word.
(a) uv = (a2ba3b2)(bab2) = a2ba3b3ab2; |uv| = 12
(b) vu = (bab2)(a2ba3b2) = bab2a2ba3b2; |vu| = 12
(c) v2 = vv = (bab2)(bab2) = bab3ab2; |v2| = 8
12.2. Suppose u = a2b and v = b3ab. Find: (a) uvu;
(b) lu, ul, ulv.
(a) Write down the letters in u, then v, and ﬁnally u to obtain uvu = a2b4aba2b.
(b) Since l is the empty word, lu = ul = u = a2b and ulv = uv = a2b4ab.
12.3. Let w = abcd. (a) Find all subwords of w. (b) Which of them are initial segments?
(a) The subwords are: l, a, b, c, d, ab, bc, cd, abc, bcd, w = abcd. (We emphasize that v = acd is not a subword
of w even though all its letters belong to w.)
(b) The initial segments are l, a, ab, abc, w = abcd.
12.4. For any words u and v, show that: (a) |uv| = |u| + |v|;
(b) |uv| = |vu|.
(a) Suppose |u| = r and |v| = s. Then uv will consist of the r letters of u followed by the s letters of v; hence
|uv| = r + s = |u| + |v|.
(b) Using (a) yields |uv| = |u| + |v| = |v| + |u| = |vu|.
12.5. State the difference between the free semigroup on an alphabet A and the free monoid on A.
The free semigroup on A is the set of all nonempty words in A under the operation of concatenation; it does not
include the empty word l. On the other hand, the free monoid on A does include the empty word λ.

CHAP. 12]
LANGUAGES, AUTOMATA, GRAMMARS
315
LANGUAGES
12.6. Let A = {a, b}. Describe verbally the following languages over A (which are subsets of A*):
(a) L1 = {(ab)m |m > 0}; (b) L2 = {arbasbat | r, s, t ≥0}; (c) L3 = {a2bma3 | m > 0}.
(a) L1 consists of words w = ababab · · · ab, that is, beginning with a, alternating with b, and ending with b.
(b) L2 consists of all words with exactly two b’s.
(c) L3 consists of all words beginning with a2 and ending with a3 with one or more b’s between them.
12.7. Let K = {a, ab, a2} and L = {b2, aba} be languages over A = {a, b}. Find: (a) KL; (b) LL.
(a) Concatenate words in K with words in L to obtain KL = {ab2, a2ba, ab3, ababa, a2b2, a3ba}.
(b) Concatenate words in L with words in L to obtain LL = {b4, b2aba, abab2, aba2ba}.
12.8. Consider the language L = {ab, c} over A = {a, b, c}. Find: (a) L0; (b) L3; (c) L−2.
(a) L0 = {l}, by deﬁnition.
(b) Form all three-word sequences from L to obtain:
L3 = {ababab, ababc, abcab, abc2, cabab, cabc, c2ab, c3}
(c) The negative power of a language is not deﬁned.
12.9. Let A = {a, b, c}. Find L∗where: (a) L = {b2};
(b) L = {a, b};
(c) L = {a, b, c3}.
(a) L∗consists of all words bn where n is even (including the empty word l).
(b) L∗consists of words in a and b.
(c) L∗consists of all words from A with the property that the length of each maximal subword composed entirely of
c’s is divisible by 3.
12.10. Consider a countable alphabet A = {a1, a2, . . .}. Let Lk be the language over A consisting of those words
w such that the sum of the subscripts of the letters in w is equal to k. (For example, w = a2a3a3a6a4
belongs to L18.)
(a) Find L4.
(b) Show that Lk is ﬁnite.
(c) Show that A* is countable.
(d) Show
that any language over A is countable.
(a) No word in L4 can have more than four letters, and no letter an with n > 4 can be used.
Thus we obtain the following list:
a1a1a1a1,
a1a1a2,
a1a2a1,
a2a1a1,
a1a3,
a3a1,
a2a2,
a4
(b) Only a ﬁnite number of the a’s, that is, a1, a2, . . ., ak, can be used in Lk and no word in Lk can have
more than k letters. Thus Lk is ﬁnite.
(c) A* is the countable union of the ﬁnite sets Lk; hence A* is countable.
(d) L is a subset of the countable set A*; hence L is also countable.
REGULAR EXPRESSIONS, REGULAR LANGUAGES
12.11. Let A = {a, b}. Describe the language L(r) where:
(a) r = abb∗a;
(b) r = b∗ab∗ab∗;
(c) r = a∗∨b∗;
(d) r = ab∗∧a∗.
(a) L(r) consists of all words beginning and ending in a and enclosing one or more b’s.
(b) L(r) consists of all words with exactly two a’s.
(c) L(r) consists of all words only in a or only in b, that is, L(r) = {l, a, a2, · · · , b, b2, · · · }
(d) Here r is not a regular expression since ∧is not one of the symbols used in forming regular expressions.

316
LANGUAGES, AUTOMATA, GRAMMARS
[CHAP. 12
12.12. Let A = {a, b, c} and let w = abc. State whether or not w belongs to L(r) where:
(a) r = a∗∨(b ∨c)∗;
(b) r = a∗(b ∨c)∗.
(a) No. Here L(r) consists of word in a or words in b and c.
(b) Yes, since a ∈L(a)∗and bc ∈(b ∨c)∗.
12.13. Let A = {a, b}. Find a regular expression r such that L(r) consists of all words w where:
(a) w begins with a2 and ends with b2;
(b) w contains an even number of a’s.
(a Let r = a2(a ∨b)∗b2. (Note (a ∨b)∗consists of all words on A.)
(b) Note s = b∗ab∗ab∗consists of all words with exactly two a’s. Then let r = s∗= (b∗ab∗ab∗)∗.
FINITE AUTOMATA
12.14. Let M be the automaton with the following input set A, state set S with initial state s0, and accepting
(“yes”) state set Y:
A = {a, b},
S = {s0, s1, s2},
Y = {s2}
Suppose next state function F of M is given by the table in Fig. 12-7(a).
(a) Draw the state diagram D = D(M) of M.
(b) Describe the language L = L(M) accepted by M.
(a) The state diagram D appears in Fig. 12.7(b). The vertices of D are the states, and a double circle indicates an
accepting state. If F(sj, x) = sk, then there is a directed edge from sj to sk labeled by the input symbol x. Also,
there is a special arrow which terminates at the initial state s0.
(b) L(M) consists of all words w with exactly one b. Speciﬁcally, if an input word w has no b’s, then it terminates in
s0 and if w has two or more b’s then it terminates in s2. Otherwise w terminates in s1, which is the only accepting
state.
Fig. 12-7
12.15. Let A = {a, b}. Construct an automaton M which will accept precisely those words from A which have
an even number of a’s. For example, aababbab, aa, bbb, ababaa will be accepted by M, but ababa, aaa,
bbabb will be rejected by M.
We need only two states, s0 and s1. We assume that M is in state s0 or s1 according as the number of a’s up to
the given step is even or odd. (Thus s0 is an accepting state, but s1 is a rejecting state.) Then only a will change the
state. Also, s0 is the initial state. The state diagram of M is shown in Fig. 12-8(a).
12.16. Let A = {a, b}. Construct an automaton M which will accept those words from A which begin with an
a followed by (zero or more) b’s.
The automaton M appears in Fig. 12-8(b).

CHAP. 12]
LANGUAGES, AUTOMATA, GRAMMARS
317
Fig. 12-8
12.17. Describe the words w in the language L accepted by the automaton M in Fig. 12-9(a).
The system can reach the accepting state s2 only when there exists an a in w which follows a b.
Fig. 12-9
12.18. Describe the words w in the language L accepted by the automaton M in Fig. 12-9(b).
Each a in w does not change the state of the system, whereas each b in w changes the state from Ri, to si+1
(modulo 4). Thus w is accepted by M if the number n of b’s in w is congruent to 3 modulo 4, that is, where
n = 3, 7, 11, · · · .
12.19. Suppose L is a language over A which is accepted by the automaton M = (A, S, Y, s0, F). Find an
automaton N which accepts LC, that is, those words from A which do not belong to L.
Simply interchange the accepting and rejecting states in M to obtain N. Then w will be accepted in the new machine
N if and only if w is rejected in M, that is, if and only if w belongs to LC. Formally, N = (A, S, S\Y, s0, F).
12.20. Let M = (A, S, Y, s0, F) and M′ = (A, S′, Y ′, S′
0, F ′) be automata over the same alphabet A which
accept the languages L(M) and L(M′) over A, respectively. Construct an automaton N over A which
accepts precisely L(M) ∩L(M′).
Let S × S′ be the set of states of N. Let (s, s′) be an accepting state of N if both s and s′ are accepting states in M
and M′, respectively. Let (s0, s′
0) be the initial state of N. Let the next-state function of N, G : (S×S′)×A →(S×S′),
be deﬁned by:
G((s, s′), a) = (F(s, a), F ′(s′, a))
Then N will accept precisely those words in L(M) ∩L(M′).

318
LANGUAGES, AUTOMATA, GRAMMARS
[CHAP. 12
12.21. Repeat Problem 12.20 except now let N accept precisely L(M) ∪L(M′).
Again, let S × S′ be the set of states of N and let (s0, s0) be the initial state of N. Now let (S × Y ′) ∪(Y × S′) be
the accepting states in N. The next-state function G is again deﬁned by
G((s, s′), a) = (F(s, a), F ′(s′, a))
Then N will accept precisely those words in L(M) ∪L(M′).
GRAMMARS
12.22. Deﬁne: (a) context-free grammar; (b) regular grammar.
(a) A context-free grammar is the same as a Type 2 grammar, that is, every production is of the form A →β, that
is, the left side is a single variable and the right side is a word in one or more symbols.
(b) A regular grammar is the same as a Type 3 grammar, that is, every production is of the form A →a or of the
form A →aB, that is, the left side is a single variable and the right side is either a single terminal or a terminal
followed by a variable.
12.23. Find the language L(G) generated by the grammar G with variables S, A, B, terminals a, b, and produc-
tions S →aB, B →b, B →bA, A →aB.
Observe that we can only use the ﬁrst production once since the start symbol S does not appear anywhere else.
Also, we can only obtain a terminal word by ﬁnally using the second production. Otherwise we alternately add a’s
and b’s using the third and fourth productions. Accordingly,
L(G) = {(ab)n = ababab · · · ab | n ∈N }
12.24. Let L be the language on A = {a, b} which consists of all words w with exactly one b, that is,
L = {b, arb, bas, arbas | r > 0, s > 0}
(a) Find a regular expression r such that L = L(r).
(b) Find a regular grammar G which generates the language L.
(a) Let r = a∗ba∗. Then L(r) = L.
(b) The regular grammar G with the following productions generates L:
S →(b, aA),
A →(b, aA, bB), B →(a, aB)
That is, the letter b can only appear once in any word derived from S. G is regular since it has the required form.
12.25. Let G be the regular grammar with productions: S →aA, A →aB, B →bB, B →A.
(a) Find the derivation tree of the word w = aaba.
(b) Describe all words w in the language L generated by G.
(a) Note ﬁrst that w can be derived from S as follows:
S ⇒aA ⇒a(aB) ⇒aa(bB) ⇒aaba
Figure 12-10(a) shows the corresponding derivation tree.
(b) Using the production 1, then 2, then 3, r times, and ﬁnally 4 will derive the word w = aabr a where r ≥0.
No other word can be derived from S.
12.26. Figure 12-10(b) is the derivation tree of a word w in the language L of a context-free grammar G.
(a) Find w. (b) Which terminals, variables, and productions must lie in G?
(a) The sequence of leaves from left to right yields the word w = ababbbba.

CHAP. 12]
LANGUAGES, AUTOMATA, GRAMMARS
319
Fig. 12-10
(b) The leaves show that a and b must be terminals, and the internal vertices show that S and A must be variables
with S the starting variable. The children of each variable show that S →AbS, A →aS, S →ba, and A →b
must be productions.
12.27. Does a derivation tree exist for any word w derived from the start symbol S in a grammar G?
No. Derivation trees only exist for Type 2 and 3 grammars, that is, for context-free and regular grammars.
12.28. Determine the type of grammar G which consists of the following productions:
(a) S →aA, A →aAB, B →b, A →a
(b) S →aAB, AB →bB, B →b, A →aB
(c) S →aAB, AB →a, A →b, B →AB
(d) S →aB, B →bA, B →b, B →a, A →aB, A →a
(a) Each production is of the form A →α; hence G is a context-free or Type 2 grammar.
(b) The length of the left side of each production does not exceed the length of the right side; hence G is a Type 1
grammar.
(c) The production AB →a means G is a Type 0 grammar.
(d) G is a regular or Type 3 grammar since each production has the form A →a or A →aB.
12.29. Rewrite each grammar G in Problem 12.28 in Backus-Naur form.
The Backus-Naur form only applies to context-free grammars (which includes regular grammars). Thus only (a)
and (d) can be written in Backus-Naur form. The form is obtained as follows:
(i) Replace →by :: =.
(ii) Enclose nonterminals in brackets ⟨⟩.
(iii) All productions with the same left-hand side are combined in one statement with all the right-hand sides listed
on the right of :: = separated by vertical bars.
Accordingly:
(a) ⟨S⟩::= a⟨A⟩,
⟨A⟩::= a⟨A⟩⟨B⟩| a,
⟨B⟩::= b
(b) ⟨S⟩::= a⟨B⟩,
⟨B⟩::= b⟨A⟩| b | a,
⟨A⟩::= a ⟨B⟩| a
Supplementary Problems
WORDS
12.30. Consider the words u = ab2a3 and v = aba2b2. Find: (a) uv;
(b) vu;
(c) u2;
(d) lu;
(e) vlv.
12.31. For the words u = ab2a3 and v = aba2b2, ﬁnd: |u|, |v|, |uv|, |vu|, and |v2|.
12.32. Let w = abcde. (a) Find all subwords of w. (b) Which of them are initial segments?
12.33. Suppose u = a1a2 · · · ar and the ak are distinct. Find the number n of subwords of u.

320
LANGUAGES, AUTOMATA, GRAMMARS
[CHAP. 12
LANGUAGES
12.34. Let L = {a2, ab} and K = {a, ab, b2}. Find: (a) LK;
(b) KL;
(c) L ∨K;
(d) K ∧L.
12.35. Let L = {a2, ab}. Find: (a) L0;
(b) L2;
(c) L3.
12.36. Let A = {a, b, c}. Describe L* if: (a) L = {a2};
(b) L = {a, b2};
(c) L = {a, b2, c3}.
12.37. Does (L2)∗= (L∗)2? If not, how are they related?
12.38. Consider a countable alphabet A = {a1, a2, · · · }. Let Lk the language over A consisting of those words w such that
the sum of the subscripts of the letters in w is equal to k. (See Problem 12.10.) Find: (a) L3;
(b) L5.
REGULAR EXPRESSIONS, REGULAR LANGUAGES
12.39. Let A = {a, b, c}. Describe the language L(r) for each of the following regular expressions:
(a) r = ab∗c;
(b) r = (ab ∨c)∗;
(c) r = ab ∨c∗.
12.40. Let A = {a, b}. Find a regular expression r such that L(r) consists of all words w where:
(a) w contains exactly three a’s.
(b) The number of a’s is divisible by 3.
12.41. Let A = {a, b, c} and let w = ac. State whether or not w belongs to L(r) where:
(a) r = a∗bc∗;
(b) r = a∗b∗c;
(c) r = (ab ∨c)∗
12.42. Let A = {a, b, c} and let w = abc. State whether or not w belongs to L(r) where:
(a) r = ab∗(bc)∗;
(b) r = a∗∨(b ∨c)∗;
(c) r = a∗b(bc ∨c2)∗.
FINITE AUTOMATA
12.43. Let A = {a, b}. Construct an automaton M such that L(M) will consist of those words w where:
(a) the number of b’s is divisible by 3. (b) w begins with a and ends in b.
12.44. Let A = {a, b}. Construct an automaton M which will accept the language:
(a) L(M) = {brabs | r > 0, s > 0};
(b) L(M) = {arbs | r > 0, s > 0}.
12.45. Let A = {a, b}. Construct an automaton M such that L(M) will consist of those words where the number of a’s is
divisible by 2 and the number of b’s is divisible by 3.
(Hint: Use Problems 12.15, 12.43(a), and 12.20.)
12.46. Find the language L(M) accepted by the automaton M in Fig. 12-11.
Fig. 12-11

CHAP. 12]
LANGUAGES, AUTOMATA, GRAMMARS
321
GRAMMARS
12.47. Determine the type of grammar G which consists of the productions:
(a) S →aAB;
S →AB;
A →a;
B →b
(b) S →aB;
B →AB;
aA →b;
A →a;
B →b
(c) S →aB;
B →bB;
B →bA;
A →a;
B →b
12.48. Find a regular grammar G which generates the language L which consists of all words in a and b such that no two
a’s appear next to each other.
12.49. Find a context-free grammar G which generates the language L which consists of all words in a and b with twice as
many a’s as b’s.
12.50. Find a grammar G which generates the language L which consists of all words in a and b with an even number of a’s.
12.51. Find a grammar G which generates the language L which consists of all words of the form anban with n ≥0.
12.52. Show that the language G in Problem 12.51 is not regular. (Hint: Use the Pumping Lemma.)
12.53. Describe the language L = L(G) where G has the productions S →aA, A →bbA, A →c.
12.54. Describe the language L = L(G) where G has the productions S →aSb, Sb →bA, abA →c.
12.55. Write each grammar G in Problem 12.47 in Backus-Naur form.
12.56. Let G be the context-free grammar with productions S →(a, aAS) and A →bS.
(a) Write G in Backus-Naur form. (b) Find the derivation tree of the word w = abaa.
12.57. Figure 12-12 is the derivation tree of a word w in a language L of a context-free grammar G.
(a) Find w. (b) Which terminals, variables, and productions must belong to G?
Fig. 12-12
Answers to Supplementary Problems
12.30. (a) uv
= ab2a4ba2b2; (b) vu = aba2b2ab2a3;
(c) u2 = ab2a4b2a3; (d) lu = u;
(e) vlv = v2 = aba2b2aba2b2.
12.31. 6, 6, 12, 12, 12.
12.32. (a) l, a, b, c, d, e, ab, bc, cd, de, abc, bcd, cde,
abcd, bcde, w = abcde.
(b) l, a, ab, abc, abcd, w = abcde.
12.33. If u = l then n = 1; otherwise, n = 1 + [r +
(r −1) + · · · + 2 + 1] = 1 + r(r + 1)/2.
12.34. (a) LK = {a3, a3b, a2b2, aba, abab, ab3};
(b) KL = {a3, a2b, aba2, abab, b2a2, b2ab};
(c)L∨K = {a2, ab, a, b2}; (d)K∧L
not deﬁned.
12.35. (a) L0 = {l}; (b) L2 = {a4, a3b, aba2, abab};
(c) L3
= {a6, a5b, a3ba2, a3bab, aba4, aba3b,
ababa2, ababab}.
12.36. (a) L∗= {an | n is even}. (b) All words w in a and b
with only even powers of b.
(c)All words in a, b, c with each power of b even and
each power of c a multiple of 3.
12.37. No. (L2)∗⊆(L∗)2.
12.38. (a) a1a1a1, a1a2, a2a1a3 (b) a1a1a1a1a1, a1a1a1a2,
a1a1a2a1,
a1a2a1a1,
a2a1a1a1,
a1a1a3,
a1a3a1,
a3a1a1, a2a3, a3a2, a1a4, a4a1, a5
12.39. (a) L(r) = {abnc | n ≥0}. (b) All words in x and c
where x = ab. (c) L(r) = ab ∪{cn | n ≥0}.
12.40. (a) r = b∗ab∗ab∗ab∗; (b) r = (b∗ab∗ab∗ab∗)∗.
12.41. (a) No; (b) yes; (c) no.
12.42. (a) Yes; (b) no; (c) no.
12.43. See: (a) Fig. 12-13(a); (b) Fig. 12-13(b).
12.44. See: (a) Fig. 12-14; (b) Fig. 12-15(a).
12.45. See: Fig. 12-15(b).
12.46. L(M) consists of all words w which contain aabb as
a subword.

322
LANGUAGES, AUTOMATA, GRAMMARS
[CHAP. 12
Fig. 12-13
Fig. 12-14
Fig. 12-15
12.47. (a) Type 2; (b) Type 0; (c) Type 3.
12.48. S →(a, b, aB, bA), A →(bA, ab, a, b), B →
(b, bA).
12.49. S →(AAB, ABA, BAA), A →(a, BAAA,
ABAA, AABA, AAAB),
B
→
(b, BBAA, BABA, aBAAB, ABAB,
AABB).
12.50. S →(aA,
bB), A →(aB,
bA,
a), B →
(bB, aA, b)
12.51. S →(aSa, b).
12.53. L = {ab2nc | n ≥0}
12.54. L = {ancbn | n > 0}
12.55. (a)⟨S⟩::= a⟨A⟩⟨B⟩|⟨A⟩⟨B⟩, ⟨A⟩::= a, ⟨B⟩::= b.
(b) Not deﬁned for Type 0 language.
(c) ⟨S⟩::= a⟨B⟩, ⟨B⟩::= b⟨B⟩| b⟨A⟩, ⟨A⟩::= a | b.
12.56. (a) ⟨S⟩::=
a | a⟨A⟩⟨S⟩, ⟨A⟩::= b⟨S⟩; (b) See
Fig. 12-16.
Fig. 12-16
12.57. (a) w = aababa; (b) S →aAB, A →aB, B →ba.

CHAPTER 13
Finite State
Machines and
Turing Machines
13.1
INTRODUCTION
This chapter discusses two types of “machines.” The ﬁrst is a ﬁnite state machine (FSM) which is similar
to a ﬁnite state automaton (FSA) except that the ﬁnite state machine “prints” an output using an output alphabet
which may be distinct from the input alphabet. The second is the celebrated Turing machine which may be used
to deﬁne computable functions.
13.2
FINITE STATE MACHINES
A ﬁnite state machine (or complete sequential machine) M consists of six parts:
(1) A ﬁnite set A of input symbols.
(4) An initial state s0 in S.
(2) A ﬁnite set S of “internal” states.
(5) A next-state function f from S × A into S.
(3) A ﬁnite set Z of output symbols.
(6) An output function g from S × A into Z.
Such a machine M is denoted by M = M(A, S, Z, s0, f, g) when we want to indicate its six parts.
EXAMPLE 13.1 The following deﬁnes a ﬁnite state machine M with two input symbols, three internal states,
and three output symbols:
(1) A = {a, b},
(2) S = {s0, s1, s2},
(3) Z = {x, y, z},
(4) Initial state s0,
(5) Next-state function f : S × A →S deﬁned by:
f (s0, a) = s1,
f (s1, a) = s2,
f (s2, a) = s0
f (s0, b) = s2,
f (s1, b) = s1,
f (s2, b) = s1
323
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

324
FINITE STATE MACHINES AND TURING MACHINES
[CHAP. 13
(6) Output function g : S × A →Z deﬁned by:
g(s0, a) = x,
g(s1, a) = x,
g(s2, a) = z
g(s0, b) = y,
g(s1, b) = z,
g(s2, b) = y
State Table and State Diagram of a Finite State Machine
There are two ways of representing a ﬁnite state machine M in compact form. One way is by a table called
the state table of the machine M, and the other way is by a labeled directed graph called the state diagram of the
machine M.
The state table combines the next-state function f and the output function g into a single table which represent
the function F : S × A →S × Z deﬁned as follows:
F(si, aj) = [f (si, aj), g(si, aj)]
For instance, the state table of the machine M in Example 13.1 is pictured in Fig. 13-1(a). The states are listed
on the left of the table with the initial state ﬁrst, and the input symbols are listed on the top of the table. The entry
in the table is a pair (sk, zr) where sk = f (si, aj) is the next state and zr = g(si, aj) is the output symbol. One
assumes that there are no output symbols other than those appearing in the table.
Fig. 13-1
The state diagram D = D(M) of a ﬁnite state machine M = M(A, S, Z, s0, f, g) is a labeled directed graph.
The vertices of D are the states of M. Moreover, if
F(si, aj) = (sk, zr),
or equivalently,
f (si, aj) = sk
and
g(si, aj) = zr
then there is an arc (arrow) from si to sk which is labeled with the pair aj, zr. We usually put the input symbol ai
near the base of the arrow (near si) and the output symbol zr near the center of the arrow. We also label the initial
state s0 by drawing an extra arrow into s0. For instance, the state diagram of the machine M in Example 13.1
appears in Fig. 13-1(b).
Input and Output Tapes
The above discussion of a ﬁnite state machine M does not show the dynamic quality of M. Suppose M is
given a string (word) of input symbols, say
u = a1a2 . . . am
We visualize these symbols on an “input tape.” The machine M “reads” these input symbols one by one and,
simultaneously, changes through a sequence of states
v = s0s1s2 . . . sm

CHAP. 13]
FINITE STATE MACHINES AND TURING MACHINES
325
where s0 is the initial state, while printing a string (word) of output symbols
w = z1z2 . . . zm
on an “output tape.” Formally, the initial state s0 and the input string u determine the strings v and w as follows,
where i = 1, 2, . . . , m:
si = f (si−1, ai)
and
zi = g(si−1, ai)
EXAMPLE 13.2 Consider the machine M in Fig. 13-1, that is, Example 13.1. Suppose the input is the word
u = abaab
We calculate the sequence v of states and the output word w from the state diagram as follows. Beginning at the
initial state s0 we follow the arrows which are labeled by the input symbols as follows:
s0
a,x
−−→s1
b,z
−→s1
a,x
−−→s2
a,z
−→s0
b,y
−−→s2
This yields the following sequence v of states and output word w:
v = s0s1s1s2s0s2
and
w = xzxzy
Binary Addition
This subsection describes a ﬁnite state machine M which can do binary addition. By adding 0’s at the
beginning of our numbers, we can assume that our numbers have the same number of digits. If the machine is
given the input
1101011
+0111011
then we want the output to be the binary sum 10100110. Speciﬁcally, the input is the string of pairs of digits to
be added:
11,
11,
00,
11,
01,
11,
10,
b
where b denotes blank spaces, and the output should be the string:
0,
1,
1,
0,
0,
1,
0,
1
We also want the machine to enter a state called “stop” when the machine ﬁnishes the addition.
The input symbols and output symbols are, respectively, as follows:
A = {00, 01, 10, 11, b}
and
Z = {0, 1, b}
The machine M that we “construct” will have three states:
S = {carry (c), no carry (n), stop (s)}
Here n is the initial state. The machine is shown in Fig. 13-2.
In order to show the limitations of our machines, we state the following theorem.
Theorem 13.1: There is no ﬁnite state machine M which can do binary multiplication.
If we limit the size of the numbers that we multiply, then such machines do exist. Computers are important
examples of ﬁnite state machines which multiply numbers, but the numbers are limited as to their size.

326
FINITE STATE MACHINES AND TURING MACHINES
[CHAP. 13
Fig. 13-2
13.3
GÖDEL NUMBERS
Recall (Section 11.5) that a positive integer p > 1 is called a prime number if its only positive divisors are
1 and p. We let p1, p2, p3, . . . denote the successive prime numbers. Thus
p1 = 2,
p2 = 3,
p3 = 5,
p4 = 7,
p5 = 11, . . .
(By Theorem 11.12, there exists an inﬁnite number of primes.) The Fundamental Theorem of Arithmetic
(Theorem 11.20) states that any positive integer n > 1 can be written uniquely (except for order) as a prod-
uct of prime numbers. The German logician Kurt Gödel used this result to code ﬁnite sequences of numbers and
also to code words over a ﬁnite or countable alphabet. Each sequence or word is assigned a positive integer called
its Gödel number as follows.
The Gödel number of the sequence s = (n1, n2, . . . , nk) of nonnegative integers is the positive integer c(s)
where ni is the exponent of pi in the prime decomposition of c(s), that is,
c(s) = pn1
1 pn2
2 . . . pnk
k
For example,
s = (3, 1, 2, 0, 2)
is coded by
c(s) = 23 · 3 · 52 · 70 · 112 = 72 600
The Gödel number of a word w on an alphabet {a0, a1, a2, a3, . . .} is the positive integer c(w) where the
subscript of the ith letter of w is the exponent of pi in the prime decomposition of c(w). For instance,
w = a4a1a3a2a2
is coded by
c(w) = 24 · 3 · 53 · 72 · 112
(Observe that both codes are essentially the same since we may view a word w as the sequence of the subscripts
of its letters.)
The above coding is essentially the proof of the main result of this section:
Theorem 13.2: Suppose an alphabet A is countable. Then any language L over A is also countable.
Proof: The Gödel coding is a one-to-one mapping c: L →N. Thus L is countable.
13.4
TURING MACHINES
There are a number of equivalent ways to formally deﬁne a “computable” function. We do it by means of a
Turing machine M. This section formally deﬁnes a Turing machine M, and the next section deﬁnes a computable
function.
Our deﬁnition of a Turing machine uses an inﬁnite two-way tape, quintuples, and three halt states. Other
deﬁnitions use a one-way inﬁnite tape and/or quadruples, and one halt state. However, all the deﬁnitions are
equivalent.

CHAP. 13]
FINITE STATE MACHINES AND TURING MACHINES
327
Basic Deﬁnitions
A Turing machine M involves three disjoint nonempty sets:
(1) A ﬁnite tape set where B = a0 is the “blank” symbol:
A = {a1, a2, . . . , am} ∪{B}
(2) A ﬁnite state set where s0 is the initial state:
S = {s1, s2, . . . , sn} ∪{s0} ∪{sH, sY , sN}
Here sH (HALT) is the halting state, sY (YES) is the accepting state, and sN (NO) is the nonaccepting
state.
(3) A direction set where L denotes “left” and R denotes “right:”
d = {L, R}
Deﬁnition 13.1: An expression is a ﬁnite (possibly empty) sequence of elements from A ∪S ∪d.
In other words, an expression is a word whose letters (symbols) come from the sets A, S, and d.
Deﬁnition 13.2: A tape expression is an expression using only elements from the tape set A.
The Turing machine M may be viewed as a read/write tape head which moves back and forth along an inﬁnite
tape. The tape is divided lengthwise into squares (cells), and each square may be blank or hold one tape symbol.
At each step in time, the Turing machine M is in a certain internal state si scanning one of the tape symbols aj
on the tape. We assume that only a ﬁnite number of nonblank symbols appear on the tape.
Figure 13-3(a) is a picture of a Turing machine M in state s2 scanning the second symbol where a1a3Ba1a1
is printed on the tape. (Note again that B is the blank symbol.) This picture may be represented by the expression
α = a1s2a3Ba1a1 where we write the state s2 of M before the tape symbol a3 that M is scanning. Observe that
α is an expression using only the tape alphabet A except for the state symbol s2 which is not at the end of the
expression since it appears before the tape symbol a3 that M is scanning. Figure 13-3 shows two other informal
pictures and their corresponding picture expressions.
Fig. 13-3
We give formal deﬁnitions.
Deﬁnition 13.3: A picture α is an expression as follows where P and Q are tape expressions (possibly empty):
α = PsiakQ
Deﬁnition 13.4: Let α = PsiakQ be a picture. We say that the Turing machine M is in state si scanning the
letter ak and that the expression on the tape is the expression PakQ, that is, without its state symbol si.
As mentioned above, at each step in time the Turing machine M is in a certain state si and is scanning a tape
symbol ak. The Turing machine M is able to do the following three things simultaneously:
(i) M erases the scanned symbol ak and writes in its place a tape symbol al (where we permit al = ak).
(ii) M changes its internal states si to a state sj (where we permit sj = sj).
(iii) M moves one square to the left or moves one square to the right.

328
FINITE STATE MACHINES AND TURING MACHINES
[CHAP. 13
The above action by M may be described by a ﬁve-letter expression called a quintuple which we deﬁne
below.
Deﬁnition 13.5: A quintuple q is a ﬁve-letter expression of the following form:
q =

si, ak, al, sj,
L
R
.
That is, the ﬁrst letter of q is a state symbol, the second is a tape symbol, the third is a tape symbol, the fourth
is a state symbol, and the last is a direction symbol L or R.
Next we give a formal deﬁnition of a Turing machine.
Deﬁnition 13.6: A Turing machine M is a ﬁnite set of quintuples such that:
(i) No two quintuples begin with the same ﬁrst two letters.
(ii) No quintuple begins with sH, sY , or sN.
Condition (i) in the deﬁnition guarantees that the machine M cannot do more than one thing at any given
step, and condition (ii) guarantees that M halts in state sH, sY , or sN.
The following is an alternative equivalent deﬁnition.
Deﬁnition 13.6
′: Turing machine M is a partial function from
S\{sH, sY or sN} × A
into
A × S × d
The term partial function simply means that domain of M is a subset of S\{sH, sY , or sN} × A.
The action of the Turing machine described above can now be formally deﬁned.
Deﬁnition 13.7: Let α and β be pictures. We write
α →β
if one of the following holds where a, b, c are tape letters and P and Q are tape expressions (possibly empty):
(i) α = PsiacQ, β = PbsjcQ and M contains the quintuple q = siabsjR.
(ii) α = PcsiaQ, β = PsjcbQ and M contains the quintuple q = siabsjL.
(iii) α = Psia, β = PbsjB and M contains the quintuple q = siabsjR.
(iv) α = siaQ, β = sjBbQ and M contains the quintuple q = siabsjL.
Observe that, in all four cases, M replaces a on the tape by b (where we permit b = a), and M changes its
state from si to sj (where we permit sj = si). Furthermore:
(i) Here M moves to the right.
(ii) Here M moves to the left.
(iii) Here M moves to the right; however, since M is scanning the rightmost letter, it must add the blank symbol
B on the right.
(iv) Here M moves to the left; however, since M is scanning the leftmost letter, it must add the blank symbol B
on the left.
Deﬁnition 13.8: A picture α is said to be terminal if there is no picture β such that α →β.
In particular, any picture α in one of the three halt states must be terminal since no quintuple begins with sH,
sY or sn.

CHAP. 13]
FINITE STATE MACHINES AND TURING MACHINES
329
Computing with a Turing Machine
The above is a static (one-step) description of a Turing machine M. Now we discuss its dynamics.
Deﬁnition 13.9: A computation of a Turing machine M is a sequence of pictures α1, α2, . . . , αm such that
αi−1 →αi, for i = 1, 2, . . . , m, and αm is a terminal picture.
In other words, a computation is a sequence
α0 →α1 →α2 →. . . →αm
which cannot be extended since αm is terminal. We will let term(α) denote the ﬁnal picture of a computation
beginning with α. Thus term(α0) = αm in the above computation.
Turing Machines with Input
The following deﬁnition applies.
Deﬁnition 13.10: An input for a Turing machine M is a tape expression W. The initial picture for an input W
is α(W) where α(W) = s0(W).
Observe that the initial picture α(W) of the input W is obtained by placing the initial state s0 in front of the
input tape expression W. In other words, the Turing machine M begins in its initial state s0 and it is scanning the
ﬁrst letter of W.
Deﬁnition 13.11: Let M be aTuring machine and let W be an input.We say M halts on W if there is a computation
beginning with the initial picture α(W).
That is, given an input W, we can form the initial picture α(W) = s0(W) and apply M to obtain the sequence
α(W) →α1 →α2 →. . .
Two things can happen:
(1) M halts on W. That is, the sequence ends with some terminal Picture αr.
(2) M does not halt on W. That is, the sequence never ends.
Grammars and Turing Machines
Turing machines may be used to recognize languages. Speciﬁcally, suppose M is a Turing machine with tape
set A. Let L be the set of words W in A such that M halts in the accepting state sY when W is the input. We will
then write L = L(M), and we will say that M recognizes the language L. Thus an input W does not belong to
L(M) if M does not halt on W or if M halts on W but not in the accepting state sY .
The following theorem is the main result of this subsection; its proof lies beyond the scope of this text.
Theorem 13.3: A language L is recognizable by a Turing machine M if and only if L is a type 0 language.
Remark: The reason for three halt states is that sY and sN are used for recognizing languages, whereas sH is
used for computations discussed in the next section.
EXAMPLE 13.3 SupposeaTuringmachineM withtapesetA = {a, b, c}containsthefollowingfourquintuples:
q1 = s0aas0R,
q2 = s0bbs0R,
q3 = s0BBsNR,
q4 = s0ccsY R
(a) Suppose W = W(a, b, c) is an input Without any c’s.
By the quintuples q1 and q2, M stays in state s0 and moves to the right until it encounters a blank
symbol B. Then M changes its state to the nonaccepting state sN and halts.
(b) Suppose W = W(a, b, c) is an input with at least one c symbol.
By the quintuple q4, when M initially meets the ﬁrst c in W it changes its state to the accepting state sY
and halts.
Thus M recognizes the language L of all words W in a, b, c with at least one letter c. That is, L = L(M).

330
FINITE STATE MACHINES AND TURING MACHINES
[CHAP. 13
13.5
COMPUTABLE FUNCTIONS
Computable functions are deﬁned on the set of nonnegative integers. Some texts use N to denote this set. We
use N to denote the set of positive integers, so we will use the notation
N0 = {0, 1, 2, 3, . . .}
Throughoutthissection,thetermsnumber,integer,andnonnegativeintegerareusedsynonymously.Thepreceding
section described the way a Turing machine M manipulates and recognizes character data. Here we show how
M manipulates numerical data. First, however, we need to be able to represent our numbers by our tape set A.
We will write 1 for the tape symbol a1 and 1n for 111 . . . 1, where 1 occurs n times.
Deﬁnition 13.12: Each number n will be represented by the tape expression ⟨n⟩where ⟨n⟩= 1n+1. Thus:
⟨4⟩= 11111 = 15,
⟨0⟩= 1,
⟨2⟩= 111 = 13.
Deﬁnition 13.13: Let E be an expression. Then [E] will denote the number of times 1 occurs in E. Thus
[11Bs2a3111Ba4] = 5,
[a4s2Ba2] = 0,
[⟨n⟩] = n + 1.
Deﬁnition 13.14: A function f: N0 →N0 is computable if there exists a Turing machine M such that, for every
integer n, M halts on ⟨n⟩and
f (n) = [term(α(⟨n⟩)]
We then say that M computes f .
That is, given a function f and an integer n, we input ⟨n⟩and apply M. If M always halts on ⟨n⟩and the
number of 1’s in the ﬁnal picture is equal to f (n), then f is a computable function and we say that M computes f .
EXAMPLE 13.4 The function f (n) = n + 3 is computable. The input is W = 1n+1. Thus we need only add
two 1’s to the input. A Turing machine M which computes f follows:
M = {q1, q2, q3} = {s01s0L, s0B1s1L, s1B1sHL}
Observe that:
(1) q1 moves the machine M to the left.
(2) q2 writes 1 in the blank square B, and moves M to the left.
(3) q3 writes 1 in the blank square B, and halts M.
Accordingly, for any positive integer n,
s01n+1 →s0B1n+1 →s1B1n+2 →sHB1n+3
Thus M computes f (n) = n + 3. It is clear that, for any positive integer k, the function f (n) = n + k is
computable.
The following theorem applies.
Theorem 13.4: Suppose f : N0 →N0 and g : N0 →N0 are computable. Then the composition function
h = g ◦f is computable.
We indicate the proof of this theorem here. Suppose Mf and Mg are the Turing machines which compute
f and g, respectively. Given the input ⟨n⟩, we apply Mf to ⟨n⟩to ﬁnally obtain an expression E with [E] = f (n).
We then arrange that E = s01f (n). We next add 1 to E to obtain E′ = s011f (n) and apply Mg to E′. This yields
E′′ where [E′′] = g(f (n)) = (g ◦f )(n), as required.

CHAP. 13]
FINITE STATE MACHINES AND TURING MACHINES
331
Functions of Several Variables
This subsection deﬁnes a computable function f (n1, n2, . . . , nk) of k variables. First we need to represent
the list m = (n1, n2, . . . , nk) in our alphabet A.
Deﬁnition 13.15: Each list m = (n1, n2, . . . , nk) of k integers is represented by the tape expression
⟨m⟩= ⟨n1⟩B⟨n2⟩B · · · B⟨nk⟩
For example, ⟨(2, 0, 4)⟩= 111B1B11111 = 13B11B15.
Deﬁnition 13.16: Afunction f (n1, n2, . . . , nk) of k variables is computable if there is a Turing machine M such
that, for every list m = (n1, n2, . . . , nk), M halts on ⟨m⟩and
f (m) = [term(α(⟨m⟩))]
We then say that M computes f .
The deﬁnition is analogous to Deﬁnition 13.14 for one variable.
EXAMPLE 13.5 The addition function f (m, n) = m + n is computable. The input is W = 1m+1B1n+1.
Thus we need only erase two of the 1s. A Turing machine M which computes f follows:
M = {q1, q2, q3, q4} = {s01Bs1R, s11BsHR, s1BBs2R, s21BsHR}
Observe that:
(1) q1 erases the ﬁrst 1 and moves M to the right.
(2) If m ̸= 0, then q2 erases the second 1 and halts M.
(3) If m = 0, q3 moves M to the right past the blank space B.
(4) q4 erases the 1 and halts M.
Accordingly, if m ̸= 0 we have:
s01m+1B1n+1 →s11mB1n+1 →sH1m−1B1n+1
but if m = 0 and m + n = n, we have
s01B1n+1 →s1B1n+1 →s21n+1 →sH1n
Thus M computes f (m, n) = m + n.
Solved Problems
FINITE STATE MACHINES
13.1. Let M be the ﬁnite state machine with state table appearing in Fig. 13-4(a).
(a) Find the input set A, the state set S, the output set Z, and the initial state.
(b) Draw the state diagram D = D(M) of M.
(c) Suppose w = aababaabbab is an input word (string). Find the corresponding output word v.
(a) The input symbols are on the top of the table, the states are listed on the left, and the output symbols appear in
the table. Thus:
A = {a, b},
S = {s0, s1, s2, s3},
Z = {x, y, z}
The state s0 is the initial state since it is the ﬁrst state listed in the table.

332
FINITE STATE MACHINES AND TURING MACHINES
[CHAP. 13
Fig. 13-4
(b) The state diagram D = D(M) appears in Fig. 13-4(b). Note that the vertices of D are the states of M. Suppose
F(si, aj) = (sk, zr). (That is, f (si, aj) = sk and g(si, aj) = zr).
Then there is a directed edge from si to sk labeled by the pair aj, zr. Usually, the input symbol aj is put near the
base of the arrow (near si) and output symbol zr is put near the center of the arrow.
(d) Starting at the initial state s0, we move from state to state by the arrows which are labeled respectively, by the
given input symbols as follows:
s0
a−→s1
a−→s3
b−→s2
a−→s1
b−→s1
a−→s3
a−→s0
b−→s2
b−→s0
a−→s1
b−→s1
The output symbols on the above arrows yield the required output word v = xyxzzyzxxz.
13.2. Let M be the ﬁnite state machine with input set A = {a, b}, output set Z = {x, y, z}, and state diagram
D = D(M) in Fig. 13-5(a).
Fig. 13-5
(a) Construct the state table of M.
(b) Find the output word v if the input is the word: (i) w = a2b2abab; (ii) w = abab3a2.
(a) The state table appears in Fig. 13-5(b). Since s0 is the initial state, it is listed ﬁrst.
Also, F(si, aj) = (sk, zr) if there is a directed edge from si to sk labeled by the pair aj, zr.
(b) Move from state to state by the arrows which are labeled, respectively, by the given input symbols to obtain the
following output: (i) v = xz2x2y2x; (ii) v = xy2xzxx2z.
TURING MACHINES
13.3. Let M be a Turing machine. Determine the picture α corresponding to each situation:
(a) M is in state s3 and scanning the third letter of the tape expression w = aabca.

CHAP. 13]
FINITE STATE MACHINES AND TURING MACHINES
333
(b) M is in state s2 and scanning the last letter of the tape expression w = abca.
(c) The input is the tape expression w = 14B12.
The picture α is obtained by placing the state symbol before the tape letter being scanned. Initially, M is in
state s0 scanning the ﬁrst letter of an input. Thus:
(a) α = aas3bca;
(b) α = abcs2a;
(c) α = s01111B11.
13.4. Suppose α = aas2ba is a picture. Find β such that α →β if the Turing machine M has the quintuple
q where: (a) q = s2bas1L; (b) q = s2bbs3R; (c) q = s2bas2R; (d) q = s3abs1L.
(a) Here M erases b and writes a, changes its state to s1, and moves left. Thus β = as1aaa.
(b) Here M does not change the scanned letter b, changes its state to s3, and moves right. Thus β = aabs3a.
(c) Here M erases b and writes a, keeps its state s2, and moves right. Thus β = aaas2a.
(d) Here q has no effect on α since q does not begin with s2b.
13.5. Let A = {a, b} and let L = {arbs | r > 0, s > 0}, that is, L consists of all words W beginning with one
or more a’s and followed by one or more b’s. Find a Turing machine M which recognizes L.
The strategy is that we want M to: (1) move right over all the a’s; (2) move right over the b’s, and (3) halt in the
accepting state sY when it meets the blank symbol B. The following quintuples do this:
q1 = s0aas1R,
q2 = s1aas1R,
q3 = s1bbs2R,
q4 = s2bbs2R,
q5 = s2BBsYR,
Speciﬁcally, q1 and q2 do (1), q3 and q4 do (2), and q5 does (3).
However, we also want M to non-accept an input word W which does not belong to L. Thus we also need the
following quintuples:
q6 = s0BBsNR,
q7 = s0bbsNR,
q8 = s1BBsNR,
q9 = s2aasNR
Here q6 is used if the input W = λ = B, the empty word; q7 is used if the input W is an expression beginning with b;
q8 is used if the input W only contains a’s; and q9 is used if the input W contains the letter a following a letter b.
COMPUTABLE FUNCTIONS
13.6. Find ⟨m⟩if: (a) m = 5; (b) m = (4, 0, 3); (c) m = (3, −2, 5).
Recall ⟨n⟩= 1n+1 = 11n and ⟨(n1, n2, . . . nr)⟩= ⟨n1⟩B⟨n2⟩B · · · B⟨nr⟩. Thus:
(a) ⟨m⟩= 16 = 111111
(b) ⟨m⟩= 15B11B14 = 11111B1B1111
(c) ⟨m⟩is not deﬁned for negative integers.
13.7. Find [E] for the expressions:
(a) E = alls2Bb111;
(c) E = ⟨m⟩where m = (4, 1, 2);
(b) E = aas3bb;
(d) E = ⟨m⟩where m = (n1, n2, . . . , nr).
Recall that [E] counts the number of 1s in E. Thus:
(a) [E] = 5;
(b) [E] = 0;
(c) [E] = 10 since E = 15B12B13;
(d) [E] = n1 + n2 + · · · + nr + r since the number of 1s contributed by each nk to E is nk + 1.
13.8. Let f be the function f (n) = n −1 when n > 0 and f (0) = 0. Show that f is computable.
We need to ﬁnd a Turing machine M which computes f . Speciﬁcally, we want M to erase two of the 1s in the
input ⟨n⟩when n > 0, but only one 1 when n = 0. This is accomplished with the following quintuples:
q1 = s01Bs1R,
q2 = s1BBsHR,
q3 = s11BsHR
Here q1 erases the ﬁrst 1 and moves M right. If there is only one 1, then M is now scanning a blank symbol B and
q2 tells the computer to halt. Otherwise, q3 erases the second 1 and halts M.

334
FINITE STATE MACHINES AND TURING MACHINES
[CHAP. 13
13.9. Let f be the function f (x, y) = y. Show that f is computable.
We need to ﬁnd a Turing machine M which computes f . Speciﬁcally, we want M to erase all the 1s from ⟨x⟩and
one of the 1s from ⟨y⟩. This is accomplished with the following quintuples:
q1 = s01Bs1R,
q2 = s0BBs1R,
q3 = s11BsHR
Here q1 erases all the 1s in ⟨x⟩while moving M to the right. When M scans the dividing blank B, q2 changes the
state of M from s0 to s1 and moves M right. Then q3 erases the ﬁrst 1 in ⟨y⟩and halts M.
Supplementary Problems
FINITE STATE MACHINES
13.10. Let M be the ﬁnite state machine with state table appearing in Fig. 13-6(a).
Fig. 13-6
(a) Find the input set A, the state set S, the output set Z, and the initial state of M.
(b) Draw the state diagram D = D(M) of M.
(c) Find the output word v if the input is the word: (i) w = ab3a2ba3b; (ii) w = a2b2ab2a2b.
13.11. Let M be the ﬁnite state machine with input set A = {a, b, c}, output set Z = {x, y, z} and state diagram
D = D(M) in Fig. 13-6(b).
(a) Construct the state table of M.
(b) Find the output word v if the input is the word: (i) w = a2c2b2cab3; (ii) w = ca2b2ac2ab.
13.12. Let M be the ﬁnite state machine with input set A = {a, b}, output set Z = {x, y, z}, and state diagram
D = D(M) in Fig. 13-7(a). Find the output word v if the input is the word:
(a) w = ab3a2ba3b; (b) w = aba2b2ab2a2ba2.
13.13. Repeat Problem 13.12 for the state diagram D = D(M) in Fig. 13-7(b).

CHAP. 13]
FINITE STATE MACHINES AND TURING MACHINES
335
Fig. 13-7
TURING MACHINES
13.14. Let M be a Turing machine. Determine the picture α corresponding to each situation:
(a) M is in state s2 and scanning the third letter of the tape expression w = abbaa.
(b) M is in state s3 and scanning the last letter of the tape expression w = aabb.
(c) The input is the word W = a3b3.
(d) The input is the tape expression W = ⟨(3, 2)⟩.
13.15. Suppose α = abs2aa is a picture. Find β such that α →β if the Turing machine M has the quintuple
q where:
(a) q = s2abs1R;
(b) q = s2aas3L;
(c) q = s2abs2R;
(d) q = s2abs3L;
(e) q = s3abs2R;
(f) q = s2aas2L.
13.16. Repeat Problem 13.15 for the picture α = s2aBab.
13.17. Find distinct pictures α1, α2, α3, α4 and a Turing machine M such that the following sequence does not
terminate:
α1 →α2 →α3 →α4 →α1 →α2 →· · ·
13.18. Suppose α →β1 and α →β2 Must β1 →β2?
13.19. Suppose α = α(W) for some input W, and suppose α →β →α. Can M recognize W?
13.20. Let A = {a, b}. Find a Turing machine M which recognizes the language L = {abn | n > 0}, that is,
where L consists of all words W beginning with one a and followed by one or more bs.
13.21. Let A = {a, b}. Find a Turing machine M which recognizes the ﬁnite language L = {a, a2}, that is,
where L consists of the ﬁrst two nonzero powers of a.
COMPUTABLE FUNCTIONS
13.22. Find ⟨m⟩if:
(a) m = 6;
(b) m = (5, 0, 3, 1);
(c) m = (0, 0, 0);
(d) m = (2, 3, −1).
13.23. Find [E] for the expressions: (a) E = 111s2aa1B111; (b) E = a11bs1Bb; (c) E = ⟨m⟩where m =
(2, 5, 4).

336
FINITE STATE MACHINES AND TURING MACHINES
[CHAP. 13
13.24. Let f be the function f (n) = n −2 when n > 1 and f (n) = 0 when n = 0 or 1. Show that f is
computable.
13.25. Let f be the function f (x, y) = x. Show that f is computable.
Answers to Supplementary Problems
13.10. (a) A = (a, b), S = {s0, s1, s2}, Z = {x, y, z}, and s0
is the initial state. (b) See Fig. 13-8(a).
(c) v = y2zyzxzxyz.
13.11. (a) See Fig. 13-8. (b) (i) v = xyz2x2zx3z2,
(ii) v = xy2xz3xyx.
13.12. (a) xy3zxyzxz2; (b) xyzxy2z2x2z2y2.
13.13. (a) zyz2xy2xyzy; (b) zyxy2zx2zxy2xy.
13.14. (a) α = abs2baa; (b) α = aabs3b; (c) α = s0aaabbb;
(d) α = s01111B111.
13.15. (a) β = abbs3a; (b) β = as3baa; (c) β = abbs2a;
(d) β = as3bba; (e) α a is not changed by q;
(f) β = as2baa.
13.16. (a) β = bs1Bab; (b) β = s3BaBab;(c) β = bs2Bab;
(d) β = s3BbBab; (e) α is not changed by q;
(f) β = s2BaBab.
13.17. α1 = s0ab, α2 = bs1b, α3 = s2bb, α4 = as3b;
q1 = s0abs1R, q2 = s1bbs2L, q3 = s2bas3R,
q4 = s3bbs0L.
13.18. Yes.
13.19. No, since α →β →α →β →α →β →· · ·
never ends.
13.20. q1 = s0BBsNR (NO); q2 = s0bbsNR (NO);
q3 = s0aas1R; q4 = s1BBsNR (NO); q5 = s1aasNR
(NO); q6 = s1bbsNR; q7 = s2bbs2R; q8 = s2aasNR
(NO); q9 = s2BBsYR (YES).
13.21. q1 = s0BBsNR (NO); q2 = s0bbsNR (NO);
q3 = s0aas1R; q4 = s1BBsYR (YES);
q5 = s1bbsNR (NO); q6 = s1aas2R; q7 = s2BBsYR
(YES); q8 = s2aasNR (NO); q9 = s2bbsNR (NO).
13.22. (a) ⟨6⟩= 17; (b) ⟨m⟩= 16B1B14B12;
(c) ⟨m⟩= 1B1B1; (d) not deﬁned.
13.23. (a) [E] = 7; (b) [E] = 2; (c) [E] = 14.
13.24. Strategy: Erase ﬁrst three 1s
q1 = S01Bs1R; q2 = s1BBsHR (HALT); q3 =
S11Bs2R; q4 = s2BBsHR (HALT); q5 = s2BBsHR
(HALT).
13.25. Strategy: Erase ﬁrst 1 and then all 1s after B.
q1 = s01Bs1R; q2 = S111s1R; q3 = S1BBs2R;
q4 = S21Bs3R; q5 = S31Bs3R; q6 = S3BBsHR
(HALT).
Fig. 13-8

CHAPTER 14
Ordered Sets
and Lattices
14.1
INTRODUCTION
Order and precedence relationships appear in many different places in mathematics and computer science.
This chapter makes these notions precise. We also deﬁne a lattice, which is a special kind of an ordered set.
14.2
ORDERED SETS
Suppose R is a relation on a set S satisfying the following three properties:
[O1] (Reﬂexive)
For any a ∈S, we have aRa.
[O2] (Antisymmetric)
If aRb and bRa, then a = b.
[O3] (Transitive)
If aRb and bRc, then aRc.
Then R is called a partial order or, simply an order relation, and R is said to deﬁne a partial ordering of S. The
set S with the partial order is called a partially ordered set or, simply, an ordered set or poset. We write (S, R)
when we want to specify the relation R.
The most familiar order relation, called the usual order, is the relation ≤(read “less than or equal”) on the
positive integers N or, more generally, on any subset of the real numbers R. For this reason, a partial order relation
is usually denoted by ≾; and
a ≾b
is read “a precedes b.” In this case we also write:
a ≺b means a ≾b and a ̸= b;
read “a strictly precedes b.”
b ≿a means a ≾b;
read “b succeeds a.”
b ≻a means a ≺b;
read “b strictly succeeds a.”
/≾, /≺, /≿, and ̸≻are self-explanatory.
When there is no ambiguity, the symbols ≤, <, >, and ≥are frequently used instead of ≾, ≺, ≻, and ≿,
respectively.
337
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

338
ORDERED SETS AND LATTICES
[CHAP. 14
EXAMPLE 14.1
(a) Let S be any collection of sets. The relation ⊆of set inclusion is a partial ordering of S. Speciﬁcally, A ⊆A
for any set A; if A ⊆B and B ⊆A then A = B; and if A ⊆B and B ⊆C then A ⊆C.
(b) Consider the set N of positive integers. We say “a divides b,” written a | b, if there exists an integer c such
that ac = b. For example, 2 | 4, 3 | 12, 7 | 21, and so on. This relation of divisibility is a partial ordering of N.
(c) The relation “|” of divisibility is not an ordering of the set Z of integers. Speciﬁcally, the relation is not
antisymmetric. For instance, 2 | −2 and −2 | 2, but 2 ̸= −2.
(d) Consider the set Z of integers. Deﬁne aRb if there is a positive integer r such that b = ar. For instance, 2 R 8
since 8 = 23. Then R is a partial ordering of Z.
Dual Order
Let ≾be any partial ordering of a set S. The relation ≿, that is, a succeeds b, is also a partial ordering of S;
it is called the dual order. Observe that a ≾b if and only if b ≿a; hence the dual order ≿is the inverse of the
relation ≾, that is, ≿= ≾−1.
Ordered Subsets
Let A be a subset of an ordered set S, and suppose a, b ∈A. Deﬁne a ≾b as elements of A whenever a ≾b as
elements of S. This deﬁnes a partial ordering of A called the induced order on A. The subset A with the induced
order is called an ordered subset of S. Unless otherwise stated or implied, any subset of an ordered set S will be
treated as an ordered subset of S.
Quasi-order
Suppose ≺is a relation on a set S satisfying the following two properties:
[Q1] (Irreﬂexive)
For any a ∈A, we have a /≺a.
[Q2] (Transitive)
If a ≺b, and b ≺c, then a ≺c.
Then ≺is called a quasi-order on S.
There is a close relationship between partial orders and quasi-orders. Speciﬁcally, if ≾is a partial order
on a set S and we deﬁne a ≺b to mean a ≾b but a ̸= b, then ≺is a quasi-order on S. Conversely, if ≺is a
quasi-order on a set S and we deﬁne a ≾b to mean a ≺b or a = b, then ≾is a partial order on S. This allows
us to switch back and forth between a partial order and its corresponding quasi-orders using whichever is more
convenient.
Comparability, Linearly Ordered Sets
Suppose a and b are elements in a partially ordered set S. We say a and b are comparable if
a ≾b
or
b ≾a
that is, if one of them precedes the other. Thus a and b are noncomparable, written
a ∥b
if neither a ≾b nor b ≾a.
The word “partial” is used in deﬁning a partially ordered set S since some of the elements of S need not be
comparable. Suppose, on the other hand, that every pair of elements of S are comparable. Then S is said to be
totally ordered or linearly ordered, and S is called a chain.Although an ordered set S may not be linearly ordered,
it is still possible for a subset A of S to be linearly ordered. Clearly, every subset of a linearly ordered set S must
also be linearly ordered.

CHAP. 14]
ORDERED SETS AND LATTICES
339
EXAMPLE 14.2
(a) Consider the set N of positive integers ordered by divisibility. Then 21 and 7 are comparable since 7 | 21.
On the other hand, 3 and 5 are noncomparable since neither 3 | 5 nor 5 | 3. Thus N is not linearly ordered by
divisibility. Observe that A = {2, 6, 12, 36} is a linearly ordered subset of N since 2 | 6, 6 | 12 and 12 | 36.
(b) The set N of positive integers with the usual order ≤(less than or equal) is linearly ordered and hence every
ordered subset of N is also linearly ordered.
(c) The power set P (A) of a set A with two or more elements is not linearly ordered by set inclusion. For
instance, suppose a and b belong to A. Then {a} and {b} are noncomparable. Observe that the empty set ,
{a}, and A do form a linearly ordered subset of P(A) since  ⊆{a} ⊆A. Similarly, , {b}, and A form a
linearly ordered subset of P(A).
Product Sets and Order
There are a number of ways to deﬁne an order relation on the Cartesian product of given ordered sets. Two
of these ways follow:
(a) Product Order:
Suppose S and T are ordered sets. Then the following is an order relation on the product
set S × T , called the product order:
(a, b) ≾(a′, b′)
if
a ≤a′ and b ≤b′
(b) Lexicographical Order:
Suppose S and T are linearly ordered sets. Then the following is an order relation
on the product set S × T , called the lexicographical or dictionary order:
(a, b) ≺(a′, b′)
if
a < b
or if
a = a′ and b < b′
This order can be extended to S1 × S2 × · · · × Sn as follows:
(a1, a2, . . . , an) ≺(a′
1, a′
2, . . . , a′
n)
if
ai = a′
i for i = 1, 2, . . . , k −1 and ak < a′
k
Note that the lexicographical order is also linear.
Kleene Closure and Order
Let A be a (nonempty) linearly ordered alphabet. Recall that A∗, called the Kleene closure of A, consists of
all words w on A, and |w| denotes the length of w. Then the following are two order relations on A∗.
(a) Alphabetical (Lexicographical) Order:
The reader is no doubt familiar with the usual alphabetical ordering
of A∗. That is:
(i) λ < w, where λ is the empty word and w is any nonempty word.
(ii) Suppose u = au′ and v = bv′ are distinct nonempty words where a, b ∈A and u′, v′ ∈A∗. Then
u ≺v
if a < b
or
if a = b but u′ ≺v′
(b) Short-lex Order:
Here A∗is ordered ﬁrst by length, and then alphabetically. That is, for any distinct words
u, v in A∗,
u ≺v
if |u| < |v|
or
if |u| = |v| but u precedes v alphabetically
For example, “to” precedes “and” since |to| = 2 but |and| = 3. However, “an” precedes “to” since they have
the same length, but “an” precedes “to” alphabetically. This order is also called the free semigroup order.

340
ORDERED SETS AND LATTICES
[CHAP. 14
14.3
HASSE DIAGRAMS OF PARTIALLY ORDERED SETS
Let S be a partially ordered set, and suppose a, b belong to S. We say that a is an immediate predecessor of
b, or that b is an immediate successor of a, or that b is a cover of a, written
a ≪b
if a < b but no element in S lies between a and b, that is, there exists no element c in S such that a < c < b.
Suppose S is a ﬁnite partially ordered set. Then the order on S is completely known once we know all pairs
a, b in S such that a ≪b, that is, once we know the relation ≪on S. This follows from the fact that x < y if
and only if x ≪y or there exist elements a1, a2, . . . , am in S such that
x ≪a1 ≪a2 ≪· · · ≪am ≪y
The Hasse diagram of a ﬁnite partially ordered set S is the directed graph whose vertices are the elements
of S and there is a directed edge from a to b whenever a ≪b in S. (Instead of drawing an arrow from a to b,
we sometimes place b higher than a and draw a line between them. It is then understood that movement upwards
indicates succession.) In the diagram thus created, there is a directed edge from vertex x to vertex y if and only
if x ≪y. Also, there can be no (directed) cycles in the diagram of S since the order relation is antisymmetric.
The Hasse diagram of a poset S is a picture of S; hence it is very useful in describing types of elements
in S. Sometimes we deﬁne a partially ordered set by simply presenting its Hasse diagram. We note that the Hasse
diagram of a poset S need not be connected.
Remark: The Hasse diagram of a ﬁnite poset S turns out to be a directed cycle-free graph (DAG) studied in
Section 9.9. The investigation here is independent of the previous investigation. Here we mainly think of order
in terms of “less than” or “greater than” rather than in terms of directed adjacency relations. Accordingly, there
will be some overlap in the content.
EXAMPLE 14.3
(a) Let A = {1, 2, 3, 4, 6, 8, 9, 12, 18, 24} be ordered by the relation “x divides y.” The diagram of A is given
in Fig. 14-1(a). (Unlike rooted trees, the direction of a line in the diagram of a poset is always upward.)
(b) Let B = {a, b, c, d, e}. The diagram in Fig. 14-1(b) deﬁnes a partial order on B in the natural way. That is,
d ≤b, d ≤a, e ≤c and so on.
(c) The diagram of a ﬁnite linearly ordered set, i.e., a ﬁnite chain, consists simply of one path. For example,
Fig. 14-1(c) shows the diagram of a chain with ﬁve elements.
Fig. 14-1

CHAP. 14]
ORDERED SETS AND LATTICES
341
EXAMPLE 14.4 A partition of a positive integer m is a set of positive integers whose sum is m. For instance,
there are seven partitions of m = 5 as follows:
5,
3 −2,
2 −2 −1,
1 −1 −1 −1 −1,
4 −1,
3 −1 −1,
2 −1 −1 −1
We order the partitions of an integer m as follows. A partition P1 precedes a partition P2 if the integers in P1 can
be added to obtain the integers in P2 or, equivalently, if the integers in P2 can be further subdivided to obtain the
integers in P1. For example,
2 −2 −1
precedes
3 −2
since 2 + 1 = 3. On the other hand, 3 −1 −1 and 2 −2 −1 are noncomparable.
Figure 14-2 gives the Hasse diagram of the partitions of m = 5.
Fig. 14-2
Minimal and Maximal, and First and Last Elements
Let S be a partially ordered set.An element a in S is called a minimal element if no other element of S strictly
precedes (is less than) a. Similarly, an element b in S is called a maximal element if no element of S strictly
succeeds (is larger than) b. Geometrically speaking, a is a minimal element if no edge enters a (from below),
and b is a maximal element if no edge leaves b (in the upward direction). We note that S can have more than one
minimal and more than one maximal element.
If S is inﬁnite, then S may have no minimal and no maximal element. For instance, the set Z of integers with
the usual order ≤has no minimal and no maximal element. On the other hand, if S is ﬁnite, then S must have at
least one minimal element and at least one maximal element.
An element a is S is called a ﬁrst element if for every element x in S,
a ≾x
that is, if a precedes every other element in S. Similarly, an element b in S is called a last element if for every
element y in S,
y ≾b
that is, if b succeeds every other element in S. We note that S can have at most one ﬁrst element, which must
be a minimal element, and S can have at most one last element, which must be a maximal element. Generally
speaking, S may have neither a ﬁrst nor a last element, even when S is ﬁnite.
EXAMPLE 14.5
(a) Consider the three partially ordered sets in Example 14-3 whose Hasse diagrams appear in Fig. 14-1.
(i) A has two maximal elements 18 and 24 and neither is a last element. A has only one minimal element, 1,
which is also a ﬁrst element.
(ii) B has two minimal elements, d and e, and neither is a ﬁrst element. B has only one maximal element, a,
which is also a last element.
(iii) The chain has one minimal element, x, which is a ﬁrst element, and one maximal element, v, which is
a last element.

342
ORDERED SETS AND LATTICES
[CHAP. 14
(b) Let A be any nonempty set and let P(A) be the power set of A ordered by set inclusion. Then the empty set
 is a ﬁrst element of P(A) since, for any set X, we have  ⊆X. Moreover, A is a last element of P(A)
since every element Y of P(A) is, by deﬁnition, a subset of A, that is, Y ⊆A.
14.4
CONSISTENT ENUMERATION
Suppose S is a ﬁnite partially ordered set. Frequently we want to assign positive integers to the elements of S
in such a way that the order is preserved. That is, we seek a function f: S →N so that if a ≺b then f (a) < f (b).
Such a function is called a consistent enumeration of S. The fact that this can always be done is the content of
the following theorem.
Theorem 14.1: There exists a consistent enumeration for any ﬁnite poset A.
We prove this theorem in Problem 14.8. In fact, we prove that if S has n elements then there exists a consistent
enumeration f: S →{1, 2, . . . , n}.
We emphasize that such an enumeration need not be unique. For example, the following are two such
enumerations for the poset in Fig. 14-1(b):
(i) f (d) = 1, f (e) = 2, f (b) = 3, f (c) = 4, f (a) = 5.
(ii) g(e) = 1, g(d) = 2, g(c) = 3, g(b) = 4, g(a) = 5.
However the chain in Fig. 14-1(c) admits only one consistent enumeration if we map the set into {1, 2, 3, 4, 5}.
Speciﬁcally, we must assign:
h(x) = 1,
h(y) = 2,
h(z) = 3,
h(u) = 4,
h(v) = 5
14.5
SUPREMUM AND INFIMUM
Let A be a subset of a partially ordered set S.An element M in S is called an upper bound of A if M succeeds
every element of A, i.e., if, for every x in A, we have
x ≾M
If an upper bound of A precedes every other upper bound of A, then it is called the supremum of A and is
denoted by
sup(A)
We also write sup(a1, . . . , an) instead of sup(A) if A consists of the elements a1, . . . , an. We emphasize that
there can be at most one sup(A); however, sup(A) may not exist.
Analogously, an element m in a poset S is called a lower bound of a subset A of S if m precedes every
element of A, i.e., if, for every y in A, we have
m ≾y
If a lower bound of A succeeds every other lower bound of A, then it is called the inﬁmum of A and is denoted by
inf(A),
or
inf(a1, . . . , an)
if A consists of the elements a1, . . . , an. There can be at most one inf(A) although inf(A) may not exist.
Some texts use the term least upper bound instead of supremum and then write lub(A) instead of sup(A),
and use the term greatest lower bound instead of inﬁmum and write glb(A) instead of inf(A).
If A has an upper bound we say A is bounded above, and if A has a lower bound we say A is bounded below.
In particular, A is bounded if A has an upper and lower bound.

CHAP. 14]
ORDERED SETS AND LATTICES
343
EXAMPLE 14.6
(a) Let S = {a, b, c, d, e, f } be ordered as pictured in Fig. 14-3(a), and let A = {b, c, d}. The upper bounds of
A are e and f since only e and f succeed every element in A. The lower bounds of A are a and b since only
a and b precede every element of A. Note that e and f are noncomparable; hence sup(A) does not exist.
However, b also succeeds a, hence inf(A) = b.
(b) Let S = {1, 2, 3, . . . , 8} be ordered as pictured in Fig. 14-3(b), and let A = {4, 5, 7}. The upper bounds of
A are 1, 2, and 3, and the only lower bound is 8. Note that 7 is not a lower bound since 7 does not precede 4.
Here sup(A) = 3 since 3 precedes the other upper bounds 1 and 2. Note that inf(A) = 8 since 8 is the only
lower bound.
Fig. 14-3
Fig. 14-4
Generally speaking, sup(a, b) and inf(a, b) need not exist for every pair of elements a and b in a poset S.
We now give two examples of partially ordered sets where sup(a, b) and inf(a, b) do exist for every a, b in
the set.
EXAMPLE 14.7
(a) Let the set N of positive integers be ordered by divisibility. The greatest common divisor of a and b in N,
denoted by
gcd(a, b)
is the largest integer which divides a and b. The least common multiple of a and b, denoted by
lcm(a, b)
is the smallest integer divisible by both a and b.
An important theorem in number theory says that every common divisor of a and b divides gcd(a, b).
One can also prove that lcm(a, b) divides every multiple of a and b. Thus
gcd(a, b) = inf(a, b)
and
lcm(a, b) = sup(a, b)
In other words, inf(a, b) and sup(a, b) do exist for any pair of elements of N ordered by divisibility.
(b) For any positive integer m, we will let Dm denote the set of divisors of m ordered by divisibility. The Hasse
diagram of
D36 = {1, 2, 3, 4, 6, 9, 12, 18, 36}
appears in Fig. 14-4. Again, inf(a, b) = gcd(a, b) and sup(a, b) = lcm(a, b) exist for any pair a, b in Dm.

344
ORDERED SETS AND LATTICES
[CHAP. 14
14.6
ISOMORPHIC (SIMILAR) ORDERED SETS
Suppose X and Y are partially ordered sets.Aone-to-one (injective) function f: X →Y is called a similarity
mapping from X into Y if f preserves the order relation, that is, if the following two conditions hold for any pair
a and a′ in X:
(1) If a ≾a′ then f (a) ≾f (a′).
(2) If a ∥a′ (noncomparable), then f (a)∥f (a′).
Accordingly, if A and B are linearly ordered, then only (1) is needed for f to be a similarity mapping.
Two ordered sets X and Y are said to be isomorphic or similar, written
X ≃Y
if there exists a one-to-one correspondence (bijective mapping) f: X →Y which preserves the order relations,
i.e., which is a similarity mapping.
EXAMPLE 14.8
Suppose X = {1, 2, 6, 8, 12} is ordered by divisibility and suppose Y = {a, b, c, d, e} is
isomorphic to X; say, the following function f is a similarity mapping from X onto Y:
f = {(1, e), (2, d), (6, b), (8, c), (12, a)}
Draw the Hasse diagram of Y.
The similarity mapping preserves the order of the initial set X and is one-to-one and onto. Thus the mapping
can be viewed simply as a relabeling of the vertices in the Hasse diagram of the initial set X. The Hasse diagrams
for both X and Y appear in Fig. 14-5.
Fig. 14-5
14.7
WELL-ORDERED SETS
We begin with a deﬁnition.
Deﬁnition 14.1: An ordered set S is said to be well-ordered if every subset of S has a ﬁrst element.
The classical example of a well-ordered set is the set N of positive integers with the usual order ≤.
The following facts follow from the deﬁnition.
(1) A well-ordered set is linearly ordered. For if a, b, ∈S, then {a, b} has a ﬁrst element; hence a and b are
comparable.
(2) Every subset of a well-ordered set is well-ordered.
(3) If X is well-ordered and Y is isomorphic to X, then Y is well-ordered.
(4) All ﬁnite linearly ordered sets with the same number n of elements are well-ordered and are all isomorphic
to each other. In fact, they are all isomorphic to {1, 2, . . . , n} with the usual order ≤.

CHAP. 14]
ORDERED SETS AND LATTICES
345
(5) Every element a ∈S, other than a last element, has an immediate successor. For, let M(a) denote the set of
elements which strictly succeed a. Then the ﬁrst element of M(a) is the immediate successor of a.
EXAMPLE 14.9
(a) The set Z of integers with the usual order ≤is linearly ordered and every element has an immediate successor
and an immediate predecessor, but Z is not well-ordered. For example, Z itself has no ﬁrst element. However,
any subset of Z which is bounded from below is well-ordered.
(b) The set Q of rational numbers with the usual order ≤is linearly ordered, but no element in Q has an immediate
successor or an immediate predecessor. For if a, b ∈Q, say a < b, then (a + b)/2 ∈Q and
a < a + b
2
< b
(c) Consider the disjoint well-ordered sets
A = {1, 3, 5, . . . , }
and
B = {2, 4, 6, . . .}
Then the following ordered set
S = {A; B} = {1, 3, 5, . . . ; 2, 4, 6, . . .}
is well-ordered. Note that, besides the ﬁrst element 1, the element 2 does not have an immediate predecessor.
Notation: Here and subsequently, if A, B, . . . are disjoint ordered sets, then {A; B; . . .} means the set A ∪B ∪. . .
ordered positionwise from left to right; that is, the elements in the same set keep their order, and any element in
a set on the left precedes any element in a set on its right. Thus every element in A precedes every element in B,
and so on.
Transﬁnite Induction
First we restate the principle of mathematical induction. (See Section 1.8 and 11.3.)
Principle of Mathematical Induction:
Let A be a subset of the set N of positive integers with the following
two properties:
(i) 1 ∈A.
(ii) If k ∈A, then k + 1 ∈A.
Then A = N.
The above principle is one of Peano’s axioms for the natural numbers (positive integers) N. There is another
form which is sometimes more convenient to use. Namely:
PrincipleofMathematicalInduction(SecondForm):
LetAbeasubsetofNwiththefollowingtwoproperties:
(i) 1 ∈A.
(ii) If j belongs to A for 1 ≤j < k, then k ∈A.
Then A = N.
The second form of induction is equivalent to the fact that N is well-ordered (Theorem 11.6). In fact, there
is a somewhat similar statement which is true for every well-ordered set.

346
ORDERED SETS AND LATTICES
[CHAP. 14
Principle of Transﬁnite Induction:
Let A be a subset of a well-ordered set S with the following two properties:
(i) a0 ∈A.
(ii) If s(a) ⊆A, then a ∈A.
Then A = S.
Here a0 is the ﬁrst element of S, and s(a), called the initial segment of a, is deﬁned to be the set of all
elements of S which strictly precede a.
Axiom of Choice, Well-Ordering Theorem
Let {Ai | i ∈I} be a collection of nonempty disjoint sets. We assume every Ai ⊆X.Afunction f: {Ai} →X
is called a choice function if f (Ai) = ai ∈Ai. In other words, f “chooses” a point ai ∈Ai for each set Ai.
The axiom of choice lies at the foundations of mathematics and, in particular, the theory of sets. This
“innocent looking” axiom, which follows, has as a consequence some of the most powerful and important results
in mathematics.
Axiom of Choice:
There exists a choice function for any nonempty collection of nonempty disjoint sets.
One of the consequences of the axiom of choice is the following theorem, which is attributed to Zermelo.
Well-Ordering Theorem:
Every set S can be well-ordered.
The proof of this theorem lies beyond the scope of this text. Moreover, since all of our structures are ﬁnite
or countable, we will not need to use this theorem. Ordinary mathematical induction sufﬁces.
14.8
LATTICES
There are two ways to deﬁne a lattice L. One way is to deﬁne L in terms of a partially ordered set. Speciﬁcally,
a lattice L may be deﬁned as a partially ordered set in which inf(a, b) and sup(a, b) exist for any pair of elements
a, b ∈L. Another way is to deﬁne a lattice L axiomatically. This we do below.
Axioms Deﬁning a Lattice
Let L be a nonempty set closed under two binary operations called meet and join, denoted respectively by
∧and ∨. Then L is called lattice if the following axioms hold where a, b, c are elements in L:
[L1] Commutative law:
(1a)
a ∧b = b ∧a
(1b)
a ∨b = b ∨a
[L2] Associative law:
(2a)
(a ∧b) ∧c = a ∧(b ∧c)
(2b)
(a ∨b) ∨c = a ∨(b ∨c)
[L3] Absorption law:
(3a)
a ∧(a ∨b) = a
(3b)
a ∨(a ∧b) = a
We will sometimes denote the lattice by (L, ∧, ∨) when we want to show which operations are involved.
Duality and the Idempotent Law
The dual of any statement in a lattice (L, ∧, ∨) is deﬁned to be the statement that is obtained by interchanging
∧and ∨. For example, the dual of
a ∧(b ∨a) = a ∨a
is
a ∨(b ∧a) = a ∧a

CHAP. 14]
ORDERED SETS AND LATTICES
347
Notice that the dual of each axiom of a lattice is also an axiom. Accordingly, the principle of duality holds;
that is:
Theorem 14.2 (Principle of Duality): The dual of any theorem in a lattice is also a theorem.
This follows from the fact that the dual theorem can be proven by using the dual of each step of the proof of
the original theorem.
An important property of lattices follows directly from the absorption laws.
Theorem 14.3 (Idempotent Law): (i) a ∧a = a;
(ii) a ∨a = a.
The proof of (i) requires only two lines:
a ∧a = a ∧(a ∨(a ∧b))
(using (3b))
= a
(using (3a))
The proof of (ii) follows from the above principle of duality (or can be proved in a similar manner).
Lattices and Order
Given a lattice L, we can deﬁne a partial order on L as follows:
a ≾b
if
a ∧b = a
Analogously, we could deﬁne
a ≾b
if
a ∨b = b
We state these results in a theorem.
Theorem 14.4: Let L be a lattice. Then:
(i) a ∧b = a if and only if a ∨b = b.
(ii) The relation a ≾b (deﬁned by a ∧b = a or a ∨b = b) is a partial order on L.
Now that we have a partial order on any lattice L, we can picture L by a diagram as was done for partially
ordered sets in general.
EXAMPLE 14.10 Let C be a collection of sets closed under intersection and union. Then (C, ∩, ∪) is a lattice.
In this lattice, the partial order relation is the same as the set inclusion relation. Figure 14-6 shows the diagram
of the lattice L of all subsets of {a, b, c}.
Fig. 14-6
We have shown how to deﬁne a partial order on a lattice L. The next theorem tells us when we can deﬁne a
lattice on a partially ordered set P such that the lattice will give back the original order on P.

348
ORDERED SETS AND LATTICES
[CHAP. 14
Theorem 14.5: Let P be a poset such that the inf(a, b) and sup(a, b) exist for any a, b in P. Letting
a ∧b = inf(a, b)
and
a ∨b = sup(a, b)
we have that (P, ∧, ∨) is a lattice. Furthermore, the partial order on P induced by the lattice is
the same as the original partial order on P.
The converse of the above theorem is also true. That is, let L be a lattice and let ≾be the induced partial order
on L. Then inf(a, b) and sup(a, b) exist for any pair a, b in L and the lattice obtained from the poset (L, ≾) is
the original lattice. Accordingly, we have the following:
Alternate Deﬁnition:
A lattice is a partially ordered set in which
a ∧b = inf(a, b)
and
a ∨b = sup(a, b)
exist for any pair of elements a and b.
We note ﬁrst that any linearly ordered set is a lattice since inf(a, b) = a and sup(a, b) = b whenever
a ≾b. By Example 14.7, the positive integers N and the set Dm of divisors of m are lattices under the relation of
divisibility.
Sublattices, Isomorphic Lattices
Suppose M is a nonempty subset of a lattice L. We say M is a sublattice of L if M itself is a lattice (with
respect to the operations of L). We note that M is a sublattice of L if and only if M is closed under the operations of
∧and ∨of L. For example, the set Dm of divisors of m is a sublattice of the positive integers N under divisibility.
Two lattices L and L′ are said to be isomorphic if there is a one-to-one correspondence f: L →L′ such that
f (a ∧b) = f (a) ∧f (b)
and
f (a ∨b) = f (a) ∨f (b)
for any elements a, b in L.
14.9
BOUNDED LATTICES
A lattice L is said to have a lower bound 0 if for any element x in L we have 0 ≾x. Analogously, L is said
to have an upper bound I if for any x in L we have x ≾I. We say L is bounded if L has both a lower bound 0
and an upper bound I. In such a lattice we have the identities
a ∨I = I,
a ∧I = a,
a ∨0 = a,
a ∧0 = 0
for any element a in L.
The nonnegative integers with the usual ordering,
0 < 1 < 2 < 3 < 4 < · · ·
have 0 as a lower bound but have no upper bound. On the other hand, the lattice P(U) of all subsets of any
universal set U is a bounded lattice with U as an upper bound and the empty set  as a lower bound.
Suppose L = {a1, a2, . . . , an} is a ﬁnite lattice. Then
a1 ∨a2 ∨· · · ∨an
and
a1 ∧a2 ∧· · · ∧an
are upper and lower bounds for L, respectively. Thus we have
Theorem 14.6: Every ﬁnite lattice L is bounded.

CHAP. 14]
ORDERED SETS AND LATTICES
349
14.10
DISTRIBUTIVE LATTICES
A lattice L is said to be distributive if for any elements a, b, c in L we have the following:
[L4] Distributive law:
(4a) a ∧(b ∨c) = (a ∧b) ∨(a ∧c)
(4b) a ∨(b ∧c) = (a ∨b) ∧(a ∨c)
Otherwise, L is said to be nondistributive. We note that by the principle of duality the condition (4a) holds if and
only if (4b) holds.
Figure 14-7(a) is a nondistributive lattice since
a ∨(b ∧c) = a ∨0 = a
but
(a ∨b) ∧(a ∨c) = I ∧c = c
Figure 14-7(b) is also a nondistributive lattice. In fact, we have the following characterization of such lattices.
Fig. 14-7
Theorem 14.7: A lattice L is nondistributive if and only if it contains a sublattice isomorphic to Fig. 14-7(a) or
to Fig. 14.7(b).
The proof of this theorem lies beyond the scope of this text.
Join Irreducible Elements, Atoms
Let L be a lattice with a lower bound 0. An element a in L is said to be join irreducible if a = x ∨y implies
a = x or a = y. (Prime numbers under multiplication have this property, i.e., if p = ab then p = a or p = b
where p is prime.) Clearly 0 is join irreducible. If a has at least two immediate predecessors, say, b1 and b2 as in
Fig. 14-8(a), then a = b1 ∨b2, and so a is not join irreducible. On the other hand, if a has a unique immediate
predecessor c, then a ̸= sup(b1, b2) = b1 ∨b2 for any other elements b1 and b2 because c would lie between the
b’s and a as in Fig. 14-8(b). In other words, a ̸= 0, is join irreducible if and only if a has a unique immediate
predecessor. Those elements which immediately succeed 0, called atoms, are join irreducible. However, lattices
can have other join irreducible elements. For example, the element c in Fig. 14-7(a) is not an atom but is join
irreducible since a is its only immediate predecessor.
Fig. 14-8

350
ORDERED SETS AND LATTICES
[CHAP. 14
If an element a in a ﬁnite lattice L is not join irreducible, then we can write a = b1 ∨b2. Then we can write
b1 and b2 as the join of other elements if they are not join irreducible; and so on. Since L is ﬁnite we ﬁnally have
a = d1 ∨d2 ∨· · · ∨dn
where the d’s are join irreducible. If di precedes dj then di ∨dj = dj; so we can delete the di from the expression.
In other words, we can assume that the d’s are irredundant, i.e., no d precedes any other d. We emphasize that
such an expression need not be unique, e.g., I = a ∨b and I = b ∨c in both lattices in Fig. 14-7. We now state
the main theorem of this section (proved in Problem 14.28.)
Theorem 14.8: Let L be a ﬁnite distributive lattice. Then every a in L can be written uniquely (except for order)
as the join of irredundant join irreducible elements.
Actually this theorem can be generalized to lattices with ﬁnite length, i.e., where all linearly ordered subsets
are ﬁnite. (Problem 14.30 gives an inﬁnite lattice with ﬁnite length.)
14.11
COMPLEMENTS, COMPLEMENTED LATTICES
Let L be a bounded lattice with lower bound 0 and upper bound I. Let a be an element of L. An element x
in L is called a complement of a if
a ∨x = I
and
a ∧x = 0
Complements need not exist and need not be unique. For example, the elements a and c are both complements
of b in Fig. 14-7(a). Also, the elements y, z, and u in the chain in Fig. 14-1 have no complements. We have the
following result.
Theorem 14.9: Let L be a bounded distributive lattice. Then complements are unique if they exist.
Proof: Suppose x and y are complements of any element a in L. Then
a ∨x = I,
a ∨y = I,
a ∧x = 0,
a ∧y = 0
Using distributivity,
x = x ∨0 = x ∨(a ∧y) = (x ∨a) ∧(x ∨y) = I ∧(x ∨y) = x ∨y
Similarly,
y = y ∨0 = y ∨(a ∧x) = (y ∨a) ∧(y ∨x) = I ∧(y ∨x) = y ∨x
Thus
x = x ∨y = y ∨x = y
and the theorem is proved.
Complemented Lattices
AlatticeLissaidtobecomplemented ifLisboundedandeveryelementinLhasacomplement.Figure14-7(b)
shows a complemented lattice where complements are not unique. On the other hand, the lattice P(U) of all subsets
of a universal set U is complemented, and each subset A of U has the unique complement Ac = U\A.
Theorem 14.10: Let L be a complemented lattice with unique complements. Then the join irreducible elements
of L, other than 0, are its atoms.
Combining this theorem and Theorems 14.8 and 14.9, we get an important result.
Theorem 14.11: Let L be a ﬁnite complemented distributive lattice. Then every element a in L is the join of a
unique set of atoms.
Remark: SometextsdeﬁnealatticeLtobecomplementedifeacha inLhasauniquecomplement.Theorem14.10
is then stated differently.

CHAP. 14]
ORDERED SETS AND LATTICES
351
Solved Problems
ORDERED SETS AND SUBSETS
14.1. Let N = {1, 2, 3, . . .} be ordered by divisibility. State whether each of the following subsets of N are
linearly (totally) ordered.
(a) {24, 2, 6};
(c) N = {1, 2, 3 . . .};
(e) {7};
(b) {3, 15, 5};
(d) {2, 8, 32, 4};
(f ) {15, 5, 30}.
(a) Since 2 divides 6 which divides 24, the set is linearly ordered.
(b) Since 3 and 5 are not comparable, the set is not linearly ordered.
(c) Since 2 and 3 are not comparable, the set is not linearly ordered.
(d ) This set is linearly ordered since 2 ≺4 ≺8 ≺32.
(e) Any set consisting of one element is linearly ordered.
(f ) Since 5 divides 15 which divides 30, the set is linearly ordered.
14.2. Let A = {1, 2, 3, 4, 5} be ordered by the Hasse diagram in Fig. 14-9(a).
(a) Insert the correct symbol, ≺, ≻, or ∥(not comparable), between each pair of elements:
(i) 1 ___ 5; (ii) 2 ___ 3; (iii) 4 ___ 1; (iv) 3 ___ 4.
(b) Find all minimal and maximal elements of A.
(c) Does A have a ﬁrst element or a last element?
(d) Let L(A) denote the collection of all linearly ordered subsets of A with 2 or more elements, and let
L(A) be ordered by set inclusion. Draw the Hasse diagram of L(A).
Fig. 14-9
(a)
(i) Since there is a “path” (edges slanting upward) from 5 to 3 to 1, 5 precedes 1; hence 1 ≻5.
(ii) There is no path from 2 to 3, or vice versa; hence 2 ∥3.
(iii) There is a path from 4 to 2 to 1; hence 4 ≺1.
(iv) Neither 3 ≺4 nor 4 ≺3; hence 3 ∥4.
(b) No element strictly precedes 4 or 5, so 4 and 5 are minimal elements of A. No element strictly succeeds 1, so 1
is a maximal element of A.
(c) A has no ﬁrst element. Although 4 and 5 are minimal elements of A, neither precedes the other. However, 1 is a
last element of A since 1 succeeds every element of A.
(d) The elements of L(A) are as follows:
{1, 2, 4},
{1, 2, 5},
{1, 3, 5},
{1, 2},
{1, 4},
{1, 3),
{1, 5},
{2, 4},
{2, 5},
{3, 5}
(Note {2, 5} and {3, 4} are not linearly ordered.) The diagram of L(A) appears in Fig. 14-9(b).

352
ORDERED SETS AND LATTICES
[CHAP. 14
14.3. Prerequisites in college is a familiar partial ordering of available classes. We write A ≺B if course A
is a prerequisite for course B. Let C be the ordered set consisting of the mathematics courses and their
prerequisites appearing in Fig. 14-10(a).
(a) Draw the Hasse diagram for the partial ordering C of these classes.
(b) Find all minimal and maximal elements of C.
(c) Does C have a ﬁrst element or a last element?
Fig. 14-10
(a) Math 101 must be on the bottom of the diagram since it is the only course with no prerequisites. Since Math 201
and Math 250 only require Math 101, we have Math 101 ≪Math 201and Math 101 ≪Math 250; hence draw a
line slanting upward from Math 101 to Math 201 and one from Math 101 to Math 250. Continuing this process,
we obtain the Hasse diagram in Fig. 14-10(b).
(b) No element strictly precedes Math 101 so Math 101 is a minimal element of C. No element strictly succeeds
Math 341 or Math 500, so each is a maximal element of C.
(c) Math 101 is a ﬁrst element of C since it precedes every other element of C. However, C has no last element.
Although Math 341 and Math 500 are maximal elements, neither is a last element since neither precedes the other.
PRODUCT SETS AND ORDER
14.4. Suppose N2 = N × N is given the product order (Section 14.2) where N has the usual order ≤.
Insert the correct symbol, ≺, ≻, or ∥(not comparable), between each of the following pairs of elements of
N × N:
(a) (5, 7) ___ (7, 1);
(c) (5, 5) ___ (4, 8);
(e) (7, 9) ___ (4, 1);
(b) (4, 6) ___ (4, 2);
(d) (1, 3) ___ (1, 7);
(f ) (7, 9) ___ (8, 2).
Here (a, b) ≺(a′, b′) if a < a′ and b ≤b′ or if a ≤a′ and b < b′. Thus:
(a) ∥since 5 < 7 but 7 > 1.
(c) ∥since 5 > 4 and 5 < 8.
(e) ≻since 7 > 4 and 9 > 1.
(b) ≻since 4 = 4 and 6 > 2.
(d) ≺since 1 = 1 and 3 < 7.
(f ) ∥since 7 < 8 and 9 > 2.
14.5. Repeat Problem 14.4 using the lexicographical ordering of N2 = N × N.
Here (a, b) ≺(a′, b′) if a < a′ or if a = a′ but b < b′. Thus:
(a) ≺since 5 < 7.
(c) ≻since 5 > 4.
(e) ≻since 7 > 4.
(b) ≻since 4 = 4 and 6 > 2.
(d) ≺since 1 = 1 but 3 < 7.
(f) ≺since 7 < 8.
14.6. Consider the English alphabet A = {a, b, c, . . . , y, z} with the usual (alphabetical) order. (Recall that A∗
consisting of all words in A.) Consider the following list of words in A∗:
went,
forget,
to,
medicine,
me,
toast,
melt,
for,
we,
arm
(a) Sort the list of words using the short-lex (free semigroup) order.

CHAP. 14]
ORDERED SETS AND LATTICES
353
(b) Sort the list of words using the usual (alphabetical) order of A∗.
(a) First order the elements by length and then order them lexicographically (alphabetically):
me,
to,
we,
arm,
for,
melt,
went,
toast,
forget,
medicine
(b) The usual (alphabetical) ordering yields:
arm,
for,
forget,
me,
medicine,
melt,
to,
toast,
we,
went
CONSISTENT ENUMERATIONS
14.7. Suppose a student wants to take all eight mathematics courses in Problem 14.3, but only one per semester.
(a) Which choice or choices does she have for her ﬁrst and for her last (eighth) semester?
(b) Suppose she wants to take Math 250 in her ﬁrst year (ﬁrst or second semester) and Math 340 in her
senior year (seventh or eighth semester). Find all the ways that she can take the eight courses.
(a) By Fig. 14-10, Math 101 is the only minimal element and hence must be taken in the ﬁrst semester, and Math 341
and 500 are the maximal elements and hence one of them must be taken in the last semester.
(b) Math 250 is not a minimal element and hence must be taken in the second semester, and Math 340 is not a maximal
element so it must be taken in the seventh semester and Math 341 in the eighth semester. Also Math 500 must be
taken in the sixth semester. The following gives the three possible ways to take the eight courses:
101, 250, 251, 201, 450, 500, 340, 341,
101, 250, 201, 251, 450, 500, 340, 341,
101, 250, 201, 450, 251, 500, 340, 341
14.8. Prove Theorem 14.1: Suppose S is a ﬁnite poset with n elements. Then there exists a consistent enumeration
f: S →{1, 2, . . . , n}.
The proof is by induction on the number n of elements in S. Suppose n = 1, say S = {s}. Then f (s) = 1 is a
consistent enumeration of S. Now suppose n > 1 and the theorem holds for posets with fewer than n elements. Let
a ∈S be a minimal element. (Such an element a exists since S is ﬁnite.) Let T = S\{a}. Then T is a ﬁnite poset with
n −1 elements and hence, by induction, T admits a consistent enumeration; say g: T →{1, 2, . . . , n −1}. Deﬁne
f: S →{1, 2, . . . , n} by:
f (x) =
 1,
if x = a
g(x) + 1
if x ̸= a
Then f is the required consistent enumeration.
UPPER AND LOWER BOUNDS, SUPREMUM AND INFIMUM
14.9. Let S = {a, b, c, d, e, f, g} be ordered as in Fig. 14-11(a), and let X = {c, d, e}.
(a) Find the upper and lower bounds of X.
(b) Identify sup(X), the supremum of X, and inf(X), the inﬁmum of X, if either exists.
(a) The elements e, f , and g succeed every element of X; hence e, f , and g are the upper bounds of X. The element
a precedes every element of X; hence a is the lower bound of X. Note that b is not a lower bound since b does
not precede c; in fact, b and c are not comparable.
(b) Since e precedes both f and g, we have e = sup(X). Likewise, since a precedes (trivially) every lower bound
of X, we have a = inf(X). Note that sup(X) belongs to X but inf(X) does not belong to X.
14.10. Let S = {1, 2, 3, . . . , 8} be ordered as in Fig. 14-11(b), and let A = (2, 3, 6}.
(a) Find the upper and lower bounds of A.
(b) Identify sup(A) and inf(A) if either exists.
(a) The upper bound is 2, and the lower bounds are 6 and 8.
(b) Here sup(A) = 2 and inf(A) = 6.

354
ORDERED SETS AND LATTICES
[CHAP. 14
Fig. 14-11
14.11. Repeat Problem 14.10 for the subset B = {1, 2, 5}.
(a) There is no upper bound for B since no element succeeds both 1 and 2. The lower bounds are 6, 7, 8.
(b) Trivially, sup(A) does not exist since there are no upper bounds. Although A has three lower bounds, inf(A)
does not exist since no lower bound succeeds both 6 and 7.
14.12. Consider the set Q of rational numbers with the usual order ≤. Consider the subset D of Q deﬁned by
D = {x | x ∈Q and 8 < x3 < 15}
(a) Is D bounded above or below? (b) Does sup(D) or inf(D) exist?
(a) The subset D is bounded both above and below. For example, 1 is a lower bound and 100 an upper bound.
(b) We claim that sup(D) does not exist. Suppose, on the contrary, sup(D) = x. Since 3√
15 is irrational, x >
3√
15.
However, there exists a rational number y such that
3√
15 < y < x. Thus y is also an upper bound for D. This
contradicts the assumption that x = sup(D). On the other hand, inf(D) does exist. Speciﬁcally, inf(D) = 2.
ISOMORPHIC (SIMILAR) SETS, SIMILARITY MAPPINGS
14.13. Suppose a poset A is isomorphic (similar) to a poset B and f : A →B is a similarity mapping. Are the
following statements true or false?
(a) An element a ∈A is a ﬁrst (last, minimal, or maximal) element of A if and only if f(a) is a ﬁrst (last,
minimal, or maximal) element of B.
(b) Anelementa∈Aimmediatelyprecedesanelementa′ ∈A,thatis, a ≪a′,ifandonlyiff (a) ≪f (a′).
(c) An element a ∈A has r immediate successors in A if and only if f(a) has r immediate successors in B.
All the statements are true; the order structure of A is the same as the order structure of B.
14.14. Let S = {a, b, c, d, e} be the ordered set in Fig. 14-12(a). Suppose A = {1, 2, 3, 4, 5} is isomorphic to
S. Draw the Hasse diagram of A if the following is a similarity mapping from S to A:
f = {(a, 1), (b, 3), (c, 5), (d, 2), (e, 4)}
The similarity mapping f preserves the order structure of S and hence f may be viewed simply as a relabeling
of the vertices in the diagram of S. Thus Fig. 14-12(b) shows the Hasse diagram of A.
14.15. Let A = {1, 2, 3, 4, 5} is ordered as in Fig. 14-12(b). Find the number n of similarity mappings f: A →A.
Since 1 is the only minimal element of A and 4 is the only maximal element, we must have f (1) = 1 and
f (4) = 4. Also, f (3) = 3 since 3 is the only immediate successor of 1. On the other hand, there are two possibilities
for f (2) and f (5), that is, we can have f (2) = 2 and f (5) = 5, or f (2) = 5 and f (5) = 2. Accordingly, n = 2.
14.16. Give an example of a ﬁnite nonlinearly ordered set X = (A, R) which is isomorphic to Y = (A, R−1),
the set A with the inverse order.
Let R be the partial ordering of A = {a, b, c, d, e} pictured in Fig. 14-13(a).
Then Fig. 14-13(b) shows A with the inverse order R. (The diagram of R is simply turned upside down to obtain
R−1.) Notice that the two diagrams are identical except for the labeling. Thus X is isomorphic to Y.

CHAP. 14]
ORDERED SETS AND LATTICES
355
Fig. 14-12
Fig. 14-13
14.17. Let A be an ordered set and, for each a ∈A, let p(a) denote the set of predecessors of a:
p(a) = {x | x ≾a}
(called the predecessor set of a). Let p(A) denote the collection of all predecessor sets of the elements
in A ordered by set inclusion.
(a) Show that A and p(A) are isomorphic by showing that the map f: A →p(A), deﬁned by f (a) = p(a),
is a similarity mapping of A onto p(A).
(b) Find the Hasse diagram of p(A) for the set A in Fig. 14-13(a).
(a) First we show that f preserves the order relation of A. Suppose a ≾b. Let x ∈p(a). Then x ≾a, and hence
a ≾b; so x ∈p(b). Thus p(a) ⊆p(b). Suppose a ∥b (noncomparable). Then a ∈p(a) but a /∈p(b); hence
p(a) ̸⊆p(b). Similarly, b ∈p(b) but b /∈p(a); hence p(b) ̸⊆p(a). Therefore, p(a) ∥p(b). Thus f preserves
order.
We now need only show that f is one-to-one and onto. Suppose y ∈p(A). Then y = p(a) for some a ∈A.
Thus f (a) = p(a) = y so f is onto p(A). Suppose a ̸= b. Then a ≺b, b ≺a or a ∥b. In the ﬁrst and third
cases, b ∈p(b) but b /∈p(a), and in the second case a ∈p(a) but a /∈p(b). Accordingly, in all three cases, we
have p(a) ̸= p(b). Therefore f is one-to-one.
Consequently, f is a similarity mapping of A onto p(A) and so A ≃p(A).
(b) The elements of p(A) follow:
p(a) = {a, c, d, e},
p(b) = {b, c, d, e},
p(c) = {c, d, e},
p(d) = {d},
p(e) = {e}
Figure 14-13(c) gives the diagram of p(A) ordered by set inclusion. Observe that the diagrams in Fig. 14-13(a)
and (c) are identical except for the labeling of the vertices.
WELL-ORDERED SETS
14.18. Prove the Principle of Transﬁnite Induction: Let A be a subset of a well-ordered set S with the following
two properties: (i) a0 ∈A. (ii) If s(a) ⊆A then a ∈A. Then A = S.
(Here a0 is the ﬁrst element of A, and s(a) is the initial segment of a, i.e., the set of all elements strictly preceding a.)
Suppose A ̸= S. Let B = S\A.Then B ̸= . Since S is well-ordered, B has a ﬁrst element b0. Each element x ∈s(b0)

356
ORDERED SETS AND LATTICES
[CHAP. 14
precedes b0 and hence does not belong to B. Thus every x ∈s(b0) belongs to A; hence s(b0) ⊆A. By (ii), b0 ∈A.
This contradicts the assumption that b0 ∈S\A. Thus the original assumption that A ̸= S is not true. Therefore A = S.
14.19. Let S be a well-ordered set with ﬁrst element a0. Deﬁne a limit element of S.
An element b ∈S is a limit element if b ̸= a0 and b has no immediate predecessor.
14.20. Consider the set N = {1, 2, 3, . . .} of positive integers. Every number in N can be written uniquely as a
product of a nonnegative power of 2 times an odd number. Suppose a, a′ ∈N and
a = 2r(2s + 1)
and
a′ = 2r′(2s′ + 1)
where r, r′ and s, s′ are nonnegative integers. Deﬁne:
a ≺a′
if r < r′
or
if r = r′ but s < s′.
(a) Insert the correct symbol, ≺or ≻, between each pair of numbers:
(i) 5 ___ 14;
(ii) 6 ___ 9;
(iii) 3 ___ 20;
(iv) 14 ___ 21
(b) Let S = (N, ≺). Show that S is well-ordered.
(c) Does S have any limit elements?
(a) The elements of N can be listed as in Fig. 14-14. The ﬁrst row consists of the odd numbers, the second row of
2 times the odd numbers, the third row of 22 = 4 times the odd numbers, and so on. Then a ≺a′ if a is in higher
row then, a′ or if a and a′ are in the same row but a comes before a′ in the row. Accordingly:
(i) 5 ≺14;
(ii) 6 ≻9;
(iii) 3 ≻20;
(iv) 14 ≻20.
Fig. 14-14
(b) Let A be a subset of S. The rows are well-ordered. Let r0 denote the minimum row of elements in A. In r0
there may be many elements of A. The columns are well-ordered, so let s0 denote the minimum column of the
elements of A in row r0. Then x = (r0, s0) is the ﬁrst element of A. Thus S is well-ordered.
(c) As indicated by Fig. 14-14, every power of 2, that is, 1, 2, 4, 8, . . ., has no immediate predecessor. Thus each,
other than 1, is a limit element of S.
14.21. Let S be a well-ordered set. Let f : S →S be a similarity mapping of S into S. Prove that, for every
a ∈S, we have a ≾f (a).
Let D = {x|f (x) ≺x}. If D is empty, then the statement is true. Suppose D ̸= . Since D is well-ordered, D
has a ﬁrst element, say d0. Since d0 ∈D, we have f (d0) ≺d0. Since f is a similarity mapping:
f (d0) ≺d0
implies
f (f (d0)) ≺f (d0)
Thus f (d0) also belongs to D. But f (d0) ≺d0 and f (d0) ∈D contradicts the fact that d0 is the ﬁrst element of
D. Hence the original assumption that D ̸=  leads to a contradiction. Therefore D is empty and the statement
is true.

CHAP. 14]
ORDERED SETS AND LATTICES
357
14.22. Let A be a well-ordered set. Let s(A) denote the collection of all initial segments s(a) of elements a ∈A
ordered by set inclusion. Prove A is isomorphic to s(A) by showing that the map f: A →s(A), deﬁned
by f (a) = s(a), is a similarity mapping of A onto s(A). (Compare with Problem 14.17.)
First we show that f is one-to-one and onto. Suppose y ∈s(A). Then y = s(a) for some a ∈A. Thus
f (a) = s(a) = y, so f is onto s(A). Suppose x ̸= y. Then one precedes the other, say, x ≺y. Then x ∈s(y). But
x /∈s(x). Thus s(x) ̸= s(y). Therefore, f is also one-to-one.
We now need only show that f preserves order, that is,
x ≾y
if and only if
s(x) ⊆s(y)
Suppose x ≾y. If a ∈s(x), then a ≺x and hence a ≺y; thus a ∈s(y). Thus s(x) ⊆s(y). On the other hand,
suppose x ̸≾y, that is, x ≻y. Then y ∈s(x). But y /∈s(y); hence s(x) ̸⊆s(y). In other words, x ≾y if and only if
s(x) ⊆s(y). Accordingly, f is a similarity mapping of A onto S(A), and so A ∼= s(A).
LATTICES
14.23. Write the dual of each statement:
(a) (a ∧b) ∨c = (b ∨c) ∧(c ∨a);
(b) (a ∧b) ∨a = a ∧(b ∨a).
Replace ∨by ∧and replace ∧by ∨in each statement to obtain the dual statement:
(a) (a ∨b) ∧c = (b ∧c) ∨(c ∧a);
(b) (a ∨b) ∧a = a ∨(b ∧a)
14.24. Prove Theorem 14.4: Let L be a lattice. Then:
(i) a ∧b = a if and only if a ∨b = b.
(ii) The relation a ≾b (deﬁned by a ∧b = a or a ∨b = b ) is a partial order on L.
(i) Suppose a ∧b = a. Using the absorption law in the ﬁrst step we have:
b = b ∨(b ∧a) = b ∨(a ∧b) = b ∨a = a ∨b
Now suppose a ∨b = b. Again using the absorption law in the ﬁrst step we have:
a = a ∧(a ∨b) = a ∧b
Thus a ∧b = a if and only if a ∨b = b.
(ii) For any a in L, we have a ∧a = a by idempotency. Hence a ≾a, and so ≾is reﬂexive.
Suppose a ≾b and b ≾a. Then a ∧b = a and b ∧a = b. Therefore, a = a ∧b = b ∧a = b, and so ≾is
antisymmetric.
Lastly, suppose a ≾b and b ≾c. Then a ∧b = a and b ∧c = b. Thus
a ∧c = (a ∧b) ∧c = a ∧(b ∧c) = a ∧b = a
Therefore a ≾c, and so ≾is transitive. Accordingly, ≾is a partial order on L.
14.25. Which of the partially ordered sets in Fig. 14-15 are lattices?
A partially ordered set is a lattice if and only if sup(x, y) and inf(x, y) exist for each pair x, y in the set. Only
(c) is not a lattice since {a, b} has three upper bounds, c, d and I, and no one of them precedes the other two, that is,
sup(a, b) does not exist.
14.26. Consider the lattice L in Fig. 14-15(a).
(a) Which nonzero elements are join irreducible?
(b) Which elements are atoms?

358
ORDERED SETS AND LATTICES
[CHAP. 14
Fig. 14-15
(c) Which of the following are sublattices of L:
L1 = {0, a, b, I},
L2 = {0, a, e, I},
L3 = {a, c, d, I},
L4 = {0, c, d, I}
(d) Is L distributive?
(e) Find complements, if they exist, for the elements, a, b and c.
(f) Is L a complemented lattice?
(a) Those nonzero elements with a unique immediate predecessor are join irreducible. Hence a, b, d, and e are join
irreducible.
(b) Those elements which immediately succeed 0 are atoms, hence a and b are the atoms.
(c) A subset L′ is a sublattice if it is closed under ∧and ∨. L1 is not a sublattice since a ∨b = c, which does not
belong to L1. The set L4 is not a sublattice since c ∧d = a does not belong to L4. The other two sets, L2 and
L3, are sublattices.
(d) L is not distributive since M = {0, a, d, e, I} is a sublattice which is isomorphic to the nondistributive lattice in
Fig. 14-7(a).
(e) We have a ∧e = 0 and a ∨e = I, so a and e are complements. Similarly, b and d are complements. However,
c has no complement.
(f) L is not a complemented lattice since c has no complement.
14.27. Consider the lattice M in Fig. 14-15(b).
(a) Find the nonzero join irreducible elements and atoms of M.
(b) Is M (i) distributive? (ii) complemented?
(a) The nonzero elements with a unique predecessor are a, b, and d, and of these three only a and b are atoms since
their unique predecessor is 0.
(b) (i) M is distributive since M does not have a sublattice isomorphic to one of the lattices in Fig. 14-7. (ii) M is
not complemented since b has no complement. Note a is the only solution to b ∧x = 0 but b ∧a = c ̸= I.
14.28. Prove Theorem 14.8: Let L be a ﬁnite distributive lattice. Then every a ∈L can be written uniquely
(except for order) as the join of irredundant join irreducible elements.
Since L is ﬁnite we can write a as the join of irredundant join irreducible elements as we discussed in Section 14.9.
Thus we need to prove uniqueness. Suppose
a = b1 ∨b2 ∨· · · ∨br = c1 ∨c2 ∨· · · ∨cs
where the b’s are irredundant and join irreducible and the c’s are irredundant and irreducible. For any given i we have
bi ≾(b1 ∨b2 ∨· · · ∨br) = (c1 ∨c2 ∨· · · ∨cs)

CHAP. 14]
ORDERED SETS AND LATTICES
359
Hence
bi = bi ∧(c1 ∨c2 ∨· · · ∨cs) = (bi ∧c1) ∨(bi ∧c2) ∨· · · ∨(bi ∧cs)
Since bi is join irreducible, there exists a j such that bi = bi ∧cj, and so bi ≾cj. By a similar argument, for cj
there exists a bk such that cj ≾bk. Therefore
bi ≾cj ≾bk
which gives bi = cj = bk since the b’s are irredundant. Accordingly, the b’s and c’s may be paired off. Thus the
representation for a is unique except for order.
14.29. ProveTheorem14.10:LetLbeacomplementedlatticewithuniquecomplements.Thenthejoinirreducible
elements of L, other than 0, are its atoms.
Suppose a is join irreducible and a is not an atom. Then a has a unique immediate predecessor b ̸= 0. Let b′ be
the complement of b. Since b ̸= 0 we have b′ ̸= I. If a precedes b′, then b ≾a ≾b′, and so b ∧b′ = b′, which
is impossible since b ∧b′ = I. Thus a does not precede b′, and so a ∧b′ must strictly precede a. Since b is the
unique immediate predecessor of a, we also have that a ∧b′ precedes b as in Fig. 14-16(a). But a ∧b′ precedes b′.
Hence
a ∧b′ ≾inf(b, b′) = b ∧b′ = 0
Thus a ∧b′ = 0. Since a ∨b = a, we also have that
a ∨b′ = (a ∨b) ∨b′ = a ∨(b ∨b′) = a ∨I = I
Therefore b′ is a complement of a. Since complements are unique, a = b. This contradicts the assumption that b is
an immediate predecessor of a. Thus the only join irreducible elements of L are its atoms.
Fig. 14-16
14.30. Give an example of an inﬁnite lattice L with ﬁnite length.
Let L = {0, 1, a1, a2, a3, . . .} and let L be ordered as in Fig. 14-16(b). Accordingly, for each n ∈N, we have
0 < an < 1. Then L has ﬁnite length since L has no inﬁnite linearly ordered subset.

360
ORDERED SETS AND LATTICES
[CHAP. 14
Supplementary Problems
ORDERED SETS AND SUBSETS
14.31. Let A = {1, 2, 3, 4, 5, 6} be ordered as in Fig. 14-17(a).
(a) Find all minimal and maximal elements of A.
(b) Does A have a ﬁrst or last element?
(c) Find all linearly ordered subsets of A, each of which contains at least three elements.
Fig. 14-17
14.32. Let B = {a, b, c, d, e, f } be ordered as in Fig. 14-17(b).
(a) Find all minimal and maximal elements of B.
(b) Does B have a ﬁrst or last element?
(c) List two and ﬁnd the number of consistent enumerations of B into the set {1, 2, 3, 4, 5, 6}.
14.33. Let C = {1, 2, 3, 4} be ordered as in Fig. 14-17(c). Let L(C) denote the collection of all nonempty linearly ordered
subsets of C ordered by set inclusion. Draw a diagram of L(C).
14.34. Draw the diagrams of the partitions of m (see Example 14.4) where:
(a) m = 4;
(b) m = 6.
14.35. Let Dm denote the positive divisors of m ordered by divisibility. Draw the Hasse diagrams of:
(a) D12; (b) D15; (c) D16; (d) D17.
14.36. Let S = {a, b, c, d, e, f } be a poset. Suppose there are exactly six pairs of elements where the ﬁrst immediately
precedes the second as follows:
f ≪a,
f ≪d,
e ≪b,
c ≪f,
e ≪c,
b ≪f
(a) Find all minimal and maximal elements of S.
(b) Does S have any ﬁrst or last element?
(c) Find all pairs of elements, if any, which are noncomparable.
14.37. State whether each of the following is true or false and, if it is false, give a counterexample.
(a) If a poset S has only one maximal element a, then a is a last element.
(b) If a ﬁnite poset S has only one maximal element a, then a is a last element.
(c) If a linearly ordered set S has only one maximal element a, then a is a last element.
14.38. Let S = {a, b, c, d, e} be ordered as in Fig. 14-18(a).
(a) Find all minimal and maximal elements of S.
(b) Does S have any ﬁrst or last element?
(c) Find all subsets of S in which c is a minimal element.
(d) Find all subsets of S in which c is a ﬁrst element.
(e) List all linearly ordered subsets with three or more elements

CHAP. 14]
ORDERED SETS AND LATTICES
361
Fig. 14-18
14.39. Let S = {a, b, c, d, e, f } be ordered as in Fig. 14-18(b).
(a) Find all minimal and maximal elements of S.
(b) Does S have any ﬁrst or last element?
(c) List all linearly ordered subsets with three or more elements.
14.40. Let S = {a, b, c, d, e, f, g} be ordered as in Fig. 14-11(a). Find the number n of linearly ordered subsets of S with:
(a) four elements; (b) ﬁve elements.
14.41. Let S = {1, 2, . . . , 7, 8} be ordered as in Fig. 14-11(b). Find the number n of linearly ordered subsets of S with:
(a) ﬁve elements; (b) six elements.
CONSISTENT ENUMERATIONS
14.42. Let S = {a, b, c, d, e} be ordered as in Fig. 14-18(a). List all consistent enumerations of S into {1, 2, 3, 4, 5}.
14.43. Let S = {a, b, c, d, e, f } be ordered as in Fig. 14-18(b). Find the number n of consistent enumerations of S into
{1, 2, 3, 4, 5, 6}.
14.44. Suppose the following are three consistent enumerations of an ordered set A = {a, b, c, d}:
[(a, 1), (b, 2), (c, 3), (d, 4)],
[(a, 1), (b, 3), (c, 2), (d, 4)],
[(a, 1), (b, 4), (c, 2), (d, 3)]
Assuming the Hasse diagram D of A is connected, draw D.
ORDER AND PRODUCT SETS
14.45. Let M = {2, 3, 4, . . .} and let M2 = M × M be ordered as follows:
(a, b) ≺(c, d)
if
a | c and b < d
Find all minimal and maximal elements of M × M.
14.46. Consider the English alphabet A = {a, b, c, . . . , y, z} with the usual (alphabetical) order. Recall A∗consists of all
words in A. Let L consist of the following list of elements in A∗:
gone,
or,
arm,
go,
an,
about,
gate,
one,
at,
occur
(a) Sort L according to the short-lex order, i.e., ﬁrst by length and then alphabetically.
(b) Sort L alphabetically.
14.47. Consider the ordered sets A and B appearing in Fig. 14-17(a) and (b), respectively. Suppose S = A × B is given the
product order. Insert the correct symbol, ≺, ≻or ∥, between each pair of elements of S:
(a) (4, b)___(2, e);
(b) (3, a)___(6, f );
(c) (5, d)___(1, a);
(d) (6, e)___(2, b).
14.48. Suppose N = {1, 2, 3, . . .} and A = {a, b, c, . . . , y, z} are given the usual orders, and S = N × A is ordered
lexicographically. Sort the following elements of S:
(2, z),
(1, c),
(2, c),
(1, y),
(4, b),
(4, z),
(3, b),
(2, a)

362
ORDERED SETS AND LATTICES
[CHAP. 14
UPPER AND LOWER BOUNDS, SUPREMUM AND INFIMUM
14.49. Let S = {a, b, c, d, e, f, g} be ordered as in Fig. 14-11(a). Let A = {a, c, d}.
(a) Find the set of upper bounds of A.
(c) Does sup(A) exist?
(b) Find the set of lower bounds of A.
(d) Does inf(A) exist?
14.50. Repeat Problem 14.49 for subset B = {b, c, e} of S.
14.51. Let S = {1, 2, . . . , 7, 8} be ordered as in Fig. 14-11(b). Consider the subset A = {3, 6, 7} of S.
(a) Find the set of upper bounds of A.
(c) Does sup(A) exist?
(b) Find the set of lower bounds of A.
(d) Does inf(A) exist?
14.52. Repeat Problem 14.51 for the subset B = {1, 2, 4, 7} of S.
14.53. Consider the rational numbers Q with the usual order ≤. Let A = {x | x ∈Q and 5 < x3 < 27}.
(a) Is A bounded above or below?
(b) Does sup(A) or inf(A) exist?
14.54. Consider the real numbers R with the usual order ≤. Let A = {x | x ∈Q and 5 < x3 < 27}.
(a) Is A bounded above or below?
(b) Does sup(A) or inf(A) exist?
ISOMORPHIC (SIMILAR) SETS, SIMILARITY MAPPINGS
14.55. Find the number of non-isomorphic posets with three elements a, b, c, and draw their diagrams.
14.56. Find the number of connected non-isomorphic posets with four elements a, b, c, d, and draw their diagrams.
14.57. Find the number of similarity mapings f: S →S where S is the ordered set in:
(a) Fig. 14-17(a);
(b) Fig. 14-17(b);
(c) Fig. 14-17(c).
14.58. Show that the isomorphism relation A ∼= B for ordered sets is an equivalence relation, that is:
(a) A ∼= A for any ordered set A.
(b) If A ∼= B, then B ∼= A.
(c) If A ∼= B and B ∼= C, then A ∼= C.
WELL-ORDERED SETS
14.59. Let the union S of sets A = {a1, a2, a3, . . .}, B = {b1, b2, b3, . . .}, C = {c1, c2, c3, . . .} be ordered by:
S = {A; B; C} = {a1, a2, . . . , b1, b2, . . . , c1, c2, . . .}
(a) Show that S is well-ordered.
(b) Find all limit elements of S.
(c) Show that S is not isomorphic to N = {1, 2, . . .} with the usual order ≤.
14.60. Let A = {a, b, c} be linearly ordered by a < b < c, and let N have the usual order ≤.
(a) Show that S = {A; N} is isomorphic to N.
(b) Show that S′ = {N; A} is not isomorphic to N.
14.61. Suppose A is a well-ordered set under the relation ≾, and suppose A is also well-ordered under the inverse relation ≿.
Describe A.
14.62. Suppose A and B are well-ordered isomorphic sets. Show that there is only one similarity mapping f: A →B.
14.63. Let S be a well-ordered set. For any a ∈S, the set s(a) = {x | x ≺a} is called an initial segment of a. Show that S
cannot be isomorphic to one of its initial segments. (Hint: Use Problem 14.21.)
14.64. Suppose s(a) and s(b) are distinct initial segments of a well-ordered set S. Show that s(a) and s(b) cannot be
isomorphic. (Hint: Use Problem 14.63.)

CHAP. 14]
ORDERED SETS AND LATTICES
363
LATTICES
14.65. Consider the lattice L in Fig. 14-19(a).
(a) Find all sublattices with ﬁve elements.
(c) Find complements of a and b, if they exist.
(b) Find all join-irreducible elements and atoms.
(d) Is L distributive? Complemented?
Fig. 14-19
14.66. Consider the lattice M in Fig. 14-19(b).
(a) Find all join-irreducible elements.
(b) Find the atoms.
(c) Find complements of a and b, if they exist.
(d) Express each x in M as the join of irredundant join-irreducible elements.
(e) Is M distributive? Complemented?
14.67. Consider the bounded lattice L in Fig. 14-20(a).
(a) Find the complements, if they exist, of e and f .
(b) Express I in an irredundant join-irreducible decomposition in as many ways as possible.
(c) Is L distributive?
(d) Describe the isomorphisms of L with itself.
Fig. 14-20
14.68. Consider the bounded lattice L in Fig. 14-20(b).
(a) Find the complements, if they exist, of a and c.
(b) Express I in an irredundant join-irreducible decomposition in as many ways as possible.
(c) Is L distributive?
(d) Describe the isomorphisms of L with itself.

364
ORDERED SETS AND LATTICES
[CHAP. 14
14.69. Consider the bounded lattice L in Fig. 14-20(c).
(a) Find the complements, if they exist, of a and c.
(b) Express I in an irredundant join-irreducible decomposition in as many ways as possible.
(c) Is L distributive?
(d) Describe the isomorphisms of L with itself.
14.70. Consider the lattice D60 = {1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30, 60}, the divisors of 60 ordered by divisibility.
(a) Draw the diagram of D60.
(b) Which elements are join-irreducible and which are atoms?
(c) Find complements of 2 and 10, if they exist.
(d) Express each number x as the join of a minimum number of irredundant join irreducible elements.
14.71. Consider the lattice N of positive integers ordered by divisibility.
(a) Which elements are join-irreducible ?
(b) Which elements are atoms?
14.72. Show that the following “weak” distributive laws hold for any lattice L:
(a) a ∨(b ∧c) ≤(a ∨b) ∧(a ∨c);
(b) a ∧(b ∨c) ≥(a ∧b) ∨(a ∧c).
14.73. Let S = {1, 2, 3, 4}. We use the notation [12, 3, 4] ≡[{1, 2}, {3}, {4}]. Three partitions of S follow:
P1 = [12, 3, 4],
P2 = [12, 34],
P3 = [13, 2, 4]
(a) Find the other twelve partitions of S.
(b) Let L be the collection of the 12 partitions of S ordered by reﬁnement, that is, Pi ≺Pj if each cell of Pi is a
subset of a cell of Pj. For example P1 ≺P2, but P2 and P3 are noncomparable. Show that L is a bounded lattice
and draw its diagram.
14.74. An element a in a lattice L is said to be meet-irreducible if a = x∧y implies a = x or a = y. Find all meet-irreducible
elements in: (a) Fig. 14-19(a); (b) Fig. 14-19(b); (c) D60 (see Problem 14.70.)
14.75. A lattice M is said to be modular if whenever a ≤c we have the law
a ∨(b ∧c) = (a ∨b) ∧c
(a) Prove that every distributive lattice is modular.
(b) Verify that the non-distributive lattice in Fig. 14-7(b) is modular; hence the converse of (a) is not true.
(c) Show that the nondistributive lattice in Fig. 14-7(a) is non-modular. (In fact, one can prove that every non-modular
lattice contains a sublattice isomorphic to Fig. 14-7(a).)
14.76. Let R be a ring. Let L be the collection of all ideals of R. Prove that L is a bounded lattice where, for any ideals J
and K of R, we deﬁne: J ∨K = J + K and J ∧K = J ∩K.
Answers to Supplementary Problems
14.31. (a) Minimal, 4 and 6; maximal, 1 and 2. (b) First,
none; last, none, (c) {1, 3, 4}, {1, 3, 6}, {2, 3, 4},
{2, 3, 6}, {2, 5, 6}.
14.32. (a) Minimal, d and f ; maximal, a. (b) First, none;
last, a. (c) There are eleven: dfebca, dfecba, dfceba,
fdebca, fdecba, fdceba, fedbca, fedcba, fcdeba,
fecdba, fcedba.

CHAP. 14]
ORDERED SETS AND LATTICES
365
14.33. See Fig. 14-21.
Fig. 14-21
14.34. See Fig. 14-22.
Fig. 14-22
14.35. See Fig. 14-23.
Fig. 14-23
14.36. Hint: Draw the diagram of S.
(a) Minimal, e; maximal, a, d.
(b) First, e; Last, none.
(c) {a, d}, {b, c}.
14.37. (a) False. Example: N ∪{a} where 1 ≪a, and N
ordered by ≤. (b) True. (c) True.
14.38. (a) Minimal, a; maximal, d and e. (b) First, a; last,
none. (c) Any subset which contains c and omits a;
that is: c, cb, cd, ce, cbd, cbe, cde, cbde. (d) c, cd,
ce, cde. (e) abd, acd, ace.
14.39. (a) Minimal, a and b; maximal, e and f . (b) First,
none; last, none. (c) ace, acf , bce, bcf , bdf .
14.40. (a) Four. (b) None.
14.41. (a) Six. (b) None.
14.42. abcde, abced, acbde, acbed, acebd.
14.43. Eleven.
14.44. a ≪b, a ≪c, c ≪d.
14.45. Minimal, (p, 2) where p is a prime. Maximal, none.
14.46. (a) an, at, go, or, arm, one, gate, gone, about, occur.
(b) an, about, arm, at, gate, go, gone, occur, one, or.
14.47. (a) ∥;
(b) >;
(c) ∥;
(d) <.
14.48. 1c, 1y, 2a, 2c, 2z, 3b, 4b, 4z
14.49. (a) e, f , g; (b) a; (c) sup(A) = e; (d) inf(A) = a.

366
ORDERED SETS AND LATTICES
[CHAP. 14
14.50. (a) e, f , g;
(b) none;
(c) sup(B) = e;
(d) none.
14.51. (a) 1, 2, 3; (b) 8; (c) sup(A) = 3; (d) inf(A) = 8.
14.52. (a) None;
(b) 8;
(c) none;
(d) inf(B) = 8.
14.53. (a) Both;
(b) sup(A) = 3; inf(A) does not exist.
14.54. (a) Both;
(b) sup(A) = 3; inf(A) =
3√
5
14.55. Four: (1) a, b, c;
(2) a, b ≪c;
(3) a ≪b, a ≪c.
(4) a ≪b ≪c.
14.56. Four: See Fig. 14-24.
Fig. 14-24
14.57. (a) One: Identity mapping;
(b) one;
(c) two.
14.59. (b) b1, c1;
(c) N has no limit points.
14.60. (a) Deﬁne f : S →N by f (a) = 1, f (b) = 2,
f (3) = 3, f (n) = n + 3.
(b) The element a is a limit point of S′, but N has no
limit points.
14.61. A is a ﬁnite linearly ordered set.
14.65. (a) Six: 0abdI, 0acdI, 0adeI, 0bceI, 0aceI, 0cdeI;
(b) (i) a, b, c, 0; (ii) a, b, c. (c) c and e are comple-
ments of a. b has no complement. (d) No. No.
14.66. (a) a, b, c, g, 0. (b) a, b, c. (c) a has g; b has none.
(d) I = a ∨g, f = a ∨b, e = b ∨c, d = a ∨c.
Other elements are join-irreducible. (e) No. No.
14.67. (a) e has none; f has b and c. (b) I = c ∨f =
b ∨f = b ∨d ∨f . (c) No, since decompositions are
not unique. (d) Two: 0, d, e, f , I must be mapped
into themselves. Then F = 1L, identity map on L,
or F = {(b, c), (c, b)}.
14.68. (a)a hasc;c hasa andb.(b)I = a∨c = b∨c. (c)No.
(d) Two: 0, c, d, I must be mapped into themselves.
Then f = 1L or f = {(a, b), (b, a)}.
14.69. (a) a has e, c has b and e. (b) I = a∨e = b∨c = c∨e.
(c) No. (d) Two: 0, d, I are mapped into themselves.
Then f = 1L or f = {(a, b), (b, a), (c, d), (d, c)}.
14.70. (a) See Fig. 14-25. (b) 1, 2, 3, 4, 5. The atoms are 2, 3
and 5. (c) 2 has none, 10 has none. (d) 60 = 4∨3∨5;
30 = 2∨3∨5; 20 = 4∨5; 15 = 3∨5; 12 = 3∨4;
10 = 2 ∨5; 6 = 2 ∨3.
Fig. 14-25
14.73. (a) [1, 2, 3, 4], [14, 2, 3], [13, 24], [14, 23], [123, 4],
[124, 3], [134, 2], [234, 1], [1234], [23, 1, 4] [24, 1, 3],
[34, 1, 2]. (b) See Fig. 14-26.
Fig. 14-26

CHAP. 14]
ORDERED SETS AND LATTICES
367
14.74. Geometrically, an element a ̸= I is meet-irreducible
if and only if a has only one immediate successor.
(a) a, c, d, e, I; (b) a, b, d, f , g, I; (c) 4, 6, 12,
15, 60.
14.75. (a) If a ≤c then a ∨c = c. Hence a ∨(b ∧c) =
(a ∨b) ∧(a ∨c) = (a ∨b) ∧c; (b) Here a ≤c. But
a ∨(b ∧c) = a ∨0 = a and (a ∨b)∧c = I ∧c = c;
hence a ∨(b ∧c) ̸= (a ∨b) ∧c.

CHAPTER 15
Boolean Algebra
15.1
INTRODUCTION
Both sets and propositions satisfy similar laws, which are listed in Tables 1-1 and 4-1 (in Chapters 1 and 4,
respectively). These laws are used to deﬁne an abstract mathematical structure called a Boolean algebra, which
is named after the mathematician George Boole (1815–1864).
15.2
BASIC DEFINITIONS
Let B be a nonempty set with two binary operations + and ∗, a unary operation ′, and two distinct elements
0 and 1. Then B is called a Boolean algebra if the following axioms hold where a, b, c are any elements in B:
[B1]
Commutative laws:
(1a)
a + b = b + a
(1b)
a ∗b = b ∗a
[B2]
Distributive laws:
(2a)
a + (b ∗c) = (a + b) ∗(a + c)
(2b)
a ∗(b + c) = (a ∗b) + (a ∗c)
[B3]
Identity laws:
(3a)
a + 0 = a
(3b)
a ∗1 = a
[B4]
Complement laws:
(4a)
a + a′ = 1
(4b)
a ∗a′ = 0
We will sometimes designate a Boolean algebra by ⟨B, +, ∗,
′, 0, 1⟩when we want to emphasize its six parts.
We say 0 is the zero element, l, is the unit element, and a′ is the complement of a. We will usually drop the symbol
∗and use juxtaposition instead. Then (2b) is written a(b + c) = ab + ac which is the familiar algebraic identity
of rings and ﬁelds. However, (2a) becomes a + bc = (a + b)(a + c), which is certainly not a usual identity
in algebra.
The operations +, ∗, and ′ are called sum, product, and complement, respectively. We adopt the usual
convention that, unless we are guided by parentheses, ′ has precedence over ∗, and ∗has precedence over +.
For example,
a + b ∗c means a + (b ∗c) and not (a + b) ∗c;
a ∗b′ means a ∗(b′) and not (a ∗b)′
Of course when a + b ∗c is written a + bc then the meaning is clear.
EXAMPLE 15.1
(a) Let B = {0, 1}, the set of bits (binary digits), with the binary operations of + and ∗and the unary operation ′
deﬁned by Fig. 15-1. Then B is a Boolean algebra. (Note ′ simply changes the bit, i.e., 1′ = 0 and 0′ = 1.)
368
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

CHAP. 15]
BOOLEAN ALGEBRA
369
Fig. 15-1
(b) Let Bn = B × B × · · · × B (n factors) where the operations of +, ∗, and ′ are deﬁned componentwise using
Fig. 15-1. For notational convenience, we write the elements of Bn as n-bit sequences without commas, e.g.,
x = 110011 and y = 111000 belong to Bn. Hence
x + y = 111011,
x ∗y = 110000,
x′ = 001100
Then Bn is a Boolean algebra. Here 0 = 000 · · · 0 is the zero element, and 1 = 111 · · · 1 is the unit element.
We note that Bn has 2n elements.
(c) Let D70 = {1, 2, 5, 7, 10, 14, 35, 70}, the divisors of 70. Deﬁne +, ∗, and ′ on D70 by
a + b = lcm(a, b),
a ∗b = gcd(a, b),
a′ = 70
a
Then D70 is a Boolean algebra with 1 the zero element and 70 the unit element.
(d) Let C be a collection of sets closed under the set operations of union, intersection, and complement. Then C
is a Boolean algebra with the empty set  as the zero element and the universal set U as the unit element.
Subalgebras, Isomorphic Boolean Algebras
Suppose C is a nonempty subset of a Boolean algebra B. We say C is a subalgebra of B if C itself is a
Boolean algebra (with respect to the operations of B). We note that C is a subalgebra of B if and only if C is
closed under the three operations of B, i.e., +, ∗, and ′. For example, {1, 2, 35, 70} is a subalgebra of D70 in
Example 15.1(c).
Two Boolean algebras B and B′ are said to be isomorphic if there is a one-to-one correspondence f: B →B′
which preserves the three operations, i.e., such that, for any elements, a, b in B,
f (a + b) = f (a) + f (b),
f (a ∗b) = f (a) ∗f (b)
and
f (a′) = f (a)′
15.3
DUALITY
The dual of any statement in a Boolean algebra B is the statement obtained by interchanging the operations
+ and ∗, and interchanging their identity elements 0 and 1 in the original statement. For example, the dual of
(1 + a) ∗(b + 0) = b
is
(0 ∗a) + (b ∗1) = b
Observe the symmetry in the axioms of a Boolean algebra B. That is, the dual of the set of axioms of B is the
same as the original set of axioms. Accordingly, the important principle of duality holds in B. Namely,
Theorem 15.1 (Principle of Duality): The dual of any theorem in a Boolean algebra is also a theorem.
In other words, if any statement is a consequence of the axioms of a Boolean algebra, then the dual is also a
consequence of those axioms since the dual statement can be proven by using the dual of each step of the proof
of the original statement.

370
BOOLEAN ALGEBRA
[CHAP. 15
15.4
BASIC THEOREMS
Using the axioms [B1] through [B4], we prove (Problem 15.5) the following theorem.
Theorem 15.2: Let a, b, c be any elements in a Boolean algebra B.
(i)
Idempotent laws:
(5a)
a + a = a
(5b)
a ∗a = a
(ii)
Boundedness laws:
(6a)
a + 1 = 1
(6b)
a ∗0 = 0
(iii)
Absorption laws:
(7a)
a + (a ∗b) = a
(7b)
a ∗(a + b) = a
(iv)
Associative laws:
(8a)
(a + b) + c = a + (b + c)
(8b)
(a ∗b) ∗c = a ∗(b ∗c)
Theorem 15.2 and our axioms still do not contain all the properties of sets listed in Table 1-1. The next
two theorems give us the remaining properties.
Theorem 15.3: Let a be any element of a Boolean algebra B.
(i) (Uniqueness of Complement) If a + x = 1 and a ∗x = 0, then x = a′.
(ii) (Involution law) (a′)′ = a.
(iii) (9a)
0′ = 1.
(9b)
1′ = 0.
Theorem 15.4 (DeMorgan’s laws): (10a)
(a + b)′ = a′ ∗b′. (10b)
(a ∗b)′ = a′ + b′.
We prove these theorems in Problems 15.6 and 15.7.
15.5
BOOLEAN ALGEBRAS AS LATTICES
By Theorem 15.2 and axiom [B1], every Boolean algebra B satisﬁes the associative, commutative, and
absorption laws and hence is a lattice where + and ∗are the join and meet operations, respectively. With respect
to this lattice, a +1 = 1 implies a ≤1 and a ∗0 = 0 implies 0 ≤a, for any element a ∈B. Thus B is a bounded
lattice. Furthermore, axioms [B2] and [B4] show that B is also distributive and complemented. Conversely, every
bounded, distributive, and complemented lattice L satisﬁes the axioms [B1] through [B4]. Accordingly, we have
the following
Alternate Deﬁnition:
A Boolean algebra B is a bounded, distributive and complemented lattice.
Since a Boolean algebra B is a lattice, it has a natural partial ordering (and so its diagram can be drawn).
Recall (Chapter 14) that we deﬁne a ≤b when the equivalent conditions a + b = b and a ∗b = a hold.
Since we are in a Boolean algebra, we can actually say much more.
Theorem 15.5: The following are equivalent in a Boolean algebra:
(1)
a + b = b,
(2)
a ∗b = a,
(3)
a′ + b = 1,
(4)
a ∗b′ = 0
Thus in a Boolean alegbra we can write a ≤b whenever any of the above four conditions is known to be true.
EXAMPLE 15.2
(a) Consider a Boolean algebra of sets. Then set A precedes set B if A is a subset of B. Theorem 15.4 states that
if A ⊆B then the following conditions hold:
(1) A ∪B = B
(2) A ∩B = A
(3) Ac ∪B = U
(4) A ∩Bc = 

CHAP. 15]
BOOLEAN ALGEBRA
371
(b) Consider the Boolean algebra D70. Then a precedes b if a divides b. In such a case, lcm(a, b) = b and
gcd(a, b) = a. For example, let a = 2 and b = 14. Then the following conditions hold:
(1)
lcm(2, 14) = 14.
(3)
lcm(2′, 14) = lcm(35, 14) = 70.
(2)
gcd(2, 14) = 2.
(4)
gcd(2, 14′) = gcd(2, 5) = 1.
15.6
REPRESENTATION THEOREM
Let B be a ﬁnite Boolean algebra. Recall (Section 14.10) that an element a in B is an atom if a immediately
succeeds 0, that is if 0 ≪a. Let A be the set of atoms of B and let P(A) be the Boolean algebra of all subsets of
the set A of atoms. By Theorem 14.8, each x ̸= 0 in B can be expressed uniquely (except for order) as the sum
( join) of atoms, i.e., elements of A. Say,
x = a1 + a2 + · · · + ar
is such a representation. Consider the function f: B →P(A) deﬁned by
f (x) = {a1, a2, . . . , ar}
The mapping is well deﬁned since the representation is unique.
Theorem 15.6: The above mapping f: B →P(A) is an isomorphism.
Thus we see the intimate relationship between set theory and abstract Boolean algebras in the sense that
every ﬁnite Boolean algebra is structurally the same as a Boolean algebra of sets.
If a set A has n elements, then its power set P(A) has 2n elements. Thus the above theorem gives us our
next result.
Corollary 15.7: A ﬁnite Boolean algebra has 2n elements for some positive integer n.
EXAMPLE 15.3 Consider the Boolean algebra D70 = {1, 2, 5, . . . , 70} whose diagram is given in Fig. 15-2(a).
Note that A = {2, 5, 7} is the set of atoms of D70. The following is the unique representation of each nonatom
by atoms:
10 = 2 ∨5,
14 = 2 ∨7,
35 = 5 ∨7,
70 = 2 ∨5 ∨7
Figure 15-2(b) gives the diagram of the Boolean algebra of the power set P(A) of the set A of atoms. Observe
that the two diagrams are structurally the same.
Fig. 15-2
15.7
SUM-OF-PRODUCTS FORM FOR SETS
This section motivates the concept of the sum-of-products form in Boolean algebra by an example of set
theory. Consider the Venn diagram in Fig. 15-3 of three sets A, B, and C. Observe that these sets partition the

372
BOOLEAN ALGEBRA
[CHAP. 15
Fig. 15-3
rectangle (universal set) into eight numbered sets which can be represented as follows:
(1)
A ∩B ∩C
(3)
A ∩Bc ∩C
(5)
A ∩Bc ∩Cc
(7)
Ac ∩Bc ∩C
(2)
A ∩B ∩Cc
(4)
Ac ∩B ∩C
(6)
Ac ∩B ∩Cc
(8)
Ac ∩Bc ∩Cc
Each of these eight sets is of the form A∗∩B∗∩C∗where:
A∗= A or Ac,
B∗= B or Bc,
C∗= C or Cc
Consider any nonempty set expression E involving the sets A, B, and C, say,
E = [(A ∩Bc)c ∪(Ac ∩Cc)] ∩[(Bc ∪C)c ∩(A ∪Cc)]
Then E will represent some area in Fig. 15-3 and hence will uniquely equal the union of one or more of the
eight sets.
Suppose we now interpret a union as a sum and an intersection as a product. Then the above eight sets are
products, and the unique representation of E will be a sum (union) of products. This unique representation of E
is the same as the complete sum-of-products expansion in Boolean algebras which we discuss below.
15.8
SUM-OF-PRODUCTS FORM FOR BOOLEAN ALGEBRAS
Consider a set of variables (or letters or symbols), say x1, x2, . . . , xn. A Boolean expression E in these
variables, sometimes written E(x1, . . . , xn), is any variable or any expression built up from the variables using
the Boolean operations +, ∗, and ′. (Naturally, the expression E must be well-formed, that is, where + and ∗are
used as binary operations, and ′ is used as a unary operation.) For example,
E1 = (x + y′z)′ + (xyz′ + x′y)′
and
E2 = ((xy′z′ + y)′ + x′z)′
are Boolean expressions in x, y, and z.
A literal is a variable or complemented variable, such as x, x′, y, y′, and so on. A fundamental product is a
literal or a product of two or more literals in which no two literals involve the same variable. Thus
xz′,
xy′z,
x,
y′,
x′yz
are fundamental products, but xyx′z and xyzy are not. Note that any product of literals can be reduced to either
0 or a fundamental product, e.g., xyx′z = 0 since xx′ = 0 (complement law), and xyzy = xyz since yy = y
(idempotent law).
A fundamental product P1 is said to be contained in (or included in) another fundamental product P2 if the
literals of P1 are also literals of P2. For example, x′z is contained in x′yz, but x′z is not contained in xy′z since
x′ is not a literal of xy′z. Observe that if P1 is contained in P2, say P2 = P1 ∗Q, then, by the absorption law,
P1 + P2 = P1 + P1 ∗Q = P1
Thus, for instance, x′z + x′yz = x′z.

CHAP. 15]
BOOLEAN ALGEBRA
373
Deﬁnition 15.1: A Boolean expression E is called a sum-of-products expression if E is a fundamental product
or the sum of two or more fundamental products none of which is contained in another.
Deﬁnition 15.2: Let E be any Boolean expression. A sum-of-products form of E is an equivalent Boolean
sum-of-products expression.
EXAMPLE 15.4 Consider the expressions
E1 = xz′ + y′z + xyz′
and
E2 = xz′ + x′yz′ + xy′z
Although the ﬁrst expression E1 is a sum of products, it is not a sum-of-products expression. Speciﬁcally,
the product xz′ is contained in the product xyz′. However, by the absorption law, E1 can be expressed as
E1 = xz′ + y′z + xyz′ = xz′ + xyz′ + y′z = xz′ + y′z
This yields a sum-of-products form for E1. The second expression E2 is already a sum-of-products expression.
Algorithm for Finding Sum-of-Products Forms
Figure 15-4 gives a four-step algorithm which uses the Boolean algebra laws to transform any Boolean
expression into an equivalent sum-of-products expression.
Fig. 15-4
EXAMPLE 15.5 Suppose Algorithm 15.1 is applied to the following Boolean expression:
E = ((xy)′z)′((x′ + z)(y′ + z′))′
Step 1. Using DeMorgan’s laws and involution, we obtain
E = (xy′′ + z′)((x′ + z)′ + (y′ + z′)′) = (xy + z′)(xz′ + yz)
E now consists only of sums and products of literals.
Step 2. Using the distributive laws, we obtain
E = xyxz′ + xyyz + xz′z′ + yzz′
E now is a sum of products.
Step 3. Using the commutative, idempotent, and complement laws, we obtain
E = xyz′ + xyz + xz′ + 0
Each term in E is a fundamental product or 0.

374
BOOLEAN ALGEBRA
[CHAP. 15
Step 4. The product xz′ is contained in xyz′; hence, by the absorption law,
xz′ + (xz′y) = xz′
Thus we may delete xyz′ from the sum. Also, by the identity law for 0, we may delete 0 from the sum.
Accordingly,
E = xyz + xz′
E is now represented by a sum-of-products expression.
Complete Sum-of-Products Forms
A Boolean expression E = E(x1, x2, . . . , xn) is said to be a complete sum-of-products expression if E is a
sum-of-products expression where each product P involves all the n variables. Such a fundamental product P
which involves all the variables is called a minterm, and there is a maximum of 2n such products for n variables.
The following theorem applies.
Theorem 15.8: Every nonzero Boolean expression E = E(x1, x2, . . . , xn) is equivalent to a complete
sum-of-products expression and such a representation is unique.
The above unique representation of E is called the complete sum-of-products form of E. Algorithm 15-1
in Fig. 15-4 tells us how to transform E into a sum-of-products form. Figure 15-5 contains an algorithm which
transforms a sum-of-products form into a complete sum-of-products form.
Fig. 15-5
EXAMPLE 15.6 Express E(x, y, z) = x(y′z)′ into its complete sum-of-products form.
(a) Apply Algorithm 15.1 to E so E is represented by a sum-of-products expression:
E = x(y′z)′ = x(y + z′) = xy + xz′
(b) Now apply Algorithm 15.2 to obtain:
E = xy(z + z′) + xz′(y + y′) = xyz + xyz′ + xyz′ + xy′z′
= xyz + xyz′ + xy′z′
Now E is reprsented by its complete sum-of-products form.
Warning: The terminology in this section has not been standardized. The sum-of-products form for a Boolean
expression E is also called the disjunctive normal form or DNF of E. The complete sum-of-products form for
E is also called the full disjunctive normal form, or the disjunctive canonical form, or the minterm canonical
form of E.

CHAP. 15]
BOOLEAN ALGEBRA
375
15.9
MINIMAL BOOLEAN EXPRESSIONS, PRIME IMPLICANTS
There are many ways of representing the same Boolean expression E. Here we deﬁne and investigate a
minimal sum-of-products form for E. We must also deﬁne and investigate prime implicants of E since the
minimal sum-of-products involves such prime implicants. Other minimal forms exist, but their investigation lies
beyond the scope of this text.
Minimal Sum-of-Products
Consider a Boolean sum-of-products expression E. Let EL denote the number of literals in E (counted
according to multiplicity), and let ES denote the number of summands in E. For instance, suppose
E = xyz′ + x′y′t + xy′z′t + x′yzt
Then EL = 3 + 3 + 4 + 4 = 14 and ES = 4.
Suppose E and F are equivalent Boolean sum-of-products expressions. We say E is simpler than F if:
(i) EL < FL and ES ≤FL,
or
(ii) EL ≤FL and ES < FL
We say E is minimal if there is no equivalent sum-of-products expression which is simpler than E. We note that
there can be more than one equivalent minimal sum-of-products expressions.
Prime Implicants
A fundamental product P is called a prime implicant of a Boolean expression E if
P + E = E
but no other fundamental product contained in P has this property. For instance, suppose
E = xy′ + xyz′ + x′yz′
One can show (Problem 15.15) that:
xz′ + E = E
but
x + E ̸= E
and
z′ + E ̸= E
Thus xz′ is a prime implicant of E.
The following theorem applies.
Theorem 15.9: A minimal sum-of-products form for a Boolean expression E is a sum of prime implicants of E.
The following subsections give a method for ﬁnding the prime implicants of E based on the notion of the
consensus of fundamental products. This method can then be used to ﬁnd a minimal sum-of-products form for E.
Section 15.12 gives a geometric method for ﬁnding such prime implicants.
Consensus of Fundamental Products
Let P1 and P2 be fundamental products such that exactly one variable, say xk, appears uncomplemented
in one of P1 and P2 and complemented in the other. Then the consensus of P1 and P2 is the product (without
repetitions) of the literals of P1 and the literals of P2 after xk and x′
k are deleted. (We do not deﬁne the consensus
of P1 = x and P2 = x′.)
The following lemma (proved in Problem 15.19) applies.
Lemma 15.10: Suppose Q is the consensus of P1 and P2. Then P1 + P2 + Q = P1 + P2.
EXAMPLE 15.7 Find the consensus Q of P1 and P2 where:
(a) P1 = xyz′s and P2 = xy′t.
Delete y and y′ and then multiply the literals of P1 and P2 (without repetition) to obtain Q = xz′st.

376
BOOLEAN ALGEBRA
[CHAP. 15
(b) P1 = xy′ and P2 = y.
Deleting y and y′ yields Q = x.
(c) P1 = x′yz and P2 = x′yt.
No variable appears uncomplemented in one of the products and complemented in the other. Hence P1 and
P2 have no consensus.
(d) P1 = x′yz and P2 = xyz′.
Each of x and z appear complemented in one of the products and uncomplemented in the other. Hence P1
and P2 have no consensus.
Consensus Method for Finding Prime Implicants
Figure 15-6 contains an algorithm, called the consensus method, which is used to ﬁnd the prime implicants
of a Boolean expression E. The following theorem gives the basic property of this algorithm.
Theorem 15.11: The consensus method will eventually stop, and then E will be the sum of its prime implicants.
Fig. 15-6
EXAMPLE 15.8 Let E = xyz + x′z′ + xyz′ + x′y′z + x′yz′. Then:
E = xyz + x′z′ + xyz′ + x′y′z
(x′yz′ includes x′z′)
= xyz + x′y′ + xyz′ + x′y′z + xy
(consensus of xyz and xyz′)
= x′z′ + x′y′z + xy
(xyz and xyz′ include xy)
= x′z′ + x′y′z + xy + x′y′
(consensus of x′z′ and x′y′z)
= x′z′ + xy + x′y′
(x′y′z includes x′y′)
= x′z′ + xy + x′y′ + yz′
(consensus of x′z′ and xy)
Now neither step in the consensus method will change E. Thus E is the sum of its prime implicants, which appear
in the last line, that is, x′z′, xy, x′y′, and yz′.
Finding a Minimal Sum-of-Products Form
The consensus method (Algorithm 15.3) is used to express a Boolean expression E as a sum of all its
prime implicants. Figure 15-7 contains an algorithm which uses such a sum to ﬁnd a minimal sum-of-products
form for E.

CHAP. 15]
BOOLEAN ALGEBRA
377
Fig. 15-7
EXAMPLE 15.9 We apply Algorithm 15.4 to the following expression E which (by Example 15.8) is now
expressed as the sum of all its prime implicants:
E = x′z′ + xy + x′y′ + yz′
Step 1. Express each prime implicant of E as a complete sum-of-products to obtain:
x′z′ = x′z′(y + y′) = x′yz′ + x′y′z′
xy = xy(z + z′) = xyz + xyz′
x′y′ = x′y′(z + z′) = x′y′z + x′y′z′
yz′ = yz′(x + x′) = xyz′ + x′yz′
Step 2. The summands of x′z′ are x′yz and x′y′z′ which appear among the other summands. Thus delete x′z′
to obtain
E = xy + x′y′ + yz′
The summands of no other prime implicant appear among the summands of the remaining prime implicants, and
hence this is a minimal sum-of-products form for E. In other words, none of the remaining prime implicants is
superﬂuous, that is, none can be deleted without changing E.
15.10
LOGIC GATES AND CIRCUITS
Logic circuits (also called logic networks) are structures which are built up from certain elementary circuits
called logic gates. Each logic circuit may be viewed as a machine L which contains one or more input devices
and exactly one output device. Each input device in L sends a signal, speciﬁcally, a bit (binary digit),
0
or
1
to the circuit L, and L processes the set of bits to yield an output bit. Accordingly, an n-bit sequence may be
assigned to each input device, and L processes the input sequences one bit at a time to produce an n-bit output
sequence. First we deﬁne the logic gates, and then we investigate the logic circuits.
Logic Gates
There are three basic logic gates which are described below. We adopt the convention that the lines entering
the gate symbol from the left are input lines and the single line on the right is the output line.
(a) OR Gate: Figure 15-8(a) shows an OR gate with inputs A and B and output Y = A + B where “addition”
is deﬁned by the “truth table” in Fig. 15-8(b). Thus the output Y = 0 only when inputs A = 0 and B = 0.
Such an OR gate may, have more than two inputs. Figure 15-8(c) shows an OR gate with four inputs, A, B,
C, D, and output Y = A + B + C + D. The output Y = 0 if and only if all the inputs are 0.

378
BOOLEAN ALGEBRA
[CHAP. 15
Fig. 15-8
Suppose, for instance, the input data for the OR gate in Fig. 15-15(c) are the following 8-bit sequences:
A = 10000101,
B = 10100001,
C = 00100100,
10010101
The OR gate only yields 0 when all input bits are 0. This occurs only in the 2nd, 5th, and 7th positions
(reading from left to right). Thus the output is the sequence Y = 10110101.
(b) AND Gate: Figure 15-9(a) shows an AND gate with inputs A and B and output Y = A · B (or simply
Y = AB) where “multiplication” is deﬁned by the “truth table” in Fig. 15-9(b). Thus the output Y = 1 when
inputs A = 1 and B = 1; otherwise Y = 0. Such anAND gate may have more than two inputs. Figure 15-9(c)
shows an AND gate with four inputs, A, B, C, D, and output Y = A · B · C · D. The output Y = 1 if and
only if all the inputs are 1.
Suppose, for instance, the input data for the AND gate in Fig. 15-9(c) are the following 8-bit sequences:
A = 11100111,
B = 01111011,
C = 01110011,
D = 11101110
The AND gate only yields 1 when all input bits are 1. This occurs only in the 2nd, 3rd, and 7th positions.
Thus the output is the sequence Y = 01100010.
Fig. 15-9
(c) NOT Gate: Figure 15-10(a) shows a NOT gate, also called an inverter, with input A and output Y = A′
where “inversion,” denoted by the prime, is deﬁned by the “truth table” in Fig. 15-10(b). The value of
the output Y = A′ is the opposite of the input A; that is, A′ = 1 when A = 0 and A′ = 0 when A = 1.
We emphasize that a NOTgate can have only one input, whereas the OR andAND gates may have two or more
inputs.
Fig. 15-10

CHAP. 15]
BOOLEAN ALGEBRA
379
Suppose, for instance, a NOT gate is asked to process the following three sequences:
A1 = 110001,
A2 = 10001111,
A3 = 101100111000
The NOT gate changes 0 to 1 and 1 to 0. Thus
A′
1 = 001110,
A′
2 = 01110000,
A′
3 = 010011000111
are the three corresponding outputs.
Logic Circuits
A logic circuit L is a well-formed structure whose elementary components are the above OR, AND, and
NOT gates. Figure 15-11 is an example of a logic circuit with inputs A, B, C and output Y. A dot indicates a
place where the input line splits so that its bit signal is sent in more than one direction. (Frequently, for notational
convenience, we may omit the word from the interior of the gate symbol.) Working from left to right, we express
Y in terms of the inputs A, B, C as follows. The output of the AND gate is A · B, which is then negated to yield
(A · B)′. The output of the lower OR gate is A′ + C, which is then negated to yield (A′ + C)′. The output of the
OR gate on the right, with inputs (A · B)′ and (A′ + C)′, gives us our desired representation, that is,
Y = (A · B)′ + (A′ + C)′
Fig. 15-11
Logic Circuits as a Boolean Algebra
Observe that the truth tables for the OR, AND, and NOT gates are respectively identical to the truth tables
for the propositions p ∨q (disjunction, “p or q”), p ∧q (conjunction, “p and q”), and ¬p (negation, “not p”),
which appear in Section 4.3. The only difference is that 1 and 0 are used instead of T and F. Thus the logic circuits
satisfy the same laws as do propositions and hence they form a Boolean algebra. We state this result formally.
Theorem 15.12: Logic circuits form a Boolean Algebra.
Accordingly, all terms used with Boolean algebras, such as, complements, literals, fundamental products,
minterms, sum-of-products, and complete sum-of-products, may also be used with our logic circuits.
AND-OR Circuits
The logic circuit L which corresponds to a Boolean sum-of-products expression is called anAND-OR circuit.
Such a circuit L has several inputs, where:
(1) Some of the inputs or their complements are fed into each AND gate.
(2) The outputs of all the AND gates are fed into a single OR gate.
(3) The output of the OR gate is the output for the circuit L.
The following illustrates this type of a logic circuit.

380
BOOLEAN ALGEBRA
[CHAP. 15
EXAMPLE 15.10 Figure 15-12 is a typical AND-OR circuit with three inputs, A, B, C and output Y. We can
easily express Y as a Boolean expression in the inputs A, B, C as follows. First we ﬁnd the output of each
AND gate:
(a) The inputs of the ﬁrst AND gate are A, B, C; hence A · B · C is the output.
(b) The inputs of the second AND gate are A, B′, C; hence A · B′ · C is the output.
(c) The inputs of the third AND gate are A′ and B; hence A′ · B is the output.
Then the sum of the outputs of the AND gates is the output of the OR gate, which is the output Y of the circuit.
Thus:
Y = A · B · C + A · B′ · C + A′ · B
Fig. 15-12
NAND and NOR Gates
There are two additional gates which are equivalent to combinations of the above basic gates.
(a) A NAND gate, pictured in Fig. 15-13(a), is equivalent to an AND gate followed by a NOT gate.
(b) A NOR gate, pictured in Fig. 15-13(b), is equivalent to an OR gate followed by a NOT gate.
The truth tables for these gates (using two inputs A and B) appear in Fig. 15-13(c). The NAND and NOR
gates can actually have two or more inputs just like the corresponding AND and OR gates. Furthermore, the
output of a NAND gate is 0 if and only if all the inputs are 1, and the output of a NOR gate is 1 if and only if
all the inputs are 0.
Fig. 15-13
Observe that the only difference between the AND and NAND gates between the OR and NOR gates is that
the NAND and NOR gates are each followed by a circle. Some texts also use such a small circle to indicate a
complement before a gate. For example, the Boolean expressions corresponding to two logic circuits in Fig. 15-14
are as follows:
(a)
Y = (A′B)′,
(b)
Y = (A′ + B′ + C)′

CHAP. 15]
BOOLEAN ALGEBRA
381
Fig. 15-14
15.11
TRUTH TABLES, BOOLEAN FUNCTIONS
Consider a logic circuit L with n = 3 input devices A, B, C and output Y, say
Y = A · B · C + A · B′ · C + A′ · B
Each assignment of a set of three bits to the inputs A, B, C yields an output bit for Y. All together there are
2n = 23 = 8 possible ways to assign bits to the inputs as follows:
000,
001,
010,
011,
100,
101,
110,
111
The assumption is that the sequence of ﬁrst bits is assigned to A, the sequence of second bits to B, and the
sequence of third bits to C. Thus the above set of inputs may be rewritten in the form
A = 00001111,
B = 00110011,
C = 01010101
We emphasize that these three 2n = 8-bit sequences contain the eight possible combinations of the input bits.
The truth table T = T (L) of the above circuit L consists of the output sequence Y that corresponds to the
input sequences A, B, C. This truth table T may be expressed using fractional or relational notation, that is,
T may be written in the form
T (A, B, C) = Y
or
T (L) = [A, B, C; Y]
This form for the truth table for L is essentially the same as the truth table for a proposition discussed in Section 4.4.
The only difference is that here the values for A, B, C, and Y are written horizontally, whereas in Section 4.4
they are written vertically.
ConsideralogiccircuitLwithninputdevices.TherearemanywaystoformninputsequencesA1, A2, . . . , An
so that they contain the 2n different possible combinations of the input bits. (Note that each sequence must contain
2n bits.) One assignment scheme is as follows:
A1: Assign 2n−1 bits which are 0’s followed by 2n−1 bits which are 1’s.
A2: Repeatedly assign 2n−2 bits which are 0’s followed by 2n−2 bits which are 1’s.
A3: Repeatedly assign 2n−3 bits which are 0’s followed by 2n−3 bits which are 1’s.
And so on. The sequences obtained in this way will be called special sequences. Replacing 0 by 1 and 1 by 0 in
the special sequences yields the complements of the special sequences.
Remark: Assuming the input are the special sequences, we frequently do not need to distinguish between the
truth table
T (L) = [A1, A2, . . . , An;Y]
and the output Y itself.

382
BOOLEAN ALGEBRA
[CHAP. 15
EXAMPLE 15.11
(a) Suppose a logic circuit L has n = 4 input devices A, B, C, D. The 2n = 24 = 16-bit special sequences for
A, B, C, D follow:
A = 0000000011111111,
C = 00110011001100110011
B = 0000111100001111,
D = 01010101010101010101
That is:
(1) A begins with eight 0’s followed by eight 1’s. (Here 2n−1 = 23 = 8.)
(2) B begins with four 0’s followed by four 1’s, and so on. (Here 2n−2 = 22 = 4.)
(3) C begins with two 0’s followed by two 1’s, and so on. (Here 2n−3 = 21 = 2.)
(4) D begins with one 0 followed by one 1, and so on. (Here 2n−4 = 20 = 1.)
(b) Suppose a logic circuit L has n = 3 input devices A, B, C. The 2n = 23 = 8-bit special sequences for A, B,
C and their complements A′, B′, C′ are as follows:
A = 00001111,
B = 00110011,
C = 01010101
A′ = 11110000,
B′ = 11001100,
C′ = 10101010
Figure 15-15 contains a three-step algorithm for ﬁnding the truth table for a logic circuit L where the output
Y is given by a Boolean sum-of-products expression in the inputs.
Fig. 15-15
EXAMPLE 15.12 Algorithm 15.5 is used to ﬁnd the truth table T = T (L) of the logic circuit L in Fig. 15-12
or, equivalently, of the above Boolean sum-of-products expression
Y = A · B · C + A · B′ · C + A′ · B
(1) The special sequences and their complements appear in Example 15.14(b).
(2) The products are as follows:
A · B · C = 00000001,
A · B′ · C = 00000100,
A′ · B = 00110000
(3) The sum is Y = 00110101.
Accordingly,
T (00001111, 00110011, 01010101) = 00110101
or simply T (L) = 00110101 where we assume the input consists of the special sequences.

CHAP. 15]
BOOLEAN ALGEBRA
383
Boolean Functions
Let E be a Boolean expression with n variables x1, x2, . . . , xn. The entire discussion above can also be
applied to E where now the special sequences are assigned to the variables x1, x2, . . . , xn instead of the input
devices A1, A2, . . . , An. The truth table T = T (E) of E is deﬁned in the same way as the truth table T = T (L)
for a logic circuit L. For example, the Boolean expression
E = xyz + xy′z + x′y
which is analogous to the logic circuit L in Example 15.12, yields the truth table
T (00001111, 00110011, 01010101) = 00110101
or simply T (E) = 00110101, where we assume the input consists of the special sequences.
Remark: The truth table for a Boolean expression E = E(x1, x2, . . . , xn) with n variables may also be viewed
as a “Boolean” function from Bn into B. (The Boolean algebras Bn and B = {0, 1} are deﬁned in Example 15.1.)
That is, each element in Bn is a list of n bits which when assigned to the list of variables in E produces an element
in B. The truth table T (E) of E is simply the graph of the function.
EXAMPLE 15.13
(a) Consider Boolean expressions E = E(x, y, z) with three variables. The eight minterms (fundamental prod-
ucts involving all three variables) are as follows:
xyz,
xyz′,
xy′z,
x′yz,
xy′z′,
x′yz′,
x′y′z′
The truth tables for these minterms (using the special sequences for x, y, z) follow:
xyz = 00000001,
xyz′ = 00000010,
xy′z = 00000100,
x′yz = 00001000
xy′z′ = 00010000,
x′yz′ = 00100000,
x′y′z = 01000000,
x′y′z′ = 10000000
Observe that each minterm assumes the value 1 in only one of the eight positions.
(b) Consider the Boolean expression E = xyz′ + x′yz + x′y′z. Note that E is a complete sum-of-products
expression containing three minterms. Accordingly, the truth table T = T (E) for E, using the special
sequences for x, y, z, can be easily obtained from the sequences in part (a). Speciﬁcally, the truth table T (E)
will contain exactly three 1’s in the same positions as the 1’s in the three minterms in E. Thus
T (00001111, 00110011, 01010101) = 01001010
or simply T (E) = 01001010.
15.12
KARNAUGH MAPS
Karnaugh maps, where minterms involving the same variables are represented by squares, are pictorial
devices for ﬁnding prime implicants and minimal forms for Boolean expressions involving at most six variables.
We will only treat the cases of two, three, and four variables. In the context of Karnaugh maps, we will sometimes
use the terms “squares” and “minterm” interchangeably. Recall that a minterm is a fundamental product which
involves all the variables, and that a complete sum-of-products expression is a sum of minterms.
First we need to deﬁne the notion of adjacent products. Two fundamental products P1 and P2 are said to
be adjacent if P1 and P2 have the same variables and if they differ in exactly one literal. Thus there must be
an uncomplemented variable in one product and complemented in the other. In particular, the sum of two such
adjacent products will be a fundamental product with one less literal.

384
BOOLEAN ALGEBRA
[CHAP. 15
EXAMPLE 15.14 Find the sum of adjacent products P1 and P2 where:
(a) P = xyz′ and P2 = xy′z′.
P1 + P2 = xyz′ + xy′z′ = xz′(y + y′) = xz′(1) = xz′
(b) P1 = x′yzt and P2 = x′yz′t.
P1 + P2 = x′yzt + x′yz′t = x′yt(z + z′) = x′yt(1) = x′yt
(c) P1 = x′yzt and P2 = xyz′t.
Here P1 and P2 are not adjacent since they differ in two literals. In particular,
P1 + P2 = x′yzt + xyz′t = (x′ + x)y(z + z′)t = (1)y(1)t = yt
(d) P1 = xyz′ and P2 = xyzt.
Here P1 and P2 are not adjacent since they have different variables. Thus, in particular, they will not appear
as squares in the same Karnaugh map.
Case of Two Variables
The Karnaugh map corresponding to Boolean expressions E = E(x, y) with two variables x and y is shown
in Fig. 15-16(a). The Karnaugh map may be viewed as a Venn diagram where x is represented by the points in
the upper half of the map, shaded in Fig. 15-16(b), and y is represented by the points in the left half of the map,
shaded in Fig. 15-16(c). Thus x′ is represented by the points in the lower half of the map, and y′ is represented
by the points in the right half of the map. Accordingly, the four possible minterms with two literals,
xy,
xy′,
x′y,
x′y′
are represented by the four squares in the map, as labeled in Fig. 15-16(d). Note that two such squares are adjacent,
as deﬁned above, if and only if the squares are geometrically adjacent (have a side in common).
Fig. 15-16
Any complete sum-of-products Boolean expression E(x, y) is a sum of minterms and hence can be repre-
sented in the Karnaugh map by placing checks in the appropriate squares. A prime implicant of E(x, y) will be
either a pair of adjacent squares in E or an isolated square, i.e., a square which is not adjacent to any other square
of E(x, y). A minimal sum-of-products form for E(x, y) will consist of a minimal number of prime implicants
which cover all the squares of E(x, y) as illustrated in the next example.
EXAMPLE 15.15 Find the prime implicants and a minimal sum-of-products form for each of the following
complete sum-of-products Boolean expressions:
(a)
E1 = xy + xy′;
(b)
E2 = xy + x′y + x′y′;
(c)
E3 = xy + x′y′

CHAP. 15]
BOOLEAN ALGEBRA
385
This can be solved by using Karnaugh maps as follows:
(a) Check the squares corresponding to xy and xy′ as in Fig. 15-17(a). Note that E1 consists of one prime
implicant, the two adjacent squares designated by the loop in Fig. 15-17(a). This pair of adjacent squares
represents the variable x, so x is a (the only) prime implicant of E1. Consequently, E1 = x is its minimal
sum.
Fig. 15-17
(b) Check the squares corresponding to xy, x′y, and x′y′ as in Fig. 15-17(b). Note that E2 contains two pairs of
adjacent squares (designated by the two loops) which include all the squares of E2.The vertical pair represents
y and the horizontal pair represents x′; hence y and x′ are the prime implicants of E2. Thus E2 = x′ + y is
its minimal sum.
(c) Check the squares corresponding to xy and x′y′ as in Fig. 15-17(c). Note that E3 consists of two isolated
squares which represent xy and x′y′; hence xy and x′y′ are the prime implicants of E3 and E3 = xy + x′y′
is its minimal sum.
Case of Three Variables
The Karnaugh map corresponding to Boolean expressions E = E(x, y, z) with three variables x, y, z is
shown in Fig. 15-18(a). Recall that there are exactly eight minterms with three variables:
xyz,
xyz′,
xy′z′,
xy′z,
x′yz,
x′yz′,
x′y′z′,
x′y′z
These minterms are listed so that they correspond to the eight squares in the Karnaugh map in the obvious way.
Furthermore, in order that every pair of adjacent products in Fig. 15-18(a) are geometrically adjacent, the
right and left edges of the map must be identiﬁed. This is equivalent to cutting out, bending, and gluing the
map along the identiﬁed edges to obtain the cylinder pictured in Fig. 15-18(b) where adjacent products are now
represented by squares with one edge in common.
Fig. 15-18
Viewing the Karnaugh map in Fig. 15-18(a) as a Venn diagram, the areas represented by the variables x, y,
and z are shown in Fig. 15-19. Speciﬁcally, the variable x is still represented by the points in the upper half of
the map, as shaded in Fig. 15-19(a), and the variable y is still represented by the points in the left half of the
map, as shaded in Fig. 15-19(b). The new variable z is represented by the points in the left and right quarters of

386
BOOLEAN ALGEBRA
[CHAP. 15
Fig. 15-19
the map, as shaded in Fig. 15-19(c). Thus x′, y′, and z′ are represented, respectively, by points in the lower half,
right half, and middle two quarters of the map.
By a basic rectangle in the Karnaugh map with three variables, we mean a square, two adjacent squares, or four
squares which form a one-by-four or a two-by-two rectangle. These basic rectangles correspond to fundamental
products of three, two, and one literal, respectively. Moreover, the fundamental product represented by a basic
rectangle is the product of just those literals that appear in every square of the rectangle.
Suppose a complete sum-of-products Boolean expression E = E(x, y, z) is represented in the Karnaugh
map by placing checks in the appropriate squares.Aprime implicant of E will be a maximal basic rectangle of E,
i.e., a basic rectangle contained in E which is not contained in any larger basic rectangle in E. A minimal sum-of-
products form for E will consist of a minimal cover of E, that is, a minimal number of maximal basic rectangles
of E which together include all the squares of E.
EXAMPLE 15.16 Find the prime implicants and a minimal sum-of-products form for each of the following
complete sum-of-products Boolean expressions:
(a) E1 = xyz + xyz′ + x′yz′ + x′y′z.
(b) E2 = xyz + xyz′ + xy′z + x′yz + x′y′z.
(c) E3 = xyz + xyz′ + x′yz′ + x′y′z′ + x′y′z.
This can be solved by using Karnaugh maps as follows:
(a) Check the squares corresponding to the four summands as in Fig. 15-20(a). Observe that E1 has three prime
implicants (maximal basic rectangles), which are circled; these are xy, yz′, and x′y′z. All three are needed
to cover E1; hence the minimal sum for E1 is
E1 = xy + yz′ + x′y′z
(b) Check the squares corresponding to the ﬁve summands as in Fig. 15-20(b). Note that E2 has two prime
implicants, which are circled. One is the two adjacent squares which represents xy, and the other is the
two-by-two square (spanning the identiﬁed edges) which represents z. Both are needed to cover E2, so the
minimal sum for E2 is
E2 = xy + z
Fig. 15-20

CHAP. 15]
BOOLEAN ALGEBRA
387
(c) Check the squares corresponding to the ﬁve summands as in Fig. 15-20(c). As indicated by the loops, E3 has
four prime implicants, xy, yz′, x′z′, and x′y′. However, only one of the two dashed ones, i.e., one of yz′ or
x′z′, is needed in a minimal cover of E3. Thus E3 has two minimal sums:
E3 = xy + yz′ + x′y′ = xy + x′z′ + x′y′
EXAMPLE 15.17 Design a three-input minimal AND-OR circuit L with the following truth table:
T = [A, B, C; L] = [00001111, 00110011, 01010101; 11001101]
From the truth table we can read off the complete sum-of-products form for L (as in Example 15.10):
L = A′B′C′ + A′B′C + AB′C′ + AB′C + ABC
The associated Karnaugh map is shown in Fig. 15-21(a). Observe that L has two prime implicants, B′ and AC,
in its minimal cover; hence L = B′ + AC is a minimal sum for L. Figure 15-21(b) gives the corresponding
minimal AND-OR circuit for L.
Fig. 15-21
Case of Four Variables
The Karnaugh map corresponding to Boolean expressions E = E(x, y, z, t) with four variables x, y, z, t
is shown in Fig. 15-22. Each of the 16 squares corresponds to one of the 16 minterms with four variables,
xyzt,
xyzt′,
xyz′t′,
xyz′t,
. . . , x′yz′t
as indicated by the labels of the row and column of the square. Observe that the top line and the left side are
labeled so that adjacent products differ in precisely one literal. Again we must identify the left edge with the
right edge (as we did with three, variables) but we must also identify the top edge with the bottom edge. (These
identiﬁcations give rise to a donut-shaped surface called a torus, and we may view our map as really being a
torus.)
Fig. 15-22

388
BOOLEAN ALGEBRA
[CHAP. 15
Abasic rectangle in a four-variable Karnaugh map is a square, two adjacent squares, four squares which form
a one-by-four or two-by-two rectangle, or eight squares which form a two-by-four rectangle. These rectangles
correspond to fundamental products with four, three, two, and one literal, respectively. Again, maximal basic
rectangles are the prime implicants. The minimization technique for a Boolean expression E(x, y, z, t) is the
same as before.
EXAMPLE 15.18 Find the fundamental product P represented by the basic rectangle in the Karnaugh maps
shown in Fig. 15-23.
In each case, ﬁnd the literals which appear in all the squares of the basic rectangle; P is the product of such
literals.
(a) xy, and z′ appear in both squares; hence P = xy′z′.
(b) Only y and z appear in all four squares; hence P = yz.
(c) Only t appears in all eight squares; hence P = t.
Fig. 15-23
EXAMPLE 15.19 Use a Karnaugh map to ﬁnd a minimal sum-of-products form for
E = xy′ + xyz + x′y′z′ + x′yzt′
Check all the squares representing each fundamental product. That is, check all four squares representing
xy′, the two squares representing xyz, the two squares representing x′y′z′, and the one square representing
x′yzt′, as in Fig. 15-24. A minimal cover of the map consists of the three designated maximal basic rectangles.
Fig. 15-24

CHAP. 15]
BOOLEAN ALGEBRA
389
The two-by-two squares represent the fundamental products xz and y′z′, and the two adjacent squares (on top
and bottom) represents yzt′. Hence
E = xz + y′z′ + yzt′
is a minimal sum for E.
Solved Problems
BOOLEAN ALGEBRAS
15.1. Write the dual of each Boolean equation: (a) (a ∗1) ∗(0 + a′) = 0; (b) a + a′b = a + b.
(a) To obtain the dual equation, interchange + and ∗, and interchange 0 and 1. Thus
(a + 0) + (1 ∗a′) = 1
(b) First write the equation using ∗to obtain a + (a′ ∗b) = a + b. Then the dual is a ∗(a′ + b) = a ∗b, which can
be written as
a(a′ + b) = ab
15.2. Recall (Chapter 14) that the set Dm of divisors of m is a bounded, distributive lattice with
a + b = a ∨b = lcm(a, b)
and
a ∗b = a ∧b = gcd(a, b).
(a) Show that Dm is a Boolean algebra if m is square free, i.e., if m is a product of distinct primes.
(b) Find the atoms of Dm.
(a) We need only show that Dm is complemented. Let x be in Dm and let x′ = m/x. Since m is a product of distinct
primes, x and x′ have different prime divisors. Hence x ∗x′ = gcd(x, x′) = 1 and x + x′ = 1cm(x, x′) = m.
Recall that 1 is the zero element (lower bound) of Dm and that m is the identity element (upper bound) of Dm.
Thus x′ is a complement of x, and so Dm is a Boolean algebra.
(b) The atoms of Dm are the prime divisors of m.
15.3. Consider the Boolean algebra D210.
(a) List its elements and draw its diagram.
(b) Find the set A of atoms.
(c) Find two subalgebras with eight elements.
(d) Is X = {1, 2, 6, 210} a sublattice of D210? A subalgebra?
(e) Is Y = {1, 2, 3, 6} a sublattice of D210? A subalgebra?
(a) The divisors of 210 are 1, 2, 3, 5, 6, 7, 10, 14, 15, 21, 30, 35, 42, 70, 105, and 210. The diagram of D210 appears
in Fig. 15-25.
(b) A = {2, 3, 5, 7}, the set of prime divisors of 210.
(c) B = {1, 2, 3, 35, 6, 70, 105, 210} and C = {1, 5, 6, 7, 30, 35, 42, 210} are subalgebras of D210.
(d) X is a sublattice since it is linearly ordered. However, X is not a subalgebra since 35 is the complement of
2 in D210 but 35 does not belong to X. (In fact, no Boolean algebra with more than two elements is linearly
ordered.)
(e) Y is a sublattice of D210 since it is closed under + and ∗. However, Y is not a subalgebra of D210 since it is not
closed under complements in D210, e.g., 35 = 2′ does not belong to Y. (We note that Y itself is a Boolean algebra;
in fact, Y = D6.)

390
BOOLEAN ALGEBRA
[CHAP. 15
Fig. 15-25
15.4. Find the number of subalgebras of D210.
A subalgebra of D210 must contain two, four, eight or sixteen elements.
(i) There can be only one two-element subalgebra which consists of the upper bound 210 and lower bound 1, i.e.,
{1, 210}.
(ii) Since D210 contains sixteen elements, the only sixteen-element subalgebra is D210 itself.
(iii) Any four-element subalgebra is of the form {1, x, x′, 210}, i.e., consists of the upper and lower bounds and a
nonbound element and its complement. There are fourteen nonbound elements in D210 and so there are 14/2 = 7
pairs {x, x′}. Thus D210 has seven four-element subalgebras.
(iv) Any eight-element subalgebra S will itself contain three atoms s1, s2, s3. We can choose s1 and s2 to be any two
of the four atoms of D210 and then s3 must be the product of the other two atoms, e.g., we can let s1 = 2, s2 = 3,
s3 = 5 · 7 = 35 (which determines the subalgebra B above), or we can let s1 = 5, s2 = 7, s3 = 2 · 3 = 6 (which
determines the subalgebra C above). There are
 4
2

= 6 ways to choose s1 and s2 from the four atoms of D210
and so D210 has six eight-element subalgebras.
Accordingly, D210 has 1 + 1 + 7 + 6 = 15 subalgebras.
15.5. Prove Theorem 15.2: Let a, b, c be any element in a Boolean algebra B.
(i) Idempotent laws:
(5a)
a + a = a
(5b)
a ∗a = a
(ii) Boundedness laws:
(6a)
a + 1 = 1
(6b)
a ∗0 = 0
(iii) Absorption Laws:
(7a)
a + (a ∗b) = a
(7b)
a ∗(a + b) = a
(iv) Associative Laws:
(8a)
(a + b) + c = a + (b + c)
(8b)
(a ∗b) ∗c = a ∗(b ∗c)
(5b)
a = a ∗1 = a ∗(a + a′) = (a ∗a) + (a ∗a′) = (a ∗a) + 0 = a ∗a
(5a)
Follows from (5b) and duality.
(6b)
a ∗0 = (a ∗0) + 0 = (a ∗0) + (a ∗a′) = a ∗(0 + a′) = a ∗(a′ + 0) = a ∗a′ = 0
(6a)
Follows from (6b) and duality.
(7b)
a ∗(a + b) = (a + 0) ∗(a + b) = a + (0 ∗b) = a + (b ∗0) = a + 0 = a
(7a)
Follows from (7b) and duality.
(8b) Let L = (a ∗b) ∗c and R = a ∗(b ∗c). We need to prove that L = R. We ﬁrst prove that a + L = a + R.
Using the absorption laws in the last two steps,
a + L = a + ((a ∗b) ∗c) = (a + (a ∗b)) ∗(a + c) = a ∗(a + c) = a

CHAP. 15]
BOOLEAN ALGEBRA
391
Also, using the absorption law in the last step,
a + R = a + (a ∗(b ∗c)) = (a + a) ∗(a + (b ∗c)) = a ∗(a + (b ∗c)) = a
Thus a + L = a + R. Next we show that a′ + L = a′ + R. We have,
a′ + L = a′ + ((a ∗b) ∗c) = (a′ + (a ∗b)) ∗(a′ + c)
= ((a′ + a) ∗(a′ + b)) ∗(a′ + c) = (1 ∗(a′ + b)) ∗(a′ + c)
= (a′ + b) ∗(a′ + c) = a′ + (b ∗c)
Also,
a′ + R = a′ + (a ∗(b ∗c)) = (a′ + a) ∗(a′ + (b ∗c))
= 1 ∗(a′ + (b ∗c)) = a′ + (b ∗c)
Thus a′ + L = a′ + R. Consequently,
L = 0 + L = (a ∗a′) + L = (a + L) ∗(a′ + L) = (a + R) ∗(a′ + R)
= (a ∗a′) + R = 0 + R = R
(8a) Follows from (8b) and duality.
15.6. Prove Theorem 15.3: Let a be any element of a Boolean algebra B.
(i) (Uniqueness of Complement) If a + x = 1 and a ∗x = 0, then x = a′.
(ii) (Involution Law) (a′)′ = a
(iii) (9a)
0′ = 1; (9b)
1′ = 0.
(i) We have:
a′ = a′ + 0 = a′ + (a ∗x) = (a′ + a) ∗(a′ + x) = 1 ∗(a′ + x) = a′ + x
Also,
x = x + 0 = x + (a ∗a′) = (x + a) ∗(x + a′) = 1 ∗(x + a′) = x + a′
Hence x = x + a′ = a′ + x = a′.
(ii) By deﬁnition of complement, a + a′ = 1 and a ∗a′ = 0. By commutativity, a′ + a = 1 and a′ ∗a = 0.
By uniqueness of complement, a is the complement of a′, that is, a = (a′)′.
(iii) By boundedness law (6a), 0 + 1 = 1, and by identity axiom (3b), 0 ∗1 = 0. By uniqueness of complement,
1 is the complement of 0, that is, 1 = 0′. By duality, 0 = 1′.
15.7. Prove Theorem 15.4: (DeMorgan’s laws): (10a)
(a + b)′ = a′ ∗b′. (10b)
(a ∗b)′ = a′ + b′.
(10a) We need to show that (a + b) + (a′ ∗b′) = 1 and (a + b) ∗(a′ ∗b′) = 0; then by uniqueness of complement,
a′ ∗b′ = (a + b′). We have:
(a + b) + (a′ ∗b′) = b + a + (a′ ∗b′) = b + (a + a′) ∗(a + b′)
= b + 1 ∗(a + b′) = b + a + b′ = b + b′ + a = 1 + a = 1
Also,
(a + b) ∗(a′ ∗b′) = ((a + b) ∗a′) ∗b′
= ((a ∗a′) + (b ∗a′)) ∗b′ = (0 + (b ∗a′)) ∗b′
= (b ∗a′) ∗b′ = (b ∗b′) ∗a′ = 0 ∗a′ = 0
Thus a′ ∗b′ = (a + b)′.
(10b) Principle of duality (Theorem 15.1).

392
BOOLEAN ALGEBRA
[CHAP. 15
15.8. Prove Theorem 15.5: The following are equivalent in a Boolean algebra:
(1) a + b = b;
(2) a ∗b = a;
(3) a′ + b = 1;
(4) a ∗b′ = 0.
By Theorem 14.4, (1) and (2) are equivalent. We show that (1) and (3) are equivalent. Suppose (1) holds. Then
a′ + b = a′ + (a + b) = (a′ + a) + b = 1 + b = 1
Now suppose (3) holds. Then
a + b = 1 ∗(a + b) = (a′ + b) ∗(a + b) = (a′ ∗a) + b = 0 + b = b
Thus (1) and (3) are equivalent.
We next show that (3) and (4) are equivalent. Suppose (3) holds. By DeMorgan’s law and involution,
0 = 1′ = (a′ + b′)′ = a′′ ∗b′ = a ∗b′
Conversely, if (4) holds then
1 = 0′ = (a ∗b′)′ = a′ + b′′ = a′ + b
Thus (3) and (4) are equivalent. Accordingly, all four are equivalent.
15.9. Prove Theorem 15.6: The mapping f: B →P(A) is an isomorphism where B is a Boolean algebra, P(A)
is the power set of the set A of atoms, and
f (x) = {a1, a2,. . . , an}
where x = a1 + · · · + an is the unique representation of a as a sum of atoms.
Recall (Chapter 14) that if the a’s are atoms then a2
i = ai but aiaj = 0 for ai ̸= aj. Suppose x, y are in B and
suppose
x = a1 + · · · + ar + b1 + · · · + bs
y = b1 + · · · + bs + c1 + · · · + ct
where
A = {a1, . . . , ar, b1, . . . , bs, c1, . . . , ct, d1, . . . , dk}
is the set of atoms of B. Then
x + y = a1 + · · · + ar + b1 + · · · + bs + c1 + · · · + ct
xy = b1 + · · · bs
Hence
f (x + y) = {a1, . . . , ar, b1, . . . , bs, c1, . . . , ct}
= {a1, . . . , ar, b1, . . . , bs} ∪{b1, . . . , bs, c1, . . . , ct}
= f (x) ∪f (y)
f (xy) = {b1, . . . , bs}
= {a1, . . . , ar, b1, . . . , bs} ∩{b1, . . . , bs, c1, . . . , ct}
= f (x) ∩f (y)
Let
y = c1 + · · · + ct + d1 + · · · + dk. Then x + y = 1 and xy = 0, and so y = x′
Thus
f (x′) = {c1, . . . , ct, d1, . . . , dk} = {a1, . . . , ar, b1, . . . , bs}c = (f (x))c
Since the representation is unique, f is one-to-one and onto. Hence f is a Boolean algebra isomorphism.

CHAP. 15]
BOOLEAN ALGEBRA
393
BOOLEAN EXPRESSIONS
15.10. Reduce the following Boolean products to either 0 or a fundamental product:
(a)
xyx′z;
(b)
xyzy;
(c)
xyz′yx;
(d)
xyz′yx′z′
Use the commutative law x ∗y = y ∗x, the complement law x ∗x′ = 0, and the idempotent law x ∗x = x:
(a) xyx′z = xx′yz = 0yz = 0
(b) xyzy = xyyz = xyz
(c) xyz′yx = xxyyz′ = xyz′
(d) xyz′yx′z′ = xx′yyz′z′ = 0yz′ = 0
15.11. ExpresseachBooleanexpressionE(x, y, z)asasum-of-productsandtheninitscompletesum-of-products
form:
(a) E = x(xy′ + x′y + y′z);
(b) E = z(x′ + y) + y′.
First use Algorithm 15.1 to express E as a sum-of-products, and then use Algorithm 15.2 to express E as a
complete sum-of-products.
(a) First we have E = xxy′ + xx′y + xy′z = xy′ + xy′z. Then
E = xy′(z + z′) + xy′z = xy′z + xy′z′ + xy′z = xy′z + xy′z′
(b) First we have
E = z(x′ + y) + y′ = x′z + yz + y′
Then
E = x′z + yz + y′ = x′z(y + y′) + yz(x + x′) + y′(x + x′)(z + z′)
= x′yz + x′y′z + xyz + x′yz + xy′z + xy′z′ + x′y′z + x′y′z′
= xyz + xy′z + xy′z′ + x′yz + x′y′z + x′y′z′
15.12. Express E(x, y, z) = (x′ + y)′ + x′y in its complete sum-of-products form.
We have E = (x′ + y)′ + x′y = xy′ + x′y, which would be the complete sum-of-products form of E if E were
a Boolean expression in x and y. However, it is speciﬁed that E is a Boolean expression in the three variables x, y,
and z. Hence,
E = xy′ + x′y = xy′(z + z′) + x′y(z + z′) = xy′z + xy′z′ + x′yz + x′yz′
is the complete sum-of-products form of E.
15.13. ExpresseachBooleanexpressionE(x, y, z)asasum-of-productsandtheninitscompletesum-of-products
form:
(a) E = y(x + yz)′;
(b) E = x(xy + y′ + x′y).
(a) E = y(x′(yz)′) = yx′(y′ + z′) = yx′y′ + x′yz′ = x′yz′
which already is in its complete sum-of-products form.
(b) First we have E = xxy + xy′ + xx′y = xy + xy′. Then
E = xy(z + z′) + xy′(z + z′) = xyz + xyz′ + xy′z + xy′z′
15.14. Express each set expression E(A, B, C) involving sets A, B, C as a union of intersections:
(a) E = (A ∪B)c ∩(Cc ∪B);
(b) E = (B ∩C)c ∩(Ac ∩C)c
Use Boolean notation, ′ for complement, + for union, and ∗(or juxtaposition) for intersection, and then express
E as a sum of products (union of intersections).
(a) E = (A + B)′(C′ + B) = A′B′(C′ + B) = A′B′C′ + A′B′B = A′B′C′ or E = Ac ∩Bc ∩Cc
(b) E = (BC)′(A′ + C)′ = (B′ + C′)(AC′) = AB′C′ + AC′ or E = (A ∩Bc ∩Cc) ∩(A ∩Cc)

394
BOOLEAN ALGEBRA
[CHAP. 15
15.15. Let E = xy′ + xyz′ + x′yz′. Prove that (a) xz′ + E = E; (b) x + E ̸= E; (c) z′ + E ̸= E.
Since the complete sum-of-products form is unique, A + E = E, where A ̸= 0, if and only if the summands
in the complete sum-of-products form for A are among the summands in the complete sum-of products form for E.
Hence, ﬁrst ﬁnd the complete sum-of-products form for E:
E = xy′(z + z′) + xyz′ + x′yz′ = xy′z + xy′z′ + xyz′ + x′yz′
(a) Express xz′ in complete sum-of-products form:
xz′ = xz′(y + y′) = xyz′ + xy′z′
Since the summands of xz′ are among those of E, we have xz′ + E = E.
(b) Express x in complete sum-of-products form:
x = x(y + y′)(z + z′) = xyz + xyz′ + xy′z + xy′z′
The summand xyz of x is not a summand of E; hence x + E ̸= E.
(c) Express z′ in complete sum-of-products form:
z′ = z′(x + x′)(y + y′) = xyz′ + xy′z′ + x′yz′ + x′y′z′
The summand x′y′z′ of z′ is not a summand of E; hence z′ + E ̸= E.
MINIMAL BOOLEAN EXPRESSIONS, PRIME IMPLICANTS
15.16. For any Boolean sum-of-products expression E, we let EL denote the number of literals in E (counting
multiplicity) and ES denote the number of summands in E. Find EL and ES for each of the following:
(a) E = xy′z + x′z′ + yz′ + x
(c) E = xyt′ + x′y′zt + xz′t
(b) E = x′y′z + xyz + y + yz′ + x′z
(d) E = (xy′ + z)′ + xy′
Simply add up the number of literals and the number of summands in each expression:
(a) EL = 3 + 2 + 2 + 1 = 8,
ES = 4.
(b) EL = 3 + 3 + 1 + 2 + 2 = 11,
ES = 5.
(c) EL = 3 + 4 + 3 = 10,
ES = 3.
(d) Because E is not written as a sum of products, EL and ES are not deﬁned.
15.17. Given that E and F are equivalent Boolean sum-of-products, deﬁne:
(a) E is simpler than F; (b) E is minimal.
(a) E is simpler than F if EL < FL and ES ≤FS, or if EL ≤FL and ES < FS.
(b) E is minimal if there is no equivalent sum-of-products expression which is simpler than E.
15.18. Find the consensus Q of the fundamental products P1 and P2 where:
(a) P1 = xy′z′, P2 = xyt
(c) P1 = xy′z′, P2 = x′y′zt
(b) P1 = xyz′t, P2 = xzt
(d) P1 = xyz′, P2 = xz′t
The consensus Q of P1 and P2 exists if there is exactly one variable, say xk, which is complemented in one of
P1 and P2 and uncomplemented in the other. Then Q is the product (without repetition) of the literals in P1 and P2
after xk and x′
k have been deleted:
(a) Delete y′ and y and then multiply the literals of P1 and P2 (without repetition) to obtain Q = xz′t.
(b) Deleting z′ and z yields Q = xyt.
(c) They have no consensus since both x and z appear complemented in one of the products and uncomplemented
in the other.
(d) They have no consensus since no variable appears complemented in one of the products and uncomplemented
in the other.

CHAP. 15]
BOOLEAN ALGEBRA
395
15.19. Prove Lemma 15.10: Suppose Q is the consensus of P1 and P2. Then P1 + P2 + Q = P1 + P2.
Since the literals commute, we can assume without loss of generality that
P1 = a1a2 · · · ar, t,
P2 = b1b2 · · · bst′,
Q = a1a2 · · · arb1b2 · · · bs
Now, Q = Q(t+t′) = Qt+Qt′. Because Qt contains P1, P1+Qt = P1; and because Qt′ contains P2, P2+Qt′ = P2.
Hence
P1 + P2 + Q = P1 + P2 + Qt + Qt′ = (P1 + Qt) + (P2 + Qt′) = P1 + P2
15.20. Let E = xy′ + xyz′ + x′yz′. Find: (a) the prime implicants of E; (b) a minimal sum for E.
(a) Apply Algorithm 15.3 (consensus method) as follows:
E = xy′ + xyz′ + x′yz′ + xz′
(consensus of xy′ and xyz′)
= xy′ + x′yz′ + xz′
(xyz′ includes xz′)
= xy′ + x′yz′ + xz′ + yz′
(consensus of x′yz′ and xz′)
= xy′ + xz′ + yz′
(x′yz′ includes yz′)
Neither step in the consensus method can now be applied. Hence xy′, xz′, and yz′ are the prime implicants of E.
(b) Apply Algorithm 15.4 write each prime implicant of E in complete sum-of-products form obtaining:
xy′ = xy′(z + z′) = xy′z + xy′z′
xz′ = xz′(y + y′) = xyz′ + xy′z′
yz′ = yz′(x + x′) = xyz′ + x′yz′
Only the summands xyz′ and xy′z′ of xz′ appear among the other summands and hence xz′ can be eliminated
as superﬂuous. Thus E = xy′ + yz′ is a minimal sum for E.
15.21. Let E = xy + y′t + x′yz′ + xy′zt′. Find: (a) prime implicants of E; (b) minimal sum for E.
(a) Apply Algorithm 15.3 (consensus method) as follows:
E = xy + y′t + x′yz′ + xy′zt′ + xzt′
(consensus of xy and xy′zt′)
= xy + y′t + x′yz′ + xzt′
(xy′zt′ includes xzt′)
= xy + y′t + x′yz′ + xzt′ + yz′
(consensus of xy and x′yz′)
= xy + y′t + xzt′ + yz′
(x′yz′ includes yz′)
= xy + y′t + xzt′ + yz′ + xt
(consensus of xy and y′t)
= xy + y′t + xzt′ + yz′ + xt + xz
(consensus of xzt′ and xt)
= xy + y′t + yz′ + xt + xz
(xzt′ includes xz)
= xy + y′t + yz′ + xt + xz + z′
(consensus of y′t and yz′)
Neither step in the consensus method can now be applied. Hence the prime implicants of E are xy, y′t, yz′, xt,
xz, and z′t.
(b) Apply Algorithm 15.4 that is, write each prime implicant in complete sum-of-products form and then delete one
by one those which are superﬂuous, i.e. those whose summands appear among the other summands. This ﬁnally
yields
E = y′t + xz + yz′
as a minimal sum for E.
LOGIC GATES
15.22. Express the output Y as a Boolean expression in the inputs A, B, C for the logic circuit in:
(a) Fig. 15-26(a);
(b) Fig. 15-26(b).
(a) The inputs to the ﬁrst AND gate are A and B′ and to the second AND gate are B′ and C. Thus Y = AB′ + B′C.
(b) The inputs to the ﬁrst AND gate are A and B′ and to the second AND gate are A′ and C. Thus Y = AB′ + A′C.

396
BOOLEAN ALGEBRA
[CHAP. 15
Fig. 15-26
Fig. 15-27
15.23. Express the output Y as a Boolean expression in the inputs A, B, C for the logic circuit in Fig. 15-27.
The output of the ﬁrst AND gate is A′BC, of the second AND gate is AB′C′, and of the last AND gate is AB′.
Thus
Y = A′BC + AB′C′ + AB′
15.24. Express the output Y as a Boolean expression in the inputs A, B, C for the logic circuit in:
(a) Fig. 15-28(a);
(b) Fig. 15-28(b).
Fig. 15-28
(a) The output of the AND gate is BC and so the inputs to the NOR gate are A and BC. Thus (A + BC)′ is the
output of the NOR gate. Therefore, the inputs to the OR gate are (A + BC)′ and B; hence Y = (A + BC)′ + B.
(b) The output of the NAND gate is (A′B)′ and the output of the NOR gate is (A+C)′. Thus Y = (A′B)′ +(A+C)′.

CHAP. 15]
BOOLEAN ALGEBRA
397
15.25. Express the output Y as a Boolean expression in the inputs A and B for the logic circuit in Fig. 15-29.
Here a small circle in the circuit means complement. Thus the output of the three gates on the left are AB′,
(A + B)′, and (A′B)′. Hence
Y = AB′ + (A + B)′ + (A′B)′
Fig. 15-29
15.26. Draw the logic circuit L with inputs A, B, C and output Y which corresponds to each Boolean expression:
(a) Y = ABC + A′C′ + B′C′;
(b) Y = AB′C + ABC′ + AB′C′.
These are sum-of-products expressions. Thus L will be an AND-OR circuit which has an AND gate for each
product and one OR gate for the sum. The required circuits appear in Fig. 15-30(a) and (b).
Fig. 15-30
TRUTH TABLES
15.27. Find the output sequence Y for an AND gate with inputs A, B, C (or equivalently for Y = ABC) where:
(a) A = 111001; B = 100101; C = 110011.
(b) A = 11111100; B = 10101010; C = 00111100.
(c) A = 00111111; B = 11111100; C = 11000011.

398
BOOLEAN ALGEBRA
[CHAP. 15
The output Y = 1 for an AND gate if and only if there are 1’s in all the positions of the input sequences. Thus:
(a) Only the ﬁrst and last positions have 1’s in all three sequences. Hence Y = 100001.
(b) Only the third and ﬁfth positions (reading from left to right) have 1’s in all three sequences. Thus Y = 00101000.
(c) No position has 1’s in all three sequences. Thus Y = 00000000.
15.28. Find the output sequence Y for an OR gate with inputs A, B, C (or equivalently for Y = A + B + C
where:
(a) A = 100001; B = 100100; C = 110000.
(b) A = 11000000; B = 10101010; C = 00000011.
(c) A = 00111111; B = 11111100; C = 11000011.
The output Y = 0 for an OR gate if and only if there are 0’s in all the positions of the input sequences. Thus:
(a) Only the third and ﬁfth positions have 0’s in all three sequences. Hence Y = 110101.
(b) Only the fourth and sixth positions (reading from left to right) have 0’s in all three sequences.Thus Y = 11101011.
(c) No position has 0’s in all three sequences. Thus Y = 11111111.
15.29. Find the output sequence Y for a NOT gate with input A or, equivalently, for Y = A′, where:
(a) A = 00111111;
(b) A = 11111100;
(c) A = 11000011.
The NOT gate changes 0 to 1 and 1 to 0. Hence:
(a) A′ = 11000000;
(b) A′ = 00000011;
(c) A′ = 00111100.
15.30. Consider a logic circuit L with n = 5 inputs A, B, C, D, E or, equivalently, consider a Boolean expression
E with ﬁve variables x1, x2, x3, x4, x5.
(a) Find the special sequences for the variables (inputs).
(b) How many different ways can we assign a bit (0 or 1) to each of the n = 5 variables?
(c) What is the main property of the special sequences?
(a) All sequences have length 2n = 25 = 32. They will consist of alternating blocks of 0’s and 1’s where the lengths
of the blocks are 2n−1 = 24 = 16 for x1, 2n−2 = 23 = 8 for x2, . . . , 2n−5 = 20 = 1 for x5, Thus:
x1 =
00000000000000001111111111111111
x2 =
00000000111111110000000011111111
x3 =
00001111000011110000111100001111
x4 = 00110011001100110011001100110011
x5 = 01010101010101010101010101010101
(b) There are two ways, 0 or 1, to assign a bit to each variable, and so there are 2n = 25 = 32 ways of assigning
a bit to each of the n = 5 variables.
(c) The 32 positions in the special sequences give all the 32 possible combinations of bits for the ﬁve variables.
15.31. Find the truth table T = T (E) for the Boolean expression E = E(x, y, z) where:
(a) E = xz + x′y; (b) E = xy′z + xy + z′.
The special sequences for the variables x, y, z and their complements follow:
x = 00001111,
y = 00110011,
z = 01010101
x′ = 11110000,
y′ = 11001100,
z′ = 10101010
(a) Here xz = 00000101 and x′y = 00110000. Then E = xz + x′y = 00110101. Thus
T (00001111, 00110011, 01010101) = 00110101
or simply T (E) = 00110101 where we assume the input consists of the special sequences.

CHAP. 15]
BOOLEAN ALGEBRA
399
(b) Here xy′z = 00000100, xy = 00000011, and z′ = 01010101. Then E = xy′z + xy + z′ = 01010111. Thus
T (00001111, 00110011, 01010101) = 01010111
15.32. Find the truth table T = T (E) for the Boolean expression E = E(x, y, z) where:
(a) E = xyz′ + x′yz;
(b) E = xyz + xy′z + x′y′z.
Here E is a complete sum-of-products expression which is the sum of minterms. Example 15.13 gives the truth
tables for the minterms (using the special sequences). Each minterm contains a single 1 in its truth table; hence the
truth table of E will have 1’s in the same positions as the 1’s in the minterms in E. Thus:
(a) T (E) = 00001010;
(b) T (E) = 01000101
15.33. Find the truth table T = T (E) for the Boolean expression
E = E(x, y, z) = (x′y)′yz′ + x′(yz + z′)
First express E as a sum-of-products:
E = (x + y′)yz′ + x′yz + x′z′ = xyz′ + y′yz′ + x′yz + x′z′
= xyz′ + x′yz + x′z′
Now express E as a complete sum-of-products:
E = xyz′ + x′yz + x′z′(y + y′)
= xyz′ + x′yz + x′yz′ + x′y′z′
As in Problem 15.32, use the truth tables for the minterms appearing in Example 15.13 to obtain T (E) = 10101010.
15.34. Find the Boolean expression E = E(x, y, z) corresponding to the truth table:
(a) T (E) = 01001001;
(b) T (E) = 00010001.
Each 1 in T (E) corresponds to the minterm with the 1 in the same position (using the truth tables for the minterms
appearing in Example 15.13). For example, the 1 in the second position corresponds to x′y′z whose truth table has
a single 1 in the second position. Then E is the sum of these minterms. Thus:
(a) E = x′y′z + x′yz + xyz′;
(b) E = xy′z′ + xyz
(Again we assume the input consists of the special sequences.)
KARNAUGH MAPS
15.35. Find the fundamental product P represented by each basic rectangle in the Karnaugh map in Fig. 15-31.
In each case ﬁnd those literals which appear in all the squares of the basic rectangle; then P is the product of
such literals.
(a) x′ and z′ appear in both squares; hence P = x′z′.
(b) x and z appear in both squares; hence P = xz.
(c) Only z appears in all four squares; hence P = z.
Fig. 15-31

400
BOOLEAN ALGEBRA
[CHAP. 15
15.36. Let R be a basic rectangle in a Karnaugh map for four variables x, y, z, t. State the number of literals in
the fundamental product P corresponding to R in terms of the number of squares in R.
P will have one, two, three, or four literals according as R has eight, four, two, or one squares.
15.37. Find the fundamental product P represented by each basic rectangle R in the Karnaugh map in Fig. 15-32.
In each case ﬁnd those literals which appear in all the squares of the basic rectangle; then P is the product of
such literals. (Problem 15.36 indicates the number of such literals in P.)
(a) There are two squares in R, so P has three literals. Speciﬁcally, x′, y′, t′ appear in both squares; hence P = x′y′t′.
(b) There are four squares in R, so P has two literals. Speciﬁcally, only y′ and t appear in all four squares; hence
P = y′t.
(c) There are eight squares in R, so P has only one literal. Speciﬁcally, only y appears in all eight squares; hence
P = y.
Fig. 15-32
15.38. Let E be the Boolean expression given in the Karnaugh map in Fig. 15-33.
(a) Write E in its complete sum-of-products form. (b) Find a minimal form for E.
(a) List the seven fundamental products checked to obtain
E = xyz′t′ + xyz′t + xy′zt + xy′zt′ + x′y′zt + x′y′zt′ + x′yz′t′
(b) The two-by-two maximal basic rectangle represents y′z since only y′ and z appear in all four squares. The
horizontal pair of adjacent squares represents xyz′, and the adjacent squares overlapping the top and bottom
edges represent yz′t′. As all three rectangles are needed for a minimal cover,
E = y′z + xyz′ + yz′t′
is the minimal sum for E.
15.39. Consider the Boolean expressions E1 and E2 in variables x, y, z, t which are given by the Karnaugh maps
in Fig. 15-34. Find a minimal sum for (a) E1; (b) E2.
(a) Only y′ appears in all eight squares of the two-by-four maximal basic rectangle, and the designated pair of
adjacent squares represents xzt′. As both rectangles are needed for a minimal cover,
E1 = y′ + xzt′
is the minimal sum for E1.

CHAP. 15]
BOOLEAN ALGEBRA
401
Fig. 15-33
Fig. 15-34
(b) The four corner squares form a two-by-two maximal basic rectangle which represents yt, since only y and t
appear in all the four squares. The four-by-one maximal basic rectangle represents x′y′, and the two adjacent
squares represent y′zt′. As all three rectangles are needed for a minimal cover,
E2 = yt + x′y′ + y′zt′
is the minimal sum for E2.
15.40. Consider the Boolean expressions E1 and E2 in variables x, y, z, t which are given by the Karnaugh maps
in Fig. 15-35. Find a minimal sum for (a) E1; (b) E2.
(a) There are ﬁve prime implicants, designated by the four loops and the dashed circle. However, the dashed circle
is not needed to cover all the squares, whereas the four loops are required. Thus the four loops give the minimal
sum for E1; that is,
E1 = xzt′ + xy′z′ + x′y′z + x′z′t′
(b) There are ﬁve prime implicants, designated by the ﬁve loops of which two are dashed. Only one of the two dashed
loops is needed to cover the square x′y′z′t′. Thus there are two minimal sums for E2 as follows:
E2 = x′y + yt + xy′t′ + y′z′t′ = x′y + yt + xy′t′ + x′z′t′
Fig. 15-35
15.41. Use a Karnaugh map to ﬁnd a minimal sum for:
(a) E1 = x′yz + x′yz′t + y′zt′ + xyzt′ + xy′z′t′.
(b) E2 = y′t′ + y′z′t + x′y′zt + yzt′.

402
BOOLEAN ALGEBRA
[CHAP. 15
(a) Check the two squares corresponding to each of x′yz and y′zt′, and check the square corresponding to each of
x′yz′t, xyzt′, and xy′z′t′. This gives the Karnaugh map in Fig. 15-36(a). A minimal cover consists of the three
designated loops. Thus a minimal sum for E1 follows:
E1 = zt′ + xy′t′ + x′yt
(b) Check the four squares corresponding to zt′, check the two squares corresponding to each of y′z′t and yzt′,
and check the square corresponding to x′y′zt. This gives the Karnaugh map in Fig. 15-36(b). A minimal cover
consists of the three designated maximal basic rectangles. Thus a minimal sum for E2 follows:
E2 = zt′ + xy′t′ + x′yt
Fig. 15-36
15.42. Find a minimal sum-of-products form for the Boolean expression E with the following truth tables:
(a) T (00001111, 00110011, 01010101) = 10100110.
(b) T (00001111, 00110011, 01010101) = 00101111.
(a) From the given truth table T (and the truth tables in Example 15.13 for the minterms in variables x, y, z) we can
read off the complete sum-of-products form for E:
E = x′y′z′ + x′yz′ + xy′z + xyz′
Its Karnaugh map appears in Fig. l5-37(a). There are three prime implicants, as indicated by the three loops,
which form a minimal cover of E. Thus a minimal form for E follows:
E = yz′ + x′z′ + xy′z
(b) From the given truth table we can read off the complete sum-of-products form for E:
E = x′yz′ + x′yz + xy′z + xyz′ + xyz
Its Karnaugh map appears in Fig. 15-37(b). There are two prime implicants, as indicated by the two loops, which
form a minimal cover of E. Thus a minimal form for E follows:
E = xz + y
Fig. 15-37

CHAP. 15]
BOOLEAN ALGEBRA
403
Supplementary Problems
BOOLEAN ALGEBRAS
15.43. Write the dual of each Boolean expression:
(a) a(a′ + b) = ab
(b) (a + 1)(a + 0) = a
(c) (a + b)(b + c) = ac + b
15.44. Consider the lattices Dm of divisors of m (where m > 1).
(a) Show that Dm is a Boolean algebra if and only if m is square-free, that is, if m is a product of distinct primes.
(b) If Dm is a Boolean algebra, show that the atoms are the distinct prime divisors of m.
15.45. Consider the following lattices: (a) D20; (b) D55; (c) D99; (d) D130. Which of them are Boolean algebras, and what are
their atoms?
15.46. Consider the Boolean algebra D110
(a) List its elements and draw its diagram.
(b) Find all its subalgebras.
(c) Find the number of sublattices with four elements.
(d) Find the set A of atoms of D110.
(e) Give the isomorphic mapping f: D110 →P (A) as deﬁned in Theorem 15.6.
15.47. Let B be a Boolean algebra. Show that:
(a) For any x in B, 0 ≤x ≤1.
(b) a < b if and only if b′ < a′.
15.48. An element x in a Boolean algebra is called a maxterm if the identity 1 is its only successor. Find the maxterms in
the Boolean algebra D210 pictured in Fig. 15-25.
15.49. Let B be a Boolean algebra.
(a) Show that complements of the atoms of B are the maxterms.
(b) Show that any element x in B can be expressed uniquely as a product of maxterms.
15.50. Let B be a 16-element Boolean algebra and let S be an 8-element subalgebra of B. Show that two of the atoms of S
must be atoms of B.
15.51. Let B = (B, +, ∗,′ , 0, 1) be a Boolean algebra. Deﬁne an operation  on B (called the symmetric difference) by
xy = (x ∗y′) + (x′ ∗y)
Prove that R = (B, , ∗) is a commutative Boolean ring. (See Section B.6 and Problem B.72.)
15.52. Let R = (R, ⊕, ·) be a Boolean ring with identity 1 ̸= 0. Deﬁne
x′ = 1 ⊕x,
x + y = x ⊗y ⊕x · y,
x ∗y = x · y
Prove that B = (R, +, ∗,′ , 0, 1) is a Boolean algebra.
BOOLEAN EXPRESSIONS, PRIME IMPLICANTS
15.53. Reduce the following Boolean products to either 0 or a fundamental product:
(a)
xy′zxy′;
(b)
xyz′sy′ts;
(c)
xy′xz′ty′;
(d)
xyz′ty′t.
15.54. Express each Boolean expression E(x, y, z) as a sum-of-products and then in its complete sum-of-products form:
(a)
E = x(xy′ + x′y + y′z);
(b)
E = (x + y′z)(y + z′);
(c)
E = (x′ + y)′ + y′z.
15.55. Express each Boolean expression E(x, y, z) as a sum-of-products and then in its complete sum-of-products form:
(a)
E = (x′y)′(x′ + xyz′);
(b)
E = (x + y)′(xy′)′;
(c)
E = y(x + yz)′.

404
BOOLEAN ALGEBRA
[CHAP. 15
15.56. Find the consensus Q of the fundamental products P1 and P2 where:
(a)
P1 = xy′z, P2 = xyt;
(c)
P1 = xy′zt, P2 = xyz′;
(b)
P1 = xyz′t′, P2 = xzt′;
(d)
P1 = xy′t, P2 = xzt.
15.57. For any Boolean sum-of-products expression E, we let EL denote the number of literals in E (counting multiplicity)
and ES denote the number of summands in E. Find EL and ES for each of the following:
(a)
E = xyz′t + x′yt + xy′zt;
(b)
E = xyzt + xt′ + x′y′t + yt.
15.58. Apply the consensus method (Algorithm 15.3) to ﬁnd the prime implicants of each Boolean expression:
(a) E1 = xy′z′ + x′y + x′y′z′ + x′yz;
(b) E2 = xy′ + x′z′t + xyzt′ + x′y′zt′;
(c) E3 = xyzt + xyz′t′ + xz′t′ + x′y′z′ + x′yz′t.
15.59. Find a minimal sum-of-products form for each of the Boolean expressions in Problem 15.58.
LOGIC GATES,TRUTH TABLES
15.60. Express the output Y as a Boolean expression in the inputs A, B, C for the logic circuit in:
(a) Fig. 15-38(a);
(b) Fig. 15-38(b).
Fig. 15-38
15.61. Express the output Y as a Boolean expression in the inputs A, B, C for the logic circuit in:
(a) Fig. 15-39(a);
(b) Fig. 15-39(b).
15.62. Draw the logic circuit L with inputs A, B, C and output Y which corresponds to each Boolean expression:
(a)
Y = AB′C + AC′ + A′C;
(b)
Y = A′BC + A′BC′ + ABC′.
15.63. Find the output sequence Y for an AND gate with inputs A, B, C (or equivalently for Y = ABC) where:
(a) A = 110001; B = 101101; C = 110011.
(b) A = 01111100; B = 10111010; C = 00111100.
(c) A = 00111110; B = 01111100; C = 11110011.

CHAP. 15]
BOOLEAN ALGEBRA
405
Fig. 15-39
15.64. Find the output sequence Y for an OR gate with inputs A, B, C (or equivalently for Y = A + B + C) where:
(a) A = 100011; B = 100101; C = 1000001.
(b) A = 10000001; B = 00100100; C = 00000011.
(c) A = 00111100; B = 11110000; C = 10000001.
15.65. Find the output sequence Y for a NOT gate with input A or, equivalently, for Y = A′, where:
(a)
A = 11100111;
(b)
A = 10001000;
(c)
A = 11111000.
15.66. Consider a logic circuit L with n = 6 inputs A, B, C, D, E, F, or, equivalently, consider a Boolean expression E
with six variables x1, x2, x3, x4, x5, x6.
(a) How many different ways can we assign a bit (0 or 1) to each of the n = 6 variables?
(b) Find the ﬁrst three special sequences for the variables (inputs).
15.67. Find the truth table T = T (E) for the Boolean expression E = E(x, y, z) where:
(a)
E = xy + x′z;
(b)
E = xyz′ + y + xy′.
15.68. Find the truth table T = T (E) for the Boolean expression E = E(x, y, z) where:
(a)
E = x′yz′ + x′y′z;
(b)
E = xyz′ + xy′z′ + x′y′z′.
15.69. Find the Boolean expression E = E(x, y, z) corresponding to the truth tables:
(a)
T (E) = 10001010;
(b)
T (E) = 00010001;
(c)
T (E) = 00110000.
15.70. Find all possible minimal sums for the each Boolean expression E given by the Karnaugh maps in Fig. 15-40.
Fig. 15-40

406
BOOLEAN ALGEBRA
[CHAP. 15
15.71. Find all possible minimal sums for each Boolean expression E given by the Karnaugh maps in Fig. 15-41.
Fig. 15-41
15.72. Use a Karnaugh map to ﬁnd a minimal sum for the Boolean expression:
(a)
E = xy + x′y + x′y′;
(b)
E = x + x′yz + xy′z′.
15.73. Find the minimal sum for each Boolean expression:
(a)
E = y′z + y′z′t′ + z′t;
(b)
E = y′zt + xzt′ + xy′z′.
15.74. Use Karnaugh maps to redesign each circuit in Fig. 15-42 so that it becomes a minimal AND-OR circuit.
Fig. 15-42
15.75. Suppose three switches A, B, C are connected to the same hall light. At any moment a switch may be “up” denoted
by 1 or “down” denoted by 0. A change in any switch will change the parity (odd or even) of the number of 1’s. The
switches will be able to control the light if it associates, say, an odd parity with the light being “on” (represented
by 1), and an even parity with the light being “off” (represented by 0).
(a) Show that the following truth table satisﬁes these conditions:
T (A, B, C) = T (00001111, 00110011, 01010101) = 01101001
(b) Design a minimal AND-OR circuit L with the above truth table.

CHAP. 15]
BOOLEAN ALGEBRA
407
Answers to Supplementary Problems
15.43. (a) a + a′b = a + b.
(b) a · 0 + a · 1 = a.
(c) ab + bc = (a + c)b.
15.45. (b) D55; atoms 5 and 11. (d) D130; atoms 2, 5 and 13.
15.46. (a) There are eight elements 1, 2, 5, 10, 11, 22, 55,
110. See Fig. 15-43(a).
(b) There
are
ﬁve
subalgebras:
{1, 110},
{1, 2, 55, 110}, {1, 5, 22, 110}, {1, 10, 11, 110},
D110.
(c) There are 15 sublattices which include the above
three subalgebras.
(d) A = {2, 5, 11}.
(e) See Fig. 15-43(b).
15.48. Maxterms: 30, 42, 70, 105
Fig. 15-43
15.49. (b) Hint: Use duality.
15.53. (a) xy′z; (b) 0; (c) xy′z′t; (d) 0.
15.54. (a) E = xy′ + xy′z = xy′z′ + xy′z.
(b) E = xy + xz′ = xyz + xyz′ + xy′z′.
(c) E = xy′ + y′z = xy′z + xy′z′ + x′y′z.
15.55. (a) E = xyz′ + x′y′ = xyz′ + x′y′z + x′y′z′.
(b) E = x′y′ = x′y′z + x′y′z′.
(c) E = x′yz′.
15.56. (a) Q = xzt. (b) Q = xyt′. (c) and (d) Does not
exist.
15.57. (a) EL = 11, ES = 3; (b) EL = 11, ES = 4.
15.58. (a) x′y, x′z′, y′z′.
(b) xy′, xzt′, y′zt′, x′z′t, y′z′t.
(c) xyzt, xz′t′, y′z′t′, x′y′z′, x′z′t.
15.59. (a) E = x′y + x′z′.
(b) E = xy′ + xzt′ + x′z′t + y′z′t.
(c) E = xyzt + xz′t′ + x′y′z′ + x′z′t.
15.60. (a) Y = A′BC + A′C′ + BC′;
(b) ABC + A′BC + AB′C′.
15.61. (a) Y = (AB′)′ + (A′ + B + C)′ + AC
(b) Y = (A′BC)′ + A′BC′ + (AB′C)′ + AB′C′
15.62. See Fig. 15-44.
Fig. 15-44

408
BOOLEAN ALGEBRA
[CHAP. 15
15.63. (a) Y = 100001; (b) Y = 00111000;
(c) Y = 00110000.
15.64. (a) Y = 100111; (b) Y = 10100111;
(c) Y = 11111101.
15.65. (a) A′ = 00011000; (b) A′ = 01110111;
(c) A′ = 00000111.
15.66. (a) 2n = 26 = 64.
(b) x1 = 000 · · · 00111 . . . 11(32 zeros)(32 ones).
x2 = (00000000000000001111111111111111)2.
x3 = (0000000011111111)4.
15.67. (a) T (E) = 01010011; (b) T (E) = 00111111.
15.68. (a) T (E) = 01000000; (b) T (E) = 10001010.
15.69. Use truth tables for minterms in Example 15.13.
(a) E = x′y′z′ + x′yz + xyz′.
(b) E = xy′z′ + xyz.
(c) E = x′yz′ + xy′z′.
15.70. (a) E = xy′ + x′y + yz = xy′ + x′y + xz′.
(b) E = xy′ + x′y + z.
(c) E = x′ + z.
15.71. (a) E = x′y + zt′ + xz′t + xy′z
= x′y + zt′ + xz′t + xy′t.
(b) E = yz + yt′ + zt′ + xy′z′.
(c) E = x′y + yt + xy′t′ + x′zt
= x′y + yt + xy′t′ + y′zt.
15.72. (a) E = x′ + y; (b) E = xz′ + yz.
15.73. (a) E = y′ + z′t; (b) E = xy′ + zt′ + y′zt.
15.74. (a) See Fig. 15-45.
15.75. (b) See Fig. 15-46.
Fig. 15-45
Fig. 15-46

APPENDIX A
Vectors and Matrices
A.1
INTRODUCTION
Data is frequently arranged in arrays, that is, sets whose elements are indexed by one or more subscripts.
If the data consists of numbers, then a one-dimensional array is called a vector and a two-dimensional array is
called a matrix (where the dimension denotes the number of subscripts). This appendix investigates these vectors
and matrices, and certain algebraic operations involving them. In this context, the numbers themselves are called
scalars.
A.2
VECTORS
By a vector u, we mean a list of numbers, say, a1, a2, . . . , an. Such a vector is denoted by
u = (a1, a2, . . . , an)
The numbers ai are called the components or entries of u. If all the ai = 0, then u is called the zero vector. Two
such vectors, u and v, are equal, written u = v, if they have the same number of components and corresponding
components are equal.
EXAMPLE A.1
(a) The following are vectors where the ﬁrst two have two components and the last two have three components:
(3, −4),
(6, 8),
(0, 0, 0),
(2, 3, 4)
The third vector is the zero vector with three components.
(b) Although the vectors (1, 2, 3) and (2, 3, 1) contain the same numbers, they are not equal since corresponding
components are not equal.
Vector Operations
Consider two arbitrary vectors u and v with the same number of components, say
u = (a1, a2, . . . , an)
and
v = (b1, b2, . . . , bn)
409
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

410
VECTORS AND MATRICES
[APP. A
The sum of u and v, written u + v, is the vector obtained by adding corresponding components from u and v;
that is,
u + v = (a1 + b1, a2 + b2, . . . , an + bn)
The scalar product or, simply, product, of a scalar k and the vector u, written ku, is the vector obtained by
multiplying each component of u by k; that is,
ku = (ka1, ka2, . . . , kan)
We also deﬁne
−u = −1(u)
and
u −v = u + (−v)
and we let 0 denote the zero vector. The vector −u is called the negative of the vector u.
The dot product or inner product of the above vectors u and v is denoted and deﬁned by
u · v = a1b1 + a2b2 + · · · + anbn
The norm or length of the vector u is denoted and deﬁned by
∥u∥= √u · u =
%
a2
1 + a2
2 + · · · + a2n
We note that ∥u∥= 0 if and only if u = 0; otherwise ∥u∥> 0.
EXAMPLE A.2 Let u = (2, 3, −4) and v = (1, −5, 8). Then
u + v = (2 + 1, 3 −5, −4 + 8) = (3, −2, 4)
5u = (5 · 2, 5 · 3, 5 · (−4)) = (10, 15, −20)
−v = −1 · (1, −5, 8) = (−1, 5, −8)
2u −3v = (4, 6, −8) + (−3, 15, −24) = (1, 21, −32)
u · v = 2 · 1 + 3 · (−5) + (−4) · 8 = 2 −15 −32 = −45
∥u∥=
!
22 + 32 + (−4)2 =
√
4 + 9 + 16 =
√
29
Vectors under the operations of vector addition and scalar multiplication have various properties, e.g.,
k(u + v) = ku + kv
where k is a scalar and u and v are vectors. Many such properties appear in Theorem A.1, which also holds for
vectors since vectors may be viewed as a special case of matrices.
Column Vectors
Sometimes a list of numbers is written vertically rather than horizontally, and the list is called a column
vector. In this context, the above horizontally written vectors are called row vectors. The above operations for
row vectors are deﬁned analogously for column vectors.
A.3
MATRICES
A matrix A is a rectangular array of numbers usually presented in the form
A =
⎡
⎢⎢⎣
a11
a12
· · ·
a1n
a21
a22
· · ·
a2n
...............................
am1
am2
· · ·
amn
⎤
⎥⎥⎦

APP. A]
VECTORS AND MATRICES
411
The m horizontal lists of numbers are called the rows of A, and the n vertical lists of numbers its columns. Thus
the element aij, called the ij entry, appears in row i and column j. We frequently denote such a matrix by simply
writing A = [aij].
A matrix with m rows and n columns is called an m by n matrix, written m × n. The pair of numbers m and
n is called the size of the matrix. Two matrices A and B are equal, written A = B, if they have the same size and
if corresponding elements are equal. Thus, the equality of two m × n matrices is equivalent to a system of mn
equalities, one for each corresponding pair of elements.
A matrix with only one row is called a row matrix or row vector, and a matrix with only one column is called
a column matrix or column vector. A matrix whose entries are all zero is called a zero matrix and will usually be
denoted by 0.
EXAMPLE A.3
(a) The rectangular array A =
& 1
−4
5
0
3
−2
'
is a 2 × 3 matrix. Its rows are [1, −4, 5] and [0, 3, −2], and its
columns are
& 1
0
'
,
& −4
3
'
,
&
5
−2
'
.
(b) The 2 × 4 zero matrix is the matrix 0 =
& 0
0
0
0
0
0
0
0
'
.
(c) Suppose
& x + y
2z + t
x −y
z −t
'
=
& 3
7
1
5
'
Then the four corresponding entries must be equal. That is,
x + y = 3,
x −y = 1,
2z + t = 7,
z −t = 5
The solution of the system of equations is
x = 2,
y = 1,
z = 4,
t = −1
A.4
MATRIX ADDITION AND SCALAR MULTIPLICATION
Let A = [aij] and B = [bij] be two matrices of the same size, say, m × n matrices. The sum of A and B,
written A + B, is the matrix obtained by adding corresponding elements from A and B. The (scalar) product
of the matrix A by a scalar k, written kA, is the matrix obtained by multiplying each element of A by k. These
operations are pictured in Fig. A-1.
Fig. A-1
Observe that A + B and kA are also m × n matrices. We also deﬁne
−A = (−1)A
and
A −B = A + (−B)
The matrix −A is called the negative of A. The sum of matrices with different sizes is not deﬁned.

412
VECTORS AND MATRICES
[APP. A
EXAMPLE A.4 Let A =
& 1
−2
3
0
4
5
'
and B =
& 4
6
8
1
−3
−7
'
. Then
A + B =
& 1 + 4
−2 + 6
3 + 8
0 + 1
4 + (−3)
5 + (−7)
'
=
& 5
4
11
1
1
−2
'
3A =
& 3(1)
3(−2)
3(3)
3(0)
3(4)
3(5)
'
=
& 3
−6
9
0
12
15
'
2A −3B =
& 2
−4
6
0
8
10
'
+
& −12
−18
−24
−3
9
21
'
=
& −10
−22
−18
−3
17
31
'
Matrices under matrix addition and scalar multiplication have the following properties.
Theorem A.1: Let A, B, C be matrices with the same size, and let k and k′ be scalars. Then:
(i)
(A + B) + C = A + (B + C)
(v)
k(A + B) = kA + kB
(ii)
A + 0 = 0 + A
(vi)
(k + k′)A = kA + k′A
(iii)
A + (−A) = (−A) + 0 = A
(vii)
(kk′)A = k(k′A)
(iv)
A + B = B + A
(viii)
1A = A
Note ﬁrst that the 0 in (ii) and (iii) refers to the zero matrix. Also, by (i) and (iv), any sum of matrices
A1 + A2 + · · · + An
requires no parentheses, and the sum does not depend on the order of the matrices. Furthermore, using (vi) and
(viii), we also have
A + A = 2A,
A + A + A = 3A,
· · ·
Lastly, since n-component vectors may be identiﬁed with either 1 × n or n × 1 matrices, Theorem A.1 also holds
for vectors under vector addition and scalar multiplication.
The proof of Theorem A.1 reduces to showing that the ij entries on both sides of each matrix equation are
equal.
A.5
MATRIX MULTIPLICATION
The product of matrices A and B, written AB, is somewhat complicated. For this reason, we ﬁrst begin with a
special case. (The reader is referred to Section 3.5 for a discussion of the summation symbol , the Greek capital
letter sigma.)
The product AB of a row matrix A = [ai] and a column matrix B = [bi] with the same number of elements
is deﬁned as follows:
AB = [a1, a2, . . . , an]
⎡
⎢⎢⎣
b1
b2
..
bn
⎤
⎥⎥⎦= a1b1 + a2b2 + · · · + anbn =
n

k=1
akbk
That is, AB is obtained by multiplying corresponding entries in A and B and then adding all the products. We
emphasize that AB is a scalar (or a 1 × 1 matrix). The product AB is not deﬁned when A and B have different
numbers of elements.
EXAMPLE A.5
(a) [7, −4, 5]
⎡
⎣
3
2
−1
⎤
⎦= 7(3) + (−4)(2) + 5(−1) = 21 −8 −5 = 8

APP. A]
VECTORS AND MATRICES
413
(b) [6, −1, 8, 3]
⎡
⎢⎢⎣
4
−9
−2
5
⎤
⎥⎥⎦= 24 + 9 −16 + 15 = 32
We are now ready to deﬁne matrix multiplication in general.
Deﬁnition A.1: Let A = [aik] and B = [bkj] be matrices such that the number of columns of A is equal to the
number of rows of B, say, A is an m × p matrix and B is a p × n matrix. Then the product AB is the m × n matrix
C = [cij] whose ij-entry is obtained by multiplying the ith row of A by the jth column of B, that is,
cij = ai1b1j + ai2b2j + · · · + aipbpj =
p

k=1
aikbkj
The product AB is pictured in Fig. A-2.
⎡
⎢⎢⎢⎢⎣
a11
. . .
a1p
·
. . .
·
ai1
. . .
aip
·
. . .
·
am1
. . .
amp
⎤
⎥⎥⎥⎥⎦
⎡
⎢⎢⎢⎢⎣
b11
. . .
b1j
. . .
b1n
·
. . .
·
. . .
·
·
. . .
·
. . .
·
·
. . .
·
. . .
·
bp1
. . .
bpj
. . .
bpn
⎤
⎥⎥⎥⎥⎦
=
⎡
⎢⎢⎢⎢⎣
c11
. . .
c1n
·
. . .
·
·
cij
·
·
. . .
·
cm1
. . .
cmn
⎤
⎥⎥⎥⎥⎦
Fig. A-2
We emphasize that the product AB is not deﬁned if A is an m×p matrix and B is a q ×n matrix where p ̸= q.
EXAMPLE A.6
(a) Find AB where A =
& 1
3
2
−1
'
and B =
& 2
0
−4
5
−2
6
'
.
Since A is 2 × 2 and B is 2 × 3, the product AB is deﬁned and AB is a 2 × 3 matrix. To obtain the ﬁrst
row of the product matrix AB, multiply the ﬁrst row (1, 3) of A times each column of B,
& 2
5
'
,
&
0
−2
'
,
& −4
6
'
respectively. That is,
AB =
 2 + 15
0 −6
−4 + 18 
=
 17
−6
14 
To obtain the second row of the product AB, multiply the second row (2, −1) of A times each column of B,
respectively. Thus
AB =
&
17
−6
14
4 −5
0 + 2
−8 −6
'
=
& 17
−6
14
−1
2
−14
'
(b) Suppose A =
& 1
2
3
4
'
and B =
& 5
6
0
−2
'
. Then
AB =
&
5 + 0
6 −4
15 + 0
18 −8
'
=
&
5
2
15
10
'
and
BA =
& 5 + 18
10 + 24
0 −6
0 −8
'
=
& 23
34
−6
−8
'
The above Example A.6(b) shows that matrix multiplication is not commutative, that is, that the products AB
and BA of matrices need not be equal.

414
VECTORS AND MATRICES
[APP. A
Matrix multiplication does, however, satisfy the following properties:
Theorem A.2: Let A, B, C be matrices. Then, whenever the products and sums are deﬁned:
(i)
(AB)C = A(BC) (Associative Law).
(ii)
A(B + C) = AB + AC (Left Distributive Law).
(iii)
(B + C)A = BA + CA (Right Distributive Law).
(iv)
k(AB) = (kA)B = A(kB) where k is a scalar.
Matrix Multiplication and Systems of Linear Equations
Any system S of linear equations is equivalent to the matrix equation
AX = B
where A is the matrix consisting of the coefﬁcients, X is the column vector of unknowns, and B is the column
vector of constants. (Here equivalent means that any solution of the system S is a solution to the matrix equation
AX = B, and vice versa.) For example, the system
x + 2y −3z = 4
5x −6y + 8z = 9
is equivalent to
& 1
2
−3
5
−6
8
' ⎡
⎣
x
y
z
⎤
⎦=
& 4
9
'
Observe that the system is completely determined by the matrix
M = [A, B] =
& 1
2
−3
4
5
−6
8
9
'
which is called the augmented matrix of the system.
A.6
TRANSPOSE
The transpose of a matrix A, written AT , is the matrix obtained by writing the rows of A, in order, as columns.
For example,
& 1
2
3
4
5
6
'T
=
⎡
⎣
1
4
2
5
3
6
⎤
⎦
and
[1, −3, −5]T =
⎡
⎣
1
−3
−5
⎤
⎦
Note that if A is an m×n matrix, then AT is an n×m matrix. In particular, the transpose of a row vector is a column
vector, and vice versa. Furthermore, if B = [bij] is the transpose of A = [aij], then bij = aji for all i and j.
A.7
SQUARE MATRICES
A matrix with the same number of rows as columns is called a square matrix. A square matrix with n rows
and n columns is said to be of order n, and is called an n-square matrix.
The main diagonal, or simply diagonal, of an n-square matrix A = [aij] consists of the elements
a11, a22, . . ., ann, that is, the elements from the upper left corner to the lower right corner of the matrix. The
trace of A, written tr(A), is the sum of the diagonal elements, that is, tr(A) = a11 + a22 + · · · + ann.
The n-square unit matrix, denoted by In, or simply I, is the square matrix with 1’s along the diagonal and
0’s elsewhere. The unit matrix I plays the same role in matrix multiplication as the number 1 does in the usual
multiplication of numbers. Speciﬁcally, for any matrix A,
AI = IA = A
Consider, for example, the matrices
⎡
⎣
1
−2
0
0
−4
−6
5
3
2
⎤
⎦
and
⎡
⎢⎢⎣
1
0
0
0
0
1
0
0
0
0
1
0
0
0
0
1
⎤
⎥⎥⎦

APP. A]
VECTORS AND MATRICES
415
Both are square matrices. The ﬁrst is of order 3, and its diagonal consists of the elements 1, −4, 2 so its trace
equals 1 −4 + 2 = −1. The second matrix is of order 4; its diagonal consists only of 1’s, and there are only 0’s
elsewhere. Thus the second matrix is the unit matrix of order 4.
Algebra of Square Matrices
Let A be any square matrix. Then we can multiply A by itself. In fact, we can form all nonnegative powers
of A as follows:
A2 = AA,
A3 = A2A, . . . ,
An+1 = AnA, . . . ,
and
A0 = I (when A ̸= 0)
Polynomials in the matrix A are also deﬁned. Speciﬁcally, for any polynomial
f (x) = a0 + a1x + a2x2 + · · · + anxn
where the ai are scalars, we deﬁne f (A) to be the matrix
f (A) = a0I + a1A + a2A2 + · · · + anAn
Note that f (A) is obtained from f (x) by substituting the matrix A for the variable x and substituting the scalar
matrix a0I for the scalar term a0. In the case that f (A) is the zero matrix, the matrix A is then called a zero or
root of the polynomial f (x).
EXAMPLE A.7 Suppose A =
& 1
2
3
−4
'
. Then
A2 =
& 1
2
3
−4
' & 1
2
3
−4
'
=
&
7
−6
−9
22
'
and
A3 = A2A =
&
7
−6
−9
22
' & 1
2
3
−4
'
=
& −11
38
57
−106
'
Suppose f (x) = 2x2 −3x + 5. Then
f (A) = 2
&
7
−6
−9
−22
'
−3
& 1
2
3
−4
'
+ 5
& 1
0
0
1
'
=
&
16
−18
−27
61
'
Suppose g(x) = x2 + 3x −10. Then
g(A) =
&
7
−6
−9
22
'
+ 3
& 1
2
3
−4
'
−10
& 1
0
0
1
'
=
& 0
0
0
0
'
Thus A is a zero of the polynomial g(x).
A.8
INVERTIBLE (NONSINGULAR) MATRICES, INVERSES
A square matrix A is said to be invertible (or nonsingular) if there exists a matrix B such that
AB = BA = I,
(the identity matrix).
Such a matrix B is unique; it is called the inverse of A and is denoted by A−1. Observe that B is the inverse of A
if and only if A is the inverse of B. For example, suppose
A =
& 2
5
1
3
'
and
B =
&
3
−5
−1
2
'

416
VECTORS AND MATRICES
[APP. A
Then
AB =
& 6 −5
−10 + 10
3 −3
−5 + 6
'
=
& 1
0
0
1
'
and
BA =
&
6 −5
15 −15
−2 + 2
−5 + 6
'
=
& 1
0
0
1
'
Thus A and B are inverses.
It is known that AB = I if and only if BA = I; hence it is only necessary to test one product to determine
whether two matrices are inverses. For example,
⎡
⎣
1
0
2
2
−1
3
4
1
8
⎤
⎦
⎡
⎣
−11
2
2
−4
0
1
6
−1
−1
⎤
⎦=
⎡
⎣
−11 + 0 + 12
2 + 0 −2
2 + 0 −2
−22 + 4 + 18
4 + 0 −3
4 −1 −3
−44 −4 + 48
8 + 0 −8
8 + 1 −8
⎤
⎦=
⎡
⎣
1
0
0
0
1
0
0
0
1
⎤
⎦
Thus the two matrices are invertible and are inverses of each other.
A.9
DETERMINANTS
To each n-square matrix A = [aij] we assign a speciﬁc number called the determinant of A and denoted by
det(A) or |A| or
////////
a11
a12
· · ·
a1n
a21
a22
· · ·
a2n
..............................
an1
an2
· · ·
ann
////////
We emphasize that a square array of numbers enclosed by straight lines, called a determinant of order n, is not
a matrix but denotes the number that the determinant function assigns to the enclosed array of numbers, i.e., the
enclosed square matrix.
The determinants of order 1, 2, and 3 are deﬁned as follows:
//a11
// = a11
////
a11
a12
a21
a22
//// = a11a22 −a12a21
//////
a11
a12
a13
a21
a22
a23
a31
a32
a33
//////
= a11a22a33 + a12a23a31 + a13a21a32 −a13a22a31 −a12a21a33 −a11a23a32
The diagram in Fig. A-3(a) may help the reader remember the determinant of order 2. That is, the determinant
equals the product of the elements along the plus-labeled arrow minus the product of the elements along the
minus-labeled arrow. There is an analogous diagram to remember a determinant of order 3 which appears in
Fig. A-3(b). For notational convenience, we have separated the three plus-labeled arrows and the three minus-
labeled arrows. We emphasize that there are no such diagrammatic tricks to remember determinants of higher
order.
Fig. A-3
EXAMPLE A.8
(a)
////
5
4
2
3
//// = 5(3) −4(2) = 15 −8 = 7,
////
2
1
−4
6
//// = 2(6) −1(−4) = 12 + 4 = 16.

APP. A]
VECTORS AND MATRICES
417
(b)
//////
2
1
3
4
6
−1
5
1
0
//////
= 2(6)(0) + 1(−1)(5) + 3(1)(4) −5(6)(3) −1(−1)(2) −0(1)(4)
= 0 −5 + 12 −90 + 2 −0 = 81
General Deﬁnition of Determinants
The general deﬁnition of a determinant of order n is as follows:
det(A) =

sgn(σ)a1j1a2j2 . . . anjn
where the sum is taken over all permutations σ = {j1, j2, . . . , jn} of {1, 2, . . ., n}. Here sgn(σ) equals +1 or −1
according as an even or an odd number of interchanges are required to change σ so that its numbers are in the
usual order. We have included the general deﬁnition of the determinant function for completeness. The reader
is referred to texts in matrix theory or linear algebra for techniques for computing determinants of order greater
than 3. Permutations are studied in Chapter 5.
An important property of the determinant function is that it is multiplicative. That is:
Theorem A.3: Let A and B be any n-square matrices. Then
det(AB) = det(A) · det(B)
The proof of the above theorem lies beyond the scope of this text.
Determinants and Inverses of 2 × 2 Matrices
Consider an arbitrary 2 × 2 matrix A =
& a
b
c
d
'
. Suppose |A| = ad −bc ̸= 0. Then one can prove that
A−1 =
& a
b
c
d
'−1
=
&
d/|A|
−b/|A|
−c/ |A|
a/ |A|
'
= 1
|A|
&
d
−b
−c
a
'
In other words, when |A| ̸= 0, the inverse of a 2 × 2 matrix A is obtained as follows:
(1) Interchange the elements on the main diagonal.
(2) Take the negatives of the other elements.
(3) Multiply the matrix by 1/|A| or, equivalently, divide each element by |A|.
For example, if A =
& 2
3
4
5
'
, then |A| = −2 and so
A−1 = 1
−2
&
5
−3
−4
2
'
=
&
−5
2
3
2
2
−1
'
On the other hand, if |A| = 0, then A−1 does not exist. Although there is no simple formula for matrices of
higher order, this result does hold in general. Namely:
Theorem A.4: A matrix A is invertible if and only if it has a nonzero determinant.

418
VECTORS AND MATRICES
[APP. A
A.10
ELEMENTARY ROW OPERATIONS, GAUSSIAN ELIMINATION (OPTIONAL)
This section discusses the Gaussian elimination algorithm in the context of elementary row operations.
Elementary Row Operations
Consider a matrix A = [aij] whose rows will be denoted, respectively, by R1, R2, . . ., Rm. The ﬁrst nonzero
element in a row Ri is called the leading nonzero element. A row with all zeros is called a zero row. Thus a zero
row has no leading nonzero element.
The following three operations on A are called the elementary row operations:
[E1]
Interchange row Ri and row Rj. This operation will be indicated by writing: “Interchange Ri and Rj.”
[E2]
Multiply each element in a row Ri by a nonzero constant k. This operation will be indicated by writing:
“Multiply Ri by k.”
[E3]
Add a multiple of one row Ri to another row Rj or, in other words, replace Rj by the sum kRi + Rj.
This operation will be indicated by writing: “Add kRi to Rj.”
To avoid fractions, we may perform [E2] and [E3] in one step; that is, we may apply the following operation:
[E]
Add a multiple of one row Ri to a nonzero multiple of another row Rj or, in other words, replace Rj by
the sum kRi + k′Rj where k′ ̸= 0. We indicate this operation by writing: “Add kRi to k′Rj.”
We emphasize that, in the row operations [E3] and [E], only row Rj is actually changed.
Notation: MatricesA and B are said to be row equivalent, written A ∼B, if matrix B can be obtained from matrixA
by using elementary row operations.
Echelon Matrices
A matrix A is called an echelon matrix, or is said to be in echelon form, if the following two conditions hold:
(i) All zero rows, if any, are on the bottom of the matrix.
(ii) Each leading nonzero entry is to the right of the leading nonzero entry in the preceding row.
The matrix is said to be in row canonical form if it has the following two additional properties:
(iii) Each leading nonzero entry is 1.
(vi) Each leading nonzero entry is the only nonzero entry in its column.
The zero matrix 0, for any number of rows or columns, is a special example of a matrix in row canonical
form. The n-square identity matrix In is another example of a matrix in row canonical form.
A square matrix A is said to be in triangular form if its diagonal entries a11, a22, . . ., ann are the leading
nonzero entries. Thus a square matrix in triangular form is a special case of an echelon matrix. The identity
matrix I is the only example of a square matrix which is in triangular form and in row canonical form.
EXAMPLE A.9 Consider the echelon matrices in Fig. A-4 whose leading nonzero entries have been circled.
(The zeros preceding and below the leading nonzero entries in an echelon matrix form a “staircase” pattern
as indicated above by the shading.) The third matrix is in row canonical form. The second matrix is not in
row canonical form since the third column contains a leading nonzero entry and another nonzero entry. The
ﬁrst matrix is not in row canonical form since some leading nonzero entries are not 1. The last matrix is in
triangular form.
Fig. A-4

APP. A]
VECTORS AND MATRICES
419
Gaussian Elimination in Matrix Form
Consider any matrix A. Two algorithms, Algorithms A-1 and A-2, are given in Fig. A-5 and Fig. A-6,
respectively. The ﬁrst algorithm transforms the matrix A into an echelon form (using only elementary row
operations), and the second algorithm transforms the echelon matrix into a matrix in row canonical form. (The
two algorithms together are called Gaussian elimination.)
At the end of the Algorithm A-1, the pivot (leading nonzero) entries will be
a1j1, a2j2, . . ., arjr
where r denotes the number of nonzero rows in the matrix in echelon form.
Remark 1: The number m = −
aij1
a1j1
= −coefﬁcient to be deleted
pivot
is called the multiplier.
Remark 2: One could replace the operation in Step 1 (b) by
“Add −aij1R1 to a1j1Ri”
This would avoid fractions if all the scalars were originally integers.
EXAMPLE A.10 Find the row canonical form of A =
⎡
⎣
1
2
−3
1
2
2
4
−4
6
10
3
6
−6
9
13
⎤
⎦.
First reduce A to echelon form using Algorithm A-1. Speciﬁcally, use a11 = 1 as a pivot to obtains zeros
below a11, that is, apply the row operations “Add −2R1 to R2” and “Add −3R1 to R3.” Then use a23 = 2 as a
pivot to obtain 0 below a23, that is, apply the row operation “Add −3
2R2 to R3.” This yields
A ∼
⎡
⎣
1
2
−3
1
2
0
0
2
4
6
0
0
3
6
7
⎤
⎦∼
⎡
⎣
1
2
−3
1
2
0
0
2
4
6
0
0
0
0
−2
⎤
⎦
The matrix A is now in echelon form.
Now use Algorithm A-2 to further reduce A to row canonical form. Speciﬁcally, multiply R3 by −1/2 so the
pivot entry a35 = 1, and then use a35 = 1 as a pivot to obtain zeros above it by the operations “Add −6R3 to
R2” and “Add −2R3 to R1.” This yields:
A ∼
⎡
⎣
1
2
−3
1
2
0
0
2
4
6
0
0
0
0
1
⎤
⎦∼
⎡
⎣
1
2
−3
1
0
0
0
2
4
0
0
0
0
0
1
⎤
⎦
Multiply R2 by 1
2 so the pivot entry a23 = 1, and then use a23 = 1 as a pivot to obtain 0 above it by the operation
“Add 3R1 to R1”. This yields:
A ∼
⎡
⎣
1
2
−3
1
0
0
0
1
2
0
0
0
0
0
1
⎤
⎦∼
⎡
⎣
1
2
0
7
0
0
0
1
2
0
0
0
0
0
1
⎤
⎦
The last matrix is the row canonical form of A.

420
VECTORS AND MATRICES
[APP. A
Fig. A-5
The ﬁnal Step r in Algorithm A-2 in Fig. A-6 changes the ﬁrst pivot to 1.
Fig. A-6
Algorithms A-1 and A-2 show that any matrix is row equivalent to at least one matrix in row canonical form.
Actually, one proves in linear algebra that such a matrix is unique; it is called the row canonical form of A.
Theorem A.5: Any matrix A is row equivalent to a unique matrix in row canonical form.
Matrix Solution of a System of Linear Equations
Consider a system S of linear equations or, equivalently, a matrix equation AX = B with augmented matrix
M = [A, B]. The system is solved by applying the above Gaussian elimination algorithm to M as follows.

APP. A]
VECTORS AND MATRICES
421
Part A (Reduction): Reduce the augmented matrix M to echelon form. If a row of the form (0, 0, . . . , 0, b), with
b ̸= 0, appears, then stop. The system does not have a solution.
Part B (Back-Substitution): Further reduce the augmented matrix M to its row canonical form.
The unique solution of the system or, when the solution is not unique, the free variable form of the solution
is easily obtained from the row canonical form of M.
The following example applies the above algorithm to a system S with a unique solution. The cases where S
has no solution and where S has an inﬁnite number of solutions are shown in Problem A.23.
EXAMPLE A.11
Solve the system:
⎧
⎨
⎩
x + 2y + z = 3
2x + 5y −z = −4
3x −2y −z = 5
Reduce its augmented matrix M to echelon form and then to row canonical form as follows:
M =
⎡
⎣
1
2
1
3
2
5
−1
−4
3
−2
−1
5
⎤
⎦∼
⎡
⎣
1
2
1
3
0
1
−3
−10
0
−8
−4
−4
⎤
⎦∼
⎡
⎣
1
2
1
3
0
1
−3
−10
0
0
−28
−84
⎤
⎦
∼
⎡
⎣
1
2
1
3
0
1
−3
−10
0
0
1
3
⎤
⎦∼
⎡
⎣
1
2
0
0
0
1
0
−1
0
0
1
3
⎤
⎦∼
⎡
⎣
1
0
0
2
0
1
0
−1
0
0
1
3
⎤
⎦
Thus the system has the unique solution x = 2, y = −1, z = 3 or, equivalently, the vector u = (2, −1, 3). We
note that the echelon form of M already indicated that the solution was unique since it corresponded to a triangular
system.
Inverse of an n × n Matrix
Figure A-7 contains Algorithm A-3 which ﬁnds the inverse A−1 of any arbitrary n × n matrix.
Fig. A-7

422
VECTORS AND MATRICES
[APP. A
EXAMPLE A.12
Find the inverse of A =
⎡
⎣
1
0
2
2
−1
3
4
1
8
⎤
⎦.
Form the matrix M = (A, I) and reduce M to echelon form:
M =
0 1
0
2
...
1
0
0
2
−1
3
....
0
1
0
4
1
8
....
0
0
1
1
∼
0 1
0
2
...
1
0
0
0
−1
−1
....
2
1
0
0
1
0
....
−4
0
1
1
∼
0 1
0
2
...
1
0
0
0
−1
−1
....
−2
1
0
0
0
−1
....
−6
1
1
1
In echelon form, the left half of M is in triangular form; hence A is invertible. Further row reduce M to row
canonical form:
M ∼
0 1
0
0
...
−11
2
2
0
−1
0
....
4
0
−1
0
0
1
....
6
−1
−1
1
∼
0 1
0
0
...
−11
2
2
0
1
0
....
−4
0
1
0
0
1
....
6
−1
−1
1
The identity matrix is in the left half of the ﬁnal matrix; hence the right half is A−1. In other words,
A−1 =
⎡
⎣
−11
2
2
−4
0
1
6
−1
−1
⎤
⎦
A.11
BOOLEAN (ZERO-ONE) MATRICES
The binary digits or bits are the symbols 0 and 1. Consider the following operations on these digits:
+
0
1
0
0
1
1
1
1
×
0
1
0
0
0
1
0
1
Viewing these bits as logical values (0 representing FALSE and 1 representing TRUE), the above operations
correspond, respectively, to the logical operations of OR (∨) and AND (∧); that is,
∨
F
T
F
F
T
T
T
T
∧
F
T
F
F
F
T
F
T
(The above operations on 0 and 1 are called Boolean operations since they also correspond to the operations of
a Boolean algebra discussed in Chapter 15.)
Now let A =

aij

be a matrix whose entries are the bits 0 and 1 subject to the above Boolean operations.
Then A is called a Boolean matrix. The Boolean product of two such matrices is the usual product except that
now we use the Boolean operations of addition and multiplication. For example, if
A =
& 1
1
1
0
'
and B =
& 0
1
0
1
'
, then AB =
& 0 + 0
1 + 1
0 + 0
1 + 0
'
=
& 0
1
0
1
'
One can easily show that if A and B are Boolean matrices, then the Boolean product AB can be obtained by ﬁnding
the usual product of A and B and then replacing any nonzero digit by 1.

APP. A]
VECTORS AND MATRICES
423
Solved Problems
VECTORS
A.1. Let u = (2, −7, 1), v = (−3, 0, 4), and w = (0, 5, −8). Find: (a) 3u −4v; (b) 2u + 3v −5w.
First perform the scalar multiplication and then the vector addition.
(a) 3u −4v = 3(2, −7, 1) −4(−3, 0, 4) = (6, −21, 3) + (12, 0, −16) = (18, −21, −13).
(b) 2u + 3v −6w = 2(2, −7, 1) + 3(−3, 0, 4) −5(0, 5, −8) = (4, −14, 2) + (−9, 0, 12) + (0, −25, 40)
= (−5, −39, 54).
A.2. For the vector u, v, w in Problem A.1, ﬁnd: (a) u · v; (b) u · w; (c) v · w.
Multiply corresponding components and then add:
(a) u · v = 2(−3) −7(0) + 1(4) = −6 + 0 + 4 = −2.
(b) u · w = 2(0) −7(5) + 1(−8) = 0 −35 −8 = −43.
(c) v · w = −3(0) + 0(5) + 4(−8) = 0 + 0 −32 = −32.
A.3. Find ∥u∥where: (a) u = (3, −12, −4); (b) u = (2, −3, 8, −7).
First ﬁnd ∥u∥2 = u · u by squaring the components and adding. Then ∥u∥=
!
∥u∥2.
(a) ∥u∥2 = (3)2 + (−12)2 + (−4)2 = 9 + 144 + 16 = 169. Hence ∥u∥=
√
169 = 13.
(b) ∥u∥2 = 4 + 9 + 64 + 49 = 126. Hence ∥u∥=
√
126.
A.4. Find x and y if x(1, 1) + y(2, 1) = (1, 4).
First multiply by the scalars x and y and then add:
x(1, 1) + y(2, −1) = (x, x) + (2y, −y) = (x + 2y, x −y) = (1, 4)
Two vectors are equal only when their corresponding components are equal; hence set the corresponding components
equal to each other to obtain x + 2y = 1 and x −y = 4. Finally, solve the system of equations to obtain x = 3 and
y = −1.
A.5. Suppose u =
⎡
⎣
5
3
−4
⎤
⎦, v =
⎡
⎣
−1
5
2
⎤
⎦, w =
⎡
⎣
3
−1
−2
⎤
⎦. Find: (a) 5u −2v; (b) −2u + 4v −3w.
(a) 5u −2v = 5
⎡
⎣
5
3
−4
⎤
⎦−2
⎡
⎣
−1
5
2
⎤
⎦=
⎡
⎣
25
15
−20
⎤
⎦+
⎡
⎣
2
−10
−4
⎤
⎦=
⎡
⎣
27
5
−24
⎤
⎦.
(b) −2u + 4v −3w =
⎡
⎣
−10
−6
8
⎤
⎦+
⎡
⎣
−4
20
8
⎤
⎦+
⎡
⎣
−9
3
6
⎤
⎦=
⎡
⎣
−23
17
22
⎤
⎦.
MATRIX ADDITION AND SCALAR MULTIPLICATION
A.6. Find 2A −3B, where A =
& 1
−2
3
4
5
−6
'
and B =
&
3
0
2
−7
1
8
'
.
First perform the scalar multiplications, and then a matrix addition:
2A −3B =
& 2
−4
6
8
10
−12
'
+
& −9
0
−6
21
−3
−24
'
=
& −7
−4
0
29
7
−36
'
(Note that we multiply B by −3 and then add, rather than multiplying B by 3 and subtracting. This usually avoids
errors.)

424
VECTORS AND MATRICES
[APP. A
A.7. Find x, y, z, t, where 3
& x
y
z
t
'
=
&
x
6
−1
2t
'
+
&
4
x + y
z + t
3
'
.
First write each side as a single matrix:
& 3x
3y
3z
3t
'
=
&
x + 4
x + y + 6
z + t −1
2t + 3
'
Set corresponding entries equal to each other to obtain the system of four equations.
3x = x + 4,
3y = x + y + 6,
3z = z + t = 1,
3t = 2t + 3
or
2x = 4,
2y = 6 + x,
2z = t −1,
t = 3
The solution is x = 2, y = 4, z = 1, t = 3.
A.8. Prove Theorem A.1(v): k(A + B) = kA + kB.
Let A = [aij] and B = [bij]. Then the ij entry of A + B is aij + bij. Hence k(aij + bij) is the ij entry of k(A + B).
On the other hand, the ij entries of kA and kB are kaij and kbij, respectively. Thus kaij + kbij is the ij entry of kA + kB.
However, for scalars, k(aij + bij) = kaij + kbij. Thus k(A + B) and kA + kB have the same ij entries. Therefore,
k(A + B) = kA + kB.
MATRIX MULTIPLICATION AND TRANSPOSE
A.9. Calculate: (a) [3, −2, 5]
⎡
⎣
6
1
−4
⎤
⎦;
(b) [2, −1, 7, 4]
⎡
⎢⎢⎣
5
−3
−6
9
⎤
⎥⎥⎦.
Multiply corresponding entries and then add:
(a) [3, −2, 5]
⎡
⎣
6
1
−4
⎤
⎦= 18 −2 −20 = −4.
(b) [2, −1, 7, 4]
⎡
⎢⎢⎣
5
−3
−6
9
⎤
⎥⎥⎦= 10 + 3 −42 + 36 = 7.
A.10. Let A =
& 1
3
2
−1
'
and B =
& 2
0
−4
3
−2
6
'
. Find: (a) AB; (b) BA.
(a) Since A is 2 × 2 and B is 2 × 3, the product AB is deﬁned and is a 2 × 3 matrix. To obtain the ﬁrst row of AB,
multiply the ﬁrst row [1, 3] of A by the columns
& 2
3
'
,
&
0
−2
'
,
& −4
6
'
of B, respectively:
& 1
3
2
−1
' & 2
0
−4
3
−2
6
'
=
 1(6) + 3(3)
1(0) + 3(−2)
1(−4) + 3(6) 
=
 2 + 9
0 −6
−4 + 18 
=
 11
−6
14 
To obtain the entries in the second row of AB, multiply the second row [2, −1] of A by the columns of B,
respectively:
& 1
3
2
−1
' & 2
0
−4
3
−2
6
'
=
&
11
−6
14
4 −3
0 + 2
−8 −6
'
Thus
AB =
& 11
−6
14
1
2
−14
'
(b) Note that B is 2 × 3 and A is 2 × 2. Since the inner numbers, 3 and 2, are not equal, the product BA is not deﬁned.

APP. A]
VECTORS AND MATRICES
425
A.11. Find the transpose of each matrix:
A =
& 1
−2
3
7
8
−9
'
;
B =
⎡
⎣
1
2
3
2
4
5
3
5
6
⎤
⎦;
C = [1, −3, 5, −7] ;
D =
⎡
⎣
2
−4
6
⎤
⎦
Rewrite the rows of each matrix as columns to obtain the transposes of the matrices:
AT =
⎡
⎣
1
7
−2
8
3
−9
⎤
⎦,
BT =
⎡
⎣
1
2
3
2
4
5
3
5
6
⎤
⎦,
CT =
⎡
⎢⎢⎣
1
−3
5
−7
⎤
⎥⎥⎦,
DT = [2, −4, 6]
(Note that BT = B; such a matrix is said to be symmetric. Note also that the transpose of the row vector C is a column
vector, and the transpose of the column vector D is a row vector.)
A.12. Prove Theorem A.2(i): A(BC) = A(BC).
Let A = [aij], B = [bjk], and C = [ckl]. Furthermore, let AB = S = [sik] and BC = T = [tjl].
Then
sik = ai1b1k + ai2b2k + · · · + aimbmk =
m
j=1
aijbjk
tjl = bj1c1i + bj2c2i + · · · + bjncnl =
n
k=l
bjkckl
Now, multiplying S by C, i.e., (AB) by C, the element in the ith row and lth column of the matrix (AB)C is
si1c1l + si2c2l + · · · + sincnl =
n

k=1
sikckl =
n

k=1
m

j=1
(aijbjk)ckl
On the other hand, multiplying A by T, i.e., A by BC, the element in the ith row and lth column of the matrix
A(BC) is
ai1t1l + ai2t2l + · · · + aimtml =
m

j=1
aijtjl =
m

k=1
n

j=1
aij(bjkckl)
Since the above sums are equal, the theorem is proven.
SQUARE MATRICES, DETERMINANTS, INVERSES
A.13. Find the diagonal and trace of each matrix:
(a) A =
⎡
⎣
1
3
6
2
−5
8
4
−2
7
⎤
⎦;
(b) B =
& t −2
3
−4
t + 5
'
;
(c) C =
& 1
2
−3
4
−5
6
'
.
(a) The diagonal consists of the elements a11, a22, a33, that is, the scalars 1, −5, 7. The trace is the sum of the diagonal
elements; hence tr(A) = 1 −5 + 7 = 3.
(b) The diagonal consists of the pair {t −2, t + 5}. Thus tr(B) = t −2 + t + 5 = 2t + 3.
(c) The diagonal and trace are deﬁned only for square matrices.
A.14. Let A
=
& 1
2
4
−3
'
. Find:
(a) A2;
(b) A3;
(c) f (A) where f (x)
=
2x3 −4x + 5;
(d) g(A) where g(x) = x2 + 2x −11.
(a) A2 = AA =
& 1
2
4
−3
' & 1
2
4
−3
'
=
&
1 + 8
2 −6
4 −12
8 + 9
'
=
&
9
−4
−8
17
'
.
(b) A3 = AA2 =
& 1
2
4
−3
' &
9
−4
−8
17
'
=
&
9 −16
−4 + 34
36 + 24
−16 −51
'
=
& −7
30
60
−67
'
.

426
VECTORS AND MATRICES
[APP. A
(c) Compute f (A) by ﬁrst substituting A for x and 5I for the constant term 5 in f (x) = 2x3 −4x + 5:
f (A) = 2A3 −4A + 5I = 2
& −7
30
60
−67
'
−4
& 1
2
4
−3
'
+ 5
& 1
0
0
1
'
Then multiply each matrix by its respective scalar:
f (A) =
& −14
60
120
−134
'
+
&
−4
−8
−16
12
'
+
& 5
0
0
5
'
Lastly, add the corresponding elements in the matrices:
f (A) =
& −14 −4 + 5
60 −8 + 0
120 −16 + 0
−134 + 12 + 5
'
=
& −13
52
104
−117
'
(d) Compute g(A) by ﬁrst substituting A for x and 11I for the constant term 11 in g(x) = x2 + 2x −11:
g(A) = A2 + 2A −11I =
&
9
−4
−8
17
'
+ 2
& 1
2
4
−3
'
−11
& 1
0
0
1
'
=
&
9
−4
−8
17
'
+
& 2
4
8
−6
'
+
& −11
0
0
−11
'
=
& 0
0
0
0
'
(Since g(A) = 0, the matrix A is a zero of the polynomial g(x).)
A.15. Compute each determinant: (a)
////
4
5
−3
−2
////;
(b)
////
a −b
b
b
a + b
////.
(a)
////
4
5
−3
−2
//// = 4(−2) −(−3)(5) = −8 + 15 = 7.
(b)
////
a −b
b
b
a + b
//// = (a −b)(a + b) −b2 = a2 −b2 −b2 = a2 −2b2.
A.16. Find the determinant of each matrix:
(a) A =
⎡
⎣
1
2
3
4
−2
3
0
5
−1
⎤
⎦;
(b) B =
⎡
⎣
4
−1
−2
0
2
−3
5
2
1
⎤
⎦;
(c) C =
⎡
⎣
2
−3
4
1
2
−3
−1
−2
5
⎤
⎦
(Hint: Use the diagram in Fig. A-3 (b)):
(a) |A| = 2 + 0 + 60 −0 −15 + 8 = 55
(b) |B| = 8 + 15 + 0 + 20 + 24 + 0 = 67
(c) |C| = 20 −9 −8 + 8 −12 + 15 = 14
A.17. Find the inverse of: (a) A =
& 5
3
4
2
'
; (b) B =
& −2
6
3
−9
'
.
Use the formula in Section A.9.
(a) First ﬁnd |A| = 5(2) −3(4) = 10 −12 = −2. Next, interchange the diagonal elements, take the negatives of the
nondiagonal elements, and multiply by 1/ |A| :
A−1 = −1
2
&
2
−3
−4
5
'
=
0
−1
3
2
2
−5
2
1
(b) First ﬁnd |B| = −2(−9) −6(3) = 18 −18 = 0. Since |B| = 0, B has no inverse.
A.18. Find the inverse of: (a) A =
⎡
⎣
1
−2
2
2
−3
6
1
1
7
⎤
⎦; (b) B =
⎡
⎣
1
3
−4
1
5
−1
3
13
−6
⎤
⎦.

APP. A]
VECTORS AND MATRICES
427
(a) Form the matrix M = [A, I] and row reduce M to echelon form:
M =
⎡
⎣
1
−2
2
...
1
0
0
2
−3
6
.....
0
1
0
1
1
7
....
0
0
1
⎤
⎦∼
⎡
⎣
1
−2
...
2
1
0
0
0
1
.....
2
−2
1
0
0
3
.....
5
−1
0
1
⎤
⎦∼
⎡
⎣
1
−2
2
...
1
0
0
0
1
2
.....
−2
1
0
0
0
−1
.....
5
−3
1
⎤
⎦
In echelon form, the left half of M is in triangular form; hence A has an inverse. Further reduce M to row canonical
form:
M =
⎡
⎣
1
−2
0
...
11
−6
2
0
1
0
.....
8
−5
2
0
0
1
.....
−5
3
−1
⎤
⎦∼
⎡
⎣
1
0
0
...
27
−16
6
0
1
0
.....
8
−5
2
0
0
1
.....
−5
3
−1
⎤
⎦
The ﬁnal matrix has the form [I, A−1]; that is, A−1 is the right half of the last matrix. Thus
A−1 =
⎡
⎣
27
−16
6
8
−5
2
−5
3
−1
⎤
⎦
(b) Form the matrix M = [B, I] and row reduce M to echelom form:
M =
⎡
⎣
1
3
−4
...
1
0
0
1
5
−1
.....
0
1
0
3
13
−6
.....
0
0
1
⎤
⎦∼
⎡
⎣
1
3
−4
...
1
0
0
0
2
3
.....
−1
1
0
0
4
6
.....
−3
0
1
⎤
⎦∼
⎡
⎣
1
3
−4
...
1
0
0
0
2
3
.....
−1
1
0
0
0
0
.....
−1
−2
1
⎤
⎦
In echelon form, M has a zero row in its left half; that is, B is not row reducible to triangular form. Accordingly,
B has no inverse.
ECHELON MATRICES, ROW REDUCTION, GAUSSIAN ELIMINATION
A.19. Interchange the rows in each matrix to obtain an echelon matrix:
(a)
⎡
⎣
0
1
−3
4
6
4
0
2
5
−3
0
0
7
−2
8
⎤
⎦;
(b)
⎡
⎣
0
0
0
0
0
1
2
3
4
5
0
0
5
−4
7
⎤
⎦;
(c)
⎡
⎣
0
2
2
2
2
0
3
1
0
0
0
0
0
0
0
⎤
⎦
(a) Interchange the ﬁrst and second rows.
(b) Bring the zero row to the bottom of the matrix.
(c) No number of row interchange can produce an echelon matrix.
A.20. Row reduce the matrix A =
⎡
⎣
1
2
−3
0
2
4
−2
2
3
6
−4
3
⎤
⎦to echelon form.
Use a11 as a pivot to obtain zeros below a11, that is, apply the row operations “Add −2R1 to R2” and “Add −3R1
to R3;” and then use a23 = 4 as a pivot to obtain a zero below a23, that is, by applying the row operation “Add −5R2
to 4R3.” These operations yield the following where the last matrix is in echelon form:
A ∼
⎡
⎣
1
2
−3
0
0
0
4
2
0
0
5
3
⎤
⎦∼
⎡
⎣
1
2
−3
0
0
0
4
2
0
0
0
2
⎤
⎦
A.21. Which of the following matrices are in row canonical form?
⎡
⎣
1
2
−3
0
1
0
0
5
2
−4
0
0
0
7
3
⎤
⎦,
⎡
⎣
0
1
7
−5
0
0
0
0
0
1
0
0
0
0
0
⎤
⎦,
⎡
⎣
1
0
5
0
2
0
1
2
0
4
0
0
0
1
7
⎤
⎦
The ﬁrst matrix is not in row canonical form since, for example, two leading nonzero entries are 5 and 7, not 1.
Also, there are nonzero entries above the leading nonzero entries 5 and 7. The second and third matrices are in row
canonical form.

428
VECTORS AND MATRICES
[APP. A
A.22. Reduce the matrix A =
⎡
⎣
1
−2
3
1
2
1
1
4
−1
3
2
5
9
−2
8
⎤
⎦to row canonical form.
First reduce A to echelon form by applying the operations “Add −R1 to R2” and “Add −2R1 to R3,” and then
the operation “Add −3R2 to R3.” These operations yield
A ∼
⎡
⎣
1
−2
3
1
2
0
3
1
−2
1
0
9
3
−4
4
⎤
⎦∼
⎡
⎣
1
−2
3
1
2
0
3
1
−2
1
0
0
0
2
1
⎤
⎦
Now use back-substitution on the echelon matrix to obtain the row canonical form of A. Speciﬁcally, ﬁrst multiply
R3 by 1
2 to obtain the pivot a34 = 1, and then apply the operations “Add 2R3 to R2” and “Add −R3 to Rt.” These
operations yield
A ∼
⎡
⎣
1
−2
3
1
2
0
3
1
−2
1
0
0
0
1
1
2
⎤
⎦∼
⎡
⎣
1
−2
3
0
3
2
0
3
1
0
2
0
0
0
1
1
2
⎤
⎦
Now multiply R2 by 1
3 making the pivot a22 = 1, and then apply the operation “Add 2R2 to R1.” We obtain
A ∼
⎡
⎢⎣
1
−2
3
0
3
2
0
1
1
3
0
2
3
0
0
0
1
1
2
⎤
⎥⎦∼
⎡
⎢⎣
1
0
11
3
0
17
6
0
1
1
3
0
2
3
0
0
0
1
1
2
⎤
⎥⎦
Since a11 = 1, the last matrix is the desired row canonical form of A.
A.23. Solve each system using its augmented matrix M:
(a)
x + y −2z + 4t = 5
2x + 2y −3z + t = 4
3x + 3y −4z −2t = 3
(b)
x −2y + 4z = 2
2x −3y + 5z = 3
3x −4y + 6z = 7
(a) Reduce its augmented matrix M to echelon form and then to row canonical form:
M =
⎡
⎣
1
1
−2
4
5
2
2
−3
1
4
3
3
−4
−2
3
⎤
⎦∼
⎡
⎣
1
1
−2
4
5
0
0
1
−7
−6
0
0
2
14
12
⎤
⎦∼
& 1
1
0
−10
−7
0
0
1
−7
−6
'
(The third row of the second matrix is deleted since it is a multiple of the second row and will result in a zero row.)
Write down the system corresponding to the row canonical form of M and then transfer the free variables to
the other side to obtain the free variable form of the solution:
x + y −10t = −7
z −7t = −6
and then
x = −7 −y + 10t
z = −6 + 7t
Here x and z are the basic variables and y and t are the free variables.
The parametric form of the solution can be obtained by setting the free variables equal to parameters, say y =
a and t
=
b. This process yields x
=
−7 −a + 10b, y
=
a, z
=
−6 + 7b, t
=
b or
u = (−7 −a + 10b, a, −6 + 7b, b) (which is another form of the solution).
A particular solution can be obtained by assigning any values to the free variables (or parameters) and
solving for the basic variables using either form of the general solution. For example, setting y = 2, t = 3, we
obtain x = 21, z = 15. Thus the following is a particular solution of the system:
x = 21,
y = 2,
z = 15,
t = 3
or
u = (21, 2, 15, 3)
(b) First row reduce its augmented matrix M to echelon form:
M =
⎡
⎣
1
−2
4
2
2
−3
5
3
3
−4
6
7
⎤
⎦∼
⎡
⎣
1
−2
4
2
0
1
−3
−1
0
2
−6
1
⎤
⎦∼
⎡
⎣
1
−2
4
2
0
1
−3
−1
0
0
0
3
⎤
⎦
In echelon form, the third row corresponds to the degenerate equation 0x + 0y + 0z = 3.
Thus the system has no solution. (Note that the echelon form indicates whether or not the system has a solution.)

APP. A]
VECTORS AND MATRICES
429
MISCELLANEOUS PROBLEMS
A.24. Let A =
⎡
⎣
1
0
0
0
0
1
1
1
0
⎤
⎦and B =
⎡
⎣
0
1
1
1
0
0
0
1
0
⎤
⎦be Boolean matrices.
Find the Boolean products AB, BA, and A2.
Find the usual matrix product and then substitute 1 for any nonzero scalar. Thus:
AB =
⎡
⎣
0
1
1
0
1
0
1
1
1
⎤
⎦;
BA =
⎡
⎣
1
1
1
1
0
0
0
0
1
⎤
⎦;
A2 =
⎡
⎣
1
0
0
1
1
0
1
0
1
⎤
⎦
A.25. Let A =
& 1
3
4
−3
'
. (a) Find a nonzero column vector u =
& x
y
'
such that Au = 3u.
(b) Describe
all such vectors.
(a) First set up the matrix equation Au = 3u and then write each side as a single matrix (column vector):
& 1
3
4
−3
' & x
y
'
= 3
& x
y
'
and
&
x + 3y
4x −3y
'
=
& 3x
3y
'
Set corresponding elements equal to each other to obtain a system of equations, and reduce the system to echelon
form:
x + 3y = 3x
4x −3y = 3y
or
2x −3y = 0
4x −6y = 0
to
2x −3y = 0
0 = 0
or
2x −3y = 0
The system reduces to one (nondegenerate) linear equation in two unknowns, and so it has an inﬁnite number
of solutions. To obtain a nonzero solution, set y = 2, say; then x = 3. Thus u = [3, 2]T is a desired nonzero
solution.
(b) To ﬁnd the general solution, set y = a, where a is a parameter. Substitute y = a into 2x −3y = 0 to obtain
x = 3a/2. Thus u = [3a/2, a]T represents all such solutions.Alternatively, let y = 2b so v = [3b, 2b] represents
all such solutions.
Supplementary Problems
VECTORS
A.26. Let u = (2, −1, 0, −3), v = (1, −1, −1, 3), w = (1, 3, −2, 2). Find:
(a) 2u −3v;
(b) 5u −3v −4w;
(c) −u + 2v −2w;
(d) u · v, u · w, v · w,
(e) ∥u∥, ∥v∥, ∥w∥.
A.27. Let
u =
⎡
⎣
1
3
−4
⎤
⎦,
v =
⎡
⎣
2
1
5
⎤
⎦,
w =
⎡
⎣
3
−2
6
⎤
⎦.
Find:
(a) 5u
−
3v;
(b) 2u
+
4v
−
6w;
(c) u · v, u · w, v · w;
(d) ∥u∥, ∥v∥, ∥w∥.
A.28. Find x and y where:
(a) x(2, 5) + y(4, −3) = (8, 33);
(b) x(1, 4) + y(2, −5) = (7, 2).
MATRIX OPERATIONS
A.29. Let A =
& 1
2
3
−4
'
, B =
&
5
0
−6
7
'
, C =
& 1
−3
4
2
6
−5
'
, D =
& 3
7
−1
4
−8
9
'
. Find:
(a) 5A −2B and 2C −3D;
(c) AC and AD;
(e) AT and CT ;
(b) AB and BA;
(d) BC and BD;
(f) A2, B2, C2.

430
VECTORS AND MATRICES
[APP. A
A.30. Let A =
& 1
−1
2
0
3
4
'
, B =
&
4
0
−3
−1
−2
3
'
, C =
⎡
⎣
2
−3
0
1
5
−1
−4
2
−1
0
0
3
⎤
⎦, D =
⎡
⎣
2
−1
3
⎤
⎦.
Find:
(a) 3A −4B;
(b) AB, AC, AD;
(c) BC, BD, CD;
(d) AT and AT B.
A.31. Let A =
& 1
2
3
6
'
. Find a 2 × 3 matrix B with distinct entries such that AB = 0.
SQUARE MATRICES
A.32. Find the diagonal and trace of: (a) A =
⎡
⎣
2
−7
8
3
−6
−5
4
0
−1
⎤
⎦; (b) B =
⎡
⎣
1
2
−9
−3
2
8
5
−6
−1
⎤
⎦.
A.33. Let A =
& 2
−5
3
1
'
. Find: (a) A2 and A3; (b) f (A) where f (x) = x3 −2x2 −5.
A.34. Let B =
& 4
−2
1
−6
'
. Find: (a) B2 and B3; (b) f (B) where f (x) = x2 + 2x −22.
A.35. Let A =
& 6
−4
3
−2
'
. Find a nonzero vector u =
& x
y
'
such that Au = 4u.
DETERMINANTS AND INVERSES
A.36. Find each determinant: (a)
////
2
5
4
1
//// ; (b)
////
6
1
3
−2
//// ; (c)
////
−2
8
−5
−2
//// ; (d)
////
a −b
a
a
a + b
//// .
A.37. Compute the determinant of each matrix in Problem A.32.
A.38. Find the inverse of: (a) A =
& 7
4
5
3
'
; (b) B =
& 5
−2
6
−3
'
; (c) C =
&
4
−6
−2
3
'
.
A.39. Find the inverse of each matrix (if it exists):
A =
⎡
⎣
1
2
−4
−1
−1
5
2
7
−3
⎤
⎦;
B =
⎡
⎣
1
−1
1
0
2
−2
1
3
−1
⎤
⎦;
C =
⎡
⎣
1
2
3
2
5
−1
5
12
1
⎤
⎦.
ECHELON MATRICES, ROW REDUCIONS, GAUSSIAN ELIMINATION
A.40. Reduce A to echelon form and then to row canonical form, where:
(a)
A =
⎡
⎣
1
2
−1
2
1
2
4
1
−2
3
3
6
2
−6
5
⎤
⎦;
(b)
A =
⎡
⎣
2
3
−2
5
1
3
−1
2
0
4
4
−5
6
−5
7
⎤
⎦.
A.41. Using only 0’s and 1’s, list all 2 × 2 matrices in echelon form.
A.42. Using only 0’s and 1’s ﬁnd the number of 3 × 3 matrices in row canonical form.
A.43. Solve each system:
(a)
x + 2y −4z = −3
2x + 6y −5z =
2
3x + 11y −4z = 12
(b)
x + 2y −4z = 3
2x + 6y −5z = 10
3x + 10y −6z = 14
A.44. Solve each system:
(a)
x −3y + 2z −t = 2
3x −9y + 7z −t = 7
2x −6y + 7z + 4t = 7
(b)
x + 2y + 3z = 7
x + 3y + z = 6
2x + 6y + 5z = 15
3x + 10y + 7z = 23

APP. A]
VECTORS AND MATRICES
431
MISCELLANEOUS PROBLEMS
A.45. Let A =
& 1
2
0
1
'
. Find: (a) An; (b) A−1; (c) matrix B such that B2 = A.
A.46. Matrices A and B are said to commute if AB = BA. Find all matrices
& x
y
z
t
'
which commute with
& 1
1
0
1
'
.
A.47. Let A =
⎡
⎣
0
1
0
1
0
1
1
0
0
⎤
⎦and B =
⎡
⎣
1
0
0
1
0
0
0
1
1
⎤
⎦be Boolean matrices.
Find the Boolean matrices: (a) A + B; (b) AB; (c) BA; (d) A2; (e) B2.
Answers to Supplementary Problems
Notation: M = [R1; R2; . . . ; Rn] denotes a matrix with
rows R1, . . . , Rn.
A.26. (a) (1, 1, 3, −15); (b) (3, −14, 11, −32);
(c) (−2, −7, 2, 5); (d) −6, −7, 6;
(e)
√
14,
√
12 = 2
√
3,
√
18 = 3
√
2.
A.27. (a) [−1, 12, −35]T ; (b) [−8, 22, −24]T ;
(c) −15, −27, 34; (d)
√
26,
√
30, 7.
A.28. (a) x = 6, y = −1; (b) x = 3, y = 2.
A.29. (a) [−5, 10; 27, −34], [−7, 27, 11; −8, 36, −37];
(b) [−7, 14; 39, −28], [5, 10; 15, −40];
(c) [5, 9, −6; −5, −33, 32], [11, −9, 17; −7, 53, 39];
(d)[5, −15, 20; 8, 60, −59], [15, 35, −5; 10, −98, 69];
(e) [1, 3; 2, −4], [1, 2; −3, 6; 4, −5];
(f) [7, −6; −9, 22], [25, 0; −72, 49], C2 not deﬁned.
A.30. (a) [−13, −3, 18; 4, 17, 0]; (b) AB not deﬁned,
[−5, −2, 4, 5; 11, −3, −12, 18], [9; 9];
(c) [11, −12, 0, −5; −15, 5, 8, 4], [−1; 9], CD not
deﬁned; (d) [1, 0; −1, 3; 2, 4], [4, 0, −3; −7,
−6, 12; 4, −8, 6].
A.31. [2, 4, 6; −1, −2, −3]
A.32. (a) [2, −6, −1], −5; (b) [1, 2, −1], 2
A.33. (a) [−11, −15; 9, −14], [−67, 40; −24, −59];
(b) [−50, 70; −42, −36].
A.34. (a) [14, 4; −2, 34], [60, −52; 26, −200]
(b) f (B) = 0.
A.35. [2a; a], for any nonzero a.
A.36. (a) −18; (b) −15; (c) 44; (d) −b2.
A.37. (a) 323; (b) 48.
A.38. (a) [3, −4; −5, 7]; (b) [1, −2/3; 2, −5/3];
(c) Not deﬁned.
A.39. (a) [−16, −11, 3; 7/2, 5/2, −1/2; −5/2, −3/2,
1/2]; (b) [1, 1/2, 0; −1/2, −1/2, 1/2; −1/2, −1,
1/2]; (c) Not deﬁned.
A.40. (a) [1, 2, −1, 2, 1; 0, 0, 3, −6, 1; 0, 0, 0, −6, 1],
[1, 2, 0, 0, 4/3; 0, 0, 1, 0, 0; 0, 0, 0, 1, −1/6];
(b) [2, 3, −2, 5, 1; 0, −11, 10, −15, 5; 0, . . . , 0],
[1, 0, 4/11, 5/11, 13/11; 0, 1, −10/11, 15/11,
−5/11; 0, . . . , 0]
A.41. [1, 1; 0, 1], [1, 1; 0, 0], [1, 0; 0, 0], [0, 1; 0, 0],
[0, 0; 0, 0], [1, 0; 0, 1]
A.42. There are 13.
A.43. (a) x = 3, y = 1, z = 2; (b) No solution.
A.44. (a) x = 3y + 5t, z = 1 −2t; (b) x = 2, y = 1, z = 1.
A.45. (a) [1, 2n; 0, 1]; (b) [1, −2; 0, 1]; (c) [1, 1; 0, 1].
A.46. [a, b; 0, a]
A.47. (a) [110; 101; 111]; (b) [100; 111; 100];
(c) [010; 010; 101]; (d) [101; 110; 010];
(e) [100; 100; 111].

APPENDIX B
Algebraic Systems
B.1
INTRODUCTION
This Appendix investigates some of the major algebraic systems in mathematics: semigroups, groups, rings,
and ﬁelds. We also deﬁne the notion of a homomorphism and the notion of a quotient structure. We begin with
the formal deﬁnition of an operation, and discuss various types of operations.
B.2
OPERATIONS
The reader is familiar with the operations of addition and multiplication of numbers, union and intersection
of sets, and the composition of functions. These operations are denoted as follows:
a + b = c,
a · b = c,
A ∪B = C,
A ∩B = C,
g o f = h.
In each situation, an element (c, C, or h) is assigned to an original pair of elements. We make this notion precise.
Deﬁnition B.1: Let S be a nonempty set. An operation on S is a function ∗from S × S into S. In such a case,
instead of ∗(a, b), we usually write
a ∗b
or sometimes
ab
The set S and an operation ∗on S is denoted by (S, ∗) or simply S when the operation is
understood.
Remark: An operation ∗from S × S into S is sometimes called a binary operation. A unary operation is a
function from S into S. For example, the absolute value |n| of an integer n is a unary operation on Z, and the
complement AC of a set A is a unary operation on the power set P(X) of a set X. A ternary (3-ary) operation is a
function from S ×S ×S into S. More generally, an n-ary operation is a function from S ×S ×· · ·×S (n factors)
into S. Unless otherwise stated, the word operation shall mean binary operation. We will also assume that our
underlying set S is nonempty.
Suppose S is a ﬁnite set. Then an operation ∗on S can be presented by its operation (multiplication) table
where the entry in the row labeled a and the column labeled b is a ∗b.
Suppose S is a set with an operation ∗, and suppose A is a subset of S. Then A is said to be closed under ∗
if a ∗b belongs to A for any elements a and b in A.
432
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

APP. B]
ALGEBRAIC SYSTEMS
433
EXAMPLE B.1 Consider the set N of positive integers.
(a) Addition (+) and multiplication (×) are operations on N. However, subtraction (−) and division (/) are
not operations on N since the difference and the quotient of positive integers need not be positive integers.
For example, 2 −9, and 7/3 are not positive integers.
(b) Let A and B denote, respectively, the set of even and odd positive integers. Then A is closed under addition
and multiplication since the sum and product of any even numbers are even. On the other hand, B is closed
under multiplication but not addition since, for example, 3 + 5 = 8 is even.
EXAMPLE B.2 Let S = {a, b, c, d}. The tables in Fig. B-1 deﬁne operations ∗and · on S. Note that ∗can be
deﬁned by the following operation where x and y are any elements of S:
x ∗y = x
Fig. B-1
Next we list a number of important properties of our operations.
Associative Law:
An operation ∗on a set S is said to be associative or to satisfy the Associative Law if, for any elements a, b,
c in S, we have
(a ∗b) ∗c = a ∗(b ∗c)
Generally speaking, if an operation is not associative, then there may be many ways to form a product. For
example, the following shows ﬁve ways to form the product abcd:
((ab)c)d,
(ab)(cd),
(a(bc))d,
a((bc)d),
a(b(cd))
If the operation is associative, then the following theorem (proved in Problem B.4) applies.
Theorem B.1: Suppose ∗is an associative operation on a set S. Then any product a1 ∗a2 ∗· · · ∗an requires no
parentheses, that is, all possible products are equal.
Commutative Law:
An operation ∗on a set S is said to be commutative or satisfy the Commutative Law if, for any elements a,
b in S,
a ∗b = b ∗a
EXAMPLE B.3
(a) Consider the set Z of integers. Addition and multiplication of integers are associative and commutative. On
the other hand, subtraction is nonassociative. For example,
(8 −4) −3 = 1
but
8 −(4 −3) = 7
Moreover, subtraction is not commutative since, for example, 3 −7 ̸= 7 −3.

434
ALGEBRAIC SYSTEMS
[APP. B
(b) Consider the operation of matrix multiplication on the set M of n-square matrices. One can prove that matrix
multiplication is associative. On the other hand, matrix multiplication is not commutative. For example,
& 1
2
3
4
' & 5
6
0
−2
'
=
& 5
2
15
10
'
but
& 5
6
0
−2
' & 1
2
3
4
'
=
& 23
34
−6
−8
'
Identity Element:
Consider an operation ∗on a set S. An element e in S is called an identity element for ∗if, for any element
a in S,
a ∗e = e ∗a = a
More generally, an element e is called a left identity or a right identity according as e ∗a = a or a ∗e = a where
a is any element in S. The following theorem applies.
Theorem B.2: Suppose e is a left identity and f is a right identity for an operation on a set S. Then e = f
The proof is very simple. Since e is a left identity, ef = f ; but since f is a right identity, ef = e. Thus
e = f . This theorem tells us, in particular, that an identity element is unique, and that if an operation has more
than one left identity then it has no right identity, and vice versa.
Inverses:
Suppose an operation ∗on a set S does have an identity element e. The inverse of an element a in S is an
element b such that
a ∗b = b ∗a = e
If the operation is associative, then the inverse of a, if it exists, is unique (Problem B.2). Observe that if b is the
inverse of a, then a is the inverse of b. Thus the inverse is a symmetric relation, and we can say that the elements
a and b are inverses.
Notation: If the operation on S is denoted by a ∗b, a × b, a · b, or ab, then S is said to be written multiplicatively
and the inverse of an element a ∈S is usually denoted by a−1. Sometimes, when S is commutative, the operation
is denoted by + and then S is said to be written additively. In such a case, the identity element is usually denoted
by 0 and it is called the zero element; and the inverse is denoted by −a and it is called the negative of a.
EXAMPLE B.4 Consider the rational numbers Q. Under addition, 0 is the identity element, and −3 and 3 are
(additive) inverses since
(−3) + 3 = 3 + (−3) = 0
On the other hand, under multiplication, 1 is the identity element, and −3 and −1/3 are (multiplicative) inverses
since
(−3)(−1/3) = (−1/3)(−3) = 1
Note 0 has no multiplicative inverse.
Cancellation Laws:
An operation ∗on a set S is said to satisfy the left cancellation law or the right cancellation law accord-
ing as:
a ∗b = a ∗c implies b = c
or
b ∗a = c ∗a implies b = c
Addition and subtraction of integers in Z and multiplication of nonzero integers in Z do satisfy both the left
and right cancellation laws. On the other hand, matrix multiplication does not satisfy the cancellation laws. For
example, suppose
A =
& 1
1
0
0
'
,
B =
& 1
1
0
1
'
,
C =
& 0
−3
1
5
'
,
D =
& 1
2
0
0
'
Then AB = AC = D, but B ̸= C.

APP. B]
ALGEBRAIC SYSTEMS
435
B.3
SEMIGROUPS
Let S be a nonempty set with an operation. Then S is called a semigroup if the operation is associative. If the
operation also has an identity element, then S is called a monoid.
EXAMPLE B.5
(a) Consider the positive integers N. Then (N, +) and (N, ×) are semigroups since addition and multiplication
on N are associative. In particular, (N, ×) is a monoid since it has the identity element 1. However, (N, +)
is not a monoid since addition in N has no zero element.
(b) Let S be a ﬁnite set, and let F(S) be the collection of all functions f : S →S under the operation of
composition of functions. Since the composition of functions is associative, F(S) is a semigroup. In fact,
F(S) is a monoid since the identity function is an identity element for F(S).
(c) Let S = {a, b, c, d}. The multiplication tables in Fig. B-1 deﬁne operations ∗and · on S. Note that ∗can be
deﬁned by the formula x ∗y = x for any x and y in S. Hence
(x ∗y) ∗z = x ∗z = x
and
x ∗(y ∗z) = x ∗y = x
Therefore, ∗is associative and hence (S, ∗) is a semigroup. On the other hand, · is not associative since,
for example,
(b · c) · c = a · c = c
but
b · (c · c) = b · a = b
Thus (S, ·) is not a semigroup.
Free Semigroup, Free Monoid
Let A be a nonempty set. A word w on A is a ﬁnite sequence of its elements. For example, the following
are words on A = {a, b, c}:
u = ababbbb = abab4
and
v = baccaaaa = bac2a4
(We write a2 for aa, a3 for aaa, and so on.) The length of a word w, denoted by l(w), is the number of elements
in w. Thus l(u) = 7 and l(v) = 8.
The concatenation of words u and v on a set A, written u ∗v or uv, is the word obtained by writing down the
elements of u followed by the elements of v. For example,
uv = (abab4)(bac2a4) = abab5c2a4
Now let F = F(A) denote the collection of all words on A under the operation of concatenation. Clearly,
for any words u, v, w, the words (uv)w and u(vw) are identical; they simply consist of the elements of u, v, w
written down one after the other. Thus F is a semigroup; it is called the free semigroup on A, and the elements
of A are called the generators of F.
The empty sequence, denoted by l, is also considered as a word on A. However, we do not assume that
l belongs to the free semigroup F = F(A). The set of all words on A including l is frequently denoted by A*.
Thus A* is a monoid under concatenation; it is called the free monoid on A.
Subsemigroups
Let A be a nonempty subset of a semigroup S. Then A is called a subsemigroup of S if A itself is a
semigroup with respect to the operation on S. Since the elements of A are also elements of S, theAssociative Law
automatically holds for the elements of A. Therefore, A is a subsemigroup of S if and only if A is closed under the
operation on S.

436
ALGEBRAIC SYSTEMS
[APP. B
EXAMPLE B.6
(a) Let A and B denote, respectively, the set of even and odd positive integers. Then (A, ×) and (B, ×) are
subsemigroups of (N, ×) since A and B are closed under multiplication. On the other hand, (A, +) is a
subsemigroup of (N, +) since A is closed under addition, but (B, +) is not a subsemigroup of (N, +) since
B is not closed under addition.
(b) Let F be the free semigroup on the set A = {a, b}. Let H consist of all even words, that is, words with even
length. The concatenation of two such words is also even. Thus H is a subsemigroup of F.
Congruence Relations and Quotient Structures
Let S be a semigroup and let ∼be an equivalence relation on S. Recall that the equivalence relation ∼induces
a partition of S into equivalence classes. Also, [a] denotes the equivalence class containing the element a ∈S,
and that the collection of equivalence classes is denoted by S/∼.
Suppose that the equivalence relation ∼on S has the following property:
If a ∼a′ and b ∼b′, then ab ∼a′b′.
Then ∼is called a congruence relation on S. Furthermore, we can now deﬁne an operation on the equivalence
classes by
[a] ∗[b] = [a ∗b]
or, simply,
[a] [b] = [ab]
Furthermore, this operation on S/∼is associative; hence S/∼is a semigroup. We state this result formally.
Theorem B.3: Let ∼be a congruence relation on a semigroup S. Then S/∼, the equivalence classes under ∼,
form a semigroup under the operation [a] [b] = [ab].
This semigroup S/∼is called the quotient of S by ∼.
EXAMPLE B.7
(a) Let F be the free semigroup on a set A. Deﬁne u ∼u′ if u and u′ have the same length. Then ∼is an
equivalence relation on F. Furthermore, suppose u ∼u′ and v ∼v′, say,
l(u) = l(u′) = m
and
l(v) = l(v′) = n
Then l(uv) = l(u′v′) = m + n, and so uv ∼u′v′. Thus ∼is a congruence relation on F.
(b) Consider the integers Z and a positive integer m > 1. Recall (Section 11.8) that we say that a is congruent
to b modulo m, written
a ≡b (mod m)
if m divides the difference a −b. Theorem 11.21 states that this relation is an equivalence relation on Z.
Furthermore, Theorem 11.22 tells us that if a ≡c (mod m) and b ≡d (mod m) then:
a + b ≡c + d (mod m)
and
ab ≡cd (mod m)
In other words, this relation is a congruence relation on Z.

APP. B]
ALGEBRAIC SYSTEMS
437
Homomorphism of Semigroups
Consider two semigroups (S, ∗) and (S′, ∗′). A function f : S →S′ is called a semigroup homomorphism
or, simply, a homomorphism if
f (a ∗b) = f (a) ∗′ f (b)
or, simply
f (ab) = f (a)f (b)
Suppose f is also one-to-one and onto. Then f is called an isomorphism between S and S′, and S and S′ are said
to be isomorphic semigroups, written S ∼= S.
EXAMPLE B.8
(a) Let M be the set of all 2 × 2 matrices with integer entries. The determinant of any matrix A =
& a
b
c
d
'
is denoted and deﬁned by det(A) = |A| = ad −bc. One proves in Linear Algebra that the determinant is a
multiplicative function, that is, for any matrices A and B,
det(AB) = det(A) · det(B)
Thus the determinant function is a semigroup homomorphism on (M, ×), the matrices under matrix multi-
plication. On the other hand, the determinant function is not additive, that is, for some matrices,
det(A + B) ̸= det(A) + det(B)
Thus the determinant function is not a semigroup homomorphism on (M, +).
(b) Figure B-2(a) gives the addition table for Z4, the integers modulo 4 under addition; and Fig. B-2(b) gives
the multiplication table for S = {1, 3, 7, 9} in Z10. (We note that S is a reduced residue system for the
integers Z modulo 10.) Let f : Z4 →S be deﬁned by
f (0) = 1,
f (1) = 3,
f (2) = 9,
f (3) = 7
Fig. B-2
One can show that f is a homomorphism. Since f is also one-to-one and onto, f is an isomorphism. Thus
Z4 and S are isomorphic semigroups.
(c) Let ∼be a congruence relation on a semigroup S. Let φ: S →S/∼be the natural mapping from S into the
factor semigroup S/∼deﬁned by
φ(a) = [a]
That is, each element a in S is assigned its equivalence class [a]. Then φ is a homomorphism since
φ(ab) = [ab] = [a] [b] = φ(a)φ(b)

438
ALGEBRAIC SYSTEMS
[APP. B
Fundamental Theorem of Semigroup Homomorphisms
Recall that the image of a function f : S →S′, written f (S) of Im f , consists of the images of the elements
of S under f . Namely:
Im f = {b ∈S′ | there exists a ∈S for which f (a) = b}
The following theorem (proved in Problem B.5) is fundamental to semigroup theory.
Theorem B.4: Let f : S →S′ be a semigroup homomorphism.
Let a ∼b if f (a) = f (b).
Then:
(i) ∼is a congruence relation on S. (ii) S/∼is isomorphic to f (S).
EXAMPLE B.9
(a) Let F be the free semigroup on A = {a, b}. The function f : F →Z deﬁned by
f (u) = l(u)
is a homomorphism. Note f (F) = N. Thus F/∼is isomorphic to N.
(b) Let M be the set of 2 × 2 matrices with integer entries. Consider the determinant function det: M →Z. We
note that the image of det is Z. By Theorem B.4, M/∼is isomorphic to Z.
Semigroup Products
Let (S1, ∗1) and (S2, ∗2) be semigroups. We form a new semigroup S = S1 ⊗S2, called the direct product
of S1 and S2, as follows.
(1) The elements of S come from S1 × S2, that is, are ordered pairs (a, b) where a ∈S1 and b ∈S2
(2) The operation ∗in S is deﬁned componentwise, that is,
(a, b) ∗(a′, b′) = (a ∗1 a′, b ∗2 b′)
or simply
(a, b)(a′, b′) = (aa′, bb′)
One can easily show (Problem B.3) that the above operation is associative.
B.4
GROUPS
Let G be a nonempty set with a binary operation (denoted by juxtaposition). Then G is called a group if the
following axioms hold:
[G1] Associative Law: For any a, b, c in G, we have (ab)c = a(bc).
[G2] Identity element: There exists an element e in G such that ae = ea = a for every a in G.
[G3] Inverses: For each a in G, there exists an element a−1 in G (the inverse of a) such that
aa−1 = a−1a = e
A group G is said to be abelian (or commutative) if ab = ba for every a, b ∈G, that is, if G satisﬁes the
Commutative Law.
When the binary operation is denoted by juxtaposition as above, the group G is said to be written multiplica-
tively. Sometimes, when G is abelian, the binary operation is denoted by + and G is said to be written additively.
In such a case the identity element is denoted by 0 and it is called the zero element; and the inverse is denoted by
−a and it is called the negative of a.
The number of elements in a group G, denoted by |G|, is called the order of G. In particular, G is called a
ﬁnite group if its order is ﬁnite.
Suppose A and B are subsets of a group G. Then we write:
AB = {ab | a ∈A, b ∈B}
or
A + B = {a + b | a ∈A, b ∈B}

APP. B]
ALGEBRAIC SYSTEMS
439
EXAMPLE B.10
(a) The nonzero rational numbers Q\{0} form an abelian group under multiplication. The number 1 is the identity
element and q/p is the multiplicative inverse of the rational number p/q.
(b) Let S be the set of 2 × 2 matrices with rational entries under the operation of matrix multiplication. Then
S is not a group since inverses do not always exist. However, let G be the subset of 2 × 2 matrices with a
nonzero determinant. Then G is a group under matrix multiplication. The identity element is
I =
& 1
0
0
1
'
and the inverse of A =
& a
b
c
d
'
is A−1 =
&
d/ |A|
−b/ |A|
−c/ |A|
a/ |A|
'
This is an example of a nonabelian group since matrix multiplication is noncommutative.
(c) Recall that Zm denotes the integers modulo m. Zm is a group under addition, but it is not a group under
multiplication. However, let Um denote a reduced residue system modulo m which consists of those integers
relatively prime to m. Then Um is a group under multiplication (modulo m). Figure B-3 gives the multipli-
cation table for U12 = {1, 5, 7, 11}.
Fig. B-3
Fig. B-4
Symmetric Group Sn
A one-to-one mapping σ of the set {1, 2, …, n} onto itself is called a permutation. Such a permutation may
be denoted as follows where ji = σ(i):
σ =
 1
2
3
· · ·
n
j1
j2
j3
· · ·
jn

The set of all such permutations is denoted by Sn, and there are n! = n(n −1) · . . . · 2 · 1 of them. The
composition and inverses of permutations in Sn belong to Sn, and the identity function ε belongs to Sn. Thus Sn
forms a group under composition of functions called the symmetric group of degree n.
The symmetric group S3 has 3! = 6 elements as follows:
ε =
 1
2
3
1
2
3

,
σ2 =
 1
2
3
3
2
1

,
φ1 =
 1
2
3
2
3
1

σ1 =
 1
2
3
1
3
2

,
σ3 =
 1
2
3
2
1
3

,
φ2 =
 1
2
3
3
1
2

The multiplication table of S3 appears in Fig. B-4.

440
ALGEBRAIC SYSTEMS
[APP. B
MAP(A), PERM(A), and AUT(A)
Let A be a nonempty set. The collection MAP(A) of all functions (mappings) f : A →A is a semigroup
under composition of functions; it is not a group since some functions may have no inverses. However, the
subsemigroup PERM(A) of all one-to-one correspondences of A with itself (called permutations of A) is a group
under composition of functions.
Furthermore, suppose A contains some type of geometric or algebraic structure; for example, A may be the
set of vertices of a graph, or A may be an ordered set or a semigroup. Then the set AUT(A) of all isomorphisms
of A with itself (called automorphisms of A) is also a group under compositions of functions.
B.5
SUBGROUPS, NORMAL SUBGROUPS, AND HOMOMORPHISMS
Let H be a subset of a group G. Then H is called a subgroup of G if H itself is a group under the operation
of G. Simple criteria to determine subgroups follow.
Proposition B.5: A subset H of a group G is a subgroup of G if:
(i) The identity element e ∈H.
(ii) H is closed under the operation of G, i.e. if a, b ∈H, then ab ∈H.
(iii) H is closed under inverses, that is, if a ∈H, then a−1 ∈H.
Every group G has the subgroups {e} and G itself. Any other subgroup of G is called a nontrivial subgroup.
Cosets
Suppose H is a subgroup of G and a ∈G. Then the set
Ha = {ha | h ∈H}
is called a right coset of H. (Analogously, aH is called a left coset of H.) We have the following important
results (proved in Problems B.13 and B.15).
Theorem B.6: Let H be a subgroup of a group G. Then the right cosets Ha form a partition of G.
Theorem B.7 (Lagrange): Let H be a subgroup of a ﬁnite group G. Then the order of H divides the order of G.
The number of right cosets of H in G, called the index of H in G, is equal to the number of left cosets of H
in G; and both numbers are equal to |G| divided by |H|.
Normal Subgroups
The following deﬁnition applies.
Deﬁnition B.2: A subgroup H of G is a normal subgroup if a−1Ha ⊆H, for every a ∈G, or, equivalently,
if aH = Ha, i.e., if the right and left cosets coincide.
Note that every subgroup of an abelian group is normal.
The importance of normal subgroups comes from the following result (proved in Problem B.17).
Theorem B.8: Let H be a normal subgroup of a group G. Then the cosets of H form a group under coset
multiplication:
(aH)(bH) = abH
This group is called the quotient group and is denoted by G/H.
Suppose the operation in G is addition or, in other words, G is written additively. Then the cosets of a
subgroup H of G are of the form a + H. Moreover, if H is a normal subgroup of G, then the cosets form a group
under coset addition, that is,
(a + H) + (b + H) = (a + b) + H

APP. B]
ALGEBRAIC SYSTEMS
441
EXAMPLE B.11
(a) Consider the permutation group S3 of degree 3 which is investigated above. The set H = {ε, σ1} is a
subgroup of S3. Its right and left cosets follow:
Right Cosets
Left Cosets
H = {ε, σ1}
H = {ε, σ1}
Hφ1 = {φ1, σ2}
φ1H = {φ1, σ3}
Hφ2 = {φ2, σ3}
φ2H = {φ2, σ2}
Observe that the right cosets and the left cosets are distinct; hence H is not a normal subgroup of S3.
(b) Consider the group G of 2×2 matrices with rational entries and nonzero determinants. (See Example A.10.)
Let H be the subset of G consisting of matrices whose upper-right entry is zero; that is, matrices of the form
& a
0
c
d
'
Then H is a subgroup of G since H is closed under multiplication and inverses and I ∈H. However, H is
not a normal subgroup since, for example, the following product does not belong to H:
& 1
2
1
3
'−1 & 1
0
1
1
' & 1
2
1
3
'
=
& −1
−4
1
3
'
On the other hand, let K be the subset of G consisting of matrices with determinant 1. One can show
that K is also a subgroup of G. Moreover, for any matrix X in G and any matrix A in K, we have
det(X−1AX) = 1
Hence X−1AX belongs to K, so K is a normal subgroup of G.
Integers Modulo m
Consider the group Z of integers under addition. Let H denote the multiples of 5, that is,
H = {. . . , −10, −5, 0, 5, 10, . . .}
Then H is a subgroup (necessarily normal) of Z. The cosets of H in Z appear in Fig. B-5(a). By the above
Theorem B.8, Z/H = {0, 1, 2, 3, 4} is a group under coset addition; its addition table appears in Fig. B-5(b).
ThisquotientgroupZ/Hisreferredtoastheintegersmodulo5anditisfrequentlydenotedbyZ5. Analogously,
for any positive integer n, there exists the quotient group Zn called the integers modulo n.
Fig. B-5

442
ALGEBRAIC SYSTEMS
[APP. B
Cyclic Subgroups
Let G be any group and let a be any element of G. As usual, we deﬁne a0 = e and an+1 = an · a. Clearly,
aman = am+n and (am)n = amn, for any integers m and n. Let S denote the set of all the powers of a; that is
S = {· · · , a−3, a−2, a−1, e, a, a2, a3, · · · }
Then S is a subgroup of G called the cyclic group generated by a. We denote this group by gp(a).
Furthermore, suppose that the powers of a are not distinct, say ar = as with, say, r > s. Then ar−s = e
where r, s > 0. The smallest positive integer m such that am = e is called the order of a and it will be denoted
by |a|. If |a| = m, then the cyclic subgroup gp(a) has m elements as follows:
gp(a) = {e, a, a2, a3, . . . , am−1}
Consider, for example, the element φ1 in the symmetric group S3 discussed above. Then:
φ1
1 = φ1,
φ1
2 = φ2,
φ1
3 = φ2 · φ1 = e
Hence
//φ1
// = 3 and gp(φ1) = {e, φ1, φ2}. Observe that
//φ1
// divides the order of S3. This is true in general;
that is, for any element a in a group G, |a| equals the order of gp(a) and hence |a| divides |G| by Lagrange’s
Theorem B.7. We also remark that a group G is said to be cyclic if it has an element a such that G = gp(a).
Generating Sets, Generators
Consider any subset A of a group G. Let gp(A) denote the set of all elements x in G such that x is equal to a
product of elements where each element comes from the set A ∪A−1 (where A−1 denotes the set of inverses of
elements of A). That is,
gp(A) = {x ∈G
// x = b1b2 . . . bm where each bi ∈A ∪A−1}
Then gp(A) is a subgroup of G with generating set A. In particular, A is said to generate the group G if G = gp(A),
that is, if every g in G is a product of elements from A ∪A−1. We say A is a minimal set of generators of G if
A generates G and if no set with fewer elements than A generates G. For example, the permutations a = σ1 and
b = φ1 form a minimal set of generators of the symmetric group S3 (Fig. B-4). Speciﬁcally,
e = a2,
σ1 = a,
σ2 = ab,
σ3 = ab2,
φ1 = b,
φ2 = b2
and S3 is not cyclic so it cannot be generated by one element.
Homomorphisms
A mapping f from a group G into a group G′ is called a homomorphism if, for every a, b ∈G,
f (ab) = f (a)f (b)
In addition, if f is one-to-one and onto, then f is called an isomorphism; and G and G′ are said to be isomorphic,
written G ∼= G′.
If f : G →G′ is a homomorphism, then the kernel of f , written Ker f , is the set of elements whose image
is the identity element e′ of G′; that is,
Ker f = {a ∈G | f (a) = e′}
Recall that the image of f , written f (G) or Im f , consists of the images of the elements under f ; that is,
Im f = {b ∈G′ | there exists a ∈G for which f (a) = b} .
The following theorem (proved in Problem B.19) is fundamental to group theory.

APP. B]
ALGEBRAIC SYSTEMS
443
Theorem B.9: Suppose f : G →G′ is a homomorphism with kernel K. Then K is a normal subgroup of G, and
the quotient group G/K is isomorphic to f (G).
EXAMPLE B.12
(a) Let G be the group of real numbers under addition, and let G′ be the group of positive real numbers under
multiplication. The mapping f : G →G′ deﬁned by f (a) = 2a is a homomorphism because
f (a + b) = 2a+b = 2a2b = f (a)f (b)
In fact, f is also one-to-one and onto; hence G and G′ are isomorphic.
(b) Let a be any element in a group G. The function f : Z →G deﬁned by f (n) = an is a homomorphism since
f (m + n) = am+n = am · an = f (m) · f (n)
The image of f is gp(a), the cyclic subgroup generated by a. By Theorem B.9,
gp(a) ∼= Z/K
where K is the kernel of f. If K = {0}, then gp(a) = Z. On the other hand, if m is the order of a, then
K ={multiples of m}, and so gp(a) ∼= Zm. In other words, any cyclic group is isomorphic to either the
integers Z under addition, or to Zm, the integers under addition modulo m.
B.6
RINGS, INTEGRAL DOMAINS, AND FIELDS
Let R be a nonempty set with two binary operations, an operation of addition (denoted by +) and an operation
of multiplication (denoted by juxtaposition). Then R is called a ring if the following axioms are satisﬁed:
[R1]
For any a, b, c ∈R, we have (a + b) + c = a + (b + c).
[R2]
There exists an element 0 ∈R, called the zero element, such that, for every a ∈R,
a + 0 = 0 + a = a.
[R3]
For each a ∈R there exists an element −a ∈R, called the negative of a, such that
a + (−a) = (−a) + a = 0.
[R4]
For any a, b ∈R, we have a + b = b + a.
[R5]
For any a, b, c ∈R, we have (ab)c = a(bc).
[R6]
For any a, b, c ∈R, we have: (i) a(b + c) = ab + ac, and (ii) (b + c)a = ba + ca.
Observe that the axioms [R1] through [R4] may be summarized by saying that R is an abelian group under
addition.
Subtraction is deﬁned in R by a −b = a + (−b).
One can prove (Problem B.21) that a · 0 = 0 · a = 0 for every a ∈R.
A subset S of R is a subring of R if S itself is a ring under the operations in R. We note that S is a subring of
R if: (i) 0 ∈S, and (ii) for any a, b ∈S, we have a −b ∈S and ab ∈S.

444
ALGEBRAIC SYSTEMS
[APP. B
Special Kinds of Rings: Integral Domains and Fields
This subsection deﬁnes a number of different kinds of rings, including integral domains and ﬁelds.
R is called a commutative ring if ab = ba for every a, b ∈R.
R is called a ring with an identity element 1 if the element 1 has the property that a · 1 = 1 · a = a for every
element a ∈R. In such a case, an element a ∈R is called a unit if a has a multiplicative inverse, that is, an
element a−1 in R such that a · a−1 = a−1 · a = 1.
R is called a ring with zero divisors if there exist nonzero elements a, b ∈R such that ab = 0. In such a
case, a and b are called zero divisors.
Deﬁnition B.3: A commutative ring R is an integral domain if R has no zero divisors, that is, if ab = 0 implies
a = 0 or b = 0.
Deﬁnition B.4: A commutative ring R with an identity element 1 (not equal to 0) is a ﬁeld if every nonzero
a ∈R is a unit, that is, has a multiplicative inverse.
A ﬁeld is necessarily an integral domain; for if ab = 0 and a ̸= 0, then
b = 1 · b = a−1ab = a−1 · 0 = 0
We remark that a ﬁeld may also be viewed as a commutative ring in which the nonzero elements form a group
under multiplication.
EXAMPLE B.13
(a) The set Z of integers with the usual operations of addition and multiplication is the classical example of an
integral domain (with an identity element). The units in Z are only 1 and −1, that is, no other element in Z
has a multiplicative inverse.
(b) The set Zm = {0, 1, 2, . . . , m −1} under the operation of addition and multiplication modulo m is a ring;
it is called the ring of integers modulo m. If m is a prime, then Zm is a ﬁeld. On the other hand, if m is
not a prime then Zm has zero divisors. For instance, in the ring Z6,
2 · 3 = 0
but
2 ̸≡0 (mod 6)
and
3 ̸≡0 (mod 6)
(c) The rational numbers Q and the real numbers R each form a ﬁeld with respect to the usual operations of
addition and multiplication.
(d) Let M denote the set of 2×2 matrices with integer or real entries. Then M is a noncommutative ring with zero
divisors under the operations of matrix addition and matrix multiplication. M does have an identity element,
the identity matrix.
(e) Let R be any ring. Then the set R[x] of all polynomials over R is a ring with respect to the usual operations of
addition and multiplication of polynomials. Moreover, if R is an integral domain then R[x] is also an integral
domain.
Ideals
A subset J of a ring R is called an ideal in R if the following three properties hold:
(i) 0 ∈J.
(ii) For any a, b ∈J, we have a −b ∈J.
(iii) For any r ∈R and a ∈J, we have ra, ar ∈J.

APP. B]
ALGEBRAIC SYSTEMS
445
Note ﬁrst that J is a subring of R. Also, J is a subgroup (necessarily normal) of the additive group of R. Thus
we can form the following collection of cosets which form a partition of R:
{a + J | a ∈R}
The importance of ideals comes from the following theorem which is analogous to Theorem B.7 for normal
subgroups.
Theorem B.10: Let J be an ideal in a ring R. Then the cosets {a + J | a ∈R} form a ring under the coset
operations
(a + J) + (b + J) = a + b + J
and
(a + J)(b + J) = ab + J
This ring is denoted by R/J and is called the quotient ring.
Now let R be a commutative ring with an identity element 1. For any a ∈R, the following set is an ideal:
(a) = {ra | r ∈R} = aR
It is called the principal ideal generated by a. If every ideal in R is a principal ideal, then R is called a principal
ideal ring. In particular, if R is also an integral domain, then R is called a principal ideal domain (PID).
EXAMPLE B.14
(a) Consider the ring Z of integers. Then every ideal J in Z is a principal ideal, that is, J = (m) = mZ, for
some integer m. Thus Z is a principal ideal domain (PID). The quotient ring Zm = Z/(m) is simply the ring
of integers modulo m. Although Z is an integral domain (no zero divisors), the quotient ring Zm may have
zero divisors, e.g., 2 and 3 are zero divisors in Z6.
(b) Let R be any ring. Then {0} and R are ideals. In particular, if R is a ﬁeld, then {0} and R are the only ideals.
(c) Let K be a ﬁeld. Then the ring K[x] of polynomials over K is a PID (principal ideal domain). On the other
hand, the ring K[x, y] of polynomials in two variables is not a PID.
Ring Homomorphisms
A mapping f from a ring R into a ring R′ is called a ring homomorphism or, simply, homomorphism if,
for every a, b ∈R,
f (a + b) = f (a) + f (b),
f (ab) = f (a)f (b)
In addition, if f is one-to-one and onto, then f is called an isomorphism; and R and R′ are said to be isomorphic,
written R ∼= R′.
Suppose f :R →R′ is a homomorphism. Then the kernel of f , written Ker f , is the set of elements
whose image is the zero element 0 of R′; that is,
Ker f = {r ∈R | f (r) = 0}
The following theorem (analogous to Theorem B.9 for groups) is fundamental to ring theory.
Theorem B.11: Let f :R →R′ be a ring homomorphism with kernel K. Then K is an ideal in R, and the
quotient ring R/K is isomorphic to f (R).
Divisibility in Integral Domains
Now let D be an integral domain. We say that b divides a in D if a = bc for some c ∈D. An element u ∈D
is called a unit if u divides 1, i.e., if u has a multiplicative inverse. An element b ∈D is called an associate of
a ∈D if b = ua for some unit u ∈D. A nonunit p ∈D is said to be irreducible if p = ab implies a or b is a
unit.
An integral domain D is called a unique factorization domain (UFD), if every nonunit a ∈D can be written
uniquely (up to associates and order) as a product of irreducible elements.

446
ALGEBRAIC SYSTEMS
[APP. B
EXAMPLE B.15
(a) The ring Z of integers is the classical example of a unique factorization domain. The units of Z are 1 and −1.
The only associates of n ∈Z are n and −n. The irreducible elements of Z are the prime numbers.
(b) The set D = {a + b
√
13 | a , b integers} is an integral domain. The units of D follow:
±1,
18 ± 5
√
13,
−18 ± 5
√
13
The elements 2, 3 −
√
13 and −3 −
√
13 are irreducible in D. Observe that
4 = 2 · 2 = (3 −
√
13)(−3 −
√
13)
Thus D is not a unique factorization domain. (See Problem B.97.)
B.7
POLYNOMIALS OVER A FIELD
This section investigates polynomials whose coefﬁcients come from some integral domain or ﬁeld K.
In particular, we show that polynomials over a ﬁeld K have many of the same properties as the integers.
Basic Deﬁnitions
Let K be an integral domain or a ﬁeld. Formally, a polynomial f over K is an inﬁnite sequence of elements
from K in which all except a ﬁnite number of them are 0; that is,
f = (. . . , 0, an, . . . , a1, a0)
or, equivalently, f (t) = antn + · · · + a1t + a0
where the symbol t is used as an indeterminate. The entry ak is called the kth coefﬁcient of f. If n is the largest
integer for which a ̸= 0, then we say that the degree of f is n, written deg(f ) = n. We also call an the leading
coefﬁcient of f. If an = 1, we call f a monic polynomial. On the other hand, if every coefﬁcient of f is 0 then f is
called the zero polynomial, written f ≡0. The degree of the zero polynomial is not deﬁned.
Let K[t] be the collection of all polynomials f (t) over K. Consider the polynomials
f (t) = antn + · · · + a1t + a0
and
g(t) = bmtm + · · · + b1t + b0
Then the sum f + g is the polynomial obtained by adding corresponding coefﬁcients; that is, if m ≤n, then
f (t) + g(t) = antn + · · · + (am + bm)tm + · · · + (a1 + b1)t + (a0 + b0)
Furthermore, the product of f and g is the polynomial
f (t)g(t) = (anbm)tn+m + · · · + (a1b0 + a0b1)t + (a0b0)
That is,
f (t)g(t) = cn+mtn+m + · · · + c1t + c0
where
ck =
k

i=0
aibk−i = a0bk + a1bk−1 + · · · + akb0
The set K of scalars is viewed as a subset of K[t]. Speciﬁcally, we identify the scalar a0 ∈K with the
polynomial
f (t) = a0
or
a0 = (· · · , 0, 0, a0)
Then the operators of addition and scalar multiplication are preserved by this identiﬁcation. Thus, the mapping
ψ: K →K[t] deﬁned by ψ(a0) = a0 is an isomorphism which embeds K into K[t].

APP. B]
ALGEBRAIC SYSTEMS
447
Theorem B.12: Let K be an integral domain. Then K[t] under the operations of addition and multiplication of
polynomials is a commutative ring with an identity element 1.
The following simple result has important consequences.
Lemma B.13: Suppose f and g are polynomials over an integral domain K. Then
deg(fg) = deg(f ) + deg(g).
The proof follows directly from the deﬁnition of the product of polynomials. Namely, suppose
f (t) = antn + · · · + a1t + a0
and
g(t) = bmtm + · · · + b1t + b0
where an ̸= 0 and bm ̸= 0. Thus deg(f ) = n and deg(g) = m. Then
f (t)g(t) = anbmtn+m + terms of lower degree
Also, since K is an integral domain with no zero divisors, anbm ̸= 0. Thus
deg(fg) = m + n = deg(f ) + deg(g)
and the lemma is proved.
The following proposition lists many properties of our polynomials. (Recall that a polynomial g is said to
divide a polynomial f if there exists a polynomial h such that f (t) = g(t)h(t).)
Proposition B.14: Let K be an integral domain and let f and g be polynomials over K.
(i) K[t] is an integral domain.
(ii) The units of K[t] are the units in K.
(iii) If g divides f , then deg(g) ≤deg(f ) or f ≡0.
(iv) If g divides f and f divides g, then f (t) = kg(t) where k is a unit in K.
(v) If d and d′ are monic polynomials such that d divides d′ and d′ divides d, then d = d′.
Euclidean Algorithm, Roots of Polynomials
This subsection discusses the roots of a polynomial f (t), where we now assume the coefﬁcients of f (t)
come from a ﬁeld K. Recall that a scalar a ∈K is a root of a polynomial f (t) if f (a) = 0. First we begin with
an important theorem which is very similar to a corresponding theorem for the integers Z.
Theorem B.15 (Euclidean DivisionAlgorithm): Let f (t) and g(t) be polynomials over a ﬁeld K with g(t) ̸= 0.
Then there exist polynomials q(t) and r(t) such that
f (t) = q(t)g(t) + r(t)
where either r(t) ≡0 or deg(r) < deg(g).
The above theorem (proved in Problem B.30) formalizes the process known as “long division.” The poly-
nomial q(t) is called the quotient and the polynomial r(t) is called the remainder when f (t) is divided by g(t).
Corollary B.16 (Remainder Theorem): Suppose f (t) is divided by g(t) = t −a. Then f (a) is the remainder.
The proof follows from the Euclidean Algorithm. That is, dividing f (t) by t −a we get
f (t) = q(t)(t −a) + r(t)
where deg(r) < deg(t −a) = 1. Hence r(t) = r is a scalar. Substituting t = a in the equation for f (t) yields
f (a) = q(a)(a −a) + r = q(t) · 0 + r = r
Thus f (a) is the remainder, as claimed.

448
ALGEBRAIC SYSTEMS
[APP. B
Corollary B.16 also tells us that f (a) = 0 if and only if the remainder r = r(t) ≡0. Accordingly:
Corollary B.17 (Factor Theorem): The scalar a ∈K is a root of f (t) if and only if t −a is a factor of f (t).
The next theorem (proved in Problem B.31) tells us the number of possible roots of a polynomial.
Theorem B.18: Suppose f (t) is a polynomial over a ﬁeld K, and deg(f ) = n. Then f (t) has at most n roots.
The following theorem (proved in Problem B.32) is the main tool for ﬁnding rational roots of a polynomial
with integer coefﬁcients.
Theorem B.19: Suppose a rational number p/q (reduced to lowest terms) is a root of the polynomial
f (t) = antn + · · · + a1t + a0
where all the coefﬁcients an,…, a1, a0 are integers. Then p divides the constant term a0 and q
divides the leading coefﬁcient an. In particular, if c = p/q is an integer, then c divides the
constant term a0.
EXAMPLE B.16
(a) Suppose f (t) = t3 + t2 −8t + 4. Assuming f (t) has a rational root, ﬁnd all the roots of f (t).
Since the leading coefﬁcient is 1, the rational roots of f (t) must be integers from among ±1, ±2, ±4.
Note f (1) ̸= 0 and f (−1) ̸= 0. By synthetic division, or dividing by t −2, we get
2
////
1
+
1
−
8
+
4
2
+
6
−
4
1
+
3
−
2
+
0
Therefore t = 2 is a root and f (t) = (t −2)(t2 + 3t −2). Using the quadratic formula for t2 + 3t −2 = 0,
we obtain the following three roots of f (t):
t = 2,
t = (−3 +
√
17)/2,
t = (−3 −
√
17)/2
(b) Suppose h(t) = t4 −2t3 + 11t −10. Find all the real roots of h(t) assuming there are two integer roots.
The integer roots must be among ±1, ±2, ±5, ±10. By synthetic division (or dividing by t −1 and
then t + 2) we get
1
////
1
−
2
+
0
+
11
−
10
1
−
1
−
1
+
10
−2
////
1
−
1
−
1
+
10
+
0
−
2
+
6
−
10
1
−
3
+
5
+
0
Thus t = 1 and t = −2 are roots and h(t) = (t−1)(t + 2)(t2−3t + 5). The quadratic formula with t2 −3t + 5
tells us that there are no other real roots. That is, t = 1 and t = −2 are the only real roots of h(t).
K[t] as a PID and UFD
The following theorems (proved in Problems B.33 and B.34) apply.
Theorem B.20: The ring K[t] of polynomials over a ﬁeld K is a principal ideal domain (PID). That is, if J is an
ideal in K[t], then there exists a unique monic polynomial d which generates J, that is, every
polynomial f in J is a multiple of d.

APP. B]
ALGEBRAIC SYSTEMS
449
Theorem B.21: Let f and g be polynomials in K[t], not both zero. Then there exists a unique monic polynomial
d such that:
(i) d divides both f and g.
(ii) If d′ divides f and g, then d′ divides d.
The polynomial d in the above Theorem B.21 is called the greatest common divisor of f and g, written
d = gcd(f , g). If d = 1, then f and g are said to be relatively prime.
Corollary B.22: Let d be the greatest common divisor of f and g. Then there exist polynomials m and n such
that d = mf + ng. In particular, if f and g are relatively prime, then there exist polynomials m
and n such that mf + ng = 1.
A polynomial p ∈K[t] is said to be irreducible if p is not a scalar and if p = fg implies f or g is a scalar.
In other words, p is irreducible if its only divisors are its associates (scalar multiples). The following lemma
(proved in Problem B.36) applies.
Lemma B.23: Suppose p ∈K[t] is irreducible. If p divides the product fg of polynomials f and g in K[t], then
p divides f or p divides g. More generally, if p divides the product f1f2 · · · fn of n polynomials,
then p divides one of them.
The next theorem (proved in Problem B.37) states that the polynomials over a ﬁeld form a unique factorization
domain (UFD).
Theorem B.24 (Unique Factorization Theorem): Let f be a nonzero polynomial in K[t]. Then f can be written
uniquely (except for order) as a product
f = kp1p2 . . . pn
where k ∈K and the p’s are monic irreducible polynomials in K[t].
Fundamental Theorem of Algebra
The proof of the following theorem lies beyond the scope of this text.
Fundamental Theorem of Algebra: Any nonzero polynomial f (t) over the complex ﬁeld C has a root in C.
Thus f (t) can be written uniquely (except for order) as a product
f (t) = k(t −r1)(t −r2) · · · (t −rn)
where k and the ri are complex numbers and deg(f ) = n.
The above theorem is certainly not true for the real ﬁeld R. For example, f (t) = t2 + 1 is a polynomial
over R, but f (t) has no real root.
The following theorem (proved in Problem B.38) does apply.
Theorem B.25: Suppose f (t) is a polynomial over the real ﬁeld R, and suppose the complex number
z = a+bi, b ̸= 0, is a root of f (t). Then the complex conjugate ¯z = a−bi is also a root of f (t).
Hence the following is a factor of f (t):
c(t) = (t −z)(t −¯z) = t2 −2at + a2 + b2
The following theorem follows from Theorem B.25 and the Fundamental Theorem of Algebra.
Theorem B.26: Let f (t) be a nonzero polynomial over the real ﬁeld R. Then f (t) can be written uniquely
(except for order) as a product
f (t) = kp1(t)p2(t) · · · pn(t)
where k ∈R and the pi(t) are real monic polynomials of degree 1 or 2.

450
ALGEBRAIC SYSTEMS
[APP. B
EXAMPLE B.17 Let f (t) = t4 −3t3 + 6t2 + 25t −39. Find all the roots of f (t) given that t = 2 + 3i is a
root.
Since 2 + 3i is a root, then 2 −3i is a root and c(t) = t2 −4t + 13 is a factor of f (t). Dividing f (t) by c(t)
we get
f (t) = (t2 −4t + 13)(t2 + t −3)
The quadratic formula with t2 + t −3 gives us the other roots of f (t). That is, the four roots of f (t) are as
follows:
t = 2 + 3i,
t = 2 −3i,
t = (−1 +
√
13)/2,
t = (−1 −
√
13)/2
Solved Problems
OPERATIONS AND SEMIGROUPS
B.1. Consider the set Q of rational numbers, and let ∗be the operation on Q deﬁned by
a ∗b = a + b −ab
(a) Find: (i) 3 ∗4; (ii) 2 ∗(−5); (iii) 7 ∗(1/2).
(b) Is (Q, ∗) a semigroup? Is it commutative?
(c) Find the identity element for ∗.
(d) Do any of the elements in Q have an inverse? What is it?
(a)
(i) 3 ∗4 = 3 + 4 −3(4) = 3 + 4 −12 = −5
(ii) 2 ∗(−5) = 2 + (−5) + 2(−5) = 2 −5 + 10 = 7
(iii) 7 ∗(1/2) = 7 + (1/2) −7(1/2) = 4
(b) We have:
(a ∗b) ∗c = (a + b −ab) ∗c = (a + b −ab) + c −(a + b −ab)c
= a + b −ab + c −ac −bc + abc = a + b + c −ab −ac −bc + abc
a ∗(b ∗c) = a ∗(b + c −bc) = a + (b + c −bc) −a(b + c −bc)
= a + b + c −bc −ab −ac + abc
Hence ∗is associative and (Q, ∗) is a semigroup. Also
a ∗b = a + b −ab = b + a −ba = b ∗a
Hence (Q, ∗) is a commutative semigroup.
(c) An element e is an identity element if a ∗e = a for every a ∈Q. Compute as follows:
a ∗e = a,
a + e −ae = a,
e −ea = 0,
e(1 −a) = 0,
e = 0
Accordingly, 0 is the identity element.
(d) In order for a to have an inverse x, we must have a ∗x = 0 since 0 is the identity element by Part (c).
Compute as follows:
a ∗x = 0,
a + x −ax = 0,
a = ax −x,
a = x(a −l),
x = a/(a −l)
Thus if a ̸= 1, then a has an inverse and it is a/(a −1).
B.2. Let S be a semigroup with identity e, and let b and b′ be inverses of a. Show that b = b′, that is, that
inverses are unique if they exist.
We have:
b ∗(a ∗b′) = b ∗e = b
and
(b ∗a) ∗b′ = e ∗b′ = b′
Since S is associative, (b ∗a) ∗b′ = b∗(a ∗b′); hence b = b′.

APP. B]
ALGEBRAIC SYSTEMS
451
B.3. Let S = N × N. Let ∗be the operation on S deﬁned by (a, b) ∗(a′, b′) = (aa′, bb′).
(a) Show that ∗is associative. (Hence S is a semigroup.)
(b) Deﬁne f : (S, ∗) →(Q, ×) by f (a, b) = a/b. Show that f is a homomorphism.
(c) Find the congruence relation ∼in S determined by the homomorphism f , that is, where x ∼y if
f (x) = f (y). (See Theorem B.4.)
(d) Describe S/ ∼. Does S/ ∼have an identity element? Does it have inverses?
Suppose x = (a, b), y = (c, d), z = (e, f ).
(a) We have
(xy)z = (ac, bd) ∗(e, f ) = [(ac)e, (bd)f ]
x(yz) = (a, b) ∗(ce, df ) = [a(ce), b(df )]
Since a, b, c, d, e, f , are positive integers, (ac)e = a(ce) and (bd)f = b(df ). Thus (xy)z = x(yz) and hence ∗
is associative. That is, (S, ∗) is a semigroup.
(b) f is a homomorphism since
f (x ∗y) = f (ac, bd) = (ac)/(bd) = (a/b)(c/d) = f (x)f (y)
(c) Suppose f (x) = f (y). Then a/b = c/d and hence ad= bc. Thus f determines the congruence relation ∼on S
deﬁned by (a, b) ∼(c, d) if ad = bc.
(d) The image of f is Q+, the set of positive rational numbers. By Theorem B.3, S/ ∼is isomorphic to Q+. Thus
S/ ∼does have an identity element, and every element has an inverse.
B.4. Prove Theorem B.1. Suppose ∗is an associative operation on a set S. Then any product a1 ∗a2∗… ∗an
requires no parenthesis, that is, all possible products are equal.
The proof is by induction on n. Since n is associative, the theorem holds for n = 1, 2, and 3. Suppose n ≥4.
We use the notation:
(a1a2, · · · an) = (· · · ((a1a2)a3) · · · )an
and
[a1a2 · · · an] = any product
We show [a1a2 · · · an] = (a1a2 · · · an) and so all such products will be equal. Since [a1a2 · · · an] denotes some product,
there exists an r < n such that [a1a2 · · · an] = [a1a2 · · · ar] [ar+1 · · · an]. Therefore, by induction,
[a1a2 · · · an] = [a1a2 · · · ar] [ar+1 · · · an] = [a1a2 · · · ar](ar+1 · · · an)
= [a1 · · · ar] ((ar+1 · · · an−1)an) = ([a1 · · · ar] (ar−1 · · · an−1))an
= [a1 · · · an−1]an = (a1 · · · an−1)an = (a1a2 · · · an)
Thus the theorem is proved.
B.5. Prove Theorem B.4: Let f : S →S′ be a semigroup homomorphism. Let a ∼b if f (a) = f (b). Then:
(i) ∼is a congruence relation; (ii) S/ ∼is isomorphic to f (S).
(i) First we show that ∼is an equivalence relation. Since f (a) = f (a), we have a ∼a.
If a ∼b, then f (a) = f (b) or f (b) = f (a); hence b ∼a. Lastly, if a ∼b and b ∼c, then f (a) = f (b) and
f (b) = f (c); hence f (a) = f (c). Thus a ∼c. That is, ∼is an equivalence relation. Suppose now a ∼a′ and
b ∼b′. Then f (a) = f (a′) and f (b) = f (b′).
Since f is a homomorphism,
f (ab) = f (a)f (b) = f (a′) f (b′) = f (a′b′)
Therefore ab ∼a′b′. That is, ∼is a congruence relation.
(ii) Deﬁne :S/ ∼→f(S) by ([a]) = f (a). We need to prove: (1)  is well-deﬁned, that is, ([a]) ∈f (S), and
if [a] = [b] then f ([a]) = f ([b]). (2)  is an isomorphism, that is,  is a homomorphism, one-to-one and onto.

452
ALGEBRAIC SYSTEMS
[APP. B
(1) Proof that  is well-deﬁned: We have ([a]) = f (a). Since a ∈S, we have f (a) ∈f (S). Hence ([a]) ∈f (S),
as required. Now suppose [a] = [b]. Then a ∼b and hence f (a) = f (b). Thus
([a]) = f (a) = f (b) = ([b])
That is,  is well-deﬁned.
(2) Proof that  is an isomorphism: Since f is a homomorphism,
([a][b]) = [ab] = f (ab) = f (a)f (b) = ([a])([b])
Hence  is a homomorphism. Suppose ([a]) = ([b]). Then f (a) = f (b), and so a ∼b. Thus [a] = [b] and
 is one-to-one. Lastly, let y ∈f (S). Then, f (a) = y for some a ∈S. Hence ([a]) = f (a) = y. Thus  is
onto f (S). Accordingly,  is an isomorphism.
GROUPS
B.6. Consider the group G = {1, 2, 3, 4, 5, 6} under multiplication modulo 7.
(a) Find the multiplication table of G.
(b) Find 2−1, 3−1, 6−1.
(c) Find the orders and subgroups generated by 2 and 3.
(d) Is G cyclic?
(a) To ﬁnd a ∗b in G, ﬁnd the remainder when the product ab is divided by 7.
For example, 5·6 = 30 which yields a remainder of 2 when divided by 7; hence 5∗6 = 2 in G. The multiplication
table of G appears in Fig. B-6(a).
(b) Note ﬁrst that 1 is the identity element of G. Recall that a−1 is that element of G such that aa−1 =1. Hence
2−1 = 4, 3−1 = 5 and 6−1 = 6.
(c) We have 21 = 2, 22 = 4, but 23 = 1. Hence |2| = 3 and gp(2) = {1, 2, 4}. We have 31 = 3, 32 = 2, 33 = 6,
34 = 4, 35 = 5, 36 = 1. Hence |3| = 6 and gp(3) = G.
(d) G is cyclic since G = gp(3).
Fig. B-6
B.7. Let G be a reduced residue system modulo 15, say, G = {1, 2, 4, 7, 8, 11, 13, 14} (the set of integers
between 1 and 15 which are coprime to 15). Then G is a group under multiplication modulo 15.
(a) Find the multiplication table of G.
(b) Find 2−1, 7−1, 11−1.
(c) Find the orders and subgroups generated by 2, 7, and 11.
(d) Is G cyclic?
(a) To ﬁnd a ∗b in G, ﬁnd the remainder when the product ab is divided by 15. The multiplication table appears in
Fig. B-6(b).
(b) The integers r and s are inverses if r ∗s = 1. Hence: 2−1 = 8, 7−1 = 13, 11−1 = 11.

APP. B]
ALGEBRAIC SYSTEMS
453
(c) We have 22 = 4, 23 = 8, 24 = 1. Hence |2| = 4 and gp(2) = {1, 2, 4, 8}. Also,
72 = 4, 73 = 4 ∗7 = 13, 74 = 13 ∗7 = 1. Hence |7| = 4 and gp(7) = {1, 4, 7, 13}. Lastly, 112 = 1. Hence |11| = 2
and gp(11) = {1, 11}.
(d) No, since no element generates G.
B.8. Consider the symmetric group S3 whose multiplication table is given in Fig. B-4.
(a) Find the order and the group generated by each element of S3.
(b) Find the number and all subgroups of S3.
(c) Let A = {σ1, σ2} and B = {φ1, φ2}. Find AB, σ3A, and Aσ3.
(d) Let H = gp(σ1) and K = gp(σ2). Show that HK is not a subgroup of S3.
(e) Is S3 cyclic?
(a) There are six elements: (1) ε, (2) σ1, (3) σ2, (4) σ3, (5) φ1, (6) φ2. Find the powers of each element x until xn = ε.
Then |x| = n, and gp(x) = {ε, x1, x2, …, xn−1}. Note x1 = x, so we need only begin with n = 2 when x ̸= ε.
(1) ε1 = ε; so |ε| = 1 and g(ε) = {ε}.
(2) σ 2
1 = ε; hence
//σ1
// = 2 and gp(σ1) = {ε, σ1}.
(3) σ 2
2 = ε; hence
//σ2
// = 2 and gp(σ2) = {ε, σ2}.
(4) σ 2
3 = ε; hence
//σ3
// = 2 and gp(σ3) = {ε, σ3}.
(5) φ2
1 = φ2, φ3
1 = φ2φ1 = ε; hence
//φ1
// = 3 and gp(φ1) = {ε, φ1, φ2}.
(6) φ2
2 = φ1, φ3
2 = φ1φ2 = ε; hence
//φ2
// = 3 and gp(φ1) = {ε, φ2, φ1}.
(b) First of all, H1 = {ε} and H2 = S3 are subgroups of S3. Any other subgroup of S3 must have order 2 or 3 since
its order must divide
//S3
// = 6. Since 2 and 3 are prime numbers, these subgroups must be cyclic (Problem B.61)
and hence must appear in part (a). Thus the other subgroups of S3 follow:
H3 = {ε, σ1},
H4 = {ε, σ2},
H5 = {ε, σ3},
H6 = {ε, φ1, φ2}
Accordingly, S3 has six subgroups.
(c) Multiply each element of A by each element of B:
σ1φ1 = σ2,
σ1φ2 = σ3,
σ3φ1 = σ3,
σ2φ2 = σ1
Hence AB = {σ1, σ2, σ3}.
Multiply σ3 by each element of A:
σ3σ1 = φ1,
σ3σ2 = φ2,
hence
σ3A = {φ1, φ2}
Multiply each element of A by σ3:
σ1σ3 = φ2,
σ2σ3 = φ1,
hence
Aσ3 = {φ1, φ2}
(d) H = {e, σ1}, K = {e, σ2} and then HK = {e, σ1, σ2, φ1}, which is not a subgroup of S3 since HK has four
elements.
(e) S3 is not cyclic since S3 is not generated by any of its elements.

454
ALGEBRAIC SYSTEMS
[APP. B
B.9. Let σ and τ be the following elements of the symmetric group S6:
σ =
 1
2
3
4
5
6
3
1
5
4
6
2

and
τ =
 1
2
3
4
5
6
5
3
1
6
2
4

Find: τσ, στ, σ 2, and σ −1. (Since σ and τ are functions, τσ means apply σ and then τ.)
Figure B-7 shows the effect on 1, 2, …, 6 of the composition of the permutations:
(a) σ and then τ;
(b) τ and then σ;
(c) σ and then σ, i.e. σ 2.
Thus:
τσ =
 1
2
3
4
5
6
1
5
2
6
4
3

,
στ =
 1
2
3
4
5
6
6
5
3
2
1
4

,
σ 2 =
 1
2
3
4
5
6
5
3
6
4
2
1

We obtain σ −1 by interchanging the top and bottom rows of σ and then rearranging:
σ −1 =
 3
1
5
4
6
2
1
2
3
4
5
6

=
 1
2
3
4
5
6
2
6
1
4
3
5

Fig. B-7
B.10. Let H and K be groups.
(a) Deﬁne the direct product G = H × K of H and K.
(b) What is the identity element and the order of G = H × K?
(c) Describe and ﬁnd the multiplication table of the group G = Z2× Z2.
(a) Let G = H × K, the Cartesian product of H and K, with the operation ∗deﬁned componentwise by
(h, k) ∗h′, k′ = (hh′, kk′)
Then G is a group (Problem B.68), called the direct product of H and K.
(b) The element e = (eH, eK) is the identity element of G, and |G| = |H| · |K|.
(c) Since Z2 has two elements, G has four elements. Let
e = (0, 0),
a = (1, 0),
b = (0, 1),
c = (1, 1)
The multiplication table of G appears in Fig. B-8(a). Note that G is abelian since the table is symmetric. Also,
a2 = e, b2 = e, c2 = e. Thus G is not cyclic, and hence G ̸∼= Z4.
B.11. Let S be the square in the plane R2 pictured in Fig. B-8(b), with its center at the origin 0. Note that the
vertices of S are numbered counterclockwise from 1 to 4.
(a) Deﬁne the group G of symmetries of S.
(b) List the elements of G.
(c) Find a minimum set of generators of G.

APP. B]
ALGEBRAIC SYSTEMS
455
Fig. B-8
(a) A symmetry σ of S is a rigid one-to-one correspondence between S and itself. (Here rigid means that distances
between points do not change.) The group G of symmetries of S is the set of all symmetries of S under composition
of mappings.
(b) There are eight symmetries as follows. For α = 0◦, 90◦, 180◦, 270◦, let σ(α) be the symmetry obtained by
rotating S about its center α degrees, and let τ(α) be the symmetry obtained by reﬂecting S about the y-axis and
then rotating S about its center α degrees. Note that any symmetry σ of S is completely determined by its effect
on the vertices of S and hence σ can be represented as a permutation in S4. Thus:
σ(0◦) =
 1
2
3
4
1
2
3
4

,
σ(90◦) =
 1
2
3
4
2
3
4
1

,
σ(180◦) =
 1
2
3
4
3
4
1
4

,
σ(270◦) =
 1
2
3
4
4
1
2
3

τ(0◦) =
 1
2
3
4
2
1
4
3

,
τ(90◦)
=
 1
2
3
4
3
2
1
4

,
τ(180◦) =
 1
2
3
4
4
3
2
1

,
τ(270◦) =
 1
2
3
4
1
4
3
2

(c) Let a = σ(90◦) and b = τ(0◦). Then a and b form a maximum set of generators of G. Speciﬁcally,
σ(0◦) = a4,
σ(90◦) = a,
σ(180◦) = a2,
σ(270◦) = a3
τ(0◦) = b,
τ(90◦) = ba,
τ(180◦) = ba2,
τ(270◦) = ba3
and G is not cyclic so it is not generated by one element. (One can show that the relations a4 = e, b2 = e, and
bab = a−1 completely describe G.)
B.12. Let G be a group and let A be a nonempty set.
(a) Deﬁne the meaning of the statement “G acts on A.”
(b) Deﬁne the stabilizer Ha of an element a ∈A.
(c) Show that Ha is a subgroup of G.
(a) Let PERM(A) denote the group of all permutations of A. Let ψ : G →PERM(A) be any homomorphism. Then
G is said to act on A where each element g in G deﬁnes a permutation g : A →A by
g(a) = (ψ(g))(a)
(Frequently, the permutation g : A →A is given directly and hence the homomorphism is implicitly deﬁned.)
(b) The stabilizer Ha of a ∈A consists of all elements of G which “ﬁx a,” that is,
Ha = {g ∈G | g(a) = a}

456
ALGEBRAIC SYSTEMS
[APP. B
(c) Since e(a) = a, we have e ∈Ha. Suppose g, g′ ∈Ha. Then (gg′)(a) = g(g′(a)) = g(a) = a; hence gg′ ∈Ha.
Also, g−1(a) = a since g(a) = a; hence g−1 ∈Ha. Thus Ha is a subgroup of G.
B.13. Prove Theorem B.6: Let H be a subgroup of a group G. Then the right cosets Ha form a partition of G.
Since e ∈H, we have a = ea ∈Ha; hence every element belongs to a coset. Now suppose Ha and Hb are not
disjoint. Say c ∈Ha ∩Hb. The proof is complete if we show that Ha = Hb.
Since c belongs to both Ha and Hb, we have c = h1a and c = h2b, where h1, h2 ∈H. Then h1a = h2b, and
so a = h−1
1 h2b. Let x ∈Ha. Then
x = h3a = h3h−1
1 h2b
where h3 ∈H. Since H is a subgroup, h3h−1
1 h2 ∈H; hence x ∈Hb. Since x was any element of Ha, we have
Ha ⊆Hb. Similarly, Hb ⊆Ha. Both inclusions imply Ha = Hb, and the theorem is proved.
B.14. Let H be a ﬁnite subgroup of G. Show that H and any coset Ha have the same number of elements.
Let H = {h1, h2, . . ., hk}, where H has k elements. Then Ha = {h1a, h2a, . . ., hka}.
However, hia = hja implies hi = hj; hence the k elements listed in Ha are distinct. Thus H and Ha have the same
number of elements.
B.15. Prove Theorem B.7 (Lagrange): Let H be a subgroup of a ﬁnite group G. Then the order of H divides the
order of G.
Suppose H has r elements and there are s right cosets; say
Ha1, Ha2, . . ., Has
By Theorem B.6, the cosets partition G and by Problem B.14, each coset has r elements. Therefore G has rs elements,
and so the order of H divides the order of G.
B.16. Prove: Every subgroup of a cyclic group G is cyclic.
Since G is cyclic, there is an element a ∈G such that G = gp(a). Let H be a subgroup of G. If H = {e}, then
H = gp(e) and H is cyclic. Otherwise, H contains a nonzero power of a. Since H is a subgroup, it must be closed
under inverses and so H contains positive powers of a. Let m be the smallest positive power of a such that am belongs
to H. We claim that b = am generates H. Let x be any other element of H; since x belongs to G we have x = an for
some integer n. Dividing n by m we get a quotient q and a remainder r, that is,
n = mq + r
where 0 ≤r < m. Then
an = amq+r = amq · ar = bq · ar
so
ar = b−qan
But an, b ∈H. Since H is a subgroup, b−qan ∈H, which means ar ∈H. However, m is the smallest positive power
of a belonging to H. Therefore, r = 0. Hence x = an = bq. Thus b generates H, and H is cyclic.
B.17. Prove Theorem B.8: Let H be a normal subgroup of a group G. Then the cosets of H in G form a group
under coset multiplication deﬁned by (aH) (bH) = abH.
Coset multiplication is well-deﬁned, since
(aH)(bH) = a(Hb)H = a(bH)H = ab(HH) = abH
(Here we have used the fact that H is normal, so Hb = bH, and, from Problem B.57, that HH = H.) Associativity
of coset multiplication follows from the fact that associativity holds in G. H is the identity element of G/H, since
(aH)H = a(HH) = aH
and
H(aH) = (Ha)H = (aH)H = aH
Lastly, a−1H is the inverse of aH since
(a−1H)(aH) = a−1aHH = eH = H
and
(aH)(a−1H) = aa−1HH = eH = H
Thus G/H is a group under coset multiplication.

APP. B]
ALGEBRAIC SYSTEMS
457
B.18. Suppose F : G →G′ is a group homomorphism. Prove:
(a) f (e) = e′;
(b) (f a−6) = f (a)−1.
(a) Since e = ee and f is a homomorphism, we have
f (e) = f (ee) = f (e)f (e)
Multiplying both sides by f (e)−1 gives us our result.
(b) Using part (a) and that aa−1 = a−1a = e, we have
e′ = f (e) = f (aa−1) = f (a)f (a−1)
and
e′ = f (e) = f (a−1a) = f (a−1)f (a)
Hence f (a−1) is the inverse of f (a); that is, f (a−1) = f (a)−1.
B.19. Prove Theorem B.9: Let f : G →G′ be a homomorphism with kernel K. Then K is a normal subgroup
of G, and G/K is isomorphic to the image of f. (Compare with Problem B.5, the analogous theorem for
semigroups.)
Proof that K is normal: By Problem B.18, f (e) = e′, so e ∈K. Now suppose a, b ∈K and g ∈G. Then
f (a) = e′ and f (b) = e′. Hence
f (ab) = f (a)f (b) = e′e′ = e′
f (a−1) = f (a)−1 = e′−1 = e′
f (gag−1) = f (g)f (a)f (g−1) = f (g)e′f (g)−1 = e′
Hence ab, a−1, and gag−1 belong to K, so K is a normal subgroup.
Proof that G/K ∼= H, where H is the image of f: Let ϕ: G/K →H be deﬁned by
ϕ(Ka) = f (a)
We show that ϕ is well-deﬁned, i.e., if Ka = Kb then ϕ(Ka) = ϕ(Kb). Suppose Ka = Kb. Then ab−1 ∈K
(Problem B.57). Then f (ab−1) = e′, and so
f (a)f (b)−1 = f (a)f (b−1) = f (ab−1) = e′
Hence f (a) = f (b), and so ϕ(Ka) = ϕ(Kb). Thus ϕ is well-deﬁned.
We next show that ϕ is a homomorphism:
ϕ(KaKb) = ϕ(Kab) = f (ab) = f (a)f (b) = ϕ(Ka)ϕ(Kb)
Thus ϕ is a homomorphism. We next show that ϕ is one-to-one. Suppose ϕ(Ka) = ϕ(Kb). Then
f (a) = f (b)
or
f (a)f (b)−1 = e′
or
f (a)f (b−1) = e′
or
f (ab−1) = e′
Thus ab−1 ∈K, and by Problem B.57 we have Ka = Kb. Thus ϕ is one-to-one. We next show that ϕ is onto. Let
h ∈H. Since H is the image of f , there exists a ∈G such that f (a) = h. Thus ϕ(Ka) = f (a) = h, and so ϕ is
onto. Consequently G/K ∼= H and the theorem is proved.
RINGS, INTEGRAL DOMAINS, FIELDS
B.20. Consider the ring Z10
=
{0, 1, 2, . . ., 9} of integers modulo 10.
(a) Find the units of Z10.
(b) Find −3, −8, and 3−1.
(c) Let f (x) = 2x2 + 4x + 4. Find the roots of f (x) over Z10.
(a) By Problem B.78 those integers relatively prime to the modulus m = 10 are the units in Z10. Hence the units are
1, 3, 7, and 9.
(b) Recall that −a in a ring R is the element such that a+(−a) = (−a)+a = 0. Hence −3 = 7 since 3+7 = 7+3 = 0
in Z10. Similarly −8 = 2. Recall that a−1 in a ring R is the element such that a · a−1 = a−1 · a = 1. Hence
3−1 = 7 since 3 · 7 = 7 · 3 = 1 in Z10.

458
ALGEBRAIC SYSTEMS
[APP. B
(c) Substitute each of the ten elements of Z10 into f (x) to see which elements yield 0. We have:
f (0) = 4,
f (2) = 0,
f (4) = 2,
f (6) = 0,
f (8) = 4
f (1) = 0,
f (3) = 4,
f (5) = 4,
f (7) = 0,
f (9) = 2
Thus the roots are 1, 2, 6, and 7. (This example shows that a polynomial of degree n can have more than n roots
over an arbitrary ring. This cannot happen if the ring is a ﬁeld.)
B.21. Prove that in a ring R: (i) a · 0 = 0 · a = 0; (ii) a(−b) = (−a)b = −ab; (iii) (−1)a = −a (when R has
an identity element 1).
(i) Since 0 = 0 + 0, we have
a · 0 = a(0 + 0) = a · 0 + a · 0
Adding −(a · 0) to both sides yields 0 = a · 0. Similarly 0 · a = 0.
(ii) Using b + (−b) = (−b) + b = 0, we have
ab + a(−b) = a(b + (−b)) = a · 0 = 0
a(−b) + ab = a((−b) + b) = a · 0 = 0
Hence a(−b) is the negative of ab; that is, a(−b) = −ab. Similarly, (−a)b = −ab.
(iii) We have
a + (−1)a = 1 · a + (−1)a = (1 + (−1))a = 0 · a = 0
(−1)a + a = (−1)a + 1 · a = ((−1) + 1)a = 0 · a = 0
Hence (−1)a is the negative of a; that is, (−1)a = −a.
B.22. Let D be an integral domain. Show that if ab = ac with a ̸= 0 then b = c.
Since ab = ac, we have
ab −ac = 0
and so
a(b −c) = 0
Since a ̸= 0, we must have b −c = 0, since D has no zero divisors. Hence b = c.
B.23. Suppose J and K are ideals in a ring R. Prove that J ∩K is an ideal in R.
Since J and K are ideals, 0 ∈J and 0 ∈K. Hence 0 ∈J ∩K. Now let a, b ∈J ∩K and let r ∈R. Then
a, b ∈J and a, b ∈K. Since J and K are ideals,
a −b, ra, ar ∈J
and
a −b, ra, ar ∈K
Hence a −b, ra, ar ∈J ∩K. Therefore J ∩K is an ideal.
B.24. Let J be an ideal in a ring R with an identity element 1. Prove: (a) If 1 ∈J then J = R; (b) If any unit
u ∈J then J = R.
(a) If 1 ∈J then for any r ∈R we have r · 1 ∈R or r ∈J. Hence J = R.
(b) If u ∈J then u−1 · u ∈J or 1 ∈J. Hence J = R by part (a).
B.25. Prove:
(a) A ﬁnite integral domain D is a ﬁeld.
(b) Zp is a ﬁeld where p is a prime number.
(c) (Fermat) If p is prime, then ap ≡a (mod p) for any integer a.
(a) Suppose D has n elements, say D = {a1, a2, . . ., an}. Let a be any nonzero element of D. Consider the n elements
aa1, aa2, . . ., an
Since a ̸= 0, we have aai = aak implies ai = ak (Problem B.22). Thus the above n elements are distinct, and so
they must be a rearrangement of the elements of D. One of them, say aak, must equal the identity element 1 of
D; that is, aak = 1. Thus ak is the inverse of a. Since a was any nonzero element of D, we have that D is a ﬁeld.
(b) Recall Zp = {0, 1, 2, . . ., p −1}. We show that Zp has no zero divisors. zero divisors. Suppose a ∗b = 0 in Zp;
that is, 0 (mod p). Then p divides ab. Since p is prime, p divides a or p divides b. Thus a ≡0 (mod p) or
b ≡0 (mod p); that is, a = 0 or b = 0 in Zp. Accordingly, Zp has no zero divisors and hence Zp is an integral
domain. By part (a), Zp is a ﬁeld.
(c) If p divides a, then a ≡0 (mod p) and so ap ≡a ≡0 (mod p). Suppose p does not divide a, then a may be
viewed as a nonzero element of Zp is a ﬁeld, its nonzero elements form a group G under multiplication of order
p −1. By Problem B.45, ap−1 = 1 in Zp.
In other words, ap−1 ≡1 (mod p). Multiplying by a gives ap ≡a (mod p), and the theorem is proved.

APP. B]
ALGEBRAIC SYSTEMS
459
POLYNOMIALS OVER A FIELD
B.26. Suppose f (t) = 2t3 −3t2 −6t −2. Find all the roots of f (t) knowing that f (t) has a rational root.
The rational roots of f (t) must be among ±1, ±2, ±1/2. Testing each possible root, we get, by synthetic division
(or dividing by 2t + 1),
−1
2
/////
2 −3 −6 −2
−1 + 2 + 2
2 −4 −4 + 0
Therefore t = −1/2 is a root and
f (t) = (t + 1/2)(2t2 −4t −4) = (2t + 1)(t2 −2t −2)
We can now use the quadratic formula on t2 −2t −2 to obtain the following three roots of f (t):
t = −1/2,
t = 1 +
√
3,
t = 1 −
√
3
B.27. Let f (t) = t4 −3t3 + 3t2 + 3t −20. Find all the roots of f (t) given that t = 1 + 2i is a root.
Since 1+2i is a root, then 1−2i is a root and c(t) = t2 −2t +5 is a factor of f (t). Dividing f (t) by c(t) we get
f (t) = (t2 −2t + 5)(t2 −t −4)
The quadratic formula with t2 −t −4 gives us the other roots of f (t). That is, the four roots of f (t) follow:
t = 1 + 2i,
t = 1 −2i,
t = (1 +
√
17)/2,
t = (1 −
√
17)/2
B.28. Let K = Z8. Find all roots of f (t) = t2 + 6t.
Here Z8 = {0, 1, 2, . . ., 7}. Substitute each element of Z8 into f (t) to obtain:
f (0) = 0,
f (2) = 0,
f (4) = 0,
f (6) = 0
Then f (t) has four roots, t = 0, 2, 4, 6. (Theorem B.21 does not hold here since K is not a ﬁeld.)
B.29. Suppose f (t) is a real polynomial with odd degree n. Show that f (t) has a real root.
The complex (nonreal) roots come in pairs. Since f (t) has an odd number n of roots (counting multiplicity),
f (t) must have at least one real root.
B.30. Prove Theorem B.15 (Euclidean Division Algorithm): Let f (t) and g(t) be polynomials over a ﬁeld K
with g(t) ̸= 0. Then there exist polynomials q(t) and r(t) such that
f (t) = q(t)g(t) + r(t)
where either r(t) ≡0 or deg(r) < deg(g).
If f (t) = 0 or if deg(f ) < deg(g), then we have the required representation f (t) = 0g(t) + f (t). Now suppose
deg(f ) ≥deg(g), say
f (t) = antn + · · · + a1t + a0
and
g(t) = bmtm + · · · + b1t + b0
where an, bm ̸= 0 and n > m. We form the polynomial
f1(t) = f (t) −an
bm
tn−mg(t)
(1)
(This is the ﬁrst subtraction step in “long division.”) Then deg(f1) < deg(f ). By induction, there exist polynomials
q1(t) and r(t) such that f1(t) = q1(t)g(t) + r(t) where either r(t) ≡0 or deg(r) < deg(g). Substituting this into (1)
and solving for f (t), we get
f (t) =
"
q1(t) + an
bm
tn−m#
g(t) + r(t)
which is the desired representation.

460
ALGEBRAIC SYSTEMS
[APP. B
B.31. Prove Theorem B.18: Suppose f (t) is a polynomial over a ﬁeld K, and deg(f ) = n. Then f (t) has at
most n roots.
The proof is by induction on n. If n = 1, then f (t) = at + b and f (t) has the unique root t = −b/a. Suppose
n > 1. If f (t) has no roots, then the theorem is true. Suppose a ∈K is a root of f (t). Then
f (t) = (t −a)g(t)
(1)
where deg(g) = n −1. We claim that any other root of f (t) must also be a root of g(t).
Suppose b ̸= a is another root of f (t). Substituting t = b in (1) yields 0 = f (b) = (b −a)g(b).
Since K has no zero divisors and b −a ̸= 0, we must have g(b) = 0. By induction, g(t) has at most n −1 roots. Thus
f (t) has at most n −1 roots other than a. Thus f (t) has at most n roots.
B.32. Prove Theorem B.19: Suppose a rational number p/q (reduced to lowest terms) is a root of the polynomial
f (t) = antn + · · · + a1t + a0
where all the coefﬁcients an,. . ., a1, a0 are integers. Then p divides the constant term a0 and q divides
the leading coefﬁcients an. In particular, if c = p/q is an integer, then c divides the constant term a0.
Substitute t = p/q into f (t) = 0 to obtain an(p/q)n + · · · + a1(p/q) + a0 = 0. Multiply both sides of the
equation by qn to obtain
anpn + an−1pn−1q + an−2pn−2q2 + · · · + a1pqn−1 + a0qn = 0
(1)
Since p divides all of the ﬁrst n terms of (1), p must divide the last term a0qn. Assuming p and q are relatively
prime, p divides a0. Similarly, q divides the last n terms of (1), hence q divides the ﬁrst term anpn. Since p and q are
relatively prime, q divides an.
B.33. Prove Theorem B.20: The ring K[t] of polynomials over a ﬁeld K is a principal ideal domain (PID).
If J is an ideal in K[t], then there exists a unique monic polynomial d which generates J, that is, every
polynomial f in J is a multiple of d.
Let d be a polynomial of lowest degree in J. Since we can multiply d by a nonzero scalar and still remain in J,
we can assume without loss in generality that d is a monic polynomial (leading coefﬁcient equal 1). Now suppose
f ∈J. By the division algorithm there exist polynomials q and r such that f = qd + r where either r ≡0 or
deg(r) < deg(d). Now f, d ∈J implies qd ∈J and hence r = f −qd ∈J. But d is a polynomial of lowest degree
in J. Accordingly, r ≡0 and f = qd, that is, d divides f. It remains to show that d is unique. If d′ is another monic
polynomial which generates J, then d divides d′ and d′ divides d. This implies that d = d′, because d and d′ are
monic. Thus the theorem is proved.
B.34. Prove Theorem B.21: Let f and g be polynomials in K[t], not both the zero polynomial. Then there exists a
unique monic polynomial d such that: (i) d divides both f and g. (ii) If d′ divides f and g, then d′ divides d.
The set I = {mf + ng | m, n ∈K[t]} is an ideal. Let d be the monic polynomial which generates I. Note
f, g ∈I; hence d divides f and g. Now suppose d′ divides f and g. Let J be the ideal generated by d′. Then f, g ∈J
and hence I ⊆J. Accordingly, d ∈J and so d′ divides d as claimed. It remains to show that d is unique. If d1 is
another (monic) greatest common divisor of f and g, then d divides d1 and d1 divides d. This implies that d = d1
because d and d1 are monic. Thus the theorem is proved.
B.35. Prove Corollary B.22: Let d be the greatest common divisor of f and g. Then there exist polynomials m
and n such that d = mf + ng. In particular, if f and g are relatively prime, then there exist polynomials
m and n such that mf + ng = 1.
From the proof of Theorem B.21 in Problem B.34, the greatest common divisor d generates the ideal
I = {mf + ng | m, n ∈K[t]}. Thus there exist polynomials m and n such that d = mf + ng.
B.36. Prove Lemma B.23: Suppose p ∈K[t] is irreducible. If p divides the product fg of polynomials
f, g ∈K[t], then p divides f or p divides g. More generally, if p divides the product f1f2 · · · fn of n
polynomials, then p divides one of them.

APP. B]
ALGEBRAIC SYSTEMS
461
Suppose p divides fg but not f. Since p is irreducible, the polynomials f and p must then be relatively prime.
Thus there exist polynomials m, n ∈K[t] such that mf + np = 1. Multiplying this equation by g, we obtain
mfg + npg = g. But p divides fg and so p divides mfg. Also, p divides npg. Therefore, p divides the sum
g = mfg + npg.
Now suppose p divides f1f2 · · · fn. If p divides f1, then we are through. If not, then by the above result p
divides the product f2 · · · fn. By induction on n, p divides one of the polynomials in the product f2 · · · fn. Thus the
lemma is proved.
B.37. Prove Theorem B.24 (Unique Factorization Theorem): Let f be a nonzero polynomial in K[t]. Then f can
be written uniquely (except for order) as a product f = kp1p2 · · · pn where k ∈K and the p’s are monic
irreducible polynomials in K[t].
We prove the existence of such a product ﬁrst. If f is irreducible or if f ∈K, then such a product clearly exists.
On the other hand, suppose f = gh where g and h are nonscalars. Then g and h have degrees less than that of f. By
induction, we can assume g = k1g1g2 · · · gr and h = k2h1h2 · · · hs where k1, k2 ∈K and the gi and hj are monic
irreducible polynomials. Accordingly, our desired representation follows:
f = (k1k2)g1g2 · · · grh1h2 · · · hs
We next prove uniqueness (except for order) of such a product for f. Suppose
f = kp1p2 . . . pn = k′q1q2 . . . qm
where
k, k′ ∈K
and the p1, . . . , pn, q1, . . . , qm are monic irreducible polynomials. Now p1 divides k′q1 . . . qm. Since p1 is irreducible
it must divide one of the q’s by Lemma B.23. Say p1 divides q1. Since p1 and q1 are both irreducible and monic,
p1 = q1. Accordingly, kp2 . . . pn = k′ q2 . . . qm. By induction, we have that n = m and p2 = q2, . . . , pn = qm for
some rearrangement of the q’s. We also have that k = k′. Thus the theorem is proved.
B.38. Prove Theorem B.25: Suppose f (t) is a polynomial over the real ﬁeld R, and suppose the complex number
z = a + bi, b ̸= 0, is a root of f (t). Then the complex conjugate ¯z = a −bi is also a root of f (t). Hence
the following is a factor of f (t):
c(t) = (t −z)(t −¯z) = t2 −2at + a2 + b2
Dividing f (t) by c(t) where deg(c) = 2, there exist q(t) and real numbers M and N such that
f (t) = c(t)q(t) + Mt + N
(1)
Since z = a + bi is a root of f (t) and c(t), we have, by substituting t = a + bi in (1),
f (z) = c(z)q(z) + M(z) + n
or
0 = 0q(z) + M(z) + N
or
M(a + bi) + N = 0
Thus Ma + N = 0 and Mb = 0. Since b ̸= 0, we must have M = 0. Then 0 + N = 0 or N = 0. Accordingly,
f (t) = c(t)q(t) and ¯z = a −bi is a root of f (t).
Supplementary Problems
OPERATIONS AND SEMIGROUPS
B.39. Consider the set N of positive integers, and let ∗denote least common multiple (lcm) operation on N.
(a) Find 4 ∗6, 3 ∗5, 9 ∗18, 1 ∗6.
(b) Is (N, ∗) a semigroup? Is it commutative?
(c) Find the identity element of ∗.
(d) Which elements in N, if any, have inverses and what are they?
B.40. Let ∗be the operation on the set R of real numbers deﬁned by a ∗b = a + b + 2ab.
(a) Find 2 ∗3, 3 ∗(−5), and 7 ∗(1/2). (b) Is (R, ∗) a semigroup? Is it commutative?
(c) Find the identity element of ∗. (d) Which elements have inverses and what are they?

462
ALGEBRAIC SYSTEMS
[APP. B
B.41. Let A be a nonempty set with the operation ∗deﬁned by a ∗b = a, and assume A has more than one element.
(a) Is A a semigroup?
(c) Does A have an identity element?
(b) Is A commutative?
(d) Which elements, if any, have inverses and what are they?
B.42. Let A = {a, b}.
(a) Find the number of operations on A.
(b) Exhibit one which is neither associative nor com-
mutative.
B.43. For each of the following sets, state which are closed under: (a) multiplication; (b) addition.
A = {0, l},
B = {1, 2},
C = {x | x is prime},
D = {2, 4, 8, . . .} = {x | x = 2n}.
B.44. Let A = {. . ., −9, −6, −3, 0, 3, 6, 9, …}, the multiples of 3. Is A closed under:
(a) addition;
(b) multiplication;
(c) subtraction;
(d) division (except by 0)?
B.45. Find a set A of three integers which is closed under: (a) multiplication; (b) addition.
B.46. Let S be an inﬁnite set. Let A be the collection of ﬁnite subsets of S and let B be the collection of inﬁnite subsets
of S
(a) Is A closed under: (i) union; (ii) intersection; (iii) complements?
(b) Is B closed under: (i) union; (ii) intersection; (iii) complements?
B.47. Let S = Q × Q, the set of ordered pairs of rational numbers, with the operation ∗deﬁned by
(a, b) ∗(x, y) = (ax, ay + b)
(a) Find (3, 4) ∗(1, 2) and (−1, 3) ∗(5, 2).
(c) Find the identity element of S.
(b) Is S a semigroup? Is it commutative?
(d) Which elements, if any, have inverses and what are they?
B.48. Let S = N × N, the set of ordered pairs of positive integers, with the operation ∗deﬁned by
(a, b) ∗(c, d) = (ad + bc, bd)
(a) Find (3, 4) ∗(1, 5) and (2, 1) ∗(4, 7).
(b) Show that ∗is associative. (Hence that S is a semigroup.)
(c) Deﬁne f : (S, ∗) →(Q, +) by f (a, b) = a/b. Show that f is a homomorphism.
(d) Find the congruence relation ∼in S determined by the homomorphism f , that is, x ∼y if f (x) = f (y).
(e) Describe S/∼. Does S/∼have an identity element? Does it have inverses?
B.49. Let S = N × N. Let ∗be the operation on S deﬁned by
(a, b) ∗(a′, b′) = (a + a′, b + b′)
(a) Find (3, 4) ∗(1, 5) and (2, 1) ∗(4, 7).
(b) Show that ∗is associative. (Hence that S is a semigroup.)
(c) Deﬁne f : (S, ∗) →(Z, +) by f (a, b) = a −b. Show that f is a homomorphism.
(d) Find the congruence relation ∼in S determined by the homomorphism f.
(e) Describe S/∼. Does S/∼have an identity element? Does it have inverses?
GROUPS
B.50. Consider Z20 = {0, 1, 2, . . ., 19} under addition modulo 20. Let H be the subgroup generated by 5. (a) Find the
elements and order of H. (b) Find the cosets of H in Z20.
B.51. Consider G = {1, 5, 7, 11} under multiplication modulo 12. (a) Find the order of each element. (b) Is G cyclic?
(c) Find all subgroups of G.
B.52. Consider G = {1, 5, 7, 11, 13, 17} under multiplication modulo 18.
(a) Construct the multiplication table of G.
(b) Find 5−1, 7−1, and 17−1.
(c) Find the order and group generated by: (i) 5; (ii) 13;
(d) Is G cyclic?

APP. B]
ALGEBRAIC SYSTEMS
463
B.53. Consider the symmetric group S4. Let α =
 1
2
3
4
3
4
2
1

and β =
 1
2
3
4
2
4
3
1

.
(a) Find αβ, βα, α2, α−1.
(b) Find the orders of α, β, and αβ.
B.54. Prove the following results for a group G.
(a) The identity element e is unique.
(b) Each a in G has a unique inverse a−1.
(c) (a−1)−1 = a, (ab)−1 = b−1a−1, and, more generally, (ara2. . .an) = a−1
n
. . . a−1
2 a−1
1 .
(d) ab = ac implies b = c, and ba = ca implies b = c.
(e) For any integers r and s, we have aras = ar+s, (ar)s = ars.
(f) G is abelian if and only if (ab)2 = a2b2 for all a, b ∈G.
B.55. Let H be a subgroup of G. Prove: (a) H = Ha if and only if a ∈H. (b) Ha = Hb if and only if ab−1 ∈H,
(c) HH = H.
B.56. Prove Proposition B.5: A subset H of a group G is a subgroup of G if: (i) e ∈H, (ii) for all a, b ∈H, we have
ab, a−1 ∈H.
B.57. Let G be a group. Prove:
(a) The intersection of any number of subgroups of G is a subgroup of G.
(b) For any A ⊆G, gp(A) is equal to the intersection of all subgroups of G containing A.
(c) The intersection of any number of normal subgroups of G is a normal subgroup of G.
B.58. Suppose G is an abelian group. Show that any factor group G/H is also abelian.
B.59. Suppose |G| = p, where p is a prime. Prove: (a) G has no subgroups except G and {e}. (b) G is cyclic and every
element a ̸= e generates G.
B.60. Show that G = {1, −1, i, −i} is a group under multiplication, and show that G ∼= Z4 by giving an explicit isomorphism
f : G →Z4.
B.61. Let H be a subgroup of G with only two right cosets. Show that H is normal.
B.62. Let S = R2, the Cartesian plane. Find the stabilizer Ha of a = (1, 0) in S where G is the following group acting on S:
(a) G = Z × Z and G acts on S by g(x, y) = (x + m, y + n) where g = (m, n). That is, each element g in G is a
translation of S.
(b) G = (R, +) and G acts on S by g(x, y) = (xcosg−ysing, xsing + ycosg). That is, each element in G rotates S
about the origin by an angle g.
B.63. Let S be the regular polygon with n sides, and let G be the group of symmetries of S.
(a) Find the order of G.
(b) Show that G is generated by two elements a and b such that an = e, b2 = e, and b−1ab = a−1. (G is called the
dihedral group.)
B.64. Suppose a group G acts on a set S, say by the homomorphism ψ: →PERM(S).
(a) Prove that, for any s ∈S: (i) e(s) = s, and (ii) (gg′)(s) = g(g′(s)) where g, g′ ∈G.
(b) The orbit Gs of any s ∈S is deﬁned by Gs = {g(s) | g ∈G}. Show that the orbits form a partition of S.
(c) Show that
//Gs
// = the number of cosets of the stabilizer Hs of s in G. (Recall Hs = {g ∈G | g(s) ∈s}.)
B.65. Let G be an abelian group and let n be a ﬁxed positive integer. Show that the function f : G →G deﬁned by f (a) = an
is a homomorphism.
B.66. Let G be the multiplicative group of complex numbers z such that |z| = 1, and let R be the additive group of real
numbers. Prove G ∼= R/Z.
B.67. Suppose H and N are subgroups of G with N normal. Show that: (a) HN is a subgroup of G. (b) H ∩N is a normal
subgroup of H. (c) H/(H ∩N) ∼= HN/N.
B.68. Let H and K be groups. Let G be the product set H × K with the operation
(h, k) ∗(h′, k′) = (hh′, kk′).
(a) Show that G is a group (called the direct product of H and K).
(b) Let H ′ = H × {e}. Show that: (i) H ′ ∼= H; (ii) H ′ is a normal subgroup of G; (iii) G/H ′ ∼= K.

464
ALGEBRAIC SYSTEMS
[APP. B
RINGS
B.69. Consider the ring Z12 = {0, 1, . . ., 11} of integers modulo 12. (a) Find the units of Z12. (b) Find the roots of
f (x) = x2 + 4x + 4 over Z12. (c) Find the associates of 2.
B.70. Consider the ring Z30 = {0, 1, . . ., 29} of integers modulo 30.
(a) Find −2, −7, and −11. (b) Find: 7−1, 11−1, and 26−1.
B.71. Show that in a ring R: (a) (−a)(−b) = ab; (b) (−1)(−1) = 1, if R has an identity element 1.
B.72. Suppose a2 = a for every a ∈R. (Such a ring is called a Boolean ring). Prove that R is commutative.
B.73. Let R be a ring with an identity element 1. We make R into another ring R′ by deﬁning:
a ⊕b = a + b + 1
and
a ∗b = ab + a + b
(a) Verify that R′ is a ring. (b) Determine the 0-element and the 1-element of R′.
B.74. Let G be any (additive) abelian group. Deﬁne a multiplication in G by a ∗b = 0 for every a, b ∈G. Show that this
makes G into a ring.
B.75. Let J and K be ideals in a ring R. Prove that J + K nd J ∩K are also ideals.
B.76. Let R be a ring with unity 1. Show that (a) = {ra | r ∈R} is the smallest ideal containing a.
B.77. Show that R and {0} are ideals of any ring R.
B.78. Prove: (a) The units of a ring R form a group under multiplication. (b) The units in Zm are those integers which are
relatively prime to m.
B.79. For any positive integer m, verify that mZ = {rm | r ∈Z} is a ring. Show that 2Z and 3Z are not isomorphic.
B.80. Prove Theorem B.10: Let J be an ideal in a ring R. Then the cosets {a + J | a ∈R} form a ring under the coset
operations (a + J) + (b + J) = a + b + J and (a + J)(b + J) = ab + J.
B.81. Prove Theorem B.11: Let f : R →R′ be a ring homomorphism with kernel K. Then K is an ideal in R, and the quotient
ring R/K is isomorphic to f (R).
B.82. Let J be an ideal in a ring R. Consider the (canonical) mapping f : R →R/J deﬁned by f (a) = a + J. Show that:
(a) f is a ring homomorphism; (b) f is an onto mapping.
B.83. Suppose J is an ideal in a ring R. Show that: (a) If R is commutative, then R/J is commutative. (b) If R has a unity
element 1 and 1 ̸∈J, then 1 + R is a unity element for R/J.
INTEGRAL DOMAINS AND FIELDS
B.84. Prove that if x2 = 1 in an integral domain D, then x = −1 or x = 1.
B.85. Let R ̸= {0} be a ﬁnite commutative ring with no zero divisors. Show that R is an integral domain, that is, that R has
an identity element 1.
B.86. Prove that F = {a + b
√
2 | a, b rational} is a ﬁeld.
B.87. Prove that F = {a + b
√
2 | a, b integers} is an integral domain but not a ﬁeld.
B.88. Acomplex number a +bi where a, b are integers is called a Gaussian integer. Show that the set G of Gaussian integers
is an integral domain. Also show that the units are ±1, ±i.
B.89. Let R be an integral domain and let J be an ideal in R. Prove that the factor ring R/J is an integral domain if and only
if J is a prime ideal. (An ideal J is prime if J ̸= R and if ab ∈J implies a ∈J or b ∈J.)
B.90. Let R be a commutative ring with unity element 1, and let J be an ideal in R. Prove that the factor ring R/J is a ﬁeld
if and only if J is a maximal ideal. (An ideal J is maximal if J ̸= R and no ideal K lies strictly between J and R, that
is, if J ⊆K ⊆R then J = K or K = R.)
B.91. Let D be the ring of real 2 × 2 matrices of the form
& a
−b
b
a
'
. Show that D is isomorphic to the complex ﬁeld C,
when D is a ﬁeld.
B.92. Show that the only ideal in a ﬁeld K is {0} or K itself.
B.93. Suppose f : K →K′ is a homomorphism from a ﬁeld K to a ﬁeld K′. Show that f is an embedding; that is, f is
one-to-one. (We assume f (1) ̸= 0.)

APP. B]
ALGEBRAIC SYSTEMS
465
B.94. Consider the integral domain D = {a + b
√
13 | a, b integers}. (See Example B.15(b).) If α = a +
√
13, we deﬁne
N(α) = a2 −13b2. Prove:
(i) N(αβ) = N(α)N(β).
(iii) Among the units of D are ±1, 18 ± 5
√
13; and −18 ± 5
√
13.
(ii) α is a unit if and only if N(α) = +1.
(iv) The numbers 2, 3 −
√
13 and −3 −
√
13 are irreducible.
POLYNOMIALS OVER A FIELD
B.95. Find the roots of f (t) assuming f (t) has an integer root: (a) f (t) = t3 −2t2 −6t −3; (b) f (t) = t3 −t2 −11t −10;
(c) f (t) = t3 + 2t2 −13t −6.
B.96. Find the roots of f (t) assuming f (t) has a rational root: (a) f (t) = 2t3 −3t2 −16t −7; (b) f (t) = 2t3 −t2 −9t +9.
B.97. Find the roots of f (t) = t4 −5t3 + 16t2 −9t −13, given that t = 2 + 3i is a root.
B.98. Find the roots of f (t) = t4 −t3 −5t2 + 12t −10, given that t = 1 −i is a root.
B.99. For any scalar a ∈K, deﬁne the evaluation map ψa: K[t] →K by ψa(f (t)) = f (a). Show that ψa is a ring
homomorphism.
B.100. Prove: (a) Proposition B.14. (b) Theorem B.26.
Answers to Supplementary Problems
B.39. (a) 12, 15, 18, 6; (b) Yes, yes; (c) 1; (d) Only 1 and it
is its own inverse.
B.40. (a) 17, −32, 29/2; (b)Yes, yes; (c) Zero; (d) If a ̸= 1/2,
then a has an inverse which is −a/(1 + 2a).
B.41. (a) Yes; (b) No; (c) No; (d) It is meaningless to talk
about inverses when no identity element exists.
B.42. (a) Sixteen, since there are two choices, a or b, for
each of the four products aa, ab, ba, and bb. (b) Let
aa = b, ab = a, ba = b, bb = a. Then ab ̸= ba.
Also, (aa)b = bb = a, but a(ab) as = b.
B.43. (a) A, D; (b) none.
B.44. (a) Yes; (b) yes; (c) yes; (d) no.
B.45. (a) {1, −1, 0}; (b) There is no set.
B.46. (a) Yes, yes, no; (b) Yes, no, no.
B.47. (a) (3, 10), (−5, 1); (b) yes, no; (c) (1, 0); (d) The
element (a, b) has an inverse if a ̸= 0, and its
inverse is (1/a, −b/a).
B.48. (a) (19, 20), (18, 7). (d) (a, b) ∼(c, d) if ad = bc.
(e) S/ ∼is isomorphic to the positive rational numbers
under addition. Thus S/ ∼has no identity element and
no inverses.
B.49. (a) (4, 9), (6, 8); (d) (a, b) ∼(c, d) if a + d = b + c.
(e) S/ ∼is isomorphic Z since every integer is the
difference of two positive integers. Thus S/ ∼has an
identity element, and every element has an inverse.
B.50. (a) H
= l{0, 5, 10, 15} and |H| = 4.
(b) H,
1 + H = {1, 6, 11, 16}, 2 + H = {2, 7, 12, 17},
3 + H = {3, 8, 13, 18}, 4 + H = {4, 9, 14, 19}.
B.51. (a) x2 = 1 if x ̸= 1. (b) No. (c) {1}, {1, 5}, {1, 7},
{1, 11}, G.
B.52. (a) See Fig. B-9(a). (b) 11, 13, 17; (c) (i) |%| = 6,
gp(5) = G; (ii) |13| = 3, gp(13) = {1, 7, 13};
(d) Yes, since G = gp(5).
B.53. (a) See Fig. B-9(b). (b) 4, 3, 4.
Fig. B-9

466
ALGEBRAIC SYSTEMS
[APP. B
B.60. f (1) = 0, f (i) = 1, f (−1) = 2, f (−i) = 3
B.62. (a) {(0, 0)}, (b) {2πr | r ∈Z}.
B.69. (a) 1, 5, 7, 11; (b) 4, 10; (c) {2, 10}.
B.70. (a) 28, 23, 19; (b) 13, 11, 26−1 does not exist since
26 is not a unit.
B.72. Show −a
=
a using a + a
=
(a + a)2.
Then show ab = −ba by (a + b) = (a + b)2.
B.73. (b) −1 = 0−element, 0 = 1−element.
B.91. Show f is an isomorphism where f
& a
−b
b
a
'
=
a + bi.
B.93. Hint: Use Problem B.92.
B.95. (a) −1, (3 ±
√
21)/2;
(b) −2, (3 ±
√
29)/2;
(c) 3, (−5 ±
√
17)/2
B.96. (a) −1/2, 1 ± 2
√
2; (b) 3/2, (−1 ±
√
13)/2
B.97. 2 ± 3i, (1 ±
√
5)/2
B.98. 1 ± i, (−1 ±
√
21)/2

INDEX
Copyright © 2007, 1997, 1976 by The McGraw-Hill Companies, Inc. Click here for terms of use. 

This page intentionally left blank 

Abelian group, 438
Absolute value, 48, 266
Absorption law, 346, 370
Accepting (yes) states, 306
Ackermann function, 54
Acyclic, 216
Addition principle, 127
Adjacency:
list, 201
matrix, 171, 206
structure (AS), 171, 212
Adjacent:
fundamental products, 383
vertices, 158
Algebra:
Boolean, 368
Fundamental Theorem of, 382
Algebra of:
propositions, 75
sets, 7
Algorithms, 56
Alphabet, 303
Ancestor, 236
AND gate, 378
AND-OR circuit, 379
Antisymmetric relation, 29
Apple-Haken Theorem, 170
Arcs, 201
Arithmetic progression, 12
Arguments, 4, 76
Array, 409
Arrow diagram, 26
Associates, 449
Associative operations, 433
Atoms, 349
Augmented matrix,
AUT(•)(automorphisms), 440
Automaton, 306
linear bounded, 314
pushdown, 314
Average case, 58
Axiom of Choice, 346
B, 368,
Bn, 369
BFS (breadth-ﬁrst-search), 175,
215
Bakus-Naur form, 313
Base value, 52
Basic rectangle, 386
Bernoulli trials, 158
Biconditional statement, 75
Big O notation, 59
Bijective function, 46
Binary:
addition, 325
log, 50
relation, 24
Binary search tree, 242
complexity of algorithms, 286
Binary tree, 235
complete, 237
extended, 237
similar, 236
Binomial:
coefﬁcients, 90
distribution, 131, 147
Theorem, 90
Bipartite graphs, 163
Bits, 368
matrix, 206
Boolean:
algebra, 368
function, 381
matrix, 206, 422
Bounded, 267, 342
lattices, 348
Breadth-ﬁrst-search, 176, 215
Bridge (in a graph), 160
C, complex numbers, 2
C(n, r) (combinations), 93
CRT, (Chinese remainder
theorem), 281
Cancelation law, 277, 434
Cantor’s Theorem, 55
Cardinal numbers, 55
inequalities, 62
Cartesian product, 23
Ceiling function, 48
Cells, 10
Chain, 338
Characteristic polynomial, 114
root, 114
Chebyshev’s inequality, 135, 148
Children, 236
Chinese Remainder Theorem,
281
Choice, Axiom of, 346
Chromatic number, 168
Classes of sets, 1, 10
Closable relation, 37
469

470
INDEX
Closed:
path, 159, 203
under operation, 432
Closure, Kleene, 339
Closure of relations, 31
transitive, 31
Code, Huffman, 252
Codomain, 43
Colored:
graphs, 168
maps, 170
Column, 410
Combinations, 93
with repetition, 107
Commutative operation, 433
Comparable elements, 338
Complement:
in a Boolean algebra, 368
in a lattice, 351
of a set, 6
Complemented lattice, 454
Complete:
binary tree, 237
graph, 163
residue system, 275
set of solutions, 278
sum-of-products form, 374
Complex numbers, C, 2
Complexity of algorithms, 57
in a binary search tree, 243
in a heap, 248
Composition:
of functions, 45
of relations, 27
Computable function, 329–330
Concatenation, 303, 305
Conditional probability, 127
Conditional statement, 75
Congruence relation, 274
arithmetic, 275
Conjunction, 71
Connected graph, 160, 204
components, 160
strongly, 235
unilaterally, 235
weakly, 235
Consensus, 375
method, 376
Consistent enumeration, 342
Context-free grammar, 312
Context-sensitive grammar, 312
Contradiction, 74
Contrapositive statement, 83
Converse statement, 83
Coprime, 273
Coset, 440
Countable set, 8, 55
Counterexample, 80
Counting principle, 8
Cover, minimal, 386
Cross partition, 20
Cutpoint, 160
Cycle, 159, 203
Cycle-free, 164, 216
Cyclic group, 442
Dm, (divisors of m), 369
DFS (depth-ﬁrst-search), 173, 214
Dag (directed acyclic graph), 216,
340
Deck of cards, 24, 125
Degree, 203
of a polynomial, 446
of a region, 167
of a vertex, 157
DeMorgan’s law, 7, 11, 62, 79
Dense graph, 171, 206
Denumerable set, 55
Dependent events, 129
Depth:
of a binary tree, 236
of recursion, 54
Depth-ﬁrst-search, 173, 214
Derangement, 110
Derivation tree, 313
Descendant, 236
Detachment, Law of, 76
Determinants, 416–417
Diagonal of a matrix, 414
Diagram:
Hasse, 346
state, 307, 329
Venn, 3
Diameter of a graph, 160
Dice, 24, 125
Digraph (directed graph), 201
Direct product of groups, 464
Directed graph, 201, 214
Disjoint sets, 3
Disjunction (or), 71
Disjunctive normal form, 373
Distance between vertices, 160
Distribution, 133
binomial, 131
Distributive lattice, 349
Divisibility, 445
Division algorithm, 267
Domain, 24, 43
Domain (integral), 444
Dot product, 410
Dual map, 170
Duality, 8, 347, 369
Dummy index, 51
E(G) (edges in a graph), 201
Echelon matrix, 418
Edge, 156, 236
ﬁle, 172, 212
Element of a set, 1
Elimination, Gaussian, 419
Empty set, 2
word, 303
Equality:
of functions, 44
of matrices, 40
of sets, 2
Equality relation, 25
Equiprobable space, 126
Equivalence:
class, 32
relation, 31
Euclidean algorithm, 271, 447
Euler:
formula, 167
phi function, 278
Eulerian graph, 160
Even integer, 269
vertex, 157
Event (probability), 123
elementary, 126
independent, 129
Exclusive disjunction, 72
Existential quantiﬁer, 78
Expectation, 133
Exponential function, 49
Expression, 327
Extended binary tree, 237
External node, 237
FIFO (ﬁrst-in, ﬁrst-out), 156
Factor Theorem, 448
Factorial, 89
Failure, 131
Family, 1
Falacy, 76
Fibonacci sequence, 54, 115
Field, 444
File:
edge, 206
vertex, 206
Finite:
graph, 158, 202
set, 8
state automaton (FSA), 306
state machine (FSM), 323
First element, 341
First-in, ﬁrst-out, 156
Floor function, 48
Forest, 164, 252
Four Color Theorem, 171
Free:
monoid, 135, 304
semigroup, 135, 304
Front of queue, 156

INDEX
471
Full disjunctive form, 374
Function, 43
computable, 329
next-state, 307
rate of growth, 59
recursively deﬁned, 52
Fundamental product, 6, 372
Fundamental Theorem of Algebra,
449
Gates, logic, 377
Gaussian elimination, 419
gcd(a, b) (greatest common
divisor), 270, 449
General tree, 251
Generators of a group, 202, 435
Gödel number, 326
Grammar, 310
Turing machine, 329
types of, 312
Graph, 156
adjacency structure (AS), 171,
212
Gray code, 193
Greatest lower bound, 342
Group, 438
cyclic, 442
symmetric, 439
Growth of functions, rate of, 59
Haken, Wolfgang, 170
HALT state, 327
Hamiltonian circuit, 161
Hamiltonian graph, 161
Hasse diagram, 346
Heap, 244
Height, 236
Homeomorphic graphs, 158
Homomorphism
of groups, 442
of rings, 445
of semi groups, 437, 442
Horner’s method, 56
Huffman’s algorithm, 249
code, 252
Ideal, 289, 444
Idempotent laws, 347
Identity:
element, 454
function, 44
matrix In, 414
relation, 25
Image of a function, 43, 44
Impossible event, 123
Incident, 157
Inclusion map, 44
Inclusion-Exclusion Principle, 9,
95, 108
Indegree, 203
Independent:
events, 129
repeated trials, 130
Index of a subgroup, 440
Indexed sets, 52
Induction, mathematical, 12, 266
transﬁnite, 346
Inequalities, 265
Inﬁnium (inf), 342
Inﬁnite set, 8, 61
Initial:
condition, 112
state, 307
Injective function, 46
Inner product, 410
Inorder traversal, 240
Input (in a Turing machine), 324,
329
Insertion:
in a binary tree, 243
in a heap, 245
Integer value, 48
Integers, 264
modulo m, 276, 441
Integral domain, 444
Internal nodes, 237
Intersection of sets, 4
Inverse, 83
element, 434
matrix, 415
relation, 25
Inverter, 378
Invertible matrices, 415
Involution law, 370
Irreducible element, 445
Irredundant decompositions, 350
Isolated vertex, 160
Isomorphic, 437, 442
ordered sets, 344
rings, 445
semigroups, 437
Join, 346
irreducible, 349
Kn (complete graph), 163
Km,n (complete bipartite graph),
163
Karnaugh maps, 383
Kernel (Ker), 442
Kleene, 308
closure, 339
Königsberg bridges problem, 160
Kuratowski’s theorem, 168
LIFO (last-in, ﬁrst-out), 155
Labeled graph, 202
Lagrange Theorem, 440
Language, 304, 308
regular, 306
types of, 312
Large Numbers, Law of, 136
Last-in, ﬁrst-out, 155
Last element, 341
Lattice, 346
lcm(a, b) (least common multiple),
272
Leading nonzero element, 417
Least common multiple, 272
Least upper bound, 342
Leaves, 204, 236
Length, 210
of a path, 159, 203
of a vector, 410
of a word, 303
Level, 54, 204, 236
Lexicographical order, 205, 339
Linear:
combination, 269
congruence relation, 279
equations, 420
search, 58
Linear bounded automata, 314
Linearly ordered, 338
Linked list, 154
Linked representation, 171, 239
List, 51
linked, 154
Literal, 372
LNR traversal, 240
Logarithmic functions, 49
Logic,
circuits, 377
gates, 377
Logical equivalence, 74
Loop, 157, 201
Lower bound, 267, 342, 348
LRN traversal, 240
Lukasiewicz, 238
Machine:
ﬁnite state, 323
Turing, 314, 329
Map, 167
MAP(·), 440
Mathematical induction,
12, 266
Matrices, 410
determinant of, 416
square, 108
Matrix, 410
adjacency, 171, 206
augmented, 420

472
INDEX
Matrix (continued )
Boolean, 206, 422
of a relation, 26
Maximal:
element, 341
rectangle, 386
Maxheap, 244
Mean, 133
Meet, 346
Member of a set, 1
Minheap, 245
Minimal:
cover, 386
element, 341
path, 249
spanning tree, 165
sum-of-products, 375
Modiﬁed cancellation law,
277
Modular arithmetic, 48, 274
Modulus, 274
Moments, 148
Monic polynomial, 446
Monoid, 304, 435
Multigraph, 156
Multiplicative function,
278
Multiplier, 419
Mutually exclusive events,
123
N (positive integers), 2
n(•) (number of elements), 8
n-cube Qn, 192
n-tuple, 51
NAND gate, 380
Natural:
log, 50
mapping, 437
numbers, 2
Negation, 72
of a quantiﬁer, 78
Negative, 434
Neighbor, 157
Nearest-neighbor algorithm,
177
Next-state function, 307
NLR traversal, 240
NO state, 327
Nodes, 154, 156, 201, 235
external, 237
internal, 237
Nonplanar graph, 168
Nonsingular matrix, 415
NOR gate, 380
Norm, 410
Normal subgroup, 440
NOT gale, 378
Null:
pointer, 155, 239
set Ø, 3
tree, 235
Odd vertex, 157
One to-one:
correspondence, 46
function, 46
Onto function, 46
Operations, 432
OR, 208
OR gate, 377
Order, 33, 365
dual, 338
of an element, 442
of a group, 438
product, 339
Ordered:
pairs, 23
partitions, 108
rooted tree, 205
samples, 92
set, 338
Outdegree, 203
P(n, r) (permutations), 91
Parallel:
arcs, 202
edges, 202
Parent, 236
Partially ordered set, 33, 337
Partition:
ordered, 32
of a positive integer, 341
of a set, 10
Pascal’s triangle, 90
Path in a graph, 159, 203, 236
matrix, 207
PERM (·), 440
Permutations, 91, 439
with repetition, 92
Phrase structure grammars, 310
Picture card, 125
PID (Principal Ideal Domain), 445
Pigeonhole principle, 94, 110
Pivot, 419
Planar graphs, 166
Pointer, 154
Polish notation, 238
Polynomial, 446
evaluation, 56
function, 45
monic, 446
Poset (partially ordered set), 33,
337
Positive integers N, 2
Postﬁx form, 238
Postorder transversal, 240
Power set, 10
Precedes, 337
Preﬁx form, 238
property, 250
Premises, 76
Preordcr traversal, 240
Prime implicant, 375
Prime number, 269
Principal ideal, 445
domain, 445
Priority queue, 156, 444
Probability, 126
conditional, 127
distribution, 132
random variable, 132
Product:
order, 339
rule, 89
set, 23, 24
Production in a grammar, 310
Proposition, 70
truth table of, 73
Propositional function, 77
Pruning algorithm, 419
Pumping Lemma, 309
Pushdown automata, 314
Q (rational numbers), 2
Quantiﬁers, 77
negation of, 78
Quasi-order, 339
Queue, 156
priority, 156
Quintuple (Turing machine),
328
Quotient:
group, 440
ring, 445
semigroup, 436
set, 32
R (real number system), 2
Random, 126
variable, 132
Range, 43
space, 132
Rate of growth, 59
Reachable vertex, 203
matrix, 207
Real number system R, 2
Rear of a queue, 156
Recognition of words, 308
Recurance relation, 11, 113
Recursively deﬁned functions, 52
Reduced residue system, 276
Reﬂexive relation, 28
Region of a map, 167

INDEX
473
Regular:
expression, 305
grammar, 306
graph, 163
language, 306
Relation, 23–25
Relative:
complement, 6
frequency, 123
Relatively prime, 273, 449
Remainder, 268, 447
function, 48
Theorem, 447
Repeated trials, 130
Residue system, 275
Ring, 443
of polynomials, 444
with identity element
1, 444
Root:
of a binary tree, 235
of a polynomial, 447
Rooted trees, 204
ordered, 205
Row (of a matrix), 410
canonical form, 418
equivalence, 418
operations (elementary),
417
Sample:
mean, 136
space, 123
Scalar, 409
multiplication, 410, 411
Schroeder-Bernstein Theorem,
56
Search:
breadth ﬁrst, 176, 215
depth-ﬁrst, 173, 214
linear, 58
Search tree, binary, 243
Semigroup, 304, 435
product, 438
Sequences, 50
Fibonacci, 54, 115
Sets, 1
Short-lex order, 339
Shortest path, 162
algorithm, 216
Similar:
binary trees, 236
ordered sets, 344
Simple:
directed graph, 206
graph, 157
path, 159
Sink, 203
Size of a natrix, 411
Sort, topological, 217
Source, 203
Spanning tree, 164
path, 203
Sparse, 171, 206
Special sequences, 381
Square matrices, 414
Stabilizer, 455
Stack, 155
Standard deviation, 134
Star graph, 168
Start symbols, 310
State,
diagram, 307, 329
table, 324
Strings, 303
Strong, 204
Strongly connected, 208
Subgroup, 440
normal, 440
Subsemigroup, 435
Subset, 2
proper, 3
Substitution, Principle of, 74
Subword, 304
Succeeds, 332
Success, 131
Successor, 201
list, 201
Sum rule, 88
Sum-of-products, 372
Summation symbol , 51
Sums of random variables,
132
Supremum (sup), 342
Surjective function, 46
Syllogism, Law of, 77
Symmetries, group of, 455
Symmetric:
difference, 6
group Sn, 439
relation, 33
Synthetic division, 56, 448
Tables, truth, 73
Tape (Turing machine), 324
expression, 327
output, 324
Tautology, 74
Terminal node, 235
Ternary relation, 33
Top of a stack, 155
Topological sort, 217
Trace of a matrix, 414
Trail, 160
Euletrian, 160
traversable, 195
Transﬁnite induction, 346
Transitive relation, 29
closure of, 31
Transpose of a matrix, 414
Traveling salesman problem,
186
Traversable multigraph, 160
Traversal of binary trees,
240
Tree, 164
binary, 235
spanning, 164
2-tree, 237
Triangular form, 418
Trichotomy, law of, 265
Trivial graph, 158
Truth:
set, 77
tables, 73
values, 70
Turing machine, 314, 329
Types of grammars, 312
UFD (unique factorization
domain), 445
Unary operation, 432
Uncountable set, 8
Unilaterally connected, 204
Union of sets, 4
Unique factorization domain,
445
Unit, 368, 445
matrix In, 414
Unity (identity) element in a ring,
444
Universal:
address system, 205
quantiﬁers, 78
set U, 3
Unordered partition, 108
Upper bound, 348
Usual order, 338
Utility graph, 168
V(G) (vertices of a graph),
201
Valid arguments, 76
Variable, 43, 310
random, 132
Variance, 134
Var(X) (variance), 134
Vectors, 409
Venn diagram, 3
Vertex, 156, 201
coloring, 168
ﬁle, 168, 212
isolated, 160

474
INDEX
Warshall’s algorithm, 209
Weak, 204
Weakly connected, 204
Weight, 162
Weighted graph, 162
path length, 159, 203
Welch-Powell algorithm, 169
Well-ordered set, 267, 344
Word, 303
empty, 303
Worst case, 58
YES set, 306
Yes (accepting) states, 327
Z (integers), 2, 264
Zm (integers modulo m), 276
Zero:
divisor, 444
element, 434
matrix, 411
polynomial, 446
row, 417
vector, 409

