©2019 MathByte Academy

Where to store the attribute value?
à we know the instance we are dealing with in both __get__ and __set__
à could maybe store it in the instance dictionary?
that might work…
but remember __slots__?
à we're not guaranteed to have an instance dictionary available
à so, maybe we use a dictionary that's local to the data descriptor instance
à key = object
à value = attribute value
à problem if object is not hashable!
à even if we were, what symbol to use? Might overwrite an existing attribute…
©2019 MathByte Academy

Assuming our objects are hashable…
à create a dictionary in the data descriptor instance
(e.g. in IntegerValue instance)
à when using __set__ save the value in the dictionary using instance as a key
à when using __get__ lookup the instance in the dictionary and return the value
class IntegerValue:
def __init__(self):
self.data = {}
def __set__(self, instance, value):
self.data[instance] = int(value)
def __get__(self, instance, owner_class):
if not instance:
return self
return self.data.get(instance)
class Point2D:
x = IntegerValue()
y = IntegerValue()
à works, but…
©2019 MathByte Academy

class IntegerValue:
def __init__(self):
self.data = {}
def __set__(self, instance, value):
self.data[instance] = int(value)
def __get__(self, instance, owner_class):
if not instance:
return self
return self.data.get(instance)
class Point2D:
x = IntegerValue()
y = IntegerValue()
p = Point2D()
à p is now a key in self.data
à reference count is 1
p.x = 100.1
à have a second reference to that point object
à reference count is 2
del p
à our local (or global) reference to point is gone
à but reference count is still 1
à object is not garbage collected!
©2019 MathByte Academy

Coding
©2019 MathByte Academy

