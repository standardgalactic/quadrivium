@EltonStoneman |  blog.sixeyed.com
CONSULTANT & TRAINER
Elton Stoneman
Building and Running Self-healing 
Applications

Health
Configuration
Logs
Dependencies
Traffic




•
Process liveness
•
… that's it
•
Application health
•
Readiness: 200 OK

v1
v1
v1

v1
v1
v1
v2
v2
v2

Demo
Container healthchecks with curl
- HTTP GET requests
- Web application health 
- Container runtime features

HEALTHCHECK --interval=10s \
CMD curl -s --fail http://localhost/healthz || exit 1
Docker healthchecks
Command runs inside the container

•
Go process
•
HTTP OK response
Status: 
Up (unhealthy)

HEALTHCHECK --interval=10s \
CMD curl -s --fail http://localhost/healthz || exit 1
RUN apk --update --no-cache add curl
Additional dependencies
Third-party tools: size, attack surface, update cadence

web
access-log
image-of-the-day

Demo
Health checks with custom utilities
- Building a custom check
- Understanding readiness
- Dependency checks at startup

var request = http.request(options, (res) => {
if (res.statusCode == 200) {
process.exit(0);
}
else {
process.exit(1);
}
});
Custom health checks
Complex logic and application configuration

FROM node:10.19.0-slim
CMD ["node", "/app/server.js"]
HEALTHCHECK --interval=10s CMD node /app/healthcheck.js
Health check runtime
No additional dependencies

FROM openjdk:11-jre-slim
CMD java ConfigLoader && \
java DependencyCheck 10000 && \
java -jar /app/iotd-service-0.1.0.jar
Readiness checks
Verify application dependencies at startup

•
Process liveness
•
Dependencies OK
•
Application OK

ConfigMap
ReadinessProbe
Deployment
LivenessProbe
Service

Demo
Self-healing apps in Kubernetes
- Readiness probes and Services
- Liveness probes and restarts
- HTTP and command probes


containers:
- name: web
image: image-gallery:m4-v2
livenessProbe:
httpGet:
path: /healthz
port: 80
periodSeconds: 10
Container Probes
apod-web.yaml
containers:
- name: api
image: access-log:m4-v2
livenessProbe:
exec:
command: ["node","x.js"]
periodSeconds: 30
initialDelaySeconds: 10
failureThreshold: 2
apod-log.yaml

containers:
- name: api
image: psdockerprod/image-of-the-day:m4-v2
readinessProbe:
httpGet:
path: /image
port: 80
periodSeconds: 10
livenessProbe:
exec:
command: ["java", "DependencyCheck", "0"]
periodSeconds: 30
initialDelaySeconds: 10
failureThreshold: 2
apod-api.yaml

web
access-log
image-of-the-day

Health checks and readiness checks
- Confirm application health
- Enable failure management
- Routing to healthy containers 
Checks in the Docker image
- OS tool or custom utility
- Execute inside container
- Runtime publishes health events
Checks in Kubernetes
- Container probes
- Restarts and endpoint management
Summary

Up Next:
Routing Incoming Traffic to App Containers

