©2019 MathByte Academy

Deleting Properties
Just like we can delete attributes from an object:
c = Circle()
c.color = 'yellow'
c.color à yellow
del c.color
c.color à AttributeError
We can also support deleting properties from an instance object:
deleter argument of the property initializer
@prop_name.deleter
à generally used to perform some cleanup activity upon deletion of the property
à not used very often
Important:
calling the deleter runs code contained in the deleter method
à does not remove property from class itself
or
delattr(c, 'color')
à it just calls the deleter method
©2019 MathByte Academy

Deleting Properties
class Circle:
def __init__(self, color):
self._color = color
def get_color(self):
return self._color
def set_color(self, value):
self._color = value
def del_color(self):
del self._color
color = property(get_color, set_color, del_color)
when this method is invoked, it will remove _color 
from the instance namespace (dictionary)
c = Color('yellow')
c.color à 'yellow'
c.__dict__ à {'_color': 'yellow'}
del c.color
c.__dict__ à {}
c.color
à AttributeError
c._color
©2019 MathByte Academy

Deleting Properties
We can also use the decorator syntax:
class UnitCircle:
def __init__(self, color):
self._color = color
@property
def color(self):
return self._color
@color.setter
def color(self, value):
self._color = value
@color.deleter
def color(self):
del self._color
c = UnitCircle('red')
c.__dict__ à {'_color': 'red'}
del c.color
c.__dict__ à {}
c.color à AttributeError
But the property still exists à defined on class
c.color = 'blue'
c.__dict__ à {'_color': 'blue'}
c.color à 'blue'
à because getter tries to read self._color
©2019 MathByte Academy

Coding
©2019 MathByte Academy

