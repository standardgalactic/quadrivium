Predicative topos theory and
models for constructive set theory
Predicatieve topostheorie en modellen voor constructieve verzamelingenleer
(met een samenvatting in het Nederlands)
Proefschrift
ter verkrijging van de graad van doctor aan de Universiteit Utrecht op gezag van de
rector magniﬁcus, prof. dr. W.H. Gispen, ingevolge het besluit van het college voor
promoties in het openbaar te verdedigen op maandag 22 mei 2006 des middags te
4.15 uur
door
Benno van den Berg
geboren op 1 november 1978 te Emmen

Promotor:
Prof. dr. I. Moerdijk


Beoordelingscommissie:
Prof. dr. T. Coquand
Prof. dr. J.M.E. Hyland
Prof. dr. B.P.F. Jacobs
Dr. J. van Oosten
Prof. dr. M. Rathjen
ISBN-10: 90-393-4259-8
ISBN-13: 978-90-393-4259-6
2000 Mathematics Subject Classiﬁcation: 03E70,03F50,18C50

Contents
1
Introduction
7
1.1
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7
1.2
Contents and results
. . . . . . . . . . . . . . . . . . . . . . . . . . .
14
2
Induction in categories
17
2.1
W-types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
18
2.2
Categories with W-types . . . . . . . . . . . . . . . . . . . . . . . . .
25
3
Exact completion and glueing
33
3.1
Exact completion of a cartesian category . . . . . . . . . . . . . . . .
33
3.2
Two existence results for W-types . . . . . . . . . . . . . . . . . . . .
36
3.3
ΠW-pretoposes as exact completions
. . . . . . . . . . . . . . . . . .
41
3.4
More examples of ΠW-pretoposes . . . . . . . . . . . . . . . . . . . .
50
3.5
Glueing and the free ΠW-pretopos
. . . . . . . . . . . . . . . . . . .
60
4
Algebraic set theory and CZF
65
4.1
Introduction to CZF
. . . . . . . . . . . . . . . . . . . . . . . . . . .
65
4.2
Introduction to algebraic set theory . . . . . . . . . . . . . . . . . . .
67
4.3
A realisability model of CZF . . . . . . . . . . . . . . . . . . . . . . .
71
5
Coinduction in categories
81
5.1
Preliminaries
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
82
5.2
Existence results for M-types
. . . . . . . . . . . . . . . . . . . . . .
86
5.3
Closure properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
91
5.3.1
M-types and slicing . . . . . . . . . . . . . . . . . . . . . . . .
91
5.3.2
M-types and coalgebras . . . . . . . . . . . . . . . . . . . . . .
93
5

6
CONTENTS
5.3.3
M-types and presheaves
. . . . . . . . . . . . . . . . . . . . .
96
5.3.4
M-types and sheaves . . . . . . . . . . . . . . . . . . . . . . .
97
6
Non-well-founded set theory
101
6.1
Generating objects in indexed categories . . . . . . . . . . . . . . . .
102
6.2
Final coalgebra theorems . . . . . . . . . . . . . . . . . . . . . . . . .
109
6.2.1
An indexed ﬁnal coalgebra theorem . . . . . . . . . . . . . . .
109
6.2.2
Small maps . . . . . . . . . . . . . . . . . . . . . . . . . . . .
112
6.2.3
Final coalgebras in categories with small maps . . . . . . . . .
114
6.3
The ﬁnal Ps-coalgebra as a model of AFA
. . . . . . . . . . . . . . .
117
A Categorical background
123
B Type theory
133
C Pcas and realisability
145
Samenvatting in het Nederlands
159
Acknowledgements
163
Curriculum Vitae
165

Chapter 1
Introduction
1.1
Background
Mathematical logic is the study of formal systems. In this way, the logician claims
to understand something about mathematical reasoning. On the face of it, this is a
surprising claim: as formal systems hardly play any rˆole in the work of the ordinary
mathematician, how can they illuminate her practices?
In everyday life, a mathematician who gives an argument never makes all her
assumptions and reasoning steps fully explicit. She relies on her intuition: things
she ﬁnds obvious and does not care to explain only remain implicit. This does not
prevent her from communicating with her peers, because they have the same tacit
understanding she has. If requested, she can explain herself more fully and ﬁll in
the gaps. In the end, she expects to be able to go back to some basic axioms, those
of set theory, to make her argument absolutely rigorous, but this for her is an ideal
possibility she would not care to pursue, except in some extreme cases.
Nevertheless, her basic assumptions, which are most probably made fully precise
by the formal set theory ZFC, tell a lot about her conception of mathematics. From
a philosophical point of view, ZFC expresses a belief in a static universe of mathe-
matical objects, the properties of which she discovers rather than invents and which
are generally independent of her cognitive activity. But diﬀerent points of view are
possible. Some mathematicians and philosophers have objected to what are called
the non-constructive and impredicative aspects of ZFC.
Constructivism: An argument is constructive when the mathematical objects that
are claimed to exist can actually be eﬀectively found. Ordinary mathematics is
full of arguments that are non-constructive (think of non-principal ultraﬁlters,
bases for every vector space, maximal ideals in rings, etcetera). Such arguments
express a strong belief in the mind-independent nature of mathematical objects,
since it is hard to see how the objects that are claimed to exist can actually
be built by the mathematician. A constructivist may for various philosophical
7

8
CHAPTER 1. INTRODUCTION
reasons reject this picture, and insist that all arguments have to be constructive.
Constructivist views go back to Kronecker at least, but have found a coherent
and comprehensive expression in Brouwer’s intuitionism. Not all constructivists
have since then been intuitionists, but Brouwer’s identiﬁcation of the Law of
Excluded Middle as the main culprit of the non-constructive nature of classical
mathematics has been very inﬂuential.
Constructivism has its origin as a philosophy of mathematics, but is, ironically
enough, more inﬂuential nowadays in computer science than in mathematics. A
natural reading of the view that a constructive argument should always allow
one to ﬁnd the objects that are asserted to exist, is that these objects can be
computed by an algorithm. In computer science, this has led to the paradigm
that constructive proofs can in fact be regarded as programs, and vice versa.
The same idea is behind what is called “realisability”: realisability is an inter-
pretation of the arguments of the constructive mathematician using the concepts
of recursion theory, the mathematical theory of algorithms and computation.
Predicativism: Besides non-constructive arguments, ZFC also allows for the for-
malisation of impredicative arguments. These have been criticised by mathe-
maticians like Russell, Poincar´e and Weyl, also starting from a certain construc-
tivist bias.
The view is basically that sets do not exist in themselves, but are the result of
the mathematician collecting objects into a whole. Predicativists observe that
certain deﬁnitions in ordinary mathematics deﬁne an element x in terms of a
set A to which it might belong (think of a deﬁning a real x as the supremum
of a set of reals A bounded from above). If one thinks of the element x as
being built by giving the deﬁnition, there is a clear problem here. The element
x has to exist before the set was built (because it was collected in the set A),
but at the same time it cannot exist before the set A was built (because it
was deﬁned in terms of it). Usually, the Powerset Axiom and the unrestricted
Separation Axiom are considered to be the axioms that make the set theory
ZFC intrinsically impredicative.
The discovery that made the foundations of mathematics a part of mathematics,
was that ZFC and other foundational schemes, that are either intuitionistic or pred-
icative (or both), can be studied mathematically. For that purpose, all the principles
that the diﬀerent foundational stances are committed to, have to be made completely
explicit. Formalisation therefore not only makes fully precise what a conception of
mathematics is committed to, so that one can see whether an argument is correct
on such a conception, but it also allows the possibility of studying such conceptions
mathematically. And that is what happens in this thesis.
But what kind of questions could the mathematician try to answer about these
formal systems? She can compare diﬀerent schemes in terms of their strength, for
example, by providing a translation from one into the other. Or she can try to prove
consistency of a formal system within another or try to prove that one can, without

1.1. BACKGROUND
9
loosing consistency, add principles to a formal system. Another possibility is to prove
certain principles independent: where one usually proves that certain principles can
be proved by doing precisely that, one could also to try to prove that certain principles
cannot be proved within a certain formal system. A statement is independent from
a formal theory when it is both impossible to prove and to disprove it in the theory
(the most famous examples of such independence results being the consistency of
Peano Arithmetic within Peano Arithmetic, the Continuum Hypothesis in ZFC and
the Axiom of Choice in ZF).
There is immediately one complication: what mathematical principles does one
employ in studying formal systems? If this is to be a mathematical investigation, the
arguments have to be conducted (ideally) within a certain formal system. Unfortu-
nately, there is no Archimedean point from which one can judge any formal system
in absolute terms. Also the mathematical logician is working within a mathematical
theory, her “metatheory”, and the best she can do is to make this as weak as possible
(preferably, no stronger than the weakest theory she is studying). This is just a fact
of life.
The methods to establish metamathematical results can roughly be classiﬁed as
either “syntactic” (proof-theoretic) or “semantic” (model-theoretic). As I understand
it, proof theorists assign ordinals to formal theories in order to measure their strength.
The starting point is G¨odel’s Incompleteness Theorem: a theory S that proves the
consistency of a theory T is stronger than T. So when Gentzen proves that adding
induction up to ϵ0 to Peano Arithmetic (PA) allows you to prove the consistency
of the original system, PA plus induction up to ϵ0 is a stronger system that PA
itself. Induction up to lower ordinals is provable in PA, so in a sense ϵ0 measures the
strength of Peano Arithmetic. Theories that prove induction up to ϵ0 are stronger
than PA and principles that imply this statement cannot be provable within Peano
Arithmetic.
This thesis takes a model-theoretic approach. A model-theorist proves the consis-
tency of a collection of statements by exhibiting a model, a mathematical structure in
which they are all correct. Suppose one takes the famous translation of 2-dimensional
elliptic geometry into 3-dimensional Euclidean geometry in which the plane is a 2-
sphere, points are diametrically opposed points, and lines are concentric circles. If
you believe in the existence of the 2-sphere, diametrically opposed points and con-
centric circles, you have to believe in the consistency of elliptic geometry. The work
of Cohen proceeds along the same lines: starting with a model of ZFC, one can ma-
nipulate it in such a way that it becomes a model of ZFC including the negation of
the Continuum Hypothesis. This shows that one can consistently add the negation
of Continuum Hypothesis to ZFC. Assuming ZFC has a model, of course, which is
(in view of G¨odel’s Completeness theorem that guarantees the existence of models of
consistent (ﬁrst-order) theories) the same as assuming the consistency of ZFC.
The thesis will be about formal systems that are diﬀerent from ZFC, in that
they are constructive as well as predicative. Predicative systems with classical logic
descend from Weyl’s Das Kontinuum and have mainly been studied from a proof-

10
CHAPTER 1. INTRODUCTION
theoretic point of view, while constructive systems that are impredicative, like IZF
(which is basically ZF with intuitionistic logic) and higher-order type theory, have
also been studied from a more semantic point of view, in the form of topos theory (I
will come back to this).
The historical origin of the interest in formal systems that are both constructive
and predicative lies in Bishop’s book on constructive analysis [17]. The book did a lot
to rekindle the interest in constructive analysis (as can be seen from the diﬀerence in
the lengths of the bibliographies in the ﬁrst and second edition). There was of course
an intuitionistic school in constructive analysis, but many became disheartened by
the less attractive features of Brouwer’s thought.1 Bishop skillfully managed to avoid
those and showed that it is possible to develop constructive analysis in an elegant
and coherent fashion. Among other things, he managed not to unnerve the classical
mathematician by only using methods she also believed to be valid, and not making
analysis dependent on strange entities called choice sequences. He did manage to
include variants of the well-known results, possibly with stronger assumptions, and
was able to develop some “higher” mathematics (more, say, than the mathematical
theory covered in any ﬁrst-year analysis course). The impression the book left behind
on many people was that Bishop made the constructive program look much more
attractive than it had ever done.
The relative success of the book made it a worthwhile task to understand the
conception of mathematics that was expressed in the book. Although the book talked
about sets and functions in a way familiar to any mathematician, it is clear that
these terms cannot have the meaning they are usually taken to have (as is clear from
Bishop’s insistence that all his mathematical statements have “numerical meaning”).
But how the notions of sets and functions were now supposed to be understood,
Bishop did not make very explicit. It may be considered an advantage that Bishop
did not spend page after page to explain his basic notions and instead went straight
on to develop his mathematics, but, as I explained, a formal framework is essential
for studying such notions mathematically.
As Bishop did not make his commitments fully precise, the task of formalising his
approach to mathematics fell to other people. The ﬁrst attempt was made by Myhill
in [62]: he formulated a set theory CST that, he claimed, allows for a formalisation of
Bishop’s book. CST was a theory much like ordinary ZFC, which has the advantage
of looking familiar to the general mathematician. But it had the features of being
both constructive and predicative. That its underlying logic is intuitionistic, so as not
to include the Law of Excluded Middle, was to be expected, but Myhill also argued
1Think of the (in)famous obscurity of Brouwers philosophical views, which included a degree of
metaphysical solipsism, a considerable amount of mysticism and a distaste for formalisation. In
addition his views seemed to make doing mathematics very cumbersome as certain methods were
considered taboo, allowed for certain mathematical objects, like choice sequences, that were very
much unlike anything introduced into mathematics before, included mathematical principles that
are false from the classical point of view, and ﬁnally seemed to be destructive of certain portions of
mathematics treasured by anyone who has ever studied it. One can understand why they were not
considered very inviting.

1.1. BACKGROUND
11
that the framework had to be formulated within predicativist limits. More precisely,
he argued for a restricted version of the Separation Axiom and the exclusion of the
Powerset Axiom. In general, one might think (as I do) that a consistent constructivist
has to be a predicativist as well, but that being as it may, in his book, Bishop abided
by predicativist strictures.
The set theory CST was extended by Aczel to a stronger set theory he called CZF.
Besides formulating a framework for doing Bishop-style constructive mathematics, he
also provided a clear constructive justiﬁcation, by interpreting CZF into Martin-L¨of’s
type theory. Martin-L¨of type theory is another attempt to elucidate the activity of
the constructive mathematician.
Its strength is that it provides a direct analysis
of the basic concept of constructivism: that of a mathematical construction. Thus
Aczel’s interpretation of CZF into type theory makes explicit how the constructive
nature of his theory is to be understood.
Martin-L¨of type theory is a remarkable theory, which has made an impact on
computer science as well. While the system was originally formulated by Martin-L¨of
as a formal analysis of constructivist mathematics, he also pointed out that it could
be regarded as a programming language. As such it has two noteworthy features:
ﬁrst, programs written within this system are always correct, in the following sense.
Typically, programs are written to calculate the solution to a problem which has been
speciﬁed in advance. While writing a program, one simultaneously (mathematically)
proves that the program computes what is the solution to the problem (and not some-
thing else). Furthermore, it is impossible to write programs that do not terminate:
so-called “loops” are guaranteed not to occur.
Also in the mechanical veriﬁcation of mathematical arguments, type theory has
been inﬂuential.
The most impressive feat in this respect might be the complete
formal veriﬁcation of the Four Colour Theorem in the system COQ by Gonthier.
COQ is based on the Calculus of Constructions, an extension of Martin-L¨of type
theory.
Both CZF and Martin-L¨of type theory are still predicative formal theories. An
early formulation of Martin-L¨of type theory allowed for impredicative deﬁnitions, but
as that turned out to be inconsistent (Girard’s paradox), its successors have been
formulated within predicative limits. And, like CST, CZF is not committed to the
existence of all powersets, and contains the Separation Axiom only in a restricted
form. Now that both CZF and Martin-L¨of type theory have emerged as formal sys-
tems for doing constructive-predicative mathematics, and books are currently being
written on how to do that (on CZF by Aczel and Rathjen, on type theory by Dybjer,
Coquand, Setzer and Palmgren), the time seems ripe for a mathematical investigation
of these systems. This thesis hopes to contribute to that.
But before misunderstandings arise, several remarks should perhaps be made. As
a ﬁrst remark, I should say that I will focus on the set theory CZF. Implications
of my work for type theory will not be pursued and are left for the future. (I will,
however, say something about the connection in Appendix B.)

12
CHAPTER 1. INTRODUCTION
Secondly, I should say that I am not the ﬁrst and only person to work on CZF.
The ﬁrst results concerning CZF are, of course, due to Peter Aczel [2, 3, 4], but
recently the set theory has been investigated mainly from a proof-theoretic point
of view by Rathjen and Lubarsky [70, 74, 73, 75, 54, 53] (some of which is as yet
unpublished). Sheaf models (in particular, forcing) for CZF have been investigated
by Grayson [34] and, more recently, Gambino [30, 31, 32]. The best introduction to
CZF is [7]. My work distuingishes itself from the approach of these authors in its
heavy reliance on categorical language and methods and in emphasising inductively
generated sets.
My source of inspiration for the categorical approach to the subject is topos theory.
While topos theory was initially developed in the Grothendieck school for the pur-
poses of algebraic geometry, the theory became interesting for logicians when Lawvere
emphasised the importance of the “subobject classiﬁer” and gave the deﬁnition of an
elementary topos. For the logician, elementary toposes are models for a higher-order
intuitionistic type theory. Topos theory turned out to be a rich subject (as witnessed
by the two thick volumes of Johnstone’s Elephant [44] and [45], with a third to come),
with plenty of implications for higher-order intuitionistic type theory.
Not only type theory, but also (intuitionistic) set theory proﬁted from the develop-
ment of topos theory. In the eighties of the last century, the study of the constructive,
but impredicative set theory IZF, was conducted mainly within a topos-theoretic
framework (as can be seen from sources like [51], Part III and [81], Chapter 15).2
This thesis studies constructive-predicative formal theories in a similar spirit.
Some adaptations are in order, as a topos is a structure that is far too rich for my
purposes. Due to the subobject classiﬁer, it models impredicative structures as well.
Therefore one of the themes of this thesis is the quest of a predicative analogue to
the notion of a topos, a kind of “predicative topos”. Such predicative toposes should
have the same properties as toposes, especially having the same closure properties
that have proved important for logical applications, while simultaneously providing
models for constructive and predicative formal theories.
The idea of developing a predicative theory of toposes, helpful in studying set
theories like CZF and Martin-L¨of type theory, goes back to two papers by Moerdijk
and Palmgren ([60] and [61]). In the ﬁrst, they put forward a categorical deﬁnition
of W-type and the notion of a ΠW-pretopos, which I believe to be a very suitable
candidate for the title of “predicative topos”. They prove stability of ΠW-pretoposes
under a number of topos-theoretic constructions, including slicing, taking sheaves and
glueing (over Sets).
In their second paper, Moerdijk and Palmgren use “algebraic set theory” to con-
nect ΠW-pretoposes with set theory: with this machinery, they show how a model
of CZF can be built inside a ΠW-pretopos. Essentially, this is a generalisation of
Aczel’s interpretation of CZF inside Martin-L¨of type theory (this will be recapitu-
2The work by Cohen on the independence of the Continuum Hypothesis and the Axiom of Choice
from classical set theory can also be reformulated topos-theoretically (see [18] and [56], Chapter 6).

1.1. BACKGROUND
13
lated in Chapter 4 of this thesis).
The idea of categories as a place (“topos”) where models of set theory can live,
is the starting point of algebraic set theory. This subject dates back to a book by
Joyal and Moerdijk [47] with the same name and provides a uniform categorical
tool for studying formal set theories. In the meantime the approach has been taken
up by several categorical logicians, including Steve Awodey, Alex Simpson, Carsten
Butz, Thomas Streicher, Henrik Forsell, Michael Warren, my former colleague Claire
Kouwenhoven-Gentil and present colleague Jaap van Oosten.3 Steve Awodey and his
PhD-student Michael Warren have also studied constructive-predicative set theories
within the setting of algebraic set theory [10].
Besides the usage of categorical methods, another respect in which the approach
taken here diﬀers from that of other logicians working on CZF, is in emphasising
inductively deﬁned structures.
It is very natural to allow for a wide class of in-
ductively generated sets within a constructive-predicative viewpoint. For example,
Poincar´e took in his philosophical papers the principle of induction as the only truly
mathematical (as opposed to logical) principle. Some predicative theories have been
proposed that do not allow for particular inductively deﬁned sets, but that looks un-
necessarily restrictive, and theories like CZF and Martin-L¨of type theory have in one
form or another incorporated features to build inductively deﬁned sets. To be more
precise, Aczel extended CZF with a Regular Extension Axiom (REA) to allow for
inductively generated sets and Martin-L¨of type theory contains a class of inductive
types called W-types.4 W-types are thought of as sets of well-founded trees, and the
categories I work with, will contain inductively deﬁned structures of that form.
The emphasis on inductively generated structures, is complemented by a discus-
sion of coinduction. I do not mean to give an introduction here to the notions of
coinduction and bisimulation (for that, see [42] and [83]), but I do want to provide
some historical background.
The idea of a “non-well-founded” analogue to set theory was popularised by Peter
Aczel in his book [5]. He forcefully argued that it would be worthwhile to investigate
alternatives to the Axiom of Foundation (or Regularity Axiom), which (classically)
says that there are no inﬁnitely descending ϵ-chains. The axiom is not necessary
to prevent set-theoretic paradoxes, and has no relevance for the work of “ordinary”
mathematicians, but is mainly of use to metamathematicians, in that it provides
them with a convenient picture of the universe of sets (the so-called cumulative hier-
archy). In set-theoretic texts, it is usually pointed out that it does no harm to accept
the axiom (a result by Von Neumann), but that does not exclude the possibility of
interesting alternatives.
In his book, Peter Aczel made a case for one such alternative: the Anti-Foundation
Axiom. The name is a bit misleading in that it suggests it might be the only possible
3References
can
be
found
at
the
webpage
devoted
to
the
subject:
http://www.phil.cmu.edu/projects/ast/.
4As explained in Appendix B, all the types in Martin-L¨of type theory are in a sense inductively
generated sets.

14
CHAPTER 1. INTRODUCTION
alternative, but it is more colourful than “X1-axiom”, as it was originally called
by Forti and Honsell [28]. Aczel’s starting point was the old idea that sets can be
presented as trees: the representation of a set x consists of a node, with one edge
into this node for every element of y of x, on which one sticks the representation
of that element, which consists of a node, etcetera. The Foundation Axiom implies
that only well-founded trees will now represent sets, and the sets they represent are
automatically unique (basically by the Extensionality Axiom). The idea of the Anti-
Foundation Axiom is to have all trees (well-founded or not) represent unique sets.
(Hence “non-well-founded” set theory.)
As Peter Aczel discovered, this means that one can solve systems of equations
like:
x
=
{x, y}
y
=
{x, {x, {y}}}
uniquely. This proved a very fruitful idea in computer science, where people lacked
a conceptual language to describe circular (and, more generally, non-terminating)
phenomena. The other concepts that Aczel isolated (coinduction, bisimulation), fre-
quently put in a category-theoretic framework, now belong to the standard arsenal of
tools in the theory of concurrency and program speciﬁcation, as well as in the study
of semantics for programming languages with coinductive types [23, 24, 42, 83, 12].
1.2
Contents and results
One of the main aims of this thesis is to convince the reader that the notion of a
ΠW-pretopos is a sensible predicative analogue of the notion of a topos. In order to
make a persuasive case, I need to show two things: ﬁrst, I have to make clear that
the class of ΠW-pretoposes shares many of the properties with the class of toposes.
This applies in particular to the closure properties that have been exploited in the
logical applications of topos theory. Secondly, I should explain how ΠW-pretoposes
provide models for constructive and predicative formal theories, like Aczel’s CZF.
The contents of this thesis are therefore as follows. Chapter 2 introduces W-types
in a categorical context and ΠW-pretoposes. It also proves a (new) characterisation
theorem that helps one to recognise W-types in categories.
This is then used to
identify and concretely describe W-types in various categories.
In Chapter 3, I prove two closure properties of ΠW-pretoposes, both of them
new. The ﬁrst of these is the closure under exact completion. This result is surpris-
ing, as the corresponding result for toposes is false. As will be discussed, less than
the structure of ΠW-pretopos is needed to get an exact completion that is a ΠW-
pretopos. I identify weaker categorical structures (“weak ΠW-pretoposes”), whose
exact completions are ΠW-pretoposes. This is then used to give more examples of
ΠW-pretoposes, one of which is a kind of predicative realisability topos. It shows
that ΠW-pretoposes are closed under a notion of realisability, which promises to be

1.2. CONTENTS AND RESULTS
15
important for logical purposes. Finally, I prove closure of ΠW-pretoposes under (gen-
eral) glueing. Combined with closure under exact completion, one obtains a result
concerning the projectives in the free ΠW-pretopos.
Chapter 4 leaves the area of pure “predicative topos theory” and studies an ap-
plication to the set theory CZF. Using the framework of algebraic set theory along
the lines of [61], I prove that the models of CZF of Streicher in [80] and Lubarsky
in [53] exist as objects in the eﬀective topos, and are in fact the same. The model
is then further scrutinised and shown to validate a host of constructivist principles.
The result that these are therefore collectively consistent with CZF is new.
The two ﬁnal Chapters are joint work with Federico De Marchi and are concerned
with categories with coinductively generated structures. In the same way as a W-type
is an inductively generated set of a particular type, which is to be thought of as a set
of well-founded trees, the dual notion of M-type is to be thought of as a coinductively
generated set of non-well-founded trees.
Chapter 5 studies M-types in categories. I prove some existence results concern-
ing M-types: the main result in this direction is that the existence of a ﬁxpoint for a
polynomial functor implies the existence of an M-type. This is also used to strengthen
a result by Santocanale on the existence of M-types in locally cartesian closed pre-
toposes with natural number object. The Chapter also introduces the notion of a
ΠM-pretopos and continues to investigate the possibility of developing a theory of
ΠM-pretoposes analogous to the theory of ΠW-pretoposes.
More particularly, it
studies the stability of ΠM-pretoposes under various topos-theoretic constructions,
like slicing, coalgebras for a cartesian comonad and sheaves. In topos theory, these
closure properties have proved useful for logical applications and the hope is that
these results will have applications to models of non-well-founded set theory and type
theories with coinductive types.
An interesting question is whether coinductively deﬁned structures are essentially
impredicative. This question is also discussed by Rathjen in [72]: his conclusion is
that Aczel’s theory of non-well-founded sets can be developed without using such
impredicative objects as powersets and the like. For that reason, he feels that the
circularity that the predicativist discerns in impredicative deﬁnitions is of a diﬀerent
kind than the circularity in coinductively deﬁned sets. Such views are of course highly
philosophical, but are at least conﬁrmed in that there are models of predicative formal
theories where the Anti-Foundation Axiom is valid. A general method for constructing
such models (classical or constructive, predicative or impredicative) is obtained in
Chapter 6.
Following Aczel [5], I use a ﬁnal coalgebra theorem to construct such models.
Therefore I ﬁrst prove an abstract categorical ﬁnal coalgebra theorem applicable in
the setting of algebraic set theory. This is then applied to prove the existence of
M-types and models of non-well-founded set theory in settings very much like that
of the original book on algebraic set theory by Joyal and Moerdijk [47]. This is also
joint work with Federico De Marchi.

16
CHAPTER 1. INTRODUCTION
The thesis concludes with three appendices that are meant to provide some back-
ground for this thesis. The ﬁrst introduces the category theory and categorical termi-
nology that is needed to understand this thesis, while the second gives an introduction
to Martin-L¨of type theory. The third is on partial combinatory algebras and realis-
ability toposes.

Chapter 2
Induction in categories
Within a conception of mathematics that is constructive and predicative, it is very
natural to assume the existence of a wide variety of inductively generated struc-
tures. To allow for inductively deﬁned sets, Aczel extended his set theory CZF with
the Regular Extension Axiom (REA), while for the same purpose, Martin-L¨of has
added well-founded types (or W-types) to his type theory. To study categorically
constructive-predicative theories characterised by this liberal attitude towards induc-
tively deﬁned sets, it is necessary to isolate categories in which there exist objects
that can be thought of as inductively generated.
In order to give a categorical formulation, the idea of an inductive deﬁnition is too
informal, and also too broad, so one has to restrict oneself to a class of sets that result
from an inductive deﬁnition of a determinate form. Following Moerdijk and Palmgren
[60], I take Martin-L¨of’s W-types as the inductively deﬁned sets to incorporate: they
have a precise constructive justiﬁcation in type theory, while they are also suﬃcient
for obtaining models for set theory (see [61], generalising the work of Aczel in [2]; I
will discuss this work in Chapter 4).
The categorical notion of a W-type will be discussed in the ﬁrst Section of this
Chapter. The main novelty of the discussion is a characterisation theorem which will
be helpful in recognizing W-types in concrete cases.
Two classes of categories with W-types are then deﬁned, ML-categories and ΠW-
pretoposes.
The latter, ΠW-pretoposes, were originally deﬁned by Moerdijk and
Palmgren, as predicative analogues of the notion of a topos. It is with these ΠW-
pretoposes that Chapters 3 and 4 of this thesis will be concerned. ML-categories
are almost ΠW-pretoposes, their only defect in this respect being that they are not
exact. But this “defect” can be remedied by taking their exact completion, as will be
discussed in Chapter 3.
The second Section of this Chapter discusses several examples of ΠW-pretoposes
and ML-categories. More examples will be given in Chapter 3.
Parts of this Chapter have previously appeared in [14].
17

18
CHAPTER 2. INDUCTION IN CATEGORIES
2.1
W-types
Martin-L¨of’s W-types are sets generated by an inductive deﬁnition with a particular
shape. The form of the inductive deﬁnition is determined by a signature: a set of
term constructors, each with a small (set-sized) arity.
The inductively generated
set (the W-type) is then the free term algebra over this signature. There are sets
which deserve to be called inductively generated, but are not of this form, but these
are beyond the scope of this thesis (see [27] for a broader framework for inductive
deﬁnitions).
To capture W-types categorically, the language of initial algebras (for an endo-
functor) immediately suggests itself, for, in general, it is the appropriate categorical
language to talk about inductively generated structures (see Appendix A for the ba-
sic facts and terminology on algebras and coalgebras on which this Section relies).
The question then becomes which endofunctors one should require to possess initial
algebras in order to have W-types. Moerdijk and Palmgren identiﬁed the following
class, deﬁnable in any lccc (also for categorical terminology and notation, one should
consult Appendix A).
Deﬁnition 2.1.1 In a cartesian category C, there is a polynomial functor 1 Pf asso-
ciated to every exponentiable map f: B
/ A. It is the endofunctor deﬁned as the
composite
C
B∗/ C/B
Πf / C/A
ΣA
/ C.
A more insightful way of writing Pf(X) may be the following:
Pf(X) = ΣA(X × A
/ A)(f:B
/ A),
or:
Pf(X) = Σa∈AXBa,
where Ba = f −1(a) is the ﬁbre of f over a ∈A.
Deﬁnition 2.1.2 Let f: B
/ A be an exponentiable morphism in a cartesian cat-
egory C. The W-type associated to f is the initial Pf-algebra, when it exists; the
M-type associated to f is the ﬁnal Pf-coalgebra, whenever it exists. If in a locally
cartesian closed category C, W-types (resp. M-types) exist for any map f, the category
C is said to have W-types (resp. M-types).
To understand this deﬁnition better, it helps to compute W-types and M-types in
the category of sets.
1Polynomial functors have received diﬀerent names in the literature: there is a tradition of calling
them partial product functors (they are called like this in [44], for example), while recently a group
of authors has emerged who use the name containers (for instance, see [1]).

2.1. W-TYPES
19
Fix a function f: B
/ A. One can think of f as specifying a signature: a term
constructor for every element a ∈A of arity Ba. The W-type Wf is now the set of all
terms over the signature speciﬁed by f. But it is even more suggestive to represent
such terms as well-founded trees of a particular type. The W-type for f is the set of
all well-founded trees in which nodes are labelled by elements a ∈A and edges are
labelled by elements b ∈B, in such a way that the edges into a certain node labelled
by a are enumerated by f −1(a), as illustrated in the following picture.
. . .
. . .
. . .
. . .
•
u
2222222
a
v

•
x
•
y

•
z
vvvvvvvvvvvv
f −1(a)
=
∅
f −1(b)
=
{u, v}
f −1(c)
=
{x, y, z}
. . .
a
x
E
E
E
E
E
E
E
E
E
E
b
y
c
z
{{{{{{{{{{
c
Let us ﬁrst try to understand why this set has the structure of a Pf-algebra. Now
Pf(X) for a set X can be written as:
Pf(X) =
X
a∈A
XBa.
So it consists of an element a ∈A together with a function t: Ba
/ X. Therefore
assume one is given an element a ∈A together with a function t: Ba
/ Wf. A new
well-founded tree of the appropriate type can be constructed as follows: take a fresh
node and label it with a. Draw edges into this node, one for every b ∈Ba and label
these accordingly. Then stick to the edge labelled by b ∈Ba the well-founded tree tb.
The new tree, which is easily seen to belong to Wf, is usually denoted by supa(t).
I have described an operation sup: Pf(Wf)
/ Wf, giving Wf the structure of a
Pf-algebra. The fact that the trees are well-founded means that one could actually
generate all of them by (transﬁnitely) repeating this sup-operation. This construction
terminates, because one has only a set of term constructors, and the arities are also
small, so there is only a set of trees with the appropriate labelling, well-founded or
not.
But this means that one can deﬁne functions by recursion on this generation
process. And this is precisely what yields initiality of Wf. For if m: Pf(X)
/ X
is any Pf-algebra and one wishes to build a function g: Wf
/ X, one can do so
by specifying the value of g on an element supa(t), assuming that one has already
speciﬁed the value on elements of the form tb, where b ∈Ba. Therefore one can put:
g(supa(t)) = m(λb ∈f −1(a).g(tb)),
expressing that g is a Pf-algebra morphism. The Pf-algebra morphism so deﬁned is
automatically unique, because functions deﬁned by recursion always are. Although
much of what I have said, applies only literally in the case of sets, thinking in terms of

20
CHAPTER 2. INDUCTION IN CATEGORIES
well-founded trees and recursion is the right intuition also in the abstract categorical
case, to which I now turn.
Now let f: B
/ A be an exponentiable morphism in a Heyting category C. When
the W-type Wf associated to f exists, one can say right away that it has two proper-
ties, both for abstract categorical reasons (see appendix A). First of all, the structure
map sup: Pf(Wf)
/ Wf is an isomorphism, by Lambek’s lemma (see Lemma A.14).
Secondly, it will have the feature of possessing no proper Pf-subalgebras.
The second property is reﬂected as an induction principle in the internal logic. If
R is a subobject of W that is inductive in the sense that
∀b ∈f −1(a)(tb ∈R) ⇒supa(t) ∈R
holds in the internal logic, then R = W as subobjects of W. Induction also holds
when R depends on a parameter. This follows from the following fact (see [60, 33],
and Remark 2.1.6 below):
Theorem 2.1.3 Let f: B
/ A be an exponentiable morphism in a cartesian category
C. The polynomial functor Pf is automatically indexed. If C is Heyting, a W-type for
f is automatically an indexed well-founded ﬁxpoint. If C is locally cartesian closed, a
W-type for f is automatically an indexed initial algebra.
As an illustration of this theme, there is this lemma:
Lemma 2.1.4 Let f: B
/ A be an exponentiable morphism in a Heyting category
C. When both the W-type and the M-type associated to f exist, the canonical map
i: Wf
/ Mf is monic.
Proof. There is a canonical morphism i, because an M-type is a ﬁxpoint for the poly-
nomial functor and can therefore be regarded as a Pf-algebra (conversely, the W-type
can be regarded as Pf-coalgebra). I will now actually prove something stronger: the
Pf-algebra map i from Wf to any Pf-algebra with monic structure map m: PfX
/ X,
is a monomorphism.
For let
R = {w ∈Wf | ∀v ∈Wf: i(w) = i(v) ⇒w = v}.
Then R is inductive: for suppose w = supa(t) ∈Wf is such that tb ∈R for all b ∈Ba.
Let v ∈Wf be such that i(w) = i(v). Since sup is an isomorphism, v is of the form
supa′(t′). Now
i(w) = m(a, λb ∈Ba.itb) = m(a′, λb′ ∈Ba′.it′b′) = i(v).
Since m is monic, a = a′ and itb = it′b for all b ∈Ba. Using that tb ∈R, one sees
that tb = t′b for all b ∈Ba, i.e. t = t′. Therefore w = v and the proof is ﬁnished. □

2.1. W-TYPES
21
In many categories, the two properties of being a ﬁxpoint and being well-founded
characterise W-types completely, as I will prove at the end of this Section. But before
I do that, I will discuss Pf-coalgebras and M-types.
In the category of sets, the M-type associated to a function f: B
/ A is the set of
all trees (well-founded or otherwise) labelled in the familiar way: nodes are labelled
by elements a ∈A, while edges into a node labelled by a are enumerated by b ∈Ba.
If one wishes for a more concrete description, one could regard Mf as the set of all
sets S of sequences of the form
⟨a0, b0, a1, b1, . . . , an⟩
where ai ∈A and bi ∈B satisfy:
1. f(bi) = ai;
2. ⟨a⟩∈S for some a ∈A;
3. if ⟨a0, b0, a1, b1, . . . , an, bn, an+1⟩∈S, then also ⟨a0, b0, a1, b1, . . . , an⟩∈S;
4. if ⟨a0, b0, a1, b1, . . . , an⟩∈S and b ∈Ban, then ⟨a0, b0, a1, b1, . . . , an, b, a⟩∈S for
some a ∈A.
That this yields the ﬁnal Pf-coalgebra, one sees as follows.
There is the projection morphism Pf(X)
/ A for any X, so to any Pf-coalgebra
m: X
/ PfX one can associate a root map ρ: X
/ A. The name is suggested by
the case of M-types and W-types, where ρ assigns to a tree the label of its root (a
W-type is also naturally a Pf-coalgebra, because it is a ﬁxpoint for Pf). Another
notion that makes sense in any Pf-coalgebra m: X
/ PfX is that of a path, the
name again being suggested by the case of W- and M-types. A sequence of the form
⟨x0, b0, x1, b1, . . . , xn⟩
is called a path from x0 to xn, if xi ∈X and bi ∈B are such that they satisfy the
following compatibility condition: if for an i < n, m(xi) is of the form (ai, ti), then
f(bi) = ai and xi+1 = tibi.
A Pf-coalgebra morphism g: X
/ Mf can now be obtained as follows: thinking
of trees as sets of paths, one sends an element x ∈X to the set of all sequences of
the form
⟨ρ(x0), b0, ρ(x1), b1, . . . , ρ(xn)⟩,
where ⟨x0, b0, x1, b1, . . . , xn⟩is a path starting from x.
One readily sees that g is
well-deﬁned, a Pf-coalgebra morphism and the unique such.
An important observation is that the notions of a root and a path are readily
formalized in the internal logic of locally cartesian closed regular categories C with
ﬁnite disjoint sums and natural number object: an object Paths = Paths(m) can
be deﬁned in any such C as the subobject of (X + B + 1)N consisting of those σ ∈
(X + B + 1)N for which one has:

22
CHAPTER 2. INDUCTION IN CATEGORIES
1. σ(0) ∈X.
2. If σ(n) ∈X for an even natural number n, then either σ(n+1) ∈B or σ(n+1) =
∗(with ∗denoting the unique element of 1).
3. If σ(n) = x and σ(n+1) = b for an even number n, then fb = a and σ(n+2) = tb,
where (a, t) = r(x).
4. n < k and σ(n) = ∗imply σ(k) = ∗.
5. There is a natural number n such that σ(n) = ∗.
Since paths will play a prominent rˆole in this thesis, I establish some terminology
and notation, which will also make sense in the internal logic of C. Because there is a
natural number n such that σ(n) = ∗, there is also a least such (this is a consequence of
the constructively valid principle that every inhabited decidable subset of the natural
numbers has a least element). That number will be called the length of σ. Then σ(0)
will be called the beginning, while σ(the length of σ −1) will be called the end of the
path. One has a map Paths →X deﬁned by assigning to a path the beginning of the
path. The ﬁbre above x for this map will be denoted by Pathsx. Also in the internal
logic, I will continue to use the notation ⟨. . . , . . . , . . .⟩for writing down sequences and
∗as a symbol for concatenation.
One can then use the notion of path to deﬁne the notion of subtree. Once again,
this notion has a clear meaning in the case of W- and M-types, but makes sense in
any Pf-coalgebra. I will call y a subtree of x if there is a path σ in Pathsx such that
σ(n) = y for some even natural number n. If n can be chosen to be bigger than 1, y is
called a proper subtree. Observe that the subtree relation is reﬂexive and transitive.
For example, in a W-type, the tree t(b) is a subtree of w = supa(t) (the tbs are really
the immediate proper subtrees of supa(t)).
As an application of the notion of path, one has the following characterisation or
recursion theorem for W-types, which will be very helpful in recognizing W-types.
Theorem 2.1.5 (Characterisation Theorem) Let C be a locally cartesian closed
regular category with ﬁnite disjoint sums and a natural number object, and f: B
/ A
a morphism in C. The following are equivalent for a Pf-algebra (W, s: Pf(W)
/ W):
1. It is the W-type for f.
2. It is an indexed well-founded ﬁxpoint.
3. It is a well-founded ﬁxpoint.
The idea of the proof of the characterisation theorem is essentially that of Cantor’s
general recursion theorem (see, for example, [49], Theorem 5.6): one builds a map
by pasting together “attempts” (partial approximations). Some care has to be taken,

2.1. W-TYPES
23
because the argument has to be predicative. In the impredicative context of elemen-
tary toposes, the characterisation would follow from a general result (see Theorem
2.2.3), but that argument does not obviously carry over to a predicative one.
Proof. The diﬃcult part will be to show that (3) implies (1). Before Theorem 2.1.3
I pointed out that (1) implies (2), while the implication from (2) to (3) is trivial.
So assume W is a ﬁxpoint having no proper Pf-subalgebras. In particular, it is a
Pf-coalgebra and hence it makes sense to talk about paths in W. This can therefore
be used to deﬁne a notion of attempt.
Now let (X, m: Pf(X)
/ X) be an arbitrary Pf-algebra. An attempt for an element
w ∈W is a morphism g: Pathsw
/ X with the additional property that for any path
σ ∈Pathsw ending with an element w′ = sa′(t′) the following equality holds:
g(σ) = m(λb′ ∈f −1(a′).g(σ ∗⟨b′, t′b′⟩))
Later it will become apparent that g(σ) is p(w′) where w′ is the last element of σ and
p is the unique Pf-algebra morphism p: W
/ X. So an attempt will turn out to be
the restriction to the subtrees of w of the unique Pf-algebra morphism p: W
/ X,
which I still have to construct.
Let S be the collection of all those w ∈W for which there exists a unique attempt.
Then S is a subalgebra of W. For let w = sa(t) be such that tb ∈S for all b ∈f −1(a).
This means that there are for every b ∈f −1(a) unique attempts gb for tb. Write
xb = gb(⟨tb⟩). Now deﬁne a morphism g: Pathsw
/ X for w as follows:
g(⟨w⟩)
=
m(λb ∈f −1(a).xb) and
g(⟨w, b⟩∗σ)
=
gb(σ)
The fact that this is an attempt is easily veriﬁed.
Uniqueness relies on the following observation: if σ is a path starting with w and
ending w′ and g is an attempt for w, then h(⟨w′⟩∗τ) = g(σ ∗τ) deﬁnes an attempt
for w′. So if h is any attempt for w, then hb(⟨tb⟩∗τ) = g(⟨w, b, tb⟩∗τ) deﬁnes an
attempt for tb for every b ∈f −1(a). So hb = gb and what remains is the proof of
h(⟨w⟩) = g(⟨w⟩). But that is established by an easy calculation:
h(⟨w⟩)
=
m(λb ∈f −1(a).h(⟨w, b, tb⟩)
=
m(λb ∈f −1(a).hb(⟨tb⟩)
=
m(λb ∈f −1(a).gb(⟨tb⟩)
=
g(⟨w⟩)
So h = g and w ∈S. Therefore S is a subalgebra of W.
As W has no proper subalgebras, S = W as subobjects of W. But that allows one
to deﬁne p: W
/ X by:
p(w) = g(⟨w⟩)

24
CHAPTER 2. INDUCTION IN CATEGORIES
for the unique attempt g for w. This deﬁnes a Pf-algebra morphism, which is actually
the unique such: for if q is another Pf-algebra morphism the equaliser of p and q is
a subalgebra of W.
□
Remark 2.1.6 It would not be diﬃcult to give a direct proof that (3) implies (2).
The crucial fact is that in case T is a PX∗f-subalgebra of X∗W in C/X, then
S = { w ∈W | ∀x ∈X: (x, w) ∈T }
deﬁnes a Pf-subalgebra of W in C.
I can now give the following two, important, deﬁnitions:
Deﬁnition 2.1.7 A locally cartesian closed category C with ﬁnite disjoint sums and
W-types is called an ML-category.
Observe that ML-categories possess a natural number object, because the functor
X 7→1 + X is polynomial, and an initial algebra for this functor is a nno (see
Appendix A). In fact, X 7→1 + X is X 7→Pf(X), where f is the right inclusion
1
/ 1 + 1.
Deﬁnition 2.1.8 A locally cartesian closed pretopos C with W-types is called a
ΠW-pretopos. (So a ΠW-pretopos is an exact ML-category.)
It is with these kinds of categories that the ﬁrst part of this thesis will mostly be
concerned. In Chapters 3 and 4, I will show that, for logical purposes, ΠW-pretoposes
can be regarded as a kind of predicative toposes, in that a theory analogous to topos
theory, with similar closure conditions, can be developed for them, while they at the
same time provide a natural habitat for models of set theory.
In the next Section I will give a number of examples of ML-categories and ΠW-
pretoposes. Once I have developed more theory, especially concerning exact comple-
tions, I will be able to give more.
Generalised polynomial functors 2.1.9
Which functors, aside from polynomial
ones, automatically have initial algebras in a category, when that category has W-
types? The question is interesting, but I will not attempt to give an answer.
However, in [33], Gambino and Hyland identify a class of functors that have initial
algebras, when all W-types exist. Suppose C is an ML-category, and recall that, since
C is an lccc, pullback functors
f ∗: C/X
/ C/Y
have left and right adjoints for all f: Y
/ X, called Σf and Πf, respectively. Consider
all possible compositions of such functors f ∗, Σf and Πf, possibly for diﬀerent f.

2.2. CATEGORIES WITH W-TYPES
25
When such a composition has the same slice of C as domain and codomain, the
functor is called generalised polynomial.
The class of generalised polynomial functors is less unwieldy than one might initially
think, because of the following “normal form lemma”.
Lemma 2.1.10 For any generalised polynomial functor ∆there is a (not necessarily
commutative) triangle
B
f
/
h
@
@
@
@
@
@
@
A
g
~~~~~~~
C
such that ∆is naturally isomorphic to ΣgΠfh∗.
In their paper, Gambino and Hyland prove:
Theorem 2.1.11 (See [33], Theorem 12.) All generalised polynomial functors on a
ML-category C have initial algebras in the appropriate slice.
One could prove an extension of the characterisation result Theorem 2.1.5 for ini-
tial algebras for generalised polynomial functors: when an algebra is a well-founded
ﬁxpoint for a generalised polynomial functor, it is the initial algebra.
2.2
Categories with W-types
In this Section, I will introduce various examples of the notions of ML-category and
ΠW-pretopos, introduced above. It is well known that these categories have this
structure, W-types excepted, and for proofs, the reader is therefore referred to the
literature. Frequently, a concrete description of W-types or M-types was not available
in the literature, and in some cases their presence was unknown. Therefore concrete
descriptions will be provided.
Toposes 2.2.1
Elementary toposes with a natural number object form an impor-
tant class of examples of ΠW-pretoposes. Recall that a morphism ⊤: 1
/ Ωin a
cartesian category C is the subobject classiﬁer of C, when for any monomorphism
m: A
/ X there is a unique map cA: X
/ Ωsuch that
A
m

/ 1
⊤

X
cA
/ Ω
is a pullback. And recall that (elementary) topos is a cartesian closed category with
pullbacks and a subobject classiﬁer.

26
CHAPTER 2. INDUCTION IN CATEGORIES
Topos theory is a rich subject with plenty of examples, among which are Grothendieck
toposes, in particular categories of sheaves over a topological space (see [56]), the free
topos (with nno) (see [51]) and the eﬀective topos (see [39]). Any (good) book on
topos theory will prove that a topos is a Π-pretopos (for example, [44], Corollaries
A2.3.4 and A2.4.5). The fact that toposes with nno have W- and M-types is folklore.
The description that I gave of an M-type for a map f: B
/ A as consisting of sets
of sequences
⟨a0, b0, a1, b1, . . . , an⟩
having four properties, makes sense in the internal logic of any topos with nno. It is
a routine exercise in the use of internal logic to show that the object so deﬁned is the
M-type for the map f. Therefore:
Proposition 2.2.2 (See Lemma 2.4 in [46].) Toposes with nno have M-types.
The fact that toposes have W-types now follows from another folklore result:
Theorem 2.2.3 (See Proposition 1 in [43].) Let F be an indexed functor on a topos
E preserving pullbacks. If F has a ﬁxpoint, it also has a well-founded ﬁxpoint (see
Appendix A), which necessarily is the initial F-algebra.
Since M-types are ﬁxpoints and polynomial functors are indexed and preserve pull-
backs, one immediately obtains:
Proposition 2.2.4 (See Proposition 2.3.5 in [68].) Toposes with nno have W-types.
Alternatively, one can simply select in the internal logic the trees in the M-type that
are well-founded (the internal logic of toposes is impredicative, so this is expressible),
and obtain the W-type in that way (see Proposition 3.6 in [60]).
The next couple of examples concern full subcategories of the realisability topos
RT(Q) on a pca Q. For a (brief) discussion of pcas and realisability toposes, see
Appendix C.
Convention 2.2.5
When in the name of a category depending on a pca Q, this
index is omitted, it is to be understood that the relativization is to K1, Kleene’s ﬁrst
pca. So RT is RT(K1), i.e. the eﬀective topos.
Assemblies 2.2.6
Fix a pca Q. An assembly on Q consists of set X together
with a function [−]X: X
/ PiQ (by PiQ, I mean the set of non-empty subsets of
Q). Instead of q ∈[x]X, I will frequently write q ⊢X x, or simply q ⊢x, when X
is understood. In this case q is called a realiser of x. A function f: X
/ Y is a

2.2. CATEGORIES WITH W-TYPES
27
morphism of assemblies from (X, [−]X) to (Y, [−]Y ), when there is an element t ∈Q
such that for all x ∈X, q ∈Q:
q ⊢X x ⇒t · q ↓and q · p ⊢Y f(x).
Such a t is said to track f, or to realise f. In this way, one obtains a category Asm(Q)
of assemblies on Q.
The category Asm(Q) is a regular ML-category for any pca Q. It is not a ΠW-
pretopos, as it is not exact. Asm(Q) occurs as the full subcategory of RT(Q) con-
sisting of the ¬¬-separated objects, and the inclusion of Asm(Q) in RT(Q) preserves
the regular ML-category structure. These facts are well-known. Even the fact that
the category of assemblies has W-types and M-types, and that they are preserved
by the inclusion, seems to be familiar to many people, although it is seldom pointed
out explicitly (it is implicit in [67], for example). Also for the sake of completeness,
I explain the construction here, based on some unpublished notes by Ieke Moerdijk
(another description is contained in [37]).
But before I can give a concrete description of the W-types and M-types in the
category of assemblies for a pca Q, I ﬁrst need to investigate the behaviour of the
functor Pf for a morphism f: B
/ A of assemblies. The underlying set of Pf(X)
consists of those pairs (a, t) where a is an element of Q and t is a function from Ba
to X that has a realiser. An element n ∈A is a realiser for (a, t), if n = ⟨n0, n1⟩is
such that n0 realises a and n1 tracks t (the latter meaning, of course, that for every
b ∈Ba and every realiser m of b, n1 · m is deﬁned and equal to a realiser of tb).
The key concept behind the construction of the W-types is the notion of decoration.
This notion will recur a number of times, so I will take some time explaining it. The
idea behind this notion is as follows. Elements w of the W-type Wf belonging to a
function f: B
/ A are thought of as being constructed by repeated application of the
sup operation to maps of the form f −1(a)
/ Wf. When constructing the W-types in
Asm(Q), I only want those elements w of W(f) that can be constructed by applying
the operation sup to “trackable” maps of the form f −1(a)
/ Wf. A decoration of
an element in the W-type speciﬁes for each application of the sup operation that has
been used to generate the element, a realiser for the “applicant”, i.e. both an element
in Q that tracks the map t: f −1(a)
/ Wf to which it has been applied, as well as a
realiser for a.
Therefore the W-type for f is constructed as follows. First construct the W-type
W for the underlying function f in the category of sets.
Next deﬁne a function
E: W
/ PQ by transﬁnite induction:
E(supat) consists of those elements n =
⟨n0, n1⟩∈Q such that (i) n0 realises a; and (ii) n1 tracks t, that is, for every b ∈Ba
and every realiser m of b, n1 · m is deﬁned and a member of E(tb). I call a member
n of E(w) a decoration or a realiser of the tree w ∈W. The trees w that have a
decoration are called decorable and V will be the name of the set of all decorable
trees.
The set V is the underlying set of an assembly whose realisability relation is deter-
mined by restriction of E to V . This assembly, also to be called V , is, I claim, the

28
CHAPTER 2. INDUCTION IN CATEGORIES
W-type for f in the category of assemblies. It is not hard to see that it has the
structure of a Pf-algebra. Let a be an element of A and t be a function Ba →V . The
element supa(t) ∈W is actually an element of V , because if n is a realiser of (a, t) in
Pf(V ), then n is a decoration of supa(t) (this is immediate from the deﬁnition of E
and the description of Pf(V )). So there is a map of assemblies s: Pf(V ) →V , which
is tracked by the identity.
To verify that the constructed object is the W-type, I appeal to the characterisation
theorem, Theorem 2.1.5. The map s is iso, basically because the underlying map sup
is, therefore I only need to show that V has no proper subalgebras.
Let (X, m: Pf(X)
/ X) be a subalgebra of V . One may assume that the underlying
set X is actually a subset of V and that m is the restriction of s to Pf(X) on the
level of underlying functions. First of all, one sees that X = V on the level of sets.
Let P be set of trees w ∈W for which one has that
w ∈V ⇒w ∈X.
That P = W can be proved by transﬁnite induction, which immediately shows that
X = V as sets.
For suppose supat ∈W and tb ∈P for all b ∈Ba (here a ∈
A, t: Ba
/ W, of course). One needs to show that supat ∈P, so assume that supat ∈
V . Because s is iso, one has that tb ∈V and hence, by induction hypothesis, tb ∈X.
Since on the level of sets, m is the restriction of s, which is a restriction of sup, one
has that supat is in X. This completes the proof.
To show, ﬁnally, that the X and V are isomorphic as assemblies, I have to show that
the identity map i: V →X is tracked by some element r ∈Q. For this, let q be the
element in Q tracking m and let H be the element computing the composition of two
elements in Q (that is, H(x, y) · n = x · (y · n)). Now use the fact that one can solve
recursion equations, to obtain an r satisfying the following equation:
r · j(n0, n1) = q · j(n0, H(r, n1)).
It is easy to see that r tracks i, by proving by a transﬁnite induction that for any tree
w ∈W and any decoration n of w, r · n is deﬁned and a realiser of i(w).
This completes the proof of the fact that V is the W-type of f in the category of
assemblies. The fact that the inclusion of assemblies on Q into the realisability topos
on Q preserves W-types, is easily seen as follows. Since the inclusion preserves the
lccc structure, the inclusion also preserves the functor Pf in the sense that
Asm(Q)
i
/
Pf

RT(Q)
Pif

Asm(Q)
i
/ RT(Q)
commutes (up to natural isomorphism). Therefore the W-type in Asm(Q) is a ﬁx-
point in RT(Q). It is also well-founded, because subobjects of ¬¬-separated objects

2.2. CATEGORIES WITH W-TYPES
29
are again ¬¬-separated. Therefore it is also the W-type in RT(Q) by either Theorem
2.1.5 or Theorem 2.2.3.
M-types are constructed in a similar fashion.
When f: B
/ A is a morphism of
assemblies, write M for the M-type of sets associated to the underlying function of
f in sets. Write sup for the inverse of the structure map of the coalgebra M. A
decoration for an element m = supa(t) ∈M is an element d ∈Q such that d codes
a pair ⟨d0, d1⟩, where d0 realises a = ρ(m) and d1 · y is deﬁned for every realiser y of
some b ∈Ba and is a decoration of tb, in the sense that it codes a pair ⟨e0, e1⟩, where
. . . etcetera (somewhat pedantically, one can say that the notion of a decoration is
coinductively deﬁned). More formally, say that a sequence of elements
⟨d0, e0, d1, e1, . . . , dn⟩
in Q tracks a path
⟨m0, b0, m1, b1, . . . , mn⟩
in M, when j0(di) realises ρ(mi), ei realises bi and j1(di)·ei = ei+1. An element d ∈Q
is a decoration for m, when every path starting from m is tracked by a sequence
beginning with d. The advantage of deﬁning the M-type in this manner, is that it
makes clear that any reliance on impredicative methods turns out be only apparent.
Since this deﬁnition in the case of well-founded trees coincides with the deﬁnition
given above, this means that both the construction of the W-type as that of the
M-type can also be performed within a predicative metatheory, as long as W-types,
respectively M-types are available in that metatheory.
Modest sets 2.2.7
Again, ﬁx a pca Q. A modest set on Q consists of a set X
together with a function [−]X: X
/ PiQ mapping distinct elements of X to disjoint
subsets of Q. Again, one writes a ⊢X x or simply a ⊢x to mean a ∈[x]X, and one
says that a realises x. Equivalently, a modest set as a set X together with a relation
⊢X⊆Q × X satisfying
x = y ⇔∃a ∈Q: a ⊢x and a ⊢y.
A morphism of modest sets from (X, ⊢X) to (Y, ⊢Y ) is a function of sets f: X
/ Y
having the property that there is a t ∈Q tracking f in the sense that for all a ∈
Q, x ∈X
a ⊢x ⇒t · a ↓and t · a ⊢f(x).
In this way one obtains a category Mod(Q), another regular ML-category that is a
full subcategory of the realisability topos on Q, where the inclusion is a morphism of
regular ML-categories.
Mod(Q) is equivalent to the category PER(Q) of partial equivalence relations on Q.
A partial equivalence relation (or simply a PER) on Q is a symmetric, transitive
relation on Q. If R and S are partial equivalence relations on Q, one calls f ∈Q
equivalence preserving, when for all a, b ∈Q
aRb ⇒f · a ↓, f · b ↓and (f · a)S(f · b).

30
CHAPTER 2. INDUCTION IN CATEGORIES
Two equivalence preserving elements f, g ∈P are considered equivalent when (f ·
a)S(g · a) for all a ∈P. A morphism of PERs is an equivalence class of equivalence
preserving elements. A good reference on modest sets and PERs is [13].
Usually, when people talk about PERs, they mean partial equivalence relation on the
pca K1, but the deﬁnition makes good sense for any pca. For example, as proved
in [13], when Q is Scott’s graph model Pω, PER(Q) is equivalent to the category
of countably based equilogical spaces, which, for that reason, is also a regular ML-
category.
That Mod(Q) for any pca Q has both W-types and M-types is pointed out in [13].
But the description there is not very concrete, and one can easily give a concrete
description along the lines of the previous example, so that is what I will do here.
Fix a morphism f: B
/ A of modest sets. Let W be the W-type of the underlying
map of f in sets. Again, deﬁne a function E: W
/ PQ by transﬁnite induction as
follows: E(supat) consists of those elements n = j(n0, n1) ∈Q such that (i) n0 realises
a; and (ii) n1 tracks t, that is, for every b ∈Ba and every realiser m of b, n1 · m is
deﬁned and a member of E(tb). I call a member n of E(w) a decoration or a realiser
of the tree w ∈W. By a straightforward proof by transﬁnite induction, one shows
that E maps distinct well-founded trees to disjoint subsets. So if V is a the set of
all decorated trees (w ∈W such that Ew ̸= ∅), then (V, E) is a modest set, which
is actually the W-type for f in modest sets. The proof of this fact is completely
similar to the one given above and therefore omitted. The inclusion of modest sets
over a pca into the realisability topos over that pca again preserves W-types, because
it preserves the lccc structure and modest sets are closed under subobjects in RT(Q).
Also the construction of M-types contains no surprises.
Heyting-valued sets 2.2.8
The category of sets valued on a frame forms another
regular ML-category. Let H be a frame (a.k.a. a complete Heyting algebra). An
object of the category H+ of H-valued sets is a set X together with a function
[−]X: X
/ H. A function f: X
/ Y is a morphism of H-valued sets, whenever for
all x ∈X, [x]X ≤[f(x)]Y . It is not so hard to see that it is a regular ML-category, but
references seem to be scarce (some facts are collected in [59] and [66]). The presence
of W-types and M-types appears to be new.
For a morphism f: B
/ A of H-valued sets, Pf(X) for an H-valued set X is con-
structed as follows. Writing | . . . | for the obvious forgetful functor | . . . |: H+
/ Sets,
|Pf(X)| = P|f|(|X|). An element (a, t) ∈|Pf(X)| is then mapped to
^
b∈Ba
([b] ⇒[tb]) ∧[a].
The W-type Wf is then also computed as in sets on the level of the underlying sets.
An element supa(t) has the above expression as its value (this inductively deﬁnes an
element in H for the well-founded tree). M-types are a bit more involved, but not
harder, to describe, and will be omitted.

2.2. CATEGORIES WITH W-TYPES
31
Heyting algebras 2.2.9
Heyting algebras can be considered as categories, like any
poset. Considered in this way, they are cartesian closed, because of the implication →:
ab = b →a. They are in fact locally cartesian closed, because for any a in a Heyting
algebra H, H/a = {x ∈H | x ≤a} is again a Heyting algebra, with implication given
by b →b′ (in H/a) = (b →b′)∧a. So it makes sense to ask whether Heyting algebras
possess W-types and/or M-types. The curious answer is that they have both: for a
map f: b
/ a (which simply means b ≤a),
Pf(x) = (b →(x ∧a)) ∧a.
So the W-type is the least ﬁxpoint for this, which is ¬b ∧a, and the M-type is the
greatest ﬁxpoint, which is a.
Setoids 2.2.10
The last example, for now, is built from the syntax of (intensional)
Martin-L¨of type theory (see Appendix B for an introduction to type theory). A setoid
is a type X together with an equivalence relation, meaning a type R(x, y) in the
context x ∈X, y ∈X with proof terms for reﬂexivity, symmetry and transitivity. A
morphism of setoids from (X, R) to (Y, S) is an equivalence class of terms t of type
X →Y preserving the equivalence relation (meaning that there is a term of type
Πx, y ∈X. R(x, y) →S(tx, ty)). Such terms s and t are considered equivalent, when
there is a term of type Πx: ∈X. S(sx, tx). The category obtained in this fashion,
will be denoted by Setoids.
Theorem 2.2.11 (See [60], Section 7.) Setoids is a ΠW-pretopos.
This theorem has “ideological” importance, in that it shows that a ΠW-pretopos is
a predicative structure (I consider Martin-L¨of type theory to be the paradigmatic
constructive-predicative theory). In the next Chapter, I will show that Setoids is
not the free ΠW-pretopos. This is unfortunate, because if it were, there would have
been a way in which the theory of ΠW-pretoposes would have been useful also for
studying intensional type theory. Now it seems that all light that it will shed on
type theory, will fall on the extensional version (see the Appendix for the diﬀerence
between intensional and extensional type theory).


Chapter 3
Exact completion and glueing
This Chapter will be an exercise in “pure predicative topos theory”. I prove two
closure properties of ΠW-pretoposes: closure under exact completion and under glue-
ing. Closure under exact completion is especially noteworthy, because toposes are not
closed under exact completion.
As an application of these two results, I give more examples of ΠW-pretoposes
and prove a result on the projectives in the free ΠW-pretopos. The latter will imply
that the free ΠW-pretopos and the category of setoids are non-equivalent.
Parts of this Chapter have appeared in [14].
3.1
Exact completion of a cartesian category
The examples of ΠW-pretoposes that we have seen so far are toposes with nno and
the category of setoids. The categorical construction called exact completion will
provide us with a host of other examples. To show that they are examples, I need a
set of conditions on a category C for its exact completion Cex to be a ΠW-pretopos.
As always in the theory of exact completions, the category C has to satisfy the axioms
for a ΠW-pretopos in a weaker sense. I identify a set of conditions and I show that
for the categories satisfying these conditions the exact completion is a ΠW-pretopos.
As it turns out, ML-categories are examples of such “weak ΠW-pretoposes”. This
means that the exact completion of an ML-category is a ΠW-pretoposes, so the
ML-categories of the previous Chapter can be remedied in this way to become ΠW-
pretoposes. It also shows that the exact completion of a topos with nno is a ΠW-
pretopos. As exact completions of toposes are rarely toposes, this shows that there
are many ΠW-pretoposes that are not toposes.
Intuitively, the exact completion is the universal way of constructing an exact
category out of a cartesian category. In more precise (2-categorical) terms it is the
following. Write Cart for the large category of (small) cartesian categories and Exact
for the large category of (small) exact categories. The exact completion of a given a
33

34
CHAPTER 3. EXACT COMPLETION AND GLUEING
cartesian category C is an exact category Cex, together with a cartesian embedding
y: C
/ Cex, such that for any exact category D, composition with y induces an equiv-
alence Exact(Cex, D)
/ Cart(C, D). As Joyal discovered, it is possible to explicitly
describe Cex.
Explicit description of an exact completion 3.1.1
Two parallel arrows
R
r0
/
r1
/ X
in a cartesian category C form an pseudo-equivalence relation when for any object A
in C the image of the induced function
Hom(A, R)
/ Hom(A, X) × Hom(A, X)
is an equivalence relation on the set Hom(A, X). These pseudo-equivalence relations
are the objects in the category Cex. A morphism from
RX
x0
/
x1
/ X
to
RY
y0
/
y1
/ Y
in Cex is an equivalence class of arrows f: X
/ Y in C for which there exists a
g: RX
/ RY such that fxi = yig for i = 0, 1. Two such arrows f0, f1: X
/ Y are
equivalent if there exists an h: X
/ RY such that fi = yih for i = 0, 1.
The embedding y is given by the obvious functor y: C
/ Cex that sends an object A
in C to
A
1A /
1A
/ A.
Besides being cartesian, the functor is evidently full and faithful. The proof that
the category thus constructed is exact and actually the exact completion of C can be
found in [21], [20].
For both the objects in the exact completion that are in the image of y and
categories that arise as exact completions, there exist remarkable characterisation
results. To state these, I need the following terminology.
Projectives, external and internal 3.1.2
An object P in a category C is (exter-
nally) projective if for any cover g: X
/ Y and any morphism f: P
/ Y , there exists
a morphism h: P
/ X such that gh = f.1 When C is cartesian, this is equivalent to:
any cover p: X
/ P has a section. An object X is covered by a projective, if there
1Some mathematicians call such objects “regular projectives”, but as this is to distinguish them
from a class of objects that does not concern me, I do not follow their terminology.

3.1. EXACT COMPLETION OF A CARTESIAN CATEGORY
35
exists a projective P and a cover f: P
/ X. A category C has enough projectives if
any object in C is covered by a projective.
These external projectives are to be distinguished from the following class of objects.
In a cartesian category C, an object P is called internally projective, when for any
cover Y
/ X and any arrow T × P
/ X, there exists a cover T ′
/ T and map
T ′ × P
/ Y such that the square
T ′ × P
/

Y

T × P
/ X
commutes.
A morphism f: Y
/ X is called a choice map, when it is internally
projective as an object of C/X.
In case P is exponentiable, this coincides with the more common deﬁnition: P is
internally projective iﬀthe functor (−)P preserves covers.
This means that in a
Heyting category C, for an exponentiable object A that is also internally projective,
the axiom of choice is valid “relative to A”, in the sense that the following scheme is
valid in the internal logic of C:
∀a ∈A ∃x ∈X φ(a, x) →∃f ∈XA ∀a ∈A φ(a, f(a)).
The two characterisation results now are (see [21]):
Lemma 3.1.3 The objects in the image of y: C
/ Cex are, up to isomorphism, the
projectives of Cex.
Proposition 3.1.4 An exact category C is an exact completion if and only if it has
enough projectives and the projectives are closed under ﬁnite limits. In that case, C
is the exact completion of the full subcategory of its projectives.
An immediate consequence is (see [16]):
Proposition 3.1.5 If C is cartesian and A an object in C, then
(C/A)ex ∼= Cex/yA.
One combines this with the following observation (which I am not the ﬁrst to
point out, see [38]) to show that morphisms of the form yf in Cex are choice maps.
Lemma 3.1.6 In an exact completion Cex of a cartesian category C, the external and
internal projectives coincide.
Proof. An internal projective is also externally projective, because in an exact com-
pletion the terminal object 1 is projective. An external projective is also internally
projective, because in an exact completion, every object is covered by an external
projective and external projectives are closed under products.
□

36
CHAPTER 3. EXACT COMPLETION AND GLUEING
3.2
Two existence results for W-types
For the main theorem of this Chapter, explaining which categories have a ΠW-
pretopos as exact completion, I need two auxiliary results on the existence of W-types,
to be proved here. In both cases I rely essentially on the notion of path, introduced
in the previous Chapter. Its main use is to help to deﬁne in a predicative fashion
a certain predicate or relation, that would in an impredicative context (like that of
toposes) be deﬁned using transﬁnite induction.
To state the ﬁrst theorem, I need the following deﬁnition.
Deﬁnition 3.2.1 A square
D
/

C

B
/ A
in a cartesian category C is called a quasi-pullback, when the induced map D
/ B×A
C is a cover.
Theorem 3.2.2 Suppose in a Π-pretopos E with a natural number object, one has a
diagram of the following form:
D
[−]B / /
g

B
f

C
[−]A
/ / A
(3.1)
Suppose furthermore that this diagram is a quasi-pullback and that g is a choice map
for which there exists a W-type. Then there also exists a W-type for f.
Proof. Write W for the W-type for g and sup for the structure map. The idea
is to use the well-founded trees in W, whose branching type is determined by g, to
represent well-founded trees whose branching type is determined by f. Intuitively this
representation works as follows: a well-founded tree with branching type determined
by f is represented by an element w ∈W if it can be obtained by “bracketing” all
labels in w.
. . .
. . .
. . .
. . .
. . .
. . .
. . .
. . .
•
u 99999
a
v
					
•
x
•
y
      •
z
ppppppppppp
•
[u] =====
[a]
[v]

•
[x]
•
[y]
     •
[z]
pppppppppp
a
x
L
L
L
L
L
L
L
L
L
b
y
c
z
ttttttttt
⇒
[a]
[x]
N
N
N
N
N
N
N
N
N
[b]
[y]
[c]
[z]
ppppppppp
c
[c]
While every tree with branching type determined by f can be so represented, not
every element in W is suitable for representing such a tree. A tree supc(t) in W is

3.2. TWO EXISTENCE RESULTS FOR W-TYPES
37
suitable for representing, or representing for short, whenever for any pair d, d′ ∈g−1(c)
such that [d]B = [d′]B, the trees td and td′ are representing and represent the same
tree. The trees td and td′ are then identiﬁed in the bracketing process.
So the question is when two (representing) elements supc(t) and supc′(t′) in W repre-
sent the same tree (in which case I will write supc(t) ∼supc′(t′)). They do, whenever
[c]A = [c′]A and td ∼t′d′ for all pairs d ∈g−1(c), d′ ∈g−1(c′). In an impredicative
context, like the internal logic of a topos, one could deﬁne ∼as the unique rela-
tion having this property. Here, with a predicative metatheory, one has to work a
little harder and deﬁne ∼explicitly in terms of paths. Then the property of being
representing can be deﬁned as being self-related via ∼.
The binary relation ∼on W is deﬁned as follows: w ∼w′ if and only if
all paths σ in Pathsw and σ′ in Pathsw′ having the same length (2n + 1
say) and satisfying the equality
[σ(2k + 1)]B = [σ′(2k + 1)]B
for all k < n, also satisfy the equality
[ρ(σ(2k))]A = [ρ(σ′(2k))]A
for all k ≤n (ρ being the canonical map W ∼= ΣCW g
/ C).
The reader should now verify that ∼has the desired property:
supc(t) ∼supc′(t′),
if and only if [c] = [c′] and for all d ∈g−1(c), d′ ∈g−1(c′): if [d] = [d′], then td ∼t′d′
(one proves this by induction).
Symmetry and transitivity of ∼now follow. Symmetry is immediate, while transitiv-
ity
w ∼w′ and w′ ∼w′′ imply w ∼w′′
is proved by induction on w′, as follows. Suppose supc(t) ∼supc′(t′) and supc′(t′) ∼
supc′′(t′′). Now clearly [c] = [c′′], because [c] = [c′] and [c′′] = [c′]. Suppose d ∈g−1(c)
and d′′ ∈g−1(c′′) are such that [d] = [d′′]. Since diagram (3.1) is a quasi-pullback,
there exists a d′ ∈g−1(c′) such that [d′] = [d] = [d′′]. One has now that td ∼t′d′
and t′d′ ∼t′′d′′, and so td ∼t′′d′′ by induction hypothesis. This shows that supc(t) ∼
supc′′(t′′).
A w = supc(t) ∈W such that w ∼w will be called a representing tree. The point is
that such a tree has the desired property that for any pair d, d′ ∈g−1(c), td and td′
represent the same tree. Denote the set of all representing trees by R and observe
that R is closed under subtrees.

38
CHAPTER 3. EXACT COMPLETION AND GLUEING
Now, ∼is an equivalence relation on R and hence one can form the quotient V ,
together with a quotient map q: R
/ V . This map q sends a representing tree to the
tree it represents. Let me also deﬁne an object R∗in E/C by setting for c ∈C:
R∗
c
=
{ t ∈W g−1(c) | supc(t) ∈R }
Or, equivalently: t ∈R∗
c if and only if
for any d, d′ ∈g−1(c) such that [d]B = [d′]B, one has that t(d) ∼t(d′).
One clearly has a commuting diagram
ΣCR∗/
/
sup

ΣCW g
sup

R /
/ W
(in fact, this diagram is a pullback). I will now construct a commuting diagram of
the following form:
ΣCR∗
q∗/ /
sup

ΣAV f
s

R
q
/ / V
(3.2)
To see that there is a morphism q∗: ΣCR∗
/ ΣAV f in E, one needs to note that the
subobject
Q∗
=
{ (t, h) ∈ΣCR∗× ΣAV f | Q∗(t, h) }
where Q∗(t, h) is the statement:
for the particular c ∈C and a ∈A such that t ∈R∗
c and h ∈V f−1(a), one
has that [c]A = a and for all d ∈g−1(c) that q(t(d)) = h([d]B).
is functional (for the deﬁnition of a functional relation, see Appendix A). The map
q∗so constructed is a cover: for let h be an arbitrary element of V f−1(a) for a certain
a ∈A. Pick a c ∈C such that [c]A = a. One has
∀d ∈g−1(c) ∃r ∈R: q(r) = h([d]B),
since q is a cover. Since g is a choice map, there is a map t: g−1(c)
/ R such that
q(t(d)) = h([d]B) for all d ∈g−1(c). If d, d′ ∈g−1(c) are such that [d]B = [d′]B, then
q(t(d)) = h([d]B) = h([d′]B) = q(t(d′)),
so t(d) ∼t(d′). This means that t ∈R∗
c and hence that (t, h) ∈Q∗. Since h was
arbitrary, this means that q∗is a cover.

3.2. TWO EXISTENCE RESULTS FOR W-TYPES
39
One now constructs s: ΣAV f
/ V in E by using the fact that in a pretopos every
epi is the coequaliser of its kernel pair. So suppose for certain c, c′ ∈C elements
t: g−1(c)
/ W ∈R∗and t′: g−1(c′)
/ W ∈R∗are given such that q∗(t) = q∗(t′).
This implies that [c]A = [c′]A and that
∀d ∈g−1(c), d′ ∈g−1(c′): [d]B = [d′]B ⇒td ∼t′d′.
This means that supc(t) ∼supc′(t′). Using the coequaliser property of q∗, this gives
a morphism s: ΣAV f
/ V making (3.2) commute.
This map s is actually monic. For suppose sa(h) = sa′(h′) for some h: f −1(a)
/ V
and h′: f −1(a′)
/ V . There are t: g−1(c)
/ W and t′: g−1(c′)
/ W, both in ΣCR∗,
such that q∗t = h and q∗g′ = h′. But now qsupa(t) = qsupa′(t′), i.e. supa(t) ∼
supa′(t′). But this implies [c] = [c′], so a = a′, and also that for all d ∈g−1(c) and
d′ ∈g−1(c′) such that [d] = [d′], td ∼t′d′. Hence q∗t = q∗t′ and h = h′. So s is monic.
But as s is also clearly epic, s is in fact an isomorphism.
I now claim that the Pf-algebra (W, s: Pf(W)
/ W) is actually the W-type for f. I
work towards applying Theorem 2.1.5.
Now, if S is a subalgebra of V , i.e. a subobject of V for which one has that
∀a ∈A ∀h: f −1(a)
/ V (∀b ∈f −1(a) (hb ∈S) ⇒sa(h) ∈S),
let T be the following subobject of W:
{ w ∈W | if w is representing, then q(w) ∈S }.
I prove that T = W as subobjects of W by induction. This will immediately imply
that S = V as subobjects of V . Suppose w = supc(t) ∈W is such that td ∈T for all
d ∈g−1(c). I assume that w is representing and want to prove that qw ∈S.
Because w is representing, the trees td (d ∈g−1(c)) are representing as well. Since
they belong to T, q(td) belongs to S. This means that for h = q∗t, hb ∈S for all
b ∈f −1(a), where a = [c]. So sa(h) ∈S, but sa(h) = saq∗(t) = qsupc(t).
So V is the W-type for f by Theorem 2.1.5 and the proof of Theorem 3.2.2 is com-
pleted.
□
Theorem 3.2.3 Let E be a Π-pretopos with natural number object and f: B
/ A be
a choice map in E. Assume that in a Pf-coalgebra V with the following two properties
exists: (1) its structure map s is a cover; (2) the only subobject R of V for which
v ∈V, s(v) = (a, t) and tb ∈R for all b ∈f −1(a) imply that v ∈R
is the subobject V itself. Then a W-type for f exists.
Proof. The idea is to turn s into an isomorphism. This means identifying those v
and v′, with the property that for (a, t) = s(v) and (a′, t′) = s(v′), one has that both

40
CHAPTER 3. EXACT COMPLETION AND GLUEING
a = a′ and t and t′ are extensionally equal functions. In other words, I need a relation
∼on V such that:
v ∼v′
⇔
if (a, t) = s(v) and (a′, t′) = s(v′), then a = a′ and
tb ∼t′b for all b ∈f −1(a).
(3.3)
In other contexts, I might turn to a transﬁnite induction to construct such a relation,
but here I again rely on paths.
First, I deﬁne an equivalence relation on the object of paths in V . I will call σ and
σ′ equivalent if they satisfy three conditions:
1. they have the same length, 2n + 1 say.
2. they satisfy the equation
σ(2k + 1) = σ′(2k + 1)
for all k < n.
3. they satisfy the equation
ρ(σ(2k)) = ρ(σ′(2k))
for all k ≤n (ρ being the root map).
Then I deﬁne the following equivalence relation on V :
v ∼v′
iﬀ
for every σ in Pathsv there exists an equivalent σ′
in Pathsv′ and for every σ′ in Pathsv′ there exists
an equivalent σ in Pathsv.
The reader should verify that ∼now has the desired property 3.3.
Consider the quotient W = V/ ∼and the quotient map q: V
/ W. Note that Pfq
is also a cover, because f is a choice map. I now want to complete the following
diagram:
V
q
/ /
s 
V
m

PfV
Pfq
/ / PfV.
Using that in a pretopos every epi is the coequaliser of its kernel pair and the fact that
∼satisﬁes 3.3, one can show that an isomorphism m making the diagram commute,
exists. Call its inverse n.
The proof will be completed once I show that (W, n: PfW
/ W) satisﬁes the condi-
tions of Theorem 2.1.5. n is certainly mono, so let A be an arbitary Pf-subalgebra of
W. Deﬁne
R = { v ∈V | q(v) ∈A }

3.3. ΠW-PRETOPOSES AS EXACT COMPLETIONS
41
It is easy to see that R satisﬁes the hypothesis of condition (2): for assume s(v) = (a, t)
and tb ∈R for all b ∈f −1(a). This means that q(tb) ∈A for all b ∈f −1(a), and hence
na(qt) ∈A because A is subalgebra of W. But na(qt) = (nPfq)(a, t) = (nPfqs)(v) =
q(v). So R = V and hence A = W.
□
3.3
ΠW-pretoposes as exact completions
This Section isolates a set of conditions on a cartesian category C suﬃcient for its
exact completion to be a ΠW-pretopos.
Suﬃcient (and necessary) conditions for
the exact completion to be a Π-pretopos can be extracted from the literature, but
suﬃcient conditions for the exact completion to have W-types were unknown. I will
recall the results available from the literature and then introduce the notion of a
“weak W-type”. In this way, I arrive at the notion of a “weak ΠW-pretopos”, and
prove the main theorem of this Section:
Theorem 3.3.1 If C is a weak ΠW-pretopos, then Cex is a ΠW-pretopos.
How this can be used to give more examples of ΠW-pretoposes will be the subject of
the next Section.
The following terminology and results are taken from the literature, especially
Menni’s PhD thesis [59]. C is always a cartesian category.
Proposition 3.3.2 (See [59], proposition 4.4.1.) The exact completion of C is a pre-
topos if and only if C has ﬁnite, disjoint and stable sums. In this case, the embedding
y: C
/ Cex preserves the sums.
For the exact completion to be locally cartesian closed, one weakens the require-
ment for dependent products, by dropping the uniqueness clause. So:
Deﬁnition 3.3.3 For two morphisms c: C
/ J and t: J
/ I in a cartesian category
C, the dependent product of c along t is an object w: W
/ I in C/I together with
a morphism ε: t∗w
/ c in C/J such that for any object m: M
/ I in C/I together
with a morphism h: t∗m
/ c in C/J there exists a unique morphism H: m
/ w in
C/I such that h = ε ◦t∗H in C/J.
Deﬁnition 3.3.4 For two morphisms c: C
/ J and t: J
/ I in a cartesian category
C, a weak dependent product of c along t is an object w: W
/ I in C/I together with
a morphism ε: t∗w
/ c in C/J such that for any object m: M
/ I in C/I together
with a morphism h: t∗m
/ c in C/J there exists a (not necessarily unique) morphism
H: m
/ w in C/I such that h = ε ◦t∗H in C/J. One says that a cartesian category
C has weak dependent products if it has all possible weak dependent products.

42
CHAPTER 3. EXACT COMPLETION AND GLUEING
The following proposition is contained in [22] (see also [16]):
Proposition 3.3.5 The exact completion Cex of a cartesian category C is locally
cartesian closed if and only if C has weak dependent products.
Remark 3.3.6 Unfortunately, the authors do not point out, although it follows
from their proofs, that in case C has genuine dependent products, the embedding
y: C
/ Cex preserves them. Hence the following argument.
By Proposition 3.1.5, it suﬃces to show that y preserves exponentials. How are
exponentials of projectives A and B computed in Cex? It is not hard to see that you
can compute BA in C and obtain the exponential in Cex by taking the quotient of the
following equivalence relation:
R = {(f, g) |∀b ∈B.f(b) = g(b)}
/
/ y(BA).
For the purpose of computing the universal quantiﬁer ∀b ∈B, let me introduce the
notion of a proof.
For any object X in C, pre-order the slice category C/X by declaring that
A
/ X ≤B
/ X,
whenever there is a morphism A
/ B making the obvious triangle commute. The set
of proofs (or weak subobjects) Prf X is then the poset obtained by identifying A
/ X
and B
/ X in case both A
/ X ≤B
/ X and B
/ X ≤A
/ X. Clearly, any
morphism f: Y
/ X in C induces an order-preserving map f ∗: Prf X
/ Prf Y by
pullback.
The fact that C has weak dependent products means precisely that f ∗
always has a right adjoint. When C has genuine dependent products, these right
adjoints can be computed by taking these real dependent products.
The functor y now induces an order-preserving bijection Prf X
/ Prf yX, ba-
sically by taking images, commuting with f ∗for any morphism f: Y
/ X in C.
This means that in Cex, the operation of pulling back subobjects along a morphism
f: Y
/ X between projectives, has a right adjoint, and for this reason universal
quantiﬁers along such f exist. The universal quantiﬁer that concerns me is precisely
of this form, so, in a way, it can be computed “type-theoretically” (by taking Πf) in
the original category C.
Therefore, to compute R in Cex, I should take the following object in C:
Σf,g∈ABΠb∈B{∗| f(b) = g(b)}.
But this is just AB, because the principle of extensionality holds in C. So the equiv-
alence relation in question takes the following form:
y(BA)
/
/ y(BA).
Hence its quotient is simply y(BA), and therefore y preserves exponentials.

3.3. ΠW-PRETOPOSES AS EXACT COMPLETIONS
43
There are a number of special cases of the notion of a weak dependent product
that will be important later on. There is the weak exponential, which is a weakening
of the familiar notion of an exponential. A weak version of the exponential Y X can be
deﬁned as a weak dependent product of the projection X × Y
/ X along X
/ 1.
More concretely this means that it is an object Z together with a “weak evaluation”
ε: Z × X
/ Y such that for every map h: X × A
/ Y there is a (not necessarily
unique) morphism H: A
/ Z such that h = ε ◦(X × H).
Furthermore, there is the notion of a weak simple product. Not surprisingly, this
is the weakening of the notion of a simple product, which may not be so familiar.
One calls
W × K
ϵ
/
w×K
L
L
L
L
%L
L
L
L
C
c

I × K
(3.4)
a simple product diagram, if for any other such diagram
X × K
f
/
x×K
K
K
K
K
%K
K
K
K
C
c

I × K
there exists a unique f ′: X
/ W over I such that f = ϵ ◦(f ′ × K). In this case
w: W
/ I together with ϵ will be the simple product of c: C
/ I × K with respect
to K. (Observe that this is equivalent to being the dependent product of c: C
/ I×K
along the projection I × K
/ I.)
If one drops the uniqueness condition for f ′, then diagram (3.4) is called a weak
simple product diagram.
w together with ϵ will be called a weak simple product
and this is equivalent to being a weak dependent product of c along the projection
I × K →I.
In addition, one can weaken the notion of a natural number object.
Deﬁnition 3.3.7 Let C be a cartesian category. A diagram
1
/ A
/ A
is called an inductive structure. t: A
/ B is a morphism of inductive structures with
domain 1
/ A →A and codomain 1
/ B
/ B, if the following diagram commutes:
A
/
t

A
t

1
?







?
?
?
?
?
?
?
?
B
/ B

44
CHAPTER 3. EXACT COMPLETION AND GLUEING
A natural number object is an inductive structure
1
0
/ N
s
/ N
that is initial in the category of inductive structures. It is a weak natural number
object if it is weakly initial in the category of inductive structures (meaning that for
any inductive structure 1
/ A
/ A there exists a morphism of inductive structures
t: N
/ A).
The following result follows from Proposition 5.1 in [16]:
Proposition 3.3.8 If C is cartesian category with weak dependent products and a
weak natural number object, then Cex has a natural number object.
The results contained in the literature can therefore be summarized as follows:
Corollary 3.3.9 When C is a cartesian category with ﬁnite, disjoint sums, weak
dependent products and a weak natural number object, Cex is a Π-pretopos with a
natural number object.
Proof. Combine Proposition 3.3.2, Proposition 3.3.5 and Proposition 3.3.8.
□
What is missing is a suﬃcient condition for the exact completion to have W-types.
To ﬁll this gap, I will introduce the notion of a “weak W-type”, inspired by Theorem
2.1.5, and subsequently prove that it has the desired property. Unfortunately, it is
also rather involved. To make things easier it will be good to set some notation and
terminology.
Fix a morphism f: B
/ A in a cartesian category C. As in any cartesian category,
one has for any object X in C two functors: X∗: C
/ C/X (the pullback along
X
/ 1) and ΣX: C/X
/ C (its left adjoint, given by composition).
Deﬁnition 3.3.10 A Pf-structure is a quadruple (4-tuple) x = (X, X∗, σX, εX) with
X an object in C, X∗an object in C/A, σX a map ΣA(X∗) →X in C and εX a map
X∗×f
/ A∗X in C/A. A homomorphism of Pf-structures from x = (X, X∗, σX, εX)
to z = (Z, Z∗, σZ, εZ) is a pair t = (t, t∗), where t is a map in C from X to Z, and t∗is
a map from X∗to Z∗in C/A. Furthermore, the following diagrams should commute:
ΣAX∗ΣAt∗/
σX

ΣAZ∗
σZ

X
t
/ Z
X∗× f
t∗×f /
εX

Z∗× f
εZ

A∗X
A∗t
/ A∗Z
It is easy to see that this deﬁnes a category, one I shall denote by Pf(C).

3.3. ΠW-PRETOPOSES AS EXACT COMPLETIONS
45
Deﬁnition 3.3.11 A map t: x
/ z in Pf(C) is said to be a weak Pf-substructure
map, if for the pullback L in this diagram in C/A:
L
p0
/
p1

Z∗× f
εZ

A∗X
A∗t
/ A∗Z
the following is a weak simple product diagram:
X∗× f
αX
/
t∗×f
%K
K
K
K
K
K
K
K
K
K
L
p0

Z∗× f
where αX = ⟨(t∗× f), εX⟩.
Before I can deﬁne weak W-types, I ﬁrst have to deﬁne the notion of a weak
Pf-algebra.
Deﬁnition 3.3.12 A weak Pf-algebra is a Pf-structure
x = (X, X∗, σX, εX)
such that X∗is a weak version of the exponential (A∗X)f in C/A with εX as weak
evaluation map. The morphisms of weak Pf-algebras are simply the morphisms of Pf-
structures. (So the category of weak Pf-algebras is a full subcategory of the category
of Pf-structures.)
Deﬁnition 3.3.13 A morphism t = (t, t∗: x
/ z) is a weak Pf-subalgebra, if it is a
weak Pf-substructure and both x and z are weak Pf-algebras.
It would have been enough to require that z is weak Pf-algebra, in view of the
following easy lemma.
Lemma 3.3.14 If t: x
/ z is a weak Pf-substructure map and z is a weak Pf-
algebra, then so is x.
And ﬁnally:
Deﬁnition 3.3.15 A weak W-type for f is a weak Pf-algebra v with two properties:
(i) its structure map σV is an isomorphism; (ii) every weak Pf-subalgebra i: x
/ v
has a section.

46
CHAPTER 3. EXACT COMPLETION AND GLUEING
The second property (ii) is supposed the be a weakening of the property of having no
proper subalgebras. Although very technical, I would like to stress that the property
is precisely what one would expect, in that it is the strong property with unique-
ness clauses dropped and subobjects replaced by “weak subobjects” or “proofs” (see
above).
In the deﬁnition, it would have been suﬃcient to require that the structure map
σV is monic, because of the following lemma:
Lemma 3.3.16 If w = (W, W ∗, σW, εW) is a weak Pf-algebra for some f in a carte-
sian category C with weak dependent products with the property that every weak Pf-
subalgebra t: x
/ w has a section, then the structure map σW has a section.
(For those who know how to derive Lambek’s result concerning initial algebras, prov-
ing this lemma should be easy.)
Lemma 3.3.17 Let C be a locally cartesian closed category.
A W-type Wf for a
morphism f: B
/ A is also a weak W-type for f.
Proof. It is easy to see that Wf can be considered as a weak Pf-algebra w. Then the
ﬁrst condition for being a weak W-type is certainly satisﬁed, because sup: PfWf
/ Wf
is an isomorphism. To verify the second condition, let x = (X, X∗, σX, εX) be any
weak Pf-algebra and t = (t, t∗): x
/ w be a weak Pf-subalgebra morphism in C. Be-
cause t is a weak Pf-subalgebra, there is a morphism r: (A∗X)f
/ X∗in C/A such
that t∗r = (A∗t)f. Now (X, σXΣAr: PfX
/ X) is a Pf-algebra and t is a morphism
of Pf-algebras from this algebra to Wf. Hence t has a section u in the category of
Pf-algebras. Then s = (u, r(A∗u)f) is a section of t.
□
Deﬁnition 3.3.18 A cartesian category C is called a weak ΠW-pretopos, if it has
ﬁnite disjoint and stable sums, weak dependent products, a weak natural number
object and weak W-types for all morphisms.
Now the main theorem of this Section has a precise meaning.
Theorem 3.3.19 (= Theorem 3.3.1.) If C is a weak ΠW-pretopos, then Cex is a
ΠW-pretopos.
To prove this theorem, it suﬃces to show that Cex has W-types for all maps lying
in the image of y (proof: use the remark before Lemma 3.1.6 to see that these are
choice maps and then apply Theorem 3.2.2). So the main theorem will follow from:
Proposition 3.3.20 Let C be a cartesian category with ﬁnite disjoint and stable
sums, weak dependent products and a weak natural number object. If C has a weak
W-type for a map f in C, then Cex has a genuine W-type for the map yf.

3.3. ΠW-PRETOPOSES AS EXACT COMPLETIONS
47
To prove Proposition 3.3.20, I will make use of Theorem 3.2.3. What I show is
that if w = (W, W ∗, σW, εW) is a weak W-type in C for a map f: B
/ A, then yW
has the structure of a Pyf-coalgebra in Cex, with the special properties formulated in
Theorem 3.2.3. This is established by the following sequence of lemmas.
Warning 3.3.21
In the remainder of this Section, I will drop the occurences of y;
I trust that the reader will not get confused.
From now on, suppose C is a cartesian category with ﬁnite disjoint and stable
sums, weak dependent products and a weak natural number object, and suppose that
w = (W, W ∗, σW, εW) is a weak W-type for a map f: B
/ A in C.
Lemma 3.3.22 The unique map q: W ∗
/ (A∗W)f in Cex/A such that
W ∗× f
q×f
/
εW
%J
J
J
J
J
J
J
J
J
J
(A∗W)f × f
ev
xpppppppppp
A∗W
commutes is a cover.
Proof. Since w is a weak Pf-algebra, one knows that W ∗is a weak version of (A∗W)f
in C/A. One can now deﬁne the equivalence relation
Ra = { (g, h) ∈W ∗
a × W ∗
a | ∀b ∈f −1(a): εW(g, b) = εW(h, b) }
on W ∗
a (a ∈A) in Cex/A. It is not diﬃcult to see that the quotient W ∗/R in Cex/A
is a strong version of the exponential (A∗W)f. So q is (up to iso) the quotient map
and hence a cover.
□
This establishes that W has the structure of a Pf-coalgebra in Cex, with an epic
structure map
n: W
σ−1
W / / ΣAW ∗ΣAq / / PfW = ΣA(A∗W)f.
Notice that w is also a Pf-structure in Cex, via y.
Lemma 3.3.23 If r = (R, R∗, σR, εR) is a Pf-structure in Cex and t: r
/ w is a
weak Pf-substructure map, then t has a section in Pf(Cex).
Proof. Consider the pullback L in Cex/A in the diagram
L
p0
/
p1

W ∗× f
εW

A∗R
A∗t
/ A∗W

48
CHAPTER 3. EXACT COMPLETION AND GLUEING
Since t is a weak Pf-substructure map, the following is a weak simple product dia-
gram:
R∗× f
αR
/
t∗×f
%L
L
L
L
L
L
L
L
L
L
L
p0

W ∗× f
where αR = ⟨(t∗× f), εR⟩.
Let ξ: K
/ R be a cover by an object in the image of y. Now consider the following
two pasted pullback diagrams:
L′
l0
/
l1

L
p0
/
p1

W ∗× f
εW

A∗K
A∗ξ
/ A∗R
A∗t
/ A∗W
Since the objects K, W and W ∗× f lie in the image of y, and since this functor
preserves pullbacks, I may assume that L′ also lies in the image of y.
Construct the following pullback:
L′′
j0
/
j1

L′
l0

R∗× f
αR / L
And construct the strong version of Ππ0(j1) in Cex/A (where π0 is the projection
R∗× f
/ R∗). This means that one has an object K∗
0 with maps ξ∗
2: K∗
0
/ R∗and
αK0: K∗
0 × f
/ L′′ such that
K∗
0 × f
αK0
/
ξ∗
2×f
%K
K
K
K
K
K
K
K
K
K
L′′
j1

R∗× f
is a simple product diagram.
It is not hard to verify that
K∗
0 × f
j0αK0
/
(t∗ξ∗
2)×f
L
L
L
%LLLL
L′
p0l0

W ∗× f
is a weak simple product diagram. Now let ξ∗
1: K∗
/ K∗
0 be a cover by an element
in the image of y. This implies that
K∗× f
αK
/
(t∗ξ∗)×f
L
L
L
L
%L
L
L
L
L′
p0l0

W ∗× f
(3.5)

3.3. ΠW-PRETOPOSES AS EXACT COMPLETIONS
49
with αK = j0αK0(ξ∗
1×f) and ξ∗= ξ∗
2ξ∗
1, can be seen as a weak simple product diagram
in C/A.
Using the fact that K∗is projective, one constructs a map σK making
ΣAK∗ΣAξ∗/
σK

ΣAR∗
σR

K
ξ
/ / R
commutative. This means that one has a Pf-structure k = (K, K∗, σK, εK = l1αK) in
Cex, that can also be seen as a Pf-structure in C, and a Pf-structure map ξ = (ξ, ξ∗)
in Cex. Now tξ can be seen as a Pf-structure map in C, and it is actually a weak
Pf-substructure map in C (since (3.5) is a weak simple product diagram). Therefore
k can be seen as a weak Pf-algebra in C, and since w is a weak W-type in C, one has
a Pf-structure map s′ such that (tξ)s′ = 1W in Pf(C) and Pf(Cex). So s = ξs′ is a
Pf-structure map in Cex that is a section of t.
□
Corollary 3.3.24 Let R ⊆W be a subobject in Cex and assume that the following
statement holds in the internal logic of Cex:
∀w ∈W ( If n(w) = (a, t) and ∀b ∈f −1(a): tb ∈R , then w ∈R ).
(3.6)
Then R = W as subobjects of W.
Proof. Deﬁne the following object in Cex/A: for any a ∈A
R∗
a = { τ ∈W ∗
a | ∀b ∈f −1(a): projW(εW(τ, b)) ∈R }.
Or, equivalently:
R∗
a = { τ ∈W ∗
a | ∀b ∈f −1(a): qa(τ)(b) ∈R }.
The validity of statement (3.6) implies that for the inclusion map j∗: R∗
/ W ∗,
σWΣAj∗factors through R. For if τ ∈R∗
a, write w = (σWΣj∗)(τ). Since n(w) =
(qΣj∗)(τ) = (a, q(τ)), q(τ)(b) ∈R for all b ∈f −1(a), and so w ∈R. Hence there is a
map σR making
ΣR∗
Σj∗/
σR

ΣW ∗
σW

R
j
/ W
commute. By the ﬁrst deﬁnition of R∗, the map εW(j∗× f) factors through A∗R, so
one has a map εR making
R∗× f
j∗×f /
εR

W ∗× f
εW

A∗R
A∗j
/ A∗W

50
CHAPTER 3. EXACT COMPLETION AND GLUEING
commute. So r = (R, R∗, σR, εR) is a Pf-structure in Cex and j = (j, j∗) is a Pf-
structure map. It is actually a weak Pf-substructure map, so j has a section s: w
/ r.
This implies that j is iso, and R = W as subobjects.
□
This completes the proof of the main result, Theorem 3.3.1.
3.4
More examples of ΠW-pretoposes
I have identiﬁed a categorical structure, that of a weak ΠW-pretopos, whose exact
completion always is a ΠW-pretopos. Using this, I give several more examples of ΠW-
pretoposes. One of them is what one might call a “predicative realisability topos”,
which is analogous to the realisability toposes in topos theory.
Exact completion of an ML-category 3.4.1
Any ML-category C is a weak ΠW-
pretopos. It is clear that a category that has genuine dependent products, also has
weak dependent products, and in Lemma 3.3.17, I also showed that it has all weak
W-types. Therefore:
Theorem 3.4.2 The exact completion Cex of an ML-category C is again an ML-
category. Moreover, the embedding y: C
/ Cex is a morphism of ML-categories.
Proof. That Cex is an ML-category is a direct application of Theorem 3.3.1. Of
course, y is cartesian (it always is), but it also preserves the sums and the dependent
products by Proposition 3.3.2 and Remark 3.3.6. It remains to check to y preserves
W-types.
Because y preserves Π, it is clear that whenever W is the W-type for a morphism
f: B
/ A in C, yW is also an algebra for Pyf in Cex. It is weakly initial for the
following reason: when X is an object with a Pyf-algebra structure t: PyfX
/ X,
cover X with a projective Y via some map q: Y
/ X. Since PyfY is again projective
(because it can be computed in C), the following diagram can be ﬁlled:
PyfY
Pyfq
/

PyfX
t

Y
q
/ / X.
Therefore Y has the structure of a Pf-algebra in C and there exists a Pf-algebra
morphism p: W
/ Y . Then qp is a Pyf-algebra morphism in Cex.
But then yW is initial, because it possesses no non-trivial Pf-algebra endomorphisms.
For if m: yW
/ yW is a Pyf-algebra morphism in Cex, m is also a Pf-algebra mor-
phism in C, since y is full and faithful. Therefore m is the identity on yW. This
is suﬃcient to prove that yW is initial, because whenever s, t: yW
/ X are two

3.4. MORE EXAMPLES OF ΠW-PRETOPOSES
51
Pf-algebra morphisms, their equaliser i: E
/ yW is also a Pf-algebra, with i pre-
serving this structure. Because yW is weakly initial, there is a Pf-algebra morphism
k: yW
/ E. So ik is a Pf-algebra endomorphism on yW, hence the identity. There-
fore E = yW as subobjects of yW and s = t.
□
This has several consequences.
First of all, the exact completions of all the ML-
categories discussed in Chapter 1 are ΠW-pretoposes. In general, it shows that it is
not a serious loss of generality to require predicative toposes to be exact. The reason
for including it is that exactness is very useful in obtaining models of set theory.
Prima facie this might look unnecessarily restrictive, but I believe that this result
shows that this is not so. In particular, it shows that there is no reason not to develop
a predicative theory analogous to topos theory only for ΠW-pretoposes and not for
general ML-categories, as I am doing in these Chapters.
Secondly, this theorem also shows that ΠW-pretoposes are closed under exact com-
pletion. But beware, the inclusion y will rarely be a morphism of ΠW-pretoposes.
In that case y: C
/ Cex would be exact, which can only happen when all objects in
C are projective and C is its own exact completion.
Finally, since the exact completion of a topos (with nno) is seldom again a topos, but
it is a ΠW-pretopos, there are many examples of ΠW-pretoposes that are not toposes.
It also shows that there is a closure property of “predicative toposes” that has no
analogue in the topos-theoretic case. This will be exploited in the next Section.
Realisability toposes 3.4.3
This example is basically a warm-up exercise for the
following one.
I am going to prove that the realisability topos RT(Q) is a ΠW-
pretopos.
The point is that I try not to rely on the fact that RT(Q) is a topos
with nno, but instead try to give a predicative proof that admits relativisation to a
ΠW-pretopos. But that is the next example.
So let Q be a pca with underlying set Q. A partitioned assembly (over a Q in Sets)
consists of a set X together with a morphism X
/ Q. A morphism of partitioned
assemblies from [−]X: X
/ Q to [−]Y : Y
/ Q is a function f: X
/ Y for which
there exists an element r ∈Q such that:
∀x ∈X: r · [x]X ↓and r · [x]X = [f(x)]Y .
This deﬁnes a category Pasm(Q), which, I claim, is a weak ΠW-pretopos.
It is readily seen to be a full subcategory of the category Asm(Q). The ﬁnite limits
and sums are computed as in this category. To be more explicit, assume that the
conventions for pcas as explained in Appendix C are in place. In particular, assume
one has chosen a pairing operator j with projections j0 and j1 and a set C of Church
numerals, which will simple be denoted by the standard natural numbers. A product
(X, [−]X) × (Y, [−]Y ) would then be constructed by taking X × Y as underlying set,
where a pair (x, y) is realised by ⟨[x]X, [y]Y ⟩. A sum (X, [−]X) + (Y, [−]Y ) has as
underlying set X + Y , where x is realised by ⟨0, x⟩and y by ⟨1, y⟩.

52
CHAPTER 3. EXACT COMPLETION AND GLUEING
If (X, [−]X) and (Y, [−]Y ) are partitioned assemblies, a weak version of XY is the
following: F = {(f, t) ∈XY × Q | t tracks f}.
So F consists of pairs (f, t) such
that for all x ∈X, the expression t · [x]X is deﬁned and its value equals [f(x)]Y .
The map [−]F: F
/ Q is given by the second projection and the evident evaluation
morphism F ×Y
/ X is tracked by the element in Q coding application. To see that
this is indeed the weak exponential, let r be the realiser of some H: Z × Y
/ X in
Pasm(Q). The transpose of H in Sets, l: Z →XY , extends to a morphism h: Z →F
in Pasm(Q) by sending z to (l(z), λn ∈Q.r · ⟨[z], n⟩).
(I will refer to the weak
exponentials constructed in this fashion as the “canonical” weak exponentials.)
More or less the same argument will establish that Pasm(Q) has weak dependent
products.
Let me just give the construction.
To construct the weak dependent
product of c: C
/ J along t: J
/ I one sets Wi, for every i ∈I, to be as follows:
{ (f, af, ai) ∈CJi × Q × Q | f is a section of c, af realises f and ai realises i }
The morphism W
/ Q is given by projection onto the last two coordinates (suitably
coded). The morphism ε is deﬁned on a j ∈J by sending (f, af, ai) ∈t∗Wi (where
i = t(j)) to f(j). (I will refer to the weak dependent products constructed in this
fashion as the “canonical” weak dependent products.)
Finally, the construction of the weak natural number object in Pasm(Q) is easy: it
is simply the set C of all Church numerals together with the inclusion of C in Q.
Weak W-types are constructed as follows. Recall the construction of real W-types in
Asm(Q) via the notion of a decoration. As I pointed out, a morphism f: B
/ A of
partitioned assemblies can also be regarded as a morphism of assemblies, and therefore
one can associate the set of decorations, a particular set of elements in Q, to every
well-founded tree w in the W-type associated to the underlying map of f in set. The
weak W-type associated to f is now the set of decorated trees, pairs (w, a) where a is
a decoration of the tree w, together with the projection on the second coordinate. A
proof of this claim will follow later.
An immediate corollary is that the exact completion of Pasm(Q) is a ΠW-pretopos.
Assuming the axiom of choice, one can prove this is a topos, in fact it is the realisability
topos on Q (see [77]), so in that case this is something that is well-known. In case
one is unwilling to assume the axiom of choice, that it is a ΠW-pretopos seems to be
the best one can say.
Intermezzo: W-types in realisability toposes 3.4.4
Since, under the assump-
tion of the axiom of choice, the realisability topos on a pca is the exact completion
of its full subcategory of partitioned assemblies, one can use the theory developed in
this Chapter to give a concrete description of W-types in realisability toposes. This
has been worked out in a small note by Claire Kouwenhoven-Gentil and me.
Since RT(Q) is the exact completion of Pasm(Q), every object in RT(Q) is covered
by a partitioned assembly (in fact, (X, =) is covered by {(x, n) ∈X × Q | n ∈E(x)}
with second projection). The partitioned assemblies are also internally projective and

3.4. MORE EXAMPLES OF ΠW-PRETOPOSES
53
maps between partitioned assemblies are choice maps in RT(Q). This implies that for
any morphism f: B
/ A, there exists a choice map φ: B′
/ A′ between partitioned
assemblies such that
B′
{−} / /
φ

B
f

A′
{−}
/ / A
is a quasi-pullback.
By Theorem 3.2.2, given such a square, W: = Wf can be constructed as a subquo-
tient of W ′: = Wφ. More precisely, consider the following relation on W ′, deﬁned
inductively in the internal logic by: supατ ∼supα′τ ′ iﬀ
{α} = {α′} ∧∀β ∈φ−1(α), ∀β′ ∈φ−1(α′): {β} = {β′} →τβ ∼τ ′β′.
∼is symmetric and transitive. One now constructs W by considering the reﬂexive
elements and dividing out by the equivalence relation ∼.
Besides, the structure map s: Pf(W)
/ W is the unique arrow making the following
diagram commute:
Pf(W)
s

R∗
q∗
oo
/
/
sup

Pφ(W ′)
sup

W
R
q
oo
/
/ W ′.
Here R is the object of reﬂexive elements, q the quotient map and q∗is deﬁned on a
pair (α, τ: B′
α →W ′) with supατ ∈R as the pair (a, t), with a = {α} and t: Ba →W
deﬁned by t({β}) = [τ(β)] (which is well-deﬁned, as supατ ∈R).
Consider the following object in that category in RT(Q):
(WSets(φ), ∼),
where φ is as above, and r ⊢w ∼w′ for w = supατ and w′ = supα′τ ′, if and only if
r = ⟨r0, r1, r2⟩is such that the following hold:
• r0 ⊢Ew ∧Ew′.
• r1 ⊢a = a′.
• for all β, β′, m such that m ⊢β ∈φ−1(α)∧β′ ∈φ−1(α′)∧b = b′, r2 ·m is deﬁned
and r2 · m ⊢τβ ∼τ ′β′.
In these conditions, a = {α}, a′ = {α′}, b = {β}, b′ = {β′} and Ew is the set of
decorations of w.
Corollary 3.4.5 The object under consideration is the W-type for f in RT(Q).

54
CHAPTER 3. EXACT COMPLETION AND GLUEING
Proof. From Chapter 2, one knows how to compute W-types for φ in the categories
of assemblies or in the realisability topos. Then the proof consists in rewriting in
terms of realisers the description given above in terms of the internal logic of RT(Q).
□
Predicative realisability toposes 3.4.6
One can relativise the preceeding exam-
ple to a ﬁxed ΠW-pretopos E, which will then act as a kind of predicative metatheory.
But ﬁrst, one has to agree on a notion of an internal pca in E. The notion will have
to be more stringent than might be expected at ﬁrst, in order to circumvent problems
related to choice. What I will need is that the elements of the pca that are required
to exist in the condition of combinatory completeness are given as a function of the
initial data (by a morphism in E). For this it suﬃces to assume that the combinators
k and s are given as global elements (morphisms 1
/ Q).
Then the deﬁnition of a partitioned assembly can go through as follows: a partitioned
assembly over an internal pca Q in a ΠW-pretopos E consists of an object X in
E together with a morphism [−]X: X
/ Q. A morphism of partitioned assemblies
f: (X, [−]X)
/ (Y, [−]Y ) is a morphism f: X
/ Y for which there exists a global
element2 r: 1
/ Q such that:
∀x ∈X: r · [x]X ↓and r · [x]X = [f(x)]Y
holds in the internal logic of E. As usual, r is said to track or realise f.
The construction of the ﬁnite limits, ﬁnite sums and weak dependent products is
the same as in the more speciﬁc case of the previous example. That it has weak
W-types is far from obvious. One somehow needs to be able to deﬁne the notion of a
decoration predicatively, which is possible by giving a key rˆole to the notion of path.
Deﬁning decorations will thereby inevitably become a rather technical exercise, but
it can done, as I will now show.
Suppose f is a morphism in Pasm(Q).
Now ﬁx a tree w ∈W(f).
A function
κ: Pathsw
/ Q is called a decoration of w, if for any path σ ending with the subtree
w′ = supa(t), one has that κ(σ) codes a pair ⟨n0, n1⟩where n0 equals [a] and n1 has
the property that
∀b ∈f −1(a): n1 · [b] is deﬁned and is equal to κ(σ ∗⟨b, tb⟩).
Observe that there is a lot of redundancy in this deﬁnition. In fact, all the information
is already contained in the element κ(⟨w⟩) ∈Q. One might call the element κ ∈
Q a decoration of w if for every path σ of length l, say, there exists a function
c: {0, 2, . . . , l −1}
/ Q such that (1) c(0) = κ; (2) for any even m < l −1, c(m)
codes a pair ⟨n0, n1⟩such that (a) n0 = [ρσ(m)] and (b) n1 · [σ(m + 1)] is deﬁned and
2It is necessary to require the existence of a global element, rather than the existence of such
an r ∈Q in the internal logic of E, for otherwise the resulting category would not have weak
exponentials.

3.4. MORE EXAMPLES OF ΠW-PRETOPOSES
55
equals c(m+2). Notice that for ﬁxed κ and σ, a function c having these properties, if
it exists, is necessarily unique: κ determines c(0) by (1) and c(m) determines c(m+2)
by (2b). For this reason, I may write cσ, whenever κ is understood.
So one has a notion of decoration in the “functional” and the “elementary” sense.
The numerical deﬁnition of a decoration may contain less redundancy, but is, I feel,
somewhat opaque. It is convenient to have both perspectives available and I will
make use of both of them. (That they are indeed equivalent, as I am suggesting, is
something one may see as follows: every decoration κ in the functional sense induces
one in the elementary sense by taking κ(⟨w⟩). Then the function cσ for a path σ is
given by cσ(m) = κ⟨σ(0), . . . σ(m)⟩. Conversely, because c is a function of σ, one can
put κ(σ) = cσ(l −1).)
A pair v = (w, κ) ∈W(f) × Q such that κ is a decoration of w is called a decorated
tree. Furthermore, v′ = (w′, κ′) will be called a decorated subtree of v = (w, κ) if
there is a path σ in Pathsw, of length n say, such that σ(n −1) = w′ and κ′ = κ(σ).
(In the equation κ′ = κ(σ), κ′ is a decoration in the elementary sense and κ is a
decoration in the functional sense. Here one clearly sees it pays oﬀto have both
perspectives available.) One might call v′ a proper decorated subtree, if the length n
can be chosen to be bigger than 1. I will denote the collection of decorated subtrees of
v by DSubTrv. One again sees that the notion of a decorated subtree is reﬂexive and
transitive, and that there are immediate decorated subtrees of (supa(t), κ), namely
the (tb, κ⟨supa(t), b, tb⟩)’s (b ∈f −1(a)). These are obviously proper.
After these preliminaries, the weak W-types in Pasm(Q) can quickly be constructed.
Set
V = { v = (w, κ) ∈W(f) × Q | v is a decorated tree }
This is an object in Pasm(Q) by deﬁning [−]V : V
/ Q to be the second projection.
Let V ∗be the “canonical” weak version of V f in the slice over A, so:
V ∗
a = { (t, (n0, n1)) ∈V f−1(a) × P | n1 tracks t and n0 = [a] }.
In more detail: (t, (n, m)) is in V ∗
a if m = [a] and n · [b] is deﬁned and equal to the
“decoration-component” of t(b) for every b ∈f −1(a). (Now εW is, of course, the
corresponding weak evaluation.)
The morphism σV : ΣAV ∗
/ V is deﬁned by sending (t, (n, m)) ∈V ∗
a to the pair
(supa(t), (n, m)), where the pair (n, m) is suitably coded. (The reader should verify
that this pair consists of a tree together with a decoration for this tree, and that σV
is tracked by the identity, basically.)
Observe that σV is actually an isomorphism. The unique element τ such that σ(τ) =
v = (w = supa(t), κ) is ((a, λb ∈f −1(a).(tb, κ(⟨w, b, tb⟩))), κ).
This completes the construction of the quadruple v = (V, V ∗, σV , εV ). That it is a
weak Pf-algebra is immediate by the construction. That it is the weak W-type is not
easy to show, but it follows from the following sequence of lemmas.
I have to show that every weak Pf-subalgebra morphism i: x →v has a section. So
suppose one has a weak Pf-algebra x = (X, X∗, σX, εX), together with a weak Pf-
subalgebra map i: x
/ v. If L = (V ∗× f) ×V X and if p0 is the map L
/ V ∗× f,

56
CHAPTER 3. EXACT COMPLETION AND GLUEING
one may assume that i∗: X∗
/ V ∗is the “canonical” weak dependent product of p0
along the projection V ∗× f
/ V ∗constructed above with εX the “canonical” weak
evaluation map, in view of the following lemma:
Lemma 3.4.7 Let a weak Pf-algebra x = (X, X∗, σX, εX) together with a weak Pf-
subalgebra morphism i: x
/ v in PASL(P) be given.
Now there exists a weak
Pf-algebra z = (Z, Z∗, σZ, εZ) with a weak Pf-subalgebra morphism j: z
/ v where
j∗: Z∗
/ V ∗is the canonical weak dependent product of p0 along the projection Z∗×
f
/ Z∗and εZ the canonical weak evaluation map, together with a weak Pf-algebra
morphism k: z
/ x.
Proof. Suppose a weak Pf-algebra x = (X, X∗, σX, εX) is given together with a weak
Pf-subalgebra morphism i: x
/ v. Now put Z = X and j = i. Now let j∗: Z∗
/ V ∗
be the canonical weak dependent product of p0 along the projection V ∗× f
/ V ∗
and let εZ be the canonical weak evaluation map. Let k: Z
/ X be the identity.
Because X∗is a weak dependent product of p0 along the projection V ∗× f
/ V ∗
there exists a morphism k∗: Z∗
/ X∗such that εX ◦(k∗× f) = k ◦εZ. Now set
σZ = σX ◦k∗.
Now z = (Z, Z∗, σZ, εZ) is a canonical weak Pf-subalgebra, with
j = (j, j∗) as weak Pf-subalgebra morphism. Furthermore, k = (k, k∗) is a weak
Pf-algebra morphism.
□
So for a given τ in V ∗, one may assume that X∗
τ is deﬁned as
{(h ∈Lf, nh ∈Q, nτ ∈Q) | (p0h)(−) = (τ, −), nh realises h and nτ realises τ}.
Or, equivalently, deﬁned as
{(h ∈Xf, nh ∈Q, nτ ∈Q) | ih = εW(τ, −), nh realises h and nτ realises τ}.
The latter will be my working deﬁnition.
After making this simplifying assumption, one chooses an s: 1
/ Q such that s tracks
σX and constructs a solution r of the recursion equation:3
r · j(n0, n1) = s · j(n0, H(r, n1))
(here H is the realiser of the function yielding the code of the composition of two
elements).
The idea behind the construction of the Pf-algebra morphism d: v
/ x that is going
to be a section of i is essentially the same as that behind the construction of the
Pf-algebra morphism in Theorem 2.1.5, although technical details will make this
construction more complex. Again, the crux is an appropriate notion of an attempt.
Here I deﬁne an attempt for some element v of V as a function g: DSubTrv
/ X such
that:
3It is here that one needs the strict requirements on the pca Q.

3.4. MORE EXAMPLES OF ΠW-PRETOPOSES
57
1. r · [v′]V = [g(v′)]X for all decorated subtrees v′ of v.
2. If v′ = σX(τ) is some decorated subtree of v, then the function h = g ◦τ is
tracked by m = H(r, j1[v′]) and satisﬁes the equation (σX)τ(h, (m, [τ])) = g(v′).
3. ig(v′) = v′ for all decorated subtrees v′ of v.
One should think of an attempt as a partial approximation of a section d of i. Once
the construction of d is completed, a attempt will turn out to be a restriction of d to
the subtrees of a particular element v of V .
Concerning attempts one proves the following two lemmas.
Lemma 3.4.8 Attempts are unique, so if g and h are two maps DSubTrv
/ X both
satisfying the deﬁning condition for attempts for an element v, then g = h.
Proof. Let
Q = { w ∈W | For all decorations κ of w, attempts for (w, κ) are unique. }
I use induction to show that Q = W: that will immediately imply the desired result.
Assume that w ∈W is such that for all proper subtrees w′ and decorations κ′ of w′
attempts are unique for (w′, κ′). Let κ be a decoration of w and notice that attempts
are unique for proper decorated subtrees of v = (w, κ), in particular for the immediate
subtrees vb = (tb, κ(⟨w, b, tb⟩)).
Suppose g is a attempt on v. The values of g on proper decorated subtrees of v are
uniquely determined by the fact that the restriction of a attempt to the decorated
subtrees of a particular decorated subtree is again a attempt for that decorated sub-
tree. In particular, the value of g on the immediate subtrees vb is ﬁxed. Then the
second element in the deﬁnition of a attempt determines the value of g on v itself.
This completes the induction step and the proof.
□
Lemma 3.4.9 Attempts exist for every v.
Proof. Let
Q = { w ∈W | For all decorations κ of w, attempts for (w, κ) exist. }
Again, by induction I show that Q = W, which will prove the lemma. Now, assume
that w ∈W is such that for all proper subtrees w′ and decorations κ′ of w′ attempts
exist for (w′, κ′). Let κ be a decoration of w and observe that (necessarily unique)
attempts gb exist for the immediate subtrees vb = (tb, κ(⟨w, b, tb⟩)).
If one wants to deﬁne a attempt g: DSubTrv
/ X on v, one is forced to put g(v′) =
gb(v′) if v′ is some decorated subtree of some vb with b ∈f −1(a) (this is independent
of the particular b involved in view of the previous lemma). It remains to deﬁne g(v).

58
CHAPTER 3. EXACT COMPLETION AND GLUEING
In the previous lemma, I already observed that I have no choice in how to deﬁne g(v).
Let me now be more detailed. Let
h = λb ∈f −1(a).gb(vb)
and m = H(r, j1κ). Write τ = (t, κ) ∈V ∗
a , so [τ] = κ. First I claim that m tracks h.
Let b ∈f −1(a) be arbitrary and calculate:
m · [b]
=
H(r, j1κ) · [b]
=
r · (j1κ · [b])
=
r · κ(⟨w, b, tb⟩)
=
r · [vb]
=
[g(vb)].
This means that (h, (m, [τ])) is actually a member of X∗
τ and one puts (is even forced
to put) g(v) = σX(h, (m, [τ]).
The map g: DSubTrv
/ X satisﬁes the second condition for being a attempt by
construction. What about the ﬁrst?
r · [v]
=
r · κ
=
s · (j0κ, H(r, j1κ))
=
s · [(h, ([a], m))]
=
[σX(h, ([a], m))]
=
[g(v)]
This being satisﬁed: what about the third?
ig(v)
=
i(σX)τ(h, (m, [τ]))
=
σV i∗
τ(h, (m, [τ]))
=
σV (τ)
=
v
So this one is also satisﬁed. This means that g has the required properties and hence
the induction step is completed. This also completes the proof.
□
Using these two lemmas, one can deﬁne the map d: V
/ X by setting d(v) = g(v),
where g is the unique attempt g: SubTrv
/ X. It is immediate from the proof of
the second lemma, where the attempts were actually built, that the natural number
r tracks s and that s extends to a weak Pf-algebra map d that is a section of i. So
v is a weak W-type for f in Pasm(Q).
In this way, within a predicative metatheory, one shows that the exact completion
of Pasm(Q) is a ΠW-pretopos. I would argue that this deserves to be called “the
predicative realisability topos on Q relative to E”, as it would yield RT(Q) in case E
= Sets. Then the argument shows that ΠW-pretoposes are closed under a notion of
realisability, like toposes.

3.4. MORE EXAMPLES OF ΠW-PRETOPOSES
59
Subcountables in the eﬀective topos 3.4.10
Again ﬁx a pca Q. A base on Q
is a subobject X ⊆Q. A morphism f: X
/ Y of bases is a function f: X
/ Y that
is tracked by an element r ∈Q in the sense that
∀x ∈X: r · x ↓and r · x = f(x).
This yields a category, which will be denoted by Base(Q). Bases can be identiﬁed
by partitioned assemblies (X, [−]X) where [−]X is injective, so where realisers are
unique. It is then rather easy to see that the category of bases inherits the weak
ΠW-pretopos structure of Pasm(Q).
In case Q = K1, and assuming the axiom of choice, the exact completion of the cate-
gory of bases is a subcategory of the eﬀective topos. Actually, it is the full subcategory
of subcountables, which is therefore a ΠW-pretopos (an object is subcountable, when
it is covered by a subobject of the natural number object).
Corollary 3.4.11 The subcountable objects in the eﬀective topos form a ΠW-preto-
pos.
Proof. To prove that the category of subcountables is the exact completion of the
category of bases, it suﬃces to show that both contain the same objects, as the exact
completion of the category of bases is also a full subcategory of the eﬀective topos,
since Eff = Pasmex and Base is a full subcategory of Pasm.
The natural number object N in Eff is the same as in assemblies: the underlying set
is that of the natural numbers, and n is realised solely by n, so En = {n}. As the
bases are precisely the ¬¬-closed subobjects of N, and objects in Baseex are covered
by bases, they are certainly subcountable. Conversely, a subobject of N in Eff can
be represented by a predicate P: N
/ PN such that ⊢P(x) →Ex. It is in Baseex,
because it can be obtained as the quotient:
{(x, m, m′) | m, m′ ⊢P(x)}
/
/ {(x, m) | m ⊢P(x)}.
A subcountable in Eff is represented by a symmetric, transitive relation on N in Eff,
more precisely, a function R: N × N
/ PN such that
⊢R(x, x) →Ex,
⊢R(x, y) →R(y, x),
⊢R(x, y) ∧R(y, z) →R(x, z).
Therefore it can be obtained as the following quotient of subobjects of N:
{(x, y) | R(x, y) ̸= ∅}
/
/ {x| R(x, x) ̸= ∅},
and hence it is in Baseex.
□
The subcountables in the eﬀective topos will in the next Chapter be exploited to give
a model of constructive-predicative set theory, that validates a principle incompatible
with the existence of the powerset of the natural numbers.

60
CHAPTER 3. EXACT COMPLETION AND GLUEING
It would be interesting to see to what extent the subcountables in the eﬀective topos
can be regarded as a kind of “modiﬁed PERs”. The point is that they are modiﬁed so
that the category will be exact, and it may therefore model quotient types in addition
to what is modelled by the category of ordinary PERs.
3.5
Glueing and the free ΠW-pretopos
This Section discusses another closure property of ΠW-pretoposes, one that they
share with toposes: closure under glueing. When combined with the theory of exact
completions, it yields a (to me) surprising fact concerning the free ΠW-pretopos.
Among other things, it shows that the free ΠW-pretopos cannot be the same as the
category of setoids.
Consider any cartesian functor F: E
/ F between ΠW-pretoposes. Out of these
data, one builds a new category Gl(F) as follows. Objects are triples (A, X, α), where
A and B are objects of E and F respectively and α: B
/ FA in F. Such triples are
also sometimes denoted by α: B
/ FA. Morphisms (A, X, α)
/ (B, Y, β) are pairs
(f: A
/ B, g: X
/ Y ) such that
X
α /
g

FA
Ff

Y
β
/ FB
commutes.
I will prove in an instant that the category Gl(F) so deﬁned is actually a ΠW-
pretopos. But more is true. There is an adjoint pair of functors
E
bF
1
⊥
Gl(F),
P
s
where P is a forgetful functor, sending a triple (A, X, α) to A, and bF sends an object
A to the triple (A, FA, 1FA). P will be a morphism of ΠW-pretoposes, while bF will
typically preserve whatever F preserves (so it will be at least cartesian). Clearly,
P bF ∼= 1.
Theorem 3.5.1 If F: E
/ F is a cartesian functor between ΠW-pretoposes, then
Gl(F) is a ΠW-pretopos. Furthermore, there is a pair of adjoint functors
E
bF
1
⊥
Gl(F),
P
s
where P is a morphism of ΠW-pretoposes, bF is cartesian, and P bF ∼= 1. In case F
is a morphism of ML-categories, so is bF.

3.5. GLUEING AND THE FREE ΠW-PRETOPOS
61
Proof. All the claims will follow from the concrete description of the ΠW-pretopos
structure of Gl(F).
That Gl(F) is cartesian is obvious, as ﬁnite limits can be computed componentwise
and they are preserved by F.
There is no diﬃculty in seeing that Gl(F) has ﬁ-
nite, disjoint sums, because the sum of X
/ FA and Y
/ FB is X + Y
/ FA +
FB
/ F(A + B). To see that Gl(F) is regular, observe the following facts, where
(f, g) is a morphism in Gl(F).
1. When f and g are both monic, so is (f, g).
2. When f and g are both covers, so is (f, g).
3. When (f, g) is a cover (monic), so are both f and g.
4. Gl(F) is regular.
1 is obvious, while 2 follows from Joyal’s result that covers in a regular category
are the coequalisers of their kernel pair (see Lemma A.3). Now one can see that
any morphism (f, g) can be factored as a cover followed by a mono, by doing this
componentwise. Since such factorisations are unique up to isomorphism, 3 follows. 4
is then immediate.
That Gl(F) is a pretopos follows from the fact that coequalisers of equivalence re-
lations can be computed componentwise, and that it has a natural number object
is also trivial (it is N
/ FN). To see that Gl(F) is a Π-pretopos, it is suﬃcient to
show that is a cartesian closed, because for any (A, X, α) in Gl(F), the slice category
Gl(F)/(A, X, α) is again a glueing category: it is Gl(G), where G is the composite:
E/A
FA / F/FA
α∗
/ F/X.
More explicitly, t: B
/ A is sent by G to the upper side of the pullback square:
GB
σX

Gt
/ X
α

FB
Ft
/ FA.
(3.7)
As the composite of two cartesian functors, G is cartesian as well.
Gl(F) is cartesian closed, because the exponential (A, X, α)(B,Y,β) is computed by ﬁrst
forming the pullback (θ is the obvious comparison map):
Z
γ

/ XY
αY

F(AB)
θ
/ FAFB
FAβ / FAY ,
when it will be (AB, Z, γ).

62
CHAPTER 3. EXACT COMPLETION AND GLUEING
It is more complicated to see that Gl(F) inherits W-types. First one should describe
polynomial functors for morphisms φ = (f, g): (B, Y, β)
/ (A, X, α) in Gl(F). Let
G: E/A
/ F/X be as above, and observe that there is a natural transformation
τC: G(PfC)
/ Pg(FC),
which is the composite of
G(PfC) = GΣA(C × A
/ A)(B
/ A)
/ ΣXG((C × A
/ A)(B
/ A))
/
ΣXG(C × A
/ A)G(B
/ A) = PGf(FC),
and the natural transformation PGf
/ Pg induced by the commuting triangle:
Y
g
!D
D
D
D
D
D
D
D

GB
Gf
/ X,
obtained from (3.7) (see [60], Section 4.2).
For any triple (C, Z, γ) in Gl(F), let
P C
g (Z, γ) be deﬁned by taking the pullback:
P C
g (Z)
/
δ

Pg(Z)
Pg(γ)

G(PfC)
/ Pg(FC).
P C
g (Z, γ) can be regarded as an object in F/(FPfC), by composing δ with σPfC. Pφ
computed on the triple (C, Z, γ) is now (PfC, P C
g Z, σPfCδ).
When W is the initial Pf-algebra in E, W ∼= PfW, so P W
g
is an endofunctor on
F/FW. In the terminology of Gambino and Hyland [33], P W
g
is a generalised poly-
nomial functor, hence has an initial algebra (V, ψ).
I claim that (W, V, ψ) is the
W-type for φ in Gl(F). It is a ﬁxpoint by construction, and it is not hard to see that
an extension of Theorem 2.1.5 will prove that it is initial.
□
The promised application to the free ΠW-pretopos is the following theorem. In
the remainder of the Section, write D for the free ML-category and E for the free
ΠW-pretopos.
Theorem 3.5.2 If B: D
/ E is the unique morphism of ML-categories from the free
ML-category to the free ΠW-pretopos, all the objects in the image of B are projective.
Proof.
The proof relies on the combination of Theorem 3.4.2 with the previous
theorem. Let E be the free ΠW-pretopos, and take its exact completion Eex. From
Theorem 3.4.2, one knows that y: E
/ Eex is a morphism of ML-categories. If one

3.5. GLUEING AND THE FREE ΠW-PRETOPOS
63
writes F for the ΠW-pretopos obtained by glueing along y, one obtains by the pre-
vious result a pair of adjoint functors
E
by
+
⊤
F,
P
k
where P is a morphism of ΠW-pretoposes, by is a morphism of ML-categories, and
P by ∼= 1. Since F is a ΠW-pretopos and E is initial among ΠW-pretoposes, there is
a morphism S: E
/ F of ΠW-pretoposes, such that also PS ∼= 1. If B: D
/ E is
the unique morphism of ML-categories from the free ML-category to the free ΠW-
pretopos, one also has byB ∼= SB.
It is easy to see that objects of the form byX are projective in F, because objects of
the form yX are, and y is full and faithful (also use the characterisation of covers
in Gl(F) given in the proof of the previous theorem). It is also not hard to that in
case SX is projective for an object X in E, X is itself projective, because S, as a
morphism of ΠW-pretoposes, preserves covers. Since objects in the image of B are
such objects, the statement of the theorem is proved.
□
What is most surprising (to me, at least) about this result is that it shows that
all higher types, like NN, are projective in the free ΠW-pretopos. What is not true,
however, is that NN is internally projective in the free ΠW-pretopos, as the following
result shows.
Proposition 3.5.3
1. If F is a Π-pretopos in which NN is internally projective,
then Church’s Thesis is false in the internal logic of F.
2. NN is not internally projective in the free ΠW-pretopos.
Proof. If NN is internally projective in a ΠW-pretopos F, its internal logic will model
HAω + AC1,0 + EXT. It is a well-known result by Troelstra [82] (see also [81]) that
this theory refutes Church’s Thesis.
Because the validity of statements in the internal logic is preserved by morphisms of
ΠW-pretoposes, validity of the negation of Church’s Thesis in the free ΠW-pretopos
would imply validity of the negation of Church’s Thesis in all ΠW-pretoposes. But
since Church’s Thesis is valid in the eﬀective topos, for instance, this is impossible.
Therefore NN is not internally projective in the free ΠW-pretopos.
□
Corollary 3.5.4 The following three ΠW-pretoposes are all diﬀerent:
• The free ΠW-pretopos E.
• The exact completion Dex of the free ML-category D.

64
CHAPTER 3. EXACT COMPLETION AND GLUEING
• The category Setoids.
Proof. This corollary is an immediate consequence of the following table:
Category
NN externally projective
NN internally projective
Setoids
No
No
E
Yes
No
Dex
Yes
Yes
The two bottom rows are consequences of the results obtained in this Chapter. The
entries for Dex follow immediately from Theorem 3.4.2 and Lemma 3.1.6, while the
previous two results give the entries for E.
The entries for the category of setoids are consequences of the following sequence of
facts. Among the setoids, there are the “pure types”, consisting of a type with its
intensional equality as equivalence relation. These pure types are projective. This
includes the pure type 1 = N1, which is the terminal object in the category of setoids.
So the terminal object in Setoids is projective, and hence the internal projectives are
also externally projective.
The object NN in Setoids is the type N →N together with the “extensional” equality
relation
Πn ∈N. Id(N, fn, gn).
This object is covered by the pure type N →N, so if it were projective, this cover
would have a section. This would imply that there is a deﬁnable operation s ∈(N →
N) →(N →N) such that the following types are provably inhabited:
Πf ∈N →N. EXTEQ(f, sf)
Πf, g ∈N →N. EXTEQ(f, g) →INTEQ(sf, sg),
where
INTEQ(f, g)
: =
Id(N →N, f, g)
EXTEQ(f, g)
: =
Πn ∈N. Id(N, fn, gn).
Such an s cannot exist, because if it would, one could decide extensional equality of
terms of type N →N, which is known to be impossible: for any two closed terms p, r
of type N →N, the type EXTEQ(p, r) is inhabited, iﬀINTEQ(sp, sr) is inhabited,
iﬀsp and sr are convertible, which is decidable (many thanks to Thomas Streicher
for helping me out on this). Therefore NN is not projective in Setoids, and, a fortiori,
not internally projective either.
□

Chapter 4
Algebraic set theory and CZF
This Chapter is meant to make good on the claim that ΠW-pretoposes form a natural
context for models of constructive-predicative set theories, like CZF.
Aczel’s set theory CZF is introduced in the ﬁrst Section.
CZF provides not
only a setting in which one can practice Bishop-style constructive mathematics in
manner very similar to ordinary mathematics, but it also has a precise justiﬁcation
as a constructive theory. In [2] (see also [3] and [4]), Aczel interpreted his theory in
Martin-L¨of type theory with W-types and one universe, a theory which is indisputably
constructive, and, in this sense, CZF has the best possible credentials for deserving
the epithet “constructive”.1
The connection with ΠW-pretoposes goes via algebraic set theory. Algebraic set
theory is a ﬂexible categorical framework for studying set theories of very diﬀerent
stripes. How this theory can be used to model CZF in ΠW-pretoposes is the subject
of Moerdijk and Palmgren’s article [61]. This will be recapitulated in Section 2.
In Section 3, I explain how a recent model of CZF discovered independently by
Streicher and Lubarsky falls within this framework. The model is then further in-
vestigated and shown to validate some interesting principles incompatible with either
classical logic or the powerset axiom.
4.1
Introduction to CZF
This Section provides an introduction to Aczel’s set theory CZF. A good reference
for CZF is [7].
Like ordinary formal set theory, CZF is a ﬁrst-order theory with one non-logical
symbol ϵ. But unlike ordinary set theory, its underlying logic is intuitionistic. To
1For the interpretation to work, the universe need not be closed under W-types. And one needs
only one W-type, which is then used to build a universe of well-founded sets.
65

66
CHAPTER 4. ALGEBRAIC SET THEORY AND CZF
formulate its axioms, I will use the following abbreviations:
∃xϵa (. . .)
: =
∃x (xϵa ∧. . .),
∀xϵa (. . .)
: =
∀x (xϵa →. . .).
Recall that a formula is called bounded when all the quantiﬁers it contains are of one
of these two forms. Finally, I write B(xϵa, yϵb) φ to mean:
∀xϵa ∃yϵb φ ∧∀yϵb ∃xϵa φ.
Its axioms are the (universal closures of) the following formulas, in which φ is
arbitrary, unless otherwise stated.
(Extensionality) ∀x (xϵa ↔xϵb) →a = b
(Pairing) ∃y ∀x (xϵy ↔(x = a ∨x = b))
(Union) ∃y ∀x (xϵy ↔∃z (xϵz ∧zϵa))
(Set Induction) ∀x (∀yϵx φ(y) →φ(x)) →∀x φ(x)
(Inﬁnity) ∃a (∃x xϵa ∧∀xϵa ∃yϵa xϵy)
(∆0-Separation) ∃y ∀x (xϵy ↔(φ(x) ∧xϵa)) for all bounded formulas φ not con-
taining v as a free variable
(Strong Collection) ∀xϵa ∃y φ(x, y) →∃b B(xϵa, yϵb) φ(x, y)
(Subset Collection) ∃c ∀z (∀xϵa ∃yϵb φ(x, y, z) →∃dϵc B(xϵa, yϵd) φ(x, y, z))
Set Induction is constructive version of the Axiom of Foundation (or Regularity
Axiom). Such a reformulation is in order, because the axiom as usually stated implies
the Law of Excluded Middle. Strong Collection can be considered as a strengthening
of the Replacement Axiom.
The Subset Collection Axiom has a more palatable
formulation (equivalent to it over the other axioms), called Fullness. Write mv(a, b)
for the class of all multi-valued functions from a set a to a set b, i.e. relations R such
that ∀xϵa ∃yϵb (a, b)ϵR (pairs of sets can be coded by the standard trick).
(Fullness) ∃z (z ⊆mv(a, b) ∧∀xϵmv(a, b) ∃cϵz (c ⊆x))
Using this formulation, it is also easier to see that Subset Collection implies Expo-
nentiation, the statement that the functions from a set a to a set b form a set.
In order to have a fully satisfactory theory of inductively deﬁned sets in CZF,
Aczel proposed to extend CZF with the Regular Extension Axiom.2
A set A is
2The extension is a good one in that the Regular Extension Axiom is validated by the interpreta-
tion of CZF in Martin-L¨of type theory with W-types and one universe closed under W-types. This
is a stronger type theory than the one needed for CZF proper, but still indisputably constructive.

4.2. INTRODUCTION TO ALGEBRAIC SET THEORY
67
called regular, when it is transitive, and for every Rϵmv(a, A), where aϵA, there is
a bounding set bϵA such that B(xϵa, yϵb) (x, y)ϵR. The Regular Extension Axiom
(REA for short) says:
(REA) ∀x ∃r (xϵr ∧r is regular)
For instance, this allows one to prove that, working inside CZF, the category of sets
has W-types (see [7]). In fact:
Theorem 4.1.1 The category of sets and functions of CZF + REA is a ΠW-
pretopos.
4.2
Introduction to algebraic set theory
Algebraic set theory, as introduced by Joyal and Moerdijk in their book [47], is a
ﬂexible categorical framework for studying formal set theories. The idea is that a
uniform categorical approach should be applicable to set theories with very diﬀerent
ﬂavours: classical or constructive, predicative or impredicative, well-founded or non-
well-founded, etcetera.
The approach relies on the notion of a small map. In a category, whose objects and
morphisms are thought of as general classes and functional relations (possibly of the
size of a class) or general sets and functions, certain morphisms are singled out because
their ﬁbres possess a special set-theoretic property, typically that of being relatively
small in some precise sense. One could think of being a set as opposed to being a
proper class, ﬁnite as opposed to inﬁnite, countable as opposed to uncountable, but
also of being a small type as opposed to a type outside a particular type-theoretic
universe.
The ﬂexibility of the approach resides in the fact that the axioms for the class of
small maps are not ﬁxed once and for all: these are determined by the particular set
theory or set-theoretic notion one is interested in. This is something we will actually
see, because in this thesis, two diﬀerent sets of axioms will be introduced. But in this
Chapter the axioms for the class of small maps I will work with are those of Moerdijk
and Palmgren in [61]. This choice is determined by two things: my interest in the
predicative-constructive set theory CZF and my wish to see the category of setoids
as a natural example.3
This Section recaps deﬁnitions and results from [61].
Let S be a class of maps in an ambient category E, which I assume to be a
ΠW-pretopos.
3For diﬀerent axiom systems, see [47], [9] and other references at the “Algebraic Set Theory”
website: http://www.phil.cmu.edu/projects/ast/. And also Chapter 6.

68
CHAPTER 4. ALGEBRAIC SET THEORY AND CZF
Deﬁnition 4.2.1 S is called stable if it satisﬁes the following axioms:
(S1) (Pullback stability) In a pullback square
D
/
g

C
f

B
p
/ A
(4.1)
g belongs to S, whenever f does.
(S2) (Descent) If in a pullback diagram as in (4.1), p is epi, then f belongs to S,
whenever g does.
(S3) (Sum) If two maps f: B
/ A and f ′: B′
/ A′ belong to S, then so does f +
f ′: A + A′
/ B + B′.
These axioms express that maps belong to S by virtue of the properties of their ﬁbres.
Deﬁnition 4.2.2 A class S is called a locally full subcategory, if it is stable and also
satisﬁes the following axiom:
(S4) In a commuting triangle
C
g
/
h
@
@
@
@
@
@
@
B
f
~~~~~~~
A
where f belongs to S, g belongs to S if and only if h does.
Remark 4.2.3 If (S1) holds and all identities belong to S, (S4) is equivalent to the
conjunction of the following two statements:
(S4a) Maps in S are closed under composition.
(S4b) If f: X
/ Y belongs to S, the diagonal X
/ X ×Y X in E/Y also belongs
to S.
When thinking in terms of type constructors, this means that (S4) expresses that
smallness is closed under dependent sums and (extensional) equality types. I will
actually require the class of small maps to be closed under all type constructors,
hence the next deﬁnition.
For any object X in E, I write SX for the full subcategory of E/X whose objects
belong to S. An object X is called small, when the unique map X
/ 1 is small.

4.2. INTRODUCTION TO ALGEBRAIC SET THEORY
69
Deﬁnition 4.2.4 A locally full subcategory S in a ΠW-pretopos E is called a class
of small maps, if for any object X of E, SX is a ΠW-pretopos, and the inclusion
functor
SX /
/ E/X
preserves the structure of a ΠW-pretopos.
Lemma 4.2.5 (See [61], Lemma 3.4.) A locally full subcategory S in a ΠW-pretopos
E is class of small maps iﬀit has the following ﬁve properties:
(F1) 1X ∈S for every object X in E.
(F2) 0
/ X is in S, and if Y
/ X and Z
/ X are in S then so is Y + Z
/ X.
(F3) For an exact diagram in E/X,
R
/
/
?
?
?
?
?
?
?
?
Y
/ /

Y/R
}zzzzzzzz
X
if R
/ X and Y
/ X belong to S then so does Y/R
/ X.
(F4) For any Y
/ X and Z
/ X in S, their exponent (Z
/ X)(Y
/ X) in E/X
belongs to S.
(F5) For a commutative diagram
B
f
/
 A
A
A
A
A
A
A
A
~~~~~~~~
X
with all maps in S, the W-type WX(f) taken in E/X (which is a map in E with
codomain X) belongs to S.
Deﬁnition 4.2.6 A stable class (locally full subcategory, class of small maps) S is
called representable, if there is a map π: E
/ U in S such that any map f: B
/ A
in S ﬁts into a double pullback diagram of the form
B
f

B′
/

o
E
π

A
A′
p
oo
/ U
where p is epi, as indicated.

70
CHAPTER 4. ALGEBRAIC SET THEORY AND CZF
Representability formulates the existence of a weak version of a universe. The
map π in the deﬁnition of representability is often called the universal small map,
even though it is not unique (not even up to isomorphism). In the internal logic of
E, representability means that a map f: B
/ A belongs to S iﬀit holds that
∀a ∈A∃u ∈U: Ba ∼= Eu.
In particular, it means that one can talk about “being small” in the internal logic of
E.
The axioms for a class of small maps that I have given so far form the basic
deﬁnition.
The deﬁnition can be extended by adding various choice or collection
principles. There is the collection axiom (CA) in the sense of Joyal and Moerdijk in
[47]:
(CA) For any small map f: A
/ X and epi C
/ A, there exists a quasi-pullback
of the form
B
/
g

C
/ / A
f

Y
/ / X
where Y
/ X is epi and g: B
/ Y is small.
As discussed in [61], the collection axiom can be reformulated using the notion of
a collection map. Informally, a map g: D
/ C in E is a collection map, whenever it is
true (in the internal logic of E), that for any map f: F
/ Dc covering some ﬁbre of g,
there is another ﬁbre Dc′ covering Dc via a map p: Dc′
/ Dc which factors through
f.
Deﬁnition 4.2.7 A morphism g: D
/ C in E is a collection map, when for any map
T
/ C and any epi E
/ T ×C D there is a diagram of the form
D

D ×C T ′

o
/ E
/ / T ×C D

/ D

C
T ′
o
/ / T
/ C
where the middle square is a quasi-pullback with an epi on the bottom, while the two
outer squares are pullbacks. A map g: D
/ C over A is a collection map over A, if
it is a collection map in E/A.
Observe that a collection map is a categorical notion, and does not refer to or depend
on a class of small maps.
Proposition 4.2.8 (See [61], Proposition 4.5.) A map D
/ C is a collection map
over C if, and only if, it is a choice map.

4.3. A REALISABILITY MODEL OF CZF
71
In case the class of small maps is representable, the collection axiom is equivalent
to stating that the universal small map π: E
/ U is a collection map.
(This is
imprecise, but in a harmless way: if one universal small map is a collection map, they
all are.)
In [61], Moerdijk and Palmgren work with a much stronger axiom: what they call
the axiom of multiple choice (AMC). Internally it says that for any small set B there
is a collection map D
/ C where D and C are small, and C is inhabited, together
with a map D
/ B making D
/ B × C into a surjection.
Deﬁnition 4.2.9 A class of small maps S satisﬁes the axiom of multiple choice
(AMC), iﬀfor any map B
/ A in S, there exists an epi A′
/ A and a quasi-
pullback of the form
D

/ B

C
/ / A′
/ / A
where D
/ C is a small collection map over A′ and C
/ A′ is a small epi.
Proposition 4.2.10 (See [61], Proposition 4.3.) The axiom of multiple choice im-
plies the collection axiom.
The idea of Moerdijk and Palmgren in [61] is to generalise Aczel’s interpretation of
CZF into Martin-L¨of type theory with W-types and one universe, to an interpretation
of CZF into any ΠW-pretopos E with a representable class of small maps, where one
expects to recover Aczel’s syntactic construction in case E is Setoids. In that light
one should see the following two results:
Theorem 4.2.11 (See [61], Section 12.) When intensional Martin-L¨of type theory
is equipped with W-types and one universe, the category of setoids is equipped with a
representable class of small maps satisfying (AMC).
Theorem 4.2.12 (See [61], Theorem 7.1.) Let E be a ΠW-pretopos equipped with a
representable class of small maps S satisfying (AMC). Then E contains a model of
the set theory CZF + REA.
4.3
A realisability model of CZF
To illustrate the framework of algebraic set theory, I will show here how the models
of CZF obtained by Streicher in [80] and by Lubarsky in [53] ﬁt into it. Actually, I
will show that the models are the same.

72
CHAPTER 4. ALGEBRAIC SET THEORY AND CZF
Using category theory and some known results on the eﬀective topos, it will be
an easy exercise to establish the validity of a lot of constructivist principles in the
model. Their collective consistency is new. Finally, I show that CZF is consistent
with a general uniformity principle:
∀x ∃yϵa φ(x, y) →∃yϵa ∀x φ(x, y),
which appears to be new.4
Our ambient category E is the eﬀective topos RT = Eff. Recall that a set is
called subcountable, when it is covered by a subset of the natural numbers. Since the
eﬀective topos is a topos with nno N, the notion also makes sense in the internal logic
of the eﬀective topos: Y is subcountable, when
∃X ∈PN ∃g: X
/ Y : g is a surjection.
Also recall that the eﬀective topos is the exact completion of its subcategory of
projectives, the partitioned assemblies, as discussed in the previous Chapter.
Lemma 4.3.1 The following are equivalent for a morphism f: A
/ B in Eff.
1. In the internal logic of Eff it is true that all ﬁbres of f are subcountable.
2. The morphism f ﬁts into a diagram of the following shape
Y × N
#G
G
G
G
G
G
G
G
G
X
o
o
/ /
g

A
f

Y
/ / B,
where the square is a quasi-pullback.
3. The morphism f ﬁts into a diagram of the following shape
Q × N
#F
F
F
F
F
F
F
F
F
P
o
o
/ /
g

A
f

Q
/ / B,
where the square is a quasi-pullback, P is a ¬¬-closed subobject of Q × N and
g is a choice map between partitioned assemblies.
4The model, and my results, are obviously related to earlier work by Friedman in [29], but
especially his unpublished work as reported in Myhill’s paper [62]. I must confess I ﬁnd it hard
to get a clear picture of Friedman’s work and therefore I am having diﬃculties in establishing its
precise relation to mine. Still, I think I can safely say that the set theories studied there are weaker
that CZF in not containing Subset Collection, there is no result on the regular extension axiom or
the presentation axiom, and the relationship to subcountable morphisms in the eﬀective topos.

4.3. A REALISABILITY MODEL OF CZF
73
Proof. The equivalence of 1 and 2 is a standard exercise in translating internal logic
into diagrammatic language, and vice versa. That 3 implies 2 is trivial.
2 ⇒3: Because every object is covered by a partitioned assembly, X can be covered
by a partitioned assembly Q. Now Q × N is also a partitioned assembly, since N
is a partitioned assembly and partioned assemblies are closed under products. Now
the subobject Z = Q ×Y X of Q × N can be covered by a ¬¬-closed subobject P of
Q × N. The idea is easy: the subobject Z ⊆Q × N can be identiﬁed with a function
Z: Q × N
/ PN such that there is a realiser for
⊢Z(q, n) →[q] ∧[n].
Then form P = { (q, n) | n1 ∈Z(q, n0) }, which is a partitioned assembly with
[(q, n)] = n, and actually a ¬¬-closed subobject of Q × N.
P covers Z, clearly.
The diagram
Z /
/ Q × N
P
OO
;
;w
w
w
w
w
w
w
w
does not commute, but composing with the projection Q × N
/ Q it does. (What I
am basically using here is Shanin’s Principle, a principle valid in the internal logic of
Eff, see [65], Proposition 1.7.) Finally, g: P ⊆Q × N
/ Q, as a morphism between
partitioned assemblies, is a choice map.
□
Let S be the class of maps having any of the equivalent properties in this lemma.
This class of maps was already identiﬁed by Joyal and Moerdijk in [47] and baptised
“quasi-modest”, but I prefer simply “subcountable”. Joyal and Moerdijk prove many
useful properties of these subcountable morphisms, but they are not put to any use
in [47]. Here I will show that it leads to a model of CZF, actually the same one as
contained in both [80] and [53].
First I want to prove that S is a class of small maps. To do so, it will be useful
to introduce the the category of bases over a partitioned assembly X. When X is a
partitioned assembly, consider the full subcategory BaseX of Eff/X consisting of the
¬¬-closed subobjects of X ×N
/ X. The point is that BaseX has the structure of a
weak ΠW-pretopos, and the inclusion of BaseX in Pasm/X preserves this structure.
(These are not exactly trivial, but entirely innocent generalisations of things we have
seen before.)
Lemma 4.3.2 The inclusion (BaseX)ex ⊆(Pasm/X)ex = Eff/X is an inclusion of
ΠW-pretoposes.
Proof. I will skip numbers of uninteresting details: the inclusion is exact, by con-
struction. That it preserves sums is easy to see. The inclusion of BaseX in Pasm/X
preserves weak Π, so the inclusion (BaseX)ex ⊆(Pasm/X)ex, preserves Π by con-
struction (of genuine Π in the exact completion out of weak Π in the original category).

74
CHAPTER 4. ALGEBRAIC SET THEORY AND CZF
Then it also preserves polynomial functors Pf and hence also W-types by yet another
application of Theorem 2.1.5, because subcountables are closed under subobjects. □
Proposition 4.3.3 The class S of subcountable maps is a class of small maps in
Eff.
Proof. That S is a locally full subcategory can be found in [47]. Now I use Lemma
4.2.5 to see that is a class of small maps.
That it satisﬁes (F1) and (F2) is trivial (and can also be found in [47]). It also
satisﬁes (F3); actually, it is easy to see that in any triangle where the top is epi
B
/ /
g
@
@
@
@
@
@
@
C
f
~~~~~~~
A
and g is in S, f is also in S.
To check (F4), assume Y
/ X and Z
/ X are in S. Both ﬁt into quasi-pullback
squares
P
/ /

Y

Q
/ / X
R
/ /

Z

S
/ / X,
where P
/ Q and R
/ S are morphisms in BaseR and BaseS, respectively, hence
choice maps.
Actually, one may assume Q = S and Q
/ X = S
/ X.
Then
(P
/ Q)(R
/ Q) is in (BaseQ)ex, hence in SQ. But (Y
/ X)(Z
/ X) is a subquo-
tient of this, hence in SX.
To check (F5), suppose f ﬁts into a commutative diagram
B
f
/
 A
A
A
A
A
A
A
A
~~~~~~~~
X
where all arrows are in S. Now X can be covered by a partitioned assembly Y via a
map
Y
p / / X,
in such a way that in Eff/Y, we have a quasi-pullback diagram
B′
g

/ / p∗B
p∗f

A′
/ / p∗A,

4.3. A REALISABILITY MODEL OF CZF
75
where B′
/ Y and A′
/ Y are in BaseX′.
By the previous lemma, Wg is in
(BaseX′)ex, hence in SX′. By (the proof of) Theorem 3.2.2, Wp∗f ∼= p∗Wf is a sub-
quotient of Wg, hence also subcountable. Then by stability of W-types and axiom
(S2), Wf is also subcountable.
□
But the class S has more properties:
Lemma 4.3.4 The class S also has the following properties:
(R) The class S is representable.
(F) All the monos belong to S.
(Q) In any triangle where the top is epi
B
/ /
g
@
@
@
@
@
@
@
C
f
~~~~~~~
A
and g is in S, f is also in S.
(AMC) The class S satisﬁes AMC.
Proof. Properties (R), (F), (Q) are all proved in [47]. That it satisﬁes (AMC) is
trivial: every f ∈S ﬁts into a quasi-pullback diagram
X
/ /
g

A
f

Y
/ / B,
where g: X
/ Y is a small choice map, hence a small collection map over Y (see
Proposition 4.2.8).
□
Since S is representable and also satisﬁes (AMC), we know by Theorem 4.2.12
that the eﬀective topos contains a model V of CZF + REA based on the class of
subcountable maps. In the remainder of this Chapter, I will study this model V . In
eﬀect, I will show that it validates the following list of principles. Since the set of
natural numbers ω is deﬁnable in CZF, I will freely use this symbol when formulating
these principles. I will also use 0 and the successor operation s.
Theorem 4.3.5 The following principles are valid in the model V :
(Full Separation) ∃y ∀x (xϵy ↔(φ(x) ∧xϵa)) for all formulas φ not containing v
as a free variable.

76
CHAPTER 4. ALGEBRAIC SET THEORY AND CZF
(All sets subcountable) All sets are subcountable.
(Non-existence of Pω) The powerset of the set of natural numbers does not exist.
(Axiom of Countable Choice) ∀iϵω ∃x ψ(i, x) →∃a, f: ω
/ a ∀iϵω ψ(i, f(i)).
(Axiom of Relativised Dependent Choice) φ(x0) ∧∀x (φ(x) →∃y (ψ(x, y) ∧
φ(y))) →∃a ∃f: ω
/ a (f(0) = x0 ∧∀i ∈ω φ(f(i), f(si))).
(Presentation Axiom) Every set is the surjective image of a base (see below).
(Markov’s Principle) ∀nϵω [φ(n) ∨¬φ(n)] →[¬¬∃n ∈ω φ(n) →∃nϵω φ(n)].
(Independence of Premisses) (¬θ →∃x ψ) →∃x (¬θ →ψ).
(Church’s Thesis) ∀nϵω ∃mϵω φ(n, m) →∃eϵω ∀nϵω ∃m, pϵω [T(e, n, p)∧U(p, m)∧
φ(n, m)] for every formula φ(u, v), where T and U are the set-theoretic predi-
cates which numeralwise represent, respectively, Kleene’s T and result-extraction
predicate U.
(Uniformity Principle) ∀x ∃yϵa φ(x, y) →∃yϵa ∀x φ(x, y).
(Unzerlegbarkeit) ∀x (φ(x) ∨¬φ(x)) →∀x φ ∨∀x ¬φ.
Most of these principles also hold in the realisability models of Rathjen [70], except
for the subcountability of all sets, and the general Uniformity Principle. In order to
show all of this, I need to give a concrete description. In our case that is somewhat
easier than in [61], since the axiom (Q) is valid here.
On Eff, one can deﬁne the powerclass functor Ps. The idea is that Ps(X) is the
set of all subcountable subsets of X. This one can easily construct in terms of the
universal small map π: E
/ U:
Ps(X) = { R ∈PX | ∃u ∈U: R ∼= Eu }.
Ps is obviously a subfunctor of the powerobject functor P (which exists in any topos),
and inherits an elementhood relation ∈X⊆Ps(X) × X from P.
The model for CZF is the initial algebra for the functor Ps, which happens to
exist. This means that it is a ﬁxpoint V and there are mutually inverse mappings
I: Ps(V )
/ V and E: V
/ Ps(V ).
The internal elementhood relation ϵ on V is
deﬁned in terms of ∈as follows:
xϵy ⇔x ∈E(y).
One can see that the model V exists by slightly modifying the work of Moerdijk
and Palmgren in [61]. Call a map π: E
/ U a weak representation for a class of

4.3. A REALISABILITY MODEL OF CZF
77
small maps S, when a morphism belongs to S, if and only if, there is a diagram of
the following form:
B
f

B′
/

o
E
π

A
A′
p
oo
/ U
where the left square is a quasi-pullback, and the right square is a genuine pullback.
This expresses that every small map is locally a quotient of π. Moerdijk and Palmgren
show how the initial Ps-algebra can be constructed from π.
Our class of small maps has a weak representation of a relatively easy form:
∈N /
/
π

∈N

P¬¬(N) /
/ P(N).
Therefore π is a morphism between assemblies, where P¬¬(N) = ∇PN, i.e. the set
of all subsets A of the natural numbers, where A is realised by any natural number,
and ∈N= {(n, A) | n ∈A}, where (n, A) is realised simply by n.
According to Moerdijk and Palmgren, the initial Ps-algebra can be constructed
by ﬁrst taking the W-type associated to π and then dividing out, internally, by
bisimulation:
supA(t) ∼supA′(t′)
⇔
∀a ∈A ∃a′ ∈A′: ta ∼t′a′ and ∀a′ ∈A′ ∃a ∈A: ta ∼t′a′.
The W-type associated to π can be calculated in the category of assemblies, and
is the following. The underlying set consists of well-founded trees where the edges
are labelled by natural numbers, in such a way that the edges into a ﬁxed node are
labelled by distinct natural numbers. The decorations (realisers) of such trees supA(t)
are those n ∈N such that n · a ↓for all a ∈A and n · a is a decoration of t(a).
Now I have to translate the bisimulation relation in terms of realisers. When using
the abbreviation:
m ⊢x ϵ supA(t)
⇔
j0m ∈A and j1m ⊢x ∼t(j0m),
it becomes:
n ⊢supA(t) ∼supA′(t′)
⇔
∀a ∈A: j0n · a ↓and j0n · a ⊢ta ϵ supA′(t′) and
∀a′ ∈A′: j1n · a′ ↓and j1n · a′ ⊢t′a′ ϵ supA(t).
Using the Recursion Theorem, it is not hard to see that this deﬁnes a subobject ∼of
Wπ × Wπ, in fact, an equivalence relation on Wπ. The quotient in Eff is V , which is
therefore Wπ, with ∼as equality.
Using the description of Ps as a quotient of Pπ in [47], one can see that:
Ps(X, =) = {(A ⊆N, t: A
/ X)},

78
CHAPTER 4. ALGEBRAIC SET THEORY AND CZF
where n ⊢(A, t) = (A′, t′), when n realises the statement that t and t′ they have the
same image, i.e.:
∀a ∈A ∃a′ ∈A′: ta = t′a′ and ∀a′ ∈A′ ∃a ∈A: ta = t′a′.
I and E map (A, t) to supA(t) and vice versa, whereas the internal elementhood
relation is deﬁned by:
m ⊢x ϵ supA(t)
⇔
j0m ∈A and j1m ⊢x = t(j0m),
which was not just an abbreviation.
Proposition 4.3.6 As an object of the eﬀective topos, V is uniform, i.e. there is a
natural number n such that:
n ⊢x = x
for all x ∈V .
Proof. It is clear that Wπ is uniform (a solution for f = λn.f decorates every tree),
and V , as its quotient, is therefore also uniform.
□
Corollary 4.3.7 The following clauses recursively deﬁne what it means that a certain
statement is realised by a natural number n in the model V :
n ⊢x ϵ supA(t)
⇔
j0n ∈A and j1n ⊢x = t(j0n).
n ⊢supA(t) = supA′(t′)
⇔
∀a ∈A: j0n · a ↓and j0n · a ⊢ta ϵ supA′(t′)) and
∀a′ ∈A′: j0n · a′ ↓and j1n · a′ ⊢t′a′ ϵ supA(t).
n ⊢φ ∧ψ
⇔
j0n ⊢φ and j1n ⊢ψ.
n ⊢φ ∨ψ
⇔
n = ⟨0, m⟩and m ⊢φ, or n = ⟨1, m⟩and m ⊢ψ.
n ⊢φ →ψ
⇔
For all m ⊢φ, n · m ↓and n · m ⊢ψ.
n ⊢¬φ
⇔
There is no m such that m ⊢φ.
n ⊢∃x φ(x)
⇔
n ⊢φ(a) for some a ∈V.
n ⊢∀x φ(x)
⇔
n ⊢φ(a) for all a ∈V.
Therefore the model is the same as the one introduced by Lubarsky in [53]. One
could use these clauses to verify that all the principles that are listed in Theorem
4.3.5 are valid, but that is not what I recommend. Instead, it is easier to use that V
is ﬁxpoint for Ps, together with properties of the class of subcountable maps S and
of the eﬀective topos.
Proof of Theorem 4.3.5.

4.3. A REALISABILITY MODEL OF CZF
79
(Full Separation) The model V satisﬁes full separation, because all monos belong
to S.
In more detail, assume w ∈V and φ(x) is a set-theoretic property.
W = E(w) is a small subset of V , and since monos are small, so is V = {x ∈
W | φ(x)}. Then take v = I(V ).
(All sets subcountable) Before we check the principle that all sets are subcount-
able in V , let us ﬁrst see how the natural numbers are interpreted in V . The
empty set ∅is interpreted by I(0), where 0 ⊆V is the least subobject of V ,
which is small. s(x) = I(x ∪{x}) deﬁnes an operation on V , therefore there
is a mapping i: N
/ V . This is actually an inclusion, and its image is small
(because N is). So if one writes ω = I(N), then this interprets the natural
numbers.
If x is an arbitrary element in V , E(x) is small, so (internally in Eff) ﬁts into
a diagram like this:
A /
/
q 
N
E(x).
One embeds the graph of q in V , by deﬁning a morphism T: A
/ V , as follows:
T(a) = (i(a), q(a)) ∈V,
where I implicitly use the standard coding of pairs of sets. Since A is small,
T can also be considered as an element of Ps(V ). Now t = I(T) is inside V a
function that maps a subset of the natural numbers to x.
(Non-existence of Pω) The principle that all sets are subcountable immediately
implies the non-existence of Pω, using Cantor’s Diagonal Argument.
(Axiom of Countable Choice), (Axiom of Relativised Dependent Choice)
The Principle of Relativised Dependent Choice V inherits from the eﬀective
topos Eff.
(Presentation Axiom) Recall that a set b in CZF is called a base, when every
surjection q: x
/ b has a section. To see that every set is the surjective image
of a base, notice that in V every set is the surjective image of a ¬¬-closed subset
of ω, and these are internally projective in Eff.
(Markov’s Principle), (Independence of Premisses) These hold in V , because
these principles are valid in Eff.
(Church’s Thesis) This is a bit harder: see below for an argument.
(Uniformity Principle), (Unzerlegbarkeit) To see that the uniformity principle
holds, observe that a realiser for a statement of the form ∀x ∃yϵa (. . .) spec-
iﬁes an yϵa that works uniformly for all x. Unzerlegbarkeit follows from the
uniformity principle, using a = {0, 1}.

80
CHAPTER 4. ALGEBRAIC SET THEORY AND CZF
□
Remark 4.3.8 It may be good to point out that not only does Pω not exist in the
model, neither does Px when x consists of only one element, say x = {∅}. For if it
would, so would (Px)ω, by Subset Collection. But it is not hard to see that (Px)ω
can be reworked into the powerset of ω.
Relationship with work of Streicher 4.3.9
In [80], Streicher builds a model of
CZF which in my terms can be understood as follows. He starts from a well-known
map ρ: E
/ U in the category Asm of assemblies. Here U is the set of all modest
sets, with a modest set u realised by any natural number, and a ﬁbre Eu in assemblies
being precisely the modest set u. He proceeds to build the W-type associated to ρ,
takes it as a universe of sets, and then interprets equality as bisimulation. One cannot
literally quotient by bisimulation, for which one could pass to the eﬀective topos.
When considering ρ as a morphism in the eﬀective topos, it is not hard to see that it
is in fact a “weak representation” for the class of subcountable morphisms S: for all
ﬁbres of “my” weak representation π also occur as ﬁbres of ρ, and all ﬁbres of ρ are
quotients of ﬁbres of π. Therefore the model is again the initial Ps-algebra for the
class of subcountable morphisms S in the eﬀective topos, by the work of Moerdijk
and Palmgren.
Relationship with work of McCarty 4.3.10
In his PhD thesis [58], McCarty
introduced a realisability model U for the constructive, but impredicative set theory
IZF. U is very similar to the model V I have been investigating, but its exact relation
is not immediately obvious. In [48], the authors Kouwenhoven-Gentil and Van Oosten
show how also McCarty’s model U is the initial Pt-algebra for a class of small maps
T in the eﬀective topos. As S ⊆T, and hence Ps ⊆Pt, U is also a Ps-algebra, so it
is clear that V embeds into U. Actually, V consists of those x ∈U that U believes
to be hereditarily subcountable.
To see this, write
A = {x ∈U | U |= x is hereditarily subcountable}.
A is a Ps-subalgebra of U, and it will be isomorphic to V , once one proves that is
initial. It is obviously a ﬁxpoint, so it suﬃces to show that it is well-founded (see
[48]). So let B ⊆A be a Ps-subalgebra of A, and deﬁne
W = {x ∈U | x ∈A ⇒x ∈B}.
It is not hard to see that this is a Pt-subalgebra of U, so W = U and A = B.
This also shows concerning Church’s Thesis, that, as it is valid in McCarty’s model U
and it concerns only sets that also exist in V , it is also valid in V . The same applies
to what is called Extended Church’s Thesis.

Chapter 5
Coinduction in categories
In the preceeding Chapters, I have been exploiting the connections between the three
concepts in the following picture.




CZF with
REA
O
O
O
O
O
O
O
O
O
O
O




Martin-L¨of type theory
with W-types and a universe
kkkkkkkkkkkkkkk




ΠW-pretopos with
a class of small maps
They all concern basic notions (the set theory CZF, Martin-L¨of type theory, locally
cartesian closed pretoposes) extended with additional structure (REA, W-types and
the existence of certain initial algebras, respectively) to incorporate inductive deﬁni-
tions. The idea of Federico De Marchi and me was to investigate a possible “non-
well-founded” or “coinductive” analogue to this picture.
The question we asked ourselves is whether a set theory like CZF with the Anti-
Foundation Axiom instead of the Axiom of Foundation, has similar strong relations
with categories or type theories equipped with coinductive types, as does CZF+REA
with categories and type theories with inductive types. Categories with what I have
called M-types (see Chapter 2) seem the appropriate analogue to investigate. Where
W-types are the initial algebras for polynomial functors, M-types are their ﬁnal coal-
gebras. As we have seen in the Chapter 1, W-types frequently consist of well-founded
trees, while M-types consist of general (“non-well-founded”1) trees.
Type theory
with coinductive types (M-types) instead of W-types was introduced by Federico De
Marchi in [26], and the relation between categories with M-types and type theory
with coinductive types was investigated there.
1The phrase “non-well-founded” is a bit confusing: it does not mean “not well-founded”. It
means rather something like “not necessarily well-founded”. The function of the word “non-well-
founded” is more to warn the reader that one is thinking of arbitrary trees and is not restricting
oneself to the well-founded case.
81

82
CHAPTER 5. COINDUCTION IN CATEGORIES
A result by Lindstr¨om [52] connected type theory and non-well-founded set the-
ory: she discovered how one can model non-well-founded set theory in Martin-L¨of
type theory with one universe. Somewhat surprisingly, she did not need any kind of
coinductive types. A similar phenomenon will arise in the next Chapter where I will
discuss models of non-well-founded set theory in categories. On this point, the anal-
ogy with the inductive (well-founded) picture does not seem to be perfect: categorical
or type-theoretic W-types are necessary to build interpretations of well-founded set
theory in [2] and [61].
In this Chapter, I will be more concerned with categories possessing M-types
in themselves. In particular, I will prove existence results for M-types and closure
properties of categories with M-types (glueing, coalgebras for a cartesian comonad
and (pre)sheaves). In some cases, the results for categories with M-types are better
than the ones for ΠW-pretoposes, on which they occasionally shed some light. As
discussed, these closure properties have proved most important in topos theory and led
to the formulation of various independence results. Hopefully, these closure properties
of categories with M-types will prove helpful in investigating non-well-founded set
theories and type theories.
This Chapter reports joint work with Federico De Marchi, and has been submitted
for publication.
5.1
Preliminaries
Throughout this Chapter, E will denote a locally cartesian closed pretopos with a
natural number object.
Recall from Chapter 1 that one associates to a morphism f: B
/ A in E, a
polynomial functor Pf: E
/ E, which is deﬁned as
Pf(X) = Σa∈AXBa
or, more formally, as
Pf(X) = ΣA(A × X
p1 /A)(B
f
/A),
where the exponential is taken in the slice category E/A. The ﬁnal coalgebra for Pf is
called the M-type for f, whenever it exists, and denoted by Mf. The intuition is that
f represents a signature, with the elements a in A representing term constructors
of arity Ba.
The elements of the M-type are then (possibly inﬁnite) terms over
this signature. Another intuition is that they are trees where nodes are labelled by
elements a in A and edges by elements b in B, in such a way that f −1(a) enumerates
the edges into a node labelled by a.
One says that E has M-types, if ﬁnal coalgebras exist for every polynomial func-
tor. A ΠM-pretopos will be a locally cartesian closed pretopos with a natural num-
ber object and M-types. It is the purpose of this Chapter to prove the closure of

5.1. PRELIMINARIES
83
ΠM-pretoposes under slicing, formation of coalgebras for a cartesian comonad and
(pre)sheaves.
As already pointed out, by Lambek’s lemma (Lemma A.14), the Pf-coalgebra
structure map of an M-type Mf for a morphism f: B
/ A,
τf: Mf
/ Pf(Mf)
is an isomorphism, and therefore has a section, denoted by supf (or just sup, when f
is understood). Furthermore, because there is a natural transformation ρ: Pf
/ A,
where A is the constant functor sending objects to A and morphisms to the identity on
A, whose component on an object X sends (a, t) ∈Pf(X) to a ∈A, τ also determines
a root map
Mf
τf
/ Pf(Mf)
ρ
/ A,
which, by an abuse of notation, will again be denoted by ρ. I will also abuse termi-
nology by calling the components ρX of the natural transformation “root maps”. I
am conﬁdent that this will not generate any confusion.
Given a pullback diagram in E
B′
f′

β
/ B
f

A′
α
/ A,
one can think of α as a morphism of signatures, since the ﬁbre over each a′ ∈A′ is
isomorphic to the ﬁbre over α(a′) ∈A. It is therefore reasonable to expect, in such a
situation, an induced morphism between Mf′ and Mf, when these exist.
In fact, as already pointed out in [60], such a pullback square induces a natural
transformation eα: Pf′
/ Pf such that
ρeα = αρ.
(5.1)
Post-composition with eα turns any Pf′-coalgebra into one for Pf. In particular, this
happens for Mf′, thus inducing a unique coalgebra homomorphism as in
Mf′
α!
/
τf′

Mf
τf

Pf′(Mf′)
eα

Pf(Mf′) Pf(α!)
/ Pf(Mf).
(5.2)
Notice that, by (5.1), the morphism α! preserves the root maps.

84
CHAPTER 5. COINDUCTION IN CATEGORIES
Again, extensive use will be made of the language of paths. Recall the observation
made in Chapter 2, that the notion of path can be deﬁned in the internal logic of E
for any Pf-coalgebra
X
γ
/PfX.
The idea is that a ﬁnite sequence of odd length ⟨x0, b0, x1, b1, . . . , xn⟩is called a path
in (X, γ), if every xi is in X, every bi is in B and for every i < n one has
xi+1 = γ(xi)(bi).
(5.3)
More precisely, if γ(xi) = (ai, ti), then one is asking that f(bi) = ai and xi+1 = ti(bi).
An element x ∈X is called a child of y ∈X, when there is a path ⟨y, b, x⟩.
In the particular case when X is the ﬁnal coalgebra Mf, a path ⟨m0, b0, . . . , mn⟩in
this sense coincides precisely with a path in the usual sense in the non-well-founded
tree m0. I will therefore say that such a path lies in m0, and by extension, a path
⟨x0, b0, . . . , xn⟩lies in x0 ∈X for any coalgebra (X, γ). All paths in a coalgebra (X, γ)
are collected into a subobject
Paths(γ) ⊆(X + B + 1)N.
Any morphism of coalgebras α: (X, γ)
/ (Y, δ) induces a morphism
α∗: Paths(γ)
/ Paths(δ)
(5.4)
between the objects of paths in the respective coalgebras. A path ⟨x0, b0, . . . , xn⟩is
sent by α∗to ⟨α(x0), b0, . . . , α(xn)⟩. Furthermore, given a path τ = ⟨y0, b0, . . . , yn⟩in
Y and an x0 such that α(x0) = y0, there is a unique path σ starting with x0 such
that α∗(σ) = τ. (Proof: deﬁne xi+1 inductively for every i < n using (5.3) and put
σ = ⟨x0, b0, . . . , xn⟩.)
In fact, in order to introduce the concept of path, one needs even less than a
coalgebra: it is suﬃcient to have a common environment in which to read equation
(5.3). Given a map f: B
/ A in E, consider the category Pf −prtclg of Pf-proto-
coalgebras. Its objects are pairs of maps
(γ, m) = X
γ
/ Y
Pf(X),
o
m
o
(5.5)
where m is monic. An arrow between (γ, m) and (γ′, m′) is a pair of maps (α, β)
making the following commute:
X
γ
/
α

Y
β

Pf(X)
o
m
o
Pf(α)

X′
γ′
/ Y ′
Pf(X′).
o
m′
o
Notice that there is an obvious inclusion functor
I: Pf −coalg
/ Pf −prtclg,
(5.6)

5.1. PRELIMINARIES
85
mapping a coalgebra γ: X
/ Pf(X) to the pair (γ, idPfX). Proto-coalgebras do not
seem to be very interesting in themselves, but they will be very helpful for studying
M-types.
For a proto-coalgebra as in (5.5), one can introduce the notion of a path in the
following way. I shall call an element x ∈X branching if γ(x) lies in the image of m.
Then, I call a sequence of odd length σ = ⟨x0, b0, x1, b1, . . . , xn⟩a path if it satisﬁes
the properties:
1. xi ∈X is branching for all i < n
2. bi ∈Bai for all i < n
3. ti(bi) = xi+1 for all i < n
where (ai, ti) is the (unique) element in PfX such that γ(xi) = m(ai, ti). An element
x ∈X is called coherent, if all paths starting with x end with a branching element.
So, all coherent elements are automatically branching, and their children, identiﬁed
through m, are themselves coherent. So the object Coh(γ) of coherent elements has
a Pf-coalgebra structure. In fact, this is the biggest coalgebra which one can embed
in (γ, m), i.e. a coreﬂection of the latter for the inclusion functor I of (5.6).
Proposition 5.1.1 The assignment (γ, m)
/Coh(γ) mapping any Pf-proto-coal-
gebra to the object of coherent elements in it, determines a right adjoint Coh to the
functor I: Pf −coalg
/ Pf −prtclg.
Proof. Consider a proto-coalgebra
X
γ
/ Y
Pf(X),
o
m
o
and build the object Coh(γ) of coherent elements in X. Because any coherent element
x ∈Coh(γ) is also branching, one can ﬁnd a (necessarily unique) pair (a, t) such that
γ(x) = m(a, t).
By deﬁning χ(x) = (a, t), I equip Coh(γ) with a Pf-coalgebra
structure (notice that, x being coherent, so are the elements in the image of t). The
coalgebra (Coh(γ), χ) clearly ﬁts in a commutative diagram
Coh(γ) /
i
/
χ

X
γ

Pf(Coh(γ)) /
Pfi
/ Pf(X) /
m
/ Y.

86
CHAPTER 5. COINDUCTION IN CATEGORIES
Let now (X′, χ′) be any other Pf-coalgebra. Then, given a coalgebra morphism
X′
φ
/
χ′

Coh(γ)
χ

Pf(X′)
Pfφ
/ Pf(Coh(γ)),
the pair (iφ, mPf(iφ)) clearly determines a proto-coalgebra morphism from I(X′, χ′)
to (γ, m). Conversely, any proto-coalgebra morphism
X′
χ′
/
α

Pf(X′)
β

Pf(X′)
Pf(α)

X
γ
/ Y
Pf(X)
o
m
o
has the property that α(x′) is branching for any x′ ∈X′. Using an opportune exten-
sion to proto-coalgebras of the morphism α∗described in (5.4) above, one can then
easily check that elements in the image of α are coherent. Hence, α factors through
the object Coh(γ), inducing a coalgebra morphism from (X′, χ′) to (Coh(γ), χ).
It is now easy to check that the two constructions are mutually inverse, thereby de-
scribing the desired adjunction.
□
A particular subcategory of proto-coalgebras arises when one has another endo-
functor F on E and an injective natural transformation m: Pf /
/F . In this case, any
F-coalgebra χ: X
/ FX can easily be turned into the Pf-proto-coalgebra (χ, mX).
This determines a functor bm: F −coalg
/ Pf −prtclg, which is clearly faithful.
Proposition 5.1.2 The adjunction I ⊣Coh of Proposition 5.1.1 restricts to an ad-
junction m∗⊣Coh bm, if m∗: Pf −coalg
/ F −coalg takes χ: X
/ PfX to (X, mXχ).
Proof. Consider a Pf-coalgebra (Z, γ) and an F-coalgebra (X, χ). Then, a sim-
ple diagram chase, using the naturality of m, shows that F-coalgebra morphisms
from m∗(Z, γ) to (X, χ) correspond bijectively to morphisms of proto-coalgebras from
I(Z, γ) to bm(X, χ), hence by Proposition 5.1.1 to Pf-coalgebra homomorphisms from
(Z, γ) to Coh( bm(X, χ)).
□
5.2
Existence results for M-types
The crucial point in showing that ΠM-pretoposes are closed under the various con-
structions I am going to consider, will always be that of showing existence of M-types.
The machinery to do so will be set up in this Section. But the results are not just

5.2. EXISTENCE RESULTS FOR M-TYPES
87
useful for that. They are, I think, valuable in themselves and raise interesting ques-
tions.
Traditionally, one can recover non-well-founded trees from well-founded ones,
whenever the signature has one speciﬁed constant. In fact, the constant allows for
the deﬁnition of truncation functions, which cut a tree at a certain depth and replace
all the term constructors at that level by that speciﬁed constant. The way to recover
non-well-founded trees is then to consider sequences of trees (tn)n>0 such that each
tn is the truncation at depth n of tm for all m > n. Each such sequence is viewed as
the sequence of approximations of a non-well-founded tree.
Recall that the context is that of a Π-pretopos E with nno. In this context, I call
a map f: B
/ A pointed, when the signature it represents has a speciﬁed constant
symbol, i.e. if there exists a global element ⊥: 1
/ A such that the following is a
pullback:
0
/

B
f

1
⊥
/ A.
The next two statements make clear that, instead of starting with well-founded
trees, i.e. with the W-type for f, one can build these approximations from any ﬁxpoint
of Pf.
Lemma 5.2.1 If for some pointed f in E, Pf has a ﬁxpoint, then it also has a ﬁnal
coalgebra.
Proof. Assume X is an algebra whose structure map sup: PfX
/ X is an isomor-
phism. Observe, ﬁrst of all, that X has a global element
⊥: 1
/ X,
(5.7)
namely sup⊥(t), where ⊥is the point of f and t is the unique map B⊥= 0
/ X.
Deﬁne, by induction, the following truncation functions trn: X
/ X:
tr0
=
⊥
trn+1
=
sup ◦Pf(trn) ◦sup−1
Using these maps, one can deﬁne an object M, consisting of sequences (αn ∈X)n>0
with the property:
αn = trn(αm) for all n < m.
Now, one deﬁnes a morphism τ: M
/ PfM as follows. Given a sequence α = (αn) ∈
M, observe that ρ(αn) is independent of n and is some element a ∈A. Hence, each
αn is of the form supa(tn) for some tn: Ba
/ X, and I deﬁne t: Ba
/ M by putting

88
CHAPTER 5. COINDUCTION IN CATEGORIES
t(b)n = tn+1(b) for every b ∈Ba; then τ(α) = (a, t). Thus, M has the structure of a
Pf-coalgebra, and I claim it is the terminal one.
To show this, given another coalgebra χ: Y
/ PfY , I wish to deﬁne a map of coal-
gebras bp: Y
/ M. This means deﬁning maps bpn: Y
/ X for every n > 0, with the
property that bpn = trnbpm for all n < m. Intuitively, bpn maps a state of Y to its “un-
folding up to level n”, which I can mimic in X. Formally, they are deﬁned inductively
by
bp0
=
⊥
bpn+1
=
sup ◦Pf(bpn) ◦χ.
It is now easy to show, by induction on n, that bpn = trnbpm for all m > n. For
n = 0, both sides of the equation become the constant map ⊥.
Supposing the
equation holds for a ﬁxed n and any m > n, then for n + 1 and any m > n one has
bpn+1 = supPf(bpn)χ = supPf(trnbpm)χ = supPf(trn)sup−1supPf(bpm)χ = trn+1bpm+1.
I leave to the reader the veriﬁcation that bp is the unique Pf-coalgebra morphism from
Y to M.
□
Theorem 5.2.2 If ﬁxpoints exist in E for all Pf (with f pointed), then E has M-types.
Proof. Let f: B
/ A be a map. I freely add a point to the signature represented
by f, by considering the composite
f⊥: B
f
/ A /
i
/ A + 1
(5.8)
(with the point j = ⊥: 1
/ A + 1). Notice that the obvious pullback
B
id
/
f

B
f⊥

A /
i
/ A + 1
determines a (monic) natural transformation i!: Pf
/ Pf⊥by (5.2); hence, by Propo-
sition 5.1.2, the functor (i!)∗: Pf −coalg
/ Pf⊥−coalg has a right adjoint. Now ob-
serve that Pf⊥has a ﬁxpoint, by assumption, hence a ﬁnal coalgebra by Lemma 5.2.1.
This will be preserved by the right adjoint of (i!)∗, hence Pf has a ﬁnal coalgebra.
□
This proof gives a categorical counterpart of the standard set-theoretic construc-
tion: add a dummy constant to the signature, build inﬁnite trees by sequences of
approximations, then select the actual M-type by taking those inﬁnite trees which
involve only term constructors from the original signature. This last passage is per-
formed by the coreﬂection functor of Proposition 5.1.2, since branching elements are

5.2. EXISTENCE RESULTS FOR M-TYPES
89
trees in the M-type of f⊥whose root is not ⊥, and coherent ones are trees with no
occurrence of ⊥at any point.
From this last theorem, one readily deduces the following result, ﬁrst pointed out
by Abbott, Altenkirch and Ghani [1].
Corollary 5.2.3 Every ΠW-pretopos is a ΠM-pretopos.
Proof. Since the W-type associated to a (pointed) map f is a ﬁxpoint for Pf, E also
has all M-types by the previous theorem.
□
Remark 5.2.4 This result shows that there is a substantial class of examples of ΠM-
pretoposes. It is an open problem to ﬁnd a non-syntactic example of a ΠM-pretopos
that is not a ΠW-pretopos.
In Chapter 2, we have seen some examples of categories which have M-types, but
are not ΠM-pretoposes; for instance, the category of modest sets, or that of assemblies
(or ω-sets). The only reason these categories are not examples of ΠM-pretoposes is
that they fail to be exact. However, notice that exactness is not necessary for the
proofs. In fact, regularity would be suﬃcient to establish all the closure properties.
Although Theorem 5.2.2 is clearly helpful in proving that categories have M-types,
it is even more so, when combined with the following observation.
Lemma 5.2.5 Any preﬁxpoint α: PfX
/ X, that is, an algebra whose structure map
is monic, has a subalgebra that is a ﬁxpoint.
Proof. Any preﬁxpoint α: PfX
/ X can be seen as a Pf-proto-coalgebra
X
id
/ X
PfX.
o
α
o
Its coreﬂection Coh(id, α), deﬁned in Proposition 5.1.1, is a Pf-coalgebra γ: Y
/ PfY
(in fact, the largest) ﬁtting in the following commutative square:
Y
/
i
/
γ

X
PfY
/
Pfi
/ PfX.
O
α
O
Now, consider the image under the functor I: Pf −coalg
/ Pf −prtclg of the coalge-
bra Pf(γ): PfY
/ P 2
f Y . The morphism of proto-coalgebras
PfY
Pfγ /
αPfi

P 2
f Y
αPf(α)P 2
f i

P 2
f Y
o
id
o
Pf(α)P 2
f i

X
id
/ X
PfX
o
α
o

90
CHAPTER 5. COINDUCTION IN CATEGORIES
transposes through the adjunction I ⊣Coh to a morphism φ: (PfY, Pfγ)
/ (Y, γ),
which is a right inverse of γ: (Y, γ)
/ (PfY, Pfγ) by the universal property of (Y, γ).
Hence, I have γφ = Pf(φγ) = id, proving that γ and φ are mutually inverse.
□
Putting together Theorem 5.2.2 and Lemma 5.2.5, one gets at once the following:
Corollary 5.2.6 If E has preﬁxpoints for every polynomial functor, then E has M-
types.
As an application of the techniques in this Section, I present the following result,
which is to be compared with the one by Santocanale in [78]. An immediate corollary
of his Theorem 4.5 is that M-types exist in every locally cartesian closed pretopos
with a natural number object, for maps of the form f: B
/ A where A is a ﬁnite sum
of copies of 1. Notice that such an object A has decidable equality, i.e. the diagonal
∆: A
/ A × A has a complement in the subobject lattice of A × A. I extend the
statement above to all maps whose codomain has decidable equality.
Proposition 5.2.7 When f: B
/ A is a morphism in E whose codomain A has
decidable equality, then the M-type for f exists.
Proof. Without loss of generality, one may assume that f is pointed; in fact, if one
replaces A by A⊥= A+1 and f by f⊥as in (5.8), then A⊥also has decidable equality,
and the existence of an M-type for the composite f⊥implies that of an M-type for
f (see the proof of Theorem 5.2.2). Then, by Lemma 5.2.5 and Lemma 5.2.1, it is
enough to show that Pf has a preﬁxpoint.
Let S be the object of all ﬁnite sequences of the form
⟨a0, b0, a1, b1, . . . , an⟩
where f(bi) = ai for all i < n. (Like paths in a coalgebra, this object S can be
constructed using the internal logic of E.) Now, let V be the object of all decidable
subobjects of S (these can be considered as functions S
/ 1 + 1). Deﬁne the map
m: PfV
/ V taking a pair (a, t: Ba
/ V ) to the subobject P of S deﬁned by the
following clauses:
1. ⟨a0⟩∈P iﬀa0 = a.
2. ⟨a0, b0⟩∗σ ∈P iﬀa0 = a and σ ∈t(b0).
(Here, ∗is the symbol for concatenation.) P is obviously decidable, so m is well-
deﬁned. To see that it is monic, suppose P = m(a, t) and P ′ = m(a′, t′) are equal.
Then,
⟨a⟩∈P =⇒⟨a⟩∈P ′ =⇒a = a′,

5.3. CLOSURE PROPERTIES
91
and, for every b ∈Ba and σ ∈S,
σ ∈t(b)
⇐⇒
⟨a, b⟩∗σ ∈P
⇐⇒
⟨a, b⟩∗σ ∈P ′
⇐⇒
σ ∈t′(b),
so t = t′ and m is monic. Hence, (V, m) is a preﬁxpoint for Pf and the proof is
ﬁnished.
□
It is an interesting question whether this result can be generalised even further.
However, it is my feeling that not all M-types can be proved to exist in general.
Unfortunately, the lack of examples of Π-pretoposes with natural number object, but
without W-types makes it hard to give counterexamples.
Remark 5.2.8 To obtain a concrete description of the M-type for a map f with a
codomain with decidable equality, one should start with the objects S and V con-
structed in the proof of Proposition 5.2.7. Then one should deduce a ﬁxpoint V ′ from
V , as in Corollary 5.2.6. This means selecting the coherent elements of V , and these
turn out to be those decidable subobjects P of S satisfying the following properties:
1. ⟨a⟩∈P for a unique a ∈A;
2. if ⟨a0, b0, . . . , an⟩∈P, then there exists a unique an+1 for any bn ∈Ban such
that ⟨a0, b0, . . . , an, bn, an+1⟩∈P.
Next, one should turn this ﬁxpoint into the M-type for f (as in Lemma 5.2.1), but
this step is redundant, since the choice of V is such that V ′ already is the desired
M-type.
5.3
Closure properties
After these preliminaries, I establish closure of ΠM-pretoposes under slicing, coalge-
bras for a cartesian comonad, presheaves and sheaves.
5.3.1
M-types and slicing
I start by considering preservation of the ΠM-pretopos structure under slicing. Let I
be an object in a Π-pretopos with nno E. Then, it is well-known that the slice category
E/I has again the same structure, and the reindexing functor x∗: E/I
/ E/J for any
map x: J
/ I in E preserves it. So, I can focus on showing the existence of M-types
in E/I. Their preservation under reindexing immediately follows from some results on
indexed categories (see Lemma A.19 and Lemma A.21). Therefore, I shall concentrate

92
CHAPTER 5. COINDUCTION IN CATEGORIES
on the existence of M-types in slice categories, proving a “local existence” result, from
which I derive a global statement.
Let us consider a map
B
f
/
β
?
?
?
?
?
?
?
?
A
α
       I
(5.9)
in E/I.
I shall denote by Pf the polynomial functor determined by f (or, more
precisely, by Σf) in E, and by P I
f the polynomial endofunctor determined in E/I.
The functor Pf: E
/ E can be extended to a functor Pf: E
/ E/I; in fact, PfX
lives over A via the root map, and the composite αρ: PfX
/ I deﬁnes the desired
extension.
Lemma 5.3.1 There is an injective natural transformation of endofunctors on E/I
c: P I
f
/ PfΣI.
Proof. For an object ξ: X
/ I in E/I and i ∈I:
P I
f (X
ξ
/I)i = {(a, t: Ba
/ X) | α(a) = i, ∀b ∈Ba: βt(b) = i}
and
Pf(ΣI(X
ξ
/I)) = {(a, t: Ba
/ X) | α(a) = i}.
The ﬁrst in clearly contained in the second. Naturality is readily checked.
□
Using the map c of Lemma 5.3.1, one can build an M-type for f in E/I, whenever
Mf exists in E.
Theorem 5.3.2 Let E be a locally cartesian closed pretopos with a natural number
object and I an object in E. Consider a map f: B
/ A over I, such that the functor
Pf: E
/ E has a ﬁnal coalgebra. Then, f has an M-type in E/I.
Proof. Let τf: Mf
/ PfMf be the M-type associated to f in E. Mf can be consid-
ered as an object over I, by taking the composite µ of the root map ρ: Mf
/ A with
the map α: A
/ I, and (Mf, τf) then becomes the ﬁnal PfΣI-coalgebra, as one can
easily check. The adjunction determined by the natural transformation c: P I
f
/ PfΣI
as in Proposition 5.1.2 takes the ﬁnal PfΣI-coalgebra (Mf, τf) to its coreﬂection M I
f ,
and because right adjoints preserve limits, this is the ﬁnal P I
f -coalgebra.
□
Remark 5.3.3 The injective natural transformation c of Lemma 5.3.1 identiﬁes as
branching elements in PfΣI those obtained by applying a term constructor in A to
elements living in its same ﬁbre over I.

5.3. CLOSURE PROPERTIES
93
The coreﬂection process used to build M I
f out of the M-type (Mf, τf), helps to
understand which elements of the latter do actually belong to the former. Trees in
M I
f are coherent for the notion of branching determined by P I
f , hence, not only the
children of the root node live in its same ﬁbre over I, but all the children of the
children do too, and so on. In other words, M I
f consists of those trees in Mf all nodes
of which live in the same ﬁbre over I. As such, the object M I
f can also be described
as the equaliser
M I
f /
/ Mf
⟨id,α⟩!
/
⟨id,αρ⟩&M
M
M
M
M
M
M
Mf×I,
Mf × I
χ
7o
o
o
o
o
o
where χ is the map coinductively deﬁned as
χ(supat, i) = sup(a,i)(χ⟨t, i⟩).
As an immediate consequence of Theorem 5.3.2, one gets the following:
Corollary 5.3.4 For any given object I of a ΠM-pretopos E, the slice category E/I
is again a ΠM-pretopos.
Remark 5.3.5 This last result could have also been proved directly by combining
Corollary 5.2.6 and Lemma 5.3.1. However, the proof of Theorem 5.3.2 shows that
the construction is actually simpler. More speciﬁcally, notice that, in this case, one
obtains the M-type for a map f directly after the coreﬂection, and it is not necessary
to add any dummy variable, nor to build sequences of approximations.
5.3.2
M-types and coalgebras
In this Section, I turn my attention to the construction of categories of coalgebras for
a cartesian comonad (G, ϵ, δ). See [55], Chapter VI, for the deﬁnition of a comonad
and a coalgebra for a comonad. By a cartesian comonad, I mean here that the functor
G is cartesian. As for the slicing case, I already know that most of the structure of a
ΠM-pretopos is preserved by taking coalgebras for G:
Theorem 5.3.6 If E is a locally cartesian closed pretopos with natural number object,
then so is EG for a cartesian comonad G = (G, ϵ, δ) on E.
Proof. Theorem 4.2.1 on page 173 of [44] gives us that EG is cartesian, in fact lo-
cally cartesian closed, and that it has a natural number object. The two additional
requirements of having ﬁnite disjoint sums and being exact are easily veriﬁed, using
in particular that the forgetful functor U: EG
/ E creates ﬁnite limits.
□

94
CHAPTER 5. COINDUCTION IN CATEGORIES
The aim of this Subsection is to prove that EG inherits M-types from E, in case they
exist in that category. The question whether ΠW-pretoposes are closed under taking
coalgebras for a cartesian comonad, is still open.
Given a morphism f of coalgebras, this induces a polynomial functor Pf: EG
/ EG,
while its underlying map Uf determines the endofunctor PUf on E. The two are re-
lated as follows:
Proposition 5.3.7 Let f: (B, β)
/ (A, α) be a map of G-coalgebras. Then, there is
an injective natural transformation
E
i↣
G

PUf
/ E
G

EG
Pf
/ EG,
whose mate under the adjunction U ⊣G, I shall denote by
j: UPf
/ PUfU: EG
/ E.
(5.10)
Proof. Recall from [44] that there is the following natural isomorphism
EG/(A, α) ∼= (E/A)G′,
(5.11)
where G′ is a cartesian comonad on E/A, which is computed on an object t: X
/ A
in E/A by taking the following pullback:
G′X
G′t

/
/ GX
Gt

A /
α
/ GA.
(5.12)
Notice that both horizontal arrows in this pullback are monic, because ϵA is a retrac-
tion of the G-coalgebra α.
Through the isomorphism (5.11), the object A×GX
/ A corresponds to G′(p1: A×
X →A), whereas f corresponds to some map f ′ in (E/A)G′.
Therefore the ob-
ject Pf(GX) (i.e. the source of the exponential (A × GX
/ A)f in the category
EG/(A, α)) corresponds to the exponential (G′p1)f′. Since U ′: (E/A)G′
/ E/A pre-
serves products because G′ does, there is the following chain of natural bijections:
Y
/
G′(pU′f′
1
)
U ′Y
/
pU′f′
1
U ′Y × U ′f ′
/
p1
U ′(Y × f ′)
/
p1
Y × f ′
/
(G′p1)
Y
/
(G′p1)f′.

5.3. CLOSURE PROPERTIES
95
So one deduces (G′p1)f′ ∼= G′(pU′f′
1
) = G′(pUf
1 ).
The latter ﬁts in the following
pullback square, which is an instance of (5.12):
G′((A × X →A)Uf)

/ iX
/ G((A × X →A)Uf)

A /
α
/ GA.
Now notice that the top-right entry of the diagram is exactly GPUf(X), hence the
map i therein deﬁnes the X-th component of a natural transformation of the desired
form.
□
I am now ready to formulate a local existence result for M-types in categories of
coalgebras.
Theorem 5.3.8 Let f: (B, β)
/ (A, α) be a map of G-coalgebras. If the underlying
map Uf has an M-type in E, then the functor Pf: EG
/ EG has a ﬁnal coalgebra in
EG.
Proof. The natural transformation i of Proposition 5.3.7 allows one to turn any
PUf-coalgebra into a Pf-proto-coalgebra.
In particular, for the M-type τ: M =
MUf
/ PUfM in E, one obtains the proto-coalgebra
GM
Gτ / GPUfM
PfGM,
o
iM
o
whose coreﬂection Coh(M) = Coh(Gτ, iM) is ﬁnal in Pf−coalg. To see this, consider
another coalgebra (X, γ) (therefore, X is a G-coalgebra, and γ: X
/ PfX is a G-
coalgebra homomorphism).
To give a morphism of Pf-coalgebras from (X, γ) to
Coh(M) is the same, through I ⊣Coh, as giving a map ψ: X
/ GM in EG which is
a morphism of Pf-proto-coalgebras, i.e. that makes the following commute:
X
γ
/
ψ

PfX
Pfψ

GM
Gτ
/ GPUfM
PfGM.
o
iM
o
This transposes, through U ⊣G, to the following diagram in E, where j is the natural
transformation deﬁned in (5.10):
UX
Uγ /
bψ

UPfX
jX / PUfUX
PUf bψ

M
τ
/ PUfM.
But ﬁnality of M implies that there is precisely one such bψ for any coalgebra (X, γ),
hence ﬁnality is proved.
□

96
CHAPTER 5. COINDUCTION IN CATEGORIES
Corollary 5.3.9 If E is a ΠM-pretopos and G = (G, ϵ, δ) is a cartesian comonad on
E, then the category EG of (Eilenberg-Moore) coalgebras for G is again a ΠM-pretopos.
Remark 5.3.10 Notice that Corollary 5.3.9 could also be deduced by Corollary 5.2.6,
in conjunction with Proposition 5.3.7.
However, analogously to what happens in
the slicing case, Theorem 5.3.8 shows that one does not need to perform the whole
construction, since the coreﬂection step gives directly the ﬁnal coalgebra.
Remark 5.3.11 In particular, this result shows stability of ΠM-pretoposes under the
glueing construction, since this is a special case of taking coalgebras for a cartesian
comonad (see [44]).
5.3.3
M-types and presheaves
In this Section, I concern myself with the formation of presheaves for an internal
category in a ΠM-pretopos. My aim is to show that the resulting category is again
a ΠM-pretopos.
So consider an internal category C in a ΠM-pretopos E, with object of objects C0
(see Appendix A for the deﬁnition of an internal category). By using the fact that the
category of presheaves Psh(C) is the category of coalgebras for a cartesian comonad
on the slice category E/C0 (see for instance [44], Example A.4.2.4 (b)), I get at once
Proposition 5.3.12 The presheaf category Psh(C) is a ΠM-pretopos.
Unwinding the proof, it is possible to give a concrete description of the M-type in
presheaf categories, along the lines of the description of W-types in [61]. I will just
give the description and leave the veriﬁcations to the reader.
First of all, I need to introduce the functor |·|: Psh(C)
/ E which takes a presheaf
A to its “underlying set” |A| = {(a, C) | a ∈A(C)}. This is just the composite of
the forgetful functor U: Psh(C)
/ E/C0 with ΣC0: E/C0
/ E.
Let f: B
/ A be a morphism of presheaves.
Then, the “ﬁbre” Ba of f over
a ∈A(C) for an object C in C is a presheaf, whose action on D is described in the
internal language of E as
Ba(D) = {(β, b) | β: D
/ C, a · β = f(b)}
and restriction along a morphism δ: D′
/ D is deﬁned as
(β, b) · δ = (βδ, b · δ).
Now the presheaf morphism f also induces a map
f ′: Σ(a,C)∈|A||Ba|
/ |A|

5.3. CLOSURE PROPERTIES
97
whose ﬁbre over (a, C) is precisely |Ba|. Consider the M-type Mf′ in E: the M-type
M for f in presheaves will be built by selecting the right elements from this M-type.
Elements T ∈Mf′ are of the form
T = sup(a,C)t,
where (a, C) ∈|A| and t: Ba
/ Mf′. Mf′ can be considered as an object in E/C0,
when one maps such a T to C. Write N(C) for the ﬁbre over C ∈C0. N actually
possesses the structure of a presheaf, because for any T ∈N(C) and α: C′
/ C,
T · α = supa′,C′teα,
where a′ = a · α and eα is the obvious morphism |Ba′|
/ |Ba|, deﬁned by sending
(β, b) to (αβ, b).
Out of this presheaf N, one has to select the coherent elements (the trees called
natural in [60]). Call a tree S composable, when all subtrees T = sup(a,C)t of S satisfy
t(β, b) ∈N(dom(β)).
Call S coherent or natural, when all subtrees T = sup(a,C)t of S in addition satisfy
that
t(β, b) · γ = t(βγ, b · γ).
These notions can be deﬁned using the language of paths. Let M be the subobject of
N consisting of the coherent elements. It is a presheaf, and, as the reader can verify,
the M-type for f in presheaves. So, in eﬀect, I have proved:
Theorem 5.3.13 Consider a map f: B
/ A in Psh(C). If the induced map f ′ has
an M-type in E, then f has an M-type in Psh(C).
5.3.4
M-types and sheaves
In this Section, I wish to show that ΠM-pretoposes are closed under taking sheaves.
I approach this question in the following manner: I show that ΠM-pretoposes are
closed under reﬂective subcategories with cartesian reﬂector (by the way, the ques-
tion whether the corresponding result for ΠW-pretoposes holds, is still open). It is
well-known that in topos theory categories of sheaves are such subcategories of the
category of presheaves. Within a predicative metatheory, the construction of a sheaﬁ-
ﬁcation functor, a cartesian left adjoint for the inclusion of sheaves in presheaves, runs
into some problems. Solutions have been proposed in [61] and [15]. Here, I will sim-
ply assume that this problem can be solved. Then closure of ΠM-pretoposes under
sheaves follows from closure under reﬂective subcategories, because I have just shown
that ΠM-pretoposes are closed under taking presheaves for an internal site.
On cartesian reﬂectors and the universal closure operators they induce, the reader
should consult [44], Sections A4.3 and A4.4. Very brieﬂy, the story is like this. A

98
CHAPTER 5. COINDUCTION IN CATEGORIES
category D is a reﬂective subcategory of a cartesian category E, when the inclu-
sion functor i: D
/ E has a left adjoint L such that Li ∼= 1. Now the inclusion is
automatically full and faithful.
When the reﬂector L is cartesian, as I will always assume, it induces an operator
on the subobject lattice of any object X. The operator sends a subobject
m: X′ /
/ X
to the left side of the pullback square
c(X′)


/ iLX′

iLm

X
ηX / iLX.
This operation is order-preserving, idempotent (c(c(X′)) = c(X′)) and inﬂationary
(X′ ≤c(X′)) and commutes with pullback along arbitrary morphisms. Such opera-
tors are called universal closure operators. In topos theory, every universal closure
operator derives from a cartesian reﬂector, but in the context of Π-pretoposes that is
probably not the case.
The objects in E that come from D can be characterised in terms of the closure
operator c as follows. Call a mono
m: X′ /
/ X
dense, when its closure c(X′) is the maximal object X ⊆X. An object Y in E is
from D in case any triangle
X′
f′
/

m

Y
X
f
>
with m a dense mono, can be ﬁlled uniquely by a map f. These objects are, not
accidentally, called the sheaves for the closure operator c. Objects Y for which such
triangles have at most one ﬁlling are called separated with respect to c. Also the
separated objects form a reﬂective subcategory of E.
It is well-known that in this setting D is a locally cartesian closed pretopos with
a natural number object. Parts of this result, especially that D is an lccc, can be
found in [44] in the aforementioned Sections: I will also need that i preserves the lccc
structure, which can also be found there. The same is true for the separated objects:
they are also an lccc (not a pretopos, though), where the inclusion also preserves the
lccc structure.
Theorem 5.3.14 Let f: B
/ A be a morphism in E.
1. When f is a morphism of separated objects, Mf is separated.

5.3. CLOSURE PROPERTIES
99
2. When f is a morphism of sheaves, Mf is a sheaf.
Proof. I will give the argument for sheaves, but the proof is the same in both cases.
Let M = Mf be the M-type in E associated to f, and obtain the sheaf LM by applying
the reﬂector to M. The object Pf(LM) is also a sheaf, because the inclusion preserves
the lccc structure. Because of the universal property of L the diagram
M
ηM
/
τ

iLM

Pf(M)
Pf(ηM)
/ Pf(iLM) ∼= iPf(LM)
can be ﬁlled. Therefore iLM has the structure of Pf-coalgebra in such a way that
ηM is a Pf-coalgebra morphism. By ﬁnality of M, there is a Pf-coalgebra morphism
r: iLM
/ M such that rηM = 1. So ηMrηM = ηM = 1ηM and the universal property
of ηM immediately gives that also ηMr = 1. So M ∼= iLM and M is a sheaf.
□
Remark 5.3.15 In both cases, it would have been enough to require that the co-
domain of f is a sheaf (respectively separated). This essentially because the sheaves
and separated objects both form exponential ideals in E.
Remark 5.3.16 In case the universal closure operator is not known to derive from a
cartesian reﬂector, it is still possible to show that the M-type M = Mf for a morphism
f: B
/ A with separated codomain is separated. For that purpose, write x =c x′ for
x, x′ ∈X, when (x, x′) ∈c(∆: X
/ X × X). An object X is then separated, when
x =c x′ ⇒x = x′
(see [44], Lemma 4.3.6). To show that M is separated, consider
B = {(supa(t), supa′(t′)) ∈M × M | supa(t) =c supa′(t′)}.
B has the structure of a Pf-coalgebra in such a way that composing B ⊆M × M
with either of the two projections yields a Pf-coalgebra morphism. In other words,
B has the structure of a bisimulation on M. This is true, simply because whenever
supa(t) =c supa′(t′), then a =c a′, and hence a = a′, because A is separated. And
because one therefore also has that tb =c t′b for every b ∈Ba.
But because of ﬁnality of M, all bisimulations on M are contained in the diagonal
of M. Hence
supa(t) =c supa′(t′) ⇒supa(t) = supa′(t′)
(5.13)
and M is separated.

100
CHAPTER 5. COINDUCTION IN CATEGORIES
Remark 5.3.17 As a corollary, one obtains that the subcategory of separated objects
for a universal closure operator on a ΠW-pretopos E has W-types. E has M-types by
Corollary 5.2.3, and for morphisms f between separated objects, these M-types are
separated by the preceeding remark. But since W-types are subobjects of M-types (see
Lemma 2.1.4), and separated objects are easily seen to be closed under subobjects,
the W-types associated to such morphisms are separated as well. Another way of
showing this fact is by directly proving (5.13) by induction.
Theorem 5.3.14 now directly shows:
Theorem 5.3.18 If D is a reﬂective subcategory of a ΠM-pretopos E with cartesian
reﬂector, D is also a ΠM-pretopos.
Corollary 5.3.19 f C is an internal site in a ΠM-pretopos E such that the inclu-
sion of internal sheaves in presheaves has a cartesian left adjoint (a “sheaﬁﬁcation
functor”), then the category Sh(C) of internal sheaves for the site C in E is a ΠM-
pretopos.

Chapter 6
Non-well-founded set theory
Since its ﬁrst appearance in the book by Joyal and Moerdijk [47], algebraic set theory
has always claimed the virtue of being able to describe, in a single framework, various
diﬀerent set theories. However, despite the suggestion in [47] to construct sheaf models
for the theory of non-well-founded set theory in the context of algebraic set theory,
it appears that up until now no one ever tried to put small maps to use in order to
model a set theory with the Anti-Foundation Axiom AFA.
This Chapter, which is joint work with Federico De Marchi, provides a ﬁrst step
in this direction. In particular, I build a categorical model of the weak constructive
theory CZF0 of (possibly) non-well-founded sets, studied by Aczel and Rathjen in
[7], extended by AFA. Classically, the universe of non-well-founded sets is known to
be the ﬁnal coalgebra of the powerclass functor [5]. Therefore, it should come as no
surprise that one can build such a model from the ﬁnal coalgebra for the functor Ps
determined by a class of small maps.
Perhaps more surprising is the fact that such a coalgebra always exists. I prove
this by means of a ﬁnal coalgebra theorem, for a certain class of functors on a ﬁnitely
complete and cocomplete category. The intuition that guides one along the argument
is a standard proof of a ﬁnal coalgebra theorem by Aczel [5] for set-based functors on
the category of classes, that preserve inclusions and weak pullbacks. Given one such
functor, he ﬁrst considers the coproduct of all small coalgebras, and show that this
is a weakly terminal coalgebra. Then, he quotients by the largest bisimulation on it,
to obtain a ﬁnal coalgebra. The argument works more generally for any functor of
which one knows that there is a generating family of coalgebras, for in that case one
can take the coproduct of that family, and perform the construction as above. The
condition of a functor being set-based assures that one is in such a situation.
My argument is a recasting of the given one in the internal language of a category.
Unfortunately, the technicalities that arise when externalising an argument which is
given in the internal language can be oﬀ-putting at times. For instance, the external-
isation of internal colimits forces one to work in the context of indexed categories and
indexed functors. Within this context, I say that an indexed functor (which turns
101

102
CHAPTER 6. NON-WELL-FOUNDED SET THEORY
pullbacks into weak pullbacks) is small-based when there is a “generating family” of
coalgebras. For such functors I prove an indexed ﬁnal coalgebra theorem. I then
apply this machinery to the case of a Heyting pretopos with a class of small maps,
to show that the functor Ps is small-based and therefore has a ﬁnal coalgebra. As a
byproduct, I am able to build the M-type for any small map f (i.e. the ﬁnal coalgebra
for the polynomial functor Pf associated to f).
For sake of clarity, I have tried to collect as much indexed category theory as I
could in a separate Section. This forms the content of Section 6.1. This should not
aﬀect readability of Section 6.2, where I prove the ﬁnal coalgebra results. Finally, in
Section 6.3 I prove that the ﬁnal Ps-coalgebra is a model of the theory CZF0+AFA.
The choice to focus on a weak set theory such as CZF0 is deliberate, since stronger
theories can be modelled simply by adding extra requirements for the class of small
maps. For example, one can model the theory CST of Myhill [62] (plus AFA), by
adding the Exponentiation Axiom, or IZF−+AFA by adding the Powerset, Separa-
tion and Collection axioms. And one can force the theory to be classical by working
in a Boolean pretopos. This gives a model of ZF−+AFA, the theory presented in
Aczel’s book [5], apart from the Axiom of Choice. And, ﬁnally, by adding appropri-
ate axioms, it is possible to build a model of the theory CZF−+AFA, which was
extensively studied by M. Rathjen in [71, 72].
The present results ﬁt in the general picture described in the previous Chapter.1
Recall that there I set myself the task of investigating a non-well-founded analogue to
the established connection between Martin-L¨of type theory, constructive set theory
and the theory of ΠW-pretoposes.
In the well-founded picture, W-types in ΠW-
pretoposes can be used to obtain models for (well-founded) set theories, as explained
in Chapter 4.
The analogy suggests that M-types in ΠM-pretoposes provide the
means for constructing models for non-well-founded set theories. But in this Chapter,
it will turn out that the M-types in ΠM-pretoposes are not necessary for that purpose.
This phenomenon resembles the situation in [52], where Lindstr¨om built a model of
CZF−+AFA out of (intensional) Martin-L¨of type theory with one universe, without
making any use of M-types.
This Chapter has been submitted for publication.
6.1
Generating objects in indexed categories
As mentioned before, the aim is to prove a ﬁnal coalgebra theorem for a special class
of functors on ﬁnitely complete and cocomplete categories. The proof of such results
will be carried out by repeating in the internal language of such a category C a classical
set-theoretic argument. This forces one to consider C as an indexed category, via its
canonical indexing C, whose ﬁbre over an object X is the slice category C/X. I shall
1Incidentally, I expect that, together with the results on sheaves therein, they should yield an
adequate response to the suggestion by Joyal and Moerdijk.

6.1. GENERATING OBJECTS IN INDEXED CATEGORIES
103
then focus on endofunctors on C which are components over 1 of indexed endofunctors
on C. For such functors, one can prove the existence of an indexed ﬁnal coalgebra,
under suitable assumptions. The component over 1 of this indexed ﬁnal coalgebra
will be the ﬁnal coalgebra of the original C-endofunctor.
Although I apply this result in a rather speciﬁc context, it turns out that all the
basic machinery needed for the proof can be stated in a more general setting. This
Section collects as much of the indexed category theoretic material as possible, hoping
to make the other Sections easier to follow for a less experienced reader.
I will mostly be concerned with S-cocomplete indexed categories for a cartesian
base category S. The reader should consult Appendix A for the relevant deﬁnitions.
The notation follows closely that of Johnstone in Chapters B1 and B2 of [44].
The ﬁrst step, in the set-theoretic argument to build the ﬁnal coalgebra, is to
identify a “generating family” of coalgebras, in the sense that any other coalgebra is
the colimit of all coalgebras in that family mapping to it. When forming the internal
diagram of those coalgebras that map into a given one, say (A, α), I need to select out
of an object of maps to A those which are coalgebra morphisms. In order to consider
such objects of arrows in the internal language, I need to introduce the following
concept:
Deﬁnition 6.1.1 Let E and A be two objects, respectively in ﬁbres CU and CI of an
S-indexed category C. Whenever it exists, the object Hom(E, A) in S is called the
internal homset from E to A (in S), if it ﬁts into a span
U
Hom(E, A)
s
o
t
/ I
(6.1)
in S and there is a generic arrow ε: s∗E
/ t∗A in CHom(E,A), with the following
universal property: for any other span in S
U
J
x
o
y
/ I
and any arrow ψ: x∗E
/ y∗A in CJ, there is a unique arrow χ: J
/ Hom(E, A) in
S such that sξ = x, tχ = y and χ∗ε ∼= ψ (via the canonical isomorphisms arising
from the two previous equalities). The object E is called exponentiable, if Hom(E, A)
exists for all A in some ﬁbre of C.
Remark 6.1.2 It follows from the deﬁnition, via a standard diagram chasing, that
the reindexing along an arrow f: V
/ U in S of an exponentiable object E in CU is
again exponentiable.
Remark 6.1.3 The reader is advised to check that, in case C is a cartesian category
and C is its canonical indexing over itself, the notion of exponentiable object agrees
with the standard one of an exponentiable morphism (see Appendix A).

104
CHAPTER 6. NON-WELL-FOUNDED SET THEORY
Given an exponentiable object E in CU and an object A in CI, the canonical
cocone from E to A is in the internal language the cocone of those morphisms from E
to A. Formally, it is described as the internal diagram (KA, LA), where the internal
category KA and the diagram object LA are deﬁned as follows. KA
0 is the object
Hom(E, A), with arrows s and t as in (6.1), and KA
1 is the pullback
KA
1
d0
/
x

KA
0
s

Hom(E, E)
t
/ U,
where
U
Hom(E, E)
s
o
t
/ U
is the internal hom of E with itself. In the ﬁbres over Hom(E, A) and Hom(E, E)
one has generic maps ε: s∗E
/ t∗A and ε: s∗E
/ t
∗E, respectively.
The codomain map d0 of KA is the top row of the pullback above, whereas d1 is
induced by the composite
(sx)∗E
x∗ε
−−→(tx)∗E ∼= (sd0)∗E
d∗
0ε
−−→(td0)∗A
via the universal property of Hom(E, A) and ε.
The internal diagram LA is now the object s∗E in CKA
0 , and the arrow from d∗
1LA
to d∗
0LA is (modulo the coherence isomorphisms) x∗ε.
When the colimit of the canonical cocone from E to A is A itself, one should
think of A as being generated by the maps from E to it. Therefore, it is natural to
introduce the following terminology.
Deﬁnition 6.1.4 The object E is called a generating object if, for any A in C = C1,
A = colimKALA.
Later, we shall see how F-coalgebras form an indexed category. Then, a generating
object for this category will provide, in the internal language, a “generating family”
of coalgebras. The set-theoretic argument then goes on by taking the coproduct of all
coalgebras in that family. This provides a weakly terminal coalgebra. Categorically,
the argument translates to the following result.
Proposition 6.1.5 Let C be an S-cocomplete S-indexed category with a generating
object E in CU. Then, C = C1 has a weakly terminal object (an object is weakly
terminal if it is satisﬁes the existence but not necessarily the uniqueness requirement
for a terminal object).

6.1. GENERATING OBJECTS IN INDEXED CATEGORIES
105
Proof. One builds a weakly terminal object in C by taking the internal colimit Q
of the diagram (K, L) in C, where K0 = U, K1 = Hom(E, E) (with domain and
codomain maps s and t, respectively), L = E and the map from d∗
0L to d∗
1L is
precisely ε.
Given an object A = colimKALA in C, notice that the serially commuting diagram
KA
1
d0
/
d1
/
x

KA
0
s

Hom(E, E)
t
/
s
/ U
deﬁnes an internal functor J: KA
/ K. One has a commuting triangle of internal
S-categories
KA
J
/
 B
B
B
B
B
B
B
B
K

1.
Taking left adjoint along the reindexing functors which this induces on categories of
internal diagrams, one gets that colimKA ∼= colimK ◦LanJ. Hence, to give a map
from A = colimKALA to Q = colimKL it is suﬃcient to give a morphism of internal
diagrams from (K, LanJLA) to (K, L), or, equivalently, from (KA, LA) to (KA, J∗L),
but the reader can easily check that these two diagrams are in fact the same.
□
Once the coproduct of coalgebras in the “generating family” is formed, the set-
theoretic argument is concluded by quotienting it by its largest bisimulation. One
way to build such a bisimulation constructively is to identify a generating family of
bisimulations and then taking their coproduct.
This suggests that to apply Proposition 6.1.5 twice; ﬁrst in the indexed category
of coalgebras, in order to obtain a weakly terminal coalgebra (G, γ), and then in the
(indexed) category of bisimulations over (G, γ). To this end, one needs to prove co-
completeness and existence of a generating object for these categories. The language
of inserters allows one to do that in a uniform way.
Instead of giving the general deﬁnition of an inserter in a 2-category, I will only
describe an inserter explicitly for the 2-category of S-indexed categories.
Deﬁnition 6.1.6 Given two S-indexed categories C and D and two parallel S-
indexed functors F, G: C
/ D, the inserter I = Ins(F, G) of F and G has as ﬁbre IX
the category whose objects are pairs (A, α) consisting of an object A in CX and an
arrow in DX from F XA to GXA, an arrow φ: (A, α)
/ (B, β) being a map φ: A
/ B
in CX such that GX(φ)α = βF X(φ).
The reindexing functor for a map f: Y
/ X in S takes an object (A, α) in IX to
the object (f ∗A, f ∗α), where f ∗α has to be read modulo the coherence isomorphisms
of D, but I shall ignore these thoroughly.

106
CHAPTER 6. NON-WELL-FOUNDED SET THEORY
There is an indexed forgetful functor U: Ins(F, G)
/ C which takes a pair (A, α)
to its carrier A; the maps α determine an indexed natural transformation FU
/ GU.
The triple (Ins(F, G), U, FU
/ GU) has a universal property, like any good categor-
ical construction, but it will not be used. The situation is depicted as below:
Ins(F, G)
U
/ C
F
/
G
/ D.
(6.2)
A tedious but otherwise straightforward computation, yields the proof of the fol-
lowing:
Lemma 6.1.7 Given an inserter as in (6.2), if C and D are S-cocomplete and F
preserves indexed colimits, then Ins(F, G) is S-cocomplete and U preserves colimits
(in other words, U creates colimits). In particular, Ins(F, G) has all internal colimits,
and U preserves them.
Example 6.1.8 Here, we shall be concerned with two particular examples of insert-
ers. One is the indexed category F −Coalg of coalgebras for an indexed endofunctor
F on C, which can be presented as the inserter
Ins(Id, F)
U
/ C
Id
/
F
/ C.
(6.3)
More concretely, (F−Coalg)I = F I−coalg consists of pairs (A, α) where A is an object
and α: A
/ F IA a map in CI, and morphisms from such an (A, α) to a pair (B, β)
are morphisms φ: A
/ B in CI such that F I(φ)α = βφ. The reindexing functors are
the obvious ones.
The other inserter we shall encounter is the indexed category Span(M, N) of spans
over two objects M and N in C1 of an indexed category. This is the inserter
Ins(∆, ⟨M, N⟩)
U
/ C
∆
/
⟨M,N⟩
/ C×C
(6.4)
Where C×C is the product of C with itself (which is deﬁned ﬁbrewise), ∆is the
diagonal functor (also deﬁned ﬁbrewise), and ⟨M, N⟩is the pairing of the two constant
indexed functors determined by M and N. By this I mean that an object in C is
mapped to the pair (M, N) and an object in CX is mapped to the pair (X∗M, X∗N).
Remark 6.1.9 Notice that, in both cases, the forgetful functors preserve S-indexed
colimits in C, hence both F −Coalg and Span(M, N) are S-cocomplete, and also
internally cocomplete, if C is.
In order to apply Proposition 6.1.5 to these indexed categories, one needs to ﬁnd
generating objects for them. This will be achieved by means of the following two
lemmas.

6.1. GENERATING OBJECTS IN INDEXED CATEGORIES
107
First of all, consider an S-indexed inserter I = Ins(F, G) as in (6.2), such that F
preserves exponentiable objects. Then, given an exponentiable object E in CU, deﬁne
an arrow U
r−→U in S and an object (E, ε) in IU, as follows.
Then form the generic map ε: s∗F UE
/ t∗GUE associated to the internal hom of
F UE and GUE (which exists because F preserves exponentiable objects), and then
deﬁne U as the equaliser of the following diagram
U
e
/ Hom(F UE, GUE)
s
/
t
/ U,
(6.5)
the arrow r: U
/ U being one of the two equal composites se = te.
Put E = r∗E and
ε = F U(r∗E)
∼
=
/ e∗s∗F UE
e∗ε / e∗t∗GUE
∼
=
/ GU(r∗E).
The pair (E, ε) deﬁnes an object in IU.
Lemma 6.1.10 The object (E, ε) is exponentiable in Ins(F, G).
Proof. Consider an object (A, α) in a ﬁbre IX. Then, I deﬁne the internal hom
Hom((E, ε), (A, α)) as follows.
First, I build the internal homset
U
L = Hom(E, A)
s
o
t
/ X
of A and E in C, with generic map χ: s∗E
/ t∗A. Because F preserves exponentiable
objects, it is also possible to form the internal hom in D
U
Hom(F UE, GXA)
s
o
t
/ X
with generic map χ: s∗F UE
/ t
∗GXA.
By the universal property of χ, the two
composites in DL
s∗F UE
∼
=
/ F Ls∗E
F Lχ / F L(t∗A)
∼
=
/ t∗F XA
t∗α
/ t∗GXA
and
s∗F UE
s∗ε
/ s∗GUE
∼
=
/ GLs∗E
GLχ / GLt∗A
∼
=
/ t∗GXA
give rise to two maps p1, p2: L
/ Hom(F UE, GXA) in S, whose equaliser i: M
/ L
has as domain the internal hom Hom((E, ε), (A, α)).
The generic map (si)∗(E, ε)
/ (ti)∗(A, α) in IM associated to this internal hom
forms the central square of the following diagram, and this commutes because its

108
CHAPTER 6. NON-WELL-FOUNDED SET THEORY
outer sides are the reindexing along the maps p1i = p2i of the generic map χ above:
(si)∗F UE
(si)∗ε
/
∼
=

(si)∗GUE
∼
=

F M(si)∗E
(si)∗(E,ε)
/
F Mi∗χ

GM(si)∗E
GMi∗χ

F M(ti)∗A
(ti)∗(A,α)
/
∼
=

GM(ti)∗A
∼
=

(ti)∗F XA
(ti)∗α
/ (ti)∗GXA.
The veriﬁcation of its universal property is a lengthy but straightforward exercise. □
Next, I ﬁnd a criterion for the exponentiable object (E, ε) to be generating.
Lemma 6.1.11 Consider an inserter of S-indexed categories as in (6.2), where C
and D are S-cocomplete, and F preserves S-indexed colimits. If (E, ε) is an exponen-
tiable object in IU and for any (A, α) in I1 the equation
colimK(A,α)UL(A,α) ∼= U(A, α) = A
holds, where (K(A,α), L(A,α)) is the canonical cocone from (E, ε) to (A, α), then (E, ε)
is generating in Ins(F, G).
Proof. Recall from Lemma 6.1.7 that Ins(F, G) is internally cocomplete and the for-
getful functor U: Ins(F, G)
/ C preserves internal colimits. Therefore, given an arbi-
trary object (A, α) in I1, one can always form the colimit (B, β) = colimK(A,α)L(A,α).
All I need to show is that (B, β) ∼= (A, α). The isomorphism between B and A exists
because, by the assumption,
B = U(B, β) = UcolimK(A,α)L(A,α) ∼= colimK(A,α)UL(A,α) ∼= A.
Now, it is not too hard to show that the transpose of the composite
colimK(A,α)F UU UL(A,α) ∼= FUcolimK(A,α)L(A,α)
β−→GUcolimK(A,α)L(A,α)
is (modulo isomorphisms preserved through the adjunction colimK(A,α) ⊣K(A,α)∗) the
transpose of α. Hence, β ∼= α and I am done.
□
As an example, I show the following result about the indexed category of spans:
Proposition 6.1.12 Given an S-cocomplete indexed category C and two objects M
and N in C1, if C has a generating object, then so does the indexed category of spans
P = Span(M, N).

6.2. FINAL COALGEBRA THEOREMS
109
Proof.
Recall from Example 6.1.8 that the functor U: Span(M, N)
/ C creates
indexed and internal colimits.
If E in CU is a generating object for C, then, by
Lemma 6.1.10 one can build an exponentiable object
(E, ε) = M
E
ε1
o
ε2
/ N
in PU. I am now going to prove that Span(M, N) meets the requirements of Lemma
6.1.11 to show that E is a generating object.
To this end, consider a span
(A, α) = M
A
α1
o
α2 / N
in P1. Then, I can form the canonical cocone (K(A,α), L(A,α)) from (E, ε) to (A, α)
in Span(M, N), and the canonical cocone (KA, LA) from E to A in C. The map
r: U
/ U of (6.5) induces an internal functor u: K(A,α)
/ KA, which is an isomor-
phism.
Therefore, the induced reindexing functor u∗: CKA
/ CK(A,α) between the
categories of internal diagrams in C is also an isomorphism, and hence colimK(A,α)u∗∼=
colimKA. Moreover, it is easily checked that u∗LA = UL(A,α). Therefore, one has
colimK(A,α)UL(A,α) ∼= colimK(A,α)u∗LA ∼= colimKALA ∼= A
and this ﬁnishes the proof.
□
6.2
Final coalgebra theorems
In this Section, I am going to use the machinery of Section 6.1 in order to prove an
indexed ﬁnal coalgebra theorem. I then give an axiomatisation for class of small maps,
which is a bit diﬀerent from the one studied in Chapter 4, for a Heyting pretopos
with an (indexed) natural number object, and apply the theorem in order to derive
existence of ﬁnal coalgebras for various functors in this context. In more detail, I
shall show that every small map has an M-type, and that the functor Ps has a ﬁnal
coalgebra.
6.2.1
An indexed ﬁnal coalgebra theorem
In this Section, C is a category with ﬁnite limits and stable ﬁnite colimits (that is,
its canonical indexing C is a C-cocomplete C-indexed category), and F is an indexed
endofunctor over it (I shall write F for F 1).
Recall from Remark 6.1.9 that the
indexed category F −Coalg is C-cocomplete (and the indexed forgetful functor U
preserves indexed colimits).

110
CHAPTER 6. NON-WELL-FOUNDED SET THEORY
I say that F is small-based whenever there is an exponentiable object (E, ε) in F U−
coalg such that, for any other F-coalgebra (A, α), the canonical cocone (K(A,α), L(A,α))
from (E, ε) to (A, α) has the property that
colimK(A,α)UL(A,α) ∼= U(A, α) = A.
(6.6)
It is immediate from Example 6.1.8 and Lemma 6.1.11 that, whenever there is
a pair (E, ε) making F small-based, this is automatically a generating object in
F −Coalg. I shall make an implicit use of this generating object in the proof of:
Theorem 6.2.1 Let F be a small-based indexed endofunctor on a category C as
above. If F 1 takes pullbacks to weak pullbacks, then F has an indexed ﬁnal coalgebra.
Before giving a proof, I need to introduce a little technical lemma. A weak pullback
is a square that is satisﬁes the existence requirement for pullbacks (but not necessarily
the uniqueness requirement).
Lemma 6.2.2 If F = F 1 turns pullbacks into weak pullbacks, then every pair of
arrows
(A, α)
φ
/ (C, γ)
(B, β)
ψ
o
can be completed to a commutative square by the arrows
(A, α)
(P, χ)
µ
o
ν
/ (B, β)
in such a way that the underlying square in C is a pullback. Moreover, if ψ is a
coequaliser in C, then so is µ.
Proof. Build P as the pullback of ψ and φ in C = C1. Then, since F turns pullbacks
into weak pullbacks, there is a map χ: P
/ FP, making both µ and ν into coalge-
bra morphisms. The second statement follows at once by the assumption that ﬁnite
colimits in C are stable.
□
Proof of Theorem 6.2.1. Because F −Coalg is C-cocomplete, it is enough, by
Lemma A.19, to show that the ﬁbre over 1 of this indexed category admits a terminal
object.
Given that (E, ε) is a generating object in F −Coalg, Proposition 6.1.5 implies the
existence of a weakly terminal F-coalgebra (G, γ). The classical argument now goes
on taking the quotient of (G, γ) by the maximal bisimulation on it, in order to obtain
a terminal coalgebra.
I do that as follows.
Let B = Span((G, γ), (G, γ)) be the
indexed category of spans over (G, γ), i.e. bisimulations. Then, by Remark 6.1.9, B
is a C-cocomplete C-indexed category, and by Proposition 6.1.12 it has a generating

6.2. FINAL COALGEBRA THEOREMS
111
object. Applying again Proposition 6.1.5, I get a weakly terminal span (i.e. a weakly
terminal bisimulation)
(G, γ)
(B, β)
λ
o
ρ
/ (G, γ).
I now want to prove that the coequaliser
(B, β)
λ
/
ρ
/ (G, γ)
q
/ (T, τ)
is a terminal F-coalgebra.
It is obvious that (T, τ) is weakly terminal, since (G, γ) is. On the other hand, suppose
(A, α) is an F-coalgebra and f, g: (A, α)
/ (T, τ) are two coalgebra morphisms; then,
by Lemma 6.2.2, the pullback s (resp. t) in C of q along f (resp. g) is a coequaliser
in C, which carries the structure of a coalgebra morphism into (A, α). One further
application of Lemma 6.2.2 to s and t yields a commutative square in F −coalg
(P, π)
s′
/
t′

•
t

•
s
/ (A, α)
whose underlying square in C is a pullback. Furthermore, the composite d = ts′ = st′
is a regular epi in C, hence an epimorphism in F −coalg.
Write es (resp. et) for the composite of t′ (resp. s′) with the projection of the pullback
of f (resp. g) and q to G. Then, the triple ((P, π), es,et) is a span over (G, γ); hence,
there is a morphism of spans
χ: ((P, π), es,et)
/ ((B, β), λ, ρ).
It is now easy to compute that fd = qλχ = qρχ = gd, hence f = g, and the proof is
complete.
□
As a particular instance of Theorem 6.2.1, one can recover the classical result from
Aczel [5, p. 87].
Corollary 6.2.3 (Final Coalgebra Theorem) Any standard functor (on the cat-
egory of classes) that preserves weak pullbacks has a ﬁnal coalgebra.
Proof. First of all, notice that preservation of weak pullbacks is equivalent to our
requirement that pullbacks are mapped to weak pullbacks. Moreover, the category
of classes has ﬁnite limits and stable ﬁnite colimits. As an exponentiable object, take
the class U of all small coalgebras.
Now, consider a standard functor F on classes (in Aczel’s terminology). This can
easily be seen as an indexed endofunctor, since for any two classes X and I, one has

112
CHAPTER 6. NON-WELL-FOUNDED SET THEORY
X/I ∼= XI (so, the action of F can be deﬁned componentwise). It is now suﬃcient to
observe that every F-coalgebra is the union of its small subcoalgebras, therefore the
functor is small-based in our sense.
□
Remark 6.2.4 With a bit of eﬀort, the reader can see in the present proof of The-
orem 6.2.1 an abstract categorical reformulation of the classical argument given by
Aczel in his book [5]. In order for that to work, he had to assume that the functor
preserves weak pullbacks (and so did I, in my reformulation). Later, in a joint paper
with Nax Mendler [6], they gave a diﬀerent construction of ﬁnal coalgebras, which
allowed them to drop this assumption. A translation of that argument in my set-
ting, would reveal that the construction relies heavily on the exactness properties of
the ambient category of classes. Since the functors in the following examples always
preserve weak pullbacks, I prefer sticking to the original version of the result (thus
making weaker assumptions on the category C), without bothering the reader with a
(presently unnecessary) second version, which, however, I believe can be proved.
More recently, the work of Ad´amek et al. [8] has shown that every endofunctor on
the category of classes is small-based, thereby proving that it has a ﬁnal coalgebra
(by Aczel and Mendler’s result).
Their proof makes a heavy use of set theoretic
machinery, which would be interesting to analyse in the present setting.
6.2.2
Small maps
I am now going to consider on C a class of small maps. This will allow us to show
that certain polynomial functors, as well as the powerclass functor, are small-based,
and therefore we will be able to apply Theorem 6.2.1 to obtain a ﬁnal coalgebra for
them.
From now on, C will denote a Heyting pretopos with an (indexed) natural number
object. Recall that such categories have all ﬁnite colimits, and these are stable under
pullback (see Lemma A.12).
As I explained in Chapter 4, there are various axiomatisations for a class of small
maps, starting with that of Joyal and Moerdijk in [47]. In this Chapter, I will follow
the formulation of Awodey et al. [9] and Awodey and Warren [10]. A comparison
with the original approach by Joyal and Moerdijk and the approach in Chapter 4,
will appear in Remark 6.2.5 below.
A class S of arrows in C is called a class of small maps if it satisﬁes the following
axioms:
(S1) S is closed under composition and identities;

6.2. FINAL COALGEBRA THEOREMS
113
(S2) if in a pullback square
A
/
g

B
f

C
/ D
f ∈S, then g ∈S;
(S3) for every object C in C, the diagonal ∆C: C
/ C×C is in S;
(S4) given an epi e: C
/ D and a commutative triangle
C
e
/ /
f
&
D
g
x
A,
if f is in S, then so is g;
(S5) if f: C
/ A and g: D
/ A are in S, then so is their copairing
[f, g]: C + D
/ A.
I have chosen labels that were also used in Chapter 4, but I do not think this will
lead to any confusion.
An arrow in S will be called small, and objects X will be called small in case
the unique arrow X
/ 1 is small. A small subobject R of an object A is a subobject
R /
/A in which R is small. A small relation between objects A and B is a subobject
R /
/A×B such that its composite with the projection on A is small (notice that
this does not mean that R is a small subobject of A×B).
On a class of small maps, I also require representability of small relations by means
of a powerclass object:
(P1) for any object C in C there is an object Ps(C) and a natural correspondence
between maps I
/ Ps(C) and small relations between I and C.
In particular, the identity on Ps(C) determines a small relation ∈C⊆Ps(C)×C. One
should think of Ps(C) as the object of all small subobjects of C; the relation ∈C then
becomes the membership relation between elements of C and small subobjects of C.
The association C 7→Ps(C) deﬁnes a covariant functor (in fact, a monad) on C. I
further require the two following axioms:
(I) The natural number object N is small;

114
CHAPTER 6. NON-WELL-FOUNDED SET THEORY
(R) There exists a universal small map π: E
/ U in C, such that any other small
map f: A
/ B ﬁts in a diagram
A
f

•
o

/ E
π

B
•
/
q
oo
U
where both squares are pullbacks and q is epi.
It can now be proved that a class S satisfying these axioms induces a class of
small maps on each slice C/C. Moreover, the reindexing functor along a small map
f: C
/ D has a right adjoint Πf: C/C
/ C/D. In particular, it follows that all small
maps are exponentiable in C (see [10]).
Remark 6.2.5 The axioms that I have chosen for the class of small maps subsume
all of the Joyal-Moerdijk axioms in [47, pp. 6–8], except for the collection axiom (A7).
In particular, the Descent Axiom (A3) can be seen to follow from axioms (S1) −(S5)
and (P1).
Conversely, the axioms of Joyal and Moerdijk imply all of the present axioms
except for (S3) and (I). The results in Section 6.3 will imply that, by adding these
axioms, a model of the weak set theory CZF0 can be obtained in the setting of [47].
The axioms given here are in a similar manner incomparable in strength with
the axioms in Chapter 4. A class of small maps as deﬁned here need not satisfy the
axioms called (F4) and (F5) in the statement of Lemma 4.2.5, while a (representable)
class of small maps in the sense of Chapter 4 need not satisfy (S3) and (S4).
6.2.3
Final coalgebras in categories with small maps
From now on, I shall consider on C a class of small maps S. Using their properties, I
am able to prove the existence of the M-type for every small map f: D
/ C, as well
as the existence of a ﬁnal Ps-coalgebra.
Recall that a polynomial functor Pf induced by an exponentiable map f: D
/ C
in a cartesian category C is indexed, see Theorem 2.1.3. In fact, it can be presented
as the composite Pf = ΣCΠfD∗of three indexed functors preserving pullbacks. It
is therefore also immediate that Pf preserves pullbacks. Of course, the indexed M-
type of f is the indexed ﬁnal coalgebra of Pf (if necessary, see Appendix A for the
deﬁnition of an indexed ﬁnal coalgebra).
Theorem 6.2.6 If f: D
/ C is a small map in C, then f has an (indexed) M-type.
Proof. In order to obtain an (indexed) ﬁnal Pf-coalgebra, I want to apply Theorem
6.2.1, and for this, what remains to be checked is that Pf is small-based. To this end,

6.2. FINAL COALGEBRA THEOREMS
115
I ﬁrst need to ﬁnd an exponentiable coalgebra (E, ε), and then to verify condition
(6.6).
The universal small map π: E
/ U in C is exponentiable, as I noticed after the
presentation of axiom (R). Hence, unwinding the construction preceding Lemma
6.1.10, I obtain an exponentiable object in Pf−Coalg. Using the internal language of
C, I can describe (E, ε) as follows.
The object U on which E lives is described as
U = {(u ∈U, t: Eu
/ Pf(Eu))},
and E is now deﬁned as
E = {(u ∈U, t: Eu
/ Pf(Eu), e ∈Eu)}.
The coalgebra structure ε: E
/ P U
f E takes a triple (u, t, e) (with te = (c, r)) to the
pair (c, s: Dc
/ E), where the map s takes an element d ∈Dc to the triple (u, t, r(d)).
Given a coalgebra (A, α), the canonical cocone from (E, ε) to it takes the following
form. The internal category K(A,α) is given by
K(A,α)
0
=
{(u ∈U, t: Eu →Pf(Eu), m: Eu →A) | Pf(m)t = αm};
K(A,α)
1
=
{(u, t, m, u′, t′, m′, φ: Eu →Eu′) | (u, t, m), (u′, t′, m′) ∈K(A,α)
0
,
t′φ = Pf(φ)t and m′φ = m}.
(Notice that, in writing the formulas above, I have used the functor Pf in the internal
language of C; I can safely do that because the functor is indexed. I shall implicitly
follow the same reasoning in the proof of Theorem 6.3.4 below, in order to build an
(indexed) ﬁnal Ps-coalgebra.)
The diagram L(A,α) is speciﬁed by a coalgebra over K(A,α)
0
, but for my purposes I only
need to consider its carrier, which is
UL(A,α) = {(u, t, m, e) | (u, t, m) ∈K(A,α)
0
and e ∈Eu}.
Condition (6.6) says that the colimit of this internal diagram in C is A, but this is
implied by the conjunction of the two following statements, which I am now going to
prove:
1. For all a ∈A there exists (u, t, m, e) ∈UL(A,α) such that me = a;
2. If (u0, t0, m0, e0) and (u1, t1, m1, e1) are elements of UL(A,α) such that m0e0 =
m1e1, then there exist (u, t, m, e) ∈UL(A,α) and coalgebra maps φi: Eu
/ Eui
(i = 0, 1) such that miφi = m and φie = ei.
Condition 2 is trivial: given (u0, t0, m0, e0) and (u1, t1, m1, e1), Lemma 6.2.2 allows
one to ﬁll a square
(P, γ)
/

(Eu0, t0)
m0

(Eu1, t1)
m1
/ (A, α),

116
CHAPTER 6. NON-WELL-FOUNDED SET THEORY
in such a way that the underlying square in C is a pullback (hence, P is a small object).
Therefore, (P, γ) is isomorphic to a coalgebra (Eu, t), and, under this isomorphism,
the span
(Eu0, t0)
(P, γ)
o
/ (Eu1, t1)
takes the form
(Eu0, t0)
(Eu, t)
φ0
o
φ1 / (Eu1, t1).
Moreover, since m0e0 = m1e1, there is an e ∈Eu such that φie = ei. Then, deﬁning
m as any of the two composites miφi, the element (u, t, m, e) in UL(A,α) satisﬁes the
desired conditions.
As for condition 1, ﬁx an element a ∈A.
One can build a subobject ⟨a⟩of A
inductively, as follows:
⟨a⟩0
=
{a};
⟨a⟩n+1
=
[
a′∈⟨a⟩n
t(Dc) where αa′ = (c, t: Dc
/ A).
Then, each ⟨a⟩n is a small object, because it is a small-indexed union of small objects.
For the same reason (since, by axiom (I), N is a small object) their union ⟨a⟩=
S
n∈N⟨a⟩n is small, and it is a subobject of A. It is not hard to see that the coalgebra
structure α induces a coalgebra α′ on ⟨a⟩(in fact, ⟨a⟩is the smallest subcoalgebra of
(A, α) containing a, i.e. the subcoalgebra generated by a), and, up to isomorphism,
this is a coalgebra t: Eu
/ PfEu, with embedding m: Eu
/ A. Via the isomorphism
Eu ∼= ⟨a⟩, the element a becomes an element e ∈Eu such that me = a. Hence, one
gets the desired 4-tuple (u, t, m, e) in UL(A,α).
This concludes the proof of the theorem.
□
Theorem 6.2.7 The powerclass functor Ps has an (indexed) ﬁnal coalgebra.
Proof. It is easy to check that Ps is the component on 1 of an indexed functor, and
that it maps pullbacks to weak pullbacks.
Therefore, once again, I just need to verify that Ps is small-based. I proceed exactly
like in the proof of Theorem 6.2.6 above, except for the construction of the coalgebra
(⟨a⟩, α′) generated by an element a ∈A in 1. Given a Ps-coalgebra (A, α), I construct
the subcoalgebra of (A, α) generated by a as follows. First, I deﬁne inductively the
subobjects
⟨a⟩0
=
{a};
⟨a⟩n+1
=
[
a′∈⟨a⟩n
α(a′).
Each ⟨a⟩n is a small object, and so is their union ⟨a⟩= S
n∈N⟨a⟩n. The coalgebra
structure α′ is again induced by restriction of α on ⟨a⟩.
□

6.3. THE FINAL PS-COALGEBRA AS A MODEL OF AFA
117
6.3
The ﬁnal Ps-coalgebra as a model of AFA
The standing assumption in this Section is that C is a Heyting pretopos with an
(indexed) natural number object and a class S of small maps. In the last Section, I
proved that in this case the Ps-functor has a ﬁnal coalgebra in C. Now I will explain
how this ﬁnal coalgebra can be used to model various set theories with the Anti-
Foundation Axiom. First I work out the case for the weak constructive theory CZF0,
and then indicate how the same method can be applied to obtain models for stronger,
better known or classical set theories.
The presentation of CZF0 follows that of Aczel and Rathjen in [7]; the same theory
appears under the name BCST* in the work of Awodey and Warren in [10]. It is a
ﬁrst-order theory whose underlying logic is intuitionistic; its non-logical symbols are
a binary relation symbol ϵ and a constant ω, to be thought of as membership and
the set of (von Neumann) natural numbers, respectively. Two more symbols will be
added for sake of readability, as I proceed to state the axioms. Notice that, as in
Chapter 4, in order to make a distinction between the membership relation of the set
theory and that induced by the powerclass functor, I shall denote the former by ϵ and
the latter by ∈.
The conventions of Chapter 4 are assumed to be in place. In particular, I use the
following abbreviations:
∃xϵa (. . .)
: =
∃x (xϵa ∧. . .),
∀xϵa (. . .)
: =
∀x (xϵa →. . .).
The axioms for CZF0 are (the universal closures) of the following statements:
(Extensionality) ∀x (xϵa ↔xϵb) →a = b
(Pairing) ∃y ∀x (xϵy ↔(x = a ∨x = b))
(Union) ∃y ∀x(xϵy ↔∃z (xϵz ∧zϵa))
(Emptyset) ∃y ∀x (xϵy ↔⊥)
(Intersection) ∃y ∀x (xϵy ↔(xϵa ∧xϵb))
(Replacement) ∀xϵa ∃!y φ →∃b ∀y (yϵb ↔∃xϵ a φ)
Two more axioms will be added, but before I do so, I want to point out that all
instances of ∆0-separation follow from these axioms, i.e. one can deduce all instances
of
(∆0-Separation) ∃y ∀x (xϵy ↔(xϵa ∧φ(x)))

118
CHAPTER 6. NON-WELL-FOUNDED SET THEORY
where φ is a formula in which y does not occur and all quantiﬁers are bounded.
Furthermore, in view of the above axioms, I can introduce a new constant ∅to denote
the empty set, and a function symbol s which maps a set x to its “successor” x∪{x}.
This allows one to formulate concisely our last axioms:
(Inﬁnity-1) ∅ϵω ∧∀xϵω (sxϵω)
(Inﬁnity-2) ψ(∅) ∧∀xϵω (ψ(x) →ψ(sx)) →∀xϵω ψ(x).
It is an old observation by Rieger that models for set theory can be obtained as
ﬁxpoints for the powerclass functor (see [76]). The same is true in the context of
algebraic set theory (see, [19] for a similar result):
Theorem 6.3.1 Every Ps-ﬁxpoint in C provides a model of CZF0.
Proof. Suppose there is a ﬁxpoint E: V
/ PsV , with inverse I. Call y the name
of a small subobject A ⊆V , when E(y) is its corresponding element in Ps(V ). One
interprets the formula xϵy as an abbreviation of the statement x ∈E(y) in the internal
language of C. Then, the veriﬁcation of the axioms for CZF0 goes as follows.
Extensionality holds because two small subobjects E(x) and E(y) of V are equal if
and only if, in the internal language of C, z ∈E(x) ↔z ∈E(y). The pairing of
two elements x and y represented by two arrows 1
/ V , is given by I(l), where l
is the name of the (small) image of their copairing [x, y]: 1 + 1
/ V . The union
of the sets contained in a set x is interpreted by applying the multiplication of the
monad Ps to (PsE)(E(x)). The intersection of two elements x and y in V is given by
I(E(x) ∩E(y)), where the intersection is taken in Ps(V ). The least subobject 0 ⊆V
is small, and its name ∅: 1
/ V models the empty set.
For the Replacement axiom, consider a, and suppose that for every xϵa there exists
a unique y such that φ. Then, the subobject {y | ∃xϵa φ} of V is covered by E(a),
hence small. Applying I to its name, one obtains the image of φ.
Finally, the Inﬁnity axioms follow from the axiom (I). The morphism ∅: 1
/ V to-
gether with the map s: V
/ V which takes an element x to x∪{x}, yields a morphism
α: N
/ V . Since N is small, so is the image of α, as a subobject of V , and applying I
to its name one gets an ω in V which validates the axioms Inﬁnity-1 and Inﬁnity-2. □
This theorem shows that every ﬁxpoint for the functor Ps models a very basic set
theory. Now, by demanding further properties of the ﬁxpoint, one can deduce the
validity of more axioms. For example, in [47], it is shown how the initial Ps-algebra
(which is a ﬁxpoint, after all) models the Axiom of Foundation. Here, I show that a
ﬁnal Ps-coalgebra satisﬁes the Anti-Foundation Axiom. To formulate this axiom, I
deﬁne the following notions. A (directed) graph consists of a pair of sets (n, e) such
that n ⊆e × e. A colouring of such a graph is a function c assigning to every node
xϵn a set c(x) such that
c(x) = {c(y) | (x, y)ϵe}.

6.3. THE FINAL PS-COALGEBRA AS A MODEL OF AFA
119
This can be formulated solely in terms of ϵ using the standard encoding of pairs and
functions. In ordinary set theory (with classical logic and the Foundation Axiom),
the only graphs that have a colouring are well-founded trees and these colourings are
then necessarily unique.
The Anti-Foundation Axiom says:
(AFA) Every graph has a unique colouring.
Proposition 6.3.2 If C has an (indexed) ﬁnal Ps-coalgebra, then this is a model for
the theory CZF0+AFA.
Proof. I clearly have to check just AFA, since any ﬁnal coalgebra is a ﬁxpoint. To
this end, note ﬁrst of all that, because (V, E) is an indexed ﬁnal coalgebra, one can
think of it as a ﬁnal Ps-coalgebra in the internal logic of C.
So, suppose one has a graph (n, e) in V . Then, n (internally) has the structure of a
Ps-coalgebra ν: n
/ Psn, by sending a node x ϵ n to the (small) set of nodes y ϵ n
such that (x, y)ϵe. The colouring of n is now given by the unique Ps-coalgebra map
γ: n
/ V .
□
By Theorem 6.2.7, it then follows at once:
Corollary 6.3.3 Every Heyting pretopos with a natural number object and class of
small maps contains a model of CZF0+AFA.
This result can be extended to theories stronger than CZF0. For example, to the
set theory CST introduced by Myhill in [62]. This theory is closely related to (in
fact, intertranslatable with) CZF0+Exp, where Exp is (the universal closure of) the
following axiom.
(Exponentiation) ∃t (fϵt ↔Fun(f, x, y))
Here, the predicate Fun(f, x, y) expresses the fact that f is a function from x
to y, and it can be formally written as the conjunction of ∀aϵx ∃!bϵy (a, b)ϵf and
∀zϵf ∃aϵx, bϵy (z = (a, b)).
Theorem 6.3.4 Assume the class S of small maps also satisﬁes
(E) The functor Πf preserves small maps for any f in S.
Then, C contains a model of CST+AFA.

120
CHAPTER 6. NON-WELL-FOUNDED SET THEORY
Proof. We already saw how the ﬁnal Ps-coalgebra (V, E) models CZF0+AFA. Now,
(E) implies that AB is small, if A and B are, so, E(y)E(x) is always small. This gives
rise to a small subobject of V , by considering the image of the morphism that sends
a function f ∈E(y)E(x) to the element in V representing its graph. The image under
I of the name of this small object is the desired exponential t.
□
Another example of a stronger theory which can be obtained by imposing further
axioms for small maps is provided by IZF−, which is intuitionistic ZF without the
Foundation Axiom. It is obtained by adding to CZF0 the following axioms:
(Powerset) ∃y ∀x(xϵy ↔∀zϵx(zϵa))
(Full Separation) ∃y ∀x(xϵy ↔(xϵa ∧φ(x)))
(Collection) ∀xϵa ∃y φ(x, y) →∃b ∀xϵa ∃yϵb φ(x, y)
(In Full Separation, y is not allowed to occur in φ.)
By now, the proof of the following theorem should be routine (if not, the reader
should consult [19]):
Theorem 6.3.5 Assume the class of small maps S also satisﬁes
(P2) if X
/ B belongs to S, then so does Ps(X
/ B);
(M) every monomorphism is small;
(C) for any two arrows p: Y
/ X and f: X
/ A where p is epi and f belongs to
S, there exists a quasi-pullback square of the form
Z
g

/ Y
p / / X
f

B
h
/ / A
where h is epi and g belongs to S.
Then, C contains a model of IZF−+AFA.
Corollary 6.3.6 If the pretopos C is Boolean, then classical logic is also true in the
model, which will therefore validate ZF−+AFA, Zermelo-Fraenkel set theory with
Anti-Foundation instead of Foundation.
Finally, one can build a model for a non-well-founded version of Aczel’s set theory
CZF, discussed in Chapter 4. The set theory CZF−+AFA is obtained by dropping
Set Induction and replacing it by AFA, and was studied by M. Rathjen in [71, 72].
It is obtained by adding to CZF0 the axiom AFA, as well as the following:

6.3. THE FINAL PS-COALGEBRA AS A MODEL OF AFA
121
(Strong Collection) ∀xϵa ∃y φ(x, y) →∃b B(xϵa, yϵb) φ(x, y)
(Subset Collection) ∃c ∀z (∀xϵa ∃yϵb φ(x, y, z) →∃dϵc B(xϵa, yϵd) φ(x, y, z)
Here B(xϵa, yϵb) φ abbreviates:
∀xϵa ∃yϵb φ ∧∀yϵb ∃xϵa φ.
In order for a class of small maps to give a model Subset Collection, the class has to
satisfy a rather involved axiom that will be called (F). In order to formulate it, I need
to introduce some notation. For two morphisms A
/ X and B
/ X, MX(A, B) will
denote the poset of multi-valued functions from A to B over X, i.e. jointly monic spans
in C/X,
A
P
oo
/ B
with P
/ X small and the map to A epic. By pullback, any f: Y
/ X determines
an order preserving function
f ∗: MX(A, B)
/ MY (f ∗A, f ∗B).
Theorem 6.3.7 Assume the class of small maps S also satisﬁes (C) as in Theorem
6.3.5, and the following axiom:
(F) for any two small maps A
/ X and B
/ X, there exist an epi p: X′
/ X, a
small map f: C
/ X′ and an element P ∈MC(f ∗p∗A, f ∗p∗B), such that for
any g: D
/ X′ and Q ∈MD(g∗p∗A, g∗p∗B), there are morphisms x: E
/ D
and y: E
/ C, with gx = fy and x epi, such that x∗Q ≥y∗P.
Then, C contains a model of CZF−+AFA.
Proof. Any ﬁxpoint for Ps will model Strong Collection in virtue of property (C) of
the class of small maps.
Because of (F) the ﬁxpoint will also model the axiom called Fullness in Chapter 4.
But Fullness is equivalent to Subset Collection over CZF0 and Strong Collection (see
[7]).
□
To illustrate that these are not empty theorems, I wish to conclude this Chapter
by presenting several cases to which they can be applied. Following [47], one can ﬁnd
several examples of categories endowed with classes of small maps satisfying some
of the discussed axioms. I cannot study them in detail, but I would at least like to
present them brieﬂy. For a more complete treatment, the reader is advised to look
at [47]. A thorough study of the properties of the resulting models is the subject for
future research.
The most obvious example is clearly the category of classes, where the notion of
smallness is precisely that of a class function having as ﬁbres just sets. This satisﬁes

122
CHAPTER 6. NON-WELL-FOUNDED SET THEORY
all the presented axioms. Along the same lines, one can consider the category of sets,
where the class of small maps consists of those functions whose ﬁbres have cardinality
at most κ, for a ﬁxed inﬁnite regular cardinal κ. This satisﬁes axioms (S1-5), (P1),
(I), (R), (M) and (C), but not (E). However, if κ is also inaccessible, then (E) is
satisﬁed, as well as (P2) and (F).
Consider the topos Sh(C) of sheaves over a site C, with pullbacks and a sub-
canonical topology. Then, for an inﬁnite regular cardinal κ greater than the number
of arrows in C, deﬁne the notion of smallness (relative to κ) following [47], Chap-
ter IV.3. This satisﬁes the axioms (S1-5), (P1), (I) and (R). Moreover, if κ is
inaccessible, it satisﬁes also (P2), (M), (C).
Finally, on the eﬀective topos Eff one can deﬁne a class of small maps in at least
two diﬀerent ways. For the ﬁrst, consider the global section functor Γ: Eff
/ Sets,
and ﬁx a regular cardinal κ. Then, say that a map f: X
/ Y is small if it ﬁts in a
quasi-pullback
P
/ /
g

X
f

Q
/ / Y
where P and Q are projectives and Γ(g) is κ-small in Sets. With this deﬁnition, the
class of small maps satisﬁes all the basic axioms (S1-5), (P1), (I) and (R), as well
as (C) and (M). If κ is inaccessible, it also satisﬁes (P2).
Alternatively, one can take the class of small maps in Eff investigated in Chapter
4. This notion of smallness satisﬁes all the axioms apart from (P2).

Appendix A
Categorical background
This Appendix is meant to provide the prospective reader of this thesis with suﬃcient
categorical background (or to refresh his, resp. her, memory). An excellent source on
these matters is the ﬁrst volume of Johnstone’s Elephant [44].
Cartesian categories A.1
A category C is called cartesian if it possesses all ﬁnite
limits. A functor between cartesian categories is called cartesian if it preserves ﬁnite
limits.
Practically all categories in this thesis are cartesian. Slightly better categories are
regular.
Regular categories A.2
There are several equivalent ways of deﬁning regular
categories. From a logical point of view, regular categories are cartesian categories
in which one can interpret the existential quantiﬁer. In any cartesian category, a
morphism f: Y
/ X induces a functor f ∗: Sub X
/ Sub Y , by pullback. In regular
categories, such functors f ∗have left adjoints ∃f. Applying ∃f to the maximal sub-
object Y ⊆Y , one obtains the image of f: a subobject X ⊆A is called the image
of a map f: Y
/ X in a category C, when it is the least subobject through which
f factors. A morphism f: Y
/ X having as image the maximal subobject X ⊆X
is called a cover. As one can see, the notions of image and cover make sense in any
category and will be used frequently in this thesis.
The notion of a regular category can now be deﬁned as follows. A cartesian category
C is called regular if every map in C factors, in a stable fashion, as a cover followed
by a monomorphism. A cartesian functor between regular categories is called regular
if it preserves covers.
For us, the most important fact about regular categories is the following result due
to Joyal:
Lemma A.3 In a regular category covers and regular epimorphism, i.e.
epimor-
phisms that arise as coequalisers, coincide.
123

124
APPENDIX A. CATEGORICAL BACKGROUND
To interpret full ﬁrst-order intuitionistic logic, regular categories have to be equipped
with more structure.
In fact, a regular category C needs to satisfy the following
two conditions to interpret disjunction and the universal quantiﬁer (and implication)
respectively:
• The subobject lattice Sub X of any object X in C has ﬁnite unions, preserved
by the operation f ∗for any f: Y
/ X.
• For any morphism f: Y
/ X, the functor f ∗: Sub X
/ Sub Y has a right ad-
joint ∀f.
When these are satisﬁed, the category C is called a Heyting category.
Lemma A.4 Let R ⊆A × B be a relation from A to B in a Heyting category C.
R is the graph of a (necessarily unique) morphism A
/ B in C, if and only if the
following two statements
∀a ∈A ∃b ∈B R(a, b)
∀a ∈A ∀b, b′ ∈B (R(a, b) ∧R(a, b′) →b = b′)
are valid in the internal logic of C.
Relations R as in the lemma are called functional.
Even better than regular categories are exact categories, also called eﬀective reg-
ular categories (in [44], for example).
Exact categories A.5
The idea behind exact categories is that equivalence rela-
tions have “good” quotients. I will say in an instant what I mean by a good quotient,
but ﬁrst I have to deﬁne what I mean by an equivalence relation in a categorical
context.
Deﬁnition A.6 Two parallel arrows
R
r0
/
r1
/ X
in category C form an equivalence relation when for any object A in C the induced
function
Hom(A, R)
/ Hom(A, X)2
is an injection deﬁning an equivalence relation on the set Hom(A, X). A morphism
q: X
/ Q is called the quotient of the equivalence relation, if the diagram
R
r0
/
r1
/ X
q
/ Q

125
is both a pullback and a coequaliser. In this case, the diagram is called exact. The
diagram is called stably exact, when for any p: P
/ Q the diagram
p∗R
p∗r0 /
p∗r1
/ p∗X
p∗q / p∗Q
is also exact.
A regular category C is now called exact, when any equivalence relation ﬁts into a
stably exact diagram.
A functor between exact categories is called exact, if it is
regular.
Among exact categories, pretoposes are of special interest. To identify these, one
needs the following deﬁnition.
Deﬁnition A.7 A cartesian category C has ﬁnite disjoint, stable sums, when it has
an initial object 0 (the empty sum) and for any two objects A and B a binary sum
A + B that is disjoint in the sense that
0
/

A

B
/ A + B
is a pullback, and stable in the sense that for all maps A
/ X, B
/ X and Y
/ X,
the canonical map Y ×X A + Y ×X B
/ Y ×X (A + B) is an isomorphism.
A pretopos is an exact category with ﬁnite disjoint, stable sums. On pretoposes there
is the following important result, that will frequently be used.
Lemma A.8 In a pretopos, every epimorphism ﬁts into a stably exact diagram. Put
diﬀerently, every epimorphism is the coequaliser of its kernel pair.
In particular,
epimorphisms, regular epimorphisms and covers coincide.
Because of the sums, disjunction can be interpreted in a pretopos, but it does
not necessarily have the structure to interpret universal quantiﬁcation.
A preto-
pos C is therefore called Heyting, if for any morphism f: Y
/ X in C the functor
f ∗: Sub X
/ Sub Y induced by pullback, has a right adjoint Πf. So Heyting preto-
poses are exact Heyting categories.
Lcccs A.9
Lccc is an abbreviation for “locally cartesian closed category”.
The
quickest way to deﬁne an lccc is by ﬁrst observing that for any morphism f: Y
/ X
in a cartesian category C, pulling back along f determines a functor f ∗: C/X
/ C/Y .
Such functors always have a left adjoint Σf given by composition with f, but when
they also have right adjoints, the category C is an lccc. One also sometimes says that
C has dependent products.
This deﬁnition is the quickest, but it is not the one I will use most often. However,
to state the other equivalent deﬁnitions, I ﬁrst need to recall the deﬁnitions of an
exponential and a cartesian closed category.

126
APPENDIX A. CATEGORICAL BACKGROUND
Deﬁnition A.10 In a category C with products, an object Z is the exponential of
two objects A and B, if it is equipped with an evaluation morphism ϵ: Z × A
/ B
such that for any morphism f: X × A
/ B there is a unique morphism f: X
/ Z
such that
X × A
f×1 /
f
%K
K
K
K
K
K
K
K
K
K
K
Z × A
ϵ

B
commutes. In this case Z is often written as BA. An object A in C is called expo-
nentiable, if BA exists for any object B. A map f: X
/ Y is called exponentiable, if
it is exponentiable as an object of C/Y . A category C with products in which every
object is exponentiable, is called cartesian closed.
When an object A in a category C with products is exponentiable, the association
(−)A: B 7→BA is functorial. In fact, it is right adjoint to the functor (−) × A: B 7→
B × A. Therefore, lcccs are certainly cartesian closed.
A cartesian category C is now locally cartesian closed, when it satisﬁes any of the
following equivalent conditions:
1. All pullback functors f ∗: C/X
/ C/Y for a map f: Y
/ X have a right adjoint
Πf.
2. Any morphism f: Y
/ X is exponentiable.
3. Any slice category of C is cartesian closed.
The existence of the right adjoints Πf has a number of consequences. For example,
since pullback functors are now also left adjoints, they preserve all colimits. This
means in particular that in an lccc, sums are always stable.
Furthermore, because Πf as a right adjoint preserves monos, right adjoints to the op-
eration of pulling back subobjects along an arbitrary map exist in an lccc. Therefore
universal quantiﬁers can be interpreted. This means that a locally cartesian closed
regular category with disjoint sums is a Heyting category. In particular, locally carte-
sian closed pretoposes, or Π-pretoposes as I will frequently call them, are Heyting
pretoposes.
Algebras and coalgebras A.11
The setting is that of a category C equipped with
an endofunctor T: C
/ C. A category of T-algebras can then be deﬁned as follows.
Objects are pairs consisting of an object X together with a morphism x: TX
/ X in
C. A morphism from (X, x: TX
/ X) to (Y, y: TY
/ Y ) is a morphism p: X
/ Y
in C such that
TX
Tp /
x

TY
y

X
p
/ Y

127
commutes.
I will frequently be interested in the initial object in this category, whenever it exists.
This initial object (I, i) is then called the initial or free T-algebra. As the name free
T-algebra suggests, the idea is that the structure of I has been freely generated so
as to make it a T-structure. Very often, at least in the cases I am interested in, I
has been generated by an inductive deﬁnition. Its initiality is then a consequence
of the recursive property such an inductively deﬁned object automatically possesses.
In fact, the language of initial algebras is the right categorical language for studying
inductively deﬁned structures.
For example, in case C is a Π-pretopos, consider the endofunctor T on C sending an
object X to 1 + X. Then T-algebras are morphisms x: 1 + X
/ X, or equivalently
pairs of morphisms (x0: 1
/ X, x1: X
/ X), usually depicted as:
1
x0 / X
x1 / X.
Morphisms of T-algebras are then commuting diagrams like:
1
=

x0 / X
p

x1
/ X
p

1
y0 / Y
y1
/ Y.
The initial T-algebra is called the natural number object (nno) in X and is usually
depicted as:
1
0
/ N
s
/ N.
It is easy to see that in the category of sets, this is precisely the set of natural
numbers with zero and successor, and to verify this fact one uses precisely the fact
that functions can be (uniquely) deﬁned by recursion on the natural numbers. One
sees that the language of initial algebras allows us to make sense of the notion of the
natural numbers in more general categories.
In case C is just a cartesian category, an indexed version of the above is more useful.
An indexed natural number object in a cartesian category C is an object N equipped
with the following structure
1
0
/ N
s
/ N,
such that for any (parameter) object P and any arrows f: P
/ Y and t: P ×Y
/ Y ,
there is a unique f: P × N
/ Y for which the diagram
P × 1
∼
=

1×0 / P × N
(π1,f)

1×s / P × N
f

P
(1,f)
/ P × Y
t
/ Y
commutes. When C is cartesian closed, it is suﬃcient to check this for P = 1 and the
diﬀerence between the two deﬁnitions disappears.
The following lemma is a result that illustrates the usefulness of an (indexed) nno.

128
APPENDIX A. CATEGORICAL BACKGROUND
Lemma A.12 A pretopos C with an indexed nno is cocartesian, i.e. it has all ﬁnite
colimits and these are stable.
Initial algebras have special properties: they are well-founded ﬁxpoints.
In some
cases, this characterises them completely, but that is not always the case.
Deﬁnition A.13 Let C be a category equipped with an endofunctor T: C
/ C. A
ﬁxpoint is an object X together with an isomorphism TX ∼= X.
Fixpoints can always be regarded as T-algebras, and on the other hand one has the
following elementary, but very useful, result by Lambek (see [50]):
Lemma A.14 An initial T-algebra is a ﬁxpoint.
Deﬁnition A.15 Let C be a category equipped with an endofunctor T: C
/ C. A
T-algebra X together with a morphism f to a T-algebra Y is called a T-subalgebra of
Y , when the underlying map of f in C is a monomorphism. A T-algebra Y is called
well-founded, when in all its T-subalgebras f: X
/ Y , f is an isomorphism.
Instead of saying “X is well-founded”, one also says that “X has no proper subalge-
bras”. It is a trivial observation that initial algebras are always well-founded.
Where algebras form the right categorical language to study inductively deﬁned struc-
tures, coalgebras are the right categorical language to study phenomena like coinduc-
tion and bisimulation, with which I will also be concerned.
The setting is again
that of a category C equipped with an endofunctor T: C
/ C and the category of
T-coalgebras is deﬁned dually to that of the category of T-algebras. So objects are
pairs consisting of an object X together with a morphism x: X
/ TX in C, and a
morphism p: X
/ Y in C is a morphism of T-coalgebras from (X, x: X
/ TX) to
(Y, y: Y
/ TY ), when (Tp)x = yp. The terminal object in this category, when it
exists, is called the ﬁnal or cofree T-coalgebra. Some results on initial algebras simply
carry over by duality to ﬁnal coalgebras, in particular Lambek’s result that they are
ﬁxpoints.
Indexed categories A.16
Algebras and coalgebras can also be deﬁned in an in-
dexed setting. For more on indexed categories, see again the Elephant [44], whose
notational conventions I will follow.
An indexed category C is deﬁned by giving for every object I in a ﬁxed category
S, the base of the indexed category, a category CI. Furthermore, there should be
so-called reindexing functors x∗: CI
/ CJ for every x: J
/ I in S. Finally, for any
two composable arrows x: J
/ I and y: K
/ J in S, the functors (xy)∗and y∗x∗are
required to be naturally isomorphic, and (idI)∗is supposed to be naturally isomorphic
to the identity on CI. The natural isomorphisms, which are part of the data of an
indexed category, are in turn demanded to satisfy a number of coherence conditions,
which I shall not state here.

129
An indexed terminal object is given by a family of objects TI, one for every I in
S, such that TI is ﬁnal in every category CI, and for every x: J
/ I, x∗TI ∼= TJ.
The deﬁnition of an indexed initial object is similar. In case the base category S
has a terminal object 1, an indexed terminal object is given by the following data: a
terminal object T in C1, whose reindexings I∗T are still ﬁnal for every I = I
/ 1 in
S.
An indexed functor F: C
/ D for two categories indexed over the same base category
S is given by a family of functors F I: CI
/ DI, one for every object I in S. These
functors are given together with natural isomorphisms for every x: J
/ I that ﬁll
the squares
CI
F I

x∗
/ CJ
F J

DI
x∗/ DJ.
I will again omit the coherence conditions that these natural isomorphisms need to
satisfy.
For an indexed endofunctor F on an indexed category C, one can deﬁne a new indexed
category: the indexed category F−Alg of F-algebras. For any I in S, its ﬁbre (F−Alg)I
is the category of F I-algebras in the category CI, and the reindexing functors are
deﬁned in the obvious way. By an indexed initial algebra, one means an indexed
initial object in this indexed category. These are automatically indexed well-founded
ﬁxpoints: by this, I mean a family of algebras AI, one for every I in S, such that
each AI is a well-founded ﬁxpoint for F I in CI.
For any cartesian category C, there is the canonical indexing of C over itself. The
ﬁbre CI for any I in C is the slice C/I, while x∗is deﬁned by pullback. Remark that
C1 is really just C. By an indexed endofunctor on a cartesian category C, one means
an endofunctor that is indexed with respect to the canonical indexing of C over itself.
In this case, (F −Alg)1 is also just the ordinary category of F-algebras on C.
When F has an indexed initial algebra, this means that F has an ordinary initial
algebra A, with the additional property that for every object I in S, I∗A is initial in
(F−Alg)I. These are also indexed well-founded ﬁxpoints, that is, A is a well-founded
ﬁxpoint for F, and so are all its reindexings. Indexed natural number objects are
examples of such indexed initial algebras.
The deﬁnitions of an indexed category of coalgebras for an indexed endofunctor on
an indexed category, and an indexed ﬁnal coalgebra, should now be obvious.
Internal categories and colimits A.17
Suppose S is a cartesian category. An
internal category K in S consists of a diagram
K1
d1 /
d0
/ K0,

130
APPENDIX A. CATEGORICAL BACKGROUND
where d1 is the domain map, d0 is the codomain one, and they have a common left
inverse i. Furthermore there is a composition. If K2 is the object of composable
arrows, i.e. the object
K2
p1
/
p0

K1
d1

K1
d0
/ K0,
there is a morphism c: K2
/ K1 such that d1c = d1p0 and d0c = d0p1. Composition
behaves well with respect to identities: c⟨id, id0⟩= id and c⟨id1, id⟩= id. Finally,
composition is associative: if one forms the limit of
K1
d0
!B
B
B
B
B
B
B
B
K1
d1
}||||||||
d0
!C
C
C
C
C
C
C
C
K1
}{{{{{{{{
K0
K0,
then two possible composites K3
/ K2
/ K1 are equal. There is also a notion of
internal functor between internal categories, and this gives rise to the category of
internal categories in S (see Section B2.3 of [44] for the details).
An internal diagram L of shape K in an S-indexed category C consists of an internal
S-category K, an object L in CK0, and a map d∗
1L
/ d∗
0L in CK1 which interacts
properly with the categorical structure of K. Moreover, one can consider the notion
of a morphism of internal diagrams, and these data deﬁne the category CK of internal
diagrams of shape K in C.
An indexed functor F: C
/ D induces an ordinary functor F K: CK
/ DK between
the corresponding categories of internal diagrams of shape K. Dually, given an internal
functor F: K
/ J, this (contravariantly) determines by reindexing of C an ordinary
functor on the corresponding categories of internal diagrams: F ∗: CJ
/ CK. One
says that C has internal left Kan extensions if these reindexing functors have left
adjoints, denoted by LanF. In the particular case where J = 1, the trivial internal
category with one object, I write K∗: C
/ CK for the functor, and colimK for its left
adjoint LanK, and colimKL is called the internal colimit of L.
Furthermore, suppose C and D are S-indexed categories with internal colimits of
shape K. Then, one says that an S-indexed functor F: C
/ D preserves colimits if
the canonical natural transformation ﬁlling the square
CK
colimK

F K / DK
colimK

C
F
/ D
is an isomorphism.

131
Indexed cocomplete categories A.18
A S-indexed category C is called S-co-
complete, in case every ﬁbre is ﬁnitely cocomplete, ﬁnite colimits are preserved by rein-
dexing functors, and these functors have left adjoints satisfying the Beck-Chevalley
condition. If S has a terminal object, there is the following easy lemma:
Lemma A.19 If the ﬁbre C = C1 of an S-cocomplete S-indexed category C has a
terminal object T, then this is an indexed terminal object, i.e. X∗T is terminal in CX
for all X in S.
From Proposition B2.3.20 in [44] it follows that:
Lemma A.20 If C is an S-cocomplete S-indexed category, then it has colimits of
internal diagrams and left Kan extensions along internal functors in S. Moreover, if
an indexed functor F: C
/ D between S-cocomplete categories preserves S-indexed
colimits, then it also preserves internal colimits.
The next result is pointed out in Chapter 6 (Remark 6.1.9):
Lemma A.21 If F is an indexed functor on a S-cocomplete indexed category C, the
indexed category F −Coalg of F-coalgebras is again S-cocomplete, and the indexed
forgetful functor U: F −Coalg
/ C preserves colimits (in other words, U creates
colimits).


Appendix B
Type theory
This Appendix is meant as a brief introduction to Martin-L¨of type theory. Although
the relevance of the theory of ΠW-pretoposes to type theory is not what will be
pursued in this thesis (it is applications to set theory that will be worked out), type
theory is “ideologically” important. It is certainly arguable, but in my opinion Martin-
L¨of type theory is the paradigmatic constructive-predicative theory. It is not the
absence of the Law of Excluded Middle or the powerset axiom that vindicates the
constructive and predicative status of the set theory CZF, but its interpretation in
type theory. In the same vein I feel that the example of a ΠW-pretopos deﬁnable from
type theory, proves that a ΠW-pretopos is a constructive and predicative structure
(this example is discussed in the Chapter 2 of this thesis). For this reason I think it
is important to introduce Martin-L¨of type theory. But I should say right away that I
realise that what I tell here can in no way compete with the book-length expositions
by the experts (see [57] and [63], and also [64]).
There is immediately one complication: there exist diﬀerent versions of this the-
ory, extensional and intensional, polymorphic and monomorphic. Following [63], I
have made the choice to introduce the polymorphic version, which I feel is easier to
motivate, but I am not unaware of the advantages of the monomorphic version (for
that, see [64]). Comments on these issues I have relegated to the footnotes. For the
polymorphic version, I will discuss both the intensional and extensional versions.
Per Martin-L¨of created the type theory that bears his name in order to clarify
constructive mathematics. And, in fact, I believe that it is as an attempt to analyse
the practice of the constructive mathematician that it can best be introduced.
An exposition of type theory should be preceeded by a discussion of Martin-L¨of’s
theory of expressions. I wish to treat this issue very quickly, referring to Chapter 3
of [63] for more details. The expression
y + sin y
is analysed as the application of a binary operation + to a variable y and an expression
consisting of the unary function sin applied to that same variable y. Using brackets
133

134
APPENDIX B. TYPE THEORY
for application, this expression should be written as:
+(y, sin(y)).
In the expression
Z x
1
y + sin y dy
the variable y is considered to be a dummy. Nothing depends essentially on it being
y, rather than z or α. For that reason, the integral
R
is thought of as working on an
expression, the integrand y + sin y, in which y does not occur freely, but has rather
been abstracted away. This abstraction is denoted by
(y) + (y, sin(y)).
Certain expressions involving application and abstraction are considered equal (deﬁ-
nitionally equal, denoted by ≡), like:
((x) e)(x) ≡e,
or
(x) b ≡(y) b′
if b′ is b, with all free occurences of y replaced by x. In fact, as explained in [63],
application and abstraction satisfy the rules of the typed lambda calculus (with the
α, β and η-rule).
After the development of the theory of expressions, the ﬁrst step in the analysis
of mathematics is that all the expressions (terms, like constants, variables etc.) are
always of a certain type. A mathematician who, in the course of an argument, intro-
duces a certain variable x never assumes that x is just an arbitrary set, but always
assumes that x is a mathematical object of a particular kind, like a natural number,
a 2 by 2 matrix, an element of a group etc. These mathematical kinds are called types
and a basic assumption in type theory is that all mathematical objects are always
presupposed to be of a certain type. That x is of type A is usually abbreviated as
x ∈A and that A is a type as A Type, the fact that A and A′ are equal types as
A = A′. An additional aspect in the analysis is that mathematical objects can only be
compared as elements of the same type. In type theory, it makes no sense to wonder
whether x, which is of type natural number, and y, which is of type 2 by 2 matrix,
are identical or not identical. More controversially perhaps, the question whether the
real number 2 is the same as the integer 2 is regarded as ill-posed. When a and b are
equal objects of type A, this is written as a = b ∈A. I have now enumerated all the
judgement forms, which are
A Type
A = A′
a ∈A
a = b ∈A.
These are the kind of statements that are recognised in Martin-L¨of type theory.

135
Types have structure and the next two steps analyse this structure. The second
step is the recognition of dependent types: types can depend on the value of a term x
of another type. An example is Rn, which is a type dependent on the value of n ∈N.
Another example is from category theory, where the homset
Hom(A, B)
depends on the values of A and B of type “object in the category C”. The recognition
of dependent types is the main cause of the technical diﬃculty of the theory.
A third step is the recognition of type constructors. There are ways of building
new types from old types. For example, when σ and τ are types, there is the type
σ × τ
of pairs whose ﬁrst element is of type σ and second element is of type τ. For example,
one could form the type N × N of pairs of natural numbers. In this example, × is the
type constructor, but there are also type constructors acting on dependent types, as
in the next example. When B(a) is a type dependent on a ∈A, there is the type
Σa ∈A. B(a)
of pairs (a, b) where a ∈A and b ∈B(a). In set theory, one usually writes something
like `
a∈A Ba. This allows one to build the type
Σn ∈N. Rn
which is the type of ﬁnite sequences of reals together with their length.
In the ﬁnal (fourth) step, there is the rˆole of contexts. In the course of an argument,
when the mathematician has introduced all kinds of variables x, y . . . , and she is
reasoning about them, there is always implicit the typing information, which gives
the right types for all the variables she is working with.
In a formal system like
Martin-L¨of type theory, all these assumptions are required to be made fully explicit.
Therefore judgements like
a ∈σ
are always made within a context Γ which gives explicitly all the types of the free
variables occurring in a and σ. For example, the statement that Rn is a type can only
be made within the context n ∈N:
n ∈N ⊢Rn Type.
Therefore the statements that are premisses or conclusions in an argument are of the
following shapes:
Γ ⊢A Type
Γ ⊢A = A′
Γ ⊢a ∈A
Γ ⊢a = b ∈A,

136
APPENDIX B. TYPE THEORY
where Γ is a context.
The general form of a context is the following:
Γ = [a1 ∈σ1, a2 ∈σ2(a1), . . . , an ∈σn(a1, a2, . . . , an−1)],
where the ai are distinct variables of the appropriate types. This includes the empty
context [] for n = 0. The presupposition here is that
a1 ∈σ1, . . . , ai ∈σi(a1, . . . ai−1) ⊢σi+1(a1, . . . , ai) Type
for all i < n.
A brief remark about these “presuppositions”: what they amount to in this case
is that Γ can never be a context occurring in a statement, without these presuppo-
sitions having been derived before. Typically in logic, the well-formed statements
are delineated, before formulating rules circumscribing which of those are provable.
Here, both processes occur simultaneously: well-formedness of types, for example, is
a property that has to be derived within the system (this is why there is a judgement
form A Type). This is also why the axiom A = A has as a premiss A Type, because
otherwise it could possibly not be well-formed.
Martin-L¨of type theory is organized as follows: it is a system like natural deduc-
tion, with two sets of rules. First, there is a basic set of axioms, that essentially
regulates the use of =: it is an equivalence relation allowing substitution. Then there
are the rules for the diﬀerent type constructors, four for each.
The rules for = are:
a ∈A
a = a ∈A
a = b ∈A
b = a ∈A
a = b ∈A
b = c ∈A
a = c ∈A
A Type
A = A
A = B
B = A
A = B
B = C
A = C
a ∈A
A = B
a ∈B
a = b ∈A
A = B
a = b ∈B
These rules have to be read with the following convention in mind: when formulating
a rule, the context that is shared by all the premisses and conclusion is omitted. This
means that the ﬁrst rule in this list is really:
Γ ⊢a ∈A
Γ ⊢a = a ∈A
for any context Γ.

137
The substitution rules are as follows:
x ∈A ⊢C(x) Type
a ∈A
C(a) Type
x ∈A ⊢C(x)
a = b ∈A
C(a) = C(b)
x ∈A ⊢c(x) ∈C(x)
a ∈A
c(a) ∈C(a)
x ∈A ⊢c(x) ∈C(x)
a = b ∈A
c(a) = c(b) ∈C(a)
x ∈A ⊢C(x) = D(x)
a ∈A
C(a) = D(a)
x ∈A ⊢c(x) = d(x) ∈C
a ∈A
c(a) = d(a) ∈C
And ﬁnally there is the following assumption rule:
A Type
x ∈A ⊢x ∈A
The second set of rules consists of four rules for every type constructor. I start
with Π. It is analogous to the construction of the set Πi∈IAi for an indexed family
(Ai)i∈I in set theory: it is the set of functions that chooses for each i ∈I an element
in the corresponding Ai.
First there is the formation rule:
A Type
x ∈A ⊢B Type
Πx ∈A. B(x) Type
The introduction rule:
x ∈A ⊢b(x) ∈B(x)
λ(b) ∈Πx ∈A. B(x).
The elimination rule:
f ∈Πx ∈A. B(x)
a ∈A
apply(f, a) ∈B(a),
and the equality rule:
x ∈A ⊢b(x) ∈B(x)
a ∈A
apply(λ(b), a) = b(a) ∈B(a).

138
APPENDIX B. TYPE THEORY
In case B does not contain x, one usually writes A →B instead of Πx ∈A. B(x).
These rules are secretly accompanied by rules for judgemental equality (=) like the
following:
x ∈A ⊢b(x) = c(x) ∈B(x)
λ(b) = λ(c) ∈Πx ∈A. B(x).
But these will be omitted in the sequel.1
The other types are thought of as being inductively generated.2
The general
pattern can be observed from the rules for ×, the (binary) product type. First, there
is the formation rule:
A Type
B Type
A × B Type
The introduction rule is:
a ∈A
b ∈B
pair(a, b) ∈A × B.
If one thinks of types as boxes, this rule tells us that there is a canonical way of
putting something into the box A × B: take elements a ∈A and b ∈B and pair
them (elements of the form pair(a, b) are therefore called canonical elements). The
elimination rule expresses that such elements exhaust the product type in the form
of an associated induction principle:
p ∈A × B
v ∈A × B ⊢C(v)
x ∈A, y ∈B ⊢e(x, y) ∈C(pair(a,b))
split(p, e) ∈C(p).
What this says, in terms of boxes, is that in case I am given a family of boxes C(v)
labelled by elements v in the type A×B and that I am given a way of putting elements
into boxes for every box labelled by a canonical element (i.e. into C(pair(x, y)) for
every x ∈A and y ∈B), I have a way of putting elements in every box.
The
associated equality rule says that this way agrees with (extends) the given method
for the canonical elements:
a ∈A
b ∈B
x ∈A, y ∈B ⊢e(x, y) ∈C(pair(x, y))
split(pair(a, b), e) = e(a, b) ∈C(pair(a, b)).
The rules for all the type constructors follow this pattern.
The rules for the
remaining type constructors will be given at the end of this Appendix.
So far any mathematician, even the classical one, may sympathise with the de-
velopment of the theory.
It is by taking the next step that the system becomes
essentially constructive. As one may have the feeling that I have only explained the
set-theoretic part of the system, one may wonder how logic is incorporated in it. This
is done following the propositions-as-types interpretation: a proposition is interpreted
1When the monomorphic version is formulated in terms of a logical framework, as is customary,
it is not necessary to add these rules.
2It is possible to formulate the monomorphic version in such a way that the elements of the
Π-types are also inductively generated.

139
as the type of its proofs. The type constructors correspond to the various logical con-
stants and a proposition is considered true, when its corresponding type of proofs is
inhabited, i.e. there is a term of the appropriate type. This in itself might not make
the system constructive, but the type-theoretic understanding of what a proof is,
does. The type-theoretic interpretation (which follows the BHK-interpretation) of a
proof of an existential proposition ∃a ∈A. B(a) is as the Σ-type Σa ∈A. B(a), which
therefore means that implicit in a proof of this proposition is an a ∈A which has
the desired property B(a). Likewise, the Π-type interprets the universal quantiﬁer ∀.
One can see that the natural deduction rules for ∀are derived rules for the system:
x ∈A ⊢B(x) True
∀x ∈A. B(x) True
∀x ∈A. B(x) True
a ∈A
B(a) True.
The ×-type interprets conjunction ∧and the following are also derived rules:
A True
B True
A ∧B True
A ∧B True
A True
A ∧B True
B True.
In order to have a complete translation from ﬁrst-order intuitionistic logic into
type theory, one needs to have identity types. In the course of history, two sets of
rules have been formulated, an intensional version Id and an extensional version Eq,
resulting in two diﬀerent type theories: intensional and a stronger extensional type
theory.3
Id-type (intensional) Intuitive description: set of proofs of an identity statement.
Formation rule
A Type
a ∈A
b ∈A
Id(A, a, b) Type
Introduction rule
a ∈A
r(a) ∈Id(A, a, a)
Elimination rule
a ∈A
b ∈A
c ∈Id(A, a, b)
x ∈A, y ∈A, z ∈Id(A, x, y) ⊢C(x, y, z) Type
x ∈A ⊢d(x) ∈C(x, x, r(x))
J(c, d) ∈C(a, b, c)
Equality rule
a ∈A
x ∈A, y ∈A, z ∈Id(A, x, y) ⊢C(x, y, z) Type
x ∈A ⊢d(x) ∈C(x, x, r(x))
J(r(a), d) = d(a) ∈C(a, a, r(a))
3The extensional identity type does not ﬁt into the monomorphic version of type theory as
formulated in [64].

140
APPENDIX B. TYPE THEORY
Eq-type (extensional) Intuitive description: set of proofs of an identity statement.
Formation rule
A Type
a ∈A
b ∈A
Eq(A, a, b) Type
Introduction rule
a ∈A
r ∈Eq(A, a, a)
Elimination rule
c ∈Eq(A, a, b)
a = b ∈A
Equality rule
c ∈Eq(A, a, b)
c = r ∈Eq(A, a, b)
One can see that the intensional version ﬁts with the philosophy that types are induc-
tively generated sets and therefore with the general pattern, but the extensional ver-
sion is closer to category theory. Another important diﬀerence is that in type theory
with the extensional identity types, the judgemental equality = and the propositional
equality Eq collapse, thereby making judgmental equality and type checking unde-
cidable, while in a type theory with intensional equality types, the diﬀerent equalities
are kept apart and judgmental equality and type checking remain decidable.
Also because of this, Martin-L¨of considers the intensional version the right one,
and although I appreciate the philosophical and computer-scientiﬁc reasons for this,
the category theorist in me is dismayed, as it makes the categorical properties of the
system much more akward. Also it makes the theory of ML-categories and ΠW-
pretoposes less relevant to the study of Martin-L¨of type theory.
From the syntax of type theory, whether intensional or extensional, one can build
a category in the following way. Objects are types (within the empty context) modulo
the judgemental equality =, while morphisms from a type A to a type B are terms of
type A →B, again modulo the equality =. The fact that one so obtains a category,
is entirely trivial.
It is an (extension of a) result by Seely [79] that for extensional type theory
this gives an ML-category.4
It would be very convenient if one could prove that
this was the initial ML-category, but, as people discovered, this overlooks subtle
coherence problems related to substitution. This is connected to the general problem
of interpreting extensional type theories in ML-categories.5
But solutions to the latter problem have been found: one can use the theory
of ﬁbrations, see [36] and [41], or change the type theory by introducing explicit
substitution operators, see [25]. In either way, one can consider ML-categories and
ΠW-pretoposes as models of extensional type theory.
It is on this fact that the
4But in this connection universes are essential to show that the sums are disjoint. Moreover, an
extension of the type theory with quotient types should yield a ΠW-pretopos.
5Strictly speaking, a categorical semantics has only been worked out for the monomorphic version.

141
relevance of the theory of ML-categories and ΠW-pretoposes is based, and this is
what is behind the PER models or ω-set models of type theory. There are still some
obscurities. For example, what remains unclear to me is to what extend an analysis
of the initial ML-category can throw light on extensional type theory, but this is
manifestly a fruitful approach.
When one turns to intensional type theory, matters become very opaque. If one
performs the same construction as above starting from intensional type theory, the
structure of the category will be much less nice, but it will be something like a weak
ΠW-pretopos, a notion introduced in Chapter 3. To get a “decent” category from
intensional type theory, one should perform the setoids construction explained in
Chapter 2. In this way, one obtains a ΠW-pretopos. The importance of this result is
of “ideological” importance in the sense explained at the beginning of this Appendix,
but it does not make clear how ΠW-pretoposes help to understand intensional type
theory.
I will end by formulating the rules for the remaining type constructors in Martin-
L¨of type theory.
0-type Intuitive description: the empty set.
Formation rule
0 Type
Introduction rule
None.
Elimination rule
a ∈0
x ∈0 ⊢C(x) Type
case(a) ∈C(a)
Equality rule
None.
1-type Intuitive description: the one-point set.
Formation rule
1 Type
Introduction rule
∗∈1
Elimination rule
a ∈1
x ∈1 ⊢C(x) Type
b ∈C(∗)
case(a, b) ∈C(a)
Equality rule
x ∈1 ⊢C(x) Type
b ∈C(∗)
case(∗, b) = b ∈C(∗)

142
APPENDIX B. TYPE THEORY
+-type Intuitive description: disjoint union of two sets.
Formation rule
A Type
B Type
A + B Type
Introduction rules
a ∈A
B Type
inl(a) ∈A + B
A Type
b ∈B
inr(b) ∈A + B
Elimination rule
c ∈A + B
v ∈A + B ⊢C(v) Type
x ∈A ⊢d(x) ∈C(inl(x))
y ∈B ⊢e(y) ∈C(inr(y))
when(c, d, e) ∈C(c)
Equality rules
a ∈A
v ∈A + B ⊢C(v) Type
x ∈A ⊢d(x) ∈C(inl(x))
y ∈B ⊢e(y) ∈C(inr(y))
when(inl(a), d, e) = d(a) ∈C(inl(a))
b ∈B
v ∈A + B ⊢C(v) Type
x ∈A ⊢d(x) ∈C(inl(x))
y ∈B ⊢e(y) ∈C(inr(y))
when(inr(b), d, e) = e(b) ∈C(inr(b))
Σ-type Intuitive description: disjoint union of a family of sets.
Formation rule
A Type
x ∈A ⊢B(x) Type
Σx ∈A. B(x) Type
Introduction rule
a ∈A
x ∈A ⊢B(x) Type
b ∈B(a)
⟨a, b⟩∈Σx ∈A. B(x)
Elimination rule
c ∈Σx ∈A. B(x)
v ∈Σx ∈A. B(x) ⊢C(v) Type
x ∈A, y ∈B(x) ⊢d(x, y) ∈C(⟨x, y⟩)
split(c, d) ∈C(c)
Equality rule
a ∈A
b ∈B
v ∈Σx ∈A. B(x) ⊢C(v) Type
x ∈A, y ∈B(x) ⊢d(x, y) ∈C(⟨x, y⟩)
split(⟨a, b⟩, d) = d(a, b) ∈C(⟨a, b⟩)

143
W-type Intuitive description: set of well-founded trees with ﬁxed branching type
(see Chapter 2).
Formation rule
A Type
x ∈A ⊢B(x) Type
Wx ∈A. B(x) Type
Introduction rule
a ∈A
t ∈B(a) →Wx ∈A. B(x)
sup(a, t) ∈Wx ∈A. B(x)
Elimination rule
a ∈Wx ∈A. B(x)
v ∈Wx ∈A. B(x) ⊢C(v) Type
y ∈A, z ∈B(y) →Wx ∈A. B(x),
u ∈Πx ∈B(y). C(z(x)) ⊢b(y, z, u) ∈C(sup(y, z))
wrec(a, b) ∈C(a)
Equality rule
d ∈A
t ∈B(d) ⊢e(t) ∈Wx ∈A. B(x)
v ∈Wx ∈A. B(x) ⊢C(v) Type
y ∈A, z ∈B(y) →Wx ∈A. B(x),
u ∈Πx ∈B(y). C(z(x)) ⊢b(y, z, u) ∈C(sup(y, z))
wrec(sup(d, e), b) = b(d, e, λ((t) wrec(e(t), b))) ∈C(sup(d, e)


Appendix C
Pcas and realisability
This Appendix brieﬂy discusses the deﬁnitions of pcas and realisability toposes. Ref-
erences for pcas are [11] and [35], while on realisability toposes the reader should
consult [40], [39] and [69].
Pcas C.1
Before being able to deﬁne pcas, I need the notion of a partial applicative
structure. A partial applicative structure Q = (Q, ·) is a set Q equipped with a partial
binary operation (a, b) 7→a · b. The partial application · is frequently not written
down: one very often writes ab instead of a·b. The usual conventions for working with
partial operation are assumed to be in place. For two expressions φ and ψ involving
elements of Q and the binary operation ·, one writes φ ↓to mean “φ is deﬁned”,
φ = ψ to mean “φ and ψ are deﬁned and equal” and φ ≃ψ to mean “when φ or ψ is
deﬁned, so is the other and they are equal”. Another convention is that of “bracketing
to the left”: abc should be read as (ab)c.
Given a pca Q and a countable set of fresh variables x0, x1, x2, . . ., the set of terms
T(Q) is the smallest set closed under:
1. a ∈T(Q) for all a ∈Q,
2. xi ∈T(Q) for all i ∈N,
3. whenever a, b ∈T(Q), then (ab) ∈T(Q).
One should think of the elements of T(Q) as the set of polynomials with coeﬃcients
in Q.
A partial combinatory algebra (pca) Q = (Q, ·) is a partial applicative structure that
is combinatory complete, in the sense that for every term t(x0, . . . , xn) ∈T(Q) there
is an element q ∈Q such that for all a0, . . . , an ∈Q:
(i) qa0 . . . an−1 ↓and
(ii) qa0 . . . an ≃t(a0, . . . , an).
As is well-known, to get combinatory completeness it is necessary and suﬃcient to
require the existence of two elements k and s in Q satisfying the following laws:
145

146
APPENDIX C. PCAS AND REALISABILITY
1. kab = a,
2. sab ↓,
3. sabc ≃ac(bc).
Actually, pcas are usually deﬁned in terms of k and s, but since there are in any pca
an indeﬁnite number of ks and ss having these properties, the deﬁnition in this form
is less canonical. And combinatory completeness is where pcas are all about.
The important facts about pcas, from my point of view, are the following.
Due
to combinatory completeness, elements in a pca may be denoted by lambda terms,
like λx0, . . . , xn.t(x0, . . . , xn). This is a bit tricky, since pcas are not models of the
lambda calculus, as there may be no good interpretation of lambda terms containing
free variables (see [11]).
But, like in the lambda calculus, one can solve ﬁxpoint
equations, there is a choice of Church numerals in any pca (which will usually be
denoted by the ordinary numerals), and there are pairing operations with associated
projections. By the latter I mean that there are always elements j, j0, j1 in a pca Q
such jab ↓, j0(jab) = a and j1(jab) = b for all a, b ∈Q. Instead of jab I will also
frequently write ⟨a, b⟩. Results of repeated pairings will often be denoted by terms of
the type ⟨a1, a2, . . . , an⟩, with the associated projections denoted by ji (1 ≤i ≤n).
The prime example of a pca is that of the natural numbers equipped with Kleene
application: one ﬁxes a particular coding {−} of the partial recursive functions as
natural numbers, so that {m} is the partial recursive function encoded by the natural
number m. Then deﬁnes m · n ≃{m}n to obtain K1, Kleenes pca. Models of the
lambda calculus provide other examples, like Scott’s graph model Pω.
Heyting pre-algebras C.2
A Heyting pre-algebra is a pre-order, that has ﬁnite
limits and colimits and is cartesian closed as a category. As for partial orders, products
and coproducts are denoted by ∧and ∨, respectively, while the exponentials ab are
denoted b →a. The order is usually denoted by ⊢.
For any pca Q, write Σ = PQ for the powerset of Q. Σ carries the structure of
pre-order as follows: A ⊢B, when there is a q ∈Q such that q · a ↓for all a ∈A, and
q · a ∈B. It has, in fact, the structure of a Heyting pre-algebra in which:
A ∧B
=
{⟨a, b⟩| a ∈A, b ∈B}
A ∨B
=
{⟨a, 0⟩| a ∈A} ∪{⟨b, 1⟩| b ∈B}
A →B
=
{q ∈Q | q · a ↓and q · a ∈B for all a ∈A}.
For any set X, one could give ΣX the structure of a Heyting pre-algebra, by deﬁning
the ordering pointwise. But there is another possibility, which is more important for
our purposes. Say F ⊢G for F, G ∈ΣX, when there is a q ∈Q such that for all
x ∈X, a ∈F(x), q · a is deﬁned and in G(x). The point is commonly expressed by
saying that there should be a realiser q that works uniformly for all x ∈X. It can
easily be shown by extending the deﬁnitions above that also when the order of ΣX is
deﬁned in this way, it has the structure of a Heyting pre-algebra.

147
Triposes C.3
A tripos (over Sets) is an indexed category P over Sets whose ﬁbres
PI are Heyting pre-algebras, with some more properties. In particular, the reindexing
functors along functions f: J
/ I are required to preserve the structure of a Heyt-
ing pre-algebra, and the reindexing functors have left and right adjoints ∃f and ∀f,
satisfying the Beck-Chevalley condition. This means that triposes have the structure
to model many-sorted, ﬁrst-order intuitionistic logic. I will skip the formal details,
but the idea is that the elements of PI are predicates on the set I, and formulas
φ(i) in ﬁrst-order logic with a free variable of sort I can be interpreted in the tripos
as such predicates (formulas with more free variables, maybe of diﬀerent sorts, are
interpreted using the products in Sets). Then such formulas φ(i) are valid, when
their corresponding element in PI is isomorphic to the terminal object in that ﬁbre.
One writes:
P ⊢φ(i),
or simply ⊢φ(i), when P is understood.
Any pca Q gives rise to a tripos P. The ﬁbre PI is ΣI, and reindexing is deﬁned by
precomposition. For a predicate F ∈ΣJ and a function f: J
/ I, the quantiﬁers are
deﬁned by:
∃f(F)(i)
=
{q ∈Q | ∃j ∈f −1(i). q ∈F(j)}
∀f(F)(i)
=
{q ∈Q | ∀j ∈f −1(i) ∀a ∈Q. q · a ↓and q · a ∈F(j)}.
Realisability toposes C.4
Given a tripos P, consider the following category. Ob-
jects are pairs (X, =), where X is a set, and = is an element of PX×X, which the
tripos believes to be a partial equivalence relation (i.e. a symmetric and transitive
relation), in the sense that
P ⊢x = x′ →x′ = x
P ⊢x = x′ ∧x′ = x′′ →x = x′′.
The statement that x = x is sometimes abbreviated as Ex (and one thinks of this as
saying that “x exists”).
Morphisms from (X, =) to (Y, =) are equivalence classes of functional relations. A
functional relation is an element F ∈PX×Y , such that the following are valid:
Fxy ∧x = x′ ∧y = y′ →Fx′y′
Fxy →Ex ∧Ey
Fxy ∧Fxy′ →x = x′
Ex →∃y Fxy.
Two such functional relations F, G are equivalent, when they are extensionally equal
in the sense that
P ⊢Fxy ↔Gxy
(for this to obtain, the validity of one implication is suﬃcient).

148
APPENDIX C. PCAS AND REALISABILITY
This deﬁnes a category (not quite, but identities and compositions can be con-
structed), which is actually a topos: for this, one uses some of the structure of a
tripos that I have not explained, but also does not concern me. The important thing
is the following theorem.
Theorem C.5 The category deﬁned out of a tripos in the way explained above, is a
topos.
When the tripos derives from a pca Q, the topos built in this fashion is called the
realisability topos over Q, and denoted by RT(Q).
Theorem C.6 The category RT(Q) is a topos with nno.
In case Q is Kleene’s pca K1, RT(Q) is what is called the eﬀective topos Eff, which
is therefore also a topos with nno.
In the thesis, I use many results on the eﬀective topos, but I do not think it is
worthwhile to summarise them here.
However, I do want to record the following
two facts, which are useful to know. They both concern canonical representations of
categorical notions in a realisability topos.
Subobjects of an object (X, =) in RT(Q) are in one-to-one correspondence to equiv-
alence classes of strict relations, i.e. elements R ∈PX such that the following are
valid:
Rx ∧x = x′ →Rx′
Rx →Ex.
Two such strict relations R, S are equivalent, when Rx ↔Sx is valid.
Quotients of an object (X, =) in RT(Q) are in one-to-one correspondence to equiva-
lence classes of elements R ∈PX×X satisfying the following:
P ⊢Ex →Rxx
P ⊢Ex ∧Ey ∧Rxy →Ryx
P ⊢Ex ∧Ey ∧Ez ∧Rxy ∧Ryz →Rxz.
Again, two such elements R, S ∈PX×X are equivalent, when Rxy ↔Sxy is valid.

Bibliography
[1] M. Abbott, T. Altenkirch, and N. Ghani.
Containers: constructing strictly
positive types. Theoret. Comput. Sci., 342(1):3–27, 2005.
[2] P. Aczel. The type theoretic interpretation of constructive set theory. In Logic
Colloquium ’77 (Proc. Conf., Wroc law, 1977), volume 96 of Stud. Logic Founda-
tions Math., pages 55–66. North-Holland Publishing Co., Amsterdam, 1978.
[3] P. Aczel. The type theoretic interpretation of constructive set theory: choice
principles. In The L. E. J. Brouwer Centenary Symposium (Noordwijkerhout,
1981), volume 110 of Stud. Logic Found. Math., pages 1–40. North-Holland Pub-
lishing Co., Amsterdam, 1982.
[4] P. Aczel. The type theoretic interpretation of constructive set theory: induc-
tive deﬁnitions. In Logic, methodology and philosophy of science, VII (Salzburg,
1983), volume 114 of Stud. Logic Found. Math., pages 17–49. North-Holland
Publishing Co., Amsterdam, 1986.
[5] P. Aczel. Non-well-founded sets, volume 14 of CSLI Lecture Notes. CSLI Publi-
cations, Stanford, CA, 1988.
[6] P. Aczel and N. Mendler. A ﬁnal coalgebra theorem. In Category theory and
computer science (Manchester, 1989), volume 389 of Lecture Notes in Comput.
Sci., pages 357–365. Springer-Verlag, Berlin, 1989.
[7] P. Aczel and M. Rathjen. Notes on constructive set theory. Technical Report
No. 40, Institut Mittag-Leﬄer, 2000/2001.
[8] J. Ad´amek, S. Milius, and J. Velebil. On coalgebra based on classes. Theoret.
Comput. Sci., 316(1-3):3–23, 2004.
[9] S.
Awodey,
C.
Butz,
A.K.
Simpson,
and
T.
Streicher.
Relating
topos theory and set theory via categories of classes.
Available from
http://www.phil.cmu.edu/projects/ast/, June 2003.
[10] S. Awodey and M.A. Warren. Predicative algebraic set theory. Theory Appl. of
Categ., 15(1):1–39, 2005.
149

150
BIBLIOGRAPHY
[11] H.P. Barendregt. The lambda calculus – Its syntax and semantics, volume 103
of Stud. Logic Foundations Math. North-Holland Publishing Co., Amsterdam,
1981.
[12] K.J. Barwise and L. Moss.
Vicious circles – On the mathematics of non-
wellfounded phenomena, volume 60 of CSLI Lecture Notes. CSLI Publications,
Stanford, CA, 1996.
[13] A. Bauer. The realizability approach to computable analysis and topology. PhD
thesis, Carnegie Mellon University, 2000.
[14] B. van den Berg. Inductive types and exact completion. Ann. Pure Appl. Logic,
134:95–121, 2005.
[15] B. van den Berg.
Sheaves for predicative toposes.
Available from arXiv:
math.LO/0507480, July 2005.
[16] L. Birkedal, A. Carboni, G. Rosolini, and D.S. Scott. Type theory via exact
categories (extended abstract). In Thirteenth Annual IEEE Symposium on Logic
in Computer Science (Indianapolis, IN, 1998), pages 188–198. IEEE Computer
Soc., Los Alamitos, CA, 1998.
[17] E.A. Bishop. Foundations of constructive analysis. McGraw-Hill Book Co., New
York, 1967.
[18] A.R. Blass and A. Scedrov. Freyd’s models for the independence of the axiom
of choice. Mem. Am. Math. Soc., 79(404), 1989.
[19] C. Butz. Bernays-G¨odel type theory. J. Pure Appl. Algebra, 178(1):1–23, 2003.
[20] A. Carboni. Some free constructions in realizability and proof theory. J. Pure
Appl. Algebra, 103:117–148, 1995.
[21] A. Carboni and R. Celia Magno. The free exact category on a left exact one. J.
Austral. Math. Soc., 33:295–301, 1982.
[22] A. Carboni and G. Rosolini. Locally cartesian closed exact completions. J. Pure
Appl. Algebra, 154:103–116, 2000.
[23] C. Cˆırstea. A coequational approach to specifying behaviours. Electr. Notes
Theor. Comput. Sci., 19:142–163, 1999.
[24] B. Courcelle. Fundamental properties of inﬁnite trees. Theoret. Comput. Sci.,
25(2):95–169, 1983.
[25] P.-L. Curien. Substitution up to isomorphism. Fund. Inform., 19(1-2):51–85,
1993.

BIBLIOGRAPHY
151
[26] F. De Marchi. On the semantics of coinductive types in Martin-L¨of type the-
ory. In J.L. Fiadeiro et al., editor, Algebra and Coalgebra in Computer Science
(CALCO 2005), volume 3629 of Lecture Notes in Comput. Sci., pages 114–126.
Springer-Verlag, Berlin, 2005.
[27] P. Dybjer and A. Setzer. Induction-recursion and initial algebras. Ann. Pure
Appl. Logic, 124(1-3):1–47, 2003.
[28] M. Forti and F. Honsell.
Set theory with free construction principles.
Ann.
Scuola Norm. Sup. Pisa Cl. Sci. (4), 10(3):493–522, 1983.
[29] H.M. Friedman. Set theoretic foundations for constructive analysis. Ann. of
Math. (2), 105(1):1–28, 1977.
[30] N. Gambino. Sheaf interpretations for generalised predicative intuitionistic sys-
tems. PhD thesis, University of Manchester, 2002.
[31] N. Gambino. Presheaf models for constructive set theories. In L. Crosilla and
P.M. Schuster, editors, From Sets and Types to Topology and Analysis: Towards
Practicable Foundations for Constructive Mathematics. Oxford University Press,
Oxford, 2005.
[32] N. Gambino. Heyting-valued interpretations for constructive set theory. Ann.
Pure Appl. Logic, 137(1-3):164–188, 2006.
[33] N. Gambino and J.M.E. Hyland. Wellfounded trees and dependent polynomial
functors. In Types for proofs and programs, volume 3085 of Lecture Notes in
Comput. Sci., pages 210–225. Springer-Verlag, Berlin, 2004.
[34] R.J. Grayson. Forcing in intuitionistic systems without power-set. J. Symb. Log.,
48(3):670–682, 1983.
[35] J.R. Hindley and J.P. Seldin. Introduction to combinators and λ-calculus, vol-
ume 1 of London Mathematical Society Student Texts. Cambridge University
Press, Cambridge, 1986.
[36] M. Hofmann. On the interpretation of type theory in locally cartesian closed
categories. In Computer science logic (Kazimierz, 1994), volume 933 of Lecture
Notes in Comput. Sci., pages 427–441. Springer-Verlag, Berlin, 1995.
[37] M.
Hofmann,
J.
van
Oosten,
and
T.
Streicher.
Well-foundedness
in
realizability.
To
appear
in
Arch.
Math.
Logic.
Available
from
http://www.math.uu.nl/people/jvoosten/realizability.html.
[38] P.J.W. Hofstra. Completions in realizability. PhD thesis, University of Utrecht,
2003. Available at http://www.math.uu.nl/people/jvoosten/realizability.html.
[39] J.M.E. Hyland. The eﬀective topos. In The L.E.J. Brouwer Centenary Sym-
posium (Noordwijkerhout, 1981), volume 110 of Stud. Logic Foundations Math.,
pages 165–216. North-Holland Publishing Co., Amsterdam, 1982.

152
BIBLIOGRAPHY
[40] J.M.E. Hyland, P.T. Johnstone, and A.M. Pitts. Tripos theory. Math. Proc.
Cambridge Philos. Soc., 88(2):205–231, 1980.
[41] B.P.F. Jacobs.
Categorical logic and type theory, volume 141 of Stud. Logic
Foundations Math. North-Holland Publishing Co., Amsterdam, 1999.
[42] B.P.F. Jacobs and J. Rutten.
A tutorial on (co)algebras and (co)induction.
Bulletin of the EATCS, 62:222–259, 1996.
[43] M. Jibladze. A presentation of the initial lift-algebra. J. Pure Appl. Algebra,
116(1-3):185–198, 1997.
[44] P.T. Johnstone. Sketches of an elephant: a topos theory compendium. Volume
1, volume 43 of Oxf. Logic Guides. Oxford University Press, New York, 2002.
[45] P.T. Johnstone. Sketches of an elephant: a topos theory compendium. Volume
2, volume 44 of Oxf. Logic Guides. Oxford University Press, Oxford, 2002.
[46] P.T. Johnstone, A.J. Power, T. Tsujishita, H. Watanabe, and J. Worrell. On the
structure of categories of coalgebras. Theoret. Comput. Sci., 260(1-2):87–117,
2001.
[47] A. Joyal and I. Moerdijk. Algebraic set theory, volume 220 of London Mathe-
matical Society Lecture Note Series. Cambridge University Press, Cambridge,
1995.
[48] C. Kouwenhoven-Gentil and J. van Oosten. Algebraic set theory and the eﬀective
topos. J. Symbolic Logic, 70(3):879–890, 2005.
[49] K. Kunen.
Set theory – An introduction to independence proofs, volume 102
of Stud. Logic Foundations Math. North-Holland Publishing Co., Amsterdam,
1980.
[50] J. Lambek. Subequalizers. Canadian Math. Bull., 13:337–349, 1970.
[51] J. Lambek and P.J. Scott. Introduction to higher order categorical logic, volume 7
of Camb. Stud. Adv. Math. Cambridge University Press, Cambridge, 1986.
[52] I. Lindstr¨om. A construction of non-well-founded sets within Martin-L¨of’s type
theory. J. Symbolic Logic, 54(1):57–64, 1989.
[53] R.S. Lubarsky. CZF and Second Order Arithmetic. Accepted for publication in
Ann. Pure Appl. Logic.
[54] R.S. Lubarsky. Independence results around constructive ZF. Ann. Pure Appl.
Logic, 132(2-3):209–225, 2005.
[55] S. Mac Lane. Categories for the working mathematician, volume 5 of Graduate
Texts in Mathematics. Springer-Verlag, New York, second edition, 1998.

BIBLIOGRAPHY
153
[56] S. Mac Lane and I. Moerdijk. Sheaves in geometry and logic – A ﬁrst introduction
to topos theory. Universitext. Springer-Verlag, New York, 1992.
[57] P. Martin-L¨of. Intuitionistic type theory, volume 1 of Studies in Proof Theory.
Lecture Notes. Bibliopolis, Naples, 1984.
[58] D.C. McCarty.
Realizability and recursive mathematics.
PhD thesis, Oxford
University, 1984.
[59] M. Menni. Exact completions and toposes. PhD thesis, University of Edinburgh,
2000. Available at http://www.math.uu.nl/people/jvoosten/realizability.html.
[60] I. Moerdijk and E. Palmgren. Wellfounded trees in categories. Ann. Pure Appl.
Logic, 104:189–218, 2000.
[61] I. Moerdijk and E. Palmgren. Type theories, toposes and constructive set theory:
predicative aspects of AST. Ann. Pure Appl. Logic, 114:155–201, 2002.
[62] J. Myhill. Constructive set theory. J. Symbolic Logic, 40(3):347–382, 1975.
[63] B. Nordstr¨om, K. Petersson, and J.M. Smith.
Programming in Martin-L¨of’s
type theory – An introduction, volume 7 of International Series of Monographs
on Computer Science. Oxford University Press, New York, 1990.
[64] B. Nordstr¨om, K. Petersson, and J.M. Smith.
Martin-L¨of’s type theory.
In
Handbook of logic in computer science, Vol. 5, Oxford Sci. Publ., pages 1–37.
Oxford University Press, New York, 2000.
[65] J. van Oosten. Axiomatizing higher-order Kleene realizability. Ann. Pure Appl.
Logic, 70(1):87–111, 1994.
[66] J. van Oosten.
Basic category theory.
Lecture notes available from
http://www.math.uu.nl/people/jvoosten/onderwijs.html, July 2002.
[67] C.-E. Ore. The extended calculus of constructions (ECC) with inductive types.
Inform. and Comput., 99(2):231–264, 1992.
[68] R. Par´e and D. Schumacher. Abstract families and the adjoint functor theorems.
In Indexed categories and their applications, volume 661 of Lecture Notes in
Math., pages 1–125. Springer-Verlag, Berlin, 1978.
[69] A.M. Pitts. The theory of triposes. PhD thesis, Cambridge University, 1981.
[70] M. Rathjen. Realizability for constructive Zermelo-Fraenkel set theory. To ap-
pear in J. V¨a¨an¨anen and V. Stoltenberg-Hansen, editors, Proceedings of the Logic
Colloquium 2003.
[71] M. Rathjen. The anti-foundation axiom in constructive set theories. In Games,
logic, and constructive sets (Stanford, CA, 2000), volume 161 of CSLI Lecture
Notes, pages 87–108. CSLI Publications, Stanford, CA, 2003.

154
BIBLIOGRAPHY
[72] M. Rathjen. Predicativity, circularity, and anti-foundation. In One hundred years
of Russell’s paradox, volume 6 of de Gruyter Ser. Log. Appl., pages 191–219. De
Gruyter, Berlin, 2004.
[73] M. Rathjen. The disjunction and related properties for constructive Zermelo-
Fraenkel set theory. J. Symbolic Logic, 70(4):1232–1254, 2005.
[74] M. Rathjen. Replacement versus collection and related topics in constructive
Zermelo-Fraenkel set theory. Ann. Pure Appl. Logic, 136(1-2):156–174, 2005.
[75] M. Rathjen and R.S. Lubarsky. On the regular extension axiom and its variants.
MLQ Math. Log. Q., 49(5):511–518, 2003.
[76] L. Rieger. A contribution to G¨odel’s axiomatic set theory. I. Czechoslovak Math.
J., 7(82):323–357, 1957.
[77] E.P. Robinson and G. Rosolini. Colimit completions and the eﬀective topos. J.
Symbolic Logic, 55(2):678–699, 1990.
[78] L. Santocanale. Logical construction of ﬁnal coalgebras. Electr. Notes Theor.
Comput. Sci., 82(1):1–20, 2003.
[79] R.A.G. Seely. Locally cartesian closed categories and type theory. Math. Proc.
Camb. Philos. Soc., 95(1):33–48, 1984.
[80] T. Streicher. Realizability models for CZF+ ¬ Pow. Unpublished note, March
2005.
[81] A. S. Troelstra and D. van Dalen.
Constructivism in mathematics. Vol. II,
volume 123 of Stud. Logic Foundations Math. North-Holland Publishing Co.,
Amsterdam, 1988.
[82] A.S. Troelstra. A note on non-extensional operations in connection with continu-
ity and recursiveness. Nederl. Akad. Wetensch. Proc. Ser. A 80=Indag. Math.,
39(5):455–462, 1977.
[83] D. Turi and J. Rutten. On the foundations of ﬁnal coalgebra semantics: non-
well-founded sets, partial orders, metric spaces. Math. Structures Comput. Sci.,
8(5):481–540, 1998.

Index
AFA, 119
algebra, 126
free, 127
indexed initial, 129
initial, 127
partial combinatory, 145
sub-, 128
weak Pf-, 45
algebraic set theory, 67–71
AMC, 71
Anti-Foundation Axiom, 119
assembly, 26
partitioned, 51, 54
Axiom of Countable Choice, 76
Axiom of Multiple Choice, 71
Axiom of Relativised Dependent Choice,
76
base (category of bases), 59
base (set-theoretic notion), 79
branching element, 85
CA, 70
category
base, 128
cartesian, 123
cartesian closed, 126
locally, 126
cocartesian, 128
exact, 125
Heyting, 124
indexed, 128
cocomplete, 131
of algebras, 129
of coalgebras, 129
internal, 130
ML-, 24
regular, 123
child, 84
Church’s Thesis, 76
class of maps
representable, 69
stable, 68
class of small maps, 69, 112
coalgebra, 128
cofree, 128
ﬁnal, 128
indexed ﬁnal, 129
proto-, 84
cocone
canonical, 104
coherent element, 85
colimit
internal, 130
Collection Axiom, 120
Strong, 66
Subset, 66
Collection Axiom (categorical), 70
combinatory completeness, 145
comonad
cartesian, 93
constructivism, 7
cover, 123
CST, 119
CZF, 65–67
CZF−, 120
CZF0, 117
decoration, 27
diagram
exact, 125
internal, 130
stably exact, 125
Emptyset Axiom, 117
enough projectives, 35
155

156
INDEX
epimorphism
regular, 123
exact completion, 33
exponential, 126
weak, 43
Exponentiation axiom, 119
Extensionality Axiom, 66, 117
ﬁxpoint, 128
indexed well-founded, 129
pre-, 89
well-founded, 128
formula
bounded, 66
Fullness Axiom, 66
functor
cartesian, 123
exact, 125
generalised polynomial, 25
indexed, 129
internal, 130
polynomial, 18
powerclass, 76
regular, 123
reindexing, 128
small-based, 110
glueing, 60
Heyting algebra, 31
Heyting pre-algebra, 146
Heyting-valued set, 30
homset
internal, 103
identity type
extensional, 139
intensional, 139
image of a map, 123
Independence of Premisses, 76
indexing
canonical, 129
Inﬁnity Axiom, 66
inserter of indexed categories, 105
Intersection Axiom, 117
IZF−, 120
Kan extension
internal left, 130
lccc, 125–126
M-type, 18, 82
in assemblies, 29
in Heyting algebra, 31
in sets, 21
in topos with nno, 26
map
choice, 35
collection, 70
exponentiable, 126
generic, 103
pointed, 87
root, 21, 83
small, 69, 113
subcountable, 73
universal small, 70, 114
weak Pf-substructure, 45
Markov’s Principle, 76
ML-category, 24
modest set, 29
nno, 127
indexed, 127
object
exponentiable, 126
in indexed category, 103
generating, 104
indexed terminal, 129
natural number, 44, 127
indexed, 127
weak, 44
powerclass, 113
separated, 98
small, 68, 113
subcountable, 59
weakly terminal, 104
operator
universal closure, 98
Pairing Axiom, 66, 117
Partial Equivalence Relation, 29

INDEX
157
path, 21, 84
pca, 145
internal, 54
PER, 29
Powerset Axiom, 120
predicativism, 8
preﬁxpoint, 89
Presentation Axiom, 76
pretopos, 125
ΠM-, 82
ΠW, 24
Π-, 126
Heyting, 125
weak ΠW-, 46
product
dependent, 41, 125
simple, 43
weak dependent, 41
weak simple, 43
projective
external, 34
internal, 35
proof, 42
proto-coalgebra, 84
pullback
quasi-, 36
weak, 110
quasi-pullback, 36
quotient in a category, 124
reﬂector, 98
Regular Extension Axiom, 66
regular set, 67
relation in a category
equivalence, 124
functional, 124
pseudo-equivalence, 34
small, 113
Replacement axiom, 117
representation
weak, 76
Separation Axiom
∆0-, 66
Bounded, 66
Full, 120
Set Induction Axiom, 66
setoid, 31
sheaf, 98
span (indexed category of spans), 106
structure
Pf-, 44
subalgebra, 128
weak Pf-, 45
subcategory
locally full, 68
reﬂective, 98
subcountable, 72
in the eﬀective topos, 59, 72
subobject
small, 113
weak, 42
subobject classiﬁer, 25
subtree, 22
decorated, 55
proper, 22
sum
ﬁnite disjoint and stable, 125
topos, 25
eﬀective, 148
predicative realisability, 54
realisability, 147
tree
coherent, 97
composable, 97
decorable, 27
decorated, 52
natural, 97
tripos, 147
type theory, 133–143
extensional, 139
intensional, 139
Uniformity Principle, 76
Union Axiom, 66, 117
Unzerlegbarkeit, 76
W-type, 18
characterisation theorem, 22
in assemblies, 27

158
INDEX
in Heyting algebra, 31
in Heyting-valued sets, 30
in modest sets, 30
in realisability topos, 52
in sets, 19
in topos with nno, 26
weak, 45
ZF−, 120

Samenvatting in het Nederlands
Dit is een proefschrift in de wiskundige logica. Logica bestudeert formele systemen
met het doel meer te weten te komen over het wiskundige redeneren. Hoe gaat dat
in zijn werk?
Een wiskundige formuleert stellingen en probeert daar vervolgens een bewijs voor
te geven. Dergelijke bewijzen zijn aan nauw omschreven regels gebonden en in feite
laten de toegestane redeneerstappen zich zuiver formeel beschrijven. In andere woor-
den: of een redeneerstap geldig is hangt niet af van het onderwerp van de redenering,
maar alleen van haar vorm (zoals Aristoteles zich al realiseerde). Wiskundige logica
bestudeert de vormen van correct redeneren op een wiskundige manier.
Toch is het geen sinecure om een raamwerk te formuleren waarbinnen alle bestaan-
de wiskunde past. Niet alleen moet de logica worden vastgelegd, er moet ook een
conceptuele taal ontwikkeld worden waarin over uiteenlopende wiskundige entiteiten
gesproken kan worden (van getallen en driehoeken tot C∞-vari¨eteiten en niet-abelse
groepen). En dan het liefst nog op een handzame en inzichtelijke manier.
De verzamelingenleer van Cantor biedt een dergelijke taal.
Het aantal typen
entiteiten is beperkt (er zijn alleen verzamelingen), het aantal relaties ook (alles is
gedeﬁnieerd in termen van de elementrelatie), er is een klein aantal axioma’s die
overwegend intu¨ıtief zeer aansprekend zijn en alle bekende wiskundige entiteiten laten
zich opvatten als verzamelingen. De manier waarop allerlei wiskundige objecten zich
laten coderen als verzamelingen is niet altijd vrij van een zekere kunstmatigheid of
willekeurigheid, maar dit stoort de meeste wiskundigen niet. Van belang is dat een
dergelijke verzamelingstheoretische reductie van de wiskunde in principe mogelijk is
en dat stellingen over de verzamelingenleer hiermee ook iets zeggen over de wiskunde
in het algemeen.
Het formuleren van de verzamelingenleer als een adequate logische theorie zon-
der tegenstrijdigheden kende zijn moeilijkheden, maar een periode van ontwikkeling
leverde uiteindelijk Zermelo-Fraenkel verzamelingenleer, inclusief het keuzeaxioma,
op dat aan de gestelde eisen lijkt te voldoen: het is een zuiver formeel te beschrijven
systeem, dat niet lijdt aan de bekende kinderziektes en waarin zich (nagenoeg) alle
wiskunde laat formaliseren. Tegenwoordig beroepen veel wiskundigen zich op deze
klassieke theorie als het logische fundament voor hun redeneringen en schikken zich
in haar oordeel waar het de correctheid daarvan aangaat.
Toch bestudeert dit proefschrift niet zozeer de klassieke verzamelingenleer, maar
eerder zijn alternatieven. Alternatieven kunnen in twee richtingen gezocht worden:
deze theorie onderschrijft het bestaan van entiteiten terwijl zij zich daar niet over uit
zou moeten laten of zij ontkent het bestaan van entiteiten waar ze die mogelijkheid
open zou moeten laten. Beide richtingen komen in dit proefschrift aan de orde.
Om met het eerste soort alternatief te beginnen: sommige axioma’s (en zelfs de on-
derliggende logica) van Zermelo-Fraenkel verzamelingenleer met keuze zijn het onder-
werp geworden van ﬁlosoﬁsche kritiek, omdat ze het bestaan impliceren van objecten
159

die als problematisch worden gezien. Twee groepen van critici zijn voor dit proef-
schrift van belang, te weten constructivisten en predicativisten. Zonder dit al te veel te
willen uitleggen, wil ik de bezwaren van beide groepen toch kort noemen: de bezwaren
van de constructivisten gelden objecten waarvoor slechts een niet-constructief bewijs
bestaat en de bezwaren van predicativisten gelden machtsverzamelingen en verza-
melingen gevormd door comprehensie voor willekeurige formules. Van belang is dat
beide groepen zich niet beperkten tot het leveren van kritiek, maar ze ook de noodzaak
voelden om in de vorm van een formeel systeem exact te beschrijven hoe wiskunde
eruit ziet die wel overeenkomt met hun ﬁlosoﬁsche opvattingen.
Constructieve Zermelo-Fraenkel verzamelingenleer is zo’n exact omschreven sys-
teem waarbinnen wiskunde bedreven kan worden die tegemoet komt aan de bezwaren
die door constructivisten en predicativisten naar voren zijn gebracht. Deze construc-
tieve theorie is daarmee een verzwakte vorm van de klassieke versie van de verzamelin-
genleer van Zermelo en Fraenkel, waar bepaalde axioma’s geschrapt zijn en mogelijk
vervangen door een voor constructivisten en predicativisten acceptabele versie. Zij is
voor het eerst geformuleerd door Peter Aczel in 1978 en staat recent weer opnieuw in
de belangstelling door het werk van diverse bewijstheoretici.
Dit proefschrift kiest een andere, meer model-theoretische, benadering voor het
bestuderen van Aczels constructieve verzamelingenleer en leunt daarbij sterk op ca-
tegorie¨entheorie. Het laat zien dat er binnen categorie¨en objecten bestaan die zich
gedragen als “alternatieve wiskundige universa”. Vanuit het perspectief van de gewone
wiskundige gelden niet alle wiskundige en logische wetten binnen zo’n universum,
maar de regels van een zwakke verzamelingenleer als constructieve Zermelo-Fraenkel
verzamelingenleer gelden dan bijvoorbeeld wel. Zo’n alternatieve wiskundige wereld
waarin redeneringen binnen constructieve Zermelo-Fraenkel verzamelingenleer wel be-
trouwbaar zijn, maar argumenten die daarbuiten vallen mogelijk niet, heten modellen
voor constructieve Zermelo-Fraenkel verzamelingenleer. In dit proefschrift wordt deze
constructieve verzamelingenleer bestudeerd door zijn modellen onder de loep te ne-
men.
Zo mondt het eerste gedeelte van het proefschrift, na een analyse van categorie¨en
waarbinnen dergelijke universa kunnen bestaan, uit in een bespreking van recente
modellen van Aczels theorie gegeven door Streicher en Lubarsky. Ik laat in de eerste
plaats zien dat ze hetzelfde zijn, maar verder bewijs ik dat dit alternatieve universum
een object is binnen een categorie (de zogenaamde eﬀectieve topos).
Dit gebruik
ik vervolgens om aan te tonen dat binnen dit model principes gelden die vanuit een
gebruikelijk wiskundig perspectief zoals dat van de klassieke verzamelingenleer onjuist
zijn. Het is alsof binnen dit universum niet alleen niet al onze natuurwetten gelden,
maar er andere wetten gelden, die in tegenspraak zijn met de onze.
Dit was tot
op zekere hoogte bekend, maar wordt in dit proefschrift systematisch onderzocht en
bewezen.
Maar om op de kwestie van de alternatieven voor de klassieke verzamelingenleer
terug te komen: constructieve Zermelo-Fraenkel verzamelingenleer is een beperkte
vorm daarvan, omdat het zich niet vastlegt op het bestaan van objecten waarvan
160

de existentie binnen de klassieke theorie bewezen kan worden. Het is aan de andere
kant ook mogelijk de wereld van de klassieke Zermelo-Fraenkel verzamelingenleer
uit te breiden met objecten waarvan het bestaan binnen deze theorie weerlegd kan
worden. Een voorbeeld hiervan wordt bestudeerd in de tweede helft van het proef-
schrift. Daar worden modellen onderzocht voor een verzamelingenleer waarbinnen
niet-welgefundeerde verzamelingen bestaan. Traditioneel sluit het zogenaamde fun-
deringsaxioma (of regulariteitsaxioma) de existentie van deze objecten uit, omdat deze
beweert dat alle verzamelingen welgefundeerd zijn, maar deze kan zonder problemen
vervangen worden door het anti-funderingsaxioma zodat naast de welgefundeerde
er ook niet-welgefundeerde verzamelingen bestaan.
Dergelijke niet-welgefundeerde
verzamelingen scheppen de mogelijkheid circulaire verschijnselen verzamelingtheo-
retisch te beschrijven, waarvan het belang vooral in de informatica ligt. Het laatste
hoofdstuk verruimt een bestaande methode om modellen te bouwen waarbinnen niet-
welgefundeerde verzamelingen bestaan door deze in een abstracte categorische context
te plaatsen en legt uit hoe deze in diverse situaties kan worden toegepast.
161


Acknowledgements
First of all, I would like to thank Ieke for being my supervisor. If I reached some
degree of professional maturity, it is thanks to him. I learned a lot of mathematics
from him, but equally important: he has assisted me with helpful advise during all
the stages of my PhD, while writing my ﬁrst article, this thesis, while organising a
workshop, while searching for sensible questions to investigate and while looking for
positions in the future. And he created the stimulating work environment in which I
have developed into some kind of independent researcher.
Next, I would like to thank Federico. For working with me on things non-well-
founded, which resulted in the last two chapters of this thesis, and for his helpful
comments on one of its earlier versions. And for being such a socially binding and
enterprising element in our group. I will never again make dismissive comments about
modern architecture in general, but I still don’t like Dal´ı or 2001: A Space Odyssey.
I would also like to thank my room mates for being such pleasant company. I
mean Hristina, Andor, Ittay and especially Claire. I enjoyed our brief collaboration
on W-types in the eﬀective topos and the moments which were spent in a way less
useful professionally. I can still feel my sense of shock when she decided to leave us.
And, of course, I would like to thank all the other members of our group for
making life at the department so enjoyable, whether they were logicians, topologists
or geometers: Jaap, Pieter, Pepijn, Marius, Alex, Camillo, David, Javier, Giorgio,
Andreas and Dmitry. I have developed an ambivalent relationship with that other
socially binding element of our group, coﬀee, but it would be foolish for me to deny
that it has given me many relaxing moments over the last years. Besides I enjoyed
the time I spent on playing football (also with other members of the department, and
the physicists), cards (also with Behrooz, Hamid and Erik) and chess.
On a professional level, I learned and proﬁted from discussions with Pieter Hof-
stra, Jaap van Oosten, Nicola Gambino, Erik Palmgren, Thomas Streicher and many
others.
Furthermore, I would like to thank the Netherlands Organization for Scientiﬁc
Research (NWO) for funding my stay in Sweden from March to May in 2005. And
Thierry Coquand and Erik Palmgren for being such excellent hosts and generously
sacriﬁcing their time to teach me some type theory.
Finally, I am grateful to my family and friends for their selﬂess concern for my
non-mathematical welfare.
163


Curriculum Vitae
Benno van den Berg was born on November 1, 1978, in Emmen, the Netherlands.
He attended the Esdal College in Emmen, before studying both mathematics and
philosophy at the University of Utrecht.
He started in 1996 and graduated with
honours in mathematics in 2001 under supervision of prof. Ieke Moerdijk and in
philosophy in 2002 under supervision of prof. Albert Visser. In 1998-99 he participated
in a Masterclass on Mathematical Logic, organised by the MRI. From September
2002 onwards, he was a PhD at the University of Utrecht, again under supervision of
prof. Ieke Moerdijk.
165

