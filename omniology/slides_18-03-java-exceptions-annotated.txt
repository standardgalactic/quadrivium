Alex Aiken 
Compilers 
Java Exceptions 

Alex Aiken 
Java Exceptions 
• Deep in a section of code, you encounter an 
unexpected error 
– Out of memory 
– A list that is supposed to be sorted is not 
– etc. 
 
• What do you do? 

Alex Aiken 
Java Exceptions 
• Add a new type (class) of exceptions 
 
• Add new forms 
try { something } catch(x) { cleanup } 
throw exception 
 
 
 

Alex Aiken 
Java Exceptions 
class Foo {  
 
public static void main(String[] args) {  
 
 
try { X(); } catch (Exception e) {  
        
System.out.println(“Error!”) } }  
 
 
public void X() throws MyException { 
 
 
throw new MyException(); 
 
} 
} 

Alex Aiken 
Java Exceptions 
 
E   e1 : v1 
E   try{e1} catch(x) {e2}: v1 
 
 
E   e1 : T(v1) 
E[x v1]   e2 : v2 
E   try{e1} catch(x) {e2}: v2 
 
T(v)  = an exception that has been thrown with value v 
v = an ordinary value (an object) 

Alex Aiken 
Java Exceptions 
 
E   e : v 
E   throw e: T(v) 
 
 
E   e1 : T(v1) 
E   e1 + e2 : T(v1) 
 

Alex Aiken 
Java Exceptions 
• When we encounter a try 
– Mark current location in the stack 
 
• When we throw an exception 
– Unwind the stack to the first try 
– Execute corresponding catch  
 
• More complex techniques reduce the cost of try and 
throw 

Alex Aiken 
Java Exceptions 
 
 
What happens to an uncaught exception thrown during 
object finalization? 

Alex Aiken 
Java Exceptions 
• Methods must declare types of exceptions they may 
raise 
public void X() throws MyException 
– Checked at compile time 
– Some exceptions need not be part of the method signature 
• e.g., dereferencing null 
 
• Other mundane type rules 
– throw must be applied to an object of type Exception 
 

