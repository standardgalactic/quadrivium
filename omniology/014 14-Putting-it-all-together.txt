
Recap
positional arguments
keyword-only arguments
specific
may have default values
*args
collects, and exhausts 
remaining positional 
arguments
*
indicates the end of 
positional arguments 
(effectively exhausts)
specific
after positional arguments have ben 
exhausted
may have default values
**kwargs
collects any remaining 
keyword arguments

positional parameters
can have default values
user may specify them using keywords
non-defaulted params are mandatory args
specific keyword-only args
can have default values
user must specify them using keywords
non-defaulted params are mandatory args
scoops up any additional 
keyword args
scoops up any 
additional positional 
args
indicates no more 
positional args
a, b, c=10
*args / *
kw1, kw2=100
**kwargs
if used, * or *args must also be used

def func(a, b=10)
def func(a, b, *args)
Examples
def func(a, b, *args, kw1, kw2=100)
def func(a, b=10, *, kw1, kw2=100)
def func(a, b, *args, kw1, kw2=100, **kwargs)
def func(a, b=10, *, kw1, kw2=100, **kwargs)
def func(*args)
def func(*args, **kwargs)
def func(**kwargs)

Typical Use Case: Python's print() function
*objects
arbitrary number of positional arguments
after that are keyword-only arguments
they all have default values, so they are all optional

Typical Use Cases
Often, keyword-only arguments are used to modify the default behavior of a function
such as the print() function we just saw
def calc_hi_lo_avg(*args, log_to_console=False):
hi = int(bool(args)) and max(args)
lo = int(bool(args)) and min(args)
avg = (hi + lo)/2
if log_to_console:
print("high={0}, low={1}, avg={2}".format(hi, lo, avg))
return avg
Other times, keyword-only arguments might be used to make 
things clearer.
Having many positional parameters can become confusing, and 
extra care has to be taken to ensure the correct parameters are 
passed in the correct sequence.

Code

