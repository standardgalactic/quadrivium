Alex Aiken 
Compilers 
Recursive Descent Parsing 

Alex Aiken 
Recursive Descent 
 
• The parse tree is constructed 
– From the top 
– From left to right 
 
• Terminals are seen in order of 
appearance in the token stream:  
             t2  t5  t6  t8  t9 
1 
t2 
3 
4 
t5 
7 
t6 
t9 
t8 

Alex Aiken 
Recursive Descent  
• Consider the grammar 
      E  T |T + E 
      T  int  | int * T | ( E ) 
 
• Token stream is:   ( int5 ) 
 
• Start with top-level non-terminal E 
– Try the rules for E in order 

Alex Aiken 
Recursive Descent 
E  T |T + E  
 
 
 
 
 
T  int  | int * T | ( E ) 
 
E 
( int5 ) 

Alex Aiken 
Recursive Descent 
E  T |T + E  
 
 
 
 
 
T  int  | int * T | ( E ) 
 
E 
T 
( int5 ) 

Alex Aiken 
Recursive Descent 
E  T |T + E  
 
 
 
 
 
T  int  | int * T | ( E ) 
 
int 
( int5 ) 
E 
T 
Mismatch: int does not match (  
Backtrack … 

Alex Aiken 
Recursive Descent 
E  T |T + E  
 
 
 
 
 
T  int  | int * T | ( E ) 
 
E 
T 
( int5 ) 

Alex Aiken 
Recursive Descent 
E  T |T + E  
 
 
 
 
 
T  int  | int * T | ( E ) 
 
E 
T 
( int5 ) 
int 
* 
T 
Mismatch: int does not match ( 
Backtrack … 

Alex Aiken 
Recursive Descent 
E  T |T + E  
 
 
 
 
 
T  int  | int * T | ( E ) 
 
E 
T 
( int5 ) 

Alex Aiken 
Recursive Descent 
E  T |T + E  
 
 
 
 
 
T  int  | int * T | ( E ) 
 
E 
T 
( int5 ) 
( 
E 
) 
Match!  Advance input. 

Alex Aiken 
Recursive Descent 
E  T |T + E  
 
 
 
 
 
T  int  | int * T | ( E ) 
 
E 
T 
( int5 ) 
( 
E 
) 

Alex Aiken 
Recursive Descent 
E  T |T + E  
 
 
 
 
 
T  int  | int * T | ( E ) 
 
E 
T 
( int5 ) 
( 
E 
) 
T 

Alex Aiken 
Recursive Descent 
E  T |T + E  
 
 
 
 
 
T  int  | int * T | ( E ) 
 
E 
T 
( int5 ) 
( 
E 
) 
T 
int 
Match!  Advance input. 

Alex Aiken 
Recursive Descent 
E  T |T + E  
 
 
 
 
 
T  int  | int * T | ( E ) 
 
E 
T 
( int5 ) 
( 
E 
) 
T 
int 
Match!  Advance input. 

Alex Aiken 
Recursive Descent 
E  T |T + E  
 
 
 
 
 
T  int  | int * T | ( E ) 
 
( int5 ) 
End of input, accept. 
E 
T 
( 
E 
) 
T 
int 

Recursive Descent 
E 
E’ 
E’ + E 
id + E 
id + E’ 
id + id 
Choose the derivation that is a valid recursive descent 
parse for the string id + id in the given grammar. Moves 
that are followed by backtracking are given in red. 
 
E  E’ | E’ + E 
 
E’  -E’ | id | (E) 
E 
E’ 
id 
E’ + E 
id + E 
id + E’ 
id + id 
E 
E’ + E 
id + E 
id + E’ 
id + id 
E 
E’ 
-E’ 
id 
(E) 
E’ + E 
-E’ + E 
id + E 
id + E’ 
id + -E’ 
id + id 

