Alex Aiken 
Compilers 
Liveness Analysis 

Alex Aiken 
Liveness Analysis 
Once constants have been globally propagated, we would like to 
eliminate dead code 
 
 
 
 
 
 
 
After constant propagation, X := 3 is dead  
(assuming X not used elsewhere) 
X := 3 
B > 0 
Y := Z + W 
Y := 0 
A := 2 * X 

Alex Aiken 
Liveness Analysis 
• The first value of x is dead 
(never used) 
 
• The second value of x is live 
(may be used) 
 
• Liveness is an important 
concept 
X := 3 
X := 4 
  Y := X 

Alex Aiken 
Liveness Analysis 
 
A variable x is live at statement s if 
– There exists a statement s’ that uses x 
 
– There is a path from s to s’ 
 
– That path has no intervening assignment to x 

Alex Aiken 
Liveness Analysis 
• A statement x := … is dead code if x is dead after the 
assignment 
 
• Dead statements can be deleted from the program 
 
• But we need liveness information first . . . 

Alex Aiken 
Liveness Analysis 
• We can express liveness in terms of information 
transferred between adjacent statements, just as in 
copy propagation 
 
• Liveness is simpler than constant propagation, since 
it is a boolean property (true or false) 
 
 

Alex Aiken 
Liveness Analysis 
 
L(p, x, out) =   { L(s, x, in) | s a successor of p } 
p 
Rule 1 

Alex Aiken 
Liveness Analysis 
 
 L(s, x, in) = true  if s refers to x on the rhs 
…:= f(x) 
Rule 2 

Alex Aiken 
Liveness Analysis 
 
 L(x := e, x, in) = false  if e does not refer to x 
x := e 
Rule 3 

Alex Aiken 
Liveness Analysis 
 
 L(s, x, in) = L(s, x, out) if s does not refer to x 
s 
Rule 4 

Alex Aiken 
Liveness Analysis 
1. Let all L(…) = false initially 
 
2. Repeat until all statements s satisfy rules 1-4 
Pick s where one of 1-4 does not hold and update 
using the appropriate rule 

Alex Aiken 
Liveness Analysis 

Alex Aiken 
Liveness Analysis 
• A value can change from false to true, but not the 
other way around 
 
• Each value can change only once, so termination is 
guaranteed 
 
• Once the analysis is computed, it is simple to 
eliminate dead code 

Liveness Analysis 
After running the liveness analysis algorithm to 
completion, which of W, X, Y, and Z are live at the 
program point labeled at right? Assume all variables 
are dead on exit. 
X > 0 
Z := 5 
X > 10 
Z := W + 4 
Y := Y + 1 
W 
? 
X := Z - 1 
X 
Y 
Z 

Alex Aiken 
Liveness Analysis 
We’ve seen two kinds of analysis: 
 
Constant propagation is a forwards analysis: 
information is pushed from inputs to outputs 
 
Liveness is a backwards analysis: information is pushed 
from outputs back towards inputs 
 
 

Alex Aiken 
Liveness Analysis 
• There are many other global flow analyses 
 
• Most can be classified as either forward or backward 
 
• Most also follow the methodology of local rules 
relating information between adjacent program 
points 

