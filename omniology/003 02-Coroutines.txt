© Fred Baptiste 2018

What is a coroutine?
cooperative routines
subroutines
subroutine is called
subroutine terminates
inner is now in control
running_averages is in control
running_averages is back in control
stack frame
created
(inner)
stack frame
destroyed
(inner)
may, or may not 
return a value
def averager():
total = 0
count = 0
def inner(value):
nonlocal total
nonlocal count
total += value
count += 1
return total / count
return inner
def running_averages(iterable):
avg = averager()
for value in iterable:
running_average = avg(value)
print(running_average)
© Fred Baptiste 2018

coroutine
def running_averages(iterable):
create instance of running_averager
start coroutine
for value in iterable:
send value to running_averager
received value back
print(received value)
def running_averager():
total = 0
count = 0
running_average = None
while True:
wait for value
receive new value
calculate new average
yield new average
stack frame
created
(running_averager)
coroutine is still active
waiting for next value to be sent
We'll come back to this example in another lecture
© Fred Baptiste 2018

Abstract Data Structures
What are queues and stacks?
A queue is a data structure that supports first-in first-out (FIFO) addition/removal of items
add elements to back of queue
remove elements from front of queue
why abstract?
many different ways of creating
concrete implementations
FIFO
A stack is a data structure that supports last-in first-out addition/removal of items
push elements
on top of stack
last pushed element is removed first (popped)
LIFO
© Fred Baptiste 2018

Using lists
stack
lst.append(item)
à appends item to end of list
lst.pop()
à removes and returns last element of list
queue
lst.insert(0, item)
lst.pop()
à inserts item to front of list
à removes and returns last element of list
So a list can be used for both a stack and a queue
But, inserting elements in a list is quite inefficient!
numbers coming up in a bit…
© Fred Baptiste 2018

The deque data structure
Python's collections module implements a data structure called deque
This is a double-ended queue
à very efficient at adding / removing items from both front and end of a collection
from collections import deque
dq = deque()
dq = deque(iterable)
dq.append(item)
dq.appendleft(item)
dq.pop()
dq.popleft()
len(dq)
dq.clear()
dq = deque(maxlen=n)
© Fred Baptiste 2018

Timings
list
deque
append (right)
pop (right)
insert (left)
pop (left)
# items = 10_000
# tests = 1_000
0.87
(times in seconds)
20.80
0.002
0.012
0.87
0.0005
0.0005
0.84
--
x4
x25
x24
© Fred Baptiste 2018

Another use case…
producer
consumer
queue
producer
consumer
performs work
grabs data from queue
adds data to queue
© Fred Baptiste 2018

Implementing a Producer/Consumer using Subroutines
à create an "unlimited" deque
à run producer to insert all elements into deque
à run consumer to remove and process all elements in deque
def produce_elements(dq):
for i in range(1, 100_000):
dq.appendleft(i)
def consume_elements(dq):
while len(dq) > 0:
item = dq.pop()
print('processing item', item)
def coordinator():
dq = deque()
producer = produce_elements(dq)
consume_elements(dq)
© Fred Baptiste 2018

Implementing a Producer/Consumer using Generators
à create a limited size deque
à producer runs until deque is filled
à yields control back to caller
à consumer runs until deque is empty
à yields control back to caller
repeat until producer is "done"
or controller decides to stop
à coordinator creates instance of producer generator
à coordinator creates instance of consumer generator
© Fred Baptiste 2018

Implementing a Producer/Consumer using Generators
def produce_elements(dq, n):
for i in range(1, n):
dq.appendleft(i)
if len(dq) == dq.maxlen:
yield
def consume_elements(dq):
while True:
while len(dq) > 0:
item = dq.pop()
# process item
yield
def coordinator():
dq = deque(maxlen=10)
producer = produce_elements(dq, 100_000)
consumer = consume_elements(dq)
while True:
try:
next(producer)
except StopIteration:
break
finally:
next(consumer)
Notice how yield is not used to yield values
but to yield control back to controller
© Fred Baptiste 2018

Code Exercises
© Fred Baptiste 2018

