1
More About Turing Machines
“Programming Tricks”
Restrictions
Extensions
Closure Properties

2
Programming Trick: Multiple Tracks
Think of tape symbols as vectors with k 
components, each chosen from a finite 
alphabet.
Makes the tape appear to have k tracks.
Let input symbols be blank in all but one 
track.

3
Picture of Multiple Tracks
q
X
Y
Z
Represents one symbol [X,Y,Z]
0
B
B
Represents
input symbol 0
B
B
B
Represents
the blank

4
Programming Trick: Marking
A common use for an extra track is to 
mark certain positions.
Almost all tape squares hold B (blank) 
in this track, but several hold special 
symbols (marks) that allow the TM to 
find particular places on the tape.

5
Marking
q
X
Y
B
Z
B
W
Marked Y
Unmarked
W and Z

6
Programming Trick: Caching 
in the State
The state can also be a vector.
First component is the “control state.”
Other components hold data from a 
finite alphabet.

7
Example: Using These Tricks
This TM doesn’t do anything terribly 
useful; it copies its input w infinitely.
Control states:
q: Mark your position and remember the 
input symbol seen.
p: Run right, remembering the symbol and 
looking for a blank.  Deposit symbol.
r: Run left, looking for the mark.

8
Example – (2)
States have the form [x, Y], where x is 
q, p, or r and Y is 0, 1, or B.
Only p uses 0 and 1.
Tape symbols have the form [U, V].
U is either X (the “mark”) or B.
V is 0, 1 (the input symbols) or B.
[B, B] is the TM blank; [B, 0] and [B, 1] 
are the inputs.

9
The Transition Function
Convention: a and b each stand for 
“either 0 or 1.”
δ([q,B], [B,a]) = ([p,a], [X,a], R).
In state q, copy the input symbol under 
the head (i.e., a ) into the state.
Mark the position read.
Go to state p and move right.

10
Transition Function – (2)
δ([p,a], [B,b]) = ([p,a], [B,b], R).
In state p, search right, looking for a blank 
symbol (not just B in the mark track).
δ([p,a], [B,B]) = ([r,B], [B,a], L).
When you find a B, replace it by the 
symbol (a ) carried in the “cache.”
Go to state r and move left.

11
Transition Function – (3)
δ([r,B], [B,a]) = ([r,B], [B,a], L).
In state r, move left, looking for the mark.
δ([r,B], [X,a]) = ([q,B], [B,a], R).
When the mark is found, go to state q and 
move right.
But remove the mark from where it was.
q will place a new mark and the cycle 
repeats.

12
Simulation of the TM
q
B
. . . B   B   B   B  . . .
. . . 0   1   B   B  . . .

13
Simulation of the TM
p
0
. . . X   B   B   B  . . .
. . . 0   1   B   B  . . .

14
Simulation of the TM
p
0
. . . X   B   B   B  . . .
. . . 0   1   B   B  . . .

15
Simulation of the TM
r
B
. . . X   B   B   B  . . .
. . . 0   1   0   B  . . .

16
Simulation of the TM
r
B
. . . X   B   B   B  . . .
. . . 0   1   0   B  . . .

17
Simulation of the TM
q
B
. . . B   B   B   B  . . .
. . . 0   1   0   B  . . .

18
Simulation of the TM
p
1
. . . B   X   B   B  . . .
. . . 0   1   0   B  . . .

19
Semi-infinite Tape
We can assume the TM never moves 
left from the initial position of the head.
Let this position be 0; positions to the 
right are 1, 2, … and positions to the 
left are –1, –2, …
New TM has two tracks.
Top holds positions 0, 1, 2, …
Bottom holds a marker, positions –1, –2, …

20
Simulating Infinite Tape by 
Semi-infinite Tape
0   1   2   3   . . .
*  -1  -2  -3  . . .
q
U/L
State remembers whether
simulating upper or lower
track.  Reverse directions
for lower track.
Put * here
at the first
move
You don’t need to do anything,
because these are initially B.

21
More Restrictions
Two stacks can simulate one tape.
One holds positions to the left of the head; 
the other holds positions to the right.
In fact, by a clever construction, the 
two stacks to be counters = only two 
stack symbols, one of which can only 
appear at the bottom. 
Factoid: Invented by Pat Fischer,
whose main claim to fame is that
he was a victim of the Unabomber.

22
Extensions
More general than the standard TM.
But still only able to define the RE 
languages.
1. Multitape TM.
2. Nondeterministic TM.
3. Store for name-value pairs.

23
Multitape Turing Machines
Allow a TM to have k tapes for any 
fixed k.
Move of the TM depends on the state 
and the symbols under the head for 
each tape.
In one move, the TM can change state, 
write symbols under each head, and 
move each head independently.

24
Simulating k Tapes by One
Use 2k tracks.
Each tape of the k-tape machine is 
represented by a track.
The head position for each track is 
represented by a mark on an additional 
track.

25
Picture of Multitape Simulation
q
X                        head for tape 1
. . .  A   B   C   A   C   B   . . .     tape 1
X              head for tape 2
. . .  U   V   U   U  W   V   . . .    tape 2

26
Nondeterministic TM’s
Allow the TM to have a choice of move 
at each step.
Each choice is a state-symbol-direction 
triple, as for the deterministic TM.
The TM accepts its input if any 
sequence of choices leads to an 
accepting state.

27
Simulating a NTM by a DTM
The DTM maintains on its tape a 
queue of ID’s of the NTM.
A second track is used to mark certain 
positions:
1. A mark for the ID at the head of the 
queue.
2. A mark to help copy the ID at the head 
and make a one-move change.

28
Picture of the DTM Tape
ID0 # ID1 # …  # IDk # IDk+1 …        # IDn # New ID
X
Front of
queue
Y
Where you are
copying IDk with 
a move
Rear of
queue

29
Operation of the Simulating DTM
The DTM finds the ID at the current 
front of the queue.
It looks for the state in that ID so it can 
determine the moves permitted from 
that ID.
If there are m possible moves, it 
creates m new ID’s, one for each move, 
at the rear of the queue.

30
Operation of the DTM – (2)
The m new ID’s are created one at a 
time.
After all are created, the marker for the 
front of the queue is moved one ID 
toward the rear of the queue.
However, if a created ID has an 
accepting state, the DTM instead 
accepts and halts.

31
Why the NTM -> DTM 
Construction Works
There is an upper bound, say k, on the 
number of choices of move of the NTM 
for any state/symbol combination.
Thus, any ID reachable from the initial 
ID by n moves of the NTM will be 
constructed by the DTM after 
constructing at most (kn+1-k)/(k-1)ID’s. 
Sum of k+k2+…+kn

32
Why? – (2)
If the NTM accepts, it does so in some 
sequence of n choices of move.
Thus the ID with an accepting state will 
be constructed by the DTM in some 
large number of its own moves.
If the NTM does not accept, there is no 
way for the DTM to accept.

33
Taking Advantage of Extensions
We now have a really good situation.
When we discuss construction of 
particular TM’s that take other TM’s as 
input, we can assume the input TM is 
as simple as possible.
E.g., one, semi-infinite tape, deterministic.
But the simulating TM can have many 
tapes, be nondeterministic, etc.

34
Simulating a Name-Value
Store by a TM
The TM uses one of several tapes to 
hold an arbitrarily large sequence of 
name-value pairs in the format 
#name*value#…
Mark, using a second track, the left end 
of the sequence.
A second tape can hold a name whose 
value we want to look up.

35
Lookup
Starting at the left end of the store, 
compare the lookup name with each 
name in the store.
When we find a match, take what 
follows between the * and the next # 
as the value.

36
Insertion
Suppose we want to insert name-value 
pair (n, v), or replace the current value 
associated with name n by v.
Perform lookup for name n.
If not found, add n*v# at the end of 
the store.

37
Insertion – (2)
If we find #n*v’#, we need to replace 
v’ by v.
If v is shorter than v’, you can leave 
blanks to fill out the replacement.
But if v is longer than v’, you need to 
make room.

38
Insertion – (3)
Use a third tape to copy everything from 
the first tape to the right of v’.
Mark the position of the * to the left of 
v’ before you do.
On the first tape, write v just to the left 
of that star.
Copy from the third tape to the first, 
leaving enough room for v.

39
Picture of Shifting Right
. . . # n * v’ # blah blah blah . . .
Tape 1
# blah blah blah . . .
Tape 3
v

40
Picture of Shifting Right
. . . # n *                 # blah blah blah . . .
Tape 1
# blah blah blah . . .
Tape 3
v

41
Closure Properties of 
Recursive and RE Languages
Both closed under union, concatenation, 
star, reversal, intersection, inverse 
homomorphism.
Recursive closed under difference, 
complementation.
RE closed under homomorphism.

42
Union
Let L1 = L(M1) and L2 = L(M2).
Assume M1 and M2 are single-semi-
infinite-tape TM’s.
Construct 2-tape TM M to copy its input 
onto the second tape and simulate the 
two TM’s M1 and M2 each on one of the 
two tapes, “in parallel.”

43
Union – (2)
Recursive languages: If M1 and M2 are 
both algorithms, then M will always halt 
in both simulations.
RE languages: accept if either accepts, 
but you may find both TM’s run forever 
without halting or accepting.

44
Picture of Union/Recursive
M1
M2
Input w
Accept
Accept
Reject
Reject
OR
Reject
Accept
AND
M
Remember: = “halt
without accepting

45
Picture of Union/RE
M1
M2
Input w
Accept
Accept
OR
Accept
M

46
Intersection/Recursive – Same Idea
M1
M2
Input w
Accept
Accept
Reject
Reject
AND
Reject
Accept
OR
M

47
Intersection/RE
M1
M2
Input w
Accept
Accept
AND
Accept
M

48
Difference, Complement
Recursive languages: both TM’s will 
eventually halt.
Accept if M1 accepts and M2 does not.
Corollary: Recursive languages are closed 
under complementation.
RE Languages: can’t do it; M2 may 
never halt, so you can’t be sure input is 
in the difference.

49
Concatenation/RE
Let L1 = L(M1) and L2 = L(M2).
Assume M1 and M2 are single-semi-
infinite-tape TM’s.
Construct 2-tape Nondeterministic TM M:
1. Guess a break in input w = xy.
2. Move y to second tape.
3. Simulate M1 on x, M2 on y.
4. Accept if both accept.

50
Concatenation/Recursive
Can’t use a NTM.
Systematically try each break w = xy.
M1 and M2 will eventually halt for each 
break.
Accept if both accept for any one 
break.
Reject if all breaks tried and none lead 
to acceptance.

51
Star
Same ideas work for each case.
RE: guess many breaks, accept if M1
accepts each piece.
Recursive: systematically try all ways to 
break input into some number of 
pieces.

52
Reversal
Start by reversing the input.
Then simulate TM for L to accept w if 
and only wR is in L.
Works for either Recursive or RE 
languages.

53
Inverse Homomorphism
Apply h to input w.
Simulate TM for L on  h(w).
Accept w iff h(w) is in L.
Works for Recursive or RE.

54
Homomorphism/RE
Let L = L(M1).
Design NTM M to take input w and 
guess an x such that h(x) = w.
M accepts whenever M1 accepts x.
Note: won’t work for Recursive 
languages.

