
James J. Buckley, Leonard J. Jowers
Simulating Continuous Fuzzy Systems

Studies in Fuzziness and Soft Computing, Volume 188
Editor-in-chief
Prof. Janusz Kacprzyk
Systems Research Institute
Polish Academy of Sciences
ul. Newelska 6
01-447 Warsaw
Poland
E-mail: kacprzyk@ibspan.waw.pl
Further volumes of this series
can be found on our homepage:
springeronline.com
Vol. 174. Mircea Negoita, Daniel Neagu,
Vasile Palade
Computational Intelligence: Engineering of
Hybrid Systems, 2005
ISBN 3-540-23219-2
Vol. 175. Anna Maria Gil-Lafuente
Fuzzy Logic in Financial Analysis, 2005
ISBN 3-540-23213-3
Vol. 176. Udo Seiffert, Lakhmi C. Jain,
Patric Schweizer (Eds.)
Bioinformatics Using Computational
Intelligence Paradigms, 2005
ISBN 3-540-22901-9
Vol. 177. Lipo Wang (Ed.)
Support Vector Machines: Theory and
Applications, 2005
ISBN 3-540-24388-7
Vol. 178. Claude Ghaoui, Mitu Jain,
Vivek Bannore, Lakhmi C. Jain (Eds.)
Knowledge-Based Virtual Education, 2005
ISBN 3-540-25045-X
Vol. 179. Mircea Negoita,
Bernd Reusch (Eds.)
Real World Applications of Computational
Intelligence, 2005
ISBN 3-540-25006-9
Vol. 180. Wesley Chu,
Tsau Young Lin (Eds.)
Foundations and Advances in Data Mining,
2005
ISBN 3-540-25057-3
Vol. 181. Nadia Nedjah,
Luiza de Macedo Mourelle
Fuzzy Systems Engineering, 2005
ISBN 3-540-25322-X
Vol. 182. John N. Mordeson,
Kiran R. Bhutani, Azriel Rosenfeld
Fuzzy Group Theory, 2005
ISBN 3-540-25072-7
Vol. 183. Larry Bull, Tim Kovacs (Eds.)
Foundations of Learning Classiﬁer Systems,
2005
ISBN 3-540-25073-5
Vol. 184. Barry G. Silverman, Ashlesha Jain,
Ajita Ichalkaranje, Lakhmi C. Jain (Eds.)
Intelligent Paradigms for Healthcare
Enterprises, 2005
ISBN 3-540-22903-5
Vol. 185. Dr. Spiros Sirmakessis (Ed.)
Knowledge Mining, 2005
ISBN 3-540-25070-0
Vol. 186. Radim Bˇelohlávek, Vilém
Vychodil
Fuzzy Equational Logic, 2005
ISBN 3-540-26254-7
Vol. 187. Zhong Li, Wolfgang A. Halang,
Guanrong Chen
Integration of Fuzzy Logic and Chaos
Theory, 2006
ISBN 3-540-26899-5
Vol. 188. James J. Buckley, Leonard J.
Jowers
Simulating Continuous Fuzzy Systems, 2006
ISBN 3-540-28455-9

James J. Buckley
Leonard J. Jowers
Simulating Continuous
Fuzzy Systems
ABC

Professor James J. Buckley
Department of Mathematics
University of Alabama at Birmingham
35294-1170 Birmingham
U.S.A.
E-mail: buckley@math.uab.edu
Leonard J. Jowers
Department of Computer and
Information Sciences
University of Alabama at Birmingham
35294 Birmingham, Alabama
U.S.A.
Library of Congress Control Number: 200593219
ISSN print edition: 1434-9922
ISSN electronic edition: 1860-0808
ISBN-10 3-540-28455-9 Springer Berlin Heidelberg New York
ISBN-13 978-3-540-28455-0 Springer Berlin Heidelberg New York
This work is subject to copyright. All rights are reserved, whether the whole or part of the material is
concerned, speciﬁcally the rights of translation, reprinting, reuse of illustrations, recitation, broadcasting,
reproduction on microﬁlm or in any other way, and storage in data banks. Duplication of this publication
or parts thereof is permitted only under the provisions of the German Copyright Law of September 9,
1965, in its current version, and permission for use must always be obtained from Springer. Violations are
liable for prosecution under the German Copyright Law.
Springer is a part of Springer Science+Business Media
springeronline.com
c⃝Springer-Verlag Berlin Heidelberg 2006
Printed in The Netherlands
The use of general descriptive names, registered names, trademarks, etc. in this publication does not imply,
even in the absence of a speciﬁc statement, that such names are exempt from the relevant protective laws
and regulations and therefore free for general use.
Typesetting: by the authors and TechBooks using a Springer LATEX macro package
Printed on acid-free paper
SPIN: 11376392
89/TechBooks
5 4 3 2 1 0

To Julianne and Helen,
To Paula and “the kids”.

Contents
1
Introduction
1
1.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1
1.2
Notation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3
1.3
Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4
1.4
Previous Research
. . . . . . . . . . . . . . . . . . . . . . . .
4
1.5
Figures
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5
1.5.1
Maple . . . . . . . . . . . . . . . . . . . . . . . . . . .
5
1.5.2
LaTeX . . . . . . . . . . . . . . . . . . . . . . . . . . .
5
1.5.3
Simulink . . . . . . . . . . . . . . . . . . . . . . . . . .
6
1.5.4
Color
. . . . . . . . . . . . . . . . . . . . . . . . . . .
6
1.6
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
6
2
Fuzzy Sets
9
2.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9
2.2
Fuzzy Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9
2.2.1
Fuzzy Numbers . . . . . . . . . . . . . . . . . . . . . .
10
2.2.2
Alpha-Cuts . . . . . . . . . . . . . . . . . . . . . . . .
10
2.2.3
Inequalities . . . . . . . . . . . . . . . . . . . . . . . .
12
2.2.4
Discrete Fuzzy Sets . . . . . . . . . . . . . . . . . . . .
12
2.3
Fuzzy Arithmetic . . . . . . . . . . . . . . . . . . . . . . . . .
12
2.3.1
Extension Principle
. . . . . . . . . . . . . . . . . . .
12
2.3.2
Interval Arithmetic . . . . . . . . . . . . . . . . . . . .
13
2.3.3
Fuzzy Arithmetic . . . . . . . . . . . . . . . . . . . . .
14
2.4
Fuzzy Functions
. . . . . . . . . . . . . . . . . . . . . . . . .
15
2.4.1
Extension Principle
. . . . . . . . . . . . . . . . . . .
15
2.4.2
Alpha-Cuts and Interval Arithmetic
. . . . . . . . . .
16
2.4.3
Diﬀerences
. . . . . . . . . . . . . . . . . . . . . . . .
17
2.5
Fuzzy Diﬀerential Equations . . . . . . . . . . . . . . . . . . .
18
2.6
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
19

CONTENTS
3
Fuzzy Estimation
21
3.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
21
3.2
Expert Opinion . . . . . . . . . . . . . . . . . . . . . . . . . .
21
3.3
Fuzzy Estimators from Conﬁdence Intervals . . . . . . . . . .
22
3.3.1
Fuzzy Estimator of µ . . . . . . . . . . . . . . . . . . .
23
3.4
Fuzzy Arrival/Service Rates . . . . . . . . . . . . . . . . . . .
24
3.4.1
Fuzzy Arrival Rate . . . . . . . . . . . . . . . . . . . .
25
3.4.2
Fuzzy Service Rate . . . . . . . . . . . . . . . . . . . .
26
3.5
Fuzzy Estimator of p in the Binomial . . . . . . . . . . . . . .
28
3.6
Fuzzy Estimator of the Mean of the Normal Distribution . . .
30
3.7
Summary
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
31
3.8
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
31
4
Fuzzy Systems
33
4.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
33
4.2
Fuzzy System . . . . . . . . . . . . . . . . . . . . . . . . . . .
35
4.3
Computing the Uncertainty Band . . . . . . . . . . . . . . . .
35
4.4
Uncertainty Band as a Conﬁdence Band . . . . . . . . . . . .
36
4.5
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
36
5
Continuous Simulation Software
39
5.1
Software Selection
. . . . . . . . . . . . . . . . . . . . . . . .
39
5.2
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
41
6
Simulation Optimization
43
6.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
43
6.2
Theory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
44
6.3
Summary
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
47
6.4
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
47
7
Predator/Prey Models
49
7.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
49
7.2
Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
50
7.3
Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
50
7.4
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
53
8
An Arm’s Race Model
55
8.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
55
8.2
Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
56
8.3
First Simulation
. . . . . . . . . . . . . . . . . . . . . . . . .
56
8.4
Second Simulation
. . . . . . . . . . . . . . . . . . . . . . . .
59
8.5
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
61
VIII

CONTENTS
9
Bungee Jumping
63
9.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
63
9.2
Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
63
9.3
First Simulation
. . . . . . . . . . . . . . . . . . . . . . . . .
64
9.4
Second Simulation
. . . . . . . . . . . . . . . . . . . . . . . .
66
9.5
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
67
10 Spread of Infectious Disease Model
69
10.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
69
10.2 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
70
10.3 Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
71
10.4 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
74
11 Planetary Motion
75
11.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
75
11.2 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
75
11.3 Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
77
11.4 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
79
12 Human Cannon Ball
81
12.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
81
12.2 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
82
12.3 First Simulation
. . . . . . . . . . . . . . . . . . . . . . . . .
83
12.4 Second Simulation
. . . . . . . . . . . . . . . . . . . . . . . .
84
12.5 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
86
13 Electrical Circuits
87
13.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
87
13.2 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
88
13.3 Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
90
13.4 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
93
14 Hawks, Doves and Law-Abiders
95
14.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
95
14.2 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
96
14.3 First Simulation
. . . . . . . . . . . . . . . . . . . . . . . . .
97
14.4 Second Simulation
. . . . . . . . . . . . . . . . . . . . . . . .
99
14.5 Third Simulation . . . . . . . . . . . . . . . . . . . . . . . . .
102
14.6 Summary
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
104
14.7 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
104
15 Suspension System
105
15.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
105
15.2 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
106
15.3 Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
107
15.4 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
110
X
I

CONTENTS
16 Chemical Reactions
111
16.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
111
16.2 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
111
16.3 Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
113
16.4 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
116
17 The AIDS Epidemic
117
17.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
117
17.2 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
118
17.3 Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
120
17.4 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
124
18 The Machine/Service Queuing Model
125
18.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
125
18.2 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
126
18.3 First Simulation
. . . . . . . . . . . . . . . . . . . . . . . . .
127
18.4 Second Simulation
. . . . . . . . . . . . . . . . . . . . . . . .
128
18.5 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
131
19 A Self-Service Queuing Model
133
19.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
133
19.2 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
134
19.3 Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
135
19.4 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
137
20 Symbiosis
139
20.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
139
20.2 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
139
20.3 Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
140
20.4 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
143
21 Supply and Demand
145
21.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
145
21.2 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
145
21.3 Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
146
21.4 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
149
22 Drug Concentrations
151
22.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
151
22.2 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
152
22.3 Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
153
22.4 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
156
X

CONTENTS
23 Three Species Competition
157
23.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
157
23.2 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
157
23.3 Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
158
23.4 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
161
24 Flying a Glider
163
24.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
163
24.2 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
163
24.3 Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
165
24.4 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
166
25 The National Economy
167
25.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
167
25.2 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
167
25.3 First Simulation: Case #1 . . . . . . . . . . . . . . . . . . . .
168
25.4 Second Simulation: Case #2
. . . . . . . . . . . . . . . . . .
169
25.5 Third Simulation: Case #3
. . . . . . . . . . . . . . . . . . .
172
25.6 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
174
26 Sex Structured Population Models
175
26.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
175
26.2 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
176
26.3 Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
176
26.4 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
179
27 Summary and Future Research
181
27.1 Summary
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
181
27.2 Future Research
. . . . . . . . . . . . . . . . . . . . . . . . .
183
27.3 Conclusions . . . . . . . . . . . . . . . . . . . . . . . . . . . .
183
27.4 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
184
28 Matlab/Simulink Commands for Graphs
185
28.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . .
185
28.2 Simulink Diagrams (.mdl ﬁles)
. . . . . . . . . . . . . . . . .
186
28.3 Parameters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
186
28.4 Matlab Commands (.m ﬁles)
. . . . . . . . . . . . . . . . . .
188
28.5 Availability of Files . . . . . . . . . . . . . . . . . . . . . . . .
190
28.6 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
190
Index
191
List of Figures
197
List of Tables
201
XI

Chapter 1
Introduction
1.1
Introduction
This book is written in two major parts. The ﬁrst part includes the intro-
ductory chapters consisting of Chapters 1 through 6. In part two, Chapters
7-26, we present the applications.
This book continues our research into
simulating fuzzy systems. We started with investigating simulating discrete
event fuzzy systems ([7],[13],[14]). These systems can usually be described as
queuing networks. Items (transactions) arrive at various points in the sys-
tem and go into a queue waiting for service. The service stations, preceded
by a queue, are connected forming a network of queues and service, until
the transaction ﬁnally exits the system. Examples considered included ma-
chine
shops, emergency rooms, project networks, bus routes, etc. Analysis
of all of these systems depends on parameters like arrival rates and service
rates. These parameters are usually estimated from historical data. These
estimators are generally point estimators. The point estimators are put into
the model to compute system descriptors like mean time an item spends in
the system, or the expected number of transactions leaving the system per
unit time. We argued that these point estimators contain uncertainty not
shown in the calculations. Our estimators of these parameters become fuzzy
numbers, constructed by placing a set of conﬁdence intervals one on top of
another. Using fuzzy number parameters in the model makes it into a fuzzy
system. The system descriptors we want (time in system, number leaving per
unit time) will be fuzzy numbers. In general, computing these fuzzy numbers
can be diﬃcult. We showed how crisp discrete event simulation can be used
to estimate the fuzzy numbers used to describe system behavior.
This book is about simulating continuous fuzzy systems.
Continuous
systems, or continuous time dynamical systems, are usually described by a
system of ordinary diﬀerential equations (ODEs). Many parameters in the
system of ODEs are not known precisely and must be estimated. To show the
1

2
CHAPTER 1. INTRODUCTION
uncertainty in these parameter values we will use fuzzy number estimators.
Fuzzy number parameter values produce a system of fuzzy ODEs to solve
and we have a continuous fuzzy system, or a continuous time fuzzy dynamical
system. Solution trajectories become fuzzy trajectories. A cut through the
fuzzy trajectory at any time t produces a fuzzy number. We plan to use crisp
continuous simulation to estimate these fuzzy trajectories.
But ﬁrst we need to be familiar with fuzzy sets. All you need to know
about fuzzy sets for this book comprises Chapter 2. For a beginning intro-
duction to fuzzy sets and fuzzy logic see [9].
Chapter 3 gives a brief introduction to fuzzy estimation.
We will use
only two methods of fuzzy estimation: from expert opinion or from data.
We explain how you can get fuzzy numbers when you estimate, from crisp
data, probabilities or parameters in probability densities. The basic construc-
tion involves placing conﬁdence intervals, one on top of another, to obtain a
fuzzy number as our estimator instead of using a point estimator or a single
conﬁdence interval.
Chapter 4 introduces continuous fuzzy (dynamical) systems theory. Con-
sider a system of diﬀerential equations whose solution describes the evolution
of the crisp continuous (dynamical) system. This system of diﬀerential equa-
tions usually has a number of parameters many of whom their values are not
known precisely. To show the uncertainty in these parameter values we will
use fuzzy number estimators (Chapter 3). Fuzzy number parameter values
produce a system of fuzzy ODEs to solve and we have a continuous (dynami-
cal) fuzzy system. We plan to use crisp continuous simulation to estimate the
base of these fuzzy trajectories, which we will call the band of uncertainty.
In the rest of this book we will call a crisp continuous time dynamical system
simply a continuous system and a continuous time fuzzy dynamical system
simply a continuous fuzzy system.
How do we choose simulation software to accomplish all the simulations
in Chapters 7-26 is the topic of Chapter 5. We discuss cost, ease of use,
need to run on a desktop computer, plus some other concerns we consider in
selecting the simulation software. Our ﬁnal decision is also discussed.
Chapter 6 introduces a type of simulation optimization. We discuss how
we plan to solve the simulation optimization problems presented in Chapters
7-26.
The general problem remains unsolved.
Let us brieﬂy discuss this
optimization problem.
Some parameter values are uncertain and we use
their fuzzy number estimators. Let these parameters range throughout the
interval which is the base of the fuzzy number. We obtain an inﬁnite number
of crisp solutions (trajectories) which we call the uncertainty band. We want
to determine and graph the boundary of this uncertainty band. This is the
topic of Chapter 6 .
The structure of the rest of the book is now determined. Use continuous
simulation to approximate the boundary of the uncertainty bands for the
fuzzy systems. The crisp system is usually suﬃciently complicated so that the

1.2. NOTATION
3
exact crisp solution is either too diﬃcult to work with (to correctly fuzzify),
or we do not have an exact closed-form mathematical solution.
We need
to use software to obtain graphs of the solutions. This will be the topic of
Chapters 7-26.
The applications in Chapters 7-26 are quite varied ranging from preda-
tor/prey models to bungee jumping to a human cannon ball showing the
varieties of continuous fuzzy systems. These chapters may be read indepen-
dently. This means some material, including a discussion of the system of
diﬀerential equations, fuzzy estimators for some of the parameters producing
a fuzzy system, the optimization problem, the simulation diagram, etc., is
repeated in each chapter.
How we organized the continuous simulation program is shown in each
Chapter 7 - 26. We did not need to write any computer code to use our simu-
lation software if we wanted to obtain only one solution graph per simulation
run. Simulation operations are represented as icons and we connect them
with arrows using the mouse. Diagrams showing the icons and connecting
arrows are given for each application in Chapters 7 - 26. However, we wanted
to place up to 729 solution graphs in a single ﬁgure; hence, we had to write
Matlab code in order to get this result. Further details are in Chapter 28.
This book is based on, but expanded from, the following recent papers
and publications: (1) fuzzy estimation, probability and statistics ([4]-[6],[12]);
(2)fuzzy systems [8]; and (3) simulating continuous fuzzy systems ([10],[11]).
There are no prerequisites, but it would be helpful to know some basic
information about ordinary diﬀerential equations (see Section 2.5). However,
the reader should be able to understand, from the ﬁgures and analytical
development, how the continuous simulation is useful in analyzing continuous
fuzzy systems.
1.2
Notation
It is diﬃcult, in a book with a lot of mathematics, to achieve a uniform
notation without having to introduce many new specialized symbols. Our
basic notation is presented in Chapter 2. What we have done is to have a
uniform notation within each chapter. What this means is that we may use
the letters “a” and “b” to represent a closed interval [a, b] in one chapter but
they could stand for parameters in a diﬀerential equation in another chapter.
We will have the following uniform notation throughout the book: (1) we
place a “bar” over a letter to denote a fuzzy set (A, B, etc.), and all our
fuzzy sets will be fuzzy subsets of the real numbers; and (2) an alpha-cut of
a fuzzy set (Chapter 2) is always denoted by “α”. Since we will be using α
for alpha-cuts we need to change some standard notation in statistics: we
use β in conﬁdence intervals. So a (1 −β)100% conﬁdence interval means a
95% conﬁdence interval if β = 0.05. When a conﬁdence interval switches to
being an alpha-cut of a fuzzy number (see Chapter 3), we switch from β to

4
CHAPTER 1. INTRODUCTION
α. All fuzzy arithmetic is performed using the extension principle (Chapter
2). The term “crisp” means not fuzzy. A crisp set is a regular set and a crisp
number is a real number. Also, throughout the book x will be the mean of a
random sample, not a fuzzy set.
1.3
Applications
All the applications, except Chapter 9, deal with systems (from two to ﬁve
diﬀerential equations). Chapter 9 uses only one nonlinear ODE. About half
of the systems are linear and the rest are nonlinear. The parameters in the
systems, whose values may be uncertain, range from a minimum of two to a
maximum of eleven.
We usually do not present complete derivations of the systems of ODEs.
This is not a book on math modeling. Many times a complete derivation
involves details from chemistry, biology, aeronautics etc. which is beyond the
topic of this book. This is common practice in books on nonlinear ODEs
where they present the system of ODEs and refer the reader to the original
papers for the derivations.
In a number of applications the variables x(t) (y(t),z(t)) represent the size
of some population. Technically, x(t) (y(t),z(t)) should then take on only pos-
itive integer values. However, it is common practice to model such systems
using systems of ODEs and continuous variables so that x(t) (y(t),z(t)) can
take on any positive real number values. If we were to restrict x(t) (y(t),z(t))
to be integer valued it may be better to work with systems of diﬀerence equa-
tions. We will not consider diﬀerence equations in this book, only diﬀerential
equations.
1.4
Previous Research
Our approach to handling uncertainty in continuous systems in this book is
not completely new. Methods of analyzing uncertainty in crisp diﬀerential
equations has been going on for about twenty years. See ([1]-[3],[15],[17],[18])
for a review of this area. In this research the authors allowed uncertainty in
the initial conditions, in the parameters in the diﬀerential equations and in
some of the functional relationships between the variables in the equations.
The uncertainty in the initial conditions and in the parameters is usually
modeled using intervals but some authors employed fuzzy numbers.
The
analysis having fuzzy numbers always turns into using intervals after taking
α−cuts (Chapter 2). The uncertainty in functions is modeled by assuming
their graphs lie between a pair of envelopes (an upper and lower graph). We
will not assume any uncertainty in the structure of the diﬀerential equations,
and functions, in our models.

1.5. FIGURES
5
The methods used in the study of uncertainty in crisp diﬀerential equa-
tions usually falls into two areas. They are the so called “AI-based methods”,
also called “semiquantitative simulation”, and the Monte Carlo methods. In
the semiquantitative method the object is to give a qualitative description of
the behavior of all possible solutions. In the Monte Carlo technique the goal
is to construct all possible solutions. However, the set of all possible solutions
is inﬁnite, so they compute some ﬁnite (discrete) approximation to the set of
all possible solutions. Both areas have their advantages and disadvantages
[17]. What we do in this book can be classiﬁed as the Monte Carlo method.
What then is new in this book is: (1) we argue in Chapter 4 that many
crisp continuous (dynamical) systems naturally become fuzzy through fuzzy
estimation (Chapter 3) of the uncertain initial conditions and parameters; (2)
we ﬁnd an approximation to the band of uncertainty which is the trajectory of
the bases of the fuzzy number trajectories; and (3) we apply this to numerous
diverse applications in Chapters 7 - 26 using the readily available simulation
language Simulink [19].
1.5
Figures
The reader can see that there are three types of ﬁgures in this book. We now
explain why we used three diﬀerent types of ﬁgures.
1.5.1
Maple
Some of the ﬁgures, graphs of certain fuzzy numbers, in the book are diﬃcult
to obtain by standard methods (LaTeX) so they were created using a diﬀerent
method. These graphs were done ﬁrst in Maple [16] and then exported to
LaTeX2ϵ. We did these ﬁgures ﬁrst in Maple because of the “implicitplot”
command in Maple. Let us explain why this command was important in this
book. Suppose X is a fuzzy estimator we want to graph. Usually in this book
we determine X by ﬁrst calculating its α-cuts. Let X[α] = [x1(α), x2(α)].
So we get x = x1(α) describing the left side of the triangular shaped fuzzy
number X and x = x2(α) describes the right side. On a graph we would
have the x-axis horizontal and the y-axis vertical. α is on the y-axis between
zero and one. Substituting y for α we need to graph x = xi(y), for i = 1, 2.
But this is backwards, we usually have y a function of x. The “implicitplot”
command allows us to do the correct graph with x a function of y when we
have x = xi(y). All ﬁgures in Chapters 2 and 3 were done in Maple and then
exported to LaTeX2ϵ.
1.5.2
LaTeX
Some other ﬁgures were easily constructed using the graphics in LaTeX2ϵ.
These ﬁgures are Figures 11.1, 12.1, 13.1-13.3, 15.1, 17.1, 22.1 and 28.1.

6
CHAPTER 1. INTRODUCTION
Color/Line Width
Description, graph generated by using only ...
red/3
left-supports, α = 0 cut (Chapter 2)
black/2
cores, α = 1 cut (Chapter 2)
blue/2
right-supports, α = 0 cut (Chapter 2)
green/1
all others
Table 1.1: Color/Line Width Legend
1.5.3
Simulink
All other ﬁgures were constructed by Matlab/Simulink [19]. However, there
was a problem of getting all the graphs for one variable on one coordinate
system.
In the system of diﬀerential equations describing the continuous
system certain parameters were allowed to range throughout intervals. Using
a ﬁnite choice of values for each uncertain parameter gave us at most 729
graphs to place on the same coordinate system. Special code to accomplish
this is discussed in Chapter 28 since this is not automatic in this simulation
software.
1.5.4
Color
We are able to use more than just black and white in the “on-line” publication
of this book.
Therefore, in many ﬁgures made from Matlab/Simulink we
employed green, red, black and blue. Table 1.1 is the legend for the graphs.
In the hard cover printing of the book the green will show up as grey. The
black and green curves are plotted as unbroken lines. Blue curves are dot-
dash lines. Red curves are dash-dash lines.
Access to the “on-line” publication is easily accomplished by surﬁng to
http://www.springerlink.com.
Find the “search for” box.
Search for
“Studies in Fuzziness and Soft Computing”.
On that page you will ﬁnd
a link to an on-line color version. Note however, that if you own the book
and have access to Matlab/Simulink, you may prefer the option oﬀered in
Chapter 28 to explore the simulations more closely.
1.6
References
1. J.Armengol, L.Trave-Massuyes, J.Lluis de la Rosa and J.Vehi: Envelope
Generation for Interval Systems, Proceedings CAEPIA 1997, Malaga,
Spain, 33-48.
2. J.Armengol, L.Trave-Massuyes, J.Lluis de la Rosa and J.Vehi:
On
Modal Interval Analysis for Envelope Determination within the Ca-En
Qualitative Simulator, Proceedings IPUM 1998, Paris, France, 110-117.

1.6. REFERENCES
7
3. A.Bonarini and G.Bontempi: A Qualitative Simulation Approach for
Fuzzy Dynamical Models, ACM Trans. Modeling and Computer Sim-
ulation, 4(1994)285-313.
4. J.J.Buckley: Fuzzy Probabilities: New Approach and Applications,
Physica-Verlag, Heidelberg, Germany, 2003.
5. J.J.Buckley: Fuzzy Probabilities and Fuzzy Sets for Web Planning,
Springer, Heidelberg, Germany, 2004.
6. J.J.Buckley: Fuzzy Statistics, Springer, Heidelberg, Germany, 2004.
7. J.J.Buckley:
Simulating Fuzzy Systems, Springer, Heidelberg, Ger-
many, 2005.
8. J.J.Buckley: Fuzzy Systems, Soft Computing. To appear.
9. J.J.Buckley and E.Eslami: An Introduction to Fuzzy Logic and Fuzzy
Sets, Physica-Verlag, Heidelberg, Germany, 2002.
10. J.J.Buckley, K.Reilly and L.Jowers: Simulating Continuous Fuzzy Sys-
tems I, Iranian J. Fuzzy Systems. To appear.
11. J.J.Buckley, K.Reilly and L.Jowers: Simulating Continuous Fuzzy Sys-
tems II, Information Sciences. To appear.
12. J.J.Buckley, K.Reilly and X.Zheng: Fuzzy Probabilities for Web Plan-
ning, Soft Computing, 8(2004)464-476.
13. J.J.Buckley, K.Reilly and X.Zheng:
Simulating Fuzzy Systems I,
in:
Applied Research in Uncertainty Modeling and Analysis, Eds.
N.O.Attoh-Okine, B.M.Ayyub, Springer, Heidelberg, Germany, 2005,
31-60.
14. J.J.Buckley, K.Reilly and X.Zheng:
Simulating Fuzzy Systems II,
in:
Applied Research in Uncertainty Modeling and Analysis, Eds.
N.O.Attoh-Okine, B.M.Ayyub, Springer, Heidelberg, Germany, 2005,
61-90.
15. A.Klimke, K.Willner and B.Wohlmuth: Uncertainty Modeling Using
Fuzzy Arithmetic Based on Sparse Grids: Applications to Dynamic
Systems, Int. J. Uncertainty, Fuzziness and Knowledge-Based Systems,
12(2004)745-759.
16. Maple 9, Waterloo Maple Inc., Waterloo, Canada.
17. A.C.Cem Say and A.Kutsi Nircan: Random Generation of Monotonic
Functions for Monte Carlo Solutions of Qualitative Diﬀerential Equa-
tions, Automatica, 41(2005)739-754.

8
CHAPTER 1. INTRODUCTION
18. Q.Shen and R.R.Leitch: Fuzzy Qualitative Simulation, IEEE Trans.
Systems, Man, Cybernetics, 23(1993)1038-1061.
19. www.mathworks.com

Chapter 2
Fuzzy Sets
2.1
Introduction
In this chapter we have collected together the basic ideas from fuzzy sets
and fuzzy functions needed for the book. Any reader familiar with fuzzy
sets, fuzzy numbers, the extension principle, α-cuts, interval arithmetic, and
fuzzy functions may go on and have a look at Section 2.5. In Section 2.5 we
brieﬂy discuss fuzzy diﬀerential equations. Usually, the only fuzzy diﬀerential
equations that we have previously investigated were those with fuzzy initial
conditions. A good general reference for fuzzy sets and fuzzy logic is [1] and
[6].
Our notation specifying a fuzzy set is to place a “bar” over a letter. So
X, M, T, . . ., µ, p, σ2, a, b, . . ., all denote fuzzy sets.
2.2
Fuzzy Sets
If Ωis some set, then a fuzzy subset A of Ωis deﬁned by its membership
function , written A(x), which produces values in [0, 1] for all x in Ω. So,
A(x) is a function mapping Ωinto [0, 1]. If A(x0) = 1, then we say x0 belongs
to A, if A(x1) = 0 we say x1 does not belong to A, and if A(x2) = 0.6 we say
the membership value of x2 in A is 0.6. When A(x) is always equal to one
or zero we obtain a crisp (non-fuzzy) subset of Ω. For all fuzzy sets B, C, . . .
we use B(x), C(x), . . . for the value of their membership function at x. The
fuzzy sets we will be using will usually be fuzzy numbers .
The term “crisp” will mean not fuzzy. A crisp set is a regular set. A
crisp number is just a real number. A crisp function maps real numbers (or
real vectors) into real numbers. A crisp solution to a problem is a solution
involving crisp sets, crisp numbers, crisp functions, etc.
9

10
CHAPTER 2. FUZZY SETS
2.2.1
Fuzzy Numbers
A general deﬁnition of fuzzy number may be found in ([1],[6]), however our
fuzzy numbers will be triangular (shaped) fuzzy numbers. A triangular fuzzy
number N is deﬁned by three numbers a < b < c where the base of the
triangle is the interval [a, c] and its vertex is at x = b.
Triangular fuzzy
numbers will be written as N = (a/b/c). A triangular fuzzy number N =
(1.2/2/2.4) is shown in Figure 2.1. We see that N(2) = 1, N(1.6) = 0.5, etc.
0
0.2
0.4
0.6
0.8
1
alpha
0.5
1
1.5
2
2.5
3
x
Figure 2.1: Triangular Fuzzy Number N
A triangular shaped fuzzy number P is given in Figure 2.2. P is only
partially speciﬁed by the three numbers 1.2, 2, 2.4 since the graph on [1.2, 2],
and [2, 2.4], is not a straight line segment. To be a triangular shaped fuzzy
number we require the graph to be continuous and: (1) monotonically increas-
ing on [1.2, 2]; and (2) monotonically decreasing on [2, 2.4]. For triangular
shaped fuzzy number P we use the notation P ≈(1.2/2/2.4) to show that it
is partially deﬁned by the three numbers 1.2, 2, and 2.4. If P ≈(1.2/2/2.4)
we know its base is on the interval [1.2, 2.4] with vertex (membership value
one) at x = 2.
2.2.2
Alpha-Cuts
Alpha-cuts are slices through a fuzzy set producing regular (non-fuzzy) sets.
If A is a fuzzy subset of some set Ω, then an α-cut of A, written A[α], is
deﬁned as
A[α] = {x ∈Ω|A(x) ≥α},
(2.1)
for all α, 0 < α ≤1. The α = 0 cut, or A[0], must be deﬁned separately.

2.2. FUZZY SETS
11
0
0.2
0.4
0.6
0.8
1
alpha
0.5
1
1.5
2
2.5
3
x
Figure 2.2: Triangular Shaped Fuzzy Number P
Let N be the fuzzy number in Figure 2.1. Then N[0] = [1.2, 2.4]. Notice
that using equation (2.1) to deﬁne N[0] would give N[0] = all the real num-
bers. Similarly, in Figure 2.2 P[0] = [1.2, 2.4]. For any fuzzy set A, A[0] is
called the support, or base, of A. Many authors call the support of a fuzzy
number the open interval (a, b) like the support of N in Figure 2.1 would
then be (1.2, 2.4). However in this book we use the closed interval [a, b] for
the support (base) of the fuzzy number.
The core of a fuzzy number is the set of values where the membership
value equals one. If N = (a/b/c), or N ≈(a/b/c), then the core of N is the
single point b.
For any fuzzy number Q we know that Q[α] is a closed, bounded, interval
for 0 ≤α ≤1. We will write this as
Q[α] = [q1(α), q2(α)],
(2.2)
where q1(α) (q2(α)) will be an increasing (decreasing) function of α with
q1(1) = q2(1). If Q is a triangular shaped then: (1) q1(α) will be a continuous,
monotonically increasing function of α in [0, 1]; (2) q2(α) will be a continuous,
monotonically decreasing function of α, 0 ≤α ≤1; and (3) q1(1) = q2(1) .
For the N in Figure 2.1 we obtain N[α] = [n1(α), n2(α)], n1(α) = 1.2 +
0.8α and n2(α) = 2.4−0.4α, 0 ≤α ≤1. The equation for ni(α) is backwards.
With the y-axis vertical and the x-axis horizontal the equation n1(α) =
1.2 + 0.8α means x = 1.2 + 0.8y, 0 ≤y ≤1.
That is, the straight line
segment from (1.2, 0) to (2, 1) in Figure 2.1 is given as x a function of y
whereas it is usually stated as y a function of x. This is how it will be done
for all α-cuts of fuzzy numbers.

12
CHAPTER 2. FUZZY SETS
The general requirements for a fuzzy set N of the real numbers to be a
fuzzy number are: (1) it must be normalized, or N(x) = 1 for some x; and (2)
its alpha-cuts must be closed, bounded, intervals for all alpha in [0, 1]. This
will be important in fuzzy estimation because there the fuzzy numbers will
have very short vertical line segments at both ends of its base (see Section 3.3
in Chapter 3). Even so, such a fuzzy set still meets the general requirements
presented above to be called a fuzzy number.
2.2.3
Inequalities
Let N = (a/b/c) . We write N ≥δ, δ some real number, if a ≥δ, N > δ
when a > δ, N ≤δ for c ≤δ and N < δ if c < δ. We use the same notation
for triangular shaped fuzzy numbers whose support is the interval [a, c].
If A and B are two fuzzy subsets of a set Ω, then A ≤B means A(x) ≤
B(x) for all x in Ω, or A is a fuzzy subset of B. A < B holds when A(x) <
B(x), for all x.
2.2.4
Discrete Fuzzy Sets
Let A be a fuzzy subset of Ω. If A(x) is not zero only at a ﬁnite number of
x values in Ω, then A is called a discrete fuzzy set. Suppose A(x) is not zero
only at x1, x2, x3 and x4 in Ω. Then we write the fuzzy set as
A = {µ1
x1
, · · · , µ4
x4
},
(2.3)
where the µi are the membership values. That is, A(xi) = µi, 1 ≤i ≤4,
and A(x) = 0 otherwise. We can have discrete fuzzy subsets of any space Ω.
Notice that α-cuts of discrete fuzzy sets of IR, the set of real numbers, do
not produce closed, bounded, intervals. We will use a discrete fuzzy set in
Chapter 17.
2.3
Fuzzy Arithmetic
If A and B are two fuzzy numbers we may need to add, subtract, multiply and
divide them. There are two basic methods of computing A + B, A −B, etc.
which are: (1) extension principle; and (2) α-cuts and interval arithmetic.
2.3.1
Extension Principle
Let A and B be two fuzzy numbers. If A + B = C, then the membership
function for C is deﬁned as
C(z) = sup
x,y {min(A(x), B(y))|x + y = z} .
(2.4)

2.3. FUZZY ARITHMETIC
13
If we set C = A −B, then
C(z) = sup
x,y {min(A(x), B(y))|x −y = z} .
(2.5)
Similarly, C = A · B, then
C(z) = sup
x,y {min(A(x), B(y))|x · y = z},
(2.6)
and if C = A/B,
C(z) = sup
x,y {min(A(x), B(y))|x/y = z} .
(2.7)
In all cases C is also a fuzzy number [6]. We assume that zero does not belong
to the support of B in C = A/B. If A and B are triangular fuzzy numbers
then so are A + B and A −B, but A · B and A/B will be triangular shaped
fuzzy numbers.
We should mention something about the operator “sup” in equations
(2.4)-(2.7). If Ωis a set of real numbers bounded above (there is a M so that
x ≤M, for all x in Ω), then sup(Ω) = the least upper bound for Ω. If Ω
has a maximum member, then sup(Ω) = max(Ω). For example, if Ω= [0, 1),
sup(Ω) = 1 but if Ω= [0, 1], then sup(Ω) = max(Ω) = 1. The dual operator
to “sup” is “inf”. If Ωis bounded below (there is an M so that M ≤x for all
x ∈Ω), then inf(Ω) = the greatest lower bound. For example, for Ω= (0, 1]
inf(Ω) = 0 but if Ω= [0, 1], then inf(Ω) = min(Ω) = 0.
Obviously, given A and B, equations (2.4)- (2.7) appear quite complicated
to compute A + B, A −B, etc. So, we now present another procedure based
on α-cuts and interval arithmetic. First, we present the basics of interval
arithmetic.
2.3.2
Interval Arithmetic
We only give a brief introduction to interval arithmetic. For more informa-
tion the reader is referred to ([7],[8]). Let [a1, b1] and [a2, b2] be two closed,
bounded, intervals of real numbers. If ∗denotes addition, subtraction, mul-
tiplication, or division, then [a1, b1] ∗[a2, b2] = [α, β] where
[α, β] = {a ∗b|a1 ≤a ≤b1, a2 ≤b ≤b2} .
(2.8)
If ∗is division, we must assume that zero does not belong to [a2, b2]. We may
simplify equation (2.8) as follows:
[a1, b1] + [a2, b2]
=
[a1 + a2, b1 + b2] ,
(2.9)
[a1, b1] −[a2, b2]
=
[a1 −b2, b1 −a2] ,
(2.10)
[a1, b1] / [a2, b2]
=
[a1, b1] ·
 1
b2
, 1
a2

,
(2.11)

14
CHAPTER 2. FUZZY SETS
and
[a1, b1] · [a2, b2] = [α, β],
(2.12)
where
α
=
min{a1a2, a1b2, b1a2, b1b2},
(2.13)
β
=
max{a1a2, a1b2, b1a2, b1b2} .
(2.14)
Multiplication and division may be further simpliﬁed if we know that
a1 > 0 and b2 < 0, or b1 > 0 and b2 < 0, etc. For example, if a1 ≥0 and
a2 ≥0, then
[a1, b1] · [a2, b2] = [a1a2, b1b2],
(2.15)
and if b1 < 0 but a2 ≥0, we see that
[a1, b1] · [a2, b2] = [a1b2, a2b1] .
(2.16)
Also, assuming b1 < 0 and b2 < 0 we get
[a1, b1] · [a2, b2] = [b1b2, a1a2],
(2.17)
but a1 ≥0, b2 < 0 produces
[a1, b1] · [a2, b2] = [a2b1, b2a1] .
(2.18)
2.3.3
Fuzzy Arithmetic
Again we have two fuzzy numbers A and B. We know α-cuts are closed,
bounded, intervals so let A[α] = [a1(α), a2(α)], B[α] = [b1(α), b2(α)]. Then
if C = A + B we have
C[α] = A[α] + B[α] .
(2.19)
We add the intervals using equation (2.9). Setting C = A −B we get
C[α] = A[α] −B[α],
(2.20)
for all α in [0, 1]. Also
C[α] = A[α] · B[α],
(2.21)
for C = A · B and
C[α] = A[α]/B[α],
(2.22)
when C = A/B, provided that zero does not belong to B[α] for all α. This
method is equivalent to the extension principle method of fuzzy arithmetic
[6]. Obviously, this procedure, of α-cuts plus interval arithmetic, is more user
(and computer) friendly.

2.4. FUZZY FUNCTIONS
15
0
0.2
0.4
0.6
0.8
1
alpha
–18 –16
–14
–12
–10
–8
–6
–4
x
Figure 2.3: The Fuzzy Number C = A · B
Example 2.3.3.1
Let A = (−3/ −2/ −1) and B = (4/5/6). We determine A · B using α-cuts
and interval arithmetic. We compute A[α] = [−3 + α, −1 −α] and B[α] =
[4+α, 6−α]. So, if C = A·B we obtain C[α] = [(α−3)(6−α), (−1−α)(4+α)],
0 ≤α ≤1. The graph of C is shown in Figure 2.3.
2.4
Fuzzy Functions
In this book a fuzzy function is a mapping from fuzzy numbers into fuzzy
numbers. We write H(X) = Z for a fuzzy function with one independent
variable X.
X will be a triangular (shaped) fuzzy number and then we
usually obtain Z as a triangular (shaped) shaped fuzzy number. For two
independent variables we have H(X, Y ) = Z.
Where do these fuzzy functions come from? They are usually extensions
of real-valued functions. Let h : [a, b] →IR. This notation means z = h(x)
for x in [a, b] and z a real number. One extends h : [a, b] →IR to H(X) = Z
in two ways: (1) the extension principle; or (2) using α-cuts and interval
arithmetic.
2.4.1
Extension Principle
Any h : [a, b] →IR may be extended to H(X) = Z as follows
Z(z) = sup
x

X(x) | h(x) = z, a ≤x ≤b

.
(2.23)

16
CHAPTER 2. FUZZY SETS
Equation (2.23) deﬁnes the membership function of Z for any triangular
(shaped) fuzzy number X in [a, b].
If h is continuous, then we have a way to ﬁnd α-cuts of Z. Let Z[α] =
[z1(α), z2(α)]. Then [3]
z1(α)
=
min{ h(x) | x ∈X[α] },
(2.24)
z2(α)
=
max{ h(x) | x ∈X[α] },
(2.25)
for 0 ≤α ≤1.
If we have two independent variables, then let z = h(x, y) for x in [a1, b1],
y in [a2, b2]. We extend h to H(X, Y ) = Z as
Z(z) = sup
x,y

min

X(x), Y (y)

| h(x, y) = z

,
(2.26)
for X (Y ) a triangular (shaped) fuzzy number in [a1, b1] ([a2, b2]). For α-cuts
of Z, assuming h is continuous, we have
z1(α)
=
min{ h(x, y) | x ∈X[α], y ∈Y [α] },
(2.27)
z2(α)
=
max{ h(x, y) | x ∈X[α], y ∈Y [α] },
(2.28)
0 ≤α ≤1.
2.4.2
Alpha-Cuts and Interval Arithmetic
All the functions we usually use in engineering and science have a computer
algorithm which, using a ﬁnite number of additions, subtractions, multipli-
cations and divisions, can evaluate the function to required accuracy. Such
functions can be extended, using α-cuts and interval arithmetic, to fuzzy func-
tions. Let h : [a, b] →IR be such a function. Then its extension H(X) = Z,
X in [a, b] is done, via interval arithmetic, in computing h(X[α]) = Z[α], α in
[0, 1]. We input the interval X[α], perform the arithmetic operations needed
to evaluate h on this interval, and obtain the interval Z[α]. Then put these
α-cuts together to obtain the value Z. The extension to more independent
variables is straightforward.
For example, consider the fuzzy function
Z = H(X) = A X + B
C X + D,
(2.29)
for triangular fuzzy numbers A, B, C, D and triangular fuzzy number X in
[0, 10]. We assume that C ≥0, D > 0 so that C X + D > 0. This would be
the extension of
h(x1, x2, x3, x4, x) = x1x + x2
x3x + x4
.
(2.30)

2.4. FUZZY FUNCTIONS
17
We would substitute the intervals A[α] for x1, B[α] for x2, C[α] for x3, D[α]
for x4 and X[α] for x, do interval arithmetic, to obtain interval Z[α] for Z.
Alternatively, the fuzzy function
Z = H(X) = 2X + 10
3X + 4 ,
(2.31)
would be the extension of
h(x) = 2x + 10
3x + 4 .
(2.32)
2.4.3
Diﬀerences
Let h : [a, b] →IR. Just for this subsection let us write Z
∗= H(X) for the
extension principle method of extending h to H for X in [a, b]. We denote
Z = H(X) for the α-cut and interval arithmetic extension of h .
We know that Z can be diﬀerent from Z
∗. But for basic fuzzy arithmetic
in Section 2.3 the two methods give the same results. In the example below
we show that for h(x) = x(1 −x), x in [0, 1], we can get Z
∗̸= Z for some
X in [0, 1]. What is known ([3],[7]) is that for usual functions in science and
engineering Z
∗≤Z. Otherwise, there is no known necessary and suﬃcient
conditions on h so that Z
∗= Z for all X in [a, b].
There is nothing wrong in using α-cuts and interval arithmetic to evaluate
fuzzy functions. Surely, it is user, and computer friendly. However, we should
be aware that whenever we use α-cuts plus interval arithmetic to compute
Z = H(X) we may be getting something larger than that obtained from
the extension principle. The same results hold for functions of two or more
independent variables.
Example 2.4.3.1
The example is the simple fuzzy expression
Z = (1 −X) X,
(2.33)
for X a triangular fuzzy number in [0, 1]. Let X[α] = [x1(α), x2(α)]. Using
interval arithmetic we obtain
z1(α)
=
(1 −x2(α))x1(α),
(2.34)
z2(α)
=
(1 −x1(α))x2(α),
(2.35)
for Z[α] = [z1(α), z2(α)], α in [0, 1].
The extension principle extends the crisp equation z = (1−x)x, 0 ≤x ≤1,
to fuzzy numbers as follows
Z
∗(z) = sup
x

X(x)|(1 −x)x = z, 0 ≤x ≤1

.
(2.36)

18
CHAPTER 2. FUZZY SETS
Let Z
∗[α] = [z∗
1(α), z∗
2(α)]. Then
z∗
1(α)
=
min{(1 −x)x|x ∈X[α]},
(2.37)
z∗
2(α)
=
max{(1 −x)x|x ∈X[α]},
(2.38)
for all 0 ≤α ≤1. Now let X = (0/0.25/0.5), then x1(α) = 0.25α and x2(α) =
0.50 −0.25α. Equations (2.34) and (2.35) give Z[0.50] = [5/64, 21/64] but
equations (2.37) and (2.38) produce Z
∗[0.50] = [7/64, 15/64].
Therefore,
Z
∗̸= Z. We do know that if each fuzzy number appears only once in the fuzzy
expression, the two methods produce the same results ([3],[7]).
However,
if a fuzzy number is used more than once, as in equation (2.33), the two
procedures can give diﬀerent results.
2.5
Fuzzy Diﬀerential Equations
We start oﬀwith the second order, linear, constant coeﬃcient ordinary dif-
ferential equation
y′′ + ay′ + by = g(x) ,
(2.39)
for x in interval I. I can be [0, T], for T > 0 or I can be [0, ∞). The initial
conditions are y(0) = γ0, y′(0) = γ1. We assume g is continuous on I.
We have usually considered solutions to equation (2.39) only for fuzzy
initial conditions y(0) = γ0, y′(0) = γ1, for triangular fuzzy numbers γ0 and
γ1. When there is uncertainty about how the system, governed by equation
(2.39), starts oﬀ, we model that uncertainty using fuzzy numbers γ0 and
γ1. This discussion is adapted from [2] and [4]. Those results also contained
applications including: (1) an electrical circuit; (2) a vibrating mass; and (3)
a dynamic supply and demand model. Later on in [4] we allowed a and b to
be fuzzy but with crisp initial conditions. There is no general theory for the
case of a and b both fuzzy so those results investigated only two examples:
(1) a fuzzy, a > 0, b = 0; and (2) a = 0, b fuzzy, b > 0. In both cases we
start oﬀwith a homogeneous equation.
We followed the same theme as in other publications involving solving
fuzzy equations in that we looked at three diﬀerent types of solution: Y c, Y e
and Y I. If we fuzzify the crisp equation (2.39) and solve, we are attempting to
get what we called the “classical” solution Y c. When we ﬁrst solve equation
(2.39) and then fuzzify the crisp solution, using the extension principle, we
obtain the extension principle solution Y e and Y I (called the α-cut and
interval arithmetic solution) is obtained by extending (fuzzifying) the crisp
solution using alpha-cuts and interval arithmetic.
We found that sometimes the classical fuzzy solution does not exist and
sometimes Y e and Y I do not solve the original fuzzy diﬀerential equation.
So there can be problems with these types of solutions.
Also, when you
fuzzify more of equation (2.39), like a, b, g(x) and the initial conditions, the
result gets more complicated and diﬃcult to obtain a precise mathematical

2.6. REFERENCES
19
expression for the fuzzy solution. However, we do not need to obtain a precise
mathematical solution in this book because we will use simulation.
The crisp continuous systems we are interested in will be governed by
systems of ordinary diﬀerential equations. Many of the parameters in these
equations will need to be estimated and to show the uncertainty in the es-
timator we will use fuzzy number estimators (Chapter 3). We have previ-
ously investigated solving systems of linear ordinary diﬀerential equations
having fuzzy initial conditions [5].
In that paper we only allow for fuzzy
initial conditions and we investigate the two solutions Y c and Y e. Fuzzify-
ing more parameters in these equations makes the problem too complex for
a complete mathematical solution. Three applications were presented: (1)
a predator/prey model (also Chapter 7); (2) spread of an infectious disease
(Chapter 10); and (3) an arms race model (Chapter 8). In these examples
we only fuzziﬁed the initial conditions but in Chapters 7, 8 and 10 other
parameters in the models can be estimated and then considered fuzzy. More
details about solving fuzzy diﬀerential equations is in Section 6.2 of Chapter
6 .
2.6
References
1. J.J.Buckley and E.Eslami: Introduction to Fuzzy Logic and Fuzzy Sets,
Physica-Verlag, Heidelberg, Germany, 2002.
2. J.J.Buckley and T.Feuring: Fuzzy Initial Value Problem for Nth Order
Linear Diﬀerential Equations, Fuzzy Sets and Systems, 121(2001)247-
255.
3. J.J.Buckley and Y.Qu: On Using α-Cuts to Evaluate Fuzzy Equations,
Fuzzy Sets and Systems, 38(1990)309-312.
4. J.J.Buckley, E.Eslami and T.Feuring: Fuzzy Mathematics in Economics
and Engineering, Physica-Verlag, Heidelberg, Germany, 2002.
5. J.J.Buckley, T.Feuring and Y.Hayashi: Linear Systems of First Order
Ordinary Diﬀerential Equations: Fuzzy Initial Conditions, Soft Com-
puting, 6(2002)415-421.
6. G.J.Klir and B.Yuan: Fuzzy Sets and Fuzzy Logic: Theory and Appli-
cations, Prentice Hall, Upper Saddle River, N.J., 1995.
7. R.E.Moore:
Methods and Applications of Interval Analysis, SIAM
Studies in Applied Mathematics, Philadelphia, 1979.
8. A.Neumaier: Interval Methods for Systems of Equations, Cambridge
University Press, Cambridge, U.K., 1990.

Chapter 3
Fuzzy Estimation
3.1
Introduction
In this book we will consider only two methods of fuzzy estimation: (1) expert
opinion; and (2) from data using conﬁdence intervals. First we discuss the
expert opinion method. Then we look at the conﬁdence interval procedure
with particular emphasis on: (1) the fuzzy arrival/service rates; (2) the fuzzy
estimator of p = the probability of a “success” in a binomial experiment;
and (3) the fuzzy estimator of the mean of a normal distribution when the
variance is unknown. More information on fuzzy estimators is in ([1]-[3]).
We will never assume that a parameter in a model is the value of a random
variable. Parameter values as values of random variables would put us into
the area of stochastic systems of diﬀerential equations. Our parameters will
always be constants with some of them not having known precise values which
then must be estimated by experts or from historical data.
3.2
Expert Opinion
Let us look at an example called the ”arms race” model [5], also discussed in
detail in Chapter 8. The system of crisp diﬀerential equations is
˙x = −ax + by + r,
(3.1)
˙y = cx −dy + s,
(3.2)
where a, b, c, d are all positive constants, r, s are positive, or negative, con-
stants, subject to initial conditions x(0) = x0, y(0) = y0. Here x (y) repre-
sents the yearly rates of armament expenditures of nation A (B) in dollars.
Consider estimating the constant b. The basic assumption involving b is that
the rate of change of x ( ˙x) is directly proportional to the present expenditures
of B, which is y. Or, ˙x = by. How shall we estimate b? Assume we do not
21

22
CHAPTER 3. FUZZY ESTIMATION
have any recent data on these expenditures for these two countries. We turn
to expert opinion.
We may obtain a value for the b from some group of experts. This group
could consist of only one expert. First assume we have only one expert and
he/she is to estimate the value of b. We can solicit this estimate from the
expert as is done in estimating job times in project scheduling ([6], Chapter
13). Let b1 = the “pessimistic” value of b, or the smallest possible value,
let b3 = be the “optimistic” value of b, or the highest possible value, and let
b2 = the most likely value of b. We then ask the expert to give values for b1,
b2, b3 and we construct the triangular fuzzy number b = (b1/b2/b3) for b. If
we have a group of N experts all to estimate the value of b we solicit the b1i,
b2i and b3i, 1 ≤i ≤N, from them. Let b1 be the average of the b1i, b2 is
the mean of the b2i and b3 is the average of the b3i. The simplest thing to
do is to use (b1/b2/b3) for b. We now assume, when necessary, this is how we
employ expert opinion to obtain fuzzy estimators. This method will be used
numerous times in the applications starting in Chapter 7.
3.3
Fuzzy Estimators from Conﬁdence
Inter
Let us next describe the construction of our fuzzy estimators out of a set of
conﬁdence intervals computed from data. More details can be found in ([1]-
[3]). This type of fuzzy estimator will be used in the applications beginning
in Chapter 7. Let X be a random variable with probability density function
f(x; θ) for single parameter θ. Assume that θ is unknown and it must be
estimated from a random sample X1, ..., Xn. Let Y = u(X1, ..., Xn) be a
statistic used to estimate θ.
Given the values of these random variables
Xi = xi, 1 ≤i ≤n, we obtain a point estimate θ∗= y = u(x1, ..., xn) for θ.
We would never expect this point estimate to exactly equal θ so we often also
compute a (1 −β)100% conﬁdence interval for θ. In this conﬁdence interval
one usually sets β equal to 0.10, 0.05 or 0.01.
We propose to ﬁnd the (1−β)100% conﬁdence interval for all 0.01 ≤β <
1. Starting at 0.01 is arbitrary and you could begin at 0.10 or 0.05 or 0.005,
etc. Denote these conﬁdence intervals as
[θ1(β), θ2(β)],
(3.3)
for 0.01 ≤β < 1. Add to this the interval [θ∗, θ∗] for the 0% conﬁdence
interval for θ.
Then we have (1 −β)100% conﬁdence intervals for θ for
0.01 ≤β ≤1.
Now place these conﬁdence intervals, one on top of the other, to produce a
triangular shaped fuzzy number θ whose α-cuts are the conﬁdence intervals.
We have
θ[α] = [θ1(α), θ2(α)],
(3.4)
vals

3.3. FUZZY ESTIMATORS FROM CONFIDENCE INTERVALS
23
for 0.01 ≤α ≤1. All that is needed is to ﬁnish the “bottom” of θ to make it
a complete fuzzy number. We will simply drop the graph of θ straight down
to complete its α-cuts so
θ[α] = [θ1(0.01), θ2(0.01)],
(3.5)
for 0 ≤α < 0.01. In this way we are using more information in θ than just a
point estimate, or just a single interval estimate. Point estimators show no
uncertainty in the estimator.
3.3.1
Fuzzy Estimator of µ
Consider X a random variable with probability density function N(µ, σ2),
with unknown mean µ and known variance σ2. For unknown variance see
Section 3.6 and [1]. To estimate µ we obtain a random sample X1, ..., Xn from
N(µ, σ2). Suppose the mean of this random sample turns out to be x,which
is a crisp number, not a fuzzy number. We know that x is N(µ, σ2/n). So
(x −µ)/(σ/√n) is N(0, 1). Therefore
P(−zβ/2 ≤x −µ
σ/√n ≤zβ/2) = 1 −β,
(3.6)
where zβ/2 is the z value so that the probability of a N(0, 1) random variable
exceeding it is β/2. Now solve the inequality for µ producing
P(x −zβ/2σ/√n ≤µ ≤x + zβ/2σ/√n) = 1 −β.
(3.7)
This leads directly to the (1 −β)100% conﬁdence interval for µ
[θ1(β), θ2(β)] = [x −zβ/2σ/√n, x + zβ/2σ/√n],
(3.8)
where zβ/2 is deﬁned as
 zβ/2
−∞
N(0, 1)dx = 1 −β/2,
(3.9)
and N(0, 1) denotes the normal density with mean zero and unit variance.
Put these conﬁdence intervals together as discussed above and we obtain µ
our fuzzy estimator of µ.
The following example shows that the fuzzy estimator of the mean of the
normal probability density will be a triangular shaped fuzzy number.
Example 3.3.1.1
Consider X a random variable with probability density function N(µ, 100),
which is the normal probability density with unknown mean µ and known

24
CHAPTER 3. FUZZY ESTIMATION
0
0.2
0.4
0.6
0.8
1
alpha
26
27
28
29
30
31
x
Figure 3.1: Fuzzy Estimator µ in Example 3.3.1.1, 0.01 ≤β ≤1
variance σ2 = 100. To estimate µ we obtain a random sample X1, ..., Xn
from N(µ, 100). Suppose the mean of this random sample turns out to be
28.6. Then a (1 −β)100% conﬁdence interval for µ is
[θ1(β), θ2(β)] = [28.6 −zβ/210/√n, 28.6 + zβ/210/√n].
(3.10)
To obtain a graph of fuzzy µ, or µ, let n = 64 and assume that 0.01 ≤β ≤1.
We evaluated equation (3.10) using Maple [4] and then the ﬁnal graph of µ is
shown in Figure 3.1, without dropping the graph straight down to the x-axis
at the end points.
For simplicity we will use triangular fuzzy numbers, instead of triangular
shaped fuzzy numbers, for fuzzy estimators in the rest of the book.
Now we concentrate on some speciﬁc fuzzy estimators to be used in the
book.
3.4
Fuzzy Arrival/Service Rates
In this section we concentrate on deriving fuzzy numbers for the arrival rate,
and the service rate, in a queuing system. We consider the fuzzy arrival rate
ﬁrst.

3.4. FUZZY ARRIVAL/SERVICE RATES
25
3.4.1
Fuzzy Arrival Rate
We assume that we have Poisson arrivals ([6], Chapter 15) which means that
there is a positive constant λ so that the probability of k arrivals per unit
time is
λk exp(−λ)/k!,
(3.11)
the Poisson probability function. We need to estimate λ, the arrival rate, so
we take a random sample X1, ..., Xm of size m. In the random sample Xi is
the number of arrivals per unit time, in the ith observation. Let S be the
sum of the Xi and let X be S/m. Here, X is not a fuzzy set but the mean.
Now S is Poisson with parameter mλ ([7], p. 298). Assuming that mλ
is suﬃciently large (say, at least 30), we may use the normal approximation
([7], p. 317), so the statistic
W = S −mλ
√
mλ
,
(3.12)
is approximately a standard normal. Then
P[−zβ/2 < W < zβ/2] ≈1 −β,
(3.13)
where the zβ/2 was deﬁned in equation (3.9). Now divide numerator and
denominator of W by m and we get
P[−zβ/2 < Z < zβ/2] ≈1 −β,
(3.14)
where
Z = X −λ

λ/m
.
(3.15)
From these last two equations we may derive an approximate (1 −β)100%
conﬁdence interval for λ. Let us call this conﬁdence interval [l(β), r(β)].
We now show how to compute l(β) and r(β). Let
f(λ) = √m(X −λ)/
√
λ.
(3.16)
Now f(λ) has the following properties: (1) it is strictly decreasing for λ > 0;
(2) it is zero for λ > 0 only at X = λ; (3) the limit of f, as λ goes to ∞is
−∞; and (4) the limit of f as λ approaches zero from the right is ∞. Hence,
(1) the equation zβ/2 = f(λ) has a unique solution λ = l(β); and (2) the
equation −zβ/2 = f(λ) also has a unique solution λ = r(β).
We may ﬁnd these unique solutions. Let
V =
	
z2
β/2/m + 4X,
(3.17)
z1 = [−zβ/2
√m + V ]/2,
(3.18)

26
CHAPTER 3. FUZZY ESTIMATION
0
0.2
0.4
0.6
0.8
1
alpha
24
24.5
25
25.5
26
x
Figure 3.2: Fuzzy Arrival Rate λ in Example 3.4.1.1
and
z2 = [zβ/2
√m + V ]/2.
(3.19)
Then l(β) = z2
1 and r(β) = z2
2.
We now substitute α for β to get the α-cuts of fuzzy number λ. Add the
point estimate, when α = 1, X, for the 0% conﬁdence interval. Now as α
goes from 0.01 (99% conﬁdence interval) to one (0% conﬁdence interval) we
get the fuzzy number for λ. As before, we drop the graph straight down at
the ends to obtain a complete fuzzy number.
Example 3.4.1.1
Suppose m = 100 and we obtained X = 25. We evaluated equations (3.17)
through (3.19) using Maple [4] and then the graph of λ is shown in Figure 3.2,
without dropping the graph straight down to the x−axis at the end points.
However, in the rest of the book we will use a triangular fuzzy number for λ.
3.4.2
Fuzzy Service Rate
Let µ be the average (expected) service rate, in the number of service com-
pletions per unit time, for a busy server. Then 1/µ is the average (expected)

3.4. FUZZY ARRIVAL/SERVICE RATES
27
service time. The probability density of the time interval between successive
service completions is ([6], Chapter 13)
(1/µ) exp(−t/µ),
(3.20)
for t > 0, the exponential probability density function. Let X1, ..., Xn be a
random sample from this exponential density function. Then the maximum
likelihood estimator for µ is X ([7],p.344), the mean of the random sample
(not a fuzzy set). We know that the probability density for X is the gamma
([7],p.297) with mean µ and variance µ2/n ([7],p.351). If n is suﬃciently large
we may use the normal approximation to determine approximate conﬁdence
intervals for µ. Let
Z = (√n[X −µ])/µ,
(3.21)
which is approximately normally distributed with zero mean and unit vari-
ance, provided n is suﬃciently large. See Figure 6.4-2 in [7] for n = 100
which shows the approximation is quite good if n = 100. The graph in Fig-
ure 6.4-2 in [7] is for the chi-square distribution which is a special case of the
gamma distribution. So we now assume that n ≥100 and use the normal
approximation to the gamma.
An approximate (1 −β)100% conﬁdence interval for µ is obtained from
P[−zβ/2 < Z < zβ/2] ≈1 −β,
(3.22)
where zβ/2 was deﬁned in equation (3.9). After solving for µ we get
P[L(β) < µ < R(β)] ≈1 −β,
(3.23)
where
L(β) = [√n X]/[zβ/2 + √n],
(3.24)
and
R(β) = [√n X]/[√n −zβ/2].
(3.25)
An approximate (1 −β)100% conﬁdence interval for µ is
[
√n X
zβ/2 + √n,
√n X
√n −zβ/2
].
(3.26)
Example 3.4.2.1
If n = 400 and X = 1.5, then we get
[
30
zβ/2 + 20,
30
20 −zβ/2
],
(3.27)
for a (1 −β)100% conﬁdence interval for the service rate µ. Now we can put
these conﬁdence intervals together, one on top of another, to obtain a fuzzy
number µ for the service rate. We evaluated equation (3.27) using Maple [4]
for 0.01 ≤β ≤1 and the graph of the fuzzy service rate, without dropping
the graph straight down to the x-axis at the end points, is in Figure 3.3. For
simplicity we use triangular fuzzy numbers for µ in the rest of the book.

28
CHAPTER 3. FUZZY ESTIMATION
0.2
0.4
0.6
0.8
1
alpha
1.4
1.45
1.5
1.55
1.6
1.65
x
Figure 3.3: Fuzzy Service Rate µ in Example 3.4.2.1
3.5
Fuzzy Estimator of p in the Binomial
We have an experiment in mind in which we are interested in only two possible
outcomes labeled “success” and “failure”. Let p be the probability of a success
so that q = 1 −p will be the probability of a failure. We want to estimate
the value of p. We therefore gather a random sample which here is running
the experiment n independent times and counting the number of times we
had a success. Let x be the number of times we observed a success in n
independent repetitions of this experiment. Then our point estimate of p is

p = x/n.
We know that (Section 7.5 in [7]) that (
p −p)/

p(1 −p)/n is approxi-
mately N(0, 1) if n is suﬃciently large. Throughout this book we will always
assume that the sample size is large enough for the normal approximation to
the binomial. Then
P(zβ/2 ≤

p −p

p(1 −p)/n
≤zβ/2) ≈1 −β,
(3.28)
where zβ/2 was deﬁned in equation (3.9). Solving the inequality for the p in
the numerator we have
P(
p −zβ/2

p(1 −p)/n ≤p ≤
p + zβ/2

p(1 −p)/n) ≈1 −β.
(3.29)
This leads to the (1 −β)100% approximate conﬁdence interval for p
[
p −zβ/2

p(1 −p)/n, 
p + zβ/2

p(1 −p)/n].
(3.30)

3.5. FUZZY ESTIMATOR OF P IN THE BINOMIAL
29
0
0.2
0.4
0.6
0.8
1
alpha
0.46
0.48
0.5
0.52
0.54
0.56
0.58
x
Figure 3.4: Fuzzy Estimator p in Example 3.5.1
However, we have no value for p to use in this conﬁdence interval. So, still
assuming that n is suﬃciently large, we substitute 
p for p in equation (3.30),
using 
q = 1 −
p, and we get the ﬁnal (1 −β)100% approximate conﬁdence
interval
[
p −zβ/2


p
q/n, 
p + zβ/2


p
q/n].
(3.31)
Put these conﬁdence intervals together, as discussed above, and we get p our
triangular shaped fuzzy number estimator of p.
Example 3.5.1
Assume that n = 350, x = 180 so that 
p = 0.5143. The conﬁdence intervals
become
[0.5143 −0.0267zβ/2, 0.5143 + 0.0267zβ/2],
(3.32)
for 0.01 ≤β ≤1.
We evaluated equation (3.32) using Maple [4] and then the graph of p
is shown in Figure 3.4, without dropping the graph straight down to the x-
axis at the end points. The base (µ[0]) in Figure 3.4 is an approximate 99%
conﬁdence interval for p.

30
CHAPTER 3. FUZZY ESTIMATION
3.6
Fuzzy Estimator of the Mean of the Nor-
mal Distribution
Consider X a random variable with probability density function N(µ, σ2),
which is the normal probability density with unknown mean µ and unknown
variance σ2.
To estimate µ we obtain a random sample X1, ..., Xn from
N(µ, σ2). Suppose the mean of this random sample turns out to be x, which
is a crisp number, not a fuzzy number. Also, let s2 be the sample variance.
Our point estimator of µ is x. If the values of the random sample are x1, ..., xn
then the expression we will use for s2 in this book is
s2 =
n

i=1
(xi −x)2/(n −1).
(3.33)
We will use this form of s2, with denominator (n−1), so that it is an unbiased
estimator of σ2.
It is known that (x −µ)/(s/√n) has a (Student’s) t distribution with
n −1 degrees of freedom (Section 7.2 of [7]). It follows that
P(−tβ/2 ≤x −µ
s/√n ≤tβ/2) = 1 −β,
(3.34)
where tβ/2 is deﬁned from the (Student’s) t distribution, with n −1 degrees
of freedom, so that the probability of exceeding it is β/2. Now solve the
inequality for µ giving
P(x −tβ/2s/√n ≤µ ≤x + tβ/2s/√n) = 1 −β.
(3.35)
For this we immediately obtain the (1 −β)100% conﬁdence interval for µ
[x −tβ/2s/√n, x + tβ/2s/√n].
(3.36)
Put these conﬁdence intervals together, as discussed before, and we obtain µ
our fuzzy number estimator of µ.
Example 3.6.1
Consider X a random variable with probability density function N(µ, σ2),
which is the normal probability density with unknown mean µ and unknown
variance σ2.
To estimate µ we obtain a random sample X1, ..., Xn from
N(µ, σ2). Suppose the mean of this random sample of size 25 turns out to
be 28.6 and s2 = 3.42. Then a (1 −β)100% conﬁdence interval for µ is
[28.6 −tβ/2

3.42/25, 28.6 + tβ/2

3.42/25].
(3.37)
We evaluated equation (3.37) using Maple [4] and then the graph of µ is
shown in Figure 3.5, without dropping the graph straight down to the x-axis
at the end points.

3.7. SUMMARY
31
0
0.2
0.4
0.6
0.8
1
alpha
28
28.5
29
29.5
x
Figure 3.5: Fuzzy Estimator µ in Example 3.6.1
3.7
Summary
We saw in this chapter that our fuzzy estimators can be triangular fuzzy
numbers; or triangular shaped fuzzy numbers where we complete the base by
drawing short vertical line segments from the horizontal axis up to the graph
and the base represents a 99% conﬁdence interval. In the rest of this book,
for simplicity, all our fuzzy estimators will be triangular fuzzy numbers.
3.8
References
1. J.J.Buckley: Fuzzy Statistics, Springer, Heidelberg, Germany, 2004.
2. J.J.Buckley: Fuzzy Probabilities and Fuzzy Sets for Web Planning,
Springer, Heidelberg, Germany, 2004.
3. J.J.Buckley:
Simulating Fuzzy Systems, Springer, Heidelberg, Ger-
many, 2005.
4. Maple 9, Waterloo Maple Inc., Waterloo, Canada.
5. M.Olinick: An Introduction to Mathematical Models in the Social and
Life Sciences, Addison-Wesley, Reading, MA, 1978.
6. H.A.Taha: Operations Research, Fifth Edition, Macmillan, N.Y., 1992.

32
CHAPTER 3. FUZZY ESTIMATION
7. R.V.Hogg and E.A.Tanis: Probability and Statistical Inference, Sixth
Edition, Prentice Hall, Upper Saddle River, N.J., 2001.

Chapter 4
Fuzzy Systems
4.1
Introduction
We have argued before that many crisp systems become fuzzy systems be-
cause the values of some of the parameters in the crisp system are not known
precisely and need to be estimated. Too often point estimators for these para-
meters are obtained and used in the models. But the point estimators do not
contain any uncertainty. We proposed incorporating uncertainty into these
estimators by employing fuzzy estimators discussed in Chapter 3. Fuzzy es-
timators are fuzzy numbers so some of the parameters in the model become
fuzzy numbers making it into a fuzzy system. We will now discuss this trans-
formation from crisp system into a fuzzy system in more detail for continuous
systems.
This book is concerned with using crisp continuous simulation to estimate
the evolution of continuous fuzzy systems. The continuous fuzzy systems we
will look at are all governed by fuzzy diﬀerential equations. So, let us ﬁrst
look at our previous work in this area of using crisp simulation to study fuzzy
systems([1],[2],[6]-[9]).
We started with studying what are called discrete event (fuzzy) systems.
These systems can usually be described as queuing networks. Items (transac-
tions) arrive at various points in the system and go into a queue waiting for
service. The service stations, preceded by a queue, are connected forming a
network of queues and service, until the transaction ﬁnally exits the system.
Examples considered included machine shops, emergency rooms, project net-
works, bus routes, etc. Analysis of all of these systems depends on parameters
like arrival rates and service rates. These parameters are usually estimated
from historical data. These estimators are generally point estimators. The
point estimators are put into the model to compute system descriptors like
mean time an item spends in the system, or the expected number of transac-
tions leaving the system per unit time. We argued that these point estimators
33

34
CHAPTER 4. FUZZY SYSTEMS
contain uncertainty not shown in the calculations. Our estimators of these
parameters become fuzzy numbers constructed by placing a set of conﬁdence
intervals one on top of another (Chapter 3). Using fuzzy number parameters
in the model makes it into a fuzzy system. The system descriptors we want
(time in system, number leaving per unit time) will be fuzzy numbers. In
general computing these fuzzy numbers can be diﬃcult. We showed how crisp
discrete event simulation can be used to estimate the fuzzy numbers used to
describe system behavior.
Continuous systems are usually described by a system of ordinary dif-
ferential equations (ODEs). Many parameters in the system of ODEs are
not known precisely and must be estimated.
To show the uncertainty in
these parameter values we will use fuzzy number estimators. Fuzzy number
parameter values produce a system of fuzzy ODEs to solve and we have a
continuous fuzzy system. Solution trajectories become fuzzy trajectories. We
plan to use crisp continuous simulation to estimate these fuzzy trajectories.
We will start with a continuous crisp system whose description in time
depends on crisp ordinary diﬀerential equations. Let us consider an example
of a predator/prey model, also discussed in detail in Chapter 7.
This is
adopted from an example in ([10],[11]). The system of diﬀerential equations
is
˙x = −ax + bxy,
(4.1)
˙y = dy −cxy,
(4.2)
for constants a, b, c, d all positive and initial conditions x(0) = x0, y(0) = y0.
We write the time derivative of x (y) as ˙x ( ˙y). Non-trivial solutions to this
system can not be obtained in terms of elementary functions. So we would
need to employ some software to obtain the graphs of x(t) and y(t). How do
we get values for a, b, c, d? We considered two cases in in Chapter 3: (1) their
values are estimated by expert opinion; and (2) their values are estimated
from data by placing conﬁdence intervals one on top of another. In either
case the estimators become fuzzy, or fuzzy numbers.
In the predator/prey model above we could have some, or all the parame-
ters, fuzzy. Therefore, a, b, c, d, x0 and y0 may all be fuzzy. Then we have
a system of fuzzy nonlinear diﬀerential equations to solve. The trajectories
for x(t) and y(t), t ≥0, will be fuzzy which means for each value of t x(t)
and y(t) will be fuzzy numbers.
We have considered solving fuzzy diﬀer-
ential equations before ([3]-[5]). However, in those papers/book we almost
always allowed for only fuzzy initial conditions because the fuzzy solution
became too diﬃcult to obtain when more parameters became fuzzy. Now we
may fuzzify more parameters because we are not ﬁnding a formula for the
mathematical solution but instead we will use simulation.

4.2. FUZZY SYSTEM
35
4.2
Fuzzy System
Continuing with the predator/prey model now assume that through expert
opinion (Chapter 3) we have obtained fuzzy estimators a, b, c, d for a, b, c,
d, respectively. Also assume that the initial values for x and y are known,
crisp and not fuzzy. We have a fuzzy system described by fuzzy diﬀerential
equations
˙x = −ax + bxy,
(4.3)
˙y = dy −cxy,
(4.4)
with x(0) = x0, y(0) = y0. Let the solutions be x(t) and y(t). What we
shall want is the fuzzy trajectories x(t)[0] and y(t)[0], or the alpha zero cut
of the fuzzy solutions. The α = 0 cut gives us the maximum uncertainty in
the solution due to the uncertainty in some of the parameter values.
Let x(t)[α] = [x1(t, α), x2(t, α)] and y(t)[α] = [y1(t, α), y2(t, α)], for t ≥0
and 0 ≤α ≤1. The bounds on the alpha zero cut of x(t) (y(t)) are given by
the functions xi(t, 0) (yi(t, 0)), i = 1, 2.
So to describe the fuzzy system we need to ﬁnd the functions xi(t, 0) and
yi(t, 0) and then x2(t, 0) −x1(t, 0) and y2(t, 0) −y1(t, 0) are the uncertainty
bands (intervals) on the (crisp) solutions due to the uncertainty in some of
the parameters in the model. If we let a, b, c, d wander throughout the α = 0
cut of a, b, c, d respectively, then crisp solutions to the predator/prey model
will wander within the uncertainty band.
4.3
Computing the Uncertainty Band
Choosing values for the parameters in their alpha zero cut to get the xi(t, 0)
and y(t, 0), i = 1, 2, is what we call the “Simulation Optimization” problem
to be discussed in Chapter 6, and in all the applications starting in Chapter
7.
We will use continuous simulation software to graph solutions to the crisp
system of diﬀerential equations. Selection of the software to be used in this
book is discussed in Chapter 5.
Quite often the selection of parameter values in their alpha zero cut to
get say x1(t, 0) and x2(t, 0) is what we call “intuitive”, or obvious. Other
times this can not be done. When it is not clear how to pick the values of the
fuzzy parameters in their α = 0 cut to obtain xi(t, 0) we try combinations to
approximate xi(t, 0) and yi(t, 0). More details are in Chapter 7.
Suppose that we could solve the crisp predator/prey system of diﬀerential
equations giving the precise mathematical solutions
x(t) = F(t; a, b, c, d, x0, y0),
(4.5)
and
y(t) = G(t; a, b, c, d, x0, y0).
(4.6)

36
CHAPTER 4. FUZZY SYSTEMS
The solutions will be functions of time t and all the parameters. Now the
initial values of x and y are crisp and ﬁxed. Next assume that for each value
of t ≥0 we can show that F is: (1) increasing in a and d; and (2) decreasing
in b and c. Let a[0] = [a1, a2], b[0] = [b1, b2], c[0] = [c1, c2] and d[0] = [d1, d2].
Then we would know how to get x1(t, 0): (1) choose a = a1 and d = d1; and
(2) choose b = b2 and c = c2. For x2(t, 0): (1) pick a = a2,d = d2; and (2)
pick b = b1, c = c1. Similarly, we may choose the parameters for the yi(t, 0).
However, in the continuous system models that we are interested in we do
not have closed form solutions (the F and G) available, or the solutions are
to complicated to accomplish the above analysis. That is why we will employ
continuous simulation software to get the graphs of the crisp solutions.
4.4
Uncertainty Band as a Conﬁdence Band
Suppose all the uncertain parameters in our model are estimated from data
as in Sections 3.3 - 3.6 of Chapter 3. The bases of all the fuzzy estimators are
99% conﬁdence intervals. As we allow the parameters to range through their
99% conﬁdence intervals we generate the uncertainty band x(t)[0] for some
solution x(t). But now this uncertainty band is like a 99% conﬁdence band
for the solutions. x(t)[0] is like a band of 99% conﬁdence intervals for x(t).
We can not make this claim if some of the uncertain parameters are estimated
by experts (Section 3.2) because the base of such a fuzzy estimators is not a
99% conﬁdence interval.
4.5
References
1. J.J.Buckley:
Simulating Fuzzy Systems, Springer, Heidelberg, Ger-
many, 2005.
2. J.J.Buckley: Fuzzy Systems, Soft Computing. To appear.
3. J.J.Buckley and T.Feuring: Fuzzy Initial Value Problem for Nth Order
Linear Diﬀerential Equations, Fuzzy Sets and Systems, 121(2001)247-
255.
4. J.J.Buckley, E.Eslami and T.Feuring: Fuzzy Mathematics in Economics
and Engineering, Physica-Verlag, Heidelberg, Germany, 2002.
5. J.J.Buckley, T.Feuring and Y.Hayashi: Linear Systems of First Order
Ordinary Diﬀerential Equations: Fuzzy Initial Conditions, Soft Com-
puting, 6(2002)415-421.
6. J.J.Buckley, K.Reilly and L.Jowers: Simulating Continuous Fuzzy Sys-
tems I, Iranian J. Fuzzy Systems. To appear.

4.5. REFERENCES
37
7. J.J.Buckley, K.Reilly and L.Jowers: Simulating Continuous Fuzzy Sys-
tems II, Information Sciences. To appear.
8. J.J.Buckley, K.Reilly and X.Zheng: Simulating Fuzzy Systems I in: Ap-
plied Research in Uncertainty Modeling and Analysis, Eds. N.O.Attoh-
Okine,B.M.Ayyub, Springer, Heidelberg, Germany, 2005, 31-60.
9. J.J.Buckley, K.Reilly and X.Zheng:
Simulating Fuzzy Systems II
in:
Applied Research in Uncertainty Modeling and Analysis, Eds.
N.O.Attoh-Okine,B.M.Ayyub, Springer, Heidelberg, Germany, 2005,
61-90.
10. M.R.Spiegel: Applied Diﬀerential Equations, Third Edition, Prentice-
Hall, Englewood Cliﬀs, NJ, 1981.
11. D.G.Zill: A First Course in Diﬀerential Equations, Brooks/Cole, Paciﬁc
Grove, CA, 1997.

Chapter 5
Continuous Simulation
Software
5.1
Software Selection
Now we come to the point were we need to select simulation software to do
all the crisp continuous simulations starting in Chapter 7. The authors are
not experts in continuous simulation and they did not know about all the
products that are available. They decided to do a “search” for continuous
simulation products on the web.
In choosing a simulation package we have these main constraints: (1) it
must be inexpensive, hopefully at most 100 US dollars; (2) it must be easy
to use; (3) it has to run on a desktop computer; and (4) the ﬁgures created
by the software must be exportable to LaTeX (the word processor we would
be using). To start the search we put “continuous simulation” into our web
search engine and start looking through the pages. There are hundreds of
simulation software packages for educational use [4]. We did come up with the
IEEE’s “Buyer’s Guide Simulation Software” [2] (though not available to the
public) which contains most of the software companies marketing continuous
simulation.
We also want the simulation software self contained and ready to use
so we do not need to write code that requires additional development tools
(C++, Java,...)
to run a simulation.
Obviously, the simulation software
package must have a good user’s manual. We narrowed in on “click-drag-
drop” simulation software. The “click-drag-drop” method makes it very easy
to construct a simulation network diagram. Each block for such a system
has a corresponding icon in its library. One clicks on the icon in the library
(generally this is by depressing the left mouse button). Holding the icon, one
positions the icon in the desired location in the network. Finally, the icon
is dropped in place (at the release of the mouse button). One connects the
39

40
CHAPTER 5. CONTINUOUS SIMULATION SOFTWARE
SciLab Example
−
+
−
+
0.2
0.2
1/s
Product
*
*
*
*
Expression
Mathematical
Expression
Mathematical
−
+
−
+
5.5
5.5
1/s
Expression
Mathematical
Expression
Mathematical
0.04
0.04
0.3
0.3
Figure 5.1: SciLab SciCos Diagram
icons using the mouse. Examples of these networks are in all the application
chapters. Separate windows open for one to modify information about partic-
ular icons. For example, an “Integration” icon (operation) has an embedded
parameter for the initial value of the integration output. We found this the
easiest method to build the systems we want to simulate. Our search was
narrowed down to The MathWorks’ Matlab & Simulink [3]. However, this
product is expensive.
Consequently, we searched for Simulink clones. We did ﬁnd a product
similar to Simulink, SciCos in SciLab, that can be downloaded for free [1].
We used this continuous simulation package to build a few small continuous
systems and then fuzzify them; that is, allow many of the parameters to
be fuzzy numbers. Although we found the SciLab clone to be functional,
and on recent review we are pleased to note some improvements, its user
interface was signiﬁcantly more diﬃcult than expected.
Figure 5.1 is an
example of a SciCos diagram which one may compare with the Simulink
diagram of Chapter 7. In doing this we found out that this product had
limited documentation and we would be unable to use it, in general, for
larger systems.

5.2. REFERENCES
41
Most simulation software comes in two types: (1) a “scaled down” version
sometimes called the “student version”, “academic version” or “trial version”;
and (2) the full version usually called the “standard” or “professional” ver-
sion. The professional software of Matlab is quite expensive, usually in the
thousands of dollars, so we were interested in using the student software.
One may be able to download the student (and professional) software and
use it for free for a short time period. We evaluated a trial version; however,
it would be a disaster to have the free time period expire in the middle of
writing this book. The student version of Matlab & Simulink is a restricted
license; use for commercial purposes is prohibited. Fortunately, the authors
discovered, our university’s Computer and Information Sciences Department
already has a licensing agreement for Matlab (needed for Simulink); hence,
all our continuous simulations could be performed (with no extra cost) with
the professional version of Simulink.
Our choice of Simulink only partially met our selection criteria, but we
believe it to be the correct choice. No attempt has been made to guaran-
tee that our simulations will execute on any of the trial Simulink, student
Simulink, or clones. We suspect that they are implementable but not neces-
sarily portable to the SciLab clone. We found that: (1) Matlab profession is
expensive in our opinion; the student version is a little over 100USD; Scilab
is free; (2) Simulink is easy to use, but Matlab programming is required to
eﬀect the simulations we present; (3) Matlab & Simulink run on a desktop
computer; and (4) the ﬁgures created by the software may be exported as
Encapulated PostScript (EPS) or color EPS, both of which generate scalable
ﬁgures for most word processors (including LaTeX). The reason for the late
use of Simulink at the authors’ university was that the ﬁrst author, who
initially started the book, is in the Mathematics Department; once the CIS
department made the most recent release of Matlab available, our selection
was complete. We will now use Simulink for all our crisp continuous simula-
tions.
5.2
References
1. http://scilabsoft.inria.fr/
2. http://solutions.iienet.org/
3. http://www.mathworks.com/
4. http://www.sosresearch.org/simulationeducation/simsoftware.html

Chapter 6
Simulation Optimization
6.1
Introduction
Let x(t) be the solution for a variable, in the crisp continuous system, that
we wish to study. Fuzzy estimation of parameters in the system leads to a
fuzzy system and a fuzzy trajectory x(t). For each t ≥0, x(t) is a fuzzy
number. Let x(t)[α] = [x1(t, α), x2(t, α)], for 0 ≤α ≤1. We want to look at
the alpha equal zero graph
(x1(t, 0), x2(t, 0)), 0 ≤t ≤tm,
(6.1)
where tm is some maximum time. This graph shows the maximum uncer-
tainty in the trajectory of x due to the uncertainty in the values of some of
the parameters in the model. Let us now look at some examples of ﬁnding
the xi(t, 0), i = 1, 2. In the ﬁrst example it is easy to ﬁnd the xi(t, 0) but in
the second example ﬁnding these functions is more diﬃcult. All of this dis-
cussion is what we call the “naive” approach that we used successfully before
[1] in discrete event fuzzy systems. However, this naive method does not nec-
essarily work for continuous fuzzy systems. So, in the second section we look
in more detail at the theory behind the simulation optimization problem.
Example 6.1.1
This is the simple fuzzy diﬀerential equation
˙x = Ax,
(6.2)
where A = (a1/a2/a3) > 0 and x(0) = x0 > 0. As before, ˙x = dx/dt. The
solution is
x(t) = x0exp(At).
(6.3)
43

44
CHAPTER 6. SIMULATION OPTIMIZATION
Hence,
x1(t, 0) = x0exp(a1t),
(6.4)
and
x2(t, 0) = x0exp(a3t).
(6.5)
Example 6.1.2
This is the “arms race” model in equations (3.1) and (3.2) in Chapter 3
adopted from [4]. The system of crisp diﬀerential equations are
˙x = −ax + by + r,
(6.6)
and
˙y = cx −dy + s.
(6.7)
We study this continuous system in more detail in Chapter 8. All the pa-
rameters a, b, c, ..., s have uncertain values and must be estimated. Assume
they are estimated by a group of experts (Chapter 3). Also assume that the
initial values of x and y are known and so will be crisp and not fuzzy.
Now a,...,s will all be triangular fuzzy numbers. Let a[0] = [a1, a2], b[0] =
[b1, b2], etc. We know how to get x(t, 1) and y(t, 1): use the vertex values for
all the triangular fuzzy numbers. But how shall we pick a ∈a[0],...,s ∈s[0]
to obtain xi(t, 0) (yi(t, 0)), i = 1, 2? We can make a guess, but we have no
proof that these values will do the job. For x1(t, 0) make the slope ( ˙x) as
small as possible so use a2,b1,r1. But x(t) is also eﬀected by y(t) through
by so also make y(t) small. This guess, or the “intuitive” method, does not
always work. So we need another method which will be explained in the next
section.
6.2
Theory
In this section we will be using an example from [2]. Consider the second
order linear ordinary diﬀerential equation
¨x + a ˙x + bx = c cos(t),
(6.8)
where a, b and c are constants and ¨x ( ˙x) is the second (ﬁrst) time derivative
of x. The only fuzzy parameters will be the initial conditions so let x(0) =
x0 = (x1/x2/x3) and the fuzzy initial value of ˙x = v0 = (v01/v02/v03) both
triangular fuzzy numbers. Using the fuzzy initial conditions the fuzzy solution
is x(t). Let x(t)[α] = [x1(t, α), x2(t, α)] for t ≥0 and 0 ≤α ≤1. We are
interested in ﬁnding the graphs of x1(t, 0) and x2(t, 0).
Let us look at this problem another way. Deﬁne
Ω(t) = {x(t)|x0 ∈x0[0], v0 ∈v0[0]}.
(6.9)

6.2. THEORY
45
The graph of Ω(t) presents the region of uncertainty in the solutions due to
the uncertainty in the initial conditions. To describe this region we ﬁnd its
boundary
boundary[Ω(t)] = (x1(t, 0), x2(t, 0)).
(6.10)
This is why we want to graph the xi(t, 0), i = 1, 2.
Now we have a ﬁnal way of analyzing the problem. We can get a closed
form solution to equation (6.8) giving
x(t) = F(t; a, b, c, x0, v0).
(6.11)
We fuzzify this solution using the extension principle
x(t) = F(t; a, b, c, x0, v0).
(6.12)
Assuming that f is continuous we know that [3]
x1(t, 0) = min{F(t; a, b, c, x0, v0)|x0 ∈x0[0], v0 ∈v0[0]},
(6.13)
and
x2(t, 0) = max{F(t; a, b, c, x0, v0)|x0 ∈x0[0], v0 ∈v0[0]}.
(6.14)
Given values for a, b and c, for this simple problem, we may solve equations
(6.13) and (6.14) for the value of x0 and v0 that produce the min and max.
The results are that there are 0 < δ1 < δ2 < ... so that:
1. for t ∈[0, δ1]
x1(t, 0) = F(t; a, b, c, x1, v01),
(6.15)
x2(t, 0) = F(t; a, b, c, x3, v03);
(6.16)
2. for t ∈[δ1, δ2]
x1(t, 0) = F(t; a, b, c, x3, v01),
(6.17)
x2(t, 0) = F(t; a, b, c, x1, v03);
(6.18)
3. for t ∈[δ2, δ3]
x1(t, 0) = F(t; a, b, c, x3, v03),
(6.19)
x2(t, 0) = F(t; a, b, c, x1, v01);
(6.20)
4. for t ∈[δ3, δ4]
x1(t, 0) = F(t; a, b, c, x1, v03),
(6.21)
x2(t, 0) = F(t; a, b, c, x3, v01);
(6.22)

46
CHAPTER 6. SIMULATION OPTIMIZATION
5. etc. same pattern.
This shows that, in general, you can not keep the same values for x0 and
v0 for all t and obtain the boundary of Ω(t). You can always tell that you
have lost the description of the boundary when the graphs of x1(t, 0) and
x2(t, 0) cross and x1(t, 0) > x2(t, 0).
The above results are for one second order linear diﬀerential equation
fuzziﬁng only the initial conditions.
However, we believe the same thing
can happen for systems of (non)linear diﬀerential equations fuzziﬁng all the
parameters.
Unfortunately, the above analysis can not be performed in the examples
presented in Chapters 7 - 26 because: (1) either there is no known closed form
solutions employing elementary functions; or (2) the closed form solutions are
too complicated. So we will be unable to ﬁnd the times δi to change the values
of the parameters in their α = 0 cut to get the boundary functions xi(t, 0).
There is a solution to the problem of determining the graph of Ω(t). Now
Ω(t) represents all the graphs of a crisp solution x(t) as all the fuzzy para-
meters range through their intervals of uncertainty. Our simulation software
allows us to simulate the system as you sweep parameter values across a range
of values. Code for this is in Chapter 28. Of course, this “sweep” will have
to be discrete. Let the uncertain parameters be ai, 1 ≤i ≤k. Assume they
will all have fuzzy estimators ai, 1 ≤i ≤k. These fuzzy estimators will all
be triangular fuzzy numbers ai = (ai1/ai2/ai3), 1 ≤i ≤n. For a minimum
approximation to Ω(t), the region of uncertainty, we will graph all the crisp
solutions on the same graph for ai = ai1, ai2, ai3, 1 ≤i ≤k. So there will
be 3k graphs on the same coordinate system producing an approximation to
xi(t, 0), i = 1, 2. In the applications in Chapters 7 - 26 k can range from
2 to 11. Surely, if n = 11, then 311 = 177, 147 which is too many graphs.
We will need to reach another compromise. Our ﬁnal compromise is that we
will allow at most six fuzzy parameters in each application. The result is :
(1) for two fuzzy parameters, there will be 9 graphs; (2) if k = 3 we have 27
graphs; (3) with four fuzzy parameters we get 81 graphs; (4) k = 5 gives 243
graphs; and (5) k = 6 we have 729 graphs on one coordinate system. See
Chapter 28 if you want to use more than three values of a fuzzy parameter
and/or more than six fuzzy variables. The ideal would be to use thousands
of graphs producing a black tube of uncertainty for Ω.
Sometimes we will have only one fuzzy parameter. If we chose only three
crisp values for this parameter in its α = 0 cut we would have just three
graphs which would be too few to approximate the band of uncertainty.
So in this case we will pick around ten equally spaced crisp values for this
parameter in its α = 0 cut. We will make these special changes in choosing
the values for the fuzzy parameters when necessary.

6.3. SUMMARY
47
6.3
Summary
Consider a crisp continuous system whose evolution is determined by a system
of ordinary diﬀerential equations.
Some parameter values are not known
precisely and must be estimated. Using our fuzzy estimators (Chapter 3) we
get a system of fuzzy diﬀerential equations to solve. If x(t) is a crisp solution
we wish to study, then it becomes a fuzzy trajectory x(t) in the fuzzy system.
We want to identify Ω(t), which is the collection of all crisp trajectories x(t)
obtained as all the uncertain parameters range through their α = 0 cuts. Ω(t)
gives the uncertainty band for all possible crisp solutions as a result of the
uncertainty in parameter values. We ﬁnd Ω(t) by determining its boundary
x1(t, 0) and x2(t, 0). The simulation optimization problem is to ﬁnd out how
to pick the values of the parameters in their alpha zero cut to obtain the
boundary of Ω(t). We have not solved this problem in general and this is
surely a topic for future research.
6.4
References
1. J.J.Buckley:
Simulating Fuzzy Systems, Springer, Heidelberg, Ger-
many, 2005.
2. J.J.Buckley and T.Feuring: Fuzzy Initial Value Problem for Nth Order
Linear Diﬀerential Equations, Fuzzy Sets and Systems, 121(2001)247-
255.
3. J.J.Buckley and Y.Qu: On Using α-Cuts to Evaluate Fuzzy Equations,
Fuzzy Sets and Systems, 38(1990)309-312.
4. M.Olinick: An Introduction to Mathematical Models in the Social and
Life Sciences, Addison-Wesley, Reading, MA, 1978.

Chapter 7
Predator/Prey Models
7.1
Introduction
The predator/prey model was introduced in Chapter 4.
However, in this
chapter we will modify it as discussed below.
Let x(t) (y(t)) denote the
number of fox (rabbits) in a certain ecosystem at time t. Assume that in this
region the fox only eat rabbits and therefore the x(t) are the predators and
the y(t) are the prey. If there are no rabbits the fox population may decline
according to
˙x = −ax, a > 0.
(7.1)
If rabbits are present we assume that the fox population will grow at a rate
proportional to the product xy, or at rate bxy. Hence
˙x = −ax + bxy, a > 0, b > 0,
(7.2)
is the diﬀerential equation governing the fox population. We use the notation
˙x = dx/dt.
If there are no foxes, assuming unlimited food supply, then ˙y = dy, for
some constant d > 0. But this allows the rabbit population to grow indeﬁ-
nitely. Suppose there is some theoretical maximum number (ym) of rabbits
that can live in this ecosystem; or the carrying capacity is ym. Then we write
˙y = dy(1 −(y/ym)) [1]. When there are foxes present, the rabbit population
will decline at rate cxy, c > 0. So
˙y = −cxy + dy(1 −y/ym)), c > 0, d > 0.
(7.3)
This is the diﬀerential equation describing the rabbit population and both
diﬀerential equations (equations (7.2) and (7.3)) is the model for the system
([1],[2]).
This is a system of nonlinear diﬀerential equations.
The initial
conditions are x(0) = x0 and y(0) = y0. If there is a value of t, say t = tz, for
which x(tz) < 1 (y(tz) < 1), then x(t) = 0 (y(t) = 0) for t ≥tz. Since these
49

50
CHAPTER 7. PREDATOR/PREY MODELS
Parameter
Fuzzy/Crisp Value
a
a = (0.2/0.3/0.4)
b
b = (0.04/0.05/0.06)
c
c = (0.3/0.4/0.5)
d
d = (5.5/6/6.5)
ym
100
x0
5
y0
15
Table 7.1: Fuzzy/Crisp Parameters in the Predator/Prey Model
are continuous models we could have x(t) = 0.1 for some value of t which is
impossible since x(t) needs to be 0, 1, 2, ..., ym.
7.2
Parameters
We need to estimate all of the parameters. We have no data on this ecosystem
so we turn to experts (Chapter 3) on this region to help estimate a, b, c, d, ym
and x0, y0 for a certain time period. We obtained the following triangular
fuzzy numbers shown in Table 7.1. Notice that ym, x0 and y0 are assumed
to be known precisely and therefore are not fuzzy. Using fuzzy parameters
we get fuzzy diﬀerential equations and the solutions x(t) and y(t) are also
fuzzy. The system now becomes a continuous fuzzy system whose trajectories
are fuzzy so that any slice through a trajectory at some time tz is a fuzzy
number. We wish to estimate the band of uncertainty which is x(t)[0] and
y(t)[0], or the α = 0 cuts.
Next we need to choose the values of the parameters in their α = 0 cut to
approximate the outer boundary of the α = 0 cut of the fuzzy trajectory for
the foxes and the rabbits. As discussed in Chapter 6 if ω = (ω1/ω2/ω3) is a
fuzzy parameter we use ω = ω1, ω2 and ω3. We do this for a, b, c and d giving
34 = 81 curves for x(t) and 81 graphs for y(t) for a minimal approximation
to x(t)[0] and y(t)[0]. These are shown in Figures 7.2 and 7.3. The systems
diagram for Simulink is in Figure 7.1.
In Figure 7.2 (7.3) the reader can determine, from consulting Section
1.5.4, x(t) (y(t)) when we used for the fuzzy parameters: (1) all left end
points of their α = 0 cut; (2) all right end points of their α = 0 cut; and (3)
their α = 1 values.
7.3
Simulation
Let us ﬁrst explain the Simulink network in Figure 7.1. The top loop is for
x(t) and the lower loop is for y(t). The input to “Integrator” in the top loop

7.3. SIMULATION
51
Rabbits.mat
y(t) File
Foxes.mat
x(t) File
f(u)
u*(1−0.01*u)
Sum of
Elements1
Sum of
Elements
Rabbits
Product of
Elements
1
s
Integrator1
1
s
Integrator
5.5
GainD
0.3
GainC
0.04
GainB
0.2
GainA
Foxes
(u>=1)*u
Clip On Rabbits < 1
(u>=1)*u
Clip On Foxes < 1
Figure 7.1: Simulink Diagram for the Predator/Prey Model
is −ax+ bxy which equals ˙x and the output is x(t). The initial value for x(t)
was set inside the “Integrator” block. “Clip on Foxes” sets x(t) to zero when
it becomes less than one. The function within the box, (u >= 1) ∗u, ﬁrst
interprets u >= 1 as true/false, yielding 1/0, and subsequently produces an
output of u/0. “GainA” multiplies x(t) by a for input to “Sum of Elements”.
x(t) is also input to “Product of Elements” which computes x(t)y(t), and then
gets multiplied by b in “GainB” for input to “Sum of Elements”. The input to
“Integrator1” in the lower loop is −cxy+dy(1−y/ym) which equals ˙y and the
output is y(t). The initial value for y(t) was set inside “Integrator1”. “Clip on
Rabbits” makes y(t) zero if y(t) < 1, as is done for “Clip on Foxes”. y(t) goes
to “Product of Elements” and also to “f(u)”. The block “f(u)” computes y(1−
y/ym), whose output goes to “GainD” for multiplication by d, and its output
goes to “Sum of Elements1”. Also, the output from “Product of Elements”,
which is x(t)y(t), gets multiplied by c for input to “Sum of Elements1”.
“Scope” produces the graph of x(t) and “Scope1” is for the graph of y(t).
“Scope” graphs only one curve at a time so “Foxes.mat” (“Rabbits.mat”)
collects the data for all 81 graphs for graphing on one coordinate system.
More details on how this is done is in Chapter 28. There are also other items
to set/choose, like simulation time and type of numerical integrator, which

52
CHAPTER 7. PREDATOR/PREY MODELS
0
5
10
15
20
25
30
35
40
45
50
0
5
10
15
20
25
30
35
Figure 7.2: Fuzzy Trajectory for the Number of Foxes x(t)[0]
we will not discuss here (see Chapter 28).
Let x(t)[0] = [x1(t, 0), x2(t, 0)]. In Figure 7.2 connect the upper boundary
with a smooth curve which is our approximation to x2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
x1(t, 0). The horizontal axis is time and the vertical axis is the number of
foxes.
We get steady state (horizontal curves) with limt→∞x2(t, 0) ≈20
and limt→∞x1(t, 0) = 0.
The fox population can go to zero because the
rabbit population can go to zero (Figure 7.3). The uncertainty band, the
diﬀerence between the two curves in steady state, is approximately 20 foxes.
But initially, the fox population can oscillate from a maximum of about 34
to a minimum of zero after starting out at 5. We actually obtain a steady
state band of 10 to 20 if the fox population does not approach zero.
Let y(t)[0] = [y1(t, 0), y2(t, 0)]. In Figure 7.3 connect the upper boundary
with a smooth curve which is our approximation to y2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
y1(t, 0). The horizontal axis is time and the vertical axis is the number of
rabbits. We get steady state (horizontal curves) with limt→∞y2(t, 0) ≈10
and limt→∞y1(t, 0) = 0. The rabbit population can go to zero. However,
initially the rabbit population can go a high as around 54 after starting out at

7.4. REFERENCES
53
0
5
10
15
20
25
30
35
40
45
50
0
10
20
30
40
50
60
Figure 7.3: Fuzzy Trajectory for the Number of Rabbits y(t)[0]
15. We also obtain a steady state uncertainty band of about 6 to 10 rabbits
if the population does not go to zero.
The results show that there is a possibility that the population of foxes
and rabbits will disappear. But there is a lot of uncertainty in the results
due to the uncertainty in the values of the parameters in the model. If we
can obtain more accurate estimates for these parameters (less fuzzy), then
we can reduce the uncertainty in the results for x(t) and y(t).
If all the uncertain parameters are estimated from data (Chapter 3), in-
stead of employing experts, then the base of the fuzzy estimator is a 99%
conﬁdence interval. Using all of these conﬁdence intervals we get x(t)[0] and
y(t)[0], so these bands of uncertainty will be like 99% conﬁdence intervals for
x(t) and y(t), respectively.
7.4
References
1. M.R.Spiegel: Applied Diﬀerential Equations, Third Edition, Prentice-
Hall, Englewood Cliﬀs, NJ, 1981.
2. D.G.Zill: A First Course in Diﬀerential Equations, Brooks/Cole, Paciﬁc
Grove, CA, 1997.

Chapter 8
An Arm’s Race Model
8.1
Introduction
The arms race model was brieﬂy introduced in Chapter 3 and again in Chap-
ter 6. The system of crisp linear diﬀerential equations is [1]
˙x = −ax + by + r,
(8.1)
˙y = cx −dy + s,
(8.2)
where a, b, c, d are all positive constants, r, s are positive, or negative, con-
stants, subject to initial conditions x(0) = x0, y(0) = y0. Here x (y) repre-
sents the yearly rates of armament expenditures of nation A (B) in dollars.
We use the notation ˙x = dx/dt and ˙y = dy/dt. Time will be in years. These
are linear diﬀerential equations so we could easily ﬁnd the solutions. How-
ever, even using simple solutions it can be complicated to ﬁnd the boundary
of the band of uncertainty, or the boundary of x(t)[0]) and y(t)[0], as shown
in Section 6.2. So we omit expressions for the exact solutions and will use
simulation instead.
We ﬁrst need to look more closely at this model to understand the meaning
of the constants a, b, c, d, r, s. The ﬁrst assumption is that ˙x ( ˙y) is directly
proportional to y (x). Hence ˙x = by ( ˙y = cx) for some positive constant b
(c). The next assumption is that excessive expenditures places a “drag” on
the economy, or ˙x ( ˙y) is directly and negatively proportional to x (y). That
is ˙x = −ax ( ˙y = −dy) for some positive constant a (d). So now we have ˙x =
−ax+by and ˙y = cx−dy. Finally, increasing (decreasing) arms expenditures
is not the only mutual stimulation on expenditures, but underlying grievance
(good will) of each nation against the other have important implications on
expenditures and are in the constants r and s in equations (8.1) and (8.2).
More details are in [1]. We also need initial values for x and y. If there is a
value of t, say t = tz, for which x(tz) = 0 (y(tz) = 0), then we assume that
x(t) = 0 (y(t) = 0) for t ≥tz.
55

56
CHAPTER 8. AN ARM’S RACE MODEL
8.2
Parameters
We need to estimate all the parameters in the model. The data we have is old,
from during and before the last great war. So we turn to a group of experts
(Chapter 3) in this ﬁeld to help estimate all the parameters. We obtained
the triangular fuzzy numbers shown in Table 8.1. Notice that x0 = y0 = 15
are known precisely and will not be fuzzy. Using fuzzy parameters we get
fuzzy diﬀerential equations and the solutions x(t) and y(t) are also fuzzy. The
system now becomes a continuous fuzzy system whose trajectories are fuzzy
so that any slice through a trajectory at some time tz is a fuzzy number. We
wish to estimate the band of uncertainty which is x(t)[0] and y(t)[0], or the
α = 0 cuts.
Parameter
Fuzzy/Crisp Value
a
a = (1.5/2/2.5)
b
b = (0.5/1/1.5)
c
c = (5.5/6/6.5)
d
d = (1.5/2/2.5)
r
r = (−5.5/ −5/ −4.5)
s
s = (−12.5/ −12/ −11.5)
x0
15
y0
15
Table 8.1: Fuzzy/Crisp Parameters in the Arm’s Race Model for the First
Simulation
Next we need to choose the values of the fuzzy parameters in their α =
0 cut to approximate the outer boundary of the α = 0 cut of the fuzzy
trajectory for the yearly rates of armament expenditures for nation A (B).
As discussed in Chapter 6 if ω = (ω1/ω2/ω3) is a fuzzy parameter we use
ω = ω1, ω2 and ω3. We do this for a, b, c, d, r and s giving 36 = 729 curves
for x(t) and 729 graphs for y(t) for a minimal approximation to x(t)[0] and
y(t)[0]. These are shown in Figures 8.2 and 8.3. The systems diagram for
Simulink is in Figure 8.1.
In Figure 8.2 (8.3) the reader can determine, from consulting Section
1.5.4, x(t) (y(t)) when we used for the fuzzy parameters: (1) all left end
points of their α = 0 cut; (2) all right end points of their α = 0 cut; and (3)
their α = 1 values.
8.3
First Simulation
Let us ﬁrst describe how Simulink solves this problem using Figure 8.1. The
top of the ﬁgure is for x(t) and the bottom is for y(t). The input to the
top “Integrator” is −ax + by + r which is ˙x and the output is x(t). The

8.3. FIRST SIMULATION
57
Sum of
Elements1
Sum of
Elements
Saturation1
Saturation
Nation B Scope
B.mat
Nation B Expenditures
Nation A Scope
A.mat
Nation A Expenditures
1
s
Integrator1
1
s
Integrator
12.5
GainS
5.5
GainR
2.5
GainD
5.5
GainC
0.5
GainB
2.5
GainA
1
Constant1
1
Constant
Figure 8.1: Simulink Diagram for Arm’s Race Model
0
1
2
3
4
5
6
7
8
9
10
0
100
200
300
400
500
600
700
800
900
1000
Figure 8.2: Fuzzy Trajectory for Nation A x(t)[0] in the Arm’s Race Model
in the First Simulation

58
CHAPTER 8. AN ARM’S RACE MODEL
0
1
2
3
4
5
6
7
8
9
10
0
100
200
300
400
500
600
700
800
900
1000
Figure 8.3: Fuzzy Trajectory for Nation B y(t)[0] in the Arm’s Race Model
in the First Simulation
“Saturation” just sets x(t) = 0 if x(t) is negative (negative expenditures are
not allowed) and it sets x(t) = 1000 if x(t) > 1000. We cut the simulation oﬀ
at 1000 because we feel that the system is “out of control” when expenditures
exceed 1000. The top loop multiplies x(t) by a in “GainA” for input to “Sum
of Elements”. The second input to “Sum of Elements” is from y(t) after
multiplying by b in “GainB”. The ﬁnal input to “Sum of Elements” is the
constant r in “GainR”. Similarly we have the bottom half of the ﬁgure for
y(t). The initial values for x(t) and y(t) are deﬁned inside the “Integrators”
and the “Scopes” produce the graphs for x(t) and y(t) for each choice for
the parameter values. So “A.mat” and “B.mat” collect the data for all 729
graphs for graphing on one coordinate system. More details on how this is
done is in Chapter 28. There are also other items to set/choose, like the type
of numerical integrator and the Max/Min step size, which we will not discuss
here (see Chapter 28).
Let x(t)[0] = [x1(t, 0), x2(t, 0)] for nation A. In Figure 8.2 connect the
upper boundary with a smooth curve which is our approximation to x2(t, 0)
and connect the lower boundary with a smooth curve producing an approxi-
mation to x1(t, 0). The horizontal axis is time in years and the vertical axis
is $. We see that x2(t, 0) can grow to exceed 1000 in about 5 years whereas
x1(t, 0) may approach zero which leads to disarmament.
Let y(t)[0] = [y1(t, 0), y2(t, 0)]. In Figure 8.3 connect the upper boundary

8.4. SECOND SIMULATION
59
with a smooth curve which is our approximation to y2(t, 0) and connect the
lower boundary with a smooth curve producing an approximation to y1(t, 0).
The horizontal axis is time and the vertical axis is $. We see that y2(t, 0)
can grow to exceed 1000 within 2 years whereas y1(t, 0) may approach zero
which leads to disarmament.
In both ﬁgures the spread between both graphs shows the uncertainty due
to the uncertainty in the input parameters. In this example there is tremen-
dous uncertainty in the results. The lower graphs x1(t, 0) and y1(t, 0) both
approach zero, which leads to disarmament, in one to two years. The upper
graphs keep increasing and eventually go oﬀthe top of the graph paper. The
uncertainty is too great going from disarmament to “run away” expenditures
on armament. There is a possibility of almost everything in between. This
result may come from too much fuzziness in the fuzzy estimators. So we
would now see if we could obtain less uncertainty (fuzziness) in the expert’s
estimation of the parameters and solve the problem again.
If all the uncertain parameters are estimated from data (Chapter 3), in-
stead of using expert opinion, then the base of the fuzzy estimator is a 99%
conﬁdence interval. Using all of these conﬁdence intervals we get x(t)[0] and
y(t)[0], so these bands of uncertainty will be like 99% conﬁdence intervals for
x(t) and y(t), respectively.
8.4
Second Simulation
Back to the “experts” to estimate the uncertain parameters.
After much
discussion we obtain less fuzzy estimates shown in Table 8.2. With this new
data we simulate the system again with results in Figures 8.4 and 8.5.
Parameter
Fuzzy/Crisp Value
a
a = (1.8/2/2.2)
b
b = (0.8/1/1.2)
c
c = (5.8/6/6.2)
d
d = (1.8/2/2.2)
r
r = (−5.2/ −5/ −4.8)
s
s = (−12.2/ −12/ −11.8)
x0
15
y0
15
Table 8.2: Fuzzy/Crisp Parameters in the Arm’s Race Model for the Second
Simulation
There is not much change from Figure 8.2 to Figure 8.4 and from Figure
8.3 to Figure 8.5. Almost anything is possible from “run away” expenditures
on armament to disarmament. The experts do not believe they can further

60
CHAPTER 8. AN ARM’S RACE MODEL
0
1
2
3
4
5
6
7
8
9
10
0
100
200
300
400
500
600
700
Figure 8.4: Fuzzy Trajectory for Nation A x(t)[0] in the Arm’s Race Model
in the Second Simulation
0
1
2
3
4
5
6
7
8
9
10
0
100
200
300
400
500
600
700
800
900
1000
Figure 8.5: Fuzzy Trajectory for Nation B y(t)[0] in the Arm’s Race Model
in the Second Simulation

8.5. REFERENCES
61
reduce the fuzziness in their estimates of the uncertain parameters. So, we
can not make any predictions except that almost anything is possible.
8.5
References
1. M.Olinick: An Introduction to Mathematical Models in the Social and
Life Sciences, Addison-Wesley, Reading, MA, 1978.

Chapter 9
Bungee Jumping
9.1
Introduction
This application was adapted from a tutorial/demo of Simulink [1].
We
are to design a bungee jump for a amusement park in the US. A “rider”
(customer) jumps from 240 feet above the ground.
We will measure the
positive x direction downward, from the point of the jump, to the ground
level. The length of the unstretched bungee cord is 90 feet. Our coordinate
system will be positive downward with x = −90 feet at the jump point, x = 0
where the bungee cord begins to stretch, and x = 150 feet at the ground.
Initial conditions are then x(0) = −90 and initial velocity zero. The nonlinear
diﬀerential equation of motion is
m(d2x/dt2) = mg −F(x) −R(v),
(9.1)
where m = mass, mg = weight of rider in pounds with g = 32feet/sec2,
F(x) = the force on the jumper exerted by the bungee cord and R(v) = is
air resistance with v = velocity. We ﬁrst have
F(x) = kx, x ≥0, and F(x) = 0, x < 0,
(9.2)
where k is the spring constant for the elastic bungee cord. We will model
air resistance simply as a constant times velocity
R(v) = cv,
(9.3)
where v = ˙x = dx/dt. We wish to ﬁnd x = x(t). Then for graphing we graph
150 −x(t).
9.2
Parameters
The weight of a customer and the constant c in air resistance are somewhat
uncertain but for the bungee cord we plan to use, the constant k is known
63

64
CHAPTER 9. BUNGEE JUMPING
Parameter
Fuzzy/Crisp Value
µ
µ = (120/170/220)
c
c = (1.0/1.2/1.4)
k
k = 2.5
Table 9.1: Fuzzy/Crisp Parameters in the Bungee Jumping Model
to be k = 2.5 pounds per foot. We will model a customer’s weight using
a fuzzy estimator of the mean of a normal distribution (Section 3.6) and a
fuzzy estimator for c will be from expert opinion (Section 3.2).
The customers that we are allowing to ride the bungee jump will be
between 18 and 55 years old and usually male. We will design this ride only
for males in this age bracket. We can get national data on the weight of this
group of males and estimate the mean. Thus we can construct conﬁdence
intervals and obtain a fuzzy estimator µ for µ as discussed in Section 3.6.
This will be used for the fuzzy mass (weight divided by g) in the diﬀerential
equation. For simplicity we will use a triangular fuzzy number for µ instead
of the triangular shaped fuzzy number shown in Figure 3.6.
The customers can produce diﬀerent air resistance. It depends on what
they are wearing (how loose the clothes) and their shape as they fall (legs
together/apart, ...). Expert opinion is used to estimate c giving fuzzy number
c as our estimator. Both fuzzy estimators are shown in Table 9.1. Using fuzzy
parameters we get a fuzzy diﬀerential equation and the solution x(t) is also
fuzzy. The system now becomes a continuous fuzzy system whose trajectories
are fuzzy so that any slice through a trajectory at some time tz is a fuzzy
number. We wish to estimate the band of uncertainty which is x(t)[0], or the
α = 0 cut.
Next we need to choose the values of the parameters in their α = 0 cut
to approximate the outer boundary of the α = 0 cut of the fuzzy trajectory.
As discussed in Chapter 6 if ω = (ω1/ω2/ω3) is a fuzzy parameter we use
ω = ω1, ω2 and ω3. We do this for µ and c giving 32 = 9 curves for x(t)
for a minimal approximation to x(t)[0]. These are shown in Figure 9.2. The
systems diagram for Simulink is in Figure 9.1.
In Figure 9.2 the reader can determine, from consulting Section 1.5.4, x(t)
when we used for the fuzzy parameters: (1) all left end points of their α = 0
cut; (2) all right end points of their α = 0 cut; and (3) their α = 1 values.
9.3
First Simulation
Let us ﬁrst describe how Simulink solves this problem using Figure 9.1. The
output from the “Sum of Elements” is mg −F(x) −R(v). “Gain” multiplies
this by 1/m so the input to “Integrator” is g −F(x)/m −R(v)/m which

9.3. FIRST SIMULATION
65
220
mu
Sum of
Elements1
Sum of
Elements
Scope
Saturation
1
s
Integrator1
1
s
Integrator
2.5
Gain k
1.4
Gain c
0.145
Gain
150
Constant
a.mat
Altitude File
1
1
Figure 9.1: Simulink Diagram for the Bungee Jumping Example
0
10
20
30
40
50
60
−50
0
50
100
150
200
250
Figure 9.2: Fuzzy Trajectory for Altitude x(t)[0] in the Bungee Jumping
Example: First Simulation

66
CHAPTER 9. BUNGEE JUMPING
equals d2x/dt2. The output is v = dx/dt, which is the input to “Integra-
tor1”, whose output is x(t). “Gain c” multiplies v by c for input to “Sum of
Elements”. “Gain k” multiplies x by k, then “Saturation” outputs zero when
its input is negative, for input to “Sum of Elements”. The constant “mu” is
for the weight of the person jumping for input to “Sum of Elements”. The
initial values for v and x are set inside the “Integrators”. Finally, “Sum of
Elements1” computes 150 −x for “Scope” which gets the graph. “Scope”
does a graph for only one value of µ and only one value for c. The “Altitude
File” collects all the data for the nine graphs so they can be put into one
coordinate system. More details on how this is done is in Chapter 28. There
are other things to do, like choose the numerical integrator, choose the rel-
ative/absolute tolerance in the simulator, etc., but we will not discuss these
here (see Chapter 28).
Let x(t)[0] = [x1(t, 0), x2(t, 0)]. In Figure 9.2 connect the upper boundary
with a smooth curve which is our approximation to x2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
x1(t, 0). The horizontal axis is time and the vertical axis is distance above
the ground. The spread between the graphs shows the uncertainty in the
results due to the uncertainty in the input parameters. We see that there is
a strong possibility that a customer may hit the ground, which is absolutely
unacceptable. Therefore, we need to use another bungee cord with a higher
value for k. We try again using k = 4, k = 6,... until the is no possibility of
a jumper hitting the ground.
If all the uncertain parameters are estimated from data (Chapter 3), and
not using expert opinion for c, then the base of each fuzzy estimator is a 99%
conﬁdence interval. Using all of these conﬁdence intervals we get x(t)[0], so
this band of uncertainty will be like 99% conﬁdence intervals for x(t).
9.4
Second Simulation
We change k to 4 and run the simulation again. There are no other changes.
The results are shown in Figure 9.3. Now there is no possibility that a person
will hit the ground. We also want there to be the possibility that a rider will
get close to the ground, making it a thrilling ride, and this is true as seen in
Figure 9.3. Hence, we go with this design for the bungee jump.

9.5. REFERENCES
67
0
10
20
30
40
50
60
0
50
100
150
200
250
Figure 9.3: Fuzzy Trajectory for Altitude x(t)[0] in the Bungee Jumping
Example: Second Simulation
9.5
Reference
1. www.mathworks.com

Chapter 10
Spread of Infectious
Disease Model
10.1
Introduction
This application was adapted from examples in [1] and [2]. We have a total
population of N people and a certain contagious disease infecting this pop-
ulation. Let us call this disease D. This population is split up at any time
t into three groups: (1) x(t) = those uninfected with D but may become in-
fected; (2) y(t) = those who are presently infected with D and can spread the
disease; and (3) z(t) = those who had the disease D and are dead, recovered
and immune, or isolated and can not spread the infection. We always have
N = x(t) + y(t) + z(t) for t ≥0.
Our ﬁrst assumption is that the rate of transfer from x into y is directly
proportional to xy. Or, ˙x = −kxy for some positive constant (the infection
rate) k. This parameter needs to be estimated. The rate of transfer into y
comes from x but the rate of transfer out of y goes to z. The rate out of y is
assumed to be proportional to y. The diﬀerential equation is ˙y = kxy−cy for
some positive constant (the removal rate) c. This constant will also need to
be estimated. If we diﬀerentiate N = x + y + z and solve for dz/dt we obtain
dz/dt = cy. But we do not need this third diﬀerential equation because we
may always ﬁnd z from z = N −x −y. Therefore, the system of nonlinear
diﬀerential equations to solve is
˙x = −kxy,
(10.1)
˙y = kxy −cy,
(10.2)
z = N −x −y,
(10.3)
with initial conditions x(0) = x0, y(0) = y0, z(0) = z0 = 0, x0 + y0 = N.
The notation is dx/dt = ˙x and dy/dt = ˙y.
69

70
CHAPTER 10. SPREAD OF INFECTIOUS DISEASE MODEL
Parameter
Fuzzy/Crisp Value
k
k = (0.003/0.005/0.007)
c
c = (0.6/0.9/1.2)
p
p = (0.02/0.05/0.08)
y0
y0 = (20/50/80)
x0
x0 = (920/950/980)
z0
z0 = 0
N
N = 1000
Table 10.1: Fuzzy/Crisp Parameters in the Infectious Disease Model
10.2
Parameters
The constants k and c depend on the type of disease, the season (winter or
summer), whether or not the population has been vaccinated against D, etc.
Experts in infectious diseases are asked to estimate k and c (Chapter 3). The
resulting triangular fuzzy numbers for k and c are in Table 10.1. Next we
need to estimate the initial value for y since we assumed that z(0) = 0 and
then x0 = N −y0. Let p = be the initial proportion of the population infected
with D. The value of p is not known precisely and needs to be estimated.
The fuzzy estimator for p, see Section 3.5, is p. Assume we obtained the
triangular fuzzy number p shown in Table 10.1. There are only three basic
fuzzy parameters in Table 10.1. They are k, c and p. Then y0 = Np and
x0 = N −y0. For the rest of this chapter assume that N = 1000.
Using fuzzy parameters we get fuzzy diﬀerential equations and the solu-
tions x(t), y(t) and z(t) are also fuzzy. The system now becomes a continuous
fuzzy system whose trajectories are fuzzy so that any slice through a trajec-
tory at some time tz is a fuzzy number. We wish to estimate the bands of
uncertainty which are x(t)[0], y(t)[0] and z(t)[0], or the α = 0 cuts.
Next we need to choose the values of the parameters in their α = 0 cut
to approximate the outer boundary of the α = 0 cut of the fuzzy trajectory
for x(t), y(t) and z(t). As discussed in Chapter 6 if ω = (ω1/ω2/ω3) is a
fuzzy parameter we use ω = ω1, ω2 and ω3. We do this for k, c and p giving
33 = 27 curves for x(t), 27 graphs for y(t), and 27 for z(t), for a minimal
approximation to x(t)[0], y(t)[0] and z(t)[0], respectively. These are shown
in Figures 10.2 - 10.4. For example, if: (1) we pick p = 0.02, then y0 = 20
and x0 = 980; (2) for p = 0.05, then y0 = 50 and x0 = 950; and (3) p = 0.08
implies y0 = 80, x0 = 920. In all cases z0 = 0 and x0 + y0 = N. The systems
diagram for Simulink is in Figure 10.1.
In Figure 10.2 (10.3,10.4) the reader can determine, from consulting Sec-
tion 1.5.4, x(t) (y(t),z(t)) when we used for the fuzzy parameters: (1) all left
end points of their α = 0 cut; (2) all right end points of their α = 0 cut; and
(3) their α = 1 values.

10.3. SIMULATION
71
Population
z.mat
z(t) File
y.mat
y(t) File
x.mat
x(t) File
1000
−u
Unary Minus
Sum of
Elements1
Sum of
Elements
Scope z(t)
Scope y(t)
Scope x(t)
Product of
Elements
1
s
Integrate y‘
1
s
Integrate x‘
0.003
Gain k
0.6
Gain c
Figure 10.1: Simulink Diagram for the Infectious Disease Example
10.3
Simulation
We ﬁrst discuss Figure 10.1. The top “Scope x(t)” is for x(t), the middle
“Scope y(t)” graphs y(t), and the bottom “Scope z(t)” shows z(t). As usual,
a “Scope” only does one graph at a time so “x(t) File” (“y(t) File”, “z(t)
File”) collects the data for all the graphs so that we can display them on
one coordinate system. More details on this is in Chapter 28. The input to
“Integrate x′ ” is dx/dt = −kxy with output x(t). The input to “Integrate
y′ ” is dy/dt = kxy −cy with output y(t). The bottom of the ﬁgure com-
putes z(t) = 1000 −x(t) −y(t) for “Scope z(t)”. Now “Gain k” multiplies
by k and then “Unary Minus” changes the sign, and “Gain c” multiplies
by c. “Product of Elements” just multiplies the inputs and “Sum of Ele-
ments” adds/subtracts the inputs. Initial values for x and y are set inside
the “Integrators”. Other items, like simulation times and type of numerical
integration to use, needed to run the simulation are not discussed here (see
Chapter 28).
Let x(t)[0] = [x1(t, 0), x2(t, 0)]. In Figure 10.2 connect the upper bound-
ary with a smooth curve which is our approximation to x2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
x1(t, 0).
The horizontal axis is time and the vertical axis is the number
uninfected with the disease. We get steady state (horizontal curves) with
limt→∞x2(t, 0) ≈100 and limt→∞x1(t, 0) = 0. The uncertainty band, the

72
CHAPTER 10. SPREAD OF INFECTIOUS DISEASE MODEL
0
1
2
3
4
5
6
7
8
9
10
0
100
200
300
400
500
600
700
800
900
1000
Figure 10.2: Fuzzy Trajectory for Uninfected x(t)[0] in the Infectious Disease
Example
0
1
2
3
4
5
6
7
8
9
10
0
100
200
300
400
500
600
700
800
Figure 10.3: Fuzzy Trajectory for Infected y(t)[0] in the Infectious Disease
Example

10.3. SIMULATION
73
0
1
2
3
4
5
6
7
8
9
10
0
100
200
300
400
500
600
700
800
900
1000
Figure 10.4: Fuzzy Trajectory for Previously Infected z(t)[0] in the Infectious
Disease Example
diﬀerence between the two curves in steady state, is approximately 100 peo-
ple. This uncertainty is a result of the uncertainty in k, c and p.
Let y(t)[0] = [y1(t, 0), y2(t, 0)]. In Figure 10.3 connect the upper boundary
with a smooth curve which is our approximation to y2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
y1(t, 0). The horizontal axis is time and the vertical axis is the number of
infected people with this disease. We get steady state (horizontal curves) with
limt→∞y2(t, 0) ≈0 and limt→∞y1(t, 0) = 0. The number infected goes to
zero. As time grows there is no uncertainty in these results. The uncertainty
band goes to zero. However, initially the number infected can go as high as
around 710.
Let z(t)[0] = [z1(t, 0), z2(t, 0)]. In Figure 10.4 connect the upper boundary
with a smooth curve which is our approximation to z2(t, 0) and connect the
lower boundary with a smooth curve producing an approximation to z1(t, 0).
The horizontal axis is time and the vertical axis is the number in group z(t).
We get steady state (horizontal curves) with limt→∞z2(t, 0) = 1000 and
limt→∞x1(t, 0) ≈900. The uncertainty band, the diﬀerence between the two
curves in steady state, is approximately 100 people. This uncertainty is a
result of the uncertainty in x(t).
The uncertainty bands in the results are not considered excessive, so for
now we will consider this study ﬁnished.

74
CHAPTER 10. SPREAD OF INFECTIOUS DISEASE MODEL
If all the uncertain parameters are estimated from data (Chapter 3), and
not using expert opinion, then the base of the fuzzy estimator is a 99% con-
ﬁdence interval. Using all of these conﬁdence intervals we get x(t)[0],y(t)[0]
and z(t)[0], so these bands of uncertainty will be like 99% conﬁdence intervals
for x(t),y(t) and z(t), respectively.
10.4
References
1. M.Olinick: An Introduction to Mathematical Models in the Social and
Life Sciences, Addison-Wesley, Reading, MA, 1978.
2. M.R.Spiegel: Applied Diﬀerential Equations, Third Edition, Prentice-
Hall, Englewood Cliﬀs, NJ, 1981.

Chapter 11
Planetary Motion
11.1
Introduction
This application was adapted from a discussion on planetary motion in [1].
From Newton’s Law of Universal Gravitation, two objects of mass M1 and
M2 a distance r apart, are attracted towards each other with a force F
F = (GM1M2)/r2,
(11.1)
where G is the gravitational constant. Let us consider the motion of the
earth around the sun, neglecting the eﬀects of the other planets and moons.
Assume an xy coordinate system with the sun, as a point mass, at the
origin and the earth, also as a point mass, at a position with coordinates
(x, y). See Figure 11.1. Using F = ma and after some algebra we obtain the
nonlinear system of diﬀerential equations of motion
¨x = −kx/(x2 + y2)3/2,
(11.2)
¨y = −ky/(x2 + y2)3/2,
(11.3)
where k = GMs, Ms = the mass of the sun and ¨x (¨y) is the second time
derivative of x (y).
For initial conditions we place the earth at position
x = a > 0 on the x−axis moving in the positive y direction with velocity v0.
Therefore, x(0) = a, y(0) = 0, ˙x(0) = 0, ˙y(0) = v0 at t = 0. Let x(t) and
y(t) be solutions to the above system of diﬀerential equations.
11.2
Parameters
We will measure mass in kilograms, time in seconds, force in newtons and dis-
tance in meters (or km = kilometers). Then [1] G is 6.6720(10)−11 Nm2/kg2.
However, it is the mass of the sun that is fuzzy. Figures for Ms give around
75

76
CHAPTER 11. PLANETARY MOTION
-
6
x
y
{
u

















Sun
Earth
θ
Fsin(θ)
Fcos(θ)
F
x
y
r







Figure 11.1: Diagram for the Earth’s Orbit
1.99(10)30 kg. But through nuclear fusion it is destroying 600 million met-
ric tons of hydrogen each second [2]. Also, estimates of Ms are all through
indirect calculations since we can not put it on a scale. For the mass of the
sun we will take the fuzzy estimator M s = (1.989/1.991/1.993)(10)30 kg. We
will assume that the value of G is crisp and given above.
Next we need to ﬁnd the value of a and v0. We know that the orbit of
the earth around the sun is an ellipse with the sun at a focal point. We put
the sun at the origin so the second focal point will be on the negative x axis.
The closest the earth comes to the sun will be at the point (a, 0), called the
perihelion, is approximately 149.577(10)6 km [1]. We will use a triangular
fuzzy number estimator a = (140/150/160)106 km for the perihelion of earth.
We may derive an expression for v0 as [1]
v0 =

GMs(1 + ϵ)/a,
(11.4)
where ϵ = eccentricity of earth’s orbit known to be 0.0167.
Using the
known crisp/fuzzy values in this equation we may produce fuzzy values for
v0 km/sec. The values for all the parameters in this model are shown in
Table 11.1. We will assume that the triangular fuzzy numbers for M s and a
were all obtained from experts (Chapter 3) but v0 is computed from equation
(11.4) and k was computed from GM s.
Let z(t) = (x(t), y(t)). We are now interested in the graph of z(t) showing
the path of the earth around the sun. Using fuzzy parameters the system
becomes a continuous fuzzy system whose trajectories z(t) are fuzzy so that
any slice through a trajectory at some time tz is a fuzzy number. We wish
to estimate the band of uncertainty which is z(t)[0], or the α = 0 cuts.

11.3. SIMULATION
77
Parameter
Fuzzy/Crisp Value
G
6.6720(10)−11
M s
(1.989/1.991/1.993)(10)30
v0
From Equation (11.4)
a
(140/150/160)(10)6
k
= GM s
Table 11.1: Fuzzy/Crisp Parameters for the Orbit of the Earth Around the
Sun
Next we need to choose the values of the fuzzy parameters in their α =
0 cut to approximate the outer boundary of the α = 0 cut of the fuzzy
trajectory for the orbit of the earth around the sun. As discussed in Chapter
6 if ω = (ω1/ω2/ω3) is a fuzzy parameter we use ω = ω1, ω2 and ω3. We
have basically only two fuzzy sets in the system so we do this for M s and a
giving 32 = 9 curves for z(t) for a minimal approximation to z(t)[0]. Once
we choose values for Ms and a we calculate values for v0 and k as discussed
above. The fuzzy orbit is shown in Figure 11.3. The systems diagram for
Simulink is in Figure 11.2.
In Figure 11.3 the reader can determine, from consulting Section 1.5.4,
z(t) when we used for the fuzzy parameters: (1) all left end points of their
α = 0 cut; (2) all right end points of their α = 0 cut; and (3) their α = 1
values.
11.3
Simulation
Let us ﬁrst discuss Figure 11.2. The upper loop is for x(t) and the bottom
loop is for y(t). The input to “Integrate x′′(t)” is ¨x with output ˙x, which is
input to “Integrate x′(t)”, whose output will be x(t). Now x(t) goes to “XY
Graph” , also to “Divide” , and “f(u)”. “f(u)” computes ((x(t))2+((y(t))2)1.5
for input to “Divide” which computes x(t) divided by the output of “f(u)”.
Then “GainK(1)” multiplies by the constant −k for input to “Integrate
x′′(t)”.
The input to “Integrate y′′(t)” is ¨y with output ˙y for “Integrate
y′(t)” whose output is y(t). Now y goes to “XY Graph” , and also to “f(u)”,
and “Divide”. “Divide” gets y divided by the output of “f(u)”. “GainK(2)”
multiplies by constant −k. “XY Graph” graphs x versus y to show an elliptic
orbit. However, “To File” gathers all the data so we can graph all the orbits
on one coordinate system. More details on this are in Chapter 28. The initial
conditions are set inside the “Integrate” boxes. There are also other items to
set/choose, like simulation time, type of numerical integrator and step size,
which we will not discuss here (see Chapter 28).
Let z(t)[0] = [z1(t, 0), z2(t, 0)]. In Figure 11.3 the outer boundary is our
approximation to z2(t, 0) and the inner boundary is an approximation to

78
CHAPTER 11. PLANETARY MOTION
XY Graph
xy.mat
To File
1
s
Integrate y‘‘(t)
1
s
Integrate y‘(t)
1
s
Integrate x‘‘(t)
1
s
Integrate x‘(t)
−K−
GainK(2)
−K−
GainK(1)
Divide1
Divide
f(u)
(u[1]^2 + u[2]^2)^1.5
Figure 11.2: Simulink Diagram for the Earth’s Orbit
−2
−1.5
−1
−0.5
0
0.5
1
1.5
2
x 10
8
−2
−1.5
−1
−0.5
0
0.5
1
1.5
2
x 10
8
Figure 11.3: Fuzzy Trajectory for α = 0 Cut of the Earth’s Orbit

11.4. REFERENCES
79
z1(t, 0). The horizontal axis is x and the vertical axis is y. The fuzzy orbit
looks quite stable. The uncertainty band, the diﬀerence between the two
curves does not look excessive. Using our fuzzy mass of the sun and a fuzzy
perihelion does not greatly change the orbit of the earth around the sun. In
fact we get essentially three curves for the three values for a.
If all the uncertain parameters are estimated from data (Chapter 3), in-
stead of employing expert opinion, then the base of the fuzzy estimator is a
99% conﬁdence interval. Using all of these conﬁdence intervals we get z(t)[0],
so this band of uncertainty will be like 99% conﬁdence intervals for z(t).
11.4
References
1. R.L.Finney and G.B.Thomas Jr.: Calculus, Second Edition, Addison-
Wesley, Reading, Mass., 1994.
2. Solar System, Microsoft Encarta Encyclopedia, Microsoft Corporation,
1995.

Chapter 12
Human Cannon Ball
12.1
Introduction
This chapter is about the human cannon ball show at the circus. A person
is shot out of a cannon, ﬂies through the air, and lands on some net. The
trajectory is shown in Figure 12.1. This example is adapted from a simulation
problem discussed in [1]. The “Max” on the horizontal axis is the maximum
range of the human cannon ball before he/she ends up in the stands (where
the customers sit). Assume that the horizontal Max is 300 feet. The “Max”
on the vertical scale is the height of the roof where this circus will perform
and the human cannon ball’s trajectory must be below this Max line. Assume
that the vertical Max is 100 feet.
From Figure 12.1 there are two forces acting on the human cannon ball:
(1) (vector) −→
F = air resistance; and (2) w = mg the person’s weight. Let
|−→
F | = F. Using force = ma the initial system of diﬀerential equations is
m¨x = −F cos(θ),
(12.1)
m¨y = −mg −F sin(θ),
(12.2)
where ¨x and ¨y is the second derivative on time for x and y, respectively. Also,
in Figure 12.1 −→
V is the tangent vector to the curve representing velocity, the
direction of the vector −→
F is −−→
V , m is the mass of the human cannon ball,w
is the person’s weight in pounds and g = 32 ft2/sec. Now
|−→
V | = V =

( ˙x)2 + ( ˙y)2.
(12.3)
Assume that the initial velocity vector is −→
V 0 and |−→
V 0| = V0 in feet per second
and the initial angle of the cannon, with the horizontal, is θ0. Let the rest
of the initial conditions be: (1) x(0) = 0; (2) y(0) = 0; (3) ˙x(0) = V0 cos(θ0);
and (4) ˙y(0) = V0 sin(θ0). From Figure 12.1 we see that the tangent line to
the graph is assumed to make an angle θ with the horizontal.
81

82
CHAPTER 12. HUMAN CANNON BALL














V
F
?
W=mg
θ
θ
-
6
0
Max
Max
v
Figure 12.1: Human Cannon Ball Example
We may simplify the system of diﬀerential equations to
¨x = −(F/m)( ˙x/V ),
(12.4)
¨y = −g −(F/m)( ˙y/V ).
(12.5)
Now we need to make our assumptions about air resistance. The model we
will use is
F = cV β,
(12.6)
for constant c > 0 and constant β ≥1. Substituting for F in equations (12.4)
and (12.5) we obtain the ﬁnal system of nonlinear diﬀerential equations to
solve
¨x = −c
mV β−1 ˙x,
(12.7)
¨y = −g −c
mV β−1 ˙y.
(12.8)
Let x(t) solve equation (12.7) and assume y(t) solves equation (12.8). Let
z(t) = (x(t), y(t)) represent the trajectory of the human cannon ball.
12.2
Parameters
The parameters in the model are c, β, V0, w and θ0. Assume that the weight
of the human cannon ball is known exactly (165 pounds) and the initial angle
θ0 can be measured precisely (35 degrees) but the other parameter values are
fuzzy. Through expert advice (Chapter 3) we obtain triangular fuzzy number
estimators for c, β and V0. All the parameter values, fuzzy and crisp, are given
in Table 12.1. Using fuzzy parameters we get fuzzy diﬀerential equations and

12.3. FIRST SIMULATION
83
Parameter
Crisp/Fuzzy Value
w=weight
165 pounds
θ0
35 degrees
c
c = (1.5/2/2.5)
β
β = (1.0/1.2/1.4)
V0
V 0 = (125/150/175)
Table 12.1: Crisp/Fuzzy Parameters in the Human Cannon Ball Model
the solution z(t) is also fuzzy. The system now becomes a continuous fuzzy
system whose trajectories are fuzzy so that any slice through a trajectory at
some time tz is a fuzzy number. We wish to estimate the band of uncertainty
which is z(t)[0], or the α = 0 cuts.
Next we need to choose the values of the fuzzy parameters in their α =
0 cut to approximate the outer boundary of the α = 0 cut of the fuzzy
trajectory for the human cannon ball.
As discussed in Chapter 6 if ω =
(ω1/ω2/ω3) is a fuzzy parameter we use ω = ω1, ω2 and ω3. We do this for
c, β and V 0 giving 33 = 27 curves for z(t) for a minimal approximation to
z(t)[0]. This is shown in Figure 12.3. The systems diagram for Simulink is
in Figure 12.2.
In Figure 12.3 the reader can determine, from consulting Section 1.5.4,
z(t) when we used for the fuzzy parameters: (1) all left end points of their
α = 0 cut; (2) all right end points of their α = 0 cut; and (3) their α = 1
values.
12.3
First Simulation
Let us ﬁrst discuss the Simulink diagram in Figure 12.2. The top loop is for
x(t) and the lower loop is for y(t). The input to “Integrate x′′” is ¨x with
output ˙x. ˙x goes to “Integrate x′” whose output is x and it also travels to
“f(u)” and “Product of Elements1”. Once x is calculated it travels to “XY
Graph”. In the lower loop ¨y enters “Integrate y′′” with output ˙y which is
sent to “Integrate y′” and also to “f(u)” and “Product of Elements2”. The
output of “Integrate y′” is y which goes to “XY Graph”.
Now the ﬁrst
“f(u)” computes V which, together with β, go into the second “f(u)”. This
second “f(u)” computes −(V β−1)/m which gets multiplied by c in “GainC”
and sent on to both “Product of Elements”. In the top loop “Product of
Elements1” outputs ¨x and in the lower loop “Product of Elements2” outputs
¨y after subtracting g. The “XY Graph” only does one graph at a time so the
“To XY File” collects all the data so we can present all the graphs in one
coordinate system. More on this in Chapter 28. The initial values of x and y
are set inside the “Integrators”. There are also other items to set/choose, like

84
CHAPTER 12. HUMAN CANNON BALL
32
g
XY Graph
f(u)
V=(x‘^2 + y‘^2)^0.5
xy.mat
To XY File
Subtract
Product of
Elements2
Product of
Elements1
1
s
Integrate y‘‘
1
s
Integrate y‘
1
s
Integrate x‘‘
1
s
Integrate x‘
2.5
GainC
1
Constant
1.4
Beta
f(u)
−(V^(beta−1))/5.156
Figure 12.2: Simulink Diagram for the Human Cannon Ball Example
simulation time and type of numerical integrator, which we will not discuss
here (see Chapter 28).
Let z(t)[0] = [z1(t, 0), z2(t, 0)]. In Figure 12.3 connect the upper boundary
with a smooth curve which is our approximation to z2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
z1(t, 0). The horizontal axis is distance from the cannon and the vertical axis
is the distance above the ﬂoor. Since the vertical Max is 100 feet there is
a possibility that the human cannon ball will hit the roof. But, the human
cannon ball can deﬁnitely land in the stands since the horizontal Max is 300
feet. We need to redesign this act.
12.4
Second Simulation
All we change is the fuzzy initial velocity.
Now assume that V 0
=
(80/100/120) with no other changes.
There are diﬀerent settings on the
cannon so we can easily alter the initial velocity. The results are in Figure
12.4. The human cannon ball now misses the roof and does not land in the
audience.
If all the uncertain parameters are estimated from data (Chapter 3), and
not from expert advice, then the base of each fuzzy estimator is a 99% conﬁ-
dence interval. Using all of these conﬁdence intervals we get z(t)[0] , so these
bands of uncertainty will be like 99% conﬁdence intervals for z(t).

12.4. SECOND SIMULATION
85
0
50
100
150
200
250
300
350
400
0
10
20
30
40
50
60
70
80
90
100
Figure 12.3: Fuzzy Trajectory for the Human Cannon Ball Example: First
Simulation
0
50
100
150
200
250
300
350
400
0
10
20
30
40
50
60
70
80
90
100
Figure 12.4: Fuzzy Trajectory for the Human Ball Example: Second Simula-
tion

86
CHAPTER 12. HUMAN CANNON BALL
12.5
Reference
1. G.A.Korn and J.V.Wait:
Digital Continuous-System Simulation,
Prentice-Hall, Englewood Cliﬀs, NJ, 1978.

Chapter 13
Electrical Circuits
13.1
Introduction
The simple electrical network we shall study in this chapter is shown in
Figure 13.1. In this ﬁgure Ci stands for a capacitor, Ri denotes a resistor,
Li is an inductance and Ei represents an electromotive force, or some type
of alternating current input to the system. We will travel around both loops
in the circuit in a counter clockwise direction. This application was adopted
from an example in [1]. In order to get the system of diﬀerential equations
for this diagram we need to review (learn) some facts about simple electrical
networks.
Let Qi be the charge (coulombs) on capacitor Ci, i = 1, 2. The currents
Ii (amperes) shown in Figure 13.1 are related to the charges as dQi/dt = Ii
for i = 1, 2. Let us consider the loop on the left side of Figure 13.1. By
Kirchhoﬀ’s Second Law, the impressed voltage E1 must equal the sum of the
voltage drops in the loop. The voltage drop across the inductance L1 (henrys)
is L1(dI1/dt). The voltage drop across the resistance R1(ohms) is I1R1 and
the voltage drop across the capacitance C1(farads) is Q1/C1. Notice we have
I1 = I2 + I3. Then
E1 = L1 ¨Q1 + R1 ˙Q1 + (1/C1)Q1 + R3I3,
(13.1)
where ¨Q ( ˙Q) is the second (ﬁrst) derivative of Q with respect to time and
˙Q = I. Using I3 = I1 −I2 we have our ﬁrst equation
E1 = L1 ¨Q1 + R1 ˙Q1 + (1/C1)Q1 + R3( ˙Q1 −˙Q2).
(13.2)
For the loop on the right side of Figure 13.1 we have the second equation
E2 = L2 ¨Q2 + R2 ˙Q2 + (1/C2)Q2 + R3( ˙Q2 −˙Q1).
(13.3)
The initial conditions will be Qi(0) = 0, ˙Qi(0) = 0, i = 1, 2.
87

88
CHAPTER 13. ELECTRICAL CIRCUITS
L1
L2
R1
C1

"!
# 
E1
I1
R3
6
I3
C2
R2
"!
# 
E2

I2
Figure 13.1: Electrical Network
-
6
0
0
p1/2
p1
2p1
t
A1
y
Figure 13.2: Square Wave Input E1
We have a linear system of diﬀerential equations to solve for the currents
Ii, i = 1, 2, 3. We could ﬁnd the solutions which will be fairly complicated
because of what we shall use for E1 and E2. However, even using simple
solutions it can be diﬃcult to ﬁnd the boundary of the band of uncertainty,
or the boundary of Ii(t)[0]), i = 1, 2, 3, as shown in Section 6.2. So we omit
expressions for the exact solutions and will use simulation instead.
13.2
Parameters
All the parameters in these equations are assumed known and crisp, and are
given in Table 13.1. What is fuzzy in this problem are the energy sources E1
and E2 (see Figures 13.2 and 13.3). E1 will be a square wave with amplitude

13.2. PARAMETERS
89
@
@
@
@
@
@
@
@
@
@
@@
@
@
@
@
@
@
@
@
@
@
@@
-
6
−A2
0
p2
2p1
t
A2
y
Figure 13.3: Saw Tooth Input E2
Parameter
Crisp/Fuzzy Value
L1
0.25 henrys
L2
0.5 henrys
C1
0.1 farads
C2
0.3333 farads
R1
10 ohms
R2
5 ohms
R3
20 ohms
A1
A1 = (2.25/2.5/2.75)
A2
A2 = (4.5/5/5.5)
p1
p1 = (2.7/3/3.3)
p2
p2 = (1.5/2/2.5)
Table 13.1: Crisp/Fuzzy Parameter Values in the Electrical Network
A1 and period p1 and E2 is a sawtooth wave with amplitude A2 and period
p2. We will use fuzzy numbers for the amplitudes and periods and they are
given in Table 13.1. So the energy sources will be fuzzy.
Using fuzzy parameters for amplitudes and periods we get fuzzy diﬀer-
ential equations and the solutions Ii(t) are also fuzzy. The system now be-
comes a continuous fuzzy system whose trajectories are fuzzy so that any
slice through a trajectory at some time tz is a fuzzy number. We wish to
estimate the bands of uncertainty which are Ii(t)[0] , or the α = 0 cuts.
Next we need to choose the values of the fuzzy parameters in their α =
0 cut to approximate the outer boundary of the α = 0 cut of the fuzzy
trajectory for the currents. As discussed in Chapter 6 if ω = (ω1/ω2/ω3)
is a fuzzy parameter we use ω = ω1, ω2 and ω3. We do this for Ai and
pi, i = 1, 2, giving 34 = 81 curves for Ii(t), for a minimal approximation to
Ii(t)[0], i = 1, 2, 3. These are shown in Figures 13.5 - 13.7. The systems
diagram for Simulink is in Figure 13.4.

90
CHAPTER 13. ELECTRICAL CIRCUITS
Subtract1
Subtract
SquareWave
Signal
Generator
Sawtooth
20
R3
5
R2
10
R1
Pulse
Generator
1
s
Integrate Q2‘‘
1
s
Integrate Q2‘
1
s
Integrate Q1‘‘
1
s
Integrate Q1‘
I3=Q1‘−Q2‘
I3.mat
I3 File
I3
I2.mat
I2 File
I2
I1.mat
I1 File
I1
−K−
1/L2
−K−
1/L1
3
1/C2
10
1/C1
Figure 13.4: Simulink Diagram for the Electrical Network
In Figure 13.5 (13.6,13.7) the reader can determine, from consulting Sec-
tion 1.5.4, I1(t) (I2(t),I3(t)) when we used for the fuzzy parameters: (1) all
left end points of their α = 0 cut; (2) all right end points of their α = 0 cut;
and (3) their α = 1 values.
13.3
Simulation
We will ﬁrst discuss the Simulink diagram. The upper loop is for I1, the
middle gets I3 and the bottom loop computes I2. The input to “Integrate
Q1′′” is ¨Q1 with output ˙Q1 which is input to “Integrate Q1′” whose output
is Q1.
˙Q1 get multiplied by R1 before input to “Subtract”. Also Q1 gets
multiplied by
1
C1 before input to “Subtract”.
˙Q1 is also sent to “I3 = Q′
1 −
Q′
2” which calculates ˙Q1 −˙Q2 and then is multiplied by R3 before input to
“Subtract” and to “Subtract1”. The “Pulse Generator” makes the square
wave for E1 which goes to “Subtract”. “Subtract” gets multiplied by 1/L1,
and we now have ¨Q1 obtained from equation (13.2), after we ﬁrst solve that
equation for ¨Q1. Now ˙Q1 = I1 travels to a Scope called “I1” for the graphing
of this current. However, a Scope only does one graph at a time and “I1 File”
gathers all the data so that we can graph all the 81 curves on one coordinate
-5.3 amps to a maximum of around 6 amps.

13.3. SIMULATION
91
0
2
4
6
8
10
12
14
16
18
20
−0.4
−0.3
−0.2
−0.1
0
0.1
0.2
0.3
0.4
0.5
Figure 13.5: Fuzzy Trajectory for Fuzzy Current I1
system. More details on how to accomplish this is in Chapter 28. A similar
description holds for the bottom loop.
The “Signal Generator” generates
the sawtooth wave for E2 which travels to “Subtract1”. “Subtract1” gets
multiplied by 1/L2 and we have ¨Q2 from equation (13.3), after we ﬁrst solve
that equation for ¨Q2. We get I3 from ˙Q1 −˙Q2 = I1 −I2 = I3 which is sent to
Scope called “I3” and “I3 File” collects all the graphs to put into one ﬁgure.
We also see that ˙Q2 = I2 goes to Scope “I2” and “I2 File”. There are also
other items to set/choose, like using “time based” or “sample based” time
in the Ei, using “ﬁxed time” or “variable time” steps in the “Integrators”,
which we will not discuss here (see Chapter 28).
Let I1(t)[0] = [I11(t, 0), I12(t, 0)]. In Figure 13.5 connect the upper bound-
ary with a smooth curve which is our approximation to I12(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
I12(t, 0). The horizontal axis is time and the vertical axis is the current in
amps. This is quite a complicated picture. We see that I1 oscillates back
and forth between a maximum of about 4.9 amps and a minimum of approx-
imately -3.9 amps.
Let I2(t)[0] = [I21(t, 0), I22(t, 0)]. In Figure 13.6 connect the upper bound-
ary with a smooth curve which is our approximation to I21(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
I22(t, 0). The horizontal axis is time and the vertical axis is the current in
amps. Another complicated ﬁgure. I2 can oscillate from a minimum of about

92
CHAPTER 13. ELECTRICAL CIRCUITS
0
2
4
6
8
10
12
14
16
18
20
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
Figure 13.6: Fuzzy Trajectory for Fuzzy Current I2
0
2
4
6
8
10
12
14
16
18
20
−0.2
−0.15
−0.1
−0.05
0
0.05
0.1
0.15
0.2
0.25
Figure 13.7: Fuzzy Trajectory for Fuzzy Current I3

13.4. REFERENCES
93
Let I3(t)[0] = [I31(t, 0), I32(t, 0)]. In Figure 13.7 connect the upper bound-
ary with a smooth curve which is our approximation to I31(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
I32(t, 0). The horizontal axis is time and the vertical axis is the current in
amps. I3 may vary between approximately -0.175 amps to 0.2 amps.
Fuzzy energy inputs produces complicated and very fuzzy currents.
If all the uncertain parameters are estimated from data (Chapter 3), and
not employing expert opinion, then the base of the fuzzy estimator is a 99%
conﬁdence interval. Using all of these conﬁdence intervals we get Ii(t)[0],
i = 1, 2, 3 , so these bands of uncertainty will be like 99% conﬁdence intervals
for the Ii(t), i = 1, 2, 3.
13.4
Reference
1. W.Kaplan: Ordinary Diﬀerential Equations, Addison-Wesley, Reading,
Mass., 1962.

Chapter 14
Hawks, Doves and
Law-Abiders
14.1
Introduction
This example is adopted from [1] where the author attributes the example to
[2] where that author tried “to develop a formal model of the Hobbesian state
of nature from the perspective of bioeconomics”. In [2] the author deﬁnes
Hobbes’ state of nature as a society whose members are competing with each
other to obtain resources. All resources belong to someone so conﬂicts arise
between the resource owners and those who want the resource.
The author
divides the members of society into three groups according to their strategies:
the hawk; the dove; and the law-abiding citizen. We have the deﬁnitions:
1. the dove never tries to get others’ possessions. He waits until they give
up their resource and he himself abandons his resource if attacked. If
two doves compete for the same resource one gets it with equal proba-
bility.
2. the hawk always tries to get others’ resources by means of aggression
and gives up his resources only if seriously injured.
3. the law-abider never tries to get others’ resources. He waits until they
give up their resources. He defends his resources and losses them only
if defeated.
Let x(t) (y(t), z(t)) denote the proportion of doves (hawks, law-abiders)
in the society at time t. So, x(t), y(t) and z(t) all belong to [0, 1] with sum
one. After a lot of discussion and calculations [1] ﬁnally ends up with the
following system of nonlinear diﬀerential equations to solve
˙x = 4x2 −4x + 9xy −13x2y,
(14.1)
95

96
CHAPTER 14. HAWKS, DOVES AND LAW-ABIDERS
Initial Condition
First Simulation
Second Simulation
Third Simulation
x(0) = Doves
(0.01/0.05/0.09)
(0.494/0.499/0.504)
(0.97/0.98/0.99)
y(0) = Hawks
(0.91/0.95/0.99)
(0.494/0.499/0.504)
(0.005/0.015/0.025)
z(0) = Abiders
0
0.002
0.005
Table 14.1: Fuzzy/Crisp Initial Conditions
˙y = 2.5y2 −2.5y + 10.5xy −13xy2,
(14.2)
z = 1 −x −y.
(14.3)
The initial conditions are x(0) = x0, y(0) = y0 and z(0) = z0 = 1 −x0 −y0.
The notation ˙x is the time derivative of x(t), etc. We will not go through all
the details of deriving these diﬀerential equations but instead refer the reader
to [1] for more information.
14.2
Parameters
We will accept all the crisp parameter values in the system of diﬀerential
equations (none of them will be fuzzy), but the initial conditions are uncertain
and will be fuzzy. Let us use for our ﬁrst simulation triangular fuzzy numbers
y(0) = (0.91/0.95/0.99), x(0) = 1 −y(0) = (0.01/0.05/0.09) and z(0) =
0 (crisp zero).
Table 14.1 has the fuzzy initial conditions for the various
simulations. In all cases z(0) will be crisp and not fuzzy. Using fuzzy initial
conditions we get fuzzy diﬀerential equations and the solutions x(t), y(t) and
z(t) will also be fuzzy. The system now becomes a continuous fuzzy system
whose trajectories are fuzzy so that any slice through a trajectory at some
time tz is a fuzzy number. We wish to estimate the band of uncertainty which
is x(t)[0], y(t)[0] and z(t)[0], or the α = 0 cuts.
Next we need to choose the values of the fuzzy parameters in their α = 0
cut to approximate the outer boundary of the α = 0 cut of the fuzzy trajec-
tory for the doves, hawks and the law-abiders. As discussed in Chapter 6 if
ω = (ω1/ω2/ω3) is a fuzzy parameter we usually use ω = ω1, ω2 and ω3. We
would do this for x0, y0 and z0 giving 32 = 9 curves for x(t), y(t) and z(t)
for a minimal approximation to x(t)[0], y(t)[0] and z(t)[0]. However, we can
not do it this way in this chapter because we will honor the hard (crisp) con-
straint that the sum of x, y and z always equals one. Consider the ﬁrst sim-
ulation. We will choose x0 = 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09
with corresponding y0 = 0.99, 0.98, 0.97, 0.96, 0.95, 0.94, 0.93, 0.92, 0.91 and
z0
= 0.
In the ﬁrst simulation x0 + y0
= 1, z0
= 0, with x0
∈
[0.01, 0.09] and y0 ∈[0.91, 0.99].
In the second simulation we choose
x0 = 0.494, 0.495, 0.496, 0.497, 0.498, 0.499, 0.500, 0.501, 0.502,
0.503, 0.504 and the corresponding y0 = 0.998 −x0 so that x0 + y0 + z0 = 1.
The the last simulation let x0 = 0.97, 0.975, 0.98, 0.985, 0.99 with y0 =

14.3. FIRST SIMULATION
97
u[1]*u[2]
xy
Law−Abiders
1
s
Integrate y‘
1
s
Integrate x‘
Hawks.mat
Hawks File
Hawks
−K−
Gain3
−K−
Gain2
9
Gain1
−4
Gain
Doves.mat
Doves File
Doves
Add1
Add
Abiders.mat
Abiders File
4*u^2
4*x^2
2.5*u^2
2.5*y^2
f(u)
1−x−y
f(u)
−13*x*(y^2)
f(u)
−13*(x^2)*y
Figure 14.1: Simulink Diagram for the Hawks, Doves and Law-Abiders Ex-
ample
0.995 −x0 and we get the sum always one again.
So the ﬁgures for the
three cases will have 9,11 and 5 graphs. More details on putting multiple
graphs on one coordinate system is in Chapter 28. The fuzzy graphs in the
ﬁrst simulation are in Figures 14.2 - 14.3. No graph for z(t) is needed in the
ﬁrst simulation because it is always zero. The systems diagram for Simulink
is in Figure 14.1. The other simulations are in Figures 14.4 - 14.9.
In Figures 14.2-14.9 the reader can determine, from consulting Section
1.5.4, x(t) (y(t),z(t)) when we used for the fuzzy parameters: (1) all left end
points of their α = 0 cut; (2) all right end points of their α = 0 cut; and (3)
their α = 1 values.
14.3
First Simulation
We ﬁrst discuss Simulink in Figure 14.1. You can see that the top loop is
for the doves (x(t)), the middle computes the hawks (y(t)), and the bottom
determines the law-abiders (z(t)). “Integrate x′ ” gets x(t) from ˙x. “Add”
computes the right side of equation (14.1). So x(t) goes to “Gain” to be

98
CHAPTER 14. HAWKS, DOVES AND LAW-ABIDERS
0
2
4
6
8
10
12
14
16
18
20
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
Figure 14.2: Fuzzy Trajectory for Doves x(t)[0] in the 1st Simulation
multiplied by −4, and also travels to the box that ﬁnds 4x2, with both input
to “Add”. x(t) also goes to three boxes that compute −13x2y for input to
“Add”, xy to be multiplied by 9 in “Gain1” and −13xy2 for input to “Add1”.
The Scope called “doves” is to graph x(t) and the “Doves File” collects all
the data so that all the graphs can be presented on one coordinate system.
The details for the hawks (y(t)) should now be clear. The box at the bottom
right gets z = 1 −x −y for the law-abiders to be graphed in the scope
called “Law-Abiders”. The “Abiders File” is for all the graphs in a single
coordinate system. More details on how this is done is in Chapter 28. There
are also other items to set/choose, like simulation time and type of numerical
integrator, etc. which we do not discuss in detail here (see Chapter 28).
It appears, from many simulations, that: (1) If x0 = 0, then x(t) = 0 all t
and the same is true for y0 and z0; and (2) if z0 > 0, then x(t) →0, y(t) →0,
z(t) →1 as t →∞. These results may not show for all curves in the third
simulation because 0 ≤t ≤20.
Let x(t)[0] = [x1(t, 0), x2(t, 0)] for the doves. In Figure 14.2 connect the
upper boundary with a smooth curve which is our approximation to x2(t, 0)
and connect the lower boundary with a smooth curve producing an approx-
imation to x1(t, 0). The horizontal axis is time and the vertical axis is the
percent (after multiplying by 100) of doves. We get steady state (horizontal
curves) with limt→∞xi(t, 0) ≈0.0.38 for i = 1, 2. There is no uncertainty in
this result.

14.4. SECOND SIMULATION
99
0
2
4
6
8
10
12
14
16
18
20
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
Figure 14.3: Fuzzy Trajectory for Hawks y(t)[0] in the 1st Simulation
Let y(t)[0] = [y1(t, 0), y2(t, 0)] for the hawks.
In Figure 14.3 connect
the upper boundary with a smooth curve which is our approximation to
y2(t, 0) and connect the lower boundary with a smooth curve producing an
approximation to y1(t, 0). The horizontal axis is time and the vertical axis
is the percent (after multiplying by 100) of hawks.
We get steady state
(horizontal curves) with limt→∞yi(t, 0) ≈0.62 for i = 1, 2. Again, there is
no uncertainty in this result.
There is no graph for the law-abiders because z(t) = 0 for t ≥0.
14.4
Second Simulation
Now we use the fuzzy initial conditions under “Second Simulation” in Table
14.1.
Let x(t)[0] = [x1(t, 0), x2(t, 0)] for the doves.
In Figure 14.4 connect
the upper boundary with a smooth curve which is our approximation to
x2(t, 0) and connect the lower boundary with a smooth curve producing an
approximation to x1(t, 0). The horizontal axis is time and the vertical axis
is the percent of doves (after multiplying by 100). We see that x(t) begins
at ≈0.50, then decreases rapidly to around 0.39 where it stays until time
unit ≈160 when it immediately goes to zero. There is no uncertainty in this
result. The uncertainty band is zero. This follows from very little uncertainty

100
CHAPTER 14. HAWKS, DOVES AND LAW-ABIDERS
0
20
40
60
80
100
120
140
160
180
200
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
Figure 14.4: Fuzzy Trajectory for Doves x(t)[0] in the 2nd Simulation
in the initial conditions.
Let y(t)[0] = [y1(t, 0), y2(t, 0)] for the hawks.
In Figure 14.5 connect
the upper boundary with a smooth curve which is our approximation to
y2(t, 0) and connect the lower boundary with a smooth curve producing an
approximation to y1(t, 0). The horizontal axis is time and the vertical axis
is the percent of hawks (after multiplying by 100). We see that y(t) begins
at ≈0.50, then increases rapidly to around 0.61 where it stays until time
unit ≈160 when it immediately goes to zero. There is no uncertainty in this
result. The uncertainty band is zero. This follows from very little uncertainty
in the initial conditions.
Let z(t)[0] = [z1(t, 0), z2(t, 0)] for the law-abiders. In Figure 14.5 connect
the upper boundary with a smooth curve which is our approximation to
z2(t, 0) and connect the lower boundary with a smooth curve producing an
approximation to z1(t, 0). The horizontal axis is time and the vertical axis
is the percent of hawks (after multiplying by 100). We see that z(t) begins
at ≈0, then starts to increase slowly until around t = 160 when it increases
rapidly to 1.00. There is no uncertainty is this result. The uncertainty band
is zero. This follows from very little uncertainty in the initial conditions.

14.4. SECOND SIMULATION
101
0
20
40
60
80
100
120
140
160
180
200
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
Figure 14.5: Fuzzy Trajectory for Hawks y(t)[0] in the 2nd Simulation
0
20
40
60
80
100
120
140
160
180
200
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
Figure 14.6: Fuzzy Trajectory for Law-Abiders z(t)[0] in the 2nd Simulation

102
CHAPTER 14. HAWKS, DOVES AND LAW-ABIDERS
0
2
4
6
8
10
12
14
16
18
20
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
Figure 14.7: Fuzzy Trajectory for Doves x(t)[0] in the 3rd Simulation
14.5
Third Simulation
Lastly, we use the initial conditions under “Third Simulation” in Table 14.1.
Let x(t)[0] = [x1(t, 0), x2(t, 0)] for the doves.
In Figure 14.7 connect
the upper boundary with a smooth curve which is our approximation to
x2(t, 0) and connect the lower boundary with a smooth curve producing an
approximation to x1(t, 0). The horizontal axis is time and the vertical axis
is the percent of doves (after multiplying by 100). We see that x(t) begins at
≈0.98, then decreases to approximately 0.39 followed by decreasing to zero.
There is little uncertainty in this result until the end when it goes to zero.
Let y(t)[0] = [y1(t, 0), y2(t, 0)] for the hawks.
In Figure 14.8 connect
the upper boundary with a smooth curve which is our approximation to
y2(t, 0) and connect the lower boundary with a smooth curve producing an
approximation to y1(t, 0). The horizontal axis is time and the vertical axis is
the percent of hawks (after multiplying by 100). We see that y(t) begins at
≈0.015, then increases rapidly to around 0.61 where it stays until it decreases
to zero. There is little uncertainty in this result until it is time to go to zero.
Let z(t)[0] = [z1(t, 0), z2(t, 0)] for the law-abiders. In Figure 14.9 connect
the upper boundary with a smooth curve which is our approximation to
z2(t, 0) and connect the lower boundary with a smooth curve producing an
approximation to z1(t, 0). The horizontal axis is time and the vertical axis is
the percent of hawks (after multiplying by 100). We see that z(t) begins at

14.5. THIRD SIMULATION
103
0
2
4
6
8
10
12
14
16
18
20
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
Figure 14.8: Fuzzy Trajectory for Hawks y(t)[0] in the 3rd Simulation
0
2
4
6
8
10
12
14
16
18
20
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
Figure 14.9: Fuzzy Trajectory for Law-Abiders z(t)[0] in the 3rd Simulation

104
CHAPTER 14. HAWKS, DOVES AND LAW-ABIDERS
≈0, then starts to increase slowly until it increases rapidly to 1.00. There is
little uncertainty is this result until it goes to one.
14.6
Summary
We see quite diﬀerent results in the three simulations showing that this fuzzy
system is very sensitive to its fuzzy initial conditions.
If all the uncertain parameters are estimated from data (Chapter 3), and
not using expert advice, then the base of the fuzzy estimator is a 99% conﬁ-
dence interval. Using all of these conﬁdence intervals we get x(t)[0], y(t)[0]
and z(t)[0] so these bands of uncertainty will be like 99% conﬁdence intervals
for x(t), y(t) and z(t), respectively.
14.7
References
1. N.Gilbert and K.G.Troitzsch: Simulation for the Social Scientist, Open
University Press, Philadelphia, PA, 2003.
2. J.C.Martinez Coll: A Bioeconomic Model of Hobbes’ “State of Nature”,
Social Science Information, 25(1986)493-505.

Chapter 15
Suspension System
15.1
Introduction
This application is modeled after an example in [1]. It has to do with the
design of a suspension system for a car. Figure 15.1 contains the information
for this problem. The units will be force in newtons (N), time in seconds (s),
distance in meters (m) and mass in kilograms (kg). M1 is 25% the mass of the
car and M2 is the mass of one half of an axle plus a tire. k1 is the car spring
constant (N/m) and f is the shock absorber damping constant (Ns/m).
Also k2 is the tire spring constant (N/m). The car’s vertical displacement is
measured by x and the tire’s vertical displacement is measured by y. The car
moves along smoothly (x = y = 0) until the tire hits a “bump” in the road.
This bump could be caused by crossing a train track at a rail crossing, or by
a rock in the road. The vertical displacement of the tire due to the bump at
time zero is measured by the constant z. We now may derive the following
system of linear diﬀerential equations [1]
M1¨x = −f( ˙x −˙y) −k1(x −y),
(15.1)
M2¨y = f( ˙x −˙y) + k1(x −y) + k2(z −y),
(15.2)
where ¨x (¨y) is the second derivative of x (y) with respect to time and ˙x ( ˙y)
is the ﬁrst derivative of x (y) with respect to time. The initial conditions
are x(0) = 0, y(0) = z, ˙x(0) = 0 and ˙y(0) = 0. These are linear diﬀerential
equations so we could easily ﬁnd the solutions. However, even using simple
solutions it can be complicated to ﬁnd the boundary of the band of uncer-
tainty, or the boundary of x(t)[0] and y(t)[0], as shown in Section 6.2. So we
omit expressions for the exact solutions and will use simulation instead.
105

106
CHAPTER 15. SUSPENSION SYSTEM
1
2axle+tire(M2)
k2
1
4car(M1)
f
k1
6
Rock
z
6
y
6
x
Figure 15.1: Diagram of Suspension System
15.2
Parameters
The parameters are M1, M2 f, k1, k2, z and the initial values. We will assume
that the values of M1, M2, z and the initial values are all known precisely and
will be crisp (not fuzzy). However spring constants and damping constants
are always diﬃcult to measure exactly so their values will be fuzzy. Employing
expert advice (Chapter 3) we obtain triangular fuzzy numbers for k1, k2 and f
and all the parameter values are given in Table 15.1. Using fuzzy parameters
we get fuzzy diﬀerential equations and the solutions x(t) and y(t) are also
fuzzy. The system now becomes a continuous fuzzy system whose trajectories
are fuzzy so that any slice through a trajectory at some time tz is a fuzzy
number. We wish to estimate the band of uncertainty which is x(t)[0] and
y(t)[0], or the α = 0 cuts.
Next we need to choose the values of the fuzzy parameters in their α = 0
cut to approximate the outer boundary of the α = 0 cut of the fuzzy trajec-
tory for the car and the tire. As discussed in Chapter 6 if ω = (ω1/ω2/ω3)
is a fuzzy parameter we use ω = ω1, ω2 and ω3. We do this for f, k1 and k2
giving 33 = 27 curves for x(t) and 27 graphs for y(t) for a minimal approxi-
mation to x(t)[0] and y(t)[0]. These are shown in Figures 15.3 and 15.4. The
systems diagram for Simulink is in Figure 15.2.
In Figure 15.3 (15.4) the reader can determine, from consulting Section

15.3. SIMULATION
107
Parameter
Fuzzy/Crisp Value
M1
500 kg
M1
20 kg
f
(2000/2250/2500) Ns/m
k1
(7000/7500/8000) N/m
k2
(140000/150000/160000) N/m
z
0.05 m
x(0)
0
y(0)
z
˙x(0)
0
˙y(0)
0
Table 15.1: Fuzzy/Crisp Parameter Values in the Suspension System Exam-
ple
1.5.4, x(t) (y(t)) when we used for the fuzzy parameters: (1) all left end
points of their α = 0 cut; (2) all right end points of their α = 0 cut; and (3)
their α = 1 values.
15.3
Simulation
Let us ﬁrst explain the Simulink network in Figure 15.2. The top loop is
for the car (x(t)) and the bottom loop is for the tire (y(t)). The input to
“Integrate x′′ ” is ¨x from equation (15.1) with output ˙x. The output ˙x goes
to the box “x′ −y′”, whose output gets multiplied by constant f for input
to “Add” and “Add1”, and the output also travels to “Integrate x′ ” whose
output is x(t). x(t) moves to the box “x-y” whose output is multiplied by
the constant k1 for input to “Add” and “Add1”. x(t) is also sent to “Scope
Car” for its graph but “Car File” collects all the data on all the graphs to
construct one ﬁgure containing all graphs. More information on how this is
done is in Chapter 28. The output from “Add” (“Add1”) is multiplied by
1/M1 (1/M2) for input to “Integrate x′′ ” (“Integrate y′′ ”). The bottom of
the ﬁgure is for the input of the constant z. z is sent to the box “z-y” whose
output gets multiplied by constant k2 for input to “Add1”. It should now
be clear how we compute y(t). There are also other items to set/choose, like
type of numerical integrator and step sizes, which we will not discuss here
(see Chapter 28).
Let x(t)[0] = [x1(t, 0), x2(t, 0)]. In Figure 15.3 connect the upper bound-
ary with a smooth curve which is our approximation to x2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
x1(t, 0). The horizontal axis is time and the vertical axis is the displace-
ment of the car from equilibrium. There is very little uncertainty since the

108
CHAPTER 15. SUSPENSION SYSTEM
u[1] − u[2]
z−y
u[1] − u[2]
x‘−y‘
u[1] − u[2]
x−y
−K−
k2
−K−
k1
−K−
f
Tire.mat
Tire File
Scope Tire
Scope Car
1
s
Integrate y‘‘
1
s
Integrate y‘
1
s
Integrate x‘‘
1
s
Integrate x‘
0.05
Constant z
Car.mat
Car File
Add1
Add
−K−
1/M2
−K−
1/M1
Figure 15.2: Simulink Diagram for the Suspension System Example
0
0.5
1
1.5
2
2.5
3
0
0.01
0.02
0.03
0.04
0.05
0.06
Figure 15.3: Fuzzy Trajectory for the Car x(t)[0] in the Suspension System
Example

15.3. SIMULATION
109
0
0.5
1
1.5
2
2.5
3
0.047
0.0475
0.048
0.0485
0.049
0.0495
0.05
0.0505
0.051
0.0515
Figure 15.4: Fuzzy Trajectory for the Tire y(t)[0] in the Suspension System
Example
uncertainty band is so narrow. The car gets displaced slightly more than
the z value and then converges back to z = 0.05. The car shows very little
oscillation, which shows the suspension system is doing a good job.
Let y(t)[0] = [y1(t, 0), y2(t, 0)]. In Figure 15.4 connect the upper boundary
with a smooth curve which is our approximation to y2(t, 0) and connect the
lower boundary with a smooth curve producing an approximation to y1(t, 0).
The horizontal axis is time and the vertical axis is the displacement of the
tire from equilibrium.
Again, there is very little uncertainty because the
uncertainty band is extremely narrow. The tire very quickly oscillates from
0.05 to ≈0.0475 to ≈0.055 and then converges to the z value of 0.05. This
suspension system is doing a very good job.

110
CHAPTER 15. SUSPENSION SYSTEM
15.4
Reference
1. D.Matko, B.Zupancic and R.Karba: Simulation and Modelling of Con-
tinuous Systems, Prentice Hall, Englewood Cliﬀs, NJ, 1992.

Chapter 16
Chemical Reactions
16.1
Introduction
This application is about the Belousov-Zhabotinskii (BZ) chemical reaction
([1],[2]).
It has to do with an oscillating chemical reaction discovered by
Belousov in 1951 and the study of this reaction was continued by Zhabotinskii
in 1964. It is an important result about chemical reactions and is considered
the prototype of oscillating reactions. The system involves ﬁve chemicals.
A system of nonlinear diﬀerential equations governing the evolution of the
system for three of the chemicals is
˙x = a1y −a2xy + a3x(1 −x),
(16.1)
˙y = −b1y −b2xy + b3z,
(16.2)
˙z = x −z,
(16.3)
where the ai and the bi are constants and the notation ˙x ( ˙y, ˙z) represents the
time derivative of x (y,z). The initial conditions are x(0) = x0, y(0) = y0 and
z(0) = z0. All the constants are positive. x(t) (y(t), z(t)) is the concentration
of one of the chemicals at time t. Two chemicals have been omitted because it
is assumed that one of them has its concentration held ﬁxed (so its derivative
is zero) and the other chemical was considered not important and deleted
from the model [1].
The derivation of these diﬀerential equations follows
from: (1) the chemical models of the reactions (there are ﬁve of them); (2)
the law of mass action [3]; and (3) the discussion in ([1],[2]). We will omit
the details of the derivation.
16.2
Parameters
The constants ai, i = 1, 2, 3 and b1, b2 will be assumed to be crisp and known.
They depend on rate of reaction constants and the constant concentration
111

112
CHAPTER 16. CHEMICAL REACTIONS
Parameter
Fuzzy/Crisp Value
a1
0.5
a2
100
a3
100
b1
0.015
b2
3
b3
b3 = (1.4/1.8/2.2)
x0
0.5
y0
0.1
z0
0.4
Table 16.1: Fuzzy/Crisp Parameter Values in the Chemical Reaction Exam-
ple
of one of the omitted chemicals, all assumed known. However, constant b3
depends on a constant f, called a stoichiometric factor (dealing with the
laws of deﬁnite proportions and of the conservation of mass and energy with
respect to chemical activity), and its value is uncertain and important to
the evolution of the system.
Therefore, we will take f, and hence b3, as
a triangular fuzzy number obtained from expert opinion (Chapter 3). The
values of all the parameters, including those for the initial conditions, are
shown in Table 16.1.
Even with only one fuzzy parameter, the system becomes a system of
fuzzy diﬀerential equations.
The solutions will be fuzzy trajectories x(t),
y(t) and z(t). A slice through a fuzzy trajectory at any ﬁxed value of t gives
a fuzzy number. We want to estimate the band of uncertainty which is the
graph of the bases of these fuzzy numbers. That is, the graphs of x(t)[0],
y(t)[0] and z(t)[0].
Next we need to choose the values of the fuzzy parameters in their α =
0 cut to approximate the outer boundary of the α = 0 cut of the fuzzy
trajectory for x, y and z.
As discussed in Chapter 6 if ω = (ω1/ω2/ω3)
is a fuzzy parameter we use ω = ω1, ω2 and ω3. If we do this for b3 we
will have only three curves because only one parameter is fuzzy. Since we
have just b3 fuzzy let us use the following spread of values in the α = 0
cut: b3 = 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2. This will give us 9 curves for
a minimal approximation to x(t)[0], y(t)[0] and z(t)[0]. These are shown in
Figures 16.2 - 16.4. The systems diagram for Simulink is in Figure 16.1.
In Figure 16.2 (16.3,16.4) the reader can determine, from consulting Sec-
tion 1.5.4, x(t) (y(t),z(t)) when we used for the fuzzy parameter b3: (1) the
left end point of its α = 0 cut; (2) the right end point of its α = 0 cut; and
(3) its α = 1 value.

16.3. SIMULATION
113
z.mat
z File
y.mat
y File
xy
x−z
u[1]*(1−u[1])
x(1−x)
x.mat
x File
compute y‘
compute x‘
1.8
b3
3
b2
−K−
b1
100
a3
100
a2
0.5
a1
Scope z
Scope y
Scope x
1
s
Integrate z‘
1
s
Integrate y‘
1
s
Integrate x‘
Figure 16.1: Simulink Diagram for the Chemical Reaction Example
16.3
Simulation
We ﬁrst discuss the Simulink diagram in Figure 16.1. The top loop is for x(t),
the middle loop calculates y(t) and the bottom loop gets z(t). The input to
“Integrate x′ ” is the right side of equation (16.1) with output x(t). Now x(t)
goes to the box “x(1 −x)” and “Gain a3 ” which computes a3x(1 −x). x(t)
also travels to the box labeled “xy” and “Gain a2” (“Gain b2”) to get a2xy
(b2xy) for “compute x′ ” (“compute y′ ”). x(t) is also sent to the box “x-z”
for input to “Integrate z′ ” and to “Scope x” for its graph. However, the box
labeled “x File” collects all the data on the graphs for one ﬁgure containing
the nine graphs. More information on how this is done is in Chapter 28. It
should now be clear how Simulink obtains y(t). There are also other items to
set/choose, like relative/absolute tolerance and type of numerical integrator,
which we will not discuss here (see Chapter 28).
Let x(t)[0] = [x1(t, 0), x2(t, 0)]. In Figure 16.2 connect the upper bound-
ary with a smooth curve which is our approximation to x2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
x1(t, 0). The horizontal axis is time and the vertical axis is the concentration
of chemical x(t). There appears to be two types of behavior: oscillatory and
steady state.
The horizontal graphs indicate the steady state result.
So,
uncertainty in the value of b3 can produce dynamically diﬀerent outcomes.

114
CHAPTER 16. CHEMICAL REACTIONS
0
2
4
6
8
10
12
14
16
18
20
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
Figure 16.2: Fuzzy Trajectory for x(t)[0] in Chemical Reaction Example
0
2
4
6
8
10
12
14
16
18
20
0
0.2
0.4
0.6
0.8
1
1.2
1.4
1.6
Figure 16.3: Fuzzy Trajectory for y(t)[0] in Chemical Reaction Example

16.3. SIMULATION
115
0
2
4
6
8
10
12
14
16
18
20
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
Figure 16.4: Fuzzy Trajectory for z(t)[0] in Chemical Reaction Example
Let y(t)[0] = [y1(t, 0), y2(t, 0)]. In Figure 16.3 connect the upper boundary
with a smooth curve which is our approximation to y2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
y1(t, 0). The horizontal axis is time and the vertical axis is the concentration
of chemical y(t). Again, it looks like we can obtain oscillatory or steady state
behavior depending on the value of b3.
Let z(t)[0] = [z1(t, 0), z2(t, 0)]. In Figure 16.4 connect the upper boundary
with a smooth curve which is our approximation to z2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
z1(t, 0). The horizontal axis is time and the vertical axis is the concentration
of chemical z(t). It is no surprise after Figures 16.2 and 16.3 that varying b3
gives oscillation or steady state.
In practice in order to be able to predict the outcome we will need to have
a more accurate estimate for b3. We should point out that as t →∞some
of the oscillations die out and the graphs go horizontal but for b3 = 2.2 the
periodic motion of x(t), y(t) and z(t) remain.
If all the uncertain parameters are estimated from data (Chapter 3), in-
stead of using expert opinion, then the base of the fuzzy estimator is a 99%
conﬁdence interval.
Using all of these conﬁdence intervals we get x(t)[0],
y(t)[0] and z(t)[0], so these bands of uncertainty will be like 99% conﬁdence
intervals for x(t), y(t) and z(t), respectively.

116
CHAPTER 16. CHEMICAL REACTIONS
16.4
References
1. J.D.Murry: Mathematical Biology, Springer-Verlag, Heidelberg, Ger-
many, 1989.
2. S.H.Strogatz: Nonlinear Dynamics and Chaos, Addison-Wesley, Read-
ing, MA., 1994.
3. D.G.Zill: A First Course in Diﬀerential Equations, Brooks/Cole, Paciﬁc
Grove, CA, 1997.

Chapter 17
The AIDS Epidemic
17.1
Introduction
This application is adapted from a model presented in [1]. The ﬂow of people
through the system is shown in Figure 17.1. The general population is all
homosexual males in some geographical area (the US, western Europe, In-
dia,...). There is a constant immigration rate k1 of susceptible males into the
population of size N(t). In this model the size of the population N(t) can
change in time, as compared to the Infectious Disease Model in Chapter 10,
where the population size was ﬁxed. In Figure 17.1: (1) X(t) = number of
susceptible males in the population; (2) Y (t) = number of males infected with
the HIV virus; (3) A(t) = number of men with AIDS; and (4) Z(t) = number
infected with the virus but are non-infectious. The constants ki, i = 1, 2, ..., 5
are all (positive) rates and time will be measured in years. People in X can
go to ND = natural death with rate k2, or to Y with rate k3 times constant
a = number of diﬀerent sexual partners per year. Once in Y a man can go
to ND with rate k2, or to Z or A. Let b be the proportion of those infected
with the virus who end up with AIDS. If k4 is the rate for going from Y to
A then we use bk4 from Y to A and (1 −b)k4 from Y to Z in Figure 17.1.
Once in A a person can go to ND at rate k2 or die from AIDS DD at rate
k5. We may now present the system of linear diﬀerential equations for the
system as
˙X = k1 −k2X −ak3X,
(17.1)
˙Y = ak3X −[k4 + k2]Y,
(17.2)
˙Z = (1 −b)k4Y −k2Z,
(17.3)
˙A = bk4Y −(k2 + k5)A,
(17.4)
N(t) = X(t) + Y (t) + Z(t) + A(t).
(17.5)
The initial conditions will be A(0) = A0 = 0, Z(0) = Z0 = 0, X(0) +
Y (0) = 100, 000 with X(0) = X0 = 90, 000, Y (0) = Y0 = 10, 000.
We
117

118
CHAPTER 17. THE AIDS EPIDEMIC
A=AIDS
?
ND
k2
?
DD
k5
Z
?
ND
k2
Y=HIV







HHHHHH
j
-ND
k2
bk4
X
?
-
?
k1
ND
k2
ak3
(1 −b)k4
Figure 17.1: Diagram for the AIDS Epidemic
are primarily interested in the solutions for A(t) and Z(t). These are linear
diﬀerential equations so we could easily ﬁnd the solutions. However, even
using simple solutions it can be complicated to ﬁnd the boundary of the band
of uncertainty, or the boundary of A(t)[0] and Z(t)[0], as shown in Section
6.2. So we omit expressions for the exact solutions and will use simulation
instead.
17.2
Parameters
There are seven parameters ki, i = 1, 2, 3, 4, 5, a and b in the model and all
needed to be estimated from data. We assume that all the initial conditions
are known and crisp. The fuzzy rates for ki, i = 1, ..., 5, might be estimated
as in Section 3.4, a will be a fuzzy integer, and fuzzy b could be estimated
as in Section 3.5. However, as in Chapter 6 we use three values for all the
ki, three values for b and ﬁve for a (see below), we would have 365 = 3645
graphs for A(t) and for Z(t). Too many graphs to place on one coordinate
system. So we must make a compromise. We will assume that all the rates ki,
i = 1, ..., 5 are known precisely and are crisp (not fuzzy), the initial conditions
are also crisp but the two parameters a and b are to be estimated and are
therefore fuzzy. Experts are asked to estimate a and b (Chapter 3) and we

17.2. PARAMETERS
119
Parameter
Fuzzy/Crisp Value
k1
13, 333.30
k2
1
32
k3
0.7
k4
0.2
k5
1.0
a
a = see equation (17.6)
b
b = (0.2/0.3/0.4)
A0
0
Z0
0
X0
90, 000
Y0
10, 000
Table 17.1: Fuzzy/Crisp Parameter Values in the AIDS Epidemic
obtain a triangular fuzzy number for b but a fuzzy integer for a. The results
are given in Table 17.1. Fuzzy integers are deﬁned like discrete fuzzy sets in
Section 2.2.4. The fuzzy integer a in Table 17.1 is deﬁned on the integers 2
through 6 as
a = {0.5
2 , 0.2
3 , 0.2
4 , 0.1
5 , 0.1
6 },
(17.6)
which means that the possibility that a = 2 is 0.5, the possibility that a = 3
is 0.2, etc. The sum of the membership values need not equal one.
Using fuzzy parameters we get fuzzy diﬀerential equations and the solu-
tions A(t) and Z(t) are also fuzzy. The system now becomes a continuous
fuzzy system whose trajectories are fuzzy so that any slice through a trajec-
tory at some time tz is a fuzzy number. We wish to estimate the band of
uncertainty which is A(t)[0] and Z(t)[0], or the α = 0 cuts. We will also do
this for X(t)[0] and Y (t)[0].
Next we need to choose the values of the fuzzy parameters in their α =
0 cut to approximate the outer boundary of the α = 0 cut of the fuzzy
trajectory for A(t) and Z(t). As discussed in Chapter 6 if ω = (ω1/ω2/ω3)
is a fuzzy parameter we use ω = ω1, ω2 and ω3. We do this for b but we use
a = 2, 3, 4, 5, 6 giving 15 curves for A(t) and Z(t) for a minimal approximation
to A(t)[0] and Z(t)[0]. Now, from equations (17.1) and (17.2), X(t) and Y (t)
depend only on fuzzy a so there will be ﬁve curves for X(t) and Y (t) for a
minimal approximation to X(t)[0] and Y (t)[0]. All of these graphs are shown
in Figures 17.3-17.6. The systems diagram for Simulink is in Figure 17.2.
In Figure 17.3-17.6 the reader can determine, from consulting Section
1.5.4, A(t) (Z(t),X(t),Y (t)) when we used for the fuzzy parameters: (1) all
left end points of their α = 0 cut; (2) all right end points of their α = 0 cut;
and (3) their α = 1 values.

120
CHAPTER 17. THE AIDS EPIDEMIC
1.0
k5=disease death rate
k5*A
0.2
k4=rate of conversion to AIDs
k4*Y
0.7
k3=rate of infection
0.0313
k2=natural death rate
k2*Z
k2*Y
k2*X
k2*A
13333.30
k1=population infusion
compute Z‘
compute Y‘
compute X‘
compute A‘
b*k4*Y
0.3
b
a*k3*X
4
a
Susceptible
Pop.mat
Population File
1
s
Integrate Z‘
1
s
Integrate Y‘
1
s
Integrate X‘
1
s
Integrate A‘
HIV+ non−infectious
HIV+
HIVNI.mat
HIV Non−Infectious File
HIV.mat
HIV File
1
Constant1
1
Constant
AIDs.mat
AIDs File
AIDs
Figure 17.2: Simulink Diagram for the AIDS Epidemic
17.3
Simulation
Let us ﬁrst discuss how Simulink simulated the problem.
There are four
loops: (1) the top loop is for X(t); (2) the next loop is for Y (t); (3) the
third computes Z(t); and (4) the last loop does A(t). All loops are similar
so we will only explain the top loop for X(t). The input to “Integrate X′”
is the right side of equation (17.1) with output X(t). X(t) travels to the
box called “k2X” where it computes this value and X(t) goes to the box
“ak3X” which calculates its value. The input to “compute X′” is k1, k2X
and ak3X with output k1 −k2X −ak3X. Also, X(t) is sent to the “Scope”
called “Susceptible” to show its graph but the box “Population File” gets
the data on all the graphs to create one ﬁgure containing the graphs. More
information on how this is done is in Chapter 28. There are also other items
to set/choose, like simulation time and step size, which we will not discuss
here (see Chapter 28).
Let A(t)[0] = [a1(t, 0), a2(t, 0)]. In Figure 17.3 connect the upper bound-
ary with a smooth curve which is our approximation to a2(t, 0) and con-
nect the lower boundary with a smooth curve producing an approxima-
tion to a1(t, 0).
The horizontal axis is time and the vertical axis is the
number of men with AIDS. We get steady state (horizontal curves) with
limt→∞a2(t, 0) ≈4500 and limt→∞a1(t, 0) ≈2200. The uncertainty band,

17.3. SIMULATION
121
0
50
100
150
200
250
300
350
400
450
500
0
1000
2000
3000
4000
5000
6000
7000
Figure 17.3: Fuzzy Trajectory for AIDS A(t)[0] in the AIDS Epidemic
0
50
100
150
200
250
300
350
400
450
500
0
0.5
1
1.5
2
2.5
3 x 10
5
Figure 17.4: Fuzzy Trajectory for Non-Infectious Z(t)[0] in the AIDS Epi-
demic

122
CHAPTER 17. THE AIDS EPIDEMIC
0
50
100
150
200
250
300
350
400
450
500
0
1
2
3
4
5
6
7
8
9 x 10
4
Figure 17.5: Fuzzy Trajectory for Susceptible X(t)[0] in the AIDS Epidemic
the diﬀerence between the two curves in steady state, is approximately 2300.
This is a reasonable amount of uncertainty for those with AIDS. However, we
see that the number of men with AIDS can quickly peak at approximately
6200.
Let Z(t)[0] = [z1(t, 0), z2(t, 0)]. In Figure 17.4 connect the upper bound-
ary with a smooth curve which is our approximation to z2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
z1(t, 0). The horizontal axis is time and the vertical axis is the number of
males infected with the virus but are non-infectious. We get steady state
(horizontal curves) with limt→∞z2(t, 0) ≈280, 000 and limt→∞z1(t, 0) ≈
220, 000. The uncertainty band, the diﬀerence between the two curves in
steady state, is approximately 60, 000. This is a rather large amount of un-
certainty of those which are HIV positive but non-infectious.
Let X(t)[0] = [x1(t, 0), x2(t, 0)]. In Figure 17.5 connect the upper bound-
ary with a smooth curve which is our approximation to x2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
x1(t, 0). The horizontal axis is time and the vertical axis is the number of
susceptible males in the population.
We see that X(t) rapidly decreases
to its steady state values.
We get steady state (horizontal curves) with
limt→∞x2(t, 0) ≈10, 000 and limt→∞x1(t, 0) ≈4, 000.
The uncertainty
band, the diﬀerence between the two curves in steady state, is approximately
6, 000. This is a moderately large amount of uncertainty for those which are
susceptible.

17.3. SIMULATION
123
0
50
100
150
200
250
300
350
400
450
500
1
2
3
4
5
6
7
8
9
10 x 10
4
Figure 17.6: Fuzzy Trajectory for HIV Y (t)[0] in the AIDS Epidemic
Let Y (t)[0] = [y1(t, 0), y2(t, 0)]. In Figure 17.6 connect the upper bound-
ary with a smooth curve which is our approximation to y2(t, 0) and con-
nect the lower boundary with a smooth curve producing an approximation
to y1(t, 0).
The horizontal axis is time and the vertical axis is the num-
ber of males infected with the HIV virus. We get steady state (horizontal
curves) with limt→∞y2(t, 0) = limt→∞y1(t, 0) ≈57, 000. The uncertainty
band, the diﬀerence between the two curves in steady state, is approximately
zero. However, Y (t) may rapidly increase to approximately 90, 000 before
approaching its steady state value.
There was not a lot of uncertainty imputed to this model. We only have
two fuzzy parameters a and b. We essentially obtain three curves in Figures
17.3, 17.4 and 17.5 corresponding to the three values for parameter b.
If all the uncertain parameters are estimated from data (Chapter 3), and
none from expert opinion, then the base of the fuzzy estimator is a 99%
conﬁdence interval. Using all of these conﬁdence intervals we get A(t)[0],
Z(t)[0], X(t)[0] and Y (t)[0], so these bands of uncertainty will be like 99%
conﬁdence intervals for A(t), Z(t), X(t) and Y (t), respectively.

124
CHAPTER 17. THE AIDS EPIDEMIC
17.4
Reference
1. J.D.Murry: Mathematical Biology, Springer-Verlag, Heidelberg, Ger-
many, 1989.

Chapter 18
The Machine/Service
Queuing Model
18.1
Introduction
In this chapter we consider the classical M machine and R service person
problem from queuing theory [4]. In this model we assume there are R repair
persons available to service M machines. The calling source for the model,
all the customers who can arrive at the queuing system, are the M machines
which “arrive” for service when they break down. However, we do not bring
a broken machine to the service station, a service station consisting of one
service person travels to the broken machine to repair it. Assume that if a
machine is operating correctly, the time to break down is described by an
exponential distribution that has rate λ. Assume also that any machine that
has broken down requires the service of a single repair person and that the
service time probability distribution is exponential with the same rate µ for
each repair person and each machine.
Usually in queuing theory we investigate the behavior of the system during
“steady state”. Let pi(t) be the probability of i broken machines at time
t ≥0, for 0 ≤i ≤M. If pi = limt→∞pi(t), 0 ≤i ≤M, then the pi are
called the steady state probabilities and using the pi in calculations produces
steady state results. However, in this chapter we do not go directly to the
steady state probabilities but start with the diﬀerential equations deﬁning
the pi(t).
To simplify the discussion now assume that M = 4 and R = 2. We write
˙pi for the time derivative of pi(t). The following system of linear diﬀerential
equations has been adopted from a discussion in [5].
˙p0 = −4λp0(t) + µp1(t),
(18.1)
˙p1 = 4λp0(t) −[3λ + µ]p1(t) + 2µp2(t),
(18.2)
125

126
CHAPTER 18. THE MACHINE/SERVICE QUEUING MODEL
Parameter
Fuzzy/Crisp Value
λ
λ = (0.3/0.5/0.7)
µ
µ = (1.5/2.0/2.5)
p0(0)
1.00
p1(0)
0
p2(0)
0
p3(0)
0
p4(0)
0
Table 18.1: Fuzzy/Crisp Parameters in Machine/Service Queuing Model
˙p2 = 3λp1(t) −[2λ + 2µ]p2(t) + 2µp3(t),
(18.3)
˙p3 = 2λp2(t) −[λ + 2µ]p3(t) + 2µp4(t),
(18.4)
˙p4 = λp3(t) −2µp4(t).
(18.5)
Initial conditions are p0(0) = 1 and p1(0) = p2(0) = p3(0) = p4(0) = 0. The
solution to this system produces the pi(t), 0 ≤i ≤4. We wish to look at p0(t)
and we will also be interested in ﬁnding N(t) = p1(t)+2p2(t)+3p3(t)+4p4(t)
the expected number of broken machines in the system at time t.
These are linear diﬀerential equations so we could easily ﬁnd the solu-
tions. However, even using simple solutions it can be complicated to ﬁnd the
boundary of the band of uncertainty, or the boundary of p0(t)[0] and N(t)[0],
as shown in Section 6.2. So we omit expressions for the exact solutions and
will use simulation instead.
18.2
Parameters
The parameters λ and µ need to be estimated from data. So, from ([1]-[3],
see also Section 3.4) their estimators become fuzzy numbers which exhibit
the uncertainty in their values. Let us now use λ = (0.3/0.5/0.7) as our
fuzzy estimator of λ, or approximately one breakdown per machine every
two hours. Time is measured in hours. And let µ = (1.5/2/2.5) be our fuzzy
estimator of µ, or approximately 30 minutes per repair. The values of all the
parameters is shown in Table 18.1.
Using fuzzy parameters we get fuzzy diﬀerential equations and the solu-
tions pi(t), i = 0, ..., 4, and N(t) are also fuzzy. The system now becomes a
continuous fuzzy system whose trajectories are fuzzy so that any slice through
a trajectory at some time tz is a fuzzy number. We wish to estimate certain
bands of uncertainty which are p0(t)[0] and N(t)[0], or the α = 0 cuts.
Next we need to choose the values of the fuzzy parameters in their α =
0 cut to approximate the outer boundary of the α = 0 cut of the fuzzy
trajectory for p0(t) and N(t). As discussed in Chapter 6 if ω = (ω1/ω2/ω3)

18.3. FIRST SIMULATION
127
is a fuzzy parameter we use ω = ω1, ω2 and ω3. We do this for λ and µ giving
32 = 9 curves for p0(t) and 9 graphs for N(t) for a minimal approximation
to p0(t)[0] and N(t)[0]. These are shown in Figures 18.2-18.3 and in Figures
18.4-18.5. The systems diagram for Simulink is in Figure 18.1.
In Figures 18.2-18.5 the reader can determine, from consulting Section
1.5.4, p0(t) (N(t)) when we used for the fuzzy parameters: (1) all left end
points of their α = 0 cut; (2) all right end points of their α = 0 cut; and (3)
their α = 1 values.
p0.mat
p0(t) File
2.5
mu
f(u)
lambda*p3−2mu*p4
0.7
lambda
Scope p4
Scope p3
Scope p2
Scope p1
Scope p0
Scope N
N.mat
N File
1
s
Integrate for p4
1
s
Integrate for p3
1
s
Integrate for p2
1
s
Integrate for p1
1
s
Integrate for p0
f(u)
Fcn
1
Constant
f(u)
4*lambda*p0−(3*lambda+mu)*p1+2mu*p2
f(u)
3*lambda*p1−(2*lambda+2mu)*p2+2mu*p3
f(u)
2*lambda*p2−(lambda+2mu)*p3+2mu*p4
f(u)
−4*lambda*p0+mu*p1
dot p0
dot p1
dot p2
dot p3
dot p4
Figure 18.1: Simulink Diagram for the Machine/Service Queuing Model
18.3
First Simulation
We ﬁrst describe Figure 18.1. There are ﬁve loops, with the top for p0(t) and
the bottom for p4(t). Let us only discuss the top loop because the others
are very similar. The input to “Integrate for p0” is the right side of equation
(18.1) and its output is p0(t). Now p0(t) cycles around the top for input
to the top box labeled “f(u)”. This box computes the right side of equation
(18.1). p0(t) also is sent to “Scope p0” to show its graph. The box “p0(t) File”
collects all the data to construct one ﬁgure with all nine graphs. Chapter 28
has more details on how this is accomplished. The other boxes labeled “f(u)”
calculate the right hand side of equations (18.2)-(18.5). In the middle of the

128
CHAPTER 18. THE MACHINE/SERVICE QUEUING MODEL
right side, the box “f(u)” determines N(t) from the pi(t), i = 0, ..., 4, for input
to “Scope N” (its graph) and “N File” (for all graphs). There are also other
items to set/choose, like initial step size and type of numerical integrator
(ﬁxed or variable steps), which we will not discuss here (see Chapter 28).
Let p0(t)[0] = [p01(t, 0), p02(t, 0)].
In Figure 18.2 connect the upper
boundary with a smooth curve which is our approximation to p02(t, 0) and
connect the lower boundary with a smooth curve producing an approximation
to p01(t, 0). The horizontal axis is time and the vertical axis is the proba-
bility of no broken machines. Notice how fast the system gets into steady
state. Steady state arrives when the curves go horizontal. The steady state
probabilities are limt→∞p02(t, 0) = 0.6340 and limt→∞p01(t, 0) = 0.2030.
The uncertainty band, the diﬀerence between both curves at steady state,
is 0.6340 −0.2030 = 0.4310 which is quite large. This uncertainty on p0(t)
results from the uncertainty in the values for λ and µ.
Let N(t)[0] = [n1(t, 0), n2(t, 0)]. In Figure 18.3 connect the upper bound-
ary with a smooth curve which is our approximation to n2(t, 0) and con-
nect the lower boundary with a smooth curve producing an approximation
to n1(t, 0).
The horizontal axis is time and the vertical axis is the ex-
pected number of broken machines. Steady state arrives when the curves
go horizontal.
The steady state values are limt→∞n2(t, 0) = 1.3965 and
limt→∞n1(t, 0) = 0.4353. The uncertainty band, the diﬀerence between both
curves at steady state, is 1.3965 −0.4353 = 0.9612 which is quite large. This
uncertainty on N(t) results from the uncertainty in the values for λ and µ.
Since the uncertainty results are quite large in this example we would
concentrate on obtaining more accurate (less fuzzy) estimates for λ and µ.
Notice that both uncertain parameters (λ, µ) were estimated from data
and the base of their fuzzy estimator is a 99% conﬁdence interval. So we can
say that the bands of uncertainty are like bands of 99% conﬁdence intervals.
The same can be said for the other simulations discussed below.
18.4
Second Simulation
The fuzziness (width of the base of the fuzzy number) of the fuzzy number
estimators for λ and µ is a function of m = the sample size (Section 3.4). So
we gather more data on our system, get a larger value for m, to obtain less
fuzzy estimators. Assume the new fuzzy estimators are the triangular fuzzy
numbers λ = (0.4/0.5/0.6) and µ = (1.8/2/2.2). We perform the simulation
again with no other changes. The results are in Figures 18.4 and 18.5.
In Figure 18.4 connect the upper boundary with a smooth curve which is
our approximation to p02(t, 0) and connect the lower boundary with a smooth
curve producing an approximation to p01(t, 0). The horizontal axis is time
and the vertical axis is the probability of no broken machines. Steady state
arrives when the curves go horizontal.
The steady state probabilities are
limt→∞p02(t, 0) = 0.5089 and limt→∞p01(t, 0) = 0.3068. The uncertainty

18.4. SECOND SIMULATION
129
0
5
10
15
20
25
30
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
Figure 18.2: Fuzzy Trajectory of Fuzzy Probability p0(t)[0] in the First Sim-
ulation
0
5
10
15
20
25
30
0
0.2
0.4
0.6
0.8
1
1.2
1.4
Figure 18.3: Fuzzy Trajectory of the Expected Number of Broken Machines
N(t)[0] in the First Simulation

130
CHAPTER 18. THE MACHINE/SERVICE QUEUING MODEL
0
5
10
15
20
25
30
0.4
0.5
0.6
0.7
0.8
0.9
1
Figure 18.4: Fuzzy Trajectory of Fuzzy Probability p0(t)[0] in the Second
Simulation
0
5
10
15
20
25
30
0
0.2
0.4
0.6
0.8
1
1.2
1.4
Figure 18.5: Fuzzy Trajectory of the Expected Number of Broken Machines
N(t)[0] in the Second Simulation

18.5. REFERENCES
131
band, the diﬀerence between both curves at steady state, is 0.2021 which is
much smaller than that in the ﬁrst simulation. This uncertainty on p0(t)
results from the uncertainty in the values for λ and µ.
In Figure 18.5 connect the upper boundary with a smooth curve which is
our approximation to n2(t, 0) and connect the lower boundary with a smooth
curve producing an approximation to n1(t, 0). The horizontal axis is time
and the vertical axis is the expected number of broken machines. Steady
state arrives when the curves go horizontal.
The steady state values are
limt→∞n2(t, 0) = 1.0681 and limt→∞n1(t, 0) = 0.6336.
The uncertainty
band, the diﬀerence between both curves at steady state, is 0.4345 which is a
lot smaller than that in the ﬁrst simulation. This uncertainty on N(t) results
from the uncertainty in the values for λ and µ.
It is obvious that as the fuzziness in the fuzzy estimators decreases, the
uncertainty bands in the fuzzy results also are reduced.
18.5
References
1. J.J.Buckley: Fuzzy Statistics, Springer, Heidelberg, Germany, 2004.
2. J.J.Buckley: Fuzzy Probabilities and Fuzzy Sets for Web Planning,
Springer, Heidelberg, Germany, 2004.
3. J.J.Buckley:
Simulating Fuzzy Systems, Springer, Heidelberg, Ger-
many, 2005.
4. H.A.Taha: Operations Research, Fifth Edition, Macmillan, N.Y., 1992.
5. H.M.Wagner: Principles of Operations Research, Second Edition, Pren-
tice Hall, Englewood Cliﬀs, N.J.. 1975.

Chapter 19
A Self-Service Queuing
Model
19.1
Introduction
In this chapter we consider a queuing model with c identical and parallel
servers and system capacity M with M = c [4]. This means that there is
no queue and an arriving customer enters the system only when there is an
empty server; otherwise, if all servers are busy they leave the system. This
is sometimes called the self-service model but usually such a model assumes
there is an inﬁnite number of servers. We will have a ﬁnite number of servers.
So, if a customer arrives and a server is free, the customer enters the server
and they “service” themselves.
Assume that the calling source (where the customers come from) is inﬁnite
and arrival time is described by an exponential distribution that has rate λ.
Assume also that the service time probability distribution is exponential with
the same rate µ for each server and each customer.
Usually in queuing theory we investigate the behavior of the system during
“steady state”. Let pi(t) be the probability of i customers in the system at
time t > 0, for 0 ≤i ≤M. If pi = limt→∞pi(t), 0 ≤i ≤M, then the pi are
called the steady state probabilities and using the pi in calculations produces
steady state results. However, in this chapter we do not go directly to the
steady state probabilities but start with the diﬀerential equations deﬁning
the pi(t).
To simplify the discussion now assume that M = c = 4. We write ˙pi
for the time derivative of pi(t). The following system of linear diﬀerential
equations has been adopted from a discussion in [5].
˙p0 = −λp0(t) + µp1(t),
(19.1)
˙p1 = λp0(t) −[λ + µ]p1(t) + 2µp2(t),
(19.2)
133

134
CHAPTER 19. A SELF-SERVICE QUEUING MODEL
Parameter
Fuzzy/Crisp Value
λ
λ = (0.3/0.5/0.7)
µ
µ = (0.5/1.0/1.5)
p0(0)
1.00
p1(0)
0
p2(0)
0
p3(0)
0
p4(0)
0
Table 19.1: Fuzzy/Crisp Parameters in the Self-Service Queuing Model
˙p2 = λp1(t) −[λ + 2µ]p2(t) + 3µp3(t),
(19.3)
˙p3 = λp2(t) −[λ + 3µ]p3(t) + 4µp4(t),
(19.4)
˙p4 = λp3(t) −4µp4(t).
(19.5)
Initial conditions are p0(0) = 1 and p1(0) = p2(0) = p3(0) = p4(0) = 0. The
solution to this system produces the pi(t), 0 ≤i ≤4. We will be interested
in ﬁnding N(t) = p1(t) + 2p2(t) + 3p3(t) + 4p4(t) the expected number of
customers in the system at time t and p4(t)100 = % of lost customers due to
capacity M = c = 4.
These are diﬀerential equations so we could easily ﬁnd the solutions. How-
ever, even using simple solutions it can be complicated to ﬁnd the boundary
of the band of uncertainty, or the boundary of p4(t)[0] and N(t)[0], as shown
in Section 6.2. So we omit expressions for the exact solutions and will use
simulation instead.
19.2
Parameters
The parameters λ and µ need to be estimated from data. So, from ([1]-[3],
see also Section 3.4) their estimators become fuzzy numbers which exhibit
the uncertainty in their values. Let us now use λ = (0.3/0.5/0.7) as our fuzzy
estimator of λ, or approximately one customer arrival every two hours. And
let µ = (0.5/1/1.5) our fuzzy estimator of µ, or approximately one hour per
service. Time is in hours. The values of all the parameters are given in Table
19.1.
Using fuzzy parameters we get diﬀerential equations and the solutions
pi(t), i = 0, ..., 4, and N(t) are also fuzzy. The system now becomes a con-
tinuous fuzzy system whose trajectories are fuzzy so that any slice through
a trajectory at some time tz is a fuzzy number. We wish to estimate certain
bands of uncertainty which are p4(t)[0] and N(t)[0], or the α = 0 cuts.
Next we need to choose the values of the fuzzy parameters in their α =
0 cut to approximate the outer boundary of the α = 0 cut of the fuzzy

19.3. SIMULATION
135
trajectory for p4(t) and N(t). As discussed in Chapter 6 if ω = (ω1/ω2/ω3)
is a fuzzy parameter we use ω = ω1, ω2 and ω3. We do this for λ and µ giving
32 = 9 curves for p4(t) and 9 graphs for N(t) for a minimal approximation
to p4(t)[0] and N(t)[0]. These are shown in Figures 19.2-19.3. The systems
diagram for Simulink is in Figure 19.1.
In Figure 19.2 (19.3) the reader can determine, from consulting Section
1.5.4, p4(t) (N(t)) when we used for the fuzzy parameters: (1) all left end
points of their α = 0 cut; (2) all right end points of their α = 0 cut; and (3)
their α = 1 values.
p4.mat
p4(t) File
2.5
mu
f(u)
lambda*p3−4mu*p4
f(u)
lambda*p2−(lambda+3mu)*p3+4mu*p4
f(u)
lambda*p1−(lambda+2mu)*p2+3mu*p3
f(u)
lambda*p0−(lambda+mu)*p1+2mu*p2
0.7
lambda
Scope p4
Scope p3
Scope p2
Scope p1
Scope p0
Scope N
N.mat
N File
1
s
Integrate for p4
1
s
Integrate for p3
1
s
Integrate for p2
1
s
Integrate for p1
1
s
Integrate for p0
f(u)
Fcn
1
Constant
f(u)
−lambda*p0+mu*p1
dot p0
dot p1
dot p2
dot p3
dot p4
Figure 19.1: Simulink Diagram for the Self-Service Queuing Model
19.3
Simulation
The system diagram from Simulink in this application is similar to that in
Figure 18.1 so we will be brief in our discussion of Figure 19.1. The ﬁve
loops are to compute pi(t), i = 0, ..., 4.
The “f(u)” boxes in the middle
determine the right side of equation (19.1)-(19.5). The “f(u)” box on the
right side computes N(t) from the pi(t), i = 0, ..., 4. The “p4(t) File” and
the “N File” collect all the data so that we may present all the graphs in one
ﬁgure. Chapter 28 has more details on this. There are also other items to
set/choose, like simulation time and type of numerical integrator, which we

136
CHAPTER 19. A SELF-SERVICE QUEUING MODEL
0
5
10
15
20
25
30
0
0.005
0.01
0.015
0.02
0.025
0.03
0.035
0.04
0.045
Figure 19.2: Fuzzy Trajectory of Fuzzy Probability p4(t)[0] in the Self-Service
Queuing Model
will not discuss here (see Chapter 28).
Let p4(t)[0] = [p41(t, 0), p42(t, 0)].
In Figure 19.2 connect the upper
boundary with a smooth curve which is our approximation to p42(t, 0) and
connect the lower boundary with a smooth curve producing an approxima-
tion to p41(t, 0).
The horizontal axis is time and the vertical axis is the
percent of lost customers (after multiplying by 100). Notice how fast the
system gets into steady state. Steady state arrives when the curves go hor-
izontal.
The steady state probabilities are limt→∞p42(t, 0) = 0.0400 and
limt→∞p41(t, 0) = 0.0001.
The uncertainty band, the diﬀerence between
both curves at steady state, is 0.0399 which is quite small. This uncertainty
on p4(t) results from the uncertainty in the values for λ and µ.
Let N(t)[0] = [n1(t, 0), n2(t, 0)]. In Figure 19.3 connect the upper bound-
ary with a smooth curve which is our approximation to n2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
n1(t, 0). The horizontal axis is time and the vertical axis is the expected
number of customers in the system. Steady state arrives when the curves
go horizontal.
The steady state values are limt→∞n2(t, 0) = 1.3438 and
limt→∞n1(t, 0) = 0.2002. The uncertainty band, the diﬀerence between both
curves at steady state, is 1.1436 which is quite large. This uncertainty on
N(t) results from the uncertainty in the values for λ and µ.
Since the uncertainty results for N(t) are quite large in this example we

19.4. REFERENCES
137
0
5
10
15
20
25
30
0
0.2
0.4
0.6
0.8
1
1.2
1.4
Figure 19.3: Fuzzy Trajectory of the Expected Number of Customers in the
System N(t)[0] in the Self-Service Queuing Model
would concentrate on obtaining more accurate (less fuzzy) estimates for λ
and µ as was done in the previous chapter.
Notice that both uncertain parameters (λ, µ) were estimated from data
and the base of their fuzzy estimator is a 99% conﬁdence interval. So we can
say that the bands of uncertainty are like bands of 99% conﬁdence intervals.
19.4
References
1. J.J.Buckley: Fuzzy Statistics, Springer, Heidelberg, Germany, 2004.
2. J.J.Buckley: Fuzzy Probabilities and Fuzzy Sets for Web Planning,
Springer, Heidelberg, Germany, 2004.
3. J.J.Buckley:
Simulating Fuzzy Systems, Springer, Heidelberg, Ger-
many, 2005.
4. H.A.Taha: Operations Research, Fifth Edition, Macmillan, N.Y., 1992.
5. H.M.Wagner: Principles of Operations Research, Second Edition, Pren-
tice Hall, Englewood Cliﬀs, N.J.. 1975.

Chapter 20
Symbiosis
20.1
Introduction
There are examples where the interaction of two species is to the beneﬁt of
both (symbiosis). Examples are plant and seed dispersers, plants and pollen
dispersers, etc. A simple two species model, with limited carrying capacities
for both species, adapted from [1] is
˙x = a11x(1 −[x/xmax]) + a12x(1 −[y/ymax]),
(20.1)
˙y = a21y(1 −[y/ymax]) + a22y(1 −[x/xmax]),
(20.2)
for initial conditions x(0) = x0 and y(0) = y0. In these nonlinear diﬀerential
equations ˙x ( ˙y) is the time derivative of x (y). x(t) (y(t)) is the population
size of the ﬁrst (second) species, and the maximum population size (carrying
capacity) of x (y) is xmax (ymax). Without adding a carrying capacity both
populations will grow without bound. The aij are all positive constants.
If we compare this model to the Predator/Prey Model in Chapter 7 we
see that in the predator/prey equations some of the coeﬃcients are negative
and now for the symbiosis case all the coeﬃcients are positive.
20.2
Parameters
There are eight parameters in equations (20.1) and (20.2) including the initial
conditions. Let us assume that xmax = ymax = 1000 and x0 = y0 = 5 all
known and crisp (not fuzzy). For a certain two species symbiosis under study
the ecologists agree on values for a11 ≈0.3 and a21 ≈0.4 but they have been
arguing about what to put down for a12 and a22.
Using expert opinion
(Chapter 3) we arrive at triangular fuzzy numbers estimators for both a12
and a22. All the values to be used for the parameters are now given in Table
20.1 including fuzzy values for a11 and a21
139

140
CHAPTER 20. SYMBIOSIS
Parameter
Fuzzy/Crisp Value
a11
(0.29/0.30/0.31)
a12
(0.15/0.17/0.19)
a21
(0.39/0.40/0.41)
a22
(0.18/0.20/0.22)
xmax
1000
ymax
1000
x0
5
y0
5
Table 20.1: Fuzzy/Crisp Parameter Values in the Symbiosis Example
Using fuzzy numbers for aij makes the system of diﬀerential equations
into a system of fuzzy diﬀerential equations.
The solutions will be fuzzy
trajectories x(t) and y(t) so that any cut through the fuzzy trajectories for
ﬁxed t produces a fuzzy number. We want to ﬁnd the band of maximum
uncertainty which is the graph of the bases of the fuzzy numbers, or x(t)[0]
and y(t)[0], the α = 0 cut.
Next we need to choose the values of the fuzzy parameters in their α =
0 cut to approximate the outer boundary of the α = 0 cut of the fuzzy
trajectory for x(t) and y(t). As discussed in Chapter 6 if ω = (ω1/ω2/ω3)
is a fuzzy parameter we use ω = ω1, ω2 and ω3. We do this for aij, i, j =
1, 2, giving 34 = 81 curves for x(t) and 81 graphs for y(t) for a minimal
approximation to x(t)[0] and y(t)[0]. These are shown in Figures 20.2 and
20.3. The system diagram for Simulink is in Figure 20.1.
In Figure 20.2 (20.3) the reader can determine, from consulting Section
1.5.4, x(t) (y(t)) when we used for the fuzzy parameters: (1) all left end
points of their α = 0 cut; (2) all right end points of their α = 0 cut; and (3)
their α = 1 values.
20.3
Simulation
Let us ﬁrst discuss the Simulink diagram in Figure 20.1. The input to “Inte-
grate x′ ” is the right side of equation (20.1) and the input to “Integrate y′”
is the right side of equation (20.2). The output from “Integrate x′ ” goes to:
(1) the upper loop which computes a11x(1 −
x
1000); (2) the lower loop with
gets a12x(1 −
y
1000); and (3) “Scope x” for its graph. Similar calculations are
done for y in the lower half of the ﬁgure. “To X File” collects all the data on
x(t) so that we may present all the graphs in one ﬁgure. More details on this
is in Chapter 28. There are also other items to set/choose, like type of nu-
merical integrator and step size, which we will not discuss here (see Chapter
28).

20.3. SIMULATION
141
f(u)
y*(1−y/1000)
(1−u[1]/1000)*u[2]
y*(1−x/1000)
(1−u[2]/1000)*u[1]
x*(1−y/1000)
f(u)
x*(1−x/1000 )
y.mat
To Y File
x.mat
To X File
Scope y
Scope x
1
s
Integrate y‘
1
s
Integrate x‘
0.6
GainA22
0.4
GainA21
0.17
GainA12
0.3
GainA11
Add1
Add
Figure 20.1: Simulink Diagram for the Symbiosis Example
Let x(t)[0] = [x1(t, 0), x2(t, 0)]. In Figure 20.2 connect the upper bound-
ary with a smooth curve which is our approximation to x2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
x1(t, 0). The horizontal axis is time and the vertical axis is the number of
species x. We get steady state (horizontal curves) with limt→∞xi(t, 0) =
1000, i = 1, 2. There is no uncertainty in this limit. Also, the x population
gets to its maximum in about 45 time units.
Let y(t)[0] = [y1(t, 0), y2(t, 0)]. In Figure 20.3 connect the upper boundary
with a smooth curve which is our approximation to y2(t, 0) and connect the
lower boundary with a smooth curve producing an approximation to y1(t, 0).
The horizontal axis is time and the vertical axis is the number of species
y.
We get steady state (horizontal curves) with limt→∞yi(t, 0) = 1000,
i = 1, 2.
No uncertainty in the limit.
The y(t) population arrives at its
carrying capacity in approximately 40 time units after over shooting it to to
a maximum between 1100 to 1280.
If all the uncertain parameters are estimated from data (Chapter 3), with-
out using expert opinion, then the base of the fuzzy estimator is a 99% con-
ﬁdence interval. Using all of these conﬁdence intervals we get x(t)[0] and
y(t)[0], so these bands of uncertainty will be like 99% conﬁdence intervals for
x(t) and y(t), respectively.

142
CHAPTER 20. SYMBIOSIS
0
10
20
30
40
50
60
70
80
90
100
0
100
200
300
400
500
600
700
800
900
1000
Figure 20.2: Fuzzy Trajectory for x(t)[0] in the Symbiosis Example
0
10
20
30
40
50
60
70
80
90
100
0
200
400
600
800
1000
1200
1400
Figure 20.3: Fuzzy Trajectory for y(t)[0] in the Symbiosis Example

20.4. REFERENCES
143
20.4
Reference
1. J.D.Murry: Mathematical Biology, Springer-Verlag, Heidelberg, Ger-
many, 1989.

Chapter 21
Supply and Demand
21.1
Introduction
This simple mathematical model in economics is adapted from an example
in [1]. The linear diﬀerential equations for this example are
˙P = F(t) −k1(S −S0),
(21.1)
˙S = k2(P −P0),
(21.2)
where ˙P ( ˙S) is the time derivative of P = P(t) = price (S = S(t) = supply),
and initial conditions are P(0) = P0, S(0) = S0. It is assumed that the initial
conditions (P0, S0) represent equilibrium price and supply.
Two items that will eﬀect price are inﬂation F(t) and supply S. Let us
assume that inﬂation oscillates and we model inﬂation using a sine curve
Asin(Bt) in equation (21.1). If S > S0 then supply is too large and price
will decrease, but if S < S0 then supply is too low and price will increase. So
we add the factor −k1(S −S0) to equation (21.1) with constant k1 > 0. In
equation (21.2) we have the term k2(P −P0), for k2 > 0, because we assume
that: (1) if P > P0 price is too high and supply S will increase; and (2) if
P < P0 price is too low and supply S will decrease.
These are linear diﬀerential equations so we could easily ﬁnd the solu-
tions. However, even using simple solutions it can be complicated to ﬁnd the
boundary of the band of uncertainty, or the boundary of P(t)[0]) and S(t)[0],
as shown in Section 6.2. So we omit expressions for the exact solutions and
will use simulation instead.
21.2
Parameters
The parameters are k1, k2, P0 , S0, A and B. We assume that only inﬂation
is uncertain so that k1, k2, P0 and S0 are all known and crisp but A and
145

146
CHAPTER 21. SUPPLY AND DEMAND
Parameter
Crisp/Fuzzy Value
k1
2
k2
2
P0
70
S0
200
A
A = (10/20/30)
B
B = (3/4/5)
Table 21.1: Crisp/Fuzzy Parameters in the Supply and Demand Model
B are unknown and will be triangular fuzzy numbers. Using expert opinion
(Chapter 3) we obtain fuzzy estimators for A and B. Fuzzy inﬂation does
not seem too unreasonable. All the values of the constants are given in Table
21.1.
Using fuzzy parameters we get fuzzy diﬀerential equations and the solu-
tions P(t) and S(t) are also fuzzy. The system now becomes a continuous
fuzzy system whose trajectories are fuzzy so that any slice through a trajec-
tory at some time tz is a fuzzy number. We wish to estimate the band of
uncertainty which is P(t)[0] and S(t)[0], or the α = 0 cuts.
Next we need to choose the values of the fuzzy parameters in their α =
0 cut to approximate the outer boundary of the α = 0 cut of the fuzzy
trajectory for price and supply. As discussed in Chapter 6 if ω = (ω1/ω2/ω3)
is a fuzzy parameter we use ω = ω1, ω2 and ω3. We do this for A and B giving
32 = 9 curves for P(t) and 9 graphs for S(t) for a minimal approximation
to P(t)[0] and S(t)[0]. These are shown in Figures 21.2 and 21.3. The fuzzy
input for inﬂation is shown in Figure 21.4. The system diagram for Simulink
is in Figure 21.1.
In Figures 21.2-21.4 the reader can determine, from consulting Section
1.5.4, P(t), S(t) and F(t) (inﬂation) when we used for the fuzzy parameters:
(1) all left end points of their α = 0 cut; (2) all right end points of their
α = 0 cut; and (3) their α = 1 values.
21.3
Simulation
Let us ﬁrst discuss the Simulink diagram in Figure 21.1. The input to “Inte-
grator” is the right side of equation (21.1) and the output is P(t). P(t) is sent
to “Scope P” for its graph and also to “Subtract1”. The input to “Subtract”
is Asin(Bt) and k1(S −S0). The input to “Subtract1” is P(t) and P0 whose
output gets multiplied by k2 for input to “Integrate S’ ”. The “Scopes” are
for single graphs and the “Files” collect all the data so we can place all graphs
in one ﬁgure. More details on how this is done is in Chapter 28. There are
also other items to set/choose, like simulation time, initial step size and type

21.3. SIMULATION
147
Supply.mat
Supply File
Subtract1
Subtract
Scope S
Scope P
Scope
200
S0
S−S0
Price.mat
Price File
70
P0
1
s
Integrator
1
s
Integrate S‘
2
GainK2
2
GainK1
Fuz.mat
Fuzzy Input
A*sin(Bt) Wave
Figure 21.1: Simulink Diagram for the Supply and Demand Example
of numerical integrator, which we will not discuss here (see Chapter 28).
Let P(t)[0] = [p1(t, 0), p2(t, 0)]. In Figure 21.2 connect the upper bound-
ary with a smooth curve which is our approximation to p2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
p1(t, 0). The horizontal axis is time and the vertical axis is $. The fuzzy
graph appears periodic. The possible values for price vary from about $41 to
approximately $106 which is a large spread.
Let S(t)[0] = [s1(t, 0), s2(t, 0)]. In Figure 21.3 connect the upper bound-
ary with a smooth curve which is our approximation to s2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
s1(t, 0). The horizontal axis is time and the vertical axis is the number of
units supplied. The fuzzy graph looks periodic. Supply can range from a low
of around 172 to a high of approximately 228. Also a large range of values.
Figure 21.4 shows fuzzy inﬂation modeled as a fuzzy sine wave. Fuzzy
inﬂation causes the large variability in price and supply.
If all the uncertain parameters are estimated from data (Chapter 3), and
not by employing expert advice, then the base of the fuzzy estimators is a
99% conﬁdence interval. Using all of these conﬁdence intervals we get P(t)[0]
and S(t)[0], so these bands of uncertainty will be like 99% conﬁdence intervals
for P(t) and S(t), respectively.

148
CHAPTER 21. SUPPLY AND DEMAND
0
1
2
3
4
5
6
7
8
9
10
40
50
60
70
80
90
100
110
Figure 21.2: Fuzzy Trajectory for Price P(t)[0] in the Supply and Demand
Example
0
1
2
3
4
5
6
7
8
9
10
170
180
190
200
210
220
230
Figure 21.3: Fuzzy Trajectory for Supply S(t)[0] in the Supply and Demand
Example

21.4. REFERENCES
149
0
1
2
3
4
5
6
7
8
9
10
−30
−20
−10
0
10
20
30
Figure 21.4: Fuzzy Graph for Inﬂation in the Supply and Demand Example
21.4
Reference
1. M.R.Spiegel: Applied Diﬀerential Equations, Third Edition, Prentice-
Hall, Englewood Cliﬀs, NJ, 1981.

Chapter 22
Drug Concentrations
22.1
Introduction
This application has been adopted from an example in [1]. This will be a
two compartment model, see Figure 22.1, but could be expanded to more
compartments. Let Vi = the volume of compartment i = 1, 2 and let xi(t) =
be the amount of the drug in compartment i = 1, 2 at time t. In Figure 22.1
A is the area of the membrane between the two compartments. The drug
can ﬂow through the membrane from compartment #1 to #2, but also from
compartment #2 to #1. Figure 22.1 shows that the drug can also escape to
the external system through an opening in compartment #2.
We have the rate of change of x1 equals the rate of ﬂow from #2 to #1
minus the rate of ﬂow from #1 to #2. Let us assume that the rate of ﬂow
from #2 to #1 is proportional to A and the concentration (x2/V2) of the
drug in compartment #2. Let this constant of proportionality be a21. Then
we use
a21A(x2/V2),
(22.1)
for the rate of ﬂow of the drug from #2 to #1. Similarly, we use a12A(x1/V1),
for constant of proportionality a12, to model the rate of ﬂow from #1 to #2.
Hence, our ﬁrst diﬀerential equation is
˙x1 = a21A(x2/V2) −a12A(x1/V1).
(22.2)
The rate of change of x2 equals the rate of ﬂow from #1 into #2 minus
the fate of ﬂow from #2 to #1 and also minus the rate of ﬂow out of #2 to
the external system. Assume that the rate of ﬂow from #2 to the external
system is proportional to the concentration x2/V2 since there is no membrane
there. Let this constant of proportionality be a2. Then our second diﬀerential
equation, obtained in a similar manner as the ﬁrst equation, is
˙x2 = a12A(x1/V1) −a21A(x2/V2) −a2(x2/V2).
(22.3)
151

152
CHAPTER 22. DRUG CONCENTRATIONS
x1, V1
Compartment 1
x2, V2
Compartment 2
-
-
-
-




6
Membrane
-
Figure 22.1: Diagram for the Drug Concentration Example
The system of diﬀerential equations is equations (22.2) and (22.3) together
with initial conditions x1(0) = x10 and x2(0) = x20.
We will ﬁrst combine some of the constants to simplify the equations. Let
b12 = a12A/V1, b21 = a21A/V2 and b2 = a2/V2. Then the system of linear
diﬀerential equations becomes
˙x1 = b21x2 −b12x1,
(22.4)
˙x2 = b12x1 −(b21 + b2)x2.
(22.5)
These are linear diﬀerential equations so we could easily ﬁnd the solu-
tions. However, even using simple solutions it can be complicated to ﬁnd the
boundary of the band of uncertainty, or the boundary of x1(t)[0] and x2(t)[0],
as shown in Section 6.2. So we omit expressions for the exact solutions and
will use simulation instead.
22.2
Parameters
The parameters are b12, b21, b2 , x10 and x20. We assume that all the “rates”
are uncertain so that x10 and x20 are known and crisp but b12, b21 and b2 are
unknown and will be triangular fuzzy numbers. Actually, a12, a21 and a2 are
the rates and are to be estimated from data as in Section 3.4, producing fuzzy
number estimators. From these fuzzy numbers we obtain fuzzy numbers for
the b12, b21 and b2 since we assume that values for A and the Vi are all known
and crisp. For example, b12 = (A/V1)a12. All the values of the parameters
are given in Table 22.1. We use triangular fuzzy number estimators for b12,
b21 and b2.
Using fuzzy parameters we get fuzzy diﬀerential equations and the solu-
tions x1(t) and x2(t) are also fuzzy. The solutions will be fuzzy trajectories
so that any cut through the fuzzy trajectories for ﬁxed t produces a fuzzy

22.3. SIMULATION
153
Parameter
Crisp/Fuzzy Value
b12
b12 = (0.2/0.3/0.4)
b21
b21 = (0.4/0.5/0.6)
b2
b2 = (0.05/0.10/0.15)
x10
100
x20
10
Table 22.1: Crisp/Fuzzy Parameters in the Drug Concentration Model
number. We want to ﬁnd the band of maximum uncertainty which is the
graph of the bases of the fuzzy numbers, or x1(t)[0] and x2(t)[0] the α = 0
cut.
Next we need to choose the values of the fuzzy parameters in their α =
0 cut to approximate the outer boundary of the α = 0 cut of the fuzzy
trajectory for xi(t), i = 1, 2. As discussed in Chapter 6 if ω = (ω1/ω2/ω3)
is a fuzzy parameter we use ω = ω1, ω2 and ω3. We do this for b12, b21
and b2 giving 33 = 27 curves for x1(t) and 27 graphs for x2(t) for a minimal
approximation to x1(t)[0] and x2(t)[0]. These are shown in Figures 22.3 and
22.4. The systems diagram for Simulink is in Figure 22.2.
In Figure 22.3 (22.4) the reader can determine, from consulting Section
1.5.4, x1(t) (x2(t)) when we used for the fuzzy parameters: (1) all left end
points of their α = 0 cut; (2) all right end points of their α = 0 cut; and (3)
their α = 1 values.
22.3
Simulation
We ﬁrst discuss the Simulink diagram in Figure 22.2. The input to “Integrate
x′
1 ” is the right side of equation (22.4) with output x1(t). The input to
“Subtract” is b12x1 and b21x2. The input to “Subtract1” will be b12x1 and
(b21 +b2)x2. The input to “Integrate x′
2 ” is the right side of equation (22.5).
The “Scopes” are for single graphs while the “Files” collect the data so that
we may do all the graphs in one ﬁgure.
More details on how we do this
is in Chapter 28. There are also other items to set/choose, like choosing a
ﬁxed step, or variable step, numerical integration program, which we will not
discuss here (see Chapter 28).
Let x1(t)[0] = [x11(t, 0), x12(t, 0)].
In Figure 22.3 connect the upper
boundary with a smooth curve which is our approximation to x12(t, 0) and
connect the lower boundary with a smooth curve producing an approximation
to x11(t, 0). The horizontal axis is time and the vertical axis is the amount
of the drug in compartment #1. We see that x1(t) decreases from its initial
value and goes to zero between 75 and 450 time units. The time of 450 may
be too long until this drug is out of Compartment 1.

154
CHAPTER 22. DRUG CONCENTRATIONS
x2.mat
To x2 File
x1.mat
To x1 File
Subtract1
Subtract
Scope x2
Scope x1
1
s
Integrate x2‘
1
s
Integrate x1‘
0.6
GainB21+B2
0.5
GainB21
0.3
GainB12
Figure 22.2: Simulink Diagram for the Drug Concentration Example
Let x2(t)[0] = [x21(t, 0), x22(t, 0)].
In Figure 22.4 connect the upper
boundary with a smooth curve which is our approximation to x22(t, 0) and
connect the lower boundary with a smooth curve producing an approximation
to x21(t, 0). The horizontal axis is time and the vertical axis is the amount
of the drug in compartment #2. x2(t) starts out at 10 units and rapidly
increases to a maximum of between 22 and 47 units. Then x2(t) steadily
decreases to zero and gets to zero between 80 and 400 time units. For this
drug a maximum of 47 units may be too great and a time of 400 could take
too long for it to leave Compartment 2.
If all the uncertain parameters are estimated from data (Chapter 3), and
none come from expert opinion, then the base of the fuzzy estimator is a 99%
conﬁdence interval. Using all of these conﬁdence intervals we get x1(t)[0] and
x2(t)[0], so these bands of uncertainty will be like 99% conﬁdence intervals
for x1(t) and x2(t), respectively.

22.3. SIMULATION
155
0
50
100
150
200
250
300
350
400
450
500
0
10
20
30
40
50
60
70
80
90
100
Figure 22.3: Fuzzy Trajectory, x1(t)[0] in the Drug Concentration Example
0
50
100
150
200
250
300
350
400
450
500
0
5
10
15
20
25
30
35
40
45
50
Figure 22.4: Fuzzy Trajectory, x2(t)[0] in the Drug Concentration Example

156
CHAPTER 22. DRUG CONCENTRATIONS
22.4
Reference
1. M.R.Spiegel: Applied Diﬀerential Equations, Third Edition, Prentice-
Hall, Englewood Cliﬀs, NJ, 1981.

Chapter 23
Three Species Competition
23.1
Introduction
This example generalizes the predator/prey model in Chapter 7 and has
been adapted from ([1],[2]). Let Ni(t) = the number of species i present at
time t ≥0, i = 1, 2, 3. Also let λi be the growth rate of species i in the
absence of any competition, from any other species and from its own species,
i = 1, 2, 3. Finally, deﬁne aij > 0 to be the eﬀect of the presence of species j
on the growth of species i, for i, j = 1, 2, 3. The system of nonlinear ordinary
diﬀerential equations governing the evolution of this three species model is
˙Ni = λiNi(1 −
3

j=1
aijNj),
(23.1)
for i = 1, 2, 3 with initial conditions Ni(0) = Ni0, i = 1, 2, 3.
˙Ni is the time
derivative of Ni(t), i = 1, 2, 3.
There are ﬁfteen parameters in the system and we shall make the following
assumptions, as in [1], to reduce the number of constants to seven. Let: (1)
λ1 = λ2 = λ3 = λ; (2) a12 = a23 = a31 = a > 0; (3) a21 = a32 = a13 = b > 0;
and (4) a11 = a22 = a33 = c > 0. Then the system of nonlinear diﬀerential
equations becomes
˙N1 = λN1(1 −cN1 −aN2 −bN3),
(23.2)
˙N2 = λN2(1 −bN1 −cN2 −aN3),
(23.3)
˙N3 = λN3(1 −aN1 −bN2 −cN3).
(23.4)
23.2
Parameters
The parameters are λ, a, b, c, N10, N20 and N30. We assume that all the
constants λ, a, b and c are uncertain but N10, N20 and N30 are known and
157

158
CHAPTER 23. THREE SPECIES COMPETITION
Parameter
Crisp/Fuzzy Value
λ
λ = (0.14/0.15/0.16)
a
a = (0.02/0.025/0.03)
b
b = (0.02/0.025/0.03)
c
c = (0.015/0.02/0.025)
N10
5
N20
5
N30
5
Table 23.1: Crisp/Fuzzy Parameters in the Three Species Competition Model
crisp. The rate λ is to be estimated from data, as in Section 3.4, producing
a fuzzy number estimator. Expert opinion (Chapter 3) is used to estimate
a, b and c. All the fuzzy estimators are to be triangular fuzzy numbers. The
values of all the parameters are given in Table 23.1.
Using fuzzy parameters we get fuzzy diﬀerential equations and the solu-
tions N i(t), i = 1, 2, 3, are also fuzzy. The solutions will be fuzzy trajectories
so that any cut through the fuzzy trajectories for ﬁxed t produces a fuzzy
number. We want to ﬁnd the band of maximum uncertainty which is the
graph of the bases of the fuzzy numbers, or N i(t)[0], i = 1, 2, 3, the α = 0
cut.
Next we need to choose the values of the fuzzy parameters in their α =
0 cut to approximate the outer boundary of the α = 0 cut of the fuzzy
trajectory for N i(t), i = 1, 2, 3. As discussed in Chapter 6 if ω = (ω1/ω2/ω3)
is a fuzzy parameter we use ω = ω1, ω2 and ω3. We do this for a, b, c and
λ giving 34 = 81 curves for Ni(t), i = 1, 2, 3, for a minimal approximation
to N i(t)[0], i = 1, 2, 3. These are shown in Figures 23.2 - 23.4. The systems
diagram for Simulink is in Figure 23.1.
In Figures 23.2-23.4 the reader can determine, from consulting Section
1.5.4, Ni(t), i = 1, 2, 3 when we used for the fuzzy parameters: (1) all left
end points of their α = 0 cut; (2) all right end points of their α = 0 cut; and
(3) their α = 1 values.
23.3
Simulation
First we explain the Simulink diagram in Figure 23.1. The top loop computes
N1, the middle loop is for N2 and the lowest loop gets N3. The input to
“Integrator” is the right side of equation (23.2). The input to “Dot Product”
is the two vectors (N1(t), N2(t), N3(t)) and (c, a, b) so the output will be
cN1 + aN2 + bN3 which, after subtracting from one, goes to “Product”. The
other two inputs to “Product” are λ and N1(t). So we now see how Simulink
also obtains N2(t) and N3(t). The “Scopes” are for single graphs and the

23.3. SIMULATION
159
1
lambda
−K−
c
−K−
b
−K−
a
Scope N3
Scope N2
Scope N1
Product2
Product1
Product
N3.mat
N3 File
N2.mat
N2 File
N1.mat
N1 File
1
s
Integrator2
1
s
Integrator1
1
s
Integrator
1−u[1]
Fcn2
1−u[1]
Fcn1
1−u[1]
Fcn
Dot Product2
Dot Product1
Dot Product
1
Constant1
Figure 23.1: Simulink Diagram for the Three Species Competition
“Files” gather all the data so that we can put all graphs in one ﬁgure. Chapter
28 gives the code for this procedure. There are also other items to set/choose,
like the type of numerical integrator and relative/absolute tolerance, which
we will not discuss here (see Chapter 28).
Let N 1(t)[0] = [n11(t, 0), n12(t, 0)].
In Figure 23.2 connect the upper
boundary with a smooth curve which is our approximation to n12(t, 0) and
connect the lower boundary with a smooth curve producing an approximation
to n11(t, 0). The horizontal axis is time and the vertical axis is the number of
species N1. We get steady state (horizontal curves) with limt→∞n12(t, 0) ≈
18 and limt→∞n11(t, 0) = 12. The uncertainty band, the diﬀerence between
the two curves in steady state, is approximately 6.
Let N 2(t)[0] = [n21(t, 0), n22(t, 0)].
In Figure 23.3 connect the upper
boundary with a smooth curve which is our approximation to n22(t, 0) and
connect the lower boundary with a smooth curve producing an approximation
to n21(t, 0). The horizontal axis is time and the vertical axis is the number of
species N2. We get steady state (horizontal curves) with limt→∞n22(t, 0) ≈
18 and limt→∞n21(t, 0) = 12. The uncertainty band, the diﬀerence between
the two curves in steady state, is approximately 6.
The model is symmetric and we will obtain similar results for each
species. Let N 3(t)[0] = [n31(t, 0), n32(t, 0)]. In Figure 23.4 connect the up-
per boundary with a smooth curve which is our approximation to n32(t, 0)
and connect the lower boundary with a smooth curve producing an approx-

160
CHAPTER 23. THREE SPECIES COMPETITION
0
50
100
150
200
250
300
5
10
15
20
Figure 23.2: Fuzzy Trajectory for N 1(t)[0] in the Three Species Competition
Example
0
50
100
150
200
250
300
5
10
15
20
Figure 23.3: Fuzzy Trajectory for N 2(t)[0] in the Three Species Competition
Example

23.4. REFERENCES
161
0
50
100
150
200
250
300
5
10
15
20
Figure 23.4: Fuzzy Trajectory for N 3(t)[0] in the Three Species Competition
Example
imation to n31(t, 0).
The horizontal axis is time and the vertical axis is
the number of species N3.
We get steady state (horizontal curves) with
limt→∞n32(t, 0) ≈18 and limt→∞n31(t, 0) = 12. The uncertainty band, the
diﬀerence between the two curves in steady state, is approximately 6.
Although this model has four fuzzy parameter inputs the results show
little uncertainty.
If all the uncertain parameters are estimated from data (Chapter 3), with
none from expert advice, then the base of the fuzzy estimator is a 99%
conﬁdence interval. Using all of these conﬁdence intervals we get N i(t)[0],
i = 1, 2, 3, so these bands of uncertainty will be like 99% conﬁdence intervals
for Ni(t), i = 1, 2, 3.
23.4
References
1. J.C.Frauenthal: Introduction to Population Modeling, The UMAP Ex-
pository Monograph Series, Education Development Center, 1979.
2. R.M.May and W.J.Leonard: Nonlinear Aspects of Competition Be-
tween Three Species, SIAM J. Applied Mathematics, 29(1975)243-253.

Chapter 24
Flying a Glider
24.1
Introduction
This application was taken from a problem in ([1], p.188). Consider ﬂying
a glider at speed v making an angle θ with the horizontal. We measure θ
positively in the counter clockwise direction and negatively in the clockwise
direction. The system of nonlinear diﬀerential equations for the motion of
the glider is approximated by
˙v = −sin(θ) −Dv2,
(24.1)
v ˙θ = −cos(θ) + Dv2,
(24.2)
where ˙v ( ˙θ) is the time derivative of v (θ), D > 0 is the “drag” coeﬃcient
and the initial conditions are v(0) = v0, θ(0) = θ0
24.2
Parameters
The parameters are just D and the two initial conditions. Let us assume that
the initial conditions are known and crisp. The drag coeﬃcient D is diﬃcult
to obtain an exact value, so we ask some experts to estimate D (Chapter 3).
The result is a triangular fuzzy number estimator for D. The values of the
parameters are given in Table 24.1.
Using a fuzzy parameter D we get fuzzy diﬀerential equations and the
solutions v(t) and θ(t) are also fuzzy. The solutions will be fuzzy trajectories
so that any cut through the fuzzy trajectories for ﬁxed t produces a fuzzy
number. We want to ﬁnd the band of maximum uncertainty which is the
graph of the bases of the fuzzy numbers, or v(t)[0] and θ(t)[0] the α = 0 cut.
Next we need to choose the values of the fuzzy parameters in their α =
0 cut to approximate the outer boundary of the α = 0 cut of the fuzzy
trajectory for v(t) and θ(t). As discussed in Chapter 6 if ω = (ω1/ω2/ω3) is a
163

164
CHAPTER 24. FLYING A GLIDER
Parameter
Crisp/Fuzzy Value
D
D = (0.0005/0.0010/0.0015)
v0
132 ft/sec (90mph)
θ0
−0.5236 rads (-30 degrees)
Table 24.1: Crisp/Fuzzy Parameters in the Glider Model
fuzzy parameter we (usually) use ω = ω1, ω2 and ω3. If we do this for D we get
only 3 curves for v(t) and 3 graphs for θ(t) for a very minimal approximation
to v(t)[0] and θ(t)[0]. So let us choose more values for D ∈D[0]. We will use
D = 0.0005, 0.0006, ..., 0.0014, 0.0015 for eleven values. Therefore we will get
11 curves for both v(t) and θ(t). These are shown in Figures 24.2 and 24.3.
The system diagram for Simulink is in Figure 24.1.
In Figure 24.2 (24.3) the reader can determine, from consulting Section
1.5.4, v(t) (θ(t)) when we used for D: (1)the left end point of its α = 0 cut;
(2) the right end point of its α = 0 cut; and (3) its α = 1 value.
velocity
theta
v.mat
Velocity File
theta.mat
Theta File
Subtract1
Subtract
1
s
Integrator1
1
s
Integrator
sin(u[1])
Fcn2
cos(u[2])/u[1]
Fcn1
D*v*v
−K−
D
Figure 24.1: Simulink Diagram for the Glider Example

24.3. SIMULATION
165
0
20
40
60
80
100
120
140
160
180
200
0
20
40
60
80
100
120
140
Figure 24.2: Fuzzy Trajectory for Velocity v(t)[0] in the Glider Example
24.3
Simulation
We ﬁrst discuss how Simulink simulates the system using Figure 24.1. The
top loop computes v(t) and the bottom loop calculates θ(t). The input to
“Integrator” is the right side of equation (24.1) and the input to “Integrator1”
is the right side of equation (24.2) after solving for ˙θ.
The output from
“Integrator” is v(t) which travels to: (1) the top loop for calculating Dv2
for input to “Subtract”; (2) “Fcn1” which computes
cos(θ(t))
v(t)
for input to
“Subtract1” and “Integrator1”; (3) a “Scope” called “velocity” for its graph;
and (4) “Subtract1”. So we also see how θ(t) gets computed from equation
(24.2). The boxes called “File” gathers all the data so that we may graph all
eleven curves in one ﬁgure. Chapter 28 has these details. There are also other
items to set/choose, like simulation time and type of numerical integrator,
which we will not discuss here (see Chapter 28).
Let v(t)[0] = [v1(t, 0), v2(t, 0)]. In Figure 24.2 connect the upper boundary
with a smooth curve which is our approximation to v2(t, 0) and connect the
lower boundary with a smooth curve producing an approximation to v1(t, 0).
The horizontal axis is time (seconds) and the vertical axis is the velocity
(feet/sec) of the glider. Assuming the glider is coming in for a landing we
should plan on it between 40 and 80 seconds. The uncertainty band is not
large and we could probably land anytime after 40 seconds.
Let θ(t)[0] = [θ1(t, 0), θ2(t, 0)]. In Figure 24.3 connect the upper boundary

166
CHAPTER 24. FLYING A GLIDER
0
20
40
60
80
100
120
140
160
180
200
−1
−0.8
−0.6
−0.4
−0.2
0
0.2
0.4
0.6
0.8
Figure 24.3: Fuzzy Trajectory for Angle θ(t)[0] in the Glider Example
with a smooth curve which is our approximation to θ2(t, 0) and connect the
lower boundary with a smooth curve producing an approximation to θ1(t, 0).
The horizontal axis is time (seconds) and the vertical axis is the angle (in
radians) the glider makes with the horizontal. We want to land when the
nose of the glider is almost horizontal (θ ≈0). The uncertainty band shows
that we can expect θ ≈0 for t ≈40 seconds. Plan to land at 40 seconds. But,
at about t = 20 seconds we have uncertainty θ = 0.10 rads (+5.7 degrees)
to θ = 0.62 rads (+35 degrees). The nose of the glider up 35 degrees from
the horizontal could be dangerous. But after 40 seconds we see it is possible
for θ ≈−0.95 (−54 degrees) which is certainly dangerous.
If all the uncertain parameters are estimated from data (Chapter 3), with
none from expert advice, then the base of the fuzzy estimator is a 99% con-
ﬁdence interval. Using all of these conﬁdence intervals we get v(t)[0] and
θ(t)[0], so these bands of uncertainty will be like 99% conﬁdence intervals for
v(t) and θ(t).
24.4
Reference
1. S.H.Strogatz: Nonlinear Dynamics and Chaos, Addison-Wesley, Read-
ing, MA., 1994.

Chapter 25
The National Economy
25.1
Introduction
This application was adopted from a problem in ([1], p.86). This is a simple
(beginning) model for the national economy of some country. The system of
linear diﬀerential equations is
˙I = I −aC,
(25.1)
˙C = b(I −C −G),
(25.2)
where I= the national income, C= the rate of consumer spending, G= the
rate of government expenditures and ˙I ( ˙C) is the time derivative of I (C).
Two of the parameters are a and b so that a > 1 and b ≥1.
We wish
to investigate three cases: (1) case #1 G = G0 a constant; (2) case #2
G = G0 + kI for k > 0 ; and (3) case #3 G = G0 + kI1.1 with k > 0. The
initial conditions are I(0) = I0 and C(0) = C0.
These are linear diﬀerential equations so we could easily ﬁnd the solu-
tions. However, even using simple solutions it can be complicated to ﬁnd the
boundary of the band of uncertainty, or the boundary of I(t)[0]) and C(t)[0],
as shown in Section 6.2. So we omit expressions for the exact solutions and
will use simulation instead.
25.2
Parameters
All the parameters are a, b, G0, k and the two initial conditions. Let us
assume that the government eﬀect is fuzzy (a reasonable assumption) and
the other parameters are all known and crisp. This means that a, b, I0 and
C0 are all crisp but G0 and k will be fuzzy. Our fuzzy estimators for G0 and
k will be triangular fuzzy numbers, obtained from expert opinion or from
data (Chapter 3), and all the parameter values are given in Table 25.1.
167

168
CHAPTER 25. THE NATIONAL ECONOMY
Parameter
Crisp/Fuzzy Value
G0
G0 = (20, 000/30, 000/40, 000)
k
k = (0.04/0.05/0.06)
a
1.5
b
1.0
I0
$100, 000
C0
$80, 000
Table 25.1: Crisp/Fuzzy Parameters in the National Economy Model
Using fuzzy parameters we get fuzzy diﬀerential equations and the solu-
tions I(t) and C(t) are also fuzzy. The system now becomes a continuous
fuzzy system whose trajectories are fuzzy so that any slice through a trajec-
tory at some time tz is a fuzzy number. We wish to estimate the band of
uncertainty which is I(t)[0] and C(t)[0], or the α = 0 cuts.
Next we need to choose the values of the fuzzy parameters in their α =
0 cut to approximate the outer boundary of the α = 0 cut of the fuzzy
trajectory for the national income and the rate of consumer spending. As
discussed in Chapter 6 if ω = (ω1/ω2/ω3) is a fuzzy parameter we use ω = ω1,
ω2 and ω3. We do this for G0 and k giving three curves for case #1 and 32 = 9
curves for I(t) and C(t) in the other cases, for a minimal approximation to
I(t)[0] and C(t)[0]. These are shown in Figures 25.2 - 25.7. The systems
diagram for Simulink is in Figure 25.1.
In Figures 25.2-25.7 the reader can determine, from consulting Section
1.5.4, I(t) (C(t)) when we used for the fuzzy parameters: (1) all left end
points of their α = 0 cut; (2) all right end points of their α = 0 cut; and (3)
their α = 1 values.
25.3
First Simulation: Case #1
Here we assume that G = G0. We ﬁrst discuss the Simulink diagram in Figure
25.1. The upper loop computes I(t) and the lower loop gets C(t). The input
to “Integrator” is the right side of equation (25.1). The input to “Integrator1”
is the right side of equation (25.2). Let us look at the bottom loop. The box
“Add” calculates kI +G0 = G for input to “Subtract2”. We have case #1 for
k = 0. The other inputs to “Subtract2” are I(t) and C(t). The output from
“Subtract2” gets multiplied by b before input to “Integrator1”. The “Scopes”
labeled “National Income” and “Consumer Spending” are for single graphs of
I and C. The boxes labeled “File” collect all the data so that we can present
all graphs in one ﬁgure. Chapter 28 has details on how this is accomplished.
There are also other items to set/choose, like step size and type of numerical
integrator, which we will not discuss here (see Chapter 28).

25.4. SECOND SIMULATION: CASE #2
169
1
power
0
k
1.0
b
1.5
a
Subtract2
Subtract
C.mat
Spending File
National Income
1
s
Integrator1
1
s
Integrator
I.mat
Income File
−K−
G0
u(1)^u(2)
Fcn
Consumer Spending
1
Constant1
1
Constant
Add
Figure 25.1: Simulink Diagram for the National Economy Model
Let I(t)[0] = [I1(t, 0), I2(t, 0)]. In Figure 25.2 connect the upper boundary
with a smooth curve which is our approximation to I2(t, 0) and connect the
lower boundary with a smooth curve producing an approximation to I1(t, 0).
The horizontal axis is time and the vertical axis is national income. We have
oscillatory motion With I(t) possibly varying between 10, 000 and 15, 000.
Let C(t)[0] = [c1(t, 0), c2(t, 0)]. In Figure 25.3 connect the upper bound-
ary with a smooth curve which is our approximation to c2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
c1(t, 0). The horizontal axis is time and the vertical axis is the rate of con-
sumer spending.
We have oscillatory motion With C(t) possibly varying
between zero and 11, 000.
If all the uncertain parameters are estimated from data (Chapter 3), and
none from expert opinion, then the base of the fuzzy estimator is a 99%
conﬁdence interval. Using all of these conﬁdence intervals we get I(t)[0] and
C(t)[0], so these bands of uncertainty will be like 99% conﬁdence intervals
for I(t) and C(t), respectively.
25.4
Second Simulation: Case #2
Now we assume that G = G0 + kI.

170
CHAPTER 25. THE NATIONAL ECONOMY
0
2
4
6
8
10
12
0
2
4
6
8
10
12
14
16 x 10
4
Figure 25.2: Fuzzy Trajectory for National Income I(t)[0] in the First Na-
tional Economy Model
0
2
4
6
8
10
12
0
2
4
6
8
10
12 x 10
4
Figure 25.3: Fuzzy Trajectory for Consumer Spending C(t)[0] in the First
National Economy Model

25.4. SECOND SIMULATION: CASE #2
171
0
20
40
60
80
100
120
140
160
180
200
0.2
0.4
0.6
0.8
1
1.2
1.4
1.6
1.8 x 10
5
Figure 25.4: Fuzzy Trajectory for National Income I(t)[0] in the Second
National Economy Model
0
20
40
60
80
100
120
140
160
180
200
0
2
4
6
8
10
12
14 x 10
4
Figure 25.5: Fuzzy Trajectory for Consumer Spending C(t)[0] in the Second
National Economy Model

172
CHAPTER 25. THE NATIONAL ECONOMY
0
20
40
60
80
100
120
140
160
180
200
0
0.5
1
1.5
2
2.5
3 x 10
5
Figure 25.6: Fuzzy Trajectory for National Income I(t)[0] in the Third Na-
tional Economy Model
Let I(t)[0] = [I1(t, 0), I2(t, 0)]. In Figure 25.4 connect the upper boundary
with a smooth curve which is our approximation to I2(t, 0) and connect the
lower boundary with a smooth curve producing an approximation to I1(t, 0).
The horizontal axis is time and the vertical axis is national income.
We
get a very interesting result.
We see that limt→∞I2(t, 0) ≈135, 000 and
limt→∞I1(t, 0) ≈65, 000.
The uncertainty band is approximately 70, 000
which is quite large.
Let C(t)[0] = [c1(t, 0), c2(t, 0)]. In Figure 25.5 connect the upper bound-
ary with a smooth curve which is our approximation to c2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
c1(t, 0). The horizontal axis is time and the vertical axis is the rate of con-
sumer spending. Another interesting result. We see that limt→∞C2(t, 0) ≈
90, 000 and limt→∞C1(t, 0) ≈45, 000.
The uncertainty band is approxi-
mately 45, 000 which is somewhat large.
There is too much uncertainty and we should try to get less fuzzy esti-
mators for G0 and k.
25.5
Third Simulation: Case #3
Finally, we assume that G = G0 + kI1.1.

25.5. THIRD SIMULATION: CASE #3
173
0
20
40
60
80
100
120
140
160
180
200
0.2
0.4
0.6
0.8
1
1.2
1.4
1.6
1.8 x 10
5
Figure 25.7: Fuzzy Trajectory for Consumer Spending C(t)[0] in the Third
National Economy Model
Let I(t)[0] = [I1(t, 0), I2(t, 0)]. In Figure 25.6 connect the upper bound-
ary with a smooth curve which is our approximation to I2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
I1(t, 0). The horizontal axis is time and the vertical axis is national income.
We get an interesting result.
We see that limt→∞I2(t, 0) ≈200, 000 and
limt→∞I1(t, 0) ≈75, 000. The uncertainty band is approximately 125, 000
which is very large.
Let C(t)[0] = [c1(t, 0), c2(t, 0)]. In Figure 25.7 connect the upper bound-
ary with a smooth curve which is our approximation to c2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
c1(t, 0). The horizontal axis is time and the vertical axis is the rate of con-
sumer spending. Another interesting result. We see that limt→∞C2(t, 0) ≈
130, 000 and limt→∞C1(t, 0) ≈53, 000. The uncertainty band is approxi-
mately 77, 000 which is quite large.
There is too much uncertainty and we should try to get less fuzzy esti-
mators for G0 and k.

174
CHAPTER 25. THE NATIONAL ECONOMY
25.6
Reference
1. D.W.Jordan and P.Smith: Nonlinear Ordinary Diﬀerential Equations,
Third Edition, Oxford University Press, Oxford, UK, 2004.

Chapter 26
Sex Structured Population
Models
26.1
Introduction
This model comes from Chapter 25 in [1]. The example we will look at is
considered a “two-sex” model (we could look at three groups like unmarried
females, unmarried males and couples) and an “age independent” model. The
system of nonlinear diﬀerential equations to start with is
˙F = −µfF + bfΨ(F, M),
(26.1)
˙M = −µmM + bmΨ(F, M),
(26.2)
where F(t) = the number of females in the population, M(t) = the number
of males in the population, µfF the number of females dying per time unit,
µmM the number of males dying per time unit, bfΨ(F, M) the number of
female births per time unit, bmΨ(F, M) the number of male births per time
unit and Ψ(F, M) some generally unknown function of F and M. The “dot”
notation is for the time derivative. The population need not be people be-
cause we could be modeling squirrels, spiders, etc. The initial conditions are
F(0) = F0 and M(0) = M0.
There are various choices for Ψ [1]: (1) Ψ(F, M) = FM (law of mass
action); (2) Ψ(F, M) = F (female dominance); (3) Ψ(F, M) = M (male dom-
inance); (4) Ψ(F, M) =
√
FM (geometric mean); (5) ψ(F, M) = min(F, M)
(min rule); and (6) ψ(F, M) = 2F M
F +M (harmonic mean). We will employ the
harmonic mean function. So the system becomes
˙F = −µfF + bf
2FM
F + M ,
(26.3)
˙M = −µmM + bm
2FM
F + M .
(26.4)
175

176
CHAPTER 26. SEX STRUCTURED POPULATION MODELS
Parameter
Fuzzy/Crisp Value
bf
bf = (0.0074/0.0084/0.0094)
bm
bm = (0.00769/0.00869/0.00969)
µf
µf = (0.0071/0.0081/0.0091)
µm
µm = (0.0080/0.0090/0.0100)
F0
131, 983, 000
M0
125, 800, 000
Table 26.1: Fuzzy/Crisp Parameters in Sex Structured Population Model
26.2
Parameters
Let us now concentrate on modeling the population of people in some country.
The parameters are µf, µm, bf, bm and the initial conditions. There are six
parameters and we will consider four of them to be fuzzy. Assume that the
initial conditions are all known and crisp so that µf, µm, bf and bm are
not known precisely.
Using expert opinion (Chapter 3) we get triangular
fuzzy number estimators for these four parameters. The values of all the
parameters are in Table 26.1.
Using fuzzy parameters we get fuzzy diﬀerential equations and the solu-
tions F(t) and M(t) are also fuzzy. The system now becomes a continuous
fuzzy system whose trajectories are fuzzy so that any slice through a trajec-
tory at some time tz is a fuzzy number. We wish to estimate the band of
uncertainty which is F(t)[0] and M(t)[0], or the α = 0 cuts.
Next we need to choose the values of the fuzzy parameters in their α =
0 cut to approximate the outer boundary of the α = 0 cut of the fuzzy
trajectory for the population of females and males. As discussed in Chapter
6 if ω = (ω1/ω2/ω3) is a fuzzy parameter we use ω = ω1, ω2 and ω3. We do
this for µf, µm, bf and bm giving 34 = 81 curves for F(t) and 81 graphs for
M(t) for a minimal approximation to F(t)[0] and M(t)[0]. These are shown
in Figures 26.2 and 26.3. The systems diagram for Simulink is in Figure 26.1.
In Figure 26.2 (26.3) the reader can determine, from consulting Section
1.5.4, F(t) (M(t)) when we used for the fuzzy parameters: (1) all left end
points of their α = 0 cut; (2) all right end points of their α = 0 cut; and (3)
their α = 1 values. However, in this application all three curves appear to
coincide.
26.3
Simulation
We ﬁrst discuss the Simulink diagram in Figure 26.1. The top loop computes
F(t) and the bottom loop is for M(t).
Both loops are similar so let us
only talk about the top loop.
The input to “Integrate F ′ ” is the right

26.3. SIMULATION
177
Subtract1
Subtract
Scope M
Scope F
M.mat
Male File
1
s
Integrate M‘
1
s
Integrate F‘
−K−
GainMum
−K−
GainMuf
−K−
GainBm
−K−
GainBf
F.mat
Female File
f(u)
(2FM)/(F+M)
Figure 26.1: Simulink Diagram for the Sex Structured Population Model
side of equation (26.3) and its output is F(t). F(t) travels: (1) around a
top loop where it gets multiplied by µf before input to “Subtract”; (2) to
the box “f(u)” which calculates 2FM/(F + M) which is then multiplied by
bf for input to “Subtract”; and (3) to “Scope F” for its graph. The box
“Female File” collects all the data so that we can present all the graphs in
one ﬁgure. Chapter 28 explains how to do this. There are also other items
to set/choose, like simulation time and type of numerical integrator, which
we will not discuss here (see Chapter 28).
Let F(t)[0] = [f1(t, 0), f2(t, 0)]. In Figure 26.2 connect the upper bound-
ary with a smooth curve which is our approximation to f2(t, 0) and connect
the lower boundary with a smooth curve producing an approximation to
f1(t, 0). The horizontal axis is time and the vertical axis is the number of
females in the population. We see that in over 1000 time units the female
population can decrease or it can quickly increase. The uncertainty band
after 1000 time units is extremely large at approximately 9.6(10)8. The three
curves colored red, black and blue (see Section 1.5.4) approximately coincide
in this application and show up as a single black (slightly blue in the online
publication) curve.
Let M(t)[0] = [m1(t, 0), m2(t, 0)].
In Figure 26.3 connect the upper
boundary with a smooth curve which is our approximation to m2(t, 0) and
connect the lower boundary with a smooth curve producing an approximation

178
CHAPTER 26. SEX STRUCTURED POPULATION MODELS
0
100
200
300
400
500
600
700
800
900
1000
0
1
2
3
4
5
6
7
8
9
10 x 10
8
Figure 26.2: Fuzzy Trajectory for Females F(t)[0] in the Sex Structured
Population Model
0
100
200
300
400
500
600
700
800
900
1000
0
1
2
3
4
5
6
7
8
9
10 x 10
8
Figure 26.3: Fuzzy Trajectory for Males M(t)[0] in the Sex Structured Pop-
ulation Model

26.4. REFERENCES
179
to m1(t, 0). The horizontal axis is time and the vertical axis is the number
of males in the population. Over the interval [0, 1000] the male population
can continuously decrease or it can rapidly increase. The uncertainty band
at t = 1000 is approximately 8.9(10)8. The three curves colored red, black
and blue (see Section 1.5.4) approximately coincide in this application and
show up as a single black (slightly blue in the online publication) curve.
The uncertainty band for both populations continues to grown without
bound as t →∞. Since the uncertainty grows so large in increasing time it
is impossible to make any realistic predictions.
If all the uncertain parameters are estimated from data (Chapter 3), so
none are from expert advice, then the base of the fuzzy estimator is a 99%
conﬁdence interval. Using all of these conﬁdence intervals we get F(t)[0] and
M(t)[0], so these bands of uncertainty will be like 99% conﬁdence intervals
for F(t) and M(t), respectively.
26.4
Reference
1. M.Kot:
Elements of Mathematical Ecology, Cambridge University
Press, Cambridge, UK, 2001.

Chapter 27
Summary and Future
Research
27.1
Summary
This book is about analyzing continuous time fuzzy dynamical systems (just
“continuous fuzzy systems” for short). We start with a continuous time crisp
(not fuzzy) dynamical system (just “continuous system” for short).
This
continuous system is described by a system of ordinary diﬀerential equations
(ODEs). Let x(t) and y(t) be two variables in the system we wish to study.
That is, x(t) and y(t) are solutions to the system of ODEs.
We look at
the graphs (trajectories) of x(t) and y(t) to see how the system evolves for
increasing time. Usually the “closed form” mathematical solutions for x(t)
and y(t) are complicated, we could have nonlinear systems of ODEs, so we
will use crisp continuous simulations to obtain the graphs of x(t) and y(t).
The system of ODEs contains a number of parameters whose values must
be known to construct the trajectories of x and y. We could know the exact
values of some of these parameters but the other parameters have uncertain
values. For these uncertain parameters we obtain estimates for use in the
model.
Usually one uses point estimates (single values) for the uncertain
parameters in the system of ODEs.
However, there is uncertainty in the
values of these parameters which is not shown in their point estimators and
the resulting crisp solutions x(t) and y(t). One might consider using inter-
val estimators (possibly conﬁdence intervals) for the uncertain parameters.
We propose using fuzzy number estimators transforming the crisp system of
ODEs to a fuzzy system of ODEs.
Alternatively, one could consider the values of the uncertain parameters
to be generated by random variable. Then we would get a system of stochas-
tic ODEs to solve. We used only fuzzy estimators in this book and never
considered uncertain parameters to be values of random variables.
181

182
CHAPTER 27. SUMMARY AND FUTURE RESEARCH
Chapter 3 discusses the two methods of fuzzy estimation we used in this
book.
They are: (1) from expert opinion; and (2) from crisp data.
The
“from crisp data” procedure involves placing conﬁdence interval one on top
of another to construct a triangular shaped fuzzy number estimator. Either
method produces a triangular (shaped) fuzzy number estimator for the values
of the uncertain parameters in the system. This transforms the system of
ODEs into a system of fuzzy ODEs to solve. Using fuzzy parameters we get
fuzzy diﬀerential equations and the solutions x(t) and y(t) are also fuzzy.
The system now becomes a continuous fuzzy system whose trajectories are
fuzzy so that any slice through a trajectory at some time t is a triangular
shaped fuzzy number. In all the applications we use triangular fuzzy numbers,
not triangular shaped fuzzy numbers, for fuzzy estimators. Triangular fuzzy
number inputs makes the fuzzy trajectories triangular shaped fuzzy numbers.
We wish to estimate the maximal band of uncertainty in the system which
is x(t)[0] and y(t)[0], or the α = 0 cuts. These will be the bases of the fuzzy
numbers.
In the crisp system of ODEs let ai, i = 1, 2, 3, ..., k, be the uncertain
parameters which now have fuzzy number estimators ai, 1 ≤i ≤k. All the
other parameters are assumed to be known and crisp. Let
Ωx(t) = {x(t)|ai ∈ai[0], i = 1, ..., k}.
(27.1)
Ωx(t) is all solutions x(t) to the crisp system of ODEs for all values of the
uncertain parameters in their α = 0 cut.
An objective of the book is to
estimate Ωx(t), which we also call the band of uncertainty in the solution
due to the uncertainty in the values of some of the parameters.
Now Ωx(t) = x(t)[0]. Let x(t)[0] = [x1(t, 0), x2(t, 0)], t ≥0. The bound-
ary of Ωx(t) is given by x1(t, 0) (lower boundary) and x2(t, 0) (upper bound-
ary). So we want to employ crisp continuous simulation to approximate the
curves xi(t, 0), i = 1, 2. Consider graphing the triangular shaped fuzzy num-
bers x(t), t ≥0, in three dimensions. For each ﬁxed t the base of the trian-
gular shaped fuzzy number x(t) will be on the interval [x1(t, 0), x2(t, 0)] and
its vertex at x1(t, 1) = x2(t, 1). We do not do the graphs in three dimensions
but approximate the graphs of the xi(t, 0) in two dimensions superimposing
the graph of the vertex.
Finding the curves xi(t, 0) in general is an unsolved problem. We show
in Section 6.2, for a second order, linear, constant coeﬃcient ODE, the con-
struction of x1(t, 0) and x2(t, 0) is surprisingly complicated. Therefore, we
decided to employ crisp continuous simulation to obtain approximations to
the boundary of Ωx(t).
The ideal solution to approximate the boundary of Ωx(t) would be to get
the graph of x(t) as the ai go through many selected values in their α = 0
cut, 1 ≤i ≤k. Suppose k = 5 and we pick 10 values for each ai. That gives
us 105 graphs. Too many graphs. Each such graph takes too much time and
too much space in the computer for a book with over 100 such graphs. So

27.2. FUTURE RESEARCH
183
we had to make some compromises. This is discussed in Chapter 6. In this
book the most numbers of graphs in one ﬁgure was 729 and the least was 3.
We hope these ﬁgures will give the reader an indication of what x(t) looks
like.
The applications are presented in Chapters 7-26. In each application we:
(1) ﬁrst give the system of ODEs ; (2) then discuss the fuzzy estimation
of the uncertain parameters; (3) decide on how to choose the fuzzy ai in
their α = 0 cut to approximate the boundary of Ωx(t); (4) discuss how
our continuous simulator simulated the system; and (5) present and discuss
the graphs. The applications are diverse, ranging from bungee jumping to
the AIDS epidemic to planetary motion. Because of the many and varied
applications presented, this book provides not only an excellent introduction
to the simulation of continuous fuzzy systems, but it also provides clear and
usable Matlab examples on which one may build. Chapter 28 describes the
Matlab/Simulink method and how one may obtain source to all the examples.
What is new in this book is: (1)we argue that many crisp continuous
dynamical systems naturally become fuzzy through fuzzy estimation of the
uncertain initial conditions and parameters; (2) we ﬁnd an approximation
to the band of uncertainty which is the trajectory of the bases of the fuzzy
number trajectories; and (3) we apply this to numerous diverse applications
using the readily available simulation language Simulink [2].
27.2
Future Research
Future research is to present the graphs of the fuzzy trajectories in three
dimensions. But ﬁrst we need to obtain better estimates of the curves x1(t, 0)
and x2(t, 0), or the boundary of Ωx(t).
Also, there is the possibility of a lot of future research on a number of the
models we investigated in Chapters 7-26. Consider Chapter 17, the AIDS
Epidemic, where there were 11 parameters (see Table 17.1) and we allowed
only two of them to be fuzzy. In Chapter 17 we looked at a very limited
fuzzy model. What happens if more/other parameters are fuzzy? The band
of uncertainty will change but will it grow substantially?
27.3
Conclusions
This book, a companion to [1], argues that many crisp continuous time dy-
namical systems become fuzzy when uncertain parameters in the model have
fuzzy estimators.
The values of uncertain parameters must be estimated
and we have shown how they can have fuzzy estimators. These two books
together we hope simulates interest in fuzzy systems theory.

184
CHAPTER 27. SUMMARY AND FUTURE RESEARCH
27.4
References
1. J.J.Buckley:
Simulating Fuzzy Systems, Springer, Heidelberg, Ger-
many, 2005.
2. www.mathworks.com

Chapter 28
Matlab/Simulink
Commands for Graphs
28.1
Introduction
We chose Matlab/Simulink [1] as the tool for our simulation because of its
capabilities, ease of use, availability, and cost. The diagrams presented herein
were created and executed under MatLab Version 7.0.1.24704 (R14) Service
Pack 1, but are believed to be compatible with earlier versions and with the
student version. The diagrams are created under Simulink and will perform
a simulation using the default values, but for the graphs presented, each
diagram is controlled by a corresponding Matlab program.
Figure 28.1: Process Flow for Simulations
As shown in Figure 28.1, the Simulink model ﬁle (.mdl) is processed by
Matlab using the Matlab M-File command ﬁle (.m) to generate an encap-
sulated Postscript (.eps) ﬁle of the model diagram and results as Matlab
matrix ﬁles (.mat). Subsequently, the same .m ﬁle processes the .mat ﬁles to
185
generate color results plots (.eps).

186
CHAPTER 28. MATLAB/SIMULINK COMMANDS FOR GRAPHS
220
mu
Sum of
Elements1
Sum of
Elements
Scope
Saturation
1
s
Integrator1
1
s
Integrator
2.5
Gain k
1.4
Gain c
0.145
Gain
150
Constant
a.mat
Altitude File
1
1
Figure 28.2: Simulink Diagram
28.2
Simulink Diagrams (.mdl ﬁles)
In our Simulink diagrams, we use basic Simulink icons and require no tool-
boxes. From the Matlab window, one may click on the Simulink icon to see
the Library browser. Most of the library items we use are from SOURCES,
SINKS, MATH OPERATIONS, CONTINUOUS (for the Integrator block)
and DISCONTINUITIES (for the Saturation block). The building of the
simulation diagram is straight-forward using drag-and-drop.
The Bungee
Jumping Example from Chapter 9, is used as an example here. Figure 28.2
is the diagram for it.
28.3
Parameters
From Matlab, many of the parameters in a Simulink diagram are modiﬁable
(e.g., set_param(’Model.GainC’,’Gain’,num2str(GainC));
to change
‘Gain c’ in Figure 28.2), but our experience was that not all are.
In or-
der to perform the multiple executions necessary for fuzzy systems, it was
necessary to make Constant fuzzy parameters modiﬁable. This we did us-
ing a Constant 1 followed by a Gain; e.g., mu in Figure 28.2. The initial

28.3. PARAMETERS
187
condition of an Integrator is embedded in the block as “Initial condition”.
We found that to modify the “Initial condition”, it must be addressed as
“Initialcondition”. Except for these issues, control of simulation parameters
was also straight-forward.
Figure 28.3: Simulink Conﬁguration Parameters
For all of the simulation diagrams, there are some simulation con-
ﬁguration settings to be considered.
To get to the conﬁguration set-
tings,
from a Simulink window we click Simulation and then click
Configuration Parameters. Figure 28.3 is a screen shot of the window in
which the settings may be modiﬁed. After some research, tests and analysis,
we chose the Bogacki-Shampine ode23 numerical integrator. Matlab provides
options of solvers and describes the Bogacki-Shampine explicit continuous
solver as its one of moderate complexity [1]. We found it adequate for our
purposes. “Start time” starts at zero and “Stop time” is speciﬁc to each
model. Rather than make the “Stop time” speciﬁc to each run, we some-
times “covered” the longest simulation of a set, and reported the signiﬁcant
period of the result. Under “Solver options,” we chose our “tolerances” at
0.0001.
We found a “Max step size” of 0.05 generated acceptable results
without generating excessively ﬁne plots. For “Zero crossing control”, we
used local settings. All other settings in conﬁguration parameters are the
Matlab default parameters. These settings we used for all simulations.
Within the “Integrator” blocks there are options also. Except to set initial
values of the integrator output, we stayed with the default settings.

188
CHAPTER 28. MATLAB/SIMULINK COMMANDS FOR GRAPHS
28.4
Matlab Commands (.m ﬁles)
The command ﬁle creates a work copy of the simulation model; this is done
to protect the model from subsequent modiﬁcations. To make certain that
we do not have superﬂuous windows or ﬁles open, we ﬁrst use bdclose to
close all windows. For the diagram of Figure 28.2, we begin:
bdclose(’all’);
% unconditionally close
copyfile(’Test031.mdl’,’Model.mdl’); % to work out of a copy
sim(’Model’); open(’Model’);
% open the copy
print -sModel T031.eps;
% make a B/W eps
Because we use a couple of common routines (.m ﬁles) for all simulations,
and we may use them in multiple runs, we set a path for them early.
path(path,’..\’);
% path to .m subroutines
Then we execute the simulation with for-loops to cover the supports of
the fuzzy parameters, taking care to include the core as the middle value.
For any given simulation run (see example below), we might set some crisp
parameters before the for-loops. In the diagram of Figure 28.2, for Chapter
9 ‘Gain k’ is not a fuzzy parameter, but is diﬀerent for each run. Hence, it
is set outside the for-loops. ‘mu’ and ’Gain c’ are fuzzy; so we implement
for-loops to cover the fuzziness. The output of the run is to be captured so
the name of the Altitude ﬁle is set. Finally we execute the model.
filecount=1000;
set_param(’Model/Gain k’, ’Gain’, num2str(2.5)); % ---- RUN 1
for mu=120:50:220
set_param(’Model/mu’, ’Gain’, num2str(mu));
for GainC=1.0:0.2:1.4
set_param(’Model/Gain c’, ’Gain’, num2str(GainC));
filecount=filecount+1;
set_param(’Model/Altitude File’,
’Filename’,[’data/A’ num2str(filecount) ’.mat’])
sim(’Model’); open(’Model’);
end % Gain c
end % mu
filecount-1000
% show the number of files created.
The management of ﬁles could be an issue since we generate thousands of
them for some simulations. We do a few things to facilitate the handling of
the ﬁles. We create them in a subdirectory so they do not clutter our working
directory. We assign a number (excess 1000) to each pass of the for-loops;
and include that number in the name of the ﬁle(s) created.
Here we see how to invoke colorplot12 and then create a color EPS ﬁle.
At the end of each simulation run, we create the appropriate result plots

28.4. MATLAB COMMANDS (.M FILES)
189
using one of two subroutines, colorplot12 or colorplot23.
After returning
from colorplot we capture a color EPS ﬁle of the plot. For most chapters
we create multiple colorplots. For some, before capture, we adjust the axes
using the Matlab axis command. For example, v=axis; v(2)=12; axis(v)
would limit the x-axis to 12.
colorplot12(’Altitude’, ’data/A’, filecount);
print -depsc T031r1_Altitude.eps
The diﬀerence between colorplot12 and colorplot23 is where in the loaded
matrix the routine expects to ﬁnd the data to be plotted. Both of the routines
are .m ﬁles in the common area pointed to by the path statement. Because the
fuzzy parameters have been emulated by symmetric triangular fuzzy numbers,
colorplot can determine where the alpha=1 cut occurs for all parameters. We
chose to ﬁrst plot all curves in green. Then, since our parameters all start at
the left support, and end at the right support, we overlay in red the curve
created using left supports, in blue the curve created using right supports,
and ﬁnally in black the curve created using vertices.
function f = colorplot12(theTitle, thePrefix, theCount)
% this colorplot is for ans(1,:) with ans(2,:)
% theTitle --- the title to put on the plot
% thePrefix --- the prefix to the contructed name of the file
% theCount --- the number of files to be used in the plot
theCount
midcount=fix(theCount/2)-500+1001
hold off; clf; %title(theTitle);
for count=1001:1:theCount
load([thePrefix num2str(count) ’.mat’])
plot(ans(1,:),ans(2,:),’g’,’LineWidth’,1)
hold on;
end % count
load([thePrefix num2str(1001) ’.mat’])
plot(ans(1,:),ans(2,:),’r--’,’LineWidth’,3)
load([thePrefix num2str(theCount) ’.mat’])
plot(ans(1,:),ans(2,:),’b-.’,’LineWidth’,2)
load([thePrefix num2str(midcount) ’.mat’])
plot(ans(1,:),ans(2,:),’k’,’LineWidth’,2)
f=0;
Of the colorplot parameters, we do not use ‘theTitle’ for the book re-
sults, though titles on loose plots are very helpful in research.
The ﬁrst
executable Matlab statement, theCount, because it does not terminate with
a semi-colon, causes the parameter value to print in the Matlab command
window; this provides a trace mechanism to monitor progress of simulations.
midcount=... determines the index of the alpha=1 curve (recall that the

190
CHAPTER 28. MATLAB/SIMULINK COMMANDS FOR GRAPHS
count starts at 1000). To control the creation of multiple graphs, we use
hold off; clf; to clear the last graph created, and hold on; later to allow
the placement of additional traces on the same graph. The for-loop, sequen-
tially for all of the captured data, loads a matrix ﬁle of curve data and plots
with in green with width 1 on the same graph. Finally, the red, blue, and
black curves are plotted with wider widths, for “all left supports”, “all right
supports”, and “alpha=1” respectively. Note that the black curve may com-
pletely overlay a blue and/or red curve, and that because the width of the
red is 3, some red may still be visible.
28.5
Availability of Files
All of the Matlab .mdl and .m ﬁles used to create the Simulink diagrams and
result plots are available from the authors for free. They are distributed by
email without other documentation or any warranty as a single 140KB zip ﬁle.
For a copy of the ﬁle, please send an email request to jowersl@cis.uab.edu.
The distribution ﬁle will be an attachment to a reply. The zip ﬁle does contain
a suﬃcient directory structure to execute the ﬁles under Matlab/Simulink.
After unzipping the distribution ﬁle, from a Matlab command window make
the current directory ..\Tests, then use the run command to execute an .m
ﬁle; for example, run ’Test012c’.
28.6
Reference
1. http://www.mathworks.com

Index
age independent, 175
AIDS epidemic, 117, 120, 122, 183
air resistance, 63, 64, 81, 82
alpha-cut, 3, 5, 9, 10, 14, 46
arms race model, 19, 21, 44, 55
arrival rate, 1, 33
Belousov, 111
binomial distribution, 28
bioeconomics, 95
Bogacki-Shampine, 187
book on-line, 6
bungee jumping, 3, 63, 183, 186
bus routes, 1
calling source, 125, 133
cannon settings, 81, 84
capacitor, 87
carrying capacity, 49, 139, 141
chemical reaction, 111
chi-square distribution, 27
colorplot subroutine, 189
conﬁdence interval, 1, 2, 22, 53, 59,
64, 66, 79, 84, 93, 104, 115,
123, 128, 137, 141, 147, 154,
161, 166, 169, 179, 182
β, 3
µ, 30
p, 28, 29
conservation of mass and energy, 112
continuous fuzzy system, 50, 56, 64,
70, 76, 83, 89, 96, 106, 119,
126, 134, 146, 176
continuous variables, 4
crisp, 55, 76, 88, 96, 106, 111, 139,
145, 152, 158, 163, 167, 176
data, 2
estimator
σ2, unbiased, 30
point, 28, 30
function, 9
initial conditions, 18, 118
number, 4, 9
parameter, 96, 188
set, 4, 9
solution, 9
subset, 9
system, 33
zero, 96
crisp/fuzzy, 76, 82
customer, 63, 64, 66, 81, 125, 133, 134
arriving, 133
expected number, 134, 136
lost, 136
diﬀerence equations, 4
diﬀerential equation
second order, 18
discrete variables, 4
doves, 95–99, 102
drag coeﬃcient, 163
drug concentrations, 151
dynamical systems
continuous time, 1
crisp, 181
e-mail, Jowers, 190
ecosystem, 49, 50
electrical circuit, 18
electrical network, 87
electromotive force, 87
emergency rooms, 1
191

192
INDEX
EPS
color option, EPSC, 189
color plots, 186
diagram, 185
equilibrium, 107, 109, 145
estimators
fuzzy, 53, 59, 64, 66, 70, 74, 76,
79, 84, 93, 104, 115, 123,
126, 128, 131, 134, 137, 141,
146, 147, 154, 161, 166, 167,
169, 172, 173, 179
fuzzy number, 64, 128, 134, 152,
158
triangular fuzzy number, 76, 82,
128, 139, 152, 158, 163, 176
expert opinion, 2, 21, 35, 44, 64, 112,
139, 146, 158, 167, 176, 182
instead of, 59, 74, 79, 93, 115,
123, 141, 154, 169
exponential distribution, 27, 125, 133
extension principle, 4, 9, 12, 14
failure, 28
probability, 28
female dominance, 175
ﬁgures, 5
EPS, 41
LaTeX, 5, 39
Maple, 5, 24, 26, 27, 29, 30
Simulink, 6
Simulink color, 6
future research, 47, 183
fuzzify, 3, 18, 34, 45
fuzziness, 128
fuzzy, 119, 158, 163, 167, 168
fuzzy arithmetic, 12
addition, 12
alpha-cuts and interval arith-
metic, 14
division, 12
multiplication, 12
subtraction, 12
fuzzy arrival rate, 24
fuzzy currents, 93
fuzzy energy sources, 88, 93
fuzzy estimator, 1–3, 5, 12, 19, 22,
31, 33–35, 43, 47, 59, 126,
181–183
λ, 24
µ, 23, 27, 30
p, 29
fuzzy function, 9, 15–17
alpha-cuts and interval arith-
metic, 15–17
extension principle, 15, 17
membership function, 16
fuzzy graph, 97, 147
fuzzy inﬂation, 146, 147
fuzzy initial conditions, 9, 18, 19, 44,
96, 99, 104, 118
fuzzy initial velocity, 84
fuzzy integer, 118, 119
fuzzy mass, 64, 79
fuzzy number, 1, 2, 5, 9, 10, 12, 13,
15, 16, 33, 34, 43, 50, 56, 64,
70, 76, 83, 89, 96, 106, 112,
119, 126, 134, 140, 146, 152,
158, 163, 168, 176, 181, 182
≥constant, 12
base, 11, 112, 128, 140, 163, 182,
183
core, 11
support, 11
triangular, 10, 16, 18, 24, 26, 27,
31, 46, 50, 56, 64, 70, 76, 96,
112, 119, 146, 152, 167, 182
symmetric, 189
triangular shaped, 5, 10, 22, 23,
29, 31, 64, 182
fuzzy orbit, 77, 79
fuzzy parameters, 50, 56, 64, 70, 76,
77, 82, 83, 89, 90, 96, 97,
106, 107, 112, 119, 123, 126,
127, 134, 135, 140, 146, 152,
153, 158, 161, 163, 164, 168,
176, 186, 188, 189
fuzzy perihelion, 79
fuzzy rates, 118
fuzzy results, 131

INDEX
193
fuzzy service rate, 24, 26
fuzzy set, 2, 9, 77
discrete, 12, 119
membership function, 9
subset, 9, 12
fuzzy sets
≤, 12
fuzzy sine wave, 147
fuzzy solutions, 50, 56, 64, 70, 83, 89,
96, 106, 119, 126, 134, 146,
152, 163, 168, 176
fuzzy statistics, 3
fuzzy system, 1, 3, 33, 104, 168, 183,
186
continuous time, 2, 43, 181
discrete event, 33, 43
fuzzy system theory, 183
fuzzy trajectories
3 dimensions, 183
fuzzy trajectory, 2, 34, 43, 47, 50, 56,
64, 70, 76, 77, 83, 89, 96,
106, 112, 119, 126, 134, 140,
146, 152, 153, 158, 163, 168,
176, 182
gamma distribution, 27
geometric mean, 175
glider, 163, 165, 166
harmonic mean, 175
hawks, 95–100, 102
Hobbesian, 95
human cannon ball, 3, 81–84
inductance, 87
inf, 13
greatest lower bound, 13
infectious disease model, 19, 69
comparison with, 117
initial conditions, 4, 9, 18, 49, 55, 63,
69, 75, 77, 81, 87, 96, 99,
100, 102, 104, 105, 111, 112,
117, 118, 126, 134, 139, 145,
152, 157, 163, 167, 175, 176,
186
interval arithmetic, 9, 13, 16, 17
addition, 13
division, 13
multiplication, 13
subtraction, 13
Kirchhoﬀ’s Second Law, 87
law of mass action, 111, 175
law-abiders, 95–100, 102
machine and service person model,
125
machine shops, 1
male dominance, 175
Maple
implicitplot, 5
mass
sun, 75
Matlab, 41, 185, 186, 189
axis, 189
bdclose, 188
set_param, 186
colorplot, 188, 189
for-loops, 188
how to get simulation ﬁles, 190
M-File, 185
management of ﬁles, 188
matrix ﬁle, 185
path to subroutines, 188
Simulink
building a diagram, 186
library, 186
model ﬁle, 185
student version, 185
version, 185
maximum likelihood estimator, 27
membrane, 151
min rule, 175
Monte Carlo methods, 5
national economy model, 167
Newton’s Law of Universal Gravita-
tion, 75
normal distribution, 25, 27, 28, 30, 64

194
INDEX
notation, 3
˙x, 49, 55, 69, 96, 111, 175
dx/dt, 49, 55, 69
fuzzy set, 3, 9
time derivative, 96, 111, 175
ODEs, 3, 18, 19, 49, 64, 69, 75, 81, 82,
87, 96, 111, 125, 133, 140,
151, 152
fuzzy, 9, 33, 50, 56, 64, 70, 82,
89, 96, 106, 112, 119, 126,
134, 140, 146, 152, 158, 163,
168, 176
linear, 18, 55, 87, 105, 117, 118,
125, 126, 133, 134, 145, 152,
167
second order, 44
nonlinear, 49, 63, 69, 75, 82, 95,
111, 139, 157, 163, 175
system, 1
systems
crisp, 34, 47, 181
fuzzy, 2, 19, 34, 47, 181
linear, 4
nonlinear, 4
oscillating reaction, 111
planetary motion, 75, 183
point estimates, 1, 2, 22, 33, 181
Poisson distribution, 25
predator/prey, 3, 19, 34, 35, 49
comparison with, 139
generalization, 157
project networks, 1
queuing model, 125, 133
queuing network, 1, 33
queuing theory, 125, 133
random sample, 25, 27, 28, 30
mean, 4, 30
variance, 30
random variable, 21, 181
resistance, 87
resistor, 87
sawtooth wave, 89
SciLab, 40
self-service model, 133
semiqualitative simulation, 5
server, 133
service rate, 1, 33
service time, 125, 133
simulation, 19
conﬁguration settings, 187
constraints, 39
continuous time, 1, 3
crisp, 2, 33–35, 39, 182
diagram, 3
discrete event, 1, 34
fuzzy
continuous time, 1
fuzzy systems, 1
discrete event, 1
optimization, 2, 35
professional version, 41
software, 2
student version, 41
simulation optimization, 47
intuitive method, 44
simulation software, 39
Simulink, 5, 40, 183, 185
solution method
alpha-cut
and
interval
arith-
metic, 18
classical, 18
extension principle, 18
solver options, 187
spring constant, 63
square wave, 88
steady state, 113, 125, 133
stoichiometric factor, 112
success, 28
probability, 28
sup, 13
least upper bound, 13
supply and demand, 18, 145
suspension system, 105
symbiosis, 139
t distribution, 30

INDEX
195
three species competition, 157
time, start/end, 187
two-sex model, 175
uncertainty, 1, 2, 18, 19, 33, 34, 53,
56, 59, 66, 70, 73, 74, 76, 79,
83, 86, 88, 89, 98–100, 102,
104–107, 109, 113, 118, 122,
123, 126, 128, 131, 134, 136,
137, 140, 141, 158, 161, 163,
166–169, 172, 173, 176, 179,
181
functional relationships, 4
initial conditions, 4
maximum, 35, 43
parameters, 4
uncertainty band, 2, 35, 50, 52, 53,
55, 64, 71, 73, 79, 93, 96,
104, 109, 112, 115, 119, 120,
122, 123, 126, 128, 134, 145–
147, 152–154, 159, 161, 165,
166, 172, 173, 177, 179
approximation, 183
boundary, 2, 35, 36, 43, 44, 47,
182
approximation, 46
conﬁdence interval, 36
vibrating mass, 18
Zhabotinskii, 111

List of Figures
2.1
Triangular Fuzzy Number N
. . . . . . . . . . . . . . . . . .
10
2.2
Triangular Shaped Fuzzy Number P
. . . . . . . . . . . . . .
11
2.3
The Fuzzy Number C = A · B . . . . . . . . . . . . . . . . . .
15
3.1
Fuzzy Estimator µ in Example 3.3.1.1, 0.01 ≤β ≤1
. . . . .
24
3.2
Fuzzy Arrival Rate λ in Example 3.4.1.1 . . . . . . . . . . . .
26
3.3
Fuzzy Service Rate µ in Example 3.4.2.1 . . . . . . . . . . . .
28
3.4
Fuzzy Estimator p in Example 3.5.1
. . . . . . . . . . . . . .
29
3.5
Fuzzy Estimator µ in Example 3.6.1 . . . . . . . . . . . . . .
31
5.1
SciLab SciCos Diagram
. . . . . . . . . . . . . . . . . . . . .
40
7.1
Simulink Diagram for the Predator/Prey Model . . . . . . . .
51
7.2
Fuzzy Trajectory for the Number of Foxes x(t)[0] . . . . . . .
52
7.3
Fuzzy Trajectory for the Number of Rabbits y(t)[0] . . . . . .
53
8.1
Simulink Diagram for Arm’s Race Model . . . . . . . . . . . .
57
8.2
Fuzzy Trajectory for Nation A x(t)[0] in the Arm’s Race Model
in the First Simulation . . . . . . . . . . . . . . . . . . . . . .
57
8.3
Fuzzy Trajectory for Nation B y(t)[0] in the Arm’s Race Model
in the First Simulation . . . . . . . . . . . . . . . . . . . . . .
58
8.4
Fuzzy Trajectory for Nation A x(t)[0] in the Arm’s Race Model
in the Second Simulation . . . . . . . . . . . . . . . . . . . . .
60
8.5
Fuzzy Trajectory for Nation B y(t)[0] in the Arm’s Race Model
in the Second Simulation . . . . . . . . . . . . . . . . . . . . .
60
9.1
Simulink Diagram for the Bungee Jumping Example . . . . .
65
9.2
Fuzzy Trajectory for Altitude x(t)[0] in the Bungee Jumping
Example: First Simulation . . . . . . . . . . . . . . . . . . . .
65
9.3
Fuzzy Trajectory for Altitude x(t)[0] in the Bungee Jumping
Example: Second Simulation
. . . . . . . . . . . . . . . . . .
67
10.1 Simulink Diagram for the Infectious Disease Example
. . . .
71
197

198
LIST OF FIGURES
10.2 Fuzzy Trajectory for Uninfected x(t)[0] in the Infectious Dis-
ease Example . . . . . . . . . . . . . . . . . . . . . . . . . . .
72
10.3 Fuzzy Trajectory for Infected y(t)[0] in the Infectious Disease
Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
72
10.4 Fuzzy Trajectory for Previously Infected z(t)[0] in the Infec-
tious Disease Example . . . . . . . . . . . . . . . . . . . . . .
73
11.1 Diagram for the Earth’s Orbit . . . . . . . . . . . . . . . . . .
76
11.2 Simulink Diagram for the Earth’s Orbit . . . . . . . . . . . .
78
11.3 Fuzzy Trajectory for α = 0 Cut of the Earth’s Orbit . . . . .
78
12.1 Human Cannon Ball Example . . . . . . . . . . . . . . . . . .
82
12.2 Simulink Diagram for the Human Cannon Ball Example . . .
84
12.3 Fuzzy Trajectory for the Human Cannon Ball Example: First
Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
85
12.4 Fuzzy Trajectory for the Human Ball Example: Second Simu-
lation
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
85
13.1 Electrical Network . . . . . . . . . . . . . . . . . . . . . . . .
88
13.2 Square Wave Input E1 . . . . . . . . . . . . . . . . . . . . . .
88
13.3 Saw Tooth Input E2 . . . . . . . . . . . . . . . . . . . . . . .
89
13.4 Simulink Diagram for the Electrical Network
. . . . . . . . .
90
13.5 Fuzzy Trajectory for Fuzzy Current I1 . . . . . . . . . . . . .
91
13.6 Fuzzy Trajectory for Fuzzy Current I2 . . . . . . . . . . . . .
92
13.7 Fuzzy Trajectory for Fuzzy Current I3 . . . . . . . . . . . . .
92
14.1 Simulink Diagram for the Hawks, Doves and Law-Abiders Ex-
ample
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
97
14.2 Fuzzy Trajectory for Doves x(t)[0] in the 1st Simulation . . .
98
14.3 Fuzzy Trajectory for Hawks y(t)[0] in the 1st Simulation . . .
99
14.4 Fuzzy Trajectory for Doves x(t)[0] in the 2nd Simulation . . .
100
14.5 Fuzzy Trajectory for Hawks y(t)[0] in the 2nd Simulation . . .
101
14.6 Fuzzy Trajectory for Law-Abiders z(t)[0] in the 2nd Simulation 101
14.7 Fuzzy Trajectory for Doves x(t)[0] in the 3rd Simulation . . .
102
14.8 Fuzzy Trajectory for Hawks y(t)[0] in the 3rd Simulation . . .
103
14.9 Fuzzy Trajectory for Law-Abiders z(t)[0] in the 3rd Simulation 103
15.1 Diagram of Suspension System
. . . . . . . . . . . . . . . . .
106
15.2 Simulink Diagram for the Suspension System Example . . . .
108
15.3 Fuzzy Trajectory for the Car x(t)[0] in the Suspension System
Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
108
15.4 Fuzzy Trajectory for the Tire y(t)[0] in the Suspension System
Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
109
16.1 Simulink Diagram for the Chemical Reaction Example . . . .
113

LIST OF FIGURES
199
16.2 Fuzzy Trajectory for x(t)[0] in Chemical Reaction Example
.
114
16.3 Fuzzy Trajectory for y(t)[0] in Chemical Reaction Example
.
114
16.4 Fuzzy Trajectory for z(t)[0] in Chemical Reaction Example
.
115
17.1 Diagram for the AIDS Epidemic
. . . . . . . . . . . . . . . .
118
17.2 Simulink Diagram for the AIDS Epidemic . . . . . . . . . . .
120
17.3 Fuzzy Trajectory for AIDS A(t)[0] in the AIDS Epidemic
. .
121
17.4 Fuzzy Trajectory for Non-Infectious Z(t)[0] in the AIDS Epi-
demic
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
121
17.5 Fuzzy Trajectory for Susceptible X(t)[0] in the AIDS Epidemic 122
17.6 Fuzzy Trajectory for HIV Y (t)[0] in the AIDS Epidemic . . .
123
18.1 Simulink Diagram for the Machine/Service Queuing Model
.
127
18.2 Fuzzy Trajectory of Fuzzy Probability p0(t)[0] in the First Sim-
ulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
129
18.3 Fuzzy Trajectory of the Expected Number of Broken Machines
N(t)[0] in the First Simulation
. . . . . . . . . . . . . . . . .
129
18.4 Fuzzy Trajectory of Fuzzy Probability p0(t)[0] in the Second
Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
130
18.5 Fuzzy Trajectory of the Expected Number of Broken Machines
N(t)[0] in the Second Simulation . . . . . . . . . . . . . . . .
130
19.1 Simulink Diagram for the Self-Service Queuing Model
. . . .
135
19.2 Fuzzy Trajectory of Fuzzy Probability p4(t)[0] in the Self-
Service Queuing Model . . . . . . . . . . . . . . . . . . . . . .
136
19.3 Fuzzy Trajectory of the Expected Number of Customers in the
System N(t)[0] in the Self-Service Queuing Model . . . . . . .
137
20.1 Simulink Diagram for the Symbiosis Example . . . . . . . . .
141
20.2 Fuzzy Trajectory for x(t)[0] in the Symbiosis Example . . . .
142
20.3 Fuzzy Trajectory for y(t)[0] in the Symbiosis Example . . . .
142
21.1 Simulink Diagram for the Supply and Demand Example . . .
147
21.2 Fuzzy Trajectory for Price P(t)[0] in the Supply and Demand
Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
148
21.3 Fuzzy Trajectory for Supply S(t)[0] in the Supply and Demand
Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
148
21.4 Fuzzy Graph for Inﬂation in the Supply and Demand Example 149
22.1 Diagram for the Drug Concentration Example . . . . . . . . .
152
22.2 Simulink Diagram for the Drug Concentration Example
. . .
154
22.3 Fuzzy Trajectory, x1(t)[0] in the Drug Concentration Example 155
22.4 Fuzzy Trajectory, x2(t)[0] in the Drug Concentration Example 155
23.1 Simulink Diagram for the Three Species Competition . . . . .
159

200
LIST OF FIGURES
23.2 Fuzzy Trajectory for N 1(t)[0] in the Three Species Competi-
tion Example . . . . . . . . . . . . . . . . . . . . . . . . . . .
160
23.3 Fuzzy Trajectory for N 2(t)[0] in the Three Species Competi-
tion Example . . . . . . . . . . . . . . . . . . . . . . . . . . .
160
23.4 Fuzzy Trajectory for N 3(t)[0] in the Three Species Competi-
tion Example . . . . . . . . . . . . . . . . . . . . . . . . . . .
161
24.1 Simulink Diagram for the Glider Example . . . . . . . . . . .
164
24.2 Fuzzy Trajectory for Velocity v(t)[0] in the Glider Example .
165
24.3 Fuzzy Trajectory for Angle θ(t)[0] in the Glider Example
. .
166
25.1 Simulink Diagram for the National Economy Model
. . . . .
169
25.2 Fuzzy Trajectory for National Income I(t)[0] in the First Na-
tional Economy Model . . . . . . . . . . . . . . . . . . . . . .
170
25.3 Fuzzy Trajectory for Consumer Spending C(t)[0] in the First
National Economy Model
. . . . . . . . . . . . . . . . . . . .
170
25.4 Fuzzy Trajectory for National Income I(t)[0] in the Second
National Economy Model
. . . . . . . . . . . . . . . . . . . .
171
25.5 Fuzzy Trajectory for Consumer Spending C(t)[0] in the Second
National Economy Model
. . . . . . . . . . . . . . . . . . . .
171
25.6 Fuzzy Trajectory for National Income I(t)[0] in the Third Na-
tional Economy Model . . . . . . . . . . . . . . . . . . . . . .
172
25.7 Fuzzy Trajectory for Consumer Spending C(t)[0] in the Third
National Economy Model
. . . . . . . . . . . . . . . . . . . .
173
26.1 Simulink Diagram for the Sex Structured Population Model .
177
26.2 Fuzzy Trajectory for Females F(t)[0] in the Sex Structured
Population Model . . . . . . . . . . . . . . . . . . . . . . . . .
178
26.3 Fuzzy Trajectory for Males M(t)[0] in the Sex Structured Pop-
ulation Model . . . . . . . . . . . . . . . . . . . . . . . . . . .
178
28.1 Process Flow for Simulations
. . . . . . . . . . . . . . . . . .
185
28.2 Simulink Diagram
. . . . . . . . . . . . . . . . . . . . . . . .
186
28.3 Simulink Conﬁguration Parameters . . . . . . . . . . . . . . .
187

List of Tables
1.1
Color/Line Width Legend . . . . . . . . . . . . . . . . . . . .
6
7.1
Fuzzy/Crisp Parameters in the Predator/Prey Model . . . . .
50
8.1
Fuzzy/Crisp Parameters in the Arm’s Race Model for the First
Simulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
56
8.2
Fuzzy/Crisp Parameters in the Arm’s Race Model for the Sec-
ond Simulation . . . . . . . . . . . . . . . . . . . . . . . . . .
59
9.1
Fuzzy/Crisp Parameters in the Bungee Jumping Model
. . .
64
10.1 Fuzzy/Crisp Parameters in the Infectious Disease Model . . .
70
11.1 Fuzzy/Crisp Parameters for the Orbit of the Earth Around
the Sun
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
77
12.1 Crisp/Fuzzy Parameters in the Human Cannon Ball Model
.
83
13.1 Crisp/Fuzzy Parameter Values in the Electrical Network . . .
89
14.1 Fuzzy/Crisp Initial Conditions
. . . . . . . . . . . . . . . . .
96
15.1 Fuzzy/Crisp Parameter Values in the Suspension System Ex-
ample
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
107
16.1 Fuzzy/Crisp Parameter Values in the Chemical Reaction Ex-
ample
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
112
17.1 Fuzzy/Crisp Parameter Values in the AIDS Epidemic
. . . .
119
18.1 Fuzzy/Crisp Parameters in Machine/Service Queuing Model .
126
19.1 Fuzzy/Crisp Parameters in the Self-Service Queuing Model
.
134
20.1 Fuzzy/Crisp Parameter Values in the Symbiosis Example
. .
140
201

202
LIST OF TABLES
21.1 Crisp/Fuzzy Parameters in the Supply and Demand Model
.
146
22.1 Crisp/Fuzzy Parameters in the Drug Concentration Model . .
153
23.1 Crisp/Fuzzy Parameters in the Three Species Competition
Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
158
24.1 Crisp/Fuzzy Parameters in the Glider Model
. . . . . . . . .
164
25.1 Crisp/Fuzzy Parameters in the National Economy Model
. .
168
26.1 Fuzzy/Crisp Parameters in Sex Structured Population Model
176

