LispCast
Introduction to Clojure 
Part 1
1
Friday, June 7, 13

JAM
lambdajam.com
generously sponsored by
2
Friday, June 7, 13

juxt.pro
generously sponsored by
3
Friday, June 7, 13

leiningen
awesome Clojure 
project tool
leiningen.org
4
Friday, June 7, 13

5
Friday, June 7, 13

how to use these videos
5
Friday, June 7, 13

how to use these videos
type in the code yourself
5
Friday, June 7, 13

how to use these videos
type in the code yourself
pause and rewind
5
Friday, June 7, 13

how to use these videos
type in the code yourself
pause and rewind
do the exercises
5
Friday, June 7, 13

how to use these videos
type in the code yourself
pause and rewind
do the exercises
play around
5
Friday, June 7, 13

6
Friday, June 7, 13

REPL
6
Friday, June 7, 13

REPL
 Read Eval Print Loop
6
Friday, June 7, 13

user=> (println "Hello, world!")
Hello, world!
nil
user=>
REPL
 Read Eval Print Loop
6
Friday, June 7, 13

user=> (println "Hello, world!")
Hello, world!
nil
user=>
prompt
REPL
 Read Eval Print Loop
6
Friday, June 7, 13

user=> (println "Hello, world!")
Hello, world!
nil
user=>
prompt
form to evaluate
REPL
 Read Eval Print Loop
6
Friday, June 7, 13

user=> (println "Hello, world!")
Hello, world!
nil
user=>
prompt
form to evaluate
printed output
REPL
 Read Eval Print Loop
6
Friday, June 7, 13

user=> (println "Hello, world!")
Hello, world!
nil
user=>
prompt
form to evaluate
printed output
return value
REPL
 Read Eval Print Loop
6
Friday, June 7, 13

user=> (println "Hello, world!")
Hello, world!
nil
user=>
prompt
form to evaluate
printed output
return value
prompt
REPL
 Read Eval Print Loop
6
Friday, June 7, 13

7
Friday, June 7, 13

commands
7
Friday, June 7, 13

commands
grab
7
Friday, June 7, 13

commands
grab
release
7
Friday, June 7, 13

commands
grab
release
squeeze
7
Friday, June 7, 13

commands
grab
release
squeeze
scoop
7
Friday, June 7, 13

commands
grab
release
squeeze
scoop
add-to-bowl
7
Friday, June 7, 13

commands
grab
release
squeeze
scoop
add-to-bowl
mix
7
Friday, June 7, 13

commands
grab
release
squeeze
scoop
add-to-bowl
mix
pour-into-pan
7
Friday, June 7, 13

commands
grab
release
squeeze
scoop
add-to-bowl
mix
pour-into-pan
bake-pan
7
Friday, June 7, 13

commands
grab
release
squeeze
scoop
add-to-bowl
mix
pour-into-pan
bake-pan
cool-pan
7
Friday, June 7, 13

commands
grab
release
squeeze
scoop
add-to-bowl
mix
pour-into-pan
bake-pan
cool-pan
status
7
Friday, June 7, 13

commands
grab
release
squeeze
scoop
add-to-bowl
mix
pour-into-pan
bake-pan
cool-pan
status
start-over
7
Friday, June 7, 13

8
Friday, June 7, 13

function call in Clojure
8
Friday, June 7, 13

(grab :cup)
function call in Clojure
8
Friday, June 7, 13

(grab :cup)
function
function call in Clojure
8
Friday, June 7, 13

(grab :cup)
function arguments (0 or more)
function call in Clojure
8
Friday, June 7, 13

9
Friday, June 7, 13

keywords
9
Friday, June 7, 13

keywords
:cup is a keyword
9
Friday, June 7, 13

keywords
:cup is a keyword
keywords start with :
9
Friday, June 7, 13

keywords
:cup is a keyword
keywords start with :
keywords are useful for naming things
9
Friday, June 7, 13

10
Friday, June 7, 13

inline documentation
10
Friday, June 7, 13

inline documentation
(doc grab)
10
Friday, June 7, 13

inline documentation
(doc grab)
function name
10
Friday, June 7, 13

11
Friday, June 7, 13

cookie recipe
11
Friday, June 7, 13

cookie recipe
1 egg
1 cup ﬂour
1 cup sugar
1 stick butter
mix in bowl
bake in pan 30 minutes
let cool
11
Friday, June 7, 13

12
Friday, June 7, 13

exercise 1
Instruct X5 to bake a cake. Here is the recipe.
2 cups ﬂour
2 eggs
1 cup milk
1 cup sugar
mix all ingredients
bake in pan for 25 minutes
let cool
12
Friday, June 7, 13

13
Friday, June 7, 13

defn
13
Friday, June 7, 13

defn
(defn my-function [a b c d]
  (first-step a)
  (second-step b c)
  (third-step a d))
13
Friday, June 7, 13

defn
(defn my-function [a b c d]
  (first-step a)
  (second-step b c)
  (third-step a d))
function name
13
Friday, June 7, 13

defn
(defn my-function [a b c d]
  (first-step a)
  (second-step b c)
  (third-step a d))
function name
parameters
13
Friday, June 7, 13

defn
(defn my-function [a b c d]
  (first-step a)
  (second-step b c)
  (third-step a d))
function name
parameters
body (executed in order)
13
Friday, June 7, 13

defn
(defn my-function [a b c d]
  (first-step a)
  (second-step b c)
  (third-step a d))
function name
parameters
body (executed in order)
returns the value
of the last 
expression
13
Friday, June 7, 13

14
Friday, June 7, 13

exercise 2
Write a function to add ﬂour, a function to add 
milk, and a function to add butter.
add-flour
add-milk
add-butter
The functions should be named
14
Friday, June 7, 13

15
Friday, June 7, 13

exercise 3
Write a function bake-cake which uses the
new add- functions.
15
Friday, June 7, 13

16
Friday, June 7, 13

cond
16
Friday, June 7, 13

cond
(cond 
  (= x 100)
  “it’s one hundred”
  (> x 10)
  “it’s greater than ten”
  :else
  “it’s something else”)
16
Friday, June 7, 13

cond
(cond 
  (= x 100)
  “it’s one hundred”
  (> x 10)
  “it’s greater than ten”
  :else
  “it’s something else”)
condition
16
Friday, June 7, 13

cond
(cond 
  (= x 100)
  “it’s one hundred”
  (> x 10)
  “it’s greater than ten”
  :else
  “it’s something else”)
condition
expression
16
Friday, June 7, 13

cond
(cond 
  (= x 100)
  “it’s one hundred”
  (> x 10)
  “it’s greater than ten”
  :else
  “it’s something else”)
condition
expression
condition
16
Friday, June 7, 13

cond
(cond 
  (= x 100)
  “it’s one hundred”
  (> x 10)
  “it’s greater than ten”
  :else
  “it’s something else”)
condition
expression
condition
expression
16
Friday, June 7, 13

cond
(cond 
  (= x 100)
  “it’s one hundred”
  (> x 10)
  “it’s greater than ten”
  :else
  “it’s something else”)
condition
expression
condition
expression
condition
16
Friday, June 7, 13

cond
(cond 
  (= x 100)
  “it’s one hundred”
  (> x 10)
  “it’s greater than ten”
  :else
  “it’s something else”)
condition
expression
condition
expression
condition
expression
16
Friday, June 7, 13

17
Friday, June 7, 13

conditional truth
17
Friday, June 7, 13

conditional truth
there are two values that are false
17
Friday, June 7, 13

conditional truth
there are two values that are false
nil and false
17
Friday, June 7, 13

conditional truth
there are two values that are false
nil and false
all other values are true
17
Friday, June 7, 13

conditional truth
there are two values that are false
nil and false
all other values are true
nil means “no answer” or “nothing”
17
Friday, June 7, 13

conditional truth
there are two values that are false
nil and false
all other values are true
nil means “no answer” or “nothing”
it is equivalent to Java’s null
17
Friday, June 7, 13

18
Friday, June 7, 13

exercise 4
Rewrite bake-cake using the
new add function.
18
Friday, June 7, 13

19
Friday, June 7, 13

exercise 5
Write a function scooped? which returns true 
if the given ingredient (the argument) needs 
scooping. Otherwise it returns false.
(scooped? :egg)   => false
(scooped? :sugar) => true
19
Friday, June 7, 13

20
Friday, June 7, 13

exercise 6
Write a function squeezed? which returns 
true if the given ingredient (the argument) 
needs squeezing. Otherwise it returns false.
(squeezed? :egg)   => true
(squeezed? :flour) => false
20
Friday, June 7, 13

21
Friday, June 7, 13

exercise 7
Write a function simple? which returns true 
if the given ingredient (the argument) can be 
added without scooping or squeezing 
(basically, butter). Otherwise it returns false.
(simple? :egg)    => false
(simple? :butter) => true
21
Friday, June 7, 13

22
Friday, June 7, 13

if
22
Friday, June 7, 13

if
(if (scooped? :flour)
  “makes sense”
  “that’s weird”)
22
Friday, June 7, 13

if
(if (scooped? :flour)
  “makes sense”
  “that’s weird”)
condition
22
Friday, June 7, 13

if
(if (scooped? :flour)
  “makes sense”
  “that’s weird”)
then expression
condition
22
Friday, June 7, 13

if
(if (scooped? :flour)
  “makes sense”
  “that’s weird”)
then expression
else expression 
condition
22
Friday, June 7, 13

23
Friday, June 7, 13

do
23
Friday, June 7, 13

do
(do
  (println “first step”)
  (println “second step”))
23
Friday, June 7, 13

do
(do
  (println “first step”)
  (println “second step”))
body
23
Friday, June 7, 13

24
Friday, June 7, 13

exercise 8
Write functions add-scooped, add-
squeezed, and add-simple which 
conditionally add the respective ingredient 
types.
You will need to use if and do.
(add-squeezed :egg)
(add-scooped :sugar)
24
Friday, June 7, 13

25
Friday, June 7, 13

dotimes
25
Friday, June 7, 13

dotimes
(dotimes [i 10]
  (println i))
25
Friday, June 7, 13

dotimes
(dotimes [i 10]
  (println i))
name of iteration count
25
Friday, June 7, 13

dotimes
(dotimes [i 10]
  (println i))
name of iteration count
number of times to iterate
25
Friday, June 7, 13

dotimes
(dotimes [i 10]
  (println i))
body
name of iteration count
number of times to iterate
25
Friday, June 7, 13

26
Friday, June 7, 13

exercise 9
add-flour-cups
add-sugar-cups
add-milk-cups
add-butters
Write the following functions using dotimes.
26
Friday, June 7, 13

27
Friday, June 7, 13

exercise 10
Rewrite bake-cake to use the new functions.
27
Friday, June 7, 13

28
Friday, June 7, 13

variadic defn
28
Friday, June 7, 13

variadic defn
(defn my-function
  ([]
    “zero-argument version”)
  ([a]
    “one-argument version”)
  ([a b]
    “two-argument version”)
  ([a b c d]
    “four-argument version”))
28
Friday, June 7, 13

variadic defn
(defn my-function
  ([]
    “zero-argument version”)
  ([a]
    “one-argument version”)
  ([a b]
    “two-argument version”)
  ([a b c d]
    “four-argument version”))
function name
28
Friday, June 7, 13

variadic defn
(defn my-function
  ([]
    “zero-argument version”)
  ([a]
    “one-argument version”)
  ([a b]
    “two-argument version”)
  ([a b c d]
    “four-argument version”))
function name
parameters
28
Friday, June 7, 13

variadic defn
(defn my-function
  ([]
    “zero-argument version”)
  ([a]
    “one-argument version”)
  ([a b]
    “two-argument version”)
  ([a b c d]
    “four-argument version”))
function name
parameters
body
28
Friday, June 7, 13

variadic defn
(defn my-function
  ([]
    “zero-argument version”)
  ([a]
    “one-argument version”)
  ([a b]
    “two-argument version”)
  ([a b c d]
    “four-argument version”))
function name
parameters
body
parameters
28
Friday, June 7, 13

variadic defn
(defn my-function
  ([]
    “zero-argument version”)
  ([a]
    “one-argument version”)
  ([a b]
    “two-argument version”)
  ([a b c d]
    “four-argument version”))
function name
parameters
body
parameters
body
28
Friday, June 7, 13

variadic defn
(defn my-function
  ([]
    “zero-argument version”)
  ([a]
    “one-argument version”)
  ([a b]
    “two-argument version”)
  ([a b c d]
    “four-argument version”))
function name
parameters
body
parameters
body
parameters
28
Friday, June 7, 13

variadic defn
(defn my-function
  ([]
    “zero-argument version”)
  ([a]
    “one-argument version”)
  ([a b]
    “two-argument version”)
  ([a b c d]
    “four-argument version”))
function name
parameters
body
parameters
body
parameters
body
28
Friday, June 7, 13

variadic defn
(defn my-function
  ([]
    “zero-argument version”)
  ([a]
    “one-argument version”)
  ([a b]
    “two-argument version”)
  ([a b c d]
    “four-argument version”))
function name
parameters
body
parameters
body
parameters
body
parameters
28
Friday, June 7, 13

variadic defn
(defn my-function
  ([]
    “zero-argument version”)
  ([a]
    “one-argument version”)
  ([a b]
    “two-argument version”)
  ([a b c d]
    “four-argument version”))
function name
parameters
body
parameters
body
parameters
body
parameters
body
28
Friday, June 7, 13

29
Friday, June 7, 13

exercise 11
Rewrite add to be variadic and to 
use the new add- functions.
29
Friday, June 7, 13

30
Friday, June 7, 13

exercise 12
Rewrite bake-cake to use the new add 
function.
30
Friday, June 7, 13

31
Friday, June 7, 13

exercise 13
Write a function bake-cookies
to make it have a structure similar to the 
recipe.
1 egg
1 cup ﬂour
1 cup sugar
1 stick butter
mix in bowl
bake in pan 30 minutes
let cool
31
Friday, June 7, 13

32
Friday, June 7, 13

2 eggs
2 cups ﬂour
1 cup milk
1 cup sugar
mix all ingredients
bake in pan for 25 minutes
let cool
32
Friday, June 7, 13

(grab :egg)
(squeeze)
(add-to-bowl)
(grab :egg)
(squeeze)
(add-to-bowl)
(grab :cup)
(scoop :flour)
(add-to-bowl)
(scoop :flour)
(add-to-bowl)
(scoop :milk)
(add-to-bowl)
(scoop :sugar)
(add-to-bowl)
(release)
(mix)
(pour-into-pan)
(bake-pan 25)
(cool-pan)
2 eggs
2 cups ﬂour
1 cup milk
1 cup sugar
mix all ingredients
bake in pan for 25 minutes
let cool
32
Friday, June 7, 13

(grab :egg)
(squeeze)
(add-to-bowl)
(grab :egg)
(squeeze)
(add-to-bowl)
(grab :cup)
(scoop :flour)
(add-to-bowl)
(scoop :flour)
(add-to-bowl)
(scoop :milk)
(add-to-bowl)
(scoop :sugar)
(add-to-bowl)
(release)
(mix)
(pour-into-pan)
(bake-pan 25)
(cool-pan)
(add :egg 2)
(add :flour 2)
(add :milk 1)
(add :sugar 1)
(mix)
(pour-into-pan)
(bake-pan 25)
(cool-pan)
2 eggs
2 cups ﬂour
1 cup milk
1 cup sugar
mix all ingredients
bake in pan for 25 minutes
let cool
32
Friday, June 7, 13

33
Friday, June 7, 13

33
Friday, June 7, 13

