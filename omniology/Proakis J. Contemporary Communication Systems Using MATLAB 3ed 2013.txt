
Contemporary Communication Systems 
Using MATLAB® 
Third Edition 
John G. Proakis 
Northeastern University 
Masoud Salehi 
Northeastern University 
Gerhard Bauch 
Universitiit der Bundeswehr Miinchen 
CENGAGE 
Learning· 
Australia• Brazil• japan• Korea• Mexico• Singapore• Spain• United Kingdom • United States 
Copyright 2011 Cengage Leaming. Al Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience, Cengage Leaming reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

This is an electronic version of the print textbook. Due to electronic rights restrictions, 
some third party content may be suppressed. Editorial review has deemed that any suppressed 
content does not materially affect the overall learning experience. The publisher reserves the right 
to remove content from this title at any time if subsequent rights restrictions require it. For 
valuable information on pricing, previous editions, changes to current editions, and alternate 
formats, please visit www.cengage.com/highered to search by ISBN#, author, title, or keyword for 
materials in your areas of interest. 
Copyright 2011 Cengage Lea.ming. AJI Rights Reserved. May not be copjed, scanned, or duplicated, in whole or in part. Due to e)ectron.lc rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
F.ditorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Leaming reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

CENGAGE 
Learning· 
Contemporary Communication Systems 
Using MATLAB®, Third Edition 
john G. Proakis, Masoud Salehi, 
Gerhard Bauch 
Publisher, Global Engineering: 
Christopher M. Shortt 
Acquisitions Editor: Swati Meherishi 
Senior Developmental Editor: Hilda Gowans 
Editorial Assistant: Tanya Altieri 
Team Assistant: Carly Rizzo 
Marketing Manager: Lauren Betsos 
Media Editor: Chris Valentine 
Director, Content and Media Production: 
Sharon S. Smith 
Production Manager: D. jean Buttrom 
Content Project Management: PreMediaGlobal 
Production Service: PreMediaGlobal 
Copyeditor: Patricia Daly 
Compositor: PreMediaGlobal 
Senior Art Director: Michelle Kunkler 
Internal Designer: PreMediaGlobal 
Cover Designer: Andrew Adams/4065042 
Canada Inc. 
Cover Image:© teacept/Shutterstock 
Rights Acquisitions Specialist: john Hill 
Text and Image Permissions Researcher: 
Krist ii na Paul 
Manufacturing Planner: Doug Wilke 
Printed in the United States of America 
1 2 3 4 5 6 7 15 14 13 12 11 
© 2013, 2004 Cengage Learning 
ALL RIGHTS RESERVED. No part of this work covered by the copyright 
herein may be reproduced, transmitted, stored or used in any form or by 
any means graphic, electronic, or mechanical, including but not limited to 
photocopying, recording, scanning, digitizing, taping, Web distribution, 
information networks, or information storage and retrieval systems, except 
as permitted under Section 107 or 108 of the 1976 United States Copyright 
Act, without the prior written permission of the publisher. 
For product inf ormation and technology assistance, contact us at 
Cengage Learning Customer & Sales Support, 1-800-354-9706 
For permission to use material from this text or product, 
submit all requests online at www.cengage.com/permissions 
Further permissions questions can be emailed to 
permissionrequest@cengage.com 
Library of Congress Control Number: 2011937462 
ISBN-13: 978-0-495-08251-4 
ISBN-10: 0-495-08251-1 
Cengage Learning 
200 First Stamford Place, Suite 400 
Stamford, CT 06902 
USA 
Cengage Learning is a leading provider of customized learning solutions with 
office locations around the globe, including Singapore, the United Kingdom, 
Australia, Mexico, Brazil, and japan. Locate your local office at 
international.cengage.com/region 
Cengage Learning products are represented in Canada by 
Nelson Education, Ltd. 
For your course and learning solutions, visit 
www.cengage.com/engineering 
Purchase any of our products at your local college store or at our preferred 
online store www.cengagebrain.com 
MATLAB® and SIMULINK® are registered trademarks ofThe MathWorks, 
3 Apple Hill Drive, Natick, MA 01760. 
Copyright 2011 Cengage Learning. Al Rights Reserved. May not be copied, scanned, or duplicated, in who1e or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not materiaJJy affect the overall learning experience. Cengage Leaming reserves the right to remove additional content at any time if subsequent rights restrictions require il 

PREFACE 
Many textbooks today treat the basic topics in analog and digital communication sys­
tems, including coding and decoding algorithms and modulation and demodulation 
techniques. Most of these textbooks focus, by necessity, on the theory that underlies 
the design and performance analysis of the various building blocks, such as coders, 
decoders, modulators, and demodulators, that constitute the basic elements of a com­
munications system. Relatively few of the textbooks, especially those written for un­
dergraduates, include applications that motivate students. 
SCOPE OF THE BOOK 
The objective of this book is to serve as a companion or supplement to any of the 
comprehensive textbooks in communication systems. The book provides a variety of 
exercises that may be solved on a computer (generally, a personal computer is suffi­
cient) using the popular student edition of MATLAB. We intend the book to be used 
primarily by senior-level undergraduate students and graduate students in electrical en­
gineering, computer engineering, and computer science. 
This book will also prove 
useful to practicing engineers who wish to learn specific MATLAB applications for 
communication systems. We assume that the reader is familiar with the fundamentals 
of MATLAB. We do not cover those topics because several tutorial books and manuals 
on MATLAB are available. 
By design, the treatment of the communications theory topics is brief. We provide 
the motivation and a short introduction to each topic, establish the necessary notation, 
and then illustrate the basic notions through an example. The primary text and the in­
structor are expected to provide the required depth for the topics treated. For example, 
we introduce the matched filter and the correlator and assert that these devices result 
in the optimum demodulation of signals corrupted by additive white Gaussian noise 
(AWGN), but we do not provide a proof of this assertion. Such a proof generally is 
given in most core textbooks on communication systems. 
NEW TO THIS EDITION 
• Three brand new chapters have been added on OFDM, multiple antenna sys­
tems, and digital transmission on fading channels. 
• New examples with more practical real-life engineering problems have been 
included to help students cope better when they go to work in industry. This will 
also help practicing engineers using this book to get exposure on communica­
tions systems. 
• New sections have been added on DPCM, ADPCM, and DM; turbo codes and 
decoding; LDPC codes and decoding. 
iii 
Copyright 2011 Cengage Leaming. AJl Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Leaming reserves the right to remove additiona1 content at any time if subsequent rights restrictions require it. 

IV 
• This third edition has been updated to make it compliant with the latest version 
of MATLAB. 
• A revised and updated Simulink supplement with tutorial problems is now 
available online. 
ORGANIZATION OF THE BOOK 
The book consists of 13 chapters. The first two chapters on signals and linear sys­
tems and on random processes treat the basic background that is generally required in 
the study of communication systems. One chapter is on analog communication tech­
niques, another is on analog to digital conversion, and the next eight chapters focus 
on digital communications. The final chapter supports the Simulink tutorial, which is 
not included in the print version of the book, rather it is available online on the book's 
student companion website. 
Chapter 1: Signals and Linear Systems 
This chapter provides a review of the basic tools and techniques from linear systems 
analysis, including both time-domain and frequency-domain characterizations. We em­
phasize frequency-domain-analysis techniques, because these techniques are used most 
frequently in the treatment of communication systems. 
Chapter 2: Random Processes 
This chapter illustrates methods for generating random variables and samples of ran­
dom processes. The topics include the generation of random variables with a specified 
probability distribution function, the generation of samples of Gaussian and Gauss­
Markov processes, and the characterization of stationary random processes in the time 
domain and the frequency domain. The chapter also treats the estimation of probabili­
ties via Monte Carlo simulation. 
Chapter 3: Analog Modulation 
This chapter treats the performances of analog modulation and demodulation tech­
niques in the presence and absence of additive noise. Systems studied include ampli­
tude modulation (AM), such as double-sideband AM, single-sideband AM, and con­
ventional AM, and angle-modulation schemes, such as frequency modulation (FM) and 
phase modulation (PM). 
Chapter 4: Analog-to-Digital Conversion 
This chapter treats various methods for converting analog source signals into digital 
sequences efficiently. This conversion process allows us to transmit or store the signals 
digitally. We consider both lossy data compression schemes, such as pulse-code mod­
ulation (PCM), differential PCM (DPCM), delta modulation (DM), and lossless data 
compression, such as Huffman coding. Vector quantization and the K-means algorithm 
are also described and simulated in this chapter. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

v 
Chapter 5: Baseband Digital Transmission 
This chapter introduces baseband digital modulation and demodulation techniques for 
transmitting digital information through an AWGN channel. We consider both binary 
and non-binary modulation techniques. 
We describe the optimum demodulation of 
these signals and evaluate the performance of the demodulator. 
Chapter 6: Digital Transmission Through Band-limited Channels 
This chapter considers the characterization of band-limited channels and the problem 
of designing signal waveforms for such channels. We show that channel distortion 
results in inter symbol interference (ISi), which causes errors in signal demodulation. 
Then, we treat the design of channel equalizers that compensate for channel distortion. 
Chapter 7: Digital Transmission via Carrier Modulation 
This chapter considers four types of carrier-modulated signals that are suitable for 
transmission through bandpass channels: amplitude-modulated signals, quadrature 
amplitude-modulated signals, phase-shift keying, and frequency-shift keying. 
Chapter 8: Multicarrier Modulation and OFDM 
This chapter treats the transmission of digital information in a communication channel 
by use of frequency division multiplexing. The channel bandwidth is subdivided into a 
large number of subbands and signals are transmitted by modulating the subcarrier in 
each of the subbands. By performing the modulation of the subcarriers synchronously 
in time, the subcarrier signals are mutually orthogonal, thus resulting in an orthogonal 
frequency division multiplexed (OFDM) signal. The topics treated in this chapter in­
clude the generation and demodulation of OFDM signals, the spectral characteristics of 
OFDM signals, the use of a cyclic prefix to suppress channel dispersion, and methods 
to limit the peak-to-average ratio (PAR) in OFDM signals. 
Chapter 9: Transmission Through Wireless Channels 
This chapter is focused on digital signal transmission through wireless communication 
channels that are characterized by randomly time-variant and time-dispersive impulse 
responses. Topics treated include the characteristics of frequency selective and fre­
quency nonselective Rayleigh fading channels models, modeling of the Doppler power 
spectrum, diversity transmission and reception techniques, the RAKE demodulator, 
OFDM transmission in frequency selective channels, and the error rate performance of 
digital transmission in Rayleigh fading channels. 
Chapter 10: Channel Capacity and Coding 
This chapter considers appropriate mathematical models for communication channels 
and introduces a fundamental quantity, the channel capacity that gives the limit on the 
amount of information that can be transmitted through the channel. In particular, we 
examine two channel models, the binary symmetric channel (BSC) and the additive 
Copyright 2011 Cengage Learning. AU Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to e)ectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
E.clitorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

vi 
white Gaussian noise (AWGN) channel, which are used in the treatment of block and 
convolutional codes for achieving reliable communication through such channels. The 
chapter concludes with a discussion of iterative decoding techniques for turbo and low 
density parity-check codes. 
Chapter 11: Multiple Antenna Systems 
This chapter treats the use of multiple transmit and receive antennas (multiple-input, 
multiple-output or MIMO systems) that exploit the spatial domain to increase the data 
rate and improve the performance of wireless communication systems. Topics treated 
include channel models for multiple antenna (MIMO) systems, signal modulation and 
demodulation in multiple antenna (MIMO) systems, the capacity of MIMO channels, 
and space-time block and trellis codes for MIMO systems. 
Chapter 12: Spread Spectrum Communication Systems 
This chapter treats the basic elements of a spread-spectrum digital communication sys­
tem. In particular, it considers direct sequence (DS) spread spectrum and frequency 
hopped (FH) spread spectrum systems in conjunction with phase-shift keying (PSK) 
and frequency-shift keying (FSK) modulation, respectively. It also treats the genera­
tion of pseudo-noise (PN) sequences for use in spread spectrum systems. 
Chapter 13: Simulink Tutorial on Digital Modulation Methods 
This chapter is devoted to an introduction to Simulink and its applications in simu­
lation of digital modulation systems. The chapter begins with a tutorial introduction 
to Simulink that covers fundamentals of system simulation. Subsequent sections of 
this chapter present many examples of simulation of various digital communication 
schemes. This chapter is available on the student companion website of the book. 
ANCILLARIES AND SUPPLEMENTS 
Student Companion Website The student companion website for this book is a free 
resource that can be accessed by both students and instructors. Chapter 13 of the book 
is available on the student companion website as a PDF file. This website also includes 
all the MATLAB and Simulink files used in the text. The files are in separate directories 
that correspond to the chapters of the book. Some MATLAB files appear in more than 
one directory because they are used in more than one chapter. Numerous comments 
added to most files make them easier to understand. In developing the files, however, 
our main objective has been the clarity of the code rather than its efficiency. Where 
efficient code could have been difficult to follow, we have used less efficient but more 
readable code. To use the software, copy the files to your personal computer and add 
the corresponding paths to your MATLAB search path. All files have been tested using 
MATLAB R2011a. 
Instructor Companion Website The instructor companion website is specially de­
signed for use by instructors and can only be accessed by registered instructors. This 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

vu 
website includes teaching aids such as PowerPoint files for the figures and tables and 
Cengage Learning's unique Lecture Builder resources. 
Access Information To access the websites and additional course materials, please 
visit www.cengagebrain.com. 
At the cengagebrain.com home page, search for the 
ISBN of your title (from the back cover of your book) using the search box at the 
top of the page. This will take you to the product page where these resources can be 
found. 
ACKNOWLEDGEMENTS 
The Simulink tutorial is a modified and extended version of a lab course developed at 
the Institute for Communications Engineering (LN T), Munich University of Technol­
ogy ( TUM). We thank Professor Joachim Hagenauer for supporting the book project 
and for giving permission to use the software. We also thank Christian Buchner and 
Christoph Renner who did a large part of the programming work. Furthermore, we 
would like to thank Math Works for the permission to provide some Simulink blocks 
which are not included in the standard student version. Particularly, we thank Stuart 
McGarrity, Mike McLernon and Alan Hwang from MathWorks for their helpful ad­
vice. We also thank Mehmet Aydinlik and Osso Vahabzadeh for their assistance in 
developing the MATLAB code for the Illustrative Problems contained in this book. 
We thank the reviewers of this edition, Nagwa Bekir of the California State Uni­
versity, Northridge, Tolga Duman of Arizona State University, Hyuck M. Kwon of 
Wichita State University, and Ting-Chung Poon of Virginia Polytechnic Institute and 
State University, for their helpful comments. 
John Proakis 
Masoud Salehi 
Gerhard Bauch 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

Copyright 2011 Cengage Learning. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

Contents 
1 
Signals and Linear Systems 
1.1 
Preview . . . . . . . . . . . . . . . . . . . 
1.2 
Fourier Series . . . . . . . . . . . . . . . . 
1.2.l 
Periodic Signals and LTI Systems 
1.3 
Fourier Transforms . . . . . . . . . . . . . 
1.3 .1 
Sampling Theorem . . . . . . . . . 
1.3 .2 
Frequency-Domain Analysis of LTI Systems 
1.4 
Power and Energy . . . . . . . . . . . . . . 
1.5 
Lowpass Equivalent of Bandpass Signals . 
Problems ... 
2 
Random Processes 
2 .1 
Preview . . . . . . . . . . . . . . . . . . . . . . . . . . 
2.2 
Generation of Random Variables ........... . 
2 .2 .1 
Estimation of the Mean of a Random Variable 
2.3 
Gaussian and Gauss-Markov Processes 
2.4 
Power Spectrum of Random Processes 
2.5 
Linear Filtering of Random Processes . 
2 .6 
Lowpass and Bandpass Processes . . . . 
2.7 
Monte Carlo Simulation of Digital Communication Systems . 
Problems ............................. . 
3 
Analog Modulation 
3 .1 
Preview . . . . . . . . . . . . 
3 .2 
Amplitude Modulation (AM) 
3.2.l 
DSB-AM ..... 
3.2.2 
Conventional AM .. 
3.2.3 
SSB-AM ...... . 
3 .3 
Demodulation of AM Signals 
3.3.l 
DSB-AM Demodulation 
3 .3 .2 
SSB-AM Demodulation . 
3 .3 .3 
Conventional AM Demodulation . 
ix 
1 
1 
1 
1 2  
1 6  
2 2  
2 7  
3 1  
3 4  
41 
45 
45 
45 
50 
5 2  
59 
6 5  
70 
7 5  
80 
85 
8 5  
8 5  
86 
94 
. 101 
. 105 
. 106 
. 1 1 1  
. 1 1 6 
Copyright 2011 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectron.ic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not material1y affect the overall learning experience. Cengage Leaming reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

x 
3 .4 
Angle Modulation . 
Problems . . . . .  . 
4 
Analog-to-Digital Conversion 
4.1 
Preview . . . . . . . . .  . 
4.2 
Measure of Information . 
4.2.l 
Noiseless Coding 
4.3 
Quantization . . . . . . . . 
4.3.1 
Scalar Quantization 
4.3.2 
Vector Quantization 
4.3 .3 
Pulse-Code Modulation 
4.3.4 
Differential Pulse-Code Modulation (DPCM) . 
4.3.5 
Delta Modulation (DM) . 
Problems . . . . . . . . . .  . 
5 
Baseband Digital Transmission 
5 .1 
Preview . . . . . . . . . . . . . . . . . . . . . . . . . 
5 .2 
Binary Signal Transmission . . . . . . . . . . . . . . 
5 .2.l 
Optimum Receiver for the AWGN Channel . 
5 .2 .2 
Other Binary Signal Transmission Methods . 
5 .2.3 
Signal Constellation Diagrams for Binary Signals 
5 .3 
Multiamplitude Signal Transmission . . . . . . . . . . . 
5 .3 .1 
Signal Waveforms with Four Amplitude Levels . 
5 .3 .2 
Optimum Receiver for the AWGN Channel . . . . 
5 .3 .3 
Signal Waveforms with Multiple Amplitude Levels 
5 .4 
Multidimensional Signals . . . . . . . . . . . 
5 .4.1 
Multidimensional Orthogonal Signals 
5 .4.2 
Biorthogonal Signals 
Problems . . . . . . . . . . . . . . . . . . .  . 
6 
Transmission Through Bandlimited Channels 
6 .1 
Preview . . . . . . . . . . . . . . . . . . . .  
6 .2 
The Power Spectrum of a Digital PAM Signal 
6.3 
Characterization of Bandlimited Channels . .  
6 .4 
Characterization of Intersymbol Interference . 
6 .5 
System Design for Bandlimited Channels 
6 .5 .1 
Signal Design for Zero ISi . . . . .  . 
6 .5 .2 
Signal Design for Controlled ISi . .  . 
CONTENTS 
. 121 
. 130 
133 
. 133 
. 134 
. 134 
. 139 
. 14 0 
. 14 8 
. 15 5 
. 16 8 
. 171 
. 177 
183 
. 183 
. 183 
. 184 
. 199 
. 213 
. 214 
. 216 
. 217 
. 222 
. 226 
. 226 
. 235 
. 24 5 
249 
. 249 
. 249 
. 254 
. 26 6 
. 26 9 
. 272 
. 275 
6 .5 .3 
Precoding for Detection of Partial Response Signals . 
. 281 
6 .6 
Linear Equalizers . . . . . . . . .  . 
6 .6 .l 
Adaptive Linear Equalizers 
6 .7 
Nonlinear Equalizers 
Problems . . . . . . . . . . . . . .  . 
. 284 
. 292 
. 300 
. 308 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

CONTENTS 
7 
Digital Transmission via Carrier Modulation 
7 .1 
Preview 
. . . . . . . . . . . . . . . . . 
7.2 
Carrier-Amplitude Modulation 
. . . .  
7.2.1 
Demodulation of PAM Signals 
7 .3 
Carrier-Phase Modulation ...... . 
7 .3 .1 
Phase Demodulation and Detection 
Xl 
313 
. 313 
. 313 
. 316 
. 321 
. 324 
7 .3.2 
Differential Phase Modulation and Demodulation 
. 333 
7 .4 
Quadrature Amplitude Modulation . . . . . . . . . . . . . 
. 340 
7.4.1 
Demodulation and Detection of QAM . . . . . . . 
. 342 
7.4.2 
Probability of Error for QAM in an AWGN Channel . 
. 346 
7 .5 
Carrier-Frequency Modulation . . . . . . . . . . . . . 
. 350 
7.5 .1 
Frequency-Shift Keying . . . . . . . . . . . . . . . . . 
. 350 
7 .5 .2 
Demodulation and Detection of FSK Signals . . . . . 
. 352 
7.5 .3 
Probability of Error for Noncoherent Detection of FSK 
. 357 
7 .6 
Synchronization in Communication Systems . 
7 .6.1 
Carrier Synchronization . 
7 .6.2 
Clock Synchronization 
Problems ............. . 
8 
Multicarrier Modulation and OFDM 
8 .1 
Preview 
. . . . . . . . . . . . . . 
8.2 
Generation of an OFDM signal . .  
8.3 
Demodulation of OFDM Signals . 
8 .4 
Use of a Cyclic Prefix to Eliminate Channel Dispersion 
8.5 
Spectral Characteristics of OFDM Signals .... 
8.6 
Peak-to-Average Power Ratio in OFDM Systems 
Problems ................ . 
9 
Transmission Through Wireless Channels 
9 .1 
Preview . . . . . . . . . . . . . . . . . 
9 .2 
Channel Models for Time-Variant Multipath Channels 
9.2.1 
Frequency Nonselective Channel ..... . 
9.2.2 
9.2.3 
Frequency Selective Channel ....... . 
Modeling of the Doppler Power Spectrum 
. 361 
. 362 
. 368 
. 372 
377 
. 377 
. 379 
. 382 
. 384 
. 387 
. 389 
. 395 
397 
. 397 
. 398 
. 400 
. 404 
. 405 
9.3 
Binary Modulation in Rayleigh Fading Channel . . 
. 410 
9.3.1 
Performance in Frequency Nonselective Channel 
. 410 
9.3.2 
Performance Improvement Through Signal Diversity 
. 416 
9.3.3 
R AKE Receiver for Frequency Selective Channels . . 
. 421 
9.3.4 
OFDM Signal Transmission in Frequency Selective Channels 
. 426 
Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 428 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

xii 
CONTENTS 
10 Channel Capacity and Coding 
429 
. 429 
. 429 
. 430 
. 430 
. 440 
. 443 
. 456 
. 472 
. 475 
. 489 
. 493 
. 496 
. 502 
10 .1 Preview 
. . . . . . . . . . . . . . . . . 
10 .2 Channel Model and Channel Capacity 
10.2.1 Channel Model .. 
10.2.2 Channel Capacity . 
10 .3 Channel Coding . . . . . . . 
10 .3 .1 Linear Block Codes 
10 .3 .2 Convolutional Codes 
10 .4 Turbo Codes and Iterative Decoding 
10.4.1 The BCJR Algorithm . . . .  
10.4.2 Iterative Decoding for Turbo Codes 
10.5 Low-Density Parity-Check Codes . 
10.5.1 Decoding LDPC Codes 
Problems ............ . 
11 Multiple Antenna Systems 
505 
11.1 Preview 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. 505 
11.2 Channel Models for Multiple Antenna Systems . . . . . . . . . . . 
. 505 
11.3 Transmission over Slow Fading Frequency-Nonselective Channels 
. 507 
11.3 .1 Detection of Data Symbols in a MIMO System . 
. 509 
11.3 .2 Error Rate Performance of the Detectors 
. . . . . . . . 
. 512 
11.4 Capacity of MIMO Channels 
. . . . . . . . . . . . . . . . . . . 
. 515 
11.4.1 Capacity of Frequency-Nonselective MIMO Channels . 
. 520 
11.5 Space-Time Codes for MIMO Systems . 
. 524 
11.5 .1 Space-Time Block Codes . 
. 5 24 
11.5.2 Space-Time Trellis Codes 
. 531 
Problems . . . . . . . . . . . . . . . 
. 535 
12 Spread Spectrum Communication Systems 
539 
12.1 Preview 
. . . . . . . . . . . . . . . . . . 
. 539 
12.2 Direct-Sequence Spread Spectrum Systems 
. 540 
12.2.1 Signal Demodulation . . . . . . . . 
. 542 
12.2.2 Probability of Error . . . . . . . . . 
. 544 
12.2.3 Two Applications of DS Spread Spectrum Signals 
. 545 
12.3 Generation of PN Sequences . . . . . . . . . 
. 551 
12.4 Frequency-Hopped Spread Spectrum . . . . . . . . . . . . 
. 559 
12.4.1 Probability of Error for FH Signals 
. . . . . . . . 
. 560 
12.4.2 Use of Signal Diversity to Overcome Partial-Band Interference. 565 
Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 571 
Bibliography 
Index 
573 
575 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

Chapter 1 
Signals and Linear Systems 
1.1 
Preview 
In this chapter we review the basic tools and techniques from linear systems analysis 
used in the analysis of communication systems. Linear systems and their characteristics 
in the time and frequency domains, together with probability and analysis of random 
signals, are the two fundamental topics that must be understood in the study of commu­
nication systems. Most communication channels and many subblocks of transmitters 
and receivers can be well modeled as linear time-invariant (LTI) systems and so the 
well-known tools and techniques from linear system analysis can be employed in their 
analysis. We emphasize frequency-domain analysis tools, because these are the most 
frequently used techniques. We start with the Fourier series and transforms; then we 
cover power and energy concepts, the sampling theorem, and lowpass representation 
of bandpass signals. 
1.2 
Fourier Series 
The input-output relation of a linear time-invariant system is given by the convolution 
integral defined by 
y(t) 
= x(t) * h(t) 
= f 00 
h(T)X(t - T) dT 
(1.2.1) 
where h(t) denotes the impulse response of the system, x(t) is the input signal, and 
y(t) is the output signal. If the input x(t) is a complex exponential given by 
x(t) 
= AejZrrfot 
(1.2.2) 
1 
Copyright 2011 Cengage Learning. All Rights Reserved. May not be copied. scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter\s). 
Editorial review has deemed that any suppressed content does not materialJy affect the overall learning experience. Cengage Leaming reserves the right to remove additiona1 content at any time if subsequent rights restrictions re<tuire it. 

2 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
then the output is given by 
y(t) = J:
oo 
Aej2rrfo(t-T) h(T) dT 
=A [J:
oo 
h(T) e-j2rrfoT dT J ej2rrfot 
(l.2.3) 
In other words, the output is a complex exponential with the same frequency as the 
input. The (complex) amplitude of the output, however, is the (complex) amplitude of 
the input amplified by 
J:
oo 
h(T) e-jZrrfoT dT 
Note that the above quantity is a function of the impulse response of the LTI system, 
h(t), and the frequency of the input signal, Jo. Therefore, computing the response of 
LTI systems to exponential inputs is particularly easy. Consequently, it is natural in 
linear system analysis to look for methods of expanding signals as the sum of com­
plex exponentials. Fourier series and Fourier transforms are techniques for expanding 
signals in terms of complex exponentials. 
Fourier series is the orthogonal expansion of periodic signals with period To when 
the signal set { ejZrrnt/To} ==-oo is employed as the basis for the expansion. With this 
basis, any periodic signal1 x(t) with period To can be expressed as 
()() 
x(t) = I Xnej2rrnt/To 
(1.2.4) 
n=-oo 
where the Xn 's are called the Fourier series coefficients of the signal x ( t) and are given 
by 
1 f 
oc+To 
Xn = -
X(t)e-j2rrnt/To dt 
To oc 
(1.2.5) 
Here ex is an arbitrary constant chosen in such a way that the computation of the integral 
is simplified. The frequency Jo = 1 
/To is called the fandamental frequency of the 
periodic signal, and the frequency Jn = nJo is called the nth harmonic. In most cases 
either ex = 0 or ex = -To/2 is a good choice. 
This type of Fourier series is known as the exponential Fourier series and can be 
applied to both real-valued and complex-valued signals x(t) as long as they are peri­
odic. In general, the Fourier series coefficients {Xn} are complex numbers even when 
x(t) is a real-valued signal. 
When x(t) is a real-valued periodic signal, we have 
1 f 
oc+To 
X-n = -
X(t)ejZrrnt/To dt 
To oc 
1 [Joe+ 
]* 
= To 
oc 
x(t)e-j2rrnt/To dt 
= x* 
n 
(1.2.6) 
1 A suficient condition for the existence of the Fourier series is that x ( t) satisfy the Dirichlet conditions. 
For details , see [ 1 ] . 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.2. FOURIER SERIES 
3 
From this it is obvious that 
{ lxnl : IX-nl 
LXn - -LX-n 
(1.2.7) 
Thus the Fourier series coefficients of a real valued signal have Hermitian symmetry; 
that is, their magnitude is even and their phase part is odd (or, equivalently, their real 
part is even and their imaginary part is odd). 
Another form of Fourier series, known as trigonometric Fourier series, can be ap­
plied only to real, periodic signals and is obtained by defining 
an -Jbn 
Xn = 
2 
an+ Jbn 
X-n = 
2 
which, after using Euler's relation 
results in 
and, therefore, 
e-i2rrnt/To = cos ( 2rrt ) - j sin ( 2rrt ) 
an= :0 f :
+To 
x(t) cos ( 2rrt ) dt 
bn = :0 J:
+To 
x(t) sin ( 2rrt ) dt 
Note that for n = 0, we always have bo = 0, so ao = 2xo. 
By defining 
and using the relation 
a cos</> + b sin</> = -J a2 + b2 cos ( </> - arctan ) 
we can write Equation (1.2.12) in the form 
X(t) = O + f. CnCOS ( 2rrt; +en) 
n=l 
O 
(1.2.8) 
(1.2.9) 
(1.2.10) 
(1.2.11) 
(1.2.12) 
(1.2.13) 
(1.2.14) 
(1.2.15) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
which is the third form of the Fourier series expansion for real and periodic signals. 
In general, the Fourier series coefficients {Xn} for real-valued signals are related to 
an, bn, Cn, and en through 
an= 2Re[Xn] 
bn = -21m[Xn] 
Cn = 2lxnl 
en= LXn 
(1.2.16) 
Plots of I Xn I and LXn versus n or nfo are called the discrete spectra of x ( t). The 
plot of lxn I is usually called the magnitude spectrum, and the plot of LXn is referred 
to as the phase spectrum. 
If x(t) is real and even-that is, if x(-t) = x(t)-then taking()( = -To/2, we 
have 
2 f To/2 
( 
n ) 
bn = T 
x(t) sin 2rrtT 
dt 
.LO 
-To/2 
.LO 
(l.2.17) 
which is zero because the integrand is an odd function of t. Therefore, for a real and 
even signal x ( t), all Xn 's are real. In this case the trigonometric Fourier series consists 
of all cosine functions. Similarly, if x(t) is real and odd-that is, if x(-t) = -x(t)­
then 
2 f 
oc+To 
( 
n ) 
an= 
To 
oc 
x(t) cos 2rrt 
To 
dt 
(1.2.18) 
is zero and all Xn 's are imaginary. In this case the trigonometric Fourier series consists 
of all sine functions. 
Illustrative Problem 1.1 [Fourier Series of a Rectangular Signal Train] Let the pe­
riodic signal x(t), with period To, be defined by {A, !ti <to 
x(t) = AIT ( 
20) = , 
t = ±to 
0, 
otherwise 
(1.2.19) 
for It I ::; To/2, where to < To/2. The rectangular signal Il(t) is, as usual, defined by 
{1, 
IT(t) = !. 
0, 
ltl < ! 
1 
t = ±z-
otherwise 
(1.2.20) 
A plot of x(t) is shown in Figure 1.1. 
Assuming A= 1, 
To= 4, and to= 1, 
1. Determine the Fourier series coefficients of x ( t) in exponential and trigonomet­
ric form. 
2. Plot the discrete spectrum of x(t). 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.2. FOURIER SERIES 
5 
,x(t) 
A 
_'!i 
'!i 
2 
2 
-To 
-to 
to 
To 
Figure 1.1: The signal x ( t) in Illustrative Problem 1.1 
1. To derive the Fourier series coefficients in the expansion of x ( t) , we have 
Xn = _! J
l 
e-j2rrnt/4 dt 
4 
-1 
= 
 
[e-j2rrn/4 - ej2rrn/4] 
-2)Trn 
(1.2.21) 
1 
. (
n) 
= 2 smc 2 
(1.2.22) 
where sinc(x) is defined as 
. 
( ) 
sin(rrx) 
smc x = 
---
rrx 
(1.2.23) 
A plot of the sine function is shown in Figure 1.2. Obviously, all the Xn 's are 
real (because x(t) is real and even), so 
an= sine (;) 
bn = 0 
Cn = I sine ( ; ) I 
(1.2.24) 
en= 0, TT 
Note that for even n's, Xn = 0 (with the exception of n = 0, where ao = co = 1 
and xo =  ).Using these coefficients, we have 
x(t) = f .! sine (
n) ej2rrnt/4 
n=-oo 2 
2 
= } + f sine (;) cos ( 2rrt:) 
n=l 
(1.2.25) 
A plot of the Fourier series approximations to this signal over one period for n = 
0, 1, 3, 5, 7, 9 is shown in Figure 1.3. Note that as n increases, the approximation 
becomes closer to the original signal x ( t). 
Copyright 2011 Cengage Leaming. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party concent may be suppressed from the eBook and/or eChapter(s). 
F.ditorial review has deemed that any suppressed content does not materiaJJy afect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

6 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
0.8 
0.6 
0.4 
0.2 
-0.2 
-0.4 
-10 
-8 
-6 
-4 
-2 
0 
2 
4 
6 
8 
lO 
Figure 1.2: The sine signal 
-0.2 !"#$%&'()*+,-. 
-2 
-1.5 
-1 
-0.5 
0 
0.5 
1.5 
2 
Figure 1.3: Various Fourier series approximations for the rectangular pulse in Illustra­
tive Problem 1.1 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.2. FOURIER SERIES 
7 
2. Note that Xn is always real. Therefore, dependin7 on its sign, the phase is either 
zero or rr. The magnitude of the Xn 's is ! I sine l ¥) I . The discrete spectrum is 
shown in Figure 1.4. 
0.5 
0.45 
0.4 
0.35 
0.3 
0.25 
0.2 
0.15 
0.1 
0.05 
0 
-20 
-15 
-10 
-5 
0 
5 
10 
15 
20 
n 
Figure 1.4: The discrete spectrum of the signal in Illustrative Problem 1.1 
The MATLAB script for plotting the discrete spectrum of the signal is given next. 
___ ,, ... ·---------------
% MATLAB script for Illustrative Problem 1.1. 
n=[-20:1 :20]; 
x_actual=abs( sinc(n/2)); 
figure 
stem(n,x_actual); 
When the signal x ( t) is described on one period between a and b, as shown in 
Figure 1.5, and the signal in the interval [a, b] is given in an m-file, the Fourier series 
coefficients can be obtained using the m-file fseries.m given next. 
___ ,, ... ·---------------
function xx=fseries(funfcn,a,b,n,tol,p l ,p2,p3) 
%FSERIES 
Returns the Fourier series coefficients. 
% 
XX=FSERIES(FUNFCN,A,B,N,TOL,Pl,P2,P3) 
% 
funfcn=the given function, in an m-file. 
% 
It can depend on up to three parameters 
% 
pl,p2, and p3. The function is given 
% 
over one period extending from 'a' to 'b' 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

8 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
Figure 1.5: A periodic signal 
% 
xx=vector of length n+ 1 of Fourier Series 
% 
Coefficients, xxO,xxl , ... ,xxn. 
% 
pl,p2,p3=parameters of fanfcn. 
% 
tol=the error level. 
j=sqrt( -1 ) ; 
argsO=[ ]; 
for nn=1 :nargin-5 
argsO=[argsO,' , p' ,int2str(nn)]; 
end 
args=[argsO,') ']; 
t=b-a; 
xx(1)=eval(['1/ ( ',num2str(t),' ) • *quad ( funfcn, a, b, tol, [ ] ',args]) 
for i=1 :n 
new_fun = 'exp_fnct' ; 
args=[' , ', num2str(i), ' , ', num2str(t), argsO, ' ) ' ] ; 
xx(i+1)=eval(['1 I ( ',num2str(t),') • *quad( new_fun, a, b, tol, [ ] , funfcn' ,args]); 
end 
--t!IMllJ§jl;hjltJ§lij;te]:JM§i¢1 
Illustrative Problem 1.2 [The Magnitude and the Phase Spectra] Determine and 
plot the discrete magnitude and phase spectra of the periodic signal x ( t) with a period 
equal to 8 and defined as x(t) 
= A(t) for ltl  4. 
Because the signal is given by an m-file lambda.m, we can choose the interval [a, b] 
= 
[ -4, 4] and determine the coefficients. Note that the m-file fseries.m determines the 
Fourier series coefficients for nonnegative values of n, but because here x(t) is real 
valued, we have X-n 
= x. In Figure 1.6 the magnitude and the phase spectra of this 
signal are plotted for a choice of n = 24. 
The MATLAB script for determining and plotting the magnitude and the phase 
spectra is given next. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.2. FOURIER SERIES 
0.12 
0.1 
0.08 
0.06 
0.04 
0.02 
oL_:ilGel.illi.lJ..U..L.LI..L.LIu.r.sl!Qe<o- 
-30 
-20 
-10 
0 
10 
20 
30 
4 
3 f-
( 
" 
2 
 
f-
0 
-1 f-
-2 
 
-3 
f-
( 
) 
-4 
I 
I 
I 
I 
I 
-30 
-20 
-10 
0 
10 
20 
30 
Figure 1.6: The magnitude and the phase spectra in Illustrative Problem 1.2 
% MATLAB script for Illustrative Problem 1.2. 
echo on 
fnct=' lambda'; 
a=-4; 
b=4; 
n=24; 
9 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
tol=1e-6; 
xx=fseries(fnct,a,b,n,tol); 
xxl=xx(n+1 :-1 :2); 
xxl=[conj(xxl),xx]; 
absxxl=abs(xxl ); 
pause % Press any key to see a plot of the magnitude spectrum. 
nl=[-n:n]; 
stem(nl ,absxxl) 
title(' The Discrete Magnitude Spectrum' ) 
phasexxl=angle(xxl); 
pause % Press any key to see a plot of the phase. 
stem(nl ,phasexx 1) 
title(' The Discrete Phase Spectrum' ) 
--llM!IJ§il;fultJi#l;l•1:1!§1@1 
Illustrative Problem 1.3 [The Magnitude and the Phase Spectra] Determine and 
plot the magnitude and the phase spectra of a periodic signal with a period equal to 12 
that is given by 
x(t) 
= 
_l_e-t212 
J2i 
in the interval [ -6, 6]. A plot of this signal is shown in Figure 1.7. 
0.4 
0.35 
0.3 
0.25 
0.2 
0.15 
0.1 
0.05 
0 
-20 
-15 
-10 
-5 
0 
5 
lO 
15 
20 
Figure 1.7: The periodic signal in Illustrative Problem 1.3 
The signal is equal to the density function of a zero-mean unit-variance Gaussian (nor­
mal) random variable given in the m-file normal.m. This file requires two parameters, 
m ands, the mean and the standard deviation of the random variable, which in the 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.2. FOURIER SERIES 
11 
problem are 0 and 1, respectively. 
Therefore, we can use the following MATLAB 
script to obtain the magnitude and the phase plots shown in Figure 1.8. 
0.09 
0.08 
0.07 
0.06 
0.05 
0.04 
0.03 
0.02 
0.01 
0 
-30 
4 
3  
2  
1  
0 
-1 -
-2  
-3 -
-4 
-30 
I 
-20 
I 
(l ( ( 
 
 
 
 
- - -
I 
-20 
-
 I) 
I 
() 
9r 
-10 
I 
I 
-10 
I 
I 
( 
() ( 
( 
I) 
( 
r9.-
0 
10 
I 
I 
I 
I 
0 
10 
( ( 
 
I 
20 
I 
 
 
 
- - - -
( IJ (l 
I 
20 
-
-
-
-
-
-
-
-
-
30 
30 
Figure 1.8: The magnitude and phase spectra in Illustrative Problem 1.3 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

12 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
---®Ii" •---------------
% MATLAB script for Illustrative Problem 1 .3. 
echo on 
fnct=' normal'; 
a=-6; 
b=6; 
n=24; 
tol=1e-6; 
xx=fseries(fnct,a,b,n,tol,O, 1 ); 
xxl=xx(n+1 :-1 :2); 
xxl=[conj(xxl),xx]; 
absxxl=abs(xxl); 
pause % Press any key to see a plot of the magnitude. 
nl=[-n:n]; 
stem(nl ,absxxl) 
title(' The Discrete Magnitude Spectrum') 
phasexxl=angle(xxl); 
pause % Press any key to see a plot of the phase. 
stem(nl ,phasexx 1) 
title(' The Discrete Phase Spectrum') 
1.2.1 
Periodic Signals and LTI Systems 
When a periodic signal x(t) is passed through an LTI system, as shown in Figure 1.9, 
the output signal y(t) is also periodic, usually with the same period as the input signal 
(why?),2 and therefore it has a Fourier series expansion. 
If x(t) and y(t) are expanded as 
00 
x(t) 
= I Xnej2rrnt/To 
(1.2.26) 
n=-oo 
00 
y(t) 
I Ynej2rrnt/To 
(1.2.27) 
n=-oo 
x(t) 
LTI System 
y(t) 
Figure 1.9: Periodic signals through LTI systems 
2We say usually with the same period as the input signal. Can you give an example where the period of 
the output is different from the period of the input? 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.2. FOURIER SERIES 
13 
then the relation between the Fourier series coefficients of x ( t) and y ( t) can be ob­
tained by employing the convolution integral 
y(t) 
= f :00 X(t - T)h(T) dT 
= J:
oo n
oo 
Xnej2rrn(t-T)/Toh(T) dT 
= 
n
oo 
Xn (f :
oo 
h(T)e-j2rrnT/To dT) ej2rrnt/To 
00 
= I Ynej2rrnt/To 
(1.2.28) 
n=-oo 
From the preceding relation we have 
(1.2.29) 
where H (j) denotes the transfer function3 of the LTI system given as the Fourier trans­
form of its impulse response h(t): 
H(j) 
= f :00 h(t)e-i2rrft dt 
(1.2.30) 
Illustrative Problem 1.4 [Filtering of Periodic Signals] A triangular pulse train x(t) 
with period To 
= 2 is defined in one period as 
1t + 1, 
A(t) 
= 
-t + 1, 
0, 
-1::s;t::s;0 
0 < t ::s; 1 
otherwise 
1. Determine the Fourier series coefficients of x ( t) . 
2. Plot the discrete spectrum of x ( t) . 
(1.2.31) 
3. Assuming that this signal passes through an LTI system whose impulse response 
is given by 
h(t) 
= {
t, 
0, 
0 ::s; t < 1 
otherwise 
(1.2.32) 
plot the discrete spectrum and the output y ( t) . Plots of x ( t) and h ( t) are given 
in Figure 1.10. 
3 Also known as the frequency response of the system. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

14 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
x(t) 
h(t) 
-1 
1 
Figure 1.10: The input signal and the system impulse response 
1. We have 
1 f 
To/2 
. 
Xn = 
-
X(t)e-J2rrnt/To dt 
To -To/2 
= _!_ f 
1 
A(t)e-Jrrnt dt 
2 
-1 
= _!_ f 
oo A(t)e-Jrrnt dt 
2 
-00 
1 
= 2$[A(t)]f=n/2 
1 
. 
2(n) 
= 2 smc 
2 
(l.2.33) 
(1.2.34) 
(l.2.35) 
(1.2.36) 
(l.2.37) 
where we have used the facts that A ( t) vanishes outside the [ -1, 1] interval and 
that the Fourier transform of A ( t) is sinc2 (j). This result can also be obtained 
by using the expression for A(t) and integrating by parts. Obviously, we have 
Xn = 0 for all even values of n except for n = 0. 
2. A plot of the discrete spectrum of x(t) is shown in Figure 1.11. 
3. First we have to derive H (j), the transfer function of the system. Although this 
can be done analytically, we will adopt a numerical approach. The resulting mag­
nitude of the transfer function and also the magnitude of H(n/To) 
= H(n/2) 
are shown in Figure 1.12. To derive the discrete spectrum of the output we em­
ploy the relation 
Yn = XnH () 
(1.2.38) 
1 
. 
2 (n) (n) 
= 2 smc 
2 H 2 
(1.2.39) 
The resulting discrete spectrum of the output is shown in Figure 1.13. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.2. FOURIER SERIES 
15 
0.5 
0.45 
0.4 
0.35 
0.3 
0.25 
0.2 
0.15 
0.1 
0.05 
0 
-10 
-8 
-6 
-4 
-2 
0 
2 
4 
6 
8 
10 
n 
Figure 1.11 : The discrete spectrum of the signal 
The MATLAB script for this problem follows. 
__.,., .. ·----------------
% MATLAB script for Illustrative Problem 1.4. 
echo on 
n=[-20:1 :20]; 
% Fourier series coefficients of x(t) vector 
x=.5*(sinc(n/2)). A2; 
% sampling interval 
ts=1/40; 
% time vector 
t=[-.5:ts:1.5]; 
% impulse response 
fs=1/ts; 
h=[zeros(1,20),t(21 :61 ),zeros(1,20)]; 
% transfer function 
H=fft(h)/fs; 
% frequency resolution 
df=fs/80; 
f=[O:df:fs]-fs/2; 
% rearrange H 
H1 =fftshift(H); 
y=x.*H1(21 :61 ); 
% Plotting commands follow. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

16 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
0.5 
0.4 
0.3 
0.2 
0.1 
o !" 
-20 
-15 
-10 
-5 
0.5 
0.4 
0.3 
0.2 
0.1 
-15 
-10 
-5 
0 
Frequency 
0 
n 
5 
5 
10 
15 
20 
10 
15 
20 
Figure 1.12: The transfer function of the LTI system and the magnitude of H ( n / 2) 
1.3 
Fourier Transforms 
The Fourier transform is the extension of the Fourier series to nonperiodic signals. The 
Fourier transform of a signal x ( t) that satisfies certain conditions, known as Dirichlet's 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.3. FOURIER TRANSFORMS 
0.25 
0.2 
0.15 
0.1 
0.05 
-15 
-10 
-5 
0 
n 
5 
10 
15 
Figure 1.13: The discrete spectrum of the output 
20 
conditions [1], is denoted by X(j) or, equivalently, JJ"[x(t)] and is defined by 
JJ"[x(t)] = X(j) = J:00 x(t)e-jZrrft dt 
The inverse Fourier transform of X (f) is x ( t) , given by 
If x(t) is a real signal, then X(j) satisfies the Hermitian symmetry; that is, 
X ( -f) = X* (j) 
17 
(1.3 .1) 
(1.3.2) 
(1.3.3) 
There are certain properties that the Fourier transform satisfies. The most important 
properties of the Fourier transform are summarized as follows. 
1. Linearity: The Fourier transform of a linear combination of two or more signals 
is the linear combination of the corresponding Fourier transforms: 
JJ"[ax1(t) + f3x2(t)] = a.?7[x1(t)] + /3.?7[xz(t)] 
(1.3.4) 
2. Duality: If X(j) = JJ"[x(t) ], then 
JJ"[X(t)] = x(-j) 
(1.3 .5) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

18 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
3. Time shift: A shift in the time domain results in a phase shift in the frequency 
domain. If X(j) = $[x(t)], then 
$[x(t - to)]= e-j2rrftox(j) 
(1.3.6) 
4. Scaling: An expansion in the time domain results in a contraction in the fre­
quency domain, and vice versa. If X(f) = $[x(t) ], then 
$[x(at)] = 1!1x (), 
(1.3.7) 
5. Modulation: Multiplication by an exponential in the time domain corresponds 
to a frequency shift in the frequency domain. If X(j) = $[x(t) ], then 
{ 
$[ej2rrfot x(t)] = X(j - Jo) 
$[x(t) cos(2rrfot)J =  [X(f- fo) + X(f + fo)] 
(l.3.8) 
6. Differentiation: Differentiation in the time domain corresponds to multiplica­
tion by j2rrf in the frequency domain. If X(j) = $[x(t) ], then 
$[x'(t)] = j2rrfX(j) 
$" [:t:x(t)J = (j2rrf)nX(f) 
(l.3.9) 
(1.3.10) 
7. Convolution: Convolution in the time domain is equivalent to multiplication 
in the frequency domain, and vice versa. If X (j) = $" [x ( t)] and Y (f) = 
$[y (t) ], then 
$[x(t) * y(t)] = X(j)Y(j) 
$[x(t)y(t)] = X(j) * Y(j) 
8. Parseval'srelation: If X(j) = $[x(t)] and Y(j) = $[y(t)], then 
f :00 x(t)y* (t) dt = f :00 X(j)Y* (j) df 
J :00 lx(t) 12 
dt = J :00 I X(j) I 
2 
df 
The second relation is also referred to as Rayleigh's relation. 
(1.3 .11) 
(l.3.12) 
(1.3.13) 
(1.3.14) 
Table 1.1 gives the most useful Fourier transform pairs. In this table U-1 (t) denotes 
the unit step function, c5(t) is the impulse signal, sgn(t) is the signumfunction, defined 
as 
11, 
sgn(t) = 0, -1, 
t>O 
t=O 
t<O 
and o(n) (t) denotes the nth derivative of the impulse signal. 
(1.3.15) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.3. FOURIER TRANSFORMS 
x(t) 
c5 ( t) 
1 
c5(t - to) 
ej2rrfot 
cos(2rr Jot) 
sin(2rr Jot) 
CT(t) 
sinc(t) 
A(t) 
sinc2(t) 
e-octu_1 (t) , 
()( > 0 
te-octu_1 (t) , 
()( > 0 
e-ocltl 
' 
()( > 0 
e-rrt2 
sgn(t) 
U- 1 (t) 
c5' (t) 
c5(n) (t) 
L7=-oo c5(t - nTo) 
X(J) 
1 
c5(J) 
e-j2rrfto 
c5(f - Jo) 
 c5(f - Jo) +  c5(f +Jo) 
21j c5 (f - J 0) - 2' c5 (f + J 0) 
sinc(J) 
CT(J) 
sinc2(j) 
A(j) 
1 
oc+ i2rr t 
1 
(oc+ i2rr f)2 
2oc 
ocZ+(2rr f)Z 
e-rrf2 
1 
irr7 
 c5(j) + ;2;7 
j2rrJ 
(j2rrJ)n 
io I=-00 c5(f - ) 
Table 1.1: Table of Fourier transform pairs 
19 
For a periodic signal x ( t) , with period To, whose Fourier series coefficients are 
given by Xn -that is, 
00 
x(t) = I Xnej2rrnt/To 
n=-oo 
the Fourier transform is obtained by 
X(j) = $[x(t)] 
= $ [noo 
Xnej2rrnt/To] 
00 
= I Xn.97 [ ej2rrnt/To] 
n=-oo 
(1.3.16) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

20 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
In other words, the Fourier transform of a periodic signal consists of impulses at mul­
tiples of the fundamental frequency (harmonics) of the original signal. 
It is also possible to express the Fourier series coefficients in terms of the Fourier 
transform of the truncated signal by 
(l.3.17) 
where by definition XTo (j) is the Fourier transform of XTo (t), the truncated signal, 
defined by 
Xr, (t) = {x(t), 
0 
0, 
_To < t 
< To 
2 
-
2 
otherwise 
(l.3.18) 
The Fourier transform of a signal is called the spectrum of the signal. The spec­
trum of a signal in general is a complex function X (j); therefore, to plot the spectrum, 
usually two plots are provided: the magnitude spectrum I X (f) I and the phase spec­
trum LX(j). 
Illustrative Problem 1.5 [Fourier Transforms] Plot the magnitude and the phase 
spectra of signals X1 ( t) and X2 ( t) shown in Figure 1.14. 
Xz(t) 
1 
1 
-1 
1 
2 
Figure 1.14: Signals X1 ( t) and X2 ( t) 
Because the signals are similar except for a time shift, we would expect them to have 
the same magnitude spectra. The common magnitude spectrum and the two phase 
spectra plotted on the same axes are shown in Figures 1.15 and 1.16, respectively. 
The MATLAB script for this problem follows. In Section 1.3.l we show how to 
obtain the Fourier transform of a signal using MATLAB. 
% MATLAB script for Illustrative Problem 1 .5 . 
df=0.01; 
fs=10; 
ts=1/fs; 
t=[-5:ts:5]; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.3. FOURIER TRANSFORMS 
0.8 
0.6 
0.4 
0.2 
0 
-5 
-4 
-3 
-2 
-1 
0 
2 
3 
4 
5 
Frequency 
Figure 1.15: The common magnitude spectrum of the signals X1 ( t) and X2 ( t) 
Radians 
3 
2 
0 
-1 
-2 
-3 
-4 
-0.15 
-0.1 
' 
' 
-0.05 
0 
I ' 
' 
' I 
0.05 
' 
' 
Frequency 
0.1 
0.15 
Figure 1.16: Thephasespectra ofthesignalsx1(t) andx2(t) 
% Creating Signals 
xl=zeros(size(t)); 
x1(41 :51)=t(41 :51)+1; 
xl (52:61 )=ones(size(xl (52:61 ))); 
21 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

22 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
x2=zeros(size(t)); 
x2(51 :71)=x1(41 :61); 
% Demonstrate how a time shift reflects in the phase of FFT 
[Xl,xl 1,dfl]=fftseq(xl,ts,df); 
(X2,x21,df2]=fftseq(x2,ts,df); 
Xll=Xl/fs; 
X21=X2/fs; 
f=[O:dfl:dfl *(length(xl 1)-1 )]-fs/2; 
plot(f,fftshift(abs(Xl 1))) 
figure 
plot(f(500:525),fftshift(angle(Xl 1(500:525))),f(500:525),fftshift(angle(X21(500:525))),' --') 
1.3.1 
Sampling Theorem 
The sampling theorem is one of the most important results in signal and system analy­
sis; it forms the basis for the relation between continuous-time signals and discrete-time 
signals. The sampling theorem says that a bandlimited signal-that is, a signal whose 
Fourier transform vanishes for If I > W for some W-can be completely described in 
terms of its sample values taken at intervals Ts as long as Ts l/2W. If the sampling 
is done at intervals Ts = 1I2 W, known as the Nyquist interval (or Nyquist rate), the 
signal x(t) can be reconstructed from the sample values {x[n] = x(nTs)} =-oo as 
00 
x(t) = I x(nTs)sinc (2W(t - nTs)) 
n=-oo 
This result is based on the fact that the sampled waveform X15 ( t), defined as 
00 
X15(t) = I x(nTs)6(t - nTs) 
n=-oo 
has a Fourier transform given by 
X15(j) = _!_ f X (! -!!_) 
Ts n=-oo 
Ts 
= ;s X(j) 
for all f 
for Ill< w 
(1.3.19) 
(1.3.20) 
(1.3.21) 
so passing it through a lowpass filter with a bandwidth of W and a gain of Ts in the 
passband will reproduce the original signal. 
Figure 1.17 is a representation of Equation (l.3.19) for Ts= 1 and {x[n]} =-3 = 
{ l, 1, -1, 2, -2, 1, 2}. In other words, 
x(t) = sinc(t + 3) + sinc(t + 2) - sinc(t + 1) + 2 sinc(t) 
- 2 sinc(t - 1) + sinc(t - 2) + 2 sinc(t - 3) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.3. FOURIER TRANSFORMS 
23 
2 
\ 2 sine(t) 
' 
2 sine(! - 3) 
sine( I+ 2) ,' 
0 
.. -
.. , 
-1 
-2 
-2 sine(t - l) 
-3'--'-_,_	--'---"'--'--'---'---'._--' 
-5 
-4 
-3 
-2 
-1 
0 
2 
3 
Figure 1.17: Representation of the sampling theorem 
4 
5 
Time 
The discrete Fourier transform (DFT) of the discrete-time sequence x[n] is ex­
pressed as 
00 
Xd(j) 
= L x[n]e-jZrrfnTs 
(l.3.22) 
n=-oo 
Comparing Equations ( 1.3 .22) and ( 1.3 .21), we conclude that 
for Iii< w 
(1.3.23) 
which gives the relation between the Fourier transform of an analog signal and the 
discrete Fourier transform of its corresponding sampled signal. 
Numerical computation of the discrete Fourier transform is done via the well­
known fast Fourier transform (FFT) algorithm. In this algorithm a sequence of length 
N of samples of the signals x ( t) taken at intervals of Ts is used as the representation of 
the signal. The result is a sequence of length N of samples of Xd (j) in the frequency 
interval [O,isJ. where is 
= 1/Ts 
= 2W is the Nyquist frequency. When the samples 
are 6.i 
= is IN apart, the value of 6.i gives the frequency resolution of the resulting 
Fourier transform. The FFT algorithm is computationally efficient if the length of the 
input sequence, N, is a power of 2. In many cases if this length is not a power of 2, it is 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

24 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
made to be a power of 2 by techniques such as zero padding. Note that because the FFT 
algorithm essentially gives the DPT of the sampled signal, in order to get the Fourier 
transform of the analog signal we have to employ Equation (1.3.23). This means that 
after computing the FFT, we have to multiply it by Ts or, equivalently, divide it by fs 
in order to obtain the Fourier transform of the original analog signal. 
The MATLAB function fftseq .m, given next, takes as its input a time sequence 
m, the sampling interval ts, and the required frequency resolution dj and returns a 
sequence whose length is a power of 2, the FFT of this sequence M, and the resulting 
frequency resolution. 
---ffil#l! ·--------------
function [M,m,df]=fftseq(m,ts,dt) 
% 
[M,m,dfl=fftseq(m,ts,df) 
% 
[M,m,dfl=.ftseq(m,ts) 
%FFTSEQ 
generates M, the FFT of the sequence m. 
% 
The sequence is zero padded to meet the required frequency resolution df. 
% 
ts is the sampling interval. The output df is the final frequency resolution. 
% 
Output m is the zero padded version of input m. M is the FFT. 
fs=1 /ts; 
if nargin == 2 
nl=O; 
else 
nl=fs/df; 
end 
n2=length(m); 
n=2 A (max(nextpow2(nl ),nextpow2(n2))); 
M=fft(m,n); 
m=[m,zeros(1,n-n2)]; 
df=fs/n; 
--li!!IJ§il;ful!t.iii';l•1:J!§i@I 
Illustrative Problem 1.6 [Analytical and Numerical Derivation of the Fourier 
Transform] The signal x(t) is described by 
t + 2, 
-2 , t , -1 
1, 
-1 < t  1 
x(t) 
-t + 2, 
l<t,2 
(1.3.24) 
0, 
otherwise 
and is shown in Figure 1.18. 
1. Determine the Fourier transform of x(t) analytically and plot the spectrum of 
x(t). 
2. Using MATLAB, determine the Fourier transform numerically and plot the re­
sult. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.3. FOURIER TRANSFORMS 
25 
x(t) 
-2 
-1 
2 
Figure 1.18: The signal x(t) 
1. The signal x ( t) can be written as 
x ( t) = 2A ( ) - A ( t) 
(1.3.25) 
and therefore 
X(j) = 4sinc2(2j) - sinc2(j) 
(1.3.26) 
where we have used linearity, scaling, and the fact that the Fourier transform 
of A(t) is sinc2 (j). Obviously, the Fourier transform is real. The magnitude 
spectrum is shown in Figure 1.19 . 
2.5 
2 
1.5 
0.5 
ob.....1.-.a::...:::,..L._j/__L_J__J__l._.L...l#<:::>.Ll::,....__. 
-2.5 
-2 
-1.5 
-1 
-0.5 
0 
0.5 
1.5 
2 
2.5 
Frequency 
Figure 1.19: The magnitude spectrum of x ( t) derived analytically 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

26 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
2. In order to determine the Fourier transform using MATLAB, we first give a rough 
estimate of the bandwidth of the signal. Because the signal is relatively smooth, 
its bandwidth is proportional to the inverse time duration of the signal. The time 
duration of the signal is 4. To be on the safe side we take the bandwidth as 10 
times the inverse time duration, or 
1 
BW 
= 10 x "4 
= 2.5 
(l.3.27) 
and therefore the Nyquist frequency is twice the bandwidth and is equal to 5. 
Hence the sampling interval is Ts 
= 1 Ifs 
= 0. 2. We consider the signal on the 
interval [ -4, 4] and sample it at Ts intervals. With this choice, using a simple 
MATLAB script employing the fftseq .m function, we can derive the FFT numer­
ically. We have chosen the required frequency resolution to be 0.01 Hz, so the 
resulting frequency resolution returned by fftseq.m is 0.0098 Hz, which meets 
the requirements of the problem. The signal vector x, which has length 41, is 
zero padded to a length of 256 to meet the frequency-resolution requirement and 
also to make it a power of 2 for computational efficiency. A plot of the magnitude 
spectrum of the Fourier transform is given in Figure 1.20. 
2.5 
2 
1.5 
0.5 
oc::..=-..i...,=-..:::::..J..L-:l....L_J_L_L..L..J{__:..i.:::::.L.L::..:=-.1.-=D 
-2.5 
-2 
-1.5 
-1 
-0.5 
0 
0.5 
1.5 
2 
2.5 
Frequency 
Figure 1.20: The magnitude spectrum of x(t) derived numerically 
The MATLAB script for this problem is given next. 
% MATLAB script for Illustrative Problem 1.6. 
echo on 
ts=0.2; 
% set parameters 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.3. FOURIER TRANSFORMS 
fs=1/ts; 
df=0.01; 
x=[zeros(1, 10),[0:0.2:1 ],ones(1,9),[1:-0.2:0],zeros(1,1 O)]; 
[X,x,dfl]=fftseq(x,ts,df}; 
Xl=Xffs; 
f=[O:dfl :dfl *(length(x)-1 )]-fs/2; 
fl=[-2.5:0.001 :2.5]; 
% derive the FFT 
% scaling 
% frequency vector for FFT 
% frequency vector for analytic approach 
y=4*(sinc(2*fl)). "2-(sinc(fl)). "2; 
% exact Fourier transform 
pause % Press akey to see the plot of the Fourier Transform derived analytically. 
elf 
subplot(2, 1 , 1) 
plot(fl,abs(y)); 
xlabel(' Frequency') 
title('Magnitude-pectrum of x(t) derived analytically') 
pause % Press akey to see the plot of the Fourier Transform derived numerically. 
subplot(2, 1 ,2) 
plot(f,fftshift( abs(Xl))); 
xlabel(' Frequency') 
title('Magnitude-spectrum of x(t) derived numerically') 
1.3.2 
Frequency-Domain Analysis of LTI Systems 
27 
The output of an LTI system with impulse response h ( t) when the input signal is x ( t) 
is given by the convolution integral 
y(t) = x(t) * h(t) 
(l.3.28) 
Applying the convolution theorem, we obtain 
Y(j) 
= X(j)H(j) 
(1.3.29) 
where 
H(j) = $[h(t)] 
= f :00 h(t)e-jZrrft dt 
(1.3.30) 
is the transfer function of the system. Equation ( 1.3 .29) can be written in the form 
{I Y(j) I 
= IX(f) I IH(f) I 
LY(j) 
= LX(j) + LH(j) 
(1.3.31) 
which shows the relation between the magnitude and phase spectra of the input and the 
output. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

28 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
Illustrative Problem 1.7 [LTI System Analysis in the Frequency Domain] The sig­
nal x(t) whose plot is given in Figure 1.21 consists of some line segments and a sinu­
soidal segment. 
x(t) 
-2 
I 
3 
4 
Figure 1.21: The signal x(t) 
1. Determine the FFT of this signal and plot it. 
2. If the signal is passed through an ideal lowpass filter with a bandwidth of 1.5 Hz, 
find the output of the filter and plot it. 
3. If the signal is passed through a filter whose impulse response is given by 
plot the filter output. 
{t, 
0 :-:; t < 1 
h(t) = 
1, 
1 :-:; t :-:; 2 
0, 
otherwise 
(1.3.32) 
First we derive an expression for the sinusoidal part of the signal. This is a sinusoidal 
whose half-period is 2; therefore, it has a frequency of Jo 
=  
= 0.25 Hz. 
The 
signal has an amplitude of 2 and is raised by 2, so, the general expression for it is 
2 cos(2rr x 0.25t + 8) + 2 
= 2 cos(0.5rrt + 8) + 2. The value of the phase e is 
derived by employing the boundary conditions 
2 + 2 cos(0.5rrt + 8) lt=2 
= 0 
ore 
= 0. Therefore, the signal can be written as 
t + 2, 
-2 :-:; t :-:; 0 
1, 
0 < t :-:; 1 
x(t) = 
2 + 2 cos(0.5rrt), 
1 < t :-:; 3 
1, 
3 < t :-:; 4 
0, 
otherwise 
(1.3.33) 
(1.3.34) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.3. FOURIER TRANSFORMS 
29 
Having a complete description of the signal, we can proceed with the solution. 
1. The bandwidth of the signal has been chosen to be 5 Hz. The required frequency 
resolution is 0.01 Hz. The plot of the magnitude spectrum of the signal is given 
in Figure 1.22. 
7 
6 
5 
4 
3 
2 
o ---------- 
-2.5 
-2 
-1.5 
-1 
-0.5 
0 
0.5 
1.5 
2 
2.5 
Frequency 
Figure 1.22: The magnitude spectrum of the signal 
2. Here ls 
= 5 Hz. Because the bandwidth of the lowpass filter is 1. 5 Hz, its trans­
fer function is given by 
1
1, 
H(j) = 
0, 
1, 
0 5 f 5 1.5 
1.5 < f 5 3.5 
3.5 < f 5 5 
(l.3.35) 
which is multiplied by X (j) to generate Y (j), the Fourier transform of the out­
put. Using this transfer function gives the output shown in Figure 1.23. 
3. Here we obtain the output of the filter by a simple convolution. The result is 
shown in Figure 1.24. 
The MATLAB script for this problem is given next. 
__.,, .. ·--------------
% MATLAB script for Illustrative Problem 1.7. 
echo on 
df=0.01; 
fs=5; 
% freq. resolution 
% sampling frequency 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

30 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
2 
1.5 
0.5 
0 '-0 
.... '-""'-----'_J._z___J._J___y___J 
-5 
-4 
-3 
-2 
-1 
0 
2 
3 
4 
5 
Time 
Figure 1.23: The output of the lowpass filter 
12 
10 
8 
6 
4 
2 
0'--'-'--'-
-'"-'-'--'-'--'--'---' 
-10 
-8 
-6 
-4 
-2 
0 
2 
4 
6 
8 
10 
Time 
Figure 1.24: The output signal in the third part of Illustrative Problem 1.7 
ts=1/fs; 
t=[-5:ts:5]; 
x=zeros(1,length(t)); 
% sampling interval 
% time vector 
% input signal initiation 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.4. POWERANDENERGY 
x(16:26)=t(16:26)+2; 
x(27:31 )=2*ones(1,5); 
x(32:41 )=2+2*cos(0.5*pi*t(32:41)); 
x(42:46)=2*ones(1,5); 
% Part 1 
[X,xl,dfl]=fftseq(x,ts,df); 
f=[O:dfl :dfl *(length(xl)-1 )]-fs/2; 
Xl=Xlfs; 
% spectrum of the input 
% frequency vector 
% scaling 
% Part 2 
Filter transfer fanction 
H=[ones(1,cei1(1.5/dfl)),zeros(1,length(X)-2*cei1(1.5/dfl)),ones(1,ceil(1.5/dfl))]; 
Y=X.*H; 
% output spectrum 
yl=ifft(Y); 
% output of the filter 
% Part 3 
LT/ system impulse response 
h=[zeros(1,cei1(5/ts)),t(cei1(5/ts)+ 1 :cei1(6/ts)),ones(1,ceil(7/ts)-ceil(6/ts)),zeros(1,51-ceil(7/ts))]; 
y2=conv(h,x); 
% output of the LT/ system 
pause 
% Press a key to see spectrum of the input 
plot(f,fftshift(abs(Xl))) 
pause 
% Press a key to see the output of the lowpass filter. 
plot(t,abs(yl(1 :length(t)))); 
pause 
% Press a key to see the output of the LT/ system. 
plot([-10:ts:1 O),y2); 
1.4 
Power and Energy 
31 
The energy and the power contents of a real signal x(t), denoted by Ex and Px, re­
spectively, are defined as { Ex= f :00 x2 (t) dt 
1 
T/2 
Px = lim 
T f 
x2(t) dt 
T-oo 
-T/2 
(1.4.1) 
A signal with finite energy is called an energy-type signal, and a signal with positive 
and finite power is a power-type signal.4 For instance, x(t) = II(t) is an energy-type 
signal, whereas x(t) = cos(t) is a power-type signal. All periodic signals5 are power­
type signals. The energy spectral density of an energy-type signal gives the distribution 
of energy at various frequencies of the signal and is given by 
Wx(f) = IX(f)l2 
(1.4.2) 
Therefore, 
(1.4.3) 
4 There exist signals that are neither energy type nor power type. One example of such signals is x ( t) = 
etu-1 (t). 
5The only exception is those signals that are equal to zero almost everywhere. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

32 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
Using the convolution theorem, we have 
Cflx(f) = $[Rx(T)] 
where Rx ( T) is the autocorrelation fanction of x ( t) , defined as 
Rx(T) = J :00 x(t)x(t + T) dt 
= X(T) * X(-T) 
(1.4.4) 
(1.4.5) 
for real valued signals. For power-type signals we define the time-average autocorre­
lation fanction as 
1 f 
T/2 
Rx(T) = lim 
T 
x(t)x(t + T) dt 
T	oo 
-T/2 
and the power-spectral density is in general given by 
Sx(f) = $[Rx(T)] 
The total power is the integral of the power-spectral density given by 
(l.4.6) 
(l.4.7) 
(l.4.8) 
For the special case of a periodic signal x(t) with period To and Fourier series coeffi­
cients Xn, the power-spectral density is given by 
(1.4.9) 
which means all the power is concentrated at the harmonics of the fundamental fre­
quency, and the power at the nth harmonic (n/To) is lxn12; that is, the magnitude 
square of the corresponding Fourier series coefficient. 
When the signal x ( t) passes through a filter with transfer function H (j), the output 
energy spectral density, or power-spectral density, is obtained via 
{ Cfly(j) = IH(j) l2Wx(f) 
Sy(j) = IH(f)l2Sx(f) 
(1.4.10) 
If we use the discrete-time (sampled) signal, the energy and power relations equivalents 
to Equation (1.4.1) in terms of the discrete-time signal become 
00 
n=-oo 
1 
N 
Px = lim 2 
1 I x2 [ n] 
N	oo 
N + 
n=-N 
(1.4.11) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.4. POWERANDENERGY 
33 
and if the FFT is employed-that is, if the length of the sequence is finite and the 
sequence is repeated-then 
N-1 
Ex = Ts L x2 [n] 
n=O 
l N-1 
Px=N 2: x2[n] 
n=O 
(1.4.12) 
The following MATLAB function power.m gives the power content of a signal vector. 
function p=spower(x) 
% 
p=spower(x) 
%SPOWER 
returns the power in signal x 
p=(norm(x)  2)/length(x); 
If Xd (f) is the DFf of the sequence x [ n], then the energy spectral density of 
x(t), the equivalent analog signal, is obtained by using Equation (1.3.23) and is given 
by 
(1.4.13) 
where Ts is the sampling interval. The power-spectral density of a sequence x[n] is 
most easily derived by using the MATLAB function spectrum.m. 
--tlMM!J•ii;Miltj§l:;J;t•1:JM§l1 
Illustrative Problem 1.8 [Power and Power Spectrum] The signal x(t) has a dura­
tion of 10 and is the sum of two sinusoidal signals of unit amplitude, one with frequency 
47 Hz and the other with frequency 219 Hz: 
{cos(2rr x 47t) + cos(2rr x 219t), 
x(t) = 
0, 
0  t  10 
otherwise 
This signal is sampled at a sampling rate of 1000 samples per second. Use MATLAB 
to find the power content and the power-spectral density for this signal. 
With the MATLAB function spower.m, the power content of the signal is found to be 
1.0003 W. By using spectrum.welch and psd, we can plot the power-spectral density of 
the signal, as shown in Figure 1.25. The twin peaks in the power spectrum correspond 
to the two frequencies present in the signal. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

34 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
Welch Power Spectral Density Estimate 
o !"#$%&'()*+, 
-20 
-40 
-60 
:>. 
-80 
 
g' -100 
<t1 
I:; -120 
 
 -140 
-160 
- - - - - -
- - - - - - - -
- - - - - - - .. - - - - - - - - ... - -
- - - - .. - - - - - - - _ ,_ - - - - - - - . - - - - - - - _,_ - - - - - - - .. - - - - - -
. 
' 
. 
' 
' 
' 
. 
I 
I 
I 
I 
I 
I 
I 
. 
' 
. 
. 
' 
' 
. 
. 
' 
. 
. 
' 
' 
. 
- - - - - - - -
- - - - - - - .. - - - - - - - - ... -
- - - - .. - - - - - - - _ ,_ - - - - - - - . - - - - - - - _,_ - - - - - - - .. - - - - - -
. 
' 
. 
' 
' 
' 
. 
I 
I 
I 
I 
I 
I 
I 
. 
' 
. 
' 
' 
' 
. 
. 
' 
. 
' 
' 
' 
. 
- - - - - - - -
_ _ _ _ _ _ _  .. _ _ _ _ _ _ _ _  ,_ _ 
-
_ _ _  .. _ _ _ _ _ _ _ _  , _ _ _ _ _ _ _ _  . _ _ _ _ _ _ _ _  , _ _ _ _ _ _ _ _  .. _ _ _ _ _  _ 
' 
' 
. 
' 
' 
' 
' 
' 
' 
. 
' 
' 
' 
. 
. 
' 
. 
' 
' 
' 
. 
. 
' 
' 
' 
' 
' 
. 
- - - -
- ... 
- - - - - - -
- - - - - - - .. - - - - - - - - ,_ 
- - -
- -  - - - - - - - _ ,_ - - - - - - -  - - - - - - - _,_ - - - - - - - .. - - - - - -
I 
0 
I 
0 
I 
0 
0 
0 
' 
. 
' 
. 
' 
' 
' 
. 
' 
. 
' 
. 
' 
' 
' 
. 
' 
. 
. 
' 
' 
' 
. 
. 
. 
_ _ _ _ _ _  _, _ _ _ _ _ _ _ _  ._ _ _ _ _ _ _ _  .. _ _ _ _ _ _ _ _  ._ _ _ _ _ _ _ _  .. _ _ _ _ _ _ _ _  , _ _ _ _  _ 
I 
' 
' 
I 
' 
I 
' 
' 
. 
' 
' 
' 
I 
I 
I 
1 
I 
I 
' 
' 
' 
' 
' 
' 
' 
_ _ _ _ _ _  _. _ _ _ _ _ _ _ _  ._ _ _ _ _ _ _ _  .. _ _ _ _ _ _ _ _  ._ _ _ _ _ _ _ _  .. _ _ _ _ _ _ _ _  , _ _ _ _ _ _ _ _  . _ _ _ _ _ _ _ _  , _ _ _ _ _ _ _  c-:
_ .-
_ __ _, 
' 
' 
. 
' 
. 
' 
' 
' 
. 
' 
' 
. 
' 
. 
' 
' 
' 
. 
I 
I 
I 
I 
I 
I 
I 
I 
I 
-180 L--'- ._--'-$-'---'-&-'--'-(-'---'* 
0 
50 
100 
150 
200 
250 
300 
350 
400 
450 
500 
Frequency (Hz) 
Figure 1.25: The power spectral density of the signal consisting of two sinusoidal 
signals at frequencies Ji 
= 4 7 Hz and f 2 
= 219 Hz 
The MATLAB script for this problem follows. 
% MATLAB script for Illustrartive Problem 1.8. 
ts=0.001; 
fs=1 /ts; 
t=[O:ts:1 O]; 
x=cos(2*pi*47*t)+cos(2*pi*219*t); 
p=spower(x); 
Hs = spectrum.welch('hann' ,1024,0); 
psd(Hs,x,, Fs, ,fs,, NFFT, '1024); 
p 
1.5 
Lowpass Equivalent of Bandpass Signals 
A bandpass signal is a signal for which all frequency components are located in the 
neighborhood of a central frequency Jo (and, of course, -Jo). In other words, for a 
bandpass signal X(j) = 0 for If± fo I > W, where W « fo. A lowpass signal is a 
signal for which the frequency components are located around the zero frequency; that 
is, for Iii > W, we have X(j) = 0. 
Corresponding to a bandpass signal x ( t) we can define the analytic signal z ( t) , 
whose Fourier transform is given as 
Z(j) = 2u-1(f)X(j) 
(l.5.1) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.5. LOWPASS EQUIVALENT OF BANDPASS SIGNALS 
35 
where U-1 (j) is the unit step function. In the time domain this relation is written as 
z(t) = x(t) + jx(t) 
(l.5.2) 
where x(t) denotes the Hilbert transform of x(t) defined as x(t) = x(t) * (l/rrt); 
in the frequency domain it is given by 
X(j) = -j sgn(j)X(j) 
(l.5.3) 
We note that the Hilbert transform function in MATLAB, denoted by hilbert.m, gener­
ates the complex sequence z(t). The real part of z(t) is the original sequence, and its 
imaginary part is the Hilbert transform of the original sequence. 
The lowpass equivalent of the signal x ( t), denoted by xi ( t), is expressed in terms 
of z(t) as 
xi(t) = z(t)e-j2rrfot 
From this relation we have 
{ x(t) = Re[xi(t)ejZrrfot] 
x(t) = lm[xi(t)ej2rrfot] 
In the frequency domain we have 
Xi(f) = Z(f +Jo)= 2U-1 (f + Jo)X(j +Jo) 
and 
Xi(f) = X(j - Jo)+ X* (-J - Jo) 
(1.5.4) 
(1.5.5) 
(1.5.6) 
(1.5.7) 
The lowpass equivalent of a real bandpass signal is, in general, a complex signal. Its 
real part, denoted by Xe ( t), is called the in-phase component of x ( t) and its imaginary 
part is called the quadrature component of x ( t) and is denoted by x 5 ( t); that is, 
xi(t) = xc(t) + jxs(t) 
In terms of the in-phase and the quadrature components we have 
{ x(t) = Xc(t) cos(2rrJot) - Xs(t) sin(2rrJot) 
X(t) = Xs(t) COS(2rrJot) + Xc(t) Sin(2rrJot) 
(1.5.8) 
(1.5.9) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

36 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
If we express xi ( t) in polar coordinates, we have 
xz(t) = V(t)eJ®(t) 
(l.5.10) 
where V ( t) and E> ( t) are called the envelope and the phase of the signal x ( t). In terms 
of these two we have 
x(t) = V(t) cos(2rrJot + E>(t)) 
The envelope and the phase can be expressed as 
or, equivalently, 
{ V(t) = x2 (t) +XI (t) 
x (t) 
e ( t) = arc tan __!___( ) 
Xe t 
{ V(t) = x2 (t) + _x2 (t) 
x(t) 
E>(t) = arctan x(t) - 2rr Jot 
(1.5 .11) 
(1.5.12) 
(l.5.13) 
It is obvious from the preceding relations that the envelope is independent of the choice 
of Jo, whereas the phase depends on this choice. 
We have written some simple MATLAB files to generate the analytic signal, the 
lowpass representation of a signal, the in-phase and quadrature components, and the 
envelope and phase. These MATLAB functions are analytic.m, loweq.m, quadcomp.m, 
and env _phas.m, respectively. A listing of these functions is given next. 
function z=analytic(x) 
% 
z=analytic(x) 
%ANALITIC 
returns the analytic signal corresponding to signal x 
% 
z=hilbert(x); 
function xl=loweq(x,ts,ID) 
% 
xl=loweq(x,tsjD) 
%LOWEQ 
returns the lowpass equivalent of the signal x 
% 
JV is the center frequency. 
% 
ts is the sampling interval. 
% 
t=[O:ts:ts*(length(x)-1 )]; 
z=hilbert(x); 
xl=z. *exp( -j*2*pi*fO*t); 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.5. LOWPASS EQUIVALENT OF BANDPASS SIGNALS 
37 
___ ,., .. ·---------------
function [xc,xs]=quadcomp(x,ts,ID) 
% 
[xc,xs]=quadcomp(x,tsJD) 
%QUADCOMP 
Returns the in-phase and quadrature components of 
% 
the signal x. JD is the center frequency. ts is the 
% 
% 
z=loweq(x,ts,ID); 
xc=real(z); 
xs=imag(z); 
sampling interval. 
___ ,,, .. ·---------------
function 
% 
[v,phi]=env_phas(x,ts,ID) 
% 
%ENVYHAS 
% 
% 
% 
{ v,phi] =env _phas( x,ts JD) 
v=env_phas(x,ts JD) 
Returns the envelope and the phase of the bandpass signal x. 
JD is the center frequency. 
ts is the sampling interval. 
if nargout == 2 
z=loweq(x,ts,ID); 
phi=angle(z); 
end 
v=abs(hilbert(x)); 
--tl!l!X-il;fulfj#l#i1;{•]:JM#@I 
Illustrative Problem 1.9 [Bandpass to Lowpass Transformation] The signal x(t) 
is given as 
x(t) = sinc(lOOt) cos(2rr x 200t) 
(1.5.14) 
1. Plot this signal and its magnitude spectrum. 
2. With Jo = 200 Hz, find the lowpass equivalent and plot its magnitude spectrum. 
Plot the in-phase and the quadrature components and the envelope of this signal. 
3. Repeat part 2 assuming Jo= lOOHz. 
Choosing the sampling interval to be ts = 0.001 s, we have a sampling frequency of 
is = lits = 1000 Hz. Choosing a desired frequency resolution of df = 0.5 Hz, we 
have the following. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

38 
0.8 
0.6 
0.4 
0.2 
0 
-0.2 
-0.4 
-0.6 
-0.8 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
1. Plots of the signal and its magnitude spectrum are given in Figure 1.26. Plots are 
generated by MATLAB. 
2. Choosing Jo 
= 200 Hz, we find the lowpass equivalent to x(t) by using the 
loweq.m function. Then using fftseq.m, we obtain its spectrum; we plot its mag­
nitude spectrum in Figure 1.27. We see that the magnitude spectrum is an even 
function in this case because we can write 
I 
I 
I 
-2 
-1.5 
-1 
-0.5 
0 
time 
I 
0.5 
x(t) 
= Re[sinc(lOOt)ejZrrxzoot] 
(1.5.15) 
I 
I 
5 
4 
3 
2 
o '-()-*+,- 
1.5 
2 
-500- 400-300-200-100 
0 
100 200 300 400 
500 
Frequency 
Figure 1.26: The signal x ( t) and its magnitude spectrum 
0.012 
I 
I 
I 
I 
I 
I 
I 
I 
I 
0.01 -
-
0.008 -
0.006 -
0.004 -
0.002 -
0 
I 
I 
I 
I 
I 
I 
I 
I 
I 
-500 
-400 
-300 
-200 
-100 
0 
100 
200 
300 
400 
500 
frequency 
Figure 1.27: The magnitude spectrum of the lowpass equivalent to x ( t) in Illustrative 
Problem 1.9 when Jo 
= 200 Hz 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

1.5. LOWPASS EQUIVALENT OF BANDPASS SIGNALS 
39 
0.8 -
0.6 -
0.4 -
0.2 -
0 
-0.2 -
-0.4 
Comparing this to 
(1.5.16) 
we conclude that 
xi(t) = sinc(lOOt) 
(1.5.17) 
which means that the lowpass equivalent signal is a real signal in this case. This, 
in turn, means that Xc(t) = xi(t) and x5(t) = 0. Also, we conclude that 
{ V(t) = lxc(OI 
{O, 
Xc(t);::O 
8(t) = 
TT, 
Xe (t) < 0 
(1.5.18) 
Plots of Xc(t) and V(t) are given in Figure 1.28. Note that choosing Jo to be 
the frequency with respect to which X(j) is symmetric results in these figures. 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
- 0.9 
0.8 
0.7 
- 0.6 
0.5 
0.4 
0.3 
- 0.2 
0.1 
,j .. 
0 
-2 
-1.5 
-1 
-0.5 
0 
0.5 
1.5 
2 
-2 
-1.5 
-1 
-0.5 
0 
0.5 
1.5 
2 
time 
time 
Figure 1.28: The in-phase component and the envelope of x(t) 
3. If Jo= 100 Hz, then the above results will not be true in general, and xi(t) will 
be a complex signal. The magnitude spectrum of the lowpass equivalent signal 
is plotted in Figure 1.29. As it is seen here, the magnitude spectrum lacks the 
symmetry present in the Fourier transform of real signals. Plots of the in-phase 
component of x(t) and its envelope are given in Figure 1.30. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

40 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
0.012 	--,-,--,-,-,--,-,-,--,- 
0.01  
0.008  
0.006  
0.004  
0.002  
o-'-'--'-'-'-'-'-'--'- 
-500 
-400 
-300 
-200 
-100 
0 
100 
200 
300 
400 
500 
frequency 
Figure 1.29: The magnitude spectrum of the lowpass equivalent to x ( t) in Illustrative 
Problem 1.9 when Jo 
= 100 Hz 
0.8 
0.6 
0.4 
0.2 
0 
-0.2 
-0.4 
-0.6 
I 
I 
I 
I 
-0.8 
-2 
-1.5 
-1 
-0.5 
0 
time 
I 
I 
I 
0.5 
1.5 
0.9 
-
0.8 
-
0.7 
-
0.6 
-
0.5 
0.4 
-
0.3 
- 0.2 
- 0.1 
2 
0 
-2 
-1.5 
-1 
-0.5 
0 
0.5 
time 
1.5 
Figure 1.30: The in-phase component and the envelope of the signal x ( t) when Jo 
lOOHz 
2 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
41 
Problems 
1.1 Consider the periodic signal of Illustrative Problem 1.1 shown in Figure 1.1. As­
suming A 
= 2, To 
= 12, and to 
= 1, determine and plot the discrete spectrum of the 
signal. Compare your results with those obtained in Illustrative Problem 1.1 and justify 
the differences. 
1.2 In Illustrative Problem 1.1, assuming A 
= 1, To = 10, and to = 2, determine and 
plot the discrete spectrum of the signal. Compare your results with those obtained in 
Illustrative Problem 1.1 and justify the differences. 
1.3 Using the m-file fseries.m, determine the Fourier series coefficients of the signal 
shown in Figure 1.1 with A 
= 1, To 
= 4, and to 
= ! for -24 ::; n ::; 24. Plot the 
magnitude spectrum of the signal. Now using Equation (1.2.5), determine the Fourier 
series coefficients and plot the magnitude spectrum. Why are the results not exactly 
the same? 
1.4 a. Using Fourier transform theorems, derive the Fourier transform of the signal 
{cos(rrt), 
x(t) = 
0, 
O::=;t::=;4 
otherwise 
b. Derive the magnitude spectrum of this signal using MATLAB and plot it. Is 
your plot symmetric (even)? Why? 
c. Now let xi(t) and X2 (t) be defined as 
{cos(2rr Jot), 
X1 (t) = 
0, 
O::=;t::=;4 
otherwise 
{cos(rrt), 
X2 (t) = 
0, 
O::=;t::=;T 
otherwise 
Note that in X1 ( t) the width of the pulse is kept constant at 4 but the frequency 
Jo can change. In x2 ( t) the width of the pulse can change but the frequency is 
kept at !. Plot IX1 (j) I for the frequencies Jo = 1, 2, 4 and IX2 (j) for the pulse 
durations T = 8, 16 and explain how changing Jo and T change the magnitude 
spectrum of the signal. 
1.5 Repeat Problem 1.3 with To = 4.6 and compare the results with those obtained by 
using Equation ( 1.2 .5). Do you observe the same discrepancy between the two results 
here? Why? 
1.6 Using the MATLAB script dis_spct.m, determine and plot the magnitude and phase 
spectra of the periodic signal x(t) with a period of To 
= 4.6 and described in the 
interval [ -2.3, 2.3] by the relation x(t) = A(t). Plot the spectra for -24 ::; n ::; 24. 
Now, analytically determine the Fourier series coefficients of the signal and show that 
all coefficients are nonnegative real numbers. Does the phase spectrum you plotted 
earlier agree with this result? If not, explain why. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

42 
CHAPTER 1. SIGNALS AND LINEAR SYSTEMS 
1.7 In Problem 1.6, define x(t) 
= A(t) in the interval [-1.3, 3.3]; the period is still 
To 
= 4.6. Determine and plot the magnitude and phase spectra using the MATLAB 
script dis_spct.m. Note that the signal is the same as the signal in Problem 1.6. Com­
pare the magnitude and the phase spectra with that obtained in Problem 1.6. Which 
one shows a more noticeable difference, the magnitude or the phase spectrum? Why? 
1.8 Repeat Illustrative Problem 1.2 with [a, b] = [ -4, 4] and x(t) 
= cos(rrt/8) for 
ltl:.:; 4. 
1.9 Repeat Illustrative Problem 1.2 with [a, b] 
= [ -4, 4] and x(t) 
= sin(rrt/8) for 
It I :.:; 4 and compare your results with those of Problem 1.8. 
1.10 Numerically determine and plot the magnitude and the phase spectra of a signal 
x(t) with a period equal to 10-5 and defined as 
{-106t + 0.5, 
x(t) 
= 
0, 
0:.:; t:.:; 5 x 10-7 
otherwise 
in the interval ltl:.:; 5 x 10-7 • 
1.11 A periodic signal x ( t) with period To 
= 6 is defined by x ( t) 
= II ( t / 3) for 
I t I :.:; 3. This signal passes through an LTI system with an impulse response given by 
h(t) 
= 
' 
{e-t/2 
0 :.:; t :.:; 4 
0, 
otherwise 
Numerically determine and plot the discrete spectrum of the output signal. 
1.12 Repeat Problem 1.11 with x(t) 
= e-3t for It I :.:; 3 and 
h(t) 
= {1, 
O:.:; t:.:; 4 
0, 
otherwise 
1.13 Verify the convolution theorem of the Fourier transform for signals x ( t) 
= II ( t) 
and y(t) 
= A(t) numerically, once by determining the convolution directly and once 
by using the Fourier transforms of the two signals. 
1.14 Plot the magnitude and the phase spectra of a signal given by 
1, 
-2:.:; t:.:; -1 
x(t) 
= 
ltl, 
ltl < 1 
1, 
1:.:; t < 2 
0, 
otherwise 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
43 
1.15 Determine and plot the magnitude spectrum of an even signal x(t) that for posi­
tive values of t is given as 
t + 1, 
0 ::s; t ::s; 1 
x(t) = 
2, 
1 ::s; t ::s; 2 
-t + 4, 
2 ::s; t ::s; 4 
0, 
otherwise 
Determine your result both analytically and numerically and compare the results. 
1.16 The signal described in Problem 1.15 is passed through an LTI system with an 
impulse response given by 
{l, O::s:t::s:2 
h(t)= 
-1, 
2<t::s:3 
0, 
otherwise 
Determine the magnitude and the phase spectra of the output signal. 
1.17 The signal {cos(2rr x 47t) + cos(2rr x 219t), 
x(t) = 
0, 
0 ::s; t ::s; 10 
otherwise 
is considered. As in Illustrative Problem 1.8, assume this signal is sampled at a rate 
of 1000 samples/second. Using the MATLAB m-file butter.m, design a lowpass But­
terworth filter of order 4 with a cutoff frequency of 100 Hz and pass x ( t) through this 
filter. Determine and sketch the output power spectrum and compare it with Figure 
1.25. Now design a Butterworth filter of order 8 with the same cutoff frequency, and 
determine the output of this filter and plot its power spectrum. Compare your results in 
these two cases. 
1.18 Repeat Problem 1.17, but this time design highpass Butterworth filters with the 
same orders and the same cutoff frequencies. Plot your results and make the compar­
isons. 
1.19 Consider the signal {cos(2rr x 47t) + cos(2rr x 219t), 
x(t) = 
0, 
0 ::s; t ::s; 10 
otherwise 
a. Determine the analytic signal corresponding to this signal. 
b. Determine and plot the Hilbert transform of this signal. 
c. Determine and plot the envelope of this signal. 
d. Once assuming Jo = 47 and once assuming Jo = 219, determine the lowpass 
equivalent and the in-phase and the quadrature components of this signal. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

Copyright 2011 Cengage Learning. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

Chapter 2 
Random Processes 
2.1 
Preview 
In this chapter we illustrate methods for generating random variables and samples of 
random processes. We begin with the description of a method for generating random 
variables with a specified probability distribution function. Then we consider Gaussian 
and Gauss-Markov processes and illustrate a method for generating samples of such 
processes. The third topic that we consider is the characterization of a stationary ran­
dom process by its autocorrelation in the time domain and by its power spectrum in 
the frequency domain. Because linear filters play a very important role in communi­
cation systems, we also consider the autocorrelation function and the power spectrum 
of a linearly filtered random process. The final section of this chapter deals with the 
characteristics of lowpass and bandpass random processes. 
2.2 
Generation of Random Variables 
Random number generators are often used in practice to simulate the effect of noise­
like signals and other random phenomena that are encountered in the physical world. 
Such noise is present in electronic devices and systems and usually limits our ability to 
communicate over large distances and to detect relatively weak signals. By generating 
such noise on a computer, we are able to study its effects through simulation of com­
munication systems and to assess the performance of such systems in the presence of 
noise. 
Most computer software libraries include a uniform random number generator. 
Such a random number generator generates a number between 0 and 1 with equal 
probability. We call the output of the random number generator a random variable. If 
A denotes such a random variable, its range is the interval 0 :o: A :o: 1. 
We know that the numerical output of a digital computer has limited precision, and 
as a consequence it is impossible to represent the continuum of numbers in the interval 
0 :o: A :o: 1. However, we may assume that our computer represents each output by 
45 
Copyright 2011 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not material1y affect the overall learning experience. Cengage Leaming reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

46 
f (A) 
1 t----. 
0 
I 
I 
2 
1 
(a) 
CHAPTER 2. RANDOM PROCESSES 
F(A) 
- A 
0 
1 
(b) 
Figure 2.1: Probability density function f (A) and the probability distribution function 
F (A) of a uniformly distributed random variable A 
a large number of bits in either fixed point or floating point. Consequently, for all 
practical purposes, the number of outputs in the interval 0 ::; A ::; 1 is sufficiently large 
so that we are justified in assuming that any value in the interval is a possible output 
from the generator. 
The uniform probability density function for the random variable A, denoted as 
j(A), is illustrated in Figure 2.l(a). We note that the average value or mean value of 
A, denoted as mA, is mA = ! . The integral of the probability density function, which 
represents the area under f (A), is called the probability distribution function of the 
random variable A and is defined as 
F(A) = f :00 
f (x) dx 
(2.2.1) 
For any random variable, this area must always be unity, which is the maximum value 
that can be achieved by a distribution function. Hence, for the uniform random variable 
A we have 
F(l) = f 00 
j(x) dx = 1 
(2.2.2) 
and the range of F(A) is 0 ::; F(A) ::; 1 for 0 ::; A ::; 1. The probability distribution 
function is shown in Figure 2.l(b). 
If we wish to generate uniformly distributed noise in an interval ( b, b + 1) , it can 
be accomplished simply by using the output A of the random number generator and 
shifting it by an amount b. Thus a new random variable B can be defined as 
B=A+b 
(2.2.3) 
which now has a mean value mB = b + ! . For example, if b 
- ! , the random 
variable B is uniformly distributed in the interval (- ! , ! ), as shown in Figure 2.2(a). 
Its probability distribution function F(B) is shown in Figure 2.2(b). 
A uniformly distributed random variable in the range (0 ,1) can be used to generate 
random variables with other probability distribution functions. For example, suppose 
that we wish to generate a random variable C with probability distribution function 
F(C), as illustrated in Figure 2.3. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

2.2. GENERATION OF RANDOM VARIABLES 
47 
f(B) 
F(B) 
1 
A-L-B-+-C-'---iB 
I 
Q 
I 
;-"->-+-?-'---iB 
I 
Q 
I 
2 
2 
(a) 
2 
2 
(b) 
Figure 2.2: Probability density function and the probability distribution function of a 
zero-mean uniformly distributed random variable 
F(C) 
c 
0 
F(C) =A 
C=P-1(A) 
Figure 2.3: Inverse mapping from the uniformly distributed random variable A to the 
new random variable C 
Because the range of F(C) is the interval (0,1), we begin by generating a uniformly 
distributed random variable A in the range (0,1). If we set 
F(C) =A 
(2.2.4) 
then 
C = F-1(A) 
(2.2.5) 
Thus we solve (2.2.4) for C, and the solution in (2.2.5) provides the value of C for 
which F(C) = A. By this means we obtain a new random variable C with proba­
bility distribution function F ( C) . This inverse mapping from A to C is illustrated in 
Figure 2.3. 
--li!MIJ§ll;hiltjij;t•1:J!§®I 
Illustrative Problem 2.1 Generate a random variable C that has the linear probability 
density function shown in Figure 2.4(a); that is, 
f(C) = 
2 
' { 1c 
0, 
OC2 
otherwise 
Copyright 2011 Cengage Learning, All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s) . 
.Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

48 
CHAPTER 2. RANDOM PROCESSES 
f (C) 
F(C) 
0 
2 
0 
2 
(a) 
(b) 
Figure 2.4: Linear probability density function and the corresponding probability dis­
tribution function 
This random variable has a probability distribution function 
{O, 
F(C) = C2, 
1, 
C<O 
O::;C::;2 
C>2 
which is illustrated in Figure 2.4(b). We generate a uniformly distributed random vari­
able A and set F(C) =A. Hence 
Upon solving for C, we obtain 
1 2 
F(C) = -C =A 
4 
c = 2.JA. 
(2.2.6) 
(2.2.7) 
Thus we generate a random variable C with probability distribution function F(C), as 
shown in Figure 2.4(b). 
In Illustrative Problem 2.1 the inverse mapping C = p-l (A) was simple. In some 
cases it is not. This problem arises in trying to generate random numbers that have a 
normal distribution function. 
Noise encountered in physical systems is often characterized by the normal, or 
Gaussian, probability distribution, which is illustrated in Figure 2.5. The probability 
density function is given by 
f(c) = 
1 
-c212u2 
.JTiT u e 
' 
-00 < c < 00 
(2.2.8) 
where u2 is the variance of C, which is a measure of the spread of the probability 
density function f ( C). The probability distribution function F ( C) is the area under 
f ( C) over the range ( - oo, C). Thus 
F(C) = f 00 J (x) dx 
(2.2.9) 
Unfortunately, the integral in (2.2.9) cannot be expressed in terms of simple func­
tions. Consequently, the inverse mapping is difficult to achieve. A way has been found 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

2.2. GENERATION OF RANDOM VARIABLES 
49 
to circumvent this problem. From probability theory it is known that a Rayleigh dis­
tributed random variable R, with probability distribution function 
R < 0 
R;::O 
(2.2.10) 
is related to a pair of Gaussian random variables C and D through the transformation 
c = Rcose 
D = Rsin8 
(2.2.11) 
(2.2.12) 
where 8 is a uniformly distributed variable in the interval (0, 2rr). The parameter a2 
is the variance of C and D. Because (2.2.10) is easily inverted, we have 
and hence 
R = 2a21n(1 A) 
(2.2.13) 
(2.2.14) 
where A is a uniformly distributed random variable in the interval (0,1). Now, if we 
generate a second uniformly distributed random variable B and define 
8 
= 2rrB 
(2.2.15) 
then from (2.2.11) and (2.2.12) we obtain two statistically independent Gaussian dis­
tributed random variables C and D. 
The method described above is often used in practice to generate Gaussian dis­
tributed random variables. As shown in Figure 2.5, these random variables have a 
mean value of zero and a variance a2• If a non-zero-mean Gaussian random variable 
is desired, then C and D can be translated by the addition of the mean value. 
The MATLAB script that implements the preceding method for generating Gaus­
sian distributed random variables is given next. 
f(C) 
0 
(a) 
F(C) 
0 
(b) 
Figure 2.5: Gaussian probability density function and the corresponding probability 
distribution function 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

50 
CHAPTER 2. RANDOM PROCESSES 
-4111i" ----------------
function [gsrvl ,gsrv2]=gngauss(m,sgma) 
% 
[gsrvl,gsrv2]=gngauss(m,sgma) 
% 
[gsrvl,gsrv2]=gngauss(sgma) 
% 
[gsrvl,gsrv2]=gngauss 
% 
GNGAUSS 
generates two independent Gaussian random variables with mean 
% 
m and standard deviation sgma. If one of the input arguments is missing, 
% 
it takes the mean as 0. 
% 
% 
If neither the mean nor the variance is given, it generates two standard 
Gaussian random variables. 
if nargin == 0, 
m=O; sgma=1; 
elseif nargin == 1 , 
sgma=m; m=O; 
end; 
u=rand; 
z=sgma*(sqrt(2*log(1/(1-u)))); 
u=rand; 
gsrvl=m+z*cos(2*pi*u); 
gsrv2=m+z*sin(2*pi*u); 
% a uniform random variable in (0,1) 
% a Rayleigh distributed random variable 
% another uniform random variable in (0,1) 
2.2.1 
Estimation of the Mean of a Random Variable 
Suppose we have N statistically independent observations X1, x2, ... , Xn of a random 
variable X. We wish to estimate the mean value of X from the N observations. The 
estimate of the mean value is 
1 
N 
m =
N I xk 
k=l 
(2.2.16) 
Because mis a sum of random variables, it is also a random variable. We note that the 
expected value of the estimate m is 
1 
N 
1 
E [m] 
= 
N L E [xk] 
= 
N 
· mN 
= m 
k=l 
(2.2.17) 
where mis the actual mean of X. Thus, the estimate mis said to be unbiased. 
The variance of the the estimate m is a measure of the spread or dispersion of m 
relative to its mean value. The variance of m is defined as 
But theE[m2] is 
E [ ( m -m) 2 J = E [ m 2 J - 2£ [ m J m + m 2 
= E [m2] -m2 
l 
N 
N 
N 2 L L E [XkXn] 
k=l n=l 
a2 
-+m2 
N 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

2.2. GENERATION OF RANDOM VARIABLES 
51 
where cr2 is the actual variance of X. Therefore, the variance of m is 
(2.2.18) 
Note that as N -
oo, the variance of the estimate tends to zero. 
Illustrative Problem 2.2 [Estimation of the Mean of a Random Variable] Generate 
10 samples of a random variable X that is uniformly distributed in the interval [0, 2]. 
Compute the estimate m of the mean value and its variance and compare the result 
with the true mean value of X. Repeat this experiment 10 times and compute and plot 
the estimates m1, mz, ... , ih10. Also compute the mean value of the estimates; that is, 
 
1 
10 
 
m 
= 10 L mn 
n=l 
and compare the result with the true mean value of X. 
Figure 2.6 illustrates the 100 estimates of the mean values of X. Note that the estimates 
cluster around the true mean value E(X) 
= 1. Also shown in the figure is the mean 
value m of the 100 estimates. This is the value we would have obtained if we had 
simply averaged the 100 observations of X. 
The MATLAB script for the problem is given next page. 
2 
1.8 
1.6 
1.4 
1.2 
0.8 
0.6 
0.4 
0.2 
I) 
-
-
0
0 
-
I 
( 
( 
-
-
2 
-
I 
() 
-
-
( 
4 
-
I 
I 
-
lT -
-
0 
6 
8 
( 
>-
I 
-
-
-
-
-
-
( -
-
-
-
10 
Figure 2.6: The estimated means in Illustrative Problem 2.2 are denoted by small cir­
cles. The horizontal dashed line represents the value of m and the horizontal solid line 
is the expected value of the uniform random variable. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

52 
CHAPTER 2. RANDOM PROCESSES 
-4111i" ---------------
% Matlab script for illustrative problem 2.2 
% lower and upper bounds of the Uniform random variable X: 
a= O; 
b = 2; 
% True values of the mean and variance of X: 
m = (b-a) I 2; 
v = (b-a)"2 I 12; 
N = 10; 
m_h = zeros(1,N); 
% Number of observations 
% Preallocation for speed 
% Estimation of the mean and variance: 
for i = 1 : 10 
end 
X = b * rand(N,1); 
m_h(i) = sum (X) I N; 
v_h = v IN; 
% Mean value of the estimates: 
m_h_mean = sum (m_h,2) I N; 
% Demonstrate the results: 
disp([ 'Mean value of the estimates is: ',num2str(m_h_mean)J) 
disp([' True mean value of X is: ',num2str(m)J) 
stem(m_h) 
hold 
M = m*ones(1,length(m_h)+2); 
plot(0:11,M) 
M_h = m_h_mean*ones(1,length(m_h)+2); 
plot(0:11,M_h, ' --') 
axis([O 10.5 0 2]) 
2.3 
Gaussian and Gauss-Markov Processes 
Gaussian processes play an important role in communication systems. The fundamen­
tal reason for their importance is that thermal noise in electronic devices, which is 
produced by random movement of electrons due to thermal agitation, can be closely 
modeled by a Gaussian process. The reason for the Gaussian behavior of thermal noise 
is that the current introduced by movement of electrons in an electric circuit can be 
regarded as the sum of small currents of a very large number of sources, namely, in­
dividual electrons. It can be assumed that at least a majority of these sources behave 
independently and, therefore, the total current is the sum of a large number of inde­
pendent and identically distributed (i.i.d.) random variables. When the central limit 
theorem is applied, this total current has a Gaussian distribution. 
Apart from thermal noise, Gaussian processes provide rather good models for some 
information sources as well. Some interesting properties of the Gaussian processes, 
which are given below, make these processes mathematically tractable and easy to deal 
with. We begin with a formal definition of a Gaussian process. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

2.3. GAUSSIAN AND GAUSS-MARKOV PROCESSES 
53 
Definition: A random process X ( t) is a Gaussian process if for all n and all (ti, t2, ... , 
tn), the random variables {X (ti)} f=1 have a jointly Gaussian density function, which 
may be expressed as 
f 
1 
[ 1 
t -1 
] 
(x) 
= (2rr)n/2 [det(C) p12 exp 
- 2 (x - m) C 
(x - m) 
(2.3.1) 
where the vector x = (x1, X2, ... , Xn) t denotes the n random variables xi = X ( td, 
mis the mean value vector (that is, m = E(X)) and C is then x n covariance matrix 
of the random variables (x1, X2, ... , Xn) with elements 
(2.3.2) 
The superscript t denotes the transpose of a vector or a matrix and c-1 is the inverse 
of the covariance matrix C. 
From the above definition it is seen, in particular, that at any time instant to the 
random variable X(to) is Gaussian, and at any two points t1, t2 the random variables 
(X ( t1), X ( t2)) are distributed according to a two-dimensional Gaussian random vari­
able. Moreover, because a complete statistical description of {X(ti)}*1 depends on 
only the mean vector m and the covariance matrix C, we have the following property. 
Property 1: For Gaussian processes, knowledge of the mean m and covariance C 
provides a complete statistical description of the process. 
Another very important property of a Gaussian process is concerned with its char­
acteristics when passed through a linear time-invariant system. This property may be 
stated as follows. 
Property 2: If the Gaussian process X(t) is passed through a linear time-invariant 
(LTI) system, the output of the system is also a Gaussian process. The effect of the 
system on X(t) is simply reflected by a change in the mean value and the covariance 
of X(t). 
---tl!!lii;MitJj;t•]:J!§@I 
Illustrative Problem 2.3 [Generation of Samples of a Multivariate Gaussian Pro­
cess] Generate samples of a multivariate Gaussian random process X ( t) having a spec­
ified mean value mx and a covariance Cx. 
First, we generate a sequence of n statistically independent, zero-mean and unit-variance 
Gaussian random variables by using the method described in Section 2.2. Let us denote 
this sequence of n samples by the vector Y = (y1, Y2, ... , Yn)t. Second, we factor the 
desired n x n covariance matrix Cx as 
Cx = c;12(c;12)t 
Then we define the linearly transformed ( n x 1) vector X as 
x = c;12Y + mx 
(2.3.3) 
(2.3.4) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

54 
CHAPTER 2. RANDOM PROCESSES 
Thus the covariance of X is 
Cx = E[(X- mx)(X- mx)t] 
= E[c;izyyt (c;12)tJ 
= c;12E(YYt)(c;1z)t 
= c;1z(c;1z)t 
(2.3.5) 
The most difficult step in this process is the factorization of the covariance matrix Cx. 
Let us demonstrate this procedure by means of an example that employs the bivariate 
Gaussian distribution. Suppose we begin with a pair of statistically independent Gaus­
sian random variables Y1 and Yz, which have zero mean and unit variance. We wish to 
transform these into a pair of Gaussian random variables x1 and x2 with mean m = 0 
and covariance matrix 
(2.3.6) 
where crf and er} are the variances of x1 and xz, respectively, and pis the normalized 
covariance, defined as 
E[(X1 - m1)(Xz - mz)] 
p = ------
CT1 CTz 
The covariance matrix C can be factored as 
where 
Therefore, 
Cl/2 
= _l_ [.J3 
+ 1 
2J2 .J3 - 1 
x  [ ::] 
 c''' ['.] 
.J3 -l] 
.J3 
+ 1 
1 [J3 
+ 1 
= 2J2 
v'3-l .J3 -l] [Yi] 
.J3 
+ 1 
Yz 
1 [ ( .J3 
+ 1) Y1 + ( .J3 - 1) Yz] 
= 2J2 ( .J3 -l)y1 + ( .J3 
+ l)yz 
The MATLAB scripts for this computation are given next. 
(2.3.7) 
(2.3.8) 
(2.3.9) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

2.3. GAUSSIAN AND GAUSS-MARKOV PROCESSES 
55 
--41ili" ---------------
% MATLAB script for Illustrative Problem 2.3. 
echo on 
mx=[O 0]'; 
Cx=[1 1/2;1/2 1]; 
x=multLgp(mx,Cx); 
% Computation of the pdf of (xl,x2) follows. 
delta=0.3; 
xl=-3:delta:3; 
x2=-3:delta:3; 
for i=1 :length(xl), 
for j=1 :length(x2), 
f(i,j)=(1/((2*pi)*det(Cx)4 1/2))*exp((-1/2)*(([xl(i) x2(.i))-mx' ) *inv ( Cx) * ( [ xl ( i) ; x2(.i)]-mx))); 
echo off ; 
end; 
end; 
echo on 
% Plotting command for pdf follows. 
mesh(xl,x2,f); 
--41ili" ----------------
function [x) = multLgp(m,C) 
% 
[x}=multi_gp(m,C) 
% 
MULTLGP 
generates a multivariate Gaussian random 
% 
process with mean vector m (column vector) and covariance matrix C. 
N=length(m); 
for i=1 :N, 
y(i)=gngauss; 
end; 
y=y.'; 
x=sqrtm(C)*y+m; 
Figure 2 .7 illustrates the joint pdf f (x1, x2) for the covariance matrix C given by 
(2.3.6). 
As indicated, the most difficult step in the computation is determining C112. Given 
the desired covariance matrix, we may determine the eigenvalues {.\k. l ::; k::; n} and 
the corresponding eigenvectors { Vk, 1 ::; k ::; n}. Then the covariance matrix C can be 
expressed as 
n 
C = L .\kvkvk 
k=l 
and because C = C112 (C112 )t, it follows that 
n 
c112 = L ?i.<12vk vt 
k=l 
(2.3.10) 
(2.3.11) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

56 
0.5 
0.4 
0.3 
0.2 
0.1 
0 
4 
CHAPTER 2. RANDOM PROCESSES 
3 
Figure 2.7: Joint probability density function of x1 and x2 
Definition: A Markov process X(t) is a random process whose past has no influence 
on the future if its present is specified; that is, if tn > tn-1, then 
P [X(tn)::; Xn I X(t), 
t::; tn-iJ 
= P [X(tn)::; Xn I X(tn-1)] 
From this definition, it follows that if t1 < tz < 
· 
· 
· < tn, then 
(2.3 .12) 
P [X(tn).::; Xn I X(tn-1),X(tn-2), ... ,X(ti)J 
= P [X(tn).::; Xn I X(tn-1)] 
(2.3.13) 
Definition: A Gauss-Markov process X ( t) is a Markov process whose probability 
density function is Gaussian. 
The simplest method for generating a Markov process is by means of the simple 
recursive formula 
Xn = PXn-1 + Wn 
(2.3.14) 
where Wn is a sequence of zero-mean i.i.d. (white) random variables and pis a param­
eter that determines the degree of correlation between Xn and Xn-1; that is, 
(2.3 .15) 
If the sequence { Wn} is Gaussian, then the resulting process X ( t) is a Gauss-Markov 
process. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

2.3. GAUSSIAN AND GAUSS-MARKOV PROCESSES 
57 
Illustrative Problem 2.4 [Gauss-Markov Process] Generate a sequence of 1000 
(equally spaced) samples of a Gauss-Markov process from the recursive relation 
Xn = 0.95Xn-l + Wn, 
n = 1, 2, ... , 1000 
(2.3.16) 
where Xo 
= 0 and { Wn} is a sequence of zero-mean and unit-variance i.i.d. Gaussian 
random variables. Plot the sequence {Xn. 
1 :::; n:::; 1000} as a function of the time 
index n and the estimate of the autocorrelation 
N-m 
	 
1 
""' 
Rx(m) = 
N 
L XnXn+m, 
-m n=l 
where N = 1000. 
m = 0,1, ... ,50 
(2.3.17) 
The MATLAB scripts for this computation are given next. 
Figures 2.8 and 2.9 
illustrate the sequence (Xn) and the estimate of the autocorrelation function Rx ( m), 
respectively. 
8 
I 
6 -
-
4 -
-
2 -
 
0 
-2 
-4 -
-6 -
-
-8 -
-10 
0 
100 
200 
300 
400 
500 
600 
700 
800 
900 1000 
n 
Figure 2.8: The Gauss-Markov sequence 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

58 
CHAPTER 2. RANDOM PROCESSES 
l.O 
0.9 
0.8 
0.7 
0.6 
0.5 
A 
0.4 
Rx(m) 
0.3 
0.2 
0.1 
0 
0 
5 
10 
15 
20 
25 
30 
35 
40 
45 
50 
m 
Figure 2.9: The autocorrelation function of the Gauss-Markov process 
-tl®li" ----------------
% MATLAB script for Illustrative Problem 2.4. 
rho=0.95; 
XO=O; 
N=1000; 
X=gaus_mar(XO,rho,N); 
M=50; 
Rx=Rx_est(X,M); 
% Plotting commands follow. 
-tl®li" ----------------
function [X]=gaus_mar(XO,rho,N) 
% [X]=gausJnar(XO,rho,N) 
% 
GAUSJJAR 
generates a Gauss-Markov process of length N. 
% 
The noise process is taken to be white Gaussian 
% 
noise with zero mean and unit variance. 
for i=1 :2:N, 
[Ws(i) Ws(i+ 1 )]=gngauss; 
% Generate the noise process. 
end; 
X(1 )=rho*XO+ W s(1); 
for i=2:N, 
X(i)=rho*X(i-1 )+Ws(i); 
end; 
% first element in the Gauss-Markov process 
% the remaining elements 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

2.4. POWER SPECTRUM OF RANDOM PROCESSES 
2.4 
Power Spectrum of Random Processes and 
White Processes 
59 
A stationary random process X ( t) is characterized in the frequency domain by its 
power spectrum Sx (j), which is the Fourier transform of the autocorrelation func­
tion Rx ( T) of the random process; that is, 
(2.4.1) 
Conversely, the autocorrelation function Rx ( T) of a stationary random process 
X(t) is obtained from the power spectrum Sx(f) by means of the inverse Fourier 
transform; that is, 
(2.4.2) 
In modeling thermal noise that is generated in electronic devices used in the im­
plementation of communication systems, we often assume that such noise is a white 
random process. Such a process is defined as follows. 
Definition: A random process X ( t) is called a white process if it has a flat power 
spectrum-that is, if Sx(f) is a constant for all f. 
As indicated above, the importance of white processes stems from the fact that 
thermal noise can be closely modeled as spectrally constant over a wide range of fre­
quencies. Also, a number of processes that are used to describe a variety of information 
sources are modeled as the output of LTI systems driven by a white process. 
We observe, however, that if Sx (j) = C for all f, then 
(2.4.3) 
so that the total power is infinite. Obviously, no real physical process can have infi­
nite power and, therefore, a white process may not be a meaningful physical process. 
However, quantum mechanical analysis of the thermal noise shows that it has a power­
spectral density given by 
hf 
Sn(f) 
= 2(ehf/kT - 1) 
(2.4.4) 
in which h denotes Planck's constant (equal to 6.6x10-34 J x s) and k is Boltzmann's 
constant (equal to 1.38x10-23 J/K). T denotes the temperature in kelvins. This power 
spectrum is shown in Figure 2.10. 
This spectrum achieves its maximum at f = 0, and the value of this maximum is 
kT /2. The spectrum goes to 0 as f goes to infinity, but the rate of convergence to 0 
is very low. For instance, at room temperature (T = 300 K), Sn (j) drops to 90% of 
its maximum at about f ::: 2 x 1012 Hz, which is beyond the frequencies employed in 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

60 
CHAPTER 2. RANDOM PROCESSES 
x 10-21 
2 
1.8 
1.6 
1.4 
1.2 
1 
0.8 
0.6 
0.4 
0.2 
0 
0 
0.5 
1 
1.5 
2 
f 
Figure 2.10: Plot of Sn(f) in (2.4.4) 
2.5 
3 
x 1012 
conventional communication systems. From this we conclude that thermal noise, al­
though not precisely white, can be modeled for all practical purposes as a white process 
with the power spectrum equaling kT /2. The value kT is usually denoted by No; there­
fore, the power-spectral density of thermal noise is usually given as Sn (j) = No I 2 and 
is sometimes referred to as the two-sided power-spectral density, emphasizing that this 
spectrum extends to both positive and negative frequencies. We will avoid this termi­
nology throughout and simply use power spectrum or power-spectral density. 
For a white random process X ( t) with power spectrum Sx (j) = No I 2, the auto­
correlation function Rx ( T) is 
Rx(T) = J oo Sx(f)ej2rrfT df = No J oo ej2rrfT df = No 8(T) 
-00 
2 
-00 
2 
(2.4.5) 
where 8(T) is the unit impulse. Consequently, for all T * 0, we have Rx(T) = O; that 
is, if we sample a white process at two points t1 and tz (ti * tz), the resulting ran­
dom variables will be uncorrelated. If, in addition to being white, the random process 
is Gaussian, the sampled random variables will be statistically independent Gaussian 
random variables. 
--11MMIJ§ll;fuUNiM;l•1:'9§@• 
Illustrative Problem 2.5 [Autocorrelation and Power Spectrum] 
Generate 
a 
discrete-time sequence of N = 1000 i.i.d. uniformly distributed random numbers in the 
interval ( -! , ! ) and compute the estimate of the autocorrelation of the sequence {Xn}, 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

2.4. POWER SPECTRUM OF RANDOM PROCESSES 
N-m 
 
1 
""' 
Rx(m) = 
N 
L XnXn+m, 
-m n=l 
1 
N 
N _ !ml 
L XnXn+m. 
n=lml 
m = 0,1, . . .  ,M 
m = -1,-2, . . .  ,-M 
61 
(2.4.6) 
Also, compute the power spectrum of the sequence {Xn} by evaluating the discrete 
Fourier transform (DFf) of Rx ( m). The DF T, which is efficiently computed by use of 
the FFf algorithm, is defined as 
M 
Sx(f) = 
L 
Rx(m)e-j2rrfm/(2M+I) 
(2.4.7) 
m=-M 
The MATLAB script that implements the generation of the sequence {Xn}, the com­
putation of the autocorrelation, and the computation of the power spectrum Sx (j) is 
given next. We should note that the estimates of the autocorrelation function and the 
power spectrum exhibit a significant variability. Therefore, it is necessary to average 
the sample autocorrelation over several realizations. Figures 2.11 and 2.12 illustrate 
Rx (m) and Sx (j) obtained by running this program using the average autocorrela­
tion over ten realizations of the random process. 
0.09 ---------- 
0.08 
0.07 
0.06 
0.05 
0.04 
0.03 
0.02 
0.01 
0 
-0.01
0 
5 
10 
15 
20 
25 
30 
35 
40 
45 
50 
m 
Figure 2.11: The autocorrelation function in Illustrative Problem 2.5 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

62 
CHAPTER 2. RANDOM PROCESSES 
0.14 
0.12 
0.1 
0.08 
0.06 
0.04 
0.02 
i.s 
-0.4 
-0.3 
-0.2 
-0.l 
0 
f 
0.1 
0.2 
0.3 
0.4 
0.5 
Figure 2.12: The power spectrum in Illustrative Problem 2.5 
---tl®§ii! ----------------
% MATLAB script for Illustrative Problem 2 .5. 
echo on 
N=1000; 
M=50; 
Rx_av=zeros(1,M+ 1 ); 
Sx_av=zeros(1,M+ 1); 
for j=1:10, 
% Take the ensemble average over ten realizations 
end; 
X=rand(1,N)-1/2; 
% N i.i.d. uniformly distributed random variables 
% between -112 and 112. 
Rx=Rx_est(X,M); 
% autocorrelation of the realization 
Sx=fftshift(abs(fft(Rx))); 
% power spectrum of the realization 
Rx_av=Rx_av+Rx; 
Sx_av=Sx_av+Sx; 
echo off ; 
% sum of the autocorrelations 
% sum of the spectrums 
echo on ; 
Rx_av=Rx_av/1 O; 
Sx_av=Sx_av/1 O; 
% ensemble average autocorrelation 
% ensemble average spectrum 
A bandlimited random process X ( t) has the power spectrum 
{No 
Sx<f) 
= 
2' 
0, 
lfl 0B 
Iii >B 
(2.4.8) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

2.4. POWER SPECTRUM OF RANDOM PROCESSES 
63 
0.8 
0.6 
0.4 
0.2 
0 
-0.2 
-0.4 
-5 
-4 
-3 
-2 
-1 
0 
1 
2 
3 
4 
5 
t 
Figure 2.13: Plot of autocorrelation function Rx(T) given by (2.4.9) for B = No 
= 1 
Let us determine its autocorrelation function. From (2.4.1) we have 
Rx(T) 
= JB No ejZrrfT df 
-B 2 
= 11.roB ( sin2rrBT) 
1v, 
2TTBT 
(2.4.9) 
Figure 2 .13 illustrates Rx ( T) , with Rx ( 0) normalized to unity. 
MATLAB may be used to compute Rx(T) from Sx(f) and vice versa. The fast 
Fourier transform (FFT) algorithm may be used for this computation. 
Illustrative Problem 2.6 [Autocorrelation and Power Spectrum] Compute the au­
tocorrelation Rx (T) for the random process whose power spectrum is given by (2.4.8). 
To perform the computation, we represent Sx (j) by N samples in the frequency range 
If I :-:; B, with each sample normalized to unity. The result of computing the inverse 
FFT with N 
= 32 is illustrated in Figure 2.14. Note that we obtain only a coarse 
representation of the autocorrelation function Rx ( T) because we sampled Sx (j) only 
in the frequency range !fl :-:; B. The frequency separation in this example is tlf 
= 
2B IN. If we keep tlf fixed and increase the number of samples by including samples 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

64 
0.9 
0.8 
0.7 
0.6 
0.5 
0.4 
0.3 
0.2 
0.1 
5 
10 
15 
CHAPTER 2. RANDOM PROCESSES 
20 
25 
30 
35 
n 
Figure 2.14: Inverse FFf of the power spectrum of the bandlimited random process in 
Illustrative Problem 2.6 with 32 samples 
0.14 
0.12 
0.1 
0.08 
0.06 
0.04 
0.02 
0 
-0.02 
-0.04 
0 
50 
100 
150 
200 
250 
300 
Figure 2.15: Inverse FFf of the power spectrum of the bandlimited random process in 
Illustrative Problem 2.6 with 256 samples 
for Iii > B, we obtain intermediate values of Rx(T). Figure 2.15 illustrates the result 
of computing the inverse FFf with N1 
= 256 samples, of which N = 32 are unity. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

2.5. LINEAR FILTERING OF RANDOM PROCESSES 
65 
2.5 
Linear Filtering of Random Processes 
Suppose that a stationary random process X ( t) is passed through a linear time-invariant 
filter that is characterized in the time domain by its impulse response h(t) and in the 
frequency domain by its frequency response 
H(j) = f :oo h(t)e
-j2 rrft dt 
(2.5.1) 
It follows that the output of the linear filter is the random process 
Y(t) = f :oo X(t)h(t - T) dT 
(2.5.2) 
The mean value of Y ( t) is 
my= E[Y(t)] 
= J:00 E[X(T)]h(t - T)] dT 
= mx f :00 h(t - T) dT 
= mx f :00 h(T) dT 
= mxH(O) 
(2.5 .3) 
where H(O) is the frequency response H(j) of the filter evaluated at f 
= 0. 
The autocorrelation function of Y ( t) is 
Ry(T) = E[Y(t)Y(t + T)] 
= J:00 J:00 E[X(/3)X(cx)]h(t- /3)h(t + T- cx)d/3dcx 
= f :00 f :00 Rx(/3 - <X)h(t - /3)h(t + T - <X) dT d<X 
(2.5.4) 
In the frequency domain, the power spectrum of the output process Y ( t) is related to 
the power spectrum of the input process X ( t) and the frequency response of the linear 
filter by the expression 
Sy(f) = Sx(f)IH(f)l2 
(2.5.5) 
This is easily shown by taking the Fourier transform of (2.5.4). 
--tiMlJ§ll;ful1•i;'•'=''§®• 
Illustrative Problem 2.7 [Filtered Noise] Suppose that a white random process X(t) 
with power spectrum Sx (j) 
= 1 for all f excites a linear filter with impulse response 
{ - t 
h(t) = 
e 
' 
0, 
tBO 
t<O 
Determine the power spectrum Sy (j) of the filter output. 
(2.5 .6) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

66 
CHAPTER 2. RANDOM PROCESSES 
The frequency response of the filter is easily shown to be 
Hence, 
1 
H(j) 
= 1 + j2rrf 
Sy(f) 
IH(f)l2 
1 
1+(2rrj)2 
(2.5.7) 
(2.5.8) 
The graph of Sy (j) is illustrated in Figure 2.16. The MATLAB script for computing 
Sy (j) for a specified Sx (j) and H (j) is given next. 
0.9 
0.8 
0.7 
0.6 
0.5 
0.4 
0.3 
0.2 
0.1 
0 
-2 
- 1 .5 
-1 
-0.5 
0 
0.5 
1 
1.5 
2 
f 
Figure 2.16: Plot of Sy (j) given by (2.5.8) 
---41&1@1! ----------------
% MATLAB script for Illustrative Problem 2.7. 
echo on 
delta=0.01; 
F_min=-2; 
F_max=2; 
f=F _min:delta:F _max; 
Sx=ones(1,length(f)); 
H=1./(1 +(2*pi*f). &2); 
Sy=Sx.*H. &2; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

2.5. LINEAR FILTERING OF RANDOM PROCESSES 
67 
Illustrative Problem 2.8 [Autocorrelation and Power Spectrum] Compute the au­
tocorrelation function Ry(T) corresponding to Sy(f) in Illustrative Problem 2.7 for 
the specified Sx (j) 
= 1. 
In this case, we may use the inverse FFf algorithm on samples of Sy (j) given by 
(2.5.8). Figure 2.17 illustrates this computation with N 
= 256 frequency samples and 
a frequency separation l'lf = 0.1. The MATLAB script for this computation is given 
next. 
0.02 
O.Ql8 
0.016 
0.014 
0.012 
0.01 
0.008 
0.006 
0.004 
0.002 
0 
0 
50 
100 
150 
200 
250 
300 
Figure 2.17: Plot of Ry(T) in Illustrative Problem 2.8 
---tlili" ---------------
% MATLAB script for Illustrative Problem 2.8. 
echo on 
N=256; 
% number of samples 
deltaf=0.1; 
% frequency separation 
f=[O:deltaf:(N/2}*deltaf, -(N/2-1 )*deltaf:deltaf:-deltaf]; 
% Swap the first half. 
Sy=1./(1+(2*pi*f).A2); 
Ry=ifft(Sy); 
% Plotting command follows. 
plot(fftshift(real(Ry))); 
% sampled spectrum 
% autocorrelation of Y 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

68 
CHAPTER 2. RANDOM PROCESSES 
Let us now consider the equivalent discrete-time problem. Suppose that a stationary 
random process X(t) is sampled and the samples are passed through a discrete-time 
linear filter with impulse response h ( n) . The output of the linear filter is given by the 
convolution sum formula 
00 
Y(n) 
= I h(k)X(n - k) 
k=O 
(2.5.9) 
where X(n) = X(tn) are discrete-time values of the input random process and Y(n) 
is the output of the discrete-time filter. The mean value of the output process is 
my = E[Y(n)] 
00 
= I h(k)E[X(n - k)] 
k=O 
00 
= mx L h(k) 
k=O 
= mxH(O) 
(2.5.10) 
where H ( 0) is the frequency response H (j) of the filter evaluated at f = 0 and 
00 
H(j) 
= L h(n)e-j2rrfn 
n=O 
The autocorrelation function of the output process is 
Ry(m) 
= E[Y(n)Y(n + m)] 
00 
00 
= L L h(k) h(l)E[X(n - k)X(n + m - l)] 
k=Ol=O 
00 
00 
= L L h(k) h(l)Rx(m - l + k) 
k=Ol=O 
The corresponding expression in the frequency domain is 
Sy(f) 
= Sx(f)IH(f)l2 
where the power spectra are defined as 
00 
Sx(f) 
= 
L Rx(m)e-i2rrfm 
m=-oo 
and 
00 
Sy(f) 
= 
L Ry(m)e-j2rrfm 
m=-oo 
(2.5.11) 
(2.5.12) 
(2.5.13) 
(2.5.14) 
(2.5.15) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

2.5. LINEAR FILTERING OF RANDOM PROCESSES 
69 
Illustrative Problem 2.9 [Filtered White Noise] Suppose that a white random pro­
cess with samples {X ( n)} is passed through a linear filter with impulse response 
h(n) = {(0.95)n, 
0, 
n+O 
n<O 
Determine the power spectrum of the output process { Y ( n)} . 
It is easily seen that 
and 
00 
H(j) = I h(n)e-j2rrfn 
n=O 
00 
n=O 
1 
1 - 0.9se-j2rrf 
IH(f)l2 = 
___ 
l 
__ 
I l - 0.9Se-j2rrf 12 
1 
1.9025 - l.9cos(2rrf) 
Therefore, the power spectrum of the output process is 
Sy(f) = IH(f)j2Sx(f) 
1 
1.9025 - 1.9 cos(2rr f) 
(2.5.16) 
(2.5.17) 
(2.5.18) 
(2.5.19) 
where we assumed Sx (j) is normalized to unity. Figure 2.18 illustrates Sy (j). Note 
that Sy (j) is periodic with period 2rr. The MATLAB script for this computation is 
given next. 
---4111i'' 
--- 
% MATLAB script for Illustrative Problem 2 .9. 
delta_ w=2*pi/100; 
w=-pi:delta_w:pi; 
% one period of Sy 
Sy=1./(1.9025-1.9*cos(w)); 
% Plotting command follows. 
plot(w,Sy); 
The autocorrelation of the output process { Y ( n)} may be determined by taking the 
inverse FFT of Sy (j). The student will find it interesting to compare this autocorrela­
tion with that obtained in Illustrative Problem 2.4. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

70 
CHAPTER 2. RANDOM PROCESSES 
400 
350 
300 
250 
200 
150 
100 
50 
0 I 
I 
_)I\_ 
I 
-3 
-2 
-1 
0 
1 
2 
Figure 2.18: Plot of Sy (j) in Illustrative Problem 2.9 
2.6 
Lowpass and Bandpass Processes 
I 
3 
Just as in the case of deterministic signals, random signals can also be characterized as 
lowpass and bandpass random processes. 
Definition: A random process is called lowpass if its power spectrum is large in the 
vicinity off 
= 0 and small (approaching 0) at high frequencies. In other words, a 
lowpass random process has most of its power concentrated at low frequencies. 
Definition: A lowpass random process X ( t) is bandlimited if the power spectrum 
Sx(f) 
= 0 for lfl > B. The parameter B is called the bandwidth of the random 
process. 
Illustrative Problem 2.10 [Lowpass Processes] Consider the problem of generating 
samples of a lowpass random process by passing a white noise sequence {Xn} through 
a lowpass filter. The input sequence is an i.i.d. sequence of uniformly distributed ran­
dom variables on the interval ( -, ). The lowpass filter has the impulse response 
h(n) 
= 
{(0.9)n, 
0, 
n)O 
n<O 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

2.6. LOWPASS AND BANDPASS PROCESSES 
71 
and is characterized by the input-output recursive ( difference) equation 
Yn = 0.9Yn-l + Xn, 
n  1, 
Y-1 = 0 
Compute the output sequence {Yn} and determine the estimates of the autocorrelation 
functions Rx(m) and Ry(m), as indicated in (2.4.6). Determine the estimates of the 
power spectra Sx(f) and Sy(f) by computing the DF T of Rx(m) and Ry(m). 
The MATLAB scripts for these computations are given next. 
Figures 2.19 and 2.20 
illustrate the estimates of the autocorrelation functions and the power spectra. We note 
that the plots of the autocorrelation function and the power spectra are averages over 
ten realizations of the random process. 
0.09 ----- 
0.08 ,_ 
0.07 
0.06 
0.05 
0.04 
0,03 
0.02 
0.01 
Rx(m) 
0 r<--- '"r-..-./'--./--.,-"--"-..-..4 
-0.01 .___.__..___. _ _.__.___._ _ _.___. 
_ _.___, 
0 
5 
10 
15 
20 
25 
30 
35 
40 
45 
50 
m 
0.45 
0.4 
0.35 
0.3 
0.25 
0.2 
Ry(m) 
0.15 
0.1 
0.05 
0 
0 
5 
10 
15 
20 
25 
30 
35 
40 
45 
50 
m 
Figure 2.19: Autocorrelation functions Rx (m) and Ry (m) in Illustrative Problem2.10 
SxifJ 
6 
Sy CJ) 
0.14 
5 
0.12 
0.1 
4 
0.08 
3 
0.06 
2 
0.04 
0.02 
0 
0 
-0.5 -0.4 -0.3 -0.2 -0.l 
0 
0.1 0.2 0.3 0.4 0.5-0.5 -0.4 -0.3 -0.2 -0.1 
0 
0.1 0.2 0.3 0.4 0.5 
f 
f 
Figure 2.20: Power spectra Sx (j) and Sy (j) in Illustrative Problem 2.10 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

72 
CHAPTER 2. RANDOM PROCESSES 
-41ili" ----------------
% MATLAB script for Illustrative Problem 2.10. 
N=1000; 
% T he maximum value of n 
M=50; 
Rxav=zeros(1,M+ 1 ); 
Ryav=zeros(1,M+ 1 ); 
Sxav=zeros(1,M+ 1 ); 
Syav=zeros(1,M+ 1); 
for i=1:10, 
end; 
X=rand(1,N)-(1 /2); 
Y(1)=0; 
for n=2:N 
Y(n)=0.9*Y(n-1 )+X(n); 
end; 
Rx=Rx_est(X,M); 
Ry=Rx_est(Y ,M); 
Sx=fftshift( abs(fft(Rx))); 
Sy=fftshift(abs(fft(Ry))); 
Rxav=Rxav+Rx; 
Ryav=Ryav+Ry; 
Sxav=Sxav+Sx; 
Syav=Syav+Sy; 
echo off; 
echo on; 
Rxav=Rxav/1 O; 
Ryav=Ryav/1 O; 
Sxav=Sxav/1 O; 
Syav=Syav/1 O; 
% Take the ensemble average over ten realizations. 
% Generate a uniform number sequence on (-112,112). 
% Note that Y(n) means Y(n-1). 
% autocorrelation of {Xn} 
% autocorrelation of {Yn} 
% power spectrum of {Xn} 
% power spectrum of {Yn} 
-41ili" ----------------
function [Rx]=Rx_est(X,M) 
% [Rx]=Rx..est(X,M) 
% 
RXJJST 
estimates the autocorrelation of the sequence of random 
% 
variables given in X. Only Rx(O), Rx(l), ... , Rx( M) are computed. 
% 
Note that Rx(m) actually means Rx(m-1). 
N=length(X); 
Rx=zeros(1,M+1); 
for rn=1 :M+ 1, 
for n=1:N-rn+1, 
Rx(m)=Rx(m)+X(n)*X(n+m-1 ); 
end; 
Rx(m)=Rx(m)/(N-rn+ 1); 
end; 
Definition: A random process is called bandpass if its power spectrum is large in 
a band of frequencies centered in the neighborhood of a central frequency ±fo and 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

2.6. LOWPASS AND BANDPASS PROCESSES 
73 
relatively small outside of this band of frequencies. A random process is called nar­
rowband if its bandwidth B « Jo. 
Bandpass processes are suitable for representing modulated signals. In a commu­
nication system, the information-bearing signal is usually a lowpass random process 
that modulates a carrier for transmission over a bandpass (narrowband) communica­
tion channel. Thus the modulated signal is a bandpass random process. 
As in the case of deterministic signals, a bandpass random process X ( t) can be 
represented as 
X(t) = Xe(t) cos 2rrJot - Xs(t) sin2rrJot 
(2.6.1) 
where Xc(t) and X5(t) are called the in-phase and quadrature components of X(t). 
The random processes Xe ( t) and X5 ( t) are lowpass processes. The following theo­
rem, stated without proof, provides an important relationship among X ( t), Xe ( t), and 
X5(t). 
Theorem: If X ( t) is a zero-mean, stationary random process, the processes Xe ( t) and 
X5(t) are also zero-mean,jointly stationary processes. 
In fact, it can be easily proved (see Proakis and Salehi (2002)) that the autocorrela­
tion functions of Xe ( t) and X5 ( t) are identical and may be expressed as 
Re(T) 
= Rs(T) = Rx(T) cos 2rrJoT + Rx(T) sin2rrJoT 
(2.6.2) 
where Rx ( T) is the autocorrelation function of the bandpass process X ( t) and Rx ( T) 
is the Hilbert transform of Rx ( T), which is defined as 
Rx(T) = _!_ f 
00 
R(t) dt 
TT 
-oo T - t 
(2.6.3) 
Also, the cross-correlation function of Xe ( t) and X5 ( t) is expressed as 
Res(T) = Rx(T) sin2rrJoT - Rx(T) cos 2rrJoT 
(2.6.4) 
Finally, the autocorrelation function of the bandpass process X ( t) is expressed in terms 
of the autocorrelation function Re ( T) and the cross-correlation function Res ( T) as 
Rx(T) = Re(T) cos 2rrJoT - Res(T) sin2rrJoT 
(2.6.5) 
---til!U-il;@IW#l§;t•1:Jl§@I 
Illustrative Problem 2.11 [Generation of Samples of a Bandpass Random Pro­
cess] Generate samples of a Gaussian bandpass random process by first generating 
samples of two statistically independent Gaussian random processes Xe ( t) and X5 ( t) 
and then using these to modulate the quadrature carriers cos 2rr Jot and sin 2rr Jot, as 
shown in Figure 2 .21. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

74 
WGN 
WGN 
Lowpass 
filter 
Lowpass 
filter 
CHAPTER 2. RANDOM PROCESSES 
cos 2rtf0t 
Xit) 
t-----t x --- 
X,(t) 
sin 2rtf0t 
Xit) cos 2rtf0t 
-Xs(t) sin 2rtf0t 
Figure 2 .21: Generation of a bandpass random process 
On a digital computer, samples of the lowpass processes Xe (t) and X5 (t) are generated 
by filtering two independent Gaussian white noise processes by two identical lowpass 
filters. Thus we obtain the samples Xe(n) and X5(n), corresponding to the sampled 
values of Xe(t) and X5 (t). Then Xe (n) modulates the sampled carrier cos 2rr fonT, 
and X5 ( n) modulates the quadrature carrier sin 2 rr f on T, where T is the appropriate 
sampling interval. 
The MATLAB script for these computations is given next. For illustrative purposes, 
we have selected the lowpass filter to have a transfer function 
1 
H(z) = 1 - 0.9z-1 
Also, we selected T 
= 1 and fo 
= 1000/rr. The resulting power spectrum of the 
bandpass process is shown in Figure 2.22. 
30 
25 
20 
15 
10 
5 
o"----#----- 
-0.5 
-0.4 
-0.3 
-0.2 
-0.1 
0 
0.1 
0.2 
0.3 
0.4 
0.5 
f 
Figure 2 .22: The power spectrum of the bandpass process in Illustrative Problem 2 .11 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

2. 7. MONTE CARLO SIMULATION 
75 
--41®1i" 11--------------
% MATLAB script for Illustrative Problem 2 .11. 
N=1000; 
% number of samples 
for i=1 :2:N, 
end; 
[Xl(i) Xl(i+1 )]=gngauss; 
[X2(i) X2(i+ 1) ]=gngauss; 
echo off ; 
echo on ; 
A=[1 -0.9]; 
B=1; 
Xc=filter(B,A,Xl); 
Xs=filter(B,A,X2); 
fc=1000/pi; 
for i=1 :N, 
% standard Gaussian input noise processes 
% lowpass filter parameters 
% carrier frequency 
band_pass_ process(i)=Xc(i) * cos(2*pi *fc*i)-Xs(i) * sin(2*pi*fc* i); 
echo off ; 
end; 
echo on; 
% T=l is assumed. 
% Determine the autocorrelation and the spectrum of the bandpass process. 
M=50; 
bpp_autoco=Rx-est(band_ pass_ process,M); 
bpp_spectrum=fftshift(abs(fft(bpp_ autocorr))); 
% Plotting commands follow. 
2.7 
Monte Carlo Simulation of 
Digital Communication Systems 
Monte Carlo computer simulations are usually performed in practice to estimate the 
performance of a digital communication system in the presence of noise and inter­
ference. The commonly used metric for the performance of a digital communication 
system is the probability of error. 
To illustrate the process of estimating a probability related to a random variable, 
consider the random variable 
Y=m+G 
(2.7.1) 
where m is a constant and G is a zero-mean Gaussian random variable with variance 
a2 
= 1. Clearly, Y is a Gaussian random variable with mean m and variance a2 
= 1. 
Suppose that we wish to estimate the probability that Y < 0 for a given value of 
m-that is, 
P(m) = P(Y <Olm) 
(2.7.2) 
by performing a series of experiments (Monte Carlo simulation) using a digital com­
puter. Specifically, an estimate of P(m) is obtained by using a computer to gener­
ate a sequence of statistically independent and identically distributed zero-mean and 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

76 
CHAPTER 2. RANDOM PROCESSES 
0.4 
0.35 
0.3 
0.25 
0.2 
0.15 
0.1 
0.05 
0 
2 
1 
0 
1 
2 
3 
4 
5 
Figure 2.23: Probability density function of Yi 
unit-variance Gaussian random variables Gi, i = 1, 2, . . .  , N, as described in Section 
2.2. Then, by adding a constant value m to each Gi, we obtain the sequence ofrandom 
variables 
(2.7.3) 
Assuming that m is a positive number, the probability density function of Yi is shown 
in Figure 2.22. 
From these computer-generated random variables, we wish to estimate the proba­
bility that a Gaussian random variable with mean m (m > 0) and unit variance is less 
than zero. Clearly, this estimate is equal to the area in the tail of the probability density 
function shown in Figure 2.22. Hence, we test each Yi to see if Yi < 0 and define a 
new random variable Xi as follows: 
{o, 
Xi= 
l, 
if Yt 
 0 
if Yi< 0 
Then the estimate of the tail probability P(Y <Olm) is 
1 
N 
P(m) = - Ixt 
N i=l 
(2.7.4) 
(2.7.5) 
In other words, the estimate of P ( m) is simply the number of random variables Yi, i = 
1, 2, . . .  , N that are less than zero divided by the total number N of random variables. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

2. 7. MONTE CARLO SIMULATION 
77 
Because the estimate P ( m) is a function of the random variables Xi, i = 1, 2, . . .  , N, 
it is also a random variable. To determine how well this estimate approximates the true 
value P ( m), let us compute the mean and variance of this estimate. First, the mean 
value of F(m) is 
But 
Therefore, 
1 
N 
E[F(m)] = N I E(Xi) 
i=l 
1 
N 
E[F(m)J = 
- I P(Yi < 0) 
N i=l 
1 
N 
= 
- I P(m) = P(m) 
N i=I 
(2.7.6) 
This demonstrates that the mean value of the estimate P ( m) is equal to the true value 
P ( m) . An estimate that satisfies this property is said to be unbiased. 
Next, we compute the variance of the estimate F(m). The variance of F(m) is 
defined as 
But 
Then we have 
and 
2 
[
 
 
]2 
CTP(m) 
= E P(m) - E[P(m)] 
l 
N 
N 
E[F2(m)] = E[ N2 L I XiXJ] 
i=l j=l 
l 
N 
l 
N 
N 
= N2 I E[Xfl + N2 I L E(XiXj) 
i=l 
i=l j=l 
i/-j 
E[Xf] = 0 · P(Yi 	 0) + lP(Yi < 0) 
= P(m) 
(2.7.7) 
(2.7.8) 
(2.7.9) 
(2.7.10) 
(2.7 .11) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

78 
CHAPTER 2. RANDOM PROCESSES 
By substituting (2.7.10) and (2.7.11) into (2.7 .9), we obtain the result 
E[P2(m)] = P(m) + N( l) P2(m) 
1 
= NP(m)[l - P(m)] + P2(m) 
(2.7.12) 
Finally, by substituting the result in (2.7.12) into (2.7 .8), we obtain the variance of the 
estimate as 
2 
1 
CTP(m) = NP(m)[l - P(m)] 
(2.7.13) 
In general, when estimating P(m) based on the Monte Carlo method, we would like 
the standard deviation CTP(m) of the estimate to be small compared to P(m). For ex­
ample, suppose that we are estimating a small probability, say P(m) = 10-3. How 
large a sample do we need to take to ensure that the standard deviation CTP(m) is small 
compared to P ( m)? That is, 
[ 1 
J 
1/2 
CTP(m) = 
NP(m)[l - P(m)] 
« P(m) 
or, equivalently, CTft(m) « P2(m). Because P(m) « 1, we have 
Thus, 
1 
N » P(m) 
(2.7.14) 
For example, if P(m) = 10-3, then N » 1000. If we select the sample size N = 
10,000, then, on the average, we will have ten values of the Yi, i = 1, 2, . . .  , 10,000 
that will be less than zero. We consider this sample size to be the smallest value for 
obtaining a reliable estimate of P ( m) . Hence, as a rule of thumb, the sample size 
should satisfy the condition 
10 
N > P(m) 
(2.7.15) 
when P(m) « 1. This condition is usually adequate in estimating the probability of 
error of a digital communication system in the presence of additive noise and other 
additive interference. 
Illustrative Problem 2.12 [Sample Size in Monte Carlo Simulation] In a digital 
communication system, the received signal with voltage level m (m > 0) is corrupted 
by additive Gaussian noise having zero mean and unit variance. Determine the mini­
mum number of samples N that are needed to determine the probability P ( Y < 0 Im), 
when Yi= m+ Gdorm = 3 and m = 5, based on the rule of thumb given in (2.7.15). 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

2. 7. MONTE CARLO SIMULATION 
79 
The true probabilities that are to be estimated by means of Monte Carlo simulation are 
the following: 
m= 3: 
m= 5: 
P(3) = P(Y <Olm= 3) = 1.35 x 10-3 
P(5) = P(Y <Olm= 5) = 2.87 x 10-7 
Based on the rule of thumb given in (2.7 . 1 5), the minimum number of samples needed 
to estimate P ( 3) and P ( 5) are as follows 
m= 3: 
m= 5: 
10 
N = P(3) 
10 
N = P(5) 
7047 
3.48 x 107 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

80 
CHAPTER 2. RANDOM PROCESSES 
Problems 
2.1 Generate a set of 1000 uniform random numbers in the interval [0, l] using the 
MATLAB function rand(l, N). Plot the histogram and the probability distribution 
function for the sequence. The histogram may be determined by quantizing the interval 
in ten equal-width subintervals covering the range [0, l] and counting the numbers in 
each subinterval. 
2.2 Generate a set of 1000 uniform random numbers in the interval [ -, !-] using 
the MATLAB function rand(l, N). Plot the histogram and the probability distribution 
function for the sequence. 
2.3 Generate a set of 1000 uniform random numbers in the interval [ -1, 1] using 
the MATLAB function rand( 1, N). Plot the histogram and the probability distribution 
function for the sequence. 
2.4 Generate a set of 1000 random numbers having the linear probability density func-
ti on 
j(x) 
= {i· 
0, 
0::; x::; 4 
otherwise 
Plot the histogram and the probability distribution function. 
2.5 Generate a set of 1000 Gaussian random numbers having zero mean and unit vari­
ance using the method described in Section 2.2. Plot the histogram and the probability 
distribution function for the sequence. In determining the histogram, the range of the 
random numbers may be subdivided into subintervals of width (]"2 / 5, beginning with 
the first interval covering the range -(]"2 /10 < x < (]"2 /10, where (]"2 is the variance. 
2.6 Generate a set of 1000 Gaussian random numbers having zero mean and unit vari­
ance by using the MATLAB function randn(l, N). Plot the histogram and the prob­
ability distribution function for the sequence. Compare these results with the results 
obtained in Problem 2.5. 
2.7 The central limit theorem states that if random variables Xi, 1 ::; i ::; n, are i.i.d. 
(independent and identically distributed), with finite mean and variance, and n is large, 
then their average (i.e., Y 
=  2:!1 Xi) has roughly a Gaussian distribution. This 
theorem explains why thermal noise generated in electric circuits has a Gaussian dis­
tribution. In this problem we verify this theorem using MATLAB. 
a. Using MATLAB, generate a vector x of length 1,000,000 whose components 
are uniform random variables distributed between 0 and 1. The components of 
this vector are the Xi's in the central limit theorem. (Use MATLAB command 
"rand" to generate the sequence.) 
b. Find the average of every 100 consecutive elements of x and generate the se­
quence y of length 10,000. So, Y1 is the average of X1 through X100, Y2 is the 
average of X101 through X200, and so on. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
81 
c. Plot the histogram of the sequence y using the "hist" command. Use 40 bins to 
generate your plot. Include the listing of your program and the plot. Note that 
the histogram is very close to a Gaussian distribution. 
2.8 Generate 1000 pairs of Gaussian random numbers (X1, X2) that have mean vector 
and covariance matrix 
a. Determine the means of the samples (xu,X2i), i = 1, 2, ... , 1000, defined as 
 
1 
1000 
m1 
= 
1000 L xu 
t=l 
 
1 
1000 
m2 
= 
1000 ;z: X2i 
t=l 
Also, determine their variances, 
and their covariance, 
1 
1000 
2 
"\"'( 
)2 
0-1 
= 
1000  XIi - m1 
t=l 
1 
1000 
2 
"\"'( 
)2 
0-2 
= 
1000  X2i - m2 
t=l 
b. Compare the values obtained from the samples with the theoretical values. 
2.9 Repeat Illustrative Problem 2.2 with samples of the random variable X that is Gaus­
sian with mean m = 3 and variance o-2 
= 5. 
2.10 Generate a sequence of 1000 samples of a Gauss-Markov process described by 
the recursive relation 
Xn 
= PXn-1 + Wn, 
n 
= 1, 2, ... , 1000 
where Xo 
= 0, p 
= 0.85, and {Wn} is a sequence of zero-mean and unit-variance i.i.d. 
Gaussian random variables. 
2.11 Repeat Illustrative Problem 2.5 with an i.i.d. sequence of zero-mean, unit-variance, 
Gaussian random variables. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

82 
CHAPTER 2. RANDOM PROCESSES 
2.12 Repeat Illustrative Problem 2.6 when the power spectrum of a bandlimited ran­
dom process is 
Sx(f) 
= 
-
B
'
 
{l 
lfl 
0, 
Iii B 
otherwise 
2.13 Repeat Illustrative Problem 2.7 with a linear filter that has impulse response 
h(t) = 
e 
' 
{ -2t 
0, 
t/O 
t<O 
2.14 Determine numerically the autocorrelation function of the random process at the 
output of the linear filter in Problem 2.13. 
2.15 Repeat Illustrative Problem 2.9 when 
h(n) = {(0.8)n, 
0, 
n/O 
n<O 
2.16 Generate an i.i.d. sequence {Xn} of N 
= 1000 uniformly distributed random 
numbers in the interval [ -! , ! ] . This sequence is passed through a linear filter with 
impulse response 
h(n) = {(0.95)n, 
0, 
n/O 
n<O 
The recursive equation that describes the output of this filter as a function of the input 
is 
Yn = 0.95Yn-l + Xn, 
n / 0, 
Y-1 
= 0 
Compute the autocorrelation functions Rx ( m) and Ry ( m) of the sequences {Xn} and 
{Yn} and the corresponding power spectra Sx (j) and Sy (j) using the relations given 
in (2.4.6) and (2.4.7). Compare this result for Sy(f) with that obtained in Illustrative 
Problem 2.9. 
2.17 Generate two i.i.d. sequences {Wen} and {Wsnl of N 
= 1000 uniformly dis­
tributed random numbers in the interval [ - ! , ! ] . Each of these sequences is passed 
through a linear filter with impulse response 
n/O 
n<O 
whose input-output characteristic is given by the recursive relation 
n / 1, xo 
= 0 
Thus we obtain two sequences, {Xcnl and {Xsnl. The output sequence {Xcn} modu­
lates the carrier cos(rr /2)n, and the output sequence {Xsn} modulates the quadrature 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
83 
carrier sin(rr /2)n. The bandpass signal is formed by combining the modulated com­
ponents as in (2.6.1). 
Compute and plot the autocorrelation components Rc(m) and R5(m) for lml :-:; 
10 for the sequences {Xcn} and {XsnL respectively. Compute the autocorrelation 
function Rx(m) of the bandpass signal for lml :-:; 10. 
Use the DFf (or the FFT 
algorithm) to compute the power spectra Sc (j), Ss (j), and Sx (j). Plot these power 
spectra and comment on the results. 
2.18 By Monte Carlo simulation, estimate the tail probability P(m) = P(Y <Olm), 
when Y = m + G, m = 3, and G is a Gaussian random variable with zero mean and 
unit variance. Repeat this simulation experiment five times and observe the estimate 
of P ( m) when different sets of Gaussian random numbers are used in the five experi­
ments. Comment on the variations observed in the five estimates and on how well the 
estimates match the true values P ( 3) . 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

Copyright 2011 Cengage Learning. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

Chapter 3 
Analog Modulation 
3.1 
Preview 
In this chapter we study the performance of various analog modulation-demodulation 
schemes, both in the presence and in the absence of additive noise. Systems studied 
in this chapter include amplitude-modulation (AM) schemes, such as DSB-AM, SSB­
AM, and conventional AM, and angle-modulation schemes, such as frequency and 
phase modulation. 
Each member of the class of analog modulation systems is characterized by five 
basic properties: 
1. Time-domain representation of the modulated signal 
2. Frequency-domain representation of the modulated signal 
3. Bandwidth of the modulated signal 
4. Power content of the modulated signal 
5. Signal-to-noise ratio (SNR) after demodulation 
These properties are obviously not independent of one another. There exists a close 
relationship between time- and frequency-domain representations of signals expressed 
through the Fourier transform relation. Also, the bandwidth of a signal is defined in 
terms of its frequency characteristics. 
Due to the fundamental difference between amplitude- and angle-modulation 
schemes, these schemes are treated separately and in different sections. We begin this 
chapter with the study of the simplest modulation scheme, amplitude modulation. 
3.2 Amplitude Modulation (AM) 
Amplitude modulation (AM), which is frequently referred to as linear modulation, is 
the family of modulation schemes in which the amplitude of a sinusoidal carrier is 
85 
Copyright 2011 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not material1y affect the overall learning experience. Cengage Leaming reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

86 
CHAPTER 3. ANALOG MODULATION 
changed as a function of the modulating signal. This class of modulation schemes 
consists of DSB-AM (double-sideband amplitude modulation), conventional ampli­
tude modulation, SSB-AM (single-sideband amplitude modulation), and VSB-AM 
(vestigial-sideband amplitude modulation). The dependence between the modulating 
signal and the amplitude of the modulated carrier can be very simple, as, for example, 
in the DSB-AM case, or much more complex, as in SSB-AM or VSB-AM. Amplitude­
modulation systems are usually characterized by a relatively low bandwidth require­
ment and power inefficiency in comparison to the angle-modulation schemes. 
The 
bandwidth requirement for AM systems varies between W and 2W, where W denotes 
the bandwidth of the message signal. For SSB-AM the bandwidth is W, for DSB­
AM and conventional AM the bandwidth is 2W, and for VSB-AM the bandwidth 
is between W and 2W. These systems are widely used in broadcasting (AM radio 
and TV video broadcasting), point-to-point communication (SSB), and multiplexing 
applications (for example, transmission of many telephone channels over microwave 
links). 
3.2.1 
DSB-AM 
In DSB-AM, the amplitude of the modulated signal is proportional to the message 
signal. 
This means that the time-domain representation of the modulated signal is 
given by 
u(t) = Acm(t) cos(2rrfct) 
(3.2.1) 
where 
c(t) = Ac cos(2rr Jct) 
(3.2.2) 
is the carrier and m(t) is the message signal. The frequency-domain representation of 
the DSB-AM signal is obtained by taking the Fourier transform of u(t) and results in 
U(j) = c M(j- fc) + c M(j + fc) 
(3.2.3) 
where M(j) is the Fourier transform of m(t). Obviously, this type of modulation 
results in a shift of ±fc and a scaling of Ac I 2 in the spectrum of the message signal. 
The transmission bandwidth, denoted by BT, is twice the bandwidth of the message 
signal: 
BT= 2W 
(3.2.4) 
A typical message spectrum and the spectrum of the corresponding DSB-AM modu­
lated signal are shown in Figure 3 .1. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.2. AMPLITUDE MODULATION (AM) 
-w 
M(f) 
A 
U(j) 
w 
f 
r=s-
-\--- --+-
-
- -_- ....__
_, 
_ ___.__
· 
f 
-Jc: 
\ 
f. 
Figure 3 .1: Spectra of the message and the DSB-AM modulated signal 
The power content of the modulated signal is given by 
1 fT/2 
Pu= lim -
u2(t) dt 
T-oo T -T/2 
1 f T/2 
= lim T 
A%m2(t) cos2(2rrfc0 dt 
T-oo 
-T/2 
= lim _!_ J
T/2 
A%m2(t) 1 
+ cos(4rrfct) dt 
T-oo T -T/2 
2 
=A% { lim _!_ fT/2 m2(t) dt 
+ lim _!_ f T/2 
m2(t) cos(4rrfct) dt} 
T-oo T -T/2 
2 
T-oo T -T/2 
2 
87 
=A% lim _!_ f T/2 m2(t) dt 
(3.2.5) 
T-oo T -T/2 
2 
- A& p 
-
2 
m 
(3.2.6) 
where Pm is the power content of the message signal. Equation (3.2.5) follows from 
the fact that m ( t) is a lowpass signal with frequency contents much less than 2j c , the 
frequency content of cos( 4rr fc t). Therefore, the integral 
fT/2 
m2(t) cos(4rrfct) dt 
(3.2.7) 
-T/2 
2 
goes to zero as T -. oo. Finally, the SNR for a DSB-AM system is equal to the baseband 
SNR; that is, it is given by 
( S) 
PR 
N 
o = NoW 
(3.2.8) 
where PR is the received power (the power in the modulated signal at the receiver), 
No/2 is the noise power spectral density (assuming white noise), and Wis the message 
bandwidth. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

88 
CHAPTER 3. ANALOG MODULATION 
Illustrative Problem 3.1 [DSB-AM Modulation] The message signal m(t) is de-
fined as 
{1, 
m(t) = 
-2, 
0, 
O<t<!fl. 
-
- 3 
!fl. < t < 2to 
3 
-
3 
otherwise 
This message DSB-AM modulates the carrier c (t) 
= cos 2rr Jct, and the resulting 
modulated signal is denoted by u ( t) . It is assumed that to = 0 .15 s and Jc = 2 5 0 Hz. 
1. Obtain the expression for u ( t) . 
2. Derive the spectra of m ( t) and u ( t) . 
3. Assuming that the message signal is periodic with period To = to, determine the 
power in the modulated signal. 
4. If a noise is added to the modulated signal in part 3 such that the resulting SNR 
is 10 dB, find the noise power. 
1. m ( t) can be written as 
( t - !fl. ) ( t - to ) 
m(t) = n 
 6 
- 2n 
 2 
Therefore, 
u(t) = [ n ( t -0025) - 2n ( t -0075) J cos(500rrt) 
(3.2.9) 
2. Using the standard Fourier transform relation $[il(t)] 
= sinc(t) together with 
the shifting and the scaling theorems of the Fourier transform, we obtain 
$[m(t)] 
= t; e-jrrfto/3 sine C°f) - 2 t; e-jrrfto sine C°f) 
= t; e-jrr fto/3 sine C°f) ( 1 _ 2e-j2rrtof /3) 
Substituting to = 0.15 s gives 
$[m(t)] 
= 0.05e-O.OSjrrf sinc(0.05J) ( 1 - 2e-O.ljrrf) 
For the modulated signal u ( t) we have 
(3.2.10) 
(3.2.11) 
U(j) 
= 0.025e-O.OSjrr(f-fc) sine (0.05(j-Jc)) (1- 2e-O.ljrrCf-fcl) 
+ 0.02 5e-O.OSjrr(f + fc) sine (0.05 (j +Jc)) ( 1 - 2e-O.ljrr(j + fc)) 
Plots of the magnitude spectra of the message and the modulated signals are 
shown in Figure 3 .2. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.2. AMPLITUDE MODULATION (AM) 
0.06 
0.12 
0.05 
0.1 
0.04 
0.08 
0.06 
0.03 
0.04 
0.02 
0.02 
0.01 
0 
0 !Lll.ILlil'.l.i.ll.LllJl.l.lll.l.l.llllll.lLlllLlJ!lll.l'.l'il:lllll 
-500-400-300-200-100 0 
100 200 300 400 500 -500-400-300-200-100 0 
100 200 300 400 500 
Frequency 
Frequency (Hz) 
89 
Figure 3 .2: Magnitude spectra of the message and the modulated signals in Illustrative 
Problem 3.1 
3. The power in the modulated signal is given by 
where Pm is the power in the message signal, 
Pm = _!_ 12to/3 m2 (t) dt = _!_ ( to + 4to) = 
to Jo 
to 
3 
3 
5 
3 
- 1.666 
and 
Pu = l.
66 = 0.833 
4. Here, 
10log10 (:) = 10 
or PR =Pu = lOPn, which results in Pn = Pu/10 = 0.0833. 
The MATLAB script for the preceding problem follows. 
---®Ii" •---------------
% MATLAB script for Illustrative Problem 3.1. 
% Demonstration script for DSB-AM. The message signal is 
% +I for 0 < t < t0/3, -2 for t0/3 
< t < 2t0/3, and zero otherwise. 
echo on 
t0=.15; 
ts=0.001; 
fc=250; 
snr=20; 
fs=1 /ts; 
df=0.3; 
t=[O:ts:tO]; 
% signal duration 
% sampling interval 
% carrier frequency 
% SNR in dB (logarithmic) 
% sampling frequency 
% desired freq. resolution 
% time vector 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

90 
CHAPTER 3. ANALOG MODULATION 
snLlin=1 oA(snr/1 O); 
% linear SNR 
% message signal 
m=[ones(1,t0/(3*ts)), -2*ones(1,t0/(3*ts)),zeros(1,t0/(3*ts)+ 1 )]; 
c=cos(2*pi*fc.*t); 
% carrier signal 
u=m.*c; 
% modulated signal 
[M,m,dfl]=fftseq(m,ts,df); 
% Fourier transform 
M=M/fs; 
% scaling 
[U,u,dfl]=fftseq(u,ts,dt); 
% Fourier transform 
U=U/fs; 
% scaling 
[C,c,dfl]=fftseq(c,ts,df); 
% Fourier transform 
f=[O:dfl:dfl *(length(m)-1 )]-fs/2; 
% freq. vector 
signaLpower=spower(u(1 :length(t))); 
% power in modulated signal 
noise_power=signaLpower/snr_lin; 
% Compute noise power. 
noise_std=sqrt(noise_power); 
% Compute noise standard deviation. 
noise=noise_std*randn(1,length(u)); 
% Generate noise. 
r=u+noise; 
% Add noise to the modulated signal. 
[R,r,dfl]=fftseq(r,ts,dt); 
% spectrum of the signal+noise 
R=Rlfs; 
% scaling 
pause 
% Press a key to show the modulated signal power. 
signal_ power 
pause 
% Press any key to see a plot of the message. 
elf 
subplot(2,2, 1 ) 
plot(t,m(1 :length(t))) 
xlabel( ' Time ' ) 
title(' The message signal' ) 
pause 
% Press any key to see a plot of the carrier. 
subplot(2,2,2) 
plot(t,c(1 :length(t))) 
xlabel( ' Time ' ) 
title(' The carrier' ) 
pause 
% Press any key to see a plot of the modulated signal. 
subplot(2,2,3) 
plot(t,u(1 :length(t))) 
xlabel( ' Time ' ) 
title(' The modulated signal' ) 
pause 
% Press any key to see plots of the magnitude of the message and the 
% modulated signal in the frequency domain. 
subplot(2, 1, 1 ) 
plot(f,abs(fftshift(M))) 
xlabel(' Frequency' ) 
title(' Spectrum of the message signal' ) 
subplot(2, 1,2) 
plot(f,abs(fftshift(U))) 
title(' Spectrum of the modulated signal' ) 
xlabel(' Frequency' ) 
pause 
% Press a key to see a noise sample. 
subplot(2, 1, 1) 
plot(t,noise(1 :length(t))) 
title(' Noise sample' ) 
xlabel( ' Time ' ) 
pause 
% Press a key to see the modulated signal and noise. 
subplot(2, 1,2) 
plot(t,r(1 :length(t))) 
title(' Signal and noise' ) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.2. AMPLITUDE MODULATION (AM) 
xlabel(' Time ') 
pause 
% Press a key to see the modulated signal and noise in freq. domain. 
subplot(2, 1, 1) 
plot(f,abs(fftshift(U))) 
title(' Signal spectrum' ) 
xlabel(' Frequency' ) 
subplot(2, 1,2) 
plot(f,abs(fftshift(R))) 
title(' Signal and noise spectrum' ) 
xlabel(' Frequency' ) 
91 
Illustrative Problem 3.2 [DSB Modulation for an Almost Bandlimited Signal] The 
message signal m ( t) is given by {sinc(lOOt), 
m(t) = 
0, 
I ti ::; to 
otherwise 
where to = 0.1. 
This message modulates the carrier c(t) 
fc = 250 Hz. 
1. Determine the modulated signal u ( t) . 
2. Determine the spectra of m(t) and u(t). 
cos(2rrfct), where 
3. If the message signal is periodic with period To = 0.2 s, determine the power in 
the modulated signal. 
4. If a Gaussian noise is added to the modulated signal such that the resulting SNR 
is 10 dB, find the noise power. 
1. We have 
u(t) = m(t)c(t) 
= {sinc(lOOt) cos(500t), 
0, 
ltl::; 0.1 
otherwise 
= sinc(100t)I1(5t) cos(500t) 
(3.2.12) 
(3.2.13) 
2. A plot of the spectra of m ( t) and u ( t) is shown in Figure 3 .3. As the figure shows, 
the message signal is an almost bandlimited signal with a bandwidth of 50 Hz. 
3. The power in the modulated signal is half of the power in the message signal. The 
power in the message signal is given by 
1 J
O.I 
Pm= 
0 2 
sinc2(100t) dt 
. 
-0.l 
The integral can be computed using MATLAB's quad8.m m-file, which results in 
Pm= 0.0495 and, hence, Pu = 0.0247. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

92 
CHAPTER 3. ANALOG MODULATION 
0.01 
0.008 
0.006 
0.004 
0.002 
O L..---L...L...L..<=--ll!..--L..!11 .... >?...L...l-.---1@....1 
-500 
-400 
-300 
-200 
-100 
0 
100 
200 
300 
400 
500 
Frequency (Hz) 
5 
4 
3 
2 
O '---'A.-llfil._u"""---'--'-..i.. ... .-."--B""'---"'C-' 
-500 
-400 
-300 
-200 
-100 
0 
100 
Frequency 
200 
300 
400 
500 
Figure 3 .3: Spectra of the message and the modulated signals in Illustrative Problem 3 .2 
4. Here, 
10log10 (;:) 
= 10 => Pn 
= 0.lPR 
= 0.lPu 
= 0.00247 
The MATLAB script for the problem follows. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.2. AMPLITUDE MODULATION (AM) 
93 
___ ,., .. ·---------------
% MATLAB script for Illustrative Problem 3 .2. 
% Matlab demonstration script for DSB-AM modulation. The message signal 
% is m(t)=sinc(JOOt). 
echo on 
t0=.2; 
ts=0.001; 
fc=250; 
snr=20; 
fs=1/ts; 
df=0.3; 
t=[ -t0/2 :ts :t0/2]; 
snr_lin=10  (snr/10); 
m=sinc(1 OO*t); 
c=cos(2*pi*fc. *t); 
u=m.*c; 
[M,m,dfl]=fftseq(m,ts,df); 
M=Mlfs; 
[U,u,dfl]=fftseq(u,ts,df); 
U=U/fs; 
f=[O:dfl :dfl*(length(m)-1 )]-fs/2; 
signaLpower=spower(u(1 :length(t))); 
noise_power=signaL power/snr_lin; 
noise_std=sqrt(noise_ power); 
noise=noise_std*randn(1,length(u)); 
% signal duration 
% sampling interval 
% carrier frequency 
% SNR in dB (logarithmic) 
% sampling frequency 
% required freq. resolution 
% time vector 
% linear SNR 
% the message signal 
% the carrier signal 
% the DSB-AM modulated signal 
% Fourier transform 
% scaling 
% Fourier transform 
% scaling 
% frequency vector 
% Compute modulated signal power. 
% Compute noise power. 
% Compute noise standard deviation. 
% Generate noise sequence. 
r=u+noise; 
[R,r,dfl]=fftseq(r,ts,df); 
R=Rlfs; 
% add noise to the modulated signal 
pause 
% Press a key to show the 
signal_ power 
% Fourier trans! orm 
% scaling 
modulated signal power. 
pause 
%Press any key to see a plot of the message. 
elf 
subplot(2,2, 1) 
plot(t,m(1 :length(t))) 
xlabel(' Time' ) 
title(' The message signal' ) 
pause % Press any key to see a plot of the carrier. 
subplot(2,2,2) 
plot(t,c(1 :length(t))) 
xlabel(' Time' ) 
title('The carrier' ) 
pause 
% Press any key to see a plot of the modulated signal. 
subplot(2,2,3) 
plot(t,u(1 :length(t))) 
xlabel(' Time ') 
title(' The modulated signal' ) 
pause 
% Press any key to see a plot 
of the magnitude of the message and the 
% modulated signal in the frequency domain. 
subplot(2, 1, 1) 
plot(f,abs(fftshift(M))) 
xlabel(' Frequency' ) 
title(' Spectrum of the message signal' ) 
subplot(2, 1,2) 
plot(f,abs(fftshift(U))) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

94 
CHAPTER 3. ANALOG MODULATION 
title(' Spectrum of the modulated signal' ) 
xlabel(' Frequency' ) 
pause 
% Press a key to see a noise sample. 
subplot(2, 1 , 1) 
plot(t,noise(1 :length(t))) 
title(' Noise sample' ) 
xlabel( ' Time ' ) 
pause 
% Press a key to see the modulated signal and noise. 
subplot(2, 1 ,2) 
plot( t,r( 1 :length( t))) 
title(' Signal and noise' ) 
xlabel(' Time' ) 
pause 
% Press a key to see the modulated signal and noise in freq. domain. 
subplot(2, 1 , 1) 
plot(f,abs(fftshift(U))) 
title(' Signal spectrum' ) 
xlabel(' Frequency' ) 
subplot(2, 1 ,2) 
plot(f,abs(fftshift(R))) 
title(' Signal and noise spectrum' ) 
xlabel(' Frequency' ) 
ttf4'*'4''i'l---------------
What happens if the duration of the message signal to changes; in particular, what is 
the effect of having large to 's and small to 's? What is the effect on the bandwidth and 
signal power? 
The m-file dsb_mod.m given next is a general DSB modulator of the message signal 
given in vector m on a carrier of frequency f c. 
__., .... ·---------------
function u=dsb_mod(m,ts,fc) 
% 
u=dsbJnod(m,tsfc) 
%DSB-MOD 
takes signal m sampled at ts and carrier 
% 
% 
% 
% 
freq. Jc as input and returns the DSB modulated 
signal. ts << 1!2fc. The modulated signal 
is normalized to have half the message power. 
The message signal starts at 0. 
t=[O:length(m)-1 ]*ts; 
u=m. *cos(2*pi*t); 
3.2.2 
Conventional AM 
In many respects conventional AM is quite similar to DSB-AM; the only difference is 
that in conventional AM, m(t) is substituted with [l + amn(t)], where mn (t) is the 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.2. AMPLITUDE MODULATION (AM) 
95 
normalized message signal (i.e., lmn (t) I :S: 1) and a is the index of modulation, which 
is a positive constant between 0 and 1. Thus we have 
u(t) =Ac [l + amn(t)] cos(2rrfct) 
(3.2.14) 
and 
A 
U(j) = --f [8(j - fc) + aMn<f - fc) + 8(j + fc) + aMn<f + fc)] 
(3.2.15) 
The net effect of scaling the message signal and adding a constant to it is that the term 
[l + amn (t)] is always positive. This makes the demodulation of these signals much 
easier by employing envelope detectors. Note the existence of the sinusoidal compo­
nent at the frequency fc in U (j). This means that a (usually substantial) fraction of 
the transmitted power is in the signal carrier that does not really serve the transmis­
sion of information. This fact shows that compared to DSB-AM, conventional AM is 
a less economical modulation scheme in terms of power utilization. The bandwidth, of 
course, is equal to the bandwidth of DSB-AM and is given by 
By= 2W 
(3.2.16) 
Typical frequency-domain plots of the message and the corresponding conventional 
AM signal are shown in Figure 3 .4. 
M{j) 
A 
f 
-W 
w 
U(j) 
-
-fr 
\ --+-- \ 
Figure 3 .4: Spectra of the message and the of conventional AM signal 
The power content of the modulated signal, assuming that the message signal is a 
zero-mean signal, is given by 
A [ 
2 
] 
Pu= T 1 +a Pmn 
(3.2.17) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

96 
CHAPTER 3. ANALOG MODULATION 
which comprises two parts, A / 2, which denotes the power in the carrier, and 
Aa2Pmn/2, which is the power in the message-bearing part of the modulated sig­
nal. This is the power that is really used to transmit the message. The ratio of the 
power that is used to transmit the message to the total power in the modulated signal is 
called the modulation efficiency and is defined by 
aZPmn 
17=
l+a2P mn 
(3.2.18) 
Because lmn(t) I ::; 1 and a::; 1, we always have 17 ::; 0.5. In practice, however, the 
value of 17 is around 0.1. The signal-to-noise ratio is given by 
( S ) 
PR 
N
o
 
=
11NoW 
(3.2.19) 
where 17 is the modulation efficiency. We see that the SNR is reduced by a factor 
equal to 17 compared to a DSB-AM system. This reduction of performance is a direct 
consequence of the fact that a significant part of the total power is in the carrier (the 
deltas in the spectrum), which does not carry any information and is filtered out at the 
receiver. 
--llM!l@l;MlNi#l;t•1:JM§lil 
Illustrative Problem 3.3 [Conventional AM] The message signal 
{l, 
m(t) = -2, 
0, 
O::=;t<  
!Q < t < Zto 
3 
-
3 
otherwise 
modulates the carrier c(t) = cos(2rrfct) using a conventional AM scheme. It is 
assumed that Jc= 250 Hz and to= 0.15; the modulation index is a= 0.85. 
1. Derive an expression for the modulated signal. 
2. Determine the spectra of the message and the modulated signals. 
3. If the message signal is periodic with a period equal to to, determine the power 
in the modulated signal and the modulation efficiency. 
4. If a noise signal is added to the message signal such that the SNR at the output 
of the demodulator is 10 dB, find the power content of the noise signal. 
1. First note that max Im ( t) I = 2; therefore, mn ( t) 
have 
u(t) = [ 1 + 0.85 mt) J cos(2rrfct) 
m(t)/2. From this we 
= [ 1 + 0.425IT ( t -0025) - 0.85I1 ( t -0075) J cos(500rrt) 
A plot of the message and the modulated signal is shown in Figure 3 .5. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.2. AMPLITUDE MODULATION (AM) 
97 
2 .. 
1.5 .. 
0.5 .. 
0 .. 
-0.5 .. 
-1 .. 
-1.5 .. 
2 >-
I 
1.5 .. 
0.5 
0 
-0.5 
-1 
-1.5 .. 
I 
I 
I 
I 
I 
I 
.. 
I 
I 
I 
I 
-2 
-2'""-'--'--'--'--'--'--'--' 
0 
0.02 
0.04 
0.06 
0.08 
0.1 
0.12 
0.14 
0 
0.02 
0.04 
0.06 
0.08 
0.1 
0.12 
0.14 
Tune 
Time 
Figure 3 .5: The message and the modulated signals in Illustrative Problem 3 .3 
2. For the message signal we have 
$"[m(t)] = 0.05e-o.05jrrf sinc(0.05j) ( 1 - 2e-O.ljrrf) 
(3.2.20) 
and for the modulated signal, 
U(j) = 0.010625e-0·05jrr(f-250> sinc(0.05(j - 250)) ( 1 - 2e-O.ljrr(J-25oJ) 
+ 0.010625e-0·05irrCJ+25oJ sinc(0.05(j + 250)) ( 1 - 2e-O.ljrr(J+250>) 
Plots of the spectra of the message and the modulated signal are shown in 
Figure 3.6. 
Note that the scales on the two spectra plots are different. The presence of the 
two delta functions in the spectrum of the modulated signal is apparent. 
3. The power in the message signal can be obtained as 
1 [ r0.05 
rO.l ] 
Pm = 0_15 
J o 
dt + 4 
J o.os 
dt = 1.667 
The power in the normalized message signal Pmn is given by 
1 
1.66 
Pmn = 4Pm = 4 = 0.4167 
and the modulation efficiency is 
a2Pmn 
l1 = 1 + a2P mn = 
0.852 x 0.4167 
= 0.2314 
1 + 0.852 x 0.4167 
The power in the modulated signal is given by 
A2 r2to/3 
Pu= -f J o 
[l + amn(t)]2 dt 
1 ( 
0.025) 
= 2 1+0.3010 - 1.7 x 0.15 
= 0.5088 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

98 
CHAPTER 3. ANALOG MODULATION 
-400 
-300 
-200 
-100 
0 
100 
200 
300 
400 
500 
Frequency 
0.7 
I 
I 
I 
I 
I 
I 
I 
' 
' 
0.6 
-
0.5 
-
0.4 
-
0.3 
0.2 
0.1 
-
0 
' L. 
.J -
-500 
-400 
-300 
-200 
-100 
0 
100 
200 
300 
400 
500 
Frequency 
Figure 3 .6: Spectra of the message and the modulated signal in Illustrative Problem 3 .3 
4. In this case 
10log10 [ TJ () J 
10 
or 
TJ (;:) = 10 
Substituting 1J = 0.2314 and PR =Pu= 0.5088 yields Pn = !I&_ 
0.0118. 
10 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.2. AMPLITUDE MODULATION (AM) 
99 
In finding the power in the modulated signal in this problem, we could not use the re­
lation 
A [ 
2 
] 
Pu= 2 
1 +a Pmn 
because in this problem m(t) is not a zero-mean signal. 
The MATLAB script for this problem is given next. 
____ , .... ·---------------
% MATLAB script for Illustrative Problem 3.3. 
% Demonstration script for DSB-AM modulation. The message signal 
% is +l for 0 < t < t0/3, -2 for t0/3 < t < 2t0!3, and zero otherwise. 
echo on 
t0=.15; 
ts=0.001; 
fc=250; 
snr=10; 
a=0.85; 
fs=1 /ts; 
t=[O:ts:tO]; 
df=0.2; 
sndin= 1 0 A ( snr/1 0); 
% signal duration 
% sampling interval 
% carrier frequency 
% SNR in dB (logarithmic) 
% modulation index 
% sampling frequency 
% time vector 
% required frequency resolution 
% SNR 
% message signal 
rn=[ones(1,t0/(3*ts)),-2*ones(1,t0/(3*ts)),zeros(1,t0/(3*ts)+ 1 )] ; 
c=cos(2*pi*fc.*t); 
% carrier signal 
rn_n=rnlrnax(abs(rn)); 
% normalized message signal 
[M,rn,dfl]=fftseq(rn,ts,df); 
% Fourier transform 
M=M/fs; 
% scaling 
f=[O:dfl :dfl * (length(rn)-1 )]-fs/2; 
% frequency vector 
u=(1 +a*rn_n).*c; 
% modulated signal 
[U,u,dfl]=fftseq(u,ts,df); 
% Fourier transform 
U=U/fs; 
% scaling 
signaLpower=spower(u(1 :length(t))); 
% power in modulated signal 
% power in normalized message 
prnn=spower(rn(1 :length(t)) )/(rnax(abs(rn))) "2; 
eta=(a" 2*prnn)/(1+a"2*prnn); 
% modulation efficiency 
noise_power=eta*signaLpower/snr_lin; 
% noise power 
noise_std=sqrt(noise_ power); 
noise=noise_std*randn(1,length(u)); 
r=u+noise; 
[R,r,dfl]=fftseq(r,ts,df); 
R=Rlfs; 
pause 
% Press a key to show 
signaL power 
the 
% noise standard deviation 
% Generate noise. 
% Add noise to the modulated signal 
% Fourier transform. 
% scaling 
modulated signal power. 
pause 
% Press a key to show 
eta 
the modulation efficiency. 
pause 
% Press any key to see a plot of the message. 
subplot(2,2, 1) 
plot(t,rn(1 :length(t))) 
axis([O 0.15 -2.1 2.1]) 
xlabel(' Time ') 
title(' The message signal') 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

100 
CHAPTER 3. ANALOG MODULATION 
pause 
% Press any key to see a plot of the carrier. 
subplot(2,2,2) 
plot(t,c(1 :length(t))) 
axis([O 0.15 -2.1 2.1]) 
xlabel(' Time' ) 
title(' The carrier' ) 
pause 
% Press any key to see a plot of the modulated signal. 
subplot(2,2,3) 
plot(t,u(1 :length(t))) 
axis([O 0.15 -2.1 2.1]) 
xlabel( ' Time ' ) 
title(' The modulated signal' ) 
pause 
% Press any key to see plots of the magnitude of the message and the 
% modulated signal in the frequency domain. 
subplot(2, 1, 1) 
plot(f,abs(fftshift(M))) 
xlabel(' Frequency' ) 
title(' Spectrum of the message signal' ) 
subplot(2, 1,2) 
plot(f,abs(fftshift(U))) 
title(' Spectrum of the modulated signal' ) 
xlabel(' Frequency' ) 
pause 
% Press a key to see a noise sample. 
subplot(2, 1, 1) 
plot(t,noise(1 :length(t))) 
title(' Noise sample' ) 
xlabel( ' Time ' ) 
pause 
% Press a key to see the modulated signal and noise. 
subplot(2, 1,2) 
plot(t,r(1 :length(t))) 
title(' Signal and noise' ) 
xlabel( ' Time ' ) 
pause 
% Press a key to see the modulated signal and noise in freq. domain. 
subplot(2, 1, 1) 
plot(f,abs(fftshift(U))) 
title(' Signal spectrum' ) 
xlabel(' Frequency' ) 
subplot(2, 1,2) 
plot(f,abs(fftshift(R))) 
title(' Signal and noise spectrum' ) 
xlabel(' Frequency' ) 
The MATLAB m-file am_mode.m given below is a general conventional AM 
modulator. 
--®Ii" •---------------
function u=am_mod(a,m,ts,fc) 
% 
u=am_mod(a,m,tsjc) 
%AM..MOD 
takes signal m sampled at ts and carrier 
% 
freq. Jc as input and returns the AM modulated 
% 
signal. "a" is the modulation index 
% 
and ts << 112fc. 
t=[O:length(m)-1 ]*ts; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.2. AMPLITUDE MODULATION (AM) 
c=cos(2*pi*fc. *t); 
m_n=mlmax( abs(m)); 
u=(1 +a*m_n). *c; 
3.2.3 
SSB-AM 
101 
SSB-AM is derived from DSB-AM by eliminating one of the sidebands. Therefore, 
it occupies half the bandwidth of DSB-AM. Depending on the sideband that remains, 
either the upper or the lower sideband, there exist two types of SSB-AM: Upper Single­
Sideband AM (USSB-AM) and Lower Single-Sideband AM (LSSB-AM). The time 
representation for these signals is given by 
u(t) = cm(t)cos(2rrfc0 + cm(t)sin(2rrfc0 
(3.2.21) 
where the minus sign corresponds to USSB-AM and the plus sign corresponds to 
LSSB-AM. The signal denoted by m(t) is the Hilbert transform of m(t), defined 
by m(t) = m(t) * 1/ (rrt) or, in the frequency domain, by M(j) = 
-j sgn(j)M(j). 
In other words, the Hilbert transform of a signal represents a rr /2 phase shift in all 
frequency components. In the frequency domain, we have 
and 
f { [M(j - fc) + M(j +Jc)], 
fc :S Iii 
Uusss( ) = 
0, 
otherwise 
U 
(f) { [M(j - Jc)+ M(j + fc)], 
LSSB 
= 
O
, 
JJJ :$ fc 
otherwise 
(3.2.22) 
(3.2.23) 
Typical plots of the spectra of a message signal and the corresponding USSB-AM mod­
ulated signal are shown in Figure 3 .7. 
-W 
/--
-/(' 
\ 
M(f) 
A 
UC/) 
' 
' 
' 
\ 
.. J 
w 
Figure 3.7: Spectra of the message and the USSB-AM signal 
• .f 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

102 
CHAPTER 3. ANALOG MODULATION 
The bandwidth of the SSB signal is half the bandwidth of DSB and conventional 
AM and so is equal to the bandwidth of the message signal; that is, 
By= W 
The power in the SSB signal is given by 
(3.2.24) 
(3.2.25) 
Note that the power is half of the power in the corresponding DSB-AM signal because 
one of the sidebands has been removed. On the other hand, because the modulated 
signal has half the bandwidth of the corresponding DSB-AM signal, the noise power at 
the front end of the receiver is also half of a comparable DSB-AM signal, and therefore 
the SNR in both systems is the same; that is, 
Illustrative Problem 3.4 [Single-Sideband Example] The message signal 
{1, 
m(t) = 
-2, 
0, 
0  t <  
!g_ < t < 2to 
3 
-
3 
otherwise 
(3.2.26) 
modulates the carrier c(t) = cos(2rrfct) using an LSSB-AM scheme. It is assumed 
that to= 0.15 s and Jc = 250 Hz. 
1. Plot the Hilbert transform of the message signal and the modulated signal u ( t) . 
Also plot the spectrum of the modulated signal. 
2. Assuming the message signal is periodic with period to, determine the power in 
the modulated signal. 
3. If a noise is added to the modulated signal such that the SNR after demodulation 
is 10 dB, determine the power in the noise. 
1. The Hilbert transform of the message signal can be computed using the Hilbert 
transform m-file of MATLAB; that is, hilbert.m. It should be noted, however, 
that this function returns a complex sequence whose real part is the original 
signal and whose imaginary part is the desired Hilbert transform. 
Therefore, 
the Hilbert transform of the sequence m is obtained by using the command 
irnag(hilbert(m)). Now, using the relation 
u(t) = m(t) cos(2rrfct) + m(t) sin(2rrfc0 
(3.2.27) 
we can find the modulated signal. Plots of m ( t) and the spectrum of the LSSB­
AM modulated signal u ( t) are shown in Figure 3 .8. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.2. AMPLITUDE MODULATION (AM) 
4 
3 
2 
0 
-1 
-2 
-3 
0.01 
103 
-4 1----2---4 
0 
0.02 
0.04 
0.06 
0.08 
0.1 
0.12 
0.14 
Time 
ol__1_1_.J.l1Jl.V.l!JIJ/!lWlllMil.l'.l'Jl.lillL.1_ 
-500 -400 -300 -200 -100 
0 
100 200 300 400 500 
Frequency 
Figure 3 .8: Hilbert transform and the spectrum of the LSSB-AM modulated signal for 
m(t) 
2. The power in the message signal is 
1 
f0.15 
Pm= O.lS Jo 
m2(t) dt = 1.667 
and therefore 
A2 
Pu = -f Pm = 0.416 
3. The post-demodulation SNR is given by 
10log10 (:;:) 
0 
10 
Hence, Pn = 0.lPR = 0.lPu = 0.0416. 
The MATLAB script for this problem follows. 
___ ,, ... ·---------------
% MATLAB script for Illustrative Problem 3.4. 
% Demonstration script for LSSB-AM modulation. The message signal 
% is +1 for 0 < t < t0/3, -2 for t0/3 < t < 2t0!3, and zero otherwise. 
echo on 
t0=.15; 
ts=0.001; 
fc=250; 
snr=10; 
fs=1 /ts; 
df=0.25; 
t=[O:ts:tO]; 
snLlin= 1 0  ( snr/1 0); 
% signal duration 
% sampling interval 
% carrier frequency 
% SNR in dB (logarithmic) 
% sampling frequency 
% desired freq. resolution 
% time vector 
% SNR 
% the message vector 
m=[ones(1,t0/(3*ts)),-2*ones(1,t0/(3*ts)),zeros(1,t0/(3*ts)+ 1 )] ; 
c=cos(2*pi*fc.*t); 
% carrier vector 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

104 
CHAPTER 3. ANALOG MODULATION 
udsb=m.*e; 
% DSB modulated signal 
[UDSB,udssb,dfl]=fftseq(udsb,ts,df); 
% Fourier transform 
UDSB=UDSB/fs; 
% scaling 
f=[O:dfl:dfl*(length(udssb)-1)]-fs/2; 
% frequency vector 
n2=eeil(fc/dfl); 
% location of carrier in freq. vector 
% Remove the upper sideband from DSB. 
UDSB(n2:length(UDSB)-n2)=zeros(size(UDSB(n2:length(UDSB)-n2))); 
ULSSB=UDSB; 
% Generate LSSB-AM spectrum. 
(M,m,dfl]=fftseq(m,ts,df); 
% Fourier transform 
M=Mlfs; 
% scaling 
u=real(ifft(ULSSB))*fs; 
% Generate LSSB signal from spectrum. 
signal_power=spower(udsb(1 :length(t)))/2; 
% 
% Compute signal power. 
noise_power=signal_power/snr_lin; 
% Compute noise power. 
noise_std=sqrt(noise_power); 
% Compute noise standard deviation. 
noise=noise_std*randn(1,length(u)); 
% Generate noise vector. 
r=u+noise; 
% Add the signal to noise. 
(R,r,dfl]=fftseq(r,ts,df); 
% Fourier transform 
R=Rlfs; 
% scaling 
pause 
% Press a key to show the modulated signal power. 
signaL power 
pause 
% Press any key to see a plot of the message signal. 
elf 
subplot(2, 1, 1) 
plot(t,m(1 :length(t))) 
axis([0,0.15,-2.1,2.1]) 
xlabel( ' Time ' ) 
title(' The message signal' ) 
pause 
% Press any key to see a plot of the carrier. 
subplot(2, 1 ,2) 
plot(t,e(1 :length(t))) 
xlabel( ' Time ' ) 
title(' The carrier' ) 
pause 
% Press any key to see a plot of the modulated signal and its spectrum. 
elf 
subplot(2, 1 , 1) 
plot([O:ts:ts*(length(u)-1 )/8],u(1 :length(u)/8)) 
xlabel( ' Time ' ) 
title(' The LSSB-AM modulated signal' ) 
subplot(2, 1,2) 
plot(f, abs(fftshift(ULSSB))) 
xlabel(' Frequency' ) 
title(' Spectrum of the LS SB-AM modulated signal') 
pause 
% Press any key to see the spectra of the message and the modulated signals. 
elf 
subplot(2, 1 , 1) 
plot(f,abs(fftshift(M))) 
xlabel(' Frequency' ) 
title(' Spectrum of the message signal' ) 
subplot(2, 1,2) 
plot(f,abs(fftshift(ULSSB))) 
xlabel(' Frequency' ) 
title(' Spectrum of the LS SB-AM modulated signal' ) 
pause 
% Press any key to see a noise sample. 
subplot(2, 1 , 1) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.3. DEMODULATION OF AM SIGNALS 
plot(t,noise(1 :length(t))) 
title('Noise sample' ) 
xlabel( ' Time ' ) 
pause 
% Press a key to see the modulated signal and noise. 
subplot(2, 1,2) 
plot(t,r(1 :length(t))) 
title(' Modulated signal and noise' ) 
xlabel( ' Time ' ) 
subplot(2, 1, 1) 
pause % Press any key to see the spectrum of the modulated signal. 
plot(f,abs(fftshift(ULSSB))) 
title(' Modulated signal spectrum' ) 
xlabel(' Frequency' ) 
subplot(2, 1,2) 
pause 
% Press a key to see the modulated signal noise in freq. domain. 
plot(f,abs(fftshift(R))) 
title(' Modulated signal noise spectrum' ) 
xlabel(' Frequency' ) 
105 
The m-files ussb_mod.m and lssb_mod.m given next modulate the message signal 
given in vector m using USSB and LSSB modulation schemes. 
___ ,., .. ·--------------
function u=ussb_mod(m,ts,fc) 
% 
u=ussb_mod(m,tsfc) 
%USB..MOD 
takes signal m sampled at ts and carrier 
% 
freq. Jc as input and returns the USSR modulated 
% 
signal. ts < < 112/c. 
t=[O:length(m)-1 ]*ts; 
u=m. * cos(2*pi*t)-imag(hilbert(m)). * sin(2*pi*t); 
___ ,,, .. ·--------------
function u=lssb_mod(m,ts,fc) 
% 
u=lssb_mod(m,tsfc) 
%LSSB..MOD 
takes signal m sampled at ts and carrier 
% 
freq. Jc as input and returns the LSSB modulated 
% 
signal. ts << 112/c. 
t=[O:length(m)-1 ]*ts; 
u=m. *cos(2*pi*t)+imag(hilbert(m) ). *sin(2*pi*t); 
3.3 
Demodulation of AM Signals 
Demodulation is the process of extracting the message signal from the modulated sig­
nal. The demodulation process depends on the type of modulation employed. For 
DSB-AM and SSB-AM, the demodulation method is coherent demodulation, which 
requires the existence of a signal with the same frequency and phase of the carrier at 
the receiver. For conventional AM, envelope detectors are used for demodulation. In 
this case precise knowledge of the frequency and the phase of the carrier at the receiver 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

106 
CHAPTER 3. ANALOG MODULATION 
is not crucial, so the demodulation process is much easier. Coherent demodulation for 
DSB-AM and SSB-AM consists of multiplying (mixing) the modulated signal by a si­
nusoidal with the same frequency and phase of the carrier and then passing the product 
through a lowpass filter. The oscillator that generates the required sinusoidal at the 
receiver is called the local oscillator. 
3.3.1 
DSB-AM Demodulation 
In the DSB case the modulated signal is given by Acm(t) cos(2rrfct), which, when 
multiplied by cos(2rrfc0, (or mixed with cos(2rrfc0) results in 
Ac 
Ac 
y(t) = Acm(t) cos(2rrfc0 cos(2rrfct) = z-m(t) + z-m(t) cos(4rrfct) 
(3.3. 1) 
where y(t) denotes the mixer output, and its Fourier transform is given by 
Y(j) = c M(j) + c M(j - 2fc) + c M(j + 2fc) 
(3.3.2) 
As it can be seen, the mixer output has a lowpass component of AcM(f) /2 and high­
frequency components in the neighborhood of ± 2j c . When y ( t) passes through a 
lowpass filter with bandwidth W, the high-frequency components will be filtered out 
and the lowpass component, Acm(t)/2, which is proportional to the message signal, 
will be demodulated. This process is shown in Figure 3 .9. 
U{l) 
rns(2rr JC· t) 
* 
r:,1 y(t) 
,..\_D 
,.. 
Lowpass Filter 
,.. · , m(L) 
Figure 3.9: Demodulation of DSB-AM signals 
Illustrative Problem 3.5 [DSB-AM Demodulation] The message signal m(t) is de-
fined as 
{l, 
m(t) = 
-2, 
0, 
0::; t <  
!Q < t < 2to 
3 
-
3 
otherwise 
This message DSB-AM modulates the carrier c (t) 
= cos 2rr fc t, and the resulting 
modulated signal is denoted by u ( t) . It is assumed that to = 0 .15 s and fc = 2 5 0 Hz. 
1. Obtain the expression for u ( t) . 
2. Derive the spectra of m(t) and u(t). 
3. Demodulate the modulated signal u(t) and recover m(t). Plot the results in the 
time and frequency domains. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.3. DEMODULATION OF AM SIGNALS 
107 
1.-2. The first two parts of this problem are the same as the first two parts of Illustrative 
Problem 3.1, and we repeat only those results here: 
u(t) = [ I1 ( t -0025) - 2I1 ( t -0075) J cos(500rrt) 
and 
to 
· ft 13 . ( tof) 
2to 
· ft 
. ( tof) 
$[m(t)] 
= 3e-J7r 
0 
smc 3 
- 3e-Jrr 
0 smc 3 
= t; e-Jrrfto/3 sine C°f) ( 1 - 2e-j2rrtof /3) 
= 0.05e-o.o5Jrrf sinc(0.05j) ( 1 - 2e-O.Oljrrf) 
Therefore, 
U(j) = 0.025e-0·05Jrr(f-25oJ sinc(0.05 (j - 250)) ( 1 - 2e-O.ljrr(f-25oJ) 
+ 0.025e-0·05Jrr(f+250> sinc(0.05(j + 250)) ( 1 - 2e-O.ljrr(f+250>) 
3. To demodulate, we multiply u(t) by cos(2rrfct) to obtain the mixer output 
y(t): 
y (t) = u(t) cos(2rr Jct) 
= [ I1 ( t -0025) - 2I1 ( t -0075) J cos2(500rrt) 
= .!. [n ( t - 0.025) 
_ 20 ( t - o.075) J 
2 
0.05 
0.05 
+  [II ( t -0025) - 2II ( t -0075) J cos(lOOOrrt) 
whose Fourier transform is given by 
Y(j) = 0.025e-0·05Jrrf sinc(0.05f) ( 1 - 2e-O.Oljrrf) 
+ 0.0125e-0·05Jrr(f-500) sine (0.05(j - 500)) ( 1 - 2e-O.ljrr(f-500)) 
+ 0.0125e-0·05Jrr(f+SOO) sine (0.05(j + 500)) (1 - 2e-O.ljrr(f+SOO)) 
where the first term corresponds to the message signal and the last two terms cor­
respond to the high-frequency terms at twice the carrier frequency. We see that 
filtering the first term yields the original message signal (up to a proportionality 
constant). A plot of the magnitudes of U(j) and Y(j) is shown in Figure 3.10. 
As shown, the spectrum of the mixer output has a lowpass component that is quite 
similar to the spectrum of the message signal, except for a factor of ! , and a bandpass 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

108 
CHAPTER 3. ANALOG MODULATION 
The demodulator output 
1.5 #----$---% 
0.05 
0.5 
0.04 
0 
0.03 
-0.5 
-1 
0.02 
-1.5 
0.01 
-2 
0 
-2.5 .___..___.._ _ _.__ _ _,_ _ _._ _ _._ _ _.__. 
-800 
-600 
-400 
-200 
0 
200 
400 
600 
800 
0 
0.02 
0.04 
0.06 
0.08 
0.1 
0.12 
0.14 
Frequency 
Time 
Figure 3.10: 
Spectra of the modulated signal and the mixer output in Illustrative 
Problem 3.5 
0.12 
0.12 
0.1 
0.1 
0.08 
0.08 
0.06 
0.06 
0.04 
0.04 
0.02 
0.02 
0 
0 ,___. _ 
_.. 
_ __._ .... 
-500-400-300-200-100 0 
100 200 300 400 500 
-800 
-600 
-400 
-200 
0 
200 
400 
600 
800 
Frequency 
Frequency (Hz) 
Figure 3 .11: 
Spectra of the message and the demodulated signals m Illustrative 
Problem 3.5 
component located at ±2fc (in this case, 500 Hz). Using a lowpass filter, we can sim­
ply separate the lowpass component from the bandpass component. In order to recover 
the message signal m(t), we pass y(t) through a lowpass filter with a bandwidth of 
150 Hz. The choice of the bandwidth of the filter is more or less arbitrary here be­
cause the message signal is not strictly bandlimited. For a strictly bandlimited message 
signal, the appropriate choice for the bandwidth of the lowpass filter would be W, the 
bandwidth of the message signal. Therefore, the ideal lowpass filter employed here has 
a characteristic 
H(j) 
= {
1, 
0, 
Iii% 150 
otherwise 
A comparison of the spectra of m(t) and the demodulator output is shown in Figure 
3 .11, and a comparison in the time domain is shown in Figure 3 .12. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.3. DEMODULATION OF AM SIGNALS 
109 
The demodulator output 
2 
1.5 
0.5 
0 
0.5 
0 
-0.5 
-0.5 
-1 
-1 
-1.5 
-1.5 
-2 
I 
I 
I 
I 
-2 
-2.5 ------- 
0 
0.02 
0.04 
0.06 
0.08 
0.1 
0.12 
0.14 
0 
0.02 
0.04 
0.06 
0.08 
0.1 
0.12 
0.14 
Tune 
Time 
Figure 3.12: Message and demodulator output in Illustrative Problem 3.5. 
The MATLAB script for this problem follows. 
__.,, .. ·---------------
% MATLAB script for Illustrative Problem 3 .5. 
% Demonstration script for DSB-AM demodulation. The message signal 
% is +l for 0 < t < t0/3, -2 for t0/3 < t < 2t0!3, and zero otherwise. 
echo on 
t0=.15; 
ts=1/1500; 
fc=250; 
fs=1 /ts; 
t=[O:ts:tO]; 
df=0.3; 
% message signal 
% signal duration 
% sampling interval 
% carrier frequency 
% sampling frequency 
% time vector 
% desired frequency resolution 
m=[ones(1,t0/(3*ts)), -2*ones(1,t0/(3*ts)),zeros(1,t0/(3*ts)+ 1 )]; 
c=cos(2*pi*fc. *t); 
u=m.*c; 
y=u.*c; 
[M,m,dfl]=fftseq(m,ts,df); 
M=M/fs; 
[U,u,dfl]=fftseq(u,ts,df); 
U=U/fs; 
[Y,y,dfl]=fftseq(y,ts,df); 
Y=Y/fs; 
Lcutoff=150; 
n_cutoff=floor( 150/dfl); 
f=[O:dfl:dfl *(length(y)-1 )]-fs/2; 
H=zeros(size(f}); 
% carrier signal 
% modulated signal 
% mixing 
% Fourier transform 
% scaling 
% Fourier transform 
% scaling 
% Fourier transform 
% scaling 
% cutoff freq. of the filter 
% Design the filter. 
H(1 :n_cutoff)=2*ones(1,n_cutoff); 
H(length(f}-n_cutoff+ 1 :length(f))=2*ones(1,n_cutoff); 
DEM=H.*Y; 
% spectrum of the filter output 
dem=real(ifft(DEM))*fs; 
% filter output 
pause % Press a key to see the effect of mixing. 
elf 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

110 
subplot(3, 1 , 1) 
plot(f,fftshift( abs(M))) 
title(' Spectrum of the Message Signal') 
xlabel(' Frequency' ) 
subplot(3, 1 ,2) 
plot(f,fftshift( abs(U))) 
CHAPTER 3. ANALOG MODULATION 
title(' Spectrum of the Modulated Signal') 
xlabel(' Frequency') 
subplot(3, 1 ,3) 
plot(f,fftshift( abs(Y))) 
title(' Spectrum of the Mixer Output') 
xlabel(' Frequency' ) 
pause % Press a key to see the effect of filtering on the mixer output. 
elf 
subplot(3, 1 , 1) 
plot(f,fftshift( abs(Y))) 
title(' Spectrum of the Mixer Output') 
xlabel(' Frequency') 
subplot(3, 1,2) 
plot(f,fftshift(abs(H))) 
title('Lowpass Filter Characteristics') 
xlabel(' Frequency') 
subplot(3, 1 ,3) 
plot(f,fftshift(abs(DEM))) 
title(' Spectrum of the Demodulator output') 
xlabel(' Frequency' ) 
pause % Press a key to compare the spectra of the message and the received signal. 
elf 
subplot(2, 1 , 1) 
plot(f,fftshift( abs(M))) 
title(' Spectrum of the Message Signal') 
xlabel(' Frequency' ) 
subplot(2, 1 ,2) 
plot(f,fftshift( abs(DEM))) 
title(' Spectrum of the Demodulator Output') 
xlabel(' Frequency') 
pause % Press a key to see the message and the demodulator output signals. 
subplot(2, 1 , 1) 
plot(t,m( 1 :length(t))) 
title(' The Message Signal') 
xlabel(' Time') 
subplot(2, 1 ,2) 
plot(t,dem(1 :length(t))) 
title(' The Demodulator Output') 
xlabel(' Time ' ) 
Illustrative Problem 3.6 [Effect of Phase Error on DSB-AM Demodulation] In the 
demodulation of DSB-AM signals we assumed that the phase of the local oscillator is 
equal to the phase of the carrier. If that is not the case-that is, if there exists a phase 
shift cp between the local oscillator and the carrier-how would the demodulation pro­
cess change? 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.3. DEMODULATION OF AM SIGNALS 
111 
In this case we have u(t) = Acm(t) cos(2TTfct), and the local oscillator generates a 
sinusoidal signal given by cos(2TTfct +</>).Mixing these two signals gives 
y(t) = Acm(t) cos(2TTfct) x cos(2TTfct +cf>) 
A 
A 
= --fm(t) cos( cf>)+ -fm(t) cos(4TTfct +cf>) 
(3.3.3) 
(3.3.4) 
As before, there are two terms present in the mixer output. The bandpass term can be 
filtered out by a lowpass filter. The lowpass term, Acm(t) cos(cp)/2, depends on cf>, 
however. The power in the lowpass term is given by 
A 
2 
Paem 
= 4 Pm COS cf> 
(3.3.5) 
where Pm denotes the power in the message signal. We can see, therefore, that in 
this case we can recover the message signal with essentially no distortion, but we will 
suffer a power loss of cos 2 cf>. For cf> = TT/ 4 this power loss is 3 dB, and for cf> = TT/ 2 
nothing is recovered in the demodulation process. 
3.3.2 
SSB-AM Demodulation 
The demodulation process of SSB-AM signals is basically the same as the demodula­
tion process for DSB-AM signals-that is, mixing followed by lowpass filtering. In 
this case 
u(t) = cm(t)cos(2TTfct) + cm(t)sin(2rrfct) 
(3.3.6) 
where the minus sign corresponds to the USSB and the plus sign corresponds to the 
LSSB. Mixing u ( t) with the local oscillator output, we obtain 
y(t) = c m(t) cos2 (2TTfct) + c m(t) sin(2TT Jct) cos(2TTfct) 
= c m(t) + c m(t) cos(4TTfct) + c m(t) sin(4rrfct) 
(3.3.7) 
which contains bandpass components at ± 2fc and a lowpass component proportional 
to the message signal. The lowpass component can be filtered out using a lowpass 
filter to recover the message signal. This process for the USSB-AM case is depicted in 
Figure 3.13. 
Illustrative Problem 3.7 [LSSB-AM Example] In a USSB-AM modulation system, 
if the message signal is 
11, 
m(t) = 
-2, 
0, 
0 
 t <  
.!l. < t < 2to 
3 
-
3 
otherwise 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

112 
CHAPTER 3. ANALOG MODULATION 
U(J) 
-------t-	-- .r 
fc 
fc: + W 
Y{j') 
--- [ 
-W 
W 
2f<-· 
2f<-· + W 
Figure 3.13: Demodulation ofUSSB-AM signals 
with to 
= 0.15 s, and the carrier has a frequency of 250 Hz, find U(j) and Y(j) and 
compare the demodulated signal with the message signal. 
The modulated signal and its spectrum are given in Illustrative Problem 3.4. The ex­
pression for U(j) is given by 
0.025e-o.osjrr(f-zso) sinc(0.05(j- 250)) (1- 2rO.ljrr(f-zso)) 
U(j) 
= 
+ 0.025e-o.osjrr(f+zso) sinc(0.05(j + 250)) ( 1 - 2rO.ljrr(f+zso)) , 
If I ::; fc 
0, 
otherwise 
and 
1 
1 
Y(j) 
= 2.U(j - fc) + 2.U(j + fc) 
 
0.0125e-O.OSjrrf sinc(0.05j) ( 1 - 2e-O.Oljrrf) , 
lfl ::; fc 
0.0125e-o.osjrr(f-soo) sinc(O.OS(j - 500)) ( l - 2e-O.Oljrr(f-soo)) , 
fc ::; f ::; 2fc 
0.0125e-O.OSjrr(f+SOO) sinc(0.05(j + 500)) (1- 2e-O.Oljrr(f+SOO)) , 
- 2fc ::; f ::; -fc 
0, 
otherwise 
A plot of Y(j) is shown in Figure 3.14. The signal y(t) is filtered by a lowpass 
filter with a cutoff frequency of 150 Hz; the spectrum of the output is shown in 
Figure 3.15. In Figure 3.16 the original message signal is compared with the demodu­
lated signal. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.3. DEMODULATION OF AM SIGNALS 
0.025 
0.02 
0.015 
0.01 
0.005 
-600 
-400 
-200 
0 
Frequency 
113 
200 
400 
600 
800 
Figure 3 .14: Magnitude spectrum of the mixer output in Illustrative Problem 3 .7 
0.1 
0.08 
0.06 
0.04 
0.02 
o!"#$%&'()*+,-./01 
-800 
-600 
-400 
-200 
0 
Frequency 
200 
400 
600 
Figure 3.15: The demodulator output in Illustrative Problem 3.7 
800 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

114 
CHAPTER 3. ANALOG MODULATION 
2 ,.. 
' 
' 
I 
1.5 ! 
0.5 ! 
0 ! 
--0.5 ,.. 
-1 ! 
-1.5 ! 
' 
' 
' 
I 
-
-
-
-
-
-
-
0.5 
0 
-0.5 
-1 
-1.5 
-2 
,.. 
I 
' 
I 
I 
-
-2 
-2.5 ._ 
_ _._ 
_ _,_ 
_ __. 
__ .._ 
_ _._ 
_ _._ 
_ __._, 
0 
0.02 
0.04 
0.06 
0.08 
0.1 
0.12 
0.14 
0 
0.02 
0.04 
0.06 
0.08 
0.1 
0.12 
0.14 
Time 
Time 
Figure 3.16: The message signal and the demodulator output in Illustrative Problem 
3.7 
The MATLAB script for this problem follows. 
__., .... ·---------------
% MATLAB script for Illustrative Problem 3.7. 
% Demonstration script for LSSB-AM demodulation. The message signal 
% is +1 for 0 < t < t0/3, -2 for t0/3 < t < 2t0!3, and zero otherwise. 
echo on 
t0=.15; 
ts=1/1500; 
fc=250; 
fs=1/ts; 
df=0.25; 
t=[O:ts:tO]; 
% signal duration 
% sampling interval 
% carrier frequency 
% sampling frequency 
% desired freq.resolution 
% time vector 
% the message vector 
m=[ones(1,t0/(3*ts)),-2*ones(1,t0/(3*ts)),zeros(1,t0/(3*ts)+ 1 )]; 
c=cos(2*pi*fc. *t); 
udsb=m.*c; 
[UDSB,udsb,dfl]=fftseq(udsb,ts,df); 
UDSB=UDSB/fs; 
n2=ceil(fc/dfl); 
% carrier vector 
% DSB modulated signal 
% Fourier transform 
% scaling 
% location of carrier in freq. vector 
% Remove the upper sideband from DSB. 
UDSB(n2:length(UDSB)-n2)=zeros(size(UDSB(n2:length(UDSB)-n2))); 
ULSSB=UDSB; 
% Generate LSSB-AM spectrum. 
[M,m,dfl]=fftseq(m,ts,df); 
% spectrum of the message signal 
M=Mffs; 
% scaling 
f=[O :dfl :dfl * (length(M)-1 ) ]-fs/2; 
% frequency vector 
u=real(ift(ULSSB))*fs; 
% Generate LSSB signal from spectrum. 
% mixing 
y=u. *cos(2*pi*fc*[O:ts:ts*(length(u)-1 )]); 
[Y,y,dfl]=fftseq(y,ts,df); 
Y=Y/fs; 
Lcutoff=150; 
n_cutoff=fioor(150/df); 
% spectrum of the output of the mixer 
% scaling 
% Choose the cutoff freq. of the filter. 
% Design the filter. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.3. DEMODULATION OF AM SIGNALS 
H=zeros( size(f)); 
H(1 :n_eutoff)=4*ones(1,n_eutoff); 
% spectrum of the filter output 
H(length(f)-n_eutoff+ 1 :length(f})=4*ones(1,n_eutoff); 
DEM=H.*Y; 
% spectrum of the filter output 
dem=real(ifft(DEM))*fs; 
% filter output 
pause % Press a key to see the effect of mixing. 
elf 
subplot(3, 1 , 1) 
plot(f,fftshift( abs(M))) 
title(' Spectrum of the Message Signal') 
xlabel(' Frequency') 
subplot(3, 1,2) 
plot(f,fftshift( abs(ULSSB))) 
title(' Spectrum of the Modulated Signal') 
xlabel(' Frequency') 
subplot(3, 1,3) 
plot(f,fftshift( abs(Y))) 
title(' Spectrum of the Mixer Output') 
xlabel(' Frequency') 
pause % Press a key to see the effect of filtering on the mixer output. 
elf 
subplot(3, 1 , 1) 
plot(f,fftshift( abs(Y))) 
title(' Spectrum of the Mixer Output') 
xlabel(' Frequency') 
subplot(3, 1,2) 
plot(f,fftshift( abs(H))) 
title('Lowpass Filter Characteristics') 
xlabel(' Frequency') 
subplot(3, 1 ,3) 
plot(f,fftshift(abs(DEM))) 
title(' Spectrum of the Demodulator output') 
xlabel(' Frequency') 
pause % Press a key to see the message and the demodulator output signals. 
subplot(2, 1, 1) 
plot(t,m(1 :length(t))) 
title(' The Message Signal') 
xlabel( ' Time ' ) 
subplot(2, 1,2) 
plot(t,dem(1 :length(t))) 
title(' The Demodulator Output') 
xlabel( ' Time ' ) 
115 
Illustrative Problem 3.8 [Effect of Phase Error on SSB-AM] What is the effect of 
phase error on SSB-AM? 
Assuming that the local oscillator generates a sinusoidal with a phase offset of cf> with 
respect to the carrier, we have 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

116 
CHAPTER 3. ANALOG MODULATION 
y(t) = u(t) cos(2rrfct +cf>) 
= [ c m(t) cos(2rrfc0 + c m(t) sin(2rrfc0 J cos(2rrfct +cf>) 
= cm ( t) cos cf> ± c m ( t) sin cf> + high-frequency terms 
(3 .3 .8) 
As seen, unlike the DSB-AM case, the effect of the phase offset here is not simply 
attenuating the demodulated signal. Here the demodulated signal is attenuated by a 
factor of cos cf> as well as distorted by addition of the ±Acm( t) sin( cf>)/ 4 term. In 
the special case of cf> = TT/ 2, the Hilbert transform of the signal will be demodulated 
instead of the signal itself. 
3.3.3 
Conventional AM Demodulation 
We have already seen that conventional AM is inferior to DSB-AM and SSB-AM when 
power and SNR are considered. The reason is that a usually large part of the modulated 
signal power is in the carrier component that does not carry information. The role of 
the carrier component is to make the demodulation of the conventional AM easier via 
envelope detection, as opposed to coherent demodulation required for DSB-AM and 
SSB-AM. Therefore, demodulation of AM signals is significantly less complex than 
the demodulation of DSB-AM and SSB-AM signals. Hence, this modulation scheme is 
widely used in broadcasting, where there is a single transmitter and numerous receivers 
whose cost should be kept low. In envelope detection the envelope of the modulated 
signal is detected via a simple circuit consisting of a diode, a resistor, and a capacitor, 
as shown in Figure 3 .17. 
Figure 3 .17: A simple envelope detector 
Mathematically, the envelope detector generates the envelope of the conventional 
AM signal, which is 
V(t) = 11 + amn(t) I 
(3.3.9) 
Because 1 + mn ( t)  0, we conclude that 
V(t) = 1 + amn(t) 
(3.3.10) 
where mn (t) is proportional to the message signal m(t) and 1 corresponds to the car­
rier component that can be separated by a de block circuit. As seen in the preceding 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.3. DEMODULATION OF AM SIGNALS 
117 
procedure, there is no need for knowledge of cf>, the phase of the carrier signal. That 
is why such a demodulation scheme is called noncoherent, or asynchronous, demodu­
lation. Recall from Chapter 1 that the envelope of a bandpass signal can be expressed 
as the magnitude of its lowpass equivalent signal. Thus, if u(t) is the bandpass signal 
with central frequency fc and the lowpass equivalent to u(t) is denoted by ui(t), then 
the envelope of u ( t) , denoted by V ( t), can be expressed as 
V (t) = Ufr (t) + Ufi (t) 
= u2(t) + u!(t) 
(3.3.11) 
where uc(t) and u5(t) represent the in-phase and the quadrature components of the 
bandpass signal u(t). Therefore, in order to obtain the envelope, it is enough to obtain 
the lowpass equivalent of the bandpass signal. The envelope is simply the magnitude 
of the lowpass equivalent of the bandpass signal. 
Illustrative Problem 3.9 [Envelope Detection] The message signal 
1
1, 
m(t) = 
-2, 
0, 
05,t<" 
!i.< t <  
3 
-
3 
otherwise 
modulates the carrier c ( t) = cos ( 2 TT fc t) using a conventional AM-modulation scheme. 
It is assumed thatfc = 250 Hz and to= 0.15 s, and the modulation index is a= 0.85. 
1. Using envelope detection, demodulate the message signal. 
2. If the message signal is periodic with a period equal to to and if an Additive 
White Gaussian Noise (AWGN) process is added to the modulated signal such 
that the power in the noise process is one-hundredth the power in the modulated 
signal, use an envelope demodulator to demodulate the received signal. Compare 
this case with the case where there is no noise present. 
1. As in Illustrative Problem 3.3, we have 
u(t) = [ 1 + 0.85 m	t) J cos(2rrfct) 
= [ 1 + 0.425II ( t -025) - 0.85II ( t -075) J cos(500rrt) 
If an envelope detector is used to demodulate the signal and the carrier com­
ponent is removed by a de block, then the original message m(t) is recov­
ered. Note that a crucial point in the recovery of m(t) is that for all values 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

118 
CHAPTER 3. ANALOG MODULATION 
oft, the expression 1 + amn(t) is positive; therefore, the envelope of the sig­
nal [l + amn(t)]cos(2rrfct), which is V(t) 
= 11 + amn(t)I, is equal to 
1 + amn(t), from which m(t) can be recovered easily. Plots of the conven­
tional AM-modulated signal and its envelope as detected by the envelope detec­
tor are shown in Figure 3 .18. 
1.5 f-
-
0.5 
0 
-0.5 
-1 
-1.5  
-2 f-
0 
1.5  
0.5 f-
0 f-
--0.5  
-1 f-
-1.5  
I 
I 
I 
I 
I 
0.02 
0.04 
0.06 
0.08 
0.1 
Time 
I 
0.12 
0.8 
0.6 
0.4 
0.2 
I 
-
0 ------- 
0.14 
0 
0.02 
0.04 
0.06 
0.08 
Time 
0.1 
0.12 
0.14 
Figure 3.18: Conventional AM-modulated signal and its envelope 
- 0.5 
-
0 
r----t-0.5 
-
-1 
- -1.5 
-
-2 
-2 t.'" __ J_1
_.1_1
..'.=:z==:t==:L_.J. 1 _ _11__j- -2.5 '--'--'--'--'--'--'---'-' 
0 
0.02 
0.04 
0.06 
0.08 
0.1 
0.12 
0.14 
0 
Time 
0.02 
0.04 
0.06 
0.08 
Time 
0.1 
0.12 
0.14 
Figure 3.19: The message signal and the demodulated signal when no noise is present 
After the envelope detector separates the envelope of the modulated signal, the 
de component of the signal is removed and the signal is scaled to generate the 
demodulator output. Plots of the original message signal and the demodulator 
output are shown in Figure 3 .19. 
2. When noise is present, there will also be some distortion due to the noise. In 
Figure 3.20 the received signal and its envelope are shown. In Figure 3.21 the 
message signal and the demodulated signal are compared for this case. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.3. DEMODULATION OF AM SIGNALS 
119 
2 --,--,-,--,-,--,-, 1.8 --.--.--.--.--.--r-.-. 
1.5 
0.5 
0 
-0.5 
-1 
1.6 
1.4 
1.2 
0.8 
0.6 
0.4 
0.2 
-1.5 '---'--'" ,,--'---'-' '-'
---'-' -- '-'
---'-' --'-'
---'-'-' 
O '------- 
0 
0.02 
0.04 
0.06 
0.08 
0.1 
0.12 
0.14 
0 
0.02 
Tune 
0.04 
0.06 
0.08 
Time 
0.1 
0.12 
0.14 
Figure 3 .20: The received signal and its envelope in the presence of noise 
2 -
I 
1.5 
1.5 
0.5 
0.5 
0 
0 
-0.5 
-0.5 
-
-1 
-1 
-1.5 
-1.5 
-2 
-2 
-2.5 
0 
0.02 
0.04 
0.06 
0.08 
0.1 
0.12 
0.14 
0 
0.02 
0.04 
0.06 
0.08 
0.1 
0.12 
0.14 
Time 
Time 
Figure 3 .21: The message signal and the demodulated signal in the presence of noise 
The MATLAB script for this problem follows. 
____., ... ·---------------
% MATLAB script for Illustrative Problem 3 .9. 
% Demonstration script for envelope detection. The message signal 
% is +1 for 0 < t < t0/3, -2 for t0/3 < t < 2t0!3, and zero otherwise. 
echo on 
t0=.15; 
ts=0.001; 
fc=250; 
a=0.85; 
fs=1 /ts; 
t=[O:ts:tO]; 
df=0.25; 
% signal duration 
% sampling interval 
% carrier frequency 
% modulation index 
% sampling frequency 
% time vector 
% required frequency resolution 
% message signal 
m=[ones(1,t0/(3*ts)),-2*ones(1,t0/(3*ts)),zeros(1,t0/(3*ts)+ 1 )] ; 
c=cos(2*pi*fc.*t); 
% carrier signal 
m_n=m/max(abs(m)); 
% normalized message signal 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

120 
[M,m,dfl]=fftseq(m,ts,df); 
f=[O:dfl :dfl *(length(m)-1 )]-fs/2; 
u=(1 +a*m_n).*e; 
[U,u,dfl]=fftseq(u,ts,df); 
env=env_phas(u); 
dem1=2*(env-1 )/a; 
signaLpower=spower(u(1 :length(t))); 
noise_ power=signaL power/1 00; 
noise_std=sqrt(noise_ power); 
noise=noise_std*randn(1,length(u)); 
r=u+noise; 
[R,r,dfl]=fftseq(r,ts,df); 
env _r=env _ phas(r); 
dem2=2*(env _r-1 )/a; 
CHAPTER 3. ANALOG MODULATION 
% Fourier transform 
% frequency vector 
% modulated signal 
% Fourier transform 
% Find the envelope. 
% Remove de and rescale. 
% power in modulated signal 
% noise power 
% noise standard deviation 
% Generate noise. 
% Add noise to the modulated signal. 
% Fourier transform 
% envelope, when noise is present 
% Demodulate in the presence of noise. 
pause 
% Press any key to see a plot of the message. 
subplot(2, 1 , 1) 
plot(t,m(1 :length(t))) 
axis([O 0.15 -2.1 2.1]) 
xlabel(' Time' ) 
title('The message signal' ) 
pause 
% Press any key to see a plot of the modulated signal. 
subplot(2, 1,2) 
plot(t,u(1 :length(t))) 
axis([O 0.15 -2.1 2.1]) 
xlabel( ' Time ' ) 
title(' The modulated signal' ) 
pause 
% Press a key to see the envelope of the modulated signal. 
elf 
subplot(2, 1, 1) 
plot(t,u(1 :length(t))) 
axis([O 0.15 -2.1 2.1]) 
xlabel( ' Time ' ) 
title(' The modulated signal' ) 
subplot(2, 1,2) 
plot(t,env(1 :length(t))) 
xlabel( ' Time ' ) 
title(' Envelope of the modulated signal' ) 
pause 
% Press a key to compare the message and the demodulated signal. 
elf 
subplot(2, 1, 1) 
plot( t,m( 1 :length( t))) 
axis([O 0.15 -2.1 2.1]) 
xlabel( ' Time ' ) 
title(' The message signal' ) 
subplot(2, 1,2) 
plot(t,dem1(1 :length(t))) 
xlabel( ' Time ' ) 
title(' The demodulated signal' ) 
pause 
% Press a key to compare in the presence of noise. 
elf 
subplot(2, 1, 1) 
plot(t,m(1 :length(t))) 
axis([O 0.15 -2.1 2.1]) 
xlabel( ' Time ' ) 
title(' The message signal' ) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.4. ANGLE MODULATION 
subplot(2, 1,2) 
plot(t,dem2(1 :length(t))) 
xlabel( ' Time ' ) 
title(' The demodulated signal in the presence of noise' ) 
121 
In the preceding demodulation process, we have neglected the effect of the noise­
limiting filter, which is a bandpass filter in the first stage of any receiver. In practice, 
the received signal r ( t) is passed through the noise-limiting filter and then supplied to 
the envelope detector. In the preceding example, since the message bandwidth is not 
finite, passing r(t) through any bandpass filter will cause distortion on the demodu­
lated message, but it will also decrease the amount of noise in the demodulator output. 
In Figure 3.22 we have plotted the demodulator outputs when noise-limiting filters of 
different bandwidths are used. The case of infinite bandwidth is equivalent to the result 
shown in Figure 3 .21. 
3.4 
Angle Modulation 
Angle-modulation schemes, which include frequency modulation (FM) and phase mod­
ulation (PM), belong to the class of nonlinear modulation schemes. This family of 
BW=300 Hz 
Infinite Bandwidth 
1.5 
0.5 
0 
--0.5 
-1 
-1.5 
-2 
-2.5 1----'---'----'---'----'---'--_._--' 
0 
0.02 
0.04 
0.06 
0.08 
Time 
0.1 
0.12 
0.14 
Figure 3.22: Effect of the bandwidth of the noise-limiting filter on the output of the 
envelope detector 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

122 
CHAPTER 3. ANALOG MODULATION 
modulation schemes is characterized by high-bandwidth requirements and good per­
formance in the presence of noise. These schemes can be visualized as modulation 
techniques that tradeoff bandwidth for power and, therefore, are used in situations 
where bandwidth is not the major concern and a high SNR is required. Frequency 
modulation is widely used in high-fidelity FM broadcasting, TV audio broadcasting, 
microwave carrier modulation, and point-to-point communication systems. 
In our treatment of angle-modulation schemes, we again concentrate on their five 
basic properties-namely, time-domain representation, frequency-domain representa­
tion, bandwidth, power content, and, finally, SNR. Because there is a close relationship 
between PM and FM, we will treat them in parallel, with emphasis on FM. 
The time-domain representation of angle-modulated signals, when the carrier is 
c(t) =Ac cos(2rrfc0 and the message signal is m(t), is given by 
{Ac cos ( zrrfct + kpm(t)) , 
PM 
u(t) = 
( 
t 
) 
Ac cos 2rrfct + 2Trkj Loo m(T) dT 
' 
FM 
(3.4.1) 
where kJ and kp represent the deviation constants of FM and PM, respectively. The 
frequency-domain representation of angle-modulated signals is, in general, very com­
plex due to the nonlinearity of these modulation schemes. We treat only the case where 
the message signal m(t) is a sinusoidal signal. We assume m(t) = acos(2rrfm0 
for PM and m ( t) = -a sin ( 2 TT f mt) for FM. Then the modulated signal is of the form 
where 
{Ac cos(2rrfct + f3r cos(2rrfmt)), 
PM 
u(t) = 
Accos(2rrfct + f31cos(2rrfmt)), 
FM 
(3.4.2) 
(3.4.3) 
and f3r and f3 f are the modulation indices of PM and FM ,  respectively. In general, for 
a nonsinusoidal m(t), the modulation indices are defined as 
{ f3p = kp max lm(t) I 
f3J = 
k1maxlm(t)I 
w 
(3.4.4) 
where Wis the bandwidth of the message signal m(t). In the case of a sinusoidal 
message signal, the modulated signal can be represented by 
00 
u(t) = L Acln(f3) cos(2rr(fc + nfm)t) 
n=-oo 
(3 .4.5) 
where Jn ({3) is the Bessel function of the first kind and of order n and f3 is either /3p 
or f3 f, depending on whether we are dealing with PM or FM. In the frequency domain 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.4. ANGLE MODULATION 
123 
we have 
U(f) = I [ Acf;(/3) 8U - Uc+ nfm)) + Acf;(/3) 8U +Uc+ nfm)) J 
n=-oo 
(3.4.6) 
Obviously, the bandwidth of the modulated signal is not finite. However, we can define 
the effective bandwidth of the signal as the bandwidth containing 98% to 99% of the 
modulated signal power. This bandwidth is given by Carson's rule as 
BT = 2(/3 + l)W 
(3.4.7) 
where /3 is the modulation index, W is the bandwidth of the message, and BT is the 
bandwidth of the modulated signal. 
The expression for the power content of the angle-modulated signals is very simple. 
Because the modulated signal is sinusoidal, with varying instantaneous frequency and 
constant amplitude, its power is constant and does not depend on the message signal. 
The power content for both FM and PM is given by 
p 
- AL 
u -
2 
(3.4.8) 
The SNR for angle-modulated signals, when no preemphasis and deemphasis fil­
tering is employed, is given by 
PM 
(3.4.9) 
FM 
Because max Im ( t) I denotes the maximum magnitude of the message signal, we can 
interpret PM/ (max Im ( t) I) 2 as the power in the normalized message signal and denote 
it by PMn. When preemphasis and deemphasis filters with a 3-dB cutoff frequency 
equal to Jo are employed, the SNR for FM is given by 
( 
S) 
(WI fo)3 
( 
S) 
N 
oPD 
= 
3 [W/fo - arctan(W/fo)] 
N 
o 
(3.4.10) 
where (SI N)0 is the SNR without preemphasis and deemphasis filtering given by 
Equation (3.4.9). 
Illustrative Problem 3.10 [Frequency Modulation] The message signal 
{l, 
m(t) = 
-2, 
0, 
0  t <  
!Q < t < 2to 
3 -
3 
otherwise 
modulates the carrier c(t) = cos(2rrfct) using a frequency-modulation scheme. It is 
assumed thatfc = 200 Hz and to= 0.15 s; the deviation constant is kt= 50. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

124 
CHAPTER 3. ANALOG MODULATION 
1. Plot the modulated signal. 
2. Determine the spectra of the message and the modulated signals. 
1. We have 
u(t) =Ac cos ( 2rrfct + 2TTkJ f 
00 
m(T) dT) 
We have to find f00 m(T) dT. This can be done numerically or analytically, and 
the results are shown in Figure 3.23. Using the relation for u(t) and the value of 
the integral of m ( t) , as shown above, we obtain the expression for u ( t). A plot 
of m(t) and u(t) is shown in Figure 3.24. 
2 
1.5 
0.5 
0 
--0.5 
-1 
-1 .5 
-2 
0 
I 
I 
0.04 
0.02 
0 
--0.02 
--0.04 
--0.06 ._ __ ._ _ __,._ _ __, __ __. 
__ __,_ 
__ __,_ __ _.___, 
I 
I 
0 
0.02 
0.04 
0.06 
O.OB 
Time 
0.1 
0.12 
0.14 
Figure 3 .23: The integral of the message signal 
I 
I 
I 
I 
I 
I 
0.8 
0.6 
0.4 
0.2 
0 
--0.2 
--0.4 
--0.6 
--0.8 
-1$%&'()*+ 
0.02 
0.04 
0.06 
0.08 
0.1 
0.12 
0.14 
0 
0.02 
0.04 
0.06 
0.08 
0.1 
0.12 
0.14 
Time 
Time 
Figure 3 .24: The message signal and the modulated signal 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.4. ANGLE MODULATION 
125 
0.1 
0.025 >-
0.08 
0.02 >-
0.06 
0.015  
0.04 
0.01  
0.02 
0.005  
Frequency 
Frequency 
Figure 3 .25: The magnitude spectra of the message and the modulated signal 
2. Using MATLAB 's Fourier transform routines, we obtain the expression for the 
spectrum of u(t) shown in Figure 3.25. It is readily seen that, unlike AM, in 
the FM case there does not exist a clear similarity between the spectrum of the 
message and the spectrum of the modulated signal. In this particular example, 
the bandwidth of the message signal is not finite, and therefore to define the 
index of modulation, an approximate bandwidth for the message should be used 
in the expression 
/3 = kJ max lm(t)I 
w 
(3.4.11) 
We can, for example, define the bandwidth as the width of the main lobe of the 
spectrum of m ( t), which results in 
and so 
W 
= 20 Hz 
/3 = 50 x 2 
= 10 
20 
The MATLAB script for this problem follows. 
--®§ii! ·---------------
% MATLAB script for Illustrative Problem 3.10. 
% Demonstration script for frequency modulation. The message signal 
% is +I for 0 < t < t0/3, -2 for t0/3 < t < 2t0/3, and zero otherwise. 
echo on 
t0=.15; 
ts=0.0005; 
fc=200; 
kf=50; 
fs=1 /ts; 
t=[O:ts:tO]; 
df=0.25; 
% signal duration 
% sampling interval 
% carrier frequency 
% modulation index 
% sampling frequency 
% time vector 
% required frequency resolution 
% message signal 
m=[ones(1,t0/(3*ts)),-2*ones(1,t0/(3*ts)),zeros(1,t0/(3*ts)+ 1 )]; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

126 
CHAPTER 3. ANALOG MODULATION 
inLm(1)=0; 
for i=1 :length(t)-1 
end 
inLm(i+ 1 )=inLm(i)+m(i)*ts; 
echo off ; 
echo on ; 
% integral of m 
[M,m,dfl]=fftseq(m,ts,df}; 
% Fourier transform 
M=Mlfs; 
% scaling 
f=[O:dfl:dfl*(length(m)-1)]-fs/2; 
% frequency vector 
u=cos(2*pi*fc*t+2*pi*kf*inLm); 
% modulated signal 
[U,u,dfl]=fftseq(u,ts,df}; 
% Fourier transform 
U=U/fs; 
% scaling 
pause 
% Press any key to see a plot of the message and the modulated signal. 
subplot(2, 1, 1 ) 
plot(t,m(1 :length(t))) 
axis([O 0.15 -2.1 2.1]) 
xlabel( ' Time ' ) 
title('The message signal' ) 
subplot(2, 1,2) 
plot(t,u(1 :length(t))) 
axis([O 0.15 -2.1 2.1]) 
xlabel( ' Time ' ) 
title(' The modulated signal' ) 
pause 
% Press any key to see plots of the magnitude of the message and the 
% modulated signal in the frequency domain. 
subplot(2, 1, 1 ) 
plot(f,abs(fftshift(M))) 
xlabel(' Frequency' ) 
title(' Magnitude spectrum of the message signal' ) 
subplot(2, 1,2) 
plot(f,abs(fftshift(U))) 
title(' Magnitude spectrum of the modulated signal' ) 
xlabel(' Frequency' ) 
Illustrative Problem 3.11 [Frequency Modulation] Let the message signal be 
{sinc(lOOt), 
ltl ?to 
m(t) = 
0, 
otherwise 
where to 
= 0.1. This message modulates the carrier c(t) 
Jc = 250 Hz. The deviation constant is kf = 100. 
cos(2rrfc0, where 
1. Plot the modulated signal in the time and frequency domains. 
2. Compare the demodulator output and the original message signal. 
1. We first integrate the message signal and then use the relation 
u(t) =Ac cos ( 2rrfct + 2TTkj roo m(T) dT) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.4. ANGLE MODULATION 
127 
0.8 
0.8 
0.6 
0.6 
0.4 
0.4 
0.2 
0 
0.2 
--0.2 
0 
--0.4 
--0.6 
-0.2 
--0.8 
-0.4 
--0.1 
0 
0.1 
-1 
--0.1 
0 
0.1 
Time 
Time 
Figure 3 .26: The message and the modulated signals 
x 10-3 
12 !"#$%&'() 
10 
8 
6 
4 
2 
-2'-'-	
--' 
--0.1 
0 
Time 
Figure 3 .27: Integral of the message signal 
0.1 
to find u ( t). A plot of u ( t) together with the message signal is shown in Figure 
3 .26. The integral of the message signal is shown in Figure 3 .27. A plot of the 
modulated signal in the frequency domain is shown in Figure 3 .28. 
2. To demodulate the FM signal, we first find the phase of the modulated signal 
u ( t) . This phase is 2 rr k f f  00 m ( T) d T, which can be differentiated and divided 
by 2rrkf to obtain m(t). Note that in order to restore the phase and undo the 
effect of 2rr phase foldings, we employ the unwrap.m function of MATLAB. 
Plots of the message signal and the demodulated signal are shown in Figure 3 .29. 
As you can see, the demodulated signal is quite similar to the message signal. 
The MATLAB script for this problem follows. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

128 
CHAPTER 3. ANALOG MODULATION 
Frequency (Hz) 
Frequency 
Figure 3 .28: Magnitude spectra of the message and the modulated signal 
0.8 
0.8 
0.6 
0.6 
0.4 
0.4 
0.2 
0.2 
0 
0 
--0.2 
--0.2 
--0.4 
--0.4 
-0.1 
0 
0.1 
-0.1 
0 
0.1 
Time 
Time 
Figure 3.29: The message signal and the demodulated signal 
__., .... ·----------------
% MATLAB script for Illustrative Problem 3.11. 
% Demonstration script for frequency modulation. The message signal 
% is m(t)=sinc( JOOt). 
echo on 
t0=.2; 
ts=0.001; 
fc=250; 
snr=20; 
fs=1 /ts; 
df=0.3; 
t=[-t0/2:ts:t0/2]; 
kf=100; 
df=0.25; 
m=sinc(1 OO*t); 
inLm(1)=0; 
for i=1 :length(t)-1 
% signal duration 
% sampling interval 
% carrier frequency 
% SNR in dB (logarithmic) 
% sampling frequency 
% required freq. resolution 
% time vector 
% deviation constant 
% required frequency resolution 
% the message signal 
% integral of m 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

3.4. ANGLE MODULATION 
end 
inLm(i+ 1 )=inLm(i)+m(i)*ts; 
echo off ; 
echo on ; 
[M,m,dfl]=fftseq(m,ts,df); 
% Fourier transform 
M=Wfs; 
% scaling 
f=[O:dfl :dfl *(length(m)-1 )]-fs/2; 
% frequency vector 
u=cos(2*pi*fc*t+2*pi*kf*inLm); 
% modulated signal 
[U,u,dfl]=fftseq(u,ts,df); 
% Fourier transform 
U=U/fs; 
% scaling 
[v,phase]=env_phas(u,ts,250); 
% demodulation, find phase of u 
phi=unwrap(phase); 
% Restore original phase. 
129 
dem=(1/(2*pi*kf))*(diff(phi)/ts); 
% demodulator output, diferentiate and scale phase 
pause 
% Press any key to see a plot of the message and the modulated signal. 
subplot(2, 1, 1) 
plot(t,m(1 :length(t))) 
xlabel(' Time ') 
title(' The message signal') 
subplot(2, 1,2) 
plot(t,u(1 :length(t))) 
xlabel(' Time ') 
title(' The modulated signal') 
pause 
% Press any key to see plots of the magnitude of the message and the 
% modulated signal in the frequency domain. 
subplot(2, 1, 1) 
plot(f,abs(fftshift(M))) 
xlabel(' Frequency') 
title('Magnitude spectrum of the message signal') 
subplot(2, 1,2) 
plot(f,abs(fftshift(U))) 
title('Magnitude-spectrum of the modulated signal') 
xlabel(' Frequency') 
pause 
% Press any key to see plots of the message and the demodulator output with no 
% noise. 
subplot(2, 1, 1) 
plot(t,m(1 :length(t))) 
xlabel(' Time') 
title(' The message signal') 
subplot(2, 1,2) 
plot(t,dem(1 :length(t))) 
xlabel(' Time ') 
title(' The demodulated signal') 
--C•1Ui•t•1j9 
A frequency-modulated signal has constant amplitude. However, in Figure 3.26 the 
amplitude of the signal u(t) is apparently not constant. Can you explain why this 
happens? 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

130 
CHAPTER 3. ANALOG MODULATION 
Problems 
3.1 Signal m(t) is given by 
t, 
0.1  t < 1 
-t + 2, 
1t<1.9 
m(t) = 
0.1, 
1.9  t  2 
0, 
otherwise 
in the interval [0, 2]. This signal is used to DSB modulate a carrier of frequency 25 Hz 
and amplitude 1 to generate the modulated signal u(t). Write a MATLAB m-file and 
use it to do the following: 
a. Plot the modulated signal. 
b. Determine the power content of the modulated signal. 
c. Determine the spectrum of the modulated signal. 
d. Determine the power spectral density of the modulated signal and compare it 
with the power spectral density of the message signal. 
3.2 Repeat Problem 3.1 with 
m(t) = {t, 
-t + 2, 
Ot<l 
lt2 
in the interval [0, 2]. What do you think is the difference between this problem and 
Problem 3 .1? 
3.3 Repeat Problem 3.1 with 
{sinc2 (lOt), 
m(t) = 
0, 
and a carrier with a frequency of 100 Hz. 
ltl  2 
otherwise 
3.4 In Problem 3 .1, suppose that instead of DSB, a conventional AM scheme is used 
with a modulation index of a= 0.25. 
a. Determine and plot the spectrum of the modulated signal. 
b. Change the modulation index from 0.1 to 0.9 and explain how it affects the spec­
trum derived in part a. 
c. Plot the ratio of the power content of the sidebands to the power content of the 
carrier as a function of the modulation index. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
131 
3.5 In Problem 3.1, let the modulation scheme be USSB instead of DSB. First use a 
DSB scheme and then remove the lower sideband. 
a. Determine and plot the modulated signal. 
b. Determine and plot the spectrum of the modulated signal. 
c. Compare the spectrum of the modulated signal to the spectrum of the unmodu­
lated signal. 
3.6 Repeat Problem 3.5, but instead of using a filtered DSB to generate the USSB 
signal, use the relation 
u(t) = c m(t) cos(2rrfct) - c m(t) sin(2rrfct) 
Do you observe any differences with the results obtained in Problem 3 .5? 
3.7 Repeat Problems 3.5 and 3.6 but substitute the message signal 
{sinc2(10t), 
m(t) = 
0, 
ltl  2 
otherwise 
and use a carrier frequency of 100 Hz to generate an LSSB signal. 
3.8 Signal 
{t, 
0.1  t < 1 
m(t) = 
-t + 2, 
1  t < 1.9 
0, 
otherwise 
is used to modulate a carrier with a frequency of 25 Hz using a DSB scheme. 
a. Determine and plot the modulated signal. 
b. Assume that the local oscillator at the demodulator has a phase lag of e with the 
carrier, where 0  e  rr /2. Using MATLAB, plot the power in the demodu­
lated signal versus e (assume noiseless transmission). 
3.9 In Problem 3 .8, assume that the modulation scheme is USSB. Plot the demodulated 
signal fore = 0°' 30°' 45°' 60°' and 90°. 
3.10 Repeat Problem 3.8, assuming the modulation is conventional AM with a modu­
lation index of 0 .2. Use an envelope detector to demodulate the signal in the absence 
of noise and plot the demodulated signal and its spectrum. 
3.11 A message signal is periodic with a period of 2 s and in the time interval [0, 2] is 
defined as 
{t, 
0.1  t < 1 
m(t) = 
-t + 2, 
1  t < 1.9 
0, 
otherwise 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

132 
CHAPTER 3. ANALOG MODULATION 
This message signal DSB modulates a carrier of 50 Hz. Plot the output of the DSB 
demodulator and compare it with the message for the cases where white Gaussian 
noise is added to the modulated signal with a power equal to 0.001, 0.01, 0 .05, 0 .1, and 
0.3 of the modulated signal. 
3.12 Repeat Problem 3.11 with a LSSB modulation scheme. Compare your results 
with the results obtained in Problem 3 .11. 
3.13 Repeat Problem 3 .11 with a conventional AM modulation and envelope demodu­
lation. 
3.14 The signal 
{t, 
0 :-:; t < 1 
m(t) 
= 
-t + 2, 
1 :-:: t :-:: 2 
0.1, 
otherwise 
frequency modulates a carrier with frequency 1000 Hz. The deviation constant is k f 
= 
25. 
a. Determine the range of the instantaneous frequency of the modulated signal. 
b. Determine the bandwidth of the modulated signal. 
c. Plot the spectra of the message and the modulated signal. 
d. Determine the modulation index. 
3.15 Demodulate the modulated signal of Problem 3.14 using a frequency demodula­
tion MATLAB file and compare the demodulated signal with the message signal. 
3.16 Let the message signal be a periodic signal with period 2 described in the [O, 2] 
interval by 
{t, 
m(t) 
= 
-t + 2, 
0.1 
0 :-:; t < 1 
1 :-:; t < 1.9 
otherwise 
and let the modulation scheme be the one described in Problem 3.14. Before demod­
ulation, additive white Gaussian noise is added to the modulated signal. Demodulate 
and plot the demodulated signal when the ratio of noise power to the modulated signal 
power is 0.001, 0.01, 0.05, 0.1, and 0.3. 
3.17 In Problem 3.16, assume m(t) 
= 0. Add the noise processes to the modulated 
signal as described and demodulate the resulting signal. Plot the power spectral density 
of the demodulator output in each case. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

Chapter 4 
Analog-to-Digital Conversion 
4.1 
Preview 
The majority of information sources are analog by nature. Analog sources include 
speech, image, and many telemetry sources. In this chapter we consider various meth­
ods and techniques used for converting analog sources to digital sequences in an ef­
ficient way. This is desirable because, as we will see in subsequent chapters, digital 
information is easier to process, to communicate, and to store. The general theme 
of data compression, of which analog-to-digital conversion is a special case, can be 
divided into two main branches: 
1. Quantization (or lossy data compression), in which the analog source is quan­
tized into a finite number of levels. In this process some distortion will inevitably 
occur, so some information will be lost. This lost information cannot be recov­
ered. General analog-to-digital conversion techniques such as pulse-code mod­
ulation (PCM), differential pulse-code modulation (DPCM), delta modulation 
(M), uniform quantization, nonuniform quantization, and vector quantization 
belong to this class. The fundamental limit on the performance of this class of 
data-compression schemes is given by the rate-distortion bound. 
2. Noiseless coding (or lossless data compression), in which the digital data (usu­
ally the result of quantization, as discussed above) are compressed with the goal 
of representing them with as few bits as possible, such that the original data 
sequence can be completely recovered from the compressed sequence. Source­
coding techniques such as Huffman coding, Lempel-Ziv coding, and arithmetic 
coding belong to this class of data-compression schemes. In this class of coding 
schemes no loss of information occurs. The fundamental limit on the compres­
sion achieved by this class is given by the entropy of the source. 
133 
Copyright 2011 Cengage Learning. All Rights Reserved. May not be copied. scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter\s). 
Editorial review has deemed that any suppressed content does not materialJy affect the overall learning experience. Cengage Leaming reserves the right to remove additiona1 content at any time if subsequent rights restrictions re<tuire it. 

134 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
4.2 
Measure of Information 
The output of an information source (data, speech, video, etc.) can be modeled as 
a random process. For a discrete-memoryless and stationary random process, which 
can be thought of as independent drawings of one random variable X, the information 
content, or entropy, is defined as 
H(X) = - I p(x) log p(x) 
(4.2.1) 
XE!Z 
where !!£ denotes the source alphabet and p (x) is the probability of the letter x. The 
base of the logarithm is usually chosen to be 2, which results in the entropy being 
expressed in bits. For the binary alphabet with probabilities p and 1 - p, the entropy 
is denoted by H b ( p) and is given by 
Hb(p) = -plogp - (1- p)log(l - p) 
A plot of the binary entropy function is given in Figure 4 .1. 
1 
0.9 
0.8 
0.7 
0.6 
0.5 
0.4 
0.3 
0.2 
0.1 
0 '---L--'--'--'-._-'-'---'--'--' 
0 
0.1 
0.2 
0.3 
0.4 
0.5 
0.6 
0.7 
0.8 
0.9 
1 
p 
Figure 4.1: Plot of the binary entropy function 
(4.2.2) 
The entropy of a source provides an essential bound on the number of bits required 
to represent a source for full recovery. In other words, the average number of bits per 
source output required to encode a source for error-free recovery can be made as close 
to H (X) as we desire but cannot be less than H (X). 
4.2.1 
Noiseless Coding 
Noiseless coding is the general term for all schemes that reduce the number of bits re­
quired for the representation of a source output for perfect recovery. The noiseless cod­
ing theorem, due to Shannon (1948), states that for perfect reconstruction of a source it 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.2. MEASURE OF INFORMATION 
135 
is possible to use a code with a rate as close to the entropy of the source as we desire, 
but it is not possible to use a code with a rate less than the source entropy. In other 
words, for any€> 0, we can have a code with rate less than H(X) +€,but we cannot 
have a code with rate less than H (X), regardless of the complexity of the encoder and 
the decoder. There exist various algorithms for noiseless source coding; Huffman cod­
ing and Lempel-Ziv coding are two examples. Here we discuss the Huffman coding 
algorithm. 
Huffman Coding 
In Huffman coding we assign longer codewords to the less probable source outputs and 
shorter codewords to the more probable ones. To do this we start by merging the two 
least probable source outputs to generate a new merged output whose probability is the 
sum of the corresponding probabilities. This process is repeated until only one merged 
output is left. In this way we generate a tree. Starting from the root of the tree and 
assigning O's and 1 's to any two branches emerging from the same node, we generate 
the code. It can be shown that in this way we generate a code with minimum average 
length among the class of prefix-free codes .1 
The following example shows how to 
design a Huffman code. 
Illustrative Problem 4.1 [Huffman Coding] Design a Huffman code for a source 
with alphabet X = {x1, Xz, ... , Xg} and corresponding probability vector 
p = (0.2,0.15,0.13,0.12,0.1,0.09,0.08,0.07,0.06) 
Find the average codeword length of the resulting code and compare it with the entropy 
of the source. 
We follow the algorithm outlined above to get the tree shown in Figure 4 .2. The average 
codeword length for this code is 
L = 2 x 0.2 + 3 x (0.15 + 0.13 + 0.12 + 0.1) + 4 x (0.09 + 0.08 + 0.07 + 0.06) 
= 3 .1 
bits per source output 
The entropy of the source is given as 
9 
H(X) = 
- L pdog Pi= 3.0371 
bits per source output 
i=l 
We observe that L > H (X), as expected. 
The MATLAB function entropy.m given next calculates the entropy of a probability 
vector p. 
1 Prefix-free codes are codes in which no codeword is a prefix of another codeword. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

136 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
Codewords 
00 
Xt 
0.2 
00 
100 
Xz 
0.15 
100 
110 
X3 
0.13 
0.42 
110 
0 
010 
X4 
0.12 
0.32 
-
010 
10 
0.22 
01 
Prob.= 1 
011 
X5 
0.1 
0.58 
1 
011 
1010 
x6 
0.26 
11 
0.09 
1010 
0.17 
101 
1011 
X7 
0.08 
1011 
1110 
Xg 
0.07 
- 1110 
0.13 
111 
1111 
X9 
0.06 
1111 
-
Figure 4.2: Huffman code tree 
___ , .... ·---------------
function h=entropy(p) 
% 
H=ENTROPY(P) returns the entropy function of 
% 
the probability vector p. 
if length(find(p<O)f =0, 
error(' Not a prob. vector, negative component ( s) ' ) 
end 
if abs(sum(p)-1)>10e-10, 
error(' Not a prob. vector, components do not add up to 1 ') 
end 
h=sum( -p. *log2(p)); 
The quantity 
H(X) 
,., = 
L 
(4.2.3) 
is called the efficiency of the Huffman code. Obviously, we always have 17 ::; 1. In gen­
eral, it can be shown that the average codeword length for any Huffman code satisfies 
the inequalities 
H(X) ::; L < H(X) + 1 
(4.2.4) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.2. MEASURE OF INFORMATION 
137 
If we design a Huffman code for blocks of length K instead of for single letters, we 
will have 
-
1 
H (X)  L < H (X) + 
K 
(4.2.5) 
and, therefore, by increasing K we can get as close to H (X) as we desire. Increasing 
K increases the complexity considerably. Also note that the Huffman coding algorithm 
does not result in a unique code due to the arbitrary way of assigning O's and 1 's to 
different tree branches. That is why we talk about a Huffman code rather than the 
Huffman code. 
The MATLAB function huffman.m, which designs a Huffman code for a discrete­
memoryless source with probability vector p and returns both the codewords and the 
average codeword length, is given next. 
___ ,,, .. ·--------------
function [h,l]=huffman(p); 
%HUFFMAN 
Huffman code generator 
% 
[h,l]=hujfman(p), Huffman code generator 
% 
returns h the Huffman code matrix, and l the 
% 
average codeword length for a source with 
% 
probability vector p. 
if Iength(find(p<O)r =0, 
error(' Not a prob. vector, negative component ( s) ') 
end 
if abs(sum(p)-1)>10e-10, 
error(' Not a prob. vector, components do not add up to 1 ') 
end 
n=length(p); 
q=p; 
m=zeros(n-1,n}; 
for i=1 :n-1 
[ q,l]=sort( q); 
m(i, :)=[1(1:n-i+1 },zeros(1,i-1 )]; 
q=[q(1)+q(2),q(3:n),1 ]; 
end 
for i=1 :n-1 
c(i, :)=blanks(n*n); 
end 
c(n-1,n)=' O'; 
c(n-1,2*n)=' 1'; 
for i=2:n-1 
c(n-i, 1 :n-1)=c(n-i+1,n*(find(m(n-i+ 1,:)==1 )) ... 
-(n-2):n*(find(m(n-i+ 1,:)==1 ))); 
c(n-i,n)=' 0'; 
c(n-i,n+ 1 :2*n-1)=c(n-i,1 :n-1 ); 
c(n-i,2*n)=' 1 ' ; 
for j=1 :i-1 
c(n-i,U+ 1)*n+1:U+2)*n)=c(n-i+1, ... 
n*(find(m(n-i+ 1,:)==j+ 1 )-1)+1:n*find(m(n-i+1,:)==j+ 1 )); 
end 
end 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

138 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
for i=1 :n 
h(i, 1 :n)=c(1,n*(find(m(1, :)==i)-1)+1 :find(m(1, :)==i)*n); 
ll(i)=length(find(abs(h(i, :)f =32)); 
end 
l=sum(p.*11); 
Illustrative Problem 4.2 [Huffman Coding] A discrete-memoryless information 
source with alphabet 
X 
= {x1,xz, ... ,x5} 
and the corresponding probabilities 
p = {0.1, 0.3, 0.05, 0.09, 0.21, 0.25} 
is to be encoded using Huffman coding. 
1. Determine the entropy of the source. 
2. Find a Huffman code for the source and determine the efficiency of the Huffman 
code. 
3. Now design a Huffman code for source sequences of length 2 and compare the 
efficiency of this code with the efficiency of the code derived in part 2. 
1. The entropy of the source is derived via the entropy.m function and is found to 
be 2.3549 bits per source symbol. 
2. Using the huffman.m function we can design a Huffman code for this source. 
The codewords are found to be 010, 11, 0110, 0111, 00, and 10. The average 
codeword length for this code is found to be 2.38 binary symbols per source 
output. Therefore, the efficiency of this code is 
= 2.3549 
= 0 9895 
T]l 
2.38 
. 
3. A new source whose outputs are letter pairs of the original source has 36 output 
letters of the form {(xi, x j)} .j= 1. Because the source is memoryless, the prob­
ability of each pair is the product of the individual letter probabilities. Thus, in 
order to obtain the probability vector for the extended source, we must generate 
a vector with 36 components, each component being the product of two proba­
bilities in the original probability vector p. This can be done by employing the 
MATLAB function kron.m in the form of kron (p, p). The Huffman codewords 
are given by 
1110000, 01110, 10110111, 1011001, 111001, 00101, 01111, 000, 011010, 
00111, 1001, 1100, 11101110, 011011, 111011110, 111011111, 1110001, 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
139 
001000,1011010,01100,10110110,1011000,101110,111110,111010,1010, 
1110110,101111,11110,0100,00110,1101,001001,111111,0101,1000 
The average codeword length for the extended source is 4.7420. The entropy of 
the extended source is found to be 4.7097, so the efficiency of this Huffman code 
is 
4.7097 
172 
= 4.7420 
= 0.9932 
which shows an improvement compared to the efficiency of the Huffman code 
designed in part 2. 
Illustrative Problem 4.3 [A Huffman Code with Maximum Efficiency] Design a 
Huffman code for a source with probability vector 
{ 1 1 1 
1 
1 
1 
1 
1 
1 } 
p 
= 
2'4'8' 16' 32' 64' 128' 256' 256 
We use the huffman.m function to determine a Huffman code and the corresponding av­
erage codeword length. The resulting codewords are l , 01, 001, 0001, 00001, 00000 l , 
0000001, 00000000, and 00000001. The average codeword length is 1.9922 binary 
symbols per source output. If we find the entropy of the source using the entropy.m 
function, we see that the entropy of the source is also 1.9922 bits per source output; 
hence the efficiency of this code is 1. 
--C•1G§.ii[•H• 
Can you say under what conditions the efficiency of a Huffman code is equal to 1? 
4.3 
Quantization 
In the previous section we studied two methods for noiseless coding; that is, com­
pression of the source output sequence such that full recovery is possible from the 
compressed data. In these methods the compressed data are a deterministic function 
of the source output, and the source output is also a deterministic function of the com­
pressed data. This one-to-one correspondence between the compressed data and the 
source output means that their entropies are equal and no information is lost in the 
encoding-decoding process. 
In many applications, such as digital processing of the analog signals, where the 
source alphabet is not discrete, the number of bits required for representation of each 
source output is not finite. In order to process the source output digitally, the source has 
to be quantized to a finite number of levels. This process reduces the number of bits to 
a finite number but at the same time introduces some distortion. The information lost 
in the quantization process can never be recovered. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

140 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
In general, quantization schemes can be classified as scalar quantization and vector 
quantization schemes. In scalar quantization each source output is quantized individu­
ally, whereas in vector quantization blocks of source output are quantized. 
Scalar quantizers can be further classified as uniform quantizers and nonuniform 
quantizers. In uniform quantization, the quantization regions are chosen to have equal 
length; in nonuniform quantization, regions of various lengths are allowed. It is clear 
that, in general, nonuniform quantizers outperform uniform quantizers. 
4.3.1 
Scalar Quantization 
In scalar quantization the range of the random variable X is divided into N nonoverlap­
ping regions £!lti, for 1 :s: i :s: N, called quantization intervals, and within each region 
a single point called a quantization level is chosen. Then all values of the random 
variable that fall within region £!lti are quantized to the ith quantization level, which is 
denoted by Xi. This means that 
x E £!lti <=> Q(x) =Xi 
(4.3.1) 
where 
(4.3.2) 
Obviously, a quantization of this type introduces a mean-square error of (x-xi)2. The 
mean-square quantization error is therefore given by 
N 
D = 
i f 
i (x -Xi)2 fx(x) dx 
(4.3.3) 
where fx(x) denotes the probability density function of the source random variable. 
The signal-to-quantization-noise ratio (SQNR) is defined as 
Uniform Quantization 
E [X2] 
SQNR1dB = 10log10 
D 
In uniform quantization all quantization regions except the first and the last ones-that 
is, £!lt1 and £!ltN-are of equal length, which is denoted by 6; therefore, 
£!lt1 = ( -oo, a] 
£!lt2 = (a, a+ 6] 
£!lt3 = (a+ 6, a+ 26] 
£!ltN = (a+ (N - 2)6, oo) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
141 
The optimal quantization level in each quantization interval can be shown to be the 
centroid of that interval; that is, 
Xi= E[XIX E +d 
_ f9fi xfx(x) dx 
- f9fi fx(x) dx 
1 , i , N 
(4.3.4) 
Therefore, the design of the uniform quantizer is equivalent to determining a and:. 
After a and : are determined, the values of Xi's and the resulting distortion can be 
determined easily using Equations (4.3.3) and (4.3.4). In some cases it is convenient to 
choose the quantization levels to be simply the midpoints of the quantization regions­
that is, at a distance :/ 2 from the boundaries of the quantization regions. 
Plots of the quantization function Q (x) for a symmetric probability density func­
tion of X and even and odd values of N are shown in Figures 4.3 and 4.4, respectively. 
Q(x) 
.x6 
------- ---
a 
a+ 
I 
I 
I 
I 
I 
I 
----'- - - -
.X2 
I 
I 
I 
______ _. ______ _ 
a+ 3 a +4 
Figure 4.3: The uniform quantizer for N = 6 (note that here a + 2: = 0) 
For the symmetric probability density functions, the problem becomes even sim­
pler. In such a case, 
where 
{ ao = -oo 
ai = ( i -NI 2) : 
aN = oo 
l,i,N-1 
i = N 
l,i,N-1 
(4.3.5) 
(4.3.6) 
We see that in this case we have only one parameter:. which we have to choose to 
achieve minimum distortion. Three m-files-centroid.m, mse_dist.m, and uq_dist.m­
find the centroid of a region; the mean-square quantization error for a given distribution 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

142 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
Q(x) 
i1 
---------
i6 
-----
a+2 
\'' 
I 
I 
a 
a+ 
I 
x 
. \
+4A a+5 
X3 
a+ 3 
- - - - -
i2 
---------
i1 
Figure 4.4: The quantization function for N = 7 (note that here X4 
= 0) 
and given quantization region boundaries; and, finally, the distortion when a uniform 
quantizer is used to quantize a given source (it is assumed that the quantization levels 
are set to the centroids of the quantization regions). In order to use each of these m­
files, the distribution of the source, which can depend on up to three parameters, has to 
be given in an m-file. These m-files are given next. 
---®§ii! ·---------------
function y=centroid(funfcn,a,b,tol,pl,p2,p3) 
% CENTROID 
Finds the centroid of a function over a region. 
% 
Y=CENTROID('F',A,B,TOL,Pl,P2,P3) finds the centroid of the 
% 
% 
% 
args=[ ]; 
for n=1 :nargin-4 
function F defined in an m-file on the [ A,B] region. The 
function can contain up to three parameters, P 1, P2, P 3. 
tol=the relative error. 
args=[args,' , p' ,int2str(n)]: 
end 
args=[args,' ) ']; 
funfcnl=' x_fnct'; 
yl=eval([' quad ( funfcnl, a, b, tol, [ ] , funfcn' ,args]); 
y2=eva1([' quad ( funfcn, a, b, tol, [ ] ',args]); 
y=ylly2; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
143 
___ ,., .. ·---------------
function [y,dist]=mse_dist(funfcn,a,tol,p l ,p2,p3) 
%MSEJ)/ST 
Returns the mean-squared quantization error. 
% 
[Y,DIST]=MSEJ)/ST( FUNFCN,A,TOL,P l ,P2 ,P 3) 
% 
% 
% 
% 
% 
% 
% 
% 
args=[ ]; 
for n=1 :nargin-3 
funfcn=The distribution function given 
in an m-file. It can depend on up to three 
parameters, pl,p2,p3. 
a=the vector defining the boundaries of the 
quantization regions. (Note: [a(l),a(length(a))] 
is the support of funfcn.) 
pl ,p2,p3=parameters of funfcn. 
tol=the relative error. 
args=[args,' , p' ,int2str(n)]; 
end 
args=[args,' ) ']; 
for i=1 :length(a)-1 
y(i)=eval([' centroid ( funfcn, a ( i) , a ( i + 1) , tol' ,args]); 
end 
dist=O; 
for i=1 :length(a)-1 
newfun = 'x_a2 fnct' ; 
dist=dist+eval([' quad ( newfun, a ( i) , a ( i + 1) , tol, [ ] , funfcn, ', num2str(y(i)), args]); 
end 
___ ,,, .. ·---------------
function [y ,dist]=uq_dist(funfcn,b,c,n,delta,s,tol,p l ,p2,p3) 
%UQJ)/ST 
returns the distortion of a uniform quantizer 
% 
with quantization points set to the centroids 
% 
[Y,DIST]=UQJ)JST( FUNFCN,B ,C,N,DELTA,S,TOL,P l ,P2 ,P 3) 
% 
funfcn=source density function given in an m-file 
% 
with at most three parameters, pl,p2,p3. 
% 
[b,c]=The support of the source density function. 
% 
n=number of levels. 
% 
delta=level size. 
% 
% 
% 
% 
% 
s=the leftmost quantization region boundary. 
pl,p2,p3=parameters of the input function. 
y=quantization levels. 
dist= distortion. 
tol=the relative error. 
if (c-b<delta*(n-2)) 
error('Too many levels for this range.'); return 
end 
if (s<b) 
error(' The leftmost boundary too small. '); return 
end 
if (s+(n-2)*delta>c) 
error(' The leftmost boundary too large. '); return 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

144 
end 
args=[ ]; 
for j=1:nargin-7 
args=[args,' , p' ,int2str(j)]; 
end 
args=[args,' ) ']; 
a(1 )=b; 
for i=2:n 
a(i)=s+(i-2)*delta; 
end 
a(n+ 1 )=c; 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
[y,dist]=eval([ 'mse_dist ( funfcn, a, tol' ,args]); 
Illustrative Problem 4.4 [Determining the Centroids] Determine the centroids of 
the quantization regions for a zero-mean, unit-variance Gaussian distribution, where 
the boundaries of the quantization regions are given by (-5, -4, -2, 0, l, 3, 5). 
The Gaussian distribution is given in the m-file normal.m. This distribution is a func­
tion of two parameters, the mean and the variance, denoted by m ands (or O"), re­
spectively. The support of the Gaussian distribution is ( - oo, oo) , but for employing the 
numerical routines it is enough to use a range that is many times the standard deviation 
of the distribution. For example, (m - 10.JS, m + 10.JS) can be used. The following 
m-file determines the centroids (optimal quantization levels). 
---®Ii" •--------------
% MATLAB script for Illustrative Problem 4.4. 
echo on ; 
a=[-10,-5,-4,-2,0, 1,3,5, 1 O]; 
for i=1 :length(a)-1 
end 
y_actual(i)=centroid(' normal' ,a(i),a(i+ 1),1e-6,0,1 ); 
echo off ; 
This results in the following quantization levels: 
(-5.1865, -4.2168, -2.3706, 
0.7228, -0.4599, 1.5101, 3.2827, 5.1865). 
Illustrative Problem 4.5 [Mean-Square Error] In Illustrative Problem 4.4, deter­
mine the mean-square error. 
Letting a= (-10, -5, -4, -2,0, 1, 3, 5, 10) and using mse_dist.m, we obtain a mean­
square error of 0.177. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
145 
Illustrative Problem 4.6 [Uniform Quantizer Distortion] Determine the mean-square 
error for a uniform quantizer with 12 quantization levels, each of length 1, designed for a 
zero-mean Gaussian source with variance of 4. It is assumed that the quantization regions 
are symmetric with respect to the mean of the distribution. 
By the symmetry assumption the boundaries of the quantization regions are 0, ±1, 
±2, ±3, ± 4, and ±5, and the quantization regions are (-oo, -5], (-5, - 4], (- 4, -3], 
(-3,-2], (-2,-1], (-1,0], (0,1], (1,2], (2,3], (3, 4], ( 4,5], and (5,+oo). This 
means that in the uq_dist.m function we can substitute b 
= -20, c 
= 20, @ 
= 1, 
n 
= 12 , s 
= -5, tol = 0.001, P1 
= 0, and pz 
= 2. Substituting these values into 
uq_dist.m, we obtain a squared error distortion of 0.0851 and quantization values of 
±0.4897, ±1.4 6 91, ±2.4 487, ±3.4286, ± 4.4089, and ±5.6 455. 
The m-file uq_mdpnt.m determines the squared error distortion for a symmetric 
density function when the quantization levels are chosen to be the midpoints of the 
quantization intervals. In this case the quantization levels corresponding to the first 
and the last quantization regions are chosen to be at distance @/2 from the two out­
ermost quantization boundaries. This means that if the number of quantization levels 
is even, then the quantization boundaries are 0, ±@, ±2@, ... , ±(N/2 - l)@ and 
the quantization levels are given by ±@/2, ±3@/2, ... , (N - l)@/2. If the number 
of quantization levels is odd, then the boundaries are given by ±@/2, ±3@/2, ... , 
±(N /2 - l)@ and the quantization levels are given by 0, ±@, ±2@, ... , (N - l)@/2. 
The m-file uq_mdpnt.m is given next. 
__., .... ·--------------
function dist=uq_mdpnt(funfcn,b,n,delta, tol,p l ,p2,p3) 
%UQ..MDPNT 
returns the distortion of a uniform quantizer 
% 
with quantization points set to the midpoints 
% 
DIST=UQ..MDPNT(FUNFCN,B,N,DELTA,TOL,Pl,P2,P3). 
% 
funfcn=source density function given in an m-file 
% 
with at most three parameters, pl,p2,p3. The density 
% 
function is assumed to be an even function. 
% 
[-b,b]=the support of the source density function. 
% 
n=number of levels. 
% 
delta=level size. 
% 
% 
% 
pl,p2,p3=parameters of the input function. 
dist= distortion. 
tol=the relative error. 
if (2*b<delta*(n-1 )) 
error(' Too many levels for this range. '); return 
end 
args=[]; 
for j=1 :nargin-5 
args=[args,' , p' ,int2strU)]; 
end 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

146 
args=[args,' ) ']; 
a(1)=-b; 
a(n+1)=b; 
a(2)=-(n/2-1 )*delta; 
y(1 )=a(2)-delta/2; 
for i=3:n 
a(i)=a(i-1 )+delta; 
y(i-1 )=a(i)-delta/2; 
end 
y(n)=a(n)+delta; 
dist=O; 
for i=1 :n 
newfun = 
'x a2 fnct' ; 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
dist=dist+eval([' quad ( newfun, a ( i) , a ( i + 1) , tol, [ ] , funfcn, ' , num2str(y(i)), args]); 
end 
Illustrative Problem 4.7 [Uniform Quantizer with Levels Set to the Midpoints] 
Find the distortions when a uniform quantizer is used to quantize a zero-mean, unit­
variance Gaussian random variable. The number of quantization levels is 11, and the 
length of each quantization region is 1. 
In uq_mdpnt.m we substitute 'normal fl for the density function name, P1 = 0 and 
P2 = 1 for the density function parameters, n = 11 for the number of quantization 
levels, and== 1 for the length of the quantization levels. For the parameter b, which 
chooses the support set of the density function, we use the value b = l0p2 = 10, and 
we choose the tolerance to be 0.001. The resulting distortion is 0 .0833. 
Nonuniform Quantization 
In nonuniform quantization the requirement that the quantization regions, except the 
first and the last, have equal lengths is relaxed, and each quantization region can have 
any length. Because in this case optimization is done under more relaxed conditions, 
the result is obviously superior to that of uniform quantization. The optimality condi­
tions for this case, known as the Lloyd-Max conditions, can be expressed as 
(4.3.7) 
From these equations we conclude that the optimal quantization levels are the cen­
troids of the quantization regions and the optimal boundaries between the quantization 
regions are the midpoints between the quantization levels. In order to obtain the solu­
tion to the Lloyd-Max equations, we start with a set of quantization levels Xi. From 
2The name of the function should be substituted with 'normal' including the single quotes. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
147 
this set we can simply find the set of quantization region boundaries ai. From this 
set of ai 's a new set of quantization levels can be obtained. This process is contin­
ued until the improvement in distortion from one iteration to another is not noticeable. 
This algorithm is guaranteed to converge to a local minimum, but in general there is no 
guarantee that the global minimum can be achieved. 
The procedure for designing an optimal quantizer is shown in the m-file lloyd­
max.m, given next. 
___ , .... ·---------------
function [a,y,dist]=lloydmax(funfcn,b,n,tol,p l ,p2,p3) 
%LLOYDMAX 
returns the the Lloyd-Max quantizer and the mean-squared 
% 
quantization error for a symmetric distribution 
% 
[A,Y,DIST]=LLOYDMAX(FUNFCN,B,N,TOL,P 1,P2,P3). 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
args=[ ]; 
for j=1 :nargin-4 
funfcn=The density function given 
in an m-file. It can depend on up to three 
parameters, pl,p2,p3. 
a=the vector giving the boundaries of the 
quantization regions. 
[-b,b] approximates support of the density function. 
n=the number of quantization regions. 
y=the quantization levels. 
pl ,p2,p3=parameters of funfcn. 
tol=the relative error. 
args=[args,' , p' ,int2strU)]; 
end 
args=[args,' ) ']; 
v=eval([ 'variance ( funfcn, -b, b, tol' ,args]); 
a(1)=-b; 
d=2*b/n; 
for i=2:n 
a(i)=a(i-1 )+d; 
end 
a(n+1)=b; 
dist=v; 
[y,newdist]=eval([ 'mse 
_dist ( funfcn, a, tol' ,args]); 
while(newdist<0.99*dist), 
for i=2:n 
a(i)=(y(i-1 )+y(i))/2; 
end 
dist=newdist; 
[y,newdist]=eval([ 'mse_dist ( funfcn, a, tol' ,args]): 
end 
Illustrative Problem 4.8 [Lloyd-Max Quantizer Design] Design a ten-level Lloyd­
Max quantizer for a zero-mean, unit-variance Gaussian source. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

148 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
Using b = 10, n = 10, tol = 0.01, PI = 0, and pz = 1 in lloydmax.m, we obtain the 
quantization boundaries and quantization levels vectors a and y as 
a= ±10, ±2.16, ±1.51, ±0.98, ±0.48, 0 
y = ±2.52, ±1.78, ±1.22, ±0.72, ±0.24 
and the resulting distortion is 0.02. These values are good approximations to the opti­
mal values given in the table by Max (1960). 
4.3.2 
Vector Quantization 
In scalar quantization each output of the discrete-time source is quantized separately 
and then encoded. For example, if we are using a four-level scalar quantizer and encod­
ing each level into 2 bits, we are using 2 bits per each source output. This quantization 
scheme is shown in Figure 4.5. 
" 
x 
" 
X4 ----
I 
" 
X3 
a1 
I 
a1 
a3 
I 
I 
" 
X2 
" 
Xi 
Figure 4.5: Four-level scalar quantization 
Now if we consider two samples of the source at each time and interpret these two 
samples as a point in a plane, the scalar quantizer partitions the entire plane into 16 
quantization regions, as shown in Figure 4.6. 
It is seen that the regions in the two-dimensional space are all of rectangular shape. 
If we allow 16 regions of any shape in the two-dimensional space, we are capable of 
obtaining better results. This means that we are quantizing two source outputs at a 
time using 16 regions, which is equivalent to 4 bits per two source outputs or 2 bits 
per each source output. Therefore, the number of bits per source output for quantizing 
two samples at a time is equal to the number of bits per source output obtained in the 
scalar case. Because we are relaxing the requirement of having rectangular regions, the 
performance may be improved. Now if we take three samples at a time and quantize the 
entire three-dimensional space into 64 regions, we may have even less distortion with 
the same number of bits per source output. The idea of vector quantization is to take 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
149 
x 2 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
x 
• 
• 
• 
• 
Figure 4.6: Scalar four-level quantization applied to two samples 
blocks of source outputs of length n and design the quantizer in the n-dimensional 
Euclidean space rather than doing the quantization based on single samples in one­
dimensional space. 
Let us assume that the quantization regions in the n-dimensional space are denoted 
by Elti, 1 ::; i ::; K. These K regions partition the n-dimensional space. Each block 
of source output of length n is denoted by x E n, and if x E Elti, it is quantized to 
.f2(x) =Xi. Figure 4.7 shows this quantization scheme for n = 2. Now because there 
are a total of K quantized values, logK bits are enough to represent these values. This 
means that we require log K bits per n source outputs, or the rate of the source code is 
R = 
log K 
bits/source output 
n 
(4.3.8) 
The optimal vector quantizer of dimension n and number of levels K is the one 
that chooses the region Elti 's and the quantized values Xi's such that the resulting dis­
tortion is minimized. Applying the same procedure that we used for the case of scalar 
quantization, we obtain the following criteria for an optimal vector quantizer design: 
Figure 4.7: Vector quantization in two dimensions 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

150 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
1. Region ;?Jti is the set of all points in the n-dimensional space that are closer to 
Xi than any other Xj, for all j * i. 
;?lti 
= {x E IR?.n: llx - xiii< llx - Xjll, 'if j * i} 
2. Xi is the centroid of the region ;?It i. 
A practical approach to designing optimal vector quantizers is based on the same 
approach employed in designing optimal scalar quantizers. Starting from a given set of 
quantization regions, we derive the optimal quantized vectors for these regions using 
criterion 2, then repartition the space using the first criterion and going back and forth 
until changes in distortion are negligible. When instead of the probability density func­
tion of the source we have a large training sequence, a similar method for designing 
vector quantizers is called the generalized Lloyd algorithm, the K-means algorithm, or 
the LBG (Linde-Buzo-Gray) algorithm 
Let the training set be {Xi Jt:1, where Xi E IR?.n. The LBG algorithm for designing a 
vector quantizer of dimension n with K quantization vectors and rate of R 
= log2 K /n 
can be summarized as follows: 
1. Choose K arbitrary quantization vectors, {Xk}f=l •each an n-dimensional vec­
tor. 
2. Partition the vectors in the training set into subsets, {;?Jtdf=1, where each subset 
is the set of training vectors that are closest to Xk. 
;?Ilk = {Xi: II Xi - Xk II < II Xi - Xk' 11 for all k' f= k} 
3. Update the quantization vectors by the centroids of ;?Ilk's. Denoting the number 
of training vectors in ;?It k by I ;?It k I , we find updated quantization vectors by 
4. Compute the distortion. If it has not changed substantially from the last step 
stop; otherwise go to step 2. 
The m-file vq.m designs a vector quantizer using the LBG algorithm. 
function [ codebook,distortion ]= VQ(training_ seq,dimension,codebook_ size, tolerance) 
%VQ.m 
vector quantizer design using K-means algorithm 
% 
[ codebook,distortion] = VQ( training _seq ,dimension,codebook_size ,tolerance). 
% 
training_seq = training sequence. 
% 
dimension = dimension of the quantizer. 
% 
codebook_size = size of the codebook (rate=log2(codebook_size)/dimension). 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
% 
tolerance = desired relative distortion (default=0.001). 
% 
Length of training_seq must be a multiple of the dimension of quantizer. 
if (nargin==3) 
tolerance=0.001; 
end 
m=round(length( training_ seq)/ dimension); 
if (m*dimension-length(training_seq)<O) 
error(' length of training_ seq is not a rnul tiple of dimension' ) 
end 
% 
Initialize the codebook. 
initial=training_seq(1 :dimension*codebook_size); 
initialcodebook=(reshape(initial, dimension, codebook_ size)) ' ; 
updated_codebook=initialcodebook; 
% 
first update 
newdistortion=O; 
distortion=O; 
for i=1 :m; 
training_seq_block=training_seq((i-1)*dimension+1 :i*dimension); 
training_matrix(i,:)=training_seq_block; 
distortion_block=[ ]; 
for j=1 :codebook_size; 
distort=sum( (training_ seq_block-updated_codebook(j,:) ). A 2); 
distortion_ block=[ distortion_ block distort]; 
end 
[ distortion_min,ind]=min( distortion_ block); 
newdistortion=newdistortion+distortion_ min; 
index(i)=ind; 
end 
for 1=1 :codebook_size; 
partition=(index==l); 
if sum(partition)>O 
updated_codebook(l,: )=partition *training_ matrix./sum(partition); 
end 
end 
newdistortion=newdistortion/m; 
% 
furthur updated until the desired tolerance is met 
while( abs( distortion -newdistortion)/newdistortion> tolerance) 
distortion=newdistortion; 
newdistortion=O; 
for i=1 :m; 
training_seq_block=training_seq((i-1)*dimension+1 :i*dimension); 
training_matrix(i,: )=training_ seq_block; 
distortion_block=[ ]; 
for j=1 :codebook_size; 
distort=sum( (training_seq_block-updated_codebook(j, :) ). A 2); 
distortion_ block=[ distortion_ block distort]; 
end 
[ distortion_min,ind]=min( distortion_ block); 
newdistortion=newdistortion+distortion_min; 
index(i)=ind; 
end 
for 1=1 :codebook_size; 
partition=(index==l); 
if sum(partition)>O 
151 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

152 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
updated_codebook(l,: )=partition *training_ matrix/sum(partition); 
end 
end 
newdistortion=newdistortion/m; 
end 
codebook=updated_codebook; 
distortion=newdistortion/dimension; 
Illustrative Problem 4.9 [VQ for a Gaussian Source] Using the LBG algorithm, de­
sign two-dimensional vector quantizers of rates 0.5, l, 1.5, 2, 2.5, and 3 for a Gaussian 
source with mean 0 and variance 1. Plot the generated source output vectors and quan­
tization points and determine the distortions. 
For R 
= 1 we have generated 36,000 Gaussian outputs, corresponding to 18,000 output 
vectors using the following set of commands: 
>> r=l; 
>> k=2; 
>> n=2"(r*k); 
>> 
[Cl,Dl]=vq(x,k,n,0.001); 
>> plot(x(:,1:2:36000),x(:,2:2:36000),'.y',Cl(:,l),Cl(:,2), '*k') 
For other values of R similar plots can be generated. Sample plots are shown in 
Figure 4.8. 
Illustrative Problem 4.10 [VQ for a Gauss-Markov Source]: 
Solve Illustrative 
Problem 4.9 for a Gauss-Markov source with p 
= 0.9, and rates R 
= 0.5, 1, 1.5, 2, 
and 2.5. A Gauss-Markov source is obtained from a Gaussian source through the rela­
tion Yi = PYi-1 + Xi-1, where Xi is a Gaussian sequence. 
Again here for R 
= 1 we have 
>> x=randn(l,36000); 
>> y(l)=O; 
>> for i=1:36000 
y(i+l)=0.9*y(i)+x(i); 
end 
>> y=y(2:36001); 
>> r=l; 
>> k=2; 
>> n=2"(r*k); 
>> 
[Cl,Dl]=vq(y,k,n,0.001); 
The plots are given in Figure 4.9. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
5 
4 
. 
.
• :!.! ':' 9EF8G :. . 
2 
0 
-1 
-2 
-3 
-4 
-5 
-5 
5 
4 
3 
2 
0 
-1 
-2 
. 
.
. + .. 
-
.
.. 
. 
• •11• .
. .. 
. 
. 
.. . 
-
, r 
) 
.
. 
' 
-4 
-3 
' 
. 
D=0.2046 
. 
. 
-
.
. 
. 
. * . 
-
.
. 
. 
. 
. 
. 
. . . 
' 
-3 
-
.
. 
.
. 
-4 
-5 
-5 
-4 
-3 
5 
. 
- ' 
. 
. 
.
. 
-2 
?- ..... 
.. 
. 
. 
-2 
4 
·D=0.059 
3 
2 
0 
-1 
-2 
-3 
-4 
-5 
-5 
. . 
. 
. 
'" 
...
.
. 
. 
. 
. .. 
. 
. 
.. 
. 
"' 
.
, . 
' 
.
. 
-4 
-3 
.
. ·. 
• • 
•
•
:•
I 
. 
. 
' 
-2 
• 
J 
•
•
 
' 
-1 
. 
. 
.. 
.. 
 
I 
-1 
.
. 
-1 
·'· 
0 
-· 
0 
. . 
0 
. 
. 
' 
. 
. 
,, 
. 
. 
. . .
. 
• 
J 
•
• 
2 
2 
2 
"· 
',"'-
. ... 
. 
..
.
.
. 
. 
. 
.
. 
. 
. 
. 
. 
. 
3 
4 
. 
-
-
. 
". 
. 
3 
. . 
' 
. 
4 
. 
. 
. 
. 
. 
. 
. 
-
. . 
• 
.. 
• £ 
' 
.. 
3 
4 
5 
5 
5 
Figure 4.8: Vector quantization simulation 
R 
= 0.5, l, 1.5, 2, 2.5, and 3 
5 
4 
3 
2 
0 
-1 
-2 
-3 
-4 
-5 
-5 
5 
4 
3 
2 
0 
-1 
-2 
-3 
-4 
-5 
-5 
5 
4 
3 
2 
0 
-1 
-2 
-3 
-4 
-5 
-5 
D=0.3686 
-4 
-3 
-2 
D=0.1"108 
.• . 
. 
' 
-4 
-3 
D= O.ffi04 
.
. 
' . 
-4 
I 
• -
I 
. 
.
..
. 
.. . ... 
. 
. 
. 
. 
-3 
-2 
' 
-2 
-1 
-1 
-1 
for a Gaussian source 
0 
2 
. ...
.
..... 
0 
0 
. 
. 
' 
1:. 
with 
2 
.. 
. 
. 
k 
. 
2 
3 
. 
. 
3 
.. 
: -
. 
. 
3 
-
. 
153 
4 
. 
. 
' 
4 
'" 
. 
'• 
.
. 
. 
4 
5 
5 
5 
2 at rates 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

154 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
rl = 2.f292 : 
8 
•
.
•
•
.
••
•
•
. , .  
6 
4 
2 
0 
.
.. • .
..
.... 
-2 
.,
. 
-4 
-6 
-8 
. . - .
.
. .
.
 -
. . . 
-10 ....... 
$.._ ......... 
$ ...... 
$ ... 
# .......... 
-10 -8 
-6 
-4 
-2 
0 
2 
4 
6 
8 
10 
D =0.44U 
8 
6 
4 
2 
0 
-2 
-4 
-6 
-8 
-10 
-10 
-5 
0 
10 
8 
6 
4 
2 
0 
-2 
-4 
-6 
-8 
-10 
-10 
5 
D=0.128: 
.
. 
. . . 
. 
.
.
.. .
.. .
. . 
..
.
..
. - . 
.
. -
.
.. .. -
. 
-5 
10 
io.-
.- 
8 
•
. A := P-BC3? .•
.
.
. , 
6 
-
· -
·
·
-
· 
4 
2 
0 
-2 
. . ' 
. . 
-4 
•
. ' 
.
• 
•. 
., I . .. 
I 
-6 
.. . , . .. "l .... , .
.
.. , 
-8 
-10 ....... 
$ ...... 
$--$--.... 
$--............. 
-10 -8 
-6 
-4 
-2 
0 
2 
4 
6 
8 
10 
D = 0.2328 
8 
6 
4 
2 
0 
-2 
-4 
-6 
-8 
. . . 
0 
5 
10 
Figure 4.9: Vector quantization simulation for a Gauss-Markov source with k 
rates R 
= 0.5, l, 1.5, 2, and 2.5 
2 at 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
155 
Vector quantization has found widespread applications in speech and image coding, 
and numerous algorithms for reducing its computational complexity have been pro­
posed. It can be also proved that for stationary and ergodic sources, the performance of 
the vector quantizer approaches the optimal performance given by the rate-distortion 
function as n becomes large. 
4.3.3 
Pulse-Code Modulation 
In pulse-code modulation an analog signal is first sampled at a rate higher than the 
Nyquist rate, and then the samples are quantized. It is assumed that the analog signal 
is distributed on an interval denoted by [ -Xmax. XmaxJ and the number of quantization 
levels is large. The quantization levels can be equal or unequal. In the first case we are 
dealing with a uniform PCM, and in the second case with a nonuniform PCM. 
Uniform PCM 
In uniform PCM the interval [ -Xmax,XmaxJ of length 2Xmax is divided into N equal 
subintervals, each of length. = 2Xmax/ N. If N is large enough, the density function 
of the input in each subinterval can be assumed to be uniform, resulting in a distortion 
of D = .2 /12. If N is a power of 2, or N = 2v, then v bits are required for repre­
sentation of each level. This means that if the bandwidth of the analog signal is W and 
if sampling is done at the Nyquist rate, the required bandwidth for transmission of the 
PCM signal is at least vW (in practice, 1.5vW is closer to reality). The distortion is 
given by 
K2 
D=U 
2 
_ Xmax 
- 3N2 
2 
Xmax 
3 X 4v 
If the power of the analog signal is denoted by X2, the SQNR is given by 
SQNR = 3N2 2 
Xmax 
x2 
=3X4v-2 -
Xmax 
= 3 X 4v X2 
where X denotes the normalized input defined by 
The SQNR in decibels is given by 
-
x 
X=
--
Xmax 
-2 
SQNRlcts 
::: 4.8 + 6v + X lcts 
(4.3.9) 
(4.3.10) 
(4.3.11) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

156 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
After quantization, the quantized levels are encoded using v bits for each quantized 
level. The encoding scheme that is usually employed is natural binary coding (NBC), 
meaning that the lowest level is mapped into a sequence of all O's and the highest level 
is mapped into a sequence of all 1 's. All the other levels are mapped in increasing order 
of the quantized value. 
The m-file u_pcm.m given next takes as its input a sequence of sampled values 
and the number of desired quantization levels and finds the quantized sequence, the 
encoded sequence, and the resulting SQNR (in decibels). 
___ ,., .. ·--------------
function [ sqnr, a_quan,code ]=u_ pcm( a,n) 
%UYCM 
uniform PCM encoding of a sequence 
% 
[SQNR,A_QUAN,CODE]=UYCM(A,N) 
% 
% 
% 
% 
% 
a=input sequence. 
n=number of quantization levels (even). 
sqnr=output SQNR (in dB). 
a_quan=quantized output before encoding. 
code=the encoded output. 
amax=max(abs(a)); 
a_quan=a/amax; 
b_quan=a_quan; 
d=2/n; 
q=d.*[O:n-1]; 
q=q-((n-1 )/2) *d; 
for i=1 :n 
a_quan(find((q(i)-d/2 <= a_quan) & (a_quan <= q(i)+d/2)))= ... 
q(i).*ones(1,length(find((q(i)-d/2 <= a_quan) & (a_quan <= q(i)+d/2)))); 
b_quan(find( a_quan==q(i) ))=(i-1 ).*ones(1,length(find( a_quan==q(i) ))); 
end 
a_quan=a_quan * amax; 
nu=ceil(log2(n)); 
code=zeros(length(a),nu); 
for i=1 :length(a) 
for j=nu:-1 :0 
if ( fix(b_quan(i)/(2 "j)) == 1) 
code(i,(nu-j)) = 1; 
b_quan(i) = b_quan(i) - 2"j; 
end 
end 
end 
sqnr=20*loglO(norm(a)/norm(a-a_quan)); 
Illustrative Problem 4.11 [Uniform PCM] Generate a sinusoidal signal with ampli­
tude 1 and w 
= 1. Using a uniform PCM scheme, quantize it once to 8 levels and 
once to 16 levels. Plot the original signal and the quantized signals on the same axes. 
Compare the resulting SQNRs in the two cases. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
157 
0.8 
0.6 
0.4 
0.2 
-0.2 
-0.4 
-0.6 
-0.8 
2 
3 
4 
5 
6 
7 
8 
9 
10 
Figure 4.10: Uniform PCM for a sinusoidal signal using 8 and 16 levels 
We arbitrarily choose the duration of the signal to be 10 s. Then, using the u_pcm.m 
m-file, we generate the quantized signals for the two cases of 8 and 16 quantization 
levels. The resulting SQNRs are 18.90 dB for the 8-level PCM and 25.13 dB for the 
16-level uniform PCM. The plots are shown in Figure 4.10. 
A MATLAB script for this problem is shown next. 
---®§#ii! ·---------------
% MATLAB script for Illustrative Problem 4 .11. 
echo on 
t=[0:0.01 :1 O]; 
a=sin(t); 
[sqnr8,aquan8,code8]=u_ pcm(a,8); 
[sqnr16,aquan16,code16]=u_pcm(a, 16); 
pause 
% Press a key to see the SQNR for N 
= 8. 
sqnr8 
pause 
% Press a key to see the SQNR for N 
= 16. 
sqnr16 
pause 
% Press a key to see the plot of the signal and its quantized versions. 
plot(t,a,' -',t,aquan8,' -
• ',t,aquan16,' -',t,zeros(1,length(t)}) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

158 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
Illustrative Problem 4.12 [Uniform PCM] Generate a sequence of length 500 of 
zero-mean, unit-variance Gaussian random variables. Using u_pcm.m, find the result­
ing SQNR when the number of quantization levels is 64. Find the first five values of 
the sequence, the corresponding quantized values, and the corresponding codewords. 
The following m-file gives the solution. 
___ ,, ... ·--------------
% MATLAB script for Illustrative Problem 4 .12. 
echo on 
a=randn(1,500); 
n=64; 
[sqnr,a_quan,code]=u_pcm(a,64); 
pause 
% Press a key to see the SQNR. 
sqnr 
pause 
% Press a key to see the first five input values. 
a(1 :5) 
pause 
% Press a key to see the first jive quantized values. 
a_quan(1 :5) 
pause 
% Press a key to see the first jive codewords. 
code(1 :5,:) 
In a typical running of this file, the following values were observed: 
SQNR = 31.66 dB 
Input= [0.1775, -0.4540, 1.0683, -2.2541, 0.5376] 
Quantized values= [0.1569, -0.4708, 1.0985, -2.2494, 0.5754] 
1 
0 
0 
0 
0 
1 
0 
1 
1 
0 
1 
1 
Codewords= 
1 
0 
1 
0 
1 
0 
0 
0 
1 
0 
1 
0 
1 
0 
0 
1 
0 
1 
Note that different runnings of the program result in different values for the input, the 
quantized values, and the codewords. However, the resulting SQNRs are very close. 
-ti!M!!J§il;MIWjiQ;{•]:l!§@I 
Illustrative Problem 4.13 [Quantization Error] In Illustrative Problem 4.12, plot the 
quantization error, defined as the difference between the input value and the quantized 
value. Also, plot the quantized value as a function of the input value. 
The two desired plots are shown in Figure 4 .11. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
159 
0.04 
0.02 
0 
-0.02 
-0.04 
50 
100 
150 
200 
250 
300 
350 
400 
450 
500 
0 
-1 
-2 
-3 
-3 
-2 
-1 
0 
2 
3 
4 
Figure 4.11: Quantization error in uniform PCM for 64 quantization levels 
--tll4-il;fuiltj5ij;t•1:JM#@I 
Illustrative Problem 4.14 [Quantization Error] Repeat Illustrative Problem 4.13 
with the number of quantization levels set once to 16 and set once to 128. Compare the 
results. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

160 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
0.15 
0.1 
0.05 
0 
-0.05 
-0.1 
-0.15 
-0.2 ---------- 
0 
50 
100 
150 
200 
250 
300 
350 
400 
450 
500 
2 
0 
-1 
-2 
-3 ------------ 
-3 
-2 
-1 
0 
2 
3 
Figure 4.12: Quantization error for 16 quantization levels 
The result for 16 quantization levels is shown in Figure 4.12, and the result for 128 
quantization levels is shown in Figure 4.13. 
Comparing Figures 4.11, 4.12, and 4.13, it is obvious that the larger the number of 
quantization levels, the smaller the quantization error, as expected. Also note that for 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
0.025 .--,.--.--.--r--r--.---.---.--.--. 
0.02 f-
O.Dl5 
O.Ql 
0.005 
000: 1111 
-0.01 
-0.015 
-0.02 f-
-
-
-0.025 '---'---'---'--'---'---'---'---'--'--' 
0 
50 
100 
150 
200 
250 
300 
350 
400 
450 
500 
-1 
-2 
-3'----'---'----'----'----'-----' 
-3 
-2 
-1 
0 
2 
3 
Figure 4.13: Quantization error for 128 quantization levels 
161 
a large number of quantization levels, the relation between the input and the quantized 
values tends to a line with slope 1 passing through the origin; that is, the input and the 
quantized values become almost equal. For a small number of quantization levels (16, 
for instance), this relation is far from equality, as shown in Figure 4.12. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

162 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
Nonuniform PCM 
Many physical signals, such as speech signals, have the characteristic that small signal 
amplitudes occur more frequently than large signal amplitudes. However, a uniform 
quantizer provides the same spacing between successive levels throughout the entire 
dynamic range of the signal. A better approach would be to have a nonuniform quan­
tizer, which provides more closely spaced levels at the small signal amplitudes and 
more widely spaced levels at the large signal amplitudes. 
A nonuniform quantizer characteristic is usually obtained by passing the signal 
through a nonlinear device that compresses the signal amplitudes, followed by a uni­
form PCM quantizer. At the receiving end of the communication system, the received 
signal is passed through the inverse of the nonlinear element used in the transmitter 
to expand the signal amplitude. Thus, the combination of a signal compressor at the 
transmitter and an expander at the receiver is called a compander. The overall effect is 
equivalent to a PCM system with nonuniform spacing between levels. 
For example, a logarithmic compressor employed in U.S. and Canadian telecom­
munication systems for speech transmission is called a µ-law compressor and has an 
input-output magnitude characteristic of the form 
_ 
( ) 
_ log( 1 + µIx I) 
( ) 
Y -B x -
log(l + µ) 
sgn x 
(4.3.12) 
where xis the normalized input (lxl :-:: 1) andµ is a parameter that in standard µ-law 
nonlinearity is equal to 255. A plot of this nonlinearity for different values of µ is 
shown in Figure 4.14. 
The inverse of µ-law nonlinearity is given by 
(l+µ)IYl-1 
x = 
sgn(y) 
µ 
(4.3 .13) 
Logarithmic µ 
= 2 5 5 is widely used in waveform encoding of speech for digital 
transmission. The typical bit rate for PCM is 64,000 bps (8 bits/sample). 
The second widely used logarithmic compressor is the A-law compander. The 
characteristics of this compander are given by 
( ) 
_ 1 + log A Ix I 
( ) 
B x -
1 + log A 
sgn x 
(4.3.14) 
where A is chosen to be 87.56. The performance of this compander is comparable to 
the performance of the µ-law compander. 
The two m-files mulaw.m and invmulaw.m given below implement µ-law nonlin­
earity and its inverse. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
163 
0.8 
0.6 
0.4 
0.2 
-0.2 
-0.4 
-0.6 
-0.8 
-0.8 
-0.6 
-0.4 
-0.2 
0 
0.2 
0.4 
0.6 
0.8 
Figure 4.14: The µ-law compander 
__., .... ·---------------
function [y,a]=mulaw(x,mu) 
%MULAW mu-law nonlinearity for nonuniform 
% Y=MULAW(X,MU). 
% X=input vector. 
a=max(abs(x)); 
y=(log(1 +mu*abs(x/a)).nog(1 +mu)). *sign(x); 
__., .... ·---------------
function x=invmulaw(y,mu) 
%/NVMULAW the inverse of mu-law nonlinearity 
%X=INVMULAW(Y,MU) Y=normalized output of the mu-law nonlinearity. 
x=(((1 +mu). !(abs(y))-1 )./mu).*sign(y); 
The m-file mula_pcm.m is the equivalent of the m-file u_pcm.m when using aµ­
law PCM scheme. This file is given next and is used with µ-law PCM systems. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

164 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
function [sqnr,a_quan,code]=mula_pcm(a,n,mu) 
%MULA_FCM 
mu-law PCM encoding of a sequence 
% 
[SQNR,A_QUAN,CODE]=MULA_FCM(A,N,MU). 
% 
a=input sequence. 
% 
% 
% 
% 
n=number of quantization levels (even). 
sqnr=output SQNR (in dB). 
a...quan=quantized output before encoding. 
code=the encoded output. 
[y ,maximum]=mulaw(a,mu); 
[sqnr,y_q,code]=u_pcm(y,n); 
a_quan=invmulaw(y _q,mu); 
a_quan=maximum*a_quan; 
sqnr=20*log 1 O(norm( a)/norm( a -a_ quan)); 
Illustrative Problem 4.15 [Nonuniform PCM] Generate a sequence of random vari­
ables of length 500 according to an JV(O, 1) distribution. Using 16, 64, and 128 quanti­
zation levels and a µ-law nonlinearity withµ = 2 5 5, plot the error and the input-output 
relation for the quantizer in each case. Also determine the SQNR in each case. 
Let the vector a be the vector of length 500 generated according to JV(O, l); that is, 
let 
a= randn(l, 500) 
Then by using 
[dist,a_quan,code] = mula_pcm(a, 16, 255) 
we can obtain the quantized sequence and the SQNR for a 16-level quantization. The 
SQNR will be 13.76 dB. For the case of 64 levels we obtain SQNR = 25.89 dB, and 
for 128 levels we have SQNR = 31.76 dB. Comparing these results with the uniform 
PCM, we observe that in all cases the performance is inferior to the uniform PCM. 
Plots of the input-output relation for the quantizer and the quantization error are given 
in Figures 4.15, 4.16, and 4.17. 
Comparing the input-output relation for the uniform and the nonuniform PCM 
shown in Figures 4.12 and 4.15 clearly shows why the former is called uniform PCM 
and the latter is called nonuniform PCM. 
From the preceding example we see that the performance of the nonuniform PCM, 
in this case, is not as good as the uniform PCM. The reason is that in the preceding 
example the dynamic range of the input signal is not very large. The next example 
examines the case where the performance of the nonuniform PCM is superior to the 
performance of the uniform PCM. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
165 
0.8 
0.6 
0.4 
0.2 
0 
-0.2 
-0.4 
-0.6 
-0.8 
-1 	
 
0 
50 
100 
150 
200 
250 
300 
350 
400 
450 
500 
2 
1.5 
0.5 
0 
-0.5 
-1 
-1.5 
-2 
-2.5'--'--'-	'--'--'--' 
-3 
-2 
-1 
0 
2 
3 
Figure 4.15: Quantization error and quantizer input-output relation for a 16-level 
µ-law PCM 
Illustrative Problem 4.16 [Nonuniform PCM] The nonstationary sequence a of 
length 500 consists of two parts. The first 20 samples are generated according to a 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

166 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
0.2 
0.15 
0.1 
0.05 
0 
-0.05 
-0.1 
-0.15 
-0.2 
-0.25 ---------- 
0 
50 
100 
150 
200 
250 
300 
350 
400 
450 
500 
2 
0 
-1 
-2 
-3------------ 
-3 
-2 
-1 
0 
2 
3 
Figure 4.16: Quantization error and quantizer input-output relation for a 64-level 
µ-law PCM 
Gaussian random variable with mean 0 and variance 400 (er 
= 20), and the next 480 
samples are drawn according to a Gaussian random variable with mean 0 and variance 
1. This sequence is quantized once using a uniform PCM scheme and once using a 
nonuniform PCM scheme. Compare the resulting SQNR in the two cases. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
167 
0.1 
0.05 
0 
-0.05 
-0.1 
-0.15 
0 
50 
100 
150 
200 
250 
300 
350 
400 
450 
500 
2 
0 
-1 
-2 
-3 	
 
-3 
-2 
-1 
0 
2 
3 
Figure 4.17: Quantization error and quantizer input-output relation for a 128-level 
µ-law PCM 
The sequence is generated by the MATLAB command 
a= [20 * randn(l, 20) 
randn(l, 480)] 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

168 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
Now we can apply the u_pcm.m and the mula_pcm.m files to determine the resulting 
SQNR. The resulting SQNRs are 20.49 dB and 24.95 dB, respectively. In this case the 
performance of the nonuniform PCM is definitely superior to the performance of the 
uniform PCM. 
4.3.4 
Differential Pulse-Code Modulation (DPCM) 
In a PCM system, after sampling the information signal, each sample is quantized in­
dependently using a scalar quantizer. This means that previous sample values have no 
effect on the quantization of the new samples. However, when a bandlimited random 
process is sampled at the Nyquist rate or faster, the sampled values are usually corre­
lated random variables. The exception is the case when the spectrum of the process is 
flat within its bandwidth. This means that the previous samples give some information 
about the next sample; thus, this information can be employed to improve the perfor­
mance of the PCM system. For instance, if the previous sample values were small, and 
there is a high probability that the next sample value will be small as well, then it is not 
necessary to quantize a wide range of values to achieve a good performance. 
In the simplest form of differential pulse-code modulation (DPCM), the difference 
between two adjacent samples is quantized. Because two adjacent samples are highly 
correlated, their difference has small variations; therefore, to achieve a certain level of 
performance, fewer levels (and therefore fewer bits) are required to quantize it. This 
means that DPCM can achieve performance levels at lower bit rates than PCM. 
Figure 4.18 shows a block diagram of this simple DPCM scheme. As seen in the 
figure, the input to the quantizer is not simply Xn -Xn-1 but rather Xn - Y-"_1. We 
will see that Y"_ 1 is closely related to Xn-1, and this choice has an advantage because 
the accumulation of quantization noise is prevented. The input to the quantizer Yn is 
quantized by a scalar quantizer (uniform or nonuniform) to produce Yn. Using the 
relations 
Yn = Xn - Y"-1 
(4.3.15) 
and 
f" = Yn + f"-1 
(4.3.16) 
we obtain the quantization error between the input and the output of the quantizer as 
Q 
T=l 
Yn - Yn = Yn - (Xn - Y"-1) 
= Yn -Xn + Y"-1 
= Y" -Xn 
I\ 
I\ 
y" 
T 
I\ 
I\ 
Y' 
xn-1 
n 
T=l I· 
Figure 4.18: A simple DPCM encoder and decoder 
I\ 
xn 
( 4.3.17) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
169 
At the receiving end, we have 
(4.3.18) 
Comparing Equation (4.3.16) and Equation (4.3.18) we see that ¥:i and Xn satisfy the 
same difference equation with the same excitation function (Yn). Therefore, if the 
initial conditions of r:i and Xn are chosen to be the same, they will be equal. For 
instance, if we let Y71 
= X-1 
= o, then for all n we will have ¥:i 
= Xn. Substituting 
this in Equation (4.3.17), we obtain 
Yn - Yn = Xn -Xn 
(4.3.19) 
This shows that the quantization error between Xn and its reproduction Xn is the same 
as the quantization error between the input and the output of the quantizer. However, 
the range of variations of Yn is usually much smaller than that of Xn; therefore, Yn 
can be quantized with fewer bits. For example, when DPCM is used for waveform en­
coding of speech signals with 4 bits/sample at a sampling rate of 8000 samples/second, 
we achieve the same level of signal fidelity as PCM (µ 
= 255 compander) with 8 
bits/sample. Thus, the bit rate for digital transmission of speech using DPCM is re­
duced to 32,000 bps. 
IMl@il;MlTj§l#lj;l•1:11¥@1 
Illustrative Problem 4.17 [DPCM] A sampled speech waveform is given by the file 
speech_sample.wav. This sequence is quantized using DPCM, µ-law PCM, and uni­
form PCM, where all these schemes employ 8 bits/sample. Plot the quantization error 
for each of the three schemes and determine the corresponding SQNR. 
Figures 4.19, 4.20, and 4.21 illustrate the quantization errors for the three PCM 
encoding methods. We observe that the errors in DPCM are significantly lower. The 
x 10-3 
DPCMError 
2 
1.5 
0.5 
0 
-0.5 
-1 
-1.5 
-2 
-2.5 
0 
2000 
4000 
6000 
8000 
10000 
12000 
14000 
16000 
Figure 4.19: Figure for DPCM in Illustrative Problem 4.17 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

170 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
Mu-PCM Error 
0.015 
0.01 
0.005 
0 
-0.005 
-0.01 
0 
2000 
4000 
6000 
8000 
10000 
12000 
14000 
16000 
Figure 4.20: Figure for µ-law PCM in Illustrative Problem 4.17 
x 10-3 
Uniform PCM Error 
2.5-------- 
2 
1.5 
0.5 
0 
-0.5 
-1 
-1.5 
-2 
-2.5 -------- 
0 
2000 
4000 
6000 
8000 
10000 
12000 
14000 
16000 
Figure 4.21: Figure for Illustrative Problem 4.17 
corresponding SQNR's for DPCM, µ-law PCM, and uniform PCM are 52.8, 37 .8, and 
34.4 dB, respectively. 
The MATLAB script for this problem is given below. 
---®Ii" •---------------
% MATLAB script for Illustrative Problem 4 .17 
echo on; 
X=wavread(' speech_sarnple ')'; 
mu=255; n=256; 
% Diferential PCM of Sequence X: 
[sqnr_dpcm,X_quan_dpcm,code_dpcm]=d_pcm(X,n); 
pause 
% Press any key to see a plot of error in diferential PCM. 
plot(X -X_quan_dpcm) 
title(' DPCM Error'); 
% Mu-Law PCM PCM of sequence X: 
[sqnr_mula_pcm,X_quan_mula_pcm,code_mula_pcm]=mula_pcm(X,n,mu); 
pause % Press any key to see a plot of error in mu-law PCM. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
figure 
plot(X -X_quan_mula_pcm) 
title(' Mu-PCM Error'); 
% Uniform of Sequence X: 
[sqnr_upcm,X_quan_upcm,code_upcm]=u_pcm(X,n); 
pause % Press any key to see a plot of error in uniform PCM. 
figure 
plot(X-X_quan_upcm) 
title('Uniforrn PCM Error'); 
pause % Press any key to see SQNR for Uniform PCM 
sqnr_upcm 
pause % Press any key to see SQNR for Mu-law PCM 
sqnr_mula_pcm 
pause % Press any key to see SQNR for DPCM 
sqnr_dpcm 
4.3.5 
Delta Modulation (DM) 
171 
Delta modulation is a simplified version of the DPCM system shown in Figure 4 .18. In 
delta modulation, the quantizer is a one-bit (two-level) quantizer with magnitudes±.. 
A block diagram of a DM system is shown in Figure 4.22. The same analysis that was 
applied to the simple DPCM system is valid here. 
In delta modulation only one bit per sample is employed, so the quantization noise 
will be high unless the dynamic range of Yn is very low. This, in tum, means that Xn 
and Xn-1 must have a very high correlation coefficient. To have a high correlation 
between Xn and Xn-1, we have to sample at rates much higher than the Nyquist rate. 
Therefore, in DM, the sampling rate is usually much higher than the Nyquist rate, but 
because the number of bits per sample is only one, the total number of bits per second 
required to transmit a waveform is lower than that of a PCM system. 
A major advantage of delta modulation is the very simple structure of the system. 
At the receiving end, we have the following relation for the reconstruction of Xn: 
(4.3.20) 
Q 
A 
T=l 
y)-1 
T=l 
Figure 4.22: Delta modulation 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

172 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
en= ±1 
Q 
---<Accumulator 1-- 
" 
x. 
Accumulator ,_ ___ 
Figure 4.23: Delta modulation with integrators 
Solving this equation for Xn, and assuming zero initial conditions, we obtain 
n 
Xn = L Yi 
(4.3 .21) 
i=O 
This means that to obtain Xn, we only have to accumulate the values of Yn. If the sam­
pled values are represented by impulses, the accumulator will be a simple integrator. 
This simplifies the block diagram of a DM system, as shown in Figure 4.23. 
The step size 2 is a very important parameter in designing a delta modulator sys­
tem. Large values of2 cause the modulator to follow rapid changes in the input signal; 
but at the same time, they cause excessive quantization noise when the input changes 
slowly. This case is shown in Figure 4.24. 
For large2. when the input varies slowly, a large quantization noise occurs; this 
is known as granular noise. The case of a too small2 is shown in Figure 4.25. In 
Figure 4.24: Large2 and granular noise 
Figure 4 .25: Small 2 and slope overload distortion 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
173 
this case, we have a problem with rapid changes in the input. When the input changes 
rapidly (high-input slope), it takes a rather long time for the output to follow the input, 
and an excessive quantization noise is caused in this period. This type of distortion, 
which is caused by the high slope of the input waveform, is called slope overload 
distortion. 
Adaptive Delta Modulation 
We have seen that a step size that is too large causes granular noise, and a step size that 
is too small results in slope overload distortion. This means that a good choice for 6 is 
a "medium" value; but in some cases, the performance of the best medium value (i.e., 
the one minimizing the mean squared distortion) is not satisfactory. An approach that 
works well in these cases is to change the step size according to changes in the input. 
If the input tends to change rapidly, the step size must be large so that the output can 
follow the input quickly and no slope overload distortion results. When the input is 
more or less flat (slowly varying), the step size is changed to a small value to prevent 
granular noise. Such changes in the step size are shown in Figure 4.26. 
Figure 4.26: Performance of adaptive delta modulation 
To adaptively change the step size, we have to design a mechanism for recognizing 
large and small input slopes. If the slope of the input is small, the output of the quantizer 
Y alternates between 6 and -6, as shown in Figure 4.26. This is the case where 
granular noise is the main source of noise, and we have to decrease the step size. 
However, in the case of slope overload, the output cannot follow the input rapidly 
and the output of the quantizer will be a succession of +6's or -6's. We can see that 
the sign of two successive Yn's is a good criterion for changing the step size. If the two 
successive outputs have the same sign, the step size should be increased; if they are of 
opposite signs, it should be decreased. 
A particularly simple rule to change the step size is given by 
(4.3.22) 
where En is the output of the quantizer before being scaled by the step size and K is 
some constant larger than one. It has been verified that in the range of 20-60 kb/s 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

174 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
range, with a choice of K 
= 1. 5, the performance of adaptive delta modulation systems 
is 5-10 dB better than the performance of delta modulation when applied to speech 
sources. 
--t!IMllJ§il;MIW§lij;l•1:1M§i@I 
Illustrative Problem 4.18 [Quantization Noise in DM] Load the sampled speech 
signal given in Illustrative Problem 4.17. Expand the length of the sequence to 64000 
by linearly interpolating and inserting three additional samples between successive 
samples of the original 16,000-point sequence. Apply DM to the interpolated sequence 
using 6 
= 0.034 and evaluate the SQNR and plot the quantization error. Compare 
the SQNR with that of DPCM that employs 4 bits/sample on the original 16,000-point 
sequence. 
Figure 4.27 illustrates the quantization error for the DM system when 6 
= 0.034. 
The corresponding SQNR is 6.94 dB. The SQNR for DPCM with 16 levels, when 
applied to the waveform before interpolation, is 28.52 dB. 
Error in delta modulator 
Error in DPCM 
0.4 
0.03 
0.2 
0.02 
0.01 
0 
0 
-0.2 
-0.01 
-0.02 
-0.4 
-0.03 
-0.6
0 
2 
4 
6 
8 -0.04 
0 
0.5 
x 104 
Figure 4.27: Figure for Illustrative Problem 4.18 
The MATLAB script for this problem is given below. 
1.5 
2 
x 104 
___ ,, ... ·--------------
% MATLAB script for Illustrative Problem 4.18 
echo on 
X = wavread(' speech_ sample')' ; 
XXX = lin_intplt3p(X); 
delta=0.034; 
[XXX_quan_dm, sqnr_dm] = delta_mod(XXX,delta); 
QE_dm = XXX-XXX_quan_dm; 
levels = 16; 
[sqnr_dpcm,X_quan_dpcm,code_dpcm] = d_pcm(X,levels); 
QE_dpcm = X-X_quan_dpcm; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

4.3. QUANTIZATION 
pause % Press any key to see a plot of error in DM. 
figure 
plot(QE_dm,' -k') 
title(' Error in delta modulator') 
pause % Press any key to see a plot of error in DPCM. 
figure 
plot(QE_dpcm, '-k') 
title(' Error in DPCM') 
pause % Press any key to see values of SQNR for DM. 
sqnr_dm 
pause % Press any key to see values of SQNR for DPCM. 
sqnr_dpcm 
175 
Illustrative Problem 4.19 [Adaptive Delta Modulation] Apply the adaptive step size 
given in (4.3.22) with K = 1.5 and9 
= 0.1 to the 64000-point sequence in Illustrative 
Problem 4.18. Plot the resulting quantization error and evaluate the SQNR. Compare 
these results with the quantization error and SQNR for DM in Illustrative Problem 4.18, 
where 9 
= 0.034 was used. 
Figure 4.28 illustrates the quantization for the adaptive DM system. The corre­
sponding SQNR is 13.2 dB, which is 6.22 dB higher than the SQNR for DM. 
Error in adaptive delta modulator 
0.4-------- 
0.3 
0.2 
0.1 
0 
-0.1 
-0.2 
-0.3 .__ 
___ __,_ 
___ ___._ 
____ ..._ 
___ __, 
0 
2 
4 
6 
8 
x 104 
Figure 4.28: Figure for Illustrative Problem 4.19 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

176 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
The MATLAB script for this problem is given below. 
--®Ii" •----------------
% MATLAB scriptfor Illustrative Problem 4.19. 
X = wavread(' speech_sample')'; 
XXX = lin_intplt3p(X); 
delta_in=0.01; 
K=1.5; 
(X_quan_adm, sqnr_adm] = adpLdelta_mod(XXX,K,delta_in); 
QE_adm=XXX-X_quan_adm; 
pause % Press any key to see a plot of error in ADM. 
figure 
plot(QE_adm,' -k') 
title('Error in adaptive delta modulator') 
pause % Press any key to see values of SQNR for ADM. 
sqnr_adm 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
177 
Problems 
4.1 Design a Huffman code for an information source with probabilities 
p 
= {0.l, 0.05, 0.21, 0.07, 0.02, 0.2, 0.2, 0.15} 
Determine the efficiency of the code by computing the average codeword length and 
the entropy of the source. 
4.2 A discrete-memoryless information source is described by the probability vector 
p 
= {0.2, 0.3, 0.1, 0.4}. 
a. Write a MATLAB file to compute the probabilities of the Kth extension of this 
source for a given K. 
b. Design Huffman codes for this source and its Kth extensions for K = 1, 2, 3, 4, 5. 
c. Plot the average codeword length (per source output) as a function of K. 
4.3 The probabilities of the letters of the alphabet occurring in printed English are 
given in Table 4.1. 
a. Determine the entropy of printed English. 
b. Design a Huffman code for printed English. 
c. Determine the average codeword length and the efficiency of the Huffman code. 
4.4 Repeat Problem 4.2 for a discrete-memoryless source with a probability vector 
p 
= {0.5, 0.25, 0.125, 0.125}. Explain why the result in this case is different from the 
result obtained in Problem 4.2. 
4.5 A binary source has two outputs, a 1 and az, with probabilities 0 .9 and 0 .1. 
a. Design Huffman codes for this source and its nth extension (i.e., taking n letters 
at a time), forn = 2, 3, 4, 5, 6, 7, and find the average codeword length per single 
source outputs in each case. 
b. Plot the average codeword length per single source output found in part (a) as a 
function of n. On the same plot indicate the entropy of the source. 
c. Repeat parts (a) and (b) for a binary source with probabilities 0.6 and 0.4 and 
notice the difference with the first source. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

178 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
Letter 
Probability 
A 
0.0642 
B 
0.0127 
c 
0.0218 
D 
0.0317 
E 
0.1031 
F 
0.0208 
G 
0.0152 
H 
0.0467 
I 
0.0575 
J 
0.0008 
K 
0.0049 
L 
0.0321 
M 
0.0198 
N 
0.0574 
0 
0.0632 
p 
0.0152 
Q 
0.0008 
R 
0.0484 
s 
0.0514 
T 
0.0796 
u 
0.0228 
v 
0.0083 
w 
0.0175 
x 
0.0013 
y 
0.0164 
z 
0.0005 
Word space 
0.1859 
Table 4 .1: Probabilities of letters in printed English 
4.6 A continuous information source has a zero-mean, unit-variance Gaussian distribu­
tion. This source is quantized using a uniform symmetric quantizer, where the length 
of the quantization regions is unity. 
The number of quantization levels is N. 
For 
N = 2, 3, 4, 5, 6, 7, 8, determine the entropy of the quantized source output and plot it 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
179 
as a function of N. On the same graph, plot log2N versus N and explain why the two 
curves differ. 
4.7 A zero-mean, unit-variance Gaussian source is quantized using a uniform quan­
tizer. The quantizer uniformly quantizes the interval [ -10, 10]. Assuming the quan­
tization levels are located at midpoints of the quantization regions, determine and plot 
the mean-square distortion for N = 3, 4, 5, 6, 7, 8, 9, 10 as a function of N, the number 
of quantization levels. 
4.8 Consider two random variables X1 and X2, X1 being a Gaussian random variable 
with mean zero and variance 2 and X2 being a Laplacian random variable with proba­
bility density function 
1 
j(xz) 
= -e-lx2I 
2 
a. Verify that the two random variables have equal variances. 
b. Using the lloydmax.m file, design quantizers with 2, 3, ... , 10 levels for both 
sources and find the corresponding distortions and give them in a table. 
c. Define the SQNR for each random variable Xi as SQNRi 
= Efl for i 
= 1, 2, 
and for different values of N (2 to 10) plot SQNR 1 and SQNR2 as a function of 
N on the same plot. 
4.9 On the same figure that you plotted in Problem 4.7, plot the mean-square distortion 
when the quantization levels are taken to be the centroids of the quantization regions. 
For what values of N are the two plots closer and why? 
4.10 For a zero-mean, unit-variance Gaussian source, design optimal nonuniform quan­
tizers with a number of levels N 
= 2, 3, 4, 5, 6, 7, 8. For each case determine H(X), 
the entropy of the quantized source, and R, the average codeword length of a Huffman 
code designed for that source. Plot H (X), R, and log2N as a function of N on the same 
figure. 
4.11 A Laplacian random variable is defined by the probability density function 
i\ 
f (x) 
= -e-.\lxl 
2 
where i\ > 0 is a given constant. 
a. Verify that the variance of a Laplacian random variable is equal to 2 / i\ 2. 
b. Assuming i\ = 1, design uniform quantizers with N = 2, 3, 4, 5, 6, 7, 8 levels for 
this source. As usual, take the interval of interest to be [-lOcr, lOcr], where CT 
is the standard deviation of the source. 
c. Plot the entropy of the quantized source and log2N as functions of N on the 
same figure. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

180 
CHAPTER 4. ANALOG-TO-DIGITAL CONVERSION 
4.12 Repeat Problem 4.11, substituting the uniform quantizer with the optimal nonuni­
form quantizer. 
4.13 Design an optimal 8-level quantizer for a Laplacian source and plot the resulting 
mean-square distortion as a function of A as A changes in the interval [0.1, 5]. 
4.14 Design optimal nonuniform quantizers with N 
= 2, 3, 4, 5, 6, 7, 8 for the Lapla­
cian source given in Problem 4.11 with A 
= .J2 (note that this choice of A results in 
a zero-mean, unit-variance Laplacian source). Plot the mean-square error as a func­
tion of N for this source. Compare these results with those obtained from quantizing a 
zero-mean, unit-variance Gaussian source. 
4.15 Solve Illustrative Problem 4.10 with p 
= 0.1, 0.3, 0.7, 0.99. Compare the results 
and comment on the effect of p on the resulting distortion. 
4.16 Solve Problem 4.15 using a scaler quantizer. Compare the results with the results 
of Problem 4.15 and comment on how memory affects the performance of a vector 
quantizer. 
4.17 The periodic signal x ( t) has a period of 2 and in the interval [ 0, 3] is defined as 
x(t) 
= {t, 
-t + 3, 
O::;t<l.5 
l.5::;t<3 
a. Design an 8-level uniform PCM quantizer for this signal and plot the quantized 
output of this system. 
b. Plot the quantization error for this system. 
c. By calculating the power in the error signal, determine the SQNR for this system 
in decibels. 
d. Repeat parts (a), (b), and (c) using a 16-level uniform PCM system. 
4.18 Generate a Gaussian sequence with mean equal to 0 and variance equal to 1 with 
1000 elements. Design 4-level, 8-level, 16-level, 32-level, and 64-level uniform PCM 
schemes for this sequence and plot the resulting SQNR (in decibels) as a function of 
the number of bits allocated to each source output. 
4.19 Generate a zero-mean, unit-variance Gaussian sequence with a length of 1000 and 
quantize it using a 6-bit-per-symbol uniform PCM scheme. The resulting 6000 bits are 
transmitted to the receiver via a noisy channel. The error probability of the channel 
is denoted by p. Plot the overall SQNR in decibels as a function of p for values of 
p = 10-3, 5x10-3, 10-2, 5x10-2, 0.1, 0.2. For simulation of the effect of noise, you 
can generate binary random sequences with these probabilities and add them (modulo 
2) to the encoded sequence. 
4.20 Repeat Problem 4.17 using a nonuniform µ-law PCM withµ = 2 5 5. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
181 
4.21 Repeat Problem 4.18 using a nonuniform µ-law PCM withµ= 255. 
4.22 Repeat Problem 4.19 using a nonuniform µ-law PCM withµ= 255. 
4.23 Plot the A-law compander characteristic given in (4.3.14) for A = 87.56 and 
theµ = 255 compander characteristic given in (4.3.12) and, thus, compare these two 
characteristics. 
4.24 Repeat Illustrative Problem 4.17 for the sequence of samples from the Gauss­
Markov process 
Xn = 0.98Xn-l + Wn, 
n = 1, 2, ... , 1000 
4.25 Repeat Illustrative Problem Problem 4.18 for the sequence of samples from the 
Gauss-Markov process 
Xn = 0.98Xn-l + Wn, 
n = 1, 2, ... , 1000 
Try different values for 9 and notice their effect on the SQNR. 
4.26 Repeat Illustrative Problem 4.19 for the sequence of samples from the Gauss­
Markov process 
Xn = 0.98Xn-l + Wn, 
n = 1, 2, ... ' 1000 
Try different values of Kand9 and notice their impact on the SQNR. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

Copyright 2011 Cengage Learning. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

Chapter 5 
Baseband Digital Transmission 
5.1 
Preview 
In this chapter we consider several baseband digital modulation and demodulation tech­
niques for transmitting digital information through an additive white Gaussian noise 
channel. We begin with binary pulse modulation and then we introduce several non­
binary modulation methods. We describe the optimum receivers for these different 
signals and consider the evaluation of their performance in terms of the average prob­
ability of error. 
5 .2 
Binary Signal Transmission 
In a binary communication system, binary data consisting of a sequence of O's and 
l's are transmitted by means of two signal waveforms, say, 5o(t) and 51 (t). Suppose 
that the data rate is specified as R bits per second. Then each bit is mapped into a 
corresponding signal waveform according to the rule 
0--+ 5o(t), 
1 --+ 51 ( t)' 
0 ::; t ::; Tb 
0 ::; t ::; Tb 
where Tb 
= 1 / R is defined as the bit time interval. We assume that the data bits 0 
and 1 are equally probable-that is, each occurs with probability 	-and are mutually 
statistically independent. 
The channel through which the signal is transmitted is assumed to corrupt the sig­
nal by the addition of noise, denoted as n ( t), which is a sample function of a white 
Gaussian process with power spectrum No/2 watts/hertz. Such a channel is called an 
additive white Gaussian noise (AWGN) channel. Consequently, the received signal 
waveform is expressed as 
r(t) = 5i(t) + n(t), 
i = 0, 1, 
(5.2.1) 
183 
Copyright 2011 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not material1y affect the overall learning experience. Cengage Leaming reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

184 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
The task of the receiver is to determine whether a 0 or a 1 was transmitted after 
observing the received signal r(t) in the interval 0 :-:: t :-:: Tb. The receiver is designed 
to minimize the probability of error. Such a receiver is called the optimum receiver. 
5.2.1 
Optimum Receiver for the AWGN Channel 
In nearly all basic digital communication texts, it is shown that the optimum receiver for 
the AWGN channel consists of two building blocks. One is either a signal correlator 
or a matched filter. The other is a detector. 
Signal Correlator 
The signal correlator cross-correlates the received signal r ( t) with the two possible 
transmitted signals so ( t) and si( t), as illustrated in Figure 5 .1. That is, the signal 
correlator computes the two outputs 
ro(t) = J: r(T)so(T) dT 
r1 (t) = f: r(T)S1 (T) dT 
(5.2.2) 
in the interval 0 :-:: t :-:: Tb, samples the two outputs at t = Tb, and feeds the sampled 
outputs to the detector. 
JO dr: 
r(t) 
JO dr: 
I 
Sample 
at t = 1/, 
Detector 
Output data 
Figure 5.1: Cross-correlation of the received signal r(t) with the two transmitted sig­
nals 
--llMll§jl;§ilNii;t•]:JMB@I 
Illustrative Problem 5.1 [Signal Correlator] Suppose the signal waveforms so(t) 
and si(t) are as shown in Figure 5.2, and let so(t) be the transmitted signal. Then 
the received signal is 
r(t) = so(t) + n(t), 
(5.2.3) 
Determine the correlator outputs at the sampling instants. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.2. BINARY SIGNAL TRANSMISSION 
s0(t) 
Ai--- 
0 
A 
0 
-A 
185 
Figure 5.2: Signal waveforms so(t) and 51 (t) for a binary communication system 
When the signal r ( t) is processed by the two signal correlators shown in Figure 5 .1, 
the outputs ro and r1 at the sampling instant t = Tb are 
and 
ro = J :b r(t)so(t) dt 
= f :b s6(t) dt + f :b n(t)so(t) dt 
= E+no 
r1 = J :b r(t)s1 (t) dt 
= J :b so(t)s1 (t) dt + J :b n(t)s1 (t) dt 
= n1 
(5.2.4) 
(5.2.5) 
where no and n 1 are the noise components at the output of the signal correlators; that 
is, 
no= J :b n(t)so(t) dt 
n1 = J :b n(t)s1 (t) dt 
(5.2.6) 
and E = A 2 Tb is the energy of the signals so ( t) and s1 ( t) . We also note that the two 
signal waveforms are orthogonal; that is, 
J :b so(t)s1 (t) dt = 0 
(5.2.7) 
On the other hand, when 51 (t) is the transmitted signal, the received signal is 
r(t) = s1 (t) + n(t), 
It is easy to show that, in this case, the signal correlator outputs are 
(5.2.8) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

186 
E 
0 
Output of 
Correlator 0 
Tb 
E 
2 
0 
(a) 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
Output of 
Correlator 1 
Tb 
Tb 
2 
E 
2 
0 
Output of 
Correlator 0 
(b) 
E 
0 
Output of 
Correlator 1 
Figure 5.3: Noise-free correlator outputs. (a) so(t) was transmitted. (b) s1 (t) was 
transmitted 
Figure 5 .3 illustrates the two noise-free correlator outputs in the interval 0 .:-:: t .:-:: Tb for 
each of the two cases-that is, when so(t) is transmitted and when s1 (t) is transmitted. 
Because n(t) is a sample function of a white Gaussian process with power spec­
trum No/2, the noise components no and n1 are Gaussian with zero means-that is, 
'Tb 
E(no) = Jo so(t)E [n(t)] dt = 0 
'Tb 
E(n1) = Jo s1(t)E[n(t)] dt = 0 
and variances al, for i = 1, 2, where 
al = E(n ) 
'Tb 'Tb 
= Jo Jo Si(t)si(T)E[n(t)n(T)] dt dT 
N 'Tb 
= -f Jo Si(t)si(T)D(t-T)dtdT 
= __Q 
s? (t) dt 
N, f
Tb 
2 0 
i 
ENo 
2 
' 
i = 0, 1 
(5.2.9) 
(5.2.10) 
(5.2.11) 
Therefore, when so ( t) is transmitted, the probability density functions of ro and r1 are 
p(ro I so(t) was transmitted) = -J2IT
-
2
--
cr
-e- (ro-E)2/2a2 
( 
I 
( ) 
. 
d) 
1 
-rz /2a2 
p r1 s0 t was transm1tte 
= --fi
-2-rr-cr-e 
1 
(5.2.12) 
These two probability density functions, denoted as p(ro I 0) and p(r1 I 0), are 
illustrated in Figure 5 .4. Similarly, when s1 (t) is transmitted, ro is zero-mean Gaussian 
with variance cr2 and r1 is Gaussian with mean value E and variance cr2• 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.2. BINARY SIGNAL TRANSMISSION 
187 
0 
Figure 5.4: Probability density functions p(ro I 0) and p(r1 I 0) when so(t) is trans­
mitted 
--tiMPii;f4iif)#lflj;t•]:)l§I·•---------
Illustrative Problem 5.2 [Correlation of Signal Waveforms] Sample the signal wave­
forms in Illustrative Problem 5.1 at a rate F5 = 20/Tb (sampling interval T5 = Tb/20) 
and perform the correlation of r(t) with so(t) and s1 (t) numerically; that is, compute 
and plot 
k 
ro(kTs)= I r(nTs)so(nT5), k=l,2, ... ,20 
n=l 
and 
k 
r1(kTs)= I r(nT5)si(nT5), k=l,2, ... ,20 
n=l 
when (a) so(t) is transmitted signal and (b) s1 (t) is the transmitted signal. 
Repeat the above computations and plots when the signal samples r(kT5) are cor­
rupted by additive white Gaussian noise samples n(kT5), 1 :-s: k :-s: 20, which have 
zero mean and variance a-2 = 0.1 and a-2 = 1. 
Figure 5 .5 illustrates the correlator outputs. We note the effect of the additive noise on 
the outputs of the correlator, especially when a-2 = 1. The MATLAB script for these 
computations is given below. 
---tl®li" ---------------
% MATLAB script for Illustrative Problem 5 .2 
% Initialization: 
K=20; 
% Number of samples 
A=1; 
% Signal amplitude 
l=O:K; 
% Defining signal waveforms: 
s_O=A *ones(1,K); 
s_ l=[A *ones(1,K/2) -A *ones(1,K/2)]; 
% Initializing output signals: 
r_O=zeros(1,K); 
r_l=zeros(1,K); 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

188 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
30 
20 
10 
0 
0 
30 
20 
10 
0 
0 
30 
20 
5Tb 
lOTb 
15Tb 
(a) cr2= 0 & S0 is transmitted 
20Tb 
5Tb 
lOTb 
15Tb 
20Tb 
( c) <:P= 0.1 & S0 is transmitted 
20 
10 
0 
0 
20 
10 
0 
0 
20 
5Tb 
lOTb 
15Tb 
(b) a2= 0 & S1 is transmitted 
5Tb 
lOTb 
15Tb 
(d) cr2= 0.1 & S1 is transmitted 
20Tb 
20Tb 
10 
10 
---
0 
0 
... 
5Tb 
lOTb 
15Tb 
... 
( e) <J2= 1 & S0 is transmitted 
0 
20Tb 
0 
5Tb 
lOTb 
15Tb 
(f) <J2= 1 & S 1 is transmitted 
20Tb 
Figure 5.5: Correlator outputs in Illustrative Probleml5.2l Solid and dashed lines rep­
resent the output of correlation with so ( t) and s1 ( t), respectively. 
% Case 1: noise-N(O,O) 
noise=random(' Normal' ,0,0, 1,K); 
% Sub-case s 
= s_O: 
s=s_O; 
r=s+noise; 
% received signal 
for n=1 :K 
end 
r_O(n)=sum(r(1 :n). *s_0(1 :n)); 
r_l(n)=sum(r(1 :n). *s_l (1 :n)); 
% Plotting the results: 
subplot(3,2, 1) 
plot(l,[O r_O],' -',l,[O r_l],' --') 
set(gca, 'XTickLabel' ,{' 0 ',' 5Tb',' lOTb',' 15Tb', '20Tb'}) 
axis([O 20 -5 30]) 
xlabel('(a) \sigmaA2= 0 & S {O} is transmitted','fontsize',10) 
% Sub-case s 
= s_J: 
s=s_l; 
r=s+noise; 
% received signal 
for n=1 :K 
end 
r_O(n)=sum(r(1 :n).*s_0(1 :n)); 
r_l(n)=sum(r(1 :n).*s_l(1 :n)); 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.2. BINARY SIGNAL TRANSMISSION 
% Plotting the results: 
subplot(3,2,2) 
plot(l,[O r_O],' -',l,[O r_l], ' --') 
set(gca, 'XTickLabel' ,{' 0 ', 'STb',' lOTb',' lSTb',' 20Tb'}) 
axis([O 20 -5 30]) 
xlabel('(b) \sigma"2= 0 & S_{l} is transmitted','fontsize',10) 
% Case 2: noise-N(0,0.1) 
noise=random( 'Normal' ,0,0.1, 1,K); 
% Sub-case s 
= s_O: 
s=s_O; 
r=s+noise; 
% received signal 
for n=1 :K 
end 
r_O(n)=sum(r(1 :n).*s_Q(1 :n)); 
r_l(n)=sum(r(1 :n).*s_l(1 :n)); 
% Plotting the results: 
subplot(3,2,3) 
plot(l,[O r_O],' -',I,[O r_l], ' --') 
set(gca, 'XTickLabel' ,{' 0 ',' STb' ,' 10Tb',' lSTb', '20Tb'}) 
ax.is([O 20 -5 30]) 
xlabel('(c) \sigma"2= 0.1 & S_{O} is transmitted','fontsize',10) 
% Sub-case s 
= s _J: 
s=s_l; 
r=s+noise; 
% received signal 
for n=1 :K 
end 
r_O(n)=sum(r(1 :n).*s_0(1 :n)); 
r_l(n)=sum(r(1 :n).*s-1(1 :n)); 
% Plotting the results: 
subplot(3,2,4) 
plot(l,[O r_O],' -',I,[O r_l], ' --') 
set(gca, 'XTickLabel, ,{' 0,', STb' ,' lOTb' ', lSTb'', 20Tb'}) 
axis([O 20 -5 30]) 
xlabel('(d) \sigma"2= 0.1 & S_{l} is transmitted','fontsize',10) 
% Case 3: noise-N(O,l) 
noise=random( 'Normal' ,0, 1, 1,K); 
% Sub-case s 
= s_O: 
s=s_O; 
r=s+noise; 
% received signal 
for n=1 :K 
r_O(n)=sum(r(1 :n).*s_0(1 :n)); 
r_l(n)=sum(r(1 :n).*s_l(1 :n)); 
end 
% Plotting the results: 
subplot(3,2,5) 
plot(l,[O r_O],' -',l,[O r_l],' --') 
set(gca,, XTickLabel, ,{, 0,', STb, ', lOTb, ', lSTb,', 20Tb, }) 
axis([O 20 -5 30]) 
xlabel('(e) \sigma"2= 1 & S_{O} is transmitted','fontsize',10) 
% Sub-case s 
= s _J: 
s=s_l; 
r=s+noise; 
% received signal 
for n=1 :K 
r_O(n)=sum(r(1 :n).*s_0(1 :n)); 
r_l(n)=sum(r(1 :n).*s_l(1 :n)); 
189 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

190 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
end 
% Plotting the results: 
subplot(3,2,6) 
plot(l,[O r_O],' -',l,[O r_l], ' --') 
set(gca, 'XTickLabel' ,{' 0 ',' 5Tb',' lOTb',' 15Tb',' 20Tb'}) 
axis([O 20 -5 30]) 
xlabel('(f) \sigrnaA2= 1 & S_{l} is transrnitted','fontsize',10) 
Matched Filter 
The matched filter provides an alternative to the signal correlator for demodulating 
the received signal r(t). A filter that is matched to the signal waveform s(t), where 
0 :s: t :s: Tb, has an impulse response 
h(t) = s(Tb - t), 
(5.2.13) 
Consequently, the signal waveform-say, y ( t) -at the output of the matched filter 
when the input waveform is s(t) is given by the convolution integral 
y(t) = f: S(T)h(t - T) dT 
If we substitute in (5.2.14) for h(t - T) from (5.2.13), we obtain 
y(t) = f: S(T)s(Tb - t + T) dT 
and if we sample y(t) at t = Tb, we obtain 
(5.2.14) 
(5.2.15) 
(5.2.16) 
where E is the energy of the signal s ( t). Therefore, the matched filter output at the 
sampling instant t = Tb is identical to the output of the signal correlator. 
Illustrative Problem 5.3 [Matched Filter] Consider the use of matched filters for the 
demodulation of the two signal waveforms shown in Figure 5 .2 and determine the 
outputs. 
The impulse responses of the two matched filters are 
ho(t) = so(Tb - t) 
h1(t) = s1(Tb - t) 
(5.2.17) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.2. BINARY SIGNAL TRANSMISSION 
Ai--- 
0 
A 
0 
-A 
Figure 5 .6: Impulse responses of matched filters for signals so ( t) and s1 ( t) 
0 
(a) 
(b) 
Figure 5 .7: Signal outputs of matched filters when so ( t) is transmitted 
191 
as illustrated in Figure 5.6. Note that each impulse response is obtained by folding the 
signal s ( t) to obtain s ( -t) and then delaying the folded signal s ( -t) by Tb to obtain 
s(Tb -t). 
Now suppose the signal waveform so(t) is transmitted. Then the received signal 
r ( t) = so ( t) + n ( t) is passed through the two matched filters. The response of the 
filter with impulse response ho ( t) to the signal component so ( t) is illustrated in Fig­
ure 5.7(a). Also, the response of the filter with impulse response h1 (t) to the signal 
component so(t) is illustrated in Figure 5.7(b). Hence, at the sampling instant t = Tb, 
the outputs of the two matched filters with impulse responses ho ( t) and hi ( t) are 
ro = E +no 
r1 = n1 
(5.2.18) 
respectively. Note that these outputs are identical to the outputs obtained from sampling 
the signal correlator outputs at t = Tb. 
18!4-il;fulTj#lij;l•1:Jl§@I·---------
Illustrative Problem 5.4 [Match Filtering of Signal Waveforms] Sample the signal 
waveform in Illustrative Problem 5 .3 at a rate of F5 = 20 I Tb and perform the matched 
filtering of the received signal r ( t) with so ( t) and s1 ( t) numerically; that is, compute 
and plot 
k 
Yo(kTs) = L r(nTs)so(kTs -nTs), 
k= 1,2, ... ,20 
n=l 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

192 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
and 
k 
Y1(kTs) = L r(nTs)si(kTs-nTs), 
k= 1,2, ... ,20 
n=l 
when (a) so ( t) is the transmitted signal and (b) s1 ( t) is the transmitted signal. 
Repeat the above computations when the signal samples r(kT5) are corrupted by 
additive white Gaussian noise samples n(kT5), 1 ::5: k ::5: 20, which have zero mean 
and variance cr2 = 0.1 and cr2 = 1. 
Figure 5 .8 illustrates the matched filter outputs. We note the effect of the additive noise 
on the matched filter outputs for the two variances of the noise. Clearly, when cr2 = 1, 
the effect of the noise on the matched filter outputs is significant. The MATLAB script 
for the computation is given next 
20 
a 
-20 
--------
------
a 
5Th lOTh 15Th 20Th a 
5Th lOTh 15Th 2aTu a 
(a) cr2= 0 & Sa is transmitted 
2a
l
f-
---
-
---1 
a-----
---
---
--
-2a f-
2a 
a 
-2a 
a 
5Th 1 aTu 15Th 2aTu a 
5Th 1 aTu 15Th 2aTu a 
(c) cr2= 0.1 & Sa is transmitted 
-
- .,,. -
,, 
a 
5Th lOTh 15Th 20Th a 
5Th IaTu 15Th 2aTu a 
(e) o2= l & S0 is transmitted 
2a 
a 
-20 
20 
a 
-2a 
2a 
a 
-2a 
------
, 
, 
_, 
a 
5Th lOTh 15Th 20Th a 
5Th lOTh 15Th 20Th a 
(b) o2= 0 & S1 is transmitted 
------
a 
5Th JaTu 15Th 2aTu a 
STh lOTh ISTh 2aTu a 
(d) o2= 0.1 & S1 is transmitted 
,. -
a 
STh IOTh 15Th 20Th a 
STb IOTb 15Th 2aTu a 
(t) o2= 1 & S1 is transmitted 
Figure 5.8: Matched filter outputs in Illustrative Problem 5.4. Solid and dashed lines 
correspond to the outputs of filters matched to so ( t) and s1 ( t), respectively. 
___ ,,, .. ----------------
% MATLAB script for Illustrative Problem 5.4. 
% Initialization: 
K=20; 
% Number of samples 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.2. BINARY SIGNAL TRANSMISSION 
A=1; 
l=O:K; 
% Signal amplitude 
% Defining signal waveforms: 
s_O=A *ones(1,K); 
s_l=[A*ones(1,K/2) -A*ones(1,K/2)]; 
% Initializing output signals: 
y_O=zeros(1,K); 
y_l=zeros(1,K); 
% Case 1: noise-N(O,O) 
noise=random( 'Normal' ,0,0, 1,K); 
% Sub-case s 
= s_O: 
s=s-0; 
y=s+noise; 
% received signal 
y_O=conv(y,wrev(s_O)); 
y _ l=conv(y,wrev(s_ l)); 
% Plotting the results: 
subplot(3,2, 1) 
plot(l,[O y_0(1 :K)], '-k' ,l,[O y_l(1 :K)],' --k') 
set(gca, 'XTickLabel' ,{' 0 ', 'STb',' lOTb',' lSTb',' 20Tb'}) 
axis([O 20 -30 30]) 
xlabel('(a) \sigmaA2= 0 & S {O} is transmitted','fontsize',10) 
% Sub-case s 
= s _J: 
s=s_l; 
y=s+noise; 
% received signal 
y _O=conv(y,wrev(s_O)); 
y _l=conv(y,wrev(s_ l)); 
% Plotting the results: 
subplot(3,2,2) 
plot(l,[O y_0(1 :K)],' -k' ,l,[O y_l(1 :K)],' --k') 
set(gca, 'XTickLabel' ,{' 0 ',' STb' ,' 10Tb',' 15Tb', '20Tb'}) 
axis([O 20 -30 30]) 
xlabel('(b) \sigmaA2= 0 & S_{l} is transmitted','fontsize',10) 
% Case 2: noise-N(0,0.1) 
noise=random( 'Normal' ,0,0.1, 1,K); 
% Sub-case s 
= s_O: 
s=s-0; 
y=s+noise; 
% received signal 
y _O=conv(y ,wrev(s_O)); 
y _l=conv(y ,wrev(s_ l)); 
% Plotting the results: 
subplot(3,2,3) 
plot(l,[O y_0(1 :K)],' -k' ,l,[O y_l(1 :K)],' --k') 
set(gca, 'XTickLabel, ,{' 0,', STb' ,' 10Tb'', lSTb'', 20Tb'}) 
axis([O 20 -30 30]) 
xlabel('(c) \sigmaA2= 0.1 & S_{O} is transmitted','fontsize',10) 
% Sub-case s 
= s _J: 
s=s_l; 
y=s+noise; 
% received signal 
y _O=conv(y ,wrev(s_O)); 
y _l=conv(y,wrev(s_ l)); 
% Plotting the results: 
subplot(3,2,4) 
plot(l,[O y_0(1 :K)],' -k' ,l,[O y_l(1 :K)],' --k') 
set(gca, 'XTickLabel' ,{' 0 ',' STb' ,' 10Tb',' lSTb', '20Tb'}) 
193 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

194 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
axis([O 20 -30 30]) 
xlabel('(d) \sigrna"2= 0.1 & S_{l} is transrnitted','fontsize',10} 
% Case 3: noise-N(O,l) 
noise=random(' Normal' ,0, 1, 1,K); 
% Sub-case s 
= s_O: 
s=s_O; 
y=s+noise; 
% received signal 
y _O=conv(y ,wrev(s_O)); 
y_l=conv(y,wrev(s_ l)}; 
% Plotting the results: 
subplot(3,2,5) 
plot(l,[O y_0(1 :K}],' -k' ,l,[O y_l(1 :K}],' --k'} 
set(gca, 'XTickLabel' ,{' 0 ',' 5Tb',' lOTb',' 15Tb',' 20Tb'}) 
axis([O 20 -30 30]) 
xlabel('(e) \sigrna"2= 1 & S {O} is transrnitted','fontsize',10) 
% Sub-case s 
= s_J: 
s=s_l; 
y=s+noise; 
% received signal 
y _O=conv(y, wrev(s_O)}; 
y_ l=conv(y,wrev(s_ l)); 
% Plotting the results: 
subplot(3,2,6) 
plot(l,[O y_0(1 :K)],' -k' ,l,[O y_l(1 :K)],' --k') 
set(gca, 'XTickLabel' ,{' 0 ',' 5Tb',' lOTb',' 15Tb',' 20Tb'}) 
axis([O 20 -30 30]) 
xlabel('(f) \sigrna"2= 1 & S_{l} is transrnitted','fontsize',10) 
The Detector 
The detector observes the correlator or matched filter outputs ro and r1 and decides 
on whether the transmitted signal waveform is so ( t) or s1 ( t), which correspond to the 
transmission of either a 0 or a 1, respectively. The optimum detector is defined as the 
detector that minimizes the probability of error. 
--li!!IJ§ll;flHtjjj;t•1:Jl@l1 
Illustrative Problem 5.5 [Binary Detection] Let us consider the detector for the sig­
nals shown in Figure 5.2, which are equally probable and have equal energies. The 
optimum detector for these signals compares ro and r1 and decides that a 0 was trans­
mitted when ro > r1 and that a 1 was transmitted when r1 
> ro. Determine the 
probability of error. 
When s0(t) is the transmitted signal waveform, the probability of error is 
Pe 
= P( r1 > ro) 
= P(n1 > E +no) 
= P(n1 - no > E) 
(5.2.19) 
Because n1 and no are zero-mean Gaussian random variables, their difference x 
ni - no is also zero-mean Gaussian. The variance of the random variable xis 
(5.2.20) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.2. BINARY SIGNAL TRANSMISSION 
But E(n1no) = 0 because the signal waveforms are orthogonal; that is, 
rTb rTb 
E(n1 no) = E Jo Jo so(t)s1 (T)n(t)n(T) dt dT 
No rTb rTb 
= 2 Jo Jo So(t)s1 (T)O(t - T) dt dT 
No rTb 
= T Jo so(t)s1 (t) dt 
= 0 
Therefore, 
E(x2) = 2 ( Eo) = ENo = u 
Hence, the probability of error is 
The ratio EI No is called the signal-to-noise ratio (SNR). 
195 
(5.2.21) 
(5.2.22) 
(5.2.23) 
The derivation of the detector performance given in the example was based on the 
transmission of the signal waveform so ( t). The reader may verify that the probability 
of error that is obtained when s1 ( t) is transmitted is identical to that obtained when 
so (t) is transmitted. Because the O's and 1 's in the data sequence are equally probable, 
the average probability of error is that given by (5.2.23). This expression for the prob­
ability of error is evaluated by using the MATLAB script given next and is plotted in 
Figure 5 .9 as a function of the SNR, where the SNR is displayed on a logarithmic scale 
( 10 log 10 EI No). As expected, the probability of error decreases exponentially as the 
SNR increases. 
-----411@1il! 
-- 
% The MATLAB script that generates the probability of error versus the signal-to-noise ratio. 
initiaLsnr=O; 
finaLsnr=15; 
snr_step=0.25; 
snr_in_dB=initiaLsnr:snr_step:final_snr; 
for i=1 :length(snr_in_dB), 
snr=1 DA (snr_in_dB(i)/1 O); 
Pe(i)=Qfunct(sqrt(snr)); 
echo off; 
end; 
echo on; 
semilogy( snr _in_dB ,Pe); 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

196 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
10° 
10-1 
10-2 
10-3 
10-4 
10-5 
10-6 
10-7 
10-8 
10-9 
0 
Figure 5.9: Probability of error for orthogonal signals 
Monte Carlo Simulation of a Binary Communication System 
Monte Carlo computer simulations are usually performed in practice to estimate the 
probability of error of a digital communication system, especially in cases where the 
analysis of the detector performance is difficult to perform. We demonstrate the method 
for estimating the probability of error for the binary communication system described 
previously. 
Illustrative Problem 5.6 [Monte Carlo Simulation] Use Monte Carlo simulation to 
estimate and plot Pe versus SNR for a binary communication system that employs 
correlators or matched filters. The model of the system is illustrated in Figure 5.10. 
We simulate the generation of the random variables ro and r1, which constitute the 
input to the detector. We begin by generating a binary sequence of O's and 1 's that 
occur with equal probability and are mutually statistically independent. To accomplish 
this task, we use a random number generator that generates a uniform random number 
with a range ( 0, 1). If the number generated is in the range ( 0, 0. 5), the binary source 
output is a 0. Otherwise, it is a 1. If a 0 is generated, then ro = E + no and r1 = n1. If 
a 1 is generated, then ro = no and r1 = E + n i. 
The additive noise components no and n 1 are generated by means of two Gaussian 
noise generators. Their means are zero, and their variances are a2 
= ENo/2. For 
convenience, we may normalize the signal energy E to unity (£ 
= 1) and vary a2• 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.2. BINARY SIGNAL TRANSMISSION 
Uniform random 
number generator 
Binary 
data source 
Gaussian random 
number generator 
0/E 
1/E 
'---.i+ 1----lI 
Gaussian random 
number generator 
Compare 
Error counter 
Detector 
Output 
data 
Figure 5.10: Simulation model for Illustrative Problem 5.6 
1if---------- 
llE 
10-s ._ ___ ..._ ___ ..._ __ __...._ __ __. 
___ __. ___ _, 
0 
2 
4 
8 
10 
12 
197 
Figure 5 .11: Error probability from Monte Carlo simulation compared with theoretical 
error probability for orthogonal signaling 
Note that the SNR, which is defined as E/No, is then equal to l/2u2• The detector 
output is compared with the binary transmitted sequence, and an error counter is used 
to count the number of bit errors. 
Figure 5 .11 illustrates the results of this simulation for the transmission of N 
= 
10, 000 bits at several different values of SNR. Note the agreement between the 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

198 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
simulation results and the theoretical value of Pe given by (5.2.23). We should also 
note that a simulation of N = 10,000 data bits allows us to estimate the error probabil­
ity reliably down to about Pe 
= 10-3. In other words, with N = 10,000 data bits, we 
should have at least ten errors for a reliable estimate of Pe. MATLAB scripts for this 
problem are given next. 
---tl&li" ----------------
% MATLAB script for Illustrative Problem 5.6. 
echo on 
SNRindB1=0:1 :12; 
SNRindB2=0:0.1 :12; 
for i=1 :length(SNRindBl), 
end; 
% simulated error rate 
smld_err_prb(i)=smldPe54(SNRindB 1 (i)); 
echo off ; 
echo on ; 
for i=1 :length(SNRindB2), 
SNR=exp(SNRindB2(i)*log(10)/1 O); 
% theoretical error rate 
theo_err_prb(i)=Qfunct(sqrt(SNR)); 
echo off ; 
end; 
echo on; 
% Plotting commands follow. 
semilogy(SNRindBl,smld_err_prb,' * '); 
hold 
semilogy(SNRindB2,theo_err_prb); 
---tl&li" ----------------
function [p]=smldPe54(snr_in_dB) 
% [p]=smldPe54(snr_in...dB) 
% 
SMWPE54 finds the probability of error for the given 
% 
snr .Jn...dB, signal-to-noise ratio in dB. 
E=1; 
SNR=exp(snLin_dB*log(10)/10); 
sgma=E/sqrt(2*SNR); 
N=10000; 
% generation of the binary data source 
for i=1 :N, 
temp=rand; 
if (temp<0.5), 
dsource(i)=O; 
else 
dsource(i)=1; 
end 
end; 
% signal-to-noise ratio 
% sigma, standard deviation of noise 
% a uniform random variable over (0,1) 
% With probability 112, source output is 0. 
% With probability 112, source output is 1. 
% detection, and probability of error calculation 
numoferr=O; 
for i=1 :N, 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.2. BINARY SIGNAL TRANSMISSION 
% matched filter outputs 
if (dsource(i)==O), 
rO=E+gngauss(sgma); 
rl=gngauss(sgma); 
else 
rO=gngauss(sgma); 
rl=E+gngauss(sgma); 
end; 
% Detector follows. 
if (rO>rl), 
decis=O; 
else 
decis=1; 
end; 
% if the source output is "O" 
% if the source output is "1 " 
% Decision is "O". 
% Decision is "l ". 
199 
if (decis-=dsource(i)), 
numoferr=numoferr+ 1 ; 
end; 
% If it is an error, increase the error counter. 
end; 
p=numoferr/N; 
% probability of error estimate 
--C•1ij§.ilt•Jt• 
In Figure 5.11, simulation and theoretical results completely agree at low signal-to­
noise ratios, whereas at higher SNRs they agree less. Can you explain why? How 
should we change the simulation process to result in better agreement at higher signal­
to-noise ratios? 
5.2.2 
Other Binary Signal Transmission Methods 
The binary signal transmission method described above was based on the use of orthog­
onal signals. Next, we describe two other methods for transmitting binary information 
through a communication channel. One method employs antipodal signals. The other 
method employs an on-off-type signal. 
Antipodal Signals for Binary Signal Transmission 
Two signal waveforms are said to be antipodal if one signal waveform is the negative 
of the other. For example, one pair of antipodal signals is illustrated in Figure 5.12(a). 
A second pair is illustrated in Figure 5.12(b). 
Suppose we use antipodal signal waveforms so(t) = s(t) and 51 (t) = -s(t) to 
transmit binary information, where s ( t) is some arbitrary waveform having energy E. 
The received signal waveform from an AWGN channel may be expressed as 
r(t) = ±s(t) + n(t), 
(5.2.24) 
The optimum receiver for recovering the binary information employs a single correlator 
or a single matched filter matched to s ( t), followed by a detector, as illustrated in 
Figure 5.13. Let us suppose that s(t) was transmitted, so that the received signal is 
r(t) = s(t) + n(t) 
(5.2.25) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

200 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
s1(t) 
s0(t) 
s1(t) 
A t----. 
A 
A 
0 
(a) 
0 
-A 
Tb 
0 
-A 
Tb 
0 
Tb 
-A 
(b) 
Figure 5 .12: Examples of antipodal signals. (a) A pair of antipodal signals. (b) Another 
pair of antipodal signals 
Received --•I Matched filter 11---__,./	 Output 
· 
1 ( ) 
s (T.b _ t) 
Detector 
d . . 
s1gna r t 
t 
ec1s1on 
Received 
signal r(t) 
Sample 
at t = T, 
(a) 
1-----------1 
I 
f.o'Odt i--i1,__,  Output 
I 
t decision 
s(t) 
I 
Sample 
_____ Cofe---
1 
at t = T, 
(b) 
Figure 5.13: Optimum receiver for antipodal signals. (a) Matched filter demodulator. 
(b) Correlator demodulator 
The output of the correlator or matched filter at the sampling instant t = Tb is 
r=E+n 
(5.2.26) 
where E is the signal energy and n is the additive noise component, which is expressed 
as 
rTb 
n = J o n(t)s(t) dt 
(5.2.27) 
Because the additive noise process n(t) is zero mean, it follows that E(n) 
= 0. 
The variance of the noise component n is 
rTb f Tb 
= J o 
0 E [n(t)n(T)] s(t)s(T) dt dT 
N f Tb fTb 
= T 0 
0 <5(t - T)S(t)S(T) dt dT 
= No f Tb s2(t) dt = NoE 
2 
0 
2 
(5.2.28) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.2. BINARY SIGNAL TRANSMISSION 
201 
-E 
0 
E 
Figure 5 .14: Probability density functions for the input to the detector 
Consequently, the probability density function of r when s(t) is transmitted is 
p(r I s(t) was transmitted) = p(r I 0) = 
1 
e-(r-£J2 /20-2 
J2IT (J 
(5.2.29) 
Similarly, when the signal waveform -s(t) is transmitted, the input to the detector is 
r = -E + n 
(5.2.30) 
and the probability density function of r is 
1 
- (r+£)2 /2a2 
p(r I -s(t) was transmitted) = p(r I 1) = 
J2IT 
u e 
(5 .2.31) 
These two probability density functions are illustrated in Figure 5.14. 
For equally probable signal waveforms, the optimum detector compares r with the 
threshold zero. If r > 0, the decision is made that s(t) was transmitted. If r < 0, the 
decision is made that -s(t) was transmitted. The noise that corrupts the signal causes 
errors at the detector. The probability of a detector error is easily computed. Suppose 
that s(t) was transmitted. Then the probability of error is equal to the probability that 
r < 0; that is, 
Pe= P(r < 0) 
= 
1 f o 
e-(r-E)z 120-2 dr 
J2IT (J 
-00 
= 
--
e-r 12dr 
1 f
-E/a 
2 
J2IT 
-00 
= Q (!) 
= Q(ffeo) 
(5.2.32) 
A similar result is obtained when -s(t) is transmitted. Consequently, when the 
two signal waveforms are equally probable, the average probability of error is given by 
(5.2.32). 
When we compare the probability of error for antipodal signals with that for or­
thogonal signals given by (5.2.23), we observe that, for the same transmitted signal 
energy E, antipodal signals result in better performance. Alternatively, we may say 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

202 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
that antipodal signals yield the same performance (same error probability) as orthogo­
nal signals by using one-half of the transmitted energy of orthogonal signals. Hence, 
antipodal signals are 3 dB more efficient than orthogonal signals. 
Illustrative Problem 5.7 [Correlation of Antipodal Signal Waveforms] In antipo­
dal signaling, the signal waveform so(t) is defined as 
so(t) 
= A , 
0:::; t:::; Tb 
and zero otherwise. The received signal is r(t) 
= ±so (t) + n(t). Sample the received 
signal r(t) and so(t) at the rate F5 
= 20/Tb and perform the correlation of r(t) with 
so(t) numerically; that is, compute and plot 
k 
ro(kTs) 
= L r(nT5)so(nT5), 
k 
= 1,2, ... ,20 
n=l 
when (a) so(t) is the transmitted signal and (b) -so(t) is the transmitted signal. Per­
form the computations when the additive noise is Gaussian having zero mean and vari­
ances a2 
= 0, a2 
= 0.1, and a2 
= 1. 
Figure 5.15 illustrates the correlator outputs for different noise variances. The MAT­
LAB script for the computation is given next 
--41®'1" 11--------------
% MATLAB script for Illustrative Problem 5.7. 
% Initialization: 
K=20; 
A=1; 
l=O:K; 
% Number of samples 
% Signal amplitude 
s_O=A *ones(1,K);% Signal waveform 
r_O=zeros(1,K); % Output signal 
% Case 1: noise-N(O,O) 
noise=random( 'Normal' ,0,0, 1,K}; 
% Sub-case s 
= s_O: 
s=s_O; 
r=s+noise; 
% received signal 
for n=1 :K 
r_O(n)=sum(r(1 :n). *s_0(1 :n)); 
end 
% Plotting the results: 
subplot(3,2, 1) 
plot(l, [O r_O]) 
set(gca, 'XTickLabel' ,{' 0 ',' 5Tb',' lOTb',' 15Tb', '20Tb'}) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.2. BINARY SIGNAL TRANSMISSION 
25 
0 
20 
-5 
15 
-10 
10 
-15 
5 
-20 
5Th 
lOTh 
15Th 
20Th 
-25 
0 
5Th 
lOTh 
15Th 
(a) cr2= 0 & S0 is transmitted 
(b) cr2= 0 & S1 is transmitted 
25 
0 
20 
-5 
15 
-10 
10 
-15 
5 
-20 
5Th 
lOTh 
15Th 
20Tb 
-25 
0 
5Th 
lOTh 
15Th 
(c) cr2= 0.1 & S0 is transmitted 
(d) cr2= 0.1 & S1 is transmitted 
25 
20 
0 
15 
-10 
10 
5 
-20 
0
0 
5Th 
lOTh 
15Th 
20Tb 
0 
5Th 
lOTh 
15Th 
(e) cr2= 1 & S0 is transmitted 
(f) cr2= 1 & S1 is transmitted 
Figure 5.15: Correlator outputs in Illustrative Problem 5.7 
axis([O 20 0 25]) 
xlabel('(a) \sigma"2= 0 & S_{O} is transmitted ','fontsize',10) 
% 
text(l5,3,'\jontsize{IO} r_[O}: - & r..{1}: -','hor','left') 
% Sub-case s 
= s_J: 
s=-s-0; 
r=s+noise; 
% received signal 
for n=1 :K 
r_O(n)=sum(r(1 :n).*s_0(1 :n)); 
end 
% Plotting the results: 
subplot(3,2,2) 
plot(l,[O r_O]) 
set(gca, 'XTickLabel' ,{' 0 ',' 5Tb' ,' lOTb',' 15Tb',' 20Tb'}) 
axis([O 20 -25 OJ) 
xlabel('(b) \sigma"2= 0 & S_{l} is transmitted ','fontsize',10) 
% Case 2: noise-N(0,0.1) 
noise=random( 'Normal' ,0,0.1, 1,K); 
% Sub-case s 
= s_O: 
s=s_O; 
r=s+noise; 
% received signal 
for n=1 :K 
r_Q(n)=sum(r(1 :n).*s_0(1 :n)); 
end 
% Plotting the results: 
203 
20Th 
20Th 
20Th 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

204 
subplot(3,2,3) 
plot(l,[O r_O]) 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
set(gca, 'XTickLabel' ,{' 0 ',' STb',' lOTb',' lSTb',' 20Tb'}) 
axis([O 20 0 25]) 
xlabel('(c) \sigmaA2= 0.1 & S {O} is transmitted ','fontsize',10) 
% Sub-case s 
= s_J: 
s=-s_O; 
r=s+noise; 
% received signal 
for n=1 :K 
r_O(n)=sum(r(1 :n).*s_0(1 :n)); 
end 
% Plotting the results: 
subplot(3,2,4) 
plot(l,[O r_O]) 
set(gca, 'XTickLabel' ,{' 0 ',' STb',' lOTb',' lSTb',' 20Tb'}) 
axis([O 20 -25 O]) 
xlabel(' (d) \sigmaA2= 0.1 & S_{l} is transmitted ','fontsize',10) 
% Case 3: noise-N(O,l) 
noise=random(' Normal' ,0, 1, 1,K); 
% Sub-case s 
= s_O: 
s=s_O; 
r=s+noise; 
% received signal 
for n=1 :K 
r_O(n)=sum(r(1 :n).*s_0(1 :n)); 
end 
% Plotting the results: 
subplot(3,2,5) 
plot(l,[O r_O]) 
set(gca, 'XTickLabel' ,{' 0 ',' STb',' lOTb',' lSTb',' 20Tb'}) 
axis([O 20 -5 25]) 
xlabel(' (e) \sigmaA2= 1 & S {O} is transmitted ','fontsize',10) 
% Sub-case s 
= s_J: 
s=-s_O; 
r=s+noise; 
% received signal 
for n=1 :K 
r_O(n)=sum(r(1 :n).*s_0(1 :n)); 
end 
% Plotting the results: 
subplot(3,2,6) 
plot(l,[O r_O]) 
set(gca, 'XTickLabel' ,{' 0 ',' STb',' lOTb',' lSTb',' 20Tb'}) 
axis([O 20 -25 5]) 
xlabel('(f) \sigmaA2= 1 & S_{l} is transmitted ','fontsize',10) 
Illustrative Problem 5.8 [Binary Antipodal Simulation] Use Monte Carlo simula­
tion to estimate and plot the error probability performance of a binary antipodal com­
munication system. The model of the system is illustrated in Figure 5 .16. 
As shown, we simulate the generation of the random variable r, which is the input 
to the detector. A uniform random number generator is used to generate the binary 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.2. BINARY SIGNAL TRANSMISSION 
Uniform random 
number generator 
Binary 
data source 
±E 
Gaussian random 
number generator 
Compare 
Detector 
Error counter 
>---- Output 
data 
205 
Figure 5.16: Model of the binary communication system employing antipodal signals 
10-6 +----,----/ 
0 
2 
3 
7 
8 
9 
10 
Figure 5 .17: Error probability from Monte Carlo simulation compared with theoretical 
error probability for antipodal signals 
information sequence from the binary data source. The sequence of O's and 1 's is 
mapped into a sequence of ±E, where E represents the signal energy. E may be nor­
malized to unity. A Gaussian noise generator is used to generate the sequence of zero­
mean Gaussian random numbers with variance a-2• The detector compares the random 
variable r with the threshold of 0. If r > 0, the decision is made that the transmitted 
bit is a 0. If r < 0, the decision is made that the transmitted bit is a 1. The output of 
the detector is compared with the transmitted sequence of information bits, and the bit 
errors are counted. Figure 5 .17 illustrates the results of this simulation for the trans­
mission of 10000 bits at several different values of SNR. The theoretical value for Pe 
given by (5.2.32) is also plotted in Figure 5.17 for comparison. Note that for 10,000 
transmitted bits, the Monte Carlo estimates of Pe below io-3 are not very accurate. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

206 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
The MATLAB scripts for this problem are given next. 
---tl&li" ----------------
% MATLAB script for Illustrative Problem 5.8. 
echo on 
SNRindB1=0:1 :10; 
SNRindB2=0:0.1 :1 O; 
for i=1 :length(SNRindBl), 
% simulated error rate 
smld_err_prb(i)=smldPe55(SNRindB 1 (i)); 
echo off; 
end; 
echo on; 
for i=1 :length(SNRindB2), 
SNR=exp(SNRindB2(i) *log( 10 )/1 0); 
% theoretical error rate 
theo_err_prb(i)=Qfunct(sqrt(2*SNR)); 
echo off; 
end; 
echo on; 
% Plotting commands follow. 
sernilogy(SNRindBl,srnld_err_prb,' * '); 
hold 
sernilogy(SNRindB2,theo_err_prb); 
---tl&li" ----------------
function [p]=srnldPe55(snr_in_dB) 
% [p]=smldPe55(snr_in_dB) 
% 
SMWPE55 
simulates the probability of error for the particular 
% 
value of snr..in_dB, signal-to-noise ratio in dB. 
E=1; 
SNR=exp(snr_in_dB*log(10)/10); 
sgma=E/sqrt(2*SNR); 
N=10000; 
% signal-to-noise ratio 
% sigma, standard deviation of noise 
% Generation of the binary data source follows. 
for i=1 :N, 
temp=rand; 
if (temp<0.5), 
dsource(i)=O; 
else 
dsource(i)=1 ; 
end 
end; 
% a uniform random variable over (0,1) 
% With probability 112, source output is 0. 
% With probability 112, source output is 1. 
% The detection, and probability of error calculation follows. 
numoferr=O; 
for i=1 :N, 
% the matched filter outputs 
if (dsource(i)==O), 
r=-E+gngauss(sgma); 
else 
r=E+gngauss(sgma); 
% if the source output is 
"O " 
% if the source output is "1 " 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.2. BINARY SIGNAL TRANSMISSION 
end; 
% Detector follows. 
if (r<O), 
decis=O; 
else 
decis=1; 
end; 
% Decision is 
"O ". 
% Decision is "1 ". 
207 
if (decis =dsource(i)), 
numofe=numoferr+ 1 ; 
end; 
% If it is an error, increase the error counter. 
end; 
p=numoferr/N; 
% probability of error estimate 
On-Off Signals for Binary Signal Transmission 
A binary information sequence may also be transmitted by use of on-off signals. To 
transmit a 0, no signal is transmitted in the time interval of duration Tb. To transmit a 
1, a signal waveform s ( t) is transmitted. Consequently, the received signal waveform 
may be represented as 
r(t) = 
{n(t), 
s(t) + n(t), 
if a 0 is transmitted 
if a 1 is transmitted 
where n(t) represents the additive white Gaussian noise. 
(5 .2.33) 
As in the case of antipodal signals, the optimum receiver consists of a correlator 
or a matched filter matched to s ( t), whose output is sampled at t = Tb, and followed 
by a detector that compares the sampled output to the threshold, denoted as ex. If 
r > ex, a 1 is declared to have been transmitted; otherwise, a 0 is declared to have been 
transmitted. 
The input to the detector may be expressed as 
{n, 
r-
E+n, 
if a 0 is transmitted 
if a 1 is transmitted 
(5.2.34) 
where n is a zero-mean Gaussian random variable with variance u2 = ENo/2. There­
fore, the conditional probability density functions of the random variable r are 
if a 0 is transmitted 
if a 1 is transmitted 
These probability density functions are illustrated in Figure 5 .18. 
When a 0 is transmitted, the probability of error is 
1 f 
00 
2 /2 
2 
Peo(ex) = P(r > ex) = 
e-r 
o- dr 
J2IT (J 
()( 
(5.2.35) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

208 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
Figure 5.18: The probability density functions for the received signal at the output of 
the correlator for on-off signals 
where ex is the threshold. On the other hand, when a 1 is transmitted, the probability of 
error is 
Pei (ex) = P(r < ex) = 
1 Joe e-(r-E)2 /Za-2 dr 
J'Fi a 
-oo 
(5.2.36) 
Assuming that the binary information bits are equally probable, we have for the average 
probability of error: 
(5.2.37) 
The value of the threshold ex that minimizes the average probability of error is found 
by differentiating Pe (ex) and solving for the optimum threshold. It is easily shown that 
the optimum threshold is 
E 
exopt 
= z 
(5.2.38) 
Substitution of this optimum value into (5.2.35), (5.2.36), and (5.2.37) yields the prob­
ability of error 
Pe(exopt) 
= Q ( f-J;i) 
(5.2.39) 
We observe that error-rate performance with on-off signals is not as good as with 
antipodal signals. It appears to be 6 dB worse than with antipodal signals and 3 dB 
worse than with orthogonal signals. However, the average transmitted energy for the 
on-off signals is 3 dB less than that for antipodal and orthogonal signals. Consequently, 
this difference should be factored in when making comparisons of the performance 
with other signal types. 
--llMllJ§jl;fulNiM;l•1:JM§@I 
Illustrative Problem 5.9 [Correlation of On-Off Signal Waveforms] The received 
signal in on-off signal transmission is given as 
r(t) 
= {n(t), 
s(t) + n(t), 
if a 0 is transmitted 
if a 1 is transmitted 
where n(t) represents the additive white Gaussian noise and s(t) is defined as 
s(t) 
= A , 0::; t::; Tb 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.2. BINARY SIGNAL TRANSMISSION 
209 
and zero otherwise. Suppose the received signal r(t) is sampled at the rate F5 = 30/Yb 
and the correlation at the receiver is performed numerically; that is, 
y(kTs) 
k 
L r(nT5)s(nTs), 
k = 1,2, ... ,30 
n=l 
Compute and plot y (kT5) for 1 :-s: k :-s: 30 when the variance of the noise sample is 
u2 
= 0, u2 
= 0.1, and u2 
= 1. 
Figure 5 .19 illustrates the correlator outputs for the different noise variances. 
The 
MATLAB script for the computation is given below 
10 
I 
I 
I 
I 
I 
40 
5 
30 
0 
20 
-5 
10 
-10 
0 
0 
5Tb 
10Tb 
15Tb 
20Tb 
25Tb 
30Tb 
0 
5Tb 
10Tb 
15Tb 
20Tb 
25Tb 
30Tb 
(a) cl= 0 & 0 is transmitted 
(b) cl= 0 & 1 is transmitted 
10 
I 
I 
I 
I 
I 
40 
5 
30 
0 
20 
-5 
10 
-10 
0 
0 
5Tb 
10Tb 
15Tb 
20Tb 
25Tb 
30Tb 
0 
5Tb 
10Tb 
15Tb 
20Tb 
25Tb 
30Tb 
(c) cl= 0.1 & 0 is transmitted 
(d) ef= 0.1 & 1 is transmitted 
10 
40 
5 
30 
0 
20 
-5 
10 
-10 
0 
0 
5Tb 
10Tb 
15Tb 
20Tb 
25Tb 
30Tb 
0 
5Tb 
10Tb 
15Tb 
20Tb 
25Tb 
30Tb 
(e) cl= 1 & O is transmitted 
(I) <l= 1 & 1 is transmitted 
Figure 5.19: Correlator outputs in Illustrative Problem 5.9 
---tlli" ----------------
% MATLAB script for Illustrative Problem 5 .9 . 
% Initialization: 
K=30; 
% Number of samples 
A=1 ; 
% Signal amplitude 
l=O:K; 
s=A*ones(1,K); 
% Signal waveform 
y=zeros(1,K); 
% Output signal 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

210 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
% Casel: noise-N(O,O) 
noise=random( 'Normal' ,0,0, 1,K); 
% Sub-case: 0 is transmitted 
r=noise; 
% received signal 
for n=1 :K 
y(n)=sum(r(1 :n).*s(1 :n)); 
end 
% Plotting the results: 
subplot(3,2, 1) 
plot(l,[O y]) 
set(gca, 'XTickLabel' ,{' 0 ''' 5Tb''' lOTb' ,' 15Tb'' '20Tb',' 25Tb''' 30Tb'}) 
axis([O 30 -10 1 OJ) 
xlabel('(a) \sigma"2= 0 & 0 is transmitted' ,'fontsize',10) 
% Sub-case: 1 is transmitted 
r=s+noise; 
% received signal 
for n=1 :K 
y(n)=sum(r(1 :n).*s(1 :n)); 
end 
% Plotting the results: 
subplot(3,2,2) 
plot(l,[O y]) 
set(gca, 'XTickLabel' ,{' 0, '' 5Tb' ,' lOTb'', 15Tb'', 20Tb'' '25Tb'', 30Tb'}) 
axis([O 30 0 40)) 
xlabel(' ( b) \sigma" 2= 0 & 1 is transmitted' ,' fontsize', 10) 
% Case2: noise-N(0,0.1) 
noise=random(' Normal' ,0,0.1, 1,K); 
% Sub-case: 0 is transmitted 
r=noise; 
% received signal 
for n=1 :K 
y(n)=sum(r(1 :n).*s(1 :n)); 
end 
% Plotting the results: 
subplot(3,2,3) 
plot(l,[O y]) 
set(gca, 'XTickLabel' ,{' 0 ',' 5Tb' ,' lOTb',' 15Tb', '20Tb', '25Tb',' 30Tb'}) 
axis([O 30 -10 1 OJ) 
xlabel('(c) \sigma"2= 0.1 & 0 is transmitted' ,'fontsize',10) 
% Sub-case: 1 is transmitted 
r=s+noise; 
% received signal 
for n=1 :K 
y(n)=sum(r(1 :n).*s(1 :n)); 
end 
% Plotting the results: 
subplot(3,2,4) 
plot(l,[O y]) 
set(gca, 'XTickLabel' ,{' 0 ',' 5Tb' ,' lOTb',' 15Tb', '20Tb',' 25Tb',' 30Tb'}) 
axis([O 30 0 40]) 
xlabel(' ( d) \sigma" 2= 0. 1 & 1 is transmitted' ,' fontsize', 10) 
% Case3: noise-N(0,1) 
noise=random( 'Normal' ,0, 1, 1,K); 
% Sub-case: 0 is transmitted 
r=noise; 
% received signal 
for n=1 :K 
y(n)=sum(r(1 :n).*s(1 :n)); 
end 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.2. BINARY SIGNAL TRANSMISSION 
% Plotting the results: 
subplot(3,2,5) 
plot(I,[O y]) 
set(gca, 'XTickLabel' ,{' 0 '' 'STb''' lOTb''' 15Tb''' 20Tb'' '25Tb''' 30Tb'}) 
axis([O 30 -10 1 OJ) 
xlabel('(e) \sigmaA2= 1 & 0 is transmitted' ,'fontsize',10) 
% Sub-case: 1 is transmitted 
r=s+noise; 
% received signal 
for n=1 :K 
y(n)=sum(r(1 :n).*s(1 :n)); 
end 
% Plotting the results: 
subplot(3,2,6) 
plot(l,[O y]) 
set(gca, 'XTickLabel' ,{' 0 ''' STb''' lOTb' '' 15Tb'' '20Tb''' 25Tb'' '30Tb'}) 
axis([O 30 0 40]) 
xlabel('(f) \sigmaA2= 1 & 1 is transmitted' ,'fontsize',10) 
211 
--till!J.il;MlriiQ;t•]:JM§®·•---------
Illustrative Problem 5.10 [On-Off Signaling Simulation] Use Monte Carlo simula­
tion to estimate and plot the performance of a binary communication system employing 
on-off signaling. 
The model for the system to be simulated is similar to that shown in Figure 5.16, 
except that one of the signals is 0. Thus, we generate a sequence ofrandom variables 
{rd as given by (5.2.34). 
The detector compares the random variables {rd to the 
optimum threshold E / 2 and makes the appropriate decisions. Figure 5 .20 illustrates 
the estimated error probability based on 10,000 binary digits. The theoretical error rate 
given by (5.2.39) is also illustrated in this figure. 
The MATLAB scripts for this problem are given next. 
---tlli" ---------------
% MATLAB script for Illustrative Problem 5.10. 
echo on 
SNRindB1=0:1 :15; 
SNRindB2=0:0.1 :15; 
for i=1 :length(SNRindBl), 
srnld_err _prb(i)=srnldPe56(SNRindB 1 (i)); 
echo off; 
end; 
echo on; 
for i=1 :length(SNRindB2), 
SNR=exp(SNRindB2(i)*log(10)/1 O); 
theo_err_prb(i)=Qfunct(sqrt(SNR/2)); 
echo off; 
end; 
echo on; 
% simulated error rate 
% signal-to-noise ratio 
% theoretical error rate 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

212 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
% Plotting commands follow. 
semilogy(SNRindB l ,smld_err_prb, ' * ' ); 
hold 
semilogy(SNRindB2,theo_err_prb); 
10'------'-----'-----' 
0 
5 
10 
15 
Figure 5 .20: Error probability from Monte Carlo simulation compared with theoretical 
error probability for on-off signals 
---®'i" ----------------
function [p]=smldPe56(snr_in_dB) 
% [p]=smldPe56(snr_in...dB) 
% 
SMWPE56 
simulates the probability of error for a given 
% 
snr _in...dB, signal-to-noise ratio in dB. 
E=1; 
alpha_opt=1/2; 
SNR=exp( snr _in_dB*log( 1 0 )/1 0): 
sgma=E/sqrt(2*SNR); 
N=10000; 
% signal-to-noise ratio 
% sigma, standard deviation of noise 
% Generation of the binary data source follows. 
for i=1 :N, 
temp=rand; 
if (temp<0.5), 
dsource(i)=O; 
else 
dsource(i)=1 ; 
end 
end; 
% a uniform random variable over (0,1) 
% With probability 112, source output is 0. 
% With probability 112, source output is 1. 
% detection, and probability of error calculation 
numoferr=O; 
for i=1 :N, 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.2. BINARY SIGNAL TRANSMISSION 
% the matched filter outputs 
if (dsource(i)==O), 
r=gngauss(sgma); 
else 
r=E+gngauss(sgma); 
end; 
% Detector follows. 
if (r<alpha_opt), 
decis=O; 
else 
decis=1; 
end; 
if (decis-=dsource(i)), 
numofe=numoferr+ 1 ; 
end; 
end; 
p=numoferr/N; 
% if the source output is "O" 
% if the source output is "1 " 
% Decision is "O". 
% Decision is "1 ". 
% If it is an error, increase the error counter. 
% probability of error estimate 
S.2.3 
Signal Constellation Diagrams for Binary Signals 
213 
The three types of binary signals-namely, antipodal, on-off, and orthogonal-may 
be characterized geometrically as points in "signal space." In the case of antipodal 
signals, where the signals are s(t) and -s(t), each having energy E, the two signal 
points fall on the real line at ±JE, as shown in Figure 5.21(a). The one-dimensional 
geometric representation of antipodal signals follows from the fact that only one signal 
waveform or basis function-namely, s ( t) -suffices to represent the antipodal signals 
in the signal space. On-off signals are also one dimensional. Hence, the two signal 
points also fall on the real line at 0 and JE, as shown in Figure 5 .21 (b). 
On the other hand, binary orthogonal signals require a two-dimensional geometric 
representation because there are two linearly independent functions, so ( t) and s1 ( t), 
that constitute the two signal waveforms. Consequently, the signal points correspond­
ing to these points are ( JE, 0) and (0, JE), as shown in Figure 5.21(c). 
The geometric representations of the binary signals shown in Figure 5 .21 are called 
signal constellations. 
• 
-../£ 
0 
(a) 
• • 
• 
0 
(b) 
• 
• 
0 
(c) 
Figure 5.21: Signal constellations for binary signals. (a) Antipodal signals. (b) On-off 
signals. (c) Orthogonal signals 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

214 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
--li!!il;tyiltj#lij;te]:)!#j@I 
Illustrative Problem 5.11 [Noise Effect on the Constellation] The effect of noise on 
the performance of a binary communication system can be observed from the received 
signal plus noise at the input to the detector. For example, let us consider binary orthog­
onal signals, for which the input to the detector consists of the pair of random variables 
( ro, r1), where either 
or 
The noise random variables no and n1 are zero-mean, independent Gaussian random 
variables with variance u2• As in Illustrative Problem 5.6, use Monte Carlo simulation 
to generate 100 samples of (ro, r1) for each value of u = 0.1, u = 0.3, and u = 0.5, 
and plot these 100 samples for each u on different two-dimensional plots. The energy 
E of the signal may be normalized to unity. 
The results of the Monte Carlo simulation are shown in Figure 5.22. Note that at a 
low noise power level (u small) the effect of the noise on performance (error rate) 
of the communication system is small. As the noise power level increases, the noise 
components increase in size and cause more errors. 
The MATLAB script for this problem for u = 0. 5 is given next. 
% MATLAB script for Illustrative Problem 5 .11 . 
echo on 
n0=.5*randn(100, 1); 
nl=.5*randn(100, 1); 
n2=.5*randn(100, 1); 
n3=.5*randn(100, 1); 
x1=1.+n0; 
yl=nl; 
x2=n2; 
y2=1.+n3; 
plot(xl ,y 1, 'o' ,x2,y2, ' * ') 
axis(' square') 
5 .3 
Multiamplitude Signal Transmission 
In the preceding section, we treated the transmission of digital information by use of 
binary signal waveforms. Thus, each signal waveform conveyed 1 bit of information. 
In this section, we use signal waveforms that take on multiple amplitude levels. Thus, 
we can transmit multiple bits per signal waveform. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.3. MULTIAMPLITUDE SIGNAL TRANSMISSION 
.. 
,. 
,. 
,. 
CT= 0.1 
.. 
,. 
,. 
CT= 0.3 
..
..
.. 
CT= 0.5 
0 
0 
0 
0 
0 
0 
0 
0 
215 
0 
Figure 5 .22: Received signal points at input to the detector for orthogonal signals 
(Monte Carlo simulation) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

216 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
s0(t) 
T 
0 
-3d 
-f 
-- 
0 
-d 
T 
-f-- 
d 
-f 
0 
Sz(t) 
T 
Figure 5 .23: Multiamplitude signal waveforms 
3d t---. 
-f 
0 
T 
5.3.1 
Signal Waveforms with Four Amplitude Levels 
Let us consider a set of signal waveforms of the form 
Sm(t) = Amg(t), 
0  t  T 
(5.3.1) 
where Am is the amplitude of the m th waveform and g ( t) is a rectangular pulse de­
fined as 
g(t) = {,Jl/T, 
0, 
0  t  T 
otherwise 
(5.3.2) 
where the energy in the pulse g(t) is normalized to unity. In particular, we consider 
the case in which the signal amplitude takes on one of four possible equally spaced 
values-namely, {Am} = {-3d, -d, d, 3d} or, equivalently, 
Am = (2m - 3)d, 
m=0,1,2,3 
(5.3.3) 
where 2d is the Euclidean distance between two adjacent amplitude levels. The four 
signal waveforms are illustrated in Figure 5.23. We call this set of waveforms pulse 
amplitude modulated (PAM) signals. 
The four PAM signal waveforms shown in Figure 5 .23 can be used to transmit 2 
bits of information per waveform. Thus, we assign the following pairs of information 
bits to the four signal waveforms: 
00 - so(t) 
01 -+ 51 (t) 
11 - s2(t) 
10 -+ 53 (t) 
Each pair ofinformation bits {00, 01, 10, 11} is called asymbol,and the time duration 
T is called the symbol interval. Note that if the bit rate is R = 1 /Tb 
, the symbol interval 
is T = 2Tb. Because all the signal waveforms are scaled versions of the signal basis 
function g ( t), these signal waveforms may be represented geometrically as points on 
the real line. Therefore, the geometric representation of the four PAM signals is the 
signal constellation diagram shown in Figure 5 .24. 
As in the case of binary signals, we assume that the PAM signal waveforms are trans­
mitted through an AWGN channel. Consequently, the received signal is represented as 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.3. MULTIAMPLITUDE SIGNAL TRANSMISSION 
217 
00 
01 
11 
10 
-3d 
-d 
0 
d 
3d 
Figure 5 .24: Signal constellation for the four PAM signal waveforms 
r(t) = Si(t) + n(t), 
i = 0, 1, 2, 3, 
Q::;t::;T 
(5.3.4) 
where n(t) is a sample function of a white Gaussian noise process with power spec­
trum No/ 2 watts/hertz. The task of the receiver is to determine which of the four signal 
waveforms was transmitted after observing the received signal r ( t) in the interval 0 ::; 
t ::; T. The optimum receiver is designed to minimize the probability of a symbol error. 
5.3.2 
Optimum Receiver for the AWGN Channel 
The receiver that minimizes the probability of error is implemented by passing the 
signal through a signal correlator or matched filter followed by an amplitude detec­
tor. Because the signal correlator and the matched filter yield the same output at the 
sampling instant, we consider only the signal correlator in our treatment. 
Signal Correlator 
The signal correlator cross-correlates the received signal r ( t) with the signal pulse 
g(t) and its output is sampled at t = T. Thus, the signal correlator output is 
r = J: r(t)g(t) dt 
= f: Aig2 (t) dt + f: g(t)n(t) dt 
=Ai +n 
where n represents the noise component, defined as 
n = J: g(t)n(t) dt 
We note that n is a Gaussian random variable with mean 
E(n) = f: g(t)E[n(t)] dt = O 
and variance 
uz = E(nz) 
= J: fo
T 
g(t)g(T)E [n(t)n(T)] dtdT 
N, f
Tf
T 
= T 
0 
0 g(t)g(T)8(t - T) dt dT 
=Nof
T
gZ(t)dt 
2 
0 
No 
=-
2 
(5.3.5) 
(5.3.6) 
(5.3.7) 
(5.3.8) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

218 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
Therefore, the probability density function for the output r of the signal correlator 
is 
p(r I Si(t)was transmitted)= 
1 
e-Cr-Ail2/2u2 
J2riu 
where Ai is one of the four possible amplitude values. 
The Detector 
(5.3.9) 
The detector observes the correlator output r and decides which of the four PAM sig­
nals was transmitted in the signal interval. In the following development of the perfor­
mance of the optimum detector, we assume that the four possible amplitude levels are 
equally probable. 
Because the received signal amplitude Ai can take the values ± d, ± 3d, as illus­
trated in the signal constellation in Figure 5.24, the optimum amplitude detector com­
pares the correlator output r with the four possible transmitted amplitude levels and 
selects the amplitude level that is closest in Euclidean distance tor. Thus, the opti­
mum amplitude detector computes the distances 
i = 0, 1, 2, 3 
(5.3.10) 
and selects the amplitude corresponding to the smallest distance. 
We note that a decision error occurs when the noise variable n exceeds in magni­
tude one-half of the distance between amplitude levels-that is, when In I > d. How­
ever, when the amplitude level + 3d or -3d is transmitted, an error can occur in one 
direction only. Because the four amplitude levels are equally probable, the average 
probability of a symbol error is 
3 
P4 = 4P(lr - Am i
> d) 
3 Joo 
1 
-xz/2u2 d 
= -
e 
x 
2 d J2ri (} 
- 3 Joo 
1 
-xz /2 d 
- -
--e 
x 
2 d/u J2ri 
  Q() 
 
Q(Na) 
(5.3.11) 
We observe that the squared distance between successive amplitude levels is (2d)2 
= 
c52• Therefore, the average probability of error may be expressed as 
P4 = Q ( (82) 
2 
\j 4No 
(5.3.12) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.3. MULTIAMPLITUDE SIGNAL TRANSMISSION 
219 
10-4 
10--0 
10-7 --------- 
0 
10 
Figure 5.25: Probability of symbol error for four-level PAM 
Alternatively, the average probability of error may be expressed in terms of the signal 
energy. Because all four amplitude levels are equally probable, the average transmitted 
signal energy per symbol is 
1 
4 f T 
Eav = 4 L 
s(t) dt = 5d2 
k=l 
0 
(5.3.13) 
Consequently, d2 = Eav/5 and, hence, 
(5.3.14) 
Because each transmitted symbol consists of 2 information bits, the transmitted average 
energy per bit is Eav I 2 = Eavb. 
The average probability of error P4 is plotted in Figure 5.25 as a function of the 
SNR defined as 10 log10 (Eavb I No). 
---4114-il;fultji;'•'='•§i• 
Illustrative Problem 5.12 [Multiamplitude Signal Simulation] Perform a Monte 
Carlo simulation of the four-level (quaternary) PAM communication system that 
employs a signal correlator, as described earlier, followed by an amplitude detector. 
The model for the system to be simulated is shown in Figure 5.26. 
As shown, we simulate the generation of the random variable r, which is the output of 
the signal correlator and the input to the detector. We begin by generating a sequence 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

220 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
UniformRNG 
Mapping to 
amplitude level 
Error counter 
Compare 
Am with Am 
Gaussian random 
number generator 
r 
Detector 
Figure 5.26: Block diagram of four-level PAM for Monte Carlo simulation 
of quaternary symbols that are mapped into corresponding amplitude levels {Am}. To 
accomplish this task, we use a random number generator that generates a uniform ran­
dom number in the range (0, 1). This range is subdivided into four equal intervals, 
(0,0.25), (0.25,0.5), (0.5,0.75), (0.75, 1.0), where the subintervals correspond to 
the symbols (pairs of information bits) 00, 01, 11, 10, respectively. Thus, the out­
put of the uniform random number generator is mapped into the corresponding signal 
amplitude levels -3d, -d, d, 3d, respectively. 
The additive noise component having mean 0 and variance cr2 is generated by 
means of a Gaussian random number generator. For convenience, we may normalize 
the distance parameter d 
= 1 and vary u2• The detector observes r 
= Am + n and 
computes the distance between r and the four possible transmitted signal amplitudes. 
Its output, Am, is the signal amplitude level corresponding to the smallest distance. 
Am is compared with the actual transmitted signal amplitude, and an error counter is 
used to count the errors made by the detector. 
Figure 5 .27 illustrates the results of the simulation for the transmissions of N = 
10,000 symbols at different values of the average bit SNR, which is defined as 
Eavb 
=  ( d2) 
No 
4 
u2 
(5.3.15) 
Note the agreement between the simulation results and the theoretical values of P4 
computed from (5.3.14). 
The MATLAB scripts for this problem are given next. 
---4111&§ii! -- 
% MATLAB script for Illustrated Problem 5 .12 . 
echo on 
SNRindB1=0:1 :12; 
SNRindB2=0:0.1 :12; 
for i=1 :length(SNRindBl) , 
% simulated error rate 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.3. MULTIAMPLITUDE SIGNAL TRANSMISSION 
smld_err_prb(i)=smldPe58(SNRindB 1 (i)); 
echo off; 
end; 
echo on; 
for i=1 :length(SNRindB2), 
% signal-to-noise ratio 
SNR_per_bit=exp(SNRindB2(i)*log(10)/1 O); 
% theoretical error rate 
theo_err_ prb(i)=(3/2) *Qfunct(sqrt( ( 4/5) *SNR_ per_ bit)); 
echo off; 
end; 
echo on; 
% Plotting commands follow. 
sernilogy(SNRindBl,smld_err_prb,' * '); 
hold 
sernilogy(SNRindB2, theo_err_prb); 
10·4------------ 
0 
2 
4 
6 
8 
10 
12 
10 log10 (E!No) 
221 
Figure 5.27: Error probability for Monte Carlo simulation compared with theoretical 
error probability for M = 4 PAM 
---41Mli" ----------------
function [p]=smldPe58(snr_in_dB) 
% [p]=smldPe58(snr_in__dB) 
% 
SMLDPE58 
simulates the probability of error for the given 
% 
snr ..in--1.lB, signal to noise ratio in dB. 
d=1; 
SNR=exp(snLin_dB*log( 10)/10); 
sgma=sqrt((5*d"2)/(4*SNR)); 
% signal to noise ratio per bit 
% sigma, standard deviation of noise 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

222 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
N=10000; 
% number of symbols being simulated 
% Generation of the quaternary data source follows. 
for i=1 :N, 
temp=rand; 
% a uniform random variable over (0,1) 
if (temp<0.25), 
dsource(i)=O; 
% With probability 114, source output is 
elseif (temp<0.5), 
dsource(i)=1; 
% With probability 114, source output is 
elseif (temp<0.75), 
dsource(i)=2; 
% With probability 114, source output is 
else 
dsource(i)=3; 
% With probability 114, source output is 
end 
end; 
% detection, and probability of error calculation 
numoferr=O; 
for i=1 :N, 
% the matched filter outputs 
if (dsource(i)==O), 
r=-3*d+gngauss(sgma); 
elseif (dsource(i)==1 ), 
r=-d+gngauss(sgma); 
elseif (dsource(i)==2) 
r=d+gngauss(sgma); 
else 
r=3*d+gngauss(sgma); 
end; 
% Detector follows. 
if (r<-2*d), 
decis=O; 
elseif (r<O), 
decis=1; 
elseif (r<2*d), 
decis=2; 
else 
decis=3; 
end; 
% if the source output is "00" 
% if the source output is "OJ" 
% if the source output is "10" 
% if the source output is "11 " 
% Decision is "00." 
% Decision is "OJ." 
% Decision is "10." 
% Decision is "11." 
"00." 
"01." 
"10." 
"11." 
if (decis-=dsource(i)), 
numoferr=numoferr+ 1 ; 
end; 
% If it is an error, increase the error counter. 
end; 
p=numoferr/N; 
% probability of error estimate 
5.3.3 
Signal Waveforms with Multiple Amplitude Levels 
It is relatively straightforward to construct multiamplitude signals with more than four 
levels. In general, a set of M 
= zk multiamplitude signal waveforms is represented as 
Sm(t) = Amg(t), 
0::; t::; T, 
m = 0, 1, 2, ... , M - 1 
where the M amplitude values are equally spaced and given as 
Am = (2m - M + l)d, 
m = 0, 1, ... ,M - 1 
(5.3.16) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.3. MULTIAMPLITUDE SIGNAL TRANSMISSION 
223 
and g(t) is a rectangular pulse, which has been defined in (5.3.2). Each signal wave­
form conveys k = log2M bits of information. When the bit rate is R = 1 /Tb, the corre­
sponding symbol rate is l/T = l/kTb. As in the case of four-level PAM, the optimum 
receiver consists of a signal correlator (or matched filter) followed by an amplitude de­
tector that computes the Euclidean distances given by (5.3.10) form = 0, 1, ... , M -1. 
For equally probable amplitude levels, the decision is made in favor of the amplitude 
level that corresponds to the smallest distance. 
The probability of error for the optimum detector in an M-level PAM system can 
be shown to be 
PM= 2(M_.; 1) 
Q ( 6(1ogzM)Eavb ) 
(M2 - l)No 
(5.3.17) 
where Eavb is the average energy for an information bit. Figure 5 .28 illustrates the 
probability of a symbol error for M = 2, 4, 8, 16. 
10·8 ------+------ 
0 
5 
10 
15 
20 
25 
Figure 5.28: Symbol error probability for M-level PAM for M = 2, 4, 8, 16 
--tll!tJaii;MifUli;t•'="3®·•---------
Illustrative Problem 5.13 [PAM Simulation] Perform a Monte Carlo simulation of a 
16-level PAM digital communication system and measure its error-rate performance. 
The basic block diagram shown in Figure 5 .26 applies in general. A uniform random 
number generator is used to generate the sequence of information symbols, which are 
viewed as blocks of 4 information bits. The 16-ary symbols may be generated directly 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

224 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
10"8'-	
 
5 
10 
15 
20 
25 
10 log10 (Eavb/No) 
Figure 5 .29: Error rate from Monte Carlo simulation compared with the theoretical 
error probability for M = 16 PAM 
by subdividing the interval (0, 1) into 16 equal-width subintervals and mapping the 
16-ary symbols into the 16-ary signal amplitudes. A white Gaussian noise sequence is 
added to the 16-ary information symbol sequence, and the resulting signal plus noise 
is fed to the detector. The detector computes the distance metrics given by (5.3.10) and 
selects the amplitude corresponding to the smallest metric. The output of the detector 
is compared with the transmitted information symbol sequence and errors are counted. 
Figure 5 .29 illustrates the measured symbol error rate for 10000 transmitted symbols 
and the theoretical symbol error rate given by (5.3.17) with M = 16. 
The MATLAB scripts for this problem are given next. 
---tl®li" ---------------
% MATLAB script for Illustrative Problem 5 .13 . 
echo on 
SNRindB1=5:1 :25; 
SNRindB2=5:0.1 :25; 
M=16; 
for i=1 :length(SNRindBl), 
end; 
% simulated error rate 
smld_err_prb(i)=smldPe59(SNRindB 1 (i)); 
echo off; 
echo on ; 
for i=1 :length(SNRindB2), 
SNR_per_bit=exp(SNRindB2(i)*log(10)/1 O); 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.3. MULTIAMPLITUDE SIGNAL TRANSMISSION 
% theoretical error rate 
theo_err_ prb(i)=(2* (M -1 )/M)*Qfunct( sqrt( ( 6*log2(M)/(M" 2-1 ) )* SNR_ per_ bit)); 
echo off; 
end; 
echo on; 
% Plotting commands follow. 
semilogy(SNRindBl,srnld_err_prb,' * '); 
hold 
semilogy(SNRindB2,theo_err_prb); 
225 
---41Mli" ----------------
function [p ]=smldPe59( snr _in_dB) 
% [p]=smldPe59(snr_in...dB) 
% 
SMWPE59 
simulates the error probability for the given 
% 
snr -1n...dB, signal-to-noise ratio in dB. 
M=16; 
d=1; 
SNR=exp(snr_in_dB*log(10)/1 O); 
sgma=sqrt((85*d" 2)/(8*SNR)); 
N=10000; 
% generation of the data source 
for i=1 :N, 
temp=rand; 
index=floor(M*temp); 
dsource(i)=index; 
end; 
% 16-ary PAM 
% signal-to-noise ratio per bit 
% sigma, standard deviation of noise 
% number of symbols being simulated 
% a uniform random variable over (0,1) 
% The index is an integer from 0 to M-1, where 
% all the possible values are equally likely. 
% detection, and probability of error calculation 
numoferr=O; 
for i=1 :N, 
% matched filter outputs 
% (2*dsource(i)-M+l)*d is the mapping to the 16-ary constellation. 
r=(2*dsource(i)-M+ 1 )*d+gngauss(sgma); 
% the detector 
if (r>(M-2)*d), 
decis=15; 
elseif (r>(M-4)*d), 
decis=14; 
elseif (r>(M-6)*d), 
decis=13; 
elseif (r> (M-8)*d), 
decis=12; 
elseif (r>(M-10}*d), 
decis=11; 
elseif (r>(M-12)*d), 
decis=10; 
elseif (r>(M-14)*d), 
decis=9; 
elseif (r>(M-16)*d), 
decis=B; 
elseif (r>(M-18}*d), 
decis=7; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

226 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
elseif (r>(M-20)*d), 
decis=6; 
elseif (r>(M-22)*d), 
decis=5; 
elseif (r>(M-24)*d), 
decis=4; 
elseif (r>(M-26)*d), 
decis=3; 
elseif (r>(M-28)*d), 
decis=2; 
elseif (r>(M-30)*d), 
decis=1; 
else 
decis=O; 
end; 
if (decis-=dsource(i)), 
% If it is an error, increase the error counter. 
nurnoferr=nurnoferr+ 1 ; 
end; 
end; 
p=nurnoferr/N; 
% probability of error estimate 
5.4 
Multidimensional Signals 
In the preceding section we constructed multiamplitude signal waveforms, which al­
lowed us to transmit multiple bits per signal waveform. Thus, with signal waveforms 
having M 
= zk amplitude levels, we are able to transmit k 
= log2 M bits of infor­
mation per signal waveform. We also observed that the multiamplitude signals can 
be represented geometrically as signal points on the real line (see Figure 5.24). Such 
signal waveforms are called one-dimensional signals. 
In this section we consider the construction of a class of M = zk signal waveforms 
that have a multidimensional representation. 
That is, the set of signal waveforms 
can be represented geometrically as points in N-dimensional space. We have already 
observed that binary orthogonal signals are represented geometrically as points in two­
dimensional space. 
5.4.1 
Multidimensional Orthogonal Signals 
There are many ways to construct multidimensional signal waveforms with various 
properties. In this section, we consider the construction of a set of M 
= zk waveforms 
Si ( t), for i 
= 0, 1, ... , M - 1, which have the properties of (a) mutual orthogonality 
and (b) equal energy. These two properties may be succinctly expressed as 
J: Si(t)sk(t) dt = EDik. 
i, k 
= 0, 1, ... ,M - 1 
(5.4.1) 
where Eis the energy of each signal waveform and Dik is called the Kronecker delta, 
which is defined as 
Dik = {l, 
0, 
(5.4.2) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.4. MULTIDIMENSIONAL SIGNALS 
D 
T 
3T 
2 
4 
, t 
T 
)> t 
T 
T 
T 
4 
2 
3T 
4 
227 
, t 
T 
T 
Figure 5 .30: An example of four orthogonal, equal-energy signal waveforms 
As in our previous discussion, we assume that an information source is providing 
a sequence of information bits, which are to be transmitted through a communication 
channel. The information bits occur at a uniform rate of R bits per second. The recip­
rocal of R is the bit interval, Tb. The modulator takes k bits at a time and maps them 
into one of M = 2k signal waveforms. Each block of k bits is called a symbol. The 
time interval available to transmit each symbol is T = kTb. Hence, Tis the symbol 
interval. 
The simplest way to construct a set of M = 2k equal-energy orthogonal waveforms 
in the interval (0, T) is to subdivide the interval into M equal subintervals of duration 
T / M and to assign a signal waveform for each subinterval. Figure 5 .30 illustrates such 
a construction for M = 4 signals. All signal waveforms constructed in this manner 
have identical energy, given as 
E = f: s{(t) dt, 
A2T 
M 
i=0,1,2, ... ,M-l 
(5.4.3) 
Such a set of orthogonal waveforms can be represented as a set of M-dimensional 
orthogonal vectors-that is, 
So= (.JE°,0,0, ... ,0) 
S1 = (O,)E,0, ... ,0) 
SM = (0, 0, ... , 0, .JE°) 
(5.4.4) 
Figure 5 .31 illustrates the signal points (signal constellations) corresponding to M = 2 
and M = 3 orthogonal signals. 
Let us assume that these orthogonal signal waveforms are used to transmit informa­
tion through an AWGN channel. Consequently, if the transmitted waveform is Si(t), 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

228 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
M=2 
Figure 5 .31: Signal constellations for M = 2 and M = 3 orthogonal signals 
So(t) 
Received 
signal r(t) 
f()dt 
f()dt 
f()dt 
Detector 
Output 
decision 
Figure 5.32: Optimum receiver for multidimensional orthogonal signals 
the received waveform is 
r(t) = Si(t) + n(t), 
0  t  T, 
i = 0, 1, ... ,M - 1 
(5.4.5) 
where n(t) is a sample function of a white Gaussian noise process with power spec­
trum No/2 watts/hertz. The receiver observes the signal r(t) and decides which of the 
M signal waveforms was transmitted. 
Optimum Receiver for the AWGN Channel 
The receiver that minimizes the probability of error first passes the signal r(t) through 
a parallel bank of M matched filters or M correlators. Because the signal correlators 
and matched filters yield the same output at the sampling instant, let us consider the 
case in which signal correlators are used, as shown in Figure 5.32. 
Signal Correlators 
The received signal r ( t) is cross-correlated with each of the M signal waveforms and 
the correlator outputs are sampled at t = T. Thus, the M correlator outputs are 
Yi= f: r(t)Si(t) dt, 
i = 0, 1, ... , M - 1 
(5 .4.6) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.4. MULTIDIMENSIONAL SIGNALS 
229 
which may be represented in vector form as r = [Yo, Y1, ... , YM-iJ t. Suppose that 
signal waveform so ( t) is transmitted. Then 
Yo= f: s6(t) dt + f: n(t)so(t) dt 
= E+no 
(5.4.7) 
and 
Yi= f: so(t)si(t) dt + f: n(t)si(t) dt 
= J: n(t)si(t)dt = ni, 
i = 1,2,3, ... ,M-1 
(5.4.8) 
where 
(5.4.9) 
Therefore, the output Yo consists of a signal component E and a noise component no. 
The other M -1 outputs consist of noise only. Each of the noise components is Gaus­
sian, with mean zero and variance 
a2 = E(n?) 
t 
= f: f: Si(t)Si(T)E [n(t)n(T)] dt dT 
= Of: f: Si(t)Si(T)8(t -T) dt dT 
=No rT s?(t)dt 
2 J o 
1 
NoE 
2 
(5.4.10) 
The reader is encouraged to show that E(nmj) = 0, where if= j. Consequently, 
the probability density functions for the correlator outputs are 
( 
I 
( ) 
. 
d) 
1 
-(ro-E)2 /Zu2 
p Yo s0 t was transm1tte 
= J2IT a 
e 
p(Yi I so(t) was transmitted)= 
1 
e-ri/Zu2 
J2Ti a  
' 
i = 1,2, ... ,M -1 
The Detector 
The optimum detector observes the M correlator outputs Yi, where i = 0, 1, ... , M -1, 
and selects the signal corresponding to the largest correlator output. In the case where 
so(t) was transmitted, the probability of a correct decision is simply the probability 
that Yo >Yi for i = 1, 2, ... , M -1, or 
Pc = P(Yo > Y1, Yo > Yz, ... , Yo > YM-1) 
and the probability of a symbol error is simply 
PM= l -Pc 
= 1 -P (Yo > Y1 , Yo > Yz, ... , Yo > YM -1) 
(5.4.11) 
(5.4.12) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

230 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
It can be shown that PM can be expressed in integral form as 
(5.4.13) 
For the special case M = 2, the expression in (5.4.13) reduces to 
which is the result we obtained in Section 5.2 for binary orthogonal signals. 
The same expression for the probability of error is obtained when any one of the 
other M 
- 1 signals is transmitted. Because all the M signals are equally likely, the 
expression for PM given by (5.4.13) is the average probability of a symbol error. This 
integral can be evaluated numerically. 
Sometimes, it is desirable to convert the probability of a symbol error into an equiv­
alent probability of a binary digit error. For equiprobable orthogonal signals, all symbol 
errors are equiprobable and occur with probability 
(5.4.14) 
Furthermore, there are () ways in which n bits out of k may be in error. Hence, the 
average number of bit errors perk-bit symbol is 
(5.4.15) 
and the average bit-error probability is just the result in (5 .4.15) divided by k, the 
number of bits per symbol. Thus, 
zk-1 
Pb= 
2k _ l PM 
(5.4.16) 
The graphs of the probability of a binary digit error as a function of the SNR per bit, 
Eb/No, are shown in Figure 5.33 for M = 2,4, 8, 16, 32, 64, where Eb = E/k is the 
energy per bit. This figure illustrates that by increasing the number M of waveforms, 
one can reduce the SNR per bit required to achieve a given probability of a bit error. 
The MATLAB script for the computation of the error probability in ( 5 .4 .13) is given 
next. 
----4111®1i'' 11-- 
% MATLAB script that generates the probability of error versus the signal-to-noise ratio 
initial_ snr=O; 
final_snr=15; 
snr_step=1; 
tolerance=1e-7; 
minus_inf=-20; 
% tolerance used for the integration 
% This is practically negative infinity. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.4. MULTIDIMENSIONAL SIGNALS 
plus_inf=20; 
snr_in_dB=initiaLsnr:snr_step:final_snr; 
for i=1 :length(snr_in_dB), 
snr=10  (snr_in_dB(i)/1 O); 
Pe_2(i)=Qfunct(sqrt(snr)); 
% This is practically infinity. 
Pe_4(i)=(2/3)*quad8(' bdt _int' ,minus_inf,plus_inf,tolerance,[ ],snr,4); 
Pe_8(i)=(4/7)*quad8(' bdt_int' ,minus_inf,plus_inf,tolerance,[ ],snr,8); 
Pe_l6(i)=(8/15)*quad8(' bdt_int' ,minus_inf,plus_inf,tolerance,[ ],snr, 16); 
Pe_32(i)=(16/31 )*quad8(' bdt _int' ,minus_inf,plus_inf,tolerance,[ ],snr,32); 
Pe_64(i)=(32/63)*quad8(' bdt _int' ,minus_inf,plus_inf,tolerance,[ ],snr,64); 
end; 
% Plotting commands follow. 
10°---------- 
Pb 
10-1 %=--
10·6 
10·10 .._ 
______ __,_ 
_____ _.._.._._...__.. 
__ _._ 
_ __, 
0 
5 
10 
15 
Figure 5.33: Bit-error probability for orthogonal signals 
231 
Illustrative Problem 5.14 [Orthogonal Signaling Simulation] Perform a Monte Carlo 
simulation of a digital communication system that employs M 
= 4 orthogonal signals. 
The model of the system to be simulated is illustrated in Figure 5 .34. 
As shown, we simulate the generation of the random variables ro, r1, rz, r3, which 
constitute the input to the detector. We may first generate a binary sequence of O's and 
l's that occur with equal probability and are mutually statistically independent, as in 
Illustrative Problem 5.6. The binary sequence is grouped into pairs of bits, which are 
mapped into the corresponding signal components. An alternative to generating the 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

232 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
Gaussian RNG 
0 
r1 
Output 
Detector 
decision 
S; 
Uniform 
Mapping to 
0 
rz 
RNG 
signal points 
0 
r3 
Error counter 
Figure 5 .34: Block diagram of system with M = 4 orthogonal signals for Monte Carlo 
simulation 
individual bits is to generate the pairs of bits, as in Illustrative Problem 5.12. In any 
case, we have the mapping of the four symbols into the signal points: 
00 --+ So 
= ( JE, 0, 0, 0) 
01 --+ S1 
= (0, JE, 0, 0) 
10 --+ S2 
= (0, 0, JE, 0) 
11 --+ S3 
= (0, 0, 0, vfE) 
(5.4.17) 
The additive noise components no, n1, nz, n3 are generated by means of four Gaussian 
noise generators, each having a mean zero and variance a2 
= NoE / 2. For convenience, 
we may normalize the symbol energy to E 
= 1 and vary a2. Because E 
= 2Eb, it 
follows that Eb = . The detector output is compared with the transmitted sequence of 
bits, and an error counter is used to count the number of bit errors. 
Figure 5 .35 illustrates the results of this simulation for the transmission of 20 ,000 
bits at several different values of the SNR Eb/ No. Note the agreement between the 
simulation results and the theoretical value of Pb given by (5.4.16). 
The MATLAB scripts for this problem are given next. 
---Ii" ---------------
% MATLAB script for Illustrative Problem 5 .14 . 
echo on 
SNRindB=0:2:1 O; 
for i=1 :length(SNRindB), 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.4. MULTIDIMENSIONAL SIGNALS 
% simulated error rate 
smld_err_prb(i)=smldP510(SNRindB(i)); 
echo off; 
end; 
echo on; 
% Plotting commands follow 
semilogy(SNRindB,smld_err_prb, • * • ); 
llE 
10-s ._ _ _._ __ _._ _ _._ __ _,_ _ __._ __ __._ _ __, _ _._ __ .__ 
0 
2 
3 
4 
5 
6 
7 
8 
9 
10 
233 
Figure 5.35: Bit-error probability for M 
= 4 orthogonal signals from a Monte Carlo 
simulation compared with theoretical error probability 
---tlili" ----------------
function [p ]=smldPS 10( snr_in_dB) 
% [p]=smldP510(snr_in...dB) 
% 
SMLDP510 
simulates the probability of error for the given 
% 
snr _in...dB, signal-to-noise ratio in dB. 
M=4; 
% quaternary orthogonal signaling 
E=1; 
SNR=exp(snr_in_dB*log( 10)/10); 
sgma=sqrt(E  2/( 4 *SNR)); 
N=10000; 
% generation of the quaternary data source 
for i=1 :N, 
temp=rand; 
if (temp<0.25), 
dsourcel(i)=O; 
dsource2(i)=0; 
elseif (temp<0.5), 
% signal-to-noise ratio per bit 
% sigma, standard deviation of noise 
% number of symbols being simulated 
% a uniform random variable over (0,1) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

234 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
dsourcel (i)=O; 
dsource2(i)=1; 
elseif (temp<0.75), 
dsourcel(i)=1; 
dsource2(i)=O; 
else 
dsourcel(i)=1; 
dsource2(i)=1 ; 
end 
end; 
% detection, and probability of error calculation 
numoferr=O; 
for i=1 :N, 
% matched filter outputs 
if ((dsourcel (i)==O) & (dsource2(i)==0)), 
rO=sqrt(E)+gngauss(sgma); 
rl=gngauss(sgma); 
r2=gngauss(sgma); 
r3=gngauss(sgma); 
elseif ((dsourcel(i)==O) & (dsource2(i)==1 )), 
rO=gngauss(sgma); 
rl=sqrt(E)+gngauss(sgma); 
r2=gngauss(sgma); 
r3=gngauss(sgma); 
elseif ((dsourcel(i)==1) & (dsource2(i)==0)), 
rO=gngauss(sgma); 
rl=gngauss(sgma); 
r2=sqrt(E)+gngauss(sgma); 
r3=gngauss(sgma); 
else 
rO=gngauss(sgma); 
rl=gngauss(sgma); 
r2=gngauss(sgma); 
r3=sqrt(E)+gngauss( sgma); 
end; 
% the detector 
max_r=max([rO rl r2 r3]); 
if (rO==max_r), 
decisl=O; 
decis2=0; 
elseif (rl==max_r), 
decisl=O; 
decis2=1; 
elseif (r2==max_r), 
decis1=1; 
decis2=0; 
else 
decis1=1; 
decis2=1; 
end; 
% Count the number of bit errors made 
if (decisr=dsourcel(i)), 
numoferr=numoferr+ 1 ; 
end; 
if (decisZ-=dsource2(i)), 
in this decision. 
% If it is an error, increase the error counter. 
% If it is an error, increase the error counter. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.4. MULTIDIMENSIONAL SIGNALS 
numoferr=numoferr+ 1 ; 
end; 
end; 
p=numoferr/(2*N); 
S.4.2 
Biorthogonal Signals 
% bit error probability estimate 
235 
As we observed in the preceding section, a set of M = 2k equal-energy orthogonal 
waveforms can be constructed by subdividing the symbol interval T into M equal 
subintervals of duration T /M and assigning a rectangular signal pulse to each subinter­
val. A similar method can be used to construct another set of M = 2k multidimensional 
signals that have the property of being biorthogonal. In such a signal set, one-half the 
waveforms are orthogonal and the other half are the negative of these orthogonal wave­
forms; that is, so(t), s1(t), ... ,5M/2-l (t) are orthogonal signal waveforms. The other 
M/2 waveforms are simply Si+M12(t) = -Si(t), for i = 0, 1, ... , (M/2) -1. Thus we 
obtain M signals, each having M /2 dimensions. 
The MI 2 orthogonal waveforms can be easily constructed by subdividing the sym­
bol interval T = k Tb into M / 2 non overlapping subintervals, each of duration 2 T / M, 
and assigning a rectangular pulse to each subinterval. Figure 5 .36 illustrates a set of 
M = 4 biorthogonal waveforms constructed in this manner. The geometric repre­
sentation of a set of M signals constructed in this manner is given by the following 
(M /2)-dimensional signal points: 
so= (.JE,o,o, ... ,o) 
s1 = (O,.JE,0, ... ,0) 
SM/2-1 = (0, 0, 0, ... , .JE) 
sM12 = <-.JE,o,o, ... ,o) 
SM-1 = (0, 0, ... , -.JE) 
(5.4.18) 
As in the case of orthogonal signals, let us assume that the biorthogonal signal 
waveforms are used to transmit information through an AWGN channel. Then the 
s0(t) 
s1(t) 
Sz(t) 
S3(t) 
A 
A 
T 
T 
2 
2 
T 
0 
T 
0 
T 
T 
0 
0 
2 
2 
-A 
-A 
Figure 5.36: A set of M = 4 biorthogonal signal waveforms 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

236 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
received signal waveform may be expressed as 
r(t) = Si(t) + n(t), 
0  t  T 
(5.4.19) 
where Si(t) is the transmitted waveform and n(t) is a sample function of a white 
Gaussian noise process with power spectrum No/2 watts/hertz. 
Optimum Receiver 
The optimum receiver may be implemented by cross-correlating the received signal 
r(t) with each of the M /2 orthogonal signal waveforms, sampling the correlator out­
puts at t = T, and passing the MI 2 correlator outputs to the detector. Thus, we have 
i = 0, 1, ... '  -1 
Suppose that the transmitted signal waveform is so ( t). Then 
where 
ri = f: r(t)so(t) dt, 
i = 0, 1, ... ,  -1 
= {E +no, 
ni, 
i = 0 
i * 0 
i = 0, 1, ... '  -1 
(5.4.20) 
(5.4.21) 
(5.4.22) 
and E is the symbol energy for each signal waveform. The noise components are zero­
mean Gaussian and have a variance of cr2 = ENo/2. 
The Detector 
The detector observes the M /2 correlator outputs { ri, 0  i  (M /2) -1} and se­
lects the correlator output whose magnitude lril is largest. Suppose 
lrjl = max{lril} 
t 
(5.4.23) 
Then the detector selects the signal s j ( t) if rj > 0 and -s j ( t) if rj < 0. 
To determine the probability of error, suppose that so ( t) was transmitted. Then the 
probability of a correct decision is equal to the probability that ro = E + no > 0 and 
lrol > lril fori = 1,2, ... , (M/2) -1. Thus, 
where 
[ 
]M-1 
oo 
1 
ro/ JENo/2 
2 
Pc= r 
Ff 
e-x 12 dx 
p(ro) dro 
J o 
v LTT 
-r0/)EN0/2 
(5.4.24) 
(5.4.25) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.4. MULTIDIMENSIONAL SIGNALS 
237 
10-4 
10-6 
10-8 
10-10 
10-12 
10-14 
10-16 ._ 
___ _._ 
___ __. 
____ _._ 
___ __._ 
____ .._ 
___ _, 
0 
2 
4 
8 
10 
12 
Figure 5.37: Symbol-error probability for biorthogonal signals 
Finally, the probability of a symbol error is simply 
(5.4.26) 
Pc and PM may be evaluated numerically for different values of M from (5.4.24) 
and (5.4.25). The graph shown in Figure 5.37 illustrates PM as a function of the signal­
to-noise ratio Eb/No, where E 
= kEb for M 
= 2, 4, 8, 16, and 32. We observe that 
this graph is similar to that for orthogonal signals. However, for biorthogonal signals 
we note that P4 > P2. This is due to the fact that we have plotted the symbol-error 
probability PM in Figure 5 .37. If we plot the equivalent bit-error probability, we would 
find that the graphs for M = 2 and M = 4 coincide. 
The MATLAB script for the computation of the error probability in (5.4.24) and 
(5.4.26) is given next. 
---tlli" ---------------
% MATLAB script that generates the probability of error versus the signal-to-noise ratio. 
initiaL snr=O; 
finaLs=12; 
snr_step=0.75; 
tolerance=eps; 
plus_inf=20; 
snr_in_dB=initial_snr:snr_step:final_snr; 
for i=1 :length(snr_in_dB) , 
snr=1 OA (snr_in_dB(i)/1 O); 
% tolerance used for the integration 
% This is practically infinity. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

238 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
Pe_2(i)=1-quad8(' bdt _ int2 ',O,plus_inf,tolerance,( ],snr,2); 
Pe-4(i)=1-quad8(' bdt_int2' ,O,plus_inf,tolerance,[ ],snr,4); 
Pe_8(i)=1-quad8(' bdt _ int2 ',O,plus_inf,tolerance,[ ],snr,8); 
Pe_l6(i)=1-quad8(' bdt_int2' ,O,plus_inf,tolerance,[ ],snr, 16); 
Pe_32(i)=1-quad8(' bdt _ int2' ,O,plus_inf,tolerance,[ ],snr,32); 
end; 
% Plotting commands follow. 
Illustrative Problem 5.15 [Correlation of Biorthogonal Signal Waveforms] A set 
of M 
= 4 biorthogonal signal waveforms is shown in Figure 5.36. Note that s2 (t) 
= 
-so(t) and s3(t) 
= -s1(t). 
Therefore, only two correlators are needed at the re­
ceiver to process the received signal, one for correlating r(t) with s1 (t) and one for 
correlating r ( t) with s2 ( t) . 
Suppose the received signal r(t) is sampled at a rate of Fs 
= 40/T and the corre­
lations at the receiver are performed numerically, that is, 
k 
Yo(kTs) = L r(nTs)so(nTs). 
k = 1,2, ... ,20 
n=l 
k 
Y1 ( k Ts ) = L r ( n Ts) si( n Ts), 
k = 21, 2 2, ... , 40 
n=21 
Compute and plot Yo(kTs) and Y1(kTs) when (a) so(t) is transmitted, (b) si(t) is 
transmitted, ( c) -so ( t) 
= s2 ( t) is transmitted, and ( d) -si( t) 
= s3 ( t) is transmitted 
and the additive noise is zero-mean, white, and Gaussian and the variance of the noise 
samples is cr2 
= 0, cr2 
= 0.1, and cr2 
= 1. 
Figure 5.38 illustrates the outputs of the two correlators for different noise variances 
and transmitted signals. The MATLAB script for the computation is given next. 
% MATLAB script for Illustrative Problem 5 .15. 
% Initialization: 
K=40; 
% Number of samples 
A=1 ; 
% Signal amplitude 
m=O:K/2; 
n=Kl2:K; 
% Defining signal waveforms: 
s_O=[A *ones(1,K/2) zeros(1,K/2)]; 
s_l=[zeros(1,K/2) A *ones(1,K/2)]; 
s-2=(-A *ones(1 ,K/2) zeros(1,K/2)]; 
s_3=[zeros(1,K/2) -A *ones(1,K/2)]; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.4. MULTIDIMENSIONAL SIGNALS 
20 
10 
0 
-10 
-20 
20 
10 
0 
-10 
-20 
20 
0 
-20 
0 
0 
0 
5Th 
lOTh 
... 
·• . . . . 
5Th 
lOTh 
5Th 
lOTh 
.... 
15Th 
20Th 
. .. . 
. .... 
15Th 
20Th 
... . ........ 
15Th 
20Th 
20 
10 
239 
0 111>-!1Z 
.......................
.......................
...... __,._ ..... .._.,._..__,._-<I> 
-10 
-20 
- . 
20Tb 
25Tb 
30Th 
35Tb 
40Tb 
20 
r*: 
..... 
10 
9 -" ... •--* 
.... ... ....--
...... 
o ... ]^-e--e-<:>-@>-el--&--&-'-<_H'> 
..... '<'J.-[\-'f'>'.-4> 
-10 
-20 
20Tb 
25Tb 
30Th 
35Tb 
40Tb 
-
· --
-20 
20Tb 
25Tb 
30Th 
35Tb 
40Tb 
Figure 5.38: Correlator outputs in Illustrative Problem 5.15. Solid, dashed, dotted, 
and dash-dotted plots correspond to transmission of so ( t) , s1 ( t) , s2 ( t) , and 53 ( t) , 
respectively. 
% Initializing Outputs: 
y_O_O=zeros(1,K); 
y_O_l=zeros(1,K); 
y_0_2=zeros(1,K); 
y_0_3=zeros(1,K); 
y_LO=zeros(1,K); 
y_Ll=zeros(1,K); 
y_L2=zeros(1,K); 
y_L3=zeros(1,K); 
% Case I: noise-N(O,O) 
noise=random( 'Normal' ,0,0, 1,K); 
r_O=s_O+noise; r_l=s_l +noise; % received signals 
r_2=s_2+noise; r_3=s_3+noise; % received signals 
for k=1 :K/2 
y_O_O(k)=sum(r-0(1 :k).*s-0(1 :k)); 
y_O_l(k)=sum(r-1(1 :k).*s_0(1 :k)); 
y _0_2(k)=sum(r_2(1 :k).*s_0(1 :k)); 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

240 
end 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
y_Q_3(k)=sum(r_3(1 :k).*s_0(1 :k)); 
l=Kl2+k; 
y_LO(l)=sum(r_0(21 :l).*s_l(21 :1)); 
y_Ll(l)=sum(r_I(21 :l).*s_l(21 :1)); 
y_L2(l)=sum(r_2(21 :l).*s_l(21 :l)); 
y_L3(l)=sum(r_3(21 :l).*s-1(21 :l)); 
% Plotting the results: 
subplot(3,2, 1) 
plot(m,[O y_Q_Q(1 :K/2)],' -bo' ,m,[O y_Q_l(1 :K/2)], '--b* ', ... 
m,[O y_Q_2(1 :K/2)],' : b. ',m,[O y_Q_3(1 :K/2)],' - • ') 
set(gca, 'XTickLabel' ,{' 0 ',' 5Tb' ,' lOTb',' 15Tb' ,' 20Tb'}) 
axis([O 20 -25 25]) 
xlabel('(a) \sigmaA2= O & y_{O}(kT_{b})' ,'fontsize',10) 
subplot(3,2,2) 
plot(n,[O y_LO(K/2+1 :K)],' -bo' ,n,[O y_Ll(K/2+1 :K)], '--b* ', ... 
n,[O y_L2(K/2+1 :K)],' : b. ',n,[O y_L3(K/2+1 :K)],' - • ') 
set(gca, 'XTickLabel' ,{' 20Tb', '25Tb',' 30Tb',' 35Tb',' 40Tb'}) 
axis([20 40 -25 25]) 
xlabel(' (b) \sigmaA2= O & y_{l}(kT_{b})' ,' fontsize' ,10) 
% Case 2: noise-N(0,0.1) 
noise=random( 'Normal' ,0,0.1,4,K); 
r_O=s_O+noise(1,:); r_}:s_l+noise(2,:); % received signals 
r_2=s_2+noise(3,:); r_3=s_3+noise(4,:); % received signals 
for k=1 :K/2 
end 
y_Q_Q(k)=sum(r_0(1 :k).*s_0(1 :k)); 
y_Q_l(k)=sum(r_l(1 :k).*s-0(1 :k)); 
y_Q_2(k)=sum(r_2(1 :k).*s_0(1 :k)); 
y_Q_3(k)=sum(r_3(1 :k).*s_0(1 :k)); 
l=Kl2+k; 
y_LO(l)=sum(r_0(21 :l).*s_l(21 :l)); 
y_Ll(l)=sum(r_l(21 :l).*s_l(21 :l)); 
y_L2(l)=sum(r_2(21 :l).*s-1(21 :l)); 
y_L3(l)=sum(r_3(21 :l).*s_l(21 :1)); 
% Plotting the results: 
subplot(3,2,3) 
plot(m,[O y_Q_0(1 :K/2)],' -bo' ,m,[O y_Q_l(1 :K/2)],' --b* ' ... 
,m,[O y_0_2(1 :K/2)],' : b. ',m,[O y_0_3(1 :K/2)],' - • ') 
set(gca, 'XTickLabel, ,{' 0,', 5Tb'', lOTb'', 15Tb'', 20Tb'}) 
axis([O 20 -25 25]) 
xlabel('(c) \sigmaA2= 0.1 & y_{O}(kT_{b})' ,'fontsize',10) 
subplot(3,2,4) 
plot(n,[O y_LQ(K/2+1 :K)],' -bo' ,n,[O y_Ll(K/2+1 :K)], '--b* ', ... 
n,[O y_L2(K/2+1 :K)],' : b. ',n,[O y_L3(K/2+1 :K)],' - • ') 
set(gca, 'XTickLabel' ,{' 2 OTb',' 25Tb',' 30Tb',' 35Tb',' 40Tb' }) 
axis([20 40 -25 25]) 
xlabel('(d) \sigmaA2= 0.1 & y_{l}(kT_{b})' ,'fontsize',10) 
% Case 3: noise-N(O,l) 
noise=random( 'Normal' ,0, 1,4,K); 
r_O=s_O+noise(1,:); r_l=s-l+noise(2,:); % received signals 
r_2=s_2+noise(3,:); r_3=s_3+noise(4,:); % received signals 
for k=1 :K/2 
y_Q_O(k)=sum(r_0(1 :k).*s_0(1 :k)); 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.4. MULTIDIMENSIONAL SIGNALS 
end 
y_O_l(k)=sum(r_l(1 :k).*s_0(1 :k)); 
y_0_2(k)=sum(r_2(1 :k).*s_0(1 :k)); 
y_0_3(k)=sum(r_3(1 :k).*s_0(1 :k)); 
l=Kl2+k; 
y_LO(l)=sum(r_0(21 :l).*s-1(21 :l)); 
y_Ll(l)=sum(r_l(21 :l).*s_l(21 :l)); 
y_L2(l)=sum(r_2(21 :l).*s-1(21 :l)); 
y_L3(l)=sum(r_3(21 :l).*s_l(21 :l)); 
% Plotting the results: 
subplot(3,2,5) 
plot(m,(O y_0_0(1 :K/2)],' -bo' ,m,(O y_O_l(1 :K/2)], '--b* ', ... 
m,[O y_0_2(1 :K/2)],' : b. ',m,[O y_0_3(1 :K/2)],' - • ') 
set(gca,, XTickLabel, ,{, 0,', 5Tb,', lOTb, ,' 15Tb, ,' 2 OTb, }) 
axis([O 20 -30 30]) 
xlabel('(e) \sigrnaA2= 1 & y_{O}(kT_{b})' ,'fontsize',10) 
subplot(3,2,6) 
plot(n,(O y_LO(K/2+1 :K)], '-bo' ,n,(O y_Ll(K/2+1 :K)], '--b* ', ... 
n,(O y_L2(K/2+1 :K)],' : b. ',n,(O y_L3(K/2+1 :K)],' - • ') 
set(gca,' XTickLabel, ,{, 2 OTb, ,' 25Tb, ,' 30Tb, ,' 35Tb, ,' 40Tb, }) 
axis([20 40 -30 30]) 
xlabel(' (f) \sigrnaA2= 1 & y_{l}(kT_{b})' ,'fontsize',10) 
--tll!U-il;flHTjj;t•1="§1• 
241 
Illustrative Problem 5.16 [Biorthogonal Signaling Simulation] Perform a Monte 
Carlo simulation for a digital communication system that employs M 
= 4 biorthog­
onal signals. The model of the system to be simulated is illustrated in Figure 5.39. 
Uniform 
RNG 
Mapping to 
signal points 
±-YE 
0 
Gaussian RNG 
+ 
Gaussian RNG 
Compare 
s; withs; 
Symbol 
error counter 
ro 
Output 
Detector 
decision 
S; 
r1 
Figure 5.39: Block diagram of the system with M = 4 biorthogonal signals for Monte 
Carlo simulation 
As shown, we simulate the generation of the random variables ro and r1, which con­
stitute the input to the detector. We begin by generating a binary sequence of O's and 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

242 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
10-2 
10-6 .__ 
_ _._ 
_ _._ 
_ _,_ 
_ _,_ 
_ __,_ 
_ __. 
__ .._ 
_ _,_ 
_ _,_ 
_ _, 
0 
2 
3 
4 
5 
6 
7 
8 
9 
10 
Figure 5.40: Symbol-error probability for M = 4 biorthogonal signals from Monte 
Carlo simulation compared with theoretical error probability 
1 's that occur with equal probability and are mutually statistically independent, as in 
Illustrative Problem 5.6. The binary sequence is grouped into pairs of bits, which are 
mapped into the corresponding signal components as follows: 
00- so= ()£,O) 
01 -+ S1 = (0, ./£) 
10-+ Sz = (0, -JE) 
11-+ S3 = (-VE,O) 
Alternatively, we may use the method in Illustrative Problem 5.12 to generate the 2-bit 
symbols directly. 
Because s2 = -s1 and S3 = -so, the demodulation requires only two correlators 
or matched filters, whose outputs are ro and r1. The additive noise components no and 
n1 are generated by means of two Gaussian noise generators, each having mean zero 
and variance u2 = NoE / 2. For convenience, we may normalize the symbol energy to 
E = 1 and vary u2. Because E = 2Eb, it follows that Eb = . The detector output is 
compared with the transmitted sequence of bits, and an error counter is used to count 
the number of symbol errors and the number of bit errors. 
Figure 5 .40 illustrates the results of this simulation for the transmission of 20 ,000 
bits at several different values of the SNR Eb I No. Note the agreement between the 
simulation results and the theoretical value of P4 given by (5.4.26) and (5.4.24). 
The MATLAB scripts for this problem are given next. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

5.4. MULTIDIMENSIONAL SIGNALS 
243 
--41ili" ----------------
% MATLAB script for Illustrative Problem 5.16. 
echo on 
SNRindB=0:2:1 O; 
for i=1 :length(SNRindB), 
end; 
% simulated error rate 
smld_err_prb(i)=smldP511 (SNRindB(i)); 
echo off; 
echo on ; 
% Plotting commands follow. 
--41ili" ----------------
function [p]=smldP51l(snr_in_dB) 
% [p]=smldP5ll(snr_in...dB) 
% 
SMLDP511 
simulates the probability of error for the given 
% 
% 
M=4; 
snr ..in...dB, signal-to-noise ratio in dB, for the system 
described in Illustrated Problem 5 .11. 
E=1; 
SNR=exp(snr_in_dB*log(10)/1 O); 
sgma=sqrt(E" 2/( 4 *SNR)); 
N=10000; 
% generation of the quaternary data source 
for i=1 :N, 
temp=rand; 
if (temp<0.25), 
dsource(i)=O; 
elseif (temp<0.5), 
dsource(i)=1 ; 
elseif (temp<0.75), 
dsource(i)=2; 
else 
dsource(i)=3; 
end 
end; 
% quaternary biorthogonal signaling 
% signal-to-noise ratio per bit 
% sigma, standard deviation of noise 
% number of symbols being simulated 
% uniform random variable over (0,1) 
% detection, and error probability computation 
numoferr=O; 
for i=1 :N, 
% the matched filter outputs 
if (dsource(i)==O) 
rO=sqrt(E)+gngauss( sgma); 
rl=gngauss(sgma); 
elseif (dsource(i)==1) 
rO=gngauss(sgma); 
rl=sqrt(E)+gngauss(sgma); 
elseif ( dsource(i)==2) 
r0=-sqrt(E)+gngauss(sgma); 
rl=gngauss(sgma); 
else 
rO=gngauss(sgma); 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

244 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
rl=-sqrt(E)+gngauss(sgma); 
end; 
% detector follows 
if (rO>abs(rl)), 
decis=O; 
elseif (rl >abs(rO)), 
decis=1; 
elseif (rO<-abs(rl)), 
decis=2; 
else 
decis=3; 
end; 
if (decis-=dsource(i)), 
numofe=numoferr+ 1 ; 
end; 
end; 
p=numoferr/N; 
% If it is an error, increase the error counter. 
% bit error probability estimate 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
245 
Problems 
5.1 Suppose the two orthogonal signals shown in Figure 5 .2 are used to transmit bi­
nary information through an AWGN channel. The received signal in each bit inter­
val of duration Tb is given by (5.2.1). Suppose that the received signal waveform is 
sampled at a rate of 10/Tb-that is, at ten samples per bit interval. Hence, in dis­
crete time, the signal waveform so ( t) with amplitude A is represented by the ten sam­
ples (A, A, ... , A), and the signal waveform s1 ( t) is represented by the ten samples 
(A,A,A,A,A, -A, -A, -A, -A, -A) .  Consequently, the sampled version of the re­
ceived sequence when so(t) is transmitted it is 
and when s1 ( t) is transmitted it is 
k = 1, 2, ... , 10 
1:::; k:::; 5 
6:::; k:::; 10 
where the sequence { nd is i.i.d., zero mean, Gaussian with each random variable 
having the variance a-2. Write a MATLAB routine that generates the sequence {rk} 
for each of the two possible received signals, and perform a discrete-time correlation 
of the sequence { rk } with each of the two possible signals so ( t) and s1 ( t) represented 
by their sampled versions for different values of the additive Gaussian noise variance 
a-2 
= 0, a-2 
= 0.1, a-2 
= 0.5, and a-2 
= 1.0. The signal amplitude may be normalized 
to A = 1. Plot the correlator outputs at time instants k = 1, 2, 3, ... , 10. 
5.2 Repeat Problem 5.1 for the two signal waveforms so(t) and s1 (t) illustrated in 
Figure P5 .2. Describe the similarities and differences between this set of two signals 
and those illustrated in Figure 5 .2. Is one set better than the other from the viewpoint 
of transmitting a sequence of binary information signals? 
s0(t) 
SJ (t) 
A 
T 
0 
0 
T 
T 
2 
-A 
-A 
Figure P5.2 
5.3 Repeat the correlation of signal waveforms in Illustrative Problem 5.2 for each of 
the noise variances a-2 
= 0.1, a-2 
= 1, a-2 
= 3 and plot the correlator outputs for each 
value of a-2. 
5.4 Repeat the matched filtering of signal waveforms in Illustrative Problem 5.4 for 
each of the noise variances u2 
= 0.1, u2 
= 
1, u2 
= 3 and plot the matched filter 
outputs for each value of a-2• 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

246 
CHAPTER 5. BASEBAND DIGITAL TRANSMISSION 
5.5 The antipodal signal waveforms shown in Figure 5.12 (a) are constant over the sig­
nal interval 0 :S: t :S: Tb. In this case, the correlator shown in Figure 5.13 (b) can be 
simplified by eliminating the multiplication by s(t). Thus, the correlator is simply an 
integrator whose output is reset to zero at the end of each signal interval. As a conse­
quence, the correlator is called an integrate-and-dump (I&D) filter. For the antipodal 
signal waveforms in Figure 5.12(a), sketch the I&D filter outputs when so(t) and s1 (t) 
are transmitted. 
5.6 In this problem, the objective is to substitute two matched filters in place of the two 
correlators in Problem 5 .1. The condition for generating signals is identical to Problem 
5.1. 
Write a MATLAB routine that generates the sequence {rk} for each of the two 
possible received signals, and perform the discrete-time matched filtering of the se­
quence { rk} with each of the two possible signals so ( t) and s1 ( t), represented by their 
sampled versions, for different values of the additive Gaussian noise variance (]"2 
= 0, 
(]"2 
= 0.1, (]"2 
= 1.0, and (]"2 
= 2.0. 
The signal amplitude may be normalized to 
A = 1. Plot the correlator outputs at time instants corresponding to k = 1, 2, . . .  , 10. 
5.7 Repeat Problem 5.6 for the signal waveforms shown in Figure P5.2. 
5.8 Run the MATLAB program that performs a Monte Carlo simulation of the binary 
communication system shown in Figure 5.10, based on orthogonal signals. Perform 
the simulation for 10 ,000 bits and measure the error probability for (]"2 
= 0, (]"2 
= 0.1, 
(]"2 
= 0.5, and (]"2 
= 1.0. Plot the theoretical error rate and the error rate measured 
from the Monte Carlo simulation and compare the two results. Also plot 1000 received 
signal-plus-noise samples at the input to the detector for each value of (]"2• 
5.9 Repeat Problem 5.8 for the binary communication system shown in Figure 5.16, 
based on antipodal signals. 
5.10 Repeat Problem 5.8 for the binary communication system based on on-off sig­
nals. 
5.11 Run the MATLAB program that performs a Monte Carlo simulation of a quater­
nary PAM communication system. Perform the simulation for 10,000 symbols (20,000 
bits) and measure the symbol-error probability for (]"2 
= 0, (]"2 
= 0.1, (]"2 
= 0.5, 
and (]"2 
= 1.0. Plot the theoretical error rate and the error measured from the Monte 
Carlo simulation and compare these results. Also plot 1000 received signal-plus-noise 
samples at the input to the detector for each value of (]"2. 
5.12 Modify the MATLAB program in Problem 5.11 to simulate M 
= 8 PAM signals 
and perform the Monte Carlo simulations as specified in Problem 5 .11. 
5.13 Repeat Illustrative Problem 5.7 for each of the noise variances (]"2 
= 1, (]"2 
= 2, 
(]"2 
= 4. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
247 
5.14 Repeat Illustrative Problem 5.9 for each of the noise variances u2 
= 1, u2 
= 2, 
(]"2 
= 4. 
5.15 Run the MATLAB program that performs the Monte Carlo simulation of a dig­
ital communication system that employs M 
= 4 orthogonal signals, as described in 
Illustrative Problem 5.14. Perform the simulation for 10,000 symbols (20,000 bits) and 
measure the bit-error probability for u2 
= 0.1, u2 
= 0.5, and u2 
= 1.0. Plot the the­
oretical error probability and the error rate measured from the Monte Carlo simulation 
and compare these results. 
5.16 Consider the four signal waveforms shown in Figure P5.16. 
Show that these 
four signal waveforms are mutually orthogonal. Will the results of the Monte Carlo 
simulation of Problem 5.14 apply to these signals? Why or why not? 
Sz(t) 
A f----. 
A 
A 
A 
T 
T 
T 
0 
T 
-A 
-A 
-A 
P5.16 
5.17 Run the MATLAB program that performs the Monte Carlo simulation of a digital 
communication system that employs M 
= 4 biorthogonal signals, as described in Il­
lustrative Problem 5.16. Perform the simulations for 10,000 symbols (20,000 bits) and 
measure the symbol-error probability for a2 
= 0.1, u2 
= 1.0, and u2 
= 2.0. Plot the 
theoretical symbol-error probability and the error rate measured from the Monte Carlo 
simulation and compare the results. Also plot 1000 received signal-plus-noise samples 
at the input to the detector for each value of u2• 
5.18 Repeat Illustrative Problem 5 .15 for each of the noise variances u2 
= 1, u2 
= 2, 
(]"2 
= 4. 
5.19 Consider the four signal waveforms shown in Figure P5.19. Show that they are 
biorthogonal. Will the results of the Monte Carlo simulation in Problem 5 .17 apply to 
this set of four signal waveforms? Why? 
s0(t) 
sz(t) 
s1(t) 
S3(t) 
A 
A 
A 
T 
T 
2 
T 
0 
T 
0 
0 
0 
T 
T 
2 
-A 
-A 
-A 
P5.19 
5.20 Using the graphs given in this chapter, compare the values of Eb I No required to 
achieve a symbol-error probability of 10-6 for M = 8 PAM, orthogonal, and biorthog­
onal signals. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

Copyright 2011 Cengage Learning. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

Chapter 6 
Digital Transmission Through 
Bandlimited Channels 
6.1 
Preview 
In this chapter we treat several aspects of digital transmission through bandwidth­
limited channels. We begin by describing the spectral characteristics of PAM signals. 
Secondly, we consider the characterization of bandlimited channels and the problem of 
designing signal waveforms for such channels. Then we treat the problem of design­
ing channel equalizers that compensate for distortion caused by bandlimited channels. 
We show that channel distortion results in intersymbol interference (ISi), which causes 
errors in signal demodulation. A channel equalizer is a device that reduces the inter­
symbol interference and thus reduces the error rate in the demodulated data sequence. 
6.2 
The Power Spectrum of a Digital PAM Signal 
In the preceding chapter we considered the transmission of digital information by pulse 
amplitude modulation (PAM). In this section we study the spectral characteristics of 
such signals. 
A digital PAM signal at the input to a communication channel is generally repre­
sented as 
00 
v (t) 
= L ang(t - nT) 
n=-oo 
(6.2.1) 
where {an} is the sequence of amplitudes corresponding to the information symbols 
from the source, g(t) is a pulse waveform, and Tis the reciprocal of the symbol rate. 
T is also called the symbol interval. Each element of the sequence {an} is selected 
from one of the possible amplitude values, which are 
Am 
= (2m - M + l)d, 
m = 0, 1, . . .  ,M - 1 
(6.2.2) 
249 
Copyright 2011 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not material1y affect the overall learning experience. Cengage Leaming reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

250 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
where d is a scale factor that determines the Euclidean distance between any pair of 
signal amplitudes (2d is the Euclidean distance between any adjacent signal amplitude 
levels). 
Because the information sequence is a random sequence, the sequence {an} of 
amplitudes corresponding to the information symbols from the source is also random. 
Consequently, the PAM signal v (t) is a sample function of a random process V(t). To 
determine the spectral characteristics of the random process V ( t) , we must evaluate 
the power spectrum. 
First, we note that the mean value of V(t) is 
00 
E [V(t)] = L E(an)g(t - nT) 
n=-oo 
(6.2.3) 
By selecting the signal amplitudes to be symmetric about zero, as given in (6.2.2), and 
equally probable, we have E(an) = 0 and hence E [V(t)] = 0. 
The autocorrelation function of V ( t) is 
Rv(t + T;t) = E[V(t)V(t + T)] 
(6.2.4) 
It is shown in many standard texts on digital communications that the autocorrelation 
function is a periodic function in the variable t with period T. Random processes that 
have a periodic mean value and a periodic autocorrelation function are called periodi­
cally stationary, or cyclostationary. The time variable t can be eliminated by averaging 
Rv (t + T; t) over a single period; that is, 
-
1 f 
T/2 
Rv(T)=T 
Rv(t+T;t)dt 
-T/2 
This average autocorrelation function for the PAM signal can be expressed as 
-
1 00 
Rv (T) = T 
L 
Ra(m)R9(T - mT) 
m=-oo 
(6.2.5) 
(6.2.6) 
where Ra(m) = E(anan+m) is the autocorrelation of the sequence {an} and R9(T) 
is defined as 
Rg(T) = f :00 g(t)g(t + T) dt 
(6.2.7) 
The power spectrum of V ( t) is simply the Fourier transform of the average auto­
correlation function Rv ( T); that is, 
Sv<J) = J:00 
Rv(T)e-j2rrfT dt 
= Sa(f)[G(f)l2 
(6.2.8) 
where Sa(f) is the power spectrum of amplitude sequence {an} and G(j) is the 
Fourier transform of the pulse g ( t). Sa (j) is defined as 
00 
Sa<f) = L 
Ra(m)e-j2rrfmT 
(6.2.9) 
m=-oo 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.2. THE POWER SPECTRUM OF A DIGITAL PAM SIGNAL 
251 
From (6.2.8) we observe that the power spectrum of the PAM signal is a function 
of the power spectrum of the information symbols {an} and the spectrum of the pulse 
g ( t) . In the special case where the sequence {an} is uncorrelated- that is, 
{crJ, m = 0 
Ra(m) 
= 
0, 
m* 0 
where crJ 
= E (a) -it follows that Sa (j) 
= CT J for all f and 
2 
Sv (j) 
= 
CT a IG(j) 12 
T 
(6.2.10) 
(6.2.11) 
In this case, the power spectrum of V ( t) is dependent entirely on the spectral charac­
teristics of the pulse g ( t) . 
---41814-il;MIW§lij;t•]:JM§l·I---------
Illustrative Problem 6.1 [PAM Power Spectrum] Determine the power spectrum of 
V ( t) when {an} is an uncorrelated sequence and g ( t) is the rectangular pulse shown 
in Figure 6.1. 
I 
ff 
0 
T 
Figure 6.1: Transmitter pulse 
The Fourier transform of g ( t) is 
and 
G(j) 
= J:00 g(t)e-jZrrft dt 
= 
'T sin rr fT -jrrfT 
v 1 
rrfT 
e 
This power spectrum is illustrated in Figure 6.2. 
(6.2.12) 
(6.2.13) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

252 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
0.9 
0.8 
0.7 
0.6 
0.5 
0.4 
0.3 
0.2 
0.1 
0 
-5 
-4 
-3 
-2 
-1 
0 
2 
4 
5 
JT 
Figure 6.2: Power spectrum of the transmitted signal in Illustrative Problem 6.1 (for 
(]" = 1) 
The MATLAB script for this computation is given next. 
---4111:1" ----------------
% MATLAB script for Illustrative Problem 6.1. 
echo on 
T=1; 
delta_f=1 /(1 OO*T); 
f=- 5/T :delta_f:5/f; 
sgma_a=1; 
Sv=sgma_a"2*sinc(f*T). "2; 
% Plotting command follows. 
plot(f,Sv); 
Illustrative Problem 6.2 Suppose the autocorrelation function of the sequence {an} 
is 
11, m = 0 
Ra ( m) 
= , m = 1, -1 
0, 
otherwise 
(6.2.14) 
and g(t) is the rectangular pulse shown in Figure 6.1. Evaluate Sv (j) in this case. 
The power spectrum of the PAM signal V(t) is given by (6.2.8). The power spectrum 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.2. THE POWER SPECTRUM OF A DIGITAL PAM SIGNAL 
1.8 
1.6 
1.4 
1.2 
0.8 
0.6 
0.4 
0.2 
0'--'--'-.i..=...£._,,.__.,__.__.L...-'.i.£...:>...<:,_,_-'-'---' 
-5 
-4 
-3 
-2 
-1 
0 
JT 
2 
3 
4 
5 
253 
Figure 6.3: The power spectrum of the transmitted signal in Illustrative Problem 6.2 
(for crJ = 1) 
of the sequence {an} is, from (6.2.9) and (6.2.14), 
Consequently, 
Sa(f) 
= 1+cos2rrfT 
= 2cos2 rrfT 
The graph of this power spectrum is shown in Figure 6.3. 
(6.2.15) 
(6.2.16) 
The MATLAB script for performing this computation is given below. In this case, 
the overall power spectrum of the transmitted signal V ( t) is significantly narrower than 
the spectrum in Figure 6.2. 
---tl®li" ---------------
% MATLAB script for Illustrative Problem 6.2. 
echo on 
T=1; 
delta_f=1 /(1 OO*T}; 
f=-5/T:delta_f:5/T; 
Sv=2*(cos(pi*f*T}.*sinc(f*T}}. "2; 
% Plotting command follows. 
plot(f,Sv}; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

254 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
6.3 
Characterization of Bandlimited Channels and 
Channel Distortion 
Many communication channels, including telephone channels and some radio chan­
nels, may be generally characterized as bandlimited linear filters. Consequently, such 
channels are described by their frequency response C (j), which may be expressed as 
C(j) = A(j)ei9(fl 
(6.3.1) 
where A(j) is called the amplitude response and 8(j) is called the phase response. 
Another characteristic that is sometimes used in place of the phase response is the 
envelope delay, or group delay, which is defined as 
(f) 
= 
_
_ 
1 d8(j) 
T 
2rr 
dj 
(6.3.2) 
A channel is said to be nondistorting, or ideal, if, within the bandwidth W occupied 
by the transmitted signal, A(j) =constant and e(j) is a linear function of frequency 
(or the envelope delay T(j) =constant). On the other hand, if A(j) and T(j) are not 
constant within the bandwidth occupied by the transmitted signal, the channel distorts 
the signal. If A(j) is not constant, the distortion is called amplitude distortion, and if 
T(j) is not constant, the distortion on the transmitted signal is called delay distortion. 
As a result of the amplitude and delay distortion caused by the nonideal channel 
frequency response characteristic C (j), a succession of pulses transmitted through the 
channel at rates comparable to the bandwidth W are smeared to the point that they are 
no longer distinguishable as well-defined pulses at the receiving terminal. Instead, they 
overlap, so we have intersymbol interference. As an example of the effect of delay dis­
tortion on a transmitted pulse, Figure 6.4(a) illustrates a bandlimited pulse having zeros 
periodically spaced in time at points labeled ±T, ±2T, and so on. When the informa­
tion is conveyed by the pulse amplitude, as in PAM, then one can transmit a sequence 
of pulses, each of which has a peak at the periodic zeros of the other pulses. However, 
transmission of the pulse through a channel modeled as having a linear envelope delay 
characteristic T(j) [quadratic phase 8(j)] results in the received pulse shown in Fig­
ure 6.4(b) having zero crossings that are no longer periodically spaced. Consequently, 
a sequence of successive pulses would be smeared into one another, and the peaks of 
the pulses would no longer be distinguishable. Thus the channel delay distortion re­
sults in intersymbol interference. As will be discussed in this chapter, it is possible to 
compensate for the nonideal frequency response characteristic of the channel by use of 
a filter or equalizer at the demodulator. Figure 6.4(c) illustrates the output of a linear 
equalizer that compensates for the linear distortion in the channel. 
As an example, let us consider the intersymbol interference on a telephone chan­
nel. Figure 6.5 illustrates the measured average amplitude and delay as a function of 
frequency for a telephone channel of the switched telecommunications network. We 
observe that the usable band of the channel extends from about 300 Hz to about 3200 
Hz. The corresponding impulse response of the average channel is shown in Figure 6 .6. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.3. CHARACTERIZATION OF BANDLIMITED CHANNELS 
255 
3T 
4T 
ST 
(a) 
4T 
5T 
(b) 
3T 
4T 
5T 
(c) 
Figure 6.4: 
Effect of channel distortion. 
(a) Channel input, (b) channel output, 
( c) equalizer output 
Its duration is about 10 ms. In comparison, the transmitted symbol rates on such a chan­
nel may be on the order of 2500 pulses or symbols per second. Hence, intersymbol 
interference might extend over 20 to 30 symbols. 
Besides telephone channels, there are other physical channels that exhibit some 
form of time dispersion and thus introduce intersymbol interference. Radio channels, 
such as shortwave ionospheric propagation (high frequency, HF), tropospheric scatter, 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

256 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
Frequency, Hz 
LOO 
.g 0.75 
a 
:a. 0.50 
 0.25 
0 
1000 
2000 
3000 
Frequency, Hz 
Figure 6.5: Average amplitude and delay characteristics of a medium-range telephone 
channel 
0.5 
0.4 
0.3 
0.2 
> 
0.1 
B 
 
0 1-L+-t+--IB--iPJ-V.---:Y-'---::...;:---::;_.,=::..._J_ 
s-
10 
-<e: -0.1 
Time, ms 
-0.2 
-0.3 
-0.4 
-0.5 
Figure 6.6: Impulse response of the average channel with amplitude and delay shown 
in Figure 6.5 
and mobile cellular radio are three examples of time-dispersive wireless channels. In 
these channels, time dispersion-and, hence, intersymbol interference-is the result of 
multiple propagation paths with different path delays. The number of paths and the rel­
ative time delays among the paths vary with time; for this reason, these radio channels 
are usually called time-variant multipath channels. The time-variant multipath condi­
tions give rise to a wide variety of frequency response characteristics. Consequently the 
frequency response characterization that is used for telephone channels is inappropri­
ate for time-variant multipath channels. Instead, these radio channels are characterized 
statistically in terms of the scattering function, which, in brief, is a two-dimensional 
representation of the average received signal power as a function of relative time delay 
and Doppler frequency spread. 
For illustrative purposes, a scattering function measured on a medium-range (150-
mi) tropospheric scatter channel is shown in Figure 6.7. The total time duration (mul­
tipath spread) of the channel response is approximately 0. 7 µs on the average, and the 
spread between half-power points in Doppler frequency is a little less than 1 Hz on 
the strongest path and somewhat larger on the other paths. Typically, if transmission 
occurs at a rate of 107 symbols/second over such a channel, the multipath spread of 
0.7 µs will result in intersymbol interference that spans about seven symbols. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.3. CHARACTERIZATION OF BANDLIMITED CHANNELS 
10 
9 
8 - 
7  
6  
5 & 
4 · 
3  
2 
7_,_89:A 3 
' 
JKL--=:....:;-UV-;'16HI 
-100 
-80 
-60 
-40 
-20 
0 
20 
40 
60 
Frequency, Hz 
s 
80 100 1° 
9 
257 
Figure 6.7: Scattering function of a medium-range tropospheric scatter channel 
---tll4-il;fu1Wi;t•1=1•§1• 
Illustrative Problem 6.3 As indicated above, a bandlimited communication channel 
can be modeled as a linear filter whose frequency response characteristics match the 
frequency response characteristics of the channel. 
MATLAB may be used to de­
sign digital finite impulse response (FIR) or infinite impulse response (IIR) filters that 
approximate the frequency response characteristics of analog communication chan­
nels. Suppose that we wish to model an ideal channel having an amplitude response 
A(j) 
= 1 for If I ::: 2000 Hz and A(f) 
= 0 for Iii > 2000 Hz and constant delay 
(linear phase) for all f. The sampling rate for the digital filter is selected as F5=10 ,000 
Hz. Because the desired phase response is linear, only an FIR filter could satisfy this 
condition. However, it is not possible to achieve a zero response in the stopband. In­
stead, we select the stopband response to be -40 dB and the stopband frequency to be 
2500 Hz. In addition, we allow for a small amount, 0.5 dB, of ripple in the passband. 
The impulse response and the frequency response of a length N 
= 41 FIR filter that 
meets these specifications is illustrated in Figure 6.8. Because N is odd, the delay 
through the filter is (N + 1) /2 taps, which corresponds to a time delay of (N + 1) /20 
ms at the sampling rate of F5 
= 10 KHz. In this example, the FIR filter was designed 
in MATLAB using the Chebyshev approximation method (Remez algorithm). 
----41111;11 -- !"#$%&' 
% MATLAB script for Illustrative Problem 6.3. 
echo on 
Lcutoff=2000; 
Lstopband=2500; 
% the desired cutoff frequency 
% the actual stopband frequency 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

258 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
fs=10000; 
fl =2* Lcutoff/fs; 
t'2=2*Lstopband/fs; 
N=41; 
F=[O fl tL 1 ); 
M=[1 1 0 OJ; 
B=remez(N-1,F,M); 
% Plotting command follows. 
figure(1 ); 
[H,W]=freqz(B); 
H_in_dB=20*loglO(abs(H)); 
plot(W /(2*pi),H_in_dB); 
figure(2); 
plot(W /(2*pi),(180/pi)*unwrap(angle(H))); 
% Plot of the impulse response follows. 
figure(3); 
plot(zeros(size([O:N-1 ]))); 
hold; 
stem([O:N-1),B); 
JO 
-10 
-20 
-30 
-40 
-50 
-60 
-70 
% the sampling frequency 
% the normalized passband frequency 
% the normalized stopband frequency 
% This number is found by experiment. 
% describes the lowpass filter 
% returns the FIR tap coefficients 
15 
20 
25 
30 
35 
40 
(a) 
n 
0 
-200 
-400 
-600 
-800 
-1000 
-1200 
-1400 
-1600 
-1800 
-80 
-2000 ------ 
0 
0.05 
0.1 
0.15 
0.2 
0.25 
0.3 
0.35 
0.4 
0.45 
0.5 
0 
0.05 
0.1 
0.15 
0.2 
0.25 
0.3 
0.35 
0.4 
0.45 
0.5 
(b) 
f 
(c) 
f 
Figure 6.8: (a) Impulse response, (b), (c) frequency response of linear phase FIR filter 
in Illustrative Problem 6.3 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.3. CHARACTERIZATION OF BANDLIMITED CHANNELS 
259 
Illustrative Problem 6.4 An alternative method for designing an FIR filter that ap­
proximates the desired channel characteristics is based on the window method. To 
be specific, if the desired channel response is C(j) for If I ::; W and C(j) 
= 0 for 
If I > W, the impulse response of the channel is 
h(t) = f w C(j)ejZrrft df 
For example, ifthe channel is ideal, then C(j) = 1, IJI ::; W, and hence 
h(t) 
= sin2rrWt 
rrt 
(6.3.3) 
(6.3.4) 
An equivalent digital filter may be implemented by sampling h(t) at t = nTs, where 
Ts is the sampling interval and n = 0, ±1, ±2, . . . . Let us now design an FIR filter with 
W = 2000 Hz and F5 
= l/T5 
= 10 KHz. 
The sampled version of h ( t) -that is, hn = h ( n Ts) is illustrated in Figure 6 .9. Be­
cause {hn} has infinite length, we may truncate it at some length N. This trunca­
tion is equivalent to multiplying {hn} by a rectangular window sequence Wn 
= 1 
4000 
3500 
3000 
2500 
2000 
1500 
1000 
500 
0 
-500 
-1000 
-50 
-40 
-30 
-20 
-10 
0 
n 
10 
20 
30 
Figure 6.9: Samples of h(n) in Illustrative Problem 6.4 
40 
50 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

260 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
4000 
3500 
3000 
2500 
-20 
2000 
1500 
-40 
1000 
500 
-60 
0 
-80 
-500 
-1000 
-100 ---- 
-30 
-20 
-10 
0 
n 
10 
20 
30 
0 
0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 °J 
Figure 6.10: Frequency response of the filter truncated with a rectangular window in 
Illustrative Problem 6.4 
4000 
20 -------- 
3500 
01----
3000 
-20 
2500 
-40 
2000 
-60 
1500 
-80 
1000 
500 
-100 
0 
-120 
-500 
-140 
-1000 
-160 ----	-
 
-30 
-20 
-10 
0 
10 
20 
30 
0 
0.05 
0.1 0.15 
0.2 0.25 
0.3 0.35 
0.4 0.45 0.5 
n 
f 
Figure 6.11: Frequency response of filter truncated with a Hanning window in Illustra­
tive Problem 6.4 
for lnl 
:::; (N 
- 1)/2 and Wn 
= 0 for lnl  (N + 1)/2. 
The impulse response 
{ h = Wnhn} and the corresponding frequency response of the FIR (truncated) filter 
are illustrated in Figure 6.10 for N 
= 51. Note that the truncated filter has large side­
lobes in the stopband. Hence, this FIR filter is a poor approximation to the desired 
channel characteristics. The size of the sidelobes can be significantly reduced by em­
ploying a smoother window function, such as a Hanning or a Hamming window, to 
truncate the ideal channel response. Figure 6.11 illustrates the impulse response and 
frequency response of { h = Wnhn} when the window function is a Hanning window 
of lengthN = 51. 
MATLAB provides routines to implement several different types of window 
functions. The MATLAB script for this problem implementing two types of window 
functions is given next. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.3. CHARACTERIZATION OF BANDLIMITED CHANNELS 
261 
Input signal ---+-1 Delay'td 
WGN 
LPF 
LPF 
WGN 
'---+---' 
'-----. Output signal 
Figure 6.12: Two-path radio channel model 
---tl®'i" 11--------------
% MATLAB script for Illustrative Problem 6.4. 
echo on 
Length=101 ; 
Fs=10000; 
W=2000; 
Ts=1/Fs; 
n=-(Length-1 )/2:(Length-1 )/2; 
t=Ts*n; 
h=2*W*sinc(2*W*t); 
% The rectangular windowed version follows. 
N=61; 
rec_ windowe<Lh=h((Length-N)/2+ 1 :(Length+N)/2); 
% Frequency response of rec_windowed_h follows. 
[rec_ windowed_H,Wl]=freqz(rec_ windowed_h, 1 ); 
% to normalize the magnitude 
rec_ windowed_H_in_dB=20*1og lO(abs(rec_ windowed_H)/abs(rec_ windowed_H(1))); 
% The Hanning windowed version follows. 
hanning_ window=hanning(N); 
hanning_ windowed_h=h( (Length-N)/2+ 1 :(Length+N)/2). *hanning_ window. ' ; 
[hanning_ windowed_H, W2]=freqz(hanning_ windowed_h, 1); 
hanning_ windowed_H_in_dB=20*loglO(abs(hanning_ windowed_H)/abs(hanning_ windowed_H(1 ))) ; 
% Plotting commands follow. 
$ll!U.ii;tfii%+4§1i;t•]:'9§11·•---------
Illustrative Problem 6.5 A two-path (multipath) radio channel can be modeled in the 
time domain, as illustrated in Figure 6.12. Its impulse response may be expressed as 
(6.3.5) 
where bi (t) and h (t) are random processes that represent the time-varying propaga­
tion behavior of the channel and T d is the delay between the two multipath components. 
The problem is to simulate such a channel on the computer. 
We model bi ( t) and bz ( t) as Gaussian random processes generated by passing white 
Gaussian noise processes through lowpass filters. In discrete time, we may use relatively 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

262 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
0 
-0.05 
-0.1 
-0.15 
-0.2 '---'--'--'--'---'--'--'---'--'-- 
0 
100 
200 
300 
400 
500 
n 
600 
700 
800 
900 
1000 
Figure 6.13: Outputs bin and bzn of a lowpass filter and the resulting Cn for p = 0.99 
simple digital IIR filters excited by white Gaussian noise (WGN) sequences. For ex­
ample, a simple lowpass digital filter having two identical poles is described by the 
z-transform 
(1
- p)Z 
H(z) = (1 - pz-I )2 
or the corresponding difference equation 
(1 - p)2 
(6.3.6) 
1 - 2pz-1 + pZz-2 
(6.3.7) 
where { Wn} is the input WGN sequence, { bn} is the output sequence, and 0 < p < 1 
is the pole position. The position of the pole controls the bandwidth of the filter and, 
hence, the rate of variation of { bn} . When p is close to unity (close to the unit circle), 
the filter bandwidth is narrow, whereas when pis close to zero, the bandwidth is wide. 
Hence, when p is close to the unit circle in the z-plane, the filter output sequence 
changes more slowly compared to the case when the pole is close to the origin. 
Figure 6.13 illustrates the output sequences {bin} and {bzn} generated by pass­
ing statistically independent WGN sequences through a filter having p = 0.99. The 
discrete -time channel impulse response 
Cn = b1,n + bz,n-d 
(6.3.8) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.3. CHARACTERIZATION OF BANDLIMITED CHANNELS 
0.6 
0.4 
0.2 
0 
-0.2 
-0.4 
-0.6 
-0.8 
0 
100 
200 
300 
400 
500 
n 
600 
700 
800 
263 
900 
1000 
Figure 6.14: Outputs bin, b2n, and Cn with pole at p 
= 0.9 (from top to bottom at 
n 
= 1000, bin, Cn, and b2n) 
is also shown, with d 
= 
5 samples of delay. Figure 6.14 illustrates the sequences 
{b1,n}, {b2,n}, and {en} when p 
= 0.9. 
Illustrative Problem 6.6 [Estimation of the Autocorrelation and Power Spectrum 
of Coefficients in the Two-Path Radio Channel] 
For p 
= 0.99 in Illustrative Problem 6.5, compute and plot the estimates of the 
autocorrelation function of the sequence { b1}, { b2}, and { Cn} and their power spectra. 
Compare the power spectra with the magnitude-squared of the filter frequency response 
H(j)-that is, IH(j) 12, where H(j) is obtained from (6.3.6) by evaluating H(z) on 
the unit circle. 
Figure 6.15(a) illustrates the autocorrelation function of the three sequences and Fig­
ure 6.15(b) illustrates their power spectra. We observe that the autocorrelation func­
tions are very similar and the corresponding power spectra are also similar. We also 
note that the power spectra are a close approximation to the theoretically true power 
spectrum IH(j) 12 when the input to the filter is white noise. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

264 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
x 10-4 
x 10-5 
12 
10 
11 
1-Rx(b,ll 
8 
1-sx(b,)I 
10 
6 
9 
4 
8 
2 
7 
0 
20 
40 
60 
80 
100 
-100 
-50 
0 
50 
100 
Time (sec) 
Frequency (Hz) 
x 10-3 
x 10-4 
3.9 
3.5 
3.8 
l-Rx(b2) I 
3 
l-sx(b2) I 
2.5 
3.7 
2 
3.6 
1.5 
1 
3.5 
0.5 
0 
20 
40 
60 
80 
100 
-100 
-50 
0 
50 
100 
Time (sec) 
Frequency (Hz) 
x 10-3 
x 10-4 
2 
2.5 
1-Rx(c)I 
1-sx(c)I 
1.5 
2 
0.5 
1.5 
0 
20 
40 
60 
80 
100 
-100 
-50 
0 
50 
100 
Time (sec) 
Frequency (Hz) 
1 
0.9 
l-IH(f)l21-
0.8 
0.7 
-
0.6 
0.5 
-
0.4 
0.3 
0.2 
0.1 
I 
I 
I 
I 
I 
I 
I 
I 
I 
-100 -80 -60 
-40 
-20 
0 
20 
40 
60 
80 
100 
Frequency (Hz) 
Figure 6.15: Autocorrelation functions and the spectra in Illustrative Problem 6.6 
The MATLAB script for the problem is given next. 
---tl&li" ----------------
% MATLAB script for Illustrative Problem 6.6 
N=1000; 
% Length of sequence 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.3. CHARACTERIZATION OF BANDLIMITED CHANNELS 
M=100; 
% Autocorrelation fanction length 
Fs=N; 
% Sampling frequency 
NFFT = 2"nextpow2(N); 
% Next power of 2 from length of y 
f=Fs/2*linspace(-0.5,0.5,NFFT/2+ 1 ); 
F=1/2*linspace(-0.5,0.5,NFFT/2+1 ); 
p=0.99; 
d=5; 
% Time delay between the two paths 
% Preallocation for speed: 
bl=zeros(1,N); b2=zeros(1,N); c=zeros(1,N); 
% Input WGN sequence 
w=randn(2,N); 
% Output sequences: 
b1(1 )=(1-p) "2*w(1, 1 ); 
b1(2)=2*p*b1(1 )+(1-p)"2*w(1,2); 
b2(1)=(1-p)"2*w(2,1 ); 
b2(2)=2*p*b2(1 )+(1-p) "2*w(2,2); 
u=1:M+1; 
for n=3:N 
end 
bl(n)=2*p*bl(n-1 )-p"2*bl(n-2)+(1-p)"2*w(1,n); 
b2(n)=2*p*b2(n-1)-p"2*b2(n-2)+(1 -p) "2*w(2,n); 
% Channel impulse response: 
for n=1 :5 
c(n)=bl(n); 
end 
for n=6:N 
c(n)=b 1 (n)+b2(n-d); 
end 
% Autocorrelation calculations: 
Rx_bl=Rx_est(bl,M); 
Rx_b2=Rx_est(b2,M); 
Rx_c =Rx_est(c,M); 
% Power spectra calculations: 
Sx_b l=fftshift(abs(fft(Rx_ bl ,NFFT)/N)); 
Sx_b2=fftshift(abs(fft(Rx_ b2,NFFT)/N)); 
Sx_c =fftshift(abs(fft(Rx_c,NFFf)/N)); 
% Calculation of H(f): 
z=exp(1 i*2*pi*F); 
nurn=(1-p)"2; 
denurn=(1-p*z." -1 ). "2; 
H=nurn./denurn; 
% Plot the results: 
subplot(3,2, 1) 
plot(Rx_bl) 
axis([O M rnin(Rx_bl) rnax(Rx_bl)]) 
xlabel(' Time (sec) ') 
legend( ' R 
_ x ( b 
_ 1 ) ' ) 
subplot(3,2,2) 
plot(f,Sx_bl(NFFT/4:3*NFFf/4)) 
xlabel(' Frequency (Hz) ') 
axis([-100 100 rnin(Sx_bl) rnax(Sx_bl)]) 
legend( ' S _ x ( b 
_ 1 ) ' ) 
subplot(3,2,3) 
plot(Rx_b2) 
axis([O M rnin(Rx_b2) rnax(Rx_b2)]) 
265 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

266 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
xlabel(' Time (sec) ') 
legend('R_x(b_2) ') 
subplot(3,2,4) 
plot(f,Sx_b2((NFFf/4:3*NFFf/4))) 
xlabel(' Frequency (Hz) ') 
axis([-100 100 min(Sx_b2) max(Sx_b2)]) 
legend(' s_x ( b_2) ') 
subplot(3,2,5) 
plot(Rx_c) 
axis([O M min(Rx_c) max(Rx_c)]) 
xlabel(' Time (sec) ') 
legend( 'R_x ( c) ') 
subplot(3,2,6) 
plot(f,Sx_c((NFFf/4:3*NFFf/4))) 
axis([-100 100 min(Sx_c) max(Sx_c)]) 
xlabel(' Frequency (Hz) ') 
legend( ' S _ x ( c ) ' ) 
figure 
plot(f,abs(H). "2) 
axis([-100 100 min(abs(H)."2) max(abs(H)."2)]) 
xlabel(' Frequency (Hz) ') 
legend( ' I H ( f ) I "2 ' ) 
6.4 
Characterization of Intersymbol Interference 
In a digital communication system, channel distortion causes intersymbol interference 
(ISi). In this section, we present a model that characterizes ISi. For simplicity, we 
assume that the transmitted signal is a baseband PAM signal. However, this treatment 
is easily extended to carrier (linearly) modulated signals discussed in the next chapter. 
The transmitted PAM signal is expressed as 
00 
s(t) = L ang(t - nT) 
(6.4.1) 
n=O 
where g ( t) is the basic pulse shape that is selected to control the spectral characteristics 
of the transmitted signal, {an} is the sequence of transmitted information symbols 
selected from a signal constellation consisting of M points, and Tis the signal interval 
( 1 / T is the symbol rate). 
The signal s(t) is transmitted over a baseband channel, which may be characterized 
by a frequency response C(j). Consequently, the received signal can be represented 
as 
00 
r(t) = L anh(t - nT) + w(t) 
(6.4.2) 
n=O 
where h(t) 
= g(t) * c(t), c(t) is the impulse response of the channel, * denotes 
convolution, and w ( t) represents the additive noise in the channel. To characterize ISi, 
suppose that the received signal is passed through a receiving filter and then sampled at 
the rate 1 / T samples/seconds. In general, the optimum filter at the receiver is matched 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.4. CHARACTERIZATION OF INTERSYMBOL INTERFERENCE 
267 
to the received signal pulse h(t). Hence, the frequency response of this filter is H* (j). 
We denote its output as 
00 
y(t) = L anx(t - nT) + v(t) 
(6.4.3) 
n=O 
where x(t) is the signal pulse response of the receiving filter-that is,X(j) = IH(f) 12, 
and v ( t) is the response of the receiving filter to the noise w ( t). Now, if y ( t) is 
sampled at times t = kT, k = 0, 1, 2, . . .  , we have 
00 
y(kT) = L anx(kT - nT) + v(kT) 
n=O 
00 
Yk = L anXk-n + Vk, 
n=O 
The sample values {yk} can be expressed as 
k = 0, 1, ... 
k = 0, 1, ... 
(6.4.4) 
(6.4.5) 
The term Xo is an arbitrary scale factor, which we set equal to unity for convenience. 
Then 
00 
Yk = ak + L anXk-n + Vk 
n=O 
n# 
(6.4.6) 
The term ak represents the desired information symbol at the kth sampling instant, the 
term 
00 
L anXk-n 
n=O 
n# 
represents the ISi, and Vk is the additive noise at the kth sampling instant. 
(6.4.7) 
The amount of ISi and noise in a digital communications system can be viewed on 
an oscilloscope. For PAM signals, we can display the received signal y(t) on the ver­
tical input with the horizontal sweep rate set at 1 / T. The resulting oscilloscope display 
is called an eye pattern because of its resemblance to the human eye. For example, 
Figure 6.16 illustrates the eye patterns for binary and four-level PAM modulation. The 
effect of ISi is to cause the eye to close, thereby reducing the margin for additive noise 
to cause errors. Figure 6.17 graphically illustrates the effect of ISi in reducing the 
opening of a binary eye. Note that ISi distorts the position of the zero crossings and 
causes a reduction in the eye opening. Thus, it causes the system to be more sensitive 
to a synchronization error. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

268 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
Binary 
-
.
.
 ·-
. , 
-I 
Quaternary 
Figure 6 .16: Examples of eye patterns for binary and quaternary amplitude shift keying 
(or PAM) 
Peak distortion 
Optimum sampling 
time 
Sensitivity to 
timing error 
Distortion of 
zero crossings 
Figure 6 .17: Effect of ISi on eye opening 
--li!!IJO.ii;MIW§lij;r•]:J!@¢·1----------
Illustrative Problem 6.7 In this problem we consider the effect of intersymbol inter­
ference (ISi) on the received signal sequence {Yk} for two channels that result in the 
sequences {Xk} as follows: 
Channel 1 
1, 
n=O 
-0.25, 
n = ±1 
Xn = 
0.1, 
n = ±2 
0, 
otherwise 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.5. SYSTEM DESIGN FOR BANDLIMITED CHANNELS 
0.1 
-1 
• 
' 
I 
-3 
-2 
-0.25 
0.5 
-2 
I 
• 
I 
-3 
-1 
-0.2 
r 
-1 
0 
I 
-0.25 
(a) 
r 
0.5 
I 
0 
(b) 
0.1 
' 
2 
2 
I 
-0.2 
• 
	 
n 
3 
• 
• 
n 
3 
Figure 6.18: FIR channel models with ISi. (a) Channell. (b) Channel 2 
Channel 2 
Xn = 
1, 
n = 0 
0.5, 
n = ±1 
-0.2, 
n = ±2 
0, 
otherwise 
269 
Note that in these channels, the ISi is limited to two symbols on either side of the 
desired transmitted signal. Hence, the cascade of the transmitter and receiver filters 
and the channel at the sampling instants are represented by the equivalent discrete­
time FIR channel filter shown in Figure 6.18. Now suppose that the transmitted signal 
sequence is binary-that is, {an= ±1}. Then, for Channel l, the received signal 
sequence {Yn} in the absence of noise is shown in Figure 6.19(a), and with additive 
white Gaussian noise having a variance of cr2 = 0.1, the received signal sequence is 
shown in Figure 6.19(b). We note that in the absence of noise, the ISi alone does not 
cause errors at the detector that compares the received signal sequence {Yn} with the 
threshold set to zero. Hence, the eye diagram is open in the absence of noise. However, 
when the additive noise is sufficiently large, errors will occur. 
In the case of Channel 2, the noise-free and noisy ( cr2 = 0.1) sequence {Yn} is as 
illustrated in Figure 6.20. Now, we observe that the ISi can cause errors at the detector 
that compares the received sequence {Yn} with the threshold set at zero, even in the 
absence of noise. Thus, for this channel characteristic, the eye is completely closed. 
6.5 
Communication System Design for 
Bandlimited Channels 
In this section we consider the design of the transmitter and receiver filters that are 
suitable for a baseband bandlimited channel. Two cases are considered. In the first 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

270 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
0.9 
0.8 
0.7 
0.6 
0.5 
0.4 
0.3 
0.2 
0.1 
o 
1 is transmitted 
x 
-1 is transmitted 
O'-*-i--"*---'>i-*--'lE-*--'-A-A-A--f'l-A--<'l--' 
-2 
-1.5 
-1 
-0.5 
0.9 
0.8 
0.7 
0.6 
0.5 
0.4 
0.3 
0.2 
0.1 
0 
-2 
-1 
0 
(a) 
(b) 
0.5 
1.5 
o 
1 is transmitted 
x 
-1 is transmitted 
2 
1.5 
2 
Figure 6.19: Output of channel model 1 without and with AWGN. (a) No noise. 
(b) Additive Gaussian noise with a-2 
= 0.1 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.5. SYSTEM DESIGN FOR BANDLIMITED CHANNELS 
0.9 
0.8 
0.7 
0.6 
0.5 
0.4 
0.3 
0.2 
0.1 
0 
-2.5 
-2 
-1.5 
-1 
0.9 
0.8 
0.7 
0.6 
0.5 
0.4 
0.3 
0.2 
0.1 
0 
-3 
-2 
--0.5 
-1 
0 
(a) 
0 
(b) 
o 
1 is transmitted 
x 
-1 is transmitted 
0.5 
1.5 
2 
0 
1 is transmitted 
x 
-1 is transmitted 
2 
271 
2.5 
3 
Figure 6.20: Output of channel model 2 without and with AWGN. (a) No noise. 
(b) Additive Gaussian noise with variance a-2 
= 0.1 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

272 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
case, the design is based on transmitter and receiver filters that result in zero ISi. In the 
second case, the design is based on transmitter and receiver filters that have a specified 
(predetermined) amount of ISi. Thus, the second design approach leads to a controlled 
amount of ISi. The corresponding transmitted signals are called partial response sig­
nals. In both cases we assume that the channel is ideal; that is, A(j) and T(j) are 
constant within the channel bandwidth W. For simplicity, we assume that A(j) = 1 
and T(j) = 0. 
6.5.1 
Signal Design for Zero ISi 
The design of bandlimited signals with zero ISi was a problem considered by Nyquist 
about 70 years ago. He demonstrated that a necessary and sufficient condition for 
a signal x ( t) to have zero ISi - that is, 
x(nT) = 
is that its Fourier transform X (j) satisfy 
where 1/T is the symbol rate. 
{ 1, 
0, 
n=O 
n =1= 0 
(6.5.1) 
(6.5.2) 
In general, there are many signals that can be designed to have this property. One 
of the most commonly used signals in practice has a raised-cosine frequency response 
characteristic, which is defined as 
{T, 
Xrc(j) = f [ 1 +COS rr; ( lfl - 1
2-;) J, 
0, 
o::; If I ::; c1
2-;l 
l-C< 
< Iii < l+C< 
2T 
-
2T 
If I > 1
2
+
T
C< 
(6.5.3) 
where oc is called the rolloff factor, which takes values in the range 0 ::; oc ::; 1, and 
1 IT is the symbol rate. The frequency response Xrc (j) is illustrated in Figure 6.2l(a) 
for oc = 0, oc = , and oc = 1. Note that when oc = 0, Xrdf) reduces to an ideal 
"brick wall," physically nonrealizable frequency response with bandwidth occupancy 
1I2 T. The frequency 1I2 T is called the Nyquist frequency. For oc > 0, the bandwidth 
occupied by the desired signal Xrc(f) beyond the Nyquist frequency l/2T is called 
the excess bandwidth, usually expressed as a percentage of the Nyquist frequency. For 
example, when oc = i, the excess bandwidth is 50%, and when oc = 1, the excess 
bandwidth is 100%. The signal pulse Xrc(t) having the raised-cosine spectrum is 
(t) 
_ sin rrt/T cos(rroct/T) 
Xrc 
-
rrt/T 
1- 4oc2t2/T2 
(6.5.4) 
Figure 6.2l(b) illustrates Xrc(t) for oc = 0, i. 1. Because Xrdf) satisfies (6.5.2), we 
note that Xrc(t) = 1 at t = 0 and Xrc (t) = 0 at t = kT, k = ± 1, ±2, ... . Consequently, 
at the sampling instants t = kT, k =f- 0, there is no ISi from adjacent symbols when 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.5. SYSTEM DESIGN FOR BANDLIMITED CHANNELS 
273 
Xrc(j) 
T 
1 
1 
0 
I 
_!_ 
f 
T 
ZT 
ZT 
T 
(a) 
x,c(t) 
(b) 
Figure 6 .21: Raised-cosine frequency response and corresponding pulse shape. (a) 
Raised-cosine frequency response. (b) Pulse shapes for raised-cosine frequency re­
sponse 
there is no channel distortion. However, in the presence of channel distortion, the ISi 
given by (6.4.7) is no longer zero, and a channel equalizer is needed to minimize its 
effect on system performance. Channel equalizers are considered in Section 6.6. 
In an ideal channel, the transmitter and receiver filters are jointly designed for zero 
ISi at the desired sampling instants t 
= nT. Thus, if GT(j) is the frequency response 
of the transmitter filter and GR (j) is the frequency response of the receiver filter, then 
the product (cascade of the two filters) GT(j)GR (j) is designed to yield zero ISi. For 
example, if the product GT(j)GR (j) is selected as 
(6.5.5) 
where Xrc<f) is the raised-cosine frequency response characteristic, then the ISi at the 
sampling times t 
= nT is zero. 
---tl!!ii;Mil+4filj;t•]:'9#@·1---------
mustrative Problem 6.8 We wish to design a digital implementation of the transmit­
ter and receiver filters GT (j) and GR (j) such that their product satisfies (6.5 .5) and 
GR (j) is the matched filter to GT(j). 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

274 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
The simplest way to design and implement the transmitter and receiver filters in digital 
form is to employ FIR filters with linear phase (symmetric impulse response). The 
desired magnitude response is 
(6.5.6) 
where Xrc<f) is given by (6.5.3). The frequency response is related to the impulse 
response of the digital filter by the equation 
(N-1)/2 
Gy(j) = 
L 
gy(n)e-j2rrfnTs 
n=-(N-1)/2 
(6.5.7) 
where Ts is the sampling interval and N is the length of the filter. Note that N is odd. 
Because Gy(j) is bandlimited, we may select the sampling frequency Fs to be at least 
2 / T. Our choice is 
1 
4 
Fs = 
-
= 
-
Ts T 
or, equivalently, Ts = T/4. Hence the folding frequency is Fs/2 = 2/T. Because 
Gy(j) = Xrdf), we may sample Xrc<f) at equally spaced points in frequency, with 
frequency separation 6.j = Fs / N. Thus we have 
(N-1)/2 
Xrc(m6.j) = Xrc(mFs/N) = 
L 
gy(n)e-j2rrmn/N 
n=-(N-1)/2 
The inverse transform relation is 
(6.5.8) 
(N-1)/2 
gy(n) = 
I 
m=-(N-1)/2 X (4m) ej2rrmn/N 
re NT 
' 
N-1 
n = 0, ±1, ... , ± -
2-
(6.5.9) 
Since gy ( n) is symmetric, the impulse response of the desired linear phase transmitter 
filter is obtained by delaying gy(n) by (N -1) /2 samples. The MATLAB scripts for 
this computation are given below. 
----4111®1@1! 	..,_ 
% MATLAB script for Illustrative Problem 6.8. 
echo on 
N=31; 
T=1; 
alpha=1/4; 
n=-(N-1}/2:(N-1}/2; 
% the indices for g_T 
% The expression for g_T is obtained next. 
for i=1 :length(n), 
g_T(i}=O; 
for m=-(N-1)/2:(N-1)/2, 
g_ T(i)=g_ T(i)+sqrt(xrc( 4 *m/(N*T},alpha, T} )*exp(j*2*pi*m*n(i)/N); 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.5. SYSTEM DESIGN FOR BANDLIMITED CHANNELS 
echo off ; 
end; 
end; 
echo on; 
g_ T=real(g_ T) ; % The imaginary part is due to the finite machine precision 
% Derive g_T(n-(N-1)12). 
n2=0:N-1; 
% Get the frequency response characteristics. 
[G_ T,W]=freqz(g_ T, 1 ); 
% normalized magnitude response 
magG_ T _in_dB=20*loglO(abs(G_ T)/max(abs(G_T))); 
% impulse response of the cascade of the transmitter and the receiver filters 
g_R=g_T; 
imp_resp_oLcascade=conv(g_R,g_ T); 
% Plotting commands follow. 
function [y] = xrc(f,alpha,T); 
% [y]=xrc(j,alpha,T) 
% 
Evaluates the expression Xrc(j). The parameters alpha and T 
% 
must also be given as inputs to the function. 
if (abs(f) > ((1 +alpha)/(2*T))), 
y=O; 
elseif (abs(f) > ((1-alpha)/(2*T))), 
y=(T/2)*(1 +cos( (pi*T/alpha)*(abs(f)-(1 -alpha)/(2*T)))); 
else 
y=T; 
end; 
275 
Figure 6.22(a) illustrates gy(n - NI ) , n = 0, 1, ... ,N - 1 for oc =  and N = 
31. The corresponding frequency response characteristics are shown in Figure 6 .22(b). 
Note that the frequency response is no longer zero for I JI  ( 1 + oc) IT, because the 
digital filter has finite duration. However, the sidelobes in the spectrum are relatively 
small. Further reduction in the sidelobes may be achieved by increasing N. 
Finally, in Figure 6.23, we show the impulse response of the cascade of the trans­
mitter and receiver FIR filters. This may be compared with the ideal impulse response 
obtained by sampling Xrc(t) at a rate F5 
= 4/T. 
6.5.2 
Signal Design for Controlled ISi 
As we have observed from our discussion of signal design for zero ISi, a transmit 
filter with excess bandwidth may be employed to realize practical transmitting and 
receiving filters for bandlimited channels. On the other hand, suppose we choose to 
relax the condition of zero ISi and thus achieve a symbol transmission in a bandwidth 
W 
= l/2T-that is, with no excess bandwidth. By allowing for a controlled amount 
ofISI, we can achieve the rate of 2W symbols/second. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

276 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
0 
8 
-10 
-20 
6 
-30 
4 
-40 
2 
-50 
-60 
-2 
-7o !"# 
0 
5 
10 
15 
n 
(a) 
20 
25 
30 
0 
0.05 
0.1 
0.15 
0.2 
0.25 
0.3 
0.35 
0.4 
0.45 
0.5 
f 
(b) 
Figure 6.22: Impulse response and frequency response of truncated discrete-time FIR 
filter at transmitter 
200 
150 
100 
50 
-50
 
0 
10 
20 
30 
n 
40 
50 
60 
Figure 6.23: Impulse response of the cascade of the transmitter filter with the matched 
filter at the receiver 
We have already seen that the condition of zero ISI is x ( n T) 
= 0 for n !-
0. 
However, suppose that we design the bandlimited signal to have controlled ISI at one 
time instant. This means that we allow one additional nonzero value in the samples 
{x( nT)}. The ISI that we introduce is deterministic, or "controlled"; hence, it can be 
taken into account at the receiver, as discussed below. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.5. SYSTEM DESIGN FOR BANDLIMITED CHANNELS 
In general, a signal x ( t) that is bandlimited to W hertz- that is, 
X(j) = 0, 
Iii >W 
can be represented as 
x(t) = f x ( __!_) sin2rrW(t - n/2W) 
n=-oo 
2W 
2rrW(t - n/2W) 
277 
(6.5.10) 
(6.5.11) 
This representation follows from the sampling theorem for bandlimited signals. The 
spectrum of the bandlimited signal is 
X(j) = f 00 x(t)e-j2rrft dt 
{_l f x ( __!_) e-jnrrffW, 
= 
2W n=-oo 
2W 
0, 
Iii ::; w 
Iii >W 
(6.5.12) 
One special case that leads to physically realizable transmitting and receiving filters 
is specified by the samples 
x (
27v) = x(nT) = {1• 
0, 
The corresponding signal spectrum is 
{_l [l 
+ e-jrrftW] 
X(i) = 
2W 
' 
0, 
n = 0,1 
otherwise 
Iii <W 
otherwise 
{ _!_e-jrrf/2W cos ( rri) 
= 
W 
2W' 
0, 
Iii <W 
otherwise 
Therefore, x(t) is given by 
x(t) = sinc(2Wt) + sinc(2Wt -1) 
(6.5.13) 
(6.5.14) 
(6.5.15) 
where sinc(t) = sin rrt /rrt. This pulse is called a duobinary signal pulse. It is illus­
trated along with its magnitude spectrum in Figure 6.24. We note that the spectrum 
decays to zero smoothly, which means that physically realizable filters can be designed 
that approximate this spectrum very closely. Thus, a symbol rate of 2W is achieved. 
Another special case that leads to physically realizable transmitting and receiving 
filters is specified by the samples 
11, 
x (
27v) = x(nT) = -1, 
0, 
n=l 
n = -1 
otherwise 
(6.5.16) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

278 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
x(t) 
I 
w 
"#$_.__'(/ 
-W 
0 
W 
Figure 6.24: Duobinary signal pulse and its spectrum 
x(t) 
)*+,-+-./0-/ 
-W 
0 
W 
Figure 6.25: Modified duobinary signal pulse and its spectrum 
The corresponding pulse x ( t) is given as 
x(t) = sinc(2Wt + 1) - sinc(2Wt - 1) 
and its spectrum is 
{_l_(ejrrf/W _ e-jrrffW) 
= j_ sin rrf 
X(j) 
= 
2W 
W 
W' 
0, 
lfl:o:;W 
Iii >W 
(6.5.17) 
(6.5.18) 
This pulse and its magnitude spectrum are illustrated in Figure 6.25. It is called a mod­
ified duobinary signal pulse. It is interesting to note that the spectrum of this signal has 
a zero at f = 0, making it suitable for transmission over a channel that does not pass 
de. 
We can obtain other interesting and physically realizable filter characteristics by 
selecting different values for the samples {x(n/2W)} and more than two nonzero 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.5. SYSTEM DESIGN FOR BANDLIMITED CHANNELS 
279 
samples. However, as we select more nonzero samples, the problem of unraveling the 
controlled ISi becomes more cumbersome and impractical. 
The signals obtained when controlled ISi is purposely introduced by selecting two 
or more nonzero samples from the set {x ( n I 2 W)} are called partial response signals. 
The resulting signal pulses allow us to transmit information symbols at the Nyquist rate 
of 2W symbols per second. Thus, greater bandwidth efficiency is obtained compared 
to raised-cosine signal pulses. 
Illustrative Problem 6.9 We wish to design a digital implementation of the transmit­
ter and receiver filters GT (j) and GR (j) such that their product is equal to the spectrum 
of a duobinary pulse and GR (j) is the matched filter to GT (j). 
To satisfy the frequency domain specification, we have 
and, hence, 
lil:o:;W 
Iii >W 
Iii :.:;W 
Iii >W 
(6.5.19) 
(6.5.20) 
Now, we follow the same approach as in Illustrative Problem 6.8 to obtain the impulse 
responses for an FIR implementation of the transmitter and receiver filters. Hence, with 
W = A and Fs = j, we have 
(N-1)/2 
gy(n) = 
L 
I Gy (1;) I ei2rrmn/N
, 
m=-(N-1)/2 
N-1 
n= 0,±1,±2, ... ,±-2-
(6.5.21) 
and gR (n) = gy(n). The MATLAB script for this computation is given below. 
% MATLAB script for Illustrative Problem 6.9. 
echo on 
N=31; 
T=1; 
W=1/(2*T); 
n=-(N-1)/2:(N-1)/2; 
% the indices for g_T 
% The expression for g_T is obtained next. 
for i=1 :length(n), 
g_T(i)=O; 
for m=-(N-1)/2:(N-1)/2, 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

280 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
if ( abs((4*m)/(N*T)) <= W ), 
g_ T(i)=g_ T(i)+sqrt( (1 /W)*cos( (2*pi*m)/(N*T*W)) )*exp(j*2*pi*m*n(i)/N); 
end; 
echo off ; 
end; 
end; 
echo on ; 
g_ T=real(g_ T) ; % The imaginary part is due to the finite machine precision 
% Obtain g_T(n-(N-1)12). 
n2=0:N-1; 
% Obtain the frequency response characteristics. 
(G_ T,W]=freqz(g_ T, 1); 
% normalized magnitude response 
magG_ T _in_dB=20*loglO(abs(G_ T)/max(abs(G_ T))); 
% impulse response of the cascade of the transmitter and the receiver filters 
g_R=g_T; 
imp_resp_of_cascade=conv(g_R,g_ T); 
% Plotting commands follow. 
Figure 6.26(a) illustrates BT ( n - N21), n 
= 0, 1, ... ,N - 1 for N 
= 31. The 
corresponding frequency response characteristic is shown in Figure 6.26(b). Note that 
the frequency response characteristic is no longer zero for If I > W because the digital 
filter has finite duration. However, the sidelobes in the spectrum are relatively small. 
Finally, in Figure 6 .27, we show the impulse response of the cascade of the transmitter 
and receiver FIR filters. This impulse response may be compared with the ideal impulse 
response obtained by sampling x(t) given by (6.5.15) at a rate Fs 
= 4/T = 8W. 
8 
6 
4 
2 
5 
10 
15 
n 
20 
0 
-10 
-20 
-30 
-40 
-50 
-60 
-70 '--'--'--'--'--'--'--'---L-'--' 
25 
30 
0 
0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 
f 
Figure 6.26: 
Impulse response and frequency response of truncated discrete-time 
duobinary FIR filter at the transmitter 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.5. SYSTEM DESIGN FOR BANDLIMITED CHANNELS 
281 
200 
150 
100 
50 
-so 
0 
10 
20 
30 
n 
40 
50 
60 
Figure 6.27: Impulse response of the cascade of the transmitter filter with the matched 
filter at the receiver 
6.5.3 
Precoding for Detection of Partial Response Signals 
For the duobinary signal pulse, x(nT) = 1 for n = 0, 1 and 0 otherwise. Hence, the 
samples of the output of the receiver filter GR (j) are expressed as 
Yk = ak + ak-1 + Vk 
=bk+ Vk 
(6.5.22) 
where { ak} is the transmitted sequence of amplitudes, { Vk} is a sequence of additive 
Gaussian noise samples, and bk = ak + ak-l · Let us ignore the noise for the moment 
and consider the binary case where ak = ± 1 with equal probability. Then, bk takes one 
of three possible values; namely, bk = -2, 0, 2 with corresponding probabilities i, , 
and i. If ak-1 is the detected signal from the (k - 1 )st signaling interval, its effect on 
bk, the received signal in the kth signaling interval, can be eliminated by subtraction, 
thus allowing ak to be detected. The process can be repeated sequentially for every 
received symbol. 
The major problem with this procedure is that errors arising from the additive noise 
tend to propagate. For example, if ak-1 is detected in error, its effect on ak is not 
eliminated; in effect, it is reinforced by the incorrect subtraction. Consequently, the 
detection of ak is also likely to be in error. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

282 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
Data sequence Dk 
-
1 
1 
1 
0 
1 
0 
0 
1 
0 
0 
0 
1 
Precoded sequence Pk 
0 
1 
0 
1 
1 
0 
0 
0 
1 
1 
1 
1 
0 
Transmitted sequence ak 
-1 
1 
-1 
1 
1 
-1 
-1 
-1 
1 
1 
1 
1 
-1 
Received sequence bk 
-
0 
0 
0 
2 
0 
-2 
-2 
0 
2 
2 
2 
0 
Decoded sequence Dk 
-
1 
1 
1 
0 
1 
0 
0 
1 
0 
0 
0 
1 
Table 6.1: Binary signaling with duobinary pulses 
Error propagation can be prevented by precoding the data at the transmitter in­
stead of eliminating the controlled ISi by subtraction at the receiver. The precoding is 
performed on the binary data sequence prior to modulation. From the data sequence 
{Dd of l's and O's that is to be transmitted, a new sequence {pk}, called the precoded 
sequence, is generated. For the duobinary signal, the precoded sequence is defined as 
k = 1,2, ... 
(6.5.23) 
where e denotes modulo-2 subtraction.1 Then the transmitted signal amplitude is ak = 
-1 if Pk = 0 and ak = 1 if Pk = 1. That is, 
The noise-free samples at the output of the receiving filter are given by 
Consequently, 
bk= ak + ak-I 
= (2pk - 1) + (2Pk-I - 1) 
= 2(pk +Pk-I - 1) 
(6.5.24) 
(6.5 .25) 
(6.5 .26) 
Because Dk = Pk EB Pk-I, it follows that the data sequence {Dk} is obtained from {bk} 
using the relation 
1 
Dk= 2h + 1 
(mod 2) 
(6.5.27) 
Therefore, if bk 
= ±2, then Dk 
= 0, and if bk 
= 0, then Dk 
1. An example that 
illustrates the precoding and decoding operations is given in Table 6.1. 
In the presence of additive noise, the sampled outputs from the receiving filter are 
given by (6.5.22). In this case, Yk = bk + Vk is compared with the two thresholds set 
at+ 1 and -1. The data sequence {Dk} is obtained according to the detection rule 
Dk= {l, 
0, 
(6.5.28) 
1 Although this operation is identical to modulo-2 addition, it is convenient to view the precoding opera­
tion for duobinary in terms of modulo-2 subtraction. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.5. SYSTEM DESIGN FOR BANDLIMITED CHANNELS 
283 
Thus, precoding the data allows us to perform symbol-by-symbol detection at the re­
ceiver without the need for subtraction of previously detected symbols. 
The extension from binary PAM to multilevel PAM using duobinary pulses is 
straightforward. The M-level transmitted sequence {ak} results in a (noise-free) re­
ceived sequence 
k = 1, 2, 3, ... 
(6.5.29) 
which has 2M -1 possible equally spaced amplitude levels. The amplitude levels for 
the sequence {ak} are determined from the relation 
(6.5.30) 
where {pk} is the precoded sequence that is obtained from an M-level data sequence 
{Dd according to the relation 
Pk= Dk e Pk-I 
(mod M) 
where the possible values of the data sequence {Dd are 0, 1, 2, ... , M. 
(6.5.31) 
In the absence of noise, the samples at the output of the receiving filter may be 
expressed as 
Hence, 
bk= ak + ak-I 
= [2Pk 
- (M -1)] + [2Pk-I 
- (M - l)] 
= 2 [Pk+ Pk-I 
- (M - 1)] 
1 
Pk+ Pk-I = 2.h + (M - 1) 
(6.5.32) 
(6.5.33) 
Since Dk= Pk+ Pk-I (mod M), it follows that the transmitted data {Dk} are recovered 
from the received sequence {bd by means of the relation 
1 
Dk= 2.bk + (M - 1) 
(mod M) 
(6.5.34) 
In the case of the modified duobinary pulse, the received signal samples at the output 
of the receiving filter GR (j) are expressed as 
Yk = ak -ak-2 + Vk 
= h+vk 
(6.5.35) 
The precoder for the modified duobinary pulse produces the sequence {pk} from 
the data sequence {Dk} according to the relation 
Pk = Dk E9 Pk-2 
(mod M) 
(6.5.36) 
From these relations, it is easy to show that the detection rule for the recovering of the 
data sequence {Dd from {bk} in the absence of noise is 
(6.5.37) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

284 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
--li!!il;tyiltj#lij;te]:)!#j@I 
Illustrative Problem 6.10 Let us write a MATLAB program that takes a data se­
quence {Dk}, precodes it for a duobinary pulse transmission system to produce {pk}, 
and maps the precoded sequence into the transmitted amplitude levels {ad. Then from 
the transmitted sequence {ak}, the program will form the received noise-free sequence 
{bd and, using the relation in (6.5.34), recover the data sequence {Dk}. 
The MATLAB script is given below. By using this program, we can verify the results 
in Table 6.1 for the case where M = 2. 
% MATLAB script for Illustrative Problem 6.10. 
echo on 
d=[1 1 1 0 1 0 0 1 0 0 0 1 ]; 
p(1 )=0; 
for i=1 :length(d) 
end 
p(i+ 1 )=rem(p(i)+d(i),2); 
echo off ; 
echo on ; 
a=2.*p-1; 
b(1 )=0; 
dd(1 )=0; 
for i=1 :length(d) 
end 
b(i+ 1)=a(i+1 )+a(i); 
d_out(i+ 1)=rem(b(i+1)/2+1,2); 
echo off ; 
echo on ; 
d_out=d_out(2:length(d)+ 1 ); 
6.6 
Linear Equalizers 
The most common type of channel equalizer used in practice to reduce ISi is a lin­
ear FIR filter with adjustable coefficients { cd, as shown in Figure 6.28. On chan­
nels whose frequency response characteristics are unknown but time-invariant, we may 
measure the channel characteristics and adjust the parameters of the equalizer; once 
adjusted, the parameters remain fixed during the transmission of data. Such equaliz­
ers are called preset equalizers. On the other hand, adaptive equalizers update their 
parameters on a periodic basis during the transmission of data, so they are capable of 
tracking a slowly time-varying channel response. 
First, let us consider the design characteristics for a linear equalizer from a frequency­
domain viewpoint. Figure 6.29 shows a block diagram of a system that employs a linear 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.6. LINEAR EQUALIZERS 
't 
't 
't 
Algorithm for tap 
gain adjustment 
't 
Figure 6 .28: Linear transversal filter 
Input 
data 
Transmitter 
filter 
G./_f) 
Channel 
C(f) 
Noise 
n(t) 
Receiver 
filter 
GR(f) 
Equalizer 
GE(f) 
Figure 6.29: Block diagram of a system with an equalizer 
285 
Equalized 
output 
T0 detector 
filter as a channel equalizer. 
The demodulator consists of a receiver filter with fre­
quency response GR (j) in cascade with a channel-equalizing filter that has a frequency 
response GE (j). As indicated in the previous section, the receiver filter response GR (j) 
is matched to the transmitter response-that is, GR(j) 
= Gf(j)-and the product 
GR (j) Gr (j) is usually designed so that either there is zero ISI at the sampling instants 
as, for example, when GR(t)Gr(f) = Xrc(f), or controlled ISI for partial response 
signals. 
For the system shown in Figure 6.29, in which the channel frequency response is 
not ideal, the desired condition for zero ISI is 
Gr(f)C(j)Gn(f)GE(j) = Xrc(f) 
(6.6.1) 
where 
Xrc (j) 
is 
the 
desired 
raised-cosine 
spectral 
characteristic. 
Because 
Gr (j) GR (j) 
= Xrc (j) by design, the frequency response of the equalizer that com­
pensates for the channel distortion is 
GE(f) 
-
_
l_ -
1 
e-jBc(f) 
- C(j) 
-
I C(j) I 
(6.6.2) 
Thus, the amplitude response of the equalizer is I GE(j) I = 1/ I C(j) I, and its phase 
response is eE(j) 
= -ec(f). In this case, the equalizer is said to be the inverse 
channel filter to the channel response. 
We note that the inverse channel filter completely eliminates ISI caused by the chan­
nel. Since it forces the ISI to be zero at the sampling instants t = kT fork = 0, 1, ... , 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

286 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
the equalizer is called a zero-forcing equalizer. Hence, the input to the detector is 
simply 
k 
= 0, 1, ... 
(6.6.3) 
where r/k represents the additive noise and ak is the desired symbol. 
In practice, the ISi caused by channel distortion is usually limited to a finite number 
of symbols on either side of the desired symbol. Hence, the number of terms that 
constitute the ISi in the summation given by (6.4.7) is finite. As a consequence, in 
practice the channel equalizer is implemented as an FIR filter, or transversal filter, with 
adjustable tap coefficients {en}, as illustrated in Figure 6.28. The time delay T between 
adjacent taps may be selected as large as T, the symbol interval, in which case the FIR 
equalizer is called a symbol-spaced equalizer. In this case, the input to the equalizer 
is the sampled sequence given by (6.4.6). However, we note that when the symbol 
rate 1 / T < 2 W, frequencies in the received signal above the folding frequency 1 / T 
are aliased into frequencies below 1 / T. In this case, the equalizer compensates for the 
aliased channel-distorted signal. 
On the other hand, when the time delay T between adjacent taps is selected such 
that l/T  2W > l/T, no aliasing occurs; hence the inverse channel equalizer com­
pensates for the true channel distortion. Because T < T, the channel equalizer is said 
to have fractionally spaced taps, and it is called a fractionally spaced equalizer. In 
practice, Tis often selected at T = T /2. Notice that, in this case, the sampling rate at 
the input to the filter GE (j) is t. 
The impulse response of the FIR equalizer is 
K 
BE(t) 
= L Cn8(t - nT) 
n=-K 
and the corresponding frequency response is 
K 
GE(j) 
= L Cne-j2rrfm 
n=-K 
(6.6.4) 
(6.6.5) 
where {en} are the 2K + 1 equalizer coefficients and K is chosen sufficiently large 
so that the equalizer spans the length of the ISi- that is, 2K + 1  L, where L is the 
number of signal samples spanned by the ISL Because X (j) 
= Gy (j) C (j) GR (j) and 
x(t) is the signal pulse corresponding to X(j), the equalized output signal pulse is 
K 
q(t) 
= L CnX(t - nT) 
n=-K 
(6.6.6) 
The zero-forcing condition can now be applied to the samples of q ( t) taken at times 
t = mT. These samples are 
K 
q(mT) 
= L CnX(mT- nT), 
m = 0,±l, ... ,±K 
(6.6.7) 
n=-K 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.6. LINEAR EQUALIZERS 
287 
Because there are 2K + 1 equalizer coefficients, we can control only 2K + 1 sampled 
values of q ( t). Specifically, we may force the conditions 
K 
q(mn = I CnX(mT- nT) 
n=-K 
g: 
m=O 
(6.6.8) 
m=±l,±2, ... ,±K 
which may be expressed in matrix form as Xe= q, where Xis a (2K + 1) x (2K + 1) 
matrix with elements x ( m T - n T), c is the ( 2K + 1) coefficient vector, and q is the 
(2K + 1) column vector with one nonzero element. Thus, we obtain a set of 2K + 1 
linear equations for the coefficients of the zero-forcing equalizer. 
We should emphasize that the FIR zero-forcing equalizer does not completely elim-
inate ISi because it has a finite length. However, as K is increased, the residual ISi can 
be reduced and in the limit of K -
oo, the ISi is completely eliminated. 
Illustrative Problem 6.11 Consider a channel-distorted pulse x(t), at the input to the 
equalizer, given by the expression 
1 
x(t) = 1 + (2t/T)2 
where l/T is the symbol rate. The pulse is sampled at the rate 2/T and is equalized 
by a zero-forcing equalizer. Let us determine the coefficients of a five-tap zero-forcing 
equalizer. 
According to (6.6.8), the zero-forcing equalizer must satisfy the equations 
 
nT {l, 
q(mT) = L CnX(mT- 2) = 
n=-2 
0, 
m=O 
m = ±1,±2 
The matrix X with elements x(mT - nT /2) is given as 
1 
1 
1 
1 
1 
5 
10 
17 
26 
37 
1 
1 
1 
1 
1 
2 
5 
10 
17 
X= 
1 
1 
1 
1 
1 
(6.6.9) 
5 
2 
2 
5 
1 
1 
1 
1 
1 
17 
10 
5 
2 
1 
1 
1 
1 
1 
37 
26 
17 
10 
5 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

288 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
1.2 
I 
I 
I 
0.9 
0.8 
0.7 
0.8 
0.6 
0.6 
0.5 
0.4 
0.4 
0.3 
0.2 
-
0.2 
9 
9 
9 
9 
0 
0 
0 
-
0.1 
-0.2 
I 
I 
I 
I 
I 
5 
10 
15 
20 
25 
0 
2 
4 
6 
8 
10 
12 
(a) Original pulse 
(b) Equalized pulse 
Figure 6.30: Graph of original pulse and equalized pulse in Illustrative Problem 6.11 
The coefficient vector c and the vector q are given as 
C-z 
0 
C-1 
0 
C = 
Co 
q= 
1 
(6.6.10) 
C1 
0 
Cz 
0 
Then the linear equations Xe = q can be solved by inverting the matrix X. Thus we 
obtain 
-2.2 
4.9 
Copt = x-lq = 
-3 
4.9 
-2.2 
(6.6.11) 
Figure 6.30 illustrates the original pulse x(t) and the equalized pulse. Note the small 
amount of residual ISi in the equalized pulse. The MATLAB script for this computation 
is given next. 
---tl®'i" ----------------
% MATLAB script for Illustrative Problem 6.11. 
echo on 
T=1; 
Fs=2ff; 
Ts=1/Fs; 
c_opt=[-2.2 4.9 -3 4.9 -2.2]; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.6. LINEAR EQUALIZERS 
289 
t=-5*T:T/2:5*T; 
x=1./(1 +((2/T)*t). "2); 
% sampled pulse 
equalized_x=filter(c_opt, 1,[x 0 OJ); 
% since there will be a delay of two samples at the output 
% to take care of the delay 
equalized_x=equalized_x(3 :length( equalized_ x)); 
% Now, let us downsample the equalizer output. 
for i=1 :2:length(equalized_x), 
downsampled_equalizer_output( (i+ 1 )/2)=equalized_x(i); 
echo off; 
end; 
echo on ; 
% Plotting commands follow. 
One drawback to the zero-forcing equalizer is that it ignores the presence of ad­
ditive noise. As a consequence, its use may result in significant noise enhancement. 
This is easily seen by noting that in a frequency range where C(j) is small, the chan­
nel equalizer GE(j) 
= l/C(j) compensates by placing a large gain in that frequency 
range. Consequently, the noise in that frequency range is greatly enhanced. An alterna­
tive is to relax the zero ISi condition and select the channel equalizer characteristic such 
that the combined power in the residual ISi and the additive noise at the output of the 
equalizer is minimized. A channel equalizer that is optimized based on the minimum 
mean-square error (MMSE) criterion accomplishes the desired goal. 
is 
To elaborate, let us consider the noise-corrupted output of the FIR equalizer, which 
K 
z(t) = L cny(t - nT) 
n=-K 
(6.6.12) 
where y(t) is the input to the equalizer, given by (6.4.3). The equalizer output is 
sampled at times t = mT. Thus, we obtain 
K 
z(mT) = L Cny(mT- nT) 
(6.6.13) 
n=-K 
The desired response at the output of the equalizer at t = m T is the transmitted symbol 
am. The error is defined as the difference between am and z(mT). Then, the mean­
square error (MSE) between the actual output sample z(mT) and the desired values 
am is2 
MSE = E lz(mT) - am12 
 E [ 
n
K 
Cny(mT- nT) - a,. '] 
K 
K 
K 
L 
L CnCkRy(n - k) - 2 L CkRay(k) + E(lam12) 
n=-K k=-K 
k=-K 
(6.6.14) 
2In this development we allow the signals z(t) and y(t) to be complex valued and the data sequence 
also to be complex valued, as would be the case for carier-modulated signals treated in Chapter 7. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

290 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
where the correlations are defined as 
Ry(n - k) = E[y* (mT - nT)y(mT - kT)] 
Ray(k) = E[y(mT - kT)a%] 
(6.6.15) 
and the expectation is taken with respect to the random information sequence {am} 
and the additive noise. 
The minimum MSE solution is obtained by differentiating (6.6.14) with respect 
to the equalizer coefficients { Cn} . Thus we obtain the necessary conditions for the 
minimum MSE as 
K 
I CnRy(n - k) = Ray(k), 
k=0,±1,±2, ... ,±K 
(6.6.16) 
n=-K 
These are the 2K + l linear equations for the equalizer coefficients. In contrast to the 
zero-forcing solution described previously, these equations depend on the statistical 
properties (the autocorrelation) of the noise as well as the ISi through the autocorrela­
tion Ry(n). 
In practice, the autocorrelation matrix Ry ( n) and the cross-correlation vector 
Ray(n) are unknown a priori. However, these correlation sequences can be estimated 
by transmitting a test signal over the channel and using the time-average estimates 
1 
N 
Ry(n) =N I y*(kT- nT)y(kT) 
k=l 
 
1  
* 
Ray(n) = N 
L y(kT - nT)ak 
k=l 
(6.6.17) 
in place of the ensemble averages to solve for the equalizer coefficients given by 
(6.6.16). 
Illustrative Problem 6.12 Let us consider the same channel-distorted pulse x ( t) as in 
Illustrative Problem 6.11, but now we shall design the five-tap equalizer based on the 
minimum MSE criterion. The information symbols have zero mean and unit variance 
and are uncorrelated- that is, 
E(an) = 0 
E(anam) = 0, 
E(lan12) = 1 
n !- m 
The additive noise v ( t) has zero mean and autocorrelation 
No 
Rvv(T) = z-6(T) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.6. LINEAR EQUALIZERS 
I 
I 
I 
0.8 
0.6 
0.4 
0.2 
0 
"' 
Gl 
 
-0.2 
-4 
-3 
-2 
-1 
0 
t 
I 
 
' 
Gl 
2 
291 
I 
"' 
3 
4 
Figure 6.31: Plot of the equalized pulse in Illustrative Problem 6.12 
The equalizer tap coefficients are obtained by solving (6.6.16) with K 
TI 2. The matrix with elements Ry ( n - k) is simply 
Ry = xtx +No I 
2 
2 and T 
where X is given by (6.6.9) and I is the identity matrix. The vector with elements 
Ray (k) is given as 
Ray 
1 
5 
1 
2 
1 
1 
2 
1 
5 
The equalizer coefficients obtained by solving (6.6.16) are as follows: 
Capt= 
0.0956 
-0.7347 
1.6761 
-0.7347 
0.0956 
A plot of the equalized pulse is shown in Figure 6.31. The MATLAB script for this 
computation is given below. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

292 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
% MATLAB script for Illustrative Problem 6.12. 
echo on 
T=1; 
for n=-2:2, 
for k=-2:2, 
temp=O; 
end; 
end; 
echo on; 
for i=-2:2, temp=temp+(1/(1+(n-W2))*(1/(1+(k-i)"2)); end; 
X(k+3,n+3)=temp; 
echo off ; 
N0=0.01; 
% assuming that N0=0.01 
Ry=X+(N0/2)*eye(5); 
Riy=[1/5 1/2 1 1/2 1/5].,; 
c_opt=inv(Ry)*Riy; 
% optimal tap coefficients 
% find the equalized pulse ... 
t=-3:1/2:3; 
x=1./(1+(2*t/T)."2); 
% sampled pulse 
equalized_ pulse=conv(x,c_opt); 
% Decimate the pulse to get the samples at the symbol rate. 
decimated_ equalized_ pulse=equalized_ pulse( 1 :2 :length( equalized_ pulse)); 
% Plotting command follows. 
6.6.1 
Adaptive Linear Equalizers 
We have shown that the tap coefficients of a linear equalizer can be determined by 
solving a set of linear equations. In the zero-forcing optimization criterion, the linear 
equations are given by (6.6.8). On the other hand, if the optimization criterion is based 
on minimizing the MSE, the optimum equalizer coefficients are determined by solving 
the set of linear equations given by (6.6.16). 
In both cases, we may express the set of linear equations in the general matrix form 
Be =d 
(6.6.18) 
where Bis a (2K + 1) x (2K + 1) matrix, c is a column vector representing the 2K + 1 
equalizer coefficients, and dis a (2K + 1)-dimensional column vector. The solution of 
(6.6.18) yields 
Copt = B-1d 
(6.6.19) 
In practical implementations of equalizers, the solution of (6.6.18) for the optimum 
coefficient vector is usually obtained by an iterative procedure that avoids the explicit 
computation of the inverse of the matrix B. The simplest iterative procedure is the 
method of steepest descent, in which one begins by choosing arbitrarily the coefficient 
vector c, say, Co. This initial choice of coefficient vector Co corresponds to a point on 
the criterion function that is being optimized. For example, in the case of the MSE 
criterion, the initial guess co corresponds to a point on the quadratic MSE surface in 
the (2K + 1)-dimensional space of coefficients. The gradient vector, defined as oo, 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.6. LINEAR EQUALIZERS 
293 
Figure 6.32: Example of the convergence characteristics of a gradient algorithm 
which is the derivative of the MSE with respect to the 2K + 1 filter coefficients, is then 
computed at this point on the criterion surface, and each tap coefficient is changed in 
the direction opposite to its corresponding gradient component. The change in the jth 
tap coefficient is proportional to the size of the jth gradient component. 
For example, the gradient vector, denoted as !Jk. for the MSE criterion, found by 
taking the derivatives of the MSE with respect to each of the 2K + 1 coefficients, is 
9k =Bek 
- d, 
k=0,1,2, ... 
(6.6.20) 
Then the coefficient vector Ck is updated according to the relation 
(6.6.21) 
where Ll is the step-size parameter for the iterative procedure. To ensure convergence 
of the iterative procedure,D is chosen to be a small positive number. In such a case, 
the gradient vector !Jk converges toward zero-that is, !Jk - 0 ask -
oo-and the 
coefficient vector Ck - Copt, as illustrated in Figure 6.32 based on two-dimensional 
optimization. In general, convergence of the equalizer tap coefficients to Copt cannot 
be attained in a finite number of iterations with the steepest-descent method. However, 
the optimum solution Copt can be approached as closely as desired in a few hundred 
iterations. In digital communication systems that employ channel equalizers, each it­
eration corresponds to a time interval for sending one symbol; hence, a few hundred 
iterations to achieve convergence to Capt correspond to a fraction of a second. 
Adaptive channel equalization is required for channels whose characteristics change 
with time. In such a case, the ISi varies with time. The channel equalizer must track 
such time variations in the channel response and adapt its coefficients to reduce the ISL 
In the context of the above discussion, the optimum coefficient vector Copt varies with 
time due to time variations in the matrix B and, for the case of the MSE criterion, time 
variations in the vector d. Under these conditions, the iterative method described above 
can be modified to use estimates of the gradient components. Thus, the algorithm for 
adjusting the equalizer tap coefficients may be expressed as 
(6.6.22) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

294 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
Figure 6.33: Linear adaptive equalizer based on the MSE criterion 
where Bk denotes an estimate of the gradient vector Bk and Ck denotes the estimate of 
the tap coefficient vector. 
In the case of the MSE criterion, the gradient vector Bk given by (6.6.20) may also 
be expressed as 
Bk= -E<ekyn 
An estimate Bk of the gradient vector at the kth iteration is computed as 
(6.6.23) 
where ek denotes the difference between the desired output from the equalizer at the 
kth time instant and the actual output z ( k T) and Yk denotes the column vector of 
2K + 1 received signal values contained in the equalizer at time instant k. The error 
signal ek is expressed as 
(6.6.24) 
where Zk = z ( kT) is the equalizer output given by (6.6.13) and ak is the desired 
symbol. Hence, by substituting (6.6.23) into (6.6.22), we obtain the adaptive algorithm 
for optimizing the taps coefficients (based on the MSE criterion) as 
(6.6.25) 
Because an estimate of the gradient vector is used in (6.6.25), the algorithm is called 
a stochastic gradient algorithm .. It is also known as the Least Mean Square (LMS) 
algorithm. 
A block diagram of an adaptive equalizer that adapts its tap coefficients according 
to (6.6.25) is illustrated in Figure 6.33. Note that the difference between the desired 
output ak and the actual output Zk from the equalizer is used to form the error signal ek. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.6. LINEAR EQUALIZERS 
295 
This error is scaled by the step-size parameter3' and the scaled error signal ek mul­
tiplies the received signal values {y(kT - nT)} at the 2K + 1 taps. The products 
eky* (kT - nT) at the 2K + 1 taps are then added to the previous values of the tap 
coefficients to obtain the updated tap coefficients, according to (6.6.25). This compu­
tation is repeated as each new symbol is received. Thus, the equalizer coefficients are 
updated at the symbol rate. 
Initially, the adaptive equalizer is trained by the transmission of a known pseudo­
random sequence {am} over the channel. At the demodulator, the equalizer employs 
the known sequence to adjust its coefficients. Upon initial adjustment, the adaptive 
equalizer switches from a training mode to a decision-directed mode, in which case the 
decisions at the output of the detector are sufficiently reliable so that the error signal 
is formed by computing the difference between the detector output and the equalizer 
output-that is, 
(6.6.26) 
where ak is the output of the detector. In general, decision errors at the output of the 
detector occur infrequently; consequently, such errors have little effect on the perfor­
mance of the tracking algorithm given by (6.6.25). 
A rule of thumb for selecting the step-size parameter in order to ensure convergence 
and good tracking capabilities in slowly varying channels is 
3 = 
1 
5(2K + l)PR 
(6.6.27) 
where PR denotes the received signal-plus-noise power, which can be estimated from 
the received signal. 
---tll!lii;MiltJjj;t•]:J!§I·•----------
Illustrative Problem 6.13 Let us implement an adaptive equalizer based on the LMS 
algorithm given in (6.6.25). The channel number of taps selected for the equalizer is 
2K + 1 
= 11. The received signal-plus-noise power PR is normalized to unity. The 
channel characteristic is given by the vector x as 
x 
= [0.05 - 0.063 0.088 - 0.126 - 0.25 0.9047 0.25 0 0.126 0.038 0.088] 
The convergence characteristics of the stochastic gradient algorithm in (6.6.25) are 
illustrated in Figure 6.34. These graphs were obtained from a computer simulation of 
the 11-tap adaptive equalizer. The graphs represent the MSE averaged over several 
realizations. As shown, when3 is decreased, the convergence is slowed somewhat, but 
a lower MSE is achieved, indicating that the estimated coefficients are closer to Copt· 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

296 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
9-.Mrl">-.;'¥ill",vi""",..,.,.V'l/V\#N-C"1"-.J'W.,..,.,.,.,.( Li= 0.115 
'"C"'>"IV"'W'.,.,..'VAJ'-w'/LV.NM.1rv.'>IW'\J",JW"'l,,'-"'"""'.-v-r 
Li= 0.09 
Y"v..,.,.,.JoNv!Ml\Jlrw.'IJ""""""' ""Vv-Yir.r'lv.,./rfV" Li = 0. 045 
103 ------------ 
0 
50 
100 
150 
200 
250 
300 
350 
400 
450 
500 
Number of iterations 
Figure 6.34: Initial convergence characteristics of the LMS algorithm with different 
step sizes 
The MATLAB script for this example is given below. 
---tl®li" ----------------
% MATLAB script for Illustrative Problem 6.13. 
echo on 
N=500; 
% length of the information sequence 
K=5; 
actuaLisi=[0.05 -0.063 0.088 -0.126 -0.25 0.9047 0.25 0 0.126 0.038 0.088]; 
sigma=0.01; 
delta=0.115; 
Num_oLrealizations= 1 000; 
mse_av=zeros( 1,N-2*K); 
for j=1 :Num_oLrealizations, 
% the information sequence 
for i=1 :N, 
end; 
if (rand<0.5), 
info(i)=-1; 
else 
info(i)=1; 
end; 
echo off ; 
if U==1) ; echo on ; end 
% Compute the average over a number of realizations. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.6. LINEAR EQUALIZERS 
% the channel output 
y=filter(actuaLisi, 1,info); 
for i=1 :2:N, [noise(i) noise(i+ 1 )]=gngauss(sigma); end; 
y=y+noise; 
end; 
% Now the equalization part follows. 
estimated_c=[O 0 0 0 0 1 0 0 0 0 O]; 
for k=1 :N-2*K, 
end; 
y _k=y(k:k +2*K); 
z_k=estimated_c*y _k. ' ; 
e_k=info(k)-z_k; 
estimated_c=estimated_c+delta * e_k*y _k; 
mse(k)=e_k"2; 
echo off ; 
if U==1) ; echo on ; end 
mse_av=mse_av+mse; 
echo off ; 
echo on ; 
% initial estimate of IS/ 
mse_av=mse_av/N um_oLrealizations; 
% Plotting commands follow. 
% mean-squared error versus iterations 
Illustrative Problem 6.14 [Performance of Adaptive MSE Equalizer] 
297 
A communication system transmits binary symbols {an = ±1} through an ISi 
channel whose characteristic is given by vector x in Illustrative Problem 6.13. The 
channel output is the sequence 
10 
Yn = L Xkan-k + Wn, 
n = 1, 2, ... 
k=O 
where an = 0, n < 0, and { Wn} is a white Gaussian noise sequence with variance 
u2• The equalizer is the linear adaptive equalizer based on the MSE criterion as shown 
in Figure 6.33. Its output is the sequence 
K 
Zn= L CkYn-k. 
n = 1,2, ... 
k=-K 
where {cd are the equalizer coefficients. 
Perform a Monte Carlo simulation to determine the error probability for the equal­
izer as a function of the SNR = 1/2 u2• Use the first 200 transmitted symbols to train 
the equalizer with use of the LMS algorithm and a step sizer.= 0.045. Then,perform 
the simulation for 10,000 transmitted symbols for each choice of variance u2• 
The performance of the equalizer is shown in Figure 6 .35. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

298 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
Ql 
Cl. 
10-3 
10-4 
10-5 
2 
4 
6 
8 
10 
12 
SNR (dB) 
Figure 6.35: The performance of the equalizer in Illustrative Problem 6.14 
The MATLAB script for the problem is given below. 
---tl&li" ----------------
% MATLAB script for Illustrative Problem 6.14 
N=20000; 
% Length of the training sequence 
% Number of transmitted symbols for each choice of SNR 
Nt=[1000000 1000000 1000000 1000000 1000000 5000000 10000000]; 
delta=0.0045; 
K=5; 
actuaLisi=[0.05 -0.063 0.088 -0.126 -0.25 0.9047 0.25 0 0.126 0.038 0.088]; 
SNR_dB=2:2:14; 
SNR=10. A(SNR_dB/10); 
LSNR=size(SNR,2); 
var=1 /2./SNR; 
sigma=sqrt(var); 
Pe=zeros(1,LSNR); 
for idx=1 :LSNR 
% (A) The training sequence: 
training_ s=ones( 1 ,N); 
for i=1 :N 
if (rand<0.5) 
training_s(i)=-1; 
end 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.6. LINEAR EQUALIZERS 
end 
end 
% The channel output: 
y=filter(actuaLisi, 1,training_s); 
noise=zeros(1,N); 
for i=1 :2:N 
end 
noise(i) =random(' Normal' ,O,sigma(idx)); 
noise(i+ 1) = noise(i); 
y=y+noise; 
% The equalization part follows: 
estimated_c=[O 0 0 0 0 1 0 0 0 0 O]; % initial estimate of !SI 
for k=1 :N-2*K 
end 
y_k=y(k:k+2*K); 
z_k=estimated_c*y _k' ; 
e_k=training_s(k)-z_k; 
estimated_c=estimated_c+delta * e_k*y _k; 
% (B) The transmitted information sequence: 
info=ones(1,Nt(idx)); 
for i=1 :Nt(idx) 
end 
if (rand<0.5) 
info(i)=-1; 
end 
% The channel output: 
y=filter(actuaLisi, 1,info); 
noise=sigma(idx)*randn(1,Nt(idx)); 
y=y+noise; 
% The equalization part: 
count = O; 
err_count=O; 
z_k_ vec=ones(1,Nt(idx)-2*K); 
for k=1 :Nt(idx)-2*K; 
y _k=y(k:k +2*K); 
z_k=estimated_c*y _k' ; 
if z_k<O 
z_k_ vec(k)=-1; 
end 
err _count=err_count+0.5*abs(info(k)-z_k_ vec(k)); 
end 
Pe(idx)= err_count/length(z_k_vec); 
clear y; clear noise 
% Plot the results: 
semilogy(SNR_dB,Pe) 
grid 
ylabel(' P _ e ' ) 
xlabel(, SNR (dB) , ) 
299 
Although we have described in some detail the operation of an adaptive equalizer 
that is optimized on the basis of the MSE criterion, the operation of an adaptive equal­
izer based on the zero-forcing method is very similar. The major difference lies in the 
method for estimating the gradient vectors 9k at each iteration. A block diagram of an 
adaptive zero-forcing equalizer is shown in Figure 6.36. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

300 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
ak 
,_-Output 
Figure 6.36: An adaptive zero-forcing equalizer 
0.04 
-0.05 
0.72 
0.07 
-0.21 
-0.5 
0.36 
0.21 
0.07 
0.03 
0.407 
Channel A 
Figure 6.37: Two channels with ISi 
6.7 
Nonlinear Equalizers 
0.815 
0.407 
Channel B 
The linear filter equalizers described above are very effective on channels, such as wire 
line telephone channels, where the ISi is not severe. The severity of the ISi is directly 
related to the spectral characteristics of the channel and not necessarily to the time 
span of the ISi. For example, consider the ISi resulting from two channels, illustrated 
in Figure 6.37. The time span for the ISi in Channel A is five symbol intervals on each 
side of the desired signal component, which has a value of 0. 72. On the other hand, the 
time span for the ISi in Channel B is one symbol interval on each side of the desired 
signal component, which has a value of 0.815. The energy of the total response is 
normalized to unity for both channels. 
In spite of the shorter ISi span, Channel B results in more severe ISL This is ev­
idenced in the frequency response characteristics of these channels, which are shown 
in Figure 6.38. We observe that Channel B has a spectral null (the frequency response 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.7. NONLINEAR EQUALIZERS 
0.00 
-6.00 
Fg 
.g -12.00 
B ;g_ -18.00 
 -21.00 
O.OOr--
Fg 
-6.00 
.g -12.00 
B ;g_ -18.00 
 -21.00 
301 
-30.00 - 
-30.00 	
- 
0.00 
0.63 
1.26 
1.88 
2.51 
3.14 
w frequency (radians) 
0.00 
0.63 
1.26 
1.88 
2.51 
3.14 
w frequency (radians) 
(a) 
(b) 
Figure 6.38: Amplitude spectra for (a) Channel A shown in Figure 6.37(a) and (b) 
Channel B shown in Figure 6.37(b) 
Input 
Signal 
{y"} 
Feedforward 
Filter 
Detector 
Feedback 
Filter 
1---.--.. 0utput Data 
Figure 6.39: Block diagram of a DFE 
C (j) 
= 0 for some frequencies in the band If I ::5: W) at f = 1/2 T, whereas this does 
not occur in the case of Channel A. Consequently, a linear equalizer will introduce 
a large gain in its frequency response to compensate for the channel null. Thus, the 
noise in Channel B will be enhanced much more than in Channel A. This implies that 
the performance of the linear equalizer for Channel B will be significantly poorer than 
that for Channel A. In general, the basic limitation of a linear equalizer is that it per­
forms poorly on channels having spectral nulls. Such channels are often encountered in 
radio communications, such as ionospheric transmission at frequencies below 30 MHz, 
and mobile radio channels, such as those used for cellular radio communications. 
A decision-feedback equalizer (DFE) is a nonlinear equalizer that employs previous 
decisions to eliminate the ISi caused by previously detected symbols on the current 
symbol to be detected. A simple block diagram for a DFE is shown in Figure 6.39. The 
DFE consists of two filters. The first filter is called afeedforwardfilter; it is generally 
a fractionally spaced FIR filter with adjustable tap coefficients. This filter is identical 
in form to the linear equalizer described above. Its input is the received filtered signal 
y(t) sampled at some rate that is a multiple of the symbol rate (e.g., at rate 2/T). The 
second filter is a feedback filter. It is implemented as an FIR filter with symbol-spaced 
taps having adjustable coefficients. Its input is the set of previously detected symbols. 
The output of the feedback filter is subtracted from the output of the feedforward filter 
to form the input to the detector. Thus, we have 
N1 
N2 
Zm 
= L Cny(mT- nT) - L bnam-n 
n=l 
n=l 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

302 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
Feedforward filter 
Feedback filter 
Error signal 
Figure 6.40: Adaptive DFE 
where { Cn} and { bn} are the adjustable coefficients of the feedforward and feedback 
filters, respectively; iim-n. n 
= 1, 2, ... , N2, are the previously detected symbols; N1 
is the length of the feedforward filter; and N2 is the length of the feedback filter. Based 
on the input Zm, the detector determines which of the possible transmitted symbols 
is closest in distance to the input signal am. Thus, it makes its decision and outputs 
iim. What makes the DFE nonlinear is the nonlinear characteristic of the detector that 
provides the input to the feedback filter. 
The tap coefficients of the feedforward and feedback filters are selected to optimize 
some desired performance measure. For mathematical simplicity, the MSE criterion is 
usually applied, and a stochastic gradient algorithm is commonly used to implement 
an adaptive DFE. Figure 6.40 illustrates the block diagram of an adaptive DFE whose 
tap coefficients are adjusted by means of the LMS stochastic gradient algorithm. 
We should mention that decision errors from the detector that are fed to the feed­
back filter have a small effect on the performance of the DFE. In general, a small loss 
in performance of 1 to 2 dB is possible at error rates below io-2, but the presence of 
decision errors in the feedback filter does not result in catastrophic behavior. 
Illustrative Problem 6.15 [Performance of Adaptive DFE] 
Perform a Monte Carlo simulation to determine the error probability for the DFE 
shown in Figure 6.40 with N1 
= 3 and N2 
= 2 for the channel characteristic shown 
in Figure 6 .3 7, Channel B, as a function of the SNR 
= 1/2 o-2 . Use the first 200 
transmitted symbols to train the equalizer with use of the LMS algorithm and a step 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.7. NONLINEAR EQUALIZERS 
303 
size of0= 0.045. Then perform the simulation for 10,000 transmitted binary symbols 
for each choice of the variance a 2• Also, perform a Monte Carlo simulation for a linear 
MSE equalizer with K = 5 ( 11 total tap weight coefficients) for the same Channel B, 
and compare the error probability for the linear equalizer with that of the DFE. 
Figure 6.41 illustrates the performance of the DFE and the linear equalizer when their 
tap weight coefficients are optimized adaptively based on the MSE criterion. We ob­
serve that the DFE outperforms the linear equalizer on this channel, which has a spec­
tral null at the frequency w = rr radians. 
100 
1-- Linear MSE I 
-
-DFE 
10-1 
10-2 
Cl> 
a.. 
10-3 
10-4 
10-5 
2 
4 
6 
8 
SNR (dB) 
10 
12 
14 
Figure 6.41: The performance of the DFE and the linear equalizer in Illustrative Prob­
lem 6.15 
The MATLAB script for the problem is given below. 
---41®''" ---------------
% M ATLAB script for Illustrative Problem 6.15 
N=20000; 
% Length of the training sequence 
% Number of transmitted symbols for each choice of SNR 
Nt=[1000000 1000000 1000000 1000000 1000000 5000000 10000000]; 
delta=0.0045; 
K=5; 
N1=3;N2=2; 
actuaLisi=[0.407 0.815 0.407]; 
SNR_dB=2:2:14; 
SNR=10. A(SNR_dB/1 O); 
LSNR=length(SNR); 
var=1 /2./SNR; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

304 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
sigma=sqrt(var); 
% Standard deviation 
Pe_mse=zeros(1,LSNR); Pe_dfe=zeros(1,LSNR); 
for idx=1 :LSNR 
% (A) The training sequence: 
training_s_mse=ones(1,N); 
training_s_dfe=ones(1,N); 
for i=1 :N 
end 
if (rand<0.5) 
training_s_mse(i)=-1; 
end 
for i=1 :N 
end 
if (rand<0.5) 
training_s_dfe(i)=-1; 
end 
% The channel output: 
y _mse=filter( actuaL isi, 1 , training_s_mse); 
y _dfe=filter( actual_ isi, 1 , training_ s_dfe); 
noise_mse=sigma(idx)*randn(1,N); 
noise_dfe=sigma(idx)*randn(1,N); 
y _mse=y _mse+noise_mse; 
y _dfe=y _dfe+noise_dfe; 
% The equalization for the mse equalizer: 
estimated_c_mse=[O 0 0 0 0 1 0 0 0 0 O]; % Initial estimate of IS! 
for k=1 :N-2*K 
end 
y _k_mse=y-mse(k:k+2*K); 
z_k_mse=estimated_c_mse*y _k_mse' ; 
e_k_mse=training_ s_mse(k)-z_k_mse; 
estimateci_c_mse=estimated_c_mse+delta * e_k_mse*y _k_mse; 
% Training the feedforward and feedback filters for the dfe equalizer: 
estimated_c_dfe=[O 1 0 ]; 
% initial estimate of !SI 
estimated_b_dfe=[O 1]; 
% Initial estimate of IS! 
a_tilda_dfe=ones(1,N-(Nl-1 )); 
for k=1 :N-(Nl-1) 
end 
y_k_dfe=y_dfe(k:k+Nl-1 ); 
z_k_ff_dfe=estimated_c_dfe*y _k_dfe' ; 
if k==1 
a_tilda_k_dfe=[O OJ: 
elseif k==2 
a_tilda_k_dfe=[O a_tilda_dfe(1 )]; 
else 
a_tilda_k_dfe=a_tilda_dfe(k-N2:k-1): 
end 
z_k_fb_dfe=estimated_b_dfe*a_tilda_k_dfe' ; 
z_k_dfe=z_k_ff_dfe-z_k_fb_dfe; 
if z_k_dfe<O 
a_tilda_dfe(k)=-1 ; 
end 
e_k_dfe=training_ s_dfe(k)-z_k_dfe; 
estimated_c_dfe=estimated_c_dfe+delta*e_k_dfe*y_k_dfe; 
estimated_b_dfe=estimated_b_dfe-delta*e_k_dfe*a_tilda_k_dfe; 
% (B) The transmitted information sequence: 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.7. NONLINEAR EQUALIZERS 
info_mse=ones(1,Nt(idx)); 
info_dfe=ones(1,Nt(idx}); 
for i=1 :Nt(idx) 
end 
if (rand<0.5) 
info_mse(i)=-1 ; 
end 
for i=1 :Nt(idx) 
end 
if (rand<0.5) 
info_dfe(i)=-1; 
end 
% The channel output: 
y _mse=filter( actuaL isi, 1 ,info_mse); 
y_dfe=filter(actuaLisi, 1,info_dfe); 
noise_mse=sigma(idx)*randn( 1 ,Nt(idx}); 
noise_dfe=sigma(idx)*randn(1,Nt(idx)); 
y _mse=y _mse+noise_mse; 
y _dfe=y _dfe+noise_dfe; 
% The equalization part: 
counLmse = O; 
counLdfe = O; 
err_counLmse=O; 
err_counLdfe=O; 
z_k_mse_ vec=ones(1,Nt(idx)-2*K); 
z_k_ vec_dfe=zeros(1,Nt(idx)-(Nl-1 )); 
a_tilda..dfe=ones(1,Nt(idx)-(Nl-1 )); 
for k=1 :Nt(idx)-2*K; 
y _k_mse=y _mse(k:k+2*K); 
z_k_mse=estimated_c_mse*y _k_mse' ; 
if z_Lmse<O 
z_k_mse_vec(k)=-1; 
end 
err _counLmse=err_counLmse+0.5*abs(info_mse(k)-z.Jcmse_ vec(k)); 
end 
Pe_mse(idx)= err_counLmse/length(z_k_mse_ vec); 
for k=1 :Nt(idx)-(Nl-1 ); 
end 
y_k_dfe=y_dfe(k:k+Nl-1 ); 
z_k_fLdfe=estimated_c_dfe*y _k_dfe' ; 
if k==1 
a_tilda_k_dfe=[O O]; 
elseif k==2 
a_tilda_k_dfe=[O a_tilda_dfe(1 )]; 
else 
a_tilda_k_dfe=a_tilda_dfe(k-N2:k-1); 
end 
z_k_fb_dfe=estimated_b_dfe*a_tilda_k_dfe' ; 
z_k_dfe=z_k_fLdfe-z_k_fb_dfe; 
if z_k_dfe<O 
a_tilda_dfe(k)=-1 ; 
end 
counLdfe=counLdfe+ 1; 
z_k_ vec_dfe(counLdfe)=a_tilda_dfe(k); 
err_counLdfe=err_counLdfe+0.5*abs(info_dfe(k)-a_tilda_dfe(k)); 
305 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

306 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
end 
Pe_dfe(idx)= err_counLdfe/length(z_k_ vec_dfe); 
clear y; clear noise_mse 
clear y _dfe; clear noise_dfe 
% Plot the results: 
semilogy(SNR_dB,Pe_mse,SNR_dB,Pe_dfe,' --') 
legend(' Linear MSE', 'DFE ') 
ylabel(' P _ e ' ) 
xlabel(' SNR ( dB) ' ) 
Although the DFE outperforms a linear equalizer, it is not the optimum equalizer 
from the viewpoint of minimizing the probability of error in the detection of the in­
formation sequence {ad from the received signal samples {yk} given in (6.4.6). In 
a digital communication system that transmits information over a channel that causes 
ISi, the optimum detector is a maximum-likelihood symbol sequence detector that pro­
duces at its output the most probable symbol sequence {ad for the given received 
sampled sequence {yk}. That is, the detector finds the sequence {ak} that maximizes 
the likelihood fanction 
where p( {yk} I {ak}) is the joint probability of the received sequence {yd condi­
tioned on {ad. The sequence of symbols {ak} that maximizes this joint conditional 
probability is called the maximum-likelihood sequence detector. 
An algorithm that implements maximum-likelihood sequence detection (MLSD) is 
the Viterbi algorithm, which was originally devised for decoding convolutional codes, 
as described in Section 10.3.2. For a description of this algorithm in the context of 
sequence detection in the presence of ISi, the reader is referred to Proakis and Salehi 
(2008), and Forney (1972). 
The major drawback of MLSD for channels with ISi is the exponential behavior in 
computational complexity as a function of the span of the ISi. Consequently, MLSD 
is practical only for channels where the ISi spans only a few symbols and the ISi is 
severe, in the sense that it causes a severe degradation in the performance of a linear 
equalizer or a decision-feedback equalizer. For example, Figure 6.42 illustrates the 
error probability performance of the Viterbi algorithm for a binary PAM signal trans­
mitted through Channel B (see Figure 6.37). For purposes of comparison, we also 
illustrate the probability of error for a DFE. Both results were obtained by computer 
simulation. We observe that the performance of the ML sequence detector is about 
4.5 dB better than that of the DFE at an error probability of 10-4. Hence, this is one 
example where the ML sequence detector provides a significant performance gain on 
a channel with a relatively short ISi span. 
In conclusion, channel equalizers are widely used in digital communication sys­
tems to mitigate the effects of ISi caused by channel distortion. Linear equalizers are 
generally used for high-speed modems that transmit data over telephone channels. For 
wireless (radio) transmission, such as mobile cellular communications and interoffice 
communications, the multipath propagation of the transmitted signal results in severe 
ISi. Such channels require more powerful equalizers to combat the severe ISi. The 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

6.7. NONLINEAR EQUALIZERS 
MLSE 
10-l 
... 
5 
... 
0 
c 10-2 
;.:: 
:g 
No 
.D 
0 
P: 
10-3 
MLSE 
lower and 
upper bounds 
Decision-feedback 
equalizer 
Correct bits fed back 
Detected bits fed back 
10-4 '--'--4--l'-_.__.-'--'-
o 
5 
10 
15 
20 
25 
SNR/bit in dB 
307 
Figure 6.42: Error probability of the Viterbi algorithm for a binary PAM signal trans­
mitted through Channel B in Figure 6.37 
decision-feedback equalizer and the MLSD are two nonlinear channel equalizers that 
are suitable for radio channels with severe ISL 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

308 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
Problems 
6.1 The Fourier transform of the rectangular pulse in Illustrative Problem 6.1 and the 
power spectrum Sv (j) can be computed numerically with MATLAB by using the 
discrete Fourier transform (DFf) or the FFf algorithm. Let us normalize T 
= 1 and 
er 
= 1. Then sample the rectangular pulse g(t) at t = k/10 fork = 0, 1, 2, ... , 127. 
This yields the sequence {gk} of sample values of g(t). Use MATLAB to compute the 
128-point DFf of {gk} and plot the values IGml2 form 
= 0, 1, ... , 127. Also plot 
the exact spectrum I G(j) 12 given in (6.2.13) and compare the two results. 
6.2 Repeat the computation in Problem 6.1 when the pulse g(t) is given as 
{_!_ (1- cos 
2rrt) , 
0 st s T 
g(t) = 
2 
T 
0, 
otherwise 
Let T = 1 for this computation. 
6.3 Write a MATLAB program to compute the power spectrum Sv (j) of the signal 
v ( t) when the pulse g ( t) is {_!_ (1- cos 
2rrt) , 
0 st s T 
g(t) = 
2 
T 
0, 
otherwise 
and the sequence {an} of signal amplitudes has the correlation function given by 
(6.2.14). 
6.4 Use MATLAB to design an FIR linear-phase filter that models a lowpass bandlim­
ited channel that has a  -dB ripple in the passband I i I s 3000 Hz and a stop band 
attenuation of -40 dB for Ii I  3600. Plot the impulse response and the frequency 
response. 
6.5 Write a MATLAB program to design an FIR linear phase filter that models a low­
pass bandlimited channel with desired amplitude response 
A(j) 
= { 1, 
0, 
Iii s 3000 
Iii> 3000 
via the window method, using a Hanning window. 
6.6 Write a MATLAB program that generates the impulse response for the two-path 
multipath channel in Illustrative Problem 6.5 and plot the impulse response for p 
0.95 and a delay of 5 samples. 
6.7 Repeat Illustrative Problem 6.6 when the filter pole position is p 
= 0.9. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
309 
6.8 Write a MATLAB simulation program that implements Channel 1 in Illustrative 
Problem 6.7 and measure the error rate when 10,000 binary data {±1} are transmitted 
through this channel. The channel is corrupted by AWGN with variance (J2 = 0, (J2 = 
0.1, (J2 = 0.2, (J2 = 0.5, and (J2 = 1.0. 
6.9 Repeat Problem 6.8 for the following channel: 
11, 
n = O 
Xn = 
0.25, 
n = ±1 
0, 
otherwise 
6.10 Write a MATLAB program that generates the sampled version of the transmit 
filter impulse response BT ( t) given by ( 6 .5 .9) for an arbitrary value of the roll off factor 
ex. Evaluate and plot BT(n) for ex 
=  and N 
= 
31. 
Also, evaluate and plot the 
magnitude of the frequency response characteristic for this filter. (Use a 4N-point DFf 
of BT(n) by padding BT(n) with 3N zeros.) 
6.11 Write a MATLAB program that computes the overall impulse response of the 
cascade of any transmit filter BT ( n) with its matched filter at the receiver. This com­
putation may be performed by use of the DFT as follows. Pad gy(n) with N - 1 (or 
more) O's and compute the (2N - 1)-point (or more) DFf. This yields Gy(k). Then 
form IGT(k)l2 and compute the (2N - 1)-point inverse DFf of IGy(k)l2. Evaluate 
this overall impulse response for the filter in Problem 6.10 and compare this result with 
the ideal impulse response obtained by sampling Xrc(t) at a rate F5 
= 4/T. 
6.12 Repeat Problem 6.10 for N 
= 21 and N 
= 41. Plot and compare the frequency 
response of the discrete-time filters with those in Problem 6. 10. Describe the major 
differences. 
6.13 Write a MATLAB program that takes a data sequence {Dk}, precodes it for 
a modified duobinary pulse transmission system to produce {pk}, and maps the pre­
coded sequence into the transmitted amplitude levels {ak}. Then, from the transmitted 
sequence, form the received noise-free sequence {bk 
= ak - ak-2} and, using the 
relation given by (6.5.37), recover the data signal {Dk}. Run the program for any pseu­
dorandom data sequence {Dk} for M = 2 and M 
= 4 transmitted amplitude levels and 
check the results. 
6.14 Write a MATLAB program that performs a Monte Carlo simulation of a binary 
PAM communication system that employs a duobinary signal pulse, where the pre­
coding and amplitude sequence {ak} are performed as in Illustrative Problem 6.10. 
Add Gaussian noise to the received sequence {bk} as indicated in (6.5.22) to form the 
input to the detector and use the detection rule in (6.5 .28) to recover the data. Per­
form the simulation for 10,000 bits and measure the bit-error probability for (J2 = 0.1, 
(J2 
= 0.5, and (J2 
= 1. Plot the theoretical error probability for binary PAM with no 
ISi and compare the Monte Carlo simulation results with this ideal performance. You 
should observe some small degradation in the performance of the duo binary system. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

310 
CHAPTER 6. TRANSMISSION THROUGH BANDLIMITED CHANNELS 
6.15 Repeat Problem 6.10 for a sampling rate F5 = 8/T, ex = , and N = 61. Does 
the higher sampling rate result in a better frequency response characteristic-that is, 
a closer match to XrcU)? 
6 .16 For the filter designed in Problem 6 .15, compute and plot the output of the cascade 
of this filter with its matched filter using the procedure described in Problem 6.11. 
Compare this sampled impulse response with the ideal impulse response obtained by 
sampling Xrc(t) at a rate F5 = 8/T. Does this higher sampling rate result in a better 
approximation of the discrete-time filter impulse response to the ideal filter impulse 
response? 
6.17 Write a MATLAB program that generates the sampled version of the transmit 
filter impulse response BT ( t) given by ( 6 .5 .21) for the modified duo binary pulse spec­
ified by (6.5.18). Evaluate and plot gy(n) for N = 31. Also, evaluate and plot the 
magnitude of the frequency response of this filter. 
6.18 Repeat Problem 6.11 for the filter designed in Problem 6 .17. 
6.19 Repeat Problem 6.17 for N = 21 and N = 41. Compare the frequency responses 
of these filters with the frequency response of the filter designed in Problem 6 .17. What 
are the major differences in these frequency response characteristics? 
6.20 Consider the channel-distorted pulse x(t) given in Illustrative Problem 6.11. The 
pulse is sampled at the rate 2 IT and equalized by a zero-forcing equalizer with 2K + 1 = 
13 taps. Write a MATLAB program to solve for the coefficients of the zero-forcing 
equalizer. Evaluate and plot the output of this zero-forcing equalizer for 50 sampled 
values. 
6.21 Repeat Problem 6.20 for a MSE equalizer with No = 0.01, No = 0.1, and No = 
1.0. Compare these equalizer coefficients with those obtained in Problem 6.20 and 
comment on the results as No is varied. 
6.22 Write a general MATLAB program for computing the tap coefficients of an FIR 
equalizer of arbitrary length 2K + 1 based on the MSE criterion, given as input the 
sampled values of the pulse x(t) taken at the symbol rate and the spectral density 
of the additive noise No. Use the program to evaluate the coefficients of an 13-tap 
equalizer when the sampled values of x ( t) are 
1, 
n=O 
0.5, 
n = ±1 
x(nT) = 
0.3, 
n = ±3 
0.1, 
n = ±4 
No = 0.01, and No = 0.1. Also, evaluate the minimumMSE for the optimum equalizer 
coefficients. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
311 
6.23 Repeat Illustrative Problem 6.14 for the ISi channel characteristic shown in Fig­
ure 6.37 Channel A. Compare the equalizer performance with the system performance 
in the absence of ISI-that is, when 
Xn = {1, 
0, 
n=O 
otherwise 
6.24 Repeat Illustrative Problem 6.15 for the ISi channel characteristics 
{0.688, 
n = 0 
Xn = 
0.460, 
n = ±T 
0.227, 
n = ±2T 
6.25 For the channel characteristics given in Problem 6.22, evaluate the coefficients 
of the MSE equalizer and the minimum MSE when the number of equalizer taps is 
21. Compare these equalizer coefficients with the values of the coefficients obtained 
in Problem 6.22 and comment on whether the reduction in the MSE obtained with the 
longer equalizer is sufficiently large to justify its use. 
6.26 The amount of residual ISi at the output of an equalizer can be evaluated by con­
volving the channel-sampled response with the equalizer coefficients and observing the 
resulting output sequence. Write a MATLAB program that computes the output of the 
equalizer of a specified length when the input is the sampled channel characteristic. 
For simplicity, consider the case where the equalizer is a symbol-spaced equalizer and 
the channel-sampled response also consists of symbol-spaced samples. Use the pro­
gram to evaluate the output of a zero-forcing, symbol-spaced equalizer for the channel 
response given in Problem 6.22. 
6.27 Write a MATLAB Monte Carlo simulation program that simulates the digital 
communication system that is modeled in Figure P6.27. The channel is modeled as 
an FIR filter with symbol-spaced values. The MSE equalizer is also an FIR filter with 
symbol-spaced tap coefficients. Training symbols are transmitted initially to train the 
equalizer. In the data mode, the equalizer employs the output of the detector in forming 
the error signal. Perform a Monte Carlo simulation of the system using 1000 training 
(binary) symbols and 10,000 binary data symbols for the channel model given in Prob­
lem 6.22. Use No = 0.01, No = 0.1, and No = 1. Compare the measured error rate 
with that of an ideal channel with no ISi. 
Binary 
{an} 
Channel 
Adaptive 
{an} 
data 
(FIR filter 
+ 
MSE 
source 
model) 
equalizer 
AWGN 
Figure P6.27 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

Copyright 2011 Cengage Learning. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

Chapter 7 
Digital Transmission via 
Carrier Modulation 
7.1 
Preview 
In the two preceding chapters, we considered the transmission of digital information 
through baseband channels. In such a case, the information-bearing signal is trans­
mitted directly through the channel without the use of a sinusoidal carrier. However, 
most communication channels are bandpass channels; hence, the only way to transmit 
signals through such channels is by shifting the frequency of the information-bearing 
signal to the frequency band of the channel. 
In this chapter, we consider four types of carrier-modulated signals that are suitable 
for bandpass channels: amplitude-modulated signals, quadrature-amplitude-modulated 
signals, phase-shift keying, and frequency-shift keying. 
7 .2 
Carrier-Amplitude Modulation 
In baseband digital PAM, the signal waveforms have the form 
(7 .2.1) 
where Am is the amplitude of the mth waveforms and gy(t) is a pulse whose shape 
determines the spectral characteristics of the transmitted signal. The spectrum of the 
baseband signals is assumed to be contained in the frequency band Iii  W, where 
W is the bandwidth of I Gy (j) 12, as illustrated in Figure 7 .1. Recall that the signal 
amplitude takes the discrete values 
Am= (2m-l-M)d, 
m=l,2, ... ,M 
(7 .2.2) 
where 2d is the Euclidean distance between two adjacent signal points. 
313 
Copyright 2011 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not material1y affect the overall learning experience. Cengage Leaming reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

31 4 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
--=---L---=L-/ 
-W 
0 
W 
Figure 7 .1 : Energy density spectrum of the transmitted signal Br ( t) 
Baseband 
signal 
sm(t) 
' 
Bandpass signal 
----1• x f----· 
sm(t) cos 21tfc t 
Carrier 
cos (27t fc t) 
Figure 7.2: Amplitude modulation of a sinusoidal carrier by the baseband PAM signal 
To transmit the digital signal waveforms through a bandpass channel, the baseband 
signal waveforms Sm ( t), m 
= 1, 2, ... , M, are multiplied by a sinusoidal carrier of the 
form cos 2rr Jct, as shown in Figure 7 .2, where Jc is the carrier frequency (Jc > W) 
and corresponds to the center frequency in the passband of the channel. Hence, the 
transmitted signal waveforms are expressed as 
Um(t) = AmBr(t) COS 2rrJct, 
m 
= 1,2, ... ,M 
(7.2.3) 
In the special case when the transmitted pulse shape gy(t) is rectangular-that is, 
gy(t) = {· 
0, 
0  t  T 
otherwise 
the amplitude-modulated carrier signal is usually called amplitude-shift keying (ASK). 
In this case the PAM signal is not bandlimited. 
Amplitude modulation of the carrier cos 2rr Jct by the baseband signal waveforms 
Sm ( t) shifts the spectrum of the baseband signal by an amount Jc and, thus, places the 
signal into the passband of the channel. Recall that the Fourier transform of the carrier 
is [ 8 (j - Jc) + 8 (j + Jc)] I 2. Since multiplication of two signals in the time domain 
corresponds to the convolution of their spectra in the frequency domain, the spectrum 
of the amplitude-modulated signal is 
(7.2.4) 
Thus, the spectrum of the baseband signal Sm (t) = AmBr(t) is shifted in frequency by 
the carrier frequency Jc. The bandpass signal is a double-sideband suppressed-carrier 
(DSB-SC) AM signal, as illustrated in Figure 7 .3. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.2. CARRIER-AMPLITUDE MODULATION 
315 
---t:=--3-1-4=-5J 
-W 
0 
W 
(a) 
A,,/2 
6789:;<=>?@ABCD-/ 
-Jc - W 
-fc 
-fc + W 
O 
fc- W 
fc 
fc + W 
(b) 
Figure 7 .3: Spectra of (a) baseband and (b) amplitude-modulated signals 
-5d 
-3d 
-d 
0 
d 
3d 
5d 
Figure 7 .4: Signal point constellation for PAM signal 
We note that impressing the baseband signal Sm ( t) onto the amplitude of the carrier 
signal cos 2 rr Jc ( t) does not change the basic geometric representation of the digital 
PAM signal waveforms. The bandpass PAM signal waveforms may be represented in 
general as 
Um(t) = Sml./J(t) 
where the signal waveform l./J ( t) is defined as 
t.jJ(t) = Br(t) cos 2rrJct 
and 
m=l,2, . . .  ,M 
(7 .2.5) 
(7.2.6) 
(7.2.7) 
denotes the signal points that take the M values on the real line, as shown in Figure 7.4. 
The signal waveform t.jJ(t) is normalized to unit energy; that is, 
(7.2.8) 
Consequently, 
f oo 
1 Joo 
1 Joo 
_00 Bf (t) cos2 2rr Jct dt = 2 
_00 Bf (t) dt + 2 
_00 Bf (t) cos 4rr Jct dt 
= 1 
(7.2.9) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

316 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
But 
(7.2.10) 
because the bandwidth W of BT ( t) is much smaller than the carrier frequency-that 
is, Jc » W. In such a case, BT ( t) is essentially constant within any one cycle of 
cos4rrJct; hence, the integral in (7.2.10) is equal to zero for each cycle of the inte­
grand. In view of (7.2.10), it follows that 
 f :00 Bf (t) dt = 1 
(7 .2.11) 
Therefore, BT ( t) must be appropriately scaled so that (7 .2 .8) and (7 .2 .11) are satisfied. 
7 .2 .1 
Demodulation of PAM Signals 
The demodulation of a bandpass digital PAM signal may be accomplished in one of 
several ways by means of correlation or matched filtering. For illustrative purposes we 
consider a correlation-type demodulator. 
The received signal may be expressed as 
r(t) = AmBT(t) cos 2rrJct + n(t) 
(7 .2.12) 
where n(t) is a bandpass noise process, which is represented as 
n(t) = nc(t) cos 2rrJct - ns (t) sin 2rr Jct 
(7.2.13) 
and where nc(t) and n5(t) are the quadrature components of the noise. By cross­
correlating the received signal r ( t) with 1.fJ ( t) given by (7 .2 .6), as shown in Figure 7 .5, 
we obtain the output 
f :00 r(t)ljJ(t) dt =Am+ n =Sm+ n 
(7.2.14) 
where n represents the additive noise component at the output of the correlator. 
The noise component has a zero mean. Its variance can be expressed as 
Received -- 
signal r(t) 
Oscillator 
f#()dt 
Signal 
pulse 
generator 
Sampler 
To detector 
Clock 
Figure 7 .5: Demodulation of bandpass digital PAM signal 
(7 .2.15) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.2. CARRIER-AMPLITUDE MODULATION 
317 
where 'I' (j) is the Fourier transform of lfJ ( t) and Sn (j) is the power spectral density 
of the additive noise. The Fourier transform of lfJ ( t) is 
and the power spectral density of the bandpass additive noise process is 
{ No 
If - fc I  W 
Sn(j) 
= 
2 ' 
0, 
otherwise 
(7.2.16) 
(7.2.17) 
By substituting (7.2.16) and (7.2.17) into (7 .2.15) and evaluating the integral, we obtain 
a = No/2. 
It is apparent from (7.2.14), which is the input to the amplitude detector, that the 
probability of error of the optimum detector for the carrier-modulated PAM signal is 
identical to that of baseband PAM. That is, 
PM 
= 2(M
M
- 1) Q ( 
where Eavb is the average energy per bit. 
6(log2 M)Eavb ) 
(M2 - l)No 
(7.2.18) 
Illustrative Problem 7 .1 [PAM Signal Spectrum] In an amplitude-modulated digi­
tal PAM system, the transmitter filter with impulse response gy(t) has a square-root 
raised-cosine spectral characteristic as described in Illustrative Problem 6.8, with a 
rolloff factor ex 
= 0.5. The carrier frequency is fc 
= 40/T. Evaluate and graph the 
spectrum of the baseband signal and the spectrum of the amplitude-modulated signal. 
Figure 7 .6 illustrates these two spectral characteristics. The MATLAB script for this 
computation is given next. 
120 -1,-,-2,-,-3, -,-.,
/,-0, 
100 , 
150 
80 , 
100 
60 , 
40 , 
50 
20 , 
0 
o ._..__,__.___, 
_ _.__.__.___,__..___. 
-1 
-0.5 
0 
0.5 
-50 -40 -30 -20 -10 
0 
10 
20 
30 
40 
50 
f 
f 
Figure 7 .6: Spectra of baseband signal and amplitude-modulated (bandpass) signal 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

318 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
-4111i" ---------------
% MATLAB script for Illustrated Problem 7.1. 
echo on 
T=1; 
delta_ T=T/200; 
alpha=0.5; 
fc=40/T; 
A_m=1; 
t=-5*T +delta_ T:delta_ T:5*T; 
N=length(t); 
for i=1 :N, 
if (abs(t(i)r =T/(2*alpha)), 
% sampling interval 
% rollojf factor 
% carrier frequency 
% amplitude 
% time axis 
g_T(i) = sinc(t(i)/T)*(cos(pi*alpha*t(i)/f)/(1-4*alphaA2*t(W2/fA2)); 
else 
g_T(i) = O; 
end; 
echo off ; 
end; 
echo on; 
G_T=abs(fft(g_ T)); 
u_m=A_m*g_T.*cos(2*pi*fc*t); 
u _m=abs(fft(u_m)); 
% actual frequency scale 
% The value of g_T is 0 at t=Tl(2*alpha) 
% and at t=-Tl(2*alpha). 
% spectrum of g_T 
% the modulated signal 
% spectrum of the modulated signal 
f=-0.5/delta_ T:1/(delta_ T*(N-1 )):0.5/delta_ T; 
% Plotting commands follow. 
figure(1 ); 
plot(f,fftshift(G_ T)); 
axis([-1/T 1/f 0 max(G_T)]); 
figure(2); 
plot(f,fftshift(U _m)); 
--llMllJ§il;ful Nii;t•1:Jl§@I 
Illustrative Problem 7 .2 [Demodulation of Bandpass Digital PAM Signal] 
Figure 7 .5 illustrates the demodulation of a bandpass digital PAM signal, which 
involves cross-correlating the received signal 
r(t) 
= AmBT(t) cos 2rrfct + n(t) 
with the reference waveform 
<jJ(t) 
= gy(t) cos 2rrfct 
where Am is the transmitted signal amplitude,gy(t) is the rectangular signal pulse 
gy(t) 
={ti · 
0, 
0:5t:5T 
otherwise 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.2. CARRIER-AMPLITUDE MODULATION 
and n(t) is a bandpass Gaussian noise process, which is represented as 
n(t) = nc(t) cos 2rrfct - ns(t) sin2rrfct 
and where nc ( t) and ns ( t) are the quadrature components of the noise. 
319 
Let us implement the demodulator in the discrete time, so that the correlator output 
is 
n 
y(nTs) = L r(kTs)tfl(kTs), 
n= 1, 2, ... 
k=O 
where the sampling interval is Ts = T /100 and the carrier frequency Jc = 30/T. The 
noise samples nc (kTs) and ns (kTs) are statistically independent, zero-mean Gaussian 
with variance cr2• Perform the computation and plot y ( nTs) for n = 1, 2, ... , 100 and 
cr2 = 0, cr2 = 0.05, and cr2 = 0.5. 
•H•1lil•1ijt 
For convenience we set T = 1. Figure 7 .7 shows the demodulator output over the entire 
signal interval. First we note that the double frequency terms average out to zero, as 
best observed in the case where cr2 = 0. Secondly, we observe the effect of the additive 
noise on the correlator output as cr2 increases. 
The MATLAB script for the problem is given below. 
---®Ii" ---------------
% MATLAB script for Illustrative Problem 7.2 
Am= 1; 
T = 1; 
Ts = 100ff; 
fc = 30tr; 
t = O:T/100:T; 
Lt = length(t); 
g_T = sqrt(2/f)*ones(1,Lt); 
% Signal Amplitude 
si = g_T .* cos(2*pi*fc*t); 
var = [ 0 0.05 0.5]; 
% Noise variance vector 
for k = 1 : length(var) 
end 
% Generation of the noise components: 
n_c = sqrt(var(k))*randn(1,Lt); 
n_s = sqrt(var(k))*randn(1,Lt); 
noise = n_c. *cos(2*pi*fc*t) - n_s. *sin(2*pi*fc*t); 
r = Am*g_T.*cos(2*pi*fc*t)+noise; 
% The received signal 
y = zeros(1,Lt); 
for i = 1 :Lt 
end 
y(i) = sum(r(1 :i).*si(1 :i)); 
% The correlator output 
% Plotting the results: 
subplot(3, 1,k) 
plot([O 1 :length(y)-1 ],y) 
title([ ' \ s i grna" 2 = 
' ,num2str( var(k))]) 
xlabel( ' n' ) 
ylabel('y(nT_s) ' ) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

320 
CHAPTER 7. DIGITAL T RANSMISSION VIA CARRIER MODULATION 
(J
2 
= 0 
100 
50 
20 
40 
60 
80 
100 
n 
cr
2 
= 0.05 
100 
50 
20 
40 
60 
80 
100 
n 
2 
(J 
= 0.5 
100 
50 
20 
40 
60 
80 
100 
n 
Figure 7 .7: Demodulator output in Illustrative Problem 7.2 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.3. CARRIER-PHASE MODULATION 
321 
7 .3 
Carrier-Phase Modulation 
In carrier-phase modulation the information that is transmitted over a communication 
channel is impressed on the phase of the carrier. Because the range of the carrier phase 
is 0 ::; e < 2rr' the carrier phases used to transmit digital information via digital-phase 
modulation are em = 2rrm/M, form = 0, 1, ... ,M - 1. Thus, for binary phase 
modulation (M = 2), the two carrier phases are eo = 0 and e1 = TT rad. For M-ary 
phase modulation, M = zk, where k is the number of information bits per transmitted 
symbol. 
The general representation of a set of M carrier-phase-modulated signal waveforms 
is 
m = 0,1, ... ,M
- 1 
(7 .3.1) 
where BT(t) is the transmitting filter pulse shape, which determines the spectral char­
acteristics of the transmitted signal, and A is the signal amplitude. This type of digital 
phase modulation is called phase-shift keying (PSK). We note that PSK signals have 
equal energy; that is, 
f 
00 
( 
2rrm) 
= 
_00 A2Bf (t) cos2 
2rr fct + 4 dt 
1 J"" 
1 J"" 
( 
4rrm) 
= 2 
_00 A2Bf(t) dt + 2 
_00 A2Bf (t) cos 4rr fct + 5 dt 
A2 J"" 
= 
-
Bf(t) dt 
2 
-
00 
for all m 
(7.3.2) 
(7.3.3) 
(7 .3.4) 
where E5 denotes the energy per transmitted symbol. The term involving the double­
frequency component in (7 .3 .2) averages out to zero when fc » W, where W is the 
bandwidth of BT ( t). 
When BT ( t) is a rectangular pulse, it is defined as 
BT(t) = ' 
0::; t::; T 
(7.3.5) 
In this case, the transmitted signal waveforms in the symbol interval 0 ::: t ::: T may 
be expressed as (with A = {Es) 
{2E; 
( 
2rrm) 
um(O = \;-r cos 2rr fct + 4 
, 
m = 0,1, ... ,M
- 1 
(7.3.6) 
Note that the transmitted signals given by (7 .3 .6) have a constant envelope, and the 
carrier phase changes abruptly at the beginning of each signal interval. Figure 7 .8 
illustrates a four-phase (M = 4) PSK signal waveform. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

322 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
180°-phase 
0°-phase 
-90°-phase 
shift 
shift 
shift 
t 
t 
t 
!\ (\ f\ (\ (\ (:(\ (\ 
0 
T 
2T 
3T 
4T 
Figure 7 .8: Example of a four-phase PSK signal 
)lo t 
By viewing the angle of the cosine function in (7 .3 .6) as the sum of two angles, we 
may express the waveforms in (7 .3 .1) as 
Um(t) = ffs BT(t) cos ( 2:m) cos 2rrfct - ffs BT(t) sin ( 2:m) sin2rrfct 
where 
= Smcl.fJ1(t) + Smsl.fJ2(t) 
(7.3.7) 
2rrm 
Smc = ffs COS  
re: . 2rrm 
Sms = v.c:.s Sill  
(7.3.8) 
and l.fJ 1 ( t) and l.fJ 2 ( t) are orthogonal basis functions defined as 
l/JI (t) = BT(t) cos 2rr Jct 
1.fJ2(t) = -BT(t) sin2rrfct 
(7.3.9) 
By appropriately normalizing the pulse shape BT ( t), we can normalize the energy of 
these two basis functions to unity. Thus, a phase-modulated signal may be viewed as 
two quadrature carriers with amplitudes that depend on the transmitted phase in each 
signal interval. Hence, digital phase-modulated signals are represented geometrically 
as two-dimensional vectors with components Smc and Sms -that is, 
Sm = ( .JEs cos Z!m 
.JEs sin Z!m ) 
(7.3.10) 
Signal point constellations for M = 2, 4, and 8 are illustrated in Figure 7 .9. We observe 
that binary phase modulation is identical to binary PAM (binary antipodal signals). 
The mapping, or assignment, of k information bits into the M = 2k possible phases 
may be done in a number of ways. The preferred assignment is to use Gray encoding, 
in which adjacent phases differ by one binary digit, as illustrated in Figure 7 .9. Conse­
quently, only a single bit error occurs in the k-bit sequence with Gray encoding when 
noise causes the erroneous selection of an adjacent phase to the transmitted phase. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.3. CARRIER-PHASE MODULATION 
M=2 
01 ·-----
I 
I 
I 
I 
11 -- ----
I 
I 
I 
I 
I 
00 
----· 
10 
M=4 
010. 
uo• 
Figure 7 .9: PSK signal constellations 
111 • 
•101 
M=8 
323 
000 
---tlMQ1".il;f4iiltJ#IW;t•1=JM§I·•--------
Illustrative Problem 7.3 [PSK Waveform] Generate the constant-envelope PSK sig­
nal waveforms given by (7.3.6) for M 
= 8. For convenience, the signal amplitude is 
normalized to unity. 
Figure 7 .10 illustrates the eight waveforms for the case in which Jc 
MATLAB script for this computation is given next. 
0 
0.1 
0.2 
0.3 
0.4 
0.5 
0.6 
0.7 
0.8 
Figure 7 .10: M = 8 constant-amplitude PSK waveforms 
6/T. 
The 
0.9 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

324 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
-4111i" ---------------
% MATLAB script for Illustrative Problem 7.3. 
echo on 
T=1; 
M=B; 
Es=T/2; 
fc=6/T; 
N=100; 
delta_ T=T/(N-1 ); 
t=O:delta_ T:T; 
u0=sqrt(2*Es/T)*cos(2*pi*fc*t); 
ul=sqrt(2*Es/T)*cos(2*pi*fc*t+2*pi/M); 
u2=sqrt(2*Es/T)* cos(2*pi*fc*t+4 * pi/M); 
u3=sqrt(2*Es/T)*cos(2*pi*fc*t+6*pi/M); 
u4=sqrt(2*Es/T)*cos(2*pi*fc*t+8*pi/M); 
u5=sqrt(2*Es/T)*cos(2*pi*fc*t+ 1 O*pi/M); 
u6=sqrt(2*Es/T)*cos(2*pi*fc*t+ 12*pi/M); 
u7=sqrt(2*Es/T)*cos(2*pi*fc*t+ 14*pi/M); 
% plotting commands follow 
subplot(8, 1, 1); 
plot(t,uO); 
subplot(8, 1,2); 
plot(t,ul); 
subplot(8, 1,3); 
plot(t,u2); 
subplot(8, 1,4); 
plot(t,u3); 
subplot(8, 1,5); 
plot(t,u4); 
subplot(8, 1,6); 
plot(t,u5); 
subplot(8, 1, 7); 
plot(t,u6); 
subplot(8, 1,8); 
plot(t,u7); 
% carrier frequency 
% number of samples 
7.3.1 
Phase Demodulation and Detection 
The received bandpass signal in a signaling interval from an AWGN channel may be 
expressed as 
r(t) 
= Um(t) + n(t) 
= Um(t) + nc (t) cos 2rr Jct - n5 (t) sin 2TTfct 
(7.3.11) 
where nc (t) and n5 (t) are the two quadrature components of the additive noise. 
The received signal may be correlated with l/Ji (t) and 1./12 (t) given by (7.3.9). The 
outputs of the two correlators yield the noise-corrupted signal components, which may 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.3. CARRIER-PHASE MODULATION 
325 
be expressed as 
r =Sm+ n 
( rr 
2rrm 
= vEsCOS  +nc 
(7 .3.12) 
where nc and n5 are defined as 
1 Joo 
nc = 2 
_00 gy(t)nc(t) dt 
1 Joo 
ns = 2 
_00 gy(t)ns(t) dt 
(7.3.13) 
The quadrature noise components nc(t) and n5(t) are zero-mean Gaussian ran­
dom processes that are uncorrelated. As a consequence, E(nc) = E(n5) = 0 and 
E ( nc n5) = 0. The variance of nc and n5 is 
E(n ) = E(n;) = o 
(7 .3.14) 
---tll4-il;fu1Wj§;t•1:JM§I·•--------
Illustrative Problem 7 .4 [Demodulation of PSK Signals] 
In this problem, we consider the demodulation of a M = 4 PSK signal waveform 
r(t) as given in (7.3.11), where the transmitted signal is given in (7.3.7) and n(t) is 
the additive Gaussian noise process. The pulse shape gy(t) is rectangular; that is, 
{.ft 0 :5, t :5, T 
gy(t) = 
0 
otherwise 
The demodulator employs two quadrature correlators to compute the two inputs to the 
detector at the sampling time T. 
Yc(t) = J: r(T)l./J1 (T) dT 
Ys(t) = f: r(T)l./Jz(T) dT 
where l./J1 (t) and l./Jz (t) are two orthogonal basis waveforms given by (7.3.9). 
Let us implement the two correlators in discrete time. Thus, the two outputs of the 
correlators are 
n 
Yc(nTs) = L r(kTs )l./J1 (kTs), n = 1, 2, ... 
k=O 
n 
Ys(nTs) = L r(kTs)l./Jz(kTs), n = 1, 2, ... 
k=O 
where the sampling interval is T5 = T /100 and the carrier frequency Jc = 30/T. The 
noise samples nc (kT5) and n5 (kT5) are statistically independent, zero-mean Gaus­
sian with variance u2• Perform the computation and plot Ye (nT5) and Ys (nT5) for 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

326 
CHAPTER 7. DIGITAL T RANSMISSION VIA CARRIER MODULATION 
n 
= 1, 2, ... , 10 0, cr2 
= 0, cr2 
= 0.0 5, cr2 
= 0.5 and each of the phases in a four­
phase PSK signal. 
For convenience we set T 
= 1. Figure 7 .11 illustrates the correlator outputs over the 
entire signal interval for the four possible transmitted phases. Note that the double fre­
quency terms average out to zero, as best observed in the case where cr2 
= 0 .  Secondly, 
we observe the effect of the additive noise on the correlator outputs as cr2 increases. 
The MATLAB script for the problem is given below. 
---41®1@11 ----------------
% MATLAB script for Illustrative Problem 7.4 
M = 
4; 
Es = 
1; 
T = 
1; 
Ts = 
100ff; 
fc = 
30ff; 
t = O:T/1 
OO:T; 
Lt = 
length(t); 
g_T = 
sqrt(2ff)*ones(1,Lt); 
sLl = 
g_T.*cos(2*pi*fc*t); 
sL2 = 
-g_T.*sin(2*pi*fc*t}; 
for m=
0: 3 
% Generation of the transmitted signal: 
s_mc = 
sqrt(Es} * cos(2*pi*m/M); 
s_ms = 
sqrt(Es} * sin(2*pi*m/M); 
% Energy per symbol 
u_m = 
s_mc.*sLl + s_ms.*sL2; 
var = 
[ 
0 0.05 0.5]; 
% Noise variance vector 
if (m == 
2) 
figure 
end 
for k = 
1 : length(var) 
% Generation of the noise components: 
n_c = 
sqrt(var(k}}*randn(1,Lt); 
n_s = 
sqrt(var(k}}*randn(1,Lt); 
% The received signal: 
r = 
u_m + n_c.*cos(2*pi*fc*t) - n_s.*sin(2*pi*fc*t); 
% The correlator outputs: 
y_c = 
zeros(1,Lt); 
y_s = 
zeros(1,Lt); 
for i = 
1 
:Lt 
end 
y_c(i) = 
sum(r(1 
:i).*sL1 (1 
:i)); 
y_s(i) = 
sum(r(1 
:i). *sL2(1 
:i)); 
% Plotting the results: 
subplot(3,2,2*k-1 +mod(m,2)) 
plot([O 
1 
:length(y_c)-1 ],y_c,' • -') 
hold 
plot([O 
1 
:length(y _s)-1 ],y _s) 
title([ '\ sigma" 2 
= ',num2str(var(k}}]} 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.3. CARRIER-PHASE MODULATION 
end 
end 
xlabel(['n (rn=',num2str(m),') ']) 
axis auto 
.!Ao00' 
150 
-50 
0 
10 
20 
80 
40 
50 
60 
70 
80 
.'00,0°180 
50 
? 
, 
-50 
' 
-100 
-150 
0 
10 
20 
80 
40 
50 
60 
70 
80 
o'.o.os,o.o 
150 
100 
 50 
-50 
0 
10 
20 
80 
40 
50 
60 
70 
80 
o'0Q05,0°180' 
50 
-150 
0 
10 
20 
80 
40 
50 
60 
70 
80 
,'.05, •• 0· 
150 
100 
-50 
0 
10 
20 
so 
40 
50 
60 
70 
80 
o':0.5,0.180 
10 
10 
20 
so 
40 
50 
60 
70 
80 
90 
100 
90 
100 
90 
100 
90 
100 
90 
100 
90 
100 
,'.0,0°90' 
100 
80 
60 
 .. 4C 
20 
-20 
0 
10 
20 
90 
40 
50 
60 
70 
,'.0,0°210' 
50 
? · -5C 
-100 
-150 
0 
10 
20 
90 
40 
50 
80 
70 
,'.o.os,0.90 
150 
100 
!"SC 
-50 
0 
10 
10 
so 
40 
50 
60 
70 
o'00.05,0°270' 
20 
-20 
" -4C 
-60 
-80 
-100 
0 
10 
10 
so 
40 
50 
80 
70 
,'.o.5,•·90 
150 
100 
 .. SC 
-50 
0 
10 
10 
31 
40 
50 
60 
70 
o':OS,0•270 
20 
 .. -4C 
-50 
-80 
-100 
0 
10 
10 
31 
40 
50 
60 
70 
Figure 7 .11: Correlator outputs in Illustrative Problem 
327 
80 
90 
100 
80 
90 
100 
80 
90 
100 
80 
90 
100 
80 
90 
100 
80 
90 
100 
7.4 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

328 
CHAPTER 7. DIGITAL T RANSMISSION VIA CARRIER MODULATION 
The optimum detector projects the received signal vector r onto each of the M 
possible transmitted signal vectors {Sm} and selects the vector corresponding to the 
largest projection. Thus, we obtain the correlation metrics 
C(r, Sm) = r ·Sm, 
m = 0, 1, . . .  ,M - 1 
(7 .3.15) 
Because all signals have equal energy, an equivalent detector metric for digital phase 
modulation is to compute the phase of the received signal vector r = ( r1, rz) as 
_1 r2 
er= tan 
-
r1 
and select the signal from the set {Sm} whose phase is closest to er. 
(7 .3 .16) 
The probability of error at the detector for phase modulation in an AWGN channel 
may be found in any textbook that treats digital communications. Because binary phase 
modulation is identical to binary PAM, the probability of error is 
(7 .3.17) 
where Eb is the energy per bit. Four-phase modulation may be viewed as two bi­
nary phase modulation systems on quadrature (orthogonal) carriers. Consequently, the 
probability of a bit error is identical to that for binary phase modulation. For M > 4, 
there is no simple closed-form expression for the probability of a symbol error. A good 
approximation for PM is 
(  
. 
TT) 
PM 
 2Q \j No sm 
M 
2Q ()2kEb 
. 
TT) 

 
-- sm-
No 
M 
(7.3.18) 
where k = log2M bits per symbol. Figure 7.12 illustrates the symbol-error probability 
as a function of the SNR Eb I No. 
The equivalent bit-error probability for M-ary phase modulation is also difficult to 
derive due to the dependence of the mapping of k-bit symbols into the corresponding 
signal phases. When a Gray code is used in the mapping, two k-bit symbols corre­
sponding to adjacent signal phases differ in only a single bit. Because the most proba­
ble errors due to noise result in the erroneous selection of an adjacent phase to the true 
phase, most k-bit symbol errors contain only a single bit error. Hence, the equivalent 
bit-error probability for M-ary phase modulation is well approximated as 
(7.3.19) 
--ti!!IJ§ji;MiW§lij;t•]:'9¥@·1---------
Illustrative Problem 7 .5 [PSK Simulation] Perform a Monte Carlo simulation of an 
M = 4 PSK communication system that models the detector as the one that computes 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.3. CARRIER-PHASE MODULATION 
329 
5 
2 
10-1 
5 
... 
0 
2 
 
10-Z 
'+-< 
0 
- 
5 
 
2 
t 10-3 
Q..::s 
5 
2 
10-4 
5 
2 
10-S 
-4 
0 
4 
8 
12 
16 
20 
24 
SNR/bit, dB 
Figure 7 .12: Probability of a symbol error for M-ary PSK 
the correlation metrics given in (7 .3 .15). The model for the system to be simulated is 
shown in Figure 7 .13. 
Uniform random 
number generator 
4-PSK 
mapper 
Gaussian RNG 
Gaussian RNG 
Compare 
Bit-error 
counter 
Detector 
1--r-..- 2-bit symbol 
Symbol-error 
counter 
Figure 7.13: Block diagram of an M = 4 PSK system for a Monte Carlo simulation 
As shown, we simulate the generation of the random vector r given by (7 .3 .12), which 
is the output of the signal correlator and the input to the detector. 
We begin by 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

330 
CHAPTER 7. DIGITAL T RANSMISSION VIA CARRIER MODULATION 
generating a sequence of quaternary (2-bit) symbols that are mapped into the corre­
sponding four-phase signal points, as shown in Figure 7 .9 for M 
4. To accomplish 
this task, we use a random number generator that generates a uniform random num­
ber in the range (0, 1). This range is subdivided into four equal intervals, (0,0.25), 
(0.25,0.5), (0.5,0.75), and (0.75, 1.0), where the subintervals correspond to the pairs 
of information bits 00, 01, 11, and 10, respectively. These pairs of bits are used to 
select the signal phase vector Sm. 
The additive noise components nc and ns are statistically independent, zero-mean 
Gaussian random variables with variance a-2• For convenience, we may normalize the 
variance to a-2 
1 and control the SNR in the received signal by scaling the signal 
energy parameter Es, or vice versa. 
The detector observes the received signal vector r 
Sm+ n as given in (7 .3 .12) and 
computes the projection (dot product) of r onto the four possible signal vectors Sm. Its 
decision is based on selecting the signal point corresponding in the largest projection. 
The output decisions from the detector are compared with the transmitted symbols, and 
symbol errors and bit errors are counted. 
Figure 7 .14 illustrates the results of the Monte Carlo simulation for the transmission 
of N=lOOOO symbols at different values of the SNR parameter Eb/No, where Eb 
Es /2 is the bit energy. Also shown in Figure 7.14 is the bit-error rate, which is defined 
as Pb PM /2, and the corresponding theoretical error probability, given by (7.3.18). 
The MATLAB scripts for this Monte Carlo simulation are given next. 
10-4 
10-s 
llE 
Simulated bit-error rate 
O 
Simulated symbol-error rate 
- Theoretical bit-error rate 
0 
0 
10-6'---'--'--'--'--'-_,__,_--'--'---' 
0 
2 
3 
4 
5 
6 
7 
8 
9 
10 
Figure 7 .14: Performance of a four-phase PSK system from the Monte Carlo simulation 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.3. CARRIER-PHASE MODULATION 
331 
--41ili" ----------------
% MATLAB script for Illustrative Problem 7.5. 
echo on 
SNRindB 1=0:2:1 O; 
SNRindB2=0:0.1 :1 O; 
for i=1 :length(SNRindBI), 
[pb,ps]=cm_sm32(SNRindBl(i)); 
% simulated bit and symbol error rates 
smld_biLerr _ prb(i)=pb; 
smld_symboLerr_prb(i)=ps; 
echo off ; 
end; 
echo on; 
for i=1 :length(SNRindB2), 
SNR=exp(SNRindB2(i)*log(10)/1 O); 
theo_err_prb(i)=Qfunct(sqrt(2*SNR)); 
echo off 
end; 
echo on ; 
% Plotting commands follow 
semilogy(SNRindBI,smld_biLerr_prb,' * '); 
hold 
% signal-to-noise ratio 
% theoretical bit-error rate 
semilogy(SNRindBI,smld_symboLerr_prb, 'o' ); 
semilogy(SNRindB2,theo_err_prb); 
--41®1i" ----------------
function [pb,ps]=cm_sm32(snr_in_dB) 
% [pb,ps]=cm..sm32(snr_in_dB) 
% 
CM..SM32 finds the probability of bit error and symbol error for the 
% 
given value of snr _in_dB, signal-to-noise ratio in dB. 
N=10000; 
E=1; 
% energy per symbol 
snr=10"(snr_in_dB/10); 
% signal-to-noise ratio 
sgma=sqrt(E/snr)/2; 
% noise variance 
% the signal mapping 
s00=[1 O]; 
sOI=[O 1]; 
sll=[-1 O]; 
slO=[O -1]; 
% generation of the data source 
for i=1 :N, 
temp=rand; 
if (temp<0.25), 
dsourcel (i)=O; 
dsource2(i)=0; 
elseif (temp<0.5), 
dsourcel (i)=O; 
dsource2(i)=1 ; 
elseif (temp<0.75), 
dsourcel (i)=1; 
dsource2(i)=O; 
else 
% a uniform random variable between 0 and 1 
% With probability 114, source output is "00." 
% With probability 114, source output is "01." 
% With probability 114, source output is "10." 
% With probability 114, source output is "11." 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

332 
CHAPTER 7. DIGITAL T RANSMISSION VIA CARRIER MODULATION 
dsourcel(i)=1; 
dsource2(i)=1; 
end; 
end; 
% detection and the probability of error calculation 
numofs ymbolerror=O; 
numofbiterror=O; 
for i=1 :N, 
% The received signal at the detector, for the ith symbol, is: 
n(1 )=gngauss(sgma); 
n(2)=gngauss(sgma); 
if ((dsourcel(i)==O) & (dsource2(i)==0)), 
r=sOO+n; 
elseif ((dsourcel(i)==O) & (dsource2(i)==1 )), 
r=sOl+n; 
elseif ((dsourcel(i)==1) & (dsource2(i)==0)), 
r=slO+n; 
else 
r=sll+n; 
end; 
% The correlation metrics are computed below. 
cOO=dot(r,sOO); 
cOl=dot(r,sOl); 
clO=dot(r,slO); 
cl l=dot(r,sl 1); 
% The decision on the ith symbol is made next. 
c_max:=max:([cOO cOl clO ell]); 
if (cOO==c_max:), 
decis 1 =0; decis2=0; 
elseif (cOl==c_max:), 
decis 1 =0; decis2= 1 ; 
elseif (clO==c_max:), 
decis1=1; decis2=0; 
else 
decis1=1; decis2=1; 
end; 
% Increment the error counter, if the decision is not correct. 
symbolerror=O; 
if (decisi-=dsourcel(i)), 
numofbiterror=numofbiterror+ 1 ; 
symbolerror=1 ; 
end; 
if (decisZ-=dsource2(i)), 
numofbiterror=numofbiterror+ 1 ; 
symbolerror=1; 
end; 
if (symbolerror==1 ), 
numofsymbolerror = numofsymbolerror+ 1 ; 
end; 
end; 
ps=numofsymbolerror/N; 
pb=numofbiterror/(2*N); 
% since there are totally N symbols 
% since 2N bits are transmitted 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.3. CARRIER-PHASE MODULATION 
7 .3 .2 
Differential Phase Modulation and Demodulation 
333 
The demodulation of the phase-modulated carrier signal, as described above, requires 
that the carrier-phase components l./J1(t) and l./Jz(t) be phase locked to the received 
carrier-modulated signal. 
In general, this means that the receiver must estimate 
the carrier-phase offset of the received signal caused by a transmission delay through 
the channel and compensate for this carrier-phase offset in the cross-correlation of the 
received signal with the two reference components 1./11 (t) and l./Jz (t). The estimation 
of the carrier-phase offset is usually performed by use of a phase-locked loop (PLL). 
Thus, we achieve coherent phase demodulation. 
Another type of carrier-phase modulation is differential phase modulation, in which 
the transmitted data are differentially encoded prior to the modulator. In differential 
encoding, the information is conveyed by phase shifts relative to the previous signal 
interval. For example, in binary phase modulation, the information bit 1 may be trans­
mitted by shifting the phase of the carrier by 180 ° relative to the previous carrier phase, 
whereas the information bit 0 is transmitted by a zero-phase shift relative to the phase 
in the preceding signaling interval. In four-phase modulation, the relative phase shifts 
between successive intervals are 0°, 90°, 180°, and 270°, corresponding to the infor­
mation bits 00, 01, 11, and 10, respectively. The generalization of differential encoding 
for M > 4 is straightforward. The phase-modulated signals resulting from this encod­
ing process are called diferentially encoded. The encoding is performed by a relatively 
simple logic circuit preceding the modulator. 
Demodulation and detection of the differentially encoded phase-modulated signal 
may be performed as follows. The received signal phase er 
tan-1 rz I r1 at the detec­
tor is mapped into one of the M possible transmitted signal phases {em} that is closest 
to er. Following the detector is a relatively simple phase comparator that compares the 
phases of the detected signal over two consecutive intervals to extract the transmitted 
information. 
We observe that the demodulation of a differentially encoded phase-modulated 
signal does not require the estimation of the carrier phase. 
To elaborate, suppose 
that we demodulate the differentially encoded signal by cross-correlating r(t) with 
Br(t) cos 2rrfct and -Br(t) sin2rrfct. At the kth signaling interval, the two com­
ponents of the demodulator output may be represented in complex-valued form as 
(7 .3.20) 
where ek is the phase angle of the transmitted signal at the kth signaling interval, 
c/> is the carrier phase, and nk 
nkc + }nks is the noise. Similarly, the received 
signal vector at the output of the demodulator in the preceding signaling interval is the 
complex-valued quantity 
(7.3.21) 
The decision variable for the phase detector is the phase difference between these two 
complex numbers. Equivalently, we can project rk onto rk-1 and use the phase of the 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

334 
CHAPTER 7. DIGITAL T RANSMISSION VIA CARRIER MODULATION 
Received 
signal 
Delay 
byT 
Phase 
comparator 
Figure 7.15: Block diagram of DPSK demodulator 
resulting complex number; that is, 
Output 
decision 
rkr:_1 EseJCBk-ek-1) + ffs eJCBk-<f>lnk-1 + ffs e-JCBk-i-<f>lnk + nknz_1 (7.3.22) 
which, in the absence of noise, yields the phase difference ek - ek-1· Thus, the mean 
value of rkr:_1 is independent of the carrier phase. Differentially encoded PSK sig­
naling that is demodulated and detected as described above is called diferential PSK 
(DPSK). The demodulation and detection of DPSK are illustrated in Figure 7 .15. 
The probability of error for DPSK in an AWGN channel is relatively simple to 
derive for binary (M 
2) phase modulation. The result is 
P2 
.!e-Eb!No 
2 
(7 .3.23) 
The graph of (7 .3 .23) is shown in Figure 7.16. Also shown in this figure is the probability 
10-1 
5 
2 
10-2 
5 
... 
5 
2 
] 
10-3 
'H 
0 
5 
.£ 
2 
r.::= 
 
10-4 
..c 
0 
tl. 
5 
r:.."" 
2 
10-5 
5 
2 
10--{i 
0 
2 
4 
6 
8 
SNR/bit, dB 
10 
12 
14 
Figure 7.16: Probability of error for binary PSK and DPSK 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.3. CARRIER-PHASE MODULATION 
335 
of error for binary PSK. We observe that at error probabilities below io-4, the differ­
ence in SNR between binary PSK and binary DPSK is less than 1 dB. 
For M > 2, the error probability performance of a DPSK demodulator and detector 
is extremely difficult to evaluate exactly. The major difficulty is encountered in the 
determination of the probability density function for the phase of the random variable 
rkrt_1, given by (7 .3.22). However, an approximation to the performance of DPSK is 
easily obtained, as we now demonstrate. 
Without loss of generality, suppose the phase difference ek - ek-1 
0. Further­
more, the exponential factors e-j(ek-i -</>l and ejCek-</>l in (7 .3.22) can be absorbed into 
the Gaussian noise components nk- l and nk without changing their statistical proper­
ties. Therefore, rkrL1 in (7.3.22) can be expressed as 
(7 .3.24) 
The complication in determining the probability density function of the phase is the 
term nk nt_ 1. However, at SNRs of practical interest, the term nk nL 1 is small relative 
to the dominant noise term $s ( nk + nt_ 1). If we neglect the term nk nt_ 1 and we 
also normalize rkrt_1 by dividing through by .,[E;, the new set of decision metrics 
becomes 
x 
ffs + Re(nk + nt_1) 
y 
Im(nk + nt_1) 
(7 .3.25) 
The variables x and y are uncorrelated Gaussian random variables with identical vari­
ances er 
No. The phase is 
er 
tan-1 y 
x 
(7.3.26) 
At this stage we have a problem that is identical to the one for phase-coherent demod­
ulation. The only difference is that the noise variance is now twice as large as in the 
case of PSK. Thus we conclude that the performance ofDPSK is 3 dB poorer than that 
for PSK. This result is relatively good for M  4, but it is pessimistic for M 
2, in 
the sense that the loss in binary DPSK relative to binary PSK is less than 3 dB at large 
SNR. 
---tll4-il;tfilrijij;J•):)!§i·•---------
Illustrative Problem 7 .6 [DPSK Encoder] Implement a differential encoder for the 
case of M 
8 DPSK. 
The signal points are the same as those for PSK shown in Figure 7.9. However, for 
DPSK these signal points represent the phase change relative to the phase of the previ­
ous transmitted signal points. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

336 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
The MATLAB script for implementing the differential encoder is given next. 
---tl&li" ---------------
% MATLAB script for Illustrative Problem 7.6. 
mapping=[O 1 3 2 7 6 4 5]; 
% for Gray mapping 
M=B; 
E=1; 
sequence=[O 1 0 
0 1 1 
0 0 1 
1 1 
[e]=cm_dpske(E,M,mapping,sequence); 
1 1 0 
0 0 O]; 
% e is the diferential encoder output. 
Illustrative Problem 7.7 [Demodulation and Detection of DPSK Signals] 
The demodulator and detector for DPSK signals is shown in Figure 7 .15. 
The 
quadrature correlators are identical to those employed in PSK (see Illustrative Prob­
lem 7.4). Using the two correlator outputs, implement a differential detector for the 
case of M = 8 DPSK. 
The MATLAB script for implementing differential detector is given below. 
---tl&li" ---------------
% MATLAB script for Illustrative Problem 7.7 
M = 8; 
mapping=[O 1 3 2 7 6 4 5]; 
Es = 1; 
T = 1; 
Ts = 100ff; 
fc = 30ff; 
t = T/100:T/100:2*T; 
Lt = length(t}; 
g_T = sqrt(2tr)*ones(1,Lt}; 
si_l = g_T.*cos(2*pi*fc*t); 
sL2 = -g_T.*sin(2*pi*fc*t); 
var = 0.05; 
% Determine the diferential phase: 
% Gray mapping 
% Energy per symbol 
% Noise variance 
m = 2; 
% 0 <= m <= 7 
theta_d = 2*pi*m/M; 
% Assuming the phase of the first txed symbol, i.e., the reference phase is 0: 
s_mcl = sqrt(Es) 
• 1; 
s_msl = sqrt(Es} 
• O; 
u_ml = s_mcl *sL1(1 :Lt/2) + s_msl *sL2(1 :Lt/2); 
s_mc2 = sqrt(Es} * cos(theta_d); 
s_ms2 = sqrt(Es) * sin(theta_d); 
u_m2 = s_mc2*sL1(1 :Lt/2) + s_ms2*sL2(1 :Lt/2); 
% Generation of the noise components: 
n_c = sqrt(var}*randn(1,Lt}; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.3. CARRIER-PHASE MODULATION 
n_s 
= sqrt(var)*randn(1,Lt); 
% The received signals: 
rl 
= u_ml +n_c(1 :Lt/2).*cos(2*pi*fc*t(1 :Lt/2)) - n_s(1 :Lt/2).*sin(2*pi*fc*t(1 :Lt/2)); 
337 
r2 
= u_m2+n_c(Lt/2+ 1:Lt).*cos(2*pi*fc*t(Lt/2+1 :Lt)) -
n_s(Lt/2+ 1:Lt).*sin(2*pi*fc*t(Lt/2+1 :Lt)); 
r 
= [rl r2]; 
% Detection of the mapped symbol and diferential phase: 
[detect phase_d] 
= dd_dpsk(r,M,mapping); 
11u.11;m•1#1W;t•1:'93®·•---------
Illustrative Problem 7 .8 Perform a Monte Carlo simulation of an M 
4 DPSK com­
munication system. The model for the system to be simulated is shown in Figure 7 .17. 
UnifonnRNG 
M=4DPSK 
mapper 
Gaussian RNG 
Gaussian RNG 
Compare 
Symbol-error 
counter 
Delay 
M=4 
DPSK 
detector 
1--.-. 
2-bit 
output 
Figure 7 .17: Block diagram of M 
4 DPSK system for the Monte Carlo simulation 
The uniform random number generator (RNG) is used to generate the pairs of bits 
{00, 01, 11, 10}, as described in Illustrative Problem 7.5. Each 2-bit symbol is mapped 
into one of the four signal points Sm 
[cos rrm/2 sin rrm/2], m 
0, 1, 2, 3, by 
the differential encoder. Two Gaussian RNG are used to generate the noise components 
[nc 
n5 ]. Then the received signal-plus-noise vector is 
r 
[cos rr;n + nc sin rr;n + ns] 
The differential detector basically computes the phase difference between rk and Yk- I . 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

338 
CHAPTER 7. DIGITAL T RANSMISSION VIA CARRIER MODULATION 
Mathematically, this computation can be performed as in (7.3.22)-that is, 
rkr:_1 
(rck + jrsd(rck-1 -jrsk-1) 
rckrck-1 +rskrsk-1 +j(rskrck-1-rckrsk-1) 
Xk + j Yk 
and ek 
tan-1 (Ykl Xk) is the phase difference. The value of ek is compared with 
the possible phase differences {0°, 90°, 180°, 270°}, and a decision is made in favor 
of the phase that is closest to ek. The detected phase is then mapped into the pair of 
information bits. The error counter counts the symbol errors in the detected sequence. 
Figure 7 .18 illustrates the results of the Monte Carlo simulation for the transmis­
sion of N=l0,000 symbols at different values of the SNR parameter Eb/No, where 
Eb 
E5/2 is the bit energy. Also shown in Figure 7.18 is the theoretical value of the 
symbol error rate based on the approximation that the term nk nk-l is negligible. We 
observe from Figure 7.18 that the approximation results in an upper bound to the error 
probability. 
Figure 7.18: Performance of four-phase DPSK system from Monte Carlo simulation 
(the solid curve is an upper bound based on approximation that neglects the noise term 
nlnk-1) 
The MATLAB scripts for this Monte Carlo simulation are given next. 
---411113' --
 
% MATLAB script for Illustrative Problem 7.8. 
echo on 
SNRindB1=0:2:12; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.3. CARRIER-PHASE MODULATION 
SNRindB2=0:0.1 :12; 
for i=1 :length(SNRindBl), 
srnld_err_prb(i)=cm_sm34(SNRindB 1 (i)); 
echo off 
end; 
echo on ; 
for i=1 :length(SNRindB2), 
SNR=exp(SNRindB2(i)*log( 10)/10); 
theo_err _ prb(i)=2*Qfunct( sqrt(SNR)); 
echo off 
end; 
echo on ; 
% Plotting commands follow 
semilogy(SNRindB 1, srnld_ err_ prb, ' * ' ) ; 
hold 
semilogy(SNRindB2,theo_err_prb); 
% simulated error rate 
% signal-to-noise ratio 
% theoretical symbol error rate 
339 
---®Ii" ----------------
function [p ]=cm_sm34( snr _in_dB) 
% [p ]=cm...sm34( snr _in...dB) 
% 
CM__sM34 finds the probability of error for the given 
% 
value of snr ..in...dB, signal-to-noise ratio in dB. 
N=10000; 
E=1; 
% energy per symbol 
snr=10J(snr_in_dB/10); 
% signal-to-noise ratio 
sgma=sqrt(E/(4*snr)); 
% noise variance 
% Generation of the data source follows. 
for i=1 :2*N, 
temp=rand; 
if (temp<0.5), 
dsource(i)=O; 
% 
else. 
else 
dsource(i)=1 ; 
end; 
end; 
% a uniform random variable between 0 and 1 
% With probability 112, source output is 
"O ." 
% With probability 112, source output is "1 " 
% Diferential encoding of the data source follows 
mapping=[O 1 3 2]; 
M=4; 
[difLenc_output] = cm_dpske(E,M,mapping,dsource); 
% Received signal is then 
for i=1 :N, 
[n(1) n(2)]=gngauss(sgma); 
r(i, :)=dif_enc_output(i, :)+n; 
end; 
% detection and the probability of error calculation 
numoferr=O; 
prev _ theta=O; 
for i=1 :N, 
theta=angle(r(i, 1 )+j*r(i,2)); 
delta_ theta=mod(theta-prev _ theta,2*pi); 
if ((delta_theta<pi/4) I (delta_ theta> 7*pi/4)), 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

340 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
decis=[O OJ; 
elseif (delta_ theta <3*pi/4), 
decis=[O 1 ]; 
elseif (delta_theta<5*pi/4) 
decis=[1 1 ]; 
else 
decis=[1 O]; 
end; 
prev _ theta=theta; 
% Increase the error counter, if the decision is not correct. 
if ((decis(1 r =dsource(2*i-1 )) I (decis(2f =dsource(2*i))), 
numoferr=numoferr+ 1 ; 
end; 
end; 
p=numoferr/N; 
---tl®li" ----------------
function [enc_comp] = cm_dpske(E,M,mapping,sequence); 
% [enc_comp] 
cm-<ipske(E,M,mapping,sequence) 
% 
CMJ>PSKE diferentially encodes a sequence. 
% 
% 
% 
E is the average energy, M is the number of constellation points, 
and mapping is the vector defining how the constellation points are 
allocated. Finally, "sequence" is the uncoded binary data sequence. 
k=log2(M}; 
N=length(sequence); 
% If N is not divisible by k, append zeros, so that it is ... 
remainder=rem(N ,k}; 
if (remainder-=0), 
for i=N+1 :N+k-remainder, 
sequence(i)=O; 
end; 
N=N+k-remainder; 
end; 
theta=O; 
for i=1 :k:N, 
index=O; 
for j=i:i+k-1, 
index=2*index +sequenceU); 
end; 
% Initially, assume that theta=O. 
index=index + 1 ; 
theta=mod(2*pi*mapping(index)/M+theta,2*pi); 
enc_comp((i+k-1)/k,1 )=sqrt(E}*cos(theta); 
enc_comp((i+k-1 )/k,2)=sqrt(E}*sin(theta); 
end; 
7.4 
Quadrature Amplitude Modulation 
A quadrature-amplitude-modulated (QAM) signal employs two quadrature carriers, 
cos 2 rr f ct and sin 2 TT fc t, each of which is modulated by an independent sequence 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.4. QUADRATURE AMPLITUDE MODULATION 
341 
of information bits. The transmitted signal waveforms have the form 
Um(t) = AmcBT(t) cos 2rrfct + AmsBT(t) sin2rrfct, 
m = 1,2, ... ,M 
(7.4.1) 
where {Ame} and {Ams} are the sets of amplitude levels that are obtained by mapping 
k-bit sequences into signal amplitudes. For example, Figure 7.19 illustrates a 16-QAM 
signal constellation that is obtained by amplitude modulating each quadrature carrier by 
M = 4 PAM. In general, rectangular signal constellations result when two quadrature 
carriers are each modulated by PAM. 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
Figure 7.19: M = 16-QAM signal constellation 
More generally, QAM may be viewed as a form of combined digital amplitude 
and digital phase modulation. Thus the transmitted QAM signal waveforms may be 
expressed as 
Umn(t) = AmBT(t) cos(2rrfct + 8n), 
m=l,2, ... ,M1, 
n=l,2, ... ,M2 
(7.4.2) 
If M1 = 2k1 and Mz = 2k2, the combined amplitude- and phase-modulation method 
results in the simultaneous transmission of k1 + kz = log2M1M2 binary digits occurring 
at a symbol rate Rb I ( k i + kz). Figure 7 .20 illustrates the functional block diagram of 
a QAM modulator. 
Binary 
data 
Serial-to­
parallel 
converter 
Transmitting 
filter 
gT(t) 
Oscillator 
Transmitting 
filter 
gT(t) 
Balanced 
modulator 
90° phase 
shift 
Balanced 
modulator 
Figure 7 .20: Functional block diagram of modulator for QAM 
Transmitted 
QAM signal 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

342 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
M=64 
t"- _ .. --- ----
-e--•--•--T 
I 
M=32 
I 
+ 
• 
.. ---.-
--- ---
• 
+ 
/ 
' 
I 
/ 
M= 16 ' 
I 
t 
/ 
' 
t 
.. 
·--· 
-• --T 
.. 
I 
I 
I 
I 
I 
I 
M=81 
I 
I 
• 
• 
T--t- -r---t 
• 
• 
I 
I 
I 
I 
+-- 
1M=4 
I 
I 
• 
' 
_._ _ __. 
' 
• 
I 
I 
I 
I 
I 
I 
I 
I 
.._ ____ 
I 
I 
I 
' 
' 
.. __ .. 
JI 
' 
I 
' 
/ 
I 
I 
' 
/ 
I 
' 
/ 
T 
• 
.. - --+- -- ---
• 
T 
I 
I 
M=8 
M= 16 
L --e---e--•--·--.. ---+----l 
(a) 
(b) 
(c) 
Figure 7.21: (a) Rectangular and (b), (c) circular QAM signal constellations 
It is clear that the geometric signal representation of the signals given by (7.4.1) 
and (7 .4 .2) is in terms of two-dimensional signal vectors of the form 
Sm = ( .JEs Ame 
.JEs Ams), 
m = 1,2, .
.
.
 ,M 
(7.4.3) 
Examples of signal space constellations for QAM are shown in Figure 7 .21. Note that 
M = 4 QAM is identical to M = 4 PSK. 
7 .4 .1 
Demodulation and Detection of QAM 
Let us assume that a carrier-phase offset is introduced in the transmission of the signal 
through the channel. In addition, the received signal is corrupted by additive Gaussian 
noise. Hence, r(t) may be expressed as 
r(t) = AmcBT(t) cos(2rrfct + cp) + AmsBT(t) sin(2rrfct + cp) + n(t) 
(7.4.4) 
where cp is the carrier-phase offset and 
n(t) = nc(t) cos 2rrfct - ns (t) sin 2rrfct 
The received signal is correlated with the two phase-shifted basis functions 
l./J1(t) = gy(t)cos(2rrfct + cp) 
l./Jz(t) = gy(t) sin(2rrfct + cp) 
(7.4.5) 
as illustrated in Figure 7 .22, and the outputs of the correlators are sampled and passed 
to the detector. The PLL shown in Figure 7.22 estimates the carrier-phase offset cp 
of the received signal and compensates for this phase offset by phase shifting I/Ji (t) 
and l./J 2 ( t) as indicated in (7 .4 .5). The clock shown in Figure 7 .22 is assumed to be 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.4. QUADRATURE AMPLITUDE MODULATION 
90 phase 
shift 
f()dt 
Sampler 
Clock 
Sampler 
Compute 
distance 
metrics D(sm) 
Figure 7 .22: Demodulation and detection of QAM signals 
343 
Output 
decision 
synchronized to the received signal so that the correlator outputs are sampled at the 
proper instant in time. Under these conditions, the outputs from the two correlators are 
r1 = Ame + nc cos cf> - ns sin cf> 
r2 = Ams + nc sin cf> + ns cos cf> 
(7.4.6) 
where 
1 fT 
nc = 2 
0 nc(t)gy(t) dt 
ns =  J: ns(t)gy(t) dt 
(7.4.7) 
The noise components are zero-mean, uncorrelated Gaussian random variables with 
variance No/2. 
The optimum detector computes the distance metrics 
D(r,sm) =Ir - sml2, 
where rt = ( r1, r2) and Sm is given by (7.4.3). 
m=l,2, . . .  ,M 
(7.4.8) 
----t11•i•;MINj;t•'=''a®·•---------
Illustrative Problem 7 .9 [Demodulation of QAM Signals] 
The demodulator for a QAM signal is shown in Figure 7 .22. It employs two quadra­
ture correlators that cross-correlate the received signal given by (7.4.4) with the phase 
quadrature basis functions in (7 .4 .5). The pulse shape BT ( t) is rectangular; that is, 
BT(t) 
 {f 
Q:5,t:5,T 
otherwise 
Let us implement the two correlators in discrete time. Thus, the two outputs of the 
correlators are 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

344 
CHAPTER 7. DIGITAL T RANSMISSION VIA CARRIER MODULATION 
n 
Y c ( n Ts) = L r ( k Ts) l}J 1 ( k Ts), 
n = 1, 2, ... 
k=O 
n 
Ys(nTs) = L r(kTs )l}J2(kTs ), 
n = 1, 2, ... 
k=O 
where the sampling interval is Ts = T / 100 and the carrier frequency Jc 
= 30 / T. The 
carrier phase</> may be selected to be uniformly distributed in the interval (0, 2rr), and 
the additive noise samples nc(kTs) and ns (kTs) are statistically independent, zero­
mean Gaussian with variance a-2• Perform the computation and plot y c ( n Ts) and 
Ys (nTs) for n = 1, 2, ... , 100, a-2 
= 0, a-2 
= 0.0 5, a-2 
= 0.5 for the M 
= 8 QAM 
signal constellation shown in Figure 7.21(b). We may select any one of the eight signal 
points for transmission. 
The position of the eight signal points are (1, 1), (1, -1), (-1, 1), (-1, -1), (1 + 
J3, 0), (-1, -J3, 0), (0, 1 + J3), and (0, -1 - J3). For convenience, we set T = 1. 
Figure 7.23 illustrates the correlator outputs over the signal interval when the transmit­
ted symbol is (1, -1) . Note that the double frequency terms average out to zero, as 
best observed in the case where a-2 
= 0. Furthermore, we observe the effect of the 
additive noise on the correlator output as a-2 increases. 
The MATLAB script for the problem is given below. 
% MATLAB script for Illustrative Problem 7.9 
M 
= 8; 
Es 
= 1; 
T 
= 1; 
Ts 
= 100ff; 
fc 
= 30ff; 
t 
= O:T/1 OO:T; 
Lt 
= length(t); 
A_mc 
= 1/sqrt(Es); 
A_ms 
= -1/sqrt(Es); 
g_ T = sqrt(2/f)*ones(1,Lt); 
phi 
= 2*pi*rand; 
sLl 
= g_T.*cos(2*pi*fc*t + phi); 
sL2 
= g_ T. *sin(2*pi*fc*t + phi}; 
var 
= [ 0 0.05 0.5]; 
for k 
= 1 : length(var) 
% Energy oer symbol 
% Signal Amplitude 
% Signal Amplitude 
% Noise variance vector 
% Generation of the noise components: 
n_c 
= sqrt(var(k}}*randn(1,Lt}; 
n_s 
= sqrt(var(k}}*randn(1,Lt}; 
noise 
= n_c. *cos(2*pi*fc+t) - n_s.*sin(2*pi*fc+t); 
% The received signal 
r 
= A_mc*g_T.*cos(2*pi*fc*t+phi) + A_ms*g_T.*sin(2*pi*fc*t+phi} + noise; 
% The correlator outputs: 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.4. QUADRATURE AMPLITUDE MODULATION 
end 
y_c 
= zeros(1,Lt); 
y_s 
= zeros(1,Lt); 
for i 
= 1 :Lt 
end 
y_c(i) 
= sum(r(1 :i).*sL1(1 :i)); 
y_s(i) 
= sum(r(1 :i).*sL2(1 :i)); 
% Plotting the results: 
subplot(3, 1,k) 
plot([O 1 :length(y _c)-1 ],y _c,' • -') 
hold 
plot([O 1 :length(y_s)-1],y_s) 
title([ ' \ s i grna" 2 
= ' ,num2str( var(k))]) 
xlabel( ' n ') 
axis auto 
100 
cr2 = 0 
-100._-'- 
0 
20 
40 
60 
80 
100 
n 
cr2 = 0.05 
100 
0 
-100._-'--'--'-
-'--' 
0 
20 
40 
60 
80 
100 
n 
(l = 0.5 
100 
0 
-100 !"#$% 
0 
20 
40 
60 
80 
100 
n 
Figure 7.23: Correlator outputs in Illustrative Problem 7 .9 
345 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

346 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
7.4.2 
Probability of Error for QAM in an AWGN Channel 
In this section, we consider the performance of QAM systems that employ rectangular 
signal constellations. Rectangular QAM signal constellations have the distinct advan­
tage of being easily generated as two PAM signals impressed on phase quadrature 
carriers. In addition, they are easily demodulated. 
For rectangular signal constellations in which M = 2k, where k is even, the QAM 
signal constellation is equivalent to two PAM signals on quadrature carriers, each hav­
ing JM= 2k/Z signal points. Because the signals in the phase quadrature components 
are perfectly separated by coherent detection, the probability of error for QAM is eas­
ily determined from the probability of error for PAM. Specifically, the probability of a 
correct decision for the M-ary QAM system is 
(7.4.9) 
where P -JM is the probability of error of a JM-ary PAM with one-half the average 
power in each quadrature signal of the equivalent QAM system. 
By appropriately 
modifying the probability of error for M-ary PAM, we obtain 
(7.4.10) 
where Eav /No is the average SNR per symbol. Therefore, the probability of a symbol 
error for the M-ary QAM is 
(7.4.11) 
We note that this result is exact for M = 2k when k is even. On the other hand, when 
k is odd, there is no equivalent JM-ary PAM system. This is no problem, however, 
because it is rather easy to determine the error rate for a rectangular signal set. If we 
employ the optimum detector that bases its decisions on the optimum distance metrics 
given by (7 .4 .8), it is relative! y straightforward to show that the symbol-error probabil­
ity is tightly upper bounded as 
PM  1 - [ 1 - 2Q ( 
3Eav ) J 
2 
(M - l)No 
3kEavb ) 
(M - l)No 
(7.4.12) 
for any k  1, where Eavb I No is the average SNR per bit. The probability of a symbol 
error is plotted in Figure 7 .24 as a function of the average SNR per bit. 
Illustrative Problem 7 .10 [QAM Simulation] Perform a Monte Carlo simulation of 
an M = 16-QAM communication system using a rectangular signal constellation. The 
model of the system to be simulated is shown in Figure 7 .25. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.4. QUADRATURE AMPLITUDE MODULATION 
10-1 
5 
2 
10-2 
 
5 
0 
2 
 
3 
I'< 
10-
 
O'd 
5 
10-S 
5 
2 
10-6 	
 
-6 -4 -2 
0 
2 
4 
6 
8 
10 12 14 16 18 20 
SNR/bit, dB 
Figure 7.24: Probability of a symbol error for QAM 
UniformRNG 
4-bit symbol 
M= 16-QAM 
signal selector 
Gaussian RNG 
r c 
Gaussian RNG 
Compare 
Symbol-error 
counter 
Detector 
--- 4-bit symbol 
347 
Figure 7 .25: Block diagram of an M 
= 16-QAM system for the Monte Carlo simula­
tion 
The uniform random number generator (RNG) is used to generate the sequence of infor­
mation symbols corresponding to the 16 possible 4-bit combinations of bi, b2, b3, b4. 
The information symbols are mapped into the corresponding signal points, as illustrated 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

348 
CHAPTER 7. DIGITAL T RANSMISSION VIA CARRIER MODULATION 
• 
• 
3 
• 
• 
2 
• 
• 
1 
• 
• 
-3 -2 -1 
2 
3 
• 
• -1 
• 
• 
-2 
• 
.-3 
• 
• 
Figure 7.26: M = 16-QAM signal constellation for the Monte Carlo simulation 
in Figure 7.26, which have the coordinates [Ame, Ams]. Two Gaussian RNG are used 
to generate the noise components [ ne, ns]. The channel-phase shift cf> is set to 0 for 
convenience. Consequently, the received signal-plus-noise vector is 
r = [Ame + ne 
Ams + ns] 
The detector computes the distance metrics given by (7.4.8) and decides in favor of 
the signal point that is closest to the received vector r. The error counter counts the 
symbol errors in the detected sequence. Figure 7.27 illustrates the results of the Monte 
Carlo simulation for the transmission of N = 10 ,000 symbols at different values of the 
SNR parameter Eb I No, where Eb 
= Es I 4 is the bit energy. Also shown in Figure 7.27 
is the theoretical value of the symbol-error probability given by (7.4.10) and (7.4.11). 
10-2 
10·3 
10·4 
10-5 
10·6 
10·7 '--'-	-'--' 
0 
5 
10 
15 
Figure 7.27: Performance of M = 16-QAM system from the Monte Carlo simulation. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.4. QUADRATURE AMPLITUDE MODULATION 
349 
The MATLAB scripts for this problem are given next. 
---tlili" ----------------
% MATLAB script for Illustrative Problem 7.10. 
echo on 
SNRindB 1=0:2:15; 
SNRindB2=0:0.1 :15; 
M=16; 
k=log2(M); 
for i=1 :length(SNRindBl), 
srnld_err _prb(i)=cm_sm41(SNRindB1 (i)); 
echo off; 
% simulated error rate 
end; 
echo on ; 
for i=1 :length(SNRindB2), 
SNR=exp(SNRindB2(i)*log(10)/1 O); 
% signal-to-noise ratio 
end; 
% theoretical symbol error rate 
theo_err_prb(i)=4 *Qfunct(sqrt(3*k*SNR/(M-1 ))); 
echo off 
echo on ; 
% Plotting commands follow. 
semilogy(SNRindBl,srnld_err_prb,' * '); 
hold 
semilogy(SNRindB2,theo_err_prb); 
---tlili" ----------------
function [p]=cm_sm41 ( snr _in_dB) 
% [p]=cm..sm41(snr_in...dB) 
% 
CM..SM41 finds the probability of error for the given 
% 
value of snr_in...dB, SNR in dB. 
N=10000; 
d=1; 
Eav=10*d"2; 
snr=10" (snr_in_dB/1 O); 
sgma=sqrt(Eav/(8* snr)); 
M=16; 
% Generation of the data source follows. 
for i=1 :N, 
% min. distance between 
% energy per symbol 
% SNR per bit (given) 
% noise variance 
symbols 
temp=rand; 
% a uniform R. V. between 0 and 1 
dsource(i)=1 +fioor(M*temp); 
% a number between 1 and 16, uniform 
end; 
% Mapping to the signal constellation follows. 
mapping=[-3*d 3*d; 
-d 
3*d; 
d 
3*d; 
3*d 
3*d; 
-3*d 
d' ' 
-d 
d; 
d 
ct· ' 
3*d 
ct· ' 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

350 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
-3*d -d; 
-d -d; 
d -d; 
3*d -d; 
-3*d -3*d; 
-d -3*d; 
d -3*d; 
3*d -3*d]; 
for i=1 :N, 
qam_sig(i, :)=mapping(dsource(i), :); 
end; 
% received signal 
for i=1 :N, 
[n(1) n(2)]=gngauss(sgma); 
r(i, :)=qam_sig(i, :)+n; 
end; 
% detection and error probability calculation 
numoferr=O; 
for i=1 :N, 
% Metric computation follows. 
for j=1 :M, 
metricsU)=(r(i, 1)-mappingU,1 W2+(r(i,2)-mappingU,2W2; 
end; 
[min_metric decis] = min(metrics); 
if (decis-=dsource(i)), 
numoferr=numoferr+ 1 ; 
end; 
end; 
p=numoferr/(N); 
7 .5 
Carrier-Frequency Modulation 
We have described methods for transmitting digital information by modulating either 
the amplitude of the carrier, the phase of the carrier, or the combined amplitude and 
phase. Digital information can also be transmitted by modulating the frequency of the 
carrier. 
As we will observe from our treatment below, digital transmission by frequency 
modulation is a modulation method that is appropriate for channels that lack the phase 
stability that is necessary to perform carrier-phase estimation. In contrast, the lin­
ear modulation methods that we have introduced-namely, PAM, coherent PSK, and 
QAM -require the estimation of the carrier phase to perform phase-coherent detection. 
7.5.1 
Frequency-Shift Keying 
The simplest form of frequency modulation is binary frequency-shift keying (FSK). 
In binary FSK we employ two different frequencies-say, f1 and f2 
= f1 + !).j-to 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.5. CARRIER-FREQUENCY MODULATION 
351 
transmit a binary information sequence. The choice of frequency separation (j.j = 
fz -Ji is considered later. Thus the two signal waveforms may be expressed as 
rm 
uz (t) = \j T; cos2rrfzt, 
(7 .5.1) 
where Eb is the signal energy per bit and Tb is the duration of the bit interval. 
More generally, M-ary FSK may be used to transmit a block of k = log2M bits per 
signal waveform. In this case, the M signal waveforms may be expressed as 
{2E; 
f 
Um(t) =\J r cos(2rrfct+2rrm/j. t), 
m=O,l, ... ,M-1, 
0  t  T 
(7.5.2) 
where Es = kEb is the energy per symbol, T = kTb is the symbol interval, and fj.f is 
the frequency separation between successive frequencies-that is, fj.f = f m - f m-1 
for all m = 1, 2, ... ,M -1, where fm = fc + mfj.f. 
Note that the M FSK waveforms have equal energy, Es. The frequency separation 
(j.j determines the degree to which we can discriminate among the M possible trans­
mitted signals. As a measure of the similarity (or dissimilarity) between a pair of signal 
waveforms, we use the correlation coefficient :Ymn: 
1 IT 
Ymn = 
Es Jo 
Um(t)Un(t) dt 
By substituting for Um ( t) and Um ( t) in (7 .5 .3), we obtain 
1 IT 2E 
Ymn =Es Jo / cos(2rrfct + 2rrmfj.jt)cos(2rrfct + 2rrn(j.jt)dt 
(7.5.3) 
1 IT 
1 ( 
= 
T Jo 
cos2rr(m- n)fj.jtdt+ 
T Jo 
cos[4rrfct+2rr(m+ n)fj.jt]dt 
sin 2 rr ( m - n) fj.f T 
2rr( m - n) fj.f T 
(7.5.4) 
where the second integral vanishes when fc » 1 IT. A plot of Ymn as a function of the 
frequency separation fj.f is given in Figure 7 .28. We observe that the signal waveforms 
are orthogonal when fj.f is a multiple of l/2T. Hence, the minimum frequency sepa­
ration between successive frequencies for orthogonality is 1I2 T. We also note that the 
minimum value of the correlation coefficient is Ymn = -0.217, which occurs at the 
frequency separation fj.f = 0. 715 IT. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

352 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
*-1-+-fl---'._12·)t 
0 
Figure 7.28: Cross-correlation coefficient as a function of frequency separation for 
FSK signals 
M -ary orthogonal FSK waveforms have a geometric representation as M M -dimen­
sional orthogonal vectors, given as 
so= (.JE:;",o, ... ,o) 
s1 = (O,.Jf'.;,O, ... ,O) 
SM-I= (0,0, ... ,0,.JE:;") 
(7.5.5) 
(7.5.6) 
(7.5.7) 
(7.5.8) 
where the basis functions are t/Jm(t) = ../2/Tcos2rr(jc + mtl.f)t. The distance 
between pairs of signal vectors is d = ,f[E; for all m, n, which is also the minimum 
distance among the M signals. Note that these signals are equivalent to the M-ary 
baseband orthogonal signals described in Section 5.4. 
The demodulation and detection of the M-ary FSK signals are considered next. 
7.5.2 
Demodulation and Detection of FSK Signals 
Let us assume that the FSK signals are transmitted through an additive white Gaussian 
noise channel. Furthermore, we assume that each signal is delayed in the transmis­
sion through the channel. Consequently, the filtered received signal at the input to the 
demodulator may be expressed as 
{2E; 
r(t) = \j T cos(2rrfct + 2rrm tl.f t + c/>m) + n(t) 
(7.5.9) 
where cf>m denotes the phase shift of the mth signal (due to the transmission delay) 
and n(t) represents the additive bandpass noise, which may be expressed as 
n(t) = nc (t) cos 2rrfct - ns (t) sin 2rrfct 
(7.5.10) 
The demodulation and detection of the M FSK signals may be accomplished by 
one of two methods. One approach is to estimate the M carrier-phase shifts { cf>m} and 
perform phase-coherent demodulation and detection. As an alternative method, the 
carrier phases may be ignored in the demodulation and detection. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.5. CARRIER-FREQUENCY MODULATION 
353 
f,()dt 
f-()dt 
Received 
signal 
Detector 
Output 
decision 
f-()dt 
PLLM cos (21tfct + 2rt(M - 1),1':,.ft + ;M) 
Figure 7.29: Phase-coherent demodulation of M-ary FSK signals 
In phase-coherent demodulation, the received signal r ( t) is correlated with each of 
the M possi+le received signals, cos(2rrfct+2rrm !j.f t+cPm), form = 0, 1, ... , M­
l, where {c/:>m} are the carrier-phase estimates. A block diagram illustrating this type 
of demodulation is shown in Figure 7 .29. It is interesting to note that when cPm !- cf:>m 
form = 0, l, ... , M -1 (imperfect phase estimates), the frequency separation required 
for signal orthogonality at the demodulator is !j.f = 1 / T, which is twice the minimum 
separation for orthogonality when cf:> = Cb. 
The requirement of estimating M carrier phases makes coherent demodulation of 
FSK signals extremely complex and impractical, especially when the number of signals 
is large. Therefore, we shall not consider coherent detection of FSK signals. 
Instead, we consider a method for demodulation and detection that does not require 
knowledge of the carrier phases. The demodulation may be accomplished as shown 
in Figure 7 .30. In this case, there are two correlators per signal waveform, or a total 
of 2M correlators, in general. The received signal is correlated with the basis func­
tions (quadrature carriers) ,J2/T cos(2rrfct + 2rrmfj.f t) and ,J2/Tsin(2rrfct + 
2rrm !j.f t), for m = 0, 1, ... , M -1. The 2M outputs of the correlators are sampled 
at the end of the signal interval and are passed to the detector. Thus, if the mth signal 
is transmitted, the 2M samples at the detector may be expressed as 
rr [sin2rr(k-m)!j.fT 
cos2rr(k-m)!j.fT- l . 
J 
rkc= vr.s 
2rr(k-m)!j.fT coscf:>m-
2rr(k-m)!j.fT 
smcf:>m 
+nkc 
[ cos2rr(k-m)fj.fT-1 
sin2rr(k-m)!j.fT . 
J 
rks = ./Es 
2rr(k _ m) !j.f T 
cos cf:>m + 2rr(k _ m) !j.f T smcf:>m 
+ nks 
(7 .5 .11) 
where nkc and nks denote the Gaussian noise components in the sampled outputs. 
We observe that when k = m, the sampled values to the detector are 
rmc = ffs COS cf:>m + nmc 
Yms = ffs sincf:>m + nms 
(7 .5.12) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

354 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
Received 
signal 
V2i'f COS 21tfct 
x 
f()dt 
V2f sin 2rtfJ 
f()dt 
V2i'f COS 2rt<fc + l'.f)t 
x 
f()dt 
V2f sin 2rt<fc + l'.f)t 
f()dt 
V2f cos 2rt[fc + (M -1)1'.flt 
f()dt 
V2f sin 2n[fc + (M -1)1'.flt 
-X>-- f()dt 
rlc 
Sample at t = T 
rls 
Sample at t = T 
r2c 
Sample at t = T 
r2s 
Output 
Detector 
Sample at t = T 
decision 
Sample at t = T 
Sample at t = T 
Figure 7 .30: Demodulation of M-ary signals for noncoherent detection 
Furthermore, we observe that when k !- m, the signal components in the samples rkc 
and rks will vanish, independent of the values of the phase shift cf>k, provided that the 
frequency separation between successive frequencies is tlf = l/T. In such a case, the 
other 2 (M - 1) correlator outputs consist of noise only-that is, 
k !- m 
(7.5.13) 
In the following development we assume that tlj 
1 / T, so that the signals are or­
thogonal. 
It can be shown that the 2M noise samples { nkc} and { nks} are zero-mean, mu­
tually uncorrelated Gaussian random variables with equal variance cr2 
= No/2. Con­
sequently, the joint probability density function for rmc and rms conditioned on cf>m 
is 
f 
(r 
r 
I 
,.1. ) 
= __ 
l_e-[(rmc-JE,coscf>ml2+(rm,-JE,smcf>ml2]12a2 
(7 5 14) 
rm 
me. ms 
'1-'m 
Zrrcr2 
· 
· 
and form !- k, we have 
f (r 
r ) 
__ 
l_e-(rfc+rfs)f2a2 
rk 
kc, ks 
= Zrrcr2 
(7.5.15) 
Given the 2M observed random variables { rkc, rks} f=-01 , the optimum detector se­
lects the signal that corresponds to the maximum of the posterior probabilities-that is, 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.5. CARRIER-FREQUENCY MODULATION 
355 
P [Sm was transmitted Ir] = P(sm Ir), 
m = 0, 1, ... ,M - 1 
(7 .5.16) 
where r is the 2M -dimensional vector with elements { rkc, rks} f=-0
1 
. When the signals 
are equally probable, the optimum detector specified by (7.5 .16) computes the signal 
envelopes, defined as 
m = 0, 1, ... ,M - 1 
(7 .5.17) 
and selects the signal corresponding to the largest envelope of the set {rm} . In this 
case the optimum detector is called an envelope detector. 
An equivalent detector is one that computes the squared envelopes 
m = 0,1, ... ,M - 1 
(7.5.18) 
and selects the signal corresponding to the largest, { rk} . In this case, the optimum 
detector is called a square-law detector. 
---tllli-il;@IW§l§;t•1:Jl#@I 
Illustrative Problem 7 .11 [FSK Signaling] Consider a binary communication system 
that employs the two FSK signal waveforms given as 
ui(t) =cos 2rrfit, 
Uz(t) =cos 2rrfzt, 
0  t Tb 
0  t Tb 
where f1 = 1000/Tb and fz = Ji + l/Tb. The channel imparts a phase shift of 
cf> = 45° on each of the transmitted signals, so that the received signal in the absence 
of noise is 
r ( t) = cos ( 2 rr fit +  ) , 
i = 1, 2, 
Numerically implement the correlation-type demodulator for the FSK signals. 
We sample the received signal r(t) at a rate F5 = 5000/Tb in the bit interval Tb. Thus 
the received signal r(t) is represented by the 5000 samples {r(n/F5)}. The correla­
tion demodulator multiplies { r ( n I F5 ) } by the sampled version of u 1 ( t) = cos 2rrf1 t, 
vi(t) = sin2rrf1t,u2(t) = cos2rrf2t,andv2(t) = sin2rrfzt,as illustrated inFig­
ure 7 .30. Thus the correlator outputs are 
k=l,2, ... ,5000 
k = 1, 2, ... ' 5000 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from 
the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

356 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
k = 1, 2, ... ' 5000 
k = 1, 2' ... ' 5 000 
The detector is a square-law detector that computes the two decision variables 
r1 
= Yfc(5000) + Yfs(5000) 
r2 = r}c(5000) + r}s(5000) 
and selects the information bit corresponding to the larger decision variable. 
A MATLAB program that implements the correlations numerically is given next. 
The graphs of the correlator outputs are shown in Figure 7 .31, based on the signal 
U1 (t) being transmitted. 
1500 
1000 
500 
-500 
-1000 
-1500 
-2000 -------- 
0 
500 
1000 
1500 
2000 
2500 
3000 
3500 
4000 
4500 
5000 
m 
Figure 7.31: Output of correlators for binary FSK demodulation 
---41&1" ----------------
% MATLAB script for Illustrative Problem 7.11. 
echo on 
Tb=1; 
f1=1 OOOffb; 
f2=fl + 1 ffb; 
phi=pi/4; 
N=5000; 
% number of samples 
t=O:Tb/(N-1 ):Tb; 
ul=cos(2*pi*fl *t); 
u2=cos(2*pi*f2*t); 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.5. CARRIER-FREQUENCY MODULATION 
% Assuming that ul is transmitted, the received signal r is 
sgma=1; 
% noise variance 
for i=1 :N, 
r(i)=cos(2*pi *fl *t(i)+phi}+gngauss( sgma); 
echo off; 
end; 
echo on; 
% The correlator outputs are computed next. 
vl=sin(2*pi*fl *t); 
v2=sin(2*pi*f2*t); 
rlc(1 }=r(1 )*u1(1 ); 
rls(1 }=r(1 }*vl(1 ); 
r2c(1 }=r(1 )*u2(1 ); 
r2s(1 }=r(1 )*v2(1 ); 
for k=2:N, 
rlc(k}=rlc(k-1 }+r(k}*ul(k}; 
rls(k}=rls(k-1 }+r(k}*vl(k}; 
r2c(k}=r2c(k-1 }+r(k}*u2(k}; 
r2s(k}=r2s(k-1 )+r(k}*v2(k}; 
echo off; 
end; 
echo on; 
% decision variables 
rl=rlc(5000} "2+rl s(5000} "2; 
r2=r2c(5000)"2+r2s(5000)"2; 
% Plotting commands follow. 
357 
7 .5 .3 
Probability of Error for Noncoherent Detection of FSK 
The derivation of the performance of the optimum envelope detector for the M -ary 
FSK signals can be found in most texts on digital communication. The probability of a 
symbol error may be expressed as 
PM= I (-l)n+l M - 1 _l_ e-nkEb/No(n+l) 
M-1 
( 
) 
n=l 
n 
n + 1 
(7 .5.19) 
When M = 2, this expression reduces to the probability of error for binary FSK, which 
is 
(7 .5.20) 
For M > 2, the bit-error probability may be obtained from the symbol-error probability 
by means of the relation 
2k-1 
Pb= 
2k - l 
PM 
(7.5.21) 
The bit-error probability is plotted in Figure 7 .32 as a function of the SNR per bit 
for M = 2, 4, 8, 16, 32. We observe that for any given bit-error probability, the SNR per 
bit decreases as M increases. In the limit as M .... oo, the error probability can be made 
arbitrarily small provided that the SNR per bit exceeds -1.6 dB. This is the channel 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

358 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
10-1 
5 
2 
10-2 
... 
5 
 
2 
 
iiS 
10-3 
o:I 
""' 
5 
0 
c 
2 
O 
P 
10-4 
..0 
0 
5 
N 
Q.,:-., 
2 
10-S 
M== 
5 
Channel Capacity 
2 : Limit (-1.6 dB) 
I 
10-6 
-2 
0 
2 
4 
6 
8 
10 
12 
14 
SNR/Bit, dB 
Figure 7 .32: Probability of a bit error for noncoherent detection of orthogonal FSK 
signals 
capacity limit, or Shannon limit, for any digital communication system transmitting 
information through an AWGN channel. 
The cost of increasing M is the bandwidth required to transmit the signals. Be­
cause the frequency separation between adjacent frequencies is !:l.f 
= l/T for signal 
orthogonality, the bandwidth required for the M signals is W 
= MIT. The bit rate is 
R = k/T, where k 
= log2M. Therefore, the bit rate-to-bandwidth ratio is 
R 
w 
We observe that RI W --+ 0 as M --+ 
oo. 
-tiMQi.ii;tfjiW§liflj;t•]:JM§j®I 
log2M 
M 
(7.5.22) 
Illustrative Problem 7 .12 [Binary FSK Simulation] Perform a Monte Carlo simula­
tion of a binary FSK communication system in which the signal waveforms are given 
by (7 .5 .1), where fz 
= Ji + 1 IT b and the detector is a square-law detector. The block 
diagram of the binary FSK system to be simulated is shown in Figure 7 .33. 
Since the signals are orthogonal, when U1 (t) is transmitted, the first demodulator out­
put is 
Yic 
= ./Eb cos</>+ n1c 
r1s 
= ./Eb sin</> + n Is 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.5. CARRIER-FREQUENCY MODULATION 
Uniform 
RNG 
FSK 
Signal 
Selector 
rlc 
'is 
r2c 
r2s 
Gaussian 
Gaussian 
RNG 
RNG 
rlc 
2 
+ 
rls 
2 
r 2s 
Gaussian 
Gaussian 
RNG 
RNG 
Compare 
Bit-Error 
Counter 
359 
Detector 
Output Bit 
Figure 7 .33: Block diagram of a binary FSK system for the Monte Carlo simulation 
and the second demodulator output is 
r2c = n2c 
r2s = n2s 
where n1c, n15, n2c, and n2s are mutually statistically independent, zero-mean Gaus­
sian random variables with variance <J"2 and cf> represents the channel-phase shift. 
In the above expression, the channel-phase shift cf> may be set to zero for conve­
nience. The square-law detector computes 
and selects the information bit corresponding to the larger of these two decision vari­
ables. An error counter measures the error rate by comparing the transmitted sequence 
to the output of the detector. 
The MATLAB programs that implement the Monte Carlo simulation are given next. 
Figure 7 .34 illustrates the measured error rate and compares it with the theoretical error 
probability given by (7 .5 .20). 
---@Iii! 
---------------
% MATLAB script for Illustrative Problem 7.12. 
echo on 
SNRindB 1=0:2:15; 
SNRindB2=0:0.1 :15; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

360 
CHAPTER 7. DIGITAL T RANSMISSION VIA CARRIER MODULATION 
for i=1 :length(SNRindBl), 
smld_err_prb(i)=cm_sm52(SNRindB 1 (i)); 
echo off ; 
end; 
echo on ; 
for i=1 :length(SNRindB2), 
SNR=exp(SNRindB2(i)*log(10)/1 O); 
theo_err_prb(i)=(1 /2)*exp(-SNR/2); 
echo off; 
end; 
echo on; 
% Plotting commands follow. 
semilogy(SNRindBl,smld_err_prb,' * '); 
hold 
semilogy(SNRindB2,theo_err_prb); 
100 
10-1 
10-2 
10-3 
10-4 
10-5 
10-5 
10-7 
0 
2 
% simulated error rate 
% signal-to-noise ratio 
% theoretical symbol error rate 
Figure 7 .34: Performance of a binary FSK system from the Monte Carlo simulation 
---tl®li" ----------------
function [p]=cm_sm52(snr_in_dB) 
% [p]=cm-Ym52(snr_in..dB) 
% 
CM..SM52 
Returns the probability of error for the given 
% 
value of snr _in..dB, signal-to-noise ratio in dB. 
N=10000; 
Eb=1; 
d=1; 
snr=1 OA(snr_in_dB/1 O); 
sgma=sqrt(Eb/(2*snr)); 
phi=O; 
% Generation of the data source follow s. 
% signal-to-noise ratio per bit 
% noise variance 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.6. SYNCHRONIZATION IN COMMUNICATION SYSTEMS 
for i=1 :N, 
temp=rand; 
if (temp<0.5), 
dsource(i)=O; 
else 
dsource(i)=1; 
end; 
end; 
% a uniform random variable between 0 and 1 
% detection and the probability of error calculation 
numoferr=O; 
for i=1 :N, 
% demodulator output 
if (dsource(i)==O), 
rOc=sqrt(Eb)*cos(phi)+gngauss(sgma); 
rOs=sqrt(Eb)*sin(phi)+gngauss(sgma); 
rlc=gngauss(sgma); 
rls=gngauss(sgma); 
else 
rOc=gngauss(sgma); 
rOs=gngauss(sgma); 
rlc=sqrt(Eb)*cos(phi)+gngauss(sgma); 
rls=sqrt(Eb)*sin(phi)+gngauss(sgma); 
end; 
% square-law detector outputs 
rO=r0c"2+rOs"2; 
rl=rlc"2+rls"2; 
% Decision is made next. 
if (rO>rl), 
decis=O; 
else 
decis=1; 
end; 
% If the decision is not correct the error counter is increased. 
if (decis-=dsource(i)), 
numoferr=numoferr+ 1 ; 
end; 
end; 
p=numoferr/(N); 
7 .6 
Synchronization in Communication Systems 
361 
In Section 3 .3 we described the demodulation process for AM signals. In particular, we 
showed that we can classify the demodulation schemes into coherent and noncoherent 
schemes. In coherent demodulation, the AM signal is multiplied by a sinusoid with 
the same frequency and phase of the carrier and then demodulated. In noncoherent 
demodulation, which can be applied only to the conventional AM scheme, envelope 
demodulation is employed and there is no need for precise tracking of the phase and 
the frequency of the carrier at the receiver. 
We furthermore showed in Illustrative 
Problem 3 .6 that correct phase synchronization in coherent demodulation is essential 
and phase errors can result in considerable performance degradation. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

362 
CHAPTER 7. DIGITAL T RANSMISSION VIA CARRIER MODULATION 
In this chapter we discussed the demodulation schemes for digital carrier-modulated 
systems. In the demodulation of PAM, PSK, and QAM, we assumed that we have com­
plete knowledge of the carrier frequency and phase. 
In this section we discuss methods to generate sinusoids with the same frequency 
and phase of the carrier at the demodulator. These methods are studied under the title 
of carrier synchronization and apply to both analog and digital carrier modulation sys­
tems discussed in this chapter and Chapter 3. Another type of synchronization, called 
timing synchronization, clock synchronization, or timing recovery, is encountered only 
in digital communication systems. 
We briefly discuss this type of synchronization 
problem in this section as well. 
7 .6 .1 
Carrier Synchronization 
A carrier synchronization system consists of a local oscillator whose phase is controlled 
to be in synch with the carrier signal. This is achieved by employing a PLL. A phase­
locked loop is a nonlinear feedback-control system for controlling the phase of the 
local oscillator. In the following discussion, for simplicity we consider only binary 
PSK modulation systems. 
The PLL is driven by a sinusoidal signal at carrier frequency (or a multiple of it). 
In order to obtain the sinusoidal signal to drive the PLL, the DSB-modulated signal 
u(t) = Acm(t) cos(2rrfct - </>(t)) 
where m(t) = ±1, is squared to obtain 
u2(t) = Am2(t) cos2(2rrfct - </>(t)) 
A2 
A2 
= -fm2(t) + -fm2(t) cos(4rrfct - 2</>(t)) 
A2 
A2 
= T 
+ T cos(4TTfct - 2</>(t)) 
(7 .6.1) 
(7 .6.2) 
Obviously, this signal has a component at 2fc· The reason that we do not deal directly 
with u(t) is that usually the process m(t) is zero-mean, so the power content of u(t) 
at fc is zero. Now, if the signal u2(t) is passed through a bandpass filter tuned to 
2fc, the output will be a sinusoidal signal with the central frequency 2fc, a phase of 
-2 </> ( t), and an amplitude of A H ( 2fc) I 2. Without loss of generality we can assume 
that the amplitude is unity; that is, the input to the PLL is 
r(t) = cos(4rrfct - 2</>(t)) 
(7 .6.3) 
The PLL consists of a multiplier, a loop filter, and a voltage-controlled oscilla­
tor (VCO), as shown in Figure 17 .35l If we assume that the output of the VCO is 
sin ( 4 TT f ct - 2 (/> ( t)) , then at the input of the loop filter we have 
e(t) = cos(4rrfct - 2</>(t)) sin(4rrfct - 2(/>(t)) 
1 
 
1 
 
= 2 sin(2</>(t) - 2</>(t)) + 2 sin(8rrfct - 2</>(t) - 2</>(t)) 
(7 .6.4) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.6. SYNCHRONIZATION IN COMMUNICATION SYSTEMS 
Input Signal 
r(t) 
x e (t) 
Loop Filter 
sin(4rrfct - 2</>) 
vco 
Figure 7 .35: The phase-locked loop 
363 
v (t) 
Note that e(t) has a high- and a low-frequency component. The role of the loop filter 
is to remove the high-frequency component and to make sure that (b(t) follows closely 
the variations in </> ( t). A simple loop filter is a first-order lowpass filter with a transfer 
function of 
G(s) = 
1 + T1s 
1 + T25 
(7.6.5) 
where T2 » T1. If we denote the input of the VCO as v (t), then the output of the VCO 
will be a sinusoid whose instantaneous frequency deviation from 2fc is proportional to 
v (t). But the instantaneous frequency of the VCO output is 
Therefore, 
or, equivalently, 
1 d 
 
2f. + - -</>(t) 
c 
rrdt 
2(b(t) = K f 
00 V (T) dT 
(7.6.6) 
(7.6.7) 
where K is some proportionality constant. After removal of the second and fourth 
harmonics, the PLL reduces to the one shown in Figure 7 .36. 
Assuming that (b ( t) closely follows changes in </> ( t), the difference 2 </> ( t) -2 (b ( t) 
is very small, and we can use the approximation 
 sin (2</>(t) - 2</>(t)) 	 </>(t) - </>(t) 
(7.6.8) 
With this approximation the only nonlinear component in Figure 7 .36 is replaced by a 
linear component, resulting in the linearized PLL model shown in Figure 7 .37. Note 
that this model is represented in the transform domain, and the integrator is replaced 
by its transform domain equivalent, 1 / s. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

364 
CHAPTER 7. DIGITAL T RANSMISSION VIA CARRIER MODULATION 
2</>(t) 
+ 
+ 
-
) sin(2<f>(t) - 2<f>(t)) 
 
G(s) 
-
-
-
2</> (t) 
vco 
v (t) 
2cP(t) =Kf00V(T)dT 
Figure 7 .36: The phase-locked loop after removal of high-frequency components 
</>(t) 
+ 
+ 
-
G(s) 
-  
4>(t) 
K 
v(t) 
s 
Figure 7 .37: The linearized model for a phase-locked loop 
The model shown in Figure 7.37 is a linear control system with a forward gain of 
G (s) and a feedback gain of K / s; therefore, the transfer function of the system is given 
by 
H(s) = ci>(s) 
= 
KG(s)/s 
<I>(s) 
1 + KG(s)/s 
and with the first-order model for G(s) assumed before, 
H (s) is given as 
G(s) = 1 + T1S 
1 + T2S 
(7.6.9) 
(7.6.10) 
(7 .6.11) 
With H(s) as the transfer function, if the input to the PLL is <I>(s), the error will be 
*<I>(s) = <I>(s) - ci>(s) 
= <I>(s) - <I>(s)H(s) 
= [l - H(s)] <I>(s) 
(1 + T2S)S 
<l>(s) 
K + (1 + KT1)s + T2s2 
(7 .6.12) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.6. SYNCHRONIZATION IN COMMUNICATION SYSTEMS 
365 
Now let us assume that up to a certain time cp(t) ;::: 4><t), so Licp(t) ;::: 0. At this 
time some abrupt change causes a jump in cp(t) that can be modeled as a step-that is, 
<I> (s) = K1 Is. With this change we have 
ii<I>(s) = 
(1 + Tzs)s 
K1 
K + (1 + KT1 )s + Tz52 s 
K1 (1 + Tzs) 
(7 .6.13) 
Now, by using the final value theorem of the Laplace transform, which states that 
limj(t) = IimsF(s) 
t-oo 
s-0 
as long as all poles of sF(s) have negative real parts, we conclude that 
lim iicp(t) = lims<I>(s) 
t-oo 
s-0 
= lim 
K1 s(l + Tzs) 
s-o K + (1 + KTi)s + Tzs2 
=0 
(7.6.14) 
(7 .6.15) 
In other words, a simple first-order loop filter results in a PLL that can track jumps in 
the input phase. 
The transfer function (7 .6.11) can be written in the standard form 
Here, 
(2(wn - w2/K)s + w2 
H(s) = 
2 
2 
(7 .6.16) 
S + 2(WnS + Wn 
Wn= {K 
\j Tz 
S = Wn(T1 + l/K) 
2 
where Wn is the natural frequency and ( is the damping factor. 
Illustrative Problem 7 .13 [First-Order PLL] Assuming that 
G(s) = 
1 + O.Ols 
l+s 
and K = 1, determine and plot the response of the PLL to an abrupt change of height 1 
to the input phase. 
Here T1 = 0.01 and Tz = 1; therefore, 
Wn = 1 
( = 0.505 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

366 
CHAPTER 7. DIGITAL T RANSMISSION VIA CARRIER MODULATION 
which results in 
H(5) 
= 0.015 
+ 1 
52 
+ 1.015 
+ 1 
Thus the response to cp(t) = u(t)-that is, <1>(5) 
= 1/ 
5-is given by 
<i>(5) 
= 0.015 
+ 1 
53 + 1.0152 
+ 5 + 1 
In order to determine and plot the time response ¢ ( t) to the input u ( t), we note that 
we have to determine the output of a system with transfer function H (5) to the input 
u ( t). This can be done most easily by using state-space techniques. We will employ the 
MATLAB function tf2ss.m, which returns the state-space model of a system described 
by its transfer function. After determining the state-space representation of the system, 
we obtain the step response numerically. 
The function tf2ss .m takes the numerator and the denominator of the transfer func­
tion H (5) and returns A, B, C, and D, its state-space representation, in the form 
{ :tx(t) = Ax(t) + Bu(t) 
y(t) = Cx(t) + Du(t) 
This representation can be approximated by 
or, equivalently, 
{ 
x(t + Llt) = x(t) + Ax(t) Llt + Bu(t) 6.t 
y(t) = Cx(t) + Du(t) 
{ 
x(i + 1) 
= x(i) + Ax(i) 6.t + Bu(i) Llt 
y(i) = Cx(i) + Du(i) 
For this problem it is sufficient to choose u(t) to be a step function and the nu­
merator and the denominator vectors of H(5) to be [0.01 1] and [l 1.01 l], 
respectively. With this choice of numerator and denominator vectors, the state-space 
parameters of the system will be 
[-1.01 -01] 
A= 1 
B  [] 
c = [ 0.01 l] 
D=O 
The plot of the output of the PLL is given in Figure 7 .38. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.6. SYNCHRONIZATION IN COMMUNICATION SYSTEMS 
367 
Figure 7.38: The response of the PLL to an abrupt change in the input phase in Illus­
trative Problem 7.13 
As we can see from Figure 7 .38, the output of the PLL eventually follows the input; 
however, the speed by which it follows the input depends on the loop filter parameters 
and K, the VCO proportionality constant. 
The MATLAB script for this problem is given next. 
__., ... ·---------------
% MATLAB script for Illustrative Problem 7.13. 
echo on 
num=[0.01 1 ]; 
den=[1 1.01 1 ]; 
[a,b,c,d)=tf2ss(num,den); 
dt=0.01; 
u=ones(1,2000); 
x=zeros(2,2001 ); 
for i=1 :2000 
end 
x(:,i+ 1 )=x(:,i)+dt. *a*x(:,i)+dt. *b*u(i); 
y(i)=c*x(:,i); 
echo off; 
echo on; 
t=[O:dt:20]; 
plot(t(1 :2000),y) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

368 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
7 .6 .2 
Clock Synchronization 
In Chapter 5 and in this chapter we have seen that a popular implementation of the 
optimal receiver makes use of matched filters and samplers at the matched filter out­
put. In all these cases we assumed that the receiver has complete knowledge of the 
sampling instant and can sample perfectly at this time. Systems that achieve this type 
of synchronization between the transmitter and the receiver are called timing recovery, 
clock-synchronization, or symbol-synchronization systems. 
A simple implementation of clock synchronization employs an 
early-late gate. 
The operation of an early-late gate is based on the fact that in a PAM communication 
system the output of the matched filter is the autocorrelation function of the basic pulse 
signal used in the PAM system (possibly with some shift). The autocorrelation function 
is maximized at the optimum sampling time and is symmetric. This means that, in the 
absence of noise, at sampling times T+ 
= T + 6 and T-
= T - 6, the outputs of the 
sampler will be equal- that is, 
(7.6.17) 
In this case, the optimum sampling time is obviously the midpoint between the early 
and late sampling times: 
r+ + r­
T = 
---
2 
(7 .6.18) 
Now let us assume that we are not sampling at the optimal sampling time T, but instead 
we are sampling at T1. If we take two extra samples at r+ 
= T1 + 6 and r-
= T1 - 6, 
these samples are not symmetric with respect to the optimum sampling time T and, 
therefore, will not be equal. A typical autocorrelation function for positive and negative 
incoming pulses and the three samples is shown in Figure 7 .39. 
Matched Filter Output 
Optimum Sample 
Early Sample 
T-
T 
r+ 
Late Sample 
2214752 2014/07/21 173.244.197.106 
t 
r-
T 
r+ 
Figure 7 .39: The matched filter output and early and late samples 
t 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.6. SYNCHRONIZATION IN COMMUNICATION SYSTEMS 
Here 
where 
T-
= T- 81 
y+ = T + 82 
and, as the figure shows, this results in 
Also, in this case 
y- + y+ 
T < T1 = 
2 
369 
(7 .6.19) 
(7 .6.20) 
(7 .6.21) 
Therefore, when ly(T-) I > ly(T+) I, the correct sampling time is before the as­
sumed sampling time, and the sampling should be done earlier. 
Conversely, when 
I y(T-) I < I y(T+) I, the sampling time should be delayed. 
Obviously, when 
I y ( y-) I = I y ( y+) I , the sampling time is correct and no correction is necessary. 
The early-late gate synchronization system therefore takes three samples at T1, 
y-
= T1 - 8, and y+ 
= T1 + 8 and then compares I y(T-) I and I y(T+) I and, 
depending on their relative values, generates a signal to correct the sampling time. 
Illustrative Problem 7 .14 [Clock Synchronization] A binary PAM communication 
systems uses a raised-cosine waveform with a rolloff factor of 0.4. The system trans­
mission rate is 4800 bits/s. Write a MATLAB file that simulates the operation of an 
early-late gate for this system. 
Because the rate is 4800 bits/s, we have 
1 
T = 
4800 
and with oc 
= 0.4, the expression for a raised-cosine waveform becomes 
(t) 
= 
. 
(4BOOt) 
cos(4800 x 0.4rrt) 
x 
smc 
1 - 4 x 0.16 x 48002tZ 
. 
cos l 920rrt 
= smc(4800t) 
1 - 1. 4746 x l07tZ 
(7.6.22) 
(7 .6.23) 
This signal obviously extends from -oo to + oo. 
The plot of this signal is given in 
Figure 7.40. 
From Figure 7.40 it is clear that, for all practical purposes, it is sufficient to consider 
only the interval It I .:; 0.6 x 10-3, which is roughly [ -3T, 3T]. Truncating the raised­
cosine pulse to this interval and computing the autocorrelation function result in the 
waveform shown in Figure 7 .41. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

370 
CHAPTER 7. DIGITAL T RANSMISSION VIA CARRIER MODULATION 
0.6 
0.4 
0.2 
-1 
--0.8 
0.8 
1x10 
-3 
-0.2 
Figure 7.40: The raised-cosine signal in Illustrative Problem 7.14 
-1 
x 10--3 
Figure 7 .41: The autocorrelation function of the raised-cosine signal 
In the MATLAB script given next, the raised-cosine signal and the autocorrelation 
function are first computed and plotted. In this particular example the length of the 
autocorrelation function is 1201 and the maximum (i.e., the optimum sampling time) 
occurs at the 600th component. 
Two cases are examined: one when the incorrect 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

7.6. SYNCHRONIZATION IN COMMUNICATION SYSTEMS 
371 
sampling time is 700 and one when it is 500. In both cases the early-late gate corrects 
the sampling time to the optimum 600. 
__., .... ·---------------
% MATLAB script for Illustrative Problem 7.14. 
echo on 
alpha=0.4; 
T=1/4800; 
t=[-3*T:1.001*T/100:3*T]; 
x=sinc(t.tr). *(cos(pi*alpha*t.ff)./(1-4*alpha A2*t. A 2/f A 2)); 
pause % Press any key to see a plot of x(t). 
plot(t,x) 
y=xcorr(x); 
ty=[t-3*T,t(2:length(t))+3*T]; 
pause % Press any key to see a plot of the autocorrelation of x(t). 
plot(ty,y); 
d=60; 
% Early and late advance and delay 
ee=0.01 ; 
% Precision 
e=1; 
% Step size 
n=700; 
% The incorrect sampling time 
while abs(abs(y(n+d))-abs(y(n-d)))>=ee 
end 
if abs(y(n+d))-abs(y(n-d))>O 
n=n+e; 
elseif abs(y(n+d))-abs(y(n-d))<O 
n=n-e; 
end 
echo off 
echo on ; 
pause % Press any key to see the corrected sampling time 
n 
n=500; 
% Another incorrect sampling time 
while abs(abs(y(n+d))-abs(y(n-d)))>=ee 
end 
if abs(y(n+d))-abs(y(n-d))>O 
n=n+e; 
elseif abs(y(n+d))-abs(y(n-d))<O 
n=n-e; 
end 
echo off 
echo on ; 
pause % Press any key to see the corrected sampling time 
n 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

372 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
Problems 
7 .1 In a carrier-amplitude-modulated PAM system, the transmitter filter has a square­
root raised-cosine spectral characteristic with rolloff factor ex 
= 0.5. The carrier fre­
quency is fc = 40 / T. Evaluate and graph the spectrum of the baseband signal and the 
amplitude-modulated PAM signal. 
7 .2 Repeat Problem 7 .1 when the carrier frequency is fc 
= 80 IT. 
7 .3 Repeat Problem 7 .1 when the transmitter has a square-root duo binary spectral char­
acteristic. 
7.4 The purpose of this problem is to demonstrate that (7.2.9) and (7.2.10) hold by 
evaluating (7.2.9) numerically using MATLAB. The pulse Br(t) may be assumed to 
be rectangular-that is, 
{1, 0 ) t ) 2 
Br(t) = 
0, 
otherwise 
Let the carrier frequency fc 
= 2000 Hz. Use a sampling rate of F5 = 20,000 samples 
per second on the signal waveform ljJ(t) given by (7.2.6) and compute the energy of 
1fJ ( t) by approximating the integral in (7 .2 .8) by the summation 
N-1 
N-1 
1 , 
2 
1 , 
2 ( n) 
N L. l/J (nTs) = 
N L. l/J 
F 
n=O 
n=O 
5 
where N = 40,000 samples. 
Write a MATLAB program to generate the samples 
1fJ ( n/ F5) and perform the computation of the signal energy as described above. 
7 .5 The cross-correlation of the received signal r ( t) with lfJ ( t) as given by (7 .2 .14) 
may be performed numerically using MATLAB. Write a MATLAB program that com­
putes the correlator output 
n = 0, 1, 
... , N -1 
where F5 is the sampling frequency. Evaluate and graph y(n) when r(t) 
where ljJ(t) is the waveform described in Problem 7.4 and F5 = 20,000 Hz. 
ljJ(t), 
7 .6 Evaluate and graph the correlation {y ( n)} in Problem 7.5 when the signal Br ( t) 
is 
{  (1 
- cos rrt), 
Br(t) = 
0, 
for the same parameters given in Problem 7 .4. 
O)t)2 
otherwise 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
373 
7.7 In Illustrative Problem 7.3, the eight PSK waveforms had a constant amplitude. 
Instead of the rectangular pulse BT ( t) , suppose that the signal pulse shape is 
{ (1 - cos2rrt/T), 
gy(t) = 
0, 
05't5'T 
otherwise 
Write a MATLAB program to compute and graph the M = 8-PSK signal waveforms 
for the case in which Jc = 6 IT. 
7 .8 Write a MATLAB program that numerically computes the cross-correlation of the 
received signal r(t) for a PSK signal with the two basis functions given by (7 .3.9). 
That is, compute 
Yc(n) = 
k
O 
r (	) qi1 (	), 
Ys(n) = 
k
O
r (	) qiz (), 
n = 0, 1, ... ,N - 1 
n = 0, 1, ... ,N - 1 
where N is the number of samples of r ( t), qi 1 ( t), and qiz ( t). Evaluate and plot these 
correlation sequences when 
r(t) = SmcqlI (t) + Smsqlz (t) 
{2, 
0 5, t 5, 2 
gy(t) = 
0, 
otherwise 
Jc = 1000 Hz, F5 = 10000 samples per second, and the transmitted signal point is as 
given. 
a. Sm = (Smc . Sms) = (1, 0) 
b.Sm=(-1,0) 
C. Sm= (0, 1) 
7 .9 Write a MATLAB program that performs a Monte Carlo simulation of an M = 4-
PSK communication system, as described in Illustrative Problem 7 .5, but modify the 
detector so that is computes the received signal phase er as given by (7 .3.16) and 
selects the signal point whose phase is closes to er. 
7 .10 Write a MATLAB program that implements a differential encoder and a differ­
ential decoder for a M = 4-DPSK system. Check the operation of the encoder and 
decoder by passing a sequence of 2-bit symbols through the cascade of the encoder 
and decoder and verify that the output sequence is identical to the input sequence. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

374 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
7.11 Write a MATLAB program that performs a Monte Carlo simulation of a binary 
DPSK communication system. In this case, the transmitted signal phases are e 
= 0 
and e 
= 180°. A e 
= 0 phase change corresponds to the transmission of a 0. A 
e 
= 180° phase change corresponds to the transmission of a 1. Perform the simulation 
for N 
= 10000 bits at different values of the SNR parameter Eb! No. It is convenient to 
normalize Eb to unity. Then, with a-2 
= No/2, the SNR is Eb/ No = l/2a-2, where a-2 
is the variance of the additive noise component. Hence, the SNR can be controlled by 
scaling the variance of the additive noise component. Plot and compare the measured 
error rate of the binary DPSK with the theoretical error probability given by (7.3 .23) . 
7 .12 Write a MATLAB program that generates and graphs the M 
= 8-QAM signal 
waveforms given by (7.4.2) for the signal constellation shown in Figure P7 .12. 
(-3, 1) 
(3, 1) 
(-3, -1) 
(3, -1) 
Figure P7 .12 
Assume that the pulse waveform BT ( t) is rectangular-that is, 
BT(t) = 
and the carrier frequency is Jc 
= 8 IT. 
{l, 
0, 
0  t  T 
otherwise 
7 .13 Repeat Problem 7 .12 when the pulse waveform BT ( t) is given as 
{(1- cos2rrt/T), 
BT(t) = 0, 
0  t  T 
otherwise 
7.14 Repeat Illustrative Problem 7.1 when the carrier frequency Jc 
= 45/T. 
7 .15 Repeat Illustrative Problem 7.4 when the carrier frequency Jc 
= 4 5 IT. 
7 .16 Repeat Illustrative Problem 7 .9 when the carrier frequency Jc 
= 50 / T. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
375 
7 .17 Write a MATLAB program that performs a Monte Carlo simulation of an M = 
8-QAM communication system for the signal constellation shown in Figure P7.12. 
Perform the simulation for N = 10, 000 (3-bit) symbols at different values of the SNR 
parameter Eavb I No. It is convenient to normalize Eavb to unity. Then, with a-2 = No I 2, 
the SNR is Eavb I No = 1I2 a-2, where a-2 is the variance of each of the two additive 
noise components. Plot and compare the measured symbol-error rate of the QAM 
system with the upper bound on the theoretical error probability given by ( 7 .4 .12). 
7 .18 Repeat the simulation in Problem 7 .17 for the M = 8-signal constellation shown 
in Figure P7.18. Compare the error probabilities for the two M = 8-QAM signal 
constellations and indicate which constellation gives the better performance. 
Figure P7.18 
7 .19 Consider the binary FSK signals of the form 
ui(t) = .j¥f cos2rrf1t, 
u2(t) = .j¥f cos2rrf2t, 
1 
f2 =fl+ 2Tb 
(l + '13, 0) 
Let !1 = 1000 I Tb. By sampling the two waveforms at the rate F5 = 5000 I Tb , we 
obtain 5000 samples in the bit interval 0 ::; t ::; Tb. Write a MATLAB program 
that generates the 5000 samples for each of u 1 ( t) and u 2 ( t) and compute the cross­
correlation 
and, thus, verify numerically the orthogonality condition for U1 (t) and u2(t). 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

376 
CHAPTER 7. DIGITAL TRANSMISSION VIA CARRIER MODULATION 
7 .20 Use the MATLAB program given in Illustrative Problem 7.11 to compute and 
graph the correlator outputs when the received signal is 
r(t) =cos ( 2rrf1t + ;) , 
7 .21 Use the MATLAB program given in Illustrative Problem 7.11 to compute and 
graph the correlator outputs when the transmitted signal is U2 ( t) and the received 
signal is 
r(t) =cos ( 2rrfzt + : ) , 
0  t  T 
7 .22 Write a MATLAB program that performs a Monte Carlo simulation of a quater­
nary (M = 4) FSK communication system and employs the frequencies 
k 
fk =Ji+ 
T' 
k=0,1,2,3 
The detector is a square-law detector. Perform the simulation for N = 10, 000 (2-bit) 
symbols at different values of the SNR parameter Eb I No, and record the number of 
symbol errors and bit errors. Plot and compare the measured symbol- and bit-error rates 
with the theoretical symbol- and bit-error probabilities given by (7.5.19) and (7 .5.21). 
7 .23 In Illustrative Problem 7.13 it was assumed that the input phase has an abrupt 
jump, and the simulation showed that a first-order loop filter can track such a change. 
Now assume that the input changes according to a ramp-that is, starts to increase 
linearly. Simulate the performance of a first-order PLL in this case and determine 
whether the loop is capable of tracking such a change. 
7 .24 Repeat Illustrative Problem 7 .13 when the loop filter is given as 
1 
G(s) = 5 + J2 
Also, determine the closed-loop transfer function H(s) and the corresponding natural 
frequency and damping factor of the loop. Is the loop stable? 
7 .25 Repeat Illustrative Problem 7 .14 with a rectangular pulse shape in the presence of 
AWGN for SNR values of 20, 10, 5, and 2 dB. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

Chapter 8 
Multicarrier Modulation 
andOFDM 
8.1 
Preview 
In Chapter 7 we considered modulation of a single carrier for transmitting digital infor­
mation. In this chapter, we describe the transmission of digital information on multiple 
carriers. In multicarrier modulation, the available channel bandwidth is subdivided into 
a number of equal-bandwidth subchannels, as illustrated in Figure 8 .1. Thus, we create 
IC(f)I 
0 
--1 f-­
il.f 
I 
w 
f 
Figure 8 .1: Subdivision of the channel bandwidth in multicarrier modulation 
K 
= W / f).j subchannels, where W is the overall bandwidth of the channel and f).j 
is the frequency separation between adjacent subchannels, or, equivalently, f).j is the 
frequency separation between adjacent subcarrier frequencies. Then, different informa­
tion symbols are transmitted simultaneously and synchronously in the K subchannels. 
Thus, the data are transmitted by frequency division multiplexing (FDM). 
377 
Copyright 2011 Cengage Leaming. All Rights Reserved. May not be copied, scanned, or duplicated. in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not materiaJly affect the overall learning eAperience. Cengage Leaming reserves the right to remove additional content at any time if subsequent rights restrictions require iL 

378 
CHAPTER 8. MULTICARRIER MODULATION AND OFDM 
For each subchannel, let us associate a carrier signal-that is, 
Xk(t) = sin2rrfkt, 
k = 0, 1, ... ,K - 1 
(8.1.1) 
where fk is the midfrequency in the kth subchannel. We select the symbol rate l/T 
on each of the subchannels to be equal to the frequency separation tlj of adjacent 
subcarriers. Consequently, the subcarriers are orthogonal over the symbol duration T, 
independent of the relative phase relationship between any two subcarriers-that is, 
J: sin(2rrfkt + cf>k) sin(2rrfjt + </>j) dt = 0 
(8.1.2) 
where fk -fj 
= n/T, n = 1, 2, ... , for any arbitrary cf>k and</>;. With this restriction, 
we have orthogonal frequency division multiplexing (OFDM). 
An OFDM system can be designed to avoid the intersymbol interference effects 
that are usually encountered in a single-carrier system. If Ts is the symbol interval in a 
single-carrier system, the symbol interval in an OFDM system having K subchannels is 
T = KTs. By selecting K to be sufficiently large, the symbol interval T in the OFDM 
system can be made much larger than the time dispersion of the channel. Thus, the 
intersymbol interference in an OFDM system can be made arbitrarily small by proper 
selection of K. In such a case, the bandwidth of each subchannel is sufficiently small 
and appears to have a fixed frequency response C (jk), k = 0, 1, 2, ... , K - 1. 
Illustrative Problem 8.1 [Orthogonality Property of Subcarriers] 
Two subcarrier signals in an OFDM signal are 
xk(t) = sin(2rrfkt + </>k), 
0::; t::; T 
Xj(t) = sin(2rrfjt + </>j), 
0::; t::; T 
Let fk = 2 Hz and fj = fk + 'Tf, where n = 1, 2, or 3, and the phases cf> k and cf> j are 
arbitrary over [O, 2rr]. Demonstrate the orthogonality property given in Equation 8.1.2 
by using the sampled signals Xk ( mTs) and Xj (mTs), where Ts = 1I5 s, T = 10 s and 
m = 0, 1, 2, ... , M - 1, where M = TI Ts = 50. 
The sampled signals are 
Xk(mTs) = sin(4rrm/5 + cf>k), 
m = 0, 1, ... ,49 
Xj(mTs) = sin(4rrm/5 + 2rrmn/50 + </>j), 
m = 0, 1, ... , 49 
Using MATLAB, we compute 
49 
I xk(mTs)Xj(mTs) 
m=O 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

8.2. GENERATION OF AN OFDM SIGNAL 
379 
for n = 1, 2 and 3. The results of the computation are 4.9 x 10-14, 2.28 x 10-14, and 
5.07 x 10-14. 
The MATLAB script for the problem is given below. 
---tlli" ---------------
% MATLAB script for Illustrative Problem 8.1 
M = 50; 
m=O:M-1; 
phLk = 2*pi*rand; 
phLj = 2*pi*rand; 
% The sampled signals: 
x_k = sin(4*pi*m/5+phLk); 
n = 1; 
x_j_l = sin(4*pi*m/5+2*pi*m*n/M+phLj); 
n = 2 ;  
x_j_2 = sin(4*pi*m/5+2*pi*m*n/M+phLj); 
n = 3; 
x_j_3 = sin(4*pi*m/5+2*pi*m*n/M+phLj); 
% Investigating the orthogonality of the sampled signals: 
Suml = sum(x_k.*x_j_l); 
% Displaying the results: 
disp([' The result of the computation for n=l is: 
Sum2 = sum(x_k.*x_j_2); 
disp([' The result of the computation for n=2 is: 
Sum3 = sum(x_k.*x_j_3); 
disp([' The result of the computation for n=3 is: 
8.2 
Generation of an OFDM signal 
',num2str(Suml)]) 
',num2str(Sum2)]) 
',num2str(Sum3)]) 
The modulator and demodulator in an OFDM system are usually implemented by use 
of a parallel bank of tuned filters based on the discrete Fourier Transform (DFT). To 
demonstrate this implementation, let us consider an OFDM modulator that generates 
K independent subcarriers, where each subcarrier is modulated by symbols selected 
from a QAM signal constellation. We denote the complex-valued signal points corre­
sponding to the information symbols on the K subchannels by X k, k = 0, 1, ... , K - 1. 
Hence, these information symbols {Xk} represent the values of the DFT of a multicar­
rier OFDM signal x ( t), where the modulation on each carrier is QAM. Because x ( t) 
must be a real valued signal, its N-point DFT {Xk} must satisfy the symmetry property 
XN-k = x:. Therefore, from the K information symbols {Xk}, we create N = 2K 
symbols by defining 
XN-k=x:, 
k=l,2, ... ,K-1 
x0 = Real(Xo) 
X. = lm(Xo) 
(8.2.1) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

380 
CHAPTER 8. MULTICARRIER MODULATION AND OFDM 
O bserve that the information symbol Xo is split into two parts, both of which are real. 
It is convenient to denote the new sequence of symbols as {X2, k = 0, 1, ... ,N - 1}. 
Then the N-point inverse DFf (IDFf ) of {X2} yields the real valued sequence 
N-1 
__ 
1_ "' X' j2rrn3 
Xn -
.JN 
L 
ke 
, 
n = 0, l, ... ,N - 1 
k=O 
(8.2.2) 
where }N is simply a scale factor. The sequence {Xn, 0  n  N - 1} corresponds to 
the samples of the multicarrier OFDM signal x ( t), consisting of K = N / 2 subcarriers, 
which may be expressed as 
N-1 
1 
"' 
·2 
kt 
x(t) = - L X2eJ rry 
.JN k=O 
0  t  T 
(8.2.3) 
where T is the signal duration (also the signal interval) and Xn = x ( ), n = 
0, 1, ... , N - 1. We note that the information signal Xo, which is represented by X0 
and Xl< as given in (8.2.1), corresponds to the de component <Jo = 0) in (8.2.3). It is 
convenient to set Xo = 0, so that the multicarrier OFDM signal given by (8.2.3) has no 
de component. Then, by making use of the symmetry conditions given by (8.2.1), the 
multicarrier OFDM signal in (8.2.3) is expressed as 
2 
K-l 
( 2rrkt 
) 
x(t) = 
.JN z;.1 
IXkl cos ---y- + ek , 
0  t  T 
(8.2.4) 
where the information symbols xk = 1Xklei8k, k = 1, 2, ... ,K - 1. 
Illustrative Problem 8.2 [Generation of OFDM Signal] Using the 16-point QAM 
signal constellation shown in Figure 7 .21, select pseudorandomly each of the informa­
tion symbols X1,X2, ... ,Xg. With T = 100 seconds, generate the transmitted signal 
waveform x(t) given by (8.2.3) for t = 0, 1, ... , 100 and plot it. Then compute the 
IDFT values Xn, for n = 0, l, ... ,N - 1, by using (8.2.2). D emonstrate that x(t), 
evaluated at Tn/N, n = 0, 1, ... ,N - 1, corresponds to the IDFT values. Finally, 
using the IDFf values {Xn, 0  n  N - 1}, compute the DFf, defined as 
N-1 
Xk= 4Lxne-i2rrkN 
k=O,l, ... ,N - l  
vN n=O 
(8.2.5) 
and, thus, demonstrate that the information symbols {Xk, 1  k  9} are recovered 
from the samples of x(t), where t = nT /N, 0  n  N - 1. 
In this exampleK = lOandN = 20. The plot is shown inFigure 8.2 and theMATLAB 
script for this problem is given next. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

8.2. GENERATION OF AN OFDM SIGNAL 
381 
20 
40 
60 
80 
100 
Figure 8.2: The plot in Illustrative Problem 8.2 
___ ,, ... ·---------------
% MATLAB script for Illustrative Problem 8.2. 
echo on 
K=1O;N=2*K;T=100; 
a=rand(1,36); 
a=sign(a-0.5); 
b=reshape( a,9 ,4); 
% Generate the 16QAM points 
XXX=2*b(:, 1 )+b(:,2)+j*(2*b(:,3)+b(:,4)); 
XX=XXX•; 
X=[O XX 0 conj(XX(9:-1 :1 ))]; 
xt=zeros(1, 101 ); 
for t=0:100 
for k=O:N-1 
end 
end 
xt(1,t+ 1)=xt(1,t+1)+1/sqrt(N)*X(k+ 1 )*expU*2*pi*k*t/T); 
echo off 
echo on 
xn=zeros(1,N); 
for n=O:N-1 
for k=O:N-1 
end 
end 
echo on 
xn(n+ 1)=xn(n+1)+1/sqrt(N)*X(k+1 )*expU*2*pi*n*k/N); 
echo off 
pause % press any key to see a plot of x(t) 
plot([0:100],abs(xt)) 
% Check the diference between xn and samples of x(t) 
for n=O:N-1 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

382 
CHAPTER 8. MULTICARRIER MODULATION AND OFDM 
d(n+ 1)=xt(T/N*n+1 )-xn(1 +n); 
echo off 
end 
echo on 
e=norm(d); 
Y=zeros(1, 10); 
for k=1 :9 
for n=O:N-1 
Y(1,k+ 1)=Y(1,k+1)+1/sqrt(N)*xn(n+ 1 )*exp(-j*2*pi*k*n/N); 
echo off 
end 
end 
echo on 
dd=Y(1:10)-X(1 :1 O); 
ee=norm(dd); 
8.3 
Demodulation of OFDM Signals 
As we have observed above, the modulator in an OFDM system can be implemented by 
computing the IDFT, given in (8.2.2). The demodulator that recovers the information 
symbols {Xk} from the received signal samples is implemented by computing the DFT, 
given in (8.2.5). The detector is described below. When the number of subcarriers is 
large, say K > 30, the modulator and demodulator in the OFDM system are efficiently 
implemented by using the fast Fourier transform algorithm (FFT algorithm) to compute 
the DFT and IDFT. 
If the number of subcarriers is sufficiently large so that the time dispersion effects 
of the subchannels are negligible, then the signal transmitted through each subchannel 
is simply attenuated and phase shifted by an amount corresponding to the frequency 
response characteristics of each subchannel. Furthermore, the received signal is cor­
rupted by additive noise. Hence, the received symbols at the outputs of the OFDM 
demodulator may be expressed as 
(8.3.1) 
where Ck 
= C(fk) is the frequency response (magnitude and phase) of the kth sub­
channel and 'lk is the additive noise corrupting the kth symbol. The detector that 
follows the OFDM demodulator must eliminate the effect of the channel frequency re­
sponse characteristics by dividing each received symbol Xk by Ck. Typically, this is 
accomplished in practice by measuring the frequency response characteristics of each 
subchannel and using these measurements (estimates of Ck) to eliminate the magnitude 
and phase effects of the subchannel from the received symbols. Thus, the compensated 
received symbols at the detector may be expressed as 
(8.3.2) 
Upon observing each received symbol, the detector compares Xk with each of the pos­
sible transmitted signal points in the QAM signal constellation and selects the symbol 
from the constellation that is closest in distance to xk. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

8.3. DEMODULATION OF OFDM SIGNALS 
383 
Illustrative Problem 8.3 [Effect of Additive Noise on OFDM] Consider the OFDM 
system described in Illustrative Problem 8 .2. 
Suppose the IDFT samples given by 
(8.2.2) of the transmitted signal are corrupted by additive Gaussian noise having zero 
mean and variance cr2. Hence, the received signal samples are represented as 
rn=Xn+Bn 
n=O,l, ... ,N-1 
where Bn is the noise component. Compute the DFT of the sequence {rn} and then 
obtain the estimates of the received symbols {Xk} when the noise variance is cr2 = l, 2, 
and 4. For each value of cr2, detect the sequence Xk and, thus, obtain the output 
symbols {Xd from the detector. Comment on the accuracy of the detected symbols. 
The MATLAB script for this problem is given next. This script computes the number 
of symbols received in error for cr2 = 1. By changing the variable "variance" in 
this script, we can obtain the number of errors for different values of noise variance. 
The results of sample runs of this script for cr2 = 1, 2, and 4 are summarized in the 
following table. The first row of this table denotes the transmitted signals and the 
following three rows show detected values for cr2 = 1, 2, and 4. 
xk 
1-3j 
-l+j 
3+j 
1+3j 
1-3j 
1-3j 
3 + 3j 
-1+3j 
1 + 3j 
xb CJ2 
= 1 
1-3j 
-1 + j 
l+j 
1+3j 
1-3j 2 At4i§1i2 0P410=i'J2 liJ.:N.4.t 97XHJ@j 
xb CJ2 
= 2 
1-3j 
1+3j 
-1 + j 
1+3j 
3 -3j 
1-3j 
3 + 3j 
-1+3j 
-1 + 3j 
xb CJ2 
= 4 
l+j 
-1 + j 
-1-j 
1 + 3j 
-1 + j 
1-3j 
3 -3j 
3 + 3j 
1 + 3j 
___ , .... ·--------------
% MATLAB script for Illustrative Problem 8.3. 
echo on 
K=1 O;N=2*K;T=1 OO;variance=1; 
noise=sqrt(variance}*randn(1,N}; 
a=rand(1,36}; 
a=sign(a-0.5); 
b=reshape( a,9 ,4); 
% Generate the 16QAM points 
XXX=2*b(:, 1 }+b(:,2)+j*(2*b(:,3}+b(:,4)); 
XX=XXX'; 
X=[O XX 0 conj(XX(9:-1 :1}}]; 
x=zeros(1,N); 
for n=O:N-1 
end 
for k=O:N-1 
end 
x(n+ 1)=x(n+1)+1/sqrt(N}*X(k+ 1 )*expU*2*pi*n*k/N); 
echo off 
echo on 
r=x+noise; 
Y=zeros(1, 10); 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

384 
CHAPTER 8. MULTICARRIER MODULATION AND OFDM 
for k=1 :9 
for n=O:N-1 
end 
end 
echo on 
Y(1,k+ 1)=Y(1,k+1)+1/sqrt(N)*r(n+ 1 )*exp(-j*2*pi*k*n/N); 
echo off 
% Detect the nearest neighbor in the 16QAM constellation 
for k=1 :9 
if real(Y(1,k+1))>0 
else 
end 
if real(Y(1,k+1))>2 
Z(1,k+ 1 )=3; 
else 
Z(1,k+ 1 )=1; 
end 
if real(Y(1,k+ 1 ))<-2 
Z(1,k+ 1 )=-3; 
else 
Z(1,k+1)=-1; 
end 
if imag(Y(1,k+1))>0 
else 
end 
if imag(Y(1,k+1))>2 
Z(1,k+ 1)=Z(1,k+1 )+3*j; 
else 
Z(1,k+ 1)=Z(1,k+1 )+j; 
end 
if imag(Y(1,k+1))<-2 
Z(1,k+ 1)=Z(1,k+1 )-3*j; 
else 
Z(1,k+ 1)=Z(1,k+1 )-j; 
end 
echo off 
end 
echo on 
error=max(size(find(Z(1,2:1 O)-X(1,2:1 O)))); 
8.4 
Use of a Cyclic Prefix to Eliminate 
Channel Dispersion 
In our treatment of OFDM given above, we assumed that there is no time dispersion 
introduced by the channel on each of the subcarrier signals. However, that may not be 
the case in many communication channels in which OFDM may be employed. In this 
section, we consider a method to mitigate channel dispersion. 
When x(t) is the input to the channel, the channel output at the receiver may be 
expressed as 
r(t) = x(t) * c(t) + 17(t), 
(8.4.1) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

8.4. USE OF A CYCLIC PREFIX TO ELIMINATE CHANNEL DISPERSION 385 
where c ( t) is the impulse response of the channel and * denotes convolution. Because 
the bandwidth t:!f of each subchannel is selected to be very small relative to the overall 
channel bandwidth W = K t:!f, the symbol duration T = 1 I t:!f is larger than the 
duration of the channel impulse response. To be specific, suppose that the channel 
impulse response spans m + 1 signal samples, where m 
« N. A simple way to 
completely avoid intersymbol interference (ISi) is to insert a time guard of duration 
m T / N between the transmission of successive data blocks. This allows the response 
of the channel to die out before the next block of K symbols is transmitted. 
An alternative method of avoiding ISi is to append a so-called cyclic prefix to each 
block of N signal samples {Xn, 0 .:; n .:; N - 1}. The cyclic prefix for the block of 
samples contains the samples XN-m. XN-m+1 •
.
.
.
 , XN-1 ·These samples are appended 
to the beginning of the block, thus creating a signal sequence of length N + m samples, 
which may be indexed from n = 
-m to n = N - 1, where the first m samples 
constitute the cyclic prefix. Then, if the sample values of the channel response are 
{en, 0 .:; n .:; m}, the convolution of {en} with {Xn, -m .:; n .:; N - 1} produces 
the received signal { r nl. Because the ISi in any pair of successive signal transmission 
blocks affects the first m signal samples, we discard the first m samples of {rn} and 
demodulate the signal based on the received signal samples { r n. 0 .:; n .:; N - 1}. 
If we view the channel characteristics in the frequency domain, the channel fre­
quency response at the subcarrier frequencies fk = k/T is 
m 
ck= c (2rrk/N) = L Cne-j2rrnk/N, 
k = 0, 1, ... ,N- 1 
n=O 
(8.4.2) 
Because the ISi is eliminated through either the cyclic prefix or the time guard band, 
the demodulated sequence of symbols may be expressed as 
k = 0, 1, ... ,N - 1 
(8.4.3) 
where {Xk} is the output of the N-point DFf computed by the demodulator and {1Jk} is 
the additive noise corrupting the signal. By estimating the channel parameters {Cb 0 .:; 
k .:; N - 1} and normalizing each Xk by Ck. we obtain the desired transmitted data, 
corrupted by the additive noise; that is, 
X'k = Xk + 1'1k· 
k = 0, 1, ... ,N - 1 
(8.4.4) 
Figure 8 .3 illustrates the basic building blocks in the implementation of the trans­
mitter and the receiver in an OFDM system. As previously indicated, the FFT algo­
rithm is usually employed to efficiently implement the DFf and IDFT. 
Illustrative Problem 8.4 [Use of Cyclic Prefix] 
Using the OFDM signal generated in Illustrative Problem 8.2, add a cyclic prefix 
of four samples to account for the channel dispersion and, thus, modify the MATLAB 
script given in Illustrative Problem 8 .2. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

386 
CHAPTER 8. MULTICARRIER MODULATION AND OFDM 
Input 
Symbols 
{X<} 
Serial-to­
Parallel 
Buffer 
Multi carrier 
Modulator 
(IDFT) 
DIA 
Converter 
Transmitted 
Signal x(t) 
Parallel-
Output 
to-
Symbols 
Serial 
Converter 
Transmitter 
OFDM 
Demodulator 
(DFT) 
Receiver 
Received 
AID 
r(t) 
Converter Signal 
Figure 8 .3: Block diagram of OFDM transmitter and receiver 
In this problem K 
= 10 and N 
= 20. The signal values from the N-point DFT are 
Xo,X1, ... ,X19. To this sequence, we append the values X15,X17,X18, and X19 at the 
front end, prior to xo. Thus, the transmitted signal sequence at the input of the DIA 
converter is 
The modification to the MATLAB script is given below. 
--®Ii" 11---------------
% MATLAB script for Illustrative Problem 8.4 
echo on 
K=1 O;N=2*K;T=1 OO;m=4; 
a=rand(1,36); 
a=sign(a-0.5); 
b=reshape( a, 9 ,4); 
% Generate the l 6QAM points 
XXX=2*b(:, 1)+b(:,2)+1 i*(2*b(:,3)+b(:,4)); 
XX=XXX'; 
X=[O XX 0 conj(XX(9:-1 :1 ))]; 
xt=zeros(1, 101 ); 
for t=0:100 
end 
for k=O:N-1 
end 
xt(1,t+ 1)=xt(1,t+1)+1/sqrt(N)*X(k+1 )*exp(1 i*2*pi*k*t!f); 
echo off 
echo on 
xn=zeros(1,N+m); 
for n=O:N-1 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

8.5. SPECTRAL CHARACTERISTICS OF OFDM SIGNALS 
for k=O:N-1 
xn(n+m+ 1)=xn(n+1)+1/sqrt(N)*X(k+ 1 )*exp(1 i*2*pi*n*k/N); 
echo off 
end 
end 
xn(1 :m)=xn(N-m+1 :N); 
echo on 
pause % press any key to see a plot of x(t) 
plot([0:100],abs(xt)) 
% Check the diference between xn and samples of x(t) 
for n=O:N-1 
end 
d(n+ 1)=xt(T/N*n+1 )-xn(1 +n+m); 
echo off 
echo on 
e=norm(d); 
Y=zeros(1, 1 O); 
for k=1 :9 
for n=O:N-1 
end 
end 
echo on 
Y(1,k+ 1 )=Y(1,k+1)+1/sqrt(N)*xn(n+m+ 1 )*exp(-1 i*2*pi*k*n/N); 
echo off 
dd=Y(1 :10)-X(1 :10); 
ee=norm(dd); 
387 
In the discussion above, the same QAM signal constellation is used to generate the 
information symbols for all the subcarriers. However, OFDM allows us to transmit a 
different number of bits/symbol on each subcarrier. Specifically, subcarriers that have a 
higher signal-to-noise-ratio (SNR) due to lower attenuation can be modulated to carry 
more bits/symbol than subchannels that have a higher attenuation. Hence, QAM with 
different constellation sizes may be used on the different subcarriers. 
OFDM using QAM on each of the subcarriers as described above has been im­
plemented for a variety of applications, including high-speed data transmission over 
telephone lines, such as digital subscriber lines. This type of OFDM modulation has 
also been called discrete multitone (DMT) modulation. OFDM is also used in digital 
audio broadcasting in Europe and other parts of the world and in digital wireless local 
area networks (LANs). 
8.5 
Spectral Characteristics of OFDM Signals 
As indicated above, the signals transmitted on the subcarriers of an OFDM system are 
mutually orthogonal in the time domain; that is, 
f: Xk(t)Xj(t) dt = 0, 
k-/= j 
(8.5.1) 
where Xk(t) is defined in Equation 8.1.1. However, these signals have significant 
overlap in the frequency domain. 
This can be observed by computing the Fourier 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

388 
CHAPTER 8. MULTICARRIER MODULATION AND OFDM 
transform of the signal 
x,(t) ORe [ Jtx,eJ2rrht] 
for several values of k. 
= JtAk cos(2rrfkt + ek), 
0  t  T 
--lil!IJ§ll;§iltj§lij;t•):Jl§j@I 
(8.5.2) 
Illustrative Problem 8.5 [Spectrum of OFDM Signal] Determine the magnitude 
I Uk (j) I of the Fourier transform of the signal given by Equation 8 .5 .2 for fk = k IT, 
k = 0, 1, 2, 3, 4, 5. For simplicity, let Ak = 1 and ek = 0 for all k. Plot I Uk(j) I on the 
same graph fork= 0, 1, 2, 3, 4, 5 for 0  f  4/T. 
The Fourier transform of Xk ( t) = ,J2 / T cos 2rr fk t for 0  t  T may be expressed 
as the convolution of G (j) with V (j) where 
1 
V(j) = 2 [8(j - fk) + 8(f + fk)] - cos 2rrfkt 
G(j) = me-j(rrfT-rrf2>sinc(jT) 
Hence, 
I Uk(j) I = ,f-I sinc(j - fk) T + sinc(j + fk) TI 
The plot of I Uk (j) I is shown in Figure 8 .4. Note the large spectral overlap of the main 
lobes of each I Uk (j) I. Also note that the first sidelobe in the spectrum is only 13 dB 
ID 
:s. 
s 
"" 
2 
20 
0 
-20 
-40 
-60 
-80 
-100 
-120 
-140 
-160 
-180 
0 
I 
I 
I 
I 
I 
I 
 
-. 
-
,.-'.'.: 
--<!  
-.;;:  
  
r 
I 
I 
I 
I 
I 
I 
0.5 
1.5 
2 
2.5 
3 
Figure 8.4: IUk(j) I in Illustrative Problem 8.5 
I 
 
 
-
I 
3.5 
4 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

8.6. PEAK-TO-AVERAGE POWER RATIO IN OFDM SYSTEMS 
389 
down from the main lobe. Therefore, there is a significant amount of spectral overlap 
among the signals transmitted on different subcarriers. Nevertheless, these signals are 
orthogonal when transmitted synchronously in time. 
The MATLAB script for the problem is given below. 
% MATLAB script for Illustrative Problem 8.5 
T 
= 1; 
k 
= 0 : 5; 
Lk 
= kif; 
f 
= -4tr : O.D1 *4ff : 4ff; 
U_k_abs 
= zeros(length(k),length(t)); 
for i 
= 1 : length(k) 
U_Labs(i,:) 
= abs(sqrt(T/2)*(sinc((f-Lk(i))*T) + sinc((f+Lk(i))*T))); 
end 
plot(f,U_k_abs(1,:),' . -',f,U_k_abs(2,:),' --',f,U_k_abs(3,:), 'c-' ,f,U_k_abs(4,:),'. ',f,U_k_abs(5,:), 
f,U_k_abs(6,:)) 
xlabel(' f ' ) 
ylabel(' I U _ k ( f ) I ') 
8.6 
Peak-to-Average Power Ratio in OFDM Systems 
A major problem in multicarrier modulation is the high peak-to-average power ratio 
(PAR) that occurs in the modulated signal. Generally, large signal peaks in the trans­
mitted signal occur when the signals in the K subchannels add constructively in phase. 
Such large signal peaks may saturate the power amplifiers at the transmitter, thus caus­
ing intermodulation distortion in the transmitted signal. Intermodulation distortion can 
be reduced and often avoided by reducing the power in the transmitted signal and, thus, 
operating the power amplifier at the transmitter in its linear range. Such a power re­
duction or "power back-off" results in inefficient operation of the OFDM system. For 
example, if the PAR is 10 dB, the power back-off may be as much as 10 dB to avoid 
intermodulation distortion. 
One of the simplest methods to reduce the PAR is to limit the peak amplitude of the 
transmitted signal to some value above the average power. However, such amplitude 
clipping will result in signal distortion. The following illustrative problem investigates 
this approach. 
---tiMIU-il;tfilW§l§;t•1:JM§®I 
Illustrative Problem 8.6 [Computation of PAR] 
Generate samples of the OFDM signal 
K-l 
( 2 
kt 
) 
x(t) 
= 2: cos  
+ ek 
' 
k=l 
0  t  T 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

390 
CHAPTER 8. MULTICARRIER MODULATION AND OFDM 
where K = 3 2, T = 1 s, the sample rate F5 = 200 samples per second, and the 
modulation on each subcarrier is 4-phase PSK; that is, ek takes the possible values 0, 
TT/ 2, TT, 3 rr / 2, selected pseudorandomly. For each realization of x ( t), determine the 
PAR. Repeat the computation of the PAR for 20 different realizations of x ( t) and plot 
the values of the PAR for the 20 different realizations. 
The average power of the sample {Xn} is 
and the peak power is 
1 
199 
2 
Pav= 
200 I Xn 
n=O 
Ppeak: = max{x} 
n 
Hence, the PAR= Ppeak/Pav· The plot of the PAR is shown in Figure 8.5. 
12 
I 
I 
I 
I 
I 
I 
I 
I 
I 
' 
10 
' 
' 
I 
 6 
4 
2 
0 
2 
4 
6 
8 
10 
12 
14 
16 
18 
20 
Realization 
Figure 8.5: PAR values in Illustrative Problem 8.6 
The MATLAB script for the problem is given below. 
---tl&li" ----------------
% MATLAB script for Illustrative Problem 8.6 
T = 1; 
Fs = 200; 
t = 0 : 1/(Fs*T) : T-1/(Fs*T); 
K = 32; 
k=1:K-1; 
rlz = 20; 
% No. of realizations 
PAR = zeros(1,rlz); 
% Initialization for speed 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

8.6. PEAK-TO-AVERAGE POWER RATIO IN OFDM SYSTEMS 
forj=1:rlz 
end 
theta = pi*floor(rand(1,length(k))/0.25)/2; 
x = zeros(1,Fs); 
% Initialization for speed 
echo off; 
for i = 1 : Fs 
for I = 1 : K-1 
x(i) = x(i) + cos(2*pi*l*t(i)!r+theta(l)); 
end 
end 
echo on; 
% Calculation of the PAR: 
P_peak = max(x."2); 
P _av = sum(x. "2)/Fs; 
PARU) = P_peak/P_av; 
% Plotting the results: 
stem(PAR) 
axis([1 20 min(PAR) max(PAR)]) 
xlabel(' Realization') 
ylabel(' PAR') 
---tll!4-il;tfilrijij;t•1:Jl§@I 
Illustrative Problem 8.7 [Limiting the PAR by Clipping the Peaks] 
391 
Repeat Illustrative Problem 8.6, but in this case clip the peak amplitude of the 
samples so that the PAR  3 dB. Define the clipped signal as {.Xn} and compute the 
signal distortion defined as 
1 
199 
D = 200 I (Xn - Xn)2 
n=O 
Plot D for the 20 signal realizations. 
The plot of the signal distortion Dis shown in Figure 8.6. 
The MATLAB script for the problem is given below. 
--®iii! ----------------
% MATLAB script for Illustrative Problem 8.7 
T = 1; 
Fs = 200; 
t = 0 : 1/(Fs*T) : T-1/(Fs*T); 
K = 32; 
k=1:K-1; 
rlz = 20; 
% No. of realizations 
% Initialization for speed: 
PAR = zeros(1,rlz); 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

392 
CHAPTER 8. MULTICARRIER MODULATION AND OFDM 
PAR_dB = zeros(1,rlz); 
D = zeros(1,rlz); 
echo off; 
forj=1:rlz 
theta = pi*floor(rand(1,length(k))/0.25)/2; 
x = zeros(1,Fs); 
% Initialization for speed 
for i = 1 : Fs 
for 1 = 1 : K-1 
x(i) = x(i) + cos(2*pi*l*t(i)/T +theta(l)); 
end 
end 
x_h = x; 
% Calculation of the PAR.: 
[P _peak idx] = max(x. A2); 
P _av = sum(x. A2)/Fs; 
PAR(j) = P _peak/P _av; 
PAR_dB(j) = 10*log10(PARU)); 
% Clipping the peak: 
if P _peak/P _av > 1.9953 
while P _peak/P _av > 1.9953 
x_h(idx) = sqrt(10A0.3*P_av); 
[P _peak idx] = max(x_h. A 2); 
P _av = sum(x_h. A2)/Fs; 
PAR_dB(j) = 1 O*loglO(P _peak/P _av); 
end 
end 
D(j) = sum((x-x_h). A2)/Fs; 
% Distortion 
end 
echo on; 
% Plotting the results: 
stem(D) 
axis ([1 20 min(D) max(D)]) 
xlabel(' Realization') 
ylabel(' Distortion ( D) ') 
20 
18 
I 
16 
14 
e: 12'" 
" 
0 
"€JO,_ 
. 
0 
8,. 
6 
4 
z,_ 
0 
2 
4 
6 
8 
10 
Realization 
12 
14 
16 
18 
20 
Figure 8.6: Distortion plots in Illustrative Problem 8.7 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

8.6. PEAK-TO-AVERAGE POWER RATIO IN OFDM SYSTEMS 
393 
Another method to reduce the PAR in OFDM is to insert different phase shifts 
in each of the subcarriers. These phase shifts can be selected pseudorandomly or by 
means of some algorithm. For example, we may have a small set of stored pseudoran­
domly selected phase shifts that can be used when the PAR in the modulated subcarrier 
is large. The information on which set of pseudorandom phase shifts is used in any sig­
nal interval can be transmitted to the receiver on one of the K subbands. This approach 
is explored in the following illustrative problem. 
---tll!IX-ii;Miri§l#IJ;r•]:J!§®·•----------
Illustrative Problem 8.8 [Reduction of PAR by Random Phase Shifting] 
Generate samples of the OFDM signal 
K-l 
( 2 kt 
) 
x(t) = I cos 7;. 
+ ek + ct>k 
• 
k=l 
0  t  T 
where the phase c/>k is selected from a uniform distribution on interval (0, 2rr) and the 
remaining signal parameters are identical to those in Illustrative Problem 8 .6. Generate 
four sets of uniformly distributed phases {cf> k} , and for each realization of x ( t) , select 
the set that yields the smallest PAR. Repeat this process for 20 different realizations of 
x ( t) and plot the resultant PAR for the 20 realizations of x ( t). 
The plot of the PAR is shown in Figure 8 .7. 
5 
10 
Realization 
15 
Figure 8.7: PAR values in Illustrative Problem 8.8 
20 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

394 
CHAPTER 8. MULTICARRIER MODULATION AND OFDM 
The MATLAB script for the problem is given below. 
---tllli" ----------------
% MATLAB script for Illustrative Problem 8.8 
T = 1; 
Fs = 200; 
t = 0 : 1/(Fs*T) 
T-1/(Fs*T); 
K = 32; 
k=1:K-1; 
rlz = 20; 
PAR = zeros(1,rlz); 
echo off; 
forj=1:rlz 
% No. of realizations 
% Initialization for speed 
theta = pi*floor(rand(1,length(k))/0.25)/2; 
phi = 2*pi*rand( 4,length(k)); 
end 
PAR_phi = zeros(1,size(phi, 1 )); % Initialization for speed 
for m = 1 : size(phi, 1) 
end 
x = zeros(1,Fs); 
% Initialization for speed 
for i = 1 : Fs 
for l = 1 : K-1 
x(i) = x(i) + cos(2*pi*l*t(i)ff +theta(l)+phi(m,l)); 
end 
end 
% Calculation of the PAR: 
P _peak = max(x. A2); 
P _av = sum(x. A 2)/Fs; 
PAR_phi(m) = P _peak/P _av; 
[PARU) idx_theta]= min(PAR_phi); 
echo on; 
% Plotting the results: 
stem(PAR) 
axis ([1 20 min(PAR) max(PAR)] ) 
xlabel(' Realization') 
ylabel(' PAR') 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
395 
Problems 
8.1 Repeat Illustrative Problem 8.2 by generating an OFDM signal that transmits the 
four 16-point QAM information symbols (Xi, X2, X3, X4). 
8.2 Repeat Illustrative Problem 8.2 by generating an OFDM signal that transmits the 
K 
= 16 information symbols (Xo, Xi, ... , Xis) selected from the four-phase PSK con­
stellation. Use the FFf algorithm to compute the DFf and IDFT. 
8.3 Repeat Illustrative Problem 8 .3 for the K = 16 OFDM signal that consists of the in­
formation symbols (Xo, Xi, ... , Xis) selected from the four-phase PSK constellation. 
Use the FFT algorithm to compute the DFf and IDFT. 
8.4 Compute the Fourier transform of the OFDM signal given in (8 .2 .3), where K 
= 16 
and the symbols (Xo, Xi, ... , Xis) selected from the four-phase PSK constellation. 
Plot the magnitude IX(j) I for the OFDM signal. 
8.5 Repeat Illustrative Problem 8.6 for the same signal parameters. 
8.6 Repeat Illustrative Problem 8.7 for the PAR::; 4 dB and for the PAR::; 6 dB. 
8.7 Repeat Illustrative Problem 8.8 for K = 8, four-phase PSK transmitted symbols. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

Copyright 2011 Cengage Learning. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

Chapter 9 
Digital Transmission Through 
Wireless Channels 
9.1 
Preview 
In Chapter 6, we treated digital modulation and demodulation methods for channels 
characterized as linear time-invariant filters whose outputs are corrupted by additive 
white Gaussian noise. Such a channel model is appropriate for characterizing phys­
ical channels that are relatively stable (e.g., wireline channels). In contrast, wireless 
communication channels, such as radio and underwater acoustic channels, have trans­
mission characteristics that are time varying; hence, a more complex model is needed 
to describe their behavior. We cite two examples of radio communication channels that 
exhibit time varying characteristics. 
Signal Transmission via Ionospheric Propagation 
Sky-wave propagation results from transmitted signals being reflected (bent or re­
fracted) from the ionosphere, which consists of several layers of charged particles 
ranging in altitude from 50 to 400 km above the surface of the earth. As a consequence 
of these ionospheric layers, the signal arrives at the receiver via different propagation 
paths at different delays. These signal components are called multipath components. 
The signal multipath components generally have different carrier-phase offsets; hence, 
they may add destructively at times, resulting in a phenomenon called signal fading. 
To characterize such channel behavior, a time-varying impulse response model is ap­
propriate. 
Mobile Cellular Transmission 
In mobile cellular radio transmission, the signal transmitted from the base station to 
the mobile receiver is usually reflected from surrounding buildings, hills, or other 
397 
Copyright 2011 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not material1y affect the overall learning experience. Cengage Leaming reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

398 
CHAPTER 9. TRANSMISSION THROUGH WIRELESS CHANNELS 
obstructions. As a consequence, multiple propagation paths arrive at the receiver at 
different delays. Hence, the received signal has characteristics similar to those for 
ionospheric propagation. The same is true of transmission from the mobile station to 
the base station. Moreover, the traveling speed of the mobile station (i.e., automo­
bile, train) results in frequency offsets, called Doppler shifts, of the various frequency 
components of the signal. 
9 .2 
Channel Models for Time-Variant Multipath 
Channels 
There are basically two distinct characteristics of the radio channels we just described. 
First, the transmitted signal arrives at the receiver via multiple propagation paths, each 
of which has an associated propagation time delay. Second, the time variations can 
occur either in the structure of the medium, such as the ionosphere, or the motion and 
position of the transmitter and receiver relative to the terrain between them. As a result 
of such time variations, the channel's response to any signal transmitted through it will 
change with time. In other words, the impulse response of the channel varies with time. 
In general, the time variations in the received signal appear to be unpredictable to the 
user of the channel. This leads us to characterize the time-variant multipath channel 
statistically. 
To obtain a statistical description of the channel, consider the transmission of an 
unmodulated carrier 
s(t) = Acos2rrfct 
The received signal in the absence of noise may be expressed as 
x(t) =AL O<n(t) cos[2rrfc(t - Tn(t)] 
n 
= ARe [  O<n(t)e-J2rrfcTn(t) eJ2rrfct] 
= Re [ C (t)eJ2rrfct] 
(9.2.1) 
(9.2.2) 
where O<n ( t) is the time-variant attenuation factor associated with the nth propagation 
path and T n(t) is the corresponding propagation delay. The complex-valued signal 
c(t) = L O<n(t) e-J2rrfcTn(t) 
n 
= L O<n(t)e-J<f>n(t) 
(9 .2.3) 
n 
represents the response of the channel to the complex exponential exp (j 2 rr fc t) . Al­
though the input to the channel is a monochromatic signal (i.e., a signal at a single 
frequency), the output of the channel consists of a signal that contains many differ­
ent frequency components. These new components are generated as a result of the 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

9.2. CHANNEL MODELS FOR TIME-VARIAN T MULTIPATH CHANNELS 399 
time variations in the channel response. The r.m.s. (root-mean-square) spectral width 
of c ( t) is called the Doppler frequency spread of the channel and is denoted as Bd. 
This quantity is a measure of how rapidly the signal c(t) is changing with time. If 
c ( t) changes slowly, the Doppler frequency spread is relatively small; if c ( t) changes 
rapidly, the Doppler frequency spread is large. 
We may view the received complex-valued signal c(t) in (9.2.3) as the sum of a 
number of vectors (phasors), each of which has a time-variant amplitude CXn(t) and 
phase c:/>n(t). In general, it takes large dynamic changes in the physical medium to 
cause a large change in { CXn ( t)}. On the other hand, the phases { c:/>n ( t)} will change by 
2 rr radians whenever { T n ( t) } changes by 1 If c . But 1 I fc is usually a small number; 
hence, the phases { c:/>n(t)} change by 2rr or more radians with relatively small changes 
of the medium characteristics. We also expect the delays { T n ( t)} associated with the 
different signal paths to change at different rates and in an unpredictable (random) 
manner. This implies that the complex-valued signal c(t) in (9.2.3) can be modeled 
as a random process. When there are a large number of signal propagation paths, c ( t) 
can be modeled as a zero-mean complex-valued Gaussian random process. 
The multipath propagation model for the channel, embodied in the received signal 
x(t) or, equivalently, c(t) given by (9.2.3), results in signal fading. The fading phe­
nomenon is primarily a result of the time-variant phase factors { c:/>n(t)}. At times, the 
complex-valued vectors in c ( t) add destructively to reduce the power level of the re­
ceived signal. At other times, the vectors in c(t) add constructively to produce a large 
signal value. The amplitude variations in the received signal due to the time-variant 
multipath propagation in the channel are usually called signal fading. 
The time span between the first and the last arriving multipath components in a 
transmitted signal is called the multipath (time) spread of the channel. We denote 
this channel parameter as Tm. A related parameter is the reciprocal of the multipath 
spread, which provides a measure of the bandwidth over which frequency components 
of the transmitted signal will be affected similarly by the channel. Thus, we define the 
channel parameter 
1 
Bcb = 
-
Tm 
(9.2.4) 
and call it the coherence bandwidth of the channel. For example, all frequency com­
ponents of a transmitted signal that fall within the coherence bandwidth Bcb will fade 
simultaneously. If the transmitted signal has a bandwidth W < Bcb, the channel is 
called frequency nonselective. Thus, at any instant in time, all frequency components 
of the transmitted signal fade simultaneously. On the other hand, if the transmitted 
signal has a bandwidth W > Bcb, the frequencies in the signal separated by an amount 
greater than Bcb will be affected differently by the channel. Hence, at any instant, some 
frequency components in the transmitted signal may fade, whereas other frequency 
components may not. In such a case, the channel is said to be frequency selective. 
Another related channel parameter is the reciprocal of the Doppler spread, which 
measures the time interval over which the channel response will change very little. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

400 
CHAPTER 9. TRANSMISSION THROUGH WIRELESS CHANNELS 
Thus, we define the parameter 
(9.2.5) 
and call it the coherence time of the channel. For example, a signal that is transmitted at 
two different time instants, separated in time by an amount less that Tct, will be affected 
similarly by the channel. Hence, if the signal that is transmitted in the first time instant 
is highly attenuated by the channel, the signal transmitted in the second time instant 
will also be highly attenuated. On the other hand, if the time interval between the 
signal transmissions is much greater than the coherence time Tct, the channel will 
likely affect the two signal transmissions differently. 
Illustrative Problem 9.1 [Relationship of Channel Parameters] 
A shortwave ionospheric radio channel is characterized by a multipath spread of 
Tm = 5 ms and a Doppler spread of Bd = 0.1 Hz. Determine the coherence bandwidth 
and the coherence time of the channel. 
The coherence bandwidth of the channel is 
1 
Bcb 
= Tm 
= 200 Hz 
The coherence time of the channel is 
1 
Tct = 
-
= 10 s 
Bd 
In (9.2.2) and (9.2.3), we characterized the response of a time-varying multipath 
channel to a single sinusoid. More generally, a physical channel with time-varying 
transmission characteristics may be characterized as a time-varying linear filter. Such 
a linear filter is described by a time-varying impulse response c ( T; t) , where c ( T; t) 
is the response of the channel at time t to an impulse at time t - T. Thus, T denotes 
the "age" (elapsed time) variable. The corresponding frequency response of the time­
varying channel is given by the Fourier transform of c(T; t) with respect to the T­
variable and is denoted as C (j; t) . 
9.2.1 
Frequency Nonselective Channel 
Let us consider the transmission of a signal s(t) over a linear time-varying channel 
with the frequency response C (j; t). If S (j) denotes the spectrum of the transmitted 
signal, the received signal is given in the frequency domain as C(j; t)S(j) = R(j) 
and in the time domain as the inverse Fourier transform of R (j); that is, 
r(t) = f 00 C(j; t)S(j)ej2rrft dj 
(9.2.6) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

9.2. CHANNEL MODELS FOR TIME-VARIANT MULTIPATH CHANNELS 
401 
Now, suppose that the bandwidth W of the transmitted signal s(t) satisfies the 
condition W « Bcb, so that the channel is frequency nonselective. This condition 
implies that, over the bandwidth range ( -W, W) occupied by the transmitted signal, 
the frequency response is constant in the frequency variable f and may be denoted as 
C(j; t)lt=o 
= C(O; t) = c(t) 
Therefore, Equation (9 .2 .6) simplifies to 
r(t) = c(t) f :°" S(j)ejZrrft df 
= c(t)s(t) 
(9.2.7) 
(9.2.8) 
Consequently, in a frequency nonselective channel, the channel distorts the transmitted 
signal in a multiplicative manner, as illustrated in Figure 9 .1. 
Another view of the frequency nonselective channel is obtained when the signal 
s(t) with bandwidth W has a time duration T ;:: l/W; because W « Bcb = l/Tm, it 
follows that T » Tm. In this case, the time dispersion due to the channel multipath is 
much smaller than the time duration T of the transmitted signal. Hence, the channel 
multipath components, whose amplitudes and phases are given by Equation (9.2.3), 
are not resolvable. Thus, they are seen only as a single disturbance that multiplies the 
transmitted signal s(t) as shown in Figure 9.1 and causes fading. 
Slow Fading Frequency Nonselective Channel 
The frequency nonselective channel model illustrated in Figure 9.1 applies when the 
transmitted signal bandwidth W satisfies the condition W « Bcb. A further simplifica­
tion occurs when the coherence time Tct of the channel is much larger than the signal 
time duration T (i.e., Tct » T). In this case, the channel characteristic c(t) may be 
treated as a constant over the signal duration T and may be expressed as 
c(t) 
= cx(t)eN>Ctl 
, 0::; t ::; T 
= cxeN> 
, O ::; t ::; T 
We call such a channel a slowly fading,frequency nonselective channel. 
Transmitted Signal 
s(t) 
c(t) 
Received Signal 
r(t) 
AWGN 
(9.2.9) 
Figure 9 .1: Model of a frequency nonselective time-varying channel with AWGN 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

402 
CHAPTER 9. TRANSMISSION THROUGH WIRELESS CHANNELS 
--li!!il;tyil2tj#lij;te]:J!#j@I 
Illustrative Problem 9.2 Consider the radio channel in Illustrative Problem 9.1. The 
signal s(t) transmitted over the channel has a bandwidth W 
= 50 Hz and a time du­
ration of T  l/W 
= 20 ms. Is this a frequency nonselective channel? Is the channel 
slowly fading? 
Because the bandwidth W « Bcb = 200 Hz, the channel is frequency nonselective. 
Furthermore, because T « Tct 
= 10 seconds, the channel is also slowly fading. 
Frequency Nonselective Rayleigh Fading Channels 
In the channel model illustrated in Figure 9 .1, the complex-valued channel gain may 
be expressed as 
where 
c(t) = Cr(t) + }ci(t) 
= ex(t)ei<f>(t) 
ex(t) = 1d(t) +cf (t) 
c-(t) 
cf> ( t) = arc tan ___!____( ) 
Cr t 
(9.2.10) 
(9.2.11) 
When c(t), as given by (9.2.3), consists of many nonresolvable multipath components 
having random amplitude and uniformly distributed phases, the two components Cr ( t) 
and Ci(t) are usually modeled as zero-mean, Gaussian random processes with zero 
cross-correlation. Therefore, ex(t) is characterized statistically by the Rayleigh prob­
ability distribution and cf>(t) is uniformly distributed over the interval (0, 2rr). As a 
consequence, the channel is called a Rayleigh fading channel. The Rayleigh fading 
signal amplitude is described by the Probability Density Function (PDF) 
ex 	 O 
(9.2.12) 
and j(ex) = 0 for ex< 0. The parameter a2 
= E(c;) = E(cf ). 
--li!!IJ§jl;ful2tj#lij;{e]:)!#j@I 
Illustrative Problem 9.3 [Generation of Rayleigh Random Variables] 
Using the method described in Section 2.2, generate a sequence of 200 statistically 
independent and identically distributed Rayleigh random variables. Plot the histogram 
for the 200 symbols and compare it with the corresponding Rayleigh probability den­
sity function. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

9.2. CHANNEL MODELS FOR TIME-VARIANT MULTIPATH CHANNELS 
403 
We may use (2.2.14) to generate the 200 samples from a Rayleigh distribution, where 
the parameter A is generated from a uniform distribution in the interval (0, 1) and u2 
may be arbitrary selected as unity. Then the actual Rayleigh PDF is given by (9.2.12). 
Figure 9 .2 illustrates the histogram and the comparison with the actual Rayleigh PDF. 
0.6 
0.4 
0.2 
(a) Histogram for N=20000 samples 
2 
3 
(b) Rayleigh PDF 
4 
Figure 9.2: Plots for Illustrative Problem 9.3 
The MATLAB script for the problem is given below. 
5 
---tl®'i" ---------------
% MATLAB script for Illustrative Problem 9 .3 . 
N 
= 20000; 
x 
= 0:0.1 :5; 
sigma 
= 1: 
u 
= rand(1,N); 
r 
= sigma*sqrt(-2*log(u)); 
r_ac 
= x/sigmaA2.*exp(-(x/sigma). A2/2); 
% Plot the results: 
subplot(2, 1, 1) 
hist(r,x); 
xlabel(' (a) Histogram for N=20000 
axis([O 5 0 1500]) 
subplot(2, 1,2) 
plot(x,r_ac) 
xlabel(' ( b) Rayleigh PDF') 
% Number of samples 
% Rayleigh parameter 
% Rayleigh distributed random data 
% Rayleigh PDF 
samples') 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

404 
CHAPTER 9. TRANSMISSION THROUGH WIRELESS CHANNELS 
9.2.2 
Frequency Selective Channel 
The frequency nonselective, slowly fading channel model described above applies to 
many physical radio channels used for digital communications. However, there are 
communication systems in which the transmitted signal bandwidth W » Bcb, so that 
the channel is frequency selective. In such a case, a more complex channel model must 
be employed. 
Tapped Delay Line Channel Model 
A general model for a time-variant multipath channel is illustrated in Figure 9.3. The 
channel model consists of a tapped delay line with uniformly spaced taps. The tap 
spacing between adjacent taps is l/W, where W is the bandwidth of the signal trans­
mitted through the channel. Hence, l/W is the time resolution that can be achieved 
by transmitting a signal of bandwidth W. The tap coefficients, denoted as {en ( t) = 
an(t)ei<f>n(t)}, are usually modeled as complex-valued, Gaussian random processes 
that are mutually uncorrelated. The length of the delay line corresponds to the amount 
of time dispersion in the multipath channel, which is the multipath spread. The multi­
path spread may be expressed as Tm = L / W, where L represents the maximum number 
of possible multipath signal components. 
Input ._.1•----Tm----·1 
Signal 
'-- + ,__._.Channel 
Output 
Additive 
Noise 
Figure 9 .3: Model for time-variant multipath channel. 
Illustrative Problem 9.4 [Two-path Channel] Determine an appropriate channel 
model for two-path ionospheric propagation, where the relative time delay between 
the two received signal paths is one millisecond and the transmitted signal bandwidth 
W is 10 kHz. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

9.2. CHANNEL MODELS FOR TIME-VARIANT MULTIPATH CHANNELS 
405 
A 10-kHz signal can provide a time resolution of l/W = 0.1 ms. Because the relative 
time delay between the two received signal paths is one millisecond, the tapped delay 
line model consists of 10 taps. In this case, only the first tap and the last tap have 
nonzero, time-varying coefficients, denoted as c1 (t) and c2 (t), as shown in Figure 9.4. 
Because c1 ( t) and c2 ( t) represent the signal response of a large number of ionized 
particles from two different regions of the ionosphere, C1 (t) and c2 (t) are modeled as 
complex-valued, uncorrelated Gaussian random processes. The rate of variation of the 
tap coefficients determines the value of the Doppler spread for each path. 
Channel 
Input 
Channel 
+ 
---
Output 
Noise 
Figure 9 .4: Figure for Illustrative Problem 9 .3 
9.2.3 
Modeling of the Doppler Power Spectrum 
When the tap coefficients {Ck ( t)} in the tapped delay line channel model are character­
ized as Gaussian random processes, they may be easily generated by passing complex­
valued white Gaussian noise through a lowpass filter whose bandwidth is selected to 
match the Doppler spread characteristics of the channel. 
---ti!!lii;MiltJjj;t•]:J!@@·I----------
Illustrative Problem 9.5 [Generation of Tap Weight Coefficients] Let us use a sim­
ple digital IIR filter that is excited by complex-valued white Gaussian noise to generate 
a sampled version of a channel tap weight coefficients. The lowpass IIR filter with two 
identical poles is described by the z-transform 
(1 - p)2 
H(z) = 
(1 - pz-I )2 
and the corresponding difference equation 
(1 - p)2 
1 - 2pz-l + p2z-2 
Cn 
= 2pCn-I - p2Cn-2 + (1 - p)2Wn 
(9.2.13) 
(9.2.14) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

406 
CHAPTER 9. TRANSMISSION THROUGH WIRELESS CHANNELS 
where { Wn = Wnr + }Wni} is the input AWGN sequence, { Cn} is the output sequence, 
and 0 < p < 1 is the pole position. The position of the pole controls the bandwidth 
of the filter and, hence, the rate of variations of {en}. When p is close to the unit 
circle, the filter bandwidth is narrow, whereas when p is close to zero, the bandwidth is 
wide. Generate 1000 samples of {en= Cnr +}end when p = 0.9 and p = 0.99, and 
plot {Cnr}, {end and {I Cn I} for each value of p. Also, compute and plot the power 
spectrum and the autocorrelation function of { Cn} for the two values of p. 
Figures 9.S(a) and 9 .5(b) illustrate time variation in the values of the tap weight coeffi­
cients for p = 0.9 and p = 0.99, respectively. Figures 9.5(c) and 9.5(d) illustrate the 
autocorrelation functions and power spectra of the corresponding values of p. Note the 
relationship between the rate of time variations in the coefficients with the bandwidth 
of the power spectrum, which is identical to the bandwidth of the digital filter. 
The MATLAB script for the problem is given below. 
---411®1'' 11--	
 
% MATLAB script foar Illustrative Problem 9 .5 
N = 1000; 
% Number of samples 
M = 50; 
% Length of the autocorrelation fanction 
p = [0.9 0.99]; 
% Pole positions 
w = 1/sqrt(2)*(randn(1,N) + 1 i*randn(1,N)); % AWGN sequence 
% Preallocation for speed: 
c = zeros(length(p),N); 
Rx = zeros(length(p),M+1); 
Sx = zeros(length(p),M+1); 
for i = 1 :length(p) 
end 
for n = 3:N 
c(i,n) = 2*p(i)*c(n-1) - power(p(i),2)*c(n-2) + power((1-p(i)),2)*w(n); 
end 
% Calculation of autocorrelations and power spectra: 
Rx(i,:) = Rx_est(c(i,:),M); 
Sx(i, :)=fftshift(abs(fft(Rx(i, :) ) ) ) ; 
% Plot the results: 
subplot(3,2, 1) 
plot(real(c(1,:))) 
axis([O N -max(abs(real(c(1,:)))) max(abs(real(c(1,:))))]) 
title(' \it { p} 
= 0 . 9 ') 
xlabel(' \it{n} ') 
y label( ' \it { c _ { nr } } ' ) 
subplot(3,2,2) 
plot(real(c(2, :))) 
axis([O N -max(abs(real(c(2, :)))) max(abs(real(c(2, :))))]) 
title(' \it { p} 
= D • 9 9 ') 
xlabel( ' \it { n} ' ) 
y label( ' \it { c _ { nr} } ' ) 
subplot(3,2,3) 
plot(imag(c(1, :))) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

9.2. CHANNEL MODELS FOR TIME-VARIAN T MULTIPATH CHANNELS 
407 
axis([O N -max(abs(irnag(c(1,:)))) max(abs(irnag(c(1,:))))]) 
title( ' \it { p} 
= 0 • 9 ' ) 
xlabel(' \it{n} ') 
ylabel(' \it{c_ {ni}} ') 
subplot(3,2,4) 
plot(irnag(c(2, :))) 
axis([O N -max(abs(irnag(c(2,:)))) max(abs(irnag(c(2,:))))]) 
title( ' \it { p} 
= 0 • 9 9 ' ) 
xlabel(' \it{n} ') 
ylabel(' \it { c _ { ni} } ') 
subplot(3,2,5) 
plot(abs(c(1,:))) 
axis([O N 0 max(abs(c(1,:)))]) 
title( ' \it { p} 
= 0 • 9 ' ) 
xlabel(' \it{n} ') 
ylabel(' \it{ I c_n I}') 
subplot(3,2,6) 
plot(abs(c(2, :))) 
axis([O N 0 max(abs(c(2,:)))]) 
title( ' \it { p} 
= O • 9 9 ' ) 
xlabel(' \i t{n} ') 
ylabel(' \it { I c _ n I } ') 
figure 
subplot(2,2, 1) 
plot(abs(Rx(1,:))) 
axis([O M 0 max(abs(Rx(1,:)))]) 
title( ' \it { p} 
= 0 • 9 ' ) 
xlabel(' \it { n} '); ylabel(' \it { I R _ { c }( n) I } ') 
subplot(2,2,2) 
plot(abs(Rx(2, :))) 
title(' \it { p} 
= 0 • 9 9 ') 
xlabel('\it{n} '); ylabel('\it{ IR_{c}(n) I}') 
axis([O M 0 max(abs(Rx(2,:)))]) 
subplot(2,2,3) 
plot(Sx(1,:)) 
title(' \it { p} 
= 0 • 9 ') 
xlabel(' \i t{f} '); ylabel(' \i t{S_ { c} ( f)} ') 
axis([O M 0 max(abs(Sx(1,:)))]) 
subplot(2,2,4) 
plot(Sx(2, :) ) 
title(' \it { p} 
= 0 . 9 9 ') 
xlabel(' \it{f} '); ylabel(' \i t{S_ { c} ( f)} ') 
axis([O M 0 max(abs(Sx(2,:)))]) 
Jakes' Model for the Doppler Power Spectrum 
A widely used model for the Doppler power spectrum of a mobile radio channel is the 
so-called Jakes' model. In this model, the autocorrelation of the time-varying transfer 
function C Uc; t) is given as 
E [ C* Uc; t)CUc; t + t)] 
= Jo(2TTfmt) 
(9.2.15) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

408 
CHAPTER 9. TRANSMISSION THROUGH WIRELESS CHANNELS 
p =0.9 
0.5 
-0.5 
0 
100 200 300 400 500 600 700 800 900 1000 
n 
p =0.9 
0.6 --- 
0.4 
0.2 
6 oIW"1\11'1¥W'/llf,l,IMfrwlfiliolrtWfl 
-0.2 
-0.4 
-0.6 -- -! 
0 
1 
0.8 
-o0.6 
_Q_ 
0.4 
0.2 
100 200 300 400 500 600 700 800 900 1000 
n 
p =0.9 
i 
100 200 300 400 500 600 700 800 900 1000 
n 
x 10-3 
p =0.9 
5 
4 
2 
0o 
5 
10 
15 
20 
25 
30 
35 
40 
45 
50 
0.025 
0.02 
J, 0.015 
0.01 
0.005 
n 
p=0.9 
5 
10 
15 
20 
25 
30 
35 
40 
45 
50 
f 
p = 0.99 
0.5 
o 
0 
-0.5 
-1 
0 
100 200 300 400 500 600 700 800 900 1000 
n 
0.5 
o 
0 
-0.5 
-1 
p = 0.99 
--- 
0 
100 200 300 400 500 600 700 800 900 1000 
n 
0.5 
0.05 
0.04 
 0.03 
s. 
0.02 
0.01 
0.5 
0.4 
0.3 
Cl)" 
0.2 
0.1 
p = 0.99 
100 200 300 400 500 600 700 800 900 1000 
n 
p = 0.99 
5 
10 
15 
20 
25 
30 
35 
40 
45 
50 
n 
p = 0.99 
5 
10 
15 
20 
25 
30 
35 
40 
45 
50 
f 
Figure 9.5: Plots for Illustrative Problem 9.5. Note that plots have different vertical 
scalings. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

9.2. CHANNEL MODELS FOR TIME-VARIANT MULTIPATH CHANNELS 409 
where Jo ( · ) is the zero-order Bessel function of the first kind, which was introduced 
previously in Chapter 3 for characterizing the spectrum of an angle-modulated signal, 
and J m = v Jc I c is the maximum Doppler frequency, where v is the vehicle speed 
in meters per second (mis), Jc is the carrier frequency, and c is the speed of light 
( 3 x 108 mis). The Fourier transform of the autocorrelation function in (9 .2 .15) yields 
the Doppler power spectrum. That is, 
Sc(f) = J:00 fo(2rrfmD.t)e-jZrrfM dD.t 
Iii ::; fm 
Iii >fm 
The graph of Sc (j) is shown in Figure 9 .6. 
fmS(f) 2.5 
2 
1.5 
0.5 
_q.5 
-1 
-0.5 
0 
0.5 
f lfm 
1.5 
Figure 9 .6: Doppler power spectrum obtained from Jakes' model 
--tiMIU-il;tfilTjij;t•1:Jl§@I 
Illustrative Problem 9.6 (Jakes' Doppler Power Spectrum] 
Determine the Doppler power spectrum of the fading process experienced by a 
mobile telephone user in an automobile traveling at a speed of 100 km/hour. 
The 
carrier frequency for the mobile telephone system is 1 GHz. 
At the speed of 100 km/hour, the vehicle speed is v = 28 mis. Therefore, the maximum 
Doppler frequency is 
fm = Vfc/C 
= 28 x 109 /3 x 108 
= 93Hz 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

410 
CHAPTER 9. TRANSMISSION THROUGH WIRELESS CHANNELS 
and the Doppler power spectrum is 
S(f) = 
1 
, 
Iii  im 
93rrl - (f /93)2 
and zero for Iii > im· 
9 .3 
Performance of Binary Modulation in Rayleigh 
Fading Channel 
In this section we determine the probability of error at the receiver of a binary digital 
communication system that transmits information through a Rayleigh fading channel. 
First, we consider transmission through a frequency nonselective channel. 
9.3.1 
Performance in Frequency Nonselective Channel 
The signal bandwidth W is assumed to be much smaller than the coherence bandwidth 
Bcb of the channel, so that the frequency nonselective channel model that is shown 
in Figure 9.1 applies, with c(t) = cx(t)eN><t). We assume that the time variations 
in c(t) are very slow compared with the bit interval, so that within the time interval 
0  t  T, c(t) is a constant (i.e., c = cxeN>), where ex is Rayleigh distributed with 
PDF 
i (ex) = 1 :;
2 
e-oc2 /Za-2 
ex ;;:: 0 
0, 
otherwise 
and</> is uniformly distributed over the interval (0, 2rr). 
(9.3.1) 
Now, suppose that binary antipodal signals (e.g., binary PSK) are used to transmit 
the information through the channel. Hence, the two possible signals are 
rm 
Sm(t) = \J T cos(2rrict + mrr), 
m=O,l 
(9.3.2) 
The received signal in the interval 0  t  T is 
r(t) =ex cos(2rrict + mrr + </>) + n(t) 
(9.3.3) 
where </> is the carrier-phase offset. Now, assume that </> is perfectly estimated at the 
demodulator, which cross-correlates r(t) with 
0  t  T 
lfJ(t) = H cos(2rrict + </>), 
Hence, the input to the detector at the sampling instant is 
y = cx,,/Eb cosmrr + n, 
m= 0,1 
(9 .3.4) 
(9.3.5) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

9.3. BINARY MODULATION IN RAYLEIGH FADING CHANNEL 
411 
For a fixed value of ex, the probability of error is the familiar form 
(9.3.6) 
P2 (ex) is the conditional probability of error for a given value of the channel attenuation 
ex. To determine the probability of error averaged over all possible values of ex, we 
compute 
P2 = fa'° P2 (ex) f (ex) dex 
(9.3.7) 
where j(ex) is the Rayleigh PDF given by (9.3.1). This integral has the simple closed-
form expression 
1 [ /{5;-J 
P2 = z 
1 - \j l+{J; , 
(9.3.8) 
where, by definition, 
-
EbE( 2) 
Pb= -
ex 
No 
(9.3.9) 
Hence, Pb is the average received SNR/bit and E(ex2) = 2cr2• 
Illustrative Problem 9.7 [Monte Carlo Simulation of Antipodal Signals] 
Perform a Monte Carlo simulation to estimate and plot the error probability of a 
binary antipodal signaling communication system in Rayleigh fading. Thus, simulate 
the input to the detector as given in (9.3.5), where the additive noise is Gaussian, with 
zero mean and unit variance and ex is Rayleigh distributed with cr2 selected to be unity. 
Then vary the average SNR p b in the simulation. Plot the estimated error probability 
and the theoretical value given in (9.3.8). Select the sample size for the simulation to 
be N = 10, 000. 
Figure 9 .7 illustrates the result of the Monte Carlo simulation and the comparison with 
the theoretical error probability. 
The MATLAB script for the problem is given below. 
% MATLAB script for Illustrative Problem 9 .7 
Eb= 1; 
EbNo_dB = 0:5:35; 
No_over_2 = Eb*10. A ( -EbNo_dB/10); 
sigma = 1; 
BER = zeros(1,length(EbNo_dB)); 
% Energy per bit 
% Noise power 
% Rayleigh parameter 
% Calculation of error probability using Monte Carlo simulation: 
for i = 1 :length(EbNo_dB) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

412 
CHAPTER 9. TRANSMISSION THROUGH WIRELESS CHANNELS 
---+-- Monte Carlo simulation 
--e- Theoretical value 
10-5 
0 
5 
10 
15 
20 
25 
Average SNR/bit (dB) 
30 
35 
Figure 9.7: Result of Monte Carlo simulation in Illustrative Problem 9.7 
end 
no_errors = O; 
no_bits = O; 
% Assumption: m 
= 0 (All zero codeword is transmitted): 
while no_errors <= 100 
end 
u = rand; 
alpha = sigma* sqrt( -2*log( u)) ; 
noise = sqrt(No_over_2(i))*randn; 
y = alpha*sqrt(Eb) + noise; 
if y <= 0 
y_d = 1; 
else 
y_d = O; 
end 
no_bits = no_bits + 1 ; 
no_errors = no_errors + y_d; 
BER(i) = no_errors/no_bits; 
% Calculation of error probability using the theoretical formula: 
rho_b = Eb./No_over_2; 
P2 = 1 /2*(1-sqrt(rho_b./(1 +rho_b))); 
% Plot the results: 
semilogy(EbNo_dB,BER,' -* ',EbNo_dB,P2,' -o ') 
xlabel('Average SNR/bit (dB)') 
ylabel( 'Error Probability') 
legend(' Monte Carlo simulation',' Theoretical value') 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

9.3. BINARY MODULATION IN RAYLEIGH FADING CHANNEL 
413 
If the binary signals are orthogonal, as in orthogonal FSK, where the two possible 
transmitted signals are 
Sm(t) = cos [ 2rr (Jc+ ;;, ) t J, 
m=O,l 
then the received signal is 
r(t) = ()( cos [ 2rr (!c + ;;, ) t +cf> J + n(t) 
In this case, the received signal is cross-correlated with the two signals 
l/J1(t) =  cos(2rrfct + </>) 
l/J2(t) = cos [ 2rr (Jc+ 2) t +cf> J 
If m = 0, for example, then the two correlator outputs are 
r1 = (){.JEb + n1 
r2 = n2 
(9.3.10) 
(9.3.11) 
(9.3.12) 
(9.3.13) 
where n1 and n2 are the additive noise components at the outputs of the two correla­
tors. Hence, the probability of error is simply the probability that r2 > r1. Because 
the signals are orthogonal, the probability of error for a fixed value of()( has the famil-
iar form 
(9.3.14) 
As in the case of antipodal signals, the average probability of error over all values of()( 
is determined by evaluating the integral in (9.3.7). Thus, we obtain 
l [ ] 
P2 = 2 
1 
- \j 2+{J;; 
(9.3.15) 
where Pb is the average SNR/bit defined by Equation (9.3.9). 
Illustrative Problem 9.8 [Monte Carlo Simulation of Orthogonal Signals] 
Perform a Monte Carlo simulation to estimate and plot the error probability of a 
binary orthogonal signaling communication system in Rayleigh fading. Thus, simu­
late the input to the detector as given in (9.3.13), where the additive noise terms n1 
and n2 are independent, zero-mean, Gaussian with unit variance and ()( is Rayleigh 
distributed with a-2 selected to be unity. Plot the estimated error probability and the 
theoretical value given in (9.3.15) for different values of Pb· Select the sample size for 
the simulation to be N = 10, 000. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

414 
CHAPTER 9. TRANSMISSION THROUGH WIRELESS CHANNELS 
Figure 9 .8 illustrates the result of the Monte Carlo simulation and the comparison with 
the theoretical error probability. 
--+-- Monte Carlo simulation 
--e-- Theoretical value 
g 
UJ 
10-4 
0 
5 
10 
15 
20 
25 
Average SNR/bit (dB) 
30 
35 
Figure 9.8: Result of Monte Carlo simulation in Illustrative Problem 9.8 
The MATLAB script for the problem is given below. 
-41®1i" 11---------------
% MATLAB script for Illustrative Problem 9 .8 
Eb= 1; 
EbNo_dB = 0:5:35; 
EbNo = 10. A(EbNo_dB/1 O); 
No_over_2 = Eb*10.A(-EbNo_dB/10); 
sigma = 1; 
BER = zeros(1,length(EbNo)); 
% Energy per bit 
% Noise power 
% Rayleigh parameter 
% Calculation of error probability 
for i = 1 :length(EbNo) 
using Monte Carlo simulation: 
no_errors = 0; 
no_bits = O; 
% Assumption: m 
= 0 (All zero codeword is transmitted): 
while no_errors <= 100 
no_bits = no_bits + 1; 
u = rand; 
alpha = sigma* sqrt( -2*log( u)) ; 
noise = sqrt(No_over_2(i))*randn(1,2); 
r(1) = alpha*sqrt(Eb) + noise(1); 
r(2) = noise(2); 
if r(1) >= r(2) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

9.3. BINARY MODULATION IN RAYLEIGH FADING CHANNEL 
r_d 
= O; 
else 
r_d 
= 1; 
end 
no_errors 
= no_errors + r_d; 
end 
BER(i) 
= no_errors/no_bits; 
end 
% Calculation of error probability using the theoretical formula: 
rho_b 
= Eb./No_over_2; 
P2 
= 1/2*(1-sqrt(rho_b./(2+rho_b))); 
% Plot the results: 
sernilogy(EbNo_dB,BER, • -* • ,EbNo_dB,P2, • -o • ) 
xlabel( 'Average SNR/bit (dB) ') 
ylabel( 'Error Probability') 
legend(' Monte Carlo simulation',' Theoretical value') 
415 
A comparison of the error probabilities for antipodal and orthogonal signals in 
Rayleigh fading is illustrated in Figure 9 .9. The striking aspects of these graphs is the 
slow decay of the probability of error as a function of SNR. In fact, for large values of 
!5 
Ji 
. 
o:i "' 
"O ;., 
. 
 
* 
£ 
°' 
i:i. 
0.5 
0.2 
10-1 
..... 
'"' 
" ""' 
5 
2 
"'  OrtJ
gonal Signals 
10-2 
5 
2 
10-3 
5 
2 
10-4 
5 
2 
10-5 
0 
5 
10 
"'" K 
""' 
  
I/'\.'  
Antipodal 
""' 
Signals 
"\  
' 
' 
15 
20 
25 
30 
35 
SNR/Bit, dB 
Figure 9 .9: Performance of binary signaling in Rayleigh fading channel 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

416 
CHAPTER 9. TRANSMISSION THROUGH WIRELESS CHANNELS 
p b, the probability of error for binary signals is 
and 
P -
1 
2 - -2-
Pb 
antipodal signals 
orthogonal signals. 
(9.3.16) 
Hence, the probability of error in both cases decreases only inversely as the SNR. This 
is in contrast to the exponential decrease in the case of the A WGN channel. We also 
note that the difference in SNR between antipodal signals (binary PSK) and orthogonal 
signals (binary FSK) is 3 dB. 
Two other types of binary signal modulation are DPSK and noncoherent FSK. For 
completeness, we state that the average probability of error for these signals is 
P2 
= 
2 1-
noncoherent FSK. 
+Pb 
9.3.2 
Performance Improvement Through Signal Diversity 
(9.3.17) 
(9.3.18) 
The basic problem in digital communication through a fading channel is that a large 
number of errors occur when the channel attenuation is large (i.e., when the channel is 
in a deep fade). If we can supply the receiver with two or more replicas of the same 
information signal transmitted through independently fading channels, we considerably 
reduce the probability that all the transmitted signals will fade simultaneously. If p is 
the probability that any one signal will fade below some critical value, then pD is the 
probability that all D independently fading replicas of the same signal will fade below 
that critical value. There are several ways that we can provide the receiver with D 
independently fading replicas of the same information-bearing signal. 
One method is to transmit the same information on D carrier frequencies, where 
the separation between successive carriers equals or exceeds the coherence bandwidth 
Bcb of the channel. This method is called.frequency diversity. 
A second method is to transmit the same information in D different time slots, 
where the time separation between successive time slots equals or exceeds the coher­
ence time Tct of the channel. This method is called time diversity. 
Another common method is to use multiple receiving antennas with only one trans­
mitting antenna. The receiving antennas must be spaced sufficiently far apart so that 
the multipath components in the signal have significantly different propagation paths. 
Usually, a separation of a few wavelengths is required between a pair of receiving 
antennas to obtain signals that fade independently. 
Other diversity transmission and reception techniques are angle-of-arrival diversity 
and polarization diversity. 
Given that the information is transmitted to the receiver via D independently fading 
channels, there are several ways that the receiver may extract the transmitted informa­
tion from the received signal. The simplest method is for the receiver to monitor the 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

9.3. BINARY MODULATION IN RAYLEIGH FADING CHANNEL 
417 
received power level in the D received signals and to select the strongest signal for 
demodulation and detection. In general, this approach results in frequent switching 
from one signal to another. A slight modification that leads to a simpler implemen­
tation is to use a signal for demodulation and detection as long as the received power 
level in that signal is above a preset threshold. When the signal falls below the thresh­
old, a switch is made to the channel that has the largest received power level. This 
method of signal selection is called selection diversity. 
For better performance, we may use more complex methods for combining the in­
dependently fading received signals, as illustrated in Figure 9.10. One method that is 
appropriate for coherent demodulation and detection requires that the receiver estimate 
and correct for the different phase off sets on each of the D received signals after de­
modulation. Then the phase-corrected signals at the outputs of the D demodulators are 
summed and fed to the detector. This type of signal combining is called equal-gain 
combining. 
S11 (t) 
S1z (t) 
SDI (t) 
SD2 (t) 
Channel 
Channel D 
Equal-gain combiner: 
Maximal-ratio combiner: 
Square-law combiner: 
Demodulator 
Y11 
Y12 
Other 
Channels 
Measurement 1--..-i 
of Channel 
Parameters 
Demodulator 
YD2 
D 
Combiner 
R 2 
To Detector 
Rm=  Ykmej¢<,m 
= 1,2 
k =I 
D 
Rm =  Cik Ykm ej¢k, m 
= l, 2 
k =I 
D 
Rm=  1Ykml2,m 
= 1,2 
k=I 
Figure 9 .10: Model of binary digital communication system with D-order diversity 
In addition, we can estimate the received signal power level for each of the D re­
ceived signals. Then we can weight the phase-corrected demodulator outputs in direct 
proportion to the received signal strength (the square root of the power level) and feed 
them to the detector. This combiner is called a maximal-ratio combiner. On the other 
hand, we can use orthogonal signals for transmitting the information through D inde­
pendently fading channels, and the receiver may employ noncoherent demodulation. 
In such a case, the outputs from the D demodulators may be squared, summed, and fed 
to the detector. This combiner is called a square-law combiner. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

418 
CHAPTER 9. TRANSMISSION THROUGH WIRELESS CHANNELS 
Each of these combining methods leads to performance characteristics that result 
in a probability of error that behaves as Kn/ pD, where Kn is a constant that depends 
on D and 75 is the average SNR/diversity channel. Thus, we achieve an exponential 
decrease in the error probability. Without providing a detailed derivation, we simply 
state that, for antipodal signals with maximal ratio combining, the probability of error 
has the general form 
Kn 
P2 ::: (475)D' 
75 » 1 
(9.3.19) 
where 75 is the average SNR per diversity branch and 
(2D - l)! 
Kn = D!(D - l)! 
(9.3.20) 
For binary orthogonal signals with square-law combining, the probability of error has 
the asymptotic form 
Kn 
P2 
= -D, 
75 » 1 
(9.3.21) 
p 
Finally, for binary DPSK with equal gain combining, the probability of error has the 
asymptotic form 
Kn 
P2 ::: (275)D' 
75 » 1 
(9.3.22) 
These error probabilities are plotted in Figure 9 .11 for D = 1, 2, 4 as a function of 
the SNR/bit 75 b 
= D75. It is apparent that a large reduction in the SNR/bit is achieved 
 
iE "' ""' 
0 
@ 
.0 "' 
£ 
o.." 
10-l 
2 
10-' 
2 
10-3 
2 
10-4 
2 
10-s 
2 
10-' 
5 
l'.. 
: 
' \:% 
. \ 
\ ' '\\ 
\ 
\ 
\ 
,. \ 
\ \\ 
. 
\ 
\ 
·,\ 
"· 
\ 
·, 
\ 
' 
-... ""' 
"'',& 
\\' 
\, ' 
\ \°' 
. \ 
\ ' \', 
\ 
. 
. 
\ \ ' 
. 
' 
\ 
\ 
' 
. 
. 
\ 
\ . 
\ 
\ 
. 
\ 
\ 
\ 
\ 
. 
\ 
D=4 y. 
\ 
"" 
.... '\ 
.. 
. 
.. 
"'·· 
\ 
\\ 
\ ' 
\ 
' 
\ \ 
\\ \ 
\\ 
\ 
\ \ 
\ 
l'. 
\ . ' 
\ . 
' 
" .. "" 
.. . .. 
· . .. 
"'· ' 
\ 
\ 
\ ' 
' 
\ 
\ 
\ . 
\ 
\ 
. 
' 
'.-
'-' 
\ 
I 
I 
Key 
-
--FSK 
---- DPSK _ 
-· · PSK 
"" 
',, ( 
"· ' 
·. 
.. .. .'\,. 
' . 
.. 
' 
.... 
. 
D = 1 
'\. 
\ 
\ 
D= 2 
,/ 
\ 
} 
·. 
10 
15 
20 
25 
30 
35 
40 
SNR/Bit,dB 
Figure 9 .11: Performance of binary signals with diversity 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

9.3. BINARY MODULATION IN RAYLEIGH FADING CHANNEL 
419 
with D = 2 (dual diversity) compared with no diversity. A further reduction in SNR 
is achieved by increasing the order of diversity to D = 4, although the additional gain 
from D = 2 to D = 4 is smaller than the gain from D = 1 to D = 2. Beyond D = 4, 
the additional reduction in SNR is significantly smaller. 
Illustrative Problem 9.9 [Orthogonal Signals with Dual Diversity] 
A digital communication system for transmitting information through a Rayleigh 
fading AWGN channel employs dual diversity by transmitting each information bit on 
two carrier frequencies having a separation that exceeds the coherence bandwidth of the 
channel. Thus, the two signals fade independently. The signals used for transmission 
on each carrier frequency are orthogonal. Therefore, the correlator outputs for the 
orthogonal signals, when the transmitted information bit is a 1, is 
and 
rn = £X1 .JEbeN>i + nn 
ri2 
= ni2 
where £X1 and £X2 are statistically independent Rayleigh distributed random variables 
and {nij. i 
= 1, 2,j 
= 
1, 2} are mutually statistically independent complex-valued 
Gaussian random variables with zero mean and unit variance. The correlator performs 
square law combining of the two signals, that is, it computes 
R1 
= lrnl2 
+ lr2112 
Rz = lr1212 
+ lr2212 
and feeds Ri and Rz to the detector, which decides in favor of the detected bit corre­
sponding to the larger of (R1, Rz). Perform a Monte Carlo simulation to estimate and 
plot the error probability for the dual diversity system as a function of the SNR/bit in 
dB. Select the sample size for the simulation to be N 
= 100, 000. For comparison, 
also plot the theoretical values of the error probability given by (9 .3 .21) for large SNR, 
say Pb ;::: 15 dB. Note that Pb 
= Dp, where Dis the order of diversity. 
Figure 9.12 illustrates the result of the Monte Carlo simulation and a comparison with 
the theoretical error probability. We note that the agreement is very good for large 
SNR. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

420 
CHAPTER 9. TRANSMISSION THROUGH WIRELESS CHANNELS 
100 
--+- Monte Carlo simulation 
--0- Theoretical value 
10-l 
10-2 
co: 
10-3 
µ.i 
 
10-4 
10-S 
10-6 
5 
10 
15 
20 
25 
30 
35 
Average SNR/bit (dB) 
Figure 9.12: Figure for Illustrative Problem 9.9 
The MATLAB script for the problem is given below. 
---4111" 11---------------
% MATLAB script for Illustrative Problem 9 .9 
D = 2; 
sigma = 1; 
Eb = 1/sqrt(2); 
EbNo_rx_per_ch_dB = 5:5:30; 
EbNo_rx_per_ch = 10. A(EbNo_rx_per_ch_dB/10); 
No = Eb*2*sigmaA2*10. A(-EbNo_rx_per_ch_dB/10); 
BER = zeros(1,length(No)); 
SNR_rx_per_b_per_ch = zeros(1,Iength(No)); 
% Calculation of error probability using Monte Carlo simulation: 
for i = 1 :length(No) 
no_bits = O; 
no_errors = O; 
P _rx_t = O; 
P_n_t = O; 
r = zeros(2,2); 
R = zeros(1,2); 
% Total rxd power 
% Total noise power 
% Assumption: m 
= 1 (All one codeword is transmitted): 
while no_errors <= 100 
no_bits = no_bits + 1; 
u = rand(1,2); alpha = sigma*sqrt(-2*log(u)); phi = 2*pi*rand(1,2); 
noise = sqrt(No(i)/2)*(randn(2,2) + 1 i*randn(2,2)); 
r(1, 1) = alpha(1 )*sqrt(Eb)*exp(1 i*phi(1))+noise(1,1 ); 
r(1,2) = noise(1,2); 
r(2, 1) = alpha(2)*sqrt(Eb)*exp(1i*phi(2))+noise(2,1 ); 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

9.3. BINARY MODULATION IN RAYLEIGH FADING CHANNEL 
end 
end 
r(2,2) = noise(2,2); 
R(1) = abs(r(1,1))"2 + abs(r(2,1))"2; 
R(2) = abs(r(1,2))"2 + abs(r(2,2))"2; 
if R(1) <= R(2) 
m_h = O; 
else 
m_h = 1; 
end 
P _n_t = P _n_t + No(i); 
P_rx_t = P_rx_t + 0.5*(abs(r(1))"2 + abs(r(2))"2); 
no_errors = no_errors + (1-m_h); 
SNR_rx_per_b_per_ch(i) = (P _rx_t-P _n_t)/P _n_t; 
BER(i) = no_errors/no_bits; 
% Calculation of error probability using the theoretical formula: 
rho = EbNo_rx_per_ch; 
rho_dB = 1 O*loglO(rho); 
rho_b =D*rho; 
rho_b_dB = 10*log10(rho_b); 
K_D = factorial((2*D-1 ))/factorial(D)/factorial((D-1)); 
P_2 = K_D./rho."D; 
% Plot the results: 
semilogy(rho_b_dB,BER,' -* ',rho_b_dB,P _2, '-o') 
xlabel( 'Average SNR/bi t (dB) '); ylabel(' BER') 
legend( 'Monte Carlo simulation', 'Theoretical value') 
421 
9.3.3 
The RAKE Demodulator and Its Performance for Signals 
Transmitted on a Frequency Selective Channel 
Next we focus on the demodulation of a signal transmitted through a frequency selec­
tive channel. The digital information is transmitted at a symbol rate 1 / T by modulating 
a single carrier frequency. We assume that the signal duration T satisfies the condition 
T « Tct. Consequently, the channel characteristics change very slowly in time so 
that the channel is slowly fading, but it is frequency selective because W » Bcb. Fur­
thermore, we assume that T » Tm so that ISi is negligible. That is, the overlap in 
time of two successive symbols due to the time dispersion (multipath spread Tm) in the 
channel is very small relative to the symbol duration T. 
If W is the bandwidth of the bandpass signal, the bandwidth occupancy of the 
equivalent lowpass signal is W /2. Hence, we employ a band-limited lowpass signal 
s ( t). Using the channel model for the frequency selective channel shown in Figure 9 .3, 
we may express the received signal as 
L 
r(t) = L Cn(t)s(t - n/W) + n(t) 
(9.3.23) 
n=l 
where n(t) represents the AWGN. Therefore, the frequency selective channel provides 
the receiver with up to L replicas of the transmitted signal, where each signal compo­
nent is multiplied by a corresponding channel tap weight Cn(t), n = 1, 2, . . .  , L. Based 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

422 
CHAPTER 9. TRANSMISSION THROUGH WIRELESS CHANNELS 
on the slow fading assumption, the channel coefficients are considered constant over 
the duration of one or more symbol intervals. 
Because there are up to L replicas of the transmitted signal 5 ( t) in r ( t), a receiver 
that optimally processes the signal will achieve the same performance as a communi­
cation system with diversity equal to the number of received (resolvable) signal com­
ponents. 
Consider binary signaling over the channel. We have two equal energy signals 51 ( t) 
and 52 (t), which are either antipodal or orthogonal, with a time duration T » Tm. Be­
cause the ISi is negligible, the optimum receiver consists of two correlators or two 
matched filters that are matched to the transmitted signals. Now we use the correlator 
structure that is illustrated in Figure 9.13. The received signal passes through a tapped 
delay line filter with a tap spacing of 1 / W, as in the channel model. The number of taps 
must match the total number of resolvable signal components. At each tap, the signal 
is multiplied with each of the two possible transmitted signals 51 ( t) and 52 ( t); then 
each multiplier output is phase corrected and weighted by multiplication with ci;_ ( t), 
n 
= l, 2, .
.
.
 , L. Then the corresponding phase-aligned and weighted signal compo­
nents are integrated over the duration of the symbol interval T, and the two integrator 
channel 
path 
arameter 
! s";"i;;'  ! 
To detector 
channel 
path 
arameter 
Figure 9 .13: RAKE demodulator for a signal transmitted through a frequency selective 
channel 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

9.3. BINARY MODULATION IN RAYLEIGH FADING CHANNEL 
423 
outputs are sampled periodically every T seconds. Their outputs are sent to the detec­
tor. Thus, we have cross-correlated the received signal with each of the two possible 
transmitted signals at all possible delays introduced by the channel. Note that the mul­
tiplication of the signal at each tap with the corresponding tap coefficient ci;_ ( t) results 
in weighting the signal components by the corresponding signal strengths. 
Hence, 
the combining of the phase-corrected and weighted signal components corresponds to 
maximal ratio combining. 
To perform maximal ratio combining, we must estimate the channel tap coefficients 
Cn ( t) from the received signal. Because these coefficients are time varying, it is neces­
sary for the estimator to be adaptive; that is, it must be able to track the time variations. 
The demodulator structure shown in Figure 9 .13 is called a RAKE demodulator. 
Because this demodulator has equally spaced taps with tap coefficients that essentially 
collect all the signal components in the received signal, its operation has been likened 
to that of an ordinary garden rake. 
---tlMQJO.ii;Mirijij;t•]:Jl§I·•---------
Illustrative Problem 9.10 [RAKE Demodulator for Two-Path Channel] 
Perform a Monte Carlo simulation to estimate and plot the error probability of a 
binary antipodal signaling communication system in which the channel is characterized 
by two resolvable Rayleigh fading signal paths. Thus, the received signal in the interval 
0 ::; t ::; Tis, for a slowly fading channel, 
r (t) = ±c1s(t) ± c2s(t - l/W) + n(t) 
where C1 and C2 are uncorrelated, complex-valued Gaussian random variables with 
zero mean and unit variance, and n(t) is a complex-valued AWGN process. The re­
ceived signal is passed through a RAKE demodulator that crosscorrelates r ( t) with 
s ( t) and s ( t - 1 / W). Consequently, the output of the correlators may be expressed as 
r1 = c1,,/Eb cosmrr + n1, 
m = 0, 1 
rz = c2,,/Eb cosmrr + nz, 
m = 0, 1 
where the noise terms n1 and nz are uncorrelated complex-valued Gaussian random 
variables with zero mean and identical variance er% = 1. Suppose that the receiver has 
perfect estimates of C1 and C2 and computes the decision variable at the input to the 
detector as 
R =Re [c{r1 + c{r2] 
= ±,,/Eb [ lei 12 + lc212] cos mrr +Re [c{n1 + c{n2] 
= (c:xi + cx&),,/Eb cosmrr + n, 
m = 0, 1 
Therefore, the Monte Carlo simulation may be performed by generating the decision 
variable R at the input to the detector, with c:x1 and c:x2 being two statistically indepen­
dent and identically distributed Rayleigh random variables and n being a real valued 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

424 
CHAPTER 9. TRANSMISSION THROUGH WIRELESS CHANNELS 
zero-mean Gaussian random variable with unit variance. Note that the {cd are inde­
pendently selected in each symbol transmitted. Compare the estimated error probabil­
ity from the Monte Carlo simulation with the theoretical (large SNR) results given by 
(9.3.19). Perform the simulation for N = 100, 000 sample. 
Figure 9 .14 illustrates the result of the Monte Carlo simulation and comparison with 
the theoretical error probability for a dual diversity system (D 
= 2) at large SNR. We 
note that the agreement is very good for large SNR. 
10-1 
--+-- Monte Carlo simulation 
--0- Theoretical value 
10-2 
10-3 
 
p:i 
10-4 
10-5 
10--{) 
5 
lO 
15 
20 
25 
30 
Average SNR/bit (dB) 
Figure 9 .14: Figure for Illustrative Problem 9 .10 
The MATLAB script for the problem is given below. 
---tl®'i" ---------------
% MATLAB script for Illustrative Problem 9 .10 
D = 2; 
sigma = 1 /sqrt(2); 
Eb= 1; 
EbNo_rx_per_ch_dB = 5:5:25; 
EbNo_rx_per_ch = 10. "(EbNo_rx_per_ch_dB/1 O}; 
No = Eb*2*sigma"2*10. "(-EbNo_rx_per_ch_dB/10}; 
BER = zeros(1,length(No)); 
SNR_rx_per_b_per_ch = zeros(1,length(No)}; 
% Calculation of error probability using Monte Carlo simulation: 
for i = 1 :length(No) 
no_bits = O; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

9.3. BINARY MODULATION IN RAYLEIGH FADING CHANNEL 
no_errors = O; 
% Assumption: m 
= 0 (All zero codeword is transmitted): 
while no_errors <= 100 
end 
no_bits = no_bits + 1 ; 
u = rand(1,2); 
alpha = sigma*sqrt(-2*log(u)); 
phi = 2*pi*rand(1,2); 
c = alpha.*exp(1i*phi); 
noise = sqrt(No(i)/2)*(randn(1,2) + 1 i*randn(1,2)); 
r = c*sqrt(Eb) + noise; 
R = real(conj(c(1 ))*r(1 )+conj(c(2))*r(2)); 
if R <= 0 
m_h = 1; 
else 
m_h = O; 
end 
no_errors = no_errors + m_h; 
BER(i) = no_errors/no_bits; 
end 
% Calculation of error probability using the theoretical formula: 
rho = EbNo_rx_per_ch; 
rho_b = D*rho; 
rho_b_dB = 1 O*loglO(rho_b); 
K_D = factorial( (2*D-1 ))/factorial(D)/factorial( (D-1)); 
P_2 = K_D./(4*rho)."D; 
% Plot the results: 
semilogy(rho_b_dB,BER,' -*' ,rho_b_dB,P _2, '-o') 
xlabel( 'Average SNR/bi t (dB) '); ylabel(' BER') 
legend(' Monte Carlo simulation',' Theoretical value') 
425 
In Illustrative Problem 9.10 the tap coefficients of the two-path channel had equal 
strengths. However, in most physical channels, the tap coefficients in the tapped de­
lay line channel model have unequal strengths. If there are L signal components in 
the received signal with corresponding signal strengths that are distinct and Rayleigh 
distributed, it can be shown that the probability of error for binary signals is well ap­
proximated as 
(9.3.24) 
where 75 k is the average SNR for the kth signal component; that is, 
(9.3.25) 
in which O<k 
= I Ck I is the amplitude of the k1h tap coefficient, Yr 
= -1 for antipodal 
signals, Yr 
= 0 for orthogonal signals, and Kr is the constant defined in (9.3.20). If all 
the signal components have the same strength, the error probability in (9 .3 .24) reduces 
to that given by (9 .3 .19) with D 
= L. 
This analysis of the performance of binary modulation focused on Rayleigh fading 
signal statistics. In general, the Rayleigh distribution is suitable for modeling the signal 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

426 
CHAPTER 9. TRANSMISSION THROUGH WIRELESS CHANNELS 
fading that occurs in ionospheric propagation and in mobile cellular systems. However, 
there are other statistical models that have been used for a variety of fading multipath 
channels. The most common of these statistical models are the Nakagami distribution 
and the Rician distribution. 
9.3.4 
OFDM Signal Transmission in Frequency Selective Channels 
From the viewpoint of communication system performance, the RAKE demodulator 
is the optimum demodulator for reception of a single carrier signal transmitted ove a 
frequency selective channel in which the symbol duration is designed to satisfy the 
condition T » Tm and T « Tct; that is, 
Tm« T « Tct 
(9.3.26) 
Furthermore, for a frequency selective channel, the bandwidth of the transmitted signal 
satisfies the condition 
W » Bcb 
(9.3.27) 
The combination of the conditions in (9.3.26) and (9.3.27) implies that TW » 1 or, 
equivalently, W » j. We note that the condition T » Tm is imposed on the sig­
nal design to avoid the effects of ISi, which generally degrades the performance of 
the system. Consequently, the data (symbol) rate must be reduced in order to satisfy 
the condition T » Tm or, equivalently, the bandwidth W of the transmitted signal is 
selected such that WT » 1. 
A more bandwidth-efficient modulation method for a frequency selective channel 
is OFDM, where the signal bandwidth W is subdivided into a large number N of sub­
channels for which the symbol duration of the signal transmitted on each subchannel 
is selected to satisfy the condition T » Tm. Hence, ISi is rendered negligible in each 
subchannel and can be totally eliminated by the use of a time guard ban of duration 
Tm or a cyclic prefix. Thus, the frequency separation between adjacent subchannels 
is 6.f = 1 IT and the number of subchannels is N 
= WI 6.f, so that each subchannel 
is basically characterized as frequency nonselective. To combat signal fading in this 
situation, the same information symbol can be transmitted in two or more subchannels 
separated in frequency by an amount equal to or exceeding the channel coherence band­
width Bcb in order to obtain signal diversity through statistically independent fading. 
The following Illustrative Problem describes the OFDM signal design process. 
--tll!IJ§li;hiWjiQ;l•]:Jl§@I 
Illustrative Problem 9.11 [OFDM System Design in a Frequency Selective Chan­
nel] 
Suppose a communication channel having a bandwidth W = 10 kHz is character­
ized as a multipath channel with multipath spread Tm = 10 ms and a Doppler spread 
Bd 
= 0.1 Hz. Select the parameters of an OFDM system such that the bandwidth loss 
due to the cyclic prefix (or time guard band) does not exceed 10%. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

9.3. BINARY MODULATION IN RAYLEIGH FADING CHANNEL 
427 
We may select the symbol duration to be T 
= 100 ms to satisfy the bandwidth loss 
constraint. Therefore, !:!,.f 
= l/T 
= 10 Hz and, hence, the number of subchannels 
is N 
= 104/10 
= 1000. The channel has a coherence time of Tct 
= l/Bd 
= 10 
seconds, so we have satisfied the condition that T « Tct. The channel coherence 
bandwidth Bcb 
= l/Tm 
= 100 Hz. To combat signal fading in a subchannel, we may 
transmit the same symbol on multiple subchannels having a frequency separation of at 
least 100 Hz. Thus, the symbol throughput achieved on this channel is N /T 
= lON 
symbols/s without diversity and the throughput symbol rate Rs 
= lON ID symbols/s 
with diversity of order D. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

428 
CHAPTER 9. TRANSMISSION THROUGH WIRELESS CHANNELS 
Problems 
9 .1 Repeat Illustrative Problem 9 .3 when the parameter u 2 in the Rayleigh distribution 
takes on the values u2 
= 1, 5, 10. 
9.2 Repeat Illustrative Problem 9.5 when the tap weight coefficients are generated by 
a single-pole lowpass filter described by the z-transform 
where p 
= 0.9 and p 
= 0.99. 
H(z) 
= 
1  ;:-1 
9 .3 Repeat Illustrative Problem 9 .6 for a train traveling at a speed of 200 km/hour and 
a carrier frequency of 1 GHz. 
9.4 Repeat Illustrative Problem 9.8 when the detection for the orthogonal signals is 
noncoherent (i.e., the detector is either an envelope detector or a square-law detector). 
9.5 Perform a Monte Carlo simulation when the binary signaling is on-off-keying 
(OOK) and the channel is a slowly fading frequency nonselective Rayleigh channel. 
9 .6 Repeat Illustrative Problem 9 .9 when the order of diversity is D 
= 3, and compare 
the Monte Carlo results with the theoretical error probability for large SNR. 
9.7 Repeat Illustrative Problem 9.10 when the information is transmitted by binary 
orthogonal signals. 
9.8 Repeat Illustrative Problem 9 .10 for a two-path frequency selective Rayleigh chan­
nel in which the first path is twice as strong as the second path in power. Compare the 
error probability obtained from the Monte Carlo simulation with the theoretical error 
probability given by (9.3.24) for large SNR. 
9.9 Repeat Illustrative Problem 9.1 1  for a channel with bandwidth W 
multipath spread Tm 
= 10 µs and a Doppler spread Bd 
= 10 Hz. 
800 kHz, 
9 .10 Show that (9 .3 .26) implies that the multipath channel satisfies the condition 
T mBd « 1. T mBd is called the the channel spread factor, and when the condition 
TmBd < 1 is satisfied, the channel is said to be underspread. 
9.11 Show that the conditions in (9.3.26) and (9.3.27) imply that the time-bandwidth 
product TW » 1. 
Copyright 2011 Cengage Leaming. All Rights Reserved. May not be copied, scanned, or duplicated, in who]e or in part. Due to electronic rights, some third party coment may be suppressed from lhe eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Leaming reserves the right to remove additional content at any time if subsequent rights restrictions require iL 

Chapter 10 
Channel Capacity and Coding 
10 .1 
Preview 
The objective of any communication system is to transmit information generated by an 
information source from one location to another. The medium over which information 
is transmitted is called the communication channel. We have already seen in Chapter 4 
that the information content of a source is measured by the entropy of the source, and 
the most common unit for this quantity is bits. We have also seen that an appropriate 
mathematical model for an information source is a random process. 
In this chapter, we consider appropriate mathematical models for communication 
channels. We also discuss a quantity called the channel capacity that is defined for any 
communication channel and gives a fundamental limit on the amount of information 
that can be transmitted through the channel. In particular, we consider two types of 
channels, the binary symmetric channel (BSC) and the additive white Gaussian noise 
channel (A WGN). 
The second part of this chapter is devoted to coding techniques for reliable com­
munication over communication channels. We discuss the two most commonly used 
coding methods, namely, block and convolutional coding. Encoding and decoding 
techniques for these codes and their performance are discussed in detail in the later 
sections of this chapter. 
10.2 
Channel Model and Channel Capacity 
A communication channel transmits the information-bearing signal to the destination. 
In this transmission, the information-carrying signal is subject to a variety of changes. 
Some of these changes are deterministic in nature-for example, attenuation and linear 
and nonlinear distortion-and some are probabilistic-for example, addition of noise, 
multipath fading, and so on. Because deterministic changes can be considered as spe­
cial cases of random changes, in the most general sense the mathematical model for a 
429 
Copyright 2011 Cengage Leaming. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not materialJy affect the overall learning experience. Cengage Leaming reserves the right to remove additiona1 content at any time if subsequent rights restrictions req_uire it. 

430 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
communication channel is a stochastic dependence between the input and the output 
signals. 
10.2.1 
Channel Model 
In the simplest case a channel can be modeled as a conditional probability relating each 
output of the channel to its corresponding input. Such a model is called a discrete­
memoryless channel (DMC) and is completely described by the channel input alpha­
bet X, the channel output alphabet <1Y, and the channel transition probability matrix 
p(y Ix), given for all x EX, y E <!Y. One special case of the discrete-memoryless 
channel is the binary symmetric channel (BSC), which can be considered as a mathe­
matical model for binary transmission over a Gaussian channel with hard decisions at 
the output. A binary symmetric channel corresponds to the case X = <1Y = { 0, 1} and 
p(y 
= 0 I x 
= 1) 
= p(y 
= 1 I x 
= 0) 
= t. A schematic model for this channel 
is shown in Figure 10 .1. The parameter € is called the crossover probability of the 
channel. 
1 
- E 
Figure 10 .1: A binary symmetric channel (BSC) 
10.2.2 
Channel Capacity 
By definition, channel capacity is the maximum rate at which reliable transmission of 
information over the channel is possible. Reliable transmission is possible when there 
exists a sequence of codes with increasing block length for which the error probability 
tends to zero as the block length increases. The channel capacity is denoted by C; by 
definition, at rates R < C reliable transmission over the channel is possible, and at rates 
R > C reliable transmission is not possible. 
Shannon's fundamental result of information theory states that for discrete-memory­
less channels, the capacity is given by the following expression: 
C = maxI(X; Y) 
p(x) 
(10.2.1) 
where I(X; Y) denotes the mutual information between X (channel input) and Y (chan­
nel output) and the maximization is carried out over all input probability distributions 
of the channel. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.2. CHANNEL MODEL AND CHANNEL CAPACITY 
431 
The mutual information between two random variables X and Y is defined as 
I(X; Y) 
= L L p(x)p(ylx) log 7(,)) 
XEXyEW 
p X p y 
where the mutual information is in bits and the logarithm is in base 2. 
(10.2.2) 
For the case of the binary symmetric channel, the capacity is given by the simple 
relation 
(10.2.3) 
where € is the crossover probability of the channel and Hb ( · ) denotes the binary en­
tropy function: 
Hb (x) = -x log(x) - (1 - x) log(l - x) 
(10.2.4) 
Another important channel model is the bandlimited AWGN channel with an input 
power constraint. This channel is modeled as shown in Figure 10 .2. 
z(t) 
x(t) 
H (f) = IT ( fw) 
y(t) 
Figure 10.2: Bandlimited additive white Gaussian noise channel 
The channel is bandlimited to [ -W, W], the noise is Gaussian and white with a 
(two-sided) power spectral density of No/2, and the channel input is a process that 
satisfies an input power constraint of P. Shannon showed that the capacity of this 
channel in bits per second is given by 
C 
= Wlog (1 + __f_) bits/s 
NoW 
(10.2.5) 
For a discrete-time additive white Gaussian noise channel with input power con­
straint P and noise variance a-2, the capacity in bits per transmission is given by 
C 
= ! log ( 1 + _f_) 
2 
a-2 
--tlM!l#j l;ful+,j#l;{e] :J!#@I 
(10.2.6) 
Illustrative Problem 10.1 [Binary Symmetric Channel Capacity] Binary data are 
transmitted over an additive white Gaussian noise channel using BPSK signaling and 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

432 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
hard-decision decoding at the output using optimal matched filter detection. 
1. Plot the error probability of the channel as a function of 
E 
)'=­
No 
(10.2.7) 
where Eis the energy in each BPSK signal and No/2 is the noise power spectral 
density. Assume that y changes from -20 dB to 20 dB. 
2. Plot the capacity of the resulting channel as a function of y. 
1. The error probability of the BPSK with optimal detection is given by 
The corresponding plot is shown in Figure 10 .3. 
0.45 
0.4 
0.35 
0.3 
0.25 
0.2 
0.15 
0.1 
0.05 
0 
-20 
-10 
0 
10 
20 
y (dB) 
Figure 10 .3: BPSK error probability versus y = E /No 
2. Here we use the relation 
C=l-Hb(p) 
= 1 -Hb ( Q ( fzY)) 
to obtain a plot of C versus y. This plot is shown in Figure 10.4. 
(10.2.8) 
(10.2.9) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.2. CHANNEL MODEL AND CHANNEL CAPACITY 
433 
C (bits/transmission) 
0.8 
0.6 
0.4 
0.2 
-10 
0 
10 
20 
y (dB) 
Figure 10.4: Channel capacity versus y 
= EI No 
The MATLAB script for this problem is given next. 
___ ,, ... ·---------------
% MATLAB script for Illustrative Problem 10.1. 
echo on 
gamma._db=[-20:0.1 :20]; 
gamma=10. "(gamma_db./10); 
p_error=q(sqrt(2.*gamma)); 
capacity=1 . -entropy2(p_ error); 
pause % Press a key to see a plot of error probability vs. SNR/bit. 
elf 
semilogx(gamma,p_error) 
xlabel(' SNR/bi t') 
title(' Error probability versus SNR/bi t') 
ylabel( 'Error Prob. ') 
pause % Press a key to see a plot of channel capacity vs. SNR/bit. 
elf 
semilogx(gamma,capacity) 
xlabel(' SNR/bi t') 
title(' Channel capacity versus SNR/bi t') 
ylabel('Channel capacity') 
Illustrative Problem 10.2 [Gaussian Channel Capacity] 
1. Plot the capacity of an additive white Gaussian noise channel with a bandwidth 
of W 
= 3000 Hz as a function of PI No for values of PI No between -20 dB 
and 30 dB. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

434 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
2. Plot the capacity of an additive white Gaussian noise channel with P /No 
= 2 5 
dB as a function of W. 
In particular, what is the channel capacity when W 
increases indefinitely? 
1. The desired plot is given in Figure 10.5. 
C (bits/s) 
1200 
1000 
800 
600 
400 
200 
OL-u.L....L=i:t:=:=..._u..L......i 
-20 
-10 
0 
10 
20 
30 
P!N0 (dB) 
Figure 10.5: Capacity of an AWGN channel with W = 3000 Hz as a function of P /No 
2. The capacity as a function of bandwidth is plotted in Figure 10.6. As is seen in 
the plots, when either PI No or W tend to zero, the capacity of the channel also 
tends to zero. However, when PI No or W tends to infinity, the capacity behaves 
differently. When P /No tends to infinity, the capacity also tends to infinity, as 
shown in Figure 10.5. However, when W tends to infinity, the capacity does go to 
a certain limit, which is determined by PI No. To determine this limiting value, 
we have 
Ji Wlog2 ( 1 
+ N:w) 
p 
Noln2 
= l.4427__f_ 
No 
The MATLAB script for this problem is given next. 
(10.2.10) 
(10.2.11) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.2. CHANNEL MODEL AND CHANNEL CAPACITY 
435 
___ ,., .. ·---------------
% MATLAB script for Illustrative Problem 10.2. 
echo on 
pnO_db=[-20:0.1 :30]; 
pn0=10. A(pnQ_db./10); 
capacity=3000.*log2(1 +pn0/3000); 
pause % Press a key to see a plot of channel capacity vs. PINO. 
elf 
semilogx(pnO ,capacity) 
title(' Capacity vs. P /NO in an AWGN channel') 
xlabel(' P /NO') 
ylabel('Capacity (bits/second)') 
clear 
w=[1:10,12:2:100, 105:5:500,510:10:5000,5025:25:20000,20050:50:100000]; 
pnO_db=25; 
pn0=10 A (pnO_db/10); 
capacity=w. *log2( 1 +pnO ./w); 
pause % Press a key to see a plot of channel capacity vs. bandwidth. 
elf 
semilogx( w ,capacity) 
title(' Capacity vs. bandwidth in an AWGN channel') 
xlabel(' Bandwidth (Hz) ') 
ylabel('Capacity (bits/second)') 
C (bits/s) 
400 
300 
200 
100 
101 
102 
104 
105 
W(Hz) 
Figure 10.6: Capacity as a function of bandwidth in an AWGN channel 
---tl!§.il;Miltj:i;t•1:J!#@I 
Illustrative Problem 10.3 [Capacity of a Binary Input AWGN Channel] A binary 
input additive white Gaussian noise channel is modeled by the two binary input lev­
els A and -A and additive zero-mean Gaussian noise with variance u2• In this case 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

436 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
f!£ = {-A,A}, qy = !RI., p(y I X =  A) 
 JY(A,a2), and p(y I X =  -A) 
 
JV (-A, a2). Plot the capacity of this channel as a function of A/ a. 
Due to the symmetry in the problem, the capacity is achieved for uniform input 
distribution-that is, for p (X = A) = p (X = -A) = t. For this input distribution, the 
output distribution is given by 
and the mutual information between the input and the output is given by 
1 J
00 
p(y IX= A) 
I(X; Y) = 2 _00 p(y IX= A) log2 
p(y) 
dy 
1 J
00 
p(y IX= -A) 
+ 2 _00 p(y IX= -A) log2 
p(y) 
dy 
Simple integration and change of variables result in 
where 
I(X; Y) = f ( 	) 
j(a) = 
-- e-Cu-a) '2 log 
du 
Joo 
1 
2 
2 
-00 .JTi 
2 1 + e-2au 
(10.2.12) 
(10.2.13) 
(10.2.14) 
(10.2.15) 
Using these relations we can calculate I(X; Y) for various values of A/a and plot the 
result. A plot of the resulting curve is shown in Figure 10 .7. 
C (bits/transmission) 
0.8 
0.6 
0.4 
0.2 
101 
102 
A/a 
Figure 10.7: Capacity of a binary input AWGN channel as a function of SNR =A/ a 
The MATLAB script for this problem follows. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.2. CHANNEL MODEL AND CHANNEL CAPACITY 
437 
___ ,., .. ·--------------
% MATLAB script for Illustrative Problem 10.3. 
echo on 
a_db=[-20:0.2:20]; 
a=10. A(a_db/10); 
for i=1 :201 
end 
f(i)=quad(' il3 _ 8fun' ,a(i)-5,a(i)+5, 1 e-3,[ ],a(i)); 
g(i)=quad(' il3 _8fun' ,-a(i)-5,-a(i)+5, 1 e-3,[ ],-a(i)); 
c(i)=0.5*f(i)+0.5* g(i); 
echo off ; 
echo on ; 
pause % Press a key to see capacity vs. SNR plot. 
semilogx(a,c) 
title(' Capacity versus SNR in binary input AWGN channel') 
xlabel(' SNR' ) 
ylabel(' Capacity (bi ts/transmission) ') 
Illustrative Problem 10.4 [Comparison of Hard- and Soft-Decision Schemes] A 
binary input channel uses the two input levels A and -A. The output of the channel is 
the sum of the input and an additive white Gaussian noise with mean 0 and variance 
a-2. This channel is used under two different conditions. In one case, the output is used 
directly without quantization (soft decision), and in the other case, an optimal decision 
is made on each input level (hard decision). Plot the capacity in each case as a function 
of A/a-. 
The soft-decision part is similar to Illustrative Problem 10.3. For the hard-decision 
case the crossover probability of the resulting binary symmetric channel is Q (A/ a-), 
and therefore the capacity is given by 
Both CH and Cs are shown in Figure 10.8. Soft-decision decoding outperforms hard­
decision decoding at all values of A/ a-, as expected. 
The MATLAB script for this problem is given next. 
___ ,,, .. ·---------------
% MATLAB script for Illustrative Problem 10.4. 
echo on 
a_db=[-13:0.5:13]; 
a=10. A(a_db/10); 
c_hard=1-entropy2(Q(a)); 
for i=1 :53 
f(i)=quad(' il3_8fun' ,a(i)-5,a(i)+5, 1 e-3,[ ],a(i)); 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

438 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
end 
g(i)=quad(' il3 _ 8fun' ,-a(i)-5,-a(i)+5, 1 e-3,[ ],-a(i)); 
c_soft(i)=O .5* f(i)+O. 5* g(i); 
echo off ; 
echo on ; 
pause % Press a key to see the capacity curves. 
semilogx(a,c_soft,a,c_hard) 
C (bits/transmission) 
0.8 
0.6 
0.4 
0.2 
oi...""'::s:::::.=>...LBCD...J 
10-' 
Figure 10.8: Plots of CH and Cs versus SNR =A/a 
101 
A/ (J' 
Illustrative Problem 10.5 [Capacity Versus Bandwidth and SNR] The capacity of 
a bandlimited AWGN channel with input power constraint P and bandwidth W is given 
by 
C 
= Wlog2 (i + __i_) 
NoW 
Plot the capacity as a function of both W and PI No. 
The desired plot is shown in Figure 10.9. Note that for constant P /No, the plot reduces 
to the curve shown in Figure 10.6. For constant bandwidth, the capacity as a function 
of P /No is similar to the curve shown in Figure 10.5. 
The MATLAB script file for this problem is given next. 
__., .... ·--------------
% MATLAB script for Illustrative Problem 10.5. 
echo off 
w=[1:5:20,25:20:100,130:50:300,400:100:1000, 1250:250:5000,5500:500:10000]; 
pnO_db=[-20:1 :30]; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.2. CHANNEL MODEL AND CHANNEL CAPACITY 
pn0=1 0. A(pnO_db/1 O); 
for i=1 :45 
for j=1 :51 
end 
end 
echo on 
c(i,j)=w(i) *log2( 1 +pnOU)/w(i)); 
pause % Press a key to see C vs. W and PINO. 
k=[0.9,0.8,0.5,0.6]; 
s=[-70,35]; 
surfl(w,pnO_db,c' , s, k) 
title(' Capacity vs. 
bandwidth and SNR') 
C (bits/s) 
1400 
1200 
1000 
800 
600 
400 
200 
0 
30 
io (dB) 
0 
-10 
-20 
0 
439 
10000 
Figure 10.9: Capacity as a function of bandwidth and SNR in an AWGN channel 
--tll!l@il;Ml+.4W;t•1:11::11 
Illustrative Problem 10.6 [Capacity of Discrete-Time AWGN Channel] Plot the 
capacity of the discrete-time additive white Gaussian noise channel as a function of 
the input power and the noise variance. 
The desired plot is given in Figure 10.10. 
The MATLAB script file for this problem is given next. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

440 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
---®Ii" •---------------
% MATLAB script for Illustrative Problem 10.6. 
echo on 
p_db=[-20:1 :20]; 
np_db=p_db; 
p=10. ((p_db/1 O); 
np=p; 
for i=1 :41 
for j=1 :41 
end 
end 
echo on 
c(i,j)=0.5*log2(1 +p(i)/np(j)); 
echo off ; 
pause % Press a key to see the plot. 
surfl(np_db,p_db,c) 
Capacity (bits/transmission) 
7 
6 
5 
4 
3 
2 
0 
20 
-20 
-20 
20 
Noise Power (dB) 
Figure 10.10: Capacity of the discrete-time AWGN channel as a function of the signal 
power (P) and the noise power (cr2) 
10.3 
Channel Coding 
Communication through noisy channels is subject to errors. In order to decrease the ef­
fect of errors and achieve reliablecommunication, it is necessary to transmit sequences 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.3. CHANNEL CODING 
441 
that are as different as possible so that the channel noise will not change one sequence 
into another. This means some redundancy has to be introduced to increase the reli­
ability of communication. The introduction of redundancy results in transmission of 
extra bits and a reduction of the transmission rate. 
Channel coding schemes can be generally divided into two classes, block codes 
and convolutional codes. In block coding, binary source output sequences of length k 
are mapped into binary channel input sequences of length n; therefore, the rate of the 
resulting code is k/n bits per transmission. Such a code is called an (n, k) block code 
and consists of 2k codewords of length n, usually denoted by c1, c2 , ... , Czk. Mapping 
of the information source outputs into channel inputs is done independently, and the 
output of the encoder depends only on the current input sequence of length k and not 
on the previous input sequences. In convolutional encoding, source outputs of length 
ko are mapped into no channel inputs, but the channel inputs depend not only on the 
most recent ko source outputs but also on the last (L - 1) ko inputs of the encoder. 
One of the simplest block codes is the simple repetition code, in which there are two 
messages to be transmitted over a binary symmetric channel, but instead of transmitting 
a 0 and a 1 for the two messages, two sequences, one consisting of all O's and one 
consisting of all l's, are transmitted. The length of the two sequences is chosen to be 
some odd number n. The encoding process is shown below: 
nodd 
o -00 ... 00 
nodd 
,-"'-, 
1-11 ... 11 
(10.3.1) 
(10.3.2) 
The decoding is a simple majority vote decoding; that is, if the majority of the 
received symbols are l's, the decoder decides in favor of a 1, and if the majority are 
O's, the decoder decides in favor of a 0. 
An error occurs if at least ( n + 1) I 2 of the transmitted symbols are received in 
error. Because the channel is a binary symmetric channel with crossover probability €, 
the error probability can be expressed as 
Pe= 
f () €k(l - €)n-k 
k = (n+ l)/ 2 
(10.3.3) 
For example, with n = 5 and€= 0.001 we have 
5 
Pe = I 0.001 k(0.999)5-k = 9.99 x 10-10 :::: lo-9 
(10.3.4) 
k
= 3 
This means that by employing the channel five times, instead of just once, we can re­
duce the error probability from 0.001 to 10-9. Of course, a price has been paid for this 
more reliable performance; that price is a reduction in the rate of transmission and an 
increase in the complexity of the system. The rate of transmission has been decreased 
from one binary message per one use of the channel to one binary message per five us­
ages of the channel. The complexity of the system has been increased because now we 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

442 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
have to use an encoder (which has a very simple structure) and a decoder, which imple­
ments majority vote decoding. More reliable transmission in this problem is achieved 
if we increase n. For instance, for n = 9 we have 
9 
Pe = L 0.001 k(0.999)9-k = 9.97 X 10-16 ::::! 10-15 
k=5 
(10.3.5) 
From the preceding discussion it seems that if we want to reduce the error probabil­
ity to zero, we have to increase n indefinitely and, therefore, reduce the transmission 
rate to zero. This, however, is not the case, and Shannon showed that one can achieve 
asymptotically reliable communication (i.e., Pe --+ 0) by keeping the rate of transmis­
sion below the channel capacity, which in the above case is 
C = 1 - Hb(0.001) = 1 - 0.0114 = 0.9886 bits/transmission 
(10.3.6) 
This, however, is achieved by employing encoding and decoding schemes that are much 
more complex than the simple repetition code. 
-t!IM!l@il;Ml%tJi#l;l•]:j!§i@I 
Illustrative Problem 10.7 [Error Probability in Simple Repetition Codes] Assum­
ing that€ = 0.3 in a binary symmetric channel,plot Pe as a function of the block length 
n. 
We derive Pe for values of n from 1 to 61. The error probability is given by 
Pe= 
I () o.3k x 0.7n-k 
k=(n+l)/2 
and the resulting plot is shown in Figure 10.11. 
The MATLAB script file for this problem is given next. 
----4111114'' -- !"#$ 
% MATLAB script for Illustrative Problem 10.7. 
echo on 
ep=0.3; 
for i=1 :2:61 
p(i)=O; 
for j=(i+ 1 )/2:i 
p(i)=p(i)+prod(1 :i)/(prod(1 :j)*prod(1 :(i-j)))*epA j*(1-ep) A (i-j); 
echo off ; 
end 
end 
echo on ; 
pause % Press a key to see the plot. 
stem((1 :2:61 ),p(1 :2:61)) 
xlabel( ' n ' ) 
ylabel(' pe ') 
title('Error probability as a function of n in simple repetition code') 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.3. CHANNEL CODING 
Pe 
0.3 ..,._ 
______________________  
0.25 
0.2 
0.15 
0.1 
0.05 
OLLl-'-1-Liu..J.-'-L.Ll-'-'-..L.J-L.L.L.i..>:ILlL.ol..Cil.QJ.1;Q-G.-G4'>--..L.- 
0 
10 
20 
30 
40 
50 
60 
70 
80 
n 
443 
Figure 10 .11: Error probability of a simple repetition code for € 
1, 2, ... ,61 
0.3 and n 
10.3.1 
Linear Block Codes 
Linear block codes are the most important and widely used class of block codes. A 
block code is linear if any linear combination of two codewords is a codeword. In the 
binary case, this means that the sum of any two codewords is a codeword. In linear 
block codes the codewords form a k-dimensional subspace of an n-dimensional space. 
Linear block codes are described in terms of a generator matrix G, which is a k x n 
binary matrix such that each codeword c can be written in the form 
c = uG 
(10.3.7) 
where u is the binary data sequence of length k (the encoder input). Obviously, the 
all-0 sequence of length n is always a codeword of an ( n, k) linear block code. 
An important parameter in a linear block code, which determines its error-correcting 
capabilities, is the minimum (Hamming) distance of the code, which is defined as the 
minimum Hamming distance between any two distinct codewords. The minimum dis­
tance of a code is denoted by dmin, and we have 
(10.3.8) 
For linear codes the minimum distance is equal to the minimum weight of the code, 
defined by 
Wmin 
= minw(cd 
Ci*O 
that is, the minimum number of 1 's in any nonzero codeword. 
(10.3.9) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

444 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
---t!IM!!J§ii;MIW§l:;J;t•]:J!§@I 
Illustrative Problem 10.8 [Linear Block Codes] The generator matrix for a ( 1 0, 4) 
linear block code is given by 
1 
0 
0 
1 
1 
1 
0 
1 
1 
1 
1 
1 
1 
0 
0 
0 
1 
1 
1 
0 
G= 
0 
1 
1 
0 
1 
1 
0 
1 
0 
1 
1 
1 
0 
1 
1 
1 
1 
0 
0 
1 
Determine all the codewords and the minimum weight of the code. 
In order to obtain all codewords, we have to use all information sequences of length 4 
and find the corresponding encoded sequences. Because there is a total of 16 binary 
sequences of length 4, there will be 16 codewords. Let U denote a 2k x k matrix whose 
rows are all possible binary sequences oflength k, starting from the all-0 sequence and 
ending with the all-1 sequence. The rows are chosen in such a way that the decimal 
representation of each row is smaller than the decimal representation of all rows below 
it. For the case of k = 4, the matrix U is given by 
0 
0 
0 
0 
0 
0 
0 
1 
0 
0 
1 
0 
0 
0 
1 
1 
0 
1 
0 
0 
0 
1 
0 
1 
0 
1 
1 
0 
0 
1 
1 
1 
U= 
1 
0 
0 
0 
1 
0 
0 
1 
1 
0 
1 
0 
1 
0 
1 
1 
1 
1 
0 
0 
1 
1 
0 
1 
1 
1 
1 
0 
1 
1 
1 
1 
We have 
C= UG 
(10.3.10) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.3. CHANNEL CODING 
445 
where C is the matrix of codewords, which in this case is a 16 x 10 matrix whose rows 
are the codewords. The matrix of codewords is given by 
0 
0 
0 
0 
0 
0 
0 
1 
0 
0 
1 
0 
0 
0 
1 
1 
0 
1 
0 
0 
0 
1 
0 
1 
0 
1 
1 
0 
1 
0 
0 
1 
1 
1 
0 
1 
1 
1 
0 
1 
1 
1 
1 
1 
1 
0 
0 
0 
1 
1 
1 
0 
C= 
1 
0 
0 
0 
0 
1 
1 
0 
1 
1 
0 
1 
0 
1 
1 
0 
0 
1 
1 
1 
0 
1 
1 
1 
1 
0 
0 
1 
1 
0 
1 
0 
1 
0 
1 
1 
1 
1 
0 
0 
1 
1 
0 
1 
1 
1 
1 
0 
1 
1 
1 
1 
0 
0 
0 
0 
0 
0 
0 
0 
0 
0 
1 
1 
0 
1 
1 
1 
1 
0 
0 
1 
0 
1 
1 
0 
1 
1 
0 
1 
0 
1 
1 
0 
1 
1 
0 
0 
1 
1 
0 
0 
1 
1 
1 
0 
0 
0 
1 
1 
1 
0 
0 
0 
1 
1 
1 
1 
0 
1 
1 
1 
1 
0 
0 
0 
1 
1 
1 
0 
1 
1 
0 
1 
0 
1 
0 
0 
0 
0 
1 
0 
= 
1 
0 
0 
1 
1 
1 
0 
1 
1 
1 
0 
1 
0 
0 
0 
0 
1 
1 
1 
0 
1 
1 
1 
1 
0 
0 
0 
0 
1 
0 
0 
0 
1 
0 
1 
1 
1 
0 
1 
1 
0 
1 
1 
1 
1 
1 
1 
0 
0 
1 
1 
0 
1 
0 
0 
0 
0 
0 
0 
0 
0 
0 
0 
1 
0 
0 
1 
1 
0 
0 
1 
1 
0 
0 
1 
1 
0 
1 
0 
1 
A close inspection of the codewords shows that the minimum distance of the code is 
dmin = 2. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

446 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
The MATLAB script file for this problem is given next. 
___ ,, ... ·--------------
% MATLAB script for Illustrative Problem 10.8. 
% Generate U, denoting all information sequences. 
k=4; 
for i=1 :2Ak 
end 
for j=k:-1 :1 
end 
if rem(i-1,2A(-j+k+ 1 ))>=2A(-j+k) 
u(i,j)=1 ; 
else 
u(i,j)=O; 
end 
echo off ; 
echo on ; 
% Define G, the generator matrix. 
g=[1 0 0 1 1 1 0 1 1 1 ; 
1 1 1 0 0 0 1 1 1 O; 
0 1 1 0 1 1 0 1 0 1; 
1 1 0 1 1 1 1 0 0 1 ]; 
% Generate codewords. 
c=rem(u*g,2); 
% Find the minimum distance. 
w_min=min(sum((c(2:2Ak,:))' ) ) ; 
A linear block code is in the systematic form if its generator matrix is in the follow­
ing form: 
1 
0 
0 
Pl,l 
P1,2 
P1,n-k 
0 
1 
0 
G= 
P2,1 
P2,2 
P2,n-k 
(10.3.11) 
0 
0 
1 
Pk.I 
Pk,2 
Pk,n-k 
or 
G = [h IP] 
(10.3.12) 
where h denotes the k x k identity matrix and Pis a k x (n - k) matrix. In a sys­
tematic code, the first k binary symbols in a codeword are the information bits, and the 
remaining n - k binary symbols are the parity-check symbols. 
The parity-check matrix of a code is any ( n - k) x n binary matrix H such that for 
all codewords c we have 
(10.3.13) 
Obviously, we will have 
(10.3.14) 
and if G is in systematic form, then 
(10.3.15) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.3. CHANNEL CODING 
447 
Hamming Codes 
Hamming codes are ( 2m -1, 2m -m -1) linear block codes with minimum distance 
3 and a very simple parity-check matrix. The parity-check matrix, which is an m x 
(2m -1) matrix, has all binary sequences of length m, except the all-0 sequence, as its 
columns. For instance, form= 3, we have a (7, 4) code whose parity-check matrix in 
the systematic form is 
[ 
0 
1 
1 
1 
0 ] 
H= 
1 
0 
1 
0 
1 
(10.3.16) 
1 
1 
1 
0 
0 
From this we have 
1 
0 
0 
0 
1 
1 
0 
0 
1 
0 
0 
0 
1 
1 
(10.3.17) 
G= 
0 
0 
0 
0 
1 
1 
1 
0 
0 
0 
1 
1 
1 
1 
--tlM!I@ l;Miri:##l;l•1 :'9§@1 
Illustrative Problem 10.9 [Hamming Codes] Find all the codewords of the (15, 11) 
Hamming code and verify that its minimum distance is equal to 3. 
4ije1!il[e]@• 
Here 
1 
0 
0 
1 
1 
0 
1 
0 
1 
1 
1 
1 
0 
0 
0 
1 
1 
0 
0 
0 
1 
1 
1 
0 
1 
1 
0 
1 
0 
0 
(10.3.18) 
H= 
0 
0 
1 
1 
1 
0 
1 
1 
1 
0 
1 
0 
0 
1 
0 
0 
0 
1 
0 
1 
1 
0 
1 
1 
1 
1 
0 
0 
0 
1 
and, therefore, 
1 
0 
0 
0 
0 
0 
0 
0 
0 
0 
0 
1 
1 
0 
0 
0 
1 
0 
0 
0 
0 
0 
0 
0 
0 
0 
0 
1 
1 
0 
0 0 
1 
0 
0 0 0 
0 0 
0 0 
0 0 
1 
1 
0 
0 
0 
1 
0 
0 
0 
0 
0 
0 
0 
1 
0 
1 
0 
0 
0 
0 
0 
1 
0 
0 
0 
0 
0 
0 
1 
0 
0 
1 
G= 
0 
0 
0 
0 
0 
1 
0 
0 
0 
0 
0 
0 
1 
0 
1 
0 
0 
0 
0 
0 
0 
1 
0 
0 
0 
0 
1 
1 
1 
0 
0 
0 
0 
0 
0 
0 
0 
1 
0 
0 
0 
0 
1 
1 
1 
0 
0 
0 
0 
0 
0 
0 
0 
1 
0 
0 
1 
0 
1 
1 
0 
0 
0 
0 
0 
0 
0 
0 
0 
1 
0 
1 
1 
0 
1 
0 
0 
0 
0 
0 
0 
0 
0 
0 
0 
1 
1 
1 
1 
1 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

448 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
There is a total of 211 
= 2048 codewords, each of length 15. The rate of the code is 
g = 0. 733. In order to verify the minimum distance of the code, we use a MATLAB 
script similar to the one used in Illustrative Problem 10.8. The MATLAB script is given 
next, and it results in dmin = 3. 
% MATLAB script for Illustrative Problem 10.9. 
echo on 
k=11; 
for i=1 :2Ak 
end 
for j=k:-1 :1 
end 
if rem(i-1,2A(-j+k+ 1 ))>=2A(-j+k) 
u(i,j)=1; 
else 
u(i,j)=O; 
end 
echo off ; 
echo on 
; 
g=[1 0 0 0 0 0 0 0 0 0 0 1 1 0 O; 
0 1 0 0 0 0 0 0 0 0 0 0 1 1 O; 
001000000000011; 
0 0 0 1 0 0 0 0 0 0 0 1 0 1 O; 
000010000001001; 
000001000000101; 
0 0 0 0 0 0 1 0 0 0 0 1 1 1 O; 
000000010000111; 
000000001001011; 
000000000101101; 
0 0 0 0 0 0 0 0 0 0 1 1 1 1 1]; 
c=rem(u*g,2) ; 
w_min=min(sum((c(2:2Ak,:)}')); 
Performance of Linear Block Codes 
Linear block codes can be decoded using either soft-decision decoding or hard-decision 
decoding. In a hard-decision decoding scheme, first a bit-by-bit decision is made on the 
components of the codeword, and then, with a minimum Hamming distance criterion, 
the decoding is performed. The performance of this decoding scheme depends on the 
distance structure of the code, but a tight upper bound, particularly at high values of 
the SNR, can be obtained in terms of the minimum distance of the code. 
The (message) error probability of a linear block code with minimum distance 
dmin, in hard-decision decoding, is upper bounded by 
Pe ::; (M - 1) [ 4p(l - p) ]dmin/2 
(10.3.19) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.3. CHANNEL CODING 
449 
where p denotes the error probability of the binary channel (error probability in 
demodulation) and M is the number of codewords (M = zk). 
In soft-decision decoding, the received signal is mapped into the codeword whose 
corresponding signal is at minimum Euclidean distance from the received signal. The 
message-error probability in this case is upper bounded by 
Pe (M - l)Q ( 	:0) 
(10.3.20) 
where M 
= zk is the number of codewords, No is the one-sided noise power spectral 
density, and dE is the minimum Euclidean distance of the code and is given by 
which results in 
for orthogonal signaling 
for antipodal signaling 
(M - 1) Q ( J dE ) 
for orthogonal signaling 
(10.3.21) 
Pe  
(10.3.22) 
(M - l)Q (J 2d::oin E) 
4' 
• 
d l . 
1. 
1 v1 
1or antlpo a s1gna mg 
In these inequalities drrtin is the minimum Hamming distance of the code and E de­
notes the energy per each component of the codewords. Because each codeword has 
n components, the energy per codeword is nE, and because each codeword carries k 
information bits, the energy per bit, Eb, is given by 
(10.3.23) 
where Re 
= k/n denotes the rate of the code. Therefore, the above relations can be 
written as 
(M - l)Q ( 
for orthogonal signaling 
Pe  
(10.3.24) 
(M 
_ l)Q ( (2drrn;,R
0 cEb ) 
4' 
• 
d l . 
1. 
V 
rn 
1or antipo a s1gna mg 
The bounds obtained are usually useful only for large values of }'b 
Eb/No. For 
smaller }'b values, the bounds become very loose and can even exceed 1. 
--tl!!§.il;Miltj:ii;t•]:J!#@I 
Illustrative Problem 10.10 [Performance of Hard-Decision Decoding] Assuming 
that the (15, 11) Hamming code is used with antipodal signaling and hard-decision 
decoding, plot the message-error probability as a function of }'b = Eb I No. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from 
the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

450 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
Because antipodal signaling is employed, the error probability of the binary channel is 
given by 
(10.3.25) 
where Eis the energy per component of the code (energy per dimension) and is derived 
from Eb by 
(10.3.26) 
Therefore, 
(10.3.27) 
where Re = kin= i = 0.73333. Because the minimum distance of Hamming codes 
is 3, we have 
p 
e  ( 211 - 1 ) [ 4 p (1 - p ) ] dmin / 2 
 2047 [ 4Q ( t4!:E
b ) ( 1 _ Q ( J 
i.4;:E
b ) ) r 
(10.3.28) 
The resulting plot is shown in Figure 10.12. 
Pe 10-2 
10-• 
10-6 
10-B 
10-10 
10-12 
10-14 
10-16 
10-18 
10 
11 
12 
13 
14 
15 
16 
Yb (dB) 
Figure 10 .12: Error probability as a function of Yb for a ( 15, 11) Hamming code with 
hard-decision decoding and antipodal signaling 
The MATLAB function for computing the bound on message-error probability of a 
linear block code when hard-decision decoding and antipodal signaling are employed 
is given next. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.3. CHANNEL CODING 
451 
___ ,., .. ·---------------
function [p_err,gama_db )=p_e_hd_a(gamma_db_l,gama_db_h,k, n,d_min) 
% p..eJul_a.m 
Matlab function for computing error probability in 
% 
hard-decision decoding of a linear block code 
% 
when antipodal signaling is used. 
% 
[p..err,gamma..db]=p_eJul_a(gamma..db_l,gamma..db..h,k,n,d_min) 
% 
gamma..db-1=lower E..b/N_O 
% 
gamma..db..h=higher E..b/N_O 
% 
k=number of information bits in the code 
% 
n=code block length 
% 
d_min=minimum distance of the code 
gamma_db=(gama_db_l:(gamma_db_h-gama_db_l)/20:gama_db_h); 
gama_b=10. "(gama_db/1 O); 
R_c=kln; 
p_b=q(sqrt(2.*R_c.*gamma_b)}; 
p_err=(2"k-1 ).*(4*p_b.*(1-p_b)}. "(d_min/2); 
In the MATLAB script given next, the preceding MATLAB function is employed 
to plot error probability versus Yb. 
___ ,,, .. ·---------------
% MATLAB script for Illustrative Problem JO.JO. 
[p_err_ha,gama_b]=p_e_hd_a(10,16,11, 15,3); 
semilogy(gamma_b,p_err_ha} 
Illustrative Problem 10.11 [Hard-DecisionDecoding]Ifthe (15, 11) Hamming code 
is used with an orthogonal binary modulation scheme instead of the antipodal scheme, 
plot the message-error probability as a function of Yb = Eb/ No. 
The problem is similar to Illustrative Problem 10 .10, except that the crossover probabil­
ity of the equivalent binary symmetric channel (after hard-decision decoding) is given 
by 
(10.3.29) 
Using the relation 
(10.3.30) 
we obtain 
(10.3.31) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

452 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
and, finally, 
p 
e 
& ( 211 
- 1 ) [ 4 p ( 
1 -
p ) ] dmin / 2 
 2047 [ 4Q u
0.7!:
E
·) ( 1- Q u
0.7!:
E
·)) r 
(10.3.32) 
The Pe-versus-Eb/ No plot is shown in Figure 10.13. The MATLAB file for this prob­
lem is given next. 
% MATLAB script for Illustrative Problem 10.11. 
echo on 
gama_b_db=[-4:1 :14]; 
gamma_b=10. "(gamma_b_db/10); 
qq=q(sqrt(0.733.*gama_b)); 
p_err=2047*qq. "2.*(3-2.*qq); 
pause % Press a key to see p_err versus gamma..b curve. 
loglog(gama_b,p_err) 
Pe 101 
100 
10-' 
1ff2 
10-3 
1ff4 
10-5 
10-6 
10-' 
10"8 
10 
11 
12 
13 
14 
15 
16 
Yb (dB) 
Figure 10 .13: Error probability versus Yb of a ( 15, 11) code with orthogonal signaling 
and hard-decision decoding 
As we observe from Figure 10 .13, for lower values of Yb the derived bound is too 
loose. In fact, for these values of Yb the bound on the error probability is larger than 
1. It is also instructive to plot the two error probability bounds for orthogonal and 
antipodal signaling on the same figure. 
This is done in Figure 10.14. The superior 
performance of the antipodal signaling compared to orthogonal signaling is readily 
seen from a comparison of these two plots. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.3. CHANNEL CODING 
Pe 102 
10° 
10-2 
10-• 
10·6 
10-" 
10-'0 
10-12 
10-14 
10-'6 
10-'" 
10 
11 
12 
13 
Antipodal signaling 
14 
15 
16 
Yb (dB) 
Figure 10.14: Comparison of antipodal and orthogonal signaling 
453 
The MATLAB function for computing the message-error probability in the case of 
hard-decision decoding with orthogonal signaling is given next. 
___ ,, ... ·---------------
function [p_err,gama_db]=p_e_hd_o(gamma_db_l,gamma_db_h,k,n,d_min) 
% p...eJid_o.m 
Matlab function for computing error probability in 
% 
hard-decision decoding of a linear block code 
% 
% 
% 
% 
% 
% 
% 
when orthogonal signaling is used. 
[p...err,gamma..db]=p_eJid_o(gamma..db_l,gamma..dbJi,k,n,d_min) 
gamma..db-1=lower E..b/N_O 
gamma..dbJi=higher E..b/N_O 
k=number of information bits in the code 
n=code block length 
d_min=minimum distance of the code 
gamma_db=[gamma_db_l:(gamma_db_h-gama_db_l)/20:gama_db_h); 
gama_b= 10. A (gama_db/1 0); 
R_c=kln; 
p_b=q(sqrt(R_c.*gamma_b)}; 
p_err=(2Ak-1 ).*(4*p_b.*(1-p_b)). A(d_min/2); 
Illustrative Problem 10.12 [Soft-Decision Decoding] Solve Illustrative Problem 10.11 
when soft-decision decoding is used instead of hard-decision decoding, 
In this case we have to use Equation ( 10 .3 .24) to find an upper bound for the error prob­
ability. In the problem under study, dmin 
= 3, Re 
=  ,and M 
= 211 - 1 
= 2047. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

454 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
Therefore, we have 
PeE 
(M - l)Q ( 
for orthogonal signaling 
(M - l)Q ( 
2dminRcEb ) 
No 
for antipodal signaling 
2047Q (151 ::0) 
 
h 
l . 
l' 
1 "'' 
1or ort ogona s1gna mg 
2047Q (252 ::0) 
 
. 
d l . 
l" 
1 "'' 
1or antipo a s1gna mg 
In comparing these error rate expressions, we observe that antipodal signaling is 3 dB 
better than orthogonal signaling. The corresponding plots are shown in Figure 10.15. 
Pe 10° 
1ff2 
10-• 
10"6 
10-8 
10-10 
10-12 
10-14 
10-'6 
10-'" 
10 
11 
12 
Antipodal signaling 
13 
14 
15 
16 
Yb (dB) 
Figure 10.15: Message-error probability versus Yb for soft-decision decoding 
Two MATLAB functions, one for computing the error probability for antipodal 
signaling and one for computing the error probability for orthogonal signaling when 
soft-decision decoding is employed, are given next. 
---®•*"' ·---------------
function [p_err,gama_db]=p_e_sd_a(gama_db_l,gama_db_h,k,n,d_min) 
% p_e_sd_a.m 
Matlab function for computing error probability in 
% 
soft-decision decoding of a linear block code 
% 
% 
% 
% 
when antipodal signaling is used. 
[ p _err,gamma_db] =p-e _sd_a( gamma_db _l,gamma_dbJi,k,n,d.min) 
gamma_dbJ=lower E-b/N_O 
gamma_dbJi=higher E_.b/N_O 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.3. CHANNEL CODING 
% 
% 
% 
k=number of information bits in the code 
n=code block length 
d_min=minimum distance of the code 
gamma_db=[gamma_db_l:(gamma_db_h-gama_db_l)/20:gama_db_h]; 
gama_b= 10. A (gama_db/1 0); 
R_c=kln; 
p_err=(2Ak-1 ). *q(sqrt(2. *d_min. *R_c. *gamma_b)); 
455 
___ ,, ... ·---------------
function [p_err ,gama_ db ]=p_e_sd_o(gama_db_l,gamma_db_h,k,n,d_min) 
% p...e...sd..fJ.m 
Matlab function for computing error probability in 
% 
soft-decision decoding of a linear block code 
% 
when orthogonal signaling is used. 
% 
[p...err,gamma..db]=p_e...sd..fJ(gamma..dbJ,gamma..dbJi,k,n,d_min) 
% 
gamma..dbJ=lower E...b/N_O 
% 
gamma..dbJi=higher E...b/N_O 
% 
k=number of information bits in the code 
% 
n=code block length 
% 
d_min=minimum distance of the code 
gamma_db=[gama_db_l:(gamma_db_h-gama_db_l)/20:gama_db_h]; 
gama_b= 10. A (gamma_db/10); 
R_c=kln; 
p_err=(2Ak-1 ).*q(sqrt(d_min.*R_c.*gama_b)); 
In Figure 10.16, four plots corresponding to antipodal and orthogonal signaling 
with soft- and hard-decision decoding are shown. 
Antipodal-SD 
10-'• -------- 
7 
8 
9 
10 
11 
12 
13 
Yb (dB) 
Figure 10.16: Comparison of antipodal/orthogonal signaling and soft/hard-decision 
decoding 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

456 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
The MATLAB script that generates this figure is given next. 
% MATLAB script for Illustrative Problem 10.12. 
[p-err_ha,gamma_b]=p_e_hd_a(7, 13, 11, 15,3); 
(p_err_ho,gama_b]=p_e_hd_o(7, 13, 11, 15,3); 
(p_err_so,gamma_b]=p_e_sd_o(7, 13, 11, 15,3); 
(p_err_sa,gamma_b]=p_e_sd_a(7, 13, 11, 15,3); 
semilogy(gama_b,p_err_sa,gamma_b,p_err_so,gama_b,p_err_ha,gama_b,p_err_ho) 
10.3.2 
Convolutional Codes 
In block codes each sequence of k information bits is mapped into a sequence of n 
channel inputs in a fixed way regardless of the previous information bits. In convo­
lutional codes each sequence of ko information bits is mapped into a channel input 
sequence of length no, but the encoder output sequence depends not only on the most 
recent ko information bits but also on the last (L - 1) ko inputs of the encoder. There­
fore, the encoder has the structure of a finite-state machine, where at each time instance 
the output sequence depends not only on the input sequence but also on the state of the 
encoder, which is determined by the last (L - 1) ko inputs of the encoder. The parame­
ter L is called the constraint length of the convolutional code.1 A binary convolutional 
code is, therefore, a finite-state machine with 2ko(I-l) states. The schematic diagram 
for a convolutional code with ko = 2, no = 3, and L = 4 is shown in Figure 10 .17. 
ko = 2 
+ 
Figure 10 .17: A convolutional code with ko = 2, no = 3, and L = 4 
In this convolutional encoder the information bits are loaded into the shift register 2 
bits at a time, and the last two information bits in the shift register move out. The three 
encoded bits are then computed as shown in the figure and are transmitted over the 
channel. The rate of this code is, therefore, R 
= . Note that the three encoder outputs 
transmitted over the channel depend on the two information bits loaded into the shift 
register as well as the contents of the first three stages (6 bits) of the shift register. The 
contents of the last stage (2 bits) have no effect on the output because they leave the 
shift register as soon as the two information bits are loaded into it. 
1Some authors define m 
= Lko as the constraint length, and some prefer (I - l)ko as the constraint 
length. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.3. CHANNEL CODING 
457 
A convolutional code is usually defined in terms of the generator sequences of the 
convolutional code, denoted by 91,92, ... ,9n· The ith component of 9j, 1 :::; i:::; koL 
and 1 :::; j :::; n, is 1 if the ith element of the shift register is connected to the com­
biner corresponding to the jth bit in the output and 0 otherwise. For example, in the 
convolutional code depicted in Figure 10 .17, we have 
91 
= [O 
92 
= [0 
93 
= [l 
0 
0 
0 
1 
0 
0 
0 
0 
0 
1 
0 
0 
0 
0 
0 
0 
0 
0 
l] 
l] 
l] 
As soon as 91, 92, ... , 9n are specified, the convolutional code is uniquely determined. 
We also define the generator matrix of the convolutional code as 
G= 
9n 
which is, in general, an n x koL matrix. 
For the convolutional code shown in 
Figure 10 .17 we have 
G 
 r 
0 
1 
0 
1 
0 
0 J 
0 
0 
0 
0 
0 
0 
0 
0 
0 
0 
0 
0 
It is helpful to assume the shift register that generates the convolutional code is 
loaded with O's before the first information bit enters it (i.e., the encoder is initially in 
zero state) and that the information bit sequence is padded with (L - l)ko O's to bring 
back the convolutional encoder to the all-0 state. We also assume that the length of 
the information-bit sequence (input to the convolutional encoder) is a multiple of ko. 
If the length of the input sequence is not a multiple of ko, we pad it with 0 's such that 
the resulting length is a multiple of ko. This is done before adding the (L - l)ko O's 
indicated earlier in this paragraph. If, after the first zero padding, the length of the input 
sequence is nko, the length of the output sequence will be (n + L - l)no, so the rate 
of the code will be 
nko 
(n + L - l)no 
In practice n is much larger than L; hence, the above expression is well approximated 
by 
R 
_ ko 
c 
- no 
The MATLAB function cnv _encd.m given next generates the output sequence of 
the convolutional encoder when G, ko, and the input sequence are given. Note that zero 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

458 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
padding of the input sequence is done by the MATLAB function. The input sequence 
(denoted by the parameter "input") starts with the first information bit that enters the 
encoder. The parameters no and Lare derived from the matrix G. 
___ ,, ... ·---------------
function output=cnv _encd(g,kO,input) 
% 
cnv_encd(g,kO,input) 
% 
determines the output sequence of a binary convolutional encoder 
% 
g is the generator matrix of the convolutional code 
% 
with nO rows and l*kO columns. Its rows are gl,g2, ... ,gn. 
% 
kO is the number of bits entering the encoder at each clock cycle. 
% 
input is the binary input seq. 
% 
Check to see if extra zero-padding is necessary. 
if rem(length(input),kO) 
> 0 
input=[input,zeros(size(1 :kO-rem(length(input),kO)))]; 
end 
n=length(input)/kO; 
% 
Check the size of matrix g. 
if rem(size(g,2),kO) 
> 0 
error('Error, g is not of the right size.') 
end 
% 
Determine l and nO. 
l=size(g,2)/kO; 
nO=size(g, 1); 
% 
add extra zeros 
u=[zeros(size(1 :(1-1 )*k0)),input,zeros(size(1 :(1-1 )*kO))]; 
% 
Generate uu, a matrix whose columns are the contents of 
% 
conv. encoder at various clock cycles. 
ul=u(l*k0:-1 :1 ); 
for i=1 :n+l-2 
ul=[ul,u((i+l)*k0:-1 :i*k0+1 )]; 
end 
uu=reshape(ul,l*kO,n+l-1 ); 
% 
Determine the output 
output=reshape(rem(g*uu,2), 1,nO*(l+n-1 )); 
--li!!IJ§jl;Ml$tJ##l;l•1:J!§ll1 
Illustrative Problem 10.13 [Convolutional Encoder] Determine the output of the 
convolutional encoder shown in Figure 10.17 when the information sequence is 
10011100110000111 
Here, the length of the information sequence is 17, which is not a multiple of ko 
= 2; 
therefore, extra zero padding will be done. In this case it is sufficient to add one 0, 
which gives a length of 18. Thus, we have the following information sequence: 
100111001100001110 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.3. CHANNEL CODING 
459 
Now, because we have 
G 
 l 
0 
1 
0 
1 
0 
0 j 
0 
0 
0 
0 
0 
0 
0 
0 
0 
0 
0 
0 
we obtain no 
= 3 and L 
= 4 (this is also obvious from Figure 10.17). The length of 
the output sequence is, therefore, 
( 
1
2
8 + 4 -1) x 3 = 36 
The zero padding required to make sure that the encoder starts from the all-0 state 
and returns to the all-0 state adds (L - l)ko O's to the beginning and end of the input 
sequence. Therefore, the sequence under study becomes 
000000100111001100001110000000 
Using the function cnv_encd.m, we find the output sequence to be 
000001101111101011100110100100111111 
The MATLAB script to solve this problem is given next. 
k0=2; 
g=[O 0 1 0 1 0 0 1 ;O 0 0 0 0 0 0 1 ;1 0 0 0 0 0 0 1]; 
input=[1 0 0 1 1 1 0 0 1 1 0 0 0 0 1 1 1 ]; 
output=cnv _encd(g,kO,input); 
Representation of Convolutional Codes 
We have seen that a convolutional code can be represented by either the structure of 
the encoder or G, the generator matrix. We have also seen that a convolutional encoder 
can be represented as a finite-state machine and, therefore, can be described by a state 
transition diagram representing the finite-state machine. A more widely used method 
for representation of convolutional codes is in terms of their trellis diagram. A trellis 
diagram is a state transition diagram plotted versus time. Therefore, a trellis diagram 
is a sequence of 2(L-l)ko states, shown as dots, for each clock cycle and branches 
corresponding to transitions between these states. 
Consider the convolutional code with ko 
= 1, no 
= 
2, and L 
= 
3 shown in 
Figure 10.18. Obviously, this code can be represented by a finite-state machine with 
four states corresponding to different possible contents of the first two elements of the 
shift register-namely, 00, 01 , 10, and 1 1 .  Let us represent these four states by the 
letters a, b, c, and d, respectively. In order to draw the trellis diagram for this code, 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from 
the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

460 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
ko = 1 
'\ 
, ,--i:., 
, 
, "-f' 
Figure 10 .18: A convolutional encoder with ko 
= 1, no 
= 2, and L 
= 3 
OJ 
01 
01 
01 
01 
Figure 10.19: The trellis diagram for the convolutional code shown in Figure 10.18 
we have to draw four dots corresponding to each state for each clock cycle and then 
connect them according to various transitions that can take place between states. The 
trellis diagram for this code is shown in Figure 10 .19. 
As we can see in Figure 10.19, on the time axis, which corresponds to clock cy­
cles, the four states are denoted by black dots and the transitions between states are 
indicated by branches connecting these dots. On each branch connecting two states, 
two binary symbols indicate the encoder output corresponding to that transition. Also 
note that we always start from the all-0 state (state a), move through the trellis fol­
lowing the branches corresponding to the given input sequence, and return to the all-0 
state. Therefore, codewords of a convolutional code correspond to paths through the 
corresponding trellis, starting at the all-0 state and returning to the all-0 state. 
The number of states in the trellis increases exponentially with the constraint length 
of the convolutional code. 
For example, for the convolutional encoder shown in 
Figure 10.17, the number of states is 26 
= 64; therefore, the structure of the trellis 
is much more complex. 
The Transfer Function of a Convolutional Code 
For each convolutional code the transfer function gives information about the various 
paths through the trellis that start from the all-0 state and return to this state for the 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.3. CHANNEL CODING 
461 
first time. According to the coding convention described before, any codeword of a 
convolutional encoder corresponds to a path through the trellis that starts from the all-
0 state and returns to the all-0 state. As we will see later, the transfer function of a 
convolutional code plays a major role in bounding the error probability of the code. To 
obtain the transfer function of a convolutional code, we split the all-0 state into two 
states, one denoting the starting state and one denoting the first return to the all-0 state. 
All the other states are denoted as in-between states. Corresponding to each branch 
connecting two states, a function of the form DO< Nf3] is defined, where ex denotes the 
number of l's in the output bit sequence and f3 is the number of l's in the corresponding 
input sequence for that branch. The transfer function of the convolutional code is then 
the transfer function of the flow graph between the starting all-0 state and the final 
all-0 state and is denoted by T(D,N,J) . Each term of T(D,N,J) corresponds to a 
path through the trellis starting from the all-0 state and ending at the all-0 state. The 
exponent of] indicates the number of branches spanned by that path, the exponent of 
D shows the number of 1 's in the codeword corresponding to that path (or, equivalently, 
the Hamming distance of the codeword with the all-0 codeword), and the exponent of 
N indicates the number of l's in the input information sequence. T(D, N,]) indicates 
the properties of all paths through the trellis starting from the all-0 path and returning 
to it for the first time, so, in deriving it, any self-loop at the all-0 state is ignored. To 
obtain the transfer function of the convolutional code, we can use all rules that can be 
used to obtain the transfer function of a flow graph. For more details on deriving the 
transfer function of a convolutional code, see Proakis and Salehi (2002). 
Following the rules for deriving the transfer function, we can easily show that the 
transfer function of the code shown in Figure 10 .18 is given by 
D5N]3 
T(D,N,J) 
= 
l -DNJ -DNJ2 
which, when expanded, can be expressed as 
From the above expression for T (D, N,]), we can see that there exists one code­
word with Hamming weight 5, two codewords with Hamming weight 6, and so on. The 
expression also shows, for example, that the codeword with Hamming weight 5 corre­
sponds to an input sequence of Hamming weight 1 and length 3. The smallest power of 
D in the expansion of T (D, N,]) is called the free distance of the convolutional code 
and is denoted by dfree. In this example dfree 
= 5. 
Decoding of Convolutional Codes 
There exist many algorithms for decoding of convolutional codes. The Viterbi algo­
rithm is probably the most widely used decoding method for convolutional codes. This 
algorithm is particularly interesting because it is a maximum-likelihood decoding algo­
rithm, which-upon receiving the channel output-searches through the trellis to find 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

462 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
the path that is most likely to have generated the received sequence. If hard-decision de­
coding is used, this algorithm finds the path that is at the minimum Hamming distance 
from the received sequence, and if soft-decision decoding is employed, the Viterbi al­
gorithm finds the path that is at the minimum Euclidean distance from the received 
sequence. 
In hard-decision decoding of convolutional codes, we want to choose a path through 
the trellis whose codeword, denoted by c, is at minimum Hamming distance from 
the quantized received sequence y. In hard-decision decoding the channel is binary 
memoryless (the fact that the channel is memoryless follows from the fact that the 
channel noise is assumed to be white). Because the desired path starts from the all-0 
state and returns back to the all-0 state, we assume that this path spans a total of m 
branches, and because each branch corresponds to no bits of the encoder output, the 
total number of bits inc and y is mno. We denote the sequence of bits corresponding 
to the ith branch by Ci and Yi, respectively, where 1 :s: i :s: m and each Ci and Yi is of 
length no. The Hamming distance between c andy is, therefore, 
m 
d(c ,y) = L d(ci.Yi) 
i=l 
(10.3.33) 
In soft-decision decoding we have a similar situation, with three differences: 
1. Instead of y we are dealing directly with the vector r, the vector output of the 
optimal (matched filter type or correlator type) digital demodulator. 
2. Instead of the binary 0, 1 sequence c, we are dealing with the corresponding 
sequence c' with 
c'.. = {vE, 
l) 
-vE, 
for 1 :s: i :s: m and 1 :s: j :s: n. 
if Cij = 1 
if Cij = 0 
3. Instead of Hamming distance we are using Euclidean distance. This is a con­
sequence of the fact that the channel under study is an additive white Gaussian 
noise channel. 
From the above we have 
m 
d(c',r) = L d(c.Yi) 
(10.3.34) 
i=l 
From Equations (10.3.33) and (10.3.34), we see that the generic form of the prob­
lem we have to solve is: Given a vector a, find a path through the trellis starting at the 
all-0 state and ending at the all-0 state such that some distance measure between a and 
a sequence b corresponding to that path is minimized. The important fact that makes 
this problem easy to solve is that the distance between a and b in both cases of interest 
can be written as the sum of distances corresponding to individual branches of the path. 
This is easily observed from (10.3.33) and (10.3.34). 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.3. CHANNEL CODING 
463 
Now let us assume that we are dealing with a convolutional code with ko 
= 1. 
This means that there are only two branches entering each state in the trellis. If the 
optimal path at a certain point passes through state S, there are two paths that connect 
the previous states S1 and Sz to this state (see Figure 10.20.) 
S1 
• 
v=7:5 
• 
• 
• 
• 
• 
• 
• 
Figure 10.20: Justification of the Viterbi algorithm 
If we want to see which one of these two branches is a good candidate to minimize 
the overall distance, we have to add the overall (minimum) metrics at states S1 and Sz to 
the metrics of the branches connecting these two states to the state S. Then, obviously, 
the branch that has the minimum total metric accumulation up to state S is a candidate 
to be considered for the state after the state S. This branch is called a survivor at state 
S, and the other branch is simply not a suitable candidate and is deleted. Now, after 
the survivor at state S is determined, we also save the minimum metric up to this state, 
and we can move to the next state. This procedure is continued until we reach the all-0 
state at the end of the trellis. For cases where ko > 1, the only difference is that at each 
stage we have to choose one survivor path from among 2ko branches leading to state S. 
The preceding procedure can be summarized in the following algorithm, known as 
the Viterbi algorithm. 
1. Parse the received sequence into m subsequences each of length no. 
2. Draw a trellis of depth m for the code under study. For the last L - 1 stages of 
the trellis, draw only paths corresponding to the all-0 input sequences. This is 
done because we know that the input sequence has been padded with ko (L - 1) 
O's. 
3. Set l = 1 and set the metric of the initial all-0 state equal to 0. 
4. Find the distance of the lth subsequence of the received sequence to all branches 
connecting lth stage states to the (l + l)st stage states of the trellis. 
5. Add these distances to the metrics of the lth-stage states to obtain the metric 
candidates for the (l + l)st-stage states. For each state of the (l + l)st-stage, 
there are 2ko candidate metrics, each corresponding to one branch ending at that 
state. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

464 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
6. For each state at the ( l + 1) st-stage, choose the minimum of the candidate metrics 
and label the branch corresponding to this minimum value as the survivor, and 
assign the minimum of the metric candidates as the metrics of the ( l + 1) st-stage 
states. 
7. If l 
= m, go to the next step; otherwise, increase l by 1 and go to step 4. 
8. Starting with the all-0 state at the (m + l)st stage, go back through the trellis 
along the survivors to reach the initial all-0 state. This path is the optimal path, 
and the input-bit sequence corresponding to that is the maximum-likelihood de­
coded information sequence. To obtain the best guess about the input-bit se­
quence, remove the last ko(L - 1) O's from this sequence. 
As we can see from the algorithm, the decoding delay and the amount of memory 
required for decoding a long information sequence are unacceptable. The decoding 
cannot be started until the whole sequence (which in the case of convolutional codes 
can be very long) is received, and the total surviving paths have to be stored. In prac­
tice, a suboptimal solution that does not cause these problems is desirable. One such 
approach, which is referred to as path memory truncation, is that the decoder at each 
stage searches only 8 stages back in the trellis and not to the start of the trellis. With 
this approach, at the (8 + l)st stage, the decoder makes a decision on the input bits 
corresponding to the first stage of the trellis (the first ko bits), and future received bits 
do not change this decision. This means that the decoding delay will be ko8 bits, and 
it is required to keep the surviving paths corresponding to the last 8 stages. Computer 
simulations have shown that if 8  SL, the degradation in performance due to path 
memory truncation is negligible. 
Illustrative Problem 10.14 [Viterbi Decoding] Let us assume that in hard-decision 
decoding, the quantized received sequence is 
y 
= 01101111010001 
The convolutional code is the one given in Figure 10.18. Find the maximum-likelihood 
information sequence and the number of errors. 
The code is a ( 2, 1) code with L = 3. The length of the received sequence y is 14. This 
means that m 
= 7, and we have to draw a trellis of depth 7. Also note that because 
the input information sequence is padded with ko(L - 1) 
= 2 zeros, for the final two 
stages of the trellis we will draw only the branches corresponding to all-0 inputs. This 
also means that the actual length of the input sequence is 5, which, after padding with 
two O's, has increased to 7. The trellis diagram for this case is shown in Figure 10.21. 
The parsed received sequence y is also shown in this figure. Note that in drawing 
the trellis in the last two stages, we have considered only the 0 inputs to the encoder 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.3. CHANNEL CODING 
Received 
sequence 
01 
10 
11 
465 
11 
01 
00 
01 
Figure 
10 .21: 
The 
trellis 
diagram 
for 
Viterbi 
decoding 
of 
the 
sequence 
( 01101111010001) 
(notice that in the final two stages, there exist no dashed lines corresponding to 1 in­
puts). Now the metric of the initial all-0 state is set to 0 and the metrics of the next 
stage are computed. In this step there is only one branch entering each state; therefore, 
there is no comparison, and the metrics (which are the Hamming distances between 
that part of the received sequence and the branches of the trellis) are added to the met­
ric of the previous state. In the next stage there exists no comparison either. In the 
fourth stage, for the first time we have two branches entering each state. This means 
that a comparison has to be made here, and survivors are to be chosen. From the two 
branches that enter each state, one that corresponds to the least total accumulated met­
ric remains as a survivor, and the other branches are deleted (marked by a small circle 
on the trellis). If at any stage two paths result in the same metric, each one of them 
can be a survivor. Such cases have been marked by a question mark in the trellis di­
agram. The procedure is continued to the final all-0 state of the trellis; then, starting 
from that state we move along the surviving paths to the initial all-0 state. This path, 
which is denoted by a heavy black line path through the trellis, is the optimal path. The 
input-bit sequence corresponding to this path is 1100000, where the last two O's are 
not information bits but were added to return the encoder to the all-0 state. Therefore, 
the information sequence is 11000. The corresponding codeword for the selected path 
is 11101011000000, which is at Hamming distance 4 from the received sequence. All 
other paths through the trellis correspond to codewords that are at greater Hamming 
distance from the received sequence. 
For soft-decision decoding a similar procedure is followed, with squared Euclidean 
distances substituted for Hamming distances. 
The MATLAB function viterbi.m given next employs the Viterbi algorithm to de­
code a channel output. This algorithm can be used for both soft-decision and hard­
decision decoding of convolutional codes. The separate file metric.m defines the metric 
used in the decoding process. For hard-decision decoding this metric is the Hamming 
distance, and for soft-decision decoding it is the Euclidean distance. For cases where 
the channel output is quantized, the metric is usually the negative of the log-likelihood, 
- log p (channel output I channel input). A number of short m-files called by viterbi.m 
are also given next. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

466 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
---®Ii" •---------------
function [ decoder_output, survivor_ state,cumulated_metric ]=viterbi( G ,k,channeL output) 
% VITERBI 
The Viterbi decoder for convolutional codes 
% 
{decoder _output,survivor _state ,cumulated_metric] =viterbi( G ,k,channeLoutput) 
% 
G is a n x Lk matrix each row of which 
% 
determines the connections from the shift register to the 
% 
n-th output of the code, kin is the rate of the code. 
% 
survivor _state is a matrix showing the optimal path through 
% 
the trellis. The metric is given in a separate function metric(x,y) 
% 
and can be specified to accommodate hard and soft decision. 
% 
This algorithm minimizes the metric rather than maximizing 
% 
the likelihood. 
n=size(G, 1 ); 
% 
check the sizes 
if rem(size(G,2},k} -=0 
error(' Size of G and k do not agree' ) 
end 
if rem(size(channeLoutput,2},n) -=0 
error(' channel output not of the right size' ) 
end 
L=size(G,2}/k; 
number_oLstates=2 A ((L-1 }*k}; 
% 
Generate state transition matrix, output matrix, and input matrix. 
for j=O:number_oLstates-1 
for 1=0:2Ak-1 
[ nexL state,memory _contents ]=nxL stat(j ,l,L,k}; 
input(j+ 1,nexL state+ 1 }=l; 
branch_output=rem(memory_contents*G•, 2); 
nextstate(j+ 1,1+ 1 )=nexLstate; 
output(j+ 1,1+ 1 }=bin2deci(branch_ output); 
end 
end 
state_metric=zeros(number _ oLstates, 2); 
depth_oLtrellis=length( channeL output)/n; 
channeL outpuLmatrix=reshape( channeL output,n,depth_ oLtrellis); 
survivor _state=zeros(number _oLstates,depth_oLtrellis+ 1 ) ; 
% 
Start decoding of non-tail channel outputs. 
for i= 1 :depth_ oLtrellis-L+ 1 
flag= zeros( 1, number_ oLstates); 
if i <= L 
step=2 A ( (L-i}*k}; 
else 
step=1; 
end 
for j=O:step:number_oLstates-1 
for 1=0:2Ak-1 
branch_metric=O; 
binary_output=deci2bin(output(j+ 1,1+ 1 ),n); 
for ll=1 :n 
branch_metric=branch_metric+metric( channeL outpuLmatrix(ll,i}, binary_ output(ll}); 
end 
if((state_metric(nextstate(j+ 1,1+ 1)+1,2) 
> state_metric(j+ 1, 1 ) ... 
+branch_metric) I flag(nextstate(j+ 1,1+ 1)+1 )==0} 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.3. CHANNEL CODING 
state_metric(nextstateU+ 1,1+ 1)+1,2) = state_metricU+ 1, 1 )+branch_metric; 
survivor_state(nextstateU+ 1,1+ 1)+1,i+ 1 )=j; 
ftag(nextstateU+ 1,1+ 1)+1 )=1 ; 
end 
end 
end 
state_metric=state_metric(:,2:-1 :1 ); 
end 
% 
Start decoding of the tail channel-outputs. 
for i=depth_oLtrellis-L+2:depth_oLtrellis 
ftag=zeros(1,number_oLstates); 
lasLstop=number_oLstates/(2A((i-depth_oLtrellis+L-2)*k)); 
for j=O:lasLstop-1 
branch_metric=O; 
binary_output=deci2bin(outputU+ 1, 1 ),n); 
for 11=1 :n 
branch_metric=branch_metric+metric( channeL outpuLmatrix(ll,i), binary_ output(ll)); 
end 
if((state_metric(nextstateU+ 1, 1)+1,2) 
> state_metricU+ 1, 1 ) ... 
+branch_metric) I ftag(nextstateU+ 1, 1)+1 )==0) 
state_metric(nextstateU+ 1, 1)+1,2) = state_metricU+ 1, 1 )+branch_metric; 
survivor_state(nextstateU+ 1, 1)+1,i+ 1 )=j; 
ftag(nextstateU+ 1, 1)+1 )=1 ; 
end 
end 
state_metric=state_metric(:,2:-1 :1 ); 
end 
% 
Generate the decoder output from the optimal path. 
state_sequence=zeros(1,depth_oLtrellis+ 1 ); 
state_ sequence( 1 ,depth_ of_ trellis )=survivor_ state( 1 ,depth_ oLtrellis+ 1 ) ; 
for i=1 :depth_oLtrellis 
state_ sequence( 1 ,depth_ oLtrellis-i+ 1 )=survivor_ state( (state_ sequence( 1 ,depth_ oLtrellis+2-i) ... 
+ 1 ),depth_oLtrellis-i+2); 
end 
decodeder _ outpuLmatrix=zeros(k,depth_ oLtrellis-L+ 1 ) ; 
for i=1:depth_oLtrellis-L+1 
dec_outpuLdeci=input(state_sequence(1,i)+ 1,state_sequence(1,i+ 1)+1); 
dec_outpuL bin=deci2bin( dee_ outpuLdeci,k); 
decoder_outpuLmatrix(:,i)=dec_outpuLbin(k:-1 :1)' ; 
end 
decoder _output=reshape( decoder_ outpuLmatrix, 1 ,k* (depth_ oLtrellis-L+ 1 ) ) ; 
cumulated_metric=state_metric(1, 1 ); 
467 
__., .... ·---------------
function distance=metric(x,y) 
if x==y 
distance=O; 
else 
distance=1; 
end 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

468 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
---®Ii" •---------------
function [ nexLstate,memory _contents ]=nxL stat( currenLstate,input,L,k) 
binary _state=deci2bin(currenL state,k*(L-1 )); 
binary _input=deci2bin(input,k); 
nexLstate_binary=[binary_input,binary_state(1 :(L-2)*k)]; 
nexLstate=bin2deci(nexL state_ binary); 
memory _contents=[binary _ input, binary_ state]; 
---®Ii" •---------------
function y=bin2deci(x) 
l=length(x); 
y=(l-1 :-1 :O); 
y=2. Ay; 
y=x*y•; 
---®Ii" •---------------
function y=deci2bin(x,l) 
y = zeros(1,1); 
i = 1; 
while x>=O & i<=l 
y(i)=rem(x,2); 
x=(x-y(i))/2; 
i=i+1; 
end 
y=y(l:-1 :1 ); 
Illustrative Problem 10.15 Repeat Illustrative Problem 10.14 using the MATLAB func­
tion viterbi.m. 
It is enough to use the m-file viterbi.m with the following inputs: 
G[:  :] 
k=l 
channel_output = [0 
1 
1 
0 
1 
1 
1 
1 
0 
1 
0 0 0 l] 
which results in decoder_ output= [l 
1 
0 0 0] and an accumulated metric of 4. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.3. CHANNEL CODING 
469 
Error Probability Bounds for Convolutional Codes 
Finding bounds on the error performance of convolutional codes is different from the 
method used to find error bounds for block codes because here we are dealing with 
sequences of very large length; because the free distance of these codes is usually 
small, some errors will eventually occur. The number of errors is a random variable 
that depends on both the channel characteristics (signal-to-noise ratio in soft-decision 
decoding and crossover probability in hard-decision decoding) and the length of the 
input sequence. The longer the input sequence, the higher the probability of making 
errors. Therefore, it makes sense to normalize the number of bit errors to the length of 
the input sequence. A measure that is usually adopted for comparing the performance 
of convolutional codes is the expected number of bits received in error per input bit. To 
find a bound on the average number of bits in error for each input bit, we first derive a 
bound on the average number of bits in error for each input sequence of length k. To 
determine this, let us assume that the all-0 sequence is transmitted2 and, up to stage l 
in the decoding, there has been no error. Now k information bits enter the encoder and 
result in moving to the next stage in the trellis. We are interested in finding a bound 
on the expected number of errors that can occur due to this input block of length k. 
Because we are assuming that up to stage l there has been no error, up to this stage the 
all-0 path through the trellis has the minimum metric. Now, as we move to the next 
stage [stage ( l + 1) st] it is possible that another path through the trellis will have a 
metric less than the all-0 path and therefore cause errors. If this happens, we must have 
a path through the trellis that merges with the all-0 path for the first time at the (l + 1 )st 
stage and has a metric less than the all-0 path. Such an event is called the first error 
event and the corresponding probability is called the first error event probability. This 
situation is depicted in Figure 10 .22. 
l - 1 
l + 1 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
Figure 10.22: The path corresponding to the first error event 
Our first step is bounding the first error event probability. Let P2 (d) denote the 
probability that a path through the trellis that is at Hamming distanced from the all-0 
2Because of the linearity of convolutional codes, we can, without loss of generality, make this assumption. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

470 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
path is the survivor at the ( l + 1) st stage. Because d is larger than drree, we can bound 
the first error event probability by 
00 
Pe  
L 
adP2 (d) 
d=dtree 
where on the right-hand side we have included all paths through the trellis that merge 
with the all-0 path at the (l + l)st stage. P2(d) denotes the error probability for a 
path at Hamming distance d from the all-0 path and ad denotes the number of paths at 
Hamming distanced from the all-0 path. The value of P2 (d) depends on whether soft­
or hard-decision decoding is employed. 
For soft-decision decoding, if antipodal signaling (binary PSK) is used, we have 
and, therefore, 
Using the well-known upper bound on the Q function 
we obtain 
Now, noting that 
we finally obtain 
where 
T1 (D) 
= T(D,N,J) IN=J=l 
This is a bound on the first error event probability. To find a bound on the average 
number of bits in error for k input bits, Pb (k), we note that each path through the 
trellis causes a certain number of input bits to be decoded erroneously. For a general 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.3. CHANNEL CODING 
471 
DdNf(d) JB(d) in the expansion of T(D, N,]),3 there is a total of f (d) nonzero input 
bits. This means that the average number of input bits in error can be obtained by 
multiplying the probability of choosing each path by the total number of input errors 
that would result if that path were chosen. Hence, the average number of bits in error, 
in the soft-decision case, can be bounded by 
If we define 
we have 
00 
Pb (k) :.,; 
I adf (d)P2 (d) 
d=dfree 
T2(D,N) = T(D,N,])11=1 
00 
I adDdNf(d) 
d=dfree 
Therefore, using (10.3.35) and (10.3.36), we obtain 
Pb(k):.,; .! 0T2(D,N) I 
2 
oN 
N=l,D=e-RcEbiNo 
(10.3.35) 
(10.3.36) 
To obtain the average number of bits in error for each input bit, we have to divide this 
bound by k. Thus, the final result is 
Pb=_.!_ 0T2(D,N) I 
2k 
oN 
N=l,D=e-RcEbiNo 
For hard-decision decoding, the basic procedure follows the above derivation. The 
only difference is the bound on P2 (d). It can be shown (see Proakis and Salehi (2002)) 
that P2 ( d) can be bounded by 
From this result, it is straightforward to show that in hard-decision decoding, the prob­
ability of error is upper-bounded as 
P-
1 0T2(D,N) I 
b<- ---
- k 
oN 
N=l,D=.J4p(l-p) 
3Here we are somewhat sloppy in notation. The power of N is not strictly a function of d, but we are 
denoting it by J ( d). This, however, does not have any effect on the final result. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

472 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
A comparison of hard-decision decoding and soft-decision decoding for convolutional 
codes shows that here, as in the case for linear block codes, soft-decision decoding 
outperforms hard-decision decoding by a margin of roughly 2-3 dB in additive white 
Gaussian noise channels. 
10.4 
Turbo Codes and Iterative Decoding 
Shannon's random coding theorem states that codes achieving channel capacity must 
have random, or close to random, distribution as well as large block lengths. However, 
in general, for a randomly generated code, the decoding complexity grows exponen­
tially with the block length of the code. Hence, lack of structure, as well as large 
block length, renders maximum likelihood (ML) decoding of capacity achieving codes 
impractical. Turbo coding is a method to combine two simple codes connected by 
a pseudorandom interleaver of large length to generate a code with close-to-random 
structure as well as large block length. However, because the resulting code is based 
on combining simple codes, its decoding is possible by an iterative scheme based on 
the decoding of its constituent codes. This decoding method, called iterative decod­
ing, or turbo decoding, is not optimal but for many codes, after a few iterations, has a 
performance close to ML decoding. 
Parallel concatenated convolutional codes (PCCC) with interleaving, also called 
turbo codes, were introduced by Berrou et al. (1993) and Berrou and Glavieux (1996). 
A basic turbo encoder, shown in Figure 10.23, is an encoder that employs two recursive 
systematic convolutional encoders in parallel, where the second encoder is preceded by 
an interleaver. The two recursive systematic convolutional encoders may be either iden­
tical or different. We observe that the nominal rate at the output of the turbo encoder 
is Re 
= 1/3. However, by puncturing the parity-check bits at the output of the binary 
Input information bits 
Output 
-
Linear 
convolutional 
f-
encoder 1 
Parity check 
bits Pl 
Pseudorandom 
 
= 
block interleaver 
Optional 
puncturing 
length =N 
...---. 
Parity check
-
Output 
Output 
bits P2 
Linear 
:: 
convolutional 
 
encoder 2 
Figure 10.23: Encoder for parallel concatenated code (turbo code) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.4. TURBO CODES AND ITERATIVE DECODING 
473 
convolutional encoders, we may achieve higher rates, such as rate 1/2 or 2/3. As in the 
case of concatenated block codes, the interleaver is usually selected to be a block pseu­
dorandom interleaver that reorders the bits in the information sequence before feeding 
them to the second encoder. In effect, as will be shown later, the use of two recursive 
convolutional encoders in conjunction with the interleaver produces a code that con­
tains very few codewords of low weight. This characteristic does not necessarily imply 
that the free distance of the concatenated code is especially large. However, the use of 
the interleaver in conjunction with the two encoders results in codewords that have rel­
atively few nearest neighbors. That is, the codewords are relatively sparse. Hence, the 
coding gain achieved by a turbo code is due in part to this feature (i.e., the reduction in 
the number of nearest neighboring codewords, called the multiplicity, that results from 
interleaving.) 
A standard turbo code shown in Figure 10.23 is completely described by the con­
stituent codes, which are usually similar, and the interleaving pattern, usually denoted 
by TI. The constituent codes are usually very simple recursive systematic convolutional 
codes (RSCCs). 
Recursive systematic convolutional codes are systematic convolutional codes, mean­
ing the input bits appear directly as part of the encoded bits, in which the parity-check 
bits are generated by a recursive (feedback) linear filter. An example of a rate 1/2 
RSCC is shown in Figure 10.24. In this encoder cnl 
= u; hence, it is systematic. It is 
also recursive because the parity-check bits cC2l are generated using a linear feedback 
shift register. 
Figure 10.24: A recursive systematic convolutional encoder 
The constituent codes in turbo codes are mainly rate 112 recursive systematic con­
volutional codes. These codes are usually described by the ratio of the octal repre­
sentation of the feedforward connection to the octal representation of the feedback 
connection of the encoder. For example, a 2 7 / 31 RSC encoder has feedback and feed­
forward connections of 31 
 91 
= (11001) and 27 
 92 
= (10111), respectively. 
The encoder is given by the block diagram shown in Figure 10.25. Using this notation 
it is clear that the encoder of Figure 10 .24 is a 517 recursive systematic convolutional 
encoder. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

474 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
cE 
t 
Figure 10 .25: A 2 7 / 31 RSC encoder 
Illustrative Problem 10.16 [Encoding for a RSCC] 
Write a MATLAB program to generate the parity-check bits when a general binary 
sequence is encoded by the 517 RSCC shown in Figure 10.24. Then apply the program 
to the input sequence 
u= [o 
1 
1 
1 
o 
o 
1 
o 
o 
1 
1 
o 
o 
1 
o 
o 
1 
1 
1 i] 
and generate the corresponding parity bits. Assume that the encoder starts from the 
zero state. 
The parity-check bits are given by 
cC2l = [ 0 
1 
1 
1 
1 
1 
1 
0 
1 
0 
0 
0 
1 
1 
1 
1 
1 
1 
0 
0 J 
and the MATLAB file for the encoder is given next. 
---tl®li" ----------------
function [c_sys ,c_pc]=RSCC _57 _Encoder(u); 
% RSCC..57 Jlncoder 
Encoder for 517 RSCC 
% 
[c..sys,c..pc]=RSCC..57 Jlncoder(u) 
% 
returns c..sys the systematic bits and 
% 
c..pc, the parity check bits of the code 
% 
when input is u and the encoder is 
% 
initiated at 0-state. 
u 
= [O 1 1 1 0 0 1 0 0 1 1 0 0 1 0 0 1 1 1 1]; 
L 
= length(u); 
I 
= 1; 
% Initializing the values of the shift register: 
rl 
= O; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.4. TURBO CODES AND ITERATIVE DECODING 
r2 = O; 
r3 = O; 
while 1 <= L 
u_t = u(l); 
% Generating the systematic bits: 
cl(l) = u_t; 
% Updating the values of the shift register: 
rLt = mod(mod(r3 + r2,2) + u_t,2); 
r3 = r2; 
r2 = rl; 
rl = rLt; 
% Generating the parity check bits: 
c2(1) = mod(rl + r3,2); 
1=1+1; 
end 
c_cys=cl; 
c_pc=c2; 
10.4.1 
MAP Decoding of Convolutional Codes-The BCJR 
Algorithm 
475 
The BCJR algorithm, named after Bahl, Cocke, Jelinek, and Raviv Bahl et al. (1974), 
is a symbol by symbol maximum a posteriori (MAP) decoding algorithm for convo-
1 utional codes. In this algorithm the decoder uses the MAP algorithm to decode each 
input symbol to the decoder rather than looking for the the most likely input sequence. 
We assume that the set of states in the convolutional encoder is denoted by S. 
Because the encoder inputs can be either 0 or 1, transition from stage i- 1 stage i (i.e., 
from CTi-1 E S to CTi E S) can be either due to Ui = 0 or Ui = 1. Let us denote by Se 
the set of all (CTi-1. CTi) pairs corresponding to Ui = -B for-&= 0, 1. 
The symbol-by-symbol maximum a posteriori decoder receives y = (y1, Y2, ... , 
YN), the demodulator output, and based on this observation decodes Ui using the max­
imum a posteriori rule 
Ui = argmaxP(uilY) 
UiE{O,l} 
P(u· y) 
= argmax 
i. 
UiE{O,l} 
p(y) 
= argmaxp(ui,y) 
UiE{O,l} 
= argmax 
L 
p(CTi-i.CTi,y) 
fE{O,l} 
(ai-1,ai)ES.e 
(10.4.1) 
where the last equality follows from the fact that Ui = -B corresponds to all pairs of 
states (CTi-1, CTi) E Se for-&= 0, 1. 
If we define 
Y(i-1) = (y 
y(i-1)) 
1 
11 ... ' 
(N) 
( 
) 
y i+ 1 = y i+ 1 ' ... ' YN 
(10.4.2) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

476 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
we can write 
and we have 
Y 
= (y(i-1) y· y\N)) 
1 
' 
L• 
i+ 1 
( 
(i-1) 
) ( (N) I 
(i-1) 
) 
= 
P O"i-1, O"i,Y1 
.Yi P Yi+I O"i-1, O"i,Y1 
.Yi 
(10.4.3) 
( 
(i-1)) ( 
I 
(i-1)) ( (N) I 
(i-1) 
) 
= 
P O"i-1.Y1 
P O"i,Yi O"i-1.Y1 
P Yi+l O"i-1, O"i,Y1 
.Yi 
( 
(i-1)) 
( 
I 
) ( (N) I ) 
= 
P O"i-1. Y1 
P O"i, Yi O"i-1 P Yi+l O"i 
(10.4.4) 
where the first three steps follow from the chain rule and the last step follows from 
Markov properties of the states in a trellis. 
At this point we define lXi-1 (O"i-d, /3i (O"i), and Yi (O"i-i. O"i) as 
lXi-1 (O"i-1) 
= P (O"i-1.Yii-ll) 
/3i (O"d 
= P (yi IO"i) 
Yi (O"i-1, O"i) 
= P (O"i,YilO"i-1) 
Using these definitions in Equation (10.4.4) we have 
p (O"i-1. O"i, y) 
= lXi-1 (O"i-1) ydO"i-1. O"i) /3dO"i) 
and hence, from Equation (10.4.1) we obtain 
Ui 
= argmax 
L 
lXi-I (O"i-1) Yi (O"i-1, O"i) /3i (O"i) 
i'E{O,l} 
(Ui-l>U"i)ES.e 
(10.4.5) 
(10.4.6) 
(10.4.7) 
Equation (10.4.7) indicates that for maximum a posteriori decoding we need the values 
of lXi-1 (O"i-1), /3i (O"i), and Yi (O"i-1. O"i). 
The Forward Recursion for lXi (O"i): 
We show that lXi-1 (O"i-d can be obtained 
using a forward recursion of the form 
lXi (O"i) 
= 
L Yi (O"i-1. O"i) lXi-1 (O"i-1)' 
1 s is N 
D"i-1 ES 
To prove Equation (10.4.8) we use the following set of relations: 
, 
( 
Ci-ll) ( 
I 
Ci-ll) 
L 
P <Ti-1,Y1 
P <Ti,Yi <Ti-1,Y1 
Ui-1ES 
L 
p ( <Ti-1. Yii-l)) p (<Ti, Yi I <Ti-1) 
Ui-1ES 
I lXi-1 (<Ti-1) Yi (<Ti-1, <Ti) 
D"i-1 ES 
(10.4.8) 
(10.4.9) 
Copyright 2011 Cengage Learning. AU Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not materially afect the overall learning experience. Cengage Leaming reserves the right to remove additional content at any time if subsequent rights restrictions require it 

10.4. TURBO CODES AND ITERATIVE DECODING 
477 
which completes the proof of the forward recursion relation for <Xi (<Ti). This relation 
means that if we have the values of Yi (<Ti-I, <Ti) it is possible to obtain <Xi (<Ti) from 
<Xi-I (<Ti-I). If we assume that the trellis starts in the all-zero state, the initial condition 
for the forward recursion becomes 
0<0 (a-o) 
 P (<Jl>) 
 {  
<To = 0 
<To * 0 
(10.4.10) 
Equations (10.4.8) and (10.4.10) provide a complete set of recursions for computing 
the values of ex. 
---ti!Qil;Mll+)¥1W;t•'="3®• 
Illustrative Problem 10.17 [Implementation of the Forward Recursion Equation] 
Write a MATLAB script that implements the forward recursion equations for com-
puting <Xi's for the 517 RSC encoder. The values of Yi's are the input to the program. 
Apply the code to the randomly generated 
0.035 
0.043 
0.007 
0.011 
0.003 
0.011 
0.037 
0.039 
0.031 
0.009 
0.025 
0.011 
0.022 
0.019 
0.002 
0.033 
0.01 
0.008 
0.041 
0.004 
0.008 
0.038 
0.028 
0.039 
0.002 
0.021 
0.033 
0.013 
0.023 
0.008 
0.036 
0.059 
0.056 
0.021 
0.056 
0.003 
0.031 
0.003 
0.019 
0.007 
0.011 
0.004 
0.031 
0.053 
0.058 
0.018 
0.062 
0.013 
0.015 
0.012 
0.055 
0.046 
0.021 
0.034 
0.057 
0.003 
y= 
0.008 
0.017 
0.046 
0.029 
0.044 
0.042 
0.028 
0.013 
0.013 
0.004 
0.041 
0.062 
0.029 
0.001 
0.009 
0.035 
0.054 
0.002 
0.018 
0.057 
0.056 
0.012 
0.04 
0.058 
0.053 
0.026 
0.007 
0.012 
0.003 
0.026 
0.062 
0.035 
0.029 
0.047 
0.006 
0.04 
0.013 
0.054 
0.053 
0.048 
0.046 
0.019 
0.018 
0.059 
0.049 
0.022 
0.051 
0.035 
0.029 
0.034 
0.005 
0.032 
0.028 
0.006 
0.012 
0.006 
and find the resulting cx's. 
4#I•lill[·Jt• 
The MATLAB script for the problem is given next. The resulting cx's are 
1 
0.035 
0.001505 
1.1471x10-5 
6.536 x 10-7 
2.464 x 10-7 
5.9 x 10-9 
8 x 10-10 
0 
0 
2.6 x 10-5 
8.94 x 10-6 
4.365 x 10-6 
1.513 x 10-7 
9.7 x 10-9 
0 
0 
0.002 
0.001155 
1.6558 x 10-s 
2.527 x 10-7 
2.974 x 10-7 
0 
0 
0 
0 
8 x 10-5 
6.955 x 10-5 
2.825 x 10-6 
2.35 x 10-8 
0 
0 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

478 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
-4111i" ---------------
% MATLAB script for Illustrative Problem 10.17 
function alpha=forward_recursion(gama); 
% FORWARD..RECURSJON 
computing alpha for 517 RSCC 
% 
% 
% 
N = size(gama,2); 
Ns = 4; 
% Initialization: 
alpha = zeros(Ns,N); 
alpha_O = 1; 
i = 1; 
alpha=forward_recursion( gamma); 
returns alpha in the form of a matrix. 
gamma is a 16XN matrix of gamma_i(sigma_(i-1),sigm_i) 
% Assuming gamma is given 
% Number of states 
% Time index 
simga_i = [1 3]; 
% Set of states at i=l 
alpha(simga_i(1 ),i) = gamma(1,i}; 
alpha(simga_i(2),i) = gamma(3,i}; 
i = 2; 
simga_i = [1 2 3 4]; 
% Set of states at i=2 
alpha(simga_i(1),i) = gamma(1,i) *alpha(1,i-1); 
alpha(simga_i(2),i) = gamma(10,i}*alpha(3,i-1}; 
alpha(simga_i(3},i) = gama(3,i} *alpha(1,i-1); 
alpha(simga_i(4),i) = gamma(12,i}*alpha(3,i-1 ); 
for i = 3:N-2 
alpha(simga_i(1),i) = gamma(1,i) *alpha(1,i-1) + gamma(5,i) *alpha(2,i-1); 
alpha(simga_i(2),i) = gama(10,i}*alpha(3,i-1) + gama(14,i}*alpha(4,i-1 ); 
alpha(simga_i(3),i) = gama(3,i) *alpha(1,i-1) + gamma(7,i) *alpha(2,i-1 ); 
alpha(simga_i(4),i) = gama(12,i}*alpha(3,i-1) + gama(16,i}*alpha(4,i-1 ); 
end 
i =N - 1; 
simga_i = [1 2]; 
% Set of states at i=N-1 
alpha(simga_i(1},i) = gamma(1,i} *alpha(1,i-1} + gama(5,i) *alpha(2,i-1}; 
alpha(simga_i(2),i) = gama(10,i}*alpha(3,i-1} + gama(14,i}*alpha(4,i-1); 
i = N; 
simga_i = 1 ; 
% Set of states at i=N 
alpha(simga_i(1},i) = gama(1,i} *alpha(1,i-1} + gama(5,i) *alpha(2,i-1}; 
alpha=[ [1 0 0 0]' , alpha] ; 
The Backward Recursion for /3i (ui): 
The backward recursion for computing the 
values of /3 is given by 
/3i-l (O"i-1) = I /3i (O"i) Yi (O"i-1. O"i)' 
1.:; i.:; N 
UiES 
(10.4.11) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.4. TURBO CODES AND ITERATIVE DECODING 
479 
To prove this recursion we note that 
/3i-l (<:Ti-1) = P (Yt) l<:Ti-1) 
= L P(Yi.Yi!i.uil<:Ti-1) 
a;ES 
= L P (ui.Yil<:Ti-d P (Yi!i I <:Ti, Yi. <:Ti-i) 
a;ES 
(10.4.12) 
= L p(ui.Yil<:Ti-dP(Yi!i lui) 
a;ES 
= I ydui-1. ui) /3dui) 
a;ES 
The boundary condition for the backward recursion, assuming that the trellis is 
terminated in the all-zero state, is 
<:TN= 0 
<:TN*- 0 
(10.4.13) 
Illustrative Problem 10.18 [Implementation of the Backward Recursion Equation] 
Write a MATLAB script that implements the backward recursion equations for 
computing /3i 's for the 517 RSC encoder. 
The values of Yi 's are the input to the 
program. 
The MATLAB script for the problem is given below. 
---®Ii" ----------------
% MATLAB script for Illustrative Problem 10.18 
function beta=backward_recursion(gama); 
% BACKWARD..RECURSION 
computing beta for 517 RSCC 
% 
% 
% 
N = size(gama,2); 
Ns = 4; 
% Initialization: 
beta = zeros(Ns,N}; 
beta(1,N} = 1; 
beta= backward_recursion( gamma); 
beta in the form of a matrix 
gamma is a 16XN matrix of gamma_i(sigma_(i-1),sigm_i) 
% Assuming gamma is given 
% Number of states 
i = N; 
% Time index 
simga_Ll = [1 2]; 
% Set of states at i=N 
beta(simga_i_1(1),i-1) = gamma(1,i); 
beta(simga_i_1(2},i-1) = gamma(5,i); 
i =N - 1; 
simga_Ll = [1 2 3 4]; 
% Set of states at i=N-1 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

480 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
beta(simga_Ll(1 ),i-1) 
= gamma(1,N)*gamma(1,i); 
beta(simga_Ll(2),i-1) 
= gamma(1,N)*gamma(5,i); 
beta(simga_Ll(3),i-1) 
= gamma(5,N)*gamma(10,i); 
beta(simga_Ll(4),i-1) 
= gamma(5,N)*gamma(14,i); 
for i 
= N-2:-1:3 
end 
beta(simga_Ll(1 ),i-1) 
= beta(1,i)*gama(1,i) 
+ beta(3,i)*gamma(3,i); 
beta(simga_L1(2),i-1) 
= beta(1,i)*gama(5,i) 
+ beta(3,i)*gamma(7,i); 
beta(simga_Ll(3),i-1) 
= beta(2,i)*gama(1 O,i) + beta(4,i)*gamma(12,i); 
beta(simga_Ll(4),i-1) 
= beta(4,i)*gama(16,i) + beta(2,i)*gamma(14,i); 
i 
= 2; 
% Set of states at i=2 
simga_i_ 1 
= [1 3]; 
beta(simga_Ll(1),i-1) 
= beta(1,i)*gamma(1,i) 
+ beta(3,i)*gamma(3,i); 
beta(simga_L1(2),i-1) 
= beta(2,i)*gamma(10,i) + beta(4,i)*gamma(12,i); 
i 
= 1; 
simga_i_l = 1; 
% Set of states at i=l 
beta_O(simga_Ll(1)) 
= beta(1,i)*gamma(1,i) + beta(3,i)*gamma(3,i); 
The recursive relations (10.4.8) and (10.4.11) together with initial conditions 
(10.4.10) and (10.4.13) provide the necessary equations to determine cx's and /rs when 
y's are known. We now focus on computation of y's. 
Computing Yi (<Ti-1, <Ti): 
We can write Yi (CTi-1, <Ti), 1  i  N, as 
Yi (Ui-1. <Ti)= P (ui,Yil<Ti-i) 
= p (<Til<Ti-d p (YilCTi, CTi-i) 
= P(udp (YilUi) 
= P(Ui)P (YilCi) 
(10.4.14) 
where we have used the fact that there exists a one-to-one correspondence between a 
pair of states (<Ti-1, ud and the input Ui. The above expression clearly shows the de­
pendence of Yi (Ui-1, ui) on P(ui), the prior probability of the information sequence 
at time i, as well as p (ydci) (which depends on the channel characteristics.) If the 
information sequence is equiprobable, an assumption that is usually made when no 
information is available, then P(ui = O) = P(ui = 1) = · Obviously, the above 
derivation is based on the assumption that the state pair (Ui-1. <Ti) is a valid pair, i.e., 
a transition from CTi-1 to <Ti is possible. 
Equation (10.4.7) together with the forward and backward relations for ex and {3 
given in Equations (10.4.8) and (10.4.11) and Equation (10.4.14) for y are known as 
the BCJR algorithm for symbol-by-symbol MAP decoding of a convolutional code. 
Note that unlike the Viterbi algorithm that looks for the most likely information 
sequence, the BCJR finds the most likely individual bits. The BCJR algorithm also 
provides the values of P ( Ui ly). These values provide a level certainty of the decoder 
about the value of Ui and are called soft outputs or soft values. Having P ( Ui ly), we 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.4. TURBO CODES AND ITERATIVE DECODING 
can find the a posteriori likelihood values (L-values) as 
L(ui) = ln 
P (ui = l ly) 
P (ui = Oly) 
= ln 
P ( Ui = 1, Y) 
P (ui = O,y) 
I 
CXi-1 (O-i-1) Yi (O-i-1. 0-i) /3i (0-i) 
1 
(CTi-1,CTi)ES1 
=
n---------
I 
CXi-1 (O-i-1) Yi (O-i-1. 0-i) /3i (o-i) 
(CTi-1,CTi)ESo 
481 
(10.4.15) 
which are also referred as soft outputs. Knowledge of soft outputs is crucial in decoding 
of turbo codes discussed later in this chapter. A decoder such as the BCJR decoder that 
accepts soft inputs (the vector y) and generates soft outputs is called a soft-input-soft­
output (SISO) decoder. Note that the decoding rule based on L ( Ui) soft values is given 
by 
(10.4.16) 
For an AWGN channel, y = c + n, where c represents the modulated signal corre­
sponding to the encoded sequence, we have 
(10.4.17) 
For the special case when n 
= 2, the convolutional code is systematic, and the 
modulation is BPSK, direct substitution results in 
1 { (yt)2 + (Yr)2 + 2£} 
( 2yf cf+ 2yf cf) 
yd O-i-1. o-i) = ---iv- exp 
-
N 
P ( ud exp 
N 
1T1'1Q 
0 
0 
(10.4.18) 
where superscripts s and p indicate systematic and parity-check components of y and 
c. 
Illustrative Problem 10.19 [Computing y's] 
Write a MATLAB script that computes the values of Yi's for an AWGN channel 
when a 517 RSC code with BPSK is employed. 
The inputs to the program are the 
sequence of channel outputs y = (Y1s, Yip, Y2s, Y2p, ... ) , the channel SNR/bit in dB, 
and symbol energy E. Generate the y matrix assuming the received sequence is 
y = [ 1.2 
-0.8 
0.3 
0.02 
-0.7 
-0.02 2 
0 
-1 
1] 
and the channel SNR/bit is 1 dB. Assume E = 1 for convenience. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

482 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
The MATLAB scripts for the problem are given next. The resulting y's are given 
in a matrix as 
0.0077 
0.0269 
0.0209 
0.0023 
0.0081 
0 
0 
0 
0 
0 
0.0127 
0.0402 
0.0084 
0.0284 
0.0081 
0 
0 
0 
0 
0 
0 
0 
0.0204 
0.0023 
0.0284 
0 
0 
0 
0 
0 
0 
0 
0.0087 
0.0284 
0.0023 
0 
0 
0 
0 
0 
)' = 
0 
0 
0 
0 
0 
0 
0.0269 
0.0209 
0.0023 
0.0081 
0 
0 
0 
0 
0 
0 
0.0402 
0.0084 
0.0284 
0.0081 
0 
0 
0 
0 
0 
0 
0 
0.0084 
0.0284 
0.0081 
0 
0 
0 
0 
0 
0 
0 
0.0209 
0.0023 
0.0081 
---41®1" -
% MATLAB script for Illustrative Problem 10.19 
y = [1.2 -0.8 0.3 .02 -0.7 -0.02 2 0 -1 1]; 
Ns = 4; 
% Number of states 
E = 1; 
% Energy per symbol 
EbNO_dB=1; 
% SNR per bit (dB) 
% Computing gamma: 
gamma = gamma_calc(y,E,EbNO_dB); 
% y is the channel output 
---41®1" -
function gamma = gamma_calc(y,E,EbNO_dB) 
%GAMMA_CALC Computes the gamma matrix for a 517 RSCC over AWGN using BPSK. 
% 
GAMMA= GAMMA_CALC(y,E,EbNO..dB) 
% 
y is channle output, E is symbol energy, and EbNO_dB is SNR/bit (in dB). 
M = length(y); 
N = M/2; 
% Length of channel output 
% Depth of Trellis 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.4. TURBO CODES AND ITERATIVE DECODING 
Ns=4; 
% Numner of states 
y_s = y(1 :2:M-1); 
Y-P = y(2:2:M); 
% Outputs corresponding to systematic bits 
% Outputs corresponding to parity-check bits 
% Generation of the 517 RSCC trellis 
[c_s c_p] = Rscc_5_7(N); 
Eb = 2*E; 
NO = Eb*10A(-EbNO_dB/10); 
% Noise variance 
gamma = zeros(NsA2,N); 
% Initialization of gamma 
for i = 1 : N 
% Time index 
end 
gama(1,i) = 1 /(2*pi*NO}*exp(-(y _s(W 2+y _p(W 2+2*E)/NO} ... 
*exp((2*(y _s(i)*c_s(1,i)+y _p(i)*c_p(1,i)})/NO); 
gamma(3,i) = 1 /(2*pi*NO}*exp(-(y _s(i) A 2+y _p(i) A 2+2*E)/NO) ... 
*exp( (2*(y _s(i)*c_s(3,i)+y _p(i)*c_p(3,i)) }/NO}; 
if i > 1 
end 
gama(10,i) = 1/(2*pi*NO)*exp(-(y_s(W2+y_p(W2+2*E}/NO) ... 
*exp((2*(y _s(i)*c_s(1 O,i)+y _p(i)*c_p(1 O,i))}/NO}; 
gamma(12,i) = 1 /(2*pi*NO}*exp(-(y _s(W 2+y _p(W 2+2*E}/NO} ... 
*exp((2*(y _s(i)*c_s(12,i)+y _p(i)*c_p(12,i)))/NO}; 
if i > 2 
end 
gamma(5,i) = 1/(2*pi*NO}*exp(-(y_s(W2+y_p(W2+2*E}/NO) ... 
*exp( (2*(y _s(i)*c_s(5,i)+y _p(i)*c_p(5,i)) )/NO); 
gamma(7,i) = 1/(2*pi*NO}*exp(-(y_s(W2+y_p(W2+2*E}/NO} ... 
*exp( (2*(y _s(i)*c_s(7 ,i)+y _p(i)*c_p(7,i)) }/NO}; 
gamma(14,i) = 1/(2*pi*NO)*exp(-(y_s(W2+y_p(W2+2*E)/NO) ... 
*exp((2*(y _s(i)*c_s(14,i)+y _p(i)*c_p(14,i))}/NO}; 
gama(16,i) = 1/(2*pi*NO)*exp(-(y_s(W2+y_p(W2+2*E}/NO} ... 
*exp((2*(y _s(i)*c_s(16,i)+y _p(i)*c_p(16,i)))/NO); 
483 
---tl®li" 11--------------
function [c_s c_p] = Rscc_5_7(N) 
%RSCC..5-7 Generates a trellis of depth N for a 517 RSCC. 
% 
[C...S C_F] 
= RSCC..5-7(N) 
% 
N is the depth of the trellis 
% 
C...S and c_p are systematic and parity check bits. 
Ns = 4; 
% Number of states 
c _s = zeros(NsA2,N); 
% Initiation of the matrix of systematic bits 
c_p = zeros(NsA2,N); 
% Initiation of the matrix of parity check bits 
for i = 1 : N 
% Time index 
c_s(1,i) = O; c_p(1,i) = O; 
c_s(3,i) = 1 ; c_p(3,i} = 1 ; 
if i > 1 
c_s(10,i) = O; c_p(10,i) = O; 
c_s(12,i) = 1; c_p(12,i) = 1; 
if i > 2 
c_s(5,i) = O; 
c_p(5,i) = 1; 
c_s(7,i) = 1; 
c_p(7,i) = O; 
c_s(14,i) = 1; c_p(14,i) = 1; 
c_s(16,i) = O; c_p(16,i) = O; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

484 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
end 
end 
end 
Direct substitution of (10.4.18) into (10.4.15) yields 
(10.4.19) 
It is clear that the log likelihood ratio (LLR) of the information bits is the sum of 
three terms: a term that depends only on the systematic bits, a term that depends on the 
prior probabilities, and a term that depends on the parity-check bits. 
One problem with the version of the BCJR algorithm described above is that it is not 
a numerically stable algorithm, particularly if the trellis length is long. An alternative 
to this algorithm is the log-domain version of it known as the log-APP (log a posteriori 
probability) algorithm or the log-MAP algorithm. 
In the log-APP algorithm, instead of £X, /3, and y, we define their logarithms as 
CXi (crd = In (£Xi (cri)) 
fii ( cri) = In (/3i ( CT"i)) 
(10.4.20) 
Yi (cri-1, cri) =In (:Yi (cri-1, cri)) 
Straightforward calculation shows that the following froward and backward recursions 
hold for &i ( cri) and fii ( CT"i-1). 
&i (crd =In ( I 
exp (&i-1 (CT"i-1) +Yi (CT"i-1. cri))) 
O-i-1 ES 
fii-1 (CT"i-1) =In ( L exp (fii (cri) +Yi (CT"i-1. cri) )) 
0-iES 
with initial conditions 
CV 
{o 
£Xo (cro) 
= 
_00 
cro 
= 0 
cro * O 
and the a posteriori I-values are computed as 
L(ui) =In [ L 
exp (&i-1 (CT"i-1) +Yi (CT"i-1, cri) + fii (cri) )] 
(O-i-1,0-i)ES1 
- In [ L 
exp ( CXi-1 (cri-1) +Yi (cri-1, cri) + i (cri) )] 
(O-i-1,0-i)ESo 
(10.4.21) 
(10.4.22) 
(10.4.23) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.4. TURBO CODES AND ITERATIVE DECODING 
485 
These relations are numerically more stable but are not computationally efficient. In 
order to improve the computational efficiency, we can introduce the following notation: 
max* {x1 y}  ln (ex+ eY) 
max*{x1y1z}  ln(ex + eY + e2) 
Using these definitions, we have the recursions 
CXi (cri) = max* { CXi-1 (CTi-1) +Yi (CTi-i. cri)} 
O-i-1 ES 
i-1 (CTi-i) =max* {i (CTi) +Yi (CTi-11 CTi)} 
0-iES 
(10.4.24) 
(10.4.25) 
where the initial conditions for these recursions are given by Equation (10.4.22). The 
a posteriori I-values are given by 
I(ui) = 
max* 
{ CXi-1 (CTi-1) +Yi (CTi-11 CTi) + 'fii (cri)} 
(o-i-1,0-i)ES1 
max* 
{ CXi-1 ( CTi-d + y i ( CTi-i. cri) + 'fii ( cri)} 
( O-i-1 , a-;) ESo 
The initial conditions for these recursions are given by Equation ( 10 .4 .22). 
(10.4.26) 
For binary constituent codes, BPSK modulation, and AWGN channel the expres­
sion for the a posteriori I-values can be obtained using the log-domain quantities in 
Equation (10.4.19). The result is 
max* 
(O-i-1,0-i)ESo 
where we have defined I a ( Ui) as 
(10.4.27) 
(10.4.28) 
It is seen that in this case the a posteriori I-values can be written as the sum of 
three terms. The first term, 4v;:t, depends on the channel output corresponding to the 
systematic bits received by the decoder. The second term, Ia(ui), depends on the a 
priori probabilities of the information bits. The remaining term is the contribution of 
the channel outputs corresponding to the parity bits. 
It can be easily shown that (see Problem 10.21) 
max*{x1y} = max{x1y} + In (1 + e-lx-yl) 
max*{x1y1z} =max* {max*{x1y},z} 
(10.4.29) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

486 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
The term ln ( 1 + e-lx-yl) is small when x and y are not close. Its maximum occurs 
when x 
= y, for which this term is ln 2. It is clear that for large x and y or when x 
and y are not close, we can use the approximation 
max*{x,y} 
 max{x,y} 
(10.4.30) 
Under similar conditions we can use the approximation 
max*{x,y,z} 
 max{x,y,z} 
(10.4.31) 
The approximate relations in Equations (10.4.30) and (10.4.31) are valid when the 
the values of x and y (or x, y, and z) are not close. In general, approximating max* 
by max in Equation (10.4.25) would result in a small performance degradation. The 
resulting algorithm, which is a suboptimal implementation of the MAP algorithm, is 
called that max-Log-APP algorithm (or, max-log-MAP algorithm) 
Instead of using the approximations given in Equations ( 10 .4 .30) and ( 10 .4 .31), we 
can use a lookup table for values of the correction term In ( 1 + e-lx-y I) to speed up 
the algorithm. 
Illustrative Problem 10.20 [Implementation of max*] 
Write a MATLAB script whose input is x 
= (x1, x2, ... , Xn) and whose output is 
max* {x1,X2, ... ,Xn}. 
MATLAB scripts that recursively compute max* are given next 
---tl®li" 11--------------
function x_s = max_s(x) 
%MAX..S Calculates the max* of the elements of vector x. 
% 
X..S 
= MAX..S(X) calculats the max* of the elements of vetor x by 
% 
recursively performing the max* operation on two components of 
% 
vector x at each recursion. 
L = length(x); 
x_s = x(1 ); 
if L > 1 
end 
forl=2:L 
x_s = max_s_2(x_s,x(l)); 
end 
% max* of the two elements x..s and x(l) 
---tl®li" ---------------
function c = max_s_2(a,b) 
%MAX..S.2 Calculates the max* of the two numbers. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.4. TURBO CODES AND ITERATIVE DECODING 
% 
C 
= MAX..S..2(A,B) calculats the max* of a and b. 
c 
= max(a,b) + log(1 +exp(-abs(a-b))); 
--tiMMU-il;tfil1i@;t•]:1!§il 
Illustrative Problem 10.21 [Computing in the Logarithmic Domain] 
487 
Write a MATLAB script that computes the values of y i's, &i's, and i's for an 
AWGN channel when a 517 RSC code with BPSK is employed. The inputs to the pro­
gram are the sequence of channel outputs y = (Y1s,Y1p,Y2s,Y2p, . . .  ), the channel 
SNR/bit in dB, and symbol energy E. The outputs of the script are c:x's, f3's, and :y's. 
Run the script assuming the channel output sequence is 
y = [ 1.2 
-0.8 
0.3 
0.02 
-0.7 
-0.02 
2 
0 
-1 
1] 
with E = 1, and Eb/No of 10 dB. 
The result of running the script are 
-20.63 
-10.68 
-12.68 
-30.23 
-20.23 
-00 
-00 
-00 
-00 
-00 
-16.63 
-7.48 
-19.88 
-10.23 
-20.23 
-00 
-00 
-00 
-00 
-00 
-00 
-00 
-12.88 
-30.23 
-10.23 
-00 
-00 
-00 
-00 
-00 
-00 
-00 
-19.68 
-10.23 
-30.23 
-00 
-00 
-00 
-00 
-00 
-00 
-00 
-00 
-00 
-00 
-00 
-10.68 
-12.68 
-30.23 
-20.23 
-00 
-00 
-00 
-00 
-00 
-00 
-7.48 
-19.88 
-10.23 
-20.23 
-00 
-00 
-00 
-00 
-00 
-00 
-00 
-19.88 
-10.23 
-20.23 
-00 
-00 
-00 
-00 
-00 
-00 
-00 
-12.68 
-30.23 
-20.23 
-20.63 
-31.31 
-12.08 
-12.08 
-10.08 
-00 
-27.31 
&= 
-16.63 
-28.11 
-40.75 
-46.92 
-19.08 
-00 
-00 
-24.11 
-36.79 
-00 
-00 
-00 
-00 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

488 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
-47.82 
-60.28 
-50.46 
-20.23 
0 
j3 = 
-00 
-60.l 
-50.46 
-10.23 
-00 
-40.62 
-40.34 
-40.46 
-00 
-00 
-00 
-33.14 
-20.46 
-00 
-00 
The MATLAB scripts for the problem is given below. 
---tl&li" ---------------
% MATLAB script for Illustrative Problem 10.21 
y=[1.2 -0.8 0.3 .02 -0.7 -0.02 2 0 -1 1]; 
Ns = 4; 
% Number of states 
E = 1 ; 
% Energy per bit 
EbNO_dB=1 O; 
% SNR!bit in dB 
% Calculation of gamma, alpha, and beta in the logarithmic domain: 
gamma = gama_calc(y ,E,EbNO_dB ); 
gamma_t = log(gamma); 
[alpha_t alpha_LO] = forward_recursion_log(gama_t); 
beta_t = backward_recursion_log(gamma_t); 
---tl&li" ---------------
function [alpha_t alpha_LO] = forward_recursion_log(gamma_t) 
%FORWARD..RECURSJONJ.,OG Calculates alpha in the logarithmic domain for a 517 RSCC. 
% 
[ALPHA_T ALPHA.I_O] = FORWARD..RECURSJONJ.,OG(GAMMA_T) 
% 
gamma_t: gamma in the logarithmic domain 
% 
alpha-1: alpha in logarithmic domain. 
% Initialization: 
Ns = sqrt(size(gamma_t, 1 )); % Number of states 
N = size(gama_t,2); 
alpha_t = ones(Ns,N)*-inf; 
alpha_LO = O; 
i = 1 ; 
% Time index 
simga_i = [1 3]; 
% Set of states at i=l 
alpha_t(simga_i(1 ),i) = alpha_ LO + gamma_t(1,i); 
alpha_t(simga_i(2),i) = alpha-LO + gamma_t(3,i); 
i = 2; 
simga_i = [1 2 3 4]; 
% Set of states at i=2 
alpha_t(simga_i(1 ),i) = gamma_t(1,i) +alpha_t(1,i-1 ); 
alpha_t(simga_i(2),i) = gama_t(10,i)+alpha_t(3,i-1 ); 
alpha_t(simga_i(3),i) = gama_t(3,i) +alpha_t(1,i-1 ); 
alpha_t(simga_i(4),i) = gama_t(12,i)+alpha_t(3,i-1 ); 
for i = 3:N-2 
alpha_t(simgiLi(1),i) = max_s([gama_t(1,i) +alpha_t(1,i-1) gama_t(5,i) +alpha_t(2,i-1)]); 
alpha_t(simga_i(2),i) = max_s([gama_t(1 O,i)+alpha_t(3,i-1) gamma_t(14,i)+alpha_t(4,i-1)]); 
alpha_t(simga_i(3),i) = max_s([gamma_t(3,i) +alpha_t(1,i-1) gama_t(7,i) +alpha_t(2,i-1)]); 
alpha_t(simga_i( 4 ),i) = max_s([gama_t(12,i)+alpha_ t(3,i-1) gamma_t(16,i)+alpha_ t( 4,i-1)]); 
end 
i= N - 1; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.4. TURBO CODES AND ITERATIVE DECODING 
simga_i = (1 2]; 
% Set of states at i=N-1 
alpha_t(simga_i(1 ),i) = max_s([gamma_t(1,i) +alpha_t(1,i-1) gamma_t(5,i) +alpha_t(2,i-1 )]); 
alpha_t(simga_i(2),i) = max_s([gama_t(1 O,i)+alpha_t(3,i-1) gamma_t(14,i)+alpha_t(4,i-1 )]); 
i = N; 
simga_i = 1 ; 
% Set of states at i=N 
alpha_t(simga_i(1 ),i) = max_s([gamma_t(1,i) +alpha_t(1,i-1) gamiLt(5,i) +alpha_t(2,i-1 )]); 
489 
---®Ii" ---------------
function beta_t= backward_recursion_log(gammiLt) 
%BACKWAR.D_RECURSION.LOG Calculates beta's in the logarithmic domain for a 517 RSCC. 
% 
BETA_T = BACKWARD_RECURSJON_!_,OG(GAMMA_T) 
% 
% 
gamma_t: gamma in the logarithmic domain 
beta_t: beta in logarithmic domain. 
% Initialization: 
Ns = sqrt(size(gamma_t,1)); % Number of states 
N = size(gama_t,2); 
beta_t = ones(Ns,N)*-inf; 
beta_t(1,N) = O; 
i = N; 
% Time index 
simga_Ll = (1 2]; 
% Set of states at i=N 
beta_t(simga_Ll(1 ),i-1) = beta_t(1,N)+gamma_t(1,i); 
beta_t(simga_Ll(2),i-1) = beta..t(1,N)+gamma..t(5,i); 
i =N - 1; 
simga_Ll = (1 2 3 4]; 
% Set of states at i=N-1 
beta_t(simga_Ll(1 ),i-1) = gamma_t(1,N)+gamma..t(1,i); 
beta_t(simga_L1(2),i-1) = gama_t(1,N)+gamma_t(5,i); 
beta_t(simga_Ll(3),i-1) = gama_t(5,N)+gamma_t(1 O,i); 
beta_t(simga_Ll(4),i-1) = gamma_t(5,N)+gamma_t(14,i); 
for i = N-2:-1:3 
end 
beta_t(simga_Ll(1 ),i-1) = max_s([beta_t(1,i)+gamma_t(1,i) 
beta_t(3,i)+gamma_t(3,i)]); 
beta_t(simga_Ll(2),i-1) = max_s([beta_t(1,i)+gamma_t(5,i) 
beta_t(3,i)+gamma_t(7,i)]); 
beta_t(simga_Ll(3),i-1) = max_s([beta_t(2,i)+gamma_t(1 O,i) beta_t(4,i)+gamma_t(12,i)]); 
beta_t(simga_Ll(4),i-1) = max_s([beta_t(4,i)+gamma_t(16,i) beta_t(2,i)+gamma_t(14,i)]); 
i = 2; 
simga_Ll = [1 3]; 
% Set of states at i=2 
beta_t(simga_Ll(1 ),i-1) = max_s([beta_t(1,i)+gama_t(1,i) 
beta_t(3,i)+gama_t(3,i)]); 
beta_t(simga_Ll(2),i-1) = max_s([beta_t(2,i)+gama_t(1 O,i) beta_t(4,i)+gamma_t(12,i)]); 
i = 1; 
simga_Ll = 1; 
% Set of states at i=l 
beta_LO(simga_Ll(1)) = max_s([beta_t(1,i)+gamma_t(1,i) beta_t(3,i)+gamma_t(3,i)]); 
10.4.2 
Iterative Decoding for Turbo Codes 
We have seen that optimal decoding of turbo codes is impossible due to the large num­
ber of states in the code trellis. A suboptimal iterative decoding algorithm, known 
as the turbo decoding algorithm, was proposed by Berrou et al. (1993) and achieves 
excellent performance very close to the theoretical bound predicted by Shannon. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

490 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
The turbo decoding algorithm is based on iterative usage of the log-APP or the 
max-log-APP algorithm. As is seen from Equation (10.4.27), the LLR in the case, a 
rate 1/2 RSCC can be written as the sum of three terms as 
L(ud = LcY[ + L (a) (ut) + L (e) (ut) 
(10.4.32) 
where 
(10.4.33) 
and we have defined Le = o JE. 
The term LcY[ is called the channel I-value and denotes the effect of channel 
outputs corresponding to the systematic bits. The second term La(ui) is the a priori 
I-value and is a function of the a priori probabilities of the information sequence. The 
final term, L (e) ( Ui), represents the extrinsic I-value or extrinsic information that is the 
part of the a posteriori I-value and that does not depend on the a priori probabilities 
and the systematic information at the channel output. 
Let us assume that the binary information sequence u 
= ( u i, U2, ... , UN) is ap­
plied to the first rate 1/2 RSCC and let us denote the parity bits at the output by 
cP 
= (cf, cf, ... , ci). The information sequence is passed through the interleaver 
to obtain u' 
= ( u, u2, ... , u) and this sequence is applied to the second encoder 
to generate the parity sequence c'P 
= (cP, cT, ... , c'J). Sequences u, cP, and c'P 
are BPSK modulated and transmitted over a Gaussian channel. The corresponding 
output sequences are denoted by y5, yP, and y'P. The MAP decoder for the first con­
stituent code receives the pair (y5, yP). In the first iteration the decoder assumes all 
bits are equiprobable and therefore the a priori I-values are set to zero. Having access 
to (y5, yP), the first decoder uses Equation (10.4.27) to compute the a posteriori L­
values. At the output of the first constituent decoder, the decoder subtracts the channel 
I-values from the a posteriori I-values to compute the extrinsic I-values. These values 
are denoted by Li ( ui) and are permuted by the interleaver fl and then used by the 
second constituent decoder as its a priori I-values. In addition to this information, the 
second decoder is also supplied with y'P and a permuted version of y5 after passing 
it through the interleaver fl. The second decoder computes the extrinsic I-values de­
noted by rW (ui) and after permuting them through fl-1 supplies them to the first 
decoder, which in the next iteration uses these values as its a priori I-values. This pro­
cess is continued either for a fixed number of iterations or until a certain criterion is 
met. After the last iteration, the a posteriori I-values L(Ui) are used to make the final 
decision. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.4. TURBO CODES AND ITERATIVE DECODING 
yP _ ___. 
SISO 1 
SIS02 
y5L-1 
1-_._ L(ui) 
-- 
Figure 10.26: Block diagram of a turbo decoder 
r<el 
21 
L(ui) 
491 
The building block of the turbo decoder is a SISO decoder with inputs y5, yP, and 
L (a) ( Ui) and outputs L (e) ( ud and L ( Ui). In iterative decoding L (a) ( Ui) is substituted 
by the extrinsic I-values provided by the other decoder. The block diagram of a turbo 
decoder is shown in Figure 10 .26. 
---tll4-il;tfi1Mii;t•1=1•§1·•---------
Illustrative Problem 10.22 [SISO Decoder] 
Write a MATLAB script that computes extrinsic information Le ( Ui) and LLR val­
ues L ( ud for an AWGN channel using a 517 RSC code with BPSK modulation. The in­
puts to the program are the sequence of channel outputs y = (Y1s, Y1p, Y2s, Y2p, ... ) ; 
the vector of prior probabilities P = (P1,P2, ... ), where Pi = P(ui = 1), channel 
SNR/bit in dB, and symbol energy E. The outputs are Le(Ui) and L(ui). Run your 
program using 
y = [ 1.2 
-0.8 
0.3 
0.0 2 
-0.7 
-0.0 2 
2 
0 
-1 
1] 
withE = 1 and Eb/No= lOdB.Initialize all prior probabilities to 1/2. 
The values of L and Le are computed as 
and 
L = [ 2 3.2 
3 3.14 
-18.2 
2 2.2 4 
-7.92] 
Le= [ -0.8 
2 7.14 
-4.2 
-17.76 
12.0 8] 
The MATLAB scripts for the problem is given below. 
----4111;1• !------------- 
% MATLAB script for Illustrative Problem 10.22 
y=[1.2 -0.8 0.3 .02 -0.7 -0.02 2 0 -1 1 ]; 
E = 1 ; 
% Bit energy 
EbNO_dB = 10; 
% SNR!bit in dB 
P = ones(1,length(y)/2)/2; 
% A priori probability of each bit initialized to 112 
[Le L] = extrinsic(y,E,EbNO_dB,P); 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

492 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
-41ili" ---------------
function [Le L] = 
extrinsic(y,E,EbNO_dB,P} 
%EXTRINSIC Generates the extrinsic information and output LLR's for a 517 RSCC 
% 
with BPSK modulation over an AWGN channel. 
% 
[L.e L] 
= extrinsic(y,E,EbNO_dB,P) 
% 
% 
% 
y: channel output sequence 
E: symbol energy 
EbNO...dB: SNRlbit in dB 
% 
P: A priori probabilities of input bits 
M = 
length(y); 
% Length of channel output sequence 
N = 
M/2; 
% Depth of Trellis 
Ns = 
4; 
% Number of states 
y_s = 
y(1:2:M-1}; 
% Systematic components of y 
Y-P = 
y(2:2:M}; 
% Parity-check components of y 
[c_s c_p] = 
Rscc_s_7(N); 
% Generation of the 517 RSCC trellis 
Eb= 
2*E; 
NO = 
Eb*10A(-EbNQ_dB/1 O); 
% Noise variance 
gamma = 
gamma_calc(y,E,EbNO_dB}; 
gamma_t = 
log(gamma); 
[alpha_t alpha_O_t] = 
forward_recursion_log(gamma_t); 
beta_t = 
backward_recursion_log(gama_t); 
% Initialization for speed: 
Le = 
zeros(1,N); 
L = 
zeros(1,N); 
for i = 
1 : N 
% Time index 
if i == 
1 
ul = 
alpha_O_t + 2*y_p(i)*c_p(3,i}/NO + beta_t(3,i}; 
vl = 
alpha_O_t + 2*y_p(i)*c_p(1,i}/NO + beta_t(1,i}; 
Le(i) = 
max_s(ul} - max_s(vl}; 
elseif i == 
2 
ul = 
alpha_t(1,i-1) + 2*y_p(i)*c_p(3,i}/NO + beta_t(3,i); 
u2 = 
alpha_t(3,i-1) + 2*y_p(i)*c_p(12,i}/NO + beta_t(4,i); 
vl = 
alpha_t(1,i-1) + 2*y_p(i)*c_p(1,i}/NO + beta_t(1,i); 
v2 = 
alpha_t(3,i-1) + 2*y_p(i)*c_p(1 O,i}/NO + beta_t(2,i); 
Le(i) = 
max_s([ul u2]} - max_s([vl v2]}; 
elseif i == 
N-1 
ul = 
alpha_t(4,i-1} + 2*y_p(i)*c_p(14,i}/NO + beta_t(2,i); 
vl = 
alpha_t(1,i-1) + 2*y_p(i)*c_p(1,i)/NO + beta_t(1,i); 
v2 = 
alpha_t(2,i-1) + 2*y_p(i)*c_p(5,i)/NO + beta_t(1,i); 
v3 = 
alpha_t(3,i-1) + 2*y_p(i)*c_p(1 O,i}/NO + beta_t(2,i); 
Le(i) = 
max_s(ul} - max_s([vl v2 v3]}; 
elseif i == 
N 
else 
vl = 
alpha_t(1,i-1) + 2*y_p(i)*c_p(1,i}/NO + beta_t(1,i); 
v2 = 
alpha_t(2,i-1) + 2*y_p(i)*c_p(5,i}/NO + beta_t(1,i); 
Le(i) = 
- max_s([vl v2]}; 
ul = 
alpha_t(1,i-1} + 2*y_p(i)*c_p(3,i}/NO + beta_t(3,i}; 
u2 = 
alpha_t(2,i-1} + 2*y_p(i)*c_p(7,i}/NO + beta_t(3,i}; 
u3 = 
alpha_t(3,i-1) + 2*y_p(i)*c_p(12,i}/NO + beta_t(4,i); 
u4 = 
alpha_t(4,i-1) + 2*y_p(i)*c_p(14,i}/NO + beta_t(2,i); 
vl = 
alpha_t(1,i-1) + 2*y_p(i)*c_p(1,i}/NO + beta_t(1,i); 
v2 = 
alpha_t(2,i-1) + 2*y_p(i)*c_p(5,i}/NO + beta_t(1,i); 
v3 = 
alpha_t(3,i-1) + 2*y_p(i)*c_p(1 O,i}/NO + beta_t(2,i}; 
v4 = 
alpha_t(4,i-1} + 2*y_p(i)*c_p(16,i}/NO + beta_t(4,i); 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.5. LOW-DENSITY PARITY-CHECK CODES 
end 
Le(i) 
= max_s([ul u2 u3 u4]) - max_s([vl v2 v3 v4]); 
end 
L(i) 
= 4*sqrt(E)*y_s(i)/NO + log(P(i)/(1-P(i))) + Le(i); 
% LLR values 
493 
A typical plot of the performance of the iterative decoding algorithm for turbo 
codes is given in Figure 10.27. It is clearly seen that the first few iterations noticeably 
improve the performance. 
Pb 
10-• 
10-2 
lQ-3 
lQ-4 
10-s 
10-6 
10-1 
0 
0.5 
1 .5 
2 
2.5 
Eb/No dB 
Figure 10 .27: Performance of iterative decoding for turbo codes 
Typically, four iterations are adequate if the decoders are operating at a high enough 
SNR to achieve an error rate in the range 10-5 to 10-6 whereas, about eight to ten 
iterations may be needed when the error rate is in the range of 10-5, where the SNR is 
lower. 
An important factor in the performance of the turbo code is the length of the inter­
leaver, which is sometimes referred to as the interleaver gain. With a sufficiently large 
interleaver and iterative MAP decoding, the performance of a turbo code is very close 
to the Shannon limit. For example, a rate 1/2 turbo code of block length N = 216 with 
18 iterations of decoding per bit achieves an error probability of 10-5 at an SNR of 
0.7 dB. 
10.5 
Low-Density Parity-Check Codes 
Low-density parity-check codes (LDPC) are linear block codes that are characterized 
by a sparse parity-check matrix. These codes were originally introduced in Gallager 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

494 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
(1960, 1963) but were not widely studied for the next 20 years. These codes have 
been the topic of active research in the coding community motivated by their excellent 
performance, which is realized by using an iterative decoding schemes known as the 
sum-product algorithm. In fact, it has been shown that these codes are competitors to 
turbo codes in terms of performance and, if well designed, have better performance 
than turbo codes. Their excellent performance has resulted in their adoption in several 
communication and broadcasting standards. 
Low-density parity-check codes are linear block codes with very large codeword 
length n usually in the thousands. The parity-check matrix H for these codes is a large 
matrix with very few l's in it. The term low density refers to the low density of l's in 
the parity-check matrix of these codes. 
A regular low-density parity-check code can be defined as a linear block code with 
a sparse m x n parity-check matrix H satisfying the following properties. 
1. There are Wr l's in each row of H, where Wr « min { m, n}. 
2. There are We l's in each column of H, where We « min{m, n}. 
The density of a low-density parity-check code, denoted by r, is defined as the ratio of 
the total number of l's in H to the total number of elements in H. The density is given 
by 
from which it is clear that 
Wr 
We 
r=
- =-
n 
m 
m 
We 
n 
Wr 
(10.5.1) 
(10.5.2) 
If the matrix H is full rank, then m = n - k 
otherwise, 
m 
We 
Re= 1-
- = 1- -
n 
Wr 
(10.5.3) 
Re = 1 -
rank(H) 
(10.5.4) 
n 
Low-density parity-check codes are conveniently represented by a graph represen­
tation known as the Tanner graph. The Tanner graph is a graphical representation of 
relation cHt = 0 and can be obtained by representing each codeword component Ci, 
1 ::: i ::: n, of a codeword c as a node i, known as a variable node and denoted by a 
circle, and each of then - k constraints given by cHt = 0 as a node j, 1 ::: j ::: n - k, 
known as a check node and denoted by a a square. Variable node i and check node j 
are connected if Ci appears in the jth parity-check equation. Figurel0.28 depicts the 
Tanner graphs for the ( 7, 4) Hamming code. The parity-check equations in this case 
are 
Ji : 
C1 + C2 + C3 + C5 = 0 
f2 : 
C2 + C3 + C4 + C5 = 0 
f3 : 
C1 + C2 + C4 + C7 = 0 
(10.5.5) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.5. LOW-DENSITY PARITY-CHECK CODES 
495 
Figure 10 .28: The Tanner graph for the ( 7, 4) Hamming code 
Note that the graph shown in Figure 10.28 includes cycles-that is, a path on the 
edges does not exist that starts from a node and ends in the same node. The length of 
the shortest cycle included in a graph is called the girth of the graph. The girth of the 
graph shown in Figure 10.28 is 4. 
In the Tanner graph of Figure 10.28 two types of nodes are distinguishable: the 
variable nodes, which correspond to the variables supplied to the Tanner graph, these 
are the nodes denoted by circles on the left; and the constraint nodes, or check nodes 
which force a relation between the variables. These nodes are denoted by squares on 
the right. A binary sequence c is a codeword if it satisfies the three constraints given 
by Equation (10.5.5). Let us define the indicator function of a proposition Pas 
then, for instance, c is a codeword if 
if Pis true 
if Pis false 
(10.5.6) 
The graph shown in Figure 10 .28 is a graphical representation of the relation given 
by Equation (10.5.7). 
The Tanner graph of a regular low-density parity-check code consists of the usual 
constraint and variable nodes. The low-density constraint of the code, however, makes 
the degree of all constraint (parity-check) nodes equal to Wr, which is much less than 
the code block length. Similarly, the degree of all variable nodes is equal to We. The 
Tanner graph for an LDPC code is shown in Figure 10.29. 
The Tanner graph of LDPC codes usually is a graph with cycles. We have pre­
viously defined the girth of a graph as the length of the shortest cycle in that graph. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

496 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
Figure 10.29: The Tanner graph for a regular LDPC code with Wr = 4 and We = 3 
Obviously a Tanner graph with cycles has a girth that is least equal to 4. A common 
decoding technique used for LDPC codes is the sum-product algorithm. This algorithm 
is effective when the girth of the Tanner graph of the LDPC code is large. The reason 
for this behavior is that in order for the sum-product algorithm to be effective on a 
graph with cycles, the value of the extrinsic information must be high. If the girth of 
the LDPC code is low, the information corresponding to a bit loops back to itself very 
soon, hence providing a little amount of extrinsic information and resulting in poor 
performance. Design techniques for LDPC codes with large girth are topics of active 
research. 
10.5.1 
Decoding LDPC Codes 
In this section we describe two algorithms for decoding LDPC codes. These algorithms 
are the bit-flipping algorithm and the sum-product algorithm, the latter also referred 
to as the belief propagation algorithm. The bit-flipping algorithm is a hard-decision 
decoding algorithm with low complexity. The sum-product algorithm is a soft-decision 
algorithm with higher complexity. 
The Bit-Flipping Algorithm 
The bit-flipping algorithm is a hard-decision decoding algorithm. Let us assume that y 
is the hard channel output (i.e., the channel output quantized to 0 or 1.) In the first step 
of the bit-flipping algorithm, the syndromes= yHt is computed. If the syndrome is 
zero, then we put c = y and stop. Otherwise, we consider the nonzero components of s 
corresponding to parity-check equations that are not satisfied by certain components of 
y. The update of y is done by flipping those components of y for which the number of 
unsatisfied check equations exceeds a certain threshold. After the update, the syndrome 
is computed again and the whole process is repeated for a fixed number of iterations 
or until the syndrome is equal to zero. The optimal value of the threshold in the bit­
flipping algorithm has been computed by Gallager (1963). 
A modified, and much simpler, version of the bit-flipping algorithm is obtained by 
flipping only those bits in y for which the number of unsatisfied parity check equations 
has the largest value and then repeating the syndrome computation. This process is 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.5. LOW-DENSITY PARITY-CHECK CODES 
497 
continued until either the syndrome is zero or a predetermined number of iterations is 
reached. 
---tlll4-il;tfil"ii;l•):)!§i• 
Illustrative Problem 10.23 [Bit-Flipping Decoder] 
Write a MATLAB script for bit-flipping decoding of a general linear block code 
using the simple algorithm described in the preceding paragraph. 
The inputs to the 
algorithm are the parity-check matrix of the code, the binary hard-decision channel 
output sequence y = (yi, yz, . . .  , Yn), and the maximum number of iterations. The 
outputs are the decoded sequence c = ( c1, c2, . . .  , Cn) and a binary variable check flag 
which is 0 if c is a legitimate codeword and is 1 otherwise. 
Apply the script for decoding a (7, 4) Hamming code with 
y= [o 
o 
o 
i 
o 
o 
i] 
The MATLAB script for the problem is given next. Applying it to y gives 
c= [ 1 
0 
0 
1 
0 
0 
i] 
and returns the check flag equal to 0, indicating successful decoding. 
---tlli" ---------------
function [c check] = bitfiipping(H,y,max_it) 
%BITFUPPING Bit-flipping algorithm for decoding LDPC codes 
% 
[c check] 
= bitjlipping(H,y,max_it) 
% 
H: parity-check matrix of the code 
% 
y: channel outputs, binary-valued 
% 
max_it: maximum number of iterations 
% 
c: decoder output 
% 
check: is 0 if c is a codeword and is 1 if c is not a codeword 
s = mod(y*H' , 2 ) : 
%Syndrome computation 
it=1; 
%Iteration counter 
while ((it<=max_it) && (nnz(sr = 0)) 
f = s*H; 
ind = find(f-max(t) == O}; 
y(ind} = mod(y(ind}+ 1,2); 
it = it+ 1; 
s = mod(y*H' , 2 ) : 
end 
c = y; 
check = nnz(s); 
if (check > 0) 
check = 1; 
end 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

498 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
The Sum-Product Algorithm 
The sum-product algorithm, which belongs to the class of message-passing algorithms, 
is an iterative decoding algorithm for LDPC codes that is based on passing likelihood 
ratios between variable and check nodes. The variable nodes receive the outputs of the 
channel and pass the likelihoods of codeword components to the check nodes. Each 
check node updates the received likelihoods using the information it has gathered from 
all variable nodes that are connected to it and sends the updated likelihoods back to 
the check nodes. This process is repeated until a predetermined maximum number 
of iterations is achieved or until a codeword is decoded (i.e., all check equations are 
satisfied). Here we provide only the steps in the sum-product algorithm for BPSK 
modulation over AWGN channels. The interested reader can refer to Ryan and Lin 
(2009) for details. 
For an AWGN channel with BPSK modulation, where 0 is mapped to .JE and 1 is 
mapped to -.JE, when the ith channel output is Yi, the corresponding likelihood ratio 
is given by 
L(yi) = ln p(yilO) 
p(yil 1) 
e-(yi-v'F.l2 /No 
=ln ---­
e-<Yi +v'F.l2 I No 
4-JE 
= --yi 
No 
(10.5.8) 
The sum-product algorithm is initialized at each node i, 1 :s: i :s: n, by sending 
the likelihood values in (10.5.8) to all check nodes j E M(i), where M(i) denotes the 
check nodes connected to the variable node i. In other words, for all 1 :s: i :s: n, and 
for all j E M ( i) , the message passed from node i to node j is 
(10.5.9) 
Check node j, after receiving all messages from the variable nodes connected to it, 
computes the message to be sent to node i, 1 :s: i :s: n, using the relation 
(10.5.10) 
where N (j) denotes the variable nodes connected to check node j. 
In the next step, the variable nodes update their information based on the received 
information from the check nodes. In this step, variable node i sends check node 
j E M ( i) the updated likelihood 
Li-j = Li+ 
L 
Lj'-i 
j'EM(i)-{j} 
(10.5.11) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.5. LOW-DENSITY PARITY-CHECK CODES 
499 
Equations (10.5.10) and (10.5.11) are iteratively repeated until a preset number of 
iterations is achieved or a codeword is detected. The detection is based on computing 
the total likelihoods at the variable nodes using 
and then detecting c using 
rrat =Li+ L Lj-i 
jEM(i) 
 {l, 
Ci= 
O, 
if r1:0tai < o 
t 
otherwise 
(10.5.12) 
(10.5.13) 
and checking whether all parity-check equations are satisfied (i.e., whether cHt = 0.) 
---tl814-il;ful&Tjij;t•1:Jl§@I 
Illustrative Problem 10.24 [Sum-Product Decoder] 
Write a MATLAB script to implement the sum-product decoding algorithm for a 
linear block code with parity check matrix H when BPSK modulation is used over an 
AWGN. The inputs to the script are H, channel output sequence y, maximum number 
of iterations, symbol energy E, and Eb/ No in dB. Apply the script for decoding a (7,4) 
Hamming code at different values of Eb/ No when the all-zero sequence is transmitted. 
For convenience assume E = 1. 
The MATLAB scripts for the problem are given next. Running the program at 
Eb/No = 2 dB returns c = O; that is, a correct decoding. At Eb/No = 0 dB we still 
have c = 0. Decreasing the SNR/bit to -2 dB returns c = [ 1 
O 
O 
O 
O 
1 
OJ 
which is not a codeword. 
----411ili'' -- !"#$% 
% MATLAB script for Illustrative Problem 10.24 
H = [1 0 1 1 1 0 0 
1101010 
0 1 1 1 0 0 1]; 
E = 1; 
n = size(H,2); 
f = size(H, 1 ); 
R = (n-f)/n; 
EbNQ_dB = 2; 
EbNO = 10-(EbNQ_dB/10); 
noise_variance = E/ (2*R*EbNO); 
% Code parity-check matrix 
% Symbol energy 
% Codeword length 
% Number of parity check bits 
% Code rate 
noise = sqrt(noise_ variance)* randn(1,n); 
y = ones(1,n) + noise; 
% Assuming the all-zero codeword is transmitted 
max_it = 50; 
[ c  check] 
= sp_decoder(H,y,max_it,E,EbNO_dB); 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

500 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
-4111i" ----------------
function [c check] = sp_decoder(H,y,max_it,E,EbNO_dB) 
%SP JJECODER is the Sum-Product decoder for a linear block code code with BPSK modulation 
% 
[c check] 
= sp...decoder(H,y,max_it,NO) 
% 
y 
channel output 
% 
H 
parity-check matrix of the code 
% 
max_it 
maximum number of iterations 
% 
E 
symbol energy 
% 
EbNO...dB 
SNR!bit (in dB) 
% 
c 
decoder output 
% 
check 
is 0 if c is a codeword and is I otherwise 
n = size(H,2); 
f = size(H, 1 ); 
R = (n-f)/n; 
Eb = E/R; 
% Length of the code 
NO = Eb*10A(-EbNO_dB/10); 
Li = 4*sqrt(E)*y/NO; 
Li i] = find(H); 
nz = length(find(H)); 
Lj2i = zeros(f,n); 
Li2j = repmat(Li,f, 1) . * H; 
Li2j_vec = Li+ sum(Lj2i,1); 
% Decision making: 
LLtotal = Li2j_vec; 
for 1 = 1 :n 
if LLtotal(l) <= 0 
c_h(l) = 1; 
else 
end 
end 
c_h(l) = O; 
s = mod(c_h*H' , 2) ; 
if nnz(s) == 0 
c = c_h; 
else 
it = 1; 
% Number of parity checks 
% Rate 
% Energy/bit 
% one-sided noise PSD 
while ((it <= max_it) && (nnz(sr =0)) 
% Variable node updates: 
for idx = 1 :nz 
Li2jQ(idx),i(idx)) = Li2j_vec(i(idx)) - Lj2iQ(idx),i(idx)); 
end 
% Check node updates: 
for q = 1 :f 
F = find(H(q,:)); 
Lj2i_ vec(q) = prod(tanh(0.5*Li2j(q,F(:))),2); 
end 
for idx = 1 :nz 
end 
Lj2iQ(idx),i(idx)) = 2*atanh(Lj2i_ vecU{idx)) /. .. 
tanh(0.5*Li2jQ(idx),i(idx)))); 
Li2 j_ vec = Li + swn(L j2i, 1 ) ; 
% Decision making: 
LLtotal = Li2j_vec; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

10.5. LOW-DENSITY PARITY-CHECK CODES 
end 
end 
c = c_h; 
for 1 = 1 :n 
end 
if LLtotal(l) <= 0 
c_h(l) = 1; 
else 
c_h(l) = O; 
end 
s = mod(c_h*H• ,2); 
it = it + 1; 
check = nnz(s); 
if (check > 0) 
check = 1; 
end 
501 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

502 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
Problems 
10.1 Write a MATLAB script to plot the capacity of a binary symmetric channel with 
crossover probability p as a function of p for 0  p  1. For what value of p is the 
capacity minimized, and what is the minimum value? 
10.2 A binary nonsymmetric channel is characterized by the conditional probabilities 
p(O I 1) = 0.2 and p(l I 0) = 0.4. Plot the mutual information I(X; Y) between the 
input and the output of this channel as a function of p = P (X = 1). For what value of 
p is the mutual information maximized, and what is the value of this maximum? 
10.3 A Z-channel is a binary-input, binary-output channel, with input and output al­
phabets !'£ = <!/ = { 0, 1} and characterized by p ( 011) = E and p (110) = 0. Plot 
I(X; Y) as a function of p = P(X = 1) for E = 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.9, 1. 
Determine the capacity of the channel in each case. 
10.4 A binary-input, ternary-output channel is characterized by the input and output 
alphabets!'£ = {O, 1} and<!/= {O, 1, 2} and transition probabilities p(O I 0) = 0.05, 
p(l I 0) = 0.2, p(O I 1) = 0.1, and p(l I 1) = 0.1. Plot I(X; Y) as a function of 
p = P(X = 1), and determine the channel capacity. 
10.5 A ternary-input, binary-output channel is characterized by the input and output 
alphabets!'£= {0, 1, 2} and CW = {0, 1} and transition probabilities p(O I 0) = 0.05, 
p(l I 1) = 0.2, and p(O I 2) = 0.1. Plot I(X; Y) as a function of p1 = P(X = 1) and 
P2 = P(X = 2), and determine the channel capacity. 
10.6 Plot the capacity of a binary symmetric channel that employs binary orthogonal 
signaling as a function of Eb I No. 
10.7 Repeat Illustrative Problem 10.3, but assume that the two transmitted signals are 
equal energy and orthogonal. How do your results differ from those obtained in Illus­
trative Problem 10 .3? 
10.8 Compare the plots of the capacity for hard decision and soft decision when or­
thogonal signals are employed. Compare these results with those obtained for antipodal 
signals. 
10.9 Plot the capacity of a binary symmetric channel that uses orthogonal signals as a 
function of Eb I No. Do this once with the assumption of coherent detection and once 
with the assumption of noncoherent detection. Show the two plots on the same figure 
and compare the results. 
10.10 Write a MATLAB script that generates the generator matrix of a Hamming code 
in the systematic form for any given m. 
10.11 Repeat Illustrative Problem 10.10 using orthogonal signaling with coherent and 
noncoherent detection. Plot the results on the same figure. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
503 
10.12 Use Monte Carlo simulation to plot the error probability versus Yb in Illustrative 
Problem 10.10. 
10.13 Repeat Illustrative Problem 10.12, but instead of orthogonal and antipodal sig­
naling, compare the performance of coherent and noncoherent demodulation of orthog­
onal signals under soft-decision decoding. 
10.14 Use Monte Carlo simulation to plot the error probability versus Yb in Illustrative 
Problem 10.12. 
10.15 Use MATLAB to find the output of the convolutional encoder shown in Figure 
10.18 when the input sequence is 
110010101010010111101011111010 
10.16 A convolutional code is described by 
1 
0 
1 
1 
0 
1 
1 
0 
G= 
1 
1 
0 
1 
1 
1 
1 
1 
a. If k = 1, determine the output of the encoder when the input sequence is 
110010101010010111101011111010 
b. Repeat part (a) with k = 2. 
10.17 In Problem 10.15, after obtaining the output of the encoder, change the first 6 
bits of the received sequence and decode the result using Viterbi decoding. Compare 
the decoder output with the transmitted sequence. How many errors have occurred? 
Repeat the problem once by changing the last 6 bits in the received sequence and once 
by changing the first 3 bits and the last 3 bits and compare the results. In all cases the 
Hamming metric is used. 
10 .18 Generate an equiprobable binary sequence of length 1000. Encode the sequence 
using the convolutional code shown in Figure 10 .18. Generate four random binary error 
sequences, each of length 2000, with probability of 1 equal to 0.01, 0.05, 0.1, and 0.2, 
respectively. Add (modulo 2) each of these error sequences to the encoded sequence 
and use the Viterbi algorithm to decode the result. In each case compare the decoded 
sequence with the encoder input and determine the bit-error rate. 
10.19 Use Monte Carlo simulation to plot the bit-error rate versus Yb in a convolutional 
encoder using the code shown in Figure 10.18. Assume that the modulation scheme is 
binary antipodal, once with hard-decision and once with soft-decision decoding. Let Yb 
be in the interval from 3 to 9 dB, and choose the length of your information sequence 
appropriately. Compare your results with the theoretical bounds. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

504 
CHAPTER 10. CHANNEL CAPACITY AND CODING 
10.20 The encoder of Figure 10.18 is used to transmit information over a channel with 
two inputs and three outputs. The outputs are denoted by 0, 1, and 2. This is the case 
where the output of a Gaussian channel is quantized to three levels. The conditional 
probabilities of the channel are given by p(O I 0) = p(l I 1) = 0.9, p(2 I 0) = p(2 I 
1) = 0.09. Use the Viterbi algorithm to decode the received sequence 
02020110202112002220110101020220111112 
10.21 Prove the identities in Equation (10.4.29). 
10.22 Write a MATLAB script that implements generation of a pseudorandom inter­
leaver of length N. The input to the program is N and its output is the interleaving 
matrix, a 2 x N matrix whose first row are the integers from 1 to N representing lo­
cation of bits in a block of length N and its second row are the interleaved position of 
these bits. 
10.23 Write a program that encodes a binary sequence of length N using a turbo en­
coder with constituent 517 RSCCs connected by a pseudorandom interleaver. Generate 
a pseudorandom sequence of length N = 2000 and encode it using this encoder. 
10.24 Using the SISO decoder of Illustrative Problem 10.22, write a program for im­
plementing a turbo decoder for the same code, modulation, and channel used in that 
problem. 
10.25 Write a MATLAB script to implement the bit-flipping algorithm for decoding of 
the code with parity-check matrix 
1 
1 
0 
1 
0 
0 
0 
1 
H= 
1 
0 
0 
0 
1 
0 
0 
0 
1 
1 
1 
0 
1 
1 
0 
1 
10.26 Write a MATLAB script to implement the sum-product algorithm for decoding 
of the code given in Probleml0.25. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

Chapter 11 
Multiple Antenna Systems 
11.1 
Preview 
The use of two or more antennas at the receiving terminal of a digital communica­
tion system is a commonly employed method for achieving spatial diversity and, thus, 
for mitigating the effects of signal fading. Typically, the receiving antennas must be 
separated by one or more wavelengths to ensure that the received signals undergo sta­
tistically independent fading. Spatial receiver diversity is especially attractive because 
the signal diversity is achieved without expanding the signal transmission bandwidth. 
Spatial diversity can also be achieved by using multiple antennas at the transmitter. 
For example, we will demonstrate that it is possible to achieve dual diversity with two 
transmitting antennas and one receiving antenna. Furthermore, multiple transmitting 
antennas can be used to create multiple spatial channels and, thus, provide the capabil­
ity to increase the data rate. This method is called spatial multiplexing. 
A communication system employing NT transmit antennas and NR receive anten­
nas is generally called a multiple-input, multiple-output (MIMO) system and the result­
ing spatial channel in such a system is called a MIMO channel. 
The special case in which NT 
= NR 
= 1 is called a single-input, single-output 
(SISO) system, and the corresponding channel is called a SISO channel. A second 
special case is one in which NT 
= 1 and NR  2. The resulting system is called a 
single-input, multiple-output (SIMO) system, and the corresponding channel is called 
a SIMO channel. Finally, a third special case is one in which NT  2 and NR 
= 1. 
The resulting system is called a multiple-input, single-output (MISO) system, and the 
corresponding channel is a MISO channel. 
11.2 
Channel Models for Multiple Antenna Systems 
In a MIMO system with NT transmit antennas and NR receive antennas, we denote 
the impulse response between the jth transmit antenna and the ith receive antenna by 
hij(T; t), where Tis the delay variable and tis the time variable in a general linear, 
505 
Copyright 2011 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not material1y affect the overall learning experience. Cengage Leaming reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

506 
CHAPTER 11. MULTIPLE ANTENNA SYSTEMS 
time-varying channel. Thus, a randomly time-varying channel is characterized by the 
NR x Ny matrix H(T; t), defined as 
H(T; t) = 
hu (T; t) 
hzi(T; t) 
h12(T;t) 
hzz(T;t) 
h1Nr (T; t) 
hzNr(T; t) 
(11.2.1) 
Suppose that the signal transmitted from the jth transmit antenna is s j ( t), j 
1, 2, ... ,Ny. Then the signal received at the ith antenna may be expressed as 
Nr 
= L hij ( T; t) * s j ( T)' 
j=l 
(11.2.2) 
i=l,2, ... NR 
where the asterisk denotes convolution. In matrix notation, (11.2.2) is expressed as 
r(t) = H(T; t) * s(T) 
(11.2.3) 
where s(t) is an Ny x 1 vector and r(t) is an NR x 1 vector. 
For a frequency nonselective channel, the channel matrix His expressed as 
H(t) = 
hu (t) 
h21 (t) 
h12(t) 
hzz(t) 
In this case, the signal received at the ith antenna is simply 
Nr 
Yi ( t) = L hij ( t) s j ( t), i = 1, 2' ... ' N R 
j=l 
and, in matrix form, the received signal vector r(t) is given as 
r(t) = H(t)s(t) 
(11.2.4) 
(11.2.5) 
(11.2.6) 
Furthermore, if the time variations of the channel impulse response are very slow within 
a time interval 0  t  T, when T may be either the symbol interval or some general 
time interval, (11.2.6) may be simply expressed as 
r(t) = Hs(t) , 0  t  T 
(11.2.7) 
where H is constant within the time interval 0  t  T. 
The slowly time-variant frequency nonselective channel model embodied in ( 11.2 .7) 
is the simplest model for signal transmission in a MIMO channel. In this chapter, we 
employ this model to illustrate the performance characteristics of MIMO systems. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

11.3. SIGNAL TRANSMISSION IN NONSELECTIVE MIMO CHANNEL 
507 
11.3 
Signal Transmission in a Slow Fading Frequency 
Nonselective MIMO Channel 
Consider a wireless communication system that employs multiple transmitting and re­
ceiving antennas, as shown in Figure 11.1. We assume that there are NT transmitting 
antennas and NR receiving antennas. As illustrated in Figure 11.1, a block of NT sym­
bols is converted from serial to parallel and each symbol is fed to one of NT identical 
modulators, where each modulator is connected to a spatially separate antenna. Thus, 
the NT symbols are transmitted in parallel and received on NR spatially separated re­
ceiving antennas. In this section, we assume that the NT symbols are uncoded. 
Output 
data 
Input 
data 
Serial­
to­
parallel 
converter 
Parallel­
to­
serial 
converter 
Modulator 
Nr antennas 
Modulator 
(a) Transmitter 
i-.--1 Demodulator 
Detector 
NRantennas 
i-.--1 Demodulator 
(b) Receiver 
Figure 11.1: 
A communication system with multiple transmitting and receiving 
antennas 
In this section, we assume that each signal from a transmitting antenna to a receiv­
ing antenna undergoes frequency nonselective Rayleigh fading. We also assume that 
the differences in propagation times of the signals from the NT transmitting to the NR 
receiving antennas are small relative to the symbol duration T, so that for all practical 
purposes, the signals from the NT transmitting antennas to any receiving antenna are 
synchronous. Hence, we can represent the received signals at the receiving antennas in 
a signaling interval as 
Nr 
rm(t) = L SnhmnBT(t) + Zm(t)' 0::; t::; T' m 
= 1, 2, ... ,NR 
n=l 
(11.3.1) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

508 
CHAPTER 11. MULTIPLE ANTENNA SYSTEMS 
where gy(t) is the pulse shape (impulse response) of the modulation filters, hmn is 
the complex-valued zero-mean Gaussian channel gain between the nth transmitting 
antenna and the mth receiving antenna, Sn is the symbol transmitted on the nth an­
tenna, and Zm (t) is a sample function of an AWGN noise process. The channel gains 
{hmn} are modeled as identically distributed and statistically independent from chan­
nel to channel. The Gaussian sample functions {Zm(t)} are assumed to be identically 
distributed and mutually statistically independent, each having zero mean and two­
sided power spectral density No/2. The information symbols {sn} are drawn from 
either a binary or M-ary PSK or QAM signal constellation. 
The demodulator for the signal at each of the NR receiving antennas consists of a 
matched filter to the pulse BT ( t), whose output is sampled at the end of each symbol 
interval. The output of the demodulator corresponding to the mth receiving antenna 
can be represented as 
Nr 
Ym = I Snhmn + 11m' m = 1,2, ... ,NR 
n=l 
(11.3.2) 
where the energy of the signal pulsegy(t) is normalized to unity and '7m is the additive 
Gaussian noise component. The N R soft outputs from the demodulators are passed to 
the signal detector. For mathematical convenience, ( 11.3 .2) may be expressed in matrix 
form as 
y = Hs + 11 
(11.3.3) 
wherey 
= [y1,Y2 •
. . .  ,yNR]t' s 
= [s1,S2, . . .  ,SNy]t,,, = [171,112 •
. . .  ,,,NR]t and His 
the NR x Ny matrix of channel gains. Figure 11.2 illustrates the discrete-time model 
for the multiple transmitter and receiver signals in each signaling interval. 
Input 
-
data 
Serial­
to­
parallel 
converter 
TJ l 
Detector 
Parallel-
to-
serial 
converter 
Output 
data 
Figure 11.2: Discrete-time model of the communication system with multiple transmit 
and receive antennas in frequency nonselective slow fading channel 
In the formulation of a MIMO system as described above, we observe that the 
transmitted symbols on the Ny transmitting antennas overlap totally in both time and 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

11.3. SIGNAL TRANSMISSION IN NONSELECTIVE MIMO CHANNEL 
509 
frequency. 
As a consequence, there is interchannel interference in the signals 
{ym, 1 :-=; m :-=; NR} received from the spatial channel. In the following section, 
we consider three different detectors for recovering the transmitted data symbols in a 
MIMO system. 
---tiMl4-ii;MiW#lij;t•]=JMa51 
Illustrative Problem 11.1 [Generation of the Channel Matrix and Inputs to the 
Detector] 
Suppose NT 
= NR 
= 2. Generate the elements of the channel matrix H for a 
Rayleigh fading AWGN channel and the corresponding inputs to the detectors for the 
two receive antennas. 
The elements of Hare hn, h12, h21, and h22. For the Rayleigh fading channel, these 
parameters are complex-valued, statistically independent, zero-mean Gaussian random 
variables with identical variances er . Hence, the two inputs to the detectors for the 
two antennas are 
Y1 = hns1 + h12s2 + 111 
Y2 = h21S1 + h22S2 + 112 
(11.3.4) 
where s1 and s2 are the transmitted symbols from the two transmit antennas and (171, 112) 
are the statistically independent additive Gaussian noise terms with zero mean and 
equal variances er . 
The MATLAB script for the problem is given below. 
----4111®1@11 -- !"#$%& 
% MATLAB script for Illustrative Problem 11.1 
Nt 
= 2; 
% No. of transmit antennas 
Nr 
= 2; 
% No. of receive antennas 
No 
= 1 ; 
% Noise variance 
s 
= 2*randi([O 1],Nt,1) - 1; 
% Binary transmitted symbols 
H 
= (randn(Nr,Nt) + 1 i*randn(Nr,Nt))/sqrt(2); 
% Channel coefficients 
noise 
= sqrt(No/2)*(randn(Nr, 1) + 1i*randn(Nr,1 )); 
% AWGN noise 
y = H*s + noise; 
% Inputs to the detectors 
disp([' The inputs to the detectors are: 
', num2str(y' ) ] ) 
11.3.1 
Detection of Data Symbols in a MIMO System 
Based on the frequency nonselective MIMO channel model described in Section 11.2, 
we consider three different detectors for recovering the transmitted data symbols and 
evaluate their performance for Rayleigh fading and additive white Gaussian noise. 
Throughout this development, we assume that the detector knows the elements of the 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

510 
CHAPTER 11. MULTIPLE ANTENNA SYSTEMS 
channel matrix H perfectly. In practice, the elements of H are estimated by using 
channel probe signals. 
Maximum-Likelihood Detector (MLD) The MLD is the optimum detector in the 
sense that it minimizes the probability of error. Because the additive noise terms at the 
NR receiving antennas are statistically independent and identically distributed (i.i.d.), 
zero-mean Gaussian, the joint conditional PDF p (yls) is Gaussian. Therefore, the 
MLD selects the symbol vector s that minimizes the Euclidean distance metric 
NR 
µ(s) = I 
m=l 
Ny 
Ym - L hmnSn 
n=l 
2 
(11.3.5) 
Minimum Mean-Square-Error (MMSE) Detector The MMSE detector linearly com­
bines the received signals {Ym , 1 :s; m :s; N R} to form an estimate of the transmitted 
symbols {sn. 1 :s; n :s; NT}. The linear combining is represented in matrix form as 
(11.3.6) 
where Wis an NR x NT weighting matrix, which is selected to minimize the mean 
square error 
(11.3.7) 
Minimization of J(W) leads to the solution for the optimum weight vectors W1, W2, ... , 
WNy as 
n=l,2, ... ,NT 
(11.3.8) 
where Ryy = E[yyH] = HR55HH +Nol is the (NR x NR) autocorrelation matrix 
of the received signal vector y, Rss = E[ssH], r5;ty = E[s;iy] and E[l]l]H] = Nol. 
When the signal vector has uncorrelated, zero-mean components, Rss is a diagonal 
matrix. Each component of the estimates is quantized to the closest transmitted symbol 
value. 
Inverse Channel Detector (ICD) The ICD also forms an estimate of s by linearly 
combining the received signals {Ym , 1 :s; m :s; NR}. However, in this case, we set 
NT = NR and select the weighting matrix W so that the interchannel interference is 
completely eliminated; that is, WH = H-1 and, hence, 
s = H-1y 
(11.3.9) 
Each element of the estimate s is then quantized to the closest transmitted symbol 
value. We note that the ICD estimate s is not corrupted by interchannel interference. 
However, this also implies that the ICD does not exploit the signal diversity inherent in 
the received signal, as we will observe below. 
When NR > NT, the weighting matrix W may be selected as the pseudoinverse of 
the channel matrix; that is, 
(11.3.10) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

11.3. SIGNAL TRANSMISSION IN NONSELECTIVE MIMO CHANNEL 
511 
Illustrative Problem 11.2 [Implementation of the Detectors] 
Implement the three types of detectors in MATLAB. 
The MATLAB script for the computations in each of the three detectors is given 
below. 
---tlMli" ----------------
% MATLAB script for Illustrative Problem 11 .2 
Nt = 2; 
Nr = 2; 
s = [1 1 -1 -1; 1 -1 1 -1]; 
H = (randn(Nr,Nt) + 1 i*randn(Nr,Nt))/sqrt(2); 
s = 2*randi([O 1],Nt,1) - 1 ; 
% No. of transmit antennas 
% No. of receive antennas 
% Reference codebook 
% Channel coefficients 
% Binary transmitted symbols 
No = 0.1; 
% Noise Noiance 
noise = sqrt(No/2)*(randn(Nr,1) + 1i*randn(Nr,1)); % AWGN noise 
y = H*s + noise; 
disp([' The transmitted symbols are: 
% Maximum Likelihood Detector: 
mu = zeros(1,4); 
for i = 1 :4 
mu(i) = sum(abs(y - H*S(:,i)). A2); 
end 
[Min idx] = min(mu); 
s_h = S(:,idx); 
% Inputs to the detectors 
',num2str(s' ) ] ) 
% Euclidean distance metric 
disp([' The detected symbols using the ML method are: 
' ,num2str(s_h' ) ] ) 
% MMSE Detector: 
wl = (H*H• 
+ No*eye(2))A(-l) * H(:,1); 
w2 = (H*H• 
+ No*eye(2))A(-l) * H(:,2); 
W = [wl w2]; 
s_h = W' *Yi 
for i = 1 :Nt 
if s_h(i) >= 0 
s_h(i) = 1; 
else 
end 
end 
s_h(i) = -1; 
% Optimum weight vector 1 
% Optimum weight vector 2 
disp([' The detected symbols using the MMSE method are: 
',num2str(s_h')]) 
% Inverse Channel Detector: 
s_h = H\y; 
for i = 1 :Nt 
if s_h(i) >= 0 
s_h(i) = 1; 
else 
s_h(i) = -1; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

512 
CHAPTER 11. MULTIPLE ANTENNA SYSTEMS 
end 
end 
<lisp([' The detected symbols using the ICD method are: 
',num2str(s_h' ) ] ) 
11.3.2 
Error Rate Performance of the Detectors 
The error rate performance of the three detectors in a Rayleigh fading channel is most 
easily evaluated by Monte Carlo computer simulation. 
--lil!IJ§jl;§iltj§lij;t•1:Jl§j@I 
Illustrative Problem 11.3 [Monte Carlo Simulation of MIMO Systems] 
Perform a Monte Carlo simulation to assess the error rate performance of an 
(Ny,NR) MIMO system in a Rayleigh fading AWGN channel. The modulation is 
binary PSK (or binary PAM). 
Figures 11.3 and 11.4 illustrate the binary error rate (BER) for binary PSK modula­
tion with (Ny,NR) 
= (2, 2) and (Ny,NR) 
= (2, 3), respectively. In both cases, the 
variances of the channel gains are identical and their sum is normalized to unity; that 
is, 
L E[lhmnl2] 
= 1 
(11.3.11) 
n,m 
The BER for binary PSK modulation is plotted as a function of the average SNR per 
bit. With the normalization of the variances in the channel gains {hmn} as given by 
Equation (11.3.11), the average received energy is simply the transmitted signal energy 
per symbol. 
----Single channcl(Nr =NR = l) 
---Dualdiversity(Nr= l,NR = 2) 
10-6 
-<>-1nversechannel(Nr = NR = 2) 
	 MMSE(Nr = NR = 2) 
--J!l- MLD (NT= NR = 2) 
5 
10 
15 
20 
Average SNR/bit (dB) 
25 
30 
Figure 11.3: Performance of MLD, MMSE, and ICD (detectors) with NR = 2 receiving 
antennas 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additiona1 content at any time if subsequent rights restrictions l'«tuire it. 

11.3. SIGNAL TRANSMISSION IN NONSELECTIVE MIMO CHANNEL 
513 
10-2 
 
C 
10-3 
D 
10-4 
10-s 
10-• 
0 
10 
15 
---- Dualdiversity(Nr = l,NR = 2) 
--- Triple diversity (Nr= l,NR = 3) 
__,.,.__ MMSE (Nr  2, N,  3) 
--0- MLD (NT= 2, NR = 3) 
MMSE 
MLD 
20 
Average SNR/bit (dB) 
Figure 11.4: Performance of MLD and MMSE detectors with NR 
antennas 
3 receiving 
The performance results in Figures 11.3 and 11.4 illustrate that the MLD exploits 
the full diversity of order NR available in the received signal and, thus, its performance 
is comparable to that of a maximal ratio combiner (MRC) of the NR received signals, 
without the presence of interchannel interference; that is, (Ny, NR) = (1, NR). The two 
linear detectors, the MMSE detector and the ICD, achieve an error rate that decreases 
inversely as the SNR raised to the (NR -1) power for Ny = 2 transmitting antennas. 
Thus, when NR 
= 2, the two linear detectors achieve no diversity, and when NR 
= 3, 
the linear detectors achieve dual diversity. We also note that the MMSE detector out­
performs the ICD, although both achieve the same order of diversity. In general, with 
spatial multiplexing (Ny antennas transmitting independent data streams), the MLD 
detector achieves a diversity of order NR and the linear detectors achieve a diversity 
of order NR - Ny+ 1, for any NR ;:-: Ny. In effect, with Ny antennas transmitting 
independent data streams and NR receiving antennas, a linear detector has NR degrees 
of freedom. In detecting any one data stream, in the presence of Ny - 1 interfering 
signals from the other transmitting antennas, the linear detectors utilize Ny -1 degrees 
of freedom to cancel the Ny - 1 interfering signals. Therefore, the effective order of 
diversity for the linear detectors is NR - (Ny -1) 
= NR - Ny+ 1. 
The MATLAB script for the problem is given below. 
-41®'i" 11--------------
% MATLAB script for Illustrative Problem 11 .3 
Nt = 2; 
Nr = 2; 
s = [1 1 -1 -1; 1 -1 1 -1]; 
Eb= 1; 
% No. of transmit antennas 
% No. of receive antennas 
% Reference codebook 
% Energy per bit 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

514 
CHAPTER 11. MULTIPLE ANTENNA SYSTEMS 
EbNo_dB = 0:5:30; 
% Average SNR per bit 
% Noise variance 
No = Eb*10. A(-1*EbNo_dB/10); 
BER_ML = zeros(1,length(EbNo_dB)); 
BER_MMSE = zeros(1,length(EbNo_dB)); 
BER_ICD = zeros(1,length(EbNo_dB)); 
% Bit-Error-Rate Initialization 
% Bit-Error-Rate Initialization 
% Bit-Error-Rate Initialization 
% Maximum Likelihood Detector: 
echo off; 
for i = 1 :length(EbNo_dB) 
no_errors = O; 
end 
no_bits = O; 
while no_errors <= 100 
mu = zeros(1,4); 
end 
s = 2*randi([O 1],Nt,1 ) - 1 ; 
no_bits = no_bits + length(s); 
H = (randn(Nr,Nt) + 1 i*randn(Nr,Nt))/sqrt(2*Nr); 
noise = sqrt(No(i)/2)*(randn(Nr, 1) + 1i*randn(Nr,1 )); 
y = H*s + noise; 
for j = 1 :4 
end 
mu(j) = sum(abs(y - H*S(:,j)). A2); 
% Euclidean distance metric 
[Min idx] = min(mu); 
s_h = S(:,idx); 
no_errors = no_errors + nnz(s_h-s); 
BER_ML(i) = no_errors/no_bits; 
echo on; 
% Minimum Mean-Sqaure-Error (MMSE) Detector: 
echo off; 
for i = 1 :length(EbNo_dB) 
no_errors = O; 
end 
no_bits = O; 
while no_errors <= 100 
s = 2*randi([O 1],Nt,1) - 1 ; 
no_bits = no_bits + length(s); 
H = (randn(Nr,Nt) + 1 i*randn(Nr,Nt))/sqrt(2*Nr); 
noise = sqrt(No(i)/2)*(randn(Nr, 1) + 1i*randn(Nr,1 )); 
y = H*s + noise; 
wl = (H*H' 
+ No(i)*eye(Nr))A(-1) * H(:,l); % Optimum weight vector 1 
w2 = (H*H' 
+ No(i)*eye(Nr))A(-1) * H(:,2); % Optimum weight vector 2 
W = [wl w2]; 
s_h = W' *Yi 
for j = 1 :Nt 
end 
if s_h(j) > = 0 
s_h(j) = 1; 
else 
s_h(j) = -1; 
end 
no_errors = no_errors + nnz(s_h-s); 
end 
BER_MMSE(i) = no_errors/no_bits; 
echo on; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

11.4. CAPACITY OF MIMO CHANNELS 
% Inverse Channel Detector: 
echo off; 
for i = 1 :length(EbNo_dB) 
no_errors = O; 
end 
no_bits = O; 
while no_errors <= 100 
end 
s = 2*randi([O 1),Nt,1) - 1 ; 
no_bits = no_bits + length(s); 
H = (randn(Nr,Nt) + 1 i*randn(Nr,Nt))/sqrt(2*Nr); 
noise = sqrt(No(i)/2)*(randn(Nr, 1) + 1i*randn(Nr,1 )); 
y = H*s + noise; 
s_h = H\y; 
for j = 1 :Nt 
if s_hU) >= 0 
s_hU) = 1; 
else 
end 
end 
s_hU) = -1; 
no_errors = no_errors + nnz(s_h-s); 
BER_ICD(i) = no_errors/no_bits; 
echo on; 
% Plot the results: 
semilogy(EbNo_dB,BER_ML,' -o' ,EbNo_dB,BER_MMSE,' -*' ,EbNo_dB,BER_ICD) 
xlabel( 'Average SNR/bi t (dB) ',' fontsize', 10) 
ylabel(' BER',' fontsize', 10) 
legend(, ML,'' MMSE'', ICD,) 
515 
It is interesting to compare the computational complexity of the three detectors. 
We note that the complexity of the MLD grows exponentially as Af Nr, where M is the 
number of points (symbols) in the signal constellation, whereas the linear detectors 
have a complexity that grows linearly with Ny and NR. Therefore, the computational 
complexity of the MLD is significantly larger than that of the linear detectors when 
Ny and M are large. However, for a small number of transmit antennas and small 
number of signal constellation symbols (i.e., Ny .::; 4 and M 
= 4), the computational 
complexity of MLD is rather reasonable. 
11.4 
Capacity of MIMO Channels 
In this section we consider the evaluation of the channel capacity of a frequency non­
selective AWGN MIMO channel characterized by the channel matric H. Let s denote 
the Ny x 1 transmitted signal vector whose elements are statistically stationary with 
zero mean and covariance matrix R55• In the presence of AWGN, the NR x 1 received 
signal vector is expressed as 
y = Hs + TJ 
(11.4.1) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

516 
CHAPTER 11. MULTIPLE ANTENNA SYSTEMS 
where 1J is the NR x 1 zero mean Gaussian noise vector with covariance matrix NolNR, 
where lNR is the NR x NR identity matrix. Although the channel matrix H is a realiza­
tion of a random matrix, in this section we treat H as deterministic and known to the 
receiver. 
To determine the capacity of the MIMO channel, we first compute the mutual in­
formation between the transmitted signal vector s and the received vector y, denoted 
as I (s; y), and then determine the probability distribution of the signal vector s that 
maximizes I(s;y). Thus, 
C =max I(s;y) 
p(s) 
(11.4.2) 
where C is the channel capacity in bits per second per Hertz (bps/Hz). It can be shown 
(see Telatar (1999) and Neeser and Massey (1993)) that I(s; y) is maximized whens 
is a zero-mean, circularly symmetric, complex Gaussian vector and, hence, C is only 
dependent on the covariance of the signal vector. The resulting capacity of the MIMO 
channel is 
C = 
max 
log2 det (1NR + 
N
l 
HRssHH) bps/Hz 
tr(Rss) =Es 
0 
(11.4.3) 
where tr(Rss) denotes the trace of the signal covariance Rss. This is the maximum rate 
per Hz that can be transmitted reliably (without errors) over the MIMO channel for any 
given realization of the channel matrix H. 
In the important practical case where the signals among the Ny transmitters are 
statistically independent symbols with energy per symbol equal to Es I Ny, the signal 
covariance matrix is diagonal; that is, 
(11.4.4) 
and tr(Rss) = Es. In this case, the expression for the capacity of the MIMO channel 
simplifies to 
( 
Es 
H) 
c = logz det lNR +
Ny No 
HH 
bps/Hz 
(11.4.5) 
The capacity formula in (11.4.5) can also be expressed in terms of the eigenvalues of 
HHH by using the decomposition HHH = QAQH. Thus, 
C 
= log2 det ( INR + N:o QAQH) 
= log2 det ( INR + N:o QH QA) 
= log2 det (1NR + N:o A) 
= Ir=1 logz ( 1 + N;No i\i) 
where r is the rank of the channel matrix H. 
It is interesting to note that in a SISO channel, i\1 = I hu 12 so that 
( 
Es 
z) 
Csrso = log2 
1 +
No 
lhu I 
bps/Hz 
(11.4.6) 
(11.4.7) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

11.4. CAPACITY OF MIMO CHANNELS 
517 
We observe that the capacity of the MIMO channel is simply equal to the sum of the 
capacities of r SISO channels, where the transmit energy per SISO channel is Es/ NT 
and the corresponding channel gain is equal to the eigenvalue .\i. 
Capacity of SIMO Channel 
A SIMO channel (NT 
= l, NR  2) is characterized by the vector h = [hu h21 ... 
hNRl ]t. In this case, the rank of the channel matrix is unity and the eigenvalue .\1 is 
given as 
NR 
.\1 
= :L lhi1 12 
i =l 
(11.4.8) 
Therefore, the capacity of the SIMO channel, when the NR elements {hn} of the 
channel are deterministic and known to the receiver, is 
CsrMo 
= logz (1 +  If!1 lhn12) bps/Hz 
(11.4.9) 
Capacity of MISO Channel 
A MISO channel (NT  2, NR 
= 1) is characterized by the vector h = [hu h12 ... 
h1Ny]t. In this case, the rank of the channel matrix is also unity and the eigenvalue .\1 
is given as 
Ny 
.\1 
= :L lh1j12 
j=l 
(11.4.10) 
The resulting capacity of the MISO channel when the NT elements { h lj} of the chan­
nel are deterministic and known to the receiver is 
CMrso 
= logz ( 1 + N:o I7I1 lh1jl2) bps/Hz 
(11.4.11) 
It is interesting to note that for the same llhll2, the capacity of the SIMO channel 
is greater than the capacity of the MISO channel when the channel is known to the 
receiver only. The reason is that, under the constraint that the total transmitted energy 
in the two systems be identical, the energy Es in the MISO system is split evenly among 
the NT transmit antennas, whereas in the SIMO system, the transmitter energy Es is 
used by the single antenna. Note also that in both SIMO and MISO channels, the 
capacity grows logarithmically as a function of II h 112• 
---tll!IX-ii;MiN#li;t•]:J!§®·I--------
Illustrative Problem 11.4 [Computation of the Capacity of a 2 x 2 MIMO System] 
A realization of the channel matrix in a 2 x 2 MIMO system is 
[ 1 
H-
0.4 
0.5] 
0.8 
Determine the eigenvalues of HHH and compute and plot the channel capacity as a 
function of SNR = 1 0 log10 (Es I No), using the formula given in (11.4.6). 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

518 
CHAPTER 11. MULTIPLE ANTENNA SYSTEMS 
The eigenvalues ofHHH arei\1=0.19396 andi\2=1.856. The graph of the capacity 
is shown in Figure 11.5. 
N' 10 
 
Cl. 
e 
::-
-] 
Cl. 
8 
5 
5 
10 
Average SNR (dB) 
15 
20 
Figure 11.5: Plot of the capacity in Illustrative Problem 11.4 
The MATLAB script for the problem is given below. 
---tllli" ----------------
% MATLAB script for Illustrative Problem 11.4 
Nt = 2; 
H 
= [1 0.5; 0.4 0.8]; 
lamda 
= eig(H*H ' ) ; 
SNR_dB 
= 0:0.01 :20; 
% No. of transmit antennas 
% Channel realization 
% Eigenvalue calculation 
% SNR in dB 
SNR 
= power(10,SNR_dB/10); 
% Capacity calculation: 
C 
= log2(1 + SNR*lamda(1 )/Nt) + log2(1 + SNR*lamda(2)/Nt); 
<lisp([' The eigenvales are: 
', num2str(lamda' ) ] ) ; 
% Plot the results: 
plot(SNR_dB,C) 
axis([O 20 0 15]) 
xlabel( 'Average SNR (dB) ',' fontsize', 10) 
ylabel(' Capacity (bps /Hz) ',' fontsize', 10) 
--llMllJ§jl;ful Nii;t•1:Jl§@I 
Illustrative Problem 11.5 [Computation of the Capacity of SIMO and MISO 
Channels] 
The channel vector for a SIMO and MISO channel has elements ( 1 0. 5). Compute 
and plot the channel capacities as a function of SNR = 10log10(Es/No) for the two 
systems and compare the results. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

11.4. CAPACITY OF MIMO CHANNELS 
519 
The graphs for the channel capacities are shown in Figure 11.6. We observe that the 
capacity of the SIMO channel exceeds the capacity of the MISO channel. 
5 
10 
Average SNR (dB} 
15 
20 
Figure 11.6: Plot of the capacities in Illustrative Problem 11.5 
The MATLAB script for the problem is given below. 
---®'i" ----------------
% MATLAB script for Illustrative Problem 11.5 
H_simo 
= (1 0.5]' ; 
H_miso 
= (1 0.5]; 
NLmiso 
= 2; 
Nr_simo 
= 2; 
SNR_dB 
= 0:0.01 :20; 
SNR 
= power(10,SNR_dB/10); 
% Capacity calculations: 
% Channel realization 
% Channel realization 
% No. of transmit antennas 
% No. of receive antennas 
% SNR in dB 
c_simo 
= log2(1 + SNR*sum(H_simo. "2)); 
c_miso 
= log2(1 + SNR*sum(H_miso. "2)/NLmiso); 
% Plot the results: 
plot(SNR_dB,c_simo, ' -
• ',SNR_dB,C_miso) 
axis([O 20 0 15]) 
xlabel( 'Average SNR (dB) ',' fontsize', 10) 
ylabel('Capacity (bps/Hz)',' fontsize' ,10) 
legend(' SIMO',' MISO') 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

520 
CHAPTER 11. MULTIPLE ANTENNA SYSTEMS 
11.4.1 
Ergodic Capacity for a Frequency Nonselective Rayleigh 
Fading MIMO Channel 
The capacity expression given above for a deterministic MIMO channel may be viewed 
as the capacity for a randomly selected realization of the channel matrix. In such a case, 
the assumption is that the fading is sufficiently slow, so that the channel matrix is time 
invariant within the transmission interval required to transmit the signal vectors. If we 
average the expression for the capacity of the deterministic channel over the statistics 
of the channel matrix, we obtain the average capacity, denoted as C, which is called 
the ergodic capacity of the MIMO channel. Thus, for a SIMO channel, the ergodic 
capacity is 
CsIMo 
 E [1og2 ( 
1 +  % lhnl2)] 
(11.4.12) 
= fo00 log2 ( 1 +  x) p(x) dx 
bps/Hz 
where X 
= f!1lhn12 and p(x) is the probability density function of the random 
variable X. 
Figure 11.7 illustrates CsIMo versus the average SNR E5E(lhn 12)/No for NR 
= 
2, 4 and 8 when the channel parameters {hn} are i.i.d. complex-valued, zero-mean, 
circularly symmetric Gaussian with each having unit variance (i.e., the channel is 
Rayleigh fading). Hence, the random variable X has a chi-squared distribution with 
2N R degrees of freedom, and its pdf is given as 
20 
n-1 
x 
-x 
p(x) 
= (n - l)! e 
' 
Average SNR (dB) 
x;O 
--+--NR = 1 
-0-NR= 2 
--0-NR= 4 
--¢-NR= 8 
Figure 11.7: Ergodic capacity of SIMO channels 
(11.4.13) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

11.4. CAPACITY OF MIMO CHANNELS 
521 
where n 
= NRNT. For comparison purposes, the ergodic capacity Csrso is also shown 
in Figure 11.7. 
Similarly, the ergodic channel capacity for the MISO channel is 
CMISo  E [log2 ( 
1 + N:;.,0 j lhlil')] 
(11.4.14) 
= Jo'° log2 ( 1 + N:o x) p(x) dx 
bps/Hz 
Figure 11.8 illustrates CMrso versus the average SNR, as defined above, for Ny 
2, 4, and 8 when the channel parameters {h11} are i.i.d. zero-mean, complex-valued, 
circularly symmetric Gaussian, each having unit variance. As in the case of the SIMO 
channel, the random variable x has a chi-squared distribution with 2Ny degrees of 
freedom. The ergodic capacity of a SISO channel is also included in Figure 11.8 for 
comparison purposes. In comparing the graphs in Figure 11.7 with those in Figure 11.8, 
we observe that CsIMo > CMrso. 
-+-Nr= l 
9 
--0-Nr= 2 
--O-Nr=4 
--0-Nr= 8 
o---------- 
0 
2 
4 
6 
8 
10 
12 
14 
16 
18 
20 
Average SNR (dB) 
Figure 11.8: Ergodic capacity of MISO channels 
----tll•ii;MiltJ#li;t•'="3®·•----------
mustrative Problem 11.6 [Computation of the Ergodic Capacity for SIMO and 
MISO Channels] 
Write the MATLAB script for performing the computation for CsrMo and CMiso, 
given by (11.4.12) and (11.4.14), for a Rayleigh fading channel and, thus, verify the 
capacity results illustrated in Figures 11.7 and 11.8. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

522 
CHAPTER 11. MULTIPLE ANTENNA SYSTEMS 
The MATLAB script for the problem is given below. 
---tl&li" ---------------
% MATLAB script for Illustrative Problem 11.6 
H_simo 
= [1 0.5]' ; 
H_miso 
= [1 0.5]; 
Nr_simo 
= 2; 
Nt_miso 
= 2; 
n_simo 
= Nr_simo; 
n_miso 
= NLmiso; 
% Channel realization 
% Channel realization 
% No. of receive antennas 
% No. of transmit antennas 
SNR_dB 
= 0:0.01 :20; 
% SNR in dB 
SNR 
= power(10,SNR_dB/10); 
L 
= size(SNR,2); 
% Preallocating for speed: 
C-simo 
= zeros(1,L); 
C_miso 
= zeros(1,L); 
% Capacity calculations: 
echo off; 
for i 
= 1 :L 
end 
C_simo(i) 
= quadgk(@(x)log2(1 + SNR(i)*x).*power(x,n_simo-1). 
*exp(-x)/factorial(n_ simo-1 ),O,int); 
C-miso(i) 
= quadgk(@(x)log2(1 + SNR(i)*x/Nt_miso).*power(x,n_miso-1 ). 
*exp(-x)/factorial(n_miso-1 ),O,int); 
echo on; 
% Plotting the results: 
plot(SNR-dB,C-simo,' -
• ',SNR_dB,C-miso) 
axis([O 20 0 1 OJ) 
xlabel( 'Average SNR (dB) ',' fontsize', 10) 
ylabel(' Capacity (bps/Hz) ',' fontsize', 10) 
legend(' SIMO',' MISO') 
To determine the ergodic capacity of the MIMO channel, we may average the ex­
pression for C given in (11.4.6) over the joint probability density function of the eigen­
values {Ad. Thus, 
CMJMo  E [,t, log, ( 1 + N:o A,)] 
= r00 •
•
•
 r00 [±1og2(1+ 
N
E Ai)] p(A1, ... ,Ar)dA1 ... dAr 
Jo 
Jo 
i=l 
T o 
(11.4.15) 
For the case in which the elements of the channel matrix Hare complex-valued, 
zero-mean Gaussian with unit variance and spatially white with NR 
= Ny 
= N, the 
joint pdf of {Ad is given by Edelman (1989) as 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

11.4. CAPACITY OF MIMO CHANNELS 
523 
(11.4.16) 
where fiv (N) is the multivariate gama function defined as 
N 
fN(N) 
= ITN(N-1)/2 TI (N - i)! 
(11.4.17) 
i=l 
Figure 11.9 illustrates CM1Mo versus the average SNR for Ny 
= NR = 2 and Ny 
= 
NR 
= 4. The ergodic capacity of a SISO channel is also included in Figure 11.9 for 
comparison purposes. We observe that at high SNRs, the capacity of the (Ny,NR) 
= 
(4, 4) MIMO system is approximately four times the capacity of the (1, 1) system. 
Thus, at high SNRs, the capacity increases linearly with the number of antenna pairs 
when the channel is spatially white. 
----NT= 1, NR = l 
--0-Nr=2,NR = 2 
--0-Nr=4,NR=4 
20 
Average SNR (dB) 
Figure 11.9: Ergodic capacity of MIMO channels 
---tl!lii;MiltJ§lj;t•]:J!#@I·---------
Illustrative Problem 11.7 [Computation of the Ergodic Capacity for a MIMO 
Channel] 
Write a MATLAB script for performing the computation for CMIMo, given by 
(11.4.15), for a Rayleigh fading channel and, thus, verify the capacity results illus­
trated in Figure 11.9. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

524 
CHAPTER 11. MULTIPLE ANTENNA SYSTEMS 
The MATLAB script for the problem is given next. 
% MATLAB script for Illustrative Problem 11.7 
SNR_dB 
= 0:5:20; SNR 
= 10. A(SNR_dB/10); 
L 
= length(SNR); 
% initialization: 
Cl 
= zeros(1,L); C2 
= zeros(1,L); C3 
= zeros(1,L); 
% Capacity Calculations: 
echo off; 
for i 
= 1 :L 
end 
% Nt 
= Nr 
= N 
= 1: 
Cl(i) 
= quadgk(@(x)log2(1 + SNR(i)*x).*exp(-x),O,inf); 
% Nt 
= Nr 
= N 
= 2: 
C2(i) 
= quad2d(@(x,y)(log2(1 + SNR(i)*x/2)+log2(1 + SNR(i)*y/2))/2.* . . .  
exp(-x-y).*(x-y). A2,0, 1000,0, 1000); 
% Nt 
= Nr 
= N 
= 3: 
C3(i) 
= triplequad(@(x,y,z)(log2(1 + SNR(i)*x/3)+log2(1 + SNR(i)*y/3)+log2(1 + SNR(i)*z/3))/ . . .  
24.*exp(-x-y-z).*((x-y).*(x-z).*(y-z)). A2,0, 10,0, 10,0, 10); 
echo on; 
% Plot the results: 
plot(SNR_dB,Cl,' -* ',SNR_dB,C2,' -o' ,SNR_dB,C3,' -s ') 
axis([O 20 0 25]) 
legend('N_T=l ,N_R=l ', 'N_T=2 ,N_R=2 ', 'N_T=3,N_R=3 ',2) 
xlabel( 'Average SNR (dB) ',' fontsize', 10) 
ylabel(' Capacity (bps/Hz) ','font size', 10) 
11.5 
Space-Time Codes for MIMO Systems 
Let us now consider the MIMO system illustrated in Figure 11.10. At the transmit­
ter, the sequence of information bits is fed into a symbol mapper that maps a block of 
bits into signal points {sd selected from a signal constellation such as PAM, PSK, or 
QAM, consisting of M 
= 2b signal points. These signal points are fed as a block to 
a space-time encoder that maps the information symbols to a parallel set of identical 
modulators. In turn, the modulators map the signal points into corresponding wave­
forms that are transmitted simultaneously on the Nr antennas. Below, we describe two 
types of space-time codes: block codes and trellis codes. 
11.5 .1 
Space-Time Block Codes 
A space-time block code (STBC) is defined by a generator matrix G, having N rows 
and Nr columns, of the form 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

11.5. SPACE-TIME CODES FOR MIMO SYSTEMS 
Information 
bits 
Output 
___ _, 
bits 
Symbol 
Input 
Mapper 
symbols 
Symbol-to-
Output 
bit Mapper 
symbols 
Space­
time 
block 
code 
Space­
time 
block 
decoder 
Modulator 
Modulator 
Modulator 
i.--i Demodulator 
,_ _ _, Demodulator 
,_ _ _, Demodulator 
Nr Transmit 
antennas 
NRReceive 
antennas 
Figure 11.10: Space-time block-coded MIMO system 
G= 
Bn 
B12 
B21 
B22 
BNl 
BN2 
BlNy 
B2Ny 
BNNy 
525 
(11.5.1) 
in which the elements {BiJ} are signal points resulting from a mapping of information 
bits to corresponding signal points from a binary or M-ary signal constellation. By 
employing Ny transmit antennas, each row of G may contain up to Ny different signal 
points (symbols), which are transmitted on the Ny antennas in a time slot. Thus, the 
first row of symbols in G is transmitted on the Ny antennas in the first time slot, the 
second row of symbols in G is transmitted on the Ny antennas in the second time slot, 
and the Nth row of symbols in G is transmitted on the Ny antennas in the Nth time slot. 
Therefore, N time slots are used to transmit the symbols in the N rows of the generator 
matrix G. The ratio of the number of different symbols transmitted to the number of 
time slots is called the spatial code rate Rs . 
In the design of the generator matrix of a STBC, it is desirable to focus on three 
principal objectives: (1) achieving the highest possible diversity of NyNR, (2) achiev­
ing the highest possible (throughput) rate, and (3) minimizing the complexity of the 
decoder. Our treatment considers these three objectives. 
The Alamouti STBC 
Alamouti (1998) devised a STBC for Ny = 2 transmit antennas andNR = 1 receive 
antenna. The generator matrix for the Alamouti code is given as 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

526 
CHAPTER 11. MULTIPLE ANTENNA SYSTEMS 
[ 51 
G= 
-s2 
52 ] 
si 
(11.5.2) 
where s1 and s2 are two signal points selected from an M-ary PAM, or PSK or QAM 
signal constellation with M = 2b signal points. Thus, 2b data bits are mapped into two 
signal points (symbols) s1 and s2 from the M-ary signal constellation. The symbols s1 
and s2 are transmitted on the two antennas in the first time slot and the symbols -s2 
and sf' are transmitted on the two antennas in the second time slot. Thus, two symbols, 
s1 and s2, are transmitted in two time slots. Consequently, the spatial code rate R5, 
which is defined as the ratio of the number of symbols transmitted to the numbers of 
time slots used to transmit the symbols, is 1 for the Alamouti code. This is the highest 
possible rate for a (orthogonal) STBC. 
Let us assume that the symbols s1 and s2 are signal points in a QAM signal constel­
lation. These signal points modulate the quadrature carriers cos 2rr Jct and sin 2rr Jct. 
Hence, the modulator output signals fed to the two antennas in the first time interval 
0 < t:::; Tare 
u9i (t) = AmcIBT(t) cos 2rrJct + AmslBT(t) sin2rrJct 
U9:(t) = Amc29T(t) cos 2rrJct + Ams29T(t) sin2rrJct 
(11.5.3) 
where Si = (.JE;Amci .JE;Amsi), i = 1, 2, and gy(t) is a rectangular pulse, defined 
as 
gy(t) = {ti 
0:::; t:::; T 
0 
otherwise 
(11.5.4) 
The superscripts on Um1 (t) and Um2 (t) denote the signal transmitted in the first inter­
val. In the second time interval (T < t :::; 2T), the signal points to be transmitted are 
-s 2 and s i . Hence the signals to be transmitted on the two antennas are 
u;i (t) = -Amc2BT(t - T) cos 2rrJc (t - T) + Ams2BT(t - T) sin 2rrJc(t - T) 
U;:(t) = AmclBT(t - T) cos 2rrJc(t - T) - AmslBT(t - T) sin2rrJc(t - T) 
(11.5.5) 
The MISO channel matrix for the Ny = 2, NR = 1 channel, based on a frequency 
nonselective model, is 
(11.5.6) 
In the decoding of the STBC, we assume that His constant over the two time slots and 
that it is known at the receiver. Hence, the received signal in the first time interval is 
and in the second time interval 
rC2l (t) = hu u;i (t) + h12u;: (t) + n C2J (t) 
where n<1l (t) and n<2l (t) are the AWGN noise terms. 
(11.5.7) 
(11.5.8) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

11.5. SPACE-TIME CODES FOR MIMO SYSTEMS 
527 
At the receiver the, r<O (t) is cross-correlated with the basis functions IJl1 (t) and 
IJl2(t) 
IJl1 (t) = gy(t) cos 2rrfct 
IJl2(t) = gy(t) sin2rrfct 
(11.5.9) 
and r(2)(t) is cross-correlated with l)J1(t - T) and IJl2(t - T). Consequently, the 
outputs of the correlators at the sampling instants t = T and t = 2 T for the two time 
slots are 
Y1 = h115I + hI252 + l1I 
Y2 = -h115z + h125i + 112 
(11.5.10) 
where l1I and 172 are zero-mean, circularly symmetric complex valued uncorrelated 
Gaussian random variables with equal variance <T. 
The correlator outputs Y1 and Y2 in (11.5.10) are fed to the detector, which com­
putes the estimates of the symbols 51 and 52 as follows: 
 
h* 
*h 
5I = YI 11 + Y2 I2 
 
h* 
*h 
52 = YI I2 - Y2 11 
(11.5.11) 
and it selects the symbols 5I and 52 that are closest to 51 and 52 in Euclidean distance. 
If we substitute for YI and Y2 in (11.5.11) and carry out the multiplications, we obtain 
.SI= (lh1112 
+ lh1212] 51 + hiil11 + h12l1z 
52 = [lhul2 + lh1212] 52 + hi2l11 - hul1z 
(11.5.12) 
We make the following observations on the Alamouti STBC. First, we observe 
that the code achieves dual diversity, which is the largest possible for transmission 
over the two transmit antennas. Secondly, the detector that computes (11.5.11) is very 
simple. These two desirable properties were achieved as a result of the orthogonality 
characteristic of the generator matrix G for the Alamouti code, which we may express 
as 
G = [ 91 
* 
-g2 
92 ] 
Bi 
(11.5.13) 
We observe that the column vectors u1 = (gI, -g2)t and u2 = (g2,gi)t are orthog­
onal (i.e. VI · u!f = 0) and, furthermore, 
(11.5.14) 
where h is a 2 x 2 identity matrix. As a consequence of this orthogonality property, 
when we express the received signal given in equation ( 11.5 .10) as 
hll 
hi2 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

528 
CHAPTER 11. MULTIPLE ANTENNA SYSTEMS 
or 
y = H21s + 11 
(11.5.15) 
and form the estimates 51 and 52 as prescribed in equation ( 11.5 .11) from y in equation 
(11.5.15), we obtain 
Therefore, 
h12 l [Y1] 
-hn 
Y2 
= H&H21s + H&lJ 
[1hul2+ lh1212]s+H&11 
(11.5.16) 
(11.5.17) 
Thus, full diversity and low decoding complexity are achieved as a consequence of the 
property of G given in (11.5 .14). 
--li!llJ§ll;fy)l'tj§lij;{e):J!§j@I 
Illustrative Problem 11.8 [Monte Carlo Simulation of an Ny = 2, NR = 1 Multi­
ple Antenna System] 
Perform a Monte Carlo simulation to estimate the error rate performance of an 
Ny = 2, NR = 1 multiple antenna system that employs the Alamouti STBC. Hence, 
generate the input to the detector as given in (11.5.10), where the signal points are se­
lected from a QPSK constellation; hu and h12 are statistically independent, complex­
valued, zero-mean Gaussian random variables with unit variance; and '71 and '72 are 
also statistically independent, complex-valued, zero-mean Gaussian random variables 
with variance u2. The detector computes the estimates as in (11.5.11) and decides on 
which symbols are closest to 51 and 52 in Euclidean distance. Perform the above com­
putations for N = 10, 000 iterations for any given value of u2, where in each iteration 
the channel coefficients ( h 11, h 12), the signal points (51, 52), and, additive noise terms 
(171, 172) are selected independently. Plot the measured symbol error rate as a function 
of the SNR = 10log1 (Eb/2u2), where Eb= £5/2 is the energy per bit, which may be 
normalized to unity for convenience. 
The graph for the estimated error rates as a function of SNR is shown in Figure 11.11. 
The MATLAB script for the problem is given below. 
% MATLAB script for Illustrative Problem 11 .8 
Nt 
= 2; 
% No. of transmit antennas 
Nr 
= 1; 
% No. of receive antennas 
codebook 
= [1+1 i 1-1 i -1+1 i -1-1 i]; % Reference codebook 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

11.5. SPACE-TIME CODES FOR MIMO SYSTEMS 
10° r:-,.,...,-,.,...,-..,...,.-,...,.,-,..,..,-,.,-,..,..,..,.,,.,-.,,.,-'.'"7"
,.,...,-,.,.,-,,.,.,-,-,,:=r::::::::::::::::::::::::::::=;] 
.. ; ••••••••••••••••• • 1 ·-· _ ·_· ·_·
. 
Al#$%&ti: 4PSKI 
10-1 
a: 
UJ 
G 
Q) 
(i 
a: 
10-2 
 
e 
UJ 
0 
.c 
E 
>-
rn 
10-3 
. . 
. 
. . . 
. 
. . . 
. 
. 
. 
. . 
...... . ...... 
. ............. . 
............. .. 
·············· 
. .
.
.
.
.
.
.
.
.
.
 
. . . . . . . . . . . 
.......... 
. . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
,,,, 
............... . . 
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
 .
.
. 
. 
. . . . . . . . . . . . . . 
10HIJKLMNOPQRST 
5 
10 
15 
SNR (dB) 
Figure 11.11: Plot for Illustrative Problem 11.8 
Es= 2; 
SNR_dB = 5:5:20; 
% Energy per symbol 
% SNR in dB 
No= Es*10.=(-1*SNR_dB/10); 
% Preallocation for speed: 
% Noise variance 
Distl = zeros(1,4); 
Dist2 = zeros(1,4); 
% Distance vector for sl 
% Distance vector for sl 
BER = zeros(1,length(SNR_dB)); 
% Maximum Likelihood Detector: 
echo off; 
for i = 1 
:length(SNR_dB) 
no_errors = O; 
no_syrnbols = O; 
while no_errors <= 100 
s = 2*randi([O 1),1,2)-1 + 1 i*(2*randi([O 1),1,2)-1 ); 
no_symbols = no_syrnbols + 2; 
% Channel coefficients 
h = 1/sqrt(2) * (randn(1,2) + 1 i*randn(1,2)); 
% Noise generation: 
noise = sqrt(No(i))*(randn(2, 1) + 1i*randn(2,1 )); 
% Correlator outputs: 
y(1) = h(1 )*s(1) + h(2)*s(2) + noise(1 ); 
y(2) = -h(1 )*conj(s(2)) + h(2)*conj(s(1 )) + noise(2); 
% Estimates of the symbols sl and s2: 
s_h(1) = y(1 )*conj(h(1 )) + conj(y(2))*h(2); 
s_h(2) = y(1 )*conj(h(2)) - conj(y(2))*h(1 ); 
% Maximum-Likelihood detection: 
for j=1: 4 
end 
DistlU) = abs(s_h(1)-codebookU)); 
Dist2U) = abs(s_h(2)-codebookU)); 
[Minl idxl) = min(Distl); 
20 
529 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions r«tuire it. 

530 
CHAPTER 11. MULTIPLE ANTENNA SYSTEMS 
end 
[Min2 idx2] 
= rnin(Dist2); 
s_t(1) 
= codebook(idxl); 
s_t(2) 
= codebook(idx2); 
% Calculation of error numbers: 
if s_t(1) 
-= s(1) 
no_errors 
= no_errors + 1 ; 
end 
if s_t(2) 
-= s(2) 
no_errors 
= no_errors + 1 ; 
end 
BER(i) 
= no_errors/no_symbols; 
end 
echo on; 
semilogy(SNR_dB,BER) 
xlabel(' SNR (dB) ') 
ylabel(' Symbol Error Rate (SER) ') 
legend(' Alamouti: 4-PSK' ) 
The Alamouti code is an example of orthogonal complex matrix design for NT = 2. 
It has been shown in the literature (see Jafarkhani (2005) and Tarokh et al. (1999)), that 
orthogonal complex matrix designs do not exist for NT > 2 transmit antennas. How­
ever, by dropping the constraint that the generator matrix G be square, it is possible to 
devise orthogonal designs for either one-dimensional or two-dimensional signal con­
stellations. For example, an orthogonal generator matrix for a STBC that transmits four 
complex-valued (PSK or QAM) symbols on NT = 4 transmit antennas is 
51 
52 
53 
54 
-52 
51 
-54 
53 
-S3 
54 
51 
-s2 
G= 
-S4 
-53 
52 
S1 
(11.5.18) 
s* 
s* 
s* 
s* 
1 
2 
3 
4 
* 
s* 
s* 
s3 
-52 
1 
- 4 
* 
-53 
st 
sf 
-s2 
s* 
* 
Sz 
sf 
- 4 
-53 
For this code generator, the four complex-valued symbols are transmitted in eight con­
secutive time slots. Hence the spatial rate for this code is Rs = 1/2. We also observe 
that 
4 
GHG = 2)1sil2] /4 
i=l 
(11.5.19) 
so that this code provides fourth-order diversity in the case of one receive antenna and 
4NR diversity with NR receive antennas. 
Complex orthogonal matrices with rate Rs = 1/2 exist for any number of transmit 
antennas. However, Wang and Xia (2003) have shown that complex orthogonal matri­
ces for rates Rs > 3 I 4 do not exist. Rate Rs = 3 I 4 complex orthogonal matrices do 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

11.5. SPACE-TIME CODES FOR MIMO SYSTEMS 
531 
exist. The following Rs = 3 / 4 complex orthogonal generator matrix is designed for 
Ny = 3 transmit antennas in which the three symbols 51, 52, and 53 are transmitted in 
four time slots. 
51 
52 
53 
* 
5i 
0 
G= 
-52 
5* 
0 
5* 
3 
- 1 
(11.5.20) 
0 
53 
* 
-52 
--41114-il;fulWiij;t•]:Jl#@I 
Illustrative Problem 11.9 [Detector for Rs = 3/4 Code] 
Express the input to the detector for the rate Rs = 3 I 4 code having the generator 
matrix given by ( 11.5 .20) and determine the expression for the estimates 51, 52 , and 53 
computed by the detector. Assume that the channel coefficients hn, h12, h13 are time 
invariant over the four time slots. 
The inputs to the detector are the outputs of the correlators for the signals received in 
the four time slots, that is, 
Y1 = hn51 + h1252 + h1353 + '71 
Y2 = -hn52 + h125i + '72 
y3 = hn53 - h135i + '73 
Y4 = h1253 - h1352 + '74 
It is easily verified that the symbol estimates are obtained from the following linear 
combinations of Y1, Y2, Y3, Y 4: 
51 = hf1Y1 + h12Y{ - h13y{ 
52 = hf2Y1 - hnY{ - h13y4 
53 = hf3Y1 + huy{ + h12Y4 
11.5.2 
Space-Time Trellis Codes 
Space-time trellis codes (STTCs) are similar to trellis codes in trellis-coded modula­
tion (TCM) in that they are formed by combining a trellis code with an appropriately 
selected signal constellation with the objective of achieving a coding gain. In the case 
of a space-time code, the primary objective is to achieve the largest possible spatial 
diversity at the highest coding rate. STTCs may be designed either manually or with 
the aid of a computer, following some simple rules, similar in nature to the rules for 
designing trellis codes for TCM. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

532 
CHAPTER 11. MULTIPLE ANTENNA SYSTEMS 
00 
01 
02 
03 
IO 
11 
12 
13 
20 
21 
22 
23 
30 
31 
32 
33 
Input: 
0 
2 
3 
0 
· 
· 
· 
Antenna 1: 
0 
0 
2 
3 
2 
0 
Antenna 2: 
0 
2 
3 
0 
3 
Figure 11.12: 4-PSK, four-state, space-time trellis code 
As an example of a STTC, we consider the four-state trellis code shown in 
Figure 11.12, which is designed for two transmit antennas and QPSK modulation. 
The states are denoted as St 
= 0, 1, 2, 3. The input to the encoder is a pair of bits 
(00, 01, 10, 11) that are mapped into the corresponding phases, which are numbered 
(0, 1, 2, 3), respectively. The indices 0, 1, 2, 3 correspond to the four phases, which are 
called symbols. Initially, the encoder is in state St 
= 0. Then, for each pair of input 
bits that are mapped into a corresponding symbol, the encoder generates a pair of sym­
bols, the first of which is transmitted on the first antenna and the second of which is 
transmitted simultaneously on the second antenna. For example, when the encoder is 
in state St 
= 0 and the input bits are 11, the symbol is a 3. The STTC outputs the pair 
of symbols ( 0, 3) , corresponding to the phases 0 and 3 TT I 2. The zero phase signal is 
transmitted in the first antenna and the 3 rr / 2 phase signal is transmitted on the second 
antenna. At this point the encoder goes to state St 
= 3. If the next two input bits are 
01, the encoder outputs the symbols (3, 1), which are transmitted on the two antennas. 
Then the encoder goes to state St 
= 1, and this procedure continues. At the end of a 
block of input bits, say a frame of data, zeros are inserted in the data stream to return 
the encoder to the state St 
= 0. Thus the STTC transmits at a bit rate of 2 bps/Hz. We 
note that it satisfies the two design rules given above and achieves full rank of NT 
= 2. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

11.5. SPACE-TIME CODES FOR MIMO SYSTEMS 
533 
In decoding a STTC, the maximum-likelihood sequence detection (MLSD) crite­
rion provides the optimum performance. MLSD is efficiently implemented by use of 
the Viterbi algorithm. For two transmit antennas., the branch metrics may be expressed 
as 
NR 
µb(S1,s2) 
= L IYJ - h11s1 - h21s212 
(11.5.21) 
j=l 
where {yj, 1 :-s: j :-s: NR} are the outputs of the matched filters at the NR receive 
antennas, {h1j, 1 :-s: j :-s: NR} and {h2j, 1 :-s: j :-s: NR} are the channel coefficients 
in a frequency nonselective channel, and (s1, s2) denote the symbols transmitted on 
the two antennas. By using these branch metrics in the Viterbi algorithm to form the 
path metrics of valid paths through the trellis, we can find the path that minimizes the 
overall metric and, thus, determine the sequence of transmitted symbols corresponding 
to the path having the smallest path metric. 
Illustrative Problem 11.10 [Space-Time Trellis Code] 
Write the MATLAB code for implementing the 4-PSK, four-state trellis encoder 
shown in Figure 11.12. 
The MATLAB script for the problem is given below. 
---tlili" ---------------
% MATLAB script for Illustrative Problem 11.10 
no_ bits 
= 1 O; 
input 
= randi([O 3], 1,no_bits); 
if mod(no_bits,2) -= 0 
input 
= [input O]; 
end 
L 
= size(input,2); 
sLO = O; 
sLc 
= sLO; 
anLl 
= [ ]; 
anL2 = []; 
% Determine the length of input vector 
% Define the input as a random vector 
% Initial state 
% Initialization of the current state 
% Output of antenna 1 
% Output of antenna 2 
% Update the current state as well as outputs of antennas 1 and 2: 
for i = 1 :L 
sLp 
= sLc; 
if input(i) 
== 0 
SLC 
= O; 
elseif input(i) 
== 1 
SLC 
= 1; 
elseif input(i) 
== 2 
SLC 
= 2; 
else 
SLC 
= 3; 
end 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

534 
anLl 
= [anLl SLp]; 
anL2 
= [anL2 sLc]; 
end 
if SLC 
-
0 
= 
end 
sLp 
= sLc; 
SLC 
= O; 
ant_ I 
= [ant_ I st_p]; 
anL2 
= [anL2 sLc]; 
CHAPTER 11. MULTIPLE ANTENNA SYSTEMS 
% Display the input vector and outputs of antennas 1 and 2: 
disp([' The input sequence is: 
' num2str(input)]) 
disp([' The transrni tted sequence by antenna 1 is: 
' num2str(anL1)]) 
disp([' The transrni tted sequence by antenna 2 is: 
' num2str(anL2)]) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
535 
Problems 
11.1 Write the MATLAB code for generating the channel matrix Hof a MIMO system 
that employs Ny transmit and NR receive antennas, where the channel is frequency 
nonselective and slowly fading, and elements of H are zero-mean, complex-valued 
Gaussian with identical variances equal to unity. 
11.2 Repeat the simulation in Illustrative Problem 11.3 and check your simulation error 
rates with the graphs in Figures 11.3 and 11.4. 
11.3 Repeat Illustrative Problem 11.4 for the computation of the capacity of a 2 x 2 
MIMO system in which the channel matrix is [ 2 
H-
0.5 
0.3] 
1.2 
11.4 Compute the capacity of a 3 x 3 MIMO system in which the channel matrix is 
H = I 05 
lo.3 
0.5 
2 
0.4 
0.3J 
0.4 
1.5 
11.5 Compute and plot the capacity CsiMo of a SIMO channel in which the number of 
receive antennas is NR = 1, 3, 5, 7. 
11.6 Compute and plot the capacity CMrso of a MISO channel in which the number of 
transmit antennas is NR = 1, 3, 5, 7. 
11.7 Compute and plot the capacity of a MIMO system in which (Ny,NR) = (3, 3) 
and (5, 5). 
11.8 Repeat the Monte Carlo simulation in Illustrative Problem 11.8 using the Alam­
outi code and plot the error rate performance. Thus, confirm the performance of the 
MISO system in a Rayleigh fading channel. 
11.9 The generator matrix for a MISO system with (Ny,NR) 
given as follows: 
S1 
S2 
S3 
0 
* 
s{ 
0 
S3 
G= 
-Sz 
sf 
0 
* 
-Si 
S2 
0 
sf 
* 
-Sz 
-S1 
( 4, 1) antennas is 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

536 
CHAPTER 11. MULTIPLE ANTENNA SYSTEMS 
Thus, this STBC results in a spatial rate Rs = 3/4. The channel matrix for this system 
consists of the elements hn, h12, h13, and h14. Show that this generator matrix is 
orthogonal and results in a fourth-order diversity when used in a fading channel. 
11.10 Repeat Illustrative Problem 11.9 when the generator matrix G is the one given 
in Problem 11.9. 
11.11 In matrix form, the detector inputs and the symbol estimates may be expressed 
as 
Y1 
hn 
h12 
h13 r:l 
171 
y; 
hi2 
-hi1 
0 
172 
Y3 
-hj'3 
0 
hi1 
'73 
Yt 
0 
-hj'3 hi2 
'74 
or 
Y = H31S + 11 
Show that 
s= r::J 
 Hf.y  Hf.H31s +Hf. 
and that 
HlfiH31 = [1hnl2 + lh1212 + lh1312] h 
where /3 is the identity matrix and, therefore, the MIMO system achieves third-order 
diversity in a fading channel. 
11.12 The generator matrix for a (Ny,NR) = (4, 2) MIMO system is given in Prob­
lem 11.9. Write the MATLAB code that generates the channel matrix H for a slowly 
fading Rayleigh channel. 
11.13 Perform a Monte Carlo simulation of a (Ny,NR) = (2, 2) MIMO system that 
employs the Alamouti code in a Rayleigh fading channel. The modulation is QPSK. 
Plot the error probability as measured in the simulation for N = 10, 000 iterations. 
11.14 Show that the (Ny, NR) = (2, 2) MIMO system that employs the Alamouti code 
in a Rayleigh fading channel achieves fourth-order diversity. 
11.15 Write the MATLAB code for implementing the 4-PSK, eight-state trellis code 
shown in Figure 11.13. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
537 
00 
01 
02 
03 
10 
II 
12 
13 
20 
21 
22 
23 
30 
31 
32 
33 
22 
23 
20 
21 
32 
33 
30 
31 
02 
03 
00 
01 
12 
13 
10 
11 
2 
0 
Figure 11.13: 4-PSK, eight-state, space-time trellis code 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

Copyright 2011 Cengage Learning. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

Chapter 12 
Spread Spectrum 
Communication Systems 
12.1 
Preview 
Spread spectrum signals for digital communications were originally developed and 
used for military communications for the following reasons: (1) to provide resistance 
to hostile jamming, (2) to hide the signal by transmitting it at low power and, thus, 
make it difficult for an unintended listener to detect its presence in noise; and (3) to 
make it possible for multiple users to communicate through the same channel. Today, 
however, spread spectrum signals are being used to provide reliable communications in 
a variety of commercial applications, including mobile vehicular communications and 
interoffice wireless communications. 
The basic elements of a spread spectrum digital communication system are illus­
trated in Figure 12.1. We observe that the channel encoder and decoder and the modu­
lator and demodulator are the basic elements of a conventional digital communication 
system. In addition to these elements, a spread spectrum system employs two identi­
cal pseudorandom sequence generators, one of which interfaces with the modulator at 
the transmitting end and the second of which interfaces with the demodulator at the 
receiving end. These two generators produce a pseudorandom or pseudonoise (PN) 
binary-valued sequence that is used to spread the transmitted signal in frequency at the 
modulator and to despread the received signal at the demodulator. 
Time synchronization of the PN sequence generated at the receiver, with the PN 
sequence contained in the received signal, is required to properly despread the received 
spread spectrum signal. In a practical system, synchronization is established prior to 
the transmission of information by transmitting a fixed PN bit pattern that is designed 
so that the receiver will detect it with high probability in the presence of interference. 
After time synchronization of the PN sequence generators is established, the transmis­
sion of information commences. In the data mode, the communication system usually 
tracks the timing of the incoming received signal and keeps the PN sequence generator 
in synchronism. 
539 
Copyright 2011 Cengage Leaming. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not materialJy affect the overall learning experience. Cengage Leaming reserves the right to remove additiona1 content at any time if subsequent rights restrictions req_uire it. 

540 
CHAPTER 12. SPREAD SPECTRUM COMMUNICATION SYSTEMS 
Information ___ _ 
sequence 
Channel 
encoder 
Modulator 
Pseudorandom 
pattern 
generator 
Channel 
Demodulator 
Pseudorandom 
pattern 
generator 
Channel 
decoder 
Figure 12.l: Model of spread spectrum digital communication system 
In this chapter we consider two basic types of spread spectrum signals for dig­
ital communications: namely, direct-sequence (DS) spread spectrum and frequency­
hopped (FH) spread spectrum. 
Two types of digital modulation are considered in conjunction with spread spec­
trum, namely: 
PSK and FSK. PSK modulation is generally used with DS spread 
spectrum and is appropriate for applications where phase coherence between the trans­
mitted signal and the received signal can be maintained over a time interval that spans 
several symbol (or bit) intervals. On the other hand, FSK modulation is commonly 
used with FH spread spectrum and is appropriate in applications where phase coher­
ence of the carrier cannot be maintained due to time variations in the transmission 
characteristics of the communications channel. 
12.2 
Direct-Sequence Spread Spectrum Systems 
Let us consider the transmission of a binary information sequence by means of binary 
PSK. The information rate is R bits per second, and the bit interval is Tb 
= 1 / R sec­
onds. The available channel bandwidth is Be hertz, where Be » R. At the modulator 
the bandwidth of the information signal is expanded to W 
= Be Hz by shifting the 
phase of the carrier pseudorandornly at a rate of W times per second according to the 
pattern of the PN generator. The resulting modulated signal is called a DS spread 
spectrum signal. 
The information-bearing baseband signal is denoted as v (t) and is expressed as 
00 
(12.2.1) 
n=-oo 
where {an 
= ±1, -oo < n < oo} and Br(t) is a rectangular pulse of duration Tb. 
This signal is multiplied by the signal from the PN sequence generator, which may be 
expressed as 
00 
c(t) 
= I Cnp(t - nTc) 
n=-oo 
(12.2.2) 
where {en} represents the binary PN code sequence of ±l's and p(t) is a rectangu­
lar pulse of duration Tc, as illustrated in Figure 12.2. This multiplication operation 
serves to spread the bandwidth of the information-bearing signal (whose bandwidth 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

12.2. DIRECT-SEQUENCE SPREAD SPECTRUM SYSTEMS 
541 
(a) 
lE 
_, Fr,d 
... 
___ __. 
• t 
(b) 
t· 
(c) 
Figure 12.2: Generation of a DS spread spectrum signal: (a) PN signal, (b) data signal, 
( c) product signal 
is approximately R hertz) into the wider bandwidth occupied by PN generator signal 
c ( t) (whose bandwidth is approximately 1 /Tc). The spectrum spreading is illustrated 
in Figure 12.3, which shows, in simple terms using rectangular spectra, the convolu­
tion of the two spectra, the narrow spectrum corresponding to the information-bearing 
signal and the wide spectrum corresponding to the signal from the PN generator. 
The product signal v ( t) c ( t), also illustrated in Figure 12 .2, is used to amplitude 
modulate the carrier Ac cos 2rr Jct and, thus, to generate the DSB-SC signal 
u(t) = Acv(t)c(t) cos 2rrfct 
(12.2.3) 
Because v(t)c(t) = ±1 for any t, it follows that the carrier-modulated transmitted 
signal may also be expressed as 
u(t) = Accos[2rrfct + e(t)] 
(12.2.4) 
where e(t) = 0 when v(t)c(T) =land e(t) =TT when v(t)c(t) = -1. Therefore, 
the transmitted signal is a binary PSK signal whose phase varies at the rate 1 /Tc. 
The rectangular pulse p ( t) is usually called a chip, and its time duration Tc is 
called the chip interval. The reciprocal 1 /Tc is called the chip rate and corresponds 
(approximately) to the bandwidth W of the transmitted signal. The ratio of the bit 
interval Tb to the chip interval Tc is usually selected to be an integer in practical spread 
spectrum systems. We denote this ratio as 
L _Tb 
c - Tc 
(12.2.5) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

542 
CHAPTER 12. SPREAD SPECTRUM COMMUNICATION SYSTEMS 
I 
0 
__!_ 
(a) 
0 
(b) r(f)' C(f) 
0 
(c) 
• f 
• f 
\ 
• f 
__!_ 
I 
+-
T, 
Tb 
Figure 12.3: Convolution of spectra of the (a) data signal with the (b) PN code signal 
Hence, Le is the number of chips of the PN code sequence per information bit. Another 
interpretation is that Le represents the number of possible 180° phase transitions in the 
transmitted signal during the bit interval Tb. 
12.2.1 
Signal Demodulation 
The demodulation of the signal is performed as illustrated in Figure 12.4. The received 
signal is first multiplied by a replica of the waveform c ( t) generated by the PN code se­
quence generator at the receiver, which is synchronized to the PN code in the received 
signal. This operation is called (spectrum) despreading, because the effect of multi­
plication by c(t) at the receiver is to undo the spreading operation at the transmitter. 
Thus, we have 
AcV (t)c2 (t) cos 2rr Jct = AcV (t) cos 2rr Jct 
(12.2.6) 
because c2 (t) 
= 1 for all t. The resulting signal, Acv (t) cos 2rr Jct, occupies a band­
width (approximately) of R hertz, which is the bandwidth of the information-bearing 
Received 
signal r(t) 
PN signal 
generator 
Sampler 
Clock signal 
Figure 12.4: Demodulation of DS spread spectrum signal 
To decoder 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

12.2. DIRECT-SEQUENCE SPREAD SPECTRUM SYSTEMS 
543 
signal. Therefore, the demodulator for the despread signal is simply the conventional 
cross-correlator or matched filter that was described in Chapters 5 and 7. Because the 
demodulator has a bandwidth that is identical to the bandwidth of the despread signal, 
the only additive noise that corrupts the signal at the demodulator is the noise that falls 
within the information bandwidth of the received signal. 
Effects of Despreading on a Narrowband Interference 
It is interesting to investigate the effect of an interfering signal on the demodulation of 
the desired information-bearing signal. Suppose that the received signal is 
r(t) = Acv (t)c(t) cos 2rrfct + i(t) 
(12.2.7) 
where i(t) denotes the interference. The despreading operation at the receiver yields 
r(t)c(t) = Acv (t) cos 2rr Jct + i(t)c(t) 
(12.2.8) 
The effect of multiplying the interference i(t) with c(t) is to spread the bandwidth of 
i(t) to W hertz. 
As an example, let us consider a sinusoidal interfering signal of the form 
(12.2.9) 
where fJ is a frequency within the bandwidth of the transmitted signal. 
Its mul­
tiplication with c ( t) results in a wideband interference with power spectral density 
Jo 
= P1 /W, where P1 
= A]/2 is the average power of the interference. Because the 
desired signal is demodulated by a matched filter (or correlator) that has a bandwidth 
R, the total power in the interference at the output of the demodulator is 
JoR = 
P1R 
= _!i_ 
= _!l_ 
= 
P1 
W 
W/R 
Tb/Tc 
Le 
(12.2.10) 
Therefore, the power in the interfering signal is reduced by an amount equal to the 
bandwidth expansion factor W JR. The factor W JR 
= Tb/Tc 
= Le is called the pro­
cessing gain of the spread spectrum system. The reduction in interference power is 
the basic reason for using spread spectrum signals to transmit digital information over 
channels with interference. 
In summary, the PN code sequence is used at the transmitter to spread the information­
bearing signal into a wide bandwidth for transmission over the channel. When the re­
ceived signal is multiplied by a synchronized replica of the PN code signal, the desired 
signal is despread back to a narrow bandwidth, whereas any interference signals are 
spread over a wide bandwidth. The net effect is a reduction in the interference power 
by the factor W / R, which is the processing gain of the spread spectrum system. 
The PN code sequence { Cn} is assumed to be known only to the intended receiver. 
Any other receiver that does not have knowledge of the PN code sequence cannot de­
modulate the signal. Consequently, the use of a PN code sequence provides a degree of 
privacy (or security) that is not possible to achieve with conventional modulation. The 
primary cost for this security and performance gain against interference is an increase 
in channel bandwidth utilization and in the complexity of the communication system. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

544 
CHAPTER 12. SPREAD SPECTRUM COMMUNICATION SYSTEMS 
12.2.2 
Probability of Error 
In an AWGN channel, the probability of error for a DS spread spectrum system em­
ploying binary PSK is identical to the probability of error for conventional (unspread) 
binary PSK; that is, 
(12.2.11) 
On the other hand, if the interference is the sinusoidal signal given by (12.2.9) with 
power P1, the probability of error is (approximately) 
(12.2.12) 
Thus, the interference power is reduced by the factor of the spread spectrum signal 
bandwidth W. In this case, we have ignored the AWGN, which is assumed to be neg­
ligible; that is, No « P1 /W. If we account for the AWGN in the channel, the error 
probability is expressed as 
The Interference Margin 
We may express Eb I Jo as 
Pb= Q ( 
2Eb ) 
No+ P1/W 
-Q( ) 
'JNo+To 
Eb 
PsTb 
Ps/R 
W/R 
- =
-- =
-- =
--
(12.2.13) 
(12.2.14) 
Now, suppose we specify a required Eb/lo to achieve a desired performance. Then, 
using a logarithmic scale, we may express (12.2.14) as 
lOlog PJ = lOlog W
R - lOlog (Eb ) 
Ps 
Jo 
()dB = (;)dB - (:LB 
(12.2.15) 
The ratio (P1 I Ps )aB is called the interference margin. This is the relative power advan­
tage that a jammer may have without disrupting the communication system. 
--llMl!)§jl;fulNii;t•1=11§@1 
Illustrative Problem 12.1 [Processing Gain and Interference Margin] Suppose that 
we require Eb/Jo = 10 dB to achieve reliable communication with binary PSK. 
Determine the processing gain that is necessary to provide an interference margin of 
20dB. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from 
the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

12.2. DIRECT-SEQUENCE SPREAD SPECTRUM SYSTEMS 
545 
By using (12.2.15) we find that the processing gain (W /R)ctB = 30 dB; that is, W JR= 
Le = 1000. This means that with W JR = 1000, the average interference power at 
the receiver may be 100 times the power, Ps, of the desired signal, and we would still 
maintain reliable communication. 
Performance of Coded Spread Spectrum Signals 
As shown in Chapter 10 , when the transmitted information is coded by a binary lin­
ear (block or convolutional) code, the SNR at the output of a soft-decision decoder is 
increased by the coding gain, defined as 
Coding gain = Red 
(12.2.16) 
where Re is the code rate and d is the minimum Haming distance of the code. 
Therefore, the effect of the coding is to increase the jamming margin by the coding 
gain. Thus (12.2.15) may be modified as 
(PJ) = (W) 
+(CG)dB- ( Eb) 
Ps dB 
R dB 
lo dB 
12.2.3 
Two Applications of DS Spread Spectrum Signals 
(12.2.17) 
In this subsection we briefly describe the use of DS spread spectrum signals in two 
applications. First, we consider an application in which the signal is transmitted at 
very low power, so that a listener would encounter great difficulty in trying to detect the 
presence of the signal. A second application is multiple-access radio communications. 
Low-Detectability Signal Transmission 
In this application the information-bearing signal is transmitted at a very low power 
level relative to the background channel noise and thermal noise that are generated in 
the front end of a receiver. If the DS spread spectrum signal occupies a bandwidth W 
and the power spectral density of the additive noise is No watts/hertz, the average noise 
power in the bandwidth Wis PN = WNo. 
The average received signal power at the intended receiver is PR. If we wish to hide 
the presence of the signal from receivers that are in the vicinity of the intended receiver, 
the signal is transmitted at a power level such that PR I PN « 1. The intended receiver 
can recover the weak information-bearing signal from the background noise with the 
aid of the processing gain and the coding gain. However, any other receiver that has 
no knowledge of the PN code sequence is unable to take advantage of the processing 
gain and the coding gain. Consequently, the presence of the information-bearing signal 
is difficult to detect. We say that the transmitted signal has a low probability of being 
intercepted (LPI), and it is called an LP! signal. 
The probability of error given in Section 12.2.2 applies as well to the demodulation 
and decoding of LPI signals at the intended receiver. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

546 
CHAPTER 12. SPREAD SPECTRUM COMMUNICATION SYSTEMS 
--li!!il;tyiltj#lij;te]:)!#j@I 
Illustrative Problem 12.2 [DS Spread Spectrum System Design] A DS spread spec­
trum signal is to be designed such that the power ratio at the intended receiver is 
PRIPN = 0.01 for an AWGN channel. The desired value of Eb/No is for accept­
able performance. Determine the minimum value of the processing gain required to 
achieve an Eb I No of 10. 
We may write Eb/No as 
Eb = PRTb = PRLeTe = ( ) Le= ( PR) Le 
No 
No 
No 
WNo 
PN 
(12.2.18) 
Because Eb/ No = 10 and PR/ PN = 10-2, it follows that the necessary processing gain 
is Le= 1000. 
Code Division Multiple Access 
The enhancement in performance obtained from a DS spread spectrum signal through 
the processing gain and the coding gain can be used to enable many DS spread spectrum 
signals to occupy the same channel bandwidth, provided that each signal has its own 
pseudorandom (signature) sequence. Thus it is possible to have several users trans­
mit messages simultaneously over the same channel bandwidth. This type of digital 
communication, in which each transmitter/receiver user pair has its own distinct signa­
ture code for transmitting over a common channel bandwidth, is called code division 
multiple access (CDMA). 
In digital cellular communications, a base station transmits signals to Nu mobile 
receivers using Nu orthogonal PN sequences, one for each intended receiver. These 
Nu signals are perfectly synchronized at transmission, so that they arrive at each mo­
bile receiver in synchronism. Consequently, due to the orthogonality of the Nu PN 
sequences, each intended receiver can demodulate its own signal without interference 
from the other transmitted signals that share the same bandwidth. However, this type 
of synchronism cannot be maintained in the signals transmitted from the mobile trans­
mitters to the base station (the uplink, or reverse link). In the demodulation of each 
DS spread spectrum signal at the base station, the signals from the other simultaneous 
users of the channel appear as additive interference. Let us determine the number of 
simultaneous signals that can be accommodated in a CDMA system. We assume that 
all signals have identical average powers at the base station. In many practical systems 
the received signal's power level from each user is monitored at the base station, and 
power control is exercised over all simultaneous users by use of a control channel that 
instructs the users on whether to increase or decrease their power levels. With such 
power control, if there are Nu simultaneous users, the desired signal-to-noise interfer­
ence power ratio at a given receiver is 
Ps 
Ps 
PN 
(Nu -l)Ps 
1 
(12.2.19) 
Nu -1 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

12.2. DIRECT-SEQUENCE SPREAD SPECTRUM SYSTEMS 
547 
From this relation we can determine the number of users that can be accommodated 
simultaneously. 
In determining the maximum number of simultaneous users of the channel, we 
implicitly assumed that the pseudorandom code sequences used by the various users 
are orthogonal and that the interference from other users adds on a power basis only. 
However, orthogonality of the pseudorandom sequences among the Nu users generally 
is difficult to achieve, especially if Nu is large. In fact, the design of a large set of 
pseudorandom sequences with good correlation properties is an important problem that 
has received considerable attention in the technical literature. We briefly treat this 
problem in Section 12.3. 
---tl!Qii;Mil+)j;r•]:Jl@@·I---------
Illustrative Problem 12.3 [Maximum Number of Users in CDMA] Suppose that 
the desired level of performance for a user in a CDMA system is achieved when 
Eb I Jo = 10. Determine the maximum number of simultaneous users that can be ac­
commodated in the CDMA system if the bandwidth-to-bit-rate ratio is 100 and the 
coding gain is 6 dB. 
From the basic relationship given in (12.2.17), we have 
Consequently, 
and, hence, 
(PN) 
= ( w) 
+(CG)aB- ( Eb) 
k 
@ 
R 
@ 
k 
@ 
= 20 + 6 - 10 = 16 dB 
1 
Nu -1 
Nu= 41 users 
1 
40 
---tl!li-ii;@irij;t•]:Jl@@I 
Illustrative Problem 12.4 [DS Spread Spectrum Simulation] The objective of this 
problem is to demonstrate the effectiveness of a DS spread spectrum signal in sup­
pressing sinusoidal interference via Monte Carlo simulation. The block diagram of the 
system to be simulated is illustrated in Figure 12.5. 
A uniform random number generator (RNG) is used to generate a sequence of bi­
nary information symbols ( ± 1). Each information bit is repeated Le times, where Le 
corresponds to the number of PN chips per information bit. The resulting sequence, 
which contains Le repetitions per bit, is multiplied by a PN sequence c(n) generated 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

548 
CHAPTER 12. SPREAD SPECTRUM COMMUNICATION SYSTEMS 
Uniform 
RNG 
5-__, Data {±1} 
Repeat 
Le times 
Uniform 
RNG 
(PN sequence) 
Sinusoidal 
generator 
L 
L 
n=I 
Detector 
Compare 
Output 
--------- 
decision 
Error 
counter 
Figure 12.5: Model of DS spread spectrum system for Monte Carlo simulation 
by another uniform RNG. To this product sequence we add white Gaussian noise with 
variance u2 
= No/2 and sinusoidal interference of the form 
i(n) 
= Asinwon 
where 0 < wo < TT and the amplitude of the sinusoid is selected to satisfy A < Le. The 
demodulator performs the cross-correlation with the PN sequence and sums (integrates) 
the blocks of Le signal samples that constitute each information bit. The output of the 
summer is fed to the detector, which compares this signal with the threshold of zero 
and decides on whether the transmitted bit is + 1 or -1. The error counter counts the 
number of errors made by the detector. 
The results of the Monte Carlo simulation 
are shown in Figure 12.6 for three different values of the amplitude of the sinusoidal 
interference with Le = 20. Also shown in Figure 12.6 is the measured error rate when 
the sinusoidal interference is removed. The variance of the additive noise was kept 
fixed in these simulations and the level of the desired signal was scaled to achieve the 
desired SNR for each simulation run. The MATLAB scripts for the simulation program 
are given next. 
---tl&li" ---------------
% MATLAB script for Illustrative Problem 12 .4 . 
echo on 
Lc=20; 
A1=3; 
A2=7; 
A3=12; 
A4=0; 
w0=1; 
SNRindB=0:2:30; 
% number of chips per bit 
% amplitude of the first sinusoidal interference 
% amplitude of the second sinusoidal interference 
% amplitude of the third sinusoidal interference 
% fourth case: no interference 
% frequency of the sinusoidal interference in radians 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

12.2. DIRECT-SEQUENCE SPREAD SPECTRUM SYSTEMS 
549 
10-1 
10-2 
=0 
10-4'--'--t>t--'--'-t"'--'-t'i--' 
0 
5 
10 
15 
SNR in dB 
20 
25 
30 
Figure 12.6: Error rate performance of the system from the Monte Carlo simulation 
for i=1 :length(SNRindB), 
end; 
% measured error rates 
smld_err_prbl(i)=ss_Pe94(SNRindB(i),Lc,Al,wO); 
smld_err _ prb2(i)=ss_Pe94(SNRindB (i) ,Lc,A2, wO); 
smld_err_prb3(i)=ss_Pe94(SNRindB(i),Lc,A3,wO); 
echo off 
echo on ; 
SNRindB4=0:1 :8; 
for i=1 :length(SNRindB4), 
end; 
% measured error rate when there is no interference 
smld_err _ prb4(i)=ss_Pe94(SNRindB4(i) ,Lc,A4, wO); 
echo off 
echo on ; 
% Plotting commands follow. 
---®Ii" ----------------
function [p]=ss_Pe94(snLin_dB, Le, A, wO) 
% [p]=ss.Pe94(snr_in...dB, Le, A, wO) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

550 
CHAPTER 12. SPREAD SPECTRUM COMMUNICATION SYSTEMS 
% 
SS_p£94 
finds the measured error rate. The function 
% 
that returns the measured probability of error for the given value of 
% 
the snr ..in_dB, Le, A and wO. 
snr= 1 0" ( snr _in_dB/1 0); 
sgma=1; 
Eb=2*sgma"2*snr; 
% Noise standard deviation is fixed. 
% signal level required to achieve the given 
% signal-to-noise ratio 
E_chip=Eb/Lc; 
% energy per chip 
N=10000; 
% number of bits transmitted 
% The generation of the data, noise, interference, decoding process and error 
% counting is performed all together in order to decrease the run time of the 
% program. This is accomplished by avoiding very large sized vectors. 
num_of_err=O; 
for i=1 :N, 
% Generate the next data bit. 
temp=rand; 
if (temp<0.5), 
data=-1; 
else 
data=1; 
end; 
% Repeat it Le times, i.e. divide it into chips. 
for j=1 :Le, 
repeated_ dataU)=data; 
end; 
% pn sequence for the duration of the bit is generated next 
for j=1 :Le, 
temp=rand; 
if (temp<0.5), 
pn_seqU)=-1; 
else 
pn_seqU)=1; 
end; 
end; 
% the transmitted signal is 
trans_sig=sqrt(E_chip) *repeated_ data. *pn_ seq; 
% AWGN with variance sgma "2 
noise=sgma*randn(1,Lc); 
% interference 
n=(i-1)*Lc+1 :i*Lc; 
interference=A *sin(wO*n); 
% received signal 
rec_sig=trans_sig+noise+interference; 
% Determine the decision variable from the received signal. 
temp=rec_sig. *pn_seq; 
decision_ variable=sum( temp); 
% making decision 
if (decision_ variable<O), 
decision=-1 ; 
else 
decision=1; 
end; 
% If it is an error, increment the error counter. 
if (decision -=data), 
num_oLerr=num_oLerr+ 1 ; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

12.3. GENERATION OF PN SEQUENCES 
end; 
end; 
% then the measured error probability is 
p=num_oLerr/N; 
12.3 
Generation of PN Sequences 
551 
A PN sequence is a code sequence of l's and O's whose autocorrelation has properties 
similar to those of white noise. In this section, we briefly describe the construction of 
some PN sequences and their autocorrelation and cross-correlation properties. 
By far, the most widely known binary PN code sequences are the maximum-length 
shift-register sequences. A maximum-length shift-register sequence, or m-sequence 
for short, has a length L = zm - 1 bits and is generated by an m-stage shift register 
with linear feedback, as illustrated in Figure 12.7. The sequence is periodic with period 
L. Each period has a sequence of zm-l ones and zm-l - 1 zeros. Table 12.1 lists the 
shift-register connections for generating maximum-length sequences. 
Output 
)-----m stages----- 
2 
m-1 
m 
Figure 12.7: General m-stage shift register with linear feedback 
In DS spread spectrum applications, the binary sequence with elements {0, 1} is 
mapped into a corresponding binary sequence with elements { -1, 1}. We shall call the 
equivalent sequence { Cn} with elements { -1, 1} a bipolar sequence. 
An important characteristic of a periodic PN sequence is its autocorrelation func­
tion, which is usually defined in terms of the bipolar sequences { Cn} as 
L 
Rc(m) = L CnCn+m. 
n=l 
OFmFL-l 
(12.3.1) 
where L is the period of the sequence. Because the sequence {en} is periodic with 
period L, the autocorrelation sequence {Re ( m)} is also periodic with period L. 
Ideally, a PN sequence should have an autocorrelation function that has correlation 
properties similar to those of white noise. That is, the ideal autocorrelation sequence 
for { Cn} is Re ( 0) = L and Re ( m) = 0 for 1 F m F L - 1. In the case of m-sequences, 
the autocorrelation sequence is 
Re(m) = {L, 
-1, 
m=O 
lFmFL- 1 
(12.3.2) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

552 
CHAPTER 12. SPREAD SPECTRUM COMMUNICATION SYSTEMS 
Stages Connected 
Stages Connected 
Stages Connected 
m 
to Modulo-2 Adder 
m 
to Modulo-2 Adder 
m 
to Modulo-2 Adder 
2 
1, 2 
13 
1, 10, 11, 13 
24 
1,18,23,24 
3 
1, 3 
14 
1,5,9,14 
25 
1, 23 
4 
1, 4 
15 
1, 15 
26 
1, 21, 25, 26 
5 
1, 4 
16 
1, 5, 14, 16 
27 
1,23,26,27 
6 
1, 6 
17 
1, 15 
28 
1, 26 
7 
1, 7 
18 
1,12 
29 
1, 28 
8 
1, 5, 6, 7 
19 
1, 15, 18, 19 
30 
1,8,29,30 
9 
1, 6 
20 
1, 18 
31 
1, 29 
10 
1, 8 
21 
1, 20 
32 
1, 11,31,32 
11 
1, 10 
22 
1, 22 
33 
1, 21 
12 
1,7,9,12 
23 
1,19 
34 
1,8,33,34 
Table 12.1: Shift-register connections for generating maximum-length sequences 
For long m-sequences, the size of the off-peak values of Re ( m) relative to the peak 
value Rc(O)-that is, the ratio Rc(m)/Rc(O) = -1/L-is small and, from a practi­
cal viewpoint, inconsequential. Therefore, m-sequences are very close to ideal PN 
sequences when viewed in terms of their autocorrelation function. 
-til!IJ§li;ft)iW§lj;t•]:Jl@®I 
Illustrative Problem 12.5 [Detection of an LPI Signal] 
An LPI signal is generated by binary modulation of an m-sequence from a 10-stage 
shift register, (L = 1023) and, hence, the number of chips per information bit is 1023. 
The output of the shift register is mapped into the bipolar sequence 
Ck= {
1 
-1 
if the shift register output is a 1 
if the shift register output is a 0 
The transmitted sequence of chips is corrupted by AWGN, so the received signal se­
quence at the output of the chip matched filter is 
rk = sck + nk. 
k = 1, 2, ... , 1023 
where the binary data bit s is either + 1 or -1, for the entire sequence 0  k  102 3. 
1. Generate them-sequence {ck} and verify Equation (12.3.2) is satisfied. 
2. Use them-sequence generated in part 1 to construct the received signal sequence 
{rk} and plot it fork= 1, 2, ... , 1023, when the variance of the Gaussian noise 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

12.3. GENERATION OF PN SEQUENCES 
553 
samples is a2 
= 10. Is the transmitted signal sequence Xk = SCk, 1 :'.S: k :'.S: 1023 
discernable in { rk} ? 
3. Compute the cross-correlation of { rk} with {Ck} and plot the result 
n 
Yn 
= I YkCk, 
n 
= 1, 2, ... , 1023 
k=l 
Comment on the result of this correlator output. 
Figure 12.8 illustrates the result of this crosscorrelation of {rd with {ck}. Although 
the signal component is not observable in the high-level noise, the signal is clearly 
detectable at the output of the correlator. 
10 
8 
1000 
6 
900 
4 
800 
700 
2 
600 
 
0 
,,; 500 
-2 
400 
-4 
300 
-6 
200 
-8 
100 
-10 
0 
200 
400 
600 
800 
1000 
0 
200 
400 
600 
800 
1000 
k 
n 
Figure 12.8: The cross-correlation in Illustrative Problem 12.5 
The MATLAB script for the problem is given below. 
---ii" ---------------
% MATLAB script /oar Illustrative Problem 9 .5 
N = 1000; 
% Number of samples 
M = 50; 
% Length of the autocorrelation function 
p = [0.9 0.99]; 
% Pole positions 
w = 1/sqrt(2)*(randn(1,N} + 1 i*randn(1,N}}; % AWGN sequence 
% Preallocation for speed: 
c = zeros(length(p},N}; 
Rx = zeros(length(p},M+1); 
Sx = zeros(length(p},M+ 1 ); 
for i = 1 :length(p) 
for n = 3:N 
c(i,n) = 2*p(i)*c(n-1) - power(p(i),2)*c(n-2) + power((1-p(i)),2)*w(n); 
end 
% Calculation of autocorrelations and power spectra: 
Rx(i,:) = Rx_est(c(i,:),M); 
Sx(i, :}=fftshift(abs(fft(Rx(i, :) ) ) ) ; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

554 
CHAPTER 12. SPREAD SPECTRUM COMMUNICATION SYSTEMS 
end 
% Plot the results: 
subplot(3,2, 1) 
plot(real(c(1,:})) 
axis([O N -max(abs(real(c(1,:)))) max(abs(real(c(1,:))))]) 
title( ' \it { p} 
= 0 • 9 ' ) 
xlabel( ' \it { n} ' ) 
ylabel(' \it { c _ { nr} } ') 
subplot(3,2,2) 
plot(real(c(2, :))) 
axis([O N -max(abs(real(c(2,:)))) max(abs(real(c(2,:))))]) 
title( ' \it { p} 
= 0 • 9 9 ' ) 
xlabel(' \i t{n} ') 
ylabel(' \it{ c_ {nr}} ') 
subplot(3,2,3) 
plot(imag(c(1,:))) 
axis([O N -max(abs(imag(c(1,:))}) max(abs(imag(c(1,:})))]) 
title(' \it { p} 
= 0 • 9 ') 
xlabel(' \i t{n} ') 
ylabel(' \i t{c_{ni}} ') 
subplot(3,2,4) 
plot(imag(c(2, :))) 
axis([O N -max(abs(imag(c(2,:)))) max(abs(imag(c(2,:))))]) 
title(' \it { p} 
= 0 • 9 9 ') 
xlabel(' \i t{n} ') 
ylabel(' \i t{c_{ni}} ') 
subplot(3,2,5) 
plot(abs(c(1,:))) 
axis([O N 0 max(abs(c(1,:}})]) 
title(' \it { p} 
= 0 . 9 ') 
xlabel(' \i t{n} ') 
ylabel(' \it { I c _ n I } ') 
subplot(3,2,6) 
plot(abs(c(2, :))) 
axis([O N 0 max(abs(c(2,:)))]) 
title(' \it { p} 
= 0 • 9 9 ') 
xlabel(' \i t{n} ') 
ylabel(' \it { I c _ n I } ') 
figure 
subplot(2,2, 1) 
plot(abs(Rx(1, :))) 
axis([O M 0 max(abs(Rx(1,:)))]) 
title(' \it { p} 
= 0 • 9 ') 
xlabel(' \it { n} '); ylabel(' \it { IR_ { c }( n) I } ') 
subplot(2,2,2) 
plot(abs(Rx(2, :))) 
title(' \it { p} 
= 0 • 9 9 ') 
xlabel(' \i t{n} '); ylabel(' \it{ IR_ { c}( n) I}') 
axis([O M 0 max(abs(Rx(2,:)))]) 
subplot(2,2,3) 
plot(Sx(1, :)) 
title( ' \it { p} 
= 0 • 9 ' ) 
xlabel(' \it{f} '); ylabel(' \i t{S_ { c} ( f)} ') 
axis([O M 0 max(abs(Sx(1,:)))]) 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

12.3. GENERATION OF PN SEQUENCES 
m-sequences 
Gold sequences 
m 
L 
= 2m-1 
Number 
Rmax 
Rmax/R(O) 
Rmax 
Rmax/R(O) 
3 
7 
2 
5 
0.71 
5 
0.71 
4 
15 
2 
9 
0.60 
9 
0.60 
5 
31 
6 
11 
0.35 
9 
0.29 
6 
63 
6 
23 
0.36 
17 
0.27 
7 
127 
18 
41 
0.32 
17 
0.13 
8 
255 
16 
95 
0.37 
33 
0.13 
9 
511 
48 
113 
0.22 
33 
0.06 
10 
1023 
60 
383 
0.37 
65 
0.06 
11 
2047 
176 
287 
0.14 
65 
0.03 
12 
4095 
144 
1407 
0.34 
129 
0.03 
Table 12.2: Peak cross-correlations of m-sequences and Gold sequences 
subplot(2,2,4) 
plot(Sx(2, :) ) 
title( ' \it { p} 
= O • 9 9 ' ) 
xlabel( ' \it { f} '); ylabel(' \it { s _ { c} ( f ) } ' ) 
axis([O M 0 max(abs(Sx(2,:)))]) 
555 
In some applications the cross-correlation properties of PN sequences are as im­
portant as the autocorrelation properties. For example, in CDMA each user is assigned 
a particular PN sequence. Ideally, the PN sequences among users should be mutually 
orthogonal so that the level of interference experienced by one user from transmissions 
of other users is zero. However, the PN sequences used in practice by different users 
exhibit some correlation. 
To be specific, let us consider the class of m-sequences. It is known that the peri­
odic cross-correlation function between a pair of m-sequences of the same period can 
have relatively large peaks. Table 12.2 lists the peak magnitude Rmax for the periodic 
cross-correlation between pairs of m-sequences for 3 :s; m :s; 12. Also listed in Table 
12.2 is the number of m-sequences of length L 
= zm - 1for3 :s; m :s; 12. We observe 
that the number of m-sequences of length L increases rapidly with m. We also observe 
that, for most sequences, the peak magnitude Rmax of the cross-correlation function is 
a large percentage of the peak value of the autocorrelation function. Consequently, m­
sequences are not suitable for CDMA communication systems. Although it is possible 
to select a small subset of m-sequences that have relatively smaller cross-correlation 
peak values than Rmax, the number of sequences in the set is usually too small for 
CDMA applications. 
Methods for generating PN sequences with better periodic cross-correlation prop­
erties than m-sequences have been developed by Gold (1967), Gold (1968) and by 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

556 
CHAPTER 12. SPREAD SPECTRUM COMMUNICATION SYSTEMS 
Figure 12.9: Generation of Gold sequences of length 31 
Kasami ( 1966). Gold sequences are constructed by taking a pair of specially selected 
m-sequences, called preferred m-sequences, and forming the modulo-2 sum of the two 
sequences for each of L cyclically shifted versions of one sequence relative to the other 
sequence. Thus L Gold sequences are generated, as illustrated in Figure 12.9. For large 
L and m odd, the maximum value of the cross-correlation function between any pair 
of Gold sequences is Rmax = J2[. Form even, Rmax = .JI. 
Kasami ( 1966) described a method for constructing PN sequences by decimating 
an m-sequence. In Kasami's method of construction, every (2m/Z + l) st bit of an m­
sequence is selected. This method of construction yields a smaller set of PN sequences 
compared with Gold sequences, but their maximum cross-correlation value is Rmax = 
Jr. 
It is interesting to compare the peak value of the cross-correlation function for Gold 
sequences and for Kasami sequences with a known lower bound, due to Welch (1974), 
for the maximum cross-correlation between any pair of binary sequences of length L. 
Given a set of N sequences of period L, the Welch lower bound on their maximum 
cross-correlation is 
(N=-1 
RmaxL\j 
(12.3.3) 
which, for large values of L and N, is well approximated as Rmax  .JI. Hence, we 
observe that Kasami sequences satisfy the lower bound and, hence, they are optimal. 
On the other hand, Gold sequences with m odd have Rmax = J2[. Hence, they are 
slightly suboptimal. 
Besides the well-known Gold sequences and Kasami sequences, there are other 
binary sequences that are appropriate for CDMA applications. The interested reader is 
referred to the papers by Scholtz (1979) and by Sarwate and Pursley (1980). 
--li!!ii;MiW§lij;t•):J!@l·I---------
Illustrative Problem 12.6 [Generation of Gold Sequences] Generate the L 
= 
31 
Gold sequences that result from taking the modulo-2 sum of the two shift-register out­
puts shown in Figure 12.9. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

12.3. GENERATION OF PN SEQUENCES 
557 
The MATLAB scripts for performing this computation are given next. 
The 31 se­
quences generated are shown in Table 12.3. The maximum value of the cross-correlation 
for these sequences is Rmax = 9. 
---tl®li" ---------------
% MATLAB script for Illustrative Problem 12.6. 
echo on 
% First determine the maximal length shift-register sequences. 
% Assume the initial shift-register content as "00001 ". 
connections1=[1 0 1 0 OJ: 
connections2=[1 1 1 0 1 ); 
sequence 1 =ss_mlsrs( connections 1); 
sequence2=ss_mlsrs( connections2); 
% Cyclically shift the second sequence and add it to the first one. 
L=2 "length( connections 1 )-1 : 
for shifLamount=O:L-1, 
temp=[ sequence2(shift_ amount+ 1 :L) sequence2( 1 :shift_ amount)]: 
gold_seq(shift_amount+ 1,:)=(sequencel +temp) - fioor((sequencel +temp)./2).*2; 
echo off ; 
end; 
echo on : 
% Find the max value of the cross-correlation for these sequences. 
max_cross_corr=O: 
for i=1 :L-1, 
for j=i+ 1 :L, 
% equivalent sequences 
c1=2*gold_seq(i, :)-1: 
c2=2*gold_seq(j, :)-1; 
for m=O:L-1, 
shifted_c2=[c2(m+1 :L) c2(1 :m)]; 
corr=abs(sum( c 1. * shifted_c2)); 
end; 
end; 
end; 
if (corr>max_cross_corr), 
max_cross_corr=corr 
end; 
echo off 
% Note that max_cross_correlation turns out to be 9 in this example. 
---tl®li" ----------------
function [ seq]=ss_mlsrs( connections); 
% [ seq]=ss_mlsrs( connections) 
% 
SS..MLSRS 
generates the maximal length shift-register sequence when the 
% 
shift-register connections are given as input to the function. A "zero" 
% 
means not connected, whereas a "one" represents a connection. 
m=length( connections); 
L=2"m-1; 
% length of the shift register sequence requested 
registers=[zeros(1,m-1) 1 ]; 
% initial register contents 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

558 
CHAPTER 12. SPREAD SPECTRUM COMMUNICATION SYSTEMS 
0111000010000110010010111100000 
0101101110001000001001000110001 
0000110110010100111110110010011 
1010000110101101010001011010111 
111110 0 1110 111100 0 1110 00 10 11110 
0100100100111000110000101001100 
0010100011110101001101101101001 
1110101101101110110111100100011 
0110110001011001000011110110110 
0110001000110110101011010011101 
0111111011101001111010011001011 
0100011101010111011000001100111 
0011010000101010011100100111111 
1101001011010000010101110001111 
0001111100100100000111011101110 
1000010011001100100010000101101 
1011001100011101101000110101010 
1 1 0 1 1 1 0 0 1 0 1 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 0 1 0 0 
0000001111111011010110010111000 
1011110101110010000000010000001 
1100000001100000101100011110010 
0011101001000101110100000010100 
1100111000001111000100111011001 
0010011010011010100101001000010 
1 1 1 1 0 1 1 1 1 0 1 1 0 0 0 1 1 0 0 1 1 0 1 0 1 1 1 0 1 0 1 
0101010111100111100001100011010 
0001000101001011101111111000101 
1001100000010011110011001111011 
1000101010100011001010100000110 
1 0 1 0 1 1 1 1 1 1 0 0 0 0 1 0 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 
1110010100000001011111000001000 
Table 12.3: Table of Gold sequences in Illustrative Problem 12.6 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

12.4. FREQUENCY-HOPPED SPREAD SPECTRUM 
seq(1 )=registers(m); 
% first element of the sequence 
for i=2:L, 
new _reg_cont(1 )=connections(1 )*seq(i-1); 
for j=2:m, 
new _reg_cont(j)=registersU-1 )+connectionsU) *seq (i -1 ) ; 
end; 
registers=new _reg_cont; 
seq(i)=registers(m); 
end; 
% current register contents 
% the next element of the sequence 
12.4 
Frequency-Hopped Spread Spectrum 
559 
In frequency-hopped (FH) spread spectrum the available channel bandwidth W is sub­
divided into a large number of nonoverlapping frequency slots. In any signaling interval 
the transmitted signal occupies one or more of the available frequency slots. The selec­
tion of the frequency slot(s) in each signal interval is made pseudorandomly according 
to the output from a PN generator. 
A block diagram of the transmitter and receiver for a FH spread spectrum system 
is shown in Figure 12.10. The modulation is either binary or M-ary FSK (MFSK). For 
example, if binary FSK is employed, the modulator selects one of two frequencies, say, 
f o or Ji , corresponding to the transmission of a 0 or a 1. The resulting binary FSK 
signal is translated in frequency by an amount that is determined by the output sequence 
from a PN generator, which is used to select a frequency fc that is synthesized by the 
frequency synthesizer. This frequency-translated signal is transmitted over the channel. 
For example, by taking m bits from the PN generator, we may specify 2m - 1 possible 
carrier frequencies. Figure 12.11 illustrates a FH signal pattern. 
At the receiver, there is an identical PN sequence generator, synchronized with 
the received signal, which is used to control the output of the frequency synthesizer. 
Thus, the pseudorandom frequency translation introduced at the transmitter is removed 
Information 
sequence 
PN sequence 
generator 
PN sequence 
generator 
Encoder 
Mixer 
Frequency 
synthesizer 
FSK 
modulator 
Frequency 
synthesizer 
Mixer 
FSK 
demodulator 
Time 
synchronizer 
Channel 
Decoder 
1---;.,._ Output 
Figure 12.10: Block diagram of a FH spread spectrum system 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

560 
CHAPTER 12. SPREAD SPECTRUM COMMUNICATION SYSTEMS 
3 
6 
2 
5 
4 
Time interval 
Figure 12 .11: An example of a FH pattern 
at the demodulator by mixing the synthesizer output with the received signal. The 
resultant signal is then demodulated by means of an FSK demodulator. A signal for 
maintaining synchronism of the PN sequence generator with the FH received signal is 
usually extracted from the received signal. 
Although binary PSK modulation generally yields better performance than binary 
FSK, it is difficult to maintain phase coherence in the synthesis of the frequencies used 
in the hopping pattern and, also, in the propagation of the signal over the channel as the 
signal is hopped from one frequency to another over a wide bandwidth. Consequently, 
FSK modulation with noncoherent demodulation is usually employed in FH spread 
spectrum systems. 
The frequency-hopping rate, denoted as Rh, may be selected to be equal to the 
symbol rate, lower than the symbol rate, or higher than the symbol rate. If Rh is equal 
to or lower than the symbol rate, the FH system is called a slow-hopping system. If Rh 
is higher than the symbol rate-that is, there are multiple hops per symbol-the FH 
system is called a fast-hopping system. We shall consider only a hopping rate equal to 
the symbol rate. 
12.4.1 
Probability of Error for FH Signals 
Let us consider a FH system in which binary FSK is used to transmit the digital infor­
mation. The hop rate is 1 hop per bit. The demodulation and detection are noncoherent. 
In an AWGN channel, the probability of error of such a system is 
pb 
= .!e-Ebf2No 
2 
(12.4.1) 
The same result applies if the interference is a broadband signal or jammer with flat 
spectrum that covers the entire FH band of width W. In such a case, No is replaced by 
No +Jo, where Jo is the spectral density of the interference, 
As in the case of a DS spread spectrum system, we observe that Eb, the energy per 
bit, can be expressed as Eb 
= PsTb 
= Ps/R, where Psis the average signal power 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

12.4. FREQUENCY-HOPPED SPREAD SPECTRUM 
561 
and R is the bit rate. Similarly, Jo 
= P1/W, where P1 is the average power of the 
broadband interference and W is the available channel bandwidth. Therefore, assuming 
that Jo »No, we can express the SNR as 
Eb 
W/R 
----
lo 
P1/Ps 
(12.4.2) 
where W / R is the processing gain and P1 / Ps is the jamming margin for the FH spread 
spectrum signal. 
Slow FH spread spectrum systems are particularly vulnerable to a partial-band in­
terference that may result either from intentional jamming or in FH CDMA systems. 
To be specific, suppose that the partial-band interference is modeled as a zero-mean 
Gaussian random process with a flat power spectral density over a fraction of the total 
bandwidth W and zero in the remainder of the frequency band. In the region or re­
gions where the power spectral density is nonzero, its value is S1(f) 
= lo/<X, where 
0 < <X  1. In other words, the interference average power P1 is assumed to be con­
stant, and <X is the fraction of the frequency band occupied by the interference. 
Suppose that the partial-band interference comes from a jammer that selects <X to 
optimize the effect on the communications system. In an uncoded slow-hopping system 
with binary FSK modulation and non coherent detection, the transmitted frequencies are 
selected with uniform probability in the frequency band W. Consequently, the received 
signal will be jammed with probability <X, and it will not be jammed with probability 
1 - <X. When it is jammed, the probability of error is 1/2 exp ( - <XPb I 2), and when it is 
not jammed, the detection of the signal is assumed to be error free, where Pb = Eb I Jo. 
Therefore, the average probability of error is 
(12.4.3) 
Figure 12.12 illustrates the error rate as a function of the SNR Pb for several values 
of <X. The jammer is assumed to optimize its strategy by selecting <X to maximize 
the probability of error. By differentiating Pz (ex) and solving for the value of ex that 
maximizes Pz ( cx), we find that the jammer's best choice of cx is 
ex* 
= {2/ Pb, 
1, 
Pb< 2 
Pb< 2 
The corresponding error probability for the worst-case partial-band jamer is 
Pb= 2 
Pb< 2 
(12.4.4) 
(12.4.5) 
which is also shown in Figure 12.12. Whereas the error probability decreases exponen­
tially for full-band jamming, as given by (12.4.3), the error probability for worst-case 
partial-band jamming decreases only inversely with Eb/ Jo. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

562 
CHAPTER 12. SPREAD SPECTRUM COMMUNICATION SYSTEMS 
100 
5 
2 
10-1 
5 
... 
5 
2 
.<;:: 
10-2 
,D 
5 
4-< 
0 
.:s 
2 
 10-3 
,D 
 
5 
2 
10-4 
5 
2 
10-5 
0 
' ' ',Worst-case partial-band jarmning 
' 
' 
 
a=0.01 
5 
10 
15 
20 
25 
30 
35 
SNR/bit, dB 
Figure 12.12: Performance of binary FSK with partial-band interference 
Illustrative Problem 12.7 [FH System Simulation] Via Monte Carlo simulation, 
demonstrate the performance of an FH digital communication system that employs bi­
nary FSK and is corrupted by worst-case partial-band interference. The block diagram 
of the system to be simulated is shown in Figure 12.13. 
A uniform random number generator (RNG) is used to generate a binary information 
sequence, which is the input to the FSK modulator. The output of the FSK modulator is 
corrupted by additive Gaussian noise with probability ex, where 0 < ex :-s; 1. A second 
uniform RNG is used to determine when the additive Gaussian noise corrupts the signal 
and when it does not. In the presence of noise, the input to the detector, assuming that 
a 0 is transmitted, is 
r1 
= ( -JEb cos cf> + nc) 
2 
+ ( ffh sin cf> + n5) 
2 
2 
2 
r2 
= n2c + n2s 
where cf> represents the channel phase shift and n le, n Is, n2c, n2s represent the addi­
tive noise components. In the absence of noise, we have 
r2 
= 0 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

12.4. FREQUENCY-HOPPED SPREAD SPECTRUM 
Uniform 
RNG 
Data 1 
Binary 
FSK 
Uniform 
RNG 
Gaussian 
RNG 
Gaussian 
RNG 
Gaussian 
RNG 
1-----+1---+---+--t 
modulator ,_ 
___________ ., + 1---+--< 
1-----------<M + 
563 
Detector 
Compare 
Output 
---------- 
decision 
Error 
counter 
Figure 12.13: Model of a binary FSK system with partial-band interference for the 
Monte Carlo simulation 
and, hence, no errors occur at the detector. The variance of each of the noise com­
ponents is cr2 = ex]o/2, where ex is given by (12.4.4). For simplicity, we may set 
</> = 0 and normalize Jo by setting it equal to unity. Then Pb =Eb/ Jo =Eb. Because 
cr2 = Jo/2ex and ex= 2/pb, it follows that, in the presence of partial-band interfer­
ence, cr2 = Eb/4 and ex = 2/Eb, where Eb is constrained to Eb & 2. Figure 12.14 
illustrates the error rate that results from the Monte Carlo simulation. Also shown in 
the figure is the theoretical value of the probability of error given by ( 12 .4 .5). 
The MATLAB scripts for the simulation program are given next. 
---tl®li" ----------------
% MATLAB script for Illustrative Problem 12.7. 
echo on 
rho_bl=0:5:35; 
rho_b2=0:0.1 :35; 
for i=1 :length(rho_bl), 
smld_err _prb(i)=ss_pe96(rho_b 1 (i)); 
echo off ; 
end; 
echo on ; 
for i=1 :length(rho_b2), 
temp=10 A (rho_b2(i)/10); 
if (temp>2) 
theo_err_rate(i)=1 /(exp(1 )*temp); 
else 
% rho in dB for the simulated error rate 
% rho in dB for theoretical error rate computation 
% simulated error rate 
% theoretical error rate if rho>2 
theo_err_rate(i)=(1/2)*exp(-temp/2);% theoretical error rate if rho<2 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

564 
CHAPTER 12. SPREAD SPECTRUM COMMUNICATION SYSTEMS 
104	----------- 
0 
5 
10 
15 
20 
25 
30 
35 
Figure 12.14: Error-rate performance of FH binary FSK system with partial-band 
interference-Monte Carlo simulation 
end; 
echo off ; 
end; 
echo on ; 
% Plotting commands follow. 
---41®'"' ----------------
function [p]=ss_Pe96(rho_in_dB} 
% [p]=ssYe96(rho_in...dB) 
% 
SSYE96 finds the measured error rate. The value of 
% 
signal per interference ratio in dB is given as an 
% 
input to the function. 
rho=10" (rho_in_dB/10); 
Eb=rho; 
if (rho>2), 
alpha=2/rho; 
else 
alpha=1; 
end; 
sgma=sqrt(1 /(2*alpha}}; 
N=10000; 
% generation of the data sequence 
for i=1 :N, 
temp=rand; 
if (temp<0.5} 
data(i}=1; 
% energy per bit 
% optimal alpha if rho> 2 
% optimal alpha if rho<2 
% noise standard deviation 
% number of bits transmitted 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

12.4. FREQUENCY-HOPPED SPREAD SPECTRUM 
else 
data(i)::O; 
end; 
end; 
% Find the received signals. 
for i=1 :N, 
% the transmitted signal 
if (data(i)==O), 
r lc(i)=sqrt(Eb); 
rls(i)=O; 
r2c(i)=O; 
r2s(i)=O; 
else 
rlc(i)=O; 
rls(i)=O; 
r2c(i)=sqrt(Eb); 
r2s(i)=0; 
end; 
% The received signal is found by adding noise with probability alpha. 
if (rand<alpha), 
rlc(i)=rlc(i)+gngauss(sgma); 
rls(i)=rls(i)+gngauss(sgma); 
r2c(i)=r2c(i)+gngauss( sgma); 
r2s(i)=r2s(i)+gngauss(sgma); 
end; 
end; 
% Make the decisions and count the number of errors made. 
num_oLe=O; 
for i=1 :N, 
rl=rlc(i)A2+rls(i)A2; 
% first decision variable 
r2=r2c(i)A2+r2s(i)A2; 
% second decision variable 
% Decision is made next. 
if (rl>r2), 
decis=O; 
else 
decis=1; 
end; 
% Increment the counter if this is an error. 
if (decis-=data(i)), 
num_oLerr=num_oLerr+ 1 ; 
end; 
end; 
% measured bit error rate is then 
p=num_oLerr/N; 
12.4.2 
Use of Signal Diversity to Overcome Partial-Band 
Interference 
565 
The performance of the FH system corrupted by partial-band interference as described 
in the previous section is very poor. For example, for the system to achieve an error 
probability of 10-6, the SNR required at the detector is almost 60 dB in the presence of 
worst-case interference. By comparison, in the absence of partial-band interference, the 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

566 
CHAPTER 12. SPREAD SPECTRUM COMMUNICATION SYSTEMS 
SNR required in AWGN is about 10 dB. Consequently, the loss in SNR due to the pres­
ence of the partial-band interference is approximately 50 dB, which is excessively high. 
The way to reduce the effect of partial-band interference on the FH spread spectrum 
system is through signal diversity; that is, the same information bit is transmitted on 
multiple frequency hops, and the signals from the multiple transmissions are weighed 
and combined together at the input to the detector. To be specific, suppose that each 
information bit is transmitted on two successive frequency hops. The resulting system 
is called a dual diversity system. In this case, assuming that a 0 is transmitted, either the 
two inputs to the combiner are both corrupted by interference, or one of the two trans­
mitted signals is corrupted by interference, or neither of the two transmitted signals is 
corrupted by interference. 
The combiner is assumed to know the level of the interference and, thus, forms the 
combined decision variables, 
x 
= W1 rn + wzr12 
y 
= w1 rz1 + wzrzz 
(12.4.6) 
where rn, rz 1 are the two outputs of the square-law device for the first transmitted signal 
and r12, rzz are the outputs of the square-law device from the second transmitted signal. 
The weights w1 and wz are set to 1 / u2, where u2 is the variance of the additive noise 
plus interference. Hence, when u2 is large, as would be the case when interference is 
present, the weight placed on the received signal is small. On the other hand, when u2 is 
small, as would be the case when there is no interference, the weight placed on the received 
signal is large. Thus, the combiner deemphasizes the received signal components that are 
corrupted by interference. 
The two components x and y from the combiner are fed to the detector, which 
decides in favor of the larger signal component. 
The performance of the FH signal with dual diversity is now dominated by the 
case in which both signal transmissions are corrupted by interference. However, the 
probability of this event is proportional to oc2, which is significantly smaller than oc. 
As a consequence, the probability of error for the worst-case partial-band interference 
has the form 
Pb> 2 
(12.4.7) 
where Kz is a constant and Pb 
= Eb I Jo. In this case, the probability of error for dual 
diversity decreases inversely as the square of the SNR. In other words, an increase 
in SNR by a factor of 10 (10 dB) results in a decrease of the error probability by a 
factor of 100. Consequently, an error probability of 10-6 can be achieved with an 
SNR of about 30 dB with dual diversity, compared to 60 dB (1000 times larger) for 
no diversity. 
More generally, if each information bit is transmitted on D frequency hops, where 
Dis the order of diversity, the probability of error has the form 
Pb> 2 
(12.4.8) 
where Kn is a constant. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

12.4. FREQUENCY-HOPPED SPREAD SPECTRUM 
567 
Because signal diversity as described above is a trivial form of coding (repetition 
coding), it is not surprising to observe that instead of repeating the transmission of each 
information bit D times, we may use a code with a minimum Hamming distance equal 
to D and soft-decision decoding of the outputs from the square-law devices. 
---tilli-il;fulWij;t•]:Jlil 
Illustrative Problem 12.8 [Diversity in FH Systems] Repeat the Monte Carlo simu­
lation for the FH system considered in Illustrative Problem 12 .7, but now employ dual 
diversity. 
In the absence of interference, the weight used in the combiner is set to w 
= 10, 
which corresponds to a-2 
= 0.1, a value that may be typical of the level of the additive 
Gaussian noise. On the other hand, when interference is present, the weight is set to 
w 
= l/a-2 
= 2/E, where E is constrained to be E ;;:: 4. The SNR per hop is E, and 
the total energy per bit in the two hops is Eb 
= 2E. Therefore, the error probability is 
plotted as a function of Eb I Jo. The results of the Monte Carlo simulation are illustrated 
in Figure 12.15. The MATLAB scripts for the simulation program are given next. 
Figure 12 .15: Error rate performance of FH dual diversity binary FSK with partial-band 
interference-Monte Carlo simulation 
---Iii" ---------------
% MATLAB script for Illustrative Problem 12.8. 
echo on 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

568 
CHAPTER 12. SPREAD SPECTRUM COMMUNICATION SYSTEMS 
rho_b=0:2:24; 
for i=1 :length(rho_b), 
end; 
smld_err _prb(i)=ss_Pe97 (rho_b( i)); 
echo off ; 
echo on ; 
% Plotting commands follow. 
% rho in dB 
% simulated error rate 
---tllli" ----------------
function [p ]=ss_Pe97 (rho_in_dB) 
% [p]=ss_pe97(rho_in-<1B) 
% 
ss_pE97 finds the measured error rate. The value of 
% 
signal per interference ratio in dB is given as an input 
% 
to the function. 
rho=10" (rho_in_dB/10); 
Eb=rho; 
E=Eb/2; 
% the optimal value of alpha 
if (rho>2), 
alpha=2/rho; 
else 
alpha=1; 
end; 
% the variance of the additive noise 
if (E>1), 
sgma=sqrt(E/2); 
else 
sgma=sqrt(1/2); 
end; 
N=10000; 
% generation of the data sequence 
for i=1 :N, 
temp=rand; 
if (temp<0.5) 
data(i)=1; 
else 
data(i)=O; 
end; 
end; 
% Find the transmitted signals. 
for i=1 :N, 
if ( data(i)==O), 
trl lc(i)=sqrt(E); 
tr12c(i)=sqrt(E); 
trlls(i)=O; 
trl2s(i)=0; 
tr21c(i)=0; 
tr22c(i)=O; 
tr21s(i)=O; 
tr22s(i)=O; 
else 
trl lc(i)=O; 
tr12c(i)=O; 
trlls(i)=O; 
tr12s(i)=0; 
tr21c(i)=sqrt(E); 
tr22c(i)=sqrt(E); 
tr21s(i)=O; 
tr22s(i)=O; 
end; 
end; 
% energy per information bit 
% energy per symbol transmitted 
% number of bits transmitted 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

12.4. FREQUENCY-HOPPED SPREAD SPECTRUM 
% Find the received signals, make the decisions, and count the number of errors made. 
num_oLerr=O; 
for i=1 :N, 
% determine if there is jamming 
if (rand< alpha), 
jamming1=1; 
else 
jammingl=O; 
end; 
if (rand<alpha), 
jamming2=1 ; 
else 
jamming2=0; 
end; 
% The received signals are 
if (jamming1==1) 
rl lc=trl lc(i)+gngauss(sgma); 
r21c=tr21c(i)+gngauss(sgma); 
else 
rl lc=trl lc(i); 
r21c=tr21c(i); 
end; 
rl ls=trl ls(i); 
r2ls=tr21s(i); 
if (jaming2==1) 
r12c=tr12c(i)+gngauss(sgma); 
r22c=tr22c(i)+gngauss(sgma); 
else 
r12c=tr12c(i); 
r22c=tr22c(i); 
end; 
r12s=trl2s(i); 
r22s=tr22s(i); 
% jamming present on the second transmission 
% jamming not present on the first transmission 
% jamming present on the second transmission 
% jamming not present on the second transmission 
rl ls=trl ls(i)+gngauss(sgma); 
r21s=tr2ls(i)+gngauss(sgma); 
rl2s=trl2s(i)+gngauss(sgma); 
r22s=tr22s(i)+gngauss( sgma); 
% Compute the decision variables, first the weights. 
if (jamingl==1 ), 
w1=1/sgmaA2; 
else 
w1=10; 
end; 
if (jaming2==1 ), 
w2=1/sgmaA2; 
else 
w2=10; 
end; 
% The intermediate decision variables are computed as follows. 
rll=rllcA2+rlls A2; 
rl2=rl2cA2+rl2s A2; 
r2l=r21cA2+r2ls A2; 
r22=r22c A 2+r22s A 2; 
% Finally, the resulting decision variables x and y are computed. 
x=wl*rll+w2*rl2; 
y=wl*r2l+w2*r22; 
% Make the decision. 
if (x>y), 
decis=O; 
else 
decis=1; 
end; 
569 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

570 
CHAPTER 12. SPREAD SPECTRUM COMMUNICATION SYSTEMS 
% Increment the counter if this is an error. 
if (decis-=data(i)), 
num_oLerr=num_oLerr+ 1 ; 
end; 
end; 
% The measured bit error rate is then 
p=num_oLerr/N; 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

PROBLEMS 
571 
Problems 
12.1 Write a MATLAB program to perform a Monte Carlo simulation of a DS spread 
spectrum system that transmits the information via binary PSK through an A WGN 
channel. Assume that the processing gain is 10. Plot a graph of the measured error 
rate versus the SNR and, thus, demonstrate that there is no performance gain from the 
spread spectrum signal. 
12.2 Write a MATLAB program to perform a Monte Carlo simulation of a DS spread 
spectrum system that operates in an LPI mode. The processing gain is 20 (13 dB) and 
the desired power signal-to-noise ratio Ps / PN at the receiver prior to despreading the 
signal is - 5 dB or smaller. Plot the measured error rate as a function of the SNR. 
123 Repeat the Monte Carlo simulation described in Illustrative Problem 12.4 for a 
processing gain of 10 and plot the measured error rate. 
12.4 Write a MATLAB program that implements an m 
= 12-stage maximum-length 
shift register and generate five periods of the sequence. Compute and graph the periodic 
autocorrelation function of the equivalent bipolar sequence given by (12.3.1). 
12.5 Write a MATLAB program that implements an m 
= 3-stage and an m 
= 4-stage 
maximum-length shift register and form the modulo-2 sum of their output sequences. Is 
the resulting sequence periodic? If so, what is the period of the sequence? Compute and 
sketch the autocorrelation sequence of the resulting (bipolar) sequence using (12.3.1). 
12.6 Write a MATLAB program to compute the autocorrelation sequence of the L 
= 
31 Gold sequences that were generated in Illustrative Problem 12.6. 
12.7 Write a MATLAB program that performs a Monte Carlo simulation of four time­
synchronous CDMA users when each user employs a distinct Gold sequence of length 
L 
= 31. The four Gold sequences may be selected from Table 12 .3. Each user employs 
the binary (± 1) modulation of their representative Gold sequences. The receiver for 
each user correlates the composite CDMA received signal, which is corrupted by addi­
tive white Gaussian noise (added on a chip-by-chip basis) with each user's respective 
sequence. Using Monte Carlo simulation with N 
= 10000 information bits, estimate 
and plot the probability of error for each user as a function of SNR. 
12.8 Repeat Problem 12.7 when the four users transmit asynchronously. For example, 
simulate the case when the four-use CDMA signals are offset in time by one chip 
relative to one of the other signals. That is, the CDMA signal of user 2 is delayed 
by one chip relative to the first user, the CDMA signal of user 3 is delayed by one 
chip relative to the signal of user 2, and the CDMA signal of user 4 is delayed by 
one chip relative to the signal of user 3. Compare the error probability obtained with 
asynchronous transmission to that obtained with synchronous transmission. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

572 
CHAPTER 12. SPREAD SPECTRUM COMMUNICATION SYSTEMS 
12.9 An FH binary orthogonal FSK system employs an m 
= 7-state shift register to 
generate a periodic maximum-length sequence of length L 
= 127. Each stage of the 
shift register selects one of N 
= 12 7 nonoverlapping frequency bands in the hopping 
pattern. Write a MATLAB program that simulates the selection of the center frequency 
and the generation of the two frequencies in each of the N 
= 127 frequency bands. 
Show the frequency selection pattern for the first 10 bit intervals. 
12.10 Write a Monte Carlo program to simulate a FH digital communication system 
that employs binary FSK with noncoherent (square-law) detection. The system is cor­
rupted by partial-band interference with spectral density Jo/ex, where ex 
= 0.1. The 
interference is spectrally flat over the frequency band 0 < ex  0.1. Plot the measured 
error rate for this system versus the SNR Eb/ Jo. 
12.11 Repeat the Monte Carlo simulation in Illustrative Problem 12.8 when the weight 
used at the combiner in the absence of interference is set tow 
= 50 and with inter­
ference the weight is w 
= l/a-2 
= 2/£, where the signal energy is E  4. Plot the 
measured error rate from the Monte Carlo simulation for this dual diversity system and 
compare this performance with that obtained in Illustrative Problem 12.8. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

Bibliography 
ALAMOUTI, S. (1998). "A Simple Transmit Diversity Technique for Wireless Commu­
nications;' IEEE Journal on Selected Areas in Communications, vol. 16, pp. 1451-
1458. 
BAHL, L. R., COCKE, J ., JELINEK, F., AND RAVI V, J. (1974). "Optimal Decoding of 
Linear Codes for Minimizing Symbol Error Rate," IEEE Transactions on Informa­
tion Theory, vol. 20,pp. 284-287. 
BERROU, C. AND GLAVIEUX, A. (1996). "Near Optimum Error-Correcting Coding 
and Decoding: Turbo Codes," IEEE Transactions on Communications, vol. 44, pp. 
1261-1271. 
BERROU, C., GLAVIEUX, A., AND THITIMAJSHIMA, P. (1993). "Near Shannon Limit 
Error-Correcting Coding and Decoding: Turbo-Codes;' in Proceedings of IEEE In­
ternational Conference on Communications (ICC), vol. 2, pp. 1064-1070, IEEE, 
Geneva, Switzerland. 
EDELMAN, A. (1989). "Eigenvalues and Condition Numbers of Random Matrices," 
Ph.D. dissertation, MIT, Cambridge, MA 02093. 
FORNEY, G. D., JR. (1972). "Maximum Likelihood Sequence Estimation of Digital 
Sequences in the Presence of Intersymbol Interference;' IEEE Transactions on In­
formation Theory, vol. 18, pp. 363-378. 
GALLAGER, R. G. (1960). "Low-Density Parity-Check Codes," Ph.D. thesis, M.I.T., 
Cambridge, MA, USA. 
GALLAGER, R. G. (1963). Low-Density Parity-Check Codes, The M.I.T. Press, Cam­
bridge, MA, USA. 
GOLD, R. (1967). "Optimal Binary Sequences for Spread Spectrum Multiplexing;' 
IEEE Transactions on Information Theory, vol. IT-13, pp. 619-621. 
GOLD, R. ( 1968). "Maximal Recursive Sequences with 3-Valued Recursive Cross Cor­
relation Functions;' IEEE Transactions on Information Theory, vol. 14, pp. 154-156. 
JAFARKHANI, H. (2005). Space-Time Coding: Theory and Practice, Cambridge Uni­
versity Press. 
573 
Copyright 2011 Cengage Learning. All Rights Reserved. May not be copied. scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter\s). 
Editorial review has deemed that any suppressed content does not materialJy affect the overall learning experience. Cengage Leaming reserves the right to remove additiona1 content at any time if subsequent rights restrictions re<tuire it. 

574 
BIBLIOGRAPHY 
KASAMI, T. (1966). "Weight Distribution Formula for Some Class of Cyclic Codes;' 
Tech. Rep. R-285, Coordinated Science Laboratory, University of Illinois, Urbana, 
Ill. 
MAX, J. (1960). "Quantization for Minimum Distortion,'' IRE Transactions on Infor­
mation Theory, vol. 6, pp. 7-12. 
NEESER, F. D. AND MASSEY, J. L. (1993). "Proper Complex Random Processes 
with Applications to Information Theory,'' IEEE Transactions on Information The­
ory, vol. 39, pp. 1293-1302. 
PROAKIS, J. G. AND SALEHI, M. (2002). Communication Systems Engineering, 
Prentice-Hall, Upper Saddle River, N.J., Second Ed. 
PROAKIS, J. G. AND SALEHI, M. (2008). Digital Communications, McGraw-Hill, 5th 
Ed. 
RYAN, W. E. AND LIN, S. (2009). Channel Codes, Classical and Modern, Cambridge 
University Press. 
SARWATE, D. V. AND PURSLEY, M. B. (1980). "Crosscorrelation Properties of Pseu­
dorandom and Related Sequences;' Proceedings of the IEEE, vol. 68, pp. 593-619. 
SCHOLTZ, R. A. (1979). "Optimal CDMA Codes,'' in National Telecommunication 
Conference Records, pp. 54.2.1-54.2.4, Washington, D.C. 
SHANNON, C. E. ( 1948). "A Mathematical Theory of Communications;' Bell System 
Technical Journal, vol. 27, pp. 379-423, 623-656. 
TAROKH, V., JAFARKHANI, H., AND CALDERBANK, A. R. (1999). "Space-Time 
Block Codes from Orthogonal Designs,'' IEEE Transactions on Information Theory, 
vol. 45, pp. 1456-1467. 
TELATAR, E. (1999). "Capacity of Multi-Antenna Gaussian Channels,'' European 
Transactions on Telecommunications, vol. 10, pp. 585-596. 
WANG, H. AND XIA, X.-G. (2003). "Upper Bounds of Rates of Complex Orthogo­
nal Space-Time Block Codes;' IEEE Transactions on Information Theory, vol. 49, 
pp. 2788-2796. 
WELCH, L. R. ( 197 4). "Lower Bounds on the Maximum Cross Correlation of Signals,'' 
IEEE Transacyions on Information Theory, vol. 20, pp. 397-399. 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

Index 
a posteriori I-values, 481 
a priori I-value, 490 
AID conversion, 133 
Adaptive equalizer, 284, 292 
Algorithm 
K-means, 150 
BCJR,475 
belief propagation, 496 
bit-flipping, 496 
generalized Lloyd, 150 
LBG, 150 
LMS,294 
max-log-AP P, 486 
max-log-MAP, 486 
stochastic gradient, 294 
sum-product, 498 
turbo decoding, 489 
Viterbi, 463 
AM,85 
Amplitude distortion, 254 
Amplitude modulation, 85 
conventional AM, 94 
DSB-AM,86 
SSB-AM, 101 
Amplitude-shift keying, 314 
spectrum, 314 
Analytic signals, 34 
Antipodal signals, 199 
error probability, 201 
ASK, 314 
Autocorrelation function, 32 
Backward recursion, 478 
Bandlimited processes, 70 
Bandpass processes, 72 
Bandpass signal, 34 
envelope, 36 
in-phase component, 35 
lowpass equivalent, 35 
phase, 36 
quadrature component, 35 
BCJR algorithm, 475 
backward recursion, 478 
forward recursion, 476 
SISO decoder, 481 
soft output, 480 
Belief propagation algorithm, 496 
Binary modulation 
fading channels, 410 
Binary symmetric channel (BSC), 430 
Cij]lcMl il@iliJ07/2 I 173.244.197 .106 
Biorthogonal signaling, 235 
error probability, 237 
Block codes, 441 
BSC, 430 
Carrier synchronization, 362 
Carrier-amplitude modulation, 313 
Carrier-frequency modulation, 350 
Carrier-phase modulation, 321 
Carson's rule, 123 
CDMA,546 
Channel I-value, 490 
Channel capacity, 429, 430 
AWGN channel,431 
binary symmetric channel (BSC), 431 
expression, 430 
MIM0,520 
MISO Channel, 517 
SIMO channel, 517 
Channel coding, 440 
Chip rate, 541 
575 
Copyright 2011 Cengage Learning. All Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to electronic rights, some third party content may be suppressed from the eBook and/or eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Leaming reserves the right to remove additional content at any time if subsequent rights restrictions require it. 

576 
Clock synchronization, 368 
Code division multiple access (CDMA), 
546 
Codes 
block,441 
convolutional, 441, 456 
Hamming, 447 
Huffman, 135 
LDPC,493 
linear block, 443 
parallel concatenated convolutional, 
472 
recursive systematic convolutional, 4 73 
simple repetition, 441 
space-time, 524 
space-time block, 524 
space-time trellis, 531 
turbo, 472 
Coding 
Huffman, 135 
natural binary, 156 
noiseless, 134 
Conventional AM, 94 
bandwidth, 95 
index of modulation, 95 
modulation efficiency, 96 
normalized message, 95 
SNR,96 
spectrum, 95 
Convolution integral, 1 
Convolutional codes, 441, 456 
constraint length, 456 
error probability, 470, 471 
free distance, 461 
MAP decoding, 4 7 5 
parallel concatenated (PCCC), 4 72 
recursive systematic, 473 
transfer function, 460 
trellis diagram, 459 
Viterbi algorithm, 461, 463 
Correlation receiver, 184 
Covariance matrix, 53 
Cyclostationary processes, 250 
Data compression, 133 
lossless, 133 
lossy, 133 
INDEX 
Decision-feedback equalizer (DFE), 301 
Decoding 
iterative, 472 
turbo, 472 
Delay distortion, 254 
Delta modulation, 171 
Demodulation 
AM, 105 
conventional AM, 116 
DSB-AM, 106 
frequency-shift keying (FSK), 352 
OFDM,379 
phase, 324 
QAM,342 
SSB-AM, 111 
Deviation constant, 122 
DFE, 301 
DFf,23 
Differential phase modulation, 333 
Digital subscriber lines, 387 
Direct-sequence spread spectrum, 540 
error probability, 544 
interference margin, 544 
Discrete Fourier transform (DFT), 23 
Discrete multitone modulation, 387 
Discrete spectrum, 4 
Discrete-memoryless channel (DMC), 430 
Diversity techniques, 416 
DM, 171 
adaptive, 173 
granular noise, 172 
slope overload, 173 
DMC,430 
DMT,387 
Doppler frequency spread, 399 
Doppler power spectrum, 405 
Doppler shift, 398 
DPCM, 168 
DPSK, 333 
DSB-AM, 86 
bandwidth, 86 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

INDEX 
SNR, 87 
spectrum, 86 
Duobinary signaling, 279 
precoding, 282 
Early-late gate, 368 
Energy spectral density , 31 
Energy-type signal, 31 
Entropy, 134 
Envelope detection, 116 
Equalizer 
adaptive, 284, 292 
decision feedback (DFE), 301 
fractionally spaced, 286 
linear, 284 
nonlinear, 300 
preset, 284 
symbol-spaced, 286 
zero-forcing, 286 
Extrinsic I-value, 490 
Extrinsic information, 490 
Eye pattern, 267 
Fading, 399 
Fading channels 
binary modulation, 410 
coherence bandwidth, 399 
coherence time, 400 
diversity techniques, 416 
Doppler spread, 399 
equal gain combining, 417 
frequencu nonselective, 400 
frequency diversity, 416 
frequency nonselective, 399 
frequency selective, 399, 404 
ionospheric propagation, 397 
Jakes' model, 407 
maximal ratio combining, 417 
mobile cellular, 397 
multipath spread, 399 
RAKE receiver, 421 
Rayleigh fading, 402 
selection diversity, 417 
square-law combining, 417 
time diversity, 416 
Fast Fourier transform (FFT), 23 
FFf, 23 
FM, 121 
bandwidth, 123 
deviation constant, 122 
modulation index, 122 
577 
preemphasis and deemphasis filtering, 
123 
SNR, 123 
Forward recursion, 476 
Fourier series, 1 
coefficients, 2 
exponential form, 2 
trigonometric, 3, 4 
Fourier transforms, 16 
definition, 17 
for periodic signals, 19 
inverse, 17 
properties, 17 
convolution, 18 
differentiation, 18 
duality, 17 
linearity, 17 
modulation, 18 
Parseval's relation, 18 
Rayleigh's theorem, 18 
scaling, 18 
time shift, 18 
table, 18 
Free distance, 461 
Frequency modulation, 121 
Frequency-hopped spread spectrum (FH), 
559 
Frequency-shift keying (FSK), 350 
demodulation, 352 
error probability, 357 
Generalized Lloyd algorithm, 150 
Gold sequences, 555 
Graph 
variable nodes, 495 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

578 
Graphs 
constraint nodes, 495 
cycles, 495 
girth,495 
Hamming codes, 447 
Hermitian symmetry, 3 
Hilbert transform, 35 
Huffman code 
efficiency, 136 
Huffman coding, 135 
In-phase component, 35 
Interference margin, 544 
Intersymbol interference (ISi), 266 
Ionospheric propagation channel, 397 
Iterative decoding, 472, 489 
K-means algorithm, 150 
LBG algorithm, 150 
LDPC codes 
bit-flipping, 496 
code density, 494 
decoding, 496 
regular, 494 
sum-product algorithm, 498 
Tanner graph, 494, 495 
Linear block codes, 443 
generator matrix, 443 
minimum distance, 443 
performance, 448 
systematic, 446 
Linear equalizer, 284 
Lloyd-Max conditions, 146 
LMS algorithm, 294 
log-APP (log a posteriori probability), 484 
log-MAP (log maximum a posteriori prob-
ability), 484 
Lossless data compression, 133 
Lossy data compression, 133 
Low-density parity-check (LDPC) codes, 
493 
Lowpass equivalent of a signal, 35 
Lowpass random processes, 70 
M-ary orthogonal signaling, 226 
error probability, 230 
M-ary PAM, 222 
error probability, 223 
Magnitude spectrum, 4 
Markov process, 56 
Matched filter, 190 
INDEX 
max-log-APP algorithm, 486 
max-log-MAP algorithm, 486 
Maximum-likelihood sequence detection 
(MLSD),306 
MIMO 
Alamouti scheme, 525 
Capacity, 515 
Ergodic capacity, 520 
ICD detection, 510 
ML detection, 510 
MMSE detection, 510 
space-time codes, 524 
Modulation 
AM,85 
carrier-amplitude, 313 
carrier-frequency, 350 
carrier-phase, 321 
conventional AM, 94 
DSB-AM,86 
FM, 121 
multicarrier, 377 
SSB-AM, 101 
Modulation index, 122 
Modulator 
OFDM,379 
Monte Carlo simulation, 75 
Multidimensional signals, 214 
Multipath spread, 399 
Multiple antenna systems, 505 
Mutual information, 431 
Natural binary coding, 156 
NBC, 156 
Noiseless coding, 134 
Nonlinear equalizer, 300 
Nonuniform quantization, 146 
Nyquist frequency, 272 
Nyquist rate, 22 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

INDEX 
OFDM,377 
cyclic prefix, 384 
modulator and demodulator, 379 
PAR, 389 
receiver, 385 
spectrum, 387 
transmitter, 385 
On-off signaling, 207 
On-off signaling 
error probability, 208 
PAR (peak-to-average power ration), 389 
Parallel concatenated convolutional codes 
(PCCC),472 
Parseval 's theorem, 18 
Partial response signaling, 279 
precoding, 281 
PCCC (parallel concatenated convolutional 
codes),472 
PCM, 155 
A-law nonlinearity, 162 
differential, 168 
nonuniform, 162 
SQNR, 155 
uniform, 15 5 
Phase spectrum, 4 
Phase-locked loop (PLL), 362 
Phase-shift keying (PSK), 321 
PLL, 362 
PN sequences, 551 
Power spectral density 
for periodic signals, 32 
PAM signal, 251 
Power-type signal, 31 
Preset equalizer, 284 
Processing gain, 543 
PSK, 321 
error probability, 328 
Pulse-code modulation, 155 
QAM,340 
demodulation, 342 
error probability, 346 
Quadrature amplitude modulation (QAM), 
340 
Quadrature component, 35 
Quantization, 139 
nonuniform, 146 
scalar, 140 
uniform, 140 
vector, 140, 148 
Raised-cosine signal, 272 
RAKE receiver, 421 
Random processes 
bandlimited, 70 
bandpass, 72 
cyclostationary, 250 
filtering, 65 
Gauss-Markov process, 56 
Gaussian, 53 
properties, 53 
lowpass, 70 
Markov process, 56 
power spectrum, 59 
white processes, 59 
Random variables 
Gaussian, 48 
covariance matrix, 53 
generation, 45 
Rayleigh, 49 
uniform,46 
Rayleigh's theorem, 18 
579 
Recursive systematic convolutional codes, 
473 
Rollo ff factor, 272 
RSCC,473 
Sampling theorem, 22 
Nyquist rate, 22 
Scalar quantization, 140 
Shannon limit, 358 
Signal diversity, 565 
Signal-to-quantization noise ratio, 155 
Signum function, 18 
Simple repetition code, 441 
Simulation 
Monte Carlo, 75 
Sine function, 5 
SISO (soft-input-soft-output) decoder, 481 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

580 
Space-time block codes (STBC), 524 
Space-time codes, 524 
Space-time trellis codes, 531 
Spectrum 
discrete, 4 
magnitude, 4, 20 
of a signal, 20 
phase,4, 20 
Spread spectrum systems, 540 
direct sequence,540 
frequency-hopped,559 
SQNR, 155 
SSB-AM, 101 
LSSB-AM, 101 
SNR,102 
spectrum, 101 
USSB-AM, 101 
Stochastic gradient algorithm, 294 
Synchronization 
carrier, 362 
clock, 368 
INDEX 
Tanner graph,494 
for low-density parity-check codes, 495 
Transfer function, 13 
Trellis diagram, 459 
Turbo codes, 472 
iterative decoding, 489 
max-log-APP algorithm, 486 
multiplicity, 4 73 
Turbo decoding, 472 
Turbo decoding algorithm, 489 
Uniform PCM, 155 
VCO, 362 
Vector quantization, 148 
Viterbi algorithm, 461, 463 
Voltage-controlled oscillator (VCO), 362 
VQ, 148 
Wireless channels, 397 
Zero-forcing equalizer, 286 
Copyright 2011 Cengage Leaming. AJI Rights Reserved. May not be copied, scanned, or duplicated, in whole or in part. Due to eJectronic rights, some third party content may be suppressed from the eBook andlor eChapter(s). 
Editorial review has deemed that any suppressed content does not materially affect the overall learning experience. Cengage Learning reserves the right to remove additional content at any time if subsequent rights restrictions l'«tuire it. 

