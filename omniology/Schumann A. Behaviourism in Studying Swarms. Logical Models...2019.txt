Emergence, Complexity and Computation ECC
Andrew Schumann
Behaviourism in 
Studying Swarms: 
Logical Models 
of Sensing and 
Motoring

Emergence, Complexity and Computation
Volume 33
Series editors
Ivan Zelinka, Technical University of Ostrava, Ostrava, Czech Republic
e-mail: ivan.zelinka@vsb.cz
Andrew Adamatzky, University of the West of England, Bristol, UK
e-mail: adamatzky@gmail.com
Guanrong Chen, City University of Hong Kong, Hong Kong, China
e-mail: eegchen@cityu.edu.hk
Editorial Board
Ajith Abraham, MirLabs, USA
Ana Lucia C. Bazzan, Universidade Federal do Rio Grande do Sul, Porto
Alegre, RS, Brazil
Juan C. Burguillo, University of Vigo, Spain
Sergej Čelikovský, Academy of Sciences of the Czech Republic, Czech Republic
Mohammed Chadli, University of Jules Verne, France
Emilio Corchado, University of Salamanca, Spain
Donald Davendra, Technical University of Ostrava, Czech Republic
Andrew Ilachinski, Center for Naval Analyses, USA
Jouni Lampinen, University of Vaasa, Finland
Martin Middendorf, University of Leipzig, Germany
Edward Ott, University of Maryland, USA
Linqiang Pan, Huazhong University of Science and Technology, Wuhan, China
Gheorghe Păun, Romanian Academy, Bucharest, Romania
Hendrik Richter, HTWK Leipzig University of Applied Sciences, Germany
Juan A. Rodriguez-Aguilar, IIIA-CSIC, Spain
Otto Rössler, Institute of Physical and Theoretical Chemistry, Tübingen, Germany
Vaclav Snasel, Technical University of Ostrava, Czech Republic
Ivo Vondrák, Technical University of Ostrava, Czech Republic
Hector Zenil, Karolinska Institute, Sweden

The Emergence, Complexity and Computation (ECC) series publishes new
developments, advancements and selected topics in the ﬁelds of complexity,
computation and emergence. The series focuses on all aspects of reality-based
computation approaches from an interdisciplinary point of view especially from
applied sciences, biology, physics, or chemistry. It presents new ideas and inter-
disciplinary insight on the mutual intersection of subareas of computation, com-
plexity and emergence and its impact and limits to any computing based on
physical limits (thermodynamic and quantum limits, Bremermann’s limit, Seth
Lloyd limits…) as well as algorithmic limits (Gödel’s proof and its impact on
calculation, algorithmic complexity, the Chaitin’s Omega number and Kolmogorov
complexity, non-traditional calculations like Turing machine process and its con-
sequences,…) and limitations arising in artiﬁcial intelligence ﬁeld. The topics are
(but not limited to) membrane computing, DNA computing, immune computing,
quantum computing, swarm computing, analogic computing, chaos computing and
computing on the edge of chaos, computational aspects of dynamics of complex
systems (systems with self-organization, multiagent systems, cellular automata,
artiﬁcial life,…), emergence of complex systems and its computational aspects, and
agent based computation. The main aim of this series it to discuss the above
mentioned topics from an interdisciplinary point of view and present new ideas
coming from mutual intersection of classical as well as modern methods of com-
putation. Within the scope of the series are monographs, lecture notes, selected
contributions from specialized conferences and workshops, special contribution
from international experts.
More information about this series at http://www.springer.com/series/10624

Andrew Schumann
Behaviourism in Studying
Swarms: Logical Models
of Sensing and Motoring
123

Andrew Schumann
Department of Cognitive Science
University of Information Technology
and Management in Rzeszow
Rzeszow
Poland
ISSN 2194-7287
ISSN 2194-7295
(electronic)
Emergence, Complexity and Computation
ISBN 978-3-319-91541-8
ISBN 978-3-319-91542-5
(eBook)
https://doi.org/10.1007/978-3-319-91542-5
Library of Congress Control Number: 2018940887
© Springer International Publishing AG, part of Springer Nature 2019
This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part
of the material is concerned, speciﬁcally the rights of translation, reprinting, reuse of illustrations,
recitation, broadcasting, reproduction on microﬁlms or in any other physical way, and transmission
or information storage and retrieval, electronic adaptation, computer software, or by similar or dissimilar
methodology now known or hereafter developed.
The use of general descriptive names, registered names, trademarks, service marks, etc. in this
publication does not imply, even in the absence of a speciﬁc statement, that such names are exempt from
the relevant protective laws and regulations and therefore free for general use.
The publisher, the authors and the editors are safe to assume that the advice and information in this
book are believed to be true and accurate at the date of publication. Neither the publisher nor the
authors or the editors give a warranty, express or implied, with respect to the material contained herein or
for any errors or omissions that may have been made. The publisher remains neutral with regard to
jurisdictional claims in published maps and institutional afﬁliations.
Printed on acid-free paper
This Springer imprint is published by the registered company Springer International Publishing AG
part of Springer Nature
The registered company address is: Gewerbestrasse 11, 6330 Cham, Switzerland

Contents
1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1
1.1
Designing a Biological Computer . . . . . . . . . . . . . . . . . . . . . .
2
1.1.1
From Controlling Reﬂexes to Biological Computer . . .
2
1.1.2
Bounded Rationality and Cognitive Biases . . . . . . . . . .
5
1.1.3
Experiments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
10
1.2
Methodology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11
1.2.1
Tools for Studying Non-additive Behavioural
Patterns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11
1.2.2
Tools of Unconventional Computing . . . . . . . . . . . . . .
12
1.2.3
Anti-platonism . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
13
1.2.4
Object-Oriented Programming Language . . . . . . . . . . .
14
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
20
2
Actin Filament Networks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
27
2.1
Reversible Logic Gates on Actin Filaments . . . . . . . . . . . . . . .
29
2.1.1
Unconventional Computing on Actin Filaments . . . . . .
29
2.1.2
Actin Filaments as “Swarms” . . . . . . . . . . . . . . . . . . .
31
2.1.3
Actin Filaments as “Metaswarm” . . . . . . . . . . . . . . . .
36
2.1.4
Motility of Amoeba Proteus and Actin Filaments . . . . .
39
2.1.5
Actin Filament Zones as Fuzzy Logic Gates . . . . . . . .
42
2.1.6
Fredkin Gate on Amoeboid Motions . . . . . . . . . . . . . .
46
2.1.7
Neural Properties of Actin Filament Networks . . . . . . .
48
2.2
Arithmetics in Actin Filament Networks. . . . . . . . . . . . . . . . . .
57
2.2.1
p-Adic Valued Arithmetic Functions in Actin
Filament Networks . . . . . . . . . . . . . . . . . . . . . . . . . . .
57
2.2.2
Undecidable Functions in Actin Filament
Networks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
60
2.2.3
Formal Systems and Undecidability . . . . . . . . . . . . . . .
61
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
66
v

3
Unconventional Computers Designed on Swarm Behaviours . . . . .
73
3.1
Reaction-Diffusion Computing . . . . . . . . . . . . . . . . . . . . . . . . .
73
3.1.1
Prehistory of Unconventional Computing . . . . . . . . . . .
73
3.1.2
Unconventional Computing as Novel Paradigm
in Natural Sciences . . . . . . . . . . . . . . . . . . . . . . . . . . .
77
3.1.3
Reaction-Diffusion Automata . . . . . . . . . . . . . . . . . . .
78
3.1.4
Approximation of Voronoi Diagram and Calculations
on Reaction-Diffusion Media. . . . . . . . . . . . . . . . . . . .
83
3.1.5
Process Calculus of Reaction-Diffusion Computing . . .
91
3.2
Automata on Slime Mould . . . . . . . . . . . . . . . . . . . . . . . . . . .
96
3.2.1
Slime Mould Cellular Automata . . . . . . . . . . . . . . . . .
96
3.2.2
Process Calculus of Slime Mould Computing. . . . . . . .
99
3.2.3
Performative Propositions in Slime
Mould p-Calculus. . . . . . . . . . . . . . . . . . . . . . . . . . . .
102
3.3
Reversible Logic Gates on Swarm Behaviours . . . . . . . . . . . . .
104
3.3.1
Reaction-Diffusion Media of Topology
of Attractants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
104
3.3.2
Sequential Logic Gates on Slime Mould and Some
Examples of Reversible Logic Gates . . . . . . . . . . . . . .
107
3.3.3
Conventional Reversible Logic Gates on Slime
Mould . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
109
3.3.4
Unconventional Reversible Logic Gates on Swarm
Behaviours . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
118
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
122
4
Conventional and Unconventional Automata on Swarm
Behaviours . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
127
4.1
Formalizations of Swarm Transitions . . . . . . . . . . . . . . . . . . . .
127
4.1.1
From Emergent Computing to Swarm Computing . . . .
127
4.1.2
Ant Colony Transitions. . . . . . . . . . . . . . . . . . . . . . . .
130
4.1.3
Bee Colony Transitions . . . . . . . . . . . . . . . . . . . . . . .
131
4.1.4
Escherichia Coli Transitions . . . . . . . . . . . . . . . . . . . .
132
4.1.5
Paenibacillus Vortex Transitions . . . . . . . . . . . . . . . . .
133
4.1.6
Towards Slime Mould Machines . . . . . . . . . . . . . . . . .
135
4.2
Conventional Approach to Swarm Machines . . . . . . . . . . . . . .
136
4.2.1
Physarum Kolmogorov-Uspensky Machines . . . . . . . .
136
4.2.2
Physarum Schönhage’s Storage Modiﬁcation
Machines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
137
4.2.3
Physarum Random-Access Machines . . . . . . . . . . . . . .
138
4.2.4
Problems of Conventional Approach . . . . . . . . . . . . . .
139
vi
Contents

4.3
Unconventional Approach to Simulating the Swarm
Behaviour. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
140
4.3.1
p-Adic Integers . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
140
4.3.2
Synchronous Slime Mould Automata . . . . . . . . . . . . . .
142
4.3.3
Non-linear Strings and the Limits in the Swarm
Propagation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
147
4.3.4
p-Adic Valued Logic for Non-linear Strings . . . . . . . . .
149
4.3.5
Relations and Functions on Non-linear Strings
and the Non-linear Group Theory . . . . . . . . . . . . . . . .
155
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
161
5
Non-Archimedean Valued Fuzzy and Probability Logics . . . . . . . .
165
5.1
Non-Archimedean Numbers as Logical Values . . . . . . . . . . . . .
165
5.1.1
Hypernumbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
168
5.1.2
p-Adic Numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
168
5.2
Hyper-valued and p-Adic Valued Logical Matrices . . . . . . . . . .
170
5.2.1
Hyper-valued ŁP-Matrix . . . . . . . . . . . . . . . . . . . . . .
170
5.2.2
p-Adic Valued BL-Matrix . . . . . . . . . . . . . . . . . . . . . .
172
5.2.3
Non-Archimedean Approach to Higher-Order Fuzzy
Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
175
5.2.4
Non-Archimedean Valued Predicate Logic BL81 . . . . .
178
5.3
Non-Archimedean Valued Probability Logics . . . . . . . . . . . . . .
187
5.3.1
Hyper-valued Probabilities . . . . . . . . . . . . . . . . . . . . .
187
5.3.2
Hyper-valued Probability Logic . . . . . . . . . . . . . . . . . .
188
5.3.3
p-Adic Valued Probabilities . . . . . . . . . . . . . . . . . . . .
192
5.4
p-Adic Valued Logic for Simulating the Swarm Behaviours . . .
194
5.4.1
p-Adic Logical Values in Experiments on Swarms . . . .
194
5.4.2
p-Adic Valued Adder and p-Adic Valued
Subtracter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
197
5.4.3
p-Adic Valued Towers of Higher-Order Sequents . . . . .
200
5.4.4
p-Adic Valued Natural Deductions . . . . . . . . . . . . . . .
202
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
206
6
Individual-Collective Duality in Swarm Behaviours . . . . . . . . . . . .
209
6.1
Quantum Double-Slit Experiment . . . . . . . . . . . . . . . . . . . . . .
209
6.1.1
Non-additive Measures . . . . . . . . . . . . . . . . . . . . . . . .
209
6.1.2
Performativity in Quantum Experiments . . . . . . . . . . .
210
6.1.3
Different Syllogistics for Classical Mechanics
and Quantum Mechanics. . . . . . . . . . . . . . . . . . . . . . .
216
6.2
Non-additivity of Swarm Behaviour . . . . . . . . . . . . . . . . . . . . .
222
6.2.1
Double-Slit Experiment with Physarum
Polycephalum. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
222
6.2.2
Growing Sample Space. . . . . . . . . . . . . . . . . . . . . . . .
226
6.2.3
p-Adic Valued Probability Measure . . . . . . . . . . . . . . .
230
Contents
vii

6.2.4
p-Adic Valued Fuzzy Syllogistic . . . . . . . . . . . . . . . . .
231
6.2.5
p-Adic Valued Fuzzy Logic Controllers . . . . . . . . . . . .
236
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
239
7
Syllogistic Systems of Swarm Propagation . . . . . . . . . . . . . . . . . . .
243
7.1
Aristotelian and Non-Aristotelian Syllogistics for Modelling
the Swarm Behaviour . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
243
7.1.1
Leśniewski’s Ontology Without Logical Atoms . . . . . .
243
7.1.2
Lateral Inhibition and Lateral Activation . . . . . . . . . . .
249
7.1.3
Lateral Inhibition and Aristotelian Syllogistic . . . . . . . .
253
7.1.4
Lateral Activation and Non-Aristotelian
Syllogistic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
254
7.2
Spatial Diagrams for Syllogistic Propositions . . . . . . . . . . . . . .
256
7.2.1
Strings in the Slime Mould Growing Universe . . . . . . .
257
7.2.2
Aristotelian Syllogistic for Physarum Plasmodia
with Repellents . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
258
7.2.3
Non-Aristotelian Syllogistic for Physarum Plasmodia
Without Repellents . . . . . . . . . . . . . . . . . . . . . . . . . . .
261
7.3
Syllogistic System for the Parasite Propagation . . . . . . . . . . . . .
268
7.3.1
Trichobilharzia szidati (Diginea: Schistosomatidae)
and Their Life Cycle . . . . . . . . . . . . . . . . . . . . . . . . .
269
7.3.2
Miracidia (Genus Trichobilharzia): Morphology
and Behaviour . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
270
7.3.3
Cercariae (Genus Trichobilharzia): Morphology
and Behaviour . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
271
7.3.4
Syllogistic System for the Propagation
of Schistosomatidae . . . . . . . . . . . . . . . . . . . . . . . . . .
274
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
280
8
Context-Based Games of Swarms . . . . . . . . . . . . . . . . . . . . . . . . . .
283
8.1
Bio-inspired Game Theory . . . . . . . . . . . . . . . . . . . . . . . . . . .
283
8.1.1
Symbolic Values and Non-additive Measures . . . . . . . .
283
8.1.2
Basic Assumptions of Game Theory
and Non-additivity in Symbolic Interactions. . . . . . . . .
286
8.1.3
Concurrent Go Games on the Slime Mould . . . . . . . . .
288
8.1.4
Aristotelian Go Game on the Slime Mould . . . . . . . . .
290
8.1.5
Non-Aristotelian Go Game on the Slime Mould . . . . . .
294
8.2
Towards Theory of Context-Based Concurrency . . . . . . . . . . . .
298
8.2.1
Hybrid Simple Actions and Overlapping of Transition
Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
298
8.2.2
Formal Logical Language for the Context-Based
Concurrency. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
302
viii
Contents

8.2.3
Context-Based Concurrent Group Theory . . . . . . . . . .
304
8.2.4
Context-Based Concurrent Boolean Algebra . . . . . . . .
307
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
310
9
Logics for Preference Relations in Swarm Behaviours . . . . . . . . . .
313
9.1
Preference Relation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
313
9.1.1
Preferences with Lateral Inhibition and Lateral
Activation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
314
9.1.2
Aristotelian System for Preference Relations . . . . . . . .
316
9.1.3
Performative Syllogistic System for Preference
Relations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
318
9.2
Measurable and Non-measurable Pairwise Comparisons . . . . . .
320
9.2.1
Conventional Logical Square of Opposition
for Preference Relations . . . . . . . . . . . . . . . . . . . . . . .
321
9.2.2
Unconventional Logical Square of Opposition
for Preference Relations . . . . . . . . . . . . . . . . . . . . . . .
323
9.3
Preference Relations for Swarm Intelligence . . . . . . . . . . . . . . .
325
9.3.1
Social Behaviour and Swarm Behaviour . . . . . . . . . . .
325
9.3.2
Common Patterns of Swarm Behaviour.
The Müller-Lyer Illusion. . . . . . . . . . . . . . . . . . . . . . .
327
9.3.3
Lateral Inhibition and Lateral Activation
in the Swarm Behaviour . . . . . . . . . . . . . . . . . . . . . . .
331
9.4
Swarm Behaviour of Alcoholics . . . . . . . . . . . . . . . . . . . . . . .
333
9.4.1
Statistical Data on Group Behaviours
of Alcoholics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
333
9.4.2
Simulating the Lateral Activation and Lateral
Inhibition Performed by Alcoholics . . . . . . . . . . . . . . .
336
9.4.3
Agents in the Case of Lateral Inhibition . . . . . . . . . . .
338
9.4.4
Agents in the Case of Lateral Activation . . . . . . . . . . .
342
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
346
10
Non-Archimedean Probabilities and Reﬂexive Games . . . . . . . . . . .
349
10.1
Reﬂexive Games . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
349
10.1.1
Perlocutionary Effects and Reﬂexivity . . . . . . . . . . . . .
349
10.1.2
Knowledge Operators and Aumann’s Agreement
Theorem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
350
10.1.3
Why Can We Reject Aumann’s Agreement
Theorem?. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
353
10.2
Reﬂexive Disagreement Theorem . . . . . . . . . . . . . . . . . . . . . .
355
10.2.1
Streams and p-Adic Numbers . . . . . . . . . . . . . . . . . . .
355
10.2.2
Non-Well-Founded Probabilities . . . . . . . . . . . . . . . . .
359
10.2.3
Frequencies and Non-Well-Founded Probabilities
in Logic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
362
Contents
ix

10.2.4
Reﬂexion Disagreement Theorem Proved on Streams
and p-Adic Integers . . . . . . . . . . . . . . . . . . . . . . . . . .
363
10.2.5
Reﬂexion Disagreement Theorem Proved
on Hypernumbers . . . . . . . . . . . . . . . . . . . . . . . . . . . .
368
10.3
Hierarchies of Reﬂexion . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
371
10.3.1
Orders of Reﬂexion . . . . . . . . . . . . . . . . . . . . . . . . . .
371
10.3.2
Non-Archimedean Probabilities for Discrete
and Continuous Reﬂexive Levels . . . . . . . . . . . . . . . .
373
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
377
11
Payoff Cellular Automata and Reﬂexive Games . . . . . . . . . . . . . . .
379
11.1
Cellular-Automatic Approach in Logical Simulations
of Swarm Behaviour . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
379
11.1.1
Ecological Rationality and Cellular Automata . . . . . . .
381
11.1.2
Proof-Theoretic Cellular Automata . . . . . . . . . . . . . . .
384
11.1.3
Proof-Theoretic Simulation of Belousov-Zhabotinsky
Reaction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
388
11.1.4
Proof-Theoretic Simulation of Slime Mould
Dynamics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
391
11.2
Payoff Cellular Automata . . . . . . . . . . . . . . . . . . . . . . . . . . . .
396
11.2.1
Saddle Point . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
397
11.2.2
Minimax and Maximin . . . . . . . . . . . . . . . . . . . . . . . .
397
11.2.3
Equilibrium in Dominant Strategies as Conditional . . . .
399
11.2.4
PROMETHEE Method . . . . . . . . . . . . . . . . . . . . . . . .
401
11.3
Reﬂexive Games . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
402
11.3.1
Reﬂexive Game of the Second Level . . . . . . . . . . . . . .
403
11.3.2
Logic for Reﬂexive Decision Making . . . . . . . . . . . . .
405
11.3.3
Biological Implementations of Reﬂexive Games . . . . . .
408
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
409
12
Foundations of Mathematics Within Lateral Inhibition
and Lateral Activation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
411
12.1
Lateral Inhibition and Lateral Activation in Mathematical
Cognitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
411
12.1.1
What Are Foundations of Mathematics? . . . . . . . . . . .
411
12.1.2
Cognitive Blindness and Mechanisms of Lateral
Activation and Lateral Inhibition . . . . . . . . . . . . . . . . .
413
12.1.3
Proof Trees and Proof Forests . . . . . . . . . . . . . . . . . . .
415
12.2
Foundations of Mathematics Within the Lateral Activation . . . .
419
12.2.1
What Is Talmudic Logic? . . . . . . . . . . . . . . . . . . . . . .
419
12.2.2
Talmudic Reasoning for Simulating Swarms . . . . . . . .
423
12.2.3
Metareasoning in Mathematical Analysis . . . . . . . . . . .
430
12.2.4
Metric Space for Proof Forests . . . . . . . . . . . . . . . . . .
437
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
441
x
Contents

13
Conclusion and Future Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
443
13.1
Main Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
443
13.1.1
Morphological Processors . . . . . . . . . . . . . . . . . . . . . .
444
13.1.2
Actin Filament Networks . . . . . . . . . . . . . . . . . . . . . .
445
13.1.3
p-Adic Valued Logic and Arithmetics . . . . . . . . . . . . .
445
13.1.4
Process-Algebraic Formalization of Swarm Behaviour
and Hybrid Actions . . . . . . . . . . . . . . . . . . . . . . . . . .
446
13.1.5
Computations on Trees . . . . . . . . . . . . . . . . . . . . . . . .
447
13.1.6
Neural Properties of Swarm Behavioural Patterns . . . . .
448
13.1.7
Bio-inspired Games . . . . . . . . . . . . . . . . . . . . . . . . . .
449
13.1.8
Chemical Interface . . . . . . . . . . . . . . . . . . . . . . . . . . .
449
13.1.9
Reﬂexive Games . . . . . . . . . . . . . . . . . . . . . . . . . . . .
450
13.2
Designing a Protein Monster as Future Work . . . . . . . . . . . . . .
453
13.2.1
Main Objectives . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
453
13.2.2
Previous Project and Preliminary Results . . . . . . . . . . .
453
13.2.3
Concreteness and Pertinence of the Objective . . . . . . .
454
13.2.4
Expected Impacts . . . . . . . . . . . . . . . . . . . . . . . . . . . .
456
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
458
Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
461
Contents
xi

Chapter 1
Introduction
The notion of swarm intelligence [1–3] was ﬁrst introduced in [4] to denote the col-
lective behaviour of decentralized and self-organized systems. Now, this notion is
used in robotics to design a population of robots interacting locally among them-
selves and reacting locally to their environment with an emergent effect when all the
local reactions of them are being cumulated into the one collective reaction. There
are many natural examples of swarm intelligence: ant colonies [5, 6], bee colonies
[7–9], ﬁsh schooling [10, 11], bird ﬂocking and horse herding [12], bacterial colonies
with a kind of social behaviour [13–18], multinucleated giant amoebae Physarum
polycephalum [19], etc. The main feature of all these systems is that their individual
agents behave locally without any centralized control, but their interactions lead to
the emergence of global behaviour of the whole group that cannot be reduced to
subsystems additively.
The swarm intelligence is actively studied now, because swarms (ants, bees, some
social bacteria, Physarum polycephalum, etc.) can solve logistic and transport prob-
lems very effectively [20]. For instance, there is a collective navigation of bacterial
swarms [21, 22] and there is an effective path ﬁnding by amoebae and a possibility
of trafﬁc optimization by them [23–27]. Swarms can easily solve some complex
(NP-hard) logistic problems: (i) the Travelling Salesman Problem can be solved by
ants [28] and by amoebae [29]; (ii) the Steiner Tree Problem can be solved by amoe-
bae [30]; (iii) the Generalized Assignment Problem can be solved by bees [31]; (iv)
mazes can be solved by amoebae [32, 33], etc. As we see, even unicellular organisms
can solve logistic problems effectively. Also, they can be involved in constructing
algorithms for simulating the crowd evacuation [34] and for simulating transport
systems such as the route systems in China [35] and in the United States of America
[36].
The main characteristics of any swarm consists in a possibility to optimising the
own trafﬁc in reactions to attractants and repellents. Attractants are things or sites in
the environment, such as food pieces and sex pheromones, which attract individuals
of swarm. Repellents are things or sites in the environment, such as predators, which
© Springer International Publishing AG, part of Springer Nature 2019
A. Schumann, Behaviourism in Studying Swarms: Logical Models of Sensing
and Motoring, Emergence, Complexity and Computation 33,
https://doi.org/10.1007/978-3-319-91542-5_1
1

2
1
Introduction
repel individuals of swarm. For example, ants and bees exploit the food sources, they
ﬁnd out, very effectively so that they can solve the Travelling Salesman Problem and
the Generalized Assignment Problem. Fish schools and horse herds avoid predators
very effectively, too. The same swarm behaviour is observed even among human
beings in the following two cases: (i) an addictive behaviour such as the behaviour of
alcoholics[37]orgamers—inthiscasetheroleofhumanattractantscausingaddiction
increases strongly; (ii) an escape panic [38]—in this case the role of human repellents
like a terrorist act increases strongly, also.
Hence, by placing attractants and repellents at different sites we can manage and
program the swarm behaviour. This opportunity allows us to design a biological
computer—an abstract machine (i) with inputs presented by stimuli coming from
attractants and repellents and (ii) with outputs presented by the swarm reactions to
appropriate stimuli. This computer can be realized on different swarms differently.
The point is that different matters are attractants and repellents for different animals.
They differ a lot even for microorganisms. Nevertheless, their logic and mathematics
are the same.
In the biological computer we have two main stages: (i) sensing—when a swarm
detects neighbour attractants and repellents; and (ii) motoring—when this swarm
reacts to founded attractants and repellents, e.g. to exploit attractants and to avoid
repellents.
1.1
Designing a Biological Computer
1.1.1
From Controlling Reﬂexes to Biological Computer
Designing the biological computer is based on behaviourism as theoretical frame-
works explaining the animal behaviour by reﬂexes produced by responses to external
stimuli with a possibility to track individual’s history of reinforcement and punish-
ment implied by those stimuli. Each reﬂex is a direct response of animal to a stimulus,
connecting the stimulus to a behaviour within two basic modes: either attracting (e.g.
reinforcement) or repelling (e.g. punishment) coming from this stimulus. If we know
what attracting and repelling matters are for the animal in fact, we can manage a con-
trol of its reactions by placing these matters. It means, simply put that controlling
stimuli causes controlling behaviour according to behaviourism. So, we assume, the
environment determines each animal behaviour.
In the theory of reﬂexes there are distinguished the following two types of
responses/reactions/reﬂexes: (i) the unconditioned response to a stimulus (then an
appropriate stimulus is called unconditioned); (ii) the conditioning response to a
stimulus (then an appropriate stimulus is called conditioning). The unconditioned
stimuli are represented by biologically active matters: either attractants (e.g. food
or sex pheromones attracting an animal) or repellents (e.g. places evaluated auto-
matically as dangerous by an animal). These stimuli are strongly connected to some

1.1 Designing a Biological Computer
3
direct responses from the very beginning, i.e. they are given a priori, just because of
chemical processes of organisms. In the meanwhile, at the beginning, unconditioned
stimuli are biologically neutral and assume no direct reactions of organism, i.e. they
are rather ignored under standard conditions. Nevertheless, they can be associated
with some unconditioned responses, too. Then they become non-neutral, but attrac-
tive (if they were associated with attractants) or negative (if they were associated with
repellents). For the ﬁrst time, Ivan Pavlov (1849–1936) demonstrated this learning
process through experiments with dogs, e.g. he showed that a neutral stimulus such
as a bell can be paired with a food by a dog, if this dog was previously feeded
paralleled by this bell many times. After this association, the organism will exhibit
a conditioned response to the conditioned stimulus when the conditioned stimulus
will be presented alone. Thus, conditioning responses are not given a priori, they
are a posteriori, i.e. they are learnt and after that they play the roles of attractants or
repellents, although they are not biologically active matters in fact.
At the time of Pavlov, one thought that a possibility of conditioning responses is
one of the basic features of brain and nervous system. But it is known now through
experiments that it is a fundamental feature of any adaptive behaviour including the
adaptive behaviour of unicellular organisms, see [39, 40]. Conditioning responses
mean a memory, when an organism was taught that a neutral stimulus is a context of
appearing an attractant or repellent. The knowledge of this context allows the organ-
ism to behave more adaptively in the feature. Thus, the possibility of conditioning
responses is connected to a possibility of life to have a memory and then to be more
adaptive to the environment.
Let us consider some examples of memory of unicellular organisms. From [41],
we know that the amoeba Physarum polycephalum can learn the patterns of shocks
at regular intervals, and then it changes its behaviour in anticipation of the next shock
to come. In [42], this experiment is performed in the following manner. Unfavorable
conditions for Physarum polycephalum are presented as three consecutive pulses
at constant intervals. Under these unfavorable conditions, the amoebae reduce their
locomotive speed in response to each episode. When the amoebae move under the
favorable conditions, they spontaneously reduce their locomotive speed at the time
when the next unfavorable episode is expected to occur. This fact shows that we
deal with the anticipation of impending environmental change. For the amoeba the
regular interval of shocks became a conditioning stimulus.
Another experiment with the amoeba Physarum polycephalum was performed
in [39] to show that the temperature ﬂuxes can become a conditioning stimulus for
the amoebae. So, we know that the amoebae avoid cold temperatures and under
these conditions they become slow. In the experiment there was shown that when
the temperature changes had stopped, the amoebae slowed down, anticipating a cold
ﬂux. It is an evidence of memory of temperature ﬂuxes.
All these experiments demonstrating a kind of memory of unicellular organisms
can be explained by chemotaxis, the unconditioned response to some chemical cues
(such as pheromones), that is different for static gradients and dynamic cues, see [43],
where this difference is shown for the migration of Dictyostelium cells in response
to the source of traveling waves of chemoattractant during aggregation.

4
1
Introduction
Hence, some primitive forms of conditioning reﬂexes (that is a primitive memory)
can be detected even at the level of cellular proteins (including actin ﬁlaments)
responding to the changes of the environment, such as shock intervals or cold ﬂuxes.
Not only neurons can cumulate conditioning responses, as Pavlov thought ﬁrst, but
also cellular proteins. This basic feature of chemotaxis to have a short memory
is involved into the particle swarm optimization [3, 44] and in designing organic
memristors—organic devices with a memory. For example, in [40] for designing
circuit models therewas appliedanabilityof slimemouldof Physarumpolycephalum
to both memorize the period of temperature and humidity variations and anticipate
the next variations to come. Some other organic memristors are proposed in [45–49].
Thus, in designing the biological computer we can remain at the level of cellular
proteins (ﬁrst of all, actin ﬁlaments) responsible for chemotaxis and their reactions.
One of the possible realizations of biological computer has been obtained by us in the
project Physarum Chip: Growing Computers from Slime Mould [50, 51] supported
by the Seventh Framework Programme (FP7-ICT-2011-8). In the project, we have
focused on theoretical and experimental laboratory studies on sensing and motoring
of plasmodia of Physarum polycephalum. My part has consisted in developing logics
for programming the plasmodium behaviour. The project has been resulted in the
design and prototyping of a Physarum Chip. The main objectives we have realised
are to design a distributed biomorphic computing device built and operated by the
slime mould of Physarum polycephalum. Let us recall that Physarum polycephalum
belongs to the species of order Physarales, subclass Myxogastromycetidae, class
Myxomycetes, division Myxostelida. Plasmodium is a vegetative phase of Physarum
polycephalum, having a form of single cell with a myriad of diploid nuclei. It behaves
and moves as a giant amoeba. Typically, the plasmodium forms a network of pro-
toplasmic tubes connecting the masses of protoplasm at the food sources which has
been shown to be efﬁcient in terms of network length and resilience.
ThePhysarum Chipisanetworkofprocessingelementsmadeoftheslimemould’s
protoplasmic tubes acting as a non-linear transducer of information, while templates
of tubes coated with conductor act as fast information channels. This chip has par-
allel inputs (optical, chemo- and electro-based) and parallel outputs (electrical and
optical) and it can solve a wide range of computation tasks, including optimisation on
graphs, computational geometry, decentralized robot control, logic and arithmetical
computing [33, 34, 51–65], etc.
The idea of biological computer satisﬁes the presupposition of radical
behaviourism: attractants, repellents and conditioning stimuli (connected to attrac-
tants or repellents) as environmental variables can completely control observable
behaviours of animals [66–68]. This presupposition is used also in functional analysis
of behavioural psychology to deﬁne relationships between stimuli and responses on
the basis of explicating the following four elements: motivating operations, trigger of
behaviour,behaviouritself,consequenceofbehaviour[69].Theradicalbehaviourism
is applied in the animal training, too. Some basic principles of this training: (i) using
attractants for a positive reinforcement (an expected behaviour is resulted as a con-
ditioning response connected to an attractant); (ii) using repellents for a negative
reinforcement (an expected behaviour is followed by the removal of repellent, i.e.

1.1 Designing a Biological Computer
5
there was a repellent and a conditioning response was associated with it, then the
removal of repellent causes appearing an opposite conditioning response); (iii) using
repellents for a positive punishment (an expected behaviour is resulted as a con-
ditioning response connected to a repellent); (iv) using attractants for a negative
punishment (an expected behaviour is followed by the removal of attractant, i.e.
there was an attractant and a conditioning response was associated with it, then the
removal of attractant causes appearing an opposite conditioning response).
Thus, the biological computer is a logic for radical behaviourism. In other words,
it deﬁnes how different Boolean combinations of attractants and repellents determine
the patterns of animal behaviour, ﬁrst of all their swarm behaviour.
1.1.2
Bounded Rationality and Cognitive Biases
In logical positivism (called logical empiricism or physicalism also), there was a fun-
damental presupposition that, on the one hand, any complex of facts is a combination
of elementary facts and, on the other hand, each elementary fact is described by an
atomic proposition and the complex of facts is described by an appropriate Boolean
complex of true atomic propositions and by all logical consequences drawn from
this Boolean complex:
Every statement about complexes can be analysed into a statement about their constituent
parts, and into those propositions which completely describe the complexes. […] The totality
of true propositions is the total natural science (or the totality of the natural sciences).
[…] The speciﬁcation of all true elementary propositions describes the world completely.
The world is completely described by the speciﬁcation of all elementary propositions plus
the speciﬁcation, which of them are true and which false (Ludwig Wittgenstein, Tractatus
Logico-Philosophicus).
This presupposition of logical positivists would mean for radical behaviourism
that (i) the complex of swarm behavioural patterns can be reduced to a composition
of some elementary swarm patterns, (ii) if we know an appropriate attractant or repel-
lent for each elementary pattern, then from a complex of attractants and repellents
we can deduce a complex of patterns. Hence, following logical positivism we can
suppose that the animal behaviour is rational—it is the same under the same con-
ditions with the same complex of attractants and repellents. Each attractant is more
or less preferable and each repellent is more or less avoidable. Then this rationality
would mean that at each step if a swarm faces several attractants, then the most
preferable attractant is always contained among chosen attractants; and if it faces
several repellents, the most avoidable repellent is always contained among rejected
repellents. In other words, the rational animal tries to maximize its satisfaction and,
at the same time, to minimize its frustration. If preferences affect decisions indeed,
then a Boolean complex of stimuli based on these preferences determine a complex
of behavioural patterns. Is it so? Can we design the biological computer as a complex
of Boolean compositions?

6
1
Introduction
The assumption of rationality of agents is fundamental for game theory and deci-
sion theory. According to these theories, each rational agent always follows his or her
preferences in his or her choices of items or strategies. So, the rationality of human
beings in microeconomics is understood in the same way of utility-maximizing con-
sumers and proﬁt-maximizing ﬁrms. Each rational agent of the market follows the
same decision model to maximize their own proﬁts: I choose items to maximize my
satisfaction as a consumer and I offer something to maximize my proﬁts as a ﬁrm.
I offer a thing that is preferable for A to obtain by exchange of a thing of A that is
preferable for me (e.g. I can offer commodities to obtain moneys to invest them else-
where). Hence, the free market is efﬁcient only because it offers the best opportunity
for individuals to maximize their commodities and satisfaction to create an economy
that could insure maximum utility for everybody. We face a zero reﬂexion of rational
humans there. Everyone is transparent for others, e.g. satisﬁes their expectations, if
all them are rational. This transparency in decisions means that rational agents appeal
only to facts which are the same for everyone, therefore these agents always can agree
(see the Aumann’s agreement theorem [70, 71]). Preferences are instances of facts
that should be seen before meeting. Furthermore, due to rationality and zero reﬂex-
ion of individuals we can always agree about long-term joint actions. From these
actions socioeconomic institutions have resulted, therefore the latter yield outcomes
deemed preferable for the majority. This point of view is called constructivism [72]
according to which “all worthwhile social institutions were and should be created by
conscious deductive processes of human reason” [73].
In other words, according to constructivism (e.g. ideas of rationality as proﬁt-
maximizing), we deal just with either facts which are the same for everyone or
conventions (e.g. agreements) which appear only after rationally motivated discus-
sions and hence are evident for the majority. Thus, according to constructivism, the
propositions being considered make claims about the world and these claims are true
just in the case the world is as it is claimed to be, or they are conventions that are
understandable for everybody who wants to understand. For example, if I can see
preferences of other people as such indeed, then I always can offer them something
for my proﬁt. We suppose there that facts are correlated with propositions in accor-
dance with logical positivism, i.e. there is a reference (correspondence) relation that
maps facts into (onto) propositions if we assume that each fact can be described by
one and only one (some) proposition(s) or there is a reference relation that maps
propositions into (onto) facts if we assume that each proposition describes one and
only one (some) fact(s). This approach to semantics was inspired by Aristotle and
hammered out by Bertrand Russell (1872–1970) and it is called Russellian semantics
[74, 75]. Rational agents can always agree, because they can verbally appeal to the
same facts or to the same conventions, i.e. they use the Russellian semantics.
Nevertheless, there are many empirical evidences which contradict the assumption
that, on the one hand, consumer behaviour is reasonably characterized as the max-
imization of expected lifetime utility subject to a budget constraint and conditional
on the available information and, on the other hand, ﬁrm behaviour is characterized
as the maximization of expected proﬁt subject to investments and conditional on the
correct programming of consumer behaviour. For example, Thaler [76, 77] shows

1.1 Designing a Biological Computer
7
the bounded rationality and impatience of consumers and, as a result, he proposes
the behavioural life-cycle theory emphasizing self-control, mental accounting, and
framing. According to his hypothesis, consumers maintain mental accounts that lead
them to treat various components of their wealth as non-fungible, e.g. instead of the
wealth-maximizing choice consumers can postpone the receipt of income in order
to control spending. In other words, very often consumers refer not to facts, but to
mental accounting which give no weight to the economically relevant cost of their
decision. Evidently, for mental accounting there are no Russellian semantics, since
for different people mental accounts can be different as well, i.e. they are not trans-
parent for everyone a priori. Psychologists Amos Tversky and Daniel Kahneman
established a research programme of studying cognitive heuristics and biases, i.e.
the programme of studying contexts and patterns which inﬂuence on human decisions
beyond rationality [78] (i.e. beyond logical positivism and classical game theory and
decision theory).
Propositions whose meanings depend upon contexts of utterances are called per-
formative. They are studied within the Austian semantics [74, 75] based on the ideas
of John Langshaw Austin (1911–1960). So, meanings of performative propositions
depend on contexts and can change in time. For example, investors in their perfor-
mative propositions (e.g. forecasts) might be optimistic, while at other times, they
might be pessimistic. The point is that with the lapse of time investors can build dif-
ferent families of intensions (intersected concepts) as the meaning of phenomenon.
For instance, under conditions of investor exuberance entrepreneurs prefer to cre-
ate closed-end funds, because they forecast that they can sell fund shares for more
than they are worth. These conditions are contexts for one family of meanings of
performative propositions connected to closed-end funds. Nevertheless, there can be
other families as well, e.g. conditions, where a closed-end fund is being liquidated.
Then investors forecast that at liquidation, the fund price will equal net asset value.
In ﬁnance there exists the notion of reference points at which investors make their
decisions. Reference points can be regarded as different families of intersected con-
cepts (different meanings of the performative proposition ‘I sell asset X’) also. Let
us assume that an investor invests $100,000 (purchase price) and hopes to sell for
$150,000 (aspiration price). If the selling price is reduced to be $120,000, this is a
gain compared to the purchase price as a reference point but a loss compared to the
reference point of the aspiration price.
Thus, we can point out that contexts, which determine the changing meanings
of performative propositions, are framed by behavioural scenarios that can vary in
different situations. For example, usually there is a phenomenon of managerial opti-
mism [79], i.e. managers overestimate the probability that the future performance of
their ﬁrm will be positive. Behavioural scenarios used in ﬁnance or everyday life may
be more or less rational. Complete irrational scenarios are called cognitive biases. Let
us enumerate some key examples of cognitive biases: anchoring (prior estimations);
mental accounting (individuals categorize their money for separate accounts based
on factors such as the source of money and intended purpose of the money); framing
(people may frame the risky outcome differently, either considering the worst case
or the best case); conﬁrmation and hindsight bias (paying more attention to infor-

8
1
Introduction
mation that supports our opinions); gambler’s fallacy (ignoring pre-existing events);
herd behaviour (copying actions of a larger group due to the social pressure of con-
formity, e.g. some investors may follow others to buy the same stocks); conﬁdence
(optimistic or pessimistic assessment of one’s ability to perform, e.g. in a period
of economic recession, people are less conﬁdent and more pessimistic about future
economic conditions and as a consequence they avoid risky decisions); overreaction
and availability bias (overreacting to dramatic and unexpected news occurrences, e.g.
bad news including falling stock prices), see [80–89]. Cognitive biases in ﬁnance are
studied within behavioural accounting (or human resource accounting) to consider
and integrate human behaviour into accounting decisions in an organization [90].
In contrast to cognitive biases, cognitive heuristics is grounded on efﬁcient, but (as
well) non-logical rules which people often apply to make effective decisions beyond
logical reasoning—e.g. decisions in risk situations, prompt decisions, creative deci-
sions and so on [78].
As we see, in behavioural economics and experimental psychology it was made
evident through experiments that classical game theory and decision theory assuming
the rationality of agents are too abstract, because real agents are too far from rational.
The problem is that preference relations are not so strongly linked to decisions. As a
consequence, a Boolean composition of preferences does not give a complex prefer-
ence for a complex decision. Mathematically, it means that complexes of preferences
as well as complexes of behavioural patterns are not additive.
Let us return to our task of designing the biological computer. From these exam-
ples taken from behavioural economics, we can assume that logical positivism is
unapplied in the logical modelling of the swarm behaviour, as well—because we
deal with a non-additivity of all natural behaviours. As a result, a Boolean compo-
sition of attractants and repellents cannot give an expected complex of behavioural
patterns in the standard way of constructing inductive sets.
Hence, due to recent results in behavioural economics we know that even in
human cognitions (which evaluated as the most rational among all animals) we
cannot avoid cognitive biases and cognitive heuristics which are a substantial part
in our decision making not only in everyday situations, but also in ﬁrms. Therefore,
cognitive reﬂexion and cognitive biases are evaluated now as a natural mechanism
of cognitions [91, 92].
Some primitive forms of cognitive biases and cognitive heuristics of unicellular
organisms were found out by us within the project Physarum Chip: Growing Comput-
ers from Slime Mould [50]. Even unicellular organisms behave differently in stress or
under favourable conditions. For instance, under the favourable condition (meeting
attractants) bacteria behave more predictable in choosing a trajectory of motion—
so, if a concentration of attractant increases, bacteria tumble less frequently. In the
stress (meeting repellents) bacteria try to change a trajectory stochastically—so, if a
concentration of repellent increases, bacteria tumble more frequently. As we see, we
face a duality in basic reactions of bacteria to their environment. It is a kind of the
most primitive “cognitive heuristics” detected at the bacterium level—to be more or
less predictable in a favourable or stress situation, respectively.

1.1 Designing a Biological Computer
9
Usually, bacteria react only to one stimulus: either to one attractant or to one
repellent. Nevertheless, they can build up swarms, also—bioﬁlms even with a com-
mon sensing quorum for collective reactions to many stimuli simultaneously [13].
There are different forms of bioﬁlms—from groups combining individuals mechani-
cally (such as Escherichia coli bacteria) to true swarms (such as Paenibacillus vortex
bacteria).
Many animals are able to form swarms, but even swarm animals can behave
individually, too. For example, cercariae—parasites of the genus Trichobilharzia
Skrjabin and Zakharov, 1920 (Schistosomatidae Stiles and Hassall, 1898)—behave
as free-swimming individuals in a favourable situation that is represented for them by
a normal natural environment where hosts can be ever found. However, under some
additional conditions, cercariae behave as one large group. For example, cercariae
of Bilharziella polonica (Trematoda: Schistosomatidae) can attach themselves to the
surface-ﬁlmofthewaterandthrowoutasecretionfromthemouth,whichformsakind
of web and instantly clings to the feathers of any duck with which it comes in contact
[93]. Another case of swarming of cercariae is presented by Rat king cercaria (or
Rattenkönig), see an example with Clypeomorus batillariaeformis Habe and Kosuge
in [94]. These cercariae bind to each other by the lower half of their tail to aggregate
into a swarm. Within this swarm they synchronise their movement to move as one
giant organism. When a ﬁsh eats this mass, the cercariae begin digging into the ﬁsh’s
mouth.
Amoebae of Physarum polycephalum can behave both individually and collec-
tively. Therefore, they can be considered a swarm, although they are unicellular
organisms in fact, but with myriad nuclei. We have discovered that the main feature
in perceiving external signals even by one cell due to actin ﬁlament networks is that
the same signal can be perceived differently—it depends on the cell shape and many
other internal circumstances. As a result, one unicellular organism bears more out-
puts than inputs in possible reactions to external signals. So, even one cell can have
“cognitive biases” and behave quite unpredictably and irrationally under the same
conditions. It means that amoebae of Physarum polycephalum and Amoeba proteus
can modify their own elementary actions—they possess a kind of “free will”.
Let us remember that there are the following two complementary mechanisms in
perceivingsignals:lateralinhibition(thestressconditionwhichincreasesthecontrast
of one signal to react more directly and efﬁciently and to be better focused) and lateral
activation (the comfortable condition which decreases the contrast of signals to
perform concurrent actions). Both mechanisms like many others in perceiving stimuli
arescale-invariant.Inparticular,lateralinhibitionandlateralactivationareubiquitous
events that occur over many scales including within the cell during assembling and
disassembling of actin ﬁlament waves, between groups of neurons within the visual
cortex to process visual cues, and between active zones of swarms to react to their
environments. In this book, different logical systems for modeling effects of lateral
inhibition and lateral activation are considered. An intelligent behaviour of animals
is called swarm in the book, because, on the one hand, the patterns of the swarm
behaviour is most intelligent among animals (at the same time they are well visible
and studied well experimentally) and, on the other hand, these patterns are scale-

10
1
Introduction
invariant (they can be detected even at the level of some unicellular organisms,
such as Physarum polycephalum or Amoeba proteus). The swarm behaviours should
be distinguished from social behaviours. So, in social behaviours, we deal with
symbolic values and symbolic interactions which are out of pure behaviourism in
the strict sense. Thus, this book offers some logical systems for studying the swarm
behaviours.
1.1.3
Experiments
My theoretical models of swarm behaviour were veriﬁed on experimental data with
Physarum polycephalum, Schistosomatidae, and people addicted to alcohol.
So, my research of Physarum polycephalum is fully based on the experimental
results obtained within the joint project Physarum Chip: Growing Computers from
Slime Mould [50] mainly at the following three institutions: (i) Unconventional Com-
puting Centre, University of the West of England (Bristol, UK); (ii) CNR-IMEM,
National Research Council (Consiglio Nazionale delle Ricerche) (Parma, Italy); (iii)
Institute of Plant Sciences, University of Graz (Graz, Austria). The detailed presen-
tation of results can be found in [95]. The majority of experiments were conducted
by Andrew Adamatzky (Bristol).
Experiments with Physarum polycephalum were usually performed by culturing
plasmodia on wet paper towels, by feeding them with oat ﬂakes (attractants), and by
moistening paper towels regularly. These paper towels are a nutrient-poor substrate.
In this condition, the plasmodium behaves in respect to attractants more predictably.
Each experiment does not exceed 5–7 days usually. There are two types of environ-
ment for plasmodia: (i) 2% agar gel or paper towels as nutrient-poor substrate, and
(ii) 2% oatmeal agar as a nutrient-rich substrate.
Another set of experimental results was granted for me by Ludmila Akimova.
She conducted some experiments with parasites of Schistosomatidae (Trematoda:
Digenea) at the State Scientiﬁc and Production Amalgamation “The Scientiﬁc and
Practical Center of the National Academy of Sciences of Belarus for Bioresources”
(Minsk, Belarus). She studied their group behaviours.
The third set of empirical data was obtained jointly with Vadim Fris, the Chief
Psychiatrist of the rehabilitation centre “Iscelenie” (Minsk, Belarus). We have carried
out a statistical research of group behaviour of 107 people addicted to alcohol who
have been actually treated in this centre.
I am grateful to Andrew Adamatzky, Ludmila Akimova, Vadim Fris and all other
collaborators within the project Physarum Chip: Growing Computers from Slime
Mould.

1.2 Methodology
11
1.2
Methodology
1.2.1
Tools for Studying Non-additive Behavioural Patterns
Experimental results of behavioural economics show that behaviours cannot be
deﬁned by additive measures, e.g. we cannot apply classical game theory and classi-
cal decision theory. Nevertheless, the non-additivity of behavioural phenomena and
everyday decisions does not mean that they cannot be studied mathematically. So,
there is a p-adic probability theory [96–102] (probability theory, where probability
measures are deﬁned not by real numbers, but by p-adic numbers), which is based
on non-additive measures. These measures are used also in p-adic quantum mechan-
ics developed since the publications of Igor Volovich [103]. Notice that the p-adic
numbers, where p is prime, are an alternative, to the real numbers, extension of the
ﬁeld of rational numbers by the construction of Cauchy sequences [104].
The main feature of p-adic probabilities (or more generally, non-Archimedean
probabilities or probabilities on inﬁnite streams [101, 102, 105–107]) is that they
do not satisfy additivity. For instance, we cannot obtain a partition for any set into
disjoint subsets whose sum gives the whole set. Using p-adic (non-Archimedean)
probabilities we can disprove the Aumann’s Agreement Theorem [107, 108] and
develop new mathematical tools for game theory, in particular we can deﬁne context-
basedgamesbymeansofcoalgebrasorcellularautomata[109, 110].Inthesecontext-
based games we can appeal solely to non-Archimedean probabilities. These games
can describe and formalize complex reﬂexive processes of behavioural ﬁnances (such
as short selling or long buying). As we see, avoiding additivity in probability theory
can have many important results of an epistemic nature in game theory.
Thus, my research is devoted to the analysis of some new logical methods, such as
p-adic or non-Archimedean many-valued logic and stream-valued [111–113] prob-
ability theory, which can be applied in behavioural sciences from the viewpoint
of non-additivity of behavioural patterns. Such methods could be used in decision
support systems as well.
Usually, in business intelligence the following mathematical methods are used:
classiﬁcation, regression, time series analysis, association rules, or clustering. All
these methods have developed within mathematical statistics and sciences, such as
conventional probability theory or econometrics. However, the possibilities for using
the newest logical methods based on stream values are not yet conclusively clariﬁed.
Among these methods the most signiﬁcant for my research are as follows: coalgebra
[114], non-well-founded set theory [115, 116], concurrent [117] and massive-parallel
computing [118, 119]. The logical theory of sensing and motoring in the swarm
behaviour is studied in my work within these methods. For example, the Aumann’s
agreement theorem uses inductive sets as the main construction. These sets are pos-
tulated upon the axiom of foundation [115]. However, there is a mathematics without
this axiom (the so-called non-well-founded mathematics). Within the limits of this
mathematics the Aumann’s agreement theorem is impossible [107, 108]. Hence, the
main goal of my research is to consider unconventional logical tools for analyzing the

12
1
Introduction
swarm sensing and motoring as non-well-founded data, i.e. as data without logical
atoms (these data cannot be measured by additive measures).
For the logical studies of sensing and motoring of swarms I use a special met-
alogic as a methodology of logical researches that combines many-valued logic,
epistemic logic, illocutionary logic, unconventional computing, process calculi, cel-
lular automata, etc. This metalogic deals with a metalanguage, which is rich enough
for the identiﬁcation of boundaries of behavioural patterns. This metalanguage reg-
ulates and contains formal conceptual equipment, languages which can be involved
in cognitive and behavioural sciences.
1.2.2
Tools of Unconventional Computing
My work in modelling the swam behaviour is carried out within unconventional
computing [54, 118–122], a new subject of scientiﬁc researches combining different
disciplines such as natural sciences, computation theory, applied mathematics, logic,
etc. In this new subject many signiﬁcant results are obtained and I apply them in the
logical modelling of swarm sensing and motoring as well.
The most basic notion in the conventional approach to algorithms implicitly used
in conventional data mining is the least ﬁxed point presupposing the induction princi-
ple (Noetherian induction), e.g. this notion is fundamental for recursion (in the mean-
ing of computable functions). However, the conventional treatment of an algorithm is
broken in unconventional computing models. The main originality of unconventional
computing is that just as conventional models of computation make a distinction
between the structural part of a computer, which is ﬁxed, and the data on which the
computer operates, which are variable, so unconventional models assume that both
structural parts and computing data are variable [54, 118]. Therefore the essential
point of conventional computation is that the physics is segregated once and for all
within the logic primitives. For instance, reaction-diffusion computing [118] is one
of the unconventional models built on spatially extended chemical systems, where
both the data and the results of the computation are encoded as concentration proﬁles
of the reagents, i.e. both change permanently. As a result, they cannot have a single
centralized source of control. Therefore the conventional deﬁnition of algorithm is
unapplied for unconventional computing models, because this deﬁnition is grounded
on controlling sequences of all steps.
Instead of recursion, in unconventional computing one can apply corecursion as
a type of operation that is dual to recursion [113]. Corecursion is typically used
to generate inﬁnite data structures. The rule for primitive corecursion on codata is
dual to that for primitive recursion on data. Instead of descending on the argument,
we ascend on the result. Notice that corecursion creates potentially inﬁnite codata,
whereas ordinary recursion analyzes necessarily ﬁnite data. By induction and recur-
sion we use the notion of least ﬁxed points, whereas by coinduction and corecursion
weusethenotionofgreatestﬁxedpoints(formoredetailsconcerningcoinductionand
corecursion see [111–113]). Within the concurrent and massive-parallel computing

1.2 Methodology
13
paradigm instead of induction and recursion only coinduction and corecursion can be
used [117, 123]. There are many studies in this ﬁeld. The point is that induction and
recursion determine enumerable collections of ﬁnite structures, while coinduction
and corecursion determine non-enumerable collections of inﬁnite structures, includ-
ing all possible modiﬁcations of behavioural patterns. As a result, conventional logic
cannot model interactive and massive-parallel processes of behaviours which are
non-enumerable and circular by deﬁnition.
Thus, in my research I appeal to interactive-computing/concurrency paradigm.
The latter assumes coinductive and corecursive methods to be used in computations.
Although in such paradigms, computation models may be abstract in the same mea-
sure as in Turing machines, they assume a combination of real contexts (physics)
and logic in the computation, as well as that found in cellular automata [119] or in
other unconventional computing models. In conventional computing, the computa-
tion is performed in a closed-box fashion, transforming a ﬁnite input, determined
by the start of the computation, to a ﬁnite output, available at the end of the com-
putation, in a ﬁnite amount of time. Therefore physical implementation does not
play a role in such a computation which may be considered a process in a black
box. As opposed to the conventional approach, in interactive models inputs and
outputs may be inﬁnite and computation in each point of the lattice may proceed
simultaneously and independently. In the biological computer we cannot use an
aprioristic approach with induction and recursion [109, 124]. However, if we want
to apply logical and mathematical tools to the biological computer we can refer to
an interactive-computing/concurrency paradigm [117].
The interactive-computing paradigm can describe concurrent/parallel computa-
tions whose conﬁguration may change during the computation. Within this paradigm,
there were proposed concurrency calculi, also known as process algebras [113, 117,
125, 126]. Process algebras are used in formalizing business processes including
decision making processes.
1.2.3
Anti-platonism
From the standpoint of philosophy, I avoid Platonism in setting up the new approach
to analysing behavioural patterns. The presuppositions of Platonism allowed us to
generate the axiomatic method in mathematics. According to Platonism, there exist
entities with a conclusive absolute status of existence (primary objects of mathe-
matics, e.g. notions of point or line in geometry) and there are propositions with
the highest persuasiveness and evidence (axioms). Actually, Platonism is a corner
stone of classical mathematics. The axiomatic method aims to obtain a maximum
of information from a minimum of premises. David Hilbert (1862–1943) in his pro-
gram of foundations of mathematics considered the axiomatic method (respectively,
Platonic assumptions) as a paramount factor in mathematical thinking. In the main
points of his program, Hilbert postulated a formal theory that should have included
all classical mathematics with appropriate proofs of inconsistency, completeness and

14
1
Introduction
decidability of this theory by ﬁnite methods. Hilbert’s program in its ﬁrst meaning
became unsolvable, but it has caused the mathematics development. The formal the-
ory obtained by Hilbert should be constructed on the basis of axioms of two types:
(i) logical axioms which set reasoning rules and (ii) non-logical axioms by which
a primary object of mathematics is deﬁned. In the decision approach proposed in
my work, I appeal to massively parallel proof theory, where there are no axioms
[109, 124]. Thus, anti-Platonic logic and mathematics is understood as satisfying
the following basic presuppositions:
• there are no propositions that are true on any class K of models (i.e. there are no
logical axioms);
• there are no non-logical axioms, we draw conclusions from premises having equal
status, all formulas are inferred from hypotheses;
• ﬁnally, any object has only a relative existence.
Within these assumptions, derivations without using axioms are built up, there-
fore there is no sense in distinguishing logic and theory (i.e. logical and non-logical
axioms), derivable and provable formulas, etc. In such a formal theory, the conclusion
is understood as massive-parallel computing, i.e. the deduction is considered a tran-
sition of an automaton. This formal proof theory is reduced to an appropriate cellular
automaton which is called a proof-theoretic cellular automaton, whose cell states are
regarded as well-formed formulas of a logical language. As a result, in deduction
we do not obtain derivation trees and instead of the latter we ﬁnd derivation traces,
i.e. a linear evolution of each singular premise. Thereby some derivation traces may
be circular, i.e. some premises could be derivable from themselves, and hence some
derivation traces may be inﬁnite. Propositions from circular derivations are said to
be analytic a posteriori. Other propositions are called synthetic a posteriori. Proof-
theoretic cellular automata can be used for aposterioristic decision making [109,
110]. Aposterioristic logics can be used in formulating context-based decision rules
in games [127, 128]. Usually, for representing databases of games, payoff matrices
are involved. However, in the case of coinductive databases we cannot appeal to pay-
off matrices. For example, we cannot appeal to them if we deal with games limited
by some unstable contexts or with inﬁnite games. I have shown that some kinds of
coinductive databases for making decisions could be presented by payoff cellular
automata, a kind of proof-theoretic cellular automata [109]. Notice that such efforts
to build a formal theory of massively parallel and competing decision making are
relatively new.
1.2.4
Object-Oriented Programming Language
On the basis of process-algebraic formalization of swarm propagations within the
interactive-computing/concurrency paradigm, in the project Physarum Chip: Grow-
ing Computers from Slime Mould, Krysztof Pancerz and me have developed a new
object-oriented programming language OPL-Ph for controlling the swarm behaviour

1.2 Methodology
15
by placing attractants and repellents. This language has been used by us for control-
ling plasmodia of Physarum polycephalum.
The plasmodium behaves differently under comfortable and stress conditions.
The comfortable conditions are determined by a nutrient-rich substrate of plasmod-
ium feeding and the stress conditions are determined by a nutrient-poor substrate.
So, if the plasmodium feeds under the condition of nutrient-poor substrate, then it
can distinguish all attractants and repellents, and, as a result, those attractants and
repellents involved in the stimulation of plasmodium gives a topology which can be
deﬁned as a Voronoi diagram [129, 130]. Within one Voronoi cell a reagent has a full
power to attract or repel the plasmodium. In other words, within this cell the reagent
determines the plasmodium behaviour completely. On the board of Voronoi cells,
the plasmodium cannot choose its one further direction and splits. Within the same
Voronoi cell two active zones will fuse. Now, suppose that the plasmodium feeds
under the condition of nutrient-rich substrate. This means that for the plasmodium
there is an information noise and the plasmodium cannot deﬁne where precisely
attractants are located indeed. Hence, in the case of nutrient-poor substrate with
well distinguished localizations of attractants and repellents we can fully manage
the plasmodium behaviour and propose a biological version of storage modiﬁcation
machines. These machines are well deﬁned in our programming language OPL-Ph
[131–137]. Notice that under the conditions of nutrient-rich substrate, storage mod-
iﬁcation machines on plasmodia cannot be conventional. The point is that under
these conditions we cannot approximate elementary (atomic) acts, i.e. we deal with
a massive-parallel behaviour of plasmodia (they are to be expanded in all possible
directions). Hence, we must extend our OPL-Ph by some unconventional tools to
make OPL-Ph applicable for the case of nutrient-rich substrate, also. Rough sets on
transitions have become these new tools for us [62, 138–141].
Withinour programminglanguageOPL-Ph, wecancheckpossibilities of practical
implementations of storage modiﬁcation machines on a swarm behaviour and their
applications to behavioural science such as behavioural economics and game theory
[109, 127, 128, 133, 138, 140, 142–144]. The proposed OPL-Ph can be used for
developing programs for swarms by the spatial conﬁguration of stationary nodes.
Geometrical distribution of stimuli can be identiﬁed with a low-level programming
language for controlling the swarm behaviour.
Any swarm propagation is stimulated by attractants and repellents and on the basis
of the ladder diagram language we can use Programmable Logic Controllers for
programming swarms. Rungs of the ladder can consist of serial or parallel connected
paths of swarm propagation. A kind of connection depends on the arrangement
of regions of inﬂuences of individual stimuli. If both stimuli inﬂuence a swarm, we
obtainalternativepathsforitspropagation.Itcorrespondstoaparallelconnection(i.e.
the OR gate). If the stimuli inﬂuence the swarm sequentially, at the beginning only
the ﬁrst one, then the second one, we obtain a serial connection (i.e. the AND gate).
The NOT gate is imitated by the repellent avoiding the swarm propagation. In the
proposed approach, we have assumed that each attractant (repellent) is characterized
by its region of inﬂuence in the form of a circle surrounding the location point of
the attractant (repellent), i.e. its center point. The intensity determining the force

16
1
Introduction
of attracting (repelling) decreases as the distance from it increases. A radius of the
circle can be set assuming some threshold value of the force. The swarm members
must occur in a proper region to be inﬂuenced by a given stimulus. This region is
determined by the radius depending on the intensity of the stimulus. Controlling
the swarm propagation is realised by activating/deactivating stimuli. Logic values
for inputs have the following meaning in terms of states of stimuli: 0 means that
attractant/repellent is deactivated, 1 means that attractant/repellent is activated. Logic
values for outputs have the following meaning in terms of states of stimuli: 0 is an
absence of swarm members at the attractant, 1 is a presence of swarm members at
the attractant.
Also, we can adopt more abstract models than distribution of stimuli to program
swarms which can be identiﬁed with programming in the high-level language, such
as Petri nets. We have shown how to build Petri net models on swarm behaviours
[136, 137]. In our approach, we use Petri nets with inhibitor arcs. Inhibitor arcs are
used to disable transitions. Inhibitor arcs test the absence of tokens in a place. A
transition can only be if all its places connected through inhibitor arcs are empty.
This ability of Petri nets with inhibitor arcs is used to model behaviour of repellents.
In the proposed Petri net models, we can distinguish three kinds of places:
• Places representing a swarm. For such a place, the presence of the token means
that a member of swarm is present in the origin point. Otherwise, the absence of
the token means that there is no swarm members.
• Places representing input attractants or repellents. For such a place, the presence
of the token means that the attractant/repellent is activated. Otherwise, the absence
of the token means that attractant/repellent is deactivated.
• Places representing output attractants. For such a place, the presence of the token
denotes the present of swarm members at the attractant (the swarm members
occupy the attractant). Otherwise, the absence of the token denotes the absence of
swarm members at the attractant.
In the AND gate, the transition T represents the ﬂow (propagation) of swarm from
the origin place to the output attractant. T is enabled to ﬁre if both attractants are
activated. In the OR gate, the transitions T1 and T2 represent the alternative ﬂows of
plasmodium from the origin place to the output attractant. T1 is enabled to ﬁre if the
ﬁrst attractant is activated. T2 is enabled to ﬁre if the second attractant is activated.
In the NOT gate, the transition T represents the ﬂow (propagation) of plasmodium
from the origin place to the output attractant. T is enabled to ﬁre if the repellent is
deactivated.
In our OPL-Ph we have analysed biological mechanisms for Physarum poly-
cephalum decision making and reconstructed the so-called concurrent games of plas-
modia [109, 127, 128, 133, 138, 140, 142–144]. So, attractants may be regarded
as payoffs for Physarum polycephalum. Plasmodia occupy attractants step by step.
By different localizations of attractants we can affect on Physarum polycephalum
motions differently. We can interpret the stimuli for plasmodium motions as Boolean
functions on payoffs. Boolean functions are designed by logical gates mentioned
above. In this way we have designed the zero-sum game between plasmodia of

1.2 Methodology
17
Physarum polycephalum and Badhamia utricularis, the so-called PHY game. To
simulate Physarum polycephalum games, we have created a specialized software
tool. The tool works under the client-server paradigm. The server window contains:
• a text area with information about actions undertaken;
• a combox for selecting one of two deﬁned situations;
• start and stop server buttons.
A communication between clients and the server is realized through text mes-
sages containing statements of OPL-Ph. The locations of attractants and repellents
are determined by the players during the game. At the beginning, origin points of
Physarum polycephalum and Badhamia utricularis are scattered randomly on the
plane. During the game, players can place stimuli. New veins of plasmodia are cre-
ated. The server sends to the clients information about the current localization of
origin points of Physarum polycephalum and Badhamia utricularis, localization of
stimuli as well as a list of edges, corresponding to veins of plasmodia, between active
points.
So, we have proposed a game-theoretic visualization of morphological dynamics
withnonsymbolicinterfacesbetweenlivingobjectsandhumans.Thesenon-symbolic
interfaces are more general than just soniﬁcation and have a game-theoretic form. The
user interface for this game is designed on the basis of the following game steps: ﬁrst,
the system of OPL-Ph generates locations of attractants and repellents; second, we
can chose n plasmodia/agents of Physarum polycephalum and m plasmodia/agents
of Badhamia utricularis; third, we obtain the task, for example to reach as many as
possible attractants or to construct the longest path consisting of occupied attractants,
etc.; fourth, we can choose initial points for Physarum polycephalum transitions and
initial points for Badhamia utricularis transitions; ﬁfth, we start to move step by step;
sixth, we deﬁne who wins, either Physarum polycephalum or Badhamia utricularis.
Strategies in games between Physarum polycephalum and Badhamia utricularis are
described by rough sets deﬁned on transition systems [62, 138–141]. We claim that
bio-inspired games might wake new interests in designing new games and new game
platforms. These games can simulate zero-sum games between different swarms.
To sum up, in the project Physarum Chip: Growing Computers from Slime Mould,
Krysztof Pancerz and me have developed the object-oriented programming language
OPL-Ph that can be used as a basic programming language for the biological com-
puter. I am grateful to Krysztof Pancerz for his collaboration.
My book contains fundamental theoretical results for designing object-oriented
programming languages for controlling swarms.
In Chap. 2, I show that some unicellular organisms, such as Physarum poly-
cephalum or Amoeba proteus, have basic features of swarms in their behaviours due
to actin ﬁlament networks. Notice that Amoeba proteus behaves as a swarm at short
ranges and Physarum polycephalum behaves as a swarm on long distance. It means
that in order to design the biological computer it is enough to design an artiﬁcial cell
with actin ﬁlament networks.
In Chap. 3, I concentrate on chemical dynamics explaining sensing and motoring
of swarms. The formalization of this dynamics is grounded on reaction-diffusion

18
1
Introduction
computations [53, 118, 129, 145–147] explaining the phenomenon of auto-waves of
chemical self-organized systems. One of the best examples how chemical reactions
can transmit signals and be ‘intelligent’ is the Belousov-Zhabotinsky reaction. The
difference of living systems from the Belousov-Zhabotinsky reaction is that the living
systems are instable in the meaning that they can change their decisions and they can
behavedifferentlyunderthesameouterconditionsiftheyareinstressornot.Ipropose
a process-algebraic formalization of Physarum polycephalum behaviour. Within this
formalization we can formulate some performative propositions of plasmodia, such
as ‘I would like to eat Ψ ’, ‘I fear Ψ ’, and ‘I am almost satisﬁed by Ψ ’. If the
plasmodium is under stress and its behaviour can be completely controlled, then we
can design some conventional logic gates on it, such as the Flip-Flop circuit, the
FEYNMAN gate, the TOFFOLI gate, the FREDKIN gate, the CNOT gate, the Full
Adder circuit, etc. If the plasmodium is under favourable conditions, then we can
design some unconventional logic gates based on non-linear permutation groups.
In Chap. 4, I show that each swarm behaviour can be formalized in the way of
process algebra, described in Chap. 3. On swarms we can implement Kolmogorov-
Uspensky machines [52], Schönhage’s storage modiﬁcation machines, and random-
access machines, but these implementations would have a low accuracy. The problem
is that any swarm can follow some emergent patterns which are fully eliminated in
conventional automata such as Kolmogorov-Uspensky machines. It is worth noting
thatconventionalautomataaresuitableforsimulatingswarmsjustattheirdiscovering
stage—when they are looking for attractants without an information noise. At the
logistic stage they are constructing networks, which change permanently. So, in this
case some emergent patterns appear and conventional automata become unapplied.
In this chapter, I propose a logic of strings imitating the swarm paths and having
logical values on p-adic integers. This logic can simulate the swarm behaviour under
different conditions, including stress and information noise, and at different stages,
including the discovering stage and the logistic stage.
In Chap. 5, I construct the following non-Archimedean logics for simulating
swarm paths: (i) the logic ŁΠ∀∞with truth values on the set of hyperrational or
hyperreal numbers of [0, 1] (this logic is an extension of fuzzy logic ŁΠ∀deﬁned
in [148–151]); (ii) the logic BL∀∞with truth values on the set of p-adic integers
(it is an extension of fuzzy logic BL∀deﬁned in [148–151]). Both logics are called
non-Archimedean, because their truth values assume inﬁnitesimals (inﬁnitely small
numbers) or inﬁnitely large integers and, therefore, for them the Archimedean axiom
is not valid. Some versions of standard fuzzy logic BL∀are as follows: Łukasiewicz’s
logic, Gödel’s logic, and Product logic. I propose a non-Archimedean extension of
them. Then I formalize BL∀∞with values on hyperrational or hyperreal numbers
of [0, 1] and with values on p-adic integers. Also, I deﬁne non-Archimedean proba-
bilities (probabilities on hyperrational or hyperreal numbers of [0, 1] and probabili-
ties on p-adic numbers) and I formalize the non-Archimedean probability logic. By
using p-adic valued probabilities, I deﬁne knowledge operators on some propositions
describing experiments with swarms, such as ‘Attractants, which can be occupied
by agent i’, ‘Attractants accessible for the attractant Ni by a road system’, etc. For
these knowledge operators the Aumann’s agreement theorem is not valid (as I show

1.2 Methodology
19
in Chap. 10). Within the p-adic valued logic I deﬁne p-adic valued adder and p-adic
valued subtracter on swarm behaviours and possible p-adic valued natural deductions
within the swarm paths.
In Chap. 6, it is shown that the swarm behaviour cannot be measured by additive
measures because of the phenomenon of individual-collective duality, when we can-
not approximate atomic individual acts (the matter is that a swarm can behave indi-
vidually, as one agent, or collectively, as a group of agents with concurrent actions).
So, the double-slit experiment with Physarum polycephalum as well as with any
other swarm demonstrates that we cannot approximate its single actions. But we
can use p-adic fuzzy and probability measures which are not additive to simulate
the swarm behaviour. For describing experiments with swarms, I introduce a p-adic
fuzzy syllogistic. On the basis of p-adic valued logic, it is possible to design p-adic
valued fuzzy logic controllers of swarm propagations.
In Chap. 7, there is deﬁned a syllogistic system for atomic propositions with
two quantiﬁers: ‘all neighbour attractants/repellents of an attractant/repellent’ and
‘some neighbour attractants/repellents of an attractant/repellent’. This syllogistic for
swarms is veriﬁed in the p-adic valued universe of stimuli for controlling the swarm
behaviour. In this chapter, I examine a syllogistic under stress (Aristotelian) and
a syllogistic under favourable conditions (non-Aristotelian). The non-Aristotelian
syllogistic can be used, for example, for simulating the propagation of cercariae—
parasites of the genus Trichobilharzia Skrjabin and Zakharov, 1920 (Schistosomati-
dae Stiles and Hassall, 1898).
In Chap. 8, the behaviour of swarms is represented as a bio-inspired game, for
which all basic deﬁnitions are veriﬁed in the experiments with swarms, such as
Physarum polycephalum. This game depends upon localizations of attractants and
repellents in the p-adic universe, i.e. it depends on the number p −1 how many
attractants and repellents can be detected by a swarm at each time step of its prop-
agation. If there are not more than 4 attractants or repellents at each step, we deal
with the 5-adic universe. In this 5-adic universe we can deﬁne a Go game as a zero-
sum game between two species of the slime mould: Physarum polycephalum and
Badhamia utricularis. The bio-inspired game deﬁned in this chapter is especially
interesting taking into account the fact that we cannot use classical game theory built
on additive measures for simulating the swarm behaviour. The bio-inspired game
theory proposed by me is based on context-based (or hybrid) actions assuming an
unlimited variety of possible modiﬁcations of elementary acts.
In Chap. 9, there is introduced a basic logic for preference relations of swarm. We
know that each action of swarm can have many possible modiﬁcations. As a conse-
quence, preference relations of swarm are being modiﬁed, also. In this logic I focus
on the following two ways of modiﬁcations in sensing and motoring: (i) the stress
condition with increasing the proto-symbolic value of item; and (ii) the favourable
condition with decreasing the proto-symbolic value of concrete items. Then I deﬁne
an illocutionary logic for preference relations under stress and favourable conditions.
This logic is veriﬁed on the group behaviour of alcoholics, too. Their behaviour can
be managed by localization of places for meeting to drink.

20
1
Introduction
In Chap. 10, I propose a generalization of bio-inspired games in the form of
reﬂexive games. In these games we try to cheat other players. These games are based
on non-Archimedean probabilities, as well, and by using these probabilities we can
reject the Aumann’s agreement theorem. Instead of the Aumann’s statement, we can
prove that the reﬂexion disagreement theorem is valid. According to this theorem, I
can always cheat.
In Chap. 11, I show that bio-inspired and reﬂexive games can be represented in
the form of especial cellular automata, where the more modiﬁed a cellular-automatic
transition rule is at each time step, the more reﬂexive our game is. So, the Belousov-
Zhabotinsky reaction can be described as a cellular automaton, for which the transi-
tion rule does not change. It means that it is a game of zero reﬂexion. If a transition
rule is being modiﬁed at each time step, we deal with a reﬂexion of inﬁnite level.
Human beings are able to some higher reﬂexive levels. The inﬁnite level is just an
abstraction.
In Chap. 12, the rule from the Talmud qal wa-h. omer is analysed. It is shown that
this rule can simulate a spatial dynamics of swarm propagation under the favourable
conditions, e.g. it was exempliﬁed by the ant networking. Then I show that some anal-
ogy reasoning similar to qal wa-h. omer are applied by mathematicians in cognitions
of proof threes of several theorems simultaneously.
References
1. Bonabeau, E., Dorigo, M., Theraulaz, G.: Swarm Intelligence: From Natural to Artiﬁcial
Systems. Oxford University Press (1999)
2. Kennedy, J., Eberhart, R.: Swarm Intelligence. Morgan Kaufmann Publishers, Inc. (2001)
3. Zelinka, I., Chen, G. (eds.): Evolutionary Algorithms, Swarm Dynamics and Complex Net-
works: Methodology, Perspectives and Implementation, vol. 26. Springer (2017)
4. Beni, G., Wang, J.: Swarm intelligence in cellular robotic systems. In: Dario, P., Sandini, G.,
Aebischer, P. (eds.) Robots and Biological Systems: Towards a New Bionics?, pp. 703–712.
Springer, Berlin (1993)
5. Dorigo, M., Stutzle, T.: Ant Colony Optimization. MIT Press (2004)
6. John, A., Schadschneider, A., Chowdhury, D., Nishinari, K.: Characteristics of ant-inspired
trafﬁc ﬂow. Swarm Intell. 2(1), 25–41 (2008). https://doi.org/10.1007/s11721-008-0010-8
7. Karaboga, D.: An idea based on honey bee swarm for numerical optimization. Technical
report-tr06, Engineering Faculty, Computer Engineering Department, Erciyes University
(2005)
8. Karaboga, D., Akay, B.: A comparative study of artiﬁcial bee colony algorithm. Appl. Math.
Comput. 214(1), 108–132 (2009)
9. Michener, C.: Comparative social behavior of bees. Annu. Rev. Entomol. 14, 299–342 (1969).
https://doi.org/10.1146/annurev.en.14.010169.001503
10. Abrahams, M., Colgan, P.: Risk of predation, hydrodynamic efﬁciency, and their inﬂuence on
school structure. Environ. Biol. Fishes 13(3), 195–202 (1985)
11. Viscido, S., Parrish, J., Grunbaum, D.: Individual behavior and emergent properties of ﬁsh
schools: a comparison of observation and theory. Marine Ecol. Prog. Series 273, 239–249
(2004)
12. Reynolds, C.W.: Flocks, herds, and schools: a distributed behavioral model. Comput. Graph.
21, 25–34 (1987)

References
21
13. Ben-Jacob, E.: Social behavior of bacteria: from physics to complex organization. Eur. Phys.
J. B 65(3), 315–322 (2008)
14. Ingham, C.J., Ben-Jacob, E.: Swarming and complex pattern formation in paenibacillus vortex
studied by imaging and tracking cells. BMC Microbiol. 36, 8 (2008)
15. Ingham, C.J., Kalisman, O., Finkelshtein, A., Ben-Jacob, E.: Mutually facilitated dispersal
between the nonmotile fungus aspergillus fumigatus and the swarming bacterium paeni bacil-
lus vortex. Proc. Nat. Acad. Sci. U.S.A. 108(49), 19731–19736 (2011)
16. Ivanitsky, G.R., Kunisky, A.S., Tzyganov, M.A.: Study of ‘target patterns’ in a phage-
bacterium system. In: Krinsky, V. (ed.) Self-organization: Autowaves and Structures Far From
Equilibrium, pp. 214–217. Springer, Heidelberg (1984)
17. Margenstern, M.: Bacteria inspired patterns grown with hyperbolic cellular automata. In:
HPCS, pp. 757–763 (2011)
18. Passino, K.M.: Biomimicry of bacterial foraging for distributed optimization and control.
Control Syst. 22(3), 52–67 (2002)
19. Tsuda, S., Aono, M., Gunji, Y.P.: Robust and emergent Physarum-computing. BioSystems
73, 45–55 (2004)
20. Kassabalidis, I., El-Sharkawi, M.A., Marks, R.J., Arabshahi, P., Gray, A.A.: Swarm intelli-
gence for routing in communication networks. In: 2001 Global Telecommunications Confer-
ence, GLOBECOM ’01, vol. 6, pp. 3613–3617. IEEE (2001)
21. Ariel, G., Shklarsh, A., Kalisman, O., Ingham, C., Ben-Jacob, E.: From organized internal
trafﬁc to collective navigation of bacterial swarms. New J. Phys. 15, 12501 (2013)
22. Shklarsh, A., Finkelshtein, A., Ariel, G., Kalisman, O., Ingham, C., Ben-Jacob, E.: Collective
navigation of cargo-carrying swarms. Interface Focus 2, 689–692 (2012)
23. Nakagaki, T., Iima, M., Ueda, T., Nishiura, Y., Saigusa, T., Tero, A., Kobayashi, R., Showalter,
K.: Minimum-risk path ﬁnding by an adaptive amoeba network. Phys. Rev. Lett. 99, 68–104
(2007)
24. Nakagaki, T., Yamada, H., Tothm, A.: Path ﬁnding by tube morphogenesis in an amoeboid
organism. Biophys. Chem. 92, 47–52 (2001)
25. Shirakawa, T., Yokoyama, K., Yamachiyo, M., Gunji, Y.-P., Miyake, Y.: Multi-scaled adapt-
ability in motility and pattern formation of the Physarum plasmodium. Int. J. Bio-Inspir.
Comput. 4, 131–138 (2012)
26. Watanabe, S., Tero, A., Takamatsu, A., Nakagaki, T.: Trafﬁc optimization in railroad networks
using an algorithm mimicking an amoeba-like organism. Physarum plasmodium. Biosystems
105(3), 225–232 (2011)
27. Whiting, J.G.H., de Lacy Costello, B., Adamatzky, A.: Transfer function of protoplasmic
tubes of Physarum polycephalum. Biosystems 128, 48–51 (2015)
28. Dorigo, M., Gambardella, L.M.: Ant colonies for the travelling salesman problem. Biosystems
43(2), 73–81 (1997). https://doi.org/10.1016/S0303-2647(97)01708-5
29. Zhu, L., Aono, M., Kim, S.J., Hara, M.: Amoeba-based computing for traveling salesman
problem: long-term correlations between spatially separated individual cells of Physarum
polycephalum. Biosystems 112(1), 1–10 (2013). https://doi.org/10.1016/j.biosystems.2013.
01.008
30. Tero,A.,Nakagaki,T.,Toyabe,K.,Yumiki,K.,Kobayashi,R.:AmethodinspiredbyPhysarum
for solving the Steiner problem. Int. J. Unconv. Comput. 6(2), 109–123 (2010)
31. Ozbakir, L., Baykasoglu, A., Tapkan, P.: Bees algorithm for generalized assignment problem.
Appl. Math. Comput. 215(11), 3782–3795 (2010). https://doi.org/10.1016/j.amc.2009.11.018
32. Nakagaki, T., Yamada, H., Toth, A.: Maze-solving by an amoeboid organism. Nature 407,
470–470 (2000)
33. Ntinas, V.G., Vourkas, I., Sirakoulis, G.C., Adamatzky, A.: Oscillation-based slime mould
electronic circuit model for maze-solving computations. IEEE Trans. Circuits Syst. 64-I(6),
1552–1563 (2017)
34. Kalogeiton, V.S., Papadopoulos, D.P., Georgilas, I., Sirakoulis, G.C., Adamatzky, A.: Cellular
automaton model of crowd evacuation inspired by slime mould. Int. J. Gen. Syst. 44(3), 354–
391 (2015). https://doi.org/10.1080/03081079.2014.997527

22
1
Introduction
35. Adamatzky, A., Yang, X., Zhao, Y.: Slime mould imitates transport networks in China. Int. J.
Intell. Comput. Cybern. 6(3), 232–251 (2013). https://doi.org/10.1108/IJICC-02-2013-0005
36. Adamatzky, A., Ilachinski, A.: Slime mold imitates the united states interstate system. Com-
plex Syst. 21(1) (2012)
37. Schumann, A., Fris, V.: Swarm intelligence among humans—the case of alcoholics. In: Pro-
ceedings of the 10th International Joint Conference on Biomedical Engineering Systems and
Technologies—Volume 4: BIOSIGNALS, (BIOSTEC 2017), pp. 17–25. ScitePress (2017)
38. Helbing, D., Farkas, I., Vicsek, T.: Simulating dynamical features of escape panic. Nature
407(6803), 487–490 (2000). https://doi.org/10.1038/35035023
39. Shirakawa, T., Gunji, Y.-P., Miyake, Y.: An associative learning experiment using the plas-
modium of Physarum polycephalum. Nano Commun. Netw. 2, 99–105 (2011)
40. Traversa, F.L., Pershin, Y.V., Di Ventra, M.: Memory models of adaptive behavior. IEEE
Trans. Neural Netw. Learn. Syst. 24(9), 1437–1448
41. Ball, P.: Slime mould displays remarkable rhythmic recall. Nature 451, 385 (2008). https://
doi.org/10.1038/451385a
42. Saigusa, T., Tero, A., Nakagak, T., Kuramoto, Y.: Amoebae anticipate periodic events. Phys.
Rev. Lett. 100(1), 018101 (2008)
43. Skoge, M., Yue, H., Erickstad, M., Bae, A., Levine, H., Groisman, A., Loomis, W.F., Rap-
pel, W.J.: Cellular memory in eukaryotic chemotaxis. Proc. Nat. Acad. Sci. U.S.A. 111(40),
14448–14453 (2014). https://doi.org/10.1073/pnas.1412197111
44. Wang, Y., Li, B., Weise, T., Wang, J., Yuan, B., Tian, Q.: Self-adaptive learning based particle
swarm optimization. Inf. Sci. 181(20), 4515–4538 (2011)
45. Dimonte, A., Berzina, T., Pavesi, M., Erokhin, V.: Hysteresis loop and cross-talk of organic
memristive devices. Microelectron. J. 45(11), 1396–1400 (2014). https://doi.org/10.1016/j.
mejo.2014.09.009
46. Erokhin, V.: On the learning of stochastic networks of organic memristive devices. Int. J.
Unconv. Comput. 9(3–4), 303–310 (2013)
47. Erokhin, V., Howard, G.D., Adamatzky, A.: Organic memristor devices for logic elements with
memory. Int. J. Bifurc. Chaos 22(11) (2012). https://doi.org/10.1142/S0218127412502835
48. Pershin, Y.V., La Fontaine, S., Di Ventra, M.: Memristive model of amoeba learning. Phys.
Rev. E 80(2), 021926 (2009)
49. Pershin, Y.V., Di Ventra, M.: Memristive and memcapacitive models of Physarum learning.
In: Advances in Physarum Machines, pp. 413–422. Springer (2016)
50. Adamatzky, A., Erokhin, V., Grube, M., Schubert, T., Schumann, A.: Physarum chip project:
growing computers from slime mould. Int. J. Unconv. Comput. 8(4), 319–323 (2012)
51. Schumann, A., Pancerz, K.: Logics for physarum chips. Studia Humana 5(1), 16–30 (2016).
https://doi.org/10.1515/sh-2016-0002
52. Adamatzky, A.: Physarum machine: implementation of a Kolmogorov-Uspensky machine on
a biological substrate. Parallel Process. Lett. 17(4), 455–467 (2007)
53. Adamatzky, A.: Physarum machines: encapsulating reaction-diffusion to compute spanning
tree. Naturwisseschaften 94, 975–980 (2007)
54. Adamatzky, A.: Physarum Machines: Computers from Slime Mould. Series on Nonlinear
Science. Series A. World Scientiﬁc (2010)
55. Adamatzky, A.: Slime mould logical gates: exploring ballistic approach. In: Applications,
Tools and Techniques on the Road to Exascale Computing, vol. 1, pp. 41–56 (2010)
56. Adamatzky, A.: Slime mould computing. Int. J. Gen. Syst. 44(3), 277–278 (2015)
57. Adamatzky, A., Schubert, T.: Slime mold microﬂuidic logical gates. Mater. Today 17(2),
86–91 (2014)
58. Berzina, T., Dimonte, A., Cifarelli, A., Erokhin, V.: Hybrid slime mould-based system for
unconventional computing. Int. J. Gen. Syst. 44(3), 341–353 (2015). https://doi.org/10.1080/
03081079.2014.997523
59. Jones, J., Mayne, R., Adamatzky, A.: Representation of shape mediated by environmental
stimuli in Physarum polycephalum and a multi-agent model. JPEDS 32(2), 166–184 (2017)

References
23
60. Jones, J.D., Adamatzky, A.: Towards Physarum binary adders. Biosystems 101(1), 51–58
(2010)
61. Mayne, R., Adamatzky, A.: Slime mould foraging behaviour as optically coupled logical
operations. Int. J. Gen. Syst. 44(3), 305–313 (2015). https://doi.org/10.1080/03081079.2014.
997528
62. Pancerz, K., Schumann, A.: Rough set models of Physarum machines. Int. J. Gen. Syst. 44(3),
314–325 (2015)
63. Schumann, A.: p-adic valued logical calculi in simulations of the slime mould behaviour.
J. Appl. Non-Class. Log. 25(2), 125–139 (2015). https://doi.org/10.1080/11663081.2015.
1049099
64. Schumann, A.: Towards slime mould based computer. New Math. Nat. Comput. 12(2), 97–111
(2016). https://doi.org/10.1142/S1793005716500083
65. Whiting, J.G., de Lacy Costello, B.P., Adamatzky, A.: Slime mould logic gates based on
frequency changes of electrical potential oscillation. Biosystems 124, 21–25 (2014)
66. Baum, W.: Understanding Behaviorism: Behavior, Culture, and Evolution. Blackwell Pub
(2005)
67. Cheney, C., Ferster, C.: Schedules of Reinforcement. Copley Publishing Group (1997)
68. Skinner, B.F.: About Behaviorism. Random House Inc, New York (1976)
69. Bandura, A.: Self-efﬁcacy mechanism in human agency. Am. Psychol. 37, 122–147 (1982)
70. Aumann, R.J.: Agreeing to disagree. Ann. Stat. 4(6), 1236–1239 (1976)
71. Aumann, R.J.: Notes on Interactive Epistemology. Mimeo, Hebrew University of Jerusalem,
Jerusalem (1989)
72. Berger, P., Luckmann, T.: The Social Construction of Reality. Anchor Books (1971)
73. Smith, V.L.: Constructivist and ecological rationality in economics. Am. Econ. Rev. 93(3),
465–508 (2003)
74. Barwise, J., Etchemendy, J.: The Liar. Oxford University Press, New York (1987)
75. Barwise, J., Moss, L.: Vicious Circles. Stanford (1996)
76. Thaler, R.: Saving, fungibility, and mental accounts. J. Econ. Perspect. 4(1), 193–205 (1990)
77. Thaler, R.: Psychology and saving policies. Am. Econ. Rev. 84(2), 186–192 (1994)
78. Tversky, A., Kahneman, D.: Judgments under uncertainty: Heuristics and biases. Science
185(4157), 1124–1131 (1974)
79. Heaton,J.B.:Managerialoptimismandcorporateﬁnance.Financ.Manag.31(2),33–45(2002)
80. Arnold, V., Sutton, S.: Behavioural Accounting Research: Foundations and Frontiers. Amer-
ican Accounting Association (1997)
81. Barberis, N., Huang, M.: Mental accounting, loss aversion, and individual stock returns. J.
Finance 56(4), 1247–1292 (2001). https://doi.org/10.1111/0022-1082.00367
82. Barberis, N., Huang, M., Santos, T.: Prospect theory and asset prices. Working Paper 7220,
National Bureau of Economic Research (1999). https://doi.org/10.3386/w7220
83. Barberis, N., Shleifer, A., Vishny, R.W.: A model of investor sentiment. Working Paper 5926,
National Bureau of Economic Research (1997). https://doi.org/10.3386/w5926
84. Chen, J., Hong, H., Stein, J.C.: Forecasting crashes: trading volume, past returns, and condi-
tional skewness in stock prices. J. Financ. Econ. 61(3), 345–381 (2001). https://doi.org/10.
1016/S0304-405X(01)00066-6
85. Gilovich, T., Grifﬁn, D., Kahneman, D. (eds.): Heuristics and Biases: The Psychology of
Intuitive Judgment. Cambridge University Press (2002)
86. Goldberg, J., Nitzch, R.V.: Behavioural Finance. Wiley (2001)
87. Kahneman, D., Tversky, A.: Prospect theory: an analysis of decision under risk. Econometrica
47(2), 263–291 (1979)
88. Kahneman, D., Tversky, A. (eds.): Choices, Values and Frames. Cambridge University Press
(2000)
89. Shleifer, A.: Inefﬁcient Markets: An Introduction to Behavioural Finance. Oxford University
Press (2000)
90. Hofstedt, T.R., Kinard, J.C.: A strategy for behavioral accounting research. Account. Rev.
45(1), 38–54 (1970)

24
1
Introduction
91. Frederick,S.:Cognitivereﬂectionanddecisionmaking.J.Econ.Perspect. 19(4),24–42(2005)
92. Gigerenzer, G., Brighton, H.H.H.: Why biased minds make better inferences. Top. Cogn. Sci.
1(1), 107–143 (2009)
93. Taylor, E., Baylis, H.: Observations and experiments on a dermatitis-producing cercaria and
on another cercaria from limna stagnalis in great britain. Trans. Royal Soc. Trop. Med. Hyg.
24(2), 219–244 (1930). https://doi.org/10.1016/S0035-9203(30)92001-9
94. Beuret, J., Pearson, J.C.: Description of a new zygocercous cercaria (opisthorchioidea: Hetero-
phyidae) from prosobranch gastropods collected at heron island (great barrier reef, australia)
and a review of zygocercariae. Syst. Parasitol. 27(2), 105–125 (1994). https://doi.org/10.
1007/BF00012269
95. Adamatzky, A. (ed.): Advances in Physarum Machines: Sensing and Computing with Slime
Mould, vol. 21. Springer (2016)
96. Khrennikov, A.: p-adic probability interpretation of Bell’s inequality. Phys. Lett. A 200(3–4),
219–223 (1995)
97. Khrennikov, A.: Interpretations of probability and their p-adic extensions. Theory Probab.
Appl. 46(2), 256–273 (2001)
98. Khrennikov, A.: Toward theory of p-adic valued probabilities. Stud. Logic, Grammar Rhetor.
14(27), 137–154 (2008)
99. Khrennikov, A., Yamada, S., van Rooij, A.: The measure-theoretical approach to p-adic
probability theory. Ann. Math. Blaise Pascal 6(1), 21–32 (1999)
100. Khrennikov, A.Y., Schumann, A.: Logical approach to p-adic probabilities. Bull. Sect. Log.
35(1), 49–57 (2006)
101. Schumann, A.: Non-archimedean valued predicate logic. Bull. Sect. Log. 36(1–2), 67–78
(2007)
102. Schumann, A.: Non-archimedean fuzzy and probability logic. J. Appl. Non-Class. Log. 18(1),
29–48 (2008)
103. Volovich,I.V.: Numbertheoryasthe ultimate theory.Technical report,CERNpreprint,CERN-
TH.4791/87 (1987)
104. Koblitz, N.: p-adic Numbers, p-adic Analysis and Zeta Functions, 2nd ed. Springer-Verlag
(1984)
105. Schumann, A.: DSm models and non-archimedean reasoning. In: Smarandache, F., Dezert, J.
(eds.) Advances and Applications of DSmT (Collected works), vol. 2, pp. 183–204. American
Research Press, Rehoboth (2006)
106. Schumann, A.: Non-archimedean valued sequent logic. In: Eighth International Symposium
on Symbolic and Numeric Algorithms for Scientiﬁc Computing (SYNASC’06), pp. 89–92.
IEEE Press (2006)
107. Schumann, A.: Reﬂexive games and non-archimedean probabilities. P-adic Numbers, Ultra-
metr. Anal. Appl. 6(1), 66–79 (2014)
108. Schumann, A.: Probabilities on streams and reﬂexive games. Oper. Res. Decis. 24(1), 71–96
(2014). https://doi.org/10.5277/ord140105
109. Schumann, A.: Payoff cellular automata and reﬂexive games. J. Cell. Autom. 9(4), 287–313
(2014)
110. Schumann, A.: Towards context-based concurrent formal theories. Parallel Process. Lett. 25,
1540,008 (2015)
111. Pavlovi´c, D., Escardó, M.H.: Calculus in coinductive form. In: Proceedings of the 13th Annual
IEEE Symposium on Logic in Computer Science, pp. 408–417 (1998)
112. Rutten, J.J.M.M.: Behavioral differential equations: a coinductive calculus of streams,
automata, and power series. Theor. Comput. Sci. 308, 1–53 (2003)
113. Rutten, J.J.M.M.: A coinductive calculus of streams. Math. Struct. Comput. Sci. 15(1), 93–147
(2005)
114. Rutten, J.J.M.M.: Universal coalgebra: a theory of systems. Theor. Comput. Sci 249(1), 3–80
(2000)
115. Aczel, A.: Non-Well-Founded Sets. Stanford University Press (1988)
116. Barwise, J., Moss, L.: Hypersets. Springer Verlag, New York (1992)

References
25
117. Milner, R.: Communicating and Mobile Systems: The π-calculus. Cambridge University
Press, Cambridge (1999)
118. Adamatzky, A., De Lacy Costello, B., Asai, T.: Reaction-Diffusion Computers. Elsevier
(2005)
119. Wolfram, S.: Universality and complexity in cellular automata. Physica D 10, 1–35 (1984)
120. Khrennikov, A., Schumann, A.: p-adic physics, non-well-founded reality and unconventional
computing. P-adic Numbers, Ultrametr. Anal. Appl. 1(4), 297–306 (2009)
121. Schumann, A.: Non-well-founded probabilities within unconventional computing. In:
Durham, U.K. (ed.) 6th International Symposium on Imprecise Probability: Theories and
Applications (2009)
122. Schumann, A.: Proof-theoretic cellular automata as logic of unconventional computing. Int.
J. Unconv. Comput. 8(3), 263–280 (2012)
123. Hennessy, M., Milner, R.: Algebraic laws for nondeterminism and concurrency. JACM 32(1),
137–161 (1985)
124. Schumann, A.: Towards theory of massive-parallel proofs. cellular automata approach. Bull.
Sect. Log. 39(3/4), 133–145 (2010)
125. Dam, M.: Proof systems for pi-calculus logics. In: de Queiroz, R. (ed.) Logic for Concurrency
and Synchronisation, pp. 145–212. Kluwer (2003)
126. Rutten, J.J.M.M.: Processes as terms: non-well-founded models for bisimulation. Math.
Struct. Comp. Sci. 2(3), 257–275 (1992)
127. Schumann, A., Pancerz, K., Adamatzky, A., Grube, M.: Bio-inspired game theory: the case of
Physarum polycephalum. In: Suzuki, J., Nakano, T. (eds.) Proceedings of the 8th International
Conference on Bio-inspired Information and Communications Technologies (BICT’2014),
pp. 9–16. Boston, Massachusetts, USA (2014)
128. Schumann, A., Pancerz, K., Adamatzky, A., Grube, M.: Context-based games and Physarum
polycephalum as simulation model. In: Proceedings of the Workshop on Unconventional
Computation in Europe. London, UK (2014)
129. Adamatzky, A.: Reaction-diffusion algorithm for constructing discrete generalized voronoi
diagram. Neural Netw. World 6, 635–643 (1994)
130. de Lacy Costello, : B.P.J., Adamatzky, A., Ratcliffe, N.M., Zanin, A., Purwins, H.G., Liehr, A.:
The formation of voronoi diagrams in chemical and physical systems: experimental ﬁndings
and theoretical models. Int. J. Bifurc Chaos 14, 2187–2210 (2004)
131. Pancerz, K., Schumann, A.: Principles of an object-oriented programming language for
Physarum polycephalum computing. In: Proceedings of the 10th International Conference
on Digital Technologies (DT’2014), pp. 273–280. Zilina, Slovak Republic (2014)
132. Pancerz, K., Schumann, A.: Some issues on an object-oriented programming language for
Physarum machines. In: Bris, R., Majernik, J., Pancerz, K., Zaitseva, E. (eds.) Applications of
Computational Intelligence in Biomedical Technology, Studies in Computational Intelligence,
vol. 606, pp. 185–199. Springer International Publishing, Switzerland (2016)
133. Schumann, A., Pancerz: Physarumsoft—a software tool for programming Physarum machines
and simulating Physarum games. In: Ganzha, M., Maciaszek, L., Paprzycki, M. (eds.) Pro-
ceedings of the 2015 Federated Conference on Computer Science and Information Systems
(FedCSIS’2015), pp. 607–614. Lodz, Poland (2015)
134. Schumann, A., Pancerz, K.: Towards an object-oriented programming language for Physarum
polycephalum computing. In: Szczuka, M., Czaja, L., Kacprzak, M. (eds.) Proceedings of
the Workshop on Concurrency, Speciﬁcation and Programming (CS&P’2013), pp. 389–397.
Warsaw, Poland (2013)
135. Schumann, A., Pancerz, K.: Timed transition system models for programming Physarum
machines: extended abstract. In: Popova-Zeugmann, L. (ed.) Proceedings of the Workshop
on Concurrency, Speciﬁcation and Programming (CS&P’2014), pp. 180–183. Chemnitz, Ger-
many (2014)
136. Schumann, A., Pancerz, K.: Towards an object-oriented programming language for Physarum
polycephalum computing: A Petri net model approach. Fundam. Informaticae 133(2–3), 271–
285 (2014)

26
1
Introduction
137. Schumann, A., Pancerz, K.: Petri net models of simple rule-based systems for programming
Physarum machines: extended abstract. In: Suraj, Z., Czaja, L. (eds.) Proceedings of the
24th International Workshop on Concurrency, Speciﬁcation and Programming (CS&P’2015),
vol. 2, pp. 155–160. Rzeszow, Poland (2015)
138. Pancerz, K., Schumann, A.: Rough set description of strategy games on Physarum machines.
In: Adamatzky, A. (ed.) Advances in Unconventional Computing, Volume 2: Prototypes,
Models and Algorithms, Emergence, Complexity and Computation, vol. 23, pp. 615–636.
Springer International Publishing (2017)
139. Schumann, A., Pancerz: Roughness in timed transition systems modeling propagation of
plasmodium. In: Ciucci, D., Wang, G., Mitra, S., Wu, W.Z. (eds.) Rough Sets and Knowl-
edge Technology. Lecture Notes in Artiﬁcial Intelligence, vol. 9436. Springer International
Publishing (2015)
140. Schumann, A., Pancerz, K.: A rough set version of the go game on Physarum machines.
In: Suzuki, J., Nakano, T., Hess, H. (eds.) Proceedings of the 9th International Conference
on Bio-inspired Information and Communications Technologies (BICT’2015), pp. 446–452.
New York City, New York, USA (2015)
141. Schumann, A., Pancerz, K.: Physarumsoft: an update based on rough set theory. AIP Conf.
Proc. 1863(1), 360005 (2017). https://doi.org/10.1063/1.4992534
142. Schumann, A.: Go games on plasmodia of Physarum polycephalum. In: 2015 Federated
Conference on Computer Science and Information Systems, FedCSIS 2015, Lódz, Poland,
13–16 Sept 2015, pp. 615–626 (2015). https://doi.org/10.15439/2015F236
143. Schumann, A.: Syllogistic versions of go games on Physarum. In: Adamatzky, A. (ed.)
Advances in Physarum Machines: Sensing and Computing with Slime Mould, pp. 651–685.
Springer International Publishing, Cham (2016)
144. Schumann, A., Pancerz, K.: Interfaces in a game-theoretic setting for controlling the plasmod-
ium motions. In: Proceedings of the 8th International Conference on Bio-inspired Systems
and Signal Processing (BIOSIGNALS’2015), pp. 338–343. Lisbon, Portugal (2015)
145. Adamatzky, A., De Lacy Costello, B.: Experimental logical gates in a reaction-diffusion
medium: the XOR gate and beyond. Phys. Rev. E 66, 46–112 (2002)
146. Adamatzky, A., Wuensche, A.: Computing in spiral rule reaction-diffusion hexagonal cellular
automaton. Complex Syst. 16, 4 (2007)
147. Schumann, A., Adamatzky, A.: Towards semantical model of reaction-diffusion computing.
Kybernetes 38(9), 1518–1531 (2009)
148. Bˇehounek, L., Cintula, P.: Fuzzy class theory. Fuzzy Sets Syst. 154(1), 34–55 (2005)
149. Cintula, P.: The lπ and lπ 1
2 propositional and predicate logics. Fuzzy Sets Syst. 124(3), 21–34
(2001)
150. Cintula, P.: Advances in the lπ and lπ 1
2 logics. Arch. Math. Log. 42(5), 449–468 (2003)
151. Hájek, P.: Metamathematics of Fuzzy Logic. Springer, Netherlands, Dordrecht (1998)

Chapter 2
Actin Filament Networks
The plasmodium of Physarum polycephalum is very sensitive to its environment and
reacts to stimuli by its appropriate motions. The sensitive stage as well as the motor
stage of these reactions are explained by hydrodynamic processes, based on ﬂuid
dynamics, with participating of actin ﬁlament networks. This chapter is devoted to
actin ﬁlament networks as a computation medium, see [1–8]. The point is that actin
ﬁlaments with a participating of many other proteins like myosin are sensitive to outer
cellular stimuli (attractants as well as repellents) and they appear and disappear at
different places of the cell to change the cell structure, e.g. its shape. Due to assem-
bling and disassembling actin ﬁlaments, some unicellular organisms like Amoeba
proteus can move in responses to different stimuli. As a result, these organisms can
be considered a simple reversible logic gate, where outer cellular signals are its inputs
and the motions are its outputs. In this way, we can implement different logic gate on
the amoeboid behaviours. These networks can embody arithmetic functions within
p-adic valued logic. Furthermore, within these networks we can deﬁne the so-called
diagonalization for deducing undecidable arithmetic functions.
In physics we analyze the world by applying some mathematical equations. So,
the main question is that whether the mathematical tools are enough for understand-
ing physical systems. In other words, whether physical systems can be explicated
by means of solvable or decidable computational functions in fact. Let us remember
that a function is decidable if there is an algorithm (a ﬁnite procedure) in a Turing
machine saying how to compute this function by ﬁnite steps. Otherwise the function
is undecidable or unsolvable. In theory of computation there are different classiﬁ-
cations of computational functions according to their inherent difﬁculty from func-
tions simulated by deterministic Turing machines (decidable arithmetic functions)
to unsolvable computational problems (undecidable arithmetic functions). And in
applied physics there is the same trouble—we should know whether mathematical
equations of physics can be computed in general in fact.
© Springer International Publishing AG, part of Springer Nature 2019
A. Schumann, Behaviourism in Studying Swarms: Logical Models of Sensing
and Motoring, Emergence, Complexity and Computation 33,
https://doi.org/10.1007/978-3-319-91542-5_2
27

28
2
Actin Filament Networks
In unconventional computing any physical system is regarded as a computer.
Physarum polycephalum is one of the unicellular organisms best studied from the
standpoint of computation theory [9–29]. In the project Physarum Chip Project:
Growing Computers From Slime Mould [30], we have designed some processors on
the basis of the Physarum polycephalum motions. There are some other models to
formalize the plasmodium behaviour: a memory model [31, 32], an auto-oscillatory
model [33, 34] and many others. In the memory model, there are used some mem-
ory circuit elements, such as resistors, capacitors and inductors with memory whose
state depends on the history of signals applied [31, 32]. In the auto-oscillatory model,
autooscillations and autowaves are explicated on the basis of properties of the acto-
myosin ﬁlament system [34]. The plasmodium of Physarum polycephalum con-
sists of different proteins, among them actin ﬁlament networks responsible for the
plasmodial cytoskeleton participate in the intelligent behaviour of Physarum poly-
cephalum [35, 36].
In this chapter, I try to consider which decidable and undecidable arithmetic
functions can be implemented on the medium of actin ﬁlament networks. In this way
I show that any cell can be considered a computer due to its actin ﬁlament networks, in
particular Amoeba proteus can be regarded as a logic gate. In actin ﬁlament networks
we can deﬁne decidable and undecidable arithmetic functions.
Hence, I support the idea of orchestrated objective reduction, i.e. of a hypoth-
esis that our consciousness originates from processes inside neurons, rather than
from connections between neurons [37] and actin ﬁlament networks participate in
intelligent reactions of each cell (as well as of neuron) to its environment [38]. So,
in this chapter I am going to show the role of actin ﬁlaments (as an intercellular
mechanism) playing in the biological intelligence. The main result of this research is
in coding amoeboid motions by arithmetic functions and in expressing undecidable
arithmetic functions within actin ﬁlament networks. The point is that each cell due to
actin ﬁlament waves has more outputs than inputs. Therefore, some arithmetic func-
tions implemented in this behaviour can be undecidable. It means that actin ﬁlament
networks implement a stronger intelligence than any Turing machine.
This chapter is focused on computational aspects of actin ﬁlament waves and intro-
duces some idealizations in considering the amoeboid movement. Thus, I exemplify
actin ﬁlament networks by behaviours of Amoeba proteus, rather than by Physarum
polycephalum, because the actin ﬁlament mechanism such as shear deformation,
bending deformation, and orientation deformation in responding to outside signals
is more visible on amoebas. Activated and deactivated zones of actin ﬁlament waves
are used for coding the amoeboid motions by arithmetic functions. Hence, the physics
of this mechanism can be different, e.g. we have different motions of Amoeba pro-
teus and Physarum polycephalum, but in any case the mathematics of these motions
with activated and deactivated zones of actin ﬁlament waves remains the same. This
research is concentrated just on mathematics—possibilities to implement decidable
an undecidable arithmetic functions within actin ﬁlament networks. See [3–5].

2.1 Reversible Logic Gates on Actin Filaments
29
2.1
Reversible Logic Gates on Actin Filaments
2.1.1
Unconventional Computing on Actin Filaments
In machine learning there have been used some biologically inspired networks such
as artiﬁcial neural networks, where we have a ﬁxed number of processors involved
into computations. So, in neural networks we deal with a system ⟨N, V, w⟩, where
N is the set of processors called “neurons”, V is a set of tuples {(i, j): i, j ∈N}
whose elements are connections between neuron i and neuron j, and w is a function
from V to R such that w((i, j)), for short wi,j, is called the weight of the connection
between neuron i and neuron j. Usually, the weights of a neural network are deﬁned
as a Hinton diagram presented as a square weight matrix W with the row number
indicating, where the connection begins, and the column number indicating, which
neuron is the target. Meanwhile, the weight 0 designates a non-existing connection.
However, elementary computational units understood as processors in real bio-
logical networks are never ﬁxed. They are being built and rebuilt permanently in
responses to different stresses as external conditions. One of the best examples of
these units in biological networks is presented by actin ﬁlaments. Their networks are
most important in remodelling cell conﬁgurations and in the cell motility. The point
is that actin ﬁlament networks are engaged in changing the cell shape, for exam-
ple in the division of one cell into two daughter cells and in the protrusion of parts
of the cells, e.g. in the cell deformation by means of growing pseudopodia during
phagocytosis. Meanwhile, the actin ﬁlaments are being assembled and disassembled
during the time. As a consequence, we face a permanent assembly and disassembly
of actin ﬁlament networks. These changes in networking are cell responses to dif-
ferent stimuli. For instance, actin ﬁlament networks by the own reconstruction can
transmit internal stresses and govern the spatial organization of the cytoskeleton. So,
these networks can provide signal transduction pathways and make a mechanical
equilibrium of the cell and its environment.
The actin ﬁlament networks react to external stresses. These stresses are inputs
for the networks. There are three main types of the actin ﬁlament networks: unstable
bunches (parallel unbranched ﬁlaments), trees (branched ﬁlaments), stable bunches
(cross-linked ﬁlaments), see: [39–41]. Outputs are different for different network
types. For unstable bunches and trees, the outputs are represented by chemotaxis,
cell spreading, nerve growth-cone movement, etc. For stable bunches, the outputs
have the form of mechanic stress transduction such as (i) a tensional stress in the
distortion to the network; (ii) a curvature stress in the deformation of the network;
(iii) an orientational stress in the deformation of the network.
Due to actin ﬁlaments, the amoeboid cell motility is possible. In robototechnics,
one species of the Mycetozoan group of the Amoebozoa, which is characterized by
this kind of motility, is best studied. It is Physarum polycephalum. Each plasmodium
of Physarum polycephalum has both an external stationary ectoplasm and an internal
liquid endoplasm that moves to pseudopodia. The amoeboid motility is classiﬁed by
the following three stages: (i) the stage of growing pseudopodia; (ii) the stage of

30
2
Actin Filament Networks
attaching the pseudopodium to a substrate; (iii) the stage of dragging up the rest of
the cell, see [42–44]. Such a movement requires an oscillatory mode of contractility
system where an actin ﬁlament network is being assembled and disassembled for an
equilibrium between ectoplasm and endoplasm [45], to change the cell shape [46].
Hence, the Physarum polycephalum plasmodium motility that is so intelligent and
can be programmed by using chemotaxis so that we can design computers on their
media is based on some actin ﬁlament network properties.
Actin ﬁlament networks are a universal mechanism in the reception and further
transmission of external stimuli/stresses in any biological organism. By chemicals
it is possible to govern an actin polymerisation and depolymerisation, i.e. the ﬁl-
ament assembly and disassembly. For instance, on the one hand, cytochalasin B,
the cell-permeable mycotoxin, strongly inhibits the formation of actin ﬁlament net-
works. On the other hand, the mycotoxin of Amanita phalloides strongly activates
the aggregation of all cell G-actin into ﬁlaments which become Ph-actin and cannot
be depolymerised and thus this taxin avoids any dynamics of cytoskeleton.
Actin ﬁlament networks are studied from the point of view of biochemistry in the
following papers: [38, 47–56]. From the point of view of computer science, actin
ﬁlament networks started to be studied just recently: [1, 2, 6–8].
Hence, theoretically we can assume that it is possible to synthesize and then
govern/program an artiﬁcial actin ﬁlament network. This network is fundamental in
any cell reaction to stimuli. As a result, this artiﬁcial network could be considered a
biological computer/chip as such. Its computational processes would be primary for
organic intelligence in principle.
For programming the artiﬁcial actin ﬁlament network, it is better to appeal to an
object-oriented programming that models objects rather than actions and simulates
aposterioristic data rather than aprioristic logic. In this programming for simulating
the motions of actin ﬁlament waves we are based on process-algebraic formalizations
of the artiﬁcial actin ﬁlament network. So, we deﬁne some instructions in the terms
of process algebra like as follows: add node, remove node, add edge, remove edge.
Adding and removing nodes can be implemented through activation and deactiva-
tion of attractants, respectively. Adding and removing edges can be implemented by
means of repellents put in proper places in the space. An activated repellent can avoid
a transition between attractants. Adding and removing edges can change dynami-
cally over time. To model such a behaviour, we propose a high-level model, based on
timed transition systems. In this model we deﬁne the following four basic forms of
transitions (motions): direct (direction, a movement from one point, where the artiﬁ-
cial cell or metacell is located, towards another point, where there is a neighbouring
attractant), fuse (fusion of two actin ﬁlament fronts at the point, where they meet the
same attractant), split (splitting one actin ﬁlament front into two active fronts, where
two neighbouring attractants with a similar power of intensity are located), and repel
(repelling of actin ﬁlament front or inaction).
Some computational features of programming the artiﬁcial actin ﬁlament network
are as follows:

2.1 Reversible Logic Gates on Actin Filaments
31
• We deal with a system ⟨N ′, V ′, w′⟩, where (i) N ′ is a non-well-founded set of
processors called “ﬁlaments”; this set is non-well-founded, because it is impossible
to divide N ′ into atoms or even just into excluded subsets nj which form a partition
of N ′ = 
j nj; in other words, processors are being redesigned permanently and
they can appear and disappear and ever change own features; (ii) V ′ is a set of
tuples {(it, jt): it, jt ∈N ′} whose elements are connections between ﬁlament it
and ﬁlament jt at time step t; hence, the set V ′ is non-well-founded, too, as its
cardinality can change during the time t; (iii) w′ is a function from V ′ to ∗R, where
∗R is a set of hyperreal numbers such that w′((∗i, ∗j)), where ∗i = i0, i1, i2, i3, . . .
and ∗j = j0, j1, j2, j3, . . ., for short w∗i,∗j, is called the weight of the connection
between ﬁlament ∗i and ﬁlament ∗j at each time step t = 0, 1, 2, 3, . . .; notice that
a ﬁlament ∗i can be hidden (not present) at actual time.
• Each ﬁlament behaves as an artiﬁcial organism (e.g. as an artiﬁcial cell): (i) it can
grow up; (ii) its behaviour can be attracted/directed by chemotaxis. In cells there
are ever ﬁlaments, some of them ‘die’ and some others ‘born’.
• Each unstable actin ﬁlament network behaves as an artiﬁcial swarm: (i) it can
grow up; (ii) its behaviour can be attracted/directed by chemotaxis [57]; (iii) there
can be a fusion of two swarms (two actin ﬁlament networks) into one swarm (one
network); (iv) there can be a splitting of one swarm (one network) into two swarms
(two networks). In cells there are ever some actin ﬁlament networks.
• Each cross-linked actin ﬁlament network behaves as a metaswarm: it reacts to
mechanical external stimuli and it can be partly reorganized.
Thus,inconstructingtheactinﬁlamentnetwork⟨N ′, V ′, w′⟩wehavethefollowing
three levels of computations: (i) an artiﬁcial organism (ﬁlament); (ii) an artiﬁcial
swarm (unstable bunch or tree); (iii) a metaswarm (stable bunch). On all three levels
we face an instability of computation substratum. So, we assume that an actin ﬁlament
chip changes its conﬁgurations during the computation processes. In designing this
chip we can appeal to swarm computing, e.g. to slime mould computing. In the same
measure as the neural networks, the actin ﬁlament networks can be used in pattern
recognitions. So, due to the actin ﬁlament networks any slime mould or amoeba can
recognize its dynamic environment and occupy the pieces of food/attractants.
2.1.2
Actin Filaments as “Swarms”
In any cell there is a huge number of actin monomers or globular actin (the so-called
G-actin) denoted by Ai. Monomers are involved into computations only within actin
ﬁlaments, minimally consisting of three actin monomers. G-actin Ai can assemble
into double helical ﬁlaments of 7–8 nm in diameter and of several microns in length.
Filaments are (re)designed by the processes of nucleation, polymerization, and
depolymerization:
• Nucleation. For nucleation that allows monomers to be assembled into ﬁlaments
it is enough to bound three G-actin monomers at ﬁrst. Then for enlargement an

32
2
Actin Filament Networks
actin ﬁlament must be polarised with a barbed end that is plus at which monomer
addition is faster than at the pointed end that is minus. So, actin ﬁlaments are
morphologically asymmetric with different kinetic characteristics at two ends,
and this fact helps to polymerize ﬁlamentous actin (the so-called F-actin) from the
head (plus end) to the tail (minus end), see please [58–63].
• Polymerization. It is an association of new ﬁlaments mediated by actin cross-
linking proteins: α-actinin, fascin, ﬁmbrin, and ﬁlamin. This assembly is carried
out on the basis of adding new monomers at the barbed end. Meanwhile, at the
steady state, when a ﬁlament ﬁnishes to grow, the net rate of disassembly matches
the rate of assembly at the plus end [64–68].
• Depolymerization. It is a dissociation of ﬁlaments which takes place when the crit-
ical concentration for actin polymerization is less than the dissociation constants
at the two ﬁlament ends [69].
Thus, an actin ﬁlament consists of two ﬁlament strands in the helical form. For each
actin monomer Ai in both strands there are three possible states: bound on the left,
lAi; bound on the right, rAi; and bound on both sides, bAi. Out of any ﬁlament,
the monomer Ai is considered free, fAi, or turned off. Monomers in the ﬁrst strand
are distinguished by sA•
i , where s ∈{l, r, b}. Monomers in the second strand are
distinguished by sA◦
j , where s ∈{l, r, b}.
Deﬁnition 2.1 Polymerization is a process calculus deﬁned as follows:
names := fAi |, lA•
i | rA•
i | bA•
i | lA◦
j | rA◦
j | bA◦
j ;
&, bounding := if fA⋆
j &rA⋆
i , then
fA⋆
j is rA⋆
i+1 and rA⋆
i is bA⋆
i |
if fA⋆
j &lA⋆
i , then
fA⋆
j is lA⋆
i−1 and lA⋆
i is bA⋆
i |
if lA⋆
j &rA⋆
i , then
lA⋆
j is bA⋆
i+1 and rA⋆
i is bA⋆
i |
if fA⋆
i &fA⋆
j , then
fA⋆
i is rA⋆
j+1 and fA⋆
j is lA⋆
j or
fA⋆
i is lA⋆
i and fA⋆
j is rA⋆
i+1,
where ⋆∈{◦, •};
P, processes := & | P1|P2.

2.1 Reversible Logic Gates on Actin Filaments
33
In this deﬁnition, we have deﬁned ﬁlaments as growing from the right side. So,
a free monomer fA⋆
i can interact with another free monomer fA⋆
j and, as a result,
we can have a strand rA⋆
j+1lA⋆
j or a strand rA⋆
i+1lA⋆
i . A free monomer fA⋆
i can also
interact with a monomer lA⋆
j , and, as a result, we obtain a strand . . . bA⋆
j lA⋆
j−1. A free
monomer fA⋆
i can also interact with a monomer rA⋆
j , and, as a result, we obtain a
strand rA⋆
j+1bA⋆
j . . . . A monomer rA⋆
i can associate with a monomer lA⋆
j to give a
strand . . . bA⋆
i+1bA⋆
i . . . .
Deﬁnition 2.2 Depolymerization is a process calculus deﬁned as follows:
names := fAi |, lA•
i | rA•
i | bA•
i | lA◦
j | rA◦
j | bA◦
j ;
&, unbounding := if bA⋆
i+1&bA⋆
i , then
bA⋆
i+1 is lA⋆
j and bA⋆
i is rA⋆
i |
if bA⋆
i+1&lA⋆
i , then
bA⋆
i+1 is lA⋆
i+1 and lA⋆
i is fA⋆
i |
if bA⋆
j &rA⋆
j+1, then
bA⋆
j is rA⋆
j and rA⋆
j+1 is fA⋆
j+1 |
if rA⋆
i+i&lA⋆
i , then
rA⋆
i+1 is fA⋆
i+1 and lA⋆
i is fA⋆
i ;
P, processes := & | P1|P2.
Hence, a monomer lA⋆
i can dissociate from a strand . . . bA⋆
i+1lA⋆
i or a strand
rA⋆
i+1lA⋆
i and to become a free monomer fA⋆
i . A monomer rA⋆
i+1 can dissociate from
a strand rA⋆
i+1lA⋆
i or a strand rA⋆
i+1bA⋆
i . . . and to become a free monomer fA⋆
i+1. A
strand . . . bA⋆
i+1bA⋆
i . . . can be divided into two strands . . . lA⋆
i+1 and rA⋆
i . . . .
Let [sA⋆
i ], where s ∈{l, r, b}, mean a value of sA⋆
i : (i) [sA⋆
i ] = 1 iff sA⋆
i is
exited; and (ii) [sA⋆
i ] = 0 iff sA⋆
i is not excited. A signal is transmitted in ﬁlaments
. . . bA⋆
i+1lA⋆
i form the left to the right hand and the signal transmission deﬁned as
follows:
[bA◦
i ] =
⎧
⎨
⎩
1, if either [bA◦
i+1] ∧[bA•
i+1] = 1 or
[bA◦
i ] ∧[bA•
i ] = 1;
0, otherwise.
[bA•
i ] =
⎧
⎨
⎩
1, if either [bA•
i+1] ∧[bA◦
i+1] = 1 or
[bA•
i ] ∧[bA◦
i ] = 1;
0, otherwise.

34
2
Actin Filament Networks
[lA◦
i ] =
1, if [bA◦
i+1] ∧[bA•
i+1] = 1;
0, otherwise.
[lA•
i ] =
1, if [bA•
i+1] ∧[bA◦
i+1] = 1;
0, otherwise.
Each ﬁlament is instable because of the faster net loss of G-actin at the pointed end
than at the barbed end and the faster net addition at the barbed end than at the pointed
end. If there is an equilibrium of two rates of association and dissociation, it gives
rise to a treadmilling when there is a net ﬂow of actin subunits through the ﬁlament
[70]. The rate of treadmilling may be altered by the inhibition of disassembly at the
pointed end, e.g. by phosphate [69]. Increasing the rate of monomer dissociation at
the pointed end, e.g. by coﬁlin can accelerate treadmilling, also. Proteins that control
treadmilling of actin ﬁlaments and their adhesions are classiﬁed as follows:
C, control := SeqP | CrossP | SevP | NucP,
where
• SeqP are sequestering proteins: (i) β-thymosins which sequester G-actin to pre-
vent spontaneous nucleation; (ii) proﬁlin which interacts with actin monomers to
enhance nucleotide exchange [71, 72];
• CrossP are cross-linking proteins: (i) α-actinin which cross-links the actin ﬁla-
ments; (ii) vinculin, talin, and zyxin which link the cortex to the plasma membrane
[73–75];
• SevP are severing proteins: (i) coﬁlin (actin depolymerization factor) which sever
F-actin to generate more ﬁlament ends for assembly or disassembly and enhances
subunit dissociation; (ii) gelsolin and the Arp2/3 complex (containing the actin-
related proteins, Arp2 and Arp3) which cap ﬁlament ends to regulate addition or
loss of actin subunits, see: [76, 77];
• NucP are nucleating proteins: (i) formin, the Arp2/3 complex which nucleate ﬁla-
ment growth; (ii) integrins which nucleate the formation of assemblies of structural
and signaling proteins for ﬁlament adhesions [65, 78–81].
Actin ﬁlaments can be organized as bunches in response to the activation of
signalling pathways by external stimuli. The basic processes in ﬁlament bunching
are as follows:
• Anchoring. As response to external stimuli the actin ﬁlaments anchor to mem-
branes. Meanwhile, ﬁlaments are attached at their plus ends so that the ﬁlament
elongation occurs at anchored ends which can cause a membrane deformation in
the form of growing pseudopodia [82, 83].
• Parallel orientation. Usually, actin ﬁlaments are short, randomly oriented, and not
bundled. External stimuli organize actin ﬁlaments in linear patterns with orienta-
tion of ﬁlament heads towards stimuli.
• Branching. The Arp2/3 complex anchors the pointed end of the future daughter
ﬁlament to the existing mother ﬁlament. Then the daughter ﬁlament grows up at

2.1 Reversible Logic Gates on Actin Filaments
35
its barbed end. As a result, a branch appears. Continuing in the same way, a tree
is assembled. More often the Arp2/3 complex nucleates the tree assembly close to
the cell membrane at the point of external stimulus [54].
• Cross-linking. The actin ﬁlaments are cross-linked and bound to the cytoskeleton
due to the actin-bounding proteins: proﬁlin, the Arp2/3 complex, ﬁlamin, spectrin,
and α-actinin [84]. These proteins transform unbundled actin ﬁlaments with small
adhesions into the bundled actin ﬁlaments with larger adhesions. Notice that the
actin cytoskeleton built up by cross-linkers is used then for mechanotransduction
and signal transmission [64, 85–88].
• Adhesion. Integrins and myosin II are mainly responsible for adhesion and actin
organization as bunches [89]. For adhesion stability talin activates integrins and
links them to actin. Adhesions disassemble at the back edge of the lamellipodium,
which is a region of active actin depolymerization [74]. About adhesion mecha-
nisms please see [78].
Each actin ﬁlament is attracted by a stimulus so that the ﬁlament grows up towards
this stimulus. In case we have many actin ﬁlaments in one bunch, they behave as
a swarm in front of stimuli attracting each individual of that bunch. This grouping
behaviour can be represented as the following process calculus:
Deﬁnition 2.3 Let Pbunch = {n1, n2, . . . , nk} be initial states of transitions for k ﬁl-
ament bunches, Abunch = {a1, a2, . . . , aj} be a set of external stimuli (stresses) local-
ized at different places, Vbunch = {r1, r2, . . . , ri} be a set of ﬁlament trees. Then the
bunch transition system, TSbunch = (Sbunch, Ebunch, Tbunch, Ibunch), is deﬁned in the
following manner:
• σ : Pbunch ∪Abunch →Sbunch assigning a state to each original point of bunches as
well as to each external stimulus;
• τ : Vbunch →Tbunch assigning a transition to each ﬁlament tree attracted by one
stimulus;
• ι : Pbunch →Ibunch assigning an initial state to each bunch localization.
Each event of the set of events Ebunch is assigned to bunch transitions in accordance
with the following process types:
• direction (the ﬁlament tree grows from one state/localization/initial point to
another state/stimulus),
• fusion (the ﬁlament tree grows from different states/localizations to the same one
state/stimulus),
• splitting (the ﬁlament tree grows from one state/localization/initial point to differ-
ent states/stimuli),
• repelling (the ﬁlament tree can dissociate).
Thus, we have a hierarchic architecture in our object-oriented programming: (i) a
polymerization and depolymerization of each actin ﬁlament for transmitting signals
(Deﬁnitions 2.1 and 2.2); (ii) grouping of actin ﬁlaments into ﬁlament waves; (iii) a
collective behaviour of actin ﬁlament bunches/waves (Deﬁnition 2.3).

36
2
Actin Filament Networks
Table 2.1 The CNOT gate in the matrix form
00
01
10
11
00
1
0
0
0
01
0
1
0
0
10
0
0
0
1
11
0
0
1
0
Fig. 2.1 The ﬁrst possible
state of reacting to two
stimuli (one from ab and one
from cd): mapping 00 into
00, i.e. the string [ab] is
mapped into the string [cd],
see [3]
The system TSbunch just deﬁned behaves like the slime mould computer [11] and
it can solve the same tasks: transporting net optimization, pattern recognition, etc.
Hence, in TSbunch we can design reversible logic gates. Let us remember that in
these gates the number of inputs and outputs is the same. Let us show how we can
implement the CNOT gate (the 2-bit controlled-NOT gate) into ﬁlament trees. In
the CNOT gate, the four possible input bit strings are 00, 01, 10, 11 and these are
mapped into 00, 01, 11, and 10 respectively (see Table2.1).
In the unexcited state ﬁlaments are chaotically oriented. Let us consider an arti-
ﬁcial plane cell with the four zones on the cell surface: a, b, c, d, see Fig.2.1.
Assume that two external stimuli are transmitted from both fronts: ab and cd. At the
same time, suppose that the protein pool of the cell activates the polymerization and
branching of ﬁlaments only in the four possible ways pictured in Figs.2.1, 2.2, 2.3
and 2.4. Then the cell can be regarded as the CNOT gate.
2.1.3
Actin Filaments as “Metaswarm”
Highly cross-linked ﬁlaments are used in cells for transferring the mechanical stim-
ulus resulted by mechanical forces applied to cell surfaces. These forces generate
elastic stress waves which rapidly propagate through actin stress ﬁbers. Such exter-
nal mechanical stresses can imply a diffusion of actin ﬁlament networks if ﬁlaments
were uncross-linked semi-dilute [90, 91]. So, the rotation around their axis cause

2.1 Reversible Logic Gates on Actin Filaments
37
Fig. 2.2 The second
possible state of reacting to
two stimuli: mapping 01 into
01, see [3]
Fig. 2.3 The third possible
state of reacting to two
stimuli: mapping 11 into 10,
see [3]
Fig. 2.4 The fourth possible
state of reacting to two
stimuli: mapping 10 into 11,
see [3]
colliding with other ﬁlaments for uncross-linked ﬁlament networks, but in the case
of cytoskeleton the mechanical stimulus is being transmitted by ﬁlament strands.
As a consequence, in response to the physical force the stress ﬁber displacement is
activated in the cytoskeleton [59, 92–95]. Some forms of that displacement which
transmit the external stress: ﬁber inertia, ﬁber viscoelasticity, and cytosolic damping.
Hence, if highly cross-linked actin ﬁlament networks are organized in parallel arrays

38
2
Actin Filament Networks
Fig. 2.5 The artiﬁcial cell
considered the CNOT gate.
Its cytoskeleton is at the
normal stage without
external stresses. We assume
that after stresses the string
[ab] is transformed into the
string [cd] and vice versa,
see [3]
Fig. 2.6 The ﬁrst possible
state of the cell after one
mechanical stress: mapping
00 into 00, see [3]
of ﬁlaments, they become stress ﬁbers with the following kinds of deformation which
strongly inﬂuence on transmitting signals [35, 81, 96–99]:
• Shear deformation. In a highly cross-linked actin ﬁlament network both sides do
not change their lengths under shear, but the diagonals are stretched and com-
pressed respectively. This stretch or compression causes a large tensional stress in
the actin ﬁlament network.
• Bending deformation. It is a curvature stress that is a result of force that is generated
by the local extension of the material on the convex side and compression of the
material on the concave side of the bend.
• Orientation deformation. It is an mechanical stress, when the orientation changes.
Thus, we can consider the cell a reversible logic gate which has the same number
of inputs (mechanical stresses) and outputs (stress transmissions). Let us examine
an artiﬁcial plane cell pictured in Fig.2.5. Then let us concentrate on the four zones
on the cell surface: a, b, c, d. Each letter runs over the two values: 1 or 0. It has the
value 1 if a mechanical stress goes through an appropriate zone. Notice that the stress
transmission depends on the cytoskeleton structure and there may be zones, where
the mechanical stress cannot go through at all. Let us suppose that the cell pictured in
Fig.2.5 can have only four kinds of deformation in transmitting mechanical signals:
from Figs.2.6, 2.7, 2.8 and 2.9. Then this cell can be regarded as the CNOT gate.
Each ﬁlament in a reversible gate can be numbered from 1 to n, where n is the
number of all ﬁlaments engaged into this gate. Then we create an n × n matrix, G,

2.1 Reversible Logic Gates on Actin Filaments
39
Fig. 2.7 The second
possible state of the cell after
one mechanical stress:
mapping 01 into 01, see [3]
Fig. 2.8 The third possible
state of the cell after one
mechanical stress: mapping
11 into 10, see [3]
Fig. 2.9 The fourth possible
state of the cell after one
mechanical stress: mapping
10 into 11, see [3]
such that all elements along its diagonal and below are zero and the value of an
element above the diagonal is either one or zero depending on whether the i-th and
j-th ﬁlaments are cross-linked.
2.1.4
Motility of Amoeba Proteus and Actin Filaments
Let us consider now some real examples.
Reactions of actin ﬁlament networks to external stimuli are better visible in the
amoeba behaviour than in the plasmodium motions. Amoeba proteus (see Fig.2.10) is
very sensitive to the environment and reacts directly to external stimuli by the motil-
ity of its shape. This shape changes due to the cytoplasmic streaming that extends

40
2
Actin Filament Networks
Fig. 2.10 The morphology of Amoeba proteus: (1) contractile vacuole (a water bubble within
the endoplasm of A. proteus to regulate the water content of the cell); (2) nucleus (a membrane
bound organelle containing the cells genetic information and responsible for the actions of the
amoeba); (3) cytoplasm (a gel-like substance that allows A. proteus to form its pseudopodia and
preform its respective functions, it contains actin ﬁlaments which are responsible for sensitivity of
A. proteus); (4) food vacuole (a vacuole with a digestive function, containing a food for A. proteus);
(5) membrane (it contains the inner part of the cell such as organelles and cytoplasm, it has good
regenerative abilities and elasticity), see [5]
pseudopodia towards attractants (food). So, the amoeboid locomotion is committed
forward if the amoeba detects an attractant. Meanwhile, for A. proteus there exist
repellents, as well: the amoeba avoids strong light (and it moves towards the weaker
light), also it avoids dark (it moves towards light) and many other conditions: some
chemicals (such as salt), obstacles, anode (it moves towards cathode), cold (it prefers
warm), and hot (it prefers not so hot), etc.
Theamoeboidreactionstoattractantsandrepellentsarestudiedwellandexplained
by actin ﬁlaments or F-actin (see Fig.2.11), i.e. the protein which is organized
into higher-order structures, forming linear bundles, two-dimensional networks, and
three-dimensional semisolid gels. Actin monomers polymerize to form thin, ﬂexible
ﬁbers (actin ﬁlaments) 5–9 nm in diameter and up to several micrometers in length.
Actin ﬁlaments are connected to the plasma membrane, where they form an actin
cortex that provides mechanical support (see Fig.2.13). If there is an attractant before
the cell, actin ﬁlaments form a wave to change the cell shape to allow the movement
of the cell surface to build a pseudopodium by cross-linked ﬁlaments (see Fig.2.12).
Actin ﬁlaments under different external conditions can be assembled and disas-
sembled and these reactions are regulated by actin-binding proteins, see [100]. For
instance, on the one hand, coﬁlin remains bound to actin monomers following ﬁla-
ment disassembly and sequesters them in the ADP-bound form. On the other hand,
proﬁlin stimulate the incorporation of actin monomers into ﬁlaments. Also, there are
actin-binding proteins connecting two different actin ﬁlaments into bundles or even
into networks which can crosslink perpendicular ﬁlaments.

2.1 Reversible Logic Gates on Actin Filaments
41
Fig. 2.11 The actin ﬁlament or F-actin is a linear polymer of globular actin monomers (G-actin).
F-actin is ﬂexible and has a helical repeat every 37 nm. It ranges from 5–9 nm in diameter. It has a
rotation of 166.15◦around the axis. Each G-actin has tight binding sites that mediate head-to-tail
interactions with two other actin monomers, in this way actin monomers are oriented in the same
direction and their polymerization gives a distinct polarity at the ends of the actin ﬁlament: the plus
and minus ends. At these ends there are different rates of the actin ﬁlament grow so that we have
the plus end to which monomers are added ﬁve to ten times faster than to the slow-growing minus
end, see [4]
Fig. 2.12 Actin ﬁlaments
responsible for the motility
of Amoeba proteus, see [4]
First of all, actin ﬁlaments form the cell cortex, which lies adjacent to the plasma
membrane to support it (Fig.2.13a). This cytoskeleton is dynamic and sensitive to
the cell surroundings. Each external force (each taxis) acting on the actin cortex
are transmitted by signaling pathways to directly react to the external environment.
If actin ﬁlaments are assembled in parallel with the same polarity direction, they
propagate some projections, called microvilli, by adding new monomers at the plus
ends adjacent to the plasma membrane (Fig.2.13b). For the cell migration actin
ﬁlaments are crosslinked to propagate membrane protrusions in the form of ﬁlopodia
(Fig.2.13c) or lamellipodia (Fig.2.13d). They are being formed also to probe the
cell microenvironment. The more stable bundles of actin ﬁlaments are represented
by stress ﬁbers (Fig.2.13e) which allow the cell to form a track system for cargo
transport. In the cell they build up networks which change their topology by reactions
to the external forces.
Hence, actin ﬁlaments are instable, they can assemble and disassemble rapidly by
polymerization and depolymerization respectively. For more details see [38, 48–56,
101].

42
2
Actin Filament Networks
(a) The cell cortex of Amoeba proteus
(b) The microvilli of Amoeba proteus
(c) The ﬁlopodia of Amoeba proteus
(d) The lamellipodium of Amoeba proteus
(e) The stress ﬁbers of Amoeba proteus
Fig. 2.13 The role of actin ﬁlaments in changing the shape of Amoeba proteus, see [4]
2.1.5
Actin Filament Zones as Fuzzy Logic Gates
Any unicellular organism like the amoeba of Amoeba proteus or the plasmodium
of Physarum polycephalum uses actin ﬁlament networks to react to external signals
well so that we can consider these organisms as logic gates [11–13, 16, 20, 21, 26,
27, 29, 30, 102]. Let us consider the situation of one signal represented just by one
attractant, see Fig.2.14. Hence, we deal here with a logic gate with one input. How
many outputs does this gate have? We see at Fig.2.14 that the number of outputs is
inﬁnite and represented by a continuous interval, e.g. for the amoeba the outputs run
over the closed interval [Outp1, Outp2] at least. So, we have one discrete input and
one interval as a continuous-valued output. This interval is understood as an active
zone of actin ﬁlament polymerization.

2.1 Reversible Logic Gates on Actin Filaments
43
(a) The amoeba of Amoeba proteus as a logic
gate with one input
(b) The
plasmodium
of
Physarum
poly-
cephalum as a logic gate with one input
Fig. 2.14 a The amoeba of Amoeba proteus feels that there is an attractant (food particle) above
denoted as Inp. This attractant is ﬁrst detected at the two points of the amoeba body: Outp1 and
Outp2. Then it is detected by a large upper zone of the body. b The plasmodium of Physarum
polycephalum feels that there is an attractant (food particle) above. At the end it is also detected by
a large zone of the plasmodium body, see [5]
However, the situation is much worse, because we deal not with a well-bounded
interval [Outp1, Outp2], but with a fuzzy set AInp such that [Outp1, Outp2] is covered
by AInp. This AInp is deﬁned as follows. Let μ be a membership function for each
actin ﬁlament x from the cell U such that μ: U →[0, 1]. Each outside signal Inp
gives a set AInp of active zone, where actin ﬁlaments are polymerized in the direction
of Inp. This set is determined by the membership function μ: AInp = {x: μ(x) > 0}.
At the momentum of signal Inp, the shape of the amoeba of Amoeba proteus or
the plasmodium of Physarum polycephalum can be different. Therefore, the same
Inp can give different fuzzy sets AInp, see Fig.2.14.
Let us assume that we have two outside signals Inp1 and Inp2. Then we can deﬁne
their fuzzy compositions [103]:
AInp1 ∨AInp2 = {x: μAInp1∨AInp2 = max(μAInp1 , μAInp2 )};
AInp1 ∧AInp2 = {x: μAInp1∧AInp2 = min(μAInp1 , μAInp2 )};
¬AInp1 = {x: μ¬AInp1 = 1 −μAInp1 };
¬AInp2 = {x: μ¬AInp2 = 1 −μAInp2 }.

44
2
Actin Filament Networks
Continuing in the same way, we can deﬁne fuzzy compositions for many signals
Inp1, Inp2, . . . , Inpn, . . .
Each outside signal Inp perceived by a cell causes a polymerization of actin
ﬁlaments in the direction of Inp. As a result, there is assembling an actin ﬁlament
network to change the cell shape. This cell transformation can be regarded as an
automaton with a discrete time t = 0, 1, . . . At each time step t, the cell shape is
different which causes the difference in reactions to the same outside signal Inp, i.e.
this shape transformation is a transition from one fuzzy set At
Inp at time t to another
fuzzy set At+1
Inp at time t + 1.
Inthebeginning,letusdeﬁnetransitionsfromoneshapestatestoothershapestates
just for crisp sets of active zones. These transitions can be deﬁned as an Euclidean
cellular automaton [104] over a parameter space P = ([0, ∞)3)n presented by the
inputs (i1, i2, . . . , in) (i.e. external forces acting on actin ﬁlaments) and the outputs
(o1, o2, . . . , on) (i.e. reactions of actin ﬁlament networks). This automaton is deﬁned
as a 4-tuple ⟨P, I, F, T⟩where P ⊂2P is a ﬁnite set of states of actin ﬁlament
networks given as subsets of P; I ⊂P is the set of initial states; F ⊂P is the
set of accepting states; and T : P × P →P is the transition function that assigns
for each parameter setting v = (i1, i2, . . . , in) ∈P and each state s ∈P a next state
t = T(v, s). The parameter v ∈P is deﬁned as a neighbourhood for (o1, o2, . . . , on)
with a 3-dimensional radius ε: v = {(i1, i2, . . . , in): |ik −ok| ≤ε, k = 1, n}. In this
automaton we deal with a continuous domain and with a ﬁnite set of states, i.e. with
subsets Pi of P indexed from a ﬁnite index set S. If Pi ∩Pj = ∅for all i, j ∈S, we
call the Euclidian cellular automaton deterministic; and if 
i∈S Pi = P, we call it
complete.
The input (i1, i2, . . . , in) is treated as n different signals from one side of the
plasmodium or amoeba body. Each ik for k = 1, n is a 3-dimensional coordinates
of the signal source. If there is no signal, its coordinates are (0, 0, 0). The output
(o1, o2, . . . , on) as n active zones of actin ﬁlament polymerization. Each ik for k =
1, n is a 3-dimensional coordinates of the center of polymerization wave. If the active
zone is deactivated, its coordinates are (0, 0, 0). Let us assume that in a resting state
the active zone is designated by a sphere with a diameter equal to 2a0, see Fig.2.15.
In an excited state this sphere is deformed to an ellipsoid so that an appropriate square
ACBD is transformed into a parallelogram A1C1B1D1. Let 2a1 and 2b1 be conjugate
diameters connecting the points of ellipsoid tangency with the parallelogram (i.e. the
larger and smaller side of the parallelogram, respectively) and δ be an angle between
them. Then the two main axes (i.e. the largest and smallest diameters of the ellipsoid,
respectively) are deﬁned as follows:
2a =

2(a2
1 + b2
1 +
	
(a2
1 + b2
1)2 −4a2
1b2
1 sin2 δ),
2b =

2(a2
1 + b2
1 −
	
(a2
1 + b2
1)2 −4a2
1b2
1 sin2 δ),

2.1 Reversible Logic Gates on Actin Filaments
45
Fig. 2.15 The deformation of the sphere in the square ACBD into the ellipsoid in the parallelogram
A1C1B1D1, see [5]
and the angle α between the largest diameter of the ellipsoid and the largest side of
the parallelogram as follows:
tg α = 1
2((1 −b2
a2 )tg δ −

(1 −b2
a2 )tg2 δ −4b2
a2 )
The largest diameter of the ellipsoid, 2a, shows the direction of propagation of
active zone of actin ﬁlament polymerization.
Thus, for the case of crisp sets, we have examined a zone AInp of actin ﬁlament
polymerization as a sphere with a diameter equal to 2a0, see Fig.2.15. Nevertheless, in
fact this AInp is not a crisp sphere, but a fuzzy sphere (e.g. fuzzy circles are considered
in [105]): instead of points (a, b, c) we take fuzzy points 
P(a, b, c) and instead of
diameter d = 2a0 we take a fuzzy number 
d. Continuing in the same way, we can
deﬁne a fuzzy ellipsoid deﬁned by fuzzy points 
P(a, b, c), the largest fuzzy diameter

dmax, the smallest fuzzy diameter
dmin, and by a fuzzy angle 
α showing a direction
of polymerization. For more details about fuzzy ﬁgures see [105].
Thus, the Euclidean cellular automaton deﬁned above can simulate the amoeboid
motions if we concentrate on transitions as deformations from one fuzzy ellipsoids
denoting active zones of polymerization at time t to other fuzzy ellipsoids denoting
active zones at time t + 1. This automaton having n inputs and n outputs is an imple-
mentation of an appropriate reversible logic gates. In the FREDKIN gate, the param-
eter space P = ([0, ∞)3)3. The input (i1, i2, i3) of this Euclidean cellular automaton
shows the localizations of attractants and repellents in the FREDKIN motions of the
amoeba or the plasmodium. The output (o1, o2, o3) shows the localization of active
zones of actin ﬁlament polymerization in accordance with the FREDKIN motions.

46
2
Actin Filament Networks
Using this gate in the way of [106], we can implement the adder on Amoeba proteus
and Physarum polycephalum and then some arithmetic functions.
2.1.6
Fredkin Gate on Amoeboid Motions
Taking into account the fact that it is known in general how it is possible to control
the polymerization and depolymerization of actin ﬁlaments, we can consider the
plasmodium of Physarum polycephalum as well as the amoeba (more correctly, their
actin ﬁlament networks) as a logical automaton with the two values: 1 and 0, where
(i) the external forces, to which the actin ﬁlaments are responding, are its inputs and
(ii) all the responses causing the amoeboid movement are its outputs. In this way it is
easier to implement reversible logic gates, where a unique input is associated with a
unique output and vice versa [107]. In these gates, the automaton maps each distinct
bit string input of the length n into a distinct bit string output of the same length. For
example, the FREDKIN gate is reversible, for the input [Inp1Inp2Inp3] ∈{0, 1}3 it
gives the output [Outp1Outp2Outp3] ∈{0, 1}3 by the following rule: Outp1 = Inp1,
Outp2 = OR(AND(NOTInp1, Inp2), AND(Inp1, Inp3)), and Outp3 = OR(AND(Inp1,
Inp2), AND(NOTInp1, Inp3)), i.e. we deal with the three inputs Inp1, Inp2, Inp3, and
the three outputs Outp1, Outp2, Outp3. See Table2.2.
The FREDKIN gate can be implemented by the motility as follows. Let us assume
that we have a conﬁguration of the three active zones of actin ﬁlament polymerization
depicted as ellipses A, B, C in Fig.2.16c. And this conﬁguration is the same for the
amoeba of Fig.2.16a and for the plasmodium of Fig.2.16b. Then let us take the input
string [Inp1Inp2Inp3] with the following meaning: (i) Inp1 = 0 if an appropriate zone
of the microenvironment contains an obstacle (barrier) consisting of repellents and
Inp1 = 1 otherwise; (ii) Inp2 = 1 if an appropriate zone of the microenvironment
Table 2.2 The FREDKIN gate in the permutation matrix form. The input [000] is mapped to the
output [000], [001] is mapped to [001], etc.
000
001
010
011
100
101
110
111
000
1
0
0
0
0
0
0
0
001
0
1
0
0
0
0
0
0
010
0
0
1
0
0
0
0
0
011
0
0
0
1
0
0
0
0
100
0
0
0
0
1
0
0
0
101
0
0
0
0
0
0
1
0
110
0
0
0
0
0
1
0
0
111
0
0
0
0
0
0
0
1

2.1 Reversible Logic Gates on Actin Filaments
47
(a) The FREDKIN gate for Amoeba proteus
(b) The FREDKIN gate for Physarum poly-
cephalum
(c) The transformation of the three actin ﬁla-
ment zones
Fig. 2.16 a The FREDKIN gate for Amoeba proteus with the three inputs: Inp1 = 1, Inp2 = 1,
Inp3 = 1, and the three outputs: Output1 = 1 (the cell zone Output1 moves right up), Output3 = 1
(the cell zone Output3 moves right down), Output2 = 1 (the cell zone Output2 moves right). b The
FREDKIN gate for Physarum polycephalum with the three inputs: Inp1 = 1, Inp2 = 1, Inp3 = 1,
andthethreeoutputs:Output1 = 1(theprotoplasmictubesOutput1 moverightup),Output3 = 1(the
protoplasmictubesOutput3 movesrightdown),Output2 = 1(theprotoplasmictubesOutput2 moves
right). c Fuzzy ellipsoids A, B, C designating the three active zones of actin ﬁlament polymerization
are transformed into fuzzy ellipsoids D, E, F, causing the movement of the amoeba [in (a)] as well
as of the plasmodium [in (b)], see [5]

48
2
Actin Filament Networks
contains an attractant and Inp2 = 0 otherwise; (iii) Inp3 = 0 if an appropriate zone
of the microenvironment contains an obstacle (barrier) consisting of repellents and
Inp3 = 1 otherwise. Let us assume that the output string [Outp1Outp2Outp3] with the
following meaning: (i) Outp1 = 1 if an appropriate zone of the cell has a deforma-
tion because of assembling an actin ﬁlament network and Outp1 = 0 otherwise; (ii)
Outp2 = 1 if an appropriate zone of the cell has a deformation because of assembling
an actin ﬁlament network and Outp2 = 0 otherwise; (iii) Outp3 = 1 if an appropriate
zone of the cell has a deformation because of assembling an actin ﬁlament network
and Outp3 = 0 otherwise.
Thus, we can implement some reversible logic gates on the amoeboid motions
based on actin ﬁlament networks, see Figs.2.16, 2.17, 2.18, 2.19, 2.20, 2.21, 2.22
and 2.23. Hence, the amoeboid movement can be represented as a reversible logic
gate if and only if we involve among attractants also some bariers/repellents. These
reversible logic gates on the medium of active zones of actin ﬁlament polymeriza-
tion can implement decidable arithmetic functions [106], especially p-adic valued
arithmetic functions [102].
The amoeboid motion is intelligent and can be simulated and controlled. Attrac-
tants and repellents are outside signals for actin ﬁlament networks and these signals
cause the polymerization of actin ﬁlaments to change the cell shape which causes
an appropriate amoeboid motion. Each active zone of polymerization is regarded as
a fuzzy ellipsoid directed towards the signal. Hence, we have reversible logic gates
with inputs corresponding to outside signals and outputs corresponding to fuzzy
ellipsoids designating active zones of polymerization. I have considered the FRED-
KIN gate as an example of automaton on transitions from one fuzzy ellipsoids to
other fuzzy ellipsoids.
2.1.7
Neural Properties of Actin Filament Networks
The actin ﬁlament network is more general than artiﬁcial neural networks. The main
difference is that in the latter the processors (‘neurons’) do not disappear, because
they are ﬁxed, but in the actin ﬁlament networks the processors (‘ﬁlaments’) appear
and disappear permanently. These ﬁlaments are combined into a wave front that
represents an active zone of actin ﬁlament polymerization.
It is worth noting that the actin ﬁlaments are responsible for remodeling neurons in
many-cellular organisms possessing the nervous system, also. In this system the actin
ﬁlaments change the shape and structure of dendritic spines in the same way as they
do it for the amoeba motility. G-actin is distributed throughout the whole axon and
the whole dendrite and it can be polymerized into F-actin to form new spines as well
as to stabilize the spine volume. As a result, the actin ﬁlaments form new synapses to
increase the cell communication. The ﬁlament polymerization promotes long-term
potentiation increasing the spine volume and the cell communication. The ﬁlament
depolymerization leads to a long-term depression decreasing the spine volume and
the cell communication.

2.1 Reversible Logic Gates on Actin Filaments
49
(a) The FREDKIN gate for Amoeba proteus
(b) The FREDKIN gate for Physarum poly-
cephalum
(c) The transformation of the three actin ﬁla-
ment zones
Fig. 2.17 a The FREDKIN gate for Amoeba proteus with the three inputs: Inp1 = 1, Inp2 = 1,
Inp3 = 0, and the three outputs: Output1 = 1 (the cell zone Output1 moves right up), Output3 = 0
(the cell zone Output3 does not move), Output2 = 1 (the cell zone Output2 moves right). b The
FREDKIN gate for Physarum polycephalum with the three inputs: Inp1 = 1, Inp2 = 1, Inp3 = 0,
and the three outputs: Output1 = 1 (the protoplasmic tubes Output1 move right up), Output3 = 0
(the protoplasmic tubes Output3 do not move), Output2 = 1 (the protoplasmic tubes Output2 moves
right). c Fuzzy ellipsoids A, B designating the two active zones of actin ﬁlament polymerization
are transformed into fuzzy ellipsoids D, E, causing the movement of the amoeba [in (a)] as well
as of the plasmodium [in (b)]. Fuzzy ellipsoid C designating one active zone of actin ﬁlament
polymerization did not change and was deactivated, see [5]

50
2
Actin Filament Networks
(a) The FREDKIN gate for Amoeba proteus
(b) The FREDKIN gate for Physarum poly-
cephalum
(c) The transformation of the three actin ﬁla-
ment zones
Fig. 2.18 a The FREDKIN gate for Amoeba proteus with the three inputs: Inp1 = 1, Inp2 = 0,
Inp3 = 1, and the three outputs: Output1 = 1 (the cell zone Output1 moves right up), Output3 = 1
(the cell zone Output3 moves right down), Output2 = 0 (the cell zone Output2 does not move). b The
FREDKIN gate for Physarum polycephalum with the three inputs: Inp1 = 1, Inp2 = 0, Inp3 = 1,
and the three outputs: Output1 = 1 (the protoplasmic tubes Output1 move right up), Output3 = 1
(the protoplasmic tubes Output3 move right down), Output2 = 0 (the protoplasmic tubes Output2 do
not move). c Fuzzy ellipsoids A, C designating the two active zones of actin ﬁlament polymerization
are transformed into fuzzy ellipsoids D, E, causing the movement of the amoeba [in (a)] as well as
of the plasmodium [in (b)]. Fuzzy ellipsoid B was deactivated and then divided and merged with D
and E, see [5]

2.1 Reversible Logic Gates on Actin Filaments
51
(a) The FREDKIN gate for Amoeba proteus
(b) The FREDKIN gate for Physarum poly-
cephalum
(c) The transformation of the three actin ﬁla-
ment zones
Fig. 2.19 a The FREDKIN gate for Amoeba proteus with the three inputs: Inp1 = 1, Inp2 = 0,
Inp3 = 0, and the three outputs: Output1 = 1 (the cell zone Output1 moves right up), Output3 = 0
(the cell zone Output3 does not move), Output2 = 0 (the cell zone Output2 does not move). b The
FREDKIN gate for Physarum polycephalum with the three inputs: Inp1 = 1, Inp2 = 0, Inp3 = 0,
and the three outputs: Output1 = 1 (the protoplasmic tubes Output1 move right up), Output3 = 0
(the protoplasmic tubes Output3 do not move), Output2 = 0 (the protoplasmic tubes Output2 do
not move). c Fuzzy ellipsoid A designating one active zone of actin ﬁlament polymerization is
transformed into fuzzy ellipsoid D, causing the movement of the amoeba [in (a)] as well as of the
plasmodium [in (b)]. Fuzzy ellipsoids B, C were deactivated and fuzzy ellipsoid B was merged with
fuzzy ellipsoid D, see [5]

52
2
Actin Filament Networks
(a) The FREDKIN gate for Amoeba proteus
(b) The FREDKIN gate for Physarum poly-
cephalum
(c) The transformation of the three actin ﬁla-
ment zones
Fig. 2.20 a The FREDKIN gate for Amoeba proteus with the three inputs: Inp1 = 0, Inp2 = 1,
Inp3 = 1, and the three outputs: Output1 = 0 (the cell zone Output1 does not move), Output3 = 1
(the cell zone Output3 moves right down), Output2 = 1 (the cell zone Output2 moves right). b The
FREDKIN gate for Physarum polycephalum with the three inputs: Inp1 = 0, Inp2 = 1, Inp3 = 1,
and the three outputs: Output1 = 0 (the protoplasmic tubes Output1 do not move), Output3 = 1 (the
protoplasmic tubes Output3 move right down), Output2 = 1 (the protoplasmic tubes Output2 move
right). c Fuzzy ellipsoids B, C designating the two active zones of actin ﬁlament polymerization
are transformed into fuzzy ellipsoids D, E, causing the movement of the amoeba [in (a)] as well as
of the plasmodium [in (b)]. Fuzzy ellipsoid A was deactivated and merged with fuzzy ellipsoid D,
see [5]

2.1 Reversible Logic Gates on Actin Filaments
53
(a) The FREDKIN gate for Amoeba proteus
(b) The FREDKIN gate for Physarum poly-
cephalum
(c) The transformation of the three actin ﬁla-
ment zones
Fig. 2.21 a The FREDKIN gate for Amoeba proteus with the three inputs: Inp1 = 0, Inp2 = 1,
Inp3 = 0, and the three outputs: Output1 = 0 (the cell zone Output1 does not move), Output3 = 1
(the cell zone Output3 moves right down), Output2 = 0 (the cell zone Output2 does not move). b The
FREDKIN gate for Physarum polycephalum with the three inputs: Inp1 = 0, Inp2 = 1, Inp3 = 0,
and the three outputs: Output1 = 0 (the protoplasmic tubes Output1 do not move), Output3 = 1
(the protoplasmic tubes Output3 move right down), Output2 = 0 (the protoplasmic tubes Output2
do not move). c Fuzzy ellipsoid C designating one active zone of actin ﬁlament polymerization is
transformed into fuzzy ellipsoid D, causing the movement of the amoeba [in (a)] as well as of the
plasmodium [in (b)]. Fuzzy ellipsoid A was deactivated totally. Fuzzy ellipsoid B was merged with
fuzzy ellipsoid D, see [5]

54
2
Actin Filament Networks
(a) The FREDKIN gate for Amoeba proteus
(b) The FREDKIN gate for Physarum poly-
cephalum
(c) The transformation of the three actin ﬁla-
ment zones
Fig. 2.22 a The FREDKIN gate for Amoeba proteus with the three inputs: Inp1 = 0, Inp2 = 0,
Inp3 = 1, and the three outputs: Output1 = 0 (the cell zone Output1 does not move), Output3 = 0
(the cell zone Output3 does not move), Output2 = 1 (the cell zone Output2 moves right). b The
FREDKIN gate for Physarum polycephalum with the three inputs: Inp1 = 0, Inp2 = 0, Inp3 = 1,
and the three outputs: Output1 = 0 (the protoplasmic tubes Output1 do not move), Output3 = 0 (the
protoplasmictubesOutput3 donotmove),Output2 = 1(theprotoplasmictubesOutput2 moveright).
c Fuzzy ellipsoid B designating one active zone of actin ﬁlament polymerization is transformed into
fuzzy ellipsoid D, causing the movement of the amoeba [in (a)] as well as of the plasmodium [in
(b)]. Fuzzy ellipsoids A, C were deactivated, see [5]

2.1 Reversible Logic Gates on Actin Filaments
55
(a) The FREDKIN gate for Amoeba proteus
(b) The FREDKIN gate for Physarum poly-
cephalum
(c) The transformation of the three actin ﬁla-
ment zones
Fig. 2.23 a The FREDKIN gate for Amoeba proteus with the three inputs: Inp1 = 0, Inp2 = 0,
Inp3 = 0, and the three outputs: Output1 = 0 (the cell zone Output1 does not move), Output3 = 0
(the cell zone Output3 does not move), Output2 = 0 (the cell zone Output2 does not move). b The
FREDKIN gate for Physarum polycephalum with the three inputs: Inp1 = 0, Inp2 = 0, Inp3 = 0,
and the three outputs: Output1 = 0 (the protoplasmic tubes Output1 do not move), Output3 = 0
(the protoplasmic tubes Output3 do not move), Output2 = 0 (the protoplasmic tubes Output2 do not
move). c Fuzzy ellipsoids A, B, C designating the three active zones of actin ﬁlament polymerization
were deactivated, causing the rest of the amoeba [in (a)] as well as of the plasmodium [in (b)], see
[5]

56
2
Actin Filament Networks
In the actin ﬁlament networks we ﬁnd out some analogous phenomena with some
basic properties of the neural networks (see [108, 109] and compare to [14]):
• Lateral inhibition. In neurons, a presynaptic cell excites inhibitory interneurons
and they inhibit neighbouring cells in the neural network. As a result, the contrast
of the signal is made more visible. In actin ﬁlaments, neighbouring bundles are
inhibited to increase the intensity of the signal. As a consequence, one active zone
of actin ﬁlament polymerization appears instead of several possible zones.
• Lateral activation. In neurons, a presynaptic cell excites activation interneurons
and they activate neighbouring cells in the neural network. As a consequence, the
contrast of the signal is made less visible. In actin ﬁlaments, neighbouring bundles
are activated to decrease the intensity of the signal. Several active zones of actin
ﬁlament polymerization appear towards this signal.
• Feedback/recurrent inhibition. In neurons, a presynaptic cell transmits the signal
to a postsynaptic cell, and the postsynaptic cell in turn transmits it to an interneu-
ron, which then inhibits the presynaptic cell. Due to this circuit there is a limitation
for the excitation and the rhythmic changing in the transmission of the signal is
possible. The similar takes place for the actin ﬁlament bundles causing the gener-
ating of rhythmic behaviours. One active zone of actin ﬁlament polymerization is
rhythmically transformed into another active zone.
• Feedback/recurrent excitation. A presynaptic cell excites a postsynaptic neuron
and the postsynaptic neuron excites in turn the presynaptic cell. It is used for learn-
ing and memory processes. In actin ﬁlaments, recurrent excitation accumulates the
external stimuli as a positive feedback to continue the same pattern of behaviour.
One active zone of actin ﬁlament polymerization is continuously transformed into
another active zone.
• Feedforward inhibition. A presynaptic neuron excites an inhibitory interneuron
that inhibits the next neuron. The actin ﬁlaments ignore some signals if they ‘see’
neighbour repellents.
• Feedforward excitation. A presynaptic neuron excites a postsynaptic neuron. In
actin ﬁlaments, we have a direct action in changing the actin ﬁlaments caused by
one external attracting stimulus.
• Convergence/divergence. A postsynaptic neuron receives a convergent input from
a number of different presynaptic neurons and this postsynaptic neuron makes
further divergent connections to other postsynaptic neurons. Convergence allows
a cell to receive a signal from many cells and divergence allows a cell to transmit
the signal further. Secreting a cyst wall of the amoeba is an example of this effect
for the actin ﬁlament bundles in Amoeba proteus.
As we see, the actin ﬁlament networks are more complex than neural networks and the
basic neuronal properties are analogous to appropriate properties of actin ﬁlaments.
Nevertheless, the actin ﬁlament networks are not studied well recently from the point
of view of mathematics. About memory of unicellular amoeboid organisms, please
see [31, 32, 110–115].

2.2 Arithmetics in Actin Filament Networks
57
2.2
Arithmetics in Actin Filament Networks
2.2.1
p-Adic Valued Arithmetic Functions in Actin Filament
Networks
Let us consider the discrete time t = 0, 1, 2, . . . assuming that at each time step t the
actin ﬁlaments of the amoeba face not more than n attractants or repellents and react
to n stimuli. Then the amoeba motion can be examined as an arithmetic function
f2n(x) = y, where x, y ∈{0, 1, . . . , 2n −1}, e.g. in the FREDKIN gate (Figs.2.16,
2.17, 2.18, 2.19, 2.20, 2.21, 2.22 and 2.23) we deal with the arithmetic function
f23, where the inputs and the outputs of Table2.2 are rewritten as natural numbers:
x0x1x2 = 2
i=0 xi · 2i. For example, 000 = 0 and 111 = 2
i=0 1 · 2i = 7. Hence, if
we have n signals at the time step t, then Amoeba proteus or plasmodium of Physarum
polycephalum calculatesanarithmeticfunctionf2n atthist.Whatf2n isinfact,depends
on the topology of n stimuli (their intensity, localization, combination, etc.). For
instance, the combination of inputs [Inp1Inp2Inp3], where Inp2 is an attractant or its
absence and Inp1, Inp3 are barriers consisting of repellents or their absence, gives
us the FREDKIN gate if we have a conﬁguration of the three active zones of actin
ﬁlament polymerization depicted as ellipses A, B, C in Fig.2.16c.
Thus, if the amoeba meets not more than n stimuli at t = 0, 1, 2, . . . , then we
obtain a sequence of functions:
f t=0
2n
f t=1
2n f t=2
2n
. . . ,
(2.1)
where at each t = i the arithmetic function f t=i
2n
can be different. Let us denote this
sequence by f . It can be considered a p-adic valued function for p = 2n:
f (α) = β,
(2.2)
where α = α0α1α2 . . . and β = β0β1β2 . . . such that we have f t=i
2n (αi) = βi for each
i = 0, 1, 2, . . . The numbers α and β are p-adic, because
α =
∞

i=0
αi · pi,
β =
∞

i=0
βi · pi
and αi, βi ∈{0, . . . , p −1} for each i = 0, 1, 2, . . . Hence, the amoeboid long-time
locomotion can be simulated by p-adic valued arithmetic functions of the form of
(2.2).
In the paper [23], there was proposed the p-adic valued logic for simulating the
locomotion of Physarum polycephalum plasmodia. The same logic can be used for
simulating the Amoeba proteus locomotion as well as actin ﬁlament reactions of
other cells. In this logic we can combine many trajectories of the form of (2.1) by
which different amoebae have navigated.

58
2
Actin Filament Networks
Let us notice that arithmetic operations in p-adic valued logic can be deﬁned
corecursively. Assume that [] is an empty list and a:s is an inﬁnite list of integers
from {0, . . . , p −1} with a head a and a tail s. If the tail is a constant, it means that
this constant repeats for ever. For example, a:0 means that after a there is an inﬁnite
list of 0. The list a:s can be deﬁned as a:b:s’, the list a:b:s’ as a:b:c:s’’,
etc. Meanwhile, b is the ﬁrst element of the tail s, c is the ﬁrst element of the tail
s’, etc. So, each tail is an inﬁnite list in turn: s = b:s’, s’ = c:s’’, etc. Let
next(a:b:s)= b:s. Let us deﬁne the p-adic valued sum as follows:
sum (a,c):[] = sum (a:[], c:[])
next (sum (a:b:s, c:d:s’)) = sum (b:s, d:s’)
The p-adic valued product:
prod (a,c):[] = prod (a:[],
c:[])
next(prod (a:b:s, c:d:s’)) = sum (prod (a:0, d:s’),
prod(b:s, c:d:s’))
Now, let us assume that 0:0 is a minimal p-adic integer (it is an inﬁnite list of 0)
and p-1:p-1 is a maximal p-adic integer (it is an inﬁnite list of p −1). Then let us
deﬁne the p-adic valued conjunction corecursively:
min (a,c):[] = min (a:[], c:[])
next (min (a:b:s, c:d:s’)) = min (b:s, d:s’)
as well as p-adic valued disjunction:
max (a,c):[] = max (a:[], c:[])
next (max (a:b:s, c:d:s’)) = max (b:s, d:s’)
The negation is deﬁned as follows:
not(a):[] = p-1- (a:[])
next (not(a:b:s)) = p-1:p-1 - (b:s)
In this way we obtain the ring of p-adic integers, Zp, where p = 2n, with the
p-adic valued conjunction, disjunction, and negation. For t →∞the amoeba or
plasmodium motility implements arithmetic functions on Zp by reversible logic gates
as the FREDKIN gate. The ﬁeld of p-adic numbers, Qp, exists just for the prime p,
but our p is equal to an even number 2n. So, we cannot obtain the ﬁeld for p = 2n,
only the ring, if n > 1. Hence, for 2-adic numbers there is the ﬁeld Q2. Another
important feature is that Zp contains inﬁnite integers and the set Zp is uncountable
(see Table2.3). Due to this fact Zp differs from the ring of integers, Z, a lot (the
cardinal number of Zp is larger, than the cardinal number of Z, i.e. it is larger than
ℵ0). In particular, some arithmetic functions on Zp are undecidable by deﬁnition. The
matter is that Zp is a codata set (non-inductive set, i.e. corecursive or coinductive data)
with non-Archimedean properties. For Zp, there are no algorithms for calculating all
arithmetic functions by deﬁnition, because their objects are deﬁned coinductively,
not inductively.

2.2 Arithmetics in Actin Filament Networks
59
Table 2.3 The Cantor’s diagonalization showing that the set of all outputs is uncountable in the
p-adic universe. Let us take the diagonal (p −1, p −1, p −3, . . .) from the table and change it as
follows: (0, 0, 1, . . . ). This new p-adic integer does not occur in the enumeration
Input
strings
The number of output string at t
i0
p −1
p −1
p −1
p −1
p −1
p −1
. . .
i1
p −2
p −1
p −2
p −1
p −2
p −1
. . .
. . .
. . .
. . .
. . .
. . .
. . .
. . .
. . .
in
0
p −1
0
p −1
0
p −1
. . .
in+1
p −1
p −2
p −1
p −2
p −1
p −2
. . .
. . .
. . .
. . .
. . .
. . .
. . .
. . .
. . .
Table 2.4 The partition of the set of all p-adic valued arithmetic functions, F, into the subsets Ft
p,
where t = 0, 1, 2, . . . , p = 2, 4, 8, 16, 32, . . .
1-st n (n = 1)
1-st p (p = 2)
2-nd n (n = 2)
2-nd p (p = 4)
3-rd n (n = 3)
3-rd p (p = 8)
. . .
t = 0
f t=0
21
∈Ft=0
p=2
f t=0
22
∈Ft=0
p=4
f t=0
23
∈Ft=0
p=8
. . .
t = 1
f t=1
21
∈Ft=1
p=2
f t=1
22
∈Ft=1
p=4
f t=1
23
∈Ft=1
p=8
. . .
t = 2
f t=2
21
∈Ft=2
p=2
f t=2
22
∈Ft=2
p=4
f t=2
23
∈Ft=2
p=8
. . .
...
...
...
...
...
t →∞
f ∞
21 ∈F∞
p=2
f ∞
22 ∈F∞
p=4
f ∞
23 ∈F∞
p=8
. . .
Now, we can enumerate all the arithmetic functions which are implementable in
actin ﬁlament networks as follows. Let us take a partition of all arithmetic functions
on Zp for different p in the way of Table2.4. For each p there is the following
enumeration of all arithmetic functions for the ﬁxed t. Each function f t
2n ∈Ft
p=2n is
one of the possible t-th permutations of the numbers 0, 1, . . . , 2n −1 and can be
distinguished by the following code:
⌈f t
2n⌉=
t
i=0
⎛
⎝
2n−1

j=1
cji · j!
⎞
⎠· ((2n −1)!)i,
(2.3)
where cji counts the number of positions in the given i-th permutation that are to the
right of value j and that contain a value less than j. For instance, for the FREDKIN
gate we have the permutation (0, 1, 2, 3, 4, 6, 5, 7). This means that
23−1

j=1
cj · j! = 0 · 1! + 0 · 2! + 0 · 3! + 0 · 4! + 0 · 5! + 1 · 6! + 0 · 7! = 720.

60
2
Actin Filament Networks
Let us assume that the FREDKIN gate was applied two times and t = 1. As a con-
sequence:
1

i=0
⎛
⎝
23−1

j=1
cji · j!
⎞
⎠· ((23 −1)!)i = 720 + 720 · 7! = 3,629,520.
For the function f ∞
2n , its code is as follows:
⌈f ∞
2n ⌉=
∞

t=0
⎛
⎝
2n−1

j=1
cjt · j!
⎞
⎠· ((2n −1)!)t.
(2.4)
This code is (p −1)!-adic.
Hence, each p-adic valued arithmetic function (2.2) coded by (2.4) denotes just an
inﬁnite trajectory of one amoeba or plasmodium of Physarum polycephalum under
the conditions of not more than n inputs at each time step t. These trajectories can be
combined by arithmetic and logical operations of the p-adic valued logic deﬁned in
[23]. In this way we can simulate a colony of amoebae, their common locomotion,
their ongoing divisions and deaths, etc.
2.2.2
Undecidable Functions in Actin Filament Networks
Let us remind that a set A is called computable (decidable or solvable) if there exists
a Turing machine M that behaves as follows:
M (x) =
1, if x ∈A;
0, otherwise.
So, we assume that each Ft
p is decidable. Let M1, M2, . . . , be a standard list of Turing
machines that includes all programs for Ft
p for a ﬁxed p and from the index i it is
possible to extract a code i = ⌈f t
2n⌉such that Mi decides that f t
2n ∈Ft
p. It means, we
suppose that there is a Turing machine M that takes an input ⟨i, x⟩= ⟨⌈f t
2n⌉, f t
2n⟩and
gives an output Mi(x).
The set K0 = {⟨i, x⟩: Mi(x) halts} is called a halting set. If the computation halts,
then we know that ⟨i, x⟩∈K0.
Theorem 2.1 The set K0 is not decidable.
Proof We can appeal to diagonalization to prove this statement. Let us assume that
K0 is decidable and let M0 be a Turing machine that decides K0. We can deﬁne M0
as follows:
M0(x) =
1, Mi halts;
0, otherwise.

2.2 Arithmetics in Actin Filament Networks
61
Since M0 is a Turing machine, it has a code e, therefore Me = M0. Now, we can
deﬁne F′t
p = {i: Mi(i) ̸= 1}. This set is undecidable for any i. Then the set K0 ⊇
{⟨i, i⟩: Mi(i) ̸= 1} is undecidable, too.
□
Let us consider an example of F′t
p from Theorem 2.1. Take the following machine:
D(M ) =
1, M (f t
2n) ̸= M (⌈f t
2n⌉);
0, otherwise.
Then let us deﬁne the diagonalization:
D(D) =
1, D(M ) ̸= D(⌈M ⌉);
0, otherwise.
The actin ﬁlament networks are too sensitive to the cellular surroundings. We have
assumed that the amoeboid motility programmed by the actin ﬁlament networks is
a kind of the reversible logic gates, i.e. for n inputs it gives just n outputs. However,
the situation of the real amoeboid reactions is much more difﬁcult. In reality, it looks
like as follows. All the external signals have a scaling that is too different from the
actin ﬁlament networks. The point is that the networks have a much better zooming
than any outer stimulus. This fact allows them to react continuously to all possible
signals at any point of the shape. The amoeba is an analogue computer.
The latter feature can be formulated as the situation when the number of outputs
is larger, than the number of inputs. The amoeboid reactions with the n inputs and
the m > n outputs can be considered a hybrid action [116]. The set of hybrid actions
can have an inﬁnite set of labels [116]. So, it is unsolvable by deﬁnition. The hybrid
actions are undecidable in the meaning of Theorem 2.1. Let us deﬁne them:
d(f t
2n) =
⎧
⎪⎪⎨
⎪⎪⎩
accept, the amoeba accepts g such that
g > f t
2n for any f t
2n
at t with the n inputs;
reject, otherwise.
Thus, we can implement undecidable arithmetic functions in the actin ﬁlament net-
works, too.
2.2.3
Formal Systems and Undecidability
Let us consider the following formal system: F = ⟨K, V, P, I, L⟩, where K = {a,
b, c, . . . } is an alphabet consisting of signs, V = {x, y, z, . . . } is a set of variables,
P = {S1, S2, . . . } is a set of predicates, I consists of comma (,) and implication (⊃),
L is a set of axioms deﬁning strings. The string is of the form sA1, . . . , An, where

62
2
Actin Filament Networks
A1, . . . , An ∈K ∪V . This string means that the sequence of symbols A1, . . . , An
belongs to S.
This system F generates some strings over signs, variables, and predicates by
using axioms and the following two inference rules: (i) the substitution rule—we
can replace the same variable by the same sequence of signs; (ii) modus ponens—if
there are axioms A and A ⊃B, then we obtain a string B, where A and B are some
strings over K.
For instance, let K = {n, s, w, e}, where n denotes a north location, s is a south
location, w is a west location, and e is an east location. Let V consist only of one
variable x. Assume that the only predicate of the system, S, means an occupation
by an organism (plasmodium or amoeba). So, an atomic string Sn means that the
organism is located at the point denoted by n (north). Suppose that our axioms are
as follows:
Sn; Ss; Sw; Se.
They mean that it is accessible that our organism is located at n, s, w, or e. The
additional axioms:
Sns; Snw; Sne; Ssn; Ssw; Sse; Sen; Ses; Sew,
where each SAB means that the organism is located ﬁrst at A, then at B.
Now the composite axioms:
Sxn ⊃Sxne;
Sxs ⊃Sxsw;
Sxe ⊃Sxen;
Sxw ⊃Sxws.
By using the substitution rule and modus ponens, we can deﬁne all the strings
of that system simulating a propagation of organism in some chosen directions. If a
string A is obtained by applying modus ponens tm times and by applying the substitu-
tion rule ts times, we say that this string A is obtained at the time step t = tm + ts. So,
the strings Sn, Ss, Sw, Se, Sns, Snw, Sne, Ssn, Ssw, Sse, Sen, Ses, Sew are formed at
the time t = 0. The string Snsws is built at the time step t = 4, etc.
Another example is as follows. The FREDKIN gate of Figs.2.16, 2.17, 2.18,
2.19, 2.20, 2.21, 2.22 and 2.23 has the following formal system: ⟨K, S, W, L⟩, where
K = {u, r, d} and u is a motion up right, r is a motion directly right, d is a motion
down right. We have the following possible lines: (i) A1 := u, r, d, Fig.2.16; (ii)
A2 := u, r, Fig.2.17; (iii) A3 := u, d, Fig.2.18; (iv) A4 := u, Fig.2.19; (v) A5 := r, d,
Fig.2.20; (vi) A6 := d, Fig.2.21; (vii) A7 := r, Fig.2.22; (viii) A8 := ∅, Fig.2.23. So,
let us consider not sequences of symbols, but lines of symbols. Let V consist of the

2.2 Arithmetics in Actin Filament Networks
63
two variables Ax and Ay for lines. The only predicate, S, means an occupation by
plasmodium or amoeba. The axioms are as follows:
sA1; sA2; sA3; sA4; sA5; sA6; sA7; sA8.
(2.5)
For example, sA3 means that we deal with a line Su, Sd. The next axiom
sAx ⊃(sAy ⊃sAxAy)
(2.6)
allows us to apply modus ponens for building new strings.
Let us show how we can construct new strings by applying the substitution rule
and modus ponens. For instance, at formula (2.6), let sAx be replaced by sA3(t = 1),
then by modus ponens we have (sAy ⊃sA3Ay) (t = 2). Then sAy is replaced by
sA5(t = 3). And by modus ponens we obtain sA3A5 (t = 4). This sA3A5 means all
the combinations of all signs from the line A3 and A5: Sur, Sdr, Sud, Sdd. In order
to compare formal systems with 2n-adic functions of (2.2), let us make the time step
the same. For this purpose we should take just numbers 4t of time steps in formal
systems and divide them by 4. The number t < 4 is taken as 0.
Generating an inﬁnite string in a formal system can be considered as a 2n-adic
valued function (2.2), where n is a number of signs used at time t (e.g. n = 3 in the
FREDKIN gate), with a (2n −1)!-adic valued code (2.4). At each time step t we can
use different logic gates. So, axioms involved in generating strings can be different,
too. For example, if a gate is FREDKIN, our axioms are (2.5) ∧(2.6). Assume that
a string X is obtained by using the axioms Ax1, . . . , Axk. Then it is denoted by a
string of the form Ax1 ⋆· · · ⋆Axk ⋆X . The formal system closed under such strings
is denoted by U .
We say that a predicate S represents a set of strings/lines, S′, in the formal system
U if for each sequence of signs/lines X we have:
X ∈S′ if and only if Ax1 ⋆· · · ⋆Axk ⋆SX and SX is inferable in U from axioms
Ax1, . . . , Axk.
Axioms Ax1, . . . , Axk used at time t are coded by (2n −1)!-adic valued num-
ber (2.3). Let us remember that each p-adic valued number n = ∞
t=0 nt · pt has
the notation n = . . . nt . . . n1n0. This notation is very useful for us. Let X and Y
be two strings/lines in U , and ⌈X ⌉and ⌈Y⌉are their p-adic codes. Then a com-
posite string/line XY has a p-adic code ⌈XY⌉= ⌈Y⌉⌈X ⌉. So, p-adic codes preserve
concatenations of strings/lines.
We know that axioms Ax1, . . . , Axk at t has a (2n −1)!-adic valued code h =
⌈Ax1, . . . , Axk⌉calculated by formula (2.3). Let the code for SX be a (2n −1)!-
adic valued number h′ = ⌈SX ⌉that is given by an appropriate logic gate under
conditions X . Then the (2n −1)!-adic valued code for Ax1 ⋆· · · ⋆Axk ⋆SX is equal
to h′h. Let us differ these codes for all t in the way: h′
tht = h′
tht . . . h′
1h1h′
0h0 and
h′
∞h∞= . . . h′
tht . . . h′
1h1h′
0h0.
Let T be a set of all true strings/lines of U and T0 be a set of (2n −1)!-adic valued
codes for strings/lines from T.

64
2
Actin Filament Networks
Theorem 2.2 The set T0 is recursively enumerable and not decidable.
Proof Let X be a string/line from U and A be a set of (2n −1)!-adic valued numbers.
This X is called a Gödel proposition if:
X ∈T if and only if ⌈X ⌉∈A.
Suppose that X is written in numbers of (2n −1)!-adic valued arithmetics and
its (2n −1)!-adic code is X0. The string X0X is called a diagonalization of X . The
axioms of our arithmetics:
Pa1, ⌈a1⌉;
. . .
Pak, ⌈ak⌉;
. . . ,
where each ak is (2n −1)!-adic valued number.
Px, ⌈x⌉⊃(Py, ⌈y⌉⊃Pyx, ⌈y⌉⌈x⌉).
These axioms give for each X its diagonalization X0X with a code ⌈X0⌉⌈X ⌉.
Assume that there is a set A′ for each set of numbers A such that A′ contains
diagonalizations for all numbers from A. Now, let us show that if A is recursively
enumerable, then A′ is recursively enumerable. Let us introduce the new axiom:
Px, ⌈x⌉⊃(A⌈x⌉x ⊃A′⌈x⌉).
Then if A⌈x⌉x is inferable, then A′⌈x⌉is inferable under conditions that A represents
A and A′ represents A′. From this it follows that if A is recursively enumerable, then
A′ is recursively enumerable, too.
Show that for each recursively enumerable set A there exists a Gödel proposition.
Let A′ be represented by a predicate H. Then for any number n
nH is true if and only if n0 ∈A′ if and only if n0n ∈A.
We know that n is a code ⌈H⌉, then:
⌈H⌉H is true if and only if ⌈⌈H⌉⌉⌈H⌉∈A.
Consequently, ⌈H⌉H is a Gödel proposition for A.
Let ¬T0 be a complement of T0 in the set of all possible strings/lines in U . Then
there is no Gödel proposition for ¬T0, because each Gödel proposition is deﬁned
for A = T0. To be decidable, the set T0 should be recursively enumerable and its

2.2 Arithmetics in Actin Filament Networks
65
complement, ¬T0 should be recursively enumerable, too. However, we have shown
that only T0 is recursively enumerable.
□
The main problem of designing the actin ﬁlament networks consists in controlling
the signal transmission through the actin ﬁlaments [48, 59, 117, 118]. It is known
that the actin ﬁlaments support propagation of voltage pulses (see [8] and compare
to [119]) and, therefore, it is possible to explain the signal transmission through the
actin ﬁlaments by an interaction between voltage pulses, where 1 (‘true’) is assigned
to the presence of a voltage pulse in a given location of the actin ﬁlament, and 0
(‘false’) is assigned to the pulse’s absence, so that Boolean logical gates and a one-
bit half-adder with interacting voltage pulses can be constructed well [8]. In my
research, I focus only on visible transformations of the cell shape to implement a
formal arithmetic. Theorem 2.2 demonstrates that this arithmetic is implementable
in the amoeboid motions with decidable and undecidable arithmetic functions. This
statement supports the hypothesis of orchestrated objective reduction [37]. In order
to prove this hypothesis, we should know how to control each signal transmission
through the actin ﬁlaments, including voltage pulses.
I was grounded on the idea that each actin ﬁlament is a double chain of nodes,
which take state 0 (resting) or 1 (excited), see Sect.2.1.1. These states are updated
in parallel in discrete time depending on states of two closest neighbours in the
node chain and two closest neighbours in the complementary chain. In this way it is
possible to represent the actin ﬁlaments as an automaton of ﬁnite states with transition
rules that support traveling and mobile localizations [6, 120]. Also, we can assume
that states of nodes depends not only on the current states of neighbouring node but
also on their past states so that we assess the effect of memory of past states on the
dynamics of acting automata [2].
The actin ﬁlament networks are responsible for cellular reactions to external stim-
uli. So, if it is possible to design a protein robot solving a complex of various tasks
(learning, orientation in space, decision making about transitions etc.), then this robot
will consist of actin ﬁlaments controlled by us. And taking into account the possibility
to implement undecidable arithmetic functions in actin ﬁlament networks, this bio-
logical robot will present a kind of hypercomputation beyond any Turing machines.
The main result of the chapter is to show that reactions of Amoeba proteus to n
external stimuli, expressed in transformations of the cell shape, can be represented as
an arithmetic function f2n(x) = y, where x, y ∈{0, 1, . . . , 2n −1}. So, I have exam-
ined the FREDKIN gate (Figs.2.16, 2.17, 2.18, 2.19, 2.20, 2.21, 2.22 and 2.23) deal-
ing with the arithmetic function f23, where the inputs and the outputs of Table2.2 have
been rewritten as natural numbers: x0x1x2 = 2
i=0 xi · 2i. Furthermore, we can dis-
tinguish time t = 0, 1, 2, . . . for amoeboid reactions, assuming that at each time step
t, the Amoeba proteus faces different n external stimuli and reacts to them differently
by implementing different arithmetic functions. It means that all the behaviour of
Amoeba proteus is regarded as a realization of arithmetic functions f t=0
2n
f t=1
2n f t=2
2n
. . .
at t = 0, 1, 2, . . . In this way we can show that a colony of amoebae implements
a formal arithmetic with decidable and undecidable arithmetic functions (Theorem
2.2). This fact is a good argument supporting the hypothesis of orchestrated objective

66
2
Actin Filament Networks
reduction [37], that is, we see that even at the level of unicellular organisms such as
amoebae we observe a kind of intelligence. This intelligence can be explained by a
feature of perceiving external signals by actin ﬁlament networks. The point is that
the same signal can be perceived differently (see Fig.2.14)—it depends on the cell
shape and many other internal circumstances. As a consequence, we can have more
outputs than inputs in possible reactions of actin ﬁlament networks. The latter case
means that the organism can implement an undecidable arithmetic function (see the
commentary after Theorem 2.1).
References
1. Adamatzky, A., Mayne, R.: Actin automata: Phenomenology and localizations. Int. J. Bifurc.
Chaos 25(2) (2015). https://doi.org/10.1142/S0218127415500303
2. Alonso-Sanz, R., Adamatzky, A.: Actin automata with memory. Int. J. Bifurc. Chaos 26(1)
(2016)
3. Schumann, A.: Toward a computational model of actin ﬁlament networks. In: Proceedings of
the 9th International Joint Conference on Biomedical Engineering Systems and Technologies
(BIOSTEC 2016)—Volume 4: BIOSIGNALS, Rome, Italy, 21–23 Feb 2016, pp. 290–297
(2016). https://doi.org/10.5220/0005828902900297
4. Schumann, A.: On arithmetic functions in actin ﬁlament networks. In: 10th EAI Interna-
tional Conference on Bio-inspired Information and Communications Technologies (formerly
BIONETICS). ACM (2017). https://doi.org/10.4108/eai.22-3-2017.152402
5. Schumann, A.: Decidable and undecidable arithmetic functions in actin ﬁlament networks. J.
Phys. D Appl. Phys. (2017). https://doi.org/10.1088/1361-6463/aa9d7b
6. Siccardi, S., Adamatzky, A.: Actin quantum automata: communication and computation
in molecular networks. Nano Comm. Netw. 6(1), 15–27 (2015). https://doi.org/10.1016/j.
nancom.2015.01.002
7. Siccardi, S., Adamatzky, A.: Quantum actin automata and three-valued logics. IEEE J. Emerg.
Sel. Topics Circuits Syst. 6(1), 53–61 (2016)
8. Siccardi, S., Tuszynski, J.A., Adamatzky, A.: Boolean gates on actin ﬁlaments. Phys. Lett. A
380(1), 88–97 (2016)
9. Adamatzky, A.: Physarum machine: implementation of a Kolmogorov-Uspensky machine on
a biological substrate. Parallel Process. Lett. 17(4), 455–467 (2007)
10. Adamatzky, A.: Physarum machines: encapsulating reaction-diffusion to compute spanning
tree. Naturwisseschaften 94, 975–980 (2007)
11. Adamatzky, A.: Physarum Machines: Computers from Slime Mould. Series on Nonlinear
Science A, World Scientiﬁc (2010)
12. Adamatzky, A.: Slime mould logical gates: exploring ballistic approach. In: Applications,
Tools and Techniques on the Road to Exascale Computing, vol. 1, pp. 41–56 (2010)
13. Adamatzky, A.: Slime mould computing. Int. J. Gen. Syst. 44(3), 277–278 (2015)
14. Adamatzky, A.: A would-be nervous system made from a slime mold. Artif. Life 21(1), 73–91
(2015)
15. Adamatzky, A., Schubert, T.: Slime mold microﬂuidic logical gates. Mater. Today 17(2),
86–91 (2014)
16. Berzina, T., Dimonte, A., Cifarelli, A., Erokhin, V.: Hybrid slime mould-based system for
unconventional computing. Int. J. Gen. Syst. 44(3), 341–353 (2015). https://doi.org/10.1080/
03081079.2014.997523
17. Jones, J., Mayne, R., Adamatzky, A.: Representation of shape mediated by environmental
stimuli in Physarum polycephalum and a multi-agent model. JPEDS 32(2), 166–184 (2017)

References
67
18. Jones, J.D., Adamatzky, A.: Towards Physarum binary adders. Biosystems 101(1), 51–58
(2010)
19. Kalogeiton, V.S., Papadopoulos, D.P., Georgilas, I., Sirakoulis, G.C., Adamatzky, A.: Cellular
automaton model of crowd evacuation inspired by slime mould. Int. J. Gen. Syst. 44(3), 354–
391 (2015). https://doi.org/10.1080/03081079.2014.997527
20. Mayne, R., Adamatzky, A.: Slime mould foraging behaviour as optically coupled logical
operations. Int. J. Gen. Syst. 44(3), 305–313 (2015). https://doi.org/10.1080/03081079.2014.
997528
21. Ntinas, V.G., Vourkas, I., Sirakoulis, G.C., Adamatzky, A.: Oscillation-based slime mould
electronic circuit model for maze-solving computations. IEEE Trans. Circuits Syst. 64-I(6),
1552–1563 (2017)
22. Pancerz, K., Schumann, A.: Rough set models of Physarum machines. Int. J. Gen. Syst. 44(3),
314–325 (2015)
23. Schumann, A.: p-adic valued logical calculi in simulations of the slime mould behaviour.
J. Appl. Non-Class. Log. 25(2), 125–139 (2015). https://doi.org/10.1080/11663081.2015.
1049099
24. Schumann, A.: Towards slime mould based computer. New Math. Nat. Comput. 12(2), 97–111
(2016). https://doi.org/10.1142/S1793005716500083
25. Schumann, A., Pancerz, K.: Logics for physarum chips. Studia Humana 5(1), 16–30 (2016).
https://doi.org/10.1515/sh-2016-0002
26. Shirakawa, T., Sato, H., Ishiguro, S.: Constrcution of living cellular automata using the
Physarum polycephalum. Int. J. Gen. Syst. 44, 292–304 (2015)
27. Shirakawa, T., Yokoyama, K., Yamachiyo, M., Gunji, Y.P., Miyake, Y.: Multi-scaled adapt-
ability in motility and pattern formation of the Physarum plasmodium. Int. J. Bio-Inspir.
Comput. 4, 131–138 (2012)
28. Tsuda, S., Aono, M., Gunji, Y.P.: Robust and emergent Physarum-computing. BioSystems
73, 45–55 (2004)
29. Whiting, J.G., de Lacy Costello, B.P., Adamatzky, A.: Slime mould logic gates based on
frequency changes of electrical potential oscillation. Biosystems 124, 21–25 (2014)
30. Adamatzky, A., Erokhin, V., Grube, M., Schubert, T., Schumann, A.: Physarum chip project:
growing computers from slime mould. Int. J. Unconv. Comput. 8(4), 319–323 (2012)
31. Pershin, Y.V., Di Ventra, M.: Memristive and memcapacitive models of Physarum learning.
In: Advances in Physarum Machines, pp. 413–422. Springer (2016)
32. Traversa, F.L., Pershin, Y.V., Di Ventra, M.: Memory models of adaptive behavior. IEEE
Trans. Neural Netw. Learn. Syst. 24(9), 1437–1448 (2013)
33. Teplov, V.A., Romanovsky, Y.M., Latushkin, O.A.: A continuum model of contraction waves
and protoplasm streaming in strands of Physarum polycephalum. Biosystems 24, 269–289
(1991)
34. Teplov, V.A., Romanovsky, Y.M., Pavlov, D.A., Alt, W.: Auto-oscillatory processes and feed-
back mechanisms in Physarum plasmodium motility. In: Alt, W., Deutsh, A., Dunn, G. (eds.)
Dynamics of Cell and Tissue Motion. Burkhauser, Basel, Switzerland (1997)
35. Forgacs, G.: On the possible role of cytoskeletal ﬁlamentous networks in intracellular signal-
ing: an approach based on percolation. J. Cell Sci. 108, 2131–2143 (1995)
36. Mayne, R., Adamatzky, A., Jones, J.: On the role of the plasmodial cytoskeleton in facilitating
intelligent behavior in slime mold Physarum polycephalum. Commun. Integr. Biol. 8(4),
e1059007 (2015)
37. Hameroff, S., Penrose, R.: Consciousness in the universe: a review of the Orch OR theory.
Phys. Life Rev. 11, 39–78 (2014)
38. Maly, I.V., Borisy, G.G.: Self-organization of a propulsive actin network as an evolutionary
process. Proc. Nat. Acad. Sci. U.S.A. 98(20), 11324–11329 (2001)
39. Furukawa, R., Kundra, R., Fechheimer, M.: Formation of liquid crystals from actin ﬁlaments.
Biochemistry 32, 12346–12352 (1993)
40. Steinmetz, M., Goldie, K., Aebi, U.: A correlative analysis of actin ﬁlament assembly, struc-
ture, and dynamics. J. Cell Biol. 138, 559–574 (1997)

68
2
Actin Filament Networks
41. Swezey, R., Somero, G.: Polymerization thermodynamics and structural stabilities of skeletal
muscle actins from vertebrates adapted to different temperatures and hydrostatic pressures.
Biochemistry 21, 4496–4503 (1982)
42. Evans, E.: New physical concepts for cell amoeboid motion. Biophys. J. 64, 1306–1322 (1993)
43. Fackler, O.T., Grosse, R.: Cell motility through plasma membrane blebbing. J. Cell Biol. 181,
879–884 (2008)
44. Pollard, T.D., Borisy, G.G.: Cellular motility driven by assembly and disassembly of actin
ﬁlaments. Cell 112, 453–465 (2003)
45. Furuhashi, K., Ishigami, M., Suzuki, M., Titani, K.: Dry stress-induced phosphorylation of
Physarum actin. Biochem. Biophys. Res. Commun. 242, 653–658 (1998)
46. Nakagakia, T., Yamada, H., Ueda, T.: Interaction between cell shape and contraction pattern
in the Physarum plasmodium. Biophys. Chem. 84, 195–204 (2000)
47. Carlier, M.F.: Actin: protein structure and ﬁlament dynamics. J. Biol. Chem. 266, 1–4 (1991)
48. Carlier, M.F., Pantaloni, D.: Control of actin dynamics in cell motility. J. Mol. Biol. 269(4),
459–467 (1997)
49. Egelman, E.H.: The structure of f-actin. J. Muscle Res. Cell Motil. 6(2), 129–151 (1985)
50. Etienne-Manneville, S.: Actin and microtubules in cell motility: which one is in control?
Trafﬁc 5(7), 470–477 (2004)
51. Hill, T.L.: Microﬁlament or microtubule assembly or disassembly against a force. Proc. Natl.
Acad. Sci. U.S.A. 78(9), 5613–5617 (1981)
52. Le Clainche, C., Carlier, M.: Regulation of actin assembly associated with protrusion and
adhesion in cell migration. Physiol. Rev. 88(2), 489–513 (2008)
53. McGough, A.: F-actin-binding proteins. Curr. Opin. Struct. Biol. 8(2), 166–176 (1998)
54. Mogilner, A., Oster, G.: Cell motility driven by actin polymerization. Biophys. J. 71(6),
3030–3045 (1996)
55. Mooseker, M.S., Tilney, L.G.: Organization of an actin ﬁlament-membrane complex. Filament
polarity and membrane attachment in the microvilli of intestinal epithelial cells. J. Cell Biol.
67(3), 725–743 (1975)
56. Pollard, T.D., Cooper, J.A.: Actin, a central player in cell shape and movement. Science
326(5957), 1208–1212 (2009)
57. Van Haastert, P.J., Devreotes, P.N.: Chemotaxis: signalling the way forward. Nat. Rev. Mol.
Cell Biol. 5, 626–634 (2004)
58. Holmes, K., Popp, D., Gebhard, W., Kabsch, W.: Atomic model of the actin ﬁlament. Nature
347, 44–49 (1990)
59. Hu, J., Matzavinos, A., Othmer, H.G.: A theoretical approach to actin ﬁlament dynamics. J.
Stat. Phys. 128(1–2), 111–138 (2007)
60. Hu, K., Ji, L., Applegate, K.T., Danuser, G., Waterman-Storer, C.M.: Differential transmission
of actin motion within focal adhesions. Science 315, 111–115 (2007)
61. Tobacman, L.S., Korn, E.D.: The kinetics of actin nucleation and polymerization. J. Biol.
Chem. 258, 3207–3214 (1983)
62. Wegner, A.: Head to tail polymerization of actin. J. Mol. Biol. 108, 139–150 (1976)
63. Wegner, A., Engel, J.: Kinetics of the cooperative association of actin to actin ﬁlaments.
Biophys. Chem. 3, 215–225 (1975)
64. Coppin, C., Leavis, P.: Quantitation of liquid-crystaline ordering in f-actin solutions. Bio-
physics 63, 794–807 (1992)
65. Galbraith, C.G., Yamada, K.M., Galbraith, J.A.: Polymerizing actin ﬁbers position integrins
primed to probe for adhesion sites. Science 315, 992–995 (2007)
66. Goldmann, W.H., Guttenberg, Z., Tang, J.X., Kroy, K., Isenberg, G., Ezzell, R.M.: Analysis
of the f-actin binding fragments of vinculin using stopped-ﬂow and dynamic lightscattering
measurements. Eur. J. Biochem. 254, 413–419 (1998)
67. Kabsch, W., Holmes, K.C.: The actin fold. FASEB J. 9, 167–174 (1995)
68. Korn, E.D., Carlier, M., Pantaloni, D.: Actin polymerization and ATP hydrolysis. Science
238, 638–644 (1987)

References
69
69. Coluccio, L.M., Tilney, L.G.: Under physiological conditions actin disassembles slowly from
the nonpreferred end of an actin ﬁlament. J. Cell Biol. 97, 1629–1634 (1983)
70. Svitkina, T.M., Borisy, G.G.: Arp2/3 complex and actin depolymerizing factor/coﬁlin in den-
dritic organization and treadmilling of actin ﬁlament array in lamellipodia. J. Cell Biol. 145,
1009–1026 (1999)
71. Carlier,M.:Roleofnucleotidehydrolysisinthedynamicsofactinﬁlamentsandmictrotubules.
Int. Rev. Cytol. 115, 139–170 (1989)
72. Carlier, M.F., Valentin, R.C., Combeau, C., Fievez, S., Pantoloni, D.: Actin polymerization:
regulation by divalent metal ion and nucleotide binding, ATP hydrolysis and binding of
myosin. In: Advances in Experimental Medicine and Biology, vol. 358, pp. 71–81 (1994)
73. Chhabra, E.S., Higgs, H.N.: The many faces of actin: matching assembly factors with cellular
structures. Nat. Cell Biol. 9, 1110–1121 (2007)
74. Choi, C.K., Vicente-Manzanares, M., Zareno, J., Whitmore, L.A., Mogilner, A., Horwitz,
A.R.: Actin and alpha-actinin orchestrate the assembly and maturation of nascent adhesions
in a myosin II motor-independent manner. Nat. Cell Biol 10, 1039–1050 (2008)
75. Meyer, R., Aebi, U.: Bundling of actin ﬁlaments by α-actinin depends on its molecular length.
J. Cell Biol. 110, 2013–2024 (1990)
76. Basaraba, R.J., Byerly, A.N., Stewart, G.C., Mosier, D.A., Fenwick, B.W., Chengappa, M.M.,
Laegreid, W.W.: Actin enhances the haemolytic activity of escherichia coli. Microbiology
144(7), 1845–1852 (1998)
77. Iwasa, J.H., Mullins, R.D.: Spatial and temporal relationships between actin-ﬁlament nucle-
ation, capping, and disassembly. Curr. Biol. 17, 395–406 (2007)
78. Balaban, N.Q., Schwarz, U.S., Riveline, D., Goichberg, P., Tzur, G., Sabanay, I., Mahalu, D.,
Safran, S., Bershadsky, A., Addadi, L.: Force and focal adhesion assembly: a close relationship
studied using elastic micropatterned substrates. Nat. Cell Biol. 3, 466–472 (2001)
79. Brown, C.M., Hebert, B., Kolin, D.L., Zareno, J., Whitmore, L., Horwitz, A.R., Wiseman,
P.W.: Probing the integrin-actin linkage using high-resolution protein velocity mapping. J.
Cell Sci. 119, 5204–5214 (2006)
80. Calderwood, D.A., Shattil, S.J., Ginsberg, M.H.: Integrins and actin ﬁlaments: reciprocal
regulation of cell adhesion and signaling. J. Biol. Chem. 275, 22607–22610 (2000)
81. Guo, W.H., Wang, Y.L.: Retrograde ﬂuxes of focal adhesion proteins in response to cell
migration and mechanical signals. Mol. Biol. Cell 18, 4519–4527 (2007)
82. Condeelis, J.: Life at the leading edge: the formation of cell protrusions. Annu. Rev. Cell Biol.
9, 411–444 (1993)
83. Mattila, P.K., Lappalainen, P.: Filopodia: molecular architecture and cellular functions. Nat.
Rev. Mol. Cell Biol. 9, 446–454 (2008)
84. Wachsstock, D.H., Schwarz, W.H., Pollard, T.D.: Cross-linker dynamics determine the
mechanical properties of actin gels. Biophys. J. 66, 801–809 (1994)
85. Elson, E.L.: Cellular mechanics as an indicator of cytoskeletal structure and function. Annu.
Rev. Biophys. Chem. 17, 397–430 (1988)
86. Isambert, H., Venier, P., Maggs, A.C., Fattoum, A., Kassab, R., Pantaloni, D., Carlier, M.F.:
Flexibility of actin ﬁlaments derived from thermal ﬂuctuations. Effect of bound nucleotide,
phalloidin, and muscle regulatory proteins. J. Biol. Chem. 270(11), 437–44 (1995)
87. Pollard, T.D.: Regulation of actin ﬁlament assembly by Arp2/3 complex and formins. Annu.
Rev. Biophys. Biomol. Struct. 36, 451–477 (2007)
88. Yoshigi, M., Hoffman, L.M., Jensen, C.C., Yost, H.J., Beckerle, M.C.: Mechanical force mobi-
lizes zyxin from focal adhesions to actin ﬁlaments and regulates cytoskeletal reinforcement.
J. Cell Biol. 171, 209–215 (2005)
89. Vicente-Manzanares, M., Zareno, J., Whitmore, L., Choi, C.K., Horwitz, A.F.: Regulation of
protrusion, adhesion dynamics, and polarity by myosins IIA and IIB in migrating cells. J. Cell
Biol. 176, 573–580 (2007)
90. Kas, J., Strey, H., Tang, J.X., Finger, D., Ezzell, R., Sackmann, E., Janmey, P.A.: F-actin, a
model polymer for semiﬂexible chains in dilute, semidilute and liquid crystalline solutions.
Biophys. J. 70, 609–625 (1995)

70
2
Actin Filament Networks
91. Oosawa, F.: The ﬂexibility of f-actin. Biophys. Chem. 11, 443–446 (1980)
92. Asakura, S., Taniguchi, M., Oosawa, F.: Mechano-chemical behavior of f-actin. J. Mol. Biol.
7, 55–69 (1963)
93. Hotulainen, P., Lappalainen, P.: Stress ﬁbers are generated by two distinct actin assembly
mechanisms in motile cells. J. Cell Biol. 173, 383–394 (2006)
94. Janmey, P.A., Hvidt, S., Kas, J., Lerche, D., Maggs, A., Sackmann, E., Schliwa, M., Stossel,
T.P.: The mechanical properties of actin gels. Elastic modulus and ﬁlament motions. J. Biol.
Chem. 269(32), 503–13 (1994)
95. Ridley, A.J., Schwartz, M.A., Burridge, K., Firtel, R.A., Ginsberg, M.H., Borisy, G., Parsons,
J.T., Horwitz, A.R.: Cell migration: integrating signals from front to back. Science 302, 1704–
1709 (2003)
96. ben Avraham, D., Tirion, M.: Dynamic and elastic properties of f-actin: a normal-modes
analysis. Biophys. J. 68(4), 1231–1245 (1995)
97. Higuchi, H., Yanagida, T., Goldman, Y.E.: Compliance of thin ﬁlaments in skinned ﬁbers of
rabbit skeletal muscle. Biophys. J. 69, 1000–1010 (1995)
98. Jen, C., McIntire, L., Bryan, J.: The viscoelastic properties of actin solutions. Arch. Biochem.
Biophys. 216, 126–132 (1982)
99. Xu, J.Y., Schwarz, W.H., Kas, J.A., Stossel, T.P., Janmey, P.A., Pollard, T.D.: Mechanical
properties of actin ﬁlament networks depend on preparation, polymerization conditions, and
storage of actin monomers. Biophys. J. 74, 2731–2740 (1998)
100. Gimona, M., Mital, R.: The single CH domain of calponin is neither sufﬁcient nor necessary
for f-actin binding. J. Cell Sci. 111(Pt 13), 1813–21 (1998)
101. Moore, P.B., Huxley, H.E., DeRosier, D.J.: Three-dimensional reconstruction of f-actin, thin
ﬁlaments and decorated thin ﬁlaments. J. Mol. Biol. 50(2), 279–295 (1970)
102. Schumann, A., Pancerz, K.: p-adic computation with Physarum. In: Adamatzky, A. (ed.)
Advances in Physarum Machines: Sensing and Computing with Slime Mould. Emergence,
Complexity and Computation, vol. 21, pp. 619–649. Springer International Publishing (2016)
103. Zadeh, L.: Fuzzy sets. Inform. Control 8, 338–353 (1965)
104. Kornai, A.: Euclidean automata. In: Waser, M. (ed.) Proceedings of the AAAI Spring Sympo-
sium Implementing Selves with Safe Motivational Systems and Self-Improvement, pp. 25–30.
AAAI Press (2014)
105. Ghosh, D., Chakraborty, D.: Analytical fuzzy plane geometry III. Fuzzy Sets Syst. 283, 83–
107 (2016)
106. Schumann, A.: Conventional and unconventional reversible logic gates on Physarum poly-
cephalum. Int. J. Parallel, Emerg. Distrib. Syst. 32(2), 218–231 (2017). https://doi.org/10.
1080/17445760.2015.1068775
107. Toffoli, T.: Reversible computing. Tech. memo mit/lcs/tm-151. MIT (1980)
108. Jones, J.D.: Towards lateral inhibition and collective perception in unorganised non-neural
systems. In: Pancerz, K., Zaitseva, E. (eds.) Computational Intelligence, Medicine and Biol-
ogy: Selected Links. Springer (2015)
109. Schumann, A., Wole´nski, J.: Two squares of oppositions and their applications in pairwise
comparisons analysis. Fundam. Inform. 144(3–4), 241–254 (2016)
110. Dimonte, A., Berzina, T., Pavesi, M., Erokhin, V.: Hysteresis loop and cross-talk of organic
memristive devices. Microelectron. J. 45(11), 1396–1400 (2014). https://doi.org/10.1016/j.
mejo.2014.09.009
111. Erokhin, V.: On the learning of stochastic networks of organic memristive devices. Int. J.
Unconv. Comput. 9(3–4), 303–310 (2013)
112. Erokhin, V., Howard, G.D., Adamatzky, A.: Organic memristor devices for logic elements with
memory. Int. J. Bifurc. Chaos 22(11) (2012). https://doi.org/10.1142/S0218127412502835
113. Pershin, Y.V., La Fontaine, S., Di Ventra, M.: Memristive model of amoeba learning. Phys.
Rev. E 80(2), 021926
114. Saigusa, T., Tero, A., Nakagak, T., Kuramoto, Y.: Amoebae anticipate periodic events. Phys.
Rev. Lett. 100(1), 018101 (2008)

References
71
115. Shirakawa, T., Gunji, Y.P., Miyake, Y.: An associative learning experiment using the plas-
modium of Physarum polycephalum. Nano Commun. Netw. 2, 99–105 (2011)
116. Schumann, A.: Towards context-based concurrent formal theories. Parallel Process. Lett. 25,
1540008 (2015)
117. Taylor, B., Adamatzky, A., Greenman, J., Ieropoulos, I.: Physarum polycephalum: towards a
biological controller. Biosystems 127, 42–46 (2015)
118. Whiting, J.G.H., de Lacy Costello, B., Adamatzky, A.: Sensory fusion in physarum poly-
cephalum and implementing multi-sensory functional computation. Biosystems 119, 45–52
(2014)
119. Savtchenko, L.P., Poo, M.M., Rusakov, D.A.: Electrodiffusion phenomena in neuroscience:
a neglected companion. Nat. Rev. Neurosci. 18(10), 598–612 (2017)
120. Siccardi, S., Adamatzky, A.: Logical gates implemented by solitons at the junctions between
one-dimensional lattices. Int. J. Bifurc. Chaos 26(6), 1650,107 (2016)

Chapter 3
Unconventional Computers Designed
on Swarm Behaviours
From the previous chapter we know that the opportunity of implementing decidable
arithmetic functions on the amoeboid motions means that we can design an uncon-
ventional computer using amoeboid organisms. In this chapter, I am going to propose
a kind of this computer designed on Physarum polycephalum. Designing computers
on swarms (such as plasmodia or ant nests) would mean that behaviourism is valid
indeed, that is, we can control the swarm behaviours by placing attractants and repel-
lents. Nevertheless, this claim is only partly true, because we can implement unde-
cidable arithmetic functions also. Hence, there are clear lines for behaviourism—we
can control an animal behaviour only partly. In this chapter, I try to explain why.
The matter is that chemical reactions responsible for sensing and motoring of swarm
behaviours differ a lot from standard autocatalytic reactions, such as the Belousov-
Zhabotinsky reaction. They assume a high variety of reactions to the same stimuli.
See [1–11].
3.1
Reaction-Diffusion Computing
3.1.1
Prehistory of Unconventional Computing
The idea that each natural phenomenon is a computer came from Kabbalah, the
esoteric teaching of Judaism.
In Kabbalah the illusiveness of the world is proved by that the world does not exist
in itself. The world is a combination of the characters of sacred (Hebrew) language,
in which the Holy Scripture is written. According to the Sefer Yez.irah (The Book of
Creation), the best known Kabbalistic source, the entire Universe was created from
© Springer International Publishing AG, part of Springer Nature 2019
A. Schumann, Behaviourism in Studying Swarms: Logical Models of Sensing
and Motoring, Emergence, Complexity and Computation 33,
https://doi.org/10.1007/978-3-319-91542-5_3
73

74
3
Unconventional Computers Designed on Swarm Behaviours
the set of 22 Hebrew letters, each of which is also a number. God’s holy words have
created all:
In two and thirty most occult and wonderful paths of wisdom did JAH the Lord of Hosts
engrave his name: God of the armies of Israel, ever-living God, merciful and gracious,
sublime, dwelling on high, who inhabiteth eternity. He created this universe by the three
Sepharim, Number, Writing, and Speech. Ten are the numbers, as are the Sephiroth, and
twenty-two the letters, these are the Foundation of all things. Of these letters, three are
mothers, seven are double, and twelve are simple (The Book of Creation, translated by
W. W. Wescott).
Many Kabbalists had attempts to recreate some samples of this Divine speech.
They supposed that the Divine words may be generated by a purely mechanical
process and have no meaning in human language. In fact, as we will see, the idea of
automaton, a self-operating machine, ﬂashed upon Kabbalists for the ﬁrst time (for
more details see [12, 13]).
As an example of Kabbalistic automata let us consider one of the automata simu-
lating the Divine speech that has been proposed by Eleazar ben Judah ben Kalonymus
of Worms (Rokeah. ), the Talmudist and Kabbalist, born probably at Mayence about
1176 and died at Worms in 1238. He was a descendant of the great Kalonymus family
of Mayence.
In the following example of Kabbalistic automaton, we can see, how the letters
of word ‘Talmud’ emerge from ’alef (the ﬁrst letter of the Hebrew alphabet):
Example.
Halting pattern: {t, l, m, w, d} (Talmud)
Input string: ’a l f
Generation1: lf md ’a
Generation2: md ’a m lt lf
Generation3: m lt lf m md w m d ’a
All ﬁve letters of the word ‘Talmud’ appear after three generations. The
letter ’alef was ﬁrst spelt out horizontally and then branches into a tree, see [1]:
The idea of Kabbalistic automata in which operations over characters of the
Hebrew alphabet should simulate physical and biological processes, suggested Leib-
niz an idea to work at a characteristica universalis or ‘universal characteristic’, built

3.1 Reaction-Diffusion Computing
75
on an alphabet of human thought in which each fundamental concept would be rep-
resented by a unique character:
It is obvious that if we could ﬁnd characters or signs suited for expressing all our thoughts
as clearly and as exactly as arithmetic expresses numbers or geometry expresses lines, we
could do in all matters insofar as they are subject to reasoning all that we can do in arithmetic
and geometry. For all investigations which depend on reasoning would be carried out by
transposing these characters and by a species of calculus (Leibniz, Preface to the General
Science, 1677).
In universal characteristic, complex thoughts would be represented by combin-
ing characters for atomic thoughts. Characters of the Hebrew alphabet, which in
Kabbalists’ intention are atoms of any information, were prototypes of characters
in Leibniz’ meaning. For Leibniz such atoms should be presented by the system of
coding of all elementary concepts by using prime numbers due to the uniqueness of
prime factorization (also this idea was used in Gödel numbering).
Universal characteristic should have become an automaton simulating all physical
processes, an automaton who knows the “Answer to the Ultimate Question of Life, the
Universe, and Everything”. This automaton should have become a universal checker
which can check and verify any thought mechanically:
The only way to rectify our reasonings is to make them as tangible as those of the Math-
ematicians, so that we can ﬁnd our error at a glance, and when there are disputes among
persons, we can simply say: Let us calculate [calculemus], without further ado, to see who
is right (Leibniz, The Art of Discovery, 1685).
Due to such possibilities, universal characteristic may be regarded as sacral lan-
guage, i.e. a unique language in which it is possible to think unmistakably, language
that objectively reﬂects any physical and biological process, language which already
coincides with reality. It is obvious that sacred language in the Kabbalistic meaning
was a prototype of universal language in the Leibnizian meaning. The latter should
have become a universal language for communications of all people:
And although learnt men have long since thought of some kind of language or universal
characteristic by which all concepts and things can be put into beautiful order, and with
whose help different nations might communicate their thoughts and each read in his own
language what another has written in his, yet no one has attempted a language or characteristic
which includes at once both the arts of discovery and judgement, that is, one whose signs and
characters serve the same purpose that arithmetical signs serve for numbers, and algebraic
signs for quantities taken abstractly. Yet it does seem that since God has bestowed these two
sciences on mankind, he has sought to notify us that a far greater secret lies hidden in our
understanding, of which these are but the shadows [14].
Leibniz proposed some examples of how it is possible to design universal char-
acteristic. In these examples Leibniz presented ‘character’ as a certain number,
assigned to a subject or a predicate as eigenvalue in the way that a derivated num-
ber corresponds to a combination (superposition) of numbers of initial terms. This
combination can be presented, for example, by multiplication of numbers which
are ‘characters’ of initial terms (atoms of universal characteristic). For instance, the
expression ‘rational animal’, consisting of two terms: ‘rational’ with character a, and

76
3
Unconventional Computers Designed on Swarm Behaviours
‘animal’ with character r, obtains a new character ar, i.e. ‘man’ (‘man’ = ‘rational
animal’). In particular, if a = 3, r = 2, then character of ‘man’ = 6.
In categorical propositions, relations between characters are deﬁned by means of
the following rules:
(1) The universal afﬁrmative proposition is true if and only if the character of subject
is divided by the character of predicate without remainder of division, e.g. in
the proposition ‘man is a rational animal’ we have: ‘man’ (S) / ‘animal’ (P) =
ar/r = a.
(2) The particular afﬁrmative proposition is true if and only if the character of
subject is divided by the character of predicate without remainder of division or
the character of predicate is divided by the character of subject without remainder
of division.
(3) The universal negative proposition is true if and only if the character of subject
cannot be divided by the character of predicate without remainder of division
and also the character of predicate cannot be divided by the character of subject
without remainder of division.
(4) The particular negative proposition is true if and only if the character of subject
cannot be divided by the character of predicate without remainder of division.
In case categorical propositions do not satisfy the above-mentioned rules, they
are considered false. The favour of similar numerical interpretation of atomic propo-
sitions consists in that by means of simple operating over numbers it is possible to
prove all syllogistic laws. At the same time, the evident assumption is as follows:
characters H = ABC and J = BC for combinations of characters of simpler terms
A, B, C are divided by the same number of term X without remainder of division
if X < H and X < J. For example, let the number ‘man’ be H and the number of
‘animal’ be A in the proposition ‘man is animal’. Then fraction H/A is reduced to
prime numbers r/v such that r/v is an integer, i.e. v = 1. From this assumption it
follows
1. ‘Every H is A’ iff vH = rA and v = 1.
2. ‘Some A are H’ (or ‘Some H are A’) iff rA = vH and (r = 1 or v = 1).
3. ‘No H is A’ (or ‘No A is H’) iff vH = rA and (r > 1 and v > 1).
4. ‘Some A are not H’ iff rA = vH and r > 1.
The given interpretation satisﬁes the square of opposition. Indeed, in (2) and (3)
(resp. in (1) and (4)) the universal negative proposition and the particular afﬁrmative
proposition (resp. the universal afﬁrmative proposition and the particular negative
proposition) contradict each other (if one of them is true, another is false and vice
versa). Further, from (1) we can infer (2) (resp. from (3) it follows that (4)). And so
on.
Leibniz’ intention to construct universal characteristic was extremely grandiose.
In his days people trusted in unlimited powers of reason. It seemed to them, a bit
later and the whole world will be completely investigated.

3.1 Reaction-Diffusion Computing
77
An automaton (abstract machine) which would simulate any physical and biolog-
ical process, can be said to be a Kabbalistic-Leibnizian automaton.
The main assumptions of Kabbalistic-Leibnizian automata are as follows:
• There is only information. Any chemical, physical or biological process is an
unconventional computer. Thus, any chemical, physical or biological process can
be simulated by an abstract machine.
• Any chemical, physical or biological process can be considered as transition
in massive-parallel proofs. Therefore any chemical, physical or biological phe-
nomenon may be completely reduced to logical relations, e.g. to logical inference
rules.
• Anytheoreticaltermsofchemistry,physics,biologycanbeeliminatedifwereplace
them by logical inference rules.
3.1.2
Unconventional Computing as Novel Paradigm
in Natural Sciences
In natural sciences there are many theoretical terms which as it seems to us allow
to understand reality better, but actually they replace true reality by images made
up. For example, in understanding the Belousov-Zhabotinsky reaction the following
theoretical terms of chemistry are used: matter, chemical element, chemical reaction,
autowave, valence etc. In understanding the dynamics of plasmodium of Physarum
polycephalum the following theoretical terms of biology are assumed: contiguous
living system, cell, protoplasm, physiology, morphology etc.
If we share positions of unconventional computing and agree that any natural
process is a computation and nature as a whole is a computer, theoretical terms of
physics, chemistry and biology will lose a sense. We can eliminate them from the
language of scientiﬁc theories.
Theoretical terms cannot be veriﬁed, i.e. they are not reduced to observation terms.
However, within the limits of unconventional computing we can substitute logical
terms simulating the process of computation for theoretical terms. Logical terms do
not require already veriﬁcation. They form only the structure and algorithmization
of observation terms.
Let us suppose that we created the universal language LU of Kabbalistic-
Leibnizian automata, i.e. the universal logical language of unconventional computing
that allows us to consider any natural process as computation process. Then the lan-
guage LU, ﬁrst, eliminates all theoretical terms of natural sciences, replacing them
by logical terms of massively parallel proof theory and, second, instead of huge num-
ber of scientiﬁc theories of physics, chemistry, biology we obtain an opportunity to
have the universal logical theory that simulates the Universe.
Let us show, how we could eliminate theoretical terms in the language LU. Take
n theoretical terms: T1, T2, . . . , Tn, linked to observation terms by correspondence
rules of an appropriate theory and m observation terms, i.e. their references are

78
3
Unconventional Computers Designed on Swarm Behaviours
found out immediately: O1, O2, . . . , Om. The complete theoretical statement is a
union consisting of T- and O-terms:
⟨T1, T2, . . . , Tn; O1, O2, . . . , Om⟩.
This formula can be replaced by another, identical to the ﬁrst in the way that all
theoretical terms are replaced by logical terms U1,U2, . . . ,Uk which describe the
process of computation of an appropriate automata with features ⟨O1, O2, . . . , Om⟩:
⟨U1,U2, . . . ,Uk; O1, O2, . . . , Om⟩.
In such a statement, empirical values of theoretical terms are positioned, i.e. they
obtain references. These references are expressed by observation terms. Such a rep-
resentation of theoretical expressions has a number of advantages, e.g. sophisticated
theoretical terms of natural sciences could ﬁnd the classes of references. For example,
it is obvious that the statements describing Earth’s rotation have the set {the Earth} as
a class of references. However, it is not clearly, which set of physical bodies realises
the statements describing the concept ‘electron’.
In a proposition of language LU the sophisticated expression setting theoretical
terms is transformed into an expression in which there are only observation terms
as well as terms of logic and mathematics, therefore the concept ‘electron’ may be
eliminated from theory expressions.
In the simulation of Belousov-Zhabotinsky reaction as observation terms the fol-
lowing states of an appropriate cellular automaton were used:
{Ce3+, HBrO2, BrO−
3 , H +, Ce4+, H2O, BrCH (COOH)2, Br−, HCOOH, CO2,
HOBr, Br2, CH2(COOH)2}.
It is enough for us to simulate this reaction. The theoretical terms needed for
understanding the Belousov-Zhabotinsky reaction were replaced by inference rules
of Figs.3.4 and 3.5 or by inference rules (11.1)–(11.7).
This example shows that for designing the language LU it is necessary to solve
Leibniz’ problem to ﬁnd out characters (atoms of any information), i.e. to ﬁnd out
the minimum set of observation terms, sufﬁcient for an elimination of any theoret-
ical terms. This problem is similar to the problem of looking for Higgs boson. Its
solution will allow to create the universal language of natural sciences, to construct
a supercomputer “Earth” to come up with the Answer to The Ultimate Question of
Life, the Universe, and Everything.
3.1.3
Reaction-Diffusion Automata
After an attempt to reconstruct actin ﬁlament networks theoretically in the previous
chapter, we can assume that any animal behaviour (in any case the behaviour of

3.1 Reaction-Diffusion Computing
79
unicellular organisms) can be explained by chemical reactions. There is an approach
to design an unconventional computer on the basis of chemical reactions. This
approach is called reaction-diffusion computing. Reaction-diffusion computers [7,
15–19] are spatially extended chemical systems, which process information using
interacting growing patterns, of excitable and diffusive waves. In reaction-diffusion
processors, both the data and the results of the computation are encoded as con-
centration proﬁles of the reagents. The computation is performed via the spreading
and interaction of wave fronts. As speciﬁed in [17], an implementation of reaction-
diffusion computers is based on three principles of the physics of computation [20].
The ﬁrst principle states that the physical action measures an amount of information,
i.e. a dynamics of the reaction-diffusion system is interpreted as computation. The
second principle is that physical information travels only a ﬁnite distance, i.e. the
natural computation is always local. The third principle says that the nature is gov-
erned by propagating patterns and traveling waves, i.e. an appropriate computation
is spatial.
For the ﬁrst time, Alan Turing provided mathematical models of pattern for-
mation in reaction-diffusion media. In his famous paper [21] titled The Chemical
Basis of Morphogenesis design patterns were considered as a conceptual frame-
work for transferring knowledge from biology to computing. The importance of the
idea of reaction-diffusion computing is that reaction-diffusion processes are observed
throughout all the nature in all spatiotemporal pattern formation and self-organization
far from equilibrium coupled with diffusion.
After Turing, the interest in controlling self-organized systems and in building
up computational models based on them in order to achieve their speciﬁc desired
behaviour has been increasing. The control of self-organization in reaction-diffusion
frames is an ambitious goal allowing to simulate all massive-parallel natural pro-
cesses: chemical reactions, morphogenesis, population dynamics, biological, eco-
nomic and social evolution and other phenomena that produce a complex network
of interactions among the component species.
In the initial meaning reaction-diffusion systems involve constituents locally
transformed into each other by chemical reactions and transported in space by dif-
fusion. The simplest kind of chemical wave emerges when reactants are converted
into products as the front propagates through the reaction mixture. Usually, chemi-
cal reaction-diffusion systems eventually evolve to the state of chemical equilibrium,
but there is a possibility of thermodynamic equilibrium like pattern formation in the
Belousov-Zhabotinsky reaction. In the latter case, the equilibrium of self-organized
patterns occurs due to an interaction of autocatalytic compensated by reaction step
blocking the unbounded growth, see [22].
Wave is a key notion for analyzing reaction-diffusion processes. It is a form of
propagating the spatial coupling of elements from the stable or the most stable state
toward the unstable or the least stable one. Due to waves of reagent diffusions there
is a chemical reaction. Furthermore, a wave can cause composite patterns in a regime
of periodic or chaotic oscillations like that we observe in the Belousov-Zhabotinsky
reaction. If a wave causes pattering and regulation of timing independently of input
conditions and the letter are determined by the system itself, then this is called

80
3
Unconventional Computers Designed on Swarm Behaviours
auto-wave [23, 24]. Its typical instance is described in the Belousov-Zhabotinsky
reaction. Auto-waves may be detected in any self-organized systems, some examples
of auto-waves are below. As a result, we can claim that the reaction-diffusion nature
is observed not just within chemical reactions, but also in different pattering and
interactions like as follows:
• Auto-waves of morphogenesis consisting in the processes that generate tissue orga-
nization and shape and are usually the downstream response to the timing and
patterning.
• Auto-waves in ecological systems that change the network of interacting popula-
tions.
• Auto-waves of epidemics, they are observed in the rapid increase of the size of
infected population due to the interaction between infected and susceptible indi-
viduals.
• Auto-waves of opinion dynamics, i.e. changes in opinions caused by interaction of
people.
• Auto-waves of aggregated individual plasmodium of the cellular slime mold
Physarum polycephalum to form a multicellular migrating slug, which moves
toward a region suitable for culmination.
As we see, thanks to above-mentioned examples, the majority of physical, chem-
ical, biological and sociological processes can be described in terms of auto-waves,
i.e. propagating fronts of one nature or another.
The dynamics of complex reaction-diffusion frames can be described in terms of
activator and inhibitor. The activator, A, is a short-range autocatalytic substance, and
the inhibitor, I, is its long-range antagonist. A autocatalytically promotes its own syn-
thesis. I inhibits synthesis of A, and I can diffuse faster than A. The pattern of peaks of
A is dependent upon the reaction-diffusion frame. The dynamics of a self-organizing
system is typically non-linear, because of circular or feedback relations between the
components [25]. In other words, in complex reaction-diffusion systems there are
circular cause-and-effect relations: each component affects the other components,
but these components in turn affect the ﬁrst component. This feedback can have two
basic values: positive if the activator diffuses faster or negative if the inhibitor diffuses
faster. In the positive feedback, the recurrent inﬂuence reinforces the initial change.
In the negative feedback, the reaction is opposite to the initial action, so a change is
counteracted. The aim of negative feedback is to stabilize the system, by returning to
its original states. On the other hand, the positive feedback makes changes growing
in an explosive manner. It leads to an accelerated development, which ends when all
components have been absorbed into the new conﬁguration, leaving the system in a
stable state.
Diffusion waves of activator and inhibitor interact according to reaction rules.
Solutions of those rules are represented by multisets of waves: this accounts for the
associativity and commutativity of parallel composition, that is the implicit stirring
mechanism. Setting diffusion waves by rules allows us to deﬁne reaction-diffusion
processes as a kind of computing. This computing is fundamentally similar to parallel

3.1 Reaction-Diffusion Computing
81
computing in that it takes advantage of the many different waves to try many different
possibilities of diffusion at once.
Setting up reaction-diffusion computing is a way of simulating physics by a uni-
versal computer (Kabbalistic-Leibnizian automaton). This aim to build up a “life
computer” is the most ambitious task attempted in unconventional computing, e.g.
see for more details [26]. Its difﬁculties consist in that in conventional approach to
computing a control is centralized. On the other hand, in self-organizing systems
a control of organization is typically distributed over the whole system. Due to a
centralized control, software is written for serial computation and a problem is bro-
ken into a discrete series of executed instructions so that only one instruction may
execute at any moment in time. Due to a decentralized, distributed control in parallel
computing, a computational problem is solved by the simultaneous use of multiple
compute resources and a problem is broken into discrete parts that can be solved
concurrently. We can add that reaction-diffusion computing is not just parallel, but
massive-parallel. This means that parts a problem is broken into can be indiscrete
and inﬁnite many.
The sequential model of computation called von Neumann paradigm is unapplied,
broken in the reaction-diffusion computing. The reason is that the latter computing
may be presented as a massive-parallel locally-connected mathematical machine
with circular and cyclic processes. These machines cannot have a single centralized
source exercising a precise control over vast numbers of heterogeneous devices. The
interactive-computing paradigm is able to describe concurrent (parallel) computa-
tions whose conﬁguration may change during the computation and it is decentralized
as well. Within the framework of this paradigm, one proposed a lot of so-called con-
currency calculi also called process algebras. They are typically presented using
systems of equations. These formalisms for concurrent systems are formal in the
sense that they represent systems by expressions and then reason about systems by
manipulating the corresponding expressions [27].
One of the unconventional, nature inspired models similar to reaction-diffusion
computing is chemical machine in that molecules are viewed as computational pro-
cesses supplemented with a minimal reaction kinetics. Berry and Boudol ﬁrst built
up a chemical abstract machine [28] as an example of how a chemical paradigm of
the interactions between molecules can be utilized in concurrent computations (in
algebraic process calculi).
There is a particular feature of reaction-diffusion chemical computers: the media
are ‘fully conductive’ for chemical or excitation waves. Every point of a medium
can be involved in the propagation of chemical waves and reactions between diffus-
ing chemical species. Once a reaction is initiated in a point, it spreads all over the
computing space by target and spiral waves. Such phenomena of wave-propagation,
analogous to one-to-all broadcasting in massive-parallel systems, are employed to
solve problems ranging from the Voronoi diagram construction to robot navigation
[17, 18].
Every chemical non-stirred reaction-diffusion medium (micro-volume) can be
representedasaﬁnitestatemachine,oranautomaton.Itsstatescorrespondtoreagents
which prevails in their concentration at any discrete time. For example, if there are

82
3
Unconventional Computers Designed on Swarm Behaviours
two reagents, α and β, in a medium, then each micro-volume x can be represented
by a ﬁnite automaton ax such that if at the time step t the concentration of α in x
exceeds the concentration of β in x, then ax takes the state α, otherwise the stat
β. Cellular automata [29–31] are best computational structures to represent space-
time dynamics of spatially extended non-linear systems, including reaction-diffusion
media. This is because a cellular automaton is a regular network, or a lattice, array,
of locally connected ﬁnite automata updating their states in parallel [32]. Recall that
a cellular automaton is a 4-tuple A = ⟨Zd, S, u, f ⟩, where (1) d ∈N is a number
of dimensions and the members of Zd are cells, (2) S is a ﬁnite set of elements
called the states of an automaton A , the members of Zd take their values in S, (3)
u ⊂Zd \ {0}d is a ﬁnite ordered set of n elements, u(x) is said to be a neighbourhood
for the cell x, (4) f : Sn+1 →S that is f is the local transition function (or local rule).
An automaton is regarded on the endless d-dimensional space of integers, i.e. on
Zd. Discrete time is introduced for t = 0, 1, 2, . . . So, the sell x at time t is denoted
by xt. Each automaton calculates its next state depending on states of its closest
neighbours.
To represent a chemical reaction-diffusion system in a cellular automaton [15]
with local transition function f and cell-x neighbourhood u(x) = ⟨y1, . . . , yn⟩, one
needs to select a substrate state, let us call it s, such that
f (s, . . . s) = s,
a set of reactants Q = {r1, . . . , rm}, and then to determine diffusion and reaction
equations. In the most primitive form, the diffusion can be speciﬁed as follows:
xt+1 =
⎧
⎨
⎩
ri if xt = s and Dt
x = {s, ri}
s if xt ̸= s and |Dt
x/{s}| > 1
xt othetwise,
where Dt
x = {yt ∈Q : yt ∈u(x)} is a set of states observed in a neighbourhood of x
at time t.
Reactions between reactants of Q can be represented in cell-state transition rules
by many different ways, the more generalized totalistic coding is suggested in
[18, 19]: a cell’s update depends on the number of different cell-states in its neigh-
bourhood irrespective of the cell-states’ positions. Thus, if there are p = m + 1 com-
ponents in the chemical system then the update (transition) rule can be written as
follows:
xt+1 = f (δp(x)t, δp−1(x)t, . . . , δ0(x)t),
where δa(x)t is the number of cell x’s neighbours with the cell-state a ∈{s} ∪Q at
time step t.

3.1 Reaction-Diffusion Computing
83
3.1.4
Approximation of Voronoi Diagram and Calculations
on Reaction-Diffusion Media
Let us consider the most famous task—the approximation of Voronoi diagram in
reaction-diffusion systems, see an overview in [17]. Let P be a nonempty ﬁnite set
of planar points and |P| = n. For points p = (p1, p2) and x = (x1, x2) let d(p, x) =

(p1 −x1)2 + (p2 −x2)2 denote their Euclidean distance. A planar Voronoi diagram
of the set P is a partition of the plane into regions, such that for any element of P, a
region corresponding to a unique point p contains all those points of the plane which
are closer to p in respect to the distance d than to any other node of P. A unique
region
vor(p) =

m∈P,m̸=p
{z ∈R2 : d(p, z) < d(m, z)}
assigned to the point p is called a Voronoi cell of the point p.
Voronoi cells of a planar set represent the natural or geographical neighbourhood
of the set’s elements. Therefore, the computation of a Voronoi diagram based on the
spreading of some ‘substance’ from the data points is usually the ﬁrst approach of
those trying to design massively parallel algorithms, see an overview of experimen-
tal techniques in [33]. Let us consider a simplistic implementation of the Voronoi
diagram construction in a reaction-diffusion medium with one diffusing reagent α
and a substrate s.
The reagent α diffuses from sites introduced to correspond to the elements of
a given planar set P. When two diffusing wave fronts meet a super-threshold con-
centration of reagents prevents waves from spreading further. A cellular-automaton
model represents this as follows.
Every cell has two possible states: s (resting state, or a substrate) and α (reagent).
If the cell is in state α it remains in this state forever. If the cell is in state s and
between one and three of its neighbours are in state α, then the cell takes the state α;
otherwise, the cell remains in the state s (this reﬂects the ‘super-threshold inhibition’,
or a ‘self-inhibition’ idea). A cell state transition rule is as follows:
xt+1 =

α, if xt = s and 1 ≤δ(x)t ≤a
xt, otherwise
(3.1)
where δ(x)t = |{y ∈u(x) : yt = α}|, and a = 3 for a rectangular, 8-cell neighbour-
hood, and a = 2 for a hexagonal, 6-cell neighbourhood, cellular automaton.
Let X be the 2-dimensional Euclidean space R2. Let T denote the discrete time
and Q be a ﬁnite set of states of the following three sorts: substrate s, activator a,
and inhibitor i. At each point on the metric space X , we allocate an inﬁnite sequence
of state transitions. Let σ denote a function from X to (Q × T)ω, i.e., for each point

84
3
Unconventional Computers Designed on Swarm Behaviours
x ∈X , σx is a nonempty inﬁnite sequence of pairs from Q × T. Further, we will use
some basic notions of stream calculus such as co-induction and bisimulation, for
more details see [34–37].
The function σx is a kind of stream and will be said to be a trajectory of x. The
set of all trajectories is denoted by Tr(X , Q, T).
For a trajectory σx, we call σx(0) the initial value of σx. We deﬁne the derivative
of a trajectory σx, for all n ≥0, by σ ′
x(n) = σx(n + 1). For any n ≥0, σx(n) is called
the n-th element of σx. It can also be expressed in terms of higher-order trajectory
derivatives, deﬁned, for all k ≥0, by σ (0)
x
= σx; σ (k+1)
x
= (σ (k)
x )′. In this case the
n-th element of a trajectory σx is given by σx(n) = σ (n)
x (0). Also, the trajectory is
understood as an inﬁnite sequence of derivatives. It will be denoted by an inﬁnite
sequence of values or by an inﬁnite tuple: σx = σx(0) :: σx(1) :: σx(2) :: . . . :: σx(n −
1) :: σ (n)
x , σx = ⟨σx(0), σx(1), σx(2), . . . ⟩.
A constant trajectory ⟨m, m, . . . ⟩is denoted by [m].
A bisimulation on (Q × T)ω is a relation R ⊆(Q × T)ω × (Q × T)ω such that,
for all σx and τy in (Q × T)ω, if ⟨σx, τy⟩∈R then (i) σx(0) = τy(0) (this means that
they have the same initial value) and (ii) ⟨σ ′
x, τ ′
y⟩∈R (this means that they have the
same differential equation).
If there exists a bisimulation relation R with ⟨σx, τy⟩∈R then we write
σx ∼τy and say that σx and τy are bisimilar. In other words, the bisimilarity rela-
tion ∼is the union of all bisimulations: ∼:= {R ⊆(Q × T)ω × (Q × T)ω : R is
a bisimulation relation}. Therewith, this relation ∼is the greatest bisimulation. In
addition, the bisimilarity relation is an equivalence relation.
Theorem 3.1 (Coinduction) For all σx, τy ∈(Q × T)ω, if there exists a bisimulation
relation R ⊆(Q × T)ω × (Q × T)ω with ⟨σx, τy⟩∈R, then σx = τy. In other words,
σx ∼τy ⇒σx = τy.
□
This proof principle is called coinduction, see [37–42]. It is a systematic way of
proving the statement using bisimularity: instead of proving only the single identity
σx = τy, one computes the greatest bisimulation relation R that contains the pair
⟨σx, τy⟩. By coinduction, it follows that σx = τy for all pairs ⟨σx, τy⟩∈R.
Notice that σx = τy means that the points x and y of X have the same trajectory.
Meanwhile, one point x can have different trajectories σx ̸= τx.
Let us assume that our metric space X has a partition on Voronoi cells of the form
vor(p) in accordance with planar points p ∈P. Each Voronoi cell vor(p) has just one
state. This means that it contains either a substrate (resting state), or only one reagent.
Initial values of trajectories are substrate or reagents. In this case it is natural that if
x, y ∈vor(p), then σx(0) = σy(0) and if x ∈vor(q), y ∈vor(p) (vor(p) ̸= vor(q)),
then σx(0) ̸= σy(0). In other words, if points of X belong to the same Voronoi cell,
then their trajectories have the same initial value and if points of X belong to different
Voronoi cells, then their trajectories have different initial values. Trajectories depend
on reactions among Voronoi cells (i.e. among substrate and reagents).

3.1 Reaction-Diffusion Computing
85
Let us distinguish two kinds of neighbourhood: for points of X (p-neighbourhood)
and for cells of {vor(p): p ∈P} (c-neighbourhood). While the p-neighbourhood
for open Voronoi cells consists of an inﬁnite number of members that have the
same initial state, the c-neighbourhood consists of a ﬁnite number of members (they
are other Voronoi cells) which are necessarily in different initial states. Thus, the
p-neighbourhood does not play a signiﬁcant role in the transition of the whole system
(it is important only for a transition within the framework of one Voronoi cell).
Therefore we will consider c-neighbourhood more often.
Atrajectoryσx foreveryx ∈X dependsonreactionsamongVoronoicells,e.g.ona
transition rule f characteristic for an appropriate cellular automaton of an appropriate
Voronoi diagram.
Consider now a 3-adic state automaton, where every cell takes one of the cell-
states of the following three sorts: the substrate S = {s1, . . . , sm}, the activator A =
{a1, . . . , al}, or the inhibitor I = {i1, . . . , ik}. The cardinality of the set of states Q =
S + A + I is not less than the number of members of the set P: |Q| = m + l + k ≥|P|
(we suppose that some states are superposition of basic states and the number of
basic states are equal to |P|, moreover |Q| ≥|P|, because some reagents may be
obtained as result of reactions of basic reagents of P). The state of the ﬁrst sort S is
a dedicated substrate state: a point in state sj ∈S, whose c-neighbourhood is ﬁlled
only with states sj ∈S, does not change its state (sj are analogous to a quiescent state
in cellular automaton models). The states of two other sorts, A and I, are assigned to
be reactants. The cell-state transition rule f can be written as follows:
σx(n + 1) = f (Ψi1σx(n), . . . , Ψikσx(n), Ψa1σx(n), . . . , Ψalσx(n),
Ψs1σx(n), . . . , Ψsmσx(n)),
(3.2)
where k = |I|, l = |A|, m = |S|, |Ψpσx(n)| is the number of point x’s c-neighbours
with a state p ∈{i1, . . . , ik, a1, . . . , al, s1, . . . , sm} at the time step tn.
Let us consider a ternary state automaton based on a two-dimensional lattice with
the hexagonal tiling. The automaton imitates the reaction-diffusion medium in a sub-
excitable mode. In such a mode, a propagation of activator is limited and therefore
spiral waves are formed by travelling a self-localizations emerge. See the detailed
description and particular analysis in [18, 19].
The c-neighbourhood size is seven: the central cell and its six closest c-neighbours.
To give a compact representation of the cell-state transition rule, we represent the
cell-state transition rule as a matrix M = (mij), where 0 ≤i ≤j ≤7, 0 ≤i + j ≤7,
and mkl ∈{s, a, i}. The output state of each c-neighbourhood is given by the row-
index k (the number of c-neighbours in the cell-state i) and column-index l (the
number of c-neighbours in the cell-state a). We do not have to count the number of
c-neighbours in the cell-state s, because it is given by 7 −(k + l). A point with a
c-neighbourhood represented by indexes k and l will update to cell-state mkl which
can be read off the matrix. In terms of the cell-state transition function this can be
presented as follows: σx(n + 1) = MΨaσx(n)Ψiσx(n).

86
3
Unconventional Computers Designed on Swarm Behaviours
Here is the exact matrix structure, which corresponds to matrix M3 (i.e. if
Ψaσx(n)Ψiσx(n) = 3). This is a so-called ‘spiral rule’ [18]:
																
s a i a i i i i
s i i a i i i
s s i a i i
s i i a i
s s i a
s s i
s s
s
																
(3.3)
This matrix represents an example of transition rule (3.2) for the ternary state
automaton based on a two-dimensional lattice with the hexagonal tiling.
Now consider a propositional logic Lω for the set of all trajectories Tr(X , Q, T);
its syntax and semantics are deﬁned by coinduction and their objects are trajecto-
ries (i.e. streams of pairs of cell-states and time-steps). The syntax of Lω is as follows:
Variables: p := p | q | r . . . ,
where p, q, r are members of the product Q × T of the set of states Q for an appro-
priate reaction-diffusion cellular automaton and of the time line T.
Constants: c := ⊤| ⊥
where ⊤means the truth and ⊥means the falsity.
Formulas: ϕ, ψ := p | c | ¬ψ | ϕ ∨ψ | ϕ ∧ψ | ϕ ⊃ψ
These deﬁnitions are coinductive. For instance,
• a variable p is of the form of a stream p = p(0) :: p(1) :: p(2) :: . . . :: p(n −
1) :: p(n), where p(i) ∈{p, q, r, . . . } = Q × T for each i ∈ω;
• a constant c is of the form of a stream c = c(0) :: c(1) :: c(2) :: . . . :: c(n −1) :: c(n),
where c(i) ∈{⊤, ⊥} for each i ∈ω, a particular case is [⊤] = [⊤](0) :: [⊤](1) ::
[⊤](2) :: . . . :: [⊤](n), where [⊤](i) = ⊤for each i ∈ω;
• a formula ¬ϕ has the differential equation (¬ϕ)′ = ¬(ϕ′) and its initial value is
(¬ϕ)(0) = ¬ϕ(0), this formula will be understood as ϕ ⊃[⊥];
• a formula ϕ ∨ψ has the differential equation (ϕ ∨ψ)′ = ϕ′ ∨ψ′ and its initial
value is (ϕ ∨ψ)(0) = ϕ(0) ∨ψ(0);
• a formula ϕ ∧ψ has the differential equation (ϕ ∧ψ)′ = ϕ′ ∧ψ′ and its initial
value is (ϕ ∧ψ)(0) = ϕ(0) ∧ψ(0);
• a formula ϕ ⊃ψ has the differential equation (ϕ ⊃ψ)′ = ϕ′ ⊃ψ′ and its initial
value is (ϕ ⊃ψ)(0) = ϕ(0) ⊃ψ(0).

3.1 Reaction-Diffusion Computing
87
A
variable
p ∈(Q × T)ω
deﬁned
as
p(0) = ⟨m(0), t(0)⟩= ⟨m, t(0)⟩∧
p′ = ⟨m′, t′⟩is denoted by ⟨[m], t⟩and is said to be a semi-constant variable. For
instance, n-th element of semi-constant p is denoted by ⟨m, t(n)⟩.
Further, let us consider semantics of Lω:
Truth-valuation of variables: v(p) := v(p) | v(q) | v(r) . . .
Truth-valuationofformulas:v(ϕ), v(ψ) := v(p) | v(¬ψ) | v(ϕ ∨ψ) | v(ϕ ∧
ψ) | v(ϕ ⊃ψ)
These deﬁnitions are coinductive, too. For example, the truth-valuation of vari-
ables is a map from the set of variables onto the set of constants. The truth-valuation
of formulas is deﬁned as follows:
• the differential equation of v(¬ψ) is (v(¬ψ))′ = [⊤]′ −v(ψ)′ and its initial value
is (v(¬ψ))(0) = [⊤](0) −v(ψ)(0),
• the differential equation of v(ϕ ∨ψ) is (v(ϕ ∨ψ))′ = sup(v(ϕ)′, v(ψ)′) and its
initial value is (v(ϕ ∨ψ))(0) = sup(v(ϕ)(0), v(ψ)(0)),
• the differential equation of v(ϕ ∧ψ) is (v(ϕ ∧ψ))′ = inf(v(ϕ)′, v(ψ)′) and its
initial value is (v(ϕ ∧ψ))(0) = inf(v(ϕ)(0), v(ψ)(0)),
• the differential equation of v(ϕ ⊃ψ) is (v(ϕ ⊃ψ))′ = [⊤]′ −sup(v(ϕ)′, v(ψ)′)
+ v(ψ)′ and its initial value is (v(ϕ ⊃ψ))(0) = [⊤](0) −sup(v(ϕ)(0), v(ψ)(0))
+ v(ψ)(0).
A formula ϕ is called logically valid (satisﬁable) if for any (some) truth-valuation
deﬁned above, the equality v(ϕ) = [⊤] holds (i.e. v(ϕ) and [⊤] are bisimilar).
By convention, we use Γ , Γ1, Γ2, etc., to range over sets of formulas, these may
be empty. We write Γ ⊢ϕ to indicate that ϕ is deducible (derivable) from Γ . Γ is
called the set of premises and ϕ is called the conclusion.
The propositional logic Lω has the standard inference rules for two-valued logic
(see Fig.3.1), but in the coinductive form; we can prove that it is a complete deductive
system.
Fig. 3.1 Inference rules for
the logic of trajectories. The
entail relation ⊢is the
greatest ﬁxed point of the
rules above, or, equivalently,
the conclusions of inﬁnite
derivation trees are built
from these rules

88
3
Unconventional Computers Designed on Swarm Behaviours
Let us extend the language Lω by adding a modal operator ♦k deﬁned in the
following way: a formula ♦kϕ has the differential equation (♦kϕ)′ = ♦k(ϕ′) and its
initial value is (♦kϕ)(0) = ♦kϕ(0); the informal meaning of a formula ♦kϕ is that
in the c-neighbourhood, there exist k points belonging to different cells that satisfy
ϕ. The new language will be denoted by Lω
♦.
Now let us semantically deﬁne a transition rule for a cellular automaton of Voronoi
diagram as follows:
σx(n) →σx(n + 1) if ϕ,
(3.4)
where σx(n), σx(n + 1) ∈Q × T and ϕ is a well-formed formula of Lω
♦. The cell-
state transition rule (3.4) means that the state of point x at the time-step tn is allowed
to change from σx(n) to σx(n + 1) if the condition expressed by formula ϕ(n) is
satisﬁed at the pair σx(n + 1) = ⟨mn+1, tn+1⟩x ∈Q × T.
The model, M, of logic Lω
♦is a cellular automaton of Voronoi diagram, σx is a
trajectory of its point x. The notion of satisfaction for a formula ϕ at a pair σx(n) of
a model M at time-step tn is deﬁned inductively thus:
M, σx(n) |= p iff for any i such that 0 ≤i ≤n −1, σx(i + 1) = p(i),
M, σx(n) |= ¬ϕ if not M, σx(i) |= ϕ for any i such that 0 ≤i ≤n,
M, σx(n) |= [⊥] never holds,
M, σx(n) |= [⊤] always holds,
M, σx(n) |= ϕ ∧ψ if both M, σx(n) |= ϕ and M, σx(n) |= ψ,
M, σx(n) |= ϕ ∨ψ if M, σx(n) |= ϕ or M, σx(n) |= ψ,
M, σx(n) |= ϕ ⊃ψ if M, σx(n) |= ϕ implies M, σx(n) |= ψ,
M, σx(n) |= ♦kϕ if M, σx1(n) |= ϕ, M, σx2(n) |= ϕ, . . . , M, σxk(n) |= ϕ
and vor(x1), vor(x2), . . . , vor(xk) are c-neighbours of vor(x).
On the other hand, the notion of satisfaction for a formula ϕ at a trajectory σx of a
model M is deﬁned coinductively:
M, σx |= p if and only if σ ′
x and p are bisimilar,
M, σx |= ¬ϕ if not M, σx |= ϕ,
M, σx |= [⊥] never holds,
M, σx |= [⊤] always holds,
M, σx |= ϕ ∧ψ if both M, σx |= ϕ and M, σx |= ψ,
M, σx |= ϕ ∨ψ if M, σx |= ϕ or M, σx |= ψ,
M, σx |= ϕ ⊃ψ if M, σx |= ϕ implies M, σx |= ψ,
M, σx |= ♦kϕ if M, σx1 |= ϕ, M, σx2 |= ϕ, . . . , M, σxk |= ϕ
and vor(x1), vor(x2), . . . , vor(xk) are c-neighbours of vor(x).

3.1 Reaction-Diffusion Computing
89
As we see, rule (3.4) means that ϕ and σ ′
x are bisimilar, i.e. ϕ = σ ′
x, if ϕ does not
contain logical operations.
Proposition 3.1 Let x ∈X and σx ∈(Q × T)ω. For each n > 0, there exists a tran-
sition rule of the form (3.4) such that M, σx(n) |= ϕ holds.
Proof By induction on the depth of formula. Let us suppose, ϕ is a variable p, then
there exists p such that p and σ ′
x are bisimilar. If ϕ = ¬p, there exists p such that p
and σ ′
x are not bisimilar. Suppose that ϕ = p ∨q (resp. ϕ = p ∧q or ϕ = p ⊃q),
then there exist p, q such that p or q are bisimilar with σ ′
x (resp. p and q are bisimilar
with σ ′
x for ϕ = p ∧q and if p is bisimilar with σ ′
x, then q is bisimilar with σ ′
x for
ϕ = p ⊃q), etc.
□
Let us consider the case of an automaton with the cell-state transition rule (3.3).
We have there only three states: s, a, i. Suppose m is a state-variable. Let us remember
that we may obtain semi-constant variables of three sorts: ⟨[s], t⟩x, ⟨[a], t⟩x, ⟨[i], t⟩x
for any x ∈X . The formula
⟨s, t(n)⟩x →⟨i, t(n + 1)⟩x if ♦2⟨[a], t⟩
(3.5)
holds in the cellular automaton described by rule (3.3). This means a self-inhibition
of activator if we observe this activator in two Voronoi cells of the c-neighbourhood.
More precisely, according to formula ♦2⟨[a], t⟩, we have a semi-constant trajectory
σ (n+1)
x
= ⟨[i], t⟩x after the time-step tn+1. Also, in the cellular automaton described
by rule (3.3) the following formula holds:
⟨s, t(n)⟩x →⟨i, t(n + 1)⟩x if ♦2⟨a, t(n)⟩.
(3.6)
The difference between formulas (3.5) and (3.6) is that ♦2⟨[a], t⟩is a well-formed
formula of Lω
♦and ♦2⟨a, t(n)⟩is an n-th element of a well-formed formula of Lω
♦,
therefore an uncountable inﬁnite number of well-formed formulas of Lω
♦satisﬁes
(3.6), namely there is an inﬁnite number of formulas with n-th element ♦2⟨a, t(n)⟩.
This shows that there is no ﬁnite set of formulas describing the dynamics of cellular
automaton(aﬁnitesetoftransitionrules).However,itisanormalandnaturalsituation
for coalgebraic methods. The basic notions are deﬁned in coagebra as greatest ﬁxed
points, this means that they should contain an inﬁnite number of objects.
The cell-state transition rule (3.3) we can deﬁne as the following set of logical
formulas:

90
3
Unconventional Computers Designed on Swarm Behaviours
Fig. 3.2 Inference rules for derivability ⊢σx of cell-state transitions rules on a trajectory σx. Γ is a
set of well-formed formulas of Lω
♦. If Γ = ∅, then Γ ⊢σx ϕ is denoted by ⊢σx ϕ and means that ϕ
is an axiom for σx
⟨m, t(n)⟩x →⟨s, t(n + 1)⟩x if
♦0⟨a, t(n)⟩
⟨m, t(n)⟩x →⟨i, t(n + 1)⟩x if
♦2⟨a, t(n)⟩
⟨m, t(n)⟩x →⟨a, t(n + 1)⟩x if
♦3⟨a, t(n)⟩
⟨m, t(n)⟩x →⟨i, t(n + 1)⟩x if
♦4⟨a, t(n)⟩
⟨m, t(n)⟩x →⟨i, t(n + 1)⟩x if
♦5⟨a, t(n)⟩
⟨m, t(n)⟩x →⟨i, t(n + 1)⟩x if
♦6⟨a, t(n)⟩
⟨m, t(n)⟩x →⟨i, t(n + 1)⟩x if
♦7⟨a, t(n)⟩
⟨m, t(n)⟩x →⟨a, t(n + 1)⟩x if ♦1⟨a, t(n)⟩∧♦0⟨i, t(n)⟩
⟨m, t(n)⟩x →⟨i, t(n + 1)⟩x if ♦1⟨a, t(n)⟩∧♦1⟨i, t(n)⟩
⟨m, t(n)⟩x →⟨s, t(n + 1)⟩x if ♦1⟨a, t(n)⟩∧♦2⟨i, t(n)⟩
⟨m, t(n)⟩x →⟨i, t(n + 1)⟩x if ♦1⟨a, t(n)⟩∧♦3⟨i, t(n)⟩
⟨m, t(n)⟩x →⟨s, t(n + 1)⟩x if ♦1⟨a, t(n)⟩∧♦4⟨i, t(n)⟩
⟨m, t(n)⟩x →⟨s, t(n + 1)⟩x if ♦1⟨a, t(n)⟩∧♦5⟨i, t(n)⟩
⟨m, t(n)⟩x →⟨s, t(n + 1)⟩x if ♦1⟨a, t(n)⟩∧♦6⟨i, t(n)⟩
(3.7)
Notice that rule (3.7) allows us to construct a semantical model of the cellular automa-
ton described by rule (3.3).
For logic Lω
♦, the derivability (deduction) relation is the greatest ﬁxed point of the
rules of Fig.3.2.
Hence, we can program the medium of reaction-diffusion computing by the logic
of trajectories. This fact takes place, because chemical reactions are quite deter-
ministic. In the next section we examine a process calculus for reaction-diffusion
computing. This calculus can be used for programming reaction-diffusion processes.

3.1 Reaction-Diffusion Computing
91
3.1.5
Process Calculus of Reaction-Diffusion Computing
A behaviour in reaction-diffusion systems is thought as the total of actions that a sys-
tem can perform taking into account that we describe certain aspects of behaviour
by introducing an abstraction or idealization of the ‘real’ behaviour. The simplest
model of behaviour we will use is to consider behaviour as an input/output function.
Evidently, it is a restriction, idealization we will deal with. Usually, such an
input/output function approach is implemented in automata theory, where a pro-
cess is modeled as an automaton. An automaton has a number of states and a number
of transitions, going from one state to another state. A behaviour is a run, i.e. a
path from the initial state to the ﬁnal state. There are different ways of modeling the
reaction-diffusion behaviour within this approach. The most popular is to simulate
the behaviour by cellular automata.
In this Section, we will use a more general approach presented by process alge-
bra—the study of the behaviour of parallel or distributed systems by algebraic means.
It offers tools to describe or specify transition systems, and thus it has tools to talk
about parallel composition in general. About transition systems, see [43–48].
Assume that the computational domain Ω is partitioned into computational cells
cj = 1, K such that ci ∩cj = ∅, i ̸= j and K
j=1 cj = Ω. Further, suppose that in the K
cells, there are N chemically active species and the state of species i in cell j is denoted
by pij, i = 1, N, j = 1, K. These states are time dependent and they are changed by
reactions occurring between waves in the same cell and by diffusion where waves
move to adjacent cells. In reaction-diffusion, the species interact concurrently and in
a parallel manner.
Our process calculus contain the following basic operators: Nil (inaction), ‘•’
(preﬁx), ‘|’ (cooperation), ‘&’ (reaction/fusion), ‘⊕’ (choice). Let N = {a, b, . . . }
be a set of names and L = {a, a: a ∈N}, where a is considered as activator and a as
inhibitor for a, be the set of labels built on N. Labels are said to be actions. We use
the symbols α, β, etc., to range over labels (actions), with α = α, and the symbols
P, Q, etc., to range over processes on states pij, i = 1, N, j = 1, K. The processes
are given by the syntax:
P := Nil| α • P | (P|P) | P&P | P ⊕P
Each label is a process, but not vice versa. An operational semantics for this syntax
is deﬁned in Fig.3.3. The informal meanings of basic operations are as follows:
Nil
This is the empty process.
α • P
A process P becomes active only after the action α has been performed.
P|Q
Actions P and Q are performed in parallel.
P&Q
This is the fusion of P and Q; P&Q represents a system which may behave
as both component P and Q. For instance, Nil behaves as P&P, where P
is an activator and P an appropriate inhibitor respectively.

92
3
Unconventional Computers Designed on Swarm Behaviours
Fig. 3.3 Operational
semantics: inference rules for
basic operations. The ternary
relation P
α→P′ means that
the initial action P is capable
of engaging in action α and
then behaving like P′
P ⊕Q
This is the choice between P and Q; P ⊕Q represents a system which may
behave either as component P or as Q.
Thus, in this process calculus we have two kinds of transitions between states:
(1) the internal transitions pmj
α→pnj, i.e. a reaction α in a cell j is a transition from
one state pmj before the reaction to the state pnj after the reaction, (2) the external
transitions pmk
α→pnl (diffusion), i.e. a reaction α in a cell l is a transition from one
state pmk in a cell k before the reaction to the state pnl in a cell l after the reaction.
A behaviour in process calculus can be viewed as a labelled transition system,
which consists of a collection of states L = {pij}i=1,N,j=1,K and a collection T
of transitions (processes, actions) over them. Assume T : L →P(L ), where
P(L ) = {T : T ⊆L }. This means that T (p) consists of all states that a reach-
able from p. The transition system is understood as a triple ⟨L , T , −→⟩, where
−→⊆L × T × L is a transition relation that models how a state p ∈L can evolve
into another state p′ ∈L due to an interaction σ ∈T . Usually, ⟨p, σ, p′⟩∈−→is
denoted by p
σ→p′. So, a state p′ is reachable from a state p if p
σ→p′.
The ﬁnite word α1α2 . . . αn is a ﬁnite trace of transition system whenever there is
a ﬁnite execution fragment of transition system
ρ = p0α1p1α2 . . . αnpn such that pi
αi+1
−→pi+1 for all 0 ≤i < n.
The word α1α2 . . . αn is denoted by trace(ρ). The inﬁnite word α1α2 . . . is an
inﬁnite trace whenever there is an inﬁnite execution fragment of transition system
ρ = p0α1p1α2p2α3p3 . . . such that pi
αi+1
−→pi+1 for all 0 ≤i.
Thewordα1α2 . . . isdenotedbytrace(ρ)too.Aninﬁnitewordtrace(ρ)iscircular
if
ρ = p0α1p1α2p2 . . . αnp0α1p1α2p2 . . . αnp0α1p1α2p2 . . . αnp0 . . .
such that pi
αi+1
−→pi+1 for all 0 ≤i < n −1 and pn−1
αn
−→p0.

3.1 Reaction-Diffusion Computing
93
Deﬁnition 3.1 An inﬁnite (resp. ﬁnite) trace of state p denoted by ρ(p) is the trace
of an inﬁnite (resp. ﬁnite) execution fragment starting in p.
Each trace can be regarded as a graph, where nodes represent states and edges
transitions. In this way, the transition system is viewed as graph trees. On the other
hand, in proof theory we can consider derivations as graph trees too. This will allow
us to simulate transition system within the framework of proof theory, if we identify
a process sequence α • P with a derivation α
P, where α, P ∈L, more precisely a
transition p
α
−→p′ with a derivation p ⊢α p′, where p, p′ ∈L .
By a derivation tree, we mean a possibly inﬁnite tree of formulas in which each
parent formula is obtained as the conclusion of an inference rule with its children as
premises.
Deﬁnition 3.2 Let For denote the set of all well-formed formulas in the language ⟨L;
Nil, &, ⊕⟩, where L is the set of propositional variables, Nil is an unary propositional
connective, &, ⊕are binary propositional connectives, and Rul denote some set
of rules. Let n ∈N be the maximum number of premises of any R ∈Rul. Then a
derivation graph is given by ⟨V, s, r, τ⟩, where: V is a set of nodes, s: V →For, r
is a partial mapping from V to Rul, and τ is a partial mapping from V to V n (we
write τj(v) for the j-th component of τ(v)); for all v ∈V , τj(v) is deﬁned just in case
r(v) is a rule with m premises, 1 ≤j ≤m and:
s(τ1(v)) . . . s(τm(v))
s(v)
is an instance of rule r(v).
A derivation graph G consists of the set V of nodes and the set of edges
E = {⟨v, τj, v′⟩: v, v′ ∈V, τj(v) = v′}. The ﬁnite word τ1τ2 . . . τn is a ﬁnite trace
of derivation whenever there is a ﬁnite execution fragment of transition system
π = v0τ1v1τ2 . . . τnvn such that τi+1(vi) = vi+1 for all 0 ≤i < n.
Thewordτ1τ2 . . . τn isdenotedbytrace(π).Theinﬁnitewordτ1τ2 . . . isaninﬁnite
trace of derivation whenever there is an inﬁnite execution fragment of transition
system
π = v0τ1v1τ2 . . . such that τi+1(vi) = vi+1 for all 0 ≤i.
The word τ1τ2 . . . is denoted by trace(π) too. An inﬁnite word trace(π) is circular
if
π = v0τ1v1τ2 . . . τnv0τ1v1τ2 . . . τnv0τ1v1τ2 . . . τnv0 . . .
such that τi+1(vi) = vi+1 for all 0 ≤i < n −1 and τn(vn−1) = v0. For more details
about circular proofs see [49–51].

94
3
Unconventional Computers Designed on Swarm Behaviours
Fig. 3.4 Axioms of proof-theoretic simulation of Belousov-Zhabotinsky reaction
Fig. 3.5 Inference rules of proof-theoretic simulation of Belousov-Zhabotinsky reaction. The vari-
ablesP,Q runoverthe set {Ce3+,HBrO2,BrO−
3 ,H +,Ce4+,H2O,BrCH (COOH)2,Br−,HCOOH,
CO2, HOBr, Br2, CH2(COOH)2}
Deﬁnition 3.3 A derivation graph G is a derivation tree if there is a distinguished
node v0 ∈V such that the trace of an inﬁnite (resp. ﬁnite) execution fragment in G
starts in v0. This trace is denoted by π(v0).
Using the bisimulation principle [35, 36, 40], we can identify a transition system
with a proof system, namely we can show that there exist a transition system and a
proof system such that for any ρ and π (resp. p and v0) trace(ρ) and trace(π) (resp.
ρ(p) and π(v0)) are bisimilar.
Let us return to the process calculus of reaction-diffusion computing. Due to the
bisimulation between a transition system and a proof system, we can set up proof-
theoretic frameworks of this process calculus (Figs.3.4 and 3.5). For example, we
can deﬁne a proof-theoretic simulation of Belousov-Zhabotinsky reaction (Fig.3.6).
Deﬁnition 3.4 Let L = {Ce3+, HBrO2, BrO−
3 , H +, Ce4+, H2O, BrCH (COOH)2,
Br−, HCOOH, CO2, HOBr, Br2, CH2(COOH)2} be the set of value states. The set
of initial transitions T0 is deﬁned by axioms in Fig.3.4. The two basic operations
⊕(choice), & (fusion) are deﬁned by inference rules in Fig.3.5, which describe
general properties of transitions. Then the proof-theoretic simulation of Belousov-
Zhabotinsky reaction is a tuple ⟨L, T0, (CL), (CR), (FL), (FR), (F), (F), (Nil)⟩.

3.1 Reaction-Diffusion Computing
95
3.8
3.9
Fig. 3.6 The derivation tree of proof-theoretic simulation of the Belousov-Zhabotinsky circular
feedback Ce3+ −→Ce4+ −→Ce3+ −→. . . . We see that the pictured derivation tree has a cycle.
This cycle presents the circular feedback in the Belousov-Zhabotinsky reaction (more precisely
temporal oscillations in a well-stirred solution): cerium(III) is colourless and cerium(IV) is yel-
low. Under some conditions, this cycle will repeat several times: in the beginning the solution is
colourless, later it is yellow, later it is colourless, etc.
In this system, transitions between states are identiﬁed with derivations of states.
The example is given in Fig.3.6. Each step of derivation means a transition. As a
result, the circular trace of state Ce3+ (resp. Ce4+) has a meaning of circular proof,
where the state Ce3+ (resp. Ce4+) is unfolded inﬁnitely often among premisses and
at the same time among derivable expressions. This circular proof is an example of
auto-wave. Notice that the Belousov-Zhabotinsky reaction can be used in designing
logic circuits, see [52].
Self-organization phenomena in nature assume circularity and cause-and-effect
feedback relations: each component affects the other components, but these com-
ponents in turn affect the ﬁrst component. The most popular example of such
self-organization is presented by Belousov-Zhabotinsky reaction. In this system we
observe circularity in the interchange of solution colour: in the beginning the solution
is colourless, then it becomes yellow, then it becomes colourless, etc. In the logical
simulation of Belousov-Zhabotinsky reaction we obtain circular proofs. This shows
that the reaction-diffusion computing cannot dispense with logical circularity like
cyclic proofs and feedback relations in state transitions. We can suppose that logi-
cal circularity should be a key notion of “life computer”, i.e. of each self-organized
reaction-diffusion system.

96
3
Unconventional Computers Designed on Swarm Behaviours
3.2
Automata on Slime Mould
3.2.1
Slime Mould Cellular Automata
Let us show that the reaction-diffusion computing is realized on the media of swarms,
too. And let us exemplify this fact by simulating the slime mould behaviour in the
reaction-diffusion way. Plasmodium’s active zones of growing pseudopodia are a
key phenomenon of slime mould based computer. These zones interact concurrently.
At these active zones, according to Adamatzky’s experiments, three basic operations
stimulated by nutrients (attractants) and some other conditions can be observed:
fusion,multiplication,anddirectionoperations[53].Thefusion,denotedFuse,means
that two active zones A1 and A2 either produce a new active zone A3 (i.e. there
is a collision of the active zones) or just a protoplasmic tube α: Fuse(A1, A2) =
A3 or Fuse(A1, A2) = α. The multiplication, Mult, means that the active zone A1
splits into two independent active zones A2 and A3 propagated according to their
own trajectories: Mult(A1) = {A2, A3} or Mult(α) = {A2, A3}. The direction, Direct,
means that the active zone A is translated to a domain of an active space with certain
initial velocity vector v: Direct(A, v). These operations, Fuse, Mult, Direct, can be
determined by the following stimuli:
• The set of attractants {N1, N2, . . . }—sources of nutrients, on which the plasmod-
ium feeds. Each attractant N is characterized by its position and intensity. It is a
function from one active zone to another.
• The set of repellents {R1, R2, . . . }. Plasmodium of Physarum polycephalum avoids
light and some thermo- and salt-based conditions. Thus, domains of high illumina-
tion (or high grade of salt) are repellents such that each repellent R is characterized
by its position and intensity (force of repelling). In other words, each repellent R
is a function from one active zone to another.
The plasmodium behaviour is intelligent and can be represented as implementa-
tion of some abstract automata.
A cellular-automatic approach as the most natural way of presentation of plas-
modium behaviours as computational media takes into account the fact that these
behaviours are massively parallel. Recall again that a cellular automaton is a 4-tuple
A = ⟨Zd, S, u, f ⟩, where (1) d ∈N is a number of dimensions and the members of
Zd are referred as cells, (2) S is a ﬁnite set of elements called the states of an automa-
ton A , the members of Zd take their values in S, (3) u ⊂Zd \ {0}d is a ﬁnite ordered
set of n elements, u(x) is said to be a neighbourhood for the cell x, (4) f : Sn+1 →S,
that is, f is the local transition function (or local rule). As we see, an automaton is
considered in the endless d-dimensional space of integers, i.e. on Zd. Discrete time is
introduced for t = 0, 1, 2, . . . For instance, the cell x at time t is denoted by xt. Each
automaton calculates its next state depending on states of its closest neighbours. The
cellular automata, thus, represent the locality of physics of information and massive
parallelism in the space-time dynamics of natural systems [30, 31].

3.2 Automata on Slime Mould
97
In abstract cellular automata, cells physically are identic. They can differ only
by one of the possible states of S. In the case of Physarum polycephalum, cells can
possess different topological properties. This depends on the intensity of chemo-
attractants and chemo-repellents. The intensity entails the natural or geographical
neighbourhood of the set’s elements in accordance with the spreading of appropriate
chemical signals (attractants or repellents). As a result, we obtain Voronoi cells.
Let us remind what they are mathematically. Let P be a nonempty ﬁnite set of
planar points and |P| = n. For points p = (p1, p2) and x = (x1, x2) let d(p, x) =

(p1 −x1)2 + (p2 −x2)2 be their Euclidean distance. A Voronoi diagram of P is a
partition of the plane into cells, such that for any element of P, a cell corresponding
to a unique point p contains all those points of the plane which are closer to p in
respect to the distance d than to any other node of P. As a consequence, a unique
region
vor(p) =

m∈P,m̸=p
{z ∈R2 : d(p, z) < d(m, z)}
assigned to point p gives a Voronoi cell of p. Within one Voronoi cell, a reagent has
a full power to attract or repel the plasmodium (or any other swarm). The distance
d is deﬁned by the intensity of reagent spreading like in other chemical reactions
simulated by Voronoi diagrams [33]. The reagent attracts or repels the plasmodium
and the distance is deﬁned on the elements of a given planar set P. When two
spreading wave fronts of two reagents meet, this means that on the board of meeting
the plasmodium cannot choose its further direction and it splits (see Fig.3.7). Within
one and the same Voronoi cell two active zones fuse.
The direction of protoplasmic tubes is deﬁned by concentrations of chemo-
attractants or chemo-repellents in the Voronoi neighbourhood. Let l, s, r be concen-
trations of reagents as measured by left, forward, and right Physarum polycephalum
sensors, respectively [55]. Each step in the dynamics of protoplasmic tubes can be
characterized by its current position xt and the angle αt at time step t. The angle is
calculated as follows:
αt+1 = αt +
⎧
⎪⎪⎨
⎪⎪⎩
0,
if st > lt and st > rt
−ψ,
if lt > rt and lt > st
ψ,
if rt > lt and rt > st
random(−α, α),
otherwise
Let A1, A2, …An denote growing pseudopodia. Then the Voronoi cell has the follow-
ing state:
xt+1 =
D(αt+1),
if Ai ∈u(xt)
xt,
otherwise
where D(αt+1) is a protoplasmic tube directed to the cell of xt+1 in accordance with
the angle αt+1.
Now we can deﬁne the Physarum polycephalum cellular automaton as a whole
as follows:

98
3
Unconventional Computers Designed on Swarm Behaviours
Fig. 3.7 The Voronoi diagram for Physarum polycephalum, where different attractants have dif-
ferent intensities and powers, see [54]
Deﬁnition 3.5 Consider a propositional language L with the only binary operation
∨, it is built in the standard way over the set of variables S = {0, A1, A2, …, N1,
N2, …, R1, R2, …, D1(α1), D2(α2), . . . }, where 0 is inactive state, A1, A2, . . . are
growing pseudopodia, N1, N2, . . . are attractants, R1, R2, . . . are repellents, D1(α1),
D2(α2), . . . are protoplasmic tubes. Let S be the set of states of proof-theoretic
cellular automaton A on the Physarum p. Voronoi diagram described above. The
inference rule of the automaton is as follows:
xt+1 =
⎧
⎪⎪⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎪⎪⎩
X ∨Aj,
if xt = X ∨Dn(αt
n) ∨Ni and
Dn(αt
n) ∨Ai ∈u(xt)
X ∨Aj,
if xt = X ∨Aj ∨Ni and
Dn(αt
n) ∨Ai ∈u(xt)
0 ∨Dn(αt+1
n
),
if xt = 0 and Ri /∈u(xt),
Dn(αt
n) ∈u(xt)
xt,
otherwise

3.2 Automata on Slime Mould
99
where X is a possibly empty metavariavle consisting of disjunctions. Then A can
simulate the dynamics of plasmodium of Physarum polycephalum.
The automaton A is called proof-theoretic [2], because it is not a cellular automa-
ton in the strict sense, it rather covers the class of automata by setting logical
frameworks for their possible dynamics. This automaton deﬁnes basic features of
Physarum p. computational behaviour which allow us to involve some abstract
machines in analyzing Physarum p. computations. As a consequence, each
Physarum p. proof-theoretic cellular automaton A serves as a logical metalanguage
for an appropriate experiment with the Physarum p. plasmodium to ﬁx experimental
results. In other words, it is an experimental metalanguage containing observational
terms and logical operations over them. Within this language, we can design abstract
pointer machines and then implement them in real experiments with Physarum poly-
cephalum.
3.2.2
Process Calculus of Slime Mould Computing
The Physarum polycephalum behaviour can be programmable within some abstract
automata. It is easy to encode such programs into process calculus (π-calculus),
developed by Milner [56] that describes concurrent computations whose network
conﬁguration may change during the computation. The Physarum p. version of π-
calculus was proposed in [9]. This version is called Physarum spatial logic. Within π-
calculus we can describe and simulate different intelligent processes such as business
processes. In the meanwhile, Physarum spatial logic is a natural implementation of
π-calculus. About logical aspects of concurrency and π-calculi, please see [43, 57,
58]. About spatial logic, please see [59–62].
This logic is built in the following way. The behaviour of Physarum p. plas-
modium can be divided into the following elementary processes: inaction, fusion,
cooperation, and choice, which could be interpreted as unconventional (spatial) fal-
sity, conjunction, weak and strong disjunction respectively, denoted by Nil, &, |,
and +. They may be described as special spatial transitions over states of Physarum
polycephalum automata: inaction (Nil) means that pseudopodia has just stopped to
behave; fusion (&) means that two pseudopodia come in contact one with another
and then merge; cooperation (|) means that two pseudopodia behave concurrently
(e.g. one tube splits); choice (+) means a competition between two pseudopodia in
their behaviours.
A π-calculus for describing the dynamics of Physarum p. automata is presented
as a labelled transition system with some logical relations.
Assume that there are n active species or growing pseudopodia within a
Physarum p. Voronoi diagram and the state of species i is denoted by pi ∈Γ . These
states are time dependent and they are changed by plasmodium’s active zones inter-
acting with each other and affected by attractants or repellents. Foraging plasmodium

100
3
Unconventional Computers Designed on Swarm Behaviours
can be represented as a set of the following abstract entities (see also about possible
transitions of slime mould in [63]):
• The set of elementary actions (growing pseudopodia), T ′ = {α, β, . . . }, localized
in active zones. The actions from T ′ are called the simplest transitions, the latter
are deﬁned as {p
α→q : p, q ∈Γ, α ∈T ′}. Notice that we also have transitions that
do not belong to T ′. Each action α ∈T ′, starts on a state pi, which is its current
position, and says about a transition (propagation) of a state pi to another state
of the same or another Voronoi cell. Part of plasmodium feeding on a source of
nutrients may not propagate, so its transition may be Nil, but this part can always
start moving.
• The set of attractants {N1, N2, . . . } are sources of nutrients, on which the plas-
modium feeds. Each attractant N is a function from T ′ to T ′.
• The set of repellents {R1, R2, . . . }. Each repellent R is a function from T ′ to T ′.
• The set of protoplasmic tubes {C1, C2, . . . }. Typically plasmodium spans sources
of nutrients with protoplasmic tubes/veins. C(α) means a diffusion of growing
pseudopodia α ∈T ′.
The set T of all transitions consists of members of T ′, {N1, N2, . . . }, {R1, R2, . . . },
{C1, C2, . . . }.
Our process calculus contains the following basic operators: Nil (inaction), . (pre-
ﬁx), | (cooperation), \ (hiding), & (reaction/fusion), + (choice), a (constant or restric-
tion to a stable state), A(·) (attraction), R(·) (repelling), C(·) (spreading/diffusion).
Let T = {a, b, . . . }, the set of all actions (evidently, this set is ﬁnite), be considered as
a set of names. A name refers to a communication link or channel. With every a ∈T
we associate a complementary action a. Let us suppose that a designates an input
port and a designates an output port. Any behaviour of Physarum polycephalum will
be considered as outputs and any form of outside control and stimuli as appropriate
inputs. For instance, T ′ is to be regarded just as the set of output ports and thereby
T\T ′ contains ports that can be interpreted under different conditions as input ports or
output ports. So, for each X ∈{N1, N2, . . . } ∪{R1, R2, . . . }, we take that X (γ ) = δ
is a function from T ′ to T ′ such that X is a stimulus for γ and X makes an output
δ ∈T ′ along γ . Evidently that X (Nil) = Nil. Let X (γ ) denote an input and X (γ ) an
output.
Deﬁne L be the set of labels built on T (under this interpretation, a = a). Suppose
that an action a communicates with its complement a to produce the internal action
τ and τ belongs to L , too.
We use now the symbols γ , δ, …, etc., to range over labels (actions), with a = a,
and the symbols P, Q, etc., to range over processes on states pi. The processes are
given by the syntax:
P, Q := Nil|γ · P|N(γ ) · P|N(γ ) · P|R(γ ) · P|R(γ ) · P|C(γ ) · P|(P|Q)|P\Q|P&Q|P + Q|a
Each label is a process, but not vice versa, because a process may consists of many
labels combined by the basic operators.
An operational semantics for this syntax is deﬁned as follows:

3.2 Automata on Slime Mould
101
γ := pi, where pi ∈Γ.
Preﬁx :
γ · P
γ→P
,
N(γ ) · P
δ→P
(N(γ ) = δ),
N(γ ) · P
δ→P
(N(γ ) = δ),
R(γ ) · P
δ→P
(R(γ ) = δ),
R(γ ) · P
δ→P
(R(γ ) = δ),
(the conclusion states that the process of the form γ · P (resp. N(γ ) · P, N(γ ) · P,
R(γ ) · P, R(γ ) · P) may engage in γ (resp. N(γ ), N(γ ), R(γ ), R(γ )) and thereafter
they behave like P; in the presentations of behaviours as trees, γ · P (resp. N(γ ) · P,
N(γ ) · P, R(γ ) · P, R(γ ) · P) is understood as an edge with two nodes: γ (resp.
N(γ ), N(γ ), R(γ ), R(γ )) and the ﬁrst action of P),
Diffusion :
P
γ→P′
P
γ→C(γ )
(C(γ ) = P′),
Constant :
P
γ→P′
a
γ→P′
(a = P, a ∈Γ ),
Choice :
P
γ→P′
P + Q
γ→P′ ,
Q
γ→Q′
P + Q
γ→Q′ ,
(these both rules state that a system of the form P + Q saves the transitions of its
subsystems P and Q),
Cooperation :
P
γ→P′
P|Q
γ→P′|Q
,
Q
γ→Q′
P|Q
γ→P|Q′ ,
(according to these rules, the cooperation | interleaves the transitions of its subsys-
tems),
P
γ→P′
Q
γ→Q′
P|Q
τ→P′|Q′
,
(i.e. subsystems may synchronize in the internal action τ on complementary actions
γ and γ ),
Hiding :
P
γ→P′
P\Q
γ→P′\Q
(γ /∈Q, Q ⊆Γ ),

102
3
Unconventional Computers Designed on Swarm Behaviours
(this rule allows actions not mentioned in Q to be performed by P\Q),
Fusion :
γ · P& ˘P
γ→Nil
(the fusion of dual processes are to be performed into the inaction, e.g. a fusion of
an attractant/repellent P and appropriate repellent/attractant ˘P),
P
γ→P′ Q
γ→P′
P&Q
γ→P′
,
P
γ→P′ Q
γ→P′
Q&P
γ→P′
(this means that if we obtain the same result P′ that is produced by the same action
γ and evaluates from two different processes P and Q, then P′ may be obtained by
that action γ started from the fusion P&Q or Q&P),
P
γ→P′
P&Q
γ→Nil + C(γ ) + P′ ,
P
γ→P′
Q&P
γ→Nil + C(γ ) + P′
(these rules state that if the result P′ is produced by the action γ from the processes P,
then a fusion P&Q (or Q&P) is transformed by that same γ either into the inaction
or diffusion or process P′).
These are inference rules for basic operations. The ternary relation P
γ→P′ means
that the initial action P is capable of engaging in action γ and then behaving like P′.
Hence, the behaviour of plasmodium of Physarum polycephalum could be con-
sidered a kind of π-calculus and used as a programming language for Physarum p.
automata or for simulating different intelligent processes. About our programming
language, please see [64–70]. We have used the approach of object-programming
[71].
3.2.3
Performative Propositions in Slime Mould π-Calculus
Involving Physarum polycephalum π-calculus as programming language into ana-
lyzing intelligent processes allows us to formalize many kinds of human interactions
within Physarum automata. For instance, it is possible to consider simpler versions
of illocutionary logic that was developed for explicating the logical nature of human
speech acts [72–74]. This logic studies performative propositions which express our
emotional and cognitive valuations to commit interactions. In Physarum π-calculus
we can logically formulate some simple human performative propositions.
Let Ψ be any proposition that is built up by a superposition of standard proposi-
tional logical connectives (∨, ∧, ¬, ⇒) in the conventional way. Let V is a valuation
of each propositional variable p such that V (p) ⊆T. We mean that V (p) consists of

3.2 Automata on Slime Mould
103
possible worlds, where p is true. Now we can deﬁne whether a proposition Ψ is true
in the event x of T. If it is true, it is denoted by x |= Ψ .
x |= p if x belongs to V (p);
x ⊭false, where false is any contradiction;
x |= Φ ⇒Ψ iff x ⊭Φ or x |= Ψ ;
x |= ¬Φ iff x |= (Φ ⇒false).
Within Physarum spatial logic we can deﬁne the following three performative
propositions:
• □eatΨ := ‘I would like to eat Ψ ’
• □fearΨ := ‘I fear Ψ ’
• □satisfyΨ := ‘I am almost satisﬁed by Ψ ’
These propositions have the following semantics:
x |= □eatΨ if for any process P containing N(γ ), we have that if x |= Ψ , then P
contains a transition x
N(γ )
→y.
x |= □fearΨ if for any process P containing R(γ ), we have that if x |= Ψ , then P
contains a transition x
R(γ )
→y.
x |= □satisfyΨ if for any process P containing C(γ ), we have that if P contains a
transition x
C(γ )
→y, then y |= Ψ .
♦eatΨ = ¬□eat(¬Ψ ).
♦fearΨ = ¬□fear(¬Ψ ).
♦satisfyΨ = ¬□satisfy(¬Ψ ).
As we see, we can consider the plasmodium activity as a veriﬁcation of three
basic performative propositions: □eatΨ , □fearΨ , □satisfyΨ .

104
3
Unconventional Computers Designed on Swarm Behaviours
3.3
Reversible Logic Gates on Swarm Behaviours
3.3.1
Reaction-Diffusion Media of Topology of Attractants
As we already know, the swarm behaviour is quite intelligent and with some restric-
tions it can be successfully managed by different outer stimuli: attractants and repel-
lents [10, 53], and it may take place in accordance with behaviourism. This fact
allows us to design some devices on the swarm motions assuming that logic vari-
ables x1, x2, . . . xn are presented by attractants and their truth meanings either 0 or 1
is deﬁned as follows: xi has the value 1 (respectively, 0) if xi is (respectively, is not)
occupied by the swarm.
Each reaction to attractant is based on the reaction-diffusion computing deﬁned in
theprevioussections.Hence,theprocesscalculusofreactiondiffusioncomputingcan
be considered as a programming language for simulating chemo-biological reactions
to attractants. In this section, I show how we can design computers on topologies of
attracting pieces. In order to design a biological computer on attracting the swarm
behaviour we need to establish new ways of constructing logic circuits by involving
the following simple actions of any swarm: fusion, multiplication, direction, and
repelling. (i) The fusion means that two active zones A1 and A2 of a swarm produce
new active zone A3; (ii) the multiplication means that the active zone A1 of the swarm
splits into two independent active zones A2 and A3 propagating along their own
trajectories for motions; (iii) the direction means that the active zone A is translated
to a source of food with certain initial velocity vector −→
v ; (iv) the repelling means that
the swarm avoids some places under some conditions with certain initial opposite
velocity vector −−→
v . The swarm behaviour can be considered a biological kind of
labelled transition system [9]. It is the most fundamental type of behaviour managed
by attractants and repellents.
In this section, let us exemplify the swarm behaviour by the plasmodium of
Physarum polycephalum and let us show how we can design a biological com-
puter on plasmodia. There are many signiﬁcant results in designing logic circuits on
plasmodia. For example, combinational logic circuits are proposed in [75] by using
some external stimuli such as light and food to determine the outputs in the oscilla-
tion frequency. In that paper it is shown that basic gates OR, AND and NOT were
correct 90%, 77.8% and 91.7% of the time respectively and derived logic circuits
XOR, Half Adder and Full Adder were 70.8%, 65% and 58.8% accurate respec-
tively. It is known [76] that the oscillations of electrical potential can also control
the peristaltic activity of protoplasmic tubes, used for the distribution of nutrients in
the Physarum polycephalum propagation. This feature can be engaged in designing
logic gates z = x  y with two inputs x and y and one output z, where x, y, and z are
tubes with diameter returns to a resting value 30 µm. For more details see [76].
In the object-oriented language for Physarum polycephalum computing we have
constructedonthebasisoftheprocesscalculusin[67, 68]tosimulatetheplasmodium
propagation, we can design different logic gates on Physarum polycephalum—from
classical to non-classical. In this section, I show, how we can deﬁne, ﬁrst of all,

3.3 Reversible Logic Gates on Swarm Behaviours
105
reversible logic gates on slime mould. The point is that the plasmodium behaviour
has some properties which are shared by quanta, e.g. we can perform the double-
slit experiment [77] with Physarum polycephalum to prove that Kolmogorovian
probabilities are unapplied in the case of slime mould as well as in the case of
quanta [78]. Therefore we can assume that the evolution of plasmodium states can
satisfy some properties of the evolution of quantum states, namely the evolution of
Physarum p. states can be restricted by the unitarity property as well, i.e. every
operation on a normalized plasmodium state must keep the sum of probabilities of all
possible outcomes at exactly 1. Therefore any logic gate for Physarum polycephalum
must be implemented as a unitary operator, too. So, it is reversible, also. Thus, it is
better to appeal to reversible logic gates in the case of slime mould as well as in the
case of quanta.
The main difference of states of plasmodium from the states of quanta is that the
latter are described by the points of the Bloch sphere, while the ﬁrst are described by
the points of a disc around one active zone of plasmodium. For example, the quantum
NOT gate has the effect of mapping a quantum state, |ψ⟩, lying at any point on the
surface of the Bloch sphere, into its antipodal state, |ψ⊥⟩, on the opposite side of the
Bloch sphere. The Physarum polycephalum NOT gate maps a state of plasmodium
on the disc around one active zone into its antipodal state on the opposite side of this
disc. In other words, the fundamental meaning of Physarum polycephalum NOT is
that if A denotes a direction of plasmodium with vector −→
v , then NOT A will denote
a new direction of plasmodium with vector −−→
v that is opposite to a given vector v
with the same magnitude but the opposite direction.
The Bloch sphere is constructed as follows. Let us consider the spin-1/2 particle
and the Stern-Gerlach apparatus with the upper and the lower detector plates for par-
ticles. While the upper detector plate is hit with probability P, the other detector plate
is hit with probability 1 −P. Then each proposition “The spin along the direction
tilted at an angle θ (0 ≤θ ≤π) from the z-axes is up” is probabilistic and belongs
to a sphere.
However, the quantum reversible logic gates within the Bloch sphere are much
easier to be designed than gates for Physarum polycephalum motions. The point is
that the quantum behaviour is simpler than the behaviour of plasmodium. For quanta
there are no lateral effects when quanta have a free will to choose a strategy of
propagations. The plasmodium has such a free will. So, there are lateral inhibition
and lateral excitation phenomena in the plasmodium networking. Let us recall that
lateral inhibition (suppressing the activity of local neighbour neurons via inhibitory
connections) and lateral excitation (activation) (activating local neighbour neurons
via excitation mechanisms) are two basic phenomena of neural sensory modalities
and it is a very substantial fact for designing logic circuits that both lateral inhibi-
tion and lateral excitation are also observed as two basic modalities in networking
of Physarum polycephalum plasmodia [79]. The lateral inhibition means that the
plasmodium prefers fusion of its tubes and the lateral excitation means that the plas-
modium prefers multiplication of its tubes. Another problem is that the plasmodium
can change its decisions and come back (compare to [80, 81]). As a result, we deal
with non-well-founded sets [82].

106
3
Unconventional Computers Designed on Swarm Behaviours
In this section, ﬁrst, we consider possibilities to implement asynchronous sequen-
tial logic gates for Physarum polycephalum motions and some examples of reversible
logic gates within this approach, second, we show, how we can design some quantum-
style conventional reversible logic gates on the medium of plasmodium behaviours
within matrix multiplication groups, third, we propose an unconventional exten-
sion of matrix multiplication group theory to design reversible logic gates with an
uncertain number of inputs and outputs. These results are a continuation of the work
showingjointfundamentalsofplasmodiumbehavioursandquantumbehaviours[78].
Hence, we have used the following two approaches to designing reversible logic
gates on plasmodia: (i) the approach by accepting the plasmodium propagation with
controlling all directions and all ways of its motions; (ii) the approach by accepting
the plasmodium propagation in all possible directions simultaneously without the
controlling of each way of its behaviour. Both approaches have been applied by
other scientists in designing logic gates on plasmodia, also. The ﬁrst approach has
been used in the design of logic circuits by appealing to the plasmodium motions in
channels [83] or to the properties of plasmodium motions in the channels with direct
and ballistic trajectories [84]. The same approach has been engaged in the optical
coupling gates on plasmodia [85], in the plasmodium gates based on frequency
changes of electrical potential oscillation [75], etc. The second approach has been
used in the application of emergent computations on the medium of plasmodia [55].
For instance, in order to control all the ways of plasmodium propagation, we can
design some channels plasmodia move through [83]. In this case the plasmodium
motions can be interpreted as analogous to electric current in electric logic circuits.
The presence of plasmodium in a given channel indicates ‘truth’ and absence ‘false’.
Thus, in [83] there were proposed the two-input two-output gate ⟨x, y⟩→⟨xy, x +
y⟩and the three-input two-output gate ⟨x, y, z⟩→⟨xyz, x + y + z⟩. Another mean
is to use the difference of plasmodium behaviour in the channels with direct or
ballistic trajectories [84]. In this way there were designed the following two-input
two-output Boolean logic gates: ⟨x, y⟩→⟨xy, x + y⟩and ⟨x, y⟩→⟨x, xy⟩. Also, it
is possible to oscillate the electrical activity of the protoplasmic tubes of plasmodia,
creating a peristaltic like action within the tubes, to control the speed and direction of
growth [75].
However, the most interesting way in designing logic circuits on plasmodia is
presented by the second approach that applies emergent computations to the slime
mould [55]. This way is more natural for a living system, because each living sys-
tem possesses some emergent properties. Let us recall that emergence is a process
whereby larger entities exhibit some new properties and patterns through interac-
tions among smaller entities. In emergence there is a disequilibrium between local
and global behaviours so that in emergent computations a whole system cannot be
predicted locally. In [55] there is proposed a Boolean gate as an internally instable
machine.

3.3 Reversible Logic Gates on Swarm Behaviours
107
3.3.2
Sequential Logic Gates on Slime Mould and Some
Examples of Reversible Logic Gates
In electronic circuits the two logical values 1 and 0 are represented by the high voltage
at an input A (resp. at an output B) for A = 1 (resp. for B = 1) and low voltage at A
(resp. at B) for A = 0 (resp. for B = 0). In the plasmodium circuits the value A = 1
(resp. B = 1) corresponds to the high concentration of plasmodium protoplasm at A
(resp. at B) and the value A = 0 (resp. B = 0) corresponds to the low concentration
of plasmodium protoplasm at A (resp. at B).
The plasmodium behaviour is managed by attractants and repellents. We can
assume that logic variables x1, x2, . . . xn are presented by attractants occupied or not
by the plasmodium. Each variable xi can be of a truth value either 0 or 1: it has the
value 0 if xi is not occupied by the plasmodium and it has the value 1 if xi is occupied
by the plasmodium. Let us denote an ordered collection consisting of all elements of
a set {x1, x2, . . . , xn} by [x1x2 . . . xn]. It is a string. If we know a value of the i-sign xi:
say xi = 0, we can write the string [x1x2 . . . xi . . . xn] as follows: [x1x2 . . . ⟨0⟩. . . xn].
We can replace all the variables with their values to obtain a binary combination. For
example, variables {A, B, C, D} of Fig.3.8 have truth values A = 0, B = 1, C = 1,
D = 0 at t = 2. In this case we receive the binary string and it is written as [0110].
In Fig.3.8, we see that one single variable can change its values. Moreover, the
plasmodium can leave an occupied attractant B so that an appropriate value of B
will be then 0. The sequence ⟨011⟩means that the variable B is presented by three
values ﬁxed during time, since the step t = 0 and ﬁnishing at t = 2. The point at
time t = 0 corresponds to the truth value B(t0) = 0, the point at t = 1 to B(t1) = 1,
and the point at t = 2 to B(t2) = 1. The time-depending variable B(t) is deﬁned by
the sequence ⟨B(t0)B(t1)B(t2)⟩= ⟨011⟩.
We assume that at each time step t = 0, 1, 2, . . . there is a change of meaning of
at least one variable. This step is called the clock edge. The set-up time is to designate
the time when the data inputs are valid before the clock transition (e.g. the 0 to 1
transition). The hold time is to designate the time when the data input remain valid
after the clock edge.
Figure3.8 can be regarded as a truth table structured as follows. There are hor-
izontally located binary strings X0 = [0000], X1 = [0100], X2 = [0110] ﬁxed at
time t0, t1, t2 respectively. All these strings are meanings of [ABCD] at different
time. Also, there are vertically located binary sequences A(t) = ⟨000⟩, B(t) = ⟨011⟩,
C(t) = ⟨001⟩, D(t) = ⟨000⟩. These sequences can be presented as follows for short:
⟨X0X1X2⟩.
Now let us deﬁne a logical switching as an action to change the value from 0
to 1 or from 1 to 0 at time t. For instance, by passing from the binary string X0 to
X1, variable B changes its value from logical zero to unity. At the same time, other
variables do not change their truth values and, therefore, create a stable background
for switching B = 0/1. In [86], the operation of venjunction is deﬁned as the function
z = x∠y which is read as follows: “switching x on the background y” and takes a
unity value in the case of switching of variable x from zero to unity at the constant

108
3
Unconventional Computers Designed on Swarm Behaviours
Fig. 3.8 One of the possible experiments when the plasmodium propagates a protoplasmic tube to
attractants A, B, C, D. Let us pay attention that A is the nearest attractant and it is expected that it
will be occupied ﬁrst. However, the plasmodium occupies B at step t = 1 and then C at step t = 2
in this experiment, see [6]
unity value of variable y. It is supposed that the unity value of function remains until
x or y reduces to zero. For example, C∠B takes the truth value 1 at t = 2.
On the basis of venjunction and some other Boolean functions, it is possible to
implement asynchronous sequential logic gates [86, 87] on the medium of Physarum
polycephalum. Notably that in asynchronous binary sequences there are no external
control of time points t0, t1, t2, …, i.e. there is no external synchronizer which would
set these points.
A synchronous sequential circuit is a logic circuit whose outputs are a function
of their inputs, past inputs, and past outputs: outputs = f (inputs, past inputs, past
outputs). In these sequential circuits we can deal with two outputs Q and ¬Q one of
which is the complement of the other. These circuits are called bistable multivibrators
or Flip Flops. So, 1 as the ﬁrst stable state at an output means rising on top (“ﬂip”)
and 0 as the second stable state at an output means falling to ground (“ﬂop”). The
Flip Flop has one or two inputs and clock edge, as a result the current outputs are
determined by the logic states at these inputs and the previous outputs. The commands
formed by the inputs are as follows: (i) set: Q = 1; (ii) reset: Q = 0; (iii) ﬂip: change

3.3 Reversible Logic Gates on Swarm Behaviours
109
Table 3.1 The RS Flip Flop circuit with two inputs R (‘reset’) and S (‘set’) and two outputs
Q = NAND(S, NOTQ), ¬Q = NAND(R, Q). Thus, when both R and S are 0, the Flip Flop is in a
quiescent state and both outputs retain their value. If a positive pulse is applied to the S input, the
Q output takes the 1 value (with ¬Q = 0) and if a positive pulse is applied to the R, he Q output
takes the 0 value (with ¬Q = 1), see [6]
R
S
Q
¬Q
Meaning
0
0
Q
¬Q
No changes
0
1
1
0
Reset
1
0
0
1
Set
1
1
1/0
0/1
Undeﬁned
the value from 0 to 1 or from 1 to 0; (iv) hold value: the value does not change (see
Table3.1).
The Flip Flop circuit can be implemented on Physarum polycephalum as it is
shown in Fig.3.9. This circuit is used for designing some arithmetic circuits within
the sequential logic approach.
In sequential logic for formalizing the plasmodium propagation we can design
some reversible gates: the FEYNMAN gate (see Fig.3.10), the TOFFOLI gate (see
Fig.3.11), the FREDKIN gate (see Fig.3.12).
The main disadvantage of sequential logic gates on slime mould is that there is
an analogy between the uncertainty of plasmodium propagation and the uncertainty
of position and momentum of quanta. So, in Fig.3.8 we expect that the plasmodium
occupies the nearest attractant ﬁrst, but it can be different. Therefore we cannot
predict, what will be occupied at once and what further. This means that it is difﬁcult
to manage switching of logic variables. Nevertheless, we can use a quantum-like
reversible logic gate which does not erase any information when it acts, because
we ﬁx a transformation of the whole computation system. But we need too many
repellents.
3.3.3
Conventional Reversible Logic Gates on Slime Mould
In reversible logic gates [88], there is always a unique input associated with a unique
output and vice versa. So, any n-bit reversible gate speciﬁes how to map each distinct
bit string input of the length n into a distinct bit string output of the same length.
For example, the NOT gate is reversible: it is a 1-input and 1-output gate that simply
inverts the bit value 0 to 1 and 1 to 0 (see Table3.2). In the case of the CNOT gate
(the 2-bit controlled-NOT gate), the four possible input bit strings are 00, 01, 10,
11 and these are mapped into 00, 01, 11, and 10 respectively (see Table3.3). The
CNOT gate can be generalized up to the TOFFOLI gate also called the controlled-
controlled-NOT gate (see Table3.4) or to the FREDKIN gate (see Table3.5). It is a
universal gate, where the values of the ﬁrst two input bits control whether the third

110
3
Unconventional Computers Designed on Swarm Behaviours
(a) t = 0.
(b) t = 1.
(c) t = 2.
(d) t = 3.
Fig. 3.9 The Flip-Flop circuit. We deal with two bit strings [RQ], [QS], [SQ], [QR]. The small
black circles denote the attractants which are occupied. The small white circles denote the attractants
which are not occupied. The big grey circles denote the zones with the activated light irradiation
and the big white circles denote the zones with the deactivated light irradiation. The point is that
the plasmodium avoids illumination with certain wavelengths of visible light and this feature can
be used to repel the plasmodium from one place to another. The light irradiation is manipulated by
the observer, see [6]

3.3 Reversible Logic Gates on Swarm Behaviours
111
(a) If B = 1.
(b) If B = 0.
Fig. 3.10 The FEYNMAN gate for Physarum polycephalum, i.e. the reversible logic gate C =
XOR(A, B) with two inputs A and ¬A and two outputs C and ¬C. So, the plasmodium starts from
both A and ¬A, see [6]
(a) If B = 1 and C = 1.
(b) If B = 0 and C = 0.
Fig. 3.11 The TOFFOLI gate for Physarum polycephalum, i.e. the reversible logic gate D =
XOR(A, AND(B, C)) with two inputs A and ¬A and two outputs D and ¬D, see [6]

112
3
Unconventional Computers Designed on Swarm Behaviours
(a) If B = 1.
(b) If B = 0.
(c) If B = 1.
(d) If B = 0.
Fig. 3.12 The FREDKIN gate for Physarum polycephalum, i.e. the reversible logic gates G =
B, D = OR(AND(NOTB, A), AND(B, E)) and C = OR(AND(B, A), AND(NOTB, E)) with three
inputs A, B, E, and three outputs C, D, G, see [6]

3.3 Reversible Logic Gates on Swarm Behaviours
113
Table 3.2 The NOT gate in the matrix form
0
1
0
0
1
1
1
0
Table 3.3 The CNOT gate in the matrix form
00
01
10
11
00
1
0
0
0
01
0
1
0
0
10
0
0
0
1
11
0
0
1
0
Table 3.4 The TOFFOLI gate in the matrix form
000
001
010
011
100
101
110
111
000
1
0
0
0
0
0
0
0
001
0
1
0
0
0
0
0
0
010
0
0
1
0
0
0
0
0
011
0
0
0
1
0
0
0
0
100
0
0
0
0
1
0
0
0
101
0
0
0
0
0
1
0
0
110
0
0
0
0
0
0
0
1
111
0
0
0
0
0
0
1
0
input bit is switched, i.e. it is considered switching the third input bit if and only if
the ﬁrst two input bits are both 1. So, the TOFFOLI gate can be used as a logical gate
by changing the control bits as inputs, e.g. for the input [AB ⟨0⟩] we have the output
[AB ⟨AND(A, B)⟩], for the input [AB ⟨1⟩] we have the output [AB ⟨NAND(A, B)⟩],
for the input [⟨1⟩BC] we have the output [⟨1⟩B ⟨XOR(B, C)⟩], etc. The same sit-
uation holds for the FREDKIN gate, e.g. for the input [A ⟨0⟩C] we have the output
[A ⟨AND(A, C)⟩⟨NOT (OR(NOT C, A))⟩], etc.
Thus, each reversible gate ﬁxes a speciﬁcation for how to permute the 2n possible
bitstringsinputsexpressibleinnbits.InTables3.2,3.3,3.4and3.5,ann-bitreversible
gate is considered an array whose rows and columns are indexed by the 2n possible bit
strings expressible in n bits. The (i, j)-th element of this array has the truth value 1 if
and only if the input bit string corresponding to the i-th row is mapped to the output
bit string corresponding to the j-th column. In this way we obtain a permutation
matrix. So, logic gates combinations can be deﬁned within a permutation group as
multiplication of matrices.
The matrix of an n-bit circuit is called well-formed if it satisﬁes the following
two conditions: (i) matrix elements can only be zeros or ones; (ii) each column or

114
3
Unconventional Computers Designed on Swarm Behaviours
Table 3.5 The FREDKIN gate in the matrix form
000
001
010
011
100
101
110
111
000
1
0
0
0
0
0
0
0
001
0
1
0
0
0
0
0
0
010
0
0
1
0
0
0
0
0
011
0
0
0
1
0
0
0
0
100
0
0
0
0
1
0
0
0
101
0
0
0
0
0
0
1
0
110
0
0
0
0
0
1
0
0
111
0
0
0
0
0
0
0
1
Fig. 3.13 The three bit
strings which are represented
by column vectors
(a) [000] =
1
0
0
0
0
0
0
0
(b) [001] =
0
1
0
0
0
0
0
0
(c) [010] =
0
0
1
0
0
0
0
0
(f) [101] =
0
0
0
0
0
1
0
0
(g) [110] =
0
0
0
0
0
0
1
0
(h) [111] =
0
0
0
0
0
0
0
1
row has exactly one element with a value of 1, the other values are 0. This set of
well-formed matrices is a group, i.e. it is closed under the matrix multiplication ·
and the operation −1, and it contains the unit—an n-bit identity gate (2n × 2n identity
matrix).
For example, the inputs of the TOFFOLI gate can be represented by a column
vector consisting of 23 = 8 slots, containing only once the number 1. So, each column
vector corresponds to a three bit string, see Fig.3.13.
Then the vector-matrix multiplication gives a transformation from an input to an
output, for example:

3.3 Reversible Logic Gates on Swarm Behaviours
115
Table 3.6 The Full Adder with three inputs Ci, Ai, and Bi and two outputs Ci+1 and Si. The input
Ci is called carry-in and the output Ci+1 is called carry-out. Sometimes Ci is denoted by Cin and
Ci+1 is denoted by Cout. Ci+1 is needed, because by adding two binary numbers of the length i, we
can obtain a binary number of the length i + 1, e.g. by adding 1 + 1 we obtain 10. According to
this circuit, Si = XOR(Ci, Ai, Bi) and Ci+1 = AND(Ai, Bi) + AND(Ci, XOR(Ai, Bi)), as a result
[Ci+1Si] = [Ai] + [Bi].
Ci
Ai
Bi
Ci+1
Si
0
0
0
0
0
0
0
1
0
1
0
1
0
0
1
0
1
1
1
0
1
0
0
0
1
1
0
1
1
0
1
1
0
1
0
1
1
1
1
1
Fig. 3.14 The Full Adder circuit proposed in [89] and constructed by using ﬁve FREDKIN gates,
where Pi = XOR(Ai, Bi), see [6]
TOFFOLI · [000] =
⎛
⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎝
1 0 0 0 0 0 0 0
0 1 0 0 0 0 0 0
0 0 1 0 0 0 0 0
0 0 0 1 0 0 0 0
0 0 0 0 1 0 0 0
0 0 0 0 0 1 0 0
0 0 0 0 0 0 0 1
0 0 0 0 0 0 1 0
⎞
⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎠
·
⎛
⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎝
1
0
0
0
0
0
0
0
⎞
⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎠
=
⎛
⎜⎜⎜⎜⎜⎜⎜⎜⎜⎜⎝
1
0
0
0
0
0
0
0
⎞
⎟⎟⎟⎟⎟⎟⎟⎟⎟⎟⎠
= [000].
By appealing to some reversible gates we can construct arithmetic circuits such as
the Full Adder (see Table3.6). The Full Adder computes the sum bit Si and the carry
output Ci+1 based on addend inputs Ai and Bi and carry input Ci at time t = i, i +
1, . . .. The output expressions for a ripple carry adder are (1) Si = XOR(Ai, Bi, Ci)
(2) Ci+1 = AiBi + BiCi + CiAi (i = 0, 1, 2, . . .). The Full Adder can be designed by
using FREDKIN gates (see Fig.3.14).
On the Physarum polycephalum motions, logic variables of reversible gates are
expressed by attractants, too. So, a string of the length n is a sequence of n attrac-
tants. The quantum-style NOT gate on slime mould is pictured in Fig.3.15. In the

116
3
Unconventional Computers Designed on Swarm Behaviours
Fig. 3.15 The NOT gate on slime mould, where repellents are denoted by triangles, attractants by
circles, thereby black circles are attractants occupied by the plasmodium, white circles are attractant
which are not occupied by the plasmodium, black triangles are activated repellents, white triangles
are deactivated repellents: a mapping 1 into 1, which is 0; b mapping 0 into 1, which is 1; c mapping
1 into 0, which is 1; d mapping 0 into 0, which is 0, see [6]
CNOT gate, we implement Table3.3 and observe the four possible directions of plas-
modium propagation (see Fig.3.16), corresponding to the meaning 1 of Table3.3.
The transformation of 00 into 00, etc., which gives 1 (see Table3.3), means that the
plasmodium is propagated in both directions, where the two strings with the same
meaning [00] are located (i.e. [ab] and [cd]). In the same way, the quantum-style
TOFFOLI gate and the quantum-style FREDKIN gate on Physarum are designed.
Some other logic circuits for the slime mould propagation are proposed in [90].

3.3 Reversible Logic Gates on Swarm Behaviours
117
Fig. 3.16 The CNOT gate on slime mould, where black circles are attractants occupied by the
plasmodium, white circles are attractant which are not occupied by the plasmodium, black triangles
are activated repellents, white triangles are deactivated repellents: a the string [ab] is transformed
into the string [cd] and vice versa; b mapping 00 into 00; c mapping 01 into 01; d mapping 11 into
10; e mapping 10 into 11. The line of repellents can be built up as a barrier, see [6]

118
3
Unconventional Computers Designed on Swarm Behaviours
3.3.4
Unconventional Reversible Logic Gates on Swarm
Behaviours
3.3.4.1
Non-linear Permutations of Slime Mould
Let us recall what permutation group is. Assume that G is a set of various motions
(actions). On this set we can deﬁne a linear composition: if x, y are two motions in
G , then the motion x · y is a result of their composition. Suppose, the operation x · y
satisﬁes the law of associativity, G contains hereafter the unit member e and inverse
member x−1. The unit member means an identity motion, when nothing moves. The
inverse member x−1 of x is a motion which is opposite to x. Obviously, it means that
e · x = x · e = x and x−1 · x = x · x−1 = e. So, G is a group and every motion in G
causes the setting of linear sequences. For example, the equilateral triangle has the
three motions to come back to its place, i.e. the three rotations by 120◦, 240◦, and
360◦around the center of the triangle mapping every vertex (a1, a2, a3) of the triangle
to another one (to a2, a3, a1, respectively). Indeed, for describing all motions of the
triangle we have x1 · x2 · x3 = e, where xi is the i-th rotation by 120◦, 240◦, or 360◦,
i = 1, 2, 3.
If X is a set (e.g. it is the set of vertexes), then a permutation group may be deﬁned
as a group homomorphism h from G to the symmetric group on X . The motion assigns
a permutation of X to each element of G in such a way that the permutation of X
assigned to: the identity element of G is the identity transformation of X (e.g. the
identity rotation of the equilateral triangle); a product g · h of two elements of G is
the composition of the permutations assigned to g and h.
Permutation groups play an important role in reversible logic gates, because the
lattercanbedeﬁnedbypermutationmatriceswithagroupoperationofmultiplication.
In this section, we are going to consider a strong extension of permutation
groups, called non-linear permutation groups, for designing absolutely new forms
of reversible logic gates. For more details about formal-logical and game-theoretic
aspects of non-linear permutation group theory, please see [4, 91].
In the logic gates of Figs.3.15 and 3.16, each next step of plasmodium is deter-
mined by its previous steps. In other words, the plasmodium chooses a direction of
motions and its past choices determines its next choices. However, it is not so natural
for the plasmodium behaviour, because the plasmodium can change its past decisions
all the time. In order to avoid the plasmodium freedom and to determine its motions,
we need to use too many repellents (see Figs.3.15 and 3.16).
Usually, the plasmodium occupies the whole region in many directions simul-
taneously. Let us assume that all attractants stand in line (see Fig.3.17). So, the
plasmodium can move only to one of the two possible directions: either up or down.
Suppose that we do not have repellents at all. Let us consider differences between
the NOT gate of Fig.3.15 and the logic device of Fig.3.17. We can try to deﬁne the
plasmodium motions as a group G of actions. Each attractant will be denoted by a
member of G in the following way: (i) all attractants above are enumerated from a0
to an and all attractants below are enumerated from b0 to bn; (ii) each bi is equal a−1
i

3.3 Reversible Logic Gates on Swarm Behaviours
119
(this means that each ai is equal b−1
i ), i = 0, . . . , n; (iii) the member of G holds if
it is occupied by the plasmodium. Hence, each motion ai is opposite to the motion
bi. The linear composition x · y at time t is deﬁned for all x, y ∈G as follows: x · y
occurs at time t if and only if both x and y are occupied by the plasmodium at this
time.
The group G can be used for designing logic circuits on plasmodia. Let Ai, Aj, . . .
contain not more than the same n members x, y ∈G and each Ai represent a string
of G . Then the multiplication of Ai, Aj, . . . gives a logic circuit. We can understand
strings of G as matrices such as ones given in Tables3.2, 3.3, 3.4 and 3.5. In this case
matrix multiplication gives a transformation from an input to an output.
Now, let us answer the question, whether G is a group indeed. To be a group,
the following assumption has to hold on G : the plasmodium chooses a direction of
motions (up, down or up and down simultaneously) just at its start point. It cannot
change its strategy at the points x, y, x−1, y−1. Nevertheless, this assumption is very
strong and to realize it we must appeal to repellents, which block any come-back of
plasmodium.
Thus, the plasmodium can permanently change its decisions at the points x, y,
x−1, y−1 of Fig.3.17. In this case, x can become opposite to y−1 (i.e. y−1 to x as
well) and y can become opposite to x−1 (x−1 to y), although ﬁrst x was opposite
to x−1 and y to y−1. Let us assume that the plasmodium changes its choices all
the time at all points. Then we obtain a strong extension of the group. Assume, G
has p −1 atoms a0, a1, …, ap−2. Then we can obtain all the p-adic streams over
G : G ω = {σ : N →G }. Each stream contains the history of decision changes. For
instance, (i) let the stream x = x · y−1 mean that the plasmodium comes back from
x to y−1; (ii) let y−1 = y−1 · x mean that the plasmodium comes back from y−1 to x;
(iii) y = y · x−1 that the plasmodium comes back from y to x−1; (iv) x−1 = x−1 · y
that the plasmodium comes back from x−1 to y, etc. In other words, we have several
inﬁnite streams as additional motions in G ∪G ω for Fig.3.17 like that:
x · y−1 · x · y−1 · x · y−1 · · · · ;
y−1 · x · y−1 · x · y−1 · x · · · · ;
y · x−1 · y · x−1 · y · x−1 · · · · ;
x−1 · y · x−1 · y · x−1 · y · · · · .
Furthermore, the plasmodium can move back at points x and y−1 (respectively,
at points y and x−1) simultaneously. This motions will be denoted by (}x, y−1{)
(respectively, by (}y, x−1{)), where x = x · y−1 and y−1 = y−1 · x (respectively, y =
y · x−1 and x−1 = x−1 · y). The objects (}x, y−1{), (}y, x−1{) will be called wave sets.
They do not satisfy the set-theoretic foundation axiom [92]. These non-well-founded
objects (}x, y−1{) and (}y, x−1{) are two additional members of G ∪G ω.
The informal meaning of wave sets is that any wave set contains just streams and
we cannot say in accordance with which stream the wave set will behave. We face an

120
3
Unconventional Computers Designed on Swarm Behaviours
Fig. 3.17 The linear group {x, y, x−1, y−1} on Physarum polycephalum at t = 1, black circles are
attractants occupied by the plasmodium, white circles are attractant which are not occupied: a the
plasmodium motion is expressed by the string y · y−1, which gives e; b the plasmodium motion is
expressed by the string x−1 · y−1; c the plasmodium motion is expressed by the string x · y; d the
plasmodium motion is expressed by the string x−1, see [6]
uncertainty of numbers of inputs and outputs. The gate can behave like any stream
it contains but there is an uncertainty how exactly.
Thegateas waveset includes as manyversions of behaviour of thewholesystemas
possible. In other words, the wave set is the greatest non-well-founded set containing
alternative solutions. In different contexts, the wave set behaves differently, that is
we apply a different solution contained in this wave set. This application is a clue
for an appropriate context.
Thus, the composition of NOT gates pictured in Fig.3.15 gives a permutation
group G . However, the composition of logic devices of Fig.3.17 consisting just of
attractants standing in line is not a conventional permutation group. This new group
G ∪G ω will be called non-linear permutation group. This group contains inﬁnite
streams and wave sets of radius 2, i.e. wave sets consisting only of two streams.

3.3 Reversible Logic Gates on Swarm Behaviours
121
Fig. 3.18 The non-linear permutation group G ∪G ω on Physarum polycephalum at t = 1, where
black circles are attractants occupied by the plasmodium and white circles are attractant which are
not occupied. At each point b1, b3, b5, d1, d4, f1, f3, f5 the plasmodium can make from one to four
decisions, see [6]
In the same way, we can show that the composition of CNOT gates pictured
in Fig.3.16 gives a permutation group. Nevertheless, if we delete all repellents in
the CNOT gate, we obtain a new logic device pictured in Fig.3.18 that is not a
conventional permutation group, too. This device means that the plasmodium can
change its decisions at the points b1, b3, b5, d1, d4, f1, f3, f5. At each of this point, we
can obtain an appropriate wave set of radius n, where 2 ≤n ≤4, i.e. this wave set
can include from 2 to 4 inﬁnite streams. For example, if the plasmodium changed
its choices at b1 and decided to come back in all four possible directions, then we
have the wave set (}a0, b0, b2, c0{). If the plasmodium changed its choices at d1 and
decided to come back only in the two possible directions towards d0 and c0, then we
have the wave set (}d0, c0{), etc.
The operations over G ∪G ω are deﬁned in Sect. 8.2.3. They can be used for
designing logic circuits without repellents or barriers if the group multiplication is
understood as a composition of circuits.
A non-linear (non-well-founded) composition in non-linear permutation group
sets up not only sequences of symbols, deﬁned by induction, but also their inﬁnite
streams and wave sets. We can state that for any simple motions x, y ∈G there

122
3
Unconventional Computers Designed on Swarm Behaviours
exists the absolute motion (hyperunit) e such that for any simple motions x, y ∈G ,
x · e = y · e = e · x = e · y = e and e · e = e · e = e (see Sect. 8.2.3).
As we see, the absolute motion gets all motions equal to itself. Hence, the absolute
motion for any members of G determines the limits for any motions, i.e. it is the
greatest possible motion in G . For the absolute member there is no inverse motion,
i.e. e−1 · e = e · e−1 = e.
In multiplicative groups the absolute member plays the role of zero, but we can
divide by zero as e · e−1 = e. In additive groups the absolute member plays the role
of inﬁnity, since x + e = y + e = e + x = e + y = e. About formal properties of
non-linear groups please see Proposition 8.1. One more property:
Proposition 3.2 Each group G where basic operations (· and −1) are extended to
operations on wave sets is closed over the union of wave sets.
Proof Let G contains {a, b, c, . . . }. By assumption, any non-empty subset m ⊆G
may be presented as wave set f (m) such that f (m) is the greatest set containing
all members of m in the form of streams. Then the function f forms a natural
order: f (m1) ⊆f (m2) ⊆f (m3) ⊆· · · ⊆f (G ), where f (G ) is a maximal wave set
that includes all members of G . By properties of wave sets, we ﬁnd f (m1), f (m2),
f (m3), …, f (G ) ∈G and they are closed over union.
□
Thus, in this chapter, I have shown (i) how to program the swarm behaviour on the
example of Physarum polycephalum by using the process calculus (on the basis of
this calculus we have designed an object-oriented language for simulating the slime
mould) and (ii) how to implement sequential logic gates and reversible logic gates
the swarm behaviour on the example of Physarum polycephalum behaviours. In the
meanwhile, we can erase information in sequential logic because of uncertainty in
the direction of plasmodium propagation. We can consider the standard motions of
plasmodium in Figs.3.17 and 3.18 as unconventional logic gates designed within
an appropriate non-linear permutation group. In this case, we can avoid repellents
as such. The logic gates of Figs.3.9, 3.10, 3.11, 3.12, 3.13, 3.14, 3.15 and 3.16
need repellents to implement the standard permutation groups. Hence, the plasmod-
ium without repellents demonstrates the more sophisticated behaviour, which can
be described mathematically in strong extensions of standard groups of motions.
It means that without repellents behaviourism as the idea of complete control of
behaviours cannot be valid.
References
1. Schumann, A.: Kabbalistic-leibnizian automata for simulating the universe. In: Katz, E. (ed.)
Molecular and Supramolecular Information Processing: From Molecular Switches to Logic
Systems, pp. 259–280. Wiley-VCH, Weinheim (2012)
2. Schumann, A.: Proof-theoretic cellular automata as logic of unconventional computing. Int. J.
Unconven. Comput. 8(3), 263–280 (2012)

References
123
3. Schumann, A.: Unconventional logic for massively parallel reasoning. In: The 6th International
Conference on Human System Interaction (HSI), June 2013, pp. 298–305. IEEE Xplore (2013)
4. Schumann, A.: Non-linear permutation groups on Physarum polycephalum. In: The 2014 2nd
International Conference on Systems and Informatics (ICSAI 2014), pp. 246–251. Shanghai
(2014)
5. Schumann, A.: Reversible logic gates on Physarum polycephalum. AIP Conf. Proc. 1648(1),
580011 (2015). https://doi.org/10.1063/1.4912819
6. Schumann, A.: Conventional and unconventional reversible logic gates on Physarum poly-
cephalum. Int. J. Parallel Emerg. Distrib. Syst. 32(2), 218–231 (2017). https://doi.org/10.1080/
17445760.2015.1068775
7. Schumann, A., Adamatzky, A.: Towards semantical model of reaction-diffusion computing.
Kybernetes 38(9), 1518–1531 (2009)
8. Schumann, A., Adamatzky, A.: Logical modelling of Physarum polycephalum. Analele Uni-
versitatii de Vest, Timisoara, Seria Matematica, Informatica XLVIII 3, 175–190 (2010)
9. Schumann, A., Adamatzky, A.: Physarum spatial logic. New Math. Nat. Comput. 7(3), 483–498
(2011)
10. Schumann, A., Akimova, L.: Simulating of schistosomatidae (trematoda: Digenea) behavior by
Physarum spatial logic. In: Annals of Computer Science and Information Systems, Proceedings
of the 2013 Federated Conference on Computer Science and Information Systems, vol 1. pp.
225–230. IEEE Xplore (2013)
11. Schumann, A., Akimova, L.: Process calculus and illocutionary logic for analyzing the behavior
of schistosomatidae (trematoda: Digenea). In: Pancerz, K., Zaitseva, E. (eds.) Computational
Intelligence, Medicine and Biology: Selected Links, pp. 81–101. Springer International Pub-
lishing, Cham (2015)
12. Schumann, A. (ed.): Judaic Logic. Gorgias Press (2010)
13. Schumann, A. (ed.): Modern Review of Judaic Logic. Special Issue of History and Philosophy
of Logic (2011)
14. Leibniz, G.: Zur allgemeinen charakteristik. In: Hauptschriften zur Grundlegung der Philoso-
phie. Philosophische Werke, vol. 1. Felix Meiner, Hamburg (1966)
15. Adamatzky, A.: Reaction-diffusion algorithm for constructing discrete generalized voronoi
diagram. Neural Netw. World 6, 635–643 (1994)
16. Adamatzky, A., De Lacy Costello, B.: Experimental logical gates in a reaction-diffusion
medium: The xor gate and beyond. Phys. Rev. E 66, 46–112 (2002)
17. Adamatzky, A., De Lacy Costello, B., Asai, T.: Reaction-Diffusion Computers. Elsevier (2005)
18. Adamatzky, A., Wuensche, A.: Computing in spiral rule reaction-diffusion hexagonal cellular
automaton. Complex Syst. 16, 4 (2007)
19. Adamatzky, A., Wuensche, A., Costello, B.D.L.: Glider-based computation in reaction-
diffusion hexagonal cellular automata. Chaos, Solitons Fractals 27, 287–295 (2006)
20. Margolus, N.: Physics-like models of computation. Physica D 10, 81–95 (1984)
21. Turing, A.M.: The chemical basis of morphogenesis. Philos. Trans. Royal Soc. Lond. Series B
Biol. Sci. 237(641), 37–72 (1952)
22. Adamatzky,A.,deLacyCostello,B.,Dittrich,P.,Gorecki,J.,Zauner,K.:Onlogicaluniversality
of Belousov-Zhabotinsky vesicles. Int. J. Gen. Syst. 43(7), 757–769 (2014). https://doi.org/10.
1080/03081079.2014.921000
23. Belousov, L.V.: Synergetics and Biological Morphogenesis, pp. 204–208. Springer, Berlin,
Heidelberg (1984)
24. Boerlijst, M.C., Lamers, M.E., Hogeweg, P.: Evolutionary consequences of spiral waves in a
host–parasitoid system. Proc. Royal Soc. Lond. B: Biol. Sci. 253(1336), 15–18 (1993)
25. Adamatzky, A.: Computing in Nonlinear Media and Automata Collectives. Institute of Physics
Publishing (2001)
26. Feynman, R.P.: Simulating physics with computers. Int. J. Theor. Phys. 21(6–7), 467–488
(1982)
27. Hennessy, M., Milner, R.: Algebraic laws for nondeterminism and concurrency. JACM 32(1),
137–161 (1985)

124
3
Unconventional Computers Designed on Swarm Behaviours
28. Berry, G., Boudol, G.: The chemical abstract machine. Theor. Comput. Sci. 96, 217–248 (1992)
29. Boccara, N.: Modeling Complex Systems. Springer (2003)
30. Chopard, B., Droz, M.: Cellular Automata Modeling of Physical Systems. Cambridge Univer-
sity Press (2005)
31. Ilachinski, A.: Cellular Automata: A Discrete Universe. World Scientiﬁc (2001)
32. Wolfram, S.: Universality and complexity in cellular automata. Physica D 10, 1–35 (1984)
33. de Lacy Costello., B.P.J., Adamatzky, A., Ratcliffe, N.M., Zanin, A., Purwins, H.G., Liehr, A.:
The formation of voronoi diagrams in chemical and physical systems: experimental ﬁndings
and theoretical models. Int. J. bifurc. chaos 14, 2187–2210 (2004)
34. Gordon, A.D.: Bisimilarity as a theory of functional programming. Theor. Comput. Sci. 228,
5–47 (1999)
35. Fiore, M.P.: A coinduction principle for recursive data types based on bisimulation. In: Pro-
ceedings 8th Conferences Logic in Computer Science (LICS’93), pp. 110–119 (1993)
36. Howe, D.J.: Proving congruence of bisimulation in functional programming languages. Inf.
Comput. 124 (1996)
37. Pavlovi´c, D., Escardó, M.H.: Calculus in coinductive form. In: Proceedings of the 13th Annual
IEEE Symposium on Logic in Computer Science, pp. 408–417 (1998)
38. Jacobs, B., Rutten, J.: A tutorial on (co)algebras and (co)induction. EATCS Bull. 62, 222–259
(1997)
39. Rutten, J.J.M.M.: Processes as terms: non-well-founded models for bisimulation. Math. Struct.
Comput. Sci. 2(3), 257–275 (1992)
40. Rutten, J.J.M.M.: A coinductive calculus of streams. Math. Struct. Comput. Sci. 15(1), 93–147
(2005)
41. Rutten, J.J.M.M.: Behavioral differential equations: a coinductive calculus of streams,
automata, and power series. Theor. Comput. Sci 308, 1–53 (2003)
42. Rutten, J.J.M.M.: Universal coalgebra: a theory of systems. Theor. Comput. Sci. 249(1), 3–80
(2000)
43. Keller, R.M.: Formal veriﬁcation of parallel programs. Commun. ACM 19(7), 371–384 (1976)
44. Nielsen, M., Rozenberg, G., Thiagarajan, P.S.: Elementary transition systems and reﬁnement.
Acta Inform. 29(6), 555–578
45. Nielsen, M., Rozenberg, G., Thiagarajan, P.S.: Elementary transition systems. Theor. Comput.
Sci. 96(1), 3–33 (1992)
46. Henzinger, T.A., Manna, Z., Pnueli, A.: Timed transition systems. In: de Bakker, J., Huizing, C.,
de Roever, W., Rozenberg, G. (eds.) Real-Time: Theory in Practice. Lecture Notes in Computer
Science, vol. 600, pp. 226–251. Springer, Berlin Heidelberg (1992)
47. Schumann, A., Pancerz, K.: Timed transition system models for programming Physarum
machines: extended abstract. In: L. Popova-Zeugmann (ed.) Proceedings of the Workshop
on Concurrency, Speciﬁcation and Programming (CS&P’2014), pp. 180–183. Chemnitz, Ger-
many (2014)
48. de Vink, E.P., Rutten, J.J.M.M.: Bisimulation for probabilistic transition systems: a coalgebraic
approach. Theor. Comp. Sci. 221, 271–293 (1999)
49. Brotherston, J.: Cyclic proofs for ﬁrst-order logic with inductive deﬁnitions. In: 2005 Beckert,
B. (ed.) TABLEAUX of LNAI, vol. 3702, pp. 78–92. Springer (2005)
50. Brotherston, J.: Sequent calculus proof systems for inductive deﬁnitions. Ph.D. thesis, Univer-
sity of Edinburgh (2006)
51. Santocanale, L.: A calculus of circular proofs and its categorical semantics. In: Proceedings of
FoSSaCS 2002, LNCS 2303, pp. 357–371. Springer-Verlag, Grenoble (2002)
52. Dourvas, N.I., Sirakoulis, G.C., Adamatzky, A.: Cellular automaton Belousov-Zhabotinsky
model for binary full adder. Int. J. Bifurc. Chaos 27(6), 1–14 (2017)
53. Adamatzky, A.: Physarum Machines: computers from slime mould. World Scientiﬁc, Series
on Nonlinear Science. Series A (2010)
54. Schumann, A.: Towards slime mould based computer. New Math. Nat. Comput. 12(2), 97–111
(2016). https://doi.org/10.1142/S1793005716500083

References
125
55. Tsuda, S., Jones, J., Adamatzky, A.: Towards Physarum engines. Appl. Bionics Biomech. 9,
221–240 (2012)
56. Milner, R.: Communicating and Mobile Systems: the π-calculus. Cambridge University Press,
Cambridge (1999)
57. Dam, M.: Proof systems for pi-calculus logics. In: de Queiroz, R. (ed.) Logic for Concurrency
and Synchronisation, pp. 145–212. Kluwer (2003)
58. Winskel, G., Nielsen, M.: Models for concurrency. In: Abramsky, S., Gabbay, D.M., Maibaum,
T.S.E. (eds.) Handbook of Logic in Computer Science, vol. 4, pp. 1–148. Oxford University
Press (1995)
59. Caires, L., Cardelli, L.: A spatial logic for concurrency: Part I. Inf. Comput. 186(2), 194–235
(2003)
60. Caires, L., Cardelli, L.: A spatial logic for concurrency: Part II. Theor. Comput. Sci. 322(3),
517–565 (2004)
61. Calcagno, C., Cardelli, L., Gordon, A.: Deciding validity in a spatial logic for trees. J. Funct.
Progr. 15, 543–572 (2005)
62. Cardelli, L., Gardner, P., Ghelli, G.: A spatial logic for querying graphs. In: P. Widmayer (ed.)
Proc. ICALP’02, pp. 597–610. Springer (2002)
63. Dimonte, A., Berzina, T., Erokhin, V.: Basic transitions of Physarum polycephalum. In: 2015
Federated Conference on Computer Science and Information Systems, FedCSIS 2015, Lódz,
Poland, Sept 13-16, pp. 599–606. https://doi.org/10.15439/2015F237
64. Pancerz, K., Schumann, A.: Principles of an object-oriented programming language for
Physarum polycephalum computing. In: Proceedings of the 10th International Conference
on Digital Technologies (DT’2014), pp. 273–280. Zilina, Slovak Republic (2014)
65. Pancerz, K., Schumann, A.: Some issues on an object-oriented programming language for
Physarum machines. In: Bris, R., Majernik, J., Pancerz, K., Zaitseva, E. (eds.) Applications of
Computational Intelligence in Biomedical Technology, Studies in Computational Intelligence,
vol. 606, pp. 185–199. Springer International Publishing, Switzerland (2016)
66. Schumann, A., Pancerz: Physarumsoft—a software tool for programming Physarum machines
and simulating Physarum games. In: Ganzha, M., Maciaszek, L., Paprzycki, M., (eds.) Pro-
ceedings of the 2015 Federated Conference on Computer Science and Information Systems
(FedCSIS’2015), pp. 607–614. Lodz, Poland (2015)
67. Schumann, A., Pancerz, K.: Towards an object-oriented programming language for Physarum
polycephalum computing. In: Szczuka, M., Czaja, L., Kacprzak, M. (eds.) Proceedings of
the Workshop on Concurrency, Speciﬁcation and Programming (CS&P’2013), pp. 389–397.
Warsaw, Poland (2013)
68. Schumann, A., Pancerz, K.: Towards an object-oriented programming language for Physarum
polycephalum computing: A Petri net model approach. Fundam. Inf. 133(2–3), 271–285 (2014)
69. Schumann, A., Pancerz, K.: Petri net models of simple rule-based systems for programming
Physarum machines: Extended abstract. In: Suraj, Z., Czaja, L. (eds.) Proceedings of the 24th
International Workshop on Concurrency, Speciﬁcation and Programming (CS&P’2015), vol. 2,
pp. 155–160. Rzeszow, Poland (2015)
70. Schumann, A., Pancerz, K.: Physarumsoft: an update based on rough set theory. AIP Conf.
Proc. 1863(1), 360,005 (2017). https://doi.org/10.1063/1.4992534
71. Craig, I.: Object-Oriented Programming Languages: Interpretation. Springer, London (2007)
72. Searle, J.R.: Speech acts; an essay in the philosophy of language. Cambridge University Press,
Cambridge (1969)
73. Searle, J.R.: Expression and meaning: studies in the theory of speech acts. Cambridge Univer-
sity Press, Cambridge (1979)
74. Searle, J.R., Vanderveken, D.: Foundations of Illocutionary Logic. Cambridge University Press,
Cambridge (1984)
75. Whiting, J.G., de Lacy Costello, B.P., Adamatzky, A.: Slime mould logic gates based on
frequency changes of electrical potential oscillation. Biosystems 124, 21–25 (2014)
76. Adamatzky, A., Schubert, T.: Slime mold microﬂuidic logical gates. Mater. Today 17(2), 86–91
(2014)

126
3
Unconventional Computers Designed on Swarm Behaviours
77. Möllenstedt, G., Jönsson, C.: Elektronen-mehrfachinterferenzen an regelmaessig hergestellten
feinspalten. Zeitschrift fuer Physik A 155(4), 472–474 (1959)
78. Khrennikov, A., Schumann, A.: Quantum non-objectivity from performativity of quantum
phenomena. Phys. Scr. T163 (2014)
79. Jones, J.D.: Towards lateral inhibition and collective perception in unorganised non-neural sys-
tems. In: Pancerz, K., Zaitseva, E. (eds.) Computational Intelligence. Selected Links. Springer,
Medicine and Biology (2015)
80. Barwise, J., Etchemendy, J.: The Liar. Oxford University Press, New York (1987)
81. Barwise, J., Moss, L.: Vicious Circles. Stanford (1996)
82. Barwise, J., Moss, L.: Hypersets. Springer, New York (1992)
83. Jones, J.D., Adamatzky, A.: Towards Physarum binary adders. Biosystems 101(1), 51–58
(2010)
84. Adamatzky, A.: Slime mould logical gates: exploring ballistic approach. Appl. Tools Tech.
Road Exascale Comput. 1, 41–56 (2010)
85. Mayne, R., Adamatzky, A.: Slime mould foraging behaviour as optically coupled logical opera-
tions. Int. J. Gen. Syst. 44(3), 305–313 (2015). https://doi.org/10.1080/03081079.2014.997528
86. Vasyukevich, V.: Asynchronous Operators of Sequential Logic. Springer, Berlin, Heidelberg
(2011)
87. Vasyukevich, V.: Asynchronous sequences decoding. ACCS J. 41(2), 93–99 (2007)
88. Toffoli, T.: Reversible Computing. Tech. memo MIT/LCS/TM-151, MIT (1980)
89. Bruce, J.W., Thornton, M.A., Shivakumaraiah, L., Kokate, P.S., Li, X.: Efﬁcient adder circuits
based on a conservative reversible logic gate. In: Proceeding of the IEEE Computer Society
Annual Symposium on VLSI, pp. 83–88. IEEE, Pittsburgh, Pennsylvania (2002)
90. Schumann, A., Pancerz, K., Jones, J.: Towards logic circuits based on Physarum polycephalum
machines: The ladder diagram approach. In: Cliquet Jr A., Plantier, G., Schultz, T., Fred, A.,
Gamboa, H. (eds.) Proceedings of the International Conference on Biomedical Electronics and
Devices (BIODEVICES’2014), pp. 165–170. Angers, France (2014)
91. Schumann, A.: Towards context-based concurrent formal theories. Parallel Process Lett 25,
1540008 (2015)
92. Aczel, A.: Non-Well-Founded Sets. Stanford University Press (1988)

Chapter 4
Conventional and Unconventional
Automata on Swarm Behaviours
In this chapter, I try to formulate swarms as labelled transition systems with the same
set of labels (events or actions): direction, splitting, fusion, repelling. Then I show that
these labelled transition systems can implement Kolmogorov-Uspensky machines,
but with a low accuracy because of emergent patterns which occur if we have many
states of appropriatetransitionsystem. ThenI proposea p-adicarithmeticandlogicto
formalize emergent patterns of swarms. To sum up, I offer a general logical approach
to swarm intelligence. See [1–6].
4.1
Formalizations of Swarm Transitions
4.1.1
From Emergent Computing to Swarm Computing
In bio-inspired computations there are many researches focused on swarm intelli-
gence and different formalizations of swarm behaviours [7–9]. An intelligent swarm
behaviour is demonstrated not only by animal groups, but also by groups of insects or
even bacteria. For example, it was discovered experimentally that swarms of social
insects [10] can solve complex computational problems in searching for food and in
transporting sources and information due to massive-parallel behaviour with labour
divisions.
The majority of researches in swarm intelligence are concentrated on algorithms in
simulating and modelling swarms: the Particle Swarm Optimization (PSO) [11], the
Bacterial Foraging Optimization Algorithm (BFOA) [12], the Artiﬁcial Bee Colony
(ABC) [13], the Cuckoo Optimization Algorithm (COA) [14], the Social Spider Opti-
mization (SSO) [15], the Ant Colony Optimization (ACO) [16], etc. These mod-
els combine different mathematical tools including probability theory to propose
© Springer International Publishing AG, part of Springer Nature 2019
A. Schumann, Behaviourism in Studying Swarms: Logical Models of Sensing
and Motoring, Emergence, Complexity and Computation 33,
https://doi.org/10.1007/978-3-319-91542-5_4
127

128
4
Conventional and Unconventional Automata on Swarm Behaviours
artiﬁcial swarms. In this chapter, I try to consider swarm intelligence as a kind of
computation.
In conventional logic circuits some electrical properties of transistors are used.
In particular, the voltage is managed to be in only one of the two states: high (if the
voltage runs the range from 2.8 to 5.0 V) or low (if the voltage is in the range from
0 to 0.8 V). The high state of voltage means ‘1’ or logical true. The low state means
‘0’ or logical false. Then the power of the circuit, P, is expressed as follows:
P = Pstatic · Pdynamic,
where Pstatic = VCC · ICC and Pdynamic = [(C pd + CL) · V 2
CC · f ] · NSW, VCC is a
supply voltage (V), ICC is a power supply current (A), C pd is a power dissipation
capacitance (F), CL is an external load capacitance (F), f is an operating frequency
(Hz), NSW is a total number of outputs switching.
The main idea of electric devices based on electrical properties of transistors is
that the Boolean logic can be implemented with a very high accuracy. In this logic any
complex logic expression is considered a composition of logical atoms (i.e. of simple
logical propositions). In other words, there are no emergent phenomena. Let us recall
that the emergence is detected, when new patterns of a highly structured collective
behaviour appear and these patterns cannot be reduced to a linear composition of
simple subsystems [17].
Notably, emergent phenomena are key phenomena in all self-organizing systems
such as collective intelligent behaviours of animal groups: ﬂocks of birds, colonies
of ants, schools of ﬁsh [18], swarms of bees, etc. Emergence is observed in the econ-
omy as well: macroeconomic ﬂuctuations, trafﬁc jams, hierarchy of cities, motion
picture industry and mass protest behaviour [17]. There are attempts to formalize the
notion of emergence by algorithmic complexity theory. However, the Kolmogorov
complexity function is not computable. There is no way to deﬁne the emergence
by minimum linear compositions. Wolfram proposed a more useful approach in a
mathematical deﬁnition of emergency [19]. He showed that the behaviour of one-
dimensional cellular automata is divided into the following four cases:
• there are limit points of the system, i.e. we obtain a homogeneous state of the
system;
• there are limit cycles of the system, i.e. we obtain separated periodic structures;
• there are chaotic attractors, i.e. we face chaotic patterns;
• there are complex localized structures.
In the last case we deal with an emergent phenomenon in the true sense. On the basis
of the Wolfram’s approach the so-called emergent computing has developed. In this
kind of computing (i) the computation process is distributed over a set of parallel
and autonomous processing units; (ii) each unit computes locally and can interact
directly only with a small number of other units; (iii) there is a consistency among
the processing units; (iv) there are more outputs, than inputs.
One of the most studied instances of emergent computing is represented by swarm
computing [7, 11]. This computing is based on labor division in animal groups. Any

4.1 Formalizations of Swarm Transitions
129
swarm as a result of collective behaviour, such as birds ﬂocking or ﬁsh schooling,
is a self-organizing system, where, on the one hand, each unit responds to local
stimuli individually and, on the other hand, all together they accomplish a global
task (transporting, eating, self-protecting, etc.).
There were proposed many swarm algorithms to simulate the behaviour of insect
or animal groups [11–16]. In the Particle Swarm Optimization (PSO) [11, 20] it
is assumed that the particles (agents) know (i) their best position ‘local best’ (lb)
and (ii) their neighbourhood’s best position ‘global best’ (gb). The next position is
determined by velocity. Let xi(t) denote the position of particle i in the search space
at time step t, where t is discrete. Then the position xi is changed by adding a velocity
to the current position:
xi(t + 1) = xi(t) + vi(t + 1),
where vi(t + 1) = vi(t) + c1r1(lb(t) −xi(t)) + c2r2(gb(t) −xi(t)) and i is the par-
ticle index, c1, c2 are acceleration coefﬁcients, such that 0 ≤c1, c2 ≤2, r1, r2 are
random values (such that 0 ≤r1,r2 ≤1) regenerated every velocity update.
One of the possible PSO algorithms can be exempliﬁed by the bird ﬂocking [21,
22]. In ﬂocks ‘local best’ and ‘global best’ of birds are deﬁned by the following three
rules: (i) collision avoidance (birds ﬂy away before they crash into one another); (ii)
velocity matching (birds ﬂy about the same speed as their neighbours in the ﬂock);
and (iii) ﬂock centering (birds ﬂy toward the center of the ﬂock as they perceive it).
So, the position of a bird i at time t is given by its placement xi at time t −1 shifted
by its current velocity vi. This vi is determined by the rules (i)–(iii).
All the algorithms PSO, BFOA, ABC, COA, SSO, ACO are used to simulate
swarms of different insects or animals. Let us try to answer the question, whether
swarms can be considered an unconventional computer, i.e. whether swarms can
calculate.
Each swarm is a natural transition system
T S = ⟨S, E, T, I⟩,
where:
• S is the non-empty set of states;
• E is the set of events;
• T ⊆S × E × S is the transition relation;
• I ⊆S is the set of initial states.
Any transition system is a labeled graph with nodes corresponding to states from
S, edges representing the transition relation T , and labels of edges corresponding to
events from E.
Let us consider some examples.

130
4
Conventional and Unconventional Automata on Swarm Behaviours
4.1.2
Ant Colony Transitions
Any ant colony is a swarm of ants localized ﬁrst at the nest. This nest can be regarded
as an initial state of ant colony transitions. Then ants use a special mechanism called
stigmergy to build up all transitions. Stigmergy (stigma + ergon) means ‘stimulation
by work’. This mechanism has the following steps [16]:
• At ﬁrst ants are looking for food randomly, laying down pheromone trails.
• If ants ﬁnd food, they return to the nest, leaving behind pheromone trails. So there
is more pheromone on the shorter path than on the longer one.
• Ants prefer to go in the direction of the strongest pheromone smell. As a conse-
quence, the concentration of pheromone is so strong on the shorter path, that all
the ants prefer this path (it is experimentally proven in [16]).
Thus, stigmergy allows ants to transport food to their nest in a remarkably effec-
tive way. Food localizations are considered new states and ant roads to food places
are regarded as transitions. Let Pant = {n} be an initial state of ant transitions (i.e. the
nest), Aant = {a1, a2, . . . , a j} be a set of food pieces (attractants) localized at differ-
ent places, Vant = {r1,r2, . . . ,ri} be a set of ant roads. So the ant colony transition
system, T Sant = ⟨Sant, Eant, Tant, Iant⟩, can be deﬁned as follows:
• σ: Pant ∪Aant →Sant assigning a state to each original point of the ant colony as
well as to each attractant;
• τ: Vant →Tant assigning a transition to each ant road;
• ι: Pant →Iant assigning an initial state to the nest.
Each event of the set of events Eant is assigned to ant transitions in accordance with
the following types of ant expansion:
• direction (the ants move from one state/attractant/initial point to another state/
attractant),
• fusion (the ants move from different states/attractants to the same one state/
attractant),
• splitting (the ants move from one state/attractant/initial point to different states/
attractants),
• repelling (the ants stop to move in one direction).
The system T Sant can be used to solve the Travelling Salesman Problem [16]
formulated as follows: given a list of cities and the distances between each pair of
cities, we must to deﬁne the shortest possible route that visits each city exactly once
and returns to the origin city. This problem is NP-hard. Let Pant be considered the
origin city, Aant be a set of all other cities, and Vant be a set of all connections between
cities. The Travelling Salesman Problem can be solved, because the ants lay down
pheromone trails faster on the shortest path so that the shortest path gets reinforced
with more pheromone to attract more future ants. As a result, pheromone trails on
the edges between cities depend on the distance: more shorter, more attracting. This
allows ants to ﬁnd shorter tours of cities.

4.1 Formalizations of Swarm Transitions
131
4.1.3
Bee Colony Transitions
A bee colony is another example of swarm intelligence [23]. The bee nest is an
initial state of bee colony transitions. Any bee colony exploits a mechanism called
waggle dance to optimize the food transporting to the nest. This mechanism is as
follows. In the nest there is an area for communication among bees. At this area the
bees knowing, where the food source is precisely, exchange the information about
the direction, distance, and amount of nectar on the related food source by a waggle
dance. The direction of waggle dancing bees shows the direction of the food source in
relation to the Sun, the intensity of the waggles is associated to the distance, and the
duration of the dance shows the amount of nectar. Due to this form of communication
the bee colony transitions are built up by the following steps [13]:
• There are two kinds of bees: employed and unemployed. Employed bees know
exactly, where a particular food source (nectar) is, and visit just this source. Unem-
ployed bees do not know and seek a food source. The unemployed bees are divided
into the following two groups: scouts and onlookers. A scout bee carries out search
for new food sources without any guidance. An onlooker bee follows the instruc-
tion of a waggle dancing bee and visits the food source for the ﬁrst time. An
employed bee visits this source many times. So, the ﬁrst step in constructing the
bee transporting system is in sending scout bees.
• Then onlookers are sent.
• At the next step the food source is exploited by employed bees.
• An employed bee tests if the nectar amount of the new food source is higher than
that of the previous one. If it is so, the bee memorizes the new place and forgets
the old one. If the nectar amount decreased or exhausted and the employed bee
does not know a new place, this bee become an unemployed bee. So, at this step
the employed bees exchange the nectar information of the food sources to change
their decision.
Assume that Pbee = {n} is an initial state of bee transitions (i.e. the bee nest),
Abee = {a1, a2, . . . , a j} is a set of food sources (attractants) localized at different
places, Vonlooker = {r1,r2, . . . ,rk} is a set of onlooker bee roads, and Vemployed =
{r1,r2, . . . ,rl} is a set of employed bee roads. Then the bee colony transition system,
T Sbee = ⟨Sbee, Ebee, Tbee, Ibee⟩, can be deﬁned thus:
• σ: Pbee ∪Abee →Sbee assigning a state to each original point of the bee colony
as well as to each attractant;
• τ: Vonlooker ∪Vemployed →Tbee assigning a transition to each bee road;
• ι: Pbee →Ibee assigning an initial state to the bee nest.
In the set of events Ebee there are the following types of labels for transitions:
• direction (the onlooker or employed bees move from one state/attractant/initial
point to another state/attractant),
• fusion (the onlooker or employed bees move from different states/attractants to
the same one state/attractant),

132
4
Conventional and Unconventional Automata on Swarm Behaviours
• splitting (the onlooker or employed bees move from one state/attractant/initial
point to different states/attractants),
• repelling (the onlooker or employed bees stop to move in one direction).
Thesystem T Sbee,ifweuseonly Vemployed asasetofroads,cansolvetheTravelling
Salesman Problem, also. Thereby, Pbee is examined as the origin city, Abee is a set of
all other cities, and Vemployed is a set of all connections between cities. The point is
that the greater the number of iterations in sending onlooker or employed bees, the
higher the inﬂuence of the distance in attracting the bees to appropriate food sources.
As a result, the shorter distance seems to be more attracting for employed bees.
There is another NP-hard problem that can be solved by T Sbee, the so-called
Generalized Assignment Problem formulated as follows: there are a number of agents
and a number of tasks, each agent has a budget and each task assumes some cost and
proﬁt; we must ﬁnd an assignment in which all agents do not exceed their budget and
total proﬁt of the assignment is maximized. In the case of the bee colony, the bees
are regarded as agents, the nectar sources as tasks, the amount of nectar as proﬁt,
and the distance as cost. Hence, in this interpretation the bee colony can solve the
Generalized Assignment Problem.
4.1.4
Escherichia Coli Transitions
The complex group behaviour can be observed in the bacterium life also. For instance,
Escherichiacoli bacteriaformswarmsinsemisolidnutrientmedium[24, 25].Inthese
swarms with high bacterial density, large-scale swirling and streaming motions of
thousands or millions of cells are observed.
Let us suppose that Pone E.coli = {n1, n2, . . . , nm} is a set of initial states of
Escherichiacoli transitions, Aone E.coli = {a1, a2, . . . , a j}isasetofattractants(nutri-
ent gradients), Vone E.coli = {r1,r2, . . . ,rk} is a set of paths for each Escherichia coli
bacterium. Then the Escherichia coli transition system,
T Sone E.coli = ⟨Sone E.coli, Eone E.coli, Tone E.coli, Ione E.coli⟩,
can be deﬁned in the following manner:
• σ: Pone E.coli ∪Aone E.coli →Sone E.coli assigning a state to each original point of
the Escherichia coli population as well as to each attractant;
• τ: Vone E.coli →Tone E.coli assigning a transition to each path of each Escherichia
coli bacterium;
• ι: Pone E.coli →Ione E.coli assigning initial states to initial positions of Escherichia
coli bacteria.
There are the four types of labels for transitions in the set of events Eone E.coli:
• Direction: the Escherichia coli bacterium moves from one state/attractant/initial
point to another state/attractant presented by a nutrient gradient. This locomotion

4.1 Formalizations of Swarm Transitions
133
is carried out by a set of tensile ﬂagella which move in the counterclockwise
direction helping the bacterium to swim very fast.
• Tumbling: the Escherichia coli bacterium can tumble to change its swim direction
in the future. It is a Brownian motion of the bacterium. The tumbling is achieved
by the ﬂagella moving in the clockwise direction. In this direction each ﬂagellum
operates relatively independently of the others.
• Repelling: the Escherichia coli bacterium stops to move in one direction, because
it avoids noxious environment.
• Repropuction: the health bacterium splits into two bacteria while the least healthy
bacteria die.
In semisolid nutrient medium Escherichia coli bacteria make swarms: they become
multinucleate and move across the surface in coordinated packs. However, swarms
of Escherichia coli are not attracted by chemotaxis [24]. Their dynamics can be
explained only mechanistically by collisions with neighbours. This means that
Escherichia coli swarms can be simulated mathematically (by hydrodynamic inter-
actions) on the basis of T Sone E.coli, but these swarms are not intelligent.
So we can add a set EE.coli swarm of swarming transitions deﬁned mathematically
to the transition system T Sone E.coli. There are the following four kinds of maneuvers
during swarming [24, 25]:
• Forward motion: When the majority of Escherichia coli bacteria swim in the same
way, their swarm moves forward.
• Lateral motion: Because of collisions with neighbouring cells or motor reversals
there is a lateral motion in a swarm with propulsion angles of >35◦.
• Reversals: Reversals occur every 1.5s and require about 0.1s for completion, but
they do not have a large impact on the average cell behaviour.
• Stalls: When the bacteria pause, their ﬂagella continue to spin and pump ﬂuid over
the agar in front of the swarm. As a result, stalls occur at the swarm edge.
Hence, Escherichia coli swarms do not calculate.
4.1.5
Paenibacillus Vortex Transitions
Notice that there are bacteria with intelligent and successful swarming strategies such
as Paenibacillus vortex [26]. These strategies help Paenibacillus vortex bacteria to
carry out a cooperative colonization of new territories. When Paenibacillus vortex
is inoculated on hard agar surfaces with peptone, it develops complex colonies of
vortices. When it is inoculated on soft agar surfaces, it organizes a special network of
swarms with intricate internal trafﬁc. In contrast to Escherichia coli, the Paenibacil-
lus vortex swarms are sensitive to chemotaxis (attractants). As a consequence, the
Paenibacillus vortex network is built up on the basis of interactions between swarms
allowing them to transport nutrients, spores and other organisms [27, 28].

134
4
Conventional and Unconventional Automata on Swarm Behaviours
Let Pone P.vortex = {n1, n2, . . . , nm} be a set of initial states of Paenibacillus
vortex transitions, Aone P.vortex = {a1, a2, . . . , a j} be a set of attractants (nutrient
gradients), Vone P.vortex = {r1,r2, . . . ,rk} be a set of paths for each Paenibacillus
vortex bacterium. Then the Paenibacillus vortex transition system, T Sone P.vortex =
⟨Sone P.vortex, Eone P.vortex, Tone P.vortex, Ione P.vortex⟩, is as follows:
• σ: Pone P.vortex ∪Aone P.vortex →Sone P.vortex assigning a state to each original
point of the Paenibacillus vortex population as well as to each attractant;
• τ: Vone P.vortex →Tone P.vortex assigning a transition to each path of each Paeni-
bacillus vortex bacterium;
• ι: Pone P.vortex →Ione P.vortex assigning initial states to initial positions of Paeni-
bacillus vortex bacteria.
The four types of labels for transitions in the set of events Eone P.vortex:
• direction: the Paenibacillus vortex bacterium moves from one state/attractant/
initial point to another state/attractant presented by a nutrient gradient;
• tumbling: the Paenibacillus vortex bacterium can tumble for a while;
• repelling: the Paenibacillus vortex bacterium stops to move in one direction, as it
avoids some chemical concentrations;
• repropuction: the health bacterium splits into two bacteria.
Paenibacillus vortex bacteria can be organized in swarms. The locomotion in a
swarm can be explained hydrodynamically by collisions among the bacteria and
by the boundary of the layer of lubricant collectively generated by them. However,
interactions among swarms can be considered intelligent. Each swarm has a snake-
like formation. It looks for food and can cross each other’s trail. When food is
detected, swarms change their direction. The Paenibacillus vortex swarms can split
and fuse in accordance with topology of nutrients.
So, for these swarms we can propose another transition system
T SP.vortex swarm = ⟨SP.vortex swarm, EP.vortex swarm, TP.vortex swarm, IP.vortex swarm⟩,
where
• σ: PP.vortex swarm ∪AP.vortex swarm →SP.vortex swarm, where PP.vortex swarm =
{n1, n2, …, nl} is a set of initial states of Paenibacillus vortex swarm transitions
and AP.vortex swarm = Aone P.vortex is a set of attractants (nutrient gradients). The
function σ assigns a state to each original point of the Paenibacillus vortex swarms
as well as to each attractant;
• τ: VP.vortex swarm →TP.vortex swarm, where VP.vortex swarm = {r1,r2, …, rk} is a
set of paths for each Paenibacillus vortex swarm. The function τ is to assign a
transition to each path of each Paenibacillus vortex swarm;
• ι: PP.vortex swarm →IP.vortex swarm is to assign initial states to initial positions of
Paenibacillus vortex swarms.
Each event of the set of events EP.vortex swarm is assigned to swarm motions
according to the following types of maneuvers:

4.1 Formalizations of Swarm Transitions
135
• direction: the Paenibacillus vortex swarm moves from one state/attractant/initial
point to another state/attractant,
• fusion: the Paenibacillus vortex swarms move from different states/attractants/
initial points to the same one state/attractant,
• splitting: the Paenibacillus vortex swarm moves from one state/attractant/initial
point to different states/attractants (for the experimental details see [29]),
• repelling: the Paenibacillus vortex swarm stops to move in one direction if it faces
a repellent.
As we see, the Paenibacillus vortex transition system T SP.vortex swarm can solve
the Travelling Salesman Problem, too.
4.1.6
Towards Slime Mould Machines
Taking into account the fact that any plasmodium of Physarum polycephalum can be
considered a typical intelligent swarm, we can use automata deﬁned on plasmodia for
demonstrating computational powers of different swarms: ant colonies, bee colonies,
and Paenibacillus vortex swarms. Indeed, let
T SP.polycephalum = ⟨SP.polycephalum, EP.polycephalum, TP.polycephalum, IP.polycephalum⟩
be a transition system for plasmodia and this system is deﬁned standardly. Let
f be a mapping from SP.polycephalum to S⋆and from IP.polycephalum to I⋆, where
⋆∈{ant, bee, P.vortex swarm}. Assume that all transitions denoted by −→are
the same for all T SP.polycephalum, T Sant, T Sbee, T SP.vortex swarm. For example, we
have the same direction, fusion, splitting, and repelling. The function f is a homo-
morphism if and only if
• for
all
s ∈(SP.polycephalum ∪IP.polycephalum),
if
s −→s′,
for
some
s′ ∈
SP.polycephalum, then f (s) −→f (s′);
• for all s ∈SP.polycephalum, if f (s) −→t, for some t ∈S⋆, then there exists s′ ∈
SP.polycephalum with s −→s′ and f (s′) = t.
If f : SP.polycephalum ∪IP.polycephalum →S⋆∪I⋆is a homomorphism as well as
f −1 : S⋆∪I⋆→SP.polycephalum ∪IP.polycephalum is a homomorphism, then f is an
isomorphism. So, for any T S⋆, where ⋆∈{ant, bee, P.vortex swarm}, there is an
isomorphism from SP.polycephalum to S⋆and from IP.polycephalum to I⋆. This means
that it is enough to study the Physarum machine T SP.polycephalum to know computa-
tional properties of different swarms: ant colonies, bee colonies, Paenibacillus vortex
swarms, etc.
According to our previous study of T SP.polycephalum we know that it is impossible
to deﬁne Physarum transitions as atomic acts [30]. For instance, under the same
conditions, the plasmodium can follow splitting or direction, fusion or direction, etc.
Nevertheless, with a low accuracy we can implement some conventional algorithms
in T SP.polycephalum.

136
4
Conventional and Unconventional Automata on Swarm Behaviours
Notice that T SP.polycephalum cannot be deﬁned as an inductive set because of the
absence of atomic acts. Let us deﬁne (i) the universe U of all transitions deﬁned
in T SP.polycephalum and (ii) functions, F, which take one or more elements from
U as arguments and return an element of U. The universe is deﬁned inductively
(hence, it is an inductive set) if there is a base set B ⊆U such that unboundedly
repeated compositions of F on B cover the whole U. So, we assume that B contains
atomic acts (transitions). All functions f ∈F are deﬁned inductively if (i) each f
is deﬁned on B; (ii) for each f we have f (a1, a2, . . . , an) = f (b1, b2, . . . , bn) for
a1, a2, . . . , an ∈U and b1, b2, . . . , bn ∈U iff ai = bi for i = 1, . . . , n; (iii) each f
has a range which is disjoint from the ranges of all other functions in F and from
B. A function h is called recursive if (i) h(a) is deﬁned for all a ∈B; (ii) for each
f ∈F the value of h( f (a1, a2, . . . , an)) is deﬁned in terms of h(a1), …, h(an).
In the very next section we will show how we can consider fragments of U such
that there are some recursive functions in them.
4.2
Conventional Approach to Swarm Machines
It is known that, theoretically, Turing machines, Kolmogorov-Uspensky machines
[31, 32], Schönhage’s storage modiﬁcation machines [33, 34], and random-access
machines [35] have the same expressive power. In other words, the class of func-
tions computable by these machines is the same. For the ﬁrst time A. Adamatzky
[36] experimentally showed that the Physarum machine T SP.polycephalum can be rep-
resented as a kind of Kolmogorov-Uspensky machines. Hence, we can implement
conventional algorithms in T SP.polycephalum.
4.2.1
Physarum Kolmogorov-Uspensky Machines
Letusshowthat T SP.polycephalum canbeconsideredaKolmogorov-Uspenskymachine.
Let Γ = SP.polycephalum ∪IP.polycephalum be an alphabet, k = |EP.polycephalum| a nat-
ural number. We say that a tree is (Γ, k)-tree, if one of nodes is designated and it is
called root and all edges are directed. Each node is labelled by one of signs of Γ and
each edge from the same node is labelled by different numbers {1, . . . , k} (so, each
node has not more than k edges). We see that by this deﬁnition of (Γ, k)-tree, the
plasmodium grows from the one active zone (so, we simulate the expansion from the
one nest of ants or bees, or from the one inoculation of Paenibacillus vortex swarms),
where all attractants are labelled by signs of Γ and protoplasmic tubes (roads of ants
or roads of bees) are labelled by numbers of {1, . . . , k}. Thus, T SP.polycephalum (as
well as T Sant, T Sbee, or T SP.vortex swarm) can be represented as a (Γ, k)-tree.
(Γ, k)-Physarum complex is any initial ﬁnite digraph which is connected (i.e. each
vertex is accessible from the initial one by a directed path), each node is labelled by

4.2 Conventional Approach to Swarm Machines
137
one of signs of Γ , and each edge from the same node is labelled by different numbers
{1, . . . , k}. The set of all vertices of (Γ, k)-Physarum complex U is denoted by v(U).
The r-neighbourhood of (Γ, k)-complex is represented by a (Γ, k)-complex
which consists of edges and vertices of initial complex that are accessible from
initial vertex by a directed path that is not longer than r. Notice that r can be arbi-
trary. Any property of (Γ, k)-complex which is dependent just of r-neighbourhood
is called r-local property of (Γ, k)-complex. Hence, we can ever project Physarum
transitions (using attractants and repellents) for inducing different numbers r and
appropriate local properties.
Deﬁnition 4.1 A program of Physarum Kolmogorov-Uspensky machine is any r-
local action transforming some (Γ, k)-complexes of growing plasmodia into other
(Γ, k)-complexes of growing plasmodia:
U →⟨W, γ, δ⟩,
where U, W are (Γ, k)-Physarum complexes, γ is a mapping from v(U) to v(W),
δ is an injection from v(U) into v(W). The algorithm of transformation complexes
S →S∗is as follows [31, 32]:
• r-Neighbourhood of complex S is the same as of U.
• v(S′) = v(S\U) ∪v(W).
• If b ∈U, a ∈S\U, there is ⟨a, b⟩in S and γ (b) is deﬁned, then ⟨a, γ (b)⟩is an
edge in S′ with the same number as ⟨a, b⟩.
• If a ∈U, b ∈S\U, there is ⟨a, b⟩in S and δ(a) is deﬁned, then ⟨δ(a), b⟩is an
edge in S′ with the same number as ⟨a, b⟩(due to injectivity of δ we have different
numbers for different edges from the same vertex).
• The initial vertex of W is an initial vertex of S′ and we delete in S′ all vertices
(with appropriate edges) which are not accessible from the initial one. In this way
we obtain S∗.
The simpler version of Kolmogorov-Uspensky machines is represented by Schön-
hage’s storage modiﬁcation machines [33, 34].
4.2.2
Physarum Schönhage’s Storage Modiﬁcation
Machines
These machines consist of a ﬁxed alphabet of input symbols, Γ = SP.polycephalum ∪
IP.polycephalum,andamutabledirectedgraphwithitsarrowslabelledby EP.polycephalum
denoted by X for short. The set of nodes Γ , identifying with attractants, is ﬁnite.
One ﬁxed node a ∈IP.polycephalum is identiﬁed as a distinguished center node of
the graph. It is the ﬁrst active zone of growing plasmodium (also associated with
the one nest of ants or bees, just one inoculum of Paenibacillus vortex swarms).
The distinguished node a has an edge x such that xγ (a) = a for all γ ∈X. That is,

138
4
Conventional and Unconventional Automata on Swarm Behaviours
all pointers from the distinguished center node point back to the center node. Each
γ ∈X deﬁnes a mapping xγ from Γ to Γ in accordance with directions of growing
plasmodium; xγ (b) is the node found at the end of the edge starting at b labelled by
γ . Each word of symbols in the alphabet Γ is a pathway through the machine from
the distinguished center node. For example ABBC would translate to taking path A
from the start node, then path B from the resulting node, then path B, then path C.
With respect to the word ABBC, the plasmodium moves.
Schönhage’s machine modiﬁes storage by adding new elements and redirecting
edges. Its basic instructions are as follows:
• Creating a new node: new W. The machine reads the word W, following the path
represented by the symbols of W until the machine comes to the last symbol in the
word. It causes a new node y associated with the last symbol of W to be created and
added to X; its location in relation to the other nodes and pointers is determined
by W. If W is the empty string, this has the effect of creating a new center node a,
linked to the old a. For example, new AB creates a new node that is reached by
following the B pointer from the node designated by A. The growing plasmodium
from active zone A to active zone B corresponds to this word AB. Adding a new
node B means adding a new attractant denoted by B.
• A pointer redirection: set W to V . This instruction redirects an edge from the
path represented by word W to a former node that represents word V . If W is
the empty string, then this has the effect of renaming the center node a to be the
node indicated by V . Notice that set W to V means removing nodes and the edges
incident to W\V . So, we can remove some attractants denoted by W\V .
• A conditional instruction: if V = W then instruction Z. It compares two paths
represented by words W and V and if they end at the same node, then we jump to
instruction Z else continue. This instruction serves to add edges between existing
nodes. It corresponds to the splitting or fusion of Physarum polycephalum.
Deﬁnition 4.2 A program of Physarum Schönhage’s storage modiﬁcation machine
is any action transforming sets X of nodes for growing plasmodia with the alphabet
Γ into other sets X′ of nodes for growing plasmodia with the same alphabet Γ which
carries out by instructions new W; set W to V ; if V = W then instruction Z.
4.2.3
Physarum Random-Access Machines
In random-access machines there are registers (deﬁned as simple locations with
contents (single natural numbers) labelled by signs of X = {1, 2, . . . , k}, where k =
|EP.polycephalum|. In case of Physarum polycephalum, the alphabet
Γ = SP.polycephalum ∪IP.polycephalum
consisting of of nodes (attractants) for growing plasmodia can be represented as set
of registers. Their contents is deﬁned by the number of protoplasmic tubes located

4.2 Conventional Approach to Swarm Machines
139
at the place of appropriate register (i.e. by the number of protoplasmic tubes linked
to this node). For example, [γ ] means ‘the contents of register with location γ ∈Γ ’.
So, [γ ] may be equal to 3. Then the node γ has three edges.
Instructions of Physarum random-access machines copy the contents of one reg-
isters and deposit them into other without destructing or changing registers. To do
so we need repellents which stimulate plasmodium active zones to leave attractants.
Deﬁnition 4.3 A program of Physarum random-access machine is any action trans-
forming contents of registers from X for the growing plasmodium with the alphabet
Γ into other contents of the same registers in Γ for the growing plasmodium which
carries out by the following instructions:
• Clear the content of register γ (set it to zero): CL R([γ ]). All active zones are
leaving γ due to repellents.
• Increment the contents of register γ : I NC([γ ]). The intensity of repellents at γ
decreases.
• Decrement the contents of register γ : DEC([γ ]). The intensity of repellents at γ
increases.
• Copy the contents of register γ j to register γk leaving the contents of γ j intact:
C PY([γ j], [γk]). Using the Physarum transition, called direction, we can transmit
active zones located at γ j to add them to active zones located at γk.
• If register γ contains zero then jump to instruction Z else continue in sequence:
J Z([γ ], Z).
• If the contents of register γ j is equal to the contents of register γk then jump to
instruction Z else continue in sequence: J E([γ j], [γk], Z).
Notice that in Physarum Kolmogorov-Uspensky machines and Schönhage’s stor-
age modiﬁcation machines, the key role in computation models belongs to attractants,
but in Physarum random-access machines, this role belongs to repellents.
4.2.4
Problems of Conventional Approach
Unfortunately,thecomputationalcomplexityofimplementationsKolmogorov-Uspe-
nsky machines, Schönhage’s storage modiﬁcation machines, and random-access
machines on the Physarum polycephalum medium is so high. The point is that not
every computable functions can be simulated by plasmodium behaviours properly
(the more bit function, the higher complexity in its computation):
• ﬁrst, the motion of plasmodia is too slow (several days are needed to compute
simple functions such as 5-bit conjunction, 3-bit adder, etc., but the plasmodium
stage of Physarum polycephalum is time-limited, therefore there is not enough
time for realizations, e.g., of thousands-bit functions);
• second, the more attractants or repellents are involved in designing computable
functions, the less accuracy of their implementation is, because the plasmodium

140
4
Conventional and Unconventional Automata on Swarm Behaviours
tries to be propagated in all possible directions and we will deal with indirected
graphs, cycles, and other problems;
• third, the plasmodium is an adaptive organism that is very sensitive to environ-
ments, therefore it is very difﬁcult to organize the same laboratory conditions for
calculating the same k-bit functions, where k is large;
• fourth, the plasmodium has a free will and can make different decisions under the
same conditions;
• ﬁfth, the plasmodium follows emergent patterns which are fully eliminated in
conventional automata such as Kolmogorov-Uspensky machines, although these
patterns are natural for occupying many attractants.
Thus, swarm intelligence can be reduced to conventional automata, but with very
low accuracy.
4.3
Unconventional Approach to Simulating the Swarm
Behaviour
4.3.1
p-Adic Integers
As we already know, the intelligence of swarms is actively studied now, because
swarms (ants, bees, some social bacteria, etc.) can solve logistic and transport prob-
lems very effectively [7–9, 11, 12, 21, 26, 28, 37–47]. For example, the slime mould
can imitate route systems [48, 49]. So, as we know, the ant colony [16] can solve
the Travelling Salesman Problem formulated in the following manner: given a list of
“cities” (pieces of food scattered in the environment) and the distances between each
pair of “cities”, the ant nest can ﬁnd the shortest possible route that visits each “city”
exactly once and returns to the origin “city” (the nest). The bee colony [13] can solve
the Generalized Assignment Problem formulated as follows: there are a number of
“agents” (bees) and a number of “tasks” (nectar sources), each “agent” has a “budget”
(possibilities in transporting nectars) and each “task” assumes some “cost” (distance
in transporting nectars) and “proﬁt” (delivered nectars); the bee colony can ﬁnd an
assignment in which all “agents” do not exceed their “budget” and total “proﬁt” of
the assignment is maximized. This problem is NP-hard, too.
Thus, the swarm behaviour is determined by attractants: any swarm looks for
attractants (pieces of food), then the swarm builds a trasport system to logistically
optimize the occupation of food and the absorption of all reachable pieces of food.
Notice that the transport networks of swarms are not linear, but they hove many loops
(circles) which change during the time.
The swarm behaviour can be modelled logically if we assume that at each time
step of swarm propagation the swarm can ﬁnd not more than p −1 neighbouring
attractants which can be directly occupied. In this case we deal with the universe
of p-adic integers for coding the swarm behaviour. Let us remember that the set of

4.3 Unconventional Approach to Simulating the Swarm Behaviour
141
p-adic integers is denoted by Zp and each p-adic integer n ∈Zp has the following
meaning [50]:
n =
∞

i=0
ai · pi,
where ai ∈{0, 1, . . . , p −1} and the following notation: n = . . . ai+1ai . . . a1a0.
The set of p-adic integers includes all integers of Z as well as some rational
numbers of R. Let us see. Assume p = 5. Taking into account the fact that |2/3|5 =
1, the rational number 2/3 can be represented as a 5-adic integer. So, it has an
expansion . . . ai+1ai . . . a1a0 that starts with a0. Note that 0 ≤a0 < 5 satisﬁes a0 ≡
2/3 mod 5. Multiply by 3 gives 3a0 ≡2 mod 5. The only residue of division by 5
that solves this is a0 = 4. Then we have (2/3 −4) ≡5a1 mod 52. Hence, −10/3 ≡
5a1 mod 52. From this it follows that −2/3 ≡a1 mod 5, i.e. 0 ≡3a1 + 2 mod 5,
and it is solved by a1 = 1. For a2, we have the equation 2/3 ≡4 + 1 · 5 + 25 · a2
mod 53, i.e. −1/3 ≡a2 mod 5, hence, a2 = 3, etc. We see that 2/3 = 4 + 1 · 5 +
3 · 52 + 1 · 53 + 3 · 54 + 1 · 55 + · · · In the expansion form: 2/3 = . . . 131314.
Inthischapter,Iproposeawaytocodetheswarmpropagationby p-adicintegersof
Zp, see Sect.4.3.2. All examples are examined for 5-adic integers and we concentrate
just on motions of the plasmodium of Physarum polycephalum (slime mould) as an
instance of swarm behaviour in looking for and occupying attractants with building
an optimized transporting networks.
We know that each swarm propagation is divided into the following two stages: (i)
the discover of localizations of neighbour attractants and repellents; (ii) the logistical
optimization of the road system connecting all the reachable attractants and avoiding
all the neighbour repellents. The ﬁrst stage can be expressed by ﬁnite linear strings.
However, the second stage can contain some loops. So, its appropriate strings can
become inﬁnite. This situation can be coded by inﬁnite p-adic integers like 2/3 =
. . . 131314 in Z5. But the strings of the second stage may be also non-linear, i.e.
we can have several modiﬁcations of strings with an impossibility to differ them.
Deﬁning these non-linear strings is possible due to the notion of greatest ﬁxed points
giving rise to corecursion and codata. In this section, I show that there are ever some
limits in any swarm propagation at the second/logistic stage. These limits can be
taken as a hyperbolic space with patterns deﬁned by corecursion or by an expanding
of the classical group theory. I propose to follow the second way, i.e. to extend the
group theory. I am going to introduce a p-adic valued logic for combining sets of
linear and non-linear p-adic valued strings. Then I deﬁne a non-linear group theory
that allows us to calculate processes over logistic stages in the swarm propagation.

142
4
Conventional and Unconventional Automata on Swarm Behaviours
4.3.2
Synchronous Slime Mould Automata
The plasmodium of Physarum polycephalum, as an agent of swarm behaviour, is
sensitive to attractants and repellents and, therefore, its behaviour can be managed
by distributing attractants and repellents [42, 51, 52]. So, we can illustrate p-adic
valued models of swarm behaviour by the plasmodium. Motions of this organism
are stimulated by a speciﬁc location of nutrients as attractants. For example, in our
experiments we can use a Petri dish with dampened ﬁlter paper and scattered oat
ﬂakes attracting the plasmodium. As a result, the plasmodium migrates towards the
oat ﬂakes and builds a network of protoplasmic tubes (see Figs.4.1, 4.2, 4.3 and 4.4).
Under the conditions of nutrient-poor concentration, the plasmodium networks are
well visible and can be represented as natural labelled transition systems, where
states are attractants and transitions among states are protoplasmic tubes connecting
attractants. In the meanwhile, under the conditions of nutrient-rich concentration
of the plasmodium environment, e.g. under the conditions of an oatmeal rich agar
spread on a Petri dish, the plasmodium propagates a wave front towards all directions
(see Fig.4.5). Then in order to adopt all found attractants the plasmodium builds a
well visible network of protoplasmic tubes, too (see Fig.4.6).
Without loss of generality, let us consider the universe of 5-adic integers Z5 for
coding the swarm behaviour in occupying attractants. This means that at each step of
propagation, the plasmodium faces not more than four neighbouring attractants (see
Fig.4.1). Let us construct a synchronous Physarum automaton for t = 0, 1, 2, . . .
In these automata all plasmodium motions are synchronized and at each t the plas-
modium can occupy only neighbouring attractants, i.e. this means that in Fig.4.1 the
plasmodium can occupy only attractants n1, w1, s1, e1 at t = 0 and if n1 was occupied
at t = 0, the plasmodium can occupy only attractants n2, n1w1, n1e1 or go back to X
at t = 1, etc. Hence, we assume that the plasmodium can go north (up), west (left),
east (right), south (down) at each time step. The plasmodium can leave occupied
attractants, e.g. it can leave its start point (inoculum). Therefore, if the plasmodium
does not move forward after occupying some attractants and does not leave these
attractants, this temporary stop is considered as a loop: the plasmodium does not
stop, but go back and forward by circle along the existed road.
Now, let us code the swarm behaviour of the plasmodium by 5-adic integers. The
states of synchronous Physarum automaton are presented by attractants n1, w1, s1,
e1, …(see Fig.4.1). The transitions among states are presented by 5-adic integers
obtained in the following manner: the 5-adic integer …an . . . a3a2a1a0 designates
a transition started from the inoculum X and (i) if the plasmodium went north at
t = n, then an = 1, (ii) if the plasmodium went west at t = n, then an = 3, (iii) if
the plasmodium went east at t = n, then an = 2, (iv) if the plasmodium went south
at t = n, then an = 4. Notice that in this way we can deﬁne the inverse motion as
follows: let a = an . . . a3a2a1a0 and b = bn . . . b3b2b1b0 be 5-adic integers, they are
inverse if a + b = 111 . . . 11



n+1
0.

4.3 Unconventional Approach to Simulating the Swarm Behaviour
143
...
...
...
... ...
... ...
... n2w2 n2w1 n2 n2e1 n2e2 ...
... n1w2 n1w1 n1 n1e1 n1e2 ...
...
w2
w1
X
e1
e2
...
... s1w2 s1w1 s1 s1e1 s1e2 ...
... s2w2 s2w1 s2 s2e1 s2e2 ...
...
...
...
... ...
... ...
(a) Propagation in the matrix form
(b) Propagation in the picture form
Fig. 4.1 The 5-adic valued universe of plasmodium propagation: a in the matrix form, where the
inoculum of Physarum polycephalum is designated by X and at this point the plasmodium can grow
north (n1), west (w1), south (s1), east (e1); at point n1 the plasmodium can go up (n2), left (n1w1),
right (n1e1) or back (dawn); at point w1 the plasmodium can go up (n1w1), left (w2), down (s1w1)
or back (right); at point s1 the plasmodium can go down (s2), left (s1w1), right (s1e1) or back (up);
at point e1 the plasmodium can go up (n1e1), down (s1e1), right (e2) or back (left), etc.; b in the
picture form, where the neighbouring attractants are designated by white circles, see [1]
The examples of 5-adic codes are given in Figs.4.2, 4.3, 4.4 and 4.6. The
p-adic integers are ascribed to all the non-empty strings γ0γ1 . . . γk in the way:
[γ0γ1 . . . γk] ∈Zp. As we see in Figs.4.2, 4.3, 4.4 and 4.6, the value [γ0γ1 . . . γk] is
different for the different t = 0, 1, 2, . . .
We can deﬁne a p-adic distance ρp(a, b) between different swarm paths a =
[γ0γ1 . . . γk] and b = [γ ′
0γ ′
1 . . . γ ′
m] as follows: ρp(a, b) = |b −a|p. The norm
| · |p : Qp →R on Qp, where Qp is the feld of all the p-adic numbers, is deﬁned
thus:
|n =
∞

k=N
αk · pk|p := p−N,
where N is an index of the ﬁrst number distinct from zero in p-adic expansion of n.
Note that |0|p := 0. The function | · |p has values 0 and {pl}l∈Z on Qp. Finally,
|x|p ≥0 and |x|p = 0 ≡x = 0.

144
4
Conventional and Unconventional Automata on Swarm Behaviours
Fig. 4.2 The 5-adic valued
string [Xn1n2] = 11 at time
t = 1, the 5-adic valued
string [Xn1n2] = 411 at
time t = 2, the 5-adic valued
string [Xn1n2] = 4411 at
time t = 3, the 5-adic valued
string [Xn1n2] = 14411 at
time t = 4, the 5-adic valued
string [Xn1n2] = 114411 at
time t = 5, the 5-adic valued
string [Xn1n2] =
114411441144114411 at
time t = 17, etc. In a the
occupied (activated)
attractants are equal 1 (all
others are equal 0). In b the
occupied attractants are
designated by black circles
connected by protoplasmic
tubes, see [1]
...
...
...
...
...
...
...
... n2w2 = 0 n2w1 = 0 n2 = 1 n2e1 = 0 n2e2 = 0 ...
... n1w2 = 0 n1w1 = 0 n1 = 1 n1e1 = 0 n1e2 = 0 ...
...
w2 = 0
w1 = 0
X
e1 = 0
e2 = 0
...
... s1w2 = 0 s1w1 = 0 s1 = 0 s1e1 = 0 s1e2 = 0 ...
... s2w2 = 0 s2w1 = 0 s2 = 0 s2e1 = 0 s2e2 = 0 ...
...
...
...
...
...
...
...
(a) Propagation in the matrix form
(b) Propagation in the picture form
Fig. 4.3 The 5-adic valued
string [Xn1n2(n2e1)
(n2e2)(n1e2)
e2e1] = 33442211 at time
t = 7, the 5-adic valued
string [Xn1n2(n2e1)
(n2e2)(n1e2)e2e1] =
1133442211 at time t = 9,
the 5-adic valued string
[Xn1n2(n2e1)(n2e2)(n1e2)
e2e1] = 3344221133442211
at time t = 15, etc. In a the
occupied (activated)
attractants are equal 1
(all others are equal 0). In b
the occupied attractants are
designated by black circles
connected by protoplasmic
tubes, see [1]
...
...
...
...
...
...
...
... n2w2 = 0 n2w1 = 0 n2 = 1 n2e1 = 1 n2e2 = 1 ...
... n1w2 = 0 n1w1 = 0 n1 = 1 n1e1 = 0 n1e2 = 1 ...
...
w2 = 0
w1 = 0
X
e1 = 1
e2 = 1
...
... s1w2 = 0 s1w1 = 0 s1 = 0 s1e1 = 0 s1e2 = 0 ...
... s2w2 = 0 s2w1 = 0 s2 = 0 s2e1 = 0 s2e2 = 0 ...
...
...
...
...
...
...
...
(a) Propagation in the matrix form
(b) Propagation in the picture form

4.3 Unconventional Approach to Simulating the Swarm Behaviour
145
Fig. 4.4 The 5-adic valued
strings [Xn1(n1e1)] = 21
and [Xw1] = 23 at time
t = 1, the 5-adic valued
strings [Xn1(n1e1)] =
212121212121 and
[Xw1] = 232323232323 at
time t = 11, etc. In a the
occupied (activated)
attractants are equal 1 (all
others are equal 0). In b the
occupied attractants are
designated by black circles
connected by protoplasmic
tubes, see [1]
...
...
...
...
...
...
...
... n2w2 = 0 n2w1 = 0 n2 = 0 n2e1 = 0 n2e2 = 0 ...
... n1w2 = 0 n1w1 = 0 n1 = 1 n1e1 = 1 n1e2 = 0 ...
...
w2 = 0
w1 = 1
X
e1 = 0
e2 = 0
...
... s1w2 = 0 s1w1 = 0 s1 = 0 s1e1 = 0 s1e2 = 0 ...
... s2w2 = 0 s2w1 = 0 s2 = 0 s2e1 = 0 s2e2 = 0 ...
...
...
...
...
...
...
...
(a) Propagation in the matrix form
(b) Propagation in the picture form
Fig. 4.5 The wave front on
the nutrient-rich substrate
with the occupation of 8
attractants, see [1]
...
...
...
...
...
...
...
... n2w2 = 0 n2w1 = 0 n2 = 0 n2e1 = 0 n2e2 = 0 ...
... n1w2 = 0 n1w1 = 1 n1 = 1 n1e1 = 1 n1e2 = 0 ...
...
w2 = 1
w1 = 1
X
e1 = 1
e2 = 0
...
... s1w2 = 0 s1w1 = 1 s1 = 1 s1e1 = 0 s1e2 = 0 ...
... s2w2 = 0 s2w1 = 0 s2 = 0 s2e1 = 0 s2e2 = 0 ...
...
...
...
...
...
...
...
(a) Propagation in the matrix form
(b) Propagation in the picture form

146
4
Conventional and Unconventional Automata on Swarm Behaviours
Fig. 4.6 The 5-adic
valued strings
[Xw1(s1w1)s1] = 243,
[Xw1w2] = 233,
[Xn1(n1w1)w1] = 431, and
[Xe1(n1e1)n1] = 312 at
time t = 2. So, we have the
three branches at point X
and the two branches at point
w1. In a the occupied
(activated) attractants are
equal 1 (all others are equal
0). In b the occupied
attractants are designated by
black circles connected by
protoplasmic tubes, see [1]
...
...
...
...
...
...
...
... n2w2 = 0 n2w1 = 0 n2 = 0 n2e1 = 0 n2e2 = 0 ...
... n1w2 = 0 n1w1 = 1 n1 = 1 n1e1 = 1 n1e2 = 0 ...
...
w2 = 1
w1 = 1
X
e1 = 1
e2 = 0
...
... s1w2 = 0 s1w1 = 1 s1 = 1 s1e1 = 0 s1e2 = 0 ...
... s2w2 = 0 s2w1 = 0 s2 = 0 s2e1 = 0 s2e2 = 0 ...
...
...
...
...
...
...
...
(a) Propagation in the matrix form
(b) Propagation in the picture form
The value |b −a|p = pl means that since t = l the swarm paths a = [γ0γ1 . . . γk]
and b = [γ ′
0γ ′
1 . . . γ ′
m] are different.
The function ρp(x, y) = |x −y|p is a metric on Qp. It is a translation invariant
metric, i.e. ρp(x + h, y + h) = ρp(x, y). As usual in metric spaces we deﬁne closed
and open balls in Qp :
B[a, pl] := Bl[a] = {x ∈Qp : ρp(x, a) ≤pl},
B(a, pl) := Bl(a) = {x ∈Qp : ρp(x, a) < pl},
where pl ∈R+.
The metric ρp satisﬁes the strong triangle inequality:
ρp(x, y) ≤max(ρp(x, z), ρp(z, y)).
Such a kind of metrics is called an ultrametrics or non-Archimedean metrics. We
note that any open or closed ball in an ultrametric space is a simultaneously closed
and open subset, because Bl−1[a] = Bl(a).
The balls Bl(0) are additive subgroups of Qp: if |x|p, |y|p ≤r, then |x + y|p ≤
max(|x|p, |y|p) ≤r. Furthermore, the ball B[0, 1] is a ring: if |x|p, |y|p ≤1, then
|x · y|p ≤|x|p · |y|p ≤1. Moreover, the ball B[0, 1] is the ring of p-adic integers
Zp.

4.3 Unconventional Approach to Simulating the Swarm Behaviour
147
The ball Bl(a) with the center a = [γ0γ1 . . . γk] contains all the values for all the
strings which differ from a after the time step t = l.
Hence, p-adic metrics gives us a partition of varieties of string values into the
balls.
4.3.3
Non-linear Strings and the Limits in the Swarm
Propagation
In Fig.4.6 we see the situation when we have at once at the same zone several 5-
adic valued strings Xw1(s1w1)s1, Xw1w2, Xn1(n1w1)w1, and Xe1(n1e1)n1 since
t = 2. This situation is called the logistic stage in the propagation. At this stage it
is difﬁcult to distinguish one strings from other strings, because they are overlapped
and interconnected among themselves.
Let us consider an example of two stages in the mould propagation, see Fig.4.7. At
both pictures we see two species of mould (fungi that grow in the form of multicellular
ﬁlaments called hyphae), conditionally called by us here the ‘green’ and ‘white’
mould. They are in a competition for the food and at the discovering stage they are
trying to sketch main directions of their propagations. At the logistic stage they are
constructing networks, called a mycelium, to product spores (conidia) formed by
differentiation at the ends of hyphae.
The same pattern with distinguishing the two stages in the propagation can be seen
everywhere in the swarm behaviour, including a phenomenon of diffusion given by
the growth of colonies of bacteria, see [53–55]. In [55, 56] there was proposed a
simulation of the logistic stage by celular automata in the hyperbolic plane, where
there are innitely many different tilings. One of the examples of the space for these
cellular automata is given by the tiling when three copies of polygon can be put
around a vertex in order to cover a neighbourhood of the vertex with no overlapping.
This tiling is called the ternary heptagrid or, simply, the heptagrid, see Fig.4.8.
On the one hand, in Fig.4.8 we see inﬁnitely many cells of automata. On the other
hand, they are limited in the space by a circle and they are contained in an open
interval.
Margenstern deﬁnes a cellular automaton on the heptagrid by a local transition
function in form of a table, where each row deﬁnes a rule and the table has nine
columns numbered from 0 to 8 so that each entry of the table containing a state of
the automaton. On each row, column 0 contains the state of the cell to which the
rule applies. Columns from 1 to 8 contain the states of neighbours. For the central
cell, its neighbour 1 is ﬁxed once and for all. For another cell, its neighbour 1 is its
father. In all cases, the other neighbours are increasingly numbered from 2 to 7 while
counter-clockwise turning around the cell starting from side 1. For more details,
see [56]. In this way, the logistic stage of the swarm propagation is simulated by a
possibly inﬁnite behaviour within a rigid limits. These limits are given as a greatest
ﬁxed point—the circle in the case of heptagrid.

148
4
Conventional and Unconventional Automata on Swarm Behaviours
Fig. 4.7 The competition
between the ‘green’ and
‘white’ mould in the same
unwashed cup of coffee. In a
we see a discovering stage of
both species of mould to
occupy the food space as
prompt as possible. In b we
see a logistic stage to
effectively connect the own
occupied attractants, see [1]
(a) The discovering stage for the ‘green’ and ‘white’
mould, ca.4 weeks of the unwashed cup of coffee
(b) The logistical stage for the ‘green’ and ‘white’
mould, ca.7 weeks of the unwashed cup of coffee
I support this Margenstern’s idea to regard the logistic stage in the hyperbolic
plane, but his approach has some disadvantages: (i) the cells of the heptagrid are
taken before any calculations and cannot change in the calculating process, but the
swarm behaviour is more context-based and assumes different own modiﬁcations in
course of time; (ii) we cannot even imagine a transmission from one hyperbolic plane
(one logistic stage) to another, but such things take place in the reality of swarms,
because swarms can migrate.
It is better to consider the limits in the swarm propagation as limits in possible
permutations, see [30]. Let G be a set of various motions with a linear composition:
if x, y are two motions in G , then the motion x · y is a result of their composition.
Suppose that (i) the operation x · y satisﬁes the law of associativity, (ii) G contains the

4.3 Unconventional Approach to Simulating the Swarm Behaviour
149
Fig. 4.8 The heptagrid as a
space for cellular automata
simulating the growth of
bacterial colonies, see [55]
unit member e, and (iii) G contains the inverse member x−1. The unit member means
an identity motion, when nothing moves. The inverse member x−1 of x is a motion
which is opposite to x. Consequently, e · x = x · e = x and x−1 · x = x · x−1 = e.
Thus, G is a group and every motion in G causes the setting of linear sequences.
This group is called a permutation group.
A non-linear composition in non-linear permutation group assumes the existence
of their limit represented as the absolute motion (hyperunit) e such that for any
simple motions x, y ∈G , x · e = y · e = e · x = e · y = e and e · e = e · e = e. So,
theabsolutemotiongetsallmotionsequaltoitself.Hence,theabsolutemotionforany
members of G determines the limits for any motions, i.e. it is the greatest possible
motion in G . For the absolute member there is no inverse motion, i.e. e−1 · e =
e · e−1 = e.
In multiplicative groups the absolute member plays the role of zero, but we can
divide by zero as e · e−1 = e. In additive groups the absolute member plays the role
of inﬁnity, since x + e = y + e = e + x = e + y = e.
The non-linear groups are formally deﬁned at the end of Sect.4.3.5.
4.3.4
p-Adic Valued Logic for Non-linear Strings
Let us consider non-empty strings γ0γ1 . . . γk of Sect.4.3.2 and let each string
γ0γ1 . . . γk have a numeric value [γ0γ1 . . . γk] ∈Zp. Let us deﬁne a weight [[γi]]
for each point/node γi occupied by a swarm.
• Let [[γ0]] denote an integer ≤p −1 for the point γ0 ∈γ0γ1 . . . γk. This integer is
equal to the number of closest neighbours for γ0 occupied by a swarm. The weight
of γ0 is coded by a p-adic integer . . . 0000[[γ0]].
• Let [[γ0]] and [[γ1]] denote some integers ≤p −1 for the points γ0, γ1 ∈
γ0γ1 . . . γk. The integer [[γ0]] is equal to the number of occupied closest neigh-

150
4
Conventional and Unconventional Automata on Swarm Behaviours
Fig. 4.9 At each step of plasmodium propagation, there are only two attractants which can be
occupied. At the ﬁrst time step the plasmodium expansion is coded by the 3-adic integer …000001,
see [1]
bours for γ0 and the integer [[γ1]] is equal to the number of closest neighbours
for γ1 occupied by a swarm. The weight of γ0γ1 is coded by a p-adic integer
. . . 0000[[γ1]][[γ0]].
• …
• Let [[γ0]], [[γ1]], …, [[γk]] denote some integers ≤p −1 for the points γ0, γ1,
…, γk ∈γ0γ1 . . . γk. The integer [[γ0]] is equal to the number of occupied neigh-
bours for γ0, the integer [[γ1]] is equal to the number of neighbours for γ1 occu-
pied by a swarm, …, the integer [[γk]] is equal to the number of neighbours
for γk occupied by a swarm. The weight of γ0γ1 . . . γk is coded by a p-adic
integer . . . 0000[[γk]] . . . [[γ1]][[γ0]]. We see that 0000[[γk]] . . . [[γ1]][[γ0]] =
0000[[γk . . . γ1γ0]] = [[γk …γ1γ0]] = [[γ0γ1 …γk]].
Evidently that according to this deﬁnition if in the string γ0γ1 . . . γk each γi (0 ≤
i ≤k) has no neighbouring attractants occupied by a swarm, then [[γ0γ1 . . . γk]] =
0 ∈Zp and if in the string γ0γ1 . . . γk each γi (0 ≤i ≤k) has all neighbouring
attractants occupied by a swarm, then [[γ0γ1 . . . γk]] = k
i=0(p −1) · pi ∈Zp. The
strings [[γ0γ1 . . . γk]] ̸= 0 are called non-empty.
Some examples of weights are given in Figs.4.9, 4.10, 4.11 and 4.12.
Let us analyze the case when we have two strings γ0γ1 . . . γk and γ0γ ′
1 . . . γ ′
m
started from the same state γ0. Suppose that γik (0 ≤ik ≤k) and γ ′
im (0 ≤im ≤m)
have some neighbouring attractants occupied by the plasmodium. This means that
we face a splitting of the plasmodium at the node γ0. Assume that there is not
more splitting for nodes from γ0γ1 . . . γk and γ0γ ′
1 . . . γ ′
m and only γ0γ1 . . . γk and
γ0γ ′
1 . . . γ ′
m are non-empty. Then the transition system at the logistic stage is coded
by the set
{[[γ0γ1 . . . γk]], [[γ0γ ′
1 . . . γ ′
m]]}.
Another similar situation is observed when we have two strings γ0γ1γ2 . . . γk and
γ0γ1γ ′
2 . . . γ ′
m started from the same state γ0 and with the splitting at the node γ1.
If only γ0γ1γ2 . . . γk and γ0γ1γ ′
2 . . . γ ′
m are non-empty, then the transition system is
coded by the set
{[[γ0γ1γ2 . . . γk]], [[γ0γ1γ ′
2 . . . γ ′
m]]}.
Let Aγ0 be a non-empty set of all non-empty strings started from γ0 and this set
be coded by [Aγ0], i.e. by a set of p-adic integers obtained as weights for all strings
from Aγ0. If we are going to distinguish a set of all possible strings started from γ0 in

4.3 Unconventional Approach to Simulating the Swarm Behaviour
151
Fig. 4.10 At each step of plasmodium propagation, there are only three attractants which can be
occupied. At the ﬁrst time step the plasmodium expansion is coded by the 4-adic integer …000002,
see [1]
Fig. 4.11 At each step of plasmodium propagation, there are not more than four attractants which
can be occupied. At the ﬁrst time step the plasmodium expansion is coded by the 5-adic integer
…000002, see [1]

152
4
Conventional and Unconventional Automata on Swarm Behaviours
Fig. 4.12 At each step of plasmodium propagation, there are not more than four attractants which
can be occupied. At the time step t > 0 the plasmodium expansion is coded by the 4-adic integer
…00000232, see [1]
a local space from a set Aγ0 of some strings started from γ0, we will use the notation
Ωγ0. Obviously, for each Aγ0, Aγ0 ⊆Ωγ0.
Now we can deﬁne compositions of two sets Aγ0 and Aγ ′
0, where γ0 ̸= γ ′
0: we
have Aγ0,γ ′
0 and this set contains all strings started from γ0 and started from γ ′
0. The
system Aγ0,γ ′
0 is coded by [Aγ0,γ ′
0] = [Aγ0] ∪[Aγ ′
0].
By induction, we can deﬁne sets Aγ0,γ ′
0,...,γ ′′
0 .
Notably, the swarm expansion is time dependent. So, we can consider sets
At
γ0,γ ′
0,...,γ ′′
0 att = 0, 1,…Letusdeﬁnelogicaloperationsoverthesamesets At
γ0,γ ′
0,...,γ ′′
0
with different t:
conjunction At=k
γ0,γ ′
0,...,γ ′′
0 ∧At=l
γ0,γ ′
0,...,γ ′′
0 :
Notice that strings from different At=k
γ0,γ ′
0,...,γ ′′
0
and At=l
γ0,γ ′
0,...,γ ′′
0 , where k ̸= l, are the same, but they can be coded by different
p-adic integers at t = k and t = l. Let us consider each string γ0γ1γ2 . . . γm. Let
[[γ0γ1γ2 . . . γm]]k be a p-adic numerical weight of γ0γ1γ2 . . . γm at t = k and
[[γ0γ1γ2 . . . γm]]l be a p-adic numerical weight of γ0γ1γ2 . . . γm at t = l. Then
we deﬁne min([[γ0γ1γ2 …γm]]k, [[γ0γ1γ2 …γm]]l) digit by digit:
min(. . . 000γm,k . . . γ2,kγ1,kγ0,k; . . . 000γm,l . . . γ2,lγ1,lγ0,l) =

4.3 Unconventional Approach to Simulating the Swarm Behaviour
153
. . . 000 min(γm,k, γm,l) . . . min(γ2,k, γ2,l) min(γ1,k, γ1,l) min(γ0,k, γ0,l).
The set At=k
γ0,γ ′
0,...,γ ′′
0 ∧At=l
γ0,γ ′
0,...,γ ′′
0 contains such minimum for each string.
disjunction At=k
γ0,γ ′
0,...,γ ′′
0 ∨At=l
γ0,γ ′
0,...,γ ′′
0 :
Let us consider each string γ0γ1γ2 . . . γm. Let
[[γ0γ1γ2 . . . γm]]k be a p-adic numerical value of γ0γ1γ2 …γm at t = k and
[[γ0γ1γ2 …γm]]l be a p-adic numerical value of γ0γ1γ2 …γm at t = l. Then
we deﬁne max([[γ0γ1γ2 . . . γm]]k, [[γ0γ1γ2 …γm]]l) digit by digit:
max(. . . 000γm,k . . . γ2,kγ1,kγ0,k; . . . 000γm,l . . . γ2,lγ1,lγ0,l) =
. . . 000 max(γm,k, γm,l) . . . max(γ2,k, γ2,l) max(γ1,k, γ1,l) max(γ0,k, γ0,l).
The set At=k
γ0,γ ′
0,...,γ ′′
0 ∨At=l
γ0,γ ′
0,...,γ ′′
0 contains such maximum for each string.
negation ¬At=k
γ0,γ ′
0,...,γ ′′
0 :
Let us deﬁne the universe Ωγ0,γ ′
0,...,γ ′′
0 as a set of all possible
strings started from the nodes γ0, γ ′
0, …, γ ′′
0 . A numerical value of each string
γ0γ1 . . . γm from Ωγ0,γ ′
0,...,γ ′′
0 is maximal: [[γ0γ1 . . . γm]] = m
i=0(p −1) · pi. Then
¬At=k
γ0,γ ′
0,...,γ ′′
0 = Ωγ0,γ ′
0,...,γ ′′
0 \At=k
γ0,γ ′
0,...,γ ′′
0 and it is coded by a set of p-adic integers
m
i=0(p −1) · pi −[[γ0γ1γ2 . . . γm]]k for each string γ0γ1γ2 . . . γm ∈At=k
γ0,γ ′
0,...,γ ′′
0 .
We can deﬁne logical connectives connecting different sets Aγ0,...,γ ′
0 and Bγ ′′
0 ,...,γ ′′′
0 :
conjunction Aγ0,...,γ ′
0 ∧Bγ ′′
0 ,...,γ ′′′
0 :
The sets Aγ0,...,γ ′
0 and Bγ ′′
0 ,...,γ ′′′
0 contain different
strings. Let γ0γ1γ2 . . . γm be a string from Aγ0,...,γ ′
0 and γ ′′
0 γ ′′
1 γ ′′
2 . . . γ ′′
k be a string
from Bγ ′′
0 ,...,γ ′′′
0 . Let [[γ0γ1γ2 . . . γm]] be a p-adic numerical weight of γ0γ1γ2 . . . γm
and [[γ ′′
0 γ ′′
1 γ ′′
2 . . . γ ′′
k ]] be a p-adic numerical weight of γ ′′
0 γ ′′
1 γ ′′
2 . . . γ ′′
k . Then we
deﬁne min([[γ0γ1γ2 . . . γm]], [[γ ′′
0 γ ′′
1 γ ′′
2 . . . γ ′′
k ]]) digit by digit:
min(. . . 000[[γ0γ1γ2 . . . γm]]; . . . 000[[γ ′′
0 γ ′′
1 γ ′′
2 . . . γ ′′
k ]]) =
. . . 000 . . . min([[γ1]], [[γ ′′
1 ]]) min([[γ0]], [[γ ′′
0 ]]).
The set Aγ0,...,γ ′
0 ∧Bγ ′′
0 ,...,γ ′′′
0 contains such minimum for each string.
disjunction Aγ0,...,γ ′
0 ∨Bγ ′′
0 ,...,γ ′′′
0 :
The sets Aγ0,...,γ ′
0 and Bγ ′′
0 ,...,γ ′′′
0 contain different
strings. Let γ0γ1γ2 . . . γm be a string from Aγ0,...,γ ′
0 and γ ′′
0 γ ′′
1 γ ′′
2 . . . γ ′′
k be a string
from Bγ ′′
0 ,...,γ ′′′
0 . Let [[γ0γ1γ2 . . . γm]] be a p-adic numerical weight of γ0γ1γ2 . . . γm
and [[γ ′′
0 γ ′′
1 γ ′′
2 . . . γ ′′
k ]] be a p-adic numerical weight of γ ′′
0 γ ′′
1 γ ′′
2 . . . γ ′′
k . Then we
deﬁne max([[γ0γ1γ2 . . . γm]], [[γ ′′
0 γ ′′
1 γ ′′
2 . . . γ ′′
k ]]) digit by digit:
max(. . . 000[[γ0γ1γ2 . . . γm]]; . . . 000[[γ ′′
0 γ ′′
1 γ ′′
2 . . . γ ′′
k ]]) =
. . . 000 . . . max([[γ1]], [[γ ′′
1 ]]) max([[γ0]], [[γ ′′
0 ]]).
The set Aγ0,...,γ ′
0 ∧Bγ ′′
0 ,...,γ ′′′
0 contains such maximum for each string.
negation ¬Aγ0,γ ′
0,...,γ ′′
0 :
Let us deﬁne the universe Ωγ0,γ ′
0,...,γ ′′
0 as a set of all possible
strings started from the nodes γ0, γ ′
0, …, γ ′′
0 . A numerical value of each string

154
4
Conventional and Unconventional Automata on Swarm Behaviours
γ0γ1 . . . γm from Ωγ0,γ ′
0,...,γ ′′
0 is maximal: [[γ0γ1 . . . γm]] = m
i=0(p −1) · pi. Then
¬Aγ0,γ ′
0,...,γ ′′
0 = Ωγ0,γ ′
0,...,γ ′′
0 \Aγ0,γ ′
0,...,γ ′′
0 and it is coded by a set of p-adic integers
m
i=0(p −1) · pi −[[γ0γ1γ2 . . . γm]] for each string γ0γ1γ2 . . . γm ∈Aγ0,γ ′
0,...,γ ′′
0 .
Byusingthislogicwecandeﬁneanexpansionstrategyofaswarmonγ0γ1γ2 . . . γm
in the universe Aγ0,γ ′
0,...,γ ′′
0 :
S (γ0γ1γ2 . . . γm ∈Aγ0,γ ′
0,...,γ ′′
0 ) =
k=m

k=0
∞

t=0
(max([[γk]]t, [[γk]]t+1)) · pt.
S (Aγ0,γ ′
0,...,γ ′′
0 ) = {S (γ0γ1γ2 . . . γm): γ0γ1γ2 . . . γm ∈Aγ0,γ ′
0,...,γ ′′
0 }.
We know that Aγ0,γ ′
0,...,γ ′′
0 ⊆Ωγ0,γ ′
0,...,γ ′′
0 . We can deﬁne the p-adic cardinality,
⌈Aγ0,γ ′
0,...,γ ′′
0 ,...⌉, in the following manner:
⌈Aγ0,γ ′
0,...,γ ′′
0 ,...⌉=
min
γ0γ1γ2...γm∈Aγ0,γ ′
0,...,γ ′′
0 ,...
S (γ0γ1γ2 . . . γm).
Evidently, ⌈Aγ0,γ ′
0,...,γ ′′
0 ⌉≤⌈Ωγ0,γ ′
0,...,γ ′′
0 ⌉even if Aγ0,γ ′
0,...,γ ′′
0 = Ωγ0,γ ′
0,...,γ ′′
0 , as for
each
γ0γ1γ2 . . . γm ∈Ωγ0,γ ′
0,...,γ ′′
0 ,
S (γ0γ1γ2 . . . γm) = 	k=m
k=0
∞
t=0(max([[γk]]t,
[[γk]]t+1)) · pt = ∞
t=0(p −1) · pt = −1. Thus,
⌈Ωγ0,γ ′
0,...,γ ′′
0 ⌉= −1
Let Ω be a set of all strings including inﬁnite ones. Then
S (Ω) = {S (γ0γ1γ2 . . . γm . . .) ∈Zp : γ0γ1γ2 . . . γm . . . ∈Ω}
and
⌈Ω⌉= min(S (Ω)) = −1.
For any Aγ0,γ ′
0,...,γ ′′
0 ⊆Ωγ0,γ ′
0,...,γ ′′
0 and Aγ0,γ ′
0,...,γ ′′
0 ... ⊆Ω, a p-adic valued proba-
bility measure, P(Aγ0,γ ′
0,...,γ ′′
0 ) and P(Aγ0,γ ′
0,...,γ ′′
0 ...), is deﬁned as follows:
• P(Aγ0,γ ′
0,...,γ ′′
0 ) =
⌈Aγ0,γ ′
0,...,γ ′′
0 ∧Ωγ0,γ ′
0,...,γ ′′
0 ⌉
⌈Ωγ0,γ ′
0,...,γ ′′
0 ⌉
and P(Aγ0,γ ′
0,...,γ ′′
0 ,...) =
⌈Aγ0,γ ′
0,...,γ ′′
0 ,...∧Ω⌉
⌈Ω⌉
.
• P(Ωγ0,γ ′
0,...,γ ′′
0 ) = 1, P(Ω) = 1, and P(∅) = 0.
• if Aγ0,...,γ ′
0 ⊆Ωγ0,...,γ ′
0 and Bγ ′′
0 ,...,γ ′′′
0 ⊆Ωγ ′′
0 ,...,γ ′′′
0 are disjoint, i.e.
inf(P(Aγ0,...,γ ′
0), P(Bγ ′′
0 ,...,γ ′′′
0 )) = 0,
then P(Aγ0,...,γ ′
0 ∨Bγ ′′
0 ,...,γ ′′′
0 ) = P(Aγ0,...,γ ′
0) + P(Bγ ′′
0 ,...,γ ′′′
0 ). Otherwise,
P(Aγ0,...,γ ′
0 ∨Bγ ′′
0 ,...,γ ′′′
0 ) = P(Aγ0,...,γ ′
0) + P(Bγ ′′
0 ,...,γ ′′′
0 )−

4.3 Unconventional Approach to Simulating the Swarm Behaviour
155
inf(P(Aγ0,...,γ ′
0), P(Bγ ′′
0 ,...,γ ′′′
0 )) = sup(P(Aγ0,...,γ ′
0), P(Bγ ′′
0 ,...,γ ′′′
0 )).
All these equalities hold for inﬁnite sets Aγ0,...,γ ′
0,... and Bγ ′′
0 ,...,γ ′′′
0 ,..., also.
• P(¬Aγ0,γ ′
0,...,γ ′′
0 ) = 1 −P(Aγ0,γ ′
0,...,γ ′′
0 )forallﬁnite Aγ0,γ ′
0,...,γ ′′
0 ⊆Ωγ0,γ ′
0,...,γ ′′
0 ,where
¬Aγ0,γ ′
0,...,γ ′′
0 = Ωγ0,γ ′
0,...,γ ′′
0 \Aγ0,γ ′
0,...,γ ′′
0 . P(¬Aγ0,γ ′
0,...,γ ′′
0 ,...) = 1 −P(Aγ0,γ ′
0,...,γ ′′
0 ,...)
for all inﬁnite Aγ0,γ ′
0,...,γ ′′
0 ,... ⊆Ω, where ¬Aγ0,γ ′
0,...,γ ′′
0 ,... = Ω\Aγ0,γ ′
0,...,γ ′′
0 ,....
• Relative probability functions
P(Aγ0,...,γ ′
0|Bγ ′′
0 ,...,γ ′′′
0 ) ∈Qp and P(Aγ0,...,γ ′
0,...| Bγ ′′
0 ,...,γ ′′′
0 ,...) ∈Qp
are deﬁned as follows:
P(Aγ0,...,γ ′
0|Bγ ′′
0 ,...,γ ′′′
0 ) = P(Aγ0,...,γ ′
0 ∧Bγ ′′
0 ,...,γ ′′′
0 )
P(Bγ ′′
0 ,...,γ ′′′
0 )
,
where P(Bγ ′′
0 ,...,γ ′′′
0 ) ̸= 0 and
P(Aγ0,...,γ ′
0 ∧Bγ ′′
0 ,...,γ ′′′
0 ) = inf(P(Aγ0,...,γ ′
0), P(Bγ ′′
0 ,...,γ ′′′
0 )).
All these equalities hold for inﬁnite sets Aγ0,...,γ ′
0,... and Bγ ′′
0 ,...,γ ′′′
0 ,..., too.
For deductive properties of p-adic valued logic for simulating the slime mould
behaviour and the behaviour of other swarms, please see [57].
4.3.5
Relations and Functions on Non-linear Strings
and the Non-linear Group Theory
Let us continue to consider only sets with non-empty strings:
Aγ0,...,γ ′
0 = {γ0γ1γ2 . . . γm : [[γ0γ1γ2 . . . γm]] =
m

i=0
[[γi]] · pi ̸= 0 ∧[[γ j]] = 0 for all j > m}.
Then the set Rn(Aγ0,...,γ ′
0, . . . , Bγ ′′
0 ,...,γ ′′′
0



n
) ∈P(Ω)n is called an n-ary relation
among the sets of p-adic valued strings.
Let Φ and Ψ be two binary relations on sets of p-adic valued strings. Then their
composition Φ ◦Ψ is deﬁned as follows:
Φ ◦Ψ = {⟨Aγ0,...,γ ′
0, Bγ ′′
0 ,...,γ ′′′
0 ⟩: ⟨Aγ0,...,γ ′
0, Cγ ′′′′
0 ,...,γ ′′′′′
0
⟩∈Φ and ⟨Cγ ′′′′
0 ,...,γ ′′′′′
0
, Bγ ′′
0 ,...,γ ′′′
0 ⟩∈
Ψ for some Cγ ′′′′
0 ,...,γ ′′′′′
0
⊆Ω}.
This product has the property of associativity:
Φ ◦(Ψ ◦Θ) = (Φ ◦Ψ ) ◦Θ.

156
4
Conventional and Unconventional Automata on Swarm Behaviours
Also, we can deﬁne a diagonal relation in A ⊂P(Ω):
1A = {⟨Aγ0,...,γ ′
0, Aγ0,...,γ ′
0⟩: Aγ0,...,γ ′
0 ∈A },
and an inverse relation:
Φ−1 = {⟨Aγ0,...,γ ′
0, Bγ ′′
0 ,...,γ ′′′
0 ⟩: ⟨Bγ ′′
0 ,...,γ ′′′
0 , Aγ0,...,γ ′
0⟩∈Φ}.
In other words, while Φ ⊆A × B, Φ−1 ⊆B × A , where A , B ⊆P(Ω)
If Φ is a relation from A to B, then
Φ ◦1B = 1A ◦Φ = Φ;
Φ ◦Φ−1 = 1A ;
Φ−1 ◦Φ = 1B.
Let Φ1, …, Φn be relations, ◦their product, −1 their inverse relation, 1 their
diagonal. Then we have a group.
The horizontal equivalence on the set A is said to be any reﬂexive, symmetric,
and transitive relation Φ in A . This means that we have respectively:
1. Φ ⊇1A ,
2. Φ−1 = Φ,
3. Φ ◦Φ ⊆Φ.
Let us deﬁne an absolute member 0A for each set A ⊆P(Ω) as follows:
0A = {⟨Ωγ0,...,γ ′
0, Ωγ0,...,γ ′
0⟩: Aγ0,...,γ ′
0 ∈A }.
It means that for any A ⊆P(Ω), 1A ⊆0A .
A diagonalization of a relation Φ has the following meaning:
Φ−1 = {⟨Ωγ ′′
0 ,...,γ ′′′
0 , Ωγ0,...,γ ′
0⟩: ⟨Aγ0,...,γ ′
0, Bγ ′′
0 ,...,γ ′′′
0 ⟩∈Φ}
Continuing in the same way, we say that a diagonalization of a relation Φ−1 has
the following meaning:
Φ = {⟨Ωγ0,...,γ ′
0, Ωγ ′′
0 ,...,γ ′′′
0 ⟩: ⟨Bγ ′′
0 ,...,γ ′′′
0 , Aγ0,...,γ ′
0⟩∈Φ−1}
The features of diagonalizations are as follows:
1. Φ ◦Φ−1 = 0A ;
2. Φ−1 ◦Φ = 0B;
3. Φ ◦Φ−1 = Φ−1;
4. Φ−1 ◦Φ = Φ;

4.3 Unconventional Approach to Simulating the Swarm Behaviour
157
5. Φ ◦Φ−1 = Φ−1;
6. Φ−1 ◦Φ = Φ;
7. if Φ−1 is a diagonalization from B to A , then Φ−1 ◦0A = 0B ◦Φ−1 = Φ−1;
8. if Φ is a diagonalization from A to B, then Φ ◦0B = 0A ◦Φ = Φ.
From this it follows that
1. 1A ◦0A = 0A ,
2. 0A ◦1A = 1A .
Let Φ1, …, Φn be relations, Φ−1
1 , …, Φ−1
n
their diagonalizations, ◦their product
extended to diagonalizations, −1 their inverse relation extended to diagonalizations,
1 their diagonal, 0 their absolute member. Then we have a non-linear group.
In non-linear groups we have absolute members Φ−1
1 , …, Φ−1
n
which give the
rigid limits, respectively, for the behaviours Φ1, …, Φn, and the greatest absolute
member 0 that gives the rigid limits for all possible behaviours.
A relation Φ is a function from A to B if and only if Φ ◦Φ−1 ⊇1A and Φ−1 ◦
Φ ⊆1B. A diagonalization Φ−1 is a function if and only if Φ ◦Φ−1 ⊆0A and
Φ−1 ◦Φ ⊇0B.
A mapping is said to be the triple ⟨A , B, f ⟩, where the set A is called origin of
f , B is called its goal, f is a function from A to B. If for mappings f : A →B,
g : B →C , and h : A →C the equality f ◦g = h takes place, then we say that
an appropriate diagram is commutative.
The triple ⟨A , B, f −1⟩is called a mapping diagonaization.
A mapping f is surjective if f −1 ◦f = 1B. In this case, the range of values of
f is equal to B. On the other hand, a mapping f is injective if f ◦f −1 = 1A . In
this case the identity of images tells us about the identity of inverse images. If a
mapping is both surjective and injective, then it is called a bijection or one-to-one
correspondence.
A mapping diagonalization f −1 is surjective if f ◦f −1 = 0A . In this case, the
range of values of f −1 is equal to the diagonalization of A . On the other hand, a
mapping f −1 is injective if f −1 ◦f = 0B. In this case the identity of images tells us
about the identity of inverse images. If a mapping diagonalization is both surjective
and injective, then it is bijective.
Let q = f ◦f −1. Then q ia a horizontal equivalence. Indeed, ﬁrst, f ◦f −1 ⊇
1A , second, ( f ◦f −1)−1 = ( f −1)−1 ◦f −1 = f ◦f −1, third, f ◦f −1 ◦f ◦f −1
belongs to f ◦1B ◦f −1, because f −1 ◦f ⊆1B, thus, from f ◦f −1 ◦f ◦f −1 it
follows that f ◦f −1. The equivalence q = f ◦f −1 is called kernel equivalence or
core of mapping f and it is denoted by Ker f .
If q is an equivalence on A , then for any X ∈A there exists a subset |X|q of set
A deﬁned by equality:
|X|q = {Y ∈A : ⟨X, Y⟩∈q}.
Instead of ⟨X, Y⟩∈q very often the notation X ≡Y(mod q) or only X ≡Y is
used. The set |X|q is called q-class of the member X or coset of the member X if

158
4
Conventional and Unconventional Automata on Swarm Behaviours
ﬁxing q1, q2, …qn does not play any role. From properties of horizontal equivalence
it follows that if q-classes are intersected (have joint members), then these classes
form the one joint q-class.
The intersection of any system of equivalence relations on the set A is an equiva-
lence relation on A . The residue classes (classes of equivalences) either are mutually
disjoint or coincide.
Therefore q-classes make partition of set A , partitioning of A onto non-empty
disjoint subsets. A subset of power set P(A ) consisting of all q-classes is called
horizontal quotient set of set A by the equivalence relation q and it is denoted
by A /q. If q is kernel equivalence, then an appropriate quotient set is denoted by
A /Ker f . If each X ∈A is associated with |X|q, then we have a mapping from A
to A /q which is called natural mapping or canonical mapping and is denoted by
nat q. Obviously, this mapping is surjective.
The vertical equivalence on the set A is said to be any reﬂexive, symmetric, and
supertransitive relation Φ−1 in A , i.e. such that:
1. Φ−1 ⊇1A ,
2. (Φ−1)−1 = Φ−1,
3. Φ−1 ◦Φ−1 ⊇Φ−1.
Let q = f ◦f −1. Then q is a vertical equivalence. First, f ◦f −1 ⊆0A . Second,
( f ◦f −1)−1 = f ◦f −1. Third, f ◦f −1 ◦f ◦f −1 ⊇f ◦f −1. This equivalence is
called atom equivalence and it is denoted by Atm f −1.
Let q be a vertical equivalence on A . Then for any X such that X ∈A there
exists the class ∥X∥q deﬁned by equality:
∥X∥q = {Y : ⟨X, Y⟩∈q and Y ∈A }.
The union of any system of vertical equivalences on the set A is a vertical equiva-
lence on A . The residue classes of vertical equivalences can be always united. From
this proposition it follows that any two classes of vertical equivalence on the same
set A have always a non-empty intersection that may appear not a class of vertically
equivalent members.
In the class of p-adic valued strings we can deﬁne the vertical equivalence q as
follows:
q(Aγ0,...,γ ′
0, Bγ ′′
0 ,...,γ ′′′
0 ) i f and only i f P(Aγ0,...,γ ′
0|Bγ ′′
0 ,...,γ ′′′
0 ) > 0.
We can check that it has the following properties:
• identity: q(Aγ0,...,γ ′
0, Aγ ′′
0 ,...,γ ′′′
0 ) for any Aγ0,...,γ ′
0 ⊆Ω, as
P(Aγ0,...,γ ′
0|Aγ0,...,γ ′
0) > 0;
• symmetry: if q(Aγ0,...,γ ′
0, Bγ ′′
0 ,...,γ ′′′
0 ), then q(Bγ ′′
0 ,...,γ ′′′
0 , Aγ0,...,γ ′
0) for any Aγ0,...,γ ′
0,

4.3 Unconventional Approach to Simulating the Swarm Behaviour
159
Bγ ′′
0 ,...,γ ′′′
0 ⊆Ω, since from P(Aγ0,...,γ ′
0|Bγ ′′
0 ,...,γ ′′′
0 ) > 0 it follows that
P(Bγ ′′
0 ,...,γ ′′′
0 |Aγ0,...,γ ′
0) > 0.
• supertransitivity: if q(Aγ0,...,γ ′
0, Cγ ′′′′
0 ,...,γ ′′′′′
0 ), then there exists Bγ ′′
0 ,...,γ ′′′
0 ⊆Ω such
that q(Bγ ′′
0 ,...,γ ′′′
0 , Cγ ′′′′
0 ,...,γ ′′′′′
0 ) and q(Aγ0,...,γ ′
0, Bγ ′′
0 ,...,γ ′′′
0 ), because from
P(Aγ0,...,γ ′
0|Cγ ′′′′
0 ,...,γ ′′′′′
0 ) > 0 it follows that there exists Bγ ′′
0 ,...,γ ′′′
0 such that
P(Bγ ′′
0 ,...,γ ′′′
0 |Cγ ′′′′
0 ,...,γ ′′′′′
0 ) > 0 and P(Aγ0,...,γ ′
0|Bγ ′′
0 ,...,γ ′′′
0 ) > 0. It gives a vertical par-
tition. Let us show that we have no transitivity. Assume that P(Aγ0,...,γ ′
0) =
. . . 01011, P(Bγ ′′
0 ,...,γ ′′′
0 ) = . . . 10010, P(Cγ ′′′′
0 ,...,γ ′′′′′
0 ) = . . . 01000. Then
P(Aγ0,...,γ ′
0|Bγ ′′
0 ,...,γ ′′′
0 ) > 0 and P(Aγ0,...,γ ′
0|Cγ ′′′′
0 ,...,γ ′′′′′
0 ) > 0, but
P(Bγ ′′
0 ,...,γ ′′′
0 )|Cγ ′′′′
0 ,...,γ ′′′′′
0 ) = 0.
Notably that the supertransitivity is a feature of p-adic valued probabilities. In
real probabilities with values in the interval [0, 1] of real numbers the conditional
probability P(A|B) > 0 deﬁnes a standard equivalence relation (called by us hor-
izontal equivalence) that gives a partition of Ω into disjoint subsets. In particular,
P(A|B) > 0 satisﬁes the transitivity: there exists B such that if P(B|C) > 0 and
P(A|B) > 0, then P(A|C) > 0. It gives a (horizontal) partition.
In the class of p-adic valued strings we can deﬁne also the horizontal equivalence
q as follows:
q(Aγ0,...,γ ′
0, Bγ ′′
0 ,...,γ ′′′
0 ) i f and only i f
sup(P(Aγ0,...,γ ′
0), P(Bγ ′′
0 ,...,γ ′′′
0 ))
P(Bγ ′′
0 ,...,γ ′′′
0 )
> 0.
Let us check that it has the next properties:
• identity: q(Aγ0,...,γ ′
0, Aγ ′′
0 ,...,γ ′′′
0 ) for any Aγ0,...,γ ′
0 ⊆Ω, as
sup(P(Aγ0,...,γ ′
0), P(Aγ0,...,γ ′
0))
P(Aγ0,...,γ ′
0)
> 0;
• symmetry: if q(Aγ0,...,γ ′
0, Bγ ′′
0 ,...,γ ′′′
0 ), then q(Bγ ′′
0 ,...,γ ′′′
0 , Aγ0,...,γ ′
0) for any Aγ0,...,γ ′
0,
Bγ ′′
0 ,...,γ ′′′
0 ⊆Ω, since from
sup(P(Aγ0,...,γ ′
0),P(Bγ ′′
0 ,...,γ ′′′
0 ))
P(Bγ ′′
0 ,...,γ ′′′
0 )
> 0 it follows that
sup(P(Bγ ′′
0 ,...,γ ′′′
0 ), P(Aγ0,...,γ ′
0))
P(Aγ0,...,γ ′
0)
> 0.
• transitivity: if q(Bγ ′′
0 ,...,γ ′′′
0 , Cγ ′′′′
0 ,...,γ ′′′′′
0 ) and q(Aγ0,...,γ ′
0, Bγ ′′
0 ,...,γ ′′′
0 ), then

160
4
Conventional and Unconventional Automata on Swarm Behaviours
q(Aγ0,...,γ ′
0, Cγ ′′′′
0 ,...,γ ′′′′′
0 ), indeed, from
sup(P(Bγ ′′
0 ,...,γ ′′′
0 ),P(Cγ ′′′′
0
,...,γ ′′′′′
0
))
P(Cγ ′′′′
0
,...,γ ′′′′′
0
)
> 0 and
sup(P(Aγ0,...,γ ′
0),P(Bγ ′′
0 ,...,γ ′′′
0 ))
P(Bγ ′′
0 ,...,γ ′′′
0 )
> 0 it follows that
sup(P(Aγ0,...,γ ′
0),P(Cγ ′′′′
0
,...,γ ′′′′′
0
))
P(Cγ ′′′′
0
,...,γ ′′′′′
0
)
> 0.
Now, we can deﬁne non-linear permutation groups by appealing to the p-adic
probabilities, see Sect.4.3.4.
The standard permutation group, G , on sets of p-adic valued strings is deﬁned as
follows.Letusconsidersomezones A, B, C, . . . withscatteredattractants.Eachzone
can be active if it is occupied by a swarm and logistically optimized for some needs
of this swarm. If a zone X became active, it is denoted by γX. If γA, γB are two active
zones which contain joint occupied nodes, then γA · γB is a result of composition. We
can assume that the operation γA · γB satisﬁes the law of associativity. Let us deﬁne
the unit member e as stopping in the swarm propagation, when nothing moves. And
let us deﬁne the inverse member γ −1
X
as deactivating the zone of X. Hence,
e · γX = γX · e = γX
(4.1)
γ −1
X
· γX = γX · γ −1
X
= e
(4.2)
A non-linear extension of G is being obtained in the following manner. Let γ −1
X
be an activization at the zone of X such that it is a class of members which are
vertical equivalent to γX, i.e. γ −1
X
= {γY : P(γX|γY) > 0 and P(γX|γY) ∈Qp}. Let
γX be a deactivization at the zone of X such that it is a class of members which
are vertical equivalent to γ −1
X , i.e. γX = {γ −1
Y
: P(γ −1
X |γ −1
Y ) > 0 and P(γ −1
X |γ −1
Y ) ∈
Qp}. Finally, let e be an absolute member or hyperunit.
We have the following equalities:
γX · γ −1
X
= e
(4.3)
γ −1
X
· γX = e
(4.4)
γX · γ −1
X
= γ −1
X
(4.5)
γ −1
X
· γX = γ −1
X
(4.6)
γ −1
X
· γX = γX
(4.7)
γX · γ −1
X
= γX
(4.8)
e · e = e
(4.9)
e · e = e
(4.10)
which give us a non-linear permutation group. See Proposition 8.1.

4.3 Unconventional Approach to Simulating the Swarm Behaviour
161
I have offered to distinguish the following two stages in the swarm propagation:
the discovering stage and the logistic stage. At the discovering stage we can ascribe
a p-adic valued code to each string in the way of Sect.4.3.2. At the logistic stage
we can ascribe a p-adic valued weight to each string in the way of Sect.4.3.4. On
sets of p-adic valued strings we can deﬁne relations and functions (Sect.4.3.5). And
by using p-adic valued probabilities we can introduce a non-linear group by adding
axioms (4.3)–(4.10) to standard group-theoretic axioms (4.1), (4.2), see Sect.4.3.5.
The new axioms allow us to introduce the absolute member e that holds the limits
for the swarm propagation (Sect.4.3.3).
Hence, in any intelligent swarm behaviour there are emergent patterns that cannot
be reduced to linear combinations of subsystems. Therefore conventional algorithms
such as Kolmogorov-Uspensky machines have very low accuracy of their implemen-
tations on swarm systems. Nevertheless, we can deﬁne a p-adic valued logic that can
describe a massive-parallel behaviour of swarms.
References
1. Schumann, A.: Group theory and P-adic valued models of swarm behaviour. Math. Methods
Appl. Sci. https://doi.org/10.1002/mma.4540
2. Schumann, A.: From swarm simulations to swarm intelligence. In: BICT 2015, Proceedings
of the 9th EAI International Conference on Bio-inspired Information and Communications
Technologies (formerly BIONETICS), December 3–5, pp. 461–468. New York City, United
States (2015)
3. Schumann, A.: Towards slime mould based computer. New Math. Nat. Comput. 12(2), 97–111
(2016). https://doi.org/10.1142/S1793005716500083
4. Schumann, A.: Conventional and unconventional approaches to swarm logic. In: Adamatzky,
A. (ed.) Advances in Unconventional Computing: Volume 1: Theory, pp. 711–734. Springer
International Publishing, Cham (2017)
5. Schumann, A.: P-adic valued models of swarm behaviour. AIP Conf. Proc. 1863(1), 360009
(2017). https://doi.org/10.1063/1.4992538
6. Schumann, A., Pancerz, K., Szelc, A.: The swarm computing approach to business intelli-
gence. Stud. Hum. 4(3), 41–50 (2015). https://doi.org/10.1515/sh-2015-0019
7. Bonabeau, E., Dorigo, M., Theraulaz, G.: Swarm Intelligence: from natural to artiﬁcial sys-
tems. Oxford University Press (1999)
8. Kassabalidis, I., El-Sharkawi, M.A., Marks, R.J., Arabshahi, P., Gray, A.A.: Swarm intelli-
gence for routing in communication networks. In: 2001 IEEE Global Telecommunications
Conference, GLOBECOM ’01, vol. 6, pp. 3613–3617. IEEE (2001)
9. Wang, Y., Li, B., Weise, T., Wang, J., Yuan, B., Tian, Q.: Self-adaptive learning based particle
swarm optimization. Inf. Sci. 181(20), 4515–4538 (2011)
10. Gordon, D.: The organization of work in social insect colonies. Complexity 8(1), 43–46 (2003)
11. Kennedy, J., Eberhart, R.: Swarm Intelligence. Morgan Kaufmann Publishers, Inc. (2001)
12. Passino, K.M.: Biomimicry of bacterial foraging for distributed optimization and control.
Control Syst. 22(3), 52–67 (2002)
13. Karaboga, D.: An idea based on honey bee swarm for numerical optimization. Technical
Report-tr06, Engineering Faculty, Computer Engineering Department, Erciyes University
(2005)
14. Rajabioun, R.: Cuckoo optimization algorithm. Appl. Soft Comput. 11, 5508–5518 (1987)
15. Cuevas,E.,Cienfuegos,M.,Zaldivar,D.,Perez-Cisneros,M.:Aswarmoptimizationalgorithm
inspired in the behavior of the social-spider. Expert Syst. Appl. 40(16), 6374–6384 (2013)

162
4
Conventional and Unconventional Automata on Swarm Behaviours
16. Dorigo, M., Stutzle, T.: Ant Colony Optimization. MIT Press (2004)
17. Lee, C.: Emergence and universal computation. Metroeconomica 55(2–3), 219–238 (2004)
18. Hafner, G.S., Tokarski, T.R.: Morphogenesis and pattern formation in the retina of the crayﬁsh
Procambarus clarkii. Cell Tissue Res. 293, 535–550 (1998)
19. Wolfram, S.: Universality and complexity in cellular automata. Physica D 10, 1–35 (1984)
20. Kennedy, J., Eberhart, R.C.: Particle swarm optimization. In: Proceedings of the 1995 IEEE
International Conference on Neural Networks, vol. 4, pp. 1942–1948. Perth, Australia, IEEE
Service Center, Piscataway, NJ (1995)
21. Reynolds, C.W.: Flocks, herds, and schools: a distributed behavioral model. Comput. Gr. 21,
25–34 (1987)
22. Reynolds, R.G.: An introduction to cultural algorithms. In: Proceedings of the 3rd Annual
Conference on Evolutionary Programming, pp. 131–139 (1994)
23. Karaboga, D., Akay, B.: A comparative study of artiﬁcial bee colony algorithm. Appl. Math.
Comput. 214(1), 108–132 (2009)
24. Darnton,N.C.,Turner,L.,Rojevsky,S.,Berg,H.C.:Dynamicsofbacterialswarming.Biophys.
J. 98, 2082–2090 (2010)
25. Turner, L., Zhang, R., Darnton, N.C., Berg, H.C.: Visualization of ﬂagella during bacterial
swarming. J. Bacteriol. 192, 3259–3267 (2010)
26. Ariel, G., Shklarsh, A., Kalisman, O., Ingham, C., Ben-Jacob, E.: From organized internal
trafﬁc to collective navigation of bacterial swarms. New J. Phys. 15, 12,501 (2013)
27. Ingham, C.J., Kalisman, O., Finkelshtein, A., Ben-Jacob, E.: Mutually facilitated dispersal
between the nonmotile fungus aspergillus fumigatus and the swarming bacterium paeni bacil-
lus vortex. Proc. Nat. Acad. Sci. U.S.A. 108(49), 19731–19736 (2011)
28. Shklarsh, A., Finkelshtein, A., Ariel, G., Kalisman, O., Ingham, C., Ben-Jacob, E.: Collective
navigation of cargo-carrying swarms. Interface Focus 2, 689–692 (2012)
29. Ingham, C.J., Ben-Jacob, E.: Swarming and complex pattern formation in paenibacillus vortex
studied by imaging and tracking cells. BMC Microbiology 36, 8 (2008)
30. Schumann, A.: Towards context-based concurrent formal theories. Parallel Process. Lett. 25,
1540,008 (2015)
31. Kolmogorov, A.N.: On the concept of algorithm. Uspekhi Mateaticheskich Nauk 8(4), 175–
176 (1953)
32. Uspensky, V.U.: Kolmogorov and mathematical logic. J. Symb. Logic 57, 385–412 (1992)
33. Schoenhage, A.: Real-time simulation of multi-dimensional turing machines by storage mod-
iﬁcation machines. Project MAC technical memorandum 37, MIT (1973)
34. Schoenhage, A.: Storage modiﬁcation machines. SIAM J. Comput. 9, 490–508 (1980)
35. Tarjan, R.E.: Reference machines require non-linear time to maintain disjoint sets. Stan-cs-
77–603 (1977)
36. Adamatzky, A.: Physarum machine: implementation of a Kolmogorov-Uspensky machine on
a biological substrate. Parallel Process. Lett. 17(4), 455–467 (2007)
37. Kalogeiton, V.S., Papadopoulos, D.P., Georgilas, I., Sirakoulis, G.C., Adamatzky, A.: Cellular
automaton model of crowd evacuation inspired by slime mould. Int. J. Gen. Syst. 44(3), 354–
391 (2015). https://doi.org/10.1080/03081079.2014.997527
38. Nakagaki, T., Yamada, H., Toth, A.: Maze-solving by an amoeboid organism. Nature 407,
470–470 (2000)
39. Nakagaki, T., Yamada, H., Tothm, A.: Path ﬁnding by tube morphogenesis in an amoeboid
organism. Biophys. Chem. 92, 47–52 (2001)
40. Nakagaki, T., Iima, M., Ueda, T., Nishiura, Y., Saigusa, T., Tero, A., Kobayashi, R., Showalter,
K.: Minimum-risk path ﬁnding by an adaptive amoeba network. Phys. Rev. Lett. 99, 68–104
(2007)
41. Ntinas, V.G., Vourkas, I., Sirakoulis, G.C., Adamatzky, A.: Oscillation-based slime mould
electronic circuit model for maze-solving computations. IEEE Trans. Circuits Syst. 64-I(6),
1552–1563 (2017)
42. Shirakawa, T., Yokoyama, K., Yamachiyo, M., Y-p, G., Miyake, Y.: Multi-scaled adaptability
in motility and pattern formation of the Physarum plasmodium. Int. J. Bio-Inspir. Comput. 4,
131–138 (2012)

References
163
43. Tero,A.,Nakagaki,T.,Toyabe,K.,Yumiki,K.,Kobayashi,R.:AmethodinspiredbyPhysarum
for solving the Steiner problem. Int. J. Unconv. Comput. 6(2), 109–123 (2010)
44. Tsuda, S., Aono, M., Gunji, Y.P.: Robust and emergent Physarum-computing. BioSystems
73, 45–55 (2004)
45. Watanabe, S., Tero, A., Takamatsu, A., Nakagaki, T.: Trafﬁc optimization in railroad networks
using an algorithm mimicking an amoeba-like organism. Physarum plasmodium. Biosystems
105(3), 225–232 (2011)
46. Westendorf, C., Gruber, C., Grube, M.: Quantitative comparison of plasmodial networks of
different slime molds. In: BICT 2015, Proceedings of the 9th EAI International Conference
on Bio-inspired Information and Communications Technologies (formerly BIONETICS),
December 3-5, pp. 611–612. New York City, United States (2015). http://dl.acm.org/citation.
cfm?id=2954754
47. Whiting, J.G.H., de Lacy Costello, B., Adamatzky, A.: Transfer function of protoplasmic
tubes of Physarum polycephalum. Biosystems 128, 48–51 (2015)
48. Adamatzky, A., Yang, X., Zhao, Y.: Slime mould imitates transport networks in china. Int. J.
Intell. Comput. Cybern. 6(3), 232–251 (2013). https://doi.org/10.1108/IJICC-02-2013-0005
49. Adamatzky, A., Ilachinski, A.: Slime mold imitates the united states interstate system. Com-
plex Syst. 21(1) (2012)
50. Koblitz, N.: P-adic numbers, P-adic analysis and zeta functions, 2nd edn. Springer (1984)
51. Adamatzky, A.: Physarum Machines: computers from slime mould. World Scientiﬁc, Series
on Nonlinear Science Series A (2010)
52. Shirakawa, T., Sato, H., Ishiguro, S.: Constrcution of living cellular automata using the
Physarum polycephalum. Int. J. Gen. Syst. 44, 292–304 (2015)
53. Ben-Jacob, E.: Social behavior of bacteria: from physics to complex organization. Eur. Phys.
J. B 65(3), 315–322 (2008)
54. Ivanitsky, G.R., Kunisky, A.S., Tzyganov, M.A.: Study of ‘target patterns’ in a phage-
bacterium system. In: Krinsky, V. (ed.) Self-organization: Autowaves and Structures Far From
Equilibrium, pp. 214–217. Springer, Heidelberg (1984)
55. Margenstern, M.: Bacteria inspired patterns grown with hyperbolic cellular automata. In:
HPCS, pp. 757–763 (2011)
56. Margenstern, M.: An algorithmic approach to tilings of hyperbolic spaces: universality results.
Fundam. Inform. 138(1–2), 113–125 (2015)
57. Schumann, A.: p-adic valued logical calculi in simulations of the slime mould behaviour.
J. Appl. Non-Class. Log. 25(2), 125–139 (2015). https://doi.org/10.1080/11663081.2015.
1049099

Chapter 5
Non-Archimedean Valued Fuzzy
and Probability Logics
In this chapter, I concern some basic logical aspects of non-Archimedean valued
probabilities and non-Archimedean valued fuzziness involved in simulating swarm
behaviours. So, this chapter contains general results concerning non-Archimedean
probabilities and fuzziness, i.e. logical values which run over an uncountable inﬁnite,
non-well-ordered and non-well-founded set. This kind of probabilities and fuzziness
generalizes the notion of p-adic valued probabilities deﬁned in [1–7]. This chapter
contains results published in [8–22]. About p-adic numbers used in modeling cog-
nitions, see also [23].
5.1
Non-Archimedean Numbers as Logical Values
Let us remember that the Archimedean axiom afﬁrms that for any positive real or
rational number ε, there exists a positive integer n such that ε ≥1
n or n · ε ≥1. The
ﬁeld that satisﬁes all properties of R of real numbers without Archimedes’ axiom is
called the ﬁeld of hyperreal numbers and it is denoted by ∗R. The ﬁeld that satisﬁes
all properties of Q of rational numbers without Archimedes’ axiom is called the
ﬁeld of hyperrational numbers and it is denoted by ∗Q. By deﬁnition of ﬁeld, if
ε ∈R (resp. ε ∈Q), then 1/ε ∈R (resp. 1/ε ∈Q). Therefore ∗R and ∗Q contain
simultaneously inﬁnitesimals and inﬁnitely large integers: for an inﬁnitesimal ε, we
have N = 1
ε, where N is an inﬁnitely large integer.
In this chapter, I will consider logical values deﬁned on the following three sets:
(i) the set ∗R of hyperreal numbers, (ii) the set ∗Q of hyperrational numbers, (iii)
the set Zp of p-adic integers. It is well known that sets ∗R, ∗Q satisfy properties of
ﬁeld and set Zp properties of ring. All those sets contain inﬁnitely large numbers and
in addition sets ∗R, ∗Q contain inﬁnitesimals (inﬁnitely small numbers). For more
details on inﬁnitesimal and p-adic analysis see: [24–29].
© Springer International Publishing AG, part of Springer Nature 2019
A. Schumann, Behaviourism in Studying Swarms: Logical Models of Sensing
and Motoring, Emergence, Complexity and Computation 33,
https://doi.org/10.1007/978-3-319-91542-5_5
165

166
5
Non-Archimedean Valued Fuzzy and Probability Logics
Probability theory ﬁrst axiomatized by Andrey Kolmogorov is closed over prop-
erties of a probability space ⟨Ω, F, P⟩consisting of: (i) an arbitrary non-empty set
Ω called the sample space; (ii) the σ-ﬁeld F, i.e. a set of subsets of Ω containing
the sample space (that is, Ω ∈F) such that F is closed under complements (that
is, if A ∈F, then also (¬A) ∈F) and it is closed under countable unions (that is,
if Ai ∈F for i = 1, 2, . . ., then also (
i Ai) ∈F); (iii) the probability measure P:
F →[0, 1], i.e. a function on F such that P on Ω is equal to one (that is, P(Ω) = 1)
and P is countably additive (that is, if Ai ∈F is a countable collection of pairwise
disjoint sets, then P(
i Ai) = 
i P(Ai)).
As we see, the probability measure P takes real numbers of [0, 1] as its values.
Nevertheless, according to Alexander Ostrowski’s theorem proved in 1916, any non-
trivial norm on the ﬁeld Q of rational numbers is equivalent to either the usual real
absolute value | · |∞giving the ﬁeld R of real numbers as completion of Q or a
p-adic norm | · |p for some prime number p giving the ﬁeld Qp of p-adic numbers
as completion of Q, see [27]. In other words, we can construct a completion of the
ﬁeld Q with respect to a norm just in two ways: either as R or Qp. This means that
we can try to deﬁne a probability measure taking values on Qp as well.
For the ﬁrst time, Andrei Khrennikov proposed an approach to p-adic probability
theory, i.e. to probability theory with values not in [0, 1], but in Qp. This theory
was involved by him in solving some quantum paradoxes [30–33] and in modelling
cognitive abilities [34, 35]. Several signiﬁcant generalizations of his approach are
contained in [3, 4, 36].
By his works Khrennikov suggested two ways of studies of p-adic probability
logics: ﬁrst, conventional logics closed over propositions such as “the probability of
α belongs to the p-adic ball with the center r and the radius ρ”, “the p-adic distance
between the probabilities of α and β is less than or equal to ρ”, etc. (see [1, 2, 7,
37]), second, unconventional logics closed over propositions whose truth values run
over all p-adic numbers or hypernumbers (see [11–15, 17]).
In this chapter, I am constructing non-Archimedean valued fuzzy logics ŁΠ∀∞
and ŁΠ 1
2∀∞and a p-adic valued fuzzy logic BL∀∞that are built as ω-order
extensions of the logics ŁΠ∀, ŁΠ 1
2∀, and BL∀respectively. Recall that the log-
ics ŁΠ∀, ŁΠ 1
2∀, BL∀are considered in [38–41]. About fuzzy logic see [42]. The
non-Archimedean fuzziness is considered in the framework of the t-norm based
approach. The idea of non-Archimedean multiple-validity and non-Archimedean
fuzziness is that (1) the set of values for the fuzziness is uncountable inﬁnite and (2)
this set isn’t well-ordered and well-founded. This idea can have a lot of applications
in probabilistic reasoning (see [5, 6, 15]).
Further, I get non-Archimedean probabilities on a class of non-Archimedean val-
ued fuzzy subsets and build a non-Archimedean probability logic on the basis of
BL∀∞.
In this chapter, I cover the main essentials of the t-norm based approach, deﬁning
fuzzy logics as logics based on t-norms and their residua. Recall that t-norm is an
operation ∗: [0, 1]2 →[0, 1] which is commutative and associative, non-decreasing
in both arguments and have 1 as unit element and 0 as zero element, i.e.

5.1 Non-Archimedean Numbers as Logical Values
167
x ∗y = y ∗x,
(x ∗y) ∗z = x ∗(y ∗z),
x ≤x′ and y ≤y′ implies x ∗y ≤x′ ∗y′,
1 ∗x = x, 0 ∗x = 0.
We shall use only continuous t-norms as truth-functions of a conjunction. Each
t-norm determines uniquely its corresponding implication ⇒(residuum) satisfying
for all x, y, z ∈[0, 1],
z ≤x ⇒y iff x ∗z ≤y
The following are important examples of continuous t-norms and their residua:
1. Łukasiewicz’s logic:
• x ∗y = max(x + y −1, 0),
• x ⇒y = 1 for x ≤y and x ⇒y = 1 −x + y otherwise.
In this logic ∗and ⇒are denoted by &L and →L respectively.
2. Gödel’s logic:
• x ∗y = min(x, y),
• x ⇒y = 1 for x ≤y and x ⇒y = y otherwise.
In this logic ∗and ⇒are denoted by &G and →G respectively.
3. Product logic:
• x ∗y = x · y
• x ⇒y = 1 for x ≤y and x ⇒y = y/x otherwise.
In this logic ∗and ⇒are denoted by &Π and →Π respectively.
A regular residuated lattice (or a BL-algebra) is an algebra LL = ⟨L, ∧, ∨, ∗, ⇒,
0, 1⟩such that (1) ⟨L, ∧, ∨, 0, 1⟩is a lattice with the largest element 1 and the least
element 0, (2) ⟨L, ∗, 1⟩is a commutative semigroup with the unit element 1, i.e. ∗is
commutative, associative, and 1 ∗x = x for all x, (3) the following conditions hold
z ≤(x ⇒y) iff x ∗z ≤y for all x, y, z;
x ∧y = x ∗(x ⇒y);
x ∨y = ((x ⇒y) ⇒y) ∧((y ⇒x) ⇒x),
(x ⇒y) ∨(y ⇒x) = 1.
It is known the following result. Let ∗be a continuous t-norm with residuum ⇒, then
A = ⟨[0, 1], min, max, ∗, ⇒, 0, 1⟩is a BL-algebra, called a standard BL-algebra;

168
5
Non-Archimedean Valued Fuzzy and Probability Logics
if ∗is the Łukasiewicz, Gödel or Product t-norm then A is an L-algebra, G-algebra
or Π-algebra respectively, called the standard L-algebra, G-algebra or Π-algebra.
5.1.1
Hypernumbers
Let Θ be a set and I an inﬁnite set of indices. We consider, in a standard way, the
family Θ I, i.e. the set of all functions: f : I →Θ. Now we deﬁne a ﬁlter F on I as
a family of sets F ⊂2I for which: (1) A ∈F, A ⊂B →B ∈F; (2) A1, . . . , An ∈
F →
n
k=1
Ak ∈F for any n ≥1; (3) ∅/∈F. The set of all complements for ﬁnite
subsets of I is a ﬁlter and it is called a Fréchet ﬁlter on I and it is denoted by UI.
Further, deﬁne a relation ∽on the set Θ I by f ∽g ≡{α ∈I : f (α) = g(α)} ∈
UI. It is easily be proved that the relation ∽is an equivalence. For each f ∈Θ I
let [ f ] denote the equivalence class of f under ∽. The ultrapower Θ I/UI is then
deﬁned to be the set of all equivalence classes [ f ] as f ranges over Θ I : Θ I/UI :=
{[ f ]: f ∈Θ I}.
The ultrapower Θ I/UI is said to be a proper nonstandard extension of Θ and it
is denoted by ∗Θ. Recall that each element of ∗Θ is an equivalence class [ f ] where
f : I →Θ. There exist two groups of members of ∗Θ: (1) equivalence classes
of constant functions, e.g. f (α) = m ∈Θ for all α ∈I. Such equivalence class is
denoted by ∗m or [ f = m], (2) equivalence classes of functions that aren’t constant.
The set σΘ = {∗m : m ∈Θ} is called standard set. The members of σΘ are called
standard. It is readily seen that σΘ and Θ are isomorphic: σΘ ≃Θ.
If Θ is a number system, then members of ∗Θ will be called hypernumbers. We
can deﬁne operations on them:
[ f ] ⊙[g] = [h] ≡{α ∈I : f (α) ⊙g(α) = h(α)} ∈UI,
where ⊙∈{+, −, ·, /}
In this way we can obtain hyperreal numbers of ∗R and hyperrational numbers of
∗Q satisfying properties of ﬁeld.
5.1.2
p-Adic Numbers
Now we are trying to compare p-adic numbers with hypernumbers. For this let us
consider a particular case of nonstandard extension when Θ is a ﬁnite set such that
|Θ| = p, where p is a prime number. Since we stopped to consider the general case
there is no need to excuse that we lose generality. Let the set N of natural numbers
be the index set and let UN be a Fréchet ﬁlter on N. Then there exists a nonstandard
extension ∗Θ := ΘN/UN.

5.1 Non-Archimedean Numbers as Logical Values
169
As usual, every considered function f : N →Θ can be meant as an inﬁnite-tuple
⟨f (0), f (1), f (2), . . .⟩, where f ( j) ∈Θ for any j = 0, 1, . . .
It is obvious that if n ≤m for n, m ∈Θ, then we can set ∗n ≤∗m for ∗n, ∗m ∈∗Θ.
In other words, the order relation on the members of Θ can be extended to the order
relation on the constant functions of ∗Θ.
Now consider f, such that there is no k ∈Θ for which [ f ] = ∗k.
Let f0,…, f p−1, f p,…, f2p−1,…, f p2−p,…, f p2−1,…be functions that satisfy
the following condition:
[ fm] = [⟨n0, n1, n2, . . . , nk, 0, 0, . . . ⟩], where n0, n1, n2, . . . , nk are such that
m = n0 + n1 p + n2 p2 + · · · + nk pk.
For instance,
1. [ fk] = [⟨k, 0, 0, . . .⟩], for any k = 0, 1, . . . , p −1,
2. [ fk] = [⟨k mod p, 1, 0, . . .⟩], for any k = p, . . . , 2p −1,
3. [ fk] = [⟨k mod p, p −1, 0, . . .⟩], for any k = p2 −p, . . . , p2 −1,
4. …
We can extend the ordering relation on the members of Θ to the ordering relation
≤∗on the members [ f0],…, [ f p−1], [ f p],…, [ f2·p−1], . . ., [ f p2−p],…, [ f p2−1],…of
∗Θ. Deﬁne this order structure as follows:
⎧
⎨
⎩
[ fk] ≤∗[ fl] iff k ≤l ,
if k,l ∈N;
[ f ], [ f ′] are incompatible under ≤∗, if there is no k ∈N such that
[ f ] = [ fk] or [ f ′] = [ fk].
Notice that ≤∗is partial, because ∗Θ contains an uncountable number of its
members, therefore there exists [ f ] such that there is no k ∈N for which [ f ] = [ fk],
this [ f ] is said to be inﬁnitely large integer. We can assign the natural number to
each member [ fk] ∈∗Θ, were k is ﬁnite; namely to each [ fk] as k →∞, we can
assign the following expansion
fk(0) + fk(1) · p + . . . + fk(n) · pn + . . . =
∞

n=0
fk(n) · pn,
where fk(n) ∈{0, 1, . . . , p −1},∀n ∈N.Thisexpansioniscalledthe p-adicinteger.
This number sometimes has the following notation:
. . . βn . . . β3β2β1β0,
where β0 = fk(0), β1 = fk(1), β2 = fk(2), ….
Thus, we have shown that the nonstandard extension ΘN/UN, where
Θ = {0, . . . , p −1}, is isomorphic with the set Zp of p-adic integers. Usual denary

170
5
Non-Archimedean Valued Fuzzy and Probability Logics
operations (/, +, −, ·) can be extrapolated to the case of them, [27, 28]. For exam-
ple, for 5-adic integers . . . 02324 and . . . 003 we obtain: . . . 02324
. . . 003
= . . . 0423 (the
operation of division is not deﬁned for all p-adic integers), . . . 02324 + . . . 003 =
. . . 02332,. . . 02324 −. . . 003 = . . . 02321,. . . 02324 · . . . 003 = . . . 013032.Finite
numbers of Zp can be regarded as positive integers, namely each [ fk] considered
above such that k ∈N can be identiﬁed with k. In this way we can identify . . . 02324
with 339 and . . . 003 with 3.
5.2
Hyper-valued and p-Adic Valued Logical Matrices
5.2.1
Hyper-valued ŁΠ-Matrix
Let Q[0,1] = Q ∩[0, 1]. We can extend the usual order structure on Q[0,1] to a partial
order structure on ∗Q[0,1] := QN/UN:
1. for any ∗x, ∗y ∈σQ[0,1] we have ∗x ⪯∗∗y iff x ≤y in Q[0,1],
2. if ∗x ̸= ∗0, then [ f ] ⪯∗∗x, i.e. each positive rational number ∗x ∈σQ[0,1] is
greater than any number [ f ] ∈∗Q[0,1]\σQ[0,1].
These conditions have the following informal sense: (1) the sets σQ[0,1] and Q[0,1]
have an isomorphic order structure; (2) the set ∗Q[0,1] contains actual inﬁnities that
are less than any positive rational number of σQ[0,1]. Deﬁne this partial order structure
on ∗Q[0,1] as follows:
O∗Q
(i) For any [x], [y] ∈∗Q[0,1] we have [x] ⪯∗[y] iff {α ∈N: x(α) ≤y(α)} ∈
UN. (ii) For any ∗z ∈σQ[0,1] and [y] ∈∗Q[0,1]\σQ[0,1] if ∗z ̸= ∗0, then [y] ≺∗
∗z. Notice that we have [x] ≺∗[y] iff [x] ̸= [y] and [x] ⪯∗[y].
Introduce two operations sup, inf in the partial order structure O∗Q:
inf([x], [y]) := [min(x, y)];
sup([x], [y]) := [max(x, y)].
Note there exist the maximal number ∗1 ∈∗Q[0,1] and the minimal number ∗0 ∈
∗Q[0,1] under the meaning expressed in the condition O∗Q. Indeed, {α ∈N: x(α) ≤
1} ∈UN for any x ∈QN and {α ∈N: 0 ≤x(α)} ∈UN for any x ∈QN.
Let +, −, ·, / be the addition, subtraction, multiplication and division deﬁned
on Q; we can extend them on ∗Q as follows: [x] ⊙[y] = [z] iff {α ∈N: x(α) ⊙
y(α)) = z(α)} ∈UN, where ⊙∈{+, −, ·, /}.
Now introduce the following new operations deﬁned for all [x], [y] ∈∗Q in the
partial order structure O∗Q:
• [x] →L [y] = ∗1 −sup([x], [y]) + [y],

5.2 Hyper-valued and p-Adic Valued Logical Matrices
171
• [x] →Π [y] =
⎧
⎨
⎩
∗1
if [x] ⪯∗[y],
inf
	
∗1, [y]
[x]

otherwise,
noticethat wehaveinf
	
∗1, [y]
[x]

= [h] iff {α ∈N: min
	
1, y(α)
x(α)

= h(α)} ∈UN,
let us also remember that the members [x], [y] can be incompatible under O∗Q,
• ¬L[x] = ∗1 −[x],
i.e. [x] →L ∗0,
• ¬Π[x] =

∗1 if [x] = ∗0,
∗0 otherwise,
i.e. ¬Π[x] = [x] →Π ∗0,
• Δ[x] =

∗1 if [x] = ∗1,
∗0 otherwise,
i.e. Δ[x] = ¬Π¬L[x],
• [x]&L[y] = sup([x], ∗1 −[y]) + [y] −∗1, i.e. [x]&L[y] = ¬L([x] →L ¬L[y]),
• [x]&Π[y] = [x] · [y],
• [x] ⊕[y] := ¬L[x] →L [y],
• [x] ⊖[y] := [x]&L¬L[y],
• [x] ∧[y] = inf([x], [y]),
i.e. [x] ∧[y] = [x]&L([x] →L [y]),
Let us show that ∧is really derived from &L and →L. Recall that inf and sup
are deﬁned digit by digit. This means that if [x] = [⟨x0, x1, x2, . . .⟩] and [y] =
[⟨y0, y1, y2, . . .⟩] then
inf([x], [y]) = [⟨min(x0, y0), min(x1, y1), min(x2, y2), . . .⟩].
For each i = 0, 1, 2, . . . we have xi ≤yi or xi > yi. At the same time, if xi ≤yi,
then xi&L(xi →L yi) = max(xi, max(xi, yi) −yi) + yi −max(xi, yi) = xi and
if
xi > yi,
then
xi&L(xi →L yi) = max(xi, max(xi,
yi) −yi) + yi −max
(xi, yi) = yi.
• [x] ∨[y] = sup([x], [y]),
i.e. [x] ∨[y] = ([x] →L [y]) →L [y],
Indeed,([x] →L [y]) →L [y] = ∗1 −sup(∗1 −sup([x], [y]) + [y], [y]) + [y] =
sup([x], [y]).
• [x] ↔[y] := ([x] →L [y]) ∧([y] →L [x]),
• [x]&G[y] := inf([x], [y]),
• [x] →G [y] =

∗1
if [x] ⪯∗[y],
[y] otherwise,
i.e. [x] →G [y] = Δ([x] →L [y]) ∨[y].
Proposition 5.1 A structure L∗Q = ⟨∗Q[0,1], ⊕, ¬L, →Π, &Π, ∗0, ∗1⟩is a hyperra-
tional valued ŁΠ-matrix.
Proof We should show that
1. ⟨∗Q[0,1], ⊕, ¬L, ∗0⟩is an MV -algebra, i.e. (1) ⟨∗Q[0,1], ⊕, ∗0⟩is a commutative
monoid, (2) [x] ⊕∗1 = ∗1, (3) ¬L¬L[x] = [x], (4) ([x] ⊖[y]) ⊕[y] = ([y] ⊖
[x]) ⊕[x];
2. ⟨∗Q[0,1], ∨, ∧, →Π, &Π, ∗0, ∗1⟩is a Π-algebra, i.e. (1) ⟨∗Q[0,1], ∨, ∧⟩is a
bounded lattice with the order ⪯∗, with the top element ∗1 and the bottom element

172
5
Non-Archimedean Valued Fuzzy and Probability Logics
∗0, (2) ⟨∗Q[0,1], &Π, ∗1⟩is a commutative semigroup with the unit element ∗1, (3)
→Π and &Π form an adjoint pair, i.e. [z] ⪯∗[x] →Π [y] iff [x]&Π[z] ⪯∗[y]
for all [x], [y], [z] ∈∗Q[0,1];
3. [x]&Π([y] ⊖[z]) = ([x]&Π[y]) ⊖([x]&Π[z]).
However, all three items are readily checked. For instance,
1. ([x] ⊖[y]) ⊕[y] = ∗1 −sup[∗1 −(sup([x], [y]) −[y]), [y]] + [y] = sup
([x], [y]) = ([y] ⊖[x]) ⊕[x].
2. Show that [z] ⪯∗[x] →Π [y] iff [x]&Π[z] ⪯∗[y] for all [x], [y], [z] ∈∗Q[0,1].
(i) Suppose that [x] ⪯∗[y]. Then [z] ⪯∗[x] →Π [y] = ∗1 and [x] · [z] ⪯∗[y].
(ii) Otherwise [x] →Π [y] = inf
	
∗1, [y]
[x]

⪯∗
[y]
[x]. In this case [z] ⪯∗
[y]
[x] iff
[x] · [z] ⪯∗[y].
3. [x]&Π([y] ⊖[z]) = [x] · (sup([y], [z]) −[z]) = (sup([x] · [y], [x] · [z]) −
[x] · [z]) = ([x]&Π[y]) ⊖([x]&Π[z]).
□
A hyperrational valued ŁΠ 1
2-matrix is a structure L∗Q = ⟨∗Q[0,1], ⊕, ¬L, →Π,
&Π, ∗0, ∗1, ∗1
2⟩, where the reduct ⟨∗Q[0,1], ⊕, ¬L, →Π, &Π, ∗0, ∗1⟩is a hyperrational
valued ŁΠ-matrix and the identity ∗1
2 = ¬L∗1
2 holds.
The truth value ∗0 ∈∗Q[0,1] of a hyperrational valued ŁΠ- (resp. ŁΠ 1
2)-matrix is
falsity, the truth value ∗1 ∈∗Q[0,1] is truth, and other truth values x ∈∗Q[0,1]\{∗0, ∗1}
are called neutral.
If we replace the set Q[0,1] by R[0,1] and the set ∗Q[0,1] by ∗R[0,1] in all above
deﬁnitions, then we obtain hyperreal valued ŁΠ-matrix (resp. hyperreal valued
ŁΠ 1
2-matrix) L∗R.
5.2.2
p-Adic Valued BL-Matrix
Extend the standard order structure on N to a partial order structure on Zp. We know
that each ﬁnite number of Zp can be identiﬁed with a positive integer.
1. for any ﬁnite numbers x, y ∈Zp we have x ⪯p y iff x ≤y in N,
2. each ﬁnite natural number x is less than any inﬁnite number y, i.e. x ≺p y for
any x ∈N and y ∈Zp\N, y ̸= 0. Notice that we have x ≺p y iff x ̸= y and
x ⪯p y.
Deﬁne this partial order structure on Zp as follows:
OZp
Let x = . . . xn . . . x1x0 and y = . . . yn . . . y1y0 be the canonical expansions
of two p-adic integers x, y ∈Zp. (1) We set x ≺p y if the following three
conditions hold: (i) there exists n such that xn < yn; (ii) xk ≤yk for all k > n;
(iii) x is a ﬁnite integer, i.e. there exists l such that xm = 0 for all m ≥l. (2)
We set x = y if xn = yn for each n = 0, 1, . . . (3) Suppose that both x and y
are inﬁnite integers. We set x ⪯p y if we have xn ≤yn for each n = 0, 1, . . .

5.2 Hyper-valued and p-Adic Valued Logical Matrices
173
and we set x ≺p y if we have xn ≤yn for each n = 0, 1, . . . and there exists
n0 such that xn0 < yn0.
Now introduce two operations sup, inf in the partial order structure on Zp:
sup(x, y) = y
and
inf(x, y) = x
iff
x ⪯p y.
Let
x = . . . xn . . . x1x0
and
y = . . . yn . . . y1y0 be the canonical expansions of two p-adic integers x, y ∈Zp and
x, y are incompatible in OZp. We get inf(x, y) = z = . . . zn . . . z1z0, where, for each
n = 0, 1, . . ., we set (1) zn = yn if xn ≥yn, (2) zn = xn if xn ≤yn, (3) zn = xn = yn
if xn = yn. We get sup(x, y) = z = . . . zn . . . z1z0, where, for each n = 0, 1, . . ., we
set (1) zn = yn if xn ≤yn, (2) zn = xn if xn ≥yn, (3) zn = xn = yn if xn = yn.
It is important to remark that there exists the maximal number Nmax ∈Zp in OZp.
It is easy to see: Nmax = −1 = (p −1) + (p −1) · p + . . . + (p −1) · pk + . . .1
Further, consider the following new operations deﬁned for all x, y ∈Zp in the
partial order structure OZp:
• x →L y = Nmax −sup(x, y) + y,
• x →Π y =
⎧
⎨
⎩
Nmax
if x ⪯p y,
integral part of y
x
otherwise,
• ¬Lx = Nmax −x,
i.e. x →L 0,
• ¬Πx =

Nmax
if x = 0,
0
otherwise,
i.e. ¬Πx = x →Π 0,
• Δx =

Nmax
if x = Nmax,
0
otherwise,
i.e. Δx = ¬Π¬Lx,
• x&L y = sup(x, Nmax −y) + y −Nmax,
i.e. x&L y = ¬L(x →L ¬L y),
• x&Π y = x · y,
• x ⊕y := ¬Lx →L y,
• x ⊖y := x&L¬L y,
• x ∧y = inf(x, y),
i.e. x ∧y = x&L(x →L y),
• x&G y := inf(x, y),
• x ∨y = sup(x, y),
i.e. x ∨y = (x →L y) →L y,
• x ↔y := (x →L y) ∧(y →L x),
• x →G y =

Nmax
if x ⪯p y,
y
otherwise,
i.e. x →G y = Δ(x →L y) ∨y.
Proposition 5.2 A structure ⟨Zp, ⊕, ¬L, 0⟩is a p-adic valued MV -algebra.
□
Proposition 5.3 A structure ⟨Zp, ⊕, ¬L, →Π, &Π, 0, Nmax⟩is not a p-adic valued
ŁΠ-matrix.
Proof Indeed, it can be easily shown that ⟨Zp, ∨, ∧, →Π, &Π, 0, Nmax⟩is not a
Π-algebra.
□
1If x = ∞
i=n xi · pi then −x = ∞
i=n yi · pi, where yn = p −xn and yi = (p −1) −xi for i >
n. For example, −0 = 0 and if p = 5 we have 1
3 = . . . 1313132 and −1
3 = . . . 131313.

174
5
Non-Archimedean Valued Fuzzy and Probability Logics
Proposition 5.4 A structure LZp = ⟨Zp, ∧, ∨, ∗, ⇒, 0, Nmax⟩, where ∗∈{&L, &G}
and ⇒∈{→L, →G} is a p-adic valued BL-matrix. If ∗= &L and ⇒=→L, it is
called a p-adic valued L-algebra. If ∗= &G and ⇒=→G, it is called a p-adic
valued G-algebra.
Proof We can show that (1) ⟨Zp, ∧, ∨, 0, Nmax⟩is a lattice with the largest element
Nmax and the least element 0, (2) ⟨Zp, ∗, Nmax⟩is a commutative semigroup with
the unit element Nmax, i.e. ∗is commutative, associative, and Nmax ∗x = x for all
x ∈Zp, (3) the following conditions hold
z ⪯p (x ⇒y) iff x ∗z ⪯p y for all x, y, z ∈Zp;
x ∧y = x ∗(x ⇒y);
x ∨y = ((x ⇒y) ⇒y) ∧((y ⇒x) ⇒x);
(x ⇒y) ∨(y ⇒x) = Nmax.
□
The truth value 0 ∈Zp of a p-adic valued BL-matrix is called falsity, the truth
value Nmax is called truth, and other truth values x ∈Zp\{0, Nmax} are called neutral.
We can dualize the order ⪯p in the following natural way: x ⪰N
p y iff x ⪯p y
and x ̸= 0. As we see, 1 was the least positive p-adic integer due to ⪯p and became
the maximal number due to ⪯N
p (respectively, −1 was the largest p-adic integer and
became the least positive integer). Let us set 0 as the minimal.
Reintroduce two operations sup, inf in the new partial order structure on Zp:
sup(x, y) = y and inf(x, y) = x iff x ⪯N
p y. If two p-adic integers x, y are incom-
patible, their maximum and minimum are deﬁned digit by digit too. Consider the
following new operations deﬁned for all x, y ∈Zp in the partial order structure
ordered by ⪯N
p :
• x →L y = 1 −sup(x, y) + y,
• x →Π y =
⎧
⎨
⎩
1
if x ⪯N
p y,
integral part of y
x
otherwise,
• ¬Lx = 1 −x,
i.e. x →L 0,
• ¬Πx =

1 if x = 0,
0 otherwise,
i.e. ¬Πx = x →Π 0,
• Δx =

1 if x = 1,
0 otherwise,
i.e. Δx = ¬Π¬Lx,
• x&L y = sup(x, 1 −y) + y −1,
i.e. x&L y = ¬L(x →L ¬L y),
• x&Π y = x · y,
• x ⊕y := ¬Lx →L y,
• x ⊖y := x&L¬L y,

5.2 Hyper-valued and p-Adic Valued Logical Matrices
175
• x ∧y = inf(x, y),
i.e. x ∧y = x&L(x →L y),
• x ∨y = sup(x, y),
i.e. x ∨y = (x →L y) →L y,
• x ↔y := (x →L y) ∧(y →L x),
• x →G y =

1
if x ⪯N
p y,
y
otherwise,
i.e. x →G y = Δ(x →L y) ∨y.
Proposition 5.5 A structure L′
Zp = ⟨Zp, ∧, ∨, ∗, ⇒, 0, 1⟩, where ∗∈{&L, &G} and
⇒∈{→L, →G} is a p-adic valued BL-matrix.
□
The truth value 0 ∈Zp of a p-adic valued BL-matrix is called falsity, the truth
value 1 ∈Zp is called truth, and other truth values x ∈Zp\{0, 1} are called neutral.
5.2.3
Non-Archimedean Approach to Higher-Order Fuzzy
Classes
Now consider fuzzy predicates with inﬁnite-order (ω-order) fuzziness and show that
they can have a non-Archimedean valued interpretation. For the ﬁrst time the higher-
order fuzziness was modeled degree-theoretically in the framework of higher-order
many-valued logic in the paper [43]. Notice that fuzzy sets of higher level are deﬁned
in fuzzy class theory considered in [38, 44, 45]. Fuzzy relations of higher level are
introduced in Henkin-style fuzzy type theory and higher-order fuzzy logic proposed
in [46].
Consider fuzzy relations of higher level in order to get later quantiﬁed fuzzy
relations of inﬁnite level.
Begin with fuzzy relations of ﬁrst level. Let us remember that every rela-
tion R of Dn can be represented by its characteristic function cR : Dn →{0, 1}
deﬁned by setting cR(x1, . . . , xn) = 1 if ⟨x1, . . . , xn⟩∈R and cR(x1, . . . , xn) = 0
if ⟨x1, . . . , xn⟩/∈R. We can also represent the extension of a vague predicate by
a generalized characteristic function assuming values in a set [0, 1], e.g. either in
the set Q[0,1] or in R[0,1]. A fuzzy relation or fuzzy subset P of Dn is any map P :
Dn →[0, 1]. For instance, the subset ∅⊂Dn (resp. Dn ⊆Dn) can be represented
by a fuzzy relation P that is considered as the constant map P : Dn ∋x →0 (resp.
P : Dn ∋x →1), where 0 is the least element of [0, 1] and 1 is the largest element
of [0, 1]. We denote by F(Dn) the class of fuzzy subsets of Dn. It is obvious that if
we identify sets with their characteristic functions, then P(Dn) ⊂F(Dn), where
P(Dn) is the powerset.
Let 1 be the top element of [0, 1]. Observe that, if P and P′ are fuzzy subsets of
Dn, then we can deﬁne,
• the inclusion by setting P ⊆P′ iff P(x1, . . . , xn) ≤P′(x1, . . . , xn) for every ⟨x1,
…, xn⟩∈Dn,
• Łukasiewicz’s relative complement P →L P′ by setting (P →L P′) (x1, …, xn) =
1 −max(P(x1, …, xn), P′(x1, …, xn)) + P′(x1, …, xn) for every ⟨x1, . . . , xn⟩∈
Dn,

176
5
Non-Archimedean Valued Fuzzy and Probability Logics
• Łukasiewicz’s complement ¬L P of P by setting (¬L P)(x1, . . . , xn) = 1 −P(x1,
…, xn) for every ⟨x1, . . . , xn⟩∈Dn,
• Łukasiewicz’s intersection P&L P′ as (P&L P′)(x1, …, xn) = max(P(x1, …,
xn), 1 −P′(x1, …, xn)) + P′(x1, …, xn) −1 for every ⟨x1, . . . , xn⟩∈Dn,
• the Product relative complement P →Π P′ by setting (P →Π P′)(x1, …, xn) = 1
if P(x1, …, xn) ≤P′(x1, …, xn) for every ⟨x1, . . . , xn⟩∈Dn and (P →Π P′)(x1,
…, xn) = P(x1,...,xn)
P′(x1,...,xn) otherwise,
• the Product complement ¬Π P as ¬Π P(x1, …, xn) := P(x1, …, xn) →Π 0 for
every ⟨x1, . . . , xn⟩∈Dn,
• the Product intersection P&Π P′ as (P&Π P′)(x1, …, xn) = P(x1, …, xn) · P′(x1,
…, xn) for every ⟨x1, . . . , xn⟩∈Dn,
• the union P ∨P′ as (P ∨P′)(x1, …, xn) = max(P(x1, …, xn), P′(x1, …, xn))
for every ⟨x1, . . . , xn⟩∈Dn,
• the intersection P ∧P′ by setting (P ∧P′)(x1, …, xn) = min(P(x1, …, xn),
P′(x1, …, xn)) for every ⟨x1, . . . , xn⟩∈Dn,
• the union 
i∈I
Pi, given a family (Pi)i∈I of fuzzy subsets of Dn, as

i∈I
Pi(x1, . . . , xn) = max{Pi(x1, . . . , xn): i ∈I}
for every ⟨x1, . . . , xn⟩∈Dn,
• the intersection 
i∈I
Pi, given a family (Pi)i∈I of fuzzy subsets of Dn, as

i∈I
Pi(x1, . . . , xn) = min{Pi(x1, . . . , xn): i ∈I}
for every ⟨x1, . . . , xn⟩∈Dn.
The structure ⟨F(Dn), ∧, ∨, ¬L, ⊥(Dn), ⊤(Dn)⟩is a complete lattice with an
involution (see the proof in [47]), where ⊥(Dn) and ⊤(Dn) are the constant maps
⊥(Dn): Dn ∋x →0 ∈V and⊤(Dn): Dn ∋x →1 ∈V respectively.Thestructure
LV = ⟨F(Dn), ∧, ∨, ∗, ⇒, ⊥(Dn), ⊤(Dn)⟩is a BL-algebra. It is the direct power,
with index set Dn, of the structure ⟨V , ∧, ∨, ∗, ⇒, 0, 1⟩.
We deﬁne an i + 1-order class Fi+1(Dn) of fuzzy subsets of Dn by recur-
sion: F1(Dn) = F(Dn) and Fi+1(Dn) = F(Fi(Dn)), where i ≥1. The members
Pi+1 ∈Fi+1(Dn) are called fuzzy relations/subsets of i + 1-th level (or i + 1-order
fuzzy relations/subsets). It is possible to deﬁne an inﬁnite-order class F∞(Dn) of
fuzzy subsets by setting F∞(Dn) := 
i∈N Fi(Dn). The members P∞∈F∞(Dn)
are called fuzzy relations/subsets of inﬁnite level (or inﬁnite-order fuzzy rela-
tions/subsets).
Let V be any nonempty set such that |V | > 2 and Fi(D) is the class of all maps
V V ···V D
  
i+1
→V . The following sets are not isomorphic:

5.2 Hyper-valued and p-Adic Valued Logical Matrices
177
V V ···V Dn
  
i+2
≇(V × . . . × V



i
)Dn.
We can build the following map ρ of the class of all constant mappings of (V i)Dn to
the set Fi(Dn):
• if a fuzzy set Pi ∈Fi(Dn) has the range rg(Pi) = {k} (i.e. Pi is the constant
mapping such that it takes each member Pi−1 ∈Fi−1(Dn) to the value k), so the
map
PQ
i : Dn →{⟨k, . . . , k
  
i
⟩}
belongs to the set ρ−1(Pi) (it is evident that in this case PQ
i is the only member of
ρ−1(Pi)),
• suppose (1) a fuzzy set Pi ∈Fi(Dn) has the value ki ∈rg(Pi) for some valuations
(i.e. Pi is the mapping such that it takes some members Pi−1 ∈Fi−1(Dn) to the
value ki, these members will be denoted by Pki
i−1), (2) a fuzzy set Pki
i−1 ∈Fi−1(Dn)
hasthevalueki−1 ∈rg(Pki
i−1)forsomevaluations,…,(i)afuzzyset Pk2
1 ∈F1(Dn)
has the value k1 ∈rg(Pk2
1 ) for some valuations (i.e. Pk2
1 is the mapping such that
it takes some members of Dn to the value k1), then the map
PQ
i : Dn ∋x →⟨k1, k2, . . . , ki⟩
belongs to the set ρ−1(Pi) (it is obvious that in this case ρ−1(Pi) contains more
than one member).
(1) In the ﬁrst case (if a fuzzy set Pi ∈Fi(Dn) has the range rg(Pi) = {k}), we will
denote PQ
i by ∀⟨k,...,k⟩Pi−1. This means that at the level i the membership degree of a
relation Pi−1 in Pi is equal to k for any valuations. (2) In the second case (if a fuzzy
set Pi ∈Fi(Dn) is not a constant function), we will denote PQ
i
by ∃⟨k1,...,ki⟩Pi−1.
This means that at the level r ∈{2, . . . , i} the membership degree of a relation Pr−1
in Pr is equal to kr for some valuations.
Predicates of the form ∀⟨k,...,k⟩Pi−1 and ∃⟨k1,...,ki⟩Pi−1 are called i-order quantiﬁed
fuzzy relations/predicates (or quantiﬁed fuzzy relations/predicates of i-th level). For
instance, we can represent a quantiﬁed fuzzy relation PQ
i+1 of i + 1-th level as any
constant map PQ
i+1 : Dn →V i+1. The class of all quantiﬁed fuzzy relations of i- th
level we will denote by F Q
i (Dn). Deﬁne the class of all quantiﬁed fuzzy relations of
inﬁnite level by setting F Q
∞(Dn) := 
i∈N F Q
i (Dn). The members P∞∈F Q
∞(Dn)
we can consider as the following constant maps P∞: Dn →∗V , i.e. we set functions
of the form P∞(x1, . . . , xn) = ⟨y1, . . . , yi+1, . . .⟩= [ f ], where ⟨x1, . . . , xn⟩∈Dn
and [ f ] ∈∗V .
Let us construct an extension FV = ⟨F Q
∞(Dn), ∧, ∨, ∗, ⇒, ∗⊥(Dn), ∗⊤(Dn)⟩
of the BL-algebra on F(Dn) as the direct power, with index set Dn (and restricted
to the set of all constant functions), of non-Archimedean valued BL-matrix ⟨∗V ,

178
5
Non-Archimedean Valued Fuzzy and Probability Logics
∧, ∨, ∗, ⇒, ∗0, ∗1⟩. Note that in the case V = Q[0,1], we have the hyperrational
multiple-validity and in the case V = R[0,1], the hyperreal multiple-validity.
Thanks to FV , we can deﬁne i-order (ω-order) quantiﬁed predicates of a higher-
order extension of the logic BL∀by some i-order (ω-order) quantiﬁed fuzzy rela-
tions. (1) The i + 1-order predicate ∀⟨k,...,k⟩Pi ∈ρ−1(P′
i+1) regarded as membership
function is the constant map
∀⟨k,...,k⟩Pi : Dn ∋x →⟨k, . . . , k
  
i+1
⟩,
where k ∈V , this means that for any Pi ∈Fi(Dn) we have ⟨Pi, k⟩∈P′
i+1. (2)
The ω-order predicate ∀
∗k P∞regarded as membership function is the constant map
∀
∗k P∞: Dn ∋x →∗k, where ∗k ∈∗V . (3) The i + 1-order predicate ∃⟨k1,...,ki+1⟩Pi ∈
ρ−1(P′
i+1) regarded as membership function is the constant map
∃⟨k1,...,ki+1⟩Pi : Dn ∋x →⟨k1, k2, . . . , ki+1⟩∈V i+1,
this means that for some Pi ∈Fi(Dn) we have ⟨Pi, ki+1⟩∈P′
i+1, for some Pi−1 ∈
Fi−1(Dn) we have ⟨Pi−1, ki⟩∈Pi, etc. (4) The ω-order predicate ∃[ f ]P∞regarded
as membership function is the constant map
∃[ f ]P∞: Dn ∋x →[ f ] ∈∗V.
Also, the structure FV allows to set an inﬁnite-order predicate language and its
semantics.
5.2.4
Non-Archimedean Valued Predicate Logic BL∀∞
An inﬁnite-order predicate logical language L ∞
V
(with the set of truth values V )
consists of the following symbols: (1) Variables: (i) denumerable set of free variables
a0, a1, a2, …; (ii) denumerable set of bound variables x0, x1, x2, …; (iii) inﬁnite set
of i-order predicate variables of arity n of the form Pn
i (i ∈ω); (iv) inﬁnite set of
inﬁnite-order (ω-order) predicate variables of arity n of the form Pn
∞. (2) Constants:
(i) denumerable set of constant symbols c0, c1, c2, …; (ii) denumerable set of function
symbols of arity n: Fn
0 , Fn
1 , Fn
2 , …; (iii) ﬁrst-order predicate signs of arity n: N n
0 , N n
1 ,
N n
2 , …. (3) Logical symbols: (i) the truth constant ∗0, (ii) various order propositional
connectives of arity n j: □n0
0 , □n1
1 , …, □nr
r , which are built by superposition of →⋆,
&⋆, where ⋆∈{L, G, Π}; (iii) ﬁrst-order quantiﬁers ∀, ∃; (iv) inﬁnite set of i-order
vertical quantiﬁers (or predicate quantiﬁers) of the form ∀⟨k,...,k⟩and ∃⟨k1,...,ki⟩(i ∈ω);
(v) inﬁnite set of inﬁnite-order (ω-order) vertical quantiﬁers of the form ∀
∗k and ∃[ f ].
(4) Auxiliary symbols (, ).

5.2 Hyper-valued and p-Adic Valued Logical Matrices
179
If V = {0, 1, . . . , p −1}, where p is a prime number, then we have p universal
vertical quantiﬁers at the level i and p existential vertical quantiﬁers at the level i.
If V = Q[0,1], then we have ℵ0 universal vertical quantiﬁers at the level i and ℵ0
existential vertical quantiﬁers at the level i. If V = R[0,1], then we have 2ℵ0 universal
vertical quantiﬁers at the level i and 2ℵ0 existential vertical quantiﬁers at the level i.
Terms, well-formed atomic formulas, and well-formed ﬁrst-order formulas of
L ∞
V
are deﬁned by standard way. Well-formed higher-order formulas of L ∞
V
are
inductively deﬁned as follows:
1. If Ψ is a ﬁrst-order or i + 1-order formula not containing the i-order predicate
variable Pi, N is a ﬁrst-order predicate, Q ∈{∀⟨k,...,k⟩, ∃⟨k1,...,ki+1⟩} is an i + 1-
order vertical quantiﬁer, then QPi Ψ (Pi), where Ψ (Pi) is obtained from Ψ by
replacing N by Pi at every occurrence of N in Ψ , is an i + 1-order formula. Its
outermost logical symbol is Q.
2. If Ψ is a ﬁrst-order or ω-order formula not containing the ω-order predicate
variable P∞, N is a ﬁrst-order predicate, Q ∈{∀
∗k, ∃[ f ]} is an inﬁnite-order
vertical quantiﬁer, then QP∞Ψ (P∞), where Ψ (P∞) is obtained from Ψ by
replacing N by P∞at every occurrence of N in Ψ , is an inﬁnite-order formula.
Its outermost logical symbol is Q.
A higher-order formula is called vertical bounded if it does not contain ﬁrst-order
predicates.
Let L∗V be a non-Archimedean valued BL-matrix. Notice that ∗V is identiﬁed
with Zp for {0, 1, . . . , p −1}. An L∗V -structure M = ⟨D, I⟩for ﬁrst-order formulas
of L ∞
V consists of the following: (1) a non-empty set D; (2) a mapping I such that
each constant symbol c is mapped to an element cI of D, each n-place function
symbol Fn to a function Fn
I : Dn →D, each n-place predicate symbol N n to a fuzzy
subset N n
I of Dn. Let A = {a0, a1, a2, . . .} be the set of all free variable symbols.
A function s : A →D is said to be a variable assignment for M = ⟨D, I⟩. Let T
be the set of all terms. Then we can extend a variable assignment s to a denotation
assignment s : T →D as follows: (1) for each free variable a, s(a) = s(a); (2)
for each constant symbol c, s(c) = cI; (3) for every n-place function symbol Fn
and terms t1, …, tn, s(F(t1, . . . , tn)) = FI(s(t1), . . . , s(tn)), (4) for every n-place
predicate symbol N n and terms t1, …, tn, s(N(t1, . . . , tn)) = NI(s(t1), …, s(tn)).
We deﬁne a predicate assignment S as follows: (1) for each n-place ﬁrst-order
predicate variable P1, S P1 is a fuzzy subset of Dn; (2) for each n-place i-order
predicate variable Pi, S Pi is a member of Fi(Dn); (3) for each n-place ω-order
predicate variable P∞, S P∞is a member of F∞(Dn). Now extend an L∗V -structure
⟨M, s⟩toahigher-orderL∗V -structureM∞= ⟨(F∞(Dn))n∈ω, s∞⟩asfollows:(1)for
each n-place i-order predicate variable Pi and terms t1, …, tn, s∞(Pi(t1, . . . , tn)) =
S Pi(s(t1), . . . , s(tn)); (2) for each n-place ω-order predicate variable P∞and terms
t1, …, tn, s∞(P∞(t1, …, tn)) = S P∞(s(t1), …, s(tn)).
Let L∗V be a BL-matrix and M∞be an L∗V -structure for L ∞
V .
An i-order truth assignment on a higher-order L∗V -structure M∞is a function
|| · ||i whose domain is the set of all i-order formulas of L ∞
V and whose range is the
set V i of truth values such that:

180
5
Non-Archimedean Valued Fuzzy and Probability Logics
1. For any ﬁrst-order formula Φ, ||Φ||1 is a truth assignment of the basic fuzzy
logic BL∀(e.g. of Łukasiewicz’s predicate logic L, Gödel’s predicate logic G
or Product predicate logic Π). For instance,
||N(t1, . . . , tn)||1 = s(N(t1, . . . , tn)) = NI(s(t1), . . . , s(tn)),
||P1(t1, . . . , tn)||1 = s∞(P1(t1, . . . , tn)) = S P1(s(t1), . . . , s(tn)).
Extend || · ||1 as follows:
||Pi(t1, . . . , tn)||1 = s∞(Pi(t1, . . . , tn)) = S Pi(s(t1), . . . , s(tn)).
2. For any formula Φ without vertical quantiﬁers,
||Φ||i = ⟨y1, . . . y1



i
⟩iff ||Φ||1 = y1.
3. For any ﬁrst- ori-order formula Φ, || ⋆Φ||i = ⋆||Φ||i, where ⋆∈{¬L, ¬G, ¬Π},
the symbols ¬L, ¬G, ¬Π on the left-hand side are operations in logic L, G, and Π
respectively, and on the right-hand side they are appropriate logical connectives
in algebra L, G, and Π respectively.
4. For any ﬁrst- or i-order formulas Φ and Ψ ,
||Φ ⋆Ψ ||i = ||Φ||i ⋆||Ψ ||i = ⟨⋆(x1, y1), ⋆(x2, y2), . . . , ⋆(xi, yi)⟩,
where
⋆∈{→L, →Π, →G, &L, &Π, &G},
||Φ||i = ⟨x1,
x2, . . . , xi⟩,
and
||Ψ ||i = ⟨y1, y2, . . . , yi⟩.
5. For any i-order vertical bounded formula ∀⟨k,...,k⟩Pi−1Ψ (Pi−1),
||∀⟨k,...,k⟩Pi−1Ψ (Pi−1)||i = ⟨k, . . . , k
  
i
⟩
if for any member S Pi−1 of Fi−1(Dn), we have ||Ψ (Pi−1)||1 = Ψ (S Pi−1) = k,
i.e. if there exists the member S∀⟨k,...,k⟩Pi−1 of F Q
i−1(Dn) such that
||∀⟨k,...,k⟩Pi−1Ψ (Pi−1)||i = Ψ (S∀⟨k,...,k⟩Pi−1) = ⟨k, . . . , k
  
i
⟩.
Otherwise ||∀⟨k,...,k⟩Pi−1Ψ (Pi−1)||i = ⟨0, . . . , 0
  
i
⟩.
6. For any i-order vertical bounded formula ∃⟨k1,...,ki−1,ki⟩Pi−1Ψ (Pi−1),
||∃⟨k1,...,ki−1,ki⟩Pi−1Ψ (Pi−1)||i = ⟨k1, . . . , ki−1, ki⟩

5.2 Hyper-valued and p-Adic Valued Logical Matrices
181
if (i) for some members S Pi−1 of Fi−1(Dn), we have
||∃⟨k1,...,ki−1,ki⟩Pi−1Ψ (Pi−1)||1 = Ψ (S Pi−1) = ki,
(ii) there exists S∃⟨k1,...,ki−1⟩Pi−2 ∈ρ−1(S Pi−1) such that
||∃⟨k1,...,ki−1⟩Pi−2Ψ (Pi−2)||i−1 = ⟨k1, . . . , ki−1⟩.
In other words, if there exists the member S∃⟨k1,...,ki⟩Pi−1 of F Q
i−1(Dn) such that
||∃⟨k1,...,ki⟩Pi−1 Ψ (Pi−1)||i = Ψ (S∃⟨k1,...,ki⟩Pi−1) = ⟨k1, . . . , ki⟩.
Otherwise ||∃⟨k1,...,ki⟩Pi−1Ψ (Pi−1)||i = ⟨0, . . . , 0
  
i
⟩.
7. For any i-order vertical bounded formula ∀x QPi−1 Φ(Pi−1(x)),
||∀x QPi−1 Φ(Pi−1(x))||i = ||QPi−1 ∀x Φ(Pi−1(x))||i =
= inf
a∈D ||Φ(Pi−1(x))||1
s[x→a] ∧Φ(SQPi−1),
where Q ∈{∀⟨k,...,k⟩, ∃⟨k1,...,ki⟩} and s[x →a] is a variable assignment such that
s[x →a](x) = a and s[x →a](y) = s(y) for each individual variable y dif-
ferent from x.
An inﬁnite-order (ω-order) truth assignment on a higher-order L∗V -structure M∞is
a function || · ||∞whose domain is the set of all inﬁnite-order formulas of L ∞
V and
whose range is the set ∗V of truth values such that:
1. Extend || · ||1 as follows:
||P∞(t1, . . . , tn)||1 = s∞(P∞(t1, . . . , tn)) = S P∞(s(t1), . . . , s(tn)).
2. For any formula Φ without vertical quantiﬁers,
||Φ||∞= ∗y1 = ⟨y1, y1, . . .⟩iff ||Φ||1 = y1.
3. For any ﬁrst- or ω-order formula Φ, || ⋆Φ||∞= ⋆||Φ||∞, where ⋆∈{¬L, ¬G,
¬Π}, the symbols ¬L, ¬G, ¬Π on the left-hand side are operations in ω-order
logic, and on the right-hand side they are appropriate logical connectives in
BL-algebra L∗V .
4. For any ﬁrst- or ω-order formulas Φ and Ψ ,
||Φ ⋆Ψ ||∞= ||Φ||∞⋆||Ψ ||∞,
where ⋆∈{→L, →Π, →G, &L, &Π, &G}, the symbol ⋆on the right-hand side
is an appropriate operation in BL-algebra L∗V .

182
5
Non-Archimedean Valued Fuzzy and Probability Logics
5. For any ω-order vertical bounded formula ∀
∗k P∞Ψ (P∞),
||∀
∗k P∞Ψ (P∞)||∞= ∗k ∈∗V
if there exists S∀
∗k P∞∈ρ−1(S P∞) such that
||∀
∗k P∞Ψ (P∞)||∞= Ψ (S∀
∗k P∞) = ∗k.
Otherwise ||∀
∗k P∞Ψ (P∞)||∞= ∗0.
6. For any ω-order vertical bounded formula ∃[ f ]P∞Ψ (P∞),
||∃[ f ]P∞Ψ (P∞)||∞= [ f ] ∈∗V
if there exists S∃[ f ]P∞∈ρ−1(S P∞) such that
||∃[ f ]P∞Ψ (P∞)||∞= Ψ (S∃[ f ]P∞) = [ f ].
Otherwise ||∃[ f ]P∞Ψ (P∞)||∞= ∗0.
7. For any ω-order vertical bounded formula ∀x QP∞Φ(P∞(x)),
||∀x QP∞Φ(P∞(x))||∞= ||QP∞∀x Φ(P∞(x))||∞=
= inf
a∈D ||Φ(P∞(x))||1
s[x→a] ∧Φ(SQP∞),
where Q ∈{∀
∗k, ∃[ f ]} and s[x →a] is a variable assignment such that s[x →
a](x) = a and s[x →a](y) = s(y) for each individual variable y different
from x.
5.2.4.1
Hyper-valued Predicate Logic BL∀∞
Let us concentrate on the case if ∗V = ∗[0, 1].
We say that an i-order formula Φi (resp. ω-order formula Φ∞) is logically valid/is
an L∗V -tautology if ||Φi||i = ⟨1, . . . , 1⟩(resp. ||Φ∞||∞= ∗1) for each higher-order
L∗V -structure M∞. An i-order formula Φi (resp. ω-order formula Φ∞) is logically
satisﬁable if ||Φi||i ̸= ⟨0, . . . , 0⟩(resp. ||Φ∞||∞̸= ∗0) for some L∗V -structures M∞.
We say that an L∗V -structure M∞is an i-order L∗V -model (resp. an ω-order L∗V -
model) of an L ∞
V -theory T iff ||Φ||i = ⟨1, . . . , 1⟩(resp. ||Φ||∞= ∗1) on M∞for
each Φ ∈T .
Denote by Π1 (resp. by Σ1) the class of vertical bounded higher-order formulas Ψ
such that all vertical quantiﬁers of Ψ are universal (existential) with the same upper
indices.
Theorem 5.1
1. Suppose that Ψ i (resp. Ψ ∞) is an i-order (resp. ω-order) formula
that belongs to Π1 and Ψ is a ﬁrst-order formula in that every i-order (resp.

5.2 Hyper-valued and p-Adic Valued Logical Matrices
183
ω-order) predicate variable of Ψ i (resp. of Ψ ∞) is replaced by a ﬁrst-order
predicate constant, then Ψ i (resp. Ψ ∞) is logically valid iff Ψ is logically valid.
2. Suppose that Ψ i (resp. Ψ ∞) is an i-order (resp. inﬁnite-order) formula that
belongs to Σ1 and Ψ is a ﬁrst-order formula in that every i-order (resp. inﬁnite-
order) predicate variable of Ψ i (resp. of Ψ ∞) is replaced by a ﬁrst-order pred-
icate constant, then Ψ i (resp. Ψ ∞) is logically satisﬁable iff Ψ is logically
satisﬁable.
Proof It follows from the semantic rules of L ∞
V .
□
As a result, the class of higher-order formulas belonging to Π1 and Σ1 is effectively
axiomatizable. In this section we will consider just formulas of these both classes.
Let us construct an inﬁnite-order extension of BL∀denoted by BL∀∞. Remember
that the logic BL∀has just two propositional operations: &, →, which are understood
as t-norm and its residuum respectively.
In BL∀we can deﬁne the following new operations:
• Φ ∧Ψ := Φ&(Φ →Ψ ),
• Φ ∨Ψ := ((Φ →Ψ ) →Ψ ) ∧((Ψ →Φ) →Φ),
• ¬Φ := Φ →0,
• Φ ↔Ψ := (Φ →Ψ )&(Ψ →Φ),
• Φ ⊕Ψ := ¬Φ →Ψ ,
• Φ ⊖Ψ := Φ&¬Ψ ,
The logic BL∀∞is given by the following axioms, where all subformulas are
either ﬁrst-order or i-order (ω-order) belonging to Π1 and Σ1:
(Φ →Ψ ) →((Ψ →Γ ) →(Φ →Γ ))
(5.1)
(Φ&Ψ ) →Φ
(5.2)
(Φ&Ψ ) →(Ψ &Φ)
(5.3)
(Φ&(Φ →Ψ )) →(Ψ &(Ψ →Φ))
(5.4)
(Φ →(Ψ →Γ )) →((Φ&Ψ ) →Γ )
(5.5)
((Φ&Ψ ) →Γ ) →(Φ →(Ψ →Γ ))
(5.6)

184
5
Non-Archimedean Valued Fuzzy and Probability Logics
((Φ →Ψ ) →Γ ) →(((Ψ →Φ) →Γ ) →Γ )
(5.7)
∗0 →Ψ
(5.8)
∀x Ψ (x) →Ψ (t),
(5.9)
where t is substitutable for x in Ψ (x).
Ψ (t) →∃x Ψ (x),
(5.10)
where t is substitutable for x in Ψ (x).
∀x(Γ →Ψ ) →(Γ →∀x Ψ ),
(5.11)
where x is not free in Γ .
∀x(Ψ →Γ ) →(∃x Ψ →Γ ),
(5.12)
where x is not free in Γ .
∀x(Γ ∨Ψ ) →(Γ ∨∀x Ψ ),
(5.13)
where x is not free in Γ .
These axioms are said to be horizontal. Introduce also some new axioms that show
basic properties of non-Archimedean ordered structures. These express a connection
between formulas of various level. It is well known that there exist inﬁnitesimals that
are less than any positive number of [0, 1]. This property can be expressed by means
of the following logical axiom:
(¬(Ψ 1 ↔Ψ ∞)&¬(Φ1 ↔∗0)) →(Ψ ∞→Φ1),
(5.14)
where Ψ 1, Φ1 are ﬁrst-order formulas and Ψ ∞is an ω-order formula of classes Π1
or Σ1 that has such a logical matrix as Ψ 1. Axiom (5.14) is said to be vertical.
The deduction rules of BL∀∞are modus ponens (from Φ, Φ →Ψ infer Ψ ) and
generalization (from Φ infer ∀x Φ).
The notions of proof, derivability ⊢, theorem, and theory over BL∀∞are deﬁned
as usual.
Theorem 5.2 (Completeness)LetΦ beani-order(resp.ω-order)formulaofL ∞
V , T
an i-order (resp. ω-order) L ∞
V -theory. Then the following conditions are equivalent:
• T ⊢Φ;
• ||Φ||i = ⟨1, . . . , 1
  
i
⟩(resp. ||Φ||∞= ∗1) for each L∗V -model M∞of T ;

5.2 Hyper-valued and p-Adic Valued Logical Matrices
185
Proof The ﬁrst-order case is proved in [41] and the higher-order case follows from
Theorem 5.1.
□
5.2.4.2
p-Adic Valued Logic BL′∀∞
Let us consider the case ∗V = {0, 1, . . . , p −1}.
The p-adic valued logic BL′∀∞is given by the following axioms, where all
subformulas are either ﬁrst-order or i-order (ω-order):
(Φ →Ψ ) →((Ψ →Γ ) →(Φ →Γ ))
(5.15)
(Φ&Ψ ) →Φ
(5.16)
(Φ&Ψ ) →(Ψ &Φ)
(5.17)
(Φ&(Φ →Ψ )) →(Ψ &(Ψ →Φ))
(5.18)
(Φ →(Ψ →Γ )) →((Φ&Ψ ) →Γ )
(5.19)
((Φ&Ψ ) →Γ ) →(Φ →(Ψ →Γ ))
(5.20)
((Φ →Ψ ) →Γ ) →(((Ψ →Φ) →Γ ) →Γ )
(5.21)
0 →Ψ
(5.22)
∀x Ψ (x) →Ψ (t),
(5.23)
where t is substitutable for x in Ψ (x).
Ψ (t) →∃x Ψ (x),
(5.24)
where t is substitutable for x in Ψ (x).
∀x(Γ →Ψ ) →(Γ →∀x Ψ ),
(5.25)
where x is not free Γ .

186
5
Non-Archimedean Valued Fuzzy and Probability Logics
∀x(Ψ →Γ ) →(∃x Ψ →Γ ),
(5.26)
where x is not free Γ .
∀x(Γ ∨Ψ ) →(Γ ∨∀x Ψ ),
(5.27)
where x is not free Γ .
These axioms are said to be horizontal.
There is a well known theorem according to that every equivalence class a for
which |a|p ≤1 (this means that a is a p-adic integer) has exactly one representative
Cauchy sequence for which:
1. 0 ≤ai < pi for i = 1, 2, 3, . . .;
2. ai ≡ai+1 mod pi for i = 1, 2, 3, …
This property can be expressed by means of the following logical axioms:
((pi+1 −1 ⊖pi −1) →L Ψ i+1) →L
(Ψ i+1 ↔(p −1 ⊕. . . ⊕p −1



pi
⊕Ψ i),
(5.28)
(Ψ i+1 ↔(
pi



k ⊕. . . ⊕k) ⊕Ψ i) →L
((((. . . (pi+1 −1 ⊖pi −1) ⊖. . .) ⊖pi −1)



0<p−k≤p
⊖¬Lk) →L Ψ i+1),
(5.29)
(Ψ i+1 ↔(
pi



k ⊕. . . ⊕k) ⊕Ψ i) →L
(Ψ i+1 →L (((. . . (pi+1 −1 ⊖pi −1) ⊖. . .) ⊖pi −1)



0≤(p−1)−k≤p−1
⊖¬Lk)),
(5.30)
(Ψ i+1 →L pi −1) →L (Ψ i+1 ↔Ψ i),
(5.31)
(Ψ i+1 ↔Ψ i) ∨(Ψ i+1 ↔(Ψ i ⊕pi · 1)) ∨. . .
∨(Ψ i+1 ↔(Ψ i ⊕pi · p −1)),
(5.32)

5.2 Hyper-valued and p-Adic Valued Logical Matrices
187
where p −1 is a tautology at the ﬁrst-order level and pi −1 (respectively pi+1 −1)
a tautology at i-th order level (respectively at (i + 1)-th order level); i + 1-order
formula Ψ i+1 and i-order formula Ψ i have the same logical matrix; ¬Lk is a ﬁrst-
order formula that has the truth value ((p −1) −k) ∈{0, . . . , p −1} for any its
interpretations and k is a ﬁrst-order formula that has the truth value k ∈{0, . . . , p −
1} for any its interpretations; 1 is a ﬁrst-order formula that has the truth value 1 for
any its interpretations, etc. The denoting pi · k means k ⊕. . . ⊕k



pi
.
Axioms (5.28)–(5.32) are said to be vertical.
The inference rules of BL′∀∞are modus ponens (from Φ, Φ →Ψ infer Ψ ) and
generalization (from Φ infer ∀x Φ).
Theorem 5.3 (Completeness)LetΦ beani-order(resp.ω-order)formulaofL ∞
∗V , T
an i-order (resp. ω-order) L ∞
∗V -theory. Then the following conditions are equivalent:
• T ⊢Φ;
•

Φ
i
= ⟨⊤, . . . , ⊤



i
⟩(resp.

Φ
∞
= ∗⊤) for each LZp-model M∞of T ;
Proof The ﬁrst-order case is proved in [41] and the higher-order case follows from
Theorem 5.1.
□
5.3
Non-Archimedean Valued Probability Logics
5.3.1
Hyper-valued Probabilities
Now set up the problem to get non-Archimedean probability logic on the basis of
BL∀∞.
In the standard way, probabilities are deﬁned on an algebra of subsets. Recall that
an algebra A of subsets A ⊂X consists of the following: (1) union, intersection,
and difference of two subsets of X; (2) ∅and X. Then a ﬁnitely additive probability
measure is a nonnegative set function P(·) deﬁned for sets A ∈A that satisﬁes the
following properties:
1. P(A) ≥0 for all A ∈A ,
2. P(X) = 1 and P(∅) = 0,
3. if A ∈A and B ∈A are disjoint, then P(A ∪B) = P(A) + P(B). In particular
P(¬A) = 1 −P(A) for all A ∈A .
The algebra A is called a σ-algebra if it is assumed to be closed under countable
union (or equivalently, countable intersection), i.e. if for every n, An ∈A causes
A = 
n An ∈A .
AsetfunctionP(·)deﬁnedonaσ-algebraiscalledacountableadditiveprobability
measure (or a σ-additive probability measure) if in addition to satisfying equations

188
5
Non-Archimedean Valued Fuzzy and Probability Logics
of the deﬁnition of ﬁnitely additive probability measure, it satisﬁes the following
countable additivity property: for any sequence of pairwise disjoint sets An, P(A) =

n P(An). The ordered system ⟨X, A , P⟩is called a probability space.
Now consider non-Archimedean probabilities.
Deﬁne a structure ⟨P(∗Θ), ∧, ∨, ¬, ∗Θ⟩as follows (1) each A ∈P(∗Θ) is
identiﬁed with the set of points of the form f (α), (2) for any A, B ∈P(∗Θ),
A ∧B = { f (α): f (α) ∈A ∧f (α) ∈B}, (3) for any A, B ∈P(∗Θ), A ∨B =
{ f (α): f (α) ∈A ∨f (α) ∈B}, (4) for any A ∈P(∗Θ), ¬A = { f (α): f (α) ∈
∗Θ\A}. Then a structure ⟨P(∗Θ), ∧, ∨, ¬, ∗Θ⟩is not a Boolean algebra if |Θ| ≥2,
because the set P(∗Θ) is not closed under intersection. Indeed, by deﬁnition of non-
standard extension, some elements of ∗Θ have a non-empty intersection. Therefore
some subsets of ∗Θ have a non-empty intersection that does not belong to P(∗Θ),
i.e. they aren’t atoms of P(∗Θ) of the form [ f ].
Consequently, there is a problem how it is possible to deﬁne probabilities on non-
Archimedean structures if we have not an opportunity to put them on an algebra of
subsets. A. Khrennikov who considered non-Archimedean probability theory on the
set of p-adic numbers [6] proposed a semi-algebra that is closed only with respect
to a ﬁnite unions of sets, which have empty intersections. However there is a better
way if we get non-Archimedean probabilities on a class F Q
∞(X) of fuzzy subsets
A ⊂X.
In the next section we shall survey non-Archimedean probability logic in that
probabilities are deﬁned on a class F Q
∞(X) of fuzzy subsets A ⊂X. In this case a
ﬁnitely additive probability measure is a nonnegative set function P(·) deﬁned for
sets A ∈F Q
∞(X) that runs the set Q and satisﬁes the following properties:
1. P(A) ≥∗0 for all A ∈F Q
∞(X),
2. P(X) = ∗1 and P(∅) = ∗0,
3. if A ∈F Q
∞(X) and B ∈F Q
∞(X) are disjoint, then P(A ∪B) = P(A) + P(B).
4. P(¬A) = ∗1 −P(A) for all A ∈F Q
∞(X),
where ∗1 is the largest member of Q = ∗[0, 1] and ∗0 is the least member of Q =
∗[0, 1].
This probability measure is called non-Archimedean fuzzy probability. The main
originality of fuzzy probabilities is that conditions 3, 4 are independent. As a result, in
a probability space ⟨X, F Q
∞(X), P⟩some Bayes’ formulas do not hold in the general
case (see Theorem 5.4).
5.3.2
Hyper-valued Probability Logic
A function P(Φ) is said to be a non-Archimedean absolute fuzzy probability function
for a statement Φ in L ∞
V if P(Φ) ranges over the number set ∗V (∗V = ∗Q[0,1] or
∗V = ∗R[0,1]) and satisﬁes the following constraints:
P(Φ) = ||Φ||∞,
(5.33)

5.3 Non-Archimedean Valued Probability Logics
189
where ||Φ||∞is a truth valuation of Φ;
P(Φ) + P(¬Φ) = ∗1;
(5.34)
if Φ ∧Ψ is logically false, then
P(Φ ∨Ψ ) = P(Φ) + P(Ψ );
(5.35)
if Φ and Ψ are logically equivalent, then
P(Φ) = P(Ψ );
(5.36)
P(∀xΦ ∧Ψ ) = lim
n→∞P((Φ(t1/x) ∧. . . ∧Φ(tn/x)) ∧Ψ ),
(5.37)
where Φ(t1/x) is the result of replacing the variable x everywhere in Φ by a term t1,
Φ(tn/x) is the result of replacing the variable x everywhere in Φ by a term tn, etc;
P(ti = ti) = ∗1;
(5.38)
P(ti = t j ⊃(Φ ≡Φ(t j//ti))) = ∗1,
(5.39)
where Φ(t j//ti) is the result of replacing ti by t j at zero or more places in Φ;
if ti and t j are terms of L ∞
V , then
P(ti = t j) = ||ti = t j||∞,
(5.40)
where ||ti = t j||∞is a truth valuation of ti = t j.
From (5.33) it follows that
P(⊥) = ∗0,
where ⊥is a contradiction of BL∀∞(i.e. it has the truth value ∗0 for all valuations);
P(⊤) = ∗1,
where ⊤is a tautology of BL∀∞(i.e. it has the truth value ∗1 for all valuations).
Under the condition of (5.34), we obtain P(¬Φ) = ∗1 −P(Φ).
Non-Archimedean relative fuzzy probability functions P(Φ/Ψ ) ∈∗V for the lan-
guage L ∞
V are characterized by the following constraint:
P(Φ/Ψ ) = P(Φ ∧Ψ )
P(Ψ )
=
||Φ ∧Ψ ||∞
||Ψ ||∞
= inf(||Φ||∞, ||Ψ ||∞)
||Ψ ||∞
,
(5.41)

190
5
Non-Archimedean Valued Fuzzy and Probability Logics
when Ψ is not logically false, where ||Φ||∞is a truth valuation of Φ and ||Ψ ||∞is
a truth valuation of Ψ .
From this constraint we deduce the following properties of non-Archimedean
relative fuzzy probability functions:
P(Φ/Φ) = ∗1, when Φ is not logically false;
(5.42)
if Φ ∧Ψ is logically false, then
P(Φ ∨Ψ /Γ ) = P(Φ/Γ ) + P(Ψ /Γ ),
(5.43)
when Γ is not logically false;
P(Φ ∧Ψ /Γ ) = P(Φ/Ψ ∧Γ ) · P(Ψ /Γ ),
(5.44)
when Γ and Ψ ∧Γ are not logically false;
if Φ and Ψ are logically equivalent, then
P(Φ/Γ ) = P(Ψ /Γ ),
(5.45)
when Γ is not logically false;
if Φ and Ψ are logically equivalent, then
P(Γ/Φ) = P(Γ/Ψ ),
(5.46)
when Φ and Ψ are not logically false;
P(Φ/Ψ ∧Φ) = ∗1,
(5.47)
when Ψ ∧Φ is not logically false;
if Φ1, Φ2, . . . , ΦN are mutually exclusive, then
P(Φ1 ∨Φ2 ∨. . . ∨ΦN/Γ ) =
N

n=1
P(Φn/Γ ),
(5.48)
when Γ is not logically false;
P(∀xΦ/Ψ ) = lim
n→∞P(Φ(t1/x) ∧. . . ∧Φ(tn/x)/Ψ ),
(5.49)
where Ψ is not logically false, Φ(t1/x) is the result of replacing the variable x
everywhere in Φ by a term t1, Φ(tn/x) is the result of replacing the variable x
everywhere in Φ by a term tn, etc;

5.3 Non-Archimedean Valued Probability Logics
191
P(ti = ti/Ψ ) = ∗1,
(5.50)
when Ψ is not logically false;
P(ti = t j ⊃(Φ ≡Φ(t j//ti))/Ψ ) = ∗1,
(5.51)
when Ψ is not logically false, where Φ(t j//ti) is the result of replacing ti by t j at
zero or more places in Φ;
if ti and t j are terms of L ∞
V , then
P(ti = t j/Ψ ) = ||(ti = t j) ∧Ψ ||∞
||Ψ ||∞
,
(5.52)
when Ψ is not logically false.
We postulate that
if Ψ is logically false, then P(Φ/Ψ ) = ∗1,
for every statement Φ of L ∞
V .
(5.53)
From (5.33) and (5.53) it follows that
if P(Φ/Ψ ) = ∗1 for all sentences Ψ ,
then Φ is a tautology;
(5.54)
if ||Ψ ⊃Φ||∞= ∗1 for any truth valuations,
then P(Φ/Ψ ) = ∗1.
(5.55)
Notice that all formulas of real inductive logic are also valid in non-Archimedean
inductive logic if we restrict the set ∗V of hyperrational (hyperreal) numbers to the
set ∗{0, 1} = {0, 1}N/U , i.e. to the set that contains only hypernumbers satisfying
the following property: if [ f ] = ⟨α1, α2, α3, . . .⟩, then for each j = 1, 2, . . . we have
α j ∈{0, 1}.
Under this condition, we have the Boolean complement. For example, the for-
mula P(Φ/Ψ ) + P(¬Φ/Ψ ) = 1 is valid for hypernumbers of ∗{0, 1}, but in the
general case, it isn’t valid in non-Archimedean probability logic. Therefore non-
Archimedean inductive logic is more general probability logic than real one. Show
that Bayes’ formulas are also valid for hypernumbers of the set ∗{0, 1}.
Theorem 5.4 (Bayes’ theorem) Let the propositions Γ1, . . . , ΓN have truth valua-
tions such that all truth values have the form of inﬁnite tuple ⟨α1, α2, α3, . . .⟩, where
for any j = 1, 2, . . . we have α j ∈{0, 1}. If proposition Ψ implies that the proposi-
tions Γ1, . . . , ΓN are mutually disjoint (i.e. Γ1 ∨. . . ∨ΓN has the truth value ∗1 for
all truth valuations), then

192
5
Non-Archimedean Valued Fuzzy and Probability Logics
P(Φ/Ψ ) =
N

n=1
P(Φ ∧Γn/Ψ ),
(5.56)
P(Φ/Ψ ) =
N

n=1
P(Φ/Γn ∧Ψ ) · P(Γn ∧Ψ ),
(5.57)
P(Γn/Φ ∧Ψ ) =
P(Φ/Γk ∧Ψ ) · P(Γk ∧Ψ )
N
n=1
P(Φ/Γn ∧Ψ ) · P(Γn ∧Ψ )
,
(5.58)
where k ∈{1, . . . , N}.
Proof Since Ψ
implies that the proposition Γ1 ∨. . . ∨ΓN is true, we see
that ||Ψ ||∞= ||Ψ ||∞∧||Γ1 ∨. . . ∨ΓN||∞. Thus, from (5.47) we obtain P(Γ1 ∨
. . . ∨ΓN/Ψ ) = ∗1andP(Φ ∧(Γ1 ∨. . . ∨ΓN)/Ψ ) = P(Φ/(Γ1 ∨. . . ∨ΓN) ∧Ψ ) ·
P(Γ1 ∨. . . ∨ΓN/Ψ ).
Since Ψ implies that Γ1, . . . , ΓN are mutually exclusive, we have that Φ ∧Γn and
Φ ∧Γm are also mutually exclusive (n ̸= m and n, m ∈{1, . . . , N}). Finally, from
(5.34) we get (5.56).
Formula (5.57) follows from (5.56). Statement (5.58) follows from (5.56) and
from rule (5.43).
□
5.3.3
p-Adic Valued Probabilities
Let us remember that for each ﬁxed prime number p, we can deﬁne a p-adic norm
| · |p on Q as follows. Let a ∈Q, a ̸= 0, and a = pnq/r, where q, r, and p are all
co-prime to each other. Then |a|p = |pnq/r|p = p−n and |0|p = 0. By this deﬁni-
tion, we understand the distance between two points a, b ∈Q as d(a, b) = |a −b|p.
So, the larger power of a prime p, the closer distance. For example, in 7-adic
metric, d(2, 51) < d(1, 2), because d(2, 51) = |51 −2|7 = |49|7 = |72|7 = 7−2 =
1/49 and d(1, 2) = |2 −1|7 = |1|7 = |70|7 = 70 = 1.
The basic properties of p-adic norm/distance are as follows: (i) |x|p = 0 iff x = 0;
(ii) |x · y|p = |x|p · |y|p; (iii) |x + y|p ≤max{|x|p, |y|p}. Property (iii) says that we
deal with the strong triangle inequality that gives a non-Archimedean metrics.
Assume that a ∈Qp, r ∈{pn : n ∈Z} ∪{0}. Then we can deﬁne the closed p-
adic ball with center a and radius r: B[a,r] := {x ∈Qp : |x −a|p ≤r}, the open
p-adic ball with center a and radius r: B(a,r) := {x ∈Qp : |x −a|p < r}, and the
p-adic sphere with center a and radius r: S(a,r) := {x ∈Qp : |x −a|p = r}. Notice
that the closed ball B[0, 1] is the ring of p-adic integers denoted by Zp.
There are many interesting topological properties of p-adic metrics like that: (1)
two p-adic balls are disjoint or one is contained in another; (2) every point of p-
adic ball can be its center (if b ∈B[a,r], then B[a,r] = B[b,r]), (3) B[a,r1] ∩

5.3 Non-Archimedean Valued Probability Logics
193
B[b,r2] = ∅iff |a −b|p > max{r1,r2}; (4) the ﬁeld of p-adic numbers is not
ordered, etc.
Khrennikov deﬁnes the p-adic probability measure as follows. Let us ﬁx r =
pn for some n ∈Z. Suppose, Ω is an arbitrary set of events and F is a ﬁeld of
subset of Ω. Suppose that there is an additive measure P : F →B[0,r] such that
P(Ω) = 1. Then ⟨Ω, F, P⟩is called p-adic r-probability space and P is called p-
adic r-probability. The main problem of this deﬁnition is that we cannot deﬁne the
standard σ-additivity in general case, because all σ-additive p-adic valued measures
deﬁned on σ-ﬁelds are discrete, although there are many other measures. Therefore
Khrennikov proposes to consider just p-adic valued measures which are bounded,
continuous,andnormalized(see[3]).Thisideaishissubstantialrestrictionindeﬁning
p-adic valued measures.
In papers of [1, 2, 7, 37], there are constructed p-adic valued probability logics,
where propositions take values in p-adic balls in accordance with Khrennikov’s
bounded, continuous, and normalized p-adic valued measures.
Another approach based on Khrennikov’s attempts to deﬁne p-adic valued (or
more generally, non-Archimedean valued or stream-valued) probabilities is offered
in the papers: [11–15, 17]. Finitely additive p-adic measures presented in those
papers are essential for our programming of the behaviour of a slime mould, so we
shall state some basic facts about them.
The ring Zp cannot be linearly ordered, but there are many possibilities to deﬁne
a partial ordering relation on the set Zp. For example, we can assume that (i) for
any ﬁnite p-adic integers σ, τ ∈N, we have σ ≤τ in Zp iff σ ≤τ in N; (ii) σ < τ
for any σ ∈N and τ ∈Zp \ N; (iii) for any pair of inﬁnite σ, τ ∈Zp let σ ≤τ iff
σt ≤τt for all t ∈N. Let us denote this ordering relation by OZp. It is easy to see that
OZp is not a linear ordering. For example, let p = 2 and let σ represents the p-adic
integer −1/3 = …10101…101 and τ the p-adic integer −2/3 = …01010…010.
Then the p-adic numbers σ and τ are incomparable. Now we can deﬁne sup and inf
digit by digit. It is easy to see that for any pair of inﬁnite p-adic integers σ and τ, the
corresponding inﬁmum and supremum are determined by inf(σ, τ) = . . . α2α1α0,
where αi = min(σi, τi), and sup(σ, τ) = . . . β2β1β0, where βi = max(σi, τi). The
greatest p-adic integer according to our deﬁnition is −1 = . . . xxxxxx, where x =
p −1, and the smallest is 0 = …00000.
Let Ω∗denote all inﬁnite streams built from members of Ω at each t = 0, 1, 2,
…, ∞. Its subsets will be denoted by A∗, B∗⊆Ω∗. Assume that the cardinality of
Ω is equal to p −1. Now, we can deﬁne p-adic fuzziness as follows: a p-adic fuzzy
measure is a set function FZ p(·) deﬁned for sets A∗, B∗⊆Ω∗, it runs over the set
Zp and satisﬁes the following properties:
• FZ p(Ω∗) = −1 and FZ p(∅∗) = 0.
• If A∗⊆Ω∗and B∗⊆Ω∗are disjoint, i.e. inf(FZ p (A∗), FZ p(B∗)) = 0, then
FZ p(A∗∪B∗)= FZ p(A∗) + FZ p(B∗). Otherwise, FZ p(A∗∪B∗)= FZ p(A∗) + FZ p
(B∗) −inf(FZ p(A∗), FZ p(B∗)) = sup(FZ p(A∗), FZ p(B∗)).
• If A∗, B∗⊆Ω∗, then FZ p(A∗∩B∗) = inf(FZ p(A∗), FZ p(B∗)).
• FZ p(¬A∗) = −1 −FZ p(A∗) for all A∗⊆Ω∗, where ¬A∗= Ω∗\ A∗.

194
5
Non-Archimedean Valued Fuzzy and Probability Logics
Hence, FZ p(·) can be interpreted as a p-adic valued cardinal number of members
of P(Ω∗).
A p-adicprobabilitymeasureisasetfunctionPZ p(·)deﬁnedforsets A∗, B∗⊆Ω∗
thus:
• PZ p(A∗) = −FZ p(A∗) ∈Zp
• PZ p(A∗|B∗) ∈Qp is characterized by the following constraint:
PZ p(A∗|B∗) =
PZ p (A∗∩B∗)
PZ p (B∗)
=
FZ p (A∗∩B∗)
FZ p (B∗) ,
where PZ p(B∗) ̸= 0, PZ p(A∗∩B∗) = inf(PZ p(A∗), PZ p(B∗)).
The measure PZ p(·) runs over the set Qp of all p-adic numbers (not only integers).
Notice that while Zp is the ring of p-adic integers, Qp is the ﬁeld of p-adic numbers.
For non-Archimedean valued probabilities, Bayes’ theorem does not hold in gen-
eral case (Theorem 5.4). This theorem holds only on 2-adic numbers. There are the
following two principal versions of non-Archimedean valued predicate logical cal-
culi proposed in [17]: p-adic valued extension of BL and hyper-valued extension
of ŁΠ. So, a structure ⟨Zp, ⊕, ¬L, 0⟩is a p-adic valued MV -algebra. Furthermore,
a structure ⟨Zp, ∧, ∨, ∗, ⇒, 0, −1⟩, where ∗∈{&L, &G} and ⇒∈{→L, →G} is a
p-adic valued BL-matrix. And if ∗= &L and ⇒=→L, it is called a p-adic valued
L-algebra. If ∗= &G and ⇒=→G, it is called a p-adic valued G-algebra. However,
a structure ⟨Zp, ⊕, ¬L, →Π, &Π, 0, −1⟩is not a p-adic valued ŁΠ-matrix. Only
a structure ⟨∗[0, 1], ⊕, ¬L, →Π, &Π, ∗0, ∗1⟩is a hyperrational valued ŁΠ-matrix,
where ∗[0, 1] is a non-standard (non-Archimedean) extension of [0, 1].
Using non-Archimedean (stream-valued) probabilities we can deﬁne non-Archi-
medean evolution of logical cellular automata [48], disprove the Aumann’s agree-
ment theorem [49], and simulate the dynamics of slime mould [19].
Let us show how we can simulate a swarm behaviour in p-aic valued logics.
5.4
p-Adic Valued Logic for Simulating the Swarm
Behaviours
5.4.1
p-Adic Logical Values in Experiments on Swarms
Assume, the cardinal number of Ω is equal to p −1, i.e. ⌈Ω⌉= p −1. Let us
assume that all attractants used in an experiment with a swarm are located in such
a way that at each time step t = 0, 1, 2, . . . , ∞the swarm cannot achieve more
than p −1 attractants and for some t = i the swarm can occupy exactly p −1
attractants. Then the family Ω∗of all inﬁnite streams which can be constructed,
i.e. Ω∗= ∞
t=0 Ωt, has the cardinal number −1 = FZ p(Ω∗) = ⌈Ω∗⌉= ⌈Zp⌉, the
largest integer of Zp (indeed, if p = 3, then ⌈Ω∗⌉= . . . 22222 = 0 −1 = −1 and
if p = 5, then ⌈Ω∗⌉= . . . 44444 = 0 −1 = −1).

5.4
p-Adic Valued Logic for Simulating the Swarm Behaviours
195
Hence, Ω∗is understood as the universe for the experiment with the swarm.
Suppose that At := ‘Attractants, which can be occupied by the swarm i at time
t’; Bt := ‘Attractants accessible for the attractant Ni by a logistic system of the
swarm at time t’; Ct := ‘If there are attractants accessible for the attractant Ni by
a logistic system of the swarm i at time t, then there are attractants accessible for
the attractant N j by a logistic system of the swarm j at time t’. Then we obtain
A∗= ∞
t=0 At; B∗= ∞
t=0 Bt; C∗= ∞
t=0 Ct such that A∗, B∗, C∗⊆Ω∗. In other
words, all statements about the experiment can be considered subsets of Ω∗.
The meanings of A∗, B∗, C∗are presented by cardinal numbers FZ p(A∗) = ⌈A∗⌉,
FZ p(B∗) = ⌈B∗⌉, FZ p(C∗) = ⌈C∗⌉, respectively. These numbers run over the set Zp.
Thus,byperformingtheexperimentwecanstudysomeensemblesΩ∗= ∞
t=0 Ωt,
such that ⌈Ω∗⌉= −1. Let us consider a sequence of ensembles Ωt having vol-
umes ⌈Ωt⌉, t = 0, 1, . . . We may imagine an ensemble Ω∗as being the popu-
lation of a tower T = TΩ, which has an inﬁnite number of ﬂoors with the fol-
lowing distribution of population through ﬂoors: population of t-th ﬂoor is Ωt.
Set Tk = k
t=0 Ωt × ∞
m=k+1 ∅m. This is a population of the ﬁrst k + 1 ﬂoors. Let
A∗⊂Ω∗and let us assume that n(A∗) = lim
t→∞nt(A∗), where nt(A∗) = ⌈A∗∩Tt⌉.
The quantity n(A∗) is said to be a non-well-founded volume of the set A∗.
Now we can deﬁne the probability of A∗by the standard proportional relation:
P(A∗) := PΩ∗(A∗) = n(A∗)
−1 ,
where ⌈Ω∗⌉= −1, n(A∗) = ⌈A∗∩Ω∗⌉= ⌈A∗⌉. In this case P(∅∗) = 0 and
P(Ω∗) = −1
−1 = 1.
We denote the family of all A∗⊆Ω∗, for which P(A∗) exists, by GΩ. The sets
A∗∈GΩ are said to be events. The ordered system ⟨Ω∗, GΩ, PΩ∗⟩is called a non-
well-founded ensemble probability space for the ensemble Ω. These probabilities
are p-adic valued.
The swarm behaviour is intelligent. This means that the swarm makes decisions
at each t = 0, 1, 2, . . . how to occupy as many attractants as possible. For making
decisions the swarm i appeals to a knowledge structure, a function Pi which assigns
to each attractant ωt ∈
t Ωt at t a non-empty subset of Ω∗, so that each thing ωt
belongs to one or more elements of each Pi, i.e. Ω∗is contained in a union of Pi,
but Pi are not mutually disjoint (see the previous subsections).
Suppose, we have a set of N swarms starting to move, call them i = 1, …, N.
Then Pi(ωt) is called i’s knowledge state at the attractant ωt. This means that if the
actual state is ωt, the swarm only knows that the actual state is in Pi(ωt).
We can interpret Pi(ωt) probabilistically as follows:
Pi(ωt) = {ω′ : Pi
Z p(ω′|ωt) = PZ p(ω′ ∧ωt)
PZ p (ωt)
> 0},

196
5
Non-Archimedean Valued Fuzzy and Probability Logics
where (i) Pi
Z p(ωt) = 1 iff ωt is occupied by the swarm for all t; (ii) Pi
Z p(ωt) = 0 iff
ωt is not occupied by the swarm for all t; (iii) Pi
Z p(ωt) = −. . . αt . . . α1α0, where
αt = p −1 if ωt is occupied at t, αt = 0 if ωt is not occupied at t, αt = p −2 > 0
if p −2 neighbour attractants of ωt are occupied at t, etc.; (iv) PZ p(ω′ ∧ωt) =
inf(PZ p(ω′), PZ p(ωt)). Evidently that Pi
Z p(ωt|ωt) > 0 for all ωt ∈
t Ωt, therefore
for all ωt ∈
t Ωt, ωt ∈Pi(ωt).
Now we consider the relation A∗⊆Pi(ωt), where A∗⊆Ω∗, as the statement that
at ωt agent i accepts the performance A∗:
Ki A∗= {ωt : A∗⊆Pi(ωt)}.
Some basic properties of knowledge operators Ki:
KiΩ ⊆Ω∗;
(5.59)
(Ki A∗∩Ki B∗) ⇒Ki(A∗∩B∗);
(5.60)
Ki(A∗∪B∗) ⇒(Ki A∗∪Ki B∗);
(5.61)
Ki(A∗∪B∗) = (Ki A∗∩Ki B∗);
(5.62)
A∗⊆B∗⇒Ki A∗⊆Ki B∗;
(5.63)
A ⊆Ki A;
(5.64)
Ki Ki A∗= Ki A∗.
(5.65)
Using relations (5.59)–(5.65), we can disprove the Aumann’s agreement theorem
for swarms (see Theorems 10.2 and 10.3).
Let B∗
i mean ‘Attractants, which can be occupied by agent i’. After several steps,
we expect fusions of all roads built by the swarm so that all accessible attractants
are being occupied by all agents. Does it mean that we observe a union of B∗
i ? No,
it does not. We face just the situation that since a time step t = k the sets B∗
i are
intersected. Let C∗
i mean ‘Attractants accessible for the attractant Ni by a road sys-
tem’. Assume, ω ∈B∗
i and ω′ ∈C∗
i . Evidently, Pi
Z p(ω′|ω) > 0. As a consequence,
we assume according to our deﬁnitions that each agent i knows ω at ω′ and knows
ω′ at ω, i.e. agent i accepts the performance B∗
i at ω′ and i accepts the performance
C∗
i at ω, i.e. Ki B∗
i = KiC∗
i .

5.4
p-Adic Valued Logic for Simulating the Swarm Behaviours
197
Fig. 5.1 The propagation of ant nest at t = 1, where circles are attractants and attractants e1, d3, and
d4 are occupied by ants. We see that at each step the ant nest can detect not more than 4 attractants.
Furthermore, at points b1, b3, b5, d1, d4, f1, f3, f5 the ant nest can make from one to four decisions
5.4.2
p-Adic Valued Adder and p-Adic Valued Subtracter
If the environment of a swarm contains many attractants, the swarm can simulta-
neously propagate its networks in many different directions. Let us assume that the
swarm cannot see more than p −1 attractants at time t = 0, 1, 2, . . . and for some
t = i the swarm can occupy exactly p −1 attractants (see Fig.5.1). Without loss
of generality, let us consider the case p = 5. This means that the swarm has four
possible directions in its motions. These directions can be coded by integers from 1
to 4 as follows:
• if the swarm moves just in one direction at time t, it is coded by 1t;
• if the swarm moves in two different directions at time t, it is coded by 2t;
• if the swarm moves in three directions at time t, it is coded by 3t;
• if the swarm moves in four directions at time t, it is coded by 4t.
For example, the swarm can move to the north, to the south, to the east, or to
the west. Nevertheless, in these motions the swarm can change the direction at the
same t and start to move to the northwest, to the northeast, to the southwest, or to

198
5
Non-Archimedean Valued Fuzzy and Probability Logics
the southeast. In this case the new directions can be coded by integers 5, 10, 15, 20
as follows:
• if the swarm changes one direction at time t, it is coded by 5t;
• if the swarm changes two different directions at time t, it is coded by 10t;
• if the swarm changes three directions at time t, it is coded by 15t;
• if the swarm changes four directions at time t, it is coded by 20t.
Furthermore, the swarm can move in standards directions simultaneously with
switching to non-standard directions, e.g. it can move to the north and to the northwest
or to the southwest and to the north, etc. Then the new directions can be coded by
integers 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, e.g.:
• if the swarm moves just in one direction at time t and simultaneously changes one
direction at the same time t, it is coded by 6t;
• if the swarm moves just in one direction at time t and simultaneously changes two
different directions at the same time t, it is coded by 11t;
• if the swarm moves just in one direction at time t and simultaneously changes
three directions at the same time t, it is coded by 16t;
• if the swarm moves just in one direction at time t and simultaneously changes four
directions at the same time t, it is coded by 21t, etc.
Thus, at one time step t we consider 24 codes of possible motions. This means
that we are limited by 5-adic two bit strings [α0α1] with values α0 + 5 · α1. These
two bit strings can be represented by the following 2-adic matrices:

1
1
1
1
b1 = 1
a21
a22
a23
a24
b2 = 0
a31
a32
a33
a34
b3 = 0
a41
a42
a43
a44
b4 = 0
c1 = 0 c2 = 0 c3 = 0 c4 = 0

= 1t;

1
1
1
1
b1 = 1
1
1
1
1
b2 = 1
a31
a32
a33
a34
b3 = 0
a41
a42
a43
a44
b4 = 0
c1 = 0 c2 = 0 c3 = 0 c4 = 0

= 2t;

1
1
1
1
b1 = 1
1
1
1
1
b2 = 1
1
1
1
1
b3 = 1
a41
a42
a43
a44
b4 = 0
c1 = 0 c2 = 0 c3 = 0 c4 = 0

= 3t;

5.4
p-Adic Valued Logic for Simulating the Swarm Behaviours
199

1
1
1
1
b1 = 1
1
1
1
1
b2 = 1
1
1
1
1
b3 = 1
1
1
1
1
b4 = 1
c1 = 0 c2 = 0 c3 = 0 c4 = 0

= 4t;

1
a12
a13
a14
b1 = 1
1
a22
a23
a24
b2 = 0
1
a32
a33
a34
b3 = 0
1
a42
a43
a44
b4 = 0
c1 = 1 c2 = 0 c3 = 0 c4 = 0

= 5t;

1
1
1
1
b1 = 1
1
a22
a23
a24
b2 = 0
1
a32
a33
a34
b3 = 0
1
a42
a43
a44
b4 = 0
c1 = 1 c2 = 0 c3 = 0 c4 = 0

= 6t;

1
1
1
1
b1 = 1
1
1
1
1
b2 = 1
1
a32
a33
a34
b3 = 0
1
a42
a43
a44
b4 = 0
c1 = 1 c2 = 0 c3 = 0 c4 = 0

= 7t, etc.,

1
1
1
1
b1 = 1
1
1
1
1
b2 = 1
1
1
1
1
b3 = 1
1
1
1
1
b4 = 1
c1 = 1 c2 = 1 c3 = 1 c4 = 1

= 24t,
where ai j = 1 (respectively, bi = 1 or c j = 1) if the attractant denoted by ai j (respec-
tively, by bi or c j) is occupied by the swarm. Otherwise ai j = 0 (respectively, bi = 0
or c j = 0). In the matrix coded by 1t, there existsi such that ai1 = 0, ai2 = 0, ai3 = 0,
ai4 = 0 and there exists j such that a2 j = 0, a3 j = 0, a4 j = 0. In the matrix coded
by 2t, there exists i such that ai1 = 0, ai2 = 0, ai3 = 0, ai4 = 0 and there exists j
such that a3 j = 0, a4 j = 0, etc. Notice that bi are outputs for rows and c j are outputs
for columns.
The p-adic valued adder for calculating x + y, where x, y ∈{1t, 2t, . . . , 24t}, is
represented by the fusion of two plasmodia coded by x and y at t.
The swarm can leave some attractants at time step t under speciﬁc conditions
such as there are neighbour repellents or in case an appropriate attractant was not
sufﬁcient for feeding. Then the p-adic valued subtracter for calculating x −y, where
x, y ∈{1t, 2t, . . . , 24t} and x > y, is represented by leaving attractants coded by y
at t.

200
5
Non-Archimedean Valued Fuzzy and Probability Logics
5.4.3
p-Adic Valued Towers of Higher-Order Sequents
Thus, different locations of p −1 = ⌈Ω⌉attractants cause different outcomes of
experiments with swarms. The wave sets A∗, B∗⊆Ω∗, such that 0 ≤⌈A∗⌉, ⌈B∗⌉≤
−1, are properties of the swarm expansions: how quickly the swarm moves, in what
direction, how many attractants it occupies and how many attractants it leaves. The
point is that by different locations of attractants, we can affect on swarm motions
differently. These locations combined with different intensity of attractants are outer
stimuli for swarm motions. Hence, appropriate descriptions A∗, B∗, . . . of the exper-
iment can be understood as propositions, such that FZ p(A∗), FZ p(B∗), . . . are p-adic
valued truth values of A∗, B∗, . . ., respectively.
Assume that we have a standard logical language Łp with standard deﬁnitions
of well-formed propositions (formulas) 1Φ, 1Ψ ,…Let these formulas be p-valued
and denote the propositions describing experiments with swarms at time step t = 0.
Examples of 1Φ, 1Ψ ,…at t = 0 are as follows: ‘Attractants, which can be occupied
by the swarm i’, ‘Attractants accessible for the attractant Ni by swarm networks’,
‘If there are attractants accessible for the attractant Ni by networks of the swarm i,
then there are attractants accessible for the attractant N j by networks of the swarm
j’ etc.
Let us build up an extension of Łp, where we can use the formulas iΦ, iΨ ,
…, i > 0, i.e. the propositions describing experiments with swarms at time step
t = i −1, as well as we can use the formulas ∞Φ, ∞Ψ , …, i.e. the propositions
describing experiments with swarms at an inﬁnite time.
The natural deduction system for p-valued logic Łp, where p is a ﬁnite natural
number, is considered in [50]. A p-valued sequent is regarded as a p-tuple of ﬁnite
sets Γi (1 ≤i ≤p) of formulas, denoted by Γ1 | Γ2 | . . . | Γp. It is deﬁned to be
satisﬁed by an interpretation iff for some i ∈{1, . . . , p} at least one formula in Γi
takes the truth value i −1 ∈{0, . . . , p −1}, where {0, . . . , p −1} is the set of truth
values for Łp.
By this approach, a two-valued sequent with Gentzen’s standard notation Γ1 ⊢Γ2,
where Γ1 and Γ2 are ﬁnite sequences of formulas, is interpreted truth-functionally:
either one of the formulas in Γ1 is false or one of the formulas in Γ2 is true. In other
words, we can denote a sequent Γ1 ⊢Γ2 by Γ1 | Γ2 and we can deﬁne it to be satisﬁed
by an interpretation iff for some i ∈{1, 2} at least one formula in Γi takes the truth
value i −1 ∈{0, 1}.
We can extend this approach of [50] to the inﬁnite-order case. In other words, we
can obtain a p-adic valued extension of the natural deduction system for Łp. Notably,
the deductive systems for non-Archimedean many-valued logics (including p-adic
many-valued logics) are proposed in [17, 19]. In this subsection, we consider another
system, which is built as an extension of p-valued sequent logic constructed in [50].
So, we will appeal to
• formulas ⟨1Φ, 2Φ, . . . , iΦ⟩, ⟨1Ψ , 2Ψ , . . . , iΨ ⟩, …, as towers with i ﬂoors, these
formulas are interpreted as i-order formulas belonging to Π1 or Σ1 (see the next
subsection),

5.4
p-Adic Valued Logic for Simulating the Swarm Behaviours
201
• formulas ⟨1Φ, 2Φ, . . . , iΦ, . . . , ∞Φ⟩, ⟨1Ψ , 2Ψ , . . . , iΨ , . . . , ∞Ψ ⟩, …, as tow-
ers with inﬁnite ﬂoors, these formulas are interpreted as inﬁnite-order formulas
belonging to Π1 or Σ1 (see the next subsection).
A higher-order formula is called vertical bounded if it does not contain predicate
constants and all predicate variables are quantiﬁed. Denote by Π1 (resp. by Σ1) the
class of vertical bounded higher-order formulas of the form Ψ such that all predicate
quantiﬁers of Ψ are universal (existential).
By jΓi denote the set of j-order formulas belonging to Π1 or Σ1. We obtain these
formulas by j-order quantiﬁcation of all formulas of Γi. We set 1Γi := Γi. Now we
can get a j-order sequent jΓ1 | jΓ2 | . . . | jΓp regarded as a tower of higher-order
sequents with the height equal to j
jΓ1 | jΓ2 | . . . | jΓp
. . .
3Γ1 | 3Γ2 | . . . | 3Γp
2Γ1 | 2Γ2 | . . . | 2Γp
1Γ1 | 1Γ2 | . . . | 1Γp
andwecangetaninﬁnite-ordersequent ∞Γ1 | ∞Γ2 | . . . | ∞Γp regardedasaninﬁnite
tower of higher-order sequents
. . .
3Γ1 | 3Γ2 | . . . | 3Γp
2Γ1 | 2Γ2 | . . . | 2Γp
1Γ1 | 1Γ2 | . . . | 1Γp
Higher-order and inﬁnite-order sequents have interpretations in the set Zp of
p-adic integers. Thus, we obtain a p-adic multiple validity for an inﬁnite-order
extension of ﬁrst-order p-valued sequent logic of [50].
For instance, let us consider a second-order extension of a two-valued sequent Γ1 |
Γ2. Suppose that 2Γi (i = 1, 2) denote the set of second-order formulas belonging
to Π1 or Σ1 such that they were obtained by second-order quantiﬁcation of all
formulas of Γi. Then each formula in 2Γ1, 2Γ2 has one of the forms ∀P Ψ (P),
∀P ¬Ψ (P), ∃P Ψ (P), ∃P ¬Ψ (P). Assume that these formulas are vertical bounded.
Consequently,theformula∀P Ψ (P)canbeconsideredasastatementthattheformula
Ψ (P) is general valid, the formula ∀P ¬Ψ (P) as a statement that Ψ (P) is non-
satisﬁable, the formula ∃P Ψ (P) as a statement that Ψ (P) is satisﬁable, and the
formula ∃P ¬Ψ (P) as a statement that Ψ (P) is non-general valid. Also, we can
say that in the second-order case, we have a four-valued logic with the following
truth values: ⟨1, 1⟩(‘general validity’), ⟨x, 1⟩for x ∈{0, 1} (‘satisﬁability’), ⟨0, 0⟩
(‘non-satisﬁability’), ⟨x, 0⟩for x ∈{0, 1} (‘non-general validity’). This implies that
if we build a matrix logic for inﬁnite-order extensions of formulas Ψ (P), then the
inﬁnite-order extension of binary logic has D = {(2i −1)∞
i=1} = {⟨1, 1, 1, . . .⟩} as
the set of designated truth values and it has V = {0, 1, 2, . . . , (2i −1)∞
i=1} as the set
of all truth values. Thus, we obtain a 2-adic valued logic.
A second-order sequent 2Γ1 | 2Γ2 is deﬁned to be satisﬁed by an interpretation iff
for some i ∈{1, 2} at least one formula in 2Γi takes the truth value ⟨x, i −1⟩(where
x ∈{0, 1}). A second-order sequent

202
5
Non-Archimedean Valued Fuzzy and Probability Logics
2Γ1 | 2Γ2
1Γ1 | 1Γ2
is deﬁned to be satisﬁed by an interpretation iff for some
⟨i, j⟩∈{⟨1, 1⟩, ⟨1, 2⟩, ⟨2, 1⟩, ⟨2, 2⟩}
at least one formula in 1Γi, 2Γ j takes the truth value ⟨i −1, j −1⟩.
5.4.4
p-Adic Valued Natural Deductions
Let us assume that Ω∗is a family of p-adic streams describing an experiment with the
swarm.Letusbuildalogicallanguageforpropositionssuchas‘Attractants,whichcan
be occupied by the swarm i at time t’, ‘Attractants accessible for the attractant Ni by
networksattimet’,‘Ifthereareattractantsaccessiblefortheattractant Ni bynetworks
of the swarm i at time t, then there are attractants accessible for the attractant N j by
networks of the swarm j at time t’, etc. These propositions do not have quantiﬁers
or terms and say about the experiment at time t = 0, 1, 2, . . . The truth valuation of
these propositions runs over the set {0, 1, . . . , p −1} at each t = 0, 1, 2, . . . Let us
denote the propositions at t = 0 by 1Φ, 1Ψ , …and the propositions at time t = i > 0
by i+1Φ, i+1Ψ , …Also, we can assume the existence of propositions at t = ∞and
denote them by ∞Φ, ∞Ψ , …
Now, let us identify each formula kΦ with a ﬁnite stream ⟨1Φ, . . . , kΦ⟩with
the same propositional content Φ and each formula ∞Φ with an inﬁnite stream
⟨1Φ, . . . , kΦ, . . .⟩with the same propositional content Φ. In this case kΦ is (pi −
1)k
i=1-valued and ∞Φ is p-adic valued. These propositions describe the whole exper-
iment up to the time t = 1, 2, . . . , ∞.
We associate each formula kΦ or ∞Φ with a statement ||kΦ|| or ||∞Φ|| describing
the experiment with the swarm in the universe Tj−1 =  j−1
t=0 Ωt × ∞
m= j ∅m or ∗Ω,
respectively. The truth value of ||kΦ|| or ||∞Φ|| is considered a cardinal number
⌈||kΦ||⌉or ⌈||∞Φ||⌉.
Suppose that each attractant involved into the experiment Ω∗is denoted by one
of the symbols d1, …, dm. Also, let us add some constants a1, …, am to our logical
language. By Ω∗(d1/a1, . . . , dm/am) let us denote valuations of constants in Ω∗.
Further, we can introduce individual variables x, y, …, running over all the attractants
of Ω, and the following four terms: + (addition of p-adic integers), · (multiplication
of p-adic integers), −(subtraction of p-adic integers), =. Then, we can introduce
predicate symbols t+1A1, …, t+1An with meanings describing some properties of
the experiment Ω∗with the swarm at time t. Examples of these properties are as
follows: ‘Occupation by the swarm i at time t’, ‘Accessibility for the attractant Ni by
networks at time t’, etc. Hence, t+1Al(a) can mean that ‘Occupation by the swarm i
at time t’ holds on an attractant a. The formula ∃xt+1 Al(x) can mean that there exist
attractant x such that ‘Accessibility for the attractant Ni by networks at time t’ holds

5.4
p-Adic Valued Logic for Simulating the Swarm Behaviours
203
on x. The formula ∀xt+1 Al(x) can mean that for all attractants x ‘Neighbourhood
for the attractant Ni at time t’ holds on x. In the same way as for the propositional
logic we can identify atomic propositions t+1Al(a), ∃xt+1Al(x), ∀xt+1 Al(x) with
ﬁnite streams:
⟨1Al(a), . . . , t+1 Al(a)⟩,
⟨∃x1Al(x), . . . , ∃xt+1 Al(x)⟩,
⟨∀x1 Al(x), . . . , ∀xt+1 Al(x)⟩,
respectively, and generalize them up to inﬁnite streams
∞Al(a), ∃x∞Al(x),
∀x∞Al(x) as follows:
∞Al(a) := ⟨1Al(a), . . . , t+1 Al(a), . . .⟩,
∃x∞Al(x) := ⟨∃x1Al(x), . . . , ∃xt+1 Al(x), . . .⟩,
∀x∞Al(x) := ⟨∀x1 Al(x), . . . , ∀xt+1 Al(x), . . .⟩.
Thus, at each t = 0, 1, 2, . . . we deal with (pi −1)t+1
i=1-valued logic. The nat-
ural deductive system for p-valued logic Łp is considered in [50]. A p-valued
sequent is regarded as a p-tuple of ﬁnite sets Γi (1 ≤i ≤p) of formulas, denoted
by Γ1 | Γ2 | . . . | Γp. It is deﬁned to be satisﬁed by an interpretation iff for some
i ∈{1, . . . , p} at least one formula in Γi takes the truth value i −1 ∈{0, . . . , p −1},
where {0, . . . , p −1} is the set of truth values for Łp.
We can extend this approach of [50] to (pi −1)t+1
i=1-valued or p-adic valued case.
By jΓi denote the set of jΨ formulas understood as streams. We set 1Γi := Γi. Now
we can get a j-order sequent jΓ1 | jΓ2 | . . . | jΓp regarded as a tower of higher-order
sequents with the height equal to j
jΓ1 | jΓ2 | . . . | jΓp
. . .
3Γ1 | 3Γ2 | . . . | 3Γp
2Γ1 | 2Γ2 | . . . | 2Γp
1Γ1 | 1Γ2 | . . . | 1Γp
andwecangetaninﬁnite-ordersequent ∞Γ1 | ∞Γ2 | . . . | ∞Γp regardedasaninﬁnite
tower of higher-order sequents
. . .
3Γ1 | 3Γ2 | . . . | 3Γp
2Γ1 | 2Γ2 | . . . | 2Γp
1Γ1 | 1Γ2 | . . . | 1Γp

204
5
Non-Archimedean Valued Fuzzy and Probability Logics
Higher-order and inﬁnite-order sequents have interpretations in the set Zp of
p-adic integers. Thus, we obtain a p-adic multiple validity for an inﬁnite-order
extension of ﬁrst-order p-valued sequent logic of [50].
For instance, a second-order sequent 2Γ1 | 2Γ2 is deﬁned to be satisﬁed by an
interpretation iff for some i ∈{1, 2} at least one formula in 2Γi takes the truth value
⟨x, i −1⟩(where x ∈{0, 1}). A second-order sequent
2Γ1 | 2Γ2
1Γ1 | 1Γ2
is deﬁned to be satisﬁed by an interpretation iff for some
⟨i, j⟩∈{⟨1, 1⟩, ⟨1, 2⟩, ⟨2, 1⟩, ⟨2, 2⟩}
at least one formula in 1Γi, 2Γ j takes the truth value ⟨i −1, j −1⟩.
So, each formula Ψ ∈jΓi is interpreted as a statement ∥Ψ ∥describing the
experiment with the swarm in the universe Tj−1 =  j−1
t=0 Ωt × ∞
m= j ∅m. A
model Ω∗, describing a real experiment with the swarm, is said to satisfy a
sequent jΓ1 | jΓ2 | . . . | jΓp (resp. ∞Γ1 | ∞Γ2 | . . . | ∞Γp) if there is a p-adic inte-
ger . . . 0 . . . 0iα j−2 . . . α1α0 (resp. a p-adic integer . . . α j−1α j−2 . . . α1α0) and a for-
mula jΨ ∈jΓi (resp. ∞Ψ ∈∞Γi) such that ⌈∥jΨ ∥⌉= . . . 00 . . . 00iα j−2 . . . α1α0
(resp. ⌈∥∞Ψ ∥⌉= . . . α j−1α j−2 …α1α0) on Ω∗. A sequent is called logically valid if
it is satisﬁed on each model Ω∗, i.e. on each real experiment with the slime mould.
Each formula of the set jΓi ( j > 1) contains an information about formulas of
the order smaller than j in the tower:
jΓ1 | jΓ2 | . . . | jΓp
. . .
3Γ1 | 3Γ2 | . . . | 3Γp
2Γ1 | 2Γ2 | . . . | 2Γp
1Γ1 | 1Γ2 | . . . | 1Γp
A model Ω∗satisﬁes this sequent if there is a p-adic integer
. . . 00 . . . 00α j−1α j−2 . . . α1α0
and formulas jΨ ∈jΓα j−1, j−1Ψ ∈j−1Γα j−2, …, 2Ψ ∈2Γα1, 1Ψ ∈1Γα0 such that
⌈∥jΨ ∥⌉= . . . 00 . . . 00α j−1α j−2 . . . α1α0.
A j-order introduction rule for a connective R at place i is a schema of the form:
⟨jΓ k
1 , jΔk
1 | . . . | jΓ k
p , jΔk
p⟩k∈I
jΓ1 | . . . | jΓi, R(A1, . . . , An) | . . . | jΓp

5.4
p-Adic Valued Logic for Simulating the Swarm Behaviours
205
where the arity of R is n, I is a ﬁnite set, jΓl = 
k∈I
jΓ k
l , jΔk
l ⊆{A1, . . . , An} and
the following condition holds: Let Ω∗be a model. Then the following are equivalent:
(1) ⌈∥R(A1, . . . , An)∥⌉= . . . 00 …00iα j−2 . . . α1α0 on Ω∗; (2) Ω∗satisﬁes the
sequents jΔk
1 | . . . | jΔk
p for all k ∈I.
An inﬁnite-order introduction rule for a connective R at place i is deﬁned for
inﬁnite-order sequents in the same way.
If a p-adic sequent is regarded as a tower, then a j-order introduction rule for a
connective R is considered not as one at place i, but as one at place
. . . 00 . . . 00α j−1α j−2 . . . α1α0.
Thus, the following condition holds: Let Ω∗be a model. Then the following are
equivalent:
(1) ⌈∥R(A1, . . . , An)∥⌉= . . . 00 . . . 00α j−1α j−2 …α1 α0 on Ω∗; (2) for all k ∈I,
Ω∗satisﬁes the sequents jΔk
1 | . . . | jΔk
p regarded as towers.
A j-order introduction rule for a ﬁrst-order quantiﬁer Q at place i is a schema
of the form:
⟨jΓ k
1 , jΔk
1 | . . . | jΓ k
p , jΔk
p⟩k∈I
jΓ1 | . . . | jΓi, Qx A(x) | . . . | jΓp
where I is a ﬁnite set, jΓl = 
k∈I
jΓ k
l , jΔk
l ⊆{A(a1), . . . , A(am)} ∪{A(t1), …,
A(tq)}. The al are metavariables for free variables satisfying the condition that they
do not occur in the lower sequent, the tn are metavariables for arbitrary terms, and the
following condition holds: Let Ω∗be a model. Then the following are equivalent:
• ⌈∥Qx A(x)∥⌉= . . . 00 . . . 00iα j−2 . . . α1α0 in Ω∗;
• for all d1, . . . , dm ∈Ω, there are terms t′
1, . . . , t′
q such that for all k ∈I, Ω∗(d1/a1,
…, dm/am) satisﬁes jΔ′k
1 | . . . | jΔ′k
p where jΔ′k
l is obtained from jΔk
l by instan-
tiating the eigenvariable tm with t′
m (1 ≤m ≤q).
An inﬁnite-order introduction rule for a ﬁrst-order quantiﬁer Q at place i is deﬁned
for inﬁnite-order sequents in the same way.
If a p-adic sequent is regarded as a tower, then a j-order introduction rule for
a ﬁrst-order quantiﬁer Q is considered not as one at place i, but as one at place
. . . 00 . . . 00α j−1α j−2 . . . α1α0. Then the following condition holds: Let Ω∗be a
model. Then the following are equivalent:
• ⌈∥Qx A(x)∥⌉= . . . 00 . . . 00α j−1α j−2 . . . α1α0 in Ω∗;
• for all d1, . . . , dm ∈Ω, there are terms t′
1, . . . , t′
q such that for all k ∈I, Ω∗(d1/a1,
…, dm/am) satisﬁes jΔ′k
1 | . . . | jΔ′k
p regarded as towers, where jΔ′k
l is obtained
from jΔk
l by instantiating the eigenvariable tm with t′
m (1 ≤m ≤q).
So, a (p-adic) inﬁnite-order sequent calculus is given by:
1. axioms of the form: A | A | . . . | A, where A is any j-order (inﬁnite-order) for-
mula;

206
5
Non-Archimedean Valued Fuzzy and Probability Logics
2. for every connective R and every truth value α ∈Zp, there is a j-order (inﬁnite-
order) introduction rule at place α;
3. for every quantiﬁer Q and every truth value α ∈Zp a j-order (inﬁnite-order)
introduction rule at place α;
4. j-order and inﬁnite-order weakening rules for every place i:
jΓ1|...| jΓi|...| jΓp
jΓ1|...| jΓi,A|...| jΓp ,
∞Γ1|...|∞Γi|...|∞Γp
∞Γ1|...|∞Γi,A|...|∞Γp ;
5. cut rules for every pair of truth values α, β ∈Zp such that n ̸= m in the expan-
sions of p-adic integers α = . . . α jnα j−2 . . . α0, β = . . . β jmβ j−2 . . . β0:
jΓ1 | . . . | jΓn, A | . . . | jΓp
jΔ1 | . . . | jΔm, A | . . . | jΔp
jΓ1, jΔ1 | . . . | jΓp, jΔp
.
A j-order (inﬁnite-order) sequent is provable if there is an upward tree of sequents
such that every topmost j-order (inﬁnite-order) sequent is an axiom and every other
j-order(inﬁnite-order)sequentisobtainedfromtheonesstandingimmediatelyabove
it by an application of one of the rules.
Theorem 5.5 (Soundness and Completeness) For every (p-adic) inﬁnite-order
sequent calculus the following holds: a j-order (inﬁnite-order) sequent is logically
valid iff it is provable without cuts from atomic axioms.
Proof It is an inﬁnite generalization of all discrete cases of [50].
□
Any intelligent behaviour consists in achieving a maximum efﬁciency and suc-
cessful control in looking for attractants and in reaching them. For different animals
including human beings these attractants are different, too. If we assume that at any
time step t, I can ﬁnd out or reach not more than p −1 my attractants, then my
behaviour can be coded by p-adic numbers. As a result, my behaviour implements
some p-adic valued arithmetic circuits and veriﬁes some p-adic valued logical propo-
sitions. In this chapter, I have proposed an appropriate logical language for describing
the behaviour for searching for and reaching not more than p −1 attractants at any
time step.
References
1. Ili´c-Stepi´c, A., Ognjanovi´c, Z.: Logics for reasoning about processes of thinking with infor-
mation coded by p-adic numbers. Studia Log. (2014)
2. Ili´c-Stepi´c, A., Ognjanovi´c, Z., Ikodinovi´c, N., Perovi´c, A.: A p-adic probability logic. Math.
Log. Quarter. 58(4–5), 263–280 (2012)
3. Khrennikov, A.: Toward theory of p-adic valued probabilities. Stud. Log. Gramm. Rhetor.
14(27), 137–154 (2008)
4. Khrennikov, A., Yamada, S., van Rooij, A.: The measure-theoretical approach to p-adic prob-
ability theory. Ann. Math. Blaise Pascal 6(1), 21–32 (1999)

References
207
5. Khrennikov, A.Y.: p-adic quantum mechanics with p-adic valued functions. J. Math. Phys.
32(4), 932–937 (1991)
6. Khrennikov, A.Y.: Interpretations of Probability. VSP International Scientiﬁc Publishers,
Utrecht/Tokyo (1999)
7. Miloševi´c, M.: A propositional p-adic probability logic. Publications de l’Institut Mathéma-
tique, Nouvelle série 87(101), 75–83 (2010)
8. Khrennikov, A., Schumann, A.: p-adic physics, non-well-founded reality and unconventional
computing. p-Adic Num. Ultrametr. Anal. Appl. 1(4), 297–306 (2009)
9. Khrennikov, A.Y., Schumann, A.: Logical approach to p-adic probabilities. Bullet. Sect. Log.
35(1), 49–57 (2006)
10. Schumann, A.: Group theory and p-adic valued models of swarm behaviour. Math. Methods
Appl. Sci. https://doi.org/10.1002/mma.4540
11. Schumann, A.: Dsm models and non-archimedean reasoning. In: Smarandache, F., Dezert, J.
(eds.) Advances and Applications of DSmT (Collected works), vol. 2, pp. 183–204. American
Research Press, Rehoboth (2006)
12. Schumann, A.: Non-Archimedean valued sequent logic. In: Eighth International Symposium
on Symbolic and Numeric Algorithms for Scientiﬁc Computing (SYNASC’06), pp. 89–92.
IEEE Press (2006)
13. Schumann, A.: Non-Archimedean valued predicate logic. Bullet. Sect. Log. 36(1–2), 67–78
(2007)
14. Schumann, A.: p-adic multiple-validity and p-adic valued logical calculi. J. Multi. Val. Log.
Soft Comput. 13(1–2), 29–60 (2007)
15. Schumann, A.: Non-Archimedean fuzzy and probability logic. J. Appl. Non-Class. Log. 18(1),
29–48 (2008)
16. Schumann, A.: Non-Archimedean valued and p-adic valued fuzzy cellular automata. J. Cell.
Automata 3(4), 337–354 (2008)
17. Schumann, A.: Non-archimedean valued extension of logic lπ and p-adic valued extension
of logic bl. J. Uncertain Syst. 4(2), 99–115 (2010)
18. Schumann, A.: p-adic valued fuzzyness and experiments with Physarum polycephalum. In:
11th International Conference on Fuzzy Systems and Knowledge Discovery (FSKD), pp.
466–472. IEEE Xplore (2014)
19. Schumann, A.: p-adic valued logical calculi in simulations of the slime mould behaviour.
J. Appl. Non-Classic. Log. 25(2), 125–139 (2015). https://doi.org/10.1080/11663081.2015.
1049099
20. Schumann, A.: p-adic valued models of swarm behaviour. AIP Conference Proceedings
1863(1), 360–369 (2017). https://doi.org/10.1063/1.4992538
21. Schumann, A., Adamatzky, A.: The double-slit experiment with Physarum polycephalum and
p-adic valued probabilities and fuzziness. Int. J. Gen. Syst. 44(3), 392–408 (2015)
22. Schumann, A., Pancerz, K.: p-adic computation with Physarum. In: A. Adamatzky (ed.)
Advances in Physarum Machines: Sensing and Computing with Slime Mould, Emergence,
Complexity and Computation, vol. 21, pp. 619–649. Springer International Publishing (2016)
23. Khrennikov, A.Y.: Modeling of Processes of Thinking in p-Adic Coordinates. Nauka, Fiz-
matlit, Moscow (2004). (in Russian)
24. Bachman, G.: Introduction to p-adic Numbers and Valuation Theory. Academic Press (1964)
25. Hasse, H.: Über-adische schiefkörper und ihre bedeutung für die arithmetik hyper-komplexen
zahlsysteme. Math. Ann. 104, 495–534 (1931)
26. Hasse, H.: Zahlentheorie. Akademie-Verlag, Berlin (1949)
27. Koblitz, N.: p-Adic Numbers, p-Adic Analysis and Zeta Functions, 2 edn. Springer (1984)
28. Mahler,K.:Introductiontop-AdicNumbersandTheirFunctions,2edn.CambridgeUniversity
Press (1981)
29. Robinson, A.: Non-Standard Analysis. North-Holland, Studies in Logic and the Foundations
of Mathematics (1966)
30. Khrennikov, A.: Mathematical methods of the non-archimedean physics. Uspekhi Matem-
aticheskikh Nauk 45(4), 79–110 (1990)

208
5
Non-Archimedean Valued Fuzzy and Probability Logics
31. Khrennikov, A.: Non-Archimedean Analysis: Quantum Paradoxes. Dynamical Systems and
Biological Models, Springer (1997)
32. Khrennikov, A.: p-adic probability interpretation of Bell’s inequality. Phys. Lett. A 200(3–4),
219–223 (1995)
33. Khrennikov, A.Y.: p-Adic Valued Distributions in Mathematical Physics. Kluwer Academic
Publishers, Dordrecht (1994)
34. Khrennikov, A.: Human subconscious as a p-adic dynamical system. J. Theor. Biol. 193,
179–196 (1998)
35. Khrennikov, A.: p-Adic discrete dynamical systems and collective behaviour of information
states in cognitive models. Discr. Dynam. Nature Soc. 5, 59–69 (2000)
36. Khrennikov, A.: Interpretations of probability and their p-adic extensions. Theor. Probab.
Appl. 46(2), 256–273 (2001)
37. Ili´c-Stepi´c, A., Ognjanovi´c, Z., Ikodinovi´c, N.: Conditional p-adic probability logic. Int. J.
Approx. Reason. 55, 9
38. Bˇehounek, L., Cintula, P.: Fuzzy class theory. Fuzzy Sets Syst. 154(1), 34–55 (2005)
39. Cintula, P.: The lπ and lπ 1
2 propositional and predicate logics. Fuzzy Sets Syst. 124(3), 21–34
(2001)
40. Cintula, P.: Advances in the lπ and lπ 1
2 logics. Arch. Math. Log. 42(5), 449–468 (2003)
41. Hájek, P.: Metamathematics of Fuzzy Logic. Springer, Netherlands, Dordrecht (1998)
42. Novák, V., Perﬁlieva, I., Moˇckoˇr, J.: Mathematical Principles of Fuzzy Logic. Kluwer,
Boston/Dordrecht (1999)
43. Gottwald, S.: Set theory for fuzzy sets of higher level. Fuzzy Sets Syst. 2, 25–51 (1979)
44. Gottwald, S.: Fuzzy Sets and Fuzzy Logic: Foundations of Application–from A Mathematical
Point of View. Vieweg, Wiesbaden (1993)
45. Gottwald, S.: Universes of fuzzy sets and axiomatizations of fuzzy set theory. part i: Model-
based and axiomatic approaches. Studia Logica 82, 211–244 (2006)
46. Novak, V.: On fuzzy type theory. Fuzzy Sets Syst. 149, 235–273 (2004)
47. Gerla,G.:Fuzzylogic.In:MathematicalToolsforApproximateReasoning,KluwerAcademic
Publishers (2001)
48. Schumann, A.: Proof-theoretic cellular automata as logic of unconventional computing. Int.
J. Unconvention. Comput. 8(3), 263–280 (2012)
49. Schumann, A.: Reﬂexive games and non-Archimedean probabilities. P-Adic Num. Ultrametr.
Anal. Appl. 6(1), 66–79 (2014)
50. Baaz, M., Fermüller, C., Zach, R.: Systematic construction of natural deduction systems for
many-valued logics. In: Proceedings of the 23rd International Symposium on Multiple Valued
Logic, pp. 208–213. Sacramento, USA (1993)

Chapter 6
Individual-Collective Duality in Swarm
Behaviours
The main assumption of behaviourism is that any animal behaviour can be controlled
by attractants and repellents. It is quite true just for bacteria, but evidently it is untrue
for swarms. The matter is that any swarm with a coordination of its members can
behave according to an individual-collective duality—it means, it can perform only
one action or many concurrent actions simultaneously and there is a fundamental
uncertainty which mode will by chosen by the swarm right now (to behave as a big
individual or a collective of distributed members). In this chapter, I am going to
explicate this problem logically. See [1–4].
6.1
Quantum Double-Slit Experiment
6.1.1
Non-additive Measures
The fuzzy measures allow us to consider the so-called spatial uncertainties, when
a phenomenon exists here and now, but lexicographically it has cloud boundaries,
i.e. there is no possibility to deﬁne additivity for measuring this phenomenon. In this
chapter, we introduce the so-called temporal uncertainties, when a phenomenon con-
tinuously changes, but in these changes there cannot be additivity, too, i.e. there are
always uncertainties in its dynamics. Non-additivity of some dynamical phenomena
does not mean that they cannot be studied mathematically. There are some rigorous
approaches such as p-adic probability theory [5] which allow us to do it. There has
been developed even p-adic quantum mechanics started from the publication of Igor
Volovich in [6], about quantum mechanics see [7, 8]. In p-adic quantum mechan-
ics [9, 10], p-adic probabilities are applied instead of real ones (about some logical
aspects of p-adic physics see [11]).
© Springer International Publishing AG, part of Springer Nature 2019
A. Schumann, Behaviourism in Studying Swarms: Logical Models of Sensing
and Motoring, Emergence, Complexity and Computation 33,
https://doi.org/10.1007/978-3-319-91542-5_6
209

210
6
Individual-Collective Duality in Swarm Behaviours
The most signiﬁcant feature of p-adic probabilities (or more generally, non-
Archimedean probabilities or probabilities on inﬁnite streams) is that they do not
satisfy additivity. On the one hand, the p-adic analogies of the central limit theorem
in real numbers face the problem that the normalized sums of independent and i.d.
random variables do not converge to a unique distribution, there are many limit points
[12], therefore in p-adic distributions we cannot build up the Gauss curve. On the
other hand, the powerset over inﬁnite streams like p-adic numbers is not a Boolean
algebra in general case. In particular, there is no additivity—we cannot obtain a par-
tition for any set into disjoint subsets whose sum gives the whole set (see Proposition
10.1).
The main feature of any swarm behaviour is that, on the one hand, the swarm
motions are intelligent, but, on the other hand, they do not verify the induction prin-
ciple (when the minimal set satisfying appropriate properties is given). This means
that they can implement Kolmogorov-Uspensky machines only in a form of approxi-
mation, because the swarm performs much more, than just conventional calculations
(the set realized is not minimal). So, if we perform the double-slit experiment for a
swarm, we detect self-inconsistencies showing that we cannot approximate atomic
individual acts of swarms as well as it is impossible to approximate single pho-
tons. From the standpoint of measure theory, it means that we cannot deﬁne additive
measures for swarm actions.
In my opinion, the claim that there are no additive measures on swarm actions
is a fundamental result for many behavioural sciences. Non-additivity of actions
can be expressed in different ways: (i) natural transition systems, such as swarm
behaviour, cannot be reduced to Kolmogorov-Uspensky machines, although their
actions are intelligent, (ii) there is an individual-collective duality, when we cannot
approximate atomic individual acts (an individual, such as plasmodium of Physarum
polycephalum, can behave like a collective and a collective, such as collective of
plasmodia, can behave like an individual).
In this chapter, we propose to use p-adic valued fuzziness and probabilities for
measuring behaviours which cannot be measured additively.
6.1.2
Performativity in Quantum Experiments
In order to check whether there is an additivity for quantum probabilities, i.e. whether
quanta are logical atoms indeed, the double-slit experiments have been performed
with different particles: photons (this experiment was earliest and done by Thomas
Young between 1801 and 1805), electrons [13], neutrons [14–16], etc. See also [17–
20]. In these experiments a ﬂuorescent screen has been used, so that the arrival of each
electron is registered as a ﬂash of light. On the one hand, the ﬂash of a single electron
on the screen occurs totally at random. On the other hand, if both slits are open and
the experiment is continued for a sufﬁciently long period of time for thousands
single electrons, there is an accumulation of ﬂashes in some regions according to
an interference pattern. As a result, the sum of the patterns with one slit covered

6.1 Quantum Double-Slit Experiment
211
at a time is not equal to the interference pattern with both slits opened: P12(x) =
P1(x) + P2(x) + 2√P1(x)P2(x) cos δ, where δ = 2πd sin θ/λ and λ = h/p, where
p is the momentum of the passing electrons and λ is de Broglie wavelength. This
means that the electrons cannot be considered the logical atoms, as they can behave
likewaves(collectives,i.e.compositesets),notparticlesintheconventionalmeaning.
The fact of that we cannot obtain a partition of sets for quantum probabilities just
means that quanta cannot be regarded as logical atoms. Therefore Kolmogorovian
probabilities are unapplied for quantum phenomena. The set-theoretic universes,
where there are no atoms are called non-well-founded. They are studied in non-well-
founded set theory [21]. Appropriate number systems, where numbers are deﬁned as
inﬁnite streams, have a non-Archimedean structure. As a consequence, probabilities
for non-well-founded sets may be deﬁned on non-Archimedean number systems
such as p-adic numbers [22–24] or inﬁnitesimals [25].
In this section, I argue that the matter of quantum non-objectivity is that, on
the one hand, the formalism of quantum mechanics constructed as a mathematical
theory is self-consistent, but, on the other hand, quantum phenomena as results of
experimenter’s performances are not self-consistent. This self-inconsistency is an
effect of that the language of quantum mechanics differs much from the language
of human performances. The ﬁrst is the language of a mathematical theory which
uses some Aristotelian and Russellian assumptions (e.g. the assumption that there
are logical atoms). The second language consists of performative propositions which
are self-inconsistent only from the viewpoint of conventional mathematical theory,
but they satisfy another logic which is non-Aristotelian. Hence, the representation
of quantum reality in linguistic terms may be different: from a mathematical theory
to a logic of performative propositions. At the level of mathematical theory, we deal
with linguistic terms, satisfying the Aristotelian assumptions. At the level of logic
of experimenter’s performances, we deal with linguistic terms, not satisfying the
Aristotelian assumptions.
Thus, it is possible to avoid the “quantum inconsistency” by applying modern tools
of symbolic logic for studying intelligent behaviour (performances) and we will show
that the quantum behaviour satisﬁes all the basic properties of performances. Logical
tools for studying human behaviour were ﬁrst proposed in the 20th-century language
philosophy. Notice that in philosophy of language since Ludwig Wittgenstein [26],
John Searle [27–29], and John Langshaw Austin [30] the ideas of non-objectivity
of our everyday reality have actively developed within the so-called paradigm of
linguistic solipsism. According to this paradigm, we deal just with linguistic reality
if we think or act and cannot go out of language and return to things themselves. Any
fact is seeable and understandable if and only if this is speakable and the fact can
be described in a language [31]. So, in any thinking we are limited by our possible
speech acts and in any activity by speech interactions. Language is a part of our
behaviour and the way we are interacting with others, for example by commanding,
requesting, pleading, joking, debating, etc. Philosophers of language distinguish per-
formative propositions designating and expressing our behaviour from informative
propositions denoting facts. While the informative propositions are truth-functions
of the elementary propositions whose meanings are presented by facts, therefore

212
6
Individual-Collective Duality in Swarm Behaviours
they always have references in the real world, the performative propositions are
non-objective in principle, we cannot ﬁnd out any real references for them. They
are self-referent and their meanings are just their utterances [26, 30]. It is possi-
ble to claim that some quantum statements should be considered as performative
propositions, as well.
Notably, the informative propositions are ever referential, i.e. their meanings
do not depend upon contexts and directly refer to facts. For example, it rains or
it does not. Therefore ‘it rains’ is a true or false proposition. Simple proposition
refer to simple facts (‘it rains’, ‘the wind blows’, etc.). Composite propositions refer
to composite facts (‘it is raining now and the wind blows hard’). So, we can ever
suppose the existence of logical atoms: ﬁrst, logical atoms as simple propositions
to build theories by composition rules and, second, logical atoms as simple facts to
build models by composition rules. And in mathematical logic, we study relations
between theories and models.
Let us consider now the proposition ‘I sell asset X ’. Its meaning varies in the
contexts of different situations and, therefore, it is a performative proposition. For
example, at a loss relative to the price at which assets were purchased, the ratio-
nal investors are likely to sell assets. On the other hand, the individual investors
(they are usually irrational) prefer to sell assets which have gone up in value rel-
ative to their purchase price. Meanings of performative propositions depend on
contexts and can change in time. For example, investors in their performative
propositions (e.g. forecasts) might be optimistic, while at other times, they might
be pessimistic. So, we cannot ﬁnd out facts as logical atoms for the proposition
‘I sell asset X ’. The point is that with the lapse of time investors can build different
families of intensions as the meaning of phenomenon ‘selling asset X ’ which can
always be self-inconsistent, as a result. The self-reference means here that the propo-
sition ‘I sell asset X ’ refers not to facts, but to different intensions which ever change
and can satisfy self-inconsistency. Hence, the self-referentiality just means that there
are no logical atoms for both performative propositions and their meanings. In this
chapter, I will show how the self-referentiality could be understood for quantum
phenomena and propositions about them.
By emphasizing the role of performative propositions in quantum mechanics,
we cannot avoid a discussion on the role of free will. I will show that in quantum
mechanics the problem of free will is involved into considerations—how quantum
performances can be thought and treated as appropriate performative propositions for
which there are no real references, because they (as well as performative propositions
about human interactions) have a non-objective status, see [32, 33].
For example, let us deﬁne truth-valuations of quantum mechanics conventionally,
in the way of Aristotle and Russell:
• (i) the property E is actual (true) in a given state S, whenever a test of E on any
physical object x in S would show that E(x) is true for every x in the state S;
• (ii) the property E is nonactual (false) in a given state S whenever a complementary
property ¬E on any physical object x in S would show that ¬E(x) is true for every
x in the state S.

6.1 Quantum Double-Slit Experiment
213
Objects x are interpreted as individuals (logical atoms). Assume that x mean
quanta, E, ¬E properties, discoveredinthedouble-slit experiment, withthefollowing
meanings:
E := “the non-detection of the position of x on the ﬁrst screen in one of the two
slits and the detection of the position of x on the registration screen corresponding
to the momentum representation with the interference picture”;
¬E := “the detection of the position of x on the ﬁrst screen in one of the two slits
or the non-detection of the position of x on the registration screen corresponding to
the momentum representation with the interference picture”.
According to the double-slit tests, we face that E(x) and ¬E(x) are true for the
same state S. Obviously, that is self-inconsistent.1
But we can deny our assumptions that x are logical atoms, i.e. we can assume
that x are not exclusive individuals. For instance, we can put forward the following
self-referent deﬁnition of x: {x} = {a, b}, i.e., x is both a and b, where a = (b, (a))
and b = (a, (b)), i.e., a = (b(a(b(a(b . . .))))) and b = (a(b(a(b(a . . .))))) are two
mutually depended inﬁnite streams. Let E(a) be true, ¬E(b) be true, E(b) be false,
and ¬E(a) be false. In this case, E(x) and ¬E(x) are true for the same state S and
we cannot logically divide x into a and b, because x is a simple object, although it
is not an individual. In this chapter, I will show, how we can deal with these strange
non-Aristotelian objects logically.
Notice that the language of any physical theory consists of two different lan-
guages: a theoretical language (formal theory with axioms and inference rules) and
an observational language (semantics for the theoretical language). The ﬁrst lan-
guage contains theoretical terms, which are understood as expressions that refer to
non-observable entities or properties. The second language contains observational
terms (observables).
1Notice that in this chapter, we deal just with the ﬁrst-order logic to show that its non-classical
version proposed by us, where there are no logical atoms, is a more applicable basic logical theory
for quantum mechanics. Evidently, some disadvantages of ﬁrst-order logic and its Aristotelian-
Russellian semantics for quantum mechanics can be avoided in logics of higher orders. For example,
the statement that the property E is actual (true) in a state S may assume quantifying on S in an
appropriate second-order logic. But it is better to avoid the disadvantages of Aristotelian-Russellian
semantics right at the level of ﬁrst-order logic what we are doing actually. So, in classical logic
the properties ¬E(x) and E(x) deﬁned above cannot be true for the same S. Obviously, there
are properties describing the double-slit experiment which are not self-inconsistent such as E′ :=
“if there is a non-detection of the position of x on the ﬁrst screen in one of the two slits, then
there is a detection of the position of x on the registration screen corresponding to the momentum
representation with the interference picture”; E′′ := “there is a detection of the position of x on the
ﬁrst screen in one of the two slits, then there is a non-detection of the position of x on the registration
screen corresponding to the momentum representation with the interference picture”. Thus, we face
the theoretical impossibility of assigning simultaneously truth values to all statements of the form
E(x) describing the double-slit experiment, because some assignments would be self-inconsistent
formally, such as ¬E(x) and E(x), although experimentally we can suppose a veriﬁcation of both
¬E(x) and E(x) at the same S. Our logic proposed in the chapter extends these limits to describe
more properties for the same state, than the classical logic can allow.

214
6
Individual-Collective Duality in Swarm Behaviours
A logic for observables is constructed in the observational language and a logic
for theoretical entities in the theoretical language. In the early 20th century, there was
a philosophical movement of logicism and its followers claimed that it is possible to
constructagenerallogicforbothobservablesandtheoreticalterms.Thisgenerallogic
could be called “logical physics”. It is a part of logic, where logical properties of terms
and propositions in relation to space, time, motion, causality, etc. are studied [34].
Usually, logical physics has been presented by logical tools for reducing propositions
with theoretical entities to propositions with observables. In the accordance with this
task, the theoretical terms are understood as follows: a term t is theoretical if and
only if it holds, for all methods m of determining its extension, that m rests upon
some axioms of some theory T and otherwise it is observational [35]. For example, in
classical mechanics all methods of determining the force acting upon a particle appeal
to some axioms of classical mechanics (CM), therefore force is a theoretical term
for CM. The entity of spatial distance does not depend upon the Newtonian axioms.
Hence, it is an observable of CM. Thus, the reduction procedure, which eliminates
theoretical terms of an axiomatic theory by means of observables, is considered a set
of semantic rules for interpreting propositions with theoretical terms on propositions
with observables.
In the way proposed by R. Carnap and C.-O. Hempel, we can reduce theoretical
entities by the following schemata: c ⇒(h ⇒e), where h is a proposition in theo-
retical terms (hypothesis), c and e are propositions in terms of observables such that
c expresses certain observational conditions, which are satisﬁed, e presents suitable
detecting devices, which then have to show observable responses.
It was proven that there are ever theoretical terms which cannot be reduced to
observational terms by any logical schemata. This circumstance of the existence of
irreducible theoretical terms shows the rigorous limits of logical physics and logicism
in physical sciences at all. For example, in quantum mechanics (QM) there are, ﬁrst, a
formal physical theory formulated in a theoretical language and, second, its semantics
formulated in an observational language describing quantum experiments. There is
also a logical way to reduce theoretical entities to observables. This way is presented
by quantum logic (QL). Its logical schemas of reduction are as follows:
p, q := ‘observable o has a value in a Borel set Δ’
and such propositions are represented by closed subspaces of a Hilbert space, H .
The set of all such subspaces forms an ortholattice, L (H ), with p ≤q deﬁned by
‘p is a subspace of q’. The logical operations of ‘and’, ‘or’, and ‘not’ are modelled
respectively by the operations of meet (inﬁmum), join (supremum) and orthocom-
plement on L (H ). The lattice L (H ) is atomistic, complete, and orthomodular
(non-distributive).
So, as we see, another concept of truth is deﬁned in QL and this concept is radically
different from the classical (Aristotelian-Russelian) concept of truth [36], because
the QL schemas of reducing theoretical terms are different a lot from the Carnap and
Hempel’s classical manner. The main problem of QL is that even in non-classical
means of interpreting QM there are irreducible theoretical statements. For example,

6.1 Quantum Double-Slit Experiment
215
the QM explanations of the double-slit experiment cannot be directly interpreted in
QL. Nevertheless,
quantum logics can be interpreted as a pragmatic language of pragmatically decidable
assertive formulas, which formalize statements about physical systems that are empirically
justiﬁed or unjustiﬁed in the framework of quantum mechanics. According to this inter-
pretation, quantum logic formalizes properties of the metalinguistic concept of empirical
justiﬁcation within quantum mechanics rather than properties of a quantum concept of truth
[36].
The Garola’s pragmatic extension of QL allows him to deﬁne justiﬁcations of the-
oretical statements which cannot be reduced directly, e.g. within this extension it
is possible to justify the QM explanations of the double-slit experiment. We can
remember that the irreducibility of theoretic entities can imply even scientiﬁc anar-
chism:
Science is an essentially anarchic enterprise: theoretical anarchism is more humanitarian and
more likely to encourage progress than its law-and-order alternatives [37].
Therefore, the pragmatic approach can explicate many presuppositions of quantum
physicists and their way of reasoning as one of the possible ways.
My approach to QL is different from the conventional QL with propositions
deﬁned on members of L (H ) and the Garola’s pragmatic extension of this QL.
First of all, we would like to follow the pure logicism that has been reanimated
by unconventional computing recently. In unconventional computing, we appeal to
the following schemata of logical reductions: I ⇒(h ⇒O), where h is a theoret-
ical proposition, I are inputs of an unconventional computer (quantum computer,
DNA-computer, Physarum polycephalum computer, etc.) and O are outputs of this
computer. Intheseschemata, his interpretedas aprocessor of suitableunconventional
computer.
Unconventional computing is not so ambitious as physical theories such as QM.
This new approach to computations completely ignores theoretical entities if they
cannot be applied in designing an appropriate unconventional (abstract or real) pro-
cessor. Hence, it deals just with reducible theoretical terms. In my research, I found
out that the behavioural logic constructed on the observables of Physarum poly-
cephalum and parasites of Schistosomatidae (Trematoda: Digenea) can be directly
applied in the double-slit experiment with quanta. The basic idea of this behavioural
logic is in the individual-collective dualism that there are no logical atoms in
behaviours. Notice that logical theories for unconventional computing are always
constructed in an observational language. In my opinion, the propagation of photons
has some similarities with an intelligent propagation of Physarum polycephalum,
parasites of Schistosomatidae (Trematoda: Digenea), and may other living organ-
isms. Perhaps, we can claim about a new version of pantheism and idealism that the
same patterns of intelligent behaviours are observed everywhere—from quanta to
one-cell organisms and human beings.

216
6
Individual-Collective Duality in Swarm Behaviours
6.1.3
Different Syllogistics for Classical Mechanics
and Quantum Mechanics
Let us recall that theKolmogorov’s mainassumptioninprobabilitytheoryis that there
exists a set partition into disjoint subsets and, respectively, the probability measure
deﬁned on the given set is calculated as the addition of appropriate probabilities
deﬁned on subsets. However, we have just exempliﬁed in the previous subsection (by
the quantum double-slit experiment) that there are observables, where the additivity
for probabilities is falsiﬁed if we deal with behaviours of quanta.
The intuition of objectivity that has been felt by the majority of physicists since
the Ancient times till now was ﬁrst formulated by Aristotle. According to him, there
is ‘hypokeimenon’ as substratum of any predicates. Hypokeimenon is a family of
singular events or singular facts (‘atoms’ in the ﬁrst meaning proposed by Dem-
ocritus). For quantum physicists, hypokeimenon is given by smallest particles and
all the world is described by predicates in relation to these particles, like that: ‘the
quantum has the property A’, ‘the complex B of quanta has properties Ax, Ay, Az, …,
which explore physical phenomena x, y, z, …, respectively’, …, etc. By Kolmogorov,
probabilities should be involved in our reasoning just on particles (singular events)
or their Boolean compositions. However, the double-slit experiment means that pho-
tons cannot be considered the Aristotelian hypokeimenon and there are no singular
events at all.
According to Aristotle, hypokeimenon, the ‘ﬁrst subject’, underlying things a, b,
c, . . ., present an objective reality. Every underlying thing possesses unique proper-
ties. It means that a, b, c, . . . are atoms of our database. There is nothing less than
them. Due to properties, we can group atoms within different classes P, Q, R, . . .
The more general property of thing, the more extensive class to which it belongs by
this property.
Hence, the idea of hypokeimenon, the underlying things, allowed Aristotle to
build up formal databases as well-founded trees of data (i.e. these trees are ﬁnite and
without cycles or loops). He started with underlying things as primary descendants
of trees in constructing ontological (syllogistic) databases. Let us notice that, by
Aristotle, different sciences have different syllogistic databases, because they use
different means for obtaining predicates for hypokeimenon. The quantum physics
follows this Aristotelian understanding of objectivity and differs from the Ancient
physics only by different ways of creating predicates for underlying things which
are understood now as smallest particles.
Syllogistic trees contain genus-species relations among items. We know that in
genus-species relations we can consider a branch (a relation between a genus and
species) as implication, where the top of branch (genus) is regarded as consequent
of implication and the bottom of branch (species) as antecedent of implication. Then
for each node of the genera-species tree, we may deﬁne an intension as all reachable
genera (all higher nodes) and an extent as all reachable species (all lower nodes). It
is known that the greater extent, the smaller intension and the greater intension, the
smaller extent.

6.1 Quantum Double-Slit Experiment
217
Thus, the ﬁrst logical database was invented by Aristotle. It is designed in his
syllogistics. He suggested using this database as a logical frame for different sciences.
Therefore if we claim that a science is a database constructed on the basis of empirical
observations by applying logical inference rules, then we can claim that the history
of exact science has started since Aristotle.
Let us assume that such a database is closed under all logical operations. Then
in this database the following relations take place. Let P be a property. Then there
is also a property non-P. Further let P be more extensive than Q (i.e. an appropriate
class P is more extensive, than Q). Then we obtain the following relations:
• Q and non-P are properties which can be together false, but they cannot be together
true in relation to any atom of our database;
• P and non-Q are properties which can be together true, but cannot be together
false in relation to any atom of our database;
• P and non-P are properties which cannot be together true and cannot be together
false in relation to any atom of our database;
• Q and non-Q are properties which cannot be together true and cannot be together
false in relation to any atom of our database;
• if Q is true in relation to some atoms of our database, then also P is true in relation
to the same atoms of our database;
• if P is not true in relation to some atoms of our database, then also Q is not true in
relation to the same atoms of our database.
Thus, in the Aristotelian database we deal with the Boolean algebra due to the
assumption of existence of logical atoms (singular events). Since Aristotle the objec-
tivity has been understood as a possibility to construct databases when there is ‘sub-
ject’, the underlying things, the family of atoms grouped in classes, so that these
classes are closed under all logical operations. In different sciences we choose dif-
ferent properties of atoms and as a consequence we group atoms differently. Such
an intuition of objectivity holds in quantum physics till now.
Notably, classical mechanics (CM) can be readily presented as a semantics for
the Aristotelian logic closed over logical superpositions of syllogistic propositions of
the following kind: “All S are P”, “Some S are P”, “No S are P”, “Some S are not P”.
The point is that in CM, ﬁrst, we have Aristotelian atoms or individuals deﬁned as
particles, second, in CM the state of a system S consisting of N particles is deﬁned
by giving the 3N position coordinates and the 3N momentum coordinates. Hence,
according to CM, any state of S is fully determined by three values for position and
three values for momentum of all particles of S . These two circumstances allow us
to deﬁne a veriﬁcation of syllogistic propositions as follows:
SaCM P:
“All particles of S with positions S have momentums P” means that the
system S is not empty (i.e. it contains some particles) and for all particles
of S if we know their position S, then we know their momentum P;
SiCM P:
“Some particles of S with positions S have momentums P” means that
for some particles of the system S we know their position S and we know
their momentum P;

218
6
Individual-Collective Duality in Swarm Behaviours
SeCM P:
“No particles of S with positions S have momentums P” means that for
all particles of the system S we do not know their position S or we do
not know their momentum P;
SoCM P:
“Some particles of S with positions S do not have momentums P” means
that all particles do not belong to the system S or there are particles of S
such that we know their position S and we do not know their momentum
P.
Formally:
SaCM P := (∃A(AεS) ∧∀A(AεS ⇒AεP));
(6.1)
SiCM P := ∃A(AεS ∧AεP);
(6.2)
SeCM P := ¬(SiCM P);
(6.3)
SoCM P := ¬(SaCM P).
(6.4)
All other propositions of Aristotelian logic are deﬁned thus: (i) each syllogistic
proposition deﬁned in (6.1)–(6.4) is a proposition, (ii) if X , Y are propositions, then
¬X , ¬Y, X ⋆Y, where ⋆∈{∨, ∧, ⇒}, are propositions, too. Now, the Aristotelian
logic can describe properties of our knowledge on systems S of CM.
Nevertheless, we can assume reality without objectivity, i.e. without logical atoms
of databases. In modern logic universes in which there are no atoms are studied as
well. However, in modern sciences the intuition that logical atoms exist has been
used till now, and Aristotle’s reasoning has been intuitively applied.
Notice that any context-based reasoning can be realized only in a universe with-
out atoms. For instance, let us consider the following two propositions from the
Bible: ‘bestow that money for sheep’ and ‘bestow for whatsoever thy soul desireth’
(Deut. 14:26). Syntactically, if we assume the existence of logical atoms, ‘bestow
for whatsoever thy soul desireth’ is a universal afﬁrmative proposition (SaP) and
‘bestow that money for sheep’ is a particular afﬁrmative proposition (SiP), i.e. the
ﬁrst is more general, than the second. However, for example, I do not desire sheep
and I do not know people who desire it. Perhaps, such people exist, but I do not
know. Then we cannot plot the classical square of opposition, because ‘bestow that
money for sheep’ is not included into ‘bestow for whatsoever thy soul desireth’, e.g.
maybe my soul does not desire sheep, but desire many other things. The matter is
that ‘thy soul desireth’ is a performative proposition and it has different meanings
at different situations (there are no atoms for that proposition). This means that in
this Biblical example the implication SaP ⇒SiP is false in general case. Thence,
we could assume another semantics, where SaP and SiP are different viewpoints of
the same level. Therefore, at one and the same situation of utterance both statements
(‘bestow for whatsoever thy soul desireth’, SaP, and ‘bestow that money for sheep’,
SiP) may be simultaneously false, but cannot be simultaneously true. In this way we
obtain the unconventional square of opposition.

6.1 Quantum Double-Slit Experiment
219
The same situation takes place for photons and other quanta. The conventional
square of opposition does not hold for them, because logical atoms do not exist for all
situations (for the double-slit experiment when both slits are open). Let us consider
the propositions ‘the photon can be detected passing through all slits’ (SaphotonP),
‘the photon cannot be detected passing through the slits’ (SephotonP), ‘the photon can
be detected passing through some slits (probably through the one slit)’ (SiphotonP),
‘the photon cannot be detected passing through some slits (probably through the one
slit)’ (SophotonP). If it is possible to say that the following implication is valid: if ‘the
photon can be detected passing through all slits’, then ‘the photon can be detected
passing through some slits (probably through the one slit)’? In other words, if the
photon is a wave and described in a proposition in theoretical terms of ‘wave’, then
the same photon is a particle and described in another proposition in theoretical terms
of ‘particle’? Rather there should be the disjunction: SaphotonP or SiphotonP. But not
implication. Indeed, if SaphotonP is true, then the photon is not a particle in common
meaning, and if SiphotonP is true, then maybe the photon is a particle in common
meaning.
In QM, it is impossible to deﬁne logical atoms. Indeed, if there were logical
atoms in QM, our propositions would not be performative and would not depend
upon the context of quantum experiments. It means that the reality exists, but it does
not correspond to the Aristotelian intuition of objectivity when the underlying things
exist, i.e. any behaviour is reduced to an individual behaviour. Instead of this intuition,
we can propose another intuition, the non-well-funded objectivity [11], when there are
no logical atoms, i.e. there is no ‘ﬁrst subject’ in the Aristotelian meaning. I can add
that in this picture of the world there are no things themselves (‘Dinge an sich’ in the
Kantian meaning), nothing, only behavioural complexes described by self-referent
performative propositions. It is a kind of idealism proposed in the linguistic solipsism
of Wittgenstein and accepted by me. A similar idealistic approach was proposed by
E. Husserl. He states that phenomena are nothing more than our consciousness, and
pure phenomenology is the science of pure consciousness:
Natural objects, for example, must be experienced before any theorizing about them can
occur. Experiencing is consciousness that intuits something and values it to be actual; expe-
riencing is intrinsically characterized as consciousness of the natural object in question and
of it as the original: there is consciousness of the original as being there ‘in person’ [38].
Thus,
the concept ‘phenomenon’ carries over, furthermore, to the changing modes of being con-
scious of something—or example, the clear and the obscure, evident and blind modes in
which one and the same relation or connection, one and the same state of affairs, one and
the same logical coherency, etc., can be given to consciousness [38].
Notice that Gestalt psychology is based on these ideas of Husserl.
Thus, in non-well-founded objectivity there are no logical atoms. What does it
mean? We have properties (classes) P, Q, R, . . . Some of these classes have non-
empty intersections, and some others do not. Logical atoms are classes which cannot
be intersected at all, they are singletons. Their intersection is always empty. This
fact can be considered the deﬁnition of logical atom. Their logical combination

220
6
Individual-Collective Duality in Swarm Behaviours
(disjunction, conjunction, complement) gives any class P, Q, R, . . . Accordingly, the
universe in which there are no logical atoms is universe in which the intersection
of classes is not empty. Different combinations of these intersections give different
contexts of performative propositions. For such a universe instead of the Aristotelian
square of opposition, another square takes place, e.g.:
• In the double-slit experiment with photons: ‘The photon can be detected in all slits’
(SaphotonP), ‘the photon can be detected in no slits’ (SephotonP), ‘the photon can
be detected in some slits (in QM, it means, just in one)’ (SiphotonP), ‘the photon
cannot be detected in some slits (just in one)’ (SophotonP).
• Formally:
1. SaphotonP and SiphotonP are properties which can be together unjustiﬁed, but
they cannot be together justiﬁed in relation to any performative situation of our
database;
2. SephotonP and SophotonP are properties which can be together justiﬁed, but cannot
be together unjustiﬁed in relation to any performative situation of our database;
3. SaphotonP and SophotonP are properties which cannot be together justiﬁed and
cannot be together unjustiﬁed in relation to any performative situation of our
database;
4. SephotonP and SiphotonP are properties which cannot be together justiﬁed and
cannot be together unjustiﬁed in relation to any performative situation of our
database;
5. if SaphotonP (respectively, SiphotonP) is justiﬁed in relation to some performative
situationsofourdatabase,thenalsoSephotonP (respectively,SophotonP)isjustiﬁed
in relation to the same situations of our database2;
6. if SephotonP (respectively, SophotonP) is not justiﬁed in relation to some perfor-
mative situations of our database, then also SaphotonP (respectively, SiphotonP) is
not justiﬁed in relation to the same situations of our database.
Notice that in this version of QL, performative propositions expressing observ-
ablesarenottrueorfalseinaconventionalmeaningofRussellian-Tarskiansemantics,
but they are justiﬁed or unjustiﬁed. Really, they have a pragmatic rather than a seman-
tic interpretation. In the Austian semantics (also called the situation semantics), they
are evaluated as successful or unsuccessful in the given situation of utterances.
So, instead of atoms in the quantum universe we deal with performative situations,
i.e. with different intersections of classes (properties) in a collective behaviour. The
logical theory of performative propositions was proposed in [39]. In this theory we
2I should remark that in logic, the implication does not mean a causal relation or deep semantic
relationship between antecedent and consequent. For example, the sentence “2 + 2 = 4” implies
that “We are born in the USSR”, because both sentences are true. In case of syllogistic, we group
quantiﬁed propositions into some classes according to their truth-conditions. So, this relationship
between antecedent and consequent just formally follows from our formal deﬁnitions of SaphotonP,
SephotonP, SiphotonP, SophotonP, see (6.5)–(6.8) and their interpretations on quantum observables
below. In an informal interpretation, this relationship between antecedent and consequent means
that the class of events of non-detecting in both slits is largest. The class of detecting in one slit or
in both slits is smallest. It directly follows from our formal deﬁnitions below.

6.1 Quantum Double-Slit Experiment
221
obtain non-well-founded syllogistic trees for which there cannot be underlying things
(hypokeimenon). Thus, there is no objectivity in classical meaning. Indeed, we can
always deﬁne intersections A&B for some situations A and B such that A&B is an
inﬁmum of A and B. Therefore there are no atoms which can be used for building
trees-molecules as their superpositions. Instead of underlying things, we suppose
situations that can always be intersected.
The Aristotelian logic with syllogistic propositions deﬁned in (6.1)–(6.4) is self-
inconsistent on quantum observables, although CM plays the role of semantics for
this logic, as we said. Nevertheless, we can offer a non-Aristotelian system without
logical atoms, where syllogistic propositions have the following meanings:
SaQM P:
“All quanta of S with positions S have momentums P” means that the
system S is not empty (i.e., it contains some quanta) and for all exper-
iments with quanta of S their position S is absolutely uncertain for all
possibilities and we know their momentum P; in the double-slit experi-
ment: the system S is not empty and for all experiments with quanta of
S these quanta pass through both slits (S) and their momentum has an
interference picture (P);
SiQM P:
“Some quanta of S with positions S have momentums P” means that for
all quanta of the system S we know their position S and we do not know
their momentum P; in the double-slit experiment: for all experiments with
quanta of S these quanta pass through one slit (S) and their momentum
does not have an interference picture (P);
SeQM P:
“No quanta of S with positions S have momentums P” is justiﬁed iff
“Some quanta of S with positions S have momentums P” is not justiﬁed;
SoQM P:
“Some quanta of S with positions S do not have momentums P” is
justiﬁed iff “All quanta of S with positions S have momentums P” is not
justiﬁed.
Formally:
SaQM P := (∃A(AεS) ∧∀A(AεS ∧AεP));
(6.5)
SiQM P := ∀A(¬(AεS) ∧¬(AεP));
(6.6)
SeQM P := ¬(SiP);
(6.7)
SoQM P := ¬(SaP).
(6.8)
All other propositions of non-Aristotelian quantum logic are deﬁned as follows: (i)
each syllogistic proposition deﬁned in (6.5)–(6.8) is a proposition, (ii) if X , Y are
propositions, then ¬X , ¬Y, X ⋆Y, where ⋆∈{∨, ∧, ⇒}, are propositions, also. This
non-Aristotelian logic is a very simple version of QL without logical atoms. All its
propositions are performative and depend upon contexts.
Hence, we could claim that from the viewpoint of performativity and logical the-
ories studying performative propositions, there is no objective reality in the classical
(Aristotelian) meaning. In QM, scientists try to appeal to the objective reality with

222
6
Individual-Collective Duality in Swarm Behaviours
logical atoms of quantum systems, which causes self-inconsistencies. Therefore,
the only outcome is in appealing to non-well-founded reality [39] and performative
propositions in QM. Self-inconsistency occurs only in cases of applying classical
logic and classical semantics. In our logic, there are no contradictions. The same
situation is in the so-called paraconsistent logics, where there are contradictions as
new truth-values. Self-inconsistency is just in that we avoid logical atoms and even
contrary statements in the classical logic may have non-empty intersections in our
new semantics. Thus, the term self-inconsistency only concerns logical properties of
our version of QL and not things themselves. According to Kant, we know nothing
about things themselves.
6.2
Non-additivity of Swarm Behaviour
6.2.1
Double-Slit Experiment with Physarum Polycephalum
In the Kolmogorov’s deﬁnition of ﬁnitely additive probability measure, it is assumed
that for any set A there is always its partition into disjoint subsets so that their union
gives A. We can illustrate this property by a thought double-slit experiment with
particles. Let us imagine a machine gun spraying small particles at a screen in which
there are two slits which may or may not be covered. Behind the ﬁrst screen there
is another one called observation screen where we detect particles that pass through
the slits. Suppose that the following three experiments are carried out: (i) slit 1 is
opened, slit 2 is covered; (ii) slit 1 is covered, slit 2 is opened; (iii) both slit 1 and
2 are opened. In the ﬁrst (second) experiment particles strike the screen at random
in a region somewhere opposite the position of slit 1 (slit 2). This outcome can be
presented as a curve P1(x) (respectively, P2(x)) which is understood in the following
manner: Pi(x)δx is equal the probability of a particle striking the screen in some
region (x, x + δx), where i = 1, 2.
Let A mean a set of all particles landing at the second screen. Its partition is set
up as follows: A1 means particles that pass through slit 1 and A2 means particles that
pass through slit 2. In the third experiment both slits are opened. Then we observe the
particles varying between the two possibilities in a random way, if they would pass
either through slit 1 or through slit 2, i.e. we obtain a new curve P12(x) = P1(x) +
P2(x). In other words, we have P(A) = P(A1) + P(A2). Thus, for the Kolmogorov’s
classical approach, the probability of set A is calculated as the sum of its two disjoint
subsets A1 and A2 which are a partition of the given set A.
In the deﬁnition of probability measures, Kolmogorov appeals to a Boolean alge-
bra of subsets and assumes that any set is a union of logical atoms—singletons. Thus,
additivity means the existence of logical atoms (elementary events in probability the-
ory) from the logical point of view.

6.2 Non-additivity of Swarm Behaviour
223
Let us consider now the plasmodium behaviour of Physarum polycephalum as
an example of swarming. This behaviour, on the one hand, is intelligent, but, on
the other hand, the variety of plasmodium responses to stimuli is large enough.
After performing many and many experiments we can start iterating the experiment
we expect, but it is unreal to obtain an iteration of the same complex experiment
forever. The plasmodium veriﬁes the following three basic operations stimulated
by attractants: (i) The fusion, denoted Fuse, means that two active zones A1 and A2
produce a new active zone A3. (ii) The multiplication, Mult, means that the active zone
A1 splits into two independent active zones A2 and A3 propagating along their own
trajectories. (iii) The direction, Direct, means that the active zone A is translated
to a source of nutrients with certain initial velocity vector v. The basic operation
stimulated by repellents: (iv) The repelling, Repel, means that the active zone A
avoids a place of repellent with certain initial velocity vector v.
The operations Fuse, Mult, Direct, Repel can be examined as the most basic
forms of intelligent behaviour of living organisms. For example, in [40] and [41],
we showed that the behaviour of collectives of the genus Trichobilharzia Skrjabin &
Zakharov, 1920 (Schistosomatidae Stiles & Hassall, 1898) can be simulated by the
Physarum operations Fuse, Mult, Direct (without Repel). This means that, ﬁrst, a
local group of Schistosomatidae can behave as a programmable biological computer,
second, a biologized kind of process calculus, such as Physarum transition system
[42], can describe concurrent biological processes at all.
Thus, we showed [41] that the behaviour of one-cell organism of Physarum and
the behaviour of local group of cercariae have identical patterns in the same transition
systems. Other studies of simple population collectives behaving as a single entity
as equivalent to the behaviour of the Physarum plasmodium is carried out in [43].
These joint patterns may be considered an effect of the individual-collective duality.
In some situations, living agents may behave individually, but in the same situations
at another time, they may behave collectively.
To approximate atomic acts of Physarum we can carry out the double-slit experi-
ment with plasmodia to show that nevertheless the propagation of protoplasmic tubes
can be considered a collective behaviour at a time, too. As a consequence, Fuse, Mult,
Direct, Repel are simple actions indeed, but they are not atomic. Therefore, we cannot
deﬁne additive measures on frames composite by Fuse, Mult, Direct, and Repel.
Let us take the ﬁrst screen with two slits which are covered or opened and the
second screen behind the ﬁrst at which attractants are distributed evenly. Before the
ﬁrst screen there is an active zone of plasmodium. Then let us perform the following
three experiments: (i) slit 1 is opened, slit 2 is covered; (ii) slit 1 is covered, slit 2 is
opened;(iii)bothslit1and2areopened(seeFig.6.1).Intheﬁrst(second)experiment,
protoplasmic tubes arrive at the screen at random in a region somewhere opposite
the position of slit 1 (slit 2). We have a curve P1(x) (respectively, P2(x)) which
is interpreted probabilistically: Pi(x)δx is equal the probability of tubes arriving
at the screen in some region (x, x + δx), where i = 1, 2. The difference from the
experiments with particles consists in that tubes split before the second screen and

224
6
Individual-Collective Duality in Swarm Behaviours
Fig. 6.1 The result of
reaching plasmodium
protoplasmic tubes at a
screen when a only slit 1 is
open; b only slit 2 is open; c
both slits are open. The
curves P1(x), P2(x), P12(x)
represent the intensity of the
tubes passing through the
slits, see [4]
we always have several tubes split from the one and reaching the screen in some
region simultaneously.
Let us denote all tubes landing at the second screen by A, thereby all tubes that
pass through slit 1 by A1 and all tubes that pass through slit 2 by A2. Now we can
check if either there is a partition of set A in case of Physarum polycephalum into
sets A1 and A2 or there is a self-inconsistency. We open both slits. Then we see that
the plasmodium behaves like photons, namely it can propagate just one tube passing
through either slit 1 or slit 2 or it can propagate two tubes passing through both slits
simultaneously. In the second case, these tubes split before the second screen and
do not always occur at the same place, i.e. they appear to occur randomly across
the whole screen (Fig.6.1c). Thus, the total probability P(A) corresponding to the
intensity of plasmodium reaching the screen is not just the sum of the probabilities
P(A1) and P(A2). This means that the plasmodium has the fundamental property of
photons discovered in the double-slit experiment, i.e. we face a self-inconsistency,

6.2 Non-additivity of Swarm Behaviour
225
too, according to that it is impossible to approximate not only single photons, but also
single actions of Physarum polycephalum. Indeed, in Fig.6.1c we observe the one
act of Physarum that is partly Direct, partly Fuse, and partly Mult. So, this one act
of plasmodium is not individual, but collective. This allows us to state that we face
the individual-collective duality of Physarum polycephalum plasmodium. In other
words, there are no atomic acts for Physarum polycephalum. Its acts are parallel: in
the one act, the plasmodium can do many things at once (as in Fig.6.1c) and it can
always perform many and many acts concurrently.
In Fig.6.1, the ideal experiment is described. In reality, we can face more varieties
of plasmodium activity, than it can be expected.
To show what we mean, let us consider the results of the three double-slit labo-
ratory experiments with Physarum performed for me by Andrew Adamatzky, when
only slit 2 is open, Figs.6.2, 6.3, 6.4. In each experiment Physarum was inoculated
near the center of one side of the Petri dish and the oat ﬂakes, acting as attractants
of Physarum, were placed on the opposite side of the dish. In the experiment shown
in Fig.6.2, Physarum propagates from the site of initial inoculation, explores its
environment and determines gradients of chemo-attractant diffusion (Fig.6.2a). It
then locates widest opening between obstacles (Fig.6.2b) and propagates towards
the oat ﬂakes and occupies them (Fig.6.2c). In the experiments shown in Figs.6.3
and 6.4, Physarum explores the space and even reaches the widest opening between
the obstacles yet does not go through the opening but instead propagates around the
chain of obstacles and then towards the source of nutrients.
We see the evidences that the plasmodium can achieve attractants by the shortest
and longest paths. This property of plasmodium to choose different distances and
not to follow only straight paths (as it would be expected in Kolmogorov-Uspensky
machines) may be metaphorically called that the plasmodium prefers Chinese strate-
gies instead of Caesarian strategies. The name ‘Caesarian’ is to refer to his famous
motto ‘veni, vidi, vici’, which shows that the best way in decision-making is to follow
algorithms, i.e. the shortest solutions.
While the foundation axiom of set theory [21] states that we can always build
up inductive sets (i.e. straight paths in the shortest distance), its analogue in physics
is a statement that any physical phenomenon may be measured by inductive sets.
This statement is called the Archimedean axiom. The simplest case of the latter
statement is that any physical phenomenon may be measured by a ruler (e.g. by
rational numbers). The Chinese strategic thinking means that in paths of decision
making, the Archimedean axiom can be invalid.
The plasmodium behaviour of Figs.6.2, 6.3, and 6.4 shows that we cannot approx-
imate single actions even in the situation when only one slit is open. It is an evidence
for non-additivity of measurement of Physarum activity. Indeed, in Figs.6.3, 6.4, the
plasmodium follows partly Fuse, partly Direct, partly Mult, and partly Repel. So,
according to this experiment, Fuse, Direct, Mult, and Repel are not atomic actions.
Therefore we cannot obtain additivity on the plasmodium behaviours.

226
6
Individual-Collective Duality in Swarm Behaviours
(a) 24 hours
(b) 36 hours
(c) 48 hours
Fig. 6.2 The ﬁrst experiment of reaching plasmodium protoplasmic tubes at a screen when only
slit 2 is open. It has the form predicted in the thought experiment. The experiment was performed
by Andrew Adamatzky, the picture was taken from [4] by his courtesy
6.2.2
Growing Sample Space
In probability theory, the universe is understood as a sample space Ω such that every
member of P(Ω) is called event. Conventionally, probability measures run over real
numbers of the unit [0, 1] and their domain is a Boolean algebra of P(Ω) with atoms
(singletons) denoting simple (atomic) events. In the previous subsection, we have
just shown that in the Physarum behaviour we cannot ﬁnd out atomic events/actions,
therefore we cannot deﬁne additive measures in the universe Ω. This means that if
we wanted to deﬁne a domain of probability measures to calculate probabilities on
the plasmodium, we could not appeal to the Boolean algebra of P(Ω). Otherwise,
our measures would be additive.

6.2 Non-additivity of Swarm Behaviour
227
(a) 24 hours
(b) 36 hours
(c) 48 hours
Fig. 6.3 The second experiment of reaching plasmodium protoplasmic tubes at a screen when only
slit 2 is open. It has the form that was not predicted in the thought experiment. The plasmodium
avoids the shortest distance to attractants. The experiment was performed by Andrew Adamatzky,
the picture was taken from [4] by his courtesy
So, in our case, the powerset of P(Ω) for the universe Ω must be non-atomistic.
It would be possible if the sample space Ω was not ﬁxed, but it changed, continuously
at t = 0, 1, 2 . . . In other words, let us assume that Ω is a set at t = 0, which can grow,
be expanded, decrease or just change in itself at next steps. As a consequence, we will
deal not with atoms as members of Ω, but with streams of the form ⟨a0, a1, a2, . . .⟩,
where a0 ∈Ω at t = 0, a1 ∈Ω at t = 1, a2 ∈Ω at t = 2, etc. Let us denote this
instable set, i.e. the set of all these inﬁnite streams, by Ω∗and call it a wave set. The
powerset P(Ω∗) is not a Boolean algebra, e.g. it is not atomistic (see Proposition
10.1).
Any swarm starts to move within a certain topology of attractants. Let this start
point of motions be a sample set Ω at t = 0. This set contains information about

228
6
Individual-Collective Duality in Swarm Behaviours
(a) 24 hours
(b) 36 hours
(c) 48 hours
Fig. 6.4 The third experiment of reaching plasmodium protoplasmic tubes at a screen when only slit
2isopen.Ithastheformthatwasnotpredictedinthethoughtexperiment,too.Theplasmodiumagain
avoids the shortest distance to attractants. The experiment was performed by Andrew Adamatzky,
the picture was taken from [4] by his courtesy
positions of attractants. At next steps t = 1, 2, 3, . . ., Ω contains information about
the ways of occupying attractants by the swarm. Namely, let us assume that there
are two neighbour attractants a and b. We say that there is a string ab or ba if both
attractants a and b are occupied by the swarm. As a result, the dynamics of the swarm
is observed as a continuous expansion of the set of strings at t = 1, 2, 3, . . .
SupposethatΩ consistsofp −1attractantsandA, B,…⊆Ω.LetA:=‘Attractants
accessible for the attractant N1 by swarm networks’ and B := ‘Neighbours for the
attractant N1’, etc. (see Fig.6.5). In other words, let P(Ω) consist of sets which are
deﬁned by propositions describing our experiment with the swarm at t = 0. Some
conditions of the experiment, ﬁxed by subsets of Ω, do not change for different time

6.2 Non-additivity of Swarm Behaviour
229
Fig. 6.5 The number of members of Ω which satisfy properties ‘Attractants accessible for the
attractant N1 by swarm networks’, ‘Attractants accessible for the attractant N2 by swarm networks’,
‘Neighbours for the attractant N1’ and ‘Neighbours for the attractant N2’ for time t = 0, 1, 2, 3, see
[4]
t = 0, 1, 2, . . . Some other conditions change for different time t = 0, 1, 2, . . . So,
we can see that the property B is veriﬁed on the same number of members of Ω
for any time t = 0, 1, 2, . . . Nevertheless, the property A is veriﬁed on a different
number of members of Ω for different time t = 0, 1, 2, . . . (see Fig.6.5).
Let ⌈X ⌉mean a cardinal number of X ⊆Ω. So, 0 ≤⌈X ⌉≤p −1. Now we deﬁne
cardinalities of wave sets as follows:
⌈X ∗⌉:= ⟨⌈X ⌉for t = 0; ⌈X ⌉for t = 1; ⌈X ⌉for t = 2, . . .⟩
In particular, ⌈∅∗⌉= ⟨0, 0, 0, . . .⟩and ⌈Ω∗⌉= ⟨p −1, p −1, p −1, . . .⟩. Then
⟨0, 0, 0, . . .⟩≤⌈X ∗⌉≤⟨p −1, p −1, p −1, . . .⟩covers all p-adic integers, i.e. it
belongs to the set Zp. In the example of Fig.6.5, the cardinal numbers of all sets are
inﬁnite integers (i.e. they are larger than any natural number).
Hence, we can study some ensembles Ω∗= ∞
t=0 Ωt, such that ⌈Ω∗⌉= σ, where
σ is an inﬁnite stream. Let us consider a sequence of ensembles Ωt having volumes
⌈Ωt⌉, t = 0, 1, . . . We may imagine an ensemble Ω∗as being the population of a
tower T = TΩ, which has an inﬁnite number of ﬂoors with the following distribution
of population through ﬂoors: population of t-th ﬂoor is Ωt. Set Tk = k
t=0 Ωt ×
∞
m=k+1 ∅m. This is a population of the ﬁrst k + 1 ﬂoors. Let A∗⊂Ω∗and let us
assume that n(A∗) = lim
t→∞nt(A∗), where nt(A∗) = ⌈A∗∩Tt⌉. The quantity n(A∗) is
said to be a non-well-founded volume of the set A∗.
Now we can deﬁne the probability of A∗by the standard proportional relation:
P(A∗) := PΩ∗(A∗) = n(A∗)
σ
,

230
6
Individual-Collective Duality in Swarm Behaviours
where ⌈Ω∗⌉= σ, n(A∗) = ⌈A∗∩Ω∗⌉= ⌈A∗⌉. Suppose that ⌈Ω⌉= p −1. Then
⌈Ω∗⌉= −1, the largest integer of Zp (indeed, if p = 3, then ⌈Ω∗⌉= . . . 22222 =
0 −1 = −1 and if p = 5, then ⌈Ω∗⌉= . . . 44444 = 0 −1 = −1). So, P(A∗) =
⌈A∗⌉
−1 = −⌈A∗⌉. In this case P(∅∗) = 0 and P(Ω∗) = −1
−1 = 1.
We denote the family of all A∗⊆Ω∗, for which P(A∗) exists, by GΩ. The sets
A∗∈GΩ are said to be events. The ordered system ⟨Ω∗, GΩ, PΩ∗⟩is called a non-
well-founded ensemble probability space for the ensemble Ω. These probabilities
are non-Archimedean and they are studied in [44].
As we see, the main problem, why we cannot apply spatial presentations of algo-
rithms such as Kolmogorov-Uspensky machines in modelling the swarm behaviour,
consists in that there are no atomic acts for swarms. The universe of swarm actions
is non-well-founded [21], i.e. it does not contain atoms.
6.2.3
p-Adic Valued Probability Measure
From the point of view of measure theory, the double-slit experiment with Physarum
polycephalum means that the probability measure of Fig.6.1 is not additive, although
anyprobabilitymeasuremustbeadditiveaccordingtodeﬁnition.Usually,theadditive
property of probability measures is replaced by the weaker property of monotonicity
in fuzzy measures. Thus, the fuzzy measure is considered an extension of probability
measure, where additivity is not valid [45]. Let us recall that a fuzzy measure in space
Ω is deﬁned as follows: a function μ: P(Ω) →[0, ∞) is a fuzzy measure if it
satisﬁes the following properties: (i) μ(∅) = 0; (ii) if A, B ∈P(Ω) and A ⊆B, then
μ(A) ≤μ(B). A fuzzy measure is called normalized if μ(Ω) = 1.
However, the fuzzy measure is too weak for our task to model any swarm
behaviour. Therefore we deﬁne a stronger non-additive measure—p-adic valued
measure. It is weaker, than the conventional probability measure, because it is not
additive, but stronger than the conventional normalized fuzzy measure, because the
maxitivity and minitivity axioms taken together have non-trivial solutions. From the
standpoint of logic, it is called p-adic valued fuzzy measure. From the standpoint of
measure theory, it is called p-adic valued probability measure. But it is the same.
So, in order to deﬁne probability measures with a domain on actions, we should
appeal to the so-called non-well founded sets which do not have atoms at all (instead
of atoms, they have streams). The main problem of these sets is that we cannot
obtain a partition of sets in general case. Therefore we can preserve measurability
without additivity. These new fuzzy and probability measures may be deﬁned on non-
Archimedeannumbers,inparticularonp-adicintegers.Inparticular,if⌈Ω∗⌉= ⌈Zp⌉,
where ⌈Ω⌉= p −1, then for any A∗⊆Ω∗, P(A∗) = PΩ∗(A∗) = −⌈A∗⌉.
Let us extend the standard order structure on N to a partial order structure on Zp: (i)
for any p-adic integers σ, τ ∈N, we have σ ≤τ in N iff σ ≤τ in Zp; (ii) each ﬁnite
p-adic integer n = . . . α3α2α1α0 (i.e. such that αi = 0 for any i > j) is less than any
inﬁnite number τ, i.e. σ < τ for any σ ∈N and τ ∈Zp\N; (iii) if σ = . . . σ3σ2σ1σ0

6.2 Non-additivity of Swarm Behaviour
231
and τ = . . . τ3τ2τ1τ0 are inﬁnite p-adic integers, then σ ≤τ iff σn ≤τn for all n = 0,
1, 2, …
Now we can deﬁne sup and inf digit by digit. Then if σ ≤τ, so inf(σ, τ) = σ
and sup(σ, τ) = τ. The greatest p-adic integer according to our deﬁnition is −1 =
. . . xxxxxx, where x = p −1, and the smallest is 0 = …00000, i.e. ⌈Zp⌉= −1.
Let us deﬁne p-adic fuzziness as follows: a p-adic fuzzy measure is a set function
FZp(·) deﬁned for sets A∗, B∗⊆Ω∗, it runs over the set Zp and satisﬁes the following
properties:
• FZp(Ω∗) = −1 and FZp(∅∗) = 0.
• If A∗⊆Ω∗and B∗⊆Ω∗are disjoint, i.e. inf(FZp (A∗), FZp(B∗)) = 0, then
FZp(A∗∪B∗) = FZp(A∗) + FZp(B∗). Otherwise, FZp(A∗∪B∗)= FZp(A∗) + FZp(B∗) −
inf(FZp(A∗), FZp(B∗)) = sup(FZp(A∗), FZp(B∗)).
• If A∗, B∗⊆Ω∗, then FZp(A∗∩B∗) = inf(FZp(A∗), FZp(B∗)).
• FZp(¬A∗) = −1 −FZp(A∗) for all A∗⊆Ω∗, where ¬A∗= Ω∗\A∗.
A p-adic probability measure is a set function PZp(·) deﬁned for sets A∗, B∗⊆Ω∗
thus:
• PZp(A∗) = −FZp(A∗) ∈Zp
• PZp(A∗|B∗) ∈Qp is characterized by the following constraint:
PZp(A∗|B∗) =
PZp(A∗∩B∗)
PZp (B∗)
=
FZp(A∗∩B∗)
FZp (B∗) ,
where PZp(B∗) ̸= 0, PZp(A∗∩B∗) = inf(PZp(A∗), PZp(B∗)). The measure PZp(·)
runs over the set Qp of all p-adic numbers (not only integers).
6.2.4
p-Adic Valued Fuzzy Syllogistic
Let us recall that classical syllogism is a deductive inference schema based on the
quantity relations Q among sets S and P and these relations are presented by the
propositions of the following form: ‘QS are P’, where Q stands for one of the four
classical crisp quantiﬁers: ‘All’, ‘No’, ‘Some’, ‘Some. . . not’, S is a subject-term
denoting an appropriate crisp set, P is a predicate-term denoting an appropriate
crisp set, too. Nevertheless, we can extend the syllogistic reasoning process to an
optimization problem where the quantiﬁers can be: (1) proportional quantiﬁers like
‘most’, ‘few’, ‘almost all’, etc. with deﬁnitions on fuzzy sets; (2) interval imprecise
quantiﬁers with well-deﬁned bounds like ‘between 50 and 70%’, etc., (3) fuzzy
quantiﬁers with imprecise-deﬁned bounds: ‘something more than 50%’, etc.
In this subsection, we deﬁne quantiﬁers ‘All’, ‘No’, ‘Some’, ‘Some. . . not’
unconventionally as p-adic valued fuzzy quantiﬁers expressing the massive-parallel
behaviour of swarm. The matter is that classically, these four quantiﬁers are deﬁned
on well-founded sets, which are constructed by means of atoms (individuals, things).

232
6
Individual-Collective Duality in Swarm Behaviours
However, as we have demonstrated in the previous subsections, the universe of swarm
actions (in particular, the universe of plasmodia of Physarum polycephalum) have
no atoms (atomic acts) and, as a result, it is non-well-founded in the meaning of set
theory without foundation axiom [21].
While Aristotelian syllogisms assume well-founded sets, i.e. ﬁnite crisp sets built
up from atoms constructively, in the most cases of swarm behaviour we observe a
spatial expansion of the swarm in all directions with many cycles without possibilities
to deﬁne atoms (atomic actions). Under these circumstances it is more natural to
deﬁne all the basic syllogistic propositions ‘All S are P’, ‘No S are P’, ‘Some S are
P’, ‘Some S are not P’ in the way they would satisfy the inverse relationship, when
all converses are valid: (1) ‘All S are P’ ⇒‘All P are S’, ‘No S are P’ ⇒‘No P are
S’, ‘Some S are P’ ⇒‘Some P are S’, ‘Some S are not P’ ⇒‘Some P are S’. In other
words, then we can draw more natural conclusions for swarm networks which are
decentralized and have some cycles. The formal syllogistic system over propositions
with such properties is constructed in [39]. This system is called the performative
syllogistic. In this section, we propose an extension of that system, where syllogistic
propositions are temporally bounded. This system has semantics on p-adic integers.
The alphabet of our system for simulation of swarm behaviour contains as descrip-
tive signs the syllogistic letters S, P, M , …, as logical-semantic signs the syllogistic
connectives at, et, it, ot at time t, a∞, e∞, i∞, o∞for inﬁnite time, and the propo-
sitional connectives: ¬, ∨, ∧, ⇒. Simple propositions are deﬁned as follows: SxP,
where x ∈{at, et, it, ot, a∞, e∞, i∞, o∞}. All other propositions are deﬁned thus: (i)
each simple proposition is a proposition, (ii) if X , Y are propositions, then ¬X , ¬Y,
X ⋆Y, where ⋆∈{∨, ∧, ⇒}, are propositions, too.
Syllogistic letters S, P, M , . . . are interpreted as attractants as follows: a data point
S is considered empty if and only if an appropriate attractant denoted by S is not
occupied by the swarm. Let us deﬁne syllogistic strings of the form SP at time t with
the following notation: ‘S ist P,’ and with the following meaning: SP at t is true if
and only if S and P are neighbour cells and both S and P are not empty at t, otherwise
SP is false. Thus, this deﬁnition represents syllogistic reasoning as swarm labelled
transition system ⟨States, Edg⟩, where S, P, M , . . . ∈States and true propositions
S ist P, . . . ∈Edg. Using the deﬁnition of syllogistic strings, we can deﬁne simple
syllogistic propositions as follows:
1. ‘All S are P at time t’ (SatP): there is a string AS at time t and for any A which is
a neighbour for S and P, there are strings AS and AP. This means that we have a
massive-parallel occupation of region at t, where the cells S and P are located.
2. ‘Some S are P at time t’ (SitP): for any A which is a neighbour for S and P at t,
there are no strings AS and AP. This means that the swarm cannot reach S from
P or P from S immediately at t.
3. ‘No S are P at time t’ (SetP): there exists A at time t which is a neighbour for
S and P such that there is a string AS or there is a string AP. This means that
the swarm occupies S or P, but surely not the whole region at time t, where the
cells S and P are located.

6.2 Non-additivity of Swarm Behaviour
233
4. ‘Some S are not P at time t’ (SotP): for any A which is a neighbour for S and P
at time t there is no string AS or there exists A which is a neighbour for S and P
such that there is no string AS or there is no string AP. This means that at time t
the swarm does not occupy S or there is a neighbour cell which is not connected
with S or P by a network.
Formally:
SatP := (∃A(A ist S) ∧(∀A(A ist S ∧A ist P)));
(6.9)
SitP := ∀A(¬(A ist S) ∧¬(A ist P));
(6.10)
SetP := ¬∀A(¬(A ist S) ∧¬(A ist P)), i.e.
∃A(A ist S ∨A ist P).
(6.11)
SotP := ¬(∃A(A ist S) ∨(∀A(A ist P ∧A ist S))),
i.e.(∀A¬(A ist S) ∧∃A(¬(A ist P) ∨¬(A ist S)));
(6.12)
Among simple syllogistic propositions of different time there are the following rela-
tions:
SatP ⇒Set+1P.
(6.13)
From this it follows that
Sit+1P ⇒SotP.
(6.14)
The formulas SatP ⇒Sat+1P and Sit+1P ⇒SitP are not valid in general case,
because the swarm can leave attractants which were occupied earlier. Now we can
deﬁne simple syllogistic propositions for inﬁnite time: Sa∞P := limt→∞SatP. Con-
sequently, we may generalize Eqs. (6.9) and (6.10) in the following manner:
Sa∞P ⇒∃t.SatP;
(6.15)
Si∞P ⇒∀t.SitP.
(6.16)
Other axioms are as follows:
SatP ⇒SetP;
Sa∞P ⇒Se∞P;
(6.17)
SatP ⇒PatS;
Sa∞P ⇒Pa∞S;
(6.18)
SitP ⇒PitS;
Si∞P ⇒Pi∞S;
(6.19)
SatM ⇒SetP;
Sa∞M ⇒Se∞P;
(6.20)
M atP ⇒SetP;
M a∞P ⇒Se∞P;
(6.21)

234
6
Individual-Collective Duality in Swarm Behaviours
(M atP ∧SatM ) ⇒SatP;
(6.22)
(M itP ∧SitM ) ⇒SitP;
(6.23)
(M a∞P ∧Sa∞M ) ⇒Sa∞P;
(6.24)
(M i∞P ∧Si∞M ) ⇒Si∞P.
(6.25)
Some basic formal properties of that axiomatic system are considered in the next
Chapter (see also [39]). In the p-adic valued fuzzy syllogistic we can analyze the
collective dimension of behaviour for different time. Within this system we can study,
how the swarm occupies all possible attractants in any direction at time t, if it can only
see them. So, this system shows logical properties of a massive-parallel behaviour.
Now let us show that, on the one hand, the Aristotelian syllogistic is unapplied
for describing the double-slit experiment with photons or Physarum polycephalum
(as well as with any other swarm) and, on the other hand, the new syllogistic closed
over Eqs. (6.9)–(6.25) can do it. The conventional logical square of opposition is not
valid within the double-slit experiment with photons or Physarum polycephalum. The
problemisthatthephotonbehavesbothindividually(asaparticle)andcollectively(as
a wave). The same problem is with swarms: they behave both individually (according
to one of the basic actions: Direct, Fuse or Mult) and collectively (as a mixing of
Direct, Fuse, and Mult in the one simple act). In other words, we cannot ﬁnd out
logical atoms in the logical reconstruction of behaviours of photons or swarms.
For the universe of swarms as well as for the universe of quanta, instead of the
Aristotelian square of opposition, another square of opposition takes place:
• In the double-slit experiment:
‘The coincidence clicks will always occur at t’ (SatP), ‘the coincidence clicks
will never occur at t’ (SetP), ‘the coincidence clicks will somewhen occur at t’
(SitP), ‘the coincidence clicks will not somewhen occur at t’ (SotP). Among these
simple propositions, the following relations hold true in the p-adic valued fuzzy
syllogistic:
1. SatP and SitP are properties which can be together false, but they cannot be
together true;
2. SetP and SotP are properties which can be together true, but cannot be together
false;
3. SatP and SotP are properties which cannot be together true and cannot be
together false;
4. SetP and SitP are properties which cannot be together true and cannot be
together false;
5. if SatP (respectively, SitP) is true, then also SetP (respectively, SotP) is true,
6. if SetP (respectively, SotP) is not true, then also SatP (respectively, SitP) is not
true.

6.2 Non-additivity of Swarm Behaviour
235
In any experiment with a swarm we deal with attractants which can be placed
differently to obtain different topologies and to induce different transitions of the
swarm. Let Ω, consisting of attractants, be the universe of our experiments such
that every member of P(Ω) is called property of an appropriate experiment. Let
us exemplify one of the possible properties by the following proposition: “How
many attractants are occupied by the swarm”. This property is not constant, but it
changes during the time, t = 0, 1, 2, . . . Therefore the universe of our experiments
must depend on time, too. Let us assume that our time of experiments is inﬁnite.
So, the universe of our experiments should be regarded as a set of inﬁnite streams,
Ω∗, and then properties are members of P(Ω∗). Notice that the powerset P(Ω∗)
cannot be a Boolean algebra (see Proposition 10.1).
The probability space ⟨Ω∗, GΩ, PZp⟩may be considered semantics for the p-
adic valued fuzzy syllogistic system. Let At,{S,P} mean “attractants that are neigh-
bours of attractants S and P at time t” and Ot,{S,P} mean “attractants that are
neighbours of attractants S and P and are occupied by the swarm at time t”.
Suppose, A{S,P} := limt→∞At,{S,P} and O{S,P} := limt→∞Ot,{S,P}. We know that
⌈A{S,P}⌉= σ and ⌈O{S,P}⌉= τ are inﬁnite p-adic integers and we can deﬁne their p-
adic valued probabilities as non-well-founded volumes: PZp(A{S,P}) = ⌈A{S,P}⌉and
PZp(O{S,P}) = ⌈O{S,P}⌉. Consequently, ⌈At,{S,P}⌉= σ and ⌈Ot,{S,P}⌉= τ are ﬁnite
p-adic integers (natural numbers) which are deﬁned by induction as follows:
• ⌈At=0,{S,P}⌉= i0 ∈{0, 1, . . . , p −1},
⌈At=1,{S,P}⌉= . . . 00000i1i0,
where i0, i1 ∈{0, 1, . . . , p −1},
⌈At=2,{S,P}⌉= . . . 00000i2i1i0,
where i0, i1, i2 ∈{0, 1, . . . , p −1},
…,
⌈At=j,{S,P}⌉= . . . 00000ij . . . i2i1i0,
where i0, i1, i2, . . . , ij ∈{0, 1, . . . , p −1}.
• ⌈Ot=0,{S,P}⌉= i0 ∈{0, 1, . . . , p −1},
⌈Ot=1,{S,P}⌉= . . . 00000i1i0,
where i0, i1 ∈{0, 1, . . . , p −1},
⌈Ot=2,{S,P}⌉= . . . 00000i2i1i0,
where i0, i1, i2 ∈{0, 1, . . . , p −1},
…,
⌈Ot=j,{S,P}⌉= . . . 00000ij . . . i2i1i0,
where i0, i1, i2, . . . , ij ∈{0, 1, . . . , p −1}.
We deﬁne the p-adic valued probabilities of At=j,{S,P} and Ot=j,{S,P} as their
non-well-founded volumes: PZp(At=j,{S,P}) = ⌈At=j,{S,P}⌉and PZp(Ot=j,{S,P}) =
⌈Ot=j,{S,P}⌉. They are natural numbers.
The semantics for p-adic valued fuzzy reasoning is as follows:
• SatP is true if and only if PZp(At=j,{S,P}) = PZp(Ot=j,{S,P});
• SitP is true if and only if PZp(Ot=j,{S,P}) = 0;
• SetP is true if and only if PZp(Ot=j,{S,P}) > 0;

236
6
Individual-Collective Duality in Swarm Behaviours
• SotP is true if and only if PZp(At=j,{S,P}) > PZp(Ot=j,{S,P});
• Sa∞P is true if and only if PZp(A{S,P}) = PZp(O{S,P});
• Si∞P is true if and only if PZp(O{S,P}) = 0;
• Se∞P is true if and only if PZp(O{S,P}) > 0;
• So∞P is true if and only if PZp(A{S,P}) > PZp(O{S,P}).
In the space ⟨Ω∗, GΩ, PZp⟩, it is possible to deﬁne many other fuzzy quantiﬁers
such as conventional quantiﬁers ‘All’, ‘No’, ‘Some’, ‘Some. . . not’ in the Aristotelian
meaning, but deﬁned on fuzzy subsets of Ωω. Notice that these subsets may be called
fuzzy, because the powerset P(Ω∗) is not a Boolean algebra (see Proposition 10.1).
The semantics for the Aristotelian quantiﬁers on members S, P of P(Ω∗) are as
follows:
• ‘All S are P’ is true if and only if PZp(P |S) = −1;
• ‘No S are P’ is true if and only if PZp(P |S) = 0;
• ‘Some S are P’ is true if and only if PZp(P |S) > 0;
• ‘Some S are not P’ is true if and only if PZp(P |S) < −1.
Some other p-adic valued fuzzy quantiﬁers on members S, P of P(Ω∗):
• ‘Most S are P’ is true if and only if −1 −Δ ≤PZp(P |S) < −1, where Δ is small;
• ‘Few S are P’ is true if and only if 0 < PZp(P |S) ≤Δ.
The double-slit experiment with Physarum polycephalum shows that, ﬁrst, we
cannot extract atomic actions of a swarm from all the kinds of the swarm behaviour,
second, probability measures used in describing this experiment are not additive.
In order to simulate the swarm behaviour, we construct the p-adic valued fuzzy
syllogistic, where quantiﬁers ‘All’, ‘No’, ‘Some’, ‘Some. . . not’ are interpreted in
the massive-parallel way to describe the swarm propagation in different directions.
Then we deﬁne p-adic probability (fuzzyness) to ﬁx all properties (conditions) for
any experiment with the swarm.
6.2.5
p-Adic Valued Fuzzy Logic Controllers
In p-adic many-valued logic, we can study the wave sets A∗, B∗, . . . ⊆Ω∗and their
logical combinations as propositions, where truth values are p-adic integers FZp(A∗),
FZp(B∗), . . . and their appropriate logical compositions. This logic can be engaged
in designing p-adic valued fuzzy controllers on the medium of a swarm behaviour.
Let us assume that all attractants used for p-adic valued fuzzy controllers are
located in the way that at each time step t the swarm cannot achieve more than p −1
attractants and for some ti the swarm can occupy exactly p −1 attractants. This
means that, ﬁrst, at any step t there are p −1 or less neighbour attractants, second,
our sample space is, on the one hand, expended spatially by adding new attractants,
but, on the other hand, can be interpreted as p-adic valued still. If the swarm moves
in n directions simultaneously, then it is understood as a union of n wave sets. So,
one wave set is a tunnel with the diameter consisting of p −1 attractants.

6.2 Non-additivity of Swarm Behaviour
237
Noticethatp-adicmany-valuedlogiccanstudythesamplespaceofswarmmotions
for an inﬁnite time t →∞. However, in controllers it is enough to deal with a
ﬁnite t = k. For this purpose, we will appeal to the following p-adic towers with k
ﬂoors: Tk = k
t=0 Ωt × ∞
m=k+1 ∅m; T A
k = k
t=0 At × ∞
m=k+1 ∅m; T B
k = k
t=0 Bt ×
∞
m=k+1 ∅m, such that T A
k , T B
k ⊆Tk. In the fragment of p-adic valued logic closed over
simplepropositionsT A
k , T B
k ⊆Tk andtheirlogicalcombinations,thesetofdesignated
truth values is presented by D = {(pi −1)k
i=1} = {⟨p −1, p −1, p −1, . . . , p −1



k
⟩}
and the set of all truth values by V = {0, 1, 2, …, (pi −1)k
i=1}.
Thus, each proposition of the (pi −1)k
i=1-valued fragment of p-adic valued logic
describes one of the forms of swarm propagations at time step t = k. This propaga-
tion can be treated as a p-adic valued fuzzy logic controller (pFLC). It is a device
computing an output vector from an input vector by some linguistic rules. In these
rules, ﬁrst, we use some linguistic labels, such as ‘high’, ‘low’, ‘medium’, to desig-
nate input ports of pFLC, second, we use some linguistic labels to designate output
ports of pFLC. Input ports are called premisses of linguistic rules. Output ports are
called conclusions of linguistic rules. The pFLC is a labyrinth of (p −1)-valued
tunnels with n input ports and m output ports. This labyrinth is designed as a model
for appropriate propositions of (pi −1)k
i=1-valued logic.
The algorithm of constructing pFLC at t = k is as follows (Fig.6.6):
• Linguistic variables: deﬁnition of input and output linguistic variables; selection
of meaningful linguistic states (‘high’, ‘low’, ‘medium’, etc.) for each variable.
• Fuzziﬁcation: identiﬁcation of input ports of pFLC with input linguistic variables;
construction of fuzzy membership function for input variables (how strongly they
belong to linguistic states); identiﬁcation of fuzzy membership function for input
variables with concentration of swarm at an appropriate input port (0% of member-
ship means that there is no swarm at the input port, 100% means that all attractants
at t = 0 are occupied, 0% < x% < 100% means that x% of attractants at t = 0
are occupied).
• Rule base: construction of rule base for transforming input ports of pFLC into
its output ports. This rule base is a family of (pi −1)k
i=1-valued propositions.
Appropriate experiments with the swarm are models for these propositions. We
can simulate the swarm motions on the basis of (pi −1)k
i=1-valued propositions.
• Inference engine: conversion of states for input variables into states of output
variables in accordance with the p-adic valued rule base; simulation of the swarm
motions in an object-oriented language (e.g. in the object-oriented language for
Physarum); performing of experiment with the swarm in accordance with the given
simulation.
• Defuzziﬁcation: combination of results of output ports of pFLC; identiﬁcation of
output ports with output linguistic variables; detection of swarm concentration
at each tunnel of appropriate output port at t = 0, 1, . . . , k; conversion of these
concentrations into p-adic valued wave sets (see Fig.6.5) deﬁned by the motions
through the tunnels of output variables; conversion of p-adic fuzzy values into a
single real number (as center of maxima, mean of maxima, etc).

238
6
Individual-Collective Duality in Swarm Behaviours
Fig. 6.6 The steps for the output computation in p-adic valued fuzzy logic controller for the
plasmodium of Physarum polycephalum, see [4]
Let 0 < m < k. Then pFLC can be used for prognoses what action will be chosen
at t = m. In other words, pFLC is understood as the set of the following rules:
if agent i performs an action A , then at t = m (s)he will perform an action B
with an uncertainty (meaning) FZp(B), where A is an input variable, B is an output
variable at time t = m. Meanings of output variables run over ﬁnite p-adic integers
FZp(T A
m), FZp(T B
m) ≤FZp(Tm). This understanding of pFLC allows us to deﬁne the
following repeating operative cycle of pFLC (see Fig.6.7):
• Inputs at time t: measurements of all input linguistic variables at time t.
• Fuzziﬁcation: conversion of the measurements at time t into fuzzy sets to express
their uncertainties; these fuzzy sets are used to identify the swarm concentration
at input ports.
• Inference engine: Data of input ports at time t are transformed by the inference
engine into output ports of time t + 1 in accordance with the control rules formu-
lated in (pi −1)k
i=1-valued logic with a simulation of a swarm.
• Defuzziﬁcation: outputs at time t + 1 are converted into single crisp values (the
best representatives of the p-adic valued wave sets).

6.2 Non-additivity of Swarm Behaviour
239
Fig. 6.7 The operative cycle of p-adic valued fuzzy logic controller for the plasmodium of
Physarum polycephalum, see [4]
• Inputs at time t + 1: measurements of all input linguistic variables at time t + 1,
etc.
• …
The double-slit experiment with Physarum as well as with any other swarm shows
that, ﬁrst, we cannot approximate its single actions and, second, we can appeal
to p-adic fuzzy and probability measures which are not additive. For describing
experiments with the swarm, we have constructed p-adic many-valued logic. On the
basis of this logic it is possible to design p-adic valued fuzzy logic controllers.
References
1. Khrennikov, A., Schumann, A.: Quantum non-objectivity from performativity of quantum
phenomena. Phys. Scr. T163 (2014)
2. Schumann,A.:p-adicvaluedfuzzynessandexperimentswithPhysarumpolycephalum.In:11th
International Conference on Fuzzy Systems and Knowledge Discovery (FSKD), pp. 466–472.
IEEE Xplore (2014)

240
6
Individual-Collective Duality in Swarm Behaviours
3. Schumann, A.: Rationality in the behaviour of slime moulds and the individual-collective
duality. In: AISB Convention 2015. University of Kent in Canterbury (2015)
4. Schumann, A., Adamatzky, A.: The double-slit experiment with Physarum polycephalum and
p-adic valued probabilities and fuzziness. Int. J. Gen. Syst. 44(3), 392–408 (2015)
5. Khrennikov, A.Y., Schumann, A.: Logical approach to p-adic probabilities. Bull. Sect. Logic
35(1), 49–57 (2006)
6. Volovich, I.V.: Number theory as the ultimate theory. Technical Report, CERN preprint, CERN-
TH.4791/87 (1987)
7. von Neuman, J.: Mathematical Foundations of Quantum Mechanics. Princeton University
Press, Princeton (1955)
8. Plotnitsky, A.: Reading Bohr: Physics and Philosophy. Springer, Dordrecht (2006)
9. Khrennikov, A.Y.: p-adic quantum mechanics with p-adic valued functions. J. Math. Phys.
32(4), 932–937 (1991)
10. Vladimirov, V.S., Volovich, I.V.: p-adic quantum mechanics. Commun. Math. Phys. 123, 659–
676 (1989)
11. Khrennikov, A., Schumann, A.: p-adic physics, non-well-founded reality and unconventional
computing. P-Adic Numbers, Ultrametric. Anal. Appl. 1(4), 297–306 (2009)
12. Khrennikov, A.Y.: Interpretations of Probability. VSP International Science Publishers,
Utrecht/Tokyo (1999)
13. Möllenstedt, G., Jönsson, C.: Elektronen-mehrfachinterferenzen an regelmaessig hergestellten
feinspalten. Z. Phys. A 155(4), 472–474 (1959)
14. Rauch, H., Kurz, H.: Beugung thermischer neutronen an einem strichgitter. Z. Phys. A 220(5),
419–426 (1969)
15. Shull, C.G.: Single-slit difraction of neutrons. Phys. Rev. 179(3), 752–754 (1969)
16. Zeilinger,A.,Ghler,R.,Shull,C.G.,Treimer,W.,Mampe,W.:Single-anddouble-slitdiffraction
of neutrons. Rev. Mod. Phys. 60, 1067–1073 (1988)
17. Bartell, L.S.: Complementarity in the double-slit experiment: On simple realizable systems for
observing intermediate particle-wave behaviour. Phys. Rev. D 21 (1980)
18. Bell, J.S.: Speakable and Unspeakable in Quantum Mechanics. Cambridge University Press,
Cambridge (1987)
19. Grangier, P.: Etude expérimentale de propriétés non-classiques de la lumière: interférence à un
seul photon. Université de Paris-Sud, Centre D’Orsay (1986)
20. Greenberger, D., Yasin, A.: Simultaneous wave and particle knowledge in a neutron interfer-
ometer. Phys. Lett. A 128 (1988)
21. Aczel, A.: Non-Well-Founded Sets. Stanford University Press (1988)
22. Bachman, G.: Introduction to p-adic Numbers and Valuation Theory. Academic Press (1964)
23. Koblitz, N.: p-adic Numbers, p-adic Analysis and Zeta Functions, 2nd edn. Springer (1984)
24. Mahler, K.: Introduction to p-Adic Numbers and their Functions, 2nd edn. Cambridge Univer-
sity Press (1981)
25. Robinson, A.: Non-Standard Analysis. North-Holland, Studies in Logic and the Foundations
of Mathematics (1966)
26. Wittgenstein, L.: Philosophische untersuchungen (1953)
27. Searle, J.R.: Speech Acts; an Essay in the Philosophy of Language. Cambridge University
Press, Cambridge (1969)
28. Searle, J.R.: Expression and Meaning: Studies in the Theory of Speech Acts. Cambridge Uni-
versity Press, Cambridge (1979)
29. Searle, J.R., Vanderveken, D.: Foundations of Illocutionary Logic. Cambridge University Press,
Cambridge (1984)
30. Austin, J.L.: How to do things with words: the William James lectures delivered at Harvard
University in 1955. In: Urmson, J.O., Sbisa, M. (eds.). Clarendon Press, Oxford (1962)
31. Weinberg, J.R.: An Examination of Logical Positivism. Mason Press (2007)
32. Khrennikov, A.: Contextual Approach to Quantum Formalism. Springer, Berlin, Heidelberg,
New York (2009)

References
241
33. Khrennikov, A.Y.: Information Dynamics in Cognitive. Psychological and Anomalous Phe-
nomena. Kluwer Academic Publishers, Dordrecht (2004)
34. Zinov’ev, A.: Logical physics. In: Boston Studies in the Philosophy and History of Science.
Springer (1983)
35. Sneed, J.: The Logical Structure of Mathematical Physics. D. Reidel Publishing Company,
Dordrecht (1971)
36. Garola, C.: Pragmatic interpretation of quantum logic. CoRR (2014). arXiv:abs/1409.0194
37. Feyerabend, P.: Against Method, 4th edn. Verso (2010)
38. Husserl, E.: Pure Phenomenology (1917)
39. Schumann, A.: On two squares of opposition: the Lesniewski’s style formalization of synthetic
propositions. Acta Anal. 28, 71–93 (2013)
40. Schumann, A., Akimova, L.: Simulating of Schistosomatidae (Trematoda: Digenea) behavior
by Physarum spatial logic. In: Annals of Computer Science and Information Systems, vol. 1.
Proceedings of the 2013 Federated Conference on Computer Science and Information Systems,
pp. 225–230. IEEE Xplore (2013)
41. Schumann, A., Akimova, L.: Syllogistic system for the propagation of parasites. The case
of Schistosomatidae (Trematoda: Digenea). Stud. Logic Grammar Rhetor. 40(53), 303–319
(2015)
42. Schumann, A., Adamatzky, A.: Physarum spatial logic. New Math. Nat. Comput. 7(3), 483–498
(2011)
43. Ozasa, K., Aono, M., Maeda, M., Hara, M.: Simulation of neurocomputing based on the
photophobic reactions of euglena with optical feedback stimulation. BioSyst. 100(2), 101–107
(2010)
44. Schumann,A.:Non-archimedeanfuzzyandprobabilitylogic.J.Appl.Non-Class.Logics18(1),
29–48 (2008)
45. Zadeh, L.: Fuzzy sets. Inf. Control 8, 338–353 (1965)

Chapter 7
Syllogistic Systems of Swarm
Propagation
In the p-adic valued universe of stimuli for controlling the swarm behaviour (includ-
ing swarm sensing and motoring), we can deﬁne syllogistic propositions with two
quantiﬁers: ‘all neighbours of an attractant/repellent’ and ‘some neighbours of an
attractant/repellent’. In this chapter, I examine Aristotelian and non-Aristotelian syl-
logistics for simulating the swarms. In the Aristotelian syllogistic the models veri-
fying swarming are well-founded and in the non-Aristotelian syllogistic the models
verifyingswarmingarenon-well-founded(i.e. theyhavenological atoms). See[1–8].
7.1
Aristotelian and Non-Aristotelian Syllogistics
for Modelling the Swarm Behaviour
7.1.1
Le´sniewski’s Ontology Without Logical Atoms
Le´sniewski’s ontology (see [9–11]) is based on propositional logic that is built in the
standard way. We shall use axioms of Łukasiewicz’s propositional calculus SPL as
the input set of provable propositions [12]:
(p ⇒q) ⇒((q ⇒r) ⇒(p ⇒r)),
(7.1)
(¬p ⇒p) ⇒p,
(7.2)
p ⇒(¬p ⇒q).
(7.3)
The implication and complement are given there as basic operations. Other oper-
ations are derivable, e.g. the conjunction and disjunction are deﬁned as follows:
© Springer International Publishing AG, part of Springer Nature 2019
A. Schumann, Behaviourism in Studying Swarms: Logical Models of Sensing
and Motoring, Emergence, Complexity and Computation 33,
https://doi.org/10.1007/978-3-319-91542-5_7
243

244
7
Syllogistic Systems of Swarm Propagation
p ∧q := ¬(p ⇒¬q),
(7.4)
p ∨q := ¬p ⇒q,
(7.5)
p ≡q := (p ⇒q) ∧(q ⇒p).
(7.6)
By combining axioms (7.1)–(7.3) and using inference rules, we could obtain all
other provable propositions for the system SPL.
Le´sniewski’s ontology is an extension of propositional logic.
Deﬁnition 7.1 The alphabet of Le´sniewski’s ontology is the ordered system ALO =
⟨V, Q, L1, L2, L3, L4, K⟩, where
1. V is the set of propositional variables p, q, r, …;
2. Q is the set of ontological variables A, B, C, …;
3. L1 is the set of unary propositional connectives consisting of one element ¬
called the symbol of negation;
4. L2 is the set of binary propositional connectives containing three elements: ∧, ∨,
⇒called the symbols of conjunction, disjunction, and implication respectively;
5. L3 is the set of binary ontological connectives containing the only element ε
called the functor “…is…”;
6. L4 is the set consisting of two quantiﬁers: existential (∃) and universal (∀);
7. K is the set of auxiliary symbols containing two brackets: (, ).
The sets V and Q are denumerable.
Deﬁnition 7.2 The language of Le´sniewski’s ontology is the ordered system LLO =
⟨ALO, FLO⟩, where
1. ALO is the alphabet of Le´sniewski’s ontology;
2. FLO is the set of all formulas formed by means of symbols in ALO; this set
FLO contains all formulas deﬁned by the following rules:
a. every propositional variable p, q, r, … or their Boolean combination is a
formula of Le´sniewski’s ontology;
b. if A and B are ontological variables, then an expression AεB is a formula
of Le´sniewski’s ontology;
c. if α is a formula of Le´sniewski’s ontology, where there is a free ontological
variable A, then QAα, where Q ∈L4, is a formula of Le´sniewski’s ontology
too;
d. if α, β are formulas of Le´sniewski’s ontology, then expressions ¬α, α ∧β,
α ∨β, α ⇒β are formulas of Le´sniewski’s ontology too;
e. a ﬁnite sequence of symbols of ALO is called a formula of propositional
logic if that sequence satisﬁes above mentioned conditions.
Thus, an expression that is derivable by rules of this deﬁnition is called a formula
of Le´sniewski’s ontology. Formulas that do not contain propositional variables are
called formulas of Le´sniewski’s ontology in the restricted sense.

7.1 Aristotelian and Non-Aristotelian Syllogistics for Modelling the Swarm Behaviour
245
Deﬁnition 7.3 Le´sniewski’s ontology is the ordered system SLO = ⟨ALO, FLO,
C ⟩, where
1. ALO is the alphabet of Le´sniewski’s ontology;
2. FLO is the set of all formulas formed by means of symbols in ALO;
3. C is the inference operation in FLO.
The inference rules of Le´sniewski’s ontology are as follows:
1. the substitution rule: we replace a propositional variable p j of formula α(p1, …,
pn), containing propositional variables p1, …, pn, by a formula β(q1, . . ., qk),
containing propositional variables q1, . . ., qk (resp. by a formula β(Al, Bm),
containing ontological variables Al, Bm), and we obtain a new propositional
formula α′(p1, . . ., p j−1, β(q1, . . ., qk), p j+1, …, pn) (resp. a new ontological
formula α′(p1, . . ., p j−1, β(Al, Bm), p j+1, . . ., pn)):
α(p1, . . ., p j, . . ., pn)
α′(p1, . . ., p j−1, β(q1, . . ., qk), p j+1, . . ., pn)
or
α(p1, . . ., p j, . . ., pn)
α′(p1, . . ., p j−1, β(Al, Bm), p j+1, . . ., pn),
In the same way, from an ontological formula α(A j, Bi) we can infer a new
formula α′(Ak, Bi) or α′(A j, Bl) if we replace an ontological variable A j by an
ontological variable Ak or Bi by Bl:
α(A j, Bi)
α′(Ak, Bi)
or
α(A j, Bi)
α′(A j, Bl);
2. modus ponens: according to that if two formulas of Le´sniewski’s ontology α and
α ⇒β hold, then we deduce a formula β:
α, α ⇒β
β
.
3. the universal generalization: if an ontological formula α, where there is no free
variable A, implies an ontological formula β, where there is a free variable A,
then from formula β we infer a formula ∀Aβ:
α
β
∀Aβ
;
4. the universal restriction: an ontological formula ∀Aα entails a formula α:

246
7
Syllogistic Systems of Swarm Propagation
∀Aα
α
;
5. the existential generalization: an ontological formula α is followed by ∃Aα:
α
∃Aα ;
6. the existential restriction: from an ontological formula ∃Aα we deduce α, where
the variable A is replaced:
∃Aα
α .
The axioms of Le´sniewski’s ontology include axioms of propositional logic (e.g.
axioms (7.1) – (7.3) of the propositional system SPL), and the following expression:
AεB ≡(∃C(CεA) ∧∀C∀D((CεA ∧DεA) ⇒CεD) ∧∀C(CεA ⇒CεB)),
(7.7)
where the expression AεB is read “A is B” and we are deﬁning three properties of
the connective “…is…”: (i) subject (A) is not empty, i.e. ∃C(CεA), (ii) subject (A) is
a singleton (consists of the only member), i.e. ∀C∀D((CεA ∧DεA) ⇒CεD), (iii)
anymemberofsubject(of A)belongstopredicate(B)aswell,i.e.∀C(CεA ⇒CεB).
The third property (transitivity) means that if we have a proposition AεB and a
predicate B has another predicate X, then this X is a predicate of a subject A, too.
There is ever a predicate of predicate. In fact, the third property says that the predicate
is a genus for the subject. This is the main property of analytic propositions [2].
Let us extend Le´sniewski’s ontology by adding the new axiom:
∃C(CεA).
(7.8)
The deductive system (7.1)–(7.8) is called non-empty Le´sniewski’s ontology.
Aristotle offered the ﬁrst formal theory called syllogistic [13–15], where there are
four logical connectives: a (“every + noun 1 + is + noun 2”), i (“some + noun 1 + is
+ noun 2”), e (“no + noun 1 + is + noun 2”) and o (“some + noun 1 + is not + noun
2”).
The axiomatic system of Aristotelian syllogistic was created ﬁrst by Łukasiewicz
[12]. His axioms are as follows [(they are added to axioms (7.1)–(7.3)]:
SaS,
(7.9)
SiS,
(7.10)
(MaP ∧SaM) ⇒SaP, i.e., Barbara,
(7.11)
(MaP ∧MiS) ⇒SiP, i.e., Datisi.
(7.12)

7.1 Aristotelian and Non-Aristotelian Syllogistics for Modelling the Swarm Behaviour
247
The functors a and i are basic and two others are deﬁned as follows:
SeP := ¬(SiP),
(7.13)
SoP := ¬(SaP).
(7.14)
By using axioms (7.1)–(7.3), (7.9)–(7.12), and deﬁnitions (7.4)–(7.6), (7.13),
(7.14), we may obtain all tautologies of Aristotle’s syllogistic.
Proposition 7.1 Aristotelian syllogistic is contained in non-empty Le´sniewski’s
ontology.
Proof See [11].
⊓⊔
The Aristotelian syllogistic describes analytic propositions in the Kantian termi-
nology or informative propositions in the Austian terminology. For them there ever
exist denotations (things in reality) verifying syllogistic propositions. In other words,
there are Venn diagrams to demonstrate the relationships among concepts A and B:
intersection (A ∩B ̸= ∅), inclusion (A ⊆B)), and independence (A ∩B = ∅). Nev-
ertheless, there are synthetic propositions in the Kantian terminology or performative
propositions in the Austian terminology, also. For them it is impossible to build Venn
diagrams, because appropriate concepts have no denotations (logical atoms).
Let us consider the following two examples
(1) Each love is a gift of the Lord; Some homosexuals have respect to love; Then,
Some homosexuals have respect to the gift of the Lord.
(2) All whites are being covered by ﬂecks; Socrates became white; Then, Socrates
became covering by ﬂecks.
Both statements have no intuitive meanings in the Aristotelian syllogistic. There-
fore they are considered sophisms. The point is that in (1) there is no way to deﬁne
the extensions of the concepts ‘love’ and ‘gift of the Lord’. What are denotations for
them? And the conclusion that ‘Some homosexuals have respect to the gift of the
Lord’ is wrong. According to this conclusion, it is possible even to read that ‘Homo-
sexuals who have respect to love are religious’. But they can be religious and have no
respect to love or they can have respect to love and not be religious. In (2) ‘covering
by ﬂecks’ is not a genus for ‘white’. Here we cannot use Venn diagrams also. In the
same way, we cannot say that ‘becoming white’ is a genus for ‘Socrates’, although
the form of both premises says that they are general. Thus, there are concepts for
deﬁning relations among which we cannot use Venn diagrams. In the ﬁrst premise
of (1) we cannot use Venn diagrams, because extensions (logical scopes) of ‘love’
and ‘gift of the Lord’ cannot be deﬁned at all. In both premises of (2) we cannot
use Venn diagrams, because predicates cannot be considered genus for subjects. The
fact that there are propositions like (1) and (2) for which the formulas of Aristotelian
syllogistic have no intuitive meanings have been known since Aristotle (please see
his own counterexamples in Topics and Sophistical Refutations). Kant was one of the
ﬁrst philosophers who tried to explain why there are such propositions. Propositions

248
7
Syllogistic Systems of Swarm Propagation
for which predicates are regarded genus for subjects are called by him analytic. Gen-
eral propositions (like the ﬁrst premise of (1) and (2)) for which predicates cannot
be regarded genus for subjects are called by him synthetic.
Performative or synthetic propositions have non-well-founded models. These
propositions can be deﬁned by replacing implication by conjunction.
The novel ontology is said to be synthetic or performative. It is built up by adding
the following new axiom to axioms (7.1)–(7.3):
AistB ≡(∃C(CistA) ∧∀C∀D((CistA ∧DistA) ⇒CistD) ∧
∀C(CistA ∧CistB)),
(7.15)
The formula AistB designates any perforative/synthetic propositions. Let us com-
pare formula (7.15) with (7.7). We see that instead of the property that the predicate
is a genus of the subject, we have the property that the subject has ever a non-empty
intersection with the predicate.
Inference rules in synthetic ontology are the same as in Le´sniewski’s ontology.
Non-empty performative/synthetic ontology is obtained by adding the new axiom
∃C(CistA).
(7.16)
Proposition 7.2 All theorems of (non-empty) Le´sniewski’s ontology are theorems of
(non-empty) performative/synthetic ontology as well.
□
Let us sketch now the syllogistic system formalizing performative/synthetic
propositions. This system is said to be synthetic syllogistic or performative syllogis-
tic, while we are assuming that Aristotelian syllogistic is analytic. The basic logical
connectives of performative/synthetic syllogistic are as follows: a (“every + noun +
is + adjective”), i (“some + noun + is + adjective”), e (“no + noun + is + adjective”)
and o (“some + noun + is not + adjective”) that are deﬁned in performative/synthetic
ontology in the following way:
SaP := (∃A(AistS) ∧(∀A(AistS ∧AistP)));
(7.17)
SiP := ∀A(¬(AistS) ∧¬(AistP));
(7.18)
SoP := ¬(∃A(AistS) ∧(∀A(AistS ∧AistP))), i.e.
(∀A¬(AistS) ∨∃A(¬(AistS) ∨¬(AistP)));
(7.19)
SeP := ¬∀A(¬(AistS) ∧¬(AistP)), i.e. ∃A(AistS ∨AistP).
(7.20)

7.1 Aristotelian and Non-Aristotelian Syllogistics for Modelling the Swarm Behaviour
249
Now let us formulate axioms of performative/synthetic syllogistic:
SaP ⇒SeP;
(7.21)
SaP ⇒PaS;
(7.22)
SiP ⇒PiS;
(7.23)
SaM ⇒SeP;
(7.24)
MaP ⇒SeP;
(7.25)
(MaP ∧SaM) ⇒SaP;
(7.26)
(MiP ∧SiM) ⇒SiP.
(7.27)
Proposition 7.3 Performative/synthetic syllogistic is a deductive part of non-empty
performative/synthetic ontology.
□
In this syllogistic we have no logical atoms. Hence, we can use non-well-founded
models.
7.1.2
Lateral Inhibition and Lateral Activation
As we know, any biological activity can be controlled by placing attractants and
repellents—some items which are programmed to attract and repel the behaviour.
So, any swarm can be represented as a computation medium, because the behaviour
of any swarm can be programmed by localization of attractants presented as food
pieces and repellents presented as dangerous places. Nevertheless, we can program
the behaviour of many unicellular organisms in the same way, such as behaviours of
Amoeba proteus or plasmodia of Physarum plycephalum. At the level of one cell,
this controlling is explained by the appearance and disappearance of actin ﬁlaments
or F-actin, i.e. of the protein which is organized into higher-order structures, forming
linear bundles, two-dimensional networks, and three-dimensional semisolid gels to
reacttoalltheexternalstimuli.Actinﬁlamentsareconnectedtotheplasmamembrane
to provide a mechanical support by an actin cortex. If there is an attractant before
the cell, actin ﬁlaments form a wave to change the cell shape to allow the movement
of the cell surface to build a pseudopodium by cross-linked ﬁlaments to catch the
attractant. If there is a repellent before the cell, actin ﬁlaments form a wave to change
the cell shape to avoid the repellent.
In swarm computing we use real organisms like ants or slime mould with com-
pletely controlling their behaviour. But we may expect that in the future we can
control all the chemical reactions responsible for assembling and disassembling the

250
7
Syllogistic Systems of Swarm Propagation
actin ﬁlament networks. It means that we would have an “artiﬁcial protein monster”
whose reactions are programmed by us even at the molecular level.
Conventionally, any device for computations has been regarded as a “mechanical”
calculator—a machine designed from inanimate-nature objects and used to perform
automatically all the computations in the way of mechanical (later electronic) simu-
lations of calculating processes. The ﬁrst calculating machine was designed by Blaise
Pascal (1623–1662) to mechanize calculations. This attempt gave many inspirations
for somelogicians at that time. So, GottfriedWilhelmvonLeibniz(1646–1716) intro-
duced the idea of characteristica universalis—the universal computer to mechanize
all thinking processes, not only calculations:
…a kind of general algebra in which all truths of reason would be reduced to a kind of
calculus. At the same time, this would be a kind of universal language or writing, though
inﬁnitely different from all such languages which have thus far been proposed; for the
characters and the words themselves would direct the mind, and the errors – excepting those
of fact – would only be calculation mistakes. It would be very difﬁcult to form or invent this
language or characteristic, but very easy to learn it without any dictionaries (Leibniz, Letter
to Nicolas Remond, 10 January 1714, Tr. by Leroy Loemker).
Nobody has thought of building up computers from the animate nature. Later, the
Leibniz’s idea of characteristica universalis or universal “mechanical” calculator
to calculate everything was continued and developed within logical empiricism (or
logical positivism)—a branch of analytic philosophy, in which all the true pictures
of reality were considered as logical compositions of atomic sentences which in
turn consist only of observational terms—terms for which there are correspondence
rules, showing appropriate facts as the empiric values of terms, see [16]. Hence, a
true picture of reality is a composition constructed by logical connectives to combine
factsexpressedinobservationalterms.OttoNeurath(1882–1945)calledthisLeibniz-
inspiritedprogram‘physicalism’—auniversalsystemwhichwouldcomprehendeach
positive veriﬁable knowledge furnished by all the various empirical sciences, see [17,
18]. It is a recent analogous for the older Leibnizian characteristica universalis. In
1928 Rudolf Carnap (1891–1970) published the book The Logical Structure of the
World (Der logische Aufbau der Welt), in which he developed a logical formalism to
deﬁne all scientiﬁc terms by means only of observational terms and symbolic-logical
rules. This system is a “mechanical” calculator to draw all the true conclusions from
the empirical knowledge expressed in observational terms.
Ludwig Josef Johann Wittgenstein (1889–1951) introduced this physicalism as
follows:
• The world, i.e. the picture of reality, is a combination of facts.
• A fact is expressed by an atomic proposition and a combination of facts is expressed
by a logical composition of appropriate atomic proposition veriﬁed on these facts
(Wittgenstein, The Tractatus Logico-Philosophicus).
Hence, knowledge was understood by the logical empiricists as a process that can
be simulated by logical machines drawing conclusions automatically from observa-
tions. These logical machines were theoretically explicated concurrently in the three
ways: (i) mathematically by Kurt Friedrich Gödel (1906–1978); (ii) from the point

7.1 Aristotelian and Non-Aristotelian Syllogistics for Modelling the Swarm Behaviour
251
of view of programming by Alonzo Church (1903–1995); and (iii) from the point of
view of engineering by Alan Mathison Turing (1912–1954).
(i) So, Gödel proposed the idea of μ-recursive functions to explicate a class of
partial functions from natural numbers to natural numbers that are ‘computable’
in an intuitive sense. These functions are deﬁned by inductive sets. Now, there is
a notion of the so-called corecursive functions deﬁned by coinductive sets. This
notion allows us to formally describe any behaviour, even not-algorithmic.
(ii) Church introduced λ-calculus—a formal system for expressing computation
based on function abstraction, variable binding, and substitution. This calcu-
lus is an abstract programming language expressing computation as such. Now,
there are process calculi like π-calculus applying corecursuive functions for
programming instead of recursive functions. These new calculi are used for sim-
ulating different behavioural systems including not-algorithmic and concurrent.
Notice, λ-calculus cannot do this.
(iii) Finally, Turing deﬁned a Turing machine—an abstract machine that manipulates
symbols on a strip of tape according to a table of rules to calculate all functions,
‘computable’ in an intuitive sense. This machine is inanimate in principle. In
unconventional computing, designing computers from swarms or designing an
“artiﬁcial protein monster” (in the future) is an attempt to explain the animal
behaviour as such and this attempt is parallel to mathematical theories on core-
cursive functions and programming languages involving process calculi. The
latter try to explain the behaviour, as well.
Thus, conventionally there was a philosophical presupposition that the human
being is unique who possesses intelligence and all computers can be made just as
mechanical (electric) devices simulating the human algorithmic thinking.
However, there is an old tradition of panpsychism—a view that all animate things
bear a mind or a mind-like quality, too. So, Johann Wolfgang von Goethe (1749–
1832) stated that nothing exists without an internal intelligence called by him Seele
(spirit):
Since, however, matter can never exist and act without spirit [Seele], nor spirit without matter,
matter is also capable of undergoing intensiﬁcation, and spirit cannot be denied its attraction
and repulsion (Goeth, Commentary on the Aphoristic Essay ‘Nature’ (1828)”, in: D. Miller
(ed.), Goethe: Scientiﬁc Studies. New York: Suhrkamp, 1988).
The panpsychistic idea of internal intelligence of all things is well expressed in
Qaballah, the Judaic mysticism. The Bible verse ‘And the spirit of God moved upon
the face of the waters’ (Genesis 1:2) was interpreted as afﬁrming that there exists a
spirit (ruah. , )רוחof the Messiah or a pure man before the world creation (Genesis
Rabbah 8:1). This spirit is named ’Adam Qadmon (.)אד
 קדמוHe is the cosmic
man or Self and represents ‘crown’ (keter, ,)כתרthe divine will to create everything.
From ’Adam Qadmon emerge the following four worlds: (i) the divine light or pure
emanation (’az.ilut, ( ;)אצילותii) the creation or divine waters (briy’ah, ( ;)בריאהiii)
the formation or internal essence of all things (yez.irah, ;)יצירהand (iv) the action
and all the forms of behaviour (‘a´siyah, .)עשיה

252
7
Syllogistic Systems of Swarm Propagation
We ﬁnd out almost the same description of internal intelligence of all things in
the Hindu tradition, as well. The cosmic man or Self is named Purus.a and from
him emerge also the same four worlds: (i) the divine light or pure emanation (‘the
Agni [A.Sch.: divine ﬁre] whose fuel is the sun’); (ii) the creation or divine waters
(‘parjánya’ or ‘clouds whose fuel is the moon’); (iii) the formation or internal essence
of all things (contained in ‘medicinal plant’); and (iv) the action and all the forms of
behaviour (actions started from ‘the male which sheds the semen on woman’):
From him the Agni (dyú loka) whose fuel is the sun; from the moon in the dyú loka, parjánya
(clouds); from the clouds, the medicinal plant that grows on earth; from these, the male (ﬁre)
which sheds the semen on woman, thus gradually many living beings such as Brahmins,
etc., are born of the Purus.a (Mun. d. aka Upanis.ad 2, 1:5; Tr. by S. Sitarama Sastri).
ItisquitemysteriouswhyinJudaismandHinduism(thereligions,notconnectedat
all between themselves) there are the similar notions of cosmic men ’Adam Qadmon
and Purus.a with the same four emanations from them.
Hence, according to some religious traditions, such as Judaism and Hinduism,
panpsychism holds indeed—it is assumed that intelligence is everywhere. Therefore,
their believers suppose that there are many non-human (or even over-human) forms
of intelligence in natural processes.
In accordance with panpsychism, each animate thing is a kind of computer. So,
an “artiﬁcial protein monster” (Golem in Qabbalah) is possible, too. The idea of this
monsterwasusedinascienceﬁctiontelevisionseries,Lexx,createdbyPaulDonovan,
Lex Gigeroff, and Jeffrey Hirschﬁeld, originally released from 18 April 1997 to 26
April 2002. Lexx is a narration about the adventures of a group of mismatched
individuals aboard the organic space craft called Lexx. All the devices and technics
in this series are organic and look like protein monsters called ‘insects.’
The panpsychist idea cannot be scientiﬁc because of its religious roots, but it
can be inspiriting for us. It is so surprising that in swarm computing there are some
evidences supporting panpsychism. We know that in the neural networks there are
the following two mechanisms responsible for perceiving signals: (i) increasing the
intensity of the signal by lateral inhibition, when inhibitory interneurons inhibit
neighbouring cells in the neural network to make the contrast of the signal more
visible;(ii)decreasingtheintensityofthesignalbylateralactivation,whenactivation
interneurons activate neighbouring cells to make the contrast of the signal less visible.
Due to both mechanisms, we deal with some illusions such as the Müller-Lyer one—a
geometric illusion in which the perceived length of a line depends on whether the line
terminates in an arrow tail (when we face the lateral inhibition effect) or arrowhead
(the lateral activation effect).
Hence, the lateral inhibition and lateral activation are two mechanisms of our
mind in perceiving signals (in the case of the Müller-Lyer illusion the signals are
visual). Nevertheless, the same mechanisms of transmitting signals are discovered (i)
on the level of Amoeboid organisms and (ii) on the level of swarms optimizing their
transport networks. For the ﬁrst time, Sakiyama and Gunji have shown in [19] that
both neuronal effects are observed in the collective patterns of garden ants (Lasius
niger) which optimize the own logistics by local interactions (the analogue of the

7.1 Aristotelian and Non-Aristotelian Syllogistics for Modelling the Swarm Behaviour
253
neuronal lateral inhibition) and global explorations (the analogue of the neuronal
lateral activation). Later Jones has paid attention in [20] that plasmodia of Physarum
polycephalum verify both effects also in their adaptive behaviours. It is quite strange
taking into account the fact that plasmodia are unicellular and, therefore, they have
no nervous systems at all.
The matter is that both effects are basic for the actin ﬁlament networks: (i) among
actin ﬁlaments, neighbouring bundles can be inhibited to increase the intensity of the
signal to make just one zone of actin ﬁlament polymerization active; (ii) neighbouring
bundles can be activated to decrease the intensity of the signal to make several zones
of actin ﬁlament polymerization active.
Thus, the lateral inhibition and lateral activation can be detected in any forms
of swarm networking including social bacteria and plasmodia of Physarum poly-
cephalum. The same effects are observed even in the swarm behaviour of alcohol-
dependent people [21], i.e. on the level of collective patterns of the human beings.
It means that on the level of actin ﬁlament networks we have a kind of intelligence
that is enough for the adaptation and optimization of logistics. So, the “artiﬁcial
protein monster” (Golem) consisting of actin ﬁlament networks and solving many
computational tasks connected to orientation and locomotion is absolutely real. The
basic logic for this monster is proposed in [22].
To sum up, panpsychism in computer science means that we design bioinspired
robots by assuming scale-invariant mechanisms that have been conserved across
species. In particular, lateral inhibition and lateral activation are ubiquitous events
that occur over many scales including within the cell during cell polarization, between
groups of neuron within the visual cortex to process visual cues, and between active
zones of swarms to react to their environments. Conventional logics, such as Aris-
totelian syllogistic, μ-recursive functions, λ-calculus, Turing machines, can describe
the behaviour just under the conditions of lateral inhibition. But the behaviour under
the conditions of lateral activation is a substantial part of the swarming, too. Let us
consider then, how we can deﬁne the Aristotelian syllogistic on laterally inhibited
actions and later how we can deﬁne the performative/synthetic syllogistic on laterally
activated actions.
7.1.3
Lateral Inhibition and Aristotelian Syllogistic
In the swarm implementation of Aristotelian syllogistic, all data points are denoted
by appropriate syllogistic letters as attractants. A data point S is considered empty if
and only if an appropriate attractant denoted by S is not occupied by the swarm. We
have syllogistic strings of the form SP with the following interpretation: ‘S is P,’
and with the following meaning: SP is true if and only if S and P are reachable by
the swarm and both S and P are not empty, otherwise SP is false. By this deﬁnition
of syllogistic strings, we can deﬁne atomic syllogistic propositions as follows:

254
7
Syllogistic Systems of Swarm Propagation
‘All S are P’ (SaP):
In the formal syllogistic: there exists A such that A is
S and for any A, if A is S, then A is P. In the swarm
model: there is a swarm A and for any A, if A is located
at S, then A is located at P.
‘Some S are P’ (SiP):
In the formal syllogistic: there exists A such that both
‘A is S’ is true and ‘A is P’ is true. In the swarm
model: there exists a swarm A such that A is located
at S and A is located at P.
‘No S are P’ (SeP):
In the formal syllogistic: for all A, ‘A is S’ is false or
‘A is P’ is false. In the swarm model: for all swarms
A, A is not located at S or A is not located at P.
‘Some S are not P’ (SoP):
In the formal syllogistic: for any A, ‘A is S’ is false or
there exists A such that ‘A is S’ is true and ‘A is P’ is
false. In the swarm model: for any swarms A, A is not
located at S or there exists A such that A is located at
S and A is not located at P.
Formally, this semantics is deﬁned as follows. Let M be a set of attractants.
Take a subset ∥X∥⊆M of attractants occupied by the swarm as a meaning for each
syllogistic variable X. Next, deﬁne an ordering relation ⊆on subsets ∥S∥, ∥P∥⊆M
as: ∥S∥⊆∥P∥iff attractants from ∥P∥are reachable for the swarm located at the
attractants from ∥S∥. Hence, ∥S∥∩∥P∦= ∅means that some attractants from ∥P∥
are reachable for the swarm located at the attractants from ∥S∥and ∥S∥∩∥P∥=
∅means that no attractants from ∥P∥are reachable for the swarm located at the
attractants from ∥S∥. This gives rise to models M = ⟨M, ∥· ∥⟩such that
• M |= SaP iff ∥S∥⊆∥P∥;
• M |= SiP iff ∥S∥∩∥P∦= ∅;
• M |= SeP iff ∥S∥∩∥P∥= ∅;
• M |= p ∧q iff M |= p and M |= q;
• M |= p ∨q iff M |= p or M |= q;
• M |= ¬p iff it is false that M |= p.
Proposition 7.4 The Aristotelian syllogistic is sound and complete relatively to M
if we understand ⊆as an inclusion relation.
Proof It is a well-known result of [23].
⊓⊔
However, relatively to all possible swarm behaviours the Aristotelian syllogistic
is not complete. This syllogistic simulates the lateral inhibition effect, when just one
possible direction of propagation is chosen at each move.
7.1.4
Lateral Activation and Non-Aristotelian Syllogistic
While in Aristotelian syllogisms we are concentrating on one direction of many
swarm motions, and dealing with acyclic directed graphs with fusions of many swarm

7.1 Aristotelian and Non-Aristotelian Syllogistics for Modelling the Swarm Behaviour
255
networks toward one data point, in most cases of swarm behaviour, not limited by
repellents,weobserveaspatialexpansionofswarminalldirectionswithmanycycles.
Under these circumstances it is more natural to deﬁne all the basic syllogistic propo-
sitions SaP, SiP, SeP, SoP in a way they satisﬁes the inverse relationship when
all converses are valid: SaP ⇒PaS, SiP ⇒PiS, SeP ⇒PeS, SoP ⇒PoS. In
other words, we can draw more natural conclusions for swarm networks which are
decentralized and have some cycles. This system is called the performative/synthetic
syllogistic deﬁned above. The alphabet of this system contains as descriptive signs
the syllogistic letters S, P, M, …, as logical-semantic signs the syllogistic connec-
tives a, e, i, o and the propositional connectives ¬, ∨, ∧, ⇒. Atomic propositions
are deﬁned as follows: SxP, where x ∈{a, e, i, o}. All other propositions are deﬁned
thus: (i) each atomic proposition is a proposition, (ii) if X, Y are propositions, then
¬X, ¬Y, X ⋆Y, where ⋆∈{∨, ∧, ⇒}, are propositions, too.
In order to implement the performative/synthetic syllogistic in the behaviour of
swarms, we will interpret all data points denoted by appropriate syllogistic letters as
attractants. A data point S is considered empty if and only if an appropriate attractant
denoted by S is not occupied by the swarm. Let us deﬁne syllogistic strings of the
form SP with the following interpretation: ‘S is P,’ and with the following meaning:
SP is true if and only if S and P are reachable for each other by the swarm and both
S and P are not empty, otherwise SP is false. Using this deﬁnition of syllogistic
strings, we can deﬁne atomic syllogistic propositions as follows:
‘All S are P’ (SaP):
In the formal performative syllogistic: there exists A
such that A is S and for any A, A is S and A is P. In
the swarm model: there is a string AS and for any A
which is a neighbour for S and P, there are strings AS
and AP. This means that we have a massive-parallel
occupation of the region where the cells S and P are
located.
‘Some S are P’ (SiP):
In the formal performative syllogistic: for any A,
both ‘A is S’ is false and ‘A is P’ is false. In the
swarm model: for any A which is a neighbour for S
and P, there are no strings AS and AP. This means
that the swarm cannot reach S from P or P from S
immediately.
‘No S are P’ (SeP):
In the formal performative syllogistic: there exists A
such that if ‘A is S’ is false, then ‘A is P’ is true. In
the swarm model: there exists A which is a neighbour
for S and P such that there is a string AS or there is a
string AP. This means that the swarm occupies S or
P, but not the whole region where the cells S and P
are located.
‘Some S are not P’ (SoP):
In the formal performative syllogistic: for any A, ‘A
is S’ is false or there exists A such that ‘A is S’ is
false or ‘A is P’ is false. In the swarm model: for any

256
7
Syllogistic Systems of Swarm Propagation
A which is a neighbour for S and P there is no string
AS or there exists A which is a neighbour for S and
P such that there is no string AS or there is no string
AP. This means that the swarm does not occupy S or
there is a neighbouring cell which is not connected to
S or P by a swarm network.
A model M ′ = ⟨M′, ∥· ∥x⟩for the performative syllogistic, where M′ is the set of
attractants and ∥X∥x ⊆M′ is a meaning of syllogistic letter X which is understood
as all attractants reachable for the swarm from the point x, is deﬁned as follows:
• M ′ |= All x are y iff ∥X∥x ̸= ∅, ∥X∥y ̸= ∅, and ∥X∥x ∩∥X∥y ̸= ∅, i.e. the swarm
can move from neighbours of y to x and it can move from neighbours of x to y;
• M ′ |= Some x are y iff y /∈∥X∥x and x /∈∥X∥y, i.e. the swarm cannot move from
neighbours of y to x and it cannot move from neighbours of x to y;
• M ′ |= No x are y iff y ∈∥X∥x or x ∈∥X∥y, i.e. the swarm can move from
neighbours of y to x or it can move from neighbours of x to y;
• M ′ |= Some x are not y iff y /∈∥X∥x or x /∈∥X∥y, i.e. the swarm cannot move
from neighbours of y to x or it cannot move from neighbours of x to y;
• M ′ |= p ∧q iff M ′ |= p and M ′ |= q;
• M ′ |= p ∨q iff M ′ |= p or M ′ |= q;
• M ′ |= ¬p iff it is false that M ′ |= p.
Proposition 7.5 The performative syllogistic is sound and complete in M ′.
□
In the performative syllogistic we simulate the lateral activation effect. In this
system we have no logical atoms.
7.2
Spatial Diagrams for Syllogistic Propositions
One of the ﬁrst logicians who proposed a spatial implementation of Aristotelian
syllogistic reasoning was Lewis Carroll [24, 25]. He used three kinds of syllogistic
propositions: (i) the universal afﬁrmative (‘all members of its subject are members
of its predicate’), (ii) the universal negative (‘no members of its subject are members
of its predicate’), (iii) and the particular afﬁrmative (‘some members of its subject
are members of its predicate’). His examples are as follows: ‘All red apples are
ripe’, ‘No red apples are ripe’, ‘Some red apples are ripe’. For verifying syllogistic
propositions he proposed the following biliteral diagram: xy xy′
x′y x′y′ that plays the
role of ‘universe of discourse’ for all syllogistic propositions over adjuncts x, y,
non-x (which is denoted by x′), non-y (which is denoted by y′). For example, let x
mean ‘old,’ so that x′ will mean ‘new’. Let y mean ‘English,’ so that y′ will mean
‘foreign’. Assume that ‘books’ are an appropriate universe of discourse. Then we
can divide this universe into the following four classes: xy (‘old English books’),
xy′ (‘old foreign books’), x′y (‘new English books’), x′y′ (‘new foreign books’).

7.2 Spatial Diagrams for Syllogistic Propositions
257
Now let us take two kinds of counters: grey and black. If a black counter is placed
within a cell, this means that “this cell is occupied” (i.e. “there is at least one thing
in it”). If a grey counter is placed within a cell, this means that “this cell is empty”
(i.e. “there is nothing in it”). Thus, using grey and black counters we can verify all
the basic syllogistic propositions.
In this section, I develop Carroll’s ideas, but our diagrams will be represented by
livingorganisms,e.g.bytheslimemould.Oneofthemostinterestingoutcomesofthis
research is that, ﬁrst, the universe of discourse is considered a continuously growing
living organism (Physarum polycephalum plasmodium), second, any motions of
this organism are considered as inferring syllogistic conclusions. Carroll’s diagrams
allow us to deﬁne all possible directions in any motion of the slime mould.
7.2.1
Strings in the Slime Mould Growing Universe
The universe, where Physarum polycephalum lives, consists of cells possessing dif-
ferent topological properties according to the intensity of chemo-attractants and
chemo-repellents. The intensity entails the natural or geographical neighbourhood
of the set’s elements in accordance with the spreading of attractants or repellents.
As a result, we obtain Voronoi cells. A planar Voronoi diagram of the set P is a
partition of the plane into cells, such that for any element of P, a cell corresponding
to a unique point p contains all those points of the plane which are closer to p in
respect to the distance d than to any other node of P. A unique region
vor(p) =

m∈P,m̸=p
{z ∈R2 : d(p, z) < d(m, z)}
assigned to the point p is called the Voronoi cell of the point p. Within one Voronoi
cell a reagent has the full power to attract or repel the plasmodium. The distance d is
deﬁned by intensity of reagent spreading like in other chemical reactions simulated
by Voronoi diagrams. When two spreading wave fronts of two reagents meet, this
means that the plasmodium cannot choose any further direction, and splits. Within
the same Voronoi cell two active zones will fuse.
If a Voronoi center is presented by an attractant a that is activated and occupied by
the plasmodium, this means that there exists a string a. This string has the meaning
“a exists”. If a Voronoi center is presented by a repellent [a] that is activated and
avoided by the plasmodium, this means that there exists a string [a]. This string
has the meaning “a does not exist”. If two neighbour Voronoi cells contain activated
attractants a and b, which are occupied by the plasmodium, and between both centers
there are protoplasmic tubes, then we say that there exists a string ab and a string
ba. The meaning of those strings is equal and it is as follows: “ab exist”, “ba exist”,
“some a is b”, “some b is a”.
If one neighbour Voronoi cell contains an activated attractant a which is occupied
bytheplasmodiumandanotherneighbourVoronoicellcontainsanactivatedrepellent

258
7
Syllogistic Systems of Swarm Propagation
[b] which is avoided by the plasmodium, then we say that there exists a string a[b]
and a string [b]a. The meaning of those strings is equal and it is as follows: “ab do
not exist, but a exists without b”, “there exists a and no a is b”, “no b is a and there
exists a”, “a exists and b does not exist”.
If two neighbour Voronoi cells contain activated repellents [a] and [b] which are
avoided by the plasmodium, then there exists a string [ab] and a string [ba]. The
meaning of those strings is equal and it is as follows: “ab do not exist together”,
“there are no a and there are no b”, “no b is a”, “no a is b”.
Thus, the family of strings between nearest attractants presents a proximity graph
which continuously grows from one attractant to another. This expansion could be
demonstrated as a Toussaint hierarchy [26], where the family of strings starts from a
nearest-neighbourhood graph and any next graph in the hierarchy is produced from
previous graph by adding some edges between non-adjacent nodes.
Each string in the Toussaint hierarchy could be interpreted as a syllogistic proposi-
tion.Atthebeginning,wehavejustdatapointswithoutstrings.Thensomeﬁrststrings
have grown up and in some cases we see the ﬁrst syllogistic conclusions, when three
or more points are connected by protoplasmic tubes. At the end, we observe all possi-
ble syllogistic conclusions in the topology of attractants and repellents we have set up
for Physarum polycephalum. As a result, the growth of plasmodia is considered syllo-
gistic conclusions. Due to different stimuli, we can manage this growth in directions
we want, therefore we can foresee all possible syllogistic conclusions, which can be
implemented within the certain topology of attractants and repellents. Moreover, we
can deal with different syllogistic systems in managing the slime mould behaviour.
In particular, we can implement the Aristotelian syllogistic and performative syllo-
gistic. For denoting all possible logic circuits of syllogistic systems implemented in
the Physarum behaviour, we will use the so-called Physarum diagrams which are a
modiﬁcation of the well-known Lewis Carroll’s diagrams [24, 25].
7.2.2
Aristotelian Syllogistic for Physarum Plasmodia
with Repellents
In the Physarum diagrams for verifying all the basic syllogistic propositions, we
will use the following four cells: x, y, x′, y′, where x′ means all cells which differ
from x, but they are neighbours for y, and y′ means all cells which differ from y and
are neighbours for x. These cells express appropriate meanings of syllogistic letters.
The corresponding universe of discourse will be denoted by means of the following
diagram: x y′
y x′ .
Assume that a black counter denotes an attractant and if it is placed within a cell
x, this means that “this Voronoi cell contains an attractant Nx activated and occupied
by the plasmodium.” It is a veriﬁcation of the syllogistic letter Sx at cell x. A grey
counter denotes a repellent and if it is placed within a cell x, this means that “this
Voronoi cell contains a repellent Rx activated and there is no plasmodium in it.”

7.2 Spatial Diagrams for Syllogistic Propositions
259
Fig. 7.1 The Physarum
diagrams for the basic
existence strings, see [5]
It is a veriﬁcation of a new syllogistic letter [Sx]. For the sake of convenience, we
will denote Sx by x and [Sx] by [x]. Using these counters, we can verify all the basic
existence syllogistic propositions in a way analogous, though different to Carroll’s
diagrams (see Fig. 7.1).
Physarum strings of the form xy, yx are interpreted as particular afﬁrmative
propositions “Some x are y” and “Some y are x” respectively, strings of the form
[xy], [yx], x[y], y[x] are interpreted as universal negative propositions “No x are
y” and “No y are x.” A universal afﬁrmative proposition “All x are y” are presented
by a complex string xy&x[y′]. The sign & means that we have strings xy and x[y′]
simultaneously and they are considered the one complex string. All these strings are
veriﬁed on the basis of the diagrams of Fig. 7.2.
For verifying syllogisms we will use the following diagrams symbolizing some
neighbour cells:
m m′
m′ x
y′ m
m
y x′ m′
m′ m
The motion of plasmodium starts from one of the central cells (x, y, x′, y′) and
goes towards one of the four directions (northwest, southwest, northeast, southeast).
The syllogism shows a connection between two not-neighbour cells on the basis of its
joint neighbour and says if there was either multiplication or fusion. As a syllogistic
conclusion, we obtain another diagram: x m′
m x′ . Different syllogistic conclusions

260
7
Syllogistic Systems of Swarm Propagation
Fig. 7.2 The Physarum
diagrams for syllogistic
propositions, see [5]

7.2 Spatial Diagrams for Syllogistic Propositions
261
derived show directions of plasmodium’s propagation. Some examples are provided
in Figs. 7.3, 7.4 and 7.5:
Continuing in the same way, we can construct a syllogistic system, where conclu-
sions are derived from three premises. The motion of plasmodium starts from one of
the central cells (x, y, x′, y′) and goes towards one of the four directions (northwest,
southwest, northeast, southeast), then towards one of the eight directions (north-
northwest, west-northwest, south-southwest, west-southwest, north-northeast, east-
northeast, south-southeast, east-southeast), etc.
Hence, a spatial expansion of plasmodium is interpreted as a set of syllogistic
propositions. The universal afﬁrmative proposition xy&x[y′] means that the plas-
modium at the place x goes only to y and all other directions are excluded. The
universal negative proposition x[y] or [xy] means that the plasmodium at the place x
cannot go to y and we know nothing about other directions. The particular afﬁrmative
proposition xy means that the plasmodium at the place x goes to y and we know
nothing about other directions. Syllogistic conclusions allow us to mentally reduce
the number of syllogistic propositions showing plasmodium’s propagation.
For the implementation of Aristotelian syllogistic we appeal to repellents to delete
some possibilities in the plasmodium propagation. So, model M deﬁned above
should be understood as follows:
• M |= All x are y iff xy&x[y′], i.e. the plasmodium is located at x and can move
only to y and cannot move towards all other directions;
• M |= Some x are y iff xy, i.e. the plasmodium is located at x and can move to y;
• M |= No x are y iff x[y] or [xy], i.e. the plasmodium cannot move to y in any
case.
It is evident in this formulation that the Aristotelian syllogistic is so unnatural
for plasmodia. Without repellents, this syllogistic system cannot be veriﬁed in the
medium of plasmodium propagations. In other words, we can prove the next propo-
sition:
Proposition 7.6 The Aristotelian syllogistic is not sound and complete on the plas-
modium without repellents.
□
7.2.3
Non-Aristotelian Syllogistic for Physarum Plasmodia
Without Repellents
In the Physarum diagrams for the performative syllogistic, the ‘universe of discourse’
covers the cells x, y, non-x (which be denoted by x′), non-y (which be denoted by
y′): x y′
y x′ , where x, y, x′, y′ are neighbour cells containing attractants for Physarum,
x′ are all neighbours for y which differ from x, and y′ are all neighbours for x which
differ from y. Suppose that we have black, white, and grey counters and (i) if a black
counter is placed within a cell, this means that “this cell is occupied” (i.e. “there is

262
7
Syllogistic Systems of Swarm Propagation
Fig. 7.3 Physarum
diagrams for syllogisms (part
1), see [5]

7.2 Spatial Diagrams for Syllogistic Propositions
263
Fig. 7.4 Physarum diagrams for syllogisms (part 2), see [5]

264
7
Syllogistic Systems of Swarm Propagation
Fig. 7.5 Physarum diagrams for syllogisms (part 3), see [5]

7.2 Spatial Diagrams for Syllogistic Propositions
265
at least one thing in it”), (ii) if a white counter is placed within a cell, this means that
“this cell is not occupied” (i.e. “there is not thing in it”), (ii) if a grey counter is placed
within a cell, this means that “it is not known if this cell is occupied”. All possible
combinations of Physarum diagrams for atomic propositions within our universe of
discourse are pictured in Fig. 7.6.
The universe of discourse for simulating performative syllogisms by means of
Physarum behaviours covers cells x, y, m, x′, y′, m′ in the following manner:
y′ m m′ x′
m′ x
y′ m
m
y x′ m′
x m′ m
y
The motion of plasmodium starts from one of the central cells (x, y, x′, y′) and
goes towards one of the four directions (northwest, southwest, northeast, southeast).
The Physarum diagram for syllogistic conclusions is as follows:
x m′
m x′
Some examples of performative syllogistic conclusions are regarded in Fig. 7.7.
Thus, the performative syllogistic allows us to study different zones containing
attractants for Physarum if they are connected by protoplasmic tubes homogenously.
A model M ′ = ⟨M′, ∥· ∥x⟩for the performative syllogistic, where M′ is the set of
attractants and ∥X∥x ⊆M′ is a meaning of syllogistic letter X which is understood
as all attractants reachable for the plasmodium from the point x, is deﬁned as follows:
• M ′ |= All x are y iff ∥X∥x ̸= ∅, ∥X∥y ̸= ∅, and ∥X∥x ∩∥X∥y ̸= ∅, more pre-
cisely both (x′&y′)x and (x′&y′)y hold in M ′, i.e. the plasmodium can move
from neighbours of y to x and it can move from neighbours of x to y;
• M ′ |= Some x are y iff y /∈∥X∥x and x /∈∥X∥y, more precisely neither (x′&y′)x
nor (x′&y′)y hold in M ′, i.e. the plasmodium cannot move from neighbours of y
to x and it cannot move from neighbours of x to y;
• M ′ |= No x are y iff y ∈∥X∥x or x ∈∥X∥y, more precisely (x′&y′)x or (x′&y′)y
hold in M ′, i.e. the plasmodium can move from neighbours of y to x or it can
move from neighbours of x to y;
• M ′ |= Some x are not y iff y /∈∥X∥x or x /∈∥X∥y, more precisely (x′&y′)x or
(x′&y′)y do not hold in M ′, i.e. the plasmodium cannot move from neighbours
of y to x or it cannot move from neighbours of x to y;
• M ′ |= p ∧q iff M ′ |= p and M ′ |= q;
• M ′ |= p ∨q iff M ′ |= p or M ′ |= q;
• M ′ |= ¬p iff it is false that M ′ |= p.
Proposition 7.7 The performative syllogistic is sound and complete in M ′.
⊓⊔

266
7
Syllogistic Systems of Swarm Propagation
Fig. 7.6 The Physarum diagrams for premises of performative syllogisms. Strings of the form
(x′&y′)x mean that in cells x′ and y′ there are neighbours A for x such that Ax, i.e. (x′&y′) is a
metavariable in (x′&y′)x that is used to denote all attractants of x′ and y′ which are neighbours for
the attractant of x, see [5]

7.2 Spatial Diagrams for Syllogistic Propositions
267
Fig. 7.7 The Physarum diagrams for performative syllogisms with true conclusions, see [5]

268
7
Syllogistic Systems of Swarm Propagation
This syllogistic describes the logic of plasmodium propagation in all possible
directions. For the implementation of this syllogistic we do not need repellents. It is
a natural system.
7.3
Syllogistic System for the Parasite Propagation
Now, let us show that there is a group behaviour which satisﬁes only the lateral acti-
vation. So, it can be formalized just in the way of performative/synthetic syllogistic.
This group behaviour can be exempliﬁed by a parasite propagation.
As we remember, the basic acts of any swarm are as follows: (i) Direction: the
swarm moves towards the attractant; (ii) Fuse: the two parts of swarm fuse after
meeting the same attractant; (iii) Split: the swarm splits in front of many attractants.
The same acts are observed in the behaviour of Schistosomatidae cercariae (see
Fig. 7.8) and many other parasites. The difference is just in different attractants: for
example, plasmodia are attracted by nutrients and cercariae are attracted by fatty
acids of bird or human skin.
Syllogistically, we can model the behaviour of collectives of the genus Trichobil-
harzia Skrjabin and Zakharov, 1920 (Schistosomatidae Stiles and Hassall, 1898) and
Fig. 7.8 The stimulation of the following operations in cercariae motions: a the fusion of cercariae
collectives, b the multiplication of cercariae collective, where the human beings are attractants, see
[7]

7.3 Syllogistic System for the Parasite Propagation
269
the behaviour of many other parasites, as well. This research was made together with
Ludmila Akimova. About chemotaxis of parasites, please see [27–30].
Schistosomatidae have been studied recently because of cercarial dermatitis which
they cause in humans by the secretion of penetration glands. Notice that the cercaria
begins the incorporation into the human skin approximately in 8 seconds (the range
from 0 to 80 s) just after ﬁrst contacts [31]. The process of full penetration into the
skin takes about 4 min (the range from 83 s till 13 min 37 s). In human kids, the
cercariae can be brought by the venous blood into the lungs, causing hemorrhages
and inﬂammations [32]. Many other complications can come because of repeated
infestations [32].
The meaning of the behaviour of parasites such as cercariae consists in the propa-
gation of their collectives in all possible directions in looking for hosts and then their
further propagation according to their life cycle. That behaviour is concurrent and not
linear (it continuously splits and fuses). In this system, attractants for parasites are
considered syllogistic letters. Any two neighbour attractants which can be immedi-
ately reached by the one collective of parasites are considered a syllogistic string that
is true if both attractants are occupied by parasites and false otherwise. The good
science-ﬁction example of the propagation of parasites is presented by the movie
World War Z (2013) directed by Marc Forster. Zombies in this movie are attracted
by the chemotaxis from able-bodied humans, sounds and motions, which causes
the propagation of zombies in all possible directions. Cercariae are attracted by the
chemotaxis from a skin of potential hosts, turbulence of water and lights. Notice that
the syllogistic system for modelling the propagation of parasites is proposed by me
for the ﬁrst time.
7.3.1
Trichobilharzia szidati (Diginea: Schistosomatidae)
and Their Life Cycle
All representatives of subclass Digenea Carus, 1863 (Platyhelminthes: Trematoda)
including Trichobilharzia szidati are endoparasites of animals. Their life cycle has
the form of heterogony: there are amphimictic and parthenogenetic stages. At these
stages, digeneans have different outward, different ways of reproduction and different
adaptation to different speciﬁc and incompetent hosts. The majority of them have the
life cycle with participation of three hosts: intermediate, additional (metacercarial)
and ﬁnal. Molluscs are always the ﬁrst intermediate hosts, while different classes of
vertebrate animals are ﬁnal hosts.
Amongdigeneans,thereareparasitesbelongingtothefamilyofSchistosomatidae,
which have adapted to parasitizing in the circulatory system of vertebrate animals.
This family includes the following three subfamilies: Schistosomatinae Stiles and
Hassall, 1898, they parasitize a variety of birds and mammals, including human
beings; Bilharziellinae Price, 1929 and Gigantobilharziinae Mehra, 1940, they par-

270
7
Syllogistic Systems of Swarm Propagation
Fig. 7.9 The life cycle of Trichobilharzia regenti: a mature worms lay the eggs in the nasal mucosa
of ducks, then the eggs get to water and from these eggs miracidia hatch; b miracidia infect the
intermediate hosts; c from these hosts cercariae are released; d they penetrate the skin of a speciﬁc
host or e the skin of an incompetent mammalian host such as human being (from [33]), see [7]
asitize birds. Schistosomatidae can penetrate the human skin, where they perish and,
therefore, invoke allergic dermatitis.
The life cycle of all representatives of the family Schistosomatidae is identical
(see Fig. 7.9). Its members have the following two free-swimming stages: miracidia
and cercariae, which actively search for their hosts (intermediate and ﬁnal, respec-
tively). Miracidial and cercarial host-ﬁnding is initiated mainly by response to some
gravitational, light and chemical attractants.
7.3.2
Miracidia (Genus Trichobilharzia): Morphology
and Behaviour
Miracidia are free-swimming larval stage (Fig. 7.10). Their body surface is covered
with four rows of epithelial plates that carry a multitude of cilia involved in active
motions of miracidia (Fig. 7.10b). The anterior part of the body contains terminal
openings of the following penetration unicellular glands: two cells of apical glands
and two cells of lateral glands. The posterior part of the body contains clusters of
germ cells from which daughter sporosysts are formed subsequently. Miracidia lack
any digestive system and they cannot feed.
Miracidia of Trichobilharzia szidati [34] hatch from eggs within a short
time 5–10 min. In order to survive, miracidia must infect a snail host within 20 h at
24 ◦C before they die [34]. The positive photo- and negative geotactic orientation is

7.3 Syllogistic System for the Parasite Propagation
271
Fig. 7.10 The morphology of miracidia. a The general morphology of Trichobilharzia szidati (from
[34]); b the general morphology of Trichobilharzia regenti (left) and the arrangement of ciliated
plates (right), scale bar = 25 mm (from [33]), see [7]
an adaptation to reach the preferred habitats of their host-snail species [35–39]. Also,
it is now conﬁrmed that miracidia are attracted by some chemical host signals [34,
40–42]. Snail-hosts release various secreted/excreted products into water. Miracidia
are activated by the macromolecular components of these products, which consist of
glycoproteins larger than 30 kDa, termed “miracidia attracting glycoproteins” [43].
These glycoproteins produced by different species of snails have similar peptide-
based, but differ by saccharide component. Miracidia can differentiate between
these glycosylation patterns in order to ﬁnd and infect mainly speciﬁc snail species
[43, 44]. Thus, the chemical cues secreted by the freshwater gastropod Lymnaea stag-
nalis stimulate behavioural responses of Trichobilharzia szidati miracidia. In other
words, a miracidium moves towards an appropriate chemical signal. Other kinds of
attractants for miracidia are presented by light (there is a positive phototaxis) and
gravitation (negative geotaxis). We will designate all miracidian attractants by syl-
logistic letters Sm1, Sm2, …, Smn, Pm1, Pm2, …, Pmn, Mm1, Mm2, …, Mmn. They can
differ by their power and intensity.
7.3.3
Cercariae (Genus Trichobilharzia): Morphology and
Behaviour
Cercariae are free-swimming larvae of pubertal generation parasitizing vertebrate
animals. Their length is about 1.0 mm. They are capable to insinuate into the skin of

272
7
Syllogistic Systems of Swarm Propagation
Fig. 7.11 The appearance of Trichobilharzia szidati. A detection place: the lake of Naroch (the
Minsk region, the Mjadelsky destrict, Belarus). Lymnaea stagnalis is an intermediate host. By
courtesy of Ludmila Akimova, see [7]
human being who is for them an incompetent host. As a result, they cause an allergic
reaction, the so-called cercarial dermatitis. This term was proposed by Cort [45],
who for the ﬁrst time correlated this disease with molluscs of certain kinds, and then
with cercariae.
Cercariae of the genus Trichobilharzia belong to the bunch of furcocercariae,
their posterior tail part consists of two branches (furcae), and the length of furca
is approximately a half of length of tail. Even in a small zoom its pigmented eye-
spots are well visible. The cercarial body is translucent. During motion it is strongly
reduced, receiving various forms (Fig. 7.11).
All European species of Trichobilharzia possess the ﬁve pairs of penetration
glands (Fig. 7.12). The two pairs are presented by circumacetabular glands located
round the ventral sucker, and the three other by postacetabular glands located sequen-
tially one after another below. The secreta of penetration glands helps larvae to break
a dermal barrier of vertebrate hosts.
Cercariae of the genus Trichobilharzia after leaving a mollusc actively swimming
in the water for an hour. Such an active behaviour of larvae after leaving a mollusc
provides a cercarial distribution in the water space. Then cercariae pass to a passive
behaviour. Free-swimming cercariae need to insinuate into a ﬁnal host during the
limited time interval (1–1.5 days at temperature 24 ◦C) [34]. In a resting state,
cercariae are attached to a vascular wall or on a water ﬁlm by means of acetabulum.

7.3 Syllogistic System for the Parasite Propagation
273
Fig. 7.12 The constitution
of Trichobilharzia szidati. a
The schematic structure of
cercaria (from [46]), b The
photo of cercaria. 1.
Penetration organ, 2.
Penetration gland ducts, 3
Pigmented eye-spots, 4.
Ventral sucker, 5. Penetration
glands (5 pairs), 6. Tail stem,
7. Furcae. By courtesy of
Ludmila Akimova, see [7]
Active motions are characteristic only by the strong shaking of pot or by the water
interfusion.
The cercarial behaviour of bird schistosomes (family Schistosomatidae) is well
studied due to representatives of the genus Trichobilharzia [33]. Their behaviour
is characterized by the speciﬁc taxis implying their looking for speciﬁc hosts, their
afﬁxion to a surface of host body as well as their incorporation into a host cutaneous
covering and their penetration into a circulatory system, where a parasite reaches
sexual maturity. Thus, taxis is presented by an enough large family of attractants:
larvae of digeneans of Trichobilharzia possess a positive phototaxis, negative geo-
taxis, chemotaxis, and also actively react to turbulence of water [47].
Larvae have chemoreceptors which receive appropriate chemical signals proceed-
ing from a skin of potential host. The similarity of compound of fatty acids of bird
and human skin leads to that cercariae equally react to the bird and human appear-
ance in water: they move in their direction, and then they are attached to the skin
and begin penetration into it [48]. In experimental researches, it has been shown that
any attachment of cercariae of Trichobilharzia to the skin is stimulated by choles-
terol and ceramides, and incorporation into the skin by linoleic and linolenic acids,
all these materials are present on the skin of both the bird and the human being
[31, 49]. Thereby surface lipids of human skin invoke higher frequency of cercarial
incorporations into the skin, than surface lipids of birds [48].
Hence, the chemotaxis from a skin of potential hosts, the positive phototaxis, the
negative geotaxis and the water turbulence should be considered cercarial attractants,
which will be designated by Sc1, Sc2, …, Scn, Pc1, Pc2, …, Pcn, Mc1, Mc2, …, Mcn.

274
7
Syllogistic Systems of Swarm Propagation
7.3.4
Syllogistic System for the Propagation
of Schistosomatidae
So, in order to formalize the propagation of Schistosomatidae, we will use the per-
formative or synthetic syllogistic.
Deﬁnition 7.4 The alphabet of performative-syllogistic system for modelling the
propagation of Schistosomatidae contains
• as descriptive signs the syllogistic letters Sx, Px, Mx, …, where x ∈{m, c};
• as logical-semantic signs the syllogistic connectives
– at, et, it, ot at time t = 0, 1, . . ., n, . . .,
– a∞, e∞, i∞, o∞for inﬁnite time;
• and the propositional connectives ¬, ∨, ∧, ⇒.
Simple propositions are deﬁned as follows: Sx ⋆Px, where ⋆∈{at, et, it, ot, a∞,
e∞, i∞, o∞}. All other propositions are deﬁned thus: (i) each simple proposition is a
proposition, (ii) if X, Y are propositions, then ¬X, ¬Y, X ⋆Y, where ⋆∈{∨, ∧, ⇒},
are propositions, too.
Syllogistic letters Sm, Pm, Mm, … are interpreted as attractants for miracidia as
follows: a data point Sm is evaluated as empty if and only if an appropriate attractant
for miracidia denoted by Sm is not occupied by any miracidium. Syllogistic letters
Sc, Pc, Mc, …are interpreted as attractants for cercariae in the following manner: an
item Sc is evaluated as empty if and only if an appropriate attractant for cercariae
denoted by Sc is not occupied by any cercaria.
Let us deﬁne syllogistic strings of the form Sm Pm and Sc Pc at time t with the
following notation: ‘Sm ist Pm’ and ‘Sc ist Pc,’ and with the following meaning:
• Sm Pm at time t = 0, 1, 2, . . . is true if and only if Sm and Pm are cells occupied
by miracidia at t and there is a path between Sm and Pm and this path consists of
cells also occupied by miracidia at t (i.e. both Sm and Pm are not empty at t and
between them there is a path of non-empty cells), otherwise Sm Pm is false (e.g. in
Fig. 7.13 there are paths S4S5, S4S10 at t = 0);
• Sc Pc at t is true if and only if both Sc and Pc are not empty cells at t and between
them there is a path of non-empty cells at t, otherwise Sc Pc is false.
Now, we deﬁne syllogistic propositions ‘All … are …’, ‘No … are …’, ‘Some …
are …’, ‘Some … are not …’ in the non-Aristotelian way to construct a syllogistic of
propagation.Themeaningoftheproposition‘All S are P’isthatbetweenpoints S and
P we observe a propagation in all possible directions. The meaning of the proposition
‘Some S are P’ is that between points S and P we cannot observe a propagation in
all possible directions and the propagation is just contingent and casual. So, while
in the Aristotelian syllogistic the propositions ‘All … are …’ and ‘No … are …’
are contrary, in the syllogistic of propagation the propositions ‘All … are …’ and
‘Some … are …’ are contrary. Other propositions are understood conventionally:

7.3 Syllogistic System for the Parasite Propagation
275
‘No … are …’ := It is false that ‘Some … are …’; ‘Some … are not …’ := It is
false that ‘All … are …’. The point of this non-Aristotelian interpretation is that we
cannot exclude propagation at all. There are always some forms of propagation from
massive-parallel (when ‘All … are …’ is true) to casual (when ‘Some … are …’ is
true).
Thus,usingthedeﬁnitionofsyllogisticstrings,wecandeﬁnesimpleperformative-
syllogistic propositions as follows:
1. ‘All Sm are Pm at time t’ (Smat Pm): there is a string AmSm at time t and for
any Am which is a neighbour for Sm or Pm, there are strings AmSm and Am Pm
at t. This means that we have a massive-parallel occupation of the region at t,
where the cells Sm and Pm are located, i.e. the propagation holds in all possible
directions.
2. ‘All Sc are Pc at time t’ (Scat Pc): there is a string AcSc at time t and for any Ac
which is a neighbour for Sc or Pc, there are strings AcSc and Ac Pc at t.
3. ‘Some Sm are Pm at time t’ (Smit Pm): for any Am which is a neighbour for Sm
or Pm at t, there are no strings AmSm and Am Pm. This means that the collective
of miracidia cannot reach Sm from Pm or Pm from Sm immediately at t, but
it does not mean that there are no propagating miracidia. Some forms of their
propagation ever exist.
4. ‘Some Sc are Pc at time t’ (Scit Pc): for any Ac which is a neighbour for Sc or Pc
at t, there are no strings AcSc and Ac Pc.
5. ‘No Sm are Pm at time t’ (Smet Pm): there exists Am at time t which is a neighbour
for Sm or Pm such that there is a string AmSm or there is a string Am Pm. This
means that the collective of miracidia occupies Sm or Pm, but surely not the
whole region at time t, where the cells Sm and Pm are located.
6. ‘No Sc are Pc at time t’ (Scet Pc): there exists Ac at time t which is a neighbour
for Sc or Pc such that there is a string AcSc or there is a string Ac Pc.
7. ‘Some Sm are not Pm at time t’ (Smot Pm): for any Am which is a neighbour
for Sm or Pm at time t there is no string AmSm or there exists Am which is a
neighbour for Sm and Pm such that there is no string AmSm or there is no string
Am Pm. This means that at time t the collective of miracidia does not occupy Sm
or there is a neighbour cell which is not connected with Sm or Pm by the same
propagated collective of miracidia.
8. ‘Some Sc are not Pc at time t’ (Scot Pc): for any Ac which is a neighbour for Sc
or Pc at time t there is no string AcSc or there exists Ac which is a neighbour for
Sc or Pc such that there is no string AcSc or there is no string Ac Pc.
Formally:
Smat Pm := (∃Am(Am ist Sm) ∧(∀Am(Am ist Sm ∧Am ist Pm)));
(7.28)
Scat Pc := (∃Ac(Ac ist Sc) ∧(∀Ac(Ac ist Sc ∧Ac ist Pc)));
(7.29)
Smit Pm := ∀Am(¬(Am ist Sm) ∧¬(Am ist Pm));
(7.30)

276
7
Syllogistic Systems of Swarm Propagation
Scit Pc := ∀Ac(¬(Ac ist Sc) ∧¬(Ac ist Pc));
(7.31)
Smet Pm := ¬∀Am(¬(Am ist Sm) ∧¬(Am ist Pm)), i.e.
∃Am(Am ist Sm ∨Am ist Pm).
(7.32)
Scet Pc := ¬∀Ac(¬(Ac ist Sc) ∧¬(Ac ist Pc)), i.e.
∃Ac(Ac ist Sc ∨Ac ist Pc).
(7.33)
Smot Pm := ¬(∃Am(Am ist Sm) ∨(∀Am(Am ist Pm ∧Am ist Sm))),
i.e.(∀Am¬(Am ist Sm) ∧∃Am(¬(Am ist Pm) ∨¬(Am ist Sm)));
(7.34)
Scot Pc := ¬(∃Ac(Ac ist Sc) ∨(∀Ac(Ac ist Pc ∧Ac ist Sc))),
i.e.(∀Ac¬(Ac ist Sc) ∧∃Ac(¬(Ac ist Pc) ∨¬(Ac ist Sc)));
(7.35)
Notably, this system is essentially non-Aristotelian (i.e. performative or syn-
thetic), in particular Smat Pm ⇒Smet Pm; Smit Pm ⇒Smot Pm; Smat Pm ⇒Pmat Sm;
Smet Pm ⇒Pmet Sm; Smit Pm ⇒Pmit Sm; Smot Pm ⇒Pmot Sm.
The topology of attractants changes permanently (see Fig. 7.13), because dif-
ferent attractants become occupied in due course. Therefore for different time
t = 0, 1, 2, . . ., we observe different true syllogistic propositions (see Fig. 7.13).
Also, we can assume that the attractants can move at t = 0, 1, 2. . . Let us postulate
that their motions at different time are limited by the following rules, where t + 1
means the next step of life cycle:
Smat Pm ⇒Smet+1Pm.
(7.36)
Scat Pc ⇒Scet+1Pc.
(7.37)
From this we have
Smit+1Pm ⇒Smot Pm.
(7.38)
Scit+1Pc ⇒Scot Pc.
(7.39)
Attractants for miracidia and cercariae are different, but they live in the same lake.
We can postulate that if the whole region is occupied by miracidia (cercariae) at
time t, then surely the part of this region is occupied by cercariae (miracidia) at time
t + 1. So, the propagation of collectives of miracidia at t causes the propagation of
collectives of cercariae at t + 1:
Smat Pm ⇒Scet+1Pc.
(7.40)
Smit+1Pm ⇒Scot Pc.
(7.41)

7.3 Syllogistic System for the Parasite Propagation
277
(a) t = 0; the four attractants denoted by S4,
S5, S9, S10 are occupied by the parasites
(b) t = 1; the seven attractants denoted by
S4, S5, S6, S7, S8, S9, S10 are occupied by the
parasites
(c) t = 2; the eleven attractants denoted by
S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11 are
occupied by the parasites
Fig. 7.13 Example of propagation of parasites. First of all, parasites are located in the center of
pictures (a), (b), (c). Attractants which are not occupied by parasites are denoted by white circles.
Attractants which are occupied by parasites are denoted by black circles. Each attractant is a center
of suitable Voronoi cell. The radius of Voronoi cell is a maximal distance of power to attract parasites
in one direction. At time t = 0, 1, 2, different syllogistic propositions are true: a S7i0S11, S11i0S7,
S1i0S3, S3i0S1, S1e0S10, S10e0S1, S1e0S9, S9e0S1, S1e0S4, S4e0S1, etc.; b S1i1S11, S11i1S1, S2o1S6,
S6o1S2, etc.; c S7a2S11, S11a2S7, S1a2S3, S3a2S1, S1a2S10, S10a2S1, S1a2S9, S9a2S1, S1a2S4,
S4a2S1, etc., see [7]

278
7
Syllogistic Systems of Swarm Propagation
Furthermore, the propagation of collectives of cercariae at t causes the propagation
of collectives of miracidia at t + 1:
Scat Pc ⇒Smet+1Pm.
(7.42)
Scit+1Pc ⇒Smot Pm.
(7.43)
Now, we can deﬁne simple syllogistic propositions for inﬁnite time: Sx∞P :=
limt→∞Sxt P, where x ∈{a, e, i, o}. The informal meaning of these propositions
is that we put forward syllogistic propositions about the whole one life cycle of
Schistosomatidae in the same lake. So, we may generalize Eqs. (7.36)–(7.43) in the
following way:
Sma∞Pm ⇒∃t.Smat Pm;
(7.44)
Sca∞Pc ⇒∃t.Scat Pc;
(7.45)
Sma∞Pm ⇒∃t.Scat Pc;
(7.46)
Sca∞Pc ⇒∃t.Smat Pm;
(7.47)
Smi∞Pm ⇒∀t.Smit Pm;
(7.48)
Sci∞Pc ⇒∀t.Scit Pc;
(7.49)
Smi∞Pm ⇒∀t.Scit Pc;
(7.50)
Sci∞Pc ⇒∀t.Smit Pm.
(7.51)
Formula (7.44) means that if the whole region is occupied by miracidia for one life
cycle of Schistosomatidae, then there exists time t such that the whole region is
occupied by miracidia. Formula (7.45) means that if the whole region is occupied by
cercariae for one life cycle of Schistosomatidae, then there exists time t such that the
whole region is occupied by cercariae. Formula (7.46) means that if the whole region
is occupied by miracidia for one life cycle of Schistosomatidae, then there exists time
t such that the whole region is occupied by cercariae. Formula (7.47) means that if
the whole region is occupied by cercariae for one life cycle of Schistosomatidae,
then there exists time t such that the whole region is occupied by miracidia.
Formula (7.48) means that if there is just a casual propagation of miracidia for
one life cycle of Schistosomatidae, then for all time t of this life cycle there is just a
casual propagation of miracidia. Formula (7.49) means that if there is just a casual
propagation of cercariae for one life cycle of Schistosomatidae, then for all time t of
thislifecyclethereisjustacasualpropagationofcercariae.Formula(7.50)meansthat
if there is just a casual propagation of miracidia for one life cycle of Schistosomatidae,
then for all time t of this life cycle there is just a casual propagation of cercariae.
Formula (7.51) means that if there is just a casual propagation of cercariae for one

7.3 Syllogistic System for the Parasite Propagation
279
life cycle of Schistosomatidae, then for all time t of this life cycle there is just a
casual propagation of miracidia.
Other axioms are as follows (for x ∈{m, c}):
Sxat Px ⇒Sxet Px;
Sxa∞Px ⇒Sxe∞Px;
(7.52)
Sxat Px ⇒Pxat Sx;
Sxa∞Px ⇒Pxa∞Sx;
(7.53)
Sxit Px ⇒Pxit Sx;
Sxi∞Px ⇒Pxi∞Sx;
(7.54)
Sxat Mx ⇒Sxet Px;
Sxa∞Mx ⇒Sxe∞Px;
(7.55)
Mxat Px ⇒Sxet Px;
Mxa∞Px ⇒Sxe∞Px;
(7.56)
(Mxat Px ∧Sxat Mx) ⇒Sxat Px;
(7.57)
(Mxit Px ∧Sxit Mx) ⇒Sxit Px;
(7.58)
(Mxa∞Px ∧Sxa∞Mx) ⇒Sxa∞Px;
(7.59)
(Mxi∞Px ∧Sxi∞Mx) ⇒Sxi∞Px.
(7.60)
Some basic formal properties of that axiomatic system closed over axioms (7.28)–
(7.35) and (7.52)–(7.60), where a, e, i, o do not depend on time, are considered in
Sects. 7.1.1 and 7.2.3. Probabilistic semantics for the time-depended version of that
system for the slime mould behaviour is proposed in Sect. 6.2.4.
Notice that formulas (7.58) and (7.60) are axioms of the syllogistic system of
propagation, while they are not valid in the Aristotelian system. Indeed, (Mxit Px ∧
Sxit Mx) ⇒Sxit Px means that
[∀Ax(¬(Ax ist Mx) ∧¬(Ax ist Px)) ∧∀Ax(¬(Ax ist Sx) ∧¬(Ax ist Mx))]
⇒∀Ax(¬(Ax ist Sx) ∧¬(Ax ist Px)),
the latter formula is valid.
In this chapter, I have constructed the syllogistic system for the swarm propa-
gation on the example of Schistosomatidae. In syllogistics for the explication of
propagations, the inverse relations hold true for all syllogistic connectives:
Sat P ⇒Pat S;
Set P ⇒Pet S;
Sit P ⇒Pit S;

280
7
Syllogistic Systems of Swarm Propagation
Sot P ⇒Pot S.
It is inferred from deﬁnitions (7.28)–(7.35). These properties ﬁx propagations in all
possible directions. Such propagations correspond to lateral activation and can be
described only by the performative/synthetic syllogistic. It is a good example that
there is possible a group behaviour that cannot be laterally inhibited, such as the
behaviour of Schistosomatidae.
References
1. Schumann, A.: Two squares of opposition: for analytic and synthetic propositions. Bull. Sect.
Log. 40(3–4), 165–178 (2011)
2. Schumann, A.: On two squares of opposition: the Lesniewski’s style formalization of synthetic
propositions. Acta Anal. 28, 71–93 (2013)
3. Schumann, A.: Physarum syllogistic L-systems. In: Future Computing 2014, The Sixth Inter-
national Conference on Future Computational Technologies and Applications. ThinkMind
(2014)
4. Schumann, A.: Physarum polycephalum syllogistic L-systems and Judaic roots of uncon-
ventional computing. Stud. Log. Gramm. Rhetor. 44(1), 181–201 (2016). https://doi.org/10.
1515/slgr-2016-0011
5. Schumann, A.: Syllogistic versions of go games on Physarum. In: Adamatzky, A. (ed.)
Advances in Physarum Machines: Sensing and Computing with Slime Mould, pp. 651–685.
Springer International Publishing, Cham (2016)
6. Schumann, A., Adamatzky, A.: Physarum polycephalum diagrams for syllogistic systems.
IfCoLog J. Log. Appl. 2(1), 35–68 (2015)
7. Schumann, A., Akimova, L.: Syllogistic system for the propagation of parasites. The case of
Schistosomatidae (Trematoda: Digenea). Stud. Log. Gramm. Rhetor. 40(53), 303–319 (2015)
8. Schumann, A., Wole´nski, J.: Two squares of oppositions and their applications in pairwise
comparisons analysis. Fundam. Inf. 144(3–4), 241–254 (2016)
9. Le´sniewski, S.: O podstawach matematyki. Przegl¸and Filozoﬁczny 30, 31, 32, 33, 34, 164–
206, 261–291, 60–101, 77–105, 142–170 (1927–1931)
10. Le´sniewski, S.: Über die Grundlagen der Ontologie. Comptes Rendus des Séances de la
Société des Sciences et des Lettres de Varsovie, Classe III(23), 111–132 (1930)
11. Słupecki, J.: St. Le´sniewski’s calculus of classes. Stud. Log. 3, 7–71 (1953)
12. Łukasiewicz, J.: Aristotle’s Syllogistic from the Standpoint of Modern Formal Logic. Garland
(1951)
13. Boche´nski, I.M.: Formale Logik. Karl Alber, Freiburg-München (1956)
14. Ross, W.D. (ed.): The Works of Aristotle, Volume 1: Logic. Oxford University Press (1928)
15. Rose, L.E.: Aristotle’s Syllogistic. Charles C. Thomas Publisher (1968)
16. Weinberg, J.R.: An Examination of Logical Positivism. Mason Press (2007)
17. Sneed, J.: The Logical Structure of Mathematical Physics. D. Reidel Publishing Company,
Dordrecht (1971)
18. Zinov’ev, A.: Logical Physics. Boston Studies in the Philosophy and History of Science,
Springer (1983)
19. Sakiyama, T., Gunji, Y.P.: The Müller-Lyer illusion in ant foraging. PLOS ONE 12(8), 1–12
(2013)
20. Jones, J.D.: Towards lateral inhibition and collective perception in unorganised non-neural
systems. In: Pancerz, K., Zaitseva, E. (eds.) Computational Intelligence, Medicine and Biol-
ogy. Selected Links. Springer, (2015)

References
281
21. Schumann, A., Fris, V.: Swarm intelligence among humans—the case of alcoholics. In: Pro-
ceedings of the 10th International Joint Conference on Biomedical Engineering Systems and
Technologies—Volume 4: BIOSIGNALS (BIOSTEC 2017), pp. 17–25. ScitePress (2017)
22. Schumann, A.: Towards context-based concurrent formal theories. Parallel Process. Lett. 25,
1540,008 (2015)
23. Smith, R.: Completeness of an ecthetic syllogistic. Notre Dame J. Form. Log. 24(2), 224–232
(1983)
24. Carroll, L.: The Game of Logic. Macmillan and Co., London (1886)
25. Carroll, L.: Symbolic Logic. Part I. Elementary. Macmillan and Co., London (1897)
26. Adamatzky, A.: Developing proximity graphs by Physarum polycephalum: does the plasmod-
ium follow the Toussaint hierarcy? Parallel Process. Lett. 19, 105 (2009)
27. Feiler, W., Haas, W.: Trichobilharzia ocellata: chemical stimuli of duck skin for cercarial
attachment. Parasitology 96, 507–517 (1988)
28. Haas, W.: Host ﬁnding mechanisms–a physiological effect. In: Mehlhorn, Y. (ed.) Biology,
pp. 382–383. Encyclopedic Reference of Parasitology, Structure, Function (1988)
29. Smyth, J.D., Halton, D.W.: The Physiology of Trematodes, 2nd edn. Cambridge University
Press, Cambridge (1983)
30. Haas, W., Haberl, B.: Host Recognition by Trematode Miracidia and Cercariae, pp. 197–227.
CRC Press, Boca Raton, Florida (1997)
31. Haas, W., Haeberlein, S.: Penetration of cercariae into the living human skin: Schistosoma
mansoni vs. Trichobilharzia szidati. Parasitol. Res. 105(4), 1061–1066 (2009)
32. Bear, S.A., Voronin, M.V.: Cercariae in Urbanized Ecosystems. Nauka, Moskow (2007). (in
Russian)
33. Horák, P., Kolárová, L., Adema, C.M.: Biology of the schistosome genus Trichobilharzia.
Adv. Parasitol. 52, 155–233 (2002)
34. Saladin, K.S.: Behavioral parasitology and perspectives on miracidial host-ﬁnding. Z. Para-
sitenkd. 60(3), 197–210 (1979)
35. Haas, W.: Parasitic worms: strategies of host ﬁnding, recognition and invasion. Zoology 106,
349–364 (2003)
36. Haas, W., Haberl, B., Kalbe, M., Körner, M.: Snail-host-ﬁnding by miracidia and cercariae:
chemical host cues. Parasitol. Today 11, 468–472 (1995)
37. Hertel, J., Holweg, A., Haberl, B., Kalbe, M., Haas, W.: Snail odour-clouds: spreading and
contribution to the transmission success of Trichobilharzia ocellata (trematoda, digenea)
miracidia. Oecologia 147, 173–180 (2006)
38. Takahashi, T., Mori, K., Shigeta, Y.: Phototactic, thermotactic and geotactic responses of
miracidia of Schistosoma japonicum. Jpn. J. Parasitol. 110, 686–691 (1961)
39. Podhorsky, M., Huzova, Z., Mikes, L., Horak, P.: Cercarial dimensions and surface structures
as a tool for species determination of Trichobilharzia spp. Acta Parasitol. 50, 343–365 (2009)
40. MacInnis, A.J.: How parasites ﬁnd their hosts: some thoughts on the inception of host-parasite
integration. In: Cennedy, C. (ed.) Ecological Aspects of Parasitology, pp. 3–20. North-Holand,
Amsterdam (1976)
41. Sukhdeo, M.V.K., Mettrick, D.F.: Parasite behaviour: understanding platyhelminth responses.
Adv. Parasitol. 26, 73–144 (1987)
42. Sukhdeo, M.V.K., Sukhdeo, S.C.: Trematode behaviours and the perceptual worlds of para-
sites. Can. J. Zool. 82, 292–315 (2004)
43. Kalbe, M., Haberl, B., Haas, W.: Finding of the snail host by Fasciola hepatica and Trichobil-
harzia ocellata: compound analysis of ‘miracidia attracting glycoprotein’. Exp. Parasitol. 96,
231–242 (2000)
44. Kock, S.: Investigations on intermediate host speciﬁcity help to elucidate the taxonomic status
of Trichobilharzia ocellata (digenea: Schistosomatidae). Parasitology 123, 67–70 (2001)
45. Cort, W.W.: Schistosome dermatitis in the United States (Michigan). J. Am. Med. Assoc. 90,
1027–1029 (1928)
46. Ginetsinskaya, T.A.: Trematodes, Their Life Cycles, Biology and Evolution (in Russian).
Nauka, Leningrad (1968)

282
7
Syllogistic Systems of Swarm Propagation
47. Haas, W.: Physiological analysis of cercarial behavior. J. Parasitol. 78, 243–255 (1992)
48. Haas, W., Roemer, A.: Invasion of the vertebrate skin by cercariae of Trichobilharzia ocellata:
penetration processes and stimulating host signals. Parasitol. Res. 84(10), 787–795 (1998)
49. Mikes, L., Zìdková, L., Kasný, M., Dvorák, J., Horák, P.: In vitro stimulation of penetration
gland emptying by Trichobilharzia szidati and T. regenti (schistosomatidae) cercariae. Quan-
titative collection and partial characterization of the products. Parasitol. Res. 96(4), 230–241
(2005)

Chapter 8
Context-Based Games of Swarms
The behaviour of Schistosomatidae cannot realize the lateral inhibition. As a con-
sequence, it cannot realize different pictures of reality depending on a context. The
point is that the parasites try to be propagated in all possible directions, no matter
what conditions are at the moment. Nevertheless, true swarms, such as the ant nests or
plasmodia of Physarum polycephalum, react differently under different conditions.
It means that they can produce different pictures of reality or even compete with their
own kind. The latter situation of their competitions for the same food allows us to
deﬁne their behaviour as a game. In this chapter, I will deﬁne a bio-inspired game
theory. See [1–10].
8.1
Bio-inspired Game Theory
8.1.1
Symbolic Values and Non-additive Measures
Let us start with regarding presuppositions of classical game theory. The majority
of expert systems used to predict behaviours appeal to appropriate statistical and
econometric tools [11–14]. In their possible applications they are extremely limited
by some fundamental assumptions about the characters of material laws. First of all, it
is assumed that the system of the material universe consists of primary bodies (atoms)
and their combinations and relationships described by mathematical equalities, in
particular it is supposed that each atom bears its own separate and independent effect
so that the total state is being compounded of a number of separate effects detected
in the proceeding state. In other words, in order to explore the total state we should
present an appropriate proceeding state as a machine:
And in this matter the example of several bodies made by art was of great service to me:
for I recognize no difference between these and natural bodies beyond this, that the effects
of machines depend for the most part on the agency of certain instruments, which, as they
© Springer International Publishing AG, part of Springer Nature 2019
A. Schumann, Behaviourism in Studying Swarms: Logical Models of Sensing
and Motoring, Emergence, Complexity and Computation 33,
https://doi.org/10.1007/978-3-319-91542-5_8
283

284
8
Context-Based Games of Swarms
must bear some proportion to the hands of those who make them, are always so large that
their ﬁgures and motions can be seen; in place of which, the effects of natural bodies almost
always depend upon certain organs so minute as to escape our senses. And it is certain that
all the rules of mechanics belong also to physics, of which it is a part or species, [so that all
that is artiﬁcial is withal natural]: for it is not less natural for a clock, made of the requisite
number of wheels, to mark the hours, than for a tree, which has sprung from this or that seed,
to produce the fruit peculiar to it. Accordingly, just as those who are familiar with automata,
when they are informed of the use of a machine, and see some of its parts, easily infer from
these the way in which the others, that are not seen by them, are made; so from considering
the sensible effects and parts of natural bodies, I have essayed to determine the character of
their causes and insensible parts (René Descartes, Principles of Philosophy, 1644; translated
by John Veith).
René Descartes was one of the ﬁrst thinkers who have put forward the assumption
that wholes can be studied due to laws of connection between their individual parts
described my maths, i.e. wholes are subject to different laws in proportion to the dif-
ferencesoftheirpartsandtheseproportionscanbeanalyzedmathematically.Thisone
of the main presuppositions of mathematical tools in science is called measurability
and additivity of reality. Due to this assumption modern physics can have obtained all
its results. For discovering the material universe it has appealed to additive measures
such as mass, force, energy, temperature, etc. Economics and conventional game the-
ory try to continue this empiricist tradition and in statistical and econometric tools
they deal only with the measurable aspects of reality. They try to obtain additive
measures in economics and in studies of real intelligent behaviour, also.
Nevertheless, there is always the possibility that there are important variables of
economic systems which are unobservable and non-additive in principle. We should
understand that statistical and econometric methods can be rigorously applied in
economics just after the presupposition that the phenomena of our social world are
ruled by stable causal relations between variables. However, let us assume that we
have obtained a ﬁxed parameter model with values estimated in speciﬁc spatio-
temporal contexts. Can it be exportable to totally different contexts? Are real social
systems governed by stable causal mechanisms with atomistic and additive features?
In the 19th century there was a causal relation between power demand and good
and service consumption: the increase of good and service consumption has implied
the increase of power demand. But now this relation is untrue, because power demand
does not increase and good consumption does. Hence, the same causal relation was
true in the industrial society and false in the post-industrial society. In other words,
that fact shows that in real social systems there is no ergodicity. Recall that in case of
ergodicity we can describe a dynamical system which has the same behaviour aver-
aged over time as averaged over the space for all states. Therefore it is sophisticated
to ﬁnd out additive measures in economics at all.
One of the additive measures that have been widely applied in economies is money.
Due to money we can compare goods and services as well as capitals. Economic
capital is the term to describe already-produced goods or any asset that is used in
production of goods or services. There is also its part, ﬁnancial capital, to denote
money used to buy what is needed to provide services to the sector of the economy
upon which an appropriate operation is based. Money allows us to evaluate material

8.1 Bio-inspired Game Theory
285
welfare, goods, and services. Nevertheless, we can face non-additivity there too. The
matter is that some welfare is not additive. For example, two oil-paintings with the
same parameters can have so different surplus exchange values: they can become
cheap, expansive or precious.
Goods and services have a high dollar surplus exchange value if they are produced
as a part of symbolic capital [15, 16] which denotes a non-economic capital (such as
education, networking, power, publicity, image) allowing us to aid social exchange.
Economic capital consists of any resources which can be used for producing goods
or services to obtain proﬁt. Symbolic capital consists of cultural values of goods and
services which increase their surplus exchange values extremely.
The Karl Marx’s economic theory [17, 18] tried to describe causal connections of
industrial society that was concentrated on producing goods. But the modern society
is post-industrial and it is concentrated on producing services, where symbolic capital
plays more signiﬁcant role than it took place in the industrial society. According to
Marx, any society has the following two levels: (i) the base (relations of production,
relations of production forces) and (ii) superstructure (cultural, symbolic relations).
The superstructure is derivable from the base. In the industrial society there were not
enough places for symbolic capital. The transition from the feudal formation to the
capitalist one is, ﬁrst of all, a reduction of symbolic capital, its depreciation. Public
statuses, titles of noble families were not as important as the economic capitals.
The role of symbolic capital has mainly increased in the post-industrial society.
It is caused by a priority which services have over goods now in earning money
and obtaining proﬁts. In services there is always an appreciable share of symbolic
capital and symbolic values. In sausages or tooth-brushes there is no symbolic value
(as well as in other consumer goods), but if we take fashion shows or cinema there
is already nothing more than symbolic values. Accordingly, surplus values can be
so different. In the modern society the Marx’s scheme about the base domination
over the superstructure is not true. Nowadays the superstructure already determines
the base. Symbolic capital dominates over economic capital. Any development of
information technologies only strengthens this domination. Money and goods are
connected now with social exchanges mediated by information technologies. Such a
revaluation began to transform promptly all societies towards increasing the impor-
tance of publicity and openness. Any society with the higher role of symbolic capital
becomes transparent.
Symbolic values which are involved now in producing goods and services cannot
be additive measures. However, they can be studied within symbolic interactionism,
the theory developed since George Herbert Mead [19–21] and Herbert Blümer [22,
23]. They have stated that people act toward things based on symbolic meanings they
ascribe to those things. In turn, these meanings are derived from social interactions
and transformed through their interpretations. Symbolic meanings are deﬁned and
studied by qualitative research methods. Symbolic meanings have no equilibria in
the classical meaning, see examples in [24, 25]. About symbolic meanings, see [15,
16, 26].
Thus,inmathematicaltoolsofeconomicsandconventionalgametheoryweaccept
only phenomena with causal connections measured by additive measures. Neverthe-

286
8
Context-Based Games of Swarms
less, in the social world we deal with symbolic interactions studied by non-additive
labels (symbolic meanings or symbolic values). For accepting the variety of such
phenomena we should avoid additivity of basic labels.
In Chap. 6, I have shown that the swarm behaviour cannot be described by additive
measures. It means, on the one hand, we cannot use classical game theory built on
additive measures for simulating the swarm behaviour, but, on the other hand, the
bio-inspired game theory we are going to obtain can be used for describing symbolic
interactionism in modern societies in turn. A primitive kind of symbolic interaction
(a proto-symbolic interaction) takes place even among swarms. The point is that
swarms can be laterally inhibited or laterally activated and these conditions change
a proto-symbolic value of the item perceived by the swarm: (i) its proto-symbolic
value can be increased (the lateral inhibition effect); (ii) its proto-symbolic value can
be decreased (the lateral activation effect).
8.1.2
Basic Assumptions of Game Theory and Non-additivity
in Symbolic Interactions
Presuppositions of conventional probability theory, including the idea of additivity
(partition into mutually disjoint subsets), are continued in game theory, where the
human behaviour is understood as a step-by-step interaction of decision-makers for
own payoffs. It is supposed that each player has a certain objective called payoff and
takes actions deliberately in an attempt to achieve that objective. For this purpose,
each player takes into account knowledge or expectations of other decision-makers,
because payoffs of different players can stay in conﬂicts. So, the basic entity of game
theory is a player who may be interpreted as an individual or as a group of individuals.
A player is everyone who has an effect on others’ payoffs. However, we can ever
assume that a player participates in a symbolic interaction with others, when a payoff
is laterally inhibited or laterally activated (i.e. its proto-symbolic or symbolic value
is increased or decreased respectively). Later I will show that this proto-symbolic
or symbolic interaction can be evaluated by non-Archimedean probability measures
(see Chap. 6).
In game theory, possible actions of individual players are considered primitives
(logical atoms). Therefore we deal with a set ΩG of all strategies (actions available to
each player) in a game G such that ΩG has a partition into mutually disjoint subsets
E1, E2, …, where each Ei contains actions of player i, i = 1, 2, . . . Each member
⟨e1, e2, . . .⟩of a set E1 × E2 × . . . is an outcome of the game and it is associated
with payoffs ⟨a1, a2, . . .⟩, where ai is a payoff of player i after using a strategy ei,
i = 1, 2, . . . So, each player has own strategies and combinations with strategies of
others give payoffs. Thus, the number of players is ﬁxed and known to all parties. It
is the ﬁrst assumption of game theory, corresponding to the Descartes’ hypothesis of
additivity of labels in scientiﬁc investigations. We have mutually disjoint subsets E1,
E2 . . ., of ΩG and each player knows such a partition. In other words, each player

8.1 Bio-inspired Game Theory
287
chooses among two or more possible strategies and knows how each strategy chosen
by him/her or by another player determines the whole play.
Nevertheless, in symbolic interactions of human beings very often we face the
situations when we do not know all players (e.g. lobbyists in politic games can be
hidden), so we do not know an appropriate partition of ΩG and it is possible that we
do not know all strategies of ΩG as such. In this case we can appeal to sets with a
non-Archimedean ordering structure.
The second assumption of game theory, corresponding to the Descartes’ hypoth-
esis of additivity, is that all players are considered fully rational. It is understood as
follows:
1. Players know all the rules of the game, but it can appear that some rules change
during the game. In proto-symbolic interactions of swarms and in symbolic
interactions of humans all depends on players and (proto-)symbolic meanings
they produce within concrete interactions. For example, a swarm can be laterally
inhibited and laterally activated through the same game at different times and it
is caused just by a topology of payoffs.
2. Players assume other parties to be fully rational. This means that all play-
ers have a zero reﬂexion: they know each other and know everything about
each other including all strategies. Evidently, this assumption does not hold for
(proto-)symbolic interactions. I can cheat to hide my true motives and utter false
announcements to lie. Therefore I cannot trust others. In the case of swarms,
there is the same uncertainty: we cannot predict fully the swarm behaviour.
3. All players attempt to maximize their utility. The latter means some ranking of
the subjective welfare, when (s)he is ready to change something. As a result, all
players accept the highest payoffs. Nevertheless, in (proto-)symbolic interactions
I can avoid the highest payoffs for the sake of some symbolic values, e.g. I can
be altruistic or even sacriﬁce my life for somebody. In the case of swarms, it
means that the same payoffs can be different: they can be laterally inhibited or
laterally activated.
4. All players have resistance points, i.e. they can accept only solution’s that are
at or greater than their security levels. In symbolic interactions I can avoid this
item, too, for the same reasons as in the previous item.
5. All players know utilities and preferences (preference relations) of other play-
ers and develop tangible preferences among those options. Preferences remain
constant throughout the game. But in (proto-)symbolic interactions including
swarm behaviours, players can change their preferences through the interaction
(for instance, the human beings can lie and hide their true preferences).
6. For any game there is Pareto efﬁciency. All players can take maximally efﬁcient
decisions which maximize each player’s own interests. Let us recall that a distri-
bution of utility A is called Pareto superior over another distribution B if from
state B there is a possible redistribution of utility to A such that at least one
player has the better payoff in A than in B and no player has the worse payoffs.
In the situations of (proto-)symbolic interactions when preferences may change
through the game there is no Pareto efﬁciency in general case.

288
8
Context-Based Games of Swarms
Due to all the assumptions of game theory mentioned above there are always
common game solutions giving an endogenously stable or equilibrated state. These
solutions are called equilibria. This term is extrapolated from physics, where it
means a stable state in which all the causal forces internal to the system balance each
other out unless it is perturbed by the intervention of some external force. So, game-
theorists consider economic systems as mutually constraining causal relations, just
like physical systems. These equilibria can be found out just by using the math tools
of computations over payoffs. For (proto-)symbolic interactions including swarm
behaviours there are no equilibria in that meaning, but it is ever possible to reach a
consensus that will be called a performative equilibrium.
If we use p-adic probability measures, we can appeal to other game-theoretic
assumptions (for more details see [7]):
1. Each game can be assumed inﬁnite, because its rules can change.
2. Players can have different levels of reﬂexion: one player can know everything
about another, but the second can know just false announcements from the ﬁrst.
3. Some utilities can have proto-symbolic meanings or symbolic meanings. These
meanings are results of accepting (proto-)symbolic values by some players, e.g.
swarms can consider the same item being laterally inhibited or laterally activated.
The higher symbolism of payoffs, the higher level of reﬂexion of appropriate
players.Onthezerolevelofreﬂexion,thepayoffsdonothavesymbolicmeanings
at all. For consensus the players are looking for joint symbolic meanings.
4. Resistance points for players are reduced to the payoffs of the zero level of
reﬂexion.
5. The joint (proto-)symbolic meanings can change through the game if a player
increases his/her level of reﬂexion.
6. For any game there is performative efﬁciency, when all (proto-)symbolic mean-
ings of one player are shared by other players.
Inthecaseofthesenewgame-theoreticassumptionswecancalculatesomeaspects
of (proto-)symbolic interactions by probabilistic tools in non-Archimedean numbers
[27], see Chap. 10. These new assumptions correspond to bio-inspired game theory as
well as to theory of reﬂexive games. So, on the one hand, in bio-inspired game theory
all the game moves are performed under the lateral inhibition or lateral activation
conditions, therefore the swarm behaviour is not forecasted by additive measures.
On the other hand, in reﬂexive games players can lie to each other, therefore their
behaviours are not predictable by additive measures, too.
8.1.3
Concurrent Go Games on the Slime Mould
The behaviour of swarms can be represented as a bio-inspired game, i.e. within the
experimental game theory, where, on the one hand, all basic deﬁnitions are veriﬁed
in the experiments with swarms and, on the other hand, all basic algorithms are

8.1 Bio-inspired Game Theory
289
implemented in an object-oriented language for simulations of swarms (e.g. the
object-oriented language for plasmodia is introduced in [28–31]).
Let us consider an example of bio-inspired game. There are two species of the
slime mould: Physarum polycephalum and Badhamia utricularis. The ﬁrst can move
faster than the second, but the second has bigger strands, see [7]. The main feature
of gamic competition between Physarum polycephalum and Badhamia utricularis is
that they move concurrently. Hence, we deal with a concurrent game, not sequential.
So, we can show that the slime mould can be a model for concurrent games.
In context-based games, we try to deﬁne in this chapter, players can move con-
currently as well as in concurrent games, but the set of actions is ever inﬁnite. In our
experiments, we adopt the following interpretations of basic entities: (i) attractants as
payoffs; (ii) attractants occupied by the swarm as states of the game; (iii) active zones
of swarm as players; (iv) logic gates for behaviours as moves (available actions) for
the players; (v) propagation of the swarm as the transition table which associates,
with a given set of states and a given move of the players, the set of states resulting
from that move.
In this bio-inspired game theory we can demonstrate creativity of swarms. The
point is that swarms do not strictly follow spatial algorithms like Kolmogorov-
Uspensky machines, but perform many additional actions (see Chap. 4). So, the
swarm behaviour can be formalized within strong extensions of spatial algorithms,
e.g. within concurrent games or context-based games [3].
Now, let us show how we can represent the plasmodium behaviour as a concurrent
Go game. Remember that the Go game is a board game with two players (called Black
and White) who alternately place black and white stones, accordingly, on the vacant
intersections (called points) of a board with a 19 × 19 grid of lines [32]. Black
moves ﬁrst. Stones are placed until they reach a point where stones of another color
are located. There are the following two basic rules of the game: (i) each stone must
have at least one open point (called liberty) directly next to it (up, down, left, or
right), or must be part of a connected group that has at least one such open point;
stones which lose their last liberty are removed from the board; (ii) the stones must
never repeat a previous position of stones. The aim of the game is in surrounding
more empty points by player’s stones. At the end of game, the number of empty
points player’s stones surround are counted, together with the number of stones the
player captured. This number determines who the winner is.
In our version of Go game for the slime mould, both players move concurrently,
not sequentially. In this view the black stones are considered attractants occupied by
the plasmodium and the white stones are regarded as repellents. By this interpretation,
we have two players, also: Black (this player places attractants) and White (this player
places repellents). The winner is determined by the number of empty points player’s
stones surround.
Notice that the number of possible Go games is too large, 10,761. Therefore it
is better to focus just on games, where locations of black and white stones simulate
spatial reasoning.
The plasmodium of Physarum polycephalum moves to attractants to connect them
and in the meanwhile it avoids places, where repellents are located. The radius, where

290
8
Context-Based Games of Swarms
Fig. 8.1 The six Voronoi
cells in accordance with the
four attractants denoted by
the black stones and with the
two repellents denoted by the
white stones. The
plasmodium located in the
center of the picture connects
the three attractants by the
three protoplasmic tubes. It
cannot see the fourth
attractant because of the two
repellents
chemical signals from attractants (repellents) can be detected by the plasmodium to
attract (repel) the latter, determines the structure of natural Voronoi cells, where each
Voronoi cell is a place, where a chemical signal holds (see Fig.8.1).
For the plasmodium of Fig.8.1 we have just the four neighbour cells. Notably
that in Go games at each point we have only four neighbours everywhere. In other
words, we deal with calculations in the 5-adic universe. So, we can design the space
for plasmodia in the way to have just four neighbours at each point of moves. We
associate black stones with attractants occupied by plasmodia and white stones with
repellents. For the sake of convenience and more analogy with Voronoi cells, let us
consider cells (not intersections of lines) as points for stone locations. Then we can
use all rules of Go games to simulate plasmodium motions (see Fig.8.2).
8.1.4
Aristotelian Go Game on the Slime Mould
In the concurrent Go implementation of Aristotelian syllogistic, the syllogistic letters
S, P, M, . . . are interpreted as cells of the board with the 19 × 19 grid of lines.
The letter S is understood as empty if and only if the white stone is located on an
appropriate cell denoted by S. This letter is treated as non-empty if and only if the
black stone is located on an appropriate cell denoted by S. If a cell does not contain
any stone, this means that this cell is out of the game.

8.1 Bio-inspired Game Theory
291
Fig. 8.2 The Go game board
with two white stones
designating repellents and
four black stones designating
attractants, see [4]
The Go implementation of Aristotelian syllogistic can be embodied in the
behaviour of Physarum plasmodium. Let us design cells of Physarum syllogistic
which will designate classes of terms. We can suppose that cells can possess dif-
ferent topological properties. This depends on intensity of chemo-attractants and
chemo-repellents. The intensity entails the natural or geographical neighbourhood
of the set’s elements in accordance with the spreading of attractants or repellents. As
a result, we obtain Voronoi cells.
Thus, in the Physarum interpretation of the Go game, the non-empty syllogistic
letters S, P, M, . . ., i.e. the cells denoted by S, P, M, . . . containing black stones
are considered attractants and the empty syllogistic letters S, P, M, . . ., i.e. the cells
denoted by S, P, M, . . . containing white stones are considered repellents. So, a data
point S is regarded as non-empty if and only if an appropriate attractant located in S
is occupied by a plasmodium. This data point S is regarded as empty if and only if
an appropriate repellent located in S repels the plasmodium.
Thus, in the Aristotelian version of the Go game we have syllogistic strings of the
form SP with the following interpretation: ‘S is P’, and with the following meaning:
SP is true if and only if S and P are neighbours and both S and P are not empty,
otherwise SP is false. We can extend this meaning as follows: SP is true if and only
if S and P are not empty and there is a line of non-empty cells between points S and
P, otherwise SP is false. By the deﬁnition of true syllogistic strings, we can deﬁne
atomic syllogistic propositions as follows:
1. Sa A
GoP. In the formal syllogistic: there exists A such that A is S and for any A, if
A is S, then A is P. In the Go game model: there is a cell A containing the black
stone and for any A, if AS is true, then AP is true. In the Physarum model: there
is a plasmodium in the cell A and for any A, if AS is true, then AP is true.

292
8
Context-Based Games of Swarms
2. Si A
GoP. In the formal syllogistic: there exists A such that both AS is true and
AP is true. In the Go game model: there exists a cell A containing the black
stone such that AS is true and AP is true. In the Physarum model: there exists
a plasmodium in the cell A such that AS is true and AP is true.
3. SeA
GoP. In the formal syllogistic: for all A, AS is false or AP is false. In the Go
game model: for all cells A containing the black stones, AS is false or AP is
false. In the Physarum model: for all plasmodia A, AS is false or AP is false.
4. SoA
GoP. In the formal syllogistic: for any A, AS is false or there exists A such
that AS is true and AP is false. In the Go game model: for all cells A containing
the black stones, AS is false or there exists A such that AS is true and AP is
false. In the Physarum model: for any plasmodia A, AS is false or there exists
A such that AS is true and AP is false.
Formally, this semantics is deﬁned as follows. Let M be a set of attractants. Take a
subset|X| ⊆M ofcellscontainingtheblackstones(i.e.ofcellscontainingattractants
and occupied by the plasmodium) as a meaning for each syllogistic variable X. Next,
deﬁne an ordering relation ⊆on subsets |S|, |P| ⊆M as: |S| ⊆|P| iff all attractants
from |P| are reachable for the plasmodium located at the attractants from |S|, i.e.
iff for all cells of |S| with black stones there are lines of black stones connecting
them to cells of |P| also containing black stones. Hence, |S| ∩|P| ̸= ∅means that
some attractants from |P| are reachable for the plasmodium located at the attractants
from |S| and |S| ∩|P| = ∅means that no attractants from |P| are reachable for the
plasmodium located at the attractants from |S|. In the Go game model |S| ∩|P| ̸= ∅
means that some cells from |P| occupied by the black stones are connected by
the lines of black stones with the cells from |S| occupied by the black stones and
|S| ∩|P| = ∅means that there are no lines of black stones from the cells of |P| to
the cells of |S|.
This allows us to deﬁne models M = ⟨M, | · |⟩such that
• M |= Sa A
GoP iff |S| ⊆|P|;
• M |= Si A
GoP iff |S| ∩|P| ̸= ∅;
• M |= SeA
GoP iff |S| ∩|P| = ∅;
• M |= p ∧q iff M |= p and M |= q;
• M |= p ∨q iff M |= p or M |= q;
• M |= ¬p iff it is false that M |= p.
Let us consider a concurrent game of Go at time step 10, i.e. when White and
Black players have placed the 10 white stones and the 10 black stones respectively.
Let this game be pictured in Fig.8.3. Each Voronoi cell is denoted from S1,1 to S18,18.
So, in Fig.8.3 syllogistic letters S6,4, S7,5, S7,6, S8,7, S8,8, S7,9, S8,10, S6,11, S4,9, S4,10
are understood as non-empty and syllogistic letters S4,6, S5,6, S6,8, S6,9, S6,10, S4,11,
S7,10, S7,12, S11,8, S12,8 as empty. As a result, we can build some true syllogistic
propositions in this universe like that: ‘Some S7,5 are S7,6’, ‘Some S8,7 are S8,8’,
‘Some S4,9 are S4,10’, ‘No S4,6 are S5,6’, ‘No S6,8 are S6,9’, ‘No S6,9 are S6,10’, ‘No
S6,10 are S7,10’, ‘No S11,8 are S12,8’, etc. Let us notice that in the universe of Fig.8.3
we do not have universal afﬁrmative propositions. But we can draw some syllogistic

8.1 Bio-inspired Game Theory
293
Fig. 8.3 The Aristotelian
concurrent Go game 1 at time
step 10. The black stones are
attractants occupied by the
plasmodium, the white
stones are repellents, see [4]
Fig. 8.4 The Aristotelian
concurrent Go game 2 at time
step 10. The black stones are
attractants occupied by the
plasmodium, the white
stones are repellents, see [4]
conclusions such as ‘If S4,10[S4,11] and S4,9S4,10, then S4,9[S4,11]’ (i.e. ‘If no S4,10 are
S4,11 and some S4,9 are S4,10, then no S4,9 are S4,11’).
On the contrary, in the universe pictured in the concurrent Go game of Fig.8.4 we
have universal afﬁrmative propositions such as ‘All S8,10 are S8,11’ and ‘All S4,9 are
S3,9’. Some possible conclusions: ‘If no S8,11 are S8,12 and all S8,10 are S8,11, then no
S8,10 are S8,12’ and ‘If no S3,9 are S3,10 and all S4,9 are S3,9, then no S4,9 are S3,10’.

294
8
Context-Based Games of Swarms
8.1.5
Non-Aristotelian Go Game on the Slime Mould
Let us consider concurrent Go games with the two different kinds of plasmodia:
(i) plasmodia of Physarum polycephalum and (ii) plasmodia of Badhamia utricu-
laris [7]. They try to occupy free attractants antagonistically. So, if an attractant is
occupied by the plasmodium of Physarum polycephalum, it cannot be occupied by
the plasmodium of Badhamia utricularis and if it is occupied by the plasmodium
of Badhamia utricularis, it cannot be occupied by the plasmodium of Physarum
polycephalum. In this way we observe a competition between two plasmodia.
In order to implement the performative syllogistic in the concurrent Go games
with Physarum polycephalum and Badhamia utricularis plasmodia, we will interpret
data points denoted by appropriate syllogistic letters as black stones (attractants) if
we assume that appropriate cells are occupied by the plasmodium of Physarum
polycephalum and we will interpret data points denoted by appropriate syllogistic
letters as white stones (attractants) if we assume that appropriate cells are occupied
by the plasmodium of Badhamia utricularis. A data point S is considered empty for
the Black player if and only if an appropriate attractant denoted by S is occupied by
the white stone (plasmodium of Badhamia utricularis). A data point S is considered
empty for the White player if and only if an appropriate attractant denoted by S is
occupied by the black stone (plasmodium of Physarum polycephalum). Let us deﬁne
syllogistic strings of the form SP with the following interpretation: (i) ‘S is P’, and
with the following meaning: SP is true for the Black player if and only if S and P
are reachable for each other by the plasmodium of Physarum polycephalum and both
S and P are not empty for the Black player, otherwise SP is false; (ii) ‘S is P’, and
with the following meaning: SP is true for the White player if and only if S and P
are reachable for each other by the plasmodium of Badhamia utricularis and both S
and P are not empty for the White player, otherwise SP is false. In other words, SP
is true for the Black player (respectively, for the White player) if and only if S and
P are not empty for the Black player (respectively, for the White player) and there
is a line of non-empty cells for the Black player (respectively, for the White player)
between points S and P, otherwise SP is false. Using this deﬁnition of syllogistic
strings, we can deﬁne atomic syllogistic propositions as follows:
1. SanonA
Go
P. In the formal performative syllogistic: there exists A such that A is S
and for any A, AS is true and AP is true. In the Go game model: there is a black
(white) stone in A connected by black (white) stones to S and connected by
black (white) stones to P. In the Physarum model: a plasmodium of Physarum
polycephalum (a plasmodium of Badhamia utricularis) in A occupies S and for
any plasmodia A of Physarum polycephalum (for any plasmodia A of Badhamia
utricularis) which is a neighbour for S and P, there are strings AS and AP. This
means that we have a massive-parallel occupation of the region by plasmodia of
Physarum polycephalum (plasmodia of Badhamia utricularis) where the cells
S and P are located.
2. SinonA
Go
P. In the formal performative syllogistic: for any A, both AS is false and
AP is false. In the Go game model: for any cell A there are no lines of black

8.1 Bio-inspired Game Theory
295
(white) stones connecting A to S and A to P. In the Physarum model: for any
plasmodium A of Physarum polycephalum (of Badhamia utricularis) which is
a neighbour for S and P, there are no strings AS and AP. This means that the
plasmodium of Physarum polycephalum (of Badhamia utricularis) cannot reach
S from P or P from S immediately.
3. SenonA
Go
P. In the formal performative syllogistic: there exists A such that if AS is
false, then AP is true. In the Go game model: there exists a cell A with the black
(white) stone which is a neighbour for cells S and P such that there is a string
AS or there is a string AP. In the Physarum model: there exists the plasmodium
of Physarum polycephalum (of Badhamia utricularis) A which is a neighbour
for S and P such that there is a string AS or there is a string AP. This means that
the plasmodium of Physarum polycephalum (of Badhamia utricularis) occupies
S or P, but not the whole region where the cells S and P are located.
4. SononA
Go
P. In the formal performative syllogistic: for any A, AS is false or there
exists A such that AS is false or AP is false. In the Go game model: for any cell A
with the black (white) stone which is a neighbour for S and P there is no string AS
or there exists a black (white) stone in A which is a neighbour for S and P such
that there is no string AS or there is no string AP. In the Physarum model: for any
plasmodium of Physarum polycephalum (of Badhamia utricularis) A which is a
neighbour for S and P there is no string AS or there exists A which is a neighbour
for S and P such that there is no string AS or there is no string AP. This means
that the plasmodium of Physarum polycephalum (of Badhamia utricularis) does
not occupy S or there is a neighbouring cell which is not connected to S or P
by a protoplasmic tube.
Notice that the same proposition SxnonA
Go
P, where xnonA
Go
∈{a, e, i, o}, has a dif-
ferent meaning for the Black player and the White player:
Deﬁnition 8.1 There are the following semantic correlations between propositions
in sense of the Black player and propositions in sense of the White player:
• SanonA
Go
P is true for the Black player iff SinonA
Go
P is true for the White player with
the same cells S and P;
• SononA
Go
P is true for the Black player iff SenonA
Go
P is true for the White player with
the same cells S and P;
• SanonA
Go
P is false for the Black player iff SinonA
Go
P is false for the White player with
the same cells S and P;
• SononA
Go
P is false for the Black player iff SenonA
Go
P is false for the White player with
the same cells S and P.
Composite propositions are deﬁned in the standard way. The performative syllo-
gistic as a Go game is an antagonistic game, where two players (Black and White)
draw own conclusions without any coalition.
Let us also examine a game of Go at time step 10 to provide an example for per-
formative syllogistic. Let this game be shown in Fig.8.5. As usual, each Voronoi cell

296
8
Context-Based Games of Swarms
Fig. 8.5 The performative
syllogistic concurrent Go
game 1 at time step 10. The
black stones are attractants
occupied by the plasmodium
of Physarum polycephalum
and the white stones are
attractants occupied by the
plasmodium of Badhamia
utricularis. So, we construct
syllogisms from the point of
view of the Black player, see
[4]
Fig. 8.6 The performative
syllogistic concurrent Go
game 2 at time step 10. The
black stones are attractants
occupied by the plasmodium
of Physarum polycephalum
and the white stones are
attractants occupied by the
plasmodium of Badhamia
utricularis. We construct
syllogisms from the point of
view of the Black player, see
[4]
is denoted from S1,1 to S18,18. In the universe of Fig.8.5 there are no universal afﬁr-
mative propositions and particular afﬁrmative propositions. We face only universal
negative propositions and particular negative propositions such as ‘No S′
4,9 are S′
4,10’,
where S′
4,9 are neighbours for S4,10 differing from S4,9 and S′
4,10 are neighbours for
S4,9 differing from S4,10, and ‘Some S′
4,11 are not S′
5,11’, where S′
4,11 are neighbours
for S5,11 differing from S4,11 and S′
5,11 are neighbours for S4,11 differing from S5,11.
In the universe of Fig.8.6 there is a universal afﬁrmative proposition: ‘All S6,5 are
S6,6’, and a particular afﬁrmative proposition: ‘Some S5,8 are S5,9’.

8.1 Bio-inspired Game Theory
297
We have just shown that we can simulate the plasmodium motion as a concurrent
Go game, where (i) black stones are interpreted as attractants and white stones as
repellents in the Aristotelian version and (ii) black stones are interpreted as attractants
occupied just by Physarum polycephalum and white stones as attractants occupied
just by Badhamia utricularis in the non-Aristotelian version. We can consider conﬁg-
urations of stones as spatial reasoning. If we implement the Aristotelian syllogistic,
we need a coalition of two players. If we implement the performative syllogistic
[33], we deal with an antagonistic game. While Aristotelian syllogistic may describe
concrete directions of Physarum spatial expansions, performative syllogistic may
describe Physarum simultaneous propagations in all directions. Therefore, for the
simulation of Aristotelian syllogistic we need repellents to avoid some possibilities
in the Physarum propagations. Also, we can extend the performative syllogistic up to
the case of p-adic valued fuzzy syllogistic, where quantiﬁers ‘All’, ‘No’, ‘Some’,
‘Some... not’ are interpreted in the massive-parallel way to describe the plasmodium
propagation in different directions. Then we deﬁne p-adic probability (fuzzyness)
to ﬁx all properties (conditions) for any experiment with Physarum polycephalum
or Badhamia utricularis.
Let us deﬁne concurrent games of swarms generally:
Deﬁnition 8.2 A (ﬁnite) concurrent game of swarms is a tuple G = ⟨States, Agt,
Actn, Movn, Tabn, (⪯A)A∈Agt⟩, where
• States is a (ﬁnite) set of states presented by attractants occupied by the swarm;
• Agt = {1, . . . , k} is a ﬁnite set of players presented by different active zones of
swarm (compare to [34]);
• Actn is a non-empty set of actions presented by logic gates or their inductive
combinations with n inputs and one output, an element of Act Agt
n
is called a move;
• Movn : Statesn × Act Agt
n
→2Act\{∅} is a mapping indicating the available sets
of actions to a given player in a given set of states, n > 0 is said to be a
radius of swarm actions, a move mn
Agt = (mn
A)A∈Agt is legal at ⟨s1, . . . , sn⟩if
mn
A ∈Movn(s, A) for all A ∈Agt, where s = ⟨s1, . . . , sn⟩;
• Tabn : Statesn × Act Agt
n
→States is the transition table which associates, with
a given set of states and a given move of the players, the set of states resulting
from that move;
• for each A ∈Agt, ⪯A is a preorder (reﬂexive and transitive relation) over Statesω,
called the preference relation of player A, indicating the intensity of attractants;
for each π, π′ ∈Statesω, by π ⪯A π′ we denote that π′ is at least as good as π
for A and when it is not π ⪯A π′, we say that A prefers π over π′.
Thus, concurrent games are a natural form of bio-inspired games. They have been
just exempliﬁed by concurrent Go games (Aristotelian as well as non-Aristotelian
ones).

298
8
Context-Based Games of Swarms
8.2
Towards Theory of Context-Based Concurrency
Usually, concurrent processes are described in terms of labelled transition systems,
in which we have a ﬁnite set of atomic actions and all processes are regarded
as (co)inductive compositions of these atomic actions. Theoretically, the tools of
labelled transition systems are deﬁned as coalgebras [35]. Their entities may be pre-
sented as inﬁnite streams [36, 37]. The main idea of labelled transition systems as
coalgebras is that we can build up inﬁnite trees of concurrent processes.
However, we can consider simple actions as not atomic, also. In this case, their
compositions cannot be inductive and their universe does not satisfy the set-theoretic
axiom of foundation [38]. Simple non-atomic actions are called hybrid. Their infor-
mal meaning is that in one simple action we can suppose the maximum of its modi-
ﬁcations. Then we deﬁne k-agent transition systems, in which all actions are hybrid.
We can deﬁne logical operations on hybrid actions and construct compositions of
hybrid actions as well as compositions of hybrid actions with atomic ones. As a result,
we can deﬁne some formal theories on these compositions: group theory (Proposition
8.1) and Boolean algebra (Proposition 8.2). Both formal theories are strong exten-
sions of conventional group theory and Boolean algebra, respectively. They contain
members which behaves unusually, such as hyperunit of group theory on hybrid
actions that is a multiplicative zero for conventional members and a multiplicative
unit for unconventional members (Proposition 8.1).
Hence, any action performed by a swarm can have an additional proto-symbolic
value due to a lateral inhibition or lateral activation. But in fact there can be much
more different modiﬁcations of the same actions. These modiﬁcations called hybrid
actions are testimonies of free will of swarms. Bio-inspired games deﬁned on these
actions are said to be context-based games.
8.2.1
Hybrid Simple Actions and Overlapping of Transition
Systems
Concurrency is observed almost at all composite processes. Usually, a concurrent
behaviour is considered an interval of possible actions described in terms of a limited
group of events. For instance, the concurrent activity of shop assistant and customer
may be described by events marked by the members of the set {money, good}. This
activity has the form of recursion:
money →(good →(money →(good →(money →(good →(. . .)))))),
where →denotes a transition from one event to another. In the explicated form it is
a parallel recursion:
shop assistant = (receiving money →(giving a good →shop assistant));

8.2 Towards Theory of Context-Based Concurrency
299
customer = (giving money →(receiving a good →customer)).
In the given example we have two agents whose behaviour is absolutely expected
and transparent for each other. In other words, their actions are automatic.
In order to analyze a concurrent behaviour from the point of view of computer
science it is convenient to use a labelled transition system. Let States be an area of
values of this system, consisting of events, Act be a set of labels designating actions
due to which we pass from one event to others, {→a: a belongs to Act} be a set of
transitions which are deﬁned on events. A transition is to be designated by s1 →a s2,
where s1 and s2 are contained in States. This transition is a motion from a state
(event) s1 to a state (event) s2 with a fulﬁlment of action a, states s1 and s2 are called
a start point and an end point of this transition accordingly, and an action a is called
a label of this transition.
For example, let us consider the process of making authorization on documents.
A subordinate and manager participate in this process. Subordinate’s action consists
in the compilation of document (doc) and its preparation for authorization (aut).
The manager’s action consists in signing the document (sig) or its rejection (rej).
The equations deﬁning the alphabet and behaviour of three processes are deﬁned as
follows:
States = {document, authorization, signed,rejected}
Act = {doc, aut, sig,rej}
P = (document →aut a|document →aut b)
a = (authorization →sig signed →doc P|authorization →rej b)
b = (authorization →rej rejected →doc P|authorization →sig a)
Hence, it seems that any intelligent composite processes (business cycles, manage-
ment systems, etc.) can be reduced to a labelled transition system. For instance,
Physarum polycephalum is a medium of biological computations, because it is a
kind of natural labelled transition system, S = ⟨States, Acts, Edges⟩, where
• States is a set of states presented by attractants occupying by the plasmodium
step-by-step;
• Acts is a set of stimuli for the plasmodium, consisting of neighbour attractants and
neighbour repellents (different localizations of neighbour attractants and neigh-
bour repellents cause different motions of the plasmodium);
• Edges ⊆States × Act × States is the set of transitions presenting the plasmod-
ium propagation from one state to another in accordance with actions of Act.
And now, whether it is a canonical transition system with the ﬁnite set Act that
covers all possible transitions, that is the question. If it is so, we can implement
abstract automata (such as Kolmogorov-Uspensky automata [39, 40]) in the plas-
modium transitions and observe plasmodium motions as spatial implementations of

300
8
Context-Based Games of Swarms
Fig. 8.7 The result of reaching the protoplasmic tubes at the attractant trough the barrier: a the
plasmodium gets round the barrier; b the plasmodium goes through the slit of barrier. For more
details on these experiments, see [41]
computable functions satisfying the Church-Turing thesis. If not, we can implement
just some approximations of abstract automata.
Let us consider the following thought experiment as counterexample showing that
the set Act for the plasmodium is inﬁnite in principle. Assume that the transition
system for the plasmodium consists just of one action presented by one neighbour
attractant. The plasmodium is expected to propagate a protoplasmic tube towards
this attractant. Now, let us place a barrier with one slit in front of the plasmodium.
Because of this slit, the plasmodium can be propagated according to the shortest
distance between two points and in this case the plasmodium does not pay attention
on the barrier (Fig.8.7b). However, sometimes the plasmodium can evaluate the same
barrier as a repellent for any case and it gets round the barrier to reach the attractant
according to the longest distance (Fig.8.7a). So, even if the environment conditions
change a little bit, the behaviour changes, too. The plasmodium is very sensible to
the environment.
Thus, in the transition system with only one stimulus presented by one attractant, a
passable barrier can be evaluated as a repellent ‘for any case’. Therefore the transition
system with only one stimulus and one passable barrier may have the following three
simple actions: (i) pass trough (Fig.8.7b), (ii) avoid from left (Fig.8.7a), (iii) avoid
from right. But in essence, we deal only with one stimulus and, therefore, with one
action, although this action has the three modiﬁcations deﬁned above.
Simple actions which have modiﬁcations depending on the environment are called
hybrid. The problem is that the set of actions, Act, in any labelled transition systems
must consist of the so-called atomic actions—simple actions that have no modiﬁca-
tions. On atomic actions, we can deﬁne different operations to construct composite
processes. Some examples of operations are as follows: (i) choice (P1 + P2), when
either the process P1 holds, if an event x, such that x →a P1, appears ﬁrst, or the
process P2 holds, if an event y, such that y →a P2, appears ﬁrst, (ii) concurrency
(P1|P2), when x and y are different events, x →a P1 and y →a P2 do not have
joint states and we obtain a new process P1|P2, such that in the same point of time
actions can be fulﬁlled by the processes P1, P2, so that a new process P1|P2 can
simultaneously commit the following couples of actions:
• for any transition x0 →a x1 from P1 and for any state y from P2 the process P1|P2
contains a transition ⟨x0, y⟩→a ⟨x1, y⟩;
• for any transition y0 →a y1 from P2 and for any state x from P1, the process P1|P2
contains a transition ⟨x, y0⟩→a ⟨x, y1⟩;

8.2 Towards Theory of Context-Based Concurrency
301
• for any couple of transitions x0 →a x1 from P1 and y0 →a y1 from P2 with com-
plementary actions a and a such that a = a, the process P1|P2 contains a transition
⟨x0, y0⟩→τ ⟨x1, y1⟩, where τ is an internal action that synchronizes complemen-
tary actions a and a.
So, atomic and composite actions of any labelled transition system satisfy the
set-theoretic axiom of foundation [38]. In other words, we have atomic actions and
by induction we can obtain all composite actions. Nevertheless, hybrid actions do
not satisfy the foundation axiom. The induction principle of obtaining entities is
unapplied for hybrid actions. Their universe is non-well-founded [38].
Let us show that in the life-world we face hybrid actions of human beings almost
all the time. First, imagine a vending machine which dispenses items such as snacks
to customers automatically, after the customer inserts currency. This machine is a
labelled transition system with a ﬁnite set Act of the following atomic actions: giving
items, which were chosen by the customer, after they were paid and giving change
in case the price is less, than the coins inserted. Now, assume that we contact not the
vending machine, but a saleslady. Her hybrid actions in selling snacks and giving
change can go with the following moods of modiﬁcations: smiling or not, talking
or not, offending or not, being introduced or not, etc. The interval of possible mod-
iﬁcations from typical actions to untypical is too large. So, she is not a labelled
transition system in its conventional meaning as the vending machine. The main dif-
ference from conventional systems is that we have no atomic actions of the saleslady,
therefore her set Act can be inﬁnite. But it is impossible for conventional systems
describing concurrency, Act must be always ﬁnite and well-founded.
Let us come back to our example of hybrid actions of Physarum plasmodia. In
Fig.8.7 we have one transition according to one stimulus. But at the same time,
we observe a feature of another transition system consisting of one repellent that is
avoided by the plasmodium. This phenomenon, when one transition system transmits
some own features to another transition system, is said to be the overlapping of
two transition systems. In this case we have a domination of one transition system,
but with some features of another system. There may be an overlapping of many
transition systems. These systems are called overlapped. In the overlapped labelled
transition systems, actions are hybrid and sets of actions are non-well-founded and,
hence, can always be inﬁnite. Processes described in these systems are called context-
based concurrent processes. Their system if we assume some players is called a
context-based game. Notice that almost all natural (biological or social) processes
are context-based concurrent such as swarm behaviours or human behaviours.
There are more actions in an overlapped transition system, more hybrid they
are. All processes of the saleslady are context-based, because there can be many
other transition systems such as joking, talking, being introduced, etc. which can
be overlapped with selling. In human or swarm actions, we always can ﬁnd an
overlapping.
In the next section, we show, how we can deﬁne overlapped labelled transition
systems and their hybrid actions formally.

302
8
Context-Based Games of Swarms
8.2.2
Formal Logical Language for the Context-Based
Concurrency
In order to know, how we can build up non-inductive compositions of hybrid actions,
let us try ﬁrst to deﬁne overlapped compositions of propositional formulas, i.e. let
us try to present propositional formulas as hybrid entities. Any hybrid entity will
be denoted by (}a, b, . . . {), where a, b, . . . are its modiﬁcations. Assume, a propo-
sitional formula is (}ϕ, ψ{), where ϕ = (ϕ ⇒ψ) and ψ = (ψ ⇒ϕ) are deﬁned
recursively. In other words, we have an inﬁnite formula (((((. . . ⇒ψ) ⇒ψ) ⇒
ψ) ⇒ψ) ⇒ψ) and (((((. . . ⇒ϕ) ⇒ϕ) ⇒ϕ) ⇒ϕ) ⇒ϕ) and both are mutually
deﬁned. The composite formula (}ϕ, ψ{) cannot be presented by linear words even
if they are inﬁnite. It is non-linear in principle. We do not know if it is either the ﬁrst
inﬁnite implication ϕ = (ϕ ⇒ψ) or the second ψ = (ψ ⇒ϕ).
Now, let us consider the non-well-founded formula (}ϕ, ψ{) as transition rule of
a transition system. Suppose that agent A1 moves from the state st
1 to the state st+1
1
,
at time t = 0, 1, . . ., and agent A2 moves from the state st
2 to the state st+1
2
, at time
t = 0, 1, . . ., by the following transition rules: st+1
1
= (st
1 ⇒st
2) and st+1
2
= (st
2 ⇒
st
1). Then we obtain the following inﬁnite streams: ⟨s0
1 ⇒s0
2, s1
1 ⇒s1
2, s2
1 ⇒s2
2, . . .⟩
and ⟨s0
2 ⇒s0
1, s1
2 ⇒s1
1, s2
2 ⇒s2
1, . . .⟩. Let us pay attention that the stream ⟨s0
1 ⇒
s0
2, s1
1 ⇒s1
2, s2
1 ⇒s2
2, . . .⟩(resp. ⟨s0
2 ⇒s0
1, s1
2 ⇒s1
1, s2
2 ⇒s2
1, . . .⟩) may be under-
stood as an inﬁnite propositional formula (((s0
1 ⇒s0
2) ⇒s1
2) ⇒s2
2) ⇒. . . (resp.
(((s0
2 ⇒s0
1) ⇒s1
1) ⇒s2
1) ⇒. . .). Both formulas are mutually depended and they
cannot be presented as linear sequence (inductive composition).
Assume, our hybrid formula is (}ϕ1, ϕ2, . . . , ϕn{). It means that formulas ϕ1, ϕ2,
. . ., ϕn are inﬁnite and mutually depended. Then we say that the hybrid formula is of
radius n > 1. We suppose that in reality it can behave as one of its n modiﬁcations,
but we do not know, how precisely. Let (Actt,n)t∈N denote the set of all simple
actions deﬁned as hybrid propositional formulas of radius n > 1 and used in some
transitions. We can deﬁne an overlapped transition system closed over these actions
as the following extension of multi-agent transition systems (called also concurrent
games [42–45]):
Deﬁnition 8.3 A (ﬁnite) k-agent overlapped transition system or a (ﬁnite) k-agent
context-based game is a tuple G = ⟨(Statest)t∈N, Agt, (Actt,n)t,n∈N, (Movn
t )t,n∈N,
(Tabn
t )t,n∈N⟩, where
• Statest is a (ﬁnite) set of states at time t = 0, 1, 2, . . .;
• Agt = {1, . . . , k} is a ﬁnite set of players;
• Actt,n is a non-empty set of hybrid actions with radius n at t = 0, 1, 2, . . ., an
element of Act Agt
t,n is called a move at time t = 0, 1, 2, . . .;
• Movn
t : Statesn
t × Act Agt
t,n →2Act\{∅} is a mapping indicating the available sets
of actions to a given player in a given set of states, n > 0 is said to be a
radius of hybrid actions, a move mn
Agt = (mn
A)A∈Agt is legal at ⟨s1, . . . , sn⟩if
mn
A ∈Movn(s, A) for all A ∈Agt, where s = ⟨s1, . . . , sn⟩;

8.2 Towards Theory of Context-Based Concurrency
303
• Tabn
t : Statesn
t × Act Agt
t,n →Statesn
t+1 is the transition table which associates,
with a given set of states at t and a given move of the players at t, the set of states
at t + 1 resulting from that move.
The difference of G from concurrent games is that in concurrent games (i) we do
not use time; (ii) the set of actions is always ﬁnite and consists of atomic actions.
Let us pay attention that actions of (Actt,n)t∈N are simple, that is, not compos-
ite. However, they cannot be considered atomic actions in the way of conventional
labelled transition systems.
For deﬁning compositions of simple actions of (Actt,n)t∈N, let us construct the
unconventional logic L for hybrid formulas. Let {p, q,r, . . .} be the set of all propo-
sitional variables. Then formulas are deﬁned as follows: (1) if ϕ, ψ ∈{p, q,r, . . .},
then ϕψ⋆, where ⋆∈{D, C, I}, i.e. ⋆is disjunction, conjunction or implication
respectively, is a formula; (2) by using D, C, I, we can construct ﬁnite or inﬁnite
logical combinations of formulas ϕ0ψ0⋆0, ϕ1ψ1⋆1, ϕ2ψ2⋆2, …, where ⋆0, ⋆1, ⋆2 . . . ∈
{D, C, I}; (3) if ϕ is a ﬁnite formula and ψ is an inﬁnite formula, then ϕψ⋆, where
⋆∈{D, C, I}, is a formula. For instance, according to this deﬁnition pqCr I is
a well-formed formula that is (p ∧q) ⇒r in the traditional notation. Also, this
deﬁnition allows us to construct streams such as p0q0Iq1Iq2Iq3I . . ., i.e. inﬁnite
propositional formulas and logically combine different ﬁnite and inﬁnite formulas.
Let ϕ be a formula. Then ϕN N . . ., where N is negation which occurs ﬁnitely or
inﬁnitely many times, is a formula. Traditionally it is written thus: . . . ¬(¬ϕ). The
class of all ﬁnite or inﬁnite strings is a maximal set of formulas closed under logi-
cal operations by two deﬁnitions above (for both D, C, I and N). That is, this set is
deﬁned non-inductively, although it contains all conventional propositional formulas
that are deﬁned inductively.
Hybrid formulas are sets of streams which have joint propositional variables. For
example, the set consisting just of p0q0Iq1Iq2Iq3I . . . and q0 p0I p1I p2I p3I . . . is
a hybrid formula. Let A1, A2 be hybrid propositional formulas and ϕ be a ﬁnite
or inﬁnite propositional formula. Then we can deﬁne their logical compositions as
follows: (1) A1A2D is a union of A1 and A2; A1A2C is an intersection of A1 and A2
if they have joint streams and A1A2C is their union otherwise; A1A2I is a union of
A1N and A2, where A1N contains complements for each streams of A1; (2) assume
that ϕ is inﬁnite, then ϕA1D is a union of {ϕ} and A1; ϕA1C is ϕ if ϕ belongs to
A1 and it is a union {ϕ} and A1 otherwise; ϕA1I := ϕN A1D; A1ϕI := A1NϕD;
(3) assume ϕ is ﬁnite and A1 contains streams ψ1, …, ψn (n > 0) that begin with ϕ,
then ϕA1D is a union of {ϕψ1D}, …, {ϕψn D}, and A1; ϕA1C is a union of {ϕψ1C},
…, {ϕψnC}, and A1; ϕA1I := ϕN A1D; A1ϕI := A1NϕD.
In the logic L , we can construct logical compositions of overlapped transition sys-
tems G1, G2, . . ., Gi, . . ., where Gi = ⟨(Statest,i)t∈N, Agti, (Actt,ni )t∈N, (Movni
t )t∈N,
(Tabni
t )t∈N⟩for i ≥1 as follows:
G1G2 ⋆. . . ⋆Gi ⋆. . . ,

304
8
Context-Based Games of Swarms
where ⋆∈{D, C, I}, is an overlapped transition system G = ⟨(Statest)t∈N, Agt,
(Actt)t∈N, (Movt)t∈N, (Tabt)t∈N⟩, where
• (Statest)t∈N is a union 
i(Statest,i)t∈N;
• Agt is a union 
i Agti;
• (Actt)t∈N consists of actions α1α2 ⋆. . . ⋆αi ⋆. . . , where ⋆∈{D, C, I}, such that
αi ∈(Actt,ni )t∈N for i ≥1;
• (Movt)t∈N : (Statest)t∈N × (Actt)Agt
t∈N →2Act\{∅};
• (Tabt)t∈N : (Statest)t∈N × (Actt)Agt
t∈N →(Statest)t∈N.
In this deﬁnition, we assume that the modiﬁcations of an action of (Actt)t∈N at time
t would not possibly propagate to other atomic actions at time t′ > t. In other words,
we assume that at any time t, the radius n of propagations to other actions is constant,
i.e. for any hybrid formula the radius n does not change for any t = 0, 1, 2, . . . It is
an idealization to consider simple cases of overlapping.
Thus, using the language L , we can deﬁne different formal theories on overlapped
transitions systems. As an example, let us consider group theory extended by hybrid
terms.
8.2.3
Context-Based Concurrent Group Theory
Assume {a, b, . . . , c} is a set of states of Statest. Let us deﬁne inﬁnite terms as
streams of states and hybrid terms as local transition functions. Let · be a two-place
function. Terms are deﬁned thus: (1) if x, y ∈{a, b, . . . , c} ∪{e}, then x · y is a
term; (2) by using ·, we can construct ﬁnite or inﬁnite combinations of terms x0 · y0,
x1 · y1, x2 · y2, …; (3) if x ∈{a, b, . . . , c} ∪{e} and y is a term, then x · y is a term.
By this deﬁnition, each ﬁnite or inﬁnite string of the form x0 · x1 · x2 · . . ., where
xi ∈{a, b, . . . , c}, is a term and we can combine ﬁnite and inﬁnite terms. Let −1 be
a one-place function. Then (x0 · x1 · x2 · . . .)−1, where x0 · x1 · x2 · . . . is a ﬁnite or
inﬁnite term, is a term, too, it is denoted by x−1
0
· x−1
1
· x−1
2
· . . .. Atomic formulas
are deﬁned thus: if x, y are terms, then x = y is an atomic formula. Notice that this
new language includes conventional language of group theory.
Now we can deﬁne hybrid terms. Let us consider an overlapped labelled transi-
tion system, where n = 2 is the radius. So, we have two inﬁnite streams of states.
Let a0 be an initial state of the ﬁrst stream and b0 is an initial state of the second
stream. Assume that two mutually dependent streams which we have are as fol-
lows: ⟨a0 · b0, a1 · b1, a2 · b2, . . .⟩, where at+1 = (at · bt); ⟨(a−1)0 · (b−1)0, (a−1)1 ·
(b−1)1, (a−1)2 · (b−1)2, . . .⟩, where bt+1 = ((a−1)t · (b−1)t). Notice that this local
transition rule is a hybrid term consisting just of two streams a0 · b0 · b1 · b2 · . . .
and (a−1)0 · (b−1)0 · (b−1)1 · (b−1)2 · . . . Both are inﬁnite terms. If the given hybrid
term contains all possible streams, i.e. streams for n = ω, it is called hyperunit e. It is
a hybrid term that contains all streams which are dual to each other, i.e. for any stream
a · b · c · . . . it is true to say that e contains both a · b · c · . . . and a−1 · b−1 · c−1 · . . .
It is an example of hybrid terms.

8.2 Towards Theory of Context-Based Concurrency
305
Let A1, A2 be hybrid terms and x be a ﬁnite or inﬁnite term. Then we can deﬁne
their multiplications as follows: (1) A1 · A2 is a union of A1 and A2 if A1 and A2 do
not include at least two joint streams and A1 · A2 is an intersection of A1 and A2 if
both include at least two joint streams; A−1
1
is a hybrid term which contains duals
x−1 for each streams x of A1; (2) assume that x is inﬁnite, then x · A1 is a union
of {x} and A1; (3) assume, x is ﬁnite and A1 contains streams y1, …, yn (n > 0)
that begin with x or x−1, then x · A1 is a union of {x · y1}, …, {x · yn}, and A1;
assume, A1 does not contain streams y1, …, yn (n > 0) that begin with x or x−1,
then x · A1 is a union of {x · x · x · x · . . .} and A1. This deﬁnition of complex terms
allows hyperunit to annihilate any member a of conventional group: a · e = e. Other
properties: e−1 · e = e; A · e = A for any hybrid term A; y · e = e for any inﬁnite
term y.
A hybrid term in group theory is denoted by c. It may have the following notation:

ai · b j · ai · b j · . . . ;
b j · ai · b j · ai · . . . ;
. . .
a−i · b−j · a−i · b−j · . . . ; b−j · a−i · b−j · a−i · . . . ; . . .

where i, j = ±1, ai · b j · ai · b j · . . . and b j · ai · b j · ai · . . ., etc. are streams.
The theory closed over logical operations and group-theoretic operations deﬁned
above is called context-based concurrent group theory.
Proposition 8.1 Let us assume that G is a group theory implemented in overlapped
labelled transition systems and a, b, c ∈G . Then in an appropriate context-based
concurrent group theory G ′ built as an extension of G , the following properties hold
true:
1. Let b = (}b · b · a · b · b · a . . . ; a · a · b · a · a · b . . . ; . . . {). Then b · a = a ·
b = (}b · b · a · b · b · a . . . ; a · a · a · b · a · a · b . . . ; . . . {). From this it follows
that if a = (}a · a · a · a · a · a . . . ; . . . {) and a · a · a · a · a · a . . . is the only
stream of a that begins with a or a−1, then
a · a = a · a = a.
2. The rule of associativity holds true:
(a · b) · c = a · (b · c),
where a, b, c are members of G , and for its extension to the non-linear one:
(a · b) · c = a · (b · c),
where all a, b, c simultaneously have (do not have) at least two joint streams.
3. In G there exists a unit e, i.e. the member satisfying the property:
e · a = a · e = a f or any a ∈G .

306
8
Context-Based Games of Swarms
We can obtain a hyperunit e ∈G ′ deﬁned thus: (}a−1 · a−1 · a−1 · a−1 · . . . ; a ·
a · a · a · . . . ; . . . {), where a−1 · a−1 · a−1 · a−1 · . . . and a · a · a · a · . . . are
streams. The streams a−1 · a−1 · a−1 · a−1 · . . . and a · a · a · a · . . . are dual.
The hyperunit satisﬁes two properties:
e · a = a · e = a f or any a ∈G ′,
e · a = a · e = e f or any a ∈G .
4. For any a ∈G there exists the inverse element a−1 ∈G , i.e. the member satis-
fying the property:
a−1 · a = a · a−1 = e.
Also, for any a ∈G ′ there exists a hybrid term:
a−1 = (}a−1 · a−1 · a−1 · a−1 · . . . ; . . . {),
where a−1 · a−1 · a−1 · a−1 · . . . is the only stream of a−1 that begins with a or
a−1. This hypermember satisﬁes the following two properties:
a−1 · a = a · a−1 = a−1,
a−1 · a = a · a−1 ⊆e,
where a contains just streams that are dual for streams of a−1, e.g. a =
(}a · a · a · a · . . . ; . . . {) and a · a · a · a · . . . is a stream.
□
To sum up, the context-based concurrent group theory G ′ is a strong extension
of conventional group theory G . G ′ contains some members with unusual properties
such as hyperunit e that behaves as zero in multiplicative groups for ﬁnite or inﬁnite
terms and behaves as unit in multiplicative groups for hybrid terms (Proposition
8.1(3)). Inﬁnite logical formulas of G ′ specify teleological goals for each hybrid
action based on the group operations ·, −1. Therewith e is the greatest hybrid action
basedonthegroupoperations·, −1,i.e.itcontainsthelargestnumberofmodiﬁcations.
The group theory G ′ can be implemented into the swarm (e.g. slime mould)
behaviour as follows. Each atomic a ∈G is a transition of swarm to the north. Each
atomic a−1 ∈G is a transition of swarm to the south. Each a · b is a composition
of transition a and then transition b. For example, the unit e = a · a−1 means that
there are no transitions of swarm. Hybrid actions of radius n > 1 mean that there
are n linear directions of swarm transitions which can be mixed at different time
t = 0, 1, 2, . . . For instance, if n = 2 we have the following two directions: (i) either
to the north or to the south; (ii) either to the east or to the west. The hyperunit e of
radius 2 means the total transitions in any directions at any time.

8.2 Towards Theory of Context-Based Concurrency
307
8.2.4
Context-Based Concurrent Boolean Algebra
Let us assume again that {a, b, . . . , c} is a set of states of Statest. Let ∩, ∪be two-
place functions and −1 be one-place function of a Boolean algebra A , which are
deﬁned on Statest. They can be extended to hybrid terms in the way of the previous
section. Denote a context-based concurrent Boolean algebra that we are going to
deﬁne by A ′. Assume, in A ′ the following operations are deﬁned for any a, b ∈A :
a ∩b = c, a ∪b = c,
a ∩b = c, a ∪b = c,
a ∩b = c, a ∪b = c,
where a, b, c designate hybrid terms such that the hybrid term a contains a stream that
begins with a, the hybrid term b contains a stream that begins with b, the hybrid term
c contains a stream that begins with c. These hybrid terms are called hypermembers.
Sometimes, the hypermember c may be denoted by a ∩b or a ∪b. It may have the
following meaning:

ai ∩b j ∩ai ∩b j ∩. . . ;
b j ∩ai ∩b j ∩ai ∩. . . ;
. . .
a−i ∩b−j ∩a−i ∩b−j ∩. . . ; b−j ∩a−i ∩b−j ∩a−i ∩. . . ; . . .

or

ai ∪b j ∪ai ∪b j ∪. . . ;
b j ∪ai ∪b j ∪ai ∪. . . ;
. . .
a−i ∪b−j ∪a−i ∪b−j ∪. . . ; b−j ∪a−i ∪b−j ∪a−i ∪. . . ; . . .

where i, j = ±1, ai ∩b j ∩ai ∩b j ∩. . . and b j ∩ai ∩b j ∩ai ∩. . ., etc. are
streams. Suppose that all streams belonging to hybrid terms are cyclic, i.e. they
are of the form either inﬁnite conjunction or inﬁnite disjunction. The extensions of
both linear operations (∩, ∪) are deﬁned as follows:
• formulas b ∩a = c, a ∩b = c (respectively, b ∪a = c, a ∪b = c) mean that for
any a ∈A and a hybrid term b, the member a interacts with all streams of b
which (i) begin with a or a−1 and (ii) are of the form of inﬁnite conjunction
(respectively, inﬁnite disjunction), otherwise we add a new stream a ∩a ∩a ∩
a ∩a ∩a . . . (respectively, a ∪a ∪a ∪a ∪a ∪a . . .) into the hybrid term b. For
instance, let b = (}(b ∩b) ∪a ∪(b ∩b) ∪a ∪. . . ; (a ∪a ∪b) ∩(a ∪a ∪b) ∩
. . . ; . . . {).
Then
b ∩a = a ∩b = (}(b ∩b) ∪a ∪(b ∩b) ∪a ∪. . . ; a ∩(a ∪
a ∪b) ∩(a ∪a ∪b) ∩. . . ; . . . {). From this it follows that if a = (}a ∩a ∩a ∩
a ∩a ∩a ∩. . . ; . . . {) and a ∩a ∩a ∩a ∩a ∩a ∩. . . is the only stream of a that
begins with a or a−1, then
a ∩a = a ∩a = a.
• formula a ∪b = c means that c contains all streams belonging to both a and b.
• formula a ∩b = c means that (1) if a and b have at least two joint streams, then
c = a ∩b, i.e. it contains these joint streams; (2) if a and b do not have at least
two joint streams, then c = a ∪b.

308
8
Context-Based Games of Swarms
For any conventional terms a, b ∈A , we deﬁne: a ≤b iff a ∩b = a or equivalently
a ≤b iff a ∪b = b. We can extend this ordering relation to hybrid terms of A ′ by
the following condition: a ≤b iff a ∩b = a or equivalently a ≤b iff a ∪b = b,
a ≤b iff a ∩b = a, a ≤b iff a ∪b = b.
Proposition 8.2 Let A ′ be a context-based concurrent Boolean algebra extended
from a conventional Boolean algebra A . Then the following properties hold true:
1. Associativity:
(a ∩b) ∩c = a ∩(b ∩c);
(a ∪b) ∪c = a ∪(b ∪c),
where a, b, c are conventional terms of A ;
(a ∩b) ∩c = a ∩(b ∩c),
where all a, b, c simultaneously have (do not have) at least two joint streams,
and
(a ∪b) ∪c = a ∪(b ∪c)
for any hybrid terms a, b, c.
2. Commutativity:
(a ∩b) = (b ∩a); (a ∩b) = (b ∩a); (a ∩b) = (b ∩a);
(a ∪b) = (b ∪a); (a ∪b) = (b ∪a); (a ∪b) = (b ∪a).
3. Idempotence:
(a ∩a) = a; (a ∩a) = a; (a ∪a) = a; (a ∪a) = a.
4. Absorption:
(a ∩b) ∪a = a;
(a ∩b) ∪a ≥a;
(a ∪b) ∩a = a;
(a ∪b) ∩a = a;
(a ∩b) ∪a ̸= a;
(a ∪b) ∩a ̸= a;
(a ∩b) ∪a ≥a; (a ∪b) ∩a = c ≤a,
where c consists of all streams of a without streams beginning with b.
5. Distributivity:
a ∪(b ∩c) = (a ∪b) ∩(a ∪c); a ∩(b ∪c) = (a ∩b) ∪(a ∩c);
a ∪(b ∩c) = (a ∪b) ∩c;
a ∩(b ∪c) = (a ∩b) ∪c;
a ∩(b ∪c) = (a ∩c) ∪b;
a ∪(b ∩c) = (a ∪c) ∩b;
a ∩(b ∪c) ≤(a ∩b) ∪(a ∩c); a ∪(b ∩c) ≥(a ∪b) ∩(a ∪c);
a ∩(b ∪c) ≤(a ∩b) ∪(a ∩c); a ∪(b ∩c) ≥(a ∪b) ∩(a ∪c);
a ∩(b ∪c) ≤(a ∩b) ∪(a ∩c); a ∪(b ∩c) ≥(a ∪b) ∩(a ∪c).

8.2 Towards Theory of Context-Based Concurrency
309
6. There is a conventional term that behaves as unit e, i.e. the member satisfying the
properties: (i) identity: e ∩a = a for any conventional term a; (ii) annihilator:
e ∪a = e for any conventional term a.
7. There is a hybrid term that behaves as hyperunit e:
a−1 ∪a−1 ∪a−1 ∪a−1 ∪. . . ; a ∪a ∪a ∪a ∪. . . ; . . .
a−1 ∩a−1 ∩a−1 ∩a−1 ∩. . . ; a ∩a ∩a ∩a ∩. . . ; . . .

where a−1 ∪a−1 ∪a−1 ∪a−1 ∪. . . and a ∪a ∪a ∪a ∪. . ., etc. are streams
and the radius of e is equal n = ω. The streams a−1 ∩a−1 ∩a−1 ∩a−1 ∩. . . and
a ∪a ∪a ∪a ∪. . . are called ∪-dual, the streams a−1 ∪a−1 ∪a−1 ∪a−1 ∪. . .
and a ∩a ∩a ∩a ∩. . . are called ∩-dual. The hyperunit satisﬁes properties:
(i) identity: e ∩a = a for any hybrid term a; (ii) annihilator: e ∩a ≤e and
e ∪a ≤e for any conventional term a, and e ∪a = e for any hybrid term a.
8. There is a conventional term that behaves as zero o, i.e. the member satisfying the
properties: (i) identity: o ∪a = a for any conventional term a; (ii) annihilator:
o ∩a = o for any conventional term a.
9. For any conventional term a, there exists the complement a−1, i.e. the member
satisfying properties for conventional terms a, b:
• complementation: a ∪a−1 = e; a ∩a−1 = o;
• double negation: (a−1)−1 = a;
• de Morgan: (a ∪b)−1 = (a−1 ∩b−1); (a ∩b)−1 = (a−1 ∪b−1).
10. For any hybrid term a with the radius n = ω, there exists the complement a−1,
satisfying properties:
a ∪a−1 = e;
a ∩a−1 = e;
for any hybrid term a with the radius n < ω, there exists the complement a−1,
satisfying properties:
a ∪a−1 ≤e;
a ∩a−1 ≤e;
(a−1)−1 = (a−1)−1 = (a−1)−1 = a,
where a contains just streams that are ∩- and ∪-dual for streams of a−1;
(a ∪b)−1 = (a−1 ∩b−1);
(a ∩b)−1 = (a−1 ∪b−1);
(a ∪b)−1 ≥(a−1 ∩b−1);
(a ∩b)−1 ≤(a−1 ∪b−1).
□
As we see, the context-based concurrent Boolean algebra A ′ possesses many unusual
properties caused by containing hybrid terms.

310
8
Context-Based Games of Swarms
The informal meaning of hybrid actions (e.g. hybrid terms or hybrid formulas) is
that any hybrid action is deﬁned just on streams and we cannot say in accordance
with which stream the hybrid action will be embodied in the given environment. It
can behave like any stream it contains but there is an uncertainty how exactly. The
hybrid action looks like the quantum bit (or qubit for short). Let us remember that
a classical bit can be 0 or 1. The qubit exists in various superpositions of 0 and 1
at the same time. There is an uncertainty of either 0 or 1, but qubit behaves like
both 0 and 1. In other words, each quantum state is described in terms of classical
states, associating two numbers with each: an absolute amplitude (between 0 and 1)
which when squared gives you the probability of obtaining that classical state when
you measure the system, and a complex phase which governs interference effects.
The classical states 0 and 1 are the top point and bottom point of the sphere, while
the other states are in superposition. The points around the equator represent states
where there is an equal probability of measuring 0 or 1. As a result, we can represent
the state of a qubit as simply the point on the surface of a sphere, known as a Bloch
sphere, see [46, 47]. As a result, no matter what two points you pick, it is impossible
to determine either of them by making a measurement on such a system. So if the user
sends such randomized states to the server, together with measurement angles, there
is nothing to be learned by any measurement of the system. Therefore everything
is perfectly hidden from a malicious server. In the same way any hybrid action is a
computation which is hidden from outside observers. The hybrid action includes as
many versions of behaviour of the whole system as possible.
A saleslady selling some items, plasmodium behaviours (Fig.8.7), and the Bloch
sphere are examples of hybrid actions which do not satisfy the foundation axiom [38]
and cannot be reduced to atomic actions. But in our opinion, using hybrid actions, we
can construct some interesting extensions of formal theories such as context-based
concurrent group theory (Proposition 8.1) and context-based concurrent Boolean
algebra (Proposition 8.2). Both theories are deﬁned on some concurrent processes,
which cannot be obtained as inductive compositions of atomic actions.
Hence, the bio-inspired game theory is based on context-based (or hybrid) actions
assuming an unlimited variety of possible modiﬁcations. The two formal theories for
these actions are given in Propositions 8.1 and 8.2. The same idea of non-well-
foundedness of behaviour can be reformulated as rough transitions. About rough set
models of Physarum polycephalum transitions in games, please see [1, 6, 48, 49].1
References
1. Pancerz, K., Schumann, A.: Rough set description of strategy games on Physarum machines.
In: Adamatzky, A. (ed.) Advances in Unconventional Computing, Volume 2: Prototypes,
Models and Algorithms, Emergence, Complexity and Computation, vol. 23, pp. 615–636.
Springer International Publishing (2017)
1About the notion of rough set, please see [50–52].

References
311
2. Schumann, A.: Go games on plasmodia of Physarum polycephalum. In: 2015 Federated
Conference on Computer Science and Information Systems, FedCSIS 2015, Lódz, Poland,
13–16 Sept 2015, pp. 615–626 (2015). https://doi.org/10.15439/2015F236
3. Schumann, A.: Towards context-based concurrent formal theories. Parallel Proc. Lett. 25,
1540,008 (2015)
4. Schumann, A.: Syllogistic versions of go games on Physarum. In: Adamatzky, A. (ed.)
Advances in Physarum Machines: Sensing and Computing with Slime Mould, pp. 651–685.
Springer International Publishing, Cham (2016)
5. Schumann, A., Pancerz, K.: Interfaces in a game-theoretic setting for controlling the plasmod-
ium motions. In: Proceedings of the 8th International Conference on Bio-inspired Systems
and Signal Processing (BIOSIGNALS’2015), pp. 338–343, Lisbon, Portugal (2015)
6. Schumann, A., Pancerz, K.: A rough set version of the go game on Physarum machines.
In: Suzuki, J., Nakano, T., Hess, H. (eds.) Proceedings of the 9th International Conference
on Bio-inspired Information and Communications Technologies (BICT’2015), pp. 446–452.
New York City, New York, USA (2015)
7. Schumann, A., Pancerz, K., Adamatzky, A., Grube, M.: Bio-inspired game theory: the case of
Physarum polycephalum. In: Suzuki, J., Nakano, T. (eds.) Proceedings of the 8th International
Conference on Bio-inspired Information and Communications Technologies (BICT’2014),
pp. 9–16, Boston, Massachusetts, USA (2014)
8. Schumann, A., Pancerz, K., Adamatzky, A., Grube, M.: Context-based games and Physarum
polycephalum as simulation model. In: Proceedings of the Workshop on Unconventional
Computation in Europe, London, UK (2014)
9. Schumann, A., Pancerz, K., Szelc, A.: The swarm computing approach to business intelli-
gence. Studia Humana 4(3), 41–50 (2015). https://doi.org/10.1515/sh-2015-0019
10. Schumann, A., Szelc, A.: Towards new probabilistic assumptions in business intelligence.
Studia Humana 3(4), 11–21 (2014). https://doi.org/10.1515/sh-2015-0003
11. Arellano, M.: Panel Data Econometrics. Oxford University Press (2003)
12. Davidson, R., MacKinnon, J.G.: Econometric Theory and Methods. Oxford University Press
(2004)
13. McPherson, G.: Statistics in Scientiﬁc Investigation: Its Basis. Springer, Application and
Interpretation (1990)
14. Wooldridge, J.M.: Econometric Analysis of Cross Section and Panel Data. MIT Press, Cam-
bridge MA (2002)
15. Bourdieu, P.: Acts of Resistance: Against the Tyranny of the Market. New Press (1999)
16. Bourdieu, P., Wacquant, L.J.D.: An Invitation to Reﬂexive Sociology. University of Chicago
Press, Chicago and London (1992)
17. Althusser, L., Balibar, E.: Reading Capital. Verso, London (2009)
18. Marx, K., Engels, F.: Collected Works of Karl Marx and Frederick Engels. International
Publishers, New York (1988)
19. Mead, G.H.: Mind, Self, and Society. University of Chicago Press, Chicago (1934)
20. Mead, G.H.: Movements of Thought in the Nineteenth Century. University of Chicago Press,
Chicago (1936)
21. Mead, G.H.: The Philosophy of the Act. University of Chicago Press, Chicago (1938)
22. Blümer, H.G.: George Herbert Mead and Human Conduct (2004)
23. Blümer, H.G.: Symbolic Interactionism: Perspective and Method (1969)
24. Crawford, V.P., Iriberri, N.: Level-k auctions: can a nonequilibrium model of strategic thinking
explain the winner’s curse and overbidding in private-value auctions? Econometrica 75(6),
1721–1770 (2007)
25. Winrich, J.S.: Self-reference and the incomplete structure of neoclassical economics. J. Econ.
Issues 18(4), 987–1005 (1984)
26. Bourdieu, P.: Language and Symbolic Power. Harvard University Press (1991)
27. Schumann, A.: Reﬂexive games and non-archimedean probabilities. P-Adic Numbers Ultra-
metr. Anal. Appl. 6(1), 66–79 (2014)

312
8
Context-Based Games of Swarms
28. Pancerz, K., Schumann, A.: Some issues on an object-oriented programming language for
Physarum machines. In: Bris, R., Majernik, J., Pancerz, K., Zaitseva, E. (eds.) Applications of
Computational Intelligence in Biomedical Technology, Studies in Computational Intelligence,
vol. 606, pp. 185–199. Springer International Publishing, Switzerland (2016)
29. Schumann, A., Pancerz, K.: Towards an object-oriented programming language for Physarum
polycephalum computing. In: Szczuka, M., Czaja, L., Kacprzak, M. (eds.) Proceedings of
the Workshop on Concurrency, Speciﬁcation and Programming (CS&P’2013), pp. 389–397,
Warsaw, Poland (2013)
30. Pancerz, K., Schumann, A.: Principles of an object-oriented programming language for
Physarum polycephalum computing. In: Proceedings of the 10th International Conference
on Digital Technologies (DT’2014), pp. 273–280, Zilina, Slovak Republic (2014)
31. Schumann, A., Pancerz, K.: Towards an object-oriented programming language for Physarum
polycephalum computing: A Petri net model approach. Fundam. Informaticae 133(2–3), 271–
285 (2014)
32. Kim, J., Jeong, S.: Learn to Play Go. Good Move Press, New York (1994)
33. Schumann, A.: On two squares of opposition: the lesniewski’s style formalization of synthetic
propositions. Acta Anal. 28, 71–93 (2013)
34. Jones, J., Mayne, R., Adamatzky, A.: Representation of shape mediated by environmental
stimuli in Physarum polycephalum and a multi-agent model. JPEDS 32(2), 166–184 (2017)
35. Jacobs, B., Rutten, J.: A tutorial on (co)algebras and (co)induction. EATCS Bull. 62, 222–259
(1997)
36. Pavlovi´c, D., Escardó, M.H.: Calculus in coinductive form. In: Proceedings of the 13th Annual
IEEE Symposium on Logic in Computer Science, pp. 408–417 (1998)
37. Rutten, J.J.M.M.: A coinductive calculus of streams. Math. Struct. Comput. Sci. 15(1), 93–147
(2005)
38. Aczel, A.: Non-Well-Founded Sets. Stanford University Press (1988)
39. Adamatzky, A.: Physarum machine: implementation of a Kolmogorov-Uspensky machine on
a biological substrate. Parallel Proc. Lett. 17(4), 455–467 (2007)
40. Uspensky, V.U.: Kolmogorov and mathematical logic. J. Symb. Logic 57, 385–412 (1992)
41. Schumann, A., Adamatzky, A.: The double-slit experiment with Physarum polycephalum and
p-adic valued probabilities and fuzziness. Int. J. Gen. Syst. 44(3), 392–408 (2015)
42. Abramsky, S., Mellies, P.A.: Concurrent games and full completeness. In: Proceedings of the
14th Symposium on Logic in Computer Science, pp. 431–442 (1999)
43. Brenguier, R.: Praline: a tool for computing Nash equilibria in concurrent games. In: CAV,
pp. 890–895 (2013)
44. Bouyer, P., Brenguier, R., Markey, N., Ummels, M.: Concurrent games with ordered objec-
tives. In: FoSSaCS, pp. 301–315 (2012)
45. Bouyer, P., Brenguier, R., Markey, N., Ummels, M.: Nash equilibria in concurrent games with
büchi objectives. In: FSTTCS, pp. 375–386 (2011)
46. Feynman, R.P.: Quantum mechanical computers. Found. Phys. 16(6), 507–531
47. Sleator, T., Weinfurter, H.: Realizable universal quantum logic gates. Phys. Rev. Lett. 74,
4087–4090 (1995)
48. Pancerz, K., Schumann, A.: Rough set models of Physarum machines. Int. J. Gen. Syst. 44(3),
314–325 (2015)
49. Schumann, A., Pancerz: Roughness in timed transition systems modeling propagation of
plasmodium. In: Ciucci, D., Wang, G., Mitra, S., Wu, W.Z. (eds.) Rough Sets and Knowl-
edge Technology, Lecture Notes in Artiﬁcial Intelligence, vol. 9436. Springer International
Publishing (2015)
50. Dubois, D., Prade, H.: Rough fuzzy sets and fuzzy rough sets. Int. J. Gen. Syst. 17(2–3),
191–209 (1990)
51. Petri, C.A.: Kommunikation mit automaten. Schriften des IIM nr. 2, Institut für Instrumentelle
Mathematik, Bonn (1962)
52. Ziarko, W.: Variable precision rough set model. J. Comput. Syst. Sci. 46(1), 39–59 (1993)

Chapter 9
Logics for Preference Relations in Swarm
Behaviours
Each action of swarm can have many possible modiﬁcations. It means that preference
relations of swarm are being modiﬁed, too. As far as we know, there are at least the
following two ways of modiﬁcations in sensing and motoring: (i) the lateral inhibition
with increasing the proto-symbolic value of item and, as a result, with concentrating
on the chosen item; and (ii) the lateral activation with decreasing the proto-symbolic
value of concrete items which causes a consideration of many items simultaneously.
In this chapter I am going to examine inﬂuences of lateral inhibition and lateral
activation on preference relations of swarms. See [1–5].
9.1
Preference Relation
A preference relation Ri(a, b) that is read as follows: “agent i prefers alternative
a to alternative b”, is one of the basic notions in decision making and games. Due
to preference relations any choice is possible. There are two main possibilities in
deﬁning preferences: (i) by evaluating each alternative individually; (ii) by evaluating
each pair of alternatives. The second approach was proposed ﬁrst as the Thurstone’s
law of comparative judgment [6]. Then it was developed as the pairwise comparisons
method [7, 8] that is applied in the analytic hierarchy process [9] and the complex
decision process [10, 11].
The pairwise comparisons method allows us to express preference relations in a
qualitative way. So, given a set of n objects and a set of binary comparisons between
pairs of objects, we face n · (n −1)/2 possible comparisons. These comparisons can
be measured either actively, or recursively. As a result, we ﬁnd all binary comparisons
ci, j for any pairs (i, j), i, j = 1, 2, . . . , n, of n objects such that ci, j = 1 ⇔Π(i) <
Π( j), where Π : {1, . . . , n} →R+ is a scoring function. Due to the scoring function,
a decision maker can claim how many times the j-th object is preferred than the i-th
one (i.e. ai j · Π(i) = Π( j)). This result of comparisons is denoted by ai j. Usually,
it is assumed that the scores have the following properties: (i) ai j > 0; (ii) aii = 1;
© Springer International Publishing AG, part of Springer Nature 2019
A. Schumann, Behaviourism in Studying Swarms: Logical Models of Sensing
and Motoring, Emergence, Complexity and Computation 33,
https://doi.org/10.1007/978-3-319-91542-5_9
313

314
9
Logics for Preference Relations in Swarm Behaviours
(iii) ai j = 1/a ji. The scores are involved in matrices A = [ai j] which are called
pairwise comparison matrices or positive reciprocal matrices. See [12–17].
Comparisons can be formulated in many forms: “player j won against player
i” or “the boss accepted report j instead of i”, etc. In any case it is supposed that
the decision maker can compare any two items of n objects. This assumption is
called comparability. It is very strong, because comparisons can ever give not only a
preference relation, but also an indifference relation or an incomparability relation.
The comparison is one of the most fundamental cognitive activities in decision
making from swarms to human beings. In this chapter, I propose two logical models
of comparisons with four relations (‘S is at least as good as P’, ‘S is not at least
as good as P’, ‘S is at least as bad as P’, and ‘S is not at least as bad as P’) on
the basis of two models of preferences on the level of neuron networks: with lateral
inhibition and lateral activation. Also, I show that the logical model that satisﬁes the
lateral inhibition in preferring some items can be formalized as an Aristotelian sys-
tem, while the logical model that satisﬁes lateral activation effects can be formalized
as a non-Aristotelian system. I demonstrate that in the Aristotelian system the prefer-
ence relation is quantitative (numerically expressible), while in the non-Aristotelian
system the preference relation is qualitative (without numerical shaping). To sum up,
we show that there are cases of comparisons when the scoring function is just sub-
jective and has no real meaning. Hence, we can build effective pairwise comparisons
without the comparability assumption.
9.1.1
Preferences with Lateral Inhibition and Lateral
Activation
Let us start with considering preference relations on the level of neurons. It is known
from neurobiology that there are two different synaptic effects: (i) excitatory effect
(depolarization) that increases the membrane potential to make neuron more neg-
ative and to decrease the likelihood of an action potential and (ii) inhibitory effect
(hyperpolarization) that decreases the membrane potential to make neuron more
positive and to increase the likelihood of an action potential. So, lateral activation
is the structuring of a neural network so that neurons activate their neighbours to
decrease their own responses and lateral inhibition is the structuring of a neural net-
work so that neurons inhibit their neighbours in proportion to their own excitation.
In other words, the more neighbouring neurons stimulated, the less strongly a neuron
responds and the fewer neighbouring neurons stimulated, the more strongly a neuron
responds. For example, the lateral activation decreases the contrast and sharpness in
visual response to describe more explicitly all the edges and regions in the image. In
this case we deal with the so-called low-level vision. The lateral inhibition increases
the contrast and sharpness in visual response to perform an overall action-oriented
interpretation of the scene. It is the so-called high-level vision.

9.1 Preference Relation
315
Thus, in the lateral inhibition and lateral activation modes we prefer items in a
different manner: in the lateral inhibition we compare a few items with their pos-
sible (numerical) comparability to formulate explicit preference relations, while in
the lateral activation we compare many items and put forward general estimations
without details and without scoring functions. As we see, only the lateral inhibition
model corresponds to the classical pairwise comparisons method [7, 8].
There are populations which behave as a distributed network, capable of respond-
ing to a wide range of spatially represented stimuli, for example, colonies of ants
or fungi have such a behaviour. In their behaviours we can observe effects of neural
networks with lateral activation and lateral inhibition mechanisms. It was shown
experimentally that effects of lateral activation and lateral inhibition are detected in
the plasmodium of Physarum polycephalum, the supergroup Amoebozoa, phylum
Mycetozoa, class Myxogastria (see [18]). This means that we can perform experi-
ments how the plasmodium prefers items in the two different modes: within lateral
inhibition and lateral activation. Let us recall that the plasmodium is an active feed-
ing stage of Physarum polycephalum that moves by protoplasmic streaming and
can switch its direction or even multiply in accordance with appropriate attractants
(chemical signals which attract the organism) and repellents (chemical signals which
repel it). This behaviour is intelligent and can be controlled by different locations of
chemical signals attracting and repelling the plasmodium.
The true slime mould (plasmodium) of Physarum polycephalum has the follow-
ing two distinct stages in responding to signals: ﬁrst, the sensory stage (perceiving
signals) and, second, the motor stage (action as responding). The effect of lateral
activation in the plasmodium is to decrease contrast between spatial environmental
stimuli at the sensory stage and to split protoplasmic tubes towards two or more
attractants at the motor stage (Fig.9.1a). The effect of lateral inhibition is to increase
contrast between spatial environmental stimuli at the sensory stage and to fuse pro-
toplasmic tubes towards one attractant at the motor stage (Fig.9.1b). Hence, in the
lateral activation the plasmodium prefers items by splitting tubes and in lateral inhi-
bition the plasmodium prefers items by fusing the same tubes.
Fig. 9.1 The two plasmodia propagate protoplasmic tubes towards three attractants denoted by
black circles: a the splitting of protoplasmic tubes of each plasmodium. b The fusion of two
plasmodia by the fusion of their protoplasmic tubes, see [5]

316
9
Logics for Preference Relations in Swarm Behaviours
Thus, in the plasmodium approximation of the neural response, the lateral acti-
vation is represented by chemoattraction with splitting of plasmodium and lateral
inhibition is represented by chemoattraction with fusion of plasmodia. Both are the
two different ways of distribution density of protoplasmic network, i.e. the two dif-
ferent ways of the plasmodium concentration in its networking. So, the phenomenon
of lateral activation on plasmodium can be explained by means of splitting in plas-
modium motions towards attractants and the phenomenon of lateral inhibition on
plasmodium can be explained by means of fusion in plasmodium motions towards
attractants. Fusion and splitting are key motions in the plasmodium propagation as
well as lateral inhibition and lateral activation are key reactions of neural nets to stim-
uli. Notably, the fusion and splitting of plasmodium can be interpreted syllogistically.
The spatial deducing according to fusion is formalized as a spatial version of Aris-
totelian syllogistic (see Sect.7.2.2) and the spatial deducing according to splitting is
formalized as a spatial version of performative syllogistic (see Sect. 7.2.3) deﬁned in
[2] (the word ‘performative’ refers to modes of symbolic behaviour: ‘think’, ‘like’,
‘order’, ‘ask’, etc.).
9.1.2
Aristotelian System for Preference Relations
Let us ﬁrst consider the syllogistic of plasmodium fusion as a cognition model by
lateral inhibition. In this syllogistic, all data points are denoted by appropriate syllo-
gistic letters as attractants. These attractants are scattered at different places and the
swarm (the plasmodium or ant nest) tries to occupy them. A data point S is consid-
ered empty if and only if an appropriate attractant denoted by S is not occupied by
the swarm (the plasmodium or ant nest). We have syllogistic strings of the form SP
with the following interpretation: ‘S and P are comparable positively’, and with the
following meaning: SP is true if and only if S and P are neighbours and both S and
P are not empty, otherwise SP is false. By this deﬁnition of syllogistic strings, we
can deﬁne atomic syllogistic propositions as follows:
SaLI P
In the formal syllogistic: “for agent i, alternative P is at least as good as
alternative S”, formally: there exists A such that AS and for any A, if AS, then
AP. In the Physarum model: “for the plasmodium, alternative P is at least as good
as alternative S”, formally: there is a plasmodium at A such that cells A and S
are connected by protoplasmic tubes and for any cell A, if A and S are connected
by protoplasmic tubes, then A and P are connected by protoplasmic tubes. In the
ant model: “for the ant nest, alternative P is at least as good as alternative S”,
formally: there are ants at A such that cells A and S are connected by ant trails and
for any cell A, if A and S are connected by ant trails, then A and P are connected
by ant trails.
SiLI P
In the formal syllogistic: “for agent i, alternative P is not at least as bad
as alternative S”, formally: there exists A such that both AS is true and AP is
true. In the Physarum model: “for the plasmodium, alternative P is not at least as

9.1 Preference Relation
317
bad as alternative S”, formally: there exists a plasmodium at A such that A and S
are connected by protoplasmic tubes and A and P are connected by protoplasmic
tubes. In the ant model: “for the ant nest, alternative P is not at least as bad as
alternative S”, formally: there are ants at A such that A and S are connected by
ant trails and A and P are connected by ant trails.
SeLI P
In the formal syllogistic: “for agent i, alternative P is at least as bad as
alternative S”, formally: for all A, AS is false or AP is false. In the Physarum
model: “for the plasmodium, alternative P is at least as bad as alternative S”,
formally: for all cells A, A and S are not connected by protoplasmic tubes or A
and P are not connected by protoplasmic tubes. In the ant model: “for the ant
nest, alternative P is at least as bad as alternative S”, formally: for all cells A, A
and S are not connected by ant trails or A and P are not connected by ant trails.
SoLI P
In the formal syllogistic: “for agent i, alternative P is not at least as good
as alternative S”, formally: for any A, AS is false or there exists A such that AS
is true and AP is false. In the Physarum model: “for the plasmodium, alternative
P is not at least as good as alternative S”, formally: for any cell A, A and S are
not connected by protoplasmic tubes or there exists cell A such that A and S are
connected by protoplasmic tubes and A and P are not connected by protoplasmic
tubes. In the ant model: “for the ant nest, alternative P is not at least as good as
alternative S”, formally: for any cell A, A and S are not connected by ant trails
or there exists cell A such that A and S are connected by ant trails and A and P
are not connected by ant trails.
According to these deﬁnitions, it is easy to see that we deal there with the Aris-
totelian syllogistic formalized within Le´sniewski’s ontology [2] (see Deﬁnition 7.3
and Proposition 7.1). The semantics for this system is represented by swarm motions
with emphasis on fusions, e.g. on a fusion of plasmodia or a fusion of ant trails. Let
M be a set of attractants. Take a subset |X| ⊆M of attractants occupied by the swarm
as a meaning for each syllogistic variable X. Let an ordering relation ⊆be deﬁned
on subsets |S|, |P| ⊆M thus: |S| ⊆|P| iff all attractants from |S| are connected by
swarm transport nets with some attractants from |P|. Notice that this means that at
the points of |P| we observe fusions of some swarm transport roads started from
the points of |S|. Hence, |S| ∩|P| ̸= ∅means that some attractants from |S| are
connected by the swarm road with the attractants from |P|. In other words, at the
data points of |P| we detect fusions of transport roads started from the points of |S|
more rarely than in case |S| ⊆|P|. Finally, |S| ∩|P| = ∅means that no attractants
from |P| are connected by roads with the attractants from |S|. In other words, at the
points of |P| we cannot see any fusion of transport roads started from the points of
|S|. This gives rise to models M = ⟨M, | · |⟩such that
M |= SaLI P iff |S| ⊆|P|;
M |= SiLI P iff |S| ∩|P| ̸= ∅;
M |= SeLI P iff |S| ∩|P| = ∅;
M |= p ∧q iff M |= p and M |= q;
M |= p ∨q iff M |= p or M |= q;
M |= ¬p iff it is false that M |= p.

318
9
Logics for Preference Relations in Swarm Behaviours
In these models, the inclusion relation ⊆has the meaning of fusions. We have:
Proposition 9.1 The Aristotelian syllogistic is sound and complete relatively to M
if we understand ⊆formally as an inclusion relation and semantically as fusions of
swarm roads.
□
9.1.3
Performative Syllogistic System for Preference
Relations
The fusion is a motor stage of swarm that corresponds to the lateral inhibition in
responding to stimuli. However, the swarm (such as the plasmodium or the ant
nest) more often prefers to be propagated in all possible directions, i.e. more often it
performs the splitting of transport roads towards the attractants. Now, let us construct
the syllogistic of swarm splitting as a cognition model by lateral activation, the so-
called performative syllogistic veriﬁed on swarms (see Propositions 7.2 and 7.3
and Axioms (7.21)–(7.27)). In the same way as in the case of Aristotelian syllogistic
implementation, we interpret all data points denoted by appropriate syllogistic letters
as attractants. A data point S is considered empty if and only if an appropriate
attractant denoted by S is not occupied by the swarm. Let us deﬁne syllogistic strings
oftheform SP withthefollowinginterpretation:‘S and P arecomparablepositively’,
and with the following meaning: SP is true if and only if S and P are reachable for
each other by the swarm and both S and P are not empty, otherwise SP is false. Using
this deﬁnition of syllogistic strings, we can deﬁne atomic syllogistic propositions as
follows:
SaL A P
In the formal performative syllogistic: “for agent i, alternative P is at least
as good as alternative S”, formally: there exists A such that AS is true and for
any A, AS is true and AP is true. In the Physarum model: “for the plasmodium,
alternative P is at least as good as alternative S”, formally: there is a string AS
and for any cell A which is a neighbour for S and P, there are strings AS and
AP. This means that we have a massive-parallel occupation of the region where
the cells S and P are located. In the ant model: “for the ant nest, alternative P is
at least as good as alternative S”, formally: there is a string AS and for any cell
A which is a neighbour for S and P, there are strings AS and AP.
SiL A P
In the formal performative syllogistic: “for agent i, alternative P is not at
least as bad as alternative S”, formally: for any A, both AS is false and AP is false.
In the Physarum model: “for the plasmodium, alternative P is not at least as bad
as alternative S”, formally: for any cell A which is a neighbour for S and P, there
are no strings AS and AP. This means that the plasmodium cannot reach S from
P or P from S immediately. In the ant model: “for the ant nest, alternative P is
not at least as bad as alternative S”, formally: for any cell A which is a neighbour
for S and P, there are no strings AS and AP.
SeL A P
In the formal performative syllogistic: “for agent i, alternative P is at least
as bad as alternative S”, formally: there exists A such that if AS is false, then
AP is true. In the Physarum model: “for the plasmodium, alternative P is at least

9.1 Preference Relation
319
as bad as alternative S”, formally: there exists cell A which is a neighbour for S
and P such that there is a string AS or there is a string AP. This means that the
plasmodium occupies S or P, but not the whole region where the cells S and P
are located. In the ant model: “for the ant nest, alternative P is at least as bad as
alternative S”, formally: there exists cell A which is a neighbour for S and P such
that there is a string AS or there is a string AP.
SoL A P
In the formal performative syllogistic: “for agent i, alternative P is not at
least as good as alternative S”, formally: for any A, AS is false or there exists A
such that AS is false or AP is false. In the Physarum model: “for the plasmodium,
alternative P is not at least as good as alternative S”, formally: for any cell A which
is a neighbour for S and P there is no string AS or there exists cell A which is a
neighbour for S and P such that there is no string AS or there is no string AP.
This means that the plasmodium does not occupy S or there is a neighbouring cell
which is not connected to S or P by a protoplasmic tube. In the ant model: “for
the ant nest, alternative P is not at least as good as alternative S”, formally: for
any cell A which is a neighbour for S and P there is no string AS or there exists
cell A which is a neighbour for S and P such that there is no string AS or there
is no string AP.
In the syllogistic for the lateral activation in the swarm behaviour we have the
following Axioms:
SaL A P := (∃A(AisS) ∧(∀A(Ais S ∧Ais P)));
(9.1)
SoL A P := ¬(∃A(Ais S) ∨(∀A(Ais P ∧Ais S))), i.e.
(∀A¬(Ais S) ∧∃A(¬(Ais P) ∨¬(Ais S)));
(9.2)
SeL A P := ¬∀A(¬(Ais S) ∧¬(Ais P)), i.e.
∃A(Ais S ∨Ais P).
(9.3)
SiL A P := ∀A(¬(Ais S) ∧¬(Ais P))
(9.4)
SaL A P ⇒SeL A P;
(9.5)
SaL A P ⇒PaL AS;
(9.6)
SiL A P ⇒PiL AS;
(9.7)
SaL AM ⇒SeL A P;
(9.8)
MaL A P ⇒SeL A P;
(9.9)
(MaL A P ∧SaL AM) ⇒SaL A P;
(9.10)
(MiL A P ∧SiL AM) ⇒SiL A P.
(9.11)

320
9
Logics for Preference Relations in Swarm Behaviours
The formal properties of this axiomatic system are considered in [2]. Within this
system we can study how the swarm realizes the lateral activation at the motor stage
in occupying all possible attractants in any direction if it can reach them. A model
M ′ = ⟨M′, | · |x⟩for this syllogistic, where M′ is the set of attractants and |X|x ⊆M′
is a meaning of syllogistic letter X which is understood as all attractants reachable
for the swarm from the point x, is deﬁned as follows:
M ′ |= ‘alternative y is at least as good as alternative x’ iff |X|x ̸= ∅, |X|y ̸= ∅,
and |X|x ∩|X|y ̸= ∅, i.e. the swarm can move from neighbours of y to x and it can
move from neighbours of x to y;
M ′ |= ‘alternative y is not at least as bad as alternative x’ iff y /∈|X|x and x /∈
|X|y, i.e. the swarm cannot move from neighbours of y to x and it cannot move from
neighbours of x to y;
M ′ |= ‘alternative y is at least as bad as alternative x’ iff y ∈|X|x or x ∈|X|y,
i.e. the swarm can move from neighbours of y to x or it can move from neighbours
of x to y;
M ′ |= ‘alternative y is not at least as good as alternative x’ iff y /∈|X|x or x /∈
|X|y, i.e. the swarm cannot move from neighbours of y to x or it cannot move from
neighbours of x to y;
M ′ |= p ∧q iff M ′ |= p and M ′ |= q;
M ′ |= p ∨q iff M ′ |= p or M ′ |= q;
M ′ |= ¬p iff it is false that M ′ |= p.
In these models, the non-empty intersection ∩has the meaning of splitting:
Proposition 9.2 The performative syllogistic is sound and complete relatively to
M ′ if we understand ∩formally as a non-empty intersection and semantically as
splitting of swarm roads.
□
Hence, lateral inhibition effects in the networking behaviour can be formalized
within the Aristotelian syllogistic (Proposition 9.1) and lateral activation effects can
be formalized within the performative syllogistic (Proposition 9.2). Both models
provide an account of how we can carry out comparisons to build up preference
relations. So, preference relations can be realized in the following two basic ways:
twoitemscanbecomparedeitherwithlateralinhibitioneffectswithintheAristotelian
syllogistic, when we increase “contrast” of events, or with lateral activation effects
within the performative syllogistic, when we decrease “contrast” of events to observe
all observable phenomena as one picture.
9.2
Measurable and Non-measurable Pairwise
Comparisons
Notably, the Aristotelian syllogistic (Proposition 9.1) and the performative syllogistic
(Proposition 9.2) have so different sets of theorems (true propositions). In particular,
the conventional logical square of opposition (CLSO) holds true in the Aristotelian
syllogistic and it is false in the performative syllogistic [2].

9.2 Measurable and Non-measurable Pairwise Comparisons
321
9.2.1
Conventional Logical Square of Opposition for
Preference Relations
CLSO is a propositional function SQUARECLSO(α, β, γ, δ), where α, β, γ , δ
are well-formed formulas of Aristotelian syllogistic such that (i) ⊢(α ⇒γ ), (ii)
⊢¬(α ⇔δ), (iii) ⊢(β ⇒δ), and (iv) ⊢¬(β ⇔γ ), where α is ‘SaLI P’, β is
‘SeLI P’, γ is ‘SiLI P’, and δ is ‘SoLI P’.1
Formally speaking, CLSO is deﬁned by the following provable formulas (we
neglect possible simpliﬁcations):
⊢¬(α ∧β)
(α
and
β
are
contrary);
⊢(α ⇒γ )
(α
entails
γ ;
γ
is
subordinated
to
α);
⊢(β ⇒δ)
(β
entails
δ;
δ
is
subordinated
to
β);
⊢¬(α ⇔δ)
(α
and
δ
are
contradictory);
⊢¬(β ⇔γ )
(β
and
γ
are
contradictory);
⊢(γ ∨δ)
(γ
and
δ
are
complementary).
It is readily seen that CLSO also displays the dependencies between alethic modal
statements, like ‘it is necessary that A’ (=α), ‘it is impossible that A’ (=β), ‘it is
possible that A’ (=γ ) and ‘it is possible that not A’ (=δ). Also, CLSO can have many
other logical interpretations, such as deontic, temporal, epistemic, argumentative,
etc. They constitute the extended variety of modalities, that is, not restricted to its
alethic species. About interpretations and theorems of modal logic see for example
[19].
Assume that in pairwise comparisons analysis we deal with two items α and γ
with the same propositional content A, such that α is modally stronger and γ is
modally weaker. It means that α ⇒γ . For example, let α mean ‘ordering to do A’
and γ mean ‘asking to do A’ or let α mean ‘it is a reason for concluding A’ and γ
mean ‘it is a reason supporting A’, etc. Let us introduce two modalities • and ◦with
the following meaning: •A ⇒◦A, i.e. •A is modally stronger and ◦A is modally
weaker, e.g. •A means ‘believing that A’ and ◦A means ‘not believing that not-A’
(i.e. ‘assuming that A’).
1In the previous section we have proposed the following interpretations of atomic syllogistic propo-
sitions: SaLI P is ‘alternative P is at least as good as alternative S’, SeLI P is ‘alternative P is at
least as bad as alternative S’, SiLI P is ‘alternative P is not at least as bad as alternative S’, and
SoLI P is ‘alternative P is not at least as good as alternative S’.

322
9
Logics for Preference Relations in Swarm Behaviours
We can construct now many preference relations of the form:
Weak agent
‘agent i prefers ◦A instead of •A’ iff •A ⇒◦A;
Strong agent
‘agent i prefers •A instead of ◦A’ iff •A ⇒◦A,
where • and ◦are performative verbs: ‘think’, ‘like’, ‘order’, ‘ask’, etc.
An example of the weak agent: (s)he prefers not to believe that not-A instead of
that to believe that A.2 An example of the strong agent: (s)he prefers to insist that A
instead of that to ask that A.3
Between both items •A and ◦A the relationship can be measurable by numbers,
that is, there is a function f (in fact, it is a scale) running over modal formulas
with values in R+, such that f (•A) ≤f (◦A) for weak agents and f (•A) ≥f (◦A)
for strong agents. This function f can partially order all modal formulas, where •
would mean any performative verb (expressing illocutionary acts, like commanding,
believing, asking, suggesting, etc.; note that in the case of humans performative
verbs mostly refer to actions with explicit mental parameters) that is stronger than a
performative verb denoted by ◦(represented by ¬ • ¬).
Due to f , performative verbs with the same propositional content satisfy the
relationships of
SQUARECLSO(α, β, γ, δ),
where α is interpreted as •A, β as •¬A, γ as ◦A and δ as ◦¬A, where A stands for
arbitrary well-formed formula of classical propositional logic. So, we have:
SQUARECLSO(α, β, γ, δ) := (a) ⊢(•A ⇒◦A); (b) ⊢¬(•A ⇔◦¬A);
(c) ⊢¬(◦A ⇔•¬A).
Then we have the following facts:
⊢(•A ⇔¬ ◦¬A)
(• is def inable as ¬ ◦¬);
⊢(◦A ⇔¬ • ¬A)
(◦is def inable as ¬ • ¬),
which additionally illuminates logical behaviour of modalities (of all kinds) modulo
their mutual inter-deﬁnability.
Returning to lateral inhibition as described in the previous section we deal with
pairwise comparisons satisfying SQUARECLSO(α, β, γ, δ). In this case pairs α and
γ (respectively, β and δ) can be measurable by numbers, provided that a function f
is available. This scheme works for any kind of scaling, that is, purely comparative,
interval or quotient. Note that we do not decide which kind of scaling is proper and
deserve to be termed as reasonably mathematical.
2In this case •A means ‘believe that A’ and ◦A means ‘not believe that not-A’.
3In this case •A means ‘insist that A’ and ◦A means ‘ask that A’.

9.2 Measurable and Non-measurable Pairwise Comparisons
323
So,lateralinhibitioneffectsinpreferencerelationswithperformativeverbsconsist
in that we increase a “contrast” of one performative verb denoted by weak modal-
ities ◦A to obtain another performative verb denoted by strong modalities •A. As
a result, all possible preference relations with performative verbs running the same
propositional content are described by SQUARECLSO(α, β, γ, δ) and we can deal
with a numerical scale of comparisons. In the meanwhile, we can deal there with
two different agents: weak and strong. A weak agent prefers weak modalities (weak
performative verbs). A strong agent prefers strong modalities (strong performative
verbs).
9.2.2
Unconventional Logical Square of Opposition
for Preference Relations
Notably,CLSOisnotvalidinperformativesyllogistic.InsteadofCLSO,theso-called
unconventional logical square of opposition (ULSO) holds [2]. It is a propositional
function SQUAREU LSO(α, β, γ, δ), where α, β, γ , δ are well-formed formulas of
performative syllogistic such that (i) ⊢(α ⇒γ ), (ii) ⊢¬(α ⇔δ), (iii) ⊢(β ⇒δ),
and (iv) ⊢¬(β ⇔γ ), where α is ‘SaL A P’, β is ‘SiL A P’, γ is ‘SeL A P’, and δ is
‘SoL A P’. Now let us show how SQUAREU LSO(α, β, γ, δ) is veriﬁed on prefer-
ence relations with performative verbs. Let •A be interpreted as a modally stronger
performative verb and ◦A as a modally weaker performative verb with the same
propositional content A. Let us consider pairs •A and •′¬A, where different perfor-
mative verbs • and •′ occur and these verbs belong to different groups of illocutions,
i.e. both cannot be simultaneously representatives, directives, declaratives, expres-
sive, or comissives. For instance, ‘believing’ and ‘knowing’ are both representatives
and ‘ordering’ and ‘insisting’ are both directives. Let ‘believing’ be denoted by •
and ‘ordering’ by •′. Notice that ‘assuming’ is modally weaker than ‘believing’, and
‘asking’ is modally weaker than ‘commanding’. So, ‘assuming’ can be denoted by
◦, and ‘asking’ can be denoted by ◦′, such that •A ⇒◦A and •′A ⇒◦′A and both
pairs are measurable by numbers. Nevertheless, pairs •A and •′¬A (respectively, ◦′A
and ◦¬A) cannot be measurable by numbers in any way, although we can deduce
•A ⇒•′¬A (respectively, ◦′A ⇒◦¬A) if we assume that the same propositional
content cannot be used by different illocutions in the same speech situation. For
example, if I believe that A, then I order to do not A, and if I ask to do A, then
I assume that not A. In other words, in the same speech situation only one illocu-
tion concerning A holds, all other illocutions can concern just not-A, where ‘not’ is
understood in the way of performative syllogistic: something from the complement
of A. The construction •A ⇒•′¬A (respectively, ◦′A ⇒◦¬A) ﬁts the situation that
a belief that A, a question that A, etc. are ever stronger than some other illocutions
(belonging to other illocution groups) related to not-A.

324
9
Logics for Preference Relations in Swarm Behaviours
Now, we can offer many new preference relations of the form:
Meditative agent
(i) ‘agent i prefers •′¬A instead of •A’ iff •A ⇒•′¬A; and (ii)
‘agent i prefers ◦¬A instead of ◦′A’ iff ◦′A ⇒◦¬A;
Active agent
(i) ‘agent i prefers •A instead of •′¬A’ iff •A ⇒•′¬A; (ii) and
‘agent i prefers ◦′A instead of ◦¬A’ iff ◦′A ⇒◦¬A.
where •, •′, ◦, and ◦′ are performative verbs: ‘think’, ‘like’, ‘order’, ‘ask’, etc.
An example of the meditative agent: (s)he prefers to believe that not-A instead of
that to order that A.4 An example of the active agent: (s)he prefers to insist that A
instead of that to believe that not-A.5 Let us notice that the lateral inhibition assumes
that agents are either weak or strong and the lateral activation assumes that agents
are either meditative or active.
ULSO is deﬁned as follows [2]:
SQUAREU LSO(α, β, γ, δ) := (a)
⊢(•A ⇒•′¬A);
(b)
⊢(◦′A ⇒◦¬A);
(c)
⊢¬(•A ⇔◦′¬A);
(d)
⊢¬(◦A ⇔•′¬A).
Between pairs •A and •′¬A (respectively, ◦′A and ◦¬A) there is, on the one
hand, the entailment relation, but, on the other hand, there are no numerical functions
(scales) such that f (•A) ≤f (•′¬A) or f (◦′A) ≤f (◦¬A).
The lateral activation effects in comparisons of performative verbs consist in that
we decrease “contrast” of modalities to accept different performative verbs at once,
i.e. •A and •′¬A (respectively, ◦′A and ◦¬A). As a consequence, our preference
relations with performative verbs running the same propositional content satisfy
SQUAREU LSO(α, β, γ, δ).
Hence, this analysis is related to the lateral activation as dealing with pairwise
comparisons satisfying SQUAREU LSO(α, β, γ, δ)—they are concluded from (9.1)–
(9.11). In this case pairs α and γ (respectively, β and δ) cannot be measurable by
numbers, because they are not mutually related by the quantitative ordering ≤. In
fact, it is not meaningful to say that our asking is stronger than our assuming that not,
although, on the other hand, we claim to ask A, therefore we assume not-A. Putting
this in other words, we only compare asking and assuming that not, but not asking
and not-asking. Now, the difference between the conventional square and unconven-
tional ones as devices for accounting claims for pairwise comparisons consists in
the following fact. If we take SQUARECLSO(α, β, γ, δ) as our general model we
can appeal to quantitative comparisons. If we take SQUAREU LSO(α, β, γ, δ) as our
general model we can appeal only to qualitative comparisons. So, SQUARECLSO(α,
β, γ , δ) can require scales, but SQUAREU LSO(α, β, γ , δ) cannot.
Thus, from the point of view of symbolic logic, our preference relations with
numerical scales can be formalized within the Aristotelian syllogistic with the basic
4In this case •′¬A means ‘believe that not-A’ and •A means ‘order that A’.
5In this case •A means ‘insist that A’ and •′¬A means ‘believe that not-A’.

9.2 Measurable and Non-measurable Pairwise Comparisons
325
propositions SQUARECLSO(α, β, γ, δ) and our preference relations without numer-
ical scales can be formalized within the performative syllogistic with the basic propo-
sitions SQUAREU LSO(α, β, γ, δ). The propositions SQUARECLSO(α, β, γ, δ) sat-
isfy lateral inhibition in our cognitions and the propositions SQUAREU LSO(α, β,
γ , δ) satisfy the lateral activation in our cognitions. Weak and strong agents are
focused on lateral inhibition effects, while meditative and active agents are focused
on lateral activation effects. As a result, we deal with two different ways of pairwise
comparisons and preference relations with two different approaches to the duality
between concepts.
9.3
Preference Relations for Swarm Intelligence
9.3.1
Social Behaviour and Swarm Behaviour
Usually, a social behaviour is understood as a synonymous to a collective animal
behaviour. It is claimed that there are many forms of this behaviour from bacteria
and insects to mammals including humans. So, bacteria and insects performing a
collective behaviour are called social.
For example, a prokaryote, a one-cell organism that lacks a membrane-bound
nucleus (karyon), can build colonies in a way of growing slime. These colonies
are called ‘bioﬁlms’. Cells in bioﬁlms are organized in dynamic networks and can
transmit signals (the so-called quorum sensing) [20]. As a result, these bacteria are
considered social. Social insects may be presented by ants—insects of the family
Formicidae. Due to a division of labour, they construct a real society of their nest
even with a pattern to make slaves. Also, Synalpheus regalis sp., a species of snapping
shrimp that commonly live in the coral reefs, demonstrates a collective behaviour like
ants. Among shrimps of the same colony there is one breeding female, as well, and a
labourdivisionofothermembers[21].Theant-likeorganizationofcolonyisobserved
amongsomemammals,too,e.g.amongnakedmole-rats(Heterocephalusglaber sp.).
In one colony they have only one queen and one to three males to reproduce, while
other members of the colony are just workers [22]. The same collective behaviour
is typical for Damaraland blesmols (Fukomys damarensis sp.), another mammal
species—they have one queen and many workers [23, 24]. There are swarms which
even make slaves from other groups, see the case of ants making slaves in [25].
All these patterns of ant-like collective behaviour (a brood care and a division
of labour into reproductive and non-reproductive groups) are evaluated as a form
of eusociality, the so-called highest level of organization of animal sociality [26].
Nevertheless,itisquitecontroversialifwecanregardtheant-likecollectivebehaviour
as a social behaviour, indeed. We can do it if and only if we concentrate, ﬁrst, on
outer stimuli controlling individuals and, second, on ‘social roles’ (‘worker’, ‘queen’,
etc.) of individuals as functions with some utilities for the group as such, i.e. if and
only if we follow, ﬁrst, behaviourism which represents any collective behaviour as

326
9
Logics for Preference Relations in Swarm Behaviours
a complex system that is managed by stimulating individuals (in particular by their
reinforcement and punishment) [27] and, second, if and only if we share the ideas of
structural functionalism which considers the whole society as a system of functions
(‘roles’) of its constituent elements [28]. In case we accept both behaviourism and
structural functionalism, we can state that a collective animal behaviour has the same
basic patterns from ‘social’ bacteria and ‘social’ insects to humans whose sociality
is evident for ourselves.
However, there are different approaches to sociality. One of the approaches, alter-
native to behaviourism and structural functionalism, is represented by symbolic inter-
actionism. In this approach, a collective behaviour is social if in the process of interac-
tion it involves a thought with a symbolic meaning that arises out of the interaction of
agents [29]. In other words, social behaviour is impossible without material culture,
e.g. without using some tools which always have symbolic meanings. Obviously, in
this sense the collective behaviour of ants cannot be regarded as social. There are no
tools and no symbolic meanings for the ants.
But not only humans perform social behaviour in the meaning of symbolic inter-
actionism. It is known that wild bottlenose dolphins (Tursiops sp.) “apparently use
marinespongesasforagingtools”[30]andthisbehaviourofthemcannotbeexplained
genetically or ecologically. This means that “sponging” is an example of an exist-
ing material culture in a marine mammal species and this culture is transmitted,
presumably by mothers teaching the skills to their sons and daughters [30].
Also, chimpanzees involve tools in their behaviours: large and small sticks as
well as large and small stones. In [31], the authors discover 39 different behaviour
patterns of chimpanzees, including tool usage, grooming and courtship behaviours.
It is a very interesting fact that some patterns of chimpanzees are habitual in some
communities but are absent in others because of different traditions of chimpanzee
material cultures [31]. Hence, we see that the collective behaviour of chimpanzees
can be evaluated as social, as well.
So, within symbolic interactionism we cannot consider any complex collective
behaviour, like the ant nest, as a social behaviour. The rest of complex behaviours
can be called a swarm behaviour. Its examples are as follows: swarming of insects,
ﬂockingofbirds,herdingofquadrupeds,schoolingofﬁsh.Inswarms,animalsbehave
collectively, e.g. in schools or ﬂocks each animal moves in the same direction as its
neighbour, it remains close to its neighbours, it avoids collisions with its neighbours
[32].
A group of people, such as pedestrians, can also exhibit a swarm behaviour like
a ﬂocking or schooling: humans prefer to avoid a person conditionally designated
by them as a possible predator and if a substantial part of the group (not less than
5%) changes the direction, then the rest follows the new direction [33]. An ant-
based algorithm can explain aircraft boarding behaviour [34]. Under the conditions
of escape panic the majority of people perform a swarm behaviour, too [35]. The
point is that a risk of predation is the main feature of swarming at all [36, 37]
and under these risk conditions (like a terrorist act) symbolic meanings for possible
human interactions are promptly reduced. As a consequence, the social behaviour
transforms into a swarm behaviour.

9.3 Preference Relations for Swarm Intelligence
327
Thus, we distinguish the swarm behaviour from the social one. The ﬁrst is fulﬁlled
without symbolic interactions, but it is complex, as well, and has an appearance from
a collective decision making. In the swarm behaviour, there are only two ways to
ascribe a proto-symbolic meanings to things: lateral inhibition and lateral activation.
In this chapter, I am going to show that an addictive behaviour of humans can be
considered a kind of swarm behaviour, also. The risk of predation is a main reason of
reducing symbolic interactions in human collective behaviours, but there are possible
other reasons like addiction. An addiction increases roles of addictive stimuli (e.g.
alcohol, morphine, cocaine, sexual intercourse, gambling, etc.) by their reinforcing
and intrinsically rewarding.
9.3.2
Common Patterns of Swarm Behaviour.
The Müller-Lyer Illusion
There are many optical illusions which show that there are different modalities in
perceiving signals which change our picture of reality. Let us consider the Müller-
Lyer illusion, see Fig.9.2. Traditionally, this illusion was explained as a combination
of two opposing factors: (i) lateral inhibition increasing contrast when two points
are seen closer than the objective display would justify (Fig.9.2a), and (ii) lateral
activation decreasing contrast when two points are seen too far apart to be consid-
ered currently (Fig.9.2b). The matter is that simple cells in primary visual cortex
have small receptive ﬁelds and respond preferentially to oriented bars. Then neu-
rons increase or decrease a receptive ﬁeld of visual cortex as a whole according to
concentrations of stimuli, see [38]. In case of increasing we see Fig.9.2a, in case of
decreasing we see Fig.9.2b.
Hence, perceiving the same line lengths is strongly biased by the neural-computa-
tion process in accordance with the stimulus distributions causing lateral inhibition or
lateral activation. It is possible to show that the same patterns of perceiving signals
can be detected at different levels of behaviours: from behaviours of unicellular
organisms even to swarming, such as to group behaviours of ant nests. So, in [39] it
was shown that the Müller-Lyer illusion holds for foraging ants, as well, see Fig.9.3.
It means that their swarm behaviour embodies lateral activation and lateral inhibition
in the group perceptions of signals. The authors of [39] explain this phenomenon
by that each swarm of ants has the following two main logistic tasks: (i) to build a
global routesystemconnectingthenest withfoodsources tomonopolizeall reachable
food sources (it corresponds to the lateral activation, that is, to the colony’s ability
to discover new food sources through exploration); (ii) to exploit effectively and
efﬁciently each found food source (it corresponds to the lateral inhibition, i.e. to the
colony’s ability to concentrate on some food sources). And there is an economic
balance which is analogous to the neurophysiological balance that generates the
Müller-Lyerillusion[39].Inthisanalogy,eachantinacolonycorrespondstoaneuron

328
9
Logics for Preference Relations in Swarm Behaviours
(a) Line with inward wings.
(b) Line with outward wings.
(c) Line without wings.
Fig. 9.2 The Müller-Lyer illusion. The lines of (a, b, c) are of the same length. Nevertheless, it
seems to us that the line with the inward wings (i.e. (a)) is shorter than line (b), and the line with
the outward wings (i.e. (b)) is longer than line (a)
or retinal cell and the behaviour of a swarm of ants corresponds to the behaviour of
a neurological ﬁeld.
The patterns of lateral activation and lateral inhibition in sensing and motoring can
be detected even at the level of unicellular organisms, such as the slime mould, also
called Physarum polycephalum. So, it is shown in [40] that Kanizsa illusory contours
appear in the plasmodium pattern of Physarum polycephalum. We can show that the
Müller-Lyer illusion holds for the plasmodium too, see Fig. 9.4. Indeed, we can
observe (i) a lateral inhibition when there are two points of higher concentration of
plasmodium with a distance that is shorter than the distance between two extremal
points of the straight line (Fig. 9.4a), and (ii) a lateral activation when there are two

9.3 Preference Relations for Swarm Intelligence
329
(a) Two points of highest concentrations of ants have a smaller dis-
tance than the distance between extremal points of the straight line.
(b) Two points of highest concentrations of ants have a longer dis-
tance than the distance between extremal points of the straight line.
Fig. 9.3 An example from experiments performed in [39] to show that the Müller-Lyer illusion
is detected in the swarm behaviour of ants. The authors of [39] located an attractant (honeydew
solution of 50% w/w) on cardboard in the shape of the Müller-Lyer ﬁgure. The ﬁgure consisted of
a 7.5-cm central shaft with two 3-cm wings pointing either inward or outward. As a result of this
experiment proved statistically, the distribution of ants repeats the Müller-Lyer illusion. It means
that the group sensing of ants repeats two patterns of perceiving performed by our neurons: i the
ﬁrst pattern is under condition of lateral inhibition (a); and ii the second pattern is under conditions
of lateral activation (b)

330
9
Logics for Preference Relations in Swarm Behaviours
(a) Two points of highest concentrations of plasmodium have a
smaller distance than the distance between extremal points of the
straight line.
(b) Two points of highest concentrations of plasmodium have a
longer distance than the distance between extremal points of the
straight line.
Fig. 9.4 A possible experiment analogous to the experiment carried out in [39] to show that the
Müller-Lyer illusion is detected in the swarm behaviour of Physarum polycephalum. We can locate
an attractant (high nutrient concentration) in the shape of the Müller-Lyer ﬁgure. As a result, we
can expect that the concentration of plasmodium repeats the Müller-Lyer illusion
points of higher concentration of plasmodium with a distance that is longer than the
distance between two extremal points of the straight line (Fig. 9.4b).
Thus, some optical illusions, such as the Müller-Lyer illusion, are connected to
combining lateral inhibition and lateral activation effects. Therefore, these illusions
are repeated in the swarm behaviour of Physarum polycephalum and foraging ants.

9.3 Preference Relations for Swarm Intelligence
331
9.3.3
Lateral Inhibition and Lateral Activation in the Swarm
Behaviour
Each animal behaviour can be stimulated by attractants (“pull”) and repellents
(“push”). For instance, in [41] there was proposed a combination of “pull” and “push”
methods for managing populations of German cockroach (Dictyoptera: Blattellidae).
Different patterns in reacting to attractants and repellents are well visible on
bacteria. In the absence of an attractant or repellent a bacterium such as Salmonella
typhimurium has the following stages in its motions: (i) the stage of run (it swims
in a smooth, straight line for several seconds); (ii) the stage of tumble (it thrashes
around for a fraction of a second); (ii) the stage of twiddle (it changes its direction);
(iv) the new stage of run (it again swims in a straight line, but in a new, randomly
chosen direction), see [42]. Under conditions of sensing attractants or repellents, a
bacterium has the same stages, but they lasted longer or shorter.
If there are different gradients of attractant, we face the following changes in the
bacterium stages:
• if a concentration of attractant increases, cells tumble less frequently.
• if a concentration of attractant decreases, bacteria tumble more frequently.
Under the conditions of different gradients of repellent, we see the following
opposite reactions:
• if a concentration of repellent increases, bacteria tumble more frequently.
• if a concentration of repellent decreases, they tumble less frequently.
Some bacteria can be grouped into swarms. For example, Myxococcus xanthus is
“a predatory surface-associated bacterium that moves in large multicellular groups
and secretes digestive enzymes to destroy and consume other bacteria in the envi-
ronment” [43]. Sometimes these multicellular groups form bioﬁlms in which sessile
bacteria secrete an extracellular matrix. Now, it is on open question how to deﬁne
all the details for attracting and repelling bacterial swarms [43]. Nevertheless, there
are some unicellular organisms, such as Physarum polycephalum, which have all the
basic swarm patterns in their behaviour, but for them the mechanism of attracting
and repelling is studied well.
Each bacterium can be attracted or repelled directly. But there are no bacteria
which can occupy several attractants simultaneously or which can avoid several
repellents at once. Only swarms can do it. And Physarum polycephalum can do it,
too. Let us consider an example of Fig.9.5. On the one hand, the slime mould can
react to both repellents (Fig.9.5a) to run away from them. On the other hand, the slime
mould can react to both attractants (Fig.9.5b) to occupy them. As a consequence,
we see a behavioural pattern of the Müller-Lyer illusion: (i) the distance between
two extremal points of plasmodium distribution became shorter under the condition
of lateral inhibition in Fig.9.5a, and (ii) the distance between two extremal points
of plasmodium distribution became longer under the condition of lateral activation
in Fig.9.5b. To compare, in the case of Fig.9.4a the plasmodium behaves under the

332
9
Logics for Preference Relations in Swarm Behaviours
(a) Lateral inhibition effect.
(b) Lateral activation effect.
Fig. 9.5 The Müller-Lyer illusion can be detected in the following behaviour of plasmodium of
Physarum polycephalum. Let an inoculum of plasmodium be located at the centre of a short line.
Then the Müller-Lyer illusion holds if (i) at ﬁrst we locate two repellents at two ends of the straight
line respectively, (ii) then second we locate two attractants at both ends respectively. In the ﬁrst
case we observe a lateral inhibition. In the second case we observe a lateral activation. Hence, the
distance between active zones is different for (a) and for (b), although the straight line is of the
same length
conditions of informational noise, when there were too much attractants at a closer
distance, to perform a lateral inhibition.
Hence, we can assume that lateral inhibition and lateral activation are important
fundamental mechanisms which are combined for sensing and motoring in reactions
of different swarms. So, swarms can have different biochemistries (different attrac-
tants and repellents), but algorithmically they realize the same patterns such as the
Müller-Lyer illusion. In the next section, the alcoholic behaviour will be regarded as
a new example of swarming with the same lateral inhibition and lateral activation in
sensing and motoring of groups.

9.4 Swarm Behaviour of Alcoholics
333
9.4
Swarm Behaviour of Alcoholics
9.4.1
Statistical Data on Group Behaviours of Alcoholics
Vadim Fris and me have carried out a statistical research of group behaviour of 107
people addicted to alcohol who have been actually treated in the rehabilitation centre
“Iscelenie,” Minsk, Belarus. Vadim Fris is the Chief Psychiatrist of this centre. Some
main characteristics of the sample for our survey are collected in Table9.1. First, the
majority of interviewees were men (82.2%). Second, most respondents were older
than 41 (52.3%). Third, most respondents have a job at the moment (71%).
Most interviewees (68.2%) claim that their need for alcohol is not satisﬁed prop-
erly, see Table9.2. It means that logistics optimizing the drink behaviour is an actual
trouble for them still.
Furthermore, most respondents (77.6%) buy alcohol at different places, see
Table9.3. It is correlated to their group behaviour. Joining different small groups
for drinking or meeting the same small group at different places, they buy alcohol
not at the same place. Some respondents live in the country, where there is only one
store. This fact simpliﬁes logistics for them.
Some respondents (19.6%) prefer to drink alone, but sometimes they drink jointly.
Others drink only in small groups (19.6%). So, the majority (60.8%) prefer to drink
jointly, but sometimes they drink alone. See Table9.4.
Table 9.1 Some general characteristics of people questioned by us
Quantity
Working
Jobless
Age less
than 30
Age from
30 to 40
Age from
41 to 60
Women
19
15
4
1
8
10
Men
88
61
27
13
29
46
Table 9.2 The question whether the need for alcohol is satisﬁed
There are ever possibilities to drink as
much as you want
There are no possibilities to drink as much
as you want
Women
6
13
Men
28
60
Table 9.3 The question where they usually buy alcohol
There is the same place where you buy
alcohol
There are different places where you buy
alcohol
Women
4
15
Men
20
68

334
9
Logics for Preference Relations in Swarm Behaviours
Table 9.4 The question whether they prefer to drink alone or jointly
You prefer to drink alone
You prefer to drink with
somebody
You drink only with
companions
Women
5
11
3
Men
16
54
18
Table 9.5 The question whether the group for drinking jointly consists of men or women
The community of your
comrades who are your
companions for drinking
consists only of women
The community of your
comrades who are your
companions for drinking
consists only of men
The community of your
comrades who are your
companions for drinking
consists only of both men
and women
Women
8
0
11
Men
0
39
49
Table 9.6 The question whether the companions buy drinks for you sometimes
Your companions buy drinks sometimes
to help you if you need
Your companions never buy drinks to help
you if you need
Women
13
6
Men
76
12
Table 9.7 The question whether you buy drinks for your companions sometimes
You help your companions and sometimes
you buy drinks for them if they need
You never help your companions to buy
drinks if they need
Women
14
5
Men
81
7
Hence, we have detected that drinking is a form of group behaviour. The gender
characteristics of these groups are collected in Table9.5. Some women (42.1% of all
women) drink in small groups consisting only of women and some men (44.3% of
all men) drink in small groups consisting only of men. So, 56% of the respondents
drink in mixed-gender groups. In the meanwhile, a sex/gender behaviour is mainly
reduced in these groups.
Joining small groups for drinking jointly supposes a kind of solidarity from partic-
ipants. So, the companions can buy drinks if the interviewee has not enough money,
see Table9.6. For 68.4% of women and for 86.4% of men it is a common practice.
On the other hand, joining small groups for drinking jointly has a requirement to
help others; and 73.7% of women and 92% of men buy alcohol for others sometimes
if their companions have not enough money currently, see Table9.7.

9.4 Swarm Behaviour of Alcoholics
335
According to our survey, all the respondents have afﬁrmed that sometimes or
always they drink in small groups from 3 to 7 people, but the same respondents
can join different small groups in due course. The number of stable friends to drink
commonly is from 2 to 5. The alcohol-addicted people distinguish their groups from
relatives or colleagues and 63% of the respondents think that their family and job
hinder them to drink safely.
Thus, these small groups from 3 to 7 people can be regarded as human swarms
which help their members to drink safely and to logistically optimize the task to
drink. 83.1% of all the respondents have responded that members of the group can
pay for drinks if the respondent does not have money (Table9.6); and 88.8% of all
the respondents have claimed that they can buy alcohol for somebody from the group
who does not have money (Table9.7). So, we deal with a form of solidarity in helping
to drink.
In the case of involving new members into groups the main reasons are as follows:
they are neighbours or colleagues and they can help (it means, pay). Entering new
groups is possible if a friend/acquaintance has invited to join them because it is more
safe and interesting for the respondent to join the new group where there is his or
her friend. Without an invitation it is impossible to enter the group.
Groups are very friendly and the only reason to expel somebody from the group
is that (s)he quarrels (in particular, (s)he does not want to pay). 32% of respondents
have noticed that it would be better to expel one member in their groups.
Only 28% of respondents have stated that in their groups there are leaders. They
are men or women more than 40years old. The leadership consists in a support of
the group to drink together.
We have discovered that alcoholics form a network consisting of several small
groups. And the task of optimizing common drinks is solved not by a small group, but
by the whole network, i.e. by several groups whose members are interconnected. The
point is that each small group of alcoholics appears and disappears under different
conditions, but the network, these alcoholics belong to, is almost the same. We
have studied that small groups of alcohol-addicted people are not stable and, by
exchanging their members, they can fuse or split in the optimization of drinking. The
same behavioural patterns are observed in the slime mould: fusing and splitting in
front of attractants to optimize their occupation. Outer stimuli (attractants) for the
slime mould are pieces of nutrients scattered before this organism. Attractants for
alcoholics are represented by places where they can drink in small groups safely:
ﬂat or outside. 38% of the respondents prefer to drink at the same place and 62%
at different places. The arguments in choosing the places are as follows: the short
distance from the home, low price, quality of drinks.
To sum up, the alcohol-dependent people realize a version of swarm intelligence
to optimize drinking in the way of fusing or splitting the groups under different
conditions. In case the groups are splitting, we face a lateral activation effect; and
in case the groups are fusing, we deal with a lateral inhibition effect of alcoholic
networks. The lateral activation is observed in the following cases: (i) the behaviour
is carried out under conditions of attractants rather than repellents; (ii) the behaviour
is performed in relation to many well visible attractants simultaneously (there are

336
9
Logics for Preference Relations in Swarm Behaviours
Table 9.8 The question why you choose this place to drink (jointly)
Why do you
choose this
place to drink?
Pleasant
company
Comfortable
atmosphere
Closer to
home
No one
interferes
Easier to drink
quickly
Women
5
2
5
5
2
Men
29
10
13
22
14
many places where it is possible to drink safely). The lateral inhibition is examined in
the following cases: (i) the behaviour is conducted under pressure or stress (there are
more repellents than attractants); (ii) there are a few attractants for a choice or there is
an information noise in choosing the attractants. For instance, some respondents have
performed the swarm behaviour to drink jointly under stress recently (it means, they
have fulﬁlled a lateral inhibition). Some other interviewees have performed the same
behaviour under favourable conditions (it means, they have fulﬁlled a lateral activa-
tion). And both effects can be detected by answering the question by them why they
choose this place to drink, see Table9.8. We have proposed the following variants: (i)
“pleasant company” (the most favourable condition); (ii) “comfortable atmosphere”
(the less favourable condition); (iii) “closer to home” (the neutral condition); (iv)
“no one interferes” (the less stress condition); (v) “easier to drink quickly” (the most
stress condition). We do not know circumstances of drinking for the respondents
currently, but according to the data, 43% of them have fulﬁlled a lateral activation
recently, 40,1% of them fulﬁlled a lateral inhibition, see Table9.8.
Thus, small groups of alcoholics are considered by us as a kind of human swarms.
These swarms build a network and within the same network alcoholics can freely
move from one swarm to another. As a consequence, the swarms fuse or split.
9.4.2
Simulating the Lateral Activation and Lateral
Inhibition Performed by Alcoholics
So, the alcohol-addicted people prefer to drink in small groups from 3 to 7 persons.
These groups are said to be agents of swarm intelligence. Within this intelligence an
appropriate network of alcoholics solves optimization tasks to drink. These swarm
solutions are unconscious, but very effective. Each agent follows an unconscious
collectivedecision-makingmechanismthatisdecentralizedanddistributedamongall
members of the group. The same situation of distribution of intelligence is observed
in any swarm.
The agents (swarms) are denoted by small letters i, j,… As well as all swarms,
these agents can fuse and split to optimize a group occupation of attractants. Usually,
there are many agents who communicate among themselves by exchanging people
(their members), e.g. someone can be a member of agent i today and later become a
member of agent j.

9.4 Swarm Behaviour of Alcoholics
337
The places where agents i, j,… (appropriate small groups of humans addicted to
alcohol) can drink safely are called attractants for swarm intelligence. The attractants
are denoted by S, P, …
There are two different ways in occupying attractants by swarm agents: (i) with
high concentration of people (lateral inhibition effect) at places of meeting and (ii)
with low concentration of people (lateral activation effect) at places of meeting [18].
In the ﬁrst case much less attractants are occupied. In the second case much more
attractants are occupied. For instance, in snow winter there are less attractants (places
to drink jointly and safely) and this causes a lateral inhibition effect in alcoholic
swarming. In sunny summer there are more attractants (places to drink in a group)
and this implies a lateral activation effect in alcoholic networking.
Lateral inhibition and lateral activation can be detected in any forms of swarm
networking. For example, this mechanism is observed also in the true slime mould
(plasmodium) of Physarum polycephalum. The plasmodium has the two distinct
stages in responding to signals: (i) the sensory stage (perceiving signals) and (ii) the
motor stage (action as responding). The effect of lateral activation in the plasmodium
is to decrease contrast between attractants at the sensory stage and to split protoplas-
mic tubes towards two or more attractants at the motor stage (Fig.9.5b). The effect of
lateral inhibition is to increase contrast between attractants at the sensory stage and
to fuse protoplasmic tubes towards one attractant at the motor stage or to increase
contrast in front of repellents at the sensory stage and to fuse protoplasmic tubes just
in one safe direction at the motor stage (Fig.9.5a).
In human groups there are (i) the one sensory stage consisting in perceiving signals
(as well as for the plasmodium) and the following two motor stages consisting in
actions as responding: (ii) illocutionary stage and (iii) perlucotionary stage.
For the ﬁrst time the well-known 20th-century philosopher John L. Austin has
investigated speech acts as a way of coordination for human behaviour by a ver-
bal communication as well as by a non-verbal communication (e.g. by gestures or
mimics). His main philosophical claim that was accepted then by almost all later lan-
guage philosophers has based on the idea that we coordinate our joint behaviour by
illocutionary acts—some utterances which express our intentions and expectations
to produce joint symbolic meanings for symbolic interactions: “I hereby declare,” “I
sentence you to ten years’ imprisonment”, “I promise to pay you back,” “I pray to
God”, etc. These utterances can produce an effect on the hearer that is called a per-
locutionary act. Hence, according to Austin, in order to commit a group behaviour,
the humans should start with illocutionary acts (uttering illocutions) to coordinate
their common symbolic meanings. As a result, their group behaviour appears as a
kind of perlocutionary act grounded on previous illocutionary utterances.
Thus,themotorstagefortheplasmodiumisjustadirectbehaviour,whilethemotor
stage for the humans starts from illocutionary acts to produce symbolic meanings
for performing an interaction and then this stage is continued in perlocutionary acts
(a direct coordinated behaviour of a human group).
Attractants S, P, … are detected by alcoholics at the sensory stage. Then alco-
holics perform illocutionary acts to share preference relations on detected attractants.
Later they commit perlocutionary acts to occupy some detected attractants. A data

338
9
Logics for Preference Relations in Swarm Behaviours
point S is considered empty if and only if an appropriate attractant (the place denoted
by S where it is possible to drink jointly) is not occupied by the group of alcohol-
dependent people. Otherwise, it is not-empty. Let us deﬁne syllogistic strings of the
form SP with the following interpretation: ‘S and P are comparable positively’, and
with the following meaning: SP is true if and only if S and P are reachable for each
other by members of the group i and both S and P are not empty, otherwise SP is
false. Let S be a set of all true syllogistic strings.
Now we can construct an illocutionary logic of alcohol-dependent people. In this
logic we deal with preference relations about detected attractants from S .
9.4.3
Agents in the Case of Lateral Inhibition
Let us construct an extension of modal logic K, please see [19] about K (also [44]),
for preference relations of agents in case of lateral inhibition. Let ‘A’ and ‘B’ be
metavariables ranging over syllogistic letters S, P, … or over standard propositional
compositionsofsyllogisticlettersbymeansofconjunctions,disjunction,implication,
negation. Let us introduce two modalities • and ◦with the following meaning:
•A ⇒◦A,
i.e. •A is modally stronger and ◦A is modally weaker, e.g. •A means ‘I like A’
(or ‘I desire A’) and ◦A means ‘maybe A’ (or ‘it can be A’). So, the performative
verb of • is stronger and the performative verb of ◦is weaker with the same type of
performativity (modality) to prefer A.
In our logic K for preference relations we have also only two axioms as in the
standard K (the inference rules are the same also):
Necessitation Rule
If A is a theorem of K, then so is •A.
Distribution Axiom
•(A ⇒B) ⇒(•A ⇒•B).
The operator ◦can be deﬁned from • as follows:
◦A := •A,
where • are any performative verbs for expressing a preference relation with a strong
modality: ‘like’, ‘want’, ‘desire’, etc.
Now let us add countable many new one-place sentential connectives •ki to the
language of K:
if A is a formula, then •ki A is a formula, too.
These •ki A are read as follows: “the k-th utterance of preference relation uttered
by agent i to fulﬁl an illocutionary act”. The weaker modality ◦ki is deﬁned thus:

9.4 Swarm Behaviour of Alcoholics
339
◦ki A := ¬ •ki ¬A.
We assume that •ki and ◦ki satisfy the necessity rule and distribution axiom as
well.
Let us denote the new extension by Ki.
Now let us deﬁne in Ki the four basic preference relations as atomic syllogis-
tic propositions: ki(S ⪯good
LI
P), ki(S bad
LI P), ki(S ⪯bad
LI P), ki(S good
LI ). They are
deﬁned as follows.
ki(S ⪯good
LI
P) := •ki(S ⇒P)
(9.12)
The atomic proposition ki(S ⪯good
LI
P) means: “for agent i, alternative P is at least
as good as alternative S by the k-th utterance” and it is deﬁned under conditions of
lateralinhibition.Inthemodelofalcohol-addictedswarmsitmeans:“forthegrouping
of alcohol-dependent people i, alternative P is at least as good as alternative S at the
k-th utterance under conditions of lateral inhibition”.
Let us deﬁne a model M .
Semantic meaning of ki(S ⪯good
LI
P):
M |= ki(S ⪯good
LI
P) := at the utterance k uttered by i, there exists a data point
A ∈M such that AS ∈S and for any A ∈M , if AS ∈S , then AP ∈S and it is
deﬁned under conditions of lateral inhibition.
Semantic meaning of ki(S ⪯good
LI
P) in alcohol-addicted swarms: there is a group of
alcoholics i at a place A such that places A and S are connected by exchanging of
some members of i and for any place A, if A and S are connected by exchanging of
some members of i, then A and P are connected by exchanging of some members
of i.
ki(S bad
LI P) := ◦ki(S ∧P)
(9.13)
The atomic proposition ki(S bad
LI P) means: “for agent i, alternative P is not at
least as bad as alternative S by the k-th utterance” and it is deﬁned under conditions of
lateralinhibition.Inthemodelofalcohol-addictedswarmsitmeans:“forthegrouping
of alcohol-dependent people i, alternative P is not at least as bad as alternative S at
the k-th utterance under conditions of lateral inhibition”.
Semantic meaning of ki(S bad
LI P):
M |= ki(S bad
LI P) := at the utterance k uttered by i, there exists a data point
A ∈M such that both AS ∈S and AP ∈S and it is deﬁned under conditions of
lateral inhibition.
Semantic meaning of ki(S bad
LI P) in alcohol-addicted swarms: there exists a group
of alcoholics i at A such that A and S are connected by exchanging of some members
of i and A and P are connected by exchanging of some members of i.
ki(S ⪯bad
LI P) := •ki(S ⇒¬P)
(9.14)

340
9
Logics for Preference Relations in Swarm Behaviours
The atomic proposition ki(S ⪯bad
LI P) means: “for agent i, alternative P is at least
as bad as alternative S by the k-th utterance” and it is deﬁned under conditions of
lateral inhibition. In the model of alcohol-addicted swarms: “for the grouping of
alcohol-dependent people i, alternative P is at least as bad as alternative S by the
k-th utterance under conditions of lateral inhibition”.
Semantic meaning of ki(S ⪯bad
LI P):
M |= ki(S ⪯bad
LI P) := at the utterance k uttered by i, for all data points A ∈M ,
AS is false or AP is false and it is deﬁned under conditions of lateral inhibition.
Semantic meaning of ki(S ⪯bad
LI P) in alcohol-addicted swarms: for all groups of
alcoholics i at places A, A and S are not connected by exchanging of some members
of i or A and P are not connected by exchanging of some members of i.
ki(S good
LI
P) := ◦ki(S ∧¬P)
(9.15)
The atomic proposition ki(S good
LI
P) means: “for agent i, alternative P is not at
least as good as alternative S by the k-th utterance” and it is deﬁned under conditions
of lateral inhibition. In the alcohol-addicted swarms: “for the grouping of alcoholics
i, alternative P is not at least as good as alternative S by the k-th utterance under
conditions of lateral inhibition”.
Semantic meaning of ki(S good
LI
P):
M |= ki(S good
LI
P) := at the utterance k uttered by i, for any data points A ∈
M , AS is false or there exists A ∈M such that AS ∈S and AP is false and it is
deﬁned under conditions of lateral inhibition.
Semantic meaning of ki(S good
LI
P) in alcohol-addicted swarms: for all groups of
alcoholics i at places A, A and S are not connected by exchanging of some members
of i or there exists place A such that A and S are connected by exchanging of some
members of i and A and P are not connected by exchanging of some members of i.
We can distinguish different swarms according to the acceptance of stronger or
weaker modality:
Weak agent
Agent i prefers ◦ki A instead of •ki A iff •ki A ⇒◦ki A.
Strong agent
Agent i prefers •ki A instead of ◦ki A iff •ki A ⇒◦ki A.
An example of the weak agent: (s)he prefers not to like not-A instead of that to
like A. An example of the strong agent: (s)he prefers to desire A instead of that to
accept A.
Hence, in logic Ki we have the four kinds of atomic syllogistic propositions:
ki(S ⪯good
LI
P), ki(S bad
LI P), ki(S ⪯bad
LI P), ki(S good
LI
P) for different k, i, S, and
P. All other propositions of Ki are derivable by Boolean combinations of atomic
propositions. Models for these combinations are deﬁned conventionally:
M |= ¬A iff A is false in M ;

9.4 Swarm Behaviour of Alcoholics
341
M |= A ∨B iff M |= A or M |= B;
M |= A ∧B iff M |= A and M |= B;
M |= A ⇒B iff if M |= A, then M |= B.
Proposition 9.3 Logic Ki is a conservative extension of K.
□
Proposition 9.4 In Ki, the conventional square of opposition holds, i.e. there are
the following tautologies:
ki(S ⪯good
LI
P) ⇒ki(S bad
LI P);
ki(S ⪯bad
LI P) ⇒ki(S good
LI
P);
¬(ki(S ⪯good
LI
P) ∧ki(S ⪯bad
LI P));
ki(S bad
LI P) ∨ki(S good
LI
P);
ki(S ⪯good
LI
P) ∨ki(S good
LI
P);
¬(ki(S ⪯good
LI
P) ∧ki(S good
LI
P));
ki(S ⪯bad
LI P) ∨ki(S bad
LI P);
¬(ki(S ⪯bad
LI P) ∧ki(S bad
LI P)).
Proof It follows from (9.12)–(9.15).
□
The fusion of two swarms i and j for syllogistic propositions is deﬁned in Ki in
the way:
ki(S1 ⪯good
LI
P);
m j(S2 ⪯good
LI
P)
(k ∪m)i∪j((S1 ∨S2) ⪯good
LI
P)
.
The splitting of one swarm i ∪j is deﬁned in Ki thus:
(k ∪m)i∪j(S ⪯good
LI
(P1 ∧P2))
ki(S ⪯good
LI
P1);
m j(S ⪯good
LI
P2)
.
Hence, the illocutionary logic Ki describes the preference relations of alcoholics
towards attractants under the conditions of lateral inhibition.

342
9
Logics for Preference Relations in Swarm Behaviours
9.4.4
Agents in the Case of Lateral Activation
When the concentration of attractants (different places of grouping for common
drinks) is high (i.e. we deal with the lateral activation), the logic K for preference
relations is unacceptable. Instead of K we will use its modiﬁcation K′ (with the same
inference rules):
Necessitation Rule
If A is a theorem of K′, then so is •A.
Distribution Weak Axiom
•(A ∧B) ⇒(•A ∧•B).
Now let us construct K′
i by adding countable one-place sentential connectives •ki
and ◦ki to the language of K′
i and then deﬁne the four basic preference relations
ki(S ⪯good
L A
P),ki(S bad
L A P),ki(S ⪯bad
L A P),ki(S good
L A
P)inthefollowingmanner:
ki(S ⪯good
L A
P) := •ki(S ∧P).
(9.16)
The atomic proposition ki(S ⪯good
L A
P) means: “for agent i, alternative P is at
least as good as alternative S by the k-th utterance” and it is deﬁned under conditions
of lateral activation. In the model of alcohol-addicted swarms: “for the group of
alcoholics i, alternative P is at least as good as alternative S by the k-th utterance
under conditions of lateral activation”.
Let us deﬁne a model M ′.
Semantic meaning of ki(S ⪯good
L A
P):
M ′ |= ki(S ⪯good
L A
P) := there exists a data point A ∈M ′ such that AS ∈S and
for any A ∈M ′, AS ∈S and AP ∈S and it is deﬁned under conditions of lateral
activation.
Semantic meaning of ki(S ⪯good
L A
P) in alcohol-addicted swarms: there is a string
AS and for any place A which is reachable for S and P by exchanging of members
of i, there are strings AS and AP. This means that we have an occupation of the
whole region where the places S and P are located.
ki(S bad
L A P) := •ki(¬S ∧¬P).
(9.17)
The atomic proposition ki(S bad
L A P) means: “for agent i, alternative P is not at
least as bad as alternative S by the k-th utterance” and it is deﬁned under conditions
of lateral activation. In the model of alcohol-addicted swarms: “for the group of
alcoholics i, alternative P is not at least as bad as alternative S by the k-th utterance
under conditions of lateral activation”.
Semantic meaning of ki(S bad
L A P):
M ′ |= ki(S bad
L A P) := for any data point A ∈M ′, both AS is false and AP is
false and it is deﬁned under conditions of lateral activation.

9.4 Swarm Behaviour of Alcoholics
343
Semantic meaning of ki(S bad
L A P) in alcohol-addicted swarms: for any place A
which is reachable for S and P by exchanging of members of i, there are no strings
AS and AP. This means that the group of alcoholics cannot reach S from P or P
from S immediately.
ki(S ⪯bad
L A P) := ◦ki(S ∨P).
(9.18)
The atomic proposition ki(S ⪯bad
L A P) means: “for agent i, alternative P is at least
as bad as alternative S by the k-th utterance” and it is deﬁned under conditions
of lateral activation. In the model of alcohol-addicted swarms: “for the group of
alcoholics i, alternative P is at least as bad as alternative S by the k-th utterance
under conditions of lateral activation”.
Semantic meaning of ki(S ⪯bad
L A P):
M ′ |= ki(S ⪯bad
L A P) := there exists a data point A ∈M ′ such that if AS is false,
then AP ∈S and it is deﬁned under conditions of lateral activation.
Semantic meaning of ki(S ⪯bad
L A P) in alcohol-addicted swarms: there exists a place
A which is reachable for S and P by exchanging of members of i such that there is a
string AS or there is a string AP. This means that the group of alcoholics i occupies
S or P, but not the whole region where the places S and P are located.
ki(S good
L A
P) := ◦ki(¬S ∨¬P).
(9.19)
The atomic proposition ki(S good
L A
P) means: “for agent i, alternative P is not at
least as good as alternative S by the k-th utterance” and it is deﬁned under conditions
of lateral activation. In the model of alcohol-addicted swarms: “for the group of
alcoholics i, alternative P is not at least as good as alternative S by the k-th utterance
under conditions of lateral activation”.
Semantic meaning of ki(S good
L A
P):
M ′ |= ki(S good
L A
P) := for any data point A ∈M ′, AS is false or there exists
a data point A ∈M ′ such that AS is false or AP is false and it is deﬁned under
conditions of lateral activation.
Semantic meaning of ki(S good
L A
P) in alcohol-addicted swarms: for any place A
which is reachable for S and P by exchanging of members of i there is no string AS
or there exists a place A which is reachable for S and P by exchanging of members
of i such that there is no string AS or there is no string AP. This means that the
group of alcoholics i does not occupy S or there is a place which is not connected to
S or P by exchanging of members of i.
Models for the Boolean combinations of atomic proposition of K′
i are deﬁned
thus:
M ′ |= ¬A iff A is false in M ′;
M ′ |= A ∨B iff M ′ |= A or M ′ |= B;

344
9
Logics for Preference Relations in Swarm Behaviours
M ′ |= A ∧B iff M ′ |= A and M ′ |= B;
M ′ |= A ⇒B iff if M ′ |= A, then M ′ |= B.
Proposition 9.5 Logic K′
i is a conservative extension of K′.
□
Proposition 9.6 In K′
i, the unconventional square of opposition holds, i.e. there are
the following tautologies:
ki(S ⪯good
L A
P) ⇒ki(S ⪯bad
L A P);
ki(S bad
L A P) ⇒ki(S good
L A
P);
¬(ki(S ⪯good
L A
P) ∧ki(S bad
L A P));
ki(S ⪯bad
L A P) ∨ki(S good
L A
P);
ki(S ⪯good
L A
P) ∨ki(S good
L A
P);
¬(ki(S ⪯good
L A
P) ∧ki(S good
L A
P);
ki(S ⪯bad
L A P) ∨ki(S bad
L A P);
¬(ki(S ⪯bad
L A P) ∧ki(S bad
L A P)).
Proof It follows from (9.16)–(9.19).
□
Now, let us consider pairs •ki A and •mi A, where different performative verbs •ki
and •mi occur and these verbs belong to different groups of illocutions in express-
ing a preference relation, i.e. both cannot be simultaneously representatives, direc-
tives, declaratives, expressive, or comissives. For instance, ‘believing’ and ‘knowing’
are both representatives and ‘ordering’ and ‘insisting’ are both directives. Assume,
‘believing’ be denoted by •ki and ‘advising’ by •mi. Notice that ‘assuming’ is
modally weaker than ‘believing’, and ‘advising’ is modally weaker than ‘insisting’.
So, ‘assuming’ can be denoted by ◦ki, and ‘advising’ can be denoted by ◦mi, such
that •ki A ⇒◦ki A and •mi A ⇒◦mi A. The construction •ki A ⇒•mi A (respectively,
◦mi A ⇒◦ki A) ﬁts the situation that a belief that A is ever stronger than some other
illocutions (belonging to other illocution groups) related to not-A.
Let us distinguish different swarms according to the acceptance of stronger or
weaker modality:
Meditative agent
(i) agent i prefers •mi A instead of •ki A iff •ki A ⇒•mi A; and
(ii) agent i prefers ◦ki A instead of ◦mi A iff ◦mi A ⇒◦ki A.
Active agent
(i) agent i prefers •ki A instead of •mi A iff •ki A ⇒•mi A; (ii) and
agent i prefers ◦mi A instead of ◦ki A iff ◦mi A ⇒◦ki A.

9.4 Swarm Behaviour of Alcoholics
345
An example of the meditative agent: (s)he prefers to believe that not-A instead
of that to order that A. An example of the active agent: (s)he prefers to insist that A
instead of that to believe that not-A.
The fusion of two swarms i and j universal afﬁrmative syllogistic propositions is
deﬁned in K′
i as follows:
ki(S1 ⪯good
L A
P);
m j(S2 ⪯good
L A
P)
(k ∪mi∪j((S1 ∧S2) ⪯good
L A
P)
.
The splitting of one swarm i ∪j is deﬁned in K′
i:
(k ∪m)i∪j(S ⪯good
L A
(P1 ∧P2))
ki(S ⪯good
L A
P1);
m j(S ⪯good
L A
P2)
.
The illocutionary logic K′
i is to express the preference relations of alcoholics
towards attractants under the conditions of lateral activation.
Wehaveshownthatthelateralinhibitionandlateralactivationaretwofundamental
patterns in sensing and motoring of swarms. The point is that both patterns allow
swarms to occupy several attractants and to avoid several repellents at once. Then
we have shown that a habit of joint drinking of alcohol-addicted people in small
groups can be considered a swarm behaviour controlled by outer stimuli (places to
drink jointly). And this behaviour follows the lateral inhibition and lateral activation,
also. The swarms of alcoholics can be managed by localization of places for meeting
to drink. Generally, the logic of propagation of groups of alcoholics has the same
axioms as the logic of parasite propagation for Schistosomatidae sp. as well as the
same axioms as the logic of slime mould expansion. The difference is that instead of
syllogistics for Schistosomatidae sp. and for slime mould, where preference relations
aresimpleandexpressonlyattractionsbyfood,weinvolvemanyperformativeactions
(verbs), which express a desire to drink together, within modal logics Ki and K′
i. The
logic Ki is used to formalize lateral inhibition in distributing people to drink jointly
and the logic K′
i is used to formalize lateral activation in distributing people to drink
jointly.
The main outcome of our research is to show that some forms of human group
behaviour are not social in fact. A kind of unsocial group behaviours is designated by
us as swarm behaviour. Many forms of human swarming have recently been studied –
from crowds of people in escape panic [35] to aircraft boarding [34]. However, some
stable patterns of interconnected people have never been analyzed as a swarm. We
have proposed to consider a network of coordinated alcoholics as human swarming.
The reasons are as follows: (i) their behaviour is controlled by replacing stimuli:
attractants (places where they can drink jointly and safely) and repellents (some
interruptions which can appear for drinking); this control is executed by the same
algorithms as for standard swarms from social bacteria to eusocial mammals; (ii)
the behaviour of alcoholics is collective and even cooperative, but it is subordinated
to the only one uncontrolled intention, namely, how to drink; so, this motivation

346
9
Logics for Preference Relations in Swarm Behaviours
bears no symbolic meanings in the terms of symbolic interactionism [45] and, then,
it cannot be evaluated as social.
Each alcoholic realizes a group adaptation and belongs to a network of people
with the same addiction. This network allows its members to optimize the task to
drink. Therefore, it is a substitute of social groups (from family to other institutions)
and it is a displacement of standard social behaviour. One of the effective means to
recover alcoholism is a back replacement of ways of group optimization how to drink
by that how not to drink. It is possible within a network of the so-called Alcoholics
Anonymous where alcoholics can help each other to stay sober.
To sum up, the preference relations for swarms are being modiﬁed during their
behaviour in accordance with a lateral inhibition or lateral activation.
References
1. Schumann, A.: Two squares of opposition: for analytic and synthetic propositions. Bulletin
Sect. Logic 40(3–4), 165–178 (2011)
2. Schumann, A.: On two squares of opposition: the Lesniewski’s style formalization of synthetic
propositions. Acta Analytica 28, 71–93 (2013)
3. Schumann, A., Fris, V.: Swarm intelligence among humans—the case of alcoholics. In: Pro-
ceedings of the 10th International Joint Conference on Biomedical Engineering Systems and
Technologies—Volume 4: BIOSIGNALS, (BIOSTEC 2017), pp. 17–25. ScitePress (2017)
4. Schumann, A., Wole´nski, J.: Decisions involving databases, fuzzy databases and codatabases.
Op. Res. Decis. 25(3), 59–72 (2015). https://doi.org/10.5277/ord150304
5. Schumann, A., Wole´nski, J.: Two squares of oppositions and their applications in pairwise
comparisons analysis. Fundamenta Informaticae 144(3–4), 241–254 (2016)
6. Thurstone, L.L.: A law of comparative judgment, reprint of an original work published in
1927. Psychol. Rev. 101(2), 266–270 (1994)
7. Kułakowski, K.: A heuristic rating estimation algorithm for the pairwise comparisons method.
CEJOR 23(1), 187–203 (2015)
8. Kułakowski, K.: On the properties of the priority deriving procedure in the pairwise compar-
isons method. Fundamentae Informaticae 139(4), 403–419 (2015)
9. Saaty, T.L.: Relative measurement and its generalization in decision making. Why pairwise
comparisonsarecentralinmathematicsforthemeasurementofintangiblefactors.Theanalytic
hierarchy/network process. Stat. Op. Res. (RACSAM) 102, 251–318 (2008)
10. Chu, A.T.W., Kalaba, R.E., Spingarn, K.: A comparison of two methods for determining the
weight belonging to fuzzy sets. J. Opt. Theory Appl. 4, 531–538 (1979)
11. Koczkodaj, W.W., Herman, M.W., Orlowski, M.: Using consistency-driven pairwise compar-
isons in knowledge-based systems. In: A. Press (ed.) Proceedings of the Sixth International
Conference on Information and Knowledge Management, pp. 91–96 (1997)
12. Ailon, N.: An active learning algorithm for ranking from pairwise preferences with an almost
optimal query complexity. J. Machine Learn. Res. 13, 137–164 (2012)
13. David, H.A.: The Method of Paired Comparisons. Oxford University Press, New York (1988)
14. Gass, S.I., Standard, S.M.: Characteristics of positive reciprocal matrices in the analytic
hierarchy process. J. Op. Res. Soc. 53, 1385–1389 (2002)
15. Jamieson, K.G., Nowak, R.: Active ranking using pairwise comparisons. In: J. Shawe-Taylor,
R.S. Zemel, P. Bartlett, F.C.N. Pereira, K.Q. Weinberger (eds.) Advances in Neural Informa-
tion Processing Systems 24 (NIPS), pp. 2240–2248. MIT Press (2011)
16. Negahban, S., Oh, S., Shah, D.: Iterative ranking from pairwise comparisons. In: P. Bartlett,
F. Pereira, C. Burges, L. Bottou, K.Q. Weinberger (eds.) Advances in Neural Information
Processing Systems 25, pp. 2483–2491. MIT Press (2012)

References
347
17. Peláez, J.I., Lamata, M.T.: A new measure of consistency for positive reciprocal matrices.
Comput. Math. Appl. 46, 1839–1845 (2003)
18. Jones,J.D.:Towardslateralinhibitionandcollectiveperceptioninunorganisednon-neuralsys-
tems. In: Pancerz, K., Zaitseva, E. (eds.) Computational Intelligence. Selected Links. Springer,
Medicine and Biology (2015)
19. Bull, R., Segerberg, K.: Basic Modal Logic, pp. 1–88. Springer Netherlands, Dordrecht (1984)
20. Costerton, J.W., Lewandowski, Z., Caldwell, D.E., Korber, D.R., Lappin-Scott, H.: Microbial
bioﬁlms. Annu. Rev. Microbiol. 49, 711–745 (1995). https://doi.org/10.1146/annurev.mi.49.
100195.003431
21. Duffy, J.E.: The ecology and evolution of eusociality in sponge-dwelling shrimp. In: Kikuchi,
T. (ed.) Genes, Behavior, and Evolution in Social Insects, pp. 1–38. University of Hokkaido
Press, Sapporo, Japan (2002)
22. Jarvis, J.: Eusociality in a mammal: Cooperative breeding in naked mole-rat colonies. Science
212(4494), 571–573 (1981). https://doi.org/10.1126/science.7209555
23. Jacobs, D.S., Bennett, N.C., Jarvis, J.U.M., Crowe, T.M.: The colony structure and domi-
nance hierarchy of the damaraland mole-rat, cryptomys damarensis (rodentia: Bathyergidae),
from namibia. J. Zool. 224(4), 553–576 (1991). https://doi.org/10.1111/j.1469-7998.1991.
tb03785.x
24. Jarvis, J.U.M., Bennett, N.C.: Eusociality has evolved independently in two genera of bathy-
ergid mole-rats but occurs in no other subterranean mammal. Behav. Ecol. Sociobiol. 33(4),
253–360 (1993). https://doi.org/10.1007/BF02027122
25. D’Ettorre, P., Heinze, J.: Sociobiology of slave-making ants. Acta Ethologica 3(2), 67–82
(2001). https://doi.org/10.1007/s102110100038
26. Michener, C.: Comparative social behavior of bees. Annu. Rev. Entomol. 14, 299–342 (1969).
https://doi.org/10.1146/annurev.en.14.010169.001503
27. Skinner, B.F.: About Behaviorism. Random House Inc, New York (1976)
28. Parsons, T.: Social Systems and The Evolution of Action Theory. The Free Press, New York
(1975)
29. Beni, G., Wang, J.: Swarm intelligence in cellular robotic systems. In: Proceeding of NATO
Advanced Workshop on Robots and Biological Systems. Tuscany, Italy, pp. 26–30 (1989)
30. Krützen, M., Mann, J., Heithaus, M.R., Connor, R.C., Bejder, L., Sherwin, W.B.: Cultural
transmission of tool use in bottlenose dolphins. PNAS 102(25), 8939–8943 (2005)
31. Whiten, A., Goodall, J., McGrew, W.C., Nishida, T., Reynolds, V., Sugiyama, Y., Tutin, C.E.,
Wrangham, R.W., Boesch, C.: Cultures in chimpanzees. Nature 399(6737), 682–685 (1999)
32. Viscido, S., Parrish, J., Grunbaum, D.: Individual behavior and emergent properties of ﬁsh
schools: a comparison of observation and theory. Marine Ecol. Progress Series 273, 239–249
(2004)
33. Helbing, D., Keltsch, J., Molnar, P.: Modelling the evolution of human trail systems. Nature
388, 47–50 (1997)
34. John, A., Schadschneider, A., Chowdhury, D., Nishinari, K.: Characteristics of ant-inspired
trafﬁc ﬂow. Swarm Intel. 2(1), 25–41 (2008). https://doi.org/10.1007/s11721-008-0010-8
35. Helbing, D., Farkas, I., Vicsek, T.: Simulating dynamical features of escape panic. Nature
407(6803), 487–490 (2000). https://doi.org/10.1038/35035023
36. Abrahams, M., Colgan, P.: Risk of predation, hydrodynamic efﬁciency, and their inﬂuence on
school structure. Environ. Biol. Fishes 13(3), 195–202 (1985)
37. Olson, R.S., Hintze, A., Dyer, F.C., Knoester, D.B., Adami, C.: Predator confusion is sufﬁcient
to evolve swarming behaviour. J. R. Soc. Interface 10(85), 20130305 (2013). https://doi.org/
10.1098/rsif.2013.0305
38. Riesenhuber, M., Poggio, T.: Neural mechanisms of object recognition. Curr Opin Neurobiol.
12(2), 162–168 (2002)
39. Sakiyama, T.: Gunji, Y.P.: The Müller-Lyer illusion in ant foraging. PLOS ONE 12(8), 1–12
(2013)
40. Tani, I., Yamachiyo, M., Shirakawa, T., Gunji, Y.P.: Kanizsa illusory contours appearing in
the plasmodium pattern of Physarum polycephalum. Front. Cell. Infect. Microbiol. 4 (2014)

348
9
Logics for Preference Relations in Swarm Behaviours
41. Nalyanya, G., Moore, C.B., Schal, C.: Integration of repellents attractants, and insecticides in a
"push-pull" strategy for managing German cockroach (dictyoptera: Blattellidae) populations.
J. Med. Entomol. 37(3), 427–434 (2000)
42. Tsang, N., Macnab, R., Koshland, D.E.: Common mechanism for repellents and attractants
in bacterial chemotaxis. Science 181(4094), 60–63 (1973)
43. Kearns, D.B.: A ﬁeld guide to bacterial swarming motility. Nature Rev. Microbiol. 8(9),
634–644 (2010)
44. Kripke, S.A.: A completeness theorem in modal logic. J. Symbol. Logic 24(1), 1–14 (1959)
45. Blumer, H.: Symbolic Interactionism. Perspective and Method. Prentice-Hall, Englewood
Cliffs, NJ (1969)

Chapter 10
Non-Archimedean Probabilities
and Reﬂexive Games
Any swarm can change its preference relations in accordance with some conditions
outside and inside the intercommunication of swarm members. These conditions can
make the same stimuli more or less proto-symbolic (that is, laterally inhibited or lat-
erally activated, respectively). So, some primitive forms of symbolic interactionism
can be observed even at the level of swarming. Each player of swarms can change a
decision during the game. This circumstance contradicts to the Aumann’s agreement
theorem, according to that each rational player makes the same decision, basing on
the same facts and appealing to Bayesian probabilities. Nevertheless, even a swarm
does not follow this theorem. So what does that mean for human beings who interact
ﬁrst of all symbolically? The theorem becomes absurd.
In this chapter, I am going to introduce reﬂexive games as a generalization of bio-
inspired games. For these games the Aumann’s agreement theorem does not hold.
The results of this chapter are published in [1–8].
10.1
Reﬂexive Games
10.1.1
Perlocutionary Effects and Reﬂexivity
Any everyday dialogue can be considered a reﬂexive game. Each person, speaking
those or other things, tries to obtain something from us. We always try to understand
the motives (s)he has before talking to us. Are the motives only to learn something
from us or to inﬂuence us? How exclusive is the message which (s)he utters? Will
we begin to know more on the topic after the talk? Is (s)he sincere? How sincerely
does (s)he express for us his/her strategy of reasoning?
© Springer International Publishing AG, part of Springer Nature 2019
A. Schumann, Behaviourism in Studying Swarms: Logical Models of Sensing
and Motoring, Emergence, Complexity and Computation 33,
https://doi.org/10.1007/978-3-319-91542-5_10
349

350
10
Non-Archimedean Probabilities and Reﬂexive Games
In reﬂexive games both conﬂicting parties simulate reasoning as well as emotional
reactions of each other and aspire to foresee them. This reasoning and these reactions,
which we expect from our interlocutor/opponent, are called perlocutionary effects of
our dialogue. Let us recall that any dialogue has three levels: locutionary (information
expressed in verbal or non-verbal exposition of states of affairs), illocutionary (cog-
nitive and emotional estimations of considered information), perlocutionary (effects
of cognitive and emotional estimations of interlocutors/opponents). What is the per-
locutionary effects of our utterance, we do not know, but we try to foresee them.
The situation where my cognitive estimations and feelings are not transparent for the
interlocutor, while his/her cognitive estimations and feelings are transparent for me,
shows that my level of reﬂexion is higher than my interlocutor’s level.
Emotions, which are expressed in illocutions, are one of the main forms of reﬂex-
ion. The interchanging of emotions is always a reﬂexive game, a method of manip-
ulation of others. The character played by Sharon Stone in Basic Instinct (the 1992
movie) shows reﬂexive abilities in emotional management. How transparent are her
emotions? Are we capable of winning emotionally in games with her or at least of
reaching an emotional consensus? Her emotions are not at all transparent for us as
are the emotions of coaching trainers who better know strategies of management
struggle and overcome us in any reﬂexive game.
In this chapter, I will show that we can appeal to non-Archimedean probabili-
ties in formalizing reﬂexive games. The main features of these probabilities are that
Aumann’s agreement theorem [9, 10] does not hold there and we can deﬁne reﬂexive
games for ﬁnite as well as inﬁnite levels of reﬂexion. The basic idea to deny Aumann’s
theorem in some cases is as follows. He used inductive sets for deﬁning knowledge
operators. However, on non-inductive sets, when we apply non-Archimedean proba-
bilities, this theorem cannot be proved. But these sets allow us to deﬁne sophisticated
reﬂexive games.
10.1.2
Knowledge Operators and Aumann’s Agreement
Theorem
Let Ω be a ﬁnite set of possible states of the world. It is ﬁnite, since any physically
realistic agent cannot have more than ﬁnitely many possible experiences. Subsets of
Ω will be called propositions. Suppose we have a set of N agents, call them i = 1,
. . ., N. Agent i’s knowledge structure is a function Pi which assigns to each ω ∈Ω
a non-empty subset of Ω. Pi is a partition of Ω: each world ω belongs to exactly one
element of each Pi, i.e. Ω is a set of mutually disjoint subsets Pi whose union is Ω.
Then Pi(ω) is called i’s knowledge state at ω. This means that if the true state is ω,
the individual only knows that the true state is in Pi(ω). This is important because
it restricts the assignment of probabilities about the true state ω. The elements of
Pi(ω) are those states of the world that are compatible with everything that i knows
at ω. In other words, we can interpret Pi(ω) probabilistically as follows: Pi(ω) =

10.1 Reﬂexive Games
351
{ω′ : Pi(ω′|ω) > 0}. Since i cannot distinguish among states in the cell Pi(ω) of his
knowledge partition Pi, his subjective prior must satisfy Pi(ω′′, ω) = Pi(ω′′, ω′) for
all ω′′ ∈Ω and all ω′ ∈Pi(ω). Also, we assume a player believes the actual state is
possible, so Pi(ω|ω) > 0 for all ω ∈Ω. From these both assumptions it follows that
the possibility operator Pi has the following two properties: for all ω′, ω ∈Ω:
ω ∈Pi(ω)
(10.1)
ω′ ∈Pi(ω) ⇒Pi(ω′) = Pi(ω)
(10.2)
All propositions in Ω including those in any of the N partitions form a σ-ﬁeld
A . Pi(ω) ⊆A is interpreted as meaning that at ω agent i knows that A, i.e. ω′ ∈A
for all states ω′ that i considers possible at ω.
For each i, the expression below deﬁnes a knowledge operator Ki which, applied
to any set A ∈A , yields the set Ki A ∈A of worlds in which i knows A:
Ki A = {ω : Pi(ω) ⊆A}.
If Pi(ω) ⊆A, an individual i who observes ω, will know that a state of the event A
has occurred. The most important property of the knowledge operator is Ki A ⊆A;
i.e. if an agent knows an event A in state ω (i.e. ω ∈Ki A), then A is true in state ω
(i.e. ω ∈A) as it follows from (10.1).
We can prove the following statements:
KiΩ = Ω;
(10.3)
Ki(A ∩B) = Ki A ∩Ki B;
(10.4)
A ⊆B ⇒Ki A ⊆Ki B;
(10.5)
Ki A ⊆A;
(10.6)
Ki Ki A = Ki A;
(10.7)
¬Ki¬Ki A ⊆Ki A.
(10.8)
Now let us try to deﬁne “common knowledge” in a state ω. First notice that “mutual
knowledge” appears if and only if that state ω is an element of the knowledge function
Ki A for all individuals i. “Common knowledge” between two individuals assumes
as well an inﬁnite mutual reﬂexion: both have mutual knowledge of A, but also both
know that both know A, both know that both know that both know A etc. ad inﬁnitum.
The common knowledge operator KA is then deﬁned by
K A = K1A ∩K2 A ∩K1K2 A ∩K2K1A ∩K1K2K1A ∩. . .

352
10
Non-Archimedean Probabilities and Reﬂexive Games
More formally, for each natural number n we can deﬁne an operator Mn expressing
“n-th degree mutual reﬂexion:”
M0 A = A;
Mn+1A =
N

i=1
Ki Mn A
Finally, the next expression deﬁnes common knowledge, κ, as mutual knowledge
and mutual reﬂexion of all ﬁnite degrees:
κ A =
+∞

n=0
Mn A.
Lemma 10.1 If ω ∈κ A, then for each i, Pi(ω) ⊆κ A.
Proof If ω ∈κ A then ω ∈Ki Mn A for all agents i and degrees n of mutual reﬂexion.
Therefore Pi(ω) ⊆Mn A for all n, and thus Pi(ω) ⊆κ A.
□
Theorem 10.1 (Aumann’s Agreement Theorem) Let us consider a hypothesis H ∈
A for which the various agents’ probabilities are q1, . . . , qN after they condition P
on priors. The proposition C ∈A identiﬁes these probabilities:
C =
N

i=1
{ω : P(H|Pi(ω)) = qi}.
If (i) ⟨Ω, A , P⟩is a probability space, where A includes each of the partitions
Ω1, . . . , ΩN of Ω, and each of those partitions is countable (A is then closed under
all of the operators Ki and Mn, and under κ) and P is the old probability measure that
is common to all the agents; (ii) the possibility of C’s becoming common knowledge
is not equal to zero: P(κC) ̸= 0, then
P(H|κC) = q1 = . . . = qN.
Proof By the lemma κC = 
j Di j, where Di j are distinct members of Pi. Then
P(H|κC) =
P(H∩
j Di j)
P(
j Di j)
=

j P(H|Di j)P(Di j)

j P(Di j)
=

j qi P(Di j)

j P(Di j) = qi.
□
As we see, the condition Ki A ⊆A is basic for Aumann’s theorem. It allows him
to appeal to inductive sets in deﬁning knowledge operators. Nevertheless, we can
change this condition by another: A ⊆K ′
i A to appeal to non-inductive sets. The
condition Ki A ⊆A is understood as the least ﬁxed point, but we can propose to use
A ⊆K ′
i A as the greatest ﬁxed point. From A ⊆K ′
i A it follows that K ′
i
n A ⊆K ′
i
n+1A.

10.1 Reﬂexive Games
353
10.1.3
Why Can We Reject Aumann’s Agreement Theorem?
Aumann’s agreement theorem actually says that two agents acting rationally (accord-
ing to Bayesian formulas) and with common knowledge of each other’s beliefs cannot
agree to disagree. More speciﬁcally, if two people share common priors, and have
common knowledge of each other’s current probability assignments (their posteriors
for a given event A are common knowledge), then they must have equal probabil-
ity assignments (these posteriors must be equal). It is one of the most important
statement of game theory, epistemic logic and so on. For example, according to this
statement, each rational player has to behave in the same manner under the same
circumstances. Rational players have always a common knowledge, they know all
parameters of the game and have to be sure that their opponents know that they know
parameters of the game, that they know that they know and so on ad inﬁnitum.
To prove his theorem, Aumann appeals to representing the possibility oper-
ator Pi(ω) and the common knowledge operator Ki as the least ﬁxed points,
i.e. as inductive sets. Nevertheless, we can deﬁne the possibility operator Pi(ω)
and the common knowledge operator Ki as the greatest ﬁxed points as well, i.e.
as coinductive sets. In this way we cannot prove Aumann’s agreement theorem.
Instead of the latter statement we then prove the reﬂexion disagreement theorem
as an appropriate negation of Aumann’s theorem. While for Aumann’s theorem we
need the property Pi(ω) = {A : ω ∈Ki A}, for its negation we need the property
Pi(ω) = {A : ω ∈Ki A}. In other words, this new statement can be proven if we
change some standard philosophical presuppositions in game theory by the follow-
ing new assumptions: each rational agent can cheat (disagree in his heart with) other
rational agents, each player cannot know everything prior the game, each agent can
try to foresee knowledge (beliefs) of his/her opponents and manipulate them, there-
fore the common knowledge does not mean that an agent cannot disagree and will
be completely predictable for all others.
These philosophical presuppositions contradicting to Aumann’s ideas were ﬁrst
formulated by Vladimir Lefebvre in his notion ‘reﬂexive games’ in 1965 [11–13].
A game is called reﬂexive if to choose the action the agent has to model (predict)
actions of his/her opponents, e.g. (s)he can try to manipulate them or cheat them.
The Early Levebvre formulated reﬂexive games assuming many reﬂexion levels. At
the zero level I ignore beliefs of opponents, at the ﬁrst level I take into account their
beliefs, at the second level I take into account that they try to predict my beliefs, at
the third level I foresee their beliefs in which my beliefs are foreseen by them, etc.
The game-theoretic mathematics for ideas of the Early Levebvre has been developed
by Novikov and Chkhirtishvili [14]. The reﬂexion disagreement theorem that will
be proved in the next section holds true for their approach, namely if we suppose
a possibility of reﬂexive games on a reﬂexion level of any natural number. I was
inspirited and suggested by the ideas of the Early Levebvre in the same measure as
them.
The Later Lefebvre tried to simulate decision making in reﬂexive games by means
of Boolean functions [12]. The main disadvantages of approaches encouraged by the

354
10
Non-Archimedean Probabilities and Reﬂexive Games
Later Lefebvre consist in that reﬂexive levels are ignored and agents are presented
as automata. However, the self-estimation is a variable. Reﬂexion varies depending
on characteristic moods (illocutionary acts) as well as the persuasiveness and emo-
tionality of our interlocutors (perlocutionary effects). In this sense, the dynamism of
reﬂexion quite corresponds to the well-known paradox of Belzung and Chevalley
[15] which is formulated as such: an emotional response of the same person in the
same situation can be various in different points of time. Thus, the simulation of deci-
sion making in reﬂexive games by means of Boolean functions is too speculative and
cannot help in analyzing everyday situations. Within this approach we assume that
reactions and evaluations of the same agent remain the same forever. Nevertheless,
it is false. This approach can be useful only in explicating some basic features of
reﬂexive management that take place in the given situation (such as the case of Soviet
and American ethical patterns [12]).
The ideas of the Early Lefebvre which I try to develop in this chapter are very
close to ideas of metagame which were proposed by Howard [16]. According to
him, for any game G and any player i there can be a metagame iG, in which player
i chooses in knowledge of the choices of all the others. More formally, let G =
⟨S1, S2; M1, M2⟩be the normal form of the game, where S1 (resp. S2) is the set of
strategies for player 1 (resp. 2) and M1 (resp. M2) is his/her preference function.
The set of outcomes is S = S1 × S2, i.e. an outcome is an ordered pair s = ⟨s1, s2⟩.
Mi(s) = {s′ : is not preferred to s by player i}, i = 1, 2. Let B(S1) (resp. B(S2)) be the
set of non-null subsets of S1 (resp. of S2) and K1 ⊆B(S1) (resp. K2 ⊆B(S2)). Then
the ﬁrst level metagame K G is deﬁned as the normal form K G = ⟨X1, X2; M′
1, M′
2⟩,
where X1 = {x1 : x1 = ⟨f1, c1⟩; c1 ∈K1; f1 : K2 →c1}, X2 = {x2 : x2 = ⟨f2, c2⟩;
c2 ∈K2; f2 : K1 →c2}, and for i = 1, 2, M′
i satisﬁes the following property:
x′ ∈M′
i(x) iff βx′ ∈M′
i(βx),
where β( f1, c1; f2, c2) = ( f1(c2), f2(c1)).
By induction, we can obtain an n-th-level metagame KnK(n−1) . . . K1G. The set
of all metagames KnK(n−1) . . . K1G for any natural number n is called the inﬁnite
metagame based on G. This metagame corresponds to Lefebvre’s reﬂexive game of
inﬁnite level.
Nigel Howard proposed to use metagames to have possibilities to require “more
of rationality than that each player should optimize given its beliefs about the others’
choices” [16]. Now (s)he should be able “to know the others’ choices, and know
how the other would choose to react to such knowledge, and know each others’
reactions to such reactions, and so on” [16]. These ideas are almost the same as ideas
introduced in reﬂexive games. The difference consists in other ways of deﬁning
preference functions.
The reﬂexion disagreement theorem holds true for the inﬁnite metagame in
Howard’s meaning as well as for the reﬂexive game of inﬁnite level in Lefeb-
vre’s meaning. This theorem shows limits in inﬁnite mutual predictions of others’
knowledge.

10.1 Reﬂexive Games
355
The mathematical meaning of the reﬂexion disagreement theorem is that we can-
not prove the agreement theorem using probabilities running over streams (e.g. using
probabilities with values on hypernumbers or p-adic numbers) in any way. In non-
standard ﬁelds Aumann’s theorem is false, because the powerset of any inﬁnite set of
streams is not a Boolean algebra and the Bayesian theorem does not hold in general
case for streams (see Theorem 5.4). Notice that we cannot avoid streams in the case
of inﬁnite metagame or reﬂexive game of inﬁnite level, because we face there an inﬁ-
nite data structure consisting of streams. The fuzzy and probability logic with values
on streams was obtained in [3]. This logic can be used for developing a probability
theory and epistemic logic for the inﬁnite metagame and reﬂexive game of inﬁnite
level.
Mathematically, the inﬁnite metagame is a coalgebra [17]. Graphically, coal-
gebras (e.g. processes or games) can be represented as inﬁnite trees. The reﬂexion
disagreement theorem is valid for games presented in the form of coalgebra. Recently
many researchers [18–21] have focused on the idea that in economics, in particular
in decision theory, we cannot avoid coalgebraic notions such as process dynamics,
behavioural instability, self-reference, or circularity. There exist many more cases
of non-equilibriums in economics, because we engage coinductive databases more
often as a matter of fact [22]. For example, repeated games may be deﬁned only
coalgebraically [23] and as well it is better to deﬁne epistemic games and belief
functors as coalgebras [18].
Thus, the reﬂexion disagreement theorem can be proved if (i) we assume that
rational agents can become unpredictable for each other and try to manipulate; (ii) we
deﬁne probabilities on streams (e.g. on hypernumbers or p-adic numbers); (iii) games
are presented as coalgebras. As we see, this new theorem is a very important statement
within the new mathematics (coalgebras, transition systems, process calculi, etc.)
which has been involved into game theory recently. Sets of streams which have been
modelled coalgebraically cannot generate inductive sets [24], therefore Aumann’s
agreement theorem is meaningless on these sets, but we face just the sets of streams
in many kinds of games (e.g. if we deal with repeated games, games with inﬁnite
states, concurrent games, inﬁnite metagame, reﬂexive game of inﬁnite level, etc.).
Instead of the agreement theorem, the reﬂexion disagreement theorem is valid if we
cannot obtain inductive sets, e.g. in the case of sets of streams. Notice that according
to Aczel [25], the universum of coinductive sets is much larger than the universe of
inductive sets.
10.2
Reﬂexive Disagreement Theorem
10.2.1
Streams and p-Adic Numbers
One of the most useful non-well-founded mathematical object is a stream—a recur-
sive data-type of the form s = ⟨a, s′⟩, where s′ is another stream. The notion of stream

356
10
Non-Archimedean Probabilities and Reﬂexive Games
Table 10.1 Coinductive deﬁnitions of sum, product and inverse
Differential equation
Initial value
Name
(σ + τ)′ = σ ′ + τ ′
(σ + τ)(0) = σ(0) + τ(0)
Sum
(σ × τ)′ =
(|σ(0)| × τ ′) + (σ ′ × τ)
(σ × τ)(0) = σ(0) × τ(0)
Product
(σ −1)′ =
| −1| × |σ(0)−1| × σ ′ × σ −1
(σ −1)(0) = σ(0)−1
Inverse
calculus was introduced by Pavlovi´c and Escardó [26] as a means to do symbolic
computationusingthecoinductionprincipleinsteadoftheinductionone.Let A beany
set. We deﬁne the set Aω of all streams over A as Aω = {σ : {0, 1, 2, . . .} →A}. For a
stream σ, we call σ(0) the initial value of σ. We deﬁne the derivative σ(0) of a stream
σ, for all n ≥0, by σ ′(n) = σ(n + 1). For any n ≥0, σ(n) is called the n-th element
of σ. It can also be expressed in terms of higher-order stream derivatives, deﬁned, for
all k ≥0, by σ (0) = σ; σ (k+1) = (σ (k))′. In this case the n-th element of a stream σ
is given by σ(n) = σ (n)(0). Also, the stream is understood as an inﬁnite sequence of
derivatives. It will be denoted by an inﬁnite sequence of values or by an inﬁnite tuple:
σ = σ(0) :: σ(1) :: σ(2) :: · · · :: σ(n −1) :: σ (n), σ = ⟨σ(0), σ(1), σ(2), . . .⟩.
Streams are deﬁned by coinduction: two streams σ and τ in Aω are equal if they
are bisimilar: (i) σ(0) = τ(0) (they have the same initial value) and (ii) σ ′ = τ ′
(they have the same differential equation). To set addition and multiplication by
coinduction, we should use the following facts about differentiation of sums and
products by applying the basic operations: (σ + τ)′ = σ ′ + τ ′, (σ × τ)′ = (|σ(0)| ×
τ ′) + (σ ′ × τ), where |σ(0)| = ⟨σ(0), 0, 0, 0, . . .⟩. Now we can deﬁne them as well
as another stream operation as follows (Table10.1).
We can embed the real numbers into the streams by deﬁning the following constant
stream. Let r ∈R. Then |r| = ⟨r, 0, 0, 0, . . .⟩is deﬁned so: its differential equation is
|r|′ = [0], its initial value is |r|(0) = r. We are to rely on our intuitions that it would
be natural to deﬁne the positive real numbers to be less than the positive streams.
Consider the set of streams [0, 1]ω and extend the standard order structure on
[0, 1] to a partial order structure on [0, 1]ω. Further deﬁne this order as follows:
O[0,1]ω (1) For any streams σ, τ ∈[0, 1]ω, we set σ ≤τ if σ(n) ≤τ(n) for every
n ∈N. For any streams σ, τ ∈[0, 1]ω, we set σ = τ if σ, τ are bisimilar.
For any streams σ, τ ∈[0, 1]ω, we set σ < τ if σ(n) ≤τ(n) for every n ∈N
and there exists n0 such that σ(n0) ̸= τ(n0). (2) Each stream of the form
|r| ∈[0, 1]ω (i.e. constant stream) is less than an inconstant stream σ.
This ordering relation is not linear, but partial, because there exist streams σ, τ ∈
[0, 1]ω, which are incompatible.
Introduce two operations sup, inf in the partial order structure O[0,1]ω. Assume
that σ, τ ∈[0, 1]ω are either both constant streams or both inconstant streams.

10.2 Reﬂexive Disagreement Theorem
357
Then their supremum and inﬁmum are deﬁned by coinduction: the differential equa-
tionofsupremumis(sup(σ, τ))′ = sup(σ ′, τ ′)anditsinitialvalueis(sup(σ, τ))(0) =
sup(σ(0), τ(0)), the differential equation of inﬁmum is (inf(σ, τ))′ = inf(σ ′, τ ′) and
its initial value is (inf(σ, τ))(0) = inf(σ(0), τ(0)). Suppose now that one and only
one of σ, τ ∈[0, 1]ω is constant, then an inconstant stream is greater than a constant
one, therefore their supremum gives an inconstant stream, but their inﬁmum gives a
constant stream.
According to O[0,1]ω, there exist the maximal stream [1] ∈[0, 1]ω and the minimal
stream [0] = |0| ∈[0, 1]ω.
Now introduce the following new operations deﬁned for all σ, τ ∈[0, 1]ω in the
partial order structure O[0,1]ω:
• σ →τ = [1] + | −1| × sup(σ, τ) + τ,
• ¬σ = [1] + | −1| × σ,
i.e. σ →[0],
• σ&τ = sup(σ, [1] + | −1| × τ) + τ[−1],
i.e. σ&τ = ¬(σ →¬τ),
• σ ⊕τ := ¬σ →τ,
• σ ⊖τ := σ&¬τ,
• σ ∧τ = inf(σ, τ),
i.e. σ ∧τ = σ&(σ →τ),
• σ ∨τ = sup(σ, τ),
i.e. σ ∨τ = (σ →τ) →τ,
• σ ↔τ := (σ →τ) ∧(τ →σ),
Obviously, all above operations are deﬁned by coinduction.
In 1897 the German mathematician Kurt Hensel presented an idea how to use
an analogy of Taylor and Laurent series to study algebraic numbers by expressing
them as an expansion in terms of powers of a prime number. He was mainly inspired
by the work of Kummer. This approach by Hensel led him to introduce the p-adic
numbers. There are many books which give a good introduction to the p-adic theory,
see for instance Koblitz [27].
It can be easily shown that p-adic numbers may be represented as potentially
inﬁnite data structures such as streams. Each stream of the form σ = σ(0) :: σ(1) ::
σ(2) :: · · · :: σ(n −1) :: σ (n), where σ(n) ∈{0, 1, . . . , p −1} for every n ∈N, may
be converted into a p-adic integer by the following rule:
∀n ∈N, σ(n) =
n

k=0
σ(k) · pk ∧σ(n) =
(10.9)
σ(0) :: σ(1) :: · · · :: σ(n).
And vice versa, each p-dic integer may be converted into a stream taking rule (10.9).
Such a stream is called p-adic.
Extend rule (10.9) as follows. Suppose that we have a stream of the form σ =
σ(0) :: σ(1) :: σ(2) :: · · · :: σ(n −1) :: σ (n), where σ(n) ≥0 for every n ∈N. Then
its p-adic representation is

358
10
Non-Archimedean Probabilities and Reﬂexive Games
∀n ∈N, σ(n) =
m

k=0
τ(k) · pk ∧σ(n) =
(10.10)
τ(0) :: τ(1) :: · · · :: τ(m),
where
τ(i) ∈{0, 1, . . . , p −1}
for
every
i = 1, m
and
m
k=0 τ(k) · pk =
n
k=0 σ(k) · pk. (In the case σ(i) ∈{0, 1, . . . , p −1} for every i = 1, n, we have
n = m andthenσ(i) = τ(i) for everyi = 1, n.) Suchastreamis called p-adic too. Its
canonical form is τ(0) :: τ(1) :: · · · :: τ(m) :: τ (m+1), where τ(n) ∈{0, 1, . . . , p −1}
for every n ∈N.
Using (10.9), (10.10), we can show that sum, product and inverse have the same
differential equations and initial values as in stream calculus. This proves that p-adic
numbers are one of the natural interpretations of streams.
It is easily shown that the set Aω of all p-adic streams includes the set of nat-
ural numbers. Let n be a natural number. It has a ﬁnite p-adic expansion n =
m
k=0 αk · pk. Then we can identify n with a p-adic stream σ = σ(0) :: σ(1) :: · · ·
:: σ(m) :: σ (m+1), where σ(i) = αi for i = 0, m and σ (m+1) = [0].
Extend the standard order structure on N to a partial order structure on p-adic
streams (i.e. on Zp).
1. for any p-adic streams σ, τ ∈N we have σ ≤τ in N iff σ ≤τ in Zp,
2. each p-adic stream σ = σ(0) :: σ(1) :: · · · :: σ(m) :: σ (m+1), where σ (m+1) = [0]
(i.e. each ﬁnite natural number), is less than any inﬁnite number τ, i.e. σ < τ for
any σ ∈N and τ ∈Zp\N.
Deﬁne this partial order structure on Zp as follows:
OZp Let σ = σ(0) :: σ(1) :: · · · :: σ(n −1) :: σ (n) and τ = τ(0) :: τ(1) :: · · · :: τ
(n −1) :: τ (n) be p-adic streams. (1) We set σ < τ if the following three con-
ditions hold: (i) there exists n such that σ(n) < τ(n); (ii) σ(k) ≤τ(k) for all
k > n; (iii) σ is a ﬁnite integer, i.e. there exists m such that σ (m) = [0]. (2) We
set σ = τ if σ and τ are bisimilar. (3) Suppose that σ, τ are inﬁnite integers.
We set σ ≤τ by coinduction: σ ≤τ iff σ(n) ≤τ(n) for every n ∈N. We set
σ < τ if we have σ ≤τ and there exists n0 ∈N such that σ(n0) < τ(n0).
Nowintroducetwooperationssup,inf inthepartialorderstructureonZp.Suppose
that p-adic streams σ, τ represent inﬁnite p-adic integers. Then their sup and inf
may be deﬁned by coinduction as follows: the differential equation of supremum is
(sup(σ, τ))′ = sup(σ ′, τ ′) and its initial value is (sup(σ, τ))(0) = sup(σ(0), τ(0)),
the differential equation of inﬁmum is (inf(σ, τ))′ = inf(σ ′, τ ′) and its initial value
is (inf(σ, τ))(0) = inf(σ(0), τ(0)). Now suppose that at most one of two streams σ,
τ represents a ﬁnite p-adic integer. In this case sup(σ, τ) = τ if and only if σ ≤τ
under condition OZp and inf(σ, τ) = σ if and only if σ ≤τ under condition OZp.
It is important to remark that there exists the maximal p-adic stream Nmax ∈Zp
under condition OZp. It is easy to see: Nmax = [p −1] = −1 = (p −1) + (p −1) ·
p + · · · + (p −1) · pk + · · · .
Further consider the following new operations deﬁned for all p-adic streams σ,
τ in the partial order structure OZp:

10.2 Reﬂexive Disagreement Theorem
359
• σ →τ = Nmax + | −1| × sup(σ, τ) + τ,
• ¬σ = Nmax + | −1| × σ,
i.e. σ →[0],
• σ&τ = sup(σ, Nmax + | −1| × τ) + τ + | −1| × Nmax,
i.e. σ&τ = ¬(σ →¬τ),
• σ ⊕τ := ¬σ →τ,
• σ ⊖τ := σ&¬τ,
• σ ∧τ = inf(σ, τ),
i.e. σ ∧τ = σ&(σ →τ),
• σ ∨τ = sup(σ, τ),
i.e. σ ∨τ = (σ →τ) →τ,
• σ ↔τ := (σ →τ) ∧(τ →σ),
It is evident that all these operations are deﬁned by coinduction.
10.2.2
Non-Well-Founded Probabilities
There is a problem how it is possible to deﬁne probabilities on stream structures if
we have no opportunity to put them on an algebra of subsets, taking into account the
following result:
Proposition 10.1 Deﬁne union, intersection and complement in the standard way.
The powerset P(Aω), where Aω is the set of all streams over A, is not a Boolean
algebra.
Proof Consider a counterexample on 7-adic streams. Let A1 = {x : 0 ≤x ≤. . .
11234321} and A2 = {x : . . . 66532345 ≤x ≤. . . 66666} be subsets of Z7. It is
readilyseenthat¬(A1 ∩A2) = Z7,but(¬A1 ∪¬A2) ⊂Z7,because¬A1 = {x : . . .
11234321 < x ≤. . . 66666} and ¬A2 = {x : 0 ≤x < . . . 66532345}, therefore
Z7\(¬A1 ∪¬A2) = A3 = {x : x = . . . y5y4y3y2y1y0, where yi ∈{0, 1, . . . , 6} for
each i ∈N\{3}}. It is obvious that the set A3 is inﬁnite. As a result, we obtain that
¬(A1 ∩A2) ̸= ¬A1 ∪¬A2 in the general case.
□
This proposition is a particular case of the following provable statement: if A is a
non-well-founded set, then its powerset will not be a Boolean algebra in the general
case.
In stream calculus and p-adic calculus we have, evidently, a different partial
ordering relation and obtain different powersets P[0,1]ω(Aω), PZp(Aω), but in any
case there is no Boolean algebra, because the complement in them is not Boolean.
The powersets P[0,1]ω(Aω), PZp(Aω) should be interpreted as a corresponding class
F V (Aω) of fuzzy subsets Y ⊂Aω, where V is equal one of sets [0, 1]ω, Zp.
We can try to get non-well-founded probabilities on a non-well-founded alge-
bra F V (Aω) of fuzzy subsets Y ⊂Aω that consists of the following: (1) union,
intersection, and difference of two non-well-founded fuzzy subsets of Aω; (2) ∅
and Aω. In this case a ﬁnitely additive non-well-founded probability measure is
a nonnegative set function P(·) deﬁned for sets Y ∈F V (Aω) that runs the set
V and satisﬁes the following properties: (1) P(A) ≥[0] for all A ∈F V (Aω),

360
10
Non-Archimedean Probabilities and Reﬂexive Games
(2) P(Aω) = |1| and P(∅) = [0], (3) if A ∈F V (Aω) and B ∈F V (Aω) are dis-
joint, then P(A ∪B) = P(A) + P(B), (4) P(¬A) = |1| + | −1| × P(A) for all
A ∈F V (Aω).
This probability measure is called non-well-founded probability. Their main orig-
inality is that conditions 3, 4 are independent. As a result, in a probability space
⟨X, F V (X), P⟩some Bayes’ formulas do not hold in the general case (see Theorem
5.4).
As an example of trivial non-well-founded probability we can introduce the fol-
lowing function deﬁned on streams by coinduction: (1) P(σ) = inf(σ, [1]) × [1]−1
for every σ ∈[0, 1]ω, (2) P(σ) = inf(σ, Nmax) × N −1
max for every σ ∈Zp.
Consider a random experiment S and by L = {s1, . . . , sm} denote the set of all
possible results of this experiment. The set S is called the label set, or the set of
attributes. Suppose there are N realizations of S and write a result x j after each
realization. Then we obtain the ﬁnite sample: x = (x1, . . . , xN), x j ∈L. A collective
is an inﬁnite idealization of this ﬁnite sample: x = (x1, . . . , xN, . . .), x j ∈L. Let
us compute frequencies νN(α; x) = nN(α; x)/N, where nN(α; x) is the number of
realizations of the attribute α in the ﬁrst N tests.
There exists the statistical stabilization of relative frequencies: the frequency
νN(α; x) approaches a limit as N approaches inﬁnity for every label α ∈L. This
limit P(α) = lim νN(α; x) is said to be the probability of the label α in the fre-
quency theory of probability. Sometimes this probability is denoted by Px(α) to
show a dependence on the collective x. Notice that the limits of relative frequencies
have to be stable with respect to a place selection (a choice of a subsequence) in the
collective.
The statistical stabilization of relative frequencies νN(α; x) can be considered not
only in the real topology on the ﬁeld of rational numbers Q but also in any other
topology on Q. For instance, it is possible to construct the frequency theory in which
probabilities were deﬁned as limits of relative frequencies νN(α; x) in the p-adic
topology. The frequency theory of p-adic probability was proposed in [28]. It is a
kind of non-well-founded probability.
Since stream calculus and as well as p-adic calculus contain inﬁnitely large num-
bers, they give the possibility to consider statistical ensembles with an inﬁnite number
of elements.
Deﬁne a non-well-founded operation of cardinality / · / as follows: suppose X ⊆
Aω and K(·) is the conventional operation of cardinality. Represent X by a Cartesian
product ∞
j=0 X j, where X0 is the set of all values of the form σ(0) belonging to all
streams of X, X1 is the set of all values of the form σ(1) belonging to all streams of
X, etc. Then /X/ is deﬁned by coinduction: its initial value is K(X0), its differential
equation is (/X/)′ = /X′/. The informal meaning of non-well-founded operation of
cardinality is that we obtain an inﬁnite sequence of conventional cardinalities K(X0),
K(X1), . . ., K(Xm), . . . that coinductively calculates not the number of streams from
X but the number of their possible values at every step. It is evident, therefore, that
the values of / · / are streams.
We study now some ensembles S = SN, which have a non-well-founded volume
N, i.e. /S/ = N, where N is the stream of [0, 1]ω or Zp. Consider a sequence

10.2 Reﬂexive Disagreement Theorem
361
of ensembles Sj having volumes K(Sj), j = 0, 1, . . . Get S = ∞
j=0 Sj. Then the
cardinality /S/ = N. We may imagine an ensemble S as being the population of a
tower T = TS, which has an inﬁnite number of ﬂoors with the following distribution
of population through ﬂoors: population of j-th ﬂoor is Sj. Set Tk = k
j=0 Sj ×
∞
m=k+1 ∅m. This is a population of the ﬁrst k + 1 ﬂoors. Let A ⊂S and let there
exists: n(A) = lim
k→∞nk(A), where nk(A) = /A ∩Tk/. The quantity n(A) is said to
be a non-well-founded volume of the set A.
We deﬁne the probability of A by the standard proportional relation:
P(A) := PS(A) = n(A) × N −1,
where /S/ = N, n(A) = /A ∩S/.
We denote the family of all A ⊂S, for which P(A) exists, by GS. The sets A ∈GS
are said to be events. The ordered system ⟨S, GS, PS⟩is called a non-well-founded
ensemble probability space for the ensemble S.
Proposition 10.2 Let F be the non-well-founded algebra of fuzzy subsets. Then
F ⊆GS.
Proof Let A be a set of streams. Then n(A) = /A/ and the probability of A has the
form: P(A) = /A/ × /S/−1.
For instance, let B = ¬A. Then /B ∩Tk/ = /Tk/ + | −1| × /A ∩Tk/. Hence
there exists limk→∞/B ∩Tk/ = N + | −1| × /A/. This equality implies the stan-
dard formula: P(¬A) = |1| + | −1| × P(A).
In particular, we have: P(S) = |1|.
□
Proposition 10.3 Let A1, A2 ∈GS and A1 ∩A2 = ∅. Then A1 ∪A2 ∈GS and
P(A1 ∪A2) = P(A1) + P(A2).
□
Proposition 10.4 Let A ∈GS, PS(A) ̸= 0 and B ∈GA. Then B ∈GS and the fol-
lowing Bayes formula holds:
PA(B) = PS(B/A) = PS(B) × PS(A)−1.
□
Proposition 10.5 Let N ∈Zp, N ̸= 0 and let the ensemble S−1 have the p-adic
volume −1 = Nmax (it is the largest ensemble, because Nmax is the largest p-adic
integer in accordance with OZp).
1. Then SN ∈GS−1 and PS−1(SN) = /SN/ × /S−1/−1 = −N.
2. Then GSN ⊂GS−1 and probabilities PSN (A) are calculated as conditional prob-
abilities with respect to the subensemble SN of ensemble S−1: PSN (A) =
PS−1( A
SN ) = PS−1(A) × PS−1(SN)−1, A ∈GSN .
□

362
10
Non-Archimedean Probabilities and Reﬂexive Games
If we take the p-adic case of non-well-founded probability theory, then we
observe essentially new properties of relative frequencies that do not appear on
real numbers. For example, consider two attributes α1 and α2. Suppose that in
the ﬁrst N := Nk = (k
j=0 2 j)2 tests the label α1 has nN(α1; x) = 2k realizations,
α2 has nN(α2; x) = k
j=0 2 j realizations. According to our intuition, their prob-
abilities should be different, but in real probability theory we obtain: Px(α1) =
lim nN(α1; x)/N = Px(α2) = lim nN(α2; x)/N = 0. In 2-adic probability theory
we have Px(α1) = 0 ̸= Px(α2) = −1, because in Q2, 2k →0, k →0, and −1 =
1 + 2 + 22 + · · · + 2n + . . ..
This example shows that in p-adic probability theory there are statistical phenom-
ena for that relative sequences of observed events have non-zero probabilities in the
p-adic metric, but do not have positive probabilities in the standard real metric.
10.2.3
Frequencies and Non-Well-Founded Probabilities
in Logic
Suppose that our logical language L is associated with p-valued semantics (resp.
inﬁnite-valued semantics) and the set of truth values for well-formed formulas is
V = {0, 1, . . . , p −1} ⊆Z (resp. V = [0, 1]).
Consider a random experiment S and by L = {ϕ1, . . . , ϕm} denote the set of
all possible p-valued (resp. inﬁnite-valued) sentences that describe results of this
experiment. Suppose there are N (that approaches inﬁnity) realizations of S and
write a sentence ϕ j if it holds with the truth degree v(ϕ j) ∈{0, 1, . . . , p −1}
(resp. v(ϕ j) ∈[0, 1]). Then we obtain the inﬁnite collective of sentences: ϕ =
⟨ϕ1, . . . , ϕN, . . .⟩, ϕ j ∈L. We can deﬁne the truth valuation v of this collective as
follows: v(ϕ) = ⟨v(ϕ1), . . . , v(ϕN), . . .⟩, v(ϕ j) ∈{0, 1, . . . , p −1} (resp. v(ϕ j) ∈
[0, 1]). Evidently, v takes each collective of sentences to a p-adic integer (resp.
real-valued stream).
Assume that ⊤is a tautology of p-valued logic, i.e. ⊤has the only truth value
p −1 (resp. 1), and ⊥is a contradiction of p-valued logic (resp. inﬁnite-valued logic)
(it has the only truth value 0). Then we have two ideal experiments: S1 (when only
⊤can describe the results of this experiment) and S2 (when only ⊥can describe
the results of this experiment). In the case of S1 we have the inﬁnite collective of
sentences that has the only truth valuation Nmax = ∞
k=0(p −1) · pk ∈Zp (resp.
[1] ∈[0, 1]ω), in the case of S2 the inﬁnite collective of sentences has the only truth
valuation 0 ∈Zp (resp. [0] ∈[0, 1]ω).
We shall identify every experiment with an appropriate inﬁnite collective of sen-
tences: ψ, ϕ, . . . Now we can set a support function P that is deﬁned on the sets of
all experiments (more precisely, on the set of all inﬁnite collectives of sentences) as
follows.

10.2 Reﬂexive Disagreement Theorem
363
P(ϕ/ψ) = P(ϕ ∧ψ)
P(ψ)
=
v(ϕ ∧ψ)
v(ψ)
= inf(v(ϕ), v(ψ))
v(ψ)
,
when ψ is not logically false, where v(ϕ) is a truth valuation of an inﬁnite collective
of sentences ϕ and v(ψ) is a truth valuation of an inﬁnite collective of sentences ψ.
The support function shows a logical connection between different experiments.
Thus we can build a special probability logic that computes probabilities on the class
of all inﬁnite collectives of p-valued sentences, i.e. a common probability logic of
different experiments. It is one of natural interpretations of p-adic valued probability
logic.
10.2.4
Reﬂexion Disagreement Theorem Proved on Streams
and p-Adic Integers
Now, using the given notion of streams, let us prove the reﬂexion disagreement
theorem. For Ω, the ﬁnite set of possible states of the world, and N, the set of agents,
we can unconventionally deﬁne agent i’s accepted performances as a function Qi
which assigns to each o ∈Ω a non-empty subset of Ω, so that each world o belongs
to one or more elements of each Qi, i.e. Ω is contained in a union of Qi, but Qi are
not mutually disjoint. Then Qi(o) is called i’s accepted performative state at o. If the
successfulperformanceiso,theindividualknows(accepts)thattheperformativestate
is in Qi(o). The elements of Qi(o) are those states of the world that are considered
as types of situations for performative states making the latter successful at o.
We can propose a stream interpretation of Qi(o) and construct Ωω. We know that
the set Ωω is much larger than Ω. According to the orders O[0,1]ω and OZp, we can
identify all members of Ω with some streams of Ωω. Let the set of these streams be
denoted by σΩ. Evidently, σΩ ⊂Ωω. Assume that Ωω is a union of Qi. Therefore
Qi contains σΩ (it means that by our assumption Ω).
Now let us deﬁne probabilities on streams as follows: a ﬁnitely additive probability
measure is a nonnegative set function P(.) deﬁned for sets A ⊆Ωω, running the set
[0, 1]ω, and satisfying the following properties:
1. P(∅) ≥|0| for all A ⊆Ωω.
2. P(Ωω) = [1] and P(∅) = |0|.
3. If A ⊆Ωω and B ⊆Ωω are disjoint, i.e. inf(P(A), P(B)) = |0|, then P(A ∪
B) = P(A) + P(B).
Otherwise,
P(A ∪B) = P(A) + P(B) −inf(P(A),
P(B)) = sup(P(A), P(B)).
4. P(A) = [1] −P(A) for all A ⊆Ωω, where A = Ωω \ A.
5. Relative probability functions P(A|B) ∈[0, 1]ω are characterized by the follow-
ing constraint:

364
10
Non-Archimedean Probabilities and Reﬂexive Games
P(A|B) = P(A ∩B)
P(B)
,
where P(B) ̸= |0| and P(A ∩B) = inf(P(A), P(B)). Notice that since there
are no partitions of sets of streams in general case, there are some problems in
deﬁning the conditional relation P(A|B) between events also. There are much
more dependent events than in the usual σ-ﬁeld. For example, any real number
of [0, 1] is less than any inconstant stream of [0, 1]ω. Let P(B) = a, P(A) = b,
where a is a number of [0, 1] and b is an inconstant stream of [0, 1]ω. Then
according to O[0,1]ω, P(A|B) = 1. However, this case cannot be deﬁned within
the traditional independence condition P(B) = P(B|A). Instead of that we use
the following condition: P(A) · P(B) = inf(P(A), P(B)).
The main originality of those probabilities is that conditions (3), (4) are indepen-
dent. As a result, in a probability space ⟨Ωω, P⟩some Bayes’ formulas do not hold
in the general case (see Theorem 5.4).
A particular case of stream probabilities is presented by p-adic probabilities.
Let us deﬁne them on any subsets of Ωω as follows: a ﬁnitely additive probability
measure is a set function P(.) deﬁned for sets A ⊆Ωω, running over the set Zp and
satisfying the following properties:
1. P(Ωω) = −1 and P(∅) = 0.
2. If
A ⊆Ωω
and
B ⊆Ωω
are disjoint, i.e. inf(P(A), P(B)) = 0, then
P(A ∪B) = P(A) + P(B).
Otherwise,
P(A ∪B) = P(A) + P(B) −inf
(P(A), P(B)) = sup(P(A), P(B)). Let us exemplify this property by 7-adic
probabilities. Let P(A) = . . . 323241 and P(B) = . . . 354322 in 7-adic met-
rics. Then P(A) + P(B) = . . . 010563; inf(P(A), P(B)) = . . . 323221;
P(A) + P(B) −inf(P(A), P(B)) = sup(P(A), P(B)) = . . . 354342.
3. P(A) = −1 −P(A) for all A ⊆Ωω, where A = Ωω \ A.
4. Relative probability functions P(A|B) ∈Qp are characterized by the following
constraint:
P(A|B) = P(A ∩B)
P(B)
,
where P(B) ̸= 0 and P(A ∩B) = inf(P(A), P(B)).
Now we can interpret Qi(|o|), where |o| ∈σΩ, probabilistically as follows:
Qi(|o|) = {τ : Pi(τ | |o|) > [0]}. These relative probabilities cannot set a partition
of Ωω. In other words, using them we cannot deﬁne an equivalence relation corre-
sponding to a partition. Instead of that the following properties hold, as we can prove
on the basis of the orders O[0,1]ω and OZp:
• If Pi(τ|π) > [0], then Pi(ρ|π) > [0] and Pi(τ|ρ) > [0] for some ρ. This property
takes place instead of the usual transitivity in real probability logic: if Pi(ρ|π) > 0
and Pi(τ|ρ) > 0, then Pi(τ|π) > 0.
• Pi(τ||ω|) = |1|, where |ω| ∈σΩ and τ ∈Ωω\σΩ.
• Pi(τ|τ) > [0].

10.2 Reﬂexive Disagreement Theorem
365
Thus, the possibility operator Qi has the following properties: for all τ, π ∈Ωω:
τ ∈Qi(τ)
(10.11)
π ∈Qi(τ) ⇒Qi(π) = Qi(τ)
(10.12)
Now we consider the relation A ⊆Qi(o), where A ⊆σΩ, as the statement that
at o agent i accepts the performance A, i.e. |o| ∈A for all states |υ| that i considers
possible at |o|:
Ki A = {|o|: A ⊆Qi(|o|)}.
(10.13)
This set is another interpretation of knowledge operator which is coinductive now.
If A ⊆Qi(|o|),anindividuali whoobserves|o|,willacceptastateoftheperformance
A. The most important property of the knowledge operator is A ⊆Ki A; i.e. if A is
successful in state |o| (i.e. |o| ∈A), then an agent accepts a performance A in state
|o| (i.e. |o| ∈Ki A).
The following statements can be proved in relation to coinductive knowledge
operator deﬁned in (10.13):
σΩ ⊆K σ
i Ω ⊆Ωω;
(10.14)
(Ki A ∩Ki B) ⇒Ki(A ∩B);
(10.15)
Ki(A ∪B) ⇒(Ki A ∪Ki B);
(10.16)
Ki(A ∪B) = (Ki A ∩Ki B);
(10.17)
A ⊆B ⇒Ki B ⊆Ki A;
(10.18)
A ⊆Ki A;
(10.19)
Ki Ki A = Ki A.
(10.20)
We can compare Aumann’s statements (10.3)–(10.8) with statements (10.14)–
(10.20) to notice that the latter assume a new epistemic logic with a stream inter-
pretation. For example, it is possible to build up a kind of multy-valued illocu-
tionary logic, where streams are values for perlocutionary effects. So, the coinduc-
tive knowledge operator Ki of (10.14)–(10.20) designates perlocutionary effects of

366
10
Non-Archimedean Probabilities and Reﬂexive Games
illocutionary acts, i.e. it takes into account just successful performative propositions
(it deﬁnes what inﬂuence was made on hearer’s behaviour). Let K j A (respectively
Ki A)meansagent j’s(respectivelyi’s)performative(cognitiveoremotional)estima-
tions of states of affairs A with an expected perlocutionary effect of these estimations
on agent j (respectively i). So, K j A means ‘ j + performative verb + that A’ (e.g. ‘ j
thinks that A’, ‘ j likes A’, ‘ j hates A’, etc.) and agent j follows this statement in
his(her) behaviour.
On the basis of the standard propositional language L with the set of values
[0, 1] (or {0, 1, . . . , p −1}) we can construct an extension L ′′ containing new modal
operators E, E1, E2, E3,…said to be perlocutionary effects. The semantics of L ′′ is
deﬁned in the following way. Assume that V is a valuation of well-formed formulas
of L and it takes values in [0, 1] (or {0, 1, . . . , p −1}). Let us extend V to Ve as
follows:
(a) If for ϕ ∈L , V (ϕ) = r, then Ve(Ei(ϕ)) = ⟨σ(0) = r, σ(1), σ(2), . . .⟩, i.e.
Ve(Ei(ϕ)) is a mapping from V (ϕ) to an inconstant stream σ starting with V (ϕ).
(b) If for ϕ ∈L , V (ϕ) = r, then Ve(ϕ) = |r|.
(c) For all ϕ, ψ ∈L , Ve(Ei(ϕ ∨ψ)) = Ve(Ei(ϕ) ∧Ve(Ei(ψ)).
In this semantics the following propositions will be perlocutionary tautologies,
i.e. they will be true:
ϕ ⇒E(ϕ),
(10.21)
¬ϕ ⇒E(¬ϕ),
(10.22)
E(¬ϕ) ⇒¬E(ϕ),
(10.23)
(E(ϕ) ∧E(ψ)) ⇒E(ϕ ∧ψ),
(10.24)
E(ϕ ∨ψ) ⇒(E(ϕ) ∨E(ψ)),
(10.25)
(E(ϕ ⇒ψ)) ⇒(E(ϕ) ⇒E(ψ)),
(10.26)
(E(ϕ ∨ψ)) ⇔E(ϕ) ∧E(ψ).
(10.27)
The epistemic logic closed under tautologies (10.21)–(10.27) is a kind of many-
valued illocutionary logic with values on streams or non-Archimedean numbers.
Let us notice that the non-well-founded knowledge operator designates perlocu-
tionary effects of illocutionary acts, i.e. it takes into account only successful perfor-
mative propositions (it deﬁnes what inﬂuence was made on the listener’s behaviour).
Aumann’s understanding of common knowledge satisﬁes the classical intuition
of well-foundedness of all logical entities, i.e. the presupposition that we can appeal

10.2 Reﬂexive Disagreement Theorem
367
only to inductive sets in our reasoning. For example, we can always ﬁnd an inﬁnite
intersection κ A according to knowledge operators of different people. However, this
intuition contradicts to the possibility of reﬂexive games where I can cheat or make
false public announcements and should detect if I am cheated by other people.
Under conditions of reﬂexive games I cannot deﬁne common perlocutionary
effects as the inﬁnite intersection κ A. An inﬁnite mutual reﬂexion between two
individuals assumes an inﬁnite union: both have mutual knowledge of A or both
know that both know A or both know that both know that both know A etc. ad
inﬁnitum. In other words, the common perlocutionary operator K A is deﬁned as
follows:
K A = K1A ∪K2 A ∪K1K2 A ∪K2K1A ∪K1K2K1A ∪. . .
For each natural number n an operator Mn expressing “n-th degree mutual reﬂex-
ion for perlocutionary effects” is deﬁned so:
M0 A = A;
Mn+1A =
N

i=1
Ki Mn A
Common perlocutionary effect, κ, is understood as a mutual reﬂexion for per-
locutionary effects of all ﬁnite degrees:
κ A =
+∞

n=0
Mn A.
Also, let us deﬁne for each natural number n an operator Mn expressing “n-th
degree mutual reﬂexion”:
M0 A = A;
Mn+1A =
N

i=1
Ki Mn A
and common knowledge, κ, as mutual reﬂexion for common knowledge of all ﬁnite
degrees:
κ A =
+∞

n=0
Mn A.
Lemma 10.2 If |o| ∈κ A, then for any i, κ A ⊆Qi(|o|). And if |o| ∈κ A, then for
some i, κ A ⊆Qi(|o|).
Proof If |o| ∈κ A, then |o| ∈Ki Mn A for all agents i and degrees n of mutual reﬂex-
ion for common knowledge. Therefore κ A ⊆Qi(|o|) for any i. If |o| ∈κ A, then
|o| ∈Ki Mn A for some agents i and degrees n of mutual reﬂexion for perlocutionary
effects. Therefore Mn A ⊆Qi(|o|) for some n, and thus κ A ⊆Qi(|o|) for some i. □

368
10
Non-Archimedean Probabilities and Reﬂexive Games
Theorem 10.2 (Reﬂexion Disagreement Theorem) Let us consider a hypothesis
H of coinductive/stream probability logic for which the various agents’ coinduc-
tive/stream probabilities are q1, . . . , qN after they condition P(·) on priors. The
propositions C and C of coinductive/stream probability logic identify these proba-
bilities:
C =
N

i=1
{|o| : P(H|Qi(|o|)) = qi}.
C =
N

i=1
{|o| : P(H|Qi(ω)) = qi}.
Let the coinductive/stream probability space ⟨Ωω, P⟩be closed under all of the
operators Ki, Mn, κ, Ki, Mn, and κ and let P be the old probability measure that
is common to all the agents. Assume that the possibility of C’s and C’s becoming
common knowledge or common perlocution is not equal to zero: P(κC) ̸= [0] and
P(κC) ̸= [0], then
P(H|κC) ̸= qi for some i.
P(H|κC) ̸= qi for some i.
Proof By Lemma 10.2, κC = 
j Di j, where 
j Di j covers Qi, but it is not a parti-
tion of Qi because of basic properties of coinductive probabilities. Then P(H|κC) =
P(H∩
j Di j)
P(
j Di j)
=
inf(P(H),sup j P(Di j))
sup j P(Di j)
̸=

j P(H|Di j)P(Di j)

j P(Di j)
=

j qi P(Di j)

j P(Di j) = qi.
Thus,
P(H|κC) ̸= qi in general case. In the same way we can show that P(H|κC) ̸= qi
in general case.
□
10.2.5
Reﬂexion Disagreement Theorem Proved
on Hypernumbers
We can propose a non-standard interpretation of Qi(ω) and construct the ultrapower
Ω I/U, where U is an ultraﬁlter that contains the Frechet ﬁlter on I (the set that
contains all complements for ﬁnite subsets of I). Ω I/U is said to be a proper non-
standard extension of Ω and it is denoted by ∗Ω. There exist two groups of members
of ∗Ω: (i) functions that are constant, e.g. f (α) = ω ∈Ω for an inﬁnite index subset
{α ∈I}; a constant function [ f = ω] is denoted by ∗ω; (ii) functions that aren’t con-
stant. The set of all constant functions of ∗Ω is called standard set and it is denoted
by σΩ. The members of σΩ are called standard. It is readily seen that σΩ and Ω are
isomorphic: σΩ ∼= Ω. If Ω was a number system, then members of ∗Ω are called
hypernumbers.

10.2 Reﬂexive Disagreement Theorem
369
Let us identify Ω with σΩ and assume that ∗Ω is a union of Qi. Therefore Qi
contains σΩ (by our assumption Ω).
Assume that ∗Q[0,1] = QN
[0,1]/U is a nonstandard extension of the subset Q[0,1] =
Q ∩[0, 1] of rational numbers and σ Q[0,1] ⊂∗Q[0,1] is the subset of standard mem-
bers. Let us try our best to deﬁne probabilities on that set. We can extend the
usual order structure on Q[0,1] to a partial order structure on ∗Q[0,1]: (i) for ratio-
nal numbers x, y ∈Q[0,1] we have x ≤y in Q[0,1] iff [ f ] ≤[g] in ∗Q[0,1], where
{α ∈N : f (α) = x} ∈U and {α ∈N : g(α) = y} ∈U, i.e. f and g are constant
functions such that [ f ] = ∗x and [g] = ∗y, (ii) each positive rational number
∗x ∈σ Q[0,1] is greater than any number [ f ] ∈∗Q[0,1]\σ Q[0,1], i.e. ∗x > [ f ] for
any positive x ∈Q[0,1] and [ f ] ∈∗Q[0,1], where [ f ] isn’t constant function.
These conditions have the following informal sense: (i) The sets σ Q[0,1] and
Q[0,1] have isomorphic order structure. (ii) The set ∗Q[0,1] contains actual inﬁnities
that are less than any positive rational number of σ Q[0,1]. These members are called
inﬁnitesimals.
Deﬁne this partial order structure on ∗Q[0,1] as follows:
O∗Q For any hyperrational numbers [ f ], [g] ∈∗Q[0,1], we set [ f ] ≤[g] if {α ∈N :
f (α) ≤g(α)} ∈U. For any hyperrational numbers [ f ], [g] ∈∗Q[0,1], we set
[ f ] < [g] if {α ∈N : f (α) ≤g(α)} ∈U and [ f ] ̸= [g], i.e. {α ∈N : f (α) ̸=
g(α)} ∈U. For any hyperrational numbers [ f ], [g] ∈∗Q[0,1], we set [ f ] = [g]
if f ∈[g].
Thisorderingrelationisnotlinear,butpartial,becausethereexistelements[ f ], [g] ∈∗
Q[0,1], which are incompatible.
Introduce two operations sup, inf in the partial order structure O∗Q: (i) inf([ f ],
[g]) = [h] iff there exists [h] ∈∗Q[0,1] such that {α ∈N : min( f (α), g(α)) =
h(α)} ∈U; (ii) sup([ f ], [g]) = [h] iff there exists [h] ∈∗Q[0,1] such that {α ∈N :
max( f (α), g(α)) = h(α)} ∈U.
Note there exist the maximal number ∗1 ∈∗Q[0,1] and the minimal number ∗0 ∈
∗Q[0,1] under condition O∗Q.
Recall that for each i ∈[0, 1], ∗i = [ f = i], i.e. it is a constant function. Every
element of ∗Q[0,1] has the form of inﬁnite tuple (i.e. a stream) [ f ] = ⟨y0, y1, . . .⟩,
where yi ∈Q[0,1] for each i = 0, 1, 2, . . .
Now let us deﬁne non-Archimedean probabilities on any subsets of ∗Ω as follows:
a ﬁnitely additive probability measure is a nonnegative set function P∗Q[0,1](·) deﬁned
for sets A ⊆∗Ω, it runs over the set ∗Q[0,1] and satisﬁes the following properties:
1. P∗Q[0,1](A) ≥∗0 for all A ⊆∗Ω,
2. P∗Q[0,1](∗Ω) = ∗1 and P∗Q[0,1](∅) = ∗0,
3. if A ⊆∗Ω and B ⊆∗Ω are disjoint, i.e. inf(P∗Q[0,1](A), P∗Q[0,1](B)) = ∗0, then
P∗Q[0,1](A ∪B) = P∗Q[0,1](A) + P∗Q[0,1](B).
Otherwise, P∗Q[0,1](A ∪B) = P∗Q[0,1](A) + P∗Q[0,1](B)) – inf(P∗Q[0,1](A), P∗Q[0,1]
(B)) = sup(P∗Q[0,1](A), P∗Q[0,1](B)).
4. P∗Q[0,1](¬A) = ∗1 −P∗Q[0,1](A) for all A ⊆∗Ω, where ¬A = ∗Ω\A.

370
10
Non-Archimedean Probabilities and Reﬂexive Games
5. relative probability functions P∗Q[0,1](A|B) ∈∗Q[0,1] are characterized by the fol-
lowing constraint:
P∗Q[0,1](A|B) =
P∗Q[0,1](A∩B)
P∗Q[0,1](B) ,
(10.28)
where P∗Q[0,1](B) ̸= 0 and P∗Q[0,1](A ∩B) = inf(P∗Q[0,1](A), P∗Q[0,1](B)).
LetQi(∗ω),where ∗ω ∈σΩ,bedeﬁnedthus:Qi(∗ω) = {[ f ] : Pi
∗Q[0,1]([ f ]| ∗ω) >
∗0}. Its properties are as follows:
1. If Pi
∗Q[0,1]([ f ]|[ f ′]) > ∗0, then Pi
∗Q[0,1]([ f ′′]|[ f ′]) > ∗0 and Pi
∗Q[0,1]([ f ]|[ f ′′]) >
∗0 for some [ f ′′].
2. Pi
∗Q[0,1](∗ω|[ f ]) = ∗1, where ∗ω is constant and [ f ] is not a constant function of
∗Ω.
3. Pi
∗Q[0,1]([ f ]|[ f ]) > ∗0.
From these properties it follows that if Pi
∗Q[0,1]([ f ]|[ f ′]) > ∗0, then Pi
∗Q[0,1]
([ f ]|[ f ]) > ∗0 and Pi
∗Q[0,1]([ f ′]|[ f ]) > ∗0. Thus, the possibility operator Qi has the
following properties: for all ∗ω′, ∗ω ∈∗Ω:
∗ω ∈Qi(∗ω)
(10.29)
∗ω′ ∈Qi(∗ω) ⇒Qi(∗ω′) = Qi(∗ω)
(10.30)
The relation A ⊆Qi(∗ω), where A ⊆σΩ, is understood as the statement that at ∗ω
agent i accepts the performance A:
Ki A = {∗ω : A ⊆Qi(∗ω)}.
(10.31)
From this deﬁnition we can obtain statements (10.14)–(10.20) and then we can
prove Lemma 10.2 on hypernumbers.
Theorem 10.3 (Reﬂexion Disagreement Theorem) Let us consider a hypothe-
sis H of non-Archimedean probability logic for which the various agents’ non-
Archimedean probabilities are q1, . . . , qN after they condition P∗Q[0,1] on priors. The
propositions C and C of non-Archimedean probability logic identify these probabil-
ities:
C =
N

i=1
{∗ω : P∗Q[0,1](H|Qi(∗ω)) = qi}.
C =
N

i=1
{∗ω : P∗Q[0,1](H|Qi(∗ω)) = qi}.
Let the non-Archimedean probability space ⟨∗Ω, P∗Q[0,1]⟩be closed under all of the
operators Ki, Mn, κ, Ki, Mn, and κ and let P∗Q[0,1] be the old probability measure

10.2 Reﬂexive Disagreement Theorem
371
that is common to all the agents. Assume that the possibility of C’s and C’s becoming
common knowledge or common perlocution is not equal to zero: P∗Q[0,1](κC) ̸=∗0
and P∗Q[0,1](κC) ̸=∗0, then
P∗Q[0,1](H|κC) ̸= qi for some i.
P∗Q[0,1](H|κC) ̸= qi for some i.
Proof Let us start with the same reasoning as in the Auman’s agreement theorem.
By Lemma 10.2, κC = 
j Di j, where 
j Di j covers Qi, but it is not a partition of
Qi because of basic properties of non-Archimedean probabilities. Then
P∗Q[0,1](H|κC) =
P∗Q[0,1](H ∩
j Di j)
P∗Q[0,1](
j Di j)
=
inf(P∗Q[0,1](H), sup j P∗Q[0,1](Di j))
sup j P∗Q[0,1](Di j)
̸=
̸=

j P∗Q[0,1](H|Di j)P∗Q[0,1](Di j)

j P∗Q[0,1](Di j)
=

j qi P∗Q[0,1](Di j)

j P∗Q[0,1](Di j)
= qi
Thus, P∗Q[0,1](H|κC) ̸= qi in the general case. In the same way we can show that
P∗Q[0,1](H|κC) ̸= qi in the general case.
□
This theorem shows us that there is no common knowledge in Aumann’s meaning
ifweappealtocommonperformativeeffectswithinterpretationonnon-Archimedean
probabilities. It is more natural and allows us to use reﬂexive games with different
mental accounts.
10.3
Hierarchies of Reﬂexion
10.3.1
Orders of Reﬂexion
In reﬂexive games we deal with an unlimited hierarchy of cognitive pictures. Let
us consider a bimatrix game with agents i and j. Each of them can have their own
picture about a state of affairs A. Denote these pictures by Ki A and K j A respectively.
The ﬁrst-order reﬂexion (thoughts about pictures of the opponent) is expressed by
means of pictures of the second order which are designated by K j Ki A and Ki K j A
where K j Ki are pictures of agent j about pictures of agent i, Ki K j A are pictures
of agent i about pictures of agent j. The reﬂexion of the second order deﬁnes which
pictures of one opponent are related to pictures of another opponent. At this level of
reﬂexion pictures of the third order Ki K j Ki A and K j Ki K j A are generated. And so
ad inﬁnitum. The collection of all pictures Ki A, K j A, K j Ki A, Ki K j A, Ki K j Ki A,
K j Ki K j A etc. makes an inﬁnite hierarchy.

372
10
Non-Archimedean Probabilities and Reﬂexive Games
Deﬁnition 10.1 The reﬂexion of agent i at the n-th level in bimatrix games is
expressed by (n + 1)-order knowledge operators K n+1
i
A = Ki K j Ki . . . A, where
on the right side there are n + 1 Km-operators (m = i, j).
Let us consider two agents i and j and suppose that the reﬂexive game takes place
on level n. This means that we have K n+1
i
A and/or K n+1
j
A which are understood as
perlocutionary effects of illocutionary acts and satisfy requirements (10.14)–(10.20)
(as well as (10.21)–(10.27)). We know that A ⊆· · · ⊆K n
j A ⊆K n+1
i
A and A ⊆
· · · ⊆K n
i A ⊆K n+1
j
A. Therefore K n+1
i
A ∩K n+1
j
A ̸= ∅.
Decision rules of each player depend on their knowledge. Let Bn+1
i
be a n-th-
order decision rule of agent i that corresponds to knowledge K n+1
i
A and Bn+1
j
be an
n-th-order decision rule of agent j that corresponds to his knowledge K n+1
j
A. We
suppose that i knows j’s (n −1)-th-order decision rule and j knows i’s (n −1)-th-
order decision rule.
Deﬁnition 10.2 A payoff of reﬂexive game at the n-th level in accordance with Bn+1
i
or Bn+1
j
is called performative equilibrium of this game.
We have the following possibilities:
1. both K n+1
i
A and K n+1
j
A are used in a performative equilibrium—this means that
agents i and j are at the n-th level of reﬂexion, simultaneously;
2. only K n+1
i
A is used in a performative equilibrium (then we can take K n+1
j
A =
K n
j A)—this means that agent i stays at the n-th level of reﬂexion, but agent j
stays at the (n −1)-th level of reﬂexion;
3. only K n+1
j
A is used in a performative equilibrium (then we can take K n+1
i
A =
K n
i A)—this means that agent j stays at the n-th level of reﬂexion, but agent i
stays at the (n −1)-th level of reﬂexion.
For any reﬂexive game at the n-th level of reﬂexion we can build up a tree of
graphs. Vertices of the tree correspond to real or phantom agents, participating in
reﬂexive game. Branches of the tree simulate a mutual knowledge of agents at the
reﬂexion of level n: if from (real or phantom) agent i there exists a path to agent j,
then agent j is correctly informed about agent i. In this case K n+1
j
A is a performative
equilibrium. If both K n+1
i
A and K n+1
j
A are a performative equilibrium of the same
game, then an appropriate tree has a loop.
In a reﬂexive game at level n it is important for agent j that K n
i A ⊆K n+1
j
A holds,
because it means that agent j has really corresponded to level n. Correctly deﬁning
the n-th level of reﬂexion implies a victory in a game. Let us consider the game of two
brokers to show how it is sophisticated sometimes to deﬁne n. Two brokers at a stock
exchange have appropriate expert systems which have been used for the support of
decision making. The network administrator illegally copied both expert systems
and sold each broker an expert system of his opponent. Then he tries to sell each
of them the following information: “Your opponent has your expert system.” Then
the administrator tries to sell the information: “Your opponent knows that you have

10.3 Hierarchies of Reﬂexion
373
his expert system,” etc. How should brokers use the information received from the
administrator and also what information on what iteration is essential? Theoretically,
reﬂexive level n can be any natural number.
10.3.2
Non-Archimedean Probabilities for Discrete
and Continuous Reﬂexive Levels
Let us designate reﬂexive players by i and j. Let K j A (accordingly, Ki A) mean
agent j’s (accordingly, agent i’s) performative (cognitive or emotional) estimations
of states of affairs A with a subsequent perlocutionary effect of these estimations
on agent j (accordingly, i). So, K j A means ‘ j + performative verb + that A’ (e.g.
‘ j thinks that A,’ ‘ j likes A,’ ‘ j hates A,’ etc.) and agent j follows this statement
in behaviours. Further, let K j Ki A (accordingly, Ki K j A) mean agent j’s perfor-
mative estimation of perlocutionary effect Ki A (accordingly, agent i’s estimation
of perlocutionary effect K j A) and K j Ki A (accordingly, Ki K j A) is a performative
equilibrium for both agents i, j. For instance, K j Ki A means ‘ j knows that i hates
A’ and this statement determines the behavioural strategies of both agents: i hates A
and j takes into account this perlocution of i. Thus, state of affairs A can be inter-
preted differently by agents i, j and k: Ki A (‘A from i’s viewpoint’), K j A (‘A from
j’s viewpoint’), Kk A (‘A from k’s viewpoint’). But images which are generated by
one of the players can be foreseen by others, too. As a result, there are performative
effects K j Ki A (‘Ki A from j’s viewpoint’), Ki K j A (‘K j A from i’s viewpoint’),
Kk Ki A (‘Ki A from k’s viewpoint’), etc.
Let us generalise it up to the case of K n+1
i
A = Ki K j Ki . . . A. Let K n+1
i
A mean
agent i’s performative estimation of perlocutionary effect K n
j A of level n and perfor-
mative equilibrium at level n + 1. In this general case, i can simulate j’s performative
evaluations up to level n + 1. An example of K j Ki K j A: in a chess game chess player
j lays a trap for chess player i that is grounded on the fact that j knows howi imagines
j’s thought course.
Now let us deﬁne K n+1
i
A on p-adic probabilities. For the ﬁrst time Andrei Khren-
nikov proposed to apply p-adic probabilities in modelling cognitive processes [29].
Assume we have p ∈N reﬂexive players i, j, . . . Then all possible combinations
. . . Kαn . . . Kα2 Kα1 A,whereαk ∈{i, j, . . .},canbepresentedbyﬁnite p-adicintegers
. . . 00βn . . . β2β1β0 = n
k=0 βk pk, where βk ∈{0, . . . , p −1} for each k = 0, . . . , n
and there is a bijection between the sets {0, . . . , p −1} and {i, j, . . .}.
Let Ω be a ﬁnite set of possible states of the world and A ⊆Ω. Then a ﬁnite
p-adic probability measure Pn+1
i
is deﬁned on sets A, B ⊆Ω as follows:
Pn+1
i
(∅) = 0
and
Pn+1
i
(Ω) = 1 ;
i f
Pn
j (A) > 0,
then
Pn+1
i
(A) > 0 ;

374
10
Non-Archimedean Probabilities and Reﬂexive Games
Pn
i (A) > 0
i f f
Pn+1
i
(A) > 0 ;
i f
Pn+1
j
(A) = 1,
then
Pn
i (A) = 1 ;
Pn+1
i
(A) =
n
k=0 αk pk
n
k=0(p−1)pk
and
Pn+1
i
(B) =
n
k=0 βk pk
n
k=0(p−1)pk ,
where αk, βk ∈{0, . . . , p −1} for each k = 0, . . . , n;
Pn+1
i
(A ∪B) = Pn+1
i
(A) + Pn+1
i
(B) i f A ∩B = ∅; Pn+1
i
(¬A) = 1 −Pn+1
i
(A);
Pn+1
i
(A |B ) = inf(n
k=0 αk pk,n
k=0 βk pk)
n
k=0 βk pk
,
where inf is deﬁned digit by digit. For instance, if we have just two agents, then at the
zero level of reﬂexion we have only two probability values: either 0 or 1 (meaning
e.g. that an agent either does not follow the content A ⊆Ω or does). At the ﬁrst
level of reﬂexion we have already the following four probability values: 0, 1/3, 2/3,
1 (meaning e.g. that both agents do not follow the content A ⊆Ω, one of them does
not follow, another does, and both of them follow), etc.
Now we can deﬁne K n+1
i
A in the following way:
K n+1
i
A = {ω : A ⊆Qi(ω) = {a : Pn+1
i
(a|ω) > 0}}.
Notice that according to this deﬁnition, taking into account our assumption that
if Pn
j (a|ω) > 0, then Pn+1
i
(a|ω) > 0, we have K n
j A ⊆K n+1
i
A for each agent j
participating in the reﬂexive game.
Let us suppose that there are just three reﬂexive players k,l, m at the reﬂexion level
of n = 2. Then P2
i (A ⊆Ω) ∈{0, 1/8, 2/8, 3/8, 4/8, 5/8, 6/8, 7/8, 1} for each i ∈
{k,l, m}. At the inﬁnite level of reﬂexion we have the following p-adic probabilities:
P∞
i (A) = lim
n→∞Pn
i (A).
The knowledge operators K n+1
i
A satisfy the following relations:
(K n+1
i
A ∩K n+1
i
B) ⇒K n+1
i
(A ∩B);
K n+1
i
(A ∪B) ⇒(K n+1
i
A ∪K n+1
i
B);
K n+1
i
(A ∪B) = (K n+1
i
A ∩K n+1
i
B);
A ⊆B ⇒K n+1
i
A ⊆K n+1
i
B;
A ⊆K n+1
i
A;

10.3 Hierarchies of Reﬂexion
375
K n+1
i
K n
i A = K n
i A.
Using (ﬁnite) p-adic probabilities, we understand reﬂexion levels discretely. For
any ﬁnite number of agents we can always deﬁne a reﬂexive level n such that proba-
bilities are distributed on an appropriate ﬁnite set of p-adic numbers. The larger the
n, the more ﬁnite p-adic probabilities. Thereby between n and n + 1 there are no
other reﬂexive levels.
Nevertheless, reﬂexive levels can be treated continuously as well, when between
reﬂexive levels n and n + 1 there are always other reﬂexive levels. For instance, let
the level of reﬂexion n = 1/c, where c ∈(0, 1]. Let ∗[0, 1] = [0, 1]N/U. In this case
K n
i A is deﬁned in non-Archimedean probabilities as follows:
K n
i A = {ω : A ⊆Qi(ω) = {a : ∗Pn
i (a|ω) > ∗0}}.
The non-Archimedean probability measure ∗Pn
i is deﬁned in sets A, B ⊆Ω thus:
∗Pn
i (∅) = ∗0
and
∗Pn
i (Ω) = ∗1 ;
i f
∗Pn
j (A) > ∗0,
then
∗Pk
i (A) > ∗0 , where k > n;
∗Pn
i (A) > ∗0
i f f
∗Pk
i (A) > ∗0 , where k > n;
i f
∗Pk
j (A) = ∗1, where k > n,
then
∗Pn
i (A) = ∗1 ;
∗Pn
i (A) = a ∈∗[0, 1];
∗Pn
i (A ∪B) = ∗Pn
i (A) + ∗Pn
i (B) i f A ∩B = ∅; ∗Pn
i (¬A) = ∗1 −∗Pn
i (A);
∗Pn
i (A |B ) = inf(a,b)
b
,
where ∗Pn
i (A) = a ∈∗[0, 1], ∗Pn
i (B) = b ∈∗[0, 1] and inf is deﬁned digit by digit.
Any reﬂexive game is carried out in a synchronous response and synchronous
readingofthoughts.Eachillocutionaryforcehasanappropriateperlocutionaryeffect.
The task of each player is to foresee the perlocutionary effect of dialogue on their
interlocutor’s behaviour.
Let us consider the set Kn
i of different perlocutionary effects K n
1,i A, K n
2,i A, . . .,
K n
m,i A, . . . for each agent i and each reﬂexion level n. Hence, we have inﬁnitely
many sets K1
i , K2
i , . . ., Kn
i , . . ., K1
j, K2
j, . . ., Kn
j, . . . of perlocutionary effects. We
can combine different effects in the same evaluation, for example: Kl, j Kk,i Kk, j A =
Kl, j K 2
k,i A.
The reﬂexive game is being described as a process of the form:
X0 A0.X1 A1.X2 A2. · · · .Xn An. · · · ,

376
10
Non-Archimedean Probabilities and Reﬂexive Games
where A0, A1, A2, . . ., An, . . . are different states of affair uttered at different time t =
0,1,. . .,n . . .and X0, X1, X2,. . ., Xn,. . .aredifferentcombinationsofperlocutionary
effects for appropriate states of affair, e.g. Xn = Kl, j K 2
k,i.
Assume, we have just two reﬂexive players i, j and an appropriate reﬂexive game
is presented by the process:
Kl, j K 2
k,i A0.K 3
m, j A1. · · · .Ka, j Kb,i An
At each step, a perlocutionary effect, belonging to i, is simulated in a perlocu-
tionary effect belonging to player j. Player j has a model of his opponent, such that
any thought or emotion of i is simulated by j who on the basis of the outcome of the
simulation makes a decision. Here there is prevalence over the opponent. In particu-
lar, Ka, j Kb,i An says that in i’s subjective world a real state of affairs An is simulated
for decision-making and i deals only with it. Player j possesses a more complex
picture: it includes a real state of affairs An together with i’s mapping Kb,i An from
this state (it can include a simulation of i’s purpose or i’s doctrines due to which i
solves problems). In this case j makes decision on the basis of reality picture Kb,i An,
which allows j to set the task of control in i’s decision-making process.
To sum up, the non-Archimedean probabilities can be used for explicating knowl-
edge operators engaged in reﬂexive games. It helps us to formally describe the notion
of reﬂexive game. Nevertheless, the meaning of reﬂexive game depends on contexts
ofhumaninteractions.So,areﬂexivegameisprobableonlyinacasewhereagentscan
reach performative equilibrium—they can act concordantly at reﬂexion levels n > 0.
This condition is fulﬁlled in the case where there are mechanisms of intercommuni-
cation broadly agreed upon among people. These mechanisms have been preserved
within an appropriate discourse community (Kommunikationsgemeinschaft) shared
by members with a suitable degree of discourse expertise (i.e. members possess one
or more genres in the communicative furtherance of its aims and know a speciﬁc
lexis) and with a degree of relevant content to provide information and feedback.
It is worth noting that our reﬂexive games grow up just from bio-inspired games.
Swarms are capable to play in some primitive proto-reﬂexive games. For instance,
there are two species of the slime mould: Physarum polycephalum and Badhamia
utricularis.Andbothcancompetewitheachother,seeSect.8.1.5.Thepointisthatthe
swarm behaviour is based on some proto-symbolic values within a lateral inhibition
and lateral activation. The human behaviour is just more symbolic. Therefore, while
the swarms can reach a small level of reﬂexion in their games, the human beings can
reach an unlimited level of reﬂexion. A kind of free will (a possibility to modify own
actions) is detected already at the level of swarms that allows them to interact quite
proto-symbolically, too, see Sect. 8.2.1.

References
377
References
1. Khrennikov, A., Schumann, A.: p-adic physics, non-well-founded reality and unconventional
computing. p-Adic Num. Ultramet. Anal. Appl. 1(4), 297–306 (2009)
2. Schumann, A.: Non-well-founded probabilities and coinductive probability logic. In: I.C.S.
Press (ed.) Eighth International Symposium on Symbolic and Numeric Algorithms for Scien-
tiﬁc Computing (SYNASC’08), pp. 54–57 (2008)
3. Schumann, A.: Non-well-founded probabilities on streams. In: Dubois, D., Lubiano, M.A.,
Prade, H., Gil, M.Á., Grzegorzewski, P., Hryniewicz, O. (eds.) Soft Methods for Handling
Variability and Imprecision, pp. 59–65. Springer, Berlin, Heidelberg (2008)
4. Schumann, A.: Non-well-founded probabilities within unconventional computing. In: U.K.
Durham (ed.) 6th International Symposium on Imprecise Probability: Theories and Applica-
tions (2009)
5. Schumann, A.: Probabilities on streams and reﬂexive games. Op. Res. Decis.24(1), 71–96
(2014). https://doi.org/10.5277/ord140105
6. Schumann, A.: Reﬂexive games and non-archimedean probabilities. p-adic Num. Ultrametr.
Anal. Appl. 6(1), 66–79 (2014)
7. Schumann, A.: Reﬂexive games in e-university. In: Proceedings of the Science and Information
Conference (SAI), Science and Information Organization, London, England, July 28–30, 2015,
Sponsor(s): Nvidia; IEEE; The Future and Emerging Technol FET at the European Comm;
EUREKA; Cambridge Wireless; British Comp Soc; Digital Catapult; Springer; Media Partner
for this conference, 2015 Science and Information Conference (SAI), pp. 770–775 (2015)
8. Schumann, A., Khrennikov, A.: Physics beyond the set-theoretic axiom of foundation. In:
Khrennikov (ed.) AIP Conference Proceedings, Foundations of Probability and Physics-5, vol.
1101, pp. 374–380. AIP (2009)
9. Aumann, R.J.: Agreeing to disagree. Annals. Stat. 4(6), 1236–1239 (1976)
10. Aumann, R.J.: Notes on Interactive Epistemology. Mimeo. Hebrew University of Jerusalem,
Jerusalem (1989)
11. Lefebvre, V.A.: The basic ideas of reﬂexive game’s logic. In: Problems of Systems and Struc-
tures Research (in Russian) pp. 73–79 (1965)
12. Lefebvre, V.A.: Algebra of Conscience. D. Reidel (1982)
13. Lefebvre, V.A.: Lect. Reﬂex. Game Theory. Leaf & Oaks, Los Angeles (2010)
14. Novikov, D.A., Chkhartishvili, A.G.: Stability of information equilibrium in reﬂexive games.
Auto. Remote Control 66(3), 441–448 (2005)
15. Belzung, C., Chevalley, C.: Emotional behaviour as the result of stochastic interactions. A
process crucial for cognition. Behav. Process. 60(2), 115–132 (2002). https://doi.org/10.1016/
S0376-6357(02)00079-7
16. Howard, N.: General metagames: an extension of the metagame concept. In: Game Theory as
a Theory of Conﬂict Resolution. Reidel, Dordrecht (1974)
17. Rutten, J.J.M.M.: Universal coalgebra: a theory of systems. Theor. Comput. Sci. 249(1), 3–80
(2000)
18. Brandenburger, A., Friedenberg, A., Keisler, H.J.: Fixed points in epistemic game theory,
Mathematical. Foundations of Information Flow, American Mathematical Society (2012)
19. Brandenburger, A., Keisler, H.J.: An impossibility theorem on beliefs in games. Studia Logica
84(2), 211–240 (2006)
20. Knudsen, C.: Equilibrium, perfect rationality and the problem of self-reference in economics,
pp. 204–208. Routledge (1993)
21. Winrich, J.S.: Self-reference and the incomplete structure of neoclassical economics. J. Econ.
Issues 18(4), 987–1005 (1984)
22. Berger, S.: The Foundations of Non-Equilibrium Economics: The Principle of Circular Cumu-
lative Causation. Chapman & Hall, Routledge (2009)
23. Mailath, G.J., Samuelson, L.: Repeated Games and Reputations: Long-Run Relationships.
Oxford University Press (2006)

378
10
Non-Archimedean Probabilities and Reﬂexive Games
24. S. Abramsky and P.-A. Mellies: Concurrent games and full completeness. In: Proceedings of
the 14th Symposium on Logic in Computer Science, pp. 431–442 (1999)
25. Aczel, A.: Non-Well-Founded Sets. Stanford University Press (1988)
26. Pavlovi´c, D., Escardó, M.H.: Calculus in coinductive form. In: Proceedings of the 13th Annual
IEEE Symposium on Logic in Computer Science, pp. 408–417 (1998)
27. Koblitz, N.: p-adic numbers, p-adic analysis and zeta functions, 2nd edn. Springer (1984)
28. Khrennikov, A.Y.: p-adic quantum mechanics with p-adic valued functions. J. Math. Phys.
32(4), 932–937 (1991)
29. Khrennikov, A.: p-adic discrete dynamical systems and collective behaviour of information
states in cognitive models. Discrete Dyn. Nature Soc. 5, 59–69 (2000)

Chapter 11
Payoff Cellular Automata and Reﬂexive
Games
Reﬂexive games are just an abstract continuation of bio-inspired games. A high
reﬂexivity of game is explained by a high level of modiﬁcations of involved actions
and strategies at each game move. In this chapter, I will show that bio-inspired
and reﬂexive games can be represented in the form of cellular automata. The more
modiﬁed a cellular-automatic transition rule is at each step, the more reﬂexive our
game is. For example, the Belousov-Zhabotinsky reaction can be described as a
game, for which the transition rule does not change. It is a game of zero reﬂexion.
If a transition rule is being modiﬁed at each time step, we deal with a reﬂexion of
inﬁnite level. We assume that only human beings are capable to change transition
rules in their behaviour often. See [1–4]. Some relevant papers on cellular automata:
[5–7].
11.1
Cellular-Automatic Approach in Logical Simulations
of Swarm Behaviour
In this chapter I propose to use cellular automata as kind of coalgebras for formalizing
reﬂexive games. This approach corresponds to Vernon L. Smith’s idea of ecological
rationality in behavioural ﬁnance [8] and my idea of aposterioristic symbolic logics
[3]. Within this approach it is possible to deﬁne classical decision rules such as look-
ing for saddle points, minimax and maximin, the Nash equilibrium, PROMETHEE
methods, etc., but these rules become context-based and behaviourally instable. Nev-
ertheless, we can deﬁne much more sophisticated decision rules as well, when players
follow different cognitive pictures of reality and try to inﬂuence on decisions of each
others. These situations are called reﬂexive games. In reﬂexive games players try to
logically combine and continuously change different decision rules.
© Springer International Publishing AG, part of Springer Nature 2019
A. Schumann, Behaviourism in Studying Swarms: Logical Models of Sensing
and Motoring, Emergence, Complexity and Computation 33,
https://doi.org/10.1007/978-3-319-91542-5_11
379

380
11
Payoff Cellular Automata and Reﬂexive Games
I deﬁne games as interactions among rational players, where decisions impact
the payoffs of others, but players are limited by contexts that permanently change.
A game is described by (i) its players who are presented in appropriate transition
rules of cellular automata; (ii) players’ passible strategies which are supposed known
before the game and a combination of all possible payoffs from each strategy outcome
gives the resulting payoffs which are collected as a set of states of cellular automata;
(iii) a neighbourhood of cellular automata that makes some strategies actual and
others non-actual (i.e. accepts the most important strategies in the given context at
time t) and also changes or correct strategies. So, in this form of game description,
players analyze strategies not purely logically, but contextually. Therefore players
take decisions not only in an environment given by the payoff that corresponds to
each possible outcome, but also in an environment of different other circumstances,
e.g. by deﬁning: which strategies can be accepted in this context, how they can be
changed by the given context, how past contexts have inﬂuenced present contexts,
whether some public announcements are false in fact, etc. Therefore I agree that
the so-called payoff matrix is ﬁxed throughout the game, but in these tools it is not
possible to take contexts into account. In payoff cellular automata we expand payoff
matrices by a dynamic massive-parallel logic.
Payoff matrices deﬁne the logic of the game, when all players are rational and
each of them follows a strategy after considering all possible strategies of all players.
In this chapter such a logic is not denied, but it is extended a lot by the assumption
that in reality we deal with bounded rationality that is limited by contexts. The
conventional logic given in payoff matrices becomes unconventional, e.g. dynamic,
temporal, and massive-parallel. Usually, it is claimed that the logic of the game can
be extended not as a more general unconventional logical system, but by adding
heuristics, i.e. studying how different rules of behaviour are performed in different
game situations. For instance, it is assumed that for reﬂexive games, where I try to
predict emotions and cognitions of the other player, there is no complex logic, but
there is the conventional logic given in payoff matrices and extended by a special
kind of heuristics presented by introspections, methods of internal thinking in the
player’s mind, etc. However, in my opinion we can state that there is a logical system
with special inference rules and that system is more complex than the payoff matrix
logic. This complex logic is described by payoff cellular automata proposed in this
chapter.
In conventional game theory an equilibrium of the game is nothing else that a
prediction of expected outcome of the game. In payoff cellular automata the players
makedecisioninaccordancewiththeirpredictionsandthepastdecisionsimplyfuture
decisions. Therefore equilibria can change at different time. The difference between
payoff matrices and payoff cellular automata are the same as the difference between
conventional computing with reducing all computations to Turing machines and
unconventional computing where heuristics is considered logically. So, payoff cel-
lular automata is just a way to extend conventional approaches by the logical formal-
ization of inﬁnitely many contexts inﬂuencing computations. Unconventional means
in game theory were ﬁrst formulated by Albin [9]. Since his pioneering work, the
cellular-automatic approach has been used in multi-agent games. Peter S. Albin has

11.1 Cellular-Automatic Approach in Logical Simulations of Swarm Behaviour
381
analyzed economic systems by means of generative linguistics and cellular automata
to explore complex dynamic interactions of human beings such as business cycles,
decentralized market trading, etc. He has showed that economic systems have the
complexity level at least of a Turing machine, therefore in macroeconomic predic-
tions we face problems which are undecidable within conventional computing. My
work is a continuation of his ideas and it is an attempt to involve cellular automata in
epistemic game theory. Whithin my approach it is possible to show that Aumann’s
agreement theorem [10] is invalid, see Theorems 10.2 and 10.3 [11]. This result is
more natural for our intuition and it shows that the new game logic given by payoff
cellular automata can describe much more real games logically—from bio-inspired
games and up to reﬂexive games.
11.1.1
Ecological Rationality and Cellular Automata
In the new branch of social psychology dealing with economic behaviour of differ-
ent agents such as customers there are collected many examples contradicting the
rationality assumptions of the standard socioeconomic model. In this model called
the constructivist one by Vernon L. Smith it is assumed that decision making is algo-
rithmically transparent and may be presented as an automaton (black box) where
inputs are algorithmically transformed into outputs. For instance, we can ever ﬁnd
the Nash competitive equilibrium if agents are rational, i.e. they possess both com-
plete information on basic logical rules of non-cooperative decision making, and
common knowledge in the meaning of Aumann’s agreement theorem (all know that
all know that they have this information). Rational agents have common expectations
of equilibria and therefore it holds in their behaviour. In this way an equilibrium is
a certain algorithm that transforms inputs (agents’ needs) into outputs (agents’ deci-
sions). So, we have the same situations as in a black box, because equilibria describe
outcomes and say nothing about the way players make decisions. As we see, deci-
sion making becomes automatic. It is just a constructivist approach, according to
which every agent is rational in exactly the same sense as theorists of game theory.
Nevertheless, experimental economists have reported that people usually do not fol-
low constructivist rationality and can be better or worse in achieving aims than it is
predicted in the way of this classical rationality. The situation is even much worse,
because the swarms are not subordinated to the pure behaviourism, also—they can
modify own actions and even have a proto-symbolic values. Hence, the classical
rationality does not cover the swarm behaviour, too.
Instead of constructivist rationality Vernon L. Smith proposed the so-called eco-
logical rationality that emphasizes contexts and frames of culturally-based action
and norms for the case of the human beings and context-based modiﬁcations of
actions for the case of the swarms:
Ecological rationality uses reason—rational reconstruction—to examine the behaviour of
individuals based on their experience and folk knowledge, who are “naive” in their ability
to apply constructivist tools to the decisions they make; to understand the emergent order

382
11
Payoff Cellular Automata and Reﬂexive Games
in human cultures; to discover the possible intelligence embodied in the rules, norms, and
institutions of our cultural and biological heritage that are created from human interactions
but not by deliberate human design [8].
In ecological rationality we deal not with a black box of automatic decisions, but
with kinds of habitus in decision behaviour, i.e. with decision lifestyles embodied
through the activities and experiences of everyday life. The black box model of
decisions, in particular the idea of looking for the Nash equilibrium, assumes that
there are decisions a priori (e.g. the Nash equilibrium) and just these decisions are
considered rational. For ecological rationality there are no decisions a priori (contexts
should always be taken into account). Whether this means that our decision or the
swarm decisions cannot be rational?
Let us examine the following simpliﬁed abstract model of market. There is a huge
number of agents. Each of them has a different sum of money and would like to
invest. These agents can (1) either loan money at 10% for one year (in this case my
payoff consists of +10% for one year), (2) or borrow money at 10% for one year for
investing them somewhere directly (in this case if I do not invest money, my payoff
is −10%), (3) or invest money in a joint business venture with expecting economic
proﬁt consisting of 20% of the investment for one year (i.e. my payoff is +20%). We
assume in this model that I always can earn money if I have people I know and they
agree to loan or invest in a joint business. Each agent loses 10% of his/her money
for one year. It means that if money were loaned, my payoff is 0%. If money were
borrowed and not invested, my payoff is −20%. If money were invested, my payoff
consists of +10%. Each agent becomes inactive (cannot invest or borrow) if (s)he
does not have money. Every agent has a possibility to behave wrongly one time, when
(1) either (s)he spends all outside investments aimed to be used in a joint venture; (2)
or (s)he does not give back borrowed money and does not pay an interest. If an agent
behaves wrongly second time, after that (s)he becomes inactive. Let us suppose,
each agent can interact only with agents whom (s)he knows. Let us call them his/her
neighbours. For two different agents, the sets of neighbours cannot be the same, but
their intersection is either empty, or non-empty. Each state of agent is deﬁned by the
sum of money which (s)he possesses including outside investments and can invest
further. The dynamics of states is ﬁxed by discrete time t = 0, 1, 2, . . . , where each
step t is one year. Each agent should fulﬁl only one investment at t and no more than
one borrowing/loaning at this t. A state of agent at t depends on states of neighbours,
whether they are active and ready to invest in a joint venture at t.
Is it possible to ﬁnd a priori decisions for this abstract model of market? We know
that at t > 0, the state of agent A1 depends on a state of neighbour A2, the state of A2
depends on a state of neighbour A3, the state of A3 depends on a state of neighbour
A4, and so on k times, where k is a number of all market agents. To sum up, the
larger t, the more difﬁcult is to predict my state. For predicting at t > 0, I should
know the behaviour of all agents of market. Nevertheless, it is impossible; I know
the behaviour just of my neighbours.
This abstract model of market shows that in everyday life we can resort to a black
box model of automatic (a priori) decisions only at t = 0. If t > 0, I am dealing with

11.1 Cellular-Automatic Approach in Logical Simulations of Swarm Behaviour
383
Fig. 11.1 Let S = {−3, −2, . . . , 7, 8} be the set of states. Let p be a state of cell z, q a state of its right
neighbourz0 ∈{z0} = N(z).The operations ¬,∧,and⇒are understoodasfollows:¬p = Nmax −p
if p ≥0 and ¬p = Nmax + p if p < 0; p ∧q = max(p, q); p ⇒q = Nmax −max(p, q) + q, where
Nmax is a maximal payoff, i.e. it is equal 8. Then an initial conﬁguration at t = 0 is transformed into
a conﬁguration at t = 1 by the following local transition function: pt+1(z) = (pt(z) ∧¬qt(z0)) ⇒
pt(z). This cellular automaton cannot vary at t > 1
ecological rationality, when there cannot be a priori decisions even if all agents are
rational in the classical meaning (e.g. they aim to remain active and to maximize
their proﬁts).
Thus, in ecological rationality we assume multi-agentness and massive paral-
lelism of decision making, which exclude the possibility of a priori decisions. To
formally simulate this kind of rationality we can appeal to a cellular automata for-
malism. Recall that any cellular automaton consists of cells belonging to the set Zd,
thereby each of cell takes its value in S, a ﬁnite or inﬁnite set of elements called the
states of an automaton. Usually, cells are considered unchangeable, but their states
change permanently. This dynamics depends on local transition rule δ : Sn+1 →S
that transforms states of cells taking into account states of n neighbour cells. The
ordered set of n elements, N, is said to be a neighbourhood. Each step of dynamics
is ﬁxed by discrete time t = 0, 1, 2, . . ..
At the moment t, the conﬁguration of the whole system (or the global state) is
given by the mapping xt from Zd into S, and the evolution is the sequence x0x1x2x3 . . .
deﬁned
as
follows:
xt+1(z) = δ(xt(z), xt(z + α1), xt(z + α2), . . . , xt(z + αn)),
where ⟨α1, α2, . . ., αn⟩∈N(z), i.e. they are neighbours of z. Here is the initial con-
ﬁguration, and it fully determines the future behaviour of the automaton.
Local transition functions may present different logical notions: syntactic, seman-
tic, proof-theoretic, etc. For instance, let us consider (p ∧¬q) ⇒p, a complex
Boolean formula, as local transition function in a cellular automaton of Fig.11.1,
where S = {−3, −2, . . . , 7, 8}. All states are considered different payoffs. This
automaton will simulate an inﬁnite process of truth valuation of (p ∧¬q) ⇒p. At
t > 0 the automaton of Fig.11.1 is reversible.
This example of cellular-automatic consideration of (p ∧¬q) ⇒p shows how
deep the massive-parallel understanding of logical notions differs from the conven-
tional one. First, in standard sequential thinking I analyzes sequences and in mas-
sively parallel thinking the dynamics of the whole system. Second, in conventional
logic all sequential possibilities are considered a priori, e.g. in semantic valuation
of a well-formed formula I regard all cases in what way different values of atomic
propositions inﬂuence on the value of the whole proposition. Due to this fact we
could claim that all the basic notions of conventional logic are a priori, they do not

384
11
Payoff Cellular Automata and Reﬂexive Games
depend on our experience and cover all possible cases. There is no initial conﬁgu-
ration of the whole that should be taken into account. It would be so aposterioristic.
On the contrary, in unconventional logic we focus on initial conﬁguration of the
whole system, because it causes all further dynamics. Hereby each step of dynam-
ics is unique and evolution may be inﬁnite. Under these circumstances all logical
notions in unconventional logic could be said to be a posteriori, they depend on initial
conﬁguration, i.e. on our experience.
An unconventional logic whose notions are presented in some cellular automata
is called aposterioristic, see [12]. About cellular automaton approach, see [13].
11.1.2
Proof-Theoretic Cellular Automata
Non-well-foundedproofsincludingcyclicproofshavebeenactivelystudyingrecently
(see [14–17]). Their features consist in that in the classical theory of deduction,
derivation trees, on the one hand, are ﬁnite and, on the other hand, they are without
cycles, while in the non-well-founded approach they can be inﬁnite and, at the same
time, circles occur in them. Non-well-founded proofs have different applications in
computer science. In the chapter I am proposing a more radical approach than other
non-well-founded approaches to deduction by deﬁning massive-parallel proofs and
rejecting axioms in proof theory. This novel approach is characterized as follows:
• Deduction is considered as a transition in cellular automata, where states of cells
are regarded as well-formed formulas of a logical language.
• We build up derivations without using axioms, therefore there is no sense in dis-
tinguishing logic and theory (i.e. logical and nonlogical axioms), derivable and
provable formulas, etc.
• In deduction we do not obtain derivation trees and instead of the latter we ﬁnd out
derivation traces, i.e. a linear evolution of each singular premise.
• Some derivation traces are circular, i.e. some premises are derivable from them-
selves.
• Some derivation traces are inﬁnite.
For any logical language L we can construct a proof-theoretic cellular automaton
(instead of conventional deductive systems) simulating massive-parallel proofs.
Deﬁnition 11.1 A proof-theoretic cellular automaton is a 4-tuple A = ⟨Zd, S, N,
δ⟩, where
• d ∈N is a number of dimensions and the members of Zd are referred as cells,
• S is a ﬁnite or inﬁnite set of elements called the states of an automaton A , the
members of Zd take their values in S, the set S is collected from well-formed
formulas of a language L .
• N ⊂Zd \ {0}d is a ﬁnite ordered set of n elements, N is said to be a neighbourhood,
• δ : Sn+1 →S that is δ is the inference rule of a language L , it plays the role of
local transition function of an automaton A.

11.1 Cellular-Automatic Approach in Logical Simulations of Swarm Behaviour
385
As we see, the automaton is considered on the endless d-dimensional space of
integers, i.e. on Zd. Discrete time is introduced for t = 0, 1, 2, . . . ﬁxing each step
of inferring.
For any given z ∈Zd, its neighbourhood is determined by z + N = {z + α : α ∈
N}. There are two often-used neighbourhoods:
• Von Neumann neighbourhood NV N = {z ∈Zd : d
k=1 |zk| = 1}
• Moore neighbourhood NM = {z ∈Zd : max
k=1,d
|zk| = 1} = {−1, 0, 1}d \ {0}d
Forexample,ifd = 2,NV N = {(−1, 0),(1, 0),(0, −1),(0, 1)};NM = {(−1, −1),
(−1, 0), (−1, 1), (0, −1), (0, 1), (1, −1), (1, 0), (1, 1)}.
In the case d = 1, von Neumann and Moore neighbourhoods coincide. It is easily
seen that |NV N| = 2d, |NM | = 3d −1.
Atthemomentt,theconﬁgurationofthewholesystem(ortheglobalstate)isgiven
by the mapping xt : Zd →S, and the evolution is the sequence x0, x1, x2, . . . deﬁned
as follows: xt+1(z) = δ(xt(z), xt(z + α1), . . . , xt(z + αn)), where ⟨α1, …, αn⟩∈N.
Here x0 is the initial conﬁguration, and it fully determines the future behaviour of
the automaton. It is the set of all premises (not axioms).
We assume that δ is an inference rule, i.e. a mapping from the set of premises (their
number cannot exceed n = |N|) to a conclusion. For any z ∈Zd the sequence x0(z),
x1(z), …, xt(z), … is called a derivation trace from a state x0(z). If there exists t such
that xt(z) = xl(z) for all l > t, then a derivation trace is ﬁnite. It is circular/cyclic if
there exists l such that xt(z) = xt+l(z) for all t.
Deﬁnition 11.2 In case all derivation traces of a proof-theoretic cellular automaton
A are circular, this automaton A is said to be reversible, see [18].
Notice that xt+1 depends only upon xt, i.e. the previous conﬁguration. It enables
us to build the function GA : CA →CA , where CA is the set of all possible conﬁg-
urations of the cellular automaton A (it is the set of all mappings Zd →S, because
we can take each element of this set as the initial conﬁguration x0, though not every
element can arise in the evolution of some other conﬁguration). GA is called the
global function of the automaton.
Example 11.1 (Modus ponens) Consider a propositional language L that is built in
the standard way with the only binary operation of implication ⊃. Let us suppose
that well-formed formulas of that language are used as the set of states for a proof-
theoretic cellular automaton A . Further, assume that modus ponens is a transition
rule of this automaton A and it is formulated for any ϕ, ψ ∈L as follows:
xt+1(z) =
ψ,
if xt(z) = ϕ ⊃ψ and ϕ ∈(z + N);
xt(z), otherwise.
The further dynamics will depend on the neighbourhood. If we assume the Moor
neighbourhood in the 2-dimensional space, this dynamics will be exempliﬁed by the
evolution of cell states in Figs.11.2, 11.3 and 11.4.

386
11
Payoff Cellular Automata and Reﬂexive Games
(p ⊃q) ⊃r
p ⊃(p ⊃q)
p ⊃q
(p ⊃q) ⊃(p ⊃q) (r ⊃p) ⊃r
(p ⊃r) ⊃(q ⊃r)
p ⊃q
p
p ⊃(p ⊃q)
r ⊃p
p ⊃r
p
p ⊃(q ⊃(p ⊃q))
p
r
p ⊃(q ⊃r)
p ⊃p
p ⊃q
(p ⊃r) ⊃(q ⊃p)
p ⊃r
p
q
p
(q
p)
q
p
r
p
Fig. 11.2 An initial conﬁguration of a proof-theoretic cellular automaton A with the Moor neigh-
bourhood in the 2-dimensional space, its states run over formulas set up in a propositional language
L with the only binary operation ⊃, t = 0. Notice that p, q, r are propositional variables
Fig. 11.3 An evolution of
A described in Fig.11.2 at
the time step t = 1
r
p ⊃q
q
p ⊃q r
q ⊃r
q
p
p ⊃q p
r
p
q ⊃(p ⊃q)
p
r
q ⊃r
p
q
q ⊃p r
p
q p
(q
p)
q
r
p
Fig. 11.4 An evolution of
A described in Fig.11.2 at
the time step t = 3. Its
conﬁguration cannot vary
further
r q q q r
r q p q p
r p q p r
r p q p r
q p q r p
This example shows that ﬁrst we completely avoid axioms and secondly we take
premisses from the cell states of the neighbourhood according to a transition function.
As a result, we do not come across proof trees in our novel approach to deduction
taking into account that a cell state has just a linear dynamics (the number of cells
and their location do not change). This allows us evidently to simplify deductive
systems.
Now we are trying to consider a cellular-automaton presentation of two basic
deductive approaches: Hilbert’s type and sequent ones.
Example 11.2 (Hilbert’s inference rules) Suppose a propositional language L con-
tains two basic propositional operations: negation and disjunction. As usual, the set
of all formulas of L is regarded as the set of states of an appropriate proof-theoretic
cellular automata. In that we will use the exclusive disjunction of the following ﬁve
inference rules converted from Joseph R. Shoenﬁeld’s deductive system:
xt+1(z) =
⎧
⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎩
ψ ∨ϕ,
if xt(z) = ϕ;
ϕ,
if xt(z) = ϕ ∨ϕ;
(χ ∨ψ) ∨ϕ, if xt(z) = χ ∨(ψ ∨ϕ);
χ ∨ψ,
if xt(z) = ϕ ∨χ and (¬ϕ ∨ψ) ∈(z + N);
χ ∨ψ,
if xt(z) = ¬ϕ ∨ψ and (ϕ ∨χ) ∈(z + N).
Example 11.3 (Sequent inference rules) Let us take a sequent propositional lan-
guage L , in which the classical propositional language with negation, conjunction,

11.1 Cellular-Automatic Approach in Logical Simulations of Swarm Behaviour
387
disjunction and implication is extended by adding the sequent relation →. Recall
that a sequent is an expression of the form Γ1 →Γ2, where Γ1 = {ϕ1, . . . , ϕj},
Γ2 = {ψ1, . . . , ψi} are ﬁnite sets of well-formed formulas of the standard proposi-
tional language, that has the following interpretation: Γ1 →Γ2 is logically valid
iff

j
ϕj ⊃
	
i
ψi
is logically valid. Let S denote the set of all sequents of L , furthermore let us
assume that this family S is regarded as the set of states for a proof-theoretic cellular
automaton A . The transition rule of A is an exclusive disjunction of the 14 singular
rules (6 structural rules and 8 logical rules):
xt+1(z) = Γ1 →Γ2,
⎧
⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎩
if Γ1 →Γ2 is a result of applying to xt(z)
eather one of structural rules
or the left (right) introduction of negation
or the left introduction of conjunction
or the right introduction of disjunction
or the right introduction of implication.
xt+1(z) =
⎧
⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎩
Γ →Γ ′, ψ ∧χ,
if xt(z) = Γ →Γ ′, ψ and
(Γ →Γ ′, χ) ∈(z + N);
Γ, ψ ∨χ →Γ ′,
if xt(z) = Γ, ψ →Γ ′ and
(Γ, χ →Γ ′) ∈(z + N);
ψ ⊃χ, Γ, Δ →Γ ′, Δ′, if xt(z) = Γ →Γ ′, ψ and
(χ, Δ →Δ′) ∈(z + N).
Example 11.4 (Brotherston’s cyclic proofs) The sequent language used in the previ-
ous example we extend by adding predicates N, E, O and appropriate inference rules
of Fig.11.5 for them. Further, let us extend also the automaton of Example 11.3 in
the same way by representing inference rules of Fig.11.5 in the cellular-automatic
form.
Now we assume that a cell has an initial state [Γ, N(z) →Δ, O(z), E(z)] and
its neighbour cell an initial state [Γ, z = 0 →Δ] that is equal to [Γ, z = 0 →
Δ, O(z), E(z)] for any t = 4, 14, 24, . . . and to [Γ, z = 0 →Δ, E(z), O(z)] for any
t = 9, 19, 29, . . .. Then we will have the following inﬁnite cycle:
[Γ, N(z) →Δ, O(z), E(z)] −→(substitution) [Γ, N(y) →Δ, O(y), E(y)] −→
[Γ, N(y) →Δ, O(y), O(y + 1)] −→[Γ, N(y) →Δ, E(y + 1), O(y + 1)] −→
[Γ, z = (y + 1), N(y) →Δ, O(z), E(z)] −→(case N) [Γ, N(z) →Δ, E(z), O(z)] −→. . .
Another instance of cyclic proof is given in the next subsection. As we see, the
possibility of cyclic derivation traces depends on conﬁguration of cell states.

388
11
Payoff Cellular Automata and Reﬂexive Games
Fig. 11.5 Inference rules for predicates N (‘being a natural number’), E (‘being an even number’),
O (‘being an odd number’), see [14]
Traditional tasks concerning proof theory like completeness and independence of
axioms lose their sense in massive-parallel proof theory, although it can be readily
shown that we can speak about consistency:
Proposition 11.1 Proof theories given in Examples 11.2 and 11.3 are consistent,
i.e. we cannot deduce a contradiction within them.
□
11.1.3
Proof-Theoretic Simulation of Belousov-Zhabotinsky
Reaction
In this subsection I am analyzing simulating the Belousov-Zhabotinsky reaction
within the framework of the theory of massive-parallel proofs.
Let us consider a proof-theoretic cellular automaton with circular proofs for the
Belousov-Zhabotinsky reaction containing feedback relations. The mechanism of
this reaction (namely cerium(III)←→cerium(IV) catalyzed reaction) is very compli-
cated: its recent model contains 80 elementary steps and 26 variable species concen-
trations. Let us consider a simpliﬁcation of Belousov-Zhabotinsky reaction assuming
that the set of states consists just of the following reactants: Ce3+, HBrO2, BrO−
3 ,
H +, Ce4+, H2O, BrCH (COOH)2, Br−, HCOOH, CO2, HOBr, Br2, CH2(COOH)2
which interact according to inference rules (reactions) (11.1)–(11.7). In this reaction
we observe sudden oscillations in color from yellow to colorless, allowing the oscilla-
tions to be observed visually. In spatially nonhomogeneous systems (such as a simple
petri dish), the oscillations propagate as spiral wave fronts. The oscillations last about
one minute and are repeated over a long period of time. The color changes are caused
by alternating oxidation-reductions in which cerium changes its oxidation state from
cerium(III) to cerium(IV) and vice versa: Ce3+ −→Ce4+ −→Ce3+ −→. . ..
When Br−has been signiﬁcantly lowered, the reaction pictured by inference rule
(11.1) causes an exponential increase in bromous acid (HBrO2) and the oxidized form
of the metal ion catalyst and indicator, cerium(IV). Bromous acid is subsequently
converted to bromate (BrO−
3 ) and HOBr [the step (11.3)]. Meanwhile, the step (11.2)

11.1 Cellular-Automatic Approach in Logical Simulations of Swarm Behaviour
389
reduces the cerium(IV) to cerium(III) and simultaneously increase bromide (Br−)
concentration. Once the bromide concentration is high enough, it reacts with bro-
mate (BrO−
3 ) and HOBr in (11.4) and (11.6) to form Br2, further Br2 reacts with
CH2(COOH)2 to form BrCH(COOH)2 and the process begins again. Thus, parallel
processes in (11.1)–(11.7) have several cycles which are performed synchronously.
The proof-theoretic simulation of Belousov-Zhabotinsky reaction can be deﬁned
as follows:
Deﬁnition 11.3 Consider apropositional languageL withtheonlybinaryoperation
⊕, it is built in the standard way over the set of variables S = {Ce3+, HBrO2, BrO−
3 ,
H +, Ce4+, H2O, BrCH (COOH)2, Br−, HCOOH, CO2, HOBr, Br2, CH2(COOH)2}.
Let S be the set of states of proof-theoretic cellular automaton A . The inference rule
of the automaton is presented by the conjunction of singular inference rules (11.1)–
(11.7):
(11.1) ∧(11.2) ∧(11.3) ∧(11.4) ∧(11.5) ∧(11.6) ∧(11.7).
The operation ⊕has the following meaning: A ⊕B deﬁnes a probability distri-
bution of events A and B in neighbour cells participated in a reaction caused the
appearance of A ⊕B. Then A simulates the Belousov-Zhabotinsky reaction.
Deﬁnition 11.4 Let p, si, si+1 ∈{Ce3+, HBrO2, BrO−
3 , H +, Ce4+, H2O, BrCH
(COOH)2, Br−, HCOOH, CO2, HOBr, Br2, CH2(COOH)2}. A state p is called a
premisefordeducingsi+1 fromsi bytheinferencerule(11.1) ∧(11.2) ∧. . . ∧(11.7)
iff
• p is si or
• in a neighbour cell we ﬁnd out an expression of the form p ⊕A, B ⊕C, where
A, B, C are propositional metavariables, i.e. they run over either the empty set or
the set of states closed under the operation ⊕. Thus, we assume that each premise
should occur in a separate cell. This means that if we ﬁnd out an expression
pi ⊕pj, B ⊕C or pi ⊕A, pj ⊕C in a neighbour cell and both pi and pj are needed
for deducing, whereas pi, pj do not occur in other neighbour cells, then pi, pj could
not be considered as premises.
xt+1(z) =
⎧
⎨
⎩
(1) Ce4+ ⊕HBrO2 ⊕H2O, if xt(z) ∈{Ce3+}
and premises HBrO2, BrO−
3 , H + ∈(z + N);
(2) xt(z), otherwise.
(11.1)
xt+1(z) =
⎧
⎨
⎩
(1) Br−⊕Ce3+ ⊕HCOOH ⊕CO2 ⊕H +, if xt(z) ∈{Ce4+}
and premises BrCH(COOH)2, H2O ∈(z + N);
(2) xt(z), otherwise.
(11.2)

390
11
Payoff Cellular Automata and Reﬂexive Games
xt+1(z) =
(1) HOBr ⊕BrO−
3 ⊕H +, if xt(z) ∈{HBrO2};
(2) xt(z),
otherwise.
(11.3)
xt+1(z) =
⎧
⎨
⎩
(1) HOBr ⊕HBrO2, if xt(z) ∈{BrO−
3 } and
premises Br−, H + ∈(z + N);
(2) xt(z),
otherwise.
(11.4)
xt+1(z) =
⎧
⎨
⎩
(1) HOBr, if xt(z) ∈{Br−} and
premises HBrO2, H + ∈(z + N);
(2) xt(z),
otherwise.
(11.5)
xt+1(z) =
⎧
⎨
⎩
(1) Br2 ⊕H2O, if xt(z) ∈{HOBr} and
premises Br−, H + ∈(z + N);
(2) xt(z),
otherwise.
(11.6)
xt+1(z) =
⎧
⎨
⎩
(1) Br−⊕H + ⊕BrCH(COOH)2, if xt(z) ∈{Br2}
and premises CH2(COOH)2 ∈(z + N);
(2) xt(z), otherwise.
(11.7)
Example 11.5 (Belousov-Zhabotinsky’s cyclic proofs) We can simplify the automa-
ton deﬁned above assuming that ⊕is a metatheoretic operation with the following
operational semantics:
A ⊕B
A
A ⊕B
B
,
where A and B are metavariables deﬁned on S. The informal meaning of that operation
is that we can ignore one of both variables coupled by ⊕. In the cellular automaton
A this metaoperation will be used as follows:
xt+1(z) =
⎧
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩
X , Y,
if xt(z) = A ⊕B and according to rules (11.1)–(11.7),
X changes from A and Y changes from B;
X ,
if xt(z) = A ⊕B and according to rules (11.1)–(11.7),
X changes from A and B does not change;
Y,
if xt(z) = A ⊕B and according to rules (11.1)–(11.7),
Y changes from B and A does not change;
A ⊕B, if xt(z) = A ⊕B and rules (11.1)–(11.7)
cannot be applied to A or B.
(11.8)
Let us suppose now that X , Y run over the set of states closed under the operation ⊕.

11.1 Cellular-Automatic Approach in Logical Simulations of Swarm Behaviour
391
xt+1(z) =
⎧
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩
X , Y, if (i) xt(z) = X , Y and (ii) both X , and Y
are simultaneously usable (not usable)
as premises in at least two different rules
of (11.1)–(11.7) (see Deﬁnition 11.4);
X ,
if (i) xt(z) = X , Y and (ii) only X is usable
as a premise in at least one rule of (11.1)–(11.7);
Y,
if (i) xt(z) = X , Y and (ii) only Y is usable
as a premise in at least one rule of (11.1)–(11.7).
(11.9)
idempotency: A := A, A.
(11.10)
commutativity: A, B := B, A.
(11.11)
Hence, we cannot ignore one of both variables coupled by ⊕and should accept
both them if in the neighbourhood there are reactants that catenate both variables and
change them. This rule is the simplest interpretation of A ⊕B. We have three cases:
(i) both variables are catenated with reactants from the neighbourhood, in this case
we mean that the probability distribution of events A and B is the same and equal
to 0.5 and, as a result, we cannot choose one of them and accept both; (ii) only A is
catenated with reactants from the neighbourhood, then the probability distribution
of event A is equal to 1.0 and that of B to 0.0; (iii) only B is catenated with reactants
from the neighbourhood, then the probability distribution of event B is equal to 1.0
and that of A to 0.0. Thus, A ⊕B is a function that associates either exactly one value
with its arguments (i.e. either A or B) or simultaneously both values (i.e. A and B).
This simpliﬁed version of the automaton A is exempliﬁed in Fig.11.6.
Evidently, reducing the complicated dynamics of Belousov-Zhabotinsky reaction
to conventional logical proofs is a task that cannot be solved so easily I have just
done.
The Belousov-Zhabotinsky reaction is one of the best examples of self-organiza-
tion in nature. Hence, an opportunity to have a cycle in proof-theoretic automata
testiﬁes to a self-organization.
11.1.4
Proof-Theoretic Simulation of Slime Mould Dynamics
The dynamics of plasmodium of Physarum polycephalum could be regarded as
another simple example of the natural proof-theoretic automata. The point is that
when the plasmodium is cultivated on a nutrient-rich substrate (agar gel containing
crushed oat ﬂakes) it exhibits uniform circular growth similar to the excitation waves
in the excitable Belousov-Zhabotinsky medium. If the growth substrate lacks nutri-
ents, e.g. the plasmodium is cultivated on a non-nutrient and repellent containing gel,

392
11
Payoff Cellular Automata and Reﬂexive Games
(I) Initial conﬁguration, t = 0
HBrO2
BrO−
3
H+
BrCH(COOH)2
Ce3+
H2O
Br−
CH2(COOH)2 BrO−
3
⇓
(II) t = 1
HOBr ⊕BrO−
3 ⊕H+
BrO−
3
H+
BrCH(COOH)2
Ce4+ ⊕HBrO2 ⊕H2O H2O
Br−
CH2(COOH)2
BrO−
3
⇓
(III) t = 2
HOBr ⊕BrO−
3 ⊕H+
BrO−
3
H+
BrCH(COOH)2
Br−⊕Ce3+ ⊕HCOOH ⊕CO2 ⊕H+, H2O
HOBr ⊕BrO−
3 ⊕H+
Br−
CH2(COOH)2
BrO−
3
⇓
(IV) t = 3
HOBr ⊕BrO−
3 ⊕H+
HOBr ⊕HBrO2
H+
BrCH(COOH)2
Br−⊕Ce3+ ⊕HCOOH ⊕CO2 ⊕H+, Br2 ⊕H2O, H2O
HOBr ⊕HBrO2
Br−
CH2(COOH)2
BrO−
3
⇓
(V) t = 4
HOBr ⊕BrO−
3 ⊕H+
Br2 ⊕H2O, HOBr ⊕BrO−
3 ⊕H+
H+
BrCH(COOH)2
Ce4+ ⊕HBrO2 ⊕H2O, Br2 ⊕H2O, HOBr ⊕BrO−
3 ⊕H+ H2O
HOBr, Br−⊕H+ ⊕BrCH(COOH)2
Br−
CH2(COOH)2
BrO−
3
⇓
(VI) t = 5
Br2 ⊕H2O, HOBr ⊕HBrO2
Br2 ⊕H2O, HOBr ⊕HBrO2
H+
BrCH(COOH)2
Br2 ⊕H2O, Br−⊕Ce3+ ⊕HCOOH ⊕CO2 ⊕H+, H2O
HOBr ⊕BrO−
3 ⊕H+, HOBr ⊕HBrO2,
Br−⊕H+ ⊕BrCH(COOH)2
Br−
CH2(COOH)2
BrO−
3
⇓
...
Fig. 11.6 The evolution of a reversible proof-theoretic cellular automaton A with the Moor neigh-
bourhood in the 2-dimensional space for the Belousov-Zhabotinsky reaction. This automaton sim-
ulates the circular feedback Ce3+ −→Ce4+ −→Ce3+ −→. . . (more precisely temporal oscilla-
tions in a well-stirred solution): Ce3+ is colorless and Ce4+ is yellow. The initial conﬁguration of
A -cells described in (I) occurs in the same form at the further steps and the cycle repeats several
times. For entailing (I) −→(II) we have just used inference rule (11.1) (row 2, column 2) and
inference rule (11.3) (row 1, column 1), for entailing (II) −→(III) inference rules (11.2), (11.3)
and (11.8) (row 2, column 2), for entailing (III) −→(IV) inference rule (11.4) (row 1, column 2)
and inference rules (11.4), (11.6), (11.8) and (11.9) (row 2, column 2), for entailing (IV) −→(V)
inference rules (11.3) and (11.6) (row 1, column 2) inference rules (11.1), (11.3), (11.5), (11.6),
(11.7), (11.8) and (11.9) (row 2, column 2), for entailing (V) −→(VI) inference rules (11.4), (11.6)
(row 1, column 1), inference rules (11.4), (11.6), (11.10) (row 1, column 2), inference rules (11.2),
(11.3), (11.4), (11.6), (11.7), (11.9), (11.10), (11.11) (row 2, column 2)

11.1 Cellular-Automatic Approach in Logical Simulations of Swarm Behaviour
393
a wet ﬁlter paper or even glass surface localizations emerge and branching patterns
become clearly visible.
The plasmodium continues its spreading, reconﬁguration and development as long
as there are enough nutrients. When the supply of nutrients is over, the plasmodium
either switches to a fructiﬁcation state (if the level of illumination is high enough),
when sporangia are produced, or forms sclerotium (if there is darkness).
The pseudopodium propagates in a manner analogous to the formation of wave-
fragments in sub-excitable Belousov-Zhabotinsky systems. Starting in the initial
conditions, the plasmodium exhibits a foraging behaviour, searching for sources of
nutrients. When such sources are located and taken over, the plasmodium forms char-
acteristic veins of protoplasm. The Belousov-Zhabotinsky reaction and the plasmod-
ium are light-sensitive, which gives us the means to program them. The plasmodium
of Physarum polycephalum exhibits an articulated negative phototaxis, the Belousov-
Zhabotinsky reaction is inhibited by light. Therefore by using masks of illumination
one can control the dynamics of localizations in these media. The light-sensitivity
of plasmodium has been already explored in the design of robotics controllers [19].
Experiments with Physarum polycephalum were carried out by Andrew Adamatz-
ky as follows. The plasmodia of Physarum polycephalum were cultured on wet paper
towels, fed with oat ﬂakes, and moistened regularly. He subcultured the plasmodium
every 5–7days. The repellents were implemented with illumination domains using
blue electroluminescent sheets, see details in [19]. Masks were prepared from black
plastic, namely the triangle was cut in the plastic, when this mask was placed on top
of the electro-luminescent sheet, the light was passing only through the cuts [19].
Results of experiments may be described in the terms of proof-theoretic cellular
automata. Let us assume that its set of states consists of the entities from the following
sets.
1. The set of neutral zones, {Z1, Z2, . . .}, where nothing goes.
2. The set of growing pseudopodia, {P1, P2, . . .}, localized in active zones. On
a nutrient-rich substrate, the plasmodium propagates as a typical circular, tar-
get wave, while on the nutrient-poor substrates localized wave-fragments are
formed.
3. The set of attractants {A1, A2, . . .}, they are sources of nutrients, on which the
plasmodium feeds. Based on previous experiments by Prof. Adamatzky, we can
assume that if the whole experimental area is about 8–10 cm in diameter, then
the plasmodium can locate and colonize nearby sources of nutrients.
4. The set of repellents {R1, R2, . . .}. The plasmodium of Physarum polycephalum
avoids light. Thus, domains of high illumination are repellents such that each
repellent R is characterized by its position and intensity of illumination, or the
force of repelling.
5. The set of protoplasmic tubes {C1, C2, . . .}. Typically plasmodium spans sources
of nutrients with protoplasmic tubes/veins. The plasmodium builds a planar
graph, where nodes are sources of nutrients, e.g. oat ﬂakes, and edges are pro-
toplasmic tubes.

394
11
Payoff Cellular Automata and Reﬂexive Games
Hence, the set of states in the proof-theoretic cellular automaton for dynamics
of plasmodium of Physarum polycephalum is equal to {Z1, Z2, . . .} ∪{P1, P2, . . .} ∪
{A1, A2, . . .} ∪{R1, R2, . . .} ∪{C1, C2, . . .}.
The proof-theoretic simulation of Physarum polycephalum is deﬁned as follows:
Deﬁnition 11.5 Consider apropositional languageL withtheonlybinaryoperation
⊕,itisbuiltinthestandardwayoverthesetofvariablesS = {Z1,Z2,…,P1,P2,…,A1,
A2, . . . , R1, R2, …, C1, C2, . . .}. Let S be the set of states of proof-theoretic cellular
automaton A . The inference rule of the automaton is presented by the conjunction
of singular inference rules (11.12)–(11.18):
(11.12) ∧(11.13) ∧(11.14) ∧(11.15) ∧(11.16) ∧(11.17) ∧(11.18).
The operation ⊕has the following meaning: A ⊕B deﬁnes a probability dis-
tribution of events A and B in cells. The operation ⊕is idempotent, commutative
and associative. Then A simulates the dynamics of plasmodium of Physarum poly-
cephalum.
Deﬁnition 11.6 Let
p, si, si+1 ∈{Z1,
Z2, . . . , P1, P2, . . . , A1,
A2, . . . , R1,
R2, . . . , C1, C2, . . .}. A state p is called a premise for deducing si+1 from si by
inference rules (11.12)–(11.18) iff
• p is si or
• in a neighbour cell we ﬁnd out an expression of the form p ⊕X , where X is a
propositional metavariable, i.e. it runs over either the empty set or the set of states
closed under the operation ⊕. Thus, we assume that each premise should occur
in a separate cell. This means that if we ﬁnd out an expression pi ⊕pj ⊕X in a
neighbour cell and both pi and pj are needed for deducing, whereas pi, pj do not
occur in other neighbour cells, then pi, pj could not be considered as premises.
This restriction is just for rule (11.18).
xt+1(z) =
(1) X if xt(z) = X ⊕Ai and and X = Y ⊕Pj
(2) xt(z), otherwise.
(11.12)
xt+1(z) =
 (1) X ⊕Pj if xt(z) = X ⊕Cn ⊕Ai
(2) xt(z), otherwise.
(11.13)
xt+1(z) =
(1) X ⊕Pj if xt(z) = X ⊕Pj ⊕Ai
(2) xt(z), otherwise.
(11.14)
xt+1(z) =
(1) X ⊕Pi ∨X ⊕Pj if xt(z) = X ⊕Pi ⊕Pj
(2) xt(z), otherwise.
(11.15)
xt+1(z) =
(1) X ⊕Ci ∨X ⊕Cj if xt(z) = X ⊕Ci ⊕Cj
(2) xt(z), otherwise.
(11.16)

11.1 Cellular-Automatic Approach in Logical Simulations of Swarm Behaviour
395
xt+1(z) =
⎧
⎪⎪⎨
⎪⎪⎩
(1) X ⊕Ci, if xt(z) = X and
premises Ri /∈(z + N),
premises Cj, Ai ∈(z + N);
(2) xt(z),
otherwise.
(11.17)
xt+1(z) =
⎧
⎪⎪⎨
⎪⎪⎩
(1) X ⊕Ci, if xt(z) = X and
premises Ri /∈(z + N),
premises Pj, Ai ∈(z + N);
(2) xt(z),
otherwise.
(11.18)
This automaton can simulate the plasmodium behaviour completely only in case
the plasmodium faces not more than one attractant and one repellent at each time step.
The matter is that in this situation, the swarm behaviour of plasmodium is reduced
to primitive reactions of bacteria such as Salmonella typhimurium—either to react
to one attractant or to react to one repellent. In this way, we can implement the pure
behaviourism (a complete outer control of all actions) in the strict sense. In the case
of several neighbour attractants and repellents there can be lateral inhibition or lateral
activation effects that would change a cellular-automatic transition rule at some time
steps. Thus, it gives the main difference of the slime mould from the Belousov-
Zhabotinsky reaction. The slime mould can play in proto-reﬂexive games—it can
change the own decisions. About other cellular-automatic formalizations of slime
mould, see [20, 21] (Fig.11.7).
Fig. 11.7 The evolution of a
proof-theoretic cellular
automaton A with the Moor
neighbourhood in the
2-dimensional space for
Physarum polycephalum
(I) Initial conﬁguration, t = 0
A11 Z12 A31
R12 Z22 Z32
R13 Z23 P33
⇓
(II) t = 1
A11 Z12
A31
R12 Z22 Z32 ⊕C32
R13 Z23
P33
⇓
(III) t = 2
A11 Z12 A31 ⊕C31
R12 Z22 Z32 ⊕C32
R13 Z23
P33
⇓
(IV) t = 3
A11 Z12
P31
R12 Z22 Z32 ⊕C32
R13 Z23
P33

396
11
Payoff Cellular Automata and Reﬂexive Games
11.2
Payoff Cellular Automata
The swarms such as foraging ants and plasmodia can make context-based decisions
and change them. Usually, for representing databases of games, payoff matrices are
involved (see Fig.11.8). However, in the case of accepting the ecological rationality
(an opportunity of changing past decisions) we cannot appeal to payoff matrices.
For example, we cannot appeal to them if we deal with games limited by some
contexts or with inﬁnite games. Some kinds of databases for making decisions within
aposterioristic logics could be presented by payoff cellular automata. These automata
are constructed as follows. Cells of automata belong to the set Zd and they take its
value in S. The set S of states consists of payoff for all n players. The cardinality
|S| is equal i1 · i2 · . . . · in, where ij is the number of all strategies for the j-th player,
j = 1, . . . , n. Each state has the form of n-tuple ⟨aij...k, bij...k, . . . , cij...k⟩, where
(1) aij...k is the payoff to player 1 when (1) he plays ai; (2) player 2 plays bj; …, (n)
player n plays ck;
(2) bij...k is the payoff to player 2 when (1) player 1 plays ai; (2) player 2 plays bj;
…, (n) player n plays ck;
… …
(n) cij...k is the payoff to player n when (1) player 1 plays ai; (2) player 2 plays bj;
…, (n) player n plays ck.
The local transition function, δj, for the player j, where j = 1, . . . , n, is presented
by a decision rule based on the past payoff for all players. The rule δj can be the same
for all players or different. The initial conﬁguration of payoff cellular automaton is
the set of all premises which fully determines the future behaviour of the automaton.
Theymaybeunderstoodastheexpectedpayofffordifferentcontextsbeforethegame.
The game context is deﬁned by the neighbourhood N(z) for the cell z. The number
of premises (the past payoff that we can take into account) cannot exceed the number
n = |N(z) ∪z|. The decision rule δj is a mapping from the set of premises N(z) ∪z
to a conclusion. This rule generates the sequence a0(z), a1(z), a2(z), . . . , at(z), . . .
for any z ∈Zd, where a = ⟨aij...k, bij...k, . . . , cij...k⟩and ai(z) means the state of z at
the i-th step of application of δj to a0(z), the state of z at step 0. That sequence is
called a derivation trace from an initial state a0(z).
Player1
Player2
a1
a2
b1 ⟨a11,b11⟩⟨a21,b21⟩
b2 a12,b12
a22,b22
Fig. 11.8 An example of a payoff matrix showing the possible strategies available to player 1
(namely a1 and a2) and player 2 (namely b1 and b2) and the payoff that each player receives for his
choice, depending on what the other players do. The payoff is in the form ⟨aij, bij⟩, where aij is the
payoff to player 1 when he plays ai and player 2 plays bj and bij is the payoff to player 2 when he
plays bj and player 2 plays ai

11.2 Payoff Cellular Automata
397
11.2.1
Saddle Point
Let us consider a simple payoff cellular automaton for the game with two players
1 and 2. Let aij be a payoff for the i-th strategy of player 1 and j-th strategy of
player 2. If max
i
min
j
aij = min
j
max
i
aij for z ∪N(z) at step t, then aij is called a
saddle point for z at time t. Thus, a saddle point is the element of the payoff cellular
automaton at time t which is both a maximum of the minimums of each row within
the neighbourhood N(z) and a minimum of the maximums of each column within
the same neighbourhood. The cells z ∪N(z) may have no saddle points, one saddle
point, or multiple saddle points. Let the payoff states pictured in Fig.11.9 be an initial
conﬁguration of the automaton. The set S of states consists of the integers −5, −4,
−3, …, 7, 8.
The local transition function is deﬁned as follows:
at+1(z) =
⎧
⎨
⎩
aij,
if aij = max(akl, amn),
where akl, amn are saddle points of N(z) ∪z;
at(z), otherwise.
At time t = 1, the conﬁguration of Fig.11.9 has the form of Fig.11.10.
11.2.2
Minimax and Maximin
Assume that aij (respectively bij) is the payoff to player 1 (respectively to player
2) when he uses the i-th strategy of his 3 total strategies and player 2 uses the j-
th strategy of his 4 total strategies. In the neighbourhood for each cell, a different
number of strategies can be engaged (see Figs.11.11, 11.12). For example, in the
cell of Fig.11.11 whose state is marked by bold, the neighbourhood contains only
8
2 3 2
3
–3 0 2 –5 –4
–2 –1 6 –1 8
4
1 9 2
4
5 –2 3 0
2
Fig. 11.9 An initial conﬁguration of a payoff cellular automaton with the neighbourhood consisting
of 8 members in a 2-dimensional space and with players 1 and 2
Fig. 11.10 Values of given
in Fig.11.9 at time t = 1
2 2 2 2 2
2 2 2 2 2
1 1 1 2 2
1 1 1 2 2
1 1 1 2 2

398
11
Payoff Cellular Automata and Reﬂexive Games
⟨a21,b21⟩⟨a31,b31⟩⟨a22,b22⟩⟨a11,b11⟩⟨a33,b33⟩
⟨a13,b13⟩⟨a23,b23⟩⟨a11,b11⟩⟨a13,b13⟩⟨a14,b14⟩
⟨a34,b34⟩⟨a12,b12⟩⟨a33,b33⟩⟨a23,b23⟩⟨a11,b11⟩
⟨a11,b11⟩⟨a11,b11⟩⟨a14,b14⟩⟨a11,b11⟩⟨a12,b12⟩
a22,b22
a33,b33
a24,b24
a22,b22
a34,b34
Fig. 11.11 An initial conﬁguration of a payoff cellular automaton with the neighbourhood consist-
ing of 8 members in a 2-dimensional space and with players 1 and 2. In this automata we involve
an appropriate payoff matrix. The given inﬁnite table will be interpreted as inﬁnitely many payoff
matrices, where payoff oucomes are mixed. This mix for any neighbourhood may be interpreted as
a correction of initial strategies or false public announcement. It is a result of that an appropriate
context holds
⟨10,3⟩
⟨9,8⟩
⟨4,3⟩
⟨5,7⟩⟨10,10⟩
⟨6,7⟩
⟨3,5⟩
⟨5,7⟩
⟨6,7⟩
⟨1,1⟩
⟨2,1⟩
⟨2,5⟩
⟨10,10⟩⟨3,5⟩
⟨5,7⟩
⟨5,7⟩
⟨5,7⟩
⟨1,1⟩
⟨5,7⟩
⟨2,5⟩
4,3
10,10
8,7
4,3
2,1
Fig. 11.12 Values of given in Fig.11.11 at time t = 0
5 payoff combinations of 12 possible ones. Let us assume that all payoff values of
Fig.11.11 are given in Fig.11.12.
Let us suppose that player 1 knows that player 2 prefers to choose j(i) for the
i-th strategy of player 1 for all cells z ∪N(z) at step t such that aij(i) ≤aij for any
j = 1, . . . , n occurring in z ∪N(z) at step t. Let us denote ai = aij(i) = min
1≤j≤n aij,
where i = 1, . . . , m. Then the best strategy for player 1 is a choice of i0 such that
α = max
i
ai = max
1≤i≤m min
1≤j≤n aij = αi0
This decision rule in choosing α is called a maximin strategy. By this strategy
player 1 avoids the worst possible performance, maximizing the minimal performing
criterion of player 2.
Let player 2 assume that for any j player 1 chooses i(j) for cells z ∪N(z) at step t
such that bi(j)j ≥bij for any i, i.e. βj = max
1≤i≤m bij. Then player 2 chooses j with minimal
βj for cells z ∪N(z) at step t:
β = min
1≤j≤m max
1≤i≤n bij = βj0
This decision rule in choosing β is called a minimax strategy. This strategy of
player 2 minimizes the expected payoff under the assumption that player 1 aims to
maximize this payoff.
The dynamics of the given cellular automaton is pictured in Figs.11.13, 11.14
and 11.15.

11.2 Payoff Cellular Automata
399
Fig. 11.13 Values of given
in Fig.11.12 at time t = 1
⟨6,7⟩⟨6,7⟩⟨5,7⟩⟨5,7⟩⟨5,7⟩
⟨2,5⟩⟨4,7⟩⟨4,7⟩⟨4,7⟩⟨3,7⟩
⟨2,5⟩⟨2,7⟩⟨3,7⟩⟨3,7⟩⟨3,7⟩
⟨2,5⟩⟨2,7⟩⟨3,7⟩⟨3,7⟩⟨3,3⟩
5,7
5,7
5,7
4,7
4,3
Fig. 11.14 Values of given
in Fig.11.12 at time t = 2.
Notice that bij cannot vary at
any time t > 2
⟨4,7⟩⟨4,7⟩⟨4,7⟩⟨4,7⟩⟨4,7⟩
⟨2,7⟩⟨3,7⟩⟨3,7⟩⟨3,7⟩⟨3,7⟩
⟨2,7⟩⟨3,7⟩⟨3,7⟩⟨3,7⟩⟨3,7⟩
⟨2,7⟩⟨3,7⟩⟨3,7⟩⟨3,7⟩⟨3,7⟩
2,7
3,7
3,7
3,7
3,7
Fig. 11.15 Values of given
in Fig.11.12 at time t = 3.
Notice that aij cannot vary at
any time t > 3
⟨3,7⟩⟨3,7⟩⟨3,7⟩⟨3,7⟩⟨3,7⟩
⟨3,7⟩⟨3,7⟩⟨3,7⟩⟨3,7⟩⟨3,7⟩
⟨3,7⟩⟨3,7⟩⟨3,7⟩⟨3,7⟩⟨3,7⟩
⟨3,7⟩⟨3,7⟩⟨3,7⟩⟨3,7⟩⟨3,7⟩
3,7
3,7
3,7
3,7
3,7
Thus, player 1 has followed the maximin strategy, while player 2 has followed
the minimax strategy. As a result, at any time t > 3 the payoff cellular automaton
has become reversible.
In payoff cellular automata their local transition functions can be set by logical
(e.g. Boolean) superpositions of decision rules. As an example of such automata, let
us consider a context-based inﬁnite game with the following decision rule: ‘if in the
game context there is an equilibrium in dominant pure strategies, then the current
state holds.’
11.2.3
Equilibrium in Dominant Strategies as Conditional
Recall that an equilibrium in dominant pure strategies in two-player games is pre-
sented by a pair of strategies (a, b) if and only if (i) while player 1 chooses any of
his possible strategies, strategy b is the only strategy that will produce the highest
possible payoff for player 2; (ii) while player 2 chooses any of his possible strate-
gies, strategy a is the only strategy that will produce the highest possible payoff for
player 1. Let us suppose that an initial conﬁguration of cellular automaton is given
in Fig.11.16 and the set S of states consists of all pairs ⟨aij, bij⟩, where aij, bij are
integers of [−15, 13].
Now we can deﬁne implication for all pairs ⟨aij, bij⟩, ⟨akl, bkl⟩∈S:
⟨aij, bij⟩⇒⟨akl, bkl⟩= ⟨Nmax −sup(aij, akl) + akl, Nmax −sup(bij, bkl) + bkl⟩,
where Nmax = 13.

400
11
Payoff Cellular Automata and Reﬂexive Games
⟨3,3⟩
⟨12,−12⟩⟨13,−15⟩
⟨−12,12⟩⟨−5,−5⟩⟨−2,−2⟩
1,1
0,
6
2,
3
Fig. 11.16 An initial conﬁguration of a payoff cellular automaton with the neighbourhood consist-
ing of 8 members in a 2-dimensional space and with players 1 and 2
⟨−5,−5⟩⇒⟨3,3⟩
⟨−2,−2⟩⇒⟨12,−12⟩⟨−2,−2⟩⇒⟨13,−15⟩
⟨−5,−5⟩⇒⟨−12,12⟩⟨−2,−2⟩⇒⟨−5,−5⟩⟨−2,−2⟩⇒⟨−2,−2⟩
5,
5
1,1
2,
2
0,
6
2,
2
2,
3
Fig. 11.17 Values of given in Fig.11.16 at time t = 1
⟨13−sup(−5,3)+3,
⟨13−sup(−2,12)+12,
⟨13−sup(−2,13)+13,
13−sup(−5,3)+3⟩
13−sup(−2,−12)−12⟩13−sup(−2,−15)−15⟩
⟨13−sup(−5,−12)−12, ⟨13−sup(−2,−5)−5,
⟨13−sup(−2,−2)−2,
13−sup(−5,12)+12⟩
13−sup(−2,−5)−5⟩
13−sup(−2,−2)−2⟩
⟨13−sup(−5,−1)−1,
⟨13−sup(−2,0)+0,
⟨13−sup(−2,2)+2,
13
sup
5,1
1
13
sup
2,
6
6
13
sup
2,
3
3
Fig. 11.18 Values of given in Fig.11.16 at time t = 1
Fig. 11.19 Values of given
in Fig.11.16 at time t = 1
⟨13,13⟩⟨13,3⟩
⟨13,0⟩
⟨6,13⟩⟨10,10⟩⟨13,13⟩
13,13
13,9
13,12
Then the local transition function is deﬁned thus:
at+1(z) =
⎧
⎪⎪⎨
⎪⎪⎩
⟨aij, bij⟩⇒⟨akl, bkl⟩, if ⟨aij, bij⟩is a single equilibrium
in dominated strategies
of N(z) ∪z and ⟨akl, bkl⟩= at(z);
at(z),
otherwise.
After applying this function to the initial conﬁguration given in Fig.11.16, we
obtain the data of Figs.11.17, 11.18 and 11.19.
To sum up notice that equilibria in dominant strategies could be different for dif-
ferent game contexts (neighbourhoods for different cells) and our reasoning ‘if in the
game context there is an equilibrium in dominant strategies, then the current state
holds’ is a kind of reﬂexion formalized in payoff cellular automaton of Fig.11.16.
There can be very complex forms of reﬂexion in game decisions. They may be formu-
lated only within aposterioristic logics, because in different contexts our reasoning
will have a different meaning.
Now let us analyze a simple case of game reﬂexion where players follow different
reasoning.

11.2 Payoff Cellular Automata
401
11.2.4
PROMETHEE Method
Let us consider a payoff cellular automaton when a decision is being made from
alternative solutions under multiple criteria of choice for each player. Assume that
the set S of states consists of payoff for all n players and S is equal k = i1 · i2 · . . . · in,
where ij is the number of all strategies for the j-th player, j = 1, . . . , n. Thus, there
are k alternatives a1, . . . , ak, where
a =

aij...k, bij...k, ..., cij...k



n

.
They are being evaluated by m criteria g1(·), . . . , gm(·). Let a preference relation
Pi(ar, aq) be associated to each criterion gi. It represents the degree of the preference
of alternative ar over aq for criterion gi and satisﬁes the condition 0 ≤Pi(ar, aq) ≤1.
The equality Pi(ar, aq) = 0 means an indifference, Pi(ar, aq) = 1 means a strict pref-
erence, Pi(ar, aq) ≈0 means a weak preference, and Pi(ar, aq) ≈1 means a strong
preference. Let us take weights wi of relative importance of the different criteria gi
such that m
i=1 wi = 1. Assume that the higher the weight, the more important the
criterion. Now we can deﬁne a multicriteria preference index π(ar, aq) of ar over aq:
π(ar, aq) =
m

i=1
wi · Pi(ar, aq).
This index takes values between 0 and 1 as well. It represents the global intensity
of preference among alternatives. The method for obtaining π(ar, aq) is called the
PROMETHEE method. If π(ar, aq) > π(aq, ar), we say that ar is preferred over aq
and if π(ar, aq) = π(aq, ar), we say that ar and aq are indifferent. This allows us to
set a partial ordering of relations ≥π on all alternatives ar, aq ∈S: ar ≥π aq if and
only if π(ar, aq) > π(aq, ar) or π(ar, aq) = π(aq, ar). In that ordered structure the
following logical operations are deﬁned:
max(ar, aq) = ar if and only if ar ≥π aq;
min(ar, aq) = ar if and only if aq ≥π ar;
ar ∨aq := max(ar, aq);
ar ∧aq := min(ar, aq);
¬ar = max
q
aq for all aq such that π(ar, aq) = 0 or π(aq, ar) = 0;
ar ⇒aq := ¬ar ∨aq.

402
11
Payoff Cellular Automata and Reﬂexive Games
Let Bπ denote a superposition of the operations above. Suppose that for the j-th
player (j = 1, . . . , n) the sign Bj
π denotes a logical superposition deﬁned only on all
j-th projections of all tuples occurring in Bπ, while its ≥π concerns the whole tuples.
Then we can deﬁne the local transition function:
at+1(z) = ⟨B1
π, B2
π, . . . , Bn
π⟩,
where B1
π, B2
π, …, Bn
π are different logical superpositions deﬁned on alternatives of
cells z ∪N(z) at step t.
Hence, each j-th player possesses reﬂexion Bj
π that gives different results in dif-
ferent game contexts (different neighbourhoods) and reasoning of all players at time
t inﬂuence their reasoning at time t + 1.
11.3
Reﬂexive Games
In reﬂexive games we assume an unlimited hierarchy of cognitive pictures of reality.
In the bimatrix game with agents i and j, there are two pictures of the same A: KiA
(belonging to i) and KjA (belonging to j). Then there are KjKiA and KiKjA, where
KjKiA are pictures of agent j about pictures of agent i, KiKjA are pictures of agent
i about pictures of agent j. Then there are KiKjKiA and KjKiKjA, etc. Please see
Deﬁnitions 10.1 and 10.2.
Let us deﬁne reﬂexive games within payoff cellular automata. Designate reﬂex-
ive players by 1 and 2. Let A, a state of affairs, be identiﬁed with a set of payoffs
within a game context (i.e. within a neighbourhood). In other words, let A⟨aij,bij⟩be
a set of payoffs at the point z ∈Zd consisting of all payoffs of N(z) ∪z, where z has a
state ⟨aij, bij⟩, see Fig.11.16, where the initial conﬁguration of the payoff
cellular automaton presents 9 states of affairs: A⟨3,3⟩= {⟨3, 3⟩, ⟨12, −12⟩, ⟨−12, 12⟩,
⟨−5, −5⟩};
A⟨12,−12⟩
=
{⟨3, 3⟩, ⟨12, −12⟩, ⟨13,
−15⟩,
⟨−12, 12⟩,
⟨−5, −5⟩,
⟨−2, −2⟩}, A⟨13,−15⟩= {⟨12, −12⟩, ⟨13, −15⟩, ⟨−5, −5⟩, ⟨−2, −2⟩}; A⟨−12,12⟩=
{⟨3, 3⟩, ⟨12, −12⟩, ⟨−12, 12⟩, ⟨−5, −5⟩, ⟨−1, 1⟩, ⟨0, −6⟩}, ….
Let B1
1A⟨aij,bij⟩(accordingly, B2
1A⟨aij,bij⟩) mean agent 1’s (accordingly, agent 2’s)
Boolean superpositions of 1’s payoffs of A⟨aij,bij⟩(accordingly, 2’s payoffs) for each
ﬁrst (accordingly, second) projection of all points of A⟨aij,bij⟩. Then K1A⟨aij,bij⟩=
A⟨aij,bij⟩∪B1
1A⟨aij,bij⟩and K2A⟨aij,bij⟩= A⟨aij,bij⟩∪B2
1A⟨aij,bij⟩. Let B1
2A⟨aij,bij⟩(accord-
ingly, B2
2A⟨aij,bij⟩) mean agent 1’s (accordingly, agent 2’s) Boolean superpositions of
B1
1A⟨aij,bij⟩and B2
1A⟨aij,bij⟩for each ﬁrst (accordingly, second) projection of all points
of A⟨aij,bij⟩. Then K1K2A⟨aij,bij⟩= A⟨aij,bij⟩∪B2
1A⟨aij,bij⟩∪B1
2A⟨aij,bij⟩and K2K1A⟨aij,bij⟩=
A⟨aij,bij⟩∪B1
1A⟨aij,bij⟩∪B2
2A⟨aij,bij⟩. Let B1
3A⟨aij,bij⟩(accordingly, B2
3A⟨aij,bij⟩) mean agent
1’s (accordingly, agent 2’s) Boolean superpositions of B1
2A⟨aij,bij⟩and B2
2A⟨aij,bij⟩
for
each
ﬁrst
(accordingly,
second)
projection
of
all
points
of
A⟨aij,bij⟩.
Then K2K1K2A⟨aij,bij⟩= A⟨aij,bij⟩∪B2
1A⟨aij,bij⟩∪B1
2A⟨aij,bij⟩∪B2
3A⟨aij,bij⟩and K1K2K1
A⟨aij,bij⟩= A⟨aij,bij⟩∪B1
1A⟨aij,bij⟩∪B2
2A⟨aij,bij⟩∪B1
3A⟨aij,bij⟩. And so on.

11.3 Reﬂexive Games
403
⟨3,13⟩
⟨−12,13⟩⟨−15,13⟩
⟨−12,13⟩⟨−5,13⟩
⟨−2,13⟩
1,1
6,3
3,13
Fig. 11.20 The conﬁguration of the payoff cellular automaton of Fig.11.16 at time t = 1
Let Bk
0A⟨aij,bij⟩= A⟨aij,bij⟩, k = 1, 2. Then, according to Deﬁnitions 10.1 and 10.2,
a reﬂexive game at the n-th level (n ≥0) can be reformulated thus: if player 1 follows
the decision rule B1
n+1A⟨aij,bij⟩, then player 2 follows the decision rule B2
n+1A⟨aij,bij⟩or
B2
nA⟨aij,bij⟩; if player 2 follows the decision rule B2
n+1A⟨aij,bij⟩, then player 1 follows
the decision rule B1
n+1A⟨aij,bij⟩or B1
nA⟨aij,bij⟩.
11.3.1
Reﬂexive Game of the Second Level
Let us consider a payoff cellular automaton of Fig.11.16 where the set S of states
consists of all pairs ⟨at
ij, bt
ij⟩, where at
ij, bt
ij at time t = 0, 1, 2, . . . are integers of
[−15, 13] and the local transition function is as follows: at+1(z) = ⟨at+1
ij
, bt+1
ij ⟩,
where at+1
ij
= ((
m
bt
m ⇒
k
at
k) ∧(at
ij ∧bt
ij)) and bt+1
ij
= (
k
bt
k ⇒
m
at
m) and 
k
at
k,

m
bt
m are maximal payoffs of player 1 and player 2 respectively at cells N(z) ∪z at
time t, the logical operations are understood thus: a ⇒b := 13 −max(a, b) + b;
a ∨b := max(a, b).
This automaton simulates the reﬂexive game, where player 1 has the second level
of reﬂexion, while player 2 has the ﬁrst level of reﬂexion. Its evolution at time t = 1
is pictured in Fig.11.20.
Let us extend the formulas B1
nA⟨aij,bij⟩and B2
nA⟨aij,bij⟩up to the case B1
nA and B2
nA,
where A is a union of sets A⟨aij,bij⟩, A⟨ai1j1,bi1j1⟩, A⟨ai2j2,bi2j2⟩, …, A⟨ainjn,binjn⟩such that
⟨aij, bij⟩belongs to A⟨ai1j1,bi1j1⟩, ⟨ai1j1, bi1j1⟩belongs to A⟨ai2j2,bi2j2⟩, …, ⟨ain−1jn−1, bin−1jn−1⟩
belongs to A⟨ainjn,binjn⟩.
Hence, in payoff cellular automata at the n-th level of reﬂexion, we apply an inﬁ-
nite sequence of Boolean operations at the point z ∈Zd:
B1,2
l,m := ⟨B1
l A, B2
mA⟩at t = 0, ⟨B1
l A, B2
mA⟩at t = 1, ⟨B1
l A, B2
mA⟩at t = 2, etc.,
where if l = n + 1, then m = n + 1 or n; if m = n + 1, then l = n + 1 or n.
We can suppose that players change their reﬂexion foundations at different t on the
basis of past payoffs. For instance, they can change their reﬂexive levels or decision
rules of the same levels:

404
11
Payoff Cellular Automata and Reﬂexive Games
B1,2
ili,imi := ⟨B1
0l0A, B2
0m0A⟩at t = 0, ⟨B1
1l1A, B2
1m1A⟩at t = 1, ⟨B1
2l2A, B2
2m2A⟩at t =
2, etc.,
where if lk = nk + 1, then mk = nk + 1 or nk; if mk = nk + 1, then lk = nk + 1 or
nk for any k = 0, 1, 2 . . . Notice that nk is a reﬂexive level that can be different for
different k.
Notice that the formulas B1,2
l,m and B1,2
ili,imi are unconventional. On the one hand,
they present an inﬁnite sequence of states for each cell of A = A⟨aij,bij⟩∪A⟨ai1j1,bi1j1⟩
∪A⟨ai2j2,bi2j2⟩∪…∪A⟨ainjn,binjn⟩. So, this sequence is not linear and consists of parallel
mutually dependent inﬁnite streams a0(z), a1(z), a2(z), …, at(z), . . . for any z of A.
On the other hand, B1,2
l,m and B1,2
ili,imi are self-applicable. They are continuously being
applied to results of their past applications ad inﬁnitum. About formal deﬁnitions of
these formulas, please see Sect. 8.2.2.
The formulas B1,2
l,m and B1,2
ili,imi are called wave sets. The feature of wave sets is
to contain parallel mutually dependent inﬁnite streams of states (values) generated
by self-applicable logical formula(s). The number 2 · n, where |A| = n, is a radius
of an appropriate wave set. In B1,2
l,m and B1,2
ili,imi we have just 2 · n parallel mutually
dependentinﬁnitestreams.Noticethatncanbeequal|Zd|,themaximalpossiblecase.
The minimal case takes place if n = 1, then we have only two streams. If formulas
B1,...,k
l,m
and B1,...,k
ili,imi hold true, then the number k · n, where |A| = n, is a radius of an
appropriate wave set.
Let us consider an example of B1,2
l,m. Let |A| = 1. Assume that two streams which
we have are as follows: ⟨a0 ⇒b0, a1 ⇒b1, a2 ⇒b2, . . .⟩, where at+1 = (at ⇒bt);
⟨b0 ⇒a0, b1 ⇒a1, b2 ⇒a2, . . .⟩, where bt+1 = (bt ⇒at). Let us pay attention
that the stream ⟨a0 ⇒b0, a1 ⇒b1, a2 ⇒b2, . . .⟩(resp. ⟨b0 ⇒a0, b1 ⇒a1, b2 ⇒
a2, . . .⟩) may be understood as an inﬁnite propositional formula (((a0 ⇒b0) ⇒
b1) ⇒b2) ⇒. . . (resp. (((b0 ⇒a0) ⇒a1) ⇒a2) ⇒. . .). Hence, we have a wave
set of radius 2 presented by two inﬁnite mutually dependent propositional formulas.
Also, we can show that any wave set of radius n can be formulated as n inﬁnite
mutually dependent propositional formulas.
Thus, in payoff cellular automata we deal with cumulative expected payoffs for
any t = 0, 1, 2, . . ., where strategies can change in an appropriate neighbourhood in
accordance with beliefs and real actions of mine and the other player. It means, in
payoff cellular automata we take into account not only payoffs, which have changed
for any new context, but also transition rules over payoffs. We assume that players’
decision rules at the zero level of reﬂexion are presented by knowledge functions,
which include the set of payoffs with their Boolean superpositions and the choices
(past and/or expected). At the ﬁrst level of reﬂexion players’ decision rules have the
form of knowledge functions which include a Boolean superposition of other agents’
payoffs of the zero level and the suitable choices, etc.

11.3 Reﬂexive Games
405
11.3.2
Logic for Reﬂexive Decision Making
Now let us construct the unconventional logic for reﬂexive games formally. Let
{p, q, r, . . .} be the set of all propositional variables. Then (1) each variable is a
formula; (2) we can construct ﬁnite or inﬁnite Boolean combinations of formulas
ϕ0ψ0⋆0, ϕ1ψ1⋆1, ϕ2ψ2⋆2, …, where ⋆0, ⋆1, ⋆2 . . . ∈{D, C, I}; (3) if ϕ is a ﬁnite
formula and ψ is an inﬁnite formula, then ϕψ⋆, where ⋆∈{D, C, I}, is a formula.
The class of all ﬁnite or inﬁnite strings is a maximal set of formulas closed under
logical operations.
Wave sets are sets of streams which have joint propositional variables. For exam-
ple, the set consisting just of p0q0Iq1Iq2Iq3I . . . and q0p0Ip1Ip2Ip3I . . . is a wave
set. Let A1, A2 be wave sets of propositional formulas and ϕ be a ﬁnite or inﬁnite
propositional formula. Then their logical compositions are as follows: (1) A1A2D
is a union of A1 and A2; A1A2C is an intersection of A1 and A2 if they have joint
streams and A1A2C is their union otherwise; A1A2I is a union of A1N and A2, where
A1N contains complements for each streams of A1; (2) let ϕ be inﬁnite, then ϕA1D
is a union of {ϕ} and A1; ϕA1C is ϕ if ϕ belongs to A1 and it is a union {ϕ} and
A1 otherwise; ϕA1I := ϕNA1D; A1ϕI := A1NϕD; (3) let ϕ be ﬁnite and A1 contain
streams ψ1, …, ψn (n > 0) that begin with ϕ, then ϕA1D is a union of {ϕψ1D}, …,
{ϕψnD}, and A1; ϕA1C is a union of {ϕψ1C}, …, {ϕψnC}, and A1; ϕA1I := ϕNA1D;
A1ϕI := A1NϕD. For more details please see Sect. 8.2.2.
Hence, each inﬁnite formula or wave set can be interpreted in payoff cellular
automata. Let us consider some simple cases assuming that each propositional sign
pt
i corresponds to a state at zi at time t.
Deﬁnition 11.7 In the payoff cellular automaton A , where S = {1, 0} and |N(z)| =
n −1, let us consider the truth valuation of inﬁnite conjunction n
i=0 p0
i ∧n−1
j=0 p1
j ∧
n−1
j=0 p2
j ∧. . ., where n
i=0 p0
i is a minimal payoff of z ∪N(z) at time t = 0, n−1
j=0 p1
j
is a minimal payoff of N(z) at time t = 1, n−1
j=0 p2
j is a minimal payoff of N(z) at
time t = 2, etc. Its local transition rule is formulated as follows:
xt+1(z) =
⎧
⎨
⎩
1, if xt(z) = 1 and 0 /∈N(z);
0, otherwise.
Deﬁnition 11.8 In the payoff cellular automaton A , where S = {1, 0} and |N(z)| =
n −1, let us consider the truth valuation of inﬁnite disjunction n
i=0 p0
i ∨n−1
j=0 p1
j ∨
n−1
j=0 p2
j ∨. . ., where n
i=0 p0
i is a maximal payoff of z ∪N(z) at time t = 0, n−1
j=0 p1
j
is a maximal payoff of N(z) at time t = 1, n−1
j=0 p2
j is a maximal payoff of N(z) at
time t = 2, etc. Its local transition rule is formulated as follows:
xt+1(z) =
⎧
⎨
⎩
1, if xt(z) = 1 or 1 ∈N(z);
0, otherwise.

406
11
Payoff Cellular Automata and Reﬂexive Games
Deﬁnition 11.9 In the payoff cellular automaton A , where S = {1, 0} and |N(z)| =
n −1, let us consider the truth valuation of inﬁnite implication . . . ⇒(n−1
i=0 p2
i ⇒
(n−1
i=0 p1
i ⇒(n−1
i=0 p0
i ⇒p0
j ))), where n−1
i=0 p0
i is a minimal payoff of N(z) at time
t = 0, n−1
j=0 p1
j is a minimal payoff of N(z) at time t = 1, n−1
j=0 p2
j is a minimal
payoff of N(z) at time t = 2, etc. Its local transition rule is formulated as follows:
xt+1(z) =
⎧
⎨
⎩
0, if xt(z) = 0 and 0 /∈N(z);
1, otherwise.
Deﬁnition 11.10 In the payoff cellular automaton A , where S = {1, 0} and
|N(z)| = n −1, let us consider the truth valuation of inﬁnite negation . . . ¬(¬(¬p0
i )),
where i = 1, . . . , n. Its local transition rule is formulated as follows:
xt+1(z) =
⎧
⎨
⎩
0, if xt(z) = 1;
1, otherwise.
Truth valuation of any propositional stream:
Let ϕ be a propositional stream . . . ⋆3 (′′n−1
i=0 p2
i ⋆2 (′n−1
i=0 p1
i ⋆1 (n−1
i=0 p0
i ⋆0 p0
j ))),
where ⋆m ∈{∨, ∧, ⇒} for m = 0, 1, 2, . . . and , ′, ′′, . . . ∈{, }. Its initial
truth value is an initial conﬁguration of a cellular automaton A with the set of states
{1, 0}. Then we start the evaluation of ϕ with the very ﬁrst connective ⋆0 that connects
states at time t = 0. By using one of Deﬁnitions 11.7–11.10 that corresponds to ⋆0,
we transform the initial conﬁguration of A at time t = 0 to a conﬁguration at time
t = 1. Further, we move to evaluate the second connective ⋆1 that connects states
at time t = 1. By using one of Deﬁnitions 11.7–11.10 that corresponds to ⋆1, we
transform the conﬁguration of A at time t = 1 to a conﬁguration at time t = 2. Then
we go to evaluate the third connective ⋆2 that connects states at time t = 2. By using
one of Deﬁnitions 11.7–11.10 that corresponds to ⋆2, we transform the conﬁguration
of A at time t = 2 to a conﬁguration at time t = 3, etc.
In order to provide an example, let us evaluate the propositional stream . . . ∨
(n−1
i=0 p2
i ∧(n−1
i=0 p1
i ∧(n−1
i=0 p0
i ⇒p0
j ))) in a cellular automaton A with the Moor
neighbourhood in the 2-dimensional space:
(I) Initial conﬁguration, t = 0
1
0
0
0
1
1
0
1
0
We begin our evaluation with the connective ⇒as the ﬁrst. Thereby we are using
Deﬁnition 11.9:

11.3 Reﬂexive Games
407
(II) t = 1
1
1
1
1
1
1
1
1
0
Then we move to the second connective ∧and by 11.7 we obtain the following
data over (II):
(III) t = 2
1
1
1
1
0
0
1
0
0
(IV) t = 3
0
0
0
0
0
0
0
0
0
In aposterioristic logics of these cellular automata we can deﬁne the context-
based concurrent group theory, see Proposition 8.1, and the context-based concurrent
Boolean algebra, see Proposition 8.2. In these logics we cannot use conventional
variables, because each propositional variable (individual variable) should designate
some concrete state(s) at cell(s) z and at time t.
Deﬁnition 11.11 Let cm, cn, . . ., be states of payoff cellular automata. A logical
language for reﬂexive decisions LM in these automata consists of the following
symbols: (i) a non-empty set of constant symbols cm, cn, …; (ii) a non-empty set of
function symbols of arity n: f n
0 , f n
1 , f n
2 , …; (iii) a non-empty set of predicate symbols
of arity n: Pn
0, Pn
1, Pn
2,…; (iv) the truth constants 0, 1; (v) propositional connectives
of arity nj: □n0
0 , □n1
1 , …, □nrr , which are built by superposition of D, C, I, N; (vi)
ﬁrst-order quantiﬁers ∀, ∃; (vii) auxiliary symbols (,).
Terms and well-formed atomic formulas of LM are deﬁned non-inductively:
Deﬁnition 11.12 Terms are deﬁned as follows: (1) if t1, . . . , tn ∈{cm, cn, . . .}, then
f n
i (t1, . . . , tn) is a term; (2) by using f n
i , we can construct ﬁnite or inﬁnite combina-
tions of terms t1, t2, t3, …which are terms; (3) if t1 ∈{cm, cn, . . .} and t2, . . . , tn are
terms, then f n
i (t1, . . . , tn) is a term.

408
11
Payoff Cellular Automata and Reﬂexive Games
Well-formed formulas of LM have a non-inductive deﬁnition, too.
Deﬁnition 11.13 Formulas are deﬁned as follows: (i) if t1, . . . , tn are terms, then
Pn
i (t1, . . . , tn) is an atomic formula; (ii) if x1, . . . , xn are atomic, then □ni
i (x1, …,
xn) is a formula; by using □ni
i , we can construct ﬁnite or inﬁnite combinations of
formulas x1, x2, x3 . . ., which are formulas; if x1 is atomic and x2, . . . , xn are formulas,
then □ni
i (x1, …, xn) is a formula.
The language LM deﬁned in these deﬁnitions allows us to logically combine
different payoff cellular automata with the same set of states (possible payoffs) or
their local parts with the same set of states.
11.3.3
Biological Implementations of Reﬂexive Games
Reﬂexive games in payoff cellular automata can describe any intelligent behaviour
of swarms where different decisions in respect to possible payoffs are being made at
different time t = 0, 1, 2, . . .
As we know, in swarm intelligence, we can distinguish the following stimuli
constituting swarm data nodes:
• Attractants, sources of food, which a swarm feeds. Each attractant A is character-
ized by its position and intensity.
• Repellents, dangerous places avoided by a swarm. Each repellent R is characterized
by its position and intensity.
Attractants may be regarded as payoffs for a swarm. Swarms occupy attractants
step by step. By different localizations of attractants we can affect on swarm motions
differently. These localizations combined with a different intensity of attractants are
stimuli for swarm motions. We can interpret these stimuli as Boolean functions on
payoffs. For example, we can deﬁne the following simplest logical gates (simplest
Boolean functions):
• The AND gate (swam conjunction), the serial connection of contacts. The swarm
P follows conjunction A1 ∧A2 if and only if it achieves both attractants A1 and
A2, i.e. the swarm is attracted to A1, when it is placed in its region of inﬂuence,
then it is is attracted by A2 in the region of its inﬂuence. If we have deactivated at
least one of the attractants A1, A2, the swarm cannot achieve conjunction A1 ∧A2,
i.e. the latter is false.
• The OR gate (swarm disjunction), the parallel connection of contacts. The swarm
P follows disjunction A1 ∨A2 if and only if one of the attractants A1 or A2 or
both are occupied by the swarm. In case of deactivation of both attractant A1 and
attractant A2 the swarm cannot start from the initial position. This means that
A1 ∨A2 is false.
• The NOT gate (swarm negation). The swarm P follows negation ¬A1 if and only if
its behaviour is simulated by the repellent R before the attractant A1, which avoids
the swarm to be attracted by A1.

11.3 Reﬂexive Games
409
By using these simplest functions we can design more complex Boolean functions
on attractants (payoffs). In this way we can implement payoff cellular automata in the
swarm behaviour. First, let us design a tunnel consisting of attractants and repellents
combined as logical gates. Swarms propagate towards the tunnel and face differ-
ent lines. The ﬁrst line of logical gates in the tunnel which is occupied by swarms
implements Boolean functions at time t = 0. The second line of logical gates imple-
ments Boolean functions at time t = 1. The third line of logical gates implements
Boolean functions at time t = 2, etc. Second, the number of swarm groups/members
before the tunnel corresponds to the number of propositional streams we are going
to implement. Third, each swarm is active within a neighbourhood consisting of an
appropriate set of attractants. Thus, the number of swarm groups/members before
the tunnel corresponds to the number of neighbourhoods as well.
Now on the basis of swarm implementations of payoff cellular automata we can
propose swarm implementations of reﬂexive games of different level of reﬂexion for
two players:
• The zero level of reﬂexion. We design the one tunnel T1 for player 1 and the second
tunnel T2 for player 2. If the players follow different decision rules presented by
two wave sets of formulas, ϕ1 and ϕ2, then T1 implements ϕ1 and T2 implements ϕ2.
If both players follow the same decision rule presented by a wave set of formulas,
ϕ, then both T1 and T2 implement ϕ.
• The ﬁrst level of reﬂexion. Let player 1 be at the ﬁrst reﬂexive level and follow a
decision rule ϕ. Then T1 implements ϕ and all logical gates of T2 at the zero level
of reﬂexion of player 2 occur in T1.
• The second level of reﬂexion. Let player 1 be at the second reﬂexive level and
follow a decision rule ϕ. Then T1 implements ϕ and all logical gates of T2 at the
ﬁrst level of reﬂexion of player 2 occur in T1, etc.
Thus, swarm implementations of reﬂexive games allow us to claim that payoff
cellular automata can be considered fundamental forms of context-based decisions,
indeed.
References
1. Schumann, A.: Towards theory of massive-parallel proofs. cellular automata approach. Bull.
Sect. Log. 39(3/4), 133–145 (2010)
2. Schumann, A.: Qal wa-homer and theory of massive-parallel proofs. History Philos. Log. 32(1),
71–83 (2011)
3. Schumann, A.: Proof-theoretic cellular automata as logic of unconventional computing. Int. J.
Unconv. Comput. 8(3), 263–280 (2012)
4. Schumann, A.: Payoff cellular automata and reﬂexive games. J. Cell. Autom. 9(4), 287–313
(2014)
5. Alonso-Sanz, R.: On a three-parameter quantum battle of the sexes cellular automaton. Quan-
tum Inf. Process 1–16 (2013)
6. Alonso-Sanz, R.: A quantum prisoner’s dilemma cellular automaton. In: Proceedings of the
Royal Society of London, vol. 470, p. 20130793. The Royal Society (2014)

410
11
Payoff Cellular Automata and Reﬂexive Games
7. Alonso-Sanz, R., Martín, M.C., Martin, M.: The effect of memory in the spatial continuous-
valued prisoner’s dilemma. Int. J. Bifurc. Chaos 11(08), 2061–2083 (2001)
8. Smith, V.L.: Constructivist and ecological rationality in economics. Am. Econ. Rev. 93(3),
465–508 (2003)
9. Albin, P.S.: Essays on economic complexity and dynamics in interactive systems. In: Barriers
and Bound to Rationality. Princeton University Press (1998)
10. Aumann, R.J.: Agreeing to disagree. The Ann. Stat. 4(6), 1236–1239 (1976)
11. Schumann, A.: Reﬂexive games and non-archimedean probabilities. P-Adic Numbers Ultra-
metr. Anal. Appl. 6(1), 66–79 (2014)
12. Schumann, A.: Anti-platonic logic and mathematics. Mult. Valued Log. Soft Comput. 21(1–2),
53–88 (2013)
13. Chopard, B., Droz, M.: Cellular Automata Modeling of Physical Systems. Cambridge Univer-
sity Press (2005)
14. Brotherston, J.: Cyclic proofs for ﬁrst-order logic with inductive deﬁnitions. In: B. Beckert
(ed.) TABLEAUX 2005, volume 3702 of LNAI, pp. 78–92. Springer (2005)
15. Brotherston, J.: Sequent calculus proof systems for inductive deﬁnitions. Ph.D. thesis, Univer-
sity of Edinburgh (2006)
16. Brotherston, J., Simpson, A.: Complete sequent calculi for induction and inﬁnite descent. In:
22nd Annual IEEE Symposium on Logic in Computer Science (LICS 2007), pp. 51–62 (2007)
17. Santocanale, L.: A calculus of circular proofs and its categorical semantics. In: Proceedings of
FoSSaCS 2002, LNCS 2303, pp. 357–371. Springer, Grenoble (2002)
18. Morita, K., Imai, K.: Logical Universality and Self-Reproduction in Reversible Cellular
Automata. ICES (1996)
19. Adamatzky, A.: Physarum machines: computers from slime mould. In: World Scientiﬁc, Series
on Nonlinear Science. Series A (2010)
20. Shirakawa, T., Sato, H., Ishiguro, S.: Constrcution of living cellular automata using the
Physarum polycephalum. Int. J. General Syst. 44, 292–304 (2015)
21. Tsompanas, M.I., Adamatzky, A., Ieropoulos, I., Phillips, N., Sirakoulis, G.C., Greenman, J.:
Cellular non-linear network model of microbial fuel cell. Biosystems 156, 53–62 (2017)

Chapter 12
Foundations of Mathematics Within
Lateral Inhibition and Lateral Activation
In the previous chapters, I have shown that conventional logics can be suitable for
modelling the swarm behaviour under the condition of lateral inhibition. For exam-
ple, for his purpose we can use the Aristotelian syllogistic (see Sects. 7.1.3, 7.2.2,
8.1.4, 9.1.2 and 9.2.1) and modal logic K (see Sect. 9.4.3). Nevertheless, these logics
are inappropriate to simulate the behaviour under the condition of lateral activation.
It means that the swarm behaviour is irreducible to conventional logics. Furthermore,
the swarm behaviour is context-based and it can be described rather my means of
aposterioristic logics (see Chaps. 8 and 11). In this chapter, I am going to demon-
strate that mathematics is irreducible to conventional logics, too, since mathematical
cognitions are grounded on both lateral inhibition and lateral activation. It shows
that the lateral inhibition and lateral activation as basic forms of swarm sensing and
motoring are fundamental for all cognitions, including the mathematical one. See
[1–5].
12.1
Lateral Inhibition and Lateral Activation
in Mathematical Cognitions
12.1.1
What Are Foundations of Mathematics?
The Principia Mathematica, a three-volume work written jointly by Alfred North
Whitehead and Bertrand Russell and published in 1910, 1912, and 1913, was one of
the ﬁrst books devoted to ‘foundations of mathematics’ in the strict sense, i.e. in fact
it was one of the ﬁrst attempts to make explicitly mathematics from the point of view
of symbolic logic, that is an attempt to consider mathematical theorems as logical
statements which are automatically inferred from axioms by logical inference rules.
© Springer International Publishing AG, part of Springer Nature 2019
A. Schumann, Behaviourism in Studying Swarms: Logical Models of Sensing
and Motoring, Emergence, Complexity and Computation 33,
https://doi.org/10.1007/978-3-319-91542-5_12
411

412
12
Foundations of Mathematics Within Lateral Inhibition and Lateral Activation
Their work was written by a direct inﬂuence of Gottlob Frege’s ideas presented in his
fundamental book Die Grundlagen der Arithmetik (the Foundations of Arithmetic)
published in 1884. To continue and enhance the approach established by Whitehead
and Russell, David Hilbert, the German mathematician (1862–1943), put forward
a new proposal for the foundation of mathematics called the Finitist Program (or
Hilbert’s Program). In this proposal all of mathematics should have been formal-
ized in axiomatic form, together with a proof by ‘ﬁnitary’ methods proposed by
Hilbert that this axiomatization is consistent. One of the attempts to axiomatize all
the mathematics was made by ‘Nicolas Bourbaki’—the group of 20th-century math-
ematicians written jointly the many-volume work entitled Éléments de mathématique
(the Elements of Mathematics).
Now there are some basic formal theories which are regarded as start points in the
foundations of mathematics. This means that these theories, in the way how it seems
to mathematicians, can cover big fragments of mathematics by their extensions. For
instance, it is assumed that in the foundations for number theory we should start
from the ﬁve Peano’s axioms, introduced by Giuseppe Peano in 1889 and now called
the Peano arithmetic PA. Also, it is supposed that any set-theoretic reasoning in
mathematics (like reasoning in topology) can be reduced to statements formalized in
the Zermelo-Fraenkel set theory, constructed by mathematicians Ernst Zermelo and
Abraham Fraenkel and denoted by the abbreviation ZFC, where C means axiom of
choice.
To sum up, mathematicians believe still that the foundations of mathematics in
the meaning of Principia Mathematica are possible and any correct well-done math-
ematical reasoning can be rewritten in a logical theory such as PA or ZFC. So, they
believe that all the mathematics can be reduced to a logic. Is it true indeed? Is it
possible?
In this chapter, we assume that the mathematicians in proving new signiﬁcant the-
orem, such as Fermat’s Last Theorem, stay beyond any conventional foundations of
mathematics and rather deal with combining proof trees on tree forests by using anal-
ogy as inference metarule. In other words, the real mathematical proofs of compli-
cated new theorems cannot be completely formalized as discrete sequences, because
they are concurrent and can be better formalized as analogue processes within a space
with some topological properties. For the ﬁrst time, inference metarules in a metric
space were proposed in the Talmud within a general Judaic approach to concurrent
or even massive-parallel conclusions. The mathematicians do not think sequentially
like a logical automaton, but concurrently, also. Hence, we suppose that the proof
technique of real mathematics cannot be formalized only by discrete methods. It is
just a hypothesis of the foundations of mathematics that we can use discrete tools
and it is enough, since mathematics is totally reducible to logic. Nevertheless, we
show in the paper that the mathematical proof can be formalized also by analogue
computations, not only by discrete ones.
Thus, there are two extreme positions in respect to proving new mathematical the-
orems: (i) discrete foundations of mathematics, the traditional belief that we can make
all proof steps visible and transparent, i.e. that an absolute detailing (digitalization)
in proving is ever possible; (ii) Talmudic or analogue foundations of mathematics,

12.1 Lateral Inhibition and Lateral Activation in Mathematical Cognitions
413
the opposite belief that at least for some new signiﬁcant theorems a digitalization can
be impossible. According to the ﬁrst approach, the mathematicians are concentrated
on details in proving. According to the second approach, the mathematicians try to
be captured by the whole picture of many possible theorems. We know from cog-
nitive neuroscience that a concentration on details is caused by a lateral inhibition
in our cognitions and an attempt to cover all themes at once is caused by a lateral
activation.
The lateral inhibition is responsible for a cognitive blindness in seeing the whole
picture and the lateral activation is responsible for a cognitive blindness in seeing the
details. So, there are detected many cognitive illusions (ﬁrst of all optical illusions)
that are explained by different contexts actualizing the lateral inhibition or lateral
activationfor different purposes. So, weassumethat themathematicians canactualize
both mechanisms also in their proof cognitions. As a consequence, on the one hand,
they can focus on logical details and follow the discrete foundations of mathematics
(lateral inhibition) and, on the other hand, they can keep in mind the whole picture
with thousand concurrent theorems and, thereby, follow the analogue foundations of
mathematics (lateral activation).
It is worth noting that I have no ambitions to propose something like the Principia
Mathematica, but I am going only to focus on mathematical cognitions beyond any
discrete (standard) foundations. So, recently there have been proposed by Vladimir
Voevodsky (1966–2017) real new foundations called the univalent foundations of
mathematics and homotopy type theory as a good alternative to set theory, such as
ZFC. These ideas have been well expressed by the 21st-century group of mathe-
maticians in their legendary book [6] published in 2013. In my terminology, these
foundations are discrete also, because they ignore the process of mathematical think-
ing under the condition of lateral activation.
12.1.2
Cognitive Blindness and Mechanisms of Lateral
Activation and Lateral Inhibition
One of the best examples of inattentional cognitive blindness is called the invisible
gorilla. It is a well-known experiment [7], whose authors ask the viewers to count
the number of times a basketball passes between members of one of two distinct
teams. If the viewers count them carefully, i.e. if they are too focused on the assigned
task, they miss a “gorilla” walking through the scene. The point is that the task to
count the passes under the conditions of the information noise brings out the lateral
inhibition—we should be completely concentrated on details of passes and, therefore,
we should ignore the whole picture. When the authors ask the viewers whether they
have seen the gorilla and show them the video again, the viewers can see the gorilla
immediately, but they cannot count all the passes. In this case, the viewers look for
something new and, as a result, they involve the lateral activation to see the whole
picture and ignore small details.

414
12
Foundations of Mathematics Within Lateral Inhibition and Lateral Activation
Fig. 12.1 The screenshot from the video at https://www.youtube.com/watch?v=Ahg6qcgoay4. It
is a modiﬁcation of the invisible gorilla. During this awareness test, we should count how many
passes the team in white makes. If we count them carefully, we miss the “moonwalking bear”
There are many modiﬁcations of the invisible gorilla, e.g. see Fig.12.1. In the
most experiments naïve observers engage in the task to count. Nevertheless, in [8] it
was shown that expert searchers who have spent years honing their ability to detect
small abnormalities in speciﬁc types of image miss the gorilla as well. So, the authors
of [8] have asked 24 radiologists to perform a familiar lung nodule detection task. A
gorilla, 48 times larger than the average nodule, was inserted into the video. And 83%
of radiologists did not see the gorilla. It means that even expert searchers, operating
in their domain of expertise, have the same inattentional cognitive blindness because
of the lateral inhibition. In the same way, the mathematicians can have this blindness
in proof cognitions caused by the lateral inhibition or lateral activation.
Hence, cognitive illusions, such as the invisible gorilla, cannot be interpreted
as failures of our perception or dysfunctions indicating the typical limits of our
perceptual or cognitive system, but they are rather an effect of economic balance
between analyzing some details and the whole picture [9]. The lateral inhibition is
a mechanism in our sensing that allows us to be more concentrated on the needed
details and the lateral activation allows us to focus on the whole picture.
A type of cognitive illusions caused by the lateral activation and lateral inhibi-
tion is detected even at the level of amoeboid organisms, such as Amoeba proteus
and Physarum polycephalum. For example, the amoeba of Physarum polycephalum
moves differently under both conditions: (i) in the situation of nutrient-poor sub-
strate (corresponding to the condition of lateral inhibition) the amoeba builds a well-
distinguished rooted tree (a kind of directed acyclic graphs, see Fig.12.2(1)); (ii)
in the situation of nutrient-rich substrate (corresponding to the condition of lateral

12.1 Lateral Inhibition and Lateral Activation in Mathematical Cognitions
415
Fig. 12.2 The motions of Physarum polycephalum amoeba under the following two conditions:
(1) the lateral inhibition and (2) the lateral activation. The ﬁrst condition is to construct a rooted
tree. It is analogous to a proof tree in mathematics for the foundations of mathematics under lateral
inhibition. The second condition is to construct a network of concurrent trees with cycles. It is
analogous to concurrent cyclic proof trees in mathematics for the foundations of mathematics
under lateral activation
activation) the amoeba builds wave-fronts with complex networks of many and many
trees (see Fig.12.2(2)).
My inspiration from neuroscience is that a mathematical cognition proceeds under
both conditions, also. As a consequence, we can build a rooted proof tree proving a
theorem (similarly as an amoeba does in the nutrient-poor substrate, see Fig.12.2(1))
or a metric space for combining many and many proof trees simultaneously for many
and many theorems at once (similarly as an amoeba is propagated in the nutrient-rich
substrate in many directions simultaneously, see Fig.12.2(2)).
12.1.3
Proof Trees and Proof Forests
In mathematics there are really non-trivial theorems which are so deep that they
cannot be inferred without introducing absolutely new mathematical constructions.
For example, Fermat’s Last Theorem (FLT) is well formulated in PA. Therefore this
statement seems to be so simple. For the ﬁrst time, FLT was put forward by Pierre
de Fermat in 1637in the margin of a copy of Arithmetica. However, this statement
was proven formally only after 358years of effort by mathematicians, namely by
Andrew Wiles in 1995 [10]. The most dramatic problem of FLT recently is that
this theorem is proved mathematically and this proof was accepted by mathematical

416
12
Foundations of Mathematics Within Lateral Inhibition and Lateral Activation
communities, but this statement was not checked by logicians at all. It is unknown
still whether there is a logical proof of FLT. In other words, FLT is not covered by
any foundations of mathematics still. It means, FLT was obtained due to the lateral
activation in proof cognitions, but the small details of FLT are invisible yet. So,
nobody has applied a lateral inhibition for this statement.
As we said, FLT is well written in a ﬁrst-order sentence of PA. However, it
does not mean that it can be proved in PA. After the Paris-Harrington theorem [11],
it is well known that there are ever ﬁrst-order arithmetic statements written in PA
which cannot be proved in PA, such as the Strong Ramsey Theorem that can easily
be proved in the second-order arithmetic from the inﬁnite version of the standard
theorem. Also, it is known that there are many other combinatorial problems that
are beyond PA. In [12], Colin McLarty supposed that FLT can be proved in some
higher-order extensions of PA, but nobody has checked it still.
Another hypothesis of McLarty [12] is that FLT is beyond ZFC. It is quite evident
taking into account the fact that cohomological number theory used by Wiles [10] is
based on Grothendieck’s universes which model ZFC, but the existence of a universe
is not provable in ZFC. Grothendieck’s own axiom of universes, which was added
to ZFC, afﬁrms that every set is contained in some universe (there is an uncountable
strongly inaccessible cardinal for sets) [13]. Hence, in cohomology we deal with
ZFC+U consisting of ZFC with the assumption U of a universe. So, FLT can be
proved at least in ZFC+U or even in higher extensions, and evidently not in ZFC.
Nevertheless, there is no formal proof still what is set theory looks like for FLT.
Perhaps, Vladimir Voevodsky’s homotopy type theory [6] is a good candidate for
a formal proof of FLT. But for us the most signiﬁcant think is that some theorems
like FLT are being proved at ﬁrst beyond any formal (logical) system.
Thus, there are ever serious mathematical theorems such as FLT which are beyond
the recent foundations of mathematics (for instance, beyond PA or ZFC). However,
mathematicians and logicians unconsciously obey the quite religious faith and fol-
low the deep-inner intuition that any mathematical theorem can be reduced to a
theorem of existed symbolic logic. In symbolic logic we appeal to a formal theory Ti
that possesses logical axioms/theorems (aL
i1, …, aL
in) within a logical system L like
the classical propositional logic and non-logical axioms/theorems (aT
i1, . . . , aT
im) for
deﬁning properties of predicates and functions introduced in Ti. Then by using infer-
ence rules of L we can infer in Ti all possible provable sentences from (aL
i1, . . . , aL
in)
+ (aT
i1, . . . , aT
im). Surely, it does work in symbolic logic indeed, but it is unknown still
whether it gives something to real mathematics. In real mathematics, i.e. in a proof
of deep sentences such as FLT, we use some axioms/presuppositions/ sentences
(aM
i1 , . . . , aM
ik ) and the main task of the foundations of mathematics is to set up a for-
mal theory Ti to ﬁnd out an injective mapping from (aM
i1 , . . . , aM
ik ) into (aT
i1, . . . , aT
im).
The problem is that, on the one hand, some sentences from (aM
i1 , . . . , aM
ik ) in FLT can
be just intuitive and not well-formulated (or even not conscious). On the other hand,
their true symbolic-logical analogues in Ti can be absent from the list (aT
i1, . . . , aT
im)
and not sketched still.

12.1 Lateral Inhibition and Lateral Activation in Mathematical Cognitions
417
Letusassumethat(aM
i1 , . . . , aM
ik )forserioustheoremslike FLTarenotnon-logical
axioms / theorems which can be represented as (aT
i1, . . . , aT
im). So, we assume that
higher mathematics cannot be reduced to symbolic logic.
Letussupposenowthat(aM
i1 , . . . , aM
ik ) = (aM
i1 , . . . , aM
ik ) + (aL
i1, . . . , aL
in)and(aT
i1,
…, aT
im) = (aT
i1, . . . , aT
im) + (aL
i1, …, aL
in), i.e. they are closed under the inference
rules of L. Each proof in Ti = (aT
i1, …, aT
im) is a tree t. Let te j be an inference rule
of Ti, i.e. it is an elementary tree—it has one parent (the inferred statement) and
several its direct children (axioms as premisses). Then t consists of te1, …, te j as
its subtrees. Let {} be an empty tree. Then each edge/branch of t can be labelled
by a sentence α ∈(aT
i1, . . . , aT
im) as follows: α[t′], where t′ is an elementary subtree
(inference rule) of t that was used to obtain α. Then a tree can be denoted by all
its branches. For instance, the notation t = {c[{a[{}], b[{}]}]} means that we have a
tree consisting only of two edges/premisses a[{}] and b[{}] and one conclusion from
them c[{a[{}], b[{}]}]:
a
b
c
The notation t′ = {c[{a[{}], b[{}]}], a[{}]} designates the following tree:
c
a
a
b
The formula t′′ = {d[{c[{a[{}], b[{}]}], a[{}]}], f [{}], e[{}]} satisﬁes the follow-
ing tree:

418
12
Foundations of Mathematics Within Lateral Inhibition and Lateral Activation
c
a
a
b
d
e
f
Hence, in Ti we deal just with ﬁnite trees labelled in (aT
i1, . . . , aT
im) in the way
deﬁned above.
Let an ordered sequence of trees be called a forest. We say a forest si =
⟨ti, t′
i, t′′
i , . . . ⟩is a piece of a forest s j = ⟨t j, t′
j, t′′
j , . . . ⟩, written si ⪯s j if si can
be obtained from s j by removing nodes. In other words, there is an injective map-
ping from nodes of si to nodes of s j that preserves the lexicographic and descen-
dant ordering. Then a reduction of (aM
i1 , . . . , aM
im) to (aT
i1, . . . , aT
in) would mean that
(aM
i1 , . . . , aM
im) is a piece of (aT
i1, . . . , aT
in), i.e. (aM
i1 , . . . , aM
im) ⪯(aT
i1, . . . , aT
in).
In deep theorems like FLT we have ever a forest s j, which is a substantial part of
(aM
i1 , . . . , aM
im), such that s j is not a piece for any forest of (aT
i1, . . . , aT
in). So, we can
distinguish two kinds of forests from (aM
i1 , . . . , aM
im):
1. a forest s j which is a piece of some forest from (aT
i1, …, aT
in), these pieces are
called logical fragments;
2. a forest s j which is not a piece of any forest from (aT
i1, . . . , aT
in), this s j is called
a new construction.
We assume that logical fragments are well studied in the foundations of mathemat-
ics, but new constructions are not yet. The matter is that the conventional foundations
of mathematics was concentrated only on some details under the condition of lat-
eral inhibition. In this way, new constructions, such as FLT, remain invisible for
mathematicians like the gorilla is invisible for the observers counting the passes.
The true mathematical task is to give non-trivial essential theorems containing new
constructions. For this purpose, the lateral activation holds, but the latter is out of
precise details. The ambitious mathematicians start their work with logical fragments
to obtain new constructions later.

12.1 Lateral Inhibition and Lateral Activation in Mathematical Cognitions
419
Thus, the higher mathematics is eternally to extend forests of (aM
i1 , . . . , aM
im) by
proposing new constructions. Therefore, the ambitious mathematicians deal not only
with proofs/trees (what can be reduced completely to pieces from (aT
i1, . . . , aT
in)),
but more often with forests which are irreducible to pieces of (aT
i1, …, aT
in). The
mathematicians know that sometimes reasoning by analogy allows them to propose
really something new. They take a piece from one theory Ti = (aM
i1 , …, aM
im) to
combine it with forests of another theory T j = (aM
j1, . . . , aM
jk) and then to obtain the
next theory T f = (aM
f 1, . . . , aM
f l).
In the Talmud for the ﬁrst time there was proposed a metareasoning for extending
the dataset (forests) of the Torah, (aM
i1 , . . . , aM
ik ), by using analogies. It is a way how
we can add new axioms to (aM
i1 , . . . , aM
ik ) just looking at existing forests. Then we
will show how we can use these methods in the recent foundations of mathematics.
Hence, the Talmudic metareasoning in the foundations of mathematics are called
by us ‘Talmudic foundations of mathematics’, see [1, 2, 4]. We assume that in a
real mathematical practice mathematicians use a similar metareasoning to build up
new forests by looking at existing forests (let us notice that this metareasoning is
considered often as a mathematical intuition).
12.2
Foundations of Mathematics Within the Lateral
Activation
12.2.1
What Is Talmudic Logic?
Usually, the term ‘Talmudic logic’ means the Judaic hermeneutic rules (Hebrew:
middot, [ )מידות1], ﬁrst formulated as a special hermeneutics by Hillel in the 1st
century B.C. (he proposed the 7 rules), by Rabbi Ishmael in the 2nd century A.D. (he
established the 13 rules for inferring the law, halakhah), and by Rabbi Eliezer ben
Jose HaGelili in the same 2nd century A.D. (he examined the 32 rules for inferring
the holy stories, haggadah). As a result, in the Talmud we face a logical point of
view in respect to the Torah: all the Biblical statements are considered ‘particular’
()פרטor ‘general’ ()כללimplying some conclusions by using hermeneutic rules. A
Biblical statement, ϕi
part, is regarded as particular, if its veriﬁcation |ϕi
part| (i.e. all
denotates of ϕi
part) is a subset of a veriﬁcation |ϕ j
gen| for another statement, ϕ j
gen,
namely: |ϕi
part| ⊆|ϕ j
gen|. In this case the implication ϕi
part →ϕ j
gen is true. Hence,
we can draw appropriate proof trees by using modus ponens and other classical
inference rules, if we deﬁne all the last particulars of the Torah as axioms of the
Talmud: (a part
i1
, . . . , a part
in
).

420
12
Foundations of Mathematics Within Lateral Inhibition and Lateral Activation
Now, let us consider an example from Exodus 22 and let us try to build up a proof
tree for the notion ‘responsibility for the property of his neighbour’, just basing on
the text of the Torah. We have the following statements mentioned in this chapter of
the Holy Book:
G
“He is responsible for the property of his neighbour.”
G1
“The neighbour’s property is given for safekeeping for free of charge.”
G2
“The neighbour’s property is given for safekeeping for money.”
G3
“The neighbour’s property is borrowed.”
G1P1
“The safekeeping for free of charge is stolen. He should swear that he did
not lay his hand upon his neighbour’s property.”
If a man shall deliver unto his neighbour money or stuff to keep, and it be stolen
out of the man’s house; if the thief be found, let him pay double. If the thief be
not found, then the master of the house shall be brought unto the judges, to see
whether he have put his hand unto his neighbour’s goods (KJV, Exodus, 22:7-8).
G2P1
“The safekeeping for money is stolen. He should pay the loss.”
G2P2
“The safekeeping for money is destroyed for natural reasons. He should
swear that he did not lay his hand upon his neighbour’s property.”
If a man deliver unto his neighbour an ass, or an ox, or a sheep, or any beast, to
keep; and it die, or be hurt, or driven away, no man seeing it: Then shall an oath of
the Lord be between them both, that he hath not put his hand unto his neighbour’s
goods; and the owner of it shall accept thereof, and he shall not make it good. And
if it be stolen from him, he shall make restitution unto the owner thereof (KJV,
Exodus, 22:10-12).
G3P2
“The borrowed is destroyed for natural reasons. He should pay the loss.”
And if a man borrow ought of his neighbour, and it be hurt, or die, the owner
thereof being not with it, he shall surely make it good. But if the owner thereof be
with it, he shall not make it good: if it be an hired thing, it came for his hire (KJV,
Exodus, 22:14-15).
As we see, we deal here with the four last particulars (i.e. Talmudic axioms):
(G1P1, G2P1, G2P2, G3P2). However, the data set for ‘responsibility for the prop-
erty of his neighbour’ is not complete—we know nothing about the following two
particulars (axioms) which are supposed also:
G1P2 “The safekeeping for free of charge is destroyed for natural reasons. What
should he do?”
G3P1 “The borrowed is stolen. What should he do?”
In the picture form, the complete data set must be seen as follows:

12.2 Foundations of Mathematics Within the Lateral Activation
421
G
G1
G3
G2
G3P2
G3P1
G1P2
G1P1
G2P2
G2P1
Nevertheless, in the Torah an appropriate data set is sketched in the following
manner, i.e. it is absolutely incomplete for inferring ‘responsibility for the property
of his neighbour’:
G
G1
G3
G2
G3P2
G1P1
G2P2
G2P1
Thus, we need to ﬁnd out possible ways for deﬁning the two new axioms, G1P2
and G3P1. But how? Do not worry. In the Bava Metzia, the second of the ﬁrst three
tractates of the Babylonian Talmud in the order of Nezikin (“damages”), Chap.8,
there is a metareasonig for this purpose—the inference metarule for deﬁning new
axioms, called qal wa-h. omer (.)קל וחמרThis rule occurs among the 7 rules of Hillel,
as well as among the 13 rules of Rabbi Ishmael and the 32 rules of Rabbi Eliezer
ben Jose HaGelili. Let us take all the particulars for G2, because they are complete.
Between G2P1 and G2P2 there is a strong ordering relation: G2P2 ≾G2P1. Indeed,
G2P2 means that he is free of paying and G2P1 means that he should pay the loss.

422
12
Foundations of Mathematics Within Lateral Inhibition and Lateral Activation
Hence, we assume that all last particulars (G1P1, G1P2, G2P1, G2P2, G3P1, G3P2)
are partially ordered by a relation ‘≾or =’ denoted by ≾, where = means the same
payment. Then G1P2 is deﬁned by qal wa-h. omer as follows:
G1P2 = min(G2P2, G1P1).
From this it follows that
G1P2 “The safekeeping for free of charge is destroyed for natural reasons. He should
swear that he did not lay his hand upon his neighbour’s property.”
Analogically, G3P1 is deﬁned by qal wa-h. omer thus:
G3P1 = min(G2P1, G3P2).
Then it is inferred that
G3P1 “The borrowed is stolen. He should pay the loss.”
So, the main goal of qal wa-h. omer is to add new axioms for the Torah data sets
to make the proof trees more symmetrical: in the same tree t with only one root all
subtrees must bear the same number of edges. For instance, in the tree
t = {G[{G1[{G1P1[{}]}], G2[{G2P1[{}], G2P2[{}]}], G3[{G3P2[{}]}]}]}
we had the subtree t′ = {G2[{G2P1[{}], G2P2[{}]}]} with the number of edges
2 that exceeds the numbers of edges of all other subtrees. Then we must add new
branches to each subtree where the number of edges is less than 2.
Deﬁnition 12.1 (Inference Metarule qal wa-h. omer) Let a tree t have i subtrees: t1,
…, ti and let N j be a number of axioms (a part
j1 , . . . , a part
j N ) for each j = 1, i and let
all axioms for each subtree be lexicographically ordered in the same way. Assume
that maxi
j=1 N j = n. This means that there exists l such that 1 ≤l ≤i and Nl = n.
Let us suppose now that there exists k ∈{1, . . . , i} such that k ̸= l and Nk = m < n.
Then we can add new axioms by qal wa-h. omer to complete the axioms of tk up to
the set (a part
k1
, . . . , a part
kn
):
1. the set (a part
l1
, . . . , a part
ln
) is partially ordered by ≾and the order ≾of (a part
o1
, …,
a part
on
) is the same for any subtree to of t such that No = n;
2. the set (a part
k1
, . . . , a part
km ) is partially ordered by the same ≾, but the order can
be different;
3. the item a part
k(m+1) = min(a part
km , a part
l(m+1));
4. the item a part
k(m+p) = min(a part
k(m+p−1), a part
l(m+p)) for each p = 1, n −m.
According to this metarule, we can have the same number of axioms for each
subtree of the same tree t. In other words, for all subtrees t1, …, ti of t we
have the axioms (a part
11
, . . . , a part
1n
, a part
21
, . . . , a part
2n
, . . . , a part
i1
, . . . , a part
in
) due to
qal wa-h. omer.

12.2 Foundations of Mathematics Within the Lateral Activation
423
In the previous section we have said that the task of every ambitious mathematician
is to extend a set of mathematical axioms. In the statements like FLT we exceed the
set of existing axioms (i.e. we put proofs outside of the foundation of mathematics).
And we assume that the ambitious mathematicians appeal to some inference metarule
to obtain new axioms for proving their non-trivial sentences. In other words, they
deal not with mechanical proofs from existing axioms within the foundations of
mathematics (i.e. they do not follow the lateral inhibition), but they combine different
trees to expand the set of possible axioms beyond any foundations of mathematics
(i.e. they follow the lateral activation to see the “invisible gorilla” in math). This way
of proving is called by us Talmudic because of the priority of the Talmudic logic
in proposing some inference metarules for deﬁning axioms. So, let us generalize
Deﬁnition 12.1 as follows.
Deﬁnition 12.2 (Inference Metarule I ) Let a tree t have i subtrees: t1, …, ti
and let N j be a number of axioms (aM
j1, . . . , aM
j N) for each j = 1, i. Assume that
maxi
j=1 N j = n. This means that there exists l such that 1 ≤l ≤i and Nl = n. Let
us suppose now that there exists k ∈{1, . . . , i} such that k ̸= l and Nk = m < n.
Then we can add new axioms by the inference metarule I to complete the axioms
of tk up to the set (aM
k1, . . . , aM
kn):
1. the sets (aM
l1 , . . . , aM
ln ), …, (aM
o1, . . . , aM
on) are partially ordered by ≾for all sub-
trees tl, …, to with the number of axioms Nl = · · · = No = n;
2. the set (aM
k1, . . . , aM
km) is partially ordered by the same ≾, but the order can be
different;
3. theitemaM
k(m+p) = □I (aM
k1, . . . , aM
k(m+p−1),aM
l1 ,…,aM
l(m+p),…,aM
o1,…,aM
o(m+p))
for each p = 1, n −m, where □I is a Boolean function.
12.2.2
Talmudic Reasoning for Simulating Swarms
The rule qal wa-h. omer can be represented as a form of spatial reasoning. In this form
the qal wa-h. omer can simulate swarm behaviours. To show this, let us consider a new
Talmudic example. In the Baba Qama (one of the Talmudic books), different kinds
of damages (nezeqin) are analyzed, among which three genera are examined: foot
action (regel), tooth action (šen) and horn action (qeren). These three are damages
that could be caused by an ox (he can trample (foot), eat (tooth) and gore (horn)).
Due to the Torah it is known that tooth damage (as well as foot damage) by an ox at a
public place needs to pay zero compensation. Horn damage at a public place entails
payment of 50% the damage costs as compensation. In a private area foot/tooth
damage must be paid in full. What can we say now about payments for horn actions
of private places?

424
12
Foundations of Mathematics Within Lateral Inhibition and Lateral Activation
Damages (nezeqin) Public place Private place
Horn action (qeren) 50%
?
Foot action (regel)
0
100%
Tooth action (šen)
0
100%
In order to draw up a conclusion by qal wa-h. omer, we should deﬁne a two-
dimensional ordering relation on the set of data: (i) on the one hand, according to
the dayo principle, we know that payment for horn action in a private area cannot be
greater than the same in a public area, (ii) on the other hand, payment for horn action
at a private place cannot be greater than foot/tooth action at the same place. Hence,
we infer that payment of compensation for horn action at a private place is equal to
50% of the damage costs.
The table above shows us that qal wa-h. omer can be interpreted spatially, too.
Already Yisrael Ury [14] proposed to use the Carroll’s bilateral diagrams for mod-
elling conclusions by qal wa-h. omer. Let us take now the diagram xy′ xy
x′y′ x′y that plays
the role of ‘universe of discourse’ for Talmudic reasoning over adjuncts x, y, non-x
in the neighbourhood (that is denoted by x′), non-y in the neighbourhood (that is
denoted by y′). Assume that we have only black counters and if a black counter is
placed within a cell, this means that “this cell is occupied” (i.e. “there is at least one
thing in it”, “an appropriate Talmudic rule should be obeyed”). Thus, the cell that
does not contain a black counter indicates a situation in which the obligation is not
fulﬁlled, whereas the cell containing a black counter indicates a situation in which
the obligation is fulﬁlled.
Hence, if we have two rows and two columns, there are sixteen possible ways to
cover such a diagram by means of black counters, in connect to Yisrael Ury who
accepts only six of them (Fig.12.3).
Let x mean proposition 1 and y mean proposition 2. Then the above mentioned
accepted diagrams (Fig.12.3) have the following sense: (a) It is necessary and suf-
ﬁcient to obey x; (b) It is necessary and sufﬁcient to obey y; (c) It is sufﬁcient to
obey either x or y; (d) It is not sufﬁcient to obey x and/or y; (e) It is necessary and
sufﬁcient to obey both x and y; (f) It is not necessary to obey either x or y.
Let us return to our example. Let x3 be a ‘foot action’, x2 a ‘tooth action’, x1 a ‘horn
action’, y′ ‘at public place’, y ‘at private place’. So, we obtain the following diagram:
x1y′ x1y
x2y′ x2y
x3y′ x3y
Assume that a black counter means an obligation to pay 100% of the damage
costs as compensation and a grey counter means an obligation to pay any 50%. We
can cover this diagram by counters as shown in Fig.12.4.
In so doing, we have supposed that there is a different power of intensity in
obligation. In this case our rule for inferring by qal wa-h. omer is formulated thus:

12.2 Foundations of Mathematics Within the Lateral Activation
425
Fig. 12.3 Ury’s diagrams for conclusions by qal wa-h. omer, see [15]
Fig. 12.4 Ury’s diagrams for inferring whether we should pay a horn action at a private place, see
[15]
Deﬁnition 12.3 (Inference Metarule qal wa-h. omer) If a cell contains a black or grey
counter, all cells above it and to its right also contain a black or grey counter and the
color of that counter has the minimal hardness of black and grey in counters of the
neighbour cells; if a cell does not contain any counter, all cells below it and to its left
are also without counters.
Talmudic diagrams deﬁned just above are close to Carroll’s diagrams and can
simulate the swarm behaviour under the condition of lateral activation.
Let us consider a nest of ants. Each cell x, y, x′, y′ of the universe xy′ xy
x′y′ x′y
means an attractant located at this cell which attract the ants. In this way we obtain
the following syllogistic strings: xy, yx, x′y, yx′, xy′, y′x, x′y′, y′x′, where x and
y in xy are interpreted as two neighbour attractants connected by a network of ants,

426
12
Foundations of Mathematics Within Lateral Inhibition and Lateral Activation
x′ is understood as all attractants which differ from x, but are neighbours of y, and
y′ is understood as all attractants which differ from y and are neighbours of x:
xy there is a road of ants between points x and y;
x′y there is a road of ants among all neighbours of x and y;
xy′ there is a road of ants among all neighbours of y and x;
x′y′ there is a road of ants among all neighbours of x and all neighbours of y;
The rule of qal wa-h. omer deﬁned in Fig.12.3 and in Deﬁnition 12.3 has the
following meaning:
xy′ xy
x′y′ x′y —if there is a road of ants among x and all the neighbours of y, then there
is a road of ants between x and y;
xy′ xy
x′y′ x′y —if there is a road of ants among y and all the neighbours of x, then there
is a road of ants between x and y;
xy′ xy
x′y′ x′y —if there is a road of ants among x and all the neighbours of y and there
is a road of ants among y and all the neighbours of x, then there is a road of ants
between x and y;
xy′ xy
x′y′ x′y —if there is no road of ants between x and y, then (i) there is no road of
ants among x and all the neighbours of y and (ii) there is no road of ants among y
and all the neighbours of x and (iii) there is no road of ants among all the neighbours
of x and all the neighbours of y;
xy′ xy
x′y′ x′y —if there is a road of ants between x and y, then we do not know anything
more;
xy′ xy
x′y′ x′y —if there is a road of ants among all neighbours of x and all the neighbours
of y, then (i) there is a road of ants among x and all the neighbours of y and (ii) there
is a road of ants among y and all the neighbours of x and (iii) there is a road of ants
between x and y.
We can propose also the following Talmudic diagrams for simulating the swarm
sensing and motoring: x y
y′ x′ , where x′ is a non-empty class of neighbour attractants
for x reachable from y and y′ is a non-empty class of neighbour attractants for y
reachable from x. Then the qal wa-h. omer tells us whether a multiplication took
place during the propagation of ants at points x and/or y. In Fig.12.5, all the possible
conclusions inferred by qal wa-h. omer in relation to x and y are considered, and they
are deﬁned if we have a multiplication at those points.
x y
y′ x′ —if there is a road between y′ and x, then there is a road between x and y
(see Fig.12.5a);

12.2 Foundations of Mathematics Within the Lateral Activation
427
Fig. 12.5 The diagrams for qal wa-homer simulating the ant networking: a If the string xy′ is
veriﬁed, then the string xy is veriﬁed, too (i.e. if xy′ is veriﬁed, then x has a multiplication of ant
roads). b If the string yx′ is veriﬁed, then the string xy is veriﬁed, too (i.e. if yx′ is veriﬁed, then
y has a multiplication of ant roads). c If the strings xy′ and yx′ are veriﬁed, then the string xy is
veriﬁed, too (i.e. if both xy′ and yx′ are veriﬁed, then both x and y have multiplications of ant
roads). d If no string is veriﬁed, then there is no multiplication of ant roads. e If the string xy is
veriﬁed, then the there is no multiplication of ant roads. f If the strings x′y′ is veriﬁed, then the
strings xy′, x′y, xy are veriﬁed, too (i.e. if x′y′ is veriﬁed, then both x and y have multiplications
of ant roads), see [15]

428
12
Foundations of Mathematics Within Lateral Inhibition and Lateral Activation
x y
y′ x′ —if there is a road between x′ and y, then there is a road between x and y
(see Fig. 12.5b);
x y
y′ x′ —if there is a road between y′ and x and there is a road between x′ and y,
then there is a road between x and y (see Fig. 12.5c);
x y
y′ x′ —if there is no road of ants between x and y, then (i) there is no road of ants
between x and y′ and (ii) there is no road of ants between y and x′ and (iii) there is
no road of ants between x′ and y′ (see Fig. 12.5d);
x y
y′ x′ —if there is a road of ants between x and y, then we do not know anything
more (see Fig. 12.5e);
x y
y′ x′ —if there is a road of ants between x′ and y′, then (i) there is a road of ants
between x and y′ and (ii) there is a road of ants between y and x′ and (iii) there is a
road of ants between x and y (see Fig. 12.5f).
Hence, the main difference between the Aristotelian syllogistic and Talmudic
reasoning is that, on the one hand, we are concentrating on fusions of swarm roads
in the case of the Aristotelian syllogistic (lateral inhibition effects) and, on the other
hand, we deal with multiplications of swarm roads in the case of Talmudic reasoning
(lateral activation effects). Let us exemplify Fig.12.5 by different ant roads, see
Figs.12.6, 12.7, 12.8 12.9 12.10 and 12.11.
Fig. 12.6 The qal wa-h. omer for the ant networking. There are several attractants denoted by black
circles. We designate two attractants as x and y. The picture shows that if there is a road between
y′ and x, then there is a road between x and y (see Fig.12.5a)

12.2 Foundations of Mathematics Within the Lateral Activation
429
Fig. 12.7 The qal wa-h. omer for the ant networking. There are several attractants denoted by black
circles. We designate two attractants as x and y. The picture shows that if there is a road between
x′ and y, then there is a road between x and y (see Fig.12.5b)
Fig. 12.8 The qal wa-h. omer for the ant networking. There are several attractants denoted by black
circles. We designate two attractants as x and y. If there is a road between y′ and x and there is a
road between x′ and y, then there is a road between x and y (see Fig.12.5c)

430
12
Foundations of Mathematics Within Lateral Inhibition and Lateral Activation
Fig. 12.9 The qal wa-h. omer
for the ant networking. There
are several attractants
denoted by black circles. We
designate two attractants as x
and y. If there is no road of
ants between x and y, then
(i) there is no road of ants
between x and y′ and (ii)
there is no road of ants
between y and x′ and (iii)
there is no road of ants
between x′ and y′ (see
Fig.12.5d)
Fig. 12.10 The qal
wa-h. omer for the ant
networking. There are
several attractants denoted
by black circles. We
designate two attractants as x
and y. If there is a road of
ants between x and y, then
we do not know anything
more (see Fig.12.5e)
As we see, the qal wa-h. omer can simulate some forms of ant propagations, i.e.
the ant behaviour under the conditions of lateral activation. Let us return to the lateral
activation in the mathematical cognitions. In the same way we can simulate plant
roots, see [16–19].
12.2.3
Metareasoning in Mathematical Analysis
Thus, in the Talmudic foundations of mathematics we transform one metric space of
mathematical proof trees into another space by some inference metarules. We make it
by analogy—how in the Talmud we make a transformation from one space of Biblical
particular-and-general relationships to another one. The proof trees supposed in the
Torah are not complete and by the Talmudic inference metarules such as qal wa-
h. omer we can make trees more symmetric so that their subtrees must have the same
number of branches at the end.

12.2 Foundations of Mathematics Within the Lateral Activation
431
Fig. 12.11 The qal wa-h. omer for the ant networking. There are several attractants denoted by
black circles. We designate two attractants as x and y. If there is a road of ants between x′ and y′,
then (i) there is a road of ants between x and y′ and (ii) there is a road of ants between y and x′ and
(iii) there is a road of ants between x and y (see Fig.12.5f)
Let us consider an example from mathematical analysis to show that a mathe-
matician, extending a mathematical horizon, operates with forests and appeals to
metarules for combining different trees, indeed. Great mathematicians do not prove
theorems in the way like a logical automaton does it. For example, Augustin-Louis
Cauchy, the French mathematician of the 19th century who became a founder of
modern mathematical analysis, put forward an axiom now called Dedekind Com-
pleteness for the expansion of mathematics. Due to this axiom, some properties of
real numbers (non-logical axioms describing real numbers) can have transmitted to
complex numbers, vectors, and even inﬁnite sequences by a mathematical analogy
of the Talmudic qal wa-h. omer rule.
Let us denote an inﬁnite sequence (i.e. a countable set) of objects x1, x2, . . . ,
xk, . . . by {xn}. Then some basic deﬁnitions of the Cauchy approach are given in
Table12.1, for more details see [4].
Among the deﬁnitions of Table12.1 there are relationships of logical derivability.
For example, the theorem proving CCP({αn}; R, | · |) can be represented as the
following tree:
t1 = {CSP[{ECP[{Ax3[{{an}[{}], {bn}[{}], SES[{}]}]}],
bn −an
R→0[{}]}]},
the same is in the graph form:

432
12
Foundations of Mathematics Within Lateral Inhibition and Lateral Activation
Table 12.1 Some basic deﬁnitions of mathematical analysis formulated in the 19th century
Abbreviations
Basic deﬁnitions of mathematical analysis
Conv({xn}; R, | · |)
xn
R
→x def
= {xn} ⊂R converges to x ∈R what
is deﬁned thus: {xn} ⊂R ∧∃(x ∈R)∀(ε > 0)
∃(Nε) ∀(n ≥Nε)[|xn −x| < ε]
CC({xn}; R, | · |)
{xn} ⊂R satisﬁes the Cauchy condition
iff {xn} ⊂R∧
∀(ε > 0)∃(Nε ∈N)∀(m, n ∈N|n ≥Nε∧
m ≥Nε)[|xn −xm| < ε]
Ax3(A, B, a, b; R, | · |)
Dedekind completeness: ∀(A ⊆R|A ̸= ∅)
∀(B ⊆R|B ̸= ∅)
[∀(a ∈A)∀(b ∈B)[a ⩽b] →
∃(ξ ∈R)∀(a ∈A)∀(b ∈B)[a ⩽ξ ⩽b]]
SES({[an, bn]}; R, | · |)
A sequence [an, bn] of closed intervals of R is
called a nested closed intervals system iff
∀(i ∈N)[ai ∈R∧
bi ∈R ∧[ai, bi] ⊃[ai+1, bi+1]]
ECP({[an, bn]}; R, | · |)
∀({[an, bn]} ⊂2R)[SES({[an, bn]}; R, | · |) →
∃(ξ ∈R)∀(i ∈N)[ξ ∈[ai, bi]]]
SCP({[an, bn]}; R, | · |)
ECP({[an, bn]}; R, | · |) ∧bn −an
R
→0 →
∃!(ξ ∈R)∀(i ∈N)[ξ ∈[ai, bi]]]
CCP({αn}; R, | · |)
Cauchy-Cantor’s intersection theorem:
where αn = [an, bn]
ECP({[an, bn]}; R, | · |) ∧
SCP({[an, bn]}; R, | · |)
is a closed interval
B({xn}; R, | · |)
A sequence {xn} is called bounded iff
∃(C)∀(n ∈N)[|xn| ≤C]
BWT({xn}; R, | · |)
Bolzano-Weierstrass’ theorem:
Each bounded sequence {xn} ⊆R has a
convergent
subsequence {xnk } ⊆R, ∃(x ∈R)[xnk
R
→x]
Tr(x, y; R, | · |)
Triangle inequality:
∀(x, y ∈R)[|x + y| ≤|x| + |y|]
CCrit({xn}; R, | · |)
Cauchy criterion: ({xn} ⊂R ∧xn
R
→x) ↔
CC({xn}; R, | · |)

12.2 Foundations of Mathematics Within the Lateral Activation
433
bn −an
R→0
SCP
ECP
Ax3
SES
{an}
{bn}
The proof tree for theorem BWT({xn}; R, | · |) is built up as follows:
t2 = {SES[{{xn} is bounded [{}]}],
∃!(ξ ∈R)∀(m ∈N)[ξ ∈[am, bm]][{CCP[t1]}]},
which is pictured in the following manner:
∃!(ξ ∈R)∀(m ∈N)[ξ ∈[am,bm]]
t1
CCP
SES
{xn} is bounded

434
12
Foundations of Mathematics Within Lateral Inhibition and Lateral Activation
Let us deﬁne now the proof tree for the theorem proving CCrit({xn}; R, | · |):
t3 = {CC[{∀(ε > 0)∃(Nε ∈N)∀(n, m > Nε)[|xn −x| < ε∧
|xm −x| < ε][{Conv[{}]}], Tr[{}]}],
∀(ε > 0)∃(Nε ∈N)∀(m, k ∈N|n ≥Nε∧
m ≥Nε)[|xnk −xm| < ε][{B[{CC[{}]}]BWT[t2]}]},
with the following graph:
2
CC
B
CC
1
Tr
Conv
BWT
t2
where ϕ1 = ∀(ε > 0)∃(Nε ∈N)∀(n, m > Nε)[|xn −x| < ε ∧|xm −x| < ε]; ϕ2 =
∀(ε > 0)∃(Nε ∈N)∀(m, k ∈N|n ≥Nε ∧m ≥Nε)[|xnk −xm| < ε].
Letusdeﬁneanorderingrelationamongnon-logicalaxioms,≺,asfollows: A ≺B
iff an axiom A is contained in the proof tree of B. Hence, for t3 we obtain:
[Ax3(A, B, a, b; R, | · |) ≺CCP({αn}; R, | · |) ≺
BWT({xn}; R, | · |) ≺CCrit({xn}; R, | · |)]∧
[Tr(x, y; R, | · |) ≺CCrit({xn}; R, | · |)].
Theorem t3 holds for real numbers. Nevertheless, this theorem can be extended
to some other numbers by a qal wa-h. omer:
1. A sequence of complex numbers {xn + iyn} ⊂C can be deﬁned in the way of
CCrit({xn + iyn}; C, | · |C) where |x + iy|C =

x2 + y2, i.e. it is sufﬁcient for
us to replace all occurrences of R to C and all occurrences of the metrics | · | to
the metrics | · |C in the proof statements of the theorem.

12.2 Foundations of Mathematics Within the Lateral Activation
435
2. Also,sequencesofvectorsfromRs canbeformulatedasCCrit({xn}; Rs, ∥· ∥Rs)
where
∥(v1, . . . , vs)∥Rs =

s

i=1
(vi)2
1/2
.
So, we can generalize theorem t3 (the Cauchy criterion) due to the fact that there is
an analogue for the Dedekind completeness axiom (Ax3) (deﬁned in real numbers)
that holds for aforesaid types of numbers which can be represented as some tuples
of real numbers. In this case some new inequalities ai ⩽ξi ⩽bi, i = 1, . . . , n for
a = (a1, . . . , an), b = (b1, . . . , bn), ξ = (ξ1 . . . , ξn) take place instead of the one
inequality of Ax3.
We can formulate the same generalization by using Deﬁnition 12.2. Assume that
we have some axioms (aR
1 , . . . , aR
N) for real numbers, some axioms (aC
1 , . . . , aC
M)
for complex numbers, and some axioms (aV
1 , . . . , aV
L ) for vectors. We know that
N > M (respectively, N > L), because in the beginning, R was studied better than
C (respectively, better than V). Let us take a subset of axioms (aR
1 , . . . , aR
n ) for real
numbers, which express the real metrics. So, aR
n is Ax3. Now let us deﬁne a partial
ordering relation ≾on (aR
1 , . . . , aR
n ). Let ≾be a standard implication. For instance,
Conv({xn}; R, | · |) →Ax3 means that Conv({xn}; R, | · |) ≾Ax3. Suppose that ≾
is extended to an ordering relation on the set of axioms (aC
1 , . . . , aC
m), where m < n,
from which we are going to infer the complex metrics. By Deﬁnition 12.2 we can add
newaxiomsforC,forexample:aC
n = [[Conv({xn}; R, | · |) ∧[CC({xn}; R, | · |)] →
Ax3] →[[Conv({xn}; C, | · |C) ∧CC({xn}; C, | · |C)] →Ax3]. We have just added
this axiom by qal wa-h. omer (see Deﬁnition 12.2).
As we see, the new axioms in C and V are obtained due to the extrapolation from
the axioms of R to move the proof forest ⟨t1, t2, t3⟩from real numbers to complex
numbers and vectors. It is an effect of lateral activation in math that can be analyzed
within the Talmudic or analogue foundations of mathematics.
By the end of the 19th century, the mathematical objects for which applying
Ax3 seems quite natural have been exhausted. The worlds of real numbers, complex
numbers, vectors, and even inﬁnite sequences have already been studied enough and
mathematicians wanted something more, especially because there were problems of
variation calculus that works with maps of maps. It has been assumed for a long
period that the spaces of maps usually are inﬁnite and so different from the well-
studied ﬁnite-dimensional spaces in their basic properties. Further, in the minds of
founders of the functional analysis there were born metric spaces X, where you
can select a distance (metric) ρ : X2 →R among elements, but it is impossible to
determine a module (norm) of elements in any reasonable way.
Immediately, a question arose: what properties should X and ρ have in order to
satisfy
CCrit({xn}; X, ρ) = true?
It is clear that in this case we have to replace all expressions of the form |x −y| by
ρ(x, y) at all occurrences in

436
12
Foundations of Mathematics Within Lateral Inhibition and Lateral Activation
CCrit({xn}; R, | · |)
Obviously, the ﬁeld of real numbers is a special case of metric space with the
following metric: ρR(x, y) = |x −y|. At the same time, the Cauchy criterion holds
not in every metric space, for example, it does not hold in the space of continuous
functions C[0, 1] with the metric ρL1(x, y) =
 1
0 |x(t) −y(t)|dt. Cauchy himself,
of course, knew nothing about the metric spaces and could hardly suspect that there
will be the following deﬁnition:
Deﬁnition 12.4 The metric space (X, ρ) where
∀({xn} ⊂X)[CCrit({xn}; X, ρ) ↔∃(x ∈X)[xn
X→x]],
is called complete.
The idea was to deﬁne the property Tr(x, y; X, ρ), natural for (R, | · |), on the ele-
ments of (X, ρ), by transforming this property from the derived theorem to the
preexisted axiom, also by transforming CCrit({xn}; X, ρ) from the theorem to the
axiom and by expecting that the ﬁnal object will behave like numbers with almost
the same structural theorems. Surprisingly, it became true! For example, for R there
exists the compactness of the bounded and closed set and for the complete metric
space of functions, continuous on [0, 1], with the norm ∥x∥C = maxt∈[0,1] |x(t)|,
also there exists the compactness of the bounded set (with an additional condition of
equicontinuity)—it is the claim of the Arzelà-Ascoli theorem, denoted by AAT, the
analogue of BWT. The Cauchy-Cantor intersection theorem, i.e. CCP, gets its coun-
terpart in the form of the topological Cauchy-Cantor intersection theorem, denoted
by TCCP, for the closed non-empty nested subsets of X.
Hence, as Alexander V. Kuznetsov noticed, the mathematicians of the end of the
19th century proposed to replace the axiom Ax3 by the theorem CCrit({xn}; X, ρ)
in the proof trees and, as a result, they changed all proof sequences invented by the
mathematicians of the early 19th century. They did it to extend the mathematical
limits in building new proof trees. For instance, if we deﬁne an ordering relation
among non-logical axioms, ≺, as follows: A ≺B iff an axiom A is contained in the
proof tree of B, then the reasoning proposed by the mathematicians of the late 19th
century is as follows:
[CCrit({xn}; X, ρ) ≺AAT({xn}; X, ρ)]∧
[Tr(x, y; X, ρ) ≺AAT({xn}; X, ρ)];
[CCrit({xn}; X, ρ) ≺TCCP(X, ρ)]∧
[Tr(x, y; X, ρ) ≺TCCP(X, ρ)].
To sum up, it is important to point out that if the mathematicians followed the stan-
dard foundations of mathematics in fact, they would not change the proof sequence.

12.2 Foundations of Mathematics Within the Lateral Activation
437
Buttheydiditindeed,becauseitissigniﬁcantfordrawingnewtreesbyinferencerules
deﬁned in Deﬁnition 12.2. So, the new theorems AAT({xn}; X, ρ) and TCCP(X, ρ)
allow the mathematicians to apply Deﬁnition 12.2 in their reasoning more often and
in more cases than it can be done by using Ax3.
Hence, the axiom CCrit({xn}; X, ρ) was taken by the mathematicians instead of
Ax3 to move more proof forests from metric spaces to new mathematical construc-
tions. This movement of proof forests is out of discrete foundations of mathematics
(out of the lateral inhibition in proof cognitions). It gives a lateral activation effect
in math.
12.2.4
Metric Space for Proof Forests
Let us start with deﬁning a dissimilarity metric for proof forests on the basis of
generalization of the graph edit distance (see, e.g. [20]). This metric allows us to
compare weighted graphs with vertices and weights in arbitrary metric spaces. Let
⟨V, ρ⟩, ⟨W, ξ⟩be different metric spaces. We deﬁne G as the set of forests Γ =
⟨V ′, E′, W ′, ϕ, η⟩with weighted edges presenting deduction steps, V ′ ⊆V , W ′ ⊆
W areﬁnitesets,ϕ : (V ′)2 →{True, False}isanincidencefunction,η : (V ′)2 →W ′
is the weight function, and
E′ = {(v1, v2)|v1, v2 ∈V ′ ∧v1ϕv2}.
Let G ∗be a set of bijections χ : V →V and G ∗
adm ⊆G ∗.
Let us choose χ ∈G ∗
adm and Γi ∈G , i = 0, 1. The map χ can be an iso-
morphism between some subforests of Γ0 and Γ1, preserving their orders. Let
Γ ′
i ⊂Γi are the maximal subforests that χ : Γ ′
0 →Γ ′
1 is the graph’s isomorphism,
Γ ′
i = ⟨V ′′
i , E′′
i , W ′′
i ϕi, ηi⟩. The “poorness” of the map χ as an isomorphism of Γi
can be formally expressed as
q(χ; Γ0, Γ1) = F(b(χ; Γ ′
0, Γ ′
1), d0(χ; Γ ′
0, Γ ′
1), d1(χ; Γ ′
0, Γ ′
1)),
where F is the non-negative, monotonically increasing in each variable function,
F(x, y, z) = 0 iff x = y = z = 0, di = |V ′
i \ V ′′
i |, b is the dissimilarity between Γ ′
0
and Γ ′
1. Let also β be the non-negative, monotonically increasing in each variable
function, W(x, y) = 0 iff x = y = 0, and
v = {ρ(v, χ(v)): v ∈V ′′
0 },
e = {ξ(η(v1, v2), η(χ(v1), χ(v2))): v1, v2 ∈V ′′
0 , v1ϕ0v2},
v = {0}, V ′′
0 = ∅,
e = {0}, E′′
0 = ∅.
In this case, we can deﬁne

438
12
Foundations of Mathematics Within Lateral Inhibition and Lateral Activation
b(χ; Γ ′
0, Γ ′
1) = β(v, e).
The following deﬁnition was proposed by Alexander V. Kuznetsov:
Deﬁnition 12.5 Deﬁne the dissimilarity distance between two proof forests Γ0 and
Γ1 as follows:
diss(Γ0, Γ1) = min
χ∈G ∗
adm
q(χ; Γ0, Γ1).
The set of forests G can be ordered by a partial order relation in different ways.
At ﬁrst, if Γ0 is a subforest of Γ1, while Γ0, Γ1 ∈G , we can put that Γ0 ≤Γ1.
Let us deﬁne a new operation on forests Γ0, Γ1 ∈G : Γ1\Γ0 for Γ0 ≤Γ1. Let 1n
be ∞
n=0{Γn+1 : Γn ≤Γn+1, n ∈N}. Now, we can deﬁne the Boolean operations on
forests Γi, Γ j ∈G :
¬nΓi := 1n\Γi
(negation).
Notice that we have the following two cases: (i) Γi ⊆1n, then 1n\Γi is not trivial,
and (ii) Γi ⊈1n, then we assume, 1n\Γi is trivial and gives 1n.
Γi ∧n Γ j := Γi\(1n\Γ j)
(conjunction).
There are four cases: (i) Γi, Γ j ⊆1n, then Γi ∧n Γ j gives a new forest consisting
of joint proof trees of Γi and Γ j; (ii) Γi ⊆1n and Γ j ⊈1n, then Γi ∧Γ j = ∅; (iii)
Γi ⊈1n and Γ j ⊆1n, then we assume Γi ∧n Γ j gives ∅; (iv) Γi ⊈1n and Γ j ⊈1n,
then we assume Γi ∧n Γ j gives ∅.
Γi ∨n Γ j := 1n\((1n\Γi)\Γ j)
(disjunction).
There are four cases: (i) Γi, Γ j ⊆1n, then Γi ∨n Γ j gives a new forest consisting of all
proof trees of Γi and Γ j; (ii) Γi ⊆1n and Γ j ⊈1n, then we assume Γi ∨n Γ j = 1n;
(iii) Γi ⊈1n and Γ j ⊆1n, then we assume Γi ∨n Γ j gives Γ j; (iv) Γi ⊈1n and
Γ j ⊈1n, then we assume Γi ∨n Γ j = ∅.
Γi ⊃n Γ j := 1n\(Γi\Γ j)
(implication).
There are four cases: (i) Γi, Γ j ⊆1n, then Γi ⊃n Γ j gives a new forest consisting
of all proof trees of 1n\Γi and Γ j; (ii) Γi ⊆1n and Γ j ⊈1n, then we assume Γi ⊃n
Γ j = 1n; (iii) Γi ⊈1n and Γ j ⊆1n, then we assume Γi ⊃n Γ j gives 1n; (iv) Γi ⊈1n
and Γ j ⊈1n, then we assume Γi ⊃n Γ j = 1n.
Deﬁnition 12.6 Let 1n denote a n-th maximal forest of G . Let us take maximal
forests 1i, . . . , 1 j, for them we can build the system ⟨G , 1i, . . . , 1 j, ¬i, . . . , ¬ j, ∧i,
…, ∧j, ∨i, …, ∨j, ⊃i, . . . , ⊃j⟩that is called a difference analogue logic on proof
forests.

12.2 Foundations of Mathematics Within the Lateral Activation
439
This system gives a kind of lattice, but it cannot allow us to change proof forests how
it was possible due to qal wa-h. omer. Let us introduce a new partial order relation ≼:
Deﬁnition 12.7 We will say that Γ1 ≼Γ0, if there exists an isomorphism χ ∈G ∗
adm
such that χ(Γ1) ≤Γ0.
If we provide G or some of its subsets with the selected forest Γ0, then we can
improve the order relation as follows.
Deﬁnition 12.8 If Γ1 ≼Γ0 and Γ2 ≼Γ0, Γi ∈G (Γ0) ⊆G , i = 1, 2, there does not
exist χ12 ∈G ∗
adm such that χ12(Γ1) ≤Γ2 ∨χ12(Γ2) ≤Γ1, and
diss(Γ1, Γ0) ≤diss(Γ2, Γ0),
then deﬁne Γ2 ≼Γ1.
Now, let us introduce logical operations on forests Γi, Γ j ∈G :
¬Γi
(negation);
Γi

Γ j
(disjunction);
Γi
	
Γ j
(conjunction);
Γi ⇒Γ j
(implication).
We can represent G0 ⊆G as G0 = 
i G (Γi), where G (Γi) ⊆G is the set of all
forests Γ such that there exists χ ∈G ∗
adm, χ(Γ ) ≤Γi or Γi ≤χ(Γ ). All sets G (Γi)
may be ordered in the aforementioned way except G (Γi) ∩G (Γ j). Then
Deﬁnition 12.9 We will say that G ′ = {Γi ∈G : i = 1, n} is a model for Γ ∈G and
write G ′ |= Γ , if
∃(χi ∈G ∗
adm)
n
i=1
χi(Γi) = Γ ′ ≼Γ.
Let us deﬁne ¬, , , ⇒on models:
G ′ |= ¬Γi if and only if G ′ ̸|= Γi.
G ′ |= Γi

Γ j if and only if G ′ |= Γi or G ′ |= Γ j.
G ′ |= Γi
	
Γ j if and only if G ′ |= Γi and G ′ |= Γ j.
G ′ |= Γi ⇒Γ j if and only if G ′ ̸|= Γi or G ′ |= Γ j.

440
12
Foundations of Mathematics Within Lateral Inhibition and Lateral Activation
In this way we obtain a new analogue logic on proof forests:
Deﬁnition 12.10 The system ⟨G , ¬, , , ⇒⟩is called a diss analogue logic on
proof forests.
This logic allows us to make dissimilation of forests shorter due to logical conclu-
sions. Hence, we suppose that a process of constructing a new theory can be modeled
with this logic as follows:
0. Let R : G →R is the graph’s ﬁtness functional. If Γ ∈G , R(Γ ) > 0 then we
will think that forest Γ ﬁts.
1. We choose the base theories set G ′.
2. We generate forests Γ ′′ which are homotopical equivalent to all Γ ′ ∈G ′ until
R(Γ ′′) > 0 ∧∀(Γ ′ ∈G ′) Γ ′ ≼Γ ′′.
3. We add Γ ′′ to G ′ and go to the step 1.
In practice, it seems that the aforesaid construction process can be represented as
a problem of an integer programming in most cases and it is possible to use existing
solvers like SCIP [21] for the theories generation.
Thus, Deﬁnitions 12.6 and 12.10 introduce for us the analogue logics that can
formalize the math reasoning performed under the condition of lateral activation in
the proof observation.
We have just tried to show that the mathematicians can deal not only with a logical
way of automatic proving from some axioms (the lateral inhibition in math), but
also with combining proof trees on tree forests by using the analogies as inference
metarules (the lateral activation in math). For the ﬁrst time, such metarules were
proposed in the Talmud within a general Judaic approach to concurrent or even
massive-parallel conclusions, see [1, 2, 4]. The mathematician can think not only
sequentially like a logical automaton, but concurrently, also.
In the logical foundations of mathematics there are two approaches in drawing
computer-assisted proofs: (i) automated theorem proving (i.e. proving mathematical
theorems by computer programs) and (ii) automated proof checking (i.e. using com-
puter programs for checking proofs for correctness). There are many objections for
these approaches. For instance, for (i) one the main objections is that these methods
do not give new and useful concepts in mathematics in fact, but they present just a
long gloomy calculation. For (ii) one of the main objections is that these methods
can check just very simple theorems. There are no even insights how to check FLT
by computer programs.
In our opinion, the most signiﬁcant problem of existing logical foundations of
mathematics is that a mathematical proof is considered a discrete process that can be
formalized by discrete methods, i.e. the proof is regarded only under the condition of
lateral inhibition. However, it is only a hypothesis that mathematics can be reduced
to logic and the mathematical thinking is discrete. We can assume that it is not only
so and a mathematical proof can be an operation in a metric space of proof trees
with some topological properties, i.e. we can start to analyze the lateral activation

12.2 Foundations of Mathematics Within the Lateral Activation
441
in proof cognitions. As a result, the mathematical proof can be formalized as well
by analogue computations, not only discrete ones. The meaning of mathematical
proofs in the analogue logic we have just introduced is to transform some forests
with a bigger dissimilarity to forests with a smaller dissimilarity. For example, in
the Talmud this transformation means that each branch in proof trees with one root
should have the same number of subbranches and inferring allows us to construct
additional subbranches to make the trees more symmetric. In mathematics the goal
of proofs is quite similar and it is to extend the mathematical limits to make proof
trees in forests more symmetric, too.
Hence, we suppose that computer-assisted proofs can be based on some analogue
computations involving topological properties of proof trees. This idea was inspirited
by swarm intelligence.
References
1. Schumann, A.: Preface. Hist. Philos. Log. 32(1), 1–8 (2011)
2. Schumann, A.: Qal wa-homer and theory of massive-parallel proofs. Hist. Philos. Log. 32(1),
71–83 (2011)
3. Schumann, A.: Physarum polycephalum syllogistic L-systems and Judaic roots of unconven-
tional computing. Stud. Log. Gramm. Rhetor. 44(1), 181–201 (2016). https://doi.org/10.1515/
slgr-2016-0011
4. Schumann, A., Kuznetsov, A.V.: Talmudic foundations of mathematics. In: 10th EAI Interna-
tional Conference on Bio-inspired Information and Communications Technologies (formerly
BIONETICS), pp. 67–74 (2017)
5. Schumann, A., Kuznetsov, A.V.: Foundations of mathematics under neuroscience conditions
of lateral inhibition and lateral activation. Int. J. Parallel Emerg. Distrib. Syst. 33(3), 237–256
(2018)
6. Univalent Foundations Program, T.: Homotopy Type Theory: Univalent Foundations of Math-
ematics, Institute for Advanced Study (2013). https://homotopytypetheory.org/book
7. Chabris, C., Crown, D.S.: The Invisible Gorilla and Other Ways Our Intuitions Deceive Us.
New York (2010)
8. Drew, T., Vo, M.L.H., Wolfe, J.M.: The invisible gorilla strikes again: Sustained inattentional
blindness in expert observers. Psychol. Sci. 24(9), 1848–1853 (2013)
9. Carbon, C.C.: Understanding human perception by human-made illusions. Front. Human Neu-
rosci. 8(566) (2014). https://doi.org/10.3389/fnhum.2014.00566
10. Wiles, A.: Modular elliptic curves and Fermat’s last theorem. Ann. Math. 141, 443–551 (1995)
11. Paris, J., Harrington, L.A.: Mathematical incompleteness in Peano arithmetic. In: Barwise, J.
(ed.) Handbook for Mathematical Logic. North-Holland, Amsterdam, Netherlands (1977)
12. McLarty, C.: What does it take to prove Fermat’s last theorem? Grothendieck and the logic of
number theory. Bullet. Symbol. Log. 16(3), 359–377 (2010)
13. Artin, M., Grothendieck, A., l. Verdier, J.: Theorie des topos et cohomologie et ale des schemas,
Seminaire de Geometrie Algebrique du Bois-Marie, vol. 4. Springer (1972)
14. Ury, Y.: Charting the Sea of Talmud: A Visual Method for Understanding the Talmud (2012)
15. Schumann, A., Adamatzky, A.: Physarum polycephalum diagrams for syllogistic systems. J.
Log. Appl. 2(1), 35–68 (2015)
16. Adamatzky, A., Sirakoulis, G.C., Martínez, G.J., Baluska, F., Mancuso, S.: On plant roots
logical gates. Biosystems 156, 40–45 (2017)
17. Lindenmayer, A.: Mathematical models for cellular interaction in development. Parts i and ii.
J. Theor. Biol. 18(280–299), 300–315 (1968)

442
12
Foundations of Mathematics Within Lateral Inhibition and Lateral Activation
18. Niklas, K.: Computer simulated plant evolution. Sci. Am. (1985)
19. Prusinkiewicz, P., Lindenmayer, A.: The Algorithmic Beauty of Plants. Springer (1990)
20. Gao, X., Xiao, B., Tao, D., Li, X.: A survey of graph edit distance. Patt. Anal. Appl. 13, 113–129
(2010)
21. Maher, S.J., Fischer, T., Gally, T., Gamrath, G., Gleixner, A., Gottwald, R.L., Hendel, G.,
Koch, T., Lübbecke, M.E., Miltenberger, M., Müller, B., Pfetsch, M.E., Puchert, C., Rehfeldt,
D., Schenker, S., Schwarz, R., Serrano, F., Shinano, Y., Weninger, D., Witt, J.T., Witzig, J.: The
SCIP optimization suite 4.0. Technical Report 17–12, ZIB, Takustr. 7, 14195, Berlin (2017)

Chapter 13
Conclusion and Future Work
13.1
Main Results
In accordance with behaviourism, any animal behaviour based on unconditioned and
conditioning reﬂexes can be controlled or even managed by stimuli in the environ-
ment: attractants (motivational reinforcement) and repellents (motivational punish-
ment). In the meanwhile, there are the following two main stages in reactions to
stimuli: sensing (perceiving signals) and motoring (appropriate direct reactions to
signals). In this book, the strict limits of behaviourism have been studied from the
point of view of symbolic logic and algebraic mathematics: How far can animal
behaviours be controlled by the topology of stimuli? In other words, how far can we
design unconventional computers on the basis of animal reactions to stimuli?
On the one hand, we can try to design reversible logic gates in which the number
of inputs is the same as the number of outputs. In our case, the behaviouristic stimuli
for swarms are inputs and appropriate reactions of swarms at the motoring stage
are outputs. It means that behaviourism can hold true, indeed. Nevertheless, on the
other hand, at the sensing stage the same signal can be perceived so differently. The
problem is that at the sensing stage even each unicellular organism can be regarded
as a logic gate in which the number of outputs (means of perceiving signals) greatly
exceeds the number of inputs (signals). It is connected to actin ﬁlament networks
and other subcellular protein mechanisms perceiving the stimuli to react to them
in various ways in accordance with the needs and tasks of the cell at the current
moment. As a consequence, even one cell can resist outside inﬂuences. Hence, we
face some strict biological limits in applying behaviourism. From the standpoint of
symbolic logic and algebraic mathematics, this means that we cannot examine ani-
mal behaviours as conventional spatial algorithms, such as Kolmogorov-Uspensky
machines. The mathematics of animal behaviours is much more complicated. The
matter is that we should know how logical-mathematically we can design logic gates
in which the number of inputs is far exceeded by the number of outputs. The uni-
verse of such incorrect mathematical “functions” is known for mathematicians well
© Springer International Publishing AG, part of Springer Nature 2019
A. Schumann, Behaviourism in Studying Swarms: Logical Models of Sensing
and Motoring, Emergence, Complexity and Computation 33,
https://doi.org/10.1007/978-3-319-91542-5_13
443

444
13
Conclusion and Future Work
and called by them non-well-founded. In this book, some new mathematical tools
for studying the non-well-founded universe of animal behaviours were proposed:
p-adic valued logic, non-Archimedean probability logic, non-Aristotelian syllogis-
tic, context-based games, reﬂexive games.
The main results obtained in this way are as follows:
13.1.1
Morphological Processors
My ideas represented in this book have been in line with morphological proces-
sors within the project Physarum Chip: Growing Computers from Slime Mould [1].
These processors compute by conﬁgurations of protoplasmic networks of Physarum
polycephalum. But the same processors can be designed on a medium of different
swarms—the logic will be the same, only the chemistry will vary. In the morpho-
logical processors, data are represented as a spatial conﬁguration of attractants and
repellents. Halting of computation is detected by stable state aided by compress-
ibility changes as proposed and experimentally demonstrated in [2]. In the project
Physarum Chip: Growing Computers from Slime Mould the results of computation
were programmed by morphology of the slime mould. The morphological proces-
sors can implement p-adic arithmetics if the swarm can see not more than p −1
attractants at each step of its propagation at all places of its directions [3]. In case
the swarm can be well controlled in its motions (by using repellents or by distribut-
ing attractants on a nutrient-poor substrate in the case of Physarum polycephalum),
functions on ﬁnite p-adic integers can be implemented, i.e. we deal with standard
arithmetics [4]. In case the swarm moves massive-parallelly (e.g. Physarum poly-
cephalum moves on a nutrient-rich substrate or many attractants are localized near
each other) functions on inﬁnite p-adic integers can be implemented, i.e. we deal
with non-Archimedean metrics [4]. The morphological processors solve a substantial
range of problems from graph optimisation (e.g. shortest path, spanning trees, trans-
port networks, space exploration, risk averse behaviour), combinatorial optimisation
(Travelling Salesman Problem), and computational geometry (e.g. tessellations, tri-
angulations, hulls) and collision-based computing (e.g. ballistic logical gates).
The morphological processors are parallel: the data space is explored by numer-
ous growth cones simultaneously. These processors can implement concurrent and
context-based games [5, 6]. So, they can be used as universal behavioural models for
simulating group or swarm behaviour [4]. The time complexity of the computation
is determined by a diameter of the physical data set. Thus, in the case of Physarum
polycephalum a computation of one problem can proceed for days if a size of the data
set is tens of centimetres. The processors can be scaled down only to a one element
of data per square centimetre. The morphological processors are not reusable, but
can be sequentially arranged for more complex applications.
In this book, I have proposed different ways of designing reversible logic gates
for morphological processors using controlling stimuli such as attractants and repel-
lents. Repellents are needed because of uncertainty in the direction of plasmodium

13.1 Main Results
445
propagation to eliminate some directions as unimportant. In this way, we can con-
struct conventional reversible logic gates: the CNOT gate, the FREDKIN gate, the
TOFFOLI gate, etc. [7, 8]. Combinations of reversible logic gates are regarded as
matrix multiplications. Nevertheless, the plasmodium in its networking as well as
any other swarm can permanently change its decisions and without repellents we
have an extension of matrix multiplication group theory [9]. Within this extension
we can design unconventional reversible logic gates, where the number of inputs
and outputs is uncertain. For designing logic gates Krzysztof Pancerz and me have
proposed to use Petri net models [10, 11] that can be treated as a high level descrip-
tion. Petri net models enable us to reﬂect propagation of protoplasmic veins of the
plasmodium in consecutive time instants (step by step).
13.1.2
Actin Filament Networks
Morphological processors can be designed on the slime mould due to actin ﬁlament
networks—networks of proteins in the plasmodium. I have proposed artiﬁcial actin
ﬁlament networks where inputs are different stresses and outputs are formations and
destructions of ﬁlaments, on the one hand, and as assemblies and disassemblies of
actin ﬁlament networks, on the other hand. Hence, under different external conditions
we observe dynamic changes in the length of actin ﬁlaments and in the outlook of
ﬁlament networks [12–14]. As we see, the main difference of actin ﬁlament networks
from others including neural networks is that the topology of actin ﬁlament networks
changes in responses to dynamics of external stimuli.
Artiﬁcial actin ﬁlament networks employ transmitting information by means of
building and rebuilding actin ﬁlament networks in responses to dynamics of intra-
cellular and extra-cellular stimuli. Some new processors (ﬁlaments) can appear in
one conditions and they can disappear in other conditions. This system is much more
complex, than artiﬁcial neural networks, where we have a ﬁxed number of processors
(neurons) [12–14].
13.1.3
p-Adic Valued Logic and Arithmetics
Each swarm can be considered a natural fuzzy processor with fuzzy values on the set
of p-adic integers [3, 15, 16]. The point is that in any experiment with the swarm we
deal with attractants which can be placed differently to obtain different topologies
and to induce different transitions of the swarm. If the set A of attractants, involved
into the experiment, has the cardinality number p −1, then any subset of A can
be regarded as a condition for the experiment such as ‘Attractants occupied by the
swarm’. These conditions change during the time, t = 0, 1, 2, . . . , and for the inﬁnite
time, we obtain p-adic integers as values of fuzzy (probability) measures deﬁned on
conditions (properties) of the experiment. This space is a semantics for p-adic valued

446
13
Conclusion and Future Work
fuzzy syllogistic I have constructed for describing the propagation of swarms [15,
17]. This syllogistic can be extended to a p-adic valued logic and p-adic valued
arithmetics. Within this logic I have developed a context-based game theory [18].
All these logical tools can be implemented on plasmodia of Physarum polycephalum
by conventional and unconventional reversible logic gates [8].
I have proposed to use p-adic valued fuzziness and probabilities for measuring
behaviours which cannot be measured additively. Then I have constructed a natural
deductive system for describing all possible experiments with swarms [19]. This
system is p-adic many valued. I have considered possibilities for applying p-adic
valued logic BL∀(see [20, 21]) to the task of designing the morphological processors
on the slime mould. If it is assumed that at any time step t of propagation the slime
mould can discover and reach not more than p −1 attractants, then this behaviour can
be coded in terms of p-adic numbers. As a result, this behaviour implements some
p-adic valued arithmetic circuits and can verify p-adic valued logical propositions.
I have offered two unconventional arithmetic circuits: adder and subtractor deﬁned
on ﬁnite p-adic integers [4]. Adder and subtractor are designed by means of spatial
conﬁgurations of several attractants and repellents which are stimuli for the swarm
behaviour [22]. For instance, the plasmodium could form a network of protoplasmic
veins connecting attractants and original points of the plasmodium. Occupying new
attractants is considered in the way of adders and leaving some attractants because of
repelling is considered in the way of subtracters. On the basis of p-adic adders and
subtractors we can design complex p-adic valued arithmetic circuits within a p-adic
valued logic proposed by me. So, p-adic valued logic and p-adic valued arithmetic
are implementable on swarms (e.g. on plasmodia). In the meanwhile, the Physarum
polycephalum computing on nutrient-poor substrate is expressible by ﬁnite p-adic
integers and the Physarum polycephalum computing on nutrient-rich substrate is
expressible by inﬁnite p-adic integers.
13.1.4
Process-Algebraic Formalization of Swarm Behaviour
and Hybrid Actions
In my research I have been based on process-algebraic formalizations of swarm
behaviour [23–25]. So, I have considered some instructions to program swarms in
terms of process algebra like: add node, remove node, add edge, remove edge [26].
Adding and removing nodes can be implemented through activation and deactivation
of attractants, respectively. Adding and removing edges can be implemented by
means of repellents put in proper places in the space. An activated repellent can
avoid a swarm transition between attractants. Adding and removing edges can change
dynamically over time. To model such a behaviour, I have proposed a high-level
model, based on timed-transition systems. In this model I have deﬁned the following
four basic forms of swarm transitions (motions): direct (direction: a movement
from one point, where the swarm is located, towards another point, where there

13.1 Main Results
447
is a neighbouring attractant), fuse (fusion of two swarms at the point, where they
meet the same attractant), split (splitting the swarm from one active point into two
active points, where two neighbouring attractants with a similar power of intensity
are located), and repel (repelling of swarm or inaction). In swarm motions, we can
perceive some ambiguity inﬂuencing on exact anticipation of states of swarms in
time. In the case of splitting, there is some uncertainty in determining next active
points (attractants occupied by the swarm), if a given active point is known. This
uncertainty does not occur in the case of direction, where the next active point is
uniquely determined. To model ambiguity in anticipation of states of swarms, I
propose to use some tools of non-well-founded mathematics and their extensions:
rough set theory (together with [27]) and some extensions of concurrent calculi [18].
I have deﬁned an extension of process algebra [18], where simple actions of
labelled transition systems cannot be atomic; consequently, their compositions can-
not be inductive. Their informal meaning is that in one simple action we can suppose
the maximum of its modiﬁcations. Such actions are called hybrid. Then I have pro-
posed two formal theories on hybrid actions (the hybrid actions are deﬁned there as
non-well-founded terms and non-well-founded formulas): group theory and Boolean
algebra. The group theory proposed by me can be used as the new design method
to construct reversible logic gates on plasmodia. In this way, we should appeal to
the so-called nonlinear permutation groups. These groups contain non-well-founded
objects such as inﬁnite streams and their families. The theory of non-linear permu-
tation groups can be used for designing reversible logic gates on any behavioural
systems [9]. The simple versions of these gates are represented by logic circuits
constructed on the basis of the performative syllogistic [17, 28–30]. It seems to
be natural for behavioural systems and these circuits have a very high accuracy
in implementing. My general motivation in designing logic circuits in behavioural
systems without repellents is as follows: in this way, we can present behavioural
systems as a calculation process more naturally; we can design devices, where there
are much more outputs than inputs, for performing massive-parallel computations in
the bio-inspired way; we can obtain unconventional (co)algorithms by programming
behavioural systems. For instance, computations on protoplasmic trees are under-
stood as a kind of extension of concurrent processes deﬁned in concurrent games
[5, 6]. This extension is called context-based processes and they are deﬁned in the
theory of context-based games proposed by me [18].
13.1.5
Computations on Trees
Computations on trees are usually represented by spatial algorithms like Kolmo-
gorov-Uspensky machines [31]. Theoretically, Turing machines, Kolmogorov-
Uspensky
machines,
Schönhage’s
storage
modiﬁcation
machines,
and
random-accessmachineshavethesameexpressibilitypower.Unfortunately,thecom-
putational power of their implementations on swarms is too low [26]. To make com-
putations on trees more expressive I have proposed the performative syllogistic—a

448
13
Conclusion and Future Work
syllogistic system of propagation [17, 28–30]. This system can logically simulate
a massive-parallel behaviour in the propagation of collectives of Trematode larvae
(miracidia and cercariae) and other swarms. While the Aristotelian syllogistic may
describe concrete directions of swarm spatial expansions, the performative syllogis-
tic proposed by me may describe swarm simultaneous propagations in all directions.
Therefore, while for the implementation of Aristotelian syllogistic we need repel-
lents to avoid some possibilities in the swarm propagations, for the implementation
of performative syllogistic we do not need them. The performative syllogistic has a
p-adic valued semantics and satisﬁes p-adic valued probabilities. In the performative
syllogistic we can build non-well-founded trees for which there cannot be logical
atoms. This theory is much more expressive than standard spatial algorithms in sim-
ulating the swarm motions. The syllogistic can be extended to a more general theory
of context-based games. Within this theory we can deﬁne algorithms for computing
on trees. Computations on trees are treated as an extension of concurrent processes
deﬁned in concurrent games proposed by Samson Abramsky [32]. This extension is
called context-based processes [18].
13.1.6
Neural Properties of Swarm Behavioural Patterns
There are two main properties of neural networks: lateral activation and lateral inhibi-
tion.Thesamepropertiesareobservedinswarmnetworks[33, 34].Ihavegeneralized
my studies of lateral inhibition effects in the swarm behaviour in the way of con-
structing new syllogistics and modal logics. So, I have shown that there are two main
possibilities of pairwise comparisons analysis in computer science: ﬁrst, pairwise
comparisons within a lattice, in this case these comparisons can be measurable by
numbers (this one corresponds to lateral inhibition); second, comparisons beyond any
lattice, in this case these comparisons cannot be measurable in principle (this one cor-
responds to lateral activation of neural networks). I have shown that the ﬁrst approach
to pairwise comparisons analysis is based on the conventional square of opposition
and its generalization, but the second approach is based on unconventional squares
of opposition [34]. Furthermore, the ﬁrst approach corresponds to lateral inhibition
in transmission signals and the second approach corresponds to lateral activation in
transmission signals. For combining lateral inhibition and lateral activation in the
same behaviour I have introduced the notion of the so-called context-based games to
describe rationality of swarms. In these games we assume that, ﬁrst, strategies can
change permanently, second, players cannot be deﬁned as individuals performing
just one action at each time step. They can perform many actions simultaneously.
Under favourable conditions the swarm has lateral activation effects and under stress
conditions the swarm has lateral inhibition effects. I have shown that modal logic K
corresponds to the lateral inhibition property, but, as I have demonstrated, we can
construct new modal logics, dual to K, for embodying the lateral activation property
[33].

13.1 Main Results
449
13.1.7
Bio-inspired Games
The universe, where each swarm lives, consists of cells possessing different topolog-
ical properties according to the intensity of chemo-attractants and chemo-repellents.
The intensity entails the natural or geographical neighbourhood of the set’s elements
in accordance with the spreading of attractants or repellents. As a result, we obtain
Voronoi cells. In this structure we can implement cellular automata. Taking into
account the fact that each swarm is very sensitive to the environment and can change
its strategies we can extent the standard notion of cellular automata and assume
that transition rules can change in an appropriate neighbourhood in accordance with
some outer conditions at time step t = 0, 1, 2, . . . The swarm implements cellu-
lar automata with changing transition rules. Within these automata we can deﬁne
context-based games.
I have proposed a bio-inspired game theory on plasmodia, i.e. an experimental
game theory, where all basic deﬁnitions are veriﬁed in the experiments with swarms,
such as Physarum polycephalum and Badhamia utricularis [5, 6, 35]. Any swarm
can serve as a model for concurrent games and context-based games. In context-based
games, players can move concurrently as well as in concurrent games, but the set of
actions is ever inﬁnite. In our experiments, we follow the following interpretations of
basic entities: (i) attractants as payoffs; (ii) attractants occupied by the swarm as states
of the game; (iii) active zones of swarm as players; (iv) logic gates for behaviours as
moves (available actions) for the players; (v) a propagation of swarm as the transition
table which associates, with a given set of states and a given move of the players, the
set of states resulting from that move. In games of Physarum polycephalum and Bad-
hamia utricularis we can demonstrate creativity of primitive biological substrates of
plasmodia. The point is that plasmodia do not strictly follow spatial algorithms like
Kolmogorov-Uspensky machines, but perform many additional actions. So, the plas-
modium behaviour can be formalized within strong extensions of spatial algorithms,
e.g. within concurrent games or context-based games.
13.1.8
Chemical Interface
In moving, the plasmodium switches its direction or even multiplies in accordance
with different bio-signals attracting or repelling its motions, e.g. in accordance with
pheromones of bacterial food, which attract the plasmodium, and high-salt concen-
trations, which repel it. So, the plasmodium motions can be controlled by different
topologies of attractants and repellents so that the plasmodium can be considered
a programmable biological device in the form of a timed-transition system, where
attractants and repellents determine the set of all plasmodium transitions. Further-
more, we can deﬁne p-adic probabilities on these transitions and, using them, we
can deﬁne a knowledge state of plasmodium and its game strategy in occupying
attractants as payoffs for the plasmodium. We can regard the task of controlling the

450
13
Conclusion and Future Work
plasmodium motions as a game and we can design different interfaces in a game-
theoretic setting for the controllers of plasmodium transitions by chemical signals
[36, 37].
In the universe of 5-adic integers, I have simulated the motions of Physarum
polycephalum and Badhamia utricularis by the game of Go [17, 38, 39]. I have
considered two syllogistic systems implemented as Go games: the Aristotelian syl-
logistic and performative syllogistic. In the Aristotelian syllogistic, the locations
of black and white stones are understood as locations of attractants and repellents,
respectively. In the performative syllogistic, we consider the locations of black stones
as locations of attractants occupied by plasmodia of Physarum polycephalum and
the locations of white stones as locations of attractants occupied by plasmodia of
Badhamia utricularis. The Aristotelian syllogistic version of Go game is a coalition
game. The performative syllogistic version of Go game is an antagonistic game.
13.1.9
Reﬂexive Games
Within payoff cellular automata I have formalized reﬂexive games as an extension
of bio-inspired games. These games can explain the decision-making behaviour in
cases of hidden processes such as log-rolling, side-payments and package-deals. In
reﬂexive games I should see the maximum of different paths in decision making
including straight and non-straight paths. Meanwhile I should know which paths
are chosen by my opponents and take them into account, but my paths should be
hidden and unseen by opponents [40–43]. Therefore straight paths are always an
epic failure in reﬂexive games. Thus, the logic of reﬂexive decision-making should
be constructed on the greatest ﬁxed points, i.e. on non-well-founded (coinductive)
data. This logic is built on non-Archimedean lattices [41, 42]. In reﬂexive games,
we appeal to the following game-theoretic assumptions:
• Each game can become inﬁnite, because its rules can change.
• Players can possess different levels of reﬂexion: one player can know all informa-
tion about another, but the second may know only false announcements from the
ﬁrst.
• Some utilities can have symbolic meanings. These meanings are results of players
accepting symbolic values. The higher the symbolism of payoffs, the higher the
level of reﬂexion of appropriate players. At the zero level of reﬂexion, the payoffs
do not have symbolic meanings at all. For consensus the players are looking for
joint symbolic meanings.
• Resistancepointsforplayersarereducedtothepayoffsatthezerolevelofreﬂexion.
• The joint symbolic meanings can change throughout the game if a player increases
his/her level of reﬂexion.
• For any game there is performative efﬁciency, where all symbolic meanings of one
player are shared by other players.

13.1 Main Results
451
We can use probability measures deﬁned on streams (e.g. on hypernumbers and
p-adic numbers) for simulating reﬂexive games. In particular, it can be proved that
Aumann’s agreement theorem does not hold for these probabilities. Instead of this
theorem, there is a statement called the reﬂexion disagreement theorem [41, 42].
Based on this theorem, probabilistic and knowledge conditions can be deﬁned for
reﬂexive games at various reﬂexion levels up to the inﬁnite level. This new statement
can be proven if we change some of the standard philosophical presuppositions
in game theory for the following new assumptions: each rational agent can cheat
(disagree in his heart with) other rational agents, no player can know everything
prior to the game, each agent can try to foresee the knowledge (beliefs) of his/her
opponents and manipulate them, therefore a common knowledge does not mean that
an agent will agree with or be completely predictable to all others. The reﬂection
disagreement theorem is valid for the inﬁnite metagame in Howard’s meaning [44]
and for the reﬂexive game of inﬁnite level in Lefebvre’s meaning [45].
An opponent’s decision-making can be managed by means of suggestions to
him/her of some foundations from which (s)he could logically infer decisions
favourabletous.Suchaprocessofsuggestingfoundationsforanopponent’sdecision-
making is called reﬂexive management. Reﬂexive management can be performed by
means of stating false information about a state of affairs (creation of false objects),
by means of suggesting an opponent’s purposes (provocations and intrigues, acts
of terrorism and ideological diversions), or by means of suggesting decisions (false
advice). A reﬂexive game is probable only in a case where agents can reach per-
formative equilibrium—they can act concordantly at reﬂexion levels n > 0. This
condition is fulﬁlled in the case where there are mechanisms of intercommunication
broadly agreed upon among people. These mechanisms have been preserved within
an appropriate discourse community (Kommunikationsgemeinschaft), in the mean-
ing of Karl-Otto Apel (1922–2017), shared by members with a suitable degree of
discursive expertise (i.e. members possess one or more genres in the communica-
tive furtherance of its aims and know a speciﬁc lexis) and with a degree of relevant
content to provide information and feedback.
Any discourse community represents a group of people who are in permanent
interactions with each other and exchange performative propositions. This com-
munity is self-organized. Due to common discourse it can reach an informational
equilibrium, and also a parity of creative reasoning as well as emotional consensus in
interchanging performative propositions. Members of a discourse community have
a common speech competence (Sprachkompetenz), in the meaning of Apel, sufﬁ-
cient for interactions. Let us recall that speech competence as such is comprehended
neither by members of a discourse community, nor by outside agents, but its pos-
session is a necessary condition for entry into an appropriate discourse community.
Speech competence is understood as the knowledge and ability to use language in
accordance with different contexts. Thus, modeling by speech competence is a key
notion for managing a discourse community. In reﬂexive games both conﬂicting
parties simulate reasoning as well as emotional reactions of each other and aspire to
foreseethem.Thisreasoningandthesereactions,whichweexpectfromourinterlocu-
tor/opponent, are called perlocutionary effects of our dialogue. Let us recall that any

452
13
Conclusion and Future Work
dialogue has three levels: locutionary (information expressed in verbal or non-verbal
exposition of states of affairs), illocutionary (cognitive and emotional estimations
of the considered information), perlocutionary (effects of cognitive and emotional
estimations of interlocutors/opponents) [46]. What will be the perlocutionary effects
of our utterance, we do not know, but we try to foresee them. The situation where
my cognitive estimations and feelings are not transparent for my interlocutor, while
his/her cognitive estimations and feelings are transparent for me, shows that my
level of reﬂexion is higher than my interlocutor’s. Thus, reﬂexive management can
be formally described within illocutionary logic, the logic studying perlocutionary
effects as a part of illocutionary acts [47]. Whenever a speaker utters a sentence in
an appropriate context with certain intentions, he performs one or more illocutionary
acts. The simple illocutionary act is denoted by E(ϕ). This denotation means that
each simple illocutionary act can be regarded as consisting of an illocutionary force
E and a propositional content ϕ. For example, the utterance ‘I promise you (E) to
come (ϕ)’ has such a structure. Composite illocutionary acts are formed from simple
illocutionary acts non-inductively [42].
The formal system of illocutionary logic proposed in my work is a modal logic
with an inﬁnitely large number of modal operators of the form E. This logic has non-
well-founded syntax and semantics. The point is that its formulas and their meanings
are presented by inﬁnite streams. This logic is an extension of non-Archimedean
many-valued fuzzy and probability logic [42]. Illocutionary logic, as it is deﬁned
in my work, deals with self-referent notions such as reﬂexion, mental accounting,
cognitive biases and it focuses on non-equilibrium states. This logic puts emphasis
on social relations among people, where valuations and illocutionary forces are more
important in human interactions than facts. Due to the digitization of our life-world
(e.g. the Internet and new media), we have many more opportunities to share our
interests, activities, and backgrounds. For example, online social networking services
such as Facebook consisting of representations of users by their proﬁles extend real-
life connections among people signiﬁcantly. As a consequence, Russellian semantics
accepting only factual propositions is losing its function in our everyday life. It is
assumed in my work that subjective meanings, illocutionary forces and perlocution-
ary effects are more important now in perceiving any kind of information than pure
facts. For example, an event can be perceived as more important and more ‘real’ if
it gets more ‘like’ on Facebook. Propositions about this event will more likely be
accepted as successful utterances.
Illocutionary logic as a theory of performative propositions, self-reference, and
reﬂexing in games and decisions describes the illocutionary reality in which the focus
lies exclusively on the logical structure of human activities with reﬂexion.

13.2 Designing a Protein Monster as Future Work
453
13.2
Designing a Protein Monster as Future Work
13.2.1
Main Objectives
Hence, we assume that it is possible to design the so-called protein robot (biological
computer) as an artiﬁcial protein broth (metacell) that can effectively solve different
logistic tasks (orientation, transition, food transporting, etc.), please compare to [48,
49]. This robot will be designed on the basis of actin ﬁlament networks [50–53].
The point is that in accordance with our preliminary results the swarm intelligence
which is responsible for effective solutions of logistic tasks for different swarms from
social bacteria to social insects and even mammals is based on some properties of
actin ﬁlaments which are involved into bio-chemical mechanisms of attracting and
repelling the organism movements. Attractants and repellents stimulate the directed
movement of swarms towards and away from the stimulus, respectively. Various
compounds can act as attractants and repellents and they are different for different
swarms. For the social bacteria, nutrients (including sugars, such as maltose, ribose,
galactose, and amino acids, such as L-aspartate and L-serine) are attractants and some
chemical conditions damaging to bacteria (including the high concentration of salts
or weak acids) are their repellents. For different insects, there are many different sex
attractants produced by males or females as well as feeding stimulants and attractants
produced by plants and there are many different repellents produced by arthopods or
repellents found in plants. So, on the one hand, attractants and repellents for different
swarms are different, but, on the other hand, their functions in stimulating animal
behaviours are the same. In the meanwhile, we know that attractants and repellents
are external stimuli for assemblies and disassemblies of actin ﬁlament waves. Hence,
at the level of one cell we deal with the same attracting and repelling due to actin
ﬁlaments.
Thus, if a protein robot is possible indeed, it will be built up on using actin ﬁlament
networks. We are going to develop an artiﬁcial actin ﬁlament networks (AAFN) with
ﬁnding computational tasks for AAFN, such as information processing, controlling
processes of Big Data, navigation, vision recognition, etc. The AAFN can ﬁnd a
huge number of different commercial and societal applications. The matter is that
AAFN is a high generalization of artiﬁcial neural networks and it can be used more
effectively than the latter. We are going to represent AAFN as a new game theory
that can be applied, for instance, in formalization of court processes within e-justice.
13.2.2
Previous Project and Preliminary Results
In the project Physarum Chip: Growing Computers from Slime Mould [1] (for short:
PhyChip project), we have studied Physarum polycephalum known as the slime
mould. Physarum polycephalum reacts to attractants by the plasmodium growing
towards nutrients and building the network structure for transporting the food pieces.

454
13
Conclusion and Future Work
The network architecture of Physarum polycephalum is highly dynamic, but it can
be managed by localizations of nutrients [54–56]. In our project, we have built some
biomorphic computing devices operated by plasmodia of Physarum polycephalum.
In these devices we have combined the self-assembled and fault-tolerant networks
of plasmodia with conventional electronic components into a hybrid chip, called the
Physarum Chip. This chip can solve the following tasks: (i) plane tessellation, con-
cave and convex hull in computational geometry; (ii) contouring, ﬁltering, erosion,
dilation in image processing; (iii) proximity graphs, spanning trees, triangulations in
graph theory; (iv) p-adic arithmetic circuits in formal arithmetics; (v) universal log-
ical circuits as well as storage modiﬁcation machines (Kolmogorov and Schoenhage
machines) in logics. The Physarum Chip is a network of processing elements consist-
ing of protoplasmic tubes (i) coated with conductive substances as fast information
channels and (ii) acting as a decentralized non-linear transducer of information. It
has different parallel inputs (optical, chemo- and electro-based) and different out-
puts (reactions). It is worth noting that Physarum Chip is a ﬁrst step in bio-physical
modeling future nano-chips based on biomorphic mineralisation.
So, in the PhyChip project we have obtained a mathematics that is suitable for
programming the behaviour of plasmodia (my part of responsibility in the project).
Now we can extend this mathematics to a general theory of AAFN as a theory of
massive-parallel behaviour of appearing and disappearing agents with a permanent
changing of topology of their links. The innovation idea proposed in the new project
will concern programming Big Data structures and representing them as a calcu-
lation process. Actin ﬁlaments will be a bio-inspired model of Big Data structure.
Our results will be summarized as a new game theory suitable for modelling com-
munication networks of millions mobile agents. These results can be used in market
analysis, in Web mining and so on. Usually, if someone deals with Big Data, (s)he
appeals to some statistic tools such as random graphs. We are going to propose some
logical-algebraic tools for analysis Big Data within the AAFN. The main advantage
of such tools is that they can be applied in programming Big Data.
13.2.3
Concreteness and Pertinence of the Objective
In the PhyChip project we have found out that the plasmodium behaviour has the
same algorithms of attracting and repelling as any swarm behaviour. For example, a
prokaryote, a one-cell organism that lacks a membrane-bound nucleus (karyon), can
build colonies and transmit attracting and repelling signals within the quorum sensing
to react collectively. Human beings, such as pedestrians, can also exhibit a swarm
behaviour like a ﬂocking or schooling: we prefer to avoid a person conditionally
designated by us as a possible predator and if a substantial part of the group (not less
than 5%) changes the direction, then the rest follows the new direction.
It is known that any swarm can be controlled by replacing stimuli: attractants and
repellents what we have studied in the PhyChip project, therefore we can design logic
circuits based on topology of stimuli. In one of our preliminary researches we have

13.2 Designing a Protein Monster as Future Work
455
found out that alcohol-dependent humans embody a version of swarm intelligence,
also, to optimize the alcohol-drinking behaviour (these results were obtained jointly
with the psychotherapist Vadim Fris on the basis of the Health Centre “Iscelenie” in
Minsk, we have discovered 107 addicted people).
Thus, we have seen that the model of intelligent behaviour in reacting to external
stimuli (attractants and repellents) and embodied in any swarm can be simulated by
the plasmodia of Physarum polycephalum, the unicellular organism. It means that
the subcellular mechanism of assembling and disassembling actin ﬁlament waves in
reacting to attractants and repellents is enough for studying the intelligent reactions
to external stimuli mathematically and logically. This mechanism is repeated then at
the level of bioﬁlms, many-cellular organisms, ant nests, swarms of naked mole-rats,
swarms of humans under the conditions of escape panic, etc. For different instances
of swarm behaviour, we detect different attractants and repellents chemically and
biologically, but their mathematical and logical mechanism remains unchanged. So,
it is enough for us to construct the AAFN to know how to design protein robots.
Furthermore, at the level of actin ﬁlaments we deal with the following two main
mechanisms of swarm intelligence in rout optimizations: (i) lateral activation (LA)
as structuring a network so that some units activate their neighbours to decrease
their own responses and (ii) lateral inhibition (LI) as structuring a network so that
some units inhibit their neighbours in proportion to their own excitation. Thus, the
bio-chemical model of actin ﬁlament networks is fundamental for all swarms: from
bacteria to humans, because LA and LI in responses to stimuli (it is the main way to
optimize logistics) are incorporated at the subcellular level of actin ﬁlaments.
In machine learning there have been used some biologically inspired networks
such as artiﬁcial neural networks, where we have a ﬁxed number of proces-
sors involved into computations. So, in neural networks we deal with a system
⟨N, V, w⟩, where N is the set of processors called “neurons”, V is a set of tuples
{(i, j): i, j ∈N} whose elements are connections between neuron i and neuron j,
and w is a function from V to R such that w((i, j)), for short wi, j, is called the
weight of the connection between neuron i and neuron j. Nevertheless, elementary
computational units (processors) understood in real biological networks cannot be
ﬁxed. They are being built and rebuilt continuously in responses to external stimuli.
One of the examples of these units is given by actin ﬁlaments used in remodelling
cell conﬁgurations and in the cell motility.
In the research we are going to propose a mathematical theory of AAFN. This
theory can be applied everywhere where we deal with swarm intelligence. In a sense,
it will be a new approach to supercomputing. Traditional ways of communication
networks do not concern a possibility of interchanging of communication facility
among mobile agents, with a necessity of urgent reorganization of topology. In our
research we are going to propose a general mathematical tool for exposition of com-
munication networks organized with orientation to hierarchy and with application of
such a tool to concrete self-organizing systems in the Web.
First of all, we are planning to formalize the processes of polymerization and
depolymerisation of actin ﬁlaments to control these reactions in building and rebuild-
ing the AAFN. Then we are going to design the AAFN as a mathematical theory

456
13
Conclusion and Future Work
with some applications in designing logic circuits on the basis of proteins. Then we
are going to consider the AAFN as an extension of random graphs theory for mod-
elling Web data to obtain new tools of Web mining for the Internet monitoring with
Big Data. And at the end, we are going to apply the AAFN in designing an e-lawyer
with formalization of concurrent and massive-parallel court processes for supporting
court decisions. All these results can become impacts in robotics and e-justice.
To sum up, we are going to consider all the possible states in the cell deformation
as a form of signal transmission by ﬁlaments. Each deformation state is caused by an
appropriate attractant or repellent. In turn, the mechanical signal generated within the
AAFN is transmitted in different ways according to a kind of the cell deformation.
So, the cell can be regarded as a reversible logic gate which has the same number
of inputs (mechanical stresses implied by attracting or repelling stimuli) and outputs
(stress transmissions by deformation). The form of the cell deformation is a form
of signal transmission. And all these transitions can be coded by p-adic arithmetic
functions.
13.2.4
Expected Impacts
In the PhyChip project for the ﬁrst time the entire biosystem has been integrated
into the electronics and information treating systems. The organism of Physarum
polycephalum has been converted into an architecture called Physarum chip and
consisting of bio-electronic compounds. In continuation of this project we are going
to consider the treatment of information according to a combination of external and
internal conditions at the subcellular level, namely we are going to regard actin
ﬁlaments as an intercellular mechanism of calculation. We expect a realization of
calculations, based on the polymerization and depolymerisation of actin ﬁlaments.
We suppose that it is possible to create an artiﬁcial protein broth (i.e. a protein robot)
which may possess an intelligence ability in the meaning of solving the complex of
various tasks, such as learning, orientation in space, decision making, optimization
in transporting of foods, etc. This artiﬁcial protein broth will consist of actin ﬁla-
ments controlled by us. In the project we propose AAFN which are grounded on a
logical-mathematical formalization of chemical reactions, responsible for control-
ling polymerization and depolymerisation of actin ﬁlaments. This research will be a
theoretical part in designing a prototype of protein robot in future.
We are going to apply the AAFN to the information processing under conditions
of Big Data. The AAFN we are going to obtain can be used, ﬁrst, for exposition
of the communication networks organized among mobile agents, communicated in
large groups which can joint higher-order groups, second, for designing such com-
munication networks, with emphasis on ever-ending modiﬁcations of links among
driving agents and under conditions of strong noise. Hence, this theory can be used
in signal processing, controlling processes of Big Data, navigation, vision recog-
nition, time series analysis, stock market prediction, etc. In this respect, this will
be a ﬁrst-time realization of bio-based communication networks for Big Data. The

13.2 Designing a Protein Monster as Future Work
457
AAFN are a massive parallel communicative structure where old agents disappear
and new agents appear. Growing networks of actin ﬁlaments will be used for infor-
mation transmission in terms of potential impact of neuro-morphic processors. Such
processors will have a look of artiﬁcial protein broth. This will change of interface
to optical, chemical, and mechanical at once.
The AAFN will be a mathematical model which can be used more widely than
artiﬁcial neural networks and more effectively. We are going to present the AAFN
as a new game theory—the so-called massive-parallel game theory, where there are
involved millions players with hidden strategies. This game theory we are planning
to build will be used by us for new tools of Web mining—monitoring Web sources
to protect before information warfare in public sphere, and for designing a model
of e-justice. Thus, the realization of AAFN provides the society with new horizons
in robotics (possibility to design robots as protein broths) and in e-democracy. The
PhyChip project has allowed us to design communication networks of plasmodia as
a calculation system (the so-called Physarum Chip). Now it is possible to improve
this result and to obtain the AAFN—a general mathematical theory of biological
reactions to external and internal stimuli at the subcellular and intercellular level.
This theory will be a game theory of massive-parallel behaviours of millions mobile
agents.
First of all, it will be possible to design robots consisting of artiﬁcial proteins.
Then it will be possible to use bio-inspired mathematical tools in designing massive-
parallel communication networks of millions mobile agents. As a societal application
of AAFN, we are going to propose a model of e-justice and a model of Web monitor-
ing. In e-justice we are going to propose a system of electronic trial processes, where
there is a game-theoretic formalization of court processes that allows to program
decision making in courts (it is really important for the further development and
realization of e-government—digital interacting between government and citizens,
government and ﬁrms, government and employees, and also between government
and governments). Notice that e-justice is an integral part of e-democracy. E-justice
is the higher form of justice, because it protects a transparency and logicality of court
judgments. Within the AAFN we are going to design a version of e-lawyer with a
possibility to make court processes electronically with a mechanization of decisions
on the basis of documents, data, and existing laws. Also, we are going to apply our
game-theoretic model for monitoring Web sources to protect before information war-
fare in public sphere. Reﬂexive management tools which can be proposed by us can
support a more efﬁcient and effective government management within the so-called
e-government, to transform relations with citizens, businesses, and other arms of
government, aiming at less corruption, increased transparency, greater convenience,
and cost reductions. Reﬂexive management in public communication can allow us
to ﬁnd new forms of e-democracy. In case a reﬂexive game is carried out when we
have disclosed all the hidden agents (corporations, companies, institutes), success in
a reﬂexive game can be reached by a purposeful modiﬁcation of some components
of a controlled system.
The impact of the project results on the development of the research ﬁeld and
scientiﬁc discipline is divided into the following groups: (i) new methods of Web data

458
13
Conclusion and Future Work
mining and Big Data analysis for automatic monitoring of public sources concerning
national interests; (ii) new methods of reﬂexive management in information warfare
in public sphere, (iii) new methods of reﬂexive management in e-democracy. The
main outcomes of our project: a real-time process control for analytics in the public
sphere, scaling up analytics to gain insights from Big Data, it is possible to design
a platform for the automatic analysis of the incoming data in real time to make
correlations for grouping data and to produce insights and conclusions.
References
1. Adamatzky, A., Erokhin, V., Grube, M., Schubert, T., Schumann, A.: Physarum chip project:
growing computers from slime mould. Int. J. Unconv. Comput. 8(4), 319–323 (2012)
2. Adamatzky, A., Jones, J.: On using compressibility to detect when slime mould completed
computation. Complexity 21(5), 162–175 (2016)
3. Schumann, A.: p-Adic valued models of swarm behaviour. AIP Conf. Proc. 1863(1), 360,009
(2017). https://doi.org/10.1063/1.4992538
4. Schumann, A.: Group theory and p-adic valued models of swarm behaviour. Math. Method
Appl. Sci. https://doi.org/10.1002/mma.4540
5. Schumann, A., Pancerz, K., Adamatzky, A., Grube, M.: Bio-inspired game theory: the case
of Physarum polycephalum. In: Suzuki, J., Nakano (eds.) Proceedings of the 8th International
Conference on Bio-inspired Information and Communications Technologies (BICT’2014), pp.
9–16. Boston, Massachusetts, USA (2014)
6. Schumann, A., Pancerz, K., Adamatzky, A., Grube, M.: Context-based games and Physarum
polycephalum as simulation model. In: Proceedings of the Workshop on Unconventional Com-
putation in Europe. London, UK (2014)
7. Schumann, A.: Reversible logic gates on Physarum polycephalum. AIP Conf. Proc. 1648(1),
580,011 (2015). https://doi.org/10.1063/1.4912819
8. Schumann, A.: Conventional and unconventional reversible logic gates on Physarum poly-
cephalum. Int. J. Parallel Emerg. Distrib. Syst. 32(2), 218–231 (2017). https://doi.org/10.1080/
17445760.2015.1068775
9. Schumann, A.: Non-linear permutation groups on Physarum polycephalum. In: The 2014 2nd
International Conference on Systems and Informatics (ICSAI 2014), pp. 246–251. Shanghai
(2014)
10. Schumann, A., Pancerz, K.: Towards an object-oriented programming language for Physarum
polycephalum computing: a Petri net model approach. Fundam. Inform. 133(2–3), 271–285
(2014)
11. Schumann, A., Pancerz, K.: Petri net models of simple rule-based systems for programming
Physarum machines: extended abstract. In: Z. Suraj, L. Czaja (eds.) Proceedings of the 24th
International Workshop on Concurrency, Speciﬁcation and Programming (CS&P’2015), vol. 2,
pp. 155–160. Rzeszow, Poland (2015)
12. Schumann, A.: Toward a computational model of actin ﬁlament networks. In: Proceedings of
the 9th International Joint Conference on Biomedical Engineering Systems and Technologies
(BIOSTEC 2016)—Volume 4: BIOSIGNALS, Rome, Italy, 21–23 February, 2016, pp. 290–297
(2016). https://doi.org/10.5220/0005828902900297
13. Schumann, A.: Decidable and undecidable arithmetic functions in actin ﬁlament networks. J.
Phys. D Appl. Phys. (2017). https://doi.org/10.1088/1361-6463/aa9d7b
14. Schumann, A.: On arithmetic functions in actin ﬁlament networks. In: 10th EAI International
Conference on Bio-inspired Information and Communications Technologies (formerly BIO-
NETICS). ACM (2017). https://doi.org/10.4108/eai.22-3-2017.152402

References
459
15. Schumann, A.: p-Adic valued fuzzyness and experiments with Physarum polycephalum. In:
11th International Conference on Fuzzy Systems and Knowledge Discovery (FSKD), pp. 466–
472. IEEE Xplore (2014)
16. Schumann, A., Adamatzky, A.: The double-slit experiment with Physarum polycephalum and
p-adic valued probabilities and fuzziness. Int. J. General Syst. 44(3), 392–408 (2015)
17. Schumann, A.: Syllogistic versions of go games on Physarum. In: Adamatzky, A. (ed.)
Advances in Physarum Machines: Sensing and Computing with Slime Mould, pp. 651–685.
Springer International Publishing, Cham (2016)
18. Schumann, A.: Towards context-based concurrent formal theories. Parallel Process. Lett. 25,
1540,008 (2015)
19. Schumann, A.: p-Adic valued logical calculi in simulations of the slime mould behaviour.
J. Appl. Non-Class. Log. 25(2), 125–139 (2015). https://doi.org/10.1080/11663081.2015.
1049099
20. Schumann, A.: Non-archimedean fuzzy and probability logic. J. Appl. Non-Class. Log. 18(1),
29–48 (2008)
21. Schumann, A.: Non-archimedean valued extension of logic lπ and p-adic valued extension of
logic bl. J. Uncertain Syst. 4(2), 99–115 (2010)
22. Schumann, A., Pancerz, K.: p-Adic computation with Physarum. In: A. Adamatzky (ed.)
Advances in Physarum Machines: Sensing and Computing with Slime Mould. Emergence,
Complexity and Computation, vol. 21, pp. 619–649. Springer International Publishing (2016)
23. Schumann, A., Adamatzky, A.: Physarum spatial logic. New Math. Nat. Comput. 7(3), 483–498
(2011)
24. Schumann, A., Akimova, L.: Simulating of schistosomatidae (trematoda: Digenea) behavior by
Physarum spatial logic. In: Annals of Computer Science and Information Systems, Volume 1.
Proceedings of the 2013 Federated Conference on Computer Science and Information Systems,
pp. 225–230. IEEE Xplore (2013)
25. Schumann, A., Akimova, L.: Process calculus and illocutionary logic for analyzing the behavior
of schistosomatidae (trematoda: Digenea). In: Pancerz, K., Zaitseva, E. (eds.) Computational
Intelligence, Medicine and Biology: Selected Links, pp. 81–101. Springer International Pub-
lishing, Cham (2015)
26. Schumann, A.: Towards slime mould based computer. New Math. Nat. Comput. 12(2), 97–111
(2016). https://doi.org/10.1142/S1793005716500083
27. Pancerz, K., Schumann, A.: Rough set models of Physarum machines. Int. J. General Syst.
44(3), 314–325 (2015)
28. Schumann, A.: Physarum syllogistic L-systems. In: FUTURE COMPUTING 2014, The Sixth
International Conference on Future Computational Technologies and Applications. ThinkMind
(2014)
29. Schumann, A., Adamatzky, A.: Physarum polycephalum diagrams for syllogistic systems.
IfCoLog J. Log. Appl. 2(1), 35–68 (2015)
30. Schumann, A., Akimova, L.: Syllogistic system for the propagation of parasites. The case of
schistosomatidae (trematoda: Digenea). Stud. Log. Gramm. Rhetor. 40(53), 303–319 (2015)
31. Adamatzky, A.: Physarum machine: implementation of a Kolmogorov-Uspensky machine on
a biological substrate. Parallel Process. Lett. 17(4), 455–467 (2007)
32. Abramsky, S., Mellies, P.A.: Concurrent games and full completeness. In: Proceedings of the
14th Symposium on Logic in Computer Science, pp. 431–442 (1999)
33. Schumann, A., Fris, V.: Swarm intelligence among humans—the case of alcoholics. In: Pro-
ceedings of the 10th International Joint Conference on Biomedical Engineering Systems and
Technologies—Volume 4: BIOSIGNALS, (BIOSTEC 2017), pp. 17–25. ScitePress (2017)
34. Schumann, A., Wole´nski, J.: Two squares of oppositions and their applications in pairwise
comparisons analysis. Fundam. Inform. 144(3–4), 241–254 (2016)
35. Pancerz, K., Schumann, A.: Rough set description of strategy games on Physarum machines. In:
A. Adamatzky (ed.) Advances in Unconventional Computing, Volume 2: Prototypes, Models
and Algorithms. Emergence, Complexity and Computation, vol. 23, pp. 615–636. Springer
International Publishing (2017)

460
13
Conclusion and Future Work
36. Schumann, A., Pancerz: Physarumsoft—a software tool for programming Physarum machines
and simulating Physarum games. In: M. Ganzha, L. Maciaszek, M. Paprzycki (eds.) Pro-
ceedings of the 2015 Federated Conference on Computer Science and Information Systems
(FedCSIS’2015), pp. 607–614. Lodz, Poland (2015)
37. Schumann, A., Pancerz, K.: Interfaces in a game-theoretic setting for controlling the plasmod-
ium motions. In: Proceedings of the 8th International Conference on Bio-inspired Systems and
Signal Processing (BIOSIGNALS’2015), pp. 338–343. Lisbon, Portugal (2015)
38. Schumann, A.: Go games on plasmodia of Physarum polycephalum. In: 2015 Federated Con-
ference on Computer Science and Information Systems, FedCSIS 2015, Lódz, Poland, 13–16
Sept, 2015, pp. 615–626 (2015). https://doi.org/10.15439/2015F236
39. Schumann, A., Pancerz, K.: A rough set version of the go game on Physarum machines. In:
J. Suzuki, T. Nakano, H. Hess (eds.) Proceedings of the 9th International Conference on Bio-
inspired Information and Communications Technologies (BICT’2015), pp. 446–452. New York
City, New York, USA (2015)
40. Schumann, A.: Payoff cellular automata and reﬂexive games. J. Cell. Autom. 9(4), 287–313
(2014)
41. Schumann, A.: Probabilities on streams and reﬂexive games. Oper. Res. Decis. 24(1), 71–96
(2014). https://doi.org/10.5277/ord140105
42. Schumann, A.: Reﬂexive games and non-archimedean probabilities. P-Adic Number Ultrametr.
Anal. Appl. 6(1), 66–79 (2014)
43. Schumann, A.: Reﬂexive games in e-university. In: Proceedings of the Science and Information
Conference (SAI), Science and Information Organization, London, England, 28–30 July, 2015,
Sponsor(s): Nvidia; IEEE; The Future & Emerging Technol FET at the European Comm;
EUREKA; Cambridge Wireless; British Comp Soc; Digital Catapult; Springer; Media Partner
for this conference, 2015 Science and Information Conference (SAI), pp. 770–775 (2015)
44. Howard, N.: General metagames: an extension of the metagame concept. In: Game Theory as
a Theory of Conﬂict Resolution. Reidel, Dordrecht (1974)
45. Lefebvre, V.A.: Lectures on Reﬂexive Game Theory. Leaf & Oaks, Los Angeles (2010)
46. Searle, J.R.: Speech Acts; An Essay in the Philosophy of Language. Cambridge University
Press, Cambridge (1969)
47. Searle, J.R., Vanderveken, D.: Foundations of Illocutionary Logic. Cambridge University Press,
Cambridge (1984)
48. Fechner, G.T.: Elements of psychophysics, vol. 1. Holt, Rinehart and Winston, New York
(1966)
49. Semertzidou, C., Dourvas, N.I., Tsompanas, M.I., Adamatzky, A., Sirakoulis, G.C.: Introducing
chemotaxis to a mobile robot. In: Proceedings of 12th IFIP WG 12.5 International Conference
and Workshops on Artiﬁcial Intelligence Applications and Innovations, AIAI 2016, Thessa-
loniki, Greece, 16–18 Sept, 2016, pp. 396–404 (2016)
50. Alonso-Sanz, R., Adamatzky, A.: Actin automata with memory. Int. J. Bifurc. Chaos 26(1)
(2016)
51. Siccardi, S., Adamatzky, A.: Actin quantum automata: communication and computation in
molecular networks. Nano Commun. Netw. 6(1), 15–27 (2015)
52. Siccardi, S., Adamatzky, A.: Logical gates implemented by solitons at the junctions between
one-dimensional lattices. Int. J. Bifurc. Chaos 26(6), 1650,107 (2016)
53. Siccardi, S., Tuszynski, J.A., Adamatzky, A.: Boolean gates on actin ﬁlaments. Phys. Lett. A
380(1), 88–97 (2016)
54. Mayne, R., Adamatzky, A.: Slime mould foraging behaviour as optically coupled logical oper-
ations. Int. J. General Syst. 44(3), 305–313 (2015). https://doi.org/10.1080/03081079.2014.
997528
55. Shirakawa, T., Sato, H., Ishiguro, S.: Constrcution of living cellular automata using the
Physarum polycephalum. Int. J. General Syst. 44, 292–304 (2015)
56. Shirakawa, T., Yokoyama, K., Yamachiyo, M., Y-p, G., Miyake, Y.: Multi-scaled adaptability
in motility and pattern formation of the Physarum plasmodium 4, 131–138 (2012)

Index
A
Acceptance of performance, 196
Accepted performative state at o, 363
Actin ﬁlament, 29, 40, 41, 249
adhesion, 35
anchoring, 34
bound on both sides, 32
bound on the left, 32
bound on the right, 32
branching, 34
cross-linking, 35
parallel orientation, 34
stable bunches, 29
trees, 29
unstable bunches, 29
Actin ﬁlament chip, 31
Actin ﬁlament network, 27, 30, 48, 453
artiﬁcial, 30, 453
Activator, 80
Addictive behaviour of humans, 327
Additive measure, 284
Additivity, 284
Agent
active, 324, 344
meditative, 324, 344
strong, 322, 340
weak, 322, 340
Alcoholics, 333
Amoeba proteus, 28, 39
cell cortex, 41
contractile vacuole, 40
cytoplasm, 40
ﬁlopodia, 41
food vacuole, 40
lamellipodia, 41
membrane, 40
microvilli, 41
nucleus, 40
stress ﬁbers, 41
Analogue computer, 61
Analogue logic
diss, 440
difference, 438
Analytic proposition, 247
Analytic syllogistic, 248
AND gate, 15
Animal training, 4
Ant colony, 130
Ant Colony Optimization, 127
Ant colony transition system, 130
direction, 130
fusion, 130
repelling, 130
splitting, 130
Ant nest, 330
Ant networking, 427, 428
Archimedean axiom, 165, 225
Aristotelian syllogistic, 246, 290
for ant trails, 317
for lateral inhibition, 254
for plasmodia, 261, 317
for swarms, 253
Artiﬁcial bee colony, 127
Artiﬁcial neural network, 29, 48
Artiﬁcial organism, 31
Artiﬁcial protein monster, 251
Artiﬁcial swarm, 31
Arzelà-Ascoli theorem, 436
Asynchronous sequential logic gates, 108
Atom equivalence, 158
Attractant, 1, 2, 40, 100
Aumann’s Agreement Theorem, 11, 352
Austian semantics, 7
Auto-wave, 80
© Springer International Publishing AG, part of Springer Nature 2019
A. Schumann, Behaviourism in Studying Swarms: Logical Models of Sensing
and Motoring, Emergence, Complexity and Computation 33,
https://doi.org/10.1007/978-3-319-91542-5
461

462
Index
Auto-waves in ecological systems, 80
Auto-waves of aggregated individual plas-
modium, 80
Auto-waves of epidemics, 80
Auto-waves of morphogenesis, 80
Auto-waves of opinion dynamics, 80
Automaton, 74
B
Bacterial Foraging Optimization Algorithm,
127
Badhamia utricularis, 289, 294
Bayes’ theorem, 191
Bee colony, 131
Bee colony transition system, 131
direction, 131
fusion, 131
repelling, 132
splitting, 132
Behaviourism, 2, 73, 104
Belousov-Zhabotinsky reaction, 79, 388
Belousov-Zhabotinsky’s cyclic proofs, 390
Bending deformation, 38
Bio-inspired game, 283, 288
Bio-inspired game theory, 289
Bioﬁlm, 9, 325, 331
Biological computer, 2, 453
Bird ﬂocking, 129
Bisimilarity, 84, 356
Bistable multivibrator, 108
BL-algebra, 167
Bloch sphere, 105, 310
Bolzano-Weierstrass’ theorem, 432
Bounded rationality, 7
Brotherston’s cyclic proofs, 387
C
Canonical mapping, 158
Capital
economic, 284
ﬁnancial, 284
symbolic, 285
Carroll’s diagrams, 256
Cauchy condition, 432
Cauchy criterion, 432, 435
Cauchy-Cantor intersection theorem, 432,
436
Cellular automaton, 82, 96
Character, 75
Characteristica universalis, 74, 250
Chemical machine, 81
Chemotaxis, 3
Chimpanzees, 326
Class of fuzzy subsets, 175
inclusion, 175
intersection, 176
Łukasiewicz’s complement, 176
Łukasiewicz’s intersection, 176
Łukasiewicz’s relative complement, 175
product complement, 176
product intersection, 176
product relative complement, 176
union, 176
Classical mechanics, 217
Classical syllogism, 231
Class of all quantiﬁed fuzzy relations of in-
ﬁnite level, 177
Class of all quantiﬁed fuzzy relations of i-th
level, 177
CNOT gate, 36, 38, 109
Coalgebra, 298, 355
Cognitive bias, 7
invisible gorilla, 413
invisible moonwalking bear, 414
Cognitive heuristics, 8
Coinduction, 84
Coinduction theorem, 84
Coinductive knowledge operator, 365
Coinductive set, 353
Common knowledge, 351, 352
Common knowledge operator K A, 351
Common perlocutionary operator, 367
Comparability, 314
Comparison, 314
Completeness theorem, 184, 187, 206
Computable set, 60
Concurrent game of swarms, 297
action, 297
available action, 297
player, 297
preference relation, 297
transition table, 297
Concurrent Go game, 289
Aristotelian, 290
non-Aristotelian, 294
performative, 294
Conditioning response, 2
Conditioning stimulus, 2
Constructivist rationality, 381
Context-based concurrent Boolean algebra,
307
absorption, 308
annihilator, 309
associativity, 308
commutativity, 308

Index
463
complementation, 309
de Morgan, 309
distributivity, 308
double negation, 309
idempotence, 308
identity, 309
Context-based concurrent group theory, 305
associativity, 305
inverse element, 306
Context-based concurrent processes, 301
Context-based game, 298, 301, 302
Controlled-controlled-NOT gate, 109
Conventional logical square of opposition,
234, 320, 341
Convergence/divergence, 56
Core of mapping, 157
Corecursion, 12
Corecursive function, 251
Coset, 157
Countable additive probability measure, 187
Cross-linking proteins, 34
Cuckoo optimization algorithm, 127
D
Decidable function, 27
Decidable set, 60
Dedekind completeness, 432, 435
Depolymerization, 32
Derivation trace from a state, 385
Diagonalization, 64, 156
Dialogue, 350
illocutionary level, 350
locutionary level, 350
perlocutionary level, 350
Direction, 96, 104, 223
Discourse community, 451
Dolphins, 326
Double-slit experiment, 210, 234
quantum, 210
with particles, 222
with photons, 220
with plasmodia, 223
E
Ecological rationality, 379, 381
Elementary event, 222
Emergency, 128
Emergent computing, 128
Equilibrium in dominant pure strategies, 399
Escape panic, 326
Escherichia coli, 9, 132
Escherichia coli transition system, 132
direction, 132
repelling, 133
repropuction, 133
tumbling, 133
Euclidean cellular automaton, 44
Eusociality, 325
Event, 226
Existential generalization, 246
Existential restriction, 246
F
F-actin, 32, 40, 41, 249
Feedback/recurrent excitation, 56
Feedback/recurrent inhibition, 56
Feedforward excitation, 56
Feedforward inhibition, 56
Fermat’s last theorem, 415
FEYNMAN gate, 109, 111
Filter, 168
Finite trace of derivation, 93
Finite trace of transition system, 92
Finitely additive non-well-founded proba-
bility measure, 359
Finitely additive probability measure, 187,
222
Finitely additive probability measure on hy-
pernumbers, 369
Finitely additive probability measure on p-
adic integers, 364
Finitely additive probability measure on
streams, 363
Finitist Program, 412
Flip Flop, 108
ﬂip, 108
hold value, 109
reset, 108
set, 108
Flip-Flop circuit, 110
Foraging ants, 327
Formal system, 61
Formal theory, 416
Formicidae, 325
Foundations of mathematics
analogue, 412
discrete, 412
Talmudic, 412, 419, 430
Fréchet ﬁlter, 168
FREDKIN gate, 46, 109, 112
Free will, 212
Free will of swarms, 298
Fukomys damarensis, 325
Full Adder, 115

464
Index
Fungi, 147
Fusion, 96, 104, 223
for alcoholics, 336
for ant trails, 317
for plasmodia, 316, 317
Fuzzy ellipsoid, 45
Fuzzy measure, 230
Fuzzy relation, 175
Fuzzy set, 43
Fuzzy sphere, 45
Fuzzy subset, 175
G
G-actin, 31, 41
G-algebra, 168
Game context, 396
Game theory
equilibria, 288
Pareto efﬁciency, 287
payoff, 286
player, 286
rationality of players, 287
resistance point, 287
strategy, 286
Generalization, 184, 187
Generalized assignment problem, 1, 132
German cockroach, 331
Globular actin, 31
Gödel proposition, 64
Gödel’s logic, 167
Grothendieck’s universes, 416
H
Habitus in decision behaviour, 382
Halting set, 60
Heterocephalus glaber, 325
High-level vision, 314
Hilbert’s inference rules, 386
Hinton diagram, 29
Horizontal axioms, 184, 186
Horizontal equivalence, 156
Horizontal quotient set, 158
Hybrid action, 61, 298
Hyper-valued predicate logic BL∀∞, 182
Hypermember, 307
Hypernumber, 168, 368
Hyperrational number, 165, 168
Hyperrational valued Ł  1
2-matrix, 172
Hyperrational valued Ł-matrix, 171
Hyperreal number, 165, 168
Hyperreal valued Ł-matrix, 172
Hyperreal valued Ł 1
2-matrix, 172
Hyperunit, 122, 149, 160, 304, 309
Hypokeimenon, 216
Hypothesis of orchestrated objective reduc-
tion, 65, 66
I
Illocutionary act, 337
Illocutionary logic, 102, 365, 452
for alcoholics, 338
for lateral activation, 345
for lateral inhibition, 341
Individual-collective duality, 209, 223, 225
Induction principle, 210
Inductive function, 136
Inductive set, 225, 353
Inﬁnite trace of derivation, 93
Inﬁnite trace of transition system, 92
Inﬁnite-order class F∞(Dn) of fuzzy sub-
sets, 176
Inﬁnite-order predicate logical language,
178
Inﬁnitely large integer, 165
Inﬁnite-order sequent calculus, 205
Inﬁnitesimal, 165
Informative proposition, 211, 247
Inhibitor, 80
Interactive-computing paradigm, 81
Intuition of objectivity, 216
i + 1-order class Fi+1(Dn) of fuzzy subsets,
176
i-order quantiﬁed fuzzy predicates, 177
i-order quantiﬁed fuzzy relations, 177
J
Judaic hermeneutics
qal wa-h.omer, 421, 423, 430
K
Kabbalistic-Leibnizian automaton, 77
Karl Marx’s economic theory, 285
Kernel equivalence, 157
Knowledge operator, 196, 351, 374
Knowledge state, 195
Knowledge state at ω, 350
Knowledge structure, 195, 350
Kolmogorov-Uspensky machine, 136, 289
L
Labelled transition system, 92, 298, 299

Index
465
event, 299
label, 299
L-algebra, 168
Lateral activation, 9, 56, 105, 252, 280, 314,
318, 324, 327, 335, 342, 413
Lateral excitation, 105
Lateral inhibition, 9, 56, 105, 252, 314, 316,
323, 327, 335, 338, 413
Le´sniewski’s ontology, 243, 245, 317
alphabet, 244
axioms, 246
inference rules, 245
language, 244
non-empty, 246
Level of reﬂexion, 288
Linguistic solipsism, 211, 219
Logical atom, 217, 218, 222
Logical empiricism, 5, 250
Logical physics, 214
Logical positivism, 5, 250
Logic K for preference relation, 338
Logic K′ for preference relation, 342
Logic of trajectories, 87
Low-level vision, 314
Łukasiewicz’s logic, 167
Łukasiewicz’s propositional calculus, 243
M
Mapping diagonaization, 157
Material culture, 326
Maximin strategy, 398
Measurability, 284
Mental accounting, 7
Metagame, 354
ﬁrst level, 354
inﬁnite, 354
Metaswarm, 31
Minimax strategy, 398
Modus ponens, 62, 184, 187, 245, 385
Moore neighbourhood, 385
Morphological processor, 444
Motoring, 2, 443
Müller-Lyer illusion, 327, 328
for ants, 329
for plasmodia, 330, 332
Multiplication, 96, 104, 223
MV -algebra, 171
Myxococcus xanthus, 331
N
Natural mapping, 158
Network of alcoholics, 335
Networking of plasmodium, 316
Noetherian induction, 12
Non-additivity, 225
Non-Archimedean absolute fuzzy probabil-
ity function, 188
Non-Archimedean fuzzy probability, 188
Non-Archimedean metrics, 146, 192
Non-Archimedean relative fuzzy probability
function, 189
Non-linear permutation group, 120, 160
Non-linear string, 147, 149
Non-well-founded algebra of fuzzy subsets,
361
Non-well-founded ensemble probability s-
pace, 195, 230, 361
Non-well-founded fuzzy set, 359
Non-well-founded operation of cardinality,
360
Non-well-founded probability, 360
Non-well-founded universe, 211
Non-well-founded volume, 195, 229, 361
Non-well-funded objectivity, 219
NOT gate, 15, 109
Nucleating proteins, 34
Nucleation, 31
Nutrient-poor concentration, 142
Nutrient-rich concentration, 142
O
Object-oriented programming language for
controlling swarms, 14
Object-oriented programming of actin ﬁla-
ment networks, 30
direct, 30
fuse, 30
repel, 30
split, 30
Observational language, 213
OR gate, 15
Orchestrated objective reduction, 28
Organic memristor, 4
Orientation deformation, 38
Ostrowski’s theorem, 166
Overlapped labelled transition system, 301
Overlapped transition system, 302
Overlapping of two transition systems, 301
P
p-adic ball, 192
p-adic cardinality, 154
p-adic valued BL-matrix, 174
p-adic fuzzy measure, 193

466
Index
p-adic integer, 141, 169, 357
p-adic norm, 192
p-adic probability measure, 194
p-adic probability measure, 193
p-adic probability theory, 11, 166
p-adic r-probability, 193
p-adic r-probability space, 193
p-adic stream, 357
p-adic valued adder, 199
p-adic valued G-algebra, 174
p-adic valued fuzzy logic controller, 237
p-adic valued fuzzy measure, 230
p-adic valued L-algebra, 174
p-adic valued logic BL′∀∞, 185
p-adic valued Ł-matrix, 173
p-adic valued measure, 230
p-adic valued MV -algebra, 173
p-adic valued probability measure, 154, 230
p-adic valued subtracter, 199
Paenibacillus vortex, 9, 133
Paenibacillus vortex transition system, 134
direction, 134, 135
fusion, 135
repelling, 134, 135
repropuction, 134
splitting, 135
tumbling, 134
Pairwise comparison matrices, 314
Pairwise comparisons method, 313
Panpsychism, 251
Paradox of Chevalley and Belzung, 354
Parallel recursion, 298
Parasite propagation, 268
Particle swarm optimization, 127, 129
Particular afﬁrmative proposition, 76
Particular negative proposition, 76
Payoff cellular automata, 396
Peano arithmetic, 412
Pedestrians, 326
Performative efﬁciency, 288
Performative equilibrium, 372, 376, 451
Performative ontology, 248
non-empty, 248
Performative proposition, 7, 102, 212, 247
Performative syllogistic, 232, 248, 294
for ant trails, 318
for lateral activation, 256
for parasite propagation, 274
for plasmodia, 261, 318
for swarms, 256
Performative verb, 338
Perlocutionary act, 337
Perlocutionary effect, 350, 366, 373
Permutation group, 113, 118
non-linear, 118
Petri net models on swarm behaviours, 16
Physarum chip, 4
Physarum diagrams, 258
Physarum polycephalum, 27, 29, 135, 142,
223, 257, 289, 294, 315, 328, 330,
331, 391
Physarum spatial logic, 99
Physicalism, 5, 250
-algebra, 168, 171
π-calculus, 99, 251
Plasmodium, 29
Polymerization, 32
Positive reciprocal matrices, 314
Preference relation, 287, 297, 313, 401
indifference, 401
strict preference, 401
strong preference, 401
weak preference, 401
Probability measure, 166
Probability space, 188
Probability theory, 166
Process algebra, 30, 81, 91
Process calculus, 90, 92, 99, 251
Process calculus of depolymerization, 33
Process calculus of polymerization, 32
Product logic, 167
Program
of
Physarum
Kolmogorov-
Uspensky machine, 137
Program of Physarum random-access ma-
chine, 139
Program of Physarum Schönhage’s storage
modiﬁcation machine, 138
Programmable Logic Controllers, 15
PROMETHEE method, 401
Proof forest, 418
Proof tree, 417
Proof-theoretic cellular automaton, 99, 384
reversible, 385
Proper nonstandard extension, 168, 368
Protein robot, 453
Proto-symbolic interaction, 286
Proto-symbolic meaning, 288
Protoplasmic tube, 100
Pseudopodium, 40
Punishment
negative, 5
positive, 5
p-valued sequent, 200
Q
q-class, 157

Index
467
Quantiﬁed fuzzy predicates of i-th level, 177
Quantiﬁed fuzzy relations of i-th level, 177
Quantum logic, 214
Quantum mechanics, 214
Qubit, 310
R
Radical behaviourism, 4
Random-access machine, 138
Reaction-diffusion computer, 79
Recursive function, 136
Referential proposition, 212
Reﬂex, 2
Reﬂexion disagreement theorem, 353, 368,
370, 451
Reﬂexion of the ﬁrst order, 371
Reﬂexion of the second order, 371
Reﬂexion of the third order, 371
Reﬂexive game, 288, 353, 402, 450
Reﬂexive level, 375
Reﬂexive management, 451
Regular residuated lattice, 167
Reinforcement
negative, 4
positive, 4
Repellent, 1, 2, 40, 100
Repelling, 104, 223
Residuum, 167
Reversible logic gate, 38, 109
Russellian semantics, 6
S
Saddle point, 397
Salmonella typhimurium, 331, 395
Sample space, 166
Schönhage’s storage modiﬁcation machine,
137
Schistosomatidae, 223, 269
cercariae, 268
digeneans, 269
miracidia, 270
Self-reference, 212
Semantics for p-adic valued fuzzy reason-
ing, 235
Sensing, 2, 443
Sequent inference rules, 386
Sequential logic gates, 107
clock edge, 107
hold time, 107
set-up time, 107
switching, 107
venjunction, 107
Sequential model of computation, 81
Sequestering proteins, 34
Severing proteins, 34
Shear deformation, 38
σ-additive probability measure, 187
σ-algebra, 187
σ-ﬁeld, 166
Slime mould, 96, 105, 315, 328, 331
Social behaviour, 325
Social Spider Optimization, 127
Solvable set, 60
Soundness theorem, 206
Spatial uncertainty, 209
Speech competence, 451
Splitting
for alcoholics, 335
for ant trails, 318
for plasmodium, 316
Standard members, 168, 368
Standard set, 168, 368
Stigmergy, 130
Stream, 355
Stream calculus, 356
inverse, 356
product, 356
sum, 356
Strong Ramsey Theorem, 416
Structural functionalism, 326
Substitution rule, 62, 245
Swarm behaviour, 327, 345
Swarm computing, 128
Swarm intelligence, 1
Swarm propagation, 141
Symbolic interactionism, 285, 326
Symbolic meaning, 285, 288
Symbolic values, 285
Synalpheus regalis, 325
Synchronous Physarum automaton, 142
Synchronous sequential circuit, 108
Synthetic ontology, 248
non-empty, 248
Synthetic proposition, 247
Synthetic syllogistic, 248
for lateral activation, 256
for parasite propagation, 274
for swarms, 256
T
Talmudic logic, 419
Temporal uncertainty, 209
Theoretical language, 213
Thurstone’s law of comparative judgment,
313

468
Index
t-norm, 166
TOFFOLI gate, 109, 111
Toussaint hierarchy, 258
Trajectory, 84
bisimulation, 84
constant, 84
derivative, 84
Travelling salesman problem, 1, 130, 132
Treadmilling, 34
Triangle inequality, 432
Trichobilharzia, 223
Trichobilharzia regenti, 270
Trichobilharzia szidati, 269, 272
cercariae, 272
digeneans, 269
miracidia, 271
Tursiops, 326
2-bit controlled-NOT gate, 36, 109
U
Ultrametrics, 146
Ultrapower, 168
Unconditioned response, 2
Unconditioned stimulus, 2
Unconventional computing, 12
Unconventional logical square of opposi-
tion, 323, 344
Undecidable function, 27
Universal afﬁrmative proposition, 76
Universal characteristic, 74
Universal computer, 81
Universal generalization, 245
Universal negative proposition, 76
Universal restriction, 245
Unsolvable function, 27
Ury’s diagrams, 425
V
Vertical axioms, 184, 187
Vertical equivalence, 158
Von Neumann neighbourhood, 385
Voronoi cell, 83, 97, 257, 290
Voronoi diagram, 15, 83, 97, 257
W
Waggle dance, 131
Wave set, 119, 227, 404
radius, 404
Z
Zermelo-Fraenkel set theory, 412
Zero-sum game, 16

