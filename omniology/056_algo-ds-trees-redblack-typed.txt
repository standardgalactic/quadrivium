Data Structures
Red-Black Trees
Design and Analysis 
of Algorithms I

Binary Search Tree Structure
-- exactly one node per key
-- most basic version :
each node has
-- left child pointer
Root
Leaves
p
-- right child pointer
-- parent pointer
SEARCH TREE PROPERTY :
( should hold at every node of the 
search tree )
Toward the root
All keys > x
All keys < x

The Height of a BST
Note : many possible trees for a set of 
keys.
Note : height could be anywhere from
Height = 2
(aka depth) longest 
root-leaf path
Note : height could be anywhere from
to  
Worst case, 
a chain
Best case, 
perfectly 
balanced
Height = 4

Balanced Search Trees
Idea : ensure that height is always O(log(n)) [best possible]
⇒Search / Insert / Delete / Min / Max / Pred / Succ will then run 
in O(log(n)) time   [n = # of keys in tree]
l
d bl
k
[
‘ 2 G ib
S d
i k ‘ 8]
Tim Roughgarden
Example : red-black trees [Bayes ‘72, Guibas-Sedgewick ‘78]
[ see also AUL trees, splay trees, B trees ]

Red-Black Invariants
1. Each node red or black
2. Root is black
3. No 2 reds in a row
[ red node => only black children ]
Tim Roughgarden
[ red node => only black children ]
4. Every root-NULL path has same number of black 
nodes
Like in an 
unsuccessful search

Example #1
Claim : a chain of length 3 cannot be a red-
black tree
Proof
Tim Roughgarden
Proof
1 black node on an 
unsuccessful search 
for 0
2 black 
nodes on an 
unsuccessful 
search for 4

Example #2
Tim Roughgarden

Height Guarantee
Claim : every red-black tree with n nodes has 
height
Proof : Observation : if every root NUL path has >=
Tim Roughgarden
Proof : Observation : if every root-NUL path has >= 
k nodes, then tree includes (at the top) a perfectly 
balanced search tree of depth k-1.
=>  Size n of the tree
must Be at least
[k = 3]

Height Guarantee (con’d)
Story so far : size 
, where k = minimum # of nodes on 
root – NULL path
=>
Thus : in a red-black tree with n nodes, there is a root-NULL path 
Tim Roughgarden
with at most 
black nodes.
By 4th Invariant : every root-NULL path has 
black nodes
By 3rd Invariant : every root-NULL path has
total nodes. 

Which of the search tree operations have to be re-implemented 
so that the Red-Black invariants are maintained?
Search
Delete
Insert and Delete
None of the above

