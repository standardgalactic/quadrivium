@danappleman   danappleman.com
Dan Appleman
Moving Forward – Advanced 
Concepts

What Does “Getting Started” Mean to You?
I know little about programming.
So proceed slowly and keep 
things simple
I’m pretty good with Apex.
So, move fast and leverage what I 
know. I want that JavaScript cert!

Why Are There Advanced Concepts in a 
Getting Started Course?

Closures and IIFEs

It’s a conspiracy!
Closures are everywhere… in 
plain site – where you’ll never 
notice them!

Scenario:
Three functions for error logging
- One for errors
- One for warnings
- One for other information

function delay(message, timeout) {
return new Promise(
function(resolve, reject) {
setTimeout(()=>{ resolve(message); }, timeout);
}
)
}
Inside a Promise

Iterators and Generators


A Generator function is a 
function that returns an 
iterable

function *simpleGenerator()
{
yield 1;
yield 2;
yield 3;
}

let i = simpleGenerator(); // i is an iterator
function *simpleGenerator()
{
yield 1;
yield 2;
yield 3;
}

let i = simpleGenerator();
i.next();
// Returns 1
function *simpleGenerator()
{
yield 1;
yield 2;
yield 3;
}

let i = simpleGenerator();
i.next();
i.next();
// Returns 2
function *simpleGenerator()
{
yield 1;
yield 2;
yield 3;
}

let i = simpleGenerator();
i.next();
i.next();
i.next();
// Returns 3
function *simpleGenerator()
{
yield 1;
yield 2;
yield 3;
}

let i = simpleGenerator();
i.next();
i.next();
i.next();
i.next();
// Done
function *simpleGenerator()
{
yield 1;
yield 2;
yield 3;
}

function runThreeDelays()
{
let i = threeDelays();
function runNext(message)
{
let result = i.next(message);
if(result.done) return;
result.value.then(
(message)=>runNext(message));
}
runNext();
}
function *threeDelays()
{
let result = yield(delay('timeout one', 1000));
console.log(result);
result = yield(delay('timeout two', 2000));
console.log(result);
result = yield(delay('timeout three', 3000));
console.log(result);
}

function runThreeDelays()
{
let i = threeDelays();
function runNext(message)
{
let result = i.next(message);
if(result.done) return;
result.value.then(
(message)=>runNext(message));
}
runNext();
}
function *threeDelays()
{
let result = yield(delay('timeout one', 1000));
console.log(result);
result = yield(delay('timeout two', 2000));
console.log(result);
result = yield(delay('timeout three', 3000));
console.log(result);
}

function runThreeDelays()
{
let i = threeDelays();
function runNext(message)
{
let result = i.next(message);
if(result.done) return;
result.value.then(
(message)=>runNext(message));
}
runNext();
}
function *threeDelays()
{
let result = yield(delay('timeout one', 1000));
console.log(result);
result = yield(delay('timeout two', 2000));
console.log(result);
result = yield(delay('timeout three', 3000));
console.log(result);
}

function runThreeDelays()
{
let i = threeDelays();
function runNext(message)
{
let result = i.next(message);
if(result.done) return;
result.value.then(
(message)=>runNext(message));
}
runNext();
}
function *threeDelays()
{
let result = yield(delay('timeout one', 1000));
console.log(result);
result = yield(delay('timeout two', 2000));
console.log(result);
result = yield(delay('timeout three', 3000));
console.log(result);
}

function runThreeDelays()
{
let i = threeDelays();
function runNext(message)
{
let result = i.next(message);
if(result.done) return;
result.value.then(
(message)=>runNext(message));
}
runNext();
}
function *threeDelays()
{
let result = yield(delay('timeout one', 1000));
console.log(result);
result = yield(delay('timeout two', 2000));
console.log(result);
result = yield(delay('timeout three', 3000));
console.log(result);
}

function runThreeDelays()
{
let i = threeDelays();
function runNext(message)
{
let result = i.next(message);
if(result.done) return;
result.value.then(
(message)=>runNext(message));
}
runNext();
}
function *threeDelays()
{
let result = yield(delay('timeout one', 1000));
console.log(result);
result = yield(delay('timeout two', 2000));
console.log(result);
result = yield(delay('timeout three', 3000));
console.log(result);
}

function runThreeDelays()
{
let i = threeDelays();
function runNext(message)
{
let result = i.next(message);
if(result.done) return;
result.value.then(
(message)=>runNext(message));
}
runNext();
}
function *threeDelays()
{
let result = yield(delay('timeout one', 1000));
console.log(result);
result = yield(delay('timeout two', 2000));
console.log(result);
result = yield(delay('timeout three', 3000));
console.log(result);
}

function runThreeDelays()
{
let i = threeDelays();
function runNext(message)
{
let result = i.next(message);
if(result.done) return;
result.value.then(
(message)=>runNext(message));
}
runNext();
}
function *threeDelays()
{
let result = yield(delay('timeout one', 1000));
console.log(result);
result = yield(delay('timeout two', 2000));
console.log(result);
result = yield(delay('timeout three', 3000));
console.log(result);
}

function runThreeDelays()
{
let i = threeDelays();
function runNext(message)
{
let result = i.next(message);
if(result.done) return;
result.value.then(
(message)=>runNext(message));
}
runNext();
}
function *threeDelays()
{
let result = yield(delay('timeout one', 1000));
console.log(result);
result = yield(delay('timeout two', 2000));
console.log(result);
result = yield(delay('timeout three', 3000));
console.log(result);
}

function runThreeDelays()
{
let i = threeDelays();
function runNext(message)
{
let result = i.next(message);
if(result.done) return;
result.value.then(
(message)=>runNext(message));
}
runNext();
}
function *threeDelays()
{
let result = yield(delay('timeout one', 1000));
console.log(result);
result = yield(delay('timeout two', 2000));
console.log(result);
result = yield(delay('timeout three', 3000));
console.log(result);
}

function runThreeDelays()
{
let i = threeDelays();
function runNext(message)
{
let result = i.next(message);
if(result.done) return;
result.value.then(
(message)=>runNext(message));
}
runNext();
}
function *threeDelays()
{
let result = yield(delay('timeout one', 1000));
console.log(result);
result = yield(delay('timeout two', 2000));
console.log(result);
result = yield(delay('timeout three', 3000));
console.log(result);
}

function runThreeDelays()
{
let i = threeDelays();
function runNext(message)
{
let result = i.next(message);
if(result.done) return;
result.value.then(
(message)=>runNext(message));
}
runNext();
}
function *threeDelays()
{
let result = yield(delay('timeout one', 1000));
console.log(result);
result = yield(delay('timeout two', 2000));
console.log(result);
result = yield(delay('timeout three', 3000));
console.log(result);
}

You may never create a 
generator or iterator
But you will recognize them

Cleaning out the Lint

I like strongly typed 
languages where the 
compiler helps identify 
errors early – at compile 
time, not at runtime
That’s definitely not 
JavaScript

Even compilers miss issues
- Rarely test for best practices
- Salesforce does check Aura and LWC 
JavaScript for some errors
Linters remove fluff from your code
Static code analysis:
- Goes beyond errors to check for best 
practices


Demo
Using ESLint
You can use any SFDX project. This 
project uses the lightning-demo project 
from the module “Exploring JavaScript in 
Lightning Components”



Next Steps and Conclusion

The rules are simple enough, 
but you can spend a lifetime 
learning to play well

“The Principles of Object-Oriented 
JavaScript” 
“Understanding ECMAScript 6: The 
Definitive Guide for JavaScript Developers”
Nicolas C. Zakas




Libraries
Do explore specialized 
libraries such as D3.js
Frameworks
Don’t worry about other 
frameworks and tooling 
(Angular, React, jQuery) 
JavaScript Do’s and Don’ts

