LEARN PYTHON & C++ CODING
The Complete
OVER
F9C 
GUIDES 
&TIPS
& Python
Manual
S Popercut
www.pclpublications.com
100% INDEPENDENT

User Manual
। Ventura
The essential programming manual 
to improve your Python coding skills
The essential manual to mastering 
your MacBook and macOS Ventura
Coding 
Manual
Master Windows 10 on your PC 
with step-by-step tutorials and guides
The essential manual to improve your 
Raspberry Pi coding skills
Photoshop Ughtroom and 
improve your photo editing skills
The Complete
Raspberry
□o&q
The Complete
Python
Coding Manual
Master jrour Nitron a®»« 
one Improve your photographic
BsexiiAo.uios.nrs STuronw^j 
The Complete
Outdoor
Photography
Manual
Nikon,
Camera Manual
ON PHOTOGRAPHY & CAMERAS 
The complete
DESKTOP PC, LAPTOP & SURFACE ■■ 
y The Complete 
Windows 10
The Complete
MacBook
User Manual
Available on
The
lete
to mastering WhatsApp
880
900
890
The Complete
920
W»lpMw 
rual to improvTUg out 
PhotograjSSg§tdf!s
-—MOStd^professiondl technic 
and Improve jr^ur photogrt
The Complete 
Manual Series
The Complete
Photqgrqf
Master yourtdrnera
‘ The Complete
Mac 
User Manual 
Master your Mac and macOS Ventura
The Complete
WhatsApp
Manual
3 Po percut
The Complete 
Cloud 
Computing 
Manual
Master Cloud storage and services 
for home and business
over
e The Complete
Mac
Studio
Manual
Master your Apple Mac Studio & Display
The Complete
Samsung 
Galaxy
Manual "
Master your Samsung Galaxy 
^^^^smaitphone and tablet
The Complete 
Linux 
Coding Manual 
§ 'uW
Master'Linux qnW Improve J/dur 
- ” 'll । ^ur^fd^fbfhmfng Skills 
s ■ TT
— I I I I--T'^---------
For a full list of titles available visit:
www.pclpublications.com

The Complete 
C++ 
& Python 
Manual
Unleash the power of Python and C++
Having a basic knowledge of programming can open many different 
doors for the newcomer to explore. You can gain a better understanding 
of how hardware and software work together, how your computer or 
device functions and how incredible open-world gaming environments are 
converted from ones and zeros to what's on your monitor or TV. 
Technology is everywhere and it's all connected through programming. 
Your TV, microwave, in-car entertainment and the Internet itself are all 
reliant on good programming to make them work the way you want them 
to. Within these pages are the building blocks to help you take your first 
steps into the world of programming. We've taken two of the most 
powerful and versatile programming languages available, Python and C++ 
and broken them down into bite-sized tutorials and guides to help you 
learn how they work, and how to make them work for you.
3 Papercut
www.pclpublications.com

Contents
Contents
Say Hello to Python
8
10
12
14
16
Why Python?
Equipment You Will Need
Getting to Know Python
How to Set Up Python in Windows
How to Set Up Python on a Mac
18 How to Set Up Python in Linux
Getting Started with Python
56 
Date and Time
58 
Opening Files
60 Writing to Files
62 Exceptions
64 Python Graphics
22 Starting Python For the First Time
24
Your First Code
26
Saving and Executing Your Code
Using Modules
28
Executing Code From the Command Line
30
Numbers and Expressions
68
Calendar Module
32
Using Comments
70
OS Module
34
Working with Variables
72
Random Module
36
User Input
74
Tkinter Module
38
Creating Functions
76
Pygame Module
40
Conditions and Loops
80
Create Your Own Modules
42
Python Modules
(86) Say Hello to C++
44) Working with Data
84
Why C++?
46
Lists
86
Equipment Needed
48
Tuples
88
How to Set Up C++ in Windows
50
Dictionaries
90
How to Set Up C++ on a Mac
52
Splitting and Joining Strings
92
How to Set Up C++ in Linux
54
Formatting Strings
94
Other C++ IDEs to Install
4
Python & C++ Coding

r Contents
124) Loops and Decision Making
Raspberry Pi 
& Linux
For more 
great coding 
titles visit us at:
WWW.
pclpublications.com
98 Your First C++Program
100 Structure of a C++Program
102 Compile and Execute
104 Using Comments
106 Variables
108 Data Types
110 Strings
112 C++Maths
114; C++ Input/Output
116 User Interaction
118 Character Literals
120 Defining Constants
122 File Input/Output
126 While Loop
128 For Loop
130 Do... While Loop
132 IfStatement
134 If... Else Statement
136) Working with Code
138 Common Coding Mistakes
140 Beginner Python Mistakes
142 Beginner C++Mistakes
144 Where Next?
www.pclpublications.com
5

Say Hello 
to Python
Python & C++ Coding

Say Hello to Python
There are many different programming 
languages available to learn and use. 
Some are complex and incredibly 
powerful and some are extremely basic 
and used as minor utilities for operating 
systems. Python sits somewhere in the 
middle, combining ease of use with a 
generous helping of power that allows 
the user to create minor utilities, a range 
of excellent games and performance­
heavy computational tasks.
However, there's more to Python than 
simply being another programming 
language. It has a vibrant and lively 
community behind it that shares 
knowledge, code and project ideas; as 
well as bug fixes for future releases. 
It's thanks to this community that the 
language has grown and thrived and now 
it's your turn to take the plunge and learn 
how to program in Python.
The first half of this book helps you 
get started with the latest version of 
Python and from there guide you on how 
to use some of the most common and 
interesting functions and features of the 
language. Before long, you will be able to 
code your own helpful system tools, text 
adventures and even control a character 
as they move around the screen.
8 Why Python?
10 Equipment You Will Need
12 Getting to Know Python
14 How to Set Up Python in Windows
16 How to Set Up Python on a Mac
18 How to Set Up Python in Linux
www.pclpublications.com

Say Hello to Python
Why Python?
There are many different programming languages available for the modern computer, 
and some still available for older 8 and 16-bit computers too. Some of these languages 
are designed for scientific work, others for mobile platforms and such. So why choose 
Python out of all the rest?
PYTHON POWER
Ever since the earliest home computers were available, enthusiasts, users and professionals have toiled away until the wee 
hours, slaving over an overheating heap of circuitry to create something akin to magic.
These pioneers of programming carved their way into a new 
frontier, forging small routines that enabled the letter 'A' to scroll 
across the screen. It may not sound terribly exciting to a generation 
that's used to ultra-high definition graphics and open world, multi­
player online gaming. However, forty-something years ago it was 
blindingly brilliant.
Naturally these bedroom coders helped form the foundations for 
every piece of digital technology we use today. Some went on to 
become chief developers for top software companies, whereas 
others pushed the available hardware to its limits and founded the 
billion pound gaming empire that continually amazes us.
Regardless of whether you use an Android device, iOS device, PC, 
Mac, Linux, Smart TV, games console, MP3 player, GPS device built-in 
to a car, set-top box ora thousand other connected and 'smart' 
appliances, behind them all is programming.
All those aforementioned digital devices need instructions to tell 
them what to do, and allow them to be interacted with. These 
instructions form the programming core of the device and that core 
can be built using a variety of programming languages.
The languages in use today differ depending on the situation, the 
platform, the device's use and how the device wilt interact with its
C++ is usually reserved for more complex 
programs, operating systems, games and so on.
Python & C++ Coding

Why Python?
environment or users. Operating systems, such as Windows, macOS 
and such are usually a combination of C++, C#, assembly and some 
form of visual-based language. Games generally use C++ whilst web 
pages can use a plethora of available languages such as HTML, Java, 
Python and so on.
More general-purpose programming is used to create programs, 
apps, software or whatever else you want to call them. They're 
widely used across all hardware platforms and suit virtually every 
conceivable application. Some operate faster than others and some 
are easier to learn and use than others. Python is one such general- 
purpose language.
Python was created over twenty sixyears ago and has evolved to 
become an ideal beginner's language for learning how to program a 
computer. It’s perfect for the hobbyist, enthusiast, student, teacher 
and those who simply need to create their own unique interaction 
between either themselves or a piece of external hardware and the 
computer itself.
Python is free to download, install and use and is available for Linux, 
Windows, macOS, MS-DOS, OS/2, BeOS, IBM i-series machines, and 
even RISC OS. It has been voted one of the top five programming 
languages in the world and is continually evolving ahead of the 
hardware and Internet development curve.
Python is what's known as a High-Level Language, in that it'talks' 
to the hardware and operating system using a variety of arrays, 
variables, objects, arithmetic, subroutines, loops and countless 
more interactions. Whilst it's not as streamlined as a Low-Level 
Language, which can deal directly with memory addresses, call 
stacksand registers, its benefit is that it's universally accessible 
and easy to learn.
So to answer the question: why python? Simply put, it’s free, easy to 
learn, exceptionally powerful, universally accepted, effective and a 
superb learning and educational tool.
|//fi le: invoke, java
import java.lang.reflect.*;
4.0
LET
py = 15
70
FOR
w = 1 TO 10
71
CLS
75
LET
by =INT (RND+28)
80
LET
bx = 0
90
FOR
d = 1 TO 20
class invoke {
public static void main( String [] args ) { 
try {
Class c = Class.forName/ args[0] );
Method m = c.getMethod( argsfl], new class 
[] { } );
Object ret = m.invoke( null, null ); 
system.out.pri ntln(
"invoked static method: " + args[1]
+ " of class: " + args[0]
+ " with no args\nResults: " + ret ); 
catch ( ClassNotFoundException e ) { 
// class.forName( ) can’t find the class 
catch ( NoSuchMethodException e2 ) { 
// that method doesn't exist 
catch C lllegalAccessException e3 ) { 
// we don't nave permission to invoke that 
method 
catch ( InvocationTargetException e4 ) { 
// an exception ocurred while invoking that 
method 
system.out.pri ntln(
"Method threw an: " + e4. 
getTargetException( ) );
100 PRINT AT px,py;" U "
110 PRINT AT bx,by;"o"
120 IF INKEY$="p" THEN LET py=p 
y +1
130 IF INKEYJ="O" THEN LET py=p 
y -1 
U
135 FOR n=l TO 100: NEXT n
14-0 IF py<2 THEN LET p y = 2
150 IF py>27 THEN LET pu=27
180 LET bx=bx+l
185 PRINT AT bX-l,by;" ”
190 NEXT d
200 IF (by-l)=py THEN LET S=S+1
210 PRINT AT 10,10;"score=";s
220 FOR V=1 TO 1000: NEXT V
300 NEXT W
0 OK, 0:1
BASIC was once the starter language that early 
8-bit home computer users learned.
Java is a powerful language 
that's used in web pages, 
set-top boxes, TVs and 
even cars.
print(HANGMAN[0])
attempts = len(HANGMAN) - 1
while (attempts != 0 and in word_guessed):
print((”\nYou have {} attempts remaining").format(attempts)) 
joined_word = "".join(word_guessed)
print(join ed_word)
try:
player_guess = str(input(”\nPlease select a letter between A-Z“ + "\n> ")). 
except: # check valid input
print(”That is not valid input. Please try again.") 
continue 
else:
if not player_guess.isalpha(): # check the input is a letter. Also checks a 
print("That is not a letter. Please try again.”) 
continue
elif len(player guess) > 1: # check the input is only one letter 
print(”That is more than one letter. Please try again.”) 
continue
elif player_guess in guessed_letters: # check it letter hasn't been guessed 
print("You have already guessed that letter. Please try again.") 
continue
else:
guessed_letters.append(playerguess)
for letter in range(len(chosen_word)): 
if player_guess == chosen_word[letter]:
word_guessed[letter] = player_guess # replace all letters in the chosen 
if player_guess not in chosen_word:
Python is a more modern take on BASIC, it's easy to learn 
and makes Foran ideal beginner’s programming language.
}
}
www.pclpublications.com

Say Hello to Python
EquipmentYou
Will Need
You can learn Python with very little hardware or initial financial investment. You 
don't need an incredibly powerful computer and any software that's required is 
freely available.
WHAT WE'RE USING
Thankfully, Python is a multi-platform programming language available for Windows, macOS, Linux, Raspberry Pi and more. If 
you have one of those systems, then you can easily start using Python.
COMPUTER
Obviously you're going to need a computer in order to learn how to program in 
Python and to test your code. You can use Windows (from XP onward) on eithera 32 
or 64-bit processor, an Apple Mac or Linux installed PC.
AN IDE
An IDE (Integrated Developer Environment) is used to enter and execute Python 
code. It enables you to inspect your program code and the values within the code, as 
well as offering advanced features. There are many different IDEs available, so find 
the one that works foryou and gives the best results.
PYTHON SOFTWARE
macOS and Linux already come with Python preinstalled as part of the operating 
system, as does the Raspberry Pi. However, you need to ensure that you're running 
the latest version of Python. Windows users need to download and install Python, 
which we'll cover shortly.
TEXT EDITOR
Whilst a text editor is an ideal environment to enter code into, it's not an absolute 
necessity. You can enter and execute code directly from the IDLE but a text editor, 
such as Sublime Text or Notepad++, offers more advanced featuresand colour coding 
when entering code.
INTERNET ACCESS
Python is an ever evolving environment and as such new versions often introduce 
new concepts or change existing commands and code structure to make it a more 
efficient language. Having access to the Internet will keep you up-to-date, help you 
out when you get stuck and give access to Python's immense number of modules.
TIME AND PATIENCE
Despite what other books may lead you to believe, you won't become a programmer 
in 24-hours. Learning to code in Python takes time, and patience. You may become 
stuck at timesand other times the code will flow like water. Understand you're learning 
something entirely new, and you wilt get there.
Python & C++ Coding

Q Equipment You Will Need
THE RASPBERRY PI
Why use a Raspberry Pi? The Raspberry Pi is a tiny computer that’s very cheap to purchase but offers the user a fantastic learning 
platform. Its main operating system, Raspbian, comes preinstalled with the latest Python along with many Modules and extras.
The Raspberry Pi 3 is the latest version, incorporating a more 
powerful CPU, more memory, Wi-Fi and Bluetooth support. 
You can pick up a Pi for around £32 or as a part of kit for £50+, 
depending on the kityou're interested in.
RASPBIAN
RASPBERRY PI
/’+>Ss7
/’’’GEsF
Jargon-frd 
Tips & Adj
Manual Se,
Coding & Programming
| ihe essentia! 
&
steP-by-step 
manual to
Improving your 
nu* programming 
md Cortina
Ceding &P^eCts jt 
=52^
SEP!
2°22 EDITION
Raspberry
400
Raspberry
pi 4
OVER 
795
FUZE PROJECT
BOOKS
The FUZE is a learning environment built on the latest model 
of the Raspberry Pi. You can purchase the workstations that 
come with an electronics kit and even a robot arm for you to 
build and program. You can find more information on the FUZE 
atwww.fuze.co.uk.
The Raspberry Pi's main operating system is a Debian-based 
Linux distribution that comes with everything you need in 
a simple to use package. It’s streamlined for the Pi and is an 
ideal platform for hardware and software projects, Python 
programming and even as a desktop computer.
We have several great coding 
titles available via www.
pclpublications.com. Our Pi 
books cover how to buy your 
first Raspberry Pi, set it up and 
use it; there are some great 
step-by-step project examples 
and guides to get the most 
from the Raspberry Pi too.
www.pclpublications.com

Say Hello to Python
Getting to 
Know Python
Python is the greatest computer programming language ever created. It enables 
you to Fully harness the power of a computer, in a language that's clean and easy 
to understand.
WHAT IS PROGRAMMING?
It helps to understand what a programming language is before you try to learn one, and Python is no different. Let’s take a 
look at how Python came about and how it relates to other languages.
PYTHON
A programming language 
is a list of instructions that 
a computer follows. These 
instructions can be as simple 
as displaying your name 
or playing a music file, or 
as complex as building a 
whole virtual world. Python 
is a programming language 
conceived in the late 1980s 
by Guido van Rossum 
at Centrum Wiskunde & 
Informatica (CWI) in the 
Netherlands as a successor to 
the ABC language.
PROGRAMMING RECIPES
Programs are like recipes forcomputers. A 
recipe to bake a cake could go like this:
Put 100 grams of self-raising flour in a bowl.
Add 100 grams of butter to the bowl.
Add 100 millilitres of milk.
Bake for half an hour.
CODE
■ (:\UcMS\luryh\Droph<wW_Artinn\rfripeNt - Sublime lent (UNRfGIS I HttU) 
file Edit Selection find View Goto Tools Project Preferences Help
1 |Put 100 grams of self-raising flour in a bowl.
2 Add 100 grams of butter to the bowl.
3 Add 100 millilitres of milk.
4 Bake for half an hour.
Just like a recipe, a program consists of instructions that you follow 
in order. A program that describes a cake might run like this:
Guido van Rossum, the 
father of Python.
| bowl = □ 
flour = 100 
butter = 50
| milk = 100
| bowl. append ( [flour, butter, mi Ik]) 
cake.cook(bowl)
[4 
C:\UwrsMucyti\OropboiAO.Artion\Mlrew<2.7.11)
He Edit Form* Run Options Window Help 
class Cake(object)s 
def init (self):
self.ingredients = [] 
d - cook(self,ingredients) : 
print "Baking cake ..."
cake = CakeO
bowl ■ []
flour - 100
butter = 50 
milk = 100
bowl.append([flour,butter,milk])
ca ke.coo k(bowl) 
I
PROGRAM COMMANDS
You might not understand some of the Python commands, like bowl.append and cake.cook(bowl). 
The first is a list, the second an object; well look at both in this book. The main thing to know is 
that it's easy to read commands in Python. Once you learn what the commands do, it's easy to 
figure out how a program works.
Python 3.4 2 Shell
Die Cdit Shell Qebug fiptions Endows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11)
(GCC 4.9.1] on linux
Type "copyright", "credits” or "licenseO” for more information. 
»>------------------------------------------------ RESTART-------------------------------
Baking cake...
cake py - /home/pi/Documents/cake.py (3.4.2)
filo Edit Ffirmat gun Options Endows Help
I Cake(objecl);
| def _ init_ (self):
self.ingredients - [] 
def cook(self. ingredients): 
print ("Baking cake.. ")
* cake'CakeO
bowl - (] 
flour - 100
butter • 50 
milk - 100 
bowl.append((flour, butter, milk])
cake.cook(bowl)
Python & C++ Coding

(^Getting to Know Python
HIGH-LEVEL LANGUAGES
Computer languages that a re easy to read are known as "high-level". 
This is because they fly high above the hardware (also referred to as 
"the metal"). Languages that "fly close to the metal," like Assembly, 
are known as "low-level". Low-level languages commands read a bit 
like this:msg db ,0xa len equ $ - msg.
ZEN OF PYTHON
Python lets you access all the power of a computer in a language 
that humanscan understand. Behind all this is an ethos called "The 
Zen of Python." This is a collection of 20 software principles that 
influences the design of the language. Principles include "Beautiful 
is better than ugly" and "Simple is better than complex." Type 
import this into Python and it wilt display all the principles.
PYTHON 3 VS PYTHON 2
In a typical computing scenario, Python is complicated somewhat by the existence of two active versions of the language: 
Python 2 and Python 3.
WORLD OF PYTHON
When you visit the Python 
Download page you'll notice that 
there are two buttons available: one for Python 3.6.2 and the other 
for Python 2.7.13; correct at the time of writing (remember Python is 
frequently updated so you may see different version numbers).
Download the latest version for Windows
Download Python 3.6.2 I Download Python 2.7.13
Wondering which version to use? Here’s more about the difference 
between Python 2 and 3.
Looking for Python with a different OS? Python for Windows, 
Linux/UNIX, Mac OS X, Other
Want to help test development versions of Python? Pre releases
PYTHON 3.X
In 2008 Python 3 arrived with several new 
and enhanced features. These features 
provide a more stable, effective and efficient programming 
environment but sadly, most (if not all) of these new features are 
not compatible with Python 2 scripts, modules and tutorials. Whilst 
not popular at first, Python 3 has since become the cutting edge of 
Python programming.
|_<i Python 3.6.1 Shell 
— 
□ 
>
File Edit Shell Debug Options Window Help
Python 3.6.1 (v3.6.1:69c0db5, Mar 21 2017, 17:54:52) [MSC v.1900 32 bit (Intel)] 
on Win32
Type "copyright", "credits" or "license ()" for more information.
So why two? Well, Python 2 was originally 
launched in 2000 and has since then 
adopted quite a large collection of modules, scripts, users, tutorials 
and so on. Over the years Python 2 has fast become one of the first 
go to programming languages for beginners and experts to code 
in, which makes it an extremely valuable resource.
I Li Python 2.7.13 Shell 
- 
□ X I
I File Edit Shell Debug Options Window Help 
I
Il Python 2.7.13 (v2.7.13:a06454blafal, Dec 17 2016, 20:42:59) fMSC v.1500 32 bit ( *|l
I Intel)] on Win32
l| Type "copyright", "credits" or "license!)" for more information.
I»
Python 3's growing popularity has meant that 
it's now prudent to start learning to develop
with the new features and begin to phase out the previous version. 
Many development companies, such as SpaceX and NASA use 
Python 3 for snippets of important code.
www.pclpublications.com

Say Hello to Python
How to Set Up 
Python in Windows
Windows users can easily install the latest version of Python via the main Python 
Downloads page. Whilst most seasoned Python developers may shun Windows as the 
platform of choice for building their code, it's still an ideal starting point for beginners.
INSTALLING PYTHON 3.X
Microsoft Windows doesn't come with Python preinstalled as standard, so you're going to have to install it yourself manually. 
Thankfully, it's an easy process to follow.
STEP1
Start by opening your web browser to www.python.
org/downloads/. Look for the button detailing the 
download link for Python 3.x.x (in our case this is Python 3.6.2 but as 
mentioned you may see later versions of 3).
STEP 3
Choosing the Customise option allows you to 
specify certain parameters, and whilst you may 
stay with the defaults, it’s a good habit to adopt as sometimes (not 
with Python, thankfully) installers can include unwanted additional 
features. On the first screen available, ensure all boxes are ticked 
and click the Next button.
Download the latest version for Windows
Wondering which version to use? Here’s more about the difference 
between Python 2 and 3.
Looking for Python with a different OS? Python for Windows, 
Linux/UNIX, Mac OS X, Other
Want to help test development versions of Python? Pre-releases
Download Python 3.6.2 II Download Python 2.7.13
python 
for 
windows
Optional Features
0 Documentation
Installs the Python documentation file.
0 pip
Installs pip, which can download and install other Python packages.
0 td/tk and IDLE
Installs tkinter and the IDLE development environment.
0 Python test suite
Installs the standard library test suite.
0 py launcher 0 for all users (requires elevation)
Installs the global 'py' launcher to make it easier to start Python.
Back 
[ Next | | Cancel |
STEP 2
Click the download button for version 3.x, and 
save the file to your Downloads folder. When the 
file is downloaded, double-dick the executable and the Python 
installation wizard will launch. From here you have two choices: 
Install Nowand Customise Installation. We recommend opting for 
the Customise Installation link.
STEP 4
The next page of options include some interesting 
additions to Python. Ensure the Associate file with 
Python, Create Shortcuts, Add Python to Environment Variables, 
Precompile Standard Library and Install for All Users options are 
ticked. These make using Python later much easier. Click Install when 
you're ready to continue.
Install Python 3.6.2 (32-bit)
Select Install Now to install Python with default settings, or choose 
Customize to enable or disable features.
Install Now
C:\Users\david\AppData\Local\Programs\Python\Python36-32
Includes IDLE, pip and documentation 
Creates shortcuts and file associations
Advanced Options
0 Install for all users
0 Associate files with Python (requires the py launcher)
0 Create shortcuts for installed applications
0 Add Python to environment variables
0 Precompile standard library
□ Download debugging symbols
□ Download debug binaries (requires VS 2015 or later)
—> Customize installation 
Choose location and features
python 
for 
windows
0 Install launcher for all users (recommended) 
□ Add Python 3.6 to PATH
Cancel
python
for
windows
Customize install location
I C:\Program Files (x86)\Python36-32
Back
Browse
| ^Install | | Cancel |
Python & C++ Coding

How to Set Up Python in Windows
STEP 5 
A
You may need to confirm the installation with the 
Windows authentication notification. Simply click 
Yes and Python will begin to install. Once the installation is complete 
the final Python wizard page will allow you to view the latest release 
notes, and follow some online tutorials.
STEP 8 
A
Clicking on the IDLE (Python 3.6 32-bit) link will 
launch the Python Shell, where you can begin 
your Python programming journey. Don't worry if your version 
is newer, as long as it's Python 3.x our code will work inside your 
Python 3 interface.
Setup was successful
Special thanks to Mark Hammond, without whose years of 
freely shared Windows expertise. Python for Windows would 
still be Python for DOS.
New to Python? Start with the online tutorial and 
documentation.
See what's new in this release.
Q Disable path length limit
Changes your machine configuration to allow programs, including Python, to 
bypass the 260 character "MAX_PATH" limitation.
python
for
windows 
Close
[jjl Python 3.6.2 Shell 
— 
□ X
File Edit Shell Debug Options Window Help
Python 3.6.2 (v3.6.2:5fd33b5, Jul 8 2017, 04:14:34) [MSC v.1900 32 bit (Intel)] 
on Win32
Type "copyright", "credits" or "license!)" for more information.
STEP 6 J
Before you close the install wizard window, 
however, it’s best to click on the link next to the 
shield detailed Disable Path Length Limit. This will allow Python 
to bypass the Windows 260 character limitation, enabling you to 
execute Python programs stored in deep folders arrangements. 
Again, click Yes to authenticate the process; then you can Close the 
installation window.
STEP 9
If you now click on the Windows Start button again, 
and this time type: CMD, you'll be presented with the 
Command Prompt link. Click it to get to the Windows command line 
environment. To enter Python within the command line, you need 
to type: python and press Enter.
S3 Command Prompt - python
Microsoft Windows [Version 10.0.15063]
(c) 2017 Microsoft Corporation. All rights reserved.
C:\Users\davidxpython
Python 3.6.2 (v3.6.2:5fd33b5,
Type "help", "copyright", "cr
8 2017, 04:14:34) [MSC v.1900 32 bit (Intel)] on Win32 
' or "license" for more information.
® Disable path length limit
Changes your machine configuration to allow programs, including Python, to 
bypass the 2&0 character "MAX.PATH" limitation.
Close
STEP 7
Windows 10 userswill now 
find the installed Python 
3.x within the Start button 
Recently Added section. The 
first link, Python 3.6 (32-bit) 
will launch the command 
line version of Python when 
clicked (more on that in a 
moment). To open the IDLE, 
type IDLE into Windows start.
Best match
Search suggestions
P idle - See web results
IDLE (Python 3.6 32-bit)
Desktop app
Filters
The command line version of Python works in 
much the same way as the Shell you opened in 
Step 8; note the three left-facing arrows (»>). Whilst it's a perfectly 
fine environment, it's not too user-friendly, so leave the command 
line for now. Enter: exitQ to leave and close the Command 
Prompt window.
STEP 10
B Command Prompt
Microsoft windows [version 10.0.15063]
(c) 2017 Microsoft Corporation. All rights reserved.
C:\Users\david>python
Python 3.6.7 (v3.6.2:Sfd33hS, .lul R 2017, 04:14:34) [MSC v.1000 3? hit (Intel)] on win37 
Type "help", "copyright", "credits" or "license" for more information.
>» exit()
C:\Users\david>
■
■+-■ P idle)
www.pclpublications.com

Say Hello to Python
How to Set Up 
Python on a Mac
If you're running an Apple Mac, then setting up Python is incredibly easy. In fact a 
version of Python is already installed. However, you should make sure you're running 
the latest version.
INSTALLING PYTHON
Apple's operating system comes with Python installed, so you don’t need to install it separately. However, Apple doesn't 
update Python very often and you're probably running an older version. So it makes sense to check and update first.
STEP1
Open a new Terminal window by clicking Go > 
Utilities, then double-click the Terminal icon. Now 
enter: python --version. You should see "Python 2.5.1" and 
even later, if Apple has updated the OS and Python installation. 
Either way, it's best to check for the latest version.
STEP 3
Click on the latest version of Python 3.x, in our 
case this is the download button for Python 3.6.2. 
This will automatically download the latest version of Python and 
depending on how you've got your Mac configured, it automatically 
starts the installation wizard.
STEP 2 
a
Open Safari and head over to www.python.org/ 
downloads. Just as with the Windows setup 
procedure on the previous pages, you can see two yellow download 
buttons: one for Python 3.6.2, and the other for Python 2.7.13. 
Note, that version numbers may be different due to the frequent 
releases of Python.
Download the latest version for Mac OS X
Download Python 3.6.2 I Download Python 2.7.13
Wondering which version to use? Here's more about the difference 
between Python 2 and 3.
Looking for Python with a different OS? Python for Windows, 
Linux/UNIX, Mac OS X, Other
Want to help test development versions of Python? Pre releases
STEP 4
With the Python installation wizard open, click on 
the Continue button to begin the installation. It's 
worth taking a moment to read through the Important Information 
section, in case it references something that applies to your version 
of macOS. When ready, click Continue again.
Python & C++ Coding

How to Set Up Python on a Mac
STEP 5 
A
The next section details the Software License 
Agreement, and whilst not particularly interesting 
to most folks, it's probably worth a read. When you're ready, click on 
the Continue button once again.
Install Python
STEP 8 
A
There's nothing much else left to do in the Python 
installation wizard so you can click the Close button. 
If you now drop back into a Terminal session and re-enter the 
command: python3 --version, you can see the new version is 
now listed. To enter the command line version of Python, you need 
to enter: python3.To exit, it’s: exit().
STEP 6
Finally you're be presented with the amount of 
space Python will take up on your system and an 
Install button, which you need to click to start the actual installation 
of Python 3.x on to your Mac. You may need to enter your password 
to authenticate the installation process.
STEP 9
You need to search in Finder for the Python IDLE; 
when you've found it, click it to launch and it 
should look similar to that of the Windows IDLE version shown on 
the previous page. The only difference being the Mac detected 
hardware platform it’s running on.
• W 
Python 3.6.0 Shell
Python 368 G3.6 0:41df79263oll, Dec 22 2816, 17:23:133
[CCC 4.2.1 (Apple Inc. build 5666) (dot 3)3 on darwin
Type "copyright", "credits" or "licenseO" for more information.
»> WARNING: The version of Tcl/Tk (8.5.9) in use way be unstable.
Visit http://www.python.org/downlood/fflac/tcltlc/ for current infoneation.
STEP 7 
________ J
The installation shouldn’t take too long; the older 
Mac Mini we used in this section is a little slower 
than more modern Mac machines and it only took around thirty 
seconds for the Installation Successful prompt to be displayed.
STEP 10 
A
Older Mac versions may have trouble with the 
newer versions of Python, in which case you will 
need to revert to a previous Python 3.x build; as long as you're using 
Python 3.x, the code in this book wilt work for you.
A O 
Python Shell
Python 3.1.2 (r312:7936OM, Mar 24 2010, 01:33:18) 
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin 
Type "copyright", "credits" or "license!)" for mo 
re information.
>» I
www.pclpublications.com

Say Hello to Python
How to Set Up 
Python in Linux
Python version 2.x is already installed in most Linux distributions but as we're going 
to be using Python 3.x, there's a little work we need to do first to get hold of it. 
Thankfully, it's not too difficult.
PYTHON PENGUIN
Linux is such a versatile operating system that it’s often difficult to nail down just one way of doing something. Different 
distributions go about installing software in different ways, so we will stick to Linux Mint 18.1 for this particular tutorial.
STEP1
First you need to ascertain which version of Python 
is currently installed in your Linux system; as we 
mentioned, we're going to be using Linux Mint 18.1 for this section. 
As with macOS, drop into a Terminal by pressing Ctrl+Atl+T.
david@david*mint -
File Edit View Search Terminal Help
STEP 3
Some Linux distros will automatically update 
the installation of Python to the latest versions 
whenever the system is updated. To check, first do a system update 
and upgrade with:
sudo apt-get update && sudo apt-get upgrade
Enter your password and let the system do any updates.
david@david-mint ~ s
david@david-mint ~
File Edit View Search Terminal Help
david@david-mint - S python --version
Python 2.7.12
david@david-mint - $ sudo apt-get update && sudo apt-get upgrade 
[sudo] password for david: |
STEP 2
Next enter: python - -version into the Terminal 
screen. You should have the output relating to 
version 2.x of Python in the display. Ours in this particular case is 
Python 2.7.12.
david@david-mint -
File Edit View Search Terminal Help
david@david-mint - s python --version 
Python 2.7.12 
david@david-mint ~ 
|
STEP 4
Once the update and upgrade is complete, you 
may need to answer'Y' to authorise any upgrades, 
enter: python3 --version to see if Python 3.x is updated or even 
installed. In the case of Linux Mint, the version we have is Python 
3.5.2, which is fine for our purposes.
Python & C++ Coding

How to Set Up Python in Linux
STEP 5 
A
However, if you want the latest version, 3.6.2 as per 
the Python website at the time of writing, you need 
to build Python from source. Start by entering these commands into 
the Terminal:
sudo apt-get install build-essential checkinstall 
sudo apt-get install libreadline-gplv2-dev 
libncursesw5-dev libssl-dev libsqlite3-dev tk-dev 
libgdbm-dev libc6-dev libbz2-dev
david@david-mint - 
- + x
File Edit View Search Terminal Help
ldavid@david-mint - s sudo apt-get install build-essential checkinstall
Reading package lists... Done
Building dependency tree
iReading state information... Done
build-essential is already the newest version (12.Iubuntu2).
■build-essential set to manually installed.
iThe following NEW packages will be installed
checkinstall
0 to upgrade, 1 to newly install, 0 to remove and 15 not to upgrade.
iNeed to get 121 kB of archives.
lAfter this operation, 516 kB of additional disk space will be used.
Do you want to continue? [Y/n]
STEP 8 -J
Within the Python folder, enter: 
./configure 
sudo make altinstall
This could a little while depending on the speed of your computer. 
Once finished, enter: python3.6 --version to check the 
installed latest version.
STEP 6
A
Open up your Linux web browserand go to 
the Python download page: www.python.org/ 
downloads. Click on the Download Python 3.6.2 (or whichever 
version it's on when you look) to download the source Python- 
3.6.2.tar.xz file.
STEP 9 
_______ J
For the GUI IDLE, you need to enter the following 
command into the Terminal:
Downloads
You have chosen to open:
sudo apt-get install idle3
The IDLE can then be started with the command: idle3. Note, that 
IDLE runs a different version from the one you installed from source.
Documentation
Download the latest source rele«
which is; XZ ar i live (16.1 MR) 
from: httpsvAvww.python.org
Looking for Python with a different OS? Python for Win 
OS X, Other
H Download Python 3.6.2 I Download Python 2.7.13
About
Open with Archive Manager (default] 
© Save file
Wondering which version to use? Here's more about the diff 
Python 2 and 3.
Want to help test development versions of Python? Pre role;
STEP 7
In the Terminal, go the Downloads folderby 
entering: cd Downloads/. Then unzip the 
contents of the downloaded Python source code with: tar -xvf 
Python-3.6.2. tar. xz. Now enter the newly unzipped folder 
with cd Python-3.6.2/.
STEP 10 -J
You also need PIP (Pip Installs Packages) which is a 
tool to help you install more modules and extras.
Enter: sudo apt-get install python3-pip
PIP is then installed; check for the latest update with:
pip3 install --upgrade pip
When complete, close the Terminal and Python 3.x will be available 
via the Programming section in your bistro's menu.
david@david-mint ~/Downloads/Python-3.6.2 
- + X
File Edit View Search Terminal Help
ldavid@david-mint - Downloads/Python-3.6.2 S sudo apt-get install python3-pip 
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following additional packages will be installed: 
python-pip-whl
Recommended packages:
python3-dev python3-setuptools python3-wheel
The following NEW packages will be installed
python-pip-whl python3-pip
0 to upgrade, 2 to newly install, O to remove and 15 not to upgrade.
Need to get 1,219 kB of archives.
After this operation, 1,789 kB of additional disk space will be used.
Do you want to continue? [Y/n] |
www.pclpublications.com

Index

Getting Started with Python
Getting started with Python may seem a 
little daunting at first but the language 
has been designed with simplicity in mind. 
Like most things, you need to start slowly, 
learn how to get a result and how to get 
what you want from the code.
In this section, we cover variables, 
numbers and expressions, user input, 
conditions and loops; and the types of 
errors you may well come across in your 
time with Python.
22 Starting Python tor the First Time
24 
Your First Code
26 
Saving and Executing Your Code
28 
Executing Code from the Command Line
30 
Numbers and Expressions
32 
Using Comments
34 
Working with Variables
36 
User Input
38 
Creating Functions
40 
Conditions and Loops
42 
Python Modules
www.pclpublications.com

Getting Started with Python
Starting Python tor 
the First Time
We're going to be using the Raspberry Pi as our Python 3 hardware platform. The 
latest version of Raspbian comes preinstalled with Python 3, version 3.4.2 to be exact, 
so as long as you have a version 3 Shell, all our code will work.
STARTING PYTHON
We're not going to go into the details of getting the Raspberry Pi up and running, there's plenty of material already available 
on that subject. However, once you're ready, fire up your Pi and get ready for coding.
STEP1
With the Raspbian desktop loaded, click on the 
Menu button followed by Programming > Python
3 (IDLE). This opens the Python 3 Shell. Windows and Mac users can 
find the Python 3 IDLE Shell from within the Windows Start button 
menu and via Finder.
STEP 3
For example, in the Shell enter: 2+2
After pressing Enter, the next line displays the 
answer: 4. Basically, Python has taken the 'code' and produced the 
relevant output.
STEP 2
The Shell is where you can enter code and see the 
responses and output of code you've programmed 
into Python. This is a kind of sandbox, where you're able to tryout 
some simple code and processes.
STEP 4
The Python Shell acts very much like a calculator, 
since code is basically a series of mathematical 
interactions with the system. Integers, which are the infinite 
sequence of whole numbers can easily be added, subtracted, 
multiplied and so on.
Python 3.4.2 Shell
file Edit Shell Debug Options Windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licensee)" for more information. 
»> 2+2
»> 8+6
14
»> 23453+64545522
64568975
»> 98778642342-12343
98778629999
»> 1287437*43534
56047282358
»>l
Python & C++ Coding

Q Starting Python for the First Time
STEP 5 
A
While that's very interesting, it’s not particularly 
exciting. Instead, try this:
print(“Hello everyone!”)
Just like the code we entered in Sublime in the Installing a Text 
Editor section of this book.
Python 3.4.2 Shell 
_ □ x
File Edit Shell fiebug Options Windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11) 
[GCC 4.9.1] on linux
Type "copyright", "credits” or "licenseO” for more information. 
»> 2+2 
4 
»> 8+6 
14 
»> 23453+64545522 
64568975 
»> 98778642342-12343 
98778629999 
»> 1287437*43534 
56047282358
>» print("Hello everyone!”) 
Hello everyone!
STEP 8 -J
The Python IDLE is a configurable environment. If 
you don't like the way the colours are represented, 
then you can always change them via Options > Configure IDLE and 
clicking on the Highlighting tab. However, we don't recommend 
that, as you won't be seeing the same as our screenshots.
python 3.4.2 (default, oct 19 2014, 13:31:11) 
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licenseO" for note information.
»> 23453+64545522 
64568975
»> 08778642342-12343
98778629999
»> 1287437+43534
56047282358
»> printf"Hello everyone!")
STEP 6 
A
This is a little more like it, since you've just produced 
your first bit of code. The Print command is fairly 
self-explanatory, it prints things. Python 3 requires the brackets as 
well as quote marks in order to output content to the screen, in this 
case the 'Hello everyone!' bit.
STEP 9
Just like most programs available, regardless of the 
operating system, there are numerous shortcut 
keys available. We don't have room for them all here but within the 
Options > Configure IDLE and under the Keys tab, you can see a list 
of the current bindings.
»> printC’Hello everyone!”) 
Hello everyone!
»> |
STEP 7
You may have noticed the colour coding within 
the Python IDLE. The colours represent different 
elements of Python code. They are:
STEP 10
Black - Data and Variables
Green-Strings
Purple - Functions 
Orange - Commands
Blue - User Functions
Dark Red - Comments 
Light Red - Error Messages
The Python IDLE is a power interface and one 
that's actually been written in Python using one 
of the available GUI toolkits. If you want to know the many ins and 
outs of the Shell, we recommend you take a few moments to view 
www.docs.python.org/3/library/idle.html, which details many of 
the IDLE's features.
25.5. IDLE
IDLE Colour Coding
Colour
Use for
Examples
Black
Data & variables
23.6 area
Green
Strings
"Hello World"
Purple
Functions
len() print ()
Orange
Commands
if for else
Blue
User functions
get_area ()
Dark red
Comments
#Remember VAT
Light red
Error messages
SyntaxError:
। rerem wtnn my MnXw reyMrs wnn adia wrorvs, ano rearm vvough rrurgre rias (greo)
25.5.1. Menus
25.5.1.1. File menu (Shell and Editor)
www.pclpublications.com

Getting Started with Python
Your First Code
Essentially, you've already written your first piece of code with the 'print("Hello 
everyone!")' function from the previous tutorial. However, let's expand that and look at 
entering your code and playing around with some other Python examples.
PLAYING WITH PYTHON
With most languages, computer or human, it's all about remembering and applying the right words to the right situation. 
You're not born knowing these words, so you need to learn them.
STEP 1
________ J
If you've closed Python 3 IDLE, reopen it in 
whichever operating system version you prefer. In
STEP 3
A
the Shell, enter the familiar following:
printC“HeUo”)
You can see that instead of the number 4, the 
output is the 2+2 you asked to be printed to the 
screen. The quotation marks are defining what's being outputted 
to the IDLE Shell; to print the total of 2+2 you need to remove 
the quotes:
Python 3.4.2 Shell 
_ □ x
print(2+2)
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default. Oct 19 2014. 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licenseO" for more information.
»> print("Hello")
Hello
Python 3.4.2 Shell
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default, Oct 19 2014. 13:31:11) | 
[GCC 4.9.1] on linux
Type "copyright", “credits" or “licenseO" for more information. 
»> print("Hello")
Hello
»> print("2+2")
2+2
»> print(2+2)
4
STEP 2
Just as predicted, the word Hello appears in the 
Shell as blue text, indicating output from a string. 
It's fairly straightforward and doesn't require too much explanation. 
Now try:
STEP 4
You can continue as such, printing 2+2, 464+2343 
and so on to the Shell. An easier way is to use a 
variable, which is something we will cover in more depth later. For 
now, enter:
a=2
b=2
printC“2+2”)
Python & C++ Coding
Python 3.4.2 Shell 
_ □ x
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default, Oct 19 2014. 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licenseO" for more information.
»> print( "Hello”)
Hello
»> print("2+2")
2+2
»> print(2+2) 
4
2.

(^Your First Code
STEP 5 
A
What you have done here is assign the letters a 
and b two values: 2 and 2. These are now variables, 
which can be called upon by Python to output, add, subtract, divide 
and so on for as tong as their numbers stay the same. Try this:
print(a) 
print(b)
STEP 8 
________ J
Now let's add a surname:
surname=”Hayward” 
print(surname)
You now have two variables containing a first name and a surname 
and you can print them independently.
Python 3.4.2 (default. Oct 19 2014. 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", “credits" or "licensed" for more information.
»> name-"David"
>» print(name)
David
»> surname="Hayward"
»> print(surname)
Hayward
>» |
STEP 6 
A
The output of the last step displays the current 
values of both a and b individually, as you've asked 
them to be printed separately. If you want to add them up, you can 
use the following:
print(a+b)
This code simply takes the values of a and b, adds them together 
and outputs the result.
STEP 9
If we were to apply the same routine as before, 
using the + symbol, the name wouldn't appear 
correctly in the output in the Shell. Try it:
print(name+surname)
You need a space between the two, defining them as two separate 
values and not something you mathematically play around with.
STEP 7
You can playaround with different kinds of variables 
and the Print function. For example, you could 
assign variables for someone's name:
name=”David” 
print(name)
STEP 10
In Python 3 you can separate the two variables 
with a space using a comma:
print(name, surname)
Alternatively, you can add the space yourself:
print(name+” “+surname)
The use of the comma is much neater, as you can see.
Congratulations, you've just taken your first steps into the wide 
world of Python.
Python 3.4.2 (default. Oct 19 2014. 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licensed" for more information.
>» name-"David"
»> print (name)
David
»> surname="Hayward"
»> print(surname)
Hayward
>» print(name*surname)
DavidHayward
»> print(name, surname)
David Hayward
»> print(name*" "♦surname)
David Hayward
>» |
www.pclpublications.com

Getting Started with Python
Saving and Executing 
Your Code
Whilst working in the IDLE Shell is perfectly fine for small code snippets, it's not 
designed for entering longer program listings. In this section you're going to be 
introduced to the IDLE Editor, where you will be working from now on.
EDITING CODE
You will eventually reach a point where you have to move on from inputting single lines of code into the Shell. Instead, the 
IDLE Editor will allow you to save and execute your Python code.
STEP 1 
________ J
First, open the Python IDLE Shell and when it's up, 
click on File > New File. This will open a new window
with Untitled as its name. This is the Python IDLE Editor and within it 
you can enter the code needed to create your future programs.
STEP 3
You can see that the same colour coding is in place 
in the IDLE Editoras it is in the Shell, enabling you 
to better understand what's going on with your code. However, to 
execute the code you need to first save it. Press F5 and you get a 
Save...Check box open.
STEP 2
The IDLE Editor is, for all intents and purposes, a 
simple text editor with Python features, colour 
coding and so on; much in the same vein as Sublime. You enter 
code as you would within the Shell, so taking an example from the 
previous tutorial, enter:
print(“Hello everyone!”)
STEP 4
Click on the OK button in the Save box and select a 
destination where you’ll save all your Python code. 
The destination can be a dedicated folder called Python or you 
can just dump it wherever you like. Remember to keep a tidy drive 
though, to help you out in the future.
print("Hello everyone!”)
Python & C++ Coding

Q Saving and Executing Your Code
STEP 5 
A
Enter a name foryour code, ‘print hello' for 
example, and dick on the Save button. Once the 
Python code is saved it's executed and the output will be detailed in 
the IDLE Shell. In this case, the words 'Hello everyone!'.
STEP 8
Let's extend the code and enter a few examples 
from the previous tutorial:
a=2
b=2
nonie=”Dovid” 
surnome=”Hoyward” 
print(name, surname) 
print (a+b)
If you press F5 now you'll be asked to save the file, again, as it's been 
modified from before.
STEP 6 
A
This is how the vast majority of your Python code 
will be conducted. Enter it into the Editor, hit F5, 
save the code and look at the output in the Shell. Sometimes things 
will differ, depending on whetheryou've requested a separate 
window, but essentially that's the process. It's the process we will 
use throughout this book, unless otherwise stated.
STEP 9
If you click the OK button, the file will be 
overwritten with the new code entries, and 
executed, with the output in the Shell. It's not a problem with just 
these few lines but if you were to edit a larger file, overwriting can 
become an issue. Instead, use File > Save As from within the Editor 
to create a backup.
print hello.py - /home/pi/Documents/Python Code/print hello.py (3.4.2) - n x
File Edit Format Run Options Windows Help
tJew File 
Ctrl+N
Qpen... 
Ctrl+O
Becent Files
Open Module... Alt+M
Class Browser Alt+C
Path Browser
Save 
Ctrl+S
Save As... Ctrl+SMt+S
Save Copy As... Alt+Shift+S
Print Window Ctrl+P
£lose 
Alt+F4
Esit 
Ctrl+Q
STEP 7
If you open the file location of the saved Python 
code, you can see that it ends in a .py extension. 
This is the default Python file name. Any code you create will be 
whatever.py and any code downloaded from the many Internet 
Python resource sites will be .py. Just ensure that the code is written 
for Python 3.
STEP 10 -J
Now create a new file. Close the Editor, and open 
a new instance (File > New Fite from the Shell).
Enter the following and save it as hello.py:
o=”Python”
b=”is”
c=”coolI”
print(o, b, c)
You will use this code in the next tutorial.
www.pclpublications.com

Getting Started with Python
Executing Code from 
the Command Line
Although we're working from the GUI IDLE throughout this book, it's worth taking 
a look at Python's command line handling. We already know there's a command line 
version of Python but it's also used to execute code.
COMMAND THE CODE
Using the code we created in the previous tutorial, the one we named hello.py, let’s see how you can run code that was made 
in the GUI at the command line level.
STEP1
Python, in Linux, comes with two possible ways of 
executing code via the command line. One of the 
ways is with Python 2, whilst the other uses the Python 3 libraries 
and so on. First though, drop into the command line orTerminal on 
your operating system.
STEP 3
Now you're at the command line we can start 
Python. For Python 3 you need to enter the 
command python3 and press Enter. This will put you into the 
command line version of the Shell, with the familiar three right- 
facing arrows as the cursor (»>).
STEP 2
Just as before, 
we're using a 
Raspberry Pi: Windows users will 
need to click the Start button and 
search for CMD, then click the 
Command Line returned search; 
and macOS users can get access 
to theircommand line by clicking 
Go > Utilities > Terminal.
Best match
Seaicli suggestions >
ZO cmd - See web results
D ©
Filter
STEP 4
________ J
From here you're able to enter the code you've 
looked at previously, such as:
a=2
print(o)
You can see that it works exactly the same.
■
cmd|
Python & C++ Coding

Executing Code from the Command Line
STEP 5 
A
Now enter: exit() to leave the command line Python 
session and return you back to the command 
prompt. Enter the folder where you saved the code from the 
previous tutorial and list the available files within; hopefully you 
should see the hello.py file.
STEP 8
The result of running Python 3 code from the 
Python 2 command line is quite obvious. Whilst it 
doesn't error out in any way, due to the differences between the 
way Python 3 handles the Print command over Python 2, the result 
isn't as we expected. Using Sublime for the moment, open the 
hello.py file.
pi@raspberrypi: -/Documents/Python Code 
_ □ x
File Edit Tabs Help
pieraspberrypi:- $ python3
Python 3.4.2 (default. Oct 19 2014. 13:31:11) 
[GCC 4.9.1) on linux
Type "help", "copyright", "credits" or "license" for more information.
>» a=2
»> print(a)
»> exit()
pigraspberrypi:- $ cd Documents/
pi@raspberrypi:-ZDocments $ cd PythonX Code/
pi@raspberrypi:-/Docinents/Python Code $ Is 
hello.py print hello.py
pi@raspberrypi:-/Docinents/Python Code $ |
S C:\Users\david\Documents\Python\hello.py - Sublime Text (UNREGISTERED)
File Edit Selection Find View Goto Toots Project Preferences Help
1 a="Python"
2 b="is”
3 c="cool!"
4 print(a, b, c)
5 I
STEP 6
command line:
From within the same folder as the code you're 
going to run, enter the following into the
STEP 9
python3 hello.py
This will execute the code we created, which to remind you is:
Since Sublime Text isn’t available for the Raspberry 
Pi, you're going to temporarily leave the Pi for the 
moment and use Sublime as an example that you don't necessarily 
need to use the Python IDLE. With the hello.py file open, alter it to 
include the following:
a=”Python” 
b=”is” 
c=”coolI” 
print(a, b, c)
name=input(“What is your name? “) 
printC'Hello,”, name)
S C:\Users\david\Documents\Python\hello.py • - Sublime Text (UNREGISTERED) 
File Edit Selection Find View Goto Tools Project Preferences Help
1 a=”Python"
2 b="is"
3 c="cool!"
4 print(a, b, c)
5 
name=input("What is your name? ")
6 
print=("Hello,", name)
STEP 7
Naturally, since this is Python 3 code, using the 
syntax and layout that's unique to Python 3, it only 
works when you use the python3 command. If you like, try the same 
with Python 2 by entering:
python hello.py
STEP 10
code with:
Save the hello.py file and drop back to the 
command line. Now execute the newly saved
python3 hello.py
The result will be the original Python is cool! statement, together 
with the added input command asking you for your name, and 
displaying it in the command window.
pi@raspberrypr -/Documents/Python Code
File Edit Tabs Help
pi@raspberrypi:-/Docinents/Python Code $ python3 hello.py 
Python is cool!
What is your name? David
Hello, David
piPraspberrypi:-/Docunients/Python Code $ |
www.pclpublications.com

Getting Started with Python
Numbersand Expressions
We've seen some basic mathematical expressions with Python, simple addition and the 
like. Let's expand on that now and see just how powerful Python is as a calculator. You 
can work within the IDLE Shell or in the Editor, whichever you like.
IT'S ALL MATHS, MAN
You can get some really impressive results with the mathematical powers of Python; as with most, if not all, programming 
languages, maths is the driving force behind the code.
STEP1 
a
Open up the GUI version of Python 3, as mentioned 
you can use either the Shell or the Editor. For the 
time being, you're going to use the Shell just to warm our maths 
muscle, which we believe is a small gland located at the back of the 
brain (or not).
STEP 3 
A
You can use all the usual mathematical operations: 
divide, multiply, brackets and so on. Practise with a 
few, for example:
1/2
6/2
2+2*3
Cl+2)+(3*4)
STEP 2
In the Shell enter the
2+2
54356+34553245
99867344*27344484221
decimal number. In Python these are called floats, 
or floating point arithmetic. However, if you need an integer as 
opposed to a decimal answer, then you can use a double slash:
1//2
6//2
You can see that Python can handle some quite large numbers.
And so on.
Python & C++ Coding

Numbersand Expressions
STEP 5
________ J
You can also use an operation to see the remainder 
left over from division. For example:
10/3
This will be displayed as '0b1 T, converting the 
integer into binary and adding the prefix Ob to the 
front. If you want to remove the Ob prefix, then you can use:
STEP 8
Will display 3.333333333, which is of course 3.3-recurring. If you 
now enter:
10%3
This will display 1, which is the remainder left over from dividing 10 
into 3.
formatCS, ‘b’)
The Format command converts a value, the number 3, to a 
formatted representation as controlled by the format specification, 
the 'b' part.
»> (1*2)+(3*4) 
15
>» 1//2 
0
»> 6//2 
3
»> 10/3
3.3333333333333335 
»> 10%3
1
»> 2**3 
8
»> 10**10 
10000000000
»> bin(3) 
•obir
»> format(3, ’b’)
STEP 6
________ J
Next up we have the power operator, or 
exponentiation if you want to be technical. To work
STEP 9
out the power of something you can use a double multiplication 
symbol or double-star on the keyboard:
A Boolean Expression is a logical statement that will 
either be true or false. We can use these to compare 
data and test to see if it’s equal to, less than or greater than. Try this 
in a New File:
2**3
10**10
Essentially, it's 2x2x2 but we're sure you already know the basics 
behind maths operators. This is how you would work it out in Python.
»> 6/2
3.0 
»> 2+2*3
8
>» (1+2)+(3*4)
15 
»> 1//2 
0
»> 6//2 
3
»> 10/3
3.3333333333333335 
»> 10%3
1 
»> 2**3
8 
»> 10**10 
10000000000
a = 6
I 
| tllp t-QrmAi Hun options Bind,
print(T, a == 6) 
print(2, a == 7) 
„
print(3, a == 6 and b == 7) 
; 
”
print(4, a == 7 and b == 7) 
KS: -MV MV’
print(5, not a == 7 and b == 7) 
print(6, 
a == 7 or b == 7)
print(7, 
a == 7 or b == 6)
print(8, not (a == 7 and b == 6))
print(9, not a == 7 and b == 6)
STEP 7
Numbersand expressions don't stop there. Python 
has numerous built-in functions to work out sets 
of numbers, absolute values, complex numbers and a host of 
mathematical expressionsand Pythagorean tongue-twisters. For 
example, to convert a number to binary, use:
STEP 10 -J
Execute the code From Step 9, and you can see a 
series of True or False statements, depending on 
the result of the two defining values: 6 and 7. It's an extension of 
whatyou've looked at, and an important part of programming.
bin(3)
»> 1/2 
0.5 
»> 6/2
3.0
»> 2+2*3
8
»> (1+2)+(3*4)
15
»> 1//2 
0
»> 6//2
3 
»> 10/3 
3.3333333333333335 
>» 10%3
1
>» 2**3
8 
»> 10**10 
10000000000
»> bin(3) 
•obir 
»>l
www.pclpublications.com

Getting Started with Python
Using Comments
When writing your code, the flow of it, what each variable does, how the overall 
program will operate and so on is all inside your head. Another programmer could 
follow the code line by line but over time, it can become difficult to read.
#COMMENTS!
Programmers use a method of keeping their code readable by commenting on certain sections. If a variable is used, the 
programmer comments on what it's supposed to do, for example. It’s just good practise.
STEP1
a
Start by creating a new instance of the IDLE Editor 
(File > New File) and create a simple variable and 
print command:
STEP 3
A
0=10
print(“The value of A is,”, a)
Save the file and execute the code.
Resave the code and execute it. You can see that the 
output in the IDLE Shell is still the same as before, 
despite the extra lines being added. Simply put, the hash symbol (#) 
denotes a line of text the programmer can insert to inform them, 
and others, of what's going on without the user being aware.
Comments.py - /home/pi/Documen.../Python Code/Comments.py (3.4.2) _ □ x
File Edit Format Run Options Windows Help
a=10
print("The value of A is,”, a)
STEP 2 
__________ A
Running the code will return the line: The value of A 
is, 10 into the IDLE Shell window, which is what we 
expected. Now, add some of the types of comments you'd normally 
see within code:
# Set the start value of A to 10 
a=10
# Print the current value of A 
print(“The value of A is,”, a)
STEP 4
Let's assume that the variable A that we've created 
is the number of lives in a game. Every time the 
player dies, the value is decreased by 1. The programmer could 
insert a routine along the lines of:
a=a-l
print(“You’ve just lost a life!”) 
print(“You now have”, a, “lives left!”)
Python & C++ Coding

(fusing Comments
STEP 5 
A
Whilst we know that the variable A is lives, and 
that the player has just lost one, a casual viewer or 
someone checking the code may not know. Imagine fora moment 
that the code is twenty thousand lines long, instead of just our 
seven. You can see how handy comments are.
STEP 8
Inline comments are comments that follow a section 
of code. Take our examples from above, instead of 
inserting the code on a separate line, we could use:
a=10 # Set the start value of A to 10
print(“The value of A is,”, a) # Print the current 
value of A
a=a-l # Player lost a life!
print(“You’ve just lost a life!”)
print(“You now have”, a, “lives left!”) # Inform
player, and display current value of A (lives)
Comments py - /home/pi/Documents/Python Code/Comments py (3.4.2) 
_ □ x
File Edit Format Run Options Windows Help
a=to ff Set the start value of A to 10
print("The value or A is, . a) 9 Print the current value or A
i a=a-1 # Player lost a life!
I printC'You've just lost a life!")
" print(“You now have", a. "lives left!") # Inform player, and display current value of A (lives
STEP 6 
A
Essentially, the new code together with comments 
could look like:
# 
Set the start value of A to 10 
a=10
# Print the current value of A 
print(“The value of A is,”, a)
# 
Player lost a life!
a=a-l
# 
Inform player, and display current value of A
(lives)
print(“You’ve just lost a life!”)
print(“You now have”, a, “lives left!”)
STEP 9
The comment, the hash symbol, can also be used to 
comment out sections of code you don't want to be 
executed in your program. For instance, if you wanted to remove 
the first print statement, you would use:
# print(“The value of A is,”, a)
STEP 7
You can use comments in different ways. For 
example, Block Comments are a large section of 
text that details what's going on in the code, such as telling the code 
reader what variables you're planning on using:
STEP 10 -J
You also use three single quotes to comment 
out a Block Comment or multi-line section of 
comments. Place them before and after the areasyou want to 
comment for them to work:
# This is the best game ever, and has been 
developed by a crack squad of Python experts 
# who haven’t slept or washed in weeks. Despite 
being very smelly, the code at least
# works really well.
This is the best game ever, and has been developed 
by a crack squad of Python experts who haven’t 
slept or washed in weeks. Despite being very 
smelly, the code at least works really well.
tile tdrt format Hun options windows Help
1 This is the best gome ever, and has been developed by a crack squad of Python experts 
I who havenDt slept or washed in weeks. Despite being very smelly, the code at least 
I works really wcll.|
www.pclpublications.com

Getting Started with Python
Working with Variables
We've seen some examples of variables in our Python code already but it's always 
worth going through the way they operate and how Python creates and assigns certain 
values to a variable.
VARIOUS VARIABLES
You'll be working with the Python 3 IDLE Shell in this tutorial. If you haven't already, open Python 3 or close down the previous 
IDLE Shell to clear up any old code.
STEP1 
a
In some programming languages you're required 
to use a dollar sign to denote a string, which is a 
variable made up of multiple characters, such as a name of a person. 
In Python this isn’t necessary. For example, in the Shell enter: 
name=”David Hayward” (oruseyourown name, unless you're 
also called David Hayward).
STEP 3 
A
You've seen previously that variables can be 
concatenated using the plus symbol between the 
variable names. In our example we can use: print (name + 
“ + title). The middle part between the quotations allows us to 
add a colon and a space, as variables are connected without spaces, 
so we need to add them manually.
Python 3.4.2 Shell 
_ □ x
Python 3.4.2 Shell
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default. Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licensee)" for more information.
»> name-”David Hayward"
»> print (name)
David Hayward
File Edit Shell £ebug Options Windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licenseO" for more information.
»> name= "David Hayward"
> 
» print (name)
David Hayward
> 
» type (name)
<class 'str‘>
»> title="Descended from Vikings"
»> print (name + ": " + title)
David Hayward: Descended from Vikings 
»> |
STEP 2
You can check the type of variable in use by 
issuing the type () command, placing the name of 
the variable inside the brackets. In our example, this would be: 
type (name). Add a new string variable: title=”Descended 
from Vikings”.
STEP 4
You can also 
combine variables 
within another variable. For 
example, to combine both name 
and title variables into a new 
variable we use:
character=name + “: “ + 
title
Then output the content of the 
new variable as:
print (character)
Numbers are stored as different 
variables:
age=44
Type (age)
Which, as we know, are integers.
Python 3.4 ]
Elie Edit Shell Cebug Qptions windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:1 
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licenseO" 
»> name= "David Hayward" 
»> print (name)
David Hayward 
»> type (name) 
<class 'str'> 
»> title""Descended from Vikings" 
>» print (name + ": “ * title)
David Hayward: Descended from Vikings 
»> character=name + “: " + title 
»> print (character)
David Hayward: Descended from Vikings
>» age-44
»> type (age)
<class 'int'>
Python & C++ Coding

Working with Variables
STEP 5 
A
However, you can't combine both strings and 
integer type variables in the same command, asyou 
would a set of similar variables. You need to either turn one into the 
other or vice versa. When you do try to combine both, you get an 
error message:
print (name + age)
Python 3.4.2 (default, Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licensee)” for more information.
»> name="David Hayward"
»> print (name)
David Hayward
»> type (name)
<class ’str‘>
»> title-"Descended from Vikings"
»> print (name + 
" + title)
David Hayward: Descended from Vikings 
»> character=name + 
“ + title
»> print (character)
David Hayward: Descended from Vikings 
ill »> age-44 
»> type (age) 
cclass ’int’> 
»> print (name+age)
Traceback (most recent call last):
File "<pyshell#9>", line 1. in <module> 
print (name+age)
TypeError: Can't convert ‘int’ object to str implicitly 
St
>» I
STEP 8
This presents a bit of a problem when you want to 
work with a number that’s been inputted by the 
user, as age + 10 won't work due to being a string variable and an 
integer. Instead, you need to enter:
int(age) + 10
This will TypeCast the age string into an integer that can be 
worked with.
Python 3.4.2 Shell______________________- □
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default. Oct 19 2014. 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or “licensed" for more information.
»> age- input ("How old are you? ”)
How old are you? 44
»> type(age)
cclass ‘str‘>
»> age + 10
Traceback (most recent call last):
File "<pyshell#2>", line 1, in <module>
age + 10
TypeError: Can’t convert ’int" object to str implicitly
>» int(age) + 10
54
»>l
STEP 6
This is a process known as Typecasting. The Python 
code is:
print (character + “ is “ + str(age) + “ years 
old.”)
or you can use:
print (character, “is“, age, “years old.”)
Notice again that in the last example, you don’t need the spaces 
between the words in quotes as the commas treat each argument 
to print separately.
»> print (name + age)
Traceback (most recent call last):
File "spyshellfflB*", line 1, in <module> 
print (name + age)
TypeError: Can’t convert int’ object to str implicitly 
»> print (character + " is " + str(age) + " years old.”) 
David Hayward: Descended from Vikings is 44 years old.
>» print (character, "is", age, "years old.")
David Hayward: Descended from Vikings is 44 years old. 
»>
STEP 9
The use or Typecasting is also important when 
dealing with Floating point arithmetic; remember: 
numbers that have a decimal point in them. For example, enter:
shirt=19.99
Now enter type(shirt) and you’ll see that Python has allocated 
the number as a 'float', because the value contains a decimal point.
Python 3.4.2 Shell
file Edit Shell Debug Options Windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright”, "credits” or ”license()" for more information.
>» shirt=19.99
»> type(shirt) 
cclass 'float'>
»’l
STEP 7 
a
Another example of Typecasting is when you ask for 
input from the user, such as a name, for example, 
enter:
age= input (“How old are you? “)
All data stored from the Input command is stored as a string variable.
STEP 10 -J
When combining integersand floats Python 
usually converts the integer to a float, but should 
the reverse ever be applied it’s worth remembering that Python 
doesn't return the exact value. When converting a float to an 
integer, Python will always round down to the nearest integer, 
called truncating; in our case instead of 19.99 it becomes 19.
Python 3.4.2 Shell
Python 3.4.2 Shell
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default. Oct 19 2014. 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licenseO" for more information.
»> age- input ("How old are you? ")
How old are you? 44
»> type(age)
cclass ‘str‘>
»> I
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11) 
[GCC 4.9.1] on linux
Type "copyright", "credits” or "licenseO” for more information. 
»> shirt=19.99 
»> type(shirt) 
cclass 'float'> 
»> int(shirt) 
19 
>»l
www.pclpublications.com

Getting Started with Python
User Input
We've seen some basic user interaction with the code from a few of the examples 
earlier, so now would be a good time to focus solely on how you would get information 
from the user then store and present it.
USER FRIENDLY
The type of input you want from the user will depend greatly on the type of program you're coding. For example, a game may 
ask for a character's name, whereas a database can ask for personal details.
STEP 1
________ J
something really simple, enter:
If it's not already, open the Python 3 IDLE Shell, 
and start a New File in the Editor. Let's begin with
STEP 3
we want:
Now that we have the user’s name stored in a 
couple of variables we can call them up whenever
printC“Hello”)
firstname=input(“What is your first name? “) 
print(“Thanks.”)
surname=input(“And what is your surname? “)
STEP 2 
Save and execute the code, and as you already no 
doubt suspected, in the IDLE Shell the program will 
ask for your first name, storing it as the variable firstname, followed 
by your surname; also stored in its own variable (surname).
print(“Welcome”, firstname, surname, “. I hope 
you’re well today.”)
Run the code and you can see a slight issue, the 
full stop after the surname follows a blank space. 
To eliminate that we can add a plus sign instead of the comma in 
the code:
STEP 4
print(“Welcome”, firstname, surname+“. I hope 
you’re well today.”)
Python & C++ Coding

(^2 User Input
STEP 5 
A
You don't always have to include quoted text within 
the input command. For example, you can ask the 
user their name, and have the input in the line below:
print(“Hello. What’s your name?”) 
name=input()
STEP 8
What you've created here is a condition, which we 
will coversoon. In short, we're using the input from 
the userand measuring it against a condition.So, if the userenters 
David as their name, the guard will allow them to pass unhindered. 
Else, if they enter a name other than David, the guard challenges 
them to a fight.
userinput.py - /home/pi/Documents/Python Code/usi
File Edit Format Run Options Windows Help 
printC'Hello. What's your name?") 
name-input()
STEP 6 
A
The code from the previous step is often regarded 
as being a little neater than having a lengthy 
amount of text in the input command, but it's not a rule that's set in 
stone, so do as you like in these situations. Expanding on the code, 
try this:
print(“Halt! Who goes there?”) 
name=input()
STEP 9
Just as you learned previously, any input from a 
user is automatically a string, so you need to apply a 
TypeCast in order to turn it into something else. This creates some 
interesting additions to the input command. For example:
# Code to calculate rate and distance 
print(“Input a rate and a distance”) 
rate = float(input(“Rate: “))
STEP 7
It's a good start to a text adventure game, perhaps? 
Now you can expand on it and use the raw input 
from the user to flesh out the game a little:
if name==”David”:
print(“Welcome, good sir. You may pass.”) 
else:
print(“I know you not. Prepare for battle!”)
STEP 10 
__________J
To finalise the rate and distance code, we can add: 
distance = float(input(“Distance: “)) 
print(“Time:”, (distance / rate))
Save and execute the code and enter some numbers. Using the 
float(input element, we've told Python that anything entered is a 
floating point number rather than a string.
www.pclpublications.com

Getting Started with Python
Creating Functions
Now that you've mastered the use of variables and user input, the next step is to tackle 
functions. You've already used a few functions, such as the print command but Python 
enables you to define your own functions.
FUNKY FUNCTIONS
A function is a command that you enter into Python to do something. It’s a little piece of self-contained code that takes data, 
works on it and then returns the result.
STEP1 
a
It’s not just data that a function works on. They can 
do all manner of useful things in Python, such as 
sort data, change items from one format to another and check the 
length or type of items. Basically, a function is a short word that's 
followed by brackets. For example, len(), list() or type().
Press F5 and save the code to execute it.
STEP 3 
A
You can pass variables through functions in much 
the same manner. Let's assume you want the 
number of letters in a person's surname, you could use the following 
code (enter the text editor for this example):
name=input (“Enter your surname: “) 
count=Len(name)
print (“Your surname has", count, “letters in 
it.”)
STEP 2 
________ J
A function takes data, usually a variable, works on 
it depending on what the function is programmed
to do and returns the end value. The data being worked on goes 
inside the brackets, so if you wanted to know how many letters 
are in the word antidisestablishmentarianism, then you'd enter: 
len(“antidisestablishmentarianism”)and the number 28 
would return.
STEP 4
Python has tens of functions built into it, far too 
many to get into in the limited space available here. 
However, to view the list of built-in functions available to Python 3, 
navigate to www.docs.python.org/3/library/functions.html. These 
are the predefined functions, but since users have created many 
more, they're not the only ones available.
Python & C++ Coding

STEP 5 
A
6 Creating Functions
Additional functions can be added to Python 
through modules. Python has a vast range of 
modules available that can cover numerous programming duties. 
They add functions and can be imported as and when required. For 
example, to use advanced mathematics functions enter:
STEP 6 
A
To use a function from a module enter the name of 
the module followed by a full stop, then the name 
of the function. For instance, using the math module, since you've 
just imported it into Python, you can utilise the square root function. 
To do so, enter:
import math
math.sqrt(16)
Once entered, you have access to alt the math module functions.
You can see that the code is presented as module.function(data).
FORGING FUNCTIONS
There are many different functions you can import created by other Python programmers and you will undoubtedly come 
across some excellent examples in the future; you can also create your own with the def command.
STEP1
Choose File > New File to enter the editor, let’s 
create a function called Hello, that greets a user.
Enter:
STEP 3
J
To modify it further, delete the Hello("David") line, 
the last line in the script and press Ctrl+S to save 
the new script. Close the Editor and create a new file (File > New 
Fite). Enter the following:
Ifrom Hello import Hello]
Press F5 to save and run the script. You can see Hello in the Shell,
type in Hello() and it returns the new function.
Press F5 to save and execute the code.
Let's now expand the function to accept a 
variable, the user's name for example. Edit your 
script to read:
STEP 2
def Hello(name)
Hello”, name
What you've just done is import the Hello function 
from the saved Hello.py program and then used it 
to say hello to David. This is how modules and functions work: you 
import the module then use the function. Try this one, and modify 
it for extra credit:
STEP 4
This will now accept the variable name, otherwise it prints Hello 
David. In the Shell, enter: name=("Bob"), then: Hello(name). Your 
function can now pass variables through it.
£«• £« SMf fiptlonj window U«lr
mno(n«w):
H»Uo Oavid
>>> Hello(rua»)
www.pclpublications.com
I9

Getting Started with Python
Conditionsand Loops
Conditions and loops are what makes a program interesting; they can be simple or 
rather complex. How you use them depends greatly on what the program is trying to 
achieve; they could be the number of lives left in a game or just displaying a countdown.
TRUE CONDITIONS
Keeping conditions simple to begin with makes learning to program a more enjoyable experience. Let's start then by checking 
if something is TRUE, then doing something else if it isn't.
STEP1 
a
Let's create a new Python program that will ask 
the user to input a word, then check it to see if it’s 
a four-letter word or not. Start with File > New File, and begin with 
the input variable:
word=input(“Please enter a four-letter word: “)
Now we can create a new variable, then use the len 
function and pass the word variable through it to 
get the total number of letters the user has just entered:
STEP 2
word=input(“Please enter a four-letter word: “) 
word_length=len(word)
STEP 3 a
Now you can use an if statement to check if the 
wordjength variable is equal to four and print a 
friendly conformation if it applies to the rule:
word=input(“Please enter a four-letter word: “) 
word_length=len(word)
if word_length == 4:
print (word, “is a four-letter word. Well done.”)
The double equal sign (==) means check if something is equal to 
something else.
‘Untitled* 
_ □ x
File Edit Format Run Options Windows Help
word=input("Please enter a four-letter word: ")
word_length=len(word)
if word_length == 4:
print (word, "is a four-letter word. Well done.")
STEP 4
The colon at the end of IF tells Python that if this 
statement is true do everything after the colon 
that’s indented. Next, move the cursor back to the beginning of 
the Editor:
word=input(“Please enter a four-letter word: “) 
word_length=len(word)
if word_length == 4:
print (word, “is a four-letter word. Well 
done.”) 
else:
print (word, “is not a four-letter word.”)
Python & C++ Coding

(^Conditions and Loops
STEP 5 
A
Press F5 and save the code to execute it. Enter 
a four-letter word in the Shell to begin with, you 
should have the returned message that it's the word is four letters. 
Now press F5 again and rerun the program but this time enter a 
five-letter word. The Shell will display that it's not a four-letter word.
STEP 6 
A
Now expand the code to include another conditions.
Eventually, it could become quite complex. We've 
added a condition for three-letter words:
word=input(“Please enter a four-letter word: “) 
word_length=len(word)
if word_length == 4:
print (word, “is a four-letter word. Well
done.”)
elif word_length == 3:
print (word, “is a three-letter word. Try again.”) 
else:
print (word, “is not a four-letter word.”)
LOOPS
A loop looks quite similar to a condition but they are somewhat different in their operation. A loop will run through the same 
block of code a number of times, usually with the support of a condition.
STEP1
Let's start with a simple While statement. Like IF, 
this will check to see if something is TRUE, then run 
the indented code:
STEP 3
The For loop is another example. For is used to 
loop over a range of data, usually a list stored as 
variables inside square brackets. For example:
words=|_ Cat , Dog , Unicorn J
print (xj 
x = x + 1
for word in words
■.'I 11? x<10:
*Untitled*
File Edit Format Bun Options Windows Help
The difference between if and while is when while 
gets to the end of the indented code, it goes back 
and checks the statement is still true. In our example x is less than 
10. With each loop it prints the current value of x, then adds one to 
that value. When x does eventually equal 10 it stops.
STEP 2
STEP 4
The For loop can also be used in the countdown 
example by using the range function:
for x in range (1?
P.tlwn 
(GCC 4... 
T»pe “copyright-.
The x=x+1 part isn't needed here because the range function 
creates a list between the first and last numbers used.
toopl.py-/hc
www.pclpublications.com

Getting Started with Python
Python Modules
We've mentioned modules previously, (the Math module) but as modules are such a 
large part of getting the most from Python, it's worth dedicating a little more time to 
them. In this instance we're using the Windows version of Python 3.
MASTERING MODULES
Think of modules as an extension that's imported into your Python code to enhance and extend its capabilities. There are 
countless modules available and as we've seen, you can even make your own.
STEP1 
a
Although good, the built-in functions within Python 
are limited. The use of modules, however, allows us 
to make more sophisticated programs. As you are aware, modules 
are Python scripts that are imported, such as import math.
STEP 3 
A
L<p Python 3.62 Shell 
— 
□ X
File Edit Shell Debug Options Window Help
Python 3.6.2 (v3.6.2:5fd33b5, Jul 8 2017, 04:14:34) [MSC v.1900 32 bit (Intel)] 
on Win32
Type "copyright'*, "credits" or "license ()" for more information.
»> import math
The result is an error in the IDLE Shell, as the 
pygame module isn't recognised or installed in 
Python. To install a module we can use PIP (Pip Installs Packages). 
Close down the IDLE Shell and drop into a command prompt or 
Terminal session. At an elevated admin command prompt, enter:
pip install pygame
EB Command Prompt
C:\Users\david>pip install pygame
STEP 2
Some modules, especially on the Raspberry Pi, 
are included by default, the math module being a 
prime example. Sadly, other modules aren't always available. A good 
example on non-Pi platforms is the pygame module, which contains 
many functions to help create games. Try: import pygame.
STEP 4
The PIP installation requires an elevated status 
due it installing components at different locations. 
Windows users can search for CMD via the Start button and right­
click the result then click Run as Administrator. Linux and Mac users 
can use the Sudo command, with sudo pip install package.
L<Jk Python 3.6.2 Shell 
- 
□ X
File Edit Shell Debug Options Window Help
Python 3.6.2 (v3.6.2:5fd33b5, Jul 8 2017, 04:14:34) [MSC v.1900 32 bit (Intel)] 
on Win32
Type "copyright", "credits" or "license))" for more information. 
»> import math 
>» import pygame 
Traceback (most recent call last) :
File "<pyshell#l>", line 1, in <module> 
import pygame
ModuleNotFoundError: No module named 'pygame*
Administrator: Command Prompt
Microsoft Windows [Version 10.0.15063]
(c) 2017 Microsoft Corporation. All rights reserved.
C:\WINDOWS\system32>pip install pygame
Collecting pygame
Using cached pygame-1.9.3-cp36-cp36m-win32.whl
Installing collected packages: pygame
Successfully installed pygame-1.9.3
C:\WINDOWS\system32>
Python & C++ Coding

Q Python Modules
STEP 5 
A
Close the command prompt orTerminal and 
relaunch the IDLE Shell. When you now enter: 
import pygame, the module will be imported into the code 
without any problems. You'll find that most code downloaded or 
copied from the Internet will contain a module, mainstream of 
unique, these are usually the source of errors in execution due to 
them being missing.
[jjr Python 3.6.2 Shell 
- 
□ X
File Edit Shell Debug Options Window Help
Python 3.6.2 (v3.6.2:5fd33b5, Jul 8 2017, 04:14:34) [MSC v.1900 32 bit (Intel)] 
on Win32
Type "copyright", "credits" or "license()" for more information. 
»> import pygame
STEP 8 
________ J
Multiple modules can be imported within your code. 
To extend our example, use:
import random
import math
for I in range(5):
printfrandom.randint(l, 25)) 
print(math.pi)
[jsr P.nd Number.py - C:/Users/david/Documents/Python/Rnd Number.py (3.6.2) 
— 
□ X
File Edit Format Run Options Window Help 
import random 
import math
for i in range(5): 
print(random.randint(1, 25))
print(math.pi)
STEP 6 
A
The modules contain the extra code needed to 
achieve a certain result within your own code, as 
we've previously experimented with. For example:
import random
Brings in the code from the random number generator module. You 
can then use this module to create something like:
for i in range(10):
print(random.randint(l, 25))
L4 “Unfitted* 
— 
□ X
File Edit Format Run Options Window Help 
import random 
for i in range(10): 
print(random.randint(1, 25))
STEP 9
The result is a string of random numbers followed 
by the value of Pi as pulled from the math module 
using the print(math.pi) function. You can also pull in certain 
functions from a module by using the from and import commands, 
such as:
from random import randint
for i in range(5): 
print(randint(l, 25))
Rnd Number.py- C:/Users/david/Documents/Python/Rnd Number.py (3.6.2) 
— 
□ X
File Edit Format Run Options Window Help 
from random import randint
for i in range(5): 
print(randint(1, 25))
STEP 7
This code, when saved and executed, will display ten 
random numbers from 1 to 25. You can play around 
with the code to display more or less, and from a great or lesser 
range. For example:
import random
for i in range(25):
print(random.randintfl, 100))
STEP 10
This helps create a more streamlined approach to 
programming. You can also use import module*, 
which will import everything defined within the named module. 
However, it's often regarded as a waste of resources but it works 
nonetheless. Finally, modules can be imported as aliases:
import math as m
printfm.pi)
Of course, adding comments helps to tell others what's going on.
*Rnd Number.py - G/Users/david/Documents/Python/Rnd Number.py (3.6.2)* 
— 
□ X
File Edit Format Run Options Window Help 
import math as m
print(m.pi)
www.pclpublications.com

Index
Working 
with Data
Python & C++ Coding

Working with Data
Data is everything. With it you can 
display, control, add, remove, create 
and manipulate Python to your every 
demand. Over these coming pages we 
look at how you can create lists, tuples, 
dictionaries and multi-dimensional lists; 
and see how to use them to forge exciting 
and useful programs.
Then, you can learn how to use date 
and time functions, write to files in your 
system and even create graphical user 
interfaces that take your coding skills to 
new levels and into new project ideas.
46 Lists
48 Tuples
50 Dictionaries
52 Splitting and Joining Strings
54 Formatting Strings
56 
Date and Time
58 
Opening Files
60 Writing to Files
62 Exceptions
64 Python Graphics
www.pclpublications.com

Working with Data
Lists
Lists are one of the most common types of data structures you will comes across in 
Python. A list is simply a collection of items, or data if you prefer, that can be accessed 
as a whole, or individually if wanted.
WORKING WITH LISTS
Lists are extremely handy in Python. A list can be strings, integers and also variables. You can even include functions in lists, 
and lists within lists.
STEP1 
a
A list is a sequence of data values called items. You 
create the name of your list followed by an equals 
sign, then square brackets and the items separated by commas; 
note that strings use quotes:
STEP 3 
A
You can also access, or index, the last item in a list by 
using the minus sign before the item number [-1], 
or the second to last item with [-2] and so on. Trying to reference an 
item that isn't in the list, such as [10] will return an error:
numbers = [1, 4, 7, 21, 98, 156] 
mythical_creatures - [“Unicorn”, “Balrog”, 
“Vampire”, “Dragon”, “Minotaur”]
numbers [-1]
mythical_creatures[-4]
Python 3.4.2 Shell 
_ □ x
rile Edit Shell Debug Options Windows Help
Python 3.4.2 (default. Oct 19 2014. 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "liccnscO" for more information.
»> numbers -[1.4 , 7, 21. 98, 156]
»> mythical_creatures = ["Unicorn", "Balrog", "Vampire", "Dragon". "Minotaur"]
STEP 2
Once you've defined your list you can call each 
by referencing its name, followed by a number. Lists 
start the first item entry as 0, followed by 1,2, 3 and so on.
For example:
numbers
To call up the entire contents of the list.
numbers[3]
To call the third from zero item in the list (21 in this case).
STEP 4
Slicing is similar to indexing but you can retrieve 
multiple items in a list by separating item numbers 
with a colon. For example:
numbers [1:3]
Will output the 4 and 7, being item numbers 1 and 2. Note that the 
returned values don't include the second index position (as you 
would numbers[1:3] to return 4, 7 and 21).
Type "copyright", "credits" or “licensed" for more information.
»> numbers - [1. 4, 7. 21. 98. 156]
»> mythical_creatures = ["Unicorn", "Balrog", "Vampire", “Dragon", "Minotaur") 
»> numbers
(1, 4. 7, 21. 98. 156)
»> numbers[3]
21
> 
» mythical_creatures
(‘Unicorn'. 'Balrog', 'Vampire'. 'Dragon'. 'Minotaur']
> 
» mythical_creatures[3]
'Dragon'
> 
» numbers[-1]
156
> 
» numbersf-21
98
»> mythical_creatures[-1]
'Minotaur'
> 
» mythical_creatures[-4]
'Balrog'
> 
» numbers[1:3]
(4. 7)
> 
» numbers[0:4]
(1. 4. 7. 21]
»> nunbers[3:5]
(21, 98]
numbers [ 1: ]
(4, 7, 21, 98, 156]
»> |
Python & C++ Coding

Lists
STEP 5 
A
You can update items within an existing list, remove 
items and even join lists together. For example, to 
join two lists you can use:
everything = numbers + niythical_creatures
Then view the combined list with:
STEP 8
You can view what can be done with lists by entering 
dir(list) into the Shell. The output is the available 
functions, for example, insert and pop are used to add and remove 
items at certain positions. To insert the number 62 at item index 4:
numbers.insert(4, 62)
everything
To remove it:
numbers.pop(4)
Python 3.4.2 Shell 
_ □ x
File Edit Shell Qebug Options Windows Help
Python 3.4.2 (default. Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licensee)" for more information.
»> numbers - [1. 4, 7. 21. 98, 156]
>» mythical_creatures - ("Unicorn", "Balrog", "Vampire", "Dragon", "Minotaur"]
»> everything = numbers ♦ mythical_creatures
»> everything
[1, 4, 7, 21. 98. 156, 'Unicorn', 'Balrog', 'Vampire', 'Dragon', 'Minotaur'] 
I
type copyngnt , credits or "licensee)" tor more mrormation. 
»> dir(list)
['____add_', '___class ', 
' contains ', '_delattr__ ', '__ de litem___ ', • dir__’
, '___doc_'_______ eq ', '____format ', ' ge_'. '__ getattribute__'. '___ getitem__'
, ’___ gt_', '____ hash ', ' iadd ', ' imul_', '____init__ ', ’__ iter___ ', ' le__'
. 
’_ len__ ’. '_ It___ '. '__ mul__ '. '__ne___', '__ new '. '___reduce___', '__ reduce_e
x__ ', '__ repr__ ’, '_ reversed___ ' , '__rmul___', '__ setattr_ ’, ’___ setitem__’, '__ s
izeof__ ', '__ str__', '__ subclasshook__ ', 'append', 'clear', 'copy', 'count'. 'ex
tend'. 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'] 
»> numbers = [1, 4, 7, 21. 98. 156] 
»> numbers 
[1. 4. 7, 21. 98. 156) 
»> numbers.insert(4, 62) 
>» numbers 
[1. 4, 7, 21, 62, 98, 156]
»> numbers.pop(4) 
62
>» numbers
[1, 4. 7, 21. 98. 156]
STEP 6 
A
Items can be added to a list by entering: 
numbers=numbers+[201]
Or for strings:
mythical_creatres=mythical_creatures+[“Griffin”]
Or by using the append function:
mythical_creatures.append(“Nessie”)
numbers.append(278)
»> numbers = [1. 4. 7. 21. 98. 156]
»> mythical_creatures - ("Unicorn", "Balrog", "Vampire", "Dragon", "Minotaur"] 
>» numbers
[1. 4, 7, 21, 98, 156]
»> mythical_creatures
['Unicorn', Balrog', Vampire', 'Dragon', 'Minotaur'] 
»> numbers=numbers+[201] 
»> numbers 
[1. 4, 7, 21. 98. 156. 201]
»> mythical_creatures“mythical_creatures+["Griffin"]
»> mythical_creatures
['Unicorn', 'Balrog', 'Vampire', 'Dragon', 'Minotaur', 'Griffin']
»> mythical_creatures.append("Nessie")
»> mythical_creatures
('Unicorn', 'Balrog'. 'Vampire', 'Dragon', 'Minotaur', 'Griffin', 'Nessie'] 
>» numbers.append(278) 
»> numbers
[1, 4, 7, 21, 98, 156, 201, 278]
»>l
STEP 9 
________ J
You also use the list function to break a string down 
into its components. For example:
list(“David”)
Breaks the name David into 'D', 'a', 'v', 'i', 'd'. This can then be passed 
to a new list:
name=list(“David Hayward”) 
name 
age=[44] 
user = name + age 
user
STEP 7
Removal of items can be done in two ways. The first 
is by the item number:
del numbers[7]
Alternatively, by item name:
mythical_creatures.remove(“Nessie”)
STEP 10
Based on that, you can create a program to store 
someone's name and age as a list:
name=input(“What’s your name? “) 
lname=li st(name)
age=int(input(“How old are you: “)) 
lage=[age]
»> mythical_creatures ■ ("Unicorn", "Balrog", "Vampire". "Dragon". "Minotaur] 
»> numbers
[1, 4, 7, 21, 98, 156]
>» mythical_creatures
[’Unicorn’, Balrog’, Vampire’, ’Dragon’, ’Minotaur’]
»> numbers=numbers+[201]
»> numbers
[1.4. 7, 21. 98. 156. 201]
»> mythical_creatures«mythical_creatures*["Griffin"]
»> mythical_creatures
[’Unicorn’, Balrog’, ’Vampire", 'Dragon'. 'Minotaur', 'Griffin']
»> mythical_creatures.append("Nessie")
»> mythical_creatures
['Unicorn', 'Balrog'. 'Vampire'. 'Dragon'. 'Minotaur', 'Griffin', ’Nessie']
»> numbers.append(278)
»> numbers
[1, 4, 7, 21, 98, 156, 201, 278]
»> del numbers[7]
»> numbers
[1, 4, 7, 21, 98. 156, 201]
»> mythical_creatures.remove("Uessie")
»> mythical_creatures
['Unicorn'. 'Balrog'. 'Vampire'. 'Dragon'. 'Minotaur', 'Griffin']
user = Iname + lage
The combined name and age list is called user, which can be called 
by entering user into the Shell. Experiment and see whatyou can do.
www.pclpublications.com

Working with Data
Tuples
Tuples are very much identical to lists. However, where lists can be updated, deleted or 
changed in some way, a tuple remains a constant. This is called immutable and theyTe 
perfect for storing fixed data items.
THE IMMUTABLE TUPLE
Reasons for having tuples vary depending on what the program is intended to do. Normally, a tuple is reserved for something 
special but they're also used for example, in an adventure game, where non-playing character names are stored.
STEP1
a
A tuple is created the same way as a list but in this 
instance you use curved brackets instead of square 
brackets. For example:
months=(“January”, “February”, “March”, “April”, 
“May”, “June”)
months
STEP 3
A
You can create grouped tuples into lists that contain 
multiple sets of data. For instance, here is a tuple 
called NPC (Non-Playable Characters) containing the character name 
and their combat rating for an adventure game:
NPC=[(“Conan”, 100), (“Belit”, 80), (“Valeria”,
95)]
Python 3.4.2 Shell
Python 3.4.2 Shell
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default. Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licenseO" for more information.
>» months=("January". "February", “March". "April". "May", “June”) 
»> months 
(•January’. ’February’. ’March’. ’April’. ’May’. ’June’)
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright”, "credits" or "licenseO" for more information.
»> NPC=[("Conan".100), ("Belit", 80). ("Valeria", 95)]
>» I
STEP 2
________ J
Just as with lists, the items within a named tuple can 
be indexed according to their position in the data
STEP 4
range, i.e.:
months[0]
months[5]
Each of these da ta i terns can be accessed as a 
whole by entering NPC into the Shell; or they can be 
indexed according to their position NPC[0]. You can also index the 
individual tuples within the NPC list:
NPC[0][1]
However, any attempt at deleting or adding to the tuple will result
in an error in the Shell.
Will display 100.
Python 3.4.2 Shell 
_ □ x
file Edit Shell Debug Options Windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11) 
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licenseO" for more information.
>» NPC=[("Conan”. 100). ("Belit". 80). ("Valeria". 95)] 
»> NPC
[(’Conan’. 100). (’Belit’. 80). (’Valeria’. 95)]
>» NPC[0] 
(’Conan’. 100) 
»> NPC[0][1] 
100
Python & C++ Coding

STEP 5 
A
It's worth noting that when referencing multiple 
tuples within a list, the indexing is slightly different 
from the norm. You would expect the 95 combat rating of the 
character Valeria to be NPC[4][5], but it's not. It's actually:
NPC[2][1]
STEP 8 -J
Now unpack the tuple into two 
corresponding variables:
(name, combat_rating)=NPC
You can now check the values by entering name and combat_rating.
STEP 6
________ J
This means of course that the indexing follows thus:
STEP 9
0
0, 0
0, 1
1
1, 0
1, 1
2
2, 0
2,1
Remember, as with lists, you can also index tuples 
using negative numbers which count backwards 
from the end of the data list. For our example, using the tuple with 
multiple data items, you would reference the Valeria character with:
NPC[2][-0]
Which as you can imagine, gets a little confusing when you've got a 
lot of tuple data to deal with.
Type "copyright", "credits" or "licensee)" for more information. 
»> NPC=[("Conan". 100). ("Belit11. 80). ("Valeria". 95)]
»> NPC[0] 
(•Conan1. 100)
»> NPC[0][0] 
1 Conan1
»> NPC[0][1] 
100
»> NPC[1] 
(‘Belit’. 80) 
»> NPC[1][0] 
•Belit1
»> NPC [ 1 ] [ 1 ] 
80
»> NPC[2] 
(‘Valeria1. 95)
>» NPC[2][0] 
‘Valeria1
»> NPC[2][1] 
95
Python 3 4.2 Shell
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default. Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licenseO” for more information.
»> IIPC=[( "Conan", 100), ("Belit", 80). ("Valeria", 95)]
»> NPC[2][-0]
■Valeria1
>» I
STEP 7
Tuples though utilise a feature called unpacking, 
where the data items stored within a tuple are 
assigned variables. First create the tuple with two items (name and 
combat rating):
NPC=(“Conan”, 100)
STEP 10 -J
You can use the max and min functions to find the 
highest and lowest values of a tuple composed of 
numbers. For example:
numbers=(10.3, 23, 45.2, 109.3, 6.1, 56.7, 99)
The numbers can be integersand floats.To output the highest and 
lowest, use:
print(max(numbers))
print(min(nunibers))
www.pclpublications.com

Working with Data
Dictionaries
Lists are extremely useful but dictionaries in Python are by far the more technical way 
of dealing with data items. They can be tricky to get to grips with at first but you'll soon 
be able to apply them to your own code.
KEY PAIRS
A dictionary is like a list but instead each data item comes as a pair, these are known as Key and Value. The Key part must be 
unique and can either be a number or string whereas the Value can be any data item you like.
STEP1 
a
Let's say you want to create a phonebook in Python.
You would create the dictionary name and enter 
the data in curly brackets, separating the key and value by a colon 
KeyiValue. For example:
phonebook={“Emma”: 1234, “Daniel”: 3456, “Hannah”: 
6789}
STEP 3 
A
As with lists and tuples, you can check the contents 
of a dictionary by giving the dictionary a name: 
phonebook, in this example. This will display the data items you've 
entered in a similar fashion to a list, which you're no doubt familiar 
with by now.
STEP 2
__________ A
Just as with most lists, tuples and so on, strings 
need be enclosed in quotes (single or double), 
whilst integerscan be left open. Remember that the value can be 
either a string or an integer, you just need to enclose the relevant 
one in quotes:
STEP 4
The benefit of using a dictionary is that you 
can enter the key to index the value. Using the 
phonebook example from the previous steps, you can enter:
phonebook2={“David”: “0987 654 321”}
phonebook[“Emma”] 
phonebook[“Hannah”]
Python 3.4.2 Shell 
_ □ x
Elie Edit Shell Debug Options Windows Help
Python 3.4.2 (default, Oct 19 2014. 13:31:11)
(GCC 4.9.1 J on linux
Type "copyright", "credits” or "licensed" for more information.
>» phonebook={"Emma": 1234, "Daniel”: 3456, "Hannah”: 6789}
»> phonebook2={"David": "0987 654 321"}
»> |
Python & C++ Coding

Dictionaries
STEP 5 
A
Adding to a dictionary is easy too. You can include 
a new data item entry by adding the new key and 
value items like:
phonebook[“David”] = “0987 654 321” 
phonebook
STEP 8
Next, you need to define the user inputs and 
variables: one for the person's name, the other 
for their phone number (let's keep it simple to avoid lengthy 
Python code):
name=input(“Enter name: “) 
number=int(input(“Enter phone number: “))
STEP 6 
A
You can also remove items from a dictionary by 
issuing the del command followed by the item's 
key; the value will be removed as well, since both work as a pair of 
data items:
del phonebook[“David”]
STEP 9
Note we've kept the number as an integer instead 
of a string, even though the value can be both 
an integer or a string. Now you need to add the user’s inputted 
variables to the newly created blank dictionary. Using the same 
process as in Step 5, you can enter:
phonebook[name] = number
STEP 7
Taking this a step further, how about creating a 
piece of code that will ask the user for the dictionary 
key and value items? Create a new Editor instance and start by 
coding in a new, blank dictionary:
STEP 10
Now when you save and execute the code, Python 
will ask fora name and a number. It will then insert
those entries into the phonebook dictionary, which you can test by 
entering into the Shell:
phonebook={}
phonebook
phonebook[“David”]
If the number needs to contain spaces you need to make it a string, 
so remove the int part of the input.
www.pclpublications.com

Working with Data
Splitting and
Joining Strings
When dealing with data in Python, especially from a user's input, you will undoubtedly 
come across long sets of strings. A useful skill to learn in Python programming is being 
able to split those long strings for better readability.
STRING THEORIES
You've already looked at some list Functions, using .insert, .remove, and .pop but there are also Functions that can be applied 
to strings.
STEP1
The main tool in the string Function arsenal is ,split(). 
With it you're able to split apart a string oF data, 
based on the argument within the brackets. For example, here's a 
string with three items, each separated by a space:
text=”Daniel Hannah Emma”
STEP 3
Note that the text.split part has the brackets, 
quotes, then a space Followed by closing quotes 
and brackets. The space is the separator, indicating that each list 
item entry is separated by a space. Likewise, CSV (Comma Separated 
Value) content has a comma, so you'd use:
text=”January,February,March,April,May,June” 
months=text.splitC",
months
STEP 2
Now let's turn the string into a list and split the 
content accordingly:
names=text.split(“ “)
Then enter the name oF the new list, names, to see the three items.
STEP 4 
________ J
You've previously seen how you can split a string 
into individual letters as a list, using a name:
name=list(“David”) 
name
The returned value is 'D', 'a', V, 'i', ’d'. Whilst it may seem a little 
useless under ordinary circumstances, it could be handy For creating 
a spelling game For example.
Python & C++ Coding

Splitting and Joining Strings
STEP 5 
A
The opposite of the .split function is .join, where 
you will have separate items in a string and can join 
them all together to form a word or just a combination of items, 
depending on the program you're writing. For instance:
alphabet^””.joinC[“a”,”b”,”c”,”d”,”e”]) 
alphabet
STEP 8 -J
As with the .split function, the separator doesn't 
have to be a space, it can also be a comma, a full 
stop, a hyphen or whateveryou like:
colours=[“Red”, “Green”, “Blue”] 
col=”,”.join(colours)
col
Eile Edit Shell Qebug Options Windows Help
This will display 'abode' in the Shell.
Python 3.4.2 (default. Oct 19 2014. 13:31:11)
[GCC 4.9.1) on linux
Type "copyright", "credits" or “liccnse(>" for more information.
»> list-("Conan", "raised", "his”, "mighty", "sword", "and”, "struck", "the", “demon"] 
»> text-" ".join(list)
conan raised his mighty sword and struck the demon- 
»> colours-(“Red". "Green". "Olue")
■ Red.Green.Blue'
STEP 6 
A
You can therefore apply .join to the separated name 
you made in Step 4, combining the letters again to 
form the name:
name=””.join(name)
name
We've joined the string back together, and retained the list called 
name, passing it through the .join function.
STEP 9 a
There's some interesting functions you apply to a 
string, such as .capitalize and .title. For example:
title=”conan the Cimmerian”
title.capitalize()
title. titleO
Python 3.4.2 Shell 
-ox
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default. Oct 19 2014, 13:31:11) 
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licensee)" for more information. 
»> title-"conan the Cimmerian" 
»> title.capitalize() 
‘Conan the Cimmerian' 
»> title.title() 
'Conan The Cimmerian'
STEP 7
A good example of using the .join function is when 
you have a list of words you want to combine into 
a sentence:
list=[“Conan”, “raised”, “his”, “mighty”, “sword”, 
“and”, “struck”, “the”, “demon”]
text=” “.join(list)
text
Note the space between the quotes before the .join function (where 
there were no spaces in the Step 6'sjoin)
STEP 10 -J
You can also use logic operators on strings, 
with the 'in' and 'not in' functions. These enable 
you to check if a string contains (or does not contain) a sequence 
of characters:
message=”Have a nice day” 
“nice” in message
’’bad” not in message 
“day” not in message 
“night” in message
Python 3.4.2 Shell 
_ □ x
Ells Edit Sho[l Qebug Options Windows H»ip
Python 3.4.2 (default. Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licensee)" for more information.
>» list-["Conan“. "raised", "his", "mighty", "sword", "and", "struck", "the", "demon")
>»> text-" ".jointlist) 
»> text
conan raised his mighty sword and struck the demon-
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default. Oct 19 2014. 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", “credits" or "license!)" for more information.
»> message-’Have a nice day"
»> “nice" in message
True
»> "bad" not in message
True
»> "day" not ir message
False
»> "night" in message
False
www.pclpublications.com

Working with Data
Formatting Strings
When you work with data, creating lists, dictionaries and objects you may often want 
to print out the results. Merging strings with data is easy especially with Python 3, as 
earlier versions of Python tended to complicate matters.
STRING FORMATTING
Since Python 3, string formatting has become a much neater process, using the .format function combined with curly brackets. 
It’s a more logical and better formed approach than previous versions.
STEP1 
a
The basic formatting in Python is to call each 
variable into the string using the curly brackets:
name=”Conan”
print(“The barbarian hero of the Hyborian Age is: 
{}”.format(name))
STEP 3 
A
You can of course also include integers into the mix: 
number=10000 
print(“{} of {} was a skilled mercenary, 
and thief too. He once stole {} gold from a 
merchant.”.format(name, place, number))
Python 3.4.2 Shell 
_ □ x
File Edit Shell Debug Options vyindows Help
Python 3.4.2 (default, Oct 19 2014. 13:31:11)
(GCC 4.9.1] on linux
Type "copyright", "credits" or "licenseO" for more information.
»> name="Conan”
»> print("The barbarian hero of the Hyborian Age is: {}".format(name))
The barbarian hero of the Hyborian Age is: Conan
»> |
STEP 2
Remember to close the print function with two sets 
of brackets, as you've encased the variable in one, 
and the print function in another. You can include multiple cases of 
string formatting in a single print function:
name=”Conan”
place=”Cimmeria”
print(“{} hailed from the North, in a cold land 
known as {}”.format(name, place))
STEP 4
There are many different ways to apply string 
formatting, some are quite simple, as we've shown 
you here; others can be significantly more complex. It all depends 
on whatyou want from your program. A good place to reference 
frequently regarding string formatting is the Python Docs webpage, 
found at www.docs.python.org/3.1/Ubrary/stnng.html. Here, you 
will find tons of help.
Python 3.4.2 Shell 
-ax
Eiie Edit Shell Debug options windows Help
python 3.4.2 (default, oct 19 2014, 13:31:11)
(GCC 4.9.1] on linux
Type "copyright”, "credits" or "licenseO” for more information.
»> name=''Conan”
>» place«"Cunmeri.a"
»> print("() hailed from the north, in a cold land known os ()”.format(na«nc. place)) 
Conan hailed from the North, in a cold land known as Cimmeria
>»l
7.1.3. Format String Syntax
Python & C++ Coding

Formatting Strings
STEP 5 
A
Interestingly you can reference a list using the string 
formatting function. You need to place an asterisk in 
front of the list name:
numbers=l, 3, 45, 567546, 3425346345 
print(“Some numbers: {}, {}, {}, {}, {}”. 
format(*numbers))
STEP 8 -J
You can also print out the content of a user’s input 
in the same fashion:
name=input(“What’s your name? “) 
print(“Hello {}.”.format(name)
STEP 6 
A
With indexing in lists, the same applies to calling a 
list using string formatting. You can index each item 
according to its position (from 0 to however many are present):
numbers=l, 4, 7, 9
print(“More numbers: {3}, {0}, {2},
{1}.”.format(*numbers))
STEP 9
You can extend this simple code example to display 
the first letter in a person's entered name:
name=input(“What’s your name? “)
print(“Hello .format(name))
lname=list(name)
print(“The first letter of your name is a {0}”.
format(*lname))
STEP 7
And as you probably suspect, you can mix strings 
and integers in a single list to be called in the 
.format function:
characters=[“Conan”, “Belit”, “Valeria”, 19, 27, 
20]
print (“{0} is {3} years old. Whereas {1} is {4} 
years old.”.format(*characters))
Python 3.4.2 Shell
Elie Edit Shell Qebug Options windows Help
STEP 10
You can also call upon a pair of listsand reference 
them individually within the same print function. 
Looking back the code from Step 7, you can alter it with:
names=[“Conan”, “Belit”, “Valeria”] 
ages=[25, 21, 22]
Creating two lists. Now you can call each list, and individual items: 
print(“{0[0]} is {1[0]} years old. Whereas {0[1]} 
is {![!]} years old.”.format(names, ages))
Python 3.4.2 (default, Oct 19 2014, 13:31:11) 
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licensee)" for more information.
»> characters=["Conan". "Belit", "Valeria". 19. 27. 20]
>» print ("{0} is {3} years old. Whereas (1) is {4} years old. ”.format(*characters)) 
Conan is 19 years old. Whereas Belit is 27 years old.
www.pclpublications.com

Working with Data
Date and Time
When working with data it's often handy to have access to the time. For example, you 
may want to time-stamp an entry or see at what time a user logged into the system and 
for how long. Luckily acquiring the date and time is easy, thanks to the Time module.
TIME LORDS
The time module contains functions that help you retrieve the current system time, reads the date from strings, formats the 
time and date and much more.
STEP1 
a
First you need to import the time module. It's one 
that's built-in to Python 3 so you shouldn't need to 
drop into a command prompt and pip install it. Once it's imported, 
you can call the current time and date with a simple command:
import time 
time.asctimeO
Python 3.4.2 Shell
Eile Edit Shell pebug Qptions Windows Help
STEP 3 
________ J
You can see the structure of how time is presented 
by entering:
time, local. timeO
The output is displayed as such: ‘time. struct_time(tm_ 
year=2017, tm_mon=9, tm_mday=7, tm_hour=9, 
tm_min=6, tm_sec=13, tm_wday=3, tm_yday=250, tm_ 
isdst=0) obviously dependent on your current time as opposed 
to the time shown above.
Python 3.4.2 (default, Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright”, "credits" or "licensee)“ for more information.
»> import time
»> time.asctimeO
■Thu Sep 7 08:44:24 2017'
Python 3.4.2 Shell 
_ □ x
file Edit Shell Qebug Qptions Windows Help
Python 3.4.2 (default. Oct 19 2014. 13:31:11)
[GCC 4.9.1) on linux
Type "copyright", "credits” or "licensed" for more information.
>» impor t time
»> time.localtime()
time.struct_time(tm_year=2017. tm_mon=9, tm_mday=7, tm_hour=9, tm_min=6, tm_sec=
13, tm_wday=3, tm_yday=250, tm_isdst=0)
STEP 2
________ J
The time function is split into nine tuples, these are 
divided up into indexed items, as with any other
STEP 4
tuple, and shown in the screen shot below.
There are numerous functions built into the time 
module. One of the most common of these is 
.strftimeQ. With it, you're able to present a wide range of arguments 
as it converts the time tuple into a string. For example, to display the 
current day of the week you can use:
Index
Field
Values
0
4-digit year
2016
1
Month
1 to 12
2
Day
1 to 31
3
Hour
0 to 23
4
Minute
0 to 59
5
Second
0 to 61 (60 or 61 are leap-seconds)
6
Day of Week
0 to 6 (0 is Monday)
7
Day of year
1 to 366 (Julian day)
8
Daylight savings
-1, 0, 1, -1 means library determines DST
time.strftime(‘%A’)
Python & C++ Coding

Date and Time
STEP 5 
A
This naturally means you can incorporate various 
functions into your own code, such as:
time.strftime(“%a”)
time.strftime(“%B”)
time.strftime(“%b”)
time.strftime(“%H”)
time.strftimeC“%H%M”)
STEP 8
You saw at the end of the previous section, in the 
code to calculate Pi to however many decimal places 
the users wanted, you can time a particular event in Python. Take 
the code from above and alter it slightly by including:
start_tinie=time. timeO
Then there's:
endtime=time.time()-start_time
logintime.py - /home/pi/Documents/Python Code/logmtime.py (3.4.2) -ax
Eile Edit Ffirmat Bun Options Windows Help
import time
start_time-time.time()
name=input("Enter login name: ") 
endtime-time.time()-start_time
print("Welcome", name, "\d”)
print("User, name, "logged in at", time.strftime("%H:%M"))
print ("It took", name, endtime, "to login to their account.")
STEP 6 
A
Note the last two entries, with %H and %H%M, as 
you can see these are the hours and minutes and as 
the last entry indicates, entering them as %H%M doesn't display the 
time correctly in the Shell. You can easily rectify this with:
time.strftime(“%H:%M”)
STEP 9
The output will look similar to the screenshot below. 
The timer function needs to be either side of the 
input statement, as that’s when the variable name is being created, 
depending on how long the user took to log in. The length of time is 
then displayed on the last line of the code as the endtime variable.
Python 3.4.2 Shell 
_ □ x
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default, Oct 19 2014. 13:31:11) 
[GCC 4.9.1] on linux
Type "copyright", “credits" or "licenseO" for more information.
>» —--------- ———————----- ______ RESTART ———————
Enter login name: David
Welcome David \d
user: David logged in at 09:52
It took David 5.311823129653931 to login to their account.
STEP 7
This means you're going to be able to display 
either the current time or the time when 
something occurred, such as a user entering their name. Try this 
code in the Editor:
import time
name=input(“Enter login name: “) 
print(“Welcome”, name, “\d”) 
print(“User:”, name, “logged in at”, time. 
strftime(“%H:%M”))
Try to extend it further to include day, month, yearand so on.
STEP 10
There's a lot that can be done with the time 
module; some of it is quite complex too, such as 
displaying the numberof seconds since January 1st 1970. Ifyou 
want to drill down further into the time module, then in the Shell 
enter: help(time) to display the current Python version help file 
for the time module.
www.pclpublications.com

Working with Data
Opening Files
In Python you can read text and binary files in your programs. You can also write to file, 
which is something we will look at next. Reading and writing to files enables you to 
output and store data from your programs.
OPEN, READ AND WRITE
In Python you create a File object, similar to creating a variable, only pass in the File using the open() Function. Files are usually 
categorised as text or binary.
STEP1
a
Start by entering some text into your system's text 
editor. The text editor is best, not a word processor, 
as word processors include background Formatting and other 
elements. In our example, we have the poem The Cimmerian, by 
Robert E Howard. You need to save the file as poem.txt.
STEP 3
A
If you now enter poem into the Shell, you will get 
some information regarding the text file you've just 
asked to be opened. You can now use the poem variable to read the 
contents of the file:
File Edit Seaich Options Help 
1 remember 
the dark woods, masking slopes of s< 
the grey clouds' leaden everlasting 
The dusky streams that flowed withot 
And the lone winds that whispered d<
poem. readO
Note than a /n entry in the text represents a new line, as you 
used previously.
H Addition py
8 cake.py
S Circle py 
® graphicspy
3 Hello,py
Wimgpy 
8 imgtestpy
H toopi py
M main.py
M namecounlpy
HR Pi. png 
S Square py 
Stestpy
3 wordgame.py
21/06/17 
52 bytes 18/08/17 
251 bytes 25/08/17' 
150bytes 21/08/17 
19 kB Fnday 
45 bytes 18/08/17 
61 bytes 21/08/17 
350 bytes 21/08/17 | 
43 bytes 18/08/17 
175 bytes 15/06/17 
101 bytes 18/08/17 
42.2 kB 21/08/17 
155 bytes 21/08/17 
40 bytes 18/08/17 (
287 bytes 18/08/17 I
cnsrscter coding: | Current iccale (UTF-8) -j| if
It was a gloomy land that seemed to 
All winds and clouds and dreams tha' 
With bare boughs rattling in the lor 
And the dark woodlands brooding ovei 
Not even lightened by the rare dim : 
Which made squat shadows out of men, 
Cinmeria, land of Darkness and deep
It was so long ago and far away
I have forgot the very name nen call 
The axe and flint-tipped spear are 1 
And hunts and wars are shadows. I r< 
Only the stillness of that sombre li 
Tlw clouds that piled forever on tin 
The dimness of the everlasting wood:
|Vista on vista marching, hills on hi 
Slope beyond slope, each dark with I 
Our gaunt land lay. So when a man cl 
a rugged peak and gazed, his shaded 
Saw but the endless vista - hill on 
Slope beyond slope, each hooded lik<
STEP 2
You use the open() function to pass the file into a 
variable as an object. You can name the file object 
anything you like, but you will need to tell Python the name and 
location of the text file you're opening:
STEP 4
If you enter poem.readQ a second time you will 
notice that the text has been removed from the file.
You will need to enter: poem=open(“/home/pi/Documents/ 
Poem. txt”) again to recreate the file. This time, however, enter:
poem=open(“/home/pi/Documents/Poem.txt”)
printfpoem.read())
Python 3.4.2 Shell 
_ □ x
£ile Edit Shell Qebug Options Windows Help
Python 3.4.2 (default. Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licensee)" for more information.
»> poem=open("/home/pi/Documents/Poem.txt")
This time, the /n entries are removed in favour of new lines and 
readable text.
Python & C++ Coding

Q Opening Files
STEP 5 
A
Just as with lists, tuples, dictionaries and so on, 
you're able to index individual characters of the 
text. For example:
STEP 8
Extending this further, you can use readlinesQ to 
grab all the lines of the text and store them as 
multiple lists. These can then be stored as a variable:
poem.read(5)
Displays the first five characters, whilst again entering:
poem.read(5)
Will display the next five. Entering (1) will display one character at 
a time.
poem=open(“/home/pi/Documents/Poem.txt”) 
lines=poem. readlinesQ
lines[0]
lines[l]
lines[2]
STEP 6 
________ J
Similarly, you can display one line of text at a time by 
using the readlineQ function. For example:
STEP 9 
________ J
You can also use the for statement to read the lines 
of text back to us:
poem=open(“/home/pi/Documents/Poem.txt”) 
poem. readlineQ
Will display the first line of the text with:
poem.readline()
Displaying the next line of text once more.
for lines in lines: 
print(lines)
Since this is Python, there are other ways to produce the same output:
poem=open(“/home/pi/Documents/Poem.txt”) 
for lines in poem:
print(lines)
STEP 7
You may have guessed that you can pass the 
readlineQ function into a variable, thus allowing you 
to call it again when needed:
poem=open(“/home/pi/Documents/Poem.txt”) 
line=poem. readlineQ
line
STEP 10 -J
Let's imagine that you want to print the text one 
character at a time, like an old dot matrix printer 
would. You can use the time module mixed with what you've looked 
at here. Try this:
import time
poem=open(“/home/pi/Documents/Poem.txt”) 
lines=poem. readQ
for lines in lines:
printQines, end=””)
time.sleep(.15)
The output is fun to view, and easily incorporated into your own code.
www.pclpublications.com

Working with Data
Writing to Files
The ability to read external files within Python is certainly handy but writing to a file is 
better still. Using the write() function, youTe able to output the results of a program to 
a file, that you can then read() back into Python.
WRITE AND CLOSE
The write() function is slightly more complex than read(). Along with the filename you must also include an access mode which 
determines whether the file in question is in read or write mode.
STEP1 
a
Start by opening IDLE and enter the following: 
t=open(“/home/pi/Documents/text. 
txt”,”w”)
Change the destination from /home/pi/Documents to your own 
system. This code will create a text file called text.txt in write mode 
using the variable't'. If there's no file of that name in the location, it 
will create one. If one already exits, it will overwrite it, so be careful.
STEP 3 a
However, the actual text file is still blank (you can 
check by opening it up). This is because you've 
written the line of text to the file object but not committed it to the 
file itself. Part of the writeQ function is that you need to commit the 
changes to the file; you can do this by entering:
t.closeO
Python 3.4.2 Shell 
_ □ x
File Edit Shell Qebug Options Windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licensee ) ** for more information.
»> t=open("/home/pi/Documents/text.txt".”w")
»> t.write("You awake in a small, square room. A single table stands to one sid
e. there is a locked door in front of you.”)
109
>» t.closeO
STEP 2
You can now write to the text file using the writeQ 
function. This works opposite to read(), writing lines 
instead of reading them. Try this:
t.write(“You awake in a small, square room. A 
single table stands to one side, there is a locked 
door in front of you.”)
Note the 109. It's the number of characters you've entered.
STEP 4
If you now open the text file with a text editor, 
you can see that the line you created has been 
written to the file. This gives us the foundation for some interesting 
possibilities: perhaps the creation of your own log file or even the 
beginning of an adventure game.
Python & C++ Coding

Writing to Files
STEP 5 
A
To expand this code, you can reopen the file using 
'a', for access or append mode. This will add any text 
at the end of the original line instead of wiping the file and creating 
a new one. For example:
t=open(“/home/pi/Documents/text. txt”, ”a”) 
t.writeC“\n”)
t.wrlte(“ You stand and survey your surroundings. 
On top of the table is some meat, and a cup of 
water.\n”)
Python 3.4.2 Shell
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default, Oct 19 2014, 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licensed" for more information.
»> t=open("/home/pi/Documents/text.txt","a”)
»> t.write("\n") 
1
»> t.write("You stand and survey your surroundings. On top of the table is some 
meat, and a cup of water.\n")
94
STEP 8 -J
You can pass variables to a file that you've created 
in Python. Perhaps you want the value of Pi to be 
written to a file. You can call Pi from the math module, create a new 
file and pass the output of Pi into the new file:
import math 
print(“Value of Pi is: “,math.pl) 
print(“\nWriting to a file now...”)
*wntepitofile.py - /home/pi/Docume...ython Code/writepitofile.py (3.4.2)* -ax
file Edit Fermat Run Options Windows Help 
import math
print("Value of Pi is: ",math.pi)
print("\nWriting to a file now...")
STEP 6 
A
You can keep extending the text line by line, 
ending each with a new line (\n). When you're 
done, finish the code with t.closeQ and open the file in a text 
editor to see the results:
t.write(“The door is made of solid oak with iron 
strips. It’s bolted from the outside, locking you 
in. You are a prisoner I An”)
t.close()
STEP 9
Now let’s create a variable called pi and assign it the 
value of Pi:
pi=math.pi
You also need to create a new file in which to write Pi to:
t=open(“/home/pi/Documents/pi.txt”,”w”)
Remember to change your file location to your own particular 
system setup.
*wntepitofile.py - /home/pi/Docume...ython Code/writepitofile.py (3.4.2)* -ox
Eile Edit Fermat Bun Options Windows Help 
import math
print("Value of Pi is: .math.pi)
print("\nwriting to a file now...")
pi-math.pi
t-open("Zhome/pi/Docunents/pi.txt","w")
STEP 7
There are various types of file access to consider 
using the open() function. Each depends on how the 
file is accessed and even the position of the cursor. For example, re­
opens a file in read and write and places the cursor at the start of 
the file.
STEP 10 -J
To finish, you can use string formatting to call the 
variable and write it to the file, then commit the 
changes and close the file:
t.write(“Value of Pl is: {}”.format(pl)) 
t.close()
You can see from the results that you're able to pass any variable to 
a file.
www.pclpublications.com

Working with Data
Exceptions
When coding, you'll naturally come across some issues that are out of your control. 
Let's assume you ask a user to divide two numbers and they try to divide by zero. This 
will create an error and break your code.
EXCEPTIONAL OBJECTS
Rather than stop the flow of your code, Python includes exception objects which handle unexpected errors in the code. You 
can combat errors by creating conditions where exceptions may occur.
STEP1 
a
You can create an exception error by simply trying 
to divide a number by zero. This will report back 
with the ZeroDivisionError: Division by zero message, as seen in the 
screenshot. The ZeroDivisionError part is the exception class, of 
which there are many.
STEP 3 
A
You can use the functions raise exception to create 
our own error handling code within Python. Let's 
assume your code has you warping around the cosmos, too much 
however results in a warp core breach. To stop the game from 
exiting due to the warp core going supernova, you can create a 
custom exception:
raise Exception(“warp core breach”)
STEP 2
Most exceptions 
are raised 
automatically when Python 
comes across something that's 
inherently wrong with the code. 
However, you can create your 
own exceptions that are designed 
to contain the potential error and 
react to it, as opposed to letting 
the code fail.
BaseException
4— SystemExit
+— Keyboardinterrupt
4— GeneratorExit
+— Exception
+— Stopiteration
+— StopAsyncIteration 
+— ArithmeticError
I 
+— FloatingPointError
I 
+— OverflowError
I 
+— ZeroDivisionError
+— AssertionError 
+— AttributeError 
+— BufferError
4— EOFError
+— ImportError
+— ModuleNotFoundError
4— LookupError 
I 
+— IndexError
I 
+— KeyError
4— MemoryError 
4-— NameError
I 
4-— UnboundLocalError
4-— OSError
I 
4-— BlockinglOError
I 
4-— ChildProcessError
I 
4-— ConnectionError
I 
I 
4— BrokenPipeError
I 
I 
4— ConnectionAbortedError
I 
I 
4-— ConnectionRefusedError
I 
I 
4-— ConnectionResetError
I 
4-— FileExistsError
I 
4-— FileNotFoundError
I 
4-— InterruptedError
I 
4-— IsADirectoryError
I 
4-— NotADirectoryError
I 
4-— PermissionError
I 
4-— ProcessLookupError
I 
4-— TimeoutError
4— ReferenceError 
4-— RuntimeError
STEP 4
To trap any errors in the code you can encase the 
potential error within a try: block. This block consists 
of try, except, else, where the code is held within try:, then if there's 
an exception do something, else do something else.
Python & C++ Coding

Exceptions
STEP 5 
A
For example, use the divide by zero error. You can 
create an exception where the code can handle the 
error without Python quitting due to the problem:
try:
a=int(input(“Enter the first number: “)) 
b=int(input(“Enter the second number: “)) 
print(a/b)
except ZeroDivisionError:
print(“You have tried to divide by zero!”)
else:
print(“You didn’t divide by zero. Well done!”)
STEP 8
Naturally, you can quickly fix the issue by changing 
the "r" read only instance with a "w" for write. This, 
as you already know, will create the file and write the content then 
commit the changes to the file. The end result will report a different 
set of circumstances, in this case, a successful execution of the code.
STEP 6
You can use exceptions to handle a variety of useful 
tasks. Using an example from our previous tutorials, 
let’s assume you want to open a file and write to it:
try:
txt = open(“/home/pi/Documents/textfile.txt”, “r”) 
txt.write(“This is a test. Normal service will 
shortly resume!”)
except lOError:
print (“Error: unable to write the file. Check 
permissions”)
else:
print (“Content written to file successfully. Have 
a nice day.”)
txt.close()
STEP 9
You can also use a finally: block, which works in a 
similar fashion butyou can't use else with it. To use 
our example from Step 6:
try:
txt = open(“/home/pi/Documents/textfile.txt”, “r”) 
try:
txt.write(“This is a test. Normal service will
shortly resume!”)
finally:
print (“Content written to file successfully.
Have a nice day.”)
txt.close()
except lOError:
print (“Error: unable to write the file. Check 
permissions”)
STEP 7
Obviously this won't work due to the file textfile.txt 
being opened as read only (the "r" part). So in this 
case rather than Python telling you thatyou're doing something 
wrong, you've created an exception using the lOError class 
informing the user that the permissions are incorrect.
STEP 10
As before an error will occur as you've used the 
"r" read-only permission. If you change it to a "w", 
then the code will execute without the error being displayed in the 
IDLE Shell. Needless to say, it can be a tricky getting the exception 
code right the first time. Practise though, and you will get the hang 
of it.
exception2.py - /home/pi/Documen.../Python Code/exception2.py (3.4.2) -ax
File Edit Format Run Options Windows Help
txt = open("/home/pi/Docixnents/textfile.txf, "r”)
txt.write("This is a test, normal service will shortly resume!") 
’ except lOError:
print (“Error: unable to write the file. Check permissions”)
I else:
print ("Content written to file successfully. Have a nice day.”) 
txt. closed
www.pclpublications.com

Working with Data
Python Graphics
While dealing with text on the screen, either as a game or in a program, is great, there 
will come a time when a bit of graphical representation wouldn't go amiss. Python 3 
has numerous ways in which to include graphics and they're surprisingly powerful too.
GOING GRAPHICAL
You can draw simple graphics, lines, squares and so on, or you can use one of the many Python modules available, to bring out 
some spectacular effects.
STEP 1
One of the best graphical modules to begin learning 
Python graphics is Turtle. The Turtle module is, as 
the name suggests, based on the turtle robots used in many schools, 
that can be programmed to draw something on a large piece 
of paper on the floor. The Turtle module can be imported with: 
import turtle.
STEP 3
The command turtle.circle(50) is what draws the 
circle on the screen, with 50 being the size. You 
can play around with the sizes if you like, going up to 100, 150 and 
beyond; you can draw an arc by entering: turtle. circle(50, 
180), where the size is 50, but you're telling Python to only draw 
180° of the circle.
STEP 2 
________ J
Let's begin by drawing a simple circle. Start a New 
File, then enter the following code:
import turtle
turtle.ci rcle(50)
turtle. getscreenQ ._root.mainloopO
As usual press F5 to save the code and execute it. A new window will 
now open up and the 'Turtle' will draw a circle.
STEP 4
The last part of the circle code tells Python to keep 
the window where the drawing is taking place to 
remain open, so the user can click to close it. Now, let's make a square:
import turtle 
print(“Drawing a square...”)
for t in range(4):
turtle.forward(100)
turtle.left(90)
turtle. getscreenQ. _root. mainloopQ
You can see that we've inserted a loop to draw the sides of the square.
Python & C++ Coding

STEP 5
________ J
You can add a new line to the square code to add 
some colour:
STEP 8
turtle.color(“Red”)
Then you can even change the character to an actual turtle by entering:
turtle.shape(“turtle”)
You can also use the command turtle. begi n_fill(), and 
turtle. end_fill() to fill in the square with the chosen colours; 
red outline, yellow fill in this case.
Now let's get the code by importing the pygame module:
import pygame 
pygame. initO
img = pygame.image.load(“RPi.png
white = (255, 255, 255) 
w = 900 
h = 450 
screen = pygame.display. 
set_mode((w, h)) 
screen.fill((white))
screen.fill((white)) 
screen.blit(img,(0,0)) 
pygame.display.flip()
while True:
for event in pygame.event.get(): 
if event.type == pygame.QUIT: 
pygame.quit()
imgtest py - /home/pi/Docur
File Edit Format Run Options Windows Help
(import pygame 
pygame.init()
img “ pygame.image.load("RPi.png")
White - (255, 255, 255) 
w = 900 
h - 450 
screen = pygame.display.set_mode((w. h)) 
screen.fill((white))
screen.fill((white)) 
screen.blit(img.(0.0)) 
pygame.d isplay.flip()
wtiile true:
for event in pygame.event.get(): 
f event.type -- pygame.QIITT: 
pygame.Quito
STEP 6 
A
You can see that the Turtle module can draw out 
some pretty good shapes and become a little 
more complex as you begin to master the way it works. Enter this 
example:
from turtle import * 
color(‘red’, ‘yellow’) 
begin_fill()
while True:
forward(200)
left(170)
if abs(pos()) < 1:
break 
end_fill() 
done()
It's a different method, 
but very effective.
Squaie.py • /honie/pi/Ducunierils/Squaiep) 
tile Edit Format Hun options Windows Help 
colorcred', yellow’) 
begin_fill() 
forward(200) 
leftc1/O) 
if absCposO) < I:
end_fill() 
done()
STEP 9
In the previous step you imported pygame, initiated 
the pygame engine and asked it to import our saved 
Raspberry Pi logo image, saved as RPi.png. Next you defined the 
background colour of the window to display the image and the 
window size as per the actual image dimensions. Finally you have a 
loop to close the window.
w ■ 900
h = 450
screen = pygame.display. set_mode((w, h)) 
screen.f111((white))
screen.fill((white))
screen.blit(img,(0,0)) 
pygame.display.flip()
■Ahlie True:
for event in pygame.event.get( ) :
if event.type == pygame.QUIT: 
pygame,quit()
STEP 7
Another way in which you can display graphics is 
by using the Pygame module. There are numerous 
ways in which pygame can help you output graphics to the screen 
but for now let's look at displaying a predefined image. Start by 
opening a browserand finding an image, then save it to the folder 
where you save your Python code.
STEP 10 
-J
Press F5 to save and execute the code and your 
image will be displayed in a new window. Have a 
playaround with the colours, sizes and so on and take time to look 
up the many functions within the pygame module too.
www.pclpublications.com

Index
66
Python & C++ Coding

Using Modules
A Python module is simply a Python- 
created source File which contains the 
necessary code For classes, Functions 
and global variables. You can bind 
and reFerence modules to extend 
Functionality and create even more 
spectacular Python programs.
Want to see how to improve these 
modules to add a little something 
extra to your code? Then read on and 
learn how they can be used to Fashion 
Fantastic code.
68 Calendar Module
70 OS Module
72 Random Module
74 Tkinter Module
76 Pygame Module
80 Create Your Own Modules
www.pclpublications.com
67

Using Modules
Calendar Module
Beyond the time module, the calendar module can produce some interesting results 
when executed within your code. It does far more than simply display the date in the 
time module-like format, you can actually call up a wall calendar type display.
WORKING WITH DATES
The calendar module is built into Python 3. However, if for some reason it's not installed you can add it using pip install 
calendar as a Windows administrator or sudo pip install calendar for Linux and macOS.
STEP 1
________ J
Launch Python 3 and enter: import calendar to 
call up the module and its inherent functions. Once
STEP 3
A
it's loaded into memory, start by entering:
sep=calendar.TextCalendar(calendar.SUNDAY) 
sep.prmonth(2017, 9)
There are numerous functions within the calendar 
module that may be of interest to you when 
forming your own code. Forexample, you can display the number of 
leap years between two specific years:
leaps=calendar.leapdays(1900, 2018) 
print(leaps)
You can see that the days of September 2017 are 
displayed in a wall calendar fashion. Naturally you 
can change the 2017, 9 part of the second line to any year and 
month you want, a birthday for example (1973, 6). The first line 
configures Textcalendar to start its weeks on a Sunday; you can opt 
for Monday if you prefer.
The result is 29, starting from 1904 onward.
You could even fashion that particular example into 
a piece of working, user interactive Python code:
STEP 2
STEP 4
________ J
import calendar
print(“»»»»»Leap Year
Calculator«<«««<\n”)yl=int(input(“Enter the 
first year: “))
y2=int(input(“Enter the second year: “))
leaps=calendar.leapdays(yl, y2) 
print(“Number of leap years between”, yl, “and”, 
y2, “is:”, leaps)
68
Python & C++ Coding

QCalendar Module
STEP 5 
________ J
You can also create a program that will display all 
the days, weeks and months within a given year:
import calendar
year=int(input(“Enter the year to display: “) 
printfcalendar.prcal(year))
We're sure you'll agree that's quite a handy bit of code to have 
to hand.
STEP 8 J
You're also able to print the individual months or 
days of the week:
import calendar
for name in calendar.month_name:
print(name)
import calendar
for name in calendar.day_name:
print(name)
STEP 6 
________ J
Interestingly we can also list the number of days in a 
month by using a simple for loop:
import calendar
cal=calendar.TextCalendar(calendar.SUNDAY)
for i in cal.itermonthdays(2018, 6):
print(i)
STEP 9
The calendar module also allows us to write the 
functions in HTML, so that you can display it on a 
website. Let’s start by creating a new file:
import calendar
cal=open(“/home/pi/Documents/cal.html”, “w”) 
c=calendar.HTMLCalendar(calendar.SUNDAY) 
cal.write(c.formatmonth(2018, 1)) 
cal.closef)
This code will create an HTML file called cal, open it with a browser 
and it displays the calendar for January 2018.
STEP 7 
a
You can see that code produced some zeros at the 
beginning, this is due to the starting day of the 
week, Sunday in this case, and overlapping days from the previous 
month. So the counting of the days will starton Friday 1st June 
2018 and will total 30 as the output correctly displays.
STEP 10 
__________J
Of course, you can modify that to display a given 
year as a web page calendar:
import calendar 
year=int(input(“Enter the year to display as a 
webpage: “)) 
cal=open(“/home/pi/Documents/cal.html”, “w”) 
cal.write(calendar.HTMLCalendar(calendar.MONDAY). 
formatyear(year)) 
cal.close()
This code asks the user for a year, then creates the necessary 
webpage. Remember to change your file destination.
www.pclpublications.com
69

Using Modules
OS Module
The OS module allows you to interact directly with the built-in commands Found in your 
operating system. Commands vary depending on the OS youTe running, as some will 
work with Windows whereas others will work with Linux and macOS.
INTO THE SYSTEM
One oF the primary Features oF the OS module is the ability to list, move, create, delete and otherwise interact with Files 
stored on the system, making it the perfect module For backup code.
STEP1 
a
You can start the OS module with some simple 
Functions to see how it interacts with the operating 
system environment that Python is running on. iFyou're using Linux 
or the Raspberry Pi, try this:
import os 
home=os. getcwdQ 
print(home)
STEP 3 
A
The Windows output is difFerent as that’s the 
current working directory oF Python, as determined 
by the system; as you might suspect, the os.getcwdQ Function is 
asking Python to retrieve the Current Working Directory. Linux users 
will see something along the same lines as the Raspberry Pi, as will 
macOS users.
STEP 2
The returned result From printing the variable home 
is the current user's home Folder on the system. 
In our example that's /home/pi; it will be diFFerent depending on 
the user name you log in as and the operating system you use. 
For example, Windows 10 will output: C:\Program Files (x86)\ 
Python36-32.
L<i Python 3.6.2 Shell 
- 
□ X
File Edit Shell Debug Options Window Help
Python 3.6.2 (v3.6.2:5fd33b5, Jul 8 2017, 04:14:34) [MSC v.1900 32 bit (Intel)] 
on Win32
Type "copyright", "credits" or "license()" for more information.
>» import os
»> home=os.getcwd()
>» print (home)
C:\Program Files (x86)\Python36-32
STEP 4
Yet another interesting element to the OS module, 
is its ability to launch programs that are installed 
in the host system. For instance, iFyou wanted to launch the 
Chromium browser From within a Python program you can use 
the command:
import os
browser=os.system(“/usr/bin/chromium-browser”)
70
Python & C++ Coding

Q OS Module
STEP 5 
A
The os.systemQ function is what allows interaction 
with external programs; you can even call up 
previous Python programs using this method. You will obviously 
need to know the full path and program file name for it to work 
successfully. However, you can use the following:
import os
os.system(‘start chrome “https://www.youtube.com/ 
feed/music”’)
STEP 8
The ability to manipulate directories, or folders if 
you prefer, is one of the OS module's best features.
For example, to create a new directory you can use:
import os
os.mkdir(“NEW”)
This creates a new directory within the Current Working Directory, 
named according to the object in the mkdir function.
STEP 9
You can also rename any directories you've created 
by entering:
import os
os. renameC“NEW”, “OLD”)
STEP 6 
A
For Step 5's example we used Windows, to show 
that the OS module works roughly the same across 
all platforms. In that case, we opened YouTube's music feed page, so 
it is therefore possible to open specific pages:
import os
os.system(‘chromium-browser “http:// 
bdmpublications.com/”’)
STEP 7
Note in the previous step's example the use of 
single and double-quotes. The single quotes encase 
the entire command and launching Chromium, whereas the double 
quotes open the specified page. You can even use variables to call 
multiple tabs in the same browser:
import os
a=(‘chromium-browser “http://bdmpublications.
com/” ’)
b=(‘chromium-browser “http://www.google.co.uk”’) 
os.system(a + b)
To delete them:
import os
os.rmdirC“OLD”)
STEP 10 
A
Another module that goes together with OS is 
shutil. You can use the shutil module together 
with OS and time to create a time-stamped backup directory, and 
copy files into it:
import os, shutil, time
root_src_dir = r’/home/pi/Documents’
root_dst_dir = ‘/home/pi/backup/’ + time.asctimeO
for src_dir, dirs, files in os.walk(root_src_dir): 
dst_dir = src_dir.replace(root_src_dir, root_ 
dst_dir, 1)
if not os.path.exists(dst_dir):
os.makedirs(dst_dir)
for file_ in files:
src_file = os.path.join(src_dir, file_)
dst_file = os.path.join(dst_dir, file_)
if os.path.exists(dst_file):
os.remove(dst_file)
shutil,copy(src_file, dst_dir)
print(“»»»»»Backup complete<<««««”)
www.pclpublications.com
71

Using Modules
Random Module
The random module is one you will likely come across many times in your Python 
programming lifetime; as the name suggests, it's designed to create random numbers 
or letters. However, it's not exactly random but it will suffice for most needs.
RANDOM NUMBERS
There are numerous Functions within the random module, which when applied can create some interesting and very useFul 
Python programs.
STEP1 
a
Just as with other modules you need to import 
random beFore you can use any of the functions 
we're going to look at in this tutorial. Let's begin by simply printing a 
random number from 1 to 5:
import random 
print(randomint(0,5))
STEP 4
However, the random module isn't used exclusively 
for numbers. You can use it to select an entry from a 
list from random, and the list can contain anything:
import random
random.choice([“Conan”, “Valeria”, “Belit”])
This will display one of the names of our adventurers at random, 
which is a great addition to a text adventure game.
Python 3.4.2 Shell
File Edit Shell Debug Options Windows Help
Python 3.4.2 (default. Oct 19 2014. 13:31:11)
[GCC 4.9.1] on linux
Type “copyright", “credits" or "licensee)" for more information. 
»> import random
»> random.choice(("Conan", "Valeria", “Belit"]) 
’Conan’
STEP 2
In our example 
the number four 
was returned. However, enter 
the print function a few more 
times and it will display different 
integer values from the set of 
numbers given, zero to five. The 
overall effect, although pseudo­
random, is adequate for the 
average programmer to utilise in 
their code.
STEP 3 
A
Fora bigger set of numbers, including floating 
point values, you can extend the range by using the 
multiplication sign:
import random
print(random. randomQ *100)
Will display a floating point number between 0 and 100, to the tune 
of around fifteen decimal points.
STEPS
You can extend the previous example somewhat by 
having random.choiceQ select from a list of mixed 
variables. For instance:
import random
lst=[“David”, 44, “BDM Publications”, 3245.23, 
“Pi”, True, 3.14, “Python”] 
rnd=random.choice(lst)
print(rnd)
Python 3.4.2 Shell
Elie Edit Shell Debug options Windows Help
Python 3.4.2 (default, Oct 19 2014. 13:31:11)
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licensee)” for more information.
»> import random
>» lst=["David", 44. "BDM Publications". 3245.23. "Pi", True, 3.14, "Python"]
>» rnd=random.choice(lst)
»> print(rnd)
3245.23
72
Python & C++ Coding

Random Module
STEP 6
Interestingly, you can also use a function within the 
random module to shuffle the items in the list, thus 
adding a little more randomness into the equation:
Let's use an example piece of code which flips a 
virtual coin ten thousand times and counts how 
many times it will land on heads or tails:
STEP 9
random, shuffle(lst) 
print(lst)
This way, you can keep shuffling the list before displaying a random 
item from it.
import random
output={“Heads”:0, “Tails”:0} 
coin=li stfoutput. keysQ)
for i in range(10000):
output [random.choice(coin)]+=l
print(“Heads:”, output[“Heads”]) 
printC“Tails:”, output[“Tails”])
STEP 7
________ J
Using shuffle, you can create an entirely random list 
of numbers. For example, within a given range:
import random
lst=[[i] for I in range(20)]
random, shuffle(lst)
print(lst)
Keep shuffling the list and you can have a different selection of 
items from 0 to 20 every time.
STEP 10
A
Here's an interesting piece of code. Using a text 
file containing 466 thousand words, you can pluck 
a user generated number of words from the file (text file found at: 
www.github.com/dwyl/english-words):
import random
print(“»»»»»Random Word Finder<<««««”) 
print(“\nllsing a 466K English word text file I can 
pick any words at random.\n”)
wds=int(input(“\nHow many words shall I choose? 
“))
with open(“/home/pi/Downloads/words.txt”, “rt”) as 
f:
words = f. readlinesQ
words = [w.rstripO for w in words]
STEP 8 
________ J
You can also select a random number from a given 
range in steps, using the start, stop, step loop:
import random
for i in range(10):
print(random.randrange(0, 200, 7))
print(“------------------------------------ ”)
for w in random.sample(words, wds): 
print(w)
print(“------------------------------------ ”)
Results will vary but you get the general idea as to how it works.
www.pclpublications.com
73

Using Modules
Tkinter Module
While running your code from the command line, or even in the Shell, is perfectly fine, 
Python is capable of so much more. The Tkinter module enables the programmer to set 
up a Graphical User Interface to interact with the user, and it's surprisingly powerful too.
GETTING GUI
Tkinter is easy to use but there's a lot more you can do with it. Let's start by seeing how it works and getting some code into it. 
Before long you will discover just how powerful this module really is.
STEP1 
a
Tkinter is usually built into Python 3. However, if it's 
available when you enter: import tkinter, then 
you need to pip install tkinter from the command prompt. 
We can start to import modules differently than before, to save on 
typing and by importing all their contents:
import tkinter as tk 
from tkinter import *
STEP 3 
A
The ideal approach is to add mainloopQ into the 
code to control the Tkinter event loop, but well 
get to that soon. You've just created a Tkinter widget and there are 
several more we can playaround with:
btn=ButtonO
btn.packQ
btn[“text”]=”Hello everyone!”
The first line focuses on the newly created window. Click back into 
the Shell and continue the other lines.
STEP 2
It's not recommended to import everything from a 
module using the asterisk but it won't do any harm 
normally. Let's begin by creating a basic GUI window, enter:
wind=TkO
This creates a small, basic window. There’s not much else to do at 
this point but click the X in the corner to close the window.
STEP 4
You can combine the above into a New File:
import tkinter as tk
from tkinter import *
btn=ButtonO
btn.packQ
btn[“text”]=”Hello everyone!”
Then add some button interactions:
def clickf):
print(“You just clicked me!”) 
btn[“command”]=click
tkintercode1.py-/home/pi/Docume...ython Code/tkintercodel.py (3.4.2) -ax
I
 File Edit Format Run Options Windows Help
import tkinter as tk
from tkinter import *
btn=Button()
btn.pack()
btn["text"]="Hello everyone!"
। def click():
print("You just clicked me!") 
btn["command"]=click
74
Python & C++ Coding

(^Tkinter Module
STEP 5 
A
Save and execute the code from Step 4 and a 
window appears with 'Hello everyone!' inside. If you 
click the Hello everyone! button, the Shell will output the text 'You 
just clicked me!'. It's simple but shows you what can be achieved 
with a few lines of code.
Python 3.4.2 (default, Oct 19 2014, 13:31:11) 
[GCC 4.9.1] on linux
Type "copyright", "credits" or "licensed" for more information.
»> ================================ RESTART ================================
>» You just clicked me!
You just clicked me!
You just clicked me!
the code. Here's an example using the BDM Publishing logo:
from tkinter import *
root = TkO
logo = PhotoImage(file=”/home/pi/Downloads/BDM_logo. 
gif”)
wl = Label(root, root.title(“BDM Publications”), 
image=logo).pack(side=”right”)
content = From its humble beginnings in 2004, 
the BDM brand quickly grew from a single publication 
produced by a team of just two to one of the biggest 
names in global bookazine publishing, for two simple 
reasons. Our passion and commitment to deliver the 
very best product each and every volume. While 
the company has grown with a portfolio of over 250 
publications delivered by our international staff, 
the foundation that it has been built upon remains 
the same, which is why we believe BDM isn’t just 
the first choice it’s the only choice for the smart 
consumer.
w2 = Labelfroot,
justify=LEFT, 
padx = 10, 
text=content).pack(side=”left”)
root.mainloopO
STEP 8 J
You can create radio buttons too. Try: 
from tkinter import * 
root = TkQ 
v = IntVarQ
Label(root, root.title(“Options”), text=”””Choose 
a preferred language:”””, 
justify = LEFT, padx = 20).pack() 
Radiobutton(root, 
text=”Python”, 
padx = 20, 
variable=v, 
value=l).pack(anchor=W)
Radiobutton(root, 
text=”C++”, 
padx = 20, 
variable=v, 
value=2).pack(anchor=W) 
mainloopO
STEP 9
You can also create check boxes, with buttons and 
output to the Shell:
from tkinter import *
root = TkQ
def var_states(): 
print(“Warrior: %d,\nMage: %d” % (varl.getQ, 
var2.get()))
Label(root, root.title(“Adventure Game”), 
text=”»»»»»Your adventure role<««<««”). 
grid(row=0, sticky=N)
varl = IntVarQ
Checkbutton(root, text=”Warrior”, variable=varl).
grid(row=l, sticky=W)
var2 = IntVarQ
Checkbutton(root, text=”Mage”, variable=var2).
grid(row=2, sticky=W)
Button(root, text=’Quit’, command=root.destroy).
grid(row=3, sticky=W, pady=4)
Buttonfroot, text=’Show’, command=var_states).
grid(row=3, sticky=E, pady=4)
mainloopQ
STEP 7
The previous code is 
quite weighty, mostly 
due to the content 
variable holding a part 
of BDM's About page 
from the company 
website. You can 
obviously change the 
content, the root.title 
and the image to suit 
your needs.
STEP 10
The code from Step 9 introduced some new 
geometry elements into Tkinter. Note the 
sticky=N, E and W arguments. These describe the locations of the 
check boxes and buttons (North, East, South and West). The row 
argument places them on separate rows. Have a play around and 
see what you get.
www.pclpublications.com
75

Using Modules
Pygame Module
We've had a brief look at the Pygame module already but there's a lot more to it that 
needs exploring. Pygame was developed to help Python programmers create either 
graphical or text-based games.
PYGAMING
Pygame isn't an inherent module to Python but those using the Raspberry Pi will already have it installed. Everyone else will 
need to use: pip install pygame From the command prompt.
STEP1 
a
Naturally you need to load up the Pygame modules 
into memory before you're able to utilise them. 
Once that's done Pygame requires the user to initialise it prior to 
any of the functions being used:
STEP 3 
A
Sadly you can't close the newly created Pygame 
window without closing the Python IDLE Shell, 
which isn't very practical. For this reason, you need to work in the 
editor (New > File) and create a True/False while loop:
import pygame 
pygame. initO 
Let's create a simple game ready window, and give 
it a title:
STEP 2 
________ J
gamewindow=pygame.di splay.set_mode((800,600)) 
pygame.display.set_caption(“Adventure Game”)
You can see that after the first line is entered, you need to click back 
into the IDLE Shell to continue entering code; also, you can change 
the title of the window to anything you like.
import pygame
from pygame.locals import *
pygame.init()
gamewindow=pygame.display.set_mode((800,600)) 
pygame.display.set_caption(“Adventure Game”) 
running=True
while running:
for event in pygame.event.get(): 
if event.type==QUIT:
running=False
pygame.quit()
76
Python & C++ Coding

Pygame Module
STEP 4
If the Pygame window still won't 
close don't worry, it's just a 
discrepancy between the IDLE (which is written 
with Tkinter) and the Pygame module. If you 
run your code via the command line, it closes 
perfectly well.
Adventure Game
pi@raspberrypi: ~/Documents/Python Code 
_ □ x
File Edit Tabs Help
|pi(?raspberrypi:-/Docuaents/Python Code $ python3 pygamel.py 
lpieraspberrypi:~/Oocuaents/Pytbon Code $ |
STEP 5
You're going to shift the code around a bit now, 
running the main Pygame code within a while loop; 
it makes it neater and easier to follow. We've downloaded a graphic 
to use and we need to set some parameters for pygame:
import pygame 
pygame. initO 
running=True 
while running:
gamewindow=pygame.di splay.set_niode((800,600)) 
pygame.display.set_captionC“Adventure Game”) 
black=(0,0,0)
whlte=(255,255,255)
img=pygame.image.load(“/home/pl/Downloads/ 
spritel.png”)
def sprite(x,y):
gamewindow.blitfimg, (x,y))
x=(800*0.45)
y=(600*0.8)
gamewindow.fill(white)
sprite(x,y)
pygame. display. updateQ
for event in pygame.event.get():
if event.type==pygame.QUIT:
running=False
Adventure Game
pygamel py -/home/pi/Documents/Python Code/pygamel py (3.4.2) _ □ x
File Edit Format Run Options Windows Help
(import pygame
fiorr pygame.locals import *
pygame.init()
running=T rue
while running:
gamewindow=py game.display.set_mode((800.600))
pygame.display.set_caption("Adven ture Game")
black=(0.0.0)
wtlite=(255,255,255)
img=pygame.image.load(“/home/pi/Downloads/sprite1.png”)
def sprite(x.y):
gamewindow.blit( img, (x,y))
x-(800*0.45)
y=(600*0.8)
gamewindow.fill(white)
sprite(x.y)
pygame.display.update()
foi event in pygame.event.get(): 
if event.type==QUIT: 
running-”jIse 
pygame.quit()
STEP 6
Let's quickly go through the code changes. We've 
defined two colours, black and white together 
with their respective RGB colour values. Next we've loaded the 
downloaded image called spritel.png and allocated it to the 
variable img; and also defined a sprite function and the Blit function 
will allow us to eventually move the image.
|import pygame
from pygame.locals import *
pygame.init()
running=T rue
while running:
gam ewindo'A-py game .disp lay. set_mode( (800,600 ))
pygame.display.set_capt ion( ’Adventure Game”)
black=(0,0,0)
wtiite=(255,255,255)
img=pygame.image.load("/home/pi/Downloads/spritel.png”)
def sprite(x.y):
gamewindow.blit(img, (x,y))
x-(800*0.45)
y=(600*0.8)
gamewindow.f i1l(white) 
sprite(x,y)
pygame.display.update()
for event in pygame.event.get(): 
if event.type==QUIT;
running“ralse 
pygame.quit()
www.pclpublications.com
77

Using Modules
STEP 7
Now we can change the code around again, this 
time containing a movement option within the 
while loop, and adding the variables needed to move the sprite 
around the screen:
import pygame
from pygame.locals import *
pygame. initO
running=True
gamewindow=pygame.display.set_mode((800,600)) 
pygame.di splay.set_captionC“Adventure Game”) 
black=(0,0,0)
white=(255,255,255)
img=pygame.image.load(“/home/pi/Downloads/spritel. 
png”) 
def sprite(x,y):
gamewindow.blit(img, (x,y))
x=(800*0.45)
y=(600*0.8)
xchange=0
imgspeed=0
while running:
for event in pygame.event.get():
if event.type==QUIT: 
running=False
if event.type == pygame.KEYDOWN:
if event.key==pygame.K_LEFT: 
xchange=-5
el if event.key==pygame.K_RIGHT: 
xchange=5
if event.type==pygame.KEYUP:
if event.key==pygame.K_LEFT or event 
key==pygame.K_RIGHT:
xchange=0
x += xchange
gamewindow.fill(white) 
sprite(x,y)
pygame. display. updateQ
pygame.quit()
STEP 8 
________ J
Copy the code down and using the left and right arrow keys on the keyboard you can move your sprite across the bottom of 
the screen. Now, it looks like you have the makings of a classic arcade 2D scroller in the works.
import pygame
from pygame.locals import * 
pygame.init()
running=True 
gamewindow=pygame.display.set_mode((800,600))
pygame.display.set_caption("Adventure Game") 
black=(0,0,0)
white-(255,255,255)
img=pygame.image.load("/home/pi/Downloads/sprite1.png")
def sprite(x.y):
gamewindow.blit(img, (x,y))
x-(800*0.45)
y=(600*0.8)
xchange=0
imgspeed=0
w+iile running:
for event in pygame.event.get(): 
if event.type==QUIT:
running=False
if event.type == pygame.KEYDOWN:
if event.key==pygame.K_LEFT:
xchange=-5
elif event.key==pygatne.K_RIGHT:
xchange=5
if event.type==pygame.KEYUP:
if event.key==pygame.K_LEFT or event.key==pygame.K_RIGHT: 
xchange=0
x +- xchange
gamewindow.fill(white)
sprite(x.y)
pygame.display.update()
pygame.quit()
78
Python & C++ Coding

Pygame Module
STEP 9 
a
You can now implement a few additions and utilise 
some previous tutorial code. The new elements are 
the subprocess module, of which one function allows us to launch a 
second Python script from within another; and we're going to create a 
New File called pygametxt.py: 
import pygame 
import time 
import subprocess 
pygame. initO 
screen = pygame.display.set_mode((800, 250)) 
clock = pygame. time. ClockQ
font = pygame.font.Font(None, 25)
pygame.time.set_timer(pygame.USEREVENT, 200)
def text_generator(text): 
tmp = ‘’ 
for letter in text: 
tmp += letter 
if letter != ‘ ‘: 
yield tmp
class DynamicText(object):
def __init__(self, font, text, pos,
autoreset=False): 
self.done = False 
self.font = font 
self.text = text 
self._gen = text_generator(self.text) 
self.pos = pos 
self.autoreset = autoreset 
self.update()
def reset(self):
self._gen = text_generator(self.text) 
self.done = False 
self .updateQ
def update(self): 
if not self.done: 
try: self.rendered = self.font.
render(next(self._gen), True, (0, 128, 0)) 
except Stopiteration: 
self.done = True 
time.sleep(10) 
subprocess.Popen(“python3 /home/pi/Documents/
PythonX Code/pygamel.py 1”, shell=True)
def draw(self, screen):
screen.blit(self.rendered, seif.pos)
text=(“A long time ago, a barbarian strode from the 
frozen north. Sword in hand...”)
message = DynamicText(font, text, (65, 120), 
autoreset=True)
while True:
for event in pygame.event.get():
if event.type == pygame.QUIT: break
if event.type == pygame.USEREVENT: message.
updateQ
else:
screen.fill(pygame.color.Color(‘black’)) 
message.draw(screen)
pygame. di splay .flip() 
clock.tick(60) 
continue
break
STEP 10 a
pygame.quit(j
When you run this code it will display a long, 
narrow Pygame window with the intro text 
scrolling to the right. Aftera pause of ten seconds, it then launches 
the main game Python script where you can move the warrior sprite 
around. Overall the effect is quite good but there's always room 
for improvement.
www.pclpublications.com
79

Using Modules
Create Your Own Modules
Large programs can be much easier to manage if you break them up into smaller parts 
and import the parts you need as modules. Learning to build your own modules also 
makes it easier to understand how they work.
BUILDING MODULES
Modules are Python files, containing code, that you save using a .py extension. These are then imported into Python using the 
now familiar import command.
STEP1 
a
Let's start by creating a set of basic mathematics 
functions. Multiply a number by two, three and 
square or raise a number to an exponent (power). Create a New File 
in the IDLE and enter:
def timestwo(x):
return x * 2
def timesthree(x):
return x * 3
def square(x): 
return x * x
def power(x,y): 
return x ** y
STEP 3
Now you're going to take the function definitions 
out of the program and into a separate file.
Highlight the function definitionsand choose Edit > Cut. Choose File 
> New File and use Edit > Paste in the new window. You now have 
two separate files, one with the function definitions, the other with 
the function calls.
STEP 2 
________ J
Under the above code, enter functions to call the 
code:
print (timestwo(2)) 
print (timesthree(3)) 
print (square(4)) 
print (power(5,3))
Save the program as basic_math.py and execute it to get the results.
STEP 4
If you now try and execute the basic_math.py code 
again, the error 'NameError: name 'timestwo' is 
not defined' will be displayed. This is due to the code no longer 
having access to the function definitions.
Traceback (most recent call last):
File "/home/pi/Documents/Python Code/basic_math.py", line 3, in <module> 
print (timestwo(2))
HameError: name 'timestwo' is not defined
»> I
STEP 5 
A
Return to the 
newly created 
window containing the function 
definitions, and click File > Save 
As. Name this minimath.py 
and save it in the same location 
as the original basic_math. 
py program. Now close the 
minimath.py window, so the 
basic_math.py window is left 
open.
80
Python & C++ Coding

STEP 6
________ J
Back to the basic_math.py window: at the top of the 
code enter:
STEP 9
from minimath import *
This will import the function definitions as a module. Press F5 to 
save and execute the program to see it in action.
STEP 7
You can now use the code further to make the 
program a little more advanced, utilising the newly 
created module to its full. Include some user interaction. Start by 
creating a basic menu the user can choose from:
print(“Select operation.\n”)
print(“l.Times by two”)
print(“2.Times by Three”)
print(“3.Square”)
print(“4.Power of”)
choice = input(“\nEnter choice (1/2/3/4):”)
STEP 8
Now we can add the user input to get the number 
the code will work on:
numl = int(input(“\nEnter number: “))
This will save the user-entered number as the variable numl.
Q Create Your Own Modules
Finally, you can now create a range of if statements 
to determine what to do with the number and 
utilise the newly created function definitions:
if choice == ‘1’:
print(timestwo(numl))
elif choice == ‘2’:
print(timesthree(numl))
elif choice == ‘3’:
print(square(numl))
elif choice == ‘4’:
num2 = int(input(“Enter second number: “))
print(power(numl, num2))
else:
print(“Invalid input”)
STEP 10
Note that for the last available options, the Power 
of choice, we've added a second variable, num2. 
This passes a second number through the function definition called 
power. Save and execute the program to see it in action.
www.pclpublications.com
81

Index
Python & C++ Coding

Say Hello to C++
C++ is a high level programming language 
that's used in a multitude of technologies. 
Everything from your favourite mobile 
app, console and PC game to entire 
operating systems, all are developed 
using C++ and a collection of software 
development kits and custom libraries.
C++ is the driving force behind most 
of what you use on a daily basis, which 
makes it a complex and extraordinarily 
powerful language to get to grips with. 
In this section, we look at how to install a 
C++ IDE and compiler on your computer.
84 Why C++?
86 Equipment Needed
88 How to Set Up C++in Windows
90 How to Set Up C++on a Mac
92 How to Set Up C++in Linux
94 Other C++IDEs to Install
www.pclpublications.com

Say Hello to C++
Why C++?
C++ is one of the most popular programming languages available today. Originally 
called C with Classes, the language was renamed C++ in 1983. It's an extension of the 
original C language and is a general purpose object-oriented (OOP) environment.
C EVERYTHING
Due to how complex the language can be, and its power and performance, C++ is often used to develop games, programs, 
device drivers and even entire operating systems.
Dating back to 1979, the start of the golden era of home 
computing, C++, or rather C with Classes, was the brainchild of 
Danish computer scientist Bjarne Stroustrup while working on his 
PhD thesis. Stroustrup's plan was to further the original C language, 
which was widely used since the early seventies.
C++ proved to be popular among the developers of the ’80s, 
since it was a much easier environment to get to grips with and 
more importantly, it was 99% compatible with the original C 
language. This meant that it could be used beyond the mainstream 
computing labsand by regular people who didn't have access to the 
mainframesand large computing data centres.
C++'s impact in the digital world is immense. Many of the programs, 
applications, games and even operating systems are coded using 
C++. For example, all of Adobe's major applications, such as 
Photoshop, InDesign and so on, are developed in C++. You will find 
that the browser you surf the Internet with is written in C++, as 
well as Windows 10, Microsoft Office and the backbone to Google's 
search engine. Apple's macOS is written largely in C++ (with some
C++ code is much faster than that of Python.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
#i nc1ude< i os Lream>
using namespace std; 
void inain()
□ (char ch;
cout<<"Enter d charater to check it is vowel or not,"; 
cin>>ch;
switch(ch)
□ ( 
case a1: case’ A1 : 
cout«ch<<" is a Vowel"; 
break;
case *e’: case'E1: 
cout<<ch<<" is a Vowel"; 
break;
case ' i' : case I’: 
cout«ch<<" is a Vowel"; 
break;
case ’o': case'O’: 
cout<<ch<<" is a Vowel"; 
break;
case 'u': case U’: 
cout<<ch<<" is a Vowel";
8‘
Python & C++ Coding

Installing - Visual Studio Community 2017 (15.026223.1)
Workloads
Individual components
Language packs
Windows (3)
00 Universal Windows Platform development
■I 0 Create applications for the Universal Windows Platform with C# 
VB, JavaScript, or optionally C++.
.NET desktop development
Build WPF, Windows Forms and console applications using the 
.NET Framework.
i**-I Desktop development with C++
I » Build classic Windows-based applications using the power of the 
Visual C++ toolset, ATI, and optional features like MFC and...
□
Web & Cloud (4)
ASP.NET and web development
Build web applications using ASP.NET, ASP.NET Core, HTML 
JavaScript, and CSS.
Azure development
Azure SDK, tools, and projects for developing cloud apps and 
creating resources.
Node.js development
Build scalable network applications using Node.js, an asynchronous 
event-driven JavaScript runtime.
Data storage and processing
Connect, develop and test data solutions using SQL Server, Azure 
Data Lake, Hadoop or Azure ML
Summary
* Desktop development with C...
Included
✓ Visual C++ core desktop features
Optional
Q VC++ 2017 v141 toolset (x86,x64)
3 C++profiling tools
3 Windows 10 SDK (10.0.14393.0)
3 Visual C++ tools for CMake
□ Visual C++ ATL support
□ Windows 8.1 SDK and UCRT SDK
I_
| Windows XP support for C++
ED MFC and ATL support (x86 and x64)
□ C++/CU support
I I Clang/C2 (experimental)
0 Standard Library Modules
0 By continuing, you agree to the license for the 
Visual Studio edition you selected. We also offer the 
ability to download other software with Visual 
Studio. This software is licensed separately, as set
e
 Microsoft's Visual Studio is a great, 
free environment to learn C++ in.
other languages mixed in depending on the function) and the tikes 
of NASA, SpaceX and even CERN use C++ for various applications, 
programs, controlsand umpteen other computing tasks.
C++ is also extremely efficient and performs well across the board 
as well as being an easier addition to the core C language. This 
higher level of performance over other languages, such as Python, 
BASIC and such, makes it an ideal development environment for 
modern computing, hence the aforementioned companies using it 
so widely.
While Python is a great programming language to learn, C++ puts 
the developer in a much wider world of coding. By mastering C++, 
you can find yourself developing code for the likes of Microsoft, 
Apple and so on. Generally, C++ developers enjoy a higher salary 
than programmers of some other languages and due to its 
versatility, the C++ programmer can move between jobs and 
companies without the need to relearn anything specific. 
However, Python is an easier language to begin with. If you're 
completely new to programming then we would recommend you 
begin with Python and spend some time getting to grips with 
programming structure and the many ways and means in which you 
find a solution to a problem through programming. Once you can 
happily power up your computerand whip out a Python program 
with one hand tied behind your back, then move on to C++. Of 
course, there's nothing stopping you from jumping straight into 
C++; if you feel up to the task, go for it.
Getting to use C++ is as easy as Python, all you need is the right set 
of tools in which to communicate with the computer in C++ and 
you can start your journey. A C++ IDE is free of charge, even the 
immensely powerful Visual Studio from Microsoft is freely available 
to download and use. You can get into C++ from any operating 
system, be it macOS, Linux, Windows or even mobile platforms.
Just like Python, to answer the question of Why C++ is the answer 
is because it's fast, efficient and developed by most of the 
applications you regularly use. It's cutting edge and a fantastic 
language to master.
Windows
Mac
debian
®
ubuntu
e
 Indeed, the operating system 
you're using is written in C++.
www.pclpublications.com

Say Hello to C++
Equipment Needed
You don't need to invest a huge amount of money in order to learn C++ and you 
don't need an entire computing lab at your disposal either. Providing you have a fairly 
modern computer, everything else is freely available.
C++SETUPS
Most, if not all, operating systems have C++ in their code, so it stands to reason that you can learn to program in C++ no matter 
what OS you're currently using.
J COMPUTER
Unless you fancy writing out your C++ code by hand on a sheet of 
paper (which is something many older coders used to do), a computer 
is an absolute must have component. PC users can have any recent 
Linux distro or Windows OS, Mac users the latest macOS.
J AN IDE
Just as with Python, an IDE is used to enter and execute your C++ 
code. Many IDEs come with extensions and plugins that help make 
it work better, or add an extra level of functionality. Often, an IDE 
provides enhancements depending on the core OS being used, such as 
being enhanced for Windows 10.
J COMPILER
A compiler is a program that converts the C++ language into binary, 
so that the computer can understand. While some IDEs come with a 
compiler built in, others don't. Code::Blocks is our favourite IDE that 
comes with a C++ compiler as part of the package. More on this later.
J TEXT EDITOR
Some programmers much prefer to use a text editor to assemble their 
C++ code before running it through a compiler. Essentially you can 
use any text editor to write code, just save it with a .cpp extension. 
However, Notepad++ is one of the best code text editors available.
J INTERNET ACCESS
While it's entirely possible to learn how to code on a computer that's 
not attached to the Internet, it's extraordinarily difficult. You need 
to install relevant software, keep it up to date, install any extras or 
extensions and look for help when coding. All of these require access 
to the Internet.
J TIME AND PATIENCE
Yes, as with Python, you're going to need to set aside significant time 
to spend on learning how to code in C++. Sadly, unless you're a genius, 
it's not going to happen overnight, or even a week. A good C++ coder 
has spent many years honing their craft, so be patient, start small and 
keep learning.
Python & C++ Coding

Equipment Needed
OS SPECIFIC NEEDS
C++ will work in any operating system but getting all the necessary pieces together can be confusing to a newcomer. Here are 
some OS specifics for C++.
LINUX
WINDOWS
Linux users are lucky in that they already have a compiler and 
text editor built into their operating system. Any text editor 
allows you to type out your C++ code, when it's saved with a 
.cpp extension, use g++ to compile it.
We have mentioned previously that a good IDE is Microsoft’s 
Visual Studio. However, a better IDE and compiler is 
CodecBlocks, which is regularly kept up to date with a new 
release twice a year. Otherwise Windows users can enter 
their code in Notepad++, then compile it with MinGW as used 
by CodecBlocks.
RASPBERRY PI
The Raspberry Pi's operating 
system is Raspbian, which 
is Linux based. Therefore, 
you're able to write your code 
out using a text editor, then 
compile it with g++ as you 
would in any other Linux distro.
MAC
Mac owners will need to 
download and install Xcode 
to be able to compile their 
C++ code natively. Other 
options for the macOS 
include Netbeans, Eclipse or 
CoderBlocks. Note: the 
latest CodecBlocks isn't 
available for Mac due to a lack 
of Mac developers.
www.pclpublications.com

Say Hello to C++
How to Set Up 
C++ in Windows
Windows users have a wealth of choice when it comes to programming in C++. There 
are plenty of IDEs and compilers available, including Visual Studio from Microsoft. 
However, in our opinion, the best C++ IDE to begin with is Code::Blocks.
CODE::BLOCKS
Code::Blocks is a Free C++, C and Fortran IDE that's Feature rich and easily extendible with plug-ins. It’s easy to use, comes with 
a compiler and has a vibrant community behind it.
STEP1
Start by visiting the Code::Blocks download site, at 
www.codeblocks.org/downloads. From there, click 
on the 'Download the binary releases' link to be taken to the latest 
downloadable version For Windows.
Q? Code::Blocks Installation
STEP 3 -J
When you've located the File, click on the 
SourceForge.net link at the end oF the line and a 
download notiFication window appears; click on Save File to start 
the download and save the executable to your PC. Locate the 
downloaded CoderBlocks installer and double-click to start. Follow 
the on-screen instructions to begin the installation.
Setup will guide you through the installation of CodeBlocks.
It is recommended that you dose all other applications 
before starting Setup. This will make it possible to update 
relevant system files without having to reboot your 
computer.
Click Next to continue.
- 
□ X
Welcome to CodeBlocks Setup
STEP 2
You can see that there are several Windows versions 
available. The one you want to download has 
'mingw-setup.exe' at the end oF the current version number. At 
the time oF writing this is: codeblocks-17.12mingw-setup.exe. The 
diFFerence is that the mingw-setup version includes a C++ compiler 
and debugger From TDM-GCC (a compiler suite).
STEP 4
Once you've agreed to the licencing terms, there is a 
choice oF installation options available. You can opt 
Fora smaller install, missing out on some oF the components but we 
would recommend you opt For the Full option as deFault.
Code::Blocks Installation
Choose Components
Choose which features of CodeBlocks you want to install.
File
codeblocks 17 12 sctup.oxo
codeblocks 1712 setup nonadmin.exe
codeblocks-17.12-nosetupzip
codeblock3-17 12mingw-setup exe
r.orieblnr.ks-1 / 12mmgw-nosfttup zip
r.urtehtoeks-1 / 12mmgw_tortr»n-SAliip exe
30 Dec
30 Dec
30 Dec
30 Dec
30 Dec
30 Dec
NOTE The cudvHo<;ks-17 12-svlup.exe file includes Code .Blocks with all plugins. The codeblocks-17.12-svtUfMiwiadrnin.exe file is provided foi conwn
NOTE Tho codoblocks-17 12mingw-sotup.exe file includes aMitionallv the GCC/G++ compiler and GDB debugger from TDM GCC (version 5.1.0, 32 bit. 
(TDM-GCC)
NOTE. The cudeblucks-17.12(iiiingw)-nosetup.zip files aie piovided foi convenience to useis that aie alleigic against instaNeis. Howevei, it will not allow
Select the type of install:
Or, select the optional 
components you wish to 
install:
Check the components you want to install and uncheck the components you don't want to 
install. Click Next to continue.
Full: All plugins, all tools, just everything
E
]-0 Default install 
a
J 0 Contrib Plugins
0C::BCBP2Make
0C::BCCTest 
M C::B Share Config 
-0 C::B Launcher 
y
Description
Position your mouse over a component to see its
If unsure, please use codeblocks-17.12mingw-setup.exe!
Space required: 253.4 MB
Python & C++ Coding

How to Set Up C++ in Windows
STEP 5
A
Next choose an install location for the Code::Blocks 
files. It's your choice, but the default will generally 
suffice, unless of course you have any special requirements. When 
you click Next, the install begins; when it’s finished a notification 
pops up asking you if you want to start Code::Blocks now, so click Yes.
STEP 8 -J
Please wait while CodeBlocks is being installed.
Before you start using CodecBlocks it's worth 
explaining exactly why you need the added 
compiler. First, a compiler is a separate program that reads 
through your C++ code and checks it against the latest acceptable 
programming standards; this is why you need the most recently 
available compiler. This is currently C++17, with C++20 underway.
Create shortcut: C:VJsers\david\AppDatafoamingV*1icrosoft\Windows\Start MenuV’rograms^
& then merge
2011 
2012 
2013 
2014 
2015 
2016 
2017 
2018 
2019
TS bars start and end 
where work on detailed 
specification wording 
starts ('adopt initial 
working draff) and ends 
("send to publication')
Future starts/ends are 
shaded to indicate that 
dates, and TS branches 
are approximate and 
subject to change
STEP 6 
A
The first time CodecBlocks loads it runs an 
auto-detect forany C++ compilers you may already 
have installed on you system. If you don't have any, click on the 
first detected option, GNU GCC Compiler, and click the Default 
button to set it as the system's C++ compiler. Click OK when you're 
ready to continue.
Compilers auto-detection 
□ X
Note: After auto-detection, at least one compiler's master path is still empty and therefore invalid.
Inspect the list below and change the compiler's master path later in the compiler options.
Select you favourite default compiler here:
Compiler 
GNU GCC Compiler
STEP 9
Essentially, computers work and understand only 
binary, ones and zeros, or Machine Language. 
Programming in binary isn't effective for human beings. For 
example, to output the words "Hello World!" to the screen in C++ 
would appear in binary as:
01100011 01101111 01110101 01110100 00100000 
00111100 00111100 00100000 00100010 01001000 
01100101 01101100 01101100 01101111 00100000 
01010111 01101111 01110010 01101100 01100100 
00100001 00100010 00111011
01100011 01101111 01110101 01110100 00100000 00111100 
00111100 00100000 00100010 01001000 01100101 01101100
01101100 01101111 00100000 01010111 01101111 01110010
01101100 01100100 00100001 00100010 00111011
Select
STEP 7
When the program starts another message appears, 
informing you that Code::Blocks is currently not the 
default application for C++ files. You a couple of options: to leave 
everything as it is or allow Code::Blocks to associate all C++ file 
types. Again, we would recommend you opt for the last choice to 
associate Code::Blocks with every supported file type.
STEP 10
The compiler therefore takes whatyou've 
entered as C++ code and translates that to 
Machine Language. To execute C++ code the IDE 'builds' the code, 
checking for errors, then pass it through the compiler to check 
standardisation and convert it to ones and zeros for the computer 
to act upon. It’s rather clever stuff, when you stop to think about it.
www.pclpublications.com

Say Hello to C++
How to Set Up 
C++ on a Mac
To begin C++ coding on a Mac you first need to install Apple's Xcode. This is a free, full 
featured IDE that's designed to create native Apple apps. However, you can also use it 
to create C++ code relatively easily.
XCODE
Apple's Xcode is primarily designed For users to develop apps For macOS, iOS, tvOS and watchOS applications in SwiFt or 
Objective-C but you can use it For C++ too.
STEP1
Start by opening the App Store on your Mac, Apple 
Menu > App Store. In the Search box enter 'Xcode' 
and press Return. There are many suggestions filling the App Store 
window but it’s the first option, Xcode, that you need to click on.
STEP 3
When you're ready, click on the Get button which 
then turnsinto Install App. Enteryour Apple ID 
and Xcode begins to download and install. It may take some time 
depending on the speed of your Internet connection.
STEP 2
Take a moment to browse through the app's 
information, including the compatibility, to ensure 
you have the correct version of macOS. Xcode requires macOS 
10.12.6 or later to install and work.
STEP 4
When the installation is complete, click on the 
Open button to launch Xcode. Click Agree to the 
licence terms and enteryour password to allow Xcode to make 
changes to the system. When that is done, Xcode begins to install 
additional components.
Python & C++ Coding

How to Set Up C++ on a Mac
STEP 5 
A
With everything now installed, including the 
additional components, Xcode launches, displaying 
the version number along with three choicesand any recent projects 
that you've worked on; with a fresh install though, this is blank.
STEP 8 -J
The next step asks where to create a Git Repository 
for all your future code. Choose a location on your 
Mac, or a network location, and dick the Create button. When 
you've done alt that, you can start to code. The left-hand pane 
details the files used in the C++ program you're coding. Click on the 
main.cpp file in the list.
STEP 6 
A
Start by clicking on Create New Xcode Project; this 
opens a template window to choose which platform 
you're developing code for. Click the macOS tab, then click the 
Command Line Tool option. Click Next to continue.
STEP 9
You can see that Xcode has automatically 
completed a basic Hello World program for you. 
While it may not make much sense at present, you will discover 
more as you progress, the content is just Xcode utilising what's 
available on the Mac.
| L 
JU ■
STEP 7
Fill in the various fields but ensure that the 
Language option at the bottom is set to C++; simply 
choose it from the drop-down list. When you've filled in the fields, 
and made sure that C++ is the chosen language, click on the Next 
button to continue.
STEP 10 -J
When you want to run the code, click on Product > 
Run. You may be asked to enable Developer Mode 
on the Mac; this is to authorise Xcode to perform functions without 
needing your password every session. When the program executes, 
the output is displayed at the bottom of the Xcode window.
www.pclpublications.com

Say Hello to C++
How to Set Up 
C++ in Linux
Linux is a great C++ coding environment. Most Linux distros already have the essential 
components preinstalled, such as a compilerand the text editors are excellent for 
entering code into, including colour coding; and there's tons of extra software available 
to help you out.
LINUX++
If you're not familiar with Linux, then we recommend taking a look at one of our Linux titles from the BDM Publications range. 
If you have a Raspberry Pi, the commands used below work just fine and for this example we're using Linux Mint.
STEP1
The first step is to ensure Linux is ready for your C++ 
code, so check the system and software are up to 
date. Open a Terminal and enter: sudo apt-get update && sudo apt- 
get upgrade. Then press Return and enter your password. These 
commands update the entire system and any installed software.
STEP 3
Amazingly, that's it. Everything is already for you 
to start coding. Here's how to get your first C++ 
program up and running. In Linux Mint the main text editor is Xed, 
which you can launch by clicking on the Menu and typing Xed into 
the search bar. Click on the Text Editor button in the right-hand pane 
to open it.
v 
david@mint-mate -
File Edit View Search Terminal Help
ldavid@mint-mate - s sudo apt-get update && sudo apt-get upgrade 
[sudo] password for david: |
STEP 2
Most Linux distros come preinstalled with all 
the necessary components to start coding in 
C++; however, it's always worth checking to see if everything 
is present. Still within the Terminal, enter: sudo apt-get 
install build-essential and press Return. If you have the right 
components nothing is installed; if you're missing some then they 
are installed by the command.
STEP 4
In Xed, or any other text editor you may be using, 
enter the lines of code that make up your C++ Hello 
World program. It’s a little different to what the Mac produced:
#include <iostream> 
int mainO 
{
//My first C++ program
std::cout « “Hello World!\n”; 
}
Python & C++ Coding

Q How to Set: Up C++ in Linux
STEP 5 
A
When you've entered your code, click File > Save As 
and choose a folder in which to save your program. 
Name the file as helloworld.cpp (it can be any name as long as it has 
.cpp as the extension). Click Save to continue.
STEP 8
Before you can execute the C++ file you need to 
compile it. In Linux it's common to use g++, an open 
source C++ compiler; as you're now in the same folder as the C++ 
file, enter: g++ helloworld.cpp in the Terminal and press Return.
STEP 6 
A
The first thing to notice is that Xed has 
automatically recognised this as a C++ file, since the 
file extension is now set to .cpp. The colour coding is present in the 
code and if you open up the file manageryou can also see that file's 
icon has C++ stamped on it.
STEP 9
It takes a short time while the code is compiled by 
g++ but providing there are no mistakes or errors in 
the code you are returned to the command prompt. The compiling 
of the code has created a new file. If you enter: Is into the Terminal 
you can see that alongside your C++ file is a.out.
STEP 7
With your code now saved, drop into the Terminal 
again. You need to navigate to the location of 
the C++ file you've just saved. Our example is in the Documents 
folder, so we can navigate to it by entering: cd Documents. 
Remember, the Linux Terminal is case sensitive, so any capitals 
must be entered correctly.
STEP 10 -J
The a.out file is the compiled C++ code. To run 
the code enter: ./a.out and press Return. The 
words 'Hello World!' appear on the screen. However, a.out isn't 
very friendly. To name it something else post-compiling, you can 
recompile with: g++ helloworld.cpp -o helloworld. This creates an 
output file called helloworld which can be run with: ./helloworld.
david@mint-mate -/Document
File Edit View Search Terminal Help
davidgniint-mate - s cd Documents 
david@mint-mate '/Documents S |
www.pclpublications.com

Say Hello to C++
Other C++ IDEs to Install
If you want to try a different approach to working with your C++ code, then there are 
plenty of options available to you. Windows is the most prolific platform for C++ IDEs 
but there are plenty for Mac and Linux users too.
DEVELOPING C++
Here are ten great C++ IDEs that are worth looking into. You can install one or all of them if you like, but find the one that 
works best for you.
ECLIPSE
Eclipse is a hugely popular C++ IDE that offers 
the programmer a wealth of features. It has a 
great, clean interface, is easy to use and available for Windows, 
Linux and Mac. Head over to www.eclipse.org/downloads/ to 
download the latest version. If you're stuck, click the Need Help link
for more information.
£ C/C++ - Hello Wurld C++ PiojcUAic/Hello World C++ Projeit.cpp • Edipxe
File Edit Source Refactor Navigate Search Project Run Window Help
i rj > a « a I a nt+o+a+«+:*+»+:» + 0’*’:»®«*’ HIv11 
9. ’ v> ’ * O’
i. E Project Explorer £3 
O
_________________ 'e | v v
kJ al
kJ Hello World C • • Project
jjjf Binaries 
£j; Includes 
£5 src
Lcl Hello World C++ Project.cpp 
fe. Debug
CODELITE
CodeLite is a free and open source IDE that's 
regularly updated and available for Windows, 
Linux and macOS. It's lightweight, uncomplicated and extremely 
powerful. You can find out more information as well as how to 
download and install it at www.codelite.org/.
«s, coi a. ra iwu, ■»/<• o 
bw o+»u<t oej. o+«ut
GNAT
The GNAT Programming Studio (GPS) is a powerful 
and intuitive IDE that supports testing, debugging 
and code analysis. The Community Edition is free, whereas the 
Pro version costs; however, the Community Edition is available for 
Windows, Mac, Linux and even the Raspberry Pi. You can find it at 
www.adacore.com/down load.
NETBEANS
Another popular choice is NetBeans. This 
is another excellent IDE that's packed with 
features and a pleasure to use. NetBeans IDE includes project based 
templates for C++ that give you the ability to build applications with 
dynamic and static libraries. Find out more at www.netbeans.org/ 
features/cpp/index.html.
Python & C++ Coding

r Other C++ IDEs to Install
VISUAL STUDIO a
Microsoft's Visual Studio is a 
mammoth C++ IDE that allows you 
to create applications for Windows, Android, iOS and the web. The 
Community version is free to download and install but the other 
versions allow a free trial period. Go to www.visualstudio.com/ to 
see what it can do foryou.
- Messages
Build 35: Debug Ql . Build 54: Debug Build 53: Debug 
Entering: /bomeztorrest/tigure/Debug
makefl] Cntenng directory ’ Aiome/forrest/figureiDebug'
ANJUTA
The Anjuta DevStudio is a Linux-only IDE that 
features some of the more advanced features you 
would normally find in a paid software development studio. There's 
a GUI designer, source editor, app wizard, interactive debugger and 
much more. Go to www.anjuta.org/ for more information.
[il* Edit View Protect Bmld Bun Debug Documents Help
QT CREATOR
This cross-platform IDE is designed to 
create C++ applications for desktop and 
mobile environments. It comes with a code editor a nd integrated 
tools for testing and debugging, as well as deploying to you chosen 
platform. It's not free but there is a trial period on offer before 
requiring purchasing: www.qt.io/qt-features-libraries-apis-tools- 
and-ide/.
MONODEVELOP 
a
This excellent IDE allows developers 
to write C++ code for desktop and 
web applications across all the major platforms. There's an advanced 
text editor, integrated debugger and a configurable workbench to 
help you create your code. It's available for Windows, Mac and Linux 
and is free to download and use: www.monodevelop.com/.
► Debug I Maed Pb " ) Defeutt 
0 MmmOwu?________________________________  Q
DEV C++ 
a
Bloodshed Dev C++, despite its colourful name, 
is an older IDE that is for Windows systems only. 
However, many users praise its clean interface and uncomplicated 
way of coding and compiling. Although there's not been much 
updating for some time, it’s certainly one to consider if you want 
something different: www.bloodshed.net/devcpp.html.
Ultimate++ is a cross-platform C++ IDE that boats a rapid 
development of code through the smart and aggressive 
use of C++. For the novice, it’s a beast of an IDE but behind its 
complexity is a beauty that would make a developer’s knees go 
wobbly. Find out moreatwww.ultimatepp.org/index.html.
www.pclpublications.com

Index
C++ z
Fundamentals
& C++ Coding

Q C++ Fundamentals
98 Your First C++Program
100 Structure of a C++Program
These are the building blocks oF a C++ 
program. With them, you can Form your 
own code, produce an output to the 
screen and store and retrieve data.
102 Compile and Execute
104 Using Comments
106 Variables
108 Data Types
110 Strings
112 C++Maths
Within this section you can begin to 
understand the structure oF C++ code 
and how to compile and execute that 
code. These are the Fundamentals oF C++, 
which teach you the basics such as using 
comments, variables, data types, strings 
and how to use C++ mathematics.
www.pclpublications.com

C++ Fundamentals
Your First C++ Program
You may have followed the Mac and Linux examples previously but you're going to be 
working exclusively in Windows and Code::Blocks from here on. Let's begin by writing 
your first C++ program and taking the first small step into a larger coding world.
HELLO, WORLD!
It's traditional in programming for the first code to be entered to output the words 'Hello, World!' to the screen. Interestingly, 
this dates back to 1968 using a language called BCPL.
STEP1 
________ J
As mentioned, we're using Windows 10 and the 
latest version of CodecBlocks for the rest of the C++
STEP 3 
A
code in this book. Begin by launching Code::Blocks. When open, click 
on File > New > Empty File or press Ctrl+Shift+N on the keyboard.
At the moment it doesn't look like much, and 
it makes even less sense, but we’ll get to that 
in due course. Now click on File >Save File As. Create or find a 
suitable location on your hard drive and in the File Name box, call 
it helloworld.cpp. Click the Save as type box and select C/C++ files. 
Click the Save button.
STEP 2
Now you ca n see a blank screen, with the tab 
labelled *Untitled1, and the number one in the top 
left of the main CodecBlocks window. Begin by clicking in the main 
window, so the cursor is next to the number one, and entering:
STEP 4
#include <iostream>
You can see that Code::Blocks has now changed 
the colour coding, recognising that the file is now 
C++ code. This means that code can be auto-selected from the 
Code::Blocks repository. Delete the #include <iostream> line and 
re-enter it. You can see the auto-select boxes appearing.
Python & C++ Coding

Your First C++ Program
STEP 5
line 3, then enter:
Auto-selection of commands is extremely handy and 
cuts out potential mistyping. Press Return to get to
STEP 8 
________ J
Note again the colour coding change. Press Return at 
the end of the previous step's line, and then enter:
int malnO
std::cout « “Hello, world!\n”;
STEP 6 
________ J
On the next line below int main(), enter a curly bracket:
STEP 9
This can be done by pressing Shift and the key to the right of P on an 
English UK keyboard layout.
Just as before, Code::Blocks auto-completes the 
code you're entering, including placing a closing 
speech mark as soon as you enter the first. Don't forget the 
semicolon at the end of the line; this is one of the most important 
elements to a C++ program and we'll tell you why in the next 
section. For now, move the cursor down to the closing curly bracket 
and press Return.
STEP 7
Notice that Code::Blocks has automatically created 
a corresponding closing curly bracket a couple of 
lines below, linking the pair, as well as a slight indent. This is due to 
the structure of C++ and it's where the meat of the code is entered. 
Now enter:
STEP 10 -J
That's all you need to do for the moment. It may 
not look terribly amazing but C++ is best absorbed 
in small chunks. Don't execute the code at the moment as you need 
to look at how a C++ program is structured first; then you can build 
and run the code. For now, click on Save, the single floppy disc icon.
//My first C++ program
www.pclpublications.com

C++ Fundamentals
Structure of a 
C++ Program
C++ has a very defined structure and way of doing things. Miss something out, even 
as small as a semicolon, and your entire program will fail to be compiled and executed. 
Many a professional programmer has fallen foul of sloppy structure.
INCLUDE <C++ STRUCTURE>
Learning the basics of programming, you begin to understand the structure of a program. The commands may be different 
from one language to the next, but you will start to see how the code works.
C++ was invented by Danish 
student Bjarne Stroustrup in 
1979, as a part of his Ph.D. 
thesis. Initially C++ was called C 
with Classes, which added 
features to the already popular 
C programming language, 
while making it a more 
user-friendly environment 
through a new structure.
Bjarne Stroustrup, inventor 
of C++.
#INCLUDE
The structure of a C++ program 
is quite precise. Every C++ code 
begins with a directive: #include 
<>. The directive instructs the 
pre-processor to include a 
section of the standard C++ 
code. For example: #include 
<iostream> includes the 
iostream header to support 
input/output operations.
INT MAIN()
int main() initiates the 
declaration of a function, which 
is a group of code statements 
under the name 'main'. All 
C++ code begins at the main 
function, regardless of where it 
actually lies within the code.
Start here x j *helloworld.cpp X
1 
^include <iostream>
2
3 
int main()
4
5
6 I
BRACES
The open brace (curly brackets) is something 
that you may not have come across before, 
especially if you're used to Python. The 
open brace indicates the beginning of the 
main function and contains all the code that 
belongs to that function.
1
2
3
4
5
6
#include <iost re ano­
int main()
B{
Python & C++ Coding

(^Structure of a C++ Program
COMMENTS
Lines that begin with a double slash are comments. This means they 
won't be executed in the code and are ignored by the compiler.
Comments are designed to help you, oranother programmer
looking atyour code, explain what's going on. There are two types
of comment: /* covers multiple line comments,// a single line. Lines
«
The two chevrons used here are insertion operators. This means 
that whatever follows the chevrons is to be inserted into the 
std::cout statement. In this case they're the words ’Hello, world', 
which are to be displayed on the screen when you compile and 
execute the code.
that begin with a double slash are comments. This means they won't
be executed in the code and 
are ignored by the compiler. 
Comments are designed 
to help you, or another 
programmer looking at 
your code, explain what's 
going on. There are two 
types of comment: /* covers 
multiple line comments, //a 
single line.
std
public ostream cout 
(variable)
Open declaration
Close Top
STD
OUTPUTS
While std stands forsomething quite different, in C++ it means 
Standard. It's part of the Standard Namespace in C++, which covers 
a number of different statements and commands. You can leave the 
std:: part out of the code but it must be declared at the start with: 
using namespace std; not both. For example:
Leading on, the "Hello, world!" part is what we want to appear on 
the screen when the code is executed. You can enter whatever you 
like, as long as it’s inside the quotation marks. The brackets aren't 
needed but some compilers insist on them. The\n part indicates a 
new line is to be inserted.
#include <iostream> 
using namespace std;
cout << "Hello, world!\n"
COUT
In this example we're using cout, which is a part of the Standard 
Namespace, hence why it's there, as you're asking C++ to use it from 
that particular namespace. Cout means Character OUTput, which 
displays, or prints, something to the screen. If we leave std:: out we 
have to declare it at the start of the code, as mentioned previously.
; AND}
Finally you can see that lines within a function code block (except 
comments) end with a semicolon. This marks the end of the 
statement and all statements in C++ must have one at the end or 
the compiler fails to build the code. The very last line has the closing 
brace to indicate the end of the main function.
Start here X | *helbworki.cpp x[
www.pctpubtications.com

C++ Fundamentals
Compile and Execute
You've created your first C++ program and you now understand the basics behind the 
structure of one. Let's actually get things moving and compile and execute, or run if 
you prefer, the program and see how it looks.
GREETINGS FROM C++
Compiling and executing C++ code From Code::Blocks is extraordinarily easy; just a matter oF clicking an icon and seeing the 
result. Here's how it's done.
STEP1
Open Code::Blocks, if you haven't already, and 
load up the previously saved Hello World code you 
created. Ensure that there are no visible errors, such as missing 
semicolons at the end of the stdccout line.
STEP 3 
A
Start by clicking on the Build icon, the yellow cog.
At this point, your code has now been run through 
the Code::Blocks compiler a nd checked for any errors. You can see 
the results of the Build by looking to the bottom window pane. Any 
messages regarding the quality of the code are displayed here.
STEP 2 
a
If your code is looking similar to the one in our 
screenshot, then look to the menu bar along the top 
of the screen. Under the Fortran entry in the topmost menu you can 
see a group of icons: a yellow cog, green play button and a cog/play 
button together. These are Build, Run, Build and Run functions.
STEP 4
Now click on the Run icon, the green play button. 
A command line box appears on your screen 
displaying the words: Hello, world!, followed by the time it's taken 
to execute the code, and asking you press a key to continue. Well 
done, you just compiled and executed your first C++ program.
*helk>worki.cpp
Python & C++ Coding

Compile and Execute
STEP 5 
A
Pressing any key in the command line box closes it, 
returning you to CodecBlocks. Let's alter the code 
slightly. Under the #include line, enter:
using namespace std;
Then, delete the std:: part of the Cout line; like so:
STEP 8
Create a deliberate error in the code. Remove the 
semicolon from the cout line, so it reads:
cout « “Hello, world I\n”
cout « “Hello, world\n”;
Start here 
X | *tielloworld.cpp X
1 
tinclude <iostream>
2 
using namespace std;
3
4 
int main()
5 
El I
6
7 
cout « "Hello, world!\n"
8
9
10
11
12
STEP 6 
A
In order to apply the new changes to the code, you 
need to re-compile, build, and run it again. This time, 
however, you can simply click the Build/Run icon, the combined 
yellow cog and green play button.
STEP 9
Now click the Build and Run icon again to apply the 
changes to the code. This time Code::Blocks refuses 
to execute the code, due to the error you put in. In the Log pane at 
the bottom of the screen you are informed of the error, in this case: 
Expected ';' before token, indicating the missing semicolon.
STEP 7
Just as we mentioned in the previous pages, you 
don't need to have stdccout if you already declare 
using namespace std; at the beginning of the code. We could have 
easily clicked the Build/Run icon to begin with but it's worth going 
through the available options. You can also see that by building and 
running, the file has been saved.
STEP 10 -J
Replace the semicolon and under the cout line, 
entera new line toyourcode:
cout « “And greetings from C++!\n”;
The\n simply adds a new line under the last line of outputted text. 
Build and Run the code, to display your handiwork.
File Edit View Search Project Build Debug Fortran wxSmith Tools Tools* Plugins DoxyBlocks Settir
helloworld.cpp - CodenBlocks 17.12
www.pclpublications.com

C++ Fundamentals
Using Comments
While comments may seem like a minor element to the many lines of code that 
combine to make a game, application or even an entire operating system, in actual fact 
they're probably one of the most important factors.
THE IMPORTANCE OF COMMENTING
Comments inside code are basically human readable descriptions 
that detail what the code is doing at that particular point. They don’t 
sound especially important but code without comments is one of 
the many frustrating areas of programming, regardless of whether 
you're a professional or just starting out.
In short, all code should be commented in such a manner as to 
effectively describe the purpose of a line, section, or individual 
elements. You should get in to the habit of commenting as much as 
possible, by imagining that someone who doesn't know anything 
about programming can pick up your code and understand what it’s 
going to do simply by reading your comments.
In a professional environment, comments are vital to the success 
of the code and ultimately, the company. In an organisation, many 
programmers work in teams alongside engineers, other developers, 
hardware analysts and so on. If you're a part of the team that's 
writing a bespoke piece of software for the company, then your 
comments help save a lot of time should something go wrong, and 
another team member has to pick up and follow the trail to pinpoint 
the issue.
Place yourself in the shoes of someone whose job it is to find out
what's wrong with a program. The program
has in excess of 800,000 lines of code, 
spread across several different 
modules. You can soon appreciate 
the need fora little help from the 
original programmers in the form of a
good comment.
The best comments are always concise 
and link the code logically, detailing what 
happens when the 
program hits this 
line or section. 
You don't need 
to comment 
on every line. 
Something along 
the lines of: if 
x==0 doesn't 
require you to 
comment that if x 
equals zero then 
do something; 
that's going to be obvious to the reader. However, if x equalling zero 
is something that drastically changes the program for the user, such 
as, they've run out of lives, then it certainly needs to commented on.
Even if the code is your own, you should write comments as if you 
were going to publicly share it with others. This way you can return 
to that code and always understand what it was you did or where it 
was you went wrong or what worked brilliantly.
Comments are good practise and once you understand how to add a 
comment where needed, you soon do it as if it’s second nature.
DEFB 26h,30h,32h,26h,30h,32h,0, 0,32h,72h,73h,32h,72h, 73h,32h 
DEFB 60h,61h,32h,4Ch,4Dh,32h,4Ch,99h,32h,4Ch,4Dh,32h,4Ch,4Dh 
DEFB 32h,4Ch,99h,32h,5Bh,5Ch,32h,56h,57h,32h,33h,OCDh,32h,33h 
DEFB 
34h,32h,33h,34h,32h,33h,OCDh,32h,40h,41h,32h,66h,67h,64h
DEFB 66h,67h,32h,72h,73h,64h,4Ch,4Dh,32h,56h,57h,32h,80h,OCBh 
DEFB 19h,80h,0,19h,80h,81h,32h,80h,OCBh,OFFh 
T858C: 
DEFB 80h,72h,66h,60h,56h,66h,56h,56h,51h,60h,51h,51h,56h,66h 
DEFB 56h,56h,80h,72h,66h,60h,56h,66h,56h,56h,51h,60h,51h,51h 
DEFB 56h,56h,56h,56h,80h,72h,66h,60h,56h,66h,56h,56h,51h,60h 
DEFB 
51h,51h,56h,66h,56h,56h,80h,72h,66h,60h,56h,66h,56h,40h
DEFB 
56h,66h,80h,66h,56h,56h,56h,56h
; Game restart point 
START: XOR 
A
LD 
(SHEET),A
LD 
(KEMP),A
LD 
(DEMO),A
LD 
(B845B),A
LD 
(B8458),A
LD 
A,2 
;Initial lives count
LD 
(NOMEN),A
LD 
HL,T845C
SET 
0, (HL)
LD 
HL,SCREEN
LD 
DE,SCREEN+1
LD 
BC,17FFh 
;Clear 
screen image
LD 
(HL),0
LDIR 
LD 
HL,OAOOOh 
;Title 
screen bitmap
LD 
DE,SCREEN
LD 
BC,4096
LDIR 
LD 
HL,SCREEN 
+ 800h + 1*32 + 29
LD 
DE,MANDAT+64
LD 
C,0
CALL 
DRWFIX
LD 
HL,0FC00h 
;Attributes for the last room
LD 
DE,ATTR 
;(top third)
LD 
BC,256
LDIR 
LD 
HL,09E00h 
;Attributes for title 
screen
LD 
BC,512 
;(bottom two-thirds)
LDIR 
LD 
BC,31
DI 
XOR 
A
R8621: 
IN 
E, (C)
OR 
E
DJNZ R8621 
;$-03
AND 
2 Oh
JR 
NZ,R862F 
;$+07
LD 
A, 1
LD 
(KEMP),A
R862F: 
LD 
IY,T846E
CALL 
C92DC
JP 
NZ,L8684
XOR 
A
LD 
(EUGHGT),A
Python & C++ Coding

Using Comments
C++ COMMENTS
Commenting in C++ involves using a double Forward slash or a Forward slash and an asterisk, You've already seen some 
brieF examples but this is how they work.
STEP1 
a
Using the Hello World code as an example, you can 
easily comment on diFFerent sections oF the code 
using the double Forward slash:
//My first C++ program 
cout « “Hello, world!\n”;
i
2
3
4
5
6
7
8
9
10
11
12
♦include <iostream> 
using namespace std;
int main()
B{
cout « "Hello, world!\n";
STEP 4
Be careFul when commenting, especially with block 
comments. It's very easy to Forget to add the closing 
asterisk and Forward slash and thus negate any code that Falls inside 
the comment block.
STEP 2
However, you can also add comments to the end 
oF a line oF code, to describe in a better way what's 
going on:
cout « “Hello, world!\n”; //This line outputs the 
words ‘Hello, world!’. The \n denotes a new line.
STEP 5
Obviously iF you try and build and execute the 
code it errors out, complaining oFa missing curly 
bracketto Finish oFF the block oF code. IF you've made the 
error a Few times, then it can be time consuming to go back and 
rectiFy. ThankFully, the colour coding in CodecBlocks helps identiFy 
comments From code.
Note, you don’t have to put a semicolon at the end oFa comment. 
This is because it's a line in the code that's ignored by the compiler.
Start here 
*helloworki.cpp x[
{include <iostream> 
using namespace std;
int main()
□ <
cout « "Hello, world!\n";
STEP 3
You can comment out several lines by using the 
forward slash and asterisk:
/* This comment can 
cover several lines 
without the need to add more slashes */
Just remember to finish the block comment with the opposite 
asterisk and forward slash.
STEP 6 -J
IFyouTe using block comments, it’s good practise 
in C++ to add an asterisk to each new line oF the 
comment block. This also helps you to remember to close the 
comment block oFF beFore continuing with the code:
/* This comment can
* cover several lines
* without the need to add more slashes */
4
5
6
7
8
9
10
11
12
13
14
15
int main()
Br
cout « "Hello, world!\n";
cout « "And greetings from C++";
/* This comment can 
cover several lines 
without the need to add more slashes
8
9
10
11
12
13
14
15
16
17
18
Bl
I
 cout « "Hello, world!\n";
cout « "And greetings from C++\n”;
* cover several lines
cout « "This line is now being ignored by the compiler!\n";
www.pcLpublications.com

C++ Fundamentals
Variables
Variables differ slightly when using C++ as opposed to Python. In Python, you can 
simply state that 'a' equals 10 and a variable is assigned. However, in C++ a variable has 
to be declared with its type before it can be used.
THE DECLARATION OF VARIABLES
You can declare a C++ variable by using statements within the code. There are several distinct types of variables you can 
declare. Here's how it works.
STEP1
________ J
Open up a new, blank C++ file and enter the usual 
code headers:
STEP 3
________ J
You can build and run the code but it won’t do 
much, other than store the values 10 and 5 to the
#include <iostream> 
using namespace std; 
int mainO 
{
}
integers a and b. To output the contents of the variables, add:
cout « a;
cout « ”\n”;
cout « b;
Start here X Variables.cpp X
1
2
3
4
5
6
7
8
9
^include <iostream> 
using namespace std;|
int main()
}
The cout« "\n"; part 
simply places a new line 
between the output of 
Wand 5.
STEP 2
a
Start simple by creating two variables, a and b, with 
one having a value of 10 and the other 5. You can 
use the data type int to declare these variables. Within the curly 
brackets, enter:
STEP 4
________ J
Naturally you can declare a new variable, call it 
result and output some simple arithmetic:
int a;
int b;
a = 10;
b = 5;
Start here 
X *Variables.cpp X |
^include <iostream> 
using namespace std;
int result;
result = a + b; 
cout « result;
2
3
4
5
6
7
8
9
10
12
14
int
int a;
a = 10;
b = 5;
Insert the above into the code as per the screenshot.
Python & C++ Coding

Variables
STEP 5 
A
You can assign a value to a variable as soon as you 
declare it. The code you've typed in could look like 
this, instead:
STEP 8
int a = 10;
int b = 5;
int result = a + b;
The previous step creates the variable StartLives, 
which is a global variable. In a game, for example, 
a player’s lives go up or down depending on how well or how bad 
they're doing. When the player restarts the game, the StartLives 
returns to its default state: 3. Here we've assigned 3 lives, then 
subtracted 1, leaving 2 lives left.
cout « result;
■ C:\Users\david\Documents\C++Waria bles.exe
15
Process returned 0 (0x0) execution time : 0.040 s 
Press any key to continue.
2
Process returned 0 (0x0) execution time : 0.040 s 
Press any key to continue.
STEP 9 
a
The modern C++ compiler is far more intelligent 
than most programmers give it credit. While there 
are numerous data types you can declare for variables, you can in 
fact use the auto feature:
STEP 6 
A
Specific to C++, you can also use the following 
to assign values to a variable as soon as you 
declare them:
int a (10);
int b (5);
Then, from the C++ 2011 standard, using curly brackets: 
int result {a+b};
#include <iostream> 
using namespace std; 
auto pi = 3.141593;
int main()
{ 
double area, radius = 1.5;
area = pi * radius * radius;
cout « area;
}
rocess returned 0 (0x0) execution time : 0.038 s 
ress any key to continue.
Jsers\david\Documents\C++\Variables.exe
STEP 7
You can create global variables, which are variables 
that are declared outside any function and used in 
any function within the entire code. What you've used so far are 
local variables: variables used inside the function. For example:
STEP 10
#include <iostream> 
using namespace std; 
int StartLives = 3;
int main ()
A couple of new elements here: first, auto won't 
work unless you go to Settings > Compiler and 
tick the box labelled 'Have C++ follow the C++11 ISO C++ Language 
Standard [-std=c++1 ]'. Then, the new data type, double, which 
means double-precision floating point value. Enable C++11, then 
build and run the code. The result should be 7.06858.
{
startLives = StartLives - 1; 
cout « StartLives;
}
www.pclpublications.com

C++ Fundamentals
Data Types
Variables, as we've seen, store information that the programmer can then later call up, 
and manipulate if required. Variables are simply reserved memory locations that store 
the values the programmer assigns, depending on the data type used.
THE VALUE OF DATA
There are many different data types available for the programmer 
in C++, such as an integer, floating point, Boolean, character and so 
on. It's widely accepted that there are seven basic data types, often 
called Primitive Built-in Types; however, you can create your own 
data types should the need ever arise within your code.
The seven basic data types are:
TYPE
COMMAND
Integer
Floating Point
fiBBW
Character
Boolean
imai
Double Floating Point
ws>iai3
Wide Character
No Value
These basic types can also be extended using the following modifiers: 
Long, Short, Signed and Unsigned. Basically this means the modifiers 
can expand the minimum and maximum range values for each data 
type. For example, the intdata type has a default value range of 
-2147483648 to 2147483647, a fair value, you would agree.
Now, if you were to use one of the modifiers, the range alters:
Unsigned int = 0 to 4294967295
Signed int = -2147483648 to 2147483647
Short int = -32768 to 32767
Unsigned Short int = 0 to 65,535
Signed Short int = -32768 to 32767
Long int = -2147483647 to 2147483647
Signed Long int = -2147483647 to 2147483647
Unsigned Long int = 0 to 4294967295
Naturally you can getaway with using the basic type without the 
modifier, as there's plenty of range provided with each data type. 
However, it's considered good C++ programming practise to use the 
modifiers when possible.
There are issues when using the modifiers though. Double 
represents a double-floating point value, which you can use for 
incredibly accurate numbers but those numbers are only accurate 
up to the fifteenth decimal place. There's also the problem when 
displaying such numbers in C++ using the cout function, in that cout 
by default only outputs the first five decimal places. You can combat 
that by adding a cout.precision () function and adding a value inside 
the brackets, but even then you’re still limited by the accuracy of the 
double data type. For example, try this code:
#include <iostream> 
using namespace std; 
double PI = 3.141592653589793238463;
int mainO
{
cout «
}
Pi;
Start here X | DataTypes.cpp X | 
^include <iostream> 
using namespace std;
3.141592653589793238463;
1
2
3 
| double PI
4
5
6
int main()
PI;
8
9
10
■ C:\Users\d a vid\Documents\C++\DataTypes.exe
3.14159
Process returned 0 (0x0) execution time : 0.054 s 
Press any key to continue.
Build and run the code and as you can see the output is only 
3.14159, representing cout’s limitations in this example.
You can alter the code including the aforementioned cout.precision 
function, for greater accuracy. Take precision all the way up to 22 
decimal places, with the following code:
#include <iostream> 
using namespace std; 
double PI = 3.141592653589793238463;
int mainO
{
Python & C++ Coding

Data Types
cout.precision(22); 
cout « PI;
Il 1 C:\ll sers\d avi d\Oocu m ents\C +■+\Datatypes. exe
This is mainly due to the conversion from binary in the compiler 
and that the IEEE 754 double precision standard occupies 64-bits 
of data, of which 52-bitsare dedicated to the significant (the 
significant digits in a floating-point number) and roughly 3.5-bits 
are taken holding the values 0 to 9. If you divide 53 by 3.5, then you 
arrive at 15.142857 recurring, which is 15-digits of precision.
To be honest, if you're creating code that needs to be accurate to 
more than fifteen decimal places, then you wouldn't be using C++, 
you would use some scientific specific language with C++ as the 
connective tissue between the two languages.
You can create your own data types, using an alias-like system called 
typedef. For example:
3.141592653589793115998
Process returned 0 (6x6) execution time : 0.847 s 
Press any key to continue.
Again, build and run the code; as you can see from the command 
line window, the number represented by the variable PI is different 
to the numberyou've told C++ to use in the variable. The output 
reads the value of PI as 3.141592653589793115998, with the 
numbers going awry from the fifteenth decimal place.
Calculator 
— 
□ 
X
= Scientific 
q
15.142857142857142857142857142857
DEG 
HYP 
F-E
M+ 
M- 
MS
xz 
xy 
sin 
cos 
tan
V 
10* 
log 
Exp 
Mod
T 
CE 
C 
<3
TI
7
8
9
x
n!
4
5
6
—
1
2
3
-f-
(
)
0
»
=
#include <iostream> 
using namespace std; 
typedef int metres;
int mainO
{
metres distance;
distance = 15;
cout « “distance in metres is: “ « distance;
S3 C:\Users\david\Documents\C++\DataTypes.exe
distance in metres is: 15
Process returned 0 (0x0) execution time : 0.041 s 
Press any key to continue.
This code when executed creates a new int data type called metres. 
Then, in the main code block, there's a new variable called distance, 
which is an integer; so you're basically telling the compiler that 
there's another name for int. We assigned the value 15 to distance 
and displayed the output: distance in metres is 15.
It might sound a little confusing to begin with but the more you use 
C++ and create your own code, the easier it becomes.
www.pcLpublications.com

C++ Fundamentals
Strings
Strings are objects that represent and hold sequences of characters. For example, you 
could have a universal greeting in your code 'Welcome' and assign that as a string to be 
called up wherever you like in the program.
STRING THEORY
There are different ways in which you can create a string of characters, which historically are all carried over from the original 
C language, and are still supported by C++.
STEP1 
________ J
To create a string you use the char function. Open a 
new C++ file and begin with the usual header:
#include <iostream> 
using namespace std;
int main O
{
STEP 3 
A
Build and run the code, and 'Welcome' appears 
on the screen. While this is perfectly fine, it's 
not a string. A string is a class, which defines objects that can be 
represented as a stream of characters and doesn't need to be 
terminated like an array. The code can therefore be represented as:
#include <iostream> 
using namespace std;
int main O
It’s easy to confuse a string with an array. Here's an 
array, which can be terminated with a null character:
STEP 2
________ J
#include <iostream> 
using namespace std;
int main O
{
char greet[8] = {‘W’, ‘e’, ‘I’, ‘c’, ‘o’, ‘m’, 
‘ e ’, ‘\0’} ;
cout « greet « “\n”;
char greet[] = “Welcome 
cout « greet « “\n”;
Files ►
In C++ there's also a string function, which works in 
much the same way. Using the greeting code again, 
you can enter:
STEP 4
#include <iostream> 
using namespace std;
int main O 
{
string greet = “Welcome”; 
cout « greet « “\n”;
Python & C++ Coding

STEP 5
A
There are also many different operations thatyou 
can apply with the string function. For instance, to 
get the length of a string you can use:
STEP 8
#include <iostream> 
using namespace std;
int main ()
Just as you might expect, you can mix in an integer 
and store something to do with the string. In this 
example, we created int length, which stores the result of string. 
size() and outputs it to the user:
#include <iostream> 
using namespace std;
{
string greet = “Welcome”;
cout « “The length of the string is: 
cout « greet.sizeQ « “\n”;
int main ()
{
int length;
string greetl = “Hello”;
string greet2 = world!”;
string greets = greetl + greet2;
length = greets. sizeQ;
cout « “The length of the combined strings 
is: “ « length « “\n”;
STEP 9
STEP 6
You can see that we used greet.size() to output the 
length, the number of characters there are, of the 
contents of the string. Naturally, if you call your string something 
other than greet, then you need to change the command to reflect 
this. It's always stringname.operation. Build and run the code to see 
the results.
Using the available operations that come with the 
string function, you can manipulate the contentsofa 
string. For example, to remove characters from a string you could use:
■ Q\Users\david\Documents\C++\Stnngs.exe
The length of the string is: 7
Process returned 0 (0x0) execution time : 0.044 s 
Press any key to continue.
STEP 7
________ J
You can of course add strings together, or rather 
combine them to form longer strings:
#include <iostream> 
using namespace std;
int main ()
#include <iostream> 
using namespace std;
int main ()
{
string strg (“Here is a long sentence in a 
string.”);
cout « strg « *\n’;
strg.erase (10,5);
cout « strg « *\n’;
strg.erase (strg.begin()+8);
cout « strg « *\n’;
strg.erase (strg.begin()+9, strg.end()-9); 
cout « strg « *\n’;
}
{
string greetl = “Hello”;
string greet2 = world!”;
string greets = greetl + greet2;
STEP 10
It's worth spending some time playing around with 
the numbers, which are the character positions 
in the string. Occasionally, it can be hit and miss whether you get it 
right, so practice makes perfect. Take a look at the screenshot to see 
the result of the code.
cout « greets « “\n”;
|11 C:\Users\david\Documents\C++\Strings,exe
Start here X Strings.cpp X ]
♦include <iostreara> 
using namespace std;
int main ()
string greetl = "Hello";
string greet2 = ", world!";
string greets = greetl + greet2;
cout « greets « "\n";
Here is a long sentence in a string.
Here is a sentence in a string.
Here is sentence in a string.
Here is a string.
Process returned 0 (0x0) execution time : 0.051 s 
Press any key to continue.
www.pclpublications.com

C++ Fundamentals
C++ Maths
Programming is mathematical in nature and as you might expect, there's plenty of 
built-in scope for some quite intense maths. C++ has a lot to offer someone who's 
implementing mathematical models into their code. It can be extremely complex or 
relatively simple.
C++ = MC2
The basic mathematical symbols apply in C++ as they do in most other programming languages. However, by using the C++ 
Math Library, you can also calculate square roots, powers, trig and more.
STEP1
C++'s mathematical operations follow the 
same patterns as those taught in school, in that 
multiplication and division take precedence overaddition and 
subtraction. You can alter that though. For now, create a new file 
and enter:
#include <iostream>
using namespace std;
int main () 
{
float numbers = 100;
numbers = numbers + 10; // This adds 10 to the 
initial 100
cout « numbers « “\n”;
numbers = numbers - 10; // This subtracts 10 
from the new 110
cout « numbers « “\n”;
STEP 2
While simple, it does get the old maths muscle 
warmed up. Note that we used a float for the 
numbers variable. While you can happily use an integer, if you 
suddenly started to use decimals, you would need to change to a 
float or a double, depending on the accuracy needed. Run the code 
and see the results.
STEP 3 
________ J
Multiplication and division can be applied as such:
#include <iostream> 
using namespace std;
int main O 
{
float numbers = 100;
numbers = numbers * 10; // This multiplies 100 
by 10
cout « numbers « “\n”;
numbers = numbers / 10; // And this divides 
1000 by 10
cout « numbers « “\n”;
| Start here jj&J Mathsxpp X [
♦include <iostream> 
using namespace std;
int main ()
B< 
float numbers = 100;
numbers = numbers * 10;
cout « numbers « "\n";
numbers = numbers / 10;
cout « numbers « "\n";
STEP 4 
a
Again, execute the simple code and see the results.
While not particularly interesting, it’s a start into C++ 
maths. We used a float here, so you can playaround with the code 
and multiply by decimal places, as well as divide, add and subtract.
Si C:\Users\david\Documents\C++\Maths.exe
E C:\Users\davi d\Documents\C++\Maths.exe
110
100
Process returned 0 (0x0) execution time : 0.043 s 
Press any key to continue.
1000
100
Process returned 0 (0x0) execution time : 0.050 s 
Press any key to continue.
Python & C++ Coding

C++Maths
STEP 5 
A
The interesting maths content comes when you call 
upon the C++ Math Library. Within this header are 
dozens of mathematical functions along with further operations. 
Everything from computing cosine to arc tangent with two 
parameters, to the value of PI. You can call the header with:
STEP 8
Calculating powers of numbers can be done with:
#include <iostream>
#include <cmath> 
using namespace std;
#include <iostream>
#include <cmath> 
using namespace std;
int main ()
{
}
int main ()
{
float number = 12;
cout « number « “ to the power of 2 is “ 
pow(number, 2) « “\n”;
cout « number « “ to the power of 3 is “ 
pow(number, 3) « “\n”;
cout « number « “ to the power of .08 is 
« pow(number, 0.8) « “\n”;
}
STEP 6 
________ J
Start by getting the square root of a number:
STEP 9
#include <iostream>
#include <cmath>
using namespace std;
int main () 
{
float number = 134;
cout « “The square root of “ « number « 
is: “ « sqrt(number) « “\n”;
Here we created a float called number with the 
value of 12, and the powfvariable, power) is where 
the calculation happens. Of course, you can calculate powersand 
square roots without using variables. For example, pow (12,2) 
outputs the same value as the first cout line in the code.
E CAUsers\david\Documents\C++\Maths.exe
12 to the power of 2 is 144
12 to the power of 3 is 1728
12 to the power of .08 is 7.30037
Process returned 0 (0x0) execution time : 0.049 s 
Press any key to continue.
STEP 10 a
The value of Pi is also stored in the cmath header 
library. It can be called up with the M_PI function. 
Enter cout« M_PI; into the code and you get 3.14159; or you can 
use it to calculate:
STEP 7 
a
Here we created a new float called number and 
used the sqrt(number) function to display the 
square root of 134, the value of the variable, number. Build and run 
the code, and your answer reads 11.5758.
#include <iostream>
#include <cmath> 
using namespace std;
int main ()
{ 
double area, radius = 1.5;
area = M_PI * radius * radius;
cout « area « “\n”;
Bl C:\Users\david\Documents\C++\Maths.exe
The square root of 134 is: 11.5758
Process returned 0 (0x0) execution time : 0.046 s 
Press any key to continue.
www.pcLpublications.com

Index
Output
Python & C++ Coding

C++ Input/Output
116 User Interaction
118 Character Literals
120 Defining Constants
122 File Input/Output
There's a satisfying feeling when you 
program code that asks the user for 
input, then uses that input to produce 
something that the user can see. Even if 
it's simply asking for someone's name, 
and displaying a personal welcome 
message, it's a big leap forward.
User interaction, character literals, 
defining constants and file input and 
output are all covered in the following 
pages. All of which help you to understand 
how a C++ program works better.
www.pclpublications.com

C++ Input/Output
User Interaction
There's nothing quite as satisfying as creating a program that responds to you. This 
basic user interaction is one of the most taught aspects of any language and with it 
youTe able to do much more than simply greet the user by name.
HELLO, DAVE
You have already used cout, the standard output stream, throughout our code. Now you're going to be using cin, the standard 
input stream, to prompt a user response.
STEP1
Anything that you want the user to input into the 
program needs to be stored somewhere in the 
system memory, so it can be retrieved and used. Therefore, any 
input must first be declared as a variable, so it's ready to be used by 
the user. Start by creating a blank C++ file with headers.
STEP 2 
a
The data type of the variable must also match the 
type of input you want from the user. For example, 
to ask a user their age, you would use an integer like this:
#include <iostream> 
using namespace std;
int main O
{
int age;
cout « “what is your age: 
cin » age;
STEP 3 
A
The cin command works in the opposite way from 
the cout command. With the first cout line you're 
outputting 'What is your age' to the screen, as indicated with the 
chevrons. Cin uses opposite facing chevrons, indicating an input. The 
input is put into the integer age and called up in the second cout 
command. Build and run the code.
• C:\Users\david\Document$\C++\usennteraction.exe
<ihat is your age: 45
fou are 45 years old.
’rocess returned 0 (0x0) execution time : 4.870 s 
’ress any key to continue.
STEP 4
If you're asking a question, you need to store the 
input as a string; to ask the user their name, you 
would use:
#include <iostream> 
using namespace std;
int main O
{
string name;
cout « “what is your name: “; 
cin » name;
cout « “\nHello, “ « name « “. I hope you’re 
well today?\n”;
cout «”\nYou are “ « age « “ years old.\n”;
Python & C++ Coding

User Interaction
STEP 5 
A
The principal works the same as the previous code.
The user's input, their name, is stored in a string, 
because it contains multiple characters, and retrieved in the second 
cout line. As long as the variable 'name' doesn't change, then you 
can recall it wherever you like in your code
STEP 8
While cin works well for most input tasks, it does 
have a limitation. Cin always considers spaces as a 
terminator, so it's designed forjust single words not multiple words. 
However, getline takes cin as the first argument and the variable as 
the second:
Ml C:\Users\david\Documents\C-n-\userinteraction.exe
I
 what is your name: David
Mello, David. I hope you're well today?
Process returned 0 (0x0) execution time : 2.153 s 
Press any key to continue.
#include <iostream> 
using namespace std;
int main ()
{
STEP 6
You can chain input requests to the user but just 
make sure you have a valid variable to store the 
input to begin with. Let's assume you want the user to enter two 
whole numbers:
string mystr;
cout « “Enter a sentence: \n”;
getline(cin, mystr);
cout « “Your sentence is: “ « mystr.sizeQ « 
“ characters long.\n”;
#include <iostream> 
using namespace std;
int main ()
{
int numl, num2;
cout « “Enter two whole numbers: “; 
cin » numl » num2;
cout « “you entered “ « numl « “ and “ 
num2 « “\n”;
}
Enter a sentence:
BDM Publications Python and C++ for Beginners
Your sentence is: 45 characters long.
Process returned 0 (0x0) execution time : 27.054 s 
Press any key to continue.
STEP 9
Build and execute the code, then enter a sentence 
with spaces. When you're done the code reads the 
number of characters. If you remove the getline line and replace it 
with cin » mystr and try again, the result displays the number of 
characters up to the first space.
I C:\Users\david\Documents\C++\userinteraction.exe
STEP 7
Likewise, inputted data can be manipulated once 
you have it stored in a variable. For instance, ask the 
user for two numbersand do some maths on them:
#include <iostream> 
using namespace std;
int main () 
{
float numl, num2;
cout « “Enter two numbers: \n”;
cin » numl » num2;
cout « numl « “ + “ « num2 « “ is: “ « 
numl + num2 « “\n”;
STEP 10 a
Getline is usually a command that new C++ 
programmers forget to include. The terminating 
white space is annoying when you can't figure out why your code 
isn't working. In short, it’s best to use getline(cin, variable) in future:
#include <iostream> 
using namespace std;
int main () 
{
string name;
cout « “Enter your full name: \n”; 
getlinefcin, name);
cout « “\nHello, “ « name « “\n”;
}
www.pclpublications.com

C++ Input/Output
Character Literals
In C++ a literal is an object or variable that once defined remains the same throughout 
the code. However, a character literal is defined by a backslash, such as the \n you've 
been using at the end of a cout statement to signify a new line.
ESCAPE SEQUENCE
When used in something like a cout statement, character literals are also called Escape Sequence Codes. They allow you to 
insert a quote, an alert, new line and much more.
STEP1
Create a new C++ file and enter the relevant headers:
#include <iostream> 
using namespace std;
int main O
{
STEP 3
If you wanted to insert speech quotes inside a cout 
J statement, you would have to use a backslash as it 
already uses quotes:
#include <iostream> 
using namespace std;
int main O
Hello, user. This is how to use
{
There's even a character literal that can trigger an 
alarm. In Windows 10, it's the notification sound
STEP 2
STEP 4
that chimes when you use \a. Try this code, and turn upyour sound.
You've already experienced the\n character literal 
placing a new line wherever it's called. The line: cout 
« "Hello\n" « "I’m a C++\n” « "Program\n"; outputs three lines 
of text, each starting after the last\n.
#include <iostream> 
using namespace std;
int main O
{
cout « “ALARM! \a”;
}
Python & C++ Coding

r Character Literals
A HANDY CHART
There are numerous character literals, or escape sequence codes, to choose from. We therefore thought it would be good for 
you to have a handy chart available, for those times when you need to insert a code.
ESCAPE SEQUENCE CODE
CHARACTER
w
Backslash
V
Single Quote
\”
Double Quote (Speech Marks)
V
Question Mark
\a
Alert/Alarm
\b
Backspace
\f
Form Feed
\n
New Line
\r
Carriage Return
\t
Horizontal Tab
\v
Vertical Tab
\o
Null Character
\uxxxx
Unicode (UTF-8)
\Uxxxxxxxx
Unicode (UTF-16)
UNICODE CHARACTERS (UTF-8)
Unicode characters are symbols or characters that are standard across 
all platforms. For example, the copyright symbol, that can be entered 
via the keyboard by entering the Unicode code, followed byALT+X. In 
the case of the copyright symbol enter: 00A9 Alt+X. In C++ code, you 
would enter:
#include <iostream> 
using namespace std;
int main O
{
cout « “\u00A9”;
UNICODE
CHARACTER TABLE
A complete list of the available Unicode 
characterscan be found atwww.
unicode-table.com/en/. Hoveryour 
mouse over the character to see its 
unique code to enter in C++.
I I Unicode® 
I I I character 
U I table
EEE’SEEEEEEEEESEE 
®ie£O¥l5 ®‘-' 
® ’
' M 1 
. 
' “ ’ '■* * * I
AAaAaA.£<?££££ 
I f I I
www.pclpublications.com

C++ Input/Output
Defining Constants
Constants are fixed values in your code. They can be any basic data type but as the 
name suggests their value remains constant throughout the entire code. There are two 
separate ways to define a constant in C++, the #define pre-processor and const.
#DEFINE
The pre-processors are instructions to the compiler to pre-process the information before it goes ahead and compiles the 
code. Sinclude is a pre-processor as is #define.
STEP1
________ J
You can use the #define pre-processor to define any 
constants you want in our code. Start by creating a
STEP 3
A
new C++ file complete with the usual headers:
#include <iostrecim> 
using namespace std;
int main O
{
}
Note the capitals for defined constants, it’s 
considered good programming practise to define all 
constants in capitals. Here, the assigned values are 50, 40 and 60, so 
let’s call them up:
^include <iostream> 
using namespace std;
^define LENGTH 50
^define WIDTH 40
^define HEIGHT 60
int main O
cout « “Length is: “ « LENGTH « “\n”;
cout « “Width is: “ « WIDTH « “\n”;
cout « “Height is: “ « HEIGHT « “\n”;
Start here X DefiningConstants.cpp xl
STEP 2
Now let's assume your code has three different 
constants: length, width and height. You can define 
them with:
#include <iostream> 
using namespace std; 
tfdefine LENGTH 50 
tfdefine WIDTH 40 
tfdefine HEIGHT 60
int main O
{
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
♦include <iostream> 
using namespace std;
♦define LENGTH 50
♦define WIDTH 40
♦define HEIGHT 60
int main ()
EH
cout « "Length is: " « LENGTH « "\n";
cout « "Width is: " « WIDTH « "\n";
cout « "Height is: " « HEIGHT « "\n";|
Files ►
Start here X *DefiningConstants.cpp x|
STEP 4
Build and run the code. Just as expected, it displays 
the values for each of the constants created. It's
1
2
3
4
5
6
7
8
9
10
11
♦include <iostream> 
using namespace std;
♦define LENGTH 50
♦define WIDTH 40
♦define HEIGHT 60
int main ()
worth noting that you don't need a semicolon when you're defining 
a constant with the #define keyword.
■ C:\Users\david\Documents\C++\DefiningConstants.exe
Length is: 50
Width is: 40
Height is: 60
Process returned 0 (0x0) execution time : 0.049 s 
Press any key to continue.
120
Python & C++ Coding

Defining Constants
STEP 5 
A
You can also define other elements as a constant.
For example, instead of using \n fora newline in the 
cout statement, you can define it at the start of the code:
STEP 8
Another method of defining a constant is with the 
const keyword. Use const together with a data type, 
variable and value: const type variable = value. Using Pi as an example:
#include <iostream> 
using namespace std;
#define LENGTH 50
#define WIDTH 40
#define HEIGHT 60
#define NEWLINE ‘\n’
#include <iostream> 
using namespace std;
int main O
int main O
{
const double PI = 3.14159;
cout « “The value of Pi is: “ « PI « endl; 
}
cout « “Length is: “ « LENGTH « NEWLINE;
cout « “Width is: “ « WIDTH « NEWLINE;
cout « “Height is: “ « HEIGHT « NEWLINE;
STEP 9
STEP 6
The code, when built and executed, does exactly the 
same as before, using the new constant NEWLINE 
to insert a newline in the cout statement. Incidentally, creating a 
newline constant isn’t a good idea unless you're making it smaller 
than\n or even the endl command.
Because you're using const within the main block of 
code, you need to finish the line with a semicolon. 
You can use either, as long as the names and values don't clash, but 
it’sworth mentioning that#define requires no memory, so if you're 
coding to a set amount of memory, #define is your best bet.
const double PI = 3.14159; 
cout « "The value of Pi is; " « PI « endl;
■ I C:\Useis\david\Documents\C*+\DefiningConstants.exe
Length is: 50
Width is: 40
Height 1s: 60
The value of Pi is: 3.14159
Process returned 0 (0x0) execution time : 0.046 s 
Press any key to continue.
■pss returned 0 (0x0)
STEP 10
STEP 7
Defining a constant is a good way of initialising your 
base values at the start of your code. You can define 
that your game has three lives, or even the value of PI without 
having to call up the C++ math library:
Const works in much the same way as Sdefine.
You can create static integers and even newlines:
#include <iostream> 
using namespace std;
#define PI 3.14159
int main O
{
cout « “The value of Pi is: “ « PI « endl;
#include <iostream> 
using namespace std;
int mainO
{
const int LENGTH = 50;
const int WIDTH = 40;
const char NEWLINE = *\n’;
int area;
area = LENGTH * WIDTH;
cout « “Area is: “ « area « NEWLINE;
www.pclpublications.com

C++ Input/Output
File Input/Output
The standard iostream library provides C++ coders with the cin and cout input and 
output functionality. However, to be able to read and write from a file you need to 
utilise another C++ library, called fstream.
FSTREAMS
There are two main data types within the Fstream library that are used to open a File, read From it and write to it, oFstream and 
iFstream. Here's how they work.
STEP1
The first task is to create a new C++ file and along 
with the usual headers you need to include the new 
fstream header:
#include <iostrecim>
#include <fstream>
Using namespace std;
int main ()
{
STEP 3
A
We've included comments in the screenshot of step 
2 to help you understand the process. You created 
a string called name, to store the user's inputted name. You also 
created a text file called name.txt (with the ofstream newfile and 
newfile.open lines), asked the user for their name and stored it and 
then written the data to the file.
STEP 4
To read the contents of a file, and output it to the 
screen, you need to do things slightly differently. 
First you need to create a string variable to store the file's contents 
(tine by line), then open the file, use getline to read the file line by 
line and output those lines to the screen. Finally, close the file.
STEP 2
a
Begin by asking a user fortheir name and writing 
that information to a file. You need the usual string 
to store the name, and getline to accept the input from the user.
string line;
ifstream newfile (“name.txt”);
cout « “Contents of the file: “ « endl;
#include <iostream>
#include <fstream> 
using namespace std;
int main ()
{
string name;
ofstream newbie;
newfile.open(“name.txt”);
cout « “Enter your name: “ « endl; 
getline(cin, name);
newfile « name « endl;
newfile.closef);
getline(newfile, line); 
cout « line « endl;
newfile.close();
Python & C++ Coding

STEP 5
A
The code above is great for opening a file with one 
or two lines but what if there are multiple lines? Here 
we opened a text file of the poem Cimmeria, by Robert E Howard:
STEP 8 
ad
Just as you might expect, you can write almost 
anything you like to a file, for reading either in 
Notepad or via the console through the C++ code:
string line;
ifstream newfile (“c:\\users\\david\\ 
DocumentsWCimmeria. txt”);
cout « “Cimmeria, by Robert E Howard: \n” « 
endl;
while (getline(newfile, line))
cout « line « endl;
newfile. closeQ J
string name;
int age;
of stream newfile;
newfile. open(“name. txt”);
cout « “Enter your name: “ « endl;
getlinefcin, name);
newfile « name « endl;
cout « “\nHow old are you: “ « endl; 
cin » age;
newfile « age « endl;
newfile. closef);
STEP 6 a
You can no 
doubt see that 
we've included a while loop, 
which we cover in a few pages 
time. It means that while there 
are lines to be read from the 
text file, C++ getlines them. 
Once all the lines are read, 
the output is displayed on the 
screen and the file is closed.
I he dark woods, masking slopes of sombre hills;
dusky streams that flowed without a sound.
i. by Robert C ltoward:
but the endless vista - hill on hill
li th bare boughs rattling in the lonesome winds,
K>t even lightened by the rare dim sun
have forgot the very name men called me.
clouds that piled forever on the hills.
rianeria. land of Darkness and the Night.
To clouds and winds and ghosts that shun the sun.
rel of ghosts? 1 search my heart and find 
iris, land of Darkness and the Night.
STEP 7
You can also see that the location of the text file 
Cimmeria.txt isn't in the same folder as the C++ 
program. When we created the first name.txt file, it was written to 
the same folder where the code was located; this is done by default. 
To specify another folder, you need to use double-back slashes, as 
per the character literals/escape sequence code.
6
8
9
10
11
string line;
ifstream newfile ("ciWusersW^yXSWDocumentsWjy.^gjJ,^.^") ;
cout « 
by Robert E Howard: \n" « endl;
STEP 9
The code from step 8 differs again, but only where 
it comes to adding the age integer. Notice that 
we used cin » age, instead of the previous getline(cin, variable). 
The reason for this is that the getline function handles strings, not 
integers; so when you're using a data type other than a string, use 
the standard cin.
HJ C:\Users\david\Documents\C++\fileinout.exe
Enter your name:
David Hayward
How old are you: 
45
Process returned 0 (0x0) execution time : 7.369 s 
Press any key to continue.
STEP 10
Here's an exercise: see if you can create code to 
write several different elements to a text file. You 
can have a user's name, age, phone number etc. Maybe even the 
value of Pi and various mathematical elements. It's all good practice.
~3| C++ Write to File - Notepad
File Edit Format View Help
Name: David Hayward
Age: 45
Pi = 3.14159
The square root of 133 is: 11.5325
What else can you come up with...?|
www.pclpublications.com

Index
124
Python & C++ Coding

Q Loops and Decision Making
Loops and repetition are one of the most 
important factors of any programming 
language. Good use of a loop creates a 
program that does exactly what you want 
it to and delivers the desired outcome 
without issues or errors.
Without loops and decision making 
events within the code, your program will 
never be able to offer the user any choice. 
It's this understanding of choice that 
elevates your skills as a programmer and 
makes for much better code.
126 While Loop
128 For Loop
130 Do... While Loop
132 If Statement
134 If... Else Statement
www.pclpublications.com

Loops and Decision Making
While Loop
A while loop's function is to repeat a statement, or a group of statements, while a certain 
condition remains true. When the while loop starts, it initialises itself by testing the 
condition of the loop and the statements within, before executing the rest of the loop.
TRUE OR FALSE?
While loops are one of the most popular Form oF C++ code looping. They repeatedly run the code contained within the loop 
while the condition is true. Once it proves False, the code continues as normal.
STEP1
Clear what you've done so Far and create a new C++ 
File. There's no need For any extra headers at the 
moment, so add the standard headers as per usual:
#include <iostream> 
using namespace std;
int main O
{
}
Start here X WhileLoop.cpp X
finclude <iostream> 
using namespace std;
int main ()
STEP 3 a
First you 
need to 
create a condition, so use a 
variable called num and give 
it the value 1. Now create 
the while loop, stating that 
as long as num is less than 
30, the loop is true. Within 
the loop the value oF num 
is displayed and adds 1 until 
it's more than 30.
STEP 4
________ J
We're introducing a Few new elements here. The 
Firstare the opening and closing braces For the
while loop. This is because our loop is a compound statement,
............................................................................................................. meaning a group oFstatements; note also, there's no semicolon
STEP 2
________ J
screen shot):
Create a simple while loop. Enter the code below, 
build and run (we've added comments to the
aFter the while statement. You now also have return 0, which is a 
clean and preFerred way oF ending the code.
{
int num = 1;
while (num < 30 )
{
cout « “Number: “ « num « endl; 
num = num +1;
}
return 0;
}
return 0;
STEPS
________ J
iFyou didn't need to see the continually increasing 
value oF num, you could have done away with the
compound while statement and instead just added num by itselF
126
Python & C++ Coding

While Loop
STEP 6
It's important to remember not to add a semicolon 
at the end of a while statement. Why? Well, as you 
know, the semicolon represents the end of a C++ line of code. If 
you place one at the end of a while statement, your loop will be 
permanently stuck untilyou close the program.
STEP 7
In our example, if we were to execute the code 
the value of num would be 1, as set by the int 
statement. When the code hits the while statement it reads 
that while the condition of 1 being less than 30 is true, loop. The 
semicolon closes the line, so the loop repeats; but it never adds 1 to 
num, as it won't continue through the compound statement.
STEP 9
You can further expand the code to enable each 
word of the poem to appear every second. To do 
so, you need to pull in a new library, <windows.h>. This is a Windows 
only library and within it you can use the SleepQ function:
#include <iostream>
#include <fstream>
#include <windows.h> 
using namespace std;
int main ()
{
string word;
ifstream newbie (“C: WusersWdavidW 
DocumentsWCimmeria. txt”);
cout « “Cimmeria, by Robert E Howard: \n” « 
endl;
while (newfile » word)
{
cout « word « endl;
Sleep(1000);
}
return 0; 
}
STEP 8
You can manipulate the while statement to display 
different results depending on what code lies within 
the loop. For example, to read the poem, Cimmeria, word byword, 
you would enter:
#include <iostream>
#include <fstream> 
using namespace std;
int main ()
{
string word;
ifstream newfile (“C: WusersWdavidW 
DocumentsWCimmeria. txt”);
cout « “Cimmeria, by Robert E Howard: \n” « 
endl;
while (newfile » word)
{
cout « word « endl;
}
return 0;
}
STEP 10 a
Sleep() works in milliseconds, so Sleep(1000) is 
one second, Sleep(10000) is ten seconds and so 
on. Combining the sleep function (along with the header it needs) 
and a while loop enables you to come up with some interesting 
countdown code.
#include <iostream>
#include <windows.h> 
using namespace std;
int main ()
{
int a = 10;
while (a != 0)
{
cout « a « endl;
a = a - 1; 
Sleep(1000);
}
cout « “\nBlast Off!” « endl;
return 0;
}
www.pclpublications.com
127

Loops and Decision Making
For Loop
In some respects, a for loop works in a very similar way to that of a while loop, although it's 
structure is different. A for loop is split into three stages: an initialiser, a condition and an 
incremental step. Once set up, the loop repeats itself until the condition becomes false.
LOOPY LOOPS
The initialise stage of a for loop is executed only once and this sets the point reference for the loop. The condition is evaluated 
by the loop to see if it's true or false and then the increment is executed. The loop then repeats the second and third stage.
STEP1
Create a new C++ file, with the standard headers:
#inciude <iostream> 
using namespace std;
int main O
STEP 4 
a
After the loop, you created a compound statement 
in braces (curly brackets), that displays the current 
value of the integer num. Every time the for loop repeats itself, the 
second and third stages of the loop, it adds 1 until the condition <30 
is false. The loop then ends and the code continues, ending neatly 
with return 0.
Start here X | *ForLoop.cpp x[__________________________________________________
1
2
3
4
5
6
7
8
9
♦include <iostream> 
using namespace std;
int main ()
l^1
S{
for( int num = 1; num < 30; num = num +1 )
B { 
cout « "Number: " « num « endl; 
}
return 0;
STEP 2
Start simple and create a for loop that counts from 
1 to 30, displaying the value to the screen with 
each increment:
{
//For Loop Begins
for( int num = 1; num < 30; num = num +1 ) 
{
cout « “Number: “ « num « endl;
}
return 0;
STEP 3
Working through the process of the for loop, begin 
by creating an integer called num and assigning it a 
value of 1. Next, set the condition, in this case num being less than 
30. The last stage is where you create the increments; here it's the 
value of num being added by 1.
STEP 5 
A
A for loop is quite a neat package in C++, all 
contained within its own brackets, while the other 
elements outside of the loop are displayed below. If you want to 
create a 10-second countdown, you could use:
#inciude <iostream>
#inciude <windows.h> 
using namespace std; 
int main O 
{
//For Loop Begins
for( int a = 10; a != 0; a = a -1 ) 
{
cout « a « endl;
Sieep(1000);
}
cout « “\nBiast Off!” « endl;
for( int num = 1; num < 30; num = num +1 )
return 0; 
}
Python & C++ Coding

For Loop
STEP 6 -J
With the countdown code, don't forget to include 
the windows.h library, so you can use the Sleep 
command. Build and run the code; in the command console you can 
see the numbers 10 to 1 countdown in one second increments, until 
it reaches zero and Blast Off! appears.
STEP 9
Here's an example of a for loop displaying the 
multiplication tablesofa user inputted number.
Handy for students:
{
int n;
■ C:\Users\david\Documents\C++\ForLoop.exe
cout « “Enter a number to view its times 
table:
cin » n;
for (int i = 1; i <= 12; ++i) {
cout « n « “ x “ « i « “ = “ « n * i 
« endl;
}
Blast Off!
Process returned 0 (0x0) execution time : 10.049 s 
Press any key to continue.
return 0; 
}
STEP 7
________ J
Naturally you can include a lot more content into a
for loop, including some user input:
int i, n, fact = 1;
cout « “Enter a whole number:
cin » n;
for (i = 1; i <= n; ++i) { 
fact *= i;
}
cout« “\nFactorial of “« n «” = “« fact « 
endl;
return 0;
STEP 10 a
The value of the integer i can be expanded from 
12 to whatever number you want, displaying a 
very large multiplication table in the process (ora small one). Of 
course the data type within a for loop doesn't have to be an integer; 
as long as it's valid, it works.
for ( float i = 0.00; i < 1.00; i += 0.01) 
{
cout « i « endl;
}
STEP 8
A
The code from step 7, when built and run, asks for a 
number, then displays the factorial of that number 
through the for loop. The user's number is stored in the integer 
n, followed by the integer I which is used to check if the condition 
is true or false, adding 1 each time and comparing it to the user's 
number, n.
Bi C:\Users\david\Documents\C++\ForLoop.exe
Enter a whole number: 8
Factorial of 8 = 46328
Process returned 8 (8x8) execution time : 2.898 s 
Press any key to continue.
return 0;
www.pcLpublications.com
129

Loops and Decision Making
Do... While Loop
Ado... while loop differs slightly from that of a for or even a while loop. Both for and 
while set and examine the state of the condition at the start of the loop, or the top of 
the loop if you prefer. However, ado... while loop, is similar to a while loop but instead 
checks the condition at the bottom of the loop.
DO LOOPS
The good thing about a do... while loop is that it's guaranteed to run through at least once. It’s structure is: do, Followed by 
statements, while condition is true. This is how it works.
STEP 1 
________ J
Begin with a new, blank C++ file and enter the 
standard headers:
#include <iostream> 
using namespace std;
int main O
{
STEP 3
Now, here'sa look at the structure of a do... while 
loop. First you create an integer called num, with 
the value of 1. Now the do... while loops begins. The code inside 
the body of the loop is executed at least once, then the condition is 
checked for either true or false.
^include <iostrean>> 
using namespace std;
int main ()
□ {
int num = 1;
do
{
cout « "Number: " « num « endl; 
num = num + 1;
}
while (num < 30 );
STEP 2
Begin with a simple number count:
{
int num = 1;
do
{
cout « “Number: “ « num « endl; 
num = num + 1;
}
while (num < 30 );
return 0;
}
STEP 4 
a
If the condition is true, the loop is executed. This 
continues until the condition is false. When the 
condition has been expressed as false, the loop terminates and the 
code continues. This means you can create a loop where the code 
continues until the user enters a certain character.
8 
9 
ie 
ii
lumber. 14
lumber: 16
lumber: 17
lumber: 18
lumber: 19
lumber: 20
lumber- 21
lumber 22
himiier 21
lumber 24
lumber. 25
lumber: 26
lumber: 27
lumber: 28
lumber: 29
’rocess returned 0 (0x0) execution time : 0.047 s
>ress any key to continue.
Python & C++ Coding

Do... While Loop
STEP 5 
________ J
If you want code to add up user inputted numbers 
until the user enters zero:
{
float number, sum = 0.0;
cout « “**** Program to execute a Do... 
While loop continuously ****’’ « endl;
cout « “\nEnter 0 to stop and display the 
sum of all the numbers entered\n” « endl;
cout « “\n-------------------------------------------------------------
—\n” « endl;
do {
cout«”\nPlease enter a number: “;
cin»number;
sum += number;
}
whilefnumber ! = 0.0);
cout«”Total sum of all numbers: “«sum;
STEP 8 -J
Finally, the while statement checks the condition 
of the variable number. If the user has entered 
zero, then the loop is terminated, if not then it continues 
indefinitely. When the user finally enters zero, the value of sum, 
the total value of all the user's input, is displayed. The loop, and 
the program, then ends.
STEP 9
Using the countdown and Blast Off! code used 
previously, a do... while loop would look like:
return 0; 
}
{
cout « “XnBlast Off!” « endl;
return 0;
STEP 6
A
The code from Step 5 works as follows: two floating 
point variables are assigned, numberand sum, both 
with the value of 0.0. There is a brief set of instructions for the user, 
then the do... while loop begins.
float number, sum = 0.0;
cout << Program to execute a Do... While loop continuously *»**" « endl;
'\nttnter u to stop ana display tne sum or all tne numbers enteredXn'
STEP 7
The do... while loop in this instance asks the user 
to input a number, which you assigned to the float 
variable, number. The calculation step uses the second floating 
point variable, sum, which adds the value of number every time the 
user enters a new value.
STEP 10 a
The main advantage of using a do... while loop 
is because it's an exit-condition loop; whereas a 
while loop is an entry-control loop. Therefore, if your code requires a 
loop that needs to be executed at least once (for example, to check 
the number of lives in a game), then ado... while loop is perfect.
do {
cout « "XnPlease enter a nuiober: " 
cin >> number;
sum += number;
www.pclpublications.com

Loops and Decision Making
If Statement
The decision making statement 'if' is probably one of the most used statements in any 
programming language, regardless of whether it's C++, Python, BASIC or anything 
else. It represents a junction in the code, where IF one condition is true, do this; or IF it's 
false, do that.
IF ONLY
If uses a Boolean expression within its statement. If the Boolean expression is true, the code within the statement is executed. 
If not, then the code after the statement is executed instead.
STEP1
First, create a new C++ file and enter the relevant 
standard headers, as usual:
#include <iostream> 
using namespace std;
int main O
{
}
What’s going on here? To begin, an integer called 
num was created and assigned with the value of 1. 
The if statement comes next, and in this case we've instructed the 
code that if the condition, the value, of num is less than 1, then the 
code within the braces should be executed.
STEP 2
If is best explained when you use a number- 
based condition:
STEP 3
{
int num = 1;
if ( num < 30 )
{
cout « “The number is less than 30.” « 
endl;
}
cout « “Value of number is: “ « num « endl;
return 0;
int num = 1;
cout << "The number io 1cm Chun 30.” << endl;
STEP 4
The second cout statement displays the current 
value of num and the program terminates safely. It's 
easy to see how the if statement works if you were to change the 
initial value of num from 1 to 31.
^include <iostreaia> 
using namespace std;
int main ()
S{
int num = 31;
I
if ( num < 30 )
IT 1
Python & C++ Coding

STEP 5 
A
When you change the value to anything above 
30, then build and run the code, you can see that 
the only line to be outputted to the screen is the second cout 
statement, displaying the current value of num. This is because the 
initial if statement is false, so it ignores the code within the braces.
^osers\uavta\uot.unieni5\vf<- \rr.exe-
Value of number is: 31
Process returned 0 (0x0) execution time : 0.046 s 
Press any key to continue.
STEP 7
The code in Step 6 is simplistic but effective. First we 
created a floating point integer called temp, then a 
do... while loop that asks the user to enter the current temperature.
float temp;
do 
{
cout « "\nEnter the temperature (or -10000 to exit): " « endl; 
cin » temp;
STEP 8
STEP 6
________ J
You can include an if statement within a do... while 
loop. For example:
The first if statement checks to see if the user's 
inputted value is less than or equal to zero. If it is, 
then the output is ‘Brrrr, it's really cold!'. Otherwise, if the input is 
greater than zero, the code outputs ‘At least it’s not freezing!'.
{
float temp;
do
{
cout « “\nEnter the temperature (or 
-10000 to exit): “ « endl;
cin » temp;
if (temp <= 0 )
{
cout « “\nBrrrr, it’s really cold!” 
« endl;
}
if (temp > 0 )
{
cout « “\nAt least it’s not 
freezing!” « endl;
}
}
while ( temp != -10000 );
cout « “\nGood bye\n” « endl;
return 0;
cout « "\nEnter the temperature (or -10000 to exit): " « endl; 
cin » temp;
if (temp <= 0 ) 
{
cout « "\n£&&££, it’s really cold!" « endl; 
) 
if (temp > 0 ) 
{
cout « "\nAt least it‘s not freezing!" « endl;
STEP 9 
a
Finally, if the user enters the value -10000, which is 
impossibly cold so is therefore a unrealistic value, 
the do... while loop is terminated and a friendly 'Good bye' is 
displayed to the screen.
float temp.-
do
cout « "\nEntei the temperature (or -1OOOO to exit): " « endl; 
cin » temp;
if (temp <= 0 )
{
cout « "Xngxjxj:, it's really cold!" « endl;
if (temp > 0 )
< 
cout « "\nAt least it's not freezing!" « endl;
>
while ( temp != -10000 );
cout « "\nGood bye\n" « endl;
return 0;
STEP 10 a
Using if is quite powerful, if it's used correctly. Just 
remember that if the condition is true then the 
code executes what's in the braces. If not, it continues on its merry 
way. See what else you can come up with using if and a combination 
of loops.
www.pclpublications.com

Loops and Decision Making
If... Else Statement
There is a much better way to use an if statement in your code, with if... else. If... else 
works in much the same way as a standard if statement. If the Boolean expression 
is true, the code with in the braces is executed. Else, the code within the next set of 
braces is used instead.
IF YES, ELSE NO
There are two sections of code that can be executed depending on the outcome in an if... else statement. It's quite easy to 
visualise once you get used to its structure.
Let's expand the code from the If Statement on the 
previous page:
Begin with a new C++ file and the standard headers:
#include <iostream>
1
^include <iostream>
using namespace std; 
int main O
{
}
2
3
4
5
6
7
8 
q
using namespace std;
int main ()
B{
}
STEP 3
The first line in the code creates the integer called 
num and gives it a value of 1. The if statement 
checks to see if the value of num is less than thirty and if it is it 
outputs "The number is less than 30!" to the console.
if ( num < 30 ) 
(
cout « "Tire number is less than 30!” « endl;
I
STEP 2
________ J
STEP 4
{
int num = 1;
if ( num < 30 )
{
cout « “The number is less than 30!” « 
endl;
} 
else 
{
cout « “The number is greater than 30!” 
« endl;
}
return 0;
}
The else companion to if checks if the number is 
greater than 30 and if so, then displays "The number 
is greater than 30!" to the console; and finally, the 
code is terminated satisfactorily.
cout << "The number is less than 30!” << endl;
I
else 
{
cout « "The number is greater than 30!" « endl;
STEPS
You can change the value of num in the code or 
you can improve the code by asking the user to 
enter a value:
{
int num;
cout « “Enter a number: “;
cin » num;
if ( num < 30 ) 
{
cout << “The number is less than 30!” «
endl;
}
else
{
cout << “The number is greater than 30!”
return 0; 
}
Python & C++ Coding

If... Else Statement 1C
STEP 6 -J
The code works the same way, as you would expect, 
but what if you wanted to display something if the 
user entered the number 30? Try this:
STEP 8
________ J
You can take this up a notch and create a two-player 
number guessing game. Begin by creating the variables:
{
int num;
cout « “Enter a number:
cin » num;
if ( num < 30 )
{
cout « “The number is less than 30!” « 
endl;
}
else if C num > 30 )
{
cout « “The number is greater than 30!” 
« endl;
}
else if C num == 30 )
{
cout « “The number is exactly 30!” « 
endl;
}
return 0;
}
int num, guess, tries = 0;
cout « “***** Two-player number guessing game 
****’’ « endl;
cout « “\nPlayer One, enter a number for 
Player Two to guess: “ « endl;
cin » num;
cout « string(50, ‘\n’);
STEP 9
________ J
The cout« string(50, V) line clears the screen so 
Player Two doesn't see the entered number. Now
you can create a do... while loop, together with if... else:
{
cout « “\nPlayer Two, enter your guess: “; 
cin » guess;
tries++;
if (guess > num)
{
cout « “\nToo High!\n” « endl;
}
else if (guess < num)
{
cout « “\nToo Low!\n” « endl;
}
else if (guess == num)
{
cout « “Well done! You got it in “ « 
tries « “ guesses!” « endl;
}
} while (guess != num);
return 0;
STEP 7
The new addition to the code is what's known as a 
nested if... else statement. This allows you to check 
for multiple conditions. In this case, if the user enters a number less 
than 30, greater than 30 or actually 30 itself, a different outcome is 
presented to them.
STEP 10
Si CAUsers\david\Documents\C++\lfElse.exe
Enter a number: 30
The number is exactly 30!
Process returned 0 (0x0) execution time : 4.037 s 
Press any key to continue.
Grab a second player, then 
build and run the code. 
Player One enters the 
number to be guessed, 
then Player Two can take 
as many guesses as they 
need to get the right 
number. Want to make 
it harder? Maybe use 
decimal numbers.
www.pclpublications.com

Index
136
Python & C++ Coding

(^Working with Code
By now you should have the essential 
building blocks of how to program in both 
Python and C++. You can create code, 
store data, ask the user questions, offer 
them a choice and repeat functions until 
they prove true and provide the correct 
output. What next then?
This final section looks at some of the 
more common coding mistakes that 
Python and C++ beginners make and 
where you can turn to next to continue 
your programming adventure.
138 Common Coding Mistakes
140 Beginner Python Mistakes
142 Beginner C++Mistakes 
144 Where Next?
71
www.pclpublications.com
137

Common Coding Mistakes
When you start something new you're inevitably going to make mistakes, this is purely 
down to inexperience and those mistakes are great teachers in themselves. However, 
even experts make the occasional mishap. Thing is, to learn from them as best you can.
X=MISTAKE, PRINT Y
There are many pitFalls for the programmer to be aware of, far too many to be listed here. Being able 
to recognise a mistake and fix it is when you start to move into more advanced territory.
SMALL CHUNKS
EASY VARIABLES
It would be wonderful to be able to 
work like Neo from The Matrix movies. 
Simply ask, your operator loads it into 
your memory and you instantly know 
everything about the subject. Sadly 
though, we can't do that. The first 
major pitfall is someone trying to learn 
too much, too quickly. So take coding in 
small pieces and take your time.
//COMMENTS
Meaningful naming for variables is a must to eliminate 
common coding mistakes. Having letters of the alphabet 
is fine but what happens when the code states there's 
a problem with x variable. It's not too difficult to name 
variables lives, money, playerl and so on.
1 var points = 1023;
2 var lives = 3;
3 var totalTime = 45;
4 write("Points: "tpoints);
5 write("Lives: "+lives);
6 write("Total Time: "+totalTime+" secs");
7 write ("--------------------------") ;
8 var totalscore = 0;
9 write("Your total Score is: "+totalScore):
Use comments. It's a simple concept but commenting on 
your code saves so many problems when you next come to 
look over it. Inserting comment lines helps you quickly sift 
through the sections of code that are causing problems; 
also useful if you need to review an older piece of code.
ong +=2;
target +■ 2;
—n;
}
tendif
if (n = 0) 
return;
PLAN AHEAD
While it's great to wake up one morning and decide to code 
a classic text adventure, it's not always practical without a 
good plan. Small snippets of code can be written without 
too much thought and planning but longer and more in- 
depth code requires a good working plan to stick to and 
help iron out the bugs.
Loop unrolling. be dragons
//
(n & (~3)) is the greatest multiple of 4 r 
In the while loop ahead, orig will move ov 
increments (4 elements of 2 bytes).
end marks our barrier for not falling outa 
char const * const end = orig + 2 * (n &
// See xf we’re aligned for wnttmg in
#if ACE_SIZEOF_LONG = 8 && \ 
! ((defined( amd64 ) I I defined (
zations.com
138

USER ERROR
User input is often a paralysing mistake in code. For 
example, when the user is supposed to enter a number for 
their age and instead they enter it in letters. Often a user 
can enter so much into an input that it overflows some 
internal buffer, thus sending the code crashing. Watch those 
user inputs and clearly state what's needed from them.
BACKUPS
Enter an integer number 
aswdfdsf
You haue entered wrong input 
s
You haue entered wrong input
You haue entered wrong input 
sdfsdf213213123
You haue entered wrong input 
123234234234234234
You haue entered wrong input 
12 
the number is: 12
Process returned 0 (0x0) execution time : 21.495 s 
Press any key to continue.
RE-INVENTING WHEELS
You can easily spend days trying to fathom out a section 
of code to achieve a given result and it’s frustrating and 
often time-wasting. While it's equally rewarding to solve 
the problem yourself, often the same code is out there on 
the Internet somewhere. Don't try and re-invent the wheel, 
look to see if some else has done it first.
Always make a backup of your work, with a secondary 
backup for any changes you've made. Mistakes can be 
rectified if there's a good backup in place to revert to for 
those times when something goes wrong. It's much easier 
to start where you left off, rather than starting from the 
beginning again.
.OVvOT’ 
MR
A ' Z > 'If.
SECURE DATA
If you're writing code 
to deal with usernames 
and passwords, or 
other such sensitive 
data, then ensure 
that the data isn't in 
cleartext. Learn how 
to create a function 
to encrypt sensitive 
data, prior to feeding 
into a routine that can 
transmit or store it 
where someone may be 
able to get to view it.
HELP!
MATHS
Asking for help is something most of us has struggled 
with in the past. Will the people we're asking laugh at us? 
Am I wasting everyone's time? It’s a common mistake for 
someone to suffer in silence. However, as long as you ask 
the in the correct manner, obey any forum rules and be 
polite, then your question isn't silly.
If your code makes multiple calculations then you need 
to ensure that the maths behind it is sound. There are 
thousands of instances where programs have offered 
incorrect data based on poor mathematical coding, which 
can have disastrous effects depending on what the code is 
set to do. In short, double check your code equations.
915,002
set terminal xll 
set output
max = 5
nraax = 10®
complex (x, y) = x * {1, 0} + y * {0, 1}
■andel (x, y, z, n) = (abs (z)> max || n>= 100)? n: mandel (x, y. z * z ♦ complex (x, y), n + 1)
set xrange [-0.5:0.51
set yrange [—0.5:0.51
set logscale z
set samples 200
set isosample 200
set pm3d map 
set size square 
a= #A#
b= #0#
splot mandel(-a/100,-b/100,complex(x,y),0) notitle
rcom 139

Working with Code
Beginner Python Mistakes
Python is a relatively easy language to get started in where there's plenty of room for 
the beginner to find their programming feet. However, as with any other programming 
language, it can be easy to make common mistakes that'll stop your code from running.
DEF BEGINNER(MISTAKES=10)
Here are ten common Python programming mistakes most beginners find themselves making. Being able to identify these 
mistakes will save you headaches in the future.
VERSIONS
To add to the confusion that most beginners already face when 
coming into programming, Python has two live versions of its 
language available to download and use. There is Python version 
2.7.x and Python 3.6.x. The 3.6.x version is the most recent, and 
the one we'd recommend starting. But, version 2.7.x code doesn't 
always work with 3.6.x code and vice versa.
INDENTS, TABS AND SPACES
Python uses precise indentations when displaying its code. The 
indents mean that the code in that section is a part of the previous 
statement, and not something linked with another part of the code. 
Use four spaces to create an indent, not the Tab key.
MOVESPEED ■> 11
HOVE - 1
SHOOT - 15
python
About Downloads
Documentation Community Success Stories Nevi
Download the latest version for Windows
Download Python 3.6.4 I Download Python 2.7.14
Wondering which version to use? Here’s more about the difference 
between Python 2 and 3.
I ooklng for Python with a different OS? Python for Windows, 
Llnux/UNIX, Mac OS X. Other
Want to help test development versions of Python? Pre-releases
t sec up font
font - pygamc.fone.SyoFont(1calibri1, 50)
def uakeplayei () ;
player = pvaame.Rect(370, 635, 60, 25)
fox 1 in ranae(ii): 
invader ■ pyaame.Kect(75+x, 7S+y, so, 20) 
1.append(invader) 
x *- 60
y +- 45
def makewalla (walls) :
wain = pyoanie.Recc(6O, 520, 120, 30)
walla ■ pyaame.Rect(246, 520, 120, 30)
wall3 = pygame.Rect (432 , 520, 120, 30)
wa!14 = pygame.Rect(618, 520, 120, 30)
THE INTERNET
Every programmer has and does at some point go on the Internet 
and copy some code to insert into their own routines. There's 
nothing wrong with using others' code, butyou need to know how 
the code works and what it does before you go blindly running it on 
your own computer.
Create/delete a txt file in a python program
A I have created a program to grab values from a text hie As you can see, depending on the value of the 
results, I have an if/else statement printing out the results of the scenario.
0
My problem is I want to set the code up so that the if statement creates a simple txt file called data txt 
to the C.tPytfiontScripts directory.
In the event the opposite is true, I would like the else statement to delete this txt file if it exists.
I’m a novice programmer and anything I’ve looked up or tried hasn't worked tor me, so any help or 
assistance would be hugely appreciated.
x - opM(-Wtt.txt-.T-)
California = x.readlines(11) 
dublin ■ x.readlines(US)
percentage value - |tloat(re.tindall(’\d+\.\d+(f-\%)|\d+\.\d+(r-\s\*)’, i(-l))|0]) tor i in [ci 
print(percentage value)
it percentage value]0| <■ percentage vaiuc|l|: 
print('Website is hosted in Dublin') 
else:
COMMENTING
Again we mention commenting. It’s a hugely important factor in 
programming, even if you're the only one who is ever going to view 
the code, you need to add comments as to what's going on. Is this 
function where you lose a life? Write a comment and help you, or 
anyone else, see what's going on.
# set up pygame 
pygame.init() 
mainClock = pygame.time.Clock()
# set up the window 
width = 800 
height = 700
screen = pygame.display.set_mode((width, height), 0, 32) 
pygame.display.set_caption(1 caption•)
# set up movement variables 
moveLeft = False 
moveRight = False 
moveUp = False 
moveDown = False
# set up direction variables
DOWNLEFT = 1
DOWNRIGHT = 3
140
Python & C++ Coding

Beginner Python Mistakes
COUNTING LOOPS
Remember that in Python a loop doesn't count the last numberyou 
specify in a range. So if you wanted the loop to count from 1 to 10, 
then you will need to use:
n = list(range(l, 11))
Which will return 1 to 10.
[Jr Python 3.6.2 Shell 
- 
□ X
File Edit Shell Debug Options Window Help
Python 3.6.2 (v3.6.2:5fd33b5, Jul 8 2017, 04:14:34) [MSC v.1900 32 bit (Intel)] 
on Win32
Type "copyright", "credits" or "license ()" for more information.
======== RESTART: C:\Users\david\Documents\Python\Space Invaders.py ======== 
»> n = list (range (1, 11)) 
»> print (n) 
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
CASE SENSITIVE
Python is a case sensitive programming language, so you will need 
to check any variables you assign. For example, Li ves=10 is a 
different variable to lives=10, calling the wrong variable in your code 
can have unexpected results.
COLONS
It's common for beginners to forget to add a colon to the end of a 
structural statement, such as:
class Hangman:
def guessfself, letter):
And so on. The colon is what separates the code, and creates the 
indents to which the following code belongs to.
class Hangman: 
def __ init___(self,word):
self.word = word 
self.missed_letters = [] 
self.guessed_letters = []
def guess(self,letter): 
if letter in self.word and letter not in self.guessed_letters: 
self.guessed_letters.append(letter)
elif letter not in self.word and letter not in self.missed_letters: 
self.missed_letters.append(letter)
else: 
return False 
return True
def hangman_over(self): 
return self.hangman_won() or (len(self.missed_letters) = 6)
def hangman_won(self): 
if not in self.hide_word(): 
return True 
return False
def hide word(self): 
rtn = ' ' 
for letter in self.word: 
if letter not in self.guessed_letters: 
rtn += 
else:
rtn += letter 
return rtn
J Python 3.6.2 Shell
File Edit Shell Debug Options Window Help
Python 3.6.2 (v3.6.2:5fd33b5, Jul 8 2017, 04:14:3 
on Win32
Type "copyright", "credits" or "license()" for mor 
>» Lives=10 
>» lives=9
>» print (Lives, lives) 
10 9 
»>
BRACKETS
Everyone forgets to include that extra bracket they should have 
added to the end of the statement. Python relies on the routine 
having an equal amount of closed brackets to open brackets, so any 
errors in your code could be due to you forgetting to count your 
brackets; including square brackets.
def print_game_status(self):
print (board[len(self.missed_letters)]) 
print ('Word: ' + self.hide_word()) 
print ('Letters Missed: ',)
for letter in self.missed_letters: 
print (letter,)
print ()
print ('Letters Guessed: ',)
for letter in self.guessed_letters: 
print (letter,)
print ()
OPERATORS
Using the wrong operator is also a common mistake to make. When 
you're performing a comparison between two values, for example, 
you need to use the equality operator (a double equals, ==). Using 
a single equal (=) is an assignment operator that places a value to a 
variable (such as, lives=10).
b = 5
c = io
d = 10
b == c #false because 5 is not equal to 10
c = d #true because 10 is equal to 10
OPERATING SYSTEMS
Writing code for multiple platforms is difficult, especially when you 
start to utilise the external commands of the operating system. For 
example, if your code calls for the screen to be cleared, then for 
Windows you would use cis. Whereas, for Linux you need to use 
clear. You need to solve this by capturing the errorand issuing it 
with an alternative command.
# Code to detect error for using a different OS 
run=l
while (run=l) :
os.system('clear')
except OSError:
os.system(1 cis')
print ('\n»»»»»Python 3 File Manager«««««\n')
www.pclpublications.com

Working with Code
Beginner C++ Mistakes
There are many pitfalls the C++ developer can encounter, especially as this is a more 
complex and often unforgiving language to master. Beginners need to take C++ a step 
at a time and digest what they've learned before moving on.
VOID(C++f MISTAKES)
Admittedly it's not just C++ beginners that make the kinds of errors we outline on these pages, even hardened coders are 
prone to the odd mishap here and there. Here are some common issues to try and avoid.
UNDECLARED IDENTIFIERS
A common C++ mistake, and to be honest a common mistake with 
most programming languages, is when you try and output a variable 
that doesn't exist. Displaying the value of x on-screen is fine but not 
if you haven't told the compiler what the value of x is to begin with.
File Edit View Search Tools Documents Help
£) u 
** X |O C 9
[cj testl.cpp x
#include <iostream>
int mainO
std::cout « x;
}
STD NAMESPACE
Referencing the Standard Library is common for beginners 
throughout their code, but if you miss the std:: element of a 
statement, your code errors out when compiling. You can combat 
this by adding:
using namespace std;
Under the #include part and simply using cout, cin and so on from 
then on.
^include <iostream> 
using namespace std;
int mainO 
{
int a, b, c, d;
a=10;
b=28;
c=30;
d=40;
cout « a, b, c, d;
}
SEMICOLONS
Remember that each line of a C++ program must end with a 
semicolon. If it doesn't then the compiler treats the line with the 
missing semicolon as the same line with the next semicolon on. This 
creates all manner of problems when trying to compile, so don't 
forget those semicolons.
GCCORG++
If you're compiling in Linux then you will no doubt come across 
gcc and g++. In short, gcc is the Gnu Compiler Collection (or Gnu 
C Compiler as it used to be called) and g++ is the Gnu ++ (the C++ 
version) of the compiler. If you're compiling C++ then you need to 
use g++, as the incorrect compiler drivers will be used.
#include <iostream>
david@mint-mate '■/Documents
File Edit View Search Terminal Help
int mainO
{
int a, b, c, d;
a=10;
b=20;
c=30
d=40;
std::cout « a, b, c, d;
}
david@mint-mate '-/Documents s gcc testl.cpp -o test 
/tmp/ccA5zhtg.o: In function 'main':
testl.cpp:(.text+0x2a): undefined reference to 'std::cout'
testl.cpp:(.text+0x2f): undefined reference to 'std::ostream:: 
/tmp/ccA5zhtg.o: In function '__staticinitializationand dest
)':
testl.cpp:(.text+0x5d): undefined reference to 'std::iosbase: 
testl.cpp:(.text+0x6c): undefined reference to 'std::iosbase: 
collect2: error: Id returned 1 exit status
david@mint-mate '■/Documents s g++ testl.cpp -o test 
david@mint-mate -/Documents S
Python & C++ Coding

(^Beginner C++ Mistakes
COMMENTS (AGAIN)
Indeed the mistake of never making any comments on code is back 
once more. As we've previously bemoaned, the lack of readable 
identifiers throughout the code makes it very difficult to look back at 
how it worked, for both you and someone else. Use more comments.
QUOTES
Missing quotes is a common mistake to make, for every level of user. 
Remember that quotes need to encase strings and anything that's 
going to be outputted to the screen or into a file, for example. Most 
compilers errors are due to missing quotes in the code.
EXTRA SEMICOLONS
While it's necessary to have a semicolon at the end of every C++ line, 
there are some exceptions to the rule. Semicolons need to be at 
the end of every complete statement but some lines of code aren’t 
complete statements. Such as:
#include 
if lines 
switch lines
If it sounds confusing don't worry, the compiler lets you know where 
you went wrong.
// Program lo print positive number entered by the user 
// If user enters negative number, it is skipped 
•include <iosrream> 
using namespace std;
int main()
( 
int number; 
cout « "Enter an Integer: "; 
rin » number;
// checks if the number is positive 
if ( number > 0) 
(
cout << "You entered a positive integer; " << number « endl;
rout << "This statement is always executed."; 
return 0;
TOO MANY BRACES
The braces, or curly brackets, are beginning and ending markers 
around blocks of code. So for every {you must have a}. Often it's 
easy to include or miss out one or the other facing brace when 
writing code; usually when writing in a text editor, as an IDE adds 
them for you.
#include <iostream>
using namespace std;
int mainf)
{
int x;
string mystring = "This is a string!\n’; 
cout « "What’s the value of x?
cin » x;
cout « x;
{
cout « \n\n ;
cout « mystring;
}
INITIALISE VARIABLES
In C++ variables aren’t initialised to zero by default. This means if 
you create a variable called x then, potentially, it is given a random 
number from 0 to 18,446,744,073,709,551,616, which can be 
difficult to include in an equation. When creating a variable, give it 
the value of zero to begin with: x=0.
#include <iostream> 
using namespace std;
int main()
I
int x;
x=0;
cout « X;
I
A.OUT
A common mistake when compiling in Linux is forgetting to name 
your C++ code post compiling. When you compile from the Terminal, 
you enter:
g++ code.cpp
This compiles the code in the file code.cpp and create an a.out file 
that can be executed with ,/a.out. However, if you already have code 
in a.out then it’s overwritten. Use:
g++ code.cpp -o nameofprogram
david@mint-mate -/Documents
File Edit View Search Terminal Help
david@mint-mate -/Documents S g++ testl.cpp 
david@mint-mate -/Documents $ ./a.out 
0
david<amint-mate -/Documents s g++ testl.cpp -o printzero 
david@mint-mate -/Documents S ./printzero
0
david@mint-mate -/Documents S
www.pclpublications.com

Working with Code
Where Next?
Coding, like most subjects, is a continual learning experience. You may not class yourself 
as a beginner any more but you still need to test your code, learn new tricks and hacks to 
make it more efficient and even branch out and learn another programming language.
#INCLUDE<KEEP ON LEARNING>
What can you do to further your skills, learn new coding practises, experiment and present your code and even begin to help 
others using what you've experienced so far?
TWITTER
OPEN PROJECTS
Twitter isn't all trolls and antagonists, among the well-publicised 
vitriol are some genuine people who are more than willing to spread 
their coding knowledge. We recommend you find a few who you can 
relate to and follow them. Often they post great tips, hacks and fixes 
for common coding problems.
Look for open source projects that you like the sound of and offer 
to contribute to the code to keep it alive and up to date. There are 
millions of projects to choose from, so contact a few and see where 
they need help. It may only be a minor code update but it's a noble 
occupation for coders to get into.
@ Horn* Monunts Q Notifications (3 M«ss*gts 
Q 
|
programming
Search filters
Related searches
Who to follow
- ProSr.mmin, 
VS
KEEP CODING
SHARE SKILLS
If you've mastered Python fairly well, then turn your attention to 
C++ or even C#. Still keep your Python skills going but learning a new 
coding language keeps the old brain ticking over nicely and give you a 
view into another community, and how they do things differently.
Become more active on coding and development knowledge sites, 
such as StackExchange. If you have the skills to start and help others 
out, not only will you feel really good for doing so but you can also 
learn a lot yourself by interacting with other members.
#pragma once
#define EXPAND_ME _FILE_ " : " _LINE_
constexpr auto pi = 314LLu;
thread_local decitype(pi) rage = 0bl0;
[[deprecated("abc")]] charl6_t *f() noexcept { return nullptr; }
template ctypename T> struct Foo {
static_assert(std::is_floating_point<T>::value, 
"Foo<T>: T must be floating point");
StackExchange^
M saes Top u«n MewsieHea
2,783,281 results
struct A final : goo {
A() = default;
[[noreturn]] virtual void foot) override;
Call python from module and receive output
template <typename T> concept bool EqualityCompacable = requires(T 
{ a = b } -> bool;
144
Python & C++ Coding

Q Where Next?
GOING MOBILE
PORTFOLIOS
The mobile market is a great place to test your coding skills and 
present any games or apps you've created. If yourapp is good, then 
who knows, it could be the next great thing to appear on the app 
stores. It's a good learning experience nevertheless, and something 
worth considering.
If you've learned how to code with an eye fora developerjob in 
the future, then it's worth starting to build up an online portfolio 
of code. Look at job postings and see what skills they require, 
then learn and code something with those skills and add it to the 
portfolio. When it comes to applying, include a link to the portfolio.
My Work
Want to see more examples?
Chronicled.org
VISIT WEBSITE
ONLINE LEARNING
TEACH CODE
Online courses are good examples of where to take your coding 
skills next, even if you start from the beginner level again. Often, 
an online course follows a strict coding convention, so if you're self- 
taught then it might be worth seeing how other developers lay out 
their code, and what’s considered acceptable.
Can you teach? If your coding skills are spot on, consider 
approaching a college or university to see if they have need fora 
programming language teacher, perhaps a part-time or evening 
course. If not teaching, then consider creating your own YouTube 
how to code channel.
Learn to code interactively, for free.
SHARE CODE
Get sharing, even ifyou thinkyourcode isn't very good. The 
criticism, advice and comments you receive back help you iron out 
any issues with your code, and you add them all to your checklist. 
Alternatively your code might be utterly amazing but you won't 
know unless you share it.
HARDWARE PROJECTS
Contributing to hardware projects is a great resource for proving your 
code with others and learning from other contributors. Many of the 
developer boards have postings for coders to apply to for hardware 
projects, using unique code to get the most from the hardware that's 
being designed.
Share Code in Real-time with Developers
An online code editor for interviews, troubleshooting, teaching & more...
www.pclpublications.com

The Complete 
Manual Series
Available on ■I[ Readly
The Complete
Android
User Manual
The Complete 
Black & White 
Photography 
Manual 
Master professional tetfpmgues 
and improve your phoKgraphy
v The Complete
Build Your 
Own PC
Manual
Learn how to build a new computer
—
The Complete
Internet
Security
Manual
Master security and stay safe online
The Complete
Chromebook
User Manual
Master your Chromebook and 
Google's Chrome OS
The Complete
& Python
Manual
FOR ALL COMPUTERS & MOBILES
The Complete
Google
User Manual
Master Google's amazing 
free apps and improve 
your productivity
-----------------------------------------------Wi
The Complete
GoPro
Manual
'f.
Master your GoPro camera and ' 
shoot amazing-photos and videos
The Complete *
Home
Networking
Manual
your nelwort and smmt
840
The Complete
Instagram
User
' r
OVER
460
GUIDES
Essential step-by-step guides to 
mastering Instagram
v The Complete
Windows 11
User Manual
The essential step-by-step manual 
to mastering Microsoft's 
Windows 11 operating system
UPDATED FOR ALL iPAD MODELS £ 
The Complete 
iPad
&iPadOS*3
User Manual
Master your iPad and iPadOS 16
www.pdputlical>ons.c.m QPopercut 100% INDEPENDENT
www.pdpuHkaliou.om 3 PoperCUt 100% INDEPENDENT
-----------------------------------------------
The Complete 
iPhone 
& iOS®r 
User Manual 
Master your iPhone and iOS 16
For a full list of titles available visit:
www.pclpublications.com

Want to master your Code?
magazine on Readlu now!
NEW
The Future Is Code
Issue Five | March 20231100% INDErtiMUti'i. 
—
The Ultimate I
Python
Learn, Code, Create 
and Master!
PACKED WITH
USER
Using Python To Code
100 Things You Have Usinoas^berry Pi! 
Your Own Games!
To Do With Python! Ragmens---------
Vnnr Fvnprt Programming
ChecKiisiLoiiipc«=«-
^biningCodingPlatforms CouldYou BeTteNext
VVIUI uieav —
Then don't miss our NEW Programming
Click our handy link to read now: https://bit.ly/30cL1 zx
The Complete Manual Series:
C++ & Python
15 | ISBN: 978-1-914404-44-3
Published by: Papercut Limited
Digital distribution by: Readly, Zinio & Pocketmags
© 2023 Papercut Limited All rights reserved. No part of this 
publication may be reproduced in any form, stored in a retrieval 
system or integrated into any other publication, database or 
commercial programs without the express written permission of 
the publisher. Under no circumstances should this publication and 
its contents be resold, loaned out or used in any form by way of 
trade without the publisher’s written permission. While we pride 
ourselves on the quality of the information we provide, Papercut 
Limited reserves the right not to be held responsible for any 
mistakes or inaccuracies found within the text of this publication. 
Due to the nature of the tech industry, the publisher cannot 
guarantee that all apps and software will work on every version of
device. It remains the purchaser’s sole responsibility to determine 
the suitability of this book and its content for whatever purpose. 
Any images reproduced on the front and back cover are solely for 
design purposes and are not representative of content.
We advise all potential buyers to check listing prior to purchase 
for confirmation of actual content. All editorial opinion herein is 
that of the reviewer - as an individual - and is not representative of 
the publisher or any of its affiliates. Therefore the publisher holds 
no responsibility in regard to editorial opinion and content. 
This is an independent publication and as such does not 
necessarily reflect the views or opinions of the manufacturers or 
hardware and software, applications or products contained within. 
This publication is not endorsed or associated in any way with 
Python, C++, The Linux Foundation, The Raspberry Pi Foundation, 
ARM Holding, Canonical Ltd, Debian Project, Linux Mint, Microsoft, 
Lenovo, Dell, Hewlett-Packard, Apple and Samsung or any 
associate or affiliate company. All copyrights, trademarks and 
registered trademarks for the respective companies are
acknowledged. Relevant graphic imagery reproduced with 
courtesy of Lenovo, Hewlett- Packard, Dell, Microsoft, Samsung, 
Linux Mint, NASA, and Apple. Additional images contained within 
this publication are reproduced under licence from Shutterstock. 
Prices, international availability, ratings, titles and content are 
subject to change.
All information was correct at time of publication. Some content 
may have been previously published in other volumes or titles.
a
 Papercut Limited
Registered in England & Wales No: 04308513
ADVERTISING - For our latest media packs please contact: 
James Gale - email: jgale@pclpublications.com
INTERNATIONAL LICENSING - Papercut Limited has many great 
publications and all are available for licensing worldwide.
For more information email: jgale@pclpublications.com

Get Your Exclusive 
FREE Gift Worth 
£9.99 Here!
Download 
Your FREE
—BEE Software! Great Games! Essentk
TFCM 170
I SHOPPER
M A G A z I N E SISFSS-”-
are!
Thick!
Tech Shopper 
Magazine
*fQO amazing 
■ gadgets 
APPS & GAMES INSIDE!
Head over to your web 
browser and follow these 
simple instructions...
?.° y°u need a ■ 
W Cnromebook?
Read our expert guide 
to Google’s notebook!
Home Security 
Inside & Out1
Discover how to krep,our 
home safe and secure!
a
1/ Enter the following URL: www.pclpublications.com/exclusives
2/ Sign up/in and from the listings of our exclusive customer 
downloads, highlight the Tech Shopper Magazine option.
3/ Enter your unique download code (Listed below) in the "Enter 
download code" bar.
4/ Click the Download Now! Button and your file will automatically 
download.
5/ Your file is a high resolution PDF file, which is compatible with 
the majority of customer devices/platforms.
Exclusive Download Code: pcl37 862re
NOTE: This is a limited reader offer running from 1st January 2023 to 1st September 2023.
Terms and conditions apply and can be found at www.pclpublications.com

