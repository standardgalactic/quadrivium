
Ex: 0, 10, -100, 100000000, …
How large can a Python int become (positive or negative)?
The int data type
Integers are represented internally using base-2 (binary) digits, not decimal.
27     26    25     24    23    22    21    20
128   64  32   16   8   4   2   1
___     ___    ___     ___    ___    ___    ___    ___     
1
0
0
1
1
individual bits ( 0 | 1 )
1 x 16
+ 0 x 8
+ 0 x 4
+ 1 x 2
+ 1 x 1
= 16 + 2 + 1 = 19
(10011)2 = (19)10
Representing the decimal number 19 requires 5 bits

27     26    25     24    23    22    21    20
128   64  32   16   8   4   2   1
___     ___    ___     ___    ___    ___    ___    ___     
What's the largest (base 10) integer number that can be represented using 8 bits?
Let's assume first that we only care about non-negative integers
1
1
1
1
1
1
1
1
128 + 64 + 32 + 16 + 8 + 4 + 2 + 1
= 28 - 1
= 255
If we care about handling negative integers as well, then 1 bit is reserved to represent the sign of 
the number, leaving us with only 7 bits for the number itself out of the original 8 bits
The largest number we can represent using 7 bits is 27 – 1 = 127
So, using 8 bits we are able to represent all the integers in the range [-127, 127]
Since 0 does not require a sign, we can squeeze out an extra number,
and we end up with the range [-128, 127]
[-27, 27 – 1]

Similarly, if we want to use 32 bits to store (signed) integers, our range would be:
2(32-1)
= 231 = 2,147,483,648
Range: [-2,147,483,648 … 2,147,483,647]
If we want to use 16 bits to store (signed) integers, our range would be:
2(16-1)
= 215
= 32,768
Range: [-32,768 … 32,767]
If we had an unsigned integer type, using 32 bits our range would be:
[0, 232] = [0 … 4,294,967,296]
= 4,294,967,296 / 1024 kB = 4,194,304 kB
memory spaces (bytes) are limited by their address number →32 bits
= 4,096 / 1024 GB = 4 GB
= 4,194,304 / 1024 MB = 4,096 MB
In a 32-bit OS:
4,294,967,296 bytes of addressable memory

Some languages (such as Java, C, …) provide multiple distinct integer data types that use a fixed 
number of bits:
byte
-128, …, 127
signed 8-bit numbers
So, how large an integer can be depends on how many bits are used to store the number.
short
-32,768, …, 32,767
signed 16-bit numbers
int
-231 …, 231 - 1
signed 32-bit numbers
long
-263 …, 263 - 1
signed 64-bit numbers
and more…
Java

Python does not work this way
The int object uses a variable number of bits
Theoretically limited only by the amount of memory available
Can use 4 bytes (32 bits), 8 bytes (64 bits), 12 bytes (96 bits), etc.
Seamless to us
Of course, larger numbers will use more memory
and standard operators such as +, *, etc. will run 
slower as numbers get larger
[since ints are actually objects, there is a further fixed overhead per integer]

