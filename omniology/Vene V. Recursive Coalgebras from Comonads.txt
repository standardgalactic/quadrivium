y
Recursive Coalgebras from Comonads ‚ãÜ
Venanzio Capretta 1,2
Dept. of Mathematics and Statistics, University of Ottawa
585 King Edward Ave., Ottawa, Ont. K1N 6N5, Canada
Tarmo Uustalu 3
Institute of Cybernetics at Tallinn Technical University
Akadeemia tee 21, EE-12618 Tallinn, Estonia
Varmo Vene 4
Dept. of Computer Science, University of Tartu
J. Liivi 2, EE-50409 Tartu, Estonia
Abstract
We discuss Osius‚Äôs [22] concept of a recursive coalgebra of a functor from the per-
spective of programming semantics and give some new suÔ¨Écient conditions for
the recursiveness of a functor-coalgebra that are based on comonads, comonad-
coalgebras and distributive laws.
1
Introduction
This paper is dedicated to the study of recursive functor-coalgebras. In the
sense of [22], a coalgebra (A, Œ±) of a functor F : C ‚ÜíC is recursive iÔ¨Ä, for any
algebra (C, œï) of F, the morphism equation
f = œï ‚ó¶Ff ‚ó¶Œ±
(‚àó)
has a unique solution in the unknown f : A ‚ÜíC.
‚ãÜResearch supported by the Estonian-French scientiÔ¨Åc cooperation programme Parrot and
by the Estonian Science Foundation under grant No. 5567.
1 Previously at INRIA Sophia Antipolis, 2004 route des Lucioles, BP 93, F-06902 Sophia
Antipolis, France.
2 Email: vcapr396@science.uottawa.ca
3 Email: tarmo@cs.ioc.ee
4 Email: varmo@cs.ut.ee
This is a preliminary version. The Ô¨Ånal version will be published in
Electronic Notes in Theoretical Computer Science
URL: www.elsevier.nl/locate/entcs

Capretta, Uustalu, Vene
Our prime interest in recursive coalgebras comes from their application to
programming semantics. In programming, it is customary to wish to be able
to take some function Œ¶ : C(A, C) ‚ÜíC(A, C) and read the equation
f = Œ¶(f)
(‚àó‚àó)
as a function deÔ¨Ånition. The problem is that, for arbitrary givens, the equation
(**) is not guaranteed to make sense as a deÔ¨Ånition: it may have exactly one
solution, but it can just as well have no solutions or multiple solutions among
which there is no most preferable solution. But for more speciÔ¨Åc givens, the
equation may indeed be predestined to have exactly one solution (or at least
one solution, but among them a canonical one) and in this case it is really
meaningful to see it as a deÔ¨Ånition.
For (*), which is a structured instance of (**), one of the ways to know
that it properly deÔ¨Ånes a morphism is to know that (A, Œ±) is recursive. The
equation form (*) covers most useful situations in programming and examples
of recursive coalgebras abound. To mention some: (a) For any functor F :
C ‚ÜíC with an initial algebra, (¬µF, inF), the F-coalgebra (¬µF, in‚àí1
F ) is recursive
(iteration).
But so are also the F(Id √ó K¬µF)-algebra (¬µF, F‚ü®id¬µF, id¬µF ‚ü©‚ó¶
in‚àí1
F ) (primitive recursion), the F(Id √ó F)-coalgebra (¬µF, F‚ü®id¬µF, in‚àí1
F ‚ü©‚ó¶in‚àí1
F )
(iteration back one or two steps) etc. Recursive coalgebras cover a wide variety
of structured recursion schemes for initial algebras. (b) The set ListZ of all
lists over some linearly ordered set Z, together with the nil and cons functions,
is the initial algebra of the functor LZ = K1 + KZ √ó Id : Set ‚ÜíSet. Endowed
with the analysis of every non-empty list into its head and tail, the set ListZ is a
recursive LZ-coalgebra and so is every suÔ¨Éx-closed subset of ListZ. A recursive
LZ-coalgebra is also given by the set ListZ equipped with the analysis of every
non-empty list into its smallest element and the rest. The set ListZ equipped
with the analysis of every non-empty, non-singleton list into two halves is a
recursive coalgebra of the functor BTZ = K1 +KZ +Id√óId. Etc. (c) A functor
may well have recursive coalgebras without having an initial algebra. E.g., a
set with a relation on it carries a recursive coalgebra of the powerset functor
iÔ¨Äthe relation is wellfounded.
In this paper, we present some motivation for the use of recursive coalge-
bras as a paradigm of structured recursion in programming semantics, present
the basic theory of recursive coalgebras and, centrally, give some new con-
ditions for the recursiveness of a coalgebra based on comonads, comonad-
coalgebras and distributive laws. The latter results are a generalization of our
results in [27] on structured recursion schemes for initial algebras and, modulo
the duality, the dual results in [4,7] on structured corecursion schemes for Ô¨Ånal
coalgebras.
Related work Recursive coalgebras, together with wellfounded coalgebras‚Äî
a related concept where, instead of a recursion principle, the coalgebra has to
obey an induction principle‚Äî, were Ô¨Årst introduced by Osius [22] in his work
2

Capretta, Uustalu, Vene
on categorical set theory. He considered wellfounded and recursive coalge-
bras of the powerset functor of the category of sets (or, more abstractly, of
the powerobject functor of an elementary topos), and proved the general re-
cursion theorem, that every wellfounded coalgebra of the powerset functor is
recursive. Taylor [23,24,25] took Osius‚Äôs ideas further, showing that the gen-
eral recursion theorem holds for any functor on Set preserving monos and
inverse image diagrams. Eppendahl [9,10] studied recursive (a.k.a. algebra-
initial) coalgebras with the objective of obtaining an explanation to Freyd‚Äôs
[12,13,14] transposition of invariant objects.
The dual concept of a corecursive (a.k.a. coalgebra-Ô¨Ånal, iterative) algebra
was used by Escard¬¥o and Simpson [11] to provide a universal characterization
of the closed euclidean interval. The newest work by Ad¬¥amek, Milius and
Velebil [19,3] on the free completely iterative monad (resp. the free iterative
monad) is centered around a related, but stronger concept (resp. its Ô¨Ånitary
version considered also earlier by Nelson [21]).
Structured recursion schemes for initial algebras have been studied by the
authors [27] and the dual schemes for Ô¨Ånal coalgebras by Bartels [4] and Can-
cila, Honsell and Lenisa [7]. To functional programming, the structured gen-
eral recursion scheme was Ô¨Årst introduced by Meijer, Fokkinga and Paterson
[18] who called it the hylo scheme. Doornbos and Backhouse [8] have asked
the question under what conditions the hylo diagram has a unique solution. In
type theory, structured (co)recursion schemes for initial algebras (Ô¨Ånal coal-
gebras) have been studied by, e.g., Gim¬¥enez [15,16] and (co)recursion more
generally by, e.g., Bove and Capretta [5,6] and McBride and McKinna [17].
Organization of the paper In Section 2, we explain our motivation for study-
ing recursive coalgebras and give the deÔ¨Ånition. In Section 3, we present a
number of important basic facts about recursive coalgebras.
In Section 4,
which is the main section of the paper, we show how recursive coalgebras
arise from comonads, comonad-coalgebras and distributive laws. In Section 5,
we conclude by pointing out some directions for future research.
2
Recursive coalgebras: motivation and deÔ¨Ånition
In functional programming, functions are commonly speciÔ¨Åed by recursive
equations. Often, these equations have a nice and simple structure, although
this structure may be hidden. As an example consider a possible deÔ¨Ånition of
the quicksort algorithm. Let Z be a set linearly ordered by ‚â§.
qsort: ListZ ‚ÜíListZ
qsort [] = []
qsort (x : l) = qsort(l‚â§x) ++ (x : qsort(l>x))
3

Capretta, Uustalu, Vene
where l‚â§x = [y ‚Üêl | y ‚â§x] and l>x = [y ‚Üêl | y > x].
This deÔ¨Ånition is clearly based on an equation of the form qsort = Œ¶(qsort)
where Œ¶ : Set(ListZ, ListZ) ‚ÜíSet(ListZ, ListZ). With minimal eÔ¨Äort, we can
see that Œ¶(qsort) may be rewritten into an equivalent form qmerge‚ó¶BT qsort ‚ó¶
qsplit where BTZ X = 1 + Z √ó X √ó X. The Ô¨Årst morphism qsplit of the
composition determines the arguments for the recursive calls; (ListZ, qsplit) is
a BTZ-coalgebra:
qsplit: ListZ ‚Üí1 + Z √ó ListZ √ó ListZ
qsplit [] = inl(‚àó)
qsplit (x : l) = inr(‚ü®x, l‚â§x, l>x‚ü©)
The second morphism BT qsort: BTZ(ListZ) ‚ÜíBTZ(ListZ) makes the recur-
sive calls.
The third morphism qmerge determines how the results of the
recursive calls combine into the result of the main call; (ListZ, qmerge) is a
BTZ-algebra:
qmerge: 1 + Z √ó ListZ √ó ListZ ‚ÜíListZ
qmerge inl(‚àó) = []
qmerge inr(‚ü®x, l1, l2‚ü©) = l1 ++ (x : l2)
The equation qsort = qmerge ‚ó¶BTqsort ‚ó¶qsplit is meaningful as a deÔ¨Ånition
since it determines a unique function. The reason is that the arguments of
the recursive calls are always strictly shorter than that of the main call‚Äî
a property of the coalgebra (ListZ, qsplit).
The equation remains uniquely
solvable also, if we replace (ListZ, qmerge) with some other F-algebra (C, œï):
we may say that (ListZ, qsplit) is recursive.
Abstracting away the concrete data of the above example, we are led to
the following deÔ¨Ånition.
DeÔ¨Ånition 2.1 (coalgebra-to-algebra morphism, recursive coalgebra)
Let F : C ‚ÜíC be a functor.
A coalgebra-to-algebra morphism from an
F-coalgebra (A, Œ±) to an F-algebra (C, œï) is a morphism f : A ‚ÜíC such that
FA
F f

A
Œ±
o
f

FC
œï
/ C
An F-coalgebra (A, Œ±) is recursive (or algebra-initial) iÔ¨Äfor every F-
algebra (C, œï) there exists a unique coalgebra-to-algebra morphism from (A, Œ±)
to (C, œï), denoted Ô¨ÅxF,Œ±(œï).
Recursive coalgebras and (ordinary) coalgebra morphisms form a category
RecCoalgF which is trivially a full subcategory of CoalgF.
4

Capretta, Uustalu, Vene
We note that, in the functional programming community, the coalgebra-
to-algebra morphism condition is known as hylo diagram [18]. The recursion
scheme used‚Äîhylo scheme‚Äîsays that, if F has an initial algebra whose in-
verse is its Ô¨Ånal coalgebra (which happens if C is algebraically compact), then
the post-composition of the initial algebra morphism to (C, œï) with the Ô¨Ånal
coalgebra morphism from (A, Œ±) (the hylomorphism) is a coalgebra-to-algebra
morphism from (A, Œ±) to (C, œï). The hylomorphism is not necessarily a unique
solution of the hylo diagram, just a canonical one.
For the powerset functor P : Set ‚ÜíSet, the notion of recursive coalgebra
coincides with that of wellfounded relation. Indeed, any P-coalgebra Œ± : A ‚Üí
PA determines and is determined by a relation ‚â∫on A (we use the symbol
‚â∫to help intuition, but the relation need not be an order): Œ±(a) = {x ‚ààA |
x ‚â∫a}, x ‚â∫a iÔ¨Äx ‚ààŒ±(a). A P-coalgebra-to-algebra morphism from (A, Œ±)
to (C, œï) is a function f : A ‚ÜíC such that f = œï ‚ó¶Pf ‚ó¶Œ±. If a ‚ààA, then
(Pf ‚ó¶Œ±)(a) = {f(x) | x ‚â∫a}, so the condition says that
f(a) = œï({f(x) | x ‚â∫a})
We get that (A, Œ±) is recursive iÔ¨Ä, for any set C and function œï : PC ‚ÜíC,
the equation above has a unique solution in f : A ‚ÜíC. This happens exactly
when the relation ‚â∫is wellfounded.
3
Recursive coalgebras: basic constructions
As exempliÔ¨Åed by the last example (determining the wellfoundedness of a
decidable relation on natural numbers is undecidable), it can be hard to de-
termine whether a coalgebra of a given functor F is recursive. So, instead
of trying to solve the unsolvable, we will point out a few simple cases where
some coalgebra is obviously recursive and then provide various constructions
for producing new recursive coalgebras out of coalgebras already known to be
recursive. We start with the simplest interesting case when the functor F has
an initial algebra. In this situation, we agree to write (¬µF, inF) for the initial
F-algebra and ItF( œï ) for the unique algebra morphism from (¬µF, inF) to a
given F-algebra (C, œï) (the iteration given by (C, œï)).
Proposition 3.1 Let F : C ‚ÜíC be a functor. If F has an initial algebra,
then (¬µF, in‚àí1
F ) is a Ô¨Ånal recursive F-coalgebra.
Proof. The F-coalgebra (¬µF, in‚àí1
F ) is certainly recursive, since the unique
algebra morphism ItF( œï ) from (¬µF, inF) to an F-algebra (C, œï) is also a unique
coalgebra-to-algebra morphism from (¬µF, in‚àí1
F ) to (C, œï).
To see that (¬µF, in‚àí1
F ) is Ô¨Ånal among the recursive F-coalgebras, notice that
the unique coalgebra-to-algebra morphism from a recursive F-coalgebra (A, Œ±)
to (¬µF, inF) is also a unique coalgebra morphism from (A, Œ±) to (¬µF, in‚àí1
F ). 2
5

Capretta, Uustalu, Vene
Corollary 3.2 If F has an initial algebra, then the unique coalgebra-to-
algebra morphism from a recursive F-coalgebra (A, Œ±) to an F-algebra (C, œï)
factors as follows:
Ô¨ÅxF,Œ±(œï) = ItF( œï ) ‚ó¶Ô¨ÅxF,Œ±(inF)
Proposition 3.3 Let (A, Œ±) be a recursive F-coalgebra. If F has an initial
algebra, then m = Ô¨ÅxF,Œ±(inF) : A ‚Üí¬µF is split mono (as a morphism, not
necessarily as a coalgebra morphism) iÔ¨ÄŒ± is split mono.
Proof. (if) Let the postinverse of Œ± : A ‚ÜíFA be Œ±‚àí: FA ‚ÜíA. Then
h = ItF( Œ±‚àí) : ¬µF ‚ÜíA is a postinverse of m : A ‚Üí¬µF: indeed, we have
h‚ó¶m = h‚ó¶inF ‚ó¶Fm‚ó¶Œ± = Œ±‚àí‚ó¶F(h‚ó¶m)‚ó¶Œ±, but we also have idA = Œ±‚àí‚ó¶FidA‚ó¶Œ±,
hence h ‚ó¶m = Ô¨ÅxF,Œ±(Œ±‚àí) = idA.
(only if) Write h : ¬µF ‚ÜíA for the postinverse of m : A ‚Üí¬µF. Then
Œ±‚àí= h ‚ó¶inF ‚ó¶Fm : FA ‚ÜíA is a postinverse of Œ± : A ‚ÜíFA, since
Œ±‚àí‚ó¶Œ± = h ‚ó¶inF ‚ó¶Fm ‚ó¶Œ± = h ‚ó¶m = idA.
2
Here is the Ô¨Årst proposition useable to reduce the question of recursiveness
of one coalgebra to that of some other, related coalgebra.
Proposition 3.4 Let (A, Œ±) be a recursive F-coalgebra and (B, Œ≤) an F-
coalgebra.
If there are F-coalgebra morphisms h : (A, Œ±) ‚Üí(B, Œ≤) and
k : (B, Œ≤) ‚Üí(FA, FŒ±) such that Œ≤ = Fh ‚ó¶k, then (B, Œ≤) is also recursive.
Proof. Consider an arbitrary F-algebra (C, œï). Let g = Ô¨ÅxF,Œ±(œï). The situ-
ation is summarized in the following diagram.
FB
F k

B
Œ≤
o
k

F 2A
F 2g

FA
F h
O
F Œ±
o
F g

A
Œ±
o
h
O
g

F 2C
F œï / FC
œï
/ C
Let f = œï ‚ó¶Fg ‚ó¶k : B ‚ÜíC.
We show that Ô¨ÅxF,Œ≤(œï) = f.
We have
f = œï ‚ó¶Fg ‚ó¶k = œï ‚ó¶F(œï ‚ó¶Fg ‚ó¶Œ±) ‚ó¶k = œï ‚ó¶F(œï ‚ó¶Fg ‚ó¶k) ‚ó¶Œ≤ = œï ‚ó¶Ff ‚ó¶Œ≤,
hence f is a F-coalgebra-to-algebra morphism from (B, Œ≤) to (C, œï).
To see that f is unique, suppose that f ‚Ä≤ is another F-coalgebra-to-algebra
morphism from (B, Œ≤) to (C, œï). Then f ‚Ä≤‚ó¶h = œï‚ó¶Ff ‚Ä≤‚ó¶Œ≤‚ó¶h = œï‚ó¶F(f ‚Ä≤‚ó¶h)‚ó¶Œ±,
which implies f ‚Ä≤ ‚ó¶h = Ô¨ÅxF,Œ±(œï) = g.
Consequently, f ‚Ä≤ = œï ‚ó¶Ff ‚Ä≤ ‚ó¶Œ≤ =
œï ‚ó¶F(f ‚Ä≤ ‚ó¶h) ‚ó¶k = œï ‚ó¶Fg ‚ó¶k = f.
2
6

Capretta, Uustalu, Vene
A number of useful propositions follow from Prop. 3.4. First, recursive
F-coalgebras are preserved by F.
Proposition 3.5 If (A, Œ±) is a recursive F-coalgebra, then (FA, FŒ±) is also
a recursive F-coalgebra.
Proof. From Prop. 3.4 for h = Œ± and k = idF A.
2
The implication of Prop. 3.1 can be turned around.
Proposition 3.6 Let F : C ‚ÜíC be a functor.
(a) If (A, Œ±) is a recursive F-coalgebra and Œ± is iso, then (A, Œ±‚àí1) is an
initial F-algebra.
(b) If (A, Œ±) is a Ô¨Ånal recursive F-coalgebra, then Œ± is iso (both as a mor-
phism and as a coalgebra morphism) (and hence (A, Œ±‚àí1) is an initial F-
algebra).
Proof. (a) The unique coalgebra-to-algebra morphism from (A, Œ±) to an F-
algebra (C, œï) is also a unique algebra morphism from (A, Œ±) to (C, œï).
(b) By Prop. 3.5, we have that (FA, FŒ±) is a recursive F-coalgebra and
it is trivial that Œ± is a coalgebra morphism from (A, Œ±) to (FA, FŒ±). On the
other hand, as (A, Œ±) is a Ô¨Ånal recursive coalgebra, there exists a coalgebra
morphism h from (FA, FŒ±) to (A, Œ±); i.e. we have the following situation:
FA
F Œ±

A
Œ±
o
Œ±

F 2A
F h

FA
F Œ±
o
h

FA
A
Œ±
o
Now, as (A, Œ±) is a Ô¨Ånal recursive coalgebra, there cannot be two distinct
coalgebra morphisms from (A, Œ±) to (A, Œ±), hence h ‚ó¶Œ± = idA. From h being
a coalgebra morphism, we further get also that Œ± ‚ó¶h = F(h ‚ó¶Œ±) = idF A.
2
It is not true for any category that a subcoalgebra of a recursive coalgebra
is recursive. But the following weaker statement is always true.
Proposition 3.7 Let (A, Œ±), (B, Œ≤) be F-coalgebras and m : B ‚ÜíA a split
monic coalgebra morphism from (B, Œ≤) to (A, Œ±). (a) If (A, Œ±) is recursive,
then (B, Œ≤) is also recursive. (b) If Œ± is split mono, then so is Œ≤.
Proof. Let h be the postinverse of m. (a) Let k = Œ±‚ó¶m. Then h is trivially a
coalgebra morphism and k is a coalgebra morphism as FŒ± ‚ó¶k = FŒ± ‚ó¶Œ± ‚ó¶m =
7

Capretta, Uustalu, Vene
F(Œ± ‚ó¶m) ‚ó¶Œ≤ = Fk ‚ó¶Œ≤. Furthermore, Œ≤ = Œ≤ ‚ó¶h ‚ó¶m = Fh ‚ó¶Œ± ‚ó¶m = Fh ‚ó¶k.
By Prop. 3.4, (B, Œ≤) is recursive.
(b) Let Œ±‚àíbe the postinverse of Œ±. Then Œ≤‚àí= h‚ó¶Œ±‚àí‚ó¶Fm is a postinverse
of Œ≤, since Œ≤‚àí‚ó¶Œ≤ = h ‚ó¶Œ±‚àí‚ó¶Fm ‚ó¶Œ≤ = h ‚ó¶Œ±‚àí‚ó¶Œ± ‚ó¶m = h ‚ó¶m = idB.
2
Here is another useful proposition, with a relatively involved proof. In the
next section, we shall see that, under an extra assumption, this proposition is
an instance of a more general theorem.
Proposition 3.8 Let C be cartesian and F : C ‚ÜíC a functor.
If (A, Œ±)
is a recursive F-coalgebra, then (A, F‚ü®idA, Œ± ‚ü©‚ó¶Œ±) is a recursive F(Id √ó F)-
coalgebra.
Proof. Consider
an arbitrary F(Id √ó F)-algebra (C, œï).
Let œà
=
‚ü®œï, FfstC,F C ‚ü©: F(C √ó FC) ‚ÜíC √ó FC, g = Ô¨ÅxF,Œ±(œà) : A ‚ÜíC √ó FC
and f = fstC,F C ‚ó¶g : A ‚ÜíC. We show that Ô¨ÅxF (Id√óF ),F ‚ü®idA,Œ± ‚ü©‚ó¶Œ±(œï) = f.
That f is a F(Id√óF)-coalgebra-to-algebra morphism from (A, F‚ü®idA, Œ± ‚ü©‚ó¶
Œ±) to (C, œï) is evident from the commutation of the outer square in the dia-
gram
F(A √ó FA)
F (f√óF f)
"
F (g√óF g)

FA
F ‚ü®id,Œ± ‚ü©
o
F ‚ü®id,id ‚ü©
ulllllllllllllll
F g

A
Œ±
o
g

f
|
F(A √ó A)
F (id√óŒ±)
iTTTTTTTTTTTTTTT
F (g√óg)

F((C √ó FC)
√óF(C √ó FC))
F (fst√óF fst)

F (id√óœà)/ F((C √ó FC)
√ó(C √ó FC))
F (fst√ósnd)

F(C √ó FC)
F ‚ü®id,id ‚ü©
o
œà
/ C √ó FC
fst

F(C √ó FC)
F(C √ó FC)
F(C √ó FC)
œï
/ C
To verify that f is unique, suppose that f ‚Ä≤ is another F(Id √ó F)-
coalgebra-to-algebra morphism from (A, F‚ü®idA, Œ± ‚ü©‚ó¶Œ±) to (C, œï).
Then
‚ü®f ‚Ä≤, Ff ‚Ä≤ ‚ó¶Œ± ‚ü©
=
‚ü®œï ‚ó¶F‚ü®f ‚Ä≤, Ff ‚Ä≤ ‚ó¶Œ± ‚ü©‚ó¶Œ±, F(fstC,F C ‚ó¶‚ü®f ‚Ä≤, Ff ‚Ä≤ ‚ó¶Œ± ‚ü©) ‚ó¶Œ± ‚ü©
=
‚ü®œï, FfstC,F C ‚ü©‚ó¶F‚ü®f ‚Ä≤, Ff ‚Ä≤ ‚ó¶Œ± ‚ü©‚ó¶Œ± = œà ‚ó¶F‚ü®f ‚Ä≤, Ff ‚Ä≤ ‚ó¶Œ± ‚ü©‚ó¶Œ± which tells us that
‚ü®f ‚Ä≤, Ff ‚Ä≤ ‚ó¶Œ± ‚ü©= Ô¨ÅxF,Œ±(œà) = g. As a consequence, f ‚Ä≤ = fstC,F C ‚ó¶‚ü®f ‚Ä≤, Ff ‚Ä≤ ‚ó¶Œ± ‚ü©=
fstC,F C ‚ó¶g = f.
2
The following two transposition propositions appeared in Eppendahl [9,10].
Proposition 3.9 Let F, G : C ‚ÜíC be functors and œÑ : F
.‚ÜíG a natural
transformation.
(a) If (A, Œ±) is a F-coalgebra and (C, œï) is a G-algebra, then f : A ‚ÜíC
8

Capretta, Uustalu, Vene
is a G-coalgebra-to-algebra morphism from (A, œÑA ‚ó¶Œ±) to (C, œï) iÔ¨Äit is a F-
coalgebra-algebra morphism from (A, Œ±) to (C, œï ‚ó¶œÑC).
(b) If an F-coalgebra (A, Œ±) is recursive, then the G-coalgebra (A, œÑA ‚ó¶Œ±)
is recursive.
Proof. (a) Immediate from œï ‚ó¶Gf ‚ó¶œÑA ‚ó¶Œ± = œï ‚ó¶œÑC ‚ó¶Ff ‚ó¶Œ±.
(b) For any G-algebra (C, œï), the unique F-coalgebra-to-algebra morphism
from (A, Œ±) to (C, œï ‚ó¶œÑC) is also a unique G-coalgebra-to-algebra morphism
from (A, œÑA ‚ó¶Œ±) to (C, œï).
2
Proposition 3.10 Let F : C ‚ÜíD and G : D ‚ÜíC be functors.
(a) If (A, Œ±) is an GF-coalgebra and (C, œï) is a FG-algebra, then there
is a bijection between FG-coalgebra-to-algebra morphisms from (FA, FŒ±) to
(C, œï) and GF-coalgebra-to-algebra morphisms from (A, Œ±) to (GC, Gœï).
(b) If (A, Œ±) is a recursive GF-coalgebra, then (FA, FŒ±) is a recursive
FG-coalgebra.
Proof. (a) For a GF-coalgebra-to-algebra morphism f
from (A, Œ±) to
(GC, Gœï), set f ‚ãÜ= œï ‚ó¶Ff : FA ‚ÜíC.
For an FG-coalgebra-to-algebra
morphism g from (FA, FŒ±) to (C, œï), set g‚Ä† = Gg ‚ó¶Œ± : A ‚ÜíGC. Now f ‚ãÜ
is an FG-coalgebra morphism from (FA, FŒ±) to (C, œï) since f ‚ãÜ= œï ‚ó¶Ff =
œï‚ó¶F(G(œï‚ó¶Ff)‚ó¶Œ±) = œï‚ó¶F(Gf ‚ãÜ‚ó¶Œ±) and similarly g‚Ä† is a GF-coalgebra mor-
phism from (A, Œ±) to (GC, Gœï). Further, (f ‚ãÜ)‚Ä† = Gf ‚ãÜ‚ó¶Œ± = G(œï‚ó¶Ff)‚ó¶Œ± = f
and similarly (g‚Ä†)‚ãÜ= g.
(b) If (C, œï) is a FG-coalgebra, then the unique GF-coalgebra-to-algebra
morphism from (A, Œ±) to (GC, Gœï) is also a unique FG-coalgebra-to-algebra
morphism from (FA, FŒ±) to (C, œï).
2
The following proposition builds on Props. 3.9, 3.10.
Proposition 3.11 Let F : C ‚ÜíC, G : D ‚ÜíD be functors, L : C ‚ÜíD a
functor with a right adjoint, and œÑ : LF
.‚ÜíGL a natural transformation. If
(A, Œ±) is a recursive F-coalgebra, then (LA, œÑA‚ó¶LŒ±) is a recursive G-coalgebra.
Proof. Let R be the right adjoint of L and Œ∑ : Id
.‚ÜíRL and Œµ : LR
.‚ÜíId
the unit resp. counit of the adjunction. Let Œª(¬∑) denote the natural bijection
between the homsets C(L‚àí, =) and C(‚àí, R=). Now, let Œ≤ = Œª(œÑA ‚ó¶LŒ±) =
R(œÑA ‚ó¶LŒ±) ‚ó¶Œ∑A = RœÑA ‚ó¶Œ∑F A ‚ó¶Œ± : A ‚ÜíRGLA.
According to Prop. 3.9, the RGL-coalgebra (A, Œ≤) is recursive. But then
by Prop. 3.10, the LRG-coalgebra (LA, LŒ≤) is recursive. By Prop. 3.9 once
more, the G-coalgebra (LA, ŒµGLA‚ó¶LŒ≤) is recursive. But ŒµGLA‚ó¶LŒ≤ = Œª‚àí1(Œ≤) =
Œª‚àí1(Œª(œÑA ‚ó¶LŒ±)) = œÑA ‚ó¶LŒ±.
2
9

Capretta, Uustalu, Vene
We conclude this section by brieÔ¨Çy looking at two useful strengthenings of
the notion of recursiveness, which we call strong recursiveness and (for the time
being, for the lack of a better name) very recursiveness. Strong recursiveness
relates to recursiveness for coalgebras as allowing strong iteration (iteration
with parameters) relates to allowing iteration (i.e., initiality) for algebras.
DeÔ¨Ånition 3.12 (strongly recursive coalgebra) Let C be cartesian and
F : C ‚ÜíC a functor with a strength œÉ. An F-coalgebra (A, œï) is strongly re-
cursive (or recursive with parameters) iÔ¨Ä, for any object Œì of C and F-algebra
(C, œï), there is a unique morphism f : Œì √ó A ‚ÜíC, denoted sÔ¨ÅxF,Œì,Œ±(œï),
satisfying
F(Œì √ó A)
F f

Œì √ó FA
œÉŒì,A
o
Œì √ó A
idŒì√óŒ±
o
f

FC
œï
/ C
It is immediate that an F-coalgebra (A, Œ±) is strongly recursive iÔ¨Ä, for any
object Œì, the F-coalgebra (Œì √ó A, œÉŒì,A ‚ó¶(idŒì √ó Œ±)) is recursive.
A strongly recursive F-coalgebra (A, Œ±) is also a recursive F-coalgebra:
for an F-algebra (C, œï), Ô¨ÅxF,Œ±(œï) = sÔ¨ÅxF,1,Œ±(œï) ‚ó¶‚ü®!A, idA ‚ü©. For the converse
to hold, it is suÔ¨Écient that C is cartesian closed: if (A, Œ±) is a recursive F-
coalgebra, then, for any object Œì, by Prop. 3.11 for D = C, G = F, L = KŒì√óId,
œÑ = œÉŒì, the F-coalgebra (Œì √ó A, œÉŒì,A ‚ó¶(idŒì √ó Œ±)) is recursive.
An object A is the carrier of a Ô¨Ånal strongly recursive F-coalgebra iÔ¨Äit is
the carrier of a strongly initial F-algebra.
Very recursiveness is roughly in the same position wrt. recursiveness for
coalgebras as allowing primitive recursion is wrt. initiality for algebras. The
new work of Ad¬¥amek, Milius and Velebil [19,3] on the free completely iterative
(resp. iterative) monad of a functor (elaborating on their original approach in
[1,2]) is centered around the dual concept (resp. a Ô¨Ånitary version of it).
DeÔ¨Ånition 3.13 (very recursive coalgebra) Let C be cartesian and F :
C ‚ÜíC a functor. An F-coalgebra (A, Œ±) is very recursive iÔ¨Ä, for any (KA√óF)-
algebra (C, œï), there is a unique morphism f : A ‚ÜíC, denoted vÔ¨ÅxA,Œ±(œï),
satisfying
A √ó FA
idA√óF f

A
f

‚ü®idA,Œ± ‚ü©
o
A √ó FC
œï
/ C
An F-coalgebra (A, Œ±) is very recursive iÔ¨Äthe (KA √ó F)-coalgebra
(A, ‚ü®idA, Œ± ‚ü©) is recursive.
A very recursive F-coalgebra (A, Œ±) is necessar-
ily recursive: for an F-algebra (C, œï), Ô¨ÅxF,Œ±(œï) = vÔ¨ÅxF,Œ±(œï‚ó¶sndA,F C). But not
every recursive coalgebra is very recursive.
10

Capretta, Uustalu, Vene
The concept of very recursive coalgebras and its dual are elegant and useful
because of the following fact whose dual is central in [19].
Proposition 3.14 For any object X, an object DX is the carrier of a cofree
very recursive F-coalgebra over X iÔ¨ÄDX is the carrier of an initial (KX √óF)-
algebra.
With ‚Äòvery recursive‚Äô replaced with ‚Äòrecursive‚Äô, this equivalence is valid in
the degenerate case X = 1 (an object A carries a Ô¨Ånal recursive F-coalgebra
iÔ¨Äit carries an initial F-algebra), but not generally.
4
Recursive coalgebras from comonads
We shall now proceed to more powerful suÔ¨Écient conditions for a coalgebra
being recursive. These are based on comonads, comonad-algebras and dis-
tributive laws of a functor over a comonad. We recall the deÔ¨Ånitions.
DeÔ¨Ånition 4.1 (comonad) A comonad on a category C is a functor D : C ‚Üí
C together with natural transformations Œµ : D
.‚ÜíId (counit) and Œ¥ : D
.‚ÜíD2
(comultiplication) satisfying, for any object X,
DX
Œ¥X

Œ¥X /
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
I
D2X
ŒµDX

D2X
DŒµX / DX
DX
Œ¥X

Œ¥X / D2X
Œ¥DX

D2X
DŒ¥X / D3X
DeÔ¨Ånition 4.2 (coalgebra of a comonad) A coalgebra of a
comonad
(D, Œµ, Œ¥) on C is a coalgebra (A, ƒ±) of the functor D satisfying
A
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
C
ƒ±
/ DA
ŒµA

A
A
ƒ±

ƒ±
/ DA
Œ¥A

DA
Dƒ± / D2A
DeÔ¨Ånition 4.3 (distributive law over a comonad) A distributive law of
a functor F : C ‚ÜíC over a comonad (D, Œµ, Œ¥) on C is a natural transformation
Œ∫ : FD
.‚ÜíDF satisfying, for any object X,
FDX
F ŒµX

Œ∫X / DFX
ŒµF X

FX
FX
FDX
F Œ¥X

Œ∫X
/ DFX
Œ¥F X

FD2X
Œ∫DX / DFDX
DŒ∫X / D2FX
We present three theorems, each saying that a coalgebra constructed in a
certain fashion from a coalgebra known to be recursive is recursive as well.
We begin by the main theorem, which uses a general comonad.
11

Capretta, Uustalu, Vene
Theorem 4.4 Let F : C ‚ÜíC be a functor, (A, Œ±) a recursive F-coalgebra,
D = (D, Œµ, Œ¥) a comonad on C and (A, ƒ±) a D-coalgebra. If Œ∫ is a distributive
law of F over D satisfying
FA
F ƒ±

A
ƒ±

Œ±
o
FDA
Œ∫A / DFA
DA
DŒ±
o
(‚àó)
then (A, Fƒ± ‚ó¶Œ±) is a recursive FD-coalgebra (and, consequently, by Prop. 3.9,
(A, DŒ± ‚ó¶ƒ±) is a recursive DF-coalgebra).
It might make sense to deÔ¨Åne that the data (A, Œ±, ƒ±) form, say, a dicoalgebra
of (F, D, Œ∫) iÔ¨Äthey meet the condition (*) and to then develop a theory of
functor-comonad-dicoalgebras (cf. the functor-functor-bialgebras of Turi and
Plotkin [26] or the monad-functor-bialgebras of [4,7]), but we have chosen not
to speciÔ¨Åcally pursue this line here, as we will not need many properties of
dicoalgebras.
Proof. Consider any FD-algebra (C, œï). Let œà = Dœï ‚ó¶Œ∫DC ‚ó¶FŒ¥C : FDC ‚Üí
DC, g = Ô¨ÅxF,Œ±(œà) : A ‚ÜíDC and f = ŒµC ‚ó¶g : A ‚ÜíC. We show that (i) f is
a FD-coalgebra-to-algebra morphism from (A, Fƒ± ‚ó¶Œ±) to (C, œï) and (ii) it is
the only one, i.e., Ô¨ÅxF D,F ƒ±‚ó¶Œ±(œï) = f.
Proof of (i): We Ô¨Årst notice that Dg‚ó¶ƒ± = Ô¨ÅxF,Œ±(Dœà‚ó¶Œ∫DC) = Œ¥C ‚ó¶g. This is
witnessed by the commutation of the outer squares in the following diagrams.
FA
F ƒ±

A
Œ±
o
ƒ±

FDA
Œ∫A
/
F Dg

DFA
DF g

DA
DŒ±
o
Dg

FD2C
Œ∫DC / DFDC
Dœà
/ D2C
FA
F g

A
Œ±
o
g

FDC
œà
,
F Œ¥C
/
F Œ¥C

FD2C
Œ∫DC
/
F Œ¥DC

DFDC Dœï
/
Œ¥F DC

DC
Œ¥C

FD3C
Œ∫D2C
&N
N
N
N
N
N
N
N
N
N
N
FD2C
Œ∫DC /
F DŒ¥C
8r
r
r
r
r
r
r
r
r
r
DFDC
Dœà
2
DF Œ¥C/ DFD2C
DŒ∫DC/ D2FDC
D2œï
/ D2C
12

Capretta, Uustalu, Vene
Now the desired equality f = œï‚ó¶F(Df ‚ó¶ƒ±)‚ó¶Œ± is witnessed by the commutation
of the outer square in the diagram
FDA
F Df

F Dg

FA
F ƒ±
o
F g

A
Œ±
o
g

f

FD2C
F DŒµC

FDC
œà
+
F Œ¥C
o
F Œ¥C
/ FD2C
F ŒµDC

Œ∫DC / DFDC
ŒµF DC

Dœï
/ DC
ŒµC

FDC
FDC
FDC
FDC
œï
/ C
Proof of (ii): Suppose f ‚Ä≤ is a FD-coalgebra-to-algebra morphism from
(A, Fƒ± ‚ó¶Œ±) to (C, œï). We observe that the commuting outer square in the
following diagram proves that g = Ô¨ÅxF,Œ±(œà) = Df ‚Ä≤ ‚ó¶ƒ±.
FA
F ƒ±

F ƒ±
%K
K
K
K
K
K
K
K
K
K
A
ƒ±

Œ±
o
FDA
F Dƒ±

Œ∫A
/ DFA
DF ƒ±

DA
Df‚Ä≤

DŒ±
o
FDA
F Df‚Ä≤

F Œ¥A / FD2A
F D2f‚Ä≤

Œ∫DA / DFDA
DF Df‚Ä≤

FDC
œà
3
F Œ¥C / FD2C
Œ∫DC / DFDC
Dœï
/ DC
It follows that f ‚Ä≤ = f ‚Ä≤ ‚ó¶ŒµA ‚ó¶ƒ± = ŒµC ‚ó¶Df ‚Ä≤ ‚ó¶ƒ± = ŒµC ‚ó¶g = f.
2
Theorem 4.4 provides a powerful generalization of the central theorem in
[27], which was on structured recursion schemes for initial algebras derivable
from comonads (cf. also the dual result stated in [4,7]; we note that in [28],
the substitution and solution theorems of [20,1] were proved from this result).
Indeed, the theorem of [27] is just a special case of Theorem 4.4 now.
Corollary 4.5 Let F : C ‚ÜíC be a functor with an initial algebra and
D = (D, Œµ, Œ¥) a comonad on C.
If Œ∫ is a distributive law of F over D,
then (¬µF, FItF( DinF ‚ó¶Œ∫¬µF ) ‚ó¶in‚àí1
F ) is a recursive FD-coalgebra.
Proof. It is easy to check that (¬µF, ItF( DinF ‚ó¶Œ∫¬µF )) is a D-coalgebra. It
is also immediate that it relates appropriately to the recursive F-coalgebra
(¬µF, in‚àí1
F ) via Œ∫. Hence, by Theorem 4.4, (¬µF, FItF( DinF ‚ó¶Œ∫¬µF ) ‚ó¶in‚àí1
F ) is a
recursive FD-coalgebra.
2
We learn that the result in [27] was provable not so much because of the
initiality of the initial F-algebra (¬µF, inF) as it was because of the recursiveness
of its inverse F-coalgebra (¬µF, in‚àí1
F ): the coalgebra (¬µF, in‚àí1
F ) can be replaced
13

Capretta, Uustalu, Vene
by a recursive coalgebra (A, Œ±) to obtain a more general statement whereas
one cannot replace (¬µF, inF) with some other algebra.
A useful class of comonads are comonads cofree over a functor. For a func-
tor H which has a cofree comonad, let us agree to write DH = (DH, ŒµH, Œ¥H)
for this comonad and œÉH for the extraction of H from DH. We recall the well
known fact that DH sends an object X to the carrier of a cofree H-coalgebra
over X. We write Œ∏H
X for the structure map of this coalgebra. For the unique
coalgebra morphism from an H-coalgebra (C, œï) to (DHX, Œ∏H
X) that sends a
morphism œá : C ‚ÜíX to ŒµH
X : DHX ‚ÜíX, we write genH
X(œá, œï). For any
object X, œÉH
X = HŒµH
X ‚ó¶Œ∏H
X : DHX ‚ÜíHX. For any H-coalgebra (C, œï), object
X and morphism œá : C ‚ÜíX, œÉH
X ‚ó¶genH
X(œá, œï) = Hœá ‚ó¶œï : C ‚ÜíHX.
For cofree comonads, by specializing Theorem 4.4, we obtain our second
theorem.
Theorem 4.6 Let F : C ‚ÜíC be a functor, (A, Œ±) a recursive F-coalgebra,
H : C ‚ÜíC a functor with a cofree comonad and (A, Ôöæ) a H-coalgebra. If
Œª : FDH
.‚ÜíHF is a natural transformation satisfying
FA
F ¬ØÔöæ

A
Ôöæ

Œ±
o
FDHA
ŒªA
/ HFA
HA
HŒ±
o
where ¬ØÔöæ= genH
A(idA, Ôöæ), then (A, F ¬ØÔöæ‚ó¶Œ±) is a recursive FDH-coalgebra (and,
consequently, (A, HŒ± ‚ó¶Ôöæ) is a recursive HF-coalgebra).
Proof. DeÔ¨Åne a natural transformation ¬ØŒª : FDH
.‚ÜíDHF by ¬ØŒªX
=
genH
F X(FŒµH
X, ŒªDHX ‚ó¶FŒ¥H
X).
It is easy to verify (these are standard lifting
results) that (A, ¬ØÔöæ) is a DH-coalgebra and ¬ØŒª a distributive law of F over DH.
The commutation of the outer triangles and squares in the following diagrams
gives us that DHŒ± ‚ó¶¬ØÔöæ= genH
F A(Œ±, Ôöæ) = ¬ØŒªA ‚ó¶F ¬ØÔöæ‚ó¶Œ±.
A
ttttttttttt
ttttttttttt
¬ØÔöæ

Ôöæ
/ HA
H¬ØÔöæ

A
Œ±

DHA
ŒµH
A
o
DHŒ±

Œ∏H
A
/ HDHA
HDHŒ±

FA
DHFA
ŒµH
F A
o
Œ∏H
F A / HDHFA
14

Capretta, Uustalu, Vene
A
Œ±

Ôöæ
/ HA
HŒ±

FA
vvvvvvvvvv
vvvvvvvvvv
F ¬ØÔöæ

F ¬ØÔöæ
/ FDHA
F DH¬ØÔöæ

ŒªA
/ HFA
HF ¬ØÔöæ

FA
FDHA
F ŒµH
A
o
¬ØŒªA

F Œ¥H
A/ F(DH)2A
ŒªDHA/ HFDHA
H¬ØŒªA

FA
DHFA
ŒµH
F A
o
Œ∏H
F A
/ HDHFA
Therefore, by Theorem 4.4 (taking D = DH, ƒ± = ¬ØÔöæ, Œ∫ = ¬ØŒª), we get that
(A, F ¬ØÔöæ‚ó¶Œ±) is a recursive FDH-coalgebra.
2
Our third theorem, where the cofree comonad does not appear manifestly,
but is nonetheless present in the background, is a consequence from Theo-
rem 4.6.
Theorem 4.7 Let F : C ‚ÜíC be a functor, (A, Œ±) a recursive F-coalgebra,
H : C ‚ÜíC a functor with a cofree comonad and (A, Ôöæ) a H-coalgebra. If
Œª‚Ä≤ : FH
.‚ÜíHF is a natural transformation satisfying
FA
F Ôöæ

A
Ôöæ

Œ±
o
FHA
Œª‚Ä≤
A / HFA
HA
HŒ±
o
then (A, FÔöæ‚ó¶Œ±) is a recursive FH-coalgebra.
Proof. DeÔ¨Åne a natural transformation Œª : FDH
.‚ÜíHF by ŒªX = Œª‚Ä≤
X ‚ó¶FœÉH
X.
We get that ŒªA ‚ó¶F ¬ØÔöæ= Œª‚Ä≤
A ‚ó¶F(œÉH
A ‚ó¶genH
A (idA, Ôöæ)) = Œª‚Ä≤
A ‚ó¶F(HidA ‚ó¶Ôöæ) = Œª‚Ä≤
A ‚ó¶FÔöæ.
Hence, by Theorem 4.6, (A, F ¬ØÔöæ‚ó¶Œ±) is a recursive FDH-coalgebra.
Now consider an arbitrary FH-algebra (C, œï).
Let œà = œï ‚ó¶FœÉH
C
:
FDHC ‚ÜíC. The following diagram witnesses that a morphism f : A ‚ÜíC
is a FH-coalgebra-to-algebra morphism from (A, FÔöæ‚ó¶Œ±) to (C, œï) iÔ¨Äit is a
FDH-coalgebra-to-algebra morphism from (A, F ¬ØÔöæ‚ó¶Œ±) to (C, œà).
FDHA
F DHf

F œÉH
A
/ FHA
F Hf

FA
F ¬ØÔöæ
u
F Ôöæ
o
A
f

Œ±
o
FDHC
œà
4
F œÉH
C / FHC
œï
/ C
Hence (A, FÔöæ‚ó¶Œ±) is a recursive FH-coalgebra, with Ô¨ÅxF H,F Ôöæ‚ó¶Œ±(œï)
=
Ô¨ÅxF DH,F ¬ØÔöæ‚ó¶Œ±(œà).
2
15

Capretta, Uustalu, Vene
Prop. 3.8 is now immediate provided that there is a cofree comonad for the
functor Id √ó F: Given a recursive F-coalgebra (A, Œ±), the recursiveness of the
F(Id √ó F)-coalgebra (A, F‚ü®idA, Œ± ‚ü©‚ó¶Œ±) is the conclusion of Theorem 4.7 for
H = Id √ó F, Ôöæ= ‚ü®idA, Œ± ‚ü©and Œª‚Ä≤
X = ‚ü®FfstX,F X, FsndX,F X ‚ü©: F(X √ó FX) ‚Üí
FX √ó F 2X.
5
Conclusions and future work
We have motivated the relevance of recursive functor-coalgebras for program-
ming: the recursiveness of the coalgebra appearing in a structured general-
recursion equation is a suÔ¨Écient condition for its solvability. Since there is no
practical general method for checking whether a given coalgebra is recursive,
one should strive for useful suÔ¨Écient conditions. We have shown how to use
comonads, comonad-coalgebras and distributive laws to construct new recur-
sive coalgebras from coalgebras already known to be recursive. These results
provide a signiÔ¨Åcant generalization (and modularization of the proofs) of the
results of [27] on structured recursion schemes for initial algebras. By duality,
they also generalize the dual results of [4,7].
This paper reports only our Ô¨Årst results on recursive coalgebras and most
of our questions are unanswered yet. Apart from checking whether the the-
orems of Section 4 can be strengthened in some useful ways, e.g. along the
lines considered in [4] (modulo the duality) (replacing the assumption about
the existence of a cofree comonad over H in Theorem 4.7 by some weaker con-
dition), we would like to take a closer look at wellfounded induction. Taylor
[24] has shown that a functor-algebra is recursive iÔ¨Äit is wellfounded in the
sense of his categorical notion, but only for Set (or an elementary topos) and
for functors preserving monos and inverse image diagrams. We would like to
Ô¨Ånd out weaker useful conditions under which the implications in each direc-
tion remain valid. Finally, we are interested in seeing if the results admit any
useful type-theoretic versions. One might wish to be able to turn the struc-
tured general recursion scheme of a recursive coalgebra into a reduction rule
in a typed lambda calculus without giving rise to non-terminating reduction
sequences of welltyped terms. The questions are when this is possible and how
to accomplish it.
References
[1] P. Aczel, J. Ad¬¥amek, S. Milius, J. Velebil, InÔ¨Ånite trees and completely iterative
theories: A coalgebraic view, Theoret. Comput. Sci. 300 (1‚Äì3) (2003) 1‚Äì45.
[2] J. Ad¬¥amek, S. Milius, J. Velebil, Free iterative theories: A coalgebraic view,
Math. Struct. in Comput. Sci. 13 (2) (2003) 259‚Äì320.
16

Capretta, Uustalu, Vene
[3] J. Ad¬¥amek, S. Milius, J. Velebil, From iterative algebras to iterative theories,
in this volume.
[4] F. Bartels, Generalised coinduction, Math. Struct. in Comput. Sci. 13 (2) (2003)
321‚Äì348.
[5] A. Bove, V. Capretta, Nested general recursion and partiality in type theory,
in: R. J. Boulton, P. B. Jackson (Eds.), Proc. of 14th Int. Conf. on Theorem
Proving in Higher Order Logics, TPHOLs 2001 (Edinburgh, Sept. 2001), Vol.
2152 of Lecture Notes in Comput. Sci., Springer-Verlag, 2001, pp. 121‚Äì135.
[6] A. Bove, V. Capretta, Modelling general recursion in type theory, submitted to
Math. Struct. in Comput. Sci. (Feb. 2003).
[7] D. Cancila, F. Honsell, M. Lenisa, Generalized coiteration schemata, in: H. P.
Gumm (Ed.), Proc. of 6th Wksh. on Coalgebraic Methods in Computer Science,
CMCS‚Äô03 (Warsaw, Apr. 2003), Vol. 82(1) of Electron. Notes in Theoret.
Comput. Sci., Elsevier, 2003.
[8] H. Doornbos, R. Backhouse, Mathematics of recursive program construction,
draft manuscript (Jul. 2001).
[9] A. Eppendahl, Coalgebra-to-algebra morphisms, in: M. Hofmann, G. Rosolini,
D. Pavlovi¬¥c (Eds.), Proc. of 8th Int. Conf. on Category Theory and Computer
Science, CTCS‚Äô99 (Edinburgh, Sept. 1999), Vol. 29 of Electron. Notes in
Theoret. Comput. Sci., Elsevier, 1999.
[10] A. Eppendahl, Fixed point objects corresponding to Freyd algebras, manuscript
(May 2000).
[11] M. Escard¬¥o, A. K. Simpson, A universal characterization of the closed euclidean
interval, in: Proc. of 16th Ann. IEEE Symp. on Logic in Computer Science,
LICS‚Äô01 (Boston, June 2001), IEEE CS Press, 2001, pp. 115‚Äì128.
[12] P. J. Freyd, Algebraically complete categories, in: A. Carboni, M. C. Pedicchio,
G. Rosolini (Eds.), Proc. of Int. Conf. on Category Theory ‚Äô90, CT‚Äô90 (Como,
July 1990), Vol. 1488 of Lecture Notes in Math., Springer-Verlag, 1991, pp.
95‚Äì104.
[13] P. J. Freyd, Recursive types reduced to inductive types, in: Proc. of 5th IEEE
Ann. Symp. on Logic in Computer Science, LICS‚Äô90 (Philadelphia, PA, June
1990), IEEE CS Press, 1990, pp. 498‚Äì507.
[14] P. J. Freyd, Remarks on algebraically compact categories, in: M. P. Fourman,
P. T. Johnstone, A. M. Pitts (Eds.), Applications of Categories in Computer
Science, Vol. 177 of LMS Lecture Note Series, Cambridge Univ. Press, 1992,
pp. 95‚Äì106.
[15] E. Gim¬¥enez,
Codifying guarded deÔ¨Ånitions with recursion schemes, in:
P. Dybjer, B. Nordstr¬®om (Eds.), Selected Papers from 2nd Int. Wksh. on Types
for Proofs and Programs, TYPES‚Äô94 (BÀöastad, June 1994), Vol. 996 of Lecture
Notes in Comput. Sci., Springer-Verlag, 1995, pp. 39‚Äì59.
17

Capretta, Uustalu, Vene
[16] E. Gim¬¥enez, Structural recursive deÔ¨Ånitions in type theory, in: K. G. Larsen,
S. Skyum, G. Winskel (Eds.), Proc. of 25th Int. Coll. on Automata, Languages
and Programming, ICALP‚Äô98 (Aalborg, July 1998), Vol. 1443 of Lecture Notes
in Comput. Sci., Springer-Verlag, Berlin, 1998, pp. 397‚Äì408.
[17] C. McBride, J. McKinna, The view from the left, J. of Funct. Prog. 14 (1)
(2004) 69‚Äì111.
[18] E. Meijer, M. Fokkinga, R. Paterson, Functional programming with bananas,
lenses, envelopes and barbed wire, in: J. Hughes (Ed.), Proc. of 5th ACM Conf.
on Functional Programming Languages and Computer Architecture, FPCA‚Äô91
(Cambridge, MA, Aug. 1991), Vol. 523 of Lecture Notes in Comput. Sci.,
Springer-Verlag, 1991, pp. 124‚Äì144.
[19] S. Milius, Working with the CIA‚Äîcompletely iterative monads revisited,
manuscript (Nov. 2003).
[20] L. S. Moss, Parametric corecursion, Theoret. Comput. Sci. 260 (1‚Äì2) (2001)
139‚Äì163.
[21] E. Nelson, Iterative algebras, Theoret. Comput. Sci. 25 (1983) 67‚Äì94.
[22] G. Osius, Categorical set theory: A characterisation of the category of sets, J.
of Pure and Appl. Algebra 4 (1974) 79‚Äì119.
[23] P. Taylor, Intuitionistic sets and ordinals, J. of Symb. Logic 61 (3) (1996) 705‚Äì
744.
[24] P. Taylor, Towards a uniÔ¨Åed treatment of induction, I: The general recursion
theorem, unÔ¨Ånished draft manuscript (Aug. 1996).
[25] P. Taylor, Practical Foundations of Mathematics, Cambridge Studies in
Advanced Mathematics, Cambridge Univ. Press, 1999.
[26] D. Turi, G. D. Plotkin, Towards a mathematical operational semantics, in: Proc.
of 12th Ann. IEEE Symp. on Logic in Computer Science, LICS‚Äô97 (Warsaw,
June/July 1997), IEEE CS Press, 1997, pp. 280‚Äì291.
[27] T. Uustalu, V. Vene, A. Pardo, Recursion schemes from comonads, Nordic J.
of Computing 8 (3) (2001) 366‚Äì390.
[28] T. Uustalu, V. Vene, The dual of substitution is redecoration, in: K. Hammond,
S. Curtis (Eds.), Trends in Functional Programming 3, Intellect, 2002, pp. 99‚Äì
110.
18

