©2019 MathByte Academy

Inheritance
à fundamental concept in object oriented programming
à classes define properties and methods
à they can form a natural hierarchy
Shape
Polygon
Ellipse
Circle
Quadrilateral
Triangle
Rectangle
Square
Isosceles
Equilateral
IS-A relationships
characteristics (state and behavior)
à inherit
à override
à extend
(e.g. translate center pt)
(e.g. # sides in triangle)
(e.g. # sides in polygon)
Line
©2019 MathByte Academy

single inheritance à single parent
Terminology
Student inherits from Person
Student is a subclass of Person
Student subclasses Person
Student extends Person
Student is a child of Person
Person is a parent of Student
Parent
Children
Person
-
name
-
eat()
Student
-
study()
Teacher
-
teach()
Student derives from Person
©2019 MathByte Academy

Instances
Objects that are created from a class are called instances of that class
s1 = Student()
t1 = Teacher()
p1 = Person()
s1 is a Student
à Student inherits from Person
à s1 is a Person
à but p1 is not a Student
p1 is a Person
à s1 is not a Teacher
à but p1 is not a Teacher
Person
Student
Teacher
à s1 is an instance of Student
à s1 is an instance of Person
©2019 MathByte Academy

à s1 is not a Teacher
s1 = Student()
t1 = Teacher()
p1 = Person()
Person
Student
Teacher
à s1 is an instance of Student
à s1 is an instance of Person
isinstance() vs type()
isinstance(s1, Student) à True
isinstance(s1, Person) à True
isinstance(s1, Teacher) à False
à p1 is not a Student
isinstance(p1, Student) à False
type(instance)
à returns the class the instance was created from
type(s1) à Student
type(t1) à Teacher
type(p1) à Person
©2019 MathByte Academy

isinstance() vs type()
à more often use isinstance() rather than type()
why?
à often more concerned whether an object has certain behaviors
Let's say we want to call the eat() method of an object if it has one
we could do this:
if type(obj) is Person:
obj.eat()
à but if obj is a Student (or Teacher), this won't call its eat() method
if type(obj) in [Person, Student, Teacher]:
obj.eat()
Much simpler to use isinstance():
if isinstance(obj, Person):
obj.eat()
tip: when using isinstance, try to use the least restrictive parent class you actually need
Instead we could write:
©2019 MathByte Academy

The issubclass() function
Used to inspect inheritance relationships between classes (not instances)
Person
Student
Teacher
CollegeStudent
HighSchoolStudent
issubclass(Student, Person)
à True
issubclass(CollegeStudent, Student)
à True
issubclass(CollegeStudent, Person)
à True
issubclass(Student, Teacher)
issubclass(Person, Student)
à False
à False
Note:
à Person is a parent of Student
à Person is an ancestor of CollegeStudent
à Person is not a parent of CollegeStudent
à parent is a direct relationship
à subclass is not necessarily direct
©2019 MathByte Academy

Defining Subclasses
class Person:
pass
class Student(Person):
pass
class Teacher(Person):
pass
class CollegeStudent(Student):
pass
class HighSchoolStudent(Student):
pass
what about this one?
is it inheriting from nothing?
à the object class
(we'll come back to this)
©2019 MathByte Academy

Coding
©2019 MathByte Academy

