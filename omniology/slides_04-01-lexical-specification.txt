Alex Aiken 
Compilers 
Lexical Specification 

Alex Aiken 
Lexical Specification 
• At least one:  A+                                     AA* 
• Union:    A | B                             A + B 
• Option: A?  
 
           A +  
• Range:   ‘a’+’b’+…+’z’         [a-z] 
• Excluded range: 
             complement of [a-z]      [^a-z] 

Alex Aiken 
Lexical Specification 
• Last lecture: a specification for the predicate    
                              s  L(R)  
  
• Not enough! 

Alex Aiken 
Lexical Specification 
1. Write a rexp for the lexemes of each token class 
• Number = digit+ 
• Keyword = ‘if’ + ‘else’ + … 
• Identifier = letter (letter + digit)* 
• OpenPar = ‘(‘ 
• … 

Alex Aiken 
Lexical Specification 
2. Construct R, matching all lexemes for all tokens 
 
     R = Keyword + Identifier + Number + … 
        = R1 + R2 + …  

Alex Aiken 
Lexical Specification 
3. Let input be x1…xn 
For 1  i  n check 
             x1…xi  L(R)  
4. If success, then we know that 
 x1…xi  L(Rj) for some j 
5. Remove x1…xi from input and go to (3) 

Alex Aiken 
Lexical Specification 
 
• How much input is used?  
 

Alex Aiken 
Lexical Specification 
 
• Which token is used?  

Alex Aiken 
Lexical Specification 
 
• What if no rule matches? 
  
  

Alex Aiken 
Lexical Specification 
• Regular expressions are a concise notation for string patterns 
 
• Use in lexical analysis requires small extensions 
– To resolve ambiguities 
– To handle errors 
 
• Good algorithms known 
– Require only single pass over the input 
– Few operations per character (table lookup) 

