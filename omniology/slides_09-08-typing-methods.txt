Alex Aiken 
Compilers 
Typing Methods 

Alex Aiken 
Typing Methods 
 
O ` e0: T0 
O ` e1: T1 
. . . 
O ` en: Tn 
O ` e0.f(e1, … ,en): ? 
 
 
 
[Dispatch] 

Alex Aiken 
Typing Methods 
•
In Cool, method and object identifiers live in different 
name spaces 
–
A method foo and an object foo can coexist in the 
same scope 
 
•
In the type rules, this is reflected by a separate mapping 
M for method signatures 
M(C,f) = (T1,. . .Tn,Tn+1) 
means in class C there is a method f 
f(x1:T1,. . .,xn:Tn): Tn+1 

Alex Aiken 
Typing Methods 
 
O, M ` e0: T0 
O, M ` e1: T1 
. . . 
O, M ` en: Tn 
M(T0,f) = (T1’,. . .Tn’,Tn+1) 
Ti Ti’  for 1 i n 
O, M ` e0.f(e1, … ,en): Tn+1 
 
[Dispatch] 

Alex Aiken 
Typing Methods 
 
O, M ` e0: T0 
O, M ` e1: T1 
. . . 
O, M ` en: Tn 
T0 T 
M(T,f) = (T1’,. . .Tn’,Tn+1) 
Ti Ti’  for 1 i n 
O, M ` e0@T.f(e1, … ,en): Tn+1 
 
 
[Static Dispatch] 

Typing Methods 
Class Object 
Class Bool inherits Object 
Class Point inherits Object 
Class Line inherits Object 
Class Shape inherits Object { 
 setCenter(p: Point): Bool { 
  … 
 }; 
 … 
}; 
Class Quad inherits Shape 
Class Circle inherits Shape 
Class Rect inherits Quad 
Class Square inherits Rect 
Given the class definitions and method declaration 
at right, which of the following are valid types for 
the variables in the statement below? 
    z <- x.setCenter(y) 
x: Rect, y: Object, z: Bool 
x: Circle, y: Point, z: Bool 
x: Shape, y: Point, z: Bool 
x: Object, y: Object, z: Object 

Alex Aiken 
Typing Methods 
• The method environment must be added to all rules 
• In most cases, M is passed down but not actually 
used 
– Only the dispatch rules use M 
 
O   ` e1: Int   O   ` e2: Int   
O   ` e1 + e2 : Int 
 
 
[Add] 

Alex Aiken 
Typing Methods 
• For some cases involving SELF_TYPE, we need to 
know the class in which an expression appears 
 
• The full type environment for COOL: 
– A mapping O giving types to object id’s 
– A mapping M giving types to methods 
– The current class C 

Alex Aiken 
Typing Methods 
The form of a sentence in the logic is 
O,M,C ` e: T 
 
Example: 
O,M,C ` e1: Int   O,M,C ` e2: Int   
O,M,C ` e1 + e2 : Int 
 
[Add] 

Alex Aiken 
Typing Methods 
• The rules in this lecture are COOL-specific 
– Some other languages have very different rules 
 
• General themes 
– Type rules are defined on the structure of expressions 
– Types of variables are modeled by an environment 
 
• Warning: Type rules are very compact! 
 

