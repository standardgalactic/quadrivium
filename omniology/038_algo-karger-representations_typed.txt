Graph	  
Algorithms	  
Represen2ng	  
Graphs	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Tim	  Roughgarden	  
Graphs	  
Two ingredients 
•  Vertices aka nodes (V) 
•  Edges (E) = pairs of vertices 
•  can be undirected [unordered pair] 
or directed [ordered pair] (aka arcs) 
Examples: road networks, the Web, social networks, 
precedence constraints, etc. 

Tem
ver
Consider	  an	  undirected	  graph	  that	  has	  n	  ver2ces,	  no	  parallel	  edges,	  and	  is	  
connected	  (i.e.,	  “in	  one	  piece”).	  What	  is	  the	  minimum	  and	  maximum	  
number	  of	  edges	  that	  the	  graph	  could	  have,	  respec2vely	  ?	  

Tim	  Roughgarden	  
Sparse	  vs.	  Dense	  Graphs	  
Let  n = # of vertices,   m = # of edges. 
In most (but not all) applications, m is
  and  
•  in a “sparse” graph, m is or is close to 
•  in a “dense” graph, m is closer to   

Tim	  Roughgarden	  
The	  Adjacency	  Matrix	  
Represent G by a n x n  0-1 matrix A where  
Aij = 1  G has an i-j edge 
Variants 
•  Aij = # of i-j edges (if parallel edges) 
•  Aij = weight of i-j edge (if any) 
•  Aij =  +1 if 
 -1 if 
i
j

Tem
ver

Tim	  Roughgarden	  
Adjacency	  Lists	  
Ingredients 
•  array (or list) of vertices 
•  array (or list) of edges 
•  each edge points to its endpoints 
•  each vertex points to edges incident on it 

Tem
ver

Tim	  Roughgarden	  
Adjacency	  Lists	  
Ingredients 
•  array (or list) of vertices 
•  array (or list) of edges 
•  each edge points to its endpoints 
•  each vertex points to edges incident on it 
Space	  
one-to-one 
correspondence ! 
Question: which is better? 
Answer: depends on graph density and operations  
needed. 
This course: focus on adjacency lists. 

