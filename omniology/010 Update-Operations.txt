© 2019 MathByte Academy

Updating Sets
sets have no ordering
à no indexing
lists
à l[2] = 100
cannot do that with sets
we can add and remove elements
à mutates the set
we can create unions, intersections, differences and symmetric differences
à but these operations create new sets
list analogy
l1 = [1, 2, 3]
l2 = [4, 5, 6]
l1 + l2
à new list
[1, 2, 3, 4, 5, 6]
but
l1 += l2
à mutates l1
l1 à [1, 2, 3, 4, 5, 6]
© 2019 MathByte Academy

Analogous Set Mutating Updates
|=
&=
^=
-=
à all these operations mutate the left hand side
lists: l1 += l2
à appends l2 to l1
à mutates l1
à id of l1 has not changed
à method equivalents
s1 |= s2
s1 &= s2
s1 ^= s2
s1 -= s2
s1.update(s2)
s1.intersection_update(s2)
s1.difference_update(s2)
s1.symmetric_difference_update(s2)
can use iterables too
© 2019 MathByte Academy

Analogous Set Mutating Updates
s1 |= s2 | s3
s1 &= s2 & s3
s1 -= s2 – s3
s1.update(s2, s3)
s1.intersection_update(s2, s3)
s1.difference_update(s2, s3)
BEWARE!!
s1 ß (s1 – s2) – s3
is not the same as 
s1 = {1, 2, 3, 4}
s2 = {2, 3}
s3 = {3, 4}
s1 ß s1 – (s2 – s3)
s1 – s2 à {1, 4}
{1, 4} - s3 à {1}
s2 – s3 à {2}
{1, 2, 3, 4} – {2} à {1, 3, 4}
à set differences are not associative
à in general s1 – (s2 – s3) ≠(s1 – s2) – s3
RHS is evaluated first
© 2019 MathByte Academy

Code
© 2019 MathByte Academy

