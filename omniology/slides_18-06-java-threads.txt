Alex Aiken 
Compilers 
Java Threads 

Alex Aiken 
Java Threads 
• Java has concurrency built in through threads 
– Each thread has its own program counter & stack 
 
• Thread objects have class Thread 
– Start and stop methods 
 
• Synchronization obtains a lock on the object: 
synchronized (x) { e } 
• In synchronized methods, this is locked 

Alex Aiken 
Java Threads 
class Simple {  
 int a = 1, b = 2;  
 void to() { a = 3; b = 4; }  
 void fro() {println("a= " + a + ", b=" + b); }  
}  
 
Two threads call to() and fro().  What is printed? 

Alex Aiken 
Java Threads 
class Simple {  
 int a = 1, b = 2;  
 void synchronized to() { a = 3; b = 4; }  
 void fro() {println("a= " + a + ", b=" + b); }  
}  
 
Two threads call to() and fro().  What is printed? 

Alex Aiken 
Java Threads 
class Simple {  
 int a = 1, b = 2;  
 void synchronized to() { a = 3; b = 4; }  
 void synchronized fro() {println("a= " + a + ", b=" + b); }  
}  
 
Two threads call to() and fro().  What is printed? 
 

Alex Aiken 
Java Threads 
• Even without synchronization, a variable should only 
hold values written by some thread 
– Writes of values are atomic 
– Violated for doubles, though 
 
• Java concurrency semantics are difficult to 
understand in detail, particularly as to how they 
might be implemented on certain machines 

