
In Python, Strings (str) are immutable objects.
Once a string has been created, the contents of the object can never be changed
In this code:
my_var = ‘hello’
the only way to modify the “value” of my_var is to re-assign my_var to another object
my_var
hello
0x1000
abcd
0x1234

Immutable objects are safe from unintended side-effects
def process(s):
s = s + ‘ world’
return s
my_var = ‘hello’
Scopes
module scope
process() scope
my_var
hello
0x1000
s
hello 
world
0x1234
my_var’s reference is passed to process()
0x1000
process(my_var)
print(my_var)
hello
but watch out for immutable collection objects that contain mutable objects

Mutable objects are not safe from unintended side-effects
def process(lst):
lst.append(100)
my_list = [1, 2, 3]
process(my_list)
my_lists’s reference is passed to process()
Scopes
module scope
process() scope
my_list
1
2
3
0x1000
lst
100
print(my_list)
[1, 2, 3, 100]
0x1000

Immutable collection objects that contain mutable objects
def process(t):
t[0].append(3)
my_tuple = ([1,2], ‘a’)
process(my_tuple)
my_tuple’s reference is passed to process()
Scopes
module scope
process() scope
my_tuple
[1, 2]
‘a’
0x1000
t
print(my_tuple)
([1, 2, 3], ‘a’)
0x1000
[1, 2, 3]
‘a’
0x1000

