
DISCRETE MATHEMATICAL STRUCTURES
Part II: Algebraic Systems
Iwan G. Tabakow
Wroclaw University of Science and Technology
Poland
WUST Publishing House 
Wroclaw 2022

Cover design
Marcin Zawadzki
Printed in the camera ready form.
All rights are reserved. No part of this publication may be reproduced, stored in a retrieval system 
or transmitted in any form or by any means, electronic, mechanical, including photocopying, recording 
or any information retrieval system, without permission in writing form the publisher.
© Copyright by WUST Publishing House, Wroclaw 2022
WUST PUBLISHING HOUSE
Wybrzeze Wyspianskiego 27, 50-370 Wroclaw 
http://www.oficyna.pwr.edu.pl, ksiegarnia.pwr.edu.pl 
e-mail: oficwyd@pwr.edu.pl, zamawianie.ksiazek@pwr.edu.pl
ISBN 978-83-7493-221-9
Print and binding: beta-druk, www.betadruk.pl

In memory of my parents: 
Nikolina and Georgi.
In memory of my teachers: 
prof. dr. Ludwik Borkowski 
and prof. dr. Jerzy Bromirski

5
Contents
Preface 7
The used designations 9
Chapter I. Operations and algebraic systems 11
1. 
Operations 11
1.1. 
Two-argument operations 11
1.2. 
Boolean, multiple valued and fuzzy-logic 
operations 14
2. 
Algebraic systems 18
2.1. 
Algebraic system definition 18
2.2. 
Algebraic systems with one binary operation 20
2.3. 
Deletion rule 21
2.4. 
Lattices 22
2.5. 
Multiple valued and fuzzy algebraic systems 29
Chapter II. Homomorphisms, direct products and free 
algebraic systems 34
3. 
Homomorphisms 34
3.1. 
Epi-, mono-, iso-, endo- and automorphisms 
34
3.2. 
Congrujencies and quotient algebraic systems 36
3.3. 
Finite direct products 39
3.4. 
Free algebraic systems 41
4. 
Applications 42
4.1. 
Grammars and sequential machines 
42
4.2. 
Computability and recursion 43
4.3. 
Graph theory and Petri nets 43
4.4. 
Combinatorial analysis and probability theory 44
4.5. 
Number theory, Markov’s chains, coding 
44
4.6. 
Algorithm complexity 
45
Conclusions 46
References 46

7
“There is no any mathematical abstraction which 
would not be applicable at an earlier time or later 
time in practice”.
Nikolai Ivanovich Lobachevsky (1792 - 1856)
Preface
Discrete mathematical structures (in short: discrete structures), in particular such as mathematical logic and set 
theory, algebraic systems, formal languages, automata theory, graphs, number theory, coding theory, combinatorial 
analysis, discrete probability theory, Petri nets and so on, underpin a large amount of modern computer science. 
Discrete structures became a very large and dynamic science. Unfortunately, the speedy developments and 
knowledge in this area makes impossible the presentation of all notions, definitions and applications used here. 
This part is an extension of the previous one (i.e. a supplement / a separate work) and it is related to algebraic systems 
(considered as discrete mathematical structures).
Some basic notions concerning: operations and algebraic systems, lattices, multiple valued and fuzzy algebras, 
homomorphisms of algebraic systems (i.e. epimorphism, monomorphism, isomorphism, endomorphism and 
automorphism), congruencies, quotient algebraic systems, finite direct products of algebraic systems and free 
algebraic systems, grammars and sequential machines, algorithms, computability, recursion, graph theory and Petri 
nets, combinatorial analysis, probability theory, Markov’s chains, number theory, information, coding and 
algorithm complexity, are briefly considered in this part*.
* ‘The problem-solving emphasis of computer science borrows heavily from the areas of mathematics and logic. Faced with a problem, 
computer scientists must first formulate a solution. This method of solution, or algorithm as it is often called in computer science, must be 
thoroughly understood before the computer scientists make any attempt’.
Several parts of this work were presented during my lectures at the Institute for Mechanical and Electrical 
Engineering in Sofia, now known as TU Sofia, Bulgaria and also at the Wroclaw University of Technology in 
Wroclaw, Poland. A preliminary version of this study was realised in accordance with some research projects, e.g. 
such as z0802-331557-w0800, z0802-341763-w0800, etc., during my stay in Wroclaw.
I would like to thank my wife for her countless patience and love during the writing of the manuscript of this 
book.
This open access work is firstly addresses to the (advanced) computer science students, but may be useful for 
any researcher who is interested in the above given area. Any suggestions or other comments related to this work 
are well come. To all such remarks I would be grateful.
Iwan.G.Tabakow (retd. Professor)

9
The used designations
The used names for the primitive and/or derived rules given below are in accordance with the Lukasiewicz's 
symbols of negation, conjunction, disjunction implication, and equivalence denoted by N, K, A, C, and E, 
respectively (introduced in the parenthesis-free notation called also Polish notation: Jan Lukasiewicz 1878 - 
1956). Some commonly used symbols are given in parentheses. Other designations and/or abbreviations are the 
same as in (Slupecki J. and Borkowski L. 1967)*.
~
symbol of negation, called also logical inversion or logical 
not (called also e.g. ‘quantum negation’, i.e. 
‘orthocomplement’ in quantum logic systems or ‘linear 
negation’ in linear logic systems, etc.). Another used 
designations: -, , ' , “ , ± (e.g. p± ), Not, etc. The used symbol 
‘ ' ’ may be also used as a citation of designations or formulae, 
e.g. '~' to denote the set equinumerosity relation or 'A n B' 
etc., depending on the context ;
A
symbol of conjunction (logical multiplication, logical and: & 
, • , n, n, And) or weak conjunction (many-valued logics) ;
V
symbol of disjunction (logical sum, logical alternative, join: 
+ , u , 1, /, LI, Or) or weak disjunction (many-valued logics)
^
symbol of (the material) implication (^ , o , I) ;
«■
symbol of equivalence (co-implication, -, iff , ~ , ^ , E: ‘ 
■ ’ may also denote the congruence modulo m relation on the 
set of integers or a linear logic equivalence or also symmetric 
(called also symmetrical} set difference operation , 
depending on the context ;
r 
u , n, - , ■ ,
the set union (set sum), set intersection, set difference and 
symmetric ( or: symmetrical ) set difference operations 
(another designation for set difference: ' \ ' , e.g. X \ Y, 
instead of X - Y ), provided there is no ambiguity by X' 
is denoted the complement of X (another designation: X ): 
in a similar way and for convenience ‘ ' ‘ may be also used 
to denote some element, e.g. x' or algebraic operation, e.g. 
o’ (depending on the context) ;
x , Xn
Cartesian product of sets, Xn =df X x X x ... x X, n times, 
n > 2 (Rene Descartes 1596 - 1650, Latinised: Renatus 
Cartesius) ;
a e A, a g A
the membership relation’is element of ’ : a is element of A 
( or belongs to A), a is not an element of A ;
0
empty (or null) set ;
£ , = , *
the set inclusion, equality and nonequality, respectively ;
{a, b, ... , z}
a finite set of elements: a, b, . 
, z ;
(X,y) , (X1, X2, ... . Xn)
ordered pair, having as a first element x and as a second 
element y and ordered system having (more than two but) a 
finite number of elements ;
Slupecki Jerzy (1904 - 1987), Borkowski Ludwik (1914 - 1993).

10
For any other designations, see Part I of this book.
{ai/ i e I}, {Ai / i e I}
a set of elements ai and a family of sets Ai (i e I) ;
{ x / T(x) }
the set of all x satisfying the propositional function ^(x) ;
3 ^(x) , V ^(x) 
xx
the existential and the universal quantifiers related to q>(x) ;
N, Ne, No, 2, 2+,Q, R, R+ , R++ , C
the sets of natural numbers N =df {1, 2, ...}, the subsets of 
even and odd natural numbers, integer numbers, nonnegative 
integer numbers, rational numbers, real numbers, 
nonnegative real numbers , positive real numbers and
|X 1
complex numbers ;
the cardinality of set X (denoted also by: X (Cantor’s 
designation: G.F.L.P. Cantor 1845 - 1918) , card(X), nc(X), 
#(X) or #X ;
Ko
the cardinality of N ;
° , ro
a binary operation and some mapping ;
j xi , Q xi
the generalised set union and set intersection operations, 
respectively* .
c
proper inclusion between two algebraic systems ;
£ , £ , S
the set inclusion and the proper set inclusion (or strict set 
inclusion, denoted also by cl ) binary relations. X S Y «df 
~ (X £ Y): if X £ Y then X is a subset of Y or 
equivalently, Y is a superset of X ;
(x,y)
an ordered pair (2-tuple in short “couple”: means “pair”), 
denoted also by <x,y>, Kuratowski K. (1896 - 1980) ;
□
'end of proof ' (of an example, algorithm, or another 
formalised text) ;
wrt, iff 
‘text’
with respect to, if and only if ;
citation of a text, e.g. ‘a variety of problems that can be solved 
by ... ‘ .
* Usually I coincides with the set of natural numbers. And hence, for convenience, e.g. instead of jx i, it is also used Jx i
i e I 
i
(assuming that I is known) . And hence, provided there is no ambiguity and for simplicity, it is assumed that the used index i e I c N ( in 
a similar way: Q x i ) .
1 This set operation may also denote usual set inclusion, e.g. see (Slupecki J. and Borkowski L. 1967).

11
I. Operations and algebraic systems
The used below basic notions and definitions are mainly under (Kerntopf P.* 1967). Some other considerations 
are also presented, in particuar concerning Boolean, multiple valued and fuzzy algebraic systems. The notion of an 
operation is first presented.
* Pawel Kerntopf, born 1938.
t The Free Encyclopaedia, The Wikimedia Foundation, Inc.
♦‘Historically, the concepts of binary (n = 2) and unary (n = 1) were the first to be considered. Nullary (n = 0) operations are fixed 
elements of the set A ; they are also known as distinguished elements or constants. In the 20th century the concept of an infinitary operation 
appeared, i.e. a mapping © : A“ ^ A, where a is an arbitrary cardinal number.’ Encyclopedia of Mathematics, Springer: 
https://encyclopediaofmath.org/wiki/Algebraic_operation
§ Performing that operation on members of the set A always produces a member of that set.
1. Operations
Any mathematical operation is considered as a function taking zero or more input values (known as operands) to 
a well-defined output valued The notion of an n-argument operation is first given. Some properties concerning 
binary operations are next presented.
1.1. Two-argument operations
Let A be a given set. The following definition is introduced (Kerntopf P. 1967).
Definition 1.1 (n-argument algebraic operation)
An n-argument algebraic operation defined in A (where n is an arbitrary cardinal number) is the mapping 
© : An ^ At.
The following notation was also used: © : < ai, a2, ... ,an> ^ ©(ai, a2, ... ,an) , where ai, a2, ... ,an e A
and ©(ai, a2, ... , an) e A (i.e. A is closed§ under ©). As an example, the set of natural numbers N is closed 
wrt the usual operations of addition and multiplication.
Below we shall assume mainly two-argument (provided there is no ambiguity and for simplicity called below binary) 
algebraic operations.
Definition 1.2 (commutative binary operation)
Let © be a binary operation defined in A (i.e. n = 2). We shall say that © is a commutative binary 
operation if: * * * §

12
V 
( ro(a,b) = ro(b,a) ).
a,b g A
Definition 1.3 (associative binary operation)
The binary operation ro defined in A is an associative binary operation if:
V 
(ro(ro(a,b),c) = ro(a,ro(b,c)) ).
a,b,c g A
Equivalently, the following additive and multiplicative notasions are also used (for any a,b,c g A):
property
multiplicative notion
additive notion
commutativity
a • b = b • a
a + b = b + a
associativity
(a • b) • c = a • {b • c}
(a + b) + c = a + {b + c}
Figure 1.1
As an example, commutative and associative are the following operations: addition and multiplication defined 
in N, I, Q, R and C .
Example 1.1
Let a + ib and c + id be two complex numbers, where a,b,c,d g R and i is the imaginary unit (i2 = - 
1)*. We have:
* As an example: (x + iy)2 = x2 + 2xyi - y2.
(a + ib) + (c + id) = a + c + i(b + d) 
and
(c + id) + (a + ib) = c + a + i(d + b) = a + c + i(b + d).
In a similar way, we can obtain:
(a + ib) • (c + id) = ac + iad + ibc + i2bd = ac + iad + ibc - bd 
and
(c + id) • (a + ib) = ca + icb + iad + i2bd = ca + icb + iad - bd = ac + iad + ibc - bd . □
It can be observed that the subtraction operation defined in I, R and C is not associative. Moreover, there 
are operations which are not commutative or associative: the following example operation was given (Kerntopf 
P. 1967): h : < n, m > ^ nm (n, m e N).
Definition 1.4 (left-sided and right-sided separate operations)
Let ro1 and ro2 be two binary operations defined in A. We shall say that ro1 left-sided separate operation 
wrt ro2 if:
V 
(ro1(a, ro2(b,c)) = ro2(ro1(a,b), ro1(a,c) ) ) 
a,b,c g A
And we shall say that ro1 right-sided separate operation wrt ro2 if:

13
V 
(©i(©2(b,c),a) = ffl2(rai(b,a), roi(c,a) ) ).
a,b,c g A
Example 1.2 (left-sided and right-sided separate operations)
Let roi and 02 be the two arithmetic operations of multiplication and addition, denoted by: ‘ • ‘ and ‘ + ‘ , 
respectively. And so, the corresponding left-sided and right-sided separate operations are illustrated below (for 
any a, b, c g A):
a • (b + c) = a • b + a • c
(b + c) • a = b • a + c • a
Since arithmetical multiplication is commutative, the obtained last two lines are equivalent. □
There were presented in (Kerntopf P. i967) various examples concerning the above distributivity property. In 
particular, the following one.
Example 1.3
Consider the following two binary operations defined in R: a * b =df a + b + 1 and a 0 b =df a 
+ b + a • b. It was shown that the last binary operation is distributive wrt the first one, but not vice versa: left to 
the reader. □
Equivalently: a subset of A closed under an operation.
Definition 1.5 (operation closed on a subset of A)*
Let ro be a k-argument operation defined in A. We shall say that ro is closed in B c A if:
V ro(ai, ... ,ak) g B .
ai,.. .,ak g B
The following example was given.
Example 1.4
Let Ne, No c N be the subsets of even and odd natural numbers. The arithmetic operation of addition in Ne 
is closed one (but not in No) whereas the arithmetic multiplication is closed in the above both subsets. □
Definition 1.6 (left-, right identity elements)
The elements eL , eR g A are said to be left - and right identity elements wrt to the binary operation ro defined 
in A if:
V ((ro(eL, a) = a) A (ro(a, cr) = a)) .
a g A
Theorem 1.1
Let ro be a binary operation defined in A . Assume this operation has at the same time as identity elements eL 
and eR . Then we have: eL = eR .
Proof:
We have: ro(eL, eR) = eR and ro(eL, eR) = eL . □
In accordance with the last theorem: eR = eL = e (the identity element). Moreover, it follows that any binary 
operation defined in a given set may have at most one identity element.
*

14
Example 1.5
Let N, 2, R and C be the sets of natural numbers, integer numbers, real numbers and complex numbers. 
The identity elements wrt addition and multiplication are 0 and 1: for 2, R, C and N, 2, R, C , respectively. 
□
Definition 1.7 (left-, right zero elements, zero element)
The elements zl , zr e A are said to be left - and right zero elements wrt to the binary operation ro defined in 
A if:
V ((©(zl, a) = zl) A (ro(a, zr) = zr)) .
a e A
Definition 1.8 (idempotent element)*
* There exist some operations such that they can be applied multiple times without changing the result beyond the initial application. The 
notion of idempotence was first introduced by Benjamin Peirce (1809 - 1880). See: The Free Encyclopaedia, The Wikimedia Foundation, Inc.
t George Boole (1815 - 1864)
* Robert G. Plantz, born 1939.
§ Augustus De Morgan (1806 - 1871)
The element a e A is said to be an idempotent one wrt to the binary operation ro defined in A if: ro(a, a) = 
a .
1.2. Boolean, multiple valued and fuzzy-logic operations
‘There are only two values, 0 and 1, unlike elementary algebra that deals with an infinity of values, the real 
numbers. Since there are only two values, a truth table is very useful tool for working with Boolean algebra f’ 
(Plantz R.G.* 2021): here Raspberry Pi is ‘a tiny and affordable computer’ that can be used ‘to learn programming 
through fun, practical projects’. Some considerations related to Boolean algebra operations are cited below. A truth 
table lists all possible combinations of the values of the corresponding elementary Boolean variables. ‘The resulting 
value of the Boolean operation(s) for each variable is shown on the respective row. Elementary algebra has four 
operations (addition, subtraction, multiplication and division), but Boolean algebra has only the following three 
operations (Plantz R.G. 2021):
AND
A binary operator. The result is 1 iff both 
operands are 1 , othervise the result is 0.
OR
A binary operator. The result is 1 iff at least one 
of the two operands is 1 , othervise the result is 0.
NOT
A unary operator. The result is 1 if the operand 
is 0 , and vice versa.
Precedence rules:
Corresponding symbols:
NOT, AND, OR
' , • , + (denoted also e.g. by: ~ , a , v respectively).
Figure 1.2 Basic Boolean operations and precedence rules
‘There is a duality between the AND and OR operators, i.e. in any equality, the interchange of AND and 
OR along with the constants 0 and 1 do not change this equality’ (as an example, in particular, the interchange of 
AND and OR in De Morgan’s laws§).

15
Some basic Boolean algebra properties for manipulating Boolean expressions were also considered (Plantz R.G. 
2021). According to the last work, the considered here properties are presented as theorems and easily proved by 
using truth tables. The associativity properties and commutativity properties related to AND and OR were first 
presented.
Let x,y,z e {0,1}. The associativity and commutativity properties related to the AND and OR operators are 
presented as follows (for any x,y,z e {0,1})* :
* We have three variables each of them assuming two values and hence: 23 , i.e. 8 0 -1- combinations to be checked. As an example see 
the proof of the following De Morgan’s law given in the next considerations: (x + y) ' = x' • y' (there are now 22 = 4 0 -1- combinations to 
be checked).
The associativity:
x • (y • z) = (x • y) • z
x + (y + z) = (x + y) + z
The commutativity:
x • y = y • x
x + y = y + x
The used precedence rules are given in Figure 1.3 below.
Operation
Symbol
Precedence
NOT
'
Highest
AND
•
Middle
OR
+
Lowest
Figure 1.3 Precedence rules of Boolean algebra operators
Another properties, also considered in (Plantz R.G. 2021) are resumed in Figure 1.4 given below below.
Logical operations
Property
AND and OR
Each have identity value: x • 1 = x and x + 0 = x
AND and OR
Each have an annulment value: x • 0 = 0 and x + 1 = 1
AND and OR
Each have a complement value: x • x' = 0 and x + x' = 1
AND and OR
Each of them is idempoten t: x • x = x and x + x = x
AND and OR
They are distributive: x • (y + z) = x • y + x • z , x + y • z = (x + y) • (x + z)
AND and OR
Duality: (x • y)' = x' + y' and (x + y)' = x' • y' 
(DeMorgan’s laws)

16
NOT
Shows involution: (x')' = x
Figure 1.4 Basic properties of Boolean algebra operators
Example 1.6 (distributivity of OR wrt AND)
The proof of the following equality: x + y • z = (x + y) • (x + z) is illustrated in Figure 1.5 below. It can be 
observed that the left and the right sides of this equality coincides in any of the 23 = 8, 0 -1- combinations related 
to x,y and z. □
x
y
z
x+y
x+z
y • z
(x+y) • (x+z)
x + y • z
0
0
0
0
0
0
0
0
0
0
1
0
1
0
0
0
0
1
0
1
0
0
0
0
0
1
1
1
1
1
1
1
1
0
0
1
1
0
1
1
1
0
1
1
1
0
1
1
1
1
0
1
1
0
1
1
1
1
1
1
1
1
1
1
Figure 1.5
Example 1.7 (DeMorgan’s laws)
The proof of DeMorgan’s law: (x + y) ' = x' • y' is given in Figure 1.6 below. The proof of the second 
DeMorgan’s law, i.e. (x • y) ' = x' + y' is similar: left to the reader. □
x
y
x'
y'
x+y
(x+y)'
x'- y'
0
0
1
1
0
1
1
0
1
1
0
1
0
0
1
0
0
1
1
0
0
1
1
0
0
1
0
0
Figure 1. 6
And finally, we have the following values, called identity and annulment ones, related to the above two AND 
and OR operators: x • 1 = x , x + 0 = x and x • 0 = 0 , x + 1 = 1. It can be observed that only some of 
above cited properties are similar as in the elementary algebra.
In general, the above two Boolean operations AND and OR can be interpreted as a particular case of the 
following (more general) two operations: minimum and maximum respectively. Some considerations related to 
multiple valued operations are given below.
Many-valued logics are non-classical logics. But they are similar to classical logic because they accept the 
principle of truth-functionality, i.e. the truth of a compound proposition is determined by the truth-values of its 

17
component propositions (and so remains unaffected when one of its component propositions is replaced by another 
having the same truth-value). Here a fundamental fact is that the above logics do not restrict the number of truth­
values to only two, The main systems of many-valued logic often come as families, which comprise uniformly 
defined finite-valued as well as infinite-valued systems such as: Lukasiewicz’s logics, Godel’s logics, t-norm 
related systems, 3-valued systems, product systems, Dunn/Belnap’s 4-valued system, etc. (Gottwald S. 2000)*. As 
an example, Lukasiewicz'’s systems Lm and L, were introduced by means of the following two truth degree
* See Part I of this book.
' Jan Lukasiewicz (1878 - 1956). The first Lukasiewicz’s system (a ternary logic system with W3 =df {0, 1/2, 1}) was given in 1918: usually 
0, 1/2 and 1 are denoted by the logical constants F, U (unknown) and T, respectively.
f
k 
1
--- /k e {0,1,..., m -1}, m > 2/ and W, =df [0,1] c |R+ (the set of all nonnegative real numbers), 
m -1
&
strong conjunction: p & q =df max{0, p + q - 1}
a
weak conjunction: p a q =df min {p,q}
Y
strong disjunction: p Y q =df min{1. p + q}
V
weak disjunction: p v q =df max{p,q}
~
negation: ~ p =df 1 - p
^
implication: p ^ q =df min{1, 1 - p + q}
Figure 1. 7 Logical connectives
The equality relations between the strong and weak conjunction are illustrated in the next figure below.
p & q = p a q
for p = 0 or q = 0
p & q = p a q
for p + q > 1 and max{p,q} = 1
p & q ^ p a q
for p + q < 1
Figure 1. 8 The strong and weak conjunction relations
Example 1.8 (equality relations)
Let L =df max{0, p + q - 1} and R =df min {p,q}. where p, q e [0,1]. We have:
(1) Assume that: p = 0 or q =0. As an example, for p =df 0 (since q < 1) we can obtain: L = 0 = 
R. And hence: p & q = p a q .
(2) Let p, q > 0, p + q > 1 and max{p,q} = 1. We have: L = R. As an example, for p = 1 and q = 
0.6 we can obtain: L = 0.6 = R .
(3) Assume now p + q < 1: e.g. p = 0.5, q = 0.4. We have: L = max{0, 0.5 + 0.4 - 1} = max{0, 
- 0.1} = 0 and R = 0.4. And hence: L ^ R. □
It is assumed that the symbol of negation binds more strongly than the remaining symbols. As an example, an 
algebraic interpretation of De Morgan S laws is given below (the corresponding proofs are left to the reader: here 
the equals sign is used to denote equality between the corresponding left and right sides).
(i) 
~(p & q) = ~ p Y ~ q ,

18
(ii) 
~(p X q) = ~ p & ~ q ,
(iii) 
~(p a q) = ~ pv ~ q 
and
(iv) 
~(p v q) = ~ p a ~ q .
‘The basic fuzzy propositional logic is a relatively young discipline, both serving as a foundation for the fuzzy 
logic in a broad sense and of independent logical interest, since it turns out that strictly logical investigation of this 
kind of logical calculus can go rather far (Hajek P. 1998). It is broadly accepted that t-norms (dually, t-conorms) 
are possible truth functions of fuzzy conjunction (of fuzzy disjunction). The best-known candidate for fuzzy negation 
is the Lukasiewicz’s negation x' =df 1 - x. However, some other notions, e.g. such as Sugeno’sfuzzy negation 
or Yager’s fuzzy negation are also applicable (Bronstein I.N. et al. 2001). The fuzzy implication connective is 
sometimes disregarded but is of fundamental importance for fuzzy logic in the narrow sense. A straightforward but 
logically less interesting possibility is to define implication from disjunction and negation or conjunction and 
negation using the corresponding theses of classical logic T 1.15 and T 1.19, respectively (see Subsection 1.3). 
Such implications are called S-implications*. In fact, more useful and interesting are the so-called R-implications 
(any such implication is specified as a residuum with respect to the used t-norm)’. A more formal treatment is 
omitted: see Part I of this book: Fuzzy logic, p.72.
* In accordance with T 1.19 and CE (the law of transposition or contraposition of equivalence) we have: p ^ q <» ~ (p a ~ q). Let 
e.g. x' =df 1 - x be the Lukasiewicz’s fuzzy negation and x ® y =df min{x,y} be the Zadeh’s t-norm. Hence, the following S-implication 
can be obtained: x ^ y =df 1 - min{x, 1 - y} = max{1 - x, y} (the logical value of this implication: the proof of the last equality is left to 
the reader). Obviously, it is possible also the use of other fuzzy negations and / or t-norms. It can be observed that sometimes the above two S­
and R-implications may coincide, e.g. in La-BL (and hence in L-BL, assuming Yager’s fuzzy negation: see Corollary 2.4 of this subsection).
* Encyclopedia of Mathematics: https://encyclopediaofmath.org/wiki/Algebraic_system.
* The above distinguished elements are sometime treated as 0 - argument operations. Moreover, there are sometime introduced also relations 
defined in A or partial operations: left to the reader;
2. Algebraic systems
The notion of an algebraic system is ‘one of the basic mathematical concepts and its general theory has been 
developed in depth. This was done in the 1950s, and the work took place on the interface between algebra and 
mathematical logic'.’ This notion is first presented. Systems with one binary operation are next considered. The 
law of deletion is also given. And finally, such algebraic systems as: Boolean, multiple valued and fuzzy algebraic 
systems are also considered.
2.1. Algebraic system definition
The notion of an algebraic system is defined as follows (Kerntopf P. 1967).
Definition 2.1 (algebraic system)
Algebraic system is an ordered system a =df (A ; a1, a2, ... ,an ; Oi, o2, ..., Cm), where: A is an arbitrary set, 
known as the set of system elements; a1, a2, ... ,an are some distinguished elements of A, i.e. the so-called constants 
of the above algebraic system (the last set of constants may be empty) and oj : Anj ^ A (j = 1, 2, ... , m) are the 
system operations.
The above algebraic system a is said to be finite if the set of system elements A is finite*.
Definition 2.2 (algebraic system type)

19
The type of a , in short T(a) , is defined as follows: (0, 0, ... , 0, ni, n2, ... , nm).
In accordance with the last definition: the number of 0’s corresponds to the number of constants and nj - to 
the number of arguments of oj (j = 1, 2, . , m).
Let T(a) be the type of a and P be another algebraic system. We shall say that a and P are similar 
algebraic systems iff T(a) = T(P).
Definition 2.3 (algebraic subsystem)
Let a = (A ; a1, a2, . ,an ; o1, o2, ., om) be given and P =df (B : a1, a2, . ,an ; o1', o2', ., om'} be another 
algebraic system. The system P is said to be a subsystem of a , if: B c A, oj' are restricted to (the subset)* B 
c A and oj' are closed in B (for any j e {1, 2, ... , m}).
i.e: dom(oj') =df dom(oj) n B
It can be observed that any subsystem of a is similar to a and having the same constants as in a . By K 
=df {ak}keA we shall denote below the family of all algebraic subsystems related to a . The following two 
definitions were also introduced (Kerntopf P. 1967).
Definition 2.4 (algebraic system inclusion)
Let as , at e K . We shall say that the subsystem as is included in at , i.e. as c at if As c At .
Definition 2.5 (algebraic subsystem intersection)
Let B ^ 0 and Kb =df {ap} p e r c a c K be the family of all subsystems of a such that B c Ap . 
The intersection of the subsystems belonging to KB is defined as follows:
( A Ap ; ai, a2, ... , an ; oi, o2, ... , om) e K . 
p e r
For simplicity, the last intersection was denoted by A ap : is the smallest subsystem of a whose set of 
p e r 
elements contains B (the set of generators).
Example 2.1 (algebraic subsystems)
Consider the following algebraic system a =df ({a, b, c}; o), where ‘ o ’ is a binary operation defined in 
accordance with Figure 2.i given below.
o
a
b
c
a
a
b
a
b
a
b
b
c
a
b
c
Figure 2. i An example algebraic system
Subsystems of a are the following ones (for k = 0, 1, . , 7}: ak =df (Ak ; o(k) ), where: A0 = 0 , Ai = 
{a}, A2 = {b}, A3 = {c}, A4 = {a,b}, A5 = {a,c}, A6 = {b,c} and A7 = {a,b,c}: corresponds to the sum
3I© 
k=° 
. □

20
In accordance with Example 2.1, e.g. the algebraic subsystem a6 =df (A ; o(6)) is illustrated in Figure 2.2 
below: by o(6) it is denoted the truncation of ‘ o ’ to A6 . Obviously: a6 c a .
o(6)
b c
b
b b
c
b c
Figure 2. 2 The algebraic subsystem a6 .
2.2. Algebraic systems with one binary operation
Definition 2.6 (groupoid)
Let a be an algebraic system. This system is said to be a groupoid if T(a) = (2)*.
Definition 2.7 (semigroup)
A groupoid with an associative binary operation.
Definition 2.8 (monoid)
A semigroup with an identity elementt
Definition 2.9 (inverse element)
Let o be a binary operation defined in A , having an identity element e and a e A. We shall say that a' is 
an inverse element to a wrt o if :
3 (a o a' = e = a' o a) .
a'eA
Theorem 2. 1
Let o be a binary operation defined in A , having an identity element e . Assume that o is an associative 
operation. Then, there is no an element of A having more than one inverse element.
Proof:
The proof is indirect. Let a' and a'' (a' ^ a'') be two different elements of A. Since o is associative, we 
can obtain: (a' o a) o a'' = e o a'' = a'' and a' o (a o a'') = a' o e = a' . And hence: a' = a''. This is a 
contradiction with our assumption. □
Theorem 2. 2
Let o be an associative binary operation defined in A , having an identity element e . Assume that a',b'e 
A are the corresponding inverse elements to a and b in A wrt o . Then b' o a' is the inverse element to a o b 
. □
In accordance wich T 2.2, it is necessary to be proved the following implication:
* As an example, a groupoid is the system (K , + ), where ‘ + ‘ denotes the usual operation of addition (in fact, the last grupoid is a group: 
having an associative binary operation, identity and inverse elements).
i Called also ‘neutral element’ of a binary operation: an element of the set, leaving unchanged any other element of this set under operation 
with the first one, e.g. x + 0 = x = 0 + x or x • 1 = x = 1 • x (here ‘+’ and ′•’ denotes arithmetical addition and multiplication, 
respectively).

21
(a o a' = e = a' o a) a (b o b' = e = b' o b) ^ ((b' o a') o (a o b) = e = (a o b) o (b' o a'))
The proof of the last implication is based on Definition 2.9: left to the reader.
Definition 2.10 (group)*
* The notion of a group was first introduced by Evariste Galois (1811 - 1832).
t Niels Henrik Abel (1802 - 1829): abelian group, also called a commutative group, is a group in which the result of applying the 
group operation to two group elements does not depend on the order in which they are written. The concept of an abelian group underlies many 
fundamental algebraic structures, such as fields, rings, vector spaces, and algebras. In general, any group is isomorphic to a group of 
permutations (Arthur Cayley 1821 - 1895).
I As an example, this rule is satisfied in (K , + ) , but not in (K , • ): zero cannot be abbreviated.
Monoid having an inverse element a' for any a e A .
Definition 2.11 (inverse operation)
V 3! 3! ((a o x = b) a (y o a = b)) ^ ( o has an inverse operation in A ).
a, b e A x y
The notion of a group can be equivalently introduced by means of one of the next two definitions (Kerntopf P. 
1967).
Definition 2.12 (group)
Monoid with a binary operation having an inverse operation.
Definition 2.13 (group)
An algebraic system a =df (A ; e ; oi , o2 ) having a type T(a) = (0, 1, 2) and satisfying the following two 
conditions:
(i) The system (A ; e ; o2 ) is a monoid and
(ii) V ( o2(x , o1 (x)) = e = o2 ( o1 (x), x )) .
x e A
The above considered algebraic systems (see: Definitions: 2.6, 2.7, 2.8 and 2.10) are said to be abelian f ones if the 
corresponding binary operation used here is commutative.
2.3. Deletion rule
Definition 2.14 (left-sided deletion rule)
V ( (a o b = a o c) ^ (b = c))
a,b,c e A
In a similar way there is introduced the notion of a right-sided deletion rule and a two-sided deletion rule (in 
short: deletion rule). Obviously, if o is a commutative binary operation, the one-sided deletion rule becomes two­
sided one-.
Theorem 2.3
Let o be an associative binary operation defined in A , having an identity element e . Then, the two-sided 
deletion rule is satisfied for any a e A having (as an inverse element) a' , i.e:
V ( (a o b = a o c) v ( (b o a = c o a) ) ^ (b = c)) .
b,c e A

22
Proof:
Let a o b = a o c. Then: a' o (a o b) = a' o (a o c). And hence: (a' o a) o b = (a' o a) o c. Since a' o a = e 
then: e o b = e o c. And so: b = c. The remaining proof (assuming: b o a = c o a) is left to the reader. □
Corollary 2.1
The two-sided deletion rule is satisfied in any group. □ {T 2.3}
2.4. Lattices
Definition 2.15 (lattice*)
* Also known as ‘structure’: Here, for any pair of elements in L there exist a smallest upper and a largest lower bounds.
t Another interesting examples were also presented (Kerntopf P. 1967): left to the reader.
Lattice is an algebraic system £ =df (L ; 01, 02) having a type T(£) = (2,2) and satisfying the following 
three conditions:
(i) 
o1 and 
o2 are commutative binary operations,
(ii) 
01 and 
o2 are associative and
(iii) 
01 and 
o2 satisfy the laws of absorption, i.e:
v ( 0i(x, 02(x,y)) = X = 02(x, 0i(x,y)) ) .
x,y e L
Usually, the above two binary operations are denoted by: u =df oi and n =df O2 , respectively. And 
hence: £ =df (L ; u , n) . Moreover, the above three conditions: (i), (ii) and (iii) are represented as follows:
V ((x u y = y u x) a (x n y = y n x))
x,y e L
V ((x u ( y u z) = (x u y) u z ) a (x n ( y n z) = (x n y) n z))
x,y,z e L
V ( x n ( x u y) = x = x u (x n y)) .
x,y e L
Example 2.2 (powerset diagram)f
Let A =df {a,b,c}. The power set diagram of A (ordered by ‘c’ ) is illustrated in Figure 2.3 below. □
Figure 2.3

23
Theorem 2. 4
V (x is an idempotent element wrt u and n ) .
x G L
Proof:
Consider the above condition (iii), i.e: x n ( x u y) = x = x u (x n y). Since x, y G L may be arbitrary, let 
y =df x n y. In accordance with (iii): x = x n ( x u y) = x n ( x u (x n y)) = x n x . In a similar way by 
assuming y =df x u y we can obtain: x = x u (x n y) = x u (x n (x u y)) = x u x . □
Theorem 2. 5
Let £ =df (L ; u , n) be a lattice. For any x,y e L: x u y = y •» x n y = x .
Proof:
Assume that x u y = y. Then: x n y = x n (x u y) = x . Let now x n y = x . Then: x u y = 
(x
n y) u y = y. □
Theorem 2. 6
Let £ =df (L ; u , n) be a lattice and ‘< ‘ be a binary relation defined in L as follows:
V (x < y «df ((x u y = y) v (x n y = x )) ) .
x,y e L
Then ‘< ‘ is a partial order relation defined in L such that: LI {x,y} = x u y and n {x,y} = x n y* . 
And vice versa, if ‘< ‘ is a partial order relation defined in L such that: any two-element subset {x,y} of L 
have as a smallest upper bound x u y and a largest lower bound x n y, then £ is a lattice.
* The used here designations correspond to the notions of supremum and infimum (from latin: supremus and infimus, respectively).
i This proof consists of two parts: see (Kerntopf P. 1967).
* In general, a binary relation p defined in X is weak antisymmetric if:
V ( (x p y) a (y p x) ^ (x = y)) : See Definition 5.25 of Part I.
x,y e X
Proof (part I): i
Let £ =df (L ; u , n) be a lattice and ‘< ‘ be a binary relation defined in L as follows:
V (x < y «df ((x u y = y)) . 
x,y e L
In accordance with Theorem 2.4, for any x e L: x u x = x. And hence, ‘^‘ reflexive. i.e: V (x < x) .
x e L
Assume now: x < y and y < x , where: x, y e L . Then: x u y = y and y u x = x. Since ‘u ‘ is 
commutative then: x = y. Hence, ‘ < ‘ is weak antisymmetric?. Let now x < y and y < z (x, y, z e L). 
Hence: x u y = y and y u z = z. Since ‘ u ‘ is associative: z = y u z = (x u y) u z = x u (y u z) = 
x u z. Then: x < z . And so, ‘ < ‘ is transitive.
In accordance with the last considerations, the above binary relation ‘ < ‘ is at the same time reflexive, weak 
antisymmetric and transitive. And hence, this relation is a partial order on L. Next, it is necessary to show the 
existence of a smallest upper bound and a largest lower bound for any pair of elements belonging to L.
We have: x u y = x u (x u y) and x u y = y u (x u y). Hence: x < x u y , y < x u y and 
x
u y is the upper bound of {x,y}. Let now z e L be another upper bound for {x,y}. Then: x < z and y < 

24
z . Hence: (x u y) u z = x u (y u z) = x u z = z. Hence: x u y < z and x u y is the smallest upper 
bound for {x,y}.
In a similar way it can be shown that x n y is the largest lower bound for {x,y}. In accordance with T 2.5: x 
u y = y ■» x n y = x .
Proof (part II):
Let now L be a given set, ‘ < ‘ be a partial order defined in L. Assume that for any two element subset {x,y} 
of L there exist x u y and x n y (i.e. the smallest upper and the largest lower bounds, respectively) wrt ‘ ^ ‘. 
And hence: x u y = y u 
x and x n y = y n x.
Assume that 
s =df y u z and t =df x u s = x u (y u z). And hence: 
s > y , s > z , t > x and
t > s . Then: t > y and 
t > z . And so, t is an upper bound for {x, y, z}. If r is another upper bound for
{x, y, z}, then r > x, r > y, r > z. Hence, 
r is an upper bound for {y, z}. Since s is the smallest upper bound
for {y, z} then r > s. Then r is an upper bound for {x, s}. However t is the smallest upper bound for {x, s} , 
hence: r > t. And so, we have: t = x u (y u z) is the smallest upper bound for {x, y, z}. In a similar way, it 
can be shown that (x u y) u z is the smallest upper bound for {x, y, z}. Since the smallest upper bound is 
unambiguously determined then: x u (y u z) = (x u y) u z. In a similar way it can be shown that: x n (y n 
z) = (x n y) n z.
Assume now p =df x u y and q =df x n p = x n (x u y). Then: p > x, p > y, q < x, q < p. Since 
x > x* then x is a lower bound of {x,p}. However q is the largest lower bound of {x,p}. And hence, x 
< q. By assumption q < x and hence: x = q = x n (x u y). In a similar way, it can be shown that: 
x u
*The partial order relation ‘< ‘ defined in L is at the same time reflexive, weak antisymmetric and transitive. 
t Helmut Hasse (1898 - 1979)
! See Definition 2.3.
(x n y) = x. This way, it was shown that in a partial ordered set L, such that for any two-element subset {x,y} 
of L there exist a smallest upper and a largest lower bounds, the above three conditions: (i), (ii) and (iii), given 
in Definition 2.15 are satisfied. And hence, £ is a lattice. □
In accordance with the last theorem, lattices can be presented graphically by Hasse’s diagrams^ as it is shown 
in the above Figure 2.3 (or e.g. in Figure 5.5 of Part I of this book).
Definition 2.16 (sublattice)
An arbitrary algebraic subsystem! of £ .
In general, sublattices can be generated only by some subsets of L such that: along with each pair of elements 
x and y they also include: x u£ y and x n£ y.
Example 2.3 (sublattice)
An example of a sublattice (wrt the lattice of Figure 2.3) is given in Figure 2.4 below (shown by read colour). □
Figure 2.4

25
Theorem 2.7*
* The most of the considerations given below are under (Kerntopf P. 1967).
t Prowided there is no ambiguity and for simplicity, the partial order relation is some time also introduced in the lattice definition.
* Julius Wilhelm Richard Dedekind (1831 - 1916)
Let X =df (L ; u , n ; » be a latticed The following semidistributivity rules are satisfied:
(i) V ( x n (y u z ) > (x n y) u (x n z)) and
x,y,z e L
(ii) 
V ( x u (y n z ) < (x u y) n (x u z)).
x,y,z e L
Proof:
Since y u z > y and y u z > z then x n (y u z ) > x n y and x n (y u z ) > x n z. And hence 
x
n (y u z ) is an upper bound for {x n y, x n z}. Then: x n (y u z ) > (x n y) u (x n z). The proof of (ii) is 
similar: left to the reader. □
We shall say that X is semimodular if the following condition is satisfied:
V ( x > z ^ x n (y u z ) > (x n y) u z ).
x,y,z e L
Corollary 2.2
The last condition is satisfied in any lattice X = (L ; u , n ; ». □
Definition 2.17 (modular lattice)
X = (L ; u , n ; » is a modular ( Dedekind’si ) lattice if:
V ( x > z ^ x n (y u z ) = (x n y) u z ).
x,y,z e L
Example 2. 4 (modular lattice)
Consider lattice given in the above Figure 2.3. For example, let x =df {b,c}, y =df 0 and z =df {b}. Assume 
that n and u correspond to the set operations: n and u , respectively. Since {b,c} > {b} then {b,c} n ( 0 
^ {b}) = {b} = ({b,c} n 0 } u {b}. □
Theorem 2. 8 (lattice distributivity)
Let X = (L ; u , n) be a lattice. The following property is satisfied (for any x,y,z e L): 
x n (y u z ) = (x n y) u (x n z) iff x u (y n z ) = (x u y) n (x u z).
Proof:
Assume that: x n (y u z ) = (x n y) u (x n z). Then, in accordance with Definition 2.15 (i - iii) we can obtain 
(for any x,y,z e L):
x u (y n z ) 
= (x u (x n z )) u (y n z )
= x u (( x n z) u (y n z ))
= x u (( z n x) u (z n y ))
= x u (z n (x u y))
= (x n (x u y)) u (z n (x u y))

26
= ((x u y) n x) u ((x u y) n z)
= (x u y) n (x u z) . □
The proof of the opposite implication is similar: left to the reader. In accordance with T 2.8, the following 
definition is introduced.
Definition 2.18 (distributive lattice)
£ is distributive if it is distributive wrt the one of its wo binary operations (i.e. u or n . respectively).
Corollary 2.3
If £ is distributive then £ is modular.
Proof:
For any x,y,z e L: x n (y u z ) = (x n y) u (x n z ). Let x > z. Then x n z = z. And hence, in accordance 
with Definition 2.17, for any x,y,z e L: x n (y u z ) = (x n y) u z . □
Theorem 2. 9
£ is distributive •» V ((x n y = x n z) a (x u y = x u z) ^ (y = z) ). 
x,y,z e L
Proof T 2.9a:
Let £ be distributive, x n y = x n z and x u y = x u z (for any x,y,z e L). We have:
y = y u (y n x )
= y u (z n x )
= (y u z) n (y u x)
= (y u z) n (x u z)
= z n (x u y) 
= z n (z u x) 
= z . □
Proof T 2.9b:
Assume now x,y,z e L such that: x n y = x n z, x u y = x u z and y ^ z: {aip}*. If £ was distributive 
then: (x n y) u z = (x u z) n (y u z) and (x n y) u z = (x n z) u z = z. On the other hand: (x u z) n (y u z) = 
= (x u y) n (y u z) = (x u y) n (z u y) = (x n z) u y = (x n y) u y = y. And hence: y = z. □ {contrt}
* assumption(s) of indirect proof
t contradiction
Let £ = (L ; u , n ; >) be a lattice. The smallest upper and largest lower bounds for L (if they exist) we shall 
denote by A.£ and V£ or by A and V ( if £ is known) , respectively. The last lattice is then denoted by: £ = 
(L ; A , V ; u , n ; ». If £ is finite, i.e. I L I e N then A and V always exist. In general, if A and V exist 
then for any x e L : A < x < V. And hence: x u A = x , x u V = V , x n A = A and x n V = x. Moreover, 
if x u y = A then x = y = A . In a similar way, if x n y = V then x = y = V .
Definition 2.19 (complete lattice)
£ = (L ; u , n ; » is complete •» V 
3 (( LI l = a ) A (n l = b )) .
0 ^ l C L a, b e L
Corollary 2.4

27
x u
x n
If X is finite then X is complete. If X is complete then A and V always exist. □
It can be shown (proof by induction) that the following two properties are satisfied in any distributive lattice 
n 
n
( n yi) = n ( x u yi )
i = 1 
i = 1
n 
n
( u yi) = u ( x n yi ) .
i = 1 
i = 1
The last two rules are said to be nonfinite ones if instead of n e N it is used the symbol ‘o>’.
Definition 2.20 (element’s complement)
Some element c e L is said to be a complement of a e L in X iff a u c = V and a n c = A .
In general, a given element of L may have not a complement, may have exactly one complement or also may 
have many complements. Obviously, if c is a complement of a then a is a complement of c. Moreover, V is 
the exactly one complement wrt A and vice versa.
Theorem 2.1 0
If X = (L ; A , V ; u , n ) is distributive then for any x e L there exists at most one complement x'.
Proof:
Let x and y be two different complements for a e L: 
a u x = V , a n x = A 
and 
a u y = V ,
a 
n y = A {aip}. Then we can obtain: y = y n V = y n (a u x ) = (y n a) u (y n x) = A 
u (y n x) =
(x n a) u (x n y) = x n (a u y) = x n V = x . □ 
{contr.}
In general, in a given distributive lattice some elements of L may not have complements. According to the last
theorem, any a e L may have no more than one complement a'.* Moreover some elements may not have 
complements.
* Provided there is no ambiguity and for simplicity, e.g. the complement of a instead of a is denoted by a' , i.e. a' =df a . In particular: 
A' = V (and vice versa).
Let a' be a complement of a e L. Then a jest the complement of a''. Since X is distributive then a is the 
only one such complement. And hence, the following theorem is satisfied.
Theorem 2.1 1
If X = (L ; A , V ; u , n ) is distributive and a' is complement of a then there exists a'' and a'' = a. □
Theorem 2.1 2
Let X be distributive and a, b e L. If there exist the complements a' and b' then there exist also the 
complements (a u b) ' and (a n b) ' such that: (a u b) ' = a' n b ' and (a n b) ' = a' u b '.

28
Proof:
We have:
(a u b) n (a' n b ') = (a n a' n b ') u (b n a' n b ') = (A n b ') u (A n a ') = A u A = A 
,
(a u b) u (a' n b ') = (a u b u a') n (a u b u b') = (V u b ) n (V u a ) = V n V = V.
The proof for: (a n b) ' = a' u b ' is similar (left to the reader). □
According to T 2.12, the above two equalities, i.e. (a u b) ' = a' n b ' and (a n b) ' = a' u b ' are known
as De Morgan’s laws*.
* Augustus De Morgan (1806 - 1871)
t George Boole (1815 - 1864)
Corollary 2.5
The subset of all elements of X = (L ; A , V ; u , n ) having complements together with u and n truncated 
to this subset is a sublattice of X . □
Theorem 2.1 3
Let X be distributive and x,y e L have complements x' and y'. Then:
(i) x < y o x' > y' and
(ii) x < y o x n y ' = A o x' u y = V.
Proof:
(i): x < y o x u y = y
o
o
x' n y ' = y ' 
x' > y'.
(ii): x < y = x n y ' = (x n y) n y ' = x n (y n y ') = x n A = A .
x n y' = 
A = x = x n V = x n (y u y') = (x n y) u (x n y') = (x n y) u A = x n y .
And hence: x < y. □
Definition 2.21 (complemented lattice)
We shall say that X = (L ; A , V ; u , n ) is complemented if every element of L has a complement.
Definition 2.22 (Boolean lattice / Boolean algebra)
A distributive lattice which at the same time is complemented.
In accordance with the last definition: since X is distributive then every element may have at most one 
complement. Since X is also complemented then every element may have at least one complement. As a 
consequence, in Boolean algebra every element has exactly one complement. And hence, the complement in 
Boolean algebra is accepted as one argument operation. Moreover, by definition, the elements A and V are also 
included in any such algebra. The last algebra is denoted as follows: X =11 (B ; A , V ; u , n ; '). Another. 
equivalent definition is the next one.
Definition 2.23 (Boolean algebra1')
An algebraic system (B ; A , V ; u , n ; ') of type (0, 0, 2, 2, 1) such that:

29
(i) 
(B ; u , n ) is a distributive lattice,
(ii) 
A ( v ) is the identity element for u ( n ) and zero element for n ( u ) ,
(iii) V ((b u b' = V) A (b n b' = A)).
b e B
The following properties are satisfied in any Boolean algebra :
A' = v
v' =
A
(1)
a u v = v
a n A = A
(2)
a u A = a
a n v = a
(3)
a u a' = v
a n a' = A
(4)
a' ' =
a
(5)
a u a = a
a n a = a
(6)
(a u b) ' = a' n b'
(a n b) ' = a' u b’
(7)
a
u b = b u a
a
n b = b n a
(8)
a
u
(b u c) = (a
u b) u
c
a
n
(b n c)
= (a n b) n c
(9)
a
u
(b n c) = (a
u b) n (a u c)
a
n
(b u c)
= (a n b) u (a n c)
(10)
The above equalities are usually accepted as axioms of a Boolean algebra (described as in Definition 2.23). A complete 
axiomatic system is also the following one: {(3), (4), (8), (10)}. However, the corresponding proofs should be more 
difficult. As an example, (2A; 0 , A ; u , n , ' ) is a Boolean algebra
*
 (Kerntopf P. 1967).
* See Part I of this work.
t Chen Chung Chang (1927 - 2014): https://www.ams.org/joumals/tran/1958-088-02/S0002-9947-1958-0094302-9/S0002-9947-1958- 
0094302-9.pdf
! Jan Lukasiewicz (1878 - 1956)
§ Adolf Lindenbaum (1904 - 1941), Alfred Tarski (1901 - 1983)
2.5. Multiple valued and fuzzy algebraic systems
Multiple valued and fuzzy algebraic systems were introduced as generalisations of the concept of Boolean 
algebra. Some informations concerning these two systems are given below. Multiple valued systems are first briefly 
presented.
Multiple valued systems
The notion of a multiple valued algebra was first introduced by Chang C.C.l (1958): ‘So because of my own 
shortcomings in following proofs in Polish notation during a seminar held by Rosser on the completeness of 
Lukasiewicz! axioms for infinite valued propositional logic, MV - algebras came to be ... It occurred to me that 
the approach used in the proof of completeness of the two valued propositional logic via the Boolean (Lindenbaum 
/ cnown also as: Lindenbaum - Tarski§) algebra of equivalence classes of formulas and the Boolean maximal 
ideal theorem might be another way to do what Rosser did, but avoiding syntactical manipulations of formulae in 
Polish notation. This was the beginning of MV - algebras. Chang found a proof of the completeness of the K„ - 
valued logic (developed by Lukasiewicz and Tarski). See also: (Rose A. 1956). Since then MV - algebras have 
found increasing interest. There were also introduced finitely additive measures (called states) on MV - algebras 
with the intent of capturing the notion of ‘average degree of truth’ of a proposition Mundici D. (1995). In 
particular, the following definition was introduced in (Barbieri G. and Weber H. 2002).
Definition 2.24 (MV- algebra) * * * §

30
An MV- algebra ( L , + ,’ , 0 , 1) is a commutative semigroup with 0,1 and a unary operation ’ : L ^ L 
which satisfies the following axioms:
(L1) x + 1 = 1
(L2) (x’) ’ = x
(L3) 0’ = 1
(L4) (x’ + y’) + y = (x + y’)’ + for every x,y e L.
The following definitions were also introduced: x < y iff x’ + y = 1 and y A x =df (x + y’). And hence, 
whenewer x < y the following axioms were used:
(P1) x < x + y
(P2) x < y < z + x ^ y A x < z
(P3) y = y A x + x whenever x < y
(P4) x’ = x .
In general, any MV - algebra ‘is an algebraic structure with a binary operation © , a unary operation — , and 
the constant 0 , satisfying certain axioms. MV - algebras are the algebraic semantics of Lukasiewicz’s logic; the 
letters MV refer to the many-valued logic of Lukasiewicz. MV - algebras* coincide to the class of bounded 
commutative BCK algebras’ t In accordance with the last considerations, the following definition was also 
introduced.
* Known also as Lukasiewicz - Moisil algebras: However, in 1956 Alan Rose discovered that for n > 5, the Lukasiewicz-Moisil algebra 
does not model the Lukasiewicz logic
I https://en.wikipedia.org/wiki/MV-algebra. BCI and BCK algebras are algebraic structures, introduced by Imai Y., Iseki K. and Tanaka S. 
in 1966, e.g. see: Iseki K. and Tanaka S., An introduction to the theory of BCK-algebras. Mathematica Japonica, Japanese Association of 
Mathematical Sciences, vol. 23 (1978) 1 - 26.
* https://en.wikipedia.org/wiki/MV-algebra: provided there is no ambiguity instead of A, for convenience, the set of elements is here denoted 
by L.
§ The implication binds more strongly that equivalence.
** Petr Hajek (1940 - 2016)
Definition 2.25 (MV- algebra)*
An MV - algebra is an algebraic structure (L, © , — , 0), where: L ^ 0 is a set, © is a binary operation on 
L, — is a unary operation on L and 0 is a constant denoting a fixed element on L , such that the following 
identities are satisfied (for any x.y,z e L):
(1) (x © y) © z = x © (y © z)
(2) x © 0 = x
(3) x © y = y © x
(4) - - x = x
(5) x © - 0 = - 0
(6) - ( - x © y) © y = - ( - y © x) © x .
An MV - algebra can be equivalently defined as a ‘prelinear commutative bounded integral residuated lattice 
(L, A , V, ®, ^ , 0, 1) satisfying the following additional equivalence: x v y •» (x ^ y) ^ y§ (Hajek P**. 
1998): the last equivalence corresponds to the following thesis: p v q •» (p ^ q) ^ q (the corresponding two * * * § **

31
proofs are indirect: left to the reader). According to the first three axioms (L, ©, 0) is a commutative monoid (see 
Definition 2.8).
Example 2.5 (two-element MV - algebra)
The two - element Boolean algebra {0,1}, with © coinciding with Boolean disjunction and — with Boolean 
negation. By adding (as an axiom): x © x = x we can obtain the axiomatisation of Boolean algebra* *. □
* https://en.wikipedia.org/wiki/%C5%81ukasiewicz%E2%80%93Moisil_algebra
t Grigore Constantin Moisil (1906 - 1973)
* Marius Sophus Lie (1842 - 1899)
§ Carl Gustav Jakob Jacobi (1804 - 1851)
** Florentin Smarandache, born 1954
Wolfram Math World (https://mathworld.wolfram.com/SmarandacheFunction.html)
** Lotfi Aliasker Zadeh (1921 - 2017)
Another algebraic system was introduced in the 1940s by Moisil', now known as Lukasiewicz-Moisil algebra 
(‘in the hope of giving algebraic semantics for the n-valued Lukasiewicz logic’). However, it was discovered that for n 
> 5, the last algebra does not model the Lukasiewicz logic. ‘For the axiomatically more complicated (finite) n - 
valued Lukasiewicz logics, suitable algebras were published in 1977 by Revaz Grigolia and called MVn- 
algebras. MVn-algebras are a subclass of LMn-algebras, and the inclusion is strict for n > 5. In 1982 Roberto 
Cignoli published some additional constraints that added to LM n-algebras to produce proper models for n-valued 
Lukasiewicz logic. Cignoli called his discovery proper Lukasiewicz algebras’ (Cignoli R. 1982). There were next 
introduced ‘two chains of unary operations, as a key in establishing many connections between these algebras and 
n-valued Lukasiewicz-Moisil algebras’ (Iorgulescu A. 1999).
Fuzzy algebraic systems
Fuzzy algebra is an important chapter of fuzzy set theory. As an example, some properties of fuzzy algebraic 
systems, e.g. such as: Lie algebras and superalgebras, interval-valued fuzzy Lie ideals, etc., were studied in 
(Akram M. 2018). In particular, a Lie algebra? is ‘a vector space g together with an operation called the Lie 
bracket, an alternating bilinear map g x g ^ g , (x,y) ^ [x,y] that satisfies the Jacobi§ identity (a property of a 
binary operation that describes how the order of evaluation, the placement of parentheses in a multiple product, affects the result 
of operation: ‘map’ is an abbreviation of mapping)’.
The Smarandachefunction p.(n) is ‘the function first considered by Lucas E. (1883), Neuberg J. (1887) and 
Kemper A.J. (1918), and subsequently rediscovered by Smarandache** (1980) that gives the smallest value for a 
given n e N at which n / ^(n!) (i.e. n divides gr(n!), e.g. 8 is the smallest natural number that divides 4! 
(= 1-2-3-4)H. Smarandache fuzzy algebra is briefly presented below.
‘Smarandache algebra, like its predecessor, fuzzy algebra, arose from the need to define structures which were 
more compatible with the real world where the grey areas mattered. Lofti A Zadeh, the father of fuzzy sets, 
remarked that: "So, this whole thing started because of my perception at that time, that the world of classical 
mathematics - was a little too much of a black and white world, that the principle of the 'excluded middle' meant 
that every proposition must be either true or false. There was no allowance for the fact that classes do not have 
sharply defined boundaries." So, here is this book, which is an amalgamation of alternatives’ (Vasantha Kandasamy 
W.B. 2003). There was studied in the last book ‘the subject of Smarandache Fuzzy Algebra. Originally, the 
revolutionary theory of Smarandache notions was born as a paradoxist movement that challenged the status quo of 
existing mathematics. The genesis of Smarandache Notions, a field founded by Florentin Smarandache, is alike to 
that of Fuzzy Theory: both the fields imperatively questioned the dogmas of classical mathematics. Despite the fact 
that Fuzzy Algebra has been studied for over fifty years, there are only two books on fuzzy algebra. But both the 
books do not cover topics related to fuzzy semirings, fuzzy near-rings etc. so we have in this book, two parts: In 
Part 1 we have recalled all the definitions and properties of fuzzy algebra. In Part II we give Smarandache fuzzy 

32
algebraic notions. This is the first book in fuzzy algebra which covers the notions of fuzzy semirings and fuzzy 
near-rings though there are several papers on these two concepts’.
Some applications of Smarandache fuzzy algebraic structures were given in the last Chapter 7 of this work 
(Sections 7.1 and 7.2). And finally, some research problems (i.e. 25 problems) related to the applications of 
Smarandache fuzzy algebraic structures were also presented (Section 7.3). In particular: ‘the applications of 
Smarandache algebraic structures viz. Smarandache groupoids, Smarandache near-rings and Smarandache 
semirings in automaton theory, in error correcting codes and in the construction of S-subbiautomaton which are 
given in about forty definitions’. The notions of ‘semi-automaton and automaton’ were introduced by using such 
fundamental algebraic structures as semigroups (i.e. groupoids having associative binary operations: see Definition 2.7). 
The chapter starts with the notion of Smarandache free groupoid (in short: S-free groupoid), see: (Vasantha 
Kandasamy W.B. 2003 / Chapter seven: Applications of Smarandache fuzzy algebraic structures).
Definition 2.26 (S-free groupoid)
Let S be non empty set. Generate a free groupoid using S and denote it by (S). Clearly the free semigroup 
generated by the set S is properly contained in (S); as in (S) we may or may not have the associative law to be true.
In accordance with the last definition, the associativity property is not assumed (as e,g. in a free semigroup*). The 
following property was also presented.
* Free monoid on a set A (usually denoted by A* ) is ‘the monoid whose elements are all the finite sequences (or strings) of zero or more 
elements from that set, with string concatenation as the monoid operation and with the unique sequence of zero elements, often called the empty 
string (denoted by s or % as the identity element). The free semigroup on A (usually denoted by A+ ) is the subsemigroup of A* containing 
all elements except the empty string’: https://en.wikipedia.org/wiki/Wikipedia
Theorem 2.14
Every free groupoid is a S-free groupoid. □
The (classical) definitions of semi automaton and automaton are given as follows (Vasantha Kandasamy W.B. 
2002, Mordeson J. N. and Malik D.S. 2002).
Definition 2.27 (semi automaton)
A semi-automaton is a triple Y =df (Z, A, 5) consisting of two non - empty sets Z and A and a function 
5
: Z x A ^ Z, where Z is called the set of states, A the input alphabet and 5 the next state function of Y.
Definition 2.28 (automaton)
An automaton is a quintuple K = (Z, A, B, 5, A) where (Z, A, 5) is a semi automaton, B is a non-empty set 
called the output alphabet and X: Z x A ^ B is the output function.
Any automaton (or also semi automaton) can be described e.g. using next state table or graph. In the case of 
automaton it is needed also an output table. Some applications of fuzzy algebraic structures and Smarandache fuzzy 
algebraic structures were also given (Vasantha Kandasamy W.B. 2003 / see: Part Two, Chapter 7, Section 7.2, p.426): 
‘The application of fuzzy algebra is mainly found in finite machines or which we choose to call as Smarandache 
fuzzy automaton. Apart from this we see that there is no direct application of Fuzzy algebra. When we say Fuzzy 
algebraic structures we mean only fuzzy groupoids, fuzzy semigroups, fuzzy groups, fuzzy rings, fuzzy nearrings, 
fuzzy seminear-rings, fuzzy semirings and fuzzy vector spaces. We don't mix up the concepts of fuzzy logic with 
fuzzy algebraic structures’. Some notions related to the algebraic fuzzy automaton theory were also given (‘directly 
helpful to us in constructing Smarandache algebraic fuzzy automatons’).
The notion of Smarandache free groupoid and its application to automaton or linked automatons was also 
studied in (Vasantha W.B. and Chetry M,K. 2004): ‘The study of free groupoids is very new and we see that the 
free groupoids have its application to the theory of automaton provided they satisfy a special condition namely 

33
these free groupoids should contain at least a subset which is a free semigroup. Thus motivated by this property we 
define in this paper the notion of Smarandache free groupoid, these Smarandache free groupoids by their very 
definition contains at least one free semigroup. It may happen that these Smarandache free groupoids may have 
more than one free semigroup in which case we see still it has more applications, for we can define several 
automatons which can be easily linked for a free given groupoid. Thus we in this paper define Smarandache free 
groupoids and give its application to automaton or linked automatons, which we choose to call as New 
Smarandache Automaton or New Smarandache Linked Automaton’.
There exist many algebraic systems corresponding to multi-valued logic and using various logical, arithmetic, 
set-theoretical or other operations (Lu and Lee 1985). In particular, (the multi-valued) M-algebra (Lu 1983) was 
introduced as the system M =df (M ; 0, m - 1; +, • , -) , where for any multi-valued variables of M =df {0, 1, ... 
, m - 1} £ N u {0} the basic (two logical and one arithmetic) operations MAX(x,y), MIN(x.y), and SUB(x,y) 
(denoted by +, • , and - ,respectively) are specified as follows: x + y = MAX(x,y) = the larger value of {x,y}, 
x • y = xy = MIN(x,y) = the smaller value of (x,y), and x - y = SUB(x,y) = subtract y from x (only if x 
> y). The NOT operation (denoted by ‘ ' ‘ ) is defined as x' = SUB((m - 1),x) = (m - 1) - x. The operation 
x - y is undefined. If x < y. So, an improved version of the above system, also called M-algebra (and also 
denoted by M ) was proposed (Lu and Lee 1985). Instead of (the partial operation) SUB a new arithmetic 
operation. called truncated subtraction and denoted by TSUB, was introduced, i.e. x © y = TSUB(x,y) = if x > 
y then SUB(x,y) else 0. It has been shown that {MAX,TSUB} and {MIN,TSUB} are two minimal functionally 
complete sets of basic operations. The last two sets can be implemented using only digital circuits.
A multi-valued algebraic system by using the above notion of M-algebra was introduced in (Tabakow I.G. 
1993). The system, called D-algebra*, in short D ,was represented as an isomorphic image of the direct product of 
two M-algebras, i.e.the following theorem was sown.
* The composite multi-valued algebraic system, called D-algebra, is the system D =df (D ; 0, m - 1 ; +1, •1 , - 1) , where D is the set of 
composite value symbols (the elements of the algebra), 0 and m - 1 (i.e. d00 and d(m - 1)(m - 1) ) are the minimal and maximal elements of the 
corresponding lattice and for any di , dkl e D the last three operations are defined as follows: di +1 dkl = DMAX(dij, dkl) = d(i + k)j + l) , di
•1 dkl = DMIN(dij, dkl) = d(i • k)(j • l) and dij -1 dkl = DTSUB(dij, dkl) = d(i - k)(j - l) .
1 John Paul Roth, born: 1922
Theorem 2.15
D = p( M x M) , i.e. D is an isomorphic image of the direct product of two M-algebras wrt p. □
Next this D-algebra was used to generate tests for m-logic combinational circuits (i.e. circuits which realize m- 
valued logic functions, m > 2). The test generation was a fault oriented process (tests are derived for specific faults). 
This process was illustrated by means of an informal modification of the classical Roth ’s D-algorithm* 1 (a more 
formal treatment is omitted). For simplicity, only the s-a-fault model was considered and several examples were 
given. An example ternary lattice (related to the corresponding D-algebra) is shown in Figure 2.5 below.
Figure 2.5

34
II. Homomorphisms, direct products and free algebraic system
Below are first considered various kinds of homomorphisms concerning algebraic systems. Such notions as 
direct products of two algebraic systems and free algebraic systems are also considered. The most of the used below 
basic notions and definitions are mainly under (Kerntopf P. 1967)
3. Homomorphisms*
* This term (gr. olioiw, homoios - podobny; iioptpp, morphe - shape, form) is different from the notion of ‘homeomorphism’ used in graph 
theory (a mapping between two graphs that respects their structure).
' Christian Felix Klein (i849 - i925)
* https://en.wikipedia.org/wiki/Homomorphism
§ And hence, a and p are two similar algebraic systems, i.e. of the same type: see Definition 2.2 of Subsection 2.i.
** The used term ‘map’ is an abbreviation of ‘mapping’.
The notion of homomorphism, i.e. considered as a ‘structure-preserving map between two algebraic systems 
of the same type’ was early used by Felix Klein'. Some kinds of homomorphisms are considered below-.
3.1. Epi-, mono- , iso- , endo- and automorphisms
Definition 3.1 (homomorphism)
Let a =df (A ; ai, a2, ... ,an ; 01, o2, ..., om) and p =df (B ; bi, b2, ... ,bn ; Oi', o/, ..., Om') be two algebraic 
systems of the same type§. We shall say that p : A ^ B is a homomorphism of a in p if the following two 
condisions are satisfied (known as: preservation of constants and operations, respectively):
(1) V (9(ai) = bi).
i e {1, ... ,n}
(2) 
V 
V (9(oj(xi, ... ,Xnj)) = oj'(9(xi), ... ,p(Xnj)))
j e {1,.,m} 
x1, . , xnj e A
The system (p(A) ; bi, b2, ... ,bn ; Oi'/p(A), o2'/p(A), ... , Om'/p(A)) is said to be a homomorphic image of a 
wrt p. Moreover, we shall say that a homomorphically maps** to p if there is a mapping such that it is a 
homomorphism of a in p .
Let p : A ^ B be a homomorphism of a in p . In particular, if <p is surjective mapping (i.e. onto) then 
the above homomorphism is said to be epimorphism. In a similar way, if p is injective mapping (i.e. one - to - 
one) we have monomorphism. * * * § **

35
The above homomorphism is an isomorphism if it is at the same time surjective and injective mapping* *. The 
homomorphism of a in a is said to be endomorphism and the isomorphism of a in a is defined as 
automorphism.
* A bijection (bijective function: in general bijective map or one-to-one correspondence) is a map f : X > Y which is at the same time 
one-to-one (injective, i.e. x1 ^ x2 ^ f(x1) ^ f(x2), for any xbx2 g X ) and onto (i.e. surjective): https://en.wikipedia.org/wiki/Bijection
* Let p : 2 > {- 1, 1} such that: p(z) =df if z/2 then 1 else - 1. Since ‘0’ is even, i.e. p(0) = 1, then it is sufficient to show the 
following equality: p(a + b) = p(a) • p(b) (for any 22 = 4 even / odd combinations: left to the reader).
* eix = cos(x) + i sin(x) (Leonhard Euler 1707 - 1783)
The following two properties are satisfied (in accordance with Definition 3.1).
(i) Let a , p and y be three algebraic systems of the same type. Assume that p is a homomorphism of 
a in p and tp is a homomorphism of p in y , then the superposition of homomorphisms <p'p is a homomorphism 
of a in y.
(ii) Let p be a homomorphism of a in p . Then, the homomorphic image of a wrt p is a subsystem of 
p .
By a «p p it is denoted below the fact that: ‘a maps isomorphically to p wrt p’.The identity map is here 
denoted by ‘e’. Obviously, the last binary relation '»’ is an equivalence one, i.e. reflexive, symmetric and transitive 
. And hence we have: a »p a , a »p p ^ p «p-i a and (a »p p) a (p »v y) ^ (a »pV y), i.e:
e
a > a ,
hom
p 
p - i
a > p ^ p > a and
hom 
hom
p 
V 
p'l'
a > p a p > y ^ a > y .
hom 
hom 
hom
Here <p'p (or more formally: pop) denotes the composition (or equivalently: superpositiom) of the last two 
mappings. The next examples are under (Kerntopf P. i967).
Example 3.1 (algebraic system homomorphism)
Consider the following two algebraic systems: a =df ( 2 ; 0 ; + ) and p =df ({- 1, 1} ;1 ; • ) , where ‘+’ and 
‘ • ‘ denote the usual arithmetical addition and multiplication, respectively. Since T(a) = T(p) = (1, 2) the 
last two algebraic systems are similar. And hence, the map p : 2 > {- 1, 1} such that:
V (if z is even then 1 else - 1) 
z G 2
is an epimorphism between the last two algebraic systems. '•
Example 3.2 (algebraic system homomorphism)
Let a =df (R ; 0 ; +) and p =df (C - {0} ;1 ; • ) be two algebraic systems of type )1,2). Consider the map 
p : R > C - {0} such that: p(a) = eia *. We have: p(0) = e10 = e0 = 1 and p(a + b) = 
e1(a + b) =
eia • eib = p(a) • p(b). □
Example 3.3 (algebraic system homomorphism)

36
Consider the following two Boolean algebras: a =df (B ; A , V ; u , n ; ‘) and p =df (B ; V , A ; n , u ; ')*. 
Let 9 : B ^ B such that 9(b) =df b’ (for any b e B). We have:
* Of the same type: (0,0,2,2, i): the complement of a, instead of a , is here denoted by a' , i.e. a' =df sc .
'The above homomorphism is an isomorphism if it is at the same time surjective and injective mapping.
(i) 
9(A) = V, 9(V) = A
(ii) 
9(bi u b2) = (bi u b2) ' = bi' n b2 = 9(bi) n 9(62) ,
(iii) 9(b1 n b2) = (b1 n b2) ' = b1' u b2' = 9(b1) u 9(b2) ,
(iv) 9(b') = b'' = 9(b) '.
And so, we have an automorphism (i.e. a bijective homomorphism of an object with itself). □
Obviously, an isomorphism between two algebraic systems can be considered as an equivalence relation. And 
hence, all isomorphic algebraic systems have the same algebraic properties. In particular, the notion of a 
homomorphism of two partial ordered sets is defined in a similar way (by >a and >b are denoted below the partial 
order relations corresponding to the sets A and B, respectively).
Definition 3.2 (homomorphism: partially ordered sets)
Let A and B be two partially ordered sets. The map 9 : A ^ B is said to be a homomorphism1' of 
A
in B iff:
V (a >a b ^ 9(a) >b 9(b))
a,b e A
Theorem 3. 1
Let 9 be a homomorphism of a in p such that it maps the set of generators of a onto the set of generators 
of p . Then 9 is an epimorphism. □
Theorem 3. 2
Let Ao be the set of generators of a =df (A ; ai, a2, ... ,an ; oi, o2, ..., om) and let 91 and 92 be two
homomorphisms of a in p =df (B ; bi, b2, ... ,bn ; oi', o2', ..., om'). Then:
V (9i(a) = 92(a)) ^ V (9i(a) = 92(a)), 
a e A0 
a e A
i.e. if g : Ao ^ B can be extended to a homomorphism of a in p then any such extension is uniquely defined.
Proof:
In accordance with the notion of a homomorphism (see Definition 3.i), it follows that {a eA / 9i(a) = 92(a)} is 
a subsystem of a , containing the same set of generators as in a . □
3.2. Congruences and quotient algebraic systems
The notion of congruence is defined as follows (Kerntopf P. i967):
Definition 3.3 (congruence)

37
Let a =df (A ; ai, a2, ... ,an ; 0i, 02, ..., Om) be an algebraic system. The congruence of a is an equivalence 
relation p defined in A and satisfying the following condition:
V ((xipyi) A (X2py2) A ... A (Xnjpynj) ^ oj(xi, ... ,Xnj) p oj(yi, ... ,ynj)) .
J e {1, ... ,m}
The last condition is said to be a substitution property*. The partition generated by the above congruence is 
called a regular one (or partition with a substitution property).
* In accordance with the last property, congruencies are also said to be equivalence relations with the substitution property.
t See Definition 2.8.
! See Definiti0n 2.23.
§ A -? B =df (A - B) u (B - A) : symmetric set difference (known also as disjunctive union operation) is here denoted by ‘ -? ‘
(instead of ‘®’ used in the original work and also ‘ p ‘ instead of ‘ = ‘ ).
Definition 3.4 (quotient algebraic system)
Let p be a congruence of the above algebraic system a (see: Definition 3.3). The quotient system associated 
with a wrt p is defined as follows: a /p =df (A/p ; [ai]p, [a2]p, ... ,[an|p ; 0i', o2', ..., om'), where:
V 
V (Oj ([xi]p , ... , [xnj]p) =df [oJ(xi, • ••, xn)]p .
j e {1, . ,m} xi, . 
. Xnj e A
Obvi0usly, the ab0ve 0perati0ns are well defined. In acc0rdance with the last cited w0rk, tw0 examples are 
illustrated below.
Example 3.4 (congruence)
Consider the monoid! a =df (T ; 0 ; +). Let p c T x T be a binary relation defined in T as follows: apb 
iff (a - b) is an even number. The quotient algebraic system a /p = ( {E, O}; E ; ® ) , where E and O 
denote the subsets of even and odd numbers, respectively. The binary operation ‘ ® ‘ is defined as it is shown in 
Figure 3.i bel0w. □
® 
E O
E 
E 
O
O 
O E
Figure 3.i
Example 3.5 (congruence)
Consider the Boolean algebra! a =df (2N ; 0 , N ; u , a , '). Let p c 2: x 2: be defined as follows: A 
p B -»df I A ® B I < No (alef-zero). Then p is a congruence^ In fact, the last binary relation is at the same time a 
left and a right invariant ones wrt the above two operations: ‘u’ and ‘a’ , i.e. for any A, B, C e 2: :
(C u A) : (C u B) 
= 
(A u C) : (B u C)
= ((A u C) ' a (B u C)) u ((A u C) a (B u C) ') * * * §

38
= (A' n B n C ') u (A n B' n C ')
= ((A' n B) u (A n B')) n C '
= (A - B) n C '.
In a similar way we can obtain:
(C n A) - (C n B) 
= (A n C) - (B n C)
= 
((A n C) ' n (B n C)) u ((A n C) n (B n C) ')
= ((A' u C ') n (B n C)) u ((A n C) n (B' u C'))
And hence, we can obtain:
= A' n B n C u C 'n B n C u A n C n B' u A n C n C '
= A' n B n C u C 'n B n C u A n C n B' u A n C n C '
= A' n B n C u 0 u A n C n B' u 0
= A' n B n C u A n C n B'
= (A' n B u A n 
= (A : B) n C .
B') n C
And hence, if A : B is finite then the above two sets
(A : B) n C ' and
(A
: B) n C are also finite
A p B ^ (((C u A) p (C u B)) A ((A u C) p (B u C)) a ((C n A) p (C n B)) a ((A n C) p (B n C))).
Since A : B = A' : B ' then: A p B ^ A' p B '.
And hence, p is a congruence wrt the above considered Boolean algebra. □
The following two theorems were given (Kerntopf P. 1967).
Theorem 3.3
For any algebraic system a =df (A ; ai, a2, ... ,an ; 0i, 02, ..., Om) and any congruence p in a there exists
an epimorphism from a to a /p.
Proof:
Consider the map p : A ^ A /p such that: p : x ^ [x] . This map preserves constants and operations. 
Moreover p (A) = A /p . And hence, p is an epimorphism from a to a /p. □
The map <p defined in the last proof is said to be a natural homomorphism (epimorphism). In general, it can be 
shown that the quotient systems associated with a given algebraic system (wrt the all its congruences) are 
exhaustive to isomorphism of all its homomorphic images.
Theorem 3.4
Let P =df (B ; bi, b2, ... ,bn ; oi, o2, ..., Om') be an arbitrary homomorphic image of the algebraic system a 
=df (A ; ai, a2, ... ,an ; 01, o2, ..., om) and p : A ^ B be an epimorphism of a to p. Then there is such a 
congruence p of a , that the system p is isomorphic to a/p = (A/p ; [ai], ... , [an] ; oi'', ... , om'').
Proof:
Let p c A x A be defined as follows:
V ( Xi p X2 «df p(xi) = p(X2) ).
Xi,X2 € A
In accordance with the last definition and the notion of a homomorphism (see Definiti0n 3.i) we can 0btain:
V (((Xi p Xi') A (X2 p X2') A ... A (Xnj p Xnj')) ^ Cj'(p(Xi) , ... , p(Xnj)) =
j € {1, . , m}

39
= Oj'(<p(xi') , ... , 9(xnj'))). Then: p(oj(xb •••, xnj)) = 9(oj(xi', •••, xnj')). We have: 
Oj(xi,
... , Xnj) p Oj(xi', ... , Xnj'). And hence, p is congruence.
Consider the map y assigning to each element y e B the class of equivalence of the congruence p consisting 
of counter images of y. The last map y is one-to-one (any two different yb y2 e B are related to different 
elements of A/p). Moreover for any y e B there exists at least one counterimage (<p is an epimorphism). It is 
shown below that p is isomorphic to a/p . We have:
V 
( p(a1) = bi ^ y(bi) = [ai]p ) ,
i e{1, . ,n}
V 
V (((p(x1) = y1) A ... A (p(xnj) = ynj) A (p(oj(x1, ... , Xnj))) =
j e{1, . ,m} yi, . ,ynj e B
= 
oj'(p(x1), ... , p(xnj)))) ^ y (oj'(y1, ... , ynj)) = (oj(xb ... , x,))p ^
^ y (oj'(y1, ... , ynj)) = oj''([x1]p, ... , [xnj]p) ^ y (oj'(y1, ... , ynj)) =
= 
oj''(y(y1), . 
, y(ynj)). □
3.3. Finite direct products
Definition 3.5 (direct product)
Let a =df (A ; a1, a2, . ,an ; o1, o2, ., om) and p =df (B ; b1, b2, . ,bn ; o1', o2', ., om') be two similar 
algebraic systems*. The direct product (or simply the product) of a and p , denoted by a x p , is defined as 
follows: a x p =df (A x B ; (aj,bj), ... , (an,bn); oj'', o/', ..., om''), where:
V 
V 
V 
(oj''((x1,y1), . 
, (Xnj,ynj)) = (oj(x1, . 
,Xnj), oj'(y1, . ,ynj))).
j e (1, . ,m} X1, . ,Xnj e A 
y1, . ,ynj e B
In accordance with the last definition, the direct product of two similar algebraic systems is a new algebraic 
system belonging to the same category, e.g. the direct product of two groups is a group.
Example 3.6 (direct product)
i.e. of the same type: see Definition 2.2.

40
Figure 3.2 (a) Two lattices: £1 and £2 (b) Hasse* * diagram for £1 x ^
* Helmut Hasse (1898 - 1979)
I See Definition 2.23
* (Kerntopf P. 1967)
§ By ‘ Y‘ it is denoted the exclusive disjunction logical operation: is true iff arguments differ: one is true and the other false.
Theorem 3.5
Let ffl =df (B ; A , V ; u , n ; ') be a finite Boolean algebra^ such that I B I > 2. Then ffl is isomorphic 
to some nonegative power of the two-element Boolean algebra. □
Definition 3.6 (atom)
Let X =df (L ; u , n ; » be a lattice having as an element Ax . Any other element of L immediately after Ax 
is said to be an atom, i.e:
a is an atom of X iff (a ^ Ag> ) a ~ 3 ( Ag> < x < a).
x € L
The proof of the above Theorem 3.5 is based on the following six lemmas given below (on atoms of finite Boolean 
algebras: the corresponding proofs are omitted. For any x e B, by A(x) =df {a1, a2, ... , ak} it is denoted the set of all atoms 
‘a’ of the Boolean algebra ffl =df (B ; A , V ; u , n ; ') such that: a C x )3
Lemma 3.1
x ^ A ^ 
3 ( a C x ). □
a e A(x)
Lemma 3.2
(a e A(x)) a (x e B) ^ (a C x) Y (a n x = A)§. □
Lemma 3.3
A(x o y) = A(x) o A(y) , where: o e { u , n }. □
Lemma 3.4
A(x') = A(V) - A(x) . □
Lemma 3.5
A(x) = A(y) iff x = y . □
Lemma 3.6
Let a1 , a2 , . , ak be arbitrary and at the same time different atoms. Then: A(a1 u a2 u . u ak) = 
{a1,
a2, . ,ak}. □
Proof of theorem 3.5:
Let A =df {a1, a2, ... , an} be the set of all atoms of the above Boolean algebra ffl =df (B ; a , v ; u , n ; ') and 
f : B ^ 2A be a map such that f : x ^ A(x). Since ffl is finite, by Lemma 5 it follows that f is injective 
(i.e one-to-one) and by Lemma 6 it follows that f is surjective (i.e. onto). Then f is bijective. And hence, f is an 

41
isomorphism of ffl to (2A ; 0 , A ; u , n , - ), i.e. the corresponding operations are preserved (Lemmas 3 and 4). 
Moreover: f(A) = 0 and f(v) = A (the constant preservation).
But the last system (2A ; 0 , A ; u , n , - ) is isomorphic to the following one: ({A , v} ; A , v ; u , n ; '), e.g. 
wrt the following map ( for any A' £ A): <p(A') =df (<pi(A'), ... , ^n(A')) , where <£i : 2A ^ {A , v} (for any 
i e {1, 2, ... , n}) and ^i(A') =df if ai e A' then v else A . □
The following two corollaries are satisfied (in accordance with Theorem 3.5).
Corollary 3.1
The number of elements in any finite Boolean algebra is a non negative power of 2. □
Corollary 3.2
Any two finite Boolean algebras are isomorphic iff they have the same number of elements. □
3.4. Free algebraic systems
Definition 3.7 (free algebraic system)
Let S be a class of algebraic systems of the same type and a =df (A ; ai, a2, ... ,an ; oi, o2, ..., om). We shall 
say that a is a free algebraic system in the S class if:
3 V (any map f : Ao ^ B can be extended to a homomorphism of a to P ), 
Ao of a P e S
where: P =df (B ; bi, b2, ... ,bn ; of, o2', ..., Om') and Ao is said to be the set of S-free generators for a .
In accordance with Theorem 3.2, the above extention given by Definition 3.7 is uniquely defined. As an 
example, if a semigroup is free in any class of semigroups then any such semigroup is said to be a free semigroup 
(in a similar way for: groups, lattices, Boolean algebras, etc.). There are given in the next example some basic 
notions used in automata theory and mathematical linguistics (Kerntopf P. 1967).
Example 3.7 (free semigroup)
Let S ^ 0 be an arbitrary nonempty set, called here: alphabet. The elements of S are said to be letters. Any 
word is defined as an arbitrary sequence of letters belonging to S_. The word’s length is the number of the 
corresponding letters. The set of all finite words in S is denoted by S . The operation of linking two words X1X2 
. xn and y1y2 . ym written side by side is said to be concatency (or concatenation) The concatency of words u 
and v is denoted by u • v (in short: uv). Obviously, the last binary operation is associative but not commutative. 
The following semigroup* ( S , • ) is generated by S ( S is the smallest set containing all words formed from 
the letters of S ). It is shown below that ( S , • ) is a free semigroup.
Let now ( A, + ) be an arbitrary semigroup and f : S ^ A be an arbitrary map. The last map can be extended 
as follows:
V _ (u = X1X2 ... Xn ^ f(u) = f(xi) + f(X2) + ... + f(Xn)) 
u e S
It can be also shown that each semigroup free in any class of semigroups is isomorphic to ( S , • ), for a certain 
alphabet S . Usually, the last alphabet is extended by the so-called empty word, denoted by L, where:
V ( u • L = L- u = u )
u e S u {L}
* See Definition 2.7

42
Let S* =df S u {X}. The following free monoid is obtained: ( S* ; X ; • ).
* Stephen Cole Kleene (1909 - 1994)
+https://docest.com/grammars-languages-and-machines
In accordance with the last considerations, any subset of S* (including the empty set} is said to be an event over 
S . The system (2S*; 0 , S* ; u , n , ') is a free Boolean algebra. The following two operations, defined in 2S*, 
were also introduced.
The concatenation of two events P, Q e 2S* (denoted by P • Q or PQ) is the set {uv / (u e P) a (v e Q)}. 
This operation is associative but not commutative. We have: P0 = { X } and Pi+1 = Pi • P for i > 0.
The iteration P* of an event P e 2S* is defined as the following event: P* =df {X} u P u P 2 u P 3 u ... =
OT
U P i .
i = 0
Definition 3.8 (algebra of events)
*
The following algebraic system is said to be an algebra of events: (2S ; 0 , S* ; u , • , *).
Definition 3.9 (set of regular events)
The smallest subset R of the set 2S* containing S* and such that:
V (P u Q , PQ , P* e R)
P,Q e R
Any element of R is said to be a regular event.
The above notion of a regular event introduced by Kleene* is one of the most important notions used in automata 
theory.
4. Applications
Some applications , e.g. such as: grammars, sequential machines, computability, etc. are briefly presented 
below..
4.1. Grammars and sequential machines'
Some introductory notions related to the last work are cited below. Here, any alphabet is considered as a finite 
set of symbols, e.g. {a, b, c, . 
, z} or also e.g. as a binary alphabet {0, 1}. Any string over an alphabet is defined
as a finite sequence of symbols drawn from the considered alphabet, e.g. happybirthdaytoyou or e.g. the binary 
string: 101100101, etc. It is generally omitted ‘’ ‘’ from strings unless doing so would lead to confusion. The set 
of all possible strings over an alphabet £ is written by £* . The length of a string is defined as the number of symbols in 
it. As an example, we have: the length(101100101) = 9. Some operations on strings are cited below.
Concatenation of two strings x and y: appending the string y to the string x.

43
Replication: for each string w and each natural number i , the string wi is defined as follows:
*Soare R.I., 10th International congress for logic, methodology and philosophy of science. Section3: Recursion theory and constructivism, 
August (1995) 19 - 25: http://www.people.cs.uchicago.edu/~soare/History/compute.pdf
'“Computability is the ability to solve a problem in an effective manner. It is a key topic of the field of computability theory within 
mathematical logic and the theory of computation within computer science. The computability of a problem is closely linked to the existence 
of an algorithm to solve the problem. The most widely studied models of computability are the Turing - computable and ii - recursive functions 
and the lambda calculus (all having computationally equivalent power): Wikipedia.
w0 = e
wi = wi -1w , for any i > 1.
The replication operator has a high precedence (like exponentiation). The notion of string reversal was introduced 
in accordance with the following inductive definition.
(1) if |w| = 0 then wR = w = e
(2) if |w| > 1 then Ha e £ : w = ua (a is the last character of w) and wR = auR.
The following property was shown.
Theorem
Let w,x be two strings. Then (wx) R = xR wR. □
The notion of a language is introduced as a ‘(finite or infinite) set of finite length strings of a finite alphabet £. 
The language £*  contains an infinite number strings (including: e , a, b, ab, ... ). Languages can be considered as 
sets. And hence, in the next considerations there were presented some techniques for defining languages and also: 
‘how large are languages, operations on languages, and finally regular expressions, regular grammars and finite 
state machines’: left to the reader.
4.2. 
Computability and recursiom*
In accordance with the last work, it was considered the informal concept of “computability” or “effective 
calculability” and two of the formalisms commonly used to define it: “(Turing) computability” and “(general) 
recursiveness.” There were considered their origin, exact technical definition, concepts, history, general English 
meanings, how they became fixed in their present roles, how they were first and are now used, their impact on 
nonspecialists, how their use will affect the future content of the subject of computability theory, and its connection 
to other related areas. After a careful historical and conceptual analysis of computability and recursion there were 
maked several recommendations about preserving the intensional differences between the concepts of 
“computability” and “recursion.” In particular, it was recommend that: the term “recursive” should no longer carry 
the additional meaning of “computable” or “decidable;” functions defined using Turing machines, register 
machines, or their variants should be called “computable” rather than “recursive”. Moreover, it was distinguished 
the intensional difference between Church’s Thesis and Turing’s Thesis, and use the latter particularly in dealing 
with mechanistic questions; the name of the subject should be “Computability Theory” or simply Computability 
rather than “Recursive Function Theory.”'
4.3. 
Graph theory and Petri nets
“In mathematics, graph theory is the study of graphs, which are mathematical structures used to model pairwise 
relations between objects. A graph in this context is made up of vertices (also called nodes or points) which are 
connected by edges (also called links or lines). A distinction is made between undirected graphs, where edges link 
two vertices symmetrically, and directed graphs, where edges link two vertices asymmetrically. Graphs are one of 

44
the principal objects of study in discrete mathematics".Petri net (also known as a place/transition net) is one of 
the several mathematical modelling languages used for description of distributed systems (a class of discrete event 
dynamic systems). Any Petri net is introduced as a directed bipartite graph having two types of elements: places 
and transitions (depicted by circles and rectangles, respectively): depicted as white circles and rectangles, 
respectively. A place can contain any number of tokens, depicted as black circles. A transition is enabled if all 
places connected to it as inputs contain at least one token. Petri nets were invented in August 1939 by Carl Adam 
Petri*: for the purpose of describing chemical processes.
* Carl Adam Petri (1926 - 2010)
i https://encyclopediaofmath.org/wiki/Combinatorial_analysis
i https://en.wikipedia.org/wiki/Probability_theory
§ Carl Friedrich Gauss (1777 - 1855)
** https://brilliant.org/wiki/markov-chains/: Andrey Andreyevich Markow (1856 - 1922)
4.4. Combinatorial analysis and probability theory
The combinatorial analysis is a “branch of mathematics devoted to the solution of problems of choosing and 
arranging the elements of certain (usually finite) sets in accordance with prescribed rules. Each such rule defines a 
method of constructing some configuration of elements of the given set, called a combinatorial configuration. One 
can therefore say that the aim of combinatorial analysis is the study of combinatorial configurations. This study 
includes questions of the existence of combinatorial configurations, algorithms and their construction, 
optimalisation of such algorithms, as well as the solution of problems of enumeration, in particular the 
determination of the number of configurations of a given class.The simplest examples of combinatorial 
configurations are permutations, combinations and arrangements. “ i
Probability theory is the “branch of mathematics concerned with probability. Although there are several 
different probability interpretations, probability theory treats the concept in a rigorous mathematical manner by 
expressing it through a set of axioms. Typically these axioms formalise probability in terms of a probability space, 
which assigns a measure taking values between 0 and 1, termed the probability measure, to a set of outcomes called 
the sample space. Any specified subset of the sample space is called an event. Central subjects in probability theory 
include discrete and continuous random variables, probability distributions, and stochastic processes."-
4.5. Number theory, Markov’s chains, coding
Number theory (or arithmetic or higher arithmetic in older usage) is a branch of pure mathematics devoted 
primarly to the study of the integers and integer-valued functions. Mathematics is the queen of the sciences and 
number theory is the queen of mathematics.* * * § **
 Number theorists study prime numbers as well as the properties of 
mathematical objects made out of integers (e.g. rational numbers) or defined as generalisations of integers (e.g. 
algebraic integers): Wikipedia.
A Markow’s chain**is ‘a mathematical system that “experiences transitions from one state to another are in 
accordance with certain probabilistic rules. The defining characteristic of a Markov chain is that no 
matter how the process arrived at its present state, the possible future states are fixed. In other words, the probability 
of transitioning to any particular state is dependent solely on the current state and time elapsed. The state space, or 
set of all possible states, can be anything: letters, numbers, weather conditions, baseball scores, or stock 
performances. ... Markow’s chains may be modelled by finite state machines, and random walks provide a prolific 
example of their usefulness in mathematics. They arise broadly in statistical and information-theoretical contexts 
and are widely employed in economics, game theory, queueing (communication) theory, genetics, and finance.

45
While it is possible to discuss Markov’s chains with any size of state space, the initial theory and most applications 
are focused on cases with a finite (or countably infinite number of states. “
Coding theory is ‘an important study which attempts to minimize data loss due to errors introduced in 
transmission from noise, interference or other forces. With a wide range of theoretical and practical applications 
from digital data transmission to modern medical research, coding theory has helped enable much of the growth in 
the 20th century. Data encoding is accomplished by adding additional information to each transmitted message to 
enable the message to be decoded even if errors occur. In 1948 the optimization of this redundant data was discussed 
by Claude Shannon* * from Bell Laboratories in the United States, but it wouldn’t be until 1950 that Richard 
Hamming^ (also from Bell Labs) would publish his work describing a now famous group of optimized linear codes, 
the Hamming Codes. It is said he developed this code to help correct errors in punch tape. Around the same time 
John Leech from Cambridge was describing similar codes in his work on group theory‘ (Grossman J. 2008).
* Claude Elwood Shannon (1916 - 2001)
t Richard Hamming (1915 - 1998)
* https://devopedia.org/algorithmic-complexity 
** Andrey Nikolaevich Kolmogorov (1903 - 1987)
tt Alan Turing (1912 - 1954)
** https://en.wikipedia.org/wiki/Algorithmic_complexity
4.6. Algorithm complexity
Algorithmic complexity is a measure of how long an algorithm would take to complete given an input of size 
n. If an algorithm has to scale, it should compute the result within a finite and practical time bound even for large 
values of n. For this reason, complexity is calculated asymptotically as n approaches infinity. While complexity is 
usually in terms of time, sometimes complexity is also analyzed in terms of space, which translates to the 
algorithm's memory requirements. Analysis of an algorithm's complexity is helpful when comparing algorithms or 
seeking improvements. Algorithmic complexity falls within a branch of theoretical computer science called 
computational complexity theory. It's important to note that we're concerned about the order of an algorithm's 
complexity, not the actual execution time in terms of milliseconds. Algorithmic complexity is also 
called complexity or running time ’i.
‘In algorithmic information theory (a subfield of computer science and mathematics), the Kolmogorov 
complexity of an object, such as a piece of text, is the length of a shortest computer program (in a 
predetermined programming language) that produces the object as output. It is a measure of 
the computational resources §needed to specify the object, and is also known as algorithmic 
complexity, Solomonoff-Kolmogorov-Chaitin complexity, program-size complexity, descriptive complexity, 
or algorithmic entropy. It is named after Andrey Kolmogorov**, who first published on the subject in 1963.The 
notion of Kolmogorov complexity can be used to state and prove impossibility results akin to Cantor's diagonal 
argument, Godel's incompleteness theorem, and Turing's halting problem’**.

46
Conclusions
Discrete mathematical structures underpin a large amount of modern computer science. Unfortunately, the 
speedy developments and knowledge in this area makes impossible the presentation of all notions, definitions and 
applications used here. This part is an extension of the previous one (i.e. a supplement / a separate work) and it is 
related to algebraic systems (considered as discrete mathematical structures). The considered here systems may be 
useful for any researcher who is interested in the above given area.
References
Akram M., Fuzzy Lie Algebras, Springer (2018) 302pp.
Barbieri G. and Weber H., Measures on clans and on MV - algebras. Handbook of 
measure theory: Chapter 22, Pad E. ed., Elsevier, (2002) 1632pp.
https://www.sciencedirect.com/topics/mathematics/mv-algebra
Bronstein I.N., Semendjajew K.A., Musiol G. and Muhlig H., Taschenbuch der 
Mathematik. Verlag Harri Deutsch (2001) 1149pp.
Chang C.C., Algebraic analysis of many - valued logics. Transactions of the 
American Mathematical Society, no. 88 (1958) 476 - 490.
Cignoli R., Proper n-Valued Lukasiewicz Algebras as S-Algebras of Lukasiewicz n- 
Valued Propositional Calculi, Studia Logica, 41, 1982, 3-16
Gottwald S., Many-valued logic. The Stanford Encyclopaedia of Philosophy, Zalta 
E.N. ed., The Metaphysics Research Lab at the Center for the Study of Language 
and Information, Stanford University, Stanford, CA (2000) 14pp.
Grossman J., Coding theory: introduction to linear codes and applications. Rivier 
Academic Journal, vol. 4, number 2, FALL (2008) 17pp.
Hajek P., Metamathematics of fuzzy logic. Kluwer Acad.Publ., Dordrecht (1998) 
297pp.
Iorgulescu A., Connections between MVn algebras and n-valued Lukasiewicz - 
Moisil algebras - II, Discrete Mathematics, Science Direct, North - Holland, vol. 
202 (1999) 113 - 134.
Kempner A. J., Miscellanea. Amer. Math. Monthly no. 25 (1918) 201 - 210.
Kerntopf P., Basic mathematical notions in automata theory. Relations, algebraic 
systems and structures. CO PAN, PWN Warszawa (1967) 64pp. In Polish 
(Library of Congress Catalog: QA402.3.K4).

47
Lu H., Fault detection in multi-valid digital circuits. M.S. thesis, Univ. of 
Oklahoma, U.S.A. (1983).
Lu H. and Lee S,C., Fault detection in M-logic circuits using the M-difference. 
Proc. of the IEEE International Symposium on Multiple-Valued Logic (1985) 62 - 
70 / M-algebra: 272 - 284.
Lucas E., Question Nr. 288. Mathesis no. 3 (1883) 232.
Mordeson J. N. and Malik, D.S., Fuzzy automata and languages: Theory and 
Applications, Chapman & Hall / CRC, New York (2002) 576pp.
https://www.taylorfrancis.com/books/mono/10.1201/9781420035643/fuzzy-automata- 
languages-john-mordeson-davender-malik
Mundici D., Averaging the truth-value in Lukasiewicz logic. Studia Logica, vol. 
55, no. 1 (1995) 113 - 127.
Neuberg J., Solutions de questions proposes. Question Nr. 288, Mathesis 7 (1887) 
68-69.
Plantz R.G., Introduction to computer organization: ARM assembly language using 
the raspberry pi. Sonoma State University (2021) CS 252. 
https://bob.cs.sonoma.edu/IntroCompOrg-RPi/sec-balgebra.html
Rose A., Formalisation du calcul propositionnel implicatif R0 valeurs de 
Lukasiewicz, C. R. Acad. Sci. Paris 243 (1956) 1183 - 1185.
Tabakow I.G., Using D-algebra to generate tests for m-logic combinational 
circuits. International Journal of Electronics 75, UK (1993) 897 - 906.
Vasantha Kandasamy W.B. , Groupoids and Smarandache groupoids. American 
Research Press, Rehoboth, NM (2002) 114pp.
http://fs.unm.edu/Vasantha-Book2.pdf
Vasantha Kandasamy W.B., Smarandache fuzzy algebra. American research press, 
Rehoboth (2003) 454pp.
http://fs.unm.edu/Vasantha-Book9.pdf
Vasantha W.B. and Chetry M,K., Smarandache free groupoids and its application 
to automaton.The University Grants Commision sponsored seminar, Jamal 
Mohammed College Tiruchi, TN India (2004) 
http://fs.unm.edu/SN/SmarandacheFreeGroupoids.pdf



Qfi
^WUST Publishing House
•<', 
mailorder:-;^?- » <
zamawianie.ksiazek@pwr.edu.pl
ISBN 978-83-7493-221-9

