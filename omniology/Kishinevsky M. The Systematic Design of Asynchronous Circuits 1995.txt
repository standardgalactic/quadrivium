Tutorial
The Systematic Design of Asynchronous Circuits
Michael Kishinevsky Luciano Lavagno Peter Vanbekbergen
The University of Aizu, Politecnico di Torino, Synopsys, Inc., USA
Japan 
Italy
Cadence Berkeley Labs, 
USA
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits
1

Outline
• Introduction and basics
What is asynchronous, advantages and disadvantages, design styles, 
hazards and races, control/data dichotomy
• Specification and synthesis methodologies
Event based models, concurrent languages, FSMs
• Synthesis from Signal Transition Graphs
Synthesis flow, state assignment, logic synthesis, design-for-testability, 
comparison with synchronous
• Verification and validation of asynchronous designs
Formal verification, checking properties, validation in VHDL environment
• Practical applications
Interface design, asynchronous processors, DSP circuits, CAD tools
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits
2

Motivation
• Reliable design methodology for asynchronous is coming
• Asynchronous design sometimes unavoidable 
(asynchronous interfaces, arbiters, etc.)
• Asynchronous is getting more important:
” [In the microprocessor of the year 2000] we will see perhaps even 
asynchronous design...”
’’Looking at the future”
Anant Agrawal, Vice President, 
Engineering Sun Microsystems 
SPARC Technology Business
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits
3

What is asynchronous?
Asynchronous = not synchronous =^>
• Synchronous: use an external global clock for 
observing system states
• Asynchronous: use internal and external events for 
observing system states
Asynchronous are also called self-timed
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits
4

Synchronous communication
Clock
Clock
Data input
Tsetup Thold
Timing constraint: input data must stay unchanged within a setup/hold 
window around a clock event
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits
5

Asynchronous communication
Ack
• A signal handshake is used instead of a global clock
• Handshake can be implemented using 
delay padding or/and completion detection
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits
6

Completion detection
Ack
• Special redundant data encoding => area overhead
• Completion detection forms a request => more area overhead
• Completion detection can be done inside a receiver
• Tolerates data skew
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits
7

Delay padding
Ack
• Similar to synchronous
• Measure or estimate maximum logic delay
• Pad extra delay (if Req sets before Logic stabilizes) 
for mimicking completion detection
• Time redundancy - timing margins are required
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits
8

Potential advantages
Top ten lists at Async94 from Al Davis
• No clock distribution
• Average case performance
• Low power consumption
• Robustness to parameter variations
• Modular composition
• Metastability
either does not occur or has time to resolve
• Global synchrony does not exist anyway 
(hardware/software codesign)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits
9

Robustness
• Alain Martin 1989
• Christian Nielsen 1994
Operating range:
5 op/s under 0.5V and 300K 
19 Mop/s under 11V and 77K
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 10

Problems
• Have you ever seen asynchronous circuits?
• Area overhead
• Testability?
• How to design them?
A systematic design methodology is needed
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 11

Part 1: Basics
• Example: C-element design
• Completion detection
• Design styles
— delay models
— signalling methods
— models of environment
• Hazards and races: review
• Asynchronous data path
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 12

Synchronization of parallel processes
• After A and B do C.
co
• Both rising and falling transitions 
have to be synchronized:
if a = b = 1 then c := 1 
if a = b = 0 then c := 0 
otherwise c : = c
• AND-gate synchronizes only 
rising transitions
Synchronization can be done with a C-element
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 13

C-element on basic gates
Is this implementation correct?
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 14

Delay assumptions
• Delay 1 is a propagation 
delay from node 1 via 
environment to node 3
• Delay 2 is a propagation 
delay from node 1 via 
internal feedback 
to node 3 
. ,
• Delay 1 must be greater 
than Delay 2
Delay assumptions influence correctness of asynchronous design
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 15

CMOS implementation of a C-element
b-°il 
a-°il 
a —II 
b —il
Static
weak
Dynamic Quasi-static
Are these implementations correct?
Careful design is required (layout, transistor sizing, charge sharing)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 16

RS-latch with completion detection
Completion = 0 O < S, R > = < Q, Q' >
[Gillies,Swartwout’61 (in Miller ’65), Martin, van Berkel 80’s]
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 17

Dual-rail four-phase encoding
X.t X.f
x
True 
False 
Empty
1 
0
0 
1
0 
0
Valid = { True, False }
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 18

Completion detection
X
completion(X)
x1.t 
x1.f 
xn.t 
xn.f
X
Completion detectors for dual-rail four-phase code
[Armstrong et al. 69] [Varshavsky 75]
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 19

Completion detection vs delay padding
• Completion detection
— Completion detection is well developed
— Requires an area overhead and an extra-delay. 
Not practical for wide data paths
• Bundled data
— Padding delay allows to mimic the completion detection
— Data path is synchronous
— Requires timing redundancy for safe design
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 20

What influences the design methodology
• Delay model
• Signalling model
• Environment model
• Specification language
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 21

Delay models
• Place: gates, wires, gates + wires
• Timing properties: bounded and unbounded
Bounded = lower and upper bounds for circuit components are known 
Unbounded = delays are unknown but finite
• Memory properties: inertial and pure
Apply a train of short pulses to the input of a delay element 
before the output of a delay has changed its value.
Inertial = all pulses are filtered out
Pure = no pulses are filtered out
Intermediate models are possible
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 22

Gate vs wire delay models
Gate delay model = delays are in gates, no delays in wires
More realistic version: gates may have arbitrary delays, wires 
after fork may have delays less than one gate delay
Wire delay model = gate+wire delay model: 
wires (and gates) may have arbitrary delays
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 23

Delay models and correctness
Transistor view
• This design is correct for unbounded gate delay model
• This design is incorrect for unbounded wire delay model 
If dl > d3 + d5 or d2 > d3 + d4 then the implementation 
does not satisfy the specification
• Correctness of this design under the bounded delay model 
depends on delay constraints.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 24

Design styles for asynchronous control logic
• Bounded delays: realistic delay model for gates and wires.
Technology mapping is easy.
Verification is difficult since time must be included in the model.
• Speed-independent: pessimistic delay model for gates 
(unbounded) and often acceptable delay model for wires 
(delays after fork are less than one gate delay).
Technology mapping is more difficult.
Verification is easy since time is excluded from the model.
• Delay-insensitive: pessimistic delay model for gates and wires 
(both are unbounded).
The class of such circuits (built out of basic gates) is almost empty.
• Quasi-delay insensitive = delay-insensitive except critical wire forks, 
called isochronic forks.
In practice this is the same as speed-independent.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 25

Signalling methods
• Two-phase:
rising and falling signal transitions are equivalent
• Four-phase:
rising and falling signal transitions are not equivalent
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 26

Two-phase signalling
Two transitions at the control lines during one cycle 
acknowledge data change => request
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 27

Four-phase signalling
Cycle
Four transitions at the control lines during one cycle
Control is simpler
Reset phase: change data and reset control
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 28

Models of the environment
Asynchronous circuits operate in the environment.
• Slow enough environment = Fundamental mode:
inputs can change after the asynchronous system has settled into a stable 
state
• Reactive environment = Input/output mode:
inputs can change as soon as the first output signal has changed due to 
the previous input change
• Constraints on input changes for fundamental mode and I/O-mode:
— Single input change (SIC) - too slow
— Multiple input change (MIC) - difficult to design using classical asyn­
chronous FSM technique
— Unrestricted input change (UIC) - very difficult to design using classical 
asynchronous FSM technique
Fundamental mode constraints are similar to setup and hold restrictions in 
synchronous design. Fundamental mode is often too restrictive.
Example: any pipeline operates in I/O-mode
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 29

Environment and correctness
• For fundamental mode 
this design is correct (nec­
essary delay constraints 
hold by definition)
• For I/O-mode this design 
may be incorrect unless 
” Delay 1 > Delay 2” type 
constraints hold
Assumptions on the environment influence the correctness of 
asynchronous design
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 30

Goals of tutorial
• Will present design methodology for
— I/O-mode (most general)
— Bounded and unbounded delay models 
(each of them may be useful for certain designs)
— Four-phase signalling (more efficient and fast control). 
Two-phase signalling can be also handled.
• Will not present
— Specific methods for Fundamental mode
— Specific methods for two-phase signalling
— All the methods that have been devised in history ...
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 31

Hazards
transition cul
0 -> 1
0 -> 1
2
Hazard example:
function static 1-hazard
1 -> 0 -> 1 for c =■ a xor b
• Hazard: signal transition not specified by the designer
• Hazards make asynchronous design difficult
• Theory of hazards: [Unger, Kung, Nowick]
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 32

Hazards and delay model
5
• Inertial gate delay model 
=> no hazards
10
20
• Wire delay model 
=> hazards
Hazard analysis depends on the delay model
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 33

Taxonomy of hazards
1
0 
0
Static hazards
Dynamic hazards
• Signal behavior:
static (no transition is required)
or dynamic (monotonous transition is required)
• Circuit type:
combinational (circuits without feedbacks) or 
sequential (circuits with feedbacks)
• Due to specification or due to implementation:
function or logic; essential or not essential
• Due to the I/O mode of operation: delay hazards occurs when two 
input transitions are too close together
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 34

Combinational hazards
• Function hazards: inherent in the specification of the logic 
function.
Condition for 1-hazards: a transition cube contains 0
Cannot be eliminated by changing the logic
• Logic hazards:
depend on the particular implementation of the logic function
Can be eliminated by changing the logic (or sometimes the 
delays)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 35

Static logic hazard elimination
Static hazard: a signal which should remain constant changes
Static logic 1-hazard elimination condition:
each transition cube is contained inside a cube of the cover
Static logic O-hazards never occur in a two-level Sum-of-products 
implementation
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 36

Dynamic function hazards
Dynamic hazard: a signal which should change once changes multiple times
Dynamic function hazard:
non-monotonous change of the function inside the transition cube
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 37

Dynamic logic hazard elimination
11
01
0
1
0
1
0 N
1
1—
0
0 <0]
1
0
0
0
1
ab
cd 00 01 11 10
00
10
Dynamic logic ItoO-hazard elimination condition: 
if transition cube intersects cube c of the cover, 
then c contains the start point of the transition cube
Otol-hazards are symmetrical (the same for the end point)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 38

Sequential hazards
Sequential circuits « circuits with feedbacks
Sequential hazards occur because feedbacks propagate new values 
before the input net completes signal propagation to all inputs of 
the next state logic
• Essential hazard: inherent in the FSM specification.
cannot be eliminated by another state encoding =^> 
cannot be eliminated for unbounded delays
can be masked out by controlling the delays
• Non-essential hazards (races):
can be eliminated by a proper state encoding
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 39

Non-critical races
Race: more than one state signal changes
Non-critical race:
all transient states drive the FSM into the same final state
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 40

Critical races
Critical race: 
different transient states drive the FSM into different final states.
Final state depends on the race winner
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 41

Race-free encoding
Tracey encoding:
Two state transitions under 
the same input
.< b 
b
sl s2 and, s3 —> s4 , , 
must be distinguished by a 
stable state signal:
Oil 000 and 110 ™ 100
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 42

Types of race-free encoding
• Single bit change encoding: simple, bad throughput 
adjacent states differ by exactly one bit
may require a few FSM cycles to reach a stable state
• Single transition time encoding:
better throughput, more complex
adjacent states may differ by multiple bits
requires exactly one FSM cycle to reach a stable state 
Example: Tracey encoding
Race-free FSMs may still have essential hazards
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 43

Mod-2 counter: essential hazards
Unger’s condition for essential hazards: 
state after three transitions of an input signal 7^ 
state after one transitions of the same input signal
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 44

Why essential hazards occur
No essential hazards if and only if
\delayl — delay2\ < mindelaynext + mindelay^^^
Essential hazards can be removed by controlling the delays
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 45

Delay hazards
• I/O-mode:
input b changes
after output c, but
before the output of gate
3 has. settled .
• This is a delay hazard
Delay hazards may occur under I/O-mode even in designs free 
from essential hazards
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 46

Hazard elimination methods
• Changing delays (delay padding). 
Works only for bounded delay model
• Logic transformations (circuit redundancy).
Works both for bounded and unbounded delay models
• Encoding of inputs and outputs (code redundancy) 
and/or changing allowed input transitions.
Works both for bounded and unbounded delay models
Fighting with hazards always requires some area and time overhead
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 47

Masking hazards by delay padding (1)
20
5
Controlling delays can eliminate hazards
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 48

Masking hazards by delay padding (2)
Contradictory delay 
constraints => 
controlling delays cannot 
eliminate hazards in 
general
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 49

Hazard elimination by redundant encoding
Dual-rail four-phase XOR-gate
• Function hazards .cannot be 
eliminated by changing the logic 
=> change the specification
• Hazards depend on the allowed 
input transitions: XOR-gate is 
hazard-free under unique 
input changes in the 
fundamental mode
• Redundant encoding of input 
and output signals and four 
phase signalling protocol allows 
to eliminate even functional 
hazards
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 50

Modern view on hazards and races
Classical hazard/race taxonomy is complex for sequential circuits 
even in Fundamental Mode.
It is much more complex for the I/O-mode:
• Hazards may be viewed as signal transition disabling
• Critical races may be viewed as incomplete (ambiguous) 
specifications
Hazard avoidance:
design a circuit in which transition disabling cannot occur
Critical race avoidance:
make the specification complete and unambiguous
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 51

Speed-independent design
Stable
10— 
0
Enabled (0*)
Stable
o 
Output changes 
Input changes
time
For unbounded gate delay model: 
Disabling cannot occur => no hazards
No need for a complex theory of hazards for this delay model
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 52

Critical races as incomplete state coding
FSM spec is 
ambiguous, i.e. incomplete
State assignment conflict:
< 2/1,2/2, t/3 >
next state y2'
010
0
010
1
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 53

Complete state coding
Solving state assignment 
conflicts:
Add new state signals or
Remove one of the states 
(by re-encoding, reducing 
concurrency)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 54

Data path design
Two ways to design data path:
• Synchronous data path - bundled data
• Asynchronous data path
(speed-independent = quasi delay-insensitive)
Asynchronous data path is useful if performance is data dependent 
and the average case computation delay is much less than the worst 
case delay
Two efficient methods for asynchronous data path: reduced direct 
logic (RDL) and differential cascode voltage switch logic (DCVSL)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 55

Indication
b
a
b
c
a
c
• OR-gate: 
output indicates
falling input transitions
• C-element: output indicates 
falling and rising input transi­
tions
Indication: A. Taubin (1980) 
Transition c indicates transition a 
if and only if:
• c cannot occur, without a „
• c is a completion detector for 
a.
Design idea:
• All input and internal transitions 
must be indicated by some out­
put transitions
• Choose indicating outputs to op­
timize performance/area
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 56

Differential Cascode Voltage Switch Logic
Output.t
Req
Output.f
Inputs
N transistor
network
Req ,
• Inputs are (typically) dual-rail
• Additional request signal is 
used for precharging
• Outputs are dual-rail four- 
phase (valid-empty protocol)
• Staticizers (cross-coupled in­
verters) may be needed for 
output signals
• Two cross-coupled pull-up 
transistors may improve per­
formance
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 57

Reduced direct logic
• Inputs and outputs are four- 
phase dual-rail
• No additional request signal
• Full custom design only
Design idea:
• Add a pair of p-transistors for 
each output and a pair of n- 
transistors for each dual rail 
input
• Optimize n-transistor logic
• Distribute indication of the 
inputs among the outputs
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 58

Asynchronous ripple-carry adder
A. Martin (1991)
c.t
c.f
a.t HI 
a.f HI
• Asynchronous cell transistor 
count = 34
sum.t
C.tHL C.f—II 
b.fHlj b.t —II 
a.t hl a.f HI
sum.f
b.fHI
a.t HI
b.t HI
b.t HI 
b.fHI 
cout.t
cout.f
• Synchronous cell transistor 
count (without pass transis­
tors) = 28
• Inputs and outputs are four- 
phase dual-rail
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 59

Critical delay in asynchronous adder
Indication in 
valid phase
f'Xf'x
+ 1 0 1 1 
0 0 0 1
1 1 0 0
Indication in 
empty phase
• Critical delay is proportional to log2N (N = number of bits)
It is determined by the maximal number of contiguous different bits
• 32-bit adder delay (1.6 MOSIS CMOS): 
asynchronous: 11 nsec 
synchronous: 40 nsec
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 60

Part 2: Specification and synthesis
• Specification of control
- CSP
- FSM
— Signal Transition Graphs (STG)
• STG in details: basics, limitation and extensions, timing
• Synthesis overview
• Simulation engine
• Complete state coding = race elimination
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 61

CSP
• CSP = communicating sequential processes.
• Concurrent processes communicating by input and output com­
mands on channels.
• Semantics are based on trace theory. [Udding, van de Snep- 
scheut, Rem]
• In general, techniques try to come up with quasi-delay-insensitive 
implementations
• Two main approaches: Production rule based [Martin, ...] and 
Syntax-directed decomposition [Ebergen, Berkel]
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 62

CSP PROGRAM
*[pj; ro T; [rj; ro J,; [-.rj; lo t; HJ; lo JJ
• 
= sequencing.
• 
ro f = ro goes high, ro J, ro goes low.
• 
[zj = wait until Zj is high, [-■/,] wait until Zj is low.
• 
Program meaning: li has to be high before ro goes high. The 
circuit will wait until rj goes high, before ro will go low again 
and so on ....
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 63

PRODUCTION RULES
li l—ro T 
ri ro 4- 
^ri h-> Zo T
~di I—> lo 4-
• 
production rule = boolean condition h-> transition.
• 
k •-> ro f: when 1} is high, ro will go high.
• 
^ri h-> lo f: when ri is low, lo will go high.
• 
conflict: ro t and ro I are not mutually exclusive.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 64

PRODUCTION RULES(2)
• Add a state signal to solve conflict:
*[[/J; ro T; [rj; x f; [#]; ro J,; [-rj; lo T; X 4,; [-.a;]; lo L]
• The new production rules:
-*x  A 
i—> ro t
Vi i—> x f 
x i—> ro 4­
x A i—> lo t 
-di i—> x 4- 
—}X I—>■ Iq
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 65

IMPLEMENTATION
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 66
• The production rules can now be identified with operations.
• r0 maps to an and-gate (r0 = xlj.
-*x A 
i—> ro t
x I—> ro 4-

FSM
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 67

FSM(2)
• Nodes = states, arcs = state transition
• Each arc is labeled with a pair of input/output symbols.
• input = condition for state transition to take place.
• output = values for output signals after the state transition.
• Mostly limited to fundamental mode [Unger],
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 68

BURST MODE FSM
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 69

BURST MODE FSM
• based on signal transitions rather than signal levels [Nowick, 
Yun].
• First a set of input transitions fires.
• Second a set of output transitions fires.
• Finally state variables change and take the system to another 
state.
• Mostly limited to fundamental mode [Unger].
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 70

SIGNAL TRANSITION GRAPH
TIMING DIAGRAM
inPut a 
i 
i
output c___________ z--—-----
input b^^~
STG
0"'^^ 
b+^A
° /C' \ °
a- 
b-
^c-
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 71

SIGNAL TRANSITION GRAPH(2)
• Vertices represent signal transitions.
• Arcs represent causal relations between transitions.
• Introduced by [Molnar 85] [Chu 87] [Rosenblum 85]
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 72

SIGNAL TRANSITION GRAPH (3)
STG
PETRI NET
STG is an interpreted Petri net.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 73

CONSISTENCY
INCONSISTENT
CONSISTENT
A+---------- ► A+
Two subsequent up-transitions 
without a down-transition in between
A+---------- A A- ---------- A a+
A- ---------- ► A-
x+
/ 
X
A-> 
\+
Two subsequent down-transitions 
without an up-transition in between
Parallel transitions of the same signal
Two up-transitions with a down-transition 
in between (and vice versa)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 74

MODELING POWER
CONCURRENCY
a- concurrent with b-
EITHER a- fires before b­
OR b- fires before a-
OR a- and b- fire simultaneously
EITHER a- fires
CHOICE
OR b- fires 
but not both
choice made by environment
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 75

FIRING SEMANTICS
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 76

SYNTHESIS
(Signal Transition Graph)
Translation
(Petri Net)
Token flow simulation
direct
method
Encoding
(State Graph)
(Karnaugh Map)
Logic synthesis 
(Logic equations)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 77

REACHABILITY GRAPH
• Vertices represent states the circuit can be in.
• Arcs represent transition from one state to another.
• Can be derived from the Petri net by simulating the token flow.
• Easiest representation to do analysis on.
• Size may be exponential in the number of transitions.
• Similar to trace structures [Dill], transition diagrams [Muller].
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 78

REACHABILITY GRAPH(2)
STATE {p1,p4}
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 79

STATE GRAPH
{ 
{p1,p2}
a^ \b+
{p2,p3} 
{p1,p4}
b+X a a+
{p3,p4} 
_______
c+ 
_PMrnr
0 
^000^
1 a^/\b+
/ ® 
(GW)
b+\.,/a+ 
d^O) 
c+
{p5,p6}
a^/ ^^:
{p6,p7} 
{p5,p8}
\ 
b^\ /^a-
\ 
{p7,p8}
c-
REACHABILITY GRAPH
Q1P 
a-^^^\b" 
(Gw 
doD
\ 
b-\ 
a-
\ 
CO0D
c-
STATE GRAPH
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 80

ENCODING
signal a signal b
q0^ signal a and b low 
a^z\b+
signal a high, Q°^ 
C51^ signal a low,
signal b low 
signal b high
• Every state is assigned a code.
• This code is determined by signals in the Petri net.
• Based on this code, logical equations can be derived.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 81

EQUATIONS
STATE GRAPH
K-MAP
1
c
ab
r\ 00 
01 
11 
10
c
0
0
0
1
0
0
1
1
1
LOGIC EQUATIONS
c = ab + ac + bc
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 82

EQUATIONS(2)
• State 000: c is assigned 0 because c stays low in this state.
• State Oil: c is assigned 1 because c goes high in this state 
(c+ is enabled).
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 83

LIMITATIONS
• The advantages of STG.
— Concurrency of signal transitions.
— Conditional behavior based on signal transitions.
• The disadvantages of STG.
— Conditional behavior based on signal levels.
— No timing information just relative ordering of events.
— No don’t care behavior.
— No or-node behavior.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 84

LEVELS AND TRANSITIONS
0 bit
1 bit
stop command
Protocol distinguishing
start command
different situations.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 85

STG WITH EXTENSIONS
SDA#
SDAs
DON’T CARE
• extensions proposed by [Moon et al]
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 86

OR PRECEDENCE
a+ 
b+
\ /
X If
c+
c c goes high after a and b 
have gone high
c goes high after a OR b 
have gone high
NO CHOICE!!
• This behavior is hard to model with classical Petri nets.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 87

DON’T CARE & UNDEFINED BEHAVIOR
CK+ ------- ► I# ------- ► Is ------- ► CK-
(b)
• I#: signal I becomes unstable.
• Is: signal I becomes stable. The level is unknown.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 88

LEVEL TRANSITIONS
out
a
b
• Pulse on a sets out to 0, Pulse on b sets out to 1.
• Pulses may come in any order.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 89

BOOLEAN GUARDS
• Xlr X2 are Boolean characteristic functions.
• Functions determine (together with tokens) which transition is 
enabled.
i = 0^----- X1 / \X2-------►! = 1
t1 
t2
• t± is enabled if p contains a token AND signal i = 0.
• t2 is enabled if p contains a token AND signal i = 1.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 90

TRANSLATION TO STATE GRAPH
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 91

TIMING: SPECIFICATION
• Environment: if A goes high, B will go high 20 to 40 ns. later.
• Circuit: if A goes high UP needs to go high before B and 
needs to stay high at east 30 ns.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 92

TIMING: SPECIFICATION^)
Delay 
relation
------- -4---------------
A -------rV'Y[20-40]
B ---------/
UP------ 1-------J >30
\ / 
\ /
\
Specification 
relation
Tolerance
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 93

TIMING: SPECIFICATION^)
• Specification relations indicate how the circuit should react, 
if synthesized correctly.
• Delay relations indicate how an existing circuit 
(or environment) reacts.
• Tolerance: delays are not fixed numbers, but intervals 
(even more complex symbolic representation is possible).
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 94

TIMING CONSTRAINTS
• Analysis of timing constraints [Rokicki, Hulgaard, Burns, Dill, 
Berthomieu, Amon, Walkup].
• Take into account analysis results [Myers].
• Active synthesis to satisfy timing constraints [Borriello, Van- 
bekbergen].
• Still a lot of research needed in this area.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 95

TIMING: ANALYSIS
• Hard problem in its full generality [Berthomieu].
• Efficient solution by Rockiki (but might still be exponential).
• Polynomial solutions with various restrictions [Dill, Amon].
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 96

TIMING: SYNTHESIS
• Solutions with varying restrictions [Borriello, Vanbekbergen].
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 97

SYNTHESIS: OVERVIEW
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 98

SYNTHESIS: OVERVIEW(2)
• Simulation at high level (specification) and low level (circuit)
• Start from AFSM or STG
• Race-elimination by state graph transformation
• First step hazard-elimination (technology independent)
• Second step hazard-elimination (technology dependent)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 99

SYNTHESIS: OVERVIEW(3)
• Map to any library. The library may contain special elements 
to get better results, but synthesis should not rely on it.
• Library elements need to be hazard-free.
• Tolerance factor indicating how much delays of cells in library 
may vary.
• Back-annotation.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 100

WHY VHDL?
• The need for a consistent language for all digital applications 
(synchronous and asynchronous).
• Tools (simulators) for free.
• The complete design can be validated at different levels of 
abstraction.
• Useful for debugging software prototypes ...
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 101

SIMULATION ENVIRONMENT
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 102

ARCHITECTURE
outputs 
state 
signals
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 103

VHDL MODEL
pl p P2 
s+
p3 
P3
• State = set of tokens in places
• A vector of Booleans: places
— places(l) = 1 if place pi contains a token.
— places^l) = 0 if place p± does not contain a token.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 104

VHDL MODEL(2)
BLOCK (places(1) = ’1’ AND places(2) = ’1’) 
BEGIN
places(1) <= GUARDED ’0’;
places(2) <= GUARDED ’0’;
places(3) <= GUARDED ’1’;
places(4) <= GUARDED ’1’;
s <= GUARDED ’1’;
END;
• Every transition possibly concurrent with any other transition
• ONE block per transition
• Token flow modeled inside the block
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 105

CONDITIONS IN VHDL
pcond controls 
conditional execution
enables a different 
transition for each
"pass"
BLOCK (places(1) = ’1’ AND pcond = ’0’) 
BEGIN
places(1) <= GUARDED ’0’;
s1 <= GUARDED ’1’;
pcond <= GUARDED ’1’;
END;
BLOCK (places(1) = ’1’ AND pcond = ’1’) 
BEGIN
places(1) <= GUARDED ’0’;
s2 <= GUARDED ’1’;
pcond <= GUARDED ’0’;
END;
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 106

ASSERTION
• All blocks are possibly concurrent.
• In VHDL a resolution function is needed.
• STG is only correct if no two transitions of the same signal are 
enabled at the same time.
• Assertion in the resolution function that there are no two 
simultaneous assignments to the same signal.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 107

ASSERTIONS)
?
s+
p1
ASSERT (s’STABLE = TRUE OR places(1) = ’1’ OR ... )
Gives info about
— where?
— which signal?
— which type of violation?
Debugging circuit AND environment
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 108

TESTBENCH
• Testbench = behavioral VHDL of “inverse” STG (inputs and 
outputs switched).
• Use of same procedure as the one generating behavioral VHDL 
(not written by designer)
• Assumes that the environment is the fastest possible.
• Not complete (like verification), but many errors found this 
way.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 109

RACE: MODELING
• Races are most easily detected at state graph level.
• No race if the logic equations can be derived unambiguously.
• Sufficient condition:
All states are assigned a unique code 
Unique State Coding (USC)
• A less tight sufficient condition:
Complete State Coding (CSC)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 110

COMPLETE STATE CODING
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 111

RACE ELIMINATION
• Race-elimination is enforcing CSC (or USC).
• Which route to take?
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 112

RACE ELIMINATION^)
1. STG-LEVEL [Kondratyev, Yakovlev, Lin, Pastor]
• Avoids the state graph level (run-time efficiency).
• Circuits not always efficient [Kondratyev] or restrictions on 
type of specification handled [Yakovlev, Lin, Pastor].
2. STATE GRAPH LEVEL [Lavagno, Ykman, Puri, Vanbekber- 
gen]
• Can be very computation intensive.
• Very general technique which can handle more general 
specifications than (1).
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 113

DIRECT METHOD
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 114

STG-LEVEL METHOD
• Works directly at STG-level and thus avoids state-explosion
• Restrictions:
— No choices
— Every signal has one up- and down-transition [Yakovlev]
• Extensions:
— Choice [Lin, Pastor]
— Signal may have more than one up- and down-transition 
[Lin, Ykman, Pastor]
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 115

STG-LEVEL METHOD(2)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 116

STG-LEVEL METHOD(3)
A+
STG
B+
A-
B-
ADD SIGNAL
STATE GRAPH
00
A+
B+
NEW STG
C+
NEW STATE GRAPH
B+
A+
101
10
B+
01
.. A A+
11
■ A-
01
B-
J
A-
B-
C-
1 001 .
C-
C-
000
A+
100
B+
B+
A+
110
c+ ;
111
a- ';
011
010
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 117

LOCK RELATION
• The main problem: we want to transform the STG to satisfy 
a property which is defined at state graph level.
• A theory is needed that transforms the CSC or USC property 
to the STG-level
Two signals A and B are locked 
iff
the transitions of the two signals reside 
on a simple cycle in an alternating way
Corresponds to handshake protocol
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 118

LOCK GRAPH
The vertices correspond to the signals
B
C
There is an arc between two vertices if the 
corresponding signals in the STG are locked.
D
Lock Graph = connected
STG satisfies USC
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 119

LOCK THEOREM
OLD STG-------- * lock graph NOT connected
TRANSFORM
1r 
NEW STG-------- ► lock graph connected
• Adding arcs.
• Adding new signals (and transitions).
• If necessary, taking into account timing constraints.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 120

INTUITION
• A complementary set is a set of transitions such that if a+ is 
in the set then also a~ and vice versa.
• Firing a complementary set leads to states with the same code, 
(for instance {a+,R^,A^,r+} in the next example (a)).
• The only allowed complementary set that you can fire is the 
set containing all transitions.
• Locking makes sure that no complementary subset of transi­
tions is fireable.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 121

LOCK EXAMPLE
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 122

STATE GRAPH LEVEL METHOD
• Transforms the problem into a satisfiability problem.
• Very computation intensive.
• Very few restrictions:
— General Petri nets (with all extensions).
— General transformations (concurrent transitions).
• Partitioning [Puri] and Heuristics [Lavagno, Ykman] to improve 
efficiency of circuit and computation time.
• Concurrency reduction [Ykman].
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 123

STATE ASSIGNMENT
• “Expand” a state graph into a new state graph that satisfies 
CSC.
• 4-value assignment set: {0,1, UP, DOWN}.
• Meaning of assigning a value to a state P for signal S.
— P is assigned 0: S is low in P
— P is assigned 1: S is high in P
— P is assigned UP: P will be expanded in two states with 
connecting both states.
— P is assigned DOWN: P will be expanded in two states with 
S~ connecting both states.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 124

STATE ASSIGNMENT^)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 125

STATE ASSIGNMENT^)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 126

DECOMPOSITION METHOD
(d,e,f) 
projection
IMPLEMENT
(a,f) 
projection
a2
f2
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 127

Part 3: Hazard-free synthesis and testability
• Hazard-free synthesis based on logic transformations. 
Unbounded gate delays
• Hazard-free synthesis based on changing delays. 
Bounded wire delays
• Synthesis of non-deterministic asynchronous circuits. 
Meta-stability problem
• Testing
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 128

Hazard-free synthesis
• Input: STG (or SG) with CSC
• Output: logic circuit implementing the STG
— correctly (no hazards, no races)
— with minimal cost (area/delay/power/testability)
• Direct methods (syntax-driven from STG): fast but potentially 
suboptimal
• Synthesis-based methods
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 129

STG-based synthesis
• Absence of races guaranteed by construction (only STG signals 
can be fed back)
• Absence of hazards can be achieved:
— by acknowledgment/indication (each gate has some other 
gate that “checks” when its transition is completed, to 
avoid hazards)
— by insertion of appropriate delays
• Minimality is achieved by logic synthesis (special methods for 
two-level and multi-level implementations)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 130

Synthesis with unbounded gate delays
• Muller (59): formal analysis method, but only design hints
• Martin (86, ...): syntax-directed translation, then QDI-preserving 
optimization
• Varshavsky (90): syntax-directed translation from STG
• Beerel (92): improves with heuristic SG-level technique based 
on “monotonous switching” of cubes
• Kondratyev (93, ...): necessary and sufficient conditions for 
monotonous switching, STG- and SG-level synthesis techniques
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 131

Driving and supporting gates
STG
■ 
*x-
x+ 
z-
'.'■'■, 
-y-
x = zy ■ zx
Complex gate - no hazards
Simple gates - hazards
• All internal signal transitions must propagate to the output 
(acknowledgement principle applied to individual gates)
• Driving gates: “good”, supporting gates: “bad”
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 132

Implementation structures
Signal implementation
C-latch
S=0, R=1 
a-
Each signal transition 
produces an AND gate
• a+ sets the latch
• a— resets the latch
BASIC ARCHITECTURES
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 133

Regions of the state graph
• Synthesis idea: Set of concurrent transitions =^> cover cube 
in R or S function => driving gate
v.
0*0*1
zyx
^000*
Quiescent 
region +z
1*10
V 
01*0
Cube x 
(Sz = x)
Excitation 
region +z
• Excitation region (ER) must 
be covered by one cube
• Quiescent region (QR) is a 
don’t care set for a cover 
cube
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 134

Monotonous cover conditions
abcd
a- a-
1*000
00
*00
0*10
*0
b-
a+ c-
110
*0
 
0*110
_ER(d+)_ 11110
*!
cube abc 1*111
 QR(d+) 
......... 7... ।.... ;
cube ac / 01*11
......... 0*01
*1
101
*1
Cover cube C is a monotonous cover 
for ERM iff:
1. C covers all states ER(a
)*
2. C covers no states outside 
ER(a
)
 U QR(a
)
*
*
3. C changes only once inside QR(a
)*
0*001
EI^1J0O1V=
• Monotonous cover =^> Si-implementation
• Restricted (but useful and realistic) architecture
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 135

Reduction to monotonous cover form
b+
d-
a+
b-
a-
b+
c+
b-
c-
d+
Cubes {b d, c} form a correct 
non-monotonous cover of 
ER(a+\.
— none covers all states of 
ER(a+)
— due to non-persistency of c,d 
wrt a+
After insertion of x\
cube bx is a monotonous cover
• Externally observable behavior is preserved
• Sufficient condition: any MC violation can be eliminated with 
at most two added signals
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 136

Extensions of monotonous cover theory
• Exact SG-based procedure based on state labeling 
(similar to state encoding)
• Theory can be extended to handle complex gates:
— monotonicity conditions must hold for a set of cubes
— each transition in ER must be covered by at least one cube 
of the gate
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 137

Synthesis with bounded wire delays
• Unger (69): summary of classical techniques for asynchronous 
FSMs
• Lavagno (91, ...): hazard-free synthesis from STGs
• Nowick (91): (92): synthesis of self-clocked asynchronous 
FSMs
• Yun (92): hazard-free synthesis of asynchronous FSMs
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 138

Synthesis of bounded-delay circuits from STG
O1
O2
• One combinational logic block for each STG non-input signal
• Decouple hazards from races
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 139

Synthesis algorithm properties
Two classes of hazards: 
— from concurrent transitions 
— from ordered transitions
The initial synthesis algorithm guarantees no hazards from con­
current transitions
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 140

Two-level circuit representation
• Prime cube: no literal can be removed
• Irredundant circuit: no connection can be removed
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 141

Initial synthesis algorithm
- build the SG from the STG
- for each non-input signal o
- for each state s
- for each maximal set T of transitions 
concurrently enabled in s
whose firing does not change the implied value of o 
- generate a function cube
that does not depend on signals in T
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 142

Synthesis algorithm example
• Synthesize signal z
• Current state xyz
• Enabled transitions: {x-,y+}
z+
V
1*  0*  1
• Added cubes: ... + yz + xz...
x- 
+y+
0 0*  1 
1*  1 1
x'-'"'"^ x—^x-
0 1 1*
z Enabled transitions that do not 
v z
cause the implied value to change:
Ti = {a;-}, T2 = {y+}
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 143

Properties of initial synthesis algorithm
• Guarantees two-level implementation in which and gates are 
stable when concurrent transitions fire
• Circuit is hazard-free with respect to concurrent transitions
• Optimizing the circuit using only distributivity associativity and 
DeMorgan preserves this property (Unger ’67)
=^> We can use standard (restricted) logic synthesis and 
technology mapping !
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 144

Remaining hazards
• Ordered transitions: y-\—> z— 
(x should not be affected)
• Corresponding circuit:
dy-^-x
y
S-
dy=^Z
dz^
Q
x
R
• Hazard if dy^x > dy^z + dz^x (transition order reversed for x)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 145

Hazard detection algorithm
- for each output signal o
- for each pair (s', s") of SG states
between which the implied value of x does not change
- for each pair of ordered transitions (?/  
z)
*
*
between s' and s"
- if dy^x > dy^z + dz^x then report a hazard
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 146

Hazard detection example
0 0*  1
| y+
0 1 1*
| z-
0 1 0
(x must remain at 0)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 147

Hazard elimination idea
For each case in which a hazard exists if dy=^x > dy^z + dz^x
— if possible, balance dy^x and dz^x
— otherwise, increase dy=?z
dy=^x
Eliminating one hazard does not make any other hazard worse: 
— dy=^x and dz=^x are measured before the padded delay 
— dy^z is measured after the padded delay
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 148

Analogy with synchronous circuits
• In classical synchronous circuit synthesis:
— slow down the clock until all events complete propagation
• In bounded delay asynchronous circuit synthesis:
— slow down each signal until all events that caused its tran­
sition complete propagation
• We can use similar timing analysis techniques for the combi­
national logic blocks...
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 149

Hazard elimination procedure
• Each hazard is associated with a triple of delays:
(ly=^x
y
S
Q
dy=^z
dz^X
R
• dy^x and dz^x measured on the circuit (timing analysis)
• dy^z measured on the STG
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 150

Delay estimation on the STG
• Example: delay between x-\- and z—
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 151
• A transition x* fires only when all its predecessors have fired
• Associate a variable Dx* with its minimal firing time
• The minimal firing time of x* is
the max among the minimal firing times of its predecessors 
plus its own delay

Delay estimation example
$z+=>x—
z 
Z'
X + r
x X- 6t_^z_
z 
z z-
y+
Da
Dy-\- 
^x-\- 
$x-\-=>y-\- Sy
( 1
Dz_ = max 1
y-
Dz-\- = Dx+ + 5x+^z+ + Sz
DX- = Dz+ + Sz+^x- + Sx
Jy-\- + 
A 1 5
)T_ + 8x— => z— J
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 152

Hazard elimination conditions
• For each hazard (?/
*,.?
*,
 a?)
• Find a minimum cost assignment to the Si variables that sat­
isfies all the inequalities
~~ 0
for each transition z*  on an STG path between y*  and z*
— MAXj
*
 precedes+ 
+ Si
Dz* > dz=^X dy^x
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 153

Summary of logic synthesis
• Different algorithms for different delay models
— neglecting wire delays, robust with respect to gate delays
— considering wire delays but assuming bounds on them
• In any case, post-layout timing analysis is required
• Hierarchical decomposition:
— bounded delays within blocks
— unbounded wire delays between blocks
What is the right granularity ?
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 154

Meta-stability problem
• Feedback (output) transition disabled by an input or an output 
transition
• May last for an unbounded amount of time
• Unavoidable with digital circuits (Molnar ’73)
• Can be “hidden” with analog circuitry (Seitz ’80)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 155

Example: a transparent latch
D
Ck
Q
>Tsetup
>Tsetup
(a)
D
Ck
>Thold
>Thold
(b)
Q
(c)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 156

Meta-stability and STGs
• Manifestation: disabled output transition
Q+ 
110 -------Q------- 111
A 
D+ 
010 *
• Solution: insert wait and signal primitive to allow
— either the disabled transition
— or the disabling transition 
to fire
Ck- 
100
A
D+
000
Ck+
Ck+ 
Ck-
Q-
D­
V
011
Ck+
Ck-
Ck+
101
D­
001
Ck-
(b)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 157

ME insertion in latch STG
Ck+
Q+
s(b)
D+
w(a)
Ck-
w(b)
s(a)
E
w(a)
Q-
Ck+
Q+
D+
w(a)
E
w(a)
Q-
Ck-
w(b)
• Unsafeness avoided by causality or timing constraints
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 158

Request/acknowledge expansion
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 159

Final asynchronous latch implementation
d
Transparent latch with stoppable clock...
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 160

Synthesis approach
• Detect non-persistent output transitions
• Define critical sections and insert ME Req/Ack signals 
(minimization, to cover only independent conflicts)
• Synthesize the conflict-free STG
• Add MUTEXes to the circuit, to implement Req/Ack pairs
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 161

Asynchronous circuit testing
• Traditionally considered difficult
• Not much worse than synchronous case if a systematic design 
methodology is followed
• Delay-fault testing is generally required: 
correctness only under specific delay hypotheses 
(zero or bounded wire delay)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 162

Asynchronous circuit testing
• Speed-independent circuits are self-checking (Armstrong 69, 
Varshavsky 90, Beerel 91, ...), but only
— for output stuck-at faults
— if delay-faults do not invalidate the gate delay model
• Full-scan decomposition-based methodology (Keutzer 91)
• Partial-scan phase splitting-based methodology (Kishinevsky 
94)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 163

Hazard-free testing vs. operation
• Hazard-free testing: for each fault:
— there exists a sequence of vectors that do not cause hazards 
and test the fault under every timing condition
— the vectors are produced by scan flip-flops: scanout a
• Hazard-free operation: for each vector sequence:
— that conforms to the circuit specification
— the sequence cannot cause a hazard under any timing con­
dition
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 164

Definitions
• Asynchronous circuits often require redundant
— gates (bounded wire delay) or
— gate inputs (unbounded gate delay)
• Redundancy vs. single cube containment:
yz
x \ 00 01 11 10
0
1
0
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 165

Testing by phase splitting
• A circuit is unate if for all gates g for all inputs i, all paths 
from i to g have the same number of inversions
• Unate circuits are easy to test
• Full stuck-at and robust path-delay fault testability, with only 
two weak constraints:
— no single-cube-containment
— only algebraic operations can be used for optimization from 
two-1 eve I
• Use special phase-splitting flip-flops
(independent outputs in test mode)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 166

Phase-splitting flip-flops
• Only three combinations of Q and Q values are needed
=> no need to break the feedback loop
(reduces meta-stability probability)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 167

Design-for-testability procedure
• Design the circuit using any delay model
• Select paths that must be tested for hazard-free operation
• Full scan: every non-input signal implemented with a scan FF
=^> combinational test pattern generation
• Partial scan: every “external” feedback broken by at least one 
scan FF
=^> requires sequential ATPG to initialize non-scan FFs
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 168

Part 4: Verification
• What is verification
• Circuit analysis
• Checking specifications
• Comparing specifications and implementations
• Fighting with state explosion
• Timing verification
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 169

Verification
• Checking properties of a specification 
Example: Given an STG describing a bus protocol, check that 
— it does not deadlock
— it can be implemented by an asynchronous circuit
• Checking properties of an implementation 
Example: Given a circuit check that 
— it is speed-independent
— it correctly implements a given STG specification
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 170

Verification in design flow
Verification is needed both for top-down and bottom-up design
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 171

Fight with state explosion
• Efficient state representation
— BDD-based techniques (Bryant, Cortadella et al.)
— State space reduction (Kishinevsky)
• Use of event-based models
— Unfoldings of Petri Nets and STGs (McMillan, Kondratyev 
et aL, Esparza)
— Stubborn sets (Valmari)
— Partial orders (Probst, Godefroid)
— Reduction of nets (Murata, Esparza)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 172

Speed-independence (D. Muller’56)
State Graph
a = c
, 
_ 
10*0 
'*01x
b = c 
z \ 
X
c = a b + c (a+b) 
<a,b,c>: 0*0*0^
------X10
*^1
*1*X
-------*001
*-
Initial state: <a,b,c> = 000 
0*10 
01*1
There are no disabled transitions 1*  —> 1 and 0*  x 0 
in the state graph
Circuit is speed-independent
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 173

Checking speed-independence
a = c
b = c
c = a + b
State Graph 
Conflict states
<a,b,c>:
Initial state: <a,b,c> = 000
uo
*_0
*^
—------- 1*0  1*01.
0*0*0
 ------A10^1
*1*1
--------- ^001
*-,
<0
*10
*
------------------- - 01
*1
Conflict state: one signal transition is disabled by another signal 
transition, e.g., 10
*0*
 
1*01
Circuit is not speed-independent (or, more precisely, not semi- 
modular)
Analysis for speed-independence:
(1) traverse states and
(2) check that no conflict states are reachable
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 174

State reduction
• Use actual gate interconnections
• Only concurrent input transitions may cause an output transition
• Micropipeline control queue: run time reduced from 1 hour to 1 sec 
=> in highly parallel circuits most of the states are useless for verification
• Efficient for fighting with concurrency. Choice and OR-causality are difficult 
to handle
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 175

What is implementation?
On
the
I u O circuit shows
same language as STG
I/O-implementability
Circuit and STG have exactly the same I u O set.
Interface is preserved
Implementability
New inputs and outputs can be added to a circuit. 
Interface is not preserved
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 176

Circuit synthesis from an STG
• Boundedness
a+
two iterations
a^a-
b+
V 
b-
• Consistent state 
assignment (CSA)
(Chu’87)
... —>• a+ —b+ —a+ —
ab: 0*0
 -a+10
*-
b+1ba+ ?1
• Complete state coding, CSC
Boundedness + CSA + CSC <=> circuit
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 177

Implementability by speed-independent circuit
Signal Persistency:
disabling transitions
1. Non-input signals cannot be disabled
b+
• > a+
2. Inputs cannot be disabled by non-inputs
V 
V
c+ 
d-
Boundedness + CSA + CSC + Persistency <=>• Si-circuit
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 178

I/O implementability
• Irreducible CSC conflicts:
cannot be solved without changing interface
• All CSC-conflicts are reducible if STG
— Deterministic
— Commutative 
'af 
aj+
is:
s1 
a+ /
si
a+
s2
s3
— No complementary
must be different signals
b+
a+
Vs2
a-
V
must be
„ > non-input
input sequences
V 
s3
must be the same state
Implementability + CSC-reducibility 7/O-implementability
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 179

BDD representation of reachable states
All reachable markings (reachability set): 
plp2 p3 + plp2p3 + pl p2p3
p1 p2 p3
p1 p2 p3
p1 p2 p3
The characteristic function of the reachability set can be 
represented by a reduced ordered BDD
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 180

Symbolic traversal of STG
Each property is represented by a characteristic function
Full state = marking + binary state of signals
-Vn = P1P2P3
So = PlP2P3db
Ef 
— Pi G enabled) 
ASMf = JJ p7 
(succ. marked)
Pi€9t 
pi£f
NPMf = JJ pi (pred. unmarked) NSMf = JJ Pi (succ.unmarked)
Pi€9t 
pi£f
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 181

Checking properties via traversal
One-step reachability: 6N(M,t) = (Mp * NPMt)NSM. * ASMt 
I—t 
t
pl p2 p3 a b
pl p2 p3 a b pl p2 p3 a b
Consistency:
Inconsistent(a) = E(a+) * a + E(a-)
*a
Persistency:
$n( Ea_|_, &+) * Ea+ 0
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 182

TOWARDS EFFICIENT TRAVERSAL
• Variables ordering in BDD
BDD 
size
100000
— Place var. => by position in simple cycles 
(Simple cycle => One-hot-encoding => 
Linear size BDD)
10000
1000
— Signal variables => by preceding on places
100
• The traversal order
(Transitions in traversal are chosen by precedence)
A
A''
A-''
a
A''
a. - -© " &
A _•€>-' "cr 
o "
d------I------I------1------1------I------F
24 
68
H------
# of phil.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 183

Unfolded Petri net
• Occurrence net = 
an infinite unfolded 
Petri Net
• All forward conflicts 
are split
p6
f’
d’
p6
p2
p1 
p2’’
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 184

Truncating occurrence nets
• Unfolding is a finite prefix of the occurrence net
• Unfolding is complete: no reachable marking of the initial net is missing
• Cutoff is a transition in the occurrence net whose successors can be safely 
removed. Cutoffs are chosen by observing local configurations.
• Configuration of t' = all transitions that must fire before t'
• Basic marking of t' = marking after all transitions from the local config­
uration of t' have fired
• Cutoffs:
(1) if basic-marking(t/)= basic-marking(tzz) and
size-of-configuration(tz) < size-of-configuration(tzz) then t" - cutoff
(2) if configurations have the same size then check concurrent cutoffs
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 185

Unfoldings
p1’
a’
p3’
d’
p6
f’
p2
p1’’
p2’’’
p1’’’ 
p2’’
p4’
a’
d’
p6’
p1’’
Unfolding p3’
p1’
p4’
p2’’’
p2’’
• Basic markings of 
d' and e' are equal
• Configuration of 
= {af,d',cf}
• Ordering relations are easy to derive:
a' and c' are concurrent, a' precedes f', a' and e' are in conflict
• All reachable markings are present in unfolding -<=> 
all properties of nets can be studied by unfoldings
• In many cases it is more efficient than BDD traversal since the ordering 
relations can be used
(depends on the property and the net)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 186

Verification in trace theory
Dill, Rem, Udding, van de Snepscheut, Ebergen
• Specification of Join: 
pref  [a?; d]|[pref  [&?; d] 
a?,6? are input; d is output
*
*
• Does a C-element implement the Join?
• Mirror of the spec = environment: 
inputs outputs:
pref * [a!; c?]| pref * [d; c?]
circuit = mirror of the spec
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 187

Failure states and hazardous behavior
Fork (spec’s mirror):
C-element
a
q1
c?
Failure
q3
b!
q1
a?
Fork || C-element:
Hazardous behavior (non speed-independence) = 
failure states are reachable in the composite state graph
It also shows that the circuit does not implement the spec
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 188

Incorrect implementation
Fork: 
State graph for OR:
OR || Fork:
q0q1’ a
Failure
q1q2’
b
V
q2q3’-----------q3q0’
a 
+c
q5q2’ "*= ----------q4q1’
b
\ v
(dp q’q0’*p
bt
q6q3’
b
a
OR-gate is not an implementation for the Join
Failure state is reachable =p an oscillator OR-gate + two inverters 
is not speed-independent
Compare with speed-independence analysis
Parallel composition of state graphs is inefficient
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 189

Parallel traversal on BDD
Circuit
Signal c is enabled in the circuit but not in the environment
Failure detection:
Reachable * Enabled^circuit) * not(Enabled(STGy) 7^ 0
To make it efficient do it on BDDs (Roig’94)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 190

Parallel traversal on unfoldings
Enabled
a+
Circuit
c+
b+
Unfold (1) PN-environment and (2) a PN-description of the circuit
Failure: output transition is enabled in the circuit and the corresponding input 
transition is not enabled in the environment (McMillan’95)
Check failure conditions by traversing the unfolding of the composition on-the- 
fiy
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 191

Timing verification.!
• All states inside one time-region are equivalent
• How to partition timed state space into time regions?
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 192

Timing verification.2
Time is a real number => the state space is infinite.
For finite-state verification:
• Discrete time: correct for important subclasses (orbital nets) 
(Rokicki, Henzinger)
• Unit cube time: partition time-states into equivalent classes (Alur)
• Geometric time regions: convex regions of timed states constrained by 
inequalities clocki — clockj < constant (Dill, Rokicki, Lewis, Halbwachs)
Discrete time and unit cube time have better worst case state space size.
In practice, geometrical time works better
Geometric time regions + partial orders are the most efficient
(Orbital nets, Rokicki and Unique-choice nets, Hulgaard, Burns)
Use verification plus simulation (VHDL, Verilog)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 193

Part5: Practical applications
• Interface design: VME-bus controller
• Processors:
(1) AMULET1 and AMULET2
(ARM group, Manchester Univ., Furber)
(2) Counterflow Pipeline RISC
(Sun Microsystem Labs, Sproull,Sutherland,Molnar)
• DSP-applications: DCC error corrector
(Philips Research Labs, Kees van Berkel)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 194

The VMEbus master interface protocol
read/write cycle
idle cycle
> 90 ns
bcsl
brl
bgninl
bbsyl
asl
borgtl
basl
bwrl
writel
dtackl
> 40 ns
bgnoutl
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 195

The VMEbus master interface protocol
• Decompose into arbitration and read/write protocol:
— simplify specification and synthesis tasks
— separate the arbitration component
(meta-stability)
• Both decomposed STGs must agree on the partial order of 
common transitions
(“net contraction”, Chu ’87, or “hiding’, Dill ’88)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 196

The arbitration STG
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 197

A meta-stability problem
• We must latch and wait...
(or use a mutual exclusion element)
bgninl
bgninl_del
bcsl_del
bgninl
bgninl_del
bcsl_del
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 198

(Half of) the read/write STG
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 199

State encoding
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 200

Initial implementation
bgnoutl 
bbsyl
brl 
borgtl
aslout
writel 
isO
bbsyl + best ♦ bgnoutl + bgninl 
bbsyl90 ♦ bgninl + bbsyl ♦ bcsl + 
bbsyl ♦ bgninl + bgnoutl 
bcsl + borgtl + TsO
aslin ♦ borgtl + bbsyl ♦ bcsl ♦ writel + 
borgtl • isO
aslout • isO + basl + borgtl40 + 
bwrl ♦ writel + dtackl
aslout ♦ isO + borgtl + bwrl + dtackl 
aslin ♦ borgtl + bbsyl ♦ isO + 
borgtl ♦ isO + brl ♦ isO
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 201

Final implementation (XILINX 3000 or SC)
bcsl_del 
bgninl_del 
bbsyl
bgnoutl
is0 
borgtl 
bcsl
brl
is0 
aslout 
borgtl 
dtackl 
bwrl
writel
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 202

Hazard example
• 
$aslout+,dtackl+ ^dtackl, writel — ^aslout, writel then WkitOl ITI8y 
have a 0—>1—>0—>1 hazard
is0 
aslout 
borgtl 
dtackl 
bwrl
writel
isO = 1, aslout = 0^1, borgtl = 0 (—> 1), 
dtackl = 0 —> 1, bwrl = 0 (—> 1)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 203

AMULET processor
• 
AMULET is an asynchronous implementation of the 
ARM microprocessor
• 
Goal: microprocessor design with low power consumption 
(DEC Alpha - 30 watts)
• 
AMULET1 - two-phase bundled data design « 
two-phase speed-independent control + synchronous data path
• 
AMULET2 - four-phase bundled data design « 
four-phase speed-independent control + synchronous data path
S. Furber 1995
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 204

Micropipelines
Sutherland’s micropipeline:
Control path = Muller pipeline
Data path = Event controlled latches (Capture and Pass)
Data
Control
Rout
Rin
Aout
Ain
—tr transfer => no transfer
Micropipeline structure
Muller control pipeline
Control operation
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 205

Two-phase control, two-phase data path
phi1
phi2
Two-phase clocking
—tr transfer
no transfer
Sutherland’s micropipeline 
with two-phase ’capture-pass’ 
latch
Two-phase register cell is 
too large and too slow 
=> level sensitive (four- 
phase) transparent latches 
+ two-phase to four-phase 
converters for controlling a 
register (Amuletl)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 206

Two-phase control, four-phase data path
One transition at Rin 
forces two transitions 
at the latch control
Enable 
data in
Latch
weak
data out
Two-phase to four-phase control conversion is too expensive 
=> four-phase control +
level sensitive (four-phase) transparent latches (Amulet2)
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 207

Four-phase control, four-phase data path
Only half of the cells of a Muller pipeline can be filled with data
With four-phase control a pipeline can be made dense
Extra memory is needed in the control to distinguish between the old and new 
value
Day pipeline (with hazards) => speed-independent pipeline was obtained by syn­
thesis (Forcage)
Four-phase control: 30% faster and consumes 30% less power than two-phase
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 208

Amulet results
Amuletl/ES2
ARM6
Process
1 /i m
1 /i m
Area(mm)
5.5x 4.1
4.1 x 2.7
Transistors
58,374
33,494
Performance
20.5 kDhry
33.5 kDhry
Multiplier
5.3 ns/bit
25ns/bit
MIPS/W
77
120
Amulet2 expectations: 3 times better than Amuletl 
on the same fabrication process
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 209

Counterflow Pipeline Processor Architecture
• Conventional RISC pipeline:
instructions and data flow in one direction
• Counterflow pipeline:
instructions and data flow in opposite directions
• [Sproull, Sutherland, Molnar 94] Sun Microsystems Labs.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 210

CFPP advantages and disadvantages
• Potential advantages:
— Local control - no need in global ’’pipeline stall” signals
— Regular and modular structure (proof of correctness is easy to get)
— Local communication between pipeline stages
• Potential disadvantages:
— Sinchronization between two flows requires arbiters 
(many points of metastability)
— Low latency
— Control hazards (traps, branches) require invalidating wrong results
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 211

A simplified counterflow pipeline structure
Instructions
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 212

Control structure
Events:
AI - accept instruction
PI - pass instruction
AR - accept result
PR - pass result
Ex - execute instr.
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 213

Design challenge: CFPP state graph
! Arbitration 
States:
■---- X--------------- '
AR A®~>AI 
E - Empty
PR PR^ 
pi 'w 
I - Instruction
(^A. ( CD 
R - Result
V\AI AR><4
\ 
/ 
F — Full
\ tFj
PI 
PR 
C - Complete
Ex
(C
Events:
AI - accept instruction
PI - pass instruction
AR - accept result
PR - pass result
Ex - execute instr.
How to synthesize this state graph formally?
A few solutions proposed based on STG and CSP
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 214

Tangram Approach: asynchronous for low power
• Tangram = CSP-based language
• Direct compilation to asynchronous circuits: 
one language construct => one circuit component + 
peephole optimization
• Using STGs allows resynthesis and optimization [Pena 95]
• Low-power parts for portable audio equipment 
(DCC Error Corrector)
• [Van Berkel 93,94]
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 215

DCC Error Corrector results
• Average case switching activity (correct words - 98%) << 
worst case activity (incorrect words)
• Power consumption is determined:
— For synchronous prototype - by the worst case
— For asynchronous design - by the average case
• Asynchronous version is five times more economic in power 
consumption at normal Vdd = 5V.
• Supply voltage scaling allows futher power reduction
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 216

CAD tools for asynchronous circuits
• Synthesis: SIS (U.C.Berkeley), Tangram (Philips Research Labs), 
Petrify (UPC, Barcelona), Caltech tools, Forcage (Aizu), As­
sassin (IMEC), Syn (Stanford), MEAT (HP Labs), SHILPA 
(Univ. Utah), Burst Mode tools (Stanford/Columbia Univ.) 
etc.
• Verification: AVER (Stanford), Versify (UPC, Barcelona), Ver­
dict (Waterloo), Unfold (Aizu), Forcage (Aizu), etc.
For a more complete list look at the asynchronous design home 
page:
http://www.cs.man.ac.uk/amulet/async/index.html
and at the Async96 symposium home page:
http://www.u-aizu.ac.jp/async96/
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 217

ACAD grove as a conclusion
Gate level
Transitions
FSM
CSP
CCS
Traces
Model checking
Model
simic
Al
circal
Caltech
tec
angra
SIS
UP'
Tan
angram
Caltech
SIS
TAC
SIS
DF
\\!//
\\!//
CP
nalyze
STG 
SG 
P
HDL
Design
________________________________________ , 
.___________________________ stelV
Arch.synth.. Optimization ^ Lib. Verificationsimulation Testing Layout
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 218

More conclusions
• Asynchronous design is a challenging field
• Asynchronous synthesis is reaching maturity
• Asynchronous circuits take more area
... but area is becoming less important than speed, power and 
correctness
• Commercial CAD tools for asynchronous circuit design may be 
coming...
ICCAD’95 tutorial
The Systematic Design of Asynchronous Circuits 219

