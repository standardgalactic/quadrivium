
Categories of Comparison Operators
==
!=
is
is not
Value Comparisons
Membership Operations
in
not in
Ordering  Comparisons
<
<=
>
>=
Identity Operations
compares memory address – any type
compares values – different types OK,
but must be compatible
doesn't work for all types
used with iterable types
•
binary operators
•
evaluate to a bool value

Numeric Types
We will examine other types, including iterables, later in this course
Mixed types (except complex) in value and ordering comparisons is supported
Note:
Value equality operators work between floats and Decimals, but as we have seen 
before, using value equality with floats has some issues!
10.0 == Decimal('10.0')
0.1 == Decimal('0.1')
True == 1
Decimal('0.125') == Fraction(1, 8)
True == Fraction(3, 3)
→True
→False
→True
→True
→True
Value comparisons will work with all numeric types

Ordering Comparisons
Again, these work across all numeric types, except for complex numbers
1 < 3.14
Fraction(22, 7) > math.pi
Decimal('0.5') <= Fraction(2, 3)
True < Decimal('3.14')
Fraction(2, 3) > False
→True
→True
→True
→True
→True

Chained Comparisons
→True
a < b < c
a == b == c
→
a == b and b == c
→
a < b and b < c
1 == Decimal('1.0') == Fraction(1,1)
1 == Decimal('1.5') == Fraction(3, 2)
→False
1 < 2 < 3
→True
→1 < 2 and 2 < 3
1 < math.pi < Fraction(22, 7)
→True
→1 < math.pi and math.pi < Fraction(22, 7)

Chained Comparisons
a < b > c
→a < b and b > c
5 < 6 > 2
→5 < 6 and 6 > 2
→True
5 < 6 > 10
→5 < 6 and 6 > 10
→False
a < b < c < d
→a < b and b < c and c < d
1 < 2 < 3 < 4
→1 < 2 and 2 < 3 and 3 < 4
→True
1 < 10 > 4 < 5
→1 < 10 and 10 > 4 and 4 < 5
→True
if my_min == cnt < val > other <= my_max not in lst:
# do something

Code

