Divide	  and	  
Conquer	  
Coun.ng	  
Inversions	  II	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

Tim	  Roughgarden	  
Piggybacking	  on	  Merge	  Sort	  
KEY	  IDEA	  #	  2	  :	  have	  recursive	  calls	  both	  count	  
inversions	  and	  sort.	  
[i.e.	  ,	  piggy	  back	  on	  Merge	  Sort	  ]	  
Mo.va.on	  :	  Merge	  subrou.ne	  naturally	  
uncovers	  split	  inversions	  [as	  we’ll	  see]	  

Tim	  Roughgarden	  
High-­‐Level	  Algorithm	  (revised)	  
	  Sort-­‐and-­‐Count	  (array	  A,	  length	  n)	  
	  if	  n=1,	  return	  0	  
	  else	  
	  
	  (B,X)	  =	  Sort-­‐and-­‐Count(1st	  half	  of	  A,	  n/2)	  
	  
	  (C,Y)	  =	  Sort-­‐and-­‐Count(2nd	  half	  of	  A,	  n/2)	  
	  
	  (D,Z)	  =	  CountSplitInv(A,n)	  
	  return	  X+Y+Z	  
Goal	  :	  implement	  CountSplitInv	  in	  linear	  (O(n))	  .me	  
=>	  then	  Count	  will	  run	  in	  O(nlog(n))	  .me	  [just	  like	  Merge	  Sort	  ]	  
Sorted	  version	  
of	  1st	  half	  
Sorted	  version	  
of	  2nd	  half	  
Sorted	  version	  
of	  A	  

Tim	  Roughgarden	  
D	  =	  output	  [length	  =	  n]	  
B	  =	  1st	  sorted	  array	  [n/2]	  
C	  =	  2nd	  sorted	  array	  [n/2]	  
i	  =	  1	  
j	  =	  1	  
for	  k	  =	  1	  to	  n	  
	  if	  B(i)	  <	  C(j)	  
	  
	  D(k)	  =	  B(i)	  
	  
	  i++	  
	  else	  [C(j)	  <	  B(i)]	  
	  
	  D(k)	  =	  C(j)	  
	  
	  j++	  
end	  
Pseudocode	  for	  Merge:	  
(ignores	  end	  cases)	  

Tem
ver
B	  has	  the	  smallest	  element	  of	  A,	  C	  the	  second-­‐smallest,	  B,	  the	  third-­‐
smallest,	  and	  so	  on.	  
All	  elements	  of	  B	  are	  less	  than	  all	  elements	  of	  C.	  
There	  is	  not	  enough	  informa.on	  to	  answer	  this	  ques.on.	  
Suppose	  the	  input	  array	  A	  has	  no	  split	  inversions.	  	  What	  is	  the	  
rela.onship	  between	  the	  sorted	  subarrays	  B	  and	  C?	  

Tim	  Roughgarden	  
Example	  
Consider	  merging	  
and	  
Output	  :	  
⇒ When	  2	  copied	  to	  output,	  discover	  the	  split	  
inversions	  (3,2)	  and	  (5,2)	  
⇒ 	  when	  4	  copied	  to	  output,	  discover	  (5,4)	  

Tim	  Roughgarden	  
General	  Claim	  
Claim	  the	  split	  inversions	  involving	  an	  element	  y	  of	  the	  
2nnd	  array	  C	  are	  precisely	  the	  numbers	  le`	  in	  the	  1st	  
array	  B	  when	  y	  is	  copied	  to	  the	  output	  D.	  
Proof	  :	  Let	  x	  be	  an	  element	  of	  the	  1st	  array	  B.	  
1.  if	  x	  copied	  to	  output	  D	  before	  y,	  then	  x	  <	  y	  
⇒  no	  inversions	  involving	  x	  and	  y	  
2.  If	  y	  copied	  to	  output	  D	  before	  x,	  then	  y	  <	  x	  
=> 	  X	  and	  y	  are	  a	  (split)	  inversion.	  

Tim	  Roughgarden	  
Merge_and_CountSplitInv	  
-­‐ -­‐	  while	  merging	  the	  two	  sorted	  	  
subarrays,	  keep	  running	  total	  of	  	  
number	  of	  split	  inversions	  
-­‐ -­‐	  when	  element	  of	  2nd	  array	  C	  gets	  	  
copied	  to	  output	  D,	  increment	  total	  by	  number	  of	  elements	  
remaining	  in	  1st	  array	  B	  
Run	  .me	  of	  subrou.ne	  :	  O(n)	  +	  O(n)	  =	  O(n)	  
=>	  Sort_and_Count	  runs	  in	  O(nlog(n))	  .me	  [just	  like	  Merge	  Sort]	  

