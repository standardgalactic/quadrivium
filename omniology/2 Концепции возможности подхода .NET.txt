Концепция и возможности 
подхода .NET
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
 
 
 
Комментарий к слайду  
 
В данной лекции будут рассмотрены вопросы, относящиеся к идеологии, технологии и 
обзору практических возможностей создания программных систем на основе наиболее 
современного подхода проектирования и реализации программного обеспечения, 
известного под названием Microsoft .NET.  

Современные языки программирования и .NET: I семестр
Лекция 2: Концепция и возможности подхода .NET
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Содержание лекции
1.
.NET как идеология
2.
.NET как вычислительная модель
3.
.NET как технологическая платформа
4.
.NET как инструментальный комплекс
5.
Безопасность в .NET
6.
Интеграция приложений в .NET
7.
Поддержка веб-сервисов в .NET
8.
Достоинства и недостатки .NET
9.
Библиография
 
 
 
Комментарий к слайду  
 
В отличие от всех предшествующих подходов, компания Microsoft предлагает наиболее 
развитое и комплексное решение для проектирования и реализации программного 
обеспечения. 
 
В частности, в данной лекции будут рассмотрены такие аспекты .NET, как: 
• идеология; 
• вычислительная модель; 
• технологическая платформа; 
• инструментальное решение; 
• безопасность; 
• интеграция приложений; 
• поддержка веб-сервисов. 
 
В заключение будут проанализированы достоинства и недостатки .NET и сделаны 
необходимые выводы. 
 
Лекция завершится обзором литературы для более глубокого исследования материала. 
  
 
 

Современные языки программирования и .NET: I семестр
Лекция 2: Концепция и возможности подхода .NET
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Что такое .NET ?
.NET сегодня – это:
1.
Идеология проектирования и реализации программного 
обеспечения
2.
Модель эффективной поддержки жизненного цикла 
прикладных систем
3.
Унифицированная, интегрированная технологическая 
платформа
4.
Современный, удобный в использовании, безопасный
инструментарий для создания, размещения и поддержки 
программного обеспечения
 
 
 
Комментарий к слайду  
 
Прежде всего, необходимо ответить на важный вопрос: что такое .NET? Несмотря на 
широкое освещение в прессе, ответить однозначно непросто, прежде всего по той 
причине, что ответ представляется многоаспектным.  
 
Итак, можно сказать, что .NET – это подход к проектированию и реализации 
программного обеспечения, включающий по меньшей мере четыре следующих 
компонента: 
  
1) идеология проектирования и реализации программного обеспечения; 
2) модель эффективной поддержки жизненного цикла прикладных систем; 
3) унифицированная, 
интегрированная 
технологическая 
платформа 
для 
программирования; 
4) современный, удобный в использовании, безопасный инструментарий для 
создания, размещения и поддержки программного обеспечения. 
 
Остановимся подробнее на каждом из этих существенных аспектов. 
 

Современные языки программирования и .NET: I семестр
Лекция 2: Концепция и возможности подхода .NET
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
.NET как идеология (vision)
1.
Легкость развертывания приложений в глобальной среде 
Интернет
2.
Экономичная разработка программного обеспечения
3.
«Бесшовная», гибкая интеграция программных продуктов 
и аппаратных ресурсов
4.
Предоставление программного обеспечения как сервиса
5.
Новый уровень безопасности и удобства использования 
 
 
 
Комментарий к слайду  
 
Прежде всего, постараемся сформировать понимание идеологии подхода Microsoft .NET.  
 
Самой 
корпорацией-разработчиком 
сформулированы 
приблизительно 
следующие 
важнейшие аспекты видения (vision) идеологии .NET: 
 
1) легкость развертывания приложений в глобальной среде Интернет; 
2) экономичная разработка программного обеспечения; 
3) «бесшовная», гибкая интеграция программных продуктов и аппаратных ресурсов; 
4) предоставление программного обеспечения как сервиса; 
5) новый уровень безопасности и удобства использования.  
 
Действительно, как мы увидим в ходе лекции, все аспекты видения .NET удалось 
реализовать на качественно новом уровне, обеспечив существенное продвижение вперед в 
направлении гибкости интеграции с программно-аппаратными ресурсами, безопасности и 
удобстве использования кода, а также снижении затрат на производство программного 
обеспечения. 
 

Современные языки программирования и .NET: I семестр
Лекция 2: Концепция и возможности подхода .NET
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
.NET как вычислительная модель
1.
Компонентный подход как развитие объектно-
ориентированной модели
2.
Универсальная система типизации: «всякая сущность 
есть объект»; унификация данных и метаданных
3.
Строго иерархическая организация кода, пространств 
имен и классов
4.
Универсальный интерфейс .NET Framework (включая 
поддержку различных подходов к программированию)
5.
Высокая вариативность экземпляров реализации (в 
частности, на основе веб-сервисов)
 
 
Комментарий к слайду  
 
Рассмотрим подробнее, как идеология .NET претворяется в практические вопросы 
проектирования программного обеспечения.  
 
Корпорацией Microsoft предложен новаторский компонентно-ориентированный подход к 
проектированию, который является развитием объектно-ориентированного направления.  
Согласно этому подходу, интеграция объектов (возможно, гетерогенной природы), 
производится на основе интерфейсов, представляющих эти объекты (или фрагменты 
программ) как независимые компоненты. Такой подход существенно облегчает написание 
и 
взаимодействие 
программных 
«молекул»-компонент 
в 
гетерогенной 
среде 
проектирования и реализации. Стандартизируется хранение и повторное использование 
компонент программного проекта в условиях распределенной сетевой среды вычислений, 
где различные компьютеры и пользователи обмениваются информацией, например, 
взаимодействуя в рамках исследовательского или бизнес-проекта. 
 
Существенным преимуществом является и возможность практической реализации 
принципа «всякая сущность является объектом гетерогенной программной среды». Во 
многом это стало возможным благодаря усовершенствованной, обобщенной системе 
типизации Common Type System, или CTS, которая будет подробнее рассмотрена в одной 
из следующих лекций. 
 
Строгая иерархичность организации пространств  для типов, классов и имен сущностей 
программы позволяет стандартизировать и унифицировать реализацию. 
 
Новый подход к интеграции компонент приложений в среде вычислений Интернет (или 
так называемые веб-сервисы), дает возможность ускоренного создания приложений для 
глобальной аудитории пользователей. 
 
Универсальный 
интерфейс 
.NET 
Framework 
обеспечивает 
интегрированное 
проектирование и реализацию компонент приложений, разработанных согласно 
различным подходам к программированию. 

Современные языки программирования и .NET: I семестр
Лекция 2: Концепция и возможности подхода .NET
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
.NET как технологическая платформа
1.
Многоязыковая поддержка (десятки языков 
программирования)
2.
Использование технологии веб-сервисов для обеспечения
интероперабельности и масштабируемости в глобальной 
сетевой среде 
3.
Унификация доступа к библиотекам API-интерфейса 
независимо от языка и программной модели
4.
Соответствие современным технологическим стандартам
 
 
 
Комментарий к слайду  
 
Говоря о .NET как о технологической платформе, нельзя не отметить тот факт, что она 
обеспечивает одновременную поддержку проектирования и реализации программного 
обеспечения с использованием различных языков программирования. При этом  
поддерживаются десятки  языков программирования, начиная от самых первых (в 
частности, COBOL и FORTRAN) и заканчивая самыми современными (например, C# и 
Visual Basic). Ранние языки программирования до сих пор активно используются, в 
частности, для обеспечения совместимости с ранее созданными приложениями, 
критичными для бизнеса (скажем, COBOL весьма широко использовался для создания 
прикладных программ, поддерживающих финансовую деятельность). 
 
Применение технологии веб-сервисов – это не просто дань моде на Интернет, а реальная 
(и, 
пожалуй, 
наиболее 
приемлемая 
практически 
возможность) 
обеспечения 
масштабируемости и интероперабельности приложений. Под масштабируемостью 
понимают возможность плавного роста времени ответа программной системы на запрос с 
ростом числа одновременно работающих пользователей; в случае веб-сервисов 
масштабируемость реализуется посредством распределения вычислительных ресурсов 
между сервером, на котором выполняется прикладная программа (или хранятся данные) и 
компьютером пользователя.  
 
Под интероперабельностью понимается возможность интегрированной обработки 
гетерогенных данных, поступающих от разнородных прикладных программ. Именно 
благодаря интероперабельности возможна унификация взаимодействия пользователей 
через приложение с операционной системой на основе специализированного интерфейса 
прикладных программ, или API-интерфейса (Application Programming Interface). 
 
Немаловажно отметить и то обстоятельство, что новая технология .NET не только 
востребована мировой общественностью, но и официально признана, что отражено в 
соответствующих стандартах ECMA (European Computer Manufacturers Association). 
 

Современные языки программирования и .NET: I семестр
Лекция 2: Концепция и возможности подхода .NET
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
.NET - универсальное инструментальное средство
1.
Поддержка многоязыковой среды CLR (Common 
Language Runtime)
2.
Возможность создавать компоненты проекта в единой 
среде на наиболее подходящем языке программирования
3.
Доступность всех средств .NET для каждого из широкого 
спектра языков программирования 
4.
Сервисные возможности для разработчиков, (отладка, 
анализ кода, …) одинаковы для всех языков
5.
Возможность облегченной самостоятельной разработки 
транслятора для любого языка программирования 
(Microsoft – VB, C#, … другие – APL, COBOL, Eiffel, Fortran, 
Haskell, SML, Perl, Python, Scheme, Smalltalk, …)
 
 
 
Комментарий к слайду  
 
Теперь рассмотрим инструментальные возможности .NET как средства проектирования и 
реализации программного обеспечения, т.е., собственно, программирования в широком 
смысле этого слова. 
 
Прежде всего, необходимо отметить поддержку многоязыковой среды разработки 
приложений CLR (Common Language Runtime). Эта возможность появилась благодаря 
универсальному межъязыковому интерфейсу Common Language Infrastructure, или CLI, 
который поддерживает разработку программных компонент на различных языках 
программирования.  
 
При этом несомненным преимуществом для программистов является то обстоятельство, 
что они могут разрабатывать (или дорабатывать) программное обеспечение на наиболее 
подходящем языке программирования. Здесь следует учитывать характер задачи (скажем, 
рекурсия или символьная обработка прозрачнее и с меньшими трудозатратами реализуема 
на языке функционального программирования, а формализация структуры предметной 
области – на объектно-ориентированном языке). Кроме того, необходимо принимать во 
внимание опыт работы программистов в команде разработчиков и тот язык 
программирования, на котором изначально создавалась система. 
 
Отметим еще два существенных обстоятельства. Во-первых, основные сервисные 
возможности для разработчиков, которые предоставляет среда .NET, (отладка, анализ кода 
и т. д.) не зависят от конкретного языка программирования, и, следовательно, 
программистам  нет необходимости заново постигать особенности среды разработки, если 
необходимо перейти с одного языка на другой. Во-вторых, несмотря на то, что еще не все 
языки 
программирования 
поддерживаются 
.NET, 
существует 
возможность 
самостоятельной разработки транслятора для любого языка программирования, причем 
его реализация не вызывает трудностей даже у программистов, практически не имеющих 
профессиональной подготовки в области разработки компиляторов. 
 

Современные языки программирования и .NET: I семестр
Лекция 2: Концепция и возможности подхода .NET
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
.NET - безопасное инструментальное средство (1)
•
Автоматизированное управление жизненным циклом 
программного обеспечения:
•
автоматическая «сборка мусора»;
•
запрет «висячих» и циклических ссылок
•
Обеспечение синтаксической корректности кода:
•
безопасные вызовы функций и процедур;
•
контроль выхода за границы массива:
•
запрет использования переменных без инициализации
 
 
 
Комментарий к слайду  
 
Важнейшим элементом любой идеологии, технологии  и инструментального средства 
программирования в настоящее время является безопасность. Это утверждение 
неоспоримо, если принять во внимание тот факт, что многие важнейшие системы 
жизнеобеспечения и оборонной отрасли управляются автоматизированным образом, т.е. с 
помощью компьютеров. 
 
В этой связи .NET как инструментальное средство призвано обеспечивать уровень 
безопасности, отвечающий современным требованиям. 
 
Для этого в .NET реализована, в частности, такая мера безопасности, как 
автоматизированное управление жизненным циклом программного обеспечения. Для 
программиста это проявляется, например, в автоматической реализации процедуры 
«сборки мусора», а также в запрете на использования указателей на области памяти с 
неопределенным значением («висячих» ссылок) и самоссылающихся указателей 
(циклических ссылок).  
 
Более существенным ограничением безопасности является автоматизация обеспечения 
синтаксической коррекции кода. Это достигается посредством безопасных вызовов 
функций и процедур, контроля выхода за границы заявленного программистом размера 
статически распределяемых областей памяти, а также запрета использования переменных 
без задания им значения по умолчанию (инициализации). 
 
 

Современные языки программирования и .NET: I семестр
Лекция 2: Концепция и возможности подхода .NET
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
.NET - безопасное инструментальное средство (2)
•
Расширенный контроль соответствия типов (проверка 
промежуточного кода (IL – Intermediate Language) на 
корректность типизации)
•
Гибкое и надежное разграничение прав доступа к 
данным:
•
проверка подлинности кода;
•
политики доступа к ресурсам
•
Криптографические методы обеспечения безопасности 
доступа к данным
 
 
 
Комментарий к слайду  
 
Еще одним важным аспектом комплексного обеспечения безопасности в .NET является 
обязательная проверка промежуточного кода (IL – Intermediate Language) на корректность 
типизации, которая осуществляется в рамках реализованной стратегии расширенного 
контроля соответствия типов. 
 
Существенное нововведение добавлено и к правам доступа пользователей к ресурсам. В 
частности, для включения компонента в проект необходимо проверить источник кода, 
заверенный автором цифровой подписью, и убедиться в подлинности отправителя. 
 
Гибкое и надежное ограничение доступа пользователей к ресурсам осуществляется также 
благодаря широкому спектру динамически корректируемых в соответствии с профилями 
пользователя политик доступа. 
 
Немаловажным пунктом для обеспечения безопасности являются и криптографические 
методы, которые необходимы для шифрования конфиденциальной или коммерческой 
информации, передаваемой, например, по Интернет-каналам. 
 
 

Современные языки программирования и .NET: I семестр
Лекция 2: Концепция и возможности подхода .NET
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
.NET – интегрированное средство 
разворачивания и поддержки приложений
1.
Сборка (assembly) – набор модулей для установки:
•
уникальность (номер версии, цифровая подпись);
•
самодостаточность; 
•
локальное или коллективное многократное 
использование (компонентная технология);
•
минимальные затраты на установку.
2.
Манифест (manifest) – описание сборки:
•
идентификация автора и версии сборки;
•
режим и политика использования сборки.
 
 
 
Комментарий к слайду  
 
Продолжим обсуждение поддержки жизненного цикла  программного обеспечения в 
рамках подхода .NET. 
 
Для 
установки 
на 
компьютеры 
пользователей 
ранее 
созданного 
прикладного 
программного обеспечения создаются инсталляционные комплекты в форме так 
называемых сборок.  
 
Сборкой называется множество модулей, необходимых для осуществления инсталляции 
программного обеспечения.  
 
Сборка характеризуется уникальностью, которая обеспечивается идентификатором версии 
сборки и цифровой подписью автора.  Сборка является самодостаточной единицей для 
установки программного обеспечения и не требует никаких дополнений. Возможно как 
индивидуальное, так и коллективное (сетевое) использование сборки на основе 
компонентной технологии. 
 
Сборка обеспечивает простой и удобный механизм инсталляции и экономит средства на 
разворачивания программного обеспечения, сводя к минимуму затраты времени и труда 
на установку.  
 
Описание сборки содержится в так называемом манифесте, где хранятся идентификация 
автора и версии сборки, а также режим и политика использования последней.  
 

Современные языки программирования и .NET: I семестр
Лекция 2: Концепция и возможности подхода .NET
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
.NET – интернет-ориентированная среда
1.
Основные цели развития интернет-сервисов:
•
интерактивная обработка документов пользователями;
•
совместная работа пользователей с приложениями; 
•
поддержка взаимодействия приложений;
2.
Адаптация интернет-среды для интеграции приложений:
•
унификация информационной инфраструктуры;
•
обеспечение интероперабельности;
•
обеспечение масштабируемости.
 
 
 
Комментарий к слайду  
 
Современное общество вступило в эру Интернет-коммуникации, т.е. в самое ближайшее 
время практически каждый человек сможет получать доступ к распределенным ресурсам 
глобальной сети из любой точки Земли. 
 
В этой связи в .NET реализована концепция веб-сервисов как средства поддержки 
распределенных компонентных вычислений в глобальной сети. 
 
При этом наиболее существенными задачами, решение которых необходимо обеспечить, 
являются следующие: 
• интерактивная обработка пользователями информации (документов, таблиц, 
графики и т.д.), представленной в электронной форме; 
• организация совместной работы пользователей с прикладным программным 
обеспечением (заседания рабочих групп, конференции и т.д.);  
• поддержка взаимодействия прикладных программ друг с другом. 
 
В этой связи, в концепции .NET сформулирована и решена задача адаптации изначально 
аморфной и практически не структурированной Интернет-среды для достижения 
возможности интеграции приложений. Основные направления решения этой задачи 
кратко сводятся к следующим: 
• унификация информационной инфраструктуры; 
• достижение 
необходимого 
уровня 
интероперабельности 
прикладного 
программного обеспечения; 
• достижение необходимого уровня масштабируемости прикладного программного 
обеспечения.  
 
 
 

Современные языки программирования и .NET: I семестр
Лекция 2: Концепция и возможности подхода .NET
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
.NET – интероперабельный подход
Универсальная высокоуровневая языковая среда 
Common Language Infrastructure (CLI):
•
поддержка различных подходов к программированию 
(функциональный, объектный, веб-ориентированный, ...);
•
общее управление оперативной памятью (сборка мусора, 
тестирование кода на безопасность);
•
единая система типов (Common Type System, CTS), 
включающая общую иерархию для примитивных типов, 
типов-значений и ссылочных типов; 
•
унифицированный механизм обработки исключительных 
ситуаций;
•
среда разработки обеспечивает межъязыковую отладку.
 
 
 
Комментарий к слайду  
 
Задача достижения необходимого уровня масштабируемости прикладного программного 
обеспечения является достаточно сложной технически и выходит за рамки данного 
учебного курса. 
 
Задача поддержки интероперабельности прикладного программного обеспечения в рамках 
концепции .NET решается с помощью универсальной высокоуровневой языковой среды 
Common 
Language 
Infrastructure 
(CLI), 
которая 
характеризуется 
следующими 
возможностями. 
 
Во-первых, осуществляется поддержка разнообразных языков программирования, а, 
следовательно, 
и 
различных 
подходов 
к 
программированию, 
в 
частности, 
функционального 
(например, 
на 
основе 
SML, 
Scheme, 
Haskell), 
объектно-
ориентированного (например, на основе С++) и компонентного (например, на основе С#) 
подходов. 
 
Затем, интегрированное использование языков программирования осуществляется 
совместно с единой системой типов (Common Type System, CTS), включающей общую 
иерархию для примитивных типов, типов-значений и ссылочных типов.  
 
Управление оперативной памятью также реализовано в .NET в обобщенном варианте. В 
частности, централизовано осуществляются сборка мусора и тестирование кода на 
безопасность с точки зрения взаимодействия с оперативной памятью. Механизм 
обработки исключительных ситуаций также унифицирован. 
 
Наконец, универсальная высокоуровневая языковая среда Common Language Infrastructure 
обеспечивает межъязыковую отладку. 
 
 

Современные языки программирования и .NET: I семестр
Лекция 2: Концепция и возможности подхода .NET
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
.NET – решение, подтвержденное стандартами
•
язык программирования C# и Common Language 
Infrastructure (CLI) ратифицированы организацией ECMA 
в качестве международного стандарта;
•
заключено соглашение о сотрудничестве между 
Microsoft, Intel и Hewlett-Packard;
•
ряд сторонних компаний ведет проекты в соответствии со 
спецификациями ECMA (в частности, реализация .NET 
под управлением операционной системы Linux); 
•
Microsoft планирует совместную разработку 
программного проекта .NET под управлением 
операционных систем FreeBSD Windows;
•
http://msdn.microsoft.com/net/ecma/
 
 
 
Комментарий к слайду  
 
Для любого тиражируемого коммерческого программного продукта необходимо 
подтверждение его соответствия общепринятым в мировой практике программирования 
стандартам. 
 
В отношении технологий .NET теоретические достижения и технологические инновации 
подтверждаются мнением европейской ассоциации по стандартам ECMA (European 
Computer Manufacturers Association). 
 
Так, язык программирования C# и Common Language Infrastructure (CLI) ратифицированы 
организацией ECMA в качестве международного стандарта. Кроме того, ряд сторонних 
компаний-разработчиков программного обеспечения ведет проекты в соответствии со 
спецификациями ECMA (в частности, реализация .NET под управлением операционной 
системы Linux). 
 
Ведущие 
производители 
аппаратного 
и 
программного 
обеспечения 
составляют 
рассчитывают на .NET как на стратегический путь совместного с Microsoft развития. В 
частности, в 2001 году подписано соглашение о сотрудничестве между Microsoft, Intel и 
Hewlett-Packard. 
 
Вопреки распространенному мнению, Microsoft не настаивает на непременном условии 
единственности операционной системы Windows для поддержки .NET. Корпорация 
планирует совместную разработку программного проекта .NET под управлением 
операционных систем FreeBSD и Windows. 
 
Более подробную информацию о стандартизации технологий и программного 
обеспечения семейства .NET можно получить из Интернет-сайта, расположенного по 
следующему адресу: http://msdn.microsoft.com/net/ecma/ . 
 

Современные языки программирования и .NET: I семестр
Лекция 2: Концепция и возможности подхода .NET
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
.NET – наиболее существенные недостатки
1.
Высокие требования к аппаратному обеспечению 
(минимум 256M RAM, 10G HDD для работы с Microsoft 
Visual Studio .NET)
2.
Сложности работы с не коммерческими релизами
программного обеспечения (некоторая неустойчивость, 
отсутствие полномасштабной документации);
3.
Поддержка ряда теоретически интересных и практически 
полезных языков программирвоания не в полном объеме 
(SML для Visual Studio .NET – в процессе реализации);
4.
Инструментарий .NET (и компиляторы для языков 
программирования) не ратифицированы по 
международным стандартам.
 
 
 
Комментарий к слайду  
 
Несмотря на перечисленные выше инновации в области теории, технологии и 
практической реализации, в силу масштабности идеологии и новизны исследуемой 
проблематики, подход .NET не лишен отдельных недостатков, большинство из которых, 
по-видимому, носит временный характер. Отметим, по нашему мнению, наиболее 
существенные из них. 
 
Во-первых, разработчики отмечают достаточно высокие требования к аппаратному 
обеспечению (в частности, объем оперативной памяти должен быть не менее 
256 мегабайт, свободный объем жесткого диска для работы с Microsoft Visual Studio .NET 
– не менее 10 гигабайт). 
 
Кроме того, некоммерческие версии программных продуктов Microsoft, которые зачастую 
предоставляют новые существенные возможности, в недостаточной степени устойчивы в 
работе; документация по ряду новых функций программного обеспечения представлена не 
в полном объеме. 
 
Поддержка 
ряда 
теоретически 
интересных 
и 
практически 
полезных 
языков 
программирования реализована в ограниченном объеме (скажем, компилятор для  языка 
программирования SML для Visual Studio .NET находится  в процессе реализации). 
Поскольку целый ряд компиляторов для языков программирования предоставляется 
сторонними 
по 
отношению 
к 
Microsoft 
компаниями-разработчиками 
или 
некоммерческими учреждениями, результаты их деятельности поддаются контролю и 
доработке с ограничениями. 
 
Комплекс программно-инструментальных средств, реализующий подход .NET (включая и  
компиляторы для языков программирования) ратифицирован по международным 
стандартам не в полном объеме. 
 
 

Современные языки программирования и .NET: I семестр
Лекция 2: Концепция и возможности подхода .NET
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Платформа .NET – выводы
1.
Стратегическая идеология и технологическая платформа 
Microsoft на ближайшее десятилетие
2.
Несомненное качественное превосходство над аналогами 
(Inprise Delphi, Microsoft Visual Studio и др.) за счет:
•
интероперабельности и межъязыкового 
взаимодействия;
•
многоуровневой безопасности;
•
интеграции с веб-сервисами;
•
облегчения разворачивания и использования.
3.
Некоторая незавершенность решения для широкого 
коммерческого использования в силу концептуальной 
новизны и грандиозности проекта.
 
 
 
Комментарий к слайду  
 
Кратко резюмируем итоги лекции. 
 
Безусловно, 
.NET 
является 
выдающимся 
достижением 
современной 
индустрии 
программирования. Достаточно сказать, что корпорация Microsoft считает именно .NET 
своей стратегической идеологией и технологической платформой на ближайшее 
десятилетие. 
 
Несомненное 
качественное 
превосходство 
над 
существующими 
средствами 
автоматизированного проектирования и быстрой реализации прикладного программного 
обеспечения  (в частности, Inprise Delphi и JBuilder, Oracle Developer, Microsoft Visual 
Studio и др.) достигается за счет следующих основных факторов: 
• интероперабельность и межъязыковое взаимодействие; 
• многоуровневая, гибкая и надежная политика безопасности;  
• интеграция с технологией веб-сервисов; 
• упрощение 
процедуры 
разворачивания 
и 
использования 
создаваемого 
программного обеспечения. 
 
Несмотря на некоторую незавершенность решения для широкого коммерческого 
использования в силу концептуальной новизны и грандиозности проекта, подход .NET, 
безусловно, 
оказывает 
значительное 
влияние 
на 
коммерческую 
индустрию 
программирования в целом и способствует радикальному совершенствованию отрасли в 
ходе рыночной конкуренции. 
 
 
 

Современные языки программирования и .NET: I семестр
Лекция 2: Концепция и возможности подхода .NET
© Учебный Центр безопасности информационных технологий Microsoft 
Московского инженерно-физического института (государственного университета), 2003 
Библиография
1.
http://msdn.microsoft.com/net
2.
Nathan A. .NET and COM: The Complete Interoperability 
Guide. Sams, 2002, 1608 pp. 
3.
Box D. Essential .NET, Vol.1: The Common Language 
Runtime. Addison Wesley, 2002, 432 pp.
4.
Grimes F. Microsoft .NET for Programmers. Manning 
Publications, 2002, 386 pp. 
5.
J. Richter. Applied Microsoft .NET Framework 
Programming. Microsoft Press, 2002, 556 pp.
 
 
 
Комментарий к слайду  
 
 
К сожалению, в рамках одной лекции невозможно представить такой многоаспектный 
подход как .NET в полном объеме.  
 
Для более детального ознакомления с последними достижениями и проблемами в ходе 
развития подхода и полученных результатов рекомендуется следующий список 
литературы: 
 
1.http://msdn.microsoft.com/net 
 
2. Nathan A. .NET and COM: The Complete Interoperability Guide. Sams, 2002, 1608 pp.  
 
3. Box D. Essential .NET, Vol.1: The Common Language Runtime. Addison Wesley, 2002, 432  
pp. 
 
4. Grimes F. Microsoft .NET for Programmers. Manning Publications, 2002, 386 pp.  
 
5. Richter J. Applied Microsoft .NET Framework Programming. Microsoft Press, 2002, 556 pp. 
 
Кратко остановимся на источниках. Последние сведения о .NET из первых рук доступны с 
Интернет-ресурса [1]. Работы [2,3] посвящены интероперабельности; в работах [4,5] 
рассмотрены проблемы практической реализации программного обеспечения согласно 
подходу .NET. 
 

