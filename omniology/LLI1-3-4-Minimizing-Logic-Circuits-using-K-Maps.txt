Logic: Language and Information 1
§3-4 Minimizing Logic Circuits Using K-Maps
Jen Davoren

Minimizing Logic Circuits in DNF
We want a general and systematic method for finding a
minimal DNF circuit for a combinational system:
▶minimal number of inputs to OR gate at outer level
▶minimal-sized AND gates at inner level

Karnaugh map method
The Karnaugh map method is a systematic method for
deriving a minimal DNF from the truth table for a
propositional logic formula or combinational system.

Karnaugh map method
The Karnaugh map method is a systematic method for
deriving a minimal DNF from the truth table for a
propositional logic formula or combinational system.
It is a graphical (drawing-based) method that is limited to 6
inputs – but here only K-maps for at most 4 inputs.

Karnaugh map method
The Karnaugh map method is a systematic method for
deriving a minimal DNF from the truth table for a
propositional logic formula or combinational system.
It is a graphical (drawing-based) method that is limited to 6
inputs – but here only K-maps for at most 4 inputs.
History: 1952-53: E. W. Veitch and M. Karnaugh: develop graphical
minimization method suitable for up to 6 atoms.
1956-57: W.V. Quine and E.J. McCluskey develop algorithm for finding
minimal DNFs for any number of atoms; still implemented in EDA tools.

Karnaugh maps as compact truth tables
8-row table for 2-in MUX
8-cell K-map for 2-in MUX

Karnaugh maps as compact truth tables
16-row truth table
16-cell K-map for same
SPX
a
b
c
d
z
0
0
0
0
0
1
1
0
0
0
1
1
2
0
0
1
0
1
3
0
0
1
1
1
4
0
1
0
0
0
5
0
1
0
1
0
6
0
1
1
0
0
7
0
1
1
1
0
8
1
0
0
0
0
9
1
0
0
1
0
10
1
0
1
0
0
11
1
0
1
1
1
12
1
1
0
0
1
13
1
1
0
1
0
14
1
1
1
0
0
15
1
1
1
1
0

Minimal DNF using loops in K-maps
The very specific ordering of cells in a K-map (Gray code
order) is designed so that any two adjacent cells reference
rows of the truth table that differ only on one atom.

Minimal DNF using loops in K-maps
The very specific ordering of cells in a K-map (Gray code
order) is designed so that any two adjacent cells reference
rows of the truth table that differ only on one atom.
This includes vertically adjacent cells, horizontally
adjacent cells, and “wrap-around” adjacent cells, both
vertical and horizontal.

Minimal DNF using loops in K-maps
Method: look at all 1’s in K-map, and try to loop them
into groups of 2, 4 or 8 pairwise adjacent cells (must be
power of 2), using as large a loop as possible. Continue
covering all 1’s with loops, resorting to trivial size 1 loops
if need be, and using as few loops as possible.

Minimal DNF using loops in K-maps
Method: look at all 1’s in K-map, and try to loop them
into groups of 2, 4 or 8 pairwise adjacent cells (must be
power of 2), using as large a loop as possible. Continue
covering all 1’s with loops, resorting to trivial size 1 loops
if need be, and using as few loops as possible.
Looping is a graphical way of describing simplification of
“complementary pairs” of truth table row-conjunctions
that differ only on one atom.

Minimal DNF using loops in K-maps
Method: look at all 1’s in K-map, and try to loop them
into groups of 2, 4 or 8 pairwise adjacent cells (must be
power of 2), using as large a loop as possible. Continue
covering all 1’s with loops, resorting to trivial size 1 loops
if need be, and using as few loops as possible.
Looping is a graphical way of describing simplification of
“complementary pairs” of truth table row-conjunctions
that differ only on one atom.
• number of loops = number of inputs to OR gate
• each loop corresponds to an AND gate
• size of loop is inversely related to size of AND gate

K-Map Example: 2-in MUX

K-Map Example: 2-in MUX
z ≡(x & ∼s) ∨(y & s)

K-Map Example: 2-in MUX
z ≡(x & ∼s) ∨(y & s)
(i) loop of cells 6 and 4 simplifies (x & y & ∼s) ∨(x & ∼y & ∼s)
to (x & ∼s) by cancelling y’s; and

K-Map Example: 2-in MUX
z ≡(x & ∼s) ∨(y & s)
(i) loop of cells 6 and 4 simplifies (x & y & ∼s) ∨(x & ∼y & ∼s)
to (x & ∼s) by cancelling y’s; and (ii) loop of cells 3 and 7
simplifies (∼x & y & s) ∨(x & y & s) to (y & s) by cancelling
x’s.

2-in MUX
z ≡((x & ∼s) ∨(y & s))

K-Map Example: 4-input system
z ≡((∼a & ∼b) ∨(∼b & c & d) ∨(a & b & ∼c & ∼d))

K-Map Example: 4-input system
z ≡((∼a & ∼b) ∨(∼b & c & d) ∨(a & b & ∼c & ∼d))
(i) size 4 loop of cells 0, 1, 3, and 2 simplifies to (∼a & ∼b) by
cancelling both c’s and d’s;

K-Map Example: 4-input system
z ≡((∼a & ∼b) ∨(∼b & c & d) ∨(a & b & ∼c & ∼d))
(i) size 4 loop of cells 0, 1, 3, and 2 simplifies to (∼a & ∼b) by
cancelling both c’s and d’s; (ii) size 2 loop of cells 3 and 11
simplifies (∼a & ∼b & c & d) ∨(a & ∼b & c & d) down to
(∼b & c & d) by cancelling a’s; plus

K-Map Example: 4-input system
z ≡((∼a & ∼b) ∨(∼b & c & d) ∨(a & b & ∼c & ∼d))
(i) size 4 loop of cells 0, 1, 3, and 2 simplifies to (∼a & ∼b) by
cancelling both c’s and d’s; (ii) size 2 loop of cells 3 and 11
simplifies (∼a & ∼b & c & d) ∨(a & ∼b & c & d) down to
(∼b & c & d) by cancelling a’s; plus (iii) size 1 loop of cell 12.

Exercise: K-Map for 4-input system
Task: use loops on the K-map to find a minimal DNF formula
expressing output z in terms of inputs a, b, c and d.

Exercise: K-Map for 4-input system
(a)
(c)
(b)
(d)

Exercise Solution: K-Map for 4-input system
Solution: (b)
a minimal DNF formula expressing output z
in terms of inputs a, b, c and d is:
z ≡(b & ∼d) ∨(∼a & ∼b & ∼c & d)
The size 4 loop of cells 4, 6, 12 and 14 cancels out a’s and c’s.

Minimal DNF circuits
The Karnaugh-Veitch mapping method (or more generally,
the Quine-McCluskey algorithm) is guaranteed to produce a
minimal DNF circuit.
It does not guarantee that there are no smaller circuits (with a
smaller total number of gates) that do the same job but are not
in DNF form.

Minimal DNF circuit
z ≡((p & s) ∨(q & s))

Smaller non-DNF circuit
z ≡((p ∨q) & s)

Design example with K-map minimization
Common digital systems task: display a decimal digit, from
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, on an 7-segment display (e.g. LCD =
Liquid Crystal Display, or LED = Light Emitting Diode)
a
b
c
d
e
f
g

Decimal keypad to 7-segment display

BCD-to-7-segment decoder
a
b
c
d
e
f
g
a
b
c
d
e
f
g
a
b
c
d
e
f
g
a
b
c
d
e
f
g
a
b
c
d
e
f
g
a
b
c
d
e
f
g
a
b
c
d
e
f
g
a
b
c
d
e
f
g
a
b
c
d
e
f
g
a
b
c
d
e
f
g

BCD-to-7-segment decoder
Block:
.

BCD-to-7-segment decoder
Functional description: take as input a 4-bit binary code
m3 m2 m1 m0, together with control input r, and return as
output a 7-bit code a b c d e f g which describes how to “light
up” the 7-segment display by turning on or leaving off the
various display segments.
▶If the 4-bit input is BCD, in range {0, 1, 2, 3, 4, 5, 6, 7, 8, 9},
and in addition, the control input r is 0, then the intended
lighting up of the display segments is to be done.
▶Otherwise, if the input is in range {10, 11, 12, 13, 14, 15} or
if the control input r is 1, then none of the 7 segments are
to be turned on.

Decimal keypad to 7-segment display CODEC circuit

BCD-to-7-segment decoder
decimal
m3
m2
m1
m0
r
a
b
c
d
e
f
g
0
0
0
0
0
0
1
1
1
1
1
1
0
1
0
0
0
1
0
0
1
1
0
0
0
0
2
0
0
1
0
0
1
1
0
1
1
0
1
3
0
0
1
1
0
1
1
1
1
0
0
1
4
0
1
0
0
0
0
1
1
0
0
1
1
5
0
1
0
1
0
1
0
1
1
0
1
1
6
0
1
1
0
0
1
0
1
1
1
1
1
7
0
1
1
1
0
1
1
1
0
0
0
0
8
1
0
0
0
0
1
1
1
1
1
1
1
9
1
0
0
1
0
1
1
1
1
0
1
1
10
1
0
1
0
×
0
0
0
0
0
0
0
11
1
0
1
1
×
0
0
0
0
0
0
0
12
1
1
0
0
×
0
0
0
0
0
0
0
13
1
1
0
1
×
0
0
0
0
0
0
0
14
1
1
1
0
×
0
0
0
0
0
0
0
15
1
1
1
1
×
0
0
0
0
0
0
0
×
×
×
×
1
0
0
0
0
0
0
0

BCD-to-7-segment decoder: a output
a

BCD-to-7-segment decoder: a output
a
a
≡
(∼m3 & m1 & ∼r) ∨(∼m2 & ∼m1 & ∼m0 & ∼r) ∨
(∼m3 & m2 & m0 & ∼r) ∨(m3 & ∼m2 & ∼m1 & ∼r)

BCD-to-7-segment decoder: c output
c

BCD-to-7-segment decoder: c output
c
c
≡
(∼m2 & ∼m1 & ∼r) ∨(∼m3 & m0 & ∼r)
∨(∼m3 & m2 & ∼r)

BCD-to-7-segment decoder: e output
e

BCD-to-7-segment decoder: e output
e
e
≡
(∼m2 & ∼m1 & ∼m0 & ∼r) ∨(∼m3 & m1 & ∼m0 & ∼r)

More Digital Systems
Coursera: introductory undergraduate level:
Digital Systems - Sistemas Digitales: De las
puertas lógicas al procesador
bilingual Spanish and English
Universitat Autónoma de Barcelona
8 weeks; 1st session started 17 February 2014.
https://www.coursera.org/course/digitalsystems

