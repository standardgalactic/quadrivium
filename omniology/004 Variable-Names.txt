
Identifier names
must follow certain rules
should follow certain conventions
are case-sensitive
my_var
my_Var
ham
Ham
are different identifiers

start with underscore ( _ ) or letter ( a-z A-Z )
followed by any number of underscores ( _ ), letters ( a-z A-Z ), or digits ( 0-9 )
Must
are all legal names
cannot be reserved words:
False
None
True
and
as
assert
break
class
continue
def
del
elif
else
except
finally
for
from
global
if
import
in
is
lambda
nonlocal
not
or
pass
raise
return
try
while
with
yield
my_var
index1
_var
index_1
__var
__lt__
var

Conventions
Objects named this way will not get imported by a statement such as : 
from module import *
double underscore
__my_var
This is a convention to indicate "internal use" or "private" objects
Used to "mangle" class attributes â€“ useful in inheritance chains
_my_var
single underscore
Used for system-defined names that have a special 
meaning to the interpreter. 
x < y
x.__lt__(y)
double underscore
__my_var__
__init__
Don't invent them, stick to the ones pre-defined by Python!

Other Naming Conventions
from the PEP 8 Style Guide
Modules
short, all-lowercase names. Can have underscores.
Packages
short, all-lowercase names. Preferably no underscores.
utilities
db_utils
dbutils
Classes
CapWords (upper camel case) convention
BankAccount
Functions
lowercase, words separated by underscores (snake_case)
open_account
Variables
lowercase, words separated by underscores (snake_case)
account_id
Constants
all-uppercase, words separated by underscores
MIN_APR
https://www.python.org/dev/peps/pep-0008/
A foolish consistency is the hobgoblin of little minds
This is a should-read!
(Emerson)

