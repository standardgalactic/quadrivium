George Grätzer
More Math Into
5th Edition

More
Math Into LATEX


George Grätzer
More
Math Into LATEX
Fifth Edition
123

George Grätzer
Toronto, ON, Canada
ISBN 978-3-319-23795-4
ISBN 978-3-319-23796-1
(eBook)
DOI 10.1007/978-3-319-23796-1
Library of Congress Control Number: 2015953672
Springer Cham Heidelberg New York Dordrecht London
© Springer International Publishing AG 2016
This work is subject to copyright. All rights are reserved by the Publisher, whether the whole or part of the
material is concerned, speciﬁcally the rights of translation, reprinting, reuse of illustrations, recitation, broad-
casting, reproduction on microﬁlms or in any other physical way, and transmission or information storage and
retrieval, electronic adaptation, computer software, or by similar or dissimilar methodology now known or
hereafter developed.
The use of general descriptive names, registered names, trademarks, service marks, etc. in this publication
does not imply, even in the absence of a speciﬁc statement, that such names are exempt from the relevant
protective laws and regulations and therefore free for general use.
The publisher, the authors and the editors are safe to assume that the advice and information in this book
are believed to be true and accurate at the date of publication. Neither the publisher nor the authors or the
editors give a warranty, express or implied, with respect to the material contained herein or for any errors or
omissions that may have been made.
Printed on acid-free paper
Springer International Publishing AG Switzerland is part of Springer Science+Business Media (www.springer.
com)

To the Volunteers
without whose dedication,
over 25 years,
this book could not have been done
and to the young ones
Emma (10),
Kate (8),
Jay (3)


Short Contents
Foreword
xix
Preface to the ﬁfth edition
xxiii
Introduction
xxv
I
Mission Impossible
1
1
Short course
3
2
And a few more things...
31
II
Text and Math
43
3
Typing text
45
4
Text environments
97
5
Typing math
131
6
More math
167
7
Multiline math displays
191
III
Document Structure
227
8
Documents
229
vii

viii
Short Contents
9
The AMS article document class
255
10 Legacy documents
285
IV
PDF Documents
297
11 The PDF ﬁle format
299
12 Presentations
307
13 Illustrations
343
V
Customization
359
14 Commands and environments
361
VI
Long Documents
419
15 BIBTEX
421
16 MakeIndex
447
17 Books in LATEX
463
A Math symbol tables
481
B Text symbol tables
495
C Some background
501
D LATEX and the Internet
515
E PostScript fonts
521
F LATEX localized
525
G LATEX on the iPad
529
H Final thoughts
543
Bibliography
547
Index
551

Contents
Foreword
xix
Preface to the ﬁfth edition
xxiii
Introduction
xxv
Is this book for you? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
xxv
What’s in the book? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxvii
Conventions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xxix
I
Mission Impossible
1
1
Short course
3
1.1
Getting started . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5
1.1.1
Your LATEX . . . . . . . . . . . . . . . . . . . . . . . . . . .
5
1.1.2
Sample ﬁles . . . . . . . . . . . . . . . . . . . . . . . . . . .
5
1.1.3
Editing cycle . . . . . . . . . . . . . . . . . . . . . . . . . .
5
1.1.4
Typing the source ﬁle . . . . . . . . . . . . . . . . . . . . . .
6
1.2
The keyboard . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7
1.3
Your ﬁrst text notes . . . . . . . . . . . . . . . . . . . . . . . . . . .
8
1.4
Lines too wide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11
1.5
A note with formulas . . . . . . . . . . . . . . . . . . . . . . . . . .
12
1.6
The building blocks of a formula . . . . . . . . . . . . . . . . . . . .
14
1.7
Displayed formulas . . . . . . . . . . . . . . . . . . . . . . . . . . .
18
1.7.1
Equations . . . . . . . . . . . . . . . . . . . . . . . . . . . .
18
1.7.2
Symbolic referencing . . . . . . . . . . . . . . . . . . . . . .
19
1.7.3
Aligned formulas . . . . . . . . . . . . . . . . . . . . . . . .
20
1.7.4
Cases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
22
1.8
The anatomy of a document . . . . . . . . . . . . . . . . . . . . . . .
23
1.9
Your own commands . . . . . . . . . . . . . . . . . . . . . . . . . .
25
ix

x
Contents
1.10 Adding an illustration . . . . . . . . . . . . . . . . . . . . . . . . . .
25
1.11 The anatomy of a presentation
. . . . . . . . . . . . . . . . . . . . .
26
2
And a few more things...
31
2.1
Structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
31
2.2
Auxiliary ﬁles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
32
2.3
Logical and visual design . . . . . . . . . . . . . . . . . . . . . . . .
35
2.4
General error messages . . . . . . . . . . . . . . . . . . . . . . . . .
35
2.5
Errors in math . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
38
2.6
Your errors: Davey’s Dos and Don’ts . . . . . . . . . . . . . . . . . .
39
II
Text and Math
43
3
Typing text
45
3.1
The keyboard . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
46
3.1.1
Basic keys
. . . . . . . . . . . . . . . . . . . . . . . . . . .
46
3.1.2
Special keys . . . . . . . . . . . . . . . . . . . . . . . . . . .
47
3.1.3
Prohibited keys . . . . . . . . . . . . . . . . . . . . . . . . .
47
3.2
Words, sentences, and paragraphs
. . . . . . . . . . . . . . . . . . .
48
3.2.1
Spacing rules . . . . . . . . . . . . . . . . . . . . . . . . . .
48
3.2.2
Periods . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
49
3.3
Commanding LATEX
. . . . . . . . . . . . . . . . . . . . . . . . . .
51
3.3.1
Commands and environments
. . . . . . . . . . . . . . . . .
51
3.3.2
Scope . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
55
3.3.3
Types of commands
. . . . . . . . . . . . . . . . . . . . . .
57
3.4
Symbols not on the keyboard . . . . . . . . . . . . . . . . . . . . . .
58
3.4.1
Quotation marks
. . . . . . . . . . . . . . . . . . . . . . . .
58
3.4.2
Dashes
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
58
3.4.3
Ties or nonbreakable spaces . . . . . . . . . . . . . . . . . .
59
3.4.4
Special characters . . . . . . . . . . . . . . . . . . . . . . . .
60
3.4.5
Ellipses . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
62
3.4.6
Ligatures . . . . . . . . . . . . . . . . . . . . . . . . . . . .
62
3.4.7
Accents and symbols in text . . . . . . . . . . . . . . . . . .
62
3.4.8
Logos and dates . . . . . . . . . . . . . . . . . . . . . . . . .
62
3.4.9
Hyphenation
. . . . . . . . . . . . . . . . . . . . . . . . . .
65
3.5
Comments and footnotes . . . . . . . . . . . . . . . . . . . . . . . .
67
3.5.1
Comments
. . . . . . . . . . . . . . . . . . . . . . . . . . .
68
3.5.2
Footnotes . . . . . . . . . . . . . . . . . . . . . . . . . . . .
70
3.6
Changing font characteristics . . . . . . . . . . . . . . . . . . . . . .
71
3.6.1
Basic font characteristics . . . . . . . . . . . . . . . . . . . .
71
3.6.2
Document font families . . . . . . . . . . . . . . . . . . . . .
72
3.6.3
Shape commands . . . . . . . . . . . . . . . . . . . . . . . .
73
3.6.4
Italic corrections . . . . . . . . . . . . . . . . . . . . . . . .
74
3.6.5
Series . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
76
3.6.6
Size changes
. . . . . . . . . . . . . . . . . . . . . . . . . .
76

Contents
xi
3.6.7
Orthogonality . . . . . . . . . . . . . . . . . . . . . . . . . .
77
3.6.8
Obsolete two-letter commands . . . . . . . . . . . . . . . . .
77
3.6.9
Low-level commands . . . . . . . . . . . . . . . . . . . . . .
78
3.7
Lines, paragraphs, and pages . . . . . . . . . . . . . . . . . . . . . .
78
3.7.1
Lines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
78
3.7.2
Paragraphs
. . . . . . . . . . . . . . . . . . . . . . . . . . .
82
3.7.3
Pages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
83
3.7.4
Multicolumn printing . . . . . . . . . . . . . . . . . . . . . .
84
3.8
Spaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
84
3.8.1
Horizontal spaces . . . . . . . . . . . . . . . . . . . . . . . .
84
3.8.2
Vertical spaces . . . . . . . . . . . . . . . . . . . . . . . . .
86
3.8.3
Relative spaces . . . . . . . . . . . . . . . . . . . . . . . . .
87
3.8.4
Expanding spaces . . . . . . . . . . . . . . . . . . . . . . . .
88
3.9
Boxes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
89
3.9.1
Line boxes
. . . . . . . . . . . . . . . . . . . . . . . . . . .
89
3.9.2
Frame boxes
. . . . . . . . . . . . . . . . . . . . . . . . . .
91
3.9.3
Paragraph boxes
. . . . . . . . . . . . . . . . . . . . . . . .
92
3.9.4
Marginal comments
. . . . . . . . . . . . . . . . . . . . . .
94
3.9.5
Solid boxes . . . . . . . . . . . . . . . . . . . . . . . . . . .
95
3.9.6
Fine tuning boxes . . . . . . . . . . . . . . . . . . . . . . . .
96
4
Text environments
97
4.1
Some general rules for displayed text environments . . . . . . . . . .
98
4.2
List environments . . . . . . . . . . . . . . . . . . . . . . . . . . . .
98
4.2.1
Numbered lists . . . . . . . . . . . . . . . . . . . . . . . . .
98
4.2.2
Bulleted lists . . . . . . . . . . . . . . . . . . . . . . . . . .
99
4.2.3
Captioned lists . . . . . . . . . . . . . . . . . . . . . . . . .
100
4.2.4
A rule and combinations . . . . . . . . . . . . . . . . . . . .
100
4.3
Style and size environments . . . . . . . . . . . . . . . . . . . . . . .
103
4.4
Proclamations (theorem-like structures)
. . . . . . . . . . . . . . . .
104
4.4.1
The full syntax . . . . . . . . . . . . . . . . . . . . . . . . .
108
4.4.2
Proclamations with style . . . . . . . . . . . . . . . . . . . .
109
4.5
Proof environments . . . . . . . . . . . . . . . . . . . . . . . . . . .
111
4.6
Tabular environments . . . . . . . . . . . . . . . . . . . . . . . . . .
113
4.6.1
Table styles . . . . . . . . . . . . . . . . . . . . . . . . . . .
120
4.7
Tabbing environments
. . . . . . . . . . . . . . . . . . . . . . . . .
121
4.8
Miscellaneous displayed text environments . . . . . . . . . . . . . . .
123
5
Typing math
131
5.1
Math environments . . . . . . . . . . . . . . . . . . . . . . . . . . .
132
5.2
Spacing rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
134
5.3
Equations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
135
5.4
Basic constructs . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
137
5.4.1
Arithmetic operations
. . . . . . . . . . . . . . . . . . . . .
137
5.4.2
Binomial coeﬃcients . . . . . . . . . . . . . . . . . . . . . .
139
5.4.3
Ellipses . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
139

xii
Contents
5.4.4
Integrals
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
141
5.4.5
Roots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
141
5.4.6
Text in math
. . . . . . . . . . . . . . . . . . . . . . . . . .
142
5.4.7
Hebrew and Greek letters . . . . . . . . . . . . . . . . . . . .
144
5.5
Delimiters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
145
5.5.1
Stretching delimiters . . . . . . . . . . . . . . . . . . . . . .
146
5.5.2
Delimiters that do not stretch . . . . . . . . . . . . . . . . . .
147
5.5.3
Limitations of stretching . . . . . . . . . . . . . . . . . . . .
147
5.5.4
Delimiters as binary relations
. . . . . . . . . . . . . . . . .
148
5.6
Operators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
149
5.6.1
Operator tables . . . . . . . . . . . . . . . . . . . . . . . . .
149
5.6.2
Congruences . . . . . . . . . . . . . . . . . . . . . . . . . .
151
5.6.3
Large operators . . . . . . . . . . . . . . . . . . . . . . . . .
151
5.6.4
Multiline subscripts and superscripts . . . . . . . . . . . . . .
153
5.7
Math accents
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
154
5.8
Stretchable horizontal lines . . . . . . . . . . . . . . . . . . . . . . .
155
5.8.1
Horizontal braces . . . . . . . . . . . . . . . . . . . . . . . .
155
5.8.2
Overlines and underlines . . . . . . . . . . . . . . . . . . . .
156
5.8.3
Stretchable arrow math symbols . . . . . . . . . . . . . . . .
157
5.9
Building a formula step-by-step . . . . . . . . . . . . . . . . . . . . .
157
5.10 Formula Gallery . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
160
6
More math
167
6.1
Spacing of symbols . . . . . . . . . . . . . . . . . . . . . . . . . . .
168
6.1.1
Classiﬁcation . . . . . . . . . . . . . . . . . . . . . . . . . .
168
6.1.2
Three exceptions . . . . . . . . . . . . . . . . . . . . . . . .
168
6.1.3
Spacing commands . . . . . . . . . . . . . . . . . . . . . . .
170
6.1.4
Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . .
170
6.1.5
The phantom command
. . . . . . . . . . . . . . . . . . . .
171
6.2
The STIX math symbols
. . . . . . . . . . . . . . . . . . . . . . . .
172
6.2.1
Swinging it . . . . . . . . . . . . . . . . . . . . . . . . . . .
172
6.2.2
The STIX project . . . . . . . . . . . . . . . . . . . . . . . .
173
6.2.3
Installation and usage . . . . . . . . . . . . . . . . . . . . . .
173
6.3
Building new symbols
. . . . . . . . . . . . . . . . . . . . . . . . .
174
6.3.1
Stacking symbols . . . . . . . . . . . . . . . . . . . . . . . .
174
6.3.2
Negating and side-setting symbols . . . . . . . . . . . . . . .
177
6.3.3
Changing the type of a symbol . . . . . . . . . . . . . . . . .
178
6.4
Math alphabets and symbols . . . . . . . . . . . . . . . . . . . . . .
178
6.4.1
Math alphabets . . . . . . . . . . . . . . . . . . . . . . . . .
179
6.4.2
Math symbol alphabets . . . . . . . . . . . . . . . . . . . . .
180
6.4.3
Bold math symbols . . . . . . . . . . . . . . . . . . . . . . .
181
6.4.4
Size changes
. . . . . . . . . . . . . . . . . . . . . . . . . .
182
6.4.5
Continued fractions . . . . . . . . . . . . . . . . . . . . . . .
183
6.5
Vertical spacing . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
183
6.6
Tagging and grouping . . . . . . . . . . . . . . . . . . . . . . . . . .
185

Contents
xiii
6.7
Miscellaneous . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
187
6.7.1
Generalized fractions . . . . . . . . . . . . . . . . . . . . . .
187
6.7.2
Boxed formulas . . . . . . . . . . . . . . . . . . . . . . . . .
189
7
Multiline math displays
191
7.1
Visual Guide
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
191
7.1.1
Columns
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
191
7.1.2
Subsidiary math environments . . . . . . . . . . . . . . . . .
193
7.1.3
Adjusted columns . . . . . . . . . . . . . . . . . . . . . . . .
193
7.1.4
Aligned columns . . . . . . . . . . . . . . . . . . . . . . . .
194
7.1.5
Touring the Visual Guide . . . . . . . . . . . . . . . . . . . .
194
7.2
Gathering formulas . . . . . . . . . . . . . . . . . . . . . . . . . . .
195
7.3
Splitting long formulas . . . . . . . . . . . . . . . . . . . . . . . . .
196
7.4
Some general rules . . . . . . . . . . . . . . . . . . . . . . . . . . .
198
7.4.1
General rules . . . . . . . . . . . . . . . . . . . . . . . . . .
198
7.4.2
Subformula rules . . . . . . . . . . . . . . . . . . . . . . . .
199
7.4.3
Breaking and aligning formulas
. . . . . . . . . . . . . . . .
200
7.4.4
Numbering groups of formulas . . . . . . . . . . . . . . . . .
201
7.5
Aligned columns
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
202
7.5.1
An align variant . . . . . . . . . . . . . . . . . . . . . . . .
205
7.5.2
eqnarray, the ancestor of align . . . . . . . . . . . . . . .
205
7.5.3
The subformula rule revisited
. . . . . . . . . . . . . . . . .
206
7.5.4
The alignat environment . . . . . . . . . . . . . . . . . . .
207
7.5.5
Inserting text . . . . . . . . . . . . . . . . . . . . . . . . . .
208
7.6
Aligned subsidiary math environments . . . . . . . . . . . . . . . . .
210
7.6.1
Subsidiary variants . . . . . . . . . . . . . . . . . . . . . . .
210
7.6.2
Split . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
212
7.7
Adjusted columns . . . . . . . . . . . . . . . . . . . . . . . . . . . .
214
7.7.1
Matrices
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
215
7.7.2
Arrays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
218
7.7.3
Cases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
221
7.8
Commutative diagrams . . . . . . . . . . . . . . . . . . . . . . . . .
222
7.9
Adjusting the display . . . . . . . . . . . . . . . . . . . . . . . . . .
224
III
Document Structure
227
8
Documents
229
8.1
The structure of a document
. . . . . . . . . . . . . . . . . . . . . .
230
8.2
The preamble . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
231
8.3
Top matter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
233
8.3.1
Abstract . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
233
8.4
Main matter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
234
8.4.1
Sectioning
. . . . . . . . . . . . . . . . . . . . . . . . . . .
234
8.4.2
Cross-referencing . . . . . . . . . . . . . . . . . . . . . . . .
237
8.4.3
Floating tables and illustrations
. . . . . . . . . . . . . . . .
242

xiv
Contents
8.5
Back matter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
245
8.5.1
Bibliographies in articles . . . . . . . . . . . . . . . . . . . .
245
8.5.2
Simple indexes . . . . . . . . . . . . . . . . . . . . . . . . .
251
8.6
Visual design . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
252
9
The AMS article document class
255
9.1
Why amsart? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
255
9.1.1
Submitting an article to the AMS
. . . . . . . . . . . . . . .
255
9.1.2
Submitting an article to Algebra Universalis . . . . . . . . . .
256
9.1.3
Submitting to other journals . . . . . . . . . . . . . . . . . .
256
9.1.4
Submitting to conference proceedings . . . . . . . . . . . . .
257
9.2
The top matter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
257
9.2.1
Article information . . . . . . . . . . . . . . . . . . . . . . .
257
9.2.2
Author information . . . . . . . . . . . . . . . . . . . . . . .
259
9.2.3
AMS information . . . . . . . . . . . . . . . . . . . . . . . .
263
9.2.4
Multiple authors
. . . . . . . . . . . . . . . . . . . . . . . .
264
9.2.5
Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . .
265
9.2.6
Abstract . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
268
9.3
The sample article . . . . . . . . . . . . . . . . . . . . . . . . . . . .
268
9.4
Article templates
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
275
9.5
Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
279
9.6
The AMS packages . . . . . . . . . . . . . . . . . . . . . . . . . . .
282
10 Legacy documents
285
10.1 Articles and reports . . . . . . . . . . . . . . . . . . . . . . . . . . .
285
10.1.1 Top matter
. . . . . . . . . . . . . . . . . . . . . . . . . . .
286
10.1.2 Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
288
10.2 Letters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
290
10.3 The LATEX distribution
. . . . . . . . . . . . . . . . . . . . . . . . .
292
10.3.1 Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
294
IV
PDF Documents
297
11 The PDF ﬁle format
299
11.1 PostScript and PDF
. . . . . . . . . . . . . . . . . . . . . . . . . . .
299
11.1.1 PostScript . . . . . . . . . . . . . . . . . . . . . . . . . . . .
299
11.1.2
PDF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
300
11.1.3 Hyperlinks
. . . . . . . . . . . . . . . . . . . . . . . . . . .
301
11.2 Hyperlinks for LATEX
. . . . . . . . . . . . . . . . . . . . . . . . . .
301
11.2.1 Using hyperref . . . . . . . . . . . . . . . . . . . . . . . .
301
11.2.2 backref and colorlinks . . . . . . . . . . . . . . . . . . .
302
11.2.3 Bookmarks . . . . . . . . . . . . . . . . . . . . . . . . . . .
303
11.2.4 Additional commands
. . . . . . . . . . . . . . . . . . . . .
304

Contents
xv
12 Presentations
307
12.1 Quick and dirty beamer . . . . . . . . . . . . . . . . . . . . . . . . .
308
12.1.1 First changes . . . . . . . . . . . . . . . . . . . . . . . . . .
308
12.1.2 Changes in the body
. . . . . . . . . . . . . . . . . . . . . .
309
12.1.3 Making things prettier
. . . . . . . . . . . . . . . . . . . . .
309
12.1.4 Adjusting the navigation . . . . . . . . . . . . . . . . . . . .
310
12.2 Baby beamers
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
313
12.2.1 Overlays
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
315
12.2.2 Understanding overlays . . . . . . . . . . . . . . . . . . . . .
317
12.2.3 More on the \only and \onslide commands . . . . . . . . .
319
12.2.4 Lists as overlays
. . . . . . . . . . . . . . . . . . . . . . . .
321
12.2.5 Out of sequence overlays . . . . . . . . . . . . . . . . . . . .
323
12.2.6 Blocks and overlays
. . . . . . . . . . . . . . . . . . . . . .
324
12.2.7 Links . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
325
12.2.8 Columns
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
329
12.2.9 Coloring
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
330
12.3 The structure of a presentation . . . . . . . . . . . . . . . . . . . . .
332
12.3.1 Longer presentations . . . . . . . . . . . . . . . . . . . . . .
336
12.3.2 Navigation symbols . . . . . . . . . . . . . . . . . . . . . . .
336
12.4 Notes
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
336
12.5 Themes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
338
12.6 Planning your presentation . . . . . . . . . . . . . . . . . . . . . . .
340
12.7 What did I leave out? . . . . . . . . . . . . . . . . . . . . . . . . . .
341
13 Illustrations
343
13.1 Your ﬁrst picture
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
344
13.2 The building blocks of an illustration . . . . . . . . . . . . . . . . . .
347
13.3 Transformations . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
351
13.4 Path attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
353
13.5 Coding the example . . . . . . . . . . . . . . . . . . . . . . . . . . .
356
13.6 What did I leave out? . . . . . . . . . . . . . . . . . . . . . . . . . .
357
V
Customization
359
14 Commands and environments
361
14.1 Custom commands . . . . . . . . . . . . . . . . . . . . . . . . . . .
362
14.1.1 Examples and rules . . . . . . . . . . . . . . . . . . . . . . .
362
14.1.2 Arguments
. . . . . . . . . . . . . . . . . . . . . . . . . . .
368
14.1.3 Short arguments
. . . . . . . . . . . . . . . . . . . . . . . .
371
14.1.4 Optional arguments . . . . . . . . . . . . . . . . . . . . . . .
372
14.1.5 Redeﬁning commands . . . . . . . . . . . . . . . . . . . . .
373
14.1.6 Deﬁning operators . . . . . . . . . . . . . . . . . . . . . . .
374
14.1.7 Redeﬁning names . . . . . . . . . . . . . . . . . . . . . . . .
375
14.1.8 Showing the deﬁnitions of commands . . . . . . . . . . . . .
375
14.1.9 Delimited commands . . . . . . . . . . . . . . . . . . . . . .
377

xvi
Contents
14.2 Custom environments . . . . . . . . . . . . . . . . . . . . . . . . . .
379
14.2.1 Modifying existing environments
. . . . . . . . . . . . . . .
380
14.2.2 Arguments
. . . . . . . . . . . . . . . . . . . . . . . . . . .
383
14.2.3 Optional arguments with default values . . . . . . . . . . . .
383
14.2.4 Short contents
. . . . . . . . . . . . . . . . . . . . . . . . .
384
14.2.5 Brand-new environments . . . . . . . . . . . . . . . . . . . .
384
14.3 A custom command ﬁle . . . . . . . . . . . . . . . . . . . . . . . . .
385
14.4 The sample article with custom commands . . . . . . . . . . . . . . .
394
14.5 Numbering and measuring . . . . . . . . . . . . . . . . . . . . . . .
400
14.5.1 Counters
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
400
14.5.2 Length commands
. . . . . . . . . . . . . . . . . . . . . . .
405
14.6 Custom lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
408
14.6.1 Length commands for the list environment
. . . . . . . . .
408
14.6.2 The list environment . . . . . . . . . . . . . . . . . . . . .
410
14.6.3 Two complete examples
. . . . . . . . . . . . . . . . . . . .
413
14.6.4 The trivlist environment . . . . . . . . . . . . . . . . . .
416
14.7 The dangers of customization . . . . . . . . . . . . . . . . . . . . . .
416
VI
Long Documents
419
15 BIBTEX
421
15.1 The database
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
423
15.1.1 Entry types . . . . . . . . . . . . . . . . . . . . . . . . . . .
423
15.1.2 Typing ﬁelds . . . . . . . . . . . . . . . . . . . . . . . . . .
425
15.1.3 Articles . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
428
15.1.4 Books . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
429
15.1.5 Conference proceedings and collections . . . . . . . . . . . .
430
15.1.6 Theses
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
433
15.1.7 Technical reports . . . . . . . . . . . . . . . . . . . . . . . .
434
15.1.8 Manuscripts and other entry types . . . . . . . . . . . . . . .
434
15.1.9 Abbreviations . . . . . . . . . . . . . . . . . . . . . . . . . .
435
15.2 Using BIBTEX
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
436
15.2.1 Sample ﬁles . . . . . . . . . . . . . . . . . . . . . . . . . . .
436
15.2.2 Setup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
438
15.2.3 Four steps of BIBTEXing . . . . . . . . . . . . . . . . . . . .
439
15.2.4 BIBTEX ﬁles
. . . . . . . . . . . . . . . . . . . . . . . . . .
439
15.2.5 BIBTEX rules and messages
. . . . . . . . . . . . . . . . . .
442
15.2.6 Submitting an article . . . . . . . . . . . . . . . . . . . . . .
445
15.3 Concluding comments
. . . . . . . . . . . . . . . . . . . . . . . . .
445
16 MakeIndex
447
16.1 Preparing the document . . . . . . . . . . . . . . . . . . . . . . . . .
447
16.2 Index commands
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
451
16.3 Processing the index entries . . . . . . . . . . . . . . . . . . . . . . .
456
16.4 Rules
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
459

Contents
xvii
16.5 Multiple indexes
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
460
16.6 Glossary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
461
16.7 Concluding comments
. . . . . . . . . . . . . . . . . . . . . . . . .
461
17 Books in LATEX
463
17.1 Book document classes . . . . . . . . . . . . . . . . . . . . . . . . .
464
17.1.1 Sectioning
. . . . . . . . . . . . . . . . . . . . . . . . . . .
464
17.1.2 Division of the body . . . . . . . . . . . . . . . . . . . . . .
465
17.1.3 Document class options
. . . . . . . . . . . . . . . . . . . .
466
17.1.4 Title pages
. . . . . . . . . . . . . . . . . . . . . . . . . . .
466
17.2 Tables of contents, lists of tables and ﬁgures . . . . . . . . . . . . . .
467
17.2.1 Tables of contents
. . . . . . . . . . . . . . . . . . . . . . .
467
17.2.2 Lists of tables and ﬁgures
. . . . . . . . . . . . . . . . . . .
470
17.2.3 Exercises . . . . . . . . . . . . . . . . . . . . . . . . . . . .
470
17.3 Organizing the ﬁles for a book . . . . . . . . . . . . . . . . . . . . .
471
17.3.1 The folders and the master document
. . . . . . . . . . . . .
471
17.3.2 Inclusion and selective inclusion . . . . . . . . . . . . . . . .
472
17.3.3 Organizing your ﬁles . . . . . . . . . . . . . . . . . . . . . .
473
17.4 Logical design . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
473
17.5 Final preparations for the publisher . . . . . . . . . . . . . . . . . . .
476
17.6 If you create the PDF ﬁle for your book . . . . . . . . . . . . . . . . .
478
A Math symbol tables
481
A.1
Hebrew and Greek letters . . . . . . . . . . . . . . . . . . . . . . . .
481
A.2
Binary relations . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
483
A.3
Binary operations . . . . . . . . . . . . . . . . . . . . . . . . . . . .
486
A.4
Arrows
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
487
A.5
Miscellaneous symbols . . . . . . . . . . . . . . . . . . . . . . . . .
488
A.6
Delimiters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
489
A.7
Operators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
490
A.7.1
Large operators . . . . . . . . . . . . . . . . . . . . . . . . .
491
A.8
Math accents and fonts . . . . . . . . . . . . . . . . . . . . . . . . .
492
A.9
Math spacing commands . . . . . . . . . . . . . . . . . . . . . . . .
493
B Text symbol tables
495
B.1
Some European characters
. . . . . . . . . . . . . . . . . . . . . . .
495
B.2
Text accents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
496
B.3
Text font commands . . . . . . . . . . . . . . . . . . . . . . . . . . .
496
B.3.1
Text font family commands . . . . . . . . . . . . . . . . . . .
496
B.3.2
Text font size changes
. . . . . . . . . . . . . . . . . . . . .
497
B.4
Additional text symbols . . . . . . . . . . . . . . . . . . . . . . . . .
498
B.5
Additional text symbols with T1 encoding . . . . . . . . . . . . . . .
499
B.6
Text spacing commands . . . . . . . . . . . . . . . . . . . . . . . . .
500

xviii
Contents
C Some background
501
C.1
A short history
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
501
C.1.1
TEX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
501
C.1.2
LATEX 2.09 and AMS-TEX
. . . . . . . . . . . . . . . . . . .
502
C.1.3
LATEX 3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
503
C.1.4
More recent developments . . . . . . . . . . . . . . . . . . .
504
C.2
How LATEX works . . . . . . . . . . . . . . . . . . . . . . . . . . . .
505
C.2.1
The layers . . . . . . . . . . . . . . . . . . . . . . . . . . . .
505
C.2.2
Typesetting . . . . . . . . . . . . . . . . . . . . . . . . . . .
506
C.2.3
Viewing and printing . . . . . . . . . . . . . . . . . . . . . .
507
C.2.4
LATEX’s ﬁles . . . . . . . . . . . . . . . . . . . . . . . . . . .
508
C.3
Interactive LATEX
. . . . . . . . . . . . . . . . . . . . . . . . . . . .
511
C.4
Separating form and content
. . . . . . . . . . . . . . . . . . . . . .
512
D LATEX and the Internet
515
D.1
Obtaining ﬁles from the Internet . . . . . . . . . . . . . . . . . . . .
515
D.2
The TEX Users Group . . . . . . . . . . . . . . . . . . . . . . . . . .
518
D.3
Some useful sources of LATEX information . . . . . . . . . . . . . . .
519
E PostScript fonts
521
E.1
The Times font and MathTıme . . . . . . . . . . . . . . . . . . . . .
522
E.2
Lucida Bright fonts . . . . . . . . . . . . . . . . . . . . . . . . . . .
524
E.3
More PostScript fonts . . . . . . . . . . . . . . . . . . . . . . . . . .
524
F LATEX localized
525
G LATEX on the iPad
529
G.1
The iPad as a computer . . . . . . . . . . . . . . . . . . . . . . . . .
530
G.1.1
File system . . . . . . . . . . . . . . . . . . . . . . . . . . .
530
G.1.2
FileApp . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
531
G.1.3
Printing . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
533
G.1.4
Text editors . . . . . . . . . . . . . . . . . . . . . . . . . . .
533
G.2
Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
534
G.3
Two LATEX implementations for the iPad . . . . . . . . . . . . . . . .
534
G.3.1
Texpad
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
534
G.3.2
TeX Writer . . . . . . . . . . . . . . . . . . . . . . . . . . .
540
G.4
Conclusion
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
541
H Final thoughts
543
H.1
What was left out?
. . . . . . . . . . . . . . . . . . . . . . . . . . .
543
H.1.1
LATEX omissions
. . . . . . . . . . . . . . . . . . . . . . . .
543
H.1.2
TEX omissions
. . . . . . . . . . . . . . . . . . . . . . . . .
544
H.2
Further reading . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
545
Bibliography
547
Index
551

Foreword
It was the autumn of 1989—a few weeks before the Berlin wall came down, President
George H. W. Bush was president, and the American Mathematical Society decided to
outsource TEX programming to Frank Mittelbach and me.
Why did the AMS outsource TEX programming to us? This was, after all, a decade
before the words “outsourcing” and “oﬀ-shore” entered the lexicon. There were many
American TEX experts. Why turn elsewhere?
For a number of years, the AMS tried to port the mathematical typesetting features
of AMS-TEX to LATEX, but they made little progress with the AMSFonts. Frank and I
had just published the New Font Selection Scheme for LATEX, which went a long way to
satisfy what they wanted to accomplish. So it was logical that the AMS turned to us to
add AMSFonts to LATEX. Being young and enthusiastic, we convinced the AMS that the
AMS-TEX commands should be changed to conform to the LATEX standards. Michael
Downes was assigned as our AMS contact; his insight was a tremendous help.
We already had LATEX-NFSS, which could be run in two modes: compatible with
the old LATEX or enabled with the new font features. We added the reworked AMS-
TEX code to LATEX-NFSS, thus giving birth to AMS-LATEX , released by the AMS at the
August 1990 meeting of the International Mathematical Union in Kyoto.
AMS-LATEX was another variant of LATEX. Many installations had several LATEX
variants to satisfy the needs of their users: with old and new font changing commands,
with and without AMS-LATEX , a single and a multi-language version. We decided
to develop a Standard LATEX that would reconcile all the variants. Out of a group of
interested people grew what was later called the LATEX3 team—and the LATEX3 project
got underway. The team’s ﬁrst major accomplishment was the release of LATEXe in June
1994. This standard LATEX incorporates all the improvements we wanted back in 1989.
It is now very stable and it is uniformly used.
Under the direction of Michael Downes, our AMS-LATEX code was turned into
AMS packages that run under LATEX just like other packages. Of course, the LATEX3
team recognizes that these are special; we call them “required packages” because they
are part and parcel of a mathematician’s standard toolbox.
xix

xx
Foreword
Since then a lot has been achieved to make an author’s task easier. A tremendous
number of additional packages are available today. The LATEX Companion, 2nd edition,
describes many of my favorite packages.
George Grätzer got involved with these developments in 1990, when he got his
copy of AMS-LATEX in Kyoto. The documentation he received explained that AMS-
LATEX is a LATEX variant—read Lamport’s LATEX book to get the proper background.
AMS-LATEX is not AMS-TEX either—read Spivak’s AMS-TEX book to get the proper
background. The rest of the document explained in what way AMS-LATEX diﬀers from
LATEX and AMS-TEX. Talk about a steep learning curve ...
Luckily, George’s frustration working through this nightmare was eased by his
lengthy e-mail correspondence with Frank and lots of telephone calls to Michael. Three
years of labor turned into his ﬁrst book on LATEX, providing a “simple introduction to
AMS-LATEX ”. This edition is more mature, but preserves what made his ﬁrst book such
a success. Just as in the ﬁrst book, Part I, Mission Impossible, is a short introduction for
the beginner. Chapter 1, Short Course, dramatically reducing the steep learning curve
of a few weeks to a few hours in only 30 pages. Chapter 2, And a few more things...
adds a few more advanced topics useful already at this early stage.
The rest of the book is a detailed presentation of everything you may need to know.
George “teaches by example”. You ﬁnd in this book many illustrations of even the
simplest concepts. For articles, he presents the LATEX source ﬁle and the typeset re-
sult. For formulas, he discusses the building blocks with examples, presents a Formula
Gallery, and a Visual Guide for multiline formulas.
Going forth and creating “masterpieces of the typesetting art”—as Donald Knuth
put it at the end of the TEXbook—requires a fair bit of initiation. This is the book for
the LATEX beginner as well as for the advanced user. You just start at a diﬀerent point.
The topics covered include everything you need for mathematical publishing.
Instructions on creating articles, from the simple to the complex
Converting an article to a presentation
Customize LATEX to your own needs
The secrets of writing a book
Where to turn to get more information
The many examples are complemented by a number of easily recognizable fea-
tures:
Rules which you must follow
Tips on what to be careful about and how to achieve some speciﬁc results
Experiments to show what happens when you make mistakes—sometimes, it can be
diﬃcult to understand what went wrong when all you see is an obscure LATEX
message
This book teaches you how to convert your mathematical masterpieces into typo-
graphical ones, giving you a lot of useful advice on the way. How to avoid the traps for
the unwary and how to make your editor happy. And hopefully, you’ll experience the
fascination of doing it right. Using good typography to better express your ideas.

Foreword
xxi
If you want to learn LATEX, buy this book and start with the Short Course. If you
can have only one book on LATEX next to your computer, this is the one to have. And
if you want to learn about the world of LATEX packages as of 2004, also buy a second
book, the LATEX Companion, 2nd edition.
Rainer Schöpf
LATEX3 team


Preface
to the ﬁfth edition
My book Practical LATEX [42] was published last year. Many of the changes in this ﬁfth
edition are based on Practical LATEX and on my articles “What Is New in LATEX?” in
the Notices of the American Mathematical Society [36–41] and [43].
Part I. Short Course of the fourth edition was revised under the title Chapter 1.
Short Course. I renamed Part I: Mission Impossible. This part now has a second chapter:
And a few more things ... The new Chapter 1 is what you absolutely, unquestionably
must know to write your ﬁrst TEX document. It’s only 30 pages long, should not take
more than a few hours to read and understand. No typing is necessary, the ﬁles you
need are provided for you, see Section 1.1.2.
The new Chapter 2 adds a few more topics that is helpful to know such as the aux
ﬁles, what is their role, how to handle them. It deals in some detail with error messages.
Finally, it contains Brian Davey’s list of LATEX mistakes most often made by authors.
To create “vector graphics” illustrations (see page 343 for an example), many users
switched to Till Tantau’s TikZ package. We introduce TikZ in Chapter 13. We hope
that the few commands we discuss are suﬃcient to get you started.
I carefully revised all the material in this book. One would think that this is not
necessary in a ﬁfth edition. But as Fred says, there are inﬁnitely many typos in any
book, and even our best eﬀorts remove only ﬁnitely many. And so many of the links
have changed...
Finally, I should mention that I renamed the awkward user-deﬁned commands to
custom commands. How come I have not thought of this before?
Toronto, ON, Canada
George Grätzer
xxiii


Introduction
Is this book for you?
This book is for the mathematician, physicist, engineer, scientist, linguist, or technical
typist who has to learn how to typeset articles containing mathematical formulas or
diacritical marks. It teaches you how to use LATEX, a typesetting markup language based
on Donald E. Knuth’s typesetting language TEX, designed and implemented by Leslie
Lamport, and greatly improved under the guidance of AMS.
Part I provides a quick introduction to LATEX, from typing examples of text and
math to typing your ﬁrst article such as the sample article on page 4 and creating your
ﬁrst presentation such as the sample presentation—four slides of which you ﬁnd in
Figure 1.5—in a very short time. The rest of the book provides a detailed exposition of
LATEX.
LATEX has a huge collection of rules and commands. While the basics in Part I
should serve you well in all your writings, most articles and presentations also require
you to look up special topics. Learn Part I well and become passingly familiar with the
rest of the book, so when the need arises you know where to turn with your problems.
You can ﬁnd speciﬁc topics in the Short Contents, the detailed Contents, and the
Index.
Mathematicians ﬁnd LATEX very strange. A typical article in mathematics deals
with a ﬁeld deﬁned by a few axioms, and the topic of the article needs only a few more.
In contrast, LATEX has hundreds of axioms. We try to ease the transition by introducing
at the start as few commands as possible. For instance, we introduce presentations with
only ﬁve new commands.
What is document markup?
When you work with a word processor, you see your document on the computer monitor
more or less as it looks when printed, with its various fonts, font sizes, font shapes (e.g.,
xxv

xxvi
Introduction
roman, italic) and weights (e.g., normal, boldface), interline spacing, indentation, and
so on.
Working with a markup language is diﬀerent. You type the source ﬁle of your
article in a text editor, in which all characters appear in the same font. To indicate
changes in the typeset text, you must add text markup commands to the source ﬁle.
For instance, to emphasize the phrase detailed description in a LATEX source ﬁle,
type
\emph{detailed description}
The \emph command is a markup command. The marked-up text yields the typeset
output
detailed description
In order to typeset math, you need math markup commands. As a simple example,
consider the formula ∫
√
𝛼2 + 𝑥2 𝑑𝑥. To mark it up in LATEX, type
$\int \sqrt{\alpha^{2} + x^{2}}\,dx$
You do not have to worry about determining the size of the integral symbol or how to
construct the square root symbol that covers 𝛼2 + 𝑥2. LATEX does it all for you.
The three layers
The markup language we shall discuss comes in three layers: TEX, LATEX, and the
AMS packages, described in detail in Appendix C. Most LATEX installations automatic-
ally place all three on your computer. You do not have to know what comes from which
layer, so we consider the three together and call it LATEX.
The three platforms
Most of you run LATEX on one of the following three computer types:
A Windows computer, a computer running Microsoft Windows
A Mac, a Macintosh computer running OS X
A computer running a UNIX variant such as Solaris or Linux
The LATEX source ﬁle and the typeset version both look the same independent of
what computer you have. However, the way you type your source ﬁle, the way you
typeset it, and the way you look at the typeset version depends on the computer and on
the LATEX implementation you use.

Introduction
xxvii
What’s in the book?
Part I is Mission Impossible; it helps you to get started quickly with LATEX, to type
your ﬁrst articles, to make your ﬁrst presentations, and it prepares you to tackle LATEX
in more depth in the subsequent parts.
Chapter 1 is the Short Course. You start writing your ﬁrst article—as typeset on
page 4—and prepare your ﬁrst presentation—see some of the slides typeset on page 27.
This chapter introduces how LATEX uses the keyboard and how to type text. You do not
need to learn much to understand the basics. Text markup is quite easy. You also learn
math markup, which is not so straightforward. Several sections in this chapter ease
you into mathematical typesetting. There is a section on the basic building blocks of
math formulas. Another one discusses equations. Finally, we present the two simplest
multiline formulas, which should cover most of your everyday needs. We also cover
the elements of presentations with a simple example.
In Chapter 2, we explain how things work, the structure of LATEX, the auxiliary
ﬁles, the logical and visual design of an article, LATEX error messages. Finally, we
present a long list of dos and don’t to help you write good LATEX.
Part II introduces the two most basic skills for writing with LATEX in depth, typing
text and typing math.
Chapters 3 and 4 introduce text and displayed text. Chapter 3 is especially im-
portant because, when you type a LATEX document, most of your time is spent typing
text. The topics covered include special characters and accents, hyphenation, fonts, and
spacing. Chapter 4 covers displayed text, including lists and tables, and for the mathe-
matician, proclamations (theorem-like structures) and proofs.
Typing math is the heart of any mathematical typesetting system. Chapter 5 dis-
cusses inline formulas in detail, including basic constructs, delimiters, operators, math
accents, and horizontally stretchable lines. The chapter concludes with the Formula
Gallery.
Math symbols are covered in three sections in Chapter 6. How to space them,
how to build new ones; we introduce the new set of some 2,000 STIX math symbols.
We also look at the closely related subjects of math alphabets and fonts. Then we discuss
tagging and grouping equations.
LATEX knows a lot about typesetting an inline formula, but not much about how
to display a multiline formula. Chapter 7 presents the numerous tools LATEX oﬀers to
help you do that. We start with a Visual Guide to help you get oriented.
Part III discusses the parts of a LATEX document. In Chapter 8, you learn about
the structure of a LATEX document. The most important topics are sectioning and cross-
referencing. In Chapter 9, we discuss the amsart document class for articles. In partic-
ular, I present the title page information. Chapter 9 also features secondarticle.tex,
a sample article for amsart, somewhat more advanced than firstarticle.tex type-
set on page 4. You can learn a lot about LATEX just by reading the source ﬁle one para-
graph at a time and seeing how that paragraph is typeset. We conclude this chapter
with a brief description of the AMS distribution, the packages and document classes,

xxviii
Introduction
of which amsart is a part.
In Chapter 10 the most commonly used legacy document classes are presented,
article, report, and letter (the book class is discussed in Chapter 17), along with
a description of the standard LATEX distribution. Although article is not as sophisti-
cated as amsart, it is commonly used for articles not meant for publication.
In Part IV, we start with Chapter 11, discussing PDF ﬁles, hyperlinks, and the
hyperref package. This prepares you for presentations, which are PDF ﬁles with hy-
perlinks. In Chapter 12 we utilize the beamer package for making LATEX presentations
and Chapter 13 introduces its sister package TikZ for illustrations.
Part V (Chapter 14) introduces techniques to customize LATEX: custom com-
mands and environments created by users, and command ﬁles. We present a sample
command ﬁle, newlattice.sty, and a version of the second sample article utilizing
this command ﬁle. You learn how parameters that aﬀect LATEX’s behavior are stored
in counters and length commands, how to change them, and how to design your own
custom lists. A ﬁnal section discusses the pitfalls of customization.
In Part VI (Chapters 15 and 16), we discuss the special needs of longer doc-
uments. Two applications, contained in the standard LATEX distribution, BIBTEX and
MakeIndex, make compiling large bibliographies and indexes much easier.
LATEX provides the book and the amsbook document classes to serve as founda-
tions for well-designed books. We discuss these in Chapter 17. Better quality books
have to use document classes designed by professionals.
You will probably ﬁnd yourself referring to Appendices A and B time and again.
They contain the math and text symbol tables. You can also ﬁnd them in the samples
ﬁle.
Appendix C relates some historical background material on LATEX. It gives you
some insight into how LATEX developed and how it works. Appendix D discusses the
many ways we can ﬁnd LATEX material on the Internet. Appendix E is a short introduc-
tion to the use of PostScript fonts in a LATEX document. Appendix F brieﬂy describes
the use of LATEX for languages other than American English.
LATEX on an iPad is introduced in Appendix G.
Finally, Appendix H discusses what we left out, points you towards some areas
for further reading, and mentions some recent developments.
Lots of sample ﬁles help you save typing examples, see Section 1.1.2. You also
get PDF ﬁles of Mission Impossible, the symbol tables, and the STIX symbols.
Mission statement
This book is a guide for typesetting mathematical documents within the constraints im-
posed by LATEX, an elaborate system with hundreds of rules. LATEX allows you to per-
form almost any mathematical typesetting task through the appropriate application of
its rules. You can customize LATEX by introducing custom commands and environments
and by changing LATEX parameters. You can also extend LATEX by invoking packages

Introduction
xxix
that accomplish special tasks.
It is not my goal
to survey the hundreds of LATEX packages you can utilize to enhance LATEX
to teach how to write TEX code to create your own packages
to discuss how to design beautiful documents by writing document classes
The deﬁnitive book on the ﬁrst topic, as of 2004, is Frank Mittelbach and Michel
Goosens’s The LATEX Companion, 2nd edition [56] (in collaboration with Johannes
Braams, David Carlisle, and Chris Rowley). The second and third topics still await
authoritative treatment.
Conventions
To make this book easy to read, I use some simple conventions:
Explanatory text is set in this typeface: Times.
Computer Modern typewriter is used to show what you
should type, as well as messages from LaTeX. All the
characters in this typeface have the same width,
making it easy to recognize.
I also use Computer Modern typewriter to indicate
– Commands (\newpage)
– Environments (\align)
– Documents (firstarticle.tex)
– Document classes (amsart)
– Document class options (draft)
– Folders or directories (work)
– The names of packages—extensions of LATEX (verbatim)
When I show you how something looks when typeset, I use Computer Modern, TEX’s
standard typeface:
I think you ﬁnd this typeface suﬃciently diﬀerent from the other typefaces I
have used. The strokes are much lighter so that you should not have much
diﬃculty recognizing typeset LATEX material. When the typeset material is

xxx
Introduction
a separate paragraph or paragraphs, corner brackets in the margin set it oﬀ
from the rest of the text—unless it is a displayed formula.
For explanations in the text, such as
Compare iﬀwith iff, typed as iff and if{f}, respectively.
the same typefaces are used. Because they are not set oﬀspatially, it may be a little
more diﬃcult to see that iﬀis set in Computer Modern roman (in Times, it looks like
this: iﬀ), whereas iff is set in the Computer Modern typewriter typeface. Compare:
iﬀ, iﬀ, iff, and a larger version: iﬀ, iﬀ, iff.
I usually introduce commands with examples, such as
\\[22pt]
However, it is sometimes necessary to deﬁne the syntax of a command more formally.
For instance,
\\[length ]
where length, typeset in Computer Modern typewriter italic font, represents the
value you have to supply.
Good luck and have fun.
E-mail:
gratzer@me.com
Home page:
http://server.maths.umanitoba.ca/homepages/gratzer/

PART I
Mission Impossible

C H A P T E R
1
Short course
It happens to most of us. We live a happy life without LATEX and then, all of a sudden,
we have to do something urgent that requires it.
If you are a student, maybe your professor turned to you and said “I need the
solutions to these exercises typed up and distributed to the class by tomorrow” and the
solutions are chock-full of formulas, diﬃcult to do in Word.
Or you are a researcher whose documents have always been typed up by a secretary.
You have to attend a conference and give a presentation. Your secretary is on vacation.
In my case, it was a letter (this was before e-mail) from the American Mathematical
Society, in which they informed me that my paper, written in Word, was accepted for
publication. The AMS will publish the paper in nine months. However, a LATEX version
would be published in three months! So I had to learn LATEX in a hurry.
The mission, should you choose to accept it, is to get started really fast in
LATEX. Our goal is to produce in LATEX the little article printed on the next
page.
Relax, this chapter will not self-destruct in ﬁve seconds.
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1_1
3

4
Chapter 1
Short course
A TECHNICAL RESULT
FOR CONGRUENCES OF FINITE LATTICES
G. GR¨ATZER
Abstract. We present a technical result for congruences on ﬁnite lattices.
1. Introduction
In some recent research, G. Cz´edli and I, see [1] and [2], spent quite an eﬀort
in proving that some equivalence relations on a planar semimodular lattice are
congruences. The number of cases we had to consider was dramatically cut by the
following result.
Theorem 1. Let L be a ﬁnite lattice. Let δ be an equivalence relation on L with
intervals as equivalence classes. Then δ is a congruence relation iff the following
condition and its dual hold:
(C+) If x is covered by y, z ∈L and x ≡y
(mod δ), then z ≡y + z
(mod δ).
2. The proof
We prove the join-substitution property: if x ≤y and x ≡y (mod δ), then
(1)
x + z ≡y + z
(mod δ).
Let U = [x, y + z]. We induct on length U, the length of U.
Let I = [y1, y + z] and J = [z1, y + z]. Then length I and length J < length U.
Hence, the induction hypothesis applies to I and δ⌉I, and we obtain that w ≡y+w
(mod δ). By the transitivity of δ, we conclude that
(2)
z1 ≡y + w
(mod δ).
Therefore, applying the induction hypothesis to J and δ⌉J, we conclude (1).
References
[1] G. Cz´edli, Patch extensions and trajectory colorings of slim rectangular lattices. Algebra Uni-
versalis 88 (2013), 255–280.
,r
e
z
t
a¨
r
G
.
G
]
2
[
Congruences of fork extensions of lattices. Acta Sci. Math. (Szeged), 57 (2014),
417–434.
Department of Mathematics, University of Manitoba, Winnipeg, MB R3T 2N2, Canada
E-mail address, G. Gr¨atzer: gratzer@me.com
URL, G. Gr¨atzer: http://tinyurl.com/gratzerhomepage
Date: March 21, 2015.
2010 Mathematics Subject Classiﬁcation. Primary: 06B10.
Key words and phrases. ﬁnite lattice, congruence.
1

1.1
Getting started
5
1.1
Getting started
1.1.1
Your LATEX
Are you sitting in front of your computer that has a LATEX implementation? If you use
a UNIX computer, you surely are. If you are in front of a Windows computer or a Mac,
point your Internet browser at tug.org. Choose to download MikTeX for a Windows
computer and MacTeX for a Mac. Follow the easy instructions (and be patient, these
are big downloads) and you are done.
Even better, ﬁnd a friend who can help.
1.1.2
Sample ﬁles
We work with a few sample documents. Download them from the Springer page for
this book:
http://www.springer.com/us/book/9783319237954
I suggest you create a folder, samples, on your computer to store the downloaded
sample ﬁles, and another folder called work, where you will keep your working ﬁles.
Copy the documents from the samples to the work folder as needed. In this book, the
samples and work folders refer to the folders you created.
One of the sample ﬁles is sample.cls. Make sure it is in the work folder when
you typeset a sample document.
1.1.3
Editing cycle
Watch a friend type a document in LATEX and learn the basic steps.
1. A text editor is used to create a LATEX source ﬁle. A source ﬁle might look like this:
\documentclass{amsart}
\begin{document}
Then $\delta$ is a congruence relation. I can type formulas!
\end{document}
Note that the source ﬁle is diﬀerent from a typical word processor ﬁle. All characters
are displayed in the same font and size.
2. Your friend “typesets” the source ﬁle (tells the application to produce a typeset ver-
sion) and views the result on the monitor:
Then 𝛿is a congruence relation. I can type formulas!
3. The editing cycle continues. Your friend goes back and forth between the source ﬁle
and the typeset version, making changes and observing the results of these changes.

6
Chapter 1
Short course
4. The ﬁle is viewed/printed. View the typeset version as a pdf ﬁle or print it to get a
paper version.
If LATEX ﬁnds a mistake when typesetting the source ﬁle, it records this in the
log ﬁle. The log window (some call it console) displays a shorter version.
Various LATEX implementations have diﬀerent names for the source ﬁle, the text
editor, the typeset ﬁle, the typeset window, the log ﬁle, and the log window. Become
familiar with these names, so you can follow along with our discussions.
1.1.4
Typing the source ﬁle
A source ﬁle is made up of text, formulas, and instructions (commands) to LATEX.
For instance, consider the following variant of the ﬁrst sentence of this paragraph:
A source file is made up of text, formulas (e.g.,
$\sqrt{5}$), and \emph{instructions to} \la.
This typesets as
A source ﬁle is made up of text, formulas (e.g.,
√
5), and instructions to LATEX.
In this sentence, the ﬁrst part
A source file is made up of text, formulas (e.g.,
is text. Then
$\sqrt{5}$
is a formula
), and
is text again. Finally,
\emph{instructions to} \la.
The instruction \emph is a command with an argument, while the instruction \LaTeX is
a command without an argument. Commands, as a rule, start with a backslash ( \ ) and
tell LATEX to do something special. In this case, the command \emph emphasizes its
argument (the text between the braces). Another kind of instruction to LATEX is called
an environment. For instance, the commands
\begin{center}
\end{center}
enclose a center environment; the contents (the text typed between these two com-
mands) are centered when typeset.
In practice, text, formulas, and instructions (commands) are mixed. For example,
My first integral: $\int \zeta^{2}(x) \, dx$.

1.2
The keyboard
7
is a mixture of all three; it typesets as
My ﬁrst integral: ∫𝜁2(𝑥) 𝑑𝑥.
Creating a document in LATEX requires that we type in the source ﬁle. So we start
with the keyboard, proceed to type a short note, and learn some simple rules for typing
text in LATEX.
1.2
The keyboard
The following keys are used to type the source ﬁle:
a-z
A-Z
0-9
+ = * / ( ) [ ]
You can also use the following punctuation marks:
,
;
.
?
!
:
‘
’
-
and the space bar, the Tab key, and the Return (or Enter) key.
Finally, there are thirteen special keys that are mostly used in LATEX commands:
#
$
%
&
~
_
^
\
{
}
@
"
|
If you need to have these characters typeset in your document, there are commands to
produce them. For instance, the dollar sign, $ is typed as \$, the underscore, _ , is typed
as \_, and the percent sign, %, is typed as \%. Only @ requires no special command,
type @ to print @; see Sections 3.1.2 and B.4.
There are also commands to produce composite characters, such as accented char-
acters, for example ä, which is typed as \"{a}. LATEX prohibits the use of other keys
on your keyboard unless you have special support for it. See the text accent table in
Sections 3.4.7 and B.2. If you want to use accented characters in your source ﬁle, then
you must use the inputenc package.
Tip
The text accent table looks formidable. Don’t even dream of memorizing it. You will
need very few. When you need a text accent, look it up. I know only one: \"a (LOL).
If you use a name with accented characters, ﬁgure out once how to type it, and then any
time you need it you can just copy and paste (chances are that the name is in your list
of references).

8
Chapter 1
Short course
1.3
Your ﬁrst text notes
We start our discussion on how to type a note in LATEX with a simple example. Suppose
you want to use LATEX to produce the following:
It is of some concern to me that the terminology used in multi-section math
courses is not uniform.
In several sections of the course on matrix theory, the term “hamiltonian-
reduced” is used. I, personally, would rather call these “hyper-simple”. I invite
others to comment on this problem.
To produce this typeset document, create a new ﬁle in your work folder with
the name textnote1.tex. Type the following, including the spacing and linebreaks
shown, but not the line numbers:
1
% Sample file: textnote1.tex
2
\documentclass{sample}
3
4
\begin{document}
5
It is of some concern to me
that
6
the terminology used in
multi-section
7
math courses is not uniform.
8
9
In several sections of the course on
10
matrix theory, the
term
11
‘‘hamiltonian-reduced’’ is used.
12
I, personally, would rather call these
13
‘‘hyper-simple’’. I invite others
14
to comment on this
problem.
15
\end{document}
Alternatively, copy the textnote1.tex ﬁle from the samples folder (see page 5).
The ﬁrst line of textnote1.tex starts with %. Such lines are called comments
and are ignored by LATEX. Commenting is very useful. For example, if you want to add
some notes to your source ﬁle and you do not want those notes to appear in the typeset
version of your document, begin those lines with a %. You can also comment out part
of a line:
simply put, we believe % actually, it’s not so simple
Everything on the line after the % character is ignored by LATEX.
Line 2 speciﬁes the document class, sample (the special class we provided for the
sample documents), which controls how the document is formatted.
The text of the note is typed within the document environment, that is, between
\begin{document} and \end{document}.
Now typeset textnote1.tex. You should get the typeset document as shown.
As you can see from this example, LATEX is diﬀerent from a word processor. It disregards
the way you input and position the text, and follows only the formatting instructions

1.3
Your ﬁrst text notes
9
given by the document class and the markup commands. LATEX notices when you put a
blank space in the text, but it ignores how many blank spaces have been typed. LATEX
does not distinguish between a blank space (hitting the space bar), a tab (hitting the Tab
key), and a single carriage return (hitting Return once). However, hitting Return twice
gives a blank line; one or more blank lines mark the end of a paragraph. There is also
a command for a new paragraph: \par.
LATEX, by default, fully justiﬁes text by placing a ﬂexible amount of space between
words—the interword space—and a somewhat larger space between sentences—the in-
tersentence space. If you have to force an interword space, you can use the \␣command
(in LATEX books, we use the symbol ␣to mean a blank space). The ˜ (tilde) command
also forces an interword space, but with a diﬀerence: it keeps the words on the same
line. This command produces a tie or nonbreakable space.
Note that on lines 11 and 13, the left double quotes is typed as two left single
quotes and the right double quote is typed as two right single quotes, apostrophes.
We numbered the lines of the source ﬁle for easy reference. Sometimes you may
want the same for the typeset ﬁle. This is really easy. Just add the two lines
\usepackage{lineno}
\linenumbers
after the \documentclass line and you get:
It is of some concern to me that the terminology used in multi-section math
1
courses is not uniform.
2
In several sections of the course on matrix theory, the term “hamiltonian-
3
reduced” is used. I, personally, would rather call these “hyper-simple”. I invite
4
others to comment on this problem.
5
Next, we produce the following note:
January 5, 2015
From the desk of George Grätzer
February 7–21 please use my temporary e-mail address:
George_Gratzer@yahoo.com

10
Chapter 1
Short course
Type the source ﬁle, without the line numbers. Save it in your work folder as
textnote2.tex (textnote2.tex can also be found in the samples folder):
1
% Sample file: textnote2.tex
2
\documentclass{sample}
3
4
\begin{document}
5
\begin{flushright}
6
\today
7
\end{flushright}
8
\textbf{From the desk of George Gr\"{a}tzer}
9
10
February 7--21 \emph{please} use my
11
temporary e-mail address:
12
\begin{center}
13
\texttt{George\_Gratzer@yahoo.com}
14
\end{center}
15
\end{document}
This note introduces several additional text features of LATEX.
The \today command (in line 6) to display the date on which the document is type-
set, so you will see a date diﬀerent from the date shown above in your own typeset
document (see also Section 3.4.8).
The environments to right justify (lines 5–7) and center (lines 12–14) text.
The commands to change the text style, including the \emph command (line 10) to
emphasize text, the \textbf command (line 8) for bold text (text bold font), and
the \texttt command (line 13) to produce typewriter style text. These are
commands with arguments.
The form of the LATEX commands. As we have noted already, almost all LATEX com-
mands start with a backslash ( \ ) followed by the command name. For instance,
\textbf is a command and textbf is the command name. The command name is
terminated by the ﬁrst non-alphabetic character, that is, by any character other than
a–z or A–Z.
Tip
textnote2.tex is a ﬁle name but textbf1 is not a command name. \textbf1
typesets as 1. Let’s look at this a bit more closely. \textbf is a valid command.
If a command needs an argument and it is not followed by braces, then it takes the
next character as its argument. So \textbf1 is the command \textbf with the
argument 1; it typesets as 1.

1.4
Lines too wide
11
The multiple role of hyphens: Double hyphens are used for number ranges. For ex-
ample, 7--21 (in line 10) typesets as 7–21. The punctuation mark – is called an en
dash. Use triple hyphens for the em dash punctuation mark—such as the one in this
sentence.
Special rules for special characters (see Section 1.2), for accented characters, and for
some European characters. For instance, the accented character ä is typed as \"{a}.
(But I confess, I always type my name as Gr\"atzer without the braces.)
See Section 3.4 for more detail. In Appendix B, all the text symbols are organized
into tables. We also have the SymbolTables.pdf in the samples folder.
Tip
Keep SymbolTables.pdf handy on your computer!
1.4
Lines too wide
LATEX reads the text in the source ﬁle one line at a time and typesets the entire para-
graph when the end of a paragraph is reached. Occasionally, LATEX gets into trouble
when trying to split the paragraph into typeset lines. To illustrate this situation, modify
textnote1.tex. In the second sentence, replace term by strange term. Now save
this modiﬁed ﬁle in your work folder using the name textnote1bad.tex (or copy the
ﬁle from the samples folder).
Typesetting textnote1bad.tex, you obtain the following:
It is of some concern to me that the terminology used in multi-section math
1
courses is not uniform.
2
In several sections of the course on matrix theory, the term “hamiltonian-
3
reduced” is used. I, personally, would rather call these “hyper-simple”. I invite
4
others to comment on this problem.
5
The ﬁrst line of paragraph two is too wide. In the log window, LATEX displays the
following messages:
Overfull \hbox (15.38948pt
too wide) in paragraph at lines 9--15 []\OT1/cmr/m/n/10 In sev-eral
sec-tions of the course on ma-trix the-ory, the strange term
‘‘hamiltonian-
It informs you that the typeset version of this paragraph has a line that is 15.38948 points
too wide. LATEX uses points (pt) to measure distances; there are about 72 points in 1 inch.
Then it identiﬁes the source of the problem: LATEX did not properly hyphenate the word
hamiltonian-reduced because it (automatically) hyphenates a hyphenated word only at
the hyphen.

12
Chapter 1
Short course
What to do, when a line is too long?
Tip
Your ﬁrst line of defense: reword the oﬀending line. Write
The strange term ‘‘hamiltonian-reduced’’ is used
in several sections of the course on matrix theory.
and the problem goes away.
Your second line of defense: insert one or more optional hyphen commands (\-), which
tell LATEX where it can hyphenate the word. Write:
hamil\-tonian-reduced
1.5
A note with formulas
In addition to the regular text keys and the 13 special keys discussed in Section 1.2, two more
keys are used to type formulas: < and >. The formula 2 < |𝑥| > 𝑦(typed as $2 < |x| >y$)
uses both. Note that such a formula, called inline, is enclosed by a pair of $ symbols.
We begin typesetting formulas with the following note:
In ﬁrst-year calculus, we deﬁne intervals such as (𝑢, 𝑣) and (𝑢, ∞). Such an interval
is a neighborhood of 𝑎if 𝑎is in the interval. Students should realize that ∞is only
a symbol, not a number. This is important since we soon introduce concepts such as
lim𝑥→∞𝑓(𝑥).
When we introduce the derivative
lim
𝑥→𝑎
𝑓(𝑥) −𝑓(𝑎)
𝑥−𝑎
,
we assume that the function is deﬁned and continuous in a neighborhood of 𝑎.
To create the source ﬁle for this mixed text and formula note, create a new document
with your text editor. Name it formulanote.tex, place it in the work folder, and type the
following, without the line numbers (or simply copy formulanote.tex from the samples
folder):
1
% Sample file: formulanote.tex
2
\documentclass{sample}
3
4
\begin{document}
5
In first-year calculus, we define intervals such
6
as
$(u, v)$ and $(u, \infty)$. Such an interval
7
is a \emph{neighborhood} of
$a$
8
if
$a$ is in the interval. Students should
9
realize that
$\infty$ is only a
10
symbol, not a number. This is important since
11
we soon introduce concepts

1.5
A note with formulas
13
12
such as $\lim_{x \to \infty} f(x)$.
13
14
When we introduce the derivative
15
\[
16
\lim_{x \to a} \frac{f(x) - f(a)}{x - a},
17
\]
18
we assume that the function is defined and
19
continuous in a neighborhood of
$a$.
20
\end{document}
This note introduces several basic concepts of formulas in LATEX.
There are two kinds of math formulas and environments in formulanote.tex:
– Inline formulas; they open and close with $ or open with \( and close with \).
– Displayed math environments; they open with \[ and close with \]. (We will introduce
many other displayed math environments in Section 1.7 and Chapter 7.)
LATEX uses its own spacing rules within math environments, and completely ignores the
white spaces you type, with two exceptions:
– Spaces that terminate commands. So in $\infty a$ the space is not ignored; $\inftya$
produces an error.
– Spaces in the arguments of commands that temporarily revert to regular text. \text is
such a command; see Sections 1.6 and 5.4.6.
The white space that you add when typing formulas is important only for the readability
of the source ﬁle.
A math symbol is invoked by a command. For example, the command for ∞is \infty and
the command for →is \to. The math symbols are organized into tables in Appendix A;
see also SymbolTables.pdf in the samples folder.
Some commands, such as \sqrt, need arguments enclosed by { and }. To typeset
√
5,
type $\sqrt{5}$, where \sqrt is the command and 5 is the argument.
Some commands need more than one argument. To get
3 + 𝑥
5
type
\[
\frac{3+x}{5}
\]
where \frac is the command, 3+x and 5 are the arguments.
There is no blank line before a displayed formula!

14
Chapter 1
Short course
Tip
Keep in mind that many spaces equal one space in text, whereas your spacing is ignored in
formulas, unless the space terminates a command.
1.6
The building blocks of a formula
A formula (inline or displayed) is built from components. We group them as follows:
Arithmetic
Binomial coeﬃcients
Congruences
Delimiters
Ellipses
Integrals
Math accents
Matrices
Operators
Roots
Text
In this section, I describe each of these groups, and provide examples illustrating their use.
Read carefully the groups you need!
Arithmetic We type the arithmetic operations 𝑎+ 𝑏, 𝑎−𝑏, −𝑎, 𝑎∕𝑏, and 𝑎𝑏in the natural
way: $a + b$, $a - b$, $-a$, $a / b$, and $a b$ (the spaces are typed only for
readability).
If you wish to use ⋅or × for multiplication, as in 𝑎⋅𝑏or 𝑎×𝑏, use \cdot or \times, re-
spectively. The formulas 𝑎⋅𝑏and 𝑎×𝑏are typed as $a \cdot b$ and $a \times b$.
Displayed fractions, such as
1 + 2𝑥
𝑥+ 𝑦+ 𝑥𝑦
are typed with \frac:
\[
\frac{1 + 2x}{x + y + xy}
\]
Subscripts and superscripts Subscripts are typed with _ and superscripts with ˆ
(caret). Subscripts and superscripts should be enclosed in braces, that is, typed
between { and }. To get 𝑎1, type $a_{1}$. Omitting the braces in this example
causes no harm, but to get 𝑎10, you must type $a_{10}$. Indeed, $a_10$ is
typeset as 𝑎10.
There is one symbol, the prime (’), that is automatically superscripted in a formula.
To get 𝑓′(𝑥), just type $f’(x)$. (On many keyboards, the symbol on the key looks
like this: `)
See Section 5.4.1 for more detail.

1.6
The building blocks of a formula
15
Binomial coeﬃcients Binomial coeﬃcients are typeset with the \binom command.
\binom{a}{b + c} is here inline: ( 𝑎
𝑏+𝑐
), whereas
(
𝑎
𝑏+ 𝑐
)
is the displayed version.
See Section 5.4.2 for more detail.
Congruences The two most important forms are
𝑎≡𝑣(mod 𝜃)
typed as
$a \equiv v \pmod{\theta}$
𝑎≡𝑣(𝜃)
typed as
$a \equiv v \pod{\theta}$
See Section 5.6.2 for more detail.
Delimiters Parentheses and square brackets are examples of delimiters. They are used to
delimit some subformulas, as in $[(a*b)+(c*d)]^{2}$, which typesets as [(𝑎∗𝑏)+
(𝑐∗𝑑)]2. LATEX can be instructed to expand them vertically to enclose a formula such
as
(
1 + 𝑥
2 + 𝑦2
)2
which is typed as
\[
\left( \frac{1 + x}{2 + y^{2}} \right)^{2}
\]
The \left( and \right) commands tell LATEX to size the parentheses correctly, rela-
tive to the size of the formula inside the parentheses; sometimes the result is pleasing,
sometimes not.
We dedicate Section 5.5 to this topic.
Ellipses In a formula, the ellipsis is printed either as low (or on-the-line) dots:
𝐹(𝑥1, … , 𝑥𝑛)
is typed as
$F(x_{1}, \dots, x_{n})$
or as centered dots:
𝑥1 + ⋯+ 𝑥𝑛
is typed as
$x_{1} + \dots + x_{n}$
Use \cdots and \ldots if \dots does not work as expected.
See Section 5.4.3 for more detail.

16
Chapter 1
Short course
Integrals The command for an integral is \int. The lower limit is speciﬁed as a sub-
script and the upper limit is speciﬁed as a superscript. For example, the formula
∫𝜋
0 sin 𝑥𝑑𝑥= 2 is typed as
$\int_{0}^{\pi} \sin x \, dx = 2$
where \, is a spacing command.
The formula looks bad without the spacing command: ∫𝜋
0 sin 𝑥𝑑𝑥= 2.
See Section 5.4.4 for more complicated integrals.
Math accents The four most frequently used math accents are:
̄𝑎
typed as
$\bar{a}$
̂𝑎
typed as
$\hat{a}$
̃𝑎
typed as
$\tilde{a}$
⃗𝑎
typed as
$\vec{a}$
See Section 5.7 for more detail. See Sections 5.7 and A.8 for complete lists.
Matrices You type the matrix
𝑎+ 𝑏+ 𝑐
𝑢𝑣
𝑥−𝑦
27
𝑎+ 𝑏
𝑢+ 𝑣
𝑧
134
with the \matrix command
\[
\begin{matrix}
a + b + c & uv
& x - y & 27\\
a + b
& u + v & z
& 134
\end{matrix}
\]
The matrix environment separates adjacent matrix elements within a row with am-
persands. Rows are separated by new line commands, \\.
Tip
Do not end the last row with a new line command.
The matrix environment has to appear within a formula, as a rule, in a displayed
formula. It can be used in the align environment discussed in Sections 1.7.3 and 7.5.
The matrix environment does not provide delimiters. Several variants do, including
pmatrix and vmatrix. For example,
𝐀=
(𝑎+ 𝑏+ 𝑐
𝑢𝑣
𝑎+ 𝑏
𝑢+ 𝑣
) |||||
30
7
3
17
|||||

1.6
The building blocks of a formula
17
is typed as follows:
\[
\mathbf{A} =
\begin{pmatrix}
a + b + c & uv\\
a + b & u + v
\end{pmatrix}
\begin{vmatrix}
30 & 7\\
3 & 17
\end{vmatrix}
\]
As you can see, pmatrix typesets as a matrix between a pair of \left( and \right)
commands, while vmatrix typesets as a matrix between a pair of \left| and \right|
commands. There is also bmatrix for square brackets.
See Section 7.7.1 for a listing of all the matrix variants and Sections 5.5 and A.6 for
lists of delimiters.
Operators To typeset the sine function, sin 𝑥, type $\sin x$. Note that $sin x$ would
be typeset as 𝑠𝑖𝑛𝑥—-how awful. LATEX calls \sin an operator. Sections 5.6 and A.7
list a number of operators. Some are just like \sin. Others produce a more complex
display, for example,
lim
𝑥→0 𝑓(𝑥) = 0
is typed as
\[
\lim_{x \to 0} f(x) = 0
\]
See Section 5.6 for more detail.
Large operators The command for sum is \sum and for product is \prod. The fol-
lowing two examples:
𝑛
∑
𝑖=1
𝑥2
𝑖
𝑛
∏
𝑖=1
𝑥2
𝑖
are typed as
\[
\sum_{i=1}^{n} x_{i}^{2}\ \ \prod_{i=1}^{n} x_{i}^{2}
\]
Sum and product are examples of large operators. They are typeset larger in
displayed math than in an inline formula. They are listed in Sections 5.6.3
and A.7.1. See Section 5.6.3 for more detail.

18
Chapter 1
Short course
Roots \sqrt produces a square root. $\sqrt{a + 2b}$ typesets as
√
𝑎+ 2𝑏. The 𝑛-th
root,
𝑛√
5, requires the use of an optional argument, which is speciﬁed in brackets:
$\sqrt[n]{5}$. See Section 5.4.5.
Text You can include text in a formula with a \text command. For instance,
𝑎= 𝑏,
by assumption,
is typed as
\[
a = b, \text{\quad by assumption},
\]
where \quad is a spacing command.
See Section 5.4.6 for more detail.
1.7
Displayed formulas
1.7.1
Equations
The equation environment creates a displayed formula and automatically generates an
equation number. The equation
(1)
∫
𝜋
0
sin 𝑥𝑑𝑥= 2
is typed as
\begin{equation}\label{E:firstIntegral}
\int_{0}^{\pi} \sin x \, dx = 2
\end{equation}
The equation number, which is automatically generated, depends on how many numbered
displayed formulas occur before the given equation. You can choose to have equations num-
bered within each section—(1.1), (1.2), ..., in Section 1; (2.1), (2.2), ..., in Section 2; and
so on—by including, in the preamble (see Sections 1.8 and 5.3), the command
\numberwithin{equation}{section}
You can choose to have the equation numbers on the right; see the reqno option of the
amsart document class in Section 10.1.2.
The equation* environment is the same as the displayed formula opened with \[ and
closed with \] we discussed in Section 1.5. Sometimes you may want to use equation* for
the ease of deleting the *-s if you wish.

1.7
Displayed formulas
19
1.7.2
Symbolic referencing
To reference a formula without having to remember a number—which can change when
you edit your document—give the equation a symbolic label by using the \label command
and refer to the equation in your document by using the symbolic label, the argument of
the \label command. In this example, I have called the ﬁrst equation firstIntegral, and
used the convention that the label of an equation starts with E:, so that the complete \label
command is \label{E:firstIntegral}.
The number of this formula is referenced with the \ref command. Its page is refer-
enced using the \pageref command. For example, to get
see (1) on page 18.
type (see Sections 1.3 and Section 3.4.3 for ~)
see~(\ref{E:firstIntegral}) on page~\pageref{E:firstIntegral}.
The \eqref command provides the reference number in parentheses. So the last ex-
ample could be typed
see~\eqref{E:firstIntegral} on page~\pageref{E:firstIntegral}.
The \eqref command is smart. Even if the equation number is referenced in emphasized
or italicized text, the reference typesets upright (in roman type).
The main advantage of this cross-referencing system is that when you add, delete, or re-
arrange equations,
LATEX automatically renumbers the equations and adjusts the
references that appear in your typeset document. For bibliographic references, LATEX uses
the \bibitem command to deﬁne a bibliographic item and the \cite command to cite it.
Tip
For renumbering to work, you have to typeset twice.
Tip
It is a good idea to check the LATEX warnings periodically in the log ﬁle. If you forget to
typeset the source ﬁle twice when necessary, LATEX issues a warning.
What happens if you misspell a reference, e.g., typing \ref{E:FirstIntegral} in-
stead of \ref{E:firstIntegral}? LATEX typesets ??. There are two warnings in the log
ﬁle:
LaTeX Warning: Reference ‘E:FirstIntegral’ on page 39
undefined on input line 475.
for the typeset page and the other one close to the end:
LaTeX Warning: There were undefined references.

20
Chapter 1
Short course
If the argument of \cite is misspelled, you get [?] and similar warnings.
Check the Tip on page 69.
Absolute referencing
Equations can also be tagged by attaching a name to the formula with the \tag command.
The tag replaces the equation number.
For example,
(Int)
∫
𝜋
0
sin 𝑥𝑑𝑥= 2
is typed as
\begin{equation}
\int_{0}^{\pi} \sin x \, dx = 2 \tag{Int}
\end{equation}
Tags are absolute. This equation is always referred to as (Int). Equation numbers, on
the other hand, are relative, they may change when the ﬁle is edited.
1.7.3
Aligned formulas
LATEX has many ways to typeset multiline formulas. We discuss three constructs in this sec-
tion: simple alignment, annotated alignment, and cases. For more constructs, see Chapter 7.
For simple and annotated alignment we use the align environment. Each line in the
align environment is a separate equation, which LATEX automatically numbers.
Simple alignment
Simple alignment is used to align two or more formulas. To obtain the formulas
𝑟2 = 𝑠2 + 𝑡2,
(2)
2𝑢+ 1 = 𝑣+ 𝑤𝛼.
(3)
type the following, using \\ as the line separator and & as the alignment point:
\begin{align}
r^{2}
&= s^{2} + t^{2},
\label{E:Pyth}\\%\eqref{E:Pyth}
2u + 1 &= v + w^{\alpha}.
\label{E:alpha}%\eqref{E:alpha}
\end{align}
Figure 1.1 may help visualize the placements of the ampersands.
Tip
In this displayed formula, \\ is a line separator, not a new line command. Do not place a
\\ to terminate the last line!

1.7
Displayed formulas
21
Figure 1.1: Simple alignment: source and typeset.
These formulas are numbered (2) and (3) because they are preceded by one numbered
equation earlier in this section.
The align environment can also be used to break a long formula into two or more
parts. Since numbering both lines in such a case would be undesirable, you can prevent
the numbering of the second line by using the \notag command in the second part of the
formula. For example,
ℎ(𝑥) = ∫
(
𝑓(𝑥) + 𝑔(𝑥)
1 + 𝑓2(𝑥) + 1 + 𝑓(𝑥)𝑔(𝑥)
√
1 −sin 𝑥
)
𝑑𝑥
(4)
= ∫
1 + 𝑓(𝑥)
1 + 𝑔(𝑥) 𝑑𝑥−2 tan−1(𝑥−2)
is typed as follows:
\begin{align}
h(x) &= \int \left( \frac{f(x) + g(x)}{1+ f^{2}(x)}
+ \frac{1+ f(x)g(x)}{\sqrt{1 - \sin x}}
\right) \, dx\label{E:longInt}\\%\eqref{E:longInt}
&= \int \frac{1 + f(x)}{1 + g(x) } \, dx
- 2 \tan^{-1}(x-2)\notag
\end{align}
The rules for simple alignment are easy to remember.
Rule
Simple alignments
Use the align environment.
Separate the lines with \\.

22
Chapter 1
Short course
In each line, indicate the alignment point with &, one & per line. If the alignment point is
adjacent to an =, +, and so on, place the & before to ensure proper spacing.
Place a \notag command in each line that you do not wish numbered.
If no line should be numbered, use the align* environment.
Place a \label command in each numbered line you can want to reference with \ref,
\eqref, or \pageref.
Annotated alignment
Annotated alignment allows you to align formulas and their annotations, that is, explanatory
text, separately:
𝑥= 𝑥∧(𝑦∨𝑧)
(by distributivity)
(5)
= (𝑥∧𝑦) ∨(𝑥∧𝑧)
(by condition (M))
= 𝑦∨𝑧
This is typed as
\begin{align}
x &= x \wedge (y \vee z)
&&\text{(by distributivity)}\label{E:Align}%\eqref{E:Align}\\
&= (x \wedge y) \vee (x \wedge z)
&&\text{(by condition (M))} \notag\\
&= y \vee z \notag
\end{align}
Figure 1.2 may help visualize the placements of the ampersands.
Rule
Annotated alignment
The rules for annotated alignment are similar to the rules of simple alignment. In each line,
in addition to the alignment point marked by &, there is also a mark for the start of the
annotation: &&.
1.7.4
Cases
The cases construct is a specialized matrix. It has to appear within a math environment
such as the equation environment or the align environment. Here is a typical example:
𝑓(𝑥) =
⎧
⎪
⎨
⎪⎩
−𝑥2,
if 𝑥< 0;
𝛼+ 𝑥,
if 0 ≤𝑥≤1;
𝑥2,
otherwise.

1.8
The anatomy of a document
23
It is typed as follows:
\[
f(x)=
\begin{cases}
-x^{2},
&\text{if $x < 0$;}\\
\alpha + x,
&\text{if $0 \leq x \leq 1$;}\\
x^{2},
&\text{otherwise.}
\end{cases}
\]
The rules for using the cases environment are the same as for matrices. Separate the
lines with \\ and indicate the annotation with &.
1.8
The anatomy of a document
To begin, we use the sample document firstarticle.tex (in the samples folder) to ex-
amine the anatomy of an document.
Every LATEX document has two parts, the preamble and the body. The preamble of a
document is everything from the ﬁrst line of the source ﬁle down to the line
\begin{document}
The body is the contents of the document environment. For a schematic view of a
document, see Figure 1.3.
Figure 1.2: Annotated alignment: source and typeset.

24
Chapter 1
Short course
The preamble contains instructions aﬀecting the entire document. The only required
command in the preamble is the \documentclass command. There are other commands
(such as the \usepackage commands, see Section 8.2) that must be placed in the preamble
if they are used, but such commands do not have to be present in every document.
Here is the preamble and top matter of firstarticle:
%First document, firstarticle.tex
\documentclass{amsart}
\usepackage{amssymb,latexsym}
\newtheorem{theorem}{Theorem}
\begin{document}
\title{A technical result\\ for congruences of finite lattices}
\author{G. Gr\"atzer}
\address{Department of Mathematics\\
University of Manitoba\\
Winnipeg, MB R3T 2N2\\
Canada}
Figure 1.3: A schematic view of a document.

1.10
Adding an illustration
25
\email[G. Gr\"atzer]{gratzer@me.com}
\urladdr[G. Gr\"atzer]{http://tinyurl.com/gratzerhomepage}
\date{March 21, 2015}
\subjclass[2010]{Primary: 06B10.}
\keywords{finite lattice, congruence.}
\maketitle
\begin{abstract}
We present a technical result for congruences on finite lattices.
\end{abstract}
You ﬁnd the source ﬁle, firstarticle.tex, in the samples folder and the typeset document
on page 4.
To simplify the discussion in Part I, we discuss only one document class for articles:
amsart. You may come across its predecessor, article, which handles a limited set of
commands for the preamble and the top matter and displays them diﬀerently. We shall
discuss in detail the amsart document class in Chapter 9. For the article document class,
see Section 10.1.
1.9
Your own commands
Over time, LATEX can be adjusted to ﬁt your needs. You add packages to enable LATEX to do
new things (such as the graphicx package, see Sections 1.10 and 8.4.3) and introduce your
own commands to facilitate typing and make the source ﬁle more readable.
We can add two new commands to the sample article firstarticle.tex:
\newcommand{\pdelta}{\pmod{\delta}}
\DeclareMathOperator{\length}{length}
So instead of
$x \equiv y \pmod{\delta}$+
we can type
$x \equiv y \pdelta$
and instead of length\,$U$, we can type $\length U$ (see Section 14.1.6). Notice how
the spacing is now done by LATEX!
We’ll dedicate Chapter 14 to customizing LATEX.
1.10
Adding an illustration
“And what is the use of a book,” thought Alice, “without pictures or conversations?” I am
not sure what to suggest about conversations, but illustrations we can tackle with ease. Let
us add an illustration, covers.pdf to firstarticle. First, add
\usepackage{graphicx}

26
Chapter 1
Short course
as the fourth line of the document, to the preamble. This will enable LATEX to tackle illustra-
tions. Secondly, add the following lines to firstarticle.tex, say, as the second paragraph
of the introduction:
\begin{figure}[hbt]
{\centering\includegraphics{covers}}
\caption{Theorem~\ref{T:technical} illustrated}\label{F:Theorem}
\end{figure}
We place the illustration covers.pdf in the same folder as firstarticle.tex.
That’s it. You ﬁnd covers.pdf and firstarticleill.tex in the samples folder.
Tip
Make sure that the \label command follows the \caption command! You may have hard
to explain troubles otherwise.
See Section 8.4.3 for more information.
Most people in my ﬁeld used the vector graphics application Adobe Illustrator to pro-
duce the PDF ﬁles for illustrations. Quite recently, it became prohibitively expensive. Luck-
ily, many reasonably priced alternatives are available. In Chapter 13, we discuss an alterna-
tive, TikZ, built for LATEX. Inkspace is an alternative, available for all platforms.
1.11
The anatomy of a presentation
Chances are, one of your ﬁrst exposures to LATEX was watching a presentation. The presenter
used a pdf document produced by LATEX and opened it with Adobe Reader. He went from
“slide” to “slide” by pressing the space bar. Figure 1.4 and Figure 1.5 show four slides of a
presentation.
In LATEX, you use a presentation package—really, a document class—to prepare the
PDF ﬁle. We use Till Tantau’s BEAMER.
Here are the ﬁrst few lines—the preamble and the Title slide—of the source ﬁle of
our sample presentation, firstpresentation.tex (see firstpresentation.tex in the
samples folder, along with Louisville.tex, the full presentation):
\documentclass[leqno]{beamer}
\usetheme{Warsaw}
\DeclareMathOperator{\Princ}{Princ}
\begin{document}
\title{The order of principal congruences}
\author{G. Gr\"atzer}
\date{}
\maketitle

1.11
The anatomy of a presentation
27
The order of principal congruences
G. Gr¨atzer
G. Gr¨atzer
The order of principal congruences
Summary
We characterize the order of principal congruences of a bounded
lattice as a bounded ordered set. We also state a number of open
problems in this new ﬁeld.
arXiv: 1309.6712
G. Gr¨atzer
The order of principal congruences of a bounded lattice
Figure 1.4: The Title slide (Slide 1) and Slide 2
Theorem 1
For a bounded lattice L, the order Princ K is bounded. We now
state the converse.
G. Gr¨atzer
The order of principal congruences of a bounded lattice
Theorem 1
For a bounded lattice L, the order Princ K is bounded. We now
state the converse.
Theorem
Let P be an order with zero and unit. Then there is a bounded
lattice K such that
P ∼= Princ K.
G. Gr¨atzer
The order of principal congruences
Figure 1.5: Slides 3 and 4
\usetheme{Warsaw} provides a ﬂavor. It is followed by the Title slide, providing the
title and the author.
The \title command may be longer, it may contain all the additional information you
may want to display. Here is the \title command of Louisville.tex:
\title[The order of principal congruences of a bounded lattice]
{The order of principal congruences\\
of a bounded lattice.\\
AMS Fall Southeastern Sectional Meeting\\
University of Louisville, Louisville, KY\\
October 5-6, 2013}
Note that the \title has two parts. The ﬁrst, in [], is the short title, repeated in the bottom
line on every slide. The second, in {}, is the title for the front page.
The rest of the presentation source ﬁle is divided into two frames with the structure:
\begin{frame}
\frametitle{}
\end{frame}

28
Chapter 1
Short course
Each frame produces a “slide” (or more). Here is the ﬁrst frame:
\begin{frame}
\frametitle{Summary}
We characterize the order of principal congruences
of a bounded lattice
as a bounded ordered set.
We~also state a number of open problems in this new field.
\medskip
arXiv: 1309.6712
\end{frame}
The command \frametitle gives the slide its title: Summary, see Slide 2 in Figure 1.4. In
the body of the frame, you type regular LATEX.
To produce Slides 3 and 4, it would be natural to try
\begin{frame}
\frametitle{Theorem 1}
For a bounded lattice $L$, the order $\Princ K$ is bounded.
We now state the converse.
\end{frame}
\begin{frame}
\frametitle{Theorem 1}
For a bounded lattice $L$, the order $\Princ K$ is bounded.
We now state the converse.
\begin{theorem}
Let $P$ be an order with zero and unit.
Then there is a bounded lattice~$K$ such that
\[
P \cong \Princ
K.
\]
If $P$ is finite, we can construct $K$ as a finite lattice.
\end{theorem}
\end{frame}
which produces the two frames of Figure 1.6.
This is really jarring to watch. The two lines of the new Slide 3 jump up more than two
lines as they transition to Slide 4.
Here is how we produce Slides 3 and 4 of Figure 1.5:
\begin{frame}
\frametitle{Theorem 1}
For a bounded lattice $L$, the order $\Princ K$ is bounded.
We now state the converse.
\pause
\begin{theorem}

1.11
The anatomy of a presentation
29
Theorem 1
For a bounded lattice L, the order Princ K is bounded. We now
state the converse.
Theorem 1
For a bounded lattice L, the order Princ K is bounded. We now
state the converse.
Theorem
Let P be an order with zero and unit. Then there is a bounded
lattice K such that
P ∼= Princ K.
If P is ﬁnite, we can construct K as a ﬁnite lattice.
Figure 1.6: Slides 3 and 4, ﬁrst try
Let $P$ be an order with zero and unit.
Then there is a bounded lattice~$K$ such that
\[
P \cong \Princ
K.
\]
If $P$ is finite, we can construct $K$ as a finite lattice.
\end{theorem}
\end{frame}
\end{document}
There is only one new command to learn: \pause; it produces from this frame two
slides.
The \pause in this frame splits the contents of the frame into two parts. The ﬁrst slide
is typeset from the ﬁrst part as if the second part was also present. The second slide is typeset
from both parts. So the transition from the ﬁrst slide to the second is smooth, see Figure 1.5.
You can have more than one \pause in a frame. Use \pause also to display a list one
item at a time.
Chapter 12 discusses BEAMER in more detail.

C H A P T E R
2
And
a few more things...
If life was perfect, we would not need this chapter. You would write perfect LATEX,
based on Chapter 1, no need to study how LATEX works, what error messages mean...
But life is not perfect, you will make mistakes, LATEX will send messages, plain and
mysterious.
In this chapter, we brieﬂy explain how things work, the structure of LATEX, the
auxiliary ﬁles, the logical and visual design of an article, LATEX error messages. See
Appendix C for more detail. Finally, we present a long list of dos and don’t to help you
write good LATEX.
2.1
Structure
LATEX’s core is a programming language called TEX, created by Donald E. Knuth, which
provides low-level typesetting instructions. TEX comes with a set of fonts called Com-
puter Modern (CM). The CM fonts and the TEX programming language form the foun-
dation of a typical TEX system. TEX is extensible—new commands can be deﬁned in
terms of more basic ones. LATEX is one of the best known extensions of TEX.
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1_2
31

32
Chapter 2
And a few more things...
Figure 2.1: The structure of LATEX.
The visual layout of a LATEX document is primarily determined by the document
class, such as amsart, article for articles, amsbook, book for books. Many journals,
publishers, and schools have their own document classes for formatting articles, books,
and theses.
Extensions of LATEX are called packages. They provide additional functionality by
adding new commands and environments, or by changing the way previously deﬁned
commands and environments work. It is essential that you ﬁnd the packages that make
your work easier. The LATEX Companion, 2nd edition [56] discusses a large number of
the most useful packages as of 2004.
The structure of LATEX is illustrated in Figure 2.1. This ﬁgure suggests that in
order to work with a LATEX document, you ﬁrst have to install TEX and the CM fonts,
then LATEX, and ﬁnally specify the document class and the necessary packages. The
packages must include amsmath, amsthm, and so on. Of course, your LATEX installation
already includes all of these.
2.2
Auxiliary ﬁles
Figure 2.2 illustrates the steps in the production of a typeset document.
You start by opening an existing LATEX source ﬁle or creating a new one with a text
editor. For this discussion, the source ﬁle is called myart.tex. Once the source ﬁle
is ready, you typeset it. Depending on the document class options you choose and the
packages the document loads, you end up with at least three additional ﬁles:

2.2
Auxiliary ﬁles
33
Figure 2.2: Using LATEX.

34
Chapter 2
And a few more things...
1. myart.pdf
The typeset article in PDF format.
2. myart.aux
The auxiliary ﬁle, used by LATEX for internal bookkeeping, including
cross-references and bibliographic citations.
3. myart.log
The log ﬁle. LATEX records the typesetting session in the log ﬁle, inc-
luding any warnings and messages that appear on your monitor in the log window.
Your computer uses a video driver to display the typeset article on your monitor
and a printer driver to print the typeset article on a printer. The video and printer drivers
are computer and LATEX implementation dependent.
It should be emphasized that of the three applications used, only one is the same
for all computers and all implementations.
LATEX always uses the aux ﬁle from the last typesetting. Here is an example. Your
article has Theorems 1 (with \label{T:first}) and 2 (with \label{T:main}). The
aux ﬁle has the two lines:
\newlabel{T:first}{{1}{1}}
\newlabel{T:main}{{2}{1}}
\newlabel{T:first}{{1}{1}} means that the label T:first is assigned the value 1
and appears on page 1. \newlabel{T:main}{{2}{1}} means that the label T:main
is assigned the value 2 and appears on page 1. So the reference
see Theorems \ref{T:first} and \ref{T:first}.
is typeset as
see Theorems 1 and 2.
Now add a new theorem between Theorems 1 and 2. Typeset the article. In the
typeset article, the three theorems are properly numbered, but it still contains the same
typeset line:
see Theorems 1 and 2.
The aux ﬁle has the lines:
\newlabel{T:first}{{1}{1}}
\newlabel{T:main}{{3}{1}}
So at the next typesetting, the reference is displayed as
see Theorems 1 and 3.

2.4
General error messages
35
2.3
Logical and visual design
The typeset version of firstarticle.tex looks impressive on p. 4. To produce such
articles, you need to understand that there are two aspects of article design: visual and
logical.
As an example, let us look at a theorem from firstarticle.tex (see the typeset
form of the theorem on page 4). You tell LATEX that you want to state a theorem by
using a theorem environment:
\begin{theorem}\label{T:technical}
Let $L$ be a finite lattice.
...
\end{theorem}
The logical part of the design is choosing to deﬁne a theorem by placing mate-
rial inside a theorem environment. For the visual design, LATEX makes hundreds of
decisions. Could you have speciﬁed all of the spacing, font size changes, centering,
numbering, and so on? Maybe, but would you want to? And would you want to repeat
that process for every theorem in your document?
Even if you did, you would have spent a great deal of time and energy on the visual
design of the theorem rather than on the logical design of your article. The idea behind
LATEX is that you should concentrate on what you have to say and let LATEX take care of
the visual design.
This approach allows you to easily alter the visual design by changing the doc-
ument class (or its options, see Sections 9.5, 10.1.2, and 17.1). Section 9.1 provides
some examples. If you code the visual design into the article—hard coding it, as a pro-
grammer would say—such changes are much harder to accomplish, for you and for the
journal publishing the article.
For more on this topic, see Section C.4.
2.4
General error messages
Now that you are ready to type your ﬁrst document, we give you some pointers on using
LATEX.
You will probably make a number of mistakes in your ﬁrst document. These mis-
takes fall into the following categories:
1. Typographical errors, which LATEX blindly typesets.
2. Errors in formulas or in the formatting of the text.
3. Errors in your instructions to LATEX, that is, in commands and environments.
Typographical errors can be corrected by viewing and spell checking the source
ﬁle, ﬁnding the errors, and then editing the typeset ﬁle. Mistakes in the second and
third categories may trigger errors during the typesetting process, such as lines too wide
of Section 1.4.

36
Chapter 2
And a few more things...
We now look at some examples of the third class of errors by deliberately intro-
ducing a number of mistakes into firstarticle.tex and examining the messages.
Experiment 1.
In firstarticle.tex, go to line 19 (use the Go to Line command
of your editor) and remove the closing brace so that it reads \begin{abstract
When you typeset firstarticle.tex, LATEX reports a problem:
{abstract We present a technical result for congruences on\ETC.
./firstarticle.tex:23:
Paragraph ended before \begin was complete.
<to be read again>
\par
l.23
Line 23 of the ﬁle is the line after \maketitle. The message informs you that the
environment name was not completed.
Runaway argument? is a message that comes up often. It means that the argu-
ment of a command is either longer than expected or it contains material the argument
cannot accept. Most often a closing brace solves the problem, as in this experiment.
Experiment 2.
Now restore line 19, then go to line 21 and change \end{abstract}
to \end{abstrac} and typeset again. LATEX informs you of another error:
./firstarticle.tex:21: LaTeX Error: \begin{abstract}
on input line 19 ended by \end{abstrac}.
See the LaTeX manual or LaTeX Companion for explanation.
Type
H <return>
for immediate help.
...
l.21 \end{abstrac}
This is perfect. LATEX correctly analyzes the problem and tells you where to make the
change.
Experiment 3.
Correct the error in line 21, and introduce a new error in line 61. This
line reads
z_1 \equiv y+ w \pmod{\delta}.
Change \delta to \deta. Now, when you typeset the document, LATEX reports
./firstarticle.tex:61: Undefined control sequence.
<argument> {\operator@font mod}\mkern 6mu\deta
l.61 z_1 \equiv y+ w \pmod{\deta}
This mistake is easy to identify: \deta is a misspelling of \delta.

2.4
General error messages
37
Experiment 4.
In line 38, delete the closing brace of the \label command. This
results in a message:
Runaway definition?
->E:cover\text {If $x$ is covered by $y,z \in L$ and\ETC.
! File ended while scanning definition of \df@label.
<inserted text>
}
<*> firstarticle.tex
Undo the change to line 38.
Experiment 5.
Add a blank line following line 61:
x+ z = z + z_1 \equiv z + (y+ w) = y+ z \pmod{\delta},
This change results in the message
./firstarticle.tex:62: Missing $ inserted.
<inserted text>
$
l.62
There can be no blank lines within a displayed math environment. LATEX catches the
mistake, but the message itself is misleading.
Experiment 6.
Add a $ before \pmod in line 61 (such an error often occurs when
cutting and pasting a formula). You get the message:
./firstarticle.tex:61: Display math should end with $$.
<to be read again>
\penalty
l.61 z_1 \equiv y+ w $\pmod{\delta}
Maybe this could be more to the point?
Tip
LATEX’s messages are not very useful with displayed formulas. Comment out some of
the lines to try to localize the problem.
Tip
Typeset often.
Typesetting my book First Steps into LATEX with the closing brace of the ﬁrst
\caption command on line 480 of the source ﬁle missing, I get the error message

38
Chapter 2
And a few more things...
! Text line contains an invalid character.
l.1227 ...pletely irreducible^^?
where the reference is to line 1227, about 700 lines removed from the actual error.
However, if the only thing I did before typesetting was to insert that ﬁgure with its
incorrect caption command, at least I would know where to look for errors. If you
make a dozen changes and then typeset, you may not know where to start.
2.5
Errors in math
Even in such a simple note there are opportunities for errors. To help familiarize your-
self with some of the most commonly seen LATEX errors in formulas, we introduce mis-
takes into formulanote.tex.
Experiment 1
In line 6 of formulanote.tex, delete the third $ symbol; save the
ﬁle under the name formulanotebad1.tex in the work folder.
Typeset formulanotebad1.tex. LATEX generates the following message:
! Missing $ inserted.
<inserted text>
$
l.6 as $(u, v)$ and
(u, \infty
)$. Such an interval
LATEX reads (u, \infty) as text; but the \infty command instructs LATEX to typeset
a math symbol, which can only be done in a formula. So LATEX oﬀers to put a $ in front
of \infty while typesetting the source ﬁle—it does not put the $ in the source ﬁle
itself. LATEX attempts a cure, but in this example it comes too late, because the formula
should start just before (u.
Experiment 2
In line 16 of formulanote.tex, delete the second } symbol and save
it under the name formulanotebad2.tex in the work folder. This introduces an error:
the closing brace of the subscript (see page 14) is missing. Now typeset the note. You
get the message
Missing } inserted.
<inserted text>
}
l.12 such as $\lim_{x \to \infty f(x)$
LATEX reports that a closing brace (}) is missing, but it is not sure where the brace
should be. LATEX noticed that a subscript started with {, but it reached the end of the
formula before ﬁnding a closing brace }. To remedy this, you must look in the formula
for an opening brace { that is not balanced, and insert the missing closing brace }. Make
the necessary change and typeset again to view the diﬀerence.
Experiment 3
In mathnote.tex, delete the two $ signs in line 19, that is, replace
$a$ by a. Typeset the ﬁle. It typesets with no errors. Here is the last line of the typeset
ﬁle you get:

2.6
Your errors: Davey’s Dos and Don’ts
39
we assume that the function is deﬁned and continuous in a neighborhood of a.
instead of
we assume that the function is deﬁned and continuous in a neighborhood of 𝑎.
This is probably the error most often made by beginners. There is no message by
LATEX and the typeset version looks good. Notice the diﬀerence in the shape of the letter
a in the two cases. You need sharp eyes to catch such an error.
Tip
After an error is corrected, LATEX can refuse to typeset your document. If your docu-
ment is document.tex, look in the same folder for the auxiliary ﬁle document.aux
that was created by LATEX. Delete document.aux and typeset twice. See Section 2.2.
2.6
Your errors: Davey’s Dos and Don’ts
Based on his many years of experience correcting LATEX articles for the journal Algebra
Universalis, Brian Davey collected the LATEX mistakes most often made by authors.
Here are some items from his list, divided into three categories.
Commands
1. Place ALL custom commands and environments in the preamble!
If you have trouble with custom commands, then you know where to ﬁnd them.
2. Don’t use \def; rather use \newcommand or \renewcommand.
\def is a TEX command. It is like \newcommand (see Sections 1.9 and 14.1), but it
can redeﬁne an existing command. Redeﬁning your own commands is bad enough,
redeﬁning a TEX command can be a disaster.
3. Do not simply type the name of an operator into a formula. Declare the appropriate
operator; see Sections 1.9 and 14.1.
For instance, do not type $length I$; it typesets as 𝑙𝑒𝑛𝑔𝑡ℎ𝐼. It should be length 𝐼,
typed as $\length I$. Of course, you have to add
\DeclareMathOperator{\length}{length}
to the preamble (see Section 1.8).
4. When you send a document to a coauthor or submit an article to a journal, remove
all the custom commands not used.
This is a real time saver for your coauthor and editor.

40
Chapter 2
And a few more things...
Text
1. Do not produce a list with horizontal and vertical spacing commands. Use a list
environment; see Sections 3.8 and 4.2.
2. Do not type numbers for citations and internal references. Use \cite{...} for
citations and \ref{...} for references. For references to equations, use \eqref;
see Sections 1.7.1 and 5.3.
3. Do not number proclamations (see Section 4.4). Use the standard amsart environ-
ments for theorems, and so on, and let LATEX number them.
4. When writing a document for a journal requiring a document class ﬁle, do not
(a) change any of the size parameters: for instance, do not use options like 12pt to
change the font size or the \setlength command to change any parameter of
the page size;
(b) insert vertical white space via \bigskip, \smallskip, \vskip, \vspace, etc,
nor via your own custom commands. Do not adjust horizontal space without a
very good reason.
So if you want to display some text:
Please, display this text.
don’t do this:
\medskip
\hspace*{6pt} Please, display this text.
\medskip
but rather
\begin{itemize}
\item[] Please, display this text.
\end{itemize}
or
\begin{quote}
Please, display this text.
\end{quote}
5. Do not leave a blank line before \end{proof} or before a text environment (see
Section 4.1).
6. Do not use the geometry package.

2.6
Your errors: Davey’s Dos and Don’ts
41
Formulas
1. Do not leave a blank line before a displayed formula.
2. Don’t use the symbol | in a set description, use the binary relation \mid; see Sec-
tion 5.5.4.
For instance, \{ x | x^2 < 2 \} typesets as {𝑥|𝑥2 < 2}. The correct form is
{𝑥∣𝑥2 < 2}, typed as $\{x \mid x^2 < 2\}$.
3. Don’t put punctuation marks inside an inline math environment.
For instance, sin 𝑥. typed as $\sin x.$; use $\sin x$. This typesets as sin 𝑥.
Notice the smaller space between “sin 𝑥.” and “typed” and the wider space between
“$\sin x$.” and “This”; see Sections 1.3 and 3.2.2.
4. Don’t use two or more displayed formulas one after another. Use an appropriate
environment such as \align, \alignat, \gather, and so on (see Section 7.1.1).
5. Don’t use \left\{, \right\}, \left(, \right), and so on, by default (see
page 15 and Section 5.5.1 for the commands \left and \right). Even when
\left and \right do not change the size of the symbol, they add extra space
after the closing delimiter.
6. Use \colon for functions. For instance, $f(x) \colon x \to x^2$ typesets as
𝑓(𝑥)∶𝑥→𝑥2. If you type $f(x) : x \to x^2$, you get 𝑓(𝑥) ∶𝑥→𝑥2; the
spacing is bad.
7. Use \[ and \] (or equation*) to type a displayed math environment (see Sec-
tion 1.7) rather than the old TEX $$ matched by $$. While display math produced
via the latter does work properly most of the time, there are some LATEX commands
that do not; for example, \qedhere.
8. Do not use the center environment to display formulas.
9. Use \dots ﬁrst and let LATEX make the decision whether to use \dots or \cdots;
see page 15 and Section 5.4.3. If LATEX gets it wrong, then use \cdots or \ldots.
10. If you can, avoid constructs (for instance,
up
→) in inline formulas that disrupt the
regular line spacing. Although LATEX automatically leaves room for it, it does not
look good, as a rule.

PART II
Text and Math

C H A P T E R
3
Typing text
In Chapter 1, we brieﬂy discussed how to type text in a document. Now we take up this
topic more fully.
This chapter starts with a discussion of the keyboard in Section 3.1 and continues
with the rules for spaces in Section 3.2. We cover a very important topic that must
precede any in-depth discussion of LATEX, how to control LATEX with commands and
environments, in Section 3.3.
A document may contain symbols that cannot be found on your keyboard. In
Section 3.4, we show how to get these symbols in our typeset documents by using
commands.
Some other characters are deﬁned by LATEX as command characters. For example,
the % character plays a special role in the source document. In Section 3.5.1, you will
see how % is used to comment out lines. In Section 3.5.2, we introduce the command
for footnotes.
In Section 3.6, we discuss the commands (and environments) for changing fonts,
their shapes and sizes. In Section 3.7, you learn about lines, paragraphs, and pages.
The judicious use of horizontal and vertical spacing is an important part of document
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1_3
45

46
Chapter 3
Typing text
formatting, and also the topic of Section 3.8. In Section 3.9, you learn how to typeset
text in a “box”, which behaves as if it were a single large character.
To help the discussion along, we shall use the terms text mode and math mode
to distinguish between typesetting text and math.
3.1
The keyboard
Most of the keys on your computer’s keyboard produce characters, while others are
function or modiﬁer keys.
3.1.1
Basic keys
The basic keys are grouped as follows:
Letters The 52 letter keys:
a
b
c ... z
A
B
C ... Z
Digits The ten digits:
1
2 ... 9
0
Old-style digits are available with the \oldstylenums command. The next line
shows the default digits followed by the old style digits:
1234567890
1234567890
typed as
1234567890 \quad \oldstylenums{1234567890}
Punctuation There are nine punctuation marks:
,
;
.
?
!
:
‘
’
-
The ﬁrst six are the usual punctuation marks. The ‘ is the left single quote—
also known as the grave accent—while ’ doubles as the right single quote and
apostrophe (see Section 3.4.1). The - key is the dash or hyphen (see Sections
3.4.2 and 3.4.9).
Parentheses There are four:
(
)
[
]
( and ) are parentheses; [ and ] are called (square) brackets.
Math symbols Seven math symbols correspond to keys. The math symbols are:
∗
+
=
−
<
>
∕

3.1
The keyboard
47
The last four characters have a role also in text mode:
The minus sign −corresponds to the hyphen key, - (see Section 3.4.9).
The math symbols < and > correspond to the keys < and >; use them only in
math mode.
Note that there is also a version of colon (:) for math formulas (see Sections 6.1
and A.2).
Space keys Pressing the space bar gives the space character. Pressing the tab key gives
the tab character. When typesetting the source ﬁle, LATEX does not distinguish be-
tween these two. Pressing the Return key gives the end-of-line character. These
keys produce invisible characters that are normally not displayed on your monitor
by the text editor. Diﬀerent computer systems have diﬀerent end-of-line charac-
ters, which may cause some problems when transferring ﬁles from one system to
another. A good text editor translates end-of-line characters automatically or on
demand. Section 3.2.1 explains how LATEX handles the invisible characters.
When explaining some rules of LATEX, sometimes it is important to show if a
space is required. In such cases, I use the symbol verb* ␣to indicate a space, for
instance, \in␣ut and \␣.
The tilde ˜ produces a nonbreakable space or tie (see Section 3.4.3).
3.1.2
Special keys
There are 13 special keys on the keyboard:
#
$
%
&
~
_
^
\
{
}
@
"
|
They are mostly used to give instructions to LATEX and some are used in math mode
(see Chapter 5), and some in BIBTEX (see Chapter 15). See Section 3.4.4 on how to
print these characters in text. Only @ requires no special command, type @ to print @.
3.1.3
Prohibited keys
Keys other than those discussed in Sections 3.1.1 and 3.1.2 are prohibited! Speciﬁcally,
do not use the computer’s modiﬁer keys—Control, Alt, Escape, and others—to produce
special characters, such as accented characters. LATEX will either reject or misunder-
stand them. Prohibited characters may not cause problems in some newer LATEX imple-
mentations. They may just print ï£¡ if your source ﬁle has ï£¡, and ignore the invisible
invalid characters. However, for portability reasons, you should avoid using prohibited
characters. The babel package provides support for using some modiﬁer keys (see
Appendix F).

48
Chapter 3
Typing text
Tip
If there is a prohibited character in your document, you may receive a message such as
! Text line contains an invalid character.
l.222 completely irreducible^^?
^^?
Delete and retype the oﬀending word or line until the error goes away.
3.2
Words, sentences, and paragraphs
Text consists of words, sentences, and paragraphs. In text, words are separated by one
or more spaces, which may include a single end-of-line character (see the rule, Spacing
in text), or by parentheses and punctuation marks. A group of words terminated by a
period, exclamation point, or question mark forms a sentence (not all periods terminate
a sentence, see the discussion in Section 3.2.2). A group of sentences terminated by
one or more blank lines constitutes a paragraph.
3.2.1
Spacing rules
Here are the most important LATEX rules about spaces in text in the source ﬁle.
Rule
Spacing in text
1. Two or more spaces in text are the same as one.
2. A tab or end-of-line character is the same as a space.
3. A blank line, that is, two end-of-line characters separated only by spaces and tabs,
indicates the end of a paragraph. The \par command is equivalent.
4. Spaces at the beginning of a line are ignored.
Rules 1 and 2 make cutting and pasting text less error-prone. In your source ﬁle,
you do not have to worry about the line length or the number of spaces separating words
or sentences, as long as there is at least one space or end-of-line character separating
any two words. Thus
You
do not have to
worry
about the number of
spaces
separating words, as long as there
is
at least one space or end-of-line character
separating
any two words.
produces the same typeset text as

3.2
Words, sentences, and paragraphs
49
You do not have to worry about the number of spaces
separating words, as long as there is at least one space
or end-of-line character separating any two words.
However,
the number of
spaces separating words,
as long
and
the number of
spaces separating words,
as long
produce diﬀerent results:
the number of spaces separating words, as long
the number of spaces separating words , as long
Notice the space between “words” and the comma in the second line. That space was
produced by the end-of-line character in accordance with Rule 2.
It is very important to maintain the readability of your source ﬁle. LATEX may not
care about the number of spaces or line length, but you, your coauthor, and your editor
might.
Rule 3 contradicts Rules 1 and 2, consider it an exception. Sometimes—especially
when deﬁning commands and environments (see Sections 14.1 and 14.2)—it is more
convenient to indicate the end of a paragraph with \par.
3.2.2
Periods
LATEX places a certain size space between words—the interword space—and a some-
what larger space between sentences—the intersentence space. To know which space
to use, LATEX must decide whether or not a period indicates the end of a sentence.
Rule 1
Period
To LATEX, a period after a capital letter, for instance, A. or caT., signiﬁes an abbreviation
or an initial. Generally, every other period signiﬁes the end of a sentence.
This rule works most of the time. When it fails—for instance, twice with e.g.—you
need to specify the type of space you want, using the following two rules.
Rule 2
Period
If an abbreviation does not end with a capital letter, for instance, etc., and it is not the
last word in the sentence, then follow the period by an interword space (\␣) or a tie (˜),
if appropriate (see Section 3.4.3).

50
Chapter 3
Typing text
Recall that \␣provides an interword space.
The result was first published, in a first approximation,
in the Combin.\ Journal. The result was first published,
in a first approximation, in the Combin. Journal.
prints as
The result was ﬁrst published, in a ﬁrst approximation, in the Combin. Journal.
The result was ﬁrst published, in a ﬁrst approximation, in the Combin. Journal.
Notice that Combin. in the ﬁrst line is followed by a regular interword space. The in-
tersentence space following Combin. in the second line is a little wider; it is an error.
A tie (or nonbreakable space)—see also Section 3.4.3—is more appropriate than
\␣in phrases such as Prof. Smith, typed as Prof.~Smith, and pp. 271–292, typed as
pp.~271--292.
Tip
The thebibliography environment handles periods properly. You do not have to
mark periods for abbreviations (in the form .\␣) in the name of a journal, so
Acta Math. Acad. Sci. Hungar.
is correct.
Rule 3
Period
If a capital letter is followed by a period and is at the end of a sentence, precede the
period with \@.
For example,
(1) follows from condition~H\@. We can proceed\\
(1) follows from condition~H. We can proceed
prints:
(1) follows from condition H. We can proceed
(1) follows from condition H. We can proceed
Notice that there is not enough space after H. in the second line.
Most typographers agree on the following rule (see, for instance, The Elements of
Typographic Style by Robert Bringhurst [8], p. 30):

3.3
Commanding LATEX
51
Rule 4
Period
Add no space or a thin space (\,) within strings of initials and be consistent.
So W.H. Lampstone with no space or W. H. Lampstone with thin space is pre-
ferred over W. H. Lampstone. My personal choice is W. H. Lampstone with thin
space.
To make all intersentence spaces equal to the interword space—as required in
French typography—you can use the command
\frenchspacing
To switch back to using spaces of diﬀerent sizes, give the command
\nonfrenchspacing
3.3
Commanding LATEX
How do you command LATEX to do something special for you, such as starting a new line,
changing emphasis, or displaying the next theorem? You use commands and special
pairs of commands called environments, both brieﬂy introduced in Section 1.1.4.
Most, but not all, commands have arguments, which are usually fairly brief. Envi-
ronments have contents, the text between the \begin and \end commands. The con-
tents of an environment can be several paragraphs long.
3.3.1
Commands and environments
The \emph{text } command instructs LATEX to emphasize its argument, text. The
\& command has no argument; it instructs LATEX to typeset & (see Section 3.4.4).
The flushright environment instructs LATEX to right justify the content, the text
between the two commands
\begin{flushright}
\end{flushright}
The content of the document environment is the body of the article (see
Section 1.8) and the content of the abstract environment is the abstract.
Rule
Environments
An environment starts with the command
\begin{name }
and ends with
\end{name }
Between these two commands is the content of the environment, aﬀected by the deﬁni-
tion of the environment.

52
Chapter 3
Typing text
Rule
Commands
A LATEX command starts with a backslash, \, and is followed by the command name.
The name of a command is either a single non-alphabetic character other than a tab or
end-of-line character or a string of letters, that is, one or more letters.
So # and ’ are valid command names. The corresponding commands \# and \’ are
used in Sections 3.4.4 and 3.4.7, respectively. input and date are also valid command
names. However, input3, in#ut, and in␣ut are not valid names because 3, #, and ␣
should not occur in a multicharacter command name. Note that ␣is a command name,
the command \␣produces a blank.
LATEX has a few commands, for instance, $ (see Section 5.1) that do not follow this
naming scheme, that is, they are not of the form \name. See also Section 14.1.9 for
special commands with special termination rules.
Rule
Command termination
LATEX ﬁnds the end of a command name as follows:
If the ﬁrst character of the name is not a letter, the name is the ﬁrst character.
If the ﬁrst character of the name is a letter, the command name is terminated by the
ﬁrst nonletter.
If the command name is a string of letters, and is terminated by a space, then LATEX
discards all spaces following the command name.
While input3 is an invalid name, \input3 is not an incorrect command. It is the
\input command followed by the character 3, which is either part of the text following
the command or the argument of the command.
LATEX also allows some command names to be modiﬁed with *. Such commands
are referred to as *-ed commands. Many commands have *-ed variants. \hspace* is
an often-used *-ed command (see Section 3.8.1).
Rule
Command and environment names
Command and environment names are case sensitive. \ShowLabels is not the same as
\showlabels.
Rule
Arguments
Arguments are enclosed in braces, { }.
Optional arguments are enclosed in brackets, [ ].

3.3
Commanding LATEX
53
Commands may have arguments, typed in braces immediately after the command.
The argument(s) are used in processing the command.
Accents provide very simple examples. For instance, \’{o}—which produces ó—
consists of the command \’ and the argument o (see Section 3.4.7). In the command
\bibliography{article1}
the command is \bibliography and the argument is article1 (see Section 15.2.2).
Sometimes, if the argument is a single character, the braces can be dropped: \’o
also typesets as ó.
Some environments also have arguments. For example, the alignat environment
(see Section 7.5.4) is delimited by the commands
\begin{alignat}{2}
and
\end{alignat}
The argument, 2, is the number of columns—it could be any number 1, 2, ... A com-
mand or environment may have more than one argument. The \frac command (see Sec-
tion 5.4.1) has two, $\frac{1}{2}$ typesets as 1
2. The custom command \con has
three (see Section 14.1.2).
Some commands and environments have one or more optional arguments, that is,
arguments that may or may not be present. The \sqrt command (see Section 5.4.5)
has an optional argument for specifying roots other than the square root. To get
3√
25,
type \sqrt[3]{25}. The \documentclass command has an argument, the name of
a document class, and an optional argument, a list of options (see Section 8.2), for
instance,
\documentclass[12pt,draft,leqno]{amsart}
Tip
If you get an error when using a command, check that:
1. The command is spelled correctly, including the use of uppercase and lowercase
letters.
2. You have speciﬁed all required arguments in braces.
3. Any optional argument is in brackets, not braces or parentheses.
4. The command is properly terminated.
5. The package providing the command is loaded with the \usepackage command.

54
Chapter 3
Typing text
Most errors in the use of commands are caused by breaking the termination rule.
We can illustrate some of these errors with the \today command, which produces
today’s date.
You have already seen this command in Section 1.3 (see also
Section 3.4.8). The correct usage is
\today\ is the day
or
\today{} is the day
which both typeset in the following form
July 19, 2015 is the day
In the ﬁrst case, \today was terminated by \␣, the command that produces an interword
space. In the second case, it was terminated by the empty group { }.
If there is no space after the \today command, as in
\todayis␣the␣day
you get the message
! Undefined control sequence.
l.3 \todayis
the day
LATEX thinks that \todayis is the command, and, of course, does not recognize it.
If you type one or more spaces after \today:
\today␣␣is␣the␣day
LATEX interprets the two spaces as a single space by the ﬁrst space rule (see page 48), and
uses that one space to delimit \today from the text that follows it. So LATEX produces
July 19, 2015is the day
Section 14.1.9 discusses how best to avoid such errors.

3.3
Commanding LATEX
55
Tip
If a command—or environment—can have an optional argument and
none is given, and
the text following the command starts with [,
then type this as {[}.
This may happen, for instance, with the command \item (see page 103). To get
an example for an environment, see Section 7.6.1 for subsidiary math environments and
page 211 for the alignment options. See what happens if no option is given but the math
starts, say, with [x].
3.3.2
Scope
A command issued inside a pair of braces { } has no eﬀect beyond the right brace,
except for the rare global commands (see Section 3.3.3). You can have any number of
pairs of braces:
{ ... { ... { ... } ... } ... }
The innermost pair containing a command is the scope of that command. The command
has no eﬀect outside its scope. We can illustrate this concept using the \bfseries
command that switches the font to boldface:
{some text \bfseries bold text} no more bold
typesets as
some text bold text no more bold
The commands \begin{name } and \end{name } bracketing an environment act
also as a pair of braces. In particular, $, \[, and \] are special braces.
Rule
Braces
1. Braces must be balanced: An opening brace has to be closed, and a closing brace
must have a matching opening brace.
2. Pairs of braces cannot overlap.
Violating the ﬁrst brace rule generates warnings and error messages. If there is one
more opening brace than closing brace, the document typesets, but you get a warning:
(\end occurred inside a group at level 1)

56
Chapter 3
Typing text
For two or more unmatched opening braces, you are warned that \end occurred inside
a group at level 2, and so on. There is a tendency to disregard such warnings since
your article is already typeset and the unmatched opening brace may be diﬃcult to ﬁnd.
However, such errors may have strange consequences. At one point in the writing of
my second LATEX book, there were two extra opening braces in Chapter 2.4. As a result,
the title of Chapter 7 was placed on a page by itself! So it is best not to disregard such
warnings.
If you have one unmatched closing brace, you get a message such as
! Too many }’s
If special braces, say, \begin{name} and \end{name}, do not balance, you get
an error message:
! LaTeX Error: \begin{name} on input line 21
ended by \end{document}.
or
! LaTeX Error: \begin{document} ended by \end{name}.
To illustrate the second rule, here are two simple examples of overlapping braces.
Example 1
{\bfseries some text
\begin{lemma}
more text} final text
\end{lemma}
Example 2
{some \bfseries text, then math: $\sqrt{2} }, \sqrt{3}$
In Example 1, the scope of \bfseries overlaps the braces \begin{lemma},
\end{lemma} In Example 2, the scope of \bfseries overlaps the special braces $
and $. Example 1 is easy to correct:
{\bfseries some text}
\begin{lemma}
{\bfseries more text}
final text
\end{lemma}
Example 2 may be corrected as follows:
{some \bfseries text, then math:} $\sqrt{2}, \sqrt{3}$
Actually,
√
2 does not even have a bold version (see Section 6.4.3).

3.3
Commanding LATEX
57
If the braces do overlap and they are of the same kind, LATEX simply misunderstands
the instructions. The closing brace of the ﬁrst pair is regarded as the closing brace of
the second pair, an error that may be diﬃcult to detect. LATEX can help if special braces
overlap. Typesetting Example 1 gives the message
! Extra }, or forgotten \endgroup.
l.7 more text }
final text
3.3.3
Types of commands
It may be useful at this point to note that commands can be of various types.
Some commands have arguments, and some do not. Some commands eﬀect change
only in their arguments, while some commands declare a change.
For instance, \textbf{This is bold} typesets the phrase This is bold in
bold type: This is bold and has no eﬀect on the text following the argument of the com-
mand. On the other hand, the command \bfseries declares that the text that follows
should be bold. This command has no argument. I call a command that declares change
a command declaration. So \bfseries is a command declaration, while \textbf is
not. As a rule, command declarations are commands without arguments.
Commands with arguments are called long if their argument(s) can contain a blank
line or a \par command; otherwise they are short. For example, \textbf is a short
command. So are all the top matter commands discussed in Section 9.2. The \parbox
command, discussed in Section 3.9.4, is long.
Finally, as discussed in Section 3.3.2, the eﬀect of a command remains within its
scope. This is true only of local commands. There are also some global commands,
such as the \setcounter command described in Section 14.5.1.
Fragile commands
As a rule, LATEX reads a paragraph of the source ﬁle, typesets it, and then goes on to
the next paragraph (see Section C.4). Some information from the source ﬁle, however,
is separately stored for later use. Examples include the title of an article, which is
reused as a running head (Section 9.2.1); titles of parts, sections, subsections, and other
sectioning commands, which are used in the table of contents (Sections 17.2 and 8.4.1);
footnotes (Section 3.5.2); table and ﬁgure captions (Section 8.4.3), which are used in
lists of tables and ﬁgures (Section 8.4.3); and index entries (Chapter 16).
These are movable arguments, and certain commands embedded in them must be
protected from damage while being moved. LATEX commands that need such protection
are called fragile. The inline math delimiter commands \( and \) are fragile, while $
is not.
In a movable argument, fragile commands must be protected with a \protect
command. Thus
The function \( f(x^{2}) \)

58
Chapter 3
Typing text
is not an appropriate section title, but
The function \protect \( f(x^{2}) \protect \)
is. So is
The function $f(x^{2})$
To be on the safe side, you should protect every command that might cause problems
in a movable argument. Section 17.2 shows an example of what happens if a fragile
command is not protected. Alternatively, use commands declared with
\DeclareRobustCommand
This command works the same way as \newcommand but the command deﬁned is ro-
bust, that is, not fragile.
3.4
Symbols not on the keyboard
A typeset document may contain symbols that cannot be typed. Some of these symbols
may even be available on the keyboard but you are prohibited from using them (see Sec-
tion 3.1.3). In this section, we discuss the commands that typeset some of these symbols
in text.
3.4.1
Quotation marks
To produce single and double quotes, as in
‘subdirectly irreducible’ and “subdirectly irreducible”
type
‘subdirectly irreducible’ and ‘‘subdirectly irreducible’’
Here, ‘ is the left single quote and ’ is the right single quote. Note that the double
quote is obtained by pressing the single quote key twice, and not by using the double
quote key. If you need single and double quotes together, as in “She replied, ‘No.’ ”,
separate them with \, (which provides a thin horizontal space, see Section 3.8.1):
‘‘She replied, ‘No.’\,’’
3.4.2
Dashes
Dashes come in three lengths. The shortest dash, called a hyphen, is used to connect
words:
Mean-Value Theorem
This phrase is typed with a single dash:

3.4
Symbols not on the keyboard
59
Mean-Value Theorem
A medium-sized dash, called an en dash, is typed as -- and is used
For number ranges; for instance, the phrase see pages 23–45, is typed as
see pages~23--45
Note: ˜ is a nonbreakable space or tie (see Section 3.4.3).
In place of a hyphen in a compound adjective when one of the elements of the adjec-
tive is an open compound (such as New York) or hyphenated (such as non-English).
For instance, the phrase Schmidt–Freid adjoint, is typed as
Schmidt--Freid adjoint
A long dash—called an em dash—is used to mark a change in thought or to add
emphasis to a parenthetical clause, as in this sentence. The two em dashes in the last
sentence are typed as follows:
A long dash---called an \emph{em dash}---is used
In math mode, a single dash is typeset as the minus sign −(a binary operation) with
some spacing on both sides, as in 15 −3 or the “negative” as in −3; this is discussed in
Sections 3.1.1 and 5.4.1.
Note that there is no space before or after an en dash or em dash.
3.4.3
Ties or nonbreakable spaces
A tie or nonbreakable space or blue space is an interword space that cannot be broken
across lines. For instance, when referencing P. Neukomm in an article, you do not
want the initial P. at the end of a line and the surname Neukomm at the beginning of
the next line. To prevent such an occurrence, you should type P.~Neukomm.
If your keyboard does not have ~, use the \nobreakspace command instead, and
type P.\nobreakspace Neukomm. The following examples show some typical uses:
Theorem~\ref{T:main} in Section~\ref{S:intro}
Donald~E. Knuth
assume that $f(x)$ is (a)~continuous, (b)~bounded
the lattice~$L$
Sections~\ref{S:modular} and~\ref{S:distributive}
In~$L$, we find
Of course, if you add too many ties, as in
Peter~G.~Neukomm% Incorrect!
LATEX may send you a line too wide message (see Sections 1.4 and 3.7.1).

60
Chapter 3
Typing text
The tie (˜) absorbs spaces, so typing P.␣~␣Neukomm works just as well. This
feature is convenient when you add a tie during editing.
3.4.4
Special characters
The characters corresponding to nine of the 13 special keys (see Sections 1.2 and 3.1.2)
are produced by typing a backslash (\) and then the key, as shown in Table 3.1.
If for some reason you want to typeset a backslash in your document, type the
command \textbackslash, which typesets as \. You might think that you could get a
typewriter style backslash by utilizing the \texttt command introduced in Section 1.3
\texttt{\textbackslash}
but this is not the case, \textbackslash and \texttt{\textbackslash} produce
the same symbol, \, which is diﬀerent from the typewriter style backslash: \. Look at
them side-by-side: \ \. For a typewriter style backslash you can use the \bsl com-
mand introduced in Section 14.1.1 or the \texttt{\symbol{92}} command intro-
duced later in this section.
The | key is seldom used in text. If you need to typeset the math symbol | in text,
type \textbar.
Name
Type
Typeset
Ampersand
\&
&
Caret
\^{}
ˆ
Dollar Sign
\$
$
Left Brace
\{
{
Right Brace
\}
}
Underscore (or Lowline)
\_
_
Octothorp
\#
#
Percent
\%
%
Tilde
\~{}
˜
Table 3.1: Nine special characters.
Note that in text, * typesets as *, whereas in a formula it typesets centered as ∗.
To typeset a centered star in text, use the command \textasteriskcentered. And
@ typesets as @.
Finally, the " key should never be used in text. See Section 3.4.1 for the proper
way to typeset double quotes (see also Section 1.3). Nevertheless, sometimes " may be
used to typeset ", as in the computer code segment print("Hello!"). In BIBTEX and
MakeIndex, " has special meanings (see Chapters 15 and 16).
Tip
Be careful when typing \{ and \} to typeset the braces { }. Typing a brace with-
out its backslash results in unbalanced braces, in violation of the ﬁrst brace rule in
Section 3.3.2.

3.4
Symbols not on the keyboard
61
We illustrated in Section 3.3.2 some consequences of unbalanced braces. You may
avoid some of these problems by introducing custom commands, as introduced in
Section 14.3.
You can also produce special characters with the \symbol command:
\symbol{94} typesets as ^
\symbol{126} typesets as ~
\texttt{\symbol{92}} typesets as \
The argument of the \symbol command is a number matching the slot of the sym-
bol in the layout (encoding) of the font. The layout for the Computer Modern typewriter
style font is shown in Table 3.2.
Alternatively, instead of \texttt{\symbol{92}}, we can use
\texttt{\char‘\\}
0
1
2
3
4
5
6
7
8
9
x
`
´
ˆ
˜
¨
˝
˚
ˇ
˘
¯
1x
˙
¸
˛
‚
‹
›
“
”
„
«
2x
»
–
—
‌

ı
j
ﬀ
ﬁ
ﬂ
3x
ﬃ
ﬄ
␣
!
"
#
$
%
&
’
4x
(
)
*
+
,
-
.
/
0
1
5x
2
3
4
5
6
7
8
9
:
;
6x
<
=
>
?
@
A
B
C
D
E
7x
F
G
H
I
J
K
L
M
N
O
8x
P
Q
R
S
T
U
V
W
X
Y
9x
Z
[
\
]
^
_
‘
a
b
c
10x
d
e
f
g
h
i
j
k
l
m
11x
n
o
p
q
r
s
t
u
v
w
12x
x
y
z
{
|
}
~
-
Table 3.2: Font table for the Computer Modern typewriter style font.
Any character x in the font can be accessed by typing the character itself as ‘\x. This way
you don’t have to look up the position of the symbol.
You can obtain similar tables for any font in your LATEX implementation by using
the fonttbl.tex ﬁle in your samples folder. The table format in this ﬁle is used in
Section 4.6 as an example of the tabular environment.
For more about font tables, see the nfssfont.tex ﬁle, part of the standard LATEX
distribution (see Section 10.3) and see also Section 7.5.7 of The LATEX Companion, 2nd
edition [56].

62
Chapter 3
Typing text
3.4.5
Ellipses
The text ellipsis, ..., is produced using the \dots command. Typing three periods
produces ... (notice that the spacing is wrong).\dots is one of several commands that
can be used to create ellipses in formulas (see Section 5.4.3).
3.4.6
Ligatures
Certain groups of characters, when typeset, are joined together—such compound char-
acters are called ligatures. There are ﬁve ligatures that LATEX typesets automatically
(if you use the Computer Modern fonts): ﬀ, ﬁ, ﬂ, ﬃ, and ﬄ.
If you want to prevent LATEX from forming a ligature, separate the characters with
the command\textcompwordmark. Compare iﬀwith if‌f, typed as iff and
if\textcompwordmark f
Enclosing the second character in braces ({}) is a crude method of preventing the liga-
ture, as used in Formula 4 of the Formula Gallery (see Section 5.10). This method, in
some instances, may interfere with LATEX’s hyphenation algorithm.
3.4.7
Accents and symbols in text
LATEX provides 15 European accents. Type the command for the accent ( \ and a char-
acter), followed by the letter (in braces) on which you want the accent placed (see Ta-
ble 3.3). For example, to get Grätzer György, type
Gr\"{a}tzer Gy\"{o}rgy
and to get Ö type \"{O}.
To place an accent on top of an i or a j, you must use the dotless version of i and j.
These are obtained by the commands \i and \j: \’{\i} typesets as í and \v{\j} type-
sets as ˇj. Tables 3.4 and 3.5 list some additional text symbols and European characters
available in LATEX when typing text. Using localized versions of LATEX, you get more
accented and combined characters such as the Catalan geminated ell (see Appendix F).
Note that the \textcircled command (in Table 3.5) takes an argument. It seems
to work best with a single lowercase character, like a○or 𝛼○. Capitals such as A○are not
very satisfactory. Section 3.9.6 explains how to create the symbol A○.
3.4.8
Logos and dates
\TeX produces TEX, \LaTeX produces LATEX, and \LaTeXe produces LATEXe (the
original name of the current version of LATEX). The \AmS command produces the logo
AMS.
Remember to type \TeX\␣or \TeX{} if you need a space after TEX (similarly for
the others). A better way to handle this problem is discussed in Section 14.1.1.
LATEX also stores some useful numbers:

3.4
Symbols not on the keyboard
63
Name
Type
Typeset
Name
Type
Typeset
acute
\’{o}
ó
macron
\={o}
¯o
breve
\u{o}
˘o
overdot
\.{g}
˙g
caron/haček
\v{o}
ˇo
ring
\r{u}
ů
cedilla
\c{c}
ç
tie
\t{oo}
oo
circumﬂex
\^{o}
ô
tilde
\~{n}
ñ
dieresis/umlaut
\"{u}
ü
underdot
\d{m}
m.
double acute
\H{o}
ő
underbar
\b{o}
o¯
grave
\‘{o}
ò
dotless i
\i
ı
dotless j
\j
j
\’{\i}
í
\v{\j}
ˇj
Table 3.3: European accents.
Name
Type
Typeset
Type
Typeset
a-ring
\aa
å
\AA
Å
aesc
\ae
æ
\AE
Æ
ethel
\oe
œ
\OE
Œ
eszett
\ss
ß
\SS

inverted question mark
?‘
¿
inverted exclamation mark
!‘
¡
slashed L
\l
ł
\L
Ł
slashed O
\o
ø
\O
Ø
Table 3.4: European characters.
\time is the time of day in minutes since midnight
\day is the day of the month
\month is the month of the year
\year is the current year
You can include these numbers in your document by using the \the command:
Year: \the\year; month: \the\month; day: \the\day
produces a result such as
Year: 2015; month: 7; day: 11

64
Chapter 3
Typing text
Name
Type
Typeset
ampersand
\&
&
asterisk bullet
\textasteriskcentered
∗
backslash
\textbackslash
\
bar (caesura)
\textbar
|
brace left
\{
{
brace right
\}
}
bullet
\textbullet
•
circled a
\textcircled{a}
a
○
circumﬂex
\textasciicircum
^
copyright
\copyright
c○
dagger
\dag
†
double dagger (diesis)
\ddag
‡
dollar
\$
$
double quotation left
\textquotedblleft or ‘‘
“
double quotation right
\textquotedblright or ’’
”
em dash
\textemdash or ---
—
en dash
\textendash or --
–
exclamation down
\textexclamdown or !‘
¡
greater than
\textgreater
>
less than
\textless
<
lowline
\_
_
midpoint
\textperiodcentered
·
octothorp
\#
#
percent
\%
%
pilcrow (paragraph)
\P
¶
question down
\textquestiondown or ?‘
¿
registered trademark
\textregistered
®
section
\S
§
Table 3.5: Extra text symbols.
Of more interest is the \today command, which produces today’s date in the form:
July 11, 2015. It is often used as the argument of the \date command (see Sec-
tion 9.2.1).
Remember the termination rule (Rule 3 in Section 3.3.1).
today’s date in the form: \today (you may want
produces
today’s date in the form: July 11, 2006(you may want
To get the desired eﬀect, type \␣or {} after the \today command:
today’s date in the form: \today\ (you may want

3.4
Symbols not on the keyboard
65
3.4.9
Hyphenation
LATEX reads the source ﬁle one line at a time until it reaches the end of the current
paragraph and then tries to balance the lines (see Section C.2.2). To achieve this goal,
LATEX hyphenates long words using a built-in hyphenation algorithm, a database stored
in the hyphen.tex ﬁle, and a long \hyphenation list in the AMS document classes.
If you use a document class not containing such a list, copy the hyphenation list from
amsart.cls to your document.
Rule
Optional hyphen
If you ﬁnd that LATEX cannot properly hyphenate a word, put optional hyphens in the
word. An optional hyphen is typed as \- , and allows LATEX to hyphenate the word
where the optional hyphen is placed—and only at such points—if the need arises.
Examples: data\-base,an\-ti\-thet\-ic, set\-up
Note that:
Optional hyphens prevent hyphenation at any other point in the word.
Placing an optional hyphen in a particular occurrence of a word does not aﬀect the
hyphenation of any other occurrences of that word.
Rule
Hyphenation speciﬁcations
List the words that often need help in a command:
\hyphenation{set-up as-so-ciate}
All occurrences of the listed words following this command in your document are hy-
phenated as speciﬁed.
Note that in the \hyphenation command the hyphens are designated by - and
not by \-, and that the words are separated by spaces not by commas.
You must use optional hyphens for words with accented characters, as in
Gr\"{a}t\-zer
Such words cannot be included in a \hyphenation list (unless you use the T1 font
encoding—see Appendix F).
Rule
Preventing hyphenation
To prevent hyphenation of a word, put it in the argument of a \text command or place
it unhyphenated in a \hyphenation command.

66
Chapter 3
Typing text
For example, type
\text{database}
if you do not want this instance of database hyphenated, or type
\hyphenation{database}
if you do not want LATEX to hyphenate any occurrence of the word after this command
in your document. Of course, typing data\-base overrides the general prohibition for
this one instance.
You can have any number of \hyphenation commands in your document.
Tip
LATEX does not break a hyphenated word except at the hyphen, nor does it break a word
followed by or preceding an em dash or en dash (see Section 3.4.2). LATEX often needs
help with such words.
Sometimes a hyphen in a phrase should not be broken. For instance, the phrase
𝔪-complete lattice should not be broken after 𝔪; so type it as
\text{$\mathfrak{m}$-com}\-plete lattice
(see Section 6.4.2 for \mathfrak).
Use the \nobreakdash command (placed before the hyphen)
\nobreakdash-
\nobreakdash--
\nobreakdash---
to prevent such breaks. For example,
pages~24\nobreakdash--47
Since LATEX does not hyphenate a hyphenated word except at the hyphen,
\nobreakdash-
prevents the hyphenation of the whole word as though it were enclosed in a \text
command. The form
\nobreakdash-\hspace{0pt}
allows the normal hyphenation of the word that follows the hyphen. For example,
$\mathfrak{m}$\nobreakdash-\hspace{0pt}complete lattice
allows the word complete to be hyphenated.
This coding of the phrase 𝔪-complete lattice is a natural candidate for a custom
command (see Section 14.1.1).
Tip
If you want to know how LATEX would hyphenate a list of words, place it in the argument
of a \showhyphens command.

3.5
Comments and footnotes
67
For instance,
\showhyphens{summation reducible latticoid}
The result,
sum-ma-tion re-ducible lat-ti-coid
is shown in the log ﬁle.
Tip
Some text editors wrap lines in a source ﬁle by breaking them at a hyphen, introducing
errors in your typeset document.
For instance,
It follows from Theorem~\ref{T:M} that complete-
simple lattices are very large.
is typeset by LATEX as follows:
It follows from Theorem 2 that complete- simple lattices are very large.
As you can see, there is a space between the hyphen and the word simple. The text
editor inserted an end-of-line character after the hyphen (by the second space rule,
see Section 3.2.1). This end-of-line character was interpreted by LATEX as a space.
To correct the error, make sure that there is no such line break, or comment out (see
Section 3.5.1) the end-of-line character:
It follows from Theorem~\ref{T:M} that complete-%
simple lattices are very large.
Better yet, rearrange the two lines:
It follows from Theorem~\ref{T:M} that
complete-simple lattices are very large.
Of course, LATEX does not know everything about the complicated hyphenation rules
of the English language. Consult The Chicago Manual of Style, 16th edition [11] and
Lyn Dupré’s BUGS in Writing: A Guide to Debugging Your Prose, 2nd edition [13] for
additional guidance.
3.5
Comments and footnotes
Various parts of your source ﬁle do not get typeset like most of the rest. The two primary
examples are comments that do not get typeset at all and footnotes that get typeset at
the bottom of the page.

68
Chapter 3
Typing text
3.5.1
Comments
The % symbol tells LATEX to ignore the rest of the line. A common use might be a
comment to yourself in the source ﬁle:
therefore, a reference to Theorem~1 % check this!
The % symbol has many uses. For instance, a document class command (see Sec-
tion 9.5),
\documentclass[twocolumn,twoside,legalpaper]{amsart}
may be typed with explanations, as
\documentclass[%
twocolumn,%
option for two-column pages
twoside,%
format for two-sided printing
legalpaper%
print on legal-size paper
]{amsart}
so you can easily comment out some at a later time, as in
\documentclass[%
twocolumn,%
option for two-column pages
twoside,%
format for two-sided printing
legalpaper%
print on legal-size paper
]{amsart}
Notice that the ﬁrst line is terminated with a % to comment out the end-of-line character.
Tip
Some command arguments do not allow any spaces. If you want to break a line within
an argument list, you can terminate the line with a %, as shown in the previous example.
See also the example at the end of Section 3.4.9.
It is often useful to start a document with a comment line giving the ﬁle name and
identifying the earliest version of LATEX that must be used to typeset it.
%This is article.tex
\NeedsTeXFormat{LaTeX2e}[1994/12/01]
The second line speciﬁes the December 1, 1994 (or later) release of LATEX. You may
need to use such a declaration if your document uses a feature that was not available in
earlier releases. Since LATEX changes very little these days, this command is of limited
use. (See, however, the discussion on page 293.)
Other uses of % include marking parts of the article for your own reference. For in-
stance,
you may include comments to explain command deﬁnitions (as in

3.5
Comments and footnotes
69
Section 14.3). If something goes wrong inside a multiline math display (see Chap-
ter 7), LATEX does not tell you precisely where the error is. You can try commenting out
all but one of the lines, until each line works separately.
Note that % does not comment out lines in a BIBTEX database document (see Sec-
tion 15.2.5).
Tip
Symbolic referencing With every \label command I add the commented out form of
the symbolic reference, see Section 1.7.2.
So if I start a new theorem, I type \the and my text expander inserts the following
in the article:
\begin{theorem}\label{T:xx}
%Theorem~\ref{T:xx}
\end{theorem}
And do remember:
Tip
The 25% rule
If you want a % sign in text, make sure you type it as \%. Otherwise, % comments out
the rest of the line. LATEX does not produce a warning.
Using % to comment out large blocks of text can be tedious even with block com-
ment. The verbatim package includes the comment environment:
\begin{comment}
...the commented out text...
\end{comment}
Rule
comment environments
1. \end{comment} must be on a line by itself.
2. There can be no comment within a comment.
In other words,
\begin{comment}
commented out text...
\begin{comment}
some more commented out text...
\end{comment}
and some more commented out text...
\end{comment}

70
Chapter 3
Typing text
is not allowed. LATEX may give one of several messages, depending on the circum-
stances. For instance,
! LaTeX Error: \begin{document} ended by \end{comment}.
l.175 \end{comment}
Tip
Locating errors
The comment environment can be very useful in locating errors.
Suppose you have unbalanced braces in your source ﬁle (see Section 3.3.2). Work-
ing with a copy of your source ﬁle, comment out the ﬁrst half at a safe point (not within
an environment!) and typeset. If you still get the same message, the error is in the
second half. If there is no error message, the error is in the ﬁrst half. Comment out the
half that has no error.
Now comment out half of the remaining text and typeset again. Check to see
whether the error appears in the ﬁrst half of the remaining text or the second. Continue
applying this method until you narrow down the error to a paragraph that you can inspect
visually.
Since the comment environment requires the verbatim package, you must include
the line
\usepackage{verbatim}
in the preamble of the source ﬁle (see Sections 1.8, 10.3.1, and D.1).
3.5.2
Footnotes
The text of a footnote is typed as the argument of a \footnote command. To illustrate
the use of footnotes, I have placed one here.1 This footnote is typed as
\footnote{Footnotes are easy to place.}
If you want to use symbols to designate the footnotes, instead of numbers, type the
command
\renewcommand{\thefootnote}
{\ensuremath{\fnsymbol{footnote}}}
before the ﬁrst footnote; this provides up to nine symbols. In Section 14.1.1, we discuss
the \ensuremath command. Section 3.2 of The LATEX Companion, 2nd edition [56]
describes how to further customize footnotes.
In addition, there are title-page footnotes, such as the \thanks and \date com-
mands in the top matter. See page 4 for a typeset example of \date. See also Sec-
tion 9.2 and the typeset title page footnotes on page 272.
1Footnotes are easy to place.

3.6
Changing font characteristics
71
You can add a footnote marked by ∗to the title of an article. For instance, type the
title
\title[Complete congruence lattices]%
{Complete congruence lattices$^*$}
and add the lines
{\renewcommand{\thefootnote}{\fnsymbol{footnote}}
\setcounter{footnote}{1}
\footnotetext{Lecture delivered at the \AMS
annual meeting in Brandon.}
\setcounter{footnote}{0}
}
The footnote will appear as the ﬁrst footnote on page 1 marked by ∗. All the other
footnotes are unmarked.
3.6
Changing font characteristics
Although a document class and its options determine how LATEX typesets characters,
there are occasions when you want control over the shape or size of the font used.
3.6.1
Basic font characteristics
You do not have to be a typesetting expert to recognize the following basic font at-
tributes:
Shape Normal text is typeset:
upright (or roman)
as this text
slanted
as this text
italic
as this text
small caps
as this text
Monospaced and proportional Typewriters use monospaced fonts, that is, fonts all
of whose characters are of the same width. Most text editors display text us-
ing a monospaced font. LATEX calls monospaced fonts typewriter style. In this
book, such a font is used to represent user input and LATEX’s response, such as
“typewriter style text”. Whereas, normal text is typeset in a proportional
font, such as “proportional text with ii and mm”, in which ii is narrow and
mm is wide:
Monospaced and proportional Typewriters use monospaced fonts,
mmmmmm
iiiiii
}
monospaced
mmmmmm
iiiiii
}
proportional

72
Chapter 3
Typing text
Serifs A serif is a small horizontal (sometimes vertical) stroke used to ﬁnish oﬀa ver-
tical stroke of a letter, as on the top and bottom of the letter M. LATEX’s standard
serif font is Computer Modern roman, such as “serif text”. Fonts without serifs
are called sans serif, such as “sans serif text”. Sans serif fonts are often used for
titles or for special emphasis.
Series: weight and width The series is the combination of weight and width. A font’s
weight is the thickness of the strokes and the width is how wide the characters are.
Light, medium (or normal), and bold often describe weight.
Narrow (or condensed), medium (or normal), and extended often describe width.
The Computer Modern family includes bold fonts. Traditionally, when the user
asks for bold CM fonts, LATEX actually provides bold extended (a somewhat wider
version).
Size Most LATEX articles are typeset with 10 point text unless otherwise instructed.
Larger sizes are used for titles, section titles, and so on. Abstracts and footnotes
are often set in 8-point type.
Font family The collections of all sizes of a font is called a font family.
3.6.2
Document font families
In a document class, the style designer designates three document font families:
1. Roman (upright and serifed) document font family
2. Sans serif document font family
3. Typewriter style document font family
and picks one of these (for articles, as a rule, the roman document font family) as the
document font family or normal family. In all the examples in this book, the document
font family is the roman document font family except for presentations which use sans
serif (see Section 1.11 and Chapter 12). When you use Computer Modern fonts in
LATEX, which is the default, the three document font families are Computer Modern
roman, Computer Modern sans serif, and Computer Modern typewriter. The document
font family is Computer Modern roman.
In this book, the roman document font family is Times, the sans serif document font
family is Helvetica, and the typewriter style document font family is Computer Modern
typewriter. The document font family is the roman document font family Times.
The document font family (normal family) is the default font. You can always
switch back to it with
\textnormal{...}
or
{\normalfont ...}

3.6
Changing font characteristics
73
Table 3.6 shows these two commands and three additional pairs of commands
to help you switch among the three basic document font families. It also shows the
command pairs for the basic font shapes.
Command with Argument
Command Declaration
Switches to the
font family
\textnormal{...}
{\normalfont ...}
document
\emph{...}
{\em ...}
emphasis
\textrm{...}
{\rmfamily ...}
roman
\textsf{...}
{\sffamily ...}
sans serif
\texttt{...}
{\ttfamily ...}
typewriter style
\textup{...}
{\upshape ...}
upright shape
\textit{...}
{\itshape ...}
italic shape
\textsl{...}
{\slshape ...}
slanted shape
\textsc{...}
{\scshape ...}
small capitals
\textbf{...}
{\bfseries ...}
bold
\textmd{...}
{\mdseries ...}
normal weight and width
Table 3.6: Font family switching commands.
The font-changing commands of Table 3.6 come in two forms:
A command with an argument, such as \textrm{...}, changes its argument. These
are short commands, i.e., they cannot contain a blank line or a \par command.
A command declaration, such as \rmfamily, carries out the font change following
the command and within its scope (see Section 3.3.2).
You should always use commands with arguments for small changes within a para-
graph. They have two advantages:
You are less likely to forget to change back to the normal font.
You do not have to worry about italic corrections (see Section 3.6.4).
Note that MakeIndex requires you to use commands with arguments to change the font
in which page numbers are typeset (see Section 16.1).
For font changes involving more than one paragraph, use command declarations.
These commands are preferred if you want to create custom commands and environ-
ments (see Chapter 14).
3.6.3
Shape commands
There are ﬁve pairs of commands to change the font shape:
\textup{...} or {\upshape ...} switch to the upright shape.
\textit{...} or {\itshape ...} switch to the italic shape.

74
Chapter 3
Typing text
\textsl{...} or {\slshape ...} switch to the slanted shape.
\textsc{...} or {\scshape ...} switch to small capitals.
\emph{...} or {\em ...} switch to emphasis.
The document class speciﬁes how emphasis is typeset. As a rule, it is italic or slanted
unless the surrounding text is italic or slanted, in which case it is upright. For instance,
\emph{Rubin space}
in the statement of a theorem is typeset as
the space satisﬁes all three conditions, a so-called Rubin space that ...
The emphasis changed the style of Rubin space from italic to upright.
Tip
Be careful not to interchange the command pairs. For instance, if by mistake you type
{\textit serif}, the result is serif. Only the s is italicized since \textit takes s
as its argument.
Rule
Abbreviations and acronyms
For abbreviations and acronyms use small caps, except for two-letter geographical acro-
nyms.
So Submitted to tug should be typed as
Submitted to \textsc{tug}
Note that only the lowercase characters in the argument of the \textsc command are
printed as small caps.
3.6.4
Italic corrections
The phrase
when using a serif font
may be typed as follows:
when using a {\itshape serif\/} font
The \/ command before the closing brace is called an italic correction. Notice that
{\itshape M}M
typesets
as
MM,
where
the
M
is
leaning
into
the
M.

3.6
Changing font characteristics
75
Type {\itshape M\/}M to get the correct spacing M M. Compare the typeset phrase
from the previous example with and without an italic correction:
when using a serif font
when using a serif font
The latter is not as pleasing to the eye.
Rule 1
Italic correction
If the emphasized text is followed by a period or comma, you should not type the italic
correction.
For example,
Do not forget. My party is on Monday.
should be typed as
{\itshape Do not forget.} My party is on Monday.
Rule 2
Italic correction
The shape commands with arguments do not require italic correction. The corrections
are provided automatically where needed.
Thus you can type the phrase when using a serif font the easy way:
when using a \textit{serif} font
Whenever possible, let LATEX take care of the italic correction. However, if LATEX is
adding an italic correction where you feel it is not needed, you can override the correc-
tion with the \nocorr command. LATEX does not add an italic correction before a period
or a comma. These two punctuation marks are stored in the \nocorrlist command.
By redeﬁning this command, you can modify LATEX’s behavior.
Rule 3
Italic correction
The italic correction is required with the commands \itshape, \slshape, \em.

76
Chapter 3
Typing text
3.6.5
Series
These attributes play a very limited role with the Computer Modern fonts. There is only
one important pair of commands,
\textbf{...}
{\bfseries ...}
to change the font to bold (actually, bold extended). The commands
\textmd{...}
{\mdseries ...}
which set both the weight and width to medium (normal) are seldom needed.
3.6.6
Size changes
Standard LATEX documents are typeset in 10 point type. The 11 point and 12 point type
are often used for better readability and some journals require 12 point—if this is the
case, use the 12pt document class option (see Sections 9.5, 10.1.2, and 17.1.3). The
8pt and 9pt document class options are rarely used. The sizes of titles, subscripts, and
superscripts are automatically set by the document class, in accordance with the font
size option.
If you must change the font size for some text—it is seldom necessary to do so in
an article—the following command declarations are provided (see Table 3.7):
\Tiny
\tiny
\SMALL
\Small
\small
\normalsize
\large
\Large
\LARGE
\huge
\Huge
The command \SMALL is also called \scriptsize and the command \Small is also
called \footnotesize. The font size commands are listed in order of increasing—to
be more precise, nondecreasing—size.
Command
Sample text
\Tiny
sample text
\tiny
sample text
\SMALL or \scriptsize
sample text
\Small or \footnotesize
sample text
\small
sample text
\normalsize
sample text
\large
sample text
\Large
sample text
\LARGE
sample text
\huge
sample text
\Huge
sample text
Table 3.7: Font size commands.

3.6
Changing font characteristics
77
Two commands allow the user to increase or decrease font size: \larger moves
up one size, \smaller moves down one. Both commands take an optional argument.
For example, \larger[2] moves up 2 sizes.
3.6.7
Orthogonality
You are now familiar with the commands that change the font family, shape, series, and
size. Each of these commands aﬀects one and only one font attribute. For example,
if you change the series, then the font family, shape, and size do not change. These
commands act independently. In LATEX terminology, the commands are orthogonal.
From the user’s point of view this behavior has an important consequence: The order
in which these commands are given does not matter. Thus
\Large \itshape \bfseries
has the same eﬀect as
\bfseries \itshape \Large
Note that LATEX 2.09’s two-letter commands (see Section 3.6.8) are not orthogonal.
Orthogonality also means that you can combine these font attributes in any way
you like. For instance, the commands
\sffamily \slshape \bfseries \Large
instruct LATEX to change the font family to sans serif, the shape to slanted, the series to
bold, and the size to \Large. If the corresponding font is not available, LATEX uses a
font that is available, and issues a warning.
The font substitution algorithm (see Section 7.9.3 of The LATEX Companion, 2nd
edition [56] for details) may not provide the font you really want, so it is your responsi-
bility to make sure that the necessary fonts are available. We discuss this topic further
in Section 17.5.
3.6.8
Obsolete two-letter commands
Users of LATEX 2.09 and AMS-LATEX version 1.1 are accustomed to using the two-letter
commands \bf, \it, \rm, \sc, \sf, \sl, and \tt. These commands are not part
of LATEX. They are, however, still deﬁned in most document classes. The two-letter
commands
1. switch to the document font family,
2. change to the requested shape.
There are a number of reasons not to use them. The two-letter commands
are not part of LATEX,
require manual italic corrections,
are not orthogonal (see Section 3.6.7).

78
Chapter 3
Typing text
\slshape \bfseries is the same as \bfseries \slshape (slanted bold), but
\sl\bf is not the same as \bf\sl. Indeed, {\sl\bf sample} gives sample and
{\bf\sl sample} produces sample.
3.6.9
Low-level commands
The font-characteristic changing commands we have discussed so far in this section
are the high-level font commands. Each of these commands is implemented by LATEX
and the document class using low-level font commands. The low-level commands have
been developed for document class and package writers. See Section 7.9 of The LATEX
Companion, 2nd edition [56].
There is one use of low-level commands you should keep in mind. When you
choose a font size for your document or for some part thereof, you also determine the
\baselineskip, the distance from the baseline of one line to the baseline of the next.
Typically, a 10-point font size uses a 12 point \baselineskip. Occasionally, you
may want to change the font size along with the \baselineskip. A command for
accomplishing this is
\fontsize{9pt}{11pt}\selectfont
which changes the font size to 9 point and the \baselineskip to 11 point. To make
this change for a single paragraph, you can type
{%special paragraph
\fontsize{9pt}{11pt}\selectfont
text
}%end special paragraph
Observe the blank line that follows text and marks the end of the paragraph; \par
would accomplish the same thing.
3.7
Lines, paragraphs, and pages
When typesetting a document, LATEX breaks the text into lines, paragraphs, and pages.
Sometimes you may not like how LATEX has chosen to lay out your text. There are ways
to inﬂuence how LATEX does its work and these are discussed in this section.
3.7.1
Lines
LATEX typesets a document one paragraph at a time. It tries to split the paragraph into
lines of equal width; for a preliminary discussion, see Section 1.4. If it fails to do so
successfully and a line is too wide, you get an overfull \hbox message. Here is a
typical example:
Overfull \hbox (15.38948pt too wide) in paragraph
at lines 11--16

3.7
Lines, paragraphs, and pages
79
[]\OT1/cmr/m/n/10 In sev-eral sec-tions of the course
on ma-trix
the-ory, the strange term ‘‘hamiltonian-
The log ﬁle records these messages. To place a visual warning in the typeset version
of your document as well, use the draft document class option
\documentclass[draft]{amsart}
Lines that are too wide are be marked with a slug (a black box) in the margin. A slug
is a vertical bar of width \overfullrule.
Do not worry about such messages while writing the document. If you are prepar-
ing the ﬁnal version and receive a message for an overfull \hbox, the ﬁrst line of
defense is to see whether optional hyphens would help (see Section 3.4.9). Read the
warning message carefully to see which words LATEX cannot hyphenate properly. If
adding optional hyphens does not help, a simple rephrasing of the problem sentence
often does the trick.
Recall that there are 72.27 points in an inch (see Section 1.4). So if the message
indicates a 1.55812 pt overﬂow, for instance, you can safely ignore it.
Tip
If you do not want the 1.55812pt overﬂow reported whenever the document is typeset,
you can enclose the oﬀending paragraph (including the blank line indicating the end of
the paragraph) between the lines
{\setlength{\hfuzz}{2pt}
and
}% end of \hfuzz=2pt
Choose an argument that is slightly more than the reported error (maybe 2pt). This
does not aﬀect the typeset output, but the warning message and the slug, if you are
using the draft option, are suppressed.
Alternatively, enclose the oﬀending paragraph including the blank line indicating
the end of the paragraph in a setlength environment:
\begin{setlength}{\hfuzz}{2pt}
\end{setlength}
Breaking lines
There are two forms of the line breaking command:
The \\ and \newline commands break the line at the point of insertion but do not
stretch it.
The \linebreak command breaks the line at the point of insertion and stretches the
line to make it of the normal width.

80
Chapter 3
Typing text
The text following any of these commands starts at the beginning of the next line, with-
out indentation. The \\ command is often used, but \linebreak is rarely seen. (See
Section 17.6 for an application of the \linebreak command.) I illustrate the eﬀect of
these commands:
There are two forms of the line breaking command:
There are two forms\\ of the line breaking command:
There are two forms \newline of the line breaking command:
There are two forms \linebreak of the line breaking command:
typeset as
There are two forms of the line breaking command:
There are two forms
of the line breaking command:
There are two forms
of the line breaking command:
There are two forms of the line breaking command:
If you force a line break in the middle of a paragraph with the \linebreak com-
mand and LATEX thinks that there is too little text left on the line to stretch it to full
width, you get a message such as
Underfull \hbox (badness 4328) in paragraph
at lines 8--12
The \\ command has two important variants:
\\[length ], where length is the interline space you wish to specify after the line
break, for instance, 12pt, .5in, or 1.2cm. Note how the units are abbreviated.
\\*, which prohibits a page break following the line break.
The \\*[length ] form combines the two variants. We illustrate the \\[length ]
command:
It is also semimodular.\\[15pt]
In particular,
which is typeset as
It is also semimodular.
In particular,

3.7
Lines, paragraphs, and pages
81
Since \\ can be modiﬁed by * or by [ ], LATEX may get confused if the line after a
\\ command starts with a * or [. In such cases, type * as {*} or [ as {[}. For instance,
to get
There are two sources of problems:
[a] The next line starts with [.
type
There are two sources of problems:\\
{[}a] The next line starts with \texttt{[}.
If you fail to type {[}, you get the message
! Missing number, treated as zero.
<to be read again>
a
l.16 [a]
The next line starts with \texttt{[}.
Rule
\\
Without optional arguments, the \\ command and the \newline command are the
same in text, but not within environments or command arguments.
You can qualify the \linebreak command with an optional argument: 0 to 4. The
higher the argument,
the more it forces the occurrence of a line break.
\linebreak[4] is the same as \linebreak, while \linebreak[0] allows the line
break but does not force it.
The \nolinebreak command plays the opposite role.
\nolinebreak[0] =
\linebreak[0], and \nolinebreak[4] = \nolinebreak. \nolinebreak is sel-
dom used since the tie (˜) and the \text command (see Section 3.4.3) accomplish the
same goal most of the time.
Double spacing
It is convenient to proofread documents double spaced. Sone journals even require
submissions to be double spaced.
To typeset a document double spaced, include the command
\renewcommand{\baselinestretch}{1.5}
in its preamble.
Alternatively, use George D. Greenwade’s setspace. Load this package with a
\usepackage{setspace}

82
Chapter 3
Typing text
command in the preamble of the document and specify
\doublespacing
in the preamble. This changes not just the line spacing but a number of other parameters
to make your article look good.
See also Section 3.1.13 of The LATEX Companion, 2nd edition [56].
3.7.2
Paragraphs
Paragraphs are separated by blank lines or by the \par command. LATEX error messages
always show paragraph breaks as \par. The \par form is also very useful in custom
commands and environments (see Sections 14.1 and 14.2).
In some document classes, the ﬁrst line of a paragraph is automatically indented.
Indentation can be prevented with the \noindent command and can be forced with the
\indent command.
Sometimes—for instance, in a schedule, glossary, or index—you may want a hang-
ing indent, where the ﬁrst line of a paragraph is not indented, and all the others are
indented by a speciﬁed amount.
Hanging indents are created by specifying the amount of indentation speciﬁed by
\hangindent and set with the \setlength command:
\setlength{\hangindent}{30pt}
\noindent
\textbf{sentence} a group of words terminated by
a period, exclamation point, or question mark.
\setlength{\hangindent}{30pt}
\noindent
\textbf{paragraph} a group of sentences terminated by a
blank line or by the new paragraph command.
produces
sentence a group of words terminated by a period, exclamation point, or question
mark.
paragraph a group of sentences terminated by a blank line or by the new para-
graph command.
Notice that the \setlength command must be repeated for each paragraph.
Sometimes you may want to change the value of \hangafter, the length com-
mand that speciﬁes the number of lines not to be indented. The default value is 1.
To change it to 2, use the command
\setlength{\hangafter}{2}
For more about the \setlength command, see Section 14.5.2. The LATEX Com-
panion, 2nd edition [56] discusses in Section 3.1.4 the style parameters of a paragraph.
The preferred way to shape a paragraph or series of paragraphs is with a custom
list environment (see Section 14.6).

3.7
Lines, paragraphs, and pages
83
3.7.3
Pages
There are two page breaking commands:
\newpage, which breaks the page at the point of insertion but does not stretch the
content
\pagebreak, which breaks the page at the point of insertion and stretches the page’s
content to normal length
Text following either command starts at the beginning of the next page, indented.
As you can see, the page breaking commands are analogous to the line breaking
commands discussed in Section 3.7.1. This analogy continues with the optional argu-
ment, 0 to 4:
\pagebreak[0] to \pagebreak[4]
\nopagebreak[0] to \nopagebreak[4]
There are also special commands for allowing or forbidding page breaks in multiline
math displays (see Section 7.9).
When preparing the ﬁnal version of a document (see Section 17.5), you may have
to extend or shrink a page by a line or two to prevent it from breaking at an unsuitable
line. You can do so with the \enlargethispage command. For instance,
\enlargethispage{\baselineskip}
adds one line to the page length. On the other hand,
\enlargethispage{-\baselineskip}
makes the page one line shorter.
\enlargethispage{10000pt}
makes the page very long.
The *-ed version, \enlargethispage*, squeezes the page as much as possible.
There are two more variants of the \newpage command. The
\clearpage
command does a \newpage and typesets all the ﬁgures and tables waiting to be pro-
cessed (see Section 8.4.3). The variant
\cleardoublepage
is used with the twoside document class option (see Sections 9.5 and 10.1.2). It does
a \clearpage and in addition makes the next printed page a right-hand, that is, odd-
numbered, page, by inserting a blank page if necessary. If for your document class this
does not work, use the package cleardoublepage.sty in the samples folder.
Section 17.6 discusses the use of some of these commands in the ﬁnal preparation
of books.

84
Chapter 3
Typing text
3.7.4
Multicolumn printing
Many document classes provide the twocolumn option for two-column typesetting (see
Sections 9.5 and 10.1.2). In addition, there is a \twocolumn command which starts a
new page by issuing a \clearpage and then typesets in two columns. An optional
argument provides a two-column wide title. Use the \onecolumn command to switch
back to a one-column format.
Frank Mittelbach’s multicol package (see Section 10.3.1) provides the much
more sophisticated multicols environment, which can start in the middle of a page,
can handle more than two columns, and can be customized in a number of ways (see
Section 3.5.3 of The LATEX Companion, 2nd edition [56]).
3.8
Spaces
The judicious use of horizontal and vertical space is an important part of the formatting
of a document. Fortunately, most of the spacing decisions are made by the document
class, but LATEX has a large number of commands that allow the user to insert horizontal
and vertical spacing.
Remember that LATEX ignores excess spaces, tabs, and end-of-line characters. If
you need to add horizontal or vertical space, then you must choose from the commands
in this section. Use them sparingly (see Section 2.6).
3.8.1
Horizontal spaces
In this section, we discuss ﬁxed length horizontal space commands. Variable length
horizontal space is discussed in Section 3.8.4.
When typing text, there are three commands that are often used to create horizontal
space, shown between the bars in the display below:
\␣
\quad
\qquad
The \quad command creates a 1 em space and \qquad creates a 2 em space (see Sec-
tion 3.8.3). The interword space created by \␣can both stretch and shrink. There are
other commands that create smaller amounts of space. All the math spacing commands
of Section 6.1.3—with the exception of \mspace—can be used in ordinary text (see
Sections A.9 and B.6), but the \hspace and \phantom commands may be more appro-
priate.
The \hspace command takes a length as a parameter. The length may be negative.
For example,
\textbar\hspace{12pt}\textbar
|
|
\textbar\hspace{.5in}\textbar
|
|
\textbar\hspace{1.5cm}\textbar
|
|
or \hspace{-40pt}. The command \hspace is often used with a negative argument
when placing illustrations.

3.8
Spaces
85
The \phantom{argument } command produces a space the width and height of
the space that would be occupied by its typeset argument
\textbar need space\textbar
|need space|
\textbar\phantom{need space}\textbar
|
|
and
alpha \phantom{beta} gamma \phantom{delta}\\
\phantom{alpha} beta \phantom{gamma} delta
produces
alpha
gamma
beta
delta
The \phantom command is very useful for ﬁne tuning aligned math formulas (see
Sections 6.1 and 7.5.3). The variant
\hphantom{argument }
creates a space with the horizontal dimension that would be occupied by its typeset
argument and with zero height.
For instance, the last two lines of the dedication of this book were typed as follows
in the flushright environment:
\textbf{Kate} (8), \phantom{\textbf{Jay} (3)}\\[8pt]
\textbf{Jay} (3)
See Section B.6 for a table of all horizontal text-spacing commands.
It is easy to see how we can emulate the \pause command of beamer—see Sec-
tion 12.2.1—with the \phantom command.
Horizontal space variant
When LATEX typesets a line, it removes all spaces from the beginning of the line, in-
cluding the space created by \hspace, \quad, and other spacing commands. Using
the *-ed variant of \hspace, \hspace*, prevents LATEX from removing the space you
have speciﬁed.
For example,
And text\\
\hspace{20pt}And text\\
\hspace*{20pt}And text
is typeset as
And text
And text
And text

86
Chapter 3
Typing text
Use the \hspace* command for creating customized indentation. To indent a para-
graph by 24 points, give the command
\noindent\hspace*{24pt}And text
which typesets as
And text
To break a line and indent the next line by 24 points, give the command
And text\\
\hspace*{24pt}And text
which produces
And text
And text
3.8.2
Vertical spaces
You can add some interline space with the command \\[length ], as discussed in
Section 3.7.1. You can also do it with the \vspace command, which works just like
the \hspace command (see Section 3.8.1), except that it creates vertical space. Here
are some examples:
\vspace{12pt}
\vspace{.5in}
\vspace{1.5cm}.
Standard amounts of vertical space are provided by the three commands
\smallskip
\medskip
\bigskip
The space these commands create depends on the document class and the font size.
With the document class and font I am using for this book, they represent a vertical
space of 3 points, 6 points, and 12 points, respectively. 12 points is the baseline skip
(see Section 3.6.9) in standard LATEX documents with the default 10pt option.
Rule
Vertical space commands
All vertical space commands add the vertical space after the typeset line in which the
command appears.
To obtain
end of text.
New paragraph after vertical space
type

3.8
Spaces
87
end of text.
\vspace{12pt}
New paragraph after vertical space
The following example illustrates the unexpected way the vertical space is placed if the
command that creates it does not start a new paragraph:
end of text.
\vspace{12pt}
The following example illustrates the unexpected way
the vertical space is placed if the
command that creates it does not start a new paragraph:
It typesets as
end of text. The following example illustrates the unexpected way the vertical
space is placed if the command that creates it does not start a new paragraph:
Vertical space variants
LATEX removes vertical space from the beginning and end of each page, including space
produced by \vspace. The space created by the variant \vspace* is not removed by
LATEX under any circumstances. Use this command, for instance, to start the typeset
text (say, of a letter) not at the top of the page.
The \phantom command has also a vertical variant: \vphantom. The command
\vphantom{argument } creates a vertical space with the vertical dimension that would
be occupied by its typeset argument, argument .
3.8.3
Relative spaces
The length of a space is usually given in absolute units: 12pt (points), .5cm (centime-
ters), 1.5in (inches). Sometimes, relative units, em and ex, are more appropriate, units
that are relative to the size of the letters in the current font. The unit 1 em is approxi-
mately the width of an M in the current font, while 1 ex is approximately the height of
an x in the current font. These units are used in commands such as
\hspace{12em} and \vspace{12ex}
The \quad and \qquad commands (Section 3.8.1) produce 1 em and 2 em spaces.

88
Chapter 3
Typing text
3.8.4
Expanding spaces
Horizontal spaces
The \hfill, \dotfill, and \hrulefill commands ﬁll all available space in the line
with spaces, dots, or a horizontal line, respectively. If there are two of these commands
on the same line, the space is divided equally between them. These commands can be
used to center text, to ﬁll lines with dots in a table of contents, and so on.
To obtain
2. Boxes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .34
ABC
and
DEF
ABC
and
DEF
type
2. Boxes\dotfill 34\\
ABC\hfill and\hfill DEF\\
ABC\hrulefill and\hrulefill DEF
In a centered environment—such as a \title (see Section 9.2.1) or a center
environment (see Section 4.3)—you can use \hfill to set a line ﬂush right:
This is the title
First Draft
Author
To achieve this eﬀect, type
\begin{center}
This is the title\\
\hfill First Draft\\
Author
\end{center}
Vertical spaces
The vertical analogue of \hfill is \vfill. This command ﬁlls the page with vertical
space so that the text before the command and the text after the command stretch to
the upper and lower margin. You can play the same games with it as with \hfill in
Section 3.8.4.
The command \vfill stands for \vspace{\fill}, so it is ignored at the be-
ginning of a page. Use \vspace*{\fill} if you need it at the beginning of a page.

3.9
Boxes
89
3.9
Boxes
Sometimes it can be useful to typeset text in an imaginary box, and treat that box as a
single large character. A single-line box can be created with the \text or \makebox
commands and a multiline box of a prescribed width can be created with the \parbox
command or minipage environment.
3.9.1
Line boxes
The \text command provides a line box that typesets its argument without line breaks.
As a result, you may ﬁnd the argument extending into the margin. The resulting box is
handled by LATEX as if it were a single large character. For instance,
\text{database}
causes LATEX to treat the eight characters of the word database as if they were one.
This technique has a number of uses. It prevents LATEX from breaking the argument
(see Section 3.4.9). It also allows you to use the phrase in the argument in a formula
(see Section 5.4.6).
The argument of \text is typeset in a size appropriate for its use, for example, as
a subscript or superscript. See Section 5.4.6 for an example.
Line boxes—a reﬁnement
The \mbox command is the short form of the \makebox command. Both \mbox and
\text prevent breaking the argument, but \mbox does not change size in subscripts and
superscripts.
The full form of the \makebox command is
\makebox[width ][alignment ]{text }
where the arguments are
width, the (optional) width of the box. If [width ] is omitted, the box is as wide
as necessary to enclose its contents.
alignment, (optionally) one of c (the default), l, r, or s. The text is centered by
default, l sets the argument ﬂush left, r right, and s stretches the text the full length
of the box if there is blank space in the argument.
text, the text in the box.
A width argument can be speciﬁed in inches (in), centimeters (cm), points (pt),
em, or ex (see Sections 3.8.3 and 14.5.2).
The following examples,
\makebox{Short title.}End\\
\makebox[2in][l]{Short title.}End\\
\makebox[2in]{Short title.}End\\
\makebox[2in][r]{Short title.}End\\
\makebox[2in][s]{Short title.}End

90
Chapter 3
Typing text
typeset as
Short title.End
Short title.
End
Short title.
End
Short title.End
Short
title.End
The optional width argument, width, can use four length commands:
\height
\depth
\totalheight
\width
These are the dimensions of the box that would be produced without the optional width
argument.
Here is a simple example. The command
\makebox{hello}
makes a box of width \width. To typeset hello in a box three times the width, that is,
in a box of width 3\width, use the command
\makebox[3\width]{hello}
So
start\makebox[3\width]{hello}end
typesets as
start
hello
end
The formal deﬁnition of these four length commands is the following:
\height is the height of the box above the baseline
\depth is the depth of the box below the baseline
\totalheight is the sum of \height and \depth
\width is the width of the box
There is an interesting variant of the \makebox command. The \rlap command
makes a box and pretends that it is of width zero. For instance,
\newcommand{\circwithdot}
{\mathbin{\rlap{$\mspace{2mu}\cdot$}\hbox{$\circ$}}}
deﬁnes the command \circwithdot, so you can type
$f\circwithdot\varphi$
which prints as 𝑓⋅◦𝜑. There is also an \llap command.

3.9
Boxes
91
3.9.2
Frame boxes
Boxed text is very emphatic. For example, Do not touch!
is typed as
\fbox{Do not touch!}
This is a frame box, hence the command \fbox or \framebox.
Boxed text cannot be broken, so if you want a frame around more than one line
of text, you should put the text as the argument of a \parbox command or within a
minipage environment (see Section 3.9.3), and then put that into the argument of an
\fbox command. For instance,
\fbox{\parbox{3in}{Boxed text cannot be broken,
so if you want to frame more than one line
of text, place it in the argument of a
\bsl\texttt{parbox}
command or within a
\texttt{minipage} environment.}}
produces
Boxed text cannot be broken, so if you want to
frame more than one line of text, place it in
the argument of a \parbox command or within
a minipage environment.
The \bsl command is deﬁned in Section 14.1.1. See Section 6.7.2 for boxed formulas.
The \framebox command works exactly like \makebox, except that it draws a
frame around the box.
\framebox[2in][l]{Short title}
produces
Short title
You can use this command to typeset the number 1 in a square box, as required by
the title of Michael Doob’s [12]:
TEX Starting from 1
\framebox{\makebox[\totalheight]{1}}
which typesets as
1

92
Chapter 3
Typing text
Note that
\framebox[\totalheight]{1}
typesets as
1
which is not a square box. Indeed, \totalheight is the height of 1, which becomes the
width of the box. The total height of the box, however, is the height of the character 1
to which you have to add twice the \fboxsep, the separation between the contents of
the box and the frame, deﬁned as 3 points, and twice the \fboxrule, the width of the
line, or rule, deﬁned as 0.4 points. These lengths are in general also added to the width
of the box, but not in this case, because we forced the width to equal the height of the
character.
You can use the \fbox command to frame the name of an author:
\author{\fbox{author’s name}}
3.9.3
Paragraph boxes
A paragraph box works like a paragraph. The text it contains is wrapped around into
lines. The width of these lines is set by the user.
The \parbox command typesets the contents of its second argument as a para-
graph with a line width supplied as the ﬁrst argument. The resulting box is handled by
LATEX as a single large character. For example, to create a 3-inch wide column,
Fred Wehrung’s new result shows the limitation of
E. T. Schmidt’s construction, especially for large
lattices.
type
\parbox{3in}{Fred Wehrung’s new result shows the
limitation of E.\,T. Schmidt’s construction,
especially for large lattices.}
Paragraph boxes are especially useful when working within a tabular environ-
ment. See the subsection on reﬁnements in Section 4.6 for examples of multiline entries.
The width of the paragraph box can be speciﬁed in inches (in), centimeters (cm),
points (pt), or the relative measurements em and ex (see Section 3.8.3), among others
(see Section 14.5.2 for a complete listing of measurement units).

3.9
Boxes
93
Tip
The \parbox command requires two arguments. Dropping the ﬁrst argument results in
a message such as
! Missing number, treated as zero.
<to be read again>
T
l.175
Dropping the second argument does not yield a message but the result is probably not
what you intended. The next character is taken as the contents of the \parbox.
Paragraph box reﬁnements
The “character” created by a \parbox command is placed on the line so that its vertical
center is aligned with the center of the line. An optional ﬁrst argument b or t forces the
paragraph box to align along its bottom or top. For an example, see Section 4.6. The
full syntax of \parbox is
\parbox[alignment ][height ][inner-alignment ]{width }{text }
Just as for the \makebox command (see Section 3.9.1), the
\height
\depth
\totalheight
and
\width
commands may be used in the height argument instead of a numeric argument.
The inner-alignment argument is the vertical equivalent of the alignment
argument for \makebox, determining the position of text within the box and it may
be any one of t, b, c, or s, denoting top, bottom, centered, or stretched alignment,
respectively. When the inner-alignment argument is not speciﬁed, it defaults to
alignment.
Paragraph box as an environment
The minipage environment is very similar to the \parbox command. It typesets the
text in its body using a line width supplied as an argument. It has an optional argument
for bottom or top alignment, and the other \parbox reﬁnements also apply. The dif-
ference is that the minipage environment can contain displayed text environments dis-
cussed in Chapter 4.
The minipage environment can also contain footnotes (see Section 3.5.2) that are
displayed within the minipage. See Section 3.2.1 of The LATEX Companion, 2nd edition
[56] for complications that may arise therefrom.

94
Chapter 3
Typing text
3.9.4
Marginal comments
A variant of the paragraph box, the \marginpar command, allows you to add marginal
comments. So
Do not
use this
often
\marginpar{Do not use this often}
produces the comment displayed in the margin.
The AMS warning in the book [31] (also displayed here below the marginal com-
ment) is deﬁned as
A○
\marginpar{{\Large%
\textcircled{\raisebox{.7pt}{\normalsize\textbf A}}}}
The \textcircled command is discussed in Section 3.4.7, while the \raisebox com-
mand is introduced in Section 3.9.6.
Rule
Marginal comments and math environments
Do not use marginal comments in equations or multiline math environments.
Tip
Avoid using too many marginal comments on any given page—LATEX may have to place
some of them on the next page.
If the document is typeset two-sided, then the marginal comments are set in the
outside margin. The form
\marginpar[left-comment ]{right-comment }
uses the required argument right-comment when the marginal comment is set in the
right margin and the optional argument left-comment when the marginal comment
is set in the left margin.
The width of the paragraph box for marginal comments is stored in the length
command \marginparwidth (see Section 14.5.2 for length commands). If you want
to change it, use
\setlength{\marginparwidth}{new_width }
as in
\setlength{\marginparwidth}{90pt}
The default value of this width is set by the document class. If you want to know the
present setting, type
\the\marginparwidth
in your document and typeset it, or, in interactive mode (see Sections 14.1.8 and C.3),
type

3.9
Boxes
95
*\showthe\marginparwidth
(* is the interactive prompt).
See Sections 3.2.8 and 4.1 of The LATEX Companion, 2nd edition [56] for other
style parameters pertaining to marginal notes.
3.9.5
Solid boxes
A solid ﬁlled box is created with a \rule command. The ﬁrst argument is the width
and the second is the height. For instance, to obtain
end of proof symbol:
type
end of proof symbol: \rule{1.6ex}{1.6ex}
In fact, this symbol is usually slightly lowered:
end of proof symbol:
This positioning is done with an optional ﬁrst argument:
end of proof symbol: \rule[-.23ex]{1.6ex}{1.6ex}
Here is an example combining \rule with \makebox and \hrulefill:
1 inch:\quad\makebox[1in]{\rule{.4pt}{4pt}%
\hrulefill\rule{.4pt}{4pt}}
which produces
1 inch:
Struts
Solid boxes of zero width are called struts. Struts are invisible, but they force LATEX to
make room for them, changing the vertical alignment of lines. Standard struts can also
be added with the \strut or \mathstrut command. To see how struts work, compare
ab and ab and ab
typed as
\fbox{ab} and \fbox{\strut ab} and \fbox{$\mathstrut$ab}

96
Chapter 3
Typing text
Struts are especially useful for ﬁne tuning tables (see Section 4.6) and formulas
(see math struts in Section 6.5).
Rule
Zero distance
0pt, 0in, 0cm, 0em all stand for zero width. 0 by itself is not acceptable.
For example, \rule{0}{1.6ex} gives the message
! Illegal unit of measure (pt inserted).
<to be read again>
h
l.251 \rule{0}{1.6ex}
If the \rule command has no argument or only one, LATEX generates a message.
For instance, \rule{1.6ex} gives the message
! Paragraph ended before \@rule was complete.
or
! Missing number, treated as zero.
In the ﬁrst message, the reference to \@rule suggests that the problem is with the \rule
command. Checking the syntax of the \rule command, you ﬁnd that an argument is
missing. The second message is more informative, since there is, indeed, a missing
number.
3.9.6
Fine tuning boxes
The command
\raisebox{displacement }{text }
typesets text in a box with a vertical displacement. If displacement is positive,
the box is raised; if it is negative, the box is lowered.
The \raisebox command allows us to play games:
fine-\raisebox{.5ex}{tun}\raisebox{-.5ex}{ing}
produces ﬁne-tuning.
The \raisebox command has two optional arguments:
\raisebox{0ex}[1.5ex][0.75ex]{text }
forces LATEX to typeset text as if it extended 1.5 ex above and 0.75 ex below the line,
resulting in a change in the interline space above and below the line. A simple version
of this command, \smash, is discussed in Section 6.5.
In the AMS warning in the book [31] (shown on page 94), the \raisebox com-
mand is used to properly center the bold A in the circle:
\Large\textcircled{\raisebox{.7pt}{\normalsize\textbf A}}

C H A P T E R
4
Text environments
There are three types of text environments in LATEX:
1. Displayed text environments; text within such an environment usually is typeset with
some vertical space around it
2. Text environments that create a “large symbol”
3. Style and size environments
We start by discussing a very important rule about blank lines in displayed text
environments. Then we proceed in Section 4.2 to the most often used displayed text
environments: lists. We continue with the style and size environments in Section 4.3.
The most important displayed text environments in math are proclamations or the-
orem-like structures, proclamations with style, and the proof environment, discussed
in detail in Sections 4.4 and 4.5.
The tabular environment discussed in Section 4.6 produces a “large symbol”,
a table, which is of limited use in math. In Section 4.7, we discuss the tabbing en-
vironment, which may be used for computer code. The legacy environments quote,
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1_4
97

98
Chapter 4
Text environments
quotation, and verse are discussed in Section 4.8, along with the verbatim envi-
ronment, which is often used to display LATEX source in a typeset LATEX document.
4.1
Some general rules for displayed text environments
As you know, blank lines play a special role in LATEX, usually indicating a paragraph
break. Since displayed text environments structure the printed display themselves, the
rules about blank lines are relaxed somewhat. However, a blank line trailing an envi-
ronment signiﬁes a new paragraph for the text following the environment.
Rule
Blank lines in displayed text environments
1. Blank lines are ignored immediately after \begin{name } or immediately before
\end{name } except in a verbatim environment.
2. A blank line after \end{name } forces the text that follows to start a new paragraph.
3. As a rule, you should not have a blank line before \begin{name }.
4. The line after any theorem or proof always begins a new paragraph, even if there is
no blank line or \par command.
The page breaking commands in Section 3.7.3 apply to text environments, as does
the line breaking command \\ discussed in Section 3.7.1.
4.2
List environments
LATEX provides three list environments: enumerate, itemize, and description.
LATEX also provides a generic list environment that can be customized to ﬁt your
needs. See Section 14.6 on custom lists.
Most document classes redeﬁne the spacing and some stylistic details of lists, esp-
ecially since the list environments in the legacy document classes are not very pleasing.
In this section, the list environments are formatted as they are by our standard document
class, amsart. Throughout the rest of the book, lists are formatted as speciﬁed by this
book’s designer.
4.2.1
Numbered lists
A numbered list is created with the enumerate environment:

4.2
List environments
99
typed as
\noindent This space has the following properties:
\begin{enumerate}
\item Grade 2 Cantor\label{Cantor};
\item Half-smooth Hausdorff\label{Hausdorff};
\item Metrizably smooth\label{smooth}.
\end{enumerate}
Therefore, we can apply the Main Theorem.
Each item is introduced with an \item command. The numbers LATEX generates
can be labeled and cross-referenced (Section 8.4.2). This construct can be used in the-
orems and deﬁnitions, for listing conditions or conclusions.
If you use \item in the form \item[], you get an unnumbered item in the list,
while \item[a] replaces the number of the item with a. This is another form of abso-
lute referencing, see Section 8.4.2.
Tip
Do not label absolute references. It may lead to problems that are hard to explain.
4.2.2
Bulleted lists
A bulleted list is created with the itemize environment:
is typed as
\noindent We set out to accomplish a variety of goals:
\begin{itemize}
\item To introduce the concept of smooth functions.
\item To show their usefulness in differentiation.
\item To point out the efficacy of using smooth
functions in Calculus.
\end{itemize}

100
Chapter 4
Text environments
4.2.3
Captioned lists
In a captioned list each item has a title (caption) speciﬁed by the optional argument of
the \item command. Such lists are created with the description environment:
is typed as
\noindent In this introduction, we describe
the basic techniques:
\begin{description}
\item[Chopped lattice] a reduced form of a lattice;
\item[Boolean triples] a powerful lattice construction;
\item[Cubic extensions] a subdirect power flattening
the congruences.
\end{description}
4.2.4
A rule and combinations
There is only one rule you must remember.
Rule
List environments
An \item command must immediately follow
\begin{enumerate}, \begin{itemize}, or \begin{description}.
Of course, spaces and line breaks can separate them.
If you break this rule, you get a message. For instance,
\begin{description}
This is wrong!
\item[Chopped lattice] a reduced lattice;
gives the message
! LaTeX Error: Something’s wrong--perhaps a missing \item.
l.105
\item[Chopped lattice]
a reduced lattice;

4.2
List environments
101
If you see this message, remember the rule for list environments and check for text
preceding the ﬁrst \item.
You can nest up to four list environments; for instance,
which is typed as
\begin{enumerate}
\item First item of Level 1.
\begin{enumerate}
\item First item of Level 2.
\begin{enumerate}
\item First item of Level 3.
\begin{enumerate}
\item First item of Level 4.
\item Second item of Level 4.\label{level4}
\end{enumerate}
\item Second item of Level 3.
\end{enumerate}
\item Second item of Level 2.
\end{enumerate}
\item Second item of Level 1.
\end{enumerate}
Referencing the second item of Level 4: \ref{level4}
Note that the label level4 collected all four of the counters (see Section 8.4.2).

102
Chapter 4
Text environments
You can also mix list environments:
which is typed as
\begin{enumerate}
\item First item of Level 1.
\begin{itemize}
\item First item of Level 2.
\begin{enumerate}
\item First item of Level 3.
\begin{itemize}
\item First item of Level 4.
\item Second item of Level 4.\label{enums}
\end{itemize}
\item Second item of Level 3.
\end{enumerate}
\item Second item of Level 2.
\end{itemize}
\item Second item of Level 1.
\end{enumerate}
Referencing the second item of Level 4: \ref{enums}
Now the label enums collects only the two enumerate counters (see Section 8.4.2).
The indentations are, of course, not needed. I use them to keep track of the level
of nesting.
In all three types of list environment, the \item command may be followed by an
optional argument, which is displayed at the beginning of the typeset item:
\item[label ]
Note that for enumerate and itemize the resulting typography may leave something
to be desired.

4.3
Style and size environments
103
Tip
If the text following an \item command starts with an opening square bracket, [, then
LATEX thinks that \item has an optional argument. To prevent this problem from occur-
ring, type [ as {[}. Similarly, a closing square bracket, ], inside the optional argument
should be typed as {]}.
Tip
You may want to use a list environment solely for the way the items are displayed,
without any labels. You can achieve this eﬀect by using \item[].
You can change the style of the numbers in an enumerate environment by redeﬁn-
ing the counter as suggested in Section 14.5.1:
\renewcommand{\labelenumi}{{\normalfont (\roman{enumi})}}
The labels then are displayed as (i), (ii), and so on. This modiﬁcation only works if you
do not want to reference these items. If you want the \ref command to work properly,
use David Carlisle’s enumerate package (see Section 10.3.1). For an example of how
to use Carlisle’s environment, see Section 14.2.1. Section 3.3 of The LATEX Companion,
2nd edition [56] explains how to customize the three list environments and discusses
Bernd Schandl’s paralist package, which provides a number of new list environments
and makes customizing the three legacy list environments much easier. For custom lists,
see Section 14.6.
4.3
Style and size environments
There are several text environments that allow you to set font characteristics. They have
the same names as their corresponding command declarations:
rmfamily
sffamily
ttfamily
upshape
itshape
em
slshape
scshape
bfseries
For instance,
\begin{ttfamily}
text
\end{ttfamily}
typesets text just like {\ttfamily text } would. Remember to use the command-
declaration names for the environment names, that is, use rmfamily, not textrm and
ttfamily, not texttt (see 3.6.2). There are also text environments for changing the
font size, from tiny to Huge (see Section 3.6.6).

104
Chapter 4
Text environments
If you are getting overwhelmed by the large number of environments changing
style and size, consult Tables 3.6 and 3.7 (see also Section B.3.2).
Horizontal alignment of a paragraph is controlled by the flushleft, flush-
right, and center environments. Within the flushright and center environments,
it is customary to force new lines with the \\ command, while in the flushleft envi-
ronment, you normally allow LATEX to wrap the lines.
These text environments can be used separately or in combination, as in
The simplesttext environments set the printing style and size.
The commands and the environments have similar names.
typed as
\begin{flushright}
The \begin{bfseries}simplest\end{bfseries}
text environments set the
printing style and size.\\
The commands and the environments have similar names.
\end{flushright}
There are command declarations that correspond to these environments:
\centering centers text
\raggedright left aligns text
\raggedleft right aligns text
The eﬀect of one of these commands is almost the same as that of the corresponding
environment except that the environment places additional vertical space before and
after the displayed paragraphs. For such a command declaration to aﬀect the way a
paragraph is formatted, the scope must include the whole paragraph, including the blank
line at the end of the paragraph, preferably indicated with a \par command.
The \centering command is used often with the \includegraphics command
(see Section 8.4.3).
4.4
Proclamations (theorem-like structures)
Theorems, lemmas, deﬁnitions, and so forth are a major part of mathematical writing.
In LATEX, these constructs are typed in displayed text environments called proclamations
or theorem-like structures.
In the firstarticle.tex sample article (see p. 4), there is only a single theorem.
In the secondarticle.tex sample article (see pp. 272–275), there are a num-
ber of diﬀerent proclamations in a variety of styles, with varying degrees of emphasis.
Proclamations with style are discussed in Section 4.4.2.

4.4
Proclamations (theorem-like structures)
105
The two steps are required to use a proclamation:
Step 1 Deﬁne the proclamation with a \newtheorem command in the preamble
of the document. For instance, the line
\newtheorem{theorem}{Theorem}
deﬁnes a theorem environment.
Step 2 Invoke the proclamation as an environment in the body of your document.
Using the proclamation deﬁnition from Step 1, type
\begin{theorem}
My first theorem.
\end{theorem}
to produce a theorem:
Theorem 1. My ﬁrst theorem.
In the proclamation deﬁnition
\newtheorem{theorem}{Theorem}
the ﬁrst argument, theorem, is the name of the environment that invokes the theorem.
The second argument, Theorem, is the name that is used when the proclamation is
typeset. LATEX numbers the theorems automatically and typesets them with vertical
space above and below. The phrase Theorem 1. appears, followed by the theorem
itself, which may be emphasized. Of course, the formatting of the theorem depends on
the document class and the proclamation style (see Section 4.4.2).
You may also specify an optional argument,
\begin{theorem}[The Fuchs-Schmidt Theorem]
The statement of the theorem.
\end{theorem}
that appears as the name of the theorem:
Theorem 1 (The Fuchs-Schmidt Theorem). The statement of the theorem.
LATEX is very fussy about how proclamations are deﬁned. For example, in the int-
roductory article firstarticle.tex (see Section 1.8), if the closing brace is dropped
from the end of line 8,
\newtheorem{definition}{Definition
you get a message such as

106
Chapter 4
Text environments
Runaway argument?
{Definition \newtheorem {notation}{Notation}
! Paragraph ended before \@ynthm was complete.
<to be read again>
\par
l.10
Line 10 is the line after the \newtheorem commands. The message conveys the infor-
mation that something is wrong in the paragraph before line 10.
If you forget an argument, as in
\newtheorem{definition}
LATEX produces a message such as
! LaTeX Error: Missing \begin{document}.
l.9 \newtheorem{n
otation}{Notation}
In the message, the line
! LaTeX Error: Missing \begin{document}.
usually means that LATEX became confused and believes that some text typed in the
preamble should be moved past the line
\begin{document}
The mistake could be anywhere in the preamble above the line LATEX indicates. If you
encounter such a message, try to isolate the problem by commenting out parts of the
preamble (see Section 3.5.1 and also Section 2.6).
Rule
Lists in proclamations
If a proclamation starts with a list environment, precede the list by \hfill.

4.4
Proclamations (theorem-like structures)
107
If you do not, as in
\begin{definition}\label{D:prime}
\begin{enumerate}
\item $u$ is \emph{bold} if $u = x^2$.\label{mi1}
\item $u$ is \emph{thin} if $u = \sqrt{x}$.\label{mi2}
\end{enumerate}
\end{definition}
your typeset list starts on the ﬁrst line of the proclamation:
If you add the \hfill command,
\begin{definition}\hfill
\begin{enumerate}
the list in the deﬁnition typesets correctly:
Consecutive numbering
If you want to number two sets of proclamations consecutively, you can do so by ﬁrst
deﬁning one proclamation, and then using its name as an optional argument of the sec-
ond proclamation. For example, to number the lemmas and propositions in your paper
consecutively, you type the following two lines in your preamble:
\newtheorem{lemma}{Lemma}
\newtheorem{proposition}[lemma]{Proposition}
Lemmas and propositions are then consecutively numbered as Lemma 1, Proposi-
tion 2, Proposition 3, and so on.
Let me emphasize: The optional argument of a proclamation deﬁnition must be
the name of a proclamation that has already been deﬁned.
Numbering within a section
The \newtheorem command may also have a diﬀerent optional argument; it causes
LATEX to number the proclamations within sections. For example,

108
Chapter 4
Text environments
\newtheorem{lemma}{Lemma}[section]
numbers the lemmas in Section 1 as Lemma 1.1 and Lemma 1.2. In Section 2, you
have Lemma 2.1 and Lemma 2.2, and so on.
Instead of section, you may use any sectioning command provided by the docu-
ment class, such as chapter, section, and subsection.
Consecutive numbering and numbering within a section can be combined. For
example,
\newtheorem{lemma}{Lemma}[section]
\newtheorem{proposition}[lemma]{Proposition}
sets up the lemma and proposition environments so that they are numbered consec-
utively within sections: Lemma 1.1, Proposition 1.2, Proposition 1.3 and Proposi-
tion 2.1, Lemma 2.2, and so on.
4.4.1
The full syntax
The full form of \newtheorem is
\newtheorem{envname }[procCounter ]{Name }[secCounter ]
where the two optional arguments are mutually exclusive, and
envname is the name of the environment to be used in the body of the document.
For instance, you may use theorem for the envname of a theorem, so that a
theorem is typed inside a theorem environment. Of course, envname is just
a label; you are free to choose any environment name, such as thm or george
(as long as the name is not in use as the name of another command or environ-
ment). This argument is also the name of the counter LATEX uses to number these
text environments.
procCounter is an optional argument. It sets the new proclamation to use the counter
of a previously deﬁned proclamation and the two proclamations are consecutively
numbered.
Name is the text that is typeset when the proclamation is invoked. So if Theorem is
given as Name, then you get Theorem 1, Theorem 2, and so on in your document.
secCounter is an optional argument that causes the Name environments to be num-
bered within the appropriate sectioning units. So if theorem is the envname and
section is the secCounter, then in Section 1 you have Theorem 1.1, Theo-
rem 1.2, and so on. In Section 2 you get Theorem 2.1, Theorem 2.2, and so
on. Proclamations may be numbered within subsections, sections, chapters, or
any other sectioning unit automatically numbered by LATEX.

4.4
Proclamations (theorem-like structures)
109
4.4.2
Proclamations with style
You can choose one of three styles for your proclamations by preceding the deﬁnitions
with the \theoremstyle{style} command, where style is one of the following:
plain, the most emphatic
definition
remark, the least emphatic
There are a few extra options, including the \newtheorem* command, an unnum-
bered version of \newtheorem.
The following commands set the styles in the secondarticle.tex article. The
typeset sample article (on pages 272–275) shows how the chosen styles aﬀect the typeset
proclamations.
\theoremstyle{plain}
\newtheorem{theorem}{Theorem}
\newtheorem{corollary}{Corollary}
\newtheorem*{main}{Main Theorem}
\newtheorem{lemma}{Lemma}
\newtheorem{proposition}{Proposition}
\theoremstyle{definition}
\newtheorem{definition}{Definition}
\theoremstyle{remark}
\newtheorem*{notation}{Notation}
A proclamation created by a \newtheorem command has the style of the last
\theoremstyle command preceding it. The default style is plain.
Three examples
Here are three sets of proclamation deﬁnitions to illustrate diﬀerent styles and number-
ing schemes.
Example 1
\theoremstyle{plain}
\newtheorem{theorem}{Theorem}
\newtheorem{lemma}[theorem]{Lemma}
\newtheorem{definition}[theorem]{Definition}
\newtheorem{corollary}[theorem]{Corollary}

110
Chapter 4
Text environments
In a document with this set of proclamation deﬁnitions you can use theorems,
lemmas, deﬁnitions, and corollaries, typeset in the most emphatic (plain) style. They
are all numbered consecutively: Deﬁnition 1, Deﬁnition 2, Theorem 3, Corollary 4,
Lemma 5, Lemma 6, Theorem 7, and so on.
Example 2
\theoremstyle{plain}
\newtheorem{theorem}{Theorem}
\newtheorem*{main}{Main Theorem}
\newtheorem{definition}{Definition}[section]
\newtheorem{lemma}[definition]{Lemma}
\theoremstyle{definition}
\newtheorem*{Rule}{Rule}
In this document you may use theorems, deﬁnitions, and lemmas in the most em-
phatic (plain) style, and unnumbered rules in the less emphatic (definition) style.
Deﬁnitions and lemmas are numbered consecutively within sections. You may also
use the unnumbered Main Theorem. So, for example, you may have Deﬁnition 1.1,
Deﬁnition 1.2, Main Theorem, Rule, Lemma 1.3, Lemma 2.1, Theorem 1, and
so on.
Example 3
\theoremstyle{plain}
\newtheorem{theorem}{Theorem}
\newtheorem{corollary}{Corollary}
\newtheorem*{main}{Main Theorem}
\newtheorem{lemma}{Lemma}
\newtheorem{proposition}{Proposition}
\theoremstyle{definition}
\newtheorem{definition}{Definition}
\theoremstyle{remark}
\newtheorem*{notation}{Notation}
With these proclamation deﬁnitions you can use theorems, corollaries, lemmas,
and propositions in the most emphatic (plain) style, and an unnumbered Main
Theorem. You can have deﬁnitions in the less emphatic (definition) style. All are
separately numbered. So in the document you may have Deﬁnition 1, Deﬁnition 2,
Main Theorem, Lemma 1, Proposition 1, Lemma 2, Theorem 1, Corollary 1,
and so on. You can also have Notations which are unnumbered and typeset in the least
emphatic (remark) style.

4.5
Proof environments
111
Number swapping
Proclamations can be numbered on the left, as for instance, 3.2 Theorem. To acco-
mplish this, type the \swapnumbers command before the \newtheorem command cor-
responding to the proclamation deﬁnition you want to change. This command aﬀects
all of the proclamation deﬁnitions that follow it, so the proclamation deﬁnitions in the
preamble should be in two groups. The regular ones should be listed ﬁrst, followed by
the \swapnumbers command, then all the proclamations that swap numbers.
Do not swap numbers unless the publisher demands it.
Custom theorem styles
You can deﬁne custom theorem styles with the \newtheoremstyle command. You
should very seldom do this, the three theorem styles of the document class should suf-
ﬁce. For more detail, see [5].
4.5
Proof environments
A proof is the contents of a proof environment. For instance,
Proof. This is a proof, delimited by the q.e.d. symbol.
typed as
\begin{proof}
This is a proof, delimited by the q.e.d.\ symbol.
\end{proof}
A proof is set oﬀfrom the surrounding text with some vertical space. The end of
the proof is marked with the symbol
at the end of the line. There are a few examples
of the proof environment in the secondarticle.tex sample article (pages 268–275).
We start with the same rule for proofs as we have for proclamations on page 106.
Rule
Lists in proofs
If a proof starts with a list environment, precede the list by \hfill.
If you want to suppress the symbol at the end of a proof, give the command

112
Chapter 4
Text environments
\begin{proof}
...
\renewcommand{\qedsymbol}{}
\end{proof}
To suppress the end of the proof symbol in the whole article, give the
\renewcommand{\qedsymbol}{}
command in the preamble.
To substitute another phrase for Proof, such as Necessity, as in
Necessity. This is the proof of necessity.
use the proof environment with an optional argument:
\begin{proof}[Necessity]
This is the proof of necessity.
\end{proof}
The optional argument may contain a reference, as in
\begin{proof}[Proof of Theorem~\ref{T:smooth}]
which might be typeset as
Proof of Theorem 5. This is the proof.
It is easy to make the mistake of placing the optional argument after \begin:
\begin[Proof of Theorem~\ref{T:P*}]{proof}
You get a message
! LaTeX Error: Bad math environment delimiter.
l.91 \begin{equation}
\label{E:cong2}
which is not very helpful.
There is a problem with the placement of the q.e.d. symbol if the proof ends with
a displayed formula (or a list environment). For instance,
\begin{proof}
Now the proof follows from the equation
\[
a^2 = b^2 + c^2.
\]
\end{proof}

4.6
Tabular environments
113
typesets as
Proof. Now the proof follows from the equation
𝑎2 = 𝑏2 + 𝑐2.
To correct the placement of the q.e.d. symbol, use the \qedhere command:
\begin{proof}
Now the proof follows from the equation
\[
a^2 = b^2 + c^2.\qedhere
\]
\end{proof}
which typesets as
Proof. Now the proof follows from the equation
𝑎2 = 𝑏2 + 𝑐2.
4.6
Tabular environments
A tabular environment creates a table that LATEX treats as a “large symbol”. In par-
ticular, a table cannot be broken across pages.
Here is a simple table,
Name
1
2
3
Peter
2.45
34.12
1.00
John
0.00
12.89
3.71
David
2.00
1.85
0.71
, typeset inline. This
looks awful, but it does make the point that the table is just a “large symbol”. The
table is typed as
\begin{tabular}{ | l | r | r | r | }
\hline
Name
& 1
& 2
& 3
\\ \hline
Peter
&
2.45 & 34.12 & 1.00\\ \hline
John
&
0.00 & 12.89 & 3.71\\ \hline
David
&
2.00 & 1.85
& 0.71\\ \hline
\end{tabular}

114
Chapter 4
Text environments
Name
1
2
3
Peter
2.45
34.12
1.00
John
0.00
12.89
3.71
David
2.00
1.85
0.71
Table 4.1: Tabular table.
with no blank line before or after the environment.
This table can be horizontally centered with a center environment (see Sec-
tion 4.3). It can also be placed within a table environment (see Section 8.4.3). This sets
the table oﬀfrom the surrounding text with vertical space and you can also use the ﬂoat
controls b, t, h, p to specify where the table should appear (see Section 8.4.3). This
also allows you to deﬁne a caption, which can be placed before or after the table.
\begin{table}
\begin{center}
\begin{tabular}{ | l | r | r | r | }
\hline
Name
& 1
& 2
& 3
\\ \hline
Peter
&
2.45 & 34.12 & 1.00\\ \hline
John
&
0.00 & 12.89 & 3.71\\ \hline
David
&
2.00 & 1.85
& 0.71\\ \hline
\end{tabular}
\caption{Tabular table.}\label{Ta:first}
\end{center}
\end{table}
This table is displayed as Table 4.1. It can be listed in a list of tables (see Section 8.4.3)
and the table number may be referenced using the command \ref{Ta:first}. Note
that the label must be typed between the caption and the \end{table} command.
For another example, look at the two tables in the fonttbl.tex ﬁle in your
samples folder. The ﬁrst is typed as
\begin{tabular}{r|l|l|l|l|l|l|l|l|l|l}
& 0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9\\ \hline
0& \symbol{0} &\symbol{1}&\symbol{2}&\symbol{3}&
\symbol{4}&\symbol{5}&\symbol{6}&\symbol{7}&
\symbol{8}&\symbol{9}\\ \hline
. . .
120& \symbol{120} &\symbol{121}&\symbol{123}&
\symbol{123}&\symbol{124}&\symbol{125}&\symbol{126}

4.6
Tabular environments
115
&\symbol{127} && \\ \hline
\end{tabular}
The second table is the same except that the numbers run from 128 to 255. The typeset
table is shown in Section 3.4.4.
Rule
tabular environments
1. \begin{tabular} requires an argument consisting of a character l, r, or c,
meaning left, right, or center alignment, for each column, and optionally, the | sym-
bols. Each | indicates a vertical line in the typeset table. Spaces in the argument are
ignored but can be used for readability.
2. Columns are separated by ampersands (&) and rows are separated by \\.
3. & absorbs spaces on either side.
4. The \hline command creates a horizontal rule in the typeset table. It is placed
either at the beginning of the table (after the \begin line) or it must follow a \\
command.
5. If you use a horizontal line to ﬁnish the table, you must separate the last row of the
table from the \hline command with the \\ command.
6. \begin{tabular} takes an optional argument, b or t, to specify the bottom or the
top vertical alignment of the table with the baseline. The default is center alignment.
Remember to put the optional argument b or t in square brackets, as in
\begin{tabular}[b]{ | l | r | r | r | }
If you forget to place an \hline command right after \\ in the last row, you get a
message such as
! Misplaced \noalign.
\hline ->\noalign
{\ifnum 0=‘}\fi \hrule \@height
\arrayrulew...
l.9 ....00 & 1.85
& 0.71 \hline
More column-formatting commands
The required argument of the tabular environment may contain column-formatting
commands of various types.
An @-expression, for instance, @{.}, replaces the space LATEX normally inserts
between two columns with its argument. For example,

116
Chapter 4
Text environments
\begin{tabular}{r @{.} l}
3&78\\
4&261\\
4
\end{tabular}
creates a table with two columns separated by a decimal point. In eﬀect, you get a
single, decimal-aligned column:
3.78
4.261
4.
This example is an illustration. You should use David Carlisle’s dcolumn package
if you need a decimal-aligned column (see Section 10.3.1).
The width of a column depends on the entries in the column by default. You can
specify a width by using the p column speciﬁer:
p{width }
For instance, if you want the ﬁrst column of Table 4.1 to be 1 inch wide, then type
\begin{tabular}{ | p{1in} | r | r | r | }\hline
Name
&
1
& 2
& 3
\\ \hline
Peter
&
2.45 & 34.12 & 1.00\\ \hline
John
&
0.00 & 12.89 & 3.71\\ \hline
David
&
2.00 & 1.85
& 0.71\\ \hline
\end{tabular}
which typesets as
Name
1
2
3
Peter
2.45
34.12
1.00
John
0.00
12.89
3.71
David
2.00
1.85
0.71
To center the items in the ﬁrst column, precede each item with a \centering command
(see Section 4.3). Note that the ﬁrst column is actually somewhat over 1 inch wide,
because of the extra space provided around the column boundaries.
The p column speciﬁer can also be used for multiline entries.

4.6
Tabular environments
117
Reﬁnements
\hline draws a horizontal line the whole width of the table. \cline{a-b } draws
a horizontal line from column a to column b. For instance,
\cline{1-3}
or
\cline{4-4}
Another useful command is \multicolumn, which is used to span more than one col-
umn, for example,
\multicolumn{3}{c}{\emph{absent}}
The ﬁrst argument is the number of columns spanned by the entry, the second is the
alignment (an optional vertical line designator | for this row only can also be included),
and the third argument is the entry. Note that the entry for the spanned columns is in
braces. An example is shown in Table 4.2, typed as follows:
\begin{table}[h!]
\begin{center}
\begin{tabular}{ | l | r | r | r | } \hline
Name
& 1
& 2
& 3\\ \hline
Peter
& 2.45 & 34.12 & 1.00\\ \hline
John
& \multicolumn{3}{c |}{\emph{absent}}\\
\hline
David
& 2.00 & 1.85
& 0.71\\ \hline
\end{tabular}
\caption{Table with \bsl\texttt{multicolumn}.}
\label{Ta:mc}
\end{center}
\end{table}
The next example, shown in Table 4.3, uses the \multicolumn and \cline
commands together:
\begin{table}[t]
\begin{center}
\begin{tabular}{ | c
c
| c | r | } \hline
Name
& Month & Week & Amount\\ \hline
Peter & Jan.
& 1
& 1.00\\ \cline{3-4}
&
& 2
& 12.78\\ \cline{3-4}
&
& 3
& 0.71\\ \cline{3-4}
&
& 4
& 15.00\\ \cline{2-4}
& \multicolumn{2}{| l}{Total} & 29.49\\
\hline
John
& Jan.
& 1
& 12.01\\ \cline{3-4}
&
& 2
& 3.10\\ \cline{3-4}

118
Chapter 4
Text environments
&
& 3
& 10.10\\ \cline{3-4}
&
& 4
& 0.00\\ \cline{2-4}
& \multicolumn{2}{| l}{Total} & 25.21\\
\hline
\multicolumn{3}{|l}{Grand Total} & 54.70\\
\hline
\end{tabular}
\caption{Table with \bsl\texttt{multicolumn}
and \bsl\texttt{cline}.}\label{Ta:multicol+cline}
\end{center}
\end{table}
The \parbox command (see Section 3.9.3) can be used to produce a single multi-
line entry. Recall that the ﬁrst argument of \parbox is the width of the box. A p{}
width designator creates a column in which all entries can be multiline. As an example,
to replace Grand Total by Grand Total for Peter and John, type the last line as
\multicolumn{3}{l}{ \parbox[b]{10em}{Grand Total\\
for Peter and John} } & 54.70\\ \hline
Note the use of the bottom alignment option (see Section 3.9.3). The last row of the
Name
1
2
3
Peter
2.45
34.12
1.00
John
absent
David
2.00
1.85
0.71
Table 4.2: Table with \multicolumn.
Name
Month
Week
Amount
Peter
Jan.
1
1.00
2
12.78
3
0.71
4
15.00
Total
29.49
John
Jan.
1
12.01
2
3.10
3
10.10
4
0.00
Total
25.21
Grand Total
54.70
Table 4.3: Table with \multicolumn and \cline.

4.6
Tabular environments
119
modiﬁed table prints
Grand Total
for Peter and John
54.70
The spacing above Grand Total is not quite right. It can be adjusted with a strut
(see Section 3.9.5),
\parbox[b]{10em}{\strut Grand Total\\
for Peter and John:}
Finally, vertical spacing can be adjusted by redeﬁning \arraystretch. For in-
stance, in the table
Area
Students
5th Grade:
63.4 m2
22
6th Grade:
62.0 m2
19
Overall:
62.6 m2
20
typed as
\begin{center}
\begin{tabular}{|r|c|c|}\hline
& \textbf{Area}
& \textbf{Students}\\ \hline
\textbf{5th Grade}: & 63.4 m\textsuperscript{2} &22\\
\hline
\textbf{6th Grade}: & 62.0 m\textsuperscript{2} &19\\
\hline
\textbf{Overall}: & 62.6 m\textsuperscript{2} &20\\
\hline
\end{tabular}
\end{center}
you may ﬁnd that the rows are too crowded. The vertical spacing may be adjusted by
adding the line
\renewcommand{\arraystretch}{1.25}
to the tabular environment. To limit its scope, add it after
\begin{center}

120
Chapter 4
Text environments
The adjusted table is typeset as
Area
Students
5th Grade:
63.4 m2
22
6th Grade:
62.0 m2
19
Overall:
62.6 m2
20
In some tables, horizontal and vertical lines do not always intersect as desired. Fine
control
over
these
intersections
is
provided
by
the
hhline
package
(see
Section 10.3.1).
Chapter 5 of The LATEX Companion, 2nd edition [56] deals with tabular material,
discussing many extensions, including multipage tables, decimal-point alignment, foot-
notes in tables, tables within tables, and so on.
4.6.1
Table styles
LATEX can draw double horizontal and vertical lines in tables with ease. As a result,
there are far too many double lines in LATEX tables, resulting in cluttered and confusing
tables. The Chicago Manual of Style, 15th edition [11] has almost 80 pages on tables.
For simple tables it advocates a simple style, as shown in Table 4.4. Notice
the generous space above and below the column heads, which has been achieved with
the command \rule[-8pt]{0pt}{22pt} \rule[-8pt]{0pt}{22pt}
some extra space above the ﬁrst line of data, which has been achieved with the com-
mand \rule{0pt}{14pt}
the columns of equal width, which has been achieved with p{70pt} commands,
no vertical lines.
Most tables in this book have been designed according to this style using Simon
Fear’s booktabs package (see Section D.1).
Table 4.4: Smokers and Nonsmokers, by Sex.
Smoke
Don’t Smoke
Total
Males
1,258
2,104
3,362
Females
1,194
2,752
3.946
Total
2,452
4,856
7,308

4.7
Tabbing environments
121
4.7
Tabbing environments
Although of limited use for mathematical typesetting, the tabbing environment can
be useful for typing algorithms, computer programs, and so forth. LATEX calculates
the width of a column in the tabular environment based on the widest entry (see
Section 4.6). The tabbing environment allows you to control the width of the columns.
The \\ command is the line separator, tab stops are set by \= and are remembered
by LATEX in the order they are given, and \> moves to the next tab position.
You can easily reset tab positions. For instance, if you are past the second tab
position by using \> twice, and there is a third tab position, the \= command resets it.
Lines of comments may be inserted with the \kill command, see the examples
below, or with the % character. The diﬀerence is that a line with \kill can be used to
set tab stops, whereas a commented out line cannot.
A simple example:
PrintTime
Block[timing],
timing = Timing[expr];
Print[ timing[[1]] ];
]
End[ ]
typed as
{\ttfamily
\begin{tabbing}
Print\=Time\\
\>Block\=[timing,\\
\>\>timing = Timing[expr];\\
(careful with initialization)\kill
\>\>Print[ timing[[1]] ];\\
\>]\\
End[]
\end{tabbing}
}% end \ttfamily
An alternative method is to use a line to set the tab stops, and then \kill the line
so it does not print:
{\ttfamily
\begin{tabbing}
\hspace*{.25in}\=\hspace{2ex}\=\hspace{2ex}\=

122
Chapter 4
Text environments
\hspace{2ex}\kill
\>
$k := 1$\\
\>
$l_k := 0$; $r_k := 1$\\
\>
loop\\
\>
\> $m_k := (l_k + r_k)/2$\\
\>
\> if $w < m_k$ then\\
\>
\>
\> $b_k := 0$; $r_k := m_k$\\
\>
\> else if $w > m_k$ then\\
\>
\>
\> $b_k := 1$; $l_k := m_k$\\
\>
\> end if\\
\>
\> $k := k + 1$\\
\> end loop
\end{tabbing}
}% end \ttfamily
which typesets as
𝑘∶= 1
𝑙𝑘∶= 0; 𝑟𝑘∶= 1
loop
𝑚𝑘∶= (𝑙𝑘+ 𝑟𝑘)∕2
if 𝑤< 𝑚𝑘then
𝑏𝑘∶= 0; 𝑟𝑘∶= 𝑚𝑘
else if 𝑤> 𝑚𝑘then
𝑏𝑘∶= 1; 𝑙𝑘∶= 𝑚𝑘
end if
𝑘∶= 𝑘+ 1
end loop
Some simple rules:
There is no \\ command on a line containing the \kill command.
You may set the tabs in a \kill line with \hspace commands.
The \> command moves to the next tab stop, even if the text you have already typed
extends past that stop, which can result in overprinting.
The tabbing environment has to be typeset with typewriter style font—note the
\ttfamily command.

4.8
Miscellaneous displayed text environments
123
To illustrate the third rule, type
\begin{tabbing}
This is short.\=\\
This is much longer, \> and jumps back.
\end{tabbing}
which typesets as
This is short.
This is much longer, and jumps back.
If you do not follow the fourth rule, be careful with your tabbing. You do not really
have to use typewriter style font—just beware of the pitfalls.
There are a number of packages that help type programming code. I mention here
only two: listings and program. For more information, please consult Chapter 5 of
The LATEX Companion, 2nd edition [56].
4.8
Miscellaneous displayed text environments
There are four more displayed text environments, of limited use in math:
quote, quotation, verse, and verbatim.
We also discuss an inline version of the verbatim environment, the \verb command.
Quotes
The quote environment is used for short (one paragraph) quotations:
which is typed as:
\begin{quote}
It’s not that I’m afraid to die. I just don’t
want to be there when it happens.
\emph{Woody Allen}
Literature is news that STAYS news.
\emph{Ezra Pound}
\end{quote}
Note that multiple quotes are separated by blank lines.

124
Chapter 4
Text environments
Quotations
In the quotation environment, blank lines mark new paragraphs:
is typed as
\begin{quotation}
KATH: Can he be present at the birth of his child?
ED: It’s all any reasonable child can expect
if the dad is present at the conception.
\begin{flushright}
\emph{Joe Orton}
\end{flushright}
\end{quotation}
Verses
A verse environment,
is typed as
\begin{verse}
I think that I shall never see\\
A poem lovely as a tree.
Poems are made by fools like me,\\
But only God can make a tree.
\begin{flushright}
\emph{Joyce Kilmer}

4.8
Miscellaneous displayed text environments
125
\end{flushright}
\end{verse}
Lines are separated by \\ and stanzas by blank lines. Long lines are typeset with
hanging indent.
Verbatim typesetting
Finally, there is the verbatim text environment. You may need it if you write about
LATEX or some other computer programming language or if you have to include portions
of a source ﬁle or user input in your typeset work. Most of the displayed source in this
book was written in a verbatim environment. For instance, you may have to write to
a journal about an article you are proofreading:
Formula (2) in Section 3 should be typed as follows:
\begin{equation}
D = \{ x_0 \mid x_0 \Rightarrow a_1 \} \tag{2}
\end{equation}
Please make the necessary corrections.
The problem is that if you just type
Formula (2) in Section 3 should be typed as follows:
\begin{equation}
D = \{ x_0 \mid x_0 \Rightarrow a_1 \} \tag{2}
\end{equation}
Please make the necessary corrections.
it typesets as
Formula (2) in Section 3 should be typed as follows:
(2)
𝐷= {𝑥0 ∣𝑥0 ⇒𝑎1}
Please make the necessary corrections.
To get the proper typeset form, type it as follows:
Formula (2) in Section 3 should be typed as follows:
\begin{verbatim}
\begin{equation}
D = \{ x_0 \mid x_0 \Rightarrow a_1 \} \tag{2}

126
Chapter 4
Text environments
\end{equation}
\end{verbatim}
Please make the necessary corrections.
Rule
verbatim text environments
A verbatim environment cannot be placed within
Another verbatim environment
The argument of a command
The closing line, \end{verbatim}, must be on a line by itself.
A violation of the ﬁrst rule results in unmatched environment delimiters. You get
an error message such as
! \begin{document} ended by \end{verbatim}.
A violation of the second rule gives an error message such as
! Argument of \@xverbatim has an extra }.
Tip
There are two traps to avoid when using the verbatim environment.
1. If the \end{verbatim} line starts with spaces, a blank line is added to the typeset
version.
2. Any characters following \end{verbatim} on the same line are dropped and you
get a LATEX warning.
To illustrate the ﬁrst trap, type the last two lines of the previous example as follows:
␣\end{verbatim}
Please make the necessary corrections.
Then you ﬁnd an unintended blank line before the last line.
The second trap can be seen if you type the last line of the above example as
\end{verbatim} Please make the necessary corrections.
When typeset, Please make the necessary corrections. does not appear, and you
receive a warning
LaTeX Warning: Characters dropped after
‘\end{verbatim}’ on input line 17.

4.8
Miscellaneous displayed text environments
127
The verbatim package provides several improved versions of the verbatim en-
vironment (see Section 10.3.1). To use this package, include the command
\usepackage{verbatim}
in the preamble. In fact, the rules discussed in this section are those of the verbatim
package.
The verbatim environment has some interesting variants and a number of them
are discussed in Section 3.4 of The LATEX Companion, 2nd edition [56]. For instance,
the alltt package, which is part of the standard LATEX distribution (see Section 10.3)
is used to type the command syntax in this book. See the full syntax of \newtheorem
on page 108 for an example.
Verbatim typesetting inline
The verbatim environment also has an inline version called \verb. Here is an exam-
ple:
Some European e-mail addresses contain \%;
recall that you have to type \verb+\%+ to get \%.
which prints
Some European e-mail addresses contain %; recall that you have to type
\% to get %.
The character following the \verb command is a delimiter. In this example, I have
used +. The argument starts with the character following the delimiter, and it is termi-
nated by the next occurrence of the delimiter. In this example, the argument is \%.
Choose the delimiter character carefully. For instance, if you want to typeset
$\sin(\pi/2 + \alpha)$
verbatim, and you type
\verb+$\sin(\pi/2 + \alpha)$+
then you get the message
! Missing $ inserted.
<inserted text>
$
l.5 \verb+$\sin(\pi/2 + \alpha
)$+
Indeed, the argument of \verb is $\sin(\pi/2 because the second + terminates the
\verb command. Then LATEX tries to typeset \alpha)$+, but cannot because it is not
in math mode. Use another character, such as !, in place of +:
\verb!$\sin(\pi/2 + \alpha)$!

128
Chapter 4
Text environments
Rule
verb command
The entire \verb command must be on a single line of your source ﬁle.
There can be no space between the \verb command and the delimiter.
The \verb command cannot appear in the argument of another command.
The \verb command cannot be used within an aligned math environment.
Do not use * as a delimiter.
If you violate the ﬁrst rule, as in
\verb!$\sin(\pi/2 +
\alpha)$!
you get the message
! LaTeX Error: \verb command ended by end of line.
l.6 \verb!$\sin(\pi/2 +
The \verb command has a *-ed version which prints spaces as ␣symbols. For
example, \today␣the is typed as \verb*+\today the+.
The \verb command can perform the function of the verbatim environment.
The last message, which was displayed in a verbatim environment, may be typed as
follows:
you get the message\\[8pt]
\verb|! LaTeX Error: \verb command ended by end of line.|\\
\verb| |\\
\verb|l.6 \verb!$\sin(\pi/2 +|\\[8pt]
Rule
Simulating verbatim with verb
1. End the line before the verbatim environment with \\[8pt].
2. Each line xxx of the verbatim environment is placed in the construct:
\verb|xxx |
If | occurs in xxx, then choose a diﬀerent delimiter.

4.8
Miscellaneous displayed text environments
129
3. The last line yyy of the verbatim environment is placed in the construct:
\verb|yyy |\\[8pt]
If | occurs in yyy, then choose a diﬀerent delimiter.
However, simulating verbatim with verb takes away the ﬂexibility verbatim pro-
vides in displaying the page.

C H A P T E R
5
Typing math
LATEX was designed for typesetting math. I address this topic in detail.
A math formula can be typeset inline, as part of the current paragraph, or displayed,
on a separate line or lines with vertical space before and after the formula.
In this and the next chapter we discuss formulas that are set inline or displayed on
a single line. In Chapter 7 we address multiline math formulas.
We start with a discussion of LATEX’s basic math environments (Section 5.1), spacing
rules in math (Section 5.2), and continue with the equation environment (Section 5.3).
The basic constructs of a formula—arithmetic (including subscripts and superscripts),
binomial coeﬃcients, ellipses, integrals, roots, and text—are discussed in detail in Sec-
tion 5.4. From the basic constructs of that section, you can build very complicated
formulas, one step at a time. The process is illustrated in Section 5.9.
Delimiters,
operators,
and
math
accents
are
dealt
with
in
Sections
5.5–5.7. In Section 5.8, we discuss three types of stretchable horizontal lines that can
be used above or below a formula: braces, bars, and arrows. There are also stretchable
arrow math symbols.
Section 5.10 is our Formula Gallery, in which you ﬁnd a large number of illustra-
tions, some straightforward, some more imaginative, of the math constructs introduced
in the preceding sections.
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1_5
131

132
Chapter 5
Typing math
5.1
Math environments
A formula in a LATEX document can be typeset inline, like the congruence 𝑎≡𝑏(𝜃) or
the integral ∫∞
−∞𝑒−𝑥2 𝑑𝑥=
√
𝜋, or displayed, as in
𝑎≡𝑏
(𝜃)
or
∫
∞
−∞
𝑒−𝑥2 𝑑𝑥=
√
𝜋
Notice how changing these two formulas from inline to displayed aﬀects their appear-
ance.
Inline and displayed math formulas are typeset using the math environments math
and displaymath, respectively. Because math formulas occur so frequently, LATEX has
abbreviations: the special braces \( and \) or $ are used for the math environment, and
\[ and \] for the displaymath environment. So our inline example may be typed as
$a \equiv b \pod{\theta}$
or
\( a \equiv b \pod{\theta} \)
or
\begin{math}
a \equiv b \pod{\theta}
\end{math}
The displayed example can be typed as
\[
\int_{-\infty}^{\infty} e^{-x^{2}} \, dx = \sqrt{\pi}
\]
or
\begin{displaymath}
\int_{-\infty}^{\infty} e^{-x^{2}} \, dx = \sqrt{\pi}
\end{displaymath}
Using $ as a delimiter for a math environment is a bit of an anomaly, since the
same character is used as both an opening and closing delimiter. This dual purpose use
makes it more diﬃcult for LATEX to diagnose an incorrect use of $. For instance,
Let $a be a real number, and let $f$ be a function.

5.1
Math environments
133
would be interpreted by LATEX as follows:
Let
is ordinary text
$a be a real number, and let $
is math
f
is interpreted as ordinary text
$ be a function.
is thought to be a math environment (opened by $) that
should be closed by the next $ in the paragraph
Because the paragraph ends with no more dollar signs appearing, you get the message
!! Missing $ inserted.
<inserted text>
$
l.29
and giving you the line number of the end of the paragraph. This message tells you that
LATEX would place a $ at the end of the paragraph when it proceeds with the typesetting.
Press Return; LATEX produces the following:
Let 𝑎𝑏𝑒𝑎𝑟𝑒𝑎𝑙𝑛𝑢𝑚𝑏𝑒𝑟, 𝑎𝑛𝑑𝑙𝑒𝑡f𝑏𝑒𝑎𝑓𝑢𝑛𝑐𝑡𝑖𝑜𝑛.
The text that ended up in a math environment is run together because math environments
ignore spaces (see Section 5.2).
If you use \( and \) as special braces for the math environment, LATEX handles
the same mistake more elegantly:
Let \( a be a real number, and let \( f \) be a function.
gives the message
! LaTeX Error: Bad math environment delimiter.
l.25 Let \( a be a real number, and let \(
f \) be a function.
LATEX realizes that the ﬁrst \( opens a math environment, so the second \( must be in
error. In this case, the line number in the message is correct.
Throughout this book, like nearly everyone else, I use $ to delimit inline math.
TEX uses $$ to open and close a displayed math environment. In LATEX, this may
occasionally cause problems. Don’t do it! Try the fleqn document class option of
amsart (see Section 9.5) as an example of what can go wrong.

134
Chapter 5
Typing math
Rule
Math environments
No blank lines are permitted in a math or displaymath environment.
If you violate this rule, LATEX generates a message,
! Missing $ inserted.
<inserted text>
$
...
l.7
where the line number points inside the environment.
Multiline math environments, such as the examples in Sections 1.7.3–1.7.4, are
discussed in Chapter 7.
5.2
Spacing rules
In text, the most important spacing rule is that any number of spaces in the source ﬁle
equals one space in the typeset document. The spacing rule for math mode is even more
straightforward.
Rule
Spacing in math
LATEX ignores spaces in math.
In other words, all spacing in math mode is provided by LATEX. For instance,
$a+b=c$
and
$a + b = c$
are both typeset as 𝑎+ 𝑏= 𝑐.
There are two exceptions to this rule:
1. A space indicating the end of a command name is recognized. For instance, in
$a \quad b$
LATEX does not ignore the space between \quad and b.
2. If you switch back to text mode inside a math formula with a \text command (see
Section 5.4.6), then the text spacing rules apply in the argument of such a command.

5.3
Equations
135
As you see, LATEX provides controls for spaces in typeset math. The spaces you
type in math do not aﬀect the typeset document. But keep this tip in mind.
Tip
Format your source ﬁle so that it is easy to read.
When typing a source ﬁle, the following is good practice:
Place \[ and \] on lines by themselves.
Leave spaces before and after binary operations and binary relations, including the
equal sign.
Indent—by three spaces, for example—the contents of environments so they stand
out.
Keep a formula on a single line of the source ﬁle, if you can.
Develop your own style of typing math, and stick with it.
Tip
The spacing after a comma is diﬀerent in math and text. Do not leave a trailing comma
in inline math.
So do not type
If $a = b,$ then
but move the comma out.
5.3
Equations
An equation is a numbered formula displayed on a single typeset line.
Equations are typed in an equation environment. The equation environment
and displaymath environment are exactly the same except that the equation envi-
ronment assigns a number to the displayed formula
(1)
∫
∞
−∞
𝑒−𝑥2 𝑑𝑥=
√
𝜋
This example is typed as
\begin{equation}\label{E:int}
\int_{-\infty}^{\infty} e^{-x^{2}} \, dx = \sqrt{\pi}
\end{equation}

136
Chapter 5
Typing math
The \label command in the equation environment is optional.
If you use a
\label command, the number assigned to the equation can be referenced with the
\ref command. So
see~(\ref{E:int})
typesets as see (1). Even better, use the \eqref command, which places the parenthe-
ses automatically:
see~\eqref{E:int}
also typesets as see (1). In fact, the \eqref command does more: It typesets the ref-
erence upright, even in italicized or slanted text. For more information about cross-
referencing, see Section 1.7.2.
Analogously, the \upn command forces the use of upright characters for digits,
punctuations, parentheses, etc. LATEX numbers equations consecutively. As a rule,
equations are numbered consecutively throughout articles, whereas in books, number-
ing starts from 1 at the start of each chapter. You may also choose to have equations
numbered within each section—(1.1), (1.2), ..., in Section 1; (2.1), (2.2), ..., in Sec-
tion 2; and so on—by including the command
\numberwithin{equation}{section}
in the preamble of your document (see Section 8.2). “Manual control” of numbering is
discussed in Section 14.5.1, group numbering in Section 7.4.4.
The *-ed form of the equation environment suppresses numbering, so it is equiv-
alent to the displaymath environment (or the special braces \[ and \]).
Rule
Equation environment
1. No blank lines are permitted within an equation or equation* environment.
2. No blank line before the environment.
If you typeset
\begin{equation}\label{E:int}
\int_{-\infty}^{\infty} e^{-x^{2}} \, dx = \sqrt{\pi}
\end{equation}
LATEX generates the familiar, but misleading, message
! Missing $ inserted.

5.4
Basic constructs
137
5.4
Basic constructs
A formula is built by combining various basic constructs. This section discusses the
following constructs:
Arithmetic operations – Subscripts and superscripts
Binomial coeﬃcients
Ellipses
Integrals
Roots
Text
Hebrew and Greek letters
Read carefully the basic constructs important for your work. Additional constructs are
discussed in subsequent sections of this chapter.
5.4.1
Arithmetic operations
The arithmetic operations are typed pretty much as you would expect. To get 𝑎+ 𝑏,
𝑎−𝑏, −𝑎, 𝑎∕𝑏, and 𝑎𝑏, type
$a + b$, $a - b$, $-a$, $a / b$, $a b$
There are two other forms of multiplication and one of division: 𝑎⋅𝑏, 𝑎× 𝑏, and
𝑎÷ 𝑏. They are typed as follows:
$a \cdot b$,
$a \times b$,
$a \div b$
In displayed formulas, fractions are usually typed with the \frac command. To get
1 + 2𝑥
𝑥+ 𝑦+ 𝑥𝑦
type
\[
\frac{1 + 2x}{x + y + xy}
\]
You can use display-style fractions inline with \dfrac, and inline-style fractions
in displayed math environments with \tfrac; for example, 3 + 𝑎2
4 + 𝑏is typed as
$\dfrac{3 + a^{2}}{4 + b}$

138
Chapter 5
Typing math
and
3+𝑎2
4+𝑏
is typed as
\[
\tfrac{3 + a^{2}}{4 + b}
\]
The \dfrac command is often used in matrices whose entries would look too small
with the \frac command. See Formula 20 in the Formula Gallery (Section 5.10) for
an example, and Section 6.7.1 for other fraction variants.
Subscripts and superscripts
Subscripts are typed with _ and superscripts with ^. Remember to enclose the sub-
scripted or superscripted expression in braces:
\[
a_{1},\ a_{i_{1}},\ a^{2},\
a^{b^{c}},\ a^{i_{1}},\
a_{i} + 1,\ a_{i + 1},\ a_{1}^{2},\ a^{2}_{1}
\]
typesets as
𝑎1, 𝑎𝑖1, 𝑎2, 𝑎𝑏𝑐, 𝑎𝑖1, 𝑎𝑖+ 1, 𝑎𝑖+1, 𝑎2
1, 𝑎2
1
For 𝑎𝑏𝑐, type $a^{b^{c}}$, not $a^{b}^{c}$. If you type the latter, you get the
message
! Double superscript.
Similarly, 𝑎𝑏𝑐is typed as $a_{b_{c}}$, not as $a_{b}_{c}$.
In many instances, the braces for the subscripts and superscripts could be omitted,
but you should type them anyway.
Tip
You may safely omit the braces for a subscript or superscript that is a single digit or
letter, as in $a_1$ and $(a + b)^x$, which are typeset as 𝑎1 and (𝑎+ 𝑏)𝑥. Be careful,
however, if you have to edit $a_1$ to make it 𝑎12, then the braces can no longer be
omitted, you must type $a_{12}$ to obtain 𝑎12 because $a_12$ typesets as 𝑎12.
There is one symbol that is automatically superscripted in math mode, the prime,
that is, ’. To get 𝑓′(𝑥), type $f’(x)$. However, to get 𝑓′2 you must type
$f^{\prime 2}$

5.4
Basic constructs
139
Typing ${f’}^{2}$ results in 𝑓′2, with the 2 too high; typing it as $f’^{2}$ causes
a double superscript error. Sometimes you may want a symbol to appear superscripted
or subscripted by itself, as in the phrase
use the symbol † to indicate the dualspace
typed as
use the symbol ${}^{\dagger}$ to indicate the dualspace
where { } is the empty group. The empty group can be used to separate symbols, to
terminate commands, or as the base for subscripting and superscripting.
The \sb and \sp commands also typeset subscripts and superscripts, respectively,
as in
$a\sb{1} - a\sp{x + y}$
which produces 𝑎1 −𝑎𝑥+𝑦. These commands are seldom used, however, except in the
alltt environment (see Section 10.3) and in the Mathematical Reviews of the AMS.
For multiline subscripts and superscripts, see Section 5.6.4.
5.4.2
Binomial coefﬁcients
Binomials are typeset with the \binom command. Here are two examples shown inline,
( 𝑎
𝑏+𝑐
) and ( 𝑛2−1
2
𝑛+1
), and displayed:
(
𝑎
𝑏+ 𝑐
)
and
( 𝑛2−1
2
𝑛+ 1
)
The latter is typed as
\[
\binom{a}{b + c} \text{ and }
\binom{\frac{n^{2} - 1}{2}}{n + 1}
\]
You can use display-style binomials inline with \dbinom, and inline-style bino-
mials in displayed math environments with \tbinom. For example,
(
𝑎
𝑏+ 𝑐
)
is typed
as $\dbinom{a}{b + c}$. See Section 6.7.1 for other variants.
5.4.3
Ellipses
There are two types of ellipsis in math, the low or on-the-line ellipsis, as in
𝐹(𝑥1, 𝑥2, … , 𝑥𝑛)

140
Chapter 5
Typing math
and the centered ellipsis, as in
𝑥1 + 𝑥2 + ⋯+ 𝑥𝑛
These two formulas are typed as
\[
F(x_{1}, x_{2}, \dots, x_{n})
\]
and
\[
x_{1} + x_{2} + \dots + x_{n}
\]
LATEX uses the symbol following a \dots command to decide whether to use a low
or centered ellipsis. If it fails to make the right decision as in
𝛼(𝑥1 + 𝑥2 + … )
typed as
\[
\alpha(x_{1} + x_{2} + \dots)
\]
help LATEX by giving the command \ldots for low and \cdots for centered ellipsis.
So to get the last formula right, type
\[
\alpha(x_{1} + x_{2} + \cdots)
\]
and it typesets correctly:
𝛼(𝑥1 + 𝑥2 + ⋯)
There are ﬁve more variants of the \dots command:
\dotsc for an ellipsis followed by a comma
\dotsb for an ellipsis followed by a binary operation or relation
\dotsm for an ellipsis followed by multiplication
\dotsi for an ellipsis with integrals
\dotso for an “other” ellipsis
These commands not only force the ellipsis to be low or centered, but also adjust the
spacing.
See Section 7.7.1 for an example of vertical dots with the \vdots command and
diagonal dots with the \ddots command.

5.4
Basic constructs
141
5.4.4
Integrals
You have already seen the formula ∫∞
−∞𝑒−𝑥2 𝑑𝑥=
√
𝜋in both inline and displayed
forms in the ﬁrst section of this chapter. The lower limit is typeset as a subscript and
the upper limit is typeset as a superscript. To force the limits below and above the inte-
gral symbol, use the \limits command. The \nolimits command does the reverse.
To typeset
∞
∫
−∞
𝑒−𝑥2 𝑑𝑥=
√
𝜋, type
$\int\limits_{-\infty}^{\infty} e^{-x^{2}} \, dx = \sqrt{\pi}$
See Section 9.5 for a discussion of the intlimits document class option.
There are ﬁve commands to produce variants of the basic integral symbol:
\oint
\iint
\iiint
\iiiint
\idotsint
which typeset as
∮
∬
∭
⨌
∫⋯∫
For complicated bounds, use the \substack command or the subarray environ-
ment (see Section 5.6.4).
5.4.5
Roots
The \sqrt command produces a square root, for instance,
$\sqrt{5}$
typesets as
√
5
$\sqrt{a + 2b + c^{2}}$
typesets as
√
𝑎+ 2𝑏+ 𝑐2
Here is a more interesting example:
√
√
√
√
√1 +
√
√
√
√1 + 1
2
√
1 + 1
3
√
1 + 1
4
√
1 + ⋯
typed as
\[
\sqrt{1 + \sqrt{1 + \frac{1}{2}\sqrt{1 + \frac{1}{3}
\sqrt{1 + \frac{1}{4}\sqrt{1 + \cdots}}}}}
\]
For 𝑛-th roots other than the square root, that is, 𝑛≠2, specify 𝑛with an optional
argument. To get
3√
5, type $\sqrt[3]{5}$.

142
Chapter 5
Typing math
Root reﬁnement
In
𝑔√
5, typed as $\sqrt[g]{5}$, the placement of 𝑔is not very pleasing. LATEX pro-
vides two additional commands to allow you to adjust the position of 𝑔:
\leftroot moves 𝑔to the left—or to the right with a negative argument
\uproot moves 𝑔up—or down with a negative argument
You may prefer one of the following variants:
𝑔√
5
typed as
$\sqrt[\leftroot{2} \uproot{2} g]{5}$
𝑔√
5
typed as
$\sqrt[\uproot{2} g]{5}$
Experiment with \leftroot and \uproot to ﬁnd the best spacing.
Note that LATEX is very ﬁnicky with this optional argument. Typing a space after [,
as in $\sqrt[ \uproot{2} g]{5}$, gives the message
! Package amsmath Error: Invalid use of \uproot.
There may also be problems with vertical spacing under the root symbol (see Sec-
tion 6.5).
5.4.6
Text in math
LATEX allows you to include text in formulas with the \text command. The formula
𝐴= {𝑥∣𝑥∈𝑋𝑖, for some 𝑖∈𝐼}
is typed as
\[
A = \{ x \mid x \in X_{i}, \text{ for some }
i \in I \}
\]
Note that you have to leave space before for and after some inside the argument of
\text. The argument of the \text command is always typeset in a single line.
Sometimes it is more convenient to go into math mode within the argument of a
\text command rather than end the \text and start another, as in
𝐴= {𝑥∣for 𝑥large}
which may be typed as
\[
A = \{ x \mid \text{for $x$ large} \}
\]

5.4
Basic constructs
143
The \text command correctly sizes its argument to match the context. The formula
𝑎left + 2 = 𝑎right
is typed as
\[
a_{\text{left}} + 2 = a_{\text{right}}
\]
Note that \text typesets its argument in the size and shape of the surrounding text.
If you want the text in a formula to be typeset in the document font family (see Sec-
tion 3.6.2) independent of the surrounding text, use
\textnormal{ ... }
or
{\normalfont ...}
For instance, if you have a constant 𝑎right, then in a theorem:
Theorem 1. The constant 𝑎right is recursive in 𝑎.
The subscript is wrong. To get it right, type the constant as
$a_{\normalfont\text{right}}$
Now the theorem typesets as
Theorem 1. The constant 𝑎right is recursive in 𝑎.
Any of the text font commands with arguments (see Section 3.6.3) can also be used in
math formulas. For instance, \textbf uses the size and shape of the surrounding text
to typeset its argument in bold (extended).
Tip
If 𝑎is subscripted l for left, as in 𝑎l, type it as $a_\text{l}$. Unfortunately, many
papers use 𝑎𝑙, typed as $a_l$. The rule is simple:
if in 𝑎l, the character l is text, type it as $a_\text{l}$;
if in 𝑎𝑙, the character 𝑙is a variable, type it as $a_l$.

144
Chapter 5
Typing math
5.4.7
Hebrew and Greek letters
Math uses only four Hebrew letters: ℵ, ℶ, ℸ, ℷ, typed as
\com{aleph}, \com{beth}, \com{daleth}, \com{gimel}
The 26 Greek letters come in lower case and some also in upper case. There is no
upper case 𝛼, because it is the same as the Latin letter A. Seven lower case Greek letter
also come in a variant. For instance, the variant of 𝜙is 𝜑. Tables 5.1 and 5.2 list them
all; see also Section A.1.
Type
Typeset
Type
Typeset
Type
Typeset
\alpha
𝛼
\iota
𝜄
\sigma
𝜎
\beta
𝛽
\kappa
𝜅
\tau
𝜏
\gamma
𝛾
\lambda
𝜆
\upsilon
𝜐
\delta
𝛿
\mu
𝜇
\phi
𝜙
\epsilon
𝜖
\nu
𝜈
\chi
𝜒
\zeta
𝜁
\xi
𝜉
\psi
𝜓
\eta
𝜂
\pi
𝜋
\omega
𝜔
\theta
𝜃
\rho
𝜌
\varepsilon
𝜀
\varpi
𝜛
\varsigma
𝜍
\vartheta
𝜗
\varrho
𝜚
\varphi
𝜑
\digamma
ϝ
\varkappa
𝜘
Table 5.1: Lowercase Greek letters
Type
Typeset
Type
Typeset
Type
Typeset
\Gamma
Γ
\Xi
Ξ
\Phi
Φ
\Delta
Δ
\Pi
Π
\Psi
Ψ
\Theta
Θ
\Sigma
Σ
\Omega
Ω
\Lambda
Λ
\Upsilon
Υ
\varGamma
𝛤
\varXi
𝛯
\varPhi
𝛷
\varDelta
𝛥
\varPi
𝛱
\varPsi
𝛹
\varTheta
𝛩
\varSigma
𝛴
\varOmega
𝛺
\varLambda
𝛬
\varUpsilon
𝛶
Table 5.2: Uppercase Greek letters

5.5
Delimiters
145
5.5
Delimiters
Delimiters are used to enclose some subformulas. In the following formula we use two
delimiters: parentheses and square brackets: $[(a*b)+(c*d)]^2$; this typesets as
[(𝑎∗𝑏) + (𝑐∗𝑑)]2. LATEX knows that parentheses and square brackets are delimiters,
and spaces them accordingly.
The standard delimiters are shown in Table 5.3. Note that delimiters are math
symbols with special spacing rules and you can use them in any way you please, not only
in pairs. LATEX does not stop you from typing \uparrow(x], which typesets as ↑(𝑥].
Observe the diﬀerence in spacing between ||𝑎|| and ‖𝑎‖. The ﬁrst, ||𝑎||, was typed
incorrectly as $|| a ||$. As a result, the vertical bars are too far apart. The second
was typed correctly using the appropriate delimiter commands: $\| a \|$. Here they
are again side-by-side, enlarged:
||𝑎|| ‖𝑎‖
Name
Type
Typeset
left parenthesis
(
(
right parenthesis
)
)
left bracket
[ or \lbrack
[
right bracket
] or \rbrack
]
left brace
\{ or \lbrace
{
right brace
\} or \rbrace
}
backslash
\backslash
∖
forward slash
/
∕
left angle bracket
\langle
⟨
right angle bracket
\rangle
⟩
vertical line
| or \vert
|
double vertical line
\| or \Vert
‖
left ﬂoor
\lfloor
⌊
right ﬂoor
\rfloor
⌋
left ceiling
\lceil
⌈
right ceiling
\rceil
⌉
upward
\uparrow
↑
double upward
\Uparrow
⇑
downward
\downarrow
↓
double downward
\Downarrow
⇓
up-and-down
\updownarrow
↕
double up-and-down
\Updownarrow
⇕
upper-left corner
\ulcorner
⌜
upper-right corner
\urcorner
⌝
lower-left corner
\llcorner
⌞
lower-right corner
\lrcorner
⌟
Table 5.3: Standard delimiters.

146
Chapter 5
Typing math
5.5.1
Stretching delimiters
All delimiters, except the four “corners”, can stretch to enclose the subformula. For
example,
(1
2
)𝛼
is typed as
\[
\left( \frac{1}{2} \right)^{\alpha}
\]
The \left and \right commands instruct LATEX to stretch the parentheses. The gen-
eral construction is
\left delim1 and \right delim2
where delim1 and delim2 are chosen from Table 5.3. They are usually, but not al-
ways, a matching pair—see the examples below. LATEX inspects the formula between
the \left and \right commands and decides what size delimiters to use. The \left
and \right commands must be paired in order for LATEX to know the extent of the
material to be vertically measured. However, we repeat, the delimiters need not be the
same.
If you want to stretch a single delimiter, you have to pair it with a blank delim-
iter, represented by the \left. and \right. commands. Here are some examples of
stretching delimiters:
||||
𝑎+ 𝑏
2
||||
,
‖‖‖𝐴2‖‖‖ ,
(𝑎
2, 𝑏
]
,
𝐹(𝑥)|𝑏
𝑎
typed as
\[
\left| \frac{a + b}{2} \right|, \quad
\left\| A^{2} \right\|,
\quad
\left( \frac{a}{2}, b \right],
\quad
\left. F(x) \right|_{a}^{b}
\]
There are also two convenient abbreviations:
\left<
for
\left\langle
\right> for
\right\rangle
The \left and \right commands have one more use. For the delimiters |, \|,
and all the arrows, the same symbol represents the left and right delimiters, which can
sometimes cause problems as in Example 2 in Section 6.1.4. In such cases, you should
use the \left and \right commands to tell LATEX whether the delimiter is a left or
a right delimiter. LATEX also provides the \lvert and \rvert for | as left and right
delimiter, and \lVert and \rVert for \|.

5.5
Delimiters
147
5.5.2
Delimiters that do not stretch
LATEX provides the \big, \Big, \bigg, and \Bigg commands to produce delimiters of
larger sizes. These delimiters do not stretch. For example,
\[
(\quad \big(\quad \Big(\quad \bigg(\quad \Bigg(
\]
typesets as
(
(
(
(
(
LATEX also provides the more speciﬁc
\bigl, \Bigl, \biggl, \Biggl, \bigr, \Bigr, \biggr, and \Biggr
commands to produce larger left and right delimiters.
For integral evaluation, you can choose one of the following:
𝐹(𝑥)|𝑏
𝑎
𝐹(𝑥)|||
𝑏
𝑎
𝐹(𝑥)|||
𝑏
𝑎
typed as
\[
F(x) |^{b}_{a}
\quad
F(x) \bigr|^{b}_{a}
\quad
F(x) \Bigr|^{b}_{a}
\]
5.5.3
Limitations of stretching
In a number of situations the stretching computed by LATEX is not ideal, so you should
use a larger sized non-stretching variant. Here are some typical examples:
1. Large operators
\[
\left[ \sum_i a_i \right]^{1/p} \quad
\biggl[ \sum_i a_i \biggr]^{1/p}
\]
typesets as
[
∑
𝑖
𝑎𝑖
]1∕𝑝
[∑
𝑖
𝑎𝑖
]1∕𝑝
You may prefer the second version with \biggl[ and \biggr].

148
Chapter 5
Typing math
2. Groupings
\[
\left( (a_1 b_1) - (a_2 b_2) \right)
\left( (a_2 b_1) + (a_1 b_2) \right)
\quad
\bigl( (a_1 b_1) - (a_2 b_2) \bigr)
\bigl( (a_2 b_1) + (a_1 b_2) \bigr)
\]
typesets as
((𝑎1𝑏1) −(𝑎2𝑏2)) ((𝑎2𝑏1) + (𝑎1𝑏2))
((𝑎1𝑏1) −(𝑎2𝑏2))((𝑎2𝑏1) + (𝑎1𝑏2))
You may prefer the clearer groupings provided by \bigl( and \bigr).
3. Inline formulas
The delimiters produced by \left and \right use too much
interline space in |||
𝑏′
𝑑′ |||, typed as
\left\lvert \frac{b’}{d’} \right\rvert
Use \bigl and \bigr to produce delimiters that ﬁt within the normal line spacing:
|||
𝑏′
𝑑′ |||, typed as
\bigl\lvert \frac{b’}{d’} \bigr\rvert
5.5.4
Delimiters as binary relations
The symbol | can be used as a delimiter, as in |𝑥+ 𝑦|, and also as a binary relation, as
in {𝑥∈∣𝑥2 ≤2}. As a binary relation it is typed as \mid. The previous formula is
typed as
$\{ x \in \mathcal{R} \mid x^{2} \leq 2 \}$
\bigm and \biggm produce larger variants, with spacing on either side like binary re-
lations. For example,
{
𝑥
|||| ∫
𝑥
0
𝑡2 𝑑𝑡≤5
}
is typed as
\[
\left\{ x \biggm|\int_{0}^x t^{2}\, dt\leq 5 \right\}
\]

5.6
Operators
149
5.6
Operators
You cannot just type sin x to typeset the sine function in math mode. Indeed,
$sin x$
produces 𝑠𝑖𝑛𝑥instead of sin 𝑥, as you intended. Type this function as
$\sin x$
The \sin command prints sin with the proper style and spacing. LATEX calls \sin an
operator or log-like function.
5.6.1
Operator tables
There are two types of operators:
1. Operators without limits, such as \sin
2. Operators with limits, such as \lim, that take a subscript in inline mode and a “limit”
in displayed math mode. For example, lim𝑥→0 𝑓(𝑥) = 1 is typed as
$\lim_{x \to 0}
f(x) = 1$
The same formula displayed,
lim
𝑥→0 𝑓(𝑥) = 1
is typed as
\[
\lim_{x \to 0} f(x) = 1
\]
The operators are listed in Tables 5.4 and 5.5 (see also Section A.6). The entries
in the last two rows of Table 5.5 can be illustrated by
lim
𝑥→0
lim
𝑥→0
lim
←←←←←←←←←←→
𝑥→0
lim
←←←←←←←←←←←
𝑥→0
Type
Typeset
Type
Typeset
Type
Typeset
Type
Typeset
\arccos
arccos
\cot
cot
\hom
hom
\sin
sin
\arcsin
arcsin
\coth
coth
\ker
ker
\sinh
sinh
\arctan
arctan
\csc
csc
\lg
lg
\tan
tan
\arg
arg
\deg
deg
\ln
ln
\tanh
tanh
\cos
cos
\dim
dim
\log
log
\cosh
cosh
\exp
exp
\sec
sec
Table 5.4: Operators without limits.

150
Chapter 5
Typing math
Type
Typeset
Type
Typeset
\det
det
\limsup
lim sup
\gcd
gcd
\max
max
\inf
inf
\min
min
\lim
lim
\Pr
Pr
\liminf
lim inf
\sup
sup
\injlim
inj lim
\projlim
proj lim
\varliminf
lim
\varlimsup
lim
\varinjlim
lim
←←←←←←←←←←→
\varprojlim
lim
←←←←←←←←←←←
Table 5.5: Operators with limits.
which are typed as
\[
\varliminf_{x \to 0} \quad
\varlimsup_{x \to 0}
\quad
\varinjlim_{x \to 0} \quad
\varprojlim_{x \to 0}
\]
The following examples illustrate some more entries from Table 5.5:
inj lim
𝑥→0
lim inf
𝑥→0
lim sup
𝑥→0
proj lim
𝑥→0
These operators were typed as
\[
\injlim_{x \to 0} \quad \liminf_{x \to 0} \quad
\limsup_{x \to 0} \quad \projlim_{x \to 0}
\]
You can force the limits in a displayed formula into the subscript position with the
\nolimits command. For example, the formulas
inj lim𝑥→0
lim inf𝑥→0
lim sup𝑥→0
proj lim𝑥→0
are typed as
\[
\injlim\nolimits_{x \to 0} \quad
\liminf\nolimits_{x \to 0} \quad
\limsup\nolimits_{x \to 0} \quad
\projlim\nolimits_{x \to 0}
\]

5.6
Operators
151
5.6.2
Congruences
\mod is a special operator used for congruences. Congruences are usually typeset using
the \pmod or \pod variant. There is also the \bmod command, which is used as a binary
operation. All four commands are shown in Table 5.6.
See Sections 14.1.2 and 14.1.9 for a discussion of related custom commands.
Type
Typeset
$a \equiv v \mod{\theta}$
𝑎≡𝑣mod 𝜃
$a \bmod b$
𝑎mod 𝑏
$a \equiv v \pmod{\theta}$
𝑎≡𝑣(mod 𝜃)
$a \equiv v \pod{\theta}$
𝑎≡𝑣(𝜃)
Table 5.6: Congruences.
5.6.3
Large operators
Here is a sum typeset inline, ∑𝑛
𝑖=1 𝑥2
𝑖, and displayed,
𝑛
∑
𝑖=1
𝑥2
𝑖
In the latter form, the sum symbol is larger. Operators that behave in this way are called
large operators. Table 5.7 gives a complete list of large operators.
You can use the \nolimits command if you wish to show the limits of large
operators as subscripts and superscripts in a displayed math environment.
The formula
⨆
𝔪𝑋= 𝑎
is typed as
\[
\bigsqcup\nolimits_{ \mathfrak{m} } X = a
\]
You can use the \limits command if you wish to show the limits of large opera-
tors below and above the operator symbol in an inline math environment. For example,
⨆
𝔪
𝑋= 𝑎is typed as
$\bigsqcup\limits_{ \mathfrak{m} } X = a$
Sums and products are very important constructs. The examples
𝑧𝑑−𝑧𝑑
0
𝑧−𝑧0
=
𝑑
∑
𝑘=1
𝑧𝑘−1
0
𝑧𝑑−𝑘
and
(𝑇𝑛)′(𝑥0) =
𝑛−1
∏
𝑘=0
𝑇′(𝑥𝑘)
are typed as

152
Chapter 5
Typing math
Type
Inline
Displayed
\int_{a}^{b}
∫𝑏
𝑎
∫
𝑏
𝑎
\oint_{a}^{b}
∮𝑏
𝑎
∮
𝑏
𝑎
\iint_{a}^{b}
∬𝑏
𝑎
∬
𝑏
𝑎
\iiint_{a}^{b}
∭𝑏
𝑎
∭
𝑏
𝑎
\iiiint_{a}^{b}
⨌𝑏
𝑎
⨌
𝑏
𝑎
\idotsint_{a}^{b}
∫··· ∫𝑏
𝑎
∫⋯∫
𝑏
𝑎
\prod_{i=1}^{n}
∏𝑛
𝑖=1
𝑛
∏
𝑖=1
\coprod_{i=1}^{n}
∐𝑛
𝑖=1
𝑛
∐
𝑖=1
\bigcap_{i=1}^{n}
⋂𝑛
𝑖=1
𝑛
⋂
𝑖=1
\bigcup_{i=1}^{n}
⋃𝑛
𝑖=1
𝑛
⋃
𝑖=1
\bigwedge_{i=1}^{n}
⋀𝑛
𝑖=1
𝑛
⋀
𝑖=1
\bigvee_{i=1}^{n}
⋁𝑛
𝑖=1
𝑛
⋁
𝑖=1
\bigsqcup_{i=1}^{n}
⨆𝑛
𝑖=1
𝑛⨆
𝑖=1
\biguplus_{i=1}^{n}
⨄𝑛
𝑖=1
𝑛
⨄
𝑖=1
\bigotimes_{i=1}^{n}
⨂𝑛
𝑖=1
𝑛
⨂
𝑖=1
\bigoplus_{i=1}^{n}
⨁𝑛
𝑖=1
𝑛
⨁
𝑖=1
\bigodot_{i=1}^{n}
⨀𝑛
𝑖=1
𝑛
⨀
𝑖=1
\sum_{i=1}^{n}
∑𝑛
𝑖=1
𝑛
∑
𝑖=1
Table 5.7: Large operators.

5.6
Operators
153
\[
\frac{z^{d} - z_{0}^{d}}
{z - z_{0}} =
\sum_{k = 1}^{d} z_{0}^{k - 1} z^{d - k}
\text{\quad and\quad}
(T^{n})’(x_{0}) = \prod_{k=0}^{n - 1} T’(x_{k})
\]
5.6.4
Multiline subscripts and superscripts
The \substack command provides multiline limits for large operators. For instance,
∑
𝑖<𝑛
𝑖even
𝑥2
𝑖
is typed as
\[
\sum_{ \substack{ i < n\\
i \text{ even} } }
x_{i}^{2}
\]
There is only one rule to remember. Use the line separator command \\. You can use
the \substack command wherever subscripts or superscripts are used.
The lines are centered by \substack, so if you want them set ﬂush left, as in
∑
𝑖<𝑛
𝑖even
𝑥2
𝑖
then use the subarray environment with the argument l:
\[
\sum_{ \begin{subarray}{l}
i < n\\
i \text{ even}
\end{subarray} }
x_{i}^{2}
\]
See Section 14.1.6 for another example.

154
Chapter 5
Typing math
5.7
Math accents
The accents used in text (see Section 3.4.7) cannot be used in math formulas.
For accents in formulas a separate set of commands is provided.
All math
accents are shown in Table 5.8 (see also Section A.8). The amsxtra package is
needed for the accents in the second column. To use them, make sure to place
in the preamble the line
\usepackage{amsxtra}
You can also use double accents, such as
amsxtra
Type
Typeset
Type
Typeset
\acute{a}
́𝑎
\bar{a}
̄𝑎
\breve{a}
̆𝑎
\spbreve
˘
\check{a}
̌𝑎
\spcheck
∨
\dot{a}
̇𝑎
\spdot
.
\ddot{a}
̈𝑎
\spddot
..
\dddot{a}
⃛𝑎
\spdddot
...
\ddddot{a}
⃜𝑎
\grave{a}
̀𝑎
\hat{a}
̂𝑎
\widehat{a}
̂𝑎
\sphat
̂
\mathring{a}
̊𝑎
\tilde{a}
̃𝑎
\widetilde{a}
̃𝑎
\sptilde
∼
\vec{a}
⃗𝑎
Table 5.8: Math accents
\[
\hat{\hat{A}}
\]
which typesets as ̂̂𝐴.
The two “wide” varieties, \widehat and \widetilde, expand to ﬁt the
symbols (their arguments) covered: ̂𝐴, ̂𝑎𝑏, ̂𝑖𝑖𝑖, ̂
𝑎𝑖𝑎𝑖, ̂
𝑖𝑖𝑖𝑖𝑖, and ̃𝐴, ̃𝑎𝑏, ̃𝑖𝑖𝑖, ̃
𝑎𝑖𝑎𝑖, ̃
𝑖𝑖𝑖𝑖𝑖
(the last example is typed as $\widetilde{iiiii}$). If the base is too wide,
the accent is centered:
̂
𝐴𝐵𝐶𝐷𝐸

5.8
Stretchable horizontal lines
155
The “sp” commands, provided by the amsxtra package, are used for super-
scripts, as illustrated in Table 5.8. If you use a lot of accented characters, you
should appreciate custom commands (see Section 14.1.1).
Notice the diﬀerence between ̄𝑎and 𝑎, typed as
$\bar{a}$ $\overline{a}$
For other examples of the \overline command, see Section 5.8.2.
To use an arbitrary symbol as an accent or to create “underaccents”, use
Javier Bezos’ accents package.
5.8
Stretchable horizontal lines
LATEX provides three types of stretchable horizontal lines that appear above or
below a formula, braces, bars, and arrows. There are also stretchable arrow
math symbols.
5.8.1
Horizontal braces
The \overbrace command places a brace of variable size above its argument,
as in
⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞
𝑎+ 𝑏+ ⋯+ 𝑧
which is typed as
\[
\overbrace{a + b + \dots + z}
\]
A superscript adds a label to the brace, as in
𝑛
⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞
𝑎+ 𝑎+ ⋯+ 𝑎
which is typed as
\[
\overbrace{a + a + \dots + a}^{n}
\]
The \underbrace command works similarly, placing a brace below its ar-
gument. A subscript adds a label to the brace, as in
𝑎+ 𝑎+ ⋯+ 𝑎
⏟⏞⏞⏞⏞⏞⏞⏟⏞⏞⏞⏞⏞⏞⏟
𝑛
which is typed as

156
Chapter 5
Typing math
\[
\underbrace{a + a + \dots + a}_{n}
\]
The following example combines these two commands:
(𝑚−𝑛)∕2
⏞⏞⏞⏞⏞⏞⏞
𝑎+ ⋯+ 𝑎+ 𝑏+ ⋯+ 𝑏
⏟⏞⏞⏟⏞⏞⏟
𝑛
+
(𝑚−𝑛)∕2
⏞⏞⏞⏞⏞⏞⏞
𝑎+ ⋯+ 𝑎
⏟⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏟⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏟
𝑚
This example is typed as
\[
\underbrace{
\overbrace{a + \dots + a}^{(m - n)/2}
+ \underbrace{b + \dots + b}_{n}
+ \overbrace{a + \dots + a}^{(m - n)/2}
}_{m}
\]
5.8.2
Overlines and underlines
The \overline and \underline commands draw lines above or below a formula.
For example,
𝑋∪𝑋= 𝑋
is typed as
\[
\overline{ \overline{X} \cup \overline{\overline{X}} }
= \overline{ \overline{X} }
\]
Similarly, you can place arrows above and below an expression:
⃖⃖𝑎
⃖⃖⃖⃗
𝑎𝑎
⃖⃖⃖⃖⃖⃗
𝑎𝑎𝑎
𝑎𝑎𝑎𝑎
⃖⃖⃖⃖⃖⃖⃖⃖⃖
𝑎𝑎𝑎𝑎𝑎
⃖⃖⃖⃖⃖⃖⃖⃖⃖⃖⃗
𝑎𝑎𝑎𝑎𝑎𝑎
⃖⃖⃖⃖⃖⃖⃖⃖⃖⃖⃖⃖⃗
which is typed as
\begin{gather*}
\overleftarrow{a}
\quad \overrightarrow{aa}\\
\overleftrightarrow{aaa} \quad \underleftarrow{aaaa}\quad
\underrightarrow{aaaaa}
\quad \underleftrightarrow{aaaaaa}
\end{gather*}

5.9
Building a formula step-by-step
157
5.8.3
Stretchable arrow math symbols
There are two stretchable arrow math symbols that extend to accommodate a
formula above or below the arrows with the \xleftarrow and \xrightarrow
commands. The formula on top is given as the argument (possibly empty) and
the formula below is an optional argument.
𝐴
1-1
←←←←←←←←←←←←←→𝐵
onto
←←←←←←←←←←←←←←←←←←←
𝛼→𝛽𝐶←←←←←←←
𝛾𝐷←←←𝐸
is typed as
\[
A \xrightarrow{\text{1-1}} B \xleftarrow[\alpha\to\beta]
{\text{onto}} C \xleftarrow[\gamma]{} D \xleftarrow{} E
\]
There are other stretchable arrow math symbols described in Section 7.8, but
they can only be used in commutative diagrams. See Section 13.4 for the TikZ
arrows and the tikz-cd package arrows.
5.9
Building a formula step-by-step
It is easy to build complex formulas from the components described in this
section. Try the formula
[ 𝑛
2
]
∑
𝑖=1
(𝑥𝑖2
𝑖,𝑖+1
[
𝑖+3
3
]
)
√
𝜇(𝑖)
3
2 (𝑖2 −1)
3√
𝜌(𝑖) −2 +
3√
𝜌(𝑖) −1
We build this formula in several steps. Create a new ﬁle in your work folder.
Name it formula.tex, type in the following lines, and save it:
%File: formula.tex
\documentclass{sample}
\begin{document}
\end{document}
At present, the ﬁle has an empty document environment. Type each part of the
formula as an inline or displayed formula within this environment, so that you
can typeset the document and check for errors.
Step 1
We start with
[
𝑛
2
]
. Type the following line into formula.tex:
$\left[ \frac{n}{2} \right]$
and test it by typesetting the document.

158
Chapter 5
Typing math
Step 2
Now you can do the sum
[ 𝑛
2
]
∑
𝑖=1
For the superscript, you can copy and paste the formula created in Step 1
(without the dollar signs), so that you have
\[
\sum_{i = 1}^{ \left[ \frac{n}{2} \right] }
\]
Step 3
Next, do the two formulas in the binomial
𝑥𝑖2
𝑖,𝑖+1
[𝑖+ 3
3
]
Type them as separate formulas in formula.tex:
\[
x_{i, i + 1}^{i^{2}}\qquad\left[ \frac{i + 3}{3} \right]
\]
Step 4
Now it is easy to do the binomial. Piece together the following for-
mula by copying and pasting the previous formulas and dropping the \qquad
command:
\[
\binom{x_{i,i + 1}^{i^{2}}}{\left[\frac{i + 3}{3}\right]}
\]
which typesets as
(𝑥𝑖2
𝑖,𝑖+1
[
𝑖+3
3
]
)
Step 5
Next, type the formula under the square root, 𝜇(𝑖)
3
2 (𝑖2 −1):
$\mu(i)^{ \frac{3}{2} } (i^{2} - 1)$
and then the square root,
√
𝜇(𝑖)
3
2 (𝑖2 −1):
$\sqrt{ \mu(i)^{ \frac{3}{2} } (i^{2} - 1) }$
Step 6
The two cube roots,
3√
𝜌(𝑖) −2 and
3√
𝜌(𝑖) −1, are easy to type:
$\sqrt[3]{ \rho(i) - 2 }$
$\sqrt[3]{ \rho(i) - 1 }$

5.9
Building a formula step-by-step
159
Step 7
Now the fraction
√
𝜇(𝑖)
3
2 (𝑖2 −1)
3√
𝜌(𝑖) −2 +
3√
𝜌(𝑖) −1
is typed, copied, and pasted together as
\[
\frac{ \sqrt{ \mu(i)^{ \frac{3}{2}} (i^{2} -1) } }
{ \sqrt[3]{\rho(i) - 2} + \sqrt[3]{\rho(i) - 1} }
\]
Step 8
Finally, the whole formula,
[ 𝑛
2
]
∑
𝑖=1
(𝑥𝑖2
𝑖,𝑖+1
[
𝑖+3
3
]
)
√
𝜇(𝑖)
3
2 (𝑖2 −1)
3√
𝜌(𝑖) −2 +
3√
𝜌(𝑖) −1
is formed by copying and pasting the pieces together, leaving only one pair of
displayed math delimiters:
\[
\sum_{i = 1}^{ \left[ \frac{n}{2} \right] }
\binom{ x_{i, i + 1}^{i^{2}} }
{ \left[ \frac{i + 3}{3} \right] }
\frac{ \sqrt{ \mu(i)^{ \frac{3}{2}} (i^{2} - 1) } }
{\sqrt[3]{\rho(i)-2} + \sqrt[3]{\rho(i) - 1}}
\]
Note the use of
Hierarchical indentation, to keep track of the structure of the formula
Spacing to help highlight the braces—some text editors help you balance
braces
Separate lines for the various pieces of formulas that are more than a line long
It is to your advantage to keep your source ﬁle readable. LATEX does not
care how its input is formatted, and would happily accept the following:
\[\sum_{i=1}^{\left[\frac{n}{2}\right]}\binom{x_{i,i+1}
^{i^{2}}}{\left[\frac{i+3}{3}\right]}\frac{\sqrt{\mu(i)
^{\frac{3}{2}}(i^{2}-1)}}{\sqrt[3]{\rho(i)-2}+\sqrt[3]
{\rho(i)-1}}\]
But this haphazard style not only makes it more diﬃcult for your coauthors or
editor to work with your source ﬁle, it also makes ﬁnding mistakes diﬃcult. Try
to ﬁnd the error in the next version:

160
Chapter 5
Typing math
\[\sum_{i=1}^{\left[\frac{n}{2}\right]}
\binom{x_{i,i+1}^{i^{2}}}{\left[\frac{i+3}{3}\right]}
\frac{\sqrt{\mu(i)^{\frac{3}{2}}}(i^{2}-1)}}{\sqrt[3]
{\rho(i)-2}+\sqrt[3]{\rho(i)-1}}\]
Answer: \frac{3}{2 should be followed by }} and not by }}}.
5.10
Formula Gallery
In this section I present a collection of formulas—some simple, some complex—
that illustrate the power of LATEX.
Some of these examples require the amssymb package, so it is a good idea
to include the line
\usepackage{amssymb,latexsym}
following the \documentclass line of any article.
Formula 1
A set-valued function
𝑥↦{𝑐∈𝐶∣𝑐≤𝑥}
\[
x \mapsto \{ c \in C \mid c \leq x \}
\]
Formula 2
|||
⋃
(𝐼𝑗∣𝑗∈𝐽)||| < 𝔪
\[
\left| \bigcup ( I_{j} \mid j \in J ) \right| < \mathfrak{m}
\]
We use the delimiters \left| and \right|, see Section 5.5.1. The Fraktur 𝔪
is introduced in Section 6.4.2.
Formula 3
Note that you have to add spacing both before and after the text
fragment in the following example. The argument of \text is typeset in text
mode, so spaces are recognized.
𝐴= {𝑥∈𝑋∣𝑥∈𝑋𝑖, for some 𝑖∈𝐼}
\[
A = \{ x \in X \mid x \in X_{i},
\text{ for some $i \in I$} \}
\]

5.10
Formula Gallery
161
Formula 4
Space to show logical structure:
⟨𝑎1, 𝑎2⟩≤⟨𝑎′
1, 𝑎′
2⟩
iff
𝑎1 < 𝑎′
1
or
𝑎1 = 𝑎′
1 and 𝑎2 ≤𝑎′
2
\[
\langle a_{1}, a_{2} \rangle \leq
\langle a’_{1}, a’_{2}\rangle \qquad \text{if{f}}
\qquad a_{1} < a’_{1} \quad \text{or}
\quad a_{1} = a’_{1} \text{ and } a_{2} \leq a’_{2}
\]
Note that in if{f} (in the argument of the ﬁrst \text) the second f is enclosed
in braces to avoid the use of the ligature—the merging of the two f’s. For the
proper way of typesetting iff without a ligature, see Section 3.4.6.
Formula 5
Here are some examples of Greek letters:
Γ𝑢′ = {𝛾∣𝛾< 2𝜒, 𝐵𝛼⊈𝑢′, 𝐵𝛾⊆𝑢′}
\[
\Gamma_{u’} = \{\gamma \mid \gamma < 2\chi,\ B_{\alpha}
\nsubseteq u’, \ B_{\gamma} \subseteq u’ \}
\]
See Section A.1 for a complete listing of Greek letters. We use the command \␣
to properly space the formula. This command can be used both in text and in
math.
Formula 6
\mathbb allows you to use the blackboard bold math alphabet,
which only provides capital letters:
𝐴= 𝐵2 × ℤ
\[
A = B^{2} \times \mathbb{Z}
\]
Formula 7
\left[ and \right] provide stretched delimiters:
𝑦𝐶≡𝑧∨
⋁
𝑖∈𝐶
[
𝑠𝐶
𝑖
]
(mod Φ)
\[
y^C \equiv z \vee \bigvee_{ i \in C } \left[ s_{i}^{C}
\right] \pmod{ \Phi }
\]
Notice how the superscript is set directly above the subscript in 𝑠𝐶
𝑖.

162
Chapter 5
Typing math
Formula 8
A complicated congruence:
𝑦∨
⋁
([𝐵𝛾] ∣𝛾∈Γ) ≡𝑧∨
⋁
([𝐵𝛾] ∣𝛾∈Γ)
(mod Φ𝑥)
\[
y \vee \bigvee ( [B_{\gamma}] \mid \gamma
\in \Gamma ) \equiv z \vee \bigvee ( [B_{\gamma}]
\mid \gamma \in \Gamma ) \pmod{ \Phi^{x} }
\]
Formula 9
Use \nolimits to force the “limit” of the large operator to display
as a subscript (see Section 5.6.3):
𝑓(𝐱) =
⋁
𝔪
(⋀
𝔪(𝑥𝑗∣𝑗∈𝐼𝑖) ∣𝑖< ℵ𝛼
)
\[
f(\mathbf{x}) =
\bigvee\nolimits_{\!\mathfrak{m}}
\left(
\bigwedge\nolimits_{\mathfrak{m}}
( x_{j} \mid j \in I_{i} )
\mid i < \aleph_{\alpha}
\right)
\]
Notice that I inserted a negative space (\!) to bring the 𝔪a little closer to the
big join symbol ⋁.
Formula 10
The \left. command gives a blank left delimiter, which is needed
to balance the \right| command:
̂𝐹(𝑥)|||
𝑏
𝑎= ̂𝐹(𝑏) −̂𝐹(𝑎)
\[
\left. \widehat{F}(x) \right|_{a}^{b}
= \widehat{F}(b) - \widehat{F}(a)
\]
Formula 11
The \underset and \overset commands build new symbols (see
Section 6.3.1):
𝑢+
𝛼𝑣
1∼𝑤
2∼𝑧
\[
u \underset{\alpha}{+} v \overset{1}{\thicksim} w
\overset{2}{\thicksim} z
\]
Note that the new symbols
1∼and
2∼are binary relations and +
𝛼is a binary
operation.

5.10
Formula Gallery
163
Formula 12
Small size bold def:
𝑓(𝑥)
𝐝𝐞𝐟
= 𝑥2 −1
\[
f(x) \overset{ \mathbf{def} }{ = } x^{2} - 1
\]
Formula 13
Math accents run amok:
̆̆𝑛
⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞⏞
𝑎∨+ 𝑏∨+ ⋯+ 𝑧∨
\[
\overbrace{a\spcheck + b\spcheck + \dots + z\spcheck}^
{\breve{\breve{n}}}
\]
Recall that for the \sp commands you need the amsxtra package.
Formula 14
|||||
𝑎+ 𝑏+ 𝑐
𝑢𝑣
𝑎+ 𝑏
𝑐+ 𝑑
|||||
= 7
\[
\begin{vmatrix}
a + b + c & uv\\
a + b & c + d
\end{vmatrix}
= 7
\]
‖‖‖‖‖
𝑎+ 𝑏+ 𝑐
𝑢𝑣
𝑎+ 𝑏
𝑐+ 𝑑
‖‖‖‖‖
= 7
\[
\begin{Vmatrix}
a + b + c & uv\\
a + b & c + d
\end{Vmatrix}
= 7
\]

164
Chapter 5
Typing math
Formula 15
𝜶2 ∑
𝑗∈𝐍
𝑏𝑖𝑗̂𝑦𝑗=
∑
𝑗∈𝐍
𝑏(𝜆)
𝑖𝑗̂𝑦𝑗+ (𝑏𝑖𝑖−𝜆𝑖) ̂𝑦𝑖̂𝑦
\[
\boldsymbol{\alpha}^2\sum_{j \in \mathbf{N}} b_{ij}
\hat{y}_{j} = \sum_{j \in \mathbf{N}}
b^{(\lambda)}_{ij}\hat{y}_{j}
+ (b_{ii} - \lambda_{i}) \hat{y}_{i} \hat{y}
\]
\mathbf{N} makes a bold 𝐍and \boldsymbol{\alpha} produces a bold 𝜶(see
Section 6.4.2).
Formula 16
To produce the formula
( 𝑛
∏
𝑗=1
̂𝑥𝑗
)
𝐻𝑐= 1
2
̂𝑘𝑖𝑗det ̂𝐊(𝑖|𝑖)
try typing
\[
\left( \prod^n_{j = 1} \hat{ x }_{j} \right) H_{c}=
\frac{1}{2} \hat{k}_{ij} \det \hat{ \mathbf{K} }(i|i)
\]
which typesets as
( 𝑛
∏
𝑗=1
̂𝑥𝑗
)
𝐻𝑐= 1
2
̂𝑘𝑖𝑗det ̂𝐊(𝑖|𝑖)
This is not quite right. You can correct the overly large parentheses by using the
\biggl and \biggr commands in place of \left( and \right), respectively
(see Section 5.5.2). Adjust the small hat over 𝐊by using \widehat:
\[
\biggl( \prod^n_{ j = 1} \hat{ x }_{j} \biggr)
H_{c} = \frac{1}{2}\hat{ k }_{ij}
\det \widehat{ \mathbf{K} }(i|i)
\]
which gives you the desired formula.
Formula 17
In this formula, I have used \overline{I} to get 𝐼. You could,
instead, use \bar{I}, which is typeset as ̄𝐼.
det 𝐊(𝑡= 1, 𝑡1, … , 𝑡𝑛) =
∑
𝐼∈𝐧
(−1)|𝐼| ∏
𝑖∈𝐼
𝑡𝑖
∏
𝑗∈𝐼
(𝐷𝑗+ 𝜆𝑗𝑡𝑗) det 𝐀(𝜆)(𝐼|𝐼) = 0

5.10
Formula Gallery
165
\[
\det \mathbf{K} (t = 1, t_{1}, \dots, t_{n}) =
\sum_{I \in \mathbf{n} }(-1)^{|I|} \prod_{i \in I}t_{i}
\prod_{j \in I} (D_{j} + \lambda_{j} t_{j})
\det \mathbf{A}^{(\lambda)}
(\overline{I} | \overline{I}) = 0
\]
Formula 18
The command \| provides the ‖ math symbol in this formula:
lim
(𝑣,𝑣′)→(0,0)
𝐻(𝑧+ 𝑣) −𝐻(𝑧+ 𝑣′) −𝐵𝐻(𝑧)(𝑣−𝑣′)
‖𝑣−𝑣′‖
= 0
\[
\lim_{(v, v’) \to (0, 0)}
\frac{H(z + v) - H(z + v’) - BH(z)(v - v’)}
{\| v - v’ \|} = 0
\]
Formula 19
This formula uses the calligraphic math alphabet (introduced in
Section 6.4.2):
∫
|𝜕𝑢|2Φ0(𝑧)𝑒𝛼|𝑧|2 ≥𝑐4𝛼∫
|𝑢|2Φ0𝑒𝛼|𝑧|2 + 𝑐5𝛿−2
∫𝐴
|𝑢|2Φ0𝑒𝛼|𝑧|2
\[
\int_{\mathcal{D}} | \overline{\partial u} |^{2}
\Phi_{0}(z) e^{\alpha |z|^2}
\geq c_{4} \alpha \int_{\mathcal{D}} |u|^{2}\Phi_{0}
e^{\alpha |z|^{2}}
+ c_{5} \delta^{-2} \int_{A} |u|^{2}
\Phi_{0} e^{\alpha |z|^{2}}
\]
Formula 20
The \hdotsfor command sets dots that span multiple columns in
a matrix. The \dfrac command is the displayed variant of the \frac command
(see Section 5.4.1), used here because the matrix entries with \frac would look
too small.
𝐀=
⎛
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜⎝
𝜑⋅𝑋𝑛,1
𝜑1 × 𝜀1
(𝑥+ 𝜀2)2
⋯
(𝑥+ 𝜀𝑛−1)𝑛−1
(𝑥+ 𝜀𝑛)𝑛
𝜑⋅𝑋𝑛,1
𝜑2 × 𝜀1
𝜑⋅𝑋𝑛,2
𝜑2 × 𝜀2
⋯
(𝑥+ 𝜀𝑛−1)𝑛−1
(𝑥+ 𝜀𝑛)𝑛
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
𝜑⋅𝑋𝑛,1
𝜑𝑛× 𝜀1
𝜑⋅𝑋𝑛,2
𝜑𝑛× 𝜀2
⋯
𝜑⋅𝑋𝑛,𝑛−1
𝜑𝑛× 𝜀𝑛−1
𝜑⋅𝑋𝑛,𝑛
𝜑𝑛× 𝜀𝑛
⎞
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟⎠
+ 𝐈𝑛

166
Chapter 5
Typing math
\[
\mathbf{A} =
\begin{pmatrix}
\dfrac{\varphi \cdot X_{n, 1}} {\varphi_{1} \times
\varepsilon_{1}} & (x + \varepsilon_{2})^{2}
& \cdots & (x + \varepsilon_{n - 1})^{n - 1}
& (x + \varepsilon_{n})^{n}\\[10pt]
\dfrac{\varphi \cdot X_{n, 1}} {\varphi_{2} \times
\varepsilon_{1}} & \dfrac{\varphi \cdot X_{n, 2}}
{\varphi_{2} \times \varepsilon_{2}} & \cdots &
(x + \varepsilon_{n - 1})^{n - 1}
& (x + \varepsilon_{n})^{n}\\
\hdotsfor{5}\\
\dfrac{\varphi \cdot X_{n, 1}} {\varphi_{n} \times
\varepsilon_{1}} & \dfrac{\varphi \cdot X_{n, 2}}
{\varphi_{n} \times \varepsilon_{2}} & \cdots
& \dfrac{\varphi \cdot X_{n, n - 1}} {\varphi_{n}
\times \varepsilon_{n - 1}} &
\dfrac{\varphi\cdot X_{n, n}}
{\varphi_{n} \times \varepsilon_{n}}
\end{pmatrix}
+ \mathbf{I}_{n}
\]
Recall the discussion of \dots vs. \cdots and \ldots in Section 5.4.3. In this
formula, we have to use \cdots. Matrices are discussed in detail in Section 7.7.1.
Note the use of the command \\[10pt]. If you use \\ instead, the ﬁrst
and second lines of the matrix are set too close.
I show you in Section 14.1.2 how to rewrite this formula to make it shorter
and more readable.

C H A P T E R
6
More math
In the previous chapter, we discussed the basic building blocks of a formula and how
to put them together to form more complex formulas. This chapter starts out by going
one step lower, to the characters that make up a formula. We discuss math symbols and
math alphabets.
LATEX was designed for typesetting math, so it is not surprising that it contains a
very large number of math symbols. Appendix A lists them all. Section 6.2 introduces
the STIX symbols, some 2,000 of them. Section 6.1 classiﬁes and describes them.
Section 6.3 discusses how to build new symbols from existing ones. Math alphabets
and symbols are discussed in Section 6.4. Horizontal spacing commands in math are
described in Section 6.5.
LATEX provides a variety of ways to number and tag equations. These techniques are
described in Section 6.6. We conclude the chapter with two minor topics: generalized
fractions (Section 6.7.1) and boxed formulas (Section 6.7.2).
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1_6
167

168
Chapter 6
More math
6.1
Spacing of symbols
LATEX provides a large variety of math symbols: Greek characters (𝛼), binary opera-
tions (◦), binary relations (≤), negated binary relations (≰), arrows ( ↗), delimiters
( { ), and so on. All the math symbols provided by LATEX are listed in the tables of
Appendix A. Consider the formula
𝐴= {𝑥∈𝑋∣𝑥𝛽≥𝑥𝑦> (𝑥+ 1)2 −𝛼}
which is typed as
\[
A = \{ x \in X \mid x \beta \geq x y
> (x + 1)^{2} - \alpha \}
\]
The spacing of the symbols in the formula varies. In 𝑥𝛽, the two symbols are very close.
In 𝑥∈𝑋, there is some space around the ∈, and in 𝑥+ 1, there is somewhat less space
around the +.
6.1.1
Classiﬁcation
LATEX classiﬁes symbols into several categories or types and spaces them accordingly.
In the formula
𝐴= {𝑥∈𝑋∣𝑥𝛽≥𝑥𝑦> (𝑥+ 1)2 −𝛼}
we ﬁnd
Ordinary math symbols: 𝐴, 𝑥, 𝑋, 𝛽, and so on
Binary relations: =, ∈, |, ≥, and >
Binary operations: + and −
Delimiters: {, }, (, and )
As a rule, you do not have to be concerned with whether or not a given symbol
in a formula, say ×, is a binary operation. LATEX knows and spaces the typeset symbol
correctly.
6.1.2
Three exceptions
There are three symbols with more than one classiﬁcation:
+
−
|
+ or −could be either a binary operation, for instance, 𝑎−𝑏, or a sign, for instance, −𝑏.

6.1
Spacing of symbols
169
Rule
+ and −
+ or −are binary operations when preceded and followed by a symbol or an empty
group, { }.
So, for instance, in
(𝐴+ 𝐵𝐶)𝑥+
𝐶𝑦= 0,
𝐸𝑥+ (𝐹+ 𝐺)𝑦= 23.
which is typed as (see the alignat* environment in Section 7.5.4)
\begin{alignat*}{2}
(A + B C)x &{}+{} &C
&y = 0,\\
Ex &{}+{} &(F + G)&y = 23.
\end{alignat*}
we use the empty groups, { }, to tell LATEX that the second + in line 1 and the ﬁrst + in
line 2 of the formula are binary operations. If we leave out the empty groups, and type
instead
\begin{alignat*}{2}
(A + B C)x &+ &C
&y = 0,\\
Ex &+ &(F + G)&y = 23.
\end{alignat*}
we get
(𝐴+ 𝐵𝐶)𝑥+
𝐶𝑦= 0,
𝐸𝑥+(𝐹+ 𝐺)𝑦= 23.
Another illustration is given later in this section using the \phantom command. This
problem often arises in split formulas, for example if the formula is split just before a
+ or −, you should start the next line with {}+ or {}-. See Section 7.3 for examples.
The | symbol can play several diﬀerent roles in a math formula, so LATEX provides
separate commands to specify the symbol’s meaning.
Rule
The four roles of the | symbol
|
ordinary math symbol
\mid
binary relation
\left|
left delimiter
\right|
right delimiter
Note the diﬀerences between the spacing in 𝑎|𝑏, typed as $a | b$, and in 𝑎∣𝑏, typed
as $a \mid b$.

170
Chapter 6
More math
Name
Width
Short
Long
1 mu (math unit)
\mspace{1mu}
thinspace
\,
\thinspace
medspace
\:
\medspace
thickspace
\;
\thickspace
interword space
\␣
1 em
\quad
2 em
\qquad
Negative space
1 mu
\mspace{-1mu}
thinspace
\!
\negthinspace
medspace
\negmedspace
thickspace
\negthickspace
Table 6.1: Math spacing commands.
6.1.3
Spacing commands
There are some situations where LATEX cannot typeset a formula properly and you have
to add spacing commands. Luckily, LATEX provides a variety of spacing commands,
listed in Table 6.1. The \neg commands remove space by “reversing the print head”.
The \quad and \qquad commands are often used to adjust aligned formulas (see
Chapter 7) or to add space before text in a math formula. The size of \quad (= 1 em)
and \qquad (= 2 em) depends on the current font.
The \, and \! commands are the most useful for ﬁne tuning math formulas, see
some examples in the Formula Gallery and in the next section. The \mspace command
and the math unit mu provides you with even ﬁner control. 18 mu = 1 em, deﬁned in
Section 3.8.3. For example, \mspace{3mu} adds a space that is 1/6 em long. There is
an interesting use of mu on page 90.
6.1.4
Examples
We present some examples of ﬁne tuning. One more example can be found in Sec-
tion 6.3.1.
Example 1
In Section 1.6, we type the formula ∫𝜋
0 sin 𝑥𝑑𝑥= 2 as
$\int_{0}^{\pi} \sin x \, dx = 2$
Notice the thinspace spacing command \, between \sin x and dx. Without the com-
mand, LATEX would have crowded sin 𝑥and 𝑑𝑥: ∫𝜋
0 sin 𝑥𝑑𝑥= 2.

6.1
Spacing of symbols
171
Example 2
| −𝑓(𝑥)|, typed as $|-f(x)|$, is spaced incorrectly. −becomes a bi-
nary operation by the + and −rule. To get the correct spacing, as in |−𝑓(𝑥)|, type
$\left|-f(x)\right|$. This form tells LATEX that the ﬁrst | is a left delimiter, by
the | rule, and therefore −is the unary minus sign, not the binary subtraction operation.
Example 3
In
√
5side, typed as
$\sqrt{5} \text{side}$
√
5 is too close to side. So type it as
$\sqrt{5} \, \text{side}$
which typesets as
√
5 side.
Example 4
In sin 𝑥∕log 𝑛, the division symbol ∕is too far from log 𝑛, so type
$\sin x / \! \log n$
which prints sin 𝑥∕log 𝑛.
Example 5
In 𝑓(1∕
√
𝑛), typed as
$f(1 / \sqrt{n})$
the square root almost touches the closing parenthesis. To correct it, type
$f(1 / \sqrt{n}\,)$
which typesets as 𝑓(1∕
√
𝑛).
There is one more symbol with special spacing: the \colon command, used
for formulas such as 𝑓∶𝐴→𝐵(typed as $f \colon A \to B$). Observe that
$f: A \to B$ typesets as 𝑓∶𝐴→𝐵. The spacing is awful. See Section 6.3.3
on how to declare the type of a symbol.
6.1.5
The phantom command
The \phantom{argument } command (introduced for text in Section 3.8.1) produces
a space in a formula equivalent to the space that would be occupied by its typeset argu-
ment. This command is one of the most powerful tools available to us for ﬁne tuning
alignments. Here are two simple illustrations:
𝐴=
⎛
⎜
⎜⎝
1
3
1
2
1
1
−2
2
−1
⎞
⎟
⎟⎠

172
Chapter 6
More math
typed as
\[
A = \begin{pmatrix}
\phantom{-}1 & \phantom{-}3 & \phantom{-}1\\
\phantom{-}2 & \phantom{-}1 & \phantom{-}1\\
-2 & \phantom{-}2 &
-1\\
\end{pmatrix}
\]
and
𝑎+ 𝑏+ 𝑐+ 𝑑
= 0,
𝑐+ 𝑑+ 𝑒= 5.
typed as
\begin{align*}
a + b + c & + d \phantom{ {}+e } = 0,\\
c & + d + e
= 5.
\end{align*}
Note that \phantom{+e} yields incorrect spacing by the + and −rule:
𝑎+ 𝑏+ 𝑐+ 𝑑
= 0,
𝑐+ 𝑑+ 𝑒= 5.
See Section 7.6.2 for an additional example.
6.2
The STIX math symbols
6.2.1
Swinging it
In a recent paper of mine (see arXiv: 1312.2537), I introduce the concept of a swing:
a prime interval 𝔭swings to another one, 𝔮, as exempliﬁed by this diagram:

6.2
The STIX math symbols
173
LATEX provides a nice curved arrow, \curvearrowright, typeset as ↷; unfortunately,
it is upside down (you don’t swing that way). Utilizing the graphicx package, I solved
my problem by deﬁning
\newcommand{\swing}
{\mathbin{{\rotatebox{180}{$\curvearrowleft$}}}}
which turns \curvearrowleft, ↶, 180 degrees: 𝔭
↶
𝔮. Raise it with \raisebox:
𝔭
↶
𝔮, typed as
\mathfrak p \swingraised \mathfrak q
where
\newcommand{\swingraised}{\mathbin{\raisebox{3.0pt}
{\rotatebox{160}{$\curvearrowleft$}}}}
A better way to solve the problem is by utilizing the 2,000 or so new math symbols
oﬀered by STIX.
6.2.2
The STIX project
“The mission of the Scientiﬁc and Technical Information Exchange (STIX) font cre-
ation project is the preparation of a comprehensive set of fonts that serve the scientiﬁc
and engineering community in the process from manuscript creation through ﬁnal pub-
lication, both in electronic and print formats.” The symbols were completed by 2006.
The LATEX Version 1.1.1 was released for my birthday in 2014.
6.2.3
Installation and usage
If you have a TEX installation from 2014, then you should already have the STIX fonts
installed. To test whether you have the STIX fonts installed, try to typeset the following
tiny article:
\documentclass{article}
\usepackage{stix}
\begin{document}
Some text, and a math formula $\ccwundercurvearrow$.
\end{document}
This should typeset as
To use the STIX fonts, load the STIX package, as in the example. Note that the
STIX package has to be loaded ahead of the AMS packages. Since the amsart docu-
ment class loads many AMS packages, we have to use the unusual construct:

174
Chapter 6
More math
\RequirePackage{stix}
\documentclass{amsart}
\begin{document}
Some text, and a math formula $\ccwundercurvearrow$.
\end{document}
This typesets the same as the previous example.
If your installation is not up-to-date, it is simpler to update it than to try to install
the STIX fonts yourself. You can ﬁnd the STIX fonts at
https://sourceforge.net/projects/stixfonts
Download the package; you get the folder STIXv2. In STIXv2, you ﬁnd the folder
Fonts. It contains
1. the fonts (inside the Fonts folder, there is a subfolder fonts, which contains a sub-
folder opentype, which contains a subfolder public; this contains a subfolder
stix, containing the ﬁve font ﬁles);
2. the style ﬁle stix.sty (inside the Fonts folder, there is a subfolder tex, which
contains a subfolder latex; this contains a subfolder stix, containing a lot of ﬁles,
including the style ﬁle);
3. and the documentation stix.pdf (inside the Fonts folder, there is a subfolder doc,
which contains a subfolder fonts; this contains a subfolder stix, containing several
ﬁles, including the document ﬁle).
To install the fonts, follow the steps appropriate for your operating system.
All the math symbols are listed in 19 pages of STIX.pdf; we located this document
in the third item above, see also in the samples folder. See Figure 6.1, for the second
of these 19 pages. These pages show all the symbols and the commands necessary to
produce them. So to get, type \varcarriagereturn. An * indicates that there is no
bold version of the symbol. You can ﬁnd STIX.pdf is the samples folder.
How to ﬁnd a symbol in the 19 page listing? With perseverance. The symbols are
divided into 12 parts; the longest is Relations, about seven pages! Within a part, they
are listed by their hexadecimal number.
6.3
Building new symbols
No matter how many math symbols LATEX provides, users always seem to want more.
LATEX gives you excellent tools to build new symbols from existing ones.
6.3.1
Stacking symbols
To place any symbol above, or below, any other, for instance,
u∼, use the \overset
command. It takes two arguments—the ﬁrst argument is set in a smaller size above the

6.3
Building new symbols
175
U+2037 \backtrprime
U+2038 \caretinsert
U+203C \Exclam
U+2043 \hyphenbullet*
U+2047 \Question
U+2057 \qprime
U+20DD \enclosecircle
U+20DE \enclosesquare*
U+20DF \enclosediamond*
U+20E4 \enclosetriangle
U+2107 \Eulerconst
U+210F \hbar*
U+210F \hslash
U+2111 \Im
U+2113 \ell
U+2118 \wp
U+211C \Re
U+2127 \mho
U+2129 \turnediota
U+212B \Angstrom
U+2132 \Finv
U+2135 \aleph
U+2136 \beth
U+2137 \gimel
U+2138 \daleth
U+2141 \Game*
U+2142 \sansLturned*
U+2143 \sansLmirrored*
U+2144 \Yup*
U+214A \PropertyLine*
U+21A8 \updownarrowbar
U+21B4 \linefeed
U+21B5 \carriagereturn
U+21B8 \barovernorthwestarrow
U+21B9 \barleftarrowrightarrowbar
U+21BA \acwopencirclearrow
U+21BB \cwopencirclearrow
U+21DE \nHuparrow*
U+21DF \nHdownarrow*
U+21E0 \leftdasharrow*
U+21E1 \updasharrow*
U+21E2 \rightdasharrow*
U+21E3 \downdasharrow*
U+21E6 \leftwhitearrow
U+21E7 \upwhitearrow
U+21E8 \rightwhitearrow
U+21E9 \downwhitearrow
U+21EA \whitearrowupfrombar
U+2200 \forall
U+2201 \complement
U+2203 \exists
U+2204 \nexists
U+2205 \varnothing
U+2205 \emptyset
U+2206 \increment
U+220E \QED*
U+221E \infty
U+221F \rightangle
U+2220 \angle
U+2221 \measuredangle
U+2222 \sphericalangle
U+2234 \therefore
U+2235 \because
U+223F \sinewave
U+22A4 \top
U+22A5 \bot
U+22B9 \hermitmatrix
U+22BE \measuredrightangle
U+22BF \varlrtriangle
U+22EF \cdots
U+2300 \diameter*
U+2302 \house
U+2310 \invnot
U+2311 \sqlozenge*
U+2312 \profline*
U+2313 \profsurf*
U+2317 \viewdata*
U+2319 \turnednot
U+232C \varhexagonlrbonds*
U+2332 \conictaper*
U+2336 \topbot
U+2340 \APLnotbackslash*
U+2353 \APLboxupcaret*
U+2370 \APLboxquestion*
U+237C \rangledownzigzagarrow*
U+2394 \hexagon*
U+23B6 \bbrktbrk
U+23CE \varcarriagereturn*
U+23E0 \obrbrak
U+23E1 \ubrbrak
U+23E2 \trapezium*
U+23E3 \benzenr*
Figure 6.1: A sample page from the STIX document.

176
Chapter 6
More math
second argument. The spacing rules of the symbol in the second argument remain valid,
i.e., the type remains the same. Since ∼is a binary relation, so is
u∼. The \underset
command is the same except that the ﬁrst argument is set under the second argument.
For example,
𝛼𝑎
𝑋⋅
𝛼𝑎𝑖
𝛼𝑎𝑖
are typed as
\[
\overset{\alpha}{a}
\qquad
\underset{\boldsymbol{\cdot}}{X}
\qquad
\overset{\alpha}{ a_{i} }
\qquad
\overset{\alpha}{a}_{i}
\]
For the \boldsymbol command, see Section 6.4.3. Note that in the third example,
𝛼𝑎𝑖,
the 𝛼seems to be sitting too far to the right but the fourth example corrects that.
You can also use these commands with binary relations, as in
𝑓(𝑥)
def
= 𝑥2 −1
which is typed as
\[
f(x) \overset{ \text{def} }{=} x^{2} - 1
\]
Since = is a binary relation,
def
= becomes a binary relation, as shown by the spacing on
either side. Here is another example,
𝑎
𝑏
𝑢
+ 𝑐
𝑑
𝑙
+ 𝑒
𝑓
which is typed as
\[
\frac{a}{b} \overset{u}{+} \frac{c}{d}
\overset{l}{+} \frac{e}{f}
\]
Note that
𝑢
+ and
𝑙
+ are properly spaced as binary operations.
As we discuss in Section 5.4.6, the safer deﬁnitions for these examples are
\[
f(x) \overset{ \normalfont\text{def} }{=} x^{2} - 1
\]

6.3
Building new symbols
177
and
\[
\frac{a}{b} \overset{\normalfont u}{+} \frac{c}{d}
\overset{\normalfont l}{+} \frac{e}{f}
\]
6.3.2
Negating and side-setting symbols
You can negate with the \not command; for instance, 𝑎∉𝑏and 𝑎≠𝑏are typed as
$a \not\in b$ and $a \not= b$, respectively. It is preferable, however, to use the
negated symbols ∉, typed as $\notin$, and ≠, typed as $\ne$. See the negated binary
relations table in Section A.2. For instance, “𝑎does not divide 𝑏”, 𝑎∤𝑏, should be typed
as $a \nmid b$, not as $a \not\mid b$, which typesets as 𝑎∤𝑏. In Section 6.3.3,
you learn how to improve 𝑎∤𝑏to 𝑎̸ | 𝑏, typed as $a \mathrel{\not|} b$. However,
$a \nmid b$ is still best.
LATEX provides the \sideset command to set symbols at the corners of large
operators other than the “corners” (the last four delimiters in Table 5.3). This command
takes three arguments:
\sideset{ _{ll }^{ul } }{ _{lr }^{ur } }{large_op }
where ll stands for the symbol to be placed at the lower left, ul for upper left, lr for
lower right, and ur for upper right; large_op is a large operator. These two examples,
∏𝑐
𝑎and
𝑒∏
are typed as
\[
\sideset{}{_{a}^{c}}{\prod}\text{ and } \sideset{^{e}}{}{\prod}
\]
Note that the two ﬁrst arguments are compulsory, although one or the other may be
empty, while the third argument must contain the large operator.
Here is a more meaningful example:
\[
\sideset{}{’}{\sum}_{\substack{ i < 10\\ j < 10 } } x_{i}z_{j}
\]
it is typeset as
∑′
𝑖<10
𝑗<10
𝑥𝑖𝑧𝑗

178
Chapter 6
More math
In this example, note that prime (′) is an automatically superscripted symbol (see Sec-
tion 5.4.1), so you do not have to type ^’ in the second argument. Typing \sum’ would
not work, since LATEX would place the prime above the sum symbol.
Thus, \sideset helps in mixing sub- and superscripts in “limit” positions with
others in “nolimit” positions, allowing for a total of six positions in displayed operators
with limits. Try
𝑟
𝑐
𝑎
∏𝑖
𝑒
𝑛
typed as
\[
\sideset{_{a}^{c}}{_{e}^{i}}{\prod}_{n}^{r}
\]
6.3.3
Changing the type of a symbol
Some symbols are binary relations and some are binary operations (see Section 6.1).
In fact, you can force any symbol to behave like either type. The \mathbin command
declares its argument to be a binary operation. For example,
\mathbin{\alpha}
makes this instance of \alpha behave like a binary operation, as in 𝑎𝛼𝑏, typed as
$a \mathbin{\alpha} b$
You can use the \mathrel command to make a symbol behave like a binary relation,
as in the formula 𝑎𝛼𝑏, typed as
$a \mathrel{ \alpha } b$
You can see
𝑎𝛼𝑏
($a \mathbin{\alpha} b$)
𝑎𝛼𝑏
($a \mathrel{\alpha} b$)
that a binary relation provides a bit more space than a binary operation. There is an
interesting use of \mathbin on page 90.
In Section 14.1.6, we discussed the \DeclareMathOperator command and its
*-ed version, to declare a symbol—or any text or formula—a math operator.
6.4
Math alphabets and symbols
The classiﬁcation of math symbols in the context of spacing was discussed in Sec-
tion 6.1. The symbols in a formula can also be classiﬁed as characters from math al-
phabets and math symbols. In the formula
𝐴= {𝑥∈𝑋∣𝑥𝛽≥𝑥𝑦> (𝑥+ 1)2 −𝛼}

6.4
Math alphabets and symbols
179
the following characters come from math alphabets:
𝐴
𝑥
𝑋
𝑦
1
2
whereas these characters are math symbols:
=
{
∈
∣
𝛽
≥
>
(
+
)
−
𝛼
}
6.4.1
Math alphabets
The letters and digits typed in a math formula come from math alphabets. LATEX’s de-
fault math alphabet—the one you get if you do not ask for something else—is Computer
Modern math italic for letters. In the formula 𝑥2 ∨𝑦3 = 𝛼, the characters 𝑥and 𝑦come
from this math alphabet. The default math alphabet for digits is Computer Modern
roman and the digits 2 and 3 in this formula are typeset in Computer Modern roman.
LATEX has a number of commands to switch type style in math. The two most
important commands select the bold and italic versions:
Command
Math alphabet
Produces
\mathbf{a}
math bold
𝟐𝐆𝐫𝐞𝐞𝐤𝐠𝐚𝐦𝐦𝐚𝐬, 𝛾𝐚𝐧𝐝𝚪
\mathit{a}
math italic
2 𝐺𝑟𝑒𝑒𝑘𝑔𝑎𝑚𝑚𝑎𝑠, 𝛾𝑎𝑛𝑑𝛤
These commands change the style of letters, numbers, and upper case Greek characters.
But beware of the pitfalls. For instance, in \mathit{left-side} the hyphen typesets
as a minus: 𝑙𝑒𝑓𝑡−𝑠𝑖𝑑𝑒.
There are four more commands that switch math alphabets:
Command
Math Alphabet
Produces
\mathsf{a}
math sans serif
𝟤𝖦𝗋𝖾𝖾𝗄𝗀𝖺𝗆𝗆𝖺𝗌, 𝛾𝖺𝗇𝖽
\mathrm{a}
math roman
2 Greek gammas, 𝛾and Γ
\mathtt{a}
math typewriter
𝟸𝙶𝚛𝚎𝚎𝚔𝚐𝚊𝚖𝚖𝚊𝚜, 𝛾𝚊𝚗𝚍⟳
\mathnormal{a}
math italic
2 𝐺𝑟𝑒𝑒𝑘𝑔𝑎𝑚𝑚𝑎𝑠, 𝛾𝑎𝑛𝑑𝛤
Math roman is used in formulas for operator names, such as sin in sin 𝑥, and for
text. For operator names, you should use the \DeclareMathOperator command or
the *-ed version, which sets the name of the operator in math roman, and also provides
the proper spacing (see Section 6.3.3). For text, you should use the \text command
(see Section 5.4.6).
The \mathnormal command switches to the default math alphabet; it is seldom
used in practice.
The Computer Modern fonts include a math bold italic alphabet, but LATEX does
not provide a command to access it.

180
Chapter 6
More math
Rule
Math alphabets vs. text alphabets
Do not use text alphabets in a math formula, except in the argument of a \text
command.
It may not be easy to see the diﬀerence, but some things will not look right or may not
align properly.
6.4.2
Math symbol alphabets
You may have noticed that 𝛼was not classiﬁed as belonging to an alphabet in the ex-
ample at the beginning of this section. Indeed, 𝛼is treated by LATEX as a math symbol
rather than as a member of a math alphabet. You cannot italicize or slant it, nor is
there a sans serif version. There is a bold version, but you must use the \boldsymbol
command to produce it. For instance, 𝜶𝜷, is typed as
$\boldsymbol{\alpha}_{\boldsymbol{\beta}}$
Note that 𝜷appears in a small size in 𝜶𝜷.
Four “alphabets of symbols” are built into LATEX.
Greek The examples 𝛼, 𝛽, Γ are typed as
$\alpha, \beta, \Gamma$
See Section A.1 for the symbol tables.
Calligraphic an uppercase-only alphabet invoked with the \mathcal command.
The examples , , are typed as
$\mathcal{A}, \mathcal{C}, \mathcal{E}$
Euler Fraktur invoked by the \mathfrak command. The examples 𝔫, 𝔑, 𝔭, 𝔓are
typed as
$\mathfrak{n}, \mathfrak{N}, \mathfrak{p}, \mathfrak{P}$
Blackboard bold uppercase-only math alphabet, invoked with \mathbb. The exam-
ples 𝔸, 𝔹, ℂare typed as
$\mathbb{A}, \mathbb{B}, \mathbb{C}$

6.4
Math alphabets and symbols
181
6.4.3
Bold math symbols
In math, most characteristics of a font are speciﬁed by LATEX. One exception is bold-
face. To make a letter bold from a math alphabet within a formula, use the \mathbf
command. For instance, in
we choose the vector 𝐯
the bold 𝐯is produced by $\mathbf{v}$.
To obtain bold math symbols, use the \boldsymbol command. For example, the
bold symbols
𝟓
𝜶
𝚲

→
𝑨
are typed as
\[
\boldsymbol{5}
\quad \boldsymbol{\alpha}
\quad \boldsymbol{\Lambda}\quad\boldsymbol{\mathcal{A}}
\quad \boldsymbol{\to}
\quad \boldsymbol{A}
\]
Note that \boldsymbol{A} typesets as 𝑨, a bold math italic A. To get an upright 𝐀,
type $\mathbf{A}$. The digit 5 did not really need \boldsymbol; \mathbf{5} gives
the same result.
To make an entire formula bold, use the \mathversion{bold} command, as in
{\mathversion{bold} $a \equiv c \pod{\theta}$}
which typesets as 𝒂≡𝒄(𝜽). Note that the \mathversion{bold} command is given
before the formula.
To typeset , type
$\boldsymbol{ \mathcal{A} } \boldsymbol{ \mathcal{M} }
\boldsymbol{ \mathcal{S} }$
or
$\boldsymbol{ \mathcal{AMS} }$
or
{\mathversion{bold} $\mathcal{AMS}$}
Within the scope of \mathversion{bold}, you can undo its eﬀect with
\mathversion{normal}

182
Chapter 6
More math
Not all symbols have bold variants. For example, if you type
$\sum \quad \boldsymbol{\sum}$
you get ∑
∑, two identical symbols. If you want to obtain a bold version, use the
poor man’s bold invoked by the \pmb command. This command typesets the symbol
three times very close to one another producing a bold symbol of some quality. Note
that \pmb does destroy the type of the symbol, \pmb{\sum} is no longer spaced like a
large operator. To make it into a large operator, declare in the preamble
\DeclareMathOperator{\boldsum}{\pmb{\sum}}
and
\DeclareMathOperator*{\boldsumlim}{\pmb{\sum}}
Compare the following four variants of sum:
𝑛
∑
𝑖=1
𝑖2
∑
∑
∑𝑛
𝑖=1𝑖2
∑
∑
∑𝑛
𝑖=1 𝑖2
𝑛
∑
∑
∑
𝑖=1
𝑖2
The ﬁrst sum is typed (in displayed math mode) as
\sum_{i = 1}^{n} i^{2}
The second uses poor man’s bold, but does not declare the result to be a large operator:
\pmb{\sum}_{i = 1}^{n} i^{2}
The third uses the math operator declared:
\boldsum_{i = 1}^{n} i^{2}
The fourth uses the math operator with limit declared:
\boldsumlim_{i = 1}^{n} i^{2}
6.4.4
Size changes
There are four math font sizes, invoked by the command declarations
\displaystyle, normal size for displayed formulas
\textstyle, normal size for inline formulas
\scriptstyle, normal size for subscripted and superscripted symbols
\scriptscriptstyle, normal size for doubly subscripted and superscripted
symbols

6.5
Vertical spacing
183
These commands control a number of style parameters in addition to the size.
Compare the two fractions
1
2 + 1
3
1
2 + 1
3
which are typed as
\[
\frac{1}{\displaystyle 2 + \frac{1}{3}} \quad
\frac{1}{ 2 + \frac{1}{3} }
\]
6.4.5
Continued fractions
In addition to the \frac, \dfrac, and \tfrac commands (see Section 5.4.1), LATEX
makes typesetting continued fractions even easier by providing the \cfrac command.
The \cfrac command takes an optional argument, l or r, to place the numerator on
the left or on the right. For example,
1
2 +
1
3 + ⋯
1
2 +
1
3 + ⋯
is typed as
\[
\cfrac{1}{ 2 + \cfrac{1}{3 + \cdots} } \qquad
\cfrac[l]{1}{2 + \cfrac[l]{1}{3 + \cdots}}
\]
6.5
Vertical spacing
As a rule, all horizontal and vertical spacing in a math formula is done by LATEX. Never-
theless, you often need to adjust horizontal spacing (see Section 6.1). There is seldom
a need to adjust vertical spacing, but there are a few exceptions.
The formula
√
𝑎+
√
𝑏does not look quite right, because the square roots are not
uniform. You can correct this with \mathstrut commands, which inserts an invisible
vertical space:
$\sqrt{\mathstrut a} + \sqrt{\mathstrut b}$
typesets as
√
𝑎+
√
𝑏. See Section 3.9.5 for struts in general.
Another way to handle this situation is with the \vphantom (vertical phantom)
command, which measures the height of its argument and places a math strut of that
height into the formula. So

184
Chapter 6
More math
$\sqrt{\vphantom{b} a} + \sqrt{b}$
also prints uniform square roots,
√
𝑎+
√
𝑏. The \vphantom method is more versatile
than the previous one.
Here is a more complicated example from a recent research article:
Θ𝑖=
⋃(Θ(𝑎∧𝑏, 𝑎∧𝑏) ∣𝑎, 𝑏∈𝐵𝑖
) ∨
⋃(Θ(𝑎∨𝑏, 𝑎∨𝑏) ∣𝑎, 𝑏∈𝐵𝑖
),
typed as
\[
\Theta_i = \bigcup \big( \Theta (\overline{a \wedge b},
\overline{\vphantom{b}a} \wedge \overline{b})
\mid a,\ b \in B_i \big)
\vee \bigcup \big( \Theta(\overline{a \vee b},
\overline{\vphantom{b}a} \vee \overline{b} )
\mid a,\ b \in B_i \big),
\]
Another useful command for vertical spacing is the \smash command. It directs
LATEX to pretend that its argument does not protrude above or below the line in which
it is typeset.
For instance, the two lines of this admonition:
It is very important that you memorize the integral
1
∫𝑓(𝑥) 𝑑𝑥= 2𝑔(𝑥) + 𝐶,
which will appear on the next test.
are too far apart because LATEX had to make room for the fraction. However, in this
instance, the extra vertical space is not necessary because the second line is very short.
To correct this, place the formula in the argument of a \smash command:
It is \emph{very important} that you memorize the
integral $\smash{\frac{1}{\int f(x) \, dx}} = 2g(x) + C$,
which will appear on the next test.
LATEX produces the following:
It is very important that you memorize the integral
1
∫𝑓(𝑥) 𝑑𝑥= 2𝑔(𝑥) + 𝐶,
which will appear on the next test.
An optional argument to the \smash command controls which part of the formula
is ignored, t to smash the top and b to smash the bottom.

6.6
Tagging and grouping
185
6.6
Tagging and grouping
You can attach a name to an equation using the \tag command. In the equation or
equation* environments,
\tag{name }
attaches the tag name to the equation—name is typeset as text. The tag replaces the
number.
Recall that the numbering of an equation is relative, that is, the number assigned to
an equation is relative to the placement of the equation with respect to other equations
in the document. An equation tag, on the other hand, is absolute—the tag remains the
same even if the equation is moved.
If there is a tag, the equation and the equation* environments are equivalent.
For example,
(Int)
∫
∞
−∞
𝑒−𝑥2 𝑑𝑥=
√
𝜋
may be typed as
\begin{equation*}
\int_{-\infty}^{\infty} e^{-x^{2}} \, dx
= \sqrt{\pi}\tag{Int}
\end{equation*}
or
\begin{equation}
\int_{-\infty}^{\infty} e^{-x^{2}} \, dx
= \sqrt{\pi}\tag{Int}
\end{equation}
or
\[
\int_{-\infty}^{\infty} e^{-x^{2}} \, dx
= \sqrt{\pi}\tag{Int}
\]
The \tag* command is the same as \tag except that it does not automatically
enclose the tag in parentheses. To get
A–B
∫
∞
−∞
𝑒−𝑥2 𝑑𝑥=
√
𝜋

186
Chapter 6
More math
type
\begin{equation}
\int_{-\infty}^{\infty} e^{-x^{2}} \, dx = \sqrt{\pi}
\tag*{A--B}
\end{equation}
Tagging allows numbered variants of equations. For instance, the equation
(1)
𝐴[2] ⋄𝐵[2] ≅(𝐴⋄𝐵)[2]
may need a variant:
(1′)
𝐴⟨2⟩⋄𝐵⟨2⟩≡(𝐴⋄𝐵)⟨2⟩
If the label of the ﬁrst equation is E:first, then the second equation may be typed as
follows:
\begin{equation}\tag{\ref{E:first}$’$}
A^{\langle 2 \rangle} \diamond B^{\langle 2\rangle}
\equiv (A \diamond B)^{\langle 2 \rangle}
\end{equation}
Such a tag is absolute in the sense that it does not change if the equation is moved. But
if it references a label and the number generated by LATEX for the label changes, the tag
changes.
In contrast, grouping applies to a group of adjacent equations. Suppose the last
equation was numbered (1) and the next group of equations is to be referred to as (2),
with individual equations numbered as (2a), (2b), and so on. Enclosing these equations
in a subequations environment accomplishes this goal. For instance,
(1a)
𝐴[2] ⋄𝐵[2] ≅(𝐴⋄𝐵)[2]
and its variant
(1b)
𝐴⟨2⟩⋄𝐵⟨2⟩≡(𝐴⋄𝐵)⟨2⟩
are typed as
\begin{subequations}\label{E:joint}
\begin{equation}\label{E:original}
A^{[2]} \diamond B^{[2]} \cong (A \diamond B)^{[2]}
\end{equation}
\begin{equation}\label{E:modified}
A^{\langle 2 \rangle} \diamond B^{\langle 2\rangle}
\equiv (A \diamond B)^{\langle 2\rangle}
\end{equation}
\end{subequations}

6.7
Miscellaneous
187
Referring to these equations, you ﬁnd that
\eqref{E:joint} resolves to (1)
\eqref{E:original} resolves to (1a)
\eqref{E:modified} resolves to (1b)
Note that in this example, references to the second and third labels produce numbers,
(1a) and (1b), that also appear in the typeset version. The group label, E:joint, refer-
ences the entire group, but (1) does not appear in the typeset version unless referenced.
A subequations environment can contain the multiline math constructs discussed
in Chapter 7 (see Section 7.4.4).
6.7
Miscellaneous
6.7.1
Generalized fractions
The generalized fraction command provides the facility to typeset many variants of
fractions and binomials, such as 𝑎+𝑏
𝑐
and ]𝑎+𝑏
𝑐
[. The syntax is
\genfrac{left-delim }{right-delim }{thickness }{mathstyle }
{numerator }{denominator }
where
left-delim is the left delimiter for the formula (default: none)
right-delim is the right delimiter for the formula (default: none)
thickness is the thickness of the fraction line, in the form x pt (default: the normal
weight, 0.4pt), for instance, 12pt for 12 point width
mathstyle is one of
– 0 for \displaystyle
– 1 for \textstyle
– 2 for \scriptstyle
– 3 for \scriptscriptstyle
– Default: Depends on the context. If the formula is being set in display style, then
the default is 0, and so on
numerator is the numerator
denominator is the denominator

188
Chapter 6
More math
All arguments must be speciﬁed. The empty argument, {}, gives the default value.
Examples
1. \frac{numerator }{denominator }
is the same as
\genfrac{}{}{}{}{numerator }{denominator }
2. \dfrac{numerator }{denominator }
is the same as
\genfrac{}{}{}{0}{numerator }{denominator }
3. \tfrac{numerator }{denominator }
is the same as
\genfrac{}{}{}{1}{numerator }{denominator }
4. \binom{numerator }{denominator }
is the same as
\genfrac{(}{)}{0pt}{}{numerator }{denominator }
5. Here are some more examples:
𝑎+ 𝑏
𝑐
𝑎+ 𝑏
𝑐
𝑎+ 𝑏
𝑐
𝑎+ 𝑏
𝑐
[
𝑎+ 𝑏
𝑐
]
]
𝑎+ 𝑏
𝑐
[
typed as
\[
\frac{a + b}{c} \quad
\genfrac{}{}{1pt}{}{a + b}{c}
\quad
\genfrac{}{}{1.5pt}{}{a + b}{c} \quad
\genfrac{}{}{2pt}{}{a + b}{c}
\quad
\genfrac{[}{]}{0pt}{}{a + b}{c} \quad
\genfrac{]}{[}{0pt}{}{a + b}{c}
\]
𝑎+ 𝑏
𝑐
𝑎+ 𝑏
𝑐
typed as
\[
\frac{a + b}{c} \quad
\genfrac{}{}{0.4pt}{}{a + b}{c}
\quad
\]
You can choose the delimiters from Table 5.3.
If a \genfrac construct is used repeatedly, you should name it. See Section 14.1 for
custom commands.

6.7
Miscellaneous
189
6.7.2
Boxed formulas
The \boxed command puts its argument in a box, as in
(2)
∫
∞
−∞
𝑒−𝑥2 𝑑𝑥=
√
𝜋
typed as
\begin{equation}
\boxed{ \int_{-\infty}^{\infty} e^{-x^{2}}\, dx
= \sqrt{\pi} }
\end{equation}
The \boxed command can also be used in the argument of a \text command. Note
that
\fbox{Hello world}
and
$\boxed{\text{Hello world}}$
produce the same Hello world .
Morten Høgholm’s mathtools package contains many variants of boxes.

C H A P T E R
7
Multiline
math displays
7.1
Visual Guide
LATEX is about typesetting math. It knows a lot about typesetting inline formulas, but not
much about how to display a multiline formula to best reﬂect its meaning in a visually
pleasing way. So you have to decide the visual structure of a multiline formula and then
use the tools provided by LATEX to code and typeset it.
For many mathematical documents the three constructs of Chapter 1 suﬃce: sim-
ple and annotated alignments, and the cases construct. To help you choose the appro-
priate tool for more complicated constructs, we start by introducing the basic concepts
and constructions with the Visual Guide of Figure 7.1.
7.1.1
Columns
Multiline math formulas are displayed in columns. The columns are either adjusted, that
is, centered, or set ﬂush left or right, or aligned, that is, an alignment point is designated
for each column and for each line. Moreover, the columns are either separated by the
intercolumn space or adjacent with no separation.
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1_7
191

192
Chapter 7
Multiline math displays
gather
one column, centered
x1x2 + x2
1x2
2 + x3
x1x3 + x2
1x2
3 + x2
x1x2x3
multline
flush left, centered, flush right
split
one column, aligned
f(x) = x + yz
g(x) = x + y + z
h(x) = xy + xz + yz
k(x) = (x + y)(x + z)(y + z)
align
multicolumn, aligned
alignat
multicolumn, aligned
f(x) = x +
g
z
y
(x) = x + y + z
h(x) = xy + xz +
k
z
y
(x) = (x + y)(x + z)(y + z)
flalign
multicolumn, aligned
Adjusted environments
Adjusted subsidiary environments
Aligned environments
⎛
⎜
⎜
⎜
⎝
1
0
. . .
0
0
1
. . .
0
...
...
...
...
0
0
. . .
1
⎞
⎟
⎟
⎟
⎠
matrix
multicolumn, centered
f(x) =
⎧
⎪
⎨
⎪
⎩
−x2,
if x < 0;
α + x,
if 0 ≤x ≤1;
x2,
otherwise.
cases
columns flush left
array
multicolumn
each column adjusted independently
Aligned subsidiary environment
(x1x2x3x4x5x6)2
+ (x1x2x3x4x5 + x1x3x4x5x6 + x1x2x4x5x6 + x1x2x3x5x6)2
+ (x1x2x3x4 + x1x2x3x5 + x1x2x4x5 + x1x3x4x5)2
0 = ⟨. . . , 0, . . . ,
i
d, . . . , 0, . . . ⟩∧⟨. . . , 0, . . . ,
ja, . . . , 0, . . . ⟩
≡⟨. . . , 0, . . . ,
ja, . . . , 0, . . . ⟩
(mod Θ)
(3.4)
a11x1 + a12x2 + a13x3
= y1
(17)
a21x1 + a22x2
+ a24x4 = y2
(18)
a31x1
+ a33x3 + a34x4 = y3
(19)
a + b + c
uv
x −y
27
a + b
u + v
z
134
Figure 7.1: The Visual Guide for multiline math formulas.

7.1
Visual Guide
193
One column
As in Chapter 1, we start with a simple align:
𝑟2 = 𝑠2 + 𝑡2,
2𝑢+ 1 = 𝑣+ 𝑤𝛼
This is a single column, aligned at the = signs, and coded with the align environment
(see Section 1.7.3).
Two columns
The annotated align, coded with the align environment (see Section 1.7.3),
𝑥= 𝑥∧(𝑦∨𝑧)
(by distributivity)
= (𝑥∧𝑦) ∨(𝑥∧𝑧)
(by condition (M))
= 𝑦∨𝑧
has two columns. The ﬁrst column is aligned like our example of simple align, but the
second column is aligned ﬂush left. There is a sizeable intercolumn space.
7.1.2
Subsidiary math environments
The cases example in Section 1.7.4:
𝑓(𝑥) =
⎧
⎪
⎨
⎪⎩
−𝑥2,
if 𝑥< 0;
𝛼+ 𝑥,
if 0 ≤𝑥≤1;
𝑥2,
otherwise.
introduces a new concept. The part of the formula to the right of = is a multiline
construct. This is an example of a subsidiary math environment that can only be used
inside another math environment. It creates a “large math symbol”, in this case
⎧
⎪
⎨
⎪⎩
−𝑥2,
if 𝑥< 0;
𝛼+ 𝑥,
if 0 ≤𝑥≤1;
𝑥2,
otherwise.
So the cases example:
𝑓(𝑥) = large math symbol
is a single line displayed formula, where “large math symbol” is replaced by the cases
construct.
7.1.3
Adjusted columns
An adjusted column is either set centered, or ﬂush left, or ﬂush right. This may happen
by default, built into the environment, or so speciﬁed in the code.

194
Chapter 7
Multiline math displays
For instance, in the displayed formula
𝑥1𝑥2 + 𝑥2
1𝑥2
2 + 𝑥3,
𝑥1𝑥3 + 𝑥2
1𝑥2
3 + 𝑥2
typeset with the gather environment, by default all the lines are centered.
On the other hand, in
(
1
100
115
201
0
1
)
coded with the array subsidiary math environment, the ﬁrst column is ﬂush left, the
second centered, the third ﬂush right.
7.1.4
Aligned columns
Aligned columns, on the other hand, are only of one kind, aligned by you. For instance,
𝑓(𝑥) = 𝑥+ 𝑦𝑧
𝑔(𝑥) = 𝑥+ 𝑦+ 𝑧
ℎ(𝑥) = 𝑥𝑦+ 𝑥𝑧+ 𝑦𝑧
𝑘(𝑥) = (𝑥+ 𝑦)(𝑥+ 𝑧)(𝑦+ 𝑧)
is coded with the alignat environment. It has two aligned columns, both aligned at
the = signs.
7.1.5
Touring the Visual Guide
Figure 7.1, the Visual Guide, shows thumbnail pictures of the various kinds of multiline
math environments and subsidiary math environments.
The ﬁrst part of the Visual Guide illustrates gather and multline. The gather
environment is a one-column, centered math environment—discussed in Section 7.2—
which is used to display a number of formulas collected into one multiline formula.
In contrast, multline—discussed in Section 7.3—displays one long formula in a num-
ber of lines. The ﬁrst line is set ﬂush left, the last line set ﬂush right, and the rest (if any)
of the lines are centered.
The third part of the Visual Guide illustrates the align environment and two of
its variants, alignat and flalign, discussed in Section 7.5.
Three adjusted subsidiary math environments—matrix, cases, and array—are
illustrated in second part of the Visual Guide and presented in Section 7.7.
The aligned subsidiary math environments aligned and gathered look just like
the align and gather environments, so they are not illustrated in the Visual Guide.
The aligned and gathered environments—along with \itemref—are discussed in
Section 7.6, along with the split subsidiary math environment; this last one is illus-
trated in the last part of the Visual Guide.

7.2
Gathering formulas
195
7.2
Gathering formulas
The gather environment groups a number of one-line formulas, each centered on a
separate line:
𝑥1𝑥2 + 𝑥2
1𝑥2
2 + 𝑥3,
(1)
𝑥1𝑥3 + 𝑥2
1𝑥2
3 + 𝑥2,
(2)
𝑥1𝑥2𝑥3.
(3)
Formulas (1)–(3) are typed as follows:
\begin{gather}
x_{1} x_{2}+x_{1}^{2} x_{2}^{2} + x_{3},\label{E:1.1}\\
x_{1} x_{3}+x_{1}^{2} x_{3}^{2} + x_{2},\label{E:1.2}\\
x_{1} x_{2} x_{3}.\label{E:1.3}
\end{gather}
Rule
gather environment
1. Lines are separated with \\. Do not type \\ at the end of the last line!
2. Each line is numbered unless it has a \tag or \notag on the line before the line
separator \\.
3. No blank lines are permitted within the environment.
The gather* environment is like gather, except that all lines are unnumbered.
They can still be \tag-ged.
It would seem natural to code formulas (1)–(3) with three equation environments:
\begin{equation}
x_{1} x_{2}+x_{1}^{2} x_{2}^{2} + x_{3},\label{E:1.1}
\end{equation}
\begin{equation}
x_{1} x_{3}+x_{1}^{2} x_{3}^{2} + x_{2},\label{E:1.2}
\end{equation}
\begin{equation}
x_{1} x_{2} x_{3}.\label{E:1.3}
\end{equation}

196
Chapter 7
Multiline math displays
Note how bad this looks typeset:
(1)
𝑥1𝑥2 + 𝑥2
1𝑥2
2 + 𝑥3,
(2)
𝑥1𝑥3 + 𝑥2
1𝑥2
3 + 𝑥2,
(3)
𝑥1𝑥2𝑥3.
7.3
Splitting long formulas
The multline environment is used to split one very long formula into several lines.
The ﬁrst line is set ﬂush left, the last line is set ﬂush right, and the middle lines are
centered:
(4)
(𝑥1𝑥2𝑥3𝑥4𝑥5𝑥6)2
+ (𝑦1𝑦2𝑦3𝑦4𝑦5 + 𝑦1𝑦3𝑦4𝑦5𝑦6 + 𝑦1𝑦2𝑦4𝑦5𝑦6 + 𝑦1𝑦2𝑦3𝑦5𝑦6)2
+ (𝑧1𝑧2𝑧3𝑧4𝑧5 + 𝑧1𝑧3𝑧4𝑧5𝑧6 + 𝑧1𝑧2𝑧4𝑧5𝑧6 + 𝑧1𝑧2𝑧3𝑧5𝑧6)2
+ (𝑢1𝑢2𝑢3𝑢4 + 𝑢1𝑢2𝑢3𝑢5 + 𝑢1𝑢2𝑢4𝑢5 + 𝑢1𝑢3𝑢4𝑢5)2
This formula is typed as
\begin{multline}\label{E:mm2}
(x_{1} x_{2} x_{3} x_{4} x_{5} x_{6})^{2}\\
+ (y_{1} y_{2} y_{3} y_{4} y_{5}
+ y_{1} y_{3} y_{4} y_{5} y_{6}
+ y_{1} y_{2} y_{4} y_{5} y_{6}
+ y_{1} y_{2} y_{3} y_{5} y_{6})^{2}\\
+ (z_{1} z_{2} z_{3} z_{4} z_{5}
+ z_{1} z_{3} z_{4} z_{5} z_{6}
+ z_{1} z_{2} z_{4} z_{5} z_{6}
+ z_{1} z_{2} z_{3} z_{5} z_{6})^{2}\\
+ (u_{1} u_{2} u_{3} u_{4} + u_{1} u_{2} u_{3} u_{5}
+ u_{1} u_{2} u_{4} u_{5} + u_{1} u_{3} u_{4} u_{5})^{2}
\end{multline}
Rule
multline environment
1. Lines are separated with \\. Do not type \\ at the end of the last line!
2. The formula is numbered as a whole unless it is \tag-ged or the numbering is sup-
pressed with \notag. (Alternatively, use the multline* environment.)

7.3
Splitting long formulas
197
3. No blank lines are permitted within the environment.
4. Each line is a subformula (see Section 7.4.2).
If you are very observant, you may have noticed that we failed to type {}+ follow-
ing the line separators of the formula. In Section 6.1.2, you were told that this omission
would result in the second line being typeset as
+(𝑦1𝑦2𝑦3𝑦4𝑦5 + 𝑦1𝑦3𝑦4𝑦5𝑦6 + 𝑦1𝑦2𝑦4𝑦5𝑦6 + 𝑦1𝑦2𝑦3𝑦5𝑦6)2
The multline environment, however, knows that a long formula is being broken and
so typesets + as a binary operation.
A common mistake is to write multiline for multline, resulting in the message:
! LaTeX Error: Environment multiline undefined.
In the multline* environment, the formula is not numbered but can be \tag-ged.
The indentation of the ﬁrst and last lines is controlled by the \multlinegap length
command, with a default of 10 points, unless there is a tag on one of those lines. You
can adjust the indentation by enclosing the multline environment in a setlength
environment (see Section 14.5.2 ), as follows:
\begin{multline*}
(x_{1} x_{2} x_{3} x_{4} x_{5} x_{6})^{2}\\
+ (x_{1} x_{2} x_{3} x_{4} x_{5}
+ x_{1} x_{3} x_{4} x_{5} x_{6}
+ x_{1} x_{2} x_{4} x_{5} x_{6}
+ x_{1} x_{2} x_{3} x_{5} x_{6})^{2}\\
+ (x_{1} x_{2} x_{3} x_{4} + x_{1} x_{2} x_{3} x_{5}
+ x_{1} x_{2} x_{4} x_{5} + x_{1} x_{3} x_{4})^{2}
\end{multline*}
\begin{setlength}{\multlinegap}{0pt}
\begin{multline*}
(x_{1} x_{2} x_{3} x_{4} x_{5} x_{6})^{2}\\
+ (x_{1} x_{2} x_{3} x_{4} x_{5}
+ x_{1} x_{3} x_{4} x_{5} x_{6}
+ x_{1} x_{2} x_{4} x_{5} x_{6}
+ x_{1} x_{2} x_{3} x_{5} x_{6})^{2}\\
+ (x_{1} x_{2} x_{3} x_{4} + x_{1} x_{2} x_{3} x_{5}
+ x_{1} x_{2} x_{4} x_{5} + x_{1} x_{3} x_{4})^{2}
\end{multline*}
\end{setlength}
which typesets as
(𝑥1𝑥2𝑥3𝑥4𝑥5𝑥6)2
+ (𝑥1𝑥2𝑥3𝑥4𝑥5 + 𝑥1𝑥3𝑥4𝑥5𝑥6 + 𝑥1𝑥2𝑥4𝑥5𝑥6 + 𝑥1𝑥2𝑥3𝑥5𝑥6)2
+ (𝑥1𝑥2𝑥3𝑥4 + 𝑥1𝑥2𝑥3𝑥5 + 𝑥1𝑥2𝑥4𝑥5 + 𝑥1𝑥3𝑥4)2

198
Chapter 7
Multiline math displays
(𝑥1𝑥2𝑥3𝑥4𝑥5𝑥6)2
+ (𝑥1𝑥2𝑥3𝑥4𝑥5 + 𝑥1𝑥3𝑥4𝑥5𝑥6 + 𝑥1𝑥2𝑥4𝑥5𝑥6 + 𝑥1𝑥2𝑥3𝑥5𝑥6)2
+ (𝑥1𝑥2𝑥3𝑥4 + 𝑥1𝑥2𝑥3𝑥5 + 𝑥1𝑥2𝑥4𝑥5 + 𝑥1𝑥3𝑥4)2
Notice that the second variant is not indented.
Any line of a multline environment can be typeset ﬂush left or right by making
it the argument of a \shoveleft or \shoveright command, respectively (same with
multline*). For instance, to typeset the second line of formula (4) ﬂush left, as in
(𝑥1𝑥2𝑥3𝑥4𝑥5𝑥6)2
+ (𝑥1𝑥2𝑥3𝑥4𝑥5 + 𝑥1𝑥3𝑥4𝑥5𝑥6 + 𝑥1𝑥2𝑥4𝑥5𝑥6 + 𝑥1𝑥2𝑥3𝑥5𝑥6)2
+ (𝑥1𝑥2𝑥3𝑥4 + 𝑥1𝑥2𝑥3𝑥5 + 𝑥1𝑥2𝑥4𝑥5 + 𝑥1𝑥3𝑥4𝑥5)2
type the formula as follows:
\begin{multline*}
(x_{1} x_{2} x_{3} x_{4} x_{5} x_{6})^{2}\\
\shoveleft{+ (x_{1} x_{2} x_{3} x_{4} x_{5}
+ x_{1} x_{3} x_{4} x_{5} x_{6}
+ x_{1} x_{2} x_{4} x_{5} x_{6}
+ x_{1} x_{2} x_{3} x_{5} x_{6})^{2}}\\
+ (x_{1} x_{2} x_{3} x_{4} + x_{1} x_{2} x_{3} x_{5}
+ x_{1} x_{2} x_{4} x_{5}
+ x_{1} x_{3} x_{4} x_{5})^{2}
\end{multline*}
Observe that the entire line is the argument of the \shoveleft command, which is
followed by \\ unless it is the last line of the environment.
7.4
Some general rules
7.4.1
General rules
Even though you have only seen a few examples of multiline math environments, I ven-
ture to point out now that the multiline math environments and subsidiary math envi-
ronments share a number of rules.
Rule
Multiline math environments
1. Lines are separated with \\. Do not type \\ at the end of the last line!
2. No blank lines are permitted within an environment.
3. No blank line before the environment.

7.4
Some general rules
199
4. If an environment contains more than one formula, then, as a rule, each formula is
numbered separately. If you add a \label command to a line, then the equation
number generated for that line can be cross-referenced.
5. You can suppress the numbering of a line by using a \notag command on the line.
6. You can also override numbering with the \tag command, which works just as it
does for equations (see Section 6.6).
7. \tag and \label should always precede the line separator \\ for lines that are
regarded as formulas in their own right. For instance, the lines of the multline
environment cannot be individually numbered or tagged. The \tag command works
for individual lines, not for the environment as a whole.
8. For cross-referencing, use \label, \ref, and \eqref in the same way you would
for an equation (see Section 5.3).
9. Each multiline math environment has a *-ed form, which suppresses numbering.
Individual formulas can still be \tag-ged.
A \notag command placed after the environment is ignored, but a \tag command
gives the message
! Package amsmath Error: \tag not allowed here.
7.4.2
Subformula rules
A formula in the multline environment is split into a number of parts by \\ com-
mands; for instance, formula (4) is split into three parts:
1. (x_{1} x_{2} x_{3} x_{4} x_{5} x_{6})^{2}
2.
+ (x_{1} x_{2} x_{3} x_{4} x_{5}
+ x_{1} x_{3} x_{4} x_{5} x_{6}
+ x_{1} x_{2} x_{4} x_{5} x_{6}
+ x_{1} x_{2} x_{3} x_{5} x_{6})^{2}
3.
+ (x_{1} x_{2} x_{3} x_{4}+x_{1} x_{2} x_{3} x_{5} +
x_{1} x_{2} x_{4} x_{5}+x_{1} x_{3} x_{4} x_{5})^{2}
Such parts of a formula are called subformulas.
The ﬁrst line of the aligned formula 𝑟2 = 𝑠2 + 𝑡2—from the simple alignment
example in Section 1.7.3—which is typed as
r^{2} &= s^{2} + t^{2}
is split into two parts:
1.
r^{2}
2.
= s^{2} + t^{2}

200
Chapter 7
Multiline math displays
In general, in a line of an aligned formula, the ﬁrst part is everything between the begin-
ning of the line and the ﬁrst & symbol. There can then be a number of parts delimited
by two consecutive & symbols. Finally, the last part is from the last & symbol to the end
of the line or the line separator \\. These parts are also called subformulas.
Here are the last of the general rules.
Rule
Subformula
1. Each subformula must be a formula that LATEX can typeset independently.
2. If a subformula starts with the binary operation + or -, type it as {}+ or {}-.
3. If a subformula ends with the binary operation + or -, type it as +{} or -{}.
Suppose that you want to split the formula
𝑥1 + 𝑦1 +
(
∑
𝑖<5
(
5
𝑖
)
+ 𝑎2
)2
just before the binomial coeﬃcient. Try
\begin{multline}
x_{1} + y_{1} + \left( \sum_{i < 5}\\
\binom{5}{i} + a^{2} \right)^{2}
\end{multline}
When typesetting this formula, you get the message
! Missing \right. inserted.
because the ﬁrst subformula violates the ﬁrst subformula rule.
x_{1} + y_{1} + \left( \sum_{i < 5}
cannot be typeset by LATEX because the \left( command must be matched by the
\right command and some delimiter.
Testing for the ﬁrst subformula rule is easy. Split the formula into its subformulas,
and test each subformula separately by typesetting it.
7.4.3
Breaking and aligning formulas
You do not have to know where and how to break inline math formulas because LATEX
does all the work for you.
Unfortunately, multiline formulas are diﬀerent. LATEX gives you excellent tools for
displaying multiline math formulas, but oﬀers you no advice on deciding where to break
a long formula into lines. And that is how it should be. You, the author, are the only
judge of where to break a long formula so that the result is mathematically informative
and follows the traditions of mathematical typesetting.

7.4
Some general rules
201
A strict set of rules is formulated in Mathematics into Type by Ellen Swanson,
Arlene Ann O’Sean, and Antoinette Tingley Schleyer [68]. I state only three.
Rule
Breaking displayed formulas
1. Try to break a long formula before a binary relation or binary operation.
2. If you break a formula before a + or -, start the next line with {}+ or {}-.
3. If you break a formula within a bracket, indent the next line so that it begins to the
right of the opening bracket.
Formula (4) on page 196 illustrates the ﬁrst rule. Here is an illustration of the third
rule:
𝑓(𝑥, 𝑦, 𝑧, 𝑢) = [(𝑥+ 𝑦+ 𝑧) × (𝑥2 + 𝑦2 + 𝑧2 −1)
× (𝑥3 + 𝑦3 + 𝑧3 −𝑢) × (𝑥4 + 𝑦4 + 𝑧4 + 𝑢)]2
The rules for aligning columns are similar.
Rule
Aligning columns
1. Try to align columns at a binary relation or a binary operation.
2. If you align a column at a binary relation, put the & symbol immediately to the left
of the binary relation.
3. If you align a column at the binary operation + or -, put the & symbol to the left of
the binary operation.
7.4.4
Numbering groups of formulas
With most constructs in this chapter, you have a number of equations typeset together,
arranged in some way, aligned or adjusted. Each equation is numbered separately, unl-
ess \tag-ged or \notag-ged. Often, you may want the equations to share a common
number, but still be able to reference each equation separately.
You can change the numbering of the equations on page 195 in formulas (1)–(3)
to (1), (1a), and (1b) as follows:
\begin{gather}
x_{1} x_{2} + x_{1}^{2} x_{2}^{2} + x_{3},
\label{E:1}\\
x_{1} x_{3} + x_{1}^{2} x_{3}^{2} + x_{2},
\tag{\ref{E:1}a}\\
x_{1} x_{2} x_{3};\tag{\ref{E:1}b}
\end{gather}

202
Chapter 7
Multiline math displays
produces the desired result:
𝑥1𝑥2 + 𝑥2
1𝑥2
2 + 𝑥3,
(1)
𝑥1𝑥3 + 𝑥2
1𝑥2
3 + 𝑥2,
(1a)
𝑥1𝑥2𝑥3;
(1b)
To obtain (1′) or (1’) type
\tag{\ref{E:1}$’$}
or
\tag{(\ref{E:1}\textquoteright)}
and for (1a), type
\tag{\ref{E:1}${}_{\text{a}}$}
Alternatively, you may include the gather environment in a subequations en-
vironment (see Section 6.6):
𝑥1𝑥2 + 𝑥2
1𝑥2
2 + 𝑥3,
(5a)
𝑥1𝑥3 + 𝑥2
1𝑥2
3 + 𝑥2,
(5b)
𝑥1𝑥2𝑥3,
(5c)
typed as
\begin{subequations}\label{E:gp}
\begin{gather}
x_{1} x_{2} + x_{1}^{2} x_{2}^{2} + x_{3},
\label{E:gp1}\\
x_{1} x_{3} + x_{1}^{2} x_{3}^{2} + x_{2},
\label{E:gp2}\\
x_{1} x_{2} x_{3},\label{E:gp3}
\end{gather}
\end{subequations}
Then \eqref{E:gp} references the whole group of equations as (5), while
\eqref{E:gp1}, \eqref{E:gp2}, and \eqref{E:gp3}
reference the individual formulas as (5a), (5b), and (5c).
7.5
Aligned columns
The lines of multiline formulas are naturally divided into columns. In this section, we
discuss how to typeset such formulas with aligned columns. All of these constructs are
implemented with the align math environment and its variants.

7.5
Aligned columns
203
In Section 1.7.3, you saw two simple, one-column examples of aligned columns—
which we called simple alignment—and a special case of aligned columns—which we
called annotated alignment.
The align environment can also create multiple aligned columns. The number of
columns is restricted only by the width of the page. In the following example, there are
two aligned columns:
𝑓(𝑥) = 𝑥+ 𝑦𝑧
𝑔(𝑥) = 𝑥+ 𝑦+ 𝑧
(6)
ℎ(𝑥) = 𝑥𝑦+ 𝑥𝑧+ 𝑦𝑧
𝑘(𝑥) = (𝑥+ 𝑦)(𝑥+ 𝑧)(𝑦+ 𝑧)
typed as
\begin{align}\label{E:mm3}
f(x) &= x + yz
& g(x) &= x + y + z\\
h(x) &= xy + xz + yz
& k(x) &= (x + y)(x + z)(y + z)
\notag
\end{align}
Use Figure 7.2 to visualize how the alignment points in the source turn into align-
ment points in the typeset formula and the role played by the intercolumn space.
Remember that the visual layout of the source is for your beneﬁt only.
In a multicolumn align environment, the ampersand (&) plays two roles. It is a
mark for the alignment point and it is also a column separator. In the line
f(x) &= x + yz
& g(x) &= x + y + z
the two columns are
1.
f(x) &= x + yz
2.
g(x) &= x + y + z
In each column, we use a single ampersand to mark the alignment point. Of the three &
symbols in the previous example,
The ﬁrst & marks the alignment point of the ﬁrst column.
The second & is a column separator that separates the ﬁrst and second columns.
The third & marks the alignment point of the second column.
I use the convention of typing a space on the left of an alignment point & and no space
on the right, and of putting spaces on both sides of & as a column separator.
If the number of columns is three, then there should be ﬁve &’s in each line. Even-
numbered &’s are column separators and odd-numbered &’s are alignment marks.
Rule
Ampersands
If there are 𝑛aligned columns, then each line should have at most 2𝑛−1 amper-
sands. Even-numbered &’s are column separators; odd-numbered &’s mark the align-
ment points.

204
Chapter 7
Multiline math displays
f(x) &= x + yz
& g(x) &= x + y + z\\
h(x) &= xy + xz + yz
& k(x) &= (x + y)(x + z)(y + z)
alignment points
first column
second column
alignment points
of second column
of first column
start of second column
f(x) = x + yz
g(x) = x + y + z
(6)
h(x) = xy + xz + yz
k(x) = (x + y)(x + z)(y + z)
second column
first column
intercolumn space
alignment points
of second column
alignment points
of first column
Figure 7.2: Two aligned columns: source and typeset.
So for a single aligned column, you have to place one alignment point for each
line. For two aligned columns, you have to place at most three alignment points for
each line. The beginning of the line to the second & is the ﬁrst column, then from the
second & to the end of the line is the second column. Each line of each column has an
alignment point marked by &.
A column in a line may be empty—a gap is produced—or it may have only a few
columns. Both of these are illustrated by
𝑎1
𝑐1
𝑏2
𝑐2
𝑎3
typed as
\begin{align*}
& a_1 &
&
&
&c_1\\
&
&
&b_2 &
&c_2\\
& a_3
\end{align*}

7.5
Aligned columns
205
7.5.1
An align variant
A variant of align is the ﬂush alignment environment flalign, which moves the
leftmost column as far left and the rightmost column as far right as space allows, making
more room for the formula. Here is formula (6) again, followed by the flalign variant:
𝑓(𝑥) = 𝑥+ 𝑦𝑧
𝑔(𝑥) = 𝑥+ 𝑦+ 𝑧
(6)
ℎ(𝑥) = 𝑥𝑦+ 𝑥𝑧+ 𝑦𝑧
𝑘(𝑥) = (𝑥+ 𝑦)(𝑥+ 𝑧)(𝑦+ 𝑧)
𝑓(𝑥) = 𝑥+ 𝑦𝑧
𝑔(𝑥) = 𝑥+ 𝑦+ 𝑧
(7)
ℎ(𝑥) = 𝑥𝑦+ 𝑥𝑧+ 𝑦𝑧
𝑘(𝑥) = (𝑥+ 𝑦)(𝑥+ 𝑧)(𝑦+ 𝑧)
The variant is typed as follows:
\begin{flalign}\label{E:mm3fl}
f(x) &= x + yz
& g(x) &= x + y + z\\
h(x) &= xy + xz + yz & k(x) &= (x + y)(x + z)(y + z)
\notag
\end{flalign}
7.5.2
eqnarray, the ancestor of align
LATEX’s original aligned math environment is eqnarray. Here is an example:
\begin{eqnarray}
x & = & 17y\\
y & > & a + b + c
\end{eqnarray}
which typesets as
𝑥
=
17𝑦
(8)
𝑦
>
𝑎+ 𝑏+ 𝑐
(9)
You can type the same formulas with align:
\begin{align}
x
& =
17y\\
y
& >
a + b + c
\end{align}
which typesets as
𝑥= 17𝑦
(10)
𝑦> 𝑎+ 𝑏+ 𝑐
(11)
In the eqnarray environment the spacing is based on the spacing of the columns rather
than on the spacing requirements of the symbols.
I mention eqnarray not for historical reasons but for a very practical one. Unfor-
tunately, a large number of journal submissions still use this construct, and have to be
recoded in the editorial oﬃces. Be kind to your editor and do not use eqnarray.

206
Chapter 7
Multiline math displays
7.5.3
The subformula rule revisited
Suppose that you want to align the formula
𝑥1 + 𝑦1 +
(
∑
𝑖
(
5
𝑖
)
+ 𝑎2
)2
with
(
∑
𝑖
(
5
𝑖
)
+ 𝛼2
)2
so that the + 𝑎2 in the ﬁrst formula aligns with the + 𝛼2 in the second formula. You
might try typing
\begin{align*}
x_{1} + y_{1} + \left( \sum_i \binom{5}{i}
&+ a^{2} \right)^{2}\\
\left( \sum_i \binom{5}{i} &+ \alpha^{2} \right)^{2}
\end{align*}
But when you typeset this formula, you get the message
! Extra }, or forgotten \right.
This alignment structure violates the subformula rule because LATEX cannot typeset
x_{1} + y_{1} + \left( \sum_i \binom{5}{i}
so it is not a subformula.
As another simple example, try to align the + in (𝑎+𝑏
2
) with the + in 𝑥+ 𝑦:
\begin{align}
\binom{a &+ b}{2}\\
x &+ y
\end{align}
When typesetting this formula, you get the message
! Missing } inserted.
Again, LATEX cannot typeset the subformula \binom{a.
To align the two formulas in the ﬁrst example, add a \phantom command to push
the second line to the right:
\begin{align*}
&x_{1} + y_{1} + \left( \sum_{i < 5} \binom{5}{i}
+ a^{2} \right)^{2}\\
&\phantom{x_{1} + y_{1} + {}}
\left( \sum_{i < 5} \binom{5}{i} + \alpha^{2}
\right)^{2}
\end{align*}

7.5
Aligned columns
207
yielding
𝑥1 + 𝑦1 +
(
∑
𝑖<5
(
5
𝑖
)
+ 𝑎2
)2
(
∑
𝑖<5
(
5
𝑖
)
+ 𝛼2
)2
7.5.4
The alignat environment
Another variant of the align environment is the alignat environment, which is one of
the most important alignment environments. While the align environment calculates
how much space to put between the columns, the alignat environment leaves spacing
up to the user. It is important to note that the alignat environment has a required
argument, the number of columns.
Here is formula (6) typed with the alignat environment:
\begin{alignat}{2}\label{E:mm3A}
f(x) &= x + yz
& g(x) &= x + y + z\\
h(x) &= xy + xz + yz & k(x) &= (x + y)(x + z)(y + z)
\notag
\end{alignat}
which typesets as
𝑓(𝑥) = 𝑥+ 𝑦𝑧
𝑔(𝑥) = 𝑥+ 𝑦+ 𝑧
(12)
ℎ(𝑥) = 𝑥𝑦+ 𝑥𝑧+ 𝑦𝑧𝑘(𝑥) = (𝑥+ 𝑦)(𝑥+ 𝑧)(𝑦+ 𝑧)
This attempt did not work very well because alignat did not separate the two formulas
in the second line. So you must provide the intercolumn spacing. For instance, if you
want a \qquad space between the columns, as in
𝑓(𝑥) = 𝑥+ 𝑦𝑧
𝑔(𝑥) = 𝑥+ 𝑦+ 𝑧
(13)
ℎ(𝑥) = 𝑥𝑦+ 𝑥𝑧+ 𝑦𝑧
𝑘(𝑥) = (𝑥+ 𝑦)(𝑥+ 𝑧)(𝑦+ 𝑧)
then type the formula as
\begin{alignat}{2}\label{E:mm3B}
f(x) &= x + yz
& g(x) &= x + y + z\\
h(x) &= xy + xz + yz \qquad & k(x) &= (x+y)(x+z)(y+z)
\notag
\end{alignat}
The alignat environment is especially appropriate when annotating formulas
where you would normally want a \quad between the formula and the text. To ob-
tain
𝑥= 𝑥∧(𝑦∨𝑧)
(by distributivity)
(14)
= (𝑥∧𝑦) ∨(𝑥∧𝑧)
(by condition (M))
= 𝑦∨𝑧

208
Chapter 7
Multiline math displays
type
\begin{alignat}{2}\label{E:mm4}
x &= x \wedge (y \vee z) &
&\quad\text{(by distributivity)}\\
&= (x \wedge y) \vee (x \wedge z) & &
\quad\text{(by condition (M))}\notag\\
&= y \vee z \notag
\end{alignat}
The alignat environment is very important for typing systems of equations such as
(𝐴+ 𝐵𝐶)𝑥+
𝐶𝑦= 0,
(15)
𝐸𝑥+ (𝐹+ 𝐺)𝑦= 23.
(16)
typed as follows:
\begin{alignat}{2}
(A + B C)x &+{} &C
&y = 0,\\
Ex &+{} &(F + G)&y = 23.
\end{alignat}
Note again +{}. See also the subformula rule in Section 7.4.2.
As a last example, consider
𝑎11𝑥1 + 𝑎12𝑥2 + 𝑎13𝑥3
= 𝑦1,
(17)
𝑎21𝑥1 + 𝑎22𝑥2
+ 𝑎24𝑥4 = 𝑦2,
(18)
𝑎31𝑥1
+ 𝑎33𝑥3 + 𝑎34𝑥4 = 𝑦3.
(19)
typed as
\begin{alignat}{4}
a_{11}x_1 &+ a_{12}x_2 &&+ a_{13}x_3 &&
&&= y_1,\\
a_{21}x_1 &+ a_{22}x_2 &&
&&+ a_{24}x_4
&&= y_2,\\
a_{31}x_1 &
&&+ a_{33}x_3 &&+ a_{34}x_4
&&= y_3.
\end{alignat}
Note that the argument of alignat does not have to be precise. If you want two
columns, the argument can be 2, or 3, or any larger number. If you want to, you can
simply type 10 and just ignore the argument. You may deﬁne a new environment (see
Section 14.2.1) that does just that.
7.5.5
Inserting text
The \intertext command places one or more lines of text in the middle of an aligned
environment. For instance, to obtain

7.5
Aligned columns
209
ℎ(𝑥) = ∫
(
𝑓(𝑥) + 𝑔(𝑥)
1 + 𝑓2(𝑥) + 1 + 𝑓(𝑥)𝑔(𝑥)
√
1 −sin 𝑥
)
𝑑𝑥
(20)
The reader may ﬁnd the following form easier to read:
= ∫
1 + 𝑓(𝑥)
1 + 𝑔(𝑥) 𝑑𝑥−2 arctan(𝑥−2)
you would type
\begin{align}\label{E:mm5}
h(x) &= \int \left(
\frac{ f(x) + g(x) }
{1 + f^{2}(x)} +
\frac{1 + f(x)g(x)}
{ \sqrt{1 - \sin x} }
\right) \, dx\\
\intertext{The reader may find the following form
easier to read:}
&= \int \frac{1 + f(x)}
{1 + g(x)}
\, dx - 2 \arctan(x - 2) \notag
\end{align}
Notice how the equal sign in the ﬁrst formula is aligned with the equal sign in the second
formula even though a line of text separates the two.
Here is another example, this one using align*:
𝑓(𝑥) = 𝑥+ 𝑦𝑧
𝑔(𝑥) = 𝑥+ 𝑦+ 𝑧
The reader may also ﬁnd the following polynomials useful:
ℎ(𝑥) = 𝑥𝑦+ 𝑥𝑧+ 𝑦𝑧
𝑘(𝑥) = (𝑥+ 𝑦)(𝑥+ 𝑧)(𝑦+ 𝑧)
is typed as
\begin{align*}
f(x) &= x + yz & \qquad g(x) &= x + y + z\\
\intertext{The reader may also find the following
polynomials useful:}
h(x) &= xy + xz + yz
& \qquad k(x) &= (x + y)(x + z)(y + z)
\end{align*}

210
Chapter 7
Multiline math displays
The \intertext command must follow a line separator command,
\\ or \\* (see
Section 7.9). If you violate this rule, you get the message
! Misplaced \noalign. \intertext #1->\noalign
{\penalty \postdisplaypenalty
\vskip ...
The text in \intertext can be centered using a center environment or with the
\centering command (see Section 4.3).
7.6
Aligned subsidiary math environments
A subsidiary math environment is a math environment that can only be used inside
another math environment. Think of it as creating a “large math symbol”.
In this section, we discuss aligned subsidiary math environments. We discuss ad-
justed subsidiary math environments, including cases, in Section 7.7.
7.6.1
Subsidiary variants
The align, alignat, and gather environments (see Sections 7.5, 7.5.4, and 7.2) have
subsidiary versions. They are called aligned, alignedat, and gathered. To obtain
𝑥= 3 + 𝐩+ 𝛼
𝑦= 4 + 𝐪
𝑧= 5 + 𝐫
𝑢= 6 + 𝐬
using
𝐩= 5 + 𝑎+ 𝛼
𝐪= 12
𝐫= 13
𝐬= 11 + 𝑑
type
\[
\begin{aligned}
x &= 3 + \mathbf{p} + \alpha\\
y &= 4 + \mathbf{q}\\
z &= 5 + \mathbf{r}\\
u &=6 + \mathbf{s}
\end{aligned}
\text{\qquad using\qquad}
\begin{gathered}
\mathbf{p} = 5 + a + \alpha\\
\mathbf{q} = 12\\
\mathbf{r} = 13\\
\mathbf{s} = 11 + d
\end{gathered}
\]

7.6
Aligned subsidiary math environments
211
Note how the list of aligned formulas
𝑥= 3 + 𝑝+ 𝛼
𝑦= 4 + 𝐪
𝑧= 5 + 𝐫
𝑢= 6 + 𝐬
and the list of centered formulas
𝐩= 5 + 𝑎+ 𝛼
𝐪= 12
𝐫= 13
𝐬= 11 + 𝑑
are treated as individual large symbols.
The aligned, alignedat, and gathered subsidiary math environments follow
the same rules as align and gather. The aligned subsidiary math environment al-
lows any number of columns, but you must specify the intercolumn spacing as in the
alignat environment.
You can use the aligned subsidiary math environment to rewrite formula (4)
from Section 1.7.3 so that the formula number is centered between the two lines:
(21)
ℎ(𝑥) = ∫
(
𝑓(𝑥) + 𝑔(𝑥)
1 + 𝑓2(𝑥) + 1 + 𝑓(𝑥)𝑔(𝑥)
√
1 −sin 𝑥
)
𝑑𝑥
= ∫
1 + 𝑓(𝑥)
1 + 𝑔(𝑥) 𝑑𝑥−2 arctan(𝑥−2)
this is typed as
\begin{equation}\label{E:mm6}
\begin{aligned}
h(x) &= \int \left(
\frac{ f(x) + g(x) }
{ 1 + f^{2}(x) } +
\frac{ 1 + f(x)g(x) }
{ \sqrt{1 - \sin x} }
\right) \, dx\\
&= \int \frac{ 1 + f(x) }
{ 1 + g(x) } \, dx - 2 \arctan (x - 2)
\end{aligned}
\end{equation}
See Section 7.6.2 for a better way to split a long formula.
Symbols, as a rule, are vertically centrally aligned. This is not normally an is-
sue with math symbols, but it may be important with large symbols created by sub-
sidiary math environments. The subsidiary math environments, aligned, gathered,

212
Chapter 7
Multiline math displays
and array, take c, t, or b as optional arguments to force vertically centered, top, or
bottom alignment, respectively. The default is c (centered). To obtain
𝑥= 3 + 𝐩+ 𝛼
𝑦= 4 + 𝐪
𝑧= 5 + 𝐫
𝑢= 6 + 𝐬
using
𝐩= 5 + 𝑎+ 𝛼
𝐪= 12
𝐫= 13
𝐬= 11 + 𝑑
for example, you would type
\[
\begin{aligned}[b]
x &= 3 + \mathbf{p} + \alpha\\
y &= 4 + \mathbf{q}\\
z &= 5 + \mathbf{r}\\
u &=6 + \mathbf{s}
\end{aligned}
\text{\qquad using\qquad}
\begin{gathered}[b]
\mathbf{p} = 5 + a + \alpha\\
\mathbf{q} = 12\\
\mathbf{r} = 13\\
\mathbf{s} = 11 + d
\end{gathered}
\]
There is no numbering or \tag-ing allowed in subsidiary math environments be-
cause LATEX does not number or tag what it considers to be a single symbol.
7.6.2
Split
The split subsidiary math environment is used to split a long formula into aligned
parts. There are two major advantages to use split:
1. The math environment that contains it considers the split environment to be a
single equation, so it generates only one number for it.
2. If a split environment appears inside an align environment, the alignment point
of the split environment is recognized by align and is used in aligning all the
formulas in the align environment.
To illustrate the ﬁrst advantage, consider
(𝑥1𝑥2𝑥3𝑥4𝑥5𝑥6)2
+ (𝑥1𝑥2𝑥3𝑥4𝑥5 + 𝑥1𝑥3𝑥4𝑥5𝑥6 + 𝑥1𝑥2𝑥4𝑥5𝑥6 + 𝑥1𝑥2𝑥3𝑥5𝑥6)2
(22)
typed as

7.6
Aligned subsidiary math environments
213
\begin{equation}\label{E:mm7}
\begin{split}
(x_{1}x_{2}&x_{3}x_{4}x_{5}x_{6})^{2}\\
&+ (x_{1}x_{2}x_{3}x_{4}x_{5}
+ x_{1}x_{3}x_{4}x_{5}x_{6}
+ x_{1}x_{2}x_{4}x_{5}x_{6}
+ x_{1}x_{2}x_{3}x_{5}x_{6})^{2}
\end{split}
\end{equation}
See also the two examples of split in the secondarticle.tex sample article in
Section 9.3 and in the samples folder (see page 5).
To illustrate the second advantage, here is an example of a split subsidiary math
environment within an align environment:
𝑓= (𝑥1𝑥2𝑥3𝑥4𝑥5𝑥6)2
= (𝑥1𝑥2𝑥3𝑥4𝑥5 + 𝑥1𝑥3𝑥4𝑥5𝑥6 + 𝑥1𝑥2𝑥4𝑥5𝑥6 + 𝑥1𝑥2𝑥3𝑥5𝑥6)2,
(23)
𝑔= 𝑦1𝑦2𝑦3.
(24)
which is typed as
\begin{align}\label{E:mm8}
\begin{split}
f &= (x_{1} x_{2} x_{3} x_{4} x_{5} x_{6})^{2}\\
&= (x_{1} x_{2} x_{3} x_{4} x_{5}
+ x_{1} x_{3} x_{4} x_{5} x_{6}
+ x_{1} x_{2} x_{4} x_{5} x_{6}
+ x_{1} x_{2} x_{3} x_{5} x_{6})^{2},
\end{split}\\
g &= y_{1} y_{2} y_{3}.\label{E:mm9}
\end{align}
Notice the \\ command following \end{split} to separate the lines for align.
Rule
split subsidiary math environment
1. split can only be used inside another math environment, such as displaymath,
equation, align, gather, flalign, gathered and their *-ed variants.
2. A split formula has only one number, automatically generated by LATEX, or one
tag from a \tag command. Use the \notag command to suppress numbering.
3. The \label, \tag, or \notag command must precede \begin{split} or follow
\end{split}.

214
Chapter 7
Multiline math displays
Here is an example of split inside a gather environment:
\begin{gather}\label{E:mm10}
\begin{split}
f &= (x_{1} x_{2} x_{3} x_{4} x_{5} x_{6})^{2}\\
&= (x_{1} x_{2} x_{3} x_{4} x_{5}
+ x_{1} x_{3} x_{4} x_{5} x_{6}
+ x_{1} x_{2} x_{4} x_{5} x_{6}
+ x_{1} x_{2} x_{3} x_{5} x_{6})^{2}\\
&= (x_{1} x_{2} x_{3} x_{4}
+ x_{1} x_{2} x_{3} x_{5}
+ x_{1} x_{2} x_{4} x_{5}
+ x_{1} x_{3} x_{4} x_{5})^{2}
\end{split}\\
\begin{aligned}
g &= y_{1} y_{2} y_{3}\\
h &= z_{1}^{2} z_{2}^{2} z_{3}^{2} z_{4}^{2}
\end{aligned}
\end{gather}
which produces
𝑓= (𝑥1𝑥2𝑥3𝑥4𝑥5𝑥6)2
= (𝑥1𝑥2𝑥3𝑥4𝑥5 + 𝑥1𝑥3𝑥4𝑥5𝑥6 + 𝑥1𝑥2𝑥4𝑥5𝑥6 + 𝑥1𝑥2𝑥3𝑥5𝑥6)2
= (𝑥1𝑥2𝑥3𝑥4 + 𝑥1𝑥2𝑥3𝑥5 + 𝑥1𝑥2𝑥4𝑥5 + 𝑥1𝑥3𝑥4𝑥5)2
(25)
𝑔= 𝑦1𝑦2𝑦3
ℎ= 𝑧2
1𝑧2
2𝑧2
3𝑧2
4
If you try to use split outside a displayed math environment, you get the message
! Package amsmath Error: \begin{split} won’t work here.
You may want to read the discussion of the AMS document classes and amsmath
package options in Section 9.5 that modify the placement of equation numbers.
7.7
Adjusted columns
In an adjusted multiline math environment, the columns are adjusted so that they are
displayed centered, ﬂush left, or ﬂush right, instead of aligned (as in Section 7.5). Since
you have no control line by line over the alignment of the columns, & has only one role
to play—it is the column separator.
In Sections 7.2 and 7.3, we discussed two adjusted one-column math environments,
gather and multline. All the other adjusted constructs are subsidiary math environ-
ments. For example, a matrix environment (see Section 7.7.1) produces a multicolumn

7.7
Adjusted columns
215
centered display:
(
𝑎+ 𝑏+ 𝑐
𝑢𝑣
𝑥−𝑦
27
𝑎+ 𝑏
𝑢+ 𝑣
𝑧
1340
)
=
(
1
100
115
27
201
0
1
1340
)
The array environment (see Section 7.7.2) produces a multicolumn adjusted display:
(
𝑎+ 𝑏+ 𝑐
𝑢𝑣
𝑥−𝑦
27
𝑎+ 𝑏
𝑢+ 𝑣
𝑧
1340
)
=
(
1
100
115
27
201
0
1
1340
)
The columns are centered, ﬂush left, or ﬂush right. In this example, the ﬁrst matrix
has three centered columns and one ﬂush right column, while the second matrix has
four ﬂush right columns. A variant, cases (see Sections 1.7.4 and 7.7.3), produces two
columns set ﬂush left:
(26)
𝑓(𝑥) =
⎧
⎪
⎨
⎪⎩
−𝑥2,
if 𝑥< 0;
𝛼+ 𝑥,
if 0 ≤𝑥≤1;
𝑥2,
otherwise.
7.7.1
Matrices
Use the matrix subsidiary math environment to typeset matrices. For example,
\begin{equation*}
\left(
\begin{matrix}
a + b + c & uv
& x - y & 27\\
a + b
& u + v & z
& 1340
\end{matrix}
\right) =
\left(
\begin{matrix}
1
& 100 & 115 & 27\\
201 & 0
& 1
& 1340
\end{matrix}
\right)
\end{equation*}
produces
(
𝑎+ 𝑏+ 𝑐
𝑢𝑣
𝑥−𝑦
27
𝑎+ 𝑏
𝑢+ 𝑣
𝑧
1340
)
=
(
1
100
115
27
201
0
1
1340
)
If you use matrix on its own, i.e., outside a math environment,
\begin{matrix}
a + b + c & uv
& x - y & 27\\
a + b
& u + v & z
& 134
\end{matrix}

216
Chapter 7
Multiline math displays
you get the message
! Missing $ inserted.
<inserted text>
$
l.5 \begin{matrix}
obliquely reminding you that matrix is a subsidiary math environment.
The matrix subsidiary math environment provides a matrix of up to 10 centered
columns. If you need more columns, you have to ask for them. The following example
sets the number of columns to 12:
\begin{equation}\label{E:mm12}
\setcounter{MaxMatrixCols}{12}
\begin{matrix}
1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 & 12\\
1 & 2 & 3 & \hdotsfor{7}
& 11 & 12
\end{matrix}
\end{equation}
produces
(27)
1
2
3
4
5
6
7
8
9
10
11
12
1
2
3
. . . . . . . . . . . . . . . . . . . . . . . .
11
12
We discuss \setcounter and other counters further in Section 14.5.1.
You can have dots span any number of columns with the \hdotsfor command, as
in (27). The argument of this command speciﬁes the number of columns to ﬁll (which
is one more than the number of &’s the command replaces). The \hdotsfor command
must either appear at the beginning of a row or immediately following an ampersand
(&). If you violate this rule, you get the message
! Misplaced \omit.
\multispan #1->\omit
\mscount #1\relax \loop \ifnum
\mscount ...
l.12 \end{equation}
The \hdotsfor command also takes an optional argument, a number that mul-
tiplies the spacing between the dots. The default is 1. For instance, if we replace
\hdotsfor{7} in the previous example by \hdotsfor[3]{7}, then we get
(28)
1
2
3
4
5
6
7
8
9
10
11
12
1
2
3
. . . . . . . . . . . . . .
11
12
We can replace a part of a matrix column with a large symbol.
𝑎=
⎛
⎜
⎜⎝
(𝑎11)
⋯0
(𝑎𝑛1)
⎞
⎟
⎟⎠
,
(𝑎𝑘1) =
⎛
⎜
⎜
⎜
⎜⎝
0 … 0
1
0 … 0
0
0
⋯0
0
⎞
⎟
⎟
⎟
⎟⎠

7.7
Adjusted columns
217
typed as
\newcommand{\BigFig}[1]{\parbox{12pt}{\Huge #1}}
\newcommand{\BigZero}{\BigFig{0}}
\[
a=\left( \begin{matrix}
(a_{11})\\
\cdots & \BigZero \\
(a_{n1})\\
\end{matrix}
\right) ,\quad
(a_{k1})=\left(
\begin{matrix}
0\ldots 0 & 1 & 0\ldots 0\\
& 0\\
\BigZero & \cdots & \BigZero\\
& 0\\
\end{matrix} \right)
\]
Matrix variants
A matrix may be enclosed by delimiters (see Section 5.5.1) in a number of diﬀerent
ways:
𝑎+ 𝑏+ 𝑐
𝑢𝑣
𝑎+ 𝑏
𝑐+ 𝑑
(
𝑎+ 𝑏+ 𝑐
𝑢𝑣
𝑎+ 𝑏
𝑐+ 𝑑
)
[
𝑎+ 𝑏+ 𝑐
𝑢𝑣
𝑎+ 𝑏
𝑐+ 𝑑
]
||||
𝑎+ 𝑏+ 𝑐
𝑢𝑣
𝑎+ 𝑏
𝑐+ 𝑑
||||
‖‖‖‖
𝑎+ 𝑏+ 𝑐
𝑢𝑣
𝑎+ 𝑏
𝑐+ 𝑑
‖‖‖‖
{
𝑎+ 𝑏+ 𝑐
𝑢𝑣
𝑎+ 𝑏
𝑐+ 𝑑
}
The ﬁrst matrix is typed as
\begin{matrix}
a + b + c & uv\\
a + b
& c + d
\end{matrix}
The others are typed in the same way, except that they use the pmatrix, bmatrix,
vmatrix, Vmatrix, and Bmatrix environments, respectively. We can use other de-
limiters, as in
\begin{equation*}
\left(
\begin{matrix}
1
&
0
& \dots
& 0\\
0
&
1
& \dots
& 0\\
\vdots & \vdots & \ddots
& \vdots\\

218
Chapter 7
Multiline math displays
0
&
0
& \dots
& 1
\end{matrix}
\right]
\end{equation*}
which produces
⎛
⎜
⎜
⎜⎝
1
0
…
0
0
1
…
0
⋮
⋮
⋱
⋮
0
0
…
1
⎤
⎥
⎥
⎥⎦
This example also uses vertical dots provided by the \vdots commands and diagonal
dots provided by the \ddots commands.
Small matrix
If you put a matrix in an inline math formula, it may be too large. Instead, use the
smallmatrix environment. Compare
(
𝑎+ 𝑏+ 𝑐
𝑢𝑣
𝑎+ 𝑏
𝑐+ 𝑑
)
, typed as
$\begin{pmatrix}
a + b + c & uv\\
a + b
& c + d
\end{pmatrix}$
with the small matrix ( 𝑎+𝑏+𝑐
𝑢𝑣
𝑎+𝑏
𝑐+𝑑
), typed as
$\left(
\begin{smallmatrix}
a + b + c & uv\\
a + b
& c + d
\end{smallmatrix}
\right)$
There are no delimited variants of smallmatrix similar to those of matrix. Instead,
use the \left and \right commands with delimiters to enclose a small matrix. The
\hdotsfor command does not work in a small matrix.
7.7.2
Arrays
The array subsidiary math environment is a variant of matrix. For array, you must
specify the alignment of each column and you have more options to customize it.
The ﬁrst matrix in the introduction to Section 7.7 would be typed as follows using
the array subsidiary math environment:
\begin{equation*}
\left(
\begin{array}{cccc}
a + b + c & uv
& x - y & 27\\

7.7
Adjusted columns
219
a + b
& u + v & z
& 134
\end{array}
\right)
\end{equation*}
which produces
(
𝑎+ 𝑏+ 𝑐
𝑢𝑣
𝑥−𝑦
27
𝑎+ 𝑏
𝑢+ 𝑣
𝑧
134
)
Rule
array subsidiary math environment
1. Adjacent columns are separated by an ampersand (&).
2. The argument of \begin{array} is mandatory. The argument is a series of the
letters l, r, or c, signifying that the corresponding column in the array should be set
ﬂush left, ﬂush right, or centered, respectively.
The matrix
(
𝑎+ 𝑏+ 𝑐
𝑢𝑣
𝑥−𝑦
27
𝑎+ 𝑏
𝑢+ 𝑣
𝑧
134
)
could not have been typeset with matrix since the last column is set ﬂush right. This
is not quite true, of course. In a matrix environment, \hfill 27 would force the
number 27 to be set ﬂush right (see Section 3.8.4).
If the argument of \begin{array} is missing, as in
\begin{equation}
\begin{array}
a + b + c & uv
& x - y & 27\\
a + b
& u + v
& z
& 134
\end{array}
\end{equation}
LATEX generates the message
! Package array Error:
Illegal pream-token (a): ‘c’ used.
If you change the ﬁrst entry of the matrix to c + b + a, then the message is
! Extra alignment tab has been changed to \cr.
<recently read> \endtemplate
l.5
c + b + a &
uv
& x - y & 27\\
Note that the ﬁrst character in c + b + a is not an
Illegal character in array arg.
because c is one possible argument of \begin{array}.

220
Chapter 7
Multiline math displays
If the closing brace of the argument of \begin{array} is missing, as in
\begin{equation}
\begin{array}{cccc
a + b + c & uv
& x - y & 27\\
a + b
& u + v & z
& 134
\end{array}
\end{equation}
you get the message
Runaway argument?
{cccc a + b + c & uv
& x - y & 27\\ a + b
& u + v \ETC.
! Paragraph ended before \@array was complete.
In fact, the argument of array can be more complex than stated in the rule. Indeed,
the array subsidiary math environment can take any argument that the tabular envi-
ronment can take (see Section 4.6). For instance, here is a matrix with headers:
𝑎
𝑏
𝑐
1
1
1
1
2
1
−1
−1
2
2
1
0
typed as
\[
\begin{array}{r|rrr}
& a & b & c \\
\hline
1 & 1 &
1 &
1 \\
2 & 1 & -1 & -1 \\
2 & 2 &
1 &
0
\end{array}
\]
In Section 7.7.1 we have the matrix example:
𝑎=
⎛
⎜
⎜⎝
(𝑎11)
⋯0
(𝑎𝑛1)
⎞
⎟
⎟⎠
If rows are spanned, we need to use array instead of matrix:
⎡
⎢
⎢
⎢⎣
𝑎
𝑏
𝑐
𝑑0
𝑚
𝑛
0
𝑘
𝑙
⎤
⎥
⎥
⎥⎦
typed as (the \BigZero command is deﬁned on page 217)

7.7
Adjusted columns
221
\left[ \hspace{-\arraycolsep}
spacing is automatic with matrix but not with array
\begin{array}{cccc}
a & b &\multicolumn{2}{c}{}\\
c & d &\multicolumn{2}{c}
{\raisebox{1.5ex}[0pt]{\BigZero}}\\
\multicolumn{2}{c}{}& m & n \\
\multicolumn{2}{c}
{\raisebox{1.5ex}[0pt]{\BigZero}}& k & l
\end{array}
\hspace{-\arraycolsep} \right]
\end{equation*}
7.7.3
Cases
The cases environment is also a subsidiary math environment. Here is the example
from Section 1.7.4 and the introduction to this section:
𝑓(𝑥) =
⎧
⎪
⎨
⎪⎩
−𝑥2,
if 𝑥< 0;
𝛼+ 𝑥,
if 0 ≤𝑥≤1;
𝑥2,
otherwise.
It is typed as
\begin{equation}
f(x)=
\begin{cases}
-x^{2},
&\text{if $x < 0$;}\\
\alpha + x,
&\text{if $0 \leq x \leq 1$;}\\
x^{2},
&\text{otherwise.}
\end{cases}
\end{equation}
It would be easy to code the cases environment as a special case of the array sub-
sidiary math environment:
\begin{equation}
f(x) =
\left\{
\begin{array}{ll}
-x^{2},
&\text{if $x < 0$;}\\
\alpha + x,
&\text{if $0 \leq x \leq 1$;}\\
x^{2},
&\text{otherwise.}
\end{array}
\right.
\end{equation}

222
Chapter 7
Multiline math displays
or of the alignedat subsidiary math environment:
\begin{equation*}
f(x) =
\left\{
\begin{alignedat}{2}
&-x^{2},
&&\quad\text{if $x < 0$;}\\
&\alpha + x,
&&\quad\text{if $0 \leq x \leq 1$;}\\
&x^{2},
&&\quad\text{otherwise.}
\end{alignedat}
\right.
\end{equation*}
7.8
Commutative diagrams
The amscd package provides the CD subsidiary math environment for typesetting simple
commutative diagrams. To use it, make sure that the command
\usepackage{amscd}
is in the preamble of the document.
For instance, to obtain
A −−−−→B
⏐⏐
⏐⏐
C
D
type
\[
\begin{CD}
A
@>>>
B\\
@VVV
@VVV\\
C
@=
D
\end{CD}
\]
A commutative diagram is a matrix made up of two kinds of rows, horizontal rows,
that is, rows with horizontal arrows; and vertical rows, rows with vertical arrows. For
example,
A
@>>>
B
is a typical horizontal row. It deﬁnes two columns and a connecting horizontal arrow
@>>>. There may also be more than two columns, as in

7.8
Commutative diagrams
223
A
@>>>
B
@>>>
C
@=
D
@<<<
E
@<<<
F
The connecting pieces can be:
Stretchable right arrows, @>>>
Stretchable left arrows, @<<<
Stretchable equal signs, @=
Blanks, @.
The label above a stretchable arrow should be typed between the ﬁrst and second >
or < symbols, whereas the label below should be typed between the second and third >
or < symbols. You can have both.
The following is a typical vertical row containing vertical arrows:
@VVV
@VVV
@AAA
The vertical pieces could be
Stretchable down arrows, @VVV
Stretchable up arrows, @AAA
Double vertical lines, @| or @\vert
Blanks, @.
The vertical arrows are placed starting with the ﬁrst column.
The label to the left of a stretchable vertical arrow should be typed between the ﬁrst
and second V or A, whereas the label on the right should be typed between the second
and third V or A symbols. You can have both.
These constructs are illustrated in
C
H1
−−−−→C
H2
−−−−→C
Pc,3
⏐⏐
P¯c,3
⏐⏐
⏐⏐P−c,3
C
H1
−−−−→C
H2
−−−−→C
typed as
\[
\begin{CD}
\mathbb{C} @>H_{1}>> \mathbb{C} @>H_{2}>>\mathbb{C}\\
@VP_{c,3}VV
@VP_{\bar{c},3}VV
@VVP_{-c,3}V\\
\mathbb{C} @>H_{1}>> \mathbb{C} @>H_{2}>> \mathbb{C}
\end{CD}
\]

224
Chapter 7
Multiline math displays
Here is another example utilizing the \text command, followed by its source:
A
log
−−−−→B −−−−→
bottom
C
D ←−−−−E ←−−−−F
one-one
⏐⏐
⏐⏐onto

X
Y −−−−→Z −−−−→U
β
⏐⏐
⏐⏐γ
⏐⏐
⏐⏐
D
α
−−−−→E −−−−→H
I
\[
\begin{CD}
A
@>\log>>
B
@>>\text{bottom}>
C
@=
D
@<<<
E
@<<<
F\\
@V\text{one-one}VV
@.
@AA\text{onto}A
@|\\
X
@=
Y
@>>>
Z
@>>>
U\\
@A\beta AA
@AA\gamma A
@VVV
@VVV\\
D
@>\alpha>>
E
@>>>
H
@.
I\\
\end{CD}
\]
Diagrams requiring more advanced commands should be done with a drawing (or
drafting) application or with specialized packages. The AMS recommends Kristoﬀer H.
Rose and Ross Moore’s xy-pic package (see Section D.1). If you get familiar with the
TikZ package in Chapter 13, then you should utilize the tikzcd package of Florêncio
Neves to draw commutative diagrams, see Section 13.4.
7.9
Adjusting the display
By default, the math environments described in this chapter do not allow page breaks.
While a page break in a cases environment is obviously not desirable, it may be ac-
ceptable in an align or gather environment. You can allow page breaks by using the
\allowdisplaybreaks
command. It allows page breaks in a multiline math environment within its scope. For
instance,
{\allowdisplaybreaks
\begin{align}\label{E:mm13}
a &= b + c,\\
d &= e + f,\\

7.9
Adjusting the display
225
x &= y + z,\\
u &= v + w.
\end{align}
}% end of \allowdisplaybreaks
allows a page break after any one of the ﬁrst three lines.
Within the scope of an \allowdisplaybreaks command, use the \\* command
to prohibit a break after that line. The line separators \\ and \\* can use an optional
argument to add some additional interline space (see Section 3.7.2).
Just before the line separator command (\\), include a \displaybreak command
to force a break, or a
\displaybreak[0]
command to allow one. \displaybreak[n ], where n is 1, 2, or 3, speciﬁes the inter-
mediate steps between allowing and forcing a break. \displaybreak[4] is the same
as \displaybreak. You can easily visualize these rules:
allow display break =
\displaybreak[0] \displaybreak[1] ... \displaybreak[4]
= \displaybreak
= force display break
Note the similarity between the displaybreak sequence and the pagebreak sequence
in Section 3.7.3.
If you want to allow page breaks in all multiline math environments in your docu-
ment, place the \allowdisplaybreaks[1] command in the preamble of your docu-
ment. The optional argument can be varied from 1 to 4, in order of increasing permis-
siveness.
Note that none of the subsidiary math environments are aﬀected by any variant of
the \displaybreak or the \allowdisplaybreaks commands.

PART III
Document Structure

C H A P T E R
8
Documents
In this chapter, we take up the organization of shorter documents. Longer documents
and books are discussed in Part VI.
If you are writing a simple article, start with a template (see Section 9.4), then you
can safely ignore much of the material discussed in this chapter. In more complicated
articles you may need the material discussed in this chapter.
Section 8.1 discusses document structure in general, the preamble is presented in
Section 8.2. Section 8.3 discusses the top matter, in particular, the abstract envi-
ronment. Section 8.4 presents the main matter, including sectioning, cross-referencing,
tables, and ﬁgures. Section 8.5 covers the back matter, including the bibliography and
index.
In Section 8.1–8.5 we discuss the logical design of a LATEX document. The visual
design is largely left to the document class. In Section 8.6, however, we brieﬂy discuss
one frequently adjusted aspect of visual design, the page style.
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1_8
229

230
Chapter 8
Documents
8.1
The structure of a document
The source ﬁle of a LATEX document is divided into two main parts: the preamble and
the body (see Figure 8.1).
Preamble This is the portion of the source ﬁle before the
\begin{document}
command. It contains deﬁnitions and instructions that aﬀect the entire document.
Body This is the content of the document environment. It contains all the material to
be typeset.
These statements oversimplify the situation somewhat.
For instance, you can
deﬁne a command in the preamble to typeset some text that will appear wherever the
command is used in the body, but the text is actually typed in the preamble. Neverthe-
less, I hope the division between the preamble and the body is clear.
Figure 8.1: The structure of a LATEX document.
The body is divided into three parts:

8.2
The preamble
231
Top matter This is the ﬁrst part of the body. It is concluded with the \maketitle
command. Traditionally it included only the \title, the \author, and the
\date commands. The top matter is derived from these commands and from
it the title page of an article was designed. This evolved to include a lot more
information about the author(s), for instance, their e-mail addresses, academic
aﬃliations, home pages, and about the article, for instance, research support, sub-
ject classiﬁcation. The typeset top matter now is split into several locations, the
top and bottom of the ﬁrst page and the bottom of the last page. See page 4 and
pages 272–275 for two examples and Section 17.1.2 for more components that
can be used in longer documents and books.
Main matter This is the main part of the document, including any appendices.
Back matter This is the material that is typeset at the end of the document. For a typi-
cal shorter document, the back matter is just the bibliography. See Section 17.1.2
for more information about additional components—such as the index—that are
often used in longer documents and books.
8.2
The preamble
You were introduced to the preamble of a document in Section 1.8. Recall that the
preamble contains the crucial \documentclass line, specifying the document class
and the options that modify its behavior. For instance,
\documentclass[draft,reqno]{amsart}
loads the document class amsart with the draft option, which paints a slug in the
margin indicating lines that are too wide (see Section 3.7.1), and the reqno option,
which places the equation numbers on the right (see Section 9.5).
article is the most popular legacy document class (see Section 10.1). The com-
mand
\documentclass[titlepage,twoside]{article}
loads the document class article with the titlepage option, which creates a separate
title page and places the abstract on a separate page, and the twoside option, which
formats the typeset article for printing on both sides of the paper.
The \documentclass command is usually followed by the \usepackage com-
mands, which load LATEX enhancements called packages. For instance,
\usepackage{latexsym}
loads a package that deﬁnes some additional LATEX symbol names (see Section 10.3),
whereas

232
Chapter 8
Documents
\usepackage[demo]{graphicx}
loads the graphicx package (see Section 8.4.3) with the demo option that inserts rect-
angles in place of the illustrations. Document class options are also passed on to the
packages as possible options, so
\documentclass[demo]{amsart}
\usepackage{graphicx}
would also load the graphicx package with the demo option unless it is invoked with
\usepackage[final]{graphicx}
Any document class options that are not relevant for a package are ignored.
\usepackage commands can also be combined:
\usepackage{amssymb,latexsym}
is the same as
\usepackage{amssymb}
\usepackage{latexsym}
Document class ﬁles have a cls extension, whereas package ﬁles are designated
by the sty extension. The document class amsart is deﬁned in the amsart.cls ﬁle,
the graphicx package is deﬁned in the graphicx.sty ﬁle. You may deﬁne your own
packages, such as the newlattice package described in Section 14.3.
The preamble normally contains any custom commands (see Chapter 14) and
the proclamation deﬁnitions (see Section 4.4). Some commands can only be in the
preamble. \DeclareMathOperator is such a command (see Section 14.1.6) and so is
\numberwithin (see Section 5.3). If you put such a command in the body, for example,
\DeclareMathOperator, you get a message:
! LaTeX Error: Can be used only in preamble.
l.103 \DeclareMathOperator
There is one command that may only be placed before the
\documentclass{...}
line:
\NeedsTeXFormat{LaTeX2e}[2005/12/01]
This command checks the version of LATEX being used to typeset the document and
issues a warning if it is older than December 1, 2005 or whatever date you speciﬁed.
Use this optional date argument if your document contains a feature that was introduced
on or after the date speciﬁed or if an earlier version had a bug that would materially aﬀect
the typesetting of your document.

8.3
Top matter
233
For instance, if you use the \textsubscript command, introduced in the
December 1, 2005 release (see page 293), then you may use the \NeedsTeXFormat
line shown above. LATEX now hardly changes from year to year, so this command is
rarely used except in document class ﬁles or package ﬁles. See, however, the discus-
sion on page 293.
8.3
Top matter
The top matter of an article is part of the article body and, as a rule, it contains the
material used to create the “title page” and, optionally, an abstract.
Discussion of the top matter should take place in the context of a particular doc-
ument class. We discuss the top matter of the amsart document class in Section 1.8,
and we continue discussing it in much more detail in Section 9.2. The top matter of the
article document class is covered in Section 10.1.1.
Long documents, such as books, have rather complicated top matter such as tables
of contents (see Chapter 17). In this section, we only discuss the abstract.
8.3.1
Abstract
Most standard document classes, except those for letters and books, make provision for
an abstract, typed in an abstract environment.
The document class formats the heading as Abstract, or some variant, and, as
a rule, typesets the text of the abstract in smaller type with wider margins.
The amsart document class requires that you place the abstract environment
before the \maketitle command (see Figure 8.1). See the abstract in the sample arti-
cle firstarticle.tex on page 4. If you forget to place it there, you get the warning
Class amsart Warning:
Abstract should precede \maketitle in AMS
documentclasses; reported on input line 21.
and the abstract is typeset wherever the abstract environment happens to be placed.
In the article document class you place the abstract after the \maketitle com-
mand. If you place the abstract before the \maketitle command, the abstract is placed
on page 1, and the article starts on page 2.
If the abstract and the “footnotes” from the top matter ﬁll the ﬁrst page, the second
page has no running head. To ﬁx this, follow the \maketitle command with the
\clearpage command (see Section 3.7.3).

234
Chapter 8
Documents
8.4
Main matter
The main matter contains most of the essential parts of the document, including the
appendices.
We discuss now how to structure the main matter. We describe sectioning in Sec-
tion 8.4.1, cross-referencing in Section 8.4.2, and tables and ﬁgures in Section 8.4.3.
8.4.1
Sectioning
The main matter of a typical shorter document is divided into sections. We discuss
sectioning of longer documents in Section 17.1.1.
Sections
LATEX is instructed to start a section with the \section command, which takes the title
of the section as its argument. This argument may also be used for the running head and
it is also placed in the table of contents (see Section 17.2), which means that you need
to protect fragile commands with the \protect command (see Section 3.3.3). LATEX
automatically assigns a section number and typesets the section number followed by the
section title.
Any \section command may be followed by a \label command, so that you
can refer to the section number generated by LATEX, as in
\section{Introduction}\label{S:intro}
The command \ref{S:intro} refers to the number of the section and the command
\pageref{S:intro} refers to the number of the typeset page where the section title
appears.
You save a lot of work if in the source ﬁle you type in the cross-reference:
\section{Introduction}\label{S:intro}
%Section~\ref{S:intro}
Other sectioning commands
A section may be subdivided into subsections, which may themselves be divided into
subsubsections, paragraphs, and subparagraphs. Subsections are numbered within
a section (in Section 1, they are numbered 1.1, 1.2, and so on). Here is the whole
hierarchy:
\section
\subsection
\subsubsection
\paragraph
\subparagraph

8.4
Main matter
235
It is important to understand that the ﬁve levels of sectioning are not just ﬁve diﬀer-
ent styles for typesetting section headers but they form a hierarchy. You should never
have a subsection outside a section, a subsubsection outside a subsection, and so on.
For instance, if the ﬁrst sectioning command in your document is \subsection, the
subsections are numbered 0.1, 0.2, .... Or if in the ﬁrst section of your document the
ﬁrst sectioning command is \subsubsection, the subsubsections are numbered 1.0.1,
1.0.2, .... Both are clearly undesirable.
There are two additional sectioning commands provided by the report and by
the book document classes (book and amsbook): \chapter and \part (discussed in
Section 17.1.1).
Any sectioning command may be followed by a \label command so that you can
refer to the number (if any) generated by LATEX and the page on which it appears (see
Section 8.4.2).
There is also the seldom used top level \specialsection command. Articles do
not have parts and chapters, but sometimes a long article may require further division
using the \specialsection command.
The form of sectioning commands
All sectioning commands take one of the following three forms, illustrated below with
the \section command:
Form 1
The simplest form is
\section{title }
where title is the section title, of course. You need to protect any fragile commands
in title with the \protect command (see Section 3.3.3).
Form 2
The sectioning command may have an optional argument
\section[short_title ]{title }
The optional short_title argument is used in the running head. See Section 17.2 on
what goes into the table of contents. Protect any fragile commands in short_title
with the \protect command (see Section 3.3.3).
Form 3
Finally, we consider the *-ed version
\section*{title }
There are no section numbers printed and the title is not included in the running
head. Remember that if you * a section, all subsections, and so on, must also be *-ed
to avoid having strange section numbers.

236
Chapter 8
Documents
Sectioning commands typeset
Consider the following text:
\section{Introduction}\label{S:Intro}
We shall discuss the main contributors of this era.
\subsection{Birkhoff’s contributions}\label{SS:contrib}
\subsubsection{The years 1935--1945}\label{SSS:1935}
Going to Oxford was a major step.
\paragraph{The first paper}
What should be the definition of a universal algebra?
\subparagraph{The idea}
One should read Whitehead very carefully.
This is how it looks typeset in the amsart document class:
1
Introduction
We shall discuss the main contributors of this era.
1.1
Birkhoﬀ’s contributions
1.1.1
The years 1935–1945
Going to Oxford was a major step.
The ﬁrst paper
What should be the deﬁnition of a universal algebra?
The idea
One should read Whitehead very carefully.
Notice that paragraphs and subparagraphs are not displayed prominently by the AMS.
By contrast, look at the same text typeset in the legacy article document class:
1. Introduction
We shall discuss the main contributors of this era.
1.1. Birkhoﬀ’s contributions.
1.1.1. The years 1935–1945. Going to Oxford was a major step.
The ﬁrst paper. What should be the deﬁnition of a universal algebra?
The idea. One should read Whitehead very carefully.
This illustrates vividly one huge diﬀerence between the two document classes, the visual
handling of sectioning.

8.4
Main matter
237
Section 14.5.1 discusses how you can change the format of the section numbers,
and how to specify which sectioning levels are to be numbered.
Section 2.2 of The LATEX Companion, 2nd edition [56] explains how to change the
layout of section headings, especially useful for document class designers.
Appendix
In the main matter, if the article contains appendices, mark the beginning of the appen-
dices with the \appendix command. After the \appendix command, the \section
command starts the appendices (for books, see Section 17.1.2):
\appendix
\section{A proof of the Main Theorem}\label{S:geom}
This produces Appendix A with the given title, typeset just like a section.
Note that appendices may be labeled and cross-referenced like any other section. In
an appendix, subsections are numbered A.1, A.2, and so on, subsubsections within A.1
are numbered A.1.1, A.1.2, and so on.
Let me repeat, \appendix is not like \section. It is not a command with an
argument. Appendices are named by arguments of the \section— commands (for
books, by the \chapter—commands) placed after the \appendix command.
8.4.2
Cross-referencing
There are three types of cross-referencing available in LATEX:
1. Symbolic referencing with \ref and \eqref for equations
2. Page referencing with \pageref
3. Bibliographic referencing with \cite
In this section, we discuss the ﬁrst two, while bibliographies are discussed in Sec-
tion 8.5.1 and in Chapter 15.
Symbolic referencing
Wherever LATEX can automatically generate a number in your document, you can place
a \label command
\label{symbol }
Then, at any place in your document, you can use the \ref command
\ref{symbol }
to place that number in the document. We call symbol the label. You can use labels
for sectioning units, equations, ﬁgures, tables, items in an enumerated list environment
(see Section 4.2.1), as well as for theorems and other proclamations.

238
Chapter 8
Documents
If the equation labeled E:int is the ﬁfth equation in an article, then LATEX stores
the number 5 for the label E:int, so \ref{E:int} produces the number 5. If equations
are numbered within sections (see Section 5.3), and an equation is the third equation
in Section 2, then LATEX stores the number 2.3 for the label E:int, so the reference
\ref{E:int} produces the number 2.3.
Example 1
The present section starts with the command
\section{Main matter}\label{S:MainMatter}
So \ref{S:MainMatter} produces the number 8.4 and we get the number of the type-
set page where the section title appears with \pageref{S:MainMatter}, which is 234.
Tip
Type
\section{Main matter}\label{S:MainMatter}
%Section~\ref{S:MainMatter}
to make cross-referencing quicker.
Example 2
\begin{equation}\label{E:int}
\int_{0}^{\pi} \sin x \, dx = 2.
\end{equation}
In this case, \ref{E:int} produces the number of the equation, \eqref{E:int} pro-
duces the number of the equation in parentheses.
Tip
Type
\begin{equation}\label{E:int}%\eqref{E:int}
\int_{0}^{\pi} \sin x \, dx = 2.
\end{equation}
to make cross-referencing quicker.
Tip
If you have to reference an equation in the statement of a theorem, always use \eqref.
Do not use \eqref to reference anything but proclamations. (See the \itemref com-
mand introduced in Section 14.1.2.)

8.4
Main matter
239
Example 3
\begin{theorem}\label{T:fund}
Statement of theorem.
\end{theorem}
The reference \ref{T:fund} produces the number of the theorem.
Tip
Type
\begin{theorem}\label{T:fund}%Theorem~\ref{T:fund}
Statement of theorem.
\end{theorem}
to make cross-referencing quicker.
Tip
Typeset a document twice to see a change in a cross-reference.
See Section C.2.4 for a discussion of how LATEX stores these numbers and why you have
to typeset twice. If you typeset only once, and LATEX suspects that the cross-references
have not been updated, you get a warning:
LaTeX Warning: Label(s) may have changed.
Rerun to get cross-references right.
Rule 1
\label command
The argument of the \label command is a string of letters, punctuation marks, and
digits. It is case sensitive, so S:intro is diﬀerent from S:Intro.
Rule 2
\label command
Place a \label command immediately after the command that generates the number.
The following is not compulsory but advisable.
Tip
When referencing:
see Section~\ref{S:Intro} proved in Theorem~\ref{T:main}

240
Chapter 8
Documents
or
see Sections~\ref{S:Intro} and~\ref{S:main}
use ties (˜).
It is diﬃcult to overemphasize how useful automatic cross-referencing can be when
writing a document.
Tip
Make your labels meaningful to yourself, so they are easy to remember. Systematize
your labels. For example, start the label for a section with S:, theorem with T:, lemma
with L:, and so on.
When you are cross-referencing, even if you follow these tips, it may not be easy
to remember a label. David Carlisle’s showkeys package may help you out. It is part
of the tools distribution (see Section 10.3.1 and Section D.1). Include the line
\usepackage{showkeys}
in the preamble of your document. The showkeys package shows all symbolic refer-
ences in the margin of the typeset document. With the notcite option, my preference,
\usepackage[notcite]{showkeys}
showkeys does not show the labels for bibliographic references. When the document
is ready for ﬁnal typesetting, then comment out this line.
Section 2.4 of The LATEX Companion, 2nd edition [56] describes varioref, a pack-
age which extends the power of \ref, and xr, a package for referencing external doc-
uments.
Absolute referencing
There are two forms of absolute referencing.
1. Equations can be tagged. The \tag{name } command attaches a name to the for-
mula. The tag replaces the equation number.
2. Items in an itemize environment can be tagged with the \item[name ] construct.
The tag replaces the item number.
Our ﬁrst example is the equation
(Int)
∫
𝜋
0
sin 𝑥𝑑𝑥= 2

8.4
Main matter
241
is typed as
\begin{equation}
\int_{0}^{\pi} \sin x \, dx = 2 \tag{Int}
\end{equation}
Our second example is the numbered list:
This space has the following properties:
(a) Grade 2 Cantor;
(b) Half-smooth Hausdorﬀ;
(c) Metrizably smooth.
typed as
\noindent This space has the following properties:
\begin{enumerate}
\item[(a)] Grade 2 Cantor\label{Cantor};
\item[(b)] Half-smooth Hausdorff\label{Hausdorff};
\item[(c)] Metrizably smooth\label{smooth}.
\end{enumerate}
Tags are absolute. This equation is always referred to as (Int). Equation numbers, on
the other hand, are relative, they may change when the ﬁle is edited.
Tip
Do not label absolute references. It may lead to problems that are hard to explain.
Page referencing
The command
\pageref{symbol }
produces the number of the typeset page corresponding to the location of the command
\label{symbol }. For example, if the following text is typeset on page 5,
There may be three types of problems with the
construction of such lattices.\label{problem}
and you type
Because of the problems associated with
the construction (see page~\pageref{problem})

242
Chapter 8
Documents
anywhere in the document, LATEX produces
Because of the problems associated with the construction (see page 5)
Because of the way LATEX typesets a page, page references may be oﬀby one. See
the discussion in Section 17.6 on how to guarantee that the page number is correct.
8.4.3
Floating tables and illustrations
Many documents contain tables and illustrations. These must be treated in a special way
since they cannot be broken across pages. If necessary, LATEX moves—ﬂoats—a table
or an illustration to the top or bottom of the current or the next page if possible and
further away if not.
LATEX provides the table and the figure environments for typesetting ﬂoats. The
two are essentially identical except that the figure environments are named Figure 1,
Figure 2, and so on, whereas the table environments are numbered as Table 1, Ta-
ble 2, and so on.
Tables
A table environment is set up as follows:
\begin{table}
Place the table here
\caption{title }\label{Ta:xxx }
\end{table}
The \caption command is optional and may also precede the table. The optional
\label command must be placed between the command \caption and the command
\end{table}. The label is used to reference the table’s number. A table environment
can have more than one table, each with its own caption.
Tip
Type
\begin{table}
Place the table here
\caption{title }\label{Ta:xxx }%Table~\ref{Ta:xxx }
\end{table}
to make cross-referencing quicker.
The table environment is primarily used for tables made with the tabular or
similar environments (see Section 4.6). There are many examples of tables in this book,
for instance, Section 3.4 has four.

8.4
Main matter
243
If your document uses the twocolumn document class option, the table environ-
ment produces tables that span only one column and the table* environment produces
tables that span both columns. Such tables can be placed only at the top of a page.
Figures
Illustrations, also called graphics or ﬁgures, include drawings, scanned images, digi-
tized photos, and so on. These can be inserted with a figure environment:
\begin{figure}
Place the graphics here
\caption{title }\label{Fi:xxx }
\end{figure}
The above discussion of captions and labels for tables also applies to ﬁgures. Like
the table environment, if your document uses the twocolumn document class option,
the figure environment produces ﬁgures that span only one column, but the figure*
environment produces ﬁgures that span both columns. However, these ﬁgures can be
placed only at the top of a page.
Tip
Type
\begin{figure}
Place the table here
\caption{title }\label{Fi:xxx }%Table~\ref{Fi:xxx }
\end{figure}
to make cross-referencing quicker.
The standard way of including a graphics ﬁle is with the commands provided by the
graphicx package by David Carlisle and Sebastian Rahtz, which is part of the LATEX
distribution (see Section 10.3). Save your graphics in PDF (Portable Document Format)
format—as a rule.
Your graphics can also be made within a picture environment, an approach that
is neither encouraged nor discussed in this book. To draw within LATEX, use TikZ, see
Chapter 13.
Using the graphicx package, a typical figure is speciﬁed as follows:
\begin{figure}
\centering\includegraphics{file }
\caption{title }\label{Fi:xxx }
\end{figure}

244
Chapter 8
Documents
The illustration circle.pdf is included with the command
\includegraphics{circle}
without the extension! LATEX and the graphicx package assumes the pdf extension.
If you have to scale the graphics image, say to 68% of its original size, use the
command
\includegraphics[scale=.68]{file }
For instance, the ﬁgure on page 32 is included with the commands
\begin{figure}
\centering\includegraphics[scale=.8]{StrucLaT}
\caption{The structure of \protect\la.}
\label{Fi:StrucLaT}
\end{figure}
For another use of the graphicx package, see Section 6.2.1.
Float control
The table and figure environments may have an optional argument, with which you
can inﬂuence LATEX’s placement of the typeset table. The optional argument consists of
one to four letters:
b, the bottom of the page
h, here (where the environment appears in the text)
t, the top of the page
p, a separate page
For instance,
\begin{table}[ht]
requests LATEX to place the table “here” or at the “top” of a page. The default is [tbp]
and the order of the optional arguments is immaterial, for example, [th] is the same as
[ht]. If h is speciﬁed, it takes precedence, followed by t and b.
LATEX has more than a dozen internal parameters that control a complicated algo-
rithm to determine the placement of tables and ﬁgures. If you want to override these

8.5
Back matter
245
parameters for one table or ﬁgure only, add an exclamation mark (!) to the optional
argument. For instance, [!h] requests that this table or ﬁgure be placed where it is in
the source ﬁle even if this placement violates the algorithm. For a detailed discussion
of the ﬂoat mechanism, see Chapter 6 of The LATEX Companion, 2nd edition [56].
The \suppressfloats command stops LATEX from placing any more tables or
ﬁgures on the page it appears on. An optional argument t or b (but not both) prohibits
placement of ﬂoats at the top or bottom of the current page. The table or ﬁgure that is
suppressed appears on the next page or later in the document, if necessary.
Your demands and LATEX’s ﬂoat mechanism may conﬂict with one another with
the result that LATEX may not place material where you want it. The default values
of the ﬂoat placement parameters are good only for documents with a small number
of ﬂoating objects. Combining two tables or illustrations into one sometimes helps.
The \clearpage command not only starts a new page with the \newpage command,
but also forces LATEX to print all the tables and ﬁgures it has accumulated but not yet
placed in the typeset document. See also some related commands discussed in Sec-
tion 3.7.3.
For more information on graphics, see Chapter 10 of The LATEX Companion, 2nd
edition [56] and Chapter 2.4 of The LATEX Graphics Companion [17]. See also the
documentation for the graphicx package in the LATEX distribution (see Section 10.3).
8.5
Back matter
The back matter of an article is very simple, as a rule. It is either empty or consists
of only a bibliography. A long document, such as a book, may have more complicated
back matter (see Chapter 17). In this section, we discuss only the bibliography and
a very simple index.
8.5.1
Bibliographies in articles
The simplest way to typeset a bibliography is to type it directly into the article. For an
example, see the bibliography in the secondarticle.tex article (on page 275).
The following bibliography contains two examples, one short and one long, of
each of the seven most frequently used kinds of items.
You type the text of a bibliography in a thebibliography environment, as shown
in the following examples.
\begin{thebibliography}{99}
\bibitem{hA70}
Henry~H. Albert,
\emph{Free torsoids},
Current trends in lattice theory.
D.~Van Nostrand, 1970.
\bibitem{hA70a}

246
Chapter 8
Documents
Henry~H. Albert,
\emph{Free torsoids},
Current trends in lattice theory
(G.\,H. Birnbaum, ed.).
vol.~7, D.~Van Nostrand, Princeton, January, 1970,
no translation available, pp.~173--215 (German).
\bibitem{sF90}
Soo-Key Foo,
\emph{Lattice Constructions},
Ph.D. thesis, University of Winnebago, 1990.
\bibitem{sF90a}
Soo-Key Foo,
\emph{Lattice Constructions},
Ph.D. thesis, University of Winnebago, Winnebago, MN,
December 1990, final revision not yet available.
\bibitem{gF86}
Grant~H. Foster,
\emph{Computational complexity in lattice theory},
tech. report, Carnegie Mellon University, 1986.
\bibitem{gF86a}
Grant~H. Foster,
\emph{Computational complexity in lattice theory},
Research Note 128A, Carnegie Mellon University,
Pittsburgh, PA, December, 1986,
research article in preparation.
\bibitem{pK69}
Peter Konig,
\emph{Composition of functions}.
Proceedings of the Conference on Universal Algebra
(Kingston, 1969).
\bibitem{pK69a}
Peter Konig,
\emph{Composition of functions}.
Proceedings of the Conference on Universal Algebra
(G.~H. Birnbaum, ed.).
vol.~7, Canadian Mathematical Society,
Queen’s Univ., Kingston, ON,
available from the Montreal office,
pp.~1--106 (English).
\bibitem{wL75}
William~A. Landau,
\emph{Representations of complete lattices},

8.5
Back matter
247
Abstract: Notices Amer. Math. Soc. \textbf{18}, 937.
\bibitem{wL75a}
William~A. Landau,
\emph{Representations of complete lattices},
Abstract: Notices Amer. Math. Soc. \textbf{18}, 937,
December, 1975.
\bibitem{gM68}
George~A. Menuhin,
\emph{Universal algebra}.
D.~Van Nostrand, Princeton, 1968.
\bibitem{gM68a}
George~A. Menuhin,
\emph{Universal algebra}. 2nd ed.,
University Series in Higher Mathematics, vol.~58,
D.~Van Nostrand, Princeton,
March, 1968 (English), no Russian translation.
\bibitem{eM57}
Ernest~T. Moynahan,
\emph{On a problem of M. Stone},
Acta Math. Acad. Sci. Hungar.
\textbf{8}~(1957), 455--460.
\bibitem{eM57a}
Ernest~T. Moynahan,
\emph{On a problem of M. Stone},
Acta Math. Acad. Sci. Hungar.
\textbf{8}~(1957), 455--460
(English), Russian translation available.
\end{thebibliography}
Figure 8.2 shows a typeset version of this bibliography in the amsart document
class. By contrast, look at the same bibliography typeset in the legacy article docu-
ment class in Figure 8.3.
You can ﬁnd these entries in the document inbibl.tpl in the samples folder
(see page 5).
I use the convention that the label for a \bibitem consists of the initials of the
author and the year of publication. The ﬁrst cited publication by Andrew B. Reich in
1987 would have the label aR87 and the second, aR87a. Of course, you can use any
label you choose, but such conventions make the items easier to reuse.
The thebibliography environment takes an argument—in the previous exam-
ple, this argument is 99—telling LATEX that the widest reference number it must generate
is two digits wide. For fewer than 10 items, use 9 and for 100 or more items, use 999.

248
Chapter 8
Documents
If the argument of \begin{thebibliography} is missing, you get the message
! LaTeX Error: Something’s wrong--perhaps
a missing \item.
Each bibliographic item is introduced with \bibitem, which is used the same as
the \label command. In your text, use \cite, in a similar way to \eqref—it provides
the number enclosed in brackets. So if the 13th bibliographic item is introduced with
\bibitem{eM57}
then
\cite{eM57}
refers to that item and typesets it as [13]. The bibliography of the article itself is auto-
matically numbered by LATEX. It is up to the author to make sure that the listing of the
bibliographic items is in the proper order.
References
[1] Henry H. Albert, Free torsoids, Current trends in lattice theory. D. Van Nostrand, 1970.
[2] Henry H. Albert, Free torsoids, Current trends in lattice theory (G. H. Birnbaum, ed.). vol. 7,
D. Van Nostrand, Princeton, January, 1970, no translation available, pp. 173–215 (German).
[3] Soo-Key Foo, Lattice Constructions, Ph.D. thesis, University of Winnebago, 1990.
[4] Soo-Key Foo, Lattice Constructions, Ph.D. thesis, University of Winnebago, Winnebago,
MN, December 1990, ﬁnal revision not yet available.
[5] Grant H. Foster, Computational complexity in lattice theory, tech. report, Carnegie Mellon
University, 1986.
[6] Grant H. Foster, Computational complexity in lattice theory, Research Note 128A, Carnegie
Mellon University, Pittsburgh, PA, December, 1986, research article in preparation.
[7] Peter Konig, Composition of functions. Proceedings of the Conference on Universal Algebra
(Kingston, 1969).
[8] Peter Konig, Composition of functions. Proceedings of the Conference on Universal Algebra
(G. H. Birnbaum, ed.). vol. 7, Canadian Mathematical Society, Queen’s Univ., Kingston, ON,
available from the Montreal oﬃce, pp. 1–106 (English).
[9] William A. Landau, Representations of complete lattices, Abstract: Notices Amer. Math.
Soc. 18, 937.
[10] William A. Landau, Representations of complete lattices, Abstract: Notices Amer. Math.
Soc. 18, 937, December, 1975.
[11] George A. Menuhin, Universal algebra. D. Van Nostrand, Princeton, 1968.
[12] George A. Menuhin, Universal algebra. 2nd ed., University Series in Higher Mathematics,
vol. 58, D. Van Nostrand, Princeton, March, 1968 (English), no Russian translation.
[13] Ernest T. Moynahan, On a problem of M. Stone, Acta Math. Acad. Sci. Hungar. 8 (1957),
455–460.
[14] Ernest T. Moynahan, On a problem of M. Stone, Acta Math. Acad. Sci. Hungar. 8 (1957),
455–460 (English), Russian translation available.
Figure 8.2: The most important bibliographic entry types.

8.5
Back matter
249
Figure 8.3: Bibliography in the article document class.

250
Chapter 8
Documents
Tip
Do not leave spaces in a \cite command. For example, \cite{eM57␣} produces [?]
indicating an unknown reference.
You can use \cite to cite two or more items in the form
\cite{hA70,eM57}
which typesets as [1, 13]. There is also an optional argument for \cite to specify
additional information. For example,
\cite[pages~2--15]{eM57}
typesets as [13, pages 2–15].
If you wish to use labels rather than numbers to identify bibliographic items, then
you can specify those labels with an optional argument of the \bibitem command:
typed as
\bibitem[EM57]{eM57}
Ernest~T. Moynahan, \emph{On a problem of M. Stone},
Acta Math. Acad. Sci. Hungar.
\textbf{8} (1957), 455--460.
If this optional argument of \bibitem is used, then the \cite command produces
[EM57]. The argument of \begin{thebibliography} must be set wide enough to
allow for such labels.
Rule
Label for a bibliographic item
A label cannot contain a comma or a space.
The examples I have used follow the formatting rules set by the AMS. Only titles
are italicized, and only volume numbers of journals are set in boldface. You also have
to watch the order in which the items are given, the punctuation, and the capitalization.
If an author appears repeatedly, use the \bysame command, which replaces the
author’s name with a long dash followed by a thin space. For example,
\bibitem{gF86}
Grant~H. Foster,
\emph{Computational complexity in lattice theory},

8.5
Back matter
251
tech. report, Carnegie Mellon University, 1986.
\bibitem{gF86a}
\bysame,
\emph{Computational complexity in lattice theory},
Research Note 128A, Carnegie Mellon University,
Pittsburgh PA, December 1986,
research article in preparation.
See the third page of secondarticle.pdf on page 275 for a typeset example.
Tip
If you want a diﬀerent title for your bibliography, say Bibliography, place the command
\renewcommand{\refname}{Bibliography}
anywhere before the thebibliography environment (see Section 14.1.7). If you use
a legacy document class or amsbook.cls, use the line
\renewcommand{\bibname}{Bibliography}
Tip
You may have more than one thebibliography environment in a document. Because
each bibliography would number the entries from 1, you should provide labels as op-
tional parameters of the \bibitem commands for cross-referencing.
8.5.2
Simple indexes
Using the \label and \pageref commands (see Section 8.4.2), it is quite simple to
produce a small index in a theindex environment. At each point in the text that you
want to reference in the index, place a \label command. The corresponding entry in
the index typesets the page number with the \pageref command.
The \item, \subitem, and \subsubitem commands create an entry, subentry,
and subsubentry, respectively. If you need additional vertical spacing when the ﬁrst
letter changes, for instance, between the “h” entries and the “i” entries, you can use the
\indexspace command. Here are some examples of index entries:
\begin{theindex}
\item Lakser, H., \pageref{Lakser}
\item Lattice, \pageref{Lattice_intro},
\textbf{\pageref{Lattice}}
\subitem distributive, \pageref{Lattice_distributive}
\subitem modular, \pageref{Lattice_distributive},

252
Chapter 8
Documents
\textbf{\pageref{Lattice_distributive2}}
\item Linear subspace, \pageref{Linear_subspace}
\end{theindex}
And here is the typeset index:
For a larger index, you should use the MakeIndex application (see Chapter 16).
8.6
Visual design
In this chapter, we have discussed the logical design of a LATEX document. The visual
design is largely left to the document class. But there is one small aspect of the visual
design we have to discuss, the page style.
To get a visual representation of the page style of your document, use layout
package of Kent McPherson. Load the package with
\usepackage{layout}
and place the \layout command somewhere in the body of your article. LATEX pro-
duces a graphical representation of the page layout. Figure 8.4 shows the page layout
for odd pages for the amsart document class with no options.
A typeset page has three parts, the running head or header, the body, and the
footer. As a rule, the document class takes care of the contents and formatting of all
three parts. For the running head and footer, however, you can override the page design
of the document class with the command
\pagestyle{style }
where the argument style is one of the following:
plain The running head is empty and the footer contains only the page number
empty Both the running head and the footer are blank
headings The running head contains the information provided by the document class
and the footer is empty
myheadings The running head contains the information provided by the commands
\markboth and \markright, the footer is empty

8.6
Visual design
253
Figure 8.4: Page layout for the amsart document class.

254
Chapter 8
Documents
The \markright command takes only one argument. The last \markright on a page
provides the running head information for that page. The \markboth command has
two arguments. The ﬁrst provides the running head information for a left-hand page,
the second provides the running head information for a right-hand page. The AMS
document classes also have a \markleft command for the running head information
for a left-hand page.
The \thispagestyle command is the same as \pagestyle except that it aﬀects
only the current page.
For instance, if the current page is a full-page graphic, you might want to issue the
command
\thispagestyle{empty}
The \maketitle command automatically issues a
\thispagestyle{plain}
command, so if you want to suppress the page number on the ﬁrst page of a document,
you have to put
\thispagestyle{empty}
immediately after the \maketitle command.
The commands listed in Figure 8.4 are length commands (see Section 14.5.2) and
can be changed with the commands introduced in that section. As a rule, you do not
have to worry about these settings, they are chosen by the document class for you.
Sometimes, however, you have a job that requires such changes. I once had to submit
a research plan on a form with a 7.5 inch by 5 inch box. To be able to cut and paste the
typeset report, I had to produce the text with a \textwidth of 7 inches. If I simply set
\setlength{\textwidth}{7in}
the text would overﬂow the printed page and the last few characters of each line would
be missing. So I had to change the margins by starting the document with
\documentclass[12pt]{report}
\setlength{\textwidth}{7in}
\setlength{\oddsidemargin}{0pt}
All of Chapter 4 of The LATEX Companion, 2nd edition [56] deals with page layouts.
There you can ﬁnd a description of the geometry package of Hideo Umeki, which
computes all the parameters from the ones you supply. Also you ﬁnd there a discussion
of Piet van Oostrum’s excellent package, fancyhdr, which allows you to create your
own page style (see also [24]).
However, if you submit an article to a journal, do not change the type size, page
dimensions, headers. Use the document class and the article templates the journal pro-
vides (if any). This will make your submission easier for you and the journal. See also
Section 2.6.

C H A P T E R
9
The AMS article
document class
In this chapter, we discuss amsart, the main AMS document class for journal articles.
The AMS book document class is discussed in Chapter 17.
In Section 9.1, I argue that there are good reasons why you should write your arti-
cles for publication in amsart. Section 9.2 introduces the rules governing the top mat-
ter in the amsart document class. The amsart sample article secondarticle.tex is
presented in Section 9.3. In Section 9.4, you are guided through the process for creating
detailed templates.
A document class is ﬁnely tuned by its options. In Section 9.5, we discuss the
options of amsart. Section 9.6 brieﬂy describes the various packages in the AMS
distribution and their interdependencies.
9.1
Why amsart?
9.1.1
Submitting an article to the AMS
You want to submit an article written with the amsart document class to the Proceed-
ings of the American Mathematical Society.
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1_9
255

256
Chapter 9
The AMS article document class
For general information on the AMS journals, go to the AMS Web site
http://www.ams.org/
and start discovering the wealth of relevant information for Author, in the Author
Resource Center.
To ﬁnd the class ﬁle for the Proceedings at the http://www.ams.org/ site, type
in the search ﬁeld: proc_amslatex. Click on Proceedings of the AMS, choose
the TeX package AMS-LaTeX, and ﬁnally, choose proc-l.cls to download it.
Now, in the preamble of your article, replace the line
\documentclass{amsart}
with
\documentclass{proc-l}
Typeset the article and you are done. Your article is formatted as it will appear in the
Proceedings.
9.1.2
Submitting an article to Algebra Universalis
There are many journals whose document classes are based on amsart. For instance,
http://www.algebrauniversalis.com
takes you to the home page of the journal Algebra Universalis. To ﬁnd the document
class, click on Instructions for Authors and in Section D, click on au.cls. Now
in your article make the replacement
\documentclass{au}
and your article typesets in the format appropriate for this journal.
9.1.3
Submitting to other journals
A large number of journals use document classes based on amsart. Not all are as
friendly as Algebra Universalis, but as a rule a small number of changes in the article
suﬃce.
All of them share the attribute that the top matter is given as the arguments of
several commands. In the introductory sample article, firstarticle.tex, on page 4,
there were only four, but in the sample article secondarticle.tex in Section 9.3,
there are nine—there could be more. Contrast this with the legacy article class (see
Section 10.1.1). As a result, this document class is able to shape the top matter as the
journal requires. Even if the names of some of these commands are diﬀerent (e.g.,
affiliation for address), the principles you learn from the amsart document class
apply.

9.2
The top matter
257
Many journals insist that you use their own document classes. For these, you may
have to add the AMS packages (see Section 9.6) to continue using the enhancements of
the AMS.
A shrinking number of journals use document classes incompatible with the AMS
packages. If you can, avoid these journals.
9.1.4
Submitting to conference proceedings
The AMS also has a document class for articles for book-form proceedings of meetings.
The diﬀerences in the rules for the amsart and amsproc document classes are minor,
for instance, amsproc does not access \date.
9.2
The top matter
See the typeset top matter of the secondarticle.tex article on pages 272 and 275 for
a fairly representative example. As you may recall from Section 1.8, part of the author
information is moved to the end of the typeset article—see page 275.
Title page information is provided as arguments of several commands. For your
convenience, I divide them into three groups: information about the article, information
about the author, and AMS related information.
There is only one general rule.
Rule
Top matter commands
All top matter commands are short.
This means that there can be no blank line (or \par command) in the argument of any
of these commands (see Section 3.3.3).
9.2.1
Article information
You have to supply ﬁve pieces of information about the article.
Rule
Title
Command: \title
Separate lines with \\
Optional argument: Short title for running head

258
Chapter 9
The AMS article document class
Do not put a period at the end of a title
Do not use custom commands in the title
The typeset title is placed on the front page of the typeset article.
Many titles are too long to be typeset on a single line. If the way LATEX breaks
the title is not satisfactory, you can indicate where the title should be broken with the
\\ command. Alternatively, you may nudge LATEX in the right direction with ~ (see
Section 3.4.3). For instance, the title:
The \texttt{amsart} document class
is broken by LATEX between document and class. So either add \\:
The \texttt{amsart}\\ document class
or replace document class with document~class:
The \texttt{amsart} document~class
The running head (see Section 8.6) is the title on odd-numbered pages, set in capi-
tal letters. If the title is more than a few words long, use an optional argument to specify
a short title for the running head. Do not use \\ in the short title.
Example of a title:
\title{A construction of distributive lattices}
A title with a short title:
\title[Complete-simple distributive lattices]
{A construction of\\ complete-simple
distributive lattices}
Note the AMS rules about short titles and the table of contents in Section 17.2.1.
Rule
Translator
Command: \translator
Do not put a period at the end of the argument.
The typeset \translator is placed on the last page of the typeset article, before the ad-
dress(es). There can be more than one translator. Each should be given as the argument
of a separate \translator command.
Example:
\translator{Harry~M. Goldstein}

9.2
The top matter
259
Rule
Dedication
Command: \dedicatory
Separate lines with \\
The typeset dedication is placed under the author(s).
Example:
\dedicatory{To the memory of my esteemed
friend and teacher,\\ Harry~M. Goldstein}
Rule
Date
Command: \date
Example:
\date{January 22, 2015}
The typeset \date is placed on the front page of the typeset article as a footnote. Do not
use this when you submit an article; specify the submission date.
To suppress the date, use \date{} or omit the \date command entirely.
9.2.2
Author information
There are seven pieces of information about yourself.
Rule
Author
Command: \author
Optional argument: Short form of the name for the running head
The typeset author is placed on the front page of the typeset article.
Examples:
\author{George~A. Menuhin}
With a short form of the name for the running head:
\author[G.\,A. Menuhin]{George~A. Menuhin}
Section 9.2.4 discusses how to specify multiple authors.

260
Chapter 9
The AMS article document class
Rule
Contributor
Command: \contrib
Optional argument: Describing the contribution
The typeset contributor’s name is placed on the front page of the typeset article.
Examples:
A contributor authoring an appendix:
\contrib[with an appendix by]{John Blaise}
If this appendix has two authors:
\contrib[with an appendix by]{J. Blaise}
\contrib[]{W. Brock}
This typesets (with author G. A. Menuhin) the author line as
G. A. MENUHIN, WITH AN APPENDIX BY J. BLAISE AND W. Brock
Contributors can have addresses, current addresses, etc., just like authors.
Rule
Address
Command: \address
Separate lines with \\
Optional argument: Name of author
The typeset address is placed at the end of the typeset article.
Example:
DEPARTMENT OF APPLIED MATHEMATICS, UNIVERSITY OF WINNEBAGO, WINNEBAGO, MN 53714
which is typed as
\address{Department of Applied Mathematics\\
University of Winnebago\\
Winnebago, MN 53714}
Notice that LATEX replaces the \\ line separators with commas.

9.2
The top matter
261
If there are several authors, you can use the author’s name as an optional argument
of \address to avoid ambiguity. See Example 4 in Section 9.2.5 (page 267) for a
complete example.
Rule
Current address
Command: \curraddr
Separate lines with \\
Optional argument: name of author
The typeset current address is placed at the end of the typeset article.
Example:
Current address: Department of Mathematics, University of York, Heslington, York,
England
is typed as
\curraddr{Department of Mathematics\\
University of York\\
Heslington, York, England}
If there are several authors, you can use the author’s name as an optional argument
of \curraddr to avoid ambiguity; for some examples, see Section 9.2.5.
Rule
E-mail address
Command: \email
Optional argument: Name of author
The typeset e-mail address is placed at the end of the typeset article.
Example:
\email{gmen@ccw.uwinnebago.edu}
Tip
Some e-mail addresses contain the special underscore character ( _ ).
Recall (see
Section 3.4.4) that you have to type \_ to get _.

262
Chapter 9
The AMS article document class
Example:
\email{George\_Gratzer@umanitoba.ca}
Tip
Some older e-mail addresses contain the percent symbol (%); recall that you have to
type \% to get % (see Section 3.4.4).
Example:
\email{h1175moy\%ella@relay.eu.net}
Rule
Web (home) page (URL)
Command: \urladdr
Optional argument: Name of author
The typeset Web (home) page is placed at the end of the typeset article.
Example:
\urladdr{http://www.maths.umanitoba.ca/homepages/gratzer/}
Tip
Many Internet addresses contain the tilde (˜), indicating the home directory of the user.
Type ˜ to get ˜ and not \~, as recommended in Section 3.4.4. $\sim$ is also unaccept-
able.
Example:
\urladdr{http://kahuna.math.hawaii.edu/~ralph/}
Rule
Research support or other acknowledgments
Command: \thanks
Do not specify linebreaks.
Terminate the sentence with a period.

9.2
The top matter
263
The typeset research support or other acknowledgments is placed on the front page of
the typeset article as an unmarked footnote.
Example:
\thanks{Supported in part by NSF grant PAL-90-2466.}
A \thanks{} command is ignored in typesetting.
9.2.3
AMS information
The AMS requires that you supply two more pieces of information about the article.
The following are collected at the bottom of the ﬁrst page as unmarked footnotes
along with the arguments of the \thanks and \date commands.
Rule
AMS subject classiﬁcations
Command: \subjclass
Optional argument: 2010—the default is 1991.
amsart supplies the phrase 1991 Mathematics Subject Classiﬁcation and a period
at the end of the subject classiﬁcation—with the optional argument 2010, the phrase
is 2010 Mathematics Subject Classiﬁcation
The argument should be either a ﬁve-character code or the phrase Primary: followed
by a ﬁve-character code, a semicolon, the phrase Secondary: and one or more ad-
ditional ﬁve-character codes.
The typeset AMS subject classiﬁcations is placed at the bottom of the front page of the
typeset article as a footnote.
Examples:
\subjclass[2010]{06B10}
\subjclass[2010]{Primary: 06B10; Secondary: 06D05}
The current subject classiﬁcation scheme for mathematics was adopted in 2010,
making the 1991 classiﬁcation scheme obsolete. Thus, 2010 should be considered as a
compulsory optional argument—maybe the only one in all of LATEX.
The current subject classiﬁcation scheme, MSC 2010, is available from the AMS
Web site
http://www.ams.org/
Search for MSC. Or in the Author Resource Center click on MSC.

264
Chapter 9
The AMS article document class
Rule
Keywords
Command: \keywords
Do not indicate line breaks.
amsart supplies the phrase Key words and phrases. and a period at the end of the
list of keywords.
The typeset keywords are placed on the front page of the typeset article as a footnote.
Example:
\keywords{Complete lattice, distributive lattice,
complete congruence, congruence lattice}
Keywords are optional for many journals.
Further footnotes
An additional \thanks command creates an unmarked footnote.
Examples:
\thanks{This is a preliminary version of this article,
prepared for the Second Annual Meeting of the
Statistical Association of Winnebago.}
\thanks{This article is in final form, and no version
of it will be submitted elsewhere.}
9.2.4
Multiple authors
If an article has several authors, repeat the author information commands for each one.
Take care that the e-mail address follows the address.
If two authors share the same address, omit the \address command for the second
author, who can still have a diﬀerent e-mail address and Web home page. An additional
\thanks command for the ﬁrst author should precede any \thanks commands for
the second author. Since the footnotes are not marked, the argument of the \thanks
command for research support should contain a reference to the author:
\thanks{The research of the first author was supported
in part by NSF grant PAL-90-2466.}
\thanks{The research of the second author was supported by
the Hungarian National Foundation for Scientific
Research, under Grant No.~9901.}

9.2
The top matter
265
Finally, if an article has more than two authors, supply the author information
for each author as usual, but explicitly specify the running heads with the \markleft
command:
\markleft{FIRST AUTHOR ET AL.}
where FIRST AUTHOR must be all capitals.
If there are multiple authors, sometimes it may not be clear whose address, current
address, e-mail address, or Web home page is being given. In such cases, give the name
of the authors as optional arguments for these commands. For example,
Email address, Ernest T. Moynahan: emoy@ccw.uwinnebago.edu.
is typed as
\email[Ernest~T. Moynahan]{emoy@ccw.uwinnebago.edu}
See also Example 4 in Section 9.2.5.
9.2.5
Examples
The following examples show typical top matter commands and can be found in the
topmat.tpl ﬁle in the samples folder (see page 5).
Example 1
One author.
%Article information
\title[Complete-simple distributive lattices]
{A construction of complete-simple\\
distributive lattices}
\date{\today}
%Author information
\author{George~A. Menuhin}
\address{Computer Science Department\\
University of Winnebago\\
Winnebago, MN 53714}
\email{gmen@ccw.uwinnebago.edu}
\urladdr{http://math.uwinnebago.edu/homepages/menuhin/}
\thanks{This research was supported by
the NSF under grant number 23466.}
%AMS information
\keywords{Complete lattice, distributive lattice,
complete congruence, congruence lattice}
\subjclass[2010]{Primary: 06B10; Secondary: 06D05}

266
Chapter 9
The AMS article document class
In the \title command, supplying the optional argument for the running head is the
rule, not the exception. The only required item is \title. If it is missing, you get the
strange message:
! Undefined control sequence.
<argument> \shorttitle
l.49 \maketitle
Example 2
Two authors but only the ﬁrst has a Web home page. I only show the
author information section here. The other commands are the same as in Example 1.
%Author information
\author{George~A. Menuhin}
\address{Computer Science Department\\
University of Winnebago\\
Winnebago, MN 53714}
\email{gmen@ccw.uwinnebago.edu}
\urladdr{http://math.uwinnebago.edu/homepages/menuhin/}
\thanks{The research of the first author was
supported by the NSF under grant number 23466.}
\author{Ernest~T. Moynahan}
\address{Mathematical Research Institute
of the Hungarian Academy of Sciences\\
Budapest, P.O.B. 127, H-1364\\
Hungary}
\email{h1175moy\%ella@relay.eu.net}
\thanks{The research of the second author
was supported by the Hungarian
National Foundation for Scientific Research,
under Grant No. 9901.}
Example 3
Two authors, same department. I only show the author information section
here. The other commands are identical to those in Example 1.
%Author information
\author{George~A. Menuhin}
\address{Computer Science Department\\
University of Winnebago\\
Winnebago, MN 53714}
\email[George~A. Menuhin]{gmen@ccw.uwinnebago.edu}
\urladdr[George~A. Menuhin]%
{http://math.uwinnebago.edu/homepages/menuhin/}

9.2
The top matter
267
\thanks{The research of the first author was
supported by the NSF under grant number~23466.}
\author{Ernest~T. Moynahan}
\email[Ernest~T. Moynahan]{emoy@ccw.uwinnebago.edu}
\thanks{The research of the second author was supported
by the Hungarian National Foundation for
Scientific Research, under Grant No. 9901.}
Note that the second author has no \address.
Example 4
Three authors, the ﬁrst two from the same department, the second and
third with e-mail addresses and research support. I only show the author information
section. The other commands are unchanged. There are various ways of handling this
situation. This example shows one solution.
%Author information
\author{George~A. Menuhin}
\address[George~A. Menuhin and Ernest~T. Moynahan]
{Computer Science Department\\
University of Winnebago\\
Winnebago, MN 53714}
\email[George~A. Menuhin]{gmen@ccw.uwinnebago.edu}
\urladdr[George~A. Menuhin]%
{http://math.uwinnebago.edu/homepages/menuhin/}
\thanks{The research of the first author was
supported by the NSF under grant number 23466.}
\author{Ernest~T. Moynahan}
\email[Ernest~T. Moynahan]{emoy@ccw.uwinnebago.edu}
\thanks{The research of the second author was supported
by the Hungarian National Foundation for
Scientific Research, under Grant No. 9901.}
\author{Ferenc~R. Richardson}
\address[Ferenc~R. Richardson]
{Department of Mathematics\\
California United Colleges\\
Frasco, CA 23714}
\email[Ferenc~R. Richardson]{frich@ccu.frasco.edu}
\thanks{The research of the third author was
supported by the NSF under grant number 23466.}
The most common mistake in the top matter is the misspelling of a command name;
for instance, \adress. LATEX sends the error message
! Undefined control sequence.
l.37 \adress
{Computer Science Department\\

268
Chapter 9
The AMS article document class
which tells you exactly what you mistyped. Similarly, if you drop a closing brace, as in
\email{menuhin@ccw.uwinnebago.edu
you are told clearly what went wrong. Because the top matter commands are short
(see Section 3.3.3), LATEX gives the message
Runaway argument?
{menuhin@ccw.uwinnebago.edu \thanks
{The research of th\ETC.
!File ended while scanning use of \\email.
If you drop an opening brace,
\author George~A. Menuhin}
you get the message
! Too many }’s.
l.43 \author George~A. Menuhin}
If you enclose an optional argument in braces instead of brackets,
\title{Complete-simple distributive lattices}%
{A construction of complete-simple\\
distributive lattices}
LATEX uses the short title as the title and the real title is typeset before the title of the
typeset article.
9.2.6
Abstract
As we discussed in Section 8.3.1, you type the abstract in an abstract environment,
which you place as the last item before the \maketitle command. The abstract should
be self-contained; do not include cross-references and do not cite from the bibliography.
Avoid custom commands.
If you place the abstract after the \maketitle command, LATEX typesets it wher-
ever it happens to be and sends a warning.
9.3
The sample article
secondarticle.tex is the source ﬁle for our more advanced sample article (in the
samples folder, see page 5) using the amsart document class. A simpler article,
firstarticle.tex, is presented in Part I (see Section 1.8).
Look up the full text of secondarticle.tex in the samples folder. On the next
few pages, we present some important parts—from a LATEX point of view—of the source
ﬁle and the full typeset ﬁle.

9.3
The sample article
269
% Sample file: secondarticle.tex
\documentclass{amsart}
\usepackage{amssymb,latexsym}
\theoremstyle{plain}
\newtheorem{theorem}{Theorem}
\newtheorem{corollary}{Corollary}
\newtheorem*{main}{Main~Theorem}
\newtheorem{lemma}{Lemma}
\newtheorem{proposition}{Proposition}
\theoremstyle{definition}
\newtheorem{definition}{Definition}
\theoremstyle{remark}
\newtheorem*{notation}{Notation}
\numberwithin{equation}{section}
\begin{document}
\title[Complete-simple distributive lattices]
{A construction of complete-simple\\
distributive lattices}
\author{George~A. Menuhin}
\address{Computer Science Department\\
University of Winnebago\\
Winnebago, MN 53714}
\email{menuhin@ccw.uwinnebago.edu}
\urladdr{http://math.uwinnebago.edu/menuhin/}
\thanks{Research supported by the NSF under grant number
23466.}
\keywords{Complete lattice, distributive lattice,
complete congruence, congruence lattice}
\subjclass[2010]{Primary: 06B10; Secondary: 06D05}
\date{March 15, 2015}
\begin{abstract}
In this note we prove that there exist
\emph{complete-simple distributive lattices,}
that is, complete distributive lattices, in which
there are only two complete congruences.
\end{abstract}
\maketitle

270
Chapter 9
The AMS article document class
\section{Introduction}\label{S:intro}
In this note we prove the following result:
\begin{main}
There exists an infinite complete distributive lattice~$K$
with only the two trivial complete congruence relations.
\end{main}
\section{The $D^{\langle 2 \rangle}$ construction}\label{S:Ds}
For the basic notation in lattice theory and universal algebra,
see Ferenc~R. Richardson~\cite{fR82} and
George~A. Menuhin~\cite{gM68}.
We start with some definitions:
\begin{definition}\label{D:prime}
Let $V$ be a complete lattice, and let $\mathfrak{p} = [u, v]$
...
\end{definition}
Now we prove the following result:
\begin{lemma}\label{L:ds}
Let $D$ be a complete distributive lattice satisfying
conditions \eqref{m-i} and~\eqref{j-i}.
Then
...
\end{lemma}
\begin{proof}
By conditions~\eqref{m-i} and \eqref{j-i},
...
\end{proof}
\begin{corollary}\label{C:prime}
If $D$ is complete-prime, then so is $D^{\langle 2 \rangle}$.
\end{corollary}
The motivation for the following result comes
from Soo-Key Foo~\cite{sF90}.
\begin{lemma}\label{L:ccr}

9.3
The sample article
271
Let $\Theta$ be a complete congruence relation of
...
\end{lemma}
\begin{proof}
Let $\Theta$ be a complete congruence relation of
$D^{\langle 2 \rangle}$ satisfying \eqref{E:rigid}.
Then $\Theta = \iota$.
\end{proof}
\section{The $\Pi^{*}$ construction}\label{S:P*}
The following construction is crucial to our proof
of the Main Theorem:
\begin{definition}\label{D:P*}
Let $D_{i}$, for $i \in I$, be complete distributive lattices
satisfying condition~\eqref{j-i}.
...
\end{definition}
\begin{notation}
If $i \in I$ and $d \in D_{i}^{-}$, then
...
\end{notation}
See also Ernest~T. Moynahan \cite{eM57a}.
Next we verify:
\begin{theorem}\label{T:P*}
Let $D_{i}$, for $i \in I$, be complete distributive lattices
satisfying condition~\eqref{j-i}.
Let $\Theta$ be a complete
...
\end{theorem}
\begin{proof}
...
\end{proof}
\begin{theorem}\label{T:P*a}
Let $D_{i}$ for $i \in I$ be complete distributive lattices
...
\end{theorem}

272
Chapter 9
The AMS article document class
\begin{proof}
Let $\Theta$ be a complete congruence on
$\Pi^{*} ( D_{i} \mid i \in I )$. Let $i \in I$.
\end{proof}
The Main Theorem follows easily from \ref{T:P*} and \ref{T:P*a}.
\begin{thebibliography}{9}
\bibitem{sF90}
Soo-Key Foo, \emph{Lattice Constructions}, Ph.D. thesis,
University of Winnebago, Winnebago, MN, December, 1990.
\bibitem{gM68}
George~A. Menuhin, \emph{Universal algebra},
D.~van Nostrand, Princeton, 1968.
\bibitem{eM57}
Ernest~T. Moynahan, \emph{On a problem of M. Stone},
Acta Math. Acad. Sci. Hungar. \textbf{8} (1957), 455--460.
\bibitem{eM57a}
\bysame, \emph{Ideals and congruence relations in lattices}.
II, Magyar Tud. Akad. Mat. Fiz. Oszt. K\"{o}zl.
\textbf{9} (1957), 417--434
(Hungarian).
\bibitem{fR82}
Ferenc~R. Richardson, \emph{General lattice theory},
Mir, Moscow, expanded and revised ed., 1982 (Russian).
\end{thebibliography}
\end{document}

9.3
The sample article
273

274
Chapter 9
The AMS article document class

9.4
Article templates
275
9.4
Article templates
In this section, we create a template to be used for amsart articles. Open it with a text
editor and save it under a diﬀerent name. You can then start to write your new article
using the new ﬁle, without having to remember the details governing the preamble and
the top matter.
Create the template, which contains a customized preamble and top matter with
sample bibliographic items, in several steps.
Step 1
In your text editor, open the amsart.tpl document from the samples folder
(see page 5) and save it in your work subfolder as myams.tpl. Alternatively, type in
the lines as shown in this section.
The ﬁrst few lines of the ﬁle are
% Sample file: amsart.tpl
%Preamble
\documentclass{amsart}
\usepackage{amssymb,latexsym}

276
Chapter 9
The AMS article document class
Notice the use of commented out lines (lines that start with %) that have been added as
comments about the ﬁle.
Edit line 1 to read
% Template file: myams.tpl
The lines
\documentclass{amsart}
\usepackage{amssymb,latexsym}
specify the amsart document class and the use of the amssymb and latexsym packages
to gain access, by name, to all the symbols listed in Appendices A and B.
Step 2
After the \usepackage command, there are sets of proclamation deﬁnitions
corresponding to the examples in Section 4.4.2. Choose Option 5 for myams.tpl by
deleting all the lines related to the other options. You are left with the lines
%Theorems, corollaries, lemmas, and propositions, in the
%most emphatic (plain) style. All are numbered separately.
%There is a Main Theorem in the most emphatic (plain)
%style, unnumbered. There are definitions, in the less
%emphatic(definition) style. There are notations, in the
%least emphatic (remark) style, unnumbered.
\theoremstyle{plain}
\newtheorem{theorem}{Theorem}
\newtheorem{corollary}{Corollary}
\newtheorem*{main}{Main Theorem}
\newtheorem{lemma}{Lemma}
\newtheorem{proposition}{Proposition}
\theoremstyle{definition}
\newtheorem{definition}{Definition}
\theoremstyle{remark}
\newtheorem*{notation}{Notation}
Step 3
Two more choices are presented. You can have either one or two authors—for
more complex situations, see Section 9.2.4. For the myams.tpl template, choose one
author by deleting everything between
%Two authors

9.4
Article templates
277
and
%End Two authors
You are left with
\begin{document}
%One author
\title[shorttitle]{titleline1\\
titleline2}
\author{name}
\address{line1\\
line2\\
line3}
\email{name@address}
\urladdr{http://homepage}
\thanks{thanks}
%End one author
\keywords{keywords}
\subjclass[2010]{Primary: subject; Secondary: subject}
\date{date}
\begin{abstract}
abstract
\end{abstract}
\maketitle
\begin{thebibliography}{99}
\end{thebibliography}
\end{document}
In the top matter, ﬁll in your own personal information. For instance, I edited
\author{name}
to read
\author{George~Gr\"{a}tzer}
I also edited \address, \email, \urladdr, and \thanks. After the editing, I had the
following:
%top matter
\title[shorttitle]{titleline1\\
titleline2}

278
Chapter 9
The AMS article document class
\author{George~Gr\"{a}tzer}
\address{University of Manitoba\\
Department of Mathematics\\
Winnipeg, MB R3T 2N2\\
Canada}
\email{gratzer@ms.umanitoba.ca}
\urladdr{http://server.maths.umanitoba.ca/homepages/gratzer/}
\thanks{Research supported by the NSERC of Canada.}
\keywords{keywords}
\subjclass[2010]{Primary: subject; Secondary: subject}
\date{date}
\begin{abstract}
abstract
\end{abstract}
\maketitle
\begin{thebibliography}{99}
\end{thebibliography}
\end{document}
Since this template is meant to be used for all my future articles, I do not edit the lines
that change from article to article (\title, \keywords, and so on).
Remember that the short title is for running heads, the title shown at the top of
every odd-numbered page other than the title page. If the title of your article is only
one line long, delete the separation mark \\ and the second line, except for the closing
brace. If the full title of your article is short, delete [shorttitle].
Now save myams.tpl. I saved my template under the name ggamsart.tpl (in
the samples folder, see page 5). You can also make an additional template with two
authors to be used as a template for joint articles. Note that at the end of the template,
just before the line \end{document}, there are two lines:
\begin{thebibliography}{99}
\end{thebibliography}
The argument of \begin{thebibliography} should be 9 if there are fewer than 10
references, 99 with 10–99 references, and so forth. We discuss how to format bib-
liographic items in 8.5.1. The templates for bibliographic items are listed after the
\end{document} line.
To make sure that you do not overwrite your template, I recommend that you make
it read-only. How you do this depends on your computer’s operating system.

9.5
Options
279
You should modify the template you create in this section to the template of the
journal you submit your article to. In the samples folder, you ﬁnd the AMS template
for the Proceedings of the AMS, called amsproc.tpl.
9.5
Options
The amsart document class supports a number of options, aﬀecting many attributes.
For each attribute there is a default value that is used if a value is not speciﬁed.
Font size
Options:
9pt
10pt
default
11pt
12pt
This option declares the default font size. You may want to use the 12pt option for
proofreading:
\documentclass[12pt]{amsart}
Remember, however, that changing the font size changes the line breaks, so changing
the 12pt option back to 10pt may require that you make some adjustments in the text
(see Section 1.4).
Paper size
Options:
letterpaper
(8.5 inches by 11 inches)
default
legalpaper
(8.5 inches by 14 inches)
a4paper
(210 mm by 297 mm)
Equations and equation numbers
A number of options deal with the placement of equations and equation numbers.
Options:
leqno
default
reqno
By default, equation numbers are placed on the left, the default leqno option. The
reqno option places the equation numbers on the right.
Option:
fleqn
This option positions equations a ﬁxed distance from the left margin rather than cen-
tering them. The fleqn option is typically used in conjunction with the reqno option.
Here is how an equation looks with the fleqn and reqno options:

280
Chapter 9
The AMS article document class
 π
0
sin x dx = 2
(1)
typed as
\begin{equation}\label{E:firstInt}
\int_{0}^{\pi} \sin x \, dx = 2
\end{equation}
Options:
tbtags
centertags
default
The tbtags option uses top-or-bottom tags for a split environment, that is, it places
the equation number level with the last line if numbers are on the right, or level with
the ﬁrst line if the numbers are on the left:
f = (x1x2x3x4x5x6)2
= (x1x2x3x4x5 + x1x3x4x5x6 + x1x2x4x5x6 + x1x2x3x5x6)2
= (x1x2x3x4 + x1x2x3x5 + x1x2x4x5 + x1x3x4x5)2
(1)
tbtags
The centertags option (the default) vertically centers the equation number in a
split subsidiary math environment.
Limits
Options:
intlimits
nointlimits
default
The intlimits option places the subscripts and superscripts of integral symbols above
and below the integral symbol rather than on the side in a displayed math formula—with
this option you can use the \nolimit command to disable the option for one integral.
The nointlimits option positions the subscripts and superscripts of integral symbols
on the side.
Options:
sumlimits
default
nosumlimits
The sumlimits option places the subscripts and superscripts of large operators, such
as ∑, ∏, ∐, ⨂, ⨁, above and below the large operator in a displayed math formula.
nosumlimits positions them on the side (see Table 5.7 and Section A.7.1).
Options:
namelimits
default
nonamelimits

9.5
Options
281
The namelimits option places the subscripts and superscripts of operators with limits
such as det, inf, lim, max, min, and so on, above and below the operator in a displayed
math formula. nonamelimits positions them on the side (see Tables 5.4, 5.5, and
Section A.7).
Two-sided printing
Options:
twoside
default
oneside
The twoside option formats the output for printing on both sides of the paper. The
alternative is the oneside option. This option inﬂuences running heads, the placement
of page numbers, and so on.
Two-column printing
Options:
twocolumn
onecolumn
default
The twocolumn option typesets the document in two columns.
Title page
Options:
titlepage
notitlepage
default
The titlepage option creates a separate title page including the abstract.
The notitlepage option splits the top matter between the ﬁrst and last pages of the
typeset article.
Draft
Options:
draft
final
default
The draft option prints a slug in the margin next to each line that is too wide. The
final option does not. Note that this option is passed on to some packages, such as
graphicx.
Fonts
Option:
noamsfonts
With this option, the document class does not load the packages necessary for the use
of the AMSFonts font set.
Option:
psamsfonts
The psamsfonts option tells LATEX to use the PostScript version of the AMSFonts set.

282
Chapter 9
The AMS article document class
No math
Option:
nomath
By default, amsart loads the amsmath package (which, in turn, loads three more math
packages). If you want to use the title page and related features without the math fea-
tures, you can use the nomath option.
9.6
The AMS packages
If you follow the recommendation of this book and begin each article with
\documentclass{amsart}
\usepackage{amssymb,latexsym}
then you can safely ignore most of the information in this section. There are two minor
exceptions, the packages amsxtra and upref.
However, if you use a document class that does not load the same packages that
amsart loads, then you have to load the packages needed for your work. Typically, you
have
\usepackage{amsmath,amsfonts,amsthm}
\usepackage{amssymb,latexsym}
as a minimum.
The AMS distribution contains many packages that can be loaded together or by
themselves.
Math enhancements
amsmath The primary math enhancement package, which loads the four packages,
amsgen, amsbsy, amsopn, and amstext.
amsbsy Provides two commands for the use of bold math symbols, \boldsymbol and
\pmb (see Section 6.4.3).
amscd Commands for creating simple commutative diagrams (see Section 7.8).
amsgen An auxiliary package that is never invoked directly. It is loaded by all the AMS
math packages (except for upref).
amsopn Provides operator names and also the \DeclareMathOperator command for
deﬁning new ones (see Section 5.6).

9.6
The AMS packages
283
amstext Deﬁnes the \text command and redeﬁnes commands such as \textrm and
\textbf to behave like the \text command (see Section 5.4.6).
amsxtra Provides the “sp” math accents (see Sections 5.7 and A.8) and loads the
amsmath package.
upref Ensures that the \ref command always produces upright numbers.
AMSFonts
amsfonts Contains the basic commands needed to utilize the AMSFonts. It also de-
ﬁnes the \mathfrak command which makes the Euler Fraktur math alphabet
available (see Section 6.4.2). If you use the PostScript AMSFonts font set, you
should load this package with the option
\usepackage[psamsfonts]{amsfonts}
In addition, if you want to use the 12pt document class option, then you must
also load the exscale package (see Section 10.3):
\usepackage{exscale}
amssymb Deﬁnes the symbol names for amsfonts. It loads amsfonts.
eucal Replaces the calligraphic math alphabet with the Euler Script math alphabet
(see Section 6.4.2). If you load it with the option mathscr, as in
\usepackage[mathscr]{eucal}
then both the \mathscr and the \mathcal commands are available, so you can
have both and 𝒞ℰ, typed as
$\mathcal{C}\mathcal{E}$ and $\mathscr{C}\mathscr{E}$
eufrak Deﬁnes the Euler Fraktur math alphabet (see Section 6.4.2).
Loading packages
amsart contains code to provide more ﬂexible formatting of proclamations and the
proof environment (see Sections 4.4.2 and 4.5). By loading the amsthm package you
can add this functionality to a non-AMS document class. The amsthm package loads
the amsgen package.
amsart loads four packages from the math enhancements group, the amsmath,
amsbsy, amstext, amsopn, and amsgen packages, and the amsfonts package from
the AMSFonts group.

284
Chapter 9
The AMS article document class
A typical article using the legacy article document class (see Section 10.1)
and the AMS enhancements would normally have
\documentclass{article}
\usepackage{amsmath}% math enhancements
\usepackage{amssymb,latexsym}% AMSFonts and LaTeX symbol names
\usepackage{amsthm}% proclamations with style
and perhaps the following:
\usepackage{eucal}% Euler Script
Note that it is not critical for you to remember which packages load others. No
harm is done if you type
\usepackage{amsmath}
\usepackage{amsbsy}
The amsbsy package is loaded by the amsmath package, and the
\usepackage{amsbsy}
line is ignored by LATEX.
All the math related options of amsart (see Section 9.5) are also options of the
amsmath package. So, for instance, if you want the equation numbers on the right, load
amsmath with the reqno option:
\usepackage[reqno]{amsmath}
Multiple indices
The AMS distribution also contains the package amsmidx for creating multiple indices
for amsbook. This package is discussed in Section 16.5.

C H A P T E R
10
Legacy documents
Even though the AMS spent a few decades reﬁning the amsart document class, some
of the legacy document classes of LATEX are still around. If you want to whip up a quick
report or write up a research note, the legacy article or report document classes
may serve you well.
In this chapter, we discuss some of the legacy LATEX document classes. We take
up the book document class in Chapter 17. We do not discuss the slides document
class for preparing slides. It is now considered obsolete. Use instead the beamer class
which we discuss in Chapter 12.
We conclude this chapter with a description of the components of the standard
LATEX distribution.
10.1
Articles and reports
The article and report document classes are very similar. There are two substantive
diﬀerences to remember:
1. The report document class provides a separate page for the abstract by default, the
article document class does not.
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1_10
285

286
Chapter 10
Legacy documents
2. The report document class has two additional sectioning commands, \chapter
and \part. We discuss these commands in Section 17.1.1.
In the samples folder (see page 5) is the document legacy-article.tex, a vari-
ant of the introductory sample article, firstarticle.tex of Chapter 1. The ﬁrst page
of this article is shown typeset on the following page.
10.1.1
Top matter
For a detailed discussion of the top matter, refer to Chapter 8, in particular Sections 8.1
and 8.3—see also Figure 8.1. Here is the top matter of the legacy article:
\title{A construction of complete-simple\\
distributive lattices}
\author{George~A. Menuhin\thanks{Research supported
by the NSF under grant number 23466.}\\
Computer Science Department\\
Winnebago, MN 23714\\
menuhin@cc.uwinnebago.edu}
\date{March 15, 2010}
\maketitle
There are four commands for the top matter: \title, \author, \thanks, and
\date.
Rule
Top matter for the article document class
1. If necessary, break the title into separate lines with \\. Do not put a \\ at the end
of the last line.
2. \thanks places a footnote at the bottom of the ﬁrst page. If it is not needed, omit it.
3. Separate the lines of the address with \\. Do not put a \\ at the end of the last line.
4. Multiple authors are separated by \and.
5. There is only one \author command, and it contains all the information—name,
address, support—about all the authors. There is no \\ command before the \and
command.
6. If there is no \date command, LATEX will insert the date on which you typeset
the ﬁle (\date{\today} will produce the same result). If you do not want any
date to appear, type \date{}. For a speciﬁc date, such as February 21, 2007, type
\date{February 21, 2007}.
7. The \title command is the only required command. The others are optional.

10.1
Articles and reports
287
A construction of complete-simple
distributive lattices
George A. Menuhin∗
Computer Science Department
Winnebago, MN 23714
menuhin@cc.uwinnebago.edu
March 15, 2006
Abstract
In this note, we prove that there exist complete-simple distributive
lattices, that is, complete distributive lattices in which there are only two
complete congruences.
1
Introduction
In this note, we prove the following result:
Theorem 1 There exists an inﬁnite complete distributive lattice K with only
the two trivial complete congruence relations.
2
The Π∗construction
The following construction is crucial in the proof of our Theorem:
Deﬁnition 1 Let Di, for i ∈I, be complete distributive lattices satisfying con-
dition (J). Their Π∗product is deﬁned as follows:
Π∗(Di | i ∈I) = Π(D−
i | i ∈I) + 1;
that is, Π∗(Di | i ∈I) is Π(D−
i | i ∈I) with a new unit element.
Notation 1 If i ∈I and d ∈D−
i , then
⟨. . . , 0, . . . , d, . . . , 0, . . .⟩
is the element of Π∗(Di | i ∈I) whose i-th component is d and all the other
components are 0.
∗Research supported by the NSF under grant number 23466.
1
Figure 10.1: The ﬁrst page of the legacy article typeset

288
Chapter 10
Legacy documents
As you see, the rules for the \date command here diﬀer slightly from the rules
for the \date command in the amsart document class. However, the rules for the
command \author here are very diﬀerent from the rules for the \author command in
the amsart document class.
For two authors use the following template:
\author{name1\thanks{support1}\\
address1line1\\
address1line2\\
address1line3
\and
name2\thanks{support2}\\
address2line1\\
address2line2\\
address2line3}
Note the use of the \and command, which separates the two authors.
One more diﬀerence to keep in mind. Place the abstract after the \maketitle
command.
10.1.2
Options
The article and report document classes have a similar range of options. These are
listed below.
Font size
Options:
10pt
default
11pt
12pt
Each option declares the speciﬁed size to be the default font size.
Paper size
Options:
letterpaper
(8.5 inches by 11 inches)
default
legalpaper
(8.5 inches by 14 inches)
executivepaper
(7.25 inches by 10.5 inches)
a4paper
(210 mm by 297 mm)
a5paper
(148 mm by 210 mm)
b5paper
(176 mm by 250 mm)
Draft
Options:
draft
final
default

10.1
Articles and reports
289
The draft option places a slug in the margin next to each line that is too wide (see
Section 1.4). The final option does not. Note that this option is passed on to some
packages, such as graphicx. To prevent this, invoke graphicx with the final option.
Landscape printing
Option:
landscape
The landscape option typesets the document in landscape format, swapping the width
and height of the paper.
Two-sided printing
Options:
twoside
oneside
default
The twoside option formats the output for printing on both sides of the paper.
Two-column printing
Options:
twocolumn
onecolumn
default
The twocolumn option typesets the document in two-column format. This option has
many problems. It is better to use the multicol package (see Section 10.3.1).
Title page
Options:
titlepage
default for report
notitlepage
default for article
The titlepage option creates a separate title page and places the abstract on a separate
page. The notitlepage option places the title and the abstract together on the ﬁrst
page.
Equations and equation numbers
Options:
leqno
reqno
default
The leqno option places any equation number in the document on the left side and
reqno places them on the right.
Option: fleqn
The fleqn option sets displayed formulas ﬂush left. This option is typically used in
conjunction with the reqno option.

290
Chapter 10
Legacy documents
[1] Soo-Key Foo.
Lattice Constructions.
PhD thesis, University of Winnebago, Winnebago, MN, December 1990.
[2] George A. Menuhin.
Universal Algebra.
D. Van Nostrand, Princeton, 1968.
[3] Ernest T. Moynahan.
Ideals and congruence relations in lattices. II.
Magyar Tud. Akad. Mat. Fiz. Oszt. K¨ozl., 7:417–434, 1957.
[4] Ernest T. Moynahan.
On a problem of M.
Acta Math. Acad. Sci. Hungar., 8:455–460, 1957.
[5] Ferenc R. Richardson.
General Lattice Theory.
Mir, Moscow, expanded and revised edition, 1982.
Stone.
Figure 10.2: The openbib option.
Bibliography
Option:
openbib
The openbib option typesets the bibliography in a spread out “open” format (see
Figure 10.2).
Combinations
Of course, these options can be combined with each other and are also used by most
legacy document classes. For instance,
\documentclass[12pt,a4paper,twoside,twocolumn]{report}
produces a double-columned, two-sided report on A4 paper, the European standard, at
the 12-point font size.
10.2
Letters
The letter document class was developed for writing letters. One document can con-
tain any number of letters, each in its own letter environment. In the following ex-
ample (letter.tex in the samples folder) there is only a single letter:
% Sample file: letter.tex
\documentclass{letter}
\begin{document}

10.2
Letters
291
\address{George Gr\"{a}tzer\\
Department of Mathematics\\
University of Manitoba\\
Winnipeg, MB, R3T 2N2\\
Canada}
\signature{George Gr\"{a}tzer}
\date{}
\begin{letter}{Prof.~John Hurtig\\
Computer Science Department\\
University of Winnebago\\
Winnebago, Minnesota 23714}
\opening{Dear John,}
Enclosed you will find the first draft of the
five-year plan.
\closing{Friendly greetings,}
\cc{Carla May\\
Barry Bold}
\encl{Five-year plan}
\ps{P.S. Remember our lunch meeting tomorrow! G.}
\end{letter}
\end{document}
Figure 10.3 shows the typeset letter.
The argument of the letter environment is the name and address of the recipient.
It is a required argument and if it is omitted, you get a message such as
! Incomplete \iffalse; all text was ignored
after line 21.
<inserted text>
\fi
l.21 \end{letter}
As with all multiline arguments, the lines are separated by \\.
The arguments of some commands may apply to all the letter environments in the
document. Such commands should be placed before the ﬁrst letter environment. In
the example, \signature and \address are so placed.
If the \date command is absent, today’s date is typeset. If you want no date, use
an empty argument \date{}, as in the example. If you want all the letters in the same
document to have the same date, the \date command should precede the ﬁrst letter
environment.

292
Chapter 10
Legacy documents
George Gr¨atzer
Department of Mathematics
University of Manitoba
Winnipeg, MB, R3T 2N2
Canada
Prof. John Hurtig
Computer Science Department
University of Winnebago
Winnebago, Minnesota 23714
Dear John,
Enclosed you will ﬁnd the ﬁrst draft of the ﬁve-year plan.
Friendly greetings,
George Gr¨atzer
cc: Carla May
Barry Bold
encl: Five-year plan
P.S. Remember our lunch meeting tomorrow! G.
Figure 10.3: A sample letter.
Many of the options listed in Section 10.1.2 can also be invoked for the letter
document class.
10.3
The LATEX distribution
The LATEX distribution contains a number of document classes and packages, most of
which you have probably received with your TEX software. If you ﬁnd that you are
missing some ﬁles, see Section D.1 on how to get them.
The ﬁles of the LATEX distribution on CTAN are grouped in the directory
/pub/tex/macros/latex
into four subdirectories.

10.3
The LATEX distribution
293
base contains all the ﬁles necessary to install the system. As a rule, for every package,
say, exscale, it contains two ﬁles, exscale.ins and exscale.dtx. Typeset-
ting the ﬁrst gives you exscale.sty and typesetting the second produces the
user guide and the commented source code. Since most LATEX implementations
install the content of the unpacked directory, this directory is not for the average
user.
doc contains LATEX documentation in PDF ﬁles and also the LATEX News.
required contains the directories amslatex, babel, cyrillic, graphics, psnfss,
tools.
unpacked contains the unpacked LATEX distribution. Since most LATEX implementa-
tions install this, you may never need it.
Of the packages and tex ﬁles included in the unpacked folder, the following
should be of special interest to readers of this book.
latexsym Some symbol deﬁnitions (see the tables in Appendix A).
alltt The alltt environment, which is like the verbatim environment except that
\
{
}
retain their usual meanings.
exscale Scaled versions of the math extension font.
makeidx Commands for producing indexes (see Chapter 16).
showidx A package to allow you to typeset the index entries in the margin of your
typeset document (see Section 16.1).
nfssfont.tex Generates font tables for use with the \symbol command (see Sec-
tion 3.4.4).
There is also the ﬁle fixltx2e.sty in the unpacked directory (and the corre-
sponding fixltx2e.dtx and fixltx2e.ins in the base directory). This ﬁle con-
tains ﬁxes to latex.ltx, the main LATEX ﬁle, and also some new commands that did
not make it into the current release. For instance, fixltx2e.sty of Dec. 2005 con-
tains two important additions. It complements the \textsuperscript command (see
Section B.4) with a \textsubscript command.
More importantly, it introduces a very useful new command \TextOrMath. This
command has two arguments and it typesets the ﬁrst in text and the second in math. For
instance, if in newlattice.sty (see 14.3) you deﬁne
\newcommand{\ga}{\TextOrMath{$\alpha$\xspace}{\alpha}}

294
Chapter 10
Legacy documents
then you can type \ga in both test and math. Indeed.
this is \ga in text, and this is $\ga - x^2$ in math
typesets as
this is 𝛼in text, and this is 𝛼−𝑥2 in math
If you want to use these commands, include the line
\usepackage{fixltx2e}
in the preamble. The last fixltx2e.sty is dated Sept. 29, 2014. The recent ﬁles
contain only small bug ﬁxes.
In the required folder there are some major software distributions related to
LATEX.
amslatex Discussed in detail in this book, this directory contains the AMS math pack-
ages and document classes, while the font-related AMS ﬁles are in the
directory
/tex-archive/fonts/amsfonts/latex/
babel For typesetting languages other than American English.
cyrillic For typesetting Cyrillic characters.
graphicx For the inclusion and transformation of graphics and for typesetting in color
(see Section 8.4.3). This package requires that you have a suitable printer driver.
psnfss For typesetting with a wide range of PostScript fonts (see Section E.1).
tools A range of tools for managing document production discussed in the next sec-
tion.
Each of these packages comes with its own documentation.
They are also
described in The LATEX Companion, 2nd edition [56].
10.3.1
Tools
Some of these packages are so important that they could well have been incorporated
into LATEX proper. Here is a brief listing.
afterpage Implements the \afterpage command. The commands speciﬁed in its
argument are expanded after the current page is output.
array Contains extended versions of the array and tabular environments with many
extra features.

10.3
The LATEX distribution
295
bm Gives access to bold math symbols.
calc Allows algebraic manipulation of lengths and counter values when specifying
lengths and counters.
dcolumn Provides alignment on decimal points in tabular entries. It requires the array
package.
delarray Adds “large delimiters” around arrays. It requires the array package.
enumerate Provides customized enumerate environments (see Sections 4.2.4 and
also Sections 14.2.1, 14.3, 14.4).
fileerr Helps with missing ﬁles.
fontsmpl Produces a test ﬁle for displaying “font samples”.
ftnright Places all footnotes in the right-hand column of documents typeset with the
twocolumn document class option.
hhline Provides control over horizontal lines in tables.
indentfirst Indents the ﬁrst paragraph of each section.
layout Shows the page layout deﬁned by a document class (see Section 8.6).
longtable Helps to create multipage tables. It does not require the array package,
but it uses array’s extended features if both packages are loaded.
multicol Provides multicolumn typesetting with some advanced features.
rawfonts Preloads fonts using the old font names of LATEX 2.09.
showkeys Selectively prints the labels used by \label, \ref, \cite, and so forth, in
the margin (see Section 8.4.2).
somedefs Elective handling of package options. It is used by the rawfonts package.
tabularx Deﬁnes a variant of the tabular environment where all the columns are
the same width. It requires the array package.
theorem Allows the deﬁnition of proclamations in ﬂexible formats. The AMS variant,
the amsthm package, is discussed in Section 4.4.2.
trace Tracing help for macro writers.
varioref Provides smart as well as multilingual handling of page references.
verbatim Extends the verbatim environment and provides the comment environment
(see Sections 3.5.1 and 4.8).

296
Chapter 10
Legacy documents
xr Creates cross-references among documents.
xspace Provides a “smart space” command that helps you avoid the common mistake
of missing space after commands. It is mainly used in commands that expand to
some text (see Section 14.1.1).
All of these packages are discussed in The LATEX Companion, 2nd edition [56].

PART IV
PDF Documents

C H A P T E R
11
The PDF ﬁle format
11.1
PostScript and PDF
11.1.1
PostScript
PostScript is the preeminent platform and device independent page-description and pro-
gramming language, introduced by Adobe Systems Inc. in 1982. It describes the place-
ment and shapes of all the elements in the document, including the fonts. Documents
placed on the Web in PostScript format can be downloaded to any computer and print
identically on all PostScript printers. Until the appearance of PDF, PostScript was the
format of choice for sharing LATEX articles with diagrams or complex forms.
There are a number of disadvantages to using PostScript ﬁles on the Web:
The ﬁles tend to be very large.
They cannot be viewed until the whole ﬁle has been downloaded.
If a PostScript ﬁle does not include a particular font used in the document and you do
not have that font installed on your computer, then another font—usually Courier—
is substituted causing graphically unacceptable rendering.
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1_11
299

300
Chapter 11
The PDF ﬁle format
11.1.2
PDF
All of these concerns have been addressed by Adobe’s Portable Document Format
(PDF). See Adobe Systems’ PDF Reference, Version 1.7, 1st edition [2] for a complete
description of this ﬁle format.
PDF is based on the PostScript language, with some
important diﬀerences:
PDF is much more concise than PostScript. A PDF ﬁle is normally about 10 percent
of the size of the corresponding PostScript ﬁle.
Missing fonts are usually substituted by fonts with the same metrics, so that the size
of the substituted text is the same as that of the original. In particular, there are no
incorrect line breaks caused by the substitution.
PDF ﬁles allow partial inclusion of fonts. As a result, it is much easier to obtain
permission to include proprietary fonts in PDF documents.
PDF ﬁles can be downloaded and viewed in a Web browser one page at a time, without
having to wait for the whole ﬁle to download ﬁrst.
Most LATEX implementations produce PDF ﬁles.
PDF ﬁles and Adobe Acrobat Professional oﬀer many nice features, including:
Eﬃcient navigational tools
Searching and indexing capability for documents and even for collections of docu-
ments
Bookmarks
Thumbnails of pages
Limited editing
Annotations (notes, text, and voice) and markups
Hyperlinks to the same document or to another document or Web site (see Sec-
tion 11.1.3)
The inclusion of programs, particularly JavaScript
The creation of interactive features
The inclusion of multimedia objects such as video and sound ﬁles
PDF ﬁles can also be used to make legacy documents available on the Internet.
For instance, if you go to my home page,
http://www.maths.umanitoba.ca/homepages/gratzer/

11.2
Hyperlinks for LATEX
301
and click on Mathematical articles, then 1980-89, in the bottom frame you will
ﬁnd entry 102, which links to a PDF ﬁle. I created that PDF ﬁle by scanning the pages
of the original article, converting them to PDF ﬁles, and ﬁnally stringing them together
into a single document. The scanned pages totalled 32 MB, the PDF ﬁle is 320 KB. The
printed version of the PDF ﬁle is somewhat lower in quality than the original, but it is
still quite satisfactory. See my article [33] on some practical pointers about scanning
and PDF ﬁles.
11.1.3
Hyperlinks
With Adobe Acrobat Professional you can place hyperlinks in PDF documents. Clicking
on a hyperlink, you jump to another location in the same document, to an electronic
document, or to a Web site. For instance, in the table of contents, you can put a hyperlink
to Chapter 3, so that clicking on it takes you to Chapter 3. Adobe Acrobat’s help system
has ample information on how to set up links.
11.2
Hyperlinks for LATEX
It is tedious to set hyperlinks one at a time in your PDF ﬁle. Would it not be nice if hyper-
links corresponding to cross-references were set automatically? For instance, clicking
on Lemma 6 in
This follows from Lemma 6 and the relevant deﬁnitions.
would cause the display to jump to the page containing Lemma 6.
Sebastian Rahtz’s hyperref package (maintained now by Heiko Oberdiek) does
just that.
11.2.1
Using hyperref
You invoke the hyperref package with the command
\usepackage{hyperref}
as the last \usepackage line in the preamble of your LATEX document. If this does not
do the job, try this format, specifying the printer driver:
\usepackage[driver ]{hyperref}
The driver is one of hypertex, dvips, dvipsone, ps2pdf, tex4ht, pdftex,
dvipdf, dvipdfm, dvipdfmx, dviwindo, vtex. If none of these work, you are out of
luck.
Figure 11.1 shows a page fragment from a mathematical article with hyperlinks to
some sections, theorems, and citations automatically created by hypertex.

302
Chapter 11
The PDF ﬁle format
Figure 11.1: The hyperref package with the \autoref command.
See Section 11.2.4 for the autoref command. To see how hypertex works,
look up the secondarticle-ref.tex article in the samples folder. It is the sample
article secondarticle.tex enhanced with the hyperref package. The article uses
the hyperref options
pagebackref,colorlinks,bookmarks=true
See Section 11.2.2 for the pagebackref and colorlinks options. The third option,
bookmarks=true, is discussed in Section 11.2.3.
Copy secondarticle-ref.tex into the work folder and typeset it twice. The
PDF ﬁle created for you has some of the hyperref features, but not all. Open the pdf
ﬁle with Adobe Reader. Look at the left pane. Bookmarks is a table of contents of the
article, with links to the named sections. Pages is a thumbnail sketches of the pages,
with links to them.
11.2.2
backref and colorlinks
A useful addition to hyperref is David Carlisle’s backref package. It is invoked as
an option of hyperref:
\usepackage[backref]{hyperref}
The items in your bibliography will be followed by a list of sections in which the
bibliographic reference is cited. Each number printed after the cited reference becomes
a hyperlink to the relevant section. Alternatively, you can use the pagebackref option,
which produces a list of page numbers. Figure 11.2 shows a page fragment from a
bibliography displaying lists of section numbers. backref can be used to check if all
items in the bibliography have actually been referenced in the article. Any reference
that has not been cited does not have a page listed.
Another popular option is colorlinks, which colors the text of the links instead
of underlining them.

11.2
Hyperlinks for LATEX
303
Figure 11.2: The hyperref package with the backref option.
Tip
Make sure that in the bibliography any two items are separated by a blank line and the
last item is separated from \end{bibliography} by a blank line. Otherwise, you may
get very confusing error messages with \backref.
If your bibliography is created by BIBTEX, see Chapter 15, it has these blank. Don’t
edit them out!
11.2.3
Bookmarks
An important navigational feature of Acrobat is the ability to set and use bookmarks.
If you choose View>Navigation Tabs>Bookmarks in Adobe Reader, the navigation
pane opens up showing the bookmarks.
The hyperref package option bookmarks=true makes bookmarks from the sec-
tioning commands of the LATEX document, thereby producing a table of contents even
if the document had none. You can invoke all these options together:
\usepackage[backref,colorlinks,bookmarks=true]{hyperref}
Typesetting your LATEX document with the bookmarks=true option produces an out
ﬁle, which contains entries such as
\BOOKMARK [1][-]{section.1}{1. Introduction}{}
\BOOKMARK [1][-]{section*.2}{References}{}
Once you have produced the ﬁnal version of your document, you should edit this ﬁle to
make sure that it contains no LATEX code. Math formulas in titles create havoc. So do
accented characters. hyperref does its best to convert internal encodings for accented
characters to the encoding used by Acrobat Reader, but it is still best to avoid them.
Once this ﬁle has been edited, add the line
\let\WriteBookmarks\relax
at the start of the ﬁle to prevent it from being overwritten.

304
Chapter 11
The PDF ﬁle format
11.2.4
Additional commands
The hyperref package has dozens of commands and parameters, but we will discuss
only four more commands.
Preventing links
If you do not want a \ref or \pageref command to appear as a link, you can use their
*-ed forms, \ref* and \pageref*.
Long links
An often heard complaint is that in the link Theorem 6, only the 6 can be clicked to
activate the link, and it is too short. hyperref provides the \autoref command to
help out. Instead of
Theorem~\ref{T:new}
you can simply type
\autoref{T:new}
and hyperref will provide the word Theorem so that the link becomes Theorem 6.
The names supported by the \autoref command are listed in Table 11.1.
For my own use, I redeﬁne:
\renewcommand{\chaptername}{Chapter}
\renewcommand{\sectionname}{Section}
\renewcommand{\subsectionname}{Section}
\renewcommand{\subsubsectionname}{Section}
External links
External links can be links to websites or other ﬁles that are located on the Internet. Use
the
\href{address }{text }
command to typeset text and make it into a link to the Web address (URL).
For instance, in your references, you may have
Robert Miner and Jeff Schaefer,
\emph{Gentle intoduction to MathML.}
\href{http://www.webeq.com/mathml/gitmml/}
{http://www.webeq.com/mathml/gitmml/}
Then the last line of the address becomes a link and clicking on it takes you to the
Web site. As an even fancier example, note the top matter command \urladdr (see
Section 9.2.2) in secondarticle-ref.tex:

11.2
Hyperlinks for LATEX
305
Command
Meaning
\figurename
Figure
\tablename
Table
\partname
Part
\appendixname
Appendix
\equationname
Equation
\Itemname
item
\chaptername
chapter
\sectionname
section
\subsectionname
subsection
\subsubsectionname
subsubsection
\paragraphname
paragraph
\Hfootnotename
footnote
\AMSname
Equation
\theoremname
Theorem
Table 11.1: Redeﬁnable names supported by \autoref.
\urladdr{\href{http://math.uwinnebago.edu/menuhin/}
http://math.uwinnebago.edu/homepages/menuhin/}
Then, as part of Menuhin’s address, you will ﬁnd
http://math.uwinnebago.edu/menuhin/
Now clicking on the Web address will link to his Web page.
hyperref, of course, oﬀers a lot more than I have presented here. For more detail,
see the user manual and The LATEX Web Companion [18].

C H A P T E R
12
Presentations
In Section 1.11, we describe how a presentation is a PDF ﬁle that you open with Adobe
Reader. You can put it in full screen mode1 (View>Full screen), and then project
the presentation one page at a time by pressing the space bar or the arrow keys.
Remember overhead transparencies? If we want to see half of what is on the trans-
parency, we cover up the bottom part so that only the top part is projected. This way
we have control over what the audience sees and when. We sometimes used overlays:
placing another transparency on top of the projected one to modify it by adding text or
graphics.
In this chapter, we discuss Till Tantau’s beamer package in more detail to help you
prepare presentations with overlays and with stunning visual eﬀects. beamer relies on
other packages such as the hyperref package (see Section 11.2) to establish links, Till
Tantau’s Portable Graphics Format package for creating graphics, Uwe Kern’s xcolor
package for coloring, the AMS packages for formatting math formulas and deﬁning
declarations, and some others.
The documentation for these packages runs to about a thousand pages. The good
news is that you can use beamer “out of the box”. You only have to learn about 20
1If you have Adobe Acrobat Pro, open File>Document Properties and check mark Full Screen
Mode. Then the PDF document automatically opens in full screen mode.
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1_12
307

308
Chapter 12
Presentations
commands—this is more than the four new command we had to learn in Section 1.11
but still an easily manageable task.
So we set ourselves in this chapter a modest goal, using beamer “out of the box”.
It is amazing how much you can achieve with a small investment of your time.
Chances are beamer is already installed for you. If not, consult Section D.1 on
how to get it.
12.1
Quick and dirty beamer
We convert the article firstarticle.tex (in the samples folder) to a beamer pre-
sentation. We will remove some commands that are appropriate for an article but not
for a presentation and add some commands that are speciﬁc to presentations. This will
not produce a very good presentation. Nevertheless, the conversion is a really quick
introduction to some basic beamer concepts.
12.1.1
First changes
Open firstarticle.tex, save it as quickbeamer.tex in the work folder. The con-
verted tex version and the presentation quickbeamer.pdf are both in the samples
folder.
Make the following changes in the preamble and top matter:
1. Change the ﬁrst line to
% Introductory beamer presentation: quickbeamer.tex
2. Change the documentclass to beamer.
3. Delete the six \usepackage and \newtheorem lines—beamer loads the necessary
packages and deﬁnes these declarations.
4. Change the \address to \institute—this is the beamer command for address.
5. Delete the abstract environment—this is not needed for the presentation.
Here is the new version of the preamble and top matter.
%Introductory beamer presentation: quickbeamer.tex
\documentclass{beamer}
\begin{document}
\title{A construction of complete-simple\\
distributive lattices}
\author{George~A. Menuhin}
\institute{Computer Science Department\\
University of Winnebago\\
Winnebago, MN 53714}

12.1
Quick and dirty beamer
309
\date{March 15, 2015}
\maketitle
12.1.2
Changes in the body
1. Delete the notation and proof environments, but not the contents, that is, delete
the four lines
\begin{notation}
\end{notation}
\begin{proof}
\end{proof}
Both environments could theoretically stay, but the notation environment is not
needed since in the next step we put Notation in the frame title. The proof envi-
ronment (see Section 3.3.2) is not suitable for presentations because an environment
can only be used within a frame, and proofs are typically longer.
2. Cut the presentation into frames (pages, transparencies, foils) with the frame en-
vironments. After each \begin{frame} we put a \frametitle command. The
argument of the command is the “title” for the frame, displayed prominently at the
top of the display.
It would be tedious to give you precise instructions on how to do this, instead
refer to the quickbeamer.tex document (in the samples folder) for all the frame
environments and \frametitle commands we added.
3. Cut out the figure environment, except for the line
\centering\includegraphics{products}
which should be moved to follow the
\frametitle{Illustrating the construction}
line and accordingly delete (see Figure~\ref{Fi:products}).
Now copy over the illustration products from the samples folder to the work
folder and typeset. That’s it, enjoy your ﬁrst presentation.
12.1.3
Making things prettier
Now you make some small changes to quickbeamer.tex to utilize beamer’s power
for wonderful eﬀects. Changes 1 and 3 are quite dramatic.
Save quickbeamer.tex with the name quickbeamer1.tex in the work folder.
The edited version,quickbeamer1.tex, is in the samples folder along with the pre-
sentation quickbeamer1.pdf.

310
Chapter 12
Presentations
1. Add \usetheme{Berkeley} after the documentclass line.
2. Change \maketitle to
\begin{frame}
\titlepage
\end{frame}
Make sure that the last (sub)section is followed by a frame, otherwise it will be
missing from the table of contents.
3. Add this frame after the titlepage frame:
\begin{frame}
\frametitle{Outline}
\tableofcontents[pausesections]
\end{frame}
This creates a table of contents frame, with the section titles appearing one at a time.
4. Replace all instances of {equation} by {equation*}. In a presentation a reference
to another frame is not recommended so equations should not be numbered. You
might as well delete all the \label commands since these are not needed either.
5. In the second to last frame there are two references to equation numbers. Replace
the text the congruence \eqref{E:cong2} with the congruence, and also
replace \eqref{E:comp} with the penultimate equation, or similar.
6. Change the bibliographic reference to
See also Ernest T. Moynahan, 1957.
Turning quickbeamer1.tex into a PDF ﬁle will get you a much prettier pre-
sentation. The ﬁrst four pages of the new presentation are displayed in Figures 12.1
and 12.2—unfortunately, without the pretty colors.
12.1.4
Adjusting the navigation
Looking at Figures 12.1 and 12.2, we see that the Berkeley theme turns the sidebar
into a navigation device and the section titles produce the table of contents (the Outline
frame). Remember to typeset a few times! But a number of problems come to light.
1. The title of the presentation is too long for the sidebar, so is the title of the second
section.
2. There is no need to repeat the author’s name in the sidebar.
3. It was natural for the article firstarticle.tex to have only two sections. But
sections play a diﬀerent role in a beamer presentation, they are navigation tools.

12.1
Quick and dirty beamer
311
A construction
of complete-
simple
distributive
lattices
George A.
Menuhin
Introduction
The Π∗
construction
A construction of complete-simple
distributive lattices
George A. Menuhin
Computer Science Department
University of Winnebago
Winnebago, MN 53714
March 15, 2015
A construction
of complete-
simple
distributive
lattices
George A.
Menuhin
Introduction
The Π∗
construction
Outline
1 Introduction
Figure 12.1: quickbeamer1 presentation, pages 1 and 2.

312
Chapter 12
Presentations
A construction
of complete-
simple
distributive
lattices
George A.
Menuhin
Introduction
The Π∗
construction
Outline
1 Introduction
2 The Π∗construction
A construction
of complete-
simple
distributive
lattices
George A.
Menuhin
Introduction
The Π∗
construction
Introduction
In this note, we prove the following result:
Theorem
There exists an inﬁnite complete distributive lattice K with
only the two trivial complete congruence relations.
Figure 12.2: quickbeamer1 presentation, pages 3 and 4.

12.2
Baby beamers
313
The sidebar lists all the sections. It also highlights the section we are in. Moreover,
by clicking on the name of a section, the presentation jumps there.
To correct these deﬁciencies, save the ﬁle quickbeamer1.tex as quickbeamer2.tex
in the work folder. The edited version is in the samples folder along with the PDF ﬁle.
1. Change the \title command to
\title[Complete-simple distributive lattices]%
{A construction of complete-simple\\
distributive lattices}
and the second \section command to
\section[Construction]{The $\Pi^{*}$ construction}
The bracketed parts are the short versions used in the sidebar.
2. Change the \author command to
\author[]{George~A. Menuhin}
The short version of the author command is blank, so the author’s name will not
be displayed in the sidebar.
3. Add the command
\section[Second result]{The second result}
before the frame of the same title and
\section{Proof}
before the proof. We even add
\section{References}
before the frame of the same name.
Figure 12.3 shows page 7 of the quickbeamer2 presentation—this corresponds to
page 4 of the quickbeamer1 presentation; the Outline accounts for the diﬀerence.
Note how all the deﬁciencies listed above have been corrected. Compare page 7 of
this presentation with the Berkeley theme in Figure 12.3 and with the Warsaw theme
in Figure 12.4. Themes are discussed in Section 12.5.
12.2
Baby beamers
In the previous discussions you may have noticed two interesting features. First, the
Outline frame (table of contents) created two pages in the quickbeamer1 presentation
and ﬁve pages in the quickbeamer2 presentation. We discuss this in some detail now
with the babybeamer presentations. You can ﬁnd all the babybeamer presentations as
tex and PDF ﬁles in the samples folder. Second, the sidebar shows some links. More
about this in Section 12.2.7.

314
Chapter 12
Presentations
Complete-
simple
distributive
lattices
Introduction
Construction
Second result
Proof
References
Introduction
In this note, we prove the following result:
Theorem
There exists an inﬁnite complete distributive lattice K with
only the two trivial complete congruence relations.
Figure 12.3: quickbeamer2 presentation, page 7 with Berkeley theme.
Introduction
Construction
Second result
Proof
References
Introduction
In this note, we prove the following result:
Theorem
There exists an inﬁnite complete distributive lattice K with only
the two trivial complete congruence relations.
Complete-simple distributive lattices
Figure 12.4: quickbeamer2 presentation, page 7 with Warsaw theme.

12.2
Baby beamers
315
12.2.1
Overlays
The outline frame of the quickbeamer2 presentation created ﬁve pages in the PDF ﬁle.
Observe how each page, from the second on, completely overlaps the previous one,
making it appear that the previous one stayed put and an additional line is displayed
“on top of it”. In beamer terminology these pages are overlays or slides. The ﬁve
overlays will be referenced as overlay 1, ..., overlay 5. A single frame may create one
or many overlays. The subsequent sections discuss many more variants.
beamer has many commands creating overlays. We start with some examples of
\pause, then \only, and \onslide.
We introduce overlays with some presentations. The ﬁrst, babybeamer1, intro-
duces the \pause command to create overlays.
%babybeamer1 presentation
\documentclass{beamer}
\begin{document}
\begin{frame}
\frametitle{Some background}
We start our discussion with some concepts.
\pause
The first concept we introduce originates with Erd\H os.
\end{frame}
\end{document}
produces the presentation of Figure 12.5.
Rule
The \pause command
1. A frame may have many \pause commands.
2. The \pause command cannot be given in an AMS multiline math environment.
You move past a \pause command the same way as you get to the next frame, by press-
ing the space bar or the forward arrow key.
Using the \pause commands you can create many overlays, each containing a little
more material on the overlays. If this is all you need, skip to Section 12.2.7, you do not
need the more detailed discussion of overlays in the next few pages.
We could have coded the same presentation with the \only command:
%babybeamer2 presentation
\documentclass{beamer}

316
Chapter 12
Presentations
Some background
We start our discussion with some concepts.
Some background
We start our discussion with some concepts.
The ﬁrst concept we introduce originates with Erd˝os.
Figure 12.5: babybeamer1 presentation.
\begin{document}
\begin{frame}
\frametitle{Some background}
\only<1,2>{We start our discussion with some concepts.}
\only<2>{The first concept we introduce originates
with Erd\H os.}
\end{frame}
\end{document}
This presentation is slightly diﬀerent from babybeamer1. Overlay 1 ignores the
second \only command and displays the line as appropriate to display one line. Over-
lay 2 displays the two lines as appropriate to display two lines. As a result, the ﬁrst
line moves slightly up when passing from overlay 1 to overlay 2. The argument of the
\only command is typeset only on the overlays speciﬁed. On the other overlays, it is
ignored.

12.2
Baby beamers
317
If instead of the \only command you use the \onslide command (on slide, get
it?), as in
\onslide<1,2>{We start our discussion with some concepts.}
\onslide<2>{The first concept we introduce originates
with Erd\H os.}
then the ﬁrst line of overlay 2 completely overlaps the ﬁrst line of overlay 1, so the
ﬁrst line seems to stay put. The argument of the \onslide command is typeset on
the overlays speciﬁed and on the other overlays it is typeset but invisible. This is the
behavior you would want most often, but you may ﬁnd that sometimes you prefer \only.
12.2.2
Understanding overlays
We introduced overlays in Section 12.2.1—probably the most important new concept
for presentations. LATEX typesets the content of a frame and the typeset material
appears on all overlays for the parts of the source (maybe all) not modiﬁed by any
command with an overlay speciﬁcation;
appears only on the overlays speciﬁed and is ignored on the other overlays for the
arguments of the \only commands;
appears on the overlays speciﬁed and is typeset but made invisible on the other over-
lays for the arguments of the \onslide commands.
More on overlay speciﬁcations at the end of this section. Here are some illustra-
tions.
Example 1
This is a very \only<1>{very, very} important concept.
\only<1,2>{To start the definition \dots}
will typeset overlay 1 as
This is a very very, very important concept. To start the deﬁnition . . .
and will typeset overlay 2 as
This is a very important concept. To start the deﬁnition . . .

318
Chapter 12
Presentations
Example 2
What is $2+2$? It is \onslide<2>{$4$}.
\only<1>{Can you figure it out?}
\onslide<2>{I hope you all got it right.}
will typeset overlay 1 as
What is 2 + 2? It is . Can you ﬁgure it out?
and will typeset overlay 2 as
What is 2 + 2? It is 4.
I hope you all got it right.
Note that there is room in overlay 1 for the number 4.
Example 3
What is $2+2$?
\onslide<2>{It is {$4$}.}
Can you figure it out?
will typeset overlay 1 as
What is 2 + 2?
Can you ﬁgure it out?
and will typeset overlay 2 as
What is 2 + 2?
It is 4.
Can you ﬁgure it out?
Note that there is room in overlay 1 for the “missing” second line.

12.2
Baby beamers
319
Overlay speciﬁcations
The angle brackets contain the overlay speciﬁcation. Here are some more examples:
<1-2,4->
means all overlays from 1 to 2, and all overlays from 4 onwards.
<-3>
means all overlays up to 3.
<2,4,6>
means overlays 2, 4, and 6.
We have two overlay speciﬁcations in the presentation babybeamer2: <1,2> and
<2>. Maybe, <1-> and <2-> would be better, so that if you add a third overlay you do
not have to change these.
The command \pause can only take the simplest overlay speciﬁcation, a number.
\pause<3> takes eﬀect from overlay 3 on.
Note that overlay speciﬁcations are attached to commands but the overlays created
are overlays of the frame in which the commands appear.
12.2.3
More on the \only and \onslide commands
The \only and \onslide commands can accomplish everything the \pause command
can and a lot more.
The basic syntax
The syntax of \only is
\only<overlay spec >{source }
where overlay spec is the overlay speciﬁcation and source is the code typeset
by LATEX.
A (partial) syntax of \onslide is
\onslide<overlay spec >{source }
With the same syntax you can give overlay speciﬁcations to many commands, in-
cluding \textbf, \textit, \alert—beamer’s alternative to the \emph command—
and then the command is in eﬀect only on the overlays speciﬁed.
%babybeamer3 presentation
\documentclass{beamer}
\begin{document}
\begin{frame}
\frametitle{Some background}
\textbf<1>{We start our discussion with some concepts.}
\textbf<2>{The first concept we introduce originates
with Erd\H os.}

320
Chapter 12
Presentations
\end{frame}
\end{document}
So the babybeamer3 presentation (see Figure 12.6) has two overlays, each with
two lines of text. On overlay 1 the ﬁrst line is bold, on overlay 2 the second line is bold.
Some background
We start our discussion with some concepts.
The ﬁrst concept we introduce originates with Erd˝os.
Some background
We start our discussion with some concepts.
The ﬁrst concept we introduce originates with Erd˝os.
Figure 12.6: babybeamer3 presentation.
A diﬀerent syntax
The command \only has an alternate syntax:
\only{source }<overlay spec >
So
\only<1>{Can you figure it out?}
and
\only{Can you figure it out?}<1>
accomplish the same.

12.2
Baby beamers
321
With this syntax, you can deﬁne your own commands that allow overlay speciﬁca-
tions. For instance, using the command \color{blue} deﬁned in Section 12.2.9, you
can deﬁne the command
\newcommand{\myblue}{\only{\color{blue}}}
Then
\myblue<2>{Some more text}
will color the text blue on overlay 2 only.
12.2.4
Lists as overlays
Lists may be presented one item at a time, for example the babybeamer4 presentation in
Figure 12.7 (in the samples folder) shows the four overlays of a list. R. Padmanabhan
appears on the ﬁrst, R. Padmanabhan and Brian Davey appear on the second, and so on.
This is accomplished simply by adding the overlay speciﬁcation <1-> to the item for R.
Padmanabhan, the overlay speciﬁcation <2-> to the item for Brian Davey, and so on.
%babybeamer4 presentation
\documentclass{beamer}
\begin{document}
\begin{frame}
\frametitle{Overlaying lists}
We introduce our guests:
\begin{itemize}
\item<1-> R. Padmanabhan
\item<2-> Brian Davey
\item<3-> Harry Lakser
\item<4-> Dick Koch
\end{itemize}
\end{frame}
\end{document}
Such an overlay structure is used so often that beamer has a shorthand for it,
[<+->]. Here it is in babybeamer5.
%babybeamer5 presentation
\documentclass{beamer}
\begin{document}

322
Chapter 12
Presentations
Overlaying lists
We introduce our guests:
R. Padmanabhan
Overlaying lists
We introduce our guests:
R. Padmanabhan
Brian Davey
Overlaying lists
We introduce our guests:
R. Padmanabhan
Brian Davey
Harry Lakser
Overlaying lists
We introduce our guests:
R. Padmanabhan
Brian Davey
Harry Lakser
Dick Koch
Figure 12.7: babybeamer4 presentation.

12.2
Baby beamers
323
\begin{frame}
\frametitle{Overlaying lists}
We introduce our guests:
\begin{itemize}[<+->]
\item R. Padmanabhan
\item Brian Davey
\item Harry Lakser
\item Dick Koch
\end{itemize}
\end{frame}
\end{document}
This shorthand allows adding and reordering items without having to change over-
lay speciﬁcations. Of course, if you do not want the items to appear in sequence, you
have to use overlay speciﬁcations.
12.2.5
Out of sequence overlays
We now present an example of “out of sequence overlays”. Look at Figure 12.8. I want
to make this part of my presentation. First, I want to show the theorem, then illustrate
it with the diagram at the bottom. Finally, I present the proof in the middle. So I need
three overlays.
Theorem
Every ﬁnite distributive lattice can be embedded in a boolean
lattice.
Proof.
Use join-irreducible elements.
Figure 12.8: The slide to represent.

324
Chapter 12
Presentations
The theorem is on all three overlays, 1, 2, 3. Its illustration is on overlays 2 and 3,
leaving room for the proof that appears only on overlay 3, This is an example of “out of
sequence overlays”. We code this in babybeamer6 (in the samples folder).
Since declarations, proofs, and the \includegraphics command may all have
overlay speciﬁcations, this seems easy to accomplish.
%babybeamer6 presentation, first try
\documentclass{beamer}
\begin{document}
\begin{frame}
\frametitle{Overlaying declarations and graphics}
\begin{theorem}<1->
Every finite distributive lattice can be embedded
in a boolean lattice.
\end{theorem}
\begin{proof}<3->
Use join-irreducible elements.
\end{proof}
\includegraphics<2,->{cube}
\end{frame}
\end{document}
This does not work too well. On overlay 1 the theorem appears in the middle
and then it jumps up to make room for the illustration. This is the same problem we
encountered in the babybeamer2 presentation in Section 12.2.1 and the solution is also
the same, the use of the \onslide command. Replace the line
\includegraphics<2,->{cube}
with
\onslide<2->{\includegraphics{cube}}
12.2.6
Blocks and overlays
You can think of a theorem in beamer as the contents of the theorem environment
with a heading and, optionally, with an overlay speciﬁcation, and with most themes—
see Section 12.5—colorful visual highlighting, see Figures 12.3 and 12.4.
beamer provides the block environment that works the same way except that you
name the block. The (partial) syntax of the block environment is
\begin{block}<overlay spec >{title }
source
\end{block}

12.2
Baby beamers
325
Blocks are shaped as theorems. If there is no title, you still need the braces. The overlay
speciﬁcation is optional.
As an example, save babybeamer6.tex as babybeamer6block.tex in the work
folder (also in the samples folder along with the PDF ﬁle) and replace the theorem
environment with
\begin{block}<1->{Theorem}
Every finite distributive lattice can be embedded
in a boolean lattice.
\end{block}
If you want a block of LATEX code with an overlay speciﬁcation but with no title
and no visual highlighting, use one of the commands, \onslide and \only.
12.2.7
Links
A presentation is a PDF ﬁle, so it is not surprising that you can set links of various types
in a beamer presentation. Just as the hyperref package helps us with hyperlinks in a
PDF ﬁle (see Section 11.2), the beamer package allows us to conveniently set links in a
presentation.
Some links are automatically provided. If you look closer at Figures 12.1 and 12.2,
you see that the section titles are shown in the sidebar. In fact, the sidebar is a navigation
bar. First, it shows which section you are in. Second, clicking on a section title takes
you to that section.
Creating a link is a two-step process.
1. Name the place you want to link to.
2. Create a button with the property that clicking on it jumps you to the designated
place.
To illustrate this process, we modify the presentation babybeamer4. Open the
ﬁle babybeamer4.tex and save it as babybeamer7.tex in the work folder (the edited
version is in the samples folder along with the PDF ﬁle).
1. Name the frame you want to link to by adding a label to the \begin{frame} line.
In babybeamer7, add a label to the frame fourguests:
\begin{frame}[label=fourguests]
Labels of frames are also useful for selective typesetting of your presentation, see
Section 12.6.
2. Add the following line to babybeamer7:
\hyperlink{fourguests<3>}%
{\beamergotobutton{Jump to third guest}}

326
Chapter 12
Presentations
This creates a link to the third overlay of the frame named fourguests, and creates
a button, with the text Jump to third guest. Clicking on this button will jump
to the third overlay of the frame fourguests.
3. To add variety to linking, include a new ﬁrst frame:
\begin{frame}
\frametitle{First frame with a button}
Button example
Jumping to an overlay of a different frame
\bigskip
\hyperlink{fourguests<3>}%
{\beamergotobutton{Jump to third guest}}
\end{frame}
which has a button for jumping to the third overlay of the fourguests frame.
4. We also add a new third frame.
\begin{frame}
\frametitle{Third frame with a button}
Button example
Jumping to another frame
\bigskip
\hyperlink{fourguests}%
{\beamergotobutton{Jump to guest list}}
\end{frame}
with a button, with the text Jump to guest list. Clicking on this button will
jump to the second frame, overlay not speciﬁed (defaults to 1).
5. Add a fourth frame,
\begin{frame}
\frametitle{Hidden link}
\hyperlink{fourguests}{Jumping to the guest list}
\end{frame}
introducing another version of the \hyperlink command:
\hyperlink{fourguests}{Jumping to the guest list}
which typesets the second argument as regular text, making it an invisible link. How-
ever, you may notice that the cursor changes when it hovers over the link. For in-

12.2
Baby beamers
327
stance, you may want to link the use of a concept to its earlier deﬁnition, where you
also need a button for the return jump.
Here is babybeamer7:
%babybeamer7 presentation
\documentclass{beamer}
\begin{document}
\begin{frame}
\frametitle{First frame with a button}
Button example
Jumping to an overlay of a different frame
\bigskip
\hyperlink{fourguests<3>}%
{\beamergotobutton{Jump to third guest}}
\end{frame}
\begin{frame}[label=fourguests]
\frametitle{Overlaying lists}
We introduce our guests:
\begin{itemize}
\item<1-> R. Padmanabhan
\item<2-> Brian Davey
\item<3-> Harry Lakser
\item<4-> Dick Koch
\end{itemize}
\hyperlink{fourguests<3>}%
{\beamergotobutton{Jump to third guest}}
\end{frame}
\begin{frame}
\frametitle{Third frame with a button}
Button example
Jumping to another frame
\bigskip

328
Chapter 12
Presentations
First frame with a button
Button example
Jumping to an overlay of a diﬀerent frame
Jump to third guest
Overlaying lists
We introduce our guests:
R. Padmanabhan
Jump to third guest
Overlaying lists
We introduce our guests:
R. Padmanabhan
Brian Davey
Jump to third guest
Third frame with a button
Button example
Jumping to another frame
Jump to guest list
Figure 12.9: babybeamer7 presentation.

12.2
Baby beamers
329
\hyperlink{fourguests}%
{\beamergotobutton{Jump to guest list}}
\end{frame}
\begin{frame}
\frametitle{Hidden link}
\hyperlink{fourguests}{Jumping to the guest list}
\end{frame}
\end{document}
Figure 12.9 shows all these buttons. We do not show overlays 3 and 4 of frame 2
and frame 4, where the button is invisible.
12.2.8
Columns
Often, it is useful to put the display into columns. A simple illustration is given in
babybeamer8:
%babybeamer8 presentation
\documentclass{beamer}
\begin{document}
\begin{frame}
\frametitle{Columns, top alignment}
\begin{columns}[t]
\begin{column}{2in}
Is it true that there is no new result
on the Congruence Lattice Characterization Problem?
\end{column}
\begin{column}{2in}
F. Wehrung found a distributive algebraic lattice that
cannot be represented as the congruence lattice
of a lattice.
\end{column}
\end{columns}
\end{frame}
\end{document}
The environment is columns. It has an optional argument for alignment, t for top,
c for center, and b for bottom. The columns, usually two, are both in the column envi-
ronment; the width of the column is in the argument; it can be given as a measurement—
2in in the example—or relative to the width of the whole frame as 0.4\textwidth.

330
Chapter 12
Presentations
Figure 12.10 shows the babybeamer8 presentation.
Columns, top alignment
Is it true that there is no new
result on the Congruence
Lattice Characterization
Problem?
F. Wehrung found a
distributive algebraic lattice
that cannot be represented as
the congruence lattice of a
lattice.
Figure 12.10: babybeamer8 presentation.
12.2.9
Coloring
LATEX’s job is to produce articles and books that contain text, math formulas, and graph-
ics. Such publications—with the exception of textbooks—cannot aﬀord color printing.
Presentations are diﬀerent. If you prepare a color presentation, it will project in color.
Nevertheless, the color commands are of limited use even for presentations. You
probably use the color scheme of the chosen theme (see Section 12.5), and have limited
opportunity to color things yourself. If you do, be very careful, too much color dis-
tracts from the presentation but judicious use of color—say, for highlighting a word or
phrase—may be very eﬀective.
beamer uses the sophisticated xcolor package of Uwe Kern. It colors by specify-
ing the color model: rgb (red, green, blue), or cmyk (cyan, magenta, yellow, black), or
gray (black and white)—there are many more models to choose from—and how much
of each color you want to mix.
So \color[rgb]{0,1,0} paints everything—within its scope—green. You can
color some text green with the command
\textcolor[rgb]{0,1,0}{This text is green.}
There are seventeen predeﬁned colors: red, green, blue, cyan, magenta, yellow, orange,
violet, purple, brown, pink, olive, black, darkgray, gray, lightgray, and white. With
the proper options, there are hundreds more. So the previous command could also be
given as
\textcolor{green}{This text is green.}
or as
{\color{green}This text is green.}

12.2
Baby beamers
331
To pretty things up, you can use \colorbox{green}{Green box}, which puts
the argument in a green box and \fcolorbox{red}{green}{Green box}, which also
adds a red frame.
xcolor is automatically loaded by beamer. To make sure that xcolor is loaded
with the options desired, you have to include these options in the preamble in the
\documentclass{beamer}
line. For instance, to have the dvipsnam option for xcolor, invoke beamer with
\documentclass[xcolor=dvipsnam]{beamer}
You can also mix predeﬁned colors:
{\color{green!40!yellow} This text is of what color?}
which sets the text 40% green and 60% yellow.
There are commands for deﬁning colors and color sets, as well as for coloring the
background, frames, and hyperlinks (see Uwe Kern, Extending LATEX’s color facilities:
the xcolor package [46]).
Here is a simple illustration:
%babybeamer9 presentation
\documentclass{beamer}
\begin{document}
\setbeamercolor{normal text}{bg=yellow!15}
\begin{frame}
\frametitle{Colors}
\begin{columns}[t]
\begin{column}{2in}
{\color{red}Is it true that there is no new result
on the Congruence Lattice Characterization Problem?}
\end{column}
\begin{column}{2in}
{\color{green}F. Wehrung found a distributive
algebraic lattice that cannot be represented
as the congruence lattice of a lattice.}
\end{column}
\end{columns}
\end{frame}
\setbeamercolor{normal text}{bg=green!15}

332
Chapter 12
Presentations
\begin{frame}
\frametitle{Colors fading out}
We introduce our guests:
\begin{itemize}
\item {\color{red}R. Padmanabhan}
\item {\color{red!60!white}Brian Davey}
\item {\color{red!40!white}Harry Lakser}
\item {\color{red!20!white}Dick Koch}
\end{itemize}
\end{frame}
\end{document}
The command
\setbeamercolor{normal text}{bg=yellow!15}
sets the background color to light (15%) yellow. In the ﬁrst column, the text is red, in
the second, green. Set the foreground with fg=.
The background of the second frame is light green. The four participants are in
lighter and lighter shades of red.
Figure 12.11 shows the frames of the babybeamer9 presentation—unfortunately,
not in color (unless you have the PDF of the book).
12.3
The structure of a presentation
The structure of your presentation is, by and large, determined by the sectioning com-
mands: \section and \subsection. For a very long lecture there may also be \part
commands. The argument of any of these commands may have a short version for the
navigational side bar (see Section 12.1.4).
The sectioning commands used in a beamer presentation look the same as they
do for articles and books, but they play a diﬀerent role. They do not display a section
title, but they add an entry to the table of contents. They also act as place markers in the
sense that if you click on the title of a section in a navigation bar, then you will jump to
the frame following the section command.
Rule
Sectioning commands
1. Sectioning commands can only be placed between frames.
2. There must be a frame following the last sectioning command.
3. For a long (sub)section title, use \breakhere to break a line.
4. The optional short versions are for the navigation bar.

12.3
The structure of a presentation
333
Colors
Is it true that there is no new
result on the Congruence
Lattice Characterization
Problem?
F. Wehrung found a
distributive algebraic lattice
that cannot be represented as
the congruence lattice of a
lattice.
Colors fading out
We introduce our guests:
R. Padmanabhan
Brian Davey
Harry Lakser
Dick Koch
Figure 12.11: babybeamer9 presentation.
These are illustrated with beamerstructure1, see Figure 12.12. The line
\tableofcontents[pausesections, pausesubsections]
causes the table of contents to appear a line at a time. This command may also be used
without an option or only with one, pausesections.
The second page shown in Figure 12.12 is the table of contents. The page is about
half ﬁlled with only ﬁve listed items, so no more than 10 sections and subsections would
ﬁt. There should be fewer.
%beamerstructure1 presentation
\documentclass{beamer}
\usetheme{Berkeley}
\begin{document}
\begin{frame}
\frametitle{Outline}

334
Chapter 12
Presentations
Sec1
Sec1 Subsec1
Sec1 Subsec2
Sec1 Subsec3
Sec2
Outline
1 Section 1
Section 1 – Subsection 1
Section 1 – Subsection 2
Sec1
Sec1 Subsec1
Sec1 Subsec2
Sec1 Subsec3
Sec2
Outline
1 Section 1
Section 1 – Subsection 1
Section 1 – Subsection 2
Section 1 – Subsection 3
2 Section 2
Figure 12.12: beamerstructure1 presentation, pages 3 and 5.

12.3
The structure of a presentation
335
\tableofcontents[pausesections, pausesubsections]
\end{frame}
\section[Sec1]{Section 1}
\begin{frame}
\frametitle{Section 1}
Text of Section 1
\end{frame}
\subsection[Sec1 Subsec1]{Section 1 -- Subsection 1}
\begin{frame}
\frametitle{Section 1\\Subsection 1}
Text of Section 1, Subsection 1
\end{frame}
\subsection[Sec1 Subsec2]{Section 1 -- Subsection 2}
\begin{frame}
\frametitle{Section 1\\Subsection 2}
Text of Section 1, Subsection 2
\end{frame}
\subsection[Sec1 Subsec3]{Section 1 -- Subsection 3}
\begin{frame}
\frametitle{Section 1\\Subsection 3}
Text of Section 1, Subsection 3
\end{frame}
\section[Sec2]{Section 2}
\begin{frame}
\frametitle{Section 2}
Text of Section 2
\end{frame}

336
Chapter 12
Presentations
\end{document}
12.3.1
Longer presentations
Longer presentations may need parts and a more complicated table of contents. I will
not discuss these topics, but the presentation beamerstructure2 (in the samples
folder) illustrates the use of parts and some other features. I added some comments
to point these out. See Figure 12.13 for two sample pages of this presentation.
12.3.2
Navigation symbols
The more structure you have in a presentation, the more you may appreciate the navi-
gation icons shown by default on each page in the last line on the right. The icons are:
the slide
the frame
the section
the presentation icons
each surrounded by a left and a right arrow
the appendix
the back and forward icons (circular arrows)
the search icon (a magnifying glass)
If you decide not to have them, as in the presentation beamerstructure2, then give
the following command in the preamble:
\setbeamertemplate{navigation symbols}{}
12.4
Notes
You can place notes in your presentation to remind yourself of what you want to say in
addition to what is being projected. A note is placed in the presentation as the argument
of the \note command, as in
\note{This is really difficult to compute.}
By default, notes are not shown in the presentation. If you invoke beamer with
\documentclass[notes=show]{beamer}
then the notes pages are included. The command
\documentclass[notes=show, trans]{beamer}

12.4
Notes
337
Outline
Sectionally complemented chopped lattices
George Gr¨atzer1
Harry Lakser1
Michael Roddy2
1University of Manitoba
2Brandon University
Conference on Lattice Theory, 2006
George Gr¨atzer, Harry Lakser, Michael Roddy
Sectionally complemented chopped lattices
Chopped lattices
Ideals and congruences
Part I
Outline
1
Chopped lattices
2
Ideals and congruences
George Gr¨atzer, Harry Lakser, Michael Roddy
Sectionally complemented chopped lattices
Figure 12.13: beamerstructure2 presentation, pages 1 and 10.

338
Chapter 12
Presentations
produces transparencies with notes, and
\documentclass[notes=only]{beamer}
produces only the note pages, one note page for every overlay of a frame with a note.
To avoid this, print the output of
\documentclass[trans, notes=only]{beamer}
In addition to these examples, all the notes placed in a single frame are collected
together on one note page. And a note between frames becomes a page on its own.
beamer does an excellent job of producing notes pages, for example, see Fig-
ure 12.14. In the upper-left corner, it displays precisely where we are in the structure
of the presentation. The upper-right corner shows a small picture of the page to which
the notes are attached.
The 1960 Theorem
Theorem (Gr¨atzer-Schmidt 1960)
Let M be the chopped lattice
constructed from a ﬁnite order P by merging.
Then the ideal lattice of M is a sectionally complemented lattice.
2006-04-23
Sectionally complemented chopped lattices
Background
The 1960 sectional complement
The 1960 Theorem
And the congruence lattice of L is isomorphic to a ﬁnite distributive
lattice D whose join-irreducible elements form an order isomorphic to P.
What we are discussing here is commonly called the Dilworth Theorem,
see the book Congruences of a ﬁnite lattice, Birkh¨auser Boston, 2005.
Figure 12.14: A note page.
12.5
Themes
If you look carefully at Figures 12.1, 12.2, and 12.13 (even better, if you look at the
PDF ﬁles of these presentations), you see how every little detail of the presentation is
provided by beamer. Figures 12.1 and 12.2 show a presentation style dominated by
a dark blue headline and left sidebar, a complete navigation bar in the left sidebar, the
name of the author(s) and the title repeated in every overlay, section numbers in colored
squares, and so on.
The presentation in Figure 12.13 has no sidebars, section numbers are in colored
circles, the navigation elements are in the headline. The display of lists and theorems
(and other similar elements of a presentation) also vary a great deal.
You can achieve such detailed control over your presentation by deﬁning all these
elements yourself. beamer places dozens of commands at your disposal to make this
possible. Or you can use a presentation theme that will do the job for you.

12.5
Themes
339
The command to name a presentation theme is \usetheme{}. The presentation
beamerstructure2 uses the theme Warsaw (see Figure 12.13), so following the doc-
ument class line type the command
\usetheme{Warsaw}
quickbeamer1 uses the theme Berkeley (see Figures 12.1 and 12.2) and so does
beamerstructure1 (see Figure 12.12).
The presentation themes are in the theme subfolder of the themes folder of beamer.
As of this writing, there are 26 of them, named after cities:
Presentation Themes
Without Navigation Bars default, Bergen, Boadilla, Madrid, AnnArbor,
CambridgeUS, Pittsburgh, Rochester
With a Navigation Bar Antibes, JuanLesPins, Montpellier
With a table of contents Sidebar Berkeley, PaloAlto, Goettingen,
Marburg, Hannover
With Mini Frame Navigation Berlin, Ilmenau, Dresden, Darmstadt,
Frankfurt, Singapore, Szeged
With Section and Subsection Table Copenhagen, Luebeck, Malmoe, Warsaw
How do you choose a presentation theme? After the presentation is ﬁnished, try
out the various themes. Ask yourself:
Do sidebars take too much room away from my illustrations?
Do stronger colors add to the presentation or do they distract?
Do I want to use a navigation bar?
Answering these questions will narrow your choice.
The presentation theme deﬁnes all the colors, but you can alter them with the
command \usecolortheme{}. You have a choice of albatross, beetle, crane,
fly, and seagull.
For instance,
\usetheme{Warsaw}
\usecolortheme{seagull}
is a gray version of the Warsaw theme, appropriate for printing in black-and-white. In
addition, you can further modify the “inner elements”, such as blocks, with
\usecolortheme{lily}

340
Chapter 12
Presentations
or orchid, or rose. You can modify the “outer elements”, such as headlines and side-
bars, with
\usecolortheme{whale}
or seahorse, or dolphin. So you can have, for instance,
\usetheme{Warsaw}
\usecolortheme{lily}
\usecolortheme{whale}
This gives you 45 “out of the box” color schemes.
Similarly, font themes can also be speciﬁed, modifying the presentation theme,
with the command \usefonttheme{}. You have the default and the following options:
professionalfonts
structurebold
structureitalicserif
structuresmallcapserif.
12.6
Planning your presentation
Step 1 As a rule, your presentation is based on one or more of your articles.
Collect them in one folder. Resolve naming conventions as necessary. There should be
only one Fig1!
Step 2 Rewrite the article(s) to sketch out your presentation. The pages correspond
to frames. A page should not have too many words, say, no more than 40. Replace your
numbered theorems with named theorems. Never reference another page. Have few
sections and subsections. Add a table of contents, which is a readable overview of the
new article.
Step 3 Base the new presentation on a presentation in the samples folder, a sample
presentation in beamer’s solution folder, or on one of your own or of a colleague’s
older presentations. Turn the pages into frames.
Step 4 Design your frames and add frame titles. Completely disregard what we
wrote in Section 2.3 (the idea behind LATEX is that you should concentrate on what you
have to say and let LATEX take care of the visual design). The new principle is: You are
completely responsible for the visual appearance of every frame and overlay.
This is, of course, in addition to brevity and readability. Do not let LATEX break
your lines. Do it with the \\ command and keep words that belong together on the same
line.
Step 5 Write notes to remind yourself what you want to say in your lecture that is
not on the slides. Print the notes for your lecture.
Step 6 Build in ﬂexibility. For instance, if you have four examples to illustrate
a deﬁnition, put each one on a diﬀerent frame or overlay, and add a link to each that

12.7
What did I leave out?
341
skips the rest of the examples. Depending on your audience’s understanding, show an
example or two, and skip the rest. The same way, you may skip proof ideas and even
topics.
Step 7 Prepare for the worst—the computer system may fail, but projectors seldom
do—so print a set of transparencies for your lecture as a backup by invoking the option
trans of the documentclass
\documentclass[trans]{beamer}
To print a handout, use the handout option
\documentclass[handout]{beamer}
Open the presentation in Acrobat Reader. In Printer/Page Setup... set landscape
and 140% magniﬁcation. In the Print dialogue box in Layout choose two pages per
sheet and print—assuming, of course, that you have a printer oﬀering these options.
12.7
What did I leave out?
Since the beamer reference manual is 245 pages long, it is clear that this chapter covers
maybe 10% of it.
For most presentations, you won’t even need most of what I have included. If you
read Sections 12.1, 12.2.1 and maybe Section 12.3, you should have enough for most
math presentations.
If you are in other ﬁelds, or if you are more ambitious, you may need more. For
example, a computer scientist will want program listings in a verbatim environment.
This is easy. Start your frame with
\begin{frame}{fragile}
and then you can use the verbatim environment.
If you want to include sounds or movies in your presentation, consult Till Tantau’s
User’s Guide to the Beamer Class [69].
You can do very simple animation with what we have covered here. This is illus-
trated with the babybeamer10 presentation (in the samples folder).
babybeamer10 presentation
\documentclass{beamer}
\begin{document}
\begin{frame}
\includegraphics<1>{basem3-1}
\includegraphics<2>{basem3-2}

342
Chapter 12
Presentations
\includegraphics<3>{basem3-3}
\includegraphics<4>{basem3-4}
\end{frame}
\end{document}
The congruence generated by the dashed red line, see Figure 12.15, spreads in three
steps, illustrating an interesting result. The animation is quite eﬀective and instructive.
If you want to place such changing pictures lower in a frame, put them in the
overprint environment.
I would recommend that you read Section 5 of Till Tantau, User’s Guide, which
has many good pointers about creating presentations.
Figure 12.15: The four pictures of babybeamer10.

C H A P T E R
13
Illustrations
Most illustrations in math are “vector graphics” such as the following example:
0I
0J
1I
1J
u
J
I
u ∨0J
There are lots of circles, connecting lines, arrows, and so on. And the annotations are
in LATEX! Many mathematician used Adobe Illustrator or special purpose software to
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1_13
343

344
Chapter 13
Illustrations
create such diagrams; see Sections 7.8 and 13.4 for commutative diagrams. Since there
is no more academic pricing to buy Adobe Illustrator (you have to subscribe to Creative
Cloud), some turn to Till Tantau’s TikZ package.
We introduce TikZ in this chapter with a few commands. We hope they will serve
your needs.
This chapter is based on Jacques Crémer’s A very minimal introduction to TikZ,
with his permission, and Michael Doob’s detailed suggestions.
13.1
Your ﬁrst picture
To use the TikZ package, include
\usepackage{tikz}
in the preamble of your document. A picture is in a tikzpicture environment, which
is, in turn, typically within a figure environment (see Section 1.10):
\begin{figure}[htb]
{\centering
\begin{tikzpicture}
...
\end{tikzpicture}}
\end{figure}
Let us draw the illustration of Figure 13.1.
y
x
x
y
Figure 13.1: Our ﬁrst TikZ illustration
Step 1: Draw the grid
The command is \draw, the optional argument: help lines.
\begin{tikzpicture}
\draw[help lines] (0,0) grid (2,2);
\end{tikzpicture}

13.1
Your ﬁrst picture
345
Note the semicolon terminating the line. If you forget, you get the helpful re-
minder:
Package tikz Error: Giving up on this path.
Did you forget a semicolon?
Step 2: Draw the four edges
The command is \draw; the argument is a series of grid points connected by two
dashes, --.
{\centering\begin{tikzpicture}
\draw[help lines] (0,0) grid (2,2);
\draw (1,0)--(2,1)--(1,2)--(0,1)--(1,0);
\end{tikzpicture}
Again, note the semicolon terminating the line. It has to terminate all TikZ lines!!! No
more warnings.
Let me specify the conventions used in my ﬁeld for such a diagram (note that 1 inch
is 2.54 cm and 1 cm is 28.35 points): We use a grid with lines 1 cm apart; the circles
have radius 1.8 mm and line width 1 pt; the lines have line width 0.7 pt.
So the \draw command we would use for the illustration is
\draw[line width=0.7pt] (1,0)--(2,1)--(1,2)--(0,1)--(1,0);
to make the lines a little thicker. More about line width soon.
Step 3: Draw the circles
We add a circle with the \draw command
\draw (1,0) circle[radius=1.8mm];
By the conventions (above), we want the line width to be 1pt:
\draw[line width=1pt] (1,0) circle[radius=1.8mm];
We add four circles at (1,0), (2,1), (1,2), (0,1):

346
Chapter 13
Illustrations
Step 4: Fill the circles
This looks ugly. We should not be seeing the line segments in the circles. Easy to help.
Fill the circles with white by adding the fill=white option to \draw. So we get the
illustration of Figure 13.1 with the grid. We comment out the line producing the grid:
{\centering\begin{tikzpicture}
\draw[help lines] (0,0) grid (2,2);
\draw[line width=0.7pt](1,0)--(2,1)--(1,2)--(0,1)--(1,0);
\draw[fill=white, line width=1pt] (1,0) circle[radius=1.8mm];
\draw[fill=white, line width=1pt] (2,1) circle[radius=1.8mm];
\draw[fill=white, line width=1pt] (1,2) circle[radius=1.8mm];
\draw[fill=white, line width=1pt] (0,1) circle[radius=1.8mm];
\end{tikzpicture}}
and this produces the illustration of Figure 13.1 except for the labels.
Step 5: Add the labels
We add the labels with the \node at command. To add the label 𝑦to the circle with
center at (2,1):
\node at (2.5,1) {$y$};
You get 2.5 by 2.5 = 2 + 0.18 + a little nudge. Experiment until you like the result.
Then proceed to the other circles:
\begin{figure}[h!]
{\centering\begin{tikzpicture}
\draw[help lines] (0,0) grid (2,2);
\draw[line width=0.7pt] (1,0)--(2,1)--(1,2)--(0,1)--(1,0);
\draw[fill=white, line width=1pt] (1,0) circle[radius=1.8mm];
\draw[fill=white, line width=1pt] (2,1) circle[radius=1.8mm];
\node at (2.5,1) {$y$};
\draw[fill=white, line width=1pt] (1,2) circle[radius=1.8mm];
\node at (1,2.5) {$x \vee y$};
\draw[fill=white, line width=1pt] (0,1) circle[radius=1.8mm];
\node at (-0.5,1) {$x$};
\end{tikzpicture}}
\caption{Our first \tikzname illustration}\label{Fi:firsttikz}
\end{figure}
producing the illustration of Figure 13.1!
Step 6: Remember, this is LATEX
Section 14.1 introduces custom commands. Let’s get a little ahead of ourselves, and
deﬁne

13.2
The building blocks of an illustration
347
\newcommand{\mycircle}[1]
{\draw[fill=white,line width=1pt] (#1) circle[radius=1.8mm]}
Even better. TikZ allows us to set default values. The command
\tikzset{every picture/.style={line width=0.7pt}}
sets the default value of line width to 0.7pt. Now the code for Figure 13.1 becomes
easier to read (and write):
{\centering\begin{tikzpicture}
\draw[help lines] (0,0) grid (2,2);
\draw (1,0)--(2,1)--(1,2)--(0,1)--(1,0);
\mycircle{1,0};
\mycircle{2,1};
\node at (2.5,1) {$y$};
\mycircle{1,2};
\node at (1,2.5) {$x \vee y$};
\mycircle{0,1};
\node at (-0.5,1) {$x$};
\end{tikzpicture}}
13.2
The building blocks of an illustration
An illustration is built from components. We discuss some of them: line segments,
circles, dots (or vertices), ellipses, rectangles, arcs, smooth curves (Bézier curves), and
labels.
Line segments A path drawn with the command \draw (1,0)--(2,2)--(4,1);
(1,0)
(2,2)
(4,1)

348
Chapter 13
Illustrations
Circles A circle drawn using \draw (2,2) circle[radius=1];
(2,2)
Dots (or vertices) The command \draw[fill] (2,2) circle[radius=1pt];
draws a dot (or vertex):
(2,2)
Ellipses Drawn by \draw (2,2) ellipse[x radius=2, y radius=1];
(2,2)

13.2
The building blocks of an illustration
349
Rectangles A rectangle drawn with \draw (1,1) rectangle (2,3);
(1,1)
(2,3)
Arcs \draw (2,1) arc[start angle=0, end angle=90, radius=1];
draws an arc of a circle:
(2,1)
Surprise! The point is not the center of the circle.
Finally, an arc of an ellipse is drawn with the command
\draw (2,0) arc[x radius=1cm, y radius=5mm,
start angle=0, end angle=120];
which typesets as
(2,1)

350
Chapter 13
Illustrations
Smooth curves (Bézier curves) Nice curves can be drawn with a single control point
(quadratic), as in
\draw (2,0)..controls (2,3)..(0,2);
\draw (2,0)..controls (4,2)..(0,2);
or with two control points (cubic):
\draw[dotted] (2,0)..controls (4,2) and (2,3)..(0,2);
These three curves typeset as
(4,2)
(2,0)
(0,2)
(2,3)
Alternatively, draw the curve deﬁned by two points, A and B, the start and the end,
and by the direction it leaves A and the direction it arrives at B with the command:
\draw[very thick] (0,0) to[out=90,in=195] (2,1.5); This draws a
curve from (0,0) to (2,1) which “leaves” at an angle of 90◦and “arrives” at an
angle of 195◦:
(2,1)
(0,0)
Labels We place text or formula in a picture with \node at (1,1) {yes};
yes

13.3
Transformations
351
Notice how the “yes” is positioned relative to (1,1).
To place a label below a point, use the option below:
below
with the command \node[below] at (1,1) {below};. You can also use
above, left, and right, and their combinations, for instance, above left.
If the text is several lines long, break it with \\ and tell TikZ how to align it:
\begin{mypicture}[xscale=1.3]
\draw[thick] (0,0)--(3,0);
\draw (0,-.2)--(0,.2);
\draw (3,-.2)--(3,.2);
\node[align=left, below] at (1.5,-.5)%
{This text\\ is left justified};
\end{mypicture}
which typesets as
This text
is left justiﬁed
Text could be
left justiﬁed, option: align=left;
right justiﬁed, option: align=right;
centered, option: align=center;
13.3
Transformations
We can rotate, translate, and scale the illustrations.
Rotations The command
\draw[rotate=30] (1,1) rectangle (2,3);
rotates the rectangle by 30◦(around the origin) and
\draw (2,2) ellipse[x radius=2, y radius=1, rotate=60];
rotates an ellipse by 60◦(around its center):

352
Chapter 13
Illustrations
(1,1)
(2,3)
(5,2)
Translations \draw[shift={(3,1)}] (1,1) rectangle (2,3);
shifts
the
rectangle:
(1,1)
(2,3)
Scaling The command \draw[scale=0.3] (1,1) rectangle (2,3); scales the
rectangle by 0.3 from the origin and
\draw[scale around={0.5:(4.5,2)}] (4,1) rectangle (5,3);
scales the rectangle by 2.5 using around the center of the rectangle, that is, around
(4.5, 2):

13.4
Path attributes
353
(4,1)
(5,3)
You can scale the two dimensions in diﬀerent proportions:
coded with
\begin{tikzpicture}[xscale=1.5, yscale=0.5]\\
\draw (2,2) circle[radius=1.5];\\
or with
\draw[xscale=1.5, yscale=0.5] (2,2) circle[radius=1.5];
13.4
Path attributes
A \draw command draws a path, with a start point and an end point. The start and end
points of \draw (1,0)--(2,1)--(1,2)--(0,1); are (1,0) and (0,1); of
\draw (2,2) circle[radius=1.5]; are (2,2) and (2,2).
We consider now some of the common attributes.
Line width We have already seen the line width=1pt option of \draw. TikZ comes
with seven additional built in widths:
ultra thin, very thin, thin,
semithick, thick, very thick, and ultra thick.
Dashes and dots You can also make dotted and dashed lines. The commands
\draw[dashed] (0,0.5)--(2,0.5);
\draw[dotted, thick] (0,0)--(2,0);
make two thick lines, one dashed and one dotted:

354
Chapter 13
Illustrations
Colors Articles, as a rule, are printed black and white. But illustrations in PDF ﬁles
and in presentations are shown in full color.
TikZ comes with the following colors ready to use: red, green, blue, cyan,
magenta, yellow, black, gray, darkgray, lightgray, brown, lime, olive,
orange, pink, purple, and teal.
The following example uses white, lightgray, and gray.
Arrows We can put arrows or bars on one or both ends of a path:
coded as
\begin{tikzpicture}
\draw[->, lightgray] (0,0)--(3,0)--(3,-1);
\draw[<-] (0,-0.5)--(2,-0.5);
\draw[|->, dashed] (0,-1)--(2,-1);
\draw[very thick, <->] (0,-3) to[out=90,in=195] (3,-1.5);
\end{tikzpicture}
TikZ provides you with dozens of arrows. You get them by invoking the arrows
library with \usepgflibrary{arrows} in the preamble. Even better, use the
tikzcd package by Florêncio Neves invoked by \usepackage{tikz-cd}. It
is designed to code commutative diagrams and it provides arrows very close to
the LATEX style, see Figure 13.2. It comes with an excellent (and short) manual
tikz-cd-doc.pdf.
In the tikzcd environment, the command \arrow produces an arrow. It takes
one argument, a character r, l, u, or d, for right, left, up and down. A label is
placed on an arrow as the second argument.
Here are two examples of commutative diagrams from the tikz-cd manual.

13.4
Path attributes
355
A basic example:
coded as
\begin{tikzcd}
A \arrow{r}{\psi} \arrow{d}
& B \arrow{d}{\psi} \\
C \arrow{r}{\eta}
& D
\end{tikzcd}
rightarrow
yields
leftarrow
yields
leftrightarrow
yields
dash
yields
Rightarrow
yields
Leftarrow
yields
Leftrightarrow
yields
equal
yields
mapsto (or maps to)
yields
mapsfrom
yields
hookrightarrow (or hook)
yields
hookleftarrow
yields
rightharpoonup
yields
rightharpoondown
yields
leftharpoonup
yields
leftharpoondown
yields
dashrightarrow (or dashed)
yields
dashleftarrow
yields
rightarrowtail (or tail)
yields
leftarrowtail
yields
twoheadrightarrow (or two heads)
yields
twoheadleftarrow
yields
rightsquigarrow (or squiggly)
yields
leftsquigarrow
yields
leftrightsquigarrow
yields
Figure 13.2: The arrows provided by the tikz-cd package

356
Chapter 13
Illustrations
An example with curved and dashed arrows:
×
(
)
\begin{tikzcd}
T
\arrow[bend left]{drr}{x}
\arrow[bend right]{ddr}{y}
\arrow[dashed]{dr}[description]{(x,y)} & & \\
& X \times_Z Y \arrow{r}{p} \arrow{d}{q}
& X \arrow{d}{f} \\
& Y \arrow{r}{g}
& Z
\end{tikzcd}
13.5
Coding the example
To code the example on page 343, at the start of your article, following the
\usepackage{tikz}
line, deﬁne:
\tikzset{every picture/.style={line width=0.7pt}}
\newcommand{\mycircle}[1]
{\draw[fill=white,line width=1pt] (#1) circle[radius=1.0mm]}
Then the following code will produce the diagram:
\begin{figure}[hbt]
\centerline{\begin{tikzpicture}
%\draw[help lines] (0,0) grid (6,6);
\draw (2,0)--(0,3)--(4,5)--(6,2)--(2,0);
\draw (1.325,1)--(4.325,2.5);
\draw (6,2)--(4.325,2.5)--(4.66,4);
\mycircle{2,0};
\node at (2-.4,0) {$0_I$};
\mycircle{6,2};
\node at (6+.4,2) {$0_J$};
\mycircle{0,3};

13.6
What did I leave out?
357
\node at (0-.4,3) {$1_I$};
\mycircle{4,5};
\node at (4+.4,5) {$1_J$};
\mycircle{1.325,1};
\node at (1.325-.4,1) {$u$};
\mycircle{5.325,3};
\mycircle{4.325,2.5};
\mycircle{4.46,3};
\mycircle{4.67,4};
\node at (6,3.5) {$J$};
\node at (0,1.5) {$I$};
\node at (3.7,2.66) {$u \vee 0_J$};
\end{tikzpicture}}
\end{figure}
13.6
What did I leave out?
The TikZ manual is 726 pages, so this chapter covers maybe 2% of it. For most math
illustrations, this chapter will do. (I still use Adobe Illustrator for my lattice diagrams.
I use maybe 2% of Illustrator’s power for my work.)
TikZ can plot. It can graph many built in functions, has a small programming
language, has libraries, for instance, for circuits.
There is an excellent book on TikZ: Gérard Tisseau and Jacques Duma’s TikZ pur
l’impatient [70]. Although the book is in French, the TikZ code is in English; this book
should be easy enough to read.

PART V
Customization

C H A P T E R
14
Commands
and environments
In Section C.1.2, we discuss how Donald E. Knuth designed TEX as a platform on which
convenient work environments could be built. One such work environment, LATEX, pre-
dominates today, and it is indeed convenient.
Nevertheless, LATEX is designed for all of us, so it is not surprising that we could
improve on it for our personal use. There are many reasons to customize LATEX:
Goal 1 to enhance the readability of the source ﬁle
Goal 2 to make notational and terminological changes easier
Goal 3 to redeﬁne names used by LATEX
Goal 4 to introduce consistent layouts
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1_14
361

362
Chapter 14
Commands and environments
There are many techniques to accomplish these.
Technique 1 Deﬁne commands and environments in order to enhance LATEX to meet
your particular needs (see Sections 14.1, 14.1.7, and 14.2).
Technique 2 Utilize delimited commands to write LATEX documents in a more readable
fashion (see Section 14.1.9).
Technique 3 Collect your frequently used commands into a command ﬁle (see
Section 14.3).
Technique 4 Manipulate counters, integers—for instance, equation numbers and
section numbers—and length commands, distance measurements—the \voffset
command is an example (see Section 14.5).
Technique 5 Create customized list environments with the list environment (see
Section 14.6).
Of course, there are many more reasons to customize and many more techniques to
employ. We cover them in detail in this chapter.
We dedicate the last section to the pitfalls of customization (see Section 14.7).
While the beneﬁts of customization are great, there are many practices to avoid.
14.1
Custom commands
LATEX provides hundreds of commands. Chances are good, however, that you still have
speciﬁc needs that are not directly addressed by these commands. By judiciously adding
custom commands (or macros) you can make your work more productive.
Custom commands follow the same rules as regular LATEX commands (see
Section 3.3.1).
14.1.1
Examples and rules
Commands to enhance readability
Let us start with a few examples of custom commands as shorthand for longer com-
mand(s) or text in order to enhance readability of the source ﬁle (Goal 1).
1. If you use the \leftarrow command a lot, you could deﬁne
\newcommand{\larr}{\leftarrow}
Then you would only have to type \larr to obtain a left arrow.
2. Instead of
\widetilde{a}

14.1
Custom commands
363
you could simply type \wtilda after deﬁning
\newcommand{\wtilda}{\widetilde{a}}
I show you how to deﬁne a generalized version of such a command in Section 14.1.2.
3. If you want to suppress the ligature in iff (see Section 3.4.6), you would normally
have to type
if\textcompwordmark f
By deﬁning a command \Iff,
\newcommand{\Iff}{if\textcompwordmark f}
you can type \Iff to get iff. We name this command \Iff because \iff is the
symbol ⟺(see Section A.4).
4. If you use the construct 𝐷[2] × 𝐷[3] often, you could introduce the \DxD (𝐷times
𝐷) command,
\newcommand{\DxD}{D^{[2]}\times D^{[3]}}
and then type \DxD instead of the longer, and hard to read, version throughout your
document—serves also Goal 2.
5. If you want to get a backslash in typewriter style, you would normally have to type
(see Section 3.4.4)
\texttt{\symbol{92}}
Instead, you can introduce the \bsl command,
\newcommand{\bsl}{\texttt{\symbol{92}}}
and \bsl typesets as \.
6. You can also use commands as a shorthand for text. For instance, if you use the
phrase subdirectly irreducible many times in your document, you could de-
ﬁne
\newcommand{\subdirr}{subdirectly irreducible}
\subdirr is now shorthand for subdirectly irreducible, which typesets as
subdirectly irreducible.
Tip
With modern editors, the need to have custom commands as shorthand is reduced.
Most editors have “command completion” or “phrase completion”. For instance, in
TeXShop, type the ﬁrst few letters of a word and hit the escape key. The remaining

364
Chapter 14
Commands and environments
letters are entered to match the ﬁrst entry in the completion dictionary. Hitting escape
again cycles through all possible completions. To make this feature useful, you have
to customize the completion dictionary. Note that command completion minimizes
the number of characters you have to type, but it does not improve the readability of
the source.
Rule
Custom commands
1. Issue the \newcommand command.
2. In braces, type the name of your new command, for example, \subdirr, including
the backslash (\).
3. In a second pair of braces, deﬁne the command, in this example, subdirectly
irreducible.
4. Use the command as \subdirr\␣or \subdirr{} before a space, before an alpha-
betical character as \subdirr{}, and \subdirr otherwise.
Examples for Rule 4. For subdirectly irreducible lattice type
\subdirr{} lattice
or
\subdirr\ lattice
and not \subdirr lattice. Indeed, typesetting \subdirr lattice results in sub-
directly irreduciblelattice. By the ﬁrst spacing rule, \subdirr␣lattice is not any
better (see Section 3.2.1). If you want subdirectly irreducibles, you must use the
\subdirr{} form. Indeed, \subdirr{}s typesets as subdirectly irreducibles.
Using new commands
It is good practice to place custom commands in the preamble of your document or in
a command (style) ﬁle you load with a \usepackage command (see Section 14.3)—
provided that you do not submit to a journal that does not allow this. Then you always
know where to look for the command deﬁnitions. An exception is a custom command
that you want to restrict to a part of the document. Delimit the segment with braces
and deﬁne the custom command within those braces (see Section 3.3.2). Instead of
a pair of braces, you can use \begingroup and \endgroup, which is easier to see.
Section 14.2.5 recommends yet another approach.

14.1
Custom commands
365
Tip
If errors occur, isolate the problem. Comment out the custom commands and reintro-
duce them one at a time.
LATEX only checks whether the braces match in the command deﬁnition. Other mis-
takes are found only when the command is used.
For instance, if you deﬁne a command with a spelling error
\newcommand{\bfA}{\textf{A}}
then at the ﬁrst use of \bfA you get the message
! Undefined control sequence.
\bfA ->\textf
{A}
Note that LATEX is not complaining about \bfA but about the misspelled \textbf com-
mand in the deﬁnition of \bfA.
Be careful not to deﬁne a custom command with a name that is already in use. If
you do, you get a message such as
! LaTeX Error: Command \larr already defined.
To correct the error, replace the command name with a new one. On the other hand, if
you need to replace an existing command, you have to redeﬁne it. See Section 14.1.5
for how to do so.
Tip
Use spaces to make your source ﬁles more readable, but avoid them in deﬁnitions.
For example, you may type
$D^{ \langle 2 \rangle } + 2 = x^{ \mathbf{a} }$
This may help you see how the braces match, easily identify relations and operations,
and so on. Do not add these spaces in command deﬁnitions because it may result in un-
wanted spaces in your typeset document. You may start a new line to increase the read-
ability of a command deﬁnition, provided that you terminate the previous line with %.
For instance, borrowing an example from page 370:
\newcommand{\Xquotphi}[2]{%
\dfrac{\varphi \cdot X_{n, #1}}%
{\varphi_{#2}\times \varepsilon_{#1}}}

366
Chapter 14
Commands and environments
Tip
In the deﬁnition of a new command, command declarations need an extra pair of braces
(see Section 3.3.3).
Say you want to deﬁne a command that typesets the warning: Do not redeﬁne this
variable! It is very easy to make the following mistake:
\newcommand{\Warn}{\em Do not redefine this variable!}
\Warn typesets the warning emphasized, but everything that follows the warning is also
emphasized (more precisely, until the end of the \Warn command’s scope). Indeed,
\Warn is replaced by \em Do not redefine this variable! so the eﬀect of \em
goes beyond the sentence to the next closing brace.
The correct deﬁnition is
\newcommand{\Warn}{{\em Do not redefine this variable!}}
Even simpler, you could use a command with an argument
\newcommand{\Warn}{\emph{Do not redefine this variable!}}
Tip
There are limits as to what can be done with custom commands. For instance, you
cannot introduce \bal for \begin{align} and \eal for \end{align}. So if you
want to introduce a new type of custom command, do just one and try it out.
The xspace package
Rule 4 (on page 364) is the source of many annoying problems in LATEX. David Carlisle’s
xspace package (see Section 10.3.1) helps eliminate such problems. In the preamble,
load the package with
\usepackage{xspace}
Whenever you deﬁne a command that may have such problems, add the \xspace com-
mand to the deﬁnition. For instance, deﬁne \subdirr as
\newcommand{\subdirr}{subdirectly irreducible\xspace}
Then all the following typesets subdirectly irreducible lattice correctly:
\subdirr\␣lattice
\subdirr{}␣lattice
\subdirr␣lattice

14.1
Custom commands
367
Note that \xspace does not add space if followed by a punctuation mark, so to get
the lattice is subdirectly irreducible.
type
the lattice is \subdirr.
Tip
Be careful not to use \xspace twice in a deﬁnition.
For instance, if you deﬁne
\newcommand{\tex}{\TeX\xspace}
\newcommand{\bibtex}{\textsc{Bib}\kern-.1em\tex\xspace}% Bad!!!
then
\bibtex, followed by a comma
typesets as
BibTEX , followed by a comma
The correct deﬁnitions are
\newcommand{\tex}{\TeX\xspace}
\newcommand{\bibtex}{\textsc{Bib}\kern-.1em\TeX\xspace}% Correct!
Of course, if you want to get TEXbook, you cannot use the \xspace variant deﬁnition:
\tex.
Ensuring math
The \ensuremath command is useful for deﬁning commands for both text and math
mode. Suppose you want to deﬁne a command for 𝐷⟨2⟩. If you deﬁne it as
\newcommand{\Dsq}{D^{\langle2\rangle}}
then you can use the command in math mode, but not in text mode. If you deﬁne it as
\newcommand{\Dsq}{$D^{\langle2\rangle}$}
then it works in text mode, but not in math mode. Instead, deﬁne this command as
\newcommand{\Dsq}{\ensuremath{D^{\langle2\rangle}}}
Then \Dsq works correctly in both contexts.

368
Chapter 14
Commands and environments
This example also shows the editorial advantages of custom commands. Suppose
the referee suggests that you change the notation to 𝐷[2]. To carry out the change you
only have to change one line:
\newcommand{\Dsq}{\ensuremath{D^{[2]}}}
It is hard to overemphasize the importance of this example. You may want to change
notation because:
you found a better notation;
your coauthor insists;
your article appears in a conference proceedings, and the editor wants to unify the
notation;
you are reusing the code from this article in another one or in a book, where the
notation is diﬀerent.
See also the discussion of the \TextOrMath command on page 293.
14.1.2
Arguments
Arguments of custom commands work the same way as for LATEX commands (see
page 52). Deﬁne
\newcommand{\fsqAB}{(f^2)^{[[\frac{A^2}{B-1}]]}}
Then \fsqAB typesets as (𝑓2)[[ 𝐴2
𝐵−1 ]] in a math formula. If you want to use \fsqAB in
math and also by itself in text, deﬁne it with \ensuremath, as
\newcommand{\fsqAB}{\ensuremath{(f^2)^
{[[\frac{A^2}{B-1}]]}}}
However, if you use this construct for many functions 𝑓, then you may need a general-
ized command, such as
\newcommand{\sqAB}[1]{\ensuremath{(#1^2)^
{[[\frac{A^2}{B-1}]]}}}
Now \sqAB{g} typesets (𝑔2)[[ 𝐴2
𝐵−1 ]]. The form of this \newcommand is the same as
before, except that after the name of the command in braces, {\sqAB}, we specify
the number of arguments in brackets (in this example, [1]). Then we can use #1 in the
deﬁnition of the command. When the command is invoked, the argument you provide
replaces #1 in the deﬁnition. Typing $\sqAB{q}$ results in the formula (𝑞2)[[ 𝐴2
𝐵−1 ]],
while $\sqAB{r}$ gives (𝑟2)[[ 𝐴2
𝐵−1 ]].
Notice how these examples disrupt the normal spacing between lines—a practice
to avoid!

14.1
Custom commands
369
A custom command may have up to nine arguments, numbered 1–9.
The simplest examples just allow you to invoke an existing command under a
new name. For instance, the \eqref command introduced in Section 5.3 to refer-
ence equations (the equation number upright, enclosed in parentheses), would also be
useful to reference items for the custom list environment enumeratei introduced in
Section 14.2.1—see Example 3. Indeed, for the enumeratei environment, we want
references to items to be typeset upright, enclosed in parentheses. So if the ﬁrst item
has label First, we could reference it with \eqref{First}, which typesets as (i). But
\eqref{First} seems awkward and inappropriate; we are referencing an item not an
equation.
So deﬁne
\newcommand{\itemref}[1]{\eqref{#1}}
and now we can reference the ﬁrst item with \itemref{First}, which typesets as (i).
Following are some simple examples of custom commands with arguments.
1. In the preamble of the source ﬁle for this book, I deﬁned
\newcommand{\env}[1]{\textnormal{\texttt{#1}}}
In this example, the \env command is used to typeset environment names. So the
environment name center is typed as
\env{center}
Again the editorial advantage is obvious. If the editor wants the environment names
set in sans serif, only one line in the book has to be changed to alter every occurrence
of a typeset environment name:
\newcommand{\env}[1]{\textsf{#1}}
2. An argument (e.g., #1) may occur more than once in a deﬁnition. A natural example
is provided by the \index command (see Section 16.1). Typically, if you wanted
to include a phrase, say subdirectly irreducible lattice, in your index, you would
have to type
this proves that $L$ is a subdirectly irreducible lattice
You could instead deﬁne an “index it” command such as
\newcommand{\indexit}[1]{#1\index{#1}}
The argument of this command is a phrase to be both typeset and included in the
index. Using this command, you can type
it is a \indexit{subdirectly irreducible lattice}

370
Chapter 14
Commands and environments
If you want all such index entries to be typeset in italics, then \indexit should be
deﬁned as
\newcommand{\indexit}[1]{#1\index{#1@\textit{#1}}}
in which #1 occurs three times. (See Chapter 16 for more information about index
commands.)
3. Let us deﬁne a command with three arguments for congruences:
\newcommand{\congr}[3]{#1\equiv#2\pod{#3}}
Now type $\congr{a}{b}{\theta}$ to typeset 𝑎≡𝑏(𝜃). In Section 14.1.9,
I present another command for typesetting congruences.
4. In the secondarticle.tex article (see Section 9.3), there are a lot of vectors with
only one nonzero entry:
⟨… , 0, … ,
𝑖
𝑑, … , 0, … ⟩
the 𝑖above the 𝑑indicates that it is the 𝑖th component of the vector. A command
\vectsup, a vector with a superscript, producing this symbol can be deﬁned as
\newcommand{\vectsup}[2]{\langle\dots,0,\dots,
\overset{#1}{#2},\dots,0,\dots\rangle}
\vectsup{i}{d} in a math formula now produces ⟨… , 0, … ,
𝑖
𝑑, … , 0, … ⟩.
Formula 20 of the Formula Gallery (Section 5.10),
𝐀=
⎛
⎜
⎜
⎜
⎜
⎜
⎜
⎜
⎜⎝
𝜑⋅𝑋𝑛,1
𝜑1 × 𝜀1
(𝑥+ 𝜀2)2
⋯
(𝑥+ 𝜀𝑛−1)𝑛−1
(𝑥+ 𝜀𝑛)𝑛
𝜑⋅𝑋𝑛,1
𝜑2 × 𝜀1
𝜑⋅𝑋𝑛,2
𝜑2 × 𝜀2
⋯
(𝑥+ 𝜀𝑛−1)𝑛−1
(𝑥+ 𝜀𝑛)𝑛
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
𝜑⋅𝑋𝑛,1
𝜑𝑛× 𝜀1
𝜑⋅𝑋𝑛,2
𝜑𝑛× 𝜀2
⋯
𝜑⋅𝑋𝑛,𝑛−1
𝜑𝑛× 𝜀𝑛−1
𝜑⋅𝑋𝑛,𝑛
𝜑𝑛× 𝜀𝑛
⎞
⎟
⎟
⎟
⎟
⎟
⎟
⎟
⎟⎠
+ 𝐈𝑛
is a good candidate for custom commands. By deﬁning
\newcommand{\Xquotphi}[2]{%
\dfrac{\varphi \cdot X_{n, #1}}%
{\varphi_{#2}\times \varepsilon_{#1}}}
\newcommand{\exn}[1]{(x+\varepsilon_{#1})^{#1}}
the two new commands,
\[
\Xquotphi{2}{3} \qquad \exn{n}
\]

14.1
Custom commands
371
are typeset as
𝜑⋅𝑋𝑛,2
𝜑3 × 𝜀2
(𝑥+ 𝜀𝑛)𝑛
With these custom commands, you can rewrite Formula 20 as follows:
\[
\mathbf{A} =
\begin{pmatrix}
\Xquotphi{1}{1} & \exn{2} & \cdots & \exn{n - 1}+
& \exn{n}\\[10pt]
\Xquotphi{1}{2} & \Xquotphi{2}{2}
& \cdots
& \exn{n - 1}
&\exn{n}\\
\hdotsfor{5}\\
\Xquotphi{1}{n} & \Xquotphi{2}{n}
& \cdots &
\Xquotphi{n - 1}{n} & \Xquotphi{n}{n}
\end{pmatrix}
+ \mathbf{I}_{n}
\]
Observe how much shorter this form is than the version shown in the Formula
Gallery and how much easier it is to read. It is also easier to reuse in a subsequent
article.
14.1.3
Short arguments
There are three ways of deﬁning new commands:
\newcommand
\renewcommand
\providecommand
We take up the last two in Section 14.1.5. They deﬁne commands that can take any
number of paragraphs as arguments. The *-ed versions of these commands deﬁne short
commands (see Section 3.3.3) that take a block of text that contains no paragraph break
as an argument. For instance,
\newcommand{\bigbold}[1]{{\large\bfseries#1}}
makes its argument large and bold. So
\bigbold{First paragraph.
Second paragraph.
}
prints

372
Chapter 14
Commands and environments
First paragraph.
Second paragraph.
as expected. On the other hand, if you deﬁne
\newcommand*{\bigbold}[1]{{\large\bfseries#1}}
and then attempt to typeset the previous example, you get the message
Paragraph ended before \bigbold was complete.
<to be read again>
\par
\par
\par
Short commands are often preferable because of their improved error checking.
14.1.4
Optional arguments
You can deﬁne a command whose ﬁrst argument is optional, and provide a default value
for this optional argument. To illustrate, let us deﬁne the command
\newcommand{\SimpleSum}{a_{1}+a_{2}+\dots+a_{n}}
$\SimpleSum$ now produces 𝑎1 + 𝑎2 + ⋯+ 𝑎𝑛. Now we change this command so that
we can sum from 1 to 𝑚if necessary, with 𝑛as the default:
\newcommand{\BetterSum}[1][n]{a_{1}+a_{2}+\dots+a_{#1}}
$\BetterSum$ still produces 𝑎1 + 𝑎2 + ⋯+ 𝑎𝑛, but $\BetterSum[m]$ typesets as
𝑎1 + 𝑎2 + ⋯+ 𝑎𝑚.
A \newcommand may have up to nine arguments, but only the ﬁrst may be optional.
The following command has two arguments, one optional:
\newcommand{\BestSum}[2][n]{#2_{1}+#2_{2}+\dots+#2_{#1}}
Now
$\BestSum{a}$
typesets as
𝑎1 + 𝑎2 + ⋯+ 𝑎𝑛
$\BestSum{b}$
typesets as
𝑏1 + 𝑏2 + ⋯+ 𝑏𝑛
$\BestSum[m]{c}$
typesets as
𝑐1 + 𝑐2 + ⋯+ 𝑐𝑚

14.1
Custom commands
373
14.1.5
Redeﬁning commands
LATEX makes sure that you do not inadvertently deﬁne a new command with the same
name as an existing command (see, for example, page 365). Assuming that you have
already deﬁned the \larr command as in Section 14.1.1 (to typeset ←), to redeﬁne
\larr, use \renewcommand:
\renewcommand{\larr}{\Longleftarrow}
and now \larr typesets as ⟸.
Tip
Use the \renewcommand command sparingly and make sure that you understand the
consequences of redeﬁning an existing command. Redeﬁning LATEX commands may
cause LATEX to behave in unexpected ways, or even crash.
Blind redeﬁnition is the route to madness.
See also the discussion in Section 14.7.
You can also use \renewcommand to redeﬁne commands deﬁned by LATEX or any
package. For instance, the end of proof symbol, \qedsymbol, used by the proof en-
vironment, can be changed to the solid black square some people prefer (deﬁned in the
amssymb package) with the command
\renewcommand{\qedsymbol}{$\blacksquare$}
Even better, deﬁne
\renewcommand{\qedsymbol}{\ensuremath{\blacksquare}}
so that you can use \qedsymbol in both text and math mode. Section 14.1.7 has more
on redeﬁning names.
\renewcommand has a companion, \providecommand. If the command it def-
ines has already been deﬁned, the original command is left unchanged. Otherwise,
the \providecommand command acts exactly like \newcommand. For instance, the
\bysame command (see Section 8.5.1, page 250) is deﬁned in some document classes as
\newcommand{\bysame}{\makebox[3em]{\hrulefill}\thinspace}
If you want to use the \bysame command in your bibliography and include this deﬁ-
nition in your document, LATEX generates a message when you typeset your document
using a document class that already deﬁnes \bysame (all AMS document classes do).
However, if you deﬁne \bysame in your document using \providecommand:
\providecommand{\bysame}%
{\makebox[3em]{\hrulefill}\thinspace}
the \bysame command typesets correctly whether or not the document class deﬁnes it.

374
Chapter 14
Commands and environments
14.1.6
Deﬁning operators
The powerful \DeclareMathOperator command deﬁnes a new operator:
\DeclareMathOperator{\opCommand }{opName }
Invoke the new operator with \opCommand, which is then typeset with opName.
Rule
The \DeclareMathOperator command must be placed in the preamble.
For example, to deﬁne the operator Truncat, invoked by the command \Trunc, place
this in the preamble:
\DeclareMathOperator{\Trunc}{Truncat}
An operator is typeset in math roman with a little space after it, so $\Trunc A$ typesets
as Truncat 𝐴.
The second argument is typeset in math mode but - and * are typeset as they would
be in text. Here are some more examples. Deﬁne in the preamble two operators:
\DeclareMathOperator{\Trone}{Trunc_{1}}
\DeclareMathOperator{\Ststar}{Star-one*}
Then in the body of the article
$\Trone A$ is typeset as Truncat1 𝐴
$\Ststar A$ is typeset as Star−one∗𝐴
To deﬁne an operator with limits, use the *-ed form
\DeclareMathOperator*{\doublesum}{\sum\sum}
and then (see Section 5.6.4 for multiline subscripts)
\[
\doublesum_{\begin{subarray}{l}
i^2+j^2 = 50\\
i,\ j \leq 10
\end{subarray}}
\frac{x^i + y^j}{(i + j)!}
\]
typesets as
∑∑
𝑖2+𝑗2=50
𝑖, 𝑗≤10
𝑥𝑖+ 𝑦𝑗
(𝑖+ 𝑗)!

14.1
Custom commands
375
14.1.7
Redeﬁning names
A number of names, such as Table, List of Tables, Abstract, and so on, are typeset
in your document by LATEX. You can easily change these names.
For instance, if you are preparing your manuscript for the proceedings of a meeting,
and Abstract has to be changed to Summary, you can do so with
\renewcommand{\abstractname}{Summary}
Table 14.1 lists the commands that deﬁne such names in various document classes,
along with their default deﬁnitions and the major document classes using the com-
mands. It is easy to check whether your document class deﬁnes such a command, simply
open the appropriate cls ﬁle and search for the command.
If your document has photographs rather than ﬁgures, you could redeﬁne
\renewcommand{\figurename}{Photograph}
\renewcommand{\listfigurename}{List of Photographs}
14.1.8
Showing the deﬁnitions of commands
If you are deﬁning a new command with \newcommand and an error message informs
you that the command name is already in use, then it may be useful to ﬁnd out the
existing deﬁnition of the command. For instance, the \vectsup command is deﬁned
in secondarticleccom.tex (in the samples folder and in Section 14.4). If you called
this new command \vec, you would get the message
! LaTeX Error: Command \vec already defined.
You can ﬁnd out the deﬁnition of the \vec command by getting into interactive mode
(see Section C.3) and typing
*\show \vec
LATEX responds with
> \vec=macro:
->\mathaccent "017E .
<*> \show \vec
informing you that \vec is a command, and, speciﬁcally, a math accent (see Sections 5.7
and A.8). Now try \hangafter (see Section 3.7.2):
*\show \hangafter
> \hangafter=\hangafter.

376
Chapter 14
Commands and environments
Deﬁned by
Document Class
Command
Default Value
\abstractname
Abstract
aa, ab, ap, a, p, r
\appendixname
Appendix
aa, ab, ap, a, b, r
\bibname
Bibliography
ab, b, r
\ccname
Cc
l
\chaptername
Chapter
ab, b, r
\contentsname
Contents
aa, ab, ap, a, b, r
\datename
Date
aa, ab, ap
\enclname
Enclosure
l
\figurename
Figure
aa, ab, ap, a, b, r
\headtoname
To
l
\indexname
Index
aa, ab, ap, a, b, r
\keywordsname
Key words and phrases
aa, ab, ap
\listfigurename
List of Figures
aa, ab, ap, a, b, r
\listtablename
List of Tables
aa, ab, ap, a, b, r
\pagename
Page
l, p
\partname
Part
aa, ab, ap, a, b, r
\proofname
Proof
aa, ab, ap
\refname
References
aa, ap, a
\see
see
aa, ab, ap
\seealso
see also
aa, ab, ap
\subjclassname
1991 Mathematics
Subject
Classiﬁcation
aa, ab, ap
\subjclassname[2010]
2010 Mathematics
Subject
Classiﬁcation
aa, ab, ap
\tablename
Table
aa, ab, ap, a, b, r
Document class codes: aa amsart, ab amsbook, ap amsproc,
a article, b book, l letter, p proc, and r report
Table 14.1: Redeﬁnable name commands in LATEX.
The response indicates that \hangafter is a primitive, deﬁned by TEX itself. Redeﬁn-
ing a primitive is not a good idea.
Try one more command, \medskip (see Section 3.8.2), to ﬁnd out how large it is:
*\show \medskip
> \medskip=macro:
->\vspace \medskipamount .

14.1
Custom commands
377
The third line indicates that the length is stored in \medskipamount. If we use \show
to ask what \medskipamount is deﬁned to be:
*\show \medskipamount
> \medskipamount=\skip14.
we do not get a very useful answer. \medskipamount is unlike most of the commands
you have seen so far. It is a length command (see Section 14.5.2), containing the value
of \medskip. You can ask for the value of a length command (or parameter) with the
\showthe command:
*\showthe \medskipamount
> 6.0pt plus 2.0pt minus 2.0pt.
So \medskip is a vertical space of 6 points that can stretch or shrink by up to 2 points.
LATEX has many registers that contain numbers:
counters containing integers, such as 3
dimensions such as 10.2pt, for example, \textwidth (see Section 8.6)
lengths, written in the form 6.0pt plus 2.0pt minus 2.0pt, also called a glue
or a rubber length (see Sections 14.5.2 and C.2.2)
Use the \showthe command to display the value for any of these registers.
You can also type the \show and \showthe commands directly into your docu-
ment rather than go into interactive mode. LATEX’s response appears in the log window,
and is saved into the log ﬁle.
14.1.9
Delimited commands
You can deﬁne new commands in TEX using characters and symbols to delimit arg-
uments.
Such delimited commands provide a way to write more readable source
documents.
First we have to learn how to deﬁne a command using TEX’s \def command. Type
\def, followed by the new command name (not in braces), then the deﬁnition in braces.
For example, the ﬁrst command deﬁned in Section 14.1.1,
\newcommand{\larr}{\leftarrow}
could be typed
\def\larr{\leftarrow}
TEX’s \def command does not check whether a new command name is already
in use, so \def behaves diﬀerently from the LATEX’s \newcommand, \renewcommand,
and \providecommand (see Section 14.1.5). If the \larr command was deﬁned pre-
viously, the original deﬁnition is overwritten.

378
Chapter 14
Commands and environments
Tip
It is your responsibility to ensure that your command name is unique when you deﬁne
a command using \def. LATEX provides no protection. Use the techniques introduced
in Section 14.1.8 to check a name before you deﬁne a command with \def.
Now we can start discussing delimited commands with a simple example, deﬁning
a command for vectors:
\def\vect<#1>{\langle#1\rangle}
Note that \vect is a command with one argument, #1. When invoked, it typesets ⟨, the
argument, and then ⟩.
In the deﬁnition of \vect, the argument #1 is delimited by < and >. When the
command is invoked, the argument must be delimited the same way. So to typeset the
vector ⟨𝑎, 𝑏⟩, we invoke \vect with
\vect<a,b>
This looks somewhat like a vector, and the name \vect serves as a reminder.
You have to be careful with delimited commands because the math spacing rules
(see Section 5.2) do not hold in either the deﬁnition or the invocation. So if there is a
space before #1, in the deﬁnition of \vect,
\def\vect< #1>{\langle#1\rangle}
then $\vect<a,b>$ results in the message
! Use of \vect doesn’t match its definition.
l.12 $\vect<a
,b>$
which is clear enough. If the space is on the other side of the #1, as in
\def\vect<#1 >{\langle#1\rangle}
the message is slightly more confusing:
Runaway argument?
a,b>$
! Paragraph ended before \vect was complete.
<to be read again>
\par
The moral is that if you use delimited commands, you must be very careful that each
invocation exactly matches the deﬁnition. /Users/gratzer-new/Dropbox/MiL5/Sample
ﬁles/newlattice.sty In Example 3 of Section 14.1.2, we introduced a command with
three arguments for typing congruences:
\newcommand{\congr}[3]{#1\equiv#2\pod{#3}}

14.2
Custom environments
379
$\congr{a}{b}{\theta}$ produces 𝑎≡𝑏(𝜃). This command is easy to remem-
ber, but it does not make the source ﬁle more readable. For that, we use a delimited
command. Let us redo the congruence example with a delimited command
\def\congr#1=#2(#3){#1\equiv#2\pod{#3}}
so that $\congr a=b(\theta)$ produces 𝑎≡𝑏(𝜃). In the source document, the for-
mula \congr a=b(\theta) looks a bit like the typeset congruence and it is easier to
read.
I included this deﬁnition in the newlattice.sty command ﬁle (see
Section 14.3).
There is only one catch. Suppose you want to typeset the formula
𝑥= 𝑎≡𝑏
(𝜃)
If you type $\congr x=a=b(\theta)$, LATEX typesets it as 𝑥≡𝑎= 𝑏(𝜃). Indeed,
x is delimited on the right by the ﬁrst =, so LATEX believes that the ﬁrst argument is x.
The second argument is delimited by the ﬁrst = and the left parenthesis, so it is a=b. In
such cases, you can help LATEX ﬁnd the correct ﬁrst argument by enclosing it in braces:
$\congr{x=a}=b(\theta)$
Here is our ﬁnal example. In Section 3.3.1 we discuss the problem of typing a
command such as \TeX (the example there was \today) in the form \TeX\␣so that it
is typeset as a separate word. The problem is that if you type \TeX without the trailing
\␣, TEX is merged with the next word, and there is no message to warn you. One
solution is to use a delimited command:
\def\tex/{\TeX}
Now to get TEX, type \tex/. If a space is needed after it, type \tex/␣. If you forget
the closing /, you get a message.
A better solution to this problem is the use of the xspace package—provided you
do not want to typeset something like TEXbook (see Section 14.1.1). However, many
documents use the delimited construct (including the AMS documentation), so you
should be familiar with it.
14.2
Custom environments
Most custom commands are new commands. Custom environments, as a rule, are built
on existing environments. We start with such custom environments (Section 14.2.1)
and then proceed to investigate
arguments (Section 14.2.2)
optional arguments (Section 14.2.3)
short arguments (Section 14.2.4)
Finally, we discuss how to deﬁne brand-new environments (Section 14.2.5).

380
Chapter 14
Commands and environments
14.2.1
Modifying existing environments
If you do not like the name of the proof environment and would prefer to use the name
demo, deﬁne
\newenvironment{demo}
{\begin{proof}}
{\end{proof}}
Note that this does not change how the environment is typeset, only the way it is invoked.
To modify an existing environment, oldenv, type
\newenvironment{name }
{begin_text }
{end_text }
where begin_text contains the command \begin{oldenv } and end_text contains
the command \end{oldenv }.
Tip
Do not give a new environment the name of an existing command or environment.
For instance, if you deﬁne
\newenvironment{parbox}
{...}
{...}
you get the message
! LaTeX Error: Command \parbox already defined.
If there is an error in such a custom environment, the message generated refers
to the environment that was modiﬁed, not to your environment. For instance, if you
misspell proof as prof when you deﬁne
\newenvironment{demo}
{\begin{prof}}
{\end{proof}}
then at the ﬁrst use of the demo environment you get the message
! LaTeX Error: Environment prof undefined.
l.13 \begin{demo}

14.2
Custom environments
381
If you deﬁne
\newenvironment{demo}
{\begin{proof}\em}
{\end{prof}}
at the ﬁrst use of demo you get the message
! LaTeX Error: \begin{proof} on input line 5
ended by \end{prof}.
l.14 \end{demo}
Here are four more examples of modiﬁed environments.
1. The command
\newenvironment{demo}
{\begin{proof}\em}
{\end{proof}}+
deﬁnes a demo environment that typesets an emphasized proof. Note that the scope
of \em is the demo environment.
2. The following example deﬁnes a very useful environment. It takes an argument to
be typeset as the name of a theorem:
\newtheorem*{namedtheorem}{\theoremname}
\newcommand{\theoremname}{testing}
\newenvironment{named}[1]{
\renewcommand{\theoremname}{#1}
\begin{namedtheorem}}
{\end{namedtheorem}}
For example,
\begin{named}{Name of the theorem}
Body of theorem.
\end{named}
produces
Name of the theorem. Body of theorem.
in the style appropriate for the \newtheorem* declaration. This type of environment
is often used to produce an unnumbered Main Theorem (see Section 14.4) or when
typesetting an article or book in which the theorem numbering is already ﬁxed, for
instance, when publishing a book in LATEX that was originally typeset by another
typesetting system.

382
Chapter 14
Commands and environments
3. In Sections 4.2.4 and 10.3.1, we came across the enumerate package, which allows
you to customize the enumerate environment. If the enumerate package is loaded,
you can invoke the enumerate environment with an optional argument specifying
how the counter should be typeset, for instance, with the option [\upshape (i)],
\begin{enumerate}[\upshape (i)]
\item First item\label{First}
\end{enumerate}
items are numbered (i), (ii), and so on. So now we deﬁne
\newenvironment{enumeratei}{\begin{enumerate}%
[\upshape (i)]}%
{\end{enumerate}}
and we can invoke the new environment with (see Sections 14.3 and 14.4)
\begin{enumeratei}
\item \label{ }
\end{enumeratei}
Reference items in the enumeratei environment with the \itemref command
introduced in Section 14.1.2.
4. If you want to deﬁne an environment for displaying text that is numbered as an equa-
tion, you might try
\newenvironment{texteqn}
{\begin{equation} \begin{minipage}{0.9\linewidth}}
{\end{minipage} \end{equation}}
But there is a problem. If you use this environment in the middle of a paragraph,
an interword space appears at the beginning of the ﬁrst line after the environment.
To remove this unwanted space, use the \ignorespacesafterend command, as in
\newenvironment{texteqn}
{\begin{equation} \begin{minipage}{0.9\linewidth}}
{\end{minipage} \end{equation} \ignorespacesafterend}
Examples 2 and 3 are included in the newlattice.sty command ﬁle (see Sec-
tion 14.3). See the sample article, secondarticleccom.tex in Section 14.4, for some
instances of their use.
See Section 14.6.3 for custom lists as custom environments.
Redeﬁne an existing environment with the \renewenvironment command. It is
similar to the \renewcommand command (see Section 14.1.5).
There are some environments you cannot redeﬁne; for instance, verbatim and all
the AMS multiline math environments.

14.2
Custom environments
383
14.2.2
Arguments
An environment deﬁned by the \newenvironment command can take arguments (see
Example 2 in Section 14.2.1), but they can only be used in the begin_text argument
of the \newenvironment command. Here is a simple example. Deﬁne a theorem
proclamation in the preamble (see Section 4.4), and then deﬁne a theorem that can be
referenced:
\newenvironment{theoremRef}[1]
{\begin{theorem}\label{T:#1}}
{\end{theorem}}
This is invoked with
\begin{theoremRef}{label }
The theoremRef environment is a modiﬁed environment. It is a theorem that can
be referenced (with the \ref and \pageref commands, of course) and it invokes the
theorem environment when it deﬁnes T:label to be the label for cross-referencing.
14.2.3
Optional arguments with default values
The ﬁrst argument of an environment created with the \newenvironment command
may be an optional argument with a default value. For example,
\newenvironment{narrow}[1][3in]
{\noindent\begin{minipage}{#1}}
{\end{minipage}}
creates a narrow environment. By default, it sets the body of the environment in a
3-inch wide box, with no indentation. So
\begin{narrow}
This text was typeset in a \texttt{narrow}
environment, in a 3-inch wide box, with no indentation.
\end{narrow}
typesets as
This text was typeset in a narrow environment, in
a 3-inch wide box, with no indentation.
You can also give an optional argument to specify the width. For example,
\begin{narrow}[3.5in]
This text was typeset in a \texttt{narrow} environment,
in a 3-inch wide box, with no indentation.
\end{narrow}

384
Chapter 14
Commands and environments
which produces the following false statement:
This text was typeset in a narrow environment, in a 3-inch
wide box, with no indentation.
14.2.4
Short contents
We have discussed two commands that deﬁne new environments,
\newenvironment
and
\renewenvironment
These commands allow you to deﬁne environments whose contents (begin_text and
end_text ; see page 380) can include any number of paragraphs. The *-ed versions of
these commands deﬁne short environments whose contents cannot contain a paragraph
break (a blank line or a \par command).
14.2.5
Brand-new environments
Some custom environments are not modiﬁcations of existing environments. Here are
two examples:
1. A command remains eﬀective only within its scope (see Section 3.3.2). Now sup-
pose that you want to make a change, say redeﬁning a counter, for only a few para-
graphs. You could simply place braces around these paragraphs, but they are hard
to see. So deﬁne
\newenvironment{exception}
{\relax}
{\relax}
and then
\begin{exception}
new commands
body
\end{exception}
The environment stands out better than a pair of braces, reminding you later about
the special circumstances. The \relax command does nothing, but it is customary
to include a \relax command in such a deﬁnition to make it more readable.
2. In this example, we deﬁne a new environment that centers its body vertically on a
new page:
\newenvironment{vcenterpage}
{\newpage\vspace*{\fill}}
{\vspace*{\fill}\par\pagebreak}
For \vspace, see Section 3.8.2 and for \fill, see the last subsection in
Section 14.5.

14.3
A custom command ﬁle
385
14.3
A custom command ﬁle
Custom commands, of course, are a matter of individual need and taste. I have collected
some commands for writing papers in lattice theory in the newlattice.sty ﬁle, which
you can ﬁnd in the samples folder (see page 5). I hope that this model helps you to
develop a command ﬁle of your own. Please remember that everything we discuss in
this section is a reﬂection of my work habits. Many experts disagree with one or another
aspect of the way I deﬁne the commands, so take whatever suits your needs. And keep
in mind the dangers of customization discussed in Section 14.7.
Tip
Some journals do not permit the submission of a separate custom command ﬁle. For
such journals, just copy the needed custom commands into the preamble of the article.
This ﬁle is named newlattice.sty. It can be loaded with \usepackage. This
has a number of advantages.
Your command names should be mnemonic. If you cannot easily remember a
command’s name, rename it. The implication here is that your command ﬁle should
not be very large unless you have an unusual ability to recall abbreviations.
Here are the ﬁrst few lines of the newlattice.sty command ﬁle:
% newlattice.sty
% New command file for lattice papers
\NeedsTeXFormat{LaTeX2e}[2011/01/30]
\ProvidesPackage{newlattice}[2015/03/15 v1.6
Commands for lattices based on LTF]
\RequirePackage{amsmath}
\RequirePackage{amssymb}
\RequirePackage{latexsym}
\RequirePackage[mathscr]{eucal}
\RequirePackage{verbatim}
\RequirePackage{enumerate}
\RequirePackage{xspace}
The line
\NeedsTeXFormat{LaTeX2e}[2005/12/01]
gives a message if a document loading the newlattice package is typeset with LATEX
2.09 or with an older version of the standard LATEX. The next line provides information
that is written in your log ﬁle.
The next seven lines declare what packages are required. If some of these packages
have not yet been loaded, then the missing packages are loaded. A package already
loaded is not read in again by \RequirePackage.

386
Chapter 14
Commands and environments
Being able to specify the packages we need is one of the great advantages of com-
mand ﬁles. When I write a document, the packages are there if I need them.
You may want some justiﬁcation for the inclusion of two of these packages in this
list. The verbatim package is on the list so that I can use the comment environment
to comment out large blocks of text (see Section 3.5.1), which is useful for ﬁnding
errors and typesetting only parts of a longer document—but do not forget to remove
your comments before submission. The enumerate package is on the list because the
enumeratei and enumeratea environments, deﬁned in newlattice.sty, require it.
If you start your article with
\documentclass{amsart}
\usepackage{newlattice}
then the \listfiles command (see Section C.2.4) produces the following list when
your document is typeset:
*File List*
amsart.cls
2009/07/02 v2.20.1
amsmath.sty
2013/01/14 v2.14 AMS math features
amstext.sty
2000/06/29 v2.01
amsgen.sty
1999/11/30 v2.0
amsbsy.sty
1999/11/29 v1.2d
amsopn.sty
1999/12/14 v2.01 operator names
umsa.fd
2013/01/14 v3.01 AMS symbols A
amsfonts.sty
2013/01/14 v3.01 Basic AMSFonts support
newlattice.sty
2011/07/14 Commands for lattices based on LTF
fixltx2e.sty
2014/05/13 v1.1q fixes to LaTeX
amssymb.sty
2013/01/14 v3.01 AMS font symbols
latexsym.sty
1998/08/17 v2.2e Standard LaTeX package
(lasy symbols)
eucal.sty
2009/06/22 v3.00 Euler Script fonts
verbatim.sty
2003/08/22 v1.5q LaTeX2e package
for verbatim enhancements
enumerate.sty
1999/03/05 v3.00 enumerate extensions (DPC)
xspace.sty
2009/10/20 v1.13
Space after command names (DPC,MH)
microtype.sty
2013/05/23 v2.5a
Micro-typographical refinements (RS)
keyval.sty
2014/05/08 v1.15 key=value parser (DPC)
microtype-pdftex.def
2013/05/23 v2.5a
Definitions specific to pdftex (RS)
microtype.cfg
2013/05/23 v2.5a microtype
main configuration file (RS)
umsa.fd
2013/01/14 v3.01 AMS symbols A
umsb.fd
2013/01/14 v3.01 AMS symbols B

14.3
A custom command ﬁle
387
ulasy.fd
1998/08/17 v2.2e LaTeX symbol font definitions
mt-cmr.cfg
2013/05/19 v2.2 microtype config. file:
Computer Modern Roman (RS)
***********
This provides a list of all packages already invoked.
Now we continue with newlattice.sty. After the introductory section dealing
with LATEX and the packages, we deﬁne some commands for writing about lattices and
sets:
% Lattice operations
\newcommand{\jj}{\TextOrMath{$\vee$\xspace}{\vee}}
\newcommand{\mm}{\TextOrMath{$\wedge$\xspace}{\wedge}}
\newcommand{\JJ}{\bigvee}% big join
\newcommand{\MM}{\bigwedge}% big meet
\newcommand{\JJm}[2]{\JJ(\,#1\mid#2\,)}% big join with a middle
\newcommand{\MMm}[2]{\MM(\,#1\mid#2\,)}% big meet with a middle
% Set operations
\newcommand{\uu}{\cup}% union
\newcommand{\ii}{\cap}% intersection
\newcommand{\UU}{\bigcup}% big union
\newcommand{\II}{\bigcap}% big intersection
\newcommand{\UUm}[2]{\UU(\,#1\mid#2\,)}% big union with a middle
\newcommand{\IIm}[2]{\II(\,#1\mid#2\,)}
% big intersection with a middle
% Sets
\newcommand{\ci}{\subseteq}% contained in with equality
\newcommand{\nc}{\nsubseteq}% not \ci
\newcommand{\sci}{\subset}% strictly contained in
\newcommand{\nci}{\nc}% not \ci
\newcommand{\ce}{\supseteq}% containing with equality
\newcommand{\nce}{\nsupseteq}% not \ce
\newcommand{\nin}{\notin}% not \in
\newcommand{\es}{\varnothing}% the empty set
\newcommand{\set}[1]{\{#1\}}% set
\newcommand{\setm}[2]{\{\,#1\mid#2\,\}}% set with a middle
\def\vv<#1>{\langle#1\rangle}% vector
% Partial ordering
\newcommand{\nle}{\nleq}% not \leq

388
Chapter 14
Commands and environments
So $a \jj b$ produces 𝑎∨𝑏and $A \contd B$ produces 𝐴⊆𝐵, and so on. The
original commands are not redeﬁned, so if a coauthor prefers $a \vee b$ to $a \jj b$,
the \vee command is available.
The commands with a “middle” are exempliﬁed by \setm:
$\setm{x \in R}{x^2 \leq 2}$
which typesets as {𝑥∈𝑅∣𝑥2 ≤2}.
Using the \set command, we can type the set {𝑎, 𝑏} as $\set{a,b}$, which is
easier to read than $\{a,b\}$. Similarly, we type $\vect<a,b>$ for the vector ⟨𝑎, 𝑏⟩,
so it looks like a vector.
Next in newlattice.sty, I map the Greek letters and bold Greek letters to easy
to remember commands. For some, I prefer to use the variants, but that is a matter of
individual taste. It is also a matter of taste whether or not to change the commands
for the Greek letters at all, and how far one should go in changing commonly used
commands.
% Greek letters
\newcommand{\ga}{\TextOrMath{$\alpha$\xspace}{\alpha}}
\newcommand{\gb}{\TextOrMath{$\beta$\xspace}{\beta}}
\newcommand{\gc}{\TextOrMath{$\chi$\xspace}{\chi}}
\newcommand{\gd}{\TextOrMath{$\delta$\xspace}{\delta}}
\renewcommand{\ge}{\TextOrMath{$\varepsilon$\xspace}{\varepsilon}}
\newcommand{\gf}{\TextOrMath{$\varphi$\xspace}{\varphi}}
\renewcommand{\gg}{\TextOrMath{$\gamma $\xspace}{\gamma}}
\newcommand{\gh}{\TextOrMath{$\eta$\xspace}{\eta}}
\newcommand{\gi}{\TextOrMath{$\iota$\xspace}{\iota}}
\newcommand{\gk}{\TextOrMath{$\kappa$\xspace}{\kappa}}
\newcommand{\gl}{\TextOrMath{$\lambda$\xspace}{\lambda}}
\newcommand{\gm}{\TextOrMath{$\mu$\xspace}{\mu}}
\newcommand{\gn}{\TextOrMath{$\nu$\xspace}{\nu}}
\newcommand{\go}{\TextOrMath{$\omega$\xspace}{\omega}}
\newcommand{\gp}{\TextOrMath{$\pi$\xspace}{\pi}}
\newcommand{\gq}{\TextOrMath{$\theta$\xspace}{\theta}}
\newcommand{\gr}{\TextOrMath{$\varrho$\xspace}{\varrho}}
\newcommand{\gs}{\TextOrMath{$\sigma$\xspace}{\sigma}}
\newcommand{\gt}{\TextOrMath{$\tau$\xspace}{\tau}}
\newcommand{\gu}{\TextOrMath{$\upsilon$\xspace}{\upsilon}}
\newcommand{\gv}{\TextOrMath{$\vartheta$\xspace}{\vartheta}}
\newcommand{\gx}{\TextOrMath{$\xi$\xspace}{\xi}}
\newcommand{\gy}{\TextOrMath{$\psi$\xspace}{\psi}}
\newcommand{\gz}{\TextOrMath{$\gz$\xspace}{\gz}}
\newcommand{\gG}{\TextOrMath{$\Gamma$\xspace}{\Gamma}}
\newcommand{\gD}{\TextOrMath{$\Delta$\xspace}{\Delta}}
\newcommand{\gF}{\TextOrMath{$\Phi$\xspace}{\Phi}}

14.3
A custom command ﬁle
389
\newcommand{\gL}{\TextOrMath{$\Lambda$\xspace}{\Lambda}}
\newcommand{\gO}{\TextOrMath{$\Omega$\xspace}{\Omega}}
\newcommand{\gP}{\TextOrMath{$\Pi$\xspace}{\Pi}}
\newcommand{\gQ}{\TextOrMath{$\Theta$\xspace}{\Theta}}
\newcommand{\gS}{\TextOrMath{$\Sigma$\xspace}{\Sigma}}
\newcommand{\gU}{\TextOrMath{$\Upsilon$\xspace}{\Upsilon}}
\newcommand{\gX}{\TextOrMath{$\Xi$\xspace}{\Xi}}
\newcommand{\gY}{\TextOrMath{$\Psi$\xspace}{\Psi}}
% Bold Greek letters
\newcommand{\bga}{\TextOrMath{$\boldsymbol{\alpha}$\xspace}
{\boldsymbol\alpha}}
\newcommand{\bgb}{\TextOrMath{$\boldsymbol{\beta}$\xspace}
{\boldsymbol\beta}}
\newcommand{\bgc}{\TextOrMath{$\boldsymbol{\chi}$\xspace}
{\boldsymbol\chi}}
\newcommand{\bgd}{\TextOrMath{$\boldsymbol{\delta}$\xspace}
{\boldsymbol\delta}}
\newcommand{\bge}{\TextOrMath{$\boldsymbol{\varepsilon}$\xspace}
{\boldsymbol\varepsilon}}
\newcommand{\bgf}{\TextOrMath{$\boldsymbol{\varphi}$\xspace}
{\boldsymbol\varphi}}
\newcommand{\bgg}{\TextOrMath{$\boldsymbol{\gamma}$\xspace}
{\boldsymbol\gamma}}
\newcommand{\bgh}{\TextOrMath{$\boldsymbol{\eta}$\xspace}
{\boldsymbol\eta}}
\newcommand{\bgi}{\TextOrMath{$\boldsymbol{\iota}$\xspace}
{\boldsymbol\iota}}
\newcommand{\bgk}{\TextOrMath{$\boldsymbol{\kappa}$\xspace}
{\boldsymbol\kappa}}
\newcommand{\bgl}{\TextOrMath{$\boldsymbol{\lambda}$\xspace}
{\boldsymbol\lambda}}
\newcommand{\bgm}{\TextOrMath{$\boldsymbol{\mu}$\xspace}
{\boldsymbol\mu}}
\newcommand{\bgn}{\TextOrMath{$\boldsymbol{\nu}$\xspace}
{\boldsymbol\nu}}
\newcommand{\bgo}{\TextOrMath{$\boldsymbol{\omega}$\xspace}
{\boldsymbol\omega}}
\newcommand{\bgp}{\TextOrMath{$\boldsymbol{\pi}$\xspace}
{\boldsymbol\pi}}
\newcommand{\bgq}{\TextOrMath{$\boldsymbol{\theta}$\xspace}
{\boldsymbol\theta}}

390
Chapter 14
Commands and environments
\newcommand{\bgr}{\TextOrMath{$\boldsymbol{\varrho}$\xspace}
{\boldsymbol\varrho}}
\newcommand{\bgs}{\TextOrMath{$\boldsymbol{\sigma}$\xspace}
{\boldsymbol\sigma}}
\newcommand{\bgt}{\TextOrMath{$\boldsymbol{\tau}$\xspace}
{\boldsymbol\tau}}
\newcommand{\bgu}{\TextOrMath{$\boldsymbol{\upsilon}$\xspace}
{\boldsymbol\upsilon}}
\newcommand{\bgv}{\TextOrMath{$\boldsymbol{\vartheta}$\xspace}
{\boldsymbol\vartheta}}
\newcommand{\bgx}{\TextOrMath{$\boldsymbol{\xi}$\xspace}
{\boldsymbol\xi}}
\newcommand{\bgy}{\TextOrMath{$\boldsymbol{\psi}$\xspace}
{\boldsymbol\psi}}
\newcommand{\bgz}{\TextOrMath{$\boldsymbol{\gz}$\xspace}
{\boldsymbol\gz}}
\newcommand{\bgL}{\TextOrMath{$\boldsymbol{\gL}$\xspace}
{\boldsymbol\gL}}
\newcommand{\bgF}{\TextOrMath{$\boldsymbol{\gF}$\xspace}
{\boldsymbol\gF}}
I also introduce some new names for text font commands by abbreviating text to t (so
that \textbf becomes \tbf) and for math font commands by abbreviating math to m
(so that \mathbf becomes \mbf).
% Font commands
\newcommand{\tbf}{\textbf}% text bold
\newcommand{\tit}{\textit}% text italic
\newcommand{\tsl}{\textsl}% text slanted
\newcommand{\tsc}{\textsc}% text small cap
\newcommand{\ttt}{\texttt}% text typewriter
\newcommand{\trm}{\textrm}% text roman
\newcommand{\tsf}{\textsf}% text sans serif
\newcommand{\tup}{\textup}% text upright
\newcommand{\mbf}{\mathbf}% math bold
\providecommand{\mit}{\mathit}% math italic
\newcommand{\msf}{\mathsf}% math sans serif
\newcommand{\mrm}{\mathrm}% math roman
\newcommand{\mtt}{\mathtt}% math typewriter
The math alphabets are invoked as commands with arguments: \Bold for bold, \Cal
for calligraphic, \DD for blackboard bold (double), and \Frak for fraktur (German

14.3
A custom command ﬁle
391
Gothic—see Section 6.4.2. Notice that \Cal and \Euler are diﬀerent because of the
option mathscr of the eucal package (see Section 6.4.1).
\newcommand{\B}{\boldsymbol}
% Bold math symbol, use as \B{a}
\newcommand{\C}[1]{\mathcal{#1}}
% Euler Script - only caps, use as \C{A}
\newcommand{\D}[1]{\mathbb{#1}}
% Doubled - blackboard bold - only caps, use as \D{A}
\newcommand{\E}[1]{\mathcal{#1}}% same as \C
% Euler Script - only caps, use as \E{A}
\newcommand{\F}[1]{\mathfrak{#1}}% Fraktur, use as \F{a}
%Sansserif, special lattices
%Chains and Boolean lattces
\newcommand{\SC}[1]{\msf{C}_{#1}}
\newcommand{\SB}[1]{\msf{B}_{#1}}
\newcommand{\SD}[1]{\msf{D}_{#1}}
\newcommand{\SL}[1]{\msf{L}_{#1}}
\newcommand{\SM}[1]{\msf{M}_{#1}}
\newcommand{\SMb}[1]{\msf{M}_{3}[#1]_\text{bal}}
\newcommand{\SN}[1]{\msf{N}_{#1}}
\newcommand{\SH}[1]{\msf{H}_{#1}}
\newcommand{\SV}[1]{\msf{V}_{#1}}
\newcommand{\SfC}[1]{\msf{C}_{#1}}
\newcommand{\SfB}[1]{\msf{B}_{#1}}
\newcommand{\SfM}[1]{\msf{M}_{#1}}
\newcommand{\SfN}[1]{\msf{N}_{#1}}
\newcommand{\SfS}[1]{\msf{S}_{#1}}
Here are some commands of importance in lattice theory:
% Constructs
\DeclareMathOperator{\Id}{Id}
\DeclareMathOperator{\Fi}{Fi{}l}
\DeclareMathOperator{\Con}{Con}
\DeclareMathOperator{\Aut}{Aut}
\DeclareMathOperator{\Sub}{Sub}
\DeclareMathOperator{\Pow}{Pow}
\DeclareMathOperator{\Part}{Part}
\DeclareMathOperator{\Ker}{Ker}
\DeclareMathOperator{\Joinir}{Join}

392
Chapter 14
Commands and environments
\DeclareMathOperator{\Meetir}{Meet}
\DeclareMathOperator{\Down}{Down}
\DeclareMathOperator{\Ji}{Ji}
\DeclareMathOperator{\Mi}{Mi}
% Generated by
\newcommand{\con}[1]{\tup{con}(#1)}
\newcommand{\consub}[2]{\tup{con}_{#1}(#2)}
\newcommand{\sub}[1]{\tup{sub}(#1)}
\newcommand{\id}[1]{\tup{id}(#1)}
\newcommand{\fil}[1]{\tup{f{}il}(#1)}
% Miscellaneous
\newcommand{\nl}{\newline}
\newcommand{\ol}[1]{\overline{#1}}
\newcommand{\ul}[1]{\underline{#1}}
\providecommand{\bysame}{\makebox[3em]{\hrulefill}\thinspace}
\newcommand{\q}{\quad}% spacing
\newcommand{\qq}{\qquad}% more spacing
\newcommand{\iso}{\cong}% isomorphic
\newenvironment{enumeratei}{\begin{enumerate}[\upshape (i)]}%
{\end{enumerate}}
%produces (i), (ii), etc. Cross-reference with \eqref.
\newenvironment{enumeratea}{\begin{enumerate}[\upshape (a)]}%
{\end{enumerate}}
%produces (a), (b), etc. Cross-reference with \eqref.
\theoremstyle{plain}
\newtheorem*{namedtheorem}{\theoremname}
\newcommand{\theoremname}{testing}
\newenvironment{named}[1]{\renewcommand{\theoremname}{#1}
\begin{namedtheorem}}
{\end{namedtheorem}}
%use it as \begin{named}{Name of theorem}
%Body of theorem \end{named}
\newcommand{\Dg}{\downarrow\!}% down-set generated by congruences
\newcommand{\per}{\sim}% perspective ~
\newcommand{\pu}{\stackrel{\textrm{u}}{\sim}}
% perspective up ~ with u on top
\newcommand{\pd}{\stackrel{\textrm{d}}{\sim}}
% perspective down ~ with d on top
\newcommand{\proj}{\approx}% projective

14.3
A custom command ﬁle
393
\newcommand{\cpu}{\nearrow}
% congruence perspective up -- up arrow
\newcommand{\cpd}{\searrow}
% congruence perspective down -- down arrow
\newcommand{\cper}{\hookrightarrow}
% congruence perspective onto-- hooked right arrow
\newcommand{\cproj}{\Rightarrow}
% congruence projective into -- double headed arrow
\newcommand{\cprojboth}{\Leftrightarrow}
% congruence projective both ways
%-- two headed double arrow
%perspective
\newcommand{\perspsymb}{\thicksim}% perspective symbol
\newcommand{\persp}{\perspsymb}% perspective
\newcommand{\perspup}{\stackrel{\textrm{up}}{\perspsymb}}
% perspective up
\newcommand{\perspdn}{\stackrel{\textrm{dn}}{\perspsymb}}
% perspective down
% c-perspective
\newcommand{\cperspsymb}{\hookrightarrow}
% c-perspective symbol
\newcommand{\cpersp}{\cperspsymb}% c-perspective
\newcommand{\cperspup}{\stackrel{\textrm{up}}{\cperspsymb}}
% c-perspective up
\newcommand{\cperspdn}{\stackrel{\textrm{dn}}{\cperspsymb}}
% c-perspective dn
\newcommand{\lp}{\tup{(}}
\newcommand{\rp}{\tup{)}\xspace}
\newcommand{\up}[1]{\tup{(}#1\tup{)}}
\newcommand{\one}{\mathbf{1}}
\newcommand{\zero}{\mathbf{0}}
\newcommand{\restr}{\rceil}
\def\cng#1=#2(#3){#1\equiv#2\pmod{#3}}
%congruence, use it as \cng a=b(\theta)%
\def\cngd#1=#2(#3){#1\equiv#2\!\pmod{#3}}
%congruence for display, use it as \cngd a=b(\theta)%
\def\ncng#1=#2(#3){#1\not\equiv#2\pmod{#3}}
%negate cng

394
Chapter 14
Commands and environments
\def\ncngd#1=#2(#3){#1\not\equiv#2\!\pmod{#3}}
%negate dcng
\endinput
See Section 14.1.9 for the \congr command. The enumeratei and named environ-
ments are discussed in Section 14.2.1. The enumeratea environment is similar.
This command ﬁle, like all command ﬁles, is terminated with the \endinput com-
mand. In Section 17.3.2, we discuss the same rule for ﬁles that are \include-d.
My newlattice.sty evolves with time. I keep a copy in the folder of every
article I write. This way, even years later, with the command ﬁle changed, I can typeset
the article with no problem.
The \TextOrMath command (see Section 10.3) is very useful for command ﬁles.
For instance, we can use it to deﬁne our Greek letters, such as
\newcommand{\ga}{\TextOrMath{$\alpha$}{\alpha}}
Then we can use \ga both in text and math to produce 𝛼.
14.4
The sample article with custom commands
In this section, we look at the secondarticleccom.tex sample article, which is a
rewrite of the secondarticle.tex sample article utilizing the custom commands col-
lected in the command ﬁle newlattice.sty (for these ﬁles, see Section 14.3 and the
samples folder).
% Sample file: secondarticleccom.tex
% The sample article with custom commands and environments
\documentclass{amsart}
\usepackage{newlattice}
\theoremstyle{plain}
\newtheorem{theorem}{Theorem}
\newtheorem{corollary}{Corollary}
\newtheorem{lemma}{Lemma}
\newtheorem{proposition}{Proposition}
\theoremstyle{definition}
\newtheorem{definition}{Definition}
\theoremstyle{remark}
\newtheorem*{notation}{Notation}

14.4
The sample article with custom commands
395
\numberwithin{equation}{section}
\newcommand{\Prodm}[2]{\GrP(\,#1\mid#2\,)}
% product with a middle
\newcommand{\Prodsm}[2]{\GrP^{*}(\,#1\mid#2\,)}
% product * with a middle
\newcommand{\vectsup}[2]{\vect<\dots,0,\dots,\overset{#1}{#2},%
\dots,0,\dots>}% special vector
\newcommand{\Dsq}{D^{\langle2\rangle}}
\begin{document}
\title[Complete-simple distributive lattices]
{A construction of complete-simple\\
distributive lattices}
\author{George~A. Menuhin}
\address{Computer Science Department\\
University of Winnebago\\
Winnebago, Minnesota 23714}
\email{menuhin@ccw.uwinnebago.edu}
\urladdr{http://math.uwinnebago.edu/homepages/menuhin/}
\thanks{Research supported by the NSF under grant number~23466.}
\keywords{Complete lattice, distributive lattice, complete
congruence, congruence lattice}
\subjclass[2000]{Primary: 06B10; Secondary: 06D05}
\date{March 15, 2006}
\begin{abstract}
In this note we prove that there exist \emph{complete-simple
distributive lattices,} that is, complete distributive
lattices in which there are only two complete congruences.
\end{abstract}
\maketitle
\section{Introduction}\label{S:intro}
In this note we prove the following result:
\begin{named}{Main Theorem}
There exists an infinite complete distributive lattice
$K$ with only the two trivial complete congruence relations.
\end{named}
\section{The $\Dsq$ construction}\label{S:Ds}
For the basic notation in lattice theory and universal algebra,

396
Chapter 14
Commands and environments
see Ferenc~R. Richardson~\cite{fR82} and George~A.
Menuhin~\cite{gM68}. We start with some definitions:
\begin{definition}\label{D:prime}
Let $V$ be a complete lattice, and let $\Frak{p} = [u, v]$ be
an interval of $V$. Then $\Frak{p}$ is called
\emph{complete-prime} if the following three conditions
are satisfied:
\begin{enumeratei}
\item $u$ is meet-irreducible but $u$ is \emph{not}
completely meet-irreducible;\label{m-i}
\item $v$ is join-irreducible but $v$ is \emph{not}
completely join-irreducible;\label{j-i}
\item $[u, v]$ is a complete-simple lattice.\label{c-s}
\end{enumeratei}
\end{definition}
Now we prove the following result:
\begin{lemma}\label{L:Dsq}
Let $D$ be a complete distributive lattice satisfying
conditions \itemref{m-i} and~\itemref{j-i}.
Then $\Dsq$ is a sublattice of $D^{2}$; hence $\Dsq$ is
a lattice, and $\Dsq$ is a complete distributive lattice
satisfying conditions \itemref{m-i} and~\itemref{j-i}.
\end{lemma}
\begin{proof}
By conditions~\itemref{m-i} and \itemref{j-i}, $\Dsq$ is a
sublattice of $D^{2}$. Hence, $\Dsq$ is a lattice.
Since $\Dsq$ is a sublattice of a distributive lattice,
$\Dsq$ is a distributive lattice. Using the characterization
of standard ideals in Ernest~T. Moynahan~\cite{eM57},
$\Dsq$ has a zero and a unit element, namely,
$\vect<0, 0>$ and $\vect<1, 1>$. To show that $\Dsq$ is
complete, let $\empset \ne A \contd \Dsq$, and let $a = \JJ A$
in $D^{2}$. If $a \in \Dsq$, then
$a = \JJ A$ in $\Dsq$; otherwise, $a$ is of the form
$\vect<b, 1>$ for some $b \in D$ with $b < 1$. Now
$\JJ A = \vect<1, 1>$ in $D^{2}$, and
the dual argument shows that $\MM A$ also exists in

14.4
The sample article with custom commands
397
$D^{2}$. Hence $D$ is complete. Conditions \itemref{m-i}
and~\itemref{j-i} are obvious for $\Dsq$.
\end{proof}
\begin{corollary}\label{C:prime}
If $D$ is complete-prime, then so is $\Dsq$.
\end{corollary}
The motivation for the following result comes from Soo-Key
Foo~\cite{sF90}.
\begin{lemma}\label{L:ccr}
Let $\gQ$ be a complete congruence relation of $\Dsq$ such
that
\begin{equation}\label{E:rigid}
\congr \vect<1, d>=\vect<1, 1>(\gQ),
\end{equation}
for some $d \in D$ with $d < 1$. Then $\gQ = \gi$.
\end{lemma}
\begin{proof}
Let $\gQ$ be a complete congruence relation of $\Dsq$
satisfying \itemref{E:rigid}. Then $\gQ = \gi$.
\end{proof}
\section{The $\gp^{*}$ construction}\label{S:P*}
The following construction is crucial to our proof of the
Main~Theorem:
\begin{definition}\label{D:P*}
Let $D_{i}$, for $i \in I$, be complete distributive
lattices satisfying condition~\itemref{j-i}. Their $\gp^{*}$
product is defined as follows:
\[
\Prodsm{ D_{i} }{i \in I} = \Prodm{ D_{i}^{-} }{i \in I}+1;
\]
that is, $\Prodsm{ D_{i} }{i \in I}$ is
$\Prodm{ D_{i}^{-} }{i \in I}$ with a new unit element.
\end{definition}
\begin{notation}
If $i \in I$ and $d \in D_{i}^{-}$, then

398
Chapter 14
Commands and environments
\[
\vectsup{i}{d}
\]
is the element of $\Prodsm{ D_{i} }{i \in I}$ whose
$i$-th component is $d$ and all the other
components are $0$.
\end{notation}
See also Ernest~T. Moynahan~\cite{eM57a}. Next we verify:
\begin{theorem}\label{T:P*}
Let $D_{i}$, for $i \in I$, be complete distributive
lattices satisfying condition~\itemref{j-i}. Let $\gQ$
be a complete congruence relation on
$\Prodsm{ D_{i} }{i \in I}$. If there exist
$i \in I$ and $d \in D_{i}$ with $d < 1_{i}$ such
that for all $d \leq c < 1_{i}$,
\begin{equation}\label{E:cong1}
\congr\vectsup{i}{d}=\vectsup{i}{c}(\gQ),
\end{equation}
then $\gQ = \gi$.
\end{theorem}
\begin{proof}
Since
\begin{equation}\label{E:cong2}
\congr\vectsup{i}{d}=\vectsup{i}{c}(\gQ),
\end{equation}
and $\gQ$ is a complete congruence relation, it follows
from condition~\itemref{c-s} that
\begin{equation}\label{E:cong}
\begin{split}
&\langle \dots, \overset{i}{d}, \dots, 0,
\dots \rangle\\
&\equiv \bigvee ( \langle \dots, 0, \dots,
\overset{i}{c},\dots, 0,\dots \rangle \mid d \leq c < 1)
\equiv 1 \pmod{\Theta}.
\end{split}
\end{equation}
Let $j \in I$, for $j \neq i$, and let
$a \in D_{j}^{-}$. Meeting both sides of the congruence

14.4
The sample article with custom commands
399
\itemref{E:cong} with $\vectsup{j}{a}$, we obtain
\begin{equation}\label{E:comp}
\begin{split}
0 &= \vectsup{i}{d} \mm \vectsup{j}{a}\\
&\equiv \vectsup{j}{a}\pod{\gQ}.
\end{split}
\end{equation}
Using the completeness of $\gQ$ and \itemref{E:comp}, we get:
\begin{equation}\label{E:cong3}
\congr{0=\JJm{ \vectsup{j}{a} }{ a \in D_{j}^{-} }}={1}(\gQ),
\end{equation}
hence $\gQ = \gi$.
\end{proof}
\begin{theorem}\label{T:P*a}
Let $D_{i}$, for $i \in I$, be complete distributive
lattices satisfying
conditions \itemref{j-i} and~\itemref{c-s}. Then
$\Prodsm{ D_{i} }{i \in I}$ also satisfies
conditions~\itemref{j-i} and \itemref{c-s}.
\end{theorem}
\begin{proof}
Let $\gQ$ be a complete congruence on
$\Prodsm{ D_{i} }{i \in I}$. Let $i \in I$. Define
\begin{equation}\label{E:dihat}
\widehat{D}_{i} = \setm{ \vectsup{i}{d} }{ d \in D_{i}^{-} }
\uu \set{1}.
\end{equation}
Then $\widehat{D}_{i}$ is a complete sublattice of
$\Prodsm{ D_{i} }{i \in I}$, and $\widehat{D}_{i}$
is isomorphic to $D_{i}$. Let $\gQ_{i}$ be the
restriction of $\gQ$ to $\widehat{D}_{i}$. Since
$D_{i}$ is complete-simple, so is $\widehat{D}_{i}$,
hence $\gQ_{i}$ is $\go$ or $\gi$. If $\gQ_{i} = \go$
for all $i \in I$, then $\gQ = \go$.
If there is an $i \in I$, such that $\gQ_{i} = \gi$,
then $\congr0=1(\gQ)$, and hence $\gQ = \gi$.
\end{proof}
The Main Theorem follows easily from Theorems~\ref{T:P*} and
\ref{T:P*a}.

400
Chapter 14
Commands and environments
\begin{thebibliography}{9}
\bibitem{sF90}
Soo-Key Foo, \emph{Lattice Constructions}, Ph.D. thesis,
University of Winnebago, Winnebago, MN, December, 1990.
\bibitem{gM68}
George~A. Menuhin, \emph{Universal algebra}. D.~van
Nostrand, Princeton, 1968.
\bibitem{eM57}
Ernest~T. Moynahan, \emph{On a problem of M. Stone},
Acta Math. Acad. Sci. Hungar. \tbf{8} (1957), 455--460.
\bibitem{eM57a}
\bysame, \emph{Ideals and congruence relations in
lattices}.~II, Magyar Tud. Akad. Mat. Fiz. Oszt. K\"{o}zl.
\tbf{9} (1957), 417--434
(Hungarian).
\bibitem{fR82}
Ferenc~R. Richardson, \emph{General lattice theory}. Mir,
Moscow, expanded and revised ed., 1982 (Russian).
\end{thebibliography}
\end{document}
14.5
Numbering and measuring
LATEX stores integers in counters. For example, the section counter contains the cur-
rent section number. Distance measurements are saved in length commands. For in-
stance, the \textwidth command contains the width of the text. For this book, the
length command \textwidth is set to 345.0 points.
In this section, we take a closer look at counters and length commands.
14.5.1
Counters
Counters may be deﬁned by LATEX, by document classes, by packages, or by the user.
Standard LATEX counters
LATEX automatically generates numbers for equations, sections, theorems, and so on.
Each such number is stored in a counter. Table 14.2 shows the standard LATEX counters.
Their names are more or less self-explanatory. In addition, for every proclamation name,
there is a matching counter called name (see Section 4.4).

14.5
Numbering and measuring
401
Setting counters
The command for setting a counter’s value is \setcounter. When LATEX generates a
number, it ﬁrst increments the appropriate counter, so if you want the next chapter to
be numbered 3, you should set the chapter counter to 2 by typing
\setcounter{chapter}{2}
before the \chapter command. The only exception to this rule is the page number,
which is ﬁrst used to number the current page, and then incremented. If you wanted to
set the current page number to 63, you would include the command
\setcounter{page}{63}
somewhere in the page.
LATEX initializes and increments its standard counters automatically. Sometimes
you may want to manipulate them yourself. To typeset only chapter3.tex, the third
chapter of your book, start with
\setcounter{chapter}{2}
\include{chapter3}
and when chapter3.tex is typeset, the chapter is properly numbered. You can also
type
\setcounter{page}{63}
if the ﬁrst page of this chapter is supposed to be 63. Of course, the preferred way
to typeset parts of a larger document is with the \includeonly command (see Sec-
tion 17.3.2).
Tip
If you need to manipulate counters, always look for solutions in which LATEX does the
work for you.
Deﬁning new counters
You can deﬁne your own counters. For example,
\newcounter{mycounter}
makes mycounter a new counter. In the deﬁnition, you can use an optional argument,
the name of another counter:
\newcounter{mycounter}[basecounter]

402
Chapter 14
Commands and environments
equation
part
enumi
figure
chapter
enumii
footnote
section
enumiii
mpfootnote
subsection
enumiv
page
subsubsection
table
paragraph
subparagraph
Table 14.2: Standard LATEX counters.
Style
Command
Sample
Arabic
\arabic{counter }
1, 2, . . .
Lowercase Roman
\roman{counter }
i, ii, . . .
Uppercase Roman
\Roman{counter }
I, II, . . .
Lowercase Letters
\alph{counter }
a, b, . . . , z
Uppercase Letters
\Alph{counter }
A, B, . . . , Z
Table 14.3: Counter styles.
which automatically resets mycounter to 0 if basecounter changes value. This com-
mand has the same form as the command LATEX uses internally for tasks such as num-
bering theorems and subsections within sections.
Rule
New counters
New counters should be deﬁned in the preamble of the document. They should not be
deﬁned in a ﬁle read in with an \include command (see Section 17.3.2).
Let us suppose that you deﬁne a new counter, mycounter, in chapter5.tex, which
is made part of your whole document with an \include command. When you typeset
your document with \includeonly commands not including chapter5.tex, you get
a message, such as
! LaTeX Error: No counter ’mycounter’ defined.
Counter styles
The value of counter can be displayed in the typeset document with the command
\thecounter

14.5
Numbering and measuring
403
If you want to change the counter’s appearance when typeset, issue the command
\renewcommand{\thecounter }{new_style }
where new_style speciﬁes the counter modiﬁed as shown in Table 14.3. The default
style is arabic. For instance, if you give the command
\renewcommand{\thetheorem}{\Alph{theorem}}
then the theorems appear as Theorem A, Theorem B, ...
Here is a more complicated example for a book:
\renewcommand{\thechapter}{\arabic{chapter}}
\renewcommand{\thesection}{\thechapter-\arabic{section}}
\renewcommand{\thesubsection}
{\thechapter-\arabic{section}.\arabic{subsection}}
With these deﬁnitions, Section 1 of Chapter 3 is numbered in the form 3-1 and Subsec-
tion 2 of Section 1 of Chapter 3 is numbered in the form 3-1.2.
The \pagenumbering command is a shorthand method for setting the page num-
bering in a given style. For instance, \pagenumbering{roman} numbers pages as i,
ii, and so on.
The subequations environment (see Section 6.6) uses parentequation as the
counter for the whole equation group and it uses equation as the counter for the sube-
quations. To change the default format of the equation numbers from (2a), (2b), and
so forth, to (2i), (2ii), and so on, type the following line inside the subequations
environment
\renewcommand{\theequation}
{\theparentequation\roman{equation}}
If you want equation numbers like (2.i), (2.ii), and so on, type
\renewcommand{\theequation}%
{\theparentequation.\roman{equation}}
Counter arithmetic
The \stepcounter{counter} command increments counter and sets all the coun-
ters that were deﬁned with the optional argument counter to 0. The variant
\refstepcounter{counter}
does the same, and also sets the value for the next \label command.
You can do some arithmetic with the command
\addtocounter{counter }{n }

404
Chapter 14
Commands and environments
where n is an integer. For example,
\setcounter{counter}{5}
\addtocounter{counter}{2}
sets counter to 7.
The value stored in a counter can be accessed using the \value command, which
is mostly used with the \setcounter or \addtocounter commands. For instance,
you can set counter to equal the value of another counter, oldcounter, by typing
\setcounter{counter}{\value{oldcounter}}
Here is a typical example of counter manipulation. You have a theorem (invoked
in a theorem environment) and you want it followed by several corollaries (each in
a corollary environment) starting with Corollary 1. In other words, Theorem 1
should be followed by Corollary 1, Corollary 2, and so forth and so should Theo-
rem 3. By default, LATEX numbers the next corollary as Corollary 3, even if it follows
another theorem. To tell LATEX to start numbering the corollaries from 1 again, issue
the command
\setcounter{corollary}{0}
after each theorem. But such a process is error-prone, and goes against the spirit of LATEX.
Instead, follow my advice on page 401, and let LATEX do the work for you. In the
preamble, type the proclamations
\newtheorem{theorem}{Theorem}
\newtheorem{corollary}{Corollary}[theorem]
We are almost there. Theorem 1 now is followed by Corollary 1.1, Corollary 1.2 and
Theorem 3 by Corollary 3.1. If we redeﬁne \thecorollary,
\renewcommand{\thecorollary}{\arabic{corollary}}
then Theorem 1 is followed by Corollary 1 and Corollary 2, and Theorem 3 is also
followed by Corollary 1.
If you need to perform more complicated arithmetic with counters, use Kresten K.
Thorup and Frank Jensen’s calc package (see Section 10.3.1). This package is dis-
cussed in Section A.3.1 of The LATEX Companion, 2nd edition [56].
Two special counters
The secnumdepth and tocdepth counters control which sectional units are numbered
and which are listed in the table of contents, respectively. For example,
\setcounter{secnumdepth}{2}
sets secnumdepth to 2. As a result, chapters—if they are present in the document
class—sections, and subsections are numbered, but subsubsections are not. This com-
mand must be placed in the preamble of the document. tocdepth is similar.

14.5
Numbering and measuring
405
14.5.2
Length commands
While a counter contains integers, a length command contains a real number and a
dimensional unit.
LATEX recognizes many diﬀerent dimensional units. We list ﬁve absolute units:
cm centimeter
in inch
pc pica (1 pc = 12 pt)
tip point (1 in = 72.27 pt)
mm millimeter
and two relative units:
em, approximately the width of the letter M in the current font
ex, approximately the height of the letter x in the current font
LATEX deﬁnes many length commands. For instance, Section 4.1 of The LATEX
Companion, 2nd edition [56] lists 17 length commands for page layout alone. You can
ﬁnd some of them in Figure 8.4. A list environment sets about a dozen additional length
commands (see Figure 14.2). Length commands are deﬁned for almost every aspect of
LATEX’s work, including displayed math environments—a complete list would probably
contain a few hundred. Many are listed in Leslie Lamport’s LATEX: A Document Prepa-
ration System, 2nd edition [53] and in The LATEX Companion, 2nd edition [56]. Many
more are hidden in packages such as amsmath.
The most common length commands are:
\parindent, the amount of indentation at the beginning of a paragraph
\parskip, the extra vertical space inserted between paragraphs
\textwidth, the width of the text on a page
A more esoteric example is \marginparpush, the minimum vertical space between two
marginal notes. Luckily, you do not have to be familiar with many length commands
because LATEX and the document class set them for you.
Deﬁning new length commands
You can deﬁne your own length commands. For example,
\newlength{\mylength}
makes \mylength a new length command with a value of 0 points. Note that while
you have to type

406
Chapter 14
Commands and environments
\newcounter{counter}
to get a new counter, typing
\newlength{mylength}
results in a message such as
! Missing control sequence inserted.
<inserted text>
\inaccessible
l.3 \newlength{mylength}
Setting length
The \setlength command sets or resets the value of a length command. So
\setlength{\textwidth}{3in}
creates a very narrow page. The ﬁrst argument of \setlength must be a length com-
mand, not simply the command name, that is
\setlength{textwidth}{3in} % Bad
is incorrect. The second argument of \setlength must be a real number with a di-
mensional unit, for instance, 3in, and not simply a real number. In other words,
\setlength{\textwidth}{3} % Bad
is also incorrect. You can also use \setlength as an environment, as in Section 7.3.
Tip
A common mistake is to type a command such as
\setlength{\marginpar}{0}
Instead, type
\setlength{\marginpar}{0pt}
Always be sure to include a dimensional unit.
The \addtolength command adds a quantity to the value of a length command.
For instance,
\addtolength{\textwidth}{-10pt}
narrows the page width by 10 points.

14.5
Numbering and measuring
407
If you deﬁne
\newlength{\shorterlength}
\setlength{\shorterlength}{\mylength}
\addtolength{\shorterlength}{-.5in}
then \parbox{\shorterlength}{...} always typesets its second argument in a box
1/2 inch narrower than the parboxes set to be of width \mylength.
When LATEX typesets some text or math, it creates a box. Three measurements are
used to describe the size of the box:
the width
the height, from the baseline to the top
the depth, from the baseline to the bottom
as illustrated in Figure 14.1. For instance, the box typesetting “aa” has a width of
10.00003 pt, a height of 4.30554 pt, and a depth of 0 pt. The box typesetting “ag” has
the same width and height, but a depth of 1.94444 pt. The box “Ag” (see Figure 14.1)
has a width of 12.50003 pt, a height of 6.83331 pt, and a depth of 1.94444 pt.
The commands
\settowidth
\settoheight
\settodepth
each take two arguments. The ﬁrst argument is a length command, the second is text (or
math) to be measured by LATEX. The corresponding measurement of the box in which
the second argument is typeset is assigned to the length command in the ﬁrst argument.
For example, if \mylength is a length command, then
\settowidth{\mylength}{Ag}
assigns 12.50003 pt to \mylength. It should be clear from this example how the
\phantom and \hphantom commands (see Section 3.8.1) are related to this command.
To perform more complicated arithmetic with length commands, use the calc
package.
Figure 14.1: The measurements of a box.

408
Chapter 14
Commands and environments
Rubber lengths
In addition to rigid lengths, such as 3in, LATEX can also set rubber lengths, that is,
lengths that are allowed to stretch and shrink. Here is an example:
\setlength{\stretchspace}{3in plus 10pt minus 8pt}
Assuming that \stretchspace is a length command, this command assigns it a value
of 3 inches that can stretch by 10 points or shrink by 8 points, if necessary. So a box of
width \stretchspace is 3 inches wide, plus up to 10 points, or minus up to 8 points.
Stretchable vertical spaces are often used before and after displayed text environ-
ments. LATEX adjusts these spaces to make the page look balanced. An example can be
found in Section 14.1.8. \medskipamount is deﬁned as
6.0pt plus 2.0pt minus 2.0pt
See Section 14.6.3 for more examples.
The \fill command is a special rubber length that can stretch any amount. The
stretching is done evenly if there is more than one \fill present. See the second ex-
ample of brand-new environments in Section 14.2.5.
14.6
Custom lists
Although there are three ready-made list environments provided by LATEX (see Sec-
tion 4.2), it is often necessary to create one of your own using LATEX’s list environ-
ment. In fact, LATEX itself uses the list environment to deﬁne many of its standard
environments, including:
The three list environments (Section 4.2)
The quote, quotation, and verse environments (Section 4.8)
Proclamations (Section 4.4)
The style environments center, flushleft, and flushright (Section 4.3)
The thebibliography environment (Section 8.5.1)
The theindex environment (Section 8.5.2)
14.6.1
Length commands for the list environment
The general layout of a list is shown in Figure 14.2. It uses six horizontal measurements
and three vertical measurements. I now list these length commands.

14.6
Custom lists
409
Surrounding text
Surrounding text
Item 1
paragraph 1
Item 1
paragraph 2
Item 2
paragraph 1
\itemindent
\labelsep
\labelwidth
\leftmargin
\rightmargin
\topsep+\parskip
\parsep
\listparindent
\itemsep+\parsep
label
label
\topsep+\parskip
Figure 14.2: The layout of a custom list.

410
Chapter 14
Commands and environments
Vertical length commands
\topsep is most of the vertical space between the ﬁrst item and the preceding text,
and also between the last item and the following text. This space also includes
\parskip, the extra vertical space inserted between paragraphs, and optionally,
\partopsep, provided that the list environment starts a new paragraph.
\parsep is the space between paragraphs of the same item.
\itemsep is the space between items. Like \topsep, the actual gap is the sum of
\itemsep and \parsep.
All of these vertical length commands are rubber lengths (see Section 14.5.2).
Horizontal length commands
By default, the margins of a list environment are the same as the margins of the sur-
rounding text. If the list is nested within a list, the margins are wider and so the text is
narrower.
The \leftmargin and \rightmargin length commands specify the distance
between the edge of the item box and the left and right margins of the page.
The label is the text provided by the optional argument of an \item command
or provided as a default in the deﬁnition of the list environment. It is typeset in a box of
width \labelwidth, which is indented \itemindent units from the left margin, and
separated by a space of \labelsep units from the text box. If the label is too wide to
ﬁt in the box, it is typeset at its full natural width, and the ﬁrst line in the text box is
indented.
The second and subsequent paragraphs of an item are typeset with their ﬁrst lines
indented by \listparindent units.
14.6.2
The list environment
Custom lists are created with the list environment, which is invoked as follows:
\begin{list}{default_label }{declarations }
\item item1
\item item2
...
\end{list}
The arguments are
default_label, the label for any items that do not specify their own, similar to the
optional argument of the \item command
declarations, the vertical and horizontal length commands and any other required
parameters for the list

14.6
Custom lists
411
Here is a very simple example:
Here are the most important LATEX rules about spaces in text, sentences, and
paragraphs:
♢Rule 1: Two or more spaces in text are the same as one.
♢Rule 2: A blank line (that is, two end-of-line characters sepa-
rated only by blanks and tabs) indicates the end of a paragraph.
Rules 1 and 2 make typing and copying very convenient.
I have used the ♢math symbol ($\diamondsuit$) as a default label, and I set the item
box 0.5 inch from either margin. So this example is typed as follows:
\noindent Here are the most important \la\ rules about
spaces in text, sentences, and paragraphs:
\begin{list}{$\diamondsuit$}{\setlength{\leftmargin}%
{.5in}\setlength{\rightmargin}{.5in}}
\item \textbf{Rule 1:} Two or more spaces in text
are the same as one.
\item \textbf{Rule 2:} A blank line (that is, two
end-of-line characters separated only by blanks and tabs)
indicates the end of a paragraph.
\end{list}
Rules 1 and~2 make typing and copying very convenient.
Here is a second variant:
Here are the most important LATEX rules about spaces in text, sentences, and
paragraphs:
Rule 1: Two or more consecutive spaces in text are the same as one.
Rule 2: A blank line (that is, two end-of-line characters separated
only by blanks and tabs) indicates the end of a paragraph.
Rules 1 and 2 make typing and copying very convenient.
In this example, I dropped the optional default_label and typed Rule 1: and Rule 2:
as (optional) arguments of the \item commands:
\noindent Here are the most important \la\ rules about
spaces in text, sentences, and paragraphs:
\begin{list}{}{\setlength{\leftmargin}{.5in}%
\setlength{\rightmargin}{.5in}}

412
Chapter 14
Commands and environments
\item[\textbf{Rule 1:}] Two or more consecutive spaces in
text are the same as one.
\item[\textbf{Rule 2:}] A blank line (that is,
two end-of-line characters separated only by blanks and
tabs) indicates the end of a paragraph.
\end{list}
Rules 1 and~2 make typing and copying very convenient.
For further simple examples, you can look at various document class ﬁles to see how
standard environments such as verse, quote, and so on, are deﬁned.
Using counters
It is not very LATEX-like to provide the numbers for the rules in the examples above.
It would be more logical for LATEX to do the numbering. The following is a more LATEX-
like coding of the second example:
\noindent Here are the most important \la\ rules about
spaces in text, sentences, and paragraphs:
\newcounter{spacerule}
\begin{list}{\textbf{Rule \arabic{spacerule}:}}
{\setlength{\leftmargin}{.5in}
\setlength{\rightmargin}{.5in}
\usecounter{spacerule}}
\item Two or more consecutive spaces in text are the
same as one.\label{Li:Twoor}
\item A blank line (that is, two end-of-line
characters separated only by blanks and tabs)
indicates the end of a paragraph. \label{Li:blankline}
\end{list}
Rules \ref{Li:Twoor} and~\ref{Li:blankline} make typing
and copying very convenient.
Note that
1. I declared the counter before the list environment with the line
\newcounter{spacerule}
2. I deﬁned the default_label as
\textbf{Rule \arabic{spacerule}:}
3. In the declarations, I speciﬁed that the list should use the spacerule counter
with the command
\usecounter{spacerule}

14.6
Custom lists
413
14.6.3
Two complete examples
In the previous examples, I set the values of \leftmargin and \rightmargin. The
other length commands were not redeﬁned, so their values remained the values set by
the document class. In the following examples, I set the values of many more length
commands.
Example 1
To get the following list,
Here are the most important LATEX rules about spaces in text, sentences, and
paragraphs:
Rule 1:
Two or more consecutive spaces in text are
the same as one.
Rule 2:
A blank line—that is, two end-of-line char-
acters separated only by blanks and tabs—
indicates the end of a paragraph.
Rules 1 and 2 make typing and copying very convenient.
we type
\noindent Here are the most important \la\ rules about
spaces in text, sentences, and paragraphs:
\newcounter{spacerule}
\begin{list}{\upshape\bfseries Rule \arabic{spacerule}:}
{\setlength{\leftmargin}{1.5in}
\setlength{\rightmargin}{0.6in}
\setlength{\labelwidth}{1.0in}
\setlength{\labelsep}{0.2in}
\setlength{\parsep}{0.5ex plus 0.2ex
minus 0.1ex}
\setlength{\itemsep}{0ex plus 0.2ex
minus 0ex}
\usecounter{spacerule}
\itshape}
\item Two or more consecutive spaces in text are the
same as one.\label{Li:Twoor}
\item A blank line---that is, two end-of-line
characters separated only by blanks and
tabs---indicates
the end of a paragraph.\label{Li:blankline}
\end{list}
Rules \ref{Li:Twoor} and~\ref{Li:blankline} make typing
and copying very convenient.

414
Chapter 14
Commands and environments
Note that
1. I declared the counter as in the previous example.
2. The last item in declarations is \itshape, which typesets the entire list in italics.
3. The default_label is deﬁned as
\upshape\bfseries Rule \arabic{spacerule}
My ﬁrst attempt was to deﬁne it as
\bfseries Rule \arabic{spacerule}
which typesets Rule in bold italics (because in Step 2 we set the whole list in ital-
ics). To force the label to be typeset upright, I start the default_label with the
\upshape command.
4. The left margin is set to 1.5 inches and the right margin to 0.6 inches:
\setlength{\leftmargin}{1.5in}
\setlength{\rightmargin}{0.6in}
5. Next I set the width of the label to 1 inch, and the space between the label and the
item to 0.2 inches:
\setlength{\labelwidth}{1.0in}
\setlength{\labelsep}{0.2in}
6. Finally, I set the paragraph separation to 0.5 ex, allowing stretching by 0.2 ex and
shrinking by 0.1 ex, and the item separation to 0 ex, allowing stretching by 0.2 ex
and no shrinking, by
\setlength{\parsep}{0.5ex plus 0.2ex minus 0.1ex}
\setlength{\itemsep}{0ex plus 0.2ex minus 0ex}
The actual amount of item separation is calculated by adding the values speciﬁed for
\parsep and \itemsep.
A complicated list such as this should be deﬁned as a new environment. For ex-
ample, you could deﬁne a myrules environment:
\newenvironment{myrules}
{\begin{list}
{\upshape \bfseries Rule \arabic{spacerule}:}
{\setlength{\leftmargin}{1.5in}
\setlength{\rightmargin}{0.6in}
\setlength{\labelwidth}{1.0in}
\setlength{\labelsep}{0.2in}
\setlength{\parsep}{0.5ex plus 0.2ex minus 0.1ex}

14.6
Custom lists
415
\setlength{\itemsep}{0ex plus 0.2ex minus 0ex}
\usecounter{spacerule}
\itshape} }
{\end{list}}
and then use it anywhere, as in
\begin{myrules}
\item Two or more consecutive spaces in text are the
same as one.\label{Li:Twoor}
\item A blank line---that is, two end-of-line
characters separated only by blanks and
tabs---indicates the end of a paragraph.
\label{Li:blankline}
Rules \ref{Li:Twoor} and~\ref{Li:blankline} make typing
\end{myrules}
and copying very convenient.
which typesets as the ﬁrst example shown on page 413.
Example 2
In Section 3.7.2, we discussed the formatting of the following type of
glossary:
sentence a group of words terminated by a period, exclamation point, or question
mark.
paragraph a group of sentences terminated by a blank line or by the new para-
graph command.
Now we can create the glossary as a custom list:
\begin{list}{}
{\setlength{\leftmargin}{30pt}
\setlength{\rightmargin}{0pt}
\setlength{\itemindent}{14pt}
\setlength{\labelwidth}{40pt}
\setlength{\labelsep}{5pt}
\setlength{\parsep}{0.5ex plus 0.2ex minus 0.1ex}
\setlength{\itemsep}{0ex plus 0.2ex minus 0ex}}
\item[\textbf{sentence}\hfill] is a group of words
terminated by a period, exclamation point,
or question mark.
\item[\textbf{paragraph}\hfill] is a group of sentences
terminated by a blank line or by the \com{par} command.
\end{list}

416
Chapter 14
Commands and environments
There is nothing new in this example except the \hfill commands in the optional
arguments to left adjust the labels. With the long words in the example this adjustment
is not necessary, but it would be needed for shorter words.
See Section 3.3 of The LATEX Companion, 2nd edition [56] on how to customize
the three standard list environments and also for more complicated custom lists.
14.6.4
The trivlist environment
LATEX also provides a trivlist environment, meant more for programmers than users.
The environment is invoked in the form
\begin{trivlist}
body
\end{trivlist}
It is similar to the list environment except that there are no arguments, and all the
length commands are trivially set, most to 0 points, except for \listparindent and
\parsep, which are set to equal \parindent and \parskip, respectively. For in-
stance, LATEX deﬁnes the center environment as follows:
\begin{trivlist}
\centering \item[]
\end{trivlist}
14.7
The dangers of customization
We can customize LATEX in so many ways. We can add packages to expand its power
and deﬁne new commands that better suit our work habits. These enhance LATEX and
make it easier to work with. But they also introduce diﬃculties. Let us start with the
obvious.
Whoever introduced the command \textcompwordmark knew that—even if we
use command completion—we are not going to type
if\textcompwordmark f
to avoid having a ligature (see Section 3.4.6). It is a lot of typing, and the source ﬁle
becomes hard to read. This cries out for a custom command, say, \Iff, which is short
and readable (see Section 14.1.1).
When introducing custom commands, watch out for the following traps.

14.7
The dangers of customization
417
Trap 1
Redeﬁning a command that is a necessary part of LATEX.
This is easy to avoid. As discussed in Section 14.1.8, you can easily ﬁnd out whether a
command is already in use. If it is, do not redeﬁne it unless you really know what you
are doing.
Trap 2
Deﬁning too many commands.
This creates two problems. Your editor has a hard time making changes in your source
ﬁle. And a few years later, when you want to reuse the material, you have a diﬃcult
time understanding all those clever commands.
Trap 3
Your contribution appears in a volume with many other authors and your custom com-
mands create conﬂicts.
As your article appears in a publication, some parts of it are used for the whole
volume. The title and maybe even the section titles are used in the table of contents. The
abstracts may be collected for the whole volume or there may be a joint bibliography.
With the advent of the internet, there are now collections of thousands of math
articles; PlanetMath.org is one example. Write your articles so that even the editors of
PlanetMath.org can use it.
Rule 1
Do not use your own commands in the title of the article, in the abstract, in section
titles, in the bibliography, or in captions of ﬁgures and tables.
Trap 4
You submit the article to a journal that does not permit a separate custom command
ﬁle.
For such journals, just copy the needed custom commands into the preamble of
your article. Go through the list and delete those custom commands that are not
used in this article. This helps the editor to look up your commands from a shorter
list.

418
Chapter 14
Commands and environments
Rule 2
Introduce judiciously custom commands with very short names.
Introducing one-letter commands—for instance, using \C for the complex ﬁeld—
is dangerous because many one-letter commands are reserved by LATEX.
Two-letter custom commands are not quite this bad. Of the 2,500 or so possibil-
ities only a few dozen are used by LATEX. The danger here is, of course, conﬂict with
other authors and confusion for the editor. My command ﬁle has about 15 two-letter
commands. For instance \jj, part of the \jj, \JJ, \JJm family. Also \Id, because
Id is the standard notation for ideal lattices. Some editors may think that this is 15 too
many.
Rule 3
Do not use \def to deﬁne your commands, with the exception of a very few delimited
commands.
Using \def means giving up LATEX’s built in defense. In the editorial oﬃce of my
journal, about half the submitted articles that we cannot typeset violate this rule.
Rule 4
Do not redeﬁne length commands, especially, if you do not know what other length
commands are computed based on the ones you change.
The page layout diagram, Figure 8.4, should provide examples. Even simpler, Do
not redeﬁne length commands. Let the document class deﬁne them for your article.
Rule 5
Make sure that the packages you use are compatible.
For instance, the popular psfrag and epsfig packages cause problems if used
with the AMS packages.
Be cautious when you use packages that redeﬁne a lot of LATEX commands, such
as hyperref (see Section 11.2).
You can read more about the plight of authors in the hands of incompetent editors
in my article [32] and the diﬃcult job of editors with articles violating the above rules
in Enrico Gregorio [16].

PART VI
Long Documents

C H A P T E R
15
BIBTEX
The BIBTEX application, written by Oren Patashnik, assists LATEX users in compiling
bibliographies, especially long ones. Short bibliographies can easily be placed in the
document directly (see Section 8.5.1).
It takes a little eﬀort to learn BIBTEX. But in the long run, the advantages of build-
ing bibliographic databases that can be reused and shared outweigh the disadvantage of
a somewhat steep learning curve. The bibliographic database ﬁles, the bib ﬁles, con-
tain the bibliographic entries. We discuss the format of these entries in Section 15.1,
and then describe how to use BIBTEX to create bibliographies in Section 15.2.
BIBTEX uses a style, called a bibliographic style, or bst ﬁle, to format entries.
On the next two pages we show the bibliography of the secondarticleb.tex sample
article typeset with six diﬀerent style ﬁles.
To simplify our discussion, in the rest of this chapter I discuss only one style,
the AMS plain style, amsplain.bst, version 2.0. All of the examples shown are in
this style, and several of the comments I make are true only for the AMS plain style.
If you choose to use a diﬀerent style, you should check its documentation for special
rules.
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1_15
421

422
Chapter 15
BIBTEX
plain.bst
alpha.bst
amsplain.bst
amsalpha.bst
[1] Soo-Key Foo. Lattice Constructions. PhD thesis, University of Winnebago, Winnebago, MN,
December 1990.
[2] George A. Menuhin. Universal Algebra. D. van Nostrand, Princeton, 1968.
[3] Ernest T. Moynahan. Ideals and congruence relations in lattices. II. Magyar Tud. Akad. Mat.
Fiz. Oszt. K¨ozl., 7:417–434, 1957.
[4] Ernest T. Moynahan. On a problem of M. Stone. Acta Math. Acad. Sci. Hungar., 8:455–460,
1957.
[5] Ferenc R. Richardson. General Lattice Theory. Mir, Moscow, expanded and revised edition,
1982.
[Foo90]
Soo-Key Foo. Lattice Constructions. PhD thesis, University of Winnebago, Winnebago,
MN, December 1990.
[Men68]
George A. Menuhin. Universal Algebra. D. van Nostrand, Princeton, 1968.
[Moy57a] Ernest T. Moynahan. Ideals and congruence relations in lattices. II. Magyar Tud. Akad.
Mat. Fiz. Oszt. K¨ozl., 7:417–434, 1957.
[Moy57b] Ernest T. Moynahan. On a problem of M. Stone. Acta Math. Acad. Sci. Hungar.,
8:455–460, 1957.
[Ric82]
Ferenc R. Richardson. General Lattice Theory. Mir, Moscow, expanded and revised
edition, 1982.
1. Soo-Key Foo, Lattice constructions, Ph.D. thesis, University of Winnebago, Winnebago, MN,
December 1990.
2. George A. Menuhin, Universal algebra, D. van Nostrand, Princeton, 1968.
3. Ernest T. Moynahan, Ideals and congruence relations in lattices. II, Magyar Tud. Akad. Mat.
.lz
o¨
K
.t
z
s
O
.zi
F
7 (1957), 417–434 (Hungarian).
4.
, On a problem of M. Stone, Acta Math. Acad. Sci. Hungar. 8 (1957), 455–460.
5. Ferenc R. Richardson, General lattice theory, expanded and revised ed., Mir, Moscow, 1982
(Russian).
[Foo90]
Soo-Key Foo, Lattice constructions, Ph.D. thesis, University of Winnebago, Winnebago,
MN, December 1990.
[Men68]
George A. Menuhin, Universal algebra, D. van Nostrand, Princeton, 1968.
[Moy57a] Ernest T. Moynahan, Ideals and congruence relations in lattices. II, Magyar Tud. Akad.
Mat
.lz
o¨
K
.t
z
s
O
.zi
F
.
7 (1957), 417–434 (Hungarian).
[Moy57b] Ernest T. Moynahan, On a problem of M. Stone, Acta Math. Acad. Sci. Hungar. 8
(1957), 455–460.
[Ric82]
Ferenc R. Richardson, General lattice theory, expanded and revised ed., Mir, Moscow,
1982 (Russian).

15.1
The database
423
siam.bst
ieeetr.bst
[1] S.-K. Foo, Lattice Constructions, PhD thesis, University of Winnebago, Winnebago, MN,
Dec. 1990.
[2] G. A. Menuhin, Universal Algebra, D. van Nostrand, Princeton, 1968.
[3] E. T. Moynahan, Ideals and congruence relations in lattices. II, Magyar Tud. Akad. Mat.
.
4
3
4
–
7
1
4
.
p
p
,)
7
5
9
1
(
7
,.lz
o¨
K
.t
z
s
O
.zi
F
[4]
, On a problem of M. Stone, Acta Math. Acad. Sci. Hungar., 8 (1957), pp. 455–460.
[5] F. R. Richardson, General Lattice Theory, Mir, Moscow, expanded and revised ed., 1982.
[1] F. R. Richardson, General Lattice Theory. Moscow: Mir, expanded and revised ed., 1982.
[2] G. A. Menuhin, Universal Algebra. Princeton: D. van Nostrand, 1968.
[3] E. T. Moynahan, “On a problem of M. Stone,” Acta Math. Acad. Sci. Hungar., vol. 8, pp. 455–
460, 1957.
[4] S.-K. Foo, Lattice Constructions. PhD thesis, University of Winnebago, Winnebago, MN, Dec.
1990.
[5] E. T. Moynahan, “Ideals and congruence relations in lattices. II,” Magyar Tud. Akad. Mat.
Fiz. Oszt. K¨ozl., vol. 7, pp. 417–434, 1957.
15.1
The database
A BIBTEX database is a text ﬁle containing bibliographic entries. To use BIBTEX, you
ﬁrst have to learn how to assemble a database. This section explains how to do that.
There may be special tools available for your computer system that assist you in
building and maintaining your bibliographic data. Such tools make compiling the data
easier and may minimize formatting errors.
You can ﬁnd all the examples in this section in the template.bib ﬁle in the
samples folder (see page 5).
15.1.1
Entry types
A bibliographic entry is given in pieces called ﬁelds. The style (see Section 15.2.2)
speciﬁes how these ﬁelds are typeset. Here are two typical entries:
@BOOK{gM68,
author = "George A. Menuhin",
title = "Universal Algebra",
publisher = "D.~Van Nostrand",
address = "Princeton",
year = 1968,
}
@ARTICLE{eM57,
author = "Ernest T. Moynahan",
title = "On a Problem of {M. Stone}",

424
Chapter 15
BIBTEX
journal = "Acta Math. Acad. Sci. Hungar.",
pages = "455-460",
volume = 8,
year = 1957,
}
The start of an entry is indicated with an at sign (@) followed by the entry type. In the
ﬁrst example, the entry type is BOOK, while in the second, it is ARTICLE. The entry type
is followed by a left brace ({). The matching right brace (}) indicates the end of the
entry. BIBTEX also allows you to use parentheses as delimiters for an entry. In this
book, however, we use braces to enclose an entry.
The string @BOOK{ is followed by a label, gM68, which designates the name of the
entry. Refer to this entry in your document with \cite{gM68}. The label is followed
by a comma and a series of ﬁelds. In this example, there are ﬁve ﬁelds, author, title,
publisher, address, and year. Each ﬁeld starts with the ﬁeld name, followed by =
and the value of the ﬁeld enclosed in double quotes ("). Be sure to use " and not LATEX
double quotes ( “ or ” ). Alternatively, BIBTEX also allows you to use braces to enclose
the ﬁeld value. In this book, we use double quotes to enclose a ﬁeld.
Numeric ﬁeld values, that is, ﬁelds consisting entirely of digits, do not need to be
enclosed in double quotes or braces, for instance, year in the examples above, volume
in the second example, and number in some of the examples that follow. Page ranges,
such as 455-460, are not numeric ﬁeld values since they contain -, so they must be
enclosed in double quotes or braces.
There must be a comma before each ﬁeld. The comma before the ﬁrst ﬁeld is
placed after the label.
There are many standard entry types, including
ARTICLE an article in a journal or magazine
BOOK a book with an author (or editor) and a publisher
BOOKLET a printed work without a publisher
INBOOK a part of a book, such as a chapter or a page range that, in general, is not titled
or authored separately
INCOLLECTION a part of a book with its own title and perhaps author
INPROCEEDINGS an article in a conference proceedings with its own title and
author
MANUAL technical documentation
MASTERSTHESIS a master’s thesis
MISC an entry that does not ﬁt in any other category
PHDTHESIS a Ph.D. thesis
PROCEEDINGS the proceedings of a conference

15.1
The database
425
TECHREPORT a report published by a school or institution
UNPUBLISHED an unpublished paper
Each entry includes a number of ﬁelds from the following list:
address
institution
pages
author
journal
publisher
booktitle
key
school
chapter
language
series
crossref
month
title
edition
note
type
editor
number
volume
howpublished
organization
year
The style you choose determines which of the ﬁelds within an entry are actually used.
All the others are ignored. You may also add ﬁelds for your own use. For example, you
may want to add a mycomments ﬁeld for personal comments. Such ﬁelds are ignored
unless you have a bibliography style that uses them.
Commonly used examples of new ﬁeld names include URL, abstract, ISBN,
keywords, mrnumber, and so on. The language ﬁeld is used by the AMS styles but
not by any of the other styles mentioned in this chapter.
Tip
1. BIBTEX does not care whether you use uppercase or lowercase letters (or mixed)
for the names of entry types and ﬁelds. In this book, the entry types are shown in
uppercase and ﬁeld names in lowercase.
2. Placing a comma after the last ﬁeld is optional. I recommend that you put it there
so that when you append a new ﬁeld to the entry, the required comma separating the
ﬁelds is present.
For each entry type there are both required and optional ﬁelds. Later in this section,
I give two examples of each entry type. The ﬁrst example of an entry type uses a small
set of ﬁelds, while the second example is a maximal one, showing a large number of
optional ﬁelds.
15.1.2
Typing ﬁelds
Make sure you type the ﬁeld names correctly. If you misspell one, BIBTEX ignores the
ﬁeld. BIBTEX also warns you if a required ﬁeld is missing. The author and editor
ﬁelds require a name.

426
Chapter 15
BIBTEX
Rule
Names
1. Most names can be typed as usual, "Ernest T. Moynahan" or "Moynahan,
Ernest T.", with one comma separating the family name from the given names.
2. Type two or more names separated by and. For instance,
author= "George Blue and Ernest Brown and Soo-Key Foo",
3. The family name of Miguel Lopez Fernandez is Lopez Fernandez, so type it as
"Lopez Fernandez, Miguel". This informs BIBTEX that Lopez is not a middle
name.
4. Type Orrin Frink, Jr. as "Frink, Jr., Orrin".
Rules 3 and 4 are seldom needed. In a bibliography of about 1,500 items, I found
fewer than 10 names that could not be typed as usual. Note that you can type John
von Neumann as "John von Neumann" or "von Neumann, John". Because BIBTEX
knows about von, it handles the name properly.
There are a few rules concerning the title ﬁeld.
Rule
Title
1. You should not put a period at the end of a title. The style supplies the appropriate
punctuation.
2. Many styles, including the AMS styles, convert titles, except for the ﬁrst letter of
the title, to lowercase for all entry types. If you want a letter to appear in uppercase,
put it—or the entire word—in braces. The same rule applies to the edition ﬁeld.
Some other styles only do this conversion for the titles of non-book-like entries.
3. To maximize the portability of your database, you should type titles with each imp-
ortant word capitalized:
title = "On a Problem of {M. Stone}",
The style used in this book, amsplain.bst, converts Problem to problem, so it
makes no diﬀerence, but some styles do not. To be on the safe side, you should
capitalize all words that may have to be capitalized.

15.1
The database
427
For the record, here are the complete rules for titles:
Rule
Capitalize:
1. the ﬁrst word;
2. the ﬁrst word in a subtitle (BIBTEX assumes that a subtitle follows a colon, so it
capitalizes the ﬁrst word after a colon—a colon not introducing a subtitle should be
typed in braces);
3. all other words except articles, unstressed conjunctions, and unstressed prepositions.
Words that should never be converted to lowercase, for example proper names such
as Hilbert, should be enclosed in braces to prevent them from being converted to
lowercase. In the example above, two letters in the title should not be converted to
lowercase, so we enclosed M. Stone in braces. We could also have typed
{M. S}tone+ or \verb+{M.} {S}tone
BIBTEX and the style automatically handle a number of things for you that you
would have to handle yourself when typing text.
1. You do not have to mark periods in abbreviations, as .\␣in the names of journals
(see Section 3.2.2). So
journal = "Acta Math. Acad. Sci. Hungar.",
typesets correctly.
2. You can type a single hyphen for a page range instead of the usual -- in the pages
ﬁeld (see Section 3.4.2). So
pages = "455-460",
typesets correctly with an en dash.
3. You do not have to type nonbreakable spaces with ˜ in the author or editor ﬁelds
(see Section 3.4.3):
author = "George A. Menuhin",
is correct. Normally you would type George˜A. Menuhin.
Finally, we state a rule about accented characters.
Rule
Accents
Put accented characters in braces: {\"{a}}.

428
Chapter 15
BIBTEX
This rule means that
author = "Paul Erd\H{o}s",
is not recommended. Instead, type
author = "Paul Erd{\H{o}}s",
This rule is, again, about portability. Some styles, e.g., alpha and amsalpha, create a
citation for an article from the ﬁrst three letters of the name and the last two digits of
the year.
author = "Kurt G{\"{o}}del",
year = 1931,
creates the citation: [Göd31]. The accent is used only if the accents rule has been
followed.
The downside of this rule is that the braces suppress kerning.
15.1.3
Articles
Entry type
ARTICLE
Required ﬁelds
author, title, journal, year, pages
Optional ﬁelds
volume, number, language, note
Examples:
1. Ernest T. Moynahan, On a problem of M. Stone, Acta Math. Acad. Sci.
Hungar. 8 (1957), 455–460.
2. Ernest T. Moynahan, On a problem of M. Stone, Acta Math. Acad. Sci.
Hungar. 8 (1957), no. 5, 455–460 (English), Russian translation available.
typed as
@ARTICLE{eM57,
author = "Ernest T. Moynahan",
title = "On a Problem of {M. Stone}",
journal = "Acta Math. Acad. Sci. Hungar.",
pages = "455-460",
volume = 8,
year = 1957,
}
@ARTICLE{eM57a,
author = "Ernest T. Moynahan",
title = "On a Problem of {M. Stone}",
journal = "Acta Math. Acad. Sci. Hungar.",
pages = "455-460",

15.1
The database
429
volume = 8,
number = 5,
year = 1957,
note = "Russian translation available",
language = "English",
}
15.1.4
Books
Entry type
BOOK
Required ﬁelds
author (or editor), title, publisher, year
Optional ﬁelds
edition, series, volume, number, address,
month, language, note
Examples:
1. George A. Menuhin, Universal algebra, D. Van Nostrand, Princeton, 1968.
2. George A. Menuhin, Universal algebra, second ed., University Series in
Higher Mathematics, vol. 58, D. Van Nostrand, Princeton, March 1968
(English), no Russian translation.
typed as
@BOOK{gM68,
author = "George A. Menuhin",
title = "Universal Algebra",
publisher = "D.~Van Nostrand",
address = "Princeton",
year = 1968,
}
@BOOK{gM68a,
author = "George A. Menuhin",
title = "Universal Algebra",
publisher = "D.~Van Nostrand",
address = "Princeton",
year = 1968,
month = mar,
series = "University Series in Higher Mathematics",
volume = 58,
edition = "Second",
note = "no Russian translation",
language = "English",
}
Abbreviations, such as mar, are discussed in Section 15.1.9.

430
Chapter 15
BIBTEX
A second variant of book has an editor instead of an author:
15. Robert S. Prescott (ed.), Universal algebra, D. Van Nostrand, Princeton,
1968.
typed as
@BOOK{rP68,
editor = "Robert S. Prescott",
title = "Universal Algebra",
publisher = "D.~Van Nostrand",
address = "Princeton",
year = 1968,
}
15.1.5
Conference proceedings and collections
Entry type
INPROCEEDINGS
Required ﬁelds
author, title, booktitle, year
Optional ﬁelds
address, editor, series, volume, number,
organization, publisher, month, note, pages, language
Examples:
7. Peter A. Konig, Composition of functions. Proceedings of the Conference on
Universal Algebra, 1970.
8. Peter A. Konig, Composition of functions. Proceedings of the Conference on
Universal Algebra (Kingston, ON) (G. H. Birnbaum, ed.), vol. 7, Cana-
dian Mathematical Society, Queen’s Univ., December 1970, available from
the Montreal oﬃce, pp. 1–106 (English).
typed as
@INPROCEEDINGS{pK69,
author = "Peter A. Konig",
title = "Composition of Functions".
booktitle = "Proceedings of the Conference on
Universal Algebra",
year = 1970,
}
@INPROCEEDINGS{pK69a,
author = "Peter A. Konig",
title = "Composition of Functions".
booktitle = "Proceedings of the Conference on

15.1
The database
431
Universal Algebra",
address = "Kingston, ON",
publisher = "Queen’s Univ.",
organization = "Canadian Mathematical Society",
editor = "G. H. Birnbaum",
pages = "1-106",
volume = 7,
year = 1970,
month = dec,
language = "English",
}
The address ﬁeld provides the location of the meeting. The address of the pub-
lisher should be in the publisher ﬁeld and the address of the organization in the
organization ﬁeld.
Entry type
INCOLLECTION
Required ﬁelds
author, title, booktitle, publisher, year
Optional ﬁelds
editor, series, volume, number, address,
edition, month, note, pages, language
Examples:
1. Henry H. Albert, Free torsoids, Current Trends in Lattices, D. Van Nos-
trand, 1970.
2. Henry H. Albert, Free torsoids, Current Trends in Lattices (George Burns,
ed.), vol. 2, D. Van Nostrand, Princeton, January 1970, new edition is due
next year, pp. 173–215 (German).
is typed as
\noindent\verb+@INCOLLECTION{hA70,
author = "Henry H. Albert",
title = "Free Torsoids",
booktitle = "Current Trends in Lattices".
publisher = "D.~Van Nostrand",
year = 1970,
}
@INCOLLECTION{hA70a,
author = "Henry H. Albert",
editor = "George Burns",
title = "Free Torsoids",
booktitle = "Current Trends in Lattices".
publisher = "D.~Van Nostrand",
address = "Princeton",

432
Chapter 15
BIBTEX
pages = "173-215",
volume = 2,
year = 1970,
month = jan,
note = "new edition is due next year",
language = "German",
}
The address ﬁeld contains the address of the publisher.
Cross-referencing
If your database has several articles from the same conference proceedings and col-
lections, you may prefer to make an entry for the entire volume, and cross-reference
individual articles to that entry. For instance,
@PROCEEDINGS{UA69,
title = "Proceedings of the Conference on,
Universal Algebra",
booktitle = "Proceedings of the Conference on
Universal Algebra",
address = "Kingston, ON",
publisher = "Canadian Mathematical Society",
editor = "G. H. Birnbaum",
volume = 7,
year = 1970,
}
may be the entry for the proceedings volume as a whole, and
@INPROCEEDINGS{pK69a,
author = "Peter A. Konig",
title = "Composition of Functions",
booktitle = "Proceedings of the Conference on
Universal Algebra",
pages = "1-106",
crossref = "UA69",
}
is the cross-referencing entry for a speciﬁc article. These two entries produce the fol-
lowing:
1. G. H. Birnbaum (ed.), Proceedings of the conference on universal algebra,
vol. 7, Kingston, ON, Canadian Mathematical Society, 1970.
2. Peter A. Konig, Composition of functions, in Birnbaum [1], pp. 1–106.

15.1
The database
433
Rule
Cross-references
1. All the required ﬁelds of the cross-referencing entry must appear in either that entry
or in the cross-referenced entry.
2. The cross-referenced entry should have both a title and a booktitle ﬁeld.
3. The cross-referenced entry must appear in the bib ﬁle later than any entry that cross-
references it.
15.1.6
Theses
Entry type
MASTERSTHESIS or PHDTHESIS
Required ﬁelds
author, title, school, year
Optional ﬁelds
type, address, month, note, pages
Examples:
1. Soo-Key Foo, Lattice constructions, Ph.D. thesis, University of Winnebago,
1990.
2. Soo-Key Foo, Lattice constructions, Ph.D. dissertation, University of Win-
nebago, Winnebago, MN, December 1990, ﬁnal revision not yet available,
pp. 1–126.
is typed as
@PHDTHESIS{sF90,
author = "Soo-Key Foo",
title = "Lattice Constructions",
school = "University of Winnebago",
year = 1990,
}
@PHDTHESIS{sF90a,
author = "Soo-Key Foo",
title = "Lattice Constructions",
school = "University of Winnebago",
address = "Winnebago, MN",
year = 1990,
month = dec,
note = "final revision not yet available",
type = "Ph.D. dissertation",
pages = "1-126",
}
If the type ﬁeld is present, its content takes the place of the phrase Ph.D. thesis
(or Master’s thesis).

434
Chapter 15
BIBTEX
15.1.7
Technical reports
Entry type
TECHREPORT
Required ﬁelds
author, title, institution, year
Optional ﬁelds
type, number, address, month, note
Examples:
1. Grant H. Foster, Computational complexity in lattice theory, tech. report,
Carnegie Mellon University, 1986.
2. Grant H. Foster, Computational complexity in lattice theory, Research Note
128A, Carnegie Mellon University, Pittsburgh, PA, December 1986, in
preparation.
is typed as
@TECHREPORT{gF86,
author = "Grant H. Foster",
title = "Computational Complexity in Lattice Theory",
institution = "Carnegie Mellon University",
year = 1986,
}
@TECHREPORT{gF86a,
author = "Grant H. Foster",
title = "Computational Complexity in Lattice Theory",
institution = "Carnegie Mellon University",
year = 1986,
month = dec,
type = "Research Note",
address = "Pittsburgh, PA",
number = "128A",
note = "in preparation",
}
15.1.8
Manuscripts and other entry types
Entry type
UNPUBLISHED
Required ﬁelds
author, title, note
Optional ﬁelds
month, year
Examples:
1. William A. Landau, Representations of complete lattices, manuscript,
55 pages.
2. William A. Landau, Representations of complete lattices, manuscript,
55 pages, December 1975.

15.1
The database
435
is typed as
@UNPUBLISHED{wL75,
author = "William A. Landau",
title = "Representations of Complete Lattices",
note = "manuscript, 55~pages",
}
@UNPUBLISHED{wL75a,
author = "William A. Landau",
title = "Representations of Complete Lattices",
year = 1975,
month = dec,
note = "manuscript, 55~pages",
}
Other standard entry types include
Entry type
BOOKLET
Required ﬁeld
title
Optional ﬁelds
author, howpublished, address, month, year, note
Entry type
INBOOK
Required ﬁelds
author or editor, title, chapter or pages, publisher,
year
Optional ﬁelds
series, volume, number, type, address,
edition, month, pages, language, note
Entry type
MANUAL
Required ﬁeld
title
Optional ﬁelds
author, organization, address, edition, month, year,
note
Entry type
MISC
Required ﬁeld
at least one of the optional ﬁelds must be present
Optional ﬁelds
author, title, howpublished, month, year, note, pages
Entry type
PROCEEDINGS
Required ﬁelds
title, year
Optional ﬁelds
editor, series, volume, number, address,
organization, publisher, month, note
15.1.9
Abbreviations
You may have noticed the ﬁeld month = dec in some of the examples. This ﬁeld uses
an abbreviation. Most BIBTEX styles, including the AMS styles, include abbreviations
for the months of the year: jan, feb, ..., dec. When an abbreviation is used, it is not
enclosed in quotes (") or braces ({ }). The style deﬁnes what is actually to be typeset.
Most styles typeset dec as either Dec. or December.

436
Chapter 15
BIBTEX
The name of the abbreviation, such as dec, is a string of characters that starts with
a letter, does not contain a space, an equal sign (=), a comma, or any of the special
characters listed in Section 3.4.4.
You may deﬁne your own abbreviations using the command @STRING.
For
example,
@STRING{au = "Algebra Universalis"}
A string deﬁnition can be placed anywhere in a bib ﬁle, as long as it precedes the ﬁrst
use of the abbreviation in an entry.
The AMS supplies the mrabbrev.bib ﬁle containing the standard abbreviations
for many mathematical journals. Find it at ams.org, under Reference Tools, click
on MR Serials Abbreviations for BibTeX. Based on this ﬁle, you can make your
own abbrev.bib ﬁle containing entries for all the journals you reference with whatever
abbreviations you ﬁnd easiest to remember.
If you use this scheme, the command you use to specify the bib ﬁles may look
like
\bibliography{abbrev,... }
Section 15.2.1 explains the \bibliography command.
15.2
Using BIBTEX
In Section 15.1, you learned how to create database ﬁles. The sample bib ﬁles are
template.bib and secondarticleb.bib in the samples folder (see page 5). In this
section, you learn how to use BIBTEX to process these ﬁles to create a bibliography.
We illustrate the process of working with BIBTEX with the secondarticleb sample
article.
We use the amsplain style. To obtain all six examples of diﬀerent styles shown on
pages 422–423, just change amsplain to the appropriate style name in your document
and typeset it.
One BIBTEX style behaves diﬀerently. The apacite style of the American Psy-
chological Association requires that the preamble of your document include the line
\usepackage{apalike}
in addition to using the style ﬁle. The package can also be modiﬁed by a large number
of options.
15.2.1
Sample ﬁles
Type the following two lines to replace the thebibliography environment in the
secondarticle.tex sample document:
\bibliographystyle{amsplain}
\bibliography{secondarticleb}

15.2
Using BIBTEX
437
Save the new sample article as secondarticleb.tex. The ﬁrst line speciﬁes the bst
ﬁle, amsplain.bst, which is part of the AMS distribution (see Section 9.6). The
second line speciﬁes the database ﬁles used, secondarticleb.bib; in this case there
is only one.
The contents of the secondarticleb.bib bibliographic database ﬁle are as
follows:
@BOOK{gM68,
author = "George A. Menuhin",
title = "Universal Algebra",
publisher = "D.~Van Nostrand",
address = "Princeton",
year = 1968,
}
@BOOK{fR82,
author = "Ferenc R. Richardson",
title = "General Lattice Theory",
edition = "Expanded and Revised",
language = "Russian",
publisher = "Mir",
address = "Moscow",
year = 1982,
}
@ARTICLE{eM57,
author = "Ernest T. Moynahan",
title = "On a Problem of {M. Stone}",
journal = "Acta Math. Acad. Sci. Hungar.",
pages = "455-460",
volume = 8,
year = 1957,
}
@ARTICLE{eM57a,
author = "Ernest T. Moynahan",
title = "Ideals and Congruence Relations in
Lattices.~\textup{II}",
journal = "Magyar Tud. Akad. Mat. Fiz. Oszt. K{\"{o}}zl.",
language = "Hungarian",
pages = "417-434",
volume = 7,
year = 1957,
}
@PHDTHESIS{sF90,
author = "Soo-Key Foo",
title = "Lattice Constructions",

438
Chapter 15
BIBTEX
school = "University of Winnebago",
address = "Winnebago, MN",
year = 1990,
month = dec,
}
Type secondarticleb.bib or copy it from the samples folder to your work
folder.
15.2.2
Setup
Before you start BIBTEX, make sure that everything is set up properly as described in
this section.
To list database entries in the bibliography, use the \cite command. Refer to Sec-
tion 8.5.1 for details on how to use citations. If you want to have a reference listed in
the bibliography without a citation in the text, then use the \nocite command. For ex-
ample,
\cite{pK57}
includes the reference in the bibliography and cites the entry with label pK57, whereas
\nocite{pK57}
includes the reference in the bibliography but does not cite the entry. In either case, one
of the bib ﬁles speciﬁed in the argument of the \bibliography command must con-
tain an entry with the label pK57. The \nocite{*} command includes all the entries
from the bibliographic databases you’ve speciﬁed.
Your document must specify the bibliography style and must name the bib ﬁles
to be used. For instance, the secondarticleb.tex sample article contains the lines
\bibliographystyle{amsplain}
\bibliography{secondarticleb}
The \bibliographystyle command speciﬁes amsplain.bst as the style and the
\bibliography command speciﬁes the database ﬁle secondarticleb.bib. To use
several database ﬁles, separate them with commas, as in
\bibliography{abbrev,gg,lattice,secondarticleb}
where
abbrev.bib contains custom abbreviations
gg.bib contains personal articles
lattice.bib contains lattice theory articles by other authors
secondarticleb.bib contains additional references needed

15.2
Using BIBTEX
439
It is important to make sure that the bst ﬁle, the bib ﬁle(s), and the LATEX docu-
ment(s) are in folders where BIBTEX can ﬁnd them. If you are just starting out, you can
simply copy all of them into one folder. Later, you may want to look for a more per-
manent solution by keeping the ﬁles abbrev.bib and lattice.bib in one “central”
location, while placing secondarticleb.bib in the same folder as its corresponding
LATEX document.
15.2.3
Four steps of BIBTEXing
The following steps produce a typeset bibliography in your LATEX document. We use
the secondarticleb.tex sample article as an example.
Step 1 Check that BIBTEX, your LATEX document, and the bib ﬁles are placed in the
appropriate folders.
Step 2 Typeset secondarticleb.tex to get a fresh aux ﬁle. This step is illustrated
in Figure 15.1.
Step 3 Run BIBTEX on the secondarticleb.aux ﬁle in one of the following three
ways:
by invoking it with the argument secondarticleb
by starting the application and then opening secondarticleb.aux
by running it by choosing it as a menu option of your editor or GUI front end
or by clicking on an icon
If BIBTEX cannot ﬁnd a crucial ﬁle, for example, the bst ﬁle, it stops. The reason
it stopped is shown in the log window and also written to a blg (bibliography
log) ﬁle, secondarticleb.blg. Correct the error(s) and go back to step 2.
A successful run creates a bbl (bibliography) ﬁle, secondarticleb.bbl, in
addition to secondarticleb.blg. This step is illustrated in Figure 15.2.
Step 4 Typeset the LATEX document secondarticleb.tex twice.
15.2.4
BIBTEX ﬁles
BIBTEX uses and creates a number of ﬁles when it is run. To illustrate this process,
complete the four steps using secondarticleb.tex.
Step 1 Start fresh by deleting the aux, blg, and bbl ﬁles, if they are present.
Step 2 Typeset the article secondarticleb.tex to get an aux ﬁle (see Figure 15.1).
Notice that the log ﬁle contains warnings about missing references and a number
of other lines not relevant to the current discussion. The lines in the aux ﬁle
containing bibliographic information are

440
Chapter 15
BIBTEX
 sampartb.tex
the source file
sampartb.aux
the aux file
typeset
LATEX
Figure 15.1: Using BIBTEX, step 2.
l
b
b
.
b
tr
a
p
m
a
s
x
u
a.
b
tr
a
p
m
a
s
bibliography file
sampartb.blg
the log file
the aux file
Figure 15.2: Using BIBTEX, step 3.
\citation{fR82}
\citation{gM68}
\citation{eM57}
\citation{sF90}
\citation{eM57a}
\bibstyle{amsplain}
\bibdata{secondarticleb}
Each \citation command in this ﬁle corresponds to a \cite or \nocite com-
mand in the article. The lines

15.2
Using BIBTEX
441
\bibliographystyle{amsplain}
\bibliography{secondarticleb}
in secondarticleb.tex are written as
\bibstyle{amsplain}
\bibdata{secondarticleb}
in the secondarticleb.aux ﬁle.
Step 3 Now run BIBTEX on the secondarticleb.aux ﬁle (see Figure 15.2). How we
do this, depends on the LATEX installation you have.
BIBTEX generates two new ﬁles: secondarticleb.blg and secondarti-
cleb.bbl. Look at secondarticleb.blg:
This is BibTeX, C Version 0.99c
The top-level auxiliary file: secondarticleb.aux
The style: amsplain.bst
Database file #1: secondarticleb.bib
On some systems, this ﬁle may be much longer than the one I show here. At
present, this blg ﬁle does not contain much important information. If there were
any warnings or errors, they would be listed in this ﬁle.
The secondarticleb.bbl ﬁle, in which BIBTEX created a thebibliography
environment (see Section 8.5.1) is more interesting:
\providecommand{\bysame}{\leavevmode%
\hbox to3em {\hrulefill}\thinspace}
\begin{thebibliography}{1}
\bibitem{sF90}
Soo-Key Foo, \emph{Lattice constructions},
Ph.D. thesis, University of Winnebago,
Winnebago, MN, December 1990.
\bibitem{gM68}
George~A. Menuhin, \emph{Universal algebra},
D.~Van Nostrand, Princeton, 1968.
\bibitem{eM57a}
Ernest~T. Moynahan, \emph{Ideals and congruence
relations in lattices.~\textup{II}},
Magyar Tud. Akad. Mat. Fiz. Oszt. K{\"{o}}zl.
\textbf{7} (1957), 417-434 (Hungarian).
\bibitem{eM57}

442
Chapter 15
BIBTEX
\bysame, \emph{On a problem of {M. Stone}}, Acta
Math. Acad. Sci. Hungar. \textbf{8} (1957),
455-460.
\bibitem{fR82}
Ferenc~R. Richardson, \emph{General lattice theory},
expanded and revised ed., Mir, Moscow,
1982 (Russian).
\end{thebibliography}
Observe that the nonbreakable spaces (ties) and the \bysame command have been
provided in the author ﬁelds.
Step 4 Now typeset secondarticleb.tex again. The typeset version now has a
References section, constructed from the bbl ﬁle, but the new log ﬁle has
warnings about missing entries. The new aux ﬁle contains ﬁve interesting new
lines:
\bibcite{sF90}{1}
\bibcite{gM68}{2}
\bibcite{eM57a}{3}
\bibcite{eM57}{4}
\bibcite{fR82}{5}
These lines identify the cross-reference label sF90 (see the ﬁrst line shown—the
symbol designates Foo’s thesis in secondarticleb.bib) with the number 1,
and so on. Now typeset secondarticleb.tex again, and all the citations are
correctly placed in the typeset article.
Observe:
1. The crucial step 3, running the BIBTEX application, gives diﬀerent messages and
obeys diﬀerent rules from LATEX—see Section 15.2.5.
2. The secondarticleb.bbl ﬁle was created by BIBTEX. It is not changed by running
LATEX.
15.2.5
BIBTEX rules and messages
Rule
BIBTEX and %
You cannot comment out a ﬁeld with an %.

15.2
Using BIBTEX
443
For example, the entry
@ARTICLE{eM57,
author = "Ernest T. Moynahan",
title = "On a Problem of {M. Stone}",
journal = "Acta Math. Acad. Sci. Hungar.",
% pages = "455-460",
volume = 8,
year = 1957,
}
causes BIBTEX to generate the message
Recall that BIBTEX ignores ﬁeld names it cannot recognize. So changing the ﬁeld name
pages, for example to pages-comment, does not give a message. However, doing so
removes a required ﬁeld, so you get the warning message
Warning--missing pages in eM57
Rule
BIBTEX ﬁeld names
Do not abbreviate ﬁeld names.
For instance, if you abbreviate volume to vol, as in
@ARTICLE{eM57,
author = "Ernest T. Moynahan",
title = "On a Problem of {M. Stone}",
journal = "Acta Math. Acad. Sci. Hungar.",
pages = "455-460",
vol = 8,
year = 1957,
}
the vol ﬁeld is simply ignored. This entry is typeset as
3. Ernest T. Moynahan, On a problem of M. Stone, Acta Math. Acad. Sci.
Hungar. (1957), 455–460.
instead of
3. Ernest T. Moynahan, On a problem of M. Stone, Acta Math. Acad. Sci.
Hungar. 8 (1957), 455–460.

444
Chapter 15
BIBTEX
Rule
BIBTEX ﬁeld terminations
Make sure that every ﬁeld of an entry, except possibly the last, is terminated with a
comma.
If you drop a comma before a ﬁeld, you get a message such as
I was expecting a ‘,’ or a ‘)’
line 6 of file secondarticleb.bib
:
:
year = 1968,
(ay have been on previous line)
I’m skipping whatever remains of this entry
Warning--missing year in gM68+
Rule
BIBTEX ﬁeld value terminations
Make sure that the ﬁeld value is properly terminated.
You should be careful not to drop a double quote or brace. If you drop the closing quote
on line 11 of the bib ﬁle,
title = "General Lattice Theory
you get the message
I was expecting a ‘,’ or a ‘}’
line 12 of file secondarticleb.bib
:
edition = "+\\
:
Expanded and Revised",
I’m skipping whatever remains of this entry
Warning--missing publisher in fR82
Warning--missing year in fR82
I was expecting a ‘,’ or a ‘}’
line 12 of file secondarticleb.bib
:
edition = "
:
Expanded and Revised",
I’m skipping whatever remains of this entry
Warning--missing publisher in fR82
Warning--missing year in fR82
If, instead, you drop the opening double quote in the same line, you get the message
Warning--string name "general" is undefined
--line 11 of file secondarticleb.bib
I was expecting a ‘,’ or a ‘}’

15.3
Concluding comments
445
line 11 of file secondarticleb.bib
:
title =
general
:
Lattice Theory",
I’m skipping whatever remains of this entry
Warning--missing title in fR82
Warning--missing publisher in fR82
Warning--missing year in fR82
(There was 1 message)+
BIBTEX assumed that general was an abbreviation, since it was not preceded by a ".
The obvious conclusion is that you have to be very careful about typing your bib-
liographic entries for BIBTEX. If you have access to special tools for maintaining your
bibliographic data, use them. Otherwise, refer to the template.bib ﬁle that contains
templates of often-used entry types.
15.2.6
Submitting an article
If you submit an article to a journal that provides you with a BIBTEX style ﬁle, then you
can submit the article and the BIBTEX database ﬁle, pared down of course. If this is not
the case, create the bbl ﬁle with amsplain.bst and copy and paste the content into
the thebibliography environment in the article. Then the journal’s editor can edit
the bibliography.
15.3
Concluding comments
There is a lot more to BIBTEX than what has been covered in this chapter. For example,
BIBTEX’s algorithm to alphabetize names is fairly complicated. Some names create
additional diﬃculties. Where should John von Neumann be placed, under the “v”-s or
the “N”-s? It depends on the style. How do we handle names where the ﬁrst word is
the family name, as in Ho Chi Minh or Grätzer György? Again, it depends on the style.
Oren Patashnik’s BIBTEXing [62] has many helpful hints. It includes a clever hack
to order entries correctly even when the style does not do so. Chapter 13 of The LATEX
Companion, 2nd edition [56] has a long discussion of BIBTEX. It also contains a long
list of styles.
There are many tools to make BIBTEXing easier. BibDesk for the Mac is an excel-
lent graphical BIBTEX-bibliography manager. For Windows, there is BibTexMng. For
UNIX, there is pybibliographer and if you are an Emacs user, there is Ebib. Written
in Java, so available on most platforms, is JBibtexManager. There are many BIBTEX
databases. The largest one may be “The Collection of Computer Science Bibliogra-
phies” with more than two million references.
You can easily build your own mathematical databases with MathSciNet from the
AMS. Do a search. When the result page comes up, go to the pull down menu next
to Batch Download and select Citations (BibTeX). Now you can check mark the
items you want by clicking on the little squares and then click on Retrieve Marked
next to the pull down menu or click on Retrieve First 50. For the latter to work

446
Chapter 15
BIBTEX
well, before your search, click on the Preferences button and click on the circle next
to 50, so you get at most 50 items per result page. Then Retrieve First 50 retrieves
them all.
Finally, after many years of development, the AMS released amsrefs, the kid
brother of BIBTEX, at its annual meeting in January 2002. The presentation was made
by Michael Downes, who designed and coded the package. I was very excited to hear
his lecture—bibliographic management was the last block needed to complete the re-
building of LATEX. It turned out that amsrefs is not simply a BIBTEX replacement.
It has a number of very important new features.
1. You can, with amsrefs, enter the marked up bibliographic entries into the docu-
ment. This means that the document class of the journal publishing the paper can
format your bibliography.
2. amsrefs is a LATEX package. Therefore, you do not have to learn (another) esoteric
language to control the formatting of your bibliography. Developing a format for a
journal is very easy.
3. The bibliographic data ﬁles are also LATEX ﬁles, so you can print them within LATEX,
making it easy to maintain them.
After Michael Downes passed away, David Jones took over the project, and released
version 2.0 in June of 2004.
Unfortunately, unlike the BIBTEX and its bbl ﬁle, amsrefs directly creates the
typeset ﬁle. So if the journal you want to submit your article to does not have an
amsrefs style ﬁle—and today only the AMS journals have them—then you have to
manually convert the amsrefs entries into the format the journal would accept. There
is no option to set in amsrefs to produce a LATEX source ﬁle for the bibliographic en-
tries. Therefore, unless you know that you intend to submit to an AMS journal—and
you know that it will accept your article for publication—you should not use amsrefs.
There is a second obstacle. There is no BibDesk or BibTexMng for amsrefs. But
I believe that if amsrefs overcomes the ﬁrst obstacle, then the second obstacle would
resolve itself fast.
Philipp Lehman’s biblatex package shares some of Michael Downes’ goals. It
works with (some) BIBTEX databases and uses LATEX to format the bibliography.

C H A P T E R
16
MakeIndex
Pehong Chen’s MakeIndex application, described in Pehong Chen and Michael
A. Harrison’s Index preparation and processing [10], helps LATEX users create long
indexes. For short indexes, you can easily do without it (see Section 8.5.2).
In Section 16.1, we show you by an example how to prepare an article for index-
ing. We introduce formally the index commands in Section 16.2. In Section 16.3, we
describe how LATEX and MakeIndex process the index entries. The rules are stated in
Section 16.4.
Multiple indexes are almost as easy as single indexes. They are described in Sec-
tion 16.5. We conclude with glossaries in Section 16.6.
Indexing is a diﬃcult task. For an extensive discussion on how to create a useful
index, consult The Chicago Manual of Style, 15th edition [11].
16.1
Preparing the document
LATEX provides the theindex environment (see Section 8.5.2). Within this environ-
ment, it provides the \item, \subitem, and \subsubitem commands to typeset entries,
subentries, and subsubentries, respectively, and the \indexspace command for adding
vertical space between alphabetical blocks, see Figure 16.1 for an example.
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1_16
447

448
Chapter 16
MakeIndex
The makeidx package provides the \index command for specifying the index
entry at a particular point in the document, which becomes a page reference for the
entry in the typeset index.
Making an index entry with MakeIndex is easy. You simply place the index com-
mands in your source ﬁle, and then let LATEX and MakeIndex do the work of gathering
the entries and the page numbers for the entries, sorting them, and formatting the typeset
index.
There are three steps:
1. In the preamble of your LATEX document, include the line
\makeindex
If you do not use an AMS document class, include the two lines
\usepackage{makeidx}
\makeindex
2. Type the line
\printindex
at the point in your document where you want the index to appear, usually as part of
the back matter (see Section 8.5).
3. Mark all entries in your document with \index commands.
We illustrate this procedure with the firstarticlei.tex article, which modiﬁes
the article firstarticle.tex by inserting a number of index entries (both these ﬁles
are in the samples folder; see page 5).
We now add a dozen \index commands to firstarticle.tex.
Command 1
Retype the line
\begin{theorem}
to read
\begin{theorem}\index{Main Theorem}
Commands 2 and 3
Type the commands
\index{pistar@$\Pi^{*}$ construction}%
\index{Main Theorem!exposition|(}%
after the line
\section{The $\Pi^{*}$ construction}\label{S:P*}

16.1
Preparing the document
449
Command 4
Retype the line
See also Ernest~T. Moynahan~\cite{eM57a}.
as follows:
See also Ernest~T.
\index{Moynahan, Ernest~T.}%
Moynahan~\cite{eM57a}.
Commands 5 to 7
Type the three index items
\index{lattice|textbf}%
\index{lattice!distributive}%
\index{lattice!distributive!complete}%
before the line
\begin{theorem}\label{T:P*}
Command 8
Type
\index{Main Theorem!exposition|)}
after the line
hence $\Theta = \iota$.
Command 9
Retype the line
\bibitem{sF90}
as follows:
\bibitem{sF90}\index{Foo, Soo-Key}%
Command 10
Retype the line
\bibitem{gM68}
as follows:
\bibitem{gM68}\index{Menuhin, George~A.}%

450
Chapter 16
MakeIndex
Command 11
Retype the line
\bibitem{eM57}
as follows:
\bibitem{eM57}\index{Moynahan, Ernest~T.}%
Command 12
Retype the line
\bibitem{eM57a}
as follows:
\bibitem{eM57a}\index{Moynahan, Ernest~T.}%
These \index commands produce the index for the firstarticlei.tex article shown
in Figure 16.1. Notice that although you typed 12 index commands, only 11 entries app-
ear in the index. The last two entries for Moynahan (commands 11 and 12) occur on
the same typeset page, so only one page number shows up in the index.
Figure 16.1: A simple index.
The showidx package (see Section 10.3) lists all the index items of a page in a top
corner on the margin. The top of the ﬁrst page of the typeset firstarticlei.tex is
shown in Figure 16.2.

16.2
Index commands
451
Figure 16.2: Using showidx.
16.2
Index commands
There are a few major forms of \index commands. They are discussed in this section,
illustrated by the commands shown in Section 16.1.
Simple \index commands
The index entry
Foo, Soo-Key, 2
was created by command 9,
\index{Foo, Soo-Key}
This entry is an example of the simplest form of an index command:
\index{entry }
The entry
lattice, 2
was created as command 5,
\index{lattice|textbf}
Ignore, for the time being, the |textbf part. This entry has a subentry,
lattice, 2
distributive, 2
which was created by command 6,
\index{lattice!distributive}

452
Chapter 16
MakeIndex
There is also a subsubentry,
lattice, 2
distributive, 2
complete, 2
which was created by command 7,
\index{lattice!distributive!complete}
The form of the \index command for subentries is
\index{entry !subentry }
and for subsubentries it is
\index{entry !subentry !subsubentry }
Modiﬁers
Command 5
\index{lattice|textbf}
produces a bold page number in the entry lattice.
The command whose name follows the symbol | (in this case, the command name
is textbf) is applied to the page number. For instance, if you want a large bold page
number, then deﬁne the command \LargeBold as
\newcommand{\LargeBoldB}[1]{\textbf{\Large #1}}
and type the \index command as
\index{entry |LargeBold}
You can also modify \index commands to indicate page ranges:
Main Theorem, 1
exposition, 1–2
The latter index entry has a page range. It was created with commands 3 and 8:
\index{Main Theorem!exposition|(}
\index{Main Theorem!exposition|)}
Separate an entry from its modiﬁer with |, open the page range with (, and close it
with ).
Modiﬁers can also be combined. The index commands
\index{Main Theorem!exposition|(textbf}
\index{Main Theorem!exposition|)textbf}
produce a bold page range.

16.2
Index commands
453
Sorting control
Observe the \index command
\index{pistar@$\Pi^{*}$ construction}
This produces the entry
Π∗construction, 1
To place this entry in the correct place in the index, use a sort key. The general form of
an \index command with a sort key is
\index{sortkey @entry }
In this example, the sortkey is pistar. When the entries are sorted, the sortkey is
used to sort the entry. A few typical examples follow:
Example 1 An \index command for G.I. Žitomirski˘ı,
\index{Zitomirskii@\v{Z}itomirski\u{\i}, G.I.}
sorts Žitomirski˘ı with the Z entries.
If you used the command
\index{\v{Z}itomirski\u{\i}, G.I.}
Žitomirski˘ı would be sorted with the v’s.
Example 2 An \index command for the Őrmester lemma,
\index{Ormester@\H{O}rmester lemma}
would sort Őrmester lemma with the O entries.
If you used the command
\index{\H{O}rmester lemma}
Őrmester lemma would be sorted with the H’s.
Example 3 An \index command for truncated lattice,
\index{truncated lattice@\emph{truncated} lattice}
sorts truncated lattice with the t entries.
If you use the command
\index{\emph{truncated} lattice}
this would sort truncated lattice with the e’s.

454
Chapter 16
MakeIndex
Example 4 We want to place the symbol Truncat 𝑓, typed as \Trunc f (see Sec-
tion 14.1.6) in the index, sorted as Trunc.
\index{$\Trunc f$}
would place Truncat 𝑓near the beginning of the index, sorted with the $ symbol.
If you use the command
\index{Trunc@$\Trunc f$}
this would sort Truncat 𝑓with the T’s.
Sorting control and subentries
If you want to place a subentry under an entry with a sort key, you must include the sort
key part of the entry as well:
\index{sortkey @entry !subentry }
For instance,
\index{Zitomirskii@\v{Z}itomirski\u{\i}, G.I.!education}
You can also use a sort key for subentries (and subsubentries), such as
\index{lattice!weakly distributive@
\emph{weakly} distributive}
or, a more complicated example,
\index{Zitomirskii@\v{Z}itomirski\u{\i}, G.I.!elementary
education@\textbf{elementary} education}
Special characters
Since the !, @, and | characters have special meanings within an \index command, you
need to quote those characters if you want them to appear as themselves. MakeIndex
uses the double quote character (") for this purpose: "!, "@, and "|.
Because this usage makes the double quote a special character itself, it also has to
be quoted if you need to use it in an \index command: "".
Example 1 To produce the entry Start here!, type the \index command as
\index{Start here"!}
Example 2 To produce the entry @ symbol, type the \index command as
\index{"@ symbol}
Example 3 To produce the entry |𝐴|, type the \index command as
\index{"|A"|@$"|A"|$}

16.2
Index commands
455
Cross-references
It is easy to make a cross-reference to another index entry. For instance, to list distribu-
tive lattice by cross-referencing it to lattice, distributive, the command is
\index{distributive lattice|seeonly{lattice,
distributive}}
which produces the entry
distributive lattice, see lattice, distributive
For non-AMS document classes, seeonly should be see.
A command of this form can be placed anywhere in the document.
Tip
Put all cross-referencing \index commands in one place in your document, so they are
easy to keep track of.
Placement of \index commands
The principle is simple.
Rule
Placement of \index commands
An \index command should:
1. Reference the correct page
2. Not introduce unwanted space into the typeset document
For example, you should avoid placing \index commands as shown here:
Let $L$ be a distributive lattice
\index{lattice}
\index{distributive lattice}
that is strongly complete.
This placement may result in unwanted extra space following the word lattice:
Let 𝐿be a distributive lattice that is strongly complete.
Note the placement of the \index commands in Section 16.1. In each case I have
placed them as close to the referenced item as I could. If you place an index entry on a
separate line, use % to comment out unwanted spaces including the end-of-line character
(see Section 3.5.1), as in

456
Chapter 16
MakeIndex
Let $L$ be a distributive lattice
\index{lattice}%
\index{distributive lattice}%
that is strongly complete.
Read also Section 17.5 on page breaks and index entries.
Listing the forms of the \index command
We have discussed the following forms:
\index{entry }
\index{entry !subentry }
\index{entry !subentry !subsubentry }
\index{entry |modifier }
\index{entry |open/close modifier }
\index{sortkey @entry }
\index{sortkey @entry !subentry }
\index{sortkey @entry !subsortkey @subentry }
Of course, more combinations are possible; the following may be the longest form:
\index{sortkey @entry !subsortkey @subentry
!subsubsortkey @subsubentry |open/close modifier }
16.3
Processing the index entries
Once you are satisﬁed with the \index commands, the index is ready to be created.
Step 1 Typeset firstarticlei.tex (see Figure 16.3).
Step 2 Run the MakeIndex application on firstarticlei.idx (see Figure 16.4).
Step 3 Typeset firstarticlei.tex again.
You ﬁnd the index on page 3 of the typeset document.
Let us look at this process in detail. In step 1 (see Figure 16.3), LATEX creates the
firstarticlei.idx ﬁle:
\indexentry{Main Theorem}{1}
\indexentry{pistar@$\Pi^{*}$ construction}{1}
\indexentry{Main Theorem!exposition|(}{1}
\indexentry{Moynahan, Ernest~T.}{1}
\indexentry{lattice|textbf}{1}
\indexentry{lattice!distributive}{1}
\indexentry{lattice!distributive!complete}{1}
\indexentry{Main Theorem!exposition|)}{2}
\indexentry{Foo, Soo-Key}{2}

16.3
Processing the index entries
457
intrarti.tex
the source file
intrarti.idx
index entry listing 
          file
typeset
LATEX
Figure 16.3: Using MakeIndex, step 1.
intrarti.idx
index entry listing 
          file
intrarti.ind
index file
intrarti.ilg
the log file
Figure 16.4: Using MakeIndex, step 2.
\indexentry{Menuhin, George~A.}{2}
\indexentry{Moynahan, Ernest~T.}{2}
\indexentry{Moynahan, Ernest~T.}{2}
In step 2 (see Figure 16.4), MakeIndex processes firstarticlei.idx and cre-
ates the index ﬁle firstarticlei.ind, which contains a theindex environment with
all the index entries:

458
Chapter 16
MakeIndex
\begin{theindex}
\item Foo, Soo-Key, 2
\indexspace
\item lattice, \textbf{1}
\subitem distributive, 1
\subsubitem complete, 1
\indexspace
\item Main Theorem, 1
\subitem exposition, 1--2
\item Menuhin, George~A., 2
\item Moynahan, Ernest~T., 1, 2
\indexspace
\item $\Pi^{*}$ construction, 1
\end{theindex}
The \printindex command reads firstarticlei.ind during the next typesetting
cycle.
MakeIndex also produces the index log ﬁle firstarticlei.ilg:
This is makeindex, version 2.14 [02-Oct-2002]
(kpathsea + Thai support).
Scanning input file firstarticlei.idx....done
(12 entries accepted, 0 rejected).
Sorting entries....done (43 comparisons).
Generating output file firstarticlei.ind....done
(22 lines written, 0 warnings).
Output written in firstarticlei.ind.
Transcript written in firstarticlei.ilg.
It is important to understand that in step 1, LATEX does not process the index ent-
ries, it simply writes the arguments of the \index commands in the source ﬁle to the
idx ﬁle as arguments of \indexentry commands verbatim (that is, with no change).
MakeIndex then processes the idx ﬁle by removing the double quote marks for the
special characters, sorting the entries, and collating the page numbers. The resulting
ind ﬁle is a normal LATEX source ﬁle (you can edit it, if necessary) that is included in
the original document by the \printindex command the next time you run LATEX.
In Step 2, we run the MakeIndex application on firstarticlei.idx. How we
do this depends on the LATEX installation you have. In UNIX installations, you type
MakeIndex firstarticlei

16.4
Rules
459
at the command line. In newer user interfaces, MakeIndex is represented by an icon,
and you drop firstarticlei.idx into it. In modern installations, your editor also
runs MakeIndex.
16.4
Rules
There are some simple rules to keep in mind when entering index items.
Rule
Spaces in \index
Do not leave unnecessary spaces in the argument of an \index command.
\index{item}, \index{␣item}, and \index{item␣}
produces three diﬀerent entries.
There are options that instruct MakeIndex to ignore such spaces, but you are better oﬀ
typing the \index commands correctly in the ﬁrst place.
Rule
Spacing rules for MakeIndex
LATEX’s text spacing rules (Section 3.2.1) do not apply. MakeIndex does not follow these
rules when it sorts the index items. While LATEX ignores spaces, MakeIndex does not.
Rule
Sort keys
In \index{sortkey @item }, the sortkey is both space and case sensitive.
For instance,
\index{alpha@$\alpha$}
\index{Alpha@$\alpha$}
\index{ALPHA@$\alpha$}
represent three diﬀerent items.
Rule
Braces
In every entry, the braces must be balanced.
Normally, balancing braces is not a problem. The braces within a math formula or a TEX
expression should always be balanced. However, the \index command that creates the
entry for { with the sort key leftbrace cannot be typed as
\index{@\{}

460
Chapter 16
MakeIndex
because LATEX would give the error message
Runaway argument?
{leftbrace@\{}
! Paragraph ended before \@wrindex was complete.
There are many ways to correct this \index command. Perhaps the simplest is to deﬁne
\newcommand{\printleftbrace}{\{}
and rewrite the \index command
\index{@\printleftbrace}
This produces the entry
{, 1
There is, of course, a lot more to MakeIndex than what we have discussed in this
short introduction, but what we have covered here should do for most documents. See
Pehong Chen and Michael A. Harrison’s Index preparation and processing [10] for
more detail. Chapter 12 of The LATEX Companion, 2nd edition [56] covers MakeIndex
in great detail, including the customization of indexes.
16.5
Multiple indexes
We do multiple indexes with Enrico Gregorio’s imakeidx package.
As an example, we split the index ﬁle into two parts, Subject Index and Author
Index. We include the following three lines in the preamble:
\usepackage{imakeidx}
\makeindex[title=Subject Index]
\makeindex[name=author, title=Author Index]
Now enter each index command for authors in the following form:
\index{author}{Moynahan, Ernest~T.}
The other index commands are entered as usual.
Where you want the two indexes to appear in the typeset document, enter the com-
mands
\printindex[author]
\printindex
These two commands are usually, but not necessarily, adjacent.
If you want to typeset the indexes in the style provided by the theindex environ-
ment in your document class, invoke imakeidx with

16.7
Concluding comments
461
\usepackage[original]{imakeidx}
Also note the very useful \indexprologue command. It provides text (the argument
of the command) to be typeset between the index header and the entries.
The imakeidx package has lots of nice features; see the excellent documentation.
16.6
Glossary
Using the glossary commands is very similar to using the corresponding index com-
mands.
Instead of the
index
makeindex
commands, use the
glossary
makeglossary
commands, respectively. Glossary entries are written in the glo ﬁle, which corresponds
to the idx ﬁle. LATEX gives you no further assistance in making a glossary ﬁle. There
is no \printglossary command, theglossary environment, or MakeGlossary app-
lication. There is, however, Thomas Henlich’s makeglos package (see Section D.1).
16.7
Concluding comments
Style ﬁles are available in a very limited form also for MakeIndex. Google
makeindex style
for an up-to-date listing.
Indexing is a very complex process, so it is not surprising that there are many
index packages available. CTAN lists a number of them in the index directory. The
best known is xindy, described in detail in The LATEX Companion, 2nd edition [56].

C H A P T E R
17
Books in LATEX
Since the introduction of LATEX, the visual quality of articles published in mathematical
journals has improved dramatically. Unfortunately, the same cannot be said of books
published using LATEX. A record number of very ugly books have appeared.
It is easy to understand why. While amsart has been designed to produce high-
quality printed output, the standard book document classes do not produce attractive
books without additional work.
LATEX provides the book and the amsbook document classes to serve as founda-
tions for well-designed books. Better quality books have to use document classes de-
signed by professionals. We brieﬂy discuss logical and visual design in Section 2.3.
So this chapter is not about how to produce a ﬁnished book using LATEX. Our
goal is much more modest, how to prepare a book manuscript for your publisher. In
Section 17.1 we describe the book document classes book and amsbook. The table of
contents and lists of ﬁgures and tables are discussed in Section 17.2.
Typesetting a book involves dozens of ﬁles. Section 17.3.3 gives some tips on how
to organize them. Section 17.4 covers logical design. Section 17.5 deals with the ﬁnal
preparation of your edited manuscript for your publisher. Finally, Section 17.6 suggests
a few more things to do if you typeset your book yourself.
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1_17
463

464
Chapter 17
Books in LATEX
17.1
Book document classes
In this section, we brieﬂy discuss the way in which book and amsbook, the two standard
book document classes, diﬀer from the corresponding article document classes.
17.1.1
Sectioning
Book document classes have chapters, invoked with the \chapter command and parts,
invoked with \part. The \part command is generally used to group chapters in longer
documents, for instance in this book. Parts have no eﬀect on the numbering of chapters,
sections, and so on, so Chapter 1 of Part I is not numbered as I.1 but as 1.
Both \chapter and \part take a title as an argument, but the \chapter com-
mand also has an optional argument:
\chapter[short_title ]{title }
The optional short_title argument is used in the running head. You may need to
protect any fragile commands in title and short_title with the \protect com-
mand (see Section 3.3.3).
Here is the whole hierarchy:
\part
\chapter
\section
\subsection
\subsubsection
\paragraph
\subparagraph
Book document classes, as a rule, do not number subsubsections or any of the
sectioning divisions below that level.
Equations in chapters
By default, equations are numbered from 1 within chapters. So in Chapter 1 as well as
in Chapter 3, the equations are numbered (1), (2), and so forth. If you have the
\numberwithin{equation}{chapter}
command in the preamble, then equations in Chapter 2 are numbered as (2.1), (2.2),
and so on.

17.1
Book document classes
465
17.1.2
Division of the body
The book document classes formalize the division of the body into three parts.
Front matter The material that appears in the front of the document, including the title
pages (normally four), table of contents, preface, introduction, and so on. LATEX
numbers these pages using roman numerals. The front matter is introduced with
the \frontmatter command.
Main matter The main part of the book, including the appendices if any. Page num-
bering starts from 1 using arabic numerals. The main matter is introduced with
the \mainmatter command.
Back matter Material that appears in the back of the book, including the bibliography,
index, and various other sections, such as the colophon, afterword, and so on. The
back matter is introduced with the \backmatter command.
For the book document class—and the document classes built on it—in the front
and back matter, the \chapter command does not produce a chapter number but the
title is listed in the table of contents. So you can start your introduction with
\chapter{Introduction}
Within such a chapter, you should use the *-ed forms of the sectioning commands
\section, \subsection, and so on, otherwise you have sections with numbers such
as 0.1.
In the main matter, the \appendix command marks the beginning of the appen-
dices. Each subsequent chapter becomes a new appendix. For example,
\appendix
\chapter{A proof of the Main Theorem}\label{A:Mainproof}
produces an appendix with the given title.
Note that appendices may be labeled and cross-referenced. In Appendix A, sec-
tions are numbered A.1, A.2, and so on, subsections in A.1 are numbered A.1.1, A.1.2,
and so on. The precise form these numbers take depends, of course, on the document
class, packages, and user-speciﬁc changes (see Section 14.5.1).
See Section 17.3.1 for a detailed example.
The \chapter and \chapter* commands always produce a title listed in the table
of contents for the amsbook document class, and the document classes built on it.
The following two questions are frequently asked:
My book has only one appendix. How can I get it to be called just “Appendix”,
not “Appendix A”?
The single appendix in my book is being labeled “Appendix A”. How can I change
this to just “Appendix”? This appendix has a title, so the answer to the preceding
question doesn’t apply. These questions are answered in the author FAQ of the AMS,
go to
http://www.ams.org/authors/author-faq.html

466
Chapter 17
Books in LATEX
17.1.3
Document class options
The options and defaults for the book document classes are the same as those of other
document classes (see Sections 9.5 and 10.1.2) with a few exceptions.
Two-sided printing
Options:
twoside
default
oneside
The twoside option formats the output for printing on both sides of a page.
Titlepage
Options:
titlepage
default
notitlepage
The titlepage option creates a separate title page. The notitlepage option creates
no separate pages.
Chapter start
Options:
openright
default
openany
A chapter always starts on a new page. The book document class—and the doc-
ument classes built on it—uses the option openright to start each chapter on an odd
page, while the option openany starts each chapter on the ﬁrst available new page. If
you use the default option, end each chapter with the command
\cleardoublepage
Then if a chapter ends on an odd page, a blank page is added with no header or page
number. The \cleardoublepage command is correctly coded if you use amsbook.
Otherwise, use the package cleardoublepage.sty (in the samples folder).
The amsbook document class—and the document classes built on it—automatic-
ally clears to a right-hand page and leaves a totally blank page if needed.
17.1.4
Title pages
The book document class supports the commands: \title, \author, \date, and
\maketitle (see Section 10.1.1). The amsbook document class supports the same
commands as amsart (see Section 9.2), except for \date.
You can design your own title page within the titlepage environment, which
does not require the use of the \maketitle command. Title pages for books, of course,
should be created by a book designer for the publisher.

17.2
Tables of contents, lists of tables and ﬁgures
467
17.2
Tables of contents, lists of tables and ﬁgures
A long document, as a rule, has a table of contents. It may also include a list of ﬁgures
and a list of tables.
17.2.1
Tables of contents
What goes into the table of contents?
For the amsbook document class—and the document classes built on it—all titles,
not the short titles, of the sectioning commands, whether *-ed or not, subject only to the
value of the tocdepth counter, as described in the last subsection of Section 14.5.1.
For instance, if tocdepth is set to 2, the default, then the titles of chapters, sections,
and subsections are included in the table of contents, and subsubsections are excluded.
This leaves us with the problem, what do we do if the title is too long? You cannot
break the line with \\, because this would the appear in table of contents. The AMS
coded the following solution: enter the line break in the form
\except{toc}{\linebreak}
For the book document class—and the document classes built on it—the title or
optional argument of the sectioning commands, subject to the value of the tocdepth
counter, with the following exceptions:
In Section 8.4.1 we discuss the *-ed versions of sectioning commands. They are
excluded from the table of contents.
If the sectioning command has a short title, then it is the short title that is utilized.
The example in Section 9.2 shows why this is important. If you have \\ in the title,
you must have a short title without it, otherwise the linebreak would show up in the
running head and the table of contents.
When you typeset your document with a table of contents, LATEX creates a ﬁle with
the toc extension. The next time the document is typeset, the toc ﬁle is typeset too
and included in your typeset document at the point where the command
\tableofcontents
appears in the source ﬁle, normally in the front matter. If your source ﬁle is named
myart.tex, the toc ﬁle is named myart.toc. This ﬁle lists all the sectioning units as
well as their titles and page numbers.
If you already have a toc ﬁle, the \tableofcontents command typesets a table
of contents using the previously created toc ﬁle and creates a new toc ﬁle.
LATEX adds a line to the table of contents, formatted like a section title, if you
include the command
\addcontentsline{toc}{section}{text_to_be_added }

468
Chapter 17
Books in LATEX
in your source ﬁle. There are three arguments:
1. The ﬁrst argument informs LATEX that a line, the third argument, should be added to
the toc ﬁle.
2. The second argument speciﬁes how the line should be formatted in the table of con-
tents. In our example, the second argument is section, so the line is formatted as
a section title in the table of contents. The second argument must be the name of a
sectioning command.
3. The third argument is the text to be added.
You can add an unformatted line to the table of contents with the command
\addtocontents{toc}{text_to_be_added }
Such a command can also be used to add vertical spaces into the table of contents.
For instance, if you want to add some vertical space before a part, you should insert the
following line before the sectioning command for the part:
\addtocontents{toc}{\protect\vspace{10pt}}
Tip
If you have a \addcontentsline or \addtocontents command in a ﬁle that is
\include-ed, then place it as a ﬁrst line of this ﬁle.
The toc ﬁle is easy to read. The following are typical lines from the table of
contents ﬁle for a document using the book document class:
\contentsline{section}{\numberline {5-4.}Top matter}{119}
\contentsline{subsection}{\numberline {5-4.1.}
Article info}{119}
\contentsline {subsection}{\numberline {5-4.2.}
Author info}{121}
Section 14.5.1 explains how you can specify which levels of sectioning appear in the
table of contents. Section 2.3 of The LATEX Companion, 2nd edition [56] lists the style
parameters for the table of contents. It also shows you how to deﬁne new toc-like ﬁles
and use multiple tables of contents in a single document, for instance, adding a mini
table of contents for each chapter.
Tip
You may have to typeset the document three times to create the table of contents and
set the numbering of the rest of the document right.

17.2
Tables of contents, lists of tables and ﬁgures
469
1. The ﬁrst typesetting creates the toc ﬁle.
2. The second inserts the table of contents with the old page numbers into the typeset
document, re-records in the aux ﬁle the page numbers, which may have changed as
a result of the insertion, and cross-references in the aux ﬁle, and generates a new
toc ﬁle with the correct page numbers.
3. The third typesetting uses these new aux and toc ﬁles to typeset the document cor-
rectly and creates a new toc ﬁle.
Fragile commands in a movable argument, such as a section (short) title, must be
\protect-ed (see Section 3.3.3). Here is a simple example using the table of contents.
If the document contains the \section command
\section{The function \( f(x^{2}) \)}
the section title is stored in the toc ﬁle as
\contentsline {section}{\numberline
{1}The function\relax $ f(x^{2}) \relax \GenericError { }
{LaTeX Error: Bad math environment delimiter}{Your
command was ignored.\MessageBreak Type I <command>
<return> to replace it with another command,\MessageBreak
or <return> to continue without it.}}{1}
and the log ﬁle contains the message
! LaTeX Error: Bad math environment delimiter.
...
l.1 ...continue without it.}}{1}
Error messages usually refer to a line in the source ﬁle, but in this case the error message
refers to a line in the toc ﬁle.
The correct form for this section title is
\section{The function \protect\( f(x^{2}) \protect\)}
or, even simpler,
\verb+\section{The function $f(x^{2})$}
Note that this example is merely an illustration of unprotected fragile commands in
movable arguments. As a rule, avoid using formulas in (sectioning) titles.

470
Chapter 17
Books in LATEX
17.2.2
Lists of tables and ﬁgures
If you place a \listoftables command in the document, LATEX stores information for
the list of tables in a lot ﬁle. The list of tables is inserted into the body of your document
at the point where the command appears, normally in the front matter, following the
table of contents.
A list of ﬁgures, similar to a list of tables, can be compiled with the command
\listoffigures. This command creates an auxiliary ﬁle with the extension lof.
An optional argument of the \caption commands in your tables and ﬁgures can
replace the argument in the list of tables and ﬁgures. Typically, the optional argument
is used to specify a shorter caption for the list of tables or list of ﬁgures. There are other
uses. For instance, you may notice that, as a rule, captions should be terminated by
periods. If in the list of tables or list of ﬁgures, your book style ﬁlls the space between
the text and the page number with dots, the extra period looks bad. This problem goes
away if you use the following form of the \caption command:
\caption[title ]{title. }
There are analogs of the table of contents commands for use with tables and ﬁgures.
The command
\addtocontents{lot}{line_to_add }
adds a line to the list of tables or to the list of ﬁgures with the ﬁrst argument lof.
17.2.3
Exercises
For exercises, amsbook provides the xcb environment. It is used for a series of exercises
at the end of a section or chapter. The argument of the environment speciﬁes the phrase
(such as Exercises) to begin the list:
\begin{xcb}{Exercises}
\begin{enumerate}
\item A finite lattice $L$ is modular if{f} it does not
contain a pentagon.\label{E:pent}
\item Can the numbers of covering pairs in\label{E:incr}
Exercise~\ref{E:pent} be increased?\label{E:incr}+
\end{enumerate}
\end{xcb}
which typesets as
Exercises
(1) A ﬁnite lattice L is modular iff it does not contain a pentagon.
(2) Can the numbers of covering pairs in Exercise 1 be increased?

17.3
Organizing the ﬁles for a book
471
17.3
Organizing the ﬁles for a book
An article is typically one tex ﬁle and maybe some PDF ﬁles for the illustrations. On the
other hand, a book, like this one, is composed of hundreds of ﬁles. In this section,
I describe how the ﬁles for a book like this may be organized.
There are three commands that help with the organization:
\include
\includeonly
\graphicspath
We discuss these commands in this section.
17.3.1
The folders and the master document
All the ﬁles for this book are in a folder MiL5 and in this folder the most important
document is MiL5.tex, the master document.
The master document, MiL5.tex reads, in a somewhat simpliﬁed form, as follows:
%MiL5 master document
\documentclass[leqno]{book}
\usepackage{MiL5}
\usepackage{makeidx}
\makeindex
\usepackage{cleardoublepage}
\includeonly{
%frontmatter,
%intro,
%Chapter1,% terminology
...
Chapter17,% books
%appA,% Math symbol tables
...
}
\begin{document}
\frontmatter
\include{frontmatter}
\tableofcontents
\listoftables\listoffigures
\include{intro}%Intro
\mainmatter
\include{Chapter1}%Mission Impossible
...
\include{Chapter17}% Books
\appendix+\\
\include{AppendixA}%Math symbol tables+\\
... +\\

472
Chapter 17
Books in LATEX
\backmatter+\\
\printindex+\\
\end{document}+\\[8pt]
Some parts of the master ﬁle deserve comment, for example, the third line,
\usepackage{MiL5}
loads the command ﬁle
MiL5.sty
which contains all the commands deﬁned for the book and the code for the book style.
Since the book style is based on book.cls, in line 5, we load the makeidx package
and print the index with \printindex (see Section 16.1).
Line 7 states
\usepackage{cleardoublepage}
This creates blank pages after chapters that end on an odd page number (see
Section 17.1.3). For the three ...matter commands, see Section 17.1.2.
17.3.2
Inclusion and selective inclusion
This book is pieced together by the \include commands in the master document. For
example,
\include{Chapter17}
inserts the contents of the ﬁle Chapter17.tex, starting on a new page, as though its
contents had been typed at that place in the document. The master document for this
book has a lot of \include commands...
Rule
File termination
Terminate every ﬁle you \include with an \endinput command.
If you terminate an \include-ed ﬁle with \end{document}, LATEX gives a warn-
ing such as:
(\end occurred when \iftrue on line 6 was incomplete)
(\end occurred when \ifnum on line 6 was incomplete)
If you use \include commands in the master ﬁle, as in the example in Section 17.3.1,
then you can use the \includeonly command for selective inclusion. The lines of the
\includeonly command parallel the \include commands. Block comment all the
lines of the argument of the \includeonly command, and uncomment the chapter you
are working on. In the example above, I am working on this chapter.
The argument of the \includeonly command is a list of ﬁles separated by com-
mas. If you want to typeset the whole book, uncomment all the lines.

17.4
Logical design
473
17.3.3
Organizing your ﬁles
The MiL5 folder, containing the ﬁles of this book, contains MiL5.tex, the master doc-
ument, the command ﬁle MiL5.sty, and all the tex ﬁles listed in the master document,
that is, the chapters, the frontmatter, the introduction, the appendices, and of course, all
the auxiliary ﬁles that LATEX creates.
This book contains about 300 illustrations in a subfolder Graphics of the folder
MiL5.tex. We have to tell LATEX to look for the illustrations in this folder. We do this
with the command
\graphicspath{{Graphics/}}
in the preamble. If you have two folders, Illustr1 and Illustr2 for illustrations, the
\includegraphics command takes the form
\graphicspath{{Illustr1/}{Illustr2/}}
Even if you have more than one folder for the illustrations, you must make sure that
each graphics ﬁle has a unique name.
We place the \graphicspath command in MiL5.sty.
In the above commands, / is appropriate for Mac and UNIX computers. For a
Windows computer, use \ instead.
If you submit a dvi ﬁle, you cannot use the \graphicspath command.
17.4
Logical design
The discussion of logical and visual design in Section 2.3 applies to books even more
than to articles. Since books are long and complex documents, errors in the logical
design are much harder to correct.
Let us review some common sense rules.
Rule 1
Stick with the sectioning commands provided by the document class. Deﬁne the non-
standard structures you wish to use as environments.
Here is an example which is obviously bad:
\vspace{18pt}
\noindent \textbf{Theorem 1.1.}
\textit{This is bad.}
\vspace{18pt}

474
Chapter 17
Books in LATEX
And a good way to achieve the same result:
\begin{theorem}\label{T:Goodtheorem}
This is a good theorem.
\end{theorem}
The bad example creates a number of diﬃculties.
You have to number the theorems yourself. Adding, deleting, and rearranging theo-
rems becomes diﬃcult and updating cross-references is even harder.
It is diﬃcult to keep such constructs consistent.
If the publisher decides to increase the white space before and after the theorems to
20 points, ﬁnding and changing all the appropriate commands becomes a tedious and
error prone task.
Rule 2
Deﬁne frequently used constructs as commands.
Rather than
\textbf{Warning! Do not exceed this amount!}
deﬁne
\newcommand{\important}[1]{\textbf{#1}}
and type your warnings as
\important{Warning! Do not exceed this amount!}
You or your editor can then change all the warnings to a diﬀerent style with ease.
Rule 3
Avoid text style commands.
If you use small caps for acronyms, do not type
\textsc{ibm}
but rather deﬁne
\newcommand{\ibm}{\textsc{ibm}}
and then
\ibm

17.4
Logical design
475
or more generally
\newcommand{\acronym}[1]{\textsc{#1}}
and then
\verb+\acronym{ibm}+
Rule 4
Avoid white space commands.
Occasionally, you may feel that there should be some white space separating two para-
graphs, so you do the following:
paragraph 1
\medskip
paragraph 2
It would be better to deﬁne a new command, say \separate, as
\newcommand{\separate}{\medskip}
and type the previous example as
paragraph 1
\separate
paragraph 2
Now such white space can be adjusted throughout the entire document by simply re-
deﬁning one command. Note that redeﬁning \medskip itself may have unintended side
eﬀects:
Many environments depend on LATEX’s deﬁnition of \medskip.
You may have used \medskip in other situations as well.
Here is a short list of commands should not redeﬁne:
\bigskip
\hfil
\hspace
\parskip
\vfill
\vspace
\break
\hfill
\kern
\smallskip
\vglue
\eject
\hglue
\medskip
\vfil
\vskip

476
Chapter 17
Books in LATEX
17.5
Final preparations for the publisher
Throughout this book, there are a number of “don’ts”. Most are practices you should
avoid while writing articles. When writing a book, it is even more important not to
violate these rules.
When the editors, including the copy editor, are ﬁnished with your manuscript
and you have the document class designed for the book, then you can start on the ﬁnal
preparations.
Step 1
Eliminate all TEX commands.
TEX commands, that is, Plain TEX commands that are not part of LATEX (not listed
as LATEX commands in the index of this book) may interfere with LATEX in unexpected
ways. They may also cause problems with the style ﬁle that is created for your book.
Step 2
Collect all your custom commands and environments together in one place, preferably
in a separate command ﬁle (see Section 14.3).
Step 3
Make sure that custom commands for notations and custom environments for structures
are used consistently throughout your document.
This book uses the command \doc for document names, so firstarticle is
typed as \doc{firstarticle}. Of course, \texttt{firstarticle} gives the same
result,but if you intermix \doc{firstarticle} and \texttt{firstarticle} com-
mands, you lose the ability to easily change the way document names are displayed.
Step 4
Watch out for vertical white space adding up.
Do not directly follow one displayed math environment with another. Multiple adja-
cent lines of displayed mathematics should all be in the same environment.
If your style ﬁle uses interparagraph spacing, avoid beginning paragraphs with dis-
played math.
For instance,
\[
x=y
\]

17.5
Final preparations for the publisher
477
\[
x=z
\]
is wrong. Use, instead, an align or gather environment.
Step 5
If possible, do not place “tall” mathematical formulas inline. All formulas that might
change the interline spacing, as a rule, should be displayed.
You can ﬁnd examples on pages 138 and 368. Here is one more example, double hat
accents used inline: ̂̂𝐴.
Step 6
Read the log ﬁle.
Watch for line-too-wide warnings (see Section 1.4).
Check for font substitutions (see Section 3.6.7).
Adobe Acrobat Professional has a preﬂight utility. It will check whether the PDF
version of your typeset document has all the fonts it requires.
Step 7
Do not assume that gray boxes or color illustrations appear when published exactly the
way that they look on your monitor or printer.
Color work requires calibration of monitors and printers. It is often best left to the
experts at the publisher.
Step 8
Do not assume that the application that created your PDF ﬁles (see Section 8.4.3) can
create high-quality PDF ﬁles.
Many applications can create PDF ﬁles or convert ﬁles to PDF format. Very few do it
right. Ask your publisher what applications they recommend.
Font substitutions can also cause problems:
A font that was used in typesetting the document may not be the font you intended.
Missing fonts are substituted and the substitute fonts are rarely satisfactory.
A special trap: Your publisher may have more, or maybe fewer, fonts than you do!
As a result, the font substitutions on your publisher’s system may be diﬀerent from
those on yours. Make sure that the fonts you use are not substituted.

478
Chapter 17
Books in LATEX
17.6
If you create the PDF ﬁle for your book
Many publishers take your manuscript, prepared as described in Section 17.5, and guide
it through the ﬁnal steps for printing. Some books, however, are prepared by the authors
for printing using a custom document class for books and submitted to the publisher as
PDF ﬁles. If your book falls into this category, there are a few more things you should
do before you create the ﬁnal PDF ﬁle for your book.
Adjust the pages
Make sure that you are satisﬁed with the way the document is broken into pages by LATEX
and with the placement of the figure and table environments (see Section 8.4.3).
If necessary, you should make last-minute changes to adjust page breaks. You may ﬁnd
the \enlargethispage command (see Section 3.7.3) very helpful at this stage. Just
be sure to apply it on both facing pages.
To ensure that
Page numbers in the index are correct
\pageref references (see Section 8.4.2) are correct
Marginal comments (see Section 3.9.4) are properly placed
Tables and ﬁgures are properly placed
insert page breaks where necessary. Where pages break, add the three commands
\linebreak, \pagebreak, and \noindent. Here is an example. The bottom of page 3
and the top of page 4 of my book General Lattice Theory [28] are shown in Figure 17.1.
In other words, lattice theory singles out a special type of poset for detailed
investigation. To make such a deﬁnition worthwhile, it must be shown that this
class of posets is a very useful class, that there are many such posets in various
branches of mathematics (analysis, topology, logic, algebra, geometry, and so
on), and that a general study of these posets will lead to a better understanding
of the behavior of the examples. This was done in the ﬁrst edition of G. Birkhoﬀ’s
4
I. First Concepts
Lattice Theory [1940]. As we go along, we shall see many examples, most of them
in the exercises. For a general survey of lattices in mathematics, see G. Birkhoﬀ
[1967] and H. H. Crapo and G.-C. Rota [1970].
Figure 17.1: A page break.

17.6
If you create the PDF ﬁle for your book
479
Now let us assume that we have to manually do this page break because some index
items attached to this paragraph generate incorrect page numbers. The paragraph split
by the page break is
In other words, lattice theory singles out a special type
of poset for detailed investigation. To make such a
definition worthwhile, it must be shown that this class
of posets is a very useful class, that there are many
such posets in various branches of mathematics (analysis,
topology, logic, algebra, geometry, and so on), and that
a general study of these posets will lead to a better
understanding of the behavior of the examples.
This was done in the first edition of
G.~Birkhoff’s
\emph{Lattice Theory} \cite{gB40}. As we go along,
we shall see many examples, most of them in the
exercises. For a general survey of lattices in
mathematics, see G.~Birkhoff \cite{gB67} and H.~H.~Crapo
and G.-C.~Rota \cite{CR70}.
When typesetting this paragraph, LATEX inserts a page break following
This was done in the first edition of G.~Birkhoff’s+.
So we edit four lines as follows:
understanding of the behavior of the examples.
This was done in the first edition of
G.~Birkhoff’s
\linebreak
\pagebreak
\noindent \emph{Lattice Theory} \cite{gB40}. As we go
along, we shall see many examples, most of them in the
This change does not aﬀect the appearance of the typeset page, but now pages 3 and 4
are separated by a \pagebreak. Make sure that any \index or \label commands are
moved to the appropriate half of the paragraph. Now all index commands generate the
correct page numbers.
Of course, if the page break is between paragraphs, only the \pagebreak com-
mand is needed. If the break occurs in the middle of a word, use \-\linebreak to add
a hyphen.
This method works about 95 percent of the time. Occasionally, you have to drop
either the \linebreak or the \pagebreak command.

480
Chapter 17
Books in LATEX
Check for missing fonts and other defects
Open the PDF ﬁle of your book in Adobe Reader (or even better, in Adobe Acrobat Pro).
Under File, go to Properties... and click on the Fonts tab. You will ﬁnd a long
list of fonts. Each one should be marked Embedded Subset. If all your fonts are
embedded, you are in good shape.
Adobe Acrobat Pro has an excellent set of utilities to check whether your PDF ﬁle
is ready for printing. You ﬁnd them under Preflight. Adobe Acrobat Pro will correct
all the mistakes it ﬁnds in the ﬁle and presents a detailed report.
Other adjustments
Move the figure and table environments (see Section 8.4.3) physically close to
where they appear in the typeset version, and change the optional argument of the
figure and table environments to !h.
Balance the white space on each page as necessary.
Generate the index only after the page breaks are ﬁxed.
Polish the auxiliary ﬁles
Typeset the document one last time and then place the \nofiles command in the
preamble (see Section C.2.4) to make sure that the auxiliary ﬁles are not overwritten.
Normally, you should not have to edit the table of contents (toc) ﬁle or the lot and
lof ﬁles (see Section 17.2) and your style ﬁle should take care of the formatting.
Sometimes, however, an unfortunate page break makes editing necessary. In an ap-
propriate place, you may want to add to the text the command
\addtocontents{toc}{\pagebreak}
to avoid such edits.
Create the index (ind) ﬁle from the new aux ﬁle, as described in Section 16.3. A lot of
help is available in The Chicago Manual of Style, 16th edition [11]; it has a section on
bad breaks, remedies, and Continued lines in the index. Break the ind ﬁle into pages.
To minimize bad breaks, use the \enlargethispage command where necessary
(see Section 3.7.3). Add any Continued entries.
Many book document classes, including book, have two problems with the Index.
(i) There is no Index entry in the Table of Contents.
(ii) The ﬁrst page of the Index is numbered.
These are easy to correct. Add to the beginning of the ind ﬁle the command
\thispagestyle{empty}
and precede the \printindex with
\addtocontents{toc}{Index}

APPENDIX
A
Math symbol tables
A.1
Hebrew and Greek letters
Hebrew letters
Type
Typeset
\aleph
ℵ
\beth
ℶ
\daleth
ℸ
\gimel
ℷ
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1
481

482
Appendix A
Math symbol tables
Greek letters
Lowercase
Type
Typeset
Type
Typeset
Type
Typeset
\alpha
𝛼
\iota
𝜄
\sigma
𝜎
\beta
𝛽
\kappa
𝜅
\tau
𝜏
\gamma
𝛾
\lambda
𝜆
\upsilon
𝜐
\delta
𝛿
\mu
𝜇
\phi
𝜙
\epsilon
𝜖
\nu
𝜈
\chi
𝜒
\zeta
𝜁
\xi
𝜉
\psi
𝜓
\eta
𝜂
\pi
𝜋
\omega
𝜔
\theta
𝜃
\rho
𝜌
\varepsilon
𝜀
\varpi
𝜛
\varsigma
𝜍
\vartheta
𝜗
\varrho
𝜚
\varphi
𝜑
\digamma
ϝ
\varkappa
𝜘
Uppercase
Type
Typeset
Type
Typeset
Type
Typeset
\Gamma
Γ
\Xi
Ξ
\Phi
Φ
\Delta
Δ
\Pi
Π
\Psi
Ψ
\Theta
Θ
\Sigma
Σ
\Omega
Ω
\Lambda
Λ
\Upsilon
Υ
\varGamma
𝛤
\varXi
𝛯
\varPhi
𝛷
\varDelta
𝛥
\varPi
𝛱
\varPsi
𝛹
\varTheta
𝛩
\varSigma
𝛴
\varOmega
𝛺
\varLambda
𝛬
\varUpsilon
𝛶

A.2
Binary relations
483
A.2
Binary relations
Type
Typeset
Type
Typeset
<
<
>
>
=
=
:
∶
\in
∈
\ni or \owns
∋
\leq or \le
≤
\geq or \ge
≥
\ll
≪
\gg
≫
\prec
≺
\succ
≻
\preceq
⪯
\succeq
⪰
\sim
∼
\approx
≈
\simeq
≃
\cong
≅
\equiv
≡
\doteq
≐
\subset
⊂
\supset
⊃
\subseteq
⊆
\supseteq
⊇
\sqsubseteq
⊑
\sqsupseteq
⊒
\smile
⌣
\frown
⌢
\perp
⟂
\models
⊧
\mid
∣
\parallel
∥
\vdash
⊢
\dashv
⊣
\propto
∝
\asymp
≍
\bowtie
⋈
\sqsubset
⊏
\sqsupset
⊐
\Join
⨝
Note the \colon command used in 𝑓∶𝑥→𝑥2, typed as
f \colon x \to x^2

484
Appendix A
Math symbol tables
More binary relations
Type
Typeset
Type
Typeset
\leqq
≦
\geqq
≧
\leqslant
⩽
\geqslant
⩾
\eqslantless
⪕
\eqslantgtr
⪖
\lesssim
≲
\gtrsim
≳
\lessapprox
⪅
\gtrapprox
⪆
\approxeq
≊
\lessdot
⋖
\gtrdot
⋗
\lll
⋘
\ggg
⋙
\lessgtr
≶
\gtrless
≷
\lesseqgtr
⋚
\gtreqless
⋛
\lesseqqgtr
⪋
\gtreqqless
⪌
\doteqdot
≑
\eqcirc
≖
\circeq
≗
\triangleq
≜
\risingdotseq
≓
\fallingdotseq
≒
\backsim
∽
\thicksim
∼
\backsimeq
⋍
\thickapprox
≈
\preccurlyeq
≼
\succcurlyeq
≽
\curlyeqprec
⋞
\curlyeqsucc
⋟
\precsim
≾
\succsim
≿
\precapprox
⪷
\succapprox
⪸
\subseteqq
⫅
\supseteqq
⫆
\Subset
⋐
\Supset
⋑
\vartriangleleft
⊲
\vartriangleright
⊳
\trianglelefteq
⊴
\trianglerighteq
⊵
\vDash
⊨
\Vdash
⊩
\Vvdash
⊪
\smallsmile
⌣
\smallfrown
⌢
\shortmid
∣
\shortparallel
∥
\bumpeq
≏
\Bumpeq
≎
\between
≬
\pitchfork
⋔
\varpropto
∝
\backepsilon
϶
\blacktriangleleft
◀
\blacktriangleright
▶
\therefore
∴
\because
∵

A.2
Binary relations
485
Negated binary relations
Type
Typeset
Type
Typeset
\neq or \ne
≠
\notin
∉
\nless
≮
\ngtr
≯
\nleq
≰
\ngeq
≱
\nleqslant

\ngeqslant

\nleqq

\ngeqq

\lneq
⪇
\gneq
⪈
\lneqq
≨
\gneqq
≩
\lvertneqq
≨
\gvertneqq
≩
\lnsim
⋦
\gnsim
⋧
\lnapprox
⪉
\gnapprox
⪊
\nprec
⊀
\nsucc
⊁
\npreceq

\nsucceq

\precneqq
⪵
\succneqq
⪶
\precnsim
⋨
\succnsim
⋩
\precnapprox
⪹
\succnapprox
⪺
\nsim
≁
\ncong
≇
\nshortmid
∤
\nshortparallel
∦
\nmid
∤
\nparallel
∦
\nvdash
⊬
\nvDash
⊭
\nVdash
⊮
\nVDash
⊯
\ntriangleleft
⋪
\ntriangleright
⋫
\ntrianglelefteq
⋬
\ntrianglerighteq
⋭
\nsubseteq
⊈
\nsupseteq
⊉
\nsubseteqq

\nsupseteqq

\subsetneq
⊊
\supsetneq
⊋
\varsubsetneq
⊊
\varsupsetneq
⊋
\subsetneqq
⫋
\supsetneqq
⫌
\varsubsetneqq
⫋
\varsupsetneqq
⫌

486
Appendix A
Math symbol tables
A.3
Binary operations
Type
Typeset
Type
Typeset
+
+
-
−
\pm
±
\mp
∓
\times
×
\cdot
⋅
\circ
◦
\bigcirc
○
\div
÷
\bmod
mod
\cap
∩
\cup
∪
\sqcap
⊓
\sqcup
⊔
\wedge or \land
∧
\vee or \lor
∨
\triangleleft
⊲
\triangleright
⊳
\bigtriangleup
△
\bigtriangledown
▽
\oplus
⊕
\ominus
⊖
\otimes
⊗
\oslash
⊘
\odot
⊙
\bullet
∙
\dagger
†
\ddagger
‡
\setminus
⧵
\smallsetminus
∖
\wr
≀
\amalg
⨿
\ast
∗
\star
⋆
\diamond
⋄
\lhd
⊲
\rhd
⊳
\unlhd
⊴
\unrhd
⊵
\dotplus
∔
\centerdot
·
\ltimes
⋉
\rtimes
⋊
\leftthreetimes
⋋
\rightthreetimes
⋌
\circleddash
⊝
\uplus
⊎
\barwedge
⊼
\doublebarwedge
⩞
\curlywedge
⋏
\curlyvee
⋎
\veebar
⊻
\intercal
⊺
\doublecap or \Cap
⋒
\doublecup or \Cup
⋓
\circledast
⊛
\circledcirc
⊚
\boxminus
⊟
\boxtimes
⊠
\boxdot
⊡
\boxplus
⊞
\divideontimes
⋇
\vartriangle
▵
\And
ς

A.4
Arrows
487
A.4
Arrows
Type
Typeset
Type
Typeset
\leftarrow
←
\rightarrow or \to
→
\longleftarrow
⟵
\longrightarrow
⟶
\Leftarrow
⇐
\Rightarrow
⇒
\Longleftarrow
⟸
\Longrightarrow
⟹
\leftrightarrow
↔
\longleftrightarrow
⟷
\Leftrightarrow
⇔
\Longleftrightarrow
⟺
\uparrow
↑
\downarrow
↓
\Uparrow
⇑
\Downarrow
⇓
\updownarrow
↕
\Updownarrow
⇕
\nearrow
↗
\searrow
↘
\swarrow
↙
\nwarrow
↖
\iff
⟺
\mapstochar

\mapsto
↦
\longmapsto
⟼
\hookleftarrow
↩
\hookrightarrow
↪
\leftharpoonup
↼
\rightharpoonup
⇀
\leftharpoondown
↽
\rightharpoondown
⇁
\leadsto
⇝
\leftleftarrows
⇇
\rightrightarrows
⇉
\leftrightarrows
⇆
\rightleftarrows
⇄
\Lleftarrow
⇚
\Rrightarrow
⇛
\twoheadleftarrow
↞
\twoheadrightarrow
↠
\leftarrowtail
↢
\rightarrowtail
↣
\looparrowleft
↫
\looparrowright
↬
\upuparrows
⇈
\downdownarrows
⇊
\upharpoonleft
↿
\upharpoonright
↾
\downharpoonleft
⇃
\downharpoonright
⇂
\leftrightsquigarrow
↭
\rightsquigarrow
⇝
\multimap
⊸
\nleftarrow
↚
\nrightarrow
↛
\nLeftarrow
⇍
\nRightarrow
⇏
\nleftrightarrow
↮
\nLeftrightarrow
⇎
\dashleftarrow
⤎
\dashrightarrow
⤏
\curvearrowleft
↶
\curvearrowright
↷
\circlearrowleft
↺
\circlearrowright
↻
\leftrightharpoons
⇋
\rightleftharpoons
⇌
\Lsh
↰
\Rsh
↱

488
Appendix A
Math symbol tables
A.5
Miscellaneous symbols
Type
Typeset
Type
Typeset
\hbar
ℏ
\ell
𝓁
\imath
𝚤
\jmath
𝚥
\wp
℘
\partial
𝜕
\Im
ℑ
\Re
ℜ
\infty
∞
\prime
′
\emptyset
∅
\varnothing
∅
\forall
∀
\exists
∃
\smallint
∫
\triangle
△
\top
⊤
\bot
⊥
\P
¶
\S
§
\dag
†
\ddag
‡
\flat
♭
\natural
♮
\sharp
♯
\angle
∠
\clubsuit
♣
\diamondsuit
♢
\heartsuit
♡
\spadesuit
♠
\surd
√
\nabla
∇
\pounds
£
\neg or \lnot
¬
\Box
□
\Diamond
◊
\mho
℧
\hslash
ℏ
\complement
∁
\backprime
‵
\nexists
∄
\Bbbk
𝕜
\diagup
⟋
\diagdown
⟍
\blacktriangle
▴
\blacktriangledown
▾
\triangledown
▿
\eth
ð
\square
□
\blacksquare
■
\lozenge
◊
\blacklozenge
⧫
\measuredangle
∡
\sphericalangle
∢
\circledS
Ⓢ
\bigstar
★
\Finv
Ⅎ
\Game
⅁

A.6
Delimiters
489
A.6
Delimiters
Name
Type
Typeset
left parenthesis
(
(
right parenthesis
)
)
left bracket
[ or \lbrack
[
right bracket
] or \rbrack
]
left brace
\{ or \lbrace
{
right brace
\} or \rbrace
}
backslash
\backslash
∖
forward slash
/
∕
left angle bracket
\langle
⟨
right angle bracket
\rangle
⟩
vertical line
| or \vert
|
double vertical line
\| or \Vert
‖
left ﬂoor
\lfloor
⌊
right ﬂoor
\rfloor
⌋
left ceiling
\lceil
⌈
right ceiling
\rceil
⌉
upward
\uparrow
↑
double upward
\Uparrow
⇑
downward
\downarrow
↓
double downward
\Downarrow
⇓
up-and-down
\updownarrow
↕
double up-and-down
\Updownarrow
⇕
upper-left corner
\ulcorner
⌜
upper-right corner
\urcorner
⌝
lower-left corner
\llcorner
⌞
lower-right corner
\lrcorner
⌟

490
Appendix A
Math symbol tables
A.7
Operators
“Pure” operators, with no limits
Type
Typeset
Type
Typeset
Type
Typeset
Type
Typeset
\arccos
arccos
\cot
cot
\hom
hom
\sin
sin
\arcsin
arcsin
\coth
coth
\ker
ker
\sinh
sinh
\arctan
arctan
\csc
csc
\lg
lg
\tan
tan
\arg
arg
\deg
deg
\ln
ln
\tanh
tanh
\cos
cos
\dim
dim
\log
log
\cosh
cosh
\exp
exp
\sec
sec
Operators with limits
Type
Typeset
Type
Typeset
\det
det
\limsup
lim sup
\gcd
gcd
\max
max
\inf
inf
\min
min
\lim
lim
\Pr
Pr
\liminf
lim inf
\sup
sup
\injlim
inj lim
\projlim
proj lim
\varliminf
lim
\varlimsup
lim
\varinjlim
lim
←←←←←←←←←←→
\varprojlim
lim
←←←←←←←←←←←

A.7
Operators
491
A.7.1
Large operators
Type
Inline
Displayed
\int_{a}^{b}
∫𝑏
𝑎
∫
𝑏
𝑎
\oint_{a}^{b}
∮𝑏
𝑎
∮
𝑏
𝑎
\iint_{a}^{b}
∬𝑏
𝑎
∬
𝑏
𝑎
\iiint_{a}^{b}
∭𝑏
𝑎
∭
𝑏
𝑎
\iiiiint_{a}^{b}
⨌𝑏
𝑎
⨌
𝑏
𝑎
\idotsint_{a}^{b}
∫··· ∫𝑏
𝑎
∫⋯∫
𝑏
𝑎
\prod_{i=1}^{n}
∏𝑛
𝑖=1
𝑛
∏
𝑖=1
\coprod_{i=1}^{n}
∐𝑛
𝑖=1
𝑛
∐
𝑖=1
\bigcap_{i=1}^{n}
⋂𝑛
𝑖=1
𝑛
⋂
𝑖=1
\bigcup_{i=1}^{n}
⋃𝑛
𝑖=1
𝑛
⋃
𝑖=1
\bigwedge_{i=1}^{n}
⋀𝑛
𝑖=1
𝑛
⋀
𝑖=1
\bigvee_{i=1}^{n}
⋁𝑛
𝑖=1
𝑛
⋁
𝑖=1
\bigsqcup_{i=1}^{n}
⨆𝑛
𝑖=1
𝑛⨆
𝑖=1
\biguplus_{i=1}^{n}
⨄𝑛
𝑖=1
𝑛
⨄
𝑖=1
\bigotimes_{i=1}^{n}
⨂𝑛
𝑖=1
𝑛
⨂
𝑖=1
\bigoplus_{i=1}^{n}
⨁𝑛
𝑖=1
𝑛
⨁
𝑖=1
\bigodot_{i=1}^{n}
⨀𝑛
𝑖=1
𝑛
⨀
𝑖=1
\sum_{i=1}^{n}
∑𝑛
𝑖=1
𝑛
∑
𝑖=1

492
Appendix A
Math symbol tables
A.8
Math accents and fonts
Math accents
amsxtra
Type
Typeset
Type
Typeset
\acute{a}
́𝑎
\bar{a}
̄𝑎
\breve{a}
̆𝑎
\spbreve
˘
\check{a}
̌𝑎
\spcheck
∨
\dot{a}
̇𝑎
\spdot
.
\ddot{a}
̈𝑎
\spddot
..
\dddot{a}
⃛𝑎
\spdddot
...
\ddddot{a}
⃜𝑎
\grave{a}
̀𝑎
\hat{a}
̂𝑎
\widehat{a}
̂𝑎
\sphat
̂
\mathring{a}
̊𝑎
\tilde{a}
̃𝑎
\widetilde{a}
̃𝑎
\sptilde
∼
\vec{a}
⃗𝑎
Math fonts
Type
Typeset
LATEX
\mathbf{A}
𝐀
\mathcal{A}

\mathit{A}
𝐴
\mathnormal{A}
𝐴
\mathrm{A}
A
\mathsf{A}
𝖠
\mathtt{A}
𝙰
\boldsymbol{\alpha}
𝜶
\mathbb{A}
𝔸
\mathfrak{A}
𝔄
\mathscr{a}
𝒜
And thousand more from STIX (see Section 6.2)!
\mathscr requires the eucal package with the mathscr option

A.9
Math spacing commands
493
A.9
Math spacing commands
Name
Width
Short
Long
1 mu (math unit)
\mspace{1mu}
thinspace
\,
\thinspace
medspace
\:
\medspace
thickspace
\;
\thickspace
interword space
\␣
1 em
\quad
2 em
\qquad
Negative space
1 mu
\mspace{-1mu}
thinspace
\!
\negthinspace
medspace
\negmedspace
thickspace
\negthickspace

APPENDIX
B
Text symbol tables
B.1
Some European characters
Name
Type
Typeset
Type
Typeset
a-ring
\aa
å
\AA
Å
aesc
\ae
æ
\AE
Æ
ethel
\oe
œ
\OE
Œ
eszett
\ss
ß
\SS

inverted question mark
?‘
¿
inverted exclamation mark
!‘
¡
slashed L
\l
ł
\L
Ł
slashed O
\o
ø
\O
Ø
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1
495

496
Appendix B
Text symbol tables
B.2
Text accents
Name
Type
Typeset
Name
Type
Typeset
acute
\’{o}
ó
macron
\={o}
¯o
breve
\u{o}
˘o
overdot
\.{g}
˙g
caron/haček
\v{o}
ˇo
ring
\r{u}
ů
cedilla
\c{c}
ç
tie
\t{oo}
oo
circumﬂex
\^{o}
ô
tilde
\~{n}
ñ
dieresis/umlaut
\"{u}
ü
underdot
\d{m}
m.
double acute
\H{o}
ő
underbar
\b{o}
o¯
grave
\‘{o}
ò
dotless i
\i
ı
dotless j
\j
j
\’{\i}
í
\v{\j}
ˇj
B.3
Text font commands
B.3.1
Text font family commands
Command with Argument
Command Declaration
Switches to the
font family
\textnormal{...}
{\normalfont ...}
document
\emph{...}
{\em ...}
emphasis
\textrm{...}
{\rmfamily ...}
roman
\textsf{...}
{\sffamily ...}
sans serif
\texttt{...}
{\ttfamily ...}
typewriter style
\textup{...}
{\upshape ...}
upright shape
\textit{...}
{\itshape ...}
italic shape
\textsl{...}
{\slshape ...}
slanted shape
\textsc{...}
{\scshape ...}
small capitals
\textbf{...}
{\bfseries ...}
bold
\textmd{...}
{\mdseries ...}
normal weight and width

B.3
Text font commands
497
B.3.2
Text font size changes
Command
LATEX sample text
AMS sample text
\Tiny
[not available]
sample text
\tiny
sample text
sample text
\SMALL or \scriptsize
sample text
sample text
\Small or \footnotesize
sample text
sample text
\small
sample text
sample text
\normalsize
sample text
sample text
\large
sample text
sample text
\Large
sample text
sample text
\LARGE
sample text
sample text
\huge
sample text
sample text
\Huge
sample text sample text

498
Appendix B
Text symbol tables
B.4
Additional text symbols
Name
Type
Typeset
ampersand
\&
&
asterisk bullet
\textasteriskcentered
∗
backslash
\textbackslash
\
bar (caesura)
\textbar
|
brace left
\{
{
brace right
\}
}
bullet
\textbullet
•
circled a
\textcircled{a}
a
○
circumﬂex
\textasciicircum
^
copyright
\copyright
c○
dagger
\dag
†
double dagger (diesis)
\ddag
‡
dollar
\$
$
double quotation left
\textquotedblleft or ‘‘
“
double quotation right
\textquotedblright or ’’
”
em dash
\textemdash or ---
—
en dash
\textendash or --
–
exclamation down
\textexclamdown or !‘
¡
greater than
\textgreater
>
less than
\textless
<
lowline
\_
_
midpoint
\textperiodcentered
·
octothorp
\#
#
percent
\%
%
pilcrow (paragraph)
\P
¶
question down
\textquestiondown or ?‘
¿
registered trademark
\textregistered
®
section
\S
§

B.5
Additional text symbols with T1 encoding
499
Additional text symbols, continued
Name
Type
Typeset
single quote left
\textquoteleft or ‘
‘
single quote right
\textquoteright or ’
’
sterling
\pounds
£
superscript
\textsuperscript{a}
a
tilde
\textasciitilde
~
trademark
\texttrademark
™
visible space
\textvisiblespace
␣
For the \textsubscript command, see Section 10.3.
B.5
Additional text symbols with T1 encoding

500
Appendix B
Text symbol tables
B.6
Text spacing commands
Name
Width
Short command
Long command
Positive Space
Normal
varies
␣
Intersentence
varies
\@.␣
Interword
varies
\␣
Italic Corr.
varies
\/␣
Tie
varies
~
Thinspace
\,
\thinspace
Medspace
\:
\medspace
Thickspace
\;
\thickspace
1 em
\quad
2 em
\qquad
Negative Space
Thinspace
\!
\negthinspace
Medspace
\negmedspace
Thickspace
\negthickspace

APPENDIX
C
Some background
In this book we deﬁne LATEX as the foundation TEX, the work platform LATEX, and the
superstructure AMS packages rolled into one. While you do not need to know anything
about LATEX’s detailed structure and history to use it, such knowledge may help you
understand how and why LATEX works the way it does.
In Section C.1, we present a short history of LATEX, where it has come from and
where it is going. Section C.2 provides a description of how LATEX works. In Section C.3
the various prompts are deﬁned and Section C.4 discusses the separation of visual and
logical design elements.
C.1
A short history
C.1.1
TEX
Donald E. Knuth’s multivolume work, The Art of Computer Programming [47], caused
its author a great deal of frustration because it was very diﬃcult to keep the volumes
typographically uniform. To solve this problem, Knuth decided to create his own type-
setting language. The result is described in The TEXbook [48].
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1
501

502
Appendix C
Some background
A mathematical typesetting language takes care of the multitude of details that are
so important in mathematical typesetting, including
Spacing formulas properly
Breaking text into pleasingly typeset lines and paragraphs
Hyphenating words where necessary
Providing hundreds of symbols for typesetting mathematics
LATEX does all this and more on almost any computer: Windows computer, Mac, UNIX,
workstation, or mainframe. You can write your document on a Windows computer and
e-mail it to a coworker who makes corrections on a Mac. The ﬁnal manuscript might
be sent to a publisher who uses a UNIX computer to prepare the document for printing.
Knuth realized that typesetting is only half the solution to the manuscript produc-
tion problem. You also need a style designer—a specialist who determines what fonts
to use, how large a vertical space to put before and after a theorem, and numerous other
design issues.
C.1.2
LATEX 2.09 and AMS-TEX
Knuth also realized that typesetting a complex document in TEX requires a very knowl-
edgeable user. So TEX was designed as a platform on which convenient work environ-
ments—macro packages—could be built, more suitable for the average user to work
with. It is somewhat unfortunate that two such platforms were made available to the
mathematical community in the early 1980s, AMS-TEX and LATEX.
AMS-TEX was written by Michael D. Spivak for the American Mathematical Society,
whereas LATEX was developed by Leslie Lamport. The strengths of the two systems were
somewhat complementary. AMS-TEX provided many features needed by mathematical
articles, including
Sophisticated math typesetting capabilities
Extensive options for formatting multiline formulas
Flexible bibliographic references
LATEX also provided many features, including
The use of logical units to separate the logical and the visual design of an article
Automatic numbering and cross-referencing
Bibliographic databases
Both AMS-TEX and LATEX became very popular, causing a split in the mathematical
community as some chose one system over the other.

C.1
A short history
503
C.1.3
LATEX 3
When Lamport decided not to develop LATEX any further, the LATEX 3 team1 took over
with the aim of actively supporting, maintaining, and updating LATEX.
The goals for LATEX 3 are very ambitious. LATEX 3 will
Provide high-quality typesetting for a wide variety of document types and typographic
requirements
Support direct formatting commands for editors and designers, which are essential to
the ﬁne-tuning of document layout and page design
Process complex structured documents and support a document syntax that allows
automatic translation of documents conforming to the international document-type
deﬁnition standard SGML (Standard Generalized Markup Language, ISO 8879)
Provide a common foundation for a number of incompatible LATEX variants that have
been developed, including the old LATEX 2.09, LATEX with the New Font Selection
Scheme, and AMS-LATEX
See two articles by Frank Mittelbach and Chris Rowley, LATEX 2.09 →LATEX 3 [57],
1992, and The LATEX 3 Project [59], 1994, for a statement of goals. Go to The LaTeX3
project at
http://www.latex-project.org/latex3.html
for more up-to-date articles and reports.
A number of LATEX 3 projects have already been completed and are part of LATEX,
including:
The New Font Selection Scheme LATEX uses Knuth’s Computer Modern fonts. The
New Font Selection Scheme, NFSS, of Frank Mittelbach and Rainer Schöpf, writ-
ten in 1989, allows the independent changing of font attributes and the integra-
tion of new font families into LATEX. With the proliferation of PostScript fonts
and printers, more and more users want to use PostScript fonts in their LATEX
documents.
New and improved environments Frank Mittelbach wrote a new multicolumn
environment and Rainer Schöpf improved the verbatim and comment environ-
ments. There have also been several improvements made to the tabular and
array environments. The extremely important graphicx package by David
Carlisle and Sebastian Rahtz was released.
1A talented group of mathematicians and programmers, Frank Mittelbach, Chris Rowley, and Rainer
Schöpf. The group has since expanded with the addition of Johannes Braams, David Carlisle, Michael
Downes, Denys Duchier, Robin Fairbairns, Alan Jeﬀrey, and Martin Schröder; many volunteers have also
contributed to the project. The current LATEX 3 project team personnel are: Frank Mittelbach, Rainer Schöpf,
Chris Rowley, David Carlisle, Johannes Braams, Robin Fairbairns, Morten Høgholm, Thomas Lotze, Javier
Bezos, Will Robertson, Joseph Wright, and Bruno Le Floch.

504
Appendix C
Some background
The ﬁrst interim solution
In 1990, the AMS released AMS-LATEX , version 1.0—see Rainer Schöpf’s Foreword
to this book for a personal account. This release contained
AMS-TEX recoded to work with LATEX
The NFSS styles for proclamations
The new verbatim environment
AMS-LATEX , version 1.0, is a LATEX dialect. It was incompatible with the then current
LATEX—version 2.09.
While the LATEX 3 team wanted to unify the mathematical community, this ﬁrst
attempt by the AMS split it even further apart. Many AMS-TEX users simply refused to
switch. Even today, 17 years later, many mathematicians cling to AMS-TEX. Even the
LATEX community was split into users of the old LATEX, those whose LATEX incorporated
the NFSS, and AMS-LATEX users.
The second interim solution
When it became obvious that the goals of LATEX 3 could not be fulﬁlled any time soon,
the LATEX 3 team decided to issue a new version of LATEX, version 2e (also called LATEXe)
in June of 1994. This version replaced LATEX 2.09, see the two Mittelbach and Rowley
articles cited above. This interim release accomplished some of LATEX 3’s goals, includ-
ing the projects listed previously. Since then, LATEXe (called LATEX today) has become
accepted as the standard LATEX.
In February of 1995, the AMS released version 1.2 of AMS-LATEX (which I call
the AMS packages in this book) built on top of the new LATEX. Michael Downes was
the project leader.
The changes in AMS-LATEX
were substantial.
The align environment, for
example, was completely rewritten by David M. Jones. The recoded AMS-TEX had
now become a LATEX package, amsmath.
It is extremely important to note that while AMS-LATEX 1.0 and 1.1 were mono-
lithic structures, versions 1.2 and 2.0 (see Section C.1.4) are just collections of packages
that ﬁt nicely into the LATEX model. You can use one AMS package or all, by themselves
or mixed with other LATEX packages. This book was typeset using the LATEX document
class (book) and the AMS packages, version 2.13, along with a number of other LATEX
(non-AMS) packages.
C.1.4
More recent developments
Since 1996, changes to LATEX have been minor. A few new symbols have been added.
Much work has been done on character encoding and LM (Latin Modern) fonts by Bo-
gusław Jackowski and Janusz M. Nowacki to extend LATEX to languages other than
American English (see Appendixes E and F).

C.2
How LATEX works
505
In 1999, the American Mathematical Society released version 2.0 of the AMS
packages and in 2004, version 2.2. About the same time, a consortium (made up of the
AMS, Blue Sky Research, and Y&Y) released free PostScript versions of the CM and
AMS fonts. These PostScript fonts are now part of any LATEX distribution.
Interestingly, there are still those who argue that the AMS packages are not part
and parcel of LATEX and typesetting math. In life, almost everything is a compromise, in
software design, even more so. Using the AMS packages to typeset math is an excep-
tion. It costs you nothing—if you do not need their features for a document, then you
don’t have to use them. You need not sacriﬁce anything in order to have the power of
the AMS packages available when you need them. This is why, in this book, by LATEX
we mean LATEX with the AMS packages.
C.2
How LATEX works
In this section, I present a very simpliﬁed overview of the inner workings of LATEX.
C.2.1
The layers
TEX and LATEX consist of many layers. These include:
virtex TEX’s core, containing about 350 primitive commands such as
input
accent
hsize
virtex can also read format ﬁles, which are precompiled sets of commands.
LATEX is nothing more than virtex reading in a large set of commands, built
layer upon layer.
plain.tex The most basic layer built on virtex. It adds about 600 commands to
virtex. When you invoke the TeX command, virtex loads the plain format,
which is the default. The core TEX commands combined with the commands
deﬁned by the plain format are called Plain TEX.
Plain TEX is described in detail in Appendix B of Knuth’s The TEXbook [48].
You can also read plain.tex, a text ﬁle in the LATEX distribution. Plain TEX is powerful
enough that you could do all your work in it. This approach is advocated by many,
including Michael Doob in his book, TEX Starting from 1 [12].
virtex cannot build (compile) format ﬁles. For that you need another version of
TEX called initex, which loads the most basic information a format needs, such as the
hyphenation tables and plain.tex, and creates a format ﬁle.
LATEX
LATEX is a format ﬁle containing a compiled set of commands written by Leslie Lamport
and others. It provides tools for logical document design, automatic numbering and

506
Appendix C
Some background
cross-referencing, tables of contents, and many other features. The new LATEX we are
using is under the control of the LATEX3 group.
Document classes
The document class forms the next layer. You may choose
amsart, amsbook, or amsproc, provided by the AMS
article, book, letter, proc, report, or slides, the legacy classes
or any one of a large (and growing) number of other document classes provided by
publishers of books and journals, universities, and other interested parties
Packages
The next layer is made up of the packages loaded by the document. You can use standard
LATEX packages, AMS packages, or any of hundreds of other packages in the LATEX
universe, mixed together as necessary. Any package may require other packages, or
may automatically load other packages.
Documents
At the top of this hierarchy sit your documents, with their custom commands and envi-
ronments, utilizing all the power derived from the layers below.
C.2.2
Typesetting
When typesetting, LATEX uses two basic types of ﬁles, the source ﬁles and the font metric
ﬁles.
A font metric ﬁle is designed to hold the information for a font of a given size and
style. Each LATEX font metric ﬁle, called a tfm ﬁle, contains the size of each character,
the kerning (the space placed between two adjacent characters), the length of the italic
correction, the size of the interword space, and so on. A typical tfm ﬁle is cmr10.tfm,
which is the LATEX font metric ﬁle for the font cmr (CM roman) at 10-point size.
LATEX reads the source ﬁle one line at a time. It converts the characters of each
line into a token sequence. A token is either a character—together with an indication of
what role the character plays—or a command. The argument of a command is the token
following it unless a group enclosed in braces follows it, in which case the contents of
the group becomes the argument.2 An example of this behavior can be seen when you
specify an exponent. LATEX looks for the next token as the exponent unless a group
enclosed in braces follows the ˆ symbol. This explains why $2^3$ and $2^\alpha$
2Delimited commands work somewhat diﬀerently (see Section 14.1.9).

C.2
How LATEX works
507
work, but $2^\mathfrak{m}$ does not. Indeed, 3 and \alpha each become a single
token but \mathfrak{m} becomes more than one, four, in fact. Of course, if you always
use braces, as in
$2^{3}$, $2^{\alpha}$, $2^{\mathfrak{m}}$
then you never have to think about tokens to type such expressions.
After tokenizing the text, LATEX hyphenates it and attempts to split the paragraph
into lines of the required width. The measurements of the characters—also called
glyphs—are absolute, as are the distances between characters—called kerning. The
spaces, interword space, intersentence space, and so on, are made of glue or rubber
length (see Section 14.5.2). Glue has three parameters:
the length of the space
stretchability, the amount by which it can be made longer
shrinkability, the amount by which it can be made shorter
LATEX stretches and shrinks glue to form lines of equal length.
LATEX employs a formula to measure how much stretching and shrinking is neces-
sary in a line. The result is called badness. A badness of 0 is perfect, while a badness
of 10,000 is very bad. Lines that are too wide are reported with messages such as
Overfull \hbox (5.61168pt too wide) in paragraph
at lines 49--57
The badness of a line that is stretched too much is reported as follows:
Underfull \hbox (badness 1189) in paragraph
at lines 93--93
Once enough paragraphs are put together, LATEX composes a page from the typeset
paragraphs using vertical glue. A short page generates a warning message such as
Underfull \vbox (badness 10000) has
occurred while \output is active
The typeset ﬁle is stored as a dvi (Device Independent) ﬁle or a PDF ﬁle.
C.2.3
Viewing and printing
Viewing and printing LATEX’s typeset output are not really part of LATEX proper, but they
are obviously an important part of your work environment. The printer driver prints the
dvi and PDF ﬁles, and the video driver lets you view them on your monitor.

508
Appendix C
Some background
C.2.4
LATEX’s ﬁles
Auxiliary ﬁles
LATEX is a one-pass compiler, that is, it reads the source ﬁle once only for typesetting.
As a result, LATEX must use auxiliary ﬁles to store information it generates during a
run. For each typesetting run, LATEX uses the auxiliary ﬁles compiled during the previ-
ous typesetting run. This mechanism explains why you have to typeset twice or more
(see Section 17.2) to make sure that changes you have made to the source ﬁles are
reﬂected in the typeset document. Such an auxiliary ﬁle has the same base name as
the source ﬁle, the extension indicates its type.
The most important auxiliary ﬁle, the aux ﬁle, contains a great deal of information
about the document, most importantly, the data needed for symbolic referencing. Here
are two typical entries:
\newlabel{struct}{{5}{2}}
\bibcite{eM57a}{4}
The ﬁrst entry indicates that a new symbolic reference was introduced on page 2 of the
typeset document in Section 5 using the command
\label{struct}
The command \ref{struct} produces 5, while \pageref{struct} yields 2.
The second entry indicates that the bibliographic entry with label eM57a has been
assigned the number 4, so \cite{eM57a} produces [4].
There is an aux ﬁle for the source ﬁle being processed, and another one for each
ﬁle included in the main ﬁle by an \include command.
No auxiliary ﬁle is written if the \nofiles command is given. The message
No auxiliary output files.
in the log ﬁle reminds you that \nofiles is in eﬀect.
The log ﬁle contains all the information shown in the log window during the
typesetting. The dvi ﬁle contains the typeset version of the source ﬁle.
There are ﬁve auxiliary ﬁles that store information for special tasks. They are
written only if that special task is invoked by a command and there is no \nofiles
command. The additional auxiliary ﬁles are
glo Contains the glossary entries produced by \glossary commands. A new ﬁle is
written only if there is a
\makeglossary
command in the source ﬁle (see Section 16.6).

C.2
How LATEX works
509
lof Contains the entries used to compile a list of ﬁgures. A new ﬁle is written only if
there is a
\listoffigures
command in the source ﬁle (see Section 8.4.3).
lot Contains the entries used to compile a list of tables. A new ﬁle is written only if
there is a
\listoftables
command in the source ﬁle (see Section 8.4.3).
toc Contains the entries used to compile a table of contents. A new ﬁle is written only
if there is a
\tableofcontents
command in the source ﬁle (see Section 17.2).
For information about the auxiliary ﬁles created by BIBTEX and MakeIndex, see
Sections 15.2.3 and 16.3, respectively. Some classes and packages create additional
auxiliary ﬁles (see Section 11.2.3 for an example).
Versions
A complete LATEX distribution consists of hundreds of ﬁles, all of which interact in some
way. Since most of these ﬁles have had many revisions, you should make sure that they
are all up-to-date and compatible with each other. You can check the version numbers
and dates by reading the ﬁrst few lines of each ﬁle in a text editor or by checking the dates
and version numbers that are shown on the list created by the command \listfiles,
which I discuss later in this section.
LATEX has been updated every year. While writing this book, I used the version of
LATEX that was issued on May 5, 2014.
When you typeset a LATEX document, LATEX prints its release date in the log ﬁle
with a line such as
LaTeX2e <2014/05/01>
If you use a LATEX feature that was introduced recently, you can put a command such as
the following into the preamble of your source ﬁle:
\NeedsTeXFormat{LaTeX2e}[2008/12/01]
This command speciﬁes the date of the oldest version of LATEX that may be used to
typeset your ﬁle. If someone attempts to typeset your ﬁle with an older version, LATEX
generates a warning.

510
Appendix C
Some background
The AMS math package amsmath is at version 2.13, the document classes at
version 2.26, and the AMSFonts set is at version 2.2d. See Section D.1 for more infor-
mation on obtaining updated versions.
If you include the \listfiles command in the preamble of your document, then
the log ﬁle contains a detailed listing of all the ﬁles used in the typesetting of your
document. Here are the ﬁrst few (truncated) lines from such a listing:
*File List*
book.cls
1999/01/07 v1.4a Standard LaTeX document class
leqno.clo
1998/08/17 v1.1c Standard LaTeX option
(left equation numbers)
bk10.clo
2007/10/19 v1.4h Standard LaTeX file (size option)
MiL5.sty
2014/12/15 Commands for MiL5
amsmath.sty
2013/01/14 v2.14 AMS math features
amstext.sty
2000/06/29 v2.01
amsgen.sty
1999/11/30 v2.0
amsbsy.sty
1999/11/29 v1.2d
amsopn.sty
1999/12/14 v2.01 operator names
amsthm.sty
2004/08/06 v2.20
verbatim.sty
2003/08/22 v1.5q LaTeX2e package for
verbatim enhancements
amsxtra.sty
1999/11/15 v1.2c
eucal.sty
2009/06/22 v3.00 Euler Script fonts
amssymb.sty
2013/01/14 v3.01 AMS font symbols
amsfonts.sty
2013/01/14 v3.01 Basic AMSFonts support
omxcmex.fd
1999/05/25 v2.5h Standard LaTeX
font definitions
latexsym.sty
1998/08/17 v2.2e Standard LaTeX package
(lasy symbols)
amscd.sty
1999/11/29 v1.2d
alltt.sty
1997/06/16 v2.0g defines alltt environment
xspace.sty
2009/10/20 v1.13 Space after command
names (DPC,MH)
graphicx.sty
2014/04/25 v1.0g Enhanced LaTeX Graphics
(DPC,SPQR)
keyval.sty
2014/05/08 v1.15 key=value parser (DPC)
graphics.sty
2009/02/05 v1.0o Standard LaTeX Graphics
(DPC,SPQR)
trig.sty
1999/03/16 v1.09 sin cos tan (DPC)
This list looks quite up-to-date (in fact, it is completely up-to-date). To conﬁrm this,
open the ﬁle alltt.sty in the latest LATEX distribution. You ﬁnd the lines
\ProvidesPackage{alltt}
[1997/06/16 v2.0g defines alltt environment]
that explain the date found in the listing.

C.3
Interactive LATEX
511
C.3
Interactive LATEX
If LATEX cannot carry out your instructions, it displays a prompt and possibly an error
message in the log window.
The ** prompt means that LATEX needs to know the name of a source ﬁle to typeset.
This usually means that you misspelled a ﬁle name, you are trying to typeset a docu-
ment that is not located in LATEX’s current folder, or that there is a space in the name
of your source ﬁle.
The ? prompt indicates that LATEX has found an error in your source ﬁle, and wants
you to decide what to do next. You can try to continue typesetting the ﬁle by pressing
– Return
– q to typeset in quiet mode, not stopping for errors. Depending on the nature of the
error, LATEX may either recover or generate more error messages
– x to stop typesetting your ﬁle
– h to get advice on how to correct the error
If you have misspelled the name of a package in a \usepackage command, or if
LATEX cannot ﬁnd a ﬁle, it displays a message similar to the following:
! LaTeX Error: File ‘misspelled.sty’ not found.
Type X to quit or <RETURN> to proceed,
or enter new name. (Default extension: sty)
Enter file name:
You can either type the correct name of the ﬁle at the prompt, or type x to quit LATEX.
The * prompt signiﬁes that LATEX is in interactive mode and is waiting for instructions.
To get such a prompt, comment out the line
\end{document}
in a source ﬁle, then typeset the ﬁle. Interactive instructions, such as \show and
\showthe (see Section 14.1.8) may be given at the * prompt. To exit, type
\end{document}
at the * prompt, and press Return.
If you get the * prompt and no error message, type \stop and press Return.

512
Appendix C
Some background
C.4
Separating form and content
In Section 2.3, we discuss logical and visual design and how LATEX allows you to
concentrate on the logical design and takes care of the visual design.
LATEX uses four tools to separate the logical and visual design of a document:
1. Commands Information is given to LATEX in the arguments of commands. For
instance, title page information is given in this form. The ﬁnal organization and
appearance of the title page is completely up to the document class and its options.
A more subtle example is the use of a command for distinguishing a term or
notation. For instance, you may want to use an \env command for environment
names. You may deﬁne \env as follows:
\newcommand{\env}[1]{\texttt{#1}}
This gives you a command that typesets all environment names in typewriter style
(see Section 3.6.2). Logically, you have decided that an environment name should
be marked up. Visually, you may change your decision any time. By changing
the deﬁnition to
\newcommand{\env}[1]{\textbf{#1}}
all environment names are typeset in bold (see Section 3.6.5).
The following example is taken from secondarticleccom.tex (see Section 9.3
and the samples folder).
This article deﬁnes the construct 𝐷⟨2⟩with the
command
\newcommand{\Dsq}{D^{\langle 2 \rangle}}
If a referee or coauthor suggests a diﬀerent notation, editing this one line changes
the notation throughout the entire article.
2. Environments Important logical structures are placed within environments. For ex-
ample, list items are typed within a list environment (see Section 4.2) and format-
ted accordingly. If you later decide to change the type of the list, you can do so
by simply changing the name of the environment.
3. Proclamations You can change the style or numbering scheme of any proclamation
at any time by changing that proclamation’s deﬁnition in the preamble. See the
typeset secondarticle article on pages 272–275 for examples of proclamations
typeset with diﬀerent styles.
4. Numbering and cross-referencing Theorems, lemmas, deﬁnitions, sections, and
equations are logical units that can be freely moved around. LATEX automatically
recalculates the numbers and cross-references.

C.4
Separating form and content
513
You write articles to communicate your ideas. The closer you get to a separation of
logical and visual design, the more you are able to concentrate on that goal. Of course,
you can never quite reach this ideal. For instance, a line too wide warning (see Sec-
tions 1.4 and 3.7.1) is a problem of visual design. When a journal changes the document
class in an article you submitted, unless the new document class retains the same fonts
and line width of the document class you used, new line too wide problems arise.
LATEX is successful in automatically solving visual design problems well over 95% of
the time. That is getting fairly close to the ideal.

APPENDIX
D
LATEX and the Internet
While LATEX is pretty stable, the rest of the world around us is changing very fast and
the Internet plays an ever larger role in our lives. This appendix deals with the Internet
as a useful source of LATEX information.
The Internet is clearly the main repository of all matters LATEX, and the Com-
prehensive TEX Archive Network (CTAN) is the preeminent collection of TEX-related
material. Section D.1 discusses how and where to ﬁnd the LATEX distribution, AMS and
LATEX packages, and the sample ﬁles for this book on CTAN.
Various international TEX user groups (especially TUG, the TEX Users Group) and
the American Mathematical Society play a signiﬁcant role in supporting LATEX. I dis-
cuss some of the major user groups in Section D.2.
Finally, you ﬁnd a great deal of useful information on the Internet concerning
LATEX. I provide some pointers in Section D.3.
D.1
Obtaining ﬁles from the Internet
Say you are interested in using Piet van Oostrum’s fancyhdr package mentioned in
Section 8.6. Chances are you can go ahead and use it, your LATEX installation already
has it. In this age of gigantic hard disks, your LATEX installation places pretty much
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1
515

516
Appendix D
LATEX and the Internet
everything on your computer. But what if your version of fancyhdr needs updating or
you need a new package. How you go about getting it?
We discuss below the proper way of doing this, with an FTP client or a Web browser.
But maybe the simplest approach is to google fancyhdr. The ﬁrst line of the ﬁrst entry
of the complete list of 82,100 responses is
The TeX Catalogue OnLine, Entry for fancyhdr, Ctan Edition
Clicking on it takes you to a page describing the package. You can get the package by
clicking on Download. It is this simple.
In general, there are two types of Internet sites from which you can download ﬁles:
FTP sites (using the ﬁle transfer protocol)
Web sites (using the HTTP protocol)
To access them, use a client application on your computer to connect to a server
on another machine. Most Web browsers, which are designed to connect to Web sites,
also handle FTP transfers.
All operating systems include a browser and an FTP client as part of the system.
The Comprehensive TEX Archive Network
The Comprehensive TEX Archive Network (CTAN) is the preeminent collection of TEX-
related material on the Internet. There are three main CTAN hosts:
U.S.
– FTP address: ftp://tug.ctan.org/
– Web address: http://www.ctan.org/
U.K.
– FTP address: ftp://ftp.tex.ac.uk/
– Web address: http://www.tex.ac.uk/
Germany
– FTP address: ftp://ftp.dante.de/
– Web address: http://www.dante.de/
If you go to a CTAN site, at the very root you ﬁnd README.structure, a very
important ﬁle. It describes the bottom of the archive tree.
biblio
Systems for maintaining and presenting bibliographies within documents
typeset using LATEX

D.1
Obtaining ﬁles from the Internet
517
digests
Collections of TEX mailing list digests, TEX-related ‘electronic maga-
zines’, and indexes, etc., of printed publications
dviware
Printer drivers and previewers, etc., for DVI ﬁles
fonts
Fonts written in Metafont, and support for using fonts from other sources
(e.g., those in Adobe Type 1 format)
graphics
Systems and TEX macros for producing graphics
help
FAQs and similar direct assistance, the catalogue
indexing
Systems for maintaining and presenting indexes of documents typeset
using TEX.
info
Manuals and extended how-to information, errata for TEX-related publica-
tions, collections of project (e.g., LATEX and NTS) documents, etc.
language
Support for various languages
macros
TEX macros. Several directories have signiﬁcant sub-trees.
obsolete Material which is now obsolete, including all of LATEX 2.09
support
TEX support environments and the like
systems
TEX systems. Organized by operating environment
tds
The TEX Directory Structure standard
usergrps
Information supplied by TEX User Groups
web
Literate Programming tools and systems
All of these have many subdirectories, for instance, info has the examples sub-
directory that contains the sample ﬁles for this book. This is a rather new subdirectory,
older sample ﬁles are in info proper.
So if you are interested in BIBTEX, you go to biblio/, and so on. The expla-
nations are clear. All matters LATEX are in macros/latex/, which has a number of
subdirectories, including
contrib—Contributed LATEX macros
unpacked—Unpacked copy of the LATEX sources
required—Packages “required” of a LATEX distribution
There are many full mirrors, exact duplicates, of CTAN and many partial mirrors.
At the root of CTAN you ﬁnd the README.mirrors ﬁle listing them all. To reduce
network load, you should try to use a mirror located near you.

518
Appendix D
LATEX and the Internet
Many CTAN sites now have easy search access with Web browsers. For instance,
point your browser to
http://tug.ctan.org/search.html
In the search ﬁeld, type fancyhdr, and you get a long list of links. Click on
macros/latex/contrib/fancyhdr.zip
and you are done. If you type gratzer, you get the links to the help ﬁles of my various
books—in info/ and info/examples/.
The AMS packages
Chances are that you received the AMS packages with your LATEX distribution. If you
did not, or if you want to update them, go to a CTAN site:
/tex-archive/fonts/amsfonts/latex/
/tex-archive/macros/latex/required/amslatex/
or to the AMS site:
http://www.ams.org/tex/amslatex.html
The sample ﬁles
The sample ﬁles for this book, introduced in Section 1.1.2 on page 5, live on CTAN in
the directory
/info/examples/Math_into_LaTeX-5
You can go to /info/examples/ and download it, or you can search for the directory
name Math_into_LaTeX-5. If you forget these, just search for gratzer.
You can also ﬁnd the Mission Impossible (Part I) on CTAN:
/info/Math_into_LaTeX-4/Mission_Impossible.pdf
D.2
The TEX Users Group
The TEX Users Group (TUG) does a tremendous job of supporting and promoting TEX,
by publishing a journal, TUGboat, three times a year and organizing an annual interna-
tional conference. TUG also helps support the LATEX 3 team in maintaining LATEX and
developing LATEX 3.
Consider joining TUG if you have an interest in LATEX. TUG’s contact informa-
tion is:
PO Box 2311
Portland, OR 97208–23110

D.3
Some useful sources of LATEX information
519
Telephone: (503) 223-9994
E-mail: oﬃce@tug.org
Web page: http://www.tug.org/
If you are a member, you receive every year a brand new TEX Live DVD, which
contains everything you need to install LATEX.
The American Mathematical Society
The AMS provides excellent technical advice for using the AMS packages and AMS-
Fonts. You can reach the AMS technical staﬀby e-mail at tech-support@ams.org,
or by telephone at (800) 321-4267 or (401) 455-4080. You can also ﬁnd a great deal of
helpful TEX information on the AMS Web site in the Author Resource Center.
D.3
Some useful sources of LATEX information
You may ﬁnd useful the Frequently Asked Questions (FAQ) documents maintained on
CTAN; search FAQ. The U.K. TEX Users Group maintains its own FAQ list at
http://www.tex.ac.uk/cgi-bin/texfaq2html?introduction=yes
The AMS FAQ is at
http://www.ams.org/authors/author-faq.html
You can also ask most TEX-related questions in the Usenet newsgroup comp.text.tex.

APPENDIX
E
PostScript fonts
In the late 1990s, as we mentioned in Section C.1.4, a consortium (the AMS, Blue Sky
Research, and Y&Y) released a free PostScript version of the CM and AMS fonts, so
everyone could switch to PostScript fonts, a tremendous advance for LATEX users.
The Computer Modern fonts were originally “hardwired” into LATEX. Many users
liked LATEX but disliked the Computer Modern font, and with the spread of personal
computers and PostScript laser printers, it was imperative that more PostScript fonts be
integrated into LATEX. In Section E.1, I describe how easy it is to use standard PostScript
fonts, such as Times. In Section E.2, I show you how to replace the CM and AMS fonts
in a LATEX document with the Lucida Bright fonts.
“PostScript font” is the terminology that lay people, like me, use. The proper
terminology is Adobe Type 1 format font. PostScript has provision for a wide range
of fonts including Type 3 and Type 1 (as well as Type 42 and Type 5, and so on).
The Type 3 font category is very general and includes bitmap fonts, grayscaled fonts,
and so on. Type 1 fonts are tightly constrained outline fonts, which can be accurately
rendered at almost any resolution, and have a special purpose code that deals only with
Type 1 fonts.
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1
521

522
Appendix E
PostScript fonts
E.1
The Times font and MathTıme
In this section, we step through the process of incorporating the Adobe Times font into
a LATEX document to replace the Computer Modern text fonts, and, optionally, of using
the MathTıme Pro 2 math fonts to replace the Computer Modern math fonts. To do so,
we use the PSNFSS packages (see Section 10.3).
A document class speciﬁes three standard font families (see Section 3.6.2):
A roman (or serif) font family
A sans serif font family
A typewriter style font family
The times package in the PSNFSS distribution makes Times the roman font family,
Helvetica the sans serif font family, and Courier the typewriter style font family.
Setting up Times
First, install the Adobe Times, Helvetica, and Courier PostScript fonts and their
TEX font metric ﬁles.
Now typeset the psfonts.ins ﬁle—in the PSNFSS distribution. This produces
sty ﬁles for the standard PostScript fonts. The Times style ﬁle is called times.sty. If
you do not already have it, copy it into a folder LATEX can access.
To use the times package, you must have the font deﬁnition (fd) ﬁles for the fonts
speciﬁed. By checking the times.sty ﬁle, you see that you need three ﬁles for the
three fonts: Times, Helvetica, and Courier. In the times package these are named ptm,
phv, and pcr, respectively. The three ﬁle names, each comprising three characters, are
the font names in the naming scheme devised by Karl Berry. In ptm, p stands for the
foundry’s name (in this case, Adobe), tm stands for Times, hv for Helvetica, and cr for
Courier. The corresponding font deﬁnition ﬁles are named ot1ptm.fd, ot1phv.fd,
and ot1pcr.fd, respectively. OT1 designates the old TEX font encoding scheme, which
is not discussed here. You can get these ﬁles from CTAN (see Section D.1). If you do
not already have it, copy it into a folder LATEX can access.
Using Times
In the preamble of your document, type
\usepackage{times}
after the \documentclass line. Then Times becomes the roman, Helvetica the sans
serif, and Courier the typewriter style document font family. That is all there is to it.
Using the times package changes the document font family throughout your doc-
ument. To switch to Times only occasionally, type
{\fontfamily{ptm}\selectfont phrase }

E.1
The Times font and MathTıme
523
The text preceding and following this construct is not aﬀected. For example,
{\fontfamily{ptm}\selectfont
This text is typeset in the Times font.}
typesets as
This text is typeset in the Times font.
Similarly,
\fontfamily{ptm}\selectfont
This text is typeset in the Times font.
\normalfont
also typesets the same phrase in Times.
Recall that the \normalfont command
restores the document font family (see Section 3.6.2).
Setting up MathTıme
Looking at a mathematical article typeset with the Times text font, you may ﬁnd
that the Computer Modern math symbols look too thin. To more closely match Times
and other PostScript fonts, Michael Spivak modiﬁed the CM math symbols, calling these
modiﬁed fonts MathTıme Pro 2. You can purchase these fonts from Personal TeX,
http://store.pctexstore.com/
Install the MathTıme Pro 2 PostScript fonts and the TEX font metric ﬁles. If you
do not already have them, copy from PSNFSS the ﬁles
mathtime.ins
mathtime.dtx
mtfonts.fdd
into a folder LATEX can access.
Typeset mathtime.ins to produce the necessary fd ﬁles and the mathtime.sty
ﬁle.
Using MathTıme
If you want to use Times as the document font family and MathTıme as the default
math font, specify
\usepackage[LY1]{fontenc}
%specify font encoding
\usepackage[LY1,mtbold]{mathtime}
%switch math fonts
\usepackage{times}
%switch text fonts
in the preamble of your document.
The mathtime package has many options. See its documentation for more infor-
mation; typeset mathtime.dtx to get it.

524
Appendix E
PostScript fonts
E.2
Lucida Bright fonts
Another alternative to Computer Modern fonts is Lucida Bright for both text and math
fonts. You can purchase the Lucida Bright fonts from TUG.
Copy the ﬁles
lucidabr.ins, lucidabr.dtx,
lucidabr.fdd,lucidabr.yy
into your TEX input folder. Typeset lucidabr.yy, producing the lucidabr.sty ﬁle
and a large number of fd ﬁles.
Now add the lines
\usepackage[LY1]{fontenc}
%specify font encoding
\usepackage[LY1]{lucidabr}
%switch text and math fonts
in the preamble of your document. The lucidabr package has many options. See its
documentation—typeset lucidabr.dtx to get it.
E.3
More PostScript fonts
You can obtain PostScript fonts from a wide variety of sources. There are many free
PostScript fonts on CTAN. Table E.1 is a short list of the more prominent commercial
vendors.
See also the Web page at http://www.microsoft.com/typography/ for a lot
of useful information and links.
Foundry
URL
Adobe
www.adobe.com/type/
Agfa/Monotype
www.agfamonotype.com/
Berthold
www.bertholdtypes.com/
Bitstream
www.bitstream.com/
Emigre
www.emigre.com/
Hoeﬂer
www.typography.com/
ITC
www.itcfonts.com/
Linotype
www.linotype.com/
Monotype
www.fonts.com/
Scriptorium
www.fontcraft.com/
Vintage
www.vintagetype.com/
Table E.1: Some type foundries on the Internet.

APPENDIX
F
LATEX localized
If the language in which you write articles is not American English and/or your key-
board is not the standard American keyboard, you may ﬁnd it annoying and sometimes
diﬃcult to use standard LATEX. The annoyance may start with ﬁnding out how to type ˜
for a nonbreakable space, to LATEX’s inability to properly hyphenate Gr\"{a}tzer, and
LATEX’s inability to use a diﬀerent alphabet.
Many of the improvements to LATEX in recent years have been to localize LATEX, that
is, to adapt LATEX for use with languages other than American English and
keyboards other than standard American keyboards. The babel, fontenc, inputenc
packages are the major players, along with new font-encoding schemes, including the
T1 encoding. You ﬁnd these packages as part of the LATEX distribution (see Section 10.3).
The babel package is described in detail in Johannes Braams, Babel, a multilin-
gual package for use with LATEX’s standard document classes [7] and in Chapter 9 of
The LATEX Companion, 2nd edition [56].
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1
525

526
Appendix F
LATEX localized
If you are interested in using a localized LATEX, you should turn to the TEX user
group for that linguistic group to ﬁnd out what is available. You should also consult the
babel user guide.
At a minimum, a supported language has translated redeﬁnable names (see
Table 14.1), and a localized variant of the \today command. Two very advanced lan-
guage adaptations are German and French.
We ﬁrst illustrate the use of the babel package with the German language, which
gives you a rich set of features, including
Allows you to type "a for \"{a}
Introduces "s for sharp s (eszett)
Introduces "ck for a ck that becomes k-k when hyphenated
Type the following test ﬁle: (german.tex in the samples folder):
\documentclass{article}
\usepackage[german]{babel}
\usepackage[T1]{fontenc}
\begin{document}
\section{H"ullenoperatoren}
Es sei $P$ eine teilweise geordnete Menge. Wir sagen,
dass in $P$ ein \emph{H"ullenoperator} $\lambda$
erkl"art ist, wenn sich jedem $a \in
P$ ein eindeutig
bestimmtes $\lambda(a) \in P$ zuordnen l"a"st, so
dass
die folgenden Bedingungen erf"ullt sind.
\end{document}
And here it is typeset:
The second example uses the following options for the packages:
\usepackage[T2A]{fontenc}
\usepackage[koi8-u]{inputenc}
\usepackage[ukrainian]{babel}
The encoding koi8-u is appropriate for Ukrainian.
And here is the typeset Ukrainian sample ﬁle:

Appendix F
LATEX localized
527

APPENDIX
G
LATEX on the iPad
A few years back, personal computing was desktop-centric.
For many tasks, for
instance, for back up and for updating the operating system, you had to connect your
smartphone and tablet with a computer. Tim Cook (Apple’s CEO as I am writing this
book) coined the term “Post PC revolution” to describe the trend that a tablet is no
longer a younger brother of a PC, but an equal partner; in fact, for many users, it can be
the only computer they will ever need.
But can you use it for your LATEX documents? Isn’t the iPad designed only for
e-mail, to read news, and enjoy entertainment? Certainly. While it has a fast CPU,
it has an even more powerful graphics chip so viewing videos and complex Web pages
is quick. The operating system is designed to make performing these basic tasks very
easy and intuitive. iOS masks the complexities of the underlying computer.
Nevertheless, underneath this easy-to-use interface there is a Mac. Get a little
familiar with the iPad as a computer, and you can work with your LATEX documents
pretty well.
There are good reasons why the iPad is the only tablet I’ll discuss. Today, the
iPad is clearly the dominant tablet of more than a hundred on the market and the iPad
is the only tablet with a decent market share that is in an ecosystem: the iPad is just one
device under iCloud along with the iPhone, the Mac desktops, and the Mac notebooks.
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1
529

530
Appendix G
LATEX on the iPad
I work on a LATEX document on my iMac, and when I am away from home, I continue
my work on my MacBook Air or iPad; there is no interruption, all the devices are fully
synchronized.
In Section G.1, we discuss the iPad ﬁle system, sandboxing, ﬁle transfers, printing,
and text editing. We discuss where are the ﬁles to be LATEXed and where the LATEX
process takes place in Section G.2. Finally, in Section G.3, we introduce two LATEX
implementations for the iPad: Texpad and TeX Writer.
This appendix is based on my articles in the Notices of the Amer. Math. Soc. 60
(2013), pp. 332–334 and 434–439. You can ﬁnd these two articles, NoticesV.pdf
and NoticesVI.pdf, in the samples folder for some more detail.
G.1
The iPad as a computer
To work on a LATEX document, you sit in front of your computer, in the complex folder
hierarchy you ﬁnd document.tex, double clicks it to start the LATEX implementation,
edit the document, typeset it. Then you print document.pdf, proofread it, and then
you go back to editing...
How do you do these steps on an iPad? On the iPad, there is only a rectangular ar-
ray of apps, see Figure G.1. No documents are visible. There may be folders containing
more apps, but no folder in a folder. There are no Library folders, no Download folder.
And no File menu containing the Print command!
I have document.tex on my desktop, but how do I transfer it to the iPad? I would
plug in my thumb drive to facilitate the transfer, but the iPad has no USB port.
G.1.1
File system
As we pointed out, the iPad starts up displaying a rectangular array of icons and folders
for apps, as in see Figure G.1. There are no icons for documents. There is no familiar
Desktop for documents and folders. No Applications folder. The screen is always oc-
cupied by a single window; the ﬁle system, as we know it from desktop computers, is
gone.
In its place is an app-centric starting point. Touch the icon of an app and you are
in business. When the app opens, you get access to the documents of the app.
For security reasons, the apps are sandboxed, limiting an app’s access to ﬁles,
preferences, network resources, hardware, and so on. Ars Technica’s John Siracusa
described the goal of sandboxing as follows: “Running an application inside a sandbox
is meant to minimize the damage that could be caused if that application is compromised
by a piece of malware. A sandboxed application voluntarily surrenders the ability to
do many things that a normal process run by the same user could do. For example,
a normal application run by a user has the ability to delete every single ﬁle owned by
that user. Obviously, a well-behaved application will not do this. But if an application
becomes compromised, it can be coerced into doing something destructive.”

G.1
The iPad as a computer
531
Figure G.1: A rectangular array of apps
Of course, the iPad is a computer, and it has a File System, we just do not see it.
But it is important to visualize it. To help us along, we will use an app.
G.1.2
FileApp
If you search the iPad’s App Store for “ﬁle” apps, there are more than 1, 000 of them.
Many of them could be used to help us understand the iPad ﬁle system. I choose FileApp
by DigiDNA (Figures G.2 and G.3).
Toget started, plug the iPad into a desktop computer, download and start the ap-
plication iMazing on the computer; download and start FileApp on the iPad. On the
left panel of iMazing, click on Apps, then on FileApp. Anything you drag into the right
pane of DiskAid is copied to FileApp. So much for ﬁle transfer. To see the ﬁle structure
of the various iPad apps, click on their names.
Of course, for ﬁle transfers I should also mention the ubiquitous Dropbox. Down-
load it for the iPad, sign in (as you did for your computer Dropbox); that’s it.

532
Appendix G
LATEX on the iPad
Figure G.2: iMazing
Figure G.3: FileApp

G.1
The iPad as a computer
533
G.1.3
Printing
When I ﬁrst wanted to print from my iPhone, I realized that there is no print command.
However, lots of apps would do the job. In fact, searching for “print” in the App Store,
I discovered over 600 apps; many of them print, utilizing my desktop computer.
Typical of these apps is PrintDirect (EuroSmartz) and Printer Pro (Readdle Pro-
ductivity). They can use any printer connected with your desktop computer. They
wirelessly connect to your computer and print with its help.
If so many apps can help me out with printing, how come iOS does not? Read the
comments about iOS printing; I was not the only one confused.
However, if the iPad is the poster child of the Post PC Revolution, its native printing
solution cannot involve desktop computers. Apple introduced the appropriate technol-
ogy; they named it AirPrint. The idea is simple: the iPad collaborates with the printer.
Of course, for this you need a wireless printer that is AirPrint aware. Apple lists all the
AirPrint aware printers:
http://support.apple.com/kb/ht4356
as of this writing, about 2, 000. If you are lucky and have one of these printers, test it.
Open an e-mail and touch the Action icon (here it is the Reply icon); this oﬀers you the
options: Reply, Forward, and Print. Touch Print. Printer Options appears, and you can
choose how many copies and on which printer. (Lots of apps provide more choices,
such as page range.) Choose the printer and print.
For a second test, open a Web page in Safari. There is only one diﬀerence: the
action icon is a curved arrow in a rectangle.
As a third test, open the Drudge Report. It has the familiar Action icon; we are
in business. Finally, open the Politico app, read the news and look for an action icon.
There is none. So to use AirPrint, you need an AirPrint aware printer and an AirPrint
aware app! For the time being, these are limiting restrictions.
G.1.4
Text editors
Many of us edit LATEX documents in text editors more sophisticated than the text editor
that comes with the LATEX implementation. There are so many text editors, well over
200..., see the table at
http://brettterpstra.com/ios-text-editors/
Keeping the iPad horizontal, the keyboard gobbles up too much real estate. Keep-
ing it vertical, the keyboard is less intrusive, but the keys are smaller. If you want to do
serious work on the iPad, use a keyboard.
The iOS’s touch text editing is nice, but it lacks a feature crucial for text editing:
moving the cursor a character ahead or back. (Of course, keyboards have cursor keys!)
Text editors oﬀer a variety of solutions, for instance, ﬁnger swiping.

534
Appendix G
LATEX on the iPad
I will discuss brieﬂy a very sophisticated text editor: Textastics. If you want Syntax
Highlighting, Search and Replace, and Text Expander, this a good choice. In Figure G.4,
you see me editing a document.
You can see the cursor navigation wheel (which appears with a two ﬁnger tap—
ﬁnger swipe also moves the cursor). It comes with an excellent user manual. Textastics
also has a Mac version. And if you spend time shaping it to your liking, then you would
like the same tamed editor for all your work.
G.2
Files
The LATEX ﬁles, of course, can always be composed in the app. You can obtain your
existing ﬁles in two ways:
1. Using iTunes. To transfer ﬁles—one at a time—to your app from your computer
using iTunes, connect your iPad to your computer and start iTunes by double clicking
on its icon. Under Devices, we selected the iPad from the left side of the iTunes win-
dow (see Figure G.5). At the top of the iTunes window, next to Summary and Info,
select Apps (see Figure G.6). The lower part of the window now has File Sharing; see
Figure G.7. On the left, you see a listing of the apps available for ﬁle transfer. Select
the app; the ﬁles already in the app are then listed in the right pane. Click on the add
button and a ﬁle browser appears. Choose the ﬁle you want to transfer.
2. Via Dropbox. I assume that you have Dropbox. For an introduction, go to
dropbox.com. In the app, you sign in to Dropbox. Now the app can see the contents of
your Dropbox, or some part of it (at the Dropbox server) as long as you have an Internet
connection.
3. With FileApp. See the discussion in Section G.1.2 (Figures G.2 and G.3).
G.3
Two LATEX implementations for the iPad
We now discuss two LATEX implementations.
G.3.1
Texpad
There are three ways Texpad can typeset.
A. On your iPad. The app places a LATEX distribution on the iPad and you typeset
with it. However, a complete LATEX distribution is about 4 GB! No app can be this big.
So you only get a small LATEX distribution.
B. On your computer via Dropbox. This is the most powerful option. You have
all the packages and fonts on your computer available to you. An app (such as Automa-
TeX by Jonathan Weisberg) monitors if there is any change in the LATEX ﬁle in Dropbox.
If there is, the ﬁle is retypeset and the pdf is made available to you via the Dropbox.

G.3
Two LATEX implementations for the iPad
535
Figure G.4: Editing with Textastics

536
Appendix G
LATEX on the iPad
Figure G.5: Under Devices, we selected the iPad
Figure G.6: Choose Apps
Figure G.7: Select app

G.3
Two LATEX implementations for the iPad
537
Figure G.8: Editing with soft keyboard
Figure G.9: Editing with Bluetooth keyboard

538
Appendix G
LATEX on the iPad
C. In the Cloud. This option provides you with a remote server, the Cloud; you
connect to it with Wi-Fi. The server has a full LATEX implementation, so you miss only
the special fonts. And, of course, you must have Wi-Fi to use it. So you can polish up
your lecture on the airplane on the way to a meeting.
Texpad has some interesting features, including:
Autocompletion of all common commands and autoﬁlling \cite-s and \ref-s.
Replacement of the LATEX console with a list of errors and warnings linked to the
source.
Global search, outline view, and syntax highlight.
Step 1. To get started with Texpad, go to the iPad App Store and install Texpad.
Sign up for Dropbox with the same e-mail address and password as for your computer’s
Dropbox.
Step 2. Now open Texpad. Figure G.10 shows Texpad at the ﬁrst startup. The
Help button gets the help ﬁle.
Step 3. Touch Oﬀto turn Dropbox On. (If you have Dropbox installed and con-
nected, it’s even simpler, you just have to Allow the connection.) Your File Storage now
gives two options: iPad and Dropbox (see Figure G.11). It is important to understand
that your LATEX ﬁles will live in the Dropbox (in the Cloud, at the Dropbox server) or
locally on your iPad.
Step 4. The Dropbox ﬁles are now available to you by touching Dropbox under
File Storage, see Figure G.11.
First, create a folder for the LATEX ﬁles to be transferred. Navigate to iPad ﬁle storage.
Touch the + in the bottom right, and choose Folder. Name the folder.
Second, navigate to the Dropbox ﬁle system view and to the folder containing the ﬁle
you want to copy. Touch Edit. Select the ﬁle to transfer. At the bottom center, touch
Copy. Navigate to the folder into which you want to copy the ﬁle and touch Copy.
Step 5. Typesetting will take place either on the iPad or in the Cloud. Go to the
folder of a LATEX ﬁle, touch the ﬁle (on the iPad or in the Dropbox), and typeset it on
the iPad (touch Local Typeset) or in the Cloud, that is, at Valletta’s server (touch Cloud
Typeset).
Step 6. Try to visualize what is happening.
If you typeset on the iPad and the ﬁle is on the iPad, it just typesets locally; that is it.
If you typeset on the iPad and the ﬁle is in Dropbox, the ﬁle is transferred to the iPad,
typeset, and the resulting pdf is sent back to the Dropbox; nothing is kept at the iPad.
If you typeset in the Cloud and the ﬁle is in Dropbox, the ﬁle is transferred to the
Cloud, typeset, and the resulting pdf is sent back to the Dropbox; nothing is kept in
the Cloud.

G.3
Two LATEX implementations for the iPad
539
Figure G.10: Texpad ﬁrst start up
Figure G.11: Expanded File Storage
If you typeset in the Cloud and the ﬁle is on the iPad, the ﬁle is transferred to the
Cloud, typeset, and the resulting pdf is sent back to the iPad.
Step 7. Once you touch a LATEX ﬁle, you are ready to edit it. Cursor control is very
important. You do it with a two ﬁnger swipe. Of course, this is not so important if you
use a Bluetooth keyboard; it has cursor keys.

540
Appendix G
LATEX on the iPad
Figure G.12: Organizer window
Step 8. You edited and typeset your LATEX ﬁle. You want to get to another ﬁle.
Touch the organize button (the folder icon on the upper left). You get the Organizer
window (see Figure G.12). Touch the button in the upper left of the window, you get
back to Dropbox, eventually, to the expanded File Storage of Figure 7.
These eight steps should be enough to get you started. Read the detailed Help ﬁle
for some more information. It is available as a help ﬁle and also at
https://www.texpadapp.com/support/ios
G.3.2
TeX Writer
You get your ﬁles via Dropbox, typeset on your iPad. Documentation: readme.pdf
is no quick start, but it is useful for understanding how TeX Writer works and how to
customize it. TeX Writer was the ﬁrst to typeset on the iPad. It could only typeset TeX
ﬁles. Now it has LATEX and the AMS packages on board.
Step 1. When you start up TeX Writer, ﬁrst link to Dropbox. In TeX Writer,
you get a display showing the source ﬁle readme.tex; see Figure G.13. Pressing the

G.4
Conclusion
541
More icon (right pointing arrow), you get more icons, to read the pdf version or Air
Printing readme.pdf. On the left is the Organize icon; touching it, you get a ﬁle listing:
readme.tex and readme.pdf. At the bottom is New File; touch it to compose one.
Step 2. So you are perplexed about what to do next, you ran out of icons. You have
to know that TeX Writer accesses the Dropbox in a special way. When you connect to
Dropbox from TeX Writer, it creates a new folder App in Dropbox. In the folder App it
creates the subfolder TeX Writer. In this subfolder you ﬁnd readme.tex. Anything
you put in the TeX Writer subfolder is visible in the ﬁle listing window on the iPad;
anything not in this subfolder is not visible to TeX Writer.
Step 3. TeX Writer gets your ﬁles from this subfolder in Dropbox. Place a folder
in there with the ﬁles of your current project. These will be available to you on your
iPad. Moreover, these ﬁles are fully synchronized, so the editing changes you make on
your iPad show up in Dropbox.
Step 4. LATEXing, you spend most of your time editing. TeX Writer’s editor has
some interesting features. Excellent cursor control. Touch begin{}, type in the name
of the environment, and the environment is placed in your document. You also have
undo, redo, search, and so on.
When typing, you retain the editing functions you get at the start, and in addition,
you get an extra row of LATEX speciﬁc keys. You do not get them with a Bluetooth
keyboard; however, the keyboard can have many of these keys you need for typing
LATEX. Nice feature: the Log viewer links to error lines.
G.4
Conclusion
Jason Snell was interviewing Craig Federighi, Apple senior vice president of software
engineering (and two more executives of Apple), for MacWorld. Snell writes:
“When I walked into Apple’s oﬃces for my conversation with the three execu-
tives, they noticed that I had brought a phone, a tablet, and a laptop, and had ultimately
selected my MacBook Air as my tool of choice for the interview.
‘You had a bunch of tools,’ Federighi said, pointing at my bag. ‘And you pulled
out the one that felt right for the job that you were doing. It wasn’t because it had
more computing power... You pulled it out because it was the most natural device to
accomplish a task.’ ”
I’m not suggesting that you write all your document on an iPad. I do suggest,
however, that you can LATEX with ease, say on a trip, correcting a document or adding
a slide to your presentation. Use your iPad to LATEX when appropriate.
LATEXing on an iPad requires some compromises, for instance, you cannot use
nonstandard fonts. Nevertheless, when not at your desk, the iPad will be nearly as
functional as your MacBook Air, and it is so much easier to carry around...
And the best is yet to come: the larger iPad will make working on the iPad easier.

542
Appendix G
LATEX on the iPad
Figure G.13: TeX Writer startup

APPENDIX
H
Final thoughts
In this ﬁnal appendix, I will outline some of the material I did not discuss and suggest
some additional reading to learn more about LATEX, typesetting, and writing. We con-
clude by looking at some projects that may come to fruition soon.
H.1
What was left out?
The mission statement in the introduction stated that my goal for this book was to pro-
vide you with a good foundation in LATEX including the AMS packages, and that we
would not cover programming or visual design. As a result, I have omitted a great deal
of material.
H.1.1
LATEX omissions
LATEX has some additional features that I have not discussed in this book:
1. The picture environment allows you to draw simple pictures with lines and circles.
2. The array, tabular, and tabbing environments have a number of additional
features.
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1
543

544
Appendix H
Final thoughts
3. LATEX makes the style parameters of a document and of most LATEX constructs available
to the user for modiﬁcation. Very few of these parameters have been mentioned in
this book.
4. Low-level NFSS commands provide ﬁner control over fonts.
The following are some pointers to additional information on these topics:
1. Drawing with the picture environment has the advantage of portability. This envi-
ronment is described in Leslie Lamport’s LATEX: A Document Preparation System,
2nd edition [53]. A very advanced internal drawing system is TikZ by Till Tan-
tau, see
http://sourceforge.net/projects/pgf/
However, I believe that the best approach is to use a drawing application that can
save your illustrations in EPS or PDF format so that you can include them in your
document using the graphicx package (see Section 8.4.3).
2. The tabbing, tabular, and array environments—and their extensions—are de-
scribed in detail in Leslie Lamport’s LATEX: A Document Preparation System, 2nd
edition [53] and Chapter 5 of The LATEX Companion, 2nd edition [56].
3. The style parameters for LATEX are set by the document class. When a publisher
changes the document class loaded by your document, the style parameters are set
to its speciﬁcations. If you explicitly change style parameters in your document,
a publisher will have trouble getting your source ﬁle to conform to their publishing
style. If you must change any basic style parameters, be sure to explain what you did
with comments.
4. There are two types of commands deﬁned in the NFSS, high-level and low-level com-
mands. The latter are, by and large, meant for style designers and package writers.
Nevertheless, anyone who wants to use fonts other than Computer Modern (the de-
fault) would do well to read Chapter 7 of The LATEX Companion, 2nd edition [56].
Low-level NFSS commands are brieﬂy mentioned in Section 3.6.9 and are used
in Appendix E.
H.1.2
TEX omissions
Almost all discussions of Plain TEX were omitted from this book. TEX is a powerful
programming language, allowing you to design any page layout or formula. Remember,
however, that to change any design feature, you should be knowledgeable not only about
TEX, but also about document design. Also keep in mind that making such changes may
make it diﬃcult or impossible for a publisher to make your document conform to its own
speciﬁcations.

H.2
Further reading
545
H.2
Further reading
Much documentation is included with the LATEX and the AMS distributions and many
third-party packages are also well documented. You will also ﬁnd a great deal of doc-
umentation on CTAN.
As you have no doubt noticed, there are many references to The LATEX Companion,
2nd edition [56] in this book. While it is not a beginner’s book, it is indispensable for
advanced LATEX users with special needs. It is also the best overview of more than
a hundred important packages. For package writers and students of NFSS, it is the basic
textbook. For graphics work, read The LATEX Graphics Companion [17], and on Web
publishing The LATEX Web Companion [18].
Learning TEX is a bit more complicated than learning LATEX. You may want to
start with Wynter Snow’s TEX for the Beginner [67]. It introduces many of TEX’s basic
concepts in a very relaxed style with many examples. The notes on LATEX make the
book especially useful, and the author gives many examples of writing macros. The
use of TEX as a programming language is not discussed.
Raymond Seroul and Silvio Levy’s A Beginner’s Book of TEX [66] is another
good introduction. This book also includes a chapter on TEX programming. Donald E.
Knuth’s The TEXbook [48] provides a nice introduction to TEX.
Paul W. Abrahams, Karl Berry, and Kathryn A. Hargreaves’ TEX for the Impa-
tient [1] explains many TEX commands, grouped by topic. This book has a very useful,
nonsequential approach. Finally, Victor Eijkhout’s TEX by Topic: A TEXnician’s Refer-
ence [14] is an excellent reference book on TEX, mainly for experts. For many tutorial
examples, see the articles and columns in TUGboat (see Section D.2).
For advice to authors of mathematical articles and books, see Mathematics into
Type [68] by Ellen Swanson (updated by Arlene Ann O’Sean and Antoinette Tingley
Schleyer). You may ﬁnd it interesting to see how many of the rules in Swanson’s book
have been incorporated into LATEX. The deﬁnitive book on style (in North America) is
The Chicago Manual of Style, 16th edition [11]. Two other views on copy editing are
presented in Judith Butcher’s Copy Editing: The Cambridge Handbook [9] and Hart’s
Rules for Compositors and Readers at the University Press, Oxford by Horace Hart
[45], updated in R. M. Ritter’s New Hart’s Rules: The Handbook of Style for Writers
and Editors [64]. The special problems of writing about math and computer science
are admirably dissected in Lyn Dupré’s BUGS in Writing: A Guide to Debugging Your
Prose, 2nd edition [13].
Most people who write math have little or no background in typography, the art of
printing with type. But when you become a typesetter, it can be useful to learn a little
bit about typography. I would highly recommend Robert Bringhurst’s The Elements of
Typographic Style [8]. See also Ruari McLean’s The Thames and Hudson Manual of Ty-
pography [54] and Alison Black’s Typefaces for Desktop Publishing: A User Guide [6].
Harley Hahn’s A Student’s Guide to Unix [44] provides an excellent introduction
to UNIX.

Bibliography
[1] Paul W. Abrahams, Karl Berry, and Kathryn A. Hargreaves, TEX for the Impatient.
Addison-Wesley, Reading, MA, 1990.
[2] Adobe Systems, PDF Reference, Version 1.7. 1st edition. Adobe Press, 2009.
[3] American Mathematical Society, AMSFonts, Version 2.2 User’s Guide. Providence, RI,
1997.
[4]
, User’s Guide for the amsmath Package (version 2.0). Providence, RI, 1999.
(Revised 2002.)
[5]
, Using the amsthm package (version 2.20). Providence, RI, 2004.
[6] Alison Black, Typefaces for Desktop Publishing: A User Guide. Architecture Design and
Technology Press, London, 1990.
[7] Johannes Braams, Babel, a multilingual package for use with LATEX’s standard document
classes. 2005, on CTAN.
[8] Robert Bringhurst, The Elements of Typographic Style. Hartley & Marks Publishers, 2004.
[9] Judith Butcher, Caroline Drake, Maureen Leach, Butcher’s Copy-editing: The Cambridge
Handbook for Editors, Copy-editors and Proofreaders. 4th edition. Cambridge University
Press, London, 2006.
[10] Pehong Chen and Michael A. Harrison, Index preparation and processing. Software Prac-
tice and Experience 19 (9) (1988), 897–915.
[11] The Chicago Manual of Style. 16th edition. University of Chicago Press, Chicago, 2010.
[12] Michael Doob, TEX Starting from 1 . Springer-Verlag, New York, 1993.
[13] Lyn Dupré, BUGS in Writing. A Guide to Debugging Your Prose. 2nd edition. Addison-
Wesley Professional, Reading, MA, 1998.
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1
547

548
Bibliography
[14] Victor Eijkhout, TEX by Topic: A TEXnician’s Reference. Addison-Wesley, Reading, MA,
1991. Free download at http://www.eijkhout.net/tbt/
[15] Michel Goossens, Frank Mittelbach, and Alexander Samarin, The LATEX Companion.
Addison-Wesley, Reading, MA, 1994. Second edition 2004.
[16] Enrico Gregorio, Horrors in LATEX: How to misuse LATEX and make a copy editor unhappy,
TUGboat 26 (2005), 273–279.
[17] Michel Goossens, Sebastian Rahtz, and Frank Mittelbach, The LATEX Graphics Companion.
Addison-Wesley, Reading, MA, 1997.
[18] Michel Goossens and Sebastian Rahtz (with Eitan Gurari, Ross Moore, and Robert Sutor),
The LATEX Web Companion: Integrating TEX, HTML and XML. Addison-Wesley, Reading,
MA, 1999.
[19] George Grätzer, Math into TEX: A Simple Introduction to AMS-LATEX . Birkhäuser Boston,
1993.
[20]
, AMS-LATEX . Notices Amer. Math. Soc. 40 (1993), 148–150.
[21] George Grätzer, Advances in TEX implementations. I. PostScript fonts. Notices Amer. Math.
Soc. 40 (1993), 834–838.
[22]
, Advances in TEX implementations. II. Integrated environments. Notices Amer.
Math. Soc. 41 (1994), 106–111.
[23]
, Advances in TEX implementations. III. A new version of LATEX, ﬁnally. Notices
Amer. Math. Soc. 41 (1994), 611–615.
[24]
, Advances in TEX. IV. Header and footer control in LATEX. Notices Amer. Math.
Soc. 41 (1994), 772–777.
[25]
, Advances in TEX. V. Using text fonts in the new standard LATEX. Notices Amer.
Math. Soc. 41 (1994), 927–929.
[26]
, Advances in TEX. VI. Using math fonts in the new standard LATEX. Notices Amer.
Math. Soc. 41 (1994), 1164–1165.
[27] George Grätzer, Math into LATEX: An Introduction to LATEX and AMS-LATEX . Birkhäuser
Boston, 1996. 2nd printing, 1998.
[28] George Grätzer, General Lattice Theory. 2nd edition. Birkhäuser Verlag, Basel, 1998.
xix+663 pp.
[29] George Grätzer, First Steps in LATEX. Birkhäuser Boston, Springer-Verlag, New York, 1999.
[30] George Grätzer, Pervije Sagi v LaTeX’e. Mir Publisher, Moscow, 2000. (Russian)
[31] George Grätzer, Math into LATEX. 3rd edition. Birkhäuser Verlag, Boston, Springer-Verlag,
New York, 2000. xl+584 pp. ISBN: 0-8176-4131-9; 3-7643-4131-9
[32] George Grätzer, Turbulent transition, TUGboat 21 (2001), 111–113.
[33]
, Publishing legacy document on the Web, TUGboat 22 (2001), 74–77.

Bibliography
549
[34] G. Grätzer, More Math into LATEX. 4th edition. Springer-Verlag, New York, 2007.
xxxiv+619 pp.
ISBN-13: 978-0-387-32289-6, e-ISBN: 978-0-387-68852-7.
Kindle Edition 2007, ASIN: B001C3ABDA
[35] G. Grätzer, A gentle learning curve for LATEX. PracTeX Journal Number 3, 2008.
[36]
, What Is New in LATEX? I. Breaking Free. Notices AMS 56 (2009), 52–54.
[37]
, What Is New in LATEX? II. TEX implementations, Evolution or Revolution. Notices
AMS 56 (2009), 627–629.
[38]
, What Is New in LATEX? III. Formatting references. Notices AMS 56 (2009),
954–956.
[39]
, What Is New in LATEX? IV. WYSIWYG LATEX. Notices AMS 58 (2011), 828–830.
[40]
, What Is New in LATEX? V. LATEX on an iPad. Foundation. Notices AMS 60 (2013),
332–334.
[41]
, What Is New in LATEX? VI. LATEX on an iPad. Empire. Notices AMS 60 (2013),
434–439.
[42] George Grätzer, Practical LATEX. Springer-Verlag, New York, 2014.
ISBN: 978-3-319-06424-6
[43] George Grätzer, What Is New in LATEX? VII. The STIX math symbols. Notices AMS 62
(2015).
[44] Harley Hahn, Harley Hahn’s Student’s Guide to Unix. 2nd edition. McGraw-Hill, New
York, 1993.
[45] Horace Hart, Hart’s Rules For Compositors and Readers at the University Press, Oxford.
Oxford University Press, Oxford, 1991.
[46] Uwe Kern, Extending LATEX’s color facilities: the xcolor package. December 21, 2005.
http:\\www.ukern.de\tex\xcolor.html
[47] Donald E. Knuth, The Art of Computer Programming. Volumes 1–3. Addison-Wesley,
Reading, MA, 1968–1998.
[48] Donald E. Knuth, The TEXbook. Computers and Typesetting. Vol. A. Addison-Wesley,
Reading, MA, 1984, 1990.
[49] Donald E. Knuth, TEX: The Program. Computers and Typesetting. Vol. B. Addison-Wesley,
Reading, MA, 1986.
[50] Donald E. Knuth, The METAFONTbook. Computers and Typesetting. Vol. C. Addison-
Wesley, Reading, MA, 1986.
[51] Donald E. Knuth, METAFONT: The Program. Computers and Typesetting. Vol. D.
Addison-Wesley, Reading, MA, 1986.
[52] Donald E. Knuth, Computer Modern Typefaces. Computers and Typesetting. Vol. E.
Addison-Wesley, Reading, MA, 1987.

550
Bibliography
[53] Leslie Lamport, LATEX: A Document Preparation System. 2nd edition. Addison-Wesley,
Reading, MA, 1994.
[54] Ruari McLean, The Thames and Hudson Manual of Typography. Thames and Hudson,
London, 1980.
[55] Frank Mittelbach, An extension of the LATEX theorem environment. TUGboat 10 (1989),
416–426.
[56] Frank Mittelbach and Michel Goosens (with Johannes Braams, David Carlisle, and Chris
Rowley), The LATEX Companion. 2nd edition. Addison-Wesley, Reading, MA, 2004.
[57] Frank Mittelbach and Chris Rowley, LATEX 2.09 →LATEX 3. TUGboat 13 (1) (1992), 96–101.
[58]
, LATEX—A new version of LATEX. TEX and TUG NEWS 2 (4) (1993), 10–11.
[59]
, The LATEX 3 project. Euromath Bulletin 1 (1994), 117–125.
[60]
, LATEX 3 in ’93. TEX and TUG NEWS 3 (1) (1994), 7–11.
[61] Frank Mittelbach and Rainer Schöpf, The new font family selection—user interface to stan-
dard LATEX. TUGboat 11 (1990), 297–305.
[62] Oren Patashnik, BIBTEXing. Document in the BIBTEX distribution.
[63]
, BIBTEX 1.0. TUGboat 15 (1994), 269–273.
[64] R. M. Ritter, New Hart’s Rules: The Handbook of Style for Writers and Editors, Oxford.
Oxford University Press, Oxford, 2005.
[65] Rainer Schöpf, A new implementation of the LATEX verbatim and verbatim* environ-
ments. TUGboat 11 (1990), 284–296.
[66] Raymond Seroul and Silvio Levy, A Beginner’s Book of TEX. Springer-Verlag New York,
1995.
[67] Wynter Snow, TEX for the Beginner. Addison-Wesley, Reading, MA, 1992.
[68] Ellen Swanson, Mathematics into Type. Updated edition. Updated by Arlene Ann O’Sean
and Antoinette Tingley Schleyer. American Mathematical Society, Providence, RI, 1999.
[69] Till Tantau, User’s Guide to the Beamer Class. 2005.
http://latex-beamer.sourceforge.net
[70] Gérard Tisseau and Jacques Duma, TikZ pur l’impatient, 2015.
http://math.et.info.free.fr/TikZ/index.html

Index
Italic numbers indicate ﬁgures or tables, bold numbers indicate deﬁnitions.
\ (backslash), 145, 498
key, 7, 60
starts commands, 6, 10, 52
text symbol, 60, 64, 489
␣(space), 9, 47, 48
and \verb* command, 128
in arguments of commands, 68
in \bibitem labels, 250
in \cite commands, 250
in command names, 52
in tabular environments, 115
text symbol, 499
\␣(space com.), 9, 49, 54, 84, 170, 500
! (exclamation mark), 7, 46
ﬂoat control, 245, 480
in \index commands, 451, 452, 454
¡ (exclamation mark, Spanish), 63, 64, 495, 498
\! (negthinspace), 162, 170, 170, 493, 500
\" (¨ dieresis/umlaut text accent), 7, 11, 63, 496,
526
" (double quote), 7, 58
in BIBTEX database ﬁelds, 444, 445
in \index commands, 454
key, 7, 47, 58
"ck (European character), 526
"s (eszett), 526
#
in custom commands, 369, 378
key, 7, 47
\# (# octothorp), 60, 64, 498
$
as inline math delimiter, 12, 13, 55, 57, 132
act as braces, 132
must be balanced, 133
in error messages, 37, 38, 127, 133, 134,
136, 216
key, 7, 47
\$ ($ dollar sign), 7, 60, 64, 498
$$
in error messages, 37
TEX displayed math delimiter, 41, 132
%
as comment character, 8, 45, 67–69, 121,
276, 455
in BIBTEX databases, 69, 442
key, 7, 47
\% (% percent), 7, 45, 60, 64, 69, 498
in e-mail addresses, 262
&
as alignment point, 20, 22, 200, 201, 203
as column separator, 16, 115, 203, 214, 219
key, 7, 47
\& (& ampersand), 60, 64, 498
’ (right single quote), 7, 9, 46, 58, 499
for primes (′), 14, 138, 178
\’ ( ´ acute text accent), 63, 496
\( (start inline math mode), 13, 57
acts as special brace, 132, 133
must be balanced, 133
(
as math delimiter ( ( ), 145, 489
in index entries, 452
key, 7, 46
\) (end inline math mode), 13, 57
acts as special brace, 132, 133
must be balanced, 133
© Springer International Publishing AG 2016
G. Grätzer, More Math Into LATEX, DOI 10.1007/978-3-319-23796-1
551

552
Index
)
as math delimiter ( ) ), 145, 489
in index entries, 452
key, 7, 46
* (* asterisk), 60
interactive prompt, 95, 375–377, 511
key, 7, 46
** prompt, 511
*-form
of commands, 52, 80, 83, 85, 87, 109, 110,
128, 178, 179, 225, 235, 304, 371,
374, 381, 384, 438, 465, 467
of environments, 136, 185, 195, 197, 199,
213, 243
+ key, 7, 46
+ (plus), 14, 46, 137, 168, 171, 172, 197, 200,
201
as binary operation, 486
+ and −rule, 169, 171, 172, 201
and subformulas, 200
in multline environments, 197
\, (thinspace), 16, 51, 58, 170, 170, 493, 500
, (comma), 7, 46
and italic correction, 75
in \bibitem commands, 250
in BIBTEX databases, 424, 425, 444
use in formulas, 135
- (dash, hyphen, minus), 7, 14, 46, 58, 59, 137,
168, 171, 172, 179, 200, 201
as binary operation, 486
in \hyphenation commands, 65
\- (opt. hyphen), 12, 65, 65, 79
– (– number ranges, en dash), 11, 59, 64, 498
in BIBTEX databases, 427
–- (— em dash), 11, 59, 64, 498
-> TikZ rightarrow com., 354–356
. (period), 7, 46
and italic correction, 75
in BIBTEX databases, 426
\. overdot text accent (˙), 63, 496
\/ (italic correction), 74–75, 500
and font commands, 75
/ (slash)
as divisor, 14, 46, 137
as math delimiter (∕), 145, 489
key, 7
\: (medspace spacing com.), 170, 493, 500
: (colon), 7, 46
as binary relation, 41, 47, 171, 483
\; (thickspace), 170, 493, 500
; (semicolon), 7, 46
< (less than)
as binary relation (<), 483
key, 12, 46
text symbol, 64, 498
<- TikZ leftarrow com., 354–356
\=
macron text accent (¯), 63, 496
tab set command, 121
= (equal sign)
as binary relation (=), 483
in BIBTEX database ﬁelds, 424
key, 7, 46
\> (tabbing com.), 121, 122
> (greater than)
as binary relation (>), 483
key, 12, 46
text symbol, 64, 498
?
prompt, 511
question mark, 7, 46
¿ (Spanish question mark), 63, 64, 495, 498
@ (@ at sign), 7, 47, 60
in BIBTEX database (bib) ﬁles, 424
in \index commands, 453, 454
@-expression, 115
@. (blank math symbol for comm. diagrams),
223
\@. (intersentence space), 50, 500
@«< (stretchable left arrow math sym.), 223
@= (stretchable equals sign math sym.), 223
@»> (stretchable right arrow math sym.), 223
@AAA (stretchable up arrow math sym.), 223
@VVV (stretchable down arrow math sym.), 223
@\vert (stretchable double vertical line), 223
\[ (start displayed math mode), 13, 18, 41, 132,
135
acts as special brace, 132, 136
[
and optional arguments, 18, 52, 53, 108,
112, 115
key, 7, 46
math delimiter ( [ ), 145, 489
with \item commands, 102
with \newcommand, 368
\] (end displayed math mode), 13, 18, 41, 132,
135
acts as special brace, 132, 136
]
and optional arguments, 18, 52, 53, 108,
112, 115
key, 7, 46
math delimiter ( ] ), 145, 489
with \item commands, 102
with \newcommand, 368
{
for required arguments, 6, 10, 13, 52, 53,
138, 364, 506
for scoping, 55–57
in BIBTEX entries, 424, 427

Index
553
key, 7, 47
must be balanced, 36, 38, 55, 60
in \index commands, 459
with \def, 377
\{
as math delimiter ({ ), 41, 145, 489
text brace ({ ), 60, 64, 498
}
for required arguments, 6, 10, 13, 52, 53,
138, 364, 506
for scoping, 55–57
in BIBTEX entries, 424, 427
key, 7, 47
must be balanced, 36, 38, 55, 60
in \index commands, 459
with \def, 377
\}
as math delimiter ( }), 41, 145, 489
text brace ( }), 60, 64, 498
ˆ (caret)
for superscripts, 14, 16, 138–139, 141, 161
key, 7, 47, 60
\ˆ circumﬂex text accent (ˆ), 63, 64, 496, 498
\_
( _ underscore), 7, 60, 64, 498
in e-mail addresses, 261
_
(underscore)
for subscripts, 14, 16, 138–139, 141, 155,
161
key, 7, 47
‘ (left single quote), 7, 9, 46, 58, 499
\‘ ( ` grave text accent), 46, 63, 496
\| ( ‖ math delimiter), 145, 146, 165, 489
˜ (tilde)
key, 7, 9, 47
tie/unbreakable space, 9, 47, 49, 50, 59, 59,
81, 500
absorbs spaces, 59
in BIBTEX databases, 427
with cross-references, 240
\˜ ( ˜ tilde text accent), 60, 63, 496, 499
9pt (doc. class option), 279
10pt (doc. class option), 86, 279, 288
11pt (doc. class option), 279, 288
12pt (doc. class option), 76, 279, 288
\\ (new line), 79, 81
and \kill commands, 122
breaking lines with, 16, 20, 21, 23, 80, 104,
115, 121, 122, 125, 153, 195, 196,
198, 200, 210, 213, 225, 257–261,
278, 286, 291, 340
in arguments of commands, 81
in environments, 81, 104, 125
in text, 81
optional argument of, 80, 80, 81, 225
\\* (new line), 80, 225
a4paper (doc. class opt.), 279, 288
a5paper (doc. class opt.), 288
\AA (Å), 63, 495
\aa (å), 63, 495
abbreviations
in bibliographic entries, 435–436
deﬁning, 436
periods in, 49–51
using small caps for, 74, 474
using ties (˜) with, 50
above (TikZ graphics pack. com.), 351
Abrahams, Paul W., 545, 547
absolute
names for equations, 20
referencing, 20, 99, 186, 240–241
units, 11, 72, 76, 78, 79, 87, 89, 92, 290,
405
abstract (text env.), 24, 51, 233, 268
in beamer document class, 308
in report document class, 285
placement of, 233, 268
abstract (bibl. com.), 425
\abstractname (redef. name), 375
abstracts, 24, 233, 308
in AMS document classes, 268
in report document class, 285
separate page for, 231, 281
accents
European, 11, 62, 63, 499
hyphenation of words with, 65
in bibliographies, 427
in hyperref titles, 303
math, 16, 154–155, 163, 164, 283, 375,
477
double, 154
text, 7, 11, 53, 62, 63, 496, 499
accents (pack.), 155
acronyms, using small caps for, 74, 474
acute ( ´ acute text accent), 63, 496
\acute ( ́𝑥math accent), 154, 492
\addcontentsline (table of contents com.)
and lists of ﬁgures and tables, 470
arguments of, 468, 470
adding lines
to lists of ﬁgures and tables, 470
to tables of contents, 467–468, 480
addition, 14, 46, 137
\address (top matter com.), 277, 308
in letters, 291
optional arguments of, 260, 261
rules for using, 260–261
with multiple authors, 264
address (BIBTEX database ﬁeld), 424, 425

554
Index
addresses
in letters, 291
of authors in articles, 260, 264, 277
\addtocontents (table of contents com.)
and lists of ﬁgures and tables, 470
arguments of, 468, 470
\addtocounter (counter incr. com.), 403
\addtolength (counter setting com.), 406
adjusted
columns, 193, 214–224
formulas, 194, 214–224
ﬂush left and right, 198
adjusting
interline spacing, 78, 80–82
placement of root with \sqrt, 142
Adobe
Acrobat Professional, 300, 303, 307, 477
placing hyperlinks in documents, 301
Illustrator, 26, 343, 357
PostScript (PS), see PS
Reader, 26, 303, 307, 341, 480
Adobe Systems, 299–301, 547
\AE Aesc (Æ), 63, 495
\ae aesc (æ), 63, 495
\afterpage (delay com.), 294
afterpage (pack.), 294
afterwords, of books, 465
\aleph (ℵHebrew char.), 144, 481
\alert (beamer text style com.), 319
align (TikZ graphics pack. com.), 351
align (math align. env.), 20–22, 22, 22, 41,
192, 193, 194, 202–207, 212, 213,
477, 504
annotated, 193
page breaks in, 224
align* (math align. env.), 22, 204, 209
alignat (math align. env.), 41, 192, 194,
207–208
argument of, 208
aligned
formulas, 20–22, 191–194, 202–208, 212,
214–215, 224, 280, 504
text in, 208–210
math environments, 224
align, 20–22, 41, 192, 194, 202–207,
212, 213, 224
alignat, 41, 192, 194, 207–208
and \verb commands, 128
eqnarray, 205
flalign, 192, 194, 205, 213
inserting lines of text in, 208
intercolumn space in, 191
subsidiary math environments, 210–214
aligned, 194, 210–212
alignedat, 210–212, 222
split, 192, 194, 212–214, 280
aligned (subsid. math align. env.), 194,
210–212
and \allowdisplaybreaks commands,
225
alignedat (subsid. math align. env.), 210–212,
222
and \allowdisplaybreaks commands,
225
alignment
of columns in tabular environments, 115,
116, 295
of formulas, see also under adjusted,
202–214
annotated, 23, 193
commands for, 198
ﬂush left and right, 191
multiline, 20–23, 200–201, 203
simple, 21, 20–22, 22
of large symbols, 211–212
of text, 51, 88, 104, 114, 210, 408
centering, 6, 10, 41, 104, 104, 114, 116,
210, 309, 416
command declarations for, 104, 116
ﬂush left, 10, 104
ﬂush right, 10, 88, 104
with trivlist environments, 416
of text boxes, vertical, 93
point for subformulas (&), 20, 22, 23, 200,
201, 203
within text boxes, 89, 93
allowdisplaybreaks (display break com.),
224
and subsidiary math environments, 225
optional argument of, 225
alltt (disp. text env.), 139, 293
alltt (pack.), 127, 293, 510
\Alph (uppercase letter counter style com.), 402
\alph (lowercase letter counter style com.), 402
\alpha (𝛼Greek char.), 144, 482
alpha (BIBTEX style), 428
alphabets (counter styles), 402
alphabets, math, 179, 178–179
blackboard bold, 161, 180, 390, 492
calligraphic, 165, 180, 283, 390, 492
Euler Fraktur, 160, 162, 180, 283, 390, 492
Euler Script, 283, 284, 390, 492
Greek, 180
symbol, 180–182
alphanumeric keys, 7
\amalg (⨿math op.), 486
ampersand (&)
as alignment point
for annotations, 22, 23
for subformulas, 20, 22, 200, 201, 203

Index
555
as column separator, 16, 115, 203
text symbol, 60, 64, 498
AMS (American Mathematical Society), xxv,
505, 521
AMSFonts, see AMSFonts
article templates, 275–278
bibliographies
database ﬁles, 436
ﬁelds, 425
sample ﬁles, 436, 436–438
styles, 250, 421, 422, 426, 436–438
distribution, 255, 282, 282–284, 379, 436,
437, 501
document classes, see document classes
environments, see displayed math
environments, subsidiary math
environments, and text environments
subject classiﬁcations, 263
technical support provided by, 519
top matter
AMS speciﬁc information, 263–264
article information, 257–259
author information, 259–263
commands, 257–268, 277
examples of, 265–268
rules for, 259–263
with multiple authors, 264–265
Web site, 263, 519
\AmS (AMS logo com.), 62
AMS package distribution, 255, 282, 282–284,
307, 379, 418, 436, 437, 501
AMS-LATEX, 503, 504
history of, 501–505
version 1.0, 504
version 1.1, 504
two-letter font commands, 77
version 1.2, 504
version 2.0, 504
AMS-TEX, 502, 504
history of, 501–505
amsalpha (BIBTEX style), 428
amsart (doc. class), 32, 40, 65, 104, 133, 173,
231–233, 236, 255–284, 463, 466,
506, 512
anatomy of, 23
and numbered lists, 98
front matter of, 268
sample article, 104, 109, 111, 213, 251,
257, 268–272, 275, 370, 375, 382,
421, 436, 436, 394–442, 512
top matter of, 233
amsart.tpl (sample ﬁle), 275
amsbook (doc. class), xxviii, 32, 235, 376, 463,
464–466, 506
for exercises, 470
amsbsy (pack.), 282–284
amscd (pack.), 222–224, 282
AMSFonts, 281, 283
document class options for, 281–282
PostScript versions of, 281, 283, 504, 510
technical support for, 519
updates to, 510
amsfonts (pack.), 283
options, 283
amsgen (pack.), 282, 283
amslatex (LATEX distr. directory), 293, 294,
518
amsmath (pack.), 32, 214, 282, 282–284, 405,
504, 510
document class options aﬀecting, 280–281
options, 280
amsmath.sty (AMS distr. ﬁle), 386
amsmidx (pack.), 284
\AMSname (hyperref redef. name), 305
amsopn (pack.), 282, 283
amsplain (BIBTEX style), 422, 436–438
amsplain.bst (BIBTEX style ﬁle), 421, 422,
426, 437, 438, 445
amsproc (doc. class), 257, 376, 506
amsproc template (AMS sample template
ﬁle), 279
amsrefs, 446
creating typeset bibliography, 446
amssymb (pack.), 160, 276, 282, 283, 373
amstext (pack.), 283
amsthm (pack.), 32, 283
amsxtra (pack.), 154, 155, 282, 283
\And (& math op.), 486
\and, top matter command, 286, 288
and, in bibliographies, 426
\angle (∠math sym.), 488
annotations
alignment of, 22, 23
of formulas, 207
apalike (pack.), 436
apostrophe (’), 9, 46
key, 14, 178
appendices, 237, 465
numbering of, 237, 465
\appendix (struct. com.), 237, 465
\appendixname (redef. name), 376
and hyperref package, 305
\approx (≈binary rel.), 483
\approxeq (≊binary rel.), 484
\arabic (numeric counter style com.), 402,
403, 412
arc (TikZ graphics pack. com.), 349
\arccos (arccos math op.), 149, 490
\arcsin (arcsin math op.), 149, 490
\arctan (arctan math op.), 149, 490

556
Index
\arg (arg math op.), 149, 490
arguments
and tokens, 506
empty ({ }), 54, 139, 157, 169, 177, 188,
263, 291
long, 57
movable, 57, 469
negative, 84, 142
of commands, see also under speciﬁc
commands, see also under speciﬁc
commands, 309, 316, 331, 332, 336
of commutative diagram symbols, 223
of custom commands, 368–371
multiple, 368, 370
optional, 372
short, 371–372
of custom environments
optional, 379, 382–384
short, 384
of environments, see also under speciﬁc
environments
of top matter commands, see also top
matter, 256, 257, 263–265, 268
optional, 55, 81, 83, 94–96, 105, 141, 142,
157, 216, 225, 232
multiple, 53
of commands, 100, 102, 103, 107, 183,
184, 250, 260–263, 329, 401, 403,
410, 411, 416, 470
of environments, 53, 105, 108, 112, 115,
212, 225, 244, 245, 383, 480
of sectioning commands, 235, 467
of structural commands, 237, 464
of TikZ commands, 344
of top matter commands, 257–265
use square brackets ([ ]), 18, 52–53, 103,
112, 115, 268
required, 93, 94, 157, 177, 256, 257, 512
multiple, 13, 53, 117, 174, 176, 177,
254, 293, 378, 406, 407
of commands, 13, 53, 117, 174, 176,
177, 239, 254, 263, 406, 468, 472, 496
of environments, 53, 115, 207, 208, 219,
220, 247–248, 250, 291, 383–384,
470
use braces ({ }), 6, 10, 13, 52, 53, 506
short, 57
single character, 53
spacing within, 13, 68, 89, 134, 142, 160,
174, 176, 459
specifying zero in, 96
arithmetic
operations, 14–15, 137–139
with counters, 295, 403–404
with length commands, 295, 406
around (TikZ graphics pack. com.), 352
array (subsid. math env.), 192, 194, 212, 215,
218–221, 221, 294, 503
arguments of, 219, 220
array (pack.), 294
arrays, 16–17, 218–221
\arraystretch (table com.), 119
adjusting vertical spacing with, 119
arrow (TikZ tikz-cd pack. com.), 354–356
arrows, math, 156, 168, 222, 487
as delimiters, 145, 146, 489
ARTICLE (bibl. entry type), 424, 428
article (doc. class), 25, 32, 173, 231, 233,
256, 284, 285, 288, 285–290, 376, 506
bibliographies in, 247, 249
sectioning commands provided by, 236
articles
bibliographies in, 245–251, 423, 436,
436–438, 445
creating templates for, 275–278
in BIBTEX database ﬁles, 428–429, 435
sectioning of, 234–237
top matter information
AMS speciﬁc, 257–268
AMS subject classiﬁcations, 263
author addresses, 260, 264, 277
author names, 259, 277
contributor, 260
current addresses, 261, 265
dedications, 259
e-mail addresses, 261, 264, 277
Internet addresses, 262, 264, 277
keywords, 264, 278
research support, 262, 264, 277, 286
title, 257, 278
\ast ( ∗math op.), 486
asterisk (* text symbol), 64, 498
\asymp (≍binary rel.), 483
at sign (@)
in BIBTEX database (bib) ﬁles, 424
in \index commands, 453, 454
\author (top matter com.), 231, 286, 288, 313,
466
multiple authors in, 286
optional arguments of, 259, 313
author (BIBTEX database ﬁeld), 424
authors
information about
in AMS top matter, 259–264
multiple
in AMS documents, 264
in bibliographies, 426
in documents, 286
names of
in articles, 259, 277

Index
557
in running heads, 259
AutomaTeX
LATEX app for iPad, 534
automatic
numbering, 18, 20, 34, 99, 105, 213, 234
renumbering, 19, 34, 512
\autoref (hyperref cross-ref. com.), 302,
302, 304
names supported by, 305
aux (aux. ﬁles), 34, 34, 439, 469, 480
symbolic references recorded in, 508
auxiliary ﬁles, 34, 470, see also aux, bbl, bib,
blg, bst, glo, idx, ilg, ind, lof,
log, lot, out, and toc, 480, 508
names of, 508
polishing, 480
\b (¯ underscore text accent), 63, 496
b5paper (doc. class opt.), 288
babel (LATEX distr. directory), 293
babel (pack.), 294, 525–526
options, 526
babybeamer1.pdf (sample ﬁle), 315–317
babybeamer2.tex (sample ﬁle), 315
babybeamer3.tex (sample ﬁle), 320
babybeamer4.tex (sample ﬁle), 325
babybeamer5.tex (sample ﬁle), 321
babybeamer6.tex (sample ﬁle), 324, 325
babybeamer6block.tex (sample ﬁle), 325
babybeamer7.tex (sample ﬁle), 325, 327–329
babybeamer8.tex (sample ﬁle), 329
babybeamer9.tex (sample ﬁle), 331
babybeamer10.tex (sample ﬁle), 341
back matter, 231, 245–252, 465
bibliographies in, 231
index in, 448
numbering of chapters in, 465
\backepsilon (϶ binary rel.), 484
\backmatter (struct. com.), 465
\backprime ( ‵ math sym.), 488
backref (pack.), 302, 303
backref (opt. of hyperref pack.), 302, 303
\backsim (∽binary rel.), 484
\backsimeq (⋍binary rel.), 484
\backslash (\ math delimiter), 145, 489
backslash (\ text symbol), 64, 498
badness, 507
balancing
braces, 55, 60
errors with, 55–57
in \index commands, 459
inline math delimiters, 133
math delimiters, 146, 200
\bar (̄𝑥math accent), 16, 154, 155, 164, 492
bar, vertical ( | text symbol), 64, 498
\barwedge (⊼math sym.), 486
base (LATEX distr. directory), 293, 293
packages in, 293
base names (of ﬁles), 508
baseline, of text, 78, 90
adjusting with setspace, 81
\baselineskip (length com.), 78, 83
\baselinestretch (length com.), 81
\Bbbk (𝕜math sym.), 488
bbl (proc. bibl. ﬁles), 445, 446
beamer (doc. class), see also under
presentations, 307–342
abstracts in, 308
color in, 330
commands
\beamergotobutton, 326
\breakhere, 332
\color, 321, 330
\colorbox, 331
\fcolorbox, 331
\frametitle, 27–29, 309, 310, 326
\hyperlink, 325
\institute, 308
\note, 336
\only, 315–317, 319–321, 325
\onslide, 315, 317, 319–321, 324, 325
\pause, 29, 85, 315, 315, 319
\setbeamercolor, 332
\setbeamertemplate, 336
\tableofcontents, 310
\textcolor, 330
\usecolortheme, 339
\usefonttheme, 340
\usetheme, 26, 310, 339
documentation for, 307, 341
installation of, 308
options
handout, 341
notes=only, 338
notes=show, 336
trans, 336, 341
xcolor=dvipsnam, 331
preamble in, 26, 308–309
sections in, 310
sidebars, 310
sidebars in, 310
table of contents in, 310
themes, 26, 310, 338–340
top matter in, 26, 308–309
\beamergotobutton (beamer com.), 326
beamerstructure.tex (sample ﬁle), 333, 336
\because (∵binary rel.), 484
\begin (start of env.), 51, 51, 55, 56
below (TikZ graphics pack. com.), 348, 351
Berkeley (beamer theme), 310, 313, 314, 339

558
Index
Berry, Karl, 522, 545, 547
font-naming scheme, 522
\beta (𝛽Greek char.), 144, 482
\beth (ℶHebrew char.), 144, 481
\between (≬binary rel.), 484
Bezos, Javier, 155, 503
\bf (obs. LATEX 2.09 font com.), 77, 78
\bfseries (font weight com. dec.), 55, 56, 57,
73, 76, 77, 78, 103, 496
bfseries (font weight env.), 103
bib (BIBTEX database ﬁles), 421, 423–436, 439
accents in, 427
AMS, 436, 436–438
commas (,) in, 424, 425, 444
comments in, 442
cross-referencing within, 432–433
delimited with parentheses (( )), 424
delimiters in, 424
double quote (") in, 444, 445
en dashes (–) in, 427
entries
abbreviations in, 435–436
capitalization in, 427
Jr. in, 426
multiple authors in, 426
von in, 426
entry types, 423–436
case-sensitivity of, 425
start with @, 424
equals signs (=) in, 424
ﬁelds in, 425, 431–433, 435
adding your own, 425
case-sensitivity of, 425
optional, 425, 428–435
required, 425, 428–435
rules for typing, 425–436
termination of, 444
used by AMS bibliography styles, 425
location of, 439
number ranges in, 427
numbers in, 424
periods (.) in, 426
portability of, 426
samples of, 423, 436, 445
ties (unbreakable spaces) in, 427
\bibcite (aux. ﬁle com.), 508
BibDesk bibl. manager, 445, 446
\bibitem (bibl. com.), 19, 248
commas in, 250
labels for, 247
optional argument of, 250
spaces in, 250
biblatex (pack.), 446
bibliographies, 24, 245–251
AMS support for, 436, 436–438
appear in back matter, 231
citing references from, 19, 250, 438
as hyperlinks in PDF ﬁles, 302
with BIBTEX, 438
commands for, 436, 438
deﬁning, 50, 245–251, 373, 408, 423–436
document class options aﬀecting, 290, 290
entries made in auxiliary ﬁles for, 508
examples of, 245–247, 421–423
in articles, 423, 436, 445
multiple, in a document, 251
numbering of, 248
portability of, 426, 428
sample ﬁles for, 423, 436, 437–438, 445
styles, 422, 436
AMS, 250, 422, 426, 436, 438
templates, 245
with amsrefs, 446
\bibliography (bibl. com.), 53, 437, 438
bibliography managers
BibDesk, 445, 446
BibTexMng, 445, 446
Ebib, 445
JBibtexManager, 445
pybibliographer, 445
\bibliographystyle (bibl. com.), 437,
438
\bibname (redef. name), 251, 376
BIBTEX, 303, 421–446
AMS support for, 436
citing references with, 438
commands, 436, 438
log ﬁles, see blg
running, 436–445
sample ﬁles for, 423, 436, 437–438
style ﬁles, see bst
styles, 422, 426, 436, 438
BIBTEX 1.0 (Patashnik), 550
BIBTEXing (Patashnik), 445
BibTexMng bibl. manager, 445, 446
\Big (math delim. size com.), 147
\big (math delim. size com.), 147
\bigcap (⋂large math op.), 152, 491
\bigcirc (○math op.), 486
\bigcup (⋃large math op.), 152, 491
\Bigg (math delim. size com.), 147
\bigg (math delim. size com.), 147
\Biggl (math delim. size com.), 147
\biggl (math delim. size com.), 147, 164
\biggm (math delim., as binary rel. size com.),
148
\Biggr (math delim. size com.), 147
\biggr (math delim. size com.), 147, 164
\Bigl (math delim. size com.), 147
\bigl (math delim. size com.), 147

Index
559
\bigm (math delim., as binary rel. size com.),
148
\bigodot (⨀large math op.), 152, 491
\bigoplus (⨁large math op.), 152, 491
\bigotimes (⨂large math op.), 152, 491
\Bigr (math delim. size com.), 147
\bigr (math delim. size com.), 147
\bigskip (spacing com.), 40, 86
\bigsqcup (⨆large math op.), 152, 491
\bigstar (★math sym.), 488
\bigtriangledown (▽math op.), 486
\bigtriangleup (△math op.), 486
\biguplus (⨄large math op.), 152, 491
\bigvee (⋁large math op.), 152, 491
\bigwedge (⋀large math op.), 152, 491
binary operations, 168, 169, 178, 486
+ and −rule, 171, 197, 200
adding white space around, 135
and alignment of displayed formulas, 201
and breaking displayed formulas, 197, 200,
201
created with \overset, 176
created with \underset, 162
deﬁning, 178
and subformulas, 200
for congruences, 151
binary relations, 41, 148, 161, 168, 169, 171,
483, 484
adding white space around, 135
and alignment of displayed formulas, 201
and breaking displayed formulas, 201
created with \overset, 162, 176
deﬁning, 178
delimiters as, 148
math delimiters as, 148
negated, 161, 177, 485
\binom (math com.), 15, 139
binomial coeﬃcients, 15, 139
in inline and displayed math environments,
139
bitmap fonts, 521
Black, Alison, 545, 547
blackboard bold (math alphabet), 161, 180, 390
\blacklozenge (⧫math sym.), 488
\blacksquare (■math sym.), 488
\blacktriangle (▴math sym.), 488
\blacktriangledown (▾math sym.), 488
\blacktriangleleft (◀binary rel.), 484
\blacktriangleright (▶binary rel.), 484
blank
lines
in bibliographies, 303
in displayed math environments, 37,
134, 136, 198
in inline math environments, 134
in text environments, 40, 98, 98
in top matter commands, 257
in verbatim environments, 126
terminating paragraphs with, 9, 40, 48,
82, 98, 124, 303
math delimiters, 146, 162
math symbol for commutative diagrams
(@), 223
blg (BIBTEX log ﬁles), 441
block (beamer env.), 324–325
Blue Sky Research, 505, 521
blue spaces, see also tie, unbreakable spaces,
nonbreakable spaces, 59
bm (pack.), 295
Bmatrix (subsid. math env.), 217
bmatrix (subsid. math env.), 217
\bmod (mod math op.), 151, 151, 486
body
of books, 465
of documents, 8, 24, 51, 157, 230–252
of environments, 51
of page, 252
of presentations, 309
bold
font weight, 10, 72, 73, 76, 77, 78, 103,
143, 164, 179, 179, 180, 283, 390, 496
math symbols, 181–182, 282, 295
\boldsymbol (math font weight com.), 164,
180, 181, 282, 492
BOOK (bibl. entry type), 424, 429–430
book (doc. class), xxviii, 32, 235, 376, 463,
466, 464–466, 468, 504, 506
BOOKLET (bibl. entry type), 424, 435
bookmarks=true (opt. of hyperref pack.),
302
bookmarks, in PDF documents, 303
books
bodies of, 465
document classes for, 32, 235, 463,
464–466, 468, 470, 504, 506
options of, 466
ﬁnal preparation of, 476–480
in BIBTEX database ﬁles, 429–430
logical design of, 473–475
numbering of structures in, 464
sectioning of, 464–465, 473
structure of, 465
top matter of, 233
writing with LATEX, 463–480
booktabs (pack.), 120
booktitle (BIBTEX database ﬁeld), 425, 433
\bot (⊥math sym.), 488
bottoms, of text boxes, 407
\bowtie (⋈binary rel.), 483
\Box (□math sym.), 488

560
Index
\boxdot (⊡math op.), 486
boxes, 89–96
and length commands, 407
around formulas, 189
commands for measuring, 407
invisible, see struts
multiline, 89
paragraph, 92–93
solid, 95, see also struts
text, 89–96
alignment of contents in, 89, 93
behave as single characters, 89
commands for, 13, 18, 65, 66, 81, 89,
89–96, 118, 120, 134, 142–143, 160,
161, 189, 224, 283
environments for, 89, 91, 93, 382, 383
ﬁne tuning placement of, 96
framed, 91–92
measurements of, 407
single line, 89–90, 142
vertical alignment of, 93, 96
vertical alignment of, 93
\boxminus (⊟math op.), 486
\boxplus (⊞math op.), 486
\boxtimes (⊠math op.), 486
Braams, Johannes, xxix, 503, 525, 547, 550
braces
must be balanced, 36, 55, 56, 60, 70, 159,
459
special, 13, 55, 56, 132, 133, 136
cannot overlap, 55–57
environments act as, 55
stretchable horizontal, 155–156
braces, curly ({ }), 6, 10, 13, 14, 52, 53, 55, 138,
139, 161, 169, 188, 200, 201, 263,
268, 364, 379
and command declarations, 366
as math delimiters, 41, 145, 489
deﬁne scope, 55–57
in BIBTEX entries, 424, 426, 427, 435
in \index commands, 459
in text ({ }), 60, 64, 498, 506
unbalanced, 36, 38, 60
with \def, 377
brackets, square ([ ]), 7, 46
as math delimiters, 15, 145, 489
breaking formula lines within, 201
enclose optional arguments, 18, 52–53,
103, 112, 115, 145, 313
with \newcommand, 368
\breakhere (beamer com.), 332
breaking
formulas, see under formulas
lines, see under lines
paragraphs, see under paragraphs
breve (˘ text accent), 63, 496
\breve ( ̆𝑥math accent), 154, 492
Bringhurst, Robert, 50, 545, 547
browsers, see under Internet
bst (BIBTEX style ﬁles), 421, 422, 426, 437,
438
determine use of ﬁelds, 425
form of citations created by, 428
location of, 439
\bullet (∙math op.), 486
bullet (• text sym.), 64, 498
bulleted lists, 99
\Bumpeq (≎binary rel.), 484
\bumpeq (≏binary rel.), 484
Butcher, Judith, 545, 547
\bysame (bibl. com.), 250, 373
\c (ç cedilla text accent), 63, 496
c
○(copyright text sym.), 64, 498
calc (pack.), 295, 404, 407
calligraphic (math alphabet), 165, 180, 283,
390, 492
\Cap (⋒math op.), 486
\cap (∩math op.), 486
capitalization, in bibliographic databases,
250
\caption, 37
in ﬁgures, 243
in tables, 26, 242
optional argument of, 470
captions, 114, 470
in ﬁgures, 243
in lists, 100, 470
in tables, 26, 242
multiple, 242
caret (ˆ), 60
Carlisle, David, xxix, 103, 116, 240, 243, 302,
366, 503, 550
caron (ˇ text accent), 63, 496
case-sensitivity
of BIBTEX ﬁelds and entry types, 425
of command names, 52
of environment names, 52
of \label arguments, 239
of sort keys in \index commands, 459
cases (subsid. math env.), 22–23, 192, 194,
221–222
page breaks in, 224
\ccname (redef. name), 376
CD (subsid. math env.), 222–224
\cdot (⋅math op.), 14, 137, 486
\cdots (centered ellipsis), 41, 140, 166
cedilla (ç text accent), 63, 496
ceiling math delimiters, 145, 489
center (TikZ graphics pack. com.), 351

Index
561
center (text align. env.), 6, 41, 88, 104, 114,
210, 408
breaking lines in, 104
LATEX deﬁnition of, 416
\centerdot (· math op.), 486
centered ellipses, 15, 140
\centering (alignment com. declaration),
104, 210, 309
centering text, 6, 10, 41, 104
in columns in tabular environments, 115
in presentations, 309
in tables, 114, 116
centertags (doc. class opt.), 280
centimeter (cm abs. unit), 87, 89, 92, 405
\cfrac (math com.), 183
\chapter (struct. com.), 235, 237, 286, 464
arguments of, 464
numbering of
equations in, 464
in front and back matter, 465
chapter (counter), 401, 402
chapter (BIBTEX database ﬁeld), 425
\chaptername (redef. name), 376
and hyperref package, 305
chapters
document class options to set start pages
for, 466
grouping into parts, 464
in BIBTEX database ﬁles, 435
in books, 464
numbering of, in front and back matter, 465
characters, see also glyphs
accented, 7, 11, 46, 53, 62, 65, 154–155,
163, 303, 418, 427
European, 11, 62, 495–496
following verbatim environments, 126
Greek, 144, 161, 388–390, 482
Hebrew, 144, 481
invalid, 7, 47
math, 12, 46
special, 7, 47, 60–61
accessing with \symbol, 61, 293
in \index commands, 454
treating text boxes as, 89
\check (̌𝑥math accent), 154, 492
checkers, spelling, 35
Chen, Pehong, 447, 460, 547
\chi (𝜒Greek char.), 144, 482
\circ (◦math op.), 486
\circeq (≗binary rel.), 484
circle (TikZ graphics pack. com.), 345,
345–349, 353
\circlearrowleft (↺math arrow), 487
\circlearrowright (↻math arrow), 487
\circledast (⊛math op.), 486
\circledcirc (⊚math op.), 486
\circleddash (⊝math op.), 486
\circledS (Ⓢmath sym.), 488
circumﬂex (ˆ)
text accent, 63, 496
text symbol, 64, 498
citations, bibliographic, 19, 40, 237, 248, 438
created by BIBTEX styles, 428, 438
hyperlinks in PDF ﬁles, 302
showing in margins, 240
\cite (bibliographic com.), 19, 40, 237, 248
multiple citations, 250
optional argument of, 250
showing contents, in margin, 295
showing labels in margins, 240
spaces in, 250
with BIBTEX, 438
classes, document, see document classes
classiﬁcation of math symbols, 168–169, 178
\cleardoublepage (page breaking com.), 83
cleardoublepage.sty (sample ﬁle), 83
\clearpage (page breaking com.), 83, 84, 245
clients
FTP, 516
\cline (table com.), 117–118, 118
Cloud and iPad, 529, 538
cls (doc. class ﬁles), 232, 375, 412
\clubsuit (♣math sym.), 488
CM (Computer Modern) fonts, see Computer
Modern fonts
cm (centimeter abs. unit), 87, 89, 92, 405
cmr10.tfm (TEX font metric ﬁle), 506
coeﬃcients, binomial, see binomial coeﬃcients
collections, in BIBTEX database ﬁles, 431–432
\colon (∶math com.), 41, 47, 171
colophons, of books, 465
color
in presentations, 330–332
in TikZ graphics, 354
\color (beamer com.), 321, 330
\colorbox (beamer com.), 331
colorlinks (opt. of hyperref pack.), 302,
303
column (beamer env.), 329
columns
double
document class options for, 281, 289
ﬁgures spanning, 243
footnotes in, 295
tables spanning, 243
in presentations, 329–330
math
adjusted, 214–224
adjusting with flalign environment,
205

562
Index
columns (cont.)
in aligned formulas, 202–214
specifying in matrix subsidiary
environments, 216
multiple, 84, 295, 503
separator (&), 16, 115, 203
width of, in tabular environments, 116
columns (beamer env.), 329
combining
document class options, 290
encapsulators in \index commands, 452
command declarations, 57, 104, 116, 210
aﬀecting multiple paragraphs, 73
do not take arguments, 57
for fonts, see font command declarations
scope of, 73, 366, 381
using in custom commands, 73, 366
command ﬁles, see also sty ﬁles and packages,
232, 364, 385–394
commands in, 385
terminating, 394
commands, 51–58, 173
*-ed form, 52, 80, 83, 85, 87, 109, 110,
128, 178, 179, 225, 235, 304, 371,
374, 381, 384, 438, 465, 467
arguments of, see under arguments or
speciﬁc commands, 309
as tokens, 506
custom, see custom commands
deﬁning, see custom commands
delimited, see delimited commands
for boxes, see under boxes
for expanding values, 62–64, 69, 70, 94,
403
for ﬁlling horizontal space, 88, 95, 106,
165, 216, 218, 416
for fonts, see font commands
for graphics, see under graphics
for indexing, see under indexing
for presentations, see under presentations,
beamer, see under presentations,
beamer, and FoilTEX
for tables, see under tables or ﬂoats
fragile, 57–58
protecting, 57, 234, 235, 464, 469
generalized, see custom commands
global, see under scope
in preamble, see under preamble
length, see length commands
local, see under scope
logical design using, 35
long, 57
names of, 52
case-sensitivity of, 52
primitive, see primitive commands
providing, 373
redeﬁning, 373
scope of, see under scope
sectioning, see structural commands
short, 57, 73, 257, 268
deﬁning, 371–372
spacing, see spacing commands
start with \, 6, 10, 52
structural, see structural commands
terminating, 13, 52, 134
TEX, see under TEX
text style, see text style commands
to avoid using, 77, 475
types of, 57–58
user-deﬁned, see custom commands
commas (,), 7, 46
and italic correction, 75
in \bibitem commands, 250
in BIBTEX databases, 424, 425, 444
use in formulas, 135
comment (comment env.), 69–70, 295, 386,
503
locating errors with, 70
nesting, 69
comments, 8, 67–70
block comment, 69, 472
creating with % characters, 68, 69, 121, 276
creating with comment environments,
69–70
ﬁnding errors using, 37, 69, 365, 386
in BIBTEX database ﬁles, 69, 442
inserted using kill command, 121
marginal, 94–95, 478
in double-sided documents, 94
in equations, 94
in multiline math environments, 94
space between, 405
width of paragraph box for, 94
removing end-of-line characters with, 67,
68, 455
common errors, 39–41
commutative diagrams, 222–224, 282
comp.text.tex (newsgroup), 519
\complement (∁math sym.), 488
components
building formulas from, 157–160
of formulas, 14–18, 137–160
of pages, 252
Comprehensive TEX Archive Network, see
CTAN
Computer Modern (CM) fonts, 72, 72, 76, 522,
523
bold extended, 72
ligatures in, 62
math bold italic, 179
math italic, 179
PostScript versions of, 31, 503, 505, 521

Index
563
roman, 72, 179, 506
sans serif, 72
typewriter, 61, 61, 72
conference proceedings, in BIBTEX database
ﬁles, 424, 430–432
\cong (≅binary rel.), 483
congruences, 15, 151
as binary operations, 151
consecutive numbering, of proclamations,
107–108
contents, table of, see under tables
\contentsline (toc ﬁle com.), 467
\contentsname (redef. name), 376
context, aﬀects style of emphasized text, 74
continued fractions, 183
\contrib (top matter com.), 260
contrib (LATEX distr. directory), 517
controls (TikZ graphics pack. com.), 350
controls, ﬂoat, 114, 244–245
converting
ﬁles to PDF, 301
from articles to presentations, 308
Cook, Tim, 529
\coprod (∐large math op.), 152, 491
\copyright ( c
○copyright), 64, 498
corner math delimiters (⌞, ⌟, ⌜, ⌝), 145, 489
corollaries, see proclamations
correction, italic, see italic correction
\cos (cos math op.), 149, 490
\cosh (cosh math op.), 149, 490
\cot (cot math op.), 149, 490
\coth (coth math op.), 149, 490
counters, 103, 216, 377, 400–404
and \include commands, 401
and \label commands, 403
and proclamations, 400
arithmetic with, 295, 403–404
deﬁned in preamble, 402
deﬁning, 401
incrementing, 403
LATEX, 402
linking with other counters, 401, 403
names of, 108
store numbers, 400
styles for, 70, 103, 382, 402, 402–403, 412
values of, 34, 70, 402
printing, 62–64, 94, 403
setting, 401, 403
with list environments, 412
Courier, in LATEX documents, 522
covers.pdf (sample ﬁle), 25
Crémer, Jacques, 344
cross-referencing, 237–242, 251, 304
among multiple documents, 296
and automatic renumbering, 19, 34, 512
entries made in auxiliary ﬁles for, 508
in indexes, 455
in proof environment titles, 112
inside presentations, 310
labels for, 19, 22, 26, 37, 40, 69, 187, 199,
213, 234, 237, 241, 242, 251, 403
of equations, 18–20, 22, 40, 136, 187, 202,
238
groups of, 201–202
in multiline math environments, 199
of list items, 99, 103
of tables, 114
page numbers, 19, 22, 241, 251, 478, 508
with varioref package, 295
section numbers, 22, 103, 112, 114, 136,
199, 234, 237, 238, 283, 508
using ties (˜) with, 50, 240
within BIBTEX databases, 432–433
crossref (BIBTEX database ﬁeld), 425
\csc (csc math op.), 149, 490
CTAN (Comprehensive TEX Archive Network),
292, 515, 516–518, 519, 522, 524
catalogue, 517
mirrors of, 517
packages on, 461, 518
\URLs for, 516
\Cup (⋓math op.), 486
\cup (∪math op.), 486
\curlyeqprec (⋞binary rel.), 484
\curlyeqsucc (⋟binary rel.), 484
\curlyvee (⋎math op.), 486
\curlywedge (⋏math op.), 486
\curraddr (top matter com.), 261
rules for using, 261
\curvearrowleft (↶math arrow), 173, 487
\curvearrowright (↷math arrow), 173, 487
custom commands, 39, 362–379, 474
arguments of, 368–372
as shorthand, 362–372
as tokens, 506
command declarations in, 73
scope of, 366, 381
deﬁning, 70, 81, 112, 119, 250, 251, 362,
364, 371–375, 403
in preamble, 232
delimited, 377–379
for environments, 364
for indexing, 369–370, 452
for subformulas, 370–371
for text, 364
invoking, 364
multiple arguments of, 53
optional arguments of, 372
rules, 364, 365
short arguments, 371–372

564
Index
custom commands (cont.)
with \def, 377
custom environments, 379–384, 473, 476, 506
deﬁning, 380
for custom lists, 408–416
optional arguments of, 383–384
short arguments, 384
customizing, 362, 385
article templates
for AMS document classes, 275–278
preambles of, 275
top matter of, 275
indentation of text, 86
LATEX, 361–418
dangers of, 416–418
lists
and counters, 412
deﬁning new, 408–416
theorem styles, 111
cyrillic (LATEX distr. directory), 293
cyrillic (pack.), 294
\d ( . underdot text accent), 63, 496
\dag († dagger)
math symbol, 488
text symbol, 64, 498
\dagger († math op.), 486
\daleth ( ℸHebrew char.), 144, 481
dashed (TikZ graphics pack. com.), 353, 354,
356
dashes, 46
em dash (—), 11, 59, 64, 498
en dash (–), 11, 59, 64, 498
in BIBTEX databases, 427
\dashleftarrow (⤎math arrow), 487
\dashrightarrow (⤏math arrow), 487
\dashv (⊣binary rel.), 483
databases, BIBTEX, see also bib, 421, 423–436,
439
\date (top matter com.), 64, 231, 259, 286, 466
with letter document class, 291
\datename (redef. name), 376
dates
commands for, 10, 54, 62–64, 526
LATEX release, 68, 233, 509
of packages, 510
Davey, Brian, 39
\day (time com.), 63
\dbinom (display-style binomial com.), 139
dcolumn (pack.), 116, 295
\ddag (‡ dagger)
math symbol, 488
text symbol, 64, 498
\ddagger (‡ math op.), 486
\ddddot (⃜𝑥math accent), 154, 492
\dddot (⃛𝑥math accent), 154, 492
\ddot ( ̈𝑥math accent), 154, 492
\ddots (⋱diagonal ellipsis), 140, 218
decimals, alignment on, 116, 295
declarations, command, see command
declarations
\DeclareMathOperator (op. def. com.), 39,
178, 179, 182, 232, 282, 374
\DeclareMathOperator* (op. with limits def.
com.), 178, 374
declaring, types of math symbols, 178
\dedicatory (top matter com.), 259
\def (TEX com.), 418
deﬁning commands with, 39, 377
overwriting previously deﬁned commands
with, 377
definition (procl. style), 109, 109–111
\deg (deg math op.), 149, 490
delarray (pack.), 295
delimited commands, 377–379
invoking, 378
delimiters
for displayed math environments, 13, 18,
41
for inline math environments, 13, 57,
132–133
for \verb commands, 127
in BIBTEX database ﬁles, 424
math, see math delimiters
\Delta (Δ Greek char.), 144, 482
\delta (𝛿Greek char.), 144, 482
depth
of tables of contents, 404
of text boxes, 90, 93, 407, 407
\depth (length com.), 90, 90, 93
description (text list env.), 98, 100–101
design
logical, 35, 229
of books, 473–475
of document classes, 502
visual, 35, 229, 252–254, 340
\det (det math op.), 150, 490
device independent ﬁles, see DVI ﬁles
\dfrac ( 𝑥
𝑦), 137, 165, 183
\DH (Eth Eur. char.), 499
\dh (eth Eur. char.), 499
\diagdown ( ⟍math sym.), 488
diagonal ellipses, 218
diagrams, commutative, see commutative
diagrams
\diagup ( ⟋math sym.), 488
\Diamond (◊math sym.), 488
\diamond (⋄math op.), 486
\diamondsuit (♢math sym.), 488
dieresis, see umlaut

Index
565
diesis (‡)
math symbol, 486, 488
text symbol, 64, 498
\digamma ( ϝ Greek char.), 144, 482
\dim (dim math op.), 149, 490
dimensions, see also measurements
units for measuring, 11, 72, 76, 78, 79, 87,
89, 92, 170, 290, 405, 493
with length commands, 405
directories, see under AMS and LATEX
distributions
\displaybreak (display break com.), 225
optional argument of, 225
displayed formulas, see displayed math
environments, see displayed math
environments
displayed fractions, see under fractions
displayed math environments, 16, 18–23, 41,
132
\[ (start math mode), 13, 41, 132
Visual Guide to, 191, 192
\] (end math mode), 13, 41, 132
act as special braces, 132
align, 20–22, 22, 22, 41, 192, 194,
202–207, 212, 213, 224
align*, 22, 204, 209
alignat, 41, 192, 194, 207–208
blank lines in, 37
breaking pages in, 224–225
displaymath, 132, 134–136, 213
eqnarray, 205
equation, 18, 22, 136, 135–136, 185,
213, 310
equation*, 18, 136, 136, 185, 213, 310
flalign, 192, 194, 205, 213
font size in, 182
gather, 41, 192, 194, 195, 195–196, 202,
213, 224
gather*, 195
in direct succession, 476
inline-style binomials in, 139
multline, 192, 194, 196–198
multline*, 197–198
subequations, 186, 187, 202, 403
displayed text environments, 97, 123–127
alltt, 139, 293
blank lines in, 98
multicols, 84, 503
quotation, 124
quote, 40, 123
tabbing, 121–123
tabular, 61, 113–120, 220, 242, 294,
295, 503
theorem, 35, 105, 108, 324, 383
verbatim, 125–127, 128, 295
verse, 124–125
xcb, 470
displaymath (disp. math env.), 132, 134–136,
213
\displaystyle (math font size com.), 182,
187
dissertations, in BIBTEX database ﬁles, 433
distributions
AMS packages, 255, 282, 282–284, 307,
379, 418, 436, 437, 501
LATEX, 61, 68, 240, 285–290, 292–296,
505, 505, 509, 510, 517, 518, 525
PSNFSS, 522–523
TEX, 505
\div (÷ math op.), 137, 486
\divideontimes (⋇math op.), 486
division, 14, 46, 137, 171, 486
\DJ (Dyet Eur. char.), 499
\dj (dyet Eur. char.), 499
doc (LATEX distr. directory), 293
document (text env.), 8, 51, 157, 230
document class options
9pt, 279
10pt, 86, 279, 288
11pt, 279, 288
12pt, 76, 279, 288
a4paper, 279, 288
a5paper, 288
are passed on to packages, 232
b5paper, 288
centertags, 280
combining, 290
draft, 79, 231, 281, 289
executivepaper, 288
final, 281, 289
fleqn, 133, 279, 290
for AMSFonts, 281–282
for bibliographies, 290, 290
for double-column documents, 281, 289
for double-sided printing, 281, 289, 466
for font sizes, 279, 288
for page orientation, 289
for position of equation numbers, 279,
289–290
for start of chapters, 466
for title pages, 281, 289, 466
handout, 341
landscape, 289
legalpaper, 68, 279, 288
leqno, 279, 289
letterpaper, 279, 288
noamsfonts, 281
nomath, 282
notitlepage, 281, 289, 466
onecolumn, 281, 289

566
Index
document class options (cont.)
oneside, 281, 289, 466
openany, 466
openbib, 290, 290
openright, 466
psamsfonts, 281
reqno, 279, 289
tbtags, 280
titlepage, 231, 281, 289, 466
trans, 341
twocolumn, 68, 84, 243, 281, 289, 290,
295
twoside, 68, 231, 281, 289, 290, 466
document classes, 35, 65, 214, 376, 506
amsart, 255, 23–284, 463, 466, 506, 512
amsbook, xxviii, 32, 235, 463, 466, 470,
506
amsproc, 257, 506
anatomy of, 23
article, 25, 32, 173, 231, 233, 236, 247,
249, 256, 284, 285, 288, 285–290, 506
beamer, 307–342
book, xxviii, 32, 235, 463, 466, 468, 504,
506
changing, 513
cls ﬁles, 232, 375, 412
design of, 502
determine
placement of equation numbers,
279–280, 289–290
position of equations, 279, 290
spacing, 84
for books, 32, 235, 463, 464–466, 468,
470, 504, 506
options of, 466
for presentations, see under beamer
legacy, 98, 231, 236, 247, 256, 284, 287,
285–296, 506
letter, 290–292, 506
proc, 506
proc-l, 256
report, 235, 285, 288, 285–290, 506
sample, 8
sample.cls, 8
slides, 285, 506
document font families, 6, 10, 73, 72–73, 76,
103, 143, 282, 390, 414, 496, 522
normal, 73
roman, 72, 522
sans serif, 72, 522
typewriter style, 72, 522
documentation
for beamer document class, 307, 341
for LATEX, 293
packages, 294
\documentclass (preamble com.), 5, 24, 53,
68, 160, 222, 231, 276, 308, 336, 344
and \NeedsTeXFormat command, 232
documents
body of, 8, 24, 51, 157, 230–252
cross-referencing among multiple, 296
design of, 252–254
LATEX, 229–254
on the Internet, 299–305
using AMS document classes in, 255
legacy, 301
master, 471–473
preamble of, 231–233
printing and viewing, 6, 301, 507
readability of, 76, 340
scanning originals, 301
splitting into multiple ﬁles, 471–473
dollar sign ($), see also $ and \$, 7
as inline math delimiter, 12, 13, 57, 132,
132, 498
as text symbol, 60, 64
Doob, Michael, 91, 344, 505, 547
\dot ( ̇𝑥math accent), 154, 492
\doteq (≐binary rel.), 483, 484
\dotfill (space ﬁll com.), 88
dotless i and j (ı and j), 62, 63, 496
\dotplus (∔math op.), 486
dots
ﬁlling lines with, 88
\dots (... math ellipsis com.), 15, 41, 62,
139–140, 166
\dotsb (⋯math com.), 140
\dotsc (… math com.), 140
\dotsi (⋯math com.), 140
\dotsm (⋯math com.), 140
\dotso (… math com.), 140
dotted (TikZ graphics pack. com.), 350, 353
double accents, in math, 154
double acute (˝ text accent), 63, 496
double dagger (‡)
math symbol, 486, 488
text symbol, 64, 498
double guillemet, 499
double quote ("), see also quotation marks, 7,
58, 64, 498
in \index commands, 454
in BIBTEX database ﬁelds, 444, 445
key, 7, 47, 58
double spacing, 81–82
double subscripts and superscripts, font size of,
182
double vertical lines in CD environments, 223
double-column
documents
and footnotes, 295

Index
567
document class options for, 68, 281, 289
ﬁgures and tables, 243
double-sided printing
and marginal comments, 94
document class options for, 68, 281, 289,
466
\doublebarwedge (⩞math op.), 486
\doublecap (⋒math op.), 486
\doublecup (⋓math op.), 486
\doublespacing (setspace com.), 82
\Downarrow (⇓)
math arrow, 487, 489
math delimiter, 145
\downarrow (↓)
math arrow, 487
math delimiter, 145, 489
\downdownarrows (⇊math arrow), 487
Downes, Michael, 446, 503, 504
\downharpoonleft ( ⇃math arrow), 487
\downharpoonright (⇂math arrow), 487
draft (doc. class opt.), 79, 231, 281, 289
\draw (TikZ graphics com.), 346, 353
drivers
printer, 34, 294, 301, 507, 517
video (DVI viewer), 507
video), 34
Dropbox ﬁle transferring, 531, 534, 538, 540
Duchier, Denys, 503
Duma, Jacques, 357, 550
Dupré, Lyn, 67, 547
DVI ﬁles, 507, 517
printing, 507
viewing, 507
dvipdf (opt. of hyperref pack.), 301
dvipdfm (opt. of hyperref pack.), 301
dvipdfmx (opt. of hyperref pack.), 301
dvips (opt. of hyperref pack.), 301
dvipsnam (opt. of xcolor pack.), 331
dvipsone (opt. of hyperref pack.), 301
dviwindo (opt. of hyperref pack.), 301
dyet (Eur. char), 499
Ebib bibl. manager, 445
editing cycle, 5
edition (BIBTEX database ﬁeld), 425
editor (BIBTEX database ﬁeld), 425
editors, text, 5, 6, 12, 32, 36, 47, 67, 71, 363,
533
Eijkhout, Victor, 545, 548
electronic mail address, see \email
\ell (𝓁math sym.), 488
ellipse (TikZ graphics pack. com.), 348, 349,
351
ellipses (...)
centered (⋯), 15, 140
diagonal, 218
in math, 15, 139–140, 216
in text, 62
vertical, 218
\em (font shape com. dec.), 73, 74, 75, 103, 366,
381, 496
em (font shape env.), 103
em (rel. unit), 405, 493
em dash (—), 11, 59, 64, 66, 498
EM fonts, see European Modern fonts
Emacs, 445
\email (top matter com.), 261–262, 265–267,
277
rules for using, 261–262
\emph (font shape com.), 6, 10, 51, 73, 74, 319,
496
emphasized (font shape), 6, 10, 19, 51, 73, 74,
75, 103, 105, 136, 366, 381, 496
and italic correction, 75
context dependence of, 74
empty (page style), 252
empty group ({ }), 54, 139, 157, 169, 177, 188,
263, 291
\emptyset (∅math sym.), 488
en dash (–), 11, 64, 66, 498
in BIBTEX databases, 427
\enclname (redef. name), 376
encodings, font, see font encodings
\end (end of env.), 51, 51, 55
errors with, 56, 126, 472
end angle (TikZ graphics pack. com.), 349
\endinput (input ending com.), 394, 472
eng (Eur. char), 499
\enlargethispage (spacing com.), 83, 478,
480
\enlargethispage* (spacing com.), 83
\ensuremath (math mode com.), 367, 368, 373
Enter key, see Return key
entries
glossary, see under glossaries
index, see under indexing
enumerate (list text env.), 295, 382
enumerate (pack.), 103, 295, 382, 386
enumi (counter), 103, 402
enumii (counter), 402
enumiii (counter), 402
enumiv (counter), 402
environments, 6, 10, 13, 51–58
*-ed forms, 136, 185, 195, 197, 199, 213,
243
act as braces, 55
arguments of, see under arguments or
speciﬁc environments
\\ in, 104, 125
begin with \begin, 51, 55

568
Index
environments (cont.)
body of, 51
case-sensitivity of names of, 52
custom, see custom environments, see
custom environments
end with \end, 51, 55
font size, 103
for ﬁgures and graphics, see under TikZ
for presentations, see under beamer and
FoilTEX
for tables, see tables
indenting contents of, in source ﬁle, 135
legacy, 103, 123–125, 408
list, see list text environments, see list text
environments
logical design using, 512
typesetting environment names, 512
math, see under inline and displayed math
environments, subsidiary math
environments, and displayed text
environments
modifying, 380–382
\newline in, 81
operating, see under Windows computer,
Mac, and UNIX
short, 384
subsidiary math, see subsidiary math
environments
visual design using
typesetting environment names, 512
EPS (Encapsulated PostScript)
ﬁles, 471
\epsilon (𝜖Greek char.), 144, 482
\eqcirc (≖binary rel.), 484
eqnarray (math align. env.), 205
\eqref (cross-ref. com.), 19, 22, 40, 136, 187,
199, 202, 237, 238, 248, 310, 369
\eqslantgtr (⪖binary rel.), 484
\eqslantless (⪕binary rel.), 484
equals (=)
binary relation, 46, 483
in BIBTEX database ﬁelds, 424
key, 7
equation (counter), 400, 402
equation (disp. math env.), 18, 22, 135–136,
185, 213, 310
blank lines in, 136
equation* (disp. math env.), 18, 136, 136, 185,
213, 310
\equationname (hyperref redef. name), 305
equations, 18–20
document class options for placement of
numbers, 279–280, 289–290
grouping, 186–187
in multiline math environments, 198
in presentations, 310
labels for, 19, 238
marginal comments in, 94
numbering of, 18–20, 40, 135–136, 185,
195, 196, 199
groups, 201–202
in chapters of books, 464
preventing, 21, 22, 136, 185, 195, 196,
199, 201, 213
variants, 186, 202
within sections, 18, 136, 232
position of, 279, 290
systems of, 208
tagging, 20, 185–187, 195, 196, 199, 201,
212, 213
\equiv (≡)
binary relation, 483
math operator, 15, 151, 162, 370, 379
error messages
Missing \right. inserted, 200
errors
common, 39–41
eszett (ß, ẞ), 63, 495, 526
\eta (𝜂Greek char.), 144, 482
\eth (ð math sym.), 488
eth (Eur. char), 499
eucal (pack.), 283, 284, 385, 492
options, 283, 391, 492
eufrak (pack.), 283
Euler Fraktur (math alphabet), 160, 180, 283,
390,
492
Euler Script (math alphabet), 283, 284, 390, 492
European
accents, 11, 62
characters, 11, 62, 495–496, 499
quotation marks, 499
European Modern (EM) fonts, 504
every picture (TikZ graphics pack. com.),
347
ex (rel. unit), 405
examples
of bibliographies, 245–247, 421–423
of indexes, 448–450
of nonbreakable spaces (˜ spacing com.),
59
of top matter commands, 265–268
\except (table of contents com.), 467
exclamation marks (!), 7, 46
as ﬂoat control, 245, 480
in \index commands, 451, 452, 454
Spanish (¡), 63, 64, 495, 498
terminating sentences with, 48–51
executivepaper (doc. class opt.), 288
exercises, 470
in books, 470
within a section, 470

Index
569
\exists ( ∃math sym.), 488
exiting, from interactive mode, 511
\exp (exp math op.), 149, 490
expanding values of counters, 62, 64, 403
exscale (pack.), 283, 293
extensibility of LATEX and TEX, 31
Fairbairns, Robin, 503
\fallingdotseq (≒binary rel.), 484
fancyhdr (pack.), 254, 515, 518
FAQ (Frequently Asked Questions), 517, 519
\fboxrule (length com.), 92
\fboxsep (length com.), 92
\fcolorbox (beamer com.), 331
fd (font def. ﬁle), 522, 523, 524
Fear, Simon, 120
ﬁelds, bibliographic, see under bib
figure (counter), 402
figure (ﬂoat env.), 243–244, 309, 344,
343–344
optional arguments of, 244, 480
placement of, 478, 480
figure* (ﬂoat env.), 243
\figurename (redef. name), 375, 376
and hyperref package, 305
ﬁgures, 243–244, 343
captions in, 470
fragile commands in, 57
commands for, 243, 470, 473
double-column, 243
forcing typesetting of, 84
lists of, see also under lists, 470
adding a line to, 470
fragile commands in, 57
numbering of, 242, 243
old-style, 46
placement of, 244, 245, 478, 480
ﬁle formats, PDF, for graphics, 243
ﬁle transfer protocol, see FTP
ﬁle transferring
Dropbox, 531, 534, 538, 540
iTunes for iPad, 534
the Cloud, 538
FileApp
LATEX app for iPad, 531
fileerr (pack.), 295
ﬁles
MakeIndex log, see ilg
auxiliary, see aux
BIBTEX log, see blg
BIBTEX style, see bst
class (cls), see under document classes
command, see command ﬁles
converting from articles to presentations,
308
documents composed of multiple, 471–473
DVI, see DVI ﬁles
font deﬁnition, see fd
font metric, see also tfm, see under font
metrics
glossary, see glo
hyperref bookmarks, see out
including in other ﬁles, 385, 472
index entry, see idx
list
of ﬁgures, see lof
of tables, see lot
listing those used by a document, 386
log, see log ﬁles
naming of
with \graphicspath command, 473
organization of, 471–473
package source, see under packages
Portable Document Format, see PDF
PostScript (PS), see under PostScript
processed index, see ind
sample, see sample ﬁles
source, see source ﬁles
start on new page with \include
command, 472
style, see sty
tables of contents, see toc
terminating, 394, 472
fill (TikZ graphics pack. com.), 346
ﬁlling horizontal space, 88, 95, 106, 165, 216,
218, 416
final (doc. class opt.), 281, 289
ﬁnal preparation, of books, 476–480
ﬁne tuning
of mathematical formulas, 170–172
placement of root with \sqrt, 142
placement of text boxes, 96
\Finv (Ⅎmath sym.), 488
firstarticle.tex (sample ﬁle), 256, 308,
310, 23–310
firstarticle.tex (sample ﬁle), 24, 35, 36
firstarticlei.idx (index entry ﬁle), 457,
456–458
firstarticlei.ilg (index log ﬁle), 458
firstarticlei.ind (index proc. ﬁle),
457–458
firstarticlei.tex (sample ﬁle), 450, 457,
459
firstarticleill.tex (sample ﬁle), 26
firstpresentation.tex (sample ﬁle), 26
ﬁxed-size math delimiters, 147
fixltx2e.dtx, 293
fixltx2e.ins, 293
fixltx2e.sty, 293, 294
flalign (math align. env.), 192, 194, 205, 213

570
Index
\flat ( ♭math sym.), 488
fleqn (doc. class opt.), 133, 279, 290
ﬂoats, 242–245
commands, 26, 242, 245
controls, 114, 244–245
environments, 113, 242–244
figure, 243–244, 244, 309, 343
figure*, 243
locating, 478, 480
table, 114, 242, 244
table*, 243
forcing typesetting of, 84
specifying placement of, 244, 245, 478
ﬂoor math delimiters, 145, 489
ﬂush left
alignment of formulas, 191, 194, 196, 198,
205, 290
column alignment, 214–215, 219
columns in tabular environments, 115
setting equations, 279, 289
ﬂush right
alignment of formulas, 191, 194, 196, 198,
205
alignment of text, 88
column alignment, 214–215, 219
columns in tabular environments, 115
setting equations, 279, 289
flushleft (text align. env.), 104, 408
breaking lines in, 104
flushright (text align. env.), 51, 104, 408
breaking lines in, 104
\fnsymbol (footnote counter style com.), 70
folders
structure of, 471–473
font command declarations, see also font
commands, 73
for shape
\em, 73, 74, 75, 103, 496
\itshape, 73, 74, 74, 75, 77, 103, 414,
496
\normalfont, 73, 73, 103, 143, 496,
523
\rmfamily, 73, 103, 496
\scshape, 73, 74, 103, 496
\sffamily, 73, 77, 103, 496
\slshape, 73, 74, 75, 77, 78, 103, 496
\ttfamily, 73, 103, 122, 496
\upshape, 73, 74, 103, 382, 414, 496
for weight
\bfseries, 55, 56, 57, 73, 76, 77, 78,
103, 496
\mdseries, 73, 76, 496
font commands, see also font command
declarations
and italic correction, 73, 75
and MakeIndex, 73
for selecting fonts using family names, 522
for series
\textmd, 73, 76, 496
for shape
\emph, 10, 51, 73, 74, 319, 496
\textit, 73, 74, 319, 496
\textnormal, 73, 73, 143, 496
\textrm, 73, 283, 496
\textsc, 73, 74, 496
\textsf, 73, 496
\textsl, 73, 74, 496
\texttt, 10, 60, 73, 496
\textup, 73, 74, 496
\upn, 136
for size
\footnotesize, 76, 76, 497
\Huge, 76, 76, 497
\huge, 76, 76, 497
\LARGE, 76, 76, 497
\Large, 76, 76, 77, 497
\large, 76, 76, 497
\larger, 77
\normalsize, 76, 76, 497
\scriptsize, 76, 76, 497
\SMALL, 76, 76, 497
\Small, 76, 76, 497
\small, 76, 76, 497
\Tiny, 76, 76, 497
\tiny, 76, 76, 497
for weight
\textbf, 10, 57, 73, 76, 143, 283, 319,
496
low-level, 78
math, see math font commands
obsolete, 77
orthogonality of, 77
two-letter (obs. LATEX 2.09), and italic
correction, 77
using in math environments, 143
font encodings, 61, 61
koi8-u, 526
LY1, 523, 524
OT1, 522
T1, 65, 499, 525
font environments
for series
bfseries, 103
for shape
em, 103
itshape, 103
rmfamily, 103
scshape, 103
sffamily, 103
slshape, 103

Index
571
ttfamily, 103
upshape, 103
for weight
bfseries, 103
font families, document, see document font
families
font metrics ﬁles, 300, 506, 522, 523
font series, 72, 76
command declarations for, see command
declarations
commands for, see under font commands
environments for, see under font
environments
font shapes
command declarations for, see under font
command declarations
commands for, see under font commands
environments for, see under font
environments
sans serif, 72
serif, 72
font substitution, 77, 300, 477
warning messages, 77
font weight, 72
command declarations for, see under font
command declarations
commands for, see under font commands
environments for, see under font
environments
font width, 72
fontenc (pack.), 523, 525, 526
\fontfamily (font selection com.), 522
fonts
AMSFonts, 281, 283
document class options for, 281–282
obtaining, 518
PostScript versions of, 281, 283, 504,
510
technical support for, 519
updates to, 510
bitmap, 521
blackboard bold, 161, 180, 390
bold math, 164, 179, 179, 181, 492
calligraphic, 165, 180, 283, 390, 492
commands, see under font commands and
font command declarations
Computer Modern, see Computer Modern
Courier (typewriter shape), 299, 522
encodings, see font encodings
Euler Fraktur, 160, 180, 283, 390, 492
Euler Script, 283, 284, 390, 492
European Modern (EM), see European
Modern fonts
for text in math mode, 143
Helvetica, 72, 522
including in PDF ﬁles, 300
including in PostScript ﬁles, 299
Lucida Bright, 521, 524
math, 178–180
size of, 182
monospaced, 71
names of
LATEX 2.09, 295
PSNFSS (Berry scheme), 522
PostScript, see under PostScript
proportional, 71
proprietary
using in PDF ﬁles, 300
using in PostScript ﬁles, 299
samples, 295
selecting, 71–78
with \fontfamily command, 522
with \selectfont command, 78, 522
shapes, see font shapes
size of, 40, 72, 76, 103, 497, 76–497
document class options for, 279, 288
sources for, 524
STIX, 173
substitution of, 77, 300, 477
Times, 72, 522–523
typewriter style, 71
weight, see font weight
width, see font width
fontsmpl (pack.), 295
fonttbl.tex (sample ﬁle), 61, 114
footers, page, 252–254
\footnote, 70
footnote (counter), 402
footnotes, 70–71
and double-column documents, 295
fragile commands in, 57
in minipage environments, 93
indicated by symbols, 70
on title pages, 70
unmarked, 263
\footnotesize, 76, 76, 497
\forall (∀math sym.), 488
forcing
ﬂoats to typeset, 84
indentation, 82
formats
LATEX, 505
TEX
creating with initex, 505
ﬁles read by virtex, 505
Plain TEX, 505
formatting of documents, determined by
document classes, 45
formulanote.tex (sample ﬁle), 12–14, 38–39
formulanotebad1.tex (sample ﬁle), 38

572
Index
formulas, 6, 13
adjusted, 194, 214–224
ﬂush left and right, 198
aligning, 20–22, 191–194, 202–214, 224,
280, 504
multiline, 200–201
rules for, 200–201, 203
text in, 208–210
annotating, 207
boxed, see under boxes
breaking into multiple lines, 21, 200–201
displayed, 41
rules for, 201
commas in, 135
components of, 14–18, 137–142
building using, 157–160
displayed, see displayed math
environments, see displayed math
environments
gallery, 160–166
grouping, 194, 195–196
inline, see inline math environments
multiline, 20–22, 41
splitting, 196–198
numbering, see under equation
specifying fonts for, 143
foundries, type, 522, 524
\frac ( 𝑥
𝑦), 13, 14, 53, 137, 165, 183
fractions, 13, 14, 53, 137, 165
continued, 183
displayed, 137, 165
generalized, 187–188
inline, 137
fragile commands, 57–58
protecting, 57, 234, 235, 464, 469
frame (beamer env.), 27–29, 309, 310, 325
\framebox, 91
frames, see also under presentations, 309, 340
environments of, 309
outline (table of contents), 310
titles, 27–29, 309, 340
\frametitle (beamer com.), 27–29, 309, 310,
326
\frenchspacing (spacing com.), 51
Frequently Asked Questions (FAQ), 517, 519
front matter, 465
numbering of chapters in, 465
of AMS documents, 268
of books, 467–469
\frontmatter (struct. com.), 465
\frown (⌢binary rel.), 483
ftnright (pack.), 295
FTP (File Transfer Protocol), 516
\Game (⅁math sym.), 488
\Gamma (Γ Greek char.), 144, 482
\gamma (𝛾Greek char.), 144, 482
gather (disp. math env.), 41, 192, 194,
195–196, 202, 213, 477
page breaks in, 224
rules for, 195
gather* (disp. math env.), 195
gathered (subsid. math env.), 194, 210–213
and \allowdisplaybreaks
commands, 225
\gcd (gcd math op.), 150, 490
\ge (≥binary rel.), 483
generalized
commands, see custom commands
fractions, 187–188
\genfrac (math com.), 187–188
geometry (pack.), 40, 254
\geq (≥binary rel.), 483
\geqq (≧binary rel.), 484
\geqslant (⩾binary rel.), 484
german (opt. of babel pack.), 526
german.tex (sample ﬁle), 526
\gg (≫binary rel.), 483
ggamsart.tpl (template ﬁle), 278
\ggg (⋙binary rel.), 484
\gimel (ℷHebrew char.), 144, 481
glo (glossary ﬁles), 461, 508
global commands, see under scope
glossaries, 461
as a custom list environment, 415
auxiliary ﬁle (glo), 461, 508
deﬁning, 461, 508
\glossary (glossary com.), 461, 508
glue, 377, 410, 507, 507
horizontal, 507
parameters of, 507
vertical, see also under vertical spacing,
507
glyphs, see also characters
measuring, 507
\gnapprox (⪊neg. binary rel.), 485
\gneq (⪈neg. binary rel.), 485
\gneqq (≩neg. binary rel.), 485
\gnsim (⋧neg. binary rel.), 485
Google, 461, 516
Goossens, Michel, xxix, 548, 550
graphics
commands for, 244, 244, 309, 324,
344–347, 473
in presentations, 324
formats
PDF, 243
including in documents, 243–244, 343–357
Inkspace, 26
scaling, 244

Index
573
tikzname (pack.), 344
TikZ (graphics pack.)
tikzpicture (graphics env.), 344
TikZ (pack.), 26, 243, 344
above com., 351
align com., 351
arc com., 349
around com., 352
arrow com., 354–356
below com., 348, 351
center com., 351
circle com., 345–349, 353
colors, 354
components, 347–350
controls com., 350
curves, 350
dashed com., 353, 354, 356
dotted com., 350, 353
\draw com., 344–346
ellipse com., 348, 349, 351
end angle com., 349
every picture com., 347
fill com., 346
grid com., 344, 346
in com., 350, 354
labels, 346, 350
left com., 351, 356
line width com., 345, 347, 353
out com., 350, 354
path attributes, 353–356
radius com., 345
rectangle com., 349, 351, 352
right com., 351, 356
rotate com., 351
scale com., 352
semithick com., 353
shift com., 352
start angle com., 349
thick com., 351, 353
thin com., 353
\tikzset com., 347
transformations, 351–353
ultra thick com., 353
ultra thin com., 353
very thick com., 350, 353, 354
very thin com., 353
xscale com., 353
yscale com., 353
graphics (LATEX distr. directory), 293, 517
graphics (pack.), 294
\graphicspath (graphics com.), 471
graphicx (pack.), 25, 173, 232, 243–244, 281,
503
grave ( ` grave text accent), 46, 63, 496
\grave ( ̀𝑥math accent), 154, 492
greater than (>)
as binary relation, 483
text symbol, 64, 498
Greek letters, 144, 161, 388–390, 482
Greenwade, George D., 81
grid (TikZ graphics pack. com.), 344, 346
grouping
chapters into parts, 464
equations, 186–187
formulas, 194, 195–196
groups
of equations, 186–187
cross-referencing, 201–202
labels for, 187
numbering, 201–202
of tokens, 506
\gtrapprox (⪆binary rel.), 484
\gtrdot (⋗binary rel.), 484
\gtreqless (⋛binary rel.), 484
\gtreqqless ( ⪌binary rel.), 484
\gtrless (≷binary rel.), 484
\gtrsim (≳binary rel.), 484
guillemets, 499
\guillemotleft (Eur. quot. mark), 499
\guillemotright (Eur. quot. mark), 499
\guilsingleft (Eur. quot. mark), 499
\guilsingright (Eur. quot. mark), 499
Gurari, Eitan, 548
\gvertneqq (≩neg. binary rel.), 485
\H double acute text accent (˝), 63, 496
Hahn, Harley, 545, 549
handout (beamer doc. class opt.), 341
\hangafter
TEX command, 375
length command, 82
\hangindent (length com.), 82
hanging indentation, 82, 125
Hargreaves, Kathryn A., 545, 547
Harrison, Michael A., 447, 460, 547
Hart, Horace, 545, 549
\hat (̂𝑥math accent), 16, 154, 492
\hbar (ℏmath sym.), 488
\hdotsfor (space ﬁll com.), 165, 216,
218
optional argument of, 216
headers, page, see running heads
headings (page style), 252
\headtoname (redef. name), 376
\heartsuit (♡math sym.), 488
Hebrew letters, 144, 481
\height (length com.), 90, 90, 93
height, of text boxes, 90, 92, 93, 95, 407, 407
Helvetica (sans serif font), 72, 522
\hfill (space ﬁll com.), 88, 106, 111, 416

574
Index
\Hfootnotename (hyperref redef. name),
305
\hfuzz (\hbox warning adjustment), 79
hhline (pack.), 120, 295
hierarchy of structural commands, 234, 235, 464
history of AMS-LATEX, AMS-TEX, TEX, and
LATEX, 501–505
\hline (table com.), 115, 117
Høgholm, Morten, 189
\hom (hom math op.), 149, 490
\hookleftarrow (↩math arrow), 487
\hookrightarrow (↪math arrow), 487
horizontal lines (rules), in tabular
environments, 115, 117
horizontal spacing, 296
commands
\␣(interword space), 9, 49, 54, 84, 170,
500
\! (negthinspace), 162, 170, 170, 493,
500
\, (thinspace), 16, 51, 58, 170, 170,
493, 500
\: (medspace), 170, 493, 500
\; (thickspace), 170, 493, 500
\@. (intersentence space), 500
\dotfill (ﬁll com.), 88
\frenchspacing, 51
\hdotsfor (ﬁll com.), 165, 216, 218
\hfill (ﬁll com.), 88, 106, 111, 416
\hrulefill (ﬁll com.), 88, 95
\hspace, 84, 122
\hspace*, 40, 52, 85–86
\medspace, 170, 493, 500
\mspace, 170, 170, 493
\negmedspace, 170, 493, 500
\negthickspace, 170, 493, 500
\negthinspace, 162, 170, 170, 493,
500
\nobreakspace, 59
\nonfrenchspacing, 51
\phantom, 84–85, 169, 171–172, 206,
407
\qquad, 84, 87, 170, 170, 207, 493, 500
\quad, 18, 84, 87, 134, 170, 170, 207,
493, 500
\thickspace, 170, 493, 500
\thinspace, 16, 51, 58, 170, 170, 493,
500
to avoid using, 475
\xspace, 366–367
in math, 13, 134–135, 168–172, 216, 219
in text, 9, 40, 48–51, 84–86, 95, 106, 416,
493, 500
intersentence, 9, 48–51
interword space (␣), 9, 48–51, 54, 59, 84,
382, 427
preventing removal of, 85
howpublished (BIBTEX database ﬁeld), 425
\href (hyperref com.), 304
\hrulefill (space ﬁll com.), 88, 95
\hslash (ℏmath sym.), 488
\hspace (spacing com.), 84, 122
\hspace* (spacing com.), 40, 52, 85–86
HTTP (Hypertext Transfer Protocol), 516
\Huge (font size com.), 76, 76, 497
\huge (font size com.), 76, 76, 497
\hyperlink (beamer com.), 325
hyperlinks, 301
in PDF ﬁles, 301–305
increasing size of, 304
suppressing, 304
to bibliographic citations, 302
to Web sites, 304–305
in presentations, 325–329, 340, 341
putting bookmarks in documents, 303
to bibliographic citations, 303, 303
with hyperref pack., 302, 303, 301–303
hyperref (pack.), 301–305
bookmarks ﬁle (out), 303
commands
\autoref, 302, 302, 304, 305
\pageref, 304
\ref, 304
\urladdr, 304
\WriteBookmarks, 303
documentation for, 302
options, 302
bookmarks=true, 302
colorlinks, 302, 302, 303
dvipdf, 301
dvipdfm, 301
dvipdfmx, 301
dvips, 301
dvipsone, 301
dviwindo, 301
hypertex, 301
pagebackref, 302, 303, 303
pdftex, 301
ps2pdf, 301
tex4ht, 301
textures, 301
vtex, 301
hypertex (opt. of hyperref pack.), 301
Hypertext Transfer Protocol, see HTTP
hyphen.tex, 65
hyphenation, 65–67, 507
determined by optional hyphen, 12, 65
displaying, 66

Index
575
LATEX’s algorithm, 62, 65
of German text, 526
of hyphenated words, 11
of words with accents, 65
preventing, 65–66, 89
rules for English, 67
specifying, 65
tables, 505
\hyphenation, 65
hyphens, 11, 46, 58
key, 7, 47
optional, 12, 65, 65, 79
unbreakable, 66
\i (ı dotless i), 62, 63, 496
\idotsint (∫··· ∫large math op.), 141, 152,
491
idx (index aux. ﬁle), 456, 457, 458, 461
\iff ( ⟺math arrow), 363, 487
\ignorespacesafterend (spacing com.), 382
\iiiint (⨌large math op.), 141, 152, 491
\iiint (∭large math op.), 141, 152, 491
\iint (∬large math op.), 141, 152, 491
ilg (MakeIndex log ﬁles), 458
illustrations, 242, 243–244, 343
commands for, 473
double-column, 243
Encapsulated PostScript (EPS), 471
graphicx (pack.), 232, 243
placement of, 84, 245
Portable Document Format (PDF), 243, 471
preparation of, 477
sample ﬁles, 309
scaling, 244
with graphicx (pack.), 25
with the picture environment, 243
Illustrator, Adobe, see under Adobe Illustrator
\Im (ℑmath sym.), 488
\imath (𝚤math sym.), 488
iMazing
LATEX app for iPad, 531
\in (∈binary rel.), 483
in (TikZ graphics pack. com.), 350, 354
in (inch abs. unit), 11, 79, 87, 89, 92, 405
inbibl.tpl (sample ﬁle), 247
INBOOK (bibl. entry type), 424, 435
inch (in abs. unit), 11, 79, 87, 89, 92, 405
\include (inclusion com.), 394, 471, 472
and auxiliary ﬁles, 508
and counters, 402
errors with, 472
ﬁles start on new pages, 472
\includegraphics (graphics com.), 244,
309, 473
ﬁle extensions in, 244
in presentations, 324
\includeonly (preamble inclusion com.), 402,
471, 472
including
ﬁles in other ﬁles, 385, 394
fonts
in PDF ﬁles, 300
in PostScript ﬁles, 299
graphics in documents, 243–244, 343–357
INCOLLECTION (bibl. entry type), 424, 431
incrementing counters, 401
ind (proc. index ﬁles), 457, 457, 458, 480
\indent (indentation com.), 82
indentation
hanging, 82, 125
in multline and multline*
environments, 197
in source ﬁles, 159
of environment bodies, 135
of ﬁrst lines of paragraphs, 82, 295, 405
of subformulas, 201
of text, 82
customizing, 86
forcing, 82
preventing, 82
indentfirst (pack.), 295
\index (indexing com.), 369, 448, 448,
451–456
at signs (@) in, 453, 454
deﬁning cross-references in indexes with,
455
double quote (") in, 454
encapsulators, 452
exclamation marks (!) in, 451, 452, 454
modiﬁers, 452
page ranges in, 452
placement of commands, 455–456, 479
spaces in argument of, 459
syntax of, 456
vertical line (|) in, 452, 454
indexes, 293, 450, 447–461
appear in back matter, 448
auxiliary ﬁles (idx), 456, 458
cross-references in, 455
deﬁning, see indexing
entries
sorting, 453–454
stored in idx ﬁles, 456, 458
log ﬁles (ilg), 458
main entries, 251, 447, 451
multiple, 460–461
placement of, 448, 458
processed ﬁles (ind), 457–459, 480
processing, 456–459
sample, 450, 448–450

576
Index
indexes (cont.)
simple, 251
special characters in, 454
subentries, 251, 447, 451
subsubentries, 251, 447, 452
syntax of, 456
typesetting, 456–459
using showidx, 451
vertical space in, 251, 447
indexing, see also MakeIndex, 447–461
commands for, 251, 369, 447–456, 458
CTAN systems for, 517
entries
main, 251, 447, 451
subentries, 251, 447, 451
subsubentries, 251, 447, 452
environment for, 251, 408, 447, 457
page ranges, 452
placement of commands for, 455–456
processed ﬁles (ind), 480
processed index ﬁles (ind), 457–459
rules for, 459–460
typesetting entries in margins, 293
with AMS document classes, 448
with custom commands, 369–370
\indexname (redef. name), 376
\indexspace (indexing com.), 447
\inf (inf math op.), 150, 281, 490
information, top matter
AMS speciﬁc, 263–264
AMS subject classiﬁcations, 263
keywords, 264, 278
author, 259–263, 286
addresses, 260, 277
current addresses, 261, 265
e-mail addresses, 261, 264, 277
Internet addresses, 262, 264, 277
research support, 262, 264, 277, 286
for articles, 257–268
author names, 259, 277, 286
dedications, 259
title, 257, 278, 286
translator, 258
\infty (∞math sym.), 38, 488
initex (TEX program), 505
initials
periods in, 50–51
typographical rules for, 50
\injlim (inj lim math op.), 150
Inkspace graphics, 26
inline
fractions, 137
math formulas, see inline math
environments
tables, 113
inline math environments, 12, 41, 132
\( (start math mode), 13, 57, 132
\) (end math mode), 13, 57, 132
act as special braces, 132, 133
and $, 12, 13, 41, 57, 132, 132
display-style binomials in, 137
font size of, 182
math, 132
matrices in, 218
size of delimiters in, 148
INPROCEEDINGS (bibl. entry type), 424,
430–431
\input (inclusion com.), 505
inputenc (pack.), 525
\institute (beamer com.), 308
institution (BIBTEX database ﬁeld), 425
instructions to LATEX, 6, 8, 24, 35, 47, 51, 230,
234, 511
\int (∫large math op.), 16, 152, 491
integrals, 16, 141, 280
integration of fonts into LATEX, 503, 521
interactive mode, 94, 375–377, 511
\intercal (⊺math op.), 486
intercolumn spacing, 191, 193, 203, 204
in aligned math environments, 207, 211
in tabular environments, 115
interline spacing, 41, 148, 225
adjusting, 78, 80–82, 86
international TEX users groups, 515
Internet, 262, 304, 417, 516
addresses, 262, 305
in top matter (\urladdr com.), 262,
277, 304
and LATEX, 515
browsers, 516, 518
FTP transfers, 516
viewing PDF ﬁles in, 300
documents in PostScript format, 299
ﬁnding LATEX and TEX related material on,
515
ﬁnding LATEX- and TEX-related material on,
516
hyperlinks in PDF documents, 301, 304
LATEX and TEX resources on, 516, 519
putting LATEX documents on, 299–305
types of sites for downloading ﬁles, 516
intersentence spaces (\@.), 9, 48–51, 500
and \frenchspacing, 51
and \nonfrenchspacing, 51
\intertext (text in math com.), 208–210
interword space, 9, 48–51, 59, 382, 427
and \frenchspacing, 51
and \nonfrenchspacing, 51
command (\␣), 9, 49, 54, 84, 170, 500
intlimits (opt. of amsmath pack.), 280

Index
577
invalid characters, 7, 47
invisible boxes, see struts
invoking
custom commands, 364
delimited commands, 378
proclamations, 35, 105, 108, 324, 383
\iota (𝜄Greek char.), 144, 482
iPad
the Cloud, 529
iTunes ﬁle transferring, 534
keyboards, 537, 539, 541
LATEX apps, 530, 531, 530–531, 541
TeX Writer, 530, 540–541
Texpad, 540
Latex appsLATEX apps
Texpad, 530, 534
printers, 533
printing apps, 533
printing LATEX ﬁles, 533
the Cloud, 538
typesetting source ﬁles, 538, 541
ISBN (bibl. com.), 425
\it (obs. LATEX 2.09 font com.), 77
italic correction, 74–75, 500
and commas, 75
and \em, 75
and font commands, 73, 75
and \itshape, 74, 75
and periods, 75
and \slshape, 75
suppressing, 75
with two-letter font commands, 77
italics
bold math, 180
font shape, 10, 19, 51, 71, 73, 74, 77, 103,
414, 496
in math mode, 179, 179, 492
math font, 179
\item (list item com.), 98, 40–103, 240
and square brackets, 102
in simple indexes, 251, 447
optional arguments of, 100, 102, 410, 411
\itemindent (length com.), 409, 410
itemize (text list env.), 40, 98, 99, 240
\Itemname (hyperref redef. name), 305
\itemsep (length com.), 410, 414
\itshape (font shape com. dec.), 73, 74, 77,
103, 414, 496
and italic correction, 74, 75
itshape (font shape env.), 103
iTunes ﬁle transferring
iPad, 534
\j (j dotless j), 62, 63, 496
Jackowski, Bogusław, 504
Java, with BIBTEX, 445
JavaScript, 300
JBibtexManager bibl. manager, 445
Jeﬀrey, Alan, 503
Jensen, Frank, 404
\jmath (𝚥math sym.), 488
\Join (⨝binary rel.), 483
Jones, David M., 446, 504
journal (BIBTEX database ﬁeld), 425
Jr., in bibliographic entries, 426
justiﬁcation of text
right, 10, 51
\k (ogonek Eur. accent), 499
\kappa (𝜅Greek char.), 144, 482
\ker (ker math op.), 149, 490
Kern, Uwe, 307, 330, 331, 549
kerning, 506, 507
key (BIBTEX database ﬁeld), 425
keyboard, 46, 7–48, 525
keyboards for iPad, 537, 539, 541
keys, 12
alphanumeric, 7
Enter, see Return key
Esc (escape), 47, 363
letter, 46, 7–46
math symbol, 46
math typing, 12
modiﬁer, 46, 47
number, 46
prohibited, 7, 47
Return, 7, 9, 47
space bar, 7, 9, 47, 307, 315
special, 7, 12, 47, 60
Tab, 7, 9, 47
keys, sorting (in \index commands), 453–454
case sensitivity of, 459
\keywords (top matter com.), 278
rules for using, 264
keywords (bibl. com.), 425
\keywordsname (redef. name), 376
\kill (tabbing com.), 121, 122
Knuth, Donald E., xxv, 31, 501–503, 505, 545,
549
koi8-u (font encoding), 526
L, slashed (Ł, ł), 63, 495
\label (cross-ref. com.), 19, 22, 37, 69, 136,
199, 213, 234, 237, 241, 310
and simple indexes, 251
arguments of, 239
assigning counters to, 403
in table environments, 26, 242
placement of commands, 479
rules for, 239

578
Index
\label (cross-ref. com.) (cont.)
showing in margin, 240, 295
with \\, 199
labels
for \bibitem commands, 247
for bibliographic items, 101
for equations, 19, 237
for groups of equations, 187
in list environments, 101, 101
of items in a list environment, 409, 410,
411
setting with \label, 19, 237
TikZ (graphics pack.), 346
TikZ graphics, 350
\labelsep (length com.), 409, 410
\labelwidth (length com.), 409, 410
\Lambda (Λ Greek char.), 144, 482
\lambda (𝜆Greek char.), 144, 482
Lamport, Leslie, xxv, 405, 502, 503, 505, 544,
550
\land (∧math op.), 486
landscape (doc. class opt.), 289
\langle (⟨math delimiter), 145, 146, 489
language (BIBTEX database ﬁeld), 425
\LARGE (font size com.), 76, 76, 497
\Large (font size com.), 76, 76, 77, 497
large
math delimiters
in array subsidiary math environment,
295
operators, 16, 17, 141, 152, 151–153, 491
limits of, 151, 280
sizing of math delimiters with, 148
symbols, 97, 210–212
\large (font size com.), 76, 76, 497
\larger (font size com.), 77
LATEX, 31, 501
and the Internet, 515
apps for iPad, 530
counters, 402
customizing, 361–418
distribution, 61, 68, 293, 292–296, 505,
505, 509, 510, 517
components of, 285–290
directories, 240, 292–293, 294, 518, 525
on CTAN, 518
document classes, see under document
classes
document structure, 229–254, 465
documentation for, 293
packages, 294
documents, 229–254
printing and viewing, 507
putting on the Internet, 299–305
ﬁles created by, 508–510
font substitution, 77, 300, 477
formats, 505
history of, 501–505
implementations, 6, 32, 173, 293, 300, 515
technical support for, 518
UNIX, 458
inner workings of, 505–510
iPad apps, 531, 530–531
layers of, 505–506
localization of, 62, 525–526
numbers stored by, 62–64
overview of, 501–513
printing ﬁles from iPad, 533
release dates of, 68, 233, 509
resources on the Internet, 519
source ﬁles, see under source ﬁles
spacing in text, 9
structure of, 31–32
updates to, 174, 509
using, 32, 33
versions of, 509–510
specifying, in documents, 68, 232, 385,
509
writing books with, 463–480
LATEX apps
for iPad, 541
\LaTeX (LATEX logo com.), 6, 62
LATEX 2.09, 385, 502–504
font names, 295
two-letter font commands, 77, 77
LATEX2𝜀, see LATEX
latex.ltx, 293
LATEX 3, 503, 504, 518
\LaTeXe (LATEX2𝜀logo com.), 62
\LaTeXe (LATEXe logo com.), 504
latexsym (pack.), 160, 231, 276, 282, 293
layers, of LATEX and TEX, 505–506
layout
of a list, 409
of Computer Modern typewriter font, 61,
61
of pages, 32, 252–254, 295
\layout (page-layout diagram com.), 252
layout (pack.), 252, 295
\lbrace ({ math delimiter), 41, 145, 489
\lbrack ([ math delimiter), 145, 489
\lceil (⌈math delimiter), 145, 489
\ldots ( ...)
in math, 41, 140, 166
in text, 15
\le (≤binary rel.), 483
\leadsto (⇝math arrow), 487
\left (math delim.), 41, 146, 148, 164, 218
blank, 146, 162
must be balanced, 146, 200

Index
579
left (TikZ graphics pack. com.), 351, 356
left double quote (“)
text symbol, 58, 64, 498
typing, 9
left single quote (‘)
key, 7, 9, 46, 58
text symbol, 58, 499
\left( ( ( math delimiter), 15, 17, 41, 145, 146,
164, 200, 217
\left. (blank math delim.), 146, 162
\left< ( ⟨math delimiter), 146
\left[ ( [ math delimiter), 15, 145, 161
\Leftarrow (⇐math arrow), 487
\leftarrow (←math arrow), 362, 373, 487
\leftarrowtail (↢math arrow), 487
\leftharpoondown (↽math arrow), 487
\leftharpoonup (↼math arrow), 487
\leftleftarrows (⇇math arrow), 487
\leftmargin (length com.), 409, 410, 413
\Leftrightarrow (⇔math arrow), 487
\leftrightarrow (↔math arrow), 487
\leftrightarrows (⇆math arrow), 487
\leftrightharpoons (⇋math arrow), 487
\leftrightsquigarrow (↭math arrow),
487
\leftroot (root-adjustment com.), 142
\leftthreetimes (⋋math op.), 486
\left| ( | math delimiter), 17, 146, 160, 169,
171
legacy
document classes, 98, 231, 236, 247, 256,
284, 287, 285–296, 506
documents, 301
environments, 103, 123–125, 408
quotation, 124
quote, 123
verse, 124
legacy-article.tex (sample ﬁle), 286, 287
legalpaper (doc. class opt.), 68, 279, 288
Lehman, Philipp, 446
length commands, 90, 254, 400, 405–408
and boxes, 407
arithmetic with, 295, 406
\baselineskip, 78, 83
\baselinestretch, 81
deﬁning new, 405
\depth, 90, 90, 93
\fboxrule, 92
\fboxsep, 92
\hangafter, 82
\hangindent, 82
\height, 90, 90, 93
in list environments, 408–410
\itemindent, 409, 410
\itemsep, 410, 414
\labelsep, 409, 410
\labelwidth, 409, 410
\leftmargin, 409, 410, 413
\listparindent, 409, 410, 416
\marginparpush, 405
\marginparwidth, 94
\medskipamount, 377, 408
\multlinegap, 197
\oddsidemargin, 254
\overfullrule, 79
\parindent, 405, 416
\parsep, 409, 410, 414, 416
\parskip, 405, 409, 410, 416, 475
\partopsep, 410
\rightmargin, 409, 410, 413
setting, 82, 94, 406–407
\textwidth, 254, 400, 405
\topsep, 409, 410
\totalheight, 90, 90, 92, 93
\width, 90, 90, 93
lengths, rubber, see rubber lengths
\leq (≤binary rel.), 483
leqno (doc. class opt.), 279, 289
\leqq (≦binary rel.), 484
\leqslant (⩽binary rel.), 484
less than (<)
as binary relation, 483
text symbol, 64, 498
\lessapprox (⪅binary rel.), 484
\lessdot (⋖binary rel.), 484
\lesseqgtr (⋚binary rel.), 484
\lesseqqgtr (⪋binary rel.), 484
\lessgtr (≶binary rel.), 484
\lesssim (≲binary rel.), 484
letter (doc. class), 290–292, 506
letter (letter env.), 290–292
argument of, 291
breaking lines in, 291
errors with, 291
letter keys, 46, 7–46
letter.tex (sample ﬁle), 290–292
letterpaper (doc. class opt.), 279,
288
letters
counter style, 402
Greek, 144, 161, 388–390, 482
Hebrew, 144, 481
Levy, Silvio, 545, 550
\lfloor (⌊math delimiter), 145, 489
\lg (lg math op.), 149, 490
\lhd (⊲math op.), 486
ligatures, 62
suppressing, 62, 161, 363
\lim (lim math op.), 150, 281, 490
\liminf (lim inf math op.), 150, 490

580
Index
limits
as subscripts, 16, 141, 149–151, 161, 162,
280, 374
as superscripts, 16, 141, 151, 161, 280
large operators with, 16, 17, 141, 151, 151,
152, 280, 491
multiline, 153
operators with, 149, 150, 281, 490
placement of, 281
\limits (limit-control com.), 141, 151
\limsup (lim sup math op.), 150, 490
line boxes, see under boxes
line ending characters, 47–49, 52, 67, 84
commenting out, 67, 68, 455
translation of, 47
line numbers, in error messages, 133, 134
line segments, TikZ graphics, 347
line width (TikZ graphics pack. com.), 345,
347, 353
\linebreak (line breaking com.), 478, 479
\linebreak (line-breaking com.), 79, 80
optional arguments of, 81
lines
adding to
lists of ﬁgures and tables, 470
tables of contents, 467–468, 480
blank
in bibliographies, 303
in displayed math environments, 37,
134, 136, 198
in inline math environments, 134
in text environments, 40, 98, 98
in top matter commands, 257
in verbatim environments, 126
terminating paragraphs with, 9, 40, 48,
82, 98, 124, 303
breaking, 79
preventing, 81
with \\, 16, 20, 21, 23, 80, 104, 115,
121, 122, 125, 153, 195, 196, 198,
200, 210, 213, 225, 257–261, 278,
286, 291, 340
distance between, 86
adjusting, 95
ﬁlling with space or dots, 88, 95, 106, 165,
216, 218, 416
separating
with \\, 16, 20, 21, 23, 80, 104, 115,
121, 122, 125, 153, 195, 196, 198,
200, 210, 213, 225, 257–261, 278,
286, 291, 340
with \linebreak, 79, 80, 478, 479
stretchable, 156
terminating in TikZ, 345
too wide warnings, 11
wrapping, 67
lines (rules)
horizontal
ﬁlling lines with, 88, 95
in tabular environments, 115, 117
intersecting in tables, 120, 295
vertical
in CD environments, 223
in tabular environments, 115
links, hyper, see hyperlinks
list (list text env.), 40, 98, 408, 409, 410–416
arguments of, 411
length commands in, 408–410
using counters with, 412
list text environments, 40, 98–103
description, 100
enumerate, 98, 103
in proclamations, 106
itemize, 40, 99
list, 40, 98
mixing, 102
nesting, 101
rules for, 100
trivlist, 416
\listfigurename (redef. name), 375, 376
\listfiles (ﬁle list com.), 386, 509, 510
listing ﬁles used by a document, 386, 510
listings (pack.), 123
\listoffigures (front matter com.), 470, 509
\listoftables (front matter com.), 470, 509
\listparindent (length com.), 409, 410, 416
lists
cross-referencing items in, 99, 103
custom
and counters, 412
deﬁning, 408–416
environments for, see list text
environments, see list text
environments
in presentations, 321–323
of ﬁgures, 470
adding a line to, 470
auxiliary ﬁle (lof), 470, 480, 509
fragile commands in, 57
of tables, 114, 470
adding a line to, 470
auxiliary ﬁle (lot), 470, 480, 509
fragile commands in, 57
\listtablename (redef. name), 376
\ll (≪binary rel.), 483
\llcorner (⌞math delimiter), 145, 489
\Lleftarrow (⇚math arrow), 487
\lll (⋘binary rel.), 484
\ln (ln math op.), 149, 490
\lnapprox (⪉neg. binary rel.), 485

Index
581
\lneq (⪇neg. binary rel.), 485
\lneqq (≨neg. binary rel.), 485
\lnot (¬ math sym.), 488
\lnsim (⋦neg. binary rel.), 485
local commands, see under scope
localization, of LATEX, 525–526
locating errors, 70
location of BIBTEX database and style ﬁles, 439
lof (list of ﬁgures ﬁle), 470, 470, 480, 509
\log (log math op.), 149, 490
log (LATEX log ﬁle), 6, 19, 34, 67, 79, 377, 385,
469, 508, 510
error and warning messages recorded in,
11, 79
log ﬁles
for BIBTEX, see blg
for indexes, see ilg
for LATEX, see log
log-like functions, see operators
logical
design, 35, 229
of books, 473–475
units, 8, 234, 23–237, 245, 251, 268, 286,
290–292, 408, 436, 447, 457,
464–465, 502, 512
hierarchy of, 234, 235
numbering of, 404, 464
numbering of proclamations within, 108
logos, 62–64
long commands, 57
\Longleftarrow (⟸math arrow), 487
\longleftarrow (⟵math arrow), 487
\Longleftrightarrow (⟺math arrow), 487
\longleftrightarrow (⟷math arrow), 487
\longmapsto (⟼math arrow), 487
\Longrightarrow (⟹math arrow), 487
\longrightarrow (⟶math arrow), 487
longtable (pack.), 295
\looparrowleft (↫math arrow), 487
\looparrowright (↬math arrow), 487
\lor (∨math op.), 486
lot (list of tables ﬁles), 470, 480, 509
Louisville.tex (sample ﬁle), 26
low-level font commands, 78
lowercase counter styles
letters (\alph), 402
roman numerals (\roman), 103, 402
lowline (_ text symbol), 60, 64, 498
\lozenge (◊math sym.), 488
\lrcorner (⌟math delimiter), 145, 489
\Lsh (↰math arrow), 487
\ltimes (⋉math op.), 486
Lucida Bright, 521, 524
lucidabr (pack.), 524
lucidabr.dtx (PSNFSS distr. ﬁle), 524
lucidabr.fdd (PSNFSS distr. ﬁle), 524
lucidabr.ins (PSNFSS distr. ﬁle), 524
lucidabr.sty (PSNFSS distr. ﬁle), 524
lucidabr.yy (PSNFSS distr. ﬁle), 524
\lVert ( ‖ math delimiter), 146
\lvert ( | math delimiter), 146
\lvertneqq (≨neg. binary rel.), 485
LY1 (pack. opt.), 523, 524
Mac, see Macintosh
Macintosh, 5, 445, 473, 502, 529
FTP clients, 516
macron ( ¯ text accent), 63, 496
macros, see commands and custom commands
MacTeX (Windows LATEX front end), 5
main entries, in indexes, 251, 447, 448, 451,
454, 455
main matter, 231, 234–245, 465
\mainmatter (struct. com.), 465
\makebox (box com.), 89, 89–91, 93, 95
makeglos (pack.), 461
\makeglossary (preamble glossary com.),
461, 508
makeidx (pack.), 293, 448, 472
MakeIndex, 60, 252, 447–461, 509
and font commands, 73
\maketitle (title-page com.), 230, 231, 466
and abstracts, 233, 268, 288
and page styles, 254
MANUAL (bibl. entry type), 424, 435
manuals, in BIBTEX database ﬁles, 435
manuscripts
in BIBTEX database ﬁles, 434–435
preparing for publication, 463
\mapsto (↦math arrow), 487
\mapstochar (math arrow), 487
marginal comments, 94–95, 478
in double-sided documents, 94
in equations, 94
in multiline math environments, 94
space between, 405
width of paragraph box for, 94
\marginpar (marginal comment com.), 94
in double-sided documents, 94
\marginparpush (length com.), 405
\marginparwidth (length com.), 94
margins, 405, 410
of nested lists, 410
showing symbolic references in, 240, 295
\markboth (left and right page header com.),
252
arguments of, 254
\markleft (left page header com.), 254, 265
\markright (right page header com.), 252
master document, 471–473

582
Index
MASTERSTHESIS (bibl. entry type), 424, 433
math, 6
accents, 16, 154–155, 163, 164, 283, 375,
477
alphabets, 160–162, 165, 179, 178–180,
283, 390, 492
arrows, 156, 168, 222, 487
as delimiters, 145, 145, 146
stretchable, 157, 223–224
vertical, 223
binary operations, see binary operations
binary relations, see binary relations
characters, 12, 46
environments, 132–134
aligned, see under aligned, see under
aligned
and \verb commands, 128
blank lines in, 134, 136
displayed, see displayed math
environments, see displayed math
environments
inline, see inline math environments
multiline, 198–202, 315
page breaks in, 224
spaces in, 133
fonts, 178–180
blackboard bold, 161, 180, 390, 492
bold, 164, 179, 179, 181, 390, 492
bold italic, 179
calligraphic, 165, 180, 283, 390, 492
Euler Fraktur, 160, 180, 283, 390, 492
Euler Script, 283, 390, 492, 492
italic, 179, 179, 492
roman, 179, 179, 492
sans serif, 179, 179, 492
size of, 182
typewriter, 179, 179, 492
mode, see math mode
multiline, 191–225
Visual Guide to, 191, 192
operators, 14, 15, 17, 39, 137, 149, 150,
149–153, 370, 486, 490
declaring, 39, 374
large, 16, 17, 141, 148, 152, 151–153,
280, 491
with limits, 16, 17, 141, 149, 150, 151,
152, 280, 281, 490, 491
subscripts and superscripts, 182
symbol alphabets, 180
blackboard bold, 180
calligraphic, 180
Euler Fraktur, 180
Greek, 180
symbols, see math symbols
text in, 13, 18, 65, 81, 89, 134, 142–143,
160, 179, 208–210, 224, 283
specifying fonts for, 143
typing, 23, 131–189
math (inline math env.), 132
math arrows, 156, 168, 222
as delimiters, 145, 145, 146, 489
stretchable, 157, 223–224
vertical, 223
math commands, 15, 18, 139, 141, 153, 171,
177, 183, 187
for alignment of formulas, 198
math delimiters, 15, 17, 145, 145–148,
160–162, 164, 165, 168, 169, 171,
200, 217, 218, 489
and large operators, 148
arrows, 145
balancing, 146, 162, 200
blank, 146, 162
ﬁxed-size, 147
in inline math environments, 148
in smallmatrix subsidiary math
environments, 218
large, in array subsidiary math
environment, 295
left bracket ( [ ), 15, 145, 161
limitations of stretching, 147
right bracket ( ] ), 15, 145, 161
specifying size of, 147, 164
stretchable, 41, 146
with matrix variants, 217–218
math font commands, see also font command
declarations and font commands
for bold
\boldsymbol, 164, 180, 181, 282, 492
\mathbb, 161, 180, 492
\mathbf, 164, 179, 179, 181, 492
\pmb, 181–182, 282
for italics
\mathit, 179, 179, 492
for series
\mathnormal, 179, 179, 492
for shape
\mathcal, 165, 180, 492
\mathfrak, 160, 180, 283, 492
\mathrm, 179, 492
\mathscr, 283, 492, 492
\mathsf, 179, 179, 492
\mathtt, 179, 179, 492
for size
\displaystyle, 182, 187
\scriptscriptstyle, 182, 187
\scriptstyle, 182, 187
\textstyle, 182, 187

Index
583
for weight
\boldsymbol, 164, 180, 181, 282, 492
\mathbf, 164, 179, 179, 181, 492
\pmb, 181–182, 282
math mode, 6, 46, 59, 127, 134, 142, 149, 182,
367, 373, 374, 394
math symbols, 13, 38, 46, 111, 154, 162, 223,
231, 276, 293, 481, 143–493
alphabets, 180
and delimiters, 15, 145, 146
bold, 181–182, 282, 295
building new, 162, 174–178, 370
classiﬁcation of, 168–169, 178
declaring types of, 178
end of proof, 95, 373
in text, 363
large, 210, 211
negated, 177–178
shorthand commands for, 362
side-setting, 177–178
sizes of, 182
spacing of, 168–172
stacking, 41, 176, 174–177
STIX, 173, 167–174
stretchable, 155–157
suppressing, 111, 112
math units, see mu
\mathbb (𝕏), 161, 180, 492
\mathbf (math font weight com.), 164, 179,
179, 181, 492
\mathbin (binary-op. com.), 178
\mathcal (), 165, 180, 492
and Euler Script, 283
Mathematical Reviews, 139
\mathfrak (𝔛), 160, 180, 283, 492
\mathit (math font shape com.), 179, 179, 492
\mathnormal (math font shape com.), 179,
179, 492
\mathrel (binary-rel. def. com.), 178
\mathring ( ̊𝑥math accent), 154, 492
\mathrm (math font shape com.), 179, 492
mathscr (opt. of eucal pack.), 283, 385, 391,
492
\mathscr (𝒳math font shape com.), 283, 492,
492
\mathsf (math font shape com.), 179, 179, 492
\mathstrut (spacing com.), 95, 183
MathTıme, 523
installing, 523
mathtime (pack.), 523
mathtime.dtx (PSNFSS distr. ﬁle), 523
mathtime.ins (PSNFSS distr. ﬁle), 523
mathtime.sty (PSNFSS distr. ﬁle), 523
mathtools (pack.), 189
\mathtt (math font shape com.), 179, 179, 492
\mathversion, 181
matrices, 16–17, 215–221
in inline math environments, 218
matrix (subsid. math env.), 16–17, 192, 194,
214, 215–221
variants, 217–218
\max (max math op.), 150, 281, 490
MaxMatrixCols (counter), 216
\mbox (box com.), 89
McLean, Ruari, 545, 550
McPherson, Kent, 252
\mdseries (font weight com. dec.), 73, 76, 496
\measuredangle (∡math sym.), 488
measurements, of text boxes, 407, 407
commands for, 407
medium (font weight), 72, 73, 76, 496
\medskip (spacing com.), 86
\medskipamount (length com.), 377, 408
\medspace (spacing com.), 170, 493, 500
messages, 6, 35–39, 511
Argument of \xxx has
an extra }, 126
Bad math environment
delimiter, 112, 133, 469
\begin{document} ended by
\end{xxx }, 70, 126
\begin{split} not allowed here,
214
\begin{xxx } on input line xx
ended by \end{yyy }, 36, 56
Can be used only in preamble,
232
Command \xxx already defined, 365,
375, 380
Display math should end with $$,
37
Double superscript, 138
Environment xxx undefined, 380
error, see messages
Extra alignment tag has been
changed to \cr, 219
Extra }, or forgotten \xxx ,
206
File ‘xxx ’ not found, 511
I was expecting a ‘,’
or a ’)’, 444
Illegal character in array arg,
219
Illegal unit of measure (pt
inserted), 96
Incomplete \iffalse; all text
was ignored after line xx ,
291
Invalid use of \xxx , 142
line numbers in, 133, 134
Misplaced \xxx, 115, 210
Missing \begin{document}, 106

584
Index
messages (cont.)
Missing control sequence
inserted, 406
Missing $ inserted, 37, 38, 127, 133,
134, 136, 216
Missing number, treated
as zero, 81, 93
Missing } inserted, 38, 206
No counter ‘xxx ’ defined, 402
Paragraph ended before \xxx
was complete, 36, 96, 105, 220, 372, 378, 460
recorded in log ﬁle, 34
Runaway argument?, 36, 105, 220, 268,
378, 460
Runaway definition?, 37
showing paragraph breaks in, 82
Something’s wrong–perhaps
a missing \item, 100, 248
\tag not allowed here, 199
Text line contains an invalid
character, 37, 48
Too many }’s, 56, 268
Undefined control sequence, 36, 54,
266, 267, 365
Underfull \hbox, 80, 507
Use of \xxx doesn’t match its
definition, 378
\verb command ended by end of
line, 128
warning, see warning messages
with BIBTEX, 442–445
You’re missing a field name,
443
Metafont, 517
metrics, font, see font metrics
\mho (℧math sym.), 488
Microsoft
typography web page, 524
Windows, 445
\mid (| binary rel.), 41, 148, 161, 169, 483
midpoint (· text sym.), 64, 498
MiKTeX (Windows LATEX front end), 5
millimeter (mm abs. unit), 405
\min (min math op.), 150, 281, 490
minipage (text box env.), 89, 91, 93, 382, 383
displaying footnotes in, 93
minus (−), 7, 14, 47, 59, 137, 168, 171, 172,
179, 200, 201
as binary operation, 486
mirrors, of CTAN, 517
MISC (bibl. entry type), 424, 435
Mittelbach, Frank, xxix, 84, 503, 504, 548, 550
mixing list text environments, 102
mm (millimeter abs. unit), 405
\mod (mod math op.), 151, 151
\models (⊧binary rel.), 483
modes
interactive, 94, 375–377, 511
quiet, 511
typographic
math, see also inline and displayed
math environments, 6, 46, 59, 127, 134, 142,
149, 182, 367, 373, 374, 394
text, 6, 46, 47, 134, 160, 367, 373, 394
modiﬁer keys, 46, 47
modiﬁers, in \index commands, 452
combining, 452
modifying environments, 380–382
monospaced fonts, 71
\month (time com.), 63
month (BIBTEX database ﬁeld), 425, 435
Moore, Ross, 224, 548
movable arguments of commands, 57, 469
\mp (∓math op.), 486
mpfootnote (counter), 402
mrabbrev.bib (BIBTEX database ﬁle), 436
mrnumber (bibl. com.), 425
\mspace (spacing com.), 170, 170, 493
mtbold (opt. of mathtime pack.), 523
mtfonts.fdd (PSNFSS distr. ﬁle), 523
\mu (𝜇Greek char.), 144, 482
mu (math unit, rel.), 170, 170, 493
multicol (pack.), 84, 289, 295
multicols (disp. text env.), 84, 503
\multicolumn (table com.), 118, 117–119
multicolumn text
in documents, 84, 295, 503
in tables, 117–119
multiline
boxes, 89
formulas, 20–22, 41, 191–225
Visual Guide to, 191, 192
aligning, 200–201
splitting, 196–198
limits, 153
math environments, 315
adjusting columns in, 191, 193, 214–222
aligning, 191, 194
marginal comments in, 94
page breaks in, 224–225
subscripts and superscripts, 153
table entries, 116, 118
\multimap (⊸math arrow), 487
multipage tables, 295
multiple
arguments
in custom commands, 368, 370
authors
in bibliographies, 426
in documents, 264–265, 286
bibliographies in a document, 251

Index
585
captions, 242
citations, 250
documents, cross-referencing among, 296
ﬁles, documents composed of, 471–473
indexes, 460–461
spaces, 14, 48, 54
tables of contents, 468
multiplication, 14, 137, 140
multline (disp. math env.), 192, 194, 196–198
indentation of lines in, 197
rules for, 196
multline* (disp. math env.), 197–198
indentation of lines in, 197
\multlinegap (length com.), 197
myams.tpl, 275–278
myheadings (page style), 252
𝑛-th root, 18, 141
\nabla ( ∇math sym.), 488
namelimits (opt. of amsmath pack.), 281
names
base (of ﬁles), 508
for abstracts, 233
for proclamations, 105, 108
of authors
in articles, 259, 277, 286
in bibliographies, 426
in running heads, 259
of commands, 52, 385
of counters, 108
of ﬁles
with \graphicspath command, 473
of fonts
LATEX 2.09, 295
PSNFSS (Berry scheme), 522
redeﬁnable, 251, 304, 305, 361, 375, 526
tagging equations with, 20, 185–187, 195,
196, 199, 201, 212, 213
\natural (♮math sym.), 488
\ncong (≇neg. binary rel.), 485
\ne (≠neg. binary rel.), 177, 485
\nearrow ( ↗math arrow), 487
\NeedsTeXFormat (preamble com.), 68, 232,
385, 509
\neg (¬ math sym.), 488
negated math symbols, 177–178, 485
\negmedspace (spacing com.), 170, 493, 500
\negthickspace (spacing com.), 170, 493,
500
\negthinspace (spacing com.), 162, 170, 170,
493, 500
\neq (≠neg. binary rel.), 485
nesting
of comment environments, 69
of list text environments, 101
New Font Selection Scheme, see NFSS and
PSNFSS
\newcommand (custom com.), 39, 58, 362–379
deﬁning arguments with, 368
name already in use, 375
optional arguments, 372
\newcommand* (custom com.), 371
\newcounter (custom counter com.), 401, 406
optional argument of, 401
\newenvironment (custom env.), 380–382
\newenvironment* (custom env.), 384
\newlabel (aux. ﬁle com.), 34, 508
newlattice (pack.), 232, 385, 386
newlattice.sty (sample ﬁle), 293, 379, 382,
385–394, 394
\newlength (length-command def. com.), 405
\newline (line breaking com.), see also \\, 79
\newline (line-breaking com.), 79, 81
\newpage (page breaking com.), 83, 245
\newtheorem (procl. com.), 105, 107, 109,
111, 276, 308, 404
optional arguments of, 107, 108
syntax of, 108
\newtheorem* (procl. com.), 109, 381
\newtheoremstyle (procl. com.), 111
\nexists (∄math sym.), 488
NFSS (New Font Selection Scheme), 503, 504
nfssfont (pack.), 293
nfssfont.tex (LATEX distr. ﬁle), 61, 293
\NG (Eng Eur. char.), 499
\ng (eng Eur. char.), 499
\ngeq (≱neg. binary rel.), 485
\ngeqq (neg. binary rel.), 485
\ngeqslant (neg. binary rel.), 485
\ngtr (≯neg. binary rel.), 485
\ni (∋binary rel.), 483
\nLeftarrow (⇍math arrow), 487
\nleftarrow (↚math arrow), 487
\nLeftrightarrow (⇎math arrow), 487
\nleftrightarrow (↮math arrow), 487
\nleq (≰neg. binary rel.), 485
\nleqq (neg. binary rel.), 485
\nleqslant (neg. binary rel.), 485
\nless (≮neg. binary rel.), 485
\nmid (∤neg. binary rel.), 177, 485
noamsfonts (doc. class opt.), 281
\nobreakdash (hyph. prev. com.), 66
\nobreakspace (spacing com.), 59
\nocite (bibl. com.), 438
\nocite* (bibl. com.), 438
\node (TikZ graphics pack. com.), 351
\nofiles (preamble com.), 480
and auxiliary ﬁles, 480, 508
\noindent (indentation-suppression com.), 82,
478

586
Index
nointlimits (opt. of amsmath pack.), 280
\nolimits (limit-control com.), 141, 150, 151,
162
\nolinebreak (linebreak-suppression
com.), 81
nomath (doc. class opt.), 282
nonamelimits (opt. of amsmath pack.), 281
nonbreakable spaces (˜ tie), 9, 47, 50, 59, 59,
81, 500
absorb spaces, 59
in BIBTEX databases, 427
with cross-references, 240
\nonfrenchspacing (spacing com.), 51
\nopagebreak (page break suppression
com.), 83
normal
document font family, 72
font shape
command declarations for, 73, 73, 103,
496, 523
commands for, 73, 73, 496, 523
math commands for, 143, 179, 179, 492
\normalfont (font shape com. dec.), 73, 73,
103, 143, 496, 523
\normalsize (font size com.), 76, 76, 497
nosumlimits (opt. of amsmath pack.), 280
\not (math com.), 177
\notag, 21, 22, 195, 196, 199, 201, 213
notation (text env.), 309
notcite (opt. of showkeys pack.), 240
note (beamer doc. class opt.), 336
\note (beamer com.), 336
note (BIBTEX database ﬁeld), 425
notes, in presentations, 336, 338
NoticesV.pdf (sample ﬁle), 530
NoticesVI.pdf (sample ﬁle), 530
\notin (∉neg. binary rel.), 177, 485
notitlepage (doc. class opt.), 281, 289, 466
Nowacki, Janusz M., 504
\nparallel (∦neg. binary rel.), 485
\nprec (⊀neg. binary rel.), 485
\npreceq (neg. binary rel.), 485
\nRightarrow (⇏math arrow), 487
\nrightarrow (↛math arrow), 487
\nshortmid (∤neg. binary rel.), 485
\nshortparallel (∦neg. binary rel.), 485
\nsim (≁neg. binary rel.), 485
\nsubseteq (⊈neg. binary rel.), 161, 485
\nsubseteqq (neg. binary rel.), 485
\nsucc (⊁neg. binary rel.), 485
\nsucceq (neg. binary rel.), 485
\nsupseteq (⊉neg. binary rel.), 485
\nsupseteqq (neg. binary rel.), 485
\ntriangleleft (⋪neg. binary rel.), 485
\ntrianglelefteq (⋬neg. binary rel.), 485
\ntriangleright (⋫neg. binary rel.), 485
\ntrianglerighteq (⋭neg. binary rel.), 485
\nu (𝜈Greek char.), 144, 482
number (BIBTEX database ﬁeld), 424, 425
numbered lists, see enumerate
numbering
automatic, 18, 20, 34, 99, 105, 213, 234
of appendices, 237, 465
of equations, 18–20, 40, 135–136, 185,
195, 196, 199
groups, 201–202
in chapters of books, 465
in multiline math environments, 199
is relative, 185, 186
of subsidiary math environments, 212,
213
suppressing, 21, 22, 136, 185, 195, 196,
199, 201, 213
variations, 186, 202
within sections, 18, 136, 232
within split subsid. math align. env.,
212–213
of ﬁgures, 242
of pages, style of, 403
of proclamations, 105, 107–108
consecutively, 107–108
suppressing, 109, 110, 381
within sections, 107
of structural units, 402, 464, 512
controlling, 404
in books, 464
sections, 234
suppressing, 235, 465
of tables, 242
renumbering, 19, 34, 512
with counters, 400–408
resetting, 401, 403
\numberline (toc ﬁle com.), 469
numbers
counter styles for, 103, 402, 402–403, 412
for equations, placement of, 279–280,
289–290
for proclamations, position of, 111
in bibliographic ﬁelds, 424
in lists, 99
keys, 46
line
in error messages, 133, 134
in warning messages, 11
page
referencing, 241
style of, 403
ranges, 11, 59, 64
in BIBTEX databases, 424, 427
in index entries, 452

Index
587
real, in length commands, 405
stored by LATEX, 62–64
stored in
counters, 400
registers, 377
version, 509
\numberwithin, 18, 136, 232, 464
numeric counter style (\arabic), 402, 403, 412
\nVDash (⊯neg. binary rel.), 485
\nVdash (⊮neg. binary rel.), 485
\nvDash (⊭neg. binary rel.), 485
\nvdash (⊬neg. binary rel.), 485
\nwarrow ( ↖math arrow), 487
O’Sean, Arlene Ann, 201, 545, 550
O, slashed (Ø, ø), 63, 495
Oberdiek, Heiko, 301
obtaining
ﬁles from the Internet, 515–518
PostScript fonts, 524
sample ﬁles for this book, 5, 518
the AMS packages and AMSFonts, 518
octothorp (#), 60, 64, 498
\oddsidemargin (length com.), 254
\odot (⊙math op.), 486
\OE ethel (Œ), 63, 495
\oe ethel (œ), 63, 495
ogonek (Eur. accent), 499
\oint (∮large math op.), 141, 152, 491
old-style digits, 46
\oldstylenums (old-style digits com.), 46
\Omega (Ω Greek char.), 144, 482
\omega (𝜔Greek char.), 144, 482
\ominus (⊖math op.), 486
onecolumn (doc. class opt.), 281, 289
\onecolumn (single-column com.), 84
oneside (doc. class opt.), 281, 289, 466
\only (beamer com.), 315–317, 319–321, 325
\onslide (beamer com.), 315, 317, 319–321,
324, 325
openany (doc. class opt.), 466
openbib (doc. class opt.), 290, 290
openright (doc. class opt.), 466
operations
arithmetical, 14–15, 137–139
binary, see binary operations
operators, math, 14, 15, 17, 39, 137, 149, 150,
152, 149–153, 370, 486, 490
declaring, 39, 374
large, 16, 17, 141, 148, 152, 151–153, 280,
491
sizing of math delimiters with, 148
with limits, 16, 17, 141, 149, 150, 151,
152, 280, 281, 490, 491
deﬁning, 178, 179, 374
without limits
deﬁning, 178, 179, 182, 232, 282, 374
\oplus (⊕math op.), 486
optional
arguments, 55, 81, 83, 94–96, 105, 141,
142, 157, 216, 225, 232
multiple, 53
of \\, 80, 81, 225
of commands, 100, 102, 103, 107, 183,
184, 250, 260–263, 332, 401, 403,
410, 411, 416, 470
of custom commands, 372
of custom environments, 379, 382–384
of environments, 105, 108, 112, 115,
212, 225, 244, 245, 383, 480
of sectioning commands, 235, 467
of structural commands, 237, 464
of TikZ commands, 344
of top matter commands, 257–265, 313
use square brackets ([ ]), 18, 52–53, 103,
112, 115, 268
bibliographic ﬁelds, 425, 428–435
hyphens, 12, 65, 65, 79
options
of packages, see package options
organization (BIBTEX database ﬁeld), 425,
431
organization of ﬁles, 471–473
orientation of pages, document class options for,
289
orthogonality of font commands, 77
\oslash (⊘math op.), 486
OT1 font encoding, 522
\otimes (⊗math op.), 486
out (hyperref bookmarks ﬁle), 303
out (TikZ graphics pack. com.), 350, 354
\overbrace (horizontal brace com.), 155, 163
with a superscript, 155
overdot ( ˙ text accent), 63, 496
\overfullrule (length com.), 79
overlapping braces, 56
overlays, see also under presentations
commands for, 319
layering, 315
\overleftarrow (⃖⃖𝑥math arrow), 156
\overleftrightarrow (⃖⃗𝑥math arrow), 156
\overline (𝑥math line sym.), 155, 156,
164
overprint (beamer env.), 342
\overrightarrow (⃖⃗𝑥math arrow), 156
\overset (symbol-building com.), 162, 174,
370
creating binary operations and relations
with, 176
\owns (∋binary rel.), 483

588
Index
\P (¶ pilcrow or paragraph)
math symbol, 488
text symbol, 64, 498
package options, 18, see also speciﬁc packages,
231, 240, 279–281, 283, 301–303,
385, 492, 523, 524, 526
are passed down from document classes,
232
handled electively, 295
preventing loading of, 281
packages, 32, 231, 293, 502, 504
accents, 155
afterpage, 294
alltt, 127, 293, 510
amsbsy, 282–284
amscd, 222–224, 282
amsfonts, 283
amsgen, 282, 283
amsmidx, 284
amsmath, 32, 214, 280–281, 282,
282–284, 405, 504, 510
amsopn, 282, 283
amssymb, 160, 276, 282, 283, 373
amstext, 283
amsthm, 32, 283
amsxtra, 154, 155, 282, 283
apalike, 436
array, 294
automatic loading of, 331, 506
babel, 294, 525–526
backref, 302, 303
biblatex, 446
bm, 295
booktabs, 120
calc, 295, 404, 407
commands in, 385
cyrillic, 294
dates of, 510
dcolumn, 116, 295
delarray, 295
distribution, AMS, 255, 282, 282–284,
307, 379, 418, 436, 437, 501
documentation for, 95, 245, 294, 296, 341,
379, 523, 524
enumerate, 103, 295, 382, 386
eucal, 283, 284, 385, 492
options, 283, 391, 492
eufrak, 283
exscale, 283, 293
fancyhdr, 254, 515, 518
fileerr, 295
fontenc, 523, 525, 526
fontsmpl, 295
ftnright, 295
geometry, 40, 254
graphics, 294
graphicx, 25, 173, 232, 243–244, 281,
503
hhline, 120, 295
hyperref, 301–305
in required directory, 294
in tools directory, 294–296
in unpacked directory, 293
indentfirst, 295
inputenc, 525
interdependencies of, 255
latexsym, 160, 231, 276, 282, 293
layout, 252, 295
listings, 123
loading with \usepackage, 53, 173, 231
multiple, 232
longtable, 295
lucidabr, 524
makeglos, 461
makeidx, 293, 448, 472
mathtime, 523
mathtools, 189
multicol, 84, 289, 295
newlattice, 232, 385, 386
nfssfont, 293
obtaining the AMS packages and
AMSFonts, 518
options, see package options, see package
options
paralist, 103
program, 123
psnfss, 294
rawfonts, 295
setspace, 81
showidx, 293, 451
showkeys, 240, 295
somedefs, 295
source ﬁles, 232, 292, 437, 518
stix, 173
tabularx, 295
theorem, 295
TikZ, 26, 243, 344
times, 522
tools, 294
trace, 295
updates to AMSFonts and amsmath, 510
upref, 282, 283
varioref, 240, 295
verbatim, 69, 70, 127, 295, 386
versions of, 504, 509–510
xcolor, 307, 330
xr, 240, 296
xspace, 296, 366–367
xy-pic, 224
page (counter), 401, 402

Index
589
pagebackref (opt. of hyperref pack.), 302
\pagebreak (page breaking com.), 83, 83, 478,
479
optional arguments of, 83
\pagename (redef. name), 376
\pagenumbering (page-number style com.),
403
\pageref (cross-ref. com.), 19, 22, 237, 241,
251, 304, 478
\pageref* (hyperref cross-ref. com.), 304
pages
breaking, 83, 245
in align environment, 224
in cases subsidiary environment, 224
in displayed math environments,
224–225
in gather environment, 224
in multiline math environments, 225
preventing, 225
components of, 252
headers, see running heads
layout of, 252–254, 295
for amsart document class, 253
numbering, style of, 403
odd, starting chapters on, 466
orientation of, document class options for,
289
referencing, 241
with varioref package, 295
size changing with \enlargethispage,
83, 478, 480
styles of, 252–254
title, 512
document class options for, 231, 281,
282, 289
of articles, 231, 233
of books, 465, 466
of presentations, 26
pages (BIBTEX database ﬁeld), 425
page ranges in, 427
\pagestyle (set page style), 252
pagination, 478–479
paper size, document class options for, 279, 288
\par (paragraph breaking com.), 9, 48, 49, 57,
73, 257
\par (paragraph-breaking com.), 78, 98, 104
in error messages, 82
\paragraph (struct. com.), 234, 235, 464
paragraph (counter), 402
paragraph boxes, 92–93
paragraph text symbol, see \P
\paragraph* (struct. com.), 235
\paragraphname (hyperref redef. name),
305
paragraphs, 48, 82
breaking into lines, 11, 78, 80, 507
breaking lines in, 65
hanging indents, 82
horizontal alignment of, 104
indentation of ﬁrst lines, 82, 86, 295, 405
interline spacing of, 41
terminating
with blank lines, 9, 40, 48, 82, 98, 124
with \par command, 48, 49, 57, 73, 78,
82, 104
vertical spacing between, 104, 405, 410,
414, 475
paralist (pack.), 103
\parallel ( ∥binary rel.), 483
\parbox (box com.), 89, 91, 92, 93, 118, 407
in tabular environments, 92
parentequation, 403
parentheses ( ( ) ), 7, 46
as math delimiters, 15, 17, 41, 145, 145,
164, 200, 489
in index entries, 452
suppressing the use of in tags, 185
\parindent (length com.), 405, 416
\parsep (length com.), 409, 410, 414, 416
\parskip (length com.), 405, 409, 410, 416,
475
\part (struct. com.), 235, 286, 332, 464
part (counter), 402
\partial (𝜕math sym.), 488
\partname (redef. name), 376
and hyperref package, 305
\partopsep (length com.), 410
parts
in books, 464
in presentations, 336
Patashnik, Oren, 421, 445, 550
path attributes, TikZ graphics, 353–356
pathnames, on Mac, Windows computer, and
UNIX systems, 473
\pause (beamer com.), 29, 85, 315, 315, 319
pc (point abs. unit), 405
pcr (PSNFSS font name), 522
Windows computers, 5, 473, 502
FTP clients, 516
PDF (Portable Document Format), 300–301, 480
ﬁles
bibliographic citations in, 302
bookmarks in, 303
creating, 301
external hyperlinks in, 304–305
for graphics, 243
for legacy documents, 301
for presentations, 26, 307–342
hyperlinks in, 301–305
JavaScript in, 300

590
Index
PDF (Portable Document Format) (cont.)
size of, 300
suppressing hyperlinks in, 304
typeset, 6, 301
viewing in Web browsers, 300
fonts
partial downloading of, 300
proprietary, 300
pdftex (opt. of hyperref pack.), 301
percent (%)
as comment character, 8, 45, 67–69, 121,
276, 455
in BIBTEX databases, 69, 442
as text symbol, 7, 60, 64, 498
in e-mail addresses, 262
periods (.), 7, 46, 49–51
and initials, 51
and italic correction, 75
and spacing rules, 49–51
end of sentences, 49
following capital letters, 50
in abbreviations, 49–50
in bibliographies, 50
in BIBTEX databases, 426
terminating sentences with, 48–51
\perp (⟂binary rel.), 483
Personal TEX, Inc., 523
personalized templates
for AMS document classes, 275–278
\phantom (spacing com.), 84–85, 169,
171–172, 206, 407
PHDTHESIS (bibl. entry type), 424, 433
\Phi (Φ Greek char.), 144, 482
\phi (𝜙Greek char.), 144, 482
phv (PSNFSS font name), 522
\Pi (Π Greek char.), 144, 482
\pi (𝜋Greek char.), 144, 482
pica (pc abs. unit), 405
picture (drawing env.), 243
pilcrow (¶ text sym.), 64, 498
\pitchfork (⋔binary rel.), 484
placement
of commas in formulas, 135
of equation numbers, 279–280, 289–290
of equations, 279–280, 289–290
of ﬁgures, 244, 245, 478, 480
of \index commands, 455–456, 479
of index in document, 448, 458
of \label commands, 479
of limits, 281
of roots, 142
of tables, 478, 480
of text boxes, 96
plain
BIBTEX style, 422
page style, 252
theorem style, 109, 109–111
plain.bst (BIBTEX style ﬁle), 422
plain.tex (Plain TEX source ﬁle), 505
platform independence
of graphics, 307
plus (+), 14, 168, 171, 172, 200, 201
as binary operation, 486
plus and minus rule, 169, 171, 172
and subformulas, 200
in multline environments, 197
\pm (± math op.), 486
pmatrix (subsid. math env.), 16–17, 217
\pmb (poor man’s bold font com.), 181–182, 282
\pmod ( (mod ) math op.), 15, 151, 151
\pod ( ( ) math op.), 15, 151, 151
poetry, typing, 124–125
point (pt abs. unit), 11, 40, 72, 76, 78, 79, 87,
89, 92, 290, 405
poor man’s bold, 181–182, 282
portability
of bibliographic databases, 426, 428
of prohibited characters, 47
Portable Document Format, see under PDF
Portable Graphics Format, 307
position, of proclamation numbers, 111
PostScript (PS), 299
documents on the Internet, 299
ﬁles
including fonts in, 299
size of, 299
fonts, 299, 503, 521–524
AMSFonts, 281, 283, 504, 510
Computer Modern, 31, 503, 505, 521
European Modern, 504
obtaining, 524
using with LATEX, 294, 523
PostScript New Font Selection Scheme, see
PSNFSS
\pounds
math symbol (£), 488
pound sign or sterling (£), 499
\Pr (Pr math op.), 150, 490
preamble, 230, 23–233
commands in, 18, 24, 26, 54, 68, 82, 105,
107, 109, 111, 136, 179, 222, 231,
232, 276, 282, 301, 308–309, 344,
364, 374, 381, 385, 404, 460, 472,
480, 508, 509
custom commands in, 232, 364
customizing, in template ﬁles, 275
deﬁning counters in, 402
proclamations deﬁned in, 232
\prec (≺binary rel.), 483
\precapprox (⪷binary rel.), 484

Index
591
\preccurlyeq (≼binary rel.), 484
\preceq (⪯binary rel.), 483
\precnapprox (⪹neg. binary rel.), 485
\precneqq (⪵neg. binary rel.), 485
\precnsim (⋨neg. binary rel.), 485
\precsim (≾binary rel.), 484
preparation
ﬁnal, of books, 476–480
of illustrations, 477
presentations, 26–29, 307
babybeamer1, 316, 315–317
babybeamer2, 313
babybeamer3, 320
babybeamer4, 322
babybeamer5, 321
babybeamer6, 324
babybeamer7, 327–329
babybeamer8, 330
babybeamer9, 333
babybeamer10, 341, 342
beamerstructure1, 334
beamerstructure2, 336, 337
body of, 309
columns in, 329–330
commands for, 27, 330, 332, 340
optional arguments of, 332
cross-referencing within, 310
equations in, 310
ﬂexibility in, 340, 341
frames in, 340
hyperlinks in, 325–329, 340, 341
in color, 330–332
lists in, 321–323
navigation symbols, 336
notes in, 336, 338
overlays in, 315, 315–325
commands for, 29, 315, 316, 319
examples of, 317–318
layering, 315, 317
speciﬁcations, 319, 323
syntax of, 319–321
parts in, 336
planning, 340–341
preamble of, 26, 308–309
quickbeamer1, 309, 311, 312, 313
quickbeamer2, 313, 314
sectioning of, 310
sidebars, 310
sidebars in, 325, 332
slides, 26, 315
structure of, 332
tables of contents in, 333, 340
themes for, 26, 310, 313, 338, 339, 340
color options, 339
font options, 340
theorems in, 340
top matter of, 26, 308–309, 313
with beamer, 26
with beamer document class, 307–342
preventing
case changes in bibliographic entries, 427
hyphenation, 65–66, 89
indentation of paragraphs, 82
line breaks, 81, 89
page breaks, 80, 83, 225
removal
of horizontal space, 85
of vertical space, 87
spaces following environments, 382
\prime ( ′ math sym.), 488
prime ( ′ ), 14, 138, 178, 488
primitive commands, 376, 505
PrintDirect
LATEX app for iPad, 533
Printer Pro
LATEX app for iPad, 533
printers
drivers for, 34, 507
specifying for hyperref package, 301
DVI drivers for, 294, 517
for iPad, 533
\Printindex (index com. for multiple
indexes), 460
\printindex (index com.), 448, 458
printing
typeset (DVI) ﬁles, 507
typeset (PDF) ﬁles, 507
proc (doc. class), 506
proc-l (doc. class), 256, 376
PROCEEDINGS (bibl. entry type), 424, 432–433,
435
proceedings, conference, in BIBTEX
database ﬁles, 424
processed index ﬁles, see ind
processing
bibliographies, 436–445
indexes, 456–459
proclamations, 40, 97, 104–111, 408
commands for
\newtheorem (procl. com.), 105, 107,
109, 111, 276, 404
\newtheorem* (procl. com.), 109, 381
\newtheoremstyle, 111
\theoremstyle (procl. com.), 109–111
\theoremstyle* (procl. com.),
109–111
counters for, 400
deﬁning, 105, 107, 108, 111, 276, 381, 404
in preamble, 232
with theorem package, 295

592
Index
proclamations (cont.)
environments for
theorem, 35, 105, 108, 324, 383
invoking, 35, 105, 108, 324, 383
lines following, 40, 98
lists in, 106
logical design using, 512
names of, 108
numbering of
consecutively, 107–108
within sections, 107
position of numbers, 111
styles of, 109–111, 504
definition, 109, 109–110
plain, 109, 109–110
remark, 109, 109–110
unnumbered, 109, 110, 381
\prod (∏large math op.), 152, 491
products, 17, 151
products.pdf (sample illus. ﬁle), 309
program (pack.), 123
programs, typing, 121–123, 125–127
prohibited keys, 7, 47
\projlim (proj lim math op.), 150, 490
prompts, 511
* (interactive), 95, 375–377, 511
**, 511
?, 511
ﬁle name, 511
responding to, 511
proof (text env.), 97, 111–113, 283, 309
changing q.e.d. symbol, 373
lines following, 40, 98
lists in, 111
optional arguments of, 112
placement of q.e.d. symbol, 112
\proofname (redef. name), 376
proofs, 111–113
proportional fonts, 71
propositions, see proclamations
\propto (∝binary rel.), 483
\protect (protect fragile commands), 57, 234,
235, 464, 469
protecting
capitalization in bibliographic entries, 427
fragile commands, 57, 234, 235, 464, 469
protocols
File Transfer, see FTP
Hypertext Transfer, see HTTP
\providecommand (custom com.), 371, 373,
377
\providecommand* (custom com.), 371
\ProvidesPackage (pack. com.), 510
providing commands, 373
PS, see PostScript
ps2pdf (opt. of hyperref pack.), 301
psamsfonts
amsfonts package option, 283
document class option, 281
psfonts.ins (PSNFSS distr. ﬁle), 522
\Psi (Ψ Greek char.), 144, 482
\psi (𝜓Greek char.), 144, 482
PSNFSS (PostScript New Font Selection
Scheme), 522, 523
distribution, 522–523
font names (Berry scheme), 522
psnfss (LATEX distr. directory), 293
psnfss (pack.), 294
pt (point abs. unit), 11, 40, 72, 76, 78, 79, 87,
89, 92, 290, 405
ptm (PSNFSS font name), 522
publisher (BIBTEX database ﬁeld), 424, 425
publishers, preparing manuscripts for, 463
punctuation
in BIBTEX databases, 423–428, 444–445
marks, 7, 11, 41, 46, 58, 58–59, 63, 64,
136, 367, 495, 498
pybibliographer bibl. manager, 445
q.e.d. symbol, 112, 373
\qedhere (proof com.), 41, 113
\qedsymbol (
math sym.), 111, 373
suppressing, 112
\qquad (spacing com.), 84, 87, 170, 170, 207,
493, 500
\quad (spacing com.), 18, 84, 87, 134, 170,
170, 207, 493, 500
question marks (?), 7, 46
Spanish (¿), 63, 64, 495, 498
terminating sentences with, 48–51
quickbeamer.pdf (sample ﬁle), 308
quickbeamer.tex (sample ﬁle), 308–309
quickbeamer1.pdf (sample ﬁle), 309
quickbeamer1.tex (sample ﬁle), 309, 310
quickbeamer2.pdf (sample ﬁle), 313
quickbeamer2.tex (sample ﬁle), 313
quiet mode, 511
quotation (disp. text env.), 124, 408
quotation marks, 7, 47, 58, 58, 64
double quote key, 7, 46, 47, 58
in BIBTEX database ﬁelds, 444, 445
in BIBTEX entries, 435
in \index commands, 454
European, 499
single quote key, 7, 14, 46, 58
typing, 9
quotations, typing, 123–124
quote (disp. text env.), 40, 123, 408
\quotedblbase (Eur. quot. mark), 499
quoting, special characters in \index
commands, 454

Index
593
\r (˚ ring text accent), 63, 496
radius (TikZ graphics pack. com.), 345
\raggedleft (align. command dec.), 104
\raggedright (align. command dec.), 104
Rahtz, Sebastian, 243, 301, 503, 548
\raisebox (box com.), 96, 173
ranges, numeric, 11, 59, 64, 498
in BIBTEX databases, 424, 427
in index entries, 452
\rangle ( ⟩math delimiter), 145, 146, 489
rawfonts (pack.), 295
\rbrace ( } math delimiter), 41, 145, 489
\rbrack ( ] math delimiter), 145, 489
\rceil ( ⌉math delimiter), 145, 489
\Re (ℜmath sym.), 488
read-only, making templates, 278
readability
of documents, 76, 340
of source ﬁles, 13, 14, 49, 115, 135, 159,
361–365, 379, 416
Reader, Adobe Acrobat, see under Adobe
Reader
real numbers, in length commands, 405
rectangle (TikZ graphics pack. com.), 349,
351, 352
redeﬁnable names, 304, 305, 361, 375, 376,
526
redeﬁning commands, 373
\ref (cross-ref. com.), 19, 22, 40, 69, 103, 136,
199, 237, 237, 238, 240, 283, 295,
304, 383
\ref* (hyperref cross-ref. com.), 304
references
absolute, 20, 99, 186, 240–241
bibliographic, 50, 245–251, 310, 373, 408,
436
citing, 19, 250
citing with BIBTEX, 438
including without citing, 438
deﬁning, 19, 22, 37, 40, 136, 199, 213,
234, 237, 310
symbolic, 69
symbolic, showing in margins, 240, 295
to equations, 19, 22, 40, 136, 187, 199,
202, 237, 238, 248, 310
to pages, 19, 22, 237, 241, 304, 478
and varioref package, 295
to sections, 19, 22, 103, 136, 199, 237,
238, 240, 283, 295, 304, 383
referencing, see cross-referencing or symbolic
referencing, 20, see cross-referencing
or symbolic referencing
\refname (redef. name), 376
\refstepcounter (cross-ref. counter incr.
com.), 403
registered trademark (® text sym.), 64, 498
registers, 377
relations, binary, see binary relations
relative
numbering of equations, 185, 186,
241
spaces, 87
units, 87, 89, 92, 405
\relax (do nothing com.), 384
release dates, of LATEX, 68, 233, 509
remark (procl. style), 109, 109–111
\renewcommand (custom com.), 39, 70, 71,
81, 103, 112, 119, 251, 304, 368,
371, 375, 373–375, 377, 381, 382,
403, 404
\renewcommand* (custom com.), 371
\renewenvironment (custom com.), 382,
384
\renewenvironment* (custom com.),
384
renumbering, automatic, 19, 34, 512
report (doc. class), 235, 285, 288,
285–290, 376, 506
reports, technical, in BibTEX database
ﬁles, 434
reqno
amsmath package option, 284
document class option, 18, 231, 279,
289
required
arguments, 93, 94, 157, 177, 256,
257, 512
multiple, 13, 53, 117, 174, 176,
177, 254, 293, 378, 406, 407
of commands, 13, 53, 117, 174,
176, 177, 239, 254, 263, 406, 468,
472, 496
of environments, 53, 115, 207, 208,
219, 220, 247–248, 250, 291,
383–384, 470
use braces ({ }), 6, 10, 13, 52, 53,
506
bibliographic ﬁelds, 425, 428–435
required (LATEX distr. directory), 293,
517
packages in, 294
\RequirePackage (pack. com.), 173, 385
research support (\thanks top matter
com.), 70, 262–264, 277, 286
resetting counters, 402, 403
resolution, of Type 1 fonts, 521
Return key, 7, 9, 47, 133, 511
\rfloor ( ⌋math delimiter), 145, 489
\rhd (⊳math op.), 486
\rho (𝜌Greek char.), 144, 482

594
Index
\right (math delim.), 41, 146, 148, 164,
218
blank, 146, 162
must be balanced, 146, 200
right (TikZ graphics pack. com.), 351,
356
right double quote (”)
text symbol, 58, 64, 498
typing, 9
right justiﬁcation of text, 10, 51
right single quote (’)
key, 7, 9, 46, 58
text symbol, 58, 499
\right) ( ) math delimiter), 15, 17, 41,
145, 146, 164, 200, 217
\right. (blank math delim.), 146
\right> ( ⟩math delimiter), 146
\right] ( ] math delimiter), 15, 145, 161
\Rightarrow (⇒math arrow), 487
\rightarrow (→math arrow), 487
\rightarrowtail (↣math arrow), 487
\rightharpoondown (⇁math arrow), 487
\rightharpoonup (⇀math arrow), 487
\rightleftarrows (⇄math arrow), 487
\rightleftharpoons (⇌math arrow),
487
\rightmargin (length com.), 409, 410,
413
\rightrightarrows (⇉math arrow), 487
\rightsquigarrow (⇝math arrow), 487
\rightthreetimes (⋌math op.), 486
\right| ( | math delimiter), 17, 146, 160,
169, 171
ring (˚ text accent), 63, 496
ring A (Å), 63, 495
ring a (å), 63, 495
\risingdotseq ( ≓binary rel.), 484
Ritter, R. M., 545
\rm (obs. LATEX 2.09 font com.), 77
\rmfamily (font shape com. dec.), 73,
103, 496
rmfamily (font shape env.), 103
\Roman (uppercase roman-numeral
counter-style com.), 402
roman
document font family, 72, 72, 522
font shape, 19, 71, 73, 103, 283, 496
math, 179, 179, 374
\roman (lowercase roman-numeral
counter-style com.), 103, 402
roots, 18, 141–142
𝑛-th, 18, 141
placement of, 142
square, 18, 141
using struts with, 183
Rose, Kristoﬀer H., 224
rotate (TikZ graphics pack. com.), 351
row separator (\\), 16, 20, 21, 23, 80,
104, 115, 121, 122, 125, 153, 195,
196, 198, 200, 210, 213, 225,
257–261, 278, 286, 291
Rowley, Chris, xxix, 503, 504, 550
\Rrightarrow (⇛math arrow), 487
\Rsh (↱math arrow), 487
\rtimes (⋊math op.), 486
rubber lengths, 377, 408, 410, 507
\rule (box com.), 95, 96, 120
rules (lines), ﬁlling lines with, see also
lines (rules), 88, 95
running
BibTEX, 436–445
MakeIndex, 456–459
running heads, 234, 252–254
author’s name in, 259
fragile commands in, 57
title in, 258, 278
\rVert ( ‖ math delimiter), 146
\rvert ( | math delimiter), 146
\S (§)
math symbol, 488
section text symbol, 64, 498
sample ﬁles
amsart.tpl, 275
amsproc template, 279
babybeamer1.pdf, 315–317
babybeamer2.tex, 315
babybeamer3.tex, 320
babybeamer4.tex, 325
babybeamer5.tex, 321
babybeamer6.tex, 324, 325
babybeamer6block.tex, 325
babybeamer7.tex, 325, 327–329
babybeamer8.tex, 329
babybeamer9.tex, 331
babybeamer10.tex, 341
beamerstructure.tex, 333, 336
cleardoublepage.sty, 83
covers.pdf, 25
firstarticle.tex, 256, 308, 310,
23–310
firstarticle.tex, 24, 35, 36
firstarticlei.tex, 450, 457, 459
firstarticleill.tex, 26
firstpresentation.tex, 26
fonttbl.tex, 61, 114
formulanote.tex, 12–14, 38–39
formulanotebad1.tex, 38
ggamsart.tpl, 278
inbibl.tpl, 247

Index
595
legacy-article.tex, 286, 287
letter.tex, 290–292
Louisville.tex, 26
myams.tpl, 275–278
newlattice.sty, 293, 379, 382,
385–394, 394
NoticesV.pdf, 530
NoticesVI.pdf, 530
obtaining, 5
of presentations, 308–313
products.pdf (illus. ﬁle), 309
quickbeamer.pdf, 308
quickbeamer.tex, 308–309
quickbeamer1.pdf, 309
quickbeamer1.tex, 309, 310
quickbeamer2.pdf, 313
quickbeamer2.tex, 313
sample.cls (doc. class), 8
secondarticle-ref.tex, 302, 304
secondarticle.tex, 104, 109, 111,
213, 251, 256, 257, 268–272, 370,
394, 436, 512
source ﬁle, 268–272
typeset, 268–275
secondarticleb.bib, 436, 438,
436–442
secondarticleb.tex, 421, 437–439,
442
secondarticleccom.tex, 375, 382,
512, 394–512
STIX.pdf, 174
SymbolTables.pdf, 11, 13
template.bib, 423, 436, 445
textnote1.tex, 8–9
textnote1bad.tex, 11
textnote2.tex, 9–11
topmat.tpl, 265
sample.cls, 8
sample.cls (doc. class), 8
samples
font, 295
of bibliographies, 245–247, 423, 436,
437–438, 445
of command (style) ﬁles, 293, 379,
382, 385–394
of indexes, 450, 448–450
samples (folder), 5, 8, 10–12, 23, 26, 61,
83, 114, 174, 213, 247, 265, 268,
275, 278, 286, 290, 302, 308, 309,
313, 321, 324, 325, 336, 340, 341,
375, 385, 394, 423, 436, 438, 448,
466, 512, 526, 530
creating, 5
sans serif
document font family, 72, 77, 522
font shape, 72, 73, 103, 179, 179,
492, 496
Helvetica, 72, 522
\sb (math subscript com.), 139
\sc (obs. LATEX 2.09 font com.), 77
scale (TikZ graphics pack. com.), 352
scaling graphics
in ﬁgures, 244
Schöpf, Rainer, 503, 550
Schandl, Bernd, 103
scharfes s (ß, ), 63, 495
Schleyer, Antoinette Tingley, 201, 545,
550
school (BibTEX database ﬁeld), 425
Schröder, Martin, 503
scope
delimited by braces, 55–57
of \allowdisplaybreaks commands,
224
of command declarations, 104, 366,
381
of commands, 55–57, 73, 119
global and local, 57
setting, with environments, 79, 197
\scriptscriptstyle (math font size
com.), 182, 187
\scriptsize (font size com.), 76, 76,
497
\scriptstyle (math font size com.), 182,
187
\scshape (font shape com. dec.), 73, 74,
103, 496
scshape (font shape env.), 103
\searrow ( ↘math arrow), 487
\sec (sec math op.), 149, 490
secnumdepth (counter), 404
secondarticle-ref.tex (sample ﬁle),
302, 304
secondarticle.tex (sample ﬁle), 104,
109, 111, 213, 251, 256, 257,
268–272, 370, 394, 436, 512
source ﬁle, 268–272
typeset, 268–275
secondarticleb.aux (sample aux. ﬁle),
441
secondarticleb.bbl (sample bibl. ﬁle),
442
secondarticleb.bib (sample bibl. ﬁle),
436, 438, 436–442
secondarticleb.blg (sample BibTEX log
ﬁle), 441
secondarticleb.tex (sample ﬁle), 421,
437–439, 442
secondarticleccom.tex (sample ﬁle),
375, 382, 512, 394–512

596
Index
\section (struct. com.), 237, 234–237,
313, 332, 465
optional argument of, 235
section (counter), 400, 402
section (§ text sym.), 64, 498
\section* (struct. com.), 235, 465
sectioning
commands
optional arguments of, 236
provided by amsart doc. class, 236
provided by article doc. class,
236
provided by book doc. classes,
464–465
syntax of, 235
of articles, 234–237
of books, 464–465, 473
of documents, 8, 234, 23–237, 245,
251, 268, 286, 290–292, 408, 436,
447, 457, 464–465, 502, 512
of presentations, 310
\sectionname (redef. name)
and hyperref package, 305
sections, numbering of, 234
in books, 464
of equations within, 18, 136, 232
of proclamations within, 107
\see (indexing cross-ref. com.), 455
\seename (redef. name), 376
\selectfont (font selection com.), 78
selecting
ﬁles to include, 244, 402, 471, 472,
473
fonts, 71–78
semicolon (;), 7, 46
semithick (TikZ graphics pack. com.),
353
sentences
terminating, 9, 48–51
with periods, 262
series (BibTEX database ﬁeld), 425
series commands, for fonts, see under
font commands and font
command declarations
serif (font shape), see also under roman,
72, 72
Seroul, Raymond, 545, 550
\setbeamercolor (beamer com.), 332
\setbeamertemplate (beamer com.), 336
\setcounter (counter-setting com.), 57,
216, 401, 404
\setlength (length setting com.), 40, 82,
94, 406
setlength environment, 79, 197
\setminus ( ⧵math op.), 486
setspace (pack.), 81
\settodepth (measurement com.), 407
\settoheight (measurement com.), 407
\settowidth (measurement com.), 407
\sffamily (font shape com. dec.), 73, 77,
103, 496
sffamily (font shape env.), 103
sgml (Standard Generalized Markup
Language), 503
shape commands, for fonts, see under
font commands and font
command declarations
\sharp (♯math sym.), 488
shift (TikZ graphics pack. com.), 352
short
arguments, of custom commands,
371–372
arguments, of custom environments,
384
commands, 57, 73, 257, 268
pages, warnings about, 507
shorthand, see under custom commands
\shortmid (∣binary rel.), 484
\shortparallel (∥binary rel.), 484
\shoveleft (align. com.), 198
\shoveright (align. com.), 198
\show (command-examination com.),
375, 377, 511
\showhyphens (hyph.-disp. com.), 66
showidx (pack.), 293, 451
showkeys (pack.), 240, 295
options, 240
\showthe (value-examination com.), 94,
377, 377, 511
shrinkable lengths, 83, 84, 377, 408, 410,
414, 507
side-setting math symbols, 177–178
sidebars, in beamer presentations, 310,
313, 325
\sideset (math com.), 177–178
\Sigma (Σ Greek char.), 144, 482
\sigma (𝜎Greek char.), 144, 482
\signature (letter com.), 291
\sim (∼binary rel.), 483
\simeq (≃binary rel.), 483
simple alignment, of formulas, 21, 20–22,
22
\sin (sin math op.), 17, 149, 149, 179,
490
single
guillemet, 499
quote, 9
keys, 7, 14, 46, 58
text symbols, 499
single quotation, 499

Index
597
single-lined boxes, see under boxes
\sinh (sinh math op.), 149, 490
size
of ﬁles
pdf, 300, 301
PostScript, 299
scanned, 301
of fonts, 40, 72, 76, 103, 497, 76–497
commands for, see under font
commands
document class options for, 279,
288
in math, 182
of hyperlinks in pdf ﬁles, 304
of math delimiters, 147–148, 164
of paper, document class options for,
279, 288
\sl (obs. LATEX 2.09 font com.), 77, 78
slanted (font shape), 71, 73, 74, 77, 78,
103, 136, 496
and italic correction, 75
context dependence of, 74
slashed L’s and O’s (ł, Ł, ø, Ø), 63, 495
slides, see under presentations, see under
presentations
slides (obs. doc. class), 285, 506
\slshape (font shape com. dec.), 73, 74,
75, 77, 78, 103, 496
slshape (font shape env.), 103
slugs, 79, 231, 281, 289
\SMALL (font size com.), 76, 76, 497
\Small (font size com.), 76, 76, 497
\small (font size com.), 76, 76, 497
small caps (font shape), 71, 73, 74, 103,
496
for abbreviations and acronyms, 74,
474
\smaller (font size com.), 77
\smallfrown (⌢binary rel.), 484
\smallint (∫math sym.), 488
smallmatrix (subsid. math env.), 218
\smallsetminus (∖math op.), 486
\smallskip (spacing com.), 40, 86
\smallsmile (⌣binary rel.), 484
\smash (spacing com.), 96, 184
optional argument of, 184
\smile (⌣binary rel.), 483
Snow, Wynter, 545, 550
solid boxes, 95, see also struts
solution (beamer distr. directory),
340
somedefs (pack.), 295
sort keys, 453–454
case sensitivity of, 459
sorting, of index entries, 453–454
source ﬁles, 6, 5–7, 12, 23, 32, 37, 48, 65,
70, 125, 417, 446, 458, 467
errors in, 38–39, 511
putting on the Internet, 299–305
disadvantages of, 299
readability of, 13, 49, 135, 159,
361–365, 379, 416
structure of, see also document
typesetting, 5, 11, 19, 34, 35, 38, 47,
57, 506, 511
white space in, 14
sources, for fonts, 524
\sp (math superscript com.), 139, 163
space bar, 7, 9, 47, 307, 315
spaces
at the beginning of a line, 48, 85
at the end of a line, 48, 49, 67
blue, see also tie, unbreakable
spaces, nonbreakable spaces, 59
consist of glue, 507
expanding, 88
ﬁlling lines with, 88
in arguments of commands, 68
\bibtem, 250
\cite, 250
\index, 459
in command deﬁnitions, 365
in command names, 52
in custom commands, 296
in delimited commands, 378–379
in math environments, 133
in tabular environments, 115
in \verb commands, 128
in verbatim environments, 126
interword (\␣), 9, 49, 54, 84, 170, 500
multiple, act as one, 14, 48, 54
separating words with, 9, 48, 382,
427
suppressing, 382, 455
terminating commands with, 13, 52,
134
typed for readability, 14, 49, 115, 365
unbreakable (˜ tie), 9, 47, 50, 59, 59,
81, 500
absorb spaces, 59
in BibTEX databases, 427
with cross-references, 240
visible (␣), 9, 47
and \verb* command, 128
spacing
between characters, 507
between dots with \hdotsfor
commands, 216
between math symbols, 168–172
commands, see spacing commands

598
Index
spacing (cont.)
determined by document classes, 84
horizontal
in math, 13, 134–135, 168–172,
216, 219
in text, 9, 40, 84–86, 95, 106, 416,
493, 500
interword, 9, 48–51, 54, 59, 84,
382, 427, 500
preventing removal of, 85
in text, 84–88
intercolumn, 191, 193, 203, 204
in aligned math environments, 207,
211
in tabular environments, 115
interline, 41, 148, 225, 368, 476
adjusting, 78, 80–82, 86, 95
double, 81–82
rules
and delimited commands, 378–379
for commands, 52, 134
in arguments of \index commands,
459
in math, 13, 14, 134–135, 168–172,
183–184
in text, 9, 14, 48–51, 84–88
in \text commands, 134
vertical
adding to table of contents, 468
adjusting, 119, 475
adjusting with the setspace
package, 81
in boxes, 96
in indexes, 251, 447
in math, 183–184
in text, 40, 86–87, 184, 377, 468,
476, 480
preventing removal of, 87
using the setspace package, 81
spacing commands
avoiding direct use of, 475
horizontal, see horizontal spacing
vertical, see vertical spacing
\spadesuit (♠math sym.), 488
\spbreve (˘ math accent), 154, 492
\spcheck ( ∨math accent), 154, 163, 492
\spdddot ( ... math accent), 154, 492
\spddot ( .. math accent), 154, 492
\spdot ( . math accent), 154, 492
special
braces, 13, 55–57, 132, 133, 136
balancing, 56
characters, 11, 47, 60, 60, 61,
495–499
in \index commands, 454
keys, 7, 12, 47, 60
spelling checkers, 35
\sphat (̂ math accent), 154, 492
\sphericalangle (∢math sym.), 488
Spivak, Michael D., 502, 523
split (subsid. math align. env.), 192,
194, 212–214, 280
and \allowdisplaybreaks
commands, 225
numbering of equations within,
212–213
rules for, 213
splitting
documents into multiple ﬁles,
471–473
formulas across lines, 196–198
\sptilde (∼math accent), 154, 492
\sqcap (⊓math op.), 486
\sqcup (⊔math op.), 486
\sqrt (
√
𝑥math com.), 13, 18, 141, 171
optional argument of, 53
\sqsubset (⊏binary rel.), 483
\sqsubseteq (⊑binary rel.), 483
\sqsupset (⊐binary rel.), 483
\sqsupseteq (⊒binary rel.), 483
\square ( □math sym.), 488
square roots, 18, 141
\SS (), 63, 495
\ss (ß), 63, 495
stacking math symbols, 41, 176, 174–177
\stackrel (symbol-building com.), 41
Standard Generalized Markup Language
(sgml), 503
\star (⋆math op.), 486
start angle (TikZ graphics pack. com.),
349
start of chapters, document class options
for, 466
\stepcounter (counter-incr. com.), 403
sterling (£ text sym.), 499
STIX
stix.pdf (math symbol list), 174
fonts, 173
math symbols, 173, 167–173
stix (pack.), 173
STIX math symbols, 174
stix.pdf (math symbol list), 174
STIX.pdf (sample ﬁle), 174
\stop (interactive control com.), 511
stretchable
horizontal braces, 155–156
lengths, 84, 377, 408, 410, 507
lines, 156
math arrows, 157, 223–224
math delimiters, 41, 146

Index
599
math symbols, 155–157
vertical spacing, in displayed text
environments, 408
STRING (bibl. entry type), 436
structural commands
\appendix, 237, 465
\backmatter, 465
\chapter, 235, 237, 286, 464, 464,
465
\frontmatter, 465
hierarchy of, 234, 235, 464
in presentations, 332
\mainmatter, 465
optional arguments of, 235
\paragraph, 234, 235, 464
\paragraph*, 235
\part, 235, 286, 464
provided by amsart doc. class, 236
provided by article doc. class, 236
provided by book doc. classes,
464–465
\section, 237, 234–237, 465
\section*, 235, 465
\subparagraph, 234, 235, 464
\subsection, 234, 235, 464, 465
\subsection*, 465
\subsubsection, 234, 235, 464
syntax of, 235
structures, theorem-like, see
proclamations
struts, 95–96, 119, 183
style (sty) ﬁles, 232, 364, 385–394
commands in, 385
terminating, 394
style ﬁles, BibTEX, see bst
styles
bibliographical, see also bst, 250
for counters, 70, 103, 382, 402,
402–403, 412
of pages, 252–254
of proclamations, 109–111, 504
of tables, 120
text environments, 103
subarray (subsid. math env.), 141, 153
subentries, in indexes, 251, 447, 451, 452,
454
subequations (disp. math env.), 186,
187, 202, 403
subformulas
indentation of, 201
rules for, 199–200, 206–207
shorthand commands for, 362–364,
370–371
\subitem (index com.), 251, 447
\subjclass (top matter com.)
optional arguments of, 263
rules for using, 263
\subjclassname (redef. name), 376
subject classiﬁcations, AMS, 263
\subparagraph (struct. com.), 234, 235,
464
subparagraph (counter), 402
subscripts, math, 14, 16, 138–139, 141,
161
as limits, 16, 141, 149–153, 161, 162,
280, 374
as multiline limits, 153
double, 182
font size of, 182
with horizontal braces, 155
\subsection (struct. com.), 234, 235,
332, 464, 465
subsection (counter), 402
\subsection* (struct. com.), 465
\subsectionname (hyperref redef.
name), 305
\Subset (⋐binary rel.), 484
\subset (⊂binary rel.), 483
\subseteq (⊆binary rel.), 483
\subseteqq (⫅binary rel.), 484
\subsetneq (⊊neg. binary rel.), 485
\subsetneqq (⫋neg. binary rel.), 485
subsidiary math environments
aligned, 194, 210–212, 225
alignedat, 210–212, 222, 225
and \allowdisplaybreaks
commands, 225
array, 192, 194, 212, 215, 218–221,
221, 294, 503
Bmatrix, 217
bmatrix, 217
cases, 22–23, 192, 194, 221–222
CD, 222–224
for aligning formulas, 192, 193,
210–214, 225, 280
gathered, 194, 210–213, 225
matrix, 16–17, 192, 194, 214,
215–221
numbering of, 212, 213
page breaks in, 224
pmatrix, 16–17, 217
smallmatrix, 218
split, 192, 194, 212–214, 225, 280
subarray, 141, 153
Vmatrix, 163, 217
vmatrix, 16, 17, 217
\substack (math com.), 141, 153, 153
substitution, of fonts, 77, 300, 477
subsubentries, in indexes, 251, 447, 452,
454

600
Index
\subsubitem (index com.), 251, 447
\subsubsection (struct. com.), 234, 235,
464
subsubsection (counter), 402
\subsubsectionname (redef. name), 304
subtraction, 14, 46, 137
\succ (≻binary rel.), 483
\succapprox (⪸binary rel.), 484
\succcurlyeq (≽binary rel.), 484
\succeq (⪰binary rel.), 483
\succnapprox (⪺binary rel.), 485
\succneqq (⪶binary rel.), 485
\succnsim (⋩binary rel.), 485
\succsim (≿binary rel.), 484
\sum ( ∑large math op.), 17, 152, 182,
491
with primes, 177
sumlimits (opt. of amsmath pack.), 280
sums, 17, 151
\sup (sup math op.), 150, 490
superscripts, 14, 16, 138–139, 141, 155,
161
as limits, 16, 141, 149, 151–153, 161
as multiline limits, 153
in math
as limits, 280
font size of, 182
with horizontal braces, 155
in text, 293, 499
support, technical, see technical support
\suppressfloats (ﬂoat com.), 245
suppressing
creation of auxiliary ﬁles, 480, 508
hyperlinks in pdf ﬁles, 304
indents (\noindent com.), 82, 478
italic correction, 75
ligatures, 62, 161, 363
line breaks (\nolinebreak com.), 81
loading of the amsmath package, 282
numbering, 195, 199
of equations, 21, 22, 136, 185, 195,
196, 199, 201, 213, 254
of ﬁrst page of documents, 254
of proclamations, 109, 110, 381
of structural units, 235, 465
Overfull \hbox warnings, 79
page breaks (\nopagebreak com.), 83
placement of ﬂoats, 245
q.e.d. symbol, 112
spaces, 382, 455
\Supset (⋑binary rel.), 484
\supset (⊃binary rel.), 483
\supseteq (⊇binary rel.), 483
\supseteqq (⫆binary rel.), 484
\supsetneq (⊋binary rel.), 485
\supsetneqq (⫌binary rel.), 485
\surd (√math sym.), 488
Sutor, Robert, 548
Swanson, Ellen, 201, 545, 550
\swapnumbers (theorem-style com.), 111
\swarrow ( ↙math arrow), 487
\symbol (symbol com.), 61, 293
symbol alphabets, math, 180
blackboard bold, 180
calligraphic, 180
Euler Fraktur, 180
Greek, 180
symbolic references, showing in margins,
240, 295
symbolic referencing, see also
cross-referencing, 19, see also
cross-referencing, 40, see also
cross-referencing, 69, 237,
19–240, 508
symbols
as footnote indicators, 70
math, 13, 38, 46, 111, 154, 162, 223,
231, 276, 293, 481, 143–493
alphabets, 180
and delimiters, 15, 145, 146
bold, 181–182, 282, 295
building new, 162, 174–178, 370
classiﬁcation of, 168–169, 178
declaring types of, 178
end of proof, 95, 373
in text, 363
large, 210, 211
negated, 177–178
shorthand commands for, 362
side-setting, 177–178
sizes of, 182
spacing of, 168–172
stacking, 41, 176, 174–177
STIX, 173, 167–174
stretchable, 155–157
suppressing, 111, 112
text, 60, 62, 261, 496, 498, 499
SymbolTables.pdf (sample ﬁle), 11, 13
systems of equations, 208
\t (
tie text accent), 63, 496
T1 font encoding, 65, 499, 525
tab
character, 47, 48, 52, 84
Tab key, 7, 9, 47
Tab key, 7, 9, 47
tabbing (display text env.), 121–123
table (counter), 402
table (ﬂoat env.), 242–243
optional arguments of, 244, 480

Index
601
placement of, 478, 480
table* (ﬂoat env.), 243
\tablename (redef. name), 376
and hyperref package, 305
\tableofcontents (front-matter com.),
310, 467, 509
tables, 113–120, 121, 220, 242, 244, 295,
503
captions in, 26, 114, 242, 470
fragile commands in, 57
commands for, 26, 115, 117–120, 242,
470
cross-referencing of, 114
designing, 120
double-column, 243
ﬂoat controls, 114
forcing typesetting of, 83
hyphenation, 505
intersection of lines in, 120, 295
lists of, see under lists
multiline entries in, 118
multipage, 295
numbering of, 242
placement of, 478, 480
style of, 120
typeset inline, 113
tables of contents, 234, 303, 467–469
adding a line to, 467–468, 480
adding vertical spacing to, 468
auxiliary ﬁle (toc), 467, 480, 509
commands, 467, 468
depth of, 404
fragile commands in, 57, 469
in frames, 310
in presentations, 340
typesetting, 467–469
tabs, setting, 121
tabular (table env.), 61, 113–120, 220,
242, 294, 295, 503
arguments of, 115
optional, 115
breaking lines in, 115
column-formatting in, 115
horizontal lines in, 115, 117
intercolumn space in, 115
\parbox in, 92
rules for, 115
vertical lines in, 115
width of columns in, 116
tabularx (pack.), 295
\tag, 20, 185, 185, 195–197, 199, 201,
212, 213, 240
\tag*, 185
tags (names for equations), 20, 185–187,
195–197, 199, 201, 212, 213, 240
top-or-bottom placement of, 280
\tan (tan math op.), 149, 490
\tanh (tanh math op.), 149, 490
Tantau, Till, 307, 342, 344, 544, 550
\tau (𝜏Greek char.), 144, 482
\tbinom (inline-style binomial com.),
139
tbtags (doc. class opt.), 280
technical reports, in BibTEX database
ﬁles, 434
technical support
on the Internet, 519
provided by TEX users groups, 518
provided by the AMS, 519
TECHREPORT (bibl. entry type), 425, 434
template.bib (sample bibl. ﬁle), 423,
436, 445
templates, 255, 288
bibliographical, 245, 423, 436, 445
customizing
for AMS document classes,
275–278
ggamsart.tpl, 278
myams.tpl, 275–278
personalized
making read-only, 278
terminating
captions, 470
commands, 10, 13, 14, 52, 53, 54, 64,
127, 134
environments, 51
ﬁelds in BibTEX database entries,
444
ﬁles, 394, 472
lines, 68, 139, 365
TikZ, 345
paragraphs, 40, 48, 82
sentences, 9, 48–51, 262
TEX, 31, 32, 501
commands, 39, 377, 379
to avoid using, 475
commands in LATEX, 476
distribution, 505
extensibility of, 31
history of, 501–505
inner workings of, 505
inputs folders, 522–523
layers of, 505–506
Plain, 505
programming in, 31
resources on the Internet, 519
structure of, 505
users groups, see TEX users groups
and tug
\TeX (TEX com.), 62

602
Index
TEX users groups, 515–519, 526
TeX Writer
for iPad, 530, 540–541
tex4ht (opt. of hyperref pack.), 301
TEX Live (tug dvd/cd), 519
Texpad
for iPad, 530, 534–540
text, 6
accents, 53, 63, 496
blocks, width of, 254
boxes, see text boxes
centering, see centering text, center
(text align. env.), and
\centering, see centering text,
center (text align. env.), and
\centering
custom commands for, 364
editors, 5, 6, 12, 32, 36, 47, 67, 71,
363, 533
framing, 91
in math mode, 13, 18, 65, 81, 89,
134, 142–143, 160, 179, 208–210,
224, 283
specifying fonts for, 143
in tables
multicolumn, 117–120
multiline, 118
mode, 6
spacing in, 84–88
style commands, see text style
commands
symbols, see text symbols
typing, 45–96
using math symbols in, 363
white space in, 84–88
\text (box com.), 13, 18, 65, 66, 81, 89,
142–143, 160, 161, 189, 224, 283
spacing rules in, 134
text boxes, 89–96
alignment of contents in, 89, 93
behave as single characters, 89
commands for
\framebox, 91
\makebox, 89, 89–91, 93, 95
\mbox, 89
\parbox, 89, 91, 92, 93, 118, 407
\raisebox, 96, 173
\rule, 95, 96, 120
\text, 13, 18, 65, 66, 81, 89, 134,
142–143, 160, 161, 189, 224, 283
environments for minipage, 89, 91,
93, 382, 383
framed, 91–92
measurements of, 407
measuring, see measurements
single line, 89–90, 142
vertical alignment of, 93, 96
text environments, 97–129
and stretchable vertical space, 408
blank lines in, 40, 98
for abstracts, see abstract
for alignment, 51, 88, 104, 114, 210,
408, 416
for boxes, see under text boxes
for documents, see document
for indexes, see theindex
for letters, see letter
for lists, see list text environments,
see list text environments, 98
for styles, see under text style
for tables, see tables
rules for, 98
text mode, 46
text style commands
avoiding direct use of, 474
\emph, 6, 10, 51, 73, 74, 319, 496
\textbf, 10, 57, 73, 76, 143, 283,
319, 496
\textit, 73, 74, 319, 496
\textmd, 73, 76, 496
\textnormal, 73, 73, 143, 496
\textrm, 73, 283, 496
\textsc, 73, 74, 496
\textsf, 73, 496
\textsl, 73, 74, 496
\texttt, 10, 60, 73, 496
\textup, 73, 74, 496
text style environments
bfseries, 103
em, 103
itshape, 103
rmfamily, 103
scshape, 103
sffamily, 103
slshape, 103
ttfamily, 103
upshape, 103
text symbols, 61, 63, 64
commands, 60, 62, 261, 496, 498, 499
typing, 58–62
\textasciicircum (^ circumﬂex), 64, 498
\textasciitilde ( ~ tilde), 499
\textasteriskcentered (∗asterisk), 60,
64, 498
Textastics
LATEX app for iPad, 534
\textbackslash ( \ backslash), 60, 64,
498
\textbar ( | vertical bar), 60, 64, 498

Index
603
\textbf (font weight com.), 10, 57, 73,
76, 143, 283, 319, 496
\textbullet (• bullet), 64, 498
\textcircled ( a
○), 62, 64, 498
\textcolor (beamer com.), 330
\textcompwordmark (lig.-suppr. com.), 62,
363, 416
\textemdash ( — em dash), 64, 498
\textendash ( – em dash), 64, 498
\textexclamdown (¡ exclamation mark),
46
\textgreater ( > greater than), 64, 498
\textit (font shape com.), 73, 74, 74,
319, 496
\textless (< less than), 64, 498
\textmd (font weight com.), 73, 76, 496
\textnormal (font shape com.), 73, 73,
143, 496
textnote1.tex (sample ﬁle), 8–9
textnote1bad.tex (sample ﬁle), 11
textnote2.tex (sample ﬁle), 9–11
\TextOrMath (text and math mode com.),
293
\textperiodcentered (· midpoint), 64,
498
\textquestiondown ( ¿ question mark),
64, 498
\textquotedbl (Eur. quot. mark), 499
\textquotedblleft ( “ left double quote),
64, 498
\textquotedblright ( ” right double
quote), 64, 498
\textquoteleft ( ‘ left single quote), 499
\textquoteright ( ’ )
Eur. quot. mark, 499
right single quote, 499
\textregistered (® registered
trademark), 64, 498
\textrm (font shape com.), 73, 283, 496
\textsc (font shape com.), 73, 74, 496
\textsf (font shape com.), 73, 496
\textsl (font shape com.), 73, 74, 496
\textstyle (math font size com.), 182,
187
\textsubscript, 233, 293
\textsuperscript ( a), 293, 499
\texttrademark ( ™trademark), 499
\texttt (font shape com.), 10, 60, 73,
496
\textup (font shape com.), 73, 74, 496
textures (opt. of hyperref pack.), 301
\textvisiblespace, 9, 47, 48, 499
\textwidth (length com.), 254, 400, 405
tfm (LATEX font metric ﬁle), 506
\tfrac ( 𝑥
𝑦), 137, 183
\TH (Thorn Eur. char.), 499
\th (thorn Eur. char.), 499
\thanks (top matter com.), 70, 262–264,
277, 286
\the (value expansion com.), 62–64, 69,
70, 94, 403
thebibliography (bibliography env.), 50,
245–251, 408, 436, 445
argument of, 247, 250
\thechapter (the value of counter
chapter), 403
\thefootnote (the value of counter
footnote), 70, 71
theindex (index env.), 251, 408, 447, 457
commands in, 251, 447
themes (beamer distr. directory), 339
themes, for beamer presentations, 310,
338–340
Berkeley, 310, 313, 314, 339
color options, 339
Warsaw, 26, 313, 314, 339
theorem (proclamation env.), 35, 105,
108, 324, 383
logical design of, 35
visual design of, 35
theorem (pack.), 295
theorem-like structures, see
proclamations
\theoremname (hyperref redef. name),
305
\theoremstyle* (procl. com.), 109–111
\theoremstyle (procl. com.), 109–111
\theparentequation (the value of
counter parentequation), 403
\therefore ( ∴binary rel.), 484
\thesection (the value of counter
section), 403
theses, in BibTEX database ﬁles, 433
\thesubsection (the value of counter
subsection), 403
\Theta (Θ Greek char.), 144, 482
\theta (𝜃Greek char.), 144, 482
thick (TikZ graphics pack. com.), 351,
353
\thickapprox (≈binary rel.), 484
\thicksim (∼binary rel.), 484
\thickspace (spacing com.), 170, 493,
500
thin (TikZ graphics pack. com.), 353
\thinspace (spacing com.), 16, 51, 58,
170, 170, 493, 500
\thispagestyle (set page style), 254, 480
thorn (Eur. char), 499
Thorup, Kresten K., 404

604
Index
tie (˜ spacing com.), 9, 47, 49, 50, 59, 59,
81, 500
absorbs spaces, 59
in BibTEX databases, 427
with cross-references, 240
tie (
text accent), 63, 496
TikZ (graphics pack.), 26, 243, 344, 344
above com., 351
align com., 351
arc com., 349
around com., 352
arrow com., 354–356
below com., 348, 351
center com., 351
circle com., 345–349, 353
colors, 354
components, 347–350
controls com., 350
curves, 350
custom commands, 346
dashed com., 353, 354, 356
dotted com., 350, 353
\draw (graphics com.), 346, 353
ellipse com., 348, 349, 351
end angle com., 349
every picture com., 347
fill com., 346
grid com., 344, 346
in com., 350, 354
labels, 346, 350
left com., 351, 356
line width com., 345, 347, 353
\node com., 351
optional arguments, 344, 345
out com., 350, 354
path attributes, 353–356
radius com., 345
rectangle com., 349, 351, 352
right com., 351, 356
rotate com., 351
scale com., 352
semithick com., 353
shift com., 352
start angle com., 349
terminating lines, 345
thick com., 351, 353
thin com., 353
tikz-cd manual, 354, 357
tikzpicture (graphics env.), 344
\tikzset com., 347
transformations, 351–353
ultra thick com., 353
ultra thin com., 353
very thick com., 350, 353, 354
very thin com., 353
xscale com., 353
yscale com., 353
tikzpicture (graphics env.), 344
\tikzset (TikZ graphics pack. com.), 347
tilde ( ˜ )
text accent, 63, 496
text symbol, 499
\tilde (̃𝑥math accent), 16, 154, 492
\time (time com.), 63
time commands
\day, 63
\month, 63
\time, 63
\today, 10, 53–54, 64, 128, 286, 379,
526
\year, 63
Times, in LATEX documents, 522–523
\times (× math op.), 14, 137, 486
times (pack.), 522
times.sty (psnfss distr. ﬁle), 522
\Tiny (font size com.), 76, 76, 497
\tiny (font size com.), 76, 76, 497
Tisseau, Gérard, 357, 550
\title (top matter com.), 27, 88, 231,
278, 286, 313, 466
optional arguments of, 27, 257, 258,
266, 278
title (BibTEX database ﬁeld), 424–426,
433
title pages, 257, 512
document class options for, 231, 281,
282, 289
environments for, 466
footnotes on, 70
of articles, 231, 233
of books, 465, 466
of presentations, 26
titlepage (doc. class opt.), 231, 281,
289, 466
\titlepage (beamer com.), 310
titlepage (front matter env.), 466
titles
in bibliographies
rules for typing, 426–427
in running heads, 258, 278
of articles, 257, 278
of structural commands, 234
fragile commands in, 57
\to (→math arrow), 487
toc (table of contents ﬁles), 467–469,
480, 509
commands in, 469
tocdepth (counter), 404, 467
\today (time com.), 10, 53–54, 64, 128,
286, 379, 526

Index
605
tokens, 506
tools (LATEX distr. directory), 293–296
packages in, 294–296
tools (pack.), 294
\top (⊤math sym.), 488
top matter, 24, 231, 233, 256
article information
of AMS documents, 257–259
commands, 27, 64, 70, 88, 254, 257,
261, 257–265, 266, 268, 277, 278,
313, 466
blank lines in, 257
examples of, 265–268
with multiple authors, 264–265
customizing templates, 275
is document-class speciﬁc, 233
of AMS documents, 257–268
AMS information, 263–264
author information, 259–263
errors with, 267–268
examples, 265–268
with multiple authors, 264
of books, 233
of presentations, 26, 308–309, 313
top-or-bottom, placement of tags, 280
topmat.tpl (sample ﬁle), 265
\topsep (length com.), 409, 410
\totalheight (length com.), 90, 90, 92,
93
trace (pack.), 295
trademark text symbols (™®), 64, 498,
499
trans (beamer doc. class opt.), 341
transformations, TikZ graphics, 351–353
translation, of line ending characters, 47
\translator (top matter com.), 258
\triangle (△math sym.), 488
\triangledown (▿math sym.), 488
\triangleleft (⊲math op.), 486
\trianglelefteq (⊴binary rel.), 484
\triangleq (≜binary rel.), 484
\triangleright (⊳math op.), 486
\trianglerighteq (⊵binary rel.), 484
trivlist (list text env.), 416
\tt (obs. LATEX 2.09 font com.), 77
\ttfamily (font shape com. dec.), 73,
103, 122, 496
ttfamily (font shape env.), 103
tug (TEX Users Group), 5, 515, 518–519
TUGboat, 518
two-letter font commands, see under font
commands
twocolumn (doc. class opt.), 68, 84, 243,
281, 289, 290
and footnotes, 295
\twocolumn (double-column com.), 84
\twoheadleftarrow (↞math arrow), 487
\twoheadrightarrow (↠math arrow),
487
twoside (doc. class opt.), 68, 231, 281,
289, 290, 466
type (BibTEX database ﬁeld), 425
type foundries, 522, 524
types
of commands, 57–58
of math symbols, 168, 182
declaring, 178
typeset
example articles
secondarticle.tex, 268–275
ﬁles, 5, 6
dvi format, 507
pdf format, 6, 244, 301, 507
typesetting
indexes, 456–459
source ﬁles, 5, 11, 19, 34, 35, 38, 47,
57, 511
tables of contents, 467–469
with LATEX, 32, 33, 502, 506–510
typesetting source ﬁles
iPad, 538, 541
typewriter style
document font family, 72, 72
font shape, 10, 60, 61, 73, 103, 122,
363, 496, 522
fonts, 71
in math, 179, 179, 492
typing
bibliographic entries, 425–436
accents in, 427
names in, 425–426
rules for, 442–445
titles in, 426–427
books, 463–480
exercises, 470
footnotes, 70–71
math, 23, 131–189
poetry, 124–125
programs, 121–123, 125–127
quotations, 123–124
text, 45–96
symbols, 58–62
typographical
errors, 35
rules for
abbreviations and acronyms, 74
initials, 50, 51
\u breve text accent ( ˘ ), 63, 496

606
Index
uk tug (United Kingdom TEX Users
Group)
Frequently Asked Questions (faq),
519
\ulcorner (⌜math delimiter), 145,
489
ultra thick (TikZ graphics pack. com.),
353
ultra thin (TikZ graphics pack. com.),
353
Umeki, Hideo, 254
umlaut ( ¨ text accent), 7, 11, 63, 496,
526
unbreakable
hyphens, 66
spaces (˜ tie), 9, 47, 50, 59, 59, 81,
500
absorb spaces, 59
in BibTEX databases, 427
with cross-references, 240
\underbrace (math sym.), 155
with a subscript, 155
underdot text accent (.), 63, 496
\underleftarrow ( 𝑥
⃖⃖
math arrow), 156
\underleftrightarrow ( 𝑥
⃖⃗
math arrow),
156
\underline ( 𝑥math line sym.), 156
\underrightarrow (𝑥
⃖⃗
math arrow), 156
underscore ( _ ), 60
text symbol, 64, 498
in e-mail addresses, 261
underscore text accent (¯), 63, 496
\underset (symbol-building com.), 162,
176
units
absolute, see under absolute
dimensional, see under dimensional
units
logical, see under logical
math, see mu
relative, see under relative
unix, 445, 502
ftp clients, 516
LATEX implementations, 458
\unlhd (⊴math op.), 486
unmarked footnotes, 263
unnumbered
environments, 199
equations, 18, 21, 22, 136, 185,
194–196, 199, 201, 213, 310
items, 99
math environments, 195
proclamations, 109, 110, 381
structural units, 235, 465
unpacked (LATEX distr. directory), 293,
517
UNPUBLISHED (bibl. entry type), 434
\unrhd (⊵math op.), 486
\Uparrow (⇑)
math arrow, 487
math delimiter, 145, 489
\uparrow (↑)
math arrow, 487
math delimiter, 145, 489
updates
to AMSFonts and packages, 510
to LATEX, 174, 509
\Updownarrow (⇕)
math arrow, 487
math delimiter, 145, 489
\updownarrow (↕)
math arrow, 487
math delimiter, 145, 489
\upharpoonleft (↿math arrow), 487
\upharpoonright (↾math arrow), 487
\uplus (⊎math op.), 486
\upn (font shape com.), 136
uppercase counter styles
letters (\alph), 402
roman numerals (\roman), 402
upref (pack.), 282, 283
upright (font shape), 19, 71, 72, 73, 74,
103, 136, 382, 414, 496
context dependence of, 74
\uproot (root-adjustment com.), 142
\upshape (font shape com. dec.), 73, 74,
103, 382, 414, 496
upshape (font shape env.), 103
\Upsilon (Υ Greek char.), 144, 482
\upsilon (𝜐Greek char.), 144, 482
\upuparrows (⇈math arrow), 487
\urcorner ( ⌝math delimiter), 145, 489
\URL (bibl. com.), 425
url (Uniform Resource Locator), 262,
see also hyperlinks
\urladdr (top matter com.), 262, 262,
277, 304
\usecolortheme (beamer com.), 339
\usecounter (list counter com.), 412
\usefonttheme (beamer com.), 340
\usepackage (preamble com.), 24, 53,
231, 276, 301, 302, 308, 364, 385,
448, 511
can load multiple packages, 232
user-deﬁned commands, see custom
commands
users groups, 515, 517, 518–519, 526
\usetheme (beamer com.), 26, 310, 339
unix, 473

Index
607
\v caron text accent ( ˇ ), 63, 496
\value (value of counter), 404
values, of counters, 34, 70, 403
printing, 62–64, 94, 403
van Oostrum, Piet, 254, 515
\varDelta ( 𝛥Greek char.), 144, 482
\varepsilon (𝜀Greek char.), 144, 482
\varGamma ( 𝛤Greek char.), 144, 482
\varinjlim (lim
←←←←←←←←←←→math op.), 150, 490
varioref (pack.), 240, 295
\varkappa (𝜘Greek char.), 144, 482
\varLambda ( 𝛬Greek char.), 144, 482
\varliminf (lim math op.), 150, 490
\varlimsup (lim math op.), 150
\varnothing (∅math sym.), 488
\varOmega (𝛺Greek char.), 144, 482
\varPhi (𝛷Greek char.), 144, 482
\varphi (𝜑Greek char.), 144, 482
\varPi (𝛱Greek char.), 144, 482
\varpi (𝜛Greek char.), 144, 482
\varprojlim (lim
←←←←←←←←←←←math op.), 150, 490
\varpropto (∝binary rel.), 484
\varPsi (𝛹Greek char.), 144, 482
\varrho (𝜚Greek char.), 144, 482
\varSigma (𝛴Greek char.), 144, 482
\varsigma (𝜍Greek char.), 144, 482
\varsubsetneq (⊊neg. binary rel.), 485
\varsubsetneqq (⫋neg. binary rel.), 485
\varsupsetneq (⊋binary rel.), 485
\varsupsetneqq (⫌binary rel.), 485
\varTheta (𝛩Greek char.), 144, 482
\vartheta (𝜗Greek char.), 144, 482
\vartriangle (▵math op.), 486
\vartriangleleft (⊲math op.), 486
\vartriangleright (⊳math op.), 486
\varUpsilon ( 𝛶Greek char.), 144, 482
\varXi (𝛯Greek char.), 144, 482
\Vdash ( ⊩binary rel.), 484
\vDash ( ⊨binary rel.), 484
\vdash ( ⊢binary rel.), 483
\vdots (vertical ellipsis), 140, 218
\vec (⃗𝑥math accent), 16, 154, 375, 492
\vee (∨math op.), 486
\veebar (⊻math op.), 486
\verb (inline verbatim com.), 127–129
in aligned math environments, 128
in argument of other commands, 128
spaces in, 128
\verb* (inline verbatim com.), 128
delimiters with, 127–129
verbatim (disp. text env.), 98, 127,
125–127, 295, 341, 503
blank lines in, 126
characters following, 126
simulating with \verb, 128
verbatim (pack.), 69, 70, 127, 295, 386
verse (disp. text env.), 124, 408
breaking lines in, 125
versions
of AMS packages and AMSFonts,
281, 283, 504, 510
of LATEX packages, 509–510
\Vert ( ‖ math delimiter), 145, 489
\vert ( | math delimiter), 145, 489
vertical
alignment, of boxes, 93, 96
bar ( | text symbol), 64, 498
ellipses, 140, 218
glue, 507
lines
in CD environments, 223
in tabular environments, 115
math arrows, 223
vertical spacing
adding after \\, 80
adding to table of contents, 468
adjusting
with \arraystretch, 119
with struts, 119
adjusting with the setspace
package, 81
between marginal notes, 405
between paragraphs, 405
commands
\bigskip, 40, 86
\enlargethispage, 83, 478, 480
\medskip, 86
\smallskip, 40, 86
\smash, 96, 184, 184
to avoid using, 475
\vfill (ﬁll com.), 88
\vphantom, 87, 183
\vskip, 40
\vspace, 40, 86
\vspace*, 87
in boxes, 96
in indexes, 251, 447
in math mode, 183–184
in text, 40, 86–87, 377, 468, 476,
480
preventing removal of, 87
stretchable, 408
using the setspace package, 81
very thick (TikZ graphics pack. com.),
350, 353, 354
very thin (TikZ graphics pack. com.),
353
\vfill (space ﬁll com.), 88

608
Index
viewers
dvi, 507, 517
pdf, see under pdf
viewing typeset ﬁles, 507
dvi format, 507
pdf format, 6, 244, 301, 507
virtex (TEX program), 505
visible spaces ( ␣), 9, 47
and \verb* command, 128
Visual
Guide, to multiline math formulas,
191
visual
design, 35, 229, 252–254, 340
markup, 512
guide, to multiline math formulas,
192
Vmatrix (subsid. math env.), 163, 217
vmatrix (subsid. math env.), 16, 17, 217
volume (BibTEX database ﬁeld), 424,
425
von, in bibliographic entries, 426
\vphantom (spacing com.), 87, 183
\vskip (spacing com.), 40
\vspace (spacing com.), 40, 86
\vspace* (spacing com.), 87
vtex (opt. of hyperref pack.), 301
\Vvdash ( ⊪binary rel.), 484
warning messages
about hyphenation, 79
Abstract should precede
\maketitle
in AMS document classes, 233
Characters dropped after
\end{verbatim}, 126
\end occurred inside a group at
level x , 55
\end occurred when \xxx on line
yy was incomplete, 472
generated by overlapping braces, 55
Label(s) may have changed, 239
line numbers in, 11
lines are too wide, 78, 11–79
No auxiliary output files, 508
Overfull \hbox, 78, 11–79, 507
suppressing, 79
recorded in log ﬁle, 34, 79
regarding font substitution, 77
Rerun to get cross-references
right, 239
Underfull \vbox has occurred
while \output is active, 507
Warning–missing field in label ,
443–445
when using \NeedsTeXFormat, 232,
385, 509
with BibTEX, 442–445
Warsaw (beamer theme), 26, 313, 314, 339
\wedge (∧math op.), 486
weight, of fonts, see under font
environments, font commands
and font declarations
Weisberg, Jonathan, 534
white (TikZ color), 354
white space
adjusting, 40, 476
and binary operations and relations,
135
between marginal notes, 405
between paragraphs, 405
commands, avoiding direct use of,
475
detemined by document classes, 84
horizontal, 51, 84, 87, 122, 134,
169–171, 207, 296, 366–367, 493,
500
in math mode, 165, 216, 219
in text mode, 9, 14, 48–51, 84–86,
88, 95, 106, 416
in arguments of commands, 68
in command deﬁnitions, 365
in command names, 52
in delimited commands, 378–379
in math, 13, 37, 86–87, 134–135,
168–172, 183–184
adjusting, 86
in source ﬁles, 135
in tabular environments, 115
in text, 9, 84–88, 382, 427, 493, 500
in \verb commands, 128
in verbatim environments, 126
suppressing, 382, 455
terminating commands with, 52
vertical, 84
adding to table of contents, 468
adjusting, 475
in math mode, 86–87, 183–184
in text mode, 40, 83, 86–88, 184,
377, 476, 480
\widehat ( ̂𝑥math accent), 154, 154, 164,
492
\widetilde ( ̃𝑥math accent), 154, 154,
492
width
of columns in tabular environments,
116
of fonts, see font width
of text blocks, 254, 400, 405
of text boxes, 89–90, 407

Index
609
\width (length com.), 90, 90, 93
word processors, 8
words, are separated by spaces, 65
work (folder), 5, 8, 10, 11, 38, 157, 275,
302, 308, 309, 313, 325, 438
creating, 5
\wp (℘math sym.), 488
\wr (≀math op.), 486
wrapping, of lines by text editors, 67
xcb (exercise env.), 470
xcolor (pack.), 307, 330
options, 331
\Xi ( Ξ Greek char.), 144, 482
\xi (𝜉Greek char.), 144, 482
\xleftarrow (stretchable math arrow),
157
xr (pack.), 240, 296
\xrightarrow (stretchable math arrow),
157
xscale (TikZ graphics pack. com.), 353
xspace (pack.), 296, 366–367
xy-pic (pack.), 224
Y&Y, 505, 521
\year (time com.), 63
year (BibTEX database ﬁeld), 424,
425
yscale (TikZ graphics pack. com.),
353
zero, specifying in arguments, 96
\zeta (𝜁Greek char.), 144, 482

