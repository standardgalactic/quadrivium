What is Version Control?
Version control systems are tools that manage changes made to files and directories in a 
project. They allow you to keep track of what you did when, undo any changes you decide 
you don't want, and collaborate at scale with others. This cheat sheet focuses on one of the 
most popular one, Git. 



Git Cheat Sheet
Learn Git online at www.DataCamp.com
>
Key Definitions
Throughout this cheat sheet, you‚Äôll find git-specific terms and jargon being used. Here‚Äôs a run-down of 
all the terms you may encounter

Basic definition√ò
√ö Local repo or repository: A local directory containing code and files for the projec¬ø
√ö Remote repository: An online version of the local repository hosted on services like GitHub, GitLab, and BitBucke¬ø
√ö Cloning: The act of making a clone or copy of a repository in a new director¬∏
√ö Commit: A snapshot of the project you can come back t√ì
√ö Branch: A copy of the project used for working in an isolated environment without affecting the main projec¬ø
√ö Git merge: The process of combining two branches together

More advanced definition√ò
√ö .gitignore file: A file that lists other files you want git not to track (e.g. large data folders, private info, and any local 
files that shouldn‚Äôt be seen by the public.¬ã
√ö Staging area: a cache that holds changes you want to commit next¬¨
√ö Git stash: another type of cache that holds unwanted changes you may want to come back late√ê
√ö Commit ID or hash: a unique identifier for each commit, used for switching to different save points.√†
√ö HEAD (always capitalized letters): a reference name for the latest commit, to save you having to type Commit IDs. 
HEAD~n syntax is used to refer to older commits (e.g. HEAD~2 refers to the second-to-last commit).
>
Working With Files
Adding and removing file√ò
√ö Add a file or directory to git for tracking
$ git add <filename_or_dir
√ö Add all untracked and tracked files inside the current directory to git
$ git add 
√ö Remove a file from a working directory or staging area
$ git rm <<filename_or_dir>

Saving and working with change√ò
√ö See changes in the local repository
$ git statu
√ö Saving a snapshot of the staged changes with a custom message
$ git commit -m ‚Äú[Commit message]
√ö Staging changes in all tracked files and committing with a message
$ git add -am ‚Äú[Commit message]
√ö Editing the message of the latest commit
$ git commit --amend -m ‚Äú[New commit message]‚Äù
√ö List all branches
$ git branch
$ git branch --list
$ git branch -a  
√ö Create a new local branch named new_branch without checking ‚Ä®
out that branch
$ git branch <new_branch
√ö Switch into an existing branch named <branch>
$ git checkout <branch
√ö Create a new local branch and switch into it
$ git checkout -b <new_branch
√ö Safe delete a local branch (prevents deleting unmerged changes)
$ git branch -d <branch
√ö Force delete a local branch (whether merged or unmerged)
$ git branch -D <branch>

(shows remote branches as well¬ï
√ö List all commits with their author, commit ID, date and message  
$ git lo¬≥
√ö List one commit per line 
$ git log --oneline [-n¬©
√ö Log all commits with diff information:
$ git log --stat
(-n tag can be used to limit the number of 
commits displayed (e.g. -5))
√ö Checking out (switching to) older commits
$ git checkout HEAD~2
√ö Checks out the third-to-last commit. 
$ git checkout <commit_id
√ö Undo the latest commit but leave the working directory 
unchanged
$ git reset HEAD~1

You can undo as many commits as you want by changing the 
number after the tilde.
√ö Download all commits and branches from the <remote> without 
applying them on the local repo
$ git fetch <remote
√ö Only download the specified <branch> from the <remote>
$ git fetch <remote> <branch>


√ö Saving staged and unstaged changes to stash for a later use (see 
below for the explanation of a stash)
$ git stas¬ê
√ö Stashing staged, unstaged and untracked files as well
$ git stash -¬≥
√ö Stashing everything (including ignored files)
$ git stash --al¬ç
√ö Reapply previously stashed changes and empty the stash
$ git stash po¬°
√ö Reapply previously stashed changes and keep the stash
$ git stash appl¬á
√ö Dropping changes in the stash
$ git stash dro¬°
√ö Show uncommitted changes since the last commit
$ git dif¬Ö
√ö Show the differences between two commits (should provide the 
commit IDs)
$ git diff <id_1> <id_2>
√ö Rename the current branch to <new_name>
$ git branch -m <new_name
√ö Push a copy of local branch named branch to the remote repo 
$ git push <remote_repo> branch√É
√ö Delete a remote branch named branch
$ git push <remote_repo> :branch
$ git push <remote_repo> --delete branc¬ê
√ö Merging a branch into the main branch
$ git checkout main
$ git merge <other_branch
√ö Merging a branch and creating a commit message
$ git merge --no-ff <other_branch
√ö Compare the differences between two branches
$ git diff <branch_1> <branch_2
√ö  Compare a single <file> between two branches
$ git diff <branch_1> <branch_2> <file>
 (-d tag only works locally)
√ö Log commits after some date 
$ git log --oneline --after=‚ÄùYYYY-MM-DD
√ö Log commits before some date 
$ git log --oneline --before=‚Äùlast year‚Äù
(A sample value can be 4th of October, 
2020 - ‚Äú2020-10-04‚Äù or keywords such as ‚Äúyesterday‚Äù, ‚Äúlast 
month‚Äù, etc. )
(Both --after and --before tags 
can be used for date ranges)
√ö Discard all changes of the latest commit (no easy recovery)
$ git reset --hard HEAD~1

√ö Undo a single given commit, without modifying commits that come 
after it (a safe reset)
$ git revert [commit_id]

Instead of HEAD~n, you can provide commit hash as well. Changes after 
that commit will be destroyed√ë
May result in revert conflicts
√ö Merge the fetched changes if accepted
$ git merge <remote>/<branch
√ö A more aggressive version of fetch which calls fetch and merge 
simultaneously
$ git pull <remote>
What is a repository?
A repository or a repo is any location that stores code and the necessary files that allow it to run without errors. A repo 
can be both local and remote. A local repo is typically a directory on your machine while a remote repo is hosted on 
servers like GitHub


Creating local repositoriesp
√ö Clone a repository from remote hosts (GitHub, GitLab, DagsHub, etc.)
$ git clone <remote_repo_url
√ö Initialize git tracking inside the current directory
$ git ini¬ï
√ö Create a git-tracked repository inside a new directory
$ git init [dir_name¬©
√ö Clone only a specific branch
$ git clone -branch <branch_name> <repo_url
√ö Cloning into a specified directory
$ git clone <repo_url> <dir_name>
>
Git Basics
Managing remote repositorie√ò
√ö List remote repos
$ git remot√à
√ö Create a new connection called <remote> to a remote repository on servers like GitHub, GitLab, DagsHub, etc.
$ git remote add <remote> <url_to_remote
√ö Remove a connection to a remote repo called <remote>
$ git remote rm <remote
√ö Rename a remote connection
$ git remote rename <old_name> <new_name>
A note on cloning 
There are two primary methods of cloning a repository - HTTPS syntax and 
SSH syntax. While SSH cloning is generally considered a bit more secure 
because you have to use an SSH key for authentication, HTTPS cloning is 
much simpler and the recommended cloning option by GitHub.

HTTPS
$ git clone https://github.com/your_username/repo_name.git

SSH
$ git clone git@github.com:user_name/repo_name.git
A note on stashes
Git stash allows you to temporarily save edits¬†you've made to your working copy so you can 
return to your work later. Stashing is especially useful when you are not yet ready to commit 
changes you've done, but would like to revisit them at a later time.¬†
Learn Data Skills Online at www.DataCamp.com
Branches
Logging and reviewing work
Reversing changes
Pulling changes
Other useful configuration command√ò
√ö List all key-value configurations
$ git config --lis¬ï
√ö Get the value of a single key
$ git config --get <key>

Setting aliases for common commands
√ö Create an alias named gc for the ‚Äúgit commit‚Äù command
$ git config --global alias.gc commit
$ gc -m ‚ÄúNew commit
√ö Create an alias named ga for the ‚Äúgit add‚Äù command
$ git config --global alias.ga add
If you find yourself using a command frequently, git lets you set an alias for that command to surface it more quickl
>
Installing Git
On OS X ‚Äî Using an installe7
C¬¨ Download the installer for Ma'
E¬¨ Follow the prompts

On OS X ‚Äî Using Homebrew 
$ brew install git



On Linux 
$ sudo apt-get install git

On Window√ò
C¬¨ Download the latest Git For Windows installe√ê
E¬¨ Follow the prompts
Check if installation successful (On any platform)
$ git --version
>
What is a Branch?
Branches are special ‚Äúcopies‚Äù of 
the code base which allow you to 
work on different parts of a project 
and new features in an isolated 
environment. Changes made to the 
files in a branch won‚Äôt affect the 
‚Äúmain branch‚Äù which is the main 
project development channel.
Main branch
Main branch
Work on ‚Ä®
a new 
experiment
Merge the 
new 
experiment
Continue working on 
the main channel
>
Setting Up Git
Set your basic informatio/
√ö Configure your email 
$ git config user.email [your.email@domain.com¬©
√ö Configure your name 
$ git config user.name [your-name]

Important tags to determine the scope of configurations 
Git lets you use tags to determine the scope of the information you‚Äôre using during setuO
√ö Local directory, single project (this is the default tag)
$ git config --local user.email ‚Äúmy_email@example.com
√ö All git projects under the current user
$ git config --global user.email ‚Äúmy_email@example.com
√ö For all users on the current machine
$ git config --system user.email ‚Äúmy_email@example.com‚Äù
If you are working in a team on a single repo, it is important for others to know who made certain 
changes to the code. So, Git allows you to set user credentials such as name, email, etc..
>
Setting Up Git
Set your basic informatio/
√ö Configure your email 
$ git config user.email [your.email@domain.com¬©
√ö Configure your name 
$ git config user.name [your-name]

Important tags to determine the scope of configurations 
Git lets you use tags to determine the scope of the information you‚Äôre using during setuO
√ö Local directory, single project (this is the default tag)
$ git config --local user.email ‚Äúmy_email@example.com
√ö All git projects under the current user
$ git config --global user.email ‚Äúmy_email@example.com
√ö For all users on the current machine
$ git config --system user.email ‚Äúmy_email@example.com‚Äù
If you are working in a team on a single repo, it is important for others to know who made certain 
changes to the code. So, Git allows you to set user credentials such as name, email, etc..

