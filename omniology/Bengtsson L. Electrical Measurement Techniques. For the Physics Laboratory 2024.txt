Lars Bengtsson
Electrical 
Measurement 
Techniques
For the Physics Laboratory

Electrical Measurement Techniques

Lars Bengtsson 
Electrical Measurement 
Techniques 
For the Physics Laboratory

Lars Bengtsson 
Department of Physics 
University of Gothenburg 
Göteborg, Sweden 
ISBN 978-981-99-8186-1
ISBN 978-981-99-8187-8 (eBook) 
https://doi.org/10.1007/978-981-99-8187-8 
© The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature 
Singapore Pte Ltd. 2024 
This work is subject to copyright. All rights are solely and exclusively licensed by the Publisher, whether 
the whole or part of the material is concerned, speciﬁcally the rights of translation, reprinting, reuse 
of illustrations, recitation, broadcasting, reproduction on microﬁlms or in any other physical way, and 
transmission or information storage and retrieval, electronic adaptation, computer software, or by similar 
or dissimilar methodology now known or hereafter developed. 
The use of general descriptive names, registered names, trademarks, service marks, etc. in this publication 
does not imply, even in the absence of a speciﬁc statement, that such names are exempt from the relevant 
protective laws and regulations and therefore free for general use. 
The publisher, the authors, and the editors are safe to assume that the advice and information in this book 
are believed to be true and accurate at the date of publication. Neither the publisher nor the authors or 
the editors give a warranty, expressed or implied, with respect to the material contained herein or for any 
errors or omissions that may have been made. The publisher remains neutral with regard to jurisdictional 
claims in published maps and institutional afﬁliations. 
This Springer imprint is published by the registered company Springer Nature Singapore Pte Ltd. 
The registered company address is: 152 Beach Road, #21-01/04 Gateway East, Singapore 189721, 
Singapore 
Paper in this product is recyclable.

Preface 
This book is about electrical measurement techniques with a focus on measurement 
systems in a physics lab. It is also on an ‘advanced’ level, meaning that it assumes the 
reader has math and physics skills corresponding to a bachelor’s degree in science 
or engineering. 
When I started as a Ph.D. student in experimental atomic physics many years 
ago, I was very well prepared ‘physics-wise’, but when I started working in the 
atomic laser lab, I soon realized that there were so many things I needed to know that 
were not included in the physics program’s curriculum. I knew all about Newton 
mechanics, thermodynamics, atomic physics, and wave equations (or at least I 
thought I did), but I knew nothing about instruments’ bandwidth, transmission cables, 
sensors, microchannel plates, vacuum gauges, piezo crystals, probes, ﬁlters, spectral 
analyzers, signal processing, analog-to-digital converters, time-to-digital converters, 
uncertainty budgets, lock-in ampliﬁers, and PID controllers. Every day there was 
something new to learn, and it was quite overwhelming and sometimes a little frus-
trating. I went to graduate school to learn more about physics but spent most of my 
time learning about electrical engineering stuff. 
I had to ﬁgure out all these things by myself and it took precious time away from 
the things I really wanted to study, and I remember wishing that there was a book 
that summarized it all, like ‘Electrical engineering for physicists’. Well, now there is. 
This book summarizes what a Ph.D. student in experimental physics needs to know 
from the electrical engineering curriculum to work in a physics lab. 
The book contains many examples and problems. The problems are solved; from  
experience, I know that this is appreciated by the readers. It contains both ‘practical’ 
aspects of the equipment in a physics lab (like bandwidth, probes, transmission 
cables, controllers, etc.) as well as signal processing theory (like transform theory, 
ﬁltering, convolution, correlation, and curve ﬁtting), but the intended focus is always 
on the understanding. According to Bloom’s taxonomy triangle, a student’s ﬁrst 
encounter with a subject is characterized by remembering, i.e., root learning and 
mechanical solving of standard problems. This is what characterizes bachelor classes. 
Most of the mathematics in this book is not new to you; if you have a bachelor’s
v

vi
Preface
degree in physics, you have seen the math before, but for most students, that implies 
a cognitive understanding on Bloom’s remember level. 
Remember 
Understand 
Apply 
Analyze 
Evaluate 
Create 
Bloom’s taxonomy (revised) 
In this book, you will see the same math again, but since you have already 
processed this math on the remember level, you are now ready to take it to the 
next level(s), the understanding and application levels. That is the intention of the 
theoretical parts of this book; to take the math you already know to a higher cognitive 
level. That means that exercises are not focused on ‘mechanical procedures’ but are 
designed to promote a deeper understanding. 
Göteborg, Sweden 
October 2023 
Lars Bengtsson

Contents 
1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1 
1.1
Electrical Measurement Systems . . . . . . . . . . . . . . . . . . . . . . . . . .
1 
1.2
Common and Normal Mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2 
1.3
Signal-To-Noise Ratio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3 
1.4
Decibel Units . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
3 
1.5
Differential-Ended Versus Single-Ended . . . . . . . . . . . . . . . . . . . .
4 
1.6
Signals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
4 
1.6.1
Risetime and Falltime . . . . . . . . . . . . . . . . . . . . . . . . . . .
4 
1.6.2
Bandwidth . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5 
1.7
Systems
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5 
1.8
Solved Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
6 
2
Noise: Sources and Remedies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9 
2.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9 
2.2
Internal Noise . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
10 
2.2.1
Johnson Noise . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
10 
2.2.2
Shot Noise . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11 
2.2.3
1/f-Noise . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11 
2.2.4
Quantization Noise . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
12 
2.3
Coupling By Radiation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
12 
2.3.1
Electric Dipole Antennas . . . . . . . . . . . . . . . . . . . . . . . .
12 
2.3.2
Magnetic Dipole Antennas . . . . . . . . . . . . . . . . . . . . . . .
16 
2.4
Capacitive Crosstalk . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
20 
2.5
Inductive Crosstalk . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
23 
2.6
Common Impedances . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
25 
2.7
Summary and Recommendations . . . . . . . . . . . . . . . . . . . . . . . . . .
29 
2.8
Solved Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
30 
Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
31
vii

viii
Contents
3
Sensors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
33 
3.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
33 
3.2
Temperature Sensors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
34 
3.2.1
Thermocouples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
34 
3.2.2
Metal Temperature Sensors . . . . . . . . . . . . . . . . . . . . . .
39 
3.2.3
Measuring Resistance . . . . . . . . . . . . . . . . . . . . . . . . . . .
40 
3.2.4
Bandgap Sensors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
42 
3.2.5
Cryogenic Temperatures . . . . . . . . . . . . . . . . . . . . . . . . .
43 
3.2.6
Extremely High Temperatures . . . . . . . . . . . . . . . . . . . .
43 
3.3
The Strain Gauge Principle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
45 
3.3.1
Strain Gauges . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
45 
3.3.2
The Wheatstone Bridge . . . . . . . . . . . . . . . . . . . . . . . . . .
47 
3.3.3
Accelerometers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
49 
3.3.4
Pressure Sensors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
50 
3.3.5
Flow Sensors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
51 
3.3.6
Fluid Level Sensors . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
53 
3.3.7
Torque Sensors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
53 
3.3.8
Viscosity Sensors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
55 
3.3.9
Load Cell . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
55 
3.4
Piezoelectric Crystals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
56 
3.5
Hall Sensors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
58 
3.6
Position Sensors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
59 
3.7
Photo Sensors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
61 
3.7.1
Light Units . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
61 
3.7.2
Photodiodes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
61 
3.7.3
Avalanche Photodiodes . . . . . . . . . . . . . . . . . . . . . . . . . .
63 
3.7.4
Position-Sensitive Detectors . . . . . . . . . . . . . . . . . . . . . .
64 
3.7.5
Photomultipliers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
65 
3.8
Particle Detectors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
67 
3.8.1
Channel Electron Multipliers . . . . . . . . . . . . . . . . . . . . .
67 
3.8.2
Microchannel Plates . . . . . . . . . . . . . . . . . . . . . . . . . . . .
68 
3.9
Vacuum Gauges . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
69 
3.9.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
69 
3.9.2
The Pirani Gauge . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
69 
3.9.3
Gas Ionization Gauges . . . . . . . . . . . . . . . . . . . . . . . . . .
71 
3.10
Solved Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
72 
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
76 
4
The Instrumentation Ampliﬁer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
77 
4.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
77 
4.2
Implementations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
79 
4.2.1
Classic IA Circuit
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
79 
4.3
CMRR Versus SNR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
83 
4.4
Solved Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
84

Contents
ix
5
Transmission Lines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
85 
5.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
85 
5.2
The Characteristic Impedance . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
85 
5.3
Termination . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
95 
5.4
Splitting and Splicing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
97 
5.5
Attenuation
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
98 
5.6
Time Domain Reﬂectometry . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
99 
5.7
Solved Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
101 
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
109 
6
Probes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
111 
6.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
111 
6.2
Passive Probes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
113 
6.3
Active Probes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
116 
6.4
Current Probes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
117 
6.5
Solved Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
119 
7
Transform Theory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
123 
7.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
123 
7.2
The Fourier Transform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
125 
7.2.1
Case 1: Signal is Periodic . . . . . . . . . . . . . . . . . . . . . . . .
125 
7.2.2
Case 2: Signal is Non-Periodic, 
But ‘Time-Limited’ . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
129 
7.2.3
Case 3: Signal is Non-Periodic and Inﬁnite . . . . . . . . .
131 
7.2.4
FFT Outputs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
134 
7.2.5
Aliasing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
136 
7.3
Describing Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
138 
7.3.1
Distortion-Free Systems . . . . . . . . . . . . . . . . . . . . . . . . .
141 
7.4
Complex Frequencies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
143 
7.4.1
Laplace Representation of Systems . . . . . . . . . . . . . . . .
145 
7.4.2
The z Transform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
149 
7.5
Solved Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
153 
Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
159 
8
Spectrum Analyzers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
161 
8.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
161 
8.2
Windows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
164 
8.3
Resolution Bandwidth . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
166 
8.3.1
Quantifying the Leakage . . . . . . . . . . . . . . . . . . . . . . . . .
166 
8.3.2
Resolution Bandwidth . . . . . . . . . . . . . . . . . . . . . . . . . . .
169 
8.4
Heterodyne Analyzers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
170 
8.5
Solved Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
172

x
Contents
9
Analog Filters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
175 
9.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
175 
9.2
First-Order Filters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
175 
9.2.1
Passive Filters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
175 
9.3
Second-Order Filters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
177 
9.3.1
‘Biquad’ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
177 
9.3.2
Lowpass: b 2  e qua ls  b 1 equals 0 . . . . . . . . . . . . . . . . . . . . . . . . . . .
178 
9.3.3
Bandpass: b 2  e qua ls  b 0 equals 0 . . . . . . . . . . . . . . . . . . . . . . . . . .
179 
9.3.4
Highpass: b 1  e qua ls  b 0 equals 0 . . . . . . . . . . . . . . . . . . . . . . . . . .
180 
9.4
Implementations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
180 
9.4.1
The Double Integral Method . . . . . . . . . . . . . . . . . . . . .
180 
9.4.2
The Sallen–Key Link . . . . . . . . . . . . . . . . . . . . . . . . . . . .
182 
9.4.3
Switched Capacitors . . . . . . . . . . . . . . . . . . . . . . . . . . . .
184 
9.4.4
More About Passive Filters
. . . . . . . . . . . . . . . . . . . . . .
185 
9.4.5
Special Cases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
186 
9.5
Filter Models . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
186 
9.5.1
Butterworth . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
187 
9.5.2
Chebyshev . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
188 
9.5.3
Cauer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
190 
9.6
Filter Transformations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
191 
9.6.1
Lowpass to Lowpass . . . . . . . . . . . . . . . . . . . . . . . . . . . .
192 
9.6.2
Lowpass to Highpass . . . . . . . . . . . . . . . . . . . . . . . . . . . .
193 
9.6.3
Lowpass to Bandpass . . . . . . . . . . . . . . . . . . . . . . . . . . .
193 
9.6.4
Lowpass to Bandstop . . . . . . . . . . . . . . . . . . . . . . . . . . . .
194 
9.7
Time Domain . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
195 
9.7.1
Convolution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
195 
9.8
Solved Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
202 
10 
Digital Filters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
209 
10.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
209 
10.2
FIR Filters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
211 
10.3
IIR Filters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
213 
10.4
Designing Digital Filters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
218 
10.4.1
FIR Filters: The Inverse Fourier Transform 
Method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
218 
10.4.2
IIR Filters: The Bilinear Transformation Method . . . .
220 
10.5
Solved Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
223 
11 
ADCs and Sampling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
229 
11.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
229 
11.2
Sampling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
230 
11.3
Quantization and Quantization Noise . . . . . . . . . . . . . . . . . . . . . . .
230 
11.4
Digital-to-Analog Converters . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
233 
11.5
SAR ADCs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
234 
11.6
Flash ADCs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
236 
11.7
Pipeline ADCs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
236

Contents
xi
11.8
Dual Slope ADCs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
240 
11.8.1
The Integrator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
240 
11.8.2
The Dual Slope Circuit . . . . . . . . . . . . . . . . . . . . . . . . . .
241 
11.9
Level-Crossing ADCs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
244 
11.10 
Equivalent Number of Bits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
247 
11.11 
Oversampling
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
247 
11.11.1 
As a Means to Reduce Noise . . . . . . . . . . . . . . . . . . . . .
247 
11.11.2 
As a Means to Improve Resolution . . . . . . . . . . . . . . . .
250 
11.12 
Dithering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
250 
11.13 
Sigma-Delta ADCs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
253 
11.13.1 
Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
253 
11.13.2 
Theory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
255 
11.14 
Extreme Sampling Rates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
257 
11.14.1 
Interleaved SARs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
258 
11.14.2 
Equivalent-Time Sampling . . . . . . . . . . . . . . . . . . . . . . .
258 
11.15 
Solved Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
260 
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
265 
12 
Time-to-Digital Converters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
267 
12.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
267 
12.2
The Vernier Principle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
270 
12.2.1
Vernier TDC with no Reference Clock . . . . . . . . . . . . .
270 
12.2.2
Vernier TDC with a Reference Clock . . . . . . . . . . . . . .
271 
12.3
Delaylines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
272 
12.4
Time Stretching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
274 
12.5
Solved Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
276 
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
278 
13 
Statistics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
279 
13.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
279 
13.2
Expectation and Variance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
281 
13.3
Unbiased Estimators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
282 
13.4
Interval Estimations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
284 
13.5
The Uniform Distribution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
287 
13.6
Solved Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
288 
14 
Uncertainty Budgets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
291 
14.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
291 
14.2
Signal Models . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
291 
14.3
Uncertainty Budgets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
294 
14.3.1
Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
295 
14.4
‘Guesstimating’ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
299 
14.5
Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
301 
14.6
Solved problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
302 
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
305

xii
Contents
15 
The Lock-In Ampliﬁer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
307 
15.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
307 
15.2
Phase Sensitive Detector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
308 
15.2.1
PSDs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
308 
15.2.2
Analog PSDs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
311 
15.2.3
Multiplying PSDs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
312 
15.3
Phase-Locked Loops . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
313 
15.4
LIAs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
313 
15.5
Solved Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
315 
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
318 
16 
Correlation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
319 
16.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
319 
16.2
Cross-Correlation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
320 
16.2.1
Implementation: Matched Filters . . . . . . . . . . . . . . . . . .
326 
16.3
Auto-Correlation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
327 
16.3.1
Auto-Correlation Applications . . . . . . . . . . . . . . . . . . . .
331 
16.4
Discrete-Time Correlation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
333 
16.4.1
Cross-Correlation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
333 
16.4.2
Auto-Correlation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
335 
16.4.3
Circular Correlation . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
336 
16.5
Solved Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
338 
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
345 
17 
Curve Fitting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
347 
17.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
347 
17.2
The Orthogonality Principle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
349 
17.3
Curve Fitting to Exponential Functions . . . . . . . . . . . . . . . . . . . . .
355 
17.4
MATLAB Tips . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
356 
17.5
Matrix Uncertainties and Pitfalls . . . . . . . . . . . . . . . . . . . . . . . . . .
357 
17.5.1
Error Propagation in Matrices . . . . . . . . . . . . . . . . . . . .
357 
17.5.2
Ill-Conditioned Matrices . . . . . . . . . . . . . . . . . . . . . . . . .
358 
17.6
The Sampling Theorem Revisited
. . . . . . . . . . . . . . . . . . . . . . . . .
360 
17.7
Solved Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
364 
18 
Introduction to Control Theory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
369 
18.1
Control Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
369 
18.2
Feedback Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
371 
18.3
Control Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
373 
18.4
The PI Controller . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
374 
18.5
The PD Controller . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
376 
18.6
The PID Controller . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
377 
18.7
Identifying the System . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
378 
18.7.1
First-Order Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
378 
18.7.2
Second-Order Systems . . . . . . . . . . . . . . . . . . . . . . . . . .
382 
18.8
Finding the Control Parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . .
384

Contents
xiii
18.8.1
Ziegler–Nichol’s Rule of Thumb . . . . . . . . . . . . . . . . . .
384 
18.8.2
Using Phase and Gain Margin Criteria . . . . . . . . . . . . .
385 
18.9
Discretizing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
387 
18.9.1
Euler Transformation
. . . . . . . . . . . . . . . . . . . . . . . . . . .
387 
18.9.2
Bilinear Transformation . . . . . . . . . . . . . . . . . . . . . . . . .
389 
Appendix: Operational Ampliﬁers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
391 
Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
401

Acronyms 
AC
Alternating Current 
ACF
Auto-Correlation Function 
ADC
Analog-to-Digital Converter 
BAG
Bayard–Alpert Gauge 
BIPM
Bureau International de Poids et Mesures 
BNC
Bayonet Neill-Concelman 
CAN
Controller Area Network 
CEM
Channel Electron Multiplier 
CJC
Cold Junction Compensation 
CMRR
Common Mode Rejection Ratio 
CMOS
Complementary Metal Oxide Semiconductor 
CLT
Central Limit Theorem 
CW
Continuous Wave 
DAC
Digital-to-Analog Converter 
DAQ
Data Acquisition 
DC
Direct Current 
dB
decibel 
DCV
Direct Current Voltage meter 
DFT
Discrete Fourier Transform 
DLS
Dynamic Light Scattering 
DMM
Digital Multimeter 
ECG
Electro Cardio Gram 
EM
Electro Magnetic 
EMC
Electromagnetic Compatibility 
emf
electromotive force 
ENOB
Equivalent Number of Bits 
FIR
Finite Impulse Response 
FFT
Fast Fourier Transform 
GUM
Guide to the expression of Uncertainty in Measurement 
HV
High Vacuum 
IA
Instrumentation Ampliﬁer
xv

xvi
Acronyms
iid
independent and identically distributed 
IIR
Inﬁnite Impulse Response 
LIA
Lock-In Ampliﬁer 
LC
Level Crossing 
lm
lumen 
LTI
Linear and Time-Invariant 
LV
Low Vacuum 
LVDT
Linear Variable Differential Transformer 
lx
lux 
MCP
Microchannel Plate 
MEMS
Micro Electro Mechanical Systems 
NIM
Nuclear Instrumentation Module 
NIST
National Institute of Science and Technology 
op amp
Operational ampliﬁer 
OS
Overshoot ratio 
OSR
Oversampling Rate 
pcb
Printed circuit board 
PCS
Photon Correlation Spectroscopy 
PIN
P-doped, Intrinsic, N-doped 
PLL
Phase-locked loop 
PMT
Photomultiplier Tube 
ppm
Parts per million 
PSD
Phase-Sensitive Detector 
PSD
Position-Sensitive Detector 
PTAT
Proportional To Absolute Temperature 
PWM
Pulse Width Modulation 
RBW
Resolution Bandwidth 
rms
root mean square 
RTD
Resistance Temperature Detector 
S&H
Sample and Hold 
SAR
Successive Approximation Register
∑∆
Sigma Delta 
SNR
Signal-to-Noise Ratio 
SoC
Start of Conversion 
TDC
Time-to-Digital Converter 
TDR
Time Domain Reﬂectometry 
TP
Twisted-Pair 
TTL
Transistor–Transistor Logic 
UAF
Universal Active Filter 
VLSI
Very Large-Scale Integration 
VM
Voltage Meter

Chapter 1 
Introduction 
Abstract This chapter describes some basic concepts like common and normal 
mode voltages, common mode rejection ratio, and signal-to-noise ratio. The dB 
unit is deﬁned, differential- and single-ended signals and rise and fall times versus 
bandwidth are discussed. Finally, the propagation of a signal through a measurement 
system is considered and each component’s inﬂuence on the signal is highlighted. 
1.1 
Electrical Measurement Systems 
A successful ‘measurement’ depends on a long chain of components and their inter-
actions. It typically starts with a ‘sensor’ that converts some physical quantity (like 
temperature, acceleration, sound, etc.) to an electrical quantity (like voltage, current, 
resistance, etc.). After the sensor comes the ‘signal conditioning’. The signal condi-
tioning processes the ‘raw’ sensor signal in hardware (mostly analog). The signal 
conditioning electronics’ job is to convert the sensor signal to a ‘standard format’, like 
0 –  + 5 V or 4–20 mA. This usually includes both passive (resistors and capacitors) 
and active (operational ampliﬁers) components. 
Next, for several reasons, the signal-conditioned signal is ‘ﬁltered’. The main 
reasons are to a) suppress unwanted interferences (see Chap. 2) and b) to prevent 
‘aliasing’ in sampling systems (see Chaps. 7 and 9). After the ﬁlter, the signal 
is ‘sampled’ by an ‘analog-to-digital converter’ (see Chap. 11); this is where the 
signal is ‘digitized’, i.e., transferred to the system computer. From here on, all 
signal processing is ‘digital’ (as in ‘computer algorithms’). Digital signal processing 
includes digital ﬁlters (Chap. 10), spectral analysis (Chap. 8), and correlation 
(Chap. 16). You also need to know some ‘post-processing’ techniques (non-real 
time), such as uncertainty analysis and conﬁdence interval estimations (Chap. 14), 
and curve ﬁtting (Chap. 17). 
Throughout the entire ‘chain’, from the sensor to the computer sampling, the 
signal is exposed to ‘noise’, and it is important that you know a) where it comes 
from, i.e., the most common noise sources (see Chap. 2) and how to protect your 
measurement signal from the most common noise sources (see Chaps 2, 5, and 6).
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_1 
1

2
1
Introduction
Before we get into the details of the different measurement chain components, 
we need to deﬁne some basic concepts to make sure we have the right vocabulary. 
1.2 
Common and Normal Mode 
Voltages (and currents too) can be in either ‘common’ or ‘normal’ mode. To under-
stand the difference, we should probably use ‘potentials’ rather than ‘voltages’; 
voltage is a difference in potential. If we measure the voltage across a pair of conduc-
tors, the ‘normal mode’ voltage is the potential difference between the conductors, 
and the ‘common mode’ voltage is the potential that is ‘common’ on both conductors. 
This is illustrated in Fig. 1.1. 
A better name for the ‘normal mode’ voltage would be ‘differential mode’, which 
is indeed used in some contexts, but ‘normal mode’ seems to be the most used name. 
In a typical measurement, we measure the normal mode voltage, with a voltage 
meter, and if the voltage meter (VM) is ‘perfect’ it will measure only the potential 
difference, i.e., the normal mode voltage. The voltage meter subtracts the potential 
on one wire from the other. 
uppe r U Su bscript VM Basel ine e
quals left parenthesis u 0 plus u 1 right parenthesis minus u 0 equals u 1 equals u Subscript nm
However, subtractions in electronics are never perfect and in a non-perfect voltage 
meter, there will be a ‘cm residual’ in UVM: 
uppe r U Su bscrip t VM 
Baseline equals u Subscript nm Baseline plus upper F Subscript cm Baseline dot u Subscript cm
Fcm is the ‘common mode suppression number’ and is an important parameter for 
any voltage meter; the lower the better is the voltage meter (and the more expensive 
it is). Manufacturers don’t specify the Fcm number though, they specify the CMRR,
Fig. 1.1 Signal model 

1.4 Decibel Units
3
the Common Mode Rejection Ratio of the voltage meter. CMRR is deﬁned as 
CMRR equals 2 0 log StartFraction 1 Over upper F Subscript cm Baseline EndFraction dB
CMR
 e
quals 20 log StartFraction 1 Over upper F Subscript cm Baseline EndFraction dB
A ‘good’ desktop DMM (digital multimeter) has a CMRR of 140 dB (for example, 
Keysight model 34461A), but this number typically drops rapidly with frequency; the 
‘AC’ CMRR for the 34461A model is 70 dB. A ‘good’ handheld DMM has a typical 
CMRR of 120 dB (for example, Fluke 179). Finally, even if the CMRR decreases 
with frequency, they are almost always designed to suppress the power line frequency 
(50/60 Hz), because that is where the common mode noise comes from in most cases; 
for 50/60 Hz, the CMRR is usually as good as the DC suppression. 
1.3 
Signal-To-Noise Ratio 
In the general case, the measurement signal will always be a complex of ‘signal’ 
and ‘noise’, or the ‘good’ part and the ‘bad’ part. The noise is what will prevent us 
from measuring our quantity with perfect (inﬁnite) accuracy, the more noise, the less 
accuracy. Actually, we can live with a lot of noise if we also have a lot of ‘signal’; 
it is the magnitude of the noise compared to the signal level that is the interesting 
number. We quantify the ‘signal situation’ with the ‘signal-to-noise’ ratio: 
SNR equals 20 log S tartFraction signal rms Over noise rms EndFraction dB
SNR eq uals  2
0 log StartFraction signal rms Over noise rms EndFraction dB
In Eq. (1.4), it is usually understood that it is the ‘normal mode’ noise we mean; 
if we refer to the common mode noise, we will specify that explicitly. 
1.4 
Decibel Units 
Equation (1.4), the ‘dB’ unit is really ‘dimensionless’; it is a logarithmic measure 
of a relation between two voltages. However, the dB unit is also sometimes used 
to express absolute voltages. For example, 1 dBm corresponds to the voltage that 
develops exactly 1 mW in a resistor R. R is usually, but not necessarily, a 50 Ω
resistor. Since P = U·I = U2/R, we have that 
1  m W eq uals StartFraction upper U squared Over 50 EndFraction right double arrow upper U equals StartRoot 0.05 EndRoot equals 0.2236 upper V
1 m W eq uals StartFraction upper U squared Over 50 EndFraction right double arrow upper U equals StartRoot 0.05 EndRoot equals 0.2236 upper V
√
1 mW equals St a
rtFraction upper U squared Over 50 EndFraction right double arrow upper U equals StartRoot 0.05 EndRoot equals 0.2236 upper V
Hence, 5 V equals 20·log(5/0.2236) = 27 dBm. Sometimes, you also see the 
‘dbV’ unit. The dBV unit relates the voltage to 1.00 V.

4
1
Introduction
Fig. 1.2 a A differential-ended signal. b A single-ended signal 
1.5 
Differential-Ended Versus Single-Ended 
In electrical measurement laboratories, the terms ‘differential-ended’ and ‘single-
ended’ signals are used regularly. A ‘differential-ended’ signal has two wires and 
none of them are ground. The signal is delivered as a potential difference between 
two wires, see Fig. 1.2a. A differential-ended signal is also sometimes called ‘non-
referenced’. 
A ‘single-ended’ signal, on the other hand, is a single wire; it is understood that 
the signal is the potential on this wire relative ground. 
1.6 
Signals 
1.6.1 
Risetime and Falltime 
We have already used the term ‘signal’ repeatedly, but we have not yet properly 
deﬁned it. A ‘signal’ could be a lot of things, but in this context, it will be understood 
to be a variation of voltage in time. An AC voltage if you like, but ‘AC signals’ are 
generally interpreted as sinusoidal voltages and our scope of signals is much wider 
here. 
One of the most basic properties of a signal (and one of the most important ones 
to us), is its risetime. A signal’s risetime is deﬁned as the time it takes for the signal to 
go from 10 to 90% of its maximum voltage. Correspondingly, the falltime is deﬁned 
as the time it takes to go from 90 to 10% of the maximum (Fig. 1.3). 
Fig. 1.3 Risetime and falltime

1.7 Systems
5
If only the risetime is speciﬁed, you may assume that the falltime equals the 
risetime. 
1.6.2 
Bandwidth 
So why is the risetime of a signal so important? It is important because, from the 
signal’s risetime, we can calculate its bandwidth. We will talk a lot  about frequen-
cies in this book (for both signals and systems) and knowing a signal’s bandwidth 
is paramount for how you design your ‘measurement chain’. We will deﬁne ‘band-
width’ properly later (for both signals and systems), but for now, we settle with the 
following deﬁnition: A ‘signal’ is in the general case ‘complex’, it consists of several 
components, where a ‘component’ is understood to be a sinusoidal signal. A signal is 
in general a sum of a lot of sines, and the signal’s bandwidth is simply the frequency 
of the sinusoidal with the highest frequency. 
There is a simple relationship between a signal’s bandwidth and risetime: 
up per B equals StartFraction 0.35 Over t Subscript rise Baseline EndFraction
upper 
B equals StartFraction 0.35 Over t Subscript rise Baseline EndFraction
We don’t derive that expression here (but it is just straightforward electricity 
calculus). 
1.7 
Systems 
You can’t talk about ‘signals’ without also talking about systems. A ‘system’ is 
anything that the signal passes through in the measurement chain. ‘Systems’ are 
not only ampliﬁers and ﬁlters but also include the transmission lines and the instru-
ments. All systems are typically speciﬁed by their bandwidth, and it is important 
to understand what impact each system has on the signal. Filters and ampliﬁers are 
designed to have a speciﬁc impact on the signal, but transmission lines and instru-
ments should ideally have no impact on the signal. However, ‘no impact’ implies 
inﬁnite bandwidth, and we never have that. 
If the system’s bandwidth is < ∞ (which it always is), it will slow down the 
signal. ‘Slow down’ as in ‘the signal’s rise time will increase’ for each system it 
passes. When a signal propagates through a measurement chain, it is slowed down 
by the chain components, and risetimes are added in squares. Figure 1.4 illustrates 
a signal chain.
First, we get each system’s risetime from their bandwidth (use Eq. (1.6)) and then 
we add the squares: 
t S
ubscript rise 
comma ou t Sup
er scrip
t 2 Bas
el ine e
q
uals t Subscript rise comma in Superscript 2 Baseline plus t 1 squared plus t 2 squared plus t 3 squared plus t 4 squared

6
1
Introduction
Fig. 1.4 Measurement chain: Risetime propagation
where tn = 0.35/Bn. In the general case, 
t Subscrip t rise comma out Baseline equals StartRoot t Subscript rise comma in Superscript 2 Baseline plus sigma summation Underscript i Endscripts left parenthesis StartFraction 0.35 Over upper B Subscript i Baseline EndFraction right parenthesis squared EndRoot
 
|
|
|t S
ubscript  
r
i
se comma out Baseline equals StartRoot t Subscript rise comma in Superscript 2 Baseline plus sigma summation Underscript i Endscripts left parenthesis StartFraction 0.35 Over upper B Subscript i Baseline EndFraction right parenthesis squared EndRoot
t 
Sub
script rise comma out Baseline equals StartRoot t Subscript rise comma in Superscript 2 Baseline plus sigma summation Underscript i Endscripts left parenthesis StartFraction 0.35 Over upper B Subscript i Baseline EndFraction right parenthesis squared EndRoot
1.8 
Solved Problems 
Problem 1.1 The voltage meter in Fig. 1.5 is a 6½ digit DMM with a CMRR of 
130 dB. (a) What voltage will the voltage meter display? (b) How much of this 
voltage is due to the NM and CM parts, respectively? 
Solution (a) In Fig. 1.5, we have a common mode voltage of 30.43916 V and a 
normal mode voltage of 30.47325–30.43916 = 0.03409 V. A CMRR of 130 dB is 
translated to a CM suppression of 10 Supersc ript neg ative 130 divided by 20 Baseline equals 3.162 dot 10 Superscript negative 7. 
The voltage meter will measure 
up er U Subscri pt m Bas eline e quals 0.034 0900 plus 3. 162 dot 10 Sup erscript negative 7 Baseline dot 30.43916 equals 0.0340900 plus 0.000009625 equals
equals 0.03409 9625 volts
But the question was: ‘What voltage will the voltage meter display?’. We have a 
6½ digit DMM; the range will be 100 mV, so the display will show 034.0996 mV. 
(A ‘½ digit’ means that the ﬁrst digit (the most signiﬁcant digit) can only be ‘0’ or 
‘1’. In our example, it must be ‘0’, since we use the 100-mV range). 
(b) Of the 34.0996 mV on the display, 0.009625/34.09966 = 0.03% is due to the 
CM residual.
Fig. 1.5 DC voltage 
measurement 

1.8 Solved Problems
7
Fig. 1.6 Our standard problem; a sine with noise 
Problem 1.2 Figure 1.6 illustrates a problem that we will treat repeatedly in this 
book: A sinusoidal signal with ‘white’ noise. In Fig. 1.6, the amplitude of the sine 
is 1 V and the white noise is ‘gaussian’ with a zero mean and a variance of 0.01 V2. 
What is the signal-to-noise ratio in this signal? 
Solution A sine with amplitude A volts has an rms voltage of upper A divided by StartRoot 2 EndRoot
√
upper A divided by StartRoot 2 EndRoot, and the rms of 
Gaussian (‘normal’) noise is the square root of the variance: 
SNR equals 2 0 log StartFraction 1 divided by StartRoot 2 EndRoot Over StartRoot 0.01 EndRoot EndFraction equals 17 dB
√
SNR equals 20 log StartFraction 1 divided by StartRoot 2 EndRoot Over StartRoot 0.01 EndRoot EndFraction equals 17 dB
√
SNR e
quals  20 log StartFraction 1 divided by StartRoot 2 EndRoot Over StartRoot 0.01 EndRoot EndFraction equals 17 dB
Problem 1.3 Convert the voltages 30 dBm and 15 dBV to voltages [V]. 
Solution In the dBm case, we assume that a 50 Ω resistor is used as reference: 
up per U equ als 0.2236  dot 10  Superscript 30 divided by 20 Baseline equals ModifyingBelow 7.07 upper V With quotation dash
15 dBV corresponds to 
15 equals 20 log StartFraction upper U Over 1 EndFraction right double arrow upper U equals 10 Superscript 15 divided by 20 Baseline equals ModifyingBelow 5.62 upper V With quotation dash
15  equ als 20 log  StartF raction upper U Over 1 EndFraction right double arrow upper U equals 10 Superscript 15 divided by 20 Baseline equals ModifyingBelow 5.62 upper V With quotation dash
Problem 1.4 Figure 1.7 illustrates a ‘perfect’ square signal (risetime = 0). What 
would it look like on a 100 MHz oscilloscope? 
Solution The scope will ‘slow down’ the signal with 0.35/0.1 ns = 3.5 ns (Fig. 1.8).
If the input signal has risetime 0 s, we will only see the scope’s ‘reaction time’ on 
the screen.
Fig. 1.7 A ‘perfect’ 25 MHz square wave 

8
1
Introduction
Fig. 1.8 The oscilloscope 
slows down the signal
3.5 ns
3.5 ns 
20 ns 
Problem 1.5 In an experiment, the signal risetime is expected to be approximately 
5 ns. What bandwidth does the oscilloscope need not to have any signiﬁcant impact 
on the result? 
Solution First, we need to deﬁne exactly what we mean by ‘signiﬁcant impact’. 
The exact deﬁnition depends on the circumstances; here we require that the scope’s 
contribution to the total risetime must be less than 10%; tout ≤ 5.5 ns: 
5.5 s quare d equ
als 5 squared p lus t  S ubscript scope Superscript 2 Baseline right double arrow t Subscript scope Baseline equals 2.3 ns equals StartFraction 0.35 Over upper B EndFraction right double arrow upper B equals 152 MHz
5.
5 sq uared equals 5 squared plus t Subscript scope Superscript 2 Baseline right double arrow t Subscript scope Baseline equals 2.3 ns equals StartFraction 0.35 Over upper B EndFraction right double arrow upper B equals 152 MHz
The oscilloscope needs a bandwidth of at least 150 MHz.

Chapter 2 
Noise: Sources and Remedies 
Abstract This chapter illustrates how noise can couple to a measurement system 
in different ways and how noise can be prevented from entering the measurement 
system by de-coupling techniques. Noise sources are described, different kinds of 
crosstalk are discussed, and the importance of grounding and shielding is highlighted. 
This chapter also explains why Faraday cages are used and the advantages of coax 
cables and twisted-pair cables. 
2.1 
Introduction 
Noise is omnipresent in all measurements. It may or may not be a problem; it may be 
too small compared to other sources of uncertainty to have any signiﬁcant impact on 
the result, or it may have a frequency that is outside the measurement signal’s band-
width. However, in the general case, noise is signiﬁcant in the signal’s bandwidth, 
and we must ‘deal with it’. The ﬁrst action should not be to apply signal processing 
(in hardware or software), the ﬁrst action is to try to prevent the noise from entering 
the system. To prevent noise from entering the system, we must understand how 
it got there in the ﬁrst place. Three conditions must be fulﬁlled for noise to be a 
problem in a measurement system: (a) There must be a noise source, (b) there must 
be a coupling between the noise source and the system, and (c) the noise frequency 
must be within the signal’s bandwidth. 
Obviously, the ﬁrst action should be to try to identify the noise source; if we can 
identify it, maybe we can eliminate it. For example, the signal wire might just be too 
close to some unshielded, high-frequency power cable (like the spark plug cable in 
a car); rearranging the setup may be all we need to do. In other situations, we can 
identify the source, but we can’t do anything about it (like the 50/60 Hz interference 
from the local power line). 
In such cases, where we can’t do anything about the source (or may not even be 
able to identify it), we are left with the only option of trying to break the coupling 
between the source and the system. To do that, we need to understand how noise 
couples to our system and that can only be done in a handful of ways.
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_2 
9

10
2
Noise: Sources and Remedies
However, some noise cannot be ‘de-coupled’ since it is ‘internal’, it is generated 
by the system itself and that noise we will have to learn to live with. There are some 
things we can do to reduce it, but we will always have some internal noise. We will 
look at the internal noise ﬁrst. 
2.2 
Internal Noise 
2.2.1 
Johnson Noise 
Johnson noise is an omnipresent source of noise. It is a natural phenomenon that was 
ﬁrst described by John B. Johnson at Bell Labs in 1926. Johnson noise is ‘bandlimited 
white noise’ that originates in ‘anything with an ohm-resistance’. The rms of the white 
noise is 
u Sub script rms Baseline equals StartRoot 4 normal pi k upper R upper T upper B EndRoot
√
u Subs
cript rms Baseline equals StartRoot 4 normal pi k upper R upper T upper B EndRoot
where k is Boltzmann’s constant (1.38·10−23 J/V), R is the resistance, T is the 
temperature (in Kelvin), and B is the bandwidth of the instrument (Fig. 2.1). 
From Eq. (2.1), we can see that we can reduce the Johnson noise in three different 
ways; (a) it depends on temperature so cooling the system will reduce the noise, (b) it 
depends on the resistance which implies that we shouldn’t use excessive impedances 
unless necessary. We learned in basic electricity that ‘good’ voltage meters should 
have a high input impedance. Well, Eq. (2.1) contradicts that; high input impedances 
increase the white Johnson noise. 
And (c), we can limit the instrument’s bandwidth. For that reason, high-bandwidth 
instruments, like oscilloscopes, almost always have a ‘bandwidth-limiting’ option, 
see Fig. 2.2. Intuitively, a ‘high-bandwidth instrument’ sounds good, but keep in 
mind that the Johnson noise increases with the bandwidth.
We can re-write Eq. (2.1) as  
u Sub script rms Baseline equals StartRoot 4 normal pi k upper R upper T EndRoot dot StartRoot upper B EndRoot equals alpha StartRoot upper B EndRoot right double arrow alpha equals StartFraction u Subscript rms Baseline Over StartRoot upper B EndRoot EndFraction left bracket StartFraction normal upper V Over StartRoot Hz EndRoot EndFraction right bracket
√
u Subs cript rms Baseline equals StartRoot 4 normal pi k upper R upper T EndRoot dot StartRoot upper B EndRoot equals alpha StartRoot upper B EndRoot right double arrow alpha equals StartFraction u Subscript rms Baseline Over StartRoot upper B EndRoot EndFraction left bracket StartFraction normal upper V Over StartRoot Hz EndRoot EndFraction right bracket
√
u Subscript rms Baseline equals StartRoot 4 normal pi k upper R upper T EndRoot dot StartRoot upper B EndRoot equals alpha StartRoot upper B EndRoot right double arrow alpha equals StartFraction u Subscript rms Baseline Over StartRoot upper B EndRoot EndFraction left bracket StartFraction normal upper V Over StartRoot Hz EndRoot EndFraction right bracket
√
u Subscript rms Baseline equals StartRoot 4 normal pi k upper R upper T EndRoot dot StartRoot upper B EndRoot equals alpha StartRoot upper B EndRoot right double arrow alpha equals StartFraction u Subscript rms Baseline Over StartRoot upper B EndRoot EndFraction left bracket StartFraction normal upper V Over StartRoot Hz EndRoot EndFraction right bracket
√
u
 Subscript rms Baseline equals StartRoot 4 normal pi k upper R upper T EndRoot dot StartRoot upper B EndRoot equals alpha StartRoot upper B EndRoot right double arrow alpha equals StartFraction u Subscript rms Baseline Over StartRoot upper B EndRoot EndFraction left bracket StartFraction normal upper V Over StartRoot Hz EndRoot EndFraction right bracket
√
u 
S
ubscript rms Baseline equals StartRoot 4 normal pi k upper R upper T EndRoot dot StartRoot upper B EndRoot equals alpha StartRoot upper B EndRoot right double arrow alpha equals StartFraction u Subscript rms Baseline Over StartRoot upper B EndRoot EndFraction left bracket StartFraction normal upper V Over StartRoot Hz EndRoot EndFraction right bracket
Fig. 2.1 Johnson noise is 
omnipresent wherever we 
have a resistance 
R
ACV 

2.2 Internal Noise
11
Fig. 2.2 The Johnson noise in an oscilloscope (open input) for 20 MHz bandwidth (top) and 
200 MHz bandwidth (bottom). (The offset for the 20 MHz waveform was added in MATLAB)
where α is the noise factor. Manufacturers of sensors and ampliﬁers always specify 
the noise factor. They can’t know the bandwidth of your application, so the noise 
factor is all they provide. The end user must multiply the noise factor with the square 
root of the measurement system’s bandwidth to estimate the noise in the sensor/ 
ampliﬁer. So, whenever you see a number with the unit V Hz−1/2, you must multiply 
with the square root of your bandwidth. 
2.2.2 
Shot Noise 
Another kind of noise is the shot noise that appears in low-current measurements, 
nA or less. Shot noise is caused by the fact that current involves the transportation 
of electrons which have a quantized charge (1.6·10−19 As) and shot noise is simply 
random variations of the charge density. Just like the Johnson noise, the shot noise 
increases with the bandwidth of the instrument. 
2.2.3 
1/f-Noise 
1/f-noise (or ‘ﬂicker noise’) is a strange phenomenon that we really don’t know 
where it comes from. It decreases with frequency (as 1/f ) and has been observed 
in applications far from electronic systems, such as music, biology, and economics 
[1]. One of its most characteristic properties is that the noise power per decade is 
constant: There is as much noise power in the interval 10–100 Hz as in the interval 
10–100 MHz. Obviously, this noise will only be a problem when you measure low 
voltages (sub-μV) at low frequencies. Because it is dominated by low frequencies, 
it is sometimes called ‘pink noise’ (as in ‘red-shifted’).

12
2
Noise: Sources and Remedies
2.2.4 
Quantization Noise 
Since our measurement data is (usually) sampled by a computer, the samples must 
be ‘quantized’ and there is always some information loss in the quantization process. 
This noise is called ‘quantization noise’ and depends on the quantizer’s resolution. 
We will treat quantization noise in detail in Chap. 11. 
2.3 
Coupling By Radiation 
2.3.1 
Electric Dipole Antennas 
An electromagnetic ﬁeld propagating in the z direction, emits an electric and magnetic 
ﬁeld in the x and y directions, respectively, both perpendicular to the direction of 
propagation. For now, we focus on the electric ﬁeld only, see Fig. 2.3. 
In Fig. 2.4, we have placed an electric dipole antenna in the electric ﬁeld, oriented 
so that it points in the direction of the E-ﬁeld variation.
In Fig. 2.4, the E-ﬁeld direction points upwards, and hence the electrons in the 
antenna conductor are driven downwards; there will be an accumulation of negative 
charges at the bottom end of the antenna and a lack of negative charges at the top 
end. Also, the charge transportation will be registered as a short current transient by 
the amp meter. 
Figure 2.5 illustrates the same dipole antenna a moment later, when the E-ﬁeld 
over the antenna points in the other direction. The electrons will be driven to the other 
end of the antenna and the amp meter will again register a short current transient, 
now with the opposite sign.
Fig. 2.3 A propagating electromagnetic wave emits an electric ﬁeld 

2.3 Coupling By Radiation
13
Fig. 2.4 An electric dipole 
antenna along the E-ﬁeld 
direction
Fig. 2.5 The E-ﬁeld moves 
the electrons back and forth 
in the antenna 
We can see that this will repeat as long as the wave exists; the propagating elec-
tromagnetic wave will induce an AC current in the dipole antenna with a frequency 
that depends on the wavelength λ of the wave: f = c0/λ. We get a maximum current 
in the antenna if the length of the antenna is λ/2. 
However, our objective here is not to design antennas, but to understand how noise 
can couple to our measurement system. From Figs. 2.4 and 2.5, we can see how the 
presence of an electric ﬁeld could induce a current in one of our signal wires in the 
system. Figure 2.6a–g illustrate how an AC current in one wire (‘transmitter’) emits 
an electric ﬁeld and how it is picked up by an adjacent wire (‘receiver’). This is an 
example of crosstalk by E-radiation.
The remedy could be quite simple; from Figs. 2.4, 2.5, and 2.6, we can see that 
for a current to be induced, the receiver ‘antenna’ (our signal wire) must be aligned 
with the E ﬁeld direction. Hence, rearranging the signal transmission wires might 
help (unless there are multiple and multidirectional sources).

14
2
Noise: Sources and Remedies
Fig. 2.6 a At t = 0, the AC current ‘peaks’. b At t = T/8, E-ﬁeld has not reached the receiver. 
c E-ﬁeld is sinusoidal. d At t = 3 T/8, the ﬁeld reaches the receiver. e E-ﬁeld decreases at receiver. 
f E-ﬁeld is zero at receiver. g E-ﬁeld is reversed. h The negative E-ﬁeld peak

2.3 Coupling By Radiation
15
Secondly, we should also realize that this may not be a signiﬁcant problem at 
all. The wave frequency must also match the wire length (λ/2) for any signiﬁcant 
currents to be induced. For ‘centimeter cables’ that indicates GHz frequencies which 
is outside the bandwidth of most measurement systems (see Problem 2.1). If you 
have transmission cables ‘tens of meters’ long, the matching frequency could very 
well be within your system’s bandwidth (the longer the cable, the more likely it is 
that it will pick up a frequency that interferes with your system). 
When the frequency/wire length relation is ‘right’ and rearranging the transmis-
sion lines doesn’t help (or is not possible), you need to prevent the electric ﬁeld from 
interacting with your transmission line in the ﬁrst place. How do you do that? The 
answer is a Faraday cage. 
The Faraday cage was invented by Michael Faraday in 1836 to prove his hypothesis 
that there is no electric ﬁeld inside a closed metal surface. The reason is that the 
electric ﬁeld will redistribute the surface charge to produce an electric ﬁeld in the 
opposite direction, canceling the ﬁeld inside the surface. This is illustrated in Fig. 2.7. 
Hence, we can protect our signal wire by an enclosing, conducting shield. The 
shield doesn’t have to be perfect; it can be a grid. The general rule is that the grid 
holes’ diameter should be < one-tenth of the wavelength of the radiation it is intended 
to block. For example, to block radiation from a 5G cell phone, operating at 39 GHz, 
a grid size of less than 1 mm is required. (On the other hand, 39 GHz is most likely 
outside your measurement system’s bandwidth.)
Fig. 2.7 a An external E-ﬁeld will redistribute the charge on the surface. b An E-ﬁeld in the opposite 
direction is created that cancels the ﬁeld inside 

16
2
Noise: Sources and Remedies
Fig. 2.8 A coax cable is a 
Faraday cage 
RG-58 
PVC jacket
Copper braid 
Polyethylene insulator 
Center conductor 
Fig. 2.9 Coax cables have 
BNC connectors 
BNC connector 
Coax cable 
This is also one of the reasons why we use coax cables in the lab. Coax cables 
have a surrounding copper braid that forms a Faraday cage for the center conductor. 
A lot of instruments also have a metal casing to block E-ﬁeld interferences. 
Notice a few details about the Faraday cage. First, it is easily breached; all it 
takes is that you penetrate it with a conducting wire, which of course could be a 
problem in an electrical measurement system. The general rule is that the entire 
system should be in a cage, all the way from the sensor to the sampling computer 
interface (see Fig. 2.35). That is why coax cables have a BNC connector (Bayonet 
Neill-Concelman) to make sure that nothing leaks in (or out!) (Fig. 2.8 and 2.9). 
Second, it doesn’t need to be grounded for the shielding to work. (However, due 
to other noise sources, we will later ﬁnd a reason to ground it anyway). 
2.3.2 
Magnetic Dipole Antennas 
Figure 2.10 illustrates a magnetic dipole antenna; a magnetic dipole is a circuit loop.
According to Faraday’s law, an electromotive force, emf, will be induced across 
the loop ends if there is a change in the magnetic ﬂux Φ = B·A, through the loop 
area: 
StartAbsoluteValue epsilon EndAbsoluteValue equals StartFraction d upper Phi Over d t EndFraction equals upper A dot StartFraction d upper B Over d t EndFraction
Sta rtAb sol u teValue epsilon EndAbsoluteValue equals StartFraction d upper Phi Over d t EndFraction equals upper A dot StartFraction d upper B Over d t EndFraction
Sta
rtAbsoluteValue epsilon EndAbsoluteValue equals StartFraction d upper Phi Over d t EndFraction equals upper A dot StartFraction d upper B Over d t EndFraction
The polarity of the emf is given by Lenz’s law: The polarity is such that it creates 
a magnetic ﬁeld that opposes the change of ﬂux. What is important for us, and 
our electrical measurement system, is that a change in the magnetic ﬁeld induces a 
voltage across the ends of an open circuit (and a current in a closed loop) which will 
add to our measurement signal. Just like an electromagnetic wave carries an electric

2.3 Coupling By Radiation
17
Fig. 2.10 Magnetic dipole 
antenna
ﬁeld, it also carries a magnetic ﬁeld. Figure 2.11 illustrates the magnetic ﬁeld of the 
electromagnetic wave in Fig. 2.3. 
Figure 2.12a and b illustrate how this ﬁeld can induce an interference in a circuit. 
Magnetic ﬁelds cannot be blocked by a Faraday cage unless it is made of ‘mu-
metal’ which is a nickel–iron ferromagnetic alloy. Mu-metal shields are expensive 
and usually not your ﬁrst option.
Apart from electromagnetic waves in space, there are other sources of magnetic 
ﬁelds. Figure 2.13 illustrates the magnetic ﬁeld around a current conducting wire.
Fig. 2.11 A propagating electromagnetic wave also emits a magnetic ﬁeld 

18
2
Noise: Sources and Remedies
Fig. 2.12 a An opposing 
current is induced. b An 
opposing current is induced
The B-ﬁeld varies with the current and the distance x from the wire as 
upper B left parenthesis t right parenthesis equals StartFraction normal mu 0 upper I left parenthesis t right parenthesis Over 2 normal pi x EndFraction
uppe
r B left parenthesis t right parenthesis equals StartFraction normal mu 0 upper I left parenthesis t right parenthesis Over 2 normal pi x EndFraction
Figure 2.14 illustrates how this could generate crosstalk by B-ﬁeld radiation.
Also, in this case, we can see that the interference depends on the geometric 
setup; the circuit must be perpendicular to the B ﬁeld to induce a current in the loop 
and therefore, rearranging the loop might help. If that doesn’t help, and assuming we

2.3 Coupling By Radiation
19
Fig. 2.13 Magnetic ﬁeld around a current conductor
Fig. 2.14 Magnetic ﬁeld crosstalk
can’t afford a mu-metal shield, we need another solution. The solution is in Eq. (2.3): 
If we can’t make dB/dt = 0, we can try to make A = 0. That is what we do when we 
use a twisted pair cable (TP cable), see Fig. 2.15.
In a TP cable, not only do we make the loop area ≈0, if there are any remaining 
areas they will cancel each other, since the induced current in two adjacent loops will 
have opposite direction. A TP cable is a very efﬁcient way to protect your signal wire 
from B-ﬁeld interferences. NB. If you also place the TP cable close to the ground 
plane, you also cancel potential common mode interferences induced by the magnetic 
ﬁeld.

20
2
Noise: Sources and Remedies
Fig. 2.15 A twisted-pair cable cancels the B-ﬁeld interferences
2.4 
Capacitive Crosstalk 
Capacitive crosstalk occurs because of the capacitance between conducting surfaces. 
First, between two conducting wires with diameter d and a distance D apart, there is 
a capacitance C12 (per unit length) (Fig. 2.16): 
uppe r
 C 12 equals StartStartFraction normal pi normal epsilon 0 OverOver ln left parenthesis StartFraction 2 upper D Over d EndFraction right parenthesis EndEndFraction left bracket upper F m Superscript negative 1 Baseline right bracket
up
p er C 12 equals StartStartFraction normal pi normal epsilon 0 OverOver ln left parenthesis StartFraction 2 upper D Over d EndFraction right parenthesis EndEndFraction left bracket upper F m Superscript negative 1 Baseline right bracket
u
pp
e r C 
12 equals StartStartFraction normal pi normal epsilon 0 OverOver ln left parenthesis StartFraction 2 upper D Over d EndFraction right parenthesis EndEndFraction left bracket upper F m Superscript negative 1 Baseline right bracket
There is also a capacitance between the center wire and its metallic shield (see 
Fig. 2.17): 
upper  C  Subscript cyl Baseline equals StartFraction 2 normal pi normal epsilon 0 normal epsilon Subscript r Baseline Over ln left parenthesis upper R divided by r right parenthesis EndFraction left bracket upper F m Superscript negative 1 Baseline right bracket
upper C 
S
u bscr
ipt cyl Baseline equals StartFraction 2 normal pi normal epsilon 0 normal epsilon Subscript r Baseline Over ln left parenthesis upper R divided by r right parenthesis EndFraction left bracket upper F m Superscript negative 1 Baseline right bracket
In Eq. (2.6), r is the radius of the center wire, R is the radius of the cylinder shield 
and εr is the dielectricity constant for the material between the shield and the center 
wire (usually polyethylene in the coax case, see Fig. 2.8). 
To see how this enables crosstalk, we ﬁrst place two unshielded wires next to 
each other, see Fig. 2.18. According to Eq. (2.5), there is a capacitance between the 
wires and hence an AC current in Wire 1 has a way into Wire 2. This will cause an 
interfering voltage across the load impedance in Wire 2. Figure 2.19 illustrates the 
equivalent circuit.
To remedy the capacitive crosstalk, we ﬁrst apply a Faraday shield, see Fig. 2.20. 
However, according to Eq. (2.6), there is also a capacitance between the wire and the
Fig. 2.16 Two conductors 
are a capacitance 

2.4 Capacitive Crosstalk
21
Fig. 2.17 Capacitance 
between shield and center 
wire
Ccyl
2r
2R 
Fig. 2.18 Capacitive 
crosstalk 
1
2 
C12 
u(t) 
Z 
Fig. 2.19 Signal model of 
capacitive crosstalk
u(t)
Z 
C12
shield, so the only thing we accomplish is an extra capacitor in series, see Fig. 2.21; 
the current in Wire 1 can still ﬁnd a way into Wire 2.
So, a Faraday cage does not protect your system from capacitive crosstalk (only 
against E-ﬁeld crosstalk). The trick that enables the shield to protect your system 
also against capacitive crosstalk is to ground the shield, see Fig. 2.22.

22
2
Noise: Sources and Remedies
Fig. 2.20 A Faraday cage 
doesn’t help 
Fig. 2.21 Crosstalk path is 
still open
Fig. 2.22 Ground the 
shield! 
The shield surface is the mid-point between the capacitors in Fig. 2.21 and by 
grounding the shield, currents from Wire 1 trying to ‘sneak in’ to Wire 2 are effectively 
short-circuited to ground, see Fig. 2.23.
Finally, please note that capacitive crosstalk is a high-frequency problem; the 
impedance of a capacitor is 1 slash j omega upper C, it decreases with frequency and hence high-
frequency signals have an easier way into the neighbor wire than low-frequency

2.5 Inductive Crosstalk
23
Fig. 2.23 Grounding the 
shield will short-circuit the 
crosstalk path
signals. As a matter of fact, this is true for most crosstalks; the problem increases 
with frequency. 
2.5 
Inductive Crosstalk 
Capacitive crosstalk is based on the existence of a capacitance between two 
conducting surfaces. Inductive crosstalk is based on the fact that every conducting 
wire has a certain, non-zero, inductance per length unit, see Fig. 2.24. For example, 
a common RG-58 coax cable has a series inductance of approximately 250 nH/m. 
From basic electricity, we also know that two coils close to each other form a 
transformer, see Fig. 2.25, and the mutual inductance M between them is a measure 
of how much of the voltage over the primary coil that is transferred to the secondary 
coil: 
up per M equals k dot StartRoot upper L 1 dot upper L 2 EndRoot
√
up er M
 equals k dot StartRoot upper L 1 dot upper L 2 EndRoot
where k is a constant depending on ‘geometric and environmental’ parameters. 
The voltage induced in the secondary coil is
Fig. 2.24 A conductor has 
some inductance l H/m per 
unit length 

24
2
Noise: Sources and Remedies
Fig. 2.25 A transformer
u 2  equ als upper M StartFraction d i 1 Over d t EndFraction
u 2
 equals upper M StartFraction d i 1 Over d t EndFraction
If we assume that the current i1 in Wire 1 is sinusoidal, i 1 le ft  pa rent hesis t right parenthesis equals i 0 sine omega t, the  
derivative is omeg a i 0 cosine omega t and 
u 2  equals  upp er
 M omega i 0 cosine omega t
Notice in Fig. 2.25 that there is also a current i2 induced in the secondary coil and 
its direction is determined by Lenz’s law; its direction is such that it counteracts its 
origin. 
Now we have all we need to explain inductive crosstalk. If we place two conductors 
close to each other, they will form a transformer because of their inherent inductance 
per unit length, see Fig. 2.26, and Eq. (2.8) tells us that a current (i.e., a current 
change) in Wire 1 will induce a voltage in Wire 2, (which according to Eq. (2.9) 
increases with frequency; inductive crosstalk is also a high-frequency problem). 
The remedy in this case is a little more sophisticated than earlier. First, we place a 
new conductor between Wire 1 and Wire 2. We will call it the ‘shield conductor’, or 
just the ‘shield’, see Fig. 2.27. Just like there is a mutual inductance between Wires 1 
and 2, there will be a mutual inductance between Wire 1 and the shield, and between 
Wire 2 and the shield.
Fig. 2.26 Two parallel conductors are a transformer 

2.6 Common Impedances
25
Fig. 2.27 There are mutual 
inductances between each 
pair of wires 
Just like the current in Wire 1 induces a current i12 in Wire 2, it will also induce a 
current i1S in the shield conductor. But because there is a mutual inductance between 
the shield and Wire 2, the current i1S will induce a current iS2 in Wire 2, and because 
i1S is in the opposite direction of i1, the induced current from the shield will be in 
the opposite direction of i12, see Fig. 2.27. 
So, the shield induces a current in Wire 2 that has the same frequency as the 
current induced by wire 1, but it has a phase shift of 180°, which means that it will 
interfere ‘destructively’ with i12. iS2 will cancel i12 completely if M12·i1 = MS2·i1S. 
i1 > i1S, but  MS2 > M12, so there is a good chance that they will cancel. If we do it 
right. 
How do we do it ‘right’? As a matter of fact, how do we do it at all? First, it 
doesn’t seem very practical to just place an extra ‘dummy’ wire next to our signal 
wire. Second, it probably wouldn’t work anyway. An absolute condition for this trick 
to work is that the shield wire can conduct a current; it needs to be a closed loop. 
We can achieve that without adding an extra ‘dummy’ cable. From Fig. 2.22, we  
learned that we need a grounded shield anyway to protect our system from E-ﬁeld 
radiation and capacitive crosstalk. Well, there is our ‘dummy’ shield already! All we 
must do is to ground it in both ends (make it a closed loop) to also protect us against 
inductive crosstalk, see Fig. 2.28.
However, grounding the shield at both ends might introduce new noise and we 
will investigate that in the next section. 
2.6 
Common Impedances 
A current must always have a return path; what goes out must come back. Current will 
always ﬁnd a way back and it will choose path(s) according to Kirchhoff’s current 
law. A current carrying wire must always have a return path to ‘close the loop’. When

26
2
Noise: Sources and Remedies
Fig. 2.28 If we ground the shield at both ends, we are protected against E-ﬁeld, capacitive, and 
inductive crosstalk
you use a coax cable, the shield (the copper braid surrounding the center wire) is the 
return path for the current, see Fig. 2.29. 
In the general case, we use a ‘common ground’ as the return path for the current, 
see Fig. 2.30. 
Using common ground as the return path in a measurement system is in general 
not a good idea. Two circumstances, which are quite common, can make the ground 
itself a source of crosstalk and noise. First, suppose that the ground path conductor is 
not ‘perfect’, i.e., it has a resistance > 0 ohms (which it almost always has). Second, 
since it is a common ground, other signals also use it for current return (ix), see 
Fig. 2.31 (where Rwire is the resistance in the wire).
If we apply Kirchhoff’s voltage law in Fig. 2.31, we get
Fig. 2.29 What goes out must come back; the shield is also the return path 
Fig. 2.30 ‘Ground’ is a common return path 

2.6 Common Impedances
27
Fig. 2.31 Common ground as return path
Fig. 2.32 Multi-signal system with common return path 
u 0  minus i 0 upper R Subscr ipt wire Basel ine minus u Subscript meas Baseline minus left parenthesis i 0 plus i Subscript x Baseline right parenthesis upper R Subscript ground Baseline equals 0
u Subs cr ip
t me
as Base
line eq
uals M
odif
y
ingBel ow u 0 Wi
t
h bottom brace Underscript StartLayout 1st Row left single quotation mark True right single quotation mark 2nd Row signal 3rd Row value EndLayout Endscripts minus ModifyingBelow i 0 left parenthesis upper R Subscript wire Baseline plus upper R Subscript ground Baseline right parenthesis With bottom brace Underscript cable loss Endscripts minus ModifyingBelow i Subscript x Baseline upper R Subscript ground Baseline With bottom brace Underscript crosstalk Endscripts
u Subscript meas Baseline equals ModifyingBelow u 0 With bottom brace Underscript StartLayout 1st Row left single quotation mark True right single quotation mark 2nd Row signal 3rd Row value EndLayout Endscripts minus ModifyingBelow i 0 left parenthesis upper R Subscript wire Baseline plus upper R Subscript ground Baseline right parenthesis With bottom brace Underscript cable loss Endscripts minus ModifyingBelow i Subscript x Baseline upper R Subscript ground Baseline With bottom brace Underscript crosstalk Endscripts
u
 Subsc ript 
meas Baselin
e equals ModifyingBelow u 0 With bottom brace Underscript StartLayout 1st Row left single quotation mark True right single quotation mark 2nd Row signal 3rd Row value EndLayout Endscripts minus ModifyingBelow i 0 left parenthesis upper R Subscript wire Baseline plus upper R Subscript ground Baseline right parenthesis With bottom brace Underscript cable loss Endscripts minus ModifyingBelow i Subscript x Baseline upper R Subscript ground Baseline With bottom brace Underscript crosstalk Endscripts
u Subscript meas Baseline equals ModifyingBelow u 0 With bottom brace Underscript StartLayout 1st Row left single quotation mark True right single quotation mark 2nd Row signal 3rd Row value EndLayout Endscripts minus ModifyingBelow i 0 left parenthesis upper R Subscript wire Baseline plus upper R Subscript ground Baseline right parenthesis With bottom brace Underscript cable loss Endscripts minus ModifyingBelow i Subscript x Baseline upper R Subscript ground Baseline With bottom brace Underscript crosstalk Endscripts
u
 Subscript
 meas Baseline equals ModifyingBelow u 0 With bottom brace Underscript StartLayout 1st Row left single quotation mark True right single quotation mark 2nd Row signal 3rd Row value EndLayout Endscripts minus ModifyingBelow i 0 left parenthesis upper R Subscript wire Baseline plus upper R Subscript ground Baseline right parenthesis With bottom brace Underscript cable loss Endscripts minus ModifyingBelow i Subscript x Baseline upper R Subscript ground Baseline With bottom brace Underscript crosstalk Endscripts
In Eq. (2.10), i 
0
 left parenthes
is upper R Subscript wire Baseline plus upper R Subscript ground Baseline right parenthesis
is the ‘cable loss’ in the circuit. We always have 
some of that. This is not ‘noise’. After all, it is caused by the signal itself, and it is 
predictable (we can compensate for it). The problem in Eq. (2.10) is the  term  ixRground 
which is caused by an external current that has nothing to do with u0 or our system. 
ixRground represents ‘crosstalk by common impedance’.1 
This explains why the shield against inductive crosstalk in Fig. 2.28 is a potential 
problem; both ends of the return path are grounded which is an invitation to other 
currents using the common ground to enter our system. 
Example 2.1 In a multi-signal system, a signal wire carrying a small sinusoidal 
signal shares return wire with a fast TTL clock signal, see Fig. 2.32. The TTL signal 
wire is ‘50-Ω terminated’ to reduce pulse reﬂections (see Chapter 5), which means 
that the current in the clock wire (during the 5-V pulses) is 5/50 = 100 mA. Make a 
prediction of the clock signal’s impact on the measurement of the sine if the resistance 
of the return wire is 1 Ω.
1 Sometimes called ‘common ground crosstalk’. 

28
2
Noise: Sources and Remedies
Fig. 2.33 A ‘real case’ example 
Fig. 2.34 A shielded TP cable 
Solution The ixRground voltage in Eq. (2.10) is 100 mA × 1 Ω = 100 mV. Hence, 
according to Eq. (2.10), we will measure a signal that is 100 mV lower than expected 
during the positive duty cycles of the clock signal. Figure 2.33 illustrates a real 
example recorded with an oscilloscope, using three 4.5 m wires with a cross-sectional 
area of 0.08 mm2. 
When it comes to the use of shields, like the ones we have been using in Figs. 2.22 
and 2.28, to protect our system against capacitive and inductive crosstalk, there are 
two cases that need to be treated differently; whether the shield is ‘just a shield’ or if 
it also carries the return current. This difference is paramount because it determines 
how you can use it. 
If the shield is also the return path, as in a coax cable, the shield should only be 
grounded at one end. Never ground a coax cable at both ends. If you have problems 
with inductive crosstalk and need to ground the shield at both ends, you can’t use a 
coax cable: you must use a ‘shielded pair-cable’, where the shield is not the return 
path. That also has another advantage; you can twist the signal pair wires to also get 
B-ﬁeld protection.2 
A shielded TP cable, grounded at both ends, protects your system against ‘every-
thing’, but coax cables have higher bandwidth and support longer cable lengths 
(Fig. 2.34).
2 You don’t ‘twist’ the cables yourself; you buy a ‘shielded twisted-pair’ cable. 

2.7 Summary and Recommendations
29
Shielded source
˜
+
-
Coax cable
BNC 
BNC 
If necessary 
Fig. 2.35 Keep the signal in a Faraday cage all the way 
2.7 
Summary and Recommendations 
When you plan the setup of an electrical measurement system, you need to keep 
external crosstalk interference in mind. Some of them you need to consider from the 
outset, because they are omnipresent in almost all environments, while with others, 
you just wait and see if they show up. 
Of all the potential crosstalk sources we have presented in this chapter, capac-
itive crosstalk and common impedance crosstalk are the most common problems. 
(Protecting your system against capacitive crosstalk takes care of E-ﬁeld crosstalk at 
the same time.) You should take deliberate actions to prevent capacitive and common 
impedance crosstalk when you plan a measurement setup. 
What remains is B-ﬁeld and inductive crosstalk. In my experience, they are not 
a major problem in most physics labs; don’t make any special plans to protect your 
system against B-ﬁeld and inductive crosstalk, just keep them in mind if you still 
have interference problems after taking precautions against capacitive and common 
impedance crosstalk. 
That means that we don’t start with a shielded twisted-pair cable, you start with a 
coax cable and one signal ground point only (if necessary). If you have two different 
ground points, you open up for common impedance crosstalk. 
Figure 2.35 illustrates what should be your ﬁrst option (‘plan A’). 
The signal should preferably be transported as a ‘non-referenced’ differential 
signal to the receiving DAQ (Data AcQuisition) system’s differential ampliﬁer input. 
If the source is inherently ‘referenced’ (ground related), you might have to ‘de-
reference’ it, either using an opto coupler (if the signal is digital) or an isolation 
transformer (if the signal is analog), see Fig. 2.36.
Only when the coax system in Fig. 2.35 fails, you consider a shielded TP cable. If 
the shielded TP cable system also fails (or if its bandwidth is too small or if it can’t 
offer long enough cables), an alternative solution could be a ﬁber optics solution. 
Fiber optic transmission cables are immune to all the above crosstalk interferences. 
They also have extreme bandwidth and allow long cable lengths but are expensive 
and somewhat more complicated to handle. Fiber optics are not perfect though, they 
have their own issues (like dispersion, for example).

30
2
Noise: Sources and Remedies
Fig. 2.36 a De-referencing with opto-coupler. b De-referencing with isolation trafo
However, whatever you do, there will almost always be some unwanted signal 
component(s) in your measurement signal that you want to get rid of and when you 
have set up your system according to the recommendations above and still have some 
noise (you always have the ‘internal’ noise), then, but only then, you will have to 
start the ‘signal processing’, which is what most of this book is about. 
2.8 
Solved Problems 
Problem 2.1 Assuming a common trace length on a pcb (printed circuit board) is 
5 cm (two inches). For what EM frequencies would such a board be particularly 
vulnerable to electric ﬁeld interferences? 
Solution It is particularly vulnerable if the pcb trace length equals λ/2, i.e., for EM 
waves with a wavelength of 10 cm. That corresponds to a frequency of 
f equa ls StartFraction 3 dot 10 Superscript 8 Baseline Over 0.1 EndFraction equals ModifyingBelow 3 GHz With quotation dash
f e
qual s StartFraction 3 dot 10 Superscript 8 Baseline Over 0.1 EndFraction equals ModifyingBelow 3 GHz With quotation dash
Problem 2.2 A desktop DMM with an input impedance of 10 MΩ has an open input 
(no input signal). When set to DCV range and ‘statistics mode’ it displays a standard 
deviation of 16 μV. Estimate the instrument’s bandwidth in the DCV range. 
Solution Assuming room temperature (300 K), we solve for B in Eq. (2.1): 
up pe
r B
 equals StartFraction u Subscript rms Superscript 2 Baseline Over 4 normal pi k upper R upper T EndFraction equals StartFraction left parenthesis 16 dot 10 Superscript negative 6 Baseline right parenthesis squared Over 4 normal pi dot 1 .38 dot 10 Superscript negative 23 Baseline dot 10 dot 10 Superscript 6 Baseline dot 300 EndFraction equals ModifyingBelow 500 Hz With quotation dash
upper B
 
equ als StartFraction u Subscript rms Superscript 2 Baseline Over 4 normal pi k upper R upper T EndFraction equals StartFraction left parenthesis 16 dot 10 Superscript negative 6 Baseline right parenthesis squared Over 4 normal pi dot 1 .38 dot 10 Superscript negative 23 Baseline dot 10 dot 10 Superscript 6 Baseline dot 300 EndFraction equals ModifyingBelow 500 Hz With quotation dash
upper B eq uals Sta rtFra ction u Subs cript rms Superscript 2 Baseline Over 4 normal pi k upper R upper T EndFraction equals StartFraction left parenthesis 16 dot 10 Superscript negative 6 Baseline right parenthesis squared Over 4 normal pi dot 1 .38 dot 10 Superscript negative 23 Baseline dot 10 dot 10 Superscript 6 Baseline dot 300 EndFraction equals ModifyingBelow 500 Hz With quotation dash
Problem 2.3 A typical kitchen microwave oven operates at 2.45 GHz. What grid 
size would you recommend for a protective metal mesh in a microwave oven?

Reference
31
Solution An electromagnetic wave with a frequency of 2.45 GHz has a wavelength 
of 3·108/2.45·109 = 12 cm. One-tenth of 12 cm is 1.2 mm. (Compare that to the size 
of the grid in the front door of your microwave oven.) 
Reference 
1. Kiely, R. 2017. Understanding and eliminating 1/f noise. In Analog Dialog, p. 4.

Chapter 3 
Sensors 
Abstract This chapter ﬁrst describes thermocouples starting from the famous exper-
iments by Seebeck and Thomson. The basic concepts of thermocouples are described 
such as hot and cold junctions, the Seebeck coefﬁcient, and thermocouple ‘types’ are 
explained. This chapter also explains what the ‘cold junction compensation’ is and 
the law of intermediate temperatures is illustrated. Resistance temperature detectors 
(such as Pt-100) are described, and the necessity of accurate resistance measure-
ments is explained (the ‘4-wire method’). The measurement of extremely high and 
extremely low temperatures is covered at the end of Sect. 3.2. Section 3.3 introduces 
the versatile strain gauge principle and its many applications. It is also explained 
why strain gauges are (almost) always connected to a Wheatstone bridge and how 
it can be used to measure a wide range of physical quantities (like force, pressure, 
liquid level, torque, etc.). Piezoelectric crystals and Hall sensors are explained and 
light sensors (photodiodes, position-sensitive detectors, and photomultipliers). In the 
particle detector section, channeltrons and microchannel plates are explained and in 
the ﬁnal Sect. 3.9, the most common vacuum gauges are presented. 
3.1 
Introduction 
In this context, a ‘measurement’ refers to the measurement of a physical quantity, 
like temperature, pressure, acceleration, sound intensity, or light intensity. Most of 
these physical quantities can be measured using mechanical gauges (for example, 
we can measure temperature using a mercury thermometer) but in a physics lab, the 
destination for data is almost always a computer (of some kind) and that requires 
that we have access to the measurand in electrical form. The device that transforms 
a variation in a physical quantity into a variation in an electrical quantity is called 
the sensor. The words ‘gauge’ and ‘transducer’ are also common in this context, but 
we will mostly use the word ‘sensor’ here. 
The preferable electrical quantity is (almost) always volts [V], because, ﬁrst, we 
know how to measure voltage very accurately and, second, the ‘analog-to-digital’ 
elements that ‘sample’ the signal need voltage as the input quantity (see Chap. 11).
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_3 
33

34
3
Sensors
However, a lot of sensors do not produce voltage as the primary output (they may 
produce a current or a change in resistance or capacitance), and in those cases we 
need some ‘supporting’ electronics to generate a voltage output. This supporting 
electronics is referred to as the ‘signal conditioning’ electronics. 
There are a lot  of physical quantities and, for most sensors, there are more than one 
sensor technique available, so learning about sensors appears to be quite a challenge. 
However, if you count all sensors in all physics labs, you will ﬁnd that there is one 
kind of sensors that dominates completely: Temperature sensors. No matter what 
the ‘physics’ is about, temperature must almost always be measured somewhere. 
So, if you only have time to learn about one sensor technique, you should start with 
temperature sensors. (Then you understand maybe as much as 30% of all sensors in 
a lab.) Hence, temperature sensors are what we will start with. 
If you have time to learn one more sensor technology, I recommend you learn 
about the ‘strain gauge principle’ since this versatile sensor technique is the basis for 
a lot of sensors for different physical quantities. 
3.2 
Temperature Sensors 
3.2.1 
Thermocouples 
Thermocouples are one of the most common sensors in a physics lab and this is 
probably the ﬁrst sensor you should learn about as a physicist. In 1821, the German 
physicist Thomas Johann Seebeck discovered that if you make a closed circuit of 
two different conductors and keep the two junctions at different temperatures, there 
will be a current in the circuit (Fig. 3.1). 
In most textbooks, the Seebeck effect is used to explain thermocouples. In this 
book, I will instead use the Thomson effect (since I think it makes the understanding 
a little less mysterious). The Thomson effect was discovered in 1854 by the British 
physicist William Thomson (Lord Kelvin). He did similar experiments on a single 
wire and found that when current was ﬂowing in a conductor, one end got warm, 
and one end got cold. He also found that this process was reversible; if the two 
ends of a conductor are held at different temperatures, a current will be induced in 
the conductor. If we don’t have a closed loop, the regrouping of charge will induce
Fig. 3.1 The Seebeck effect 

3.2 Temperature Sensors
35
Fig. 3.2 The Thomson 
effect 
a voltage across the ends, an emf . We will denote this emf EA(T H → T C) (‘from 
temperature T H to temperature T C along material A) (Fig. 3.2). 
Next, we need to ﬁgure out how to use the Thomson effect to measure temperature. 
Figure 3.3 illustrates a (naïve) experiment. A voltage meter is used to measure the 
emf across a single wire. We connect the voltage meter to the end points using a wire 
of (unknown?) material C. The Thomson effect is as valid for the wires of material 
C as it is for the wire of material A. The voltage meter will measure the voltage 
up er U Sub script m Basel ine equals up er E 
Subscript upper C Baseline left parenthesis upper T 0 right arrow upper T Subscript upper H Baseline right parenthesis plus upper E Subscript upper A Baseline left parenthesis upper T Subscript upper H Baseline right arrow upper T Subscript upper C Baseline right parenthesis plus upper E Subscript upper C Baseline left parenthesis upper T Subscript upper C Baseline right arrow upper T 0 right parenthesis
(T 0 is the temperature of the voltage meter.) From expression (3.1), we can see that 
we would have to consider the contribution from the voltage meter wires, and that 
would make this solution impractical (to say the least); we would always have to 
make sure we have the right wires to the voltage meter. For that reason, we use a 
pair of wires of dissimilar materials (a thermocouple) as illustrated in Fig. 3.4. This  
straightforward design eliminates the voltage measurement’s dependence on the C 
wires.
We can see that by writing out the expression for the voltage Um: 
up er U Sub script m Basel ine equals up er E Subscript  uppe
r C Baseline left parenthesis upper T 0 right arrow upper T Subscript upper C Baseline right parenthesis plus upper E Subscript upper A Baseline left parenthesis upper T Subscript upper C Baseline right arrow upper T Subscript upper H Baseline right parenthesis plus upper E Subscript upper B Baseline left parenthesis upper T Subscript upper H Baseline right arrow upper T Subscript upper C Baseline right parenthesis plus upper E Subscript upper C Baseline left parenthesis upper T Subscript upper C Baseline right arrow upper T 0 right parenthesis
And since upper E Subscript upper C Baseline left parenthesis upper T 0 right arrow upper T Subscript upper C Baseline right parenthesisof course = negativ e upper E Subscript upper C Baseline left parenthesis upper T Subscript upper C Baseline right arrow upper T 0 right parenthesisthe EC terms will cancel 
and we can write Eq. (3.2) as  
up er U Sub script m Basel ine equals up er E Subscript  upper  A Baseline left parenthesis upper T Subscript upper C Baseline right arrow upper T Subscript upper H Baseline right parenthesis plus upper E Subscript upper B Baseline left parenthesis upper T Subscript upper H Baseline right arrow upper T Subscript upper C Baseline right parenthesis equals upper E Subscript upper B Baseline left parenthesis upper T Subscript upper H Baseline right arrow upper T Subscript upper C Baseline right parenthesis minus upper E Subscript upper A Baseline left parenthesis upper T Subscript upper H Baseline right arrow upper T Subscript upper C Baseline right parenthesis
Fig. 3.3 A simple  
Thompson effect experiment 

36
3
Sensors
Fig. 3.4 A thermocouple
Table 3.1 Thermocouple data 
Type
Metal pair
Seeb. coef. [μV/°C]
Range [°C]
Accuracy [°C] 
E
Chromel/Const
59
−270 … +870
±1.7 
J
Fe/Const
50
−200 … +760
±2.2 
K
Chromel/Alumel
39
−270 … +1260
±2.2 
S
Pt–Rh/Pt
5
−50 … +1600
±1.5 
T
Cu/Const
39
−270 … +370
±1.0 
With the design in Fig. 3.4, the voltage we measure is independent of the C wires 
and the temperature of the voltage meter, and that is what we need for the Thomson 
effect to be a useful sensor technique. 
There are some things we need to know before we use thermocouples. First, we 
notice from Eq. (3.3) that the voltage Um (the thermo emf ) represents a temperature 
difference; we must  know the temperature T C at the cold junction. The cold junction 
temperature is measured separately by another sensor (see next section). Second, the 
thermo emf is exceedingly small, typically a few or tens of μV/°C (see Table 3.1). 
Third, the thermo emf is not a linear function of the temperature. In fact, NIST1 
recommends that they are best described by a ninth-order polynomial. Figure 3.5 
illustrates the emf of a ‘type K’ thermocouple in the range –10 to +40 °C (‘
’) 
and a linear approximation; notice the deviation at higher temperatures. (We will 
explain the ‘type’ letter later.)
Even though thermocouples are not linear, they are often characterized by a sensor 
coefﬁcient called the Seebeck coefﬁcient, which has the unit μV/°C. This number 
stands for the derivative of the emf graph at ∆T = 0 °C. NB. This number is only 
for comparison between thermocouples. Don’t try to use it to derive a temperature 
from an emf; you must use a thermocouple table for that! 
Materials A and B are not paired arbitrarily in a thermocouple. The metal pairs 
have been standardized and each metal pair has a ‘type’ letter. It is also common 
to use an alloy as one (or both) metal. Three alloys are particularly common. First, 
we have Constantan2 which consists of 45% nickel and 55% copper. Then there is
1 National Institute of Science and Technology, nist.gov. 
2 This is not the last time we will hear about Constantan in this book; it is also the most common 
material in strain gauges, see Sect. 3.3. 

3.2 Temperature Sensors
37
Fig. 3.5 Temperature dependence of a type K thermocouple
Alumel which is 95% nickel and 5% aluminum and Chromel which has 90% nickel 
and 10% chromium. 
Figure 3.6 compares the ﬁve most common thermocouples’ emf graphs in the 
range −10 °C to +50 °C and Table 3.1 summarizes their parameters. 
A common question in the physics lab is: ‘What thermocouple type should I 
use?’. Well, ﬁrst, it must of course cover your temperature range. The type S ther-
mocouple can measure the highest temperatures and type K, or T, are usually used 
for exceptionally low temperatures. The type E and type J thermocouples can be 
used in oxidizing atmospheres (type E also in inert atmospheres). Type K is the 
most common of all thermocouples; it is inexpensive and accurate, and it can also be 
used in nuclear applications because of its radiation ‘hardness’. Type T thermocou-
ples have the smallest range but are the most accurate and have excellent reliability/ 
repeatability. If you don’t know or don’t care, you start with a type K thermocouple. 
In fact, a lot of DMMs have thermocouple inputs and that is almost always for a type 
K thermocouple.
Fig. 3.6 Comparing the most common thermocouples between −10 °C and +50 °C (type K and 
type T overlap in this range) 

38
3
Sensors
Figure 3.7 illustrates an interesting (and common) thermocouple arrangement. It 
consists of two AB junctions, where one of the junctions is the ‘hot’ junction and 
the other junction is submerged into ice water (= 0 °C). To understand why this is a 
clever trick, we need the following thermocouple law. 
The thermocouple law of intermediate temperatures: 
In Fig. 3.8a, a temperature difference T H − T IM generates an emf EA(T H → T IM) 
across conductor A, and similarly, a temperature difference T IM − T C generates an 
emf EA(T IM → T C). In this case, T IM is an ‘intermediate’ temperature and can be 
eliminated: 
upper E Subscript uppe r A Baseline l eft p
arenthesis upper T Subscript upper H Baseline right arrow upper T Subscript IM Baseline right parenthesis plus upper E Subscript upper A Baseline left parenthesis upper T Subscript IM Baseline right arrow upper T Subscript upper C Baseline right parenthesis equals upper E Subscript upper A Baseline left parenthesis upper T Subscript upper H Baseline right arrow upper T Subscript upper C Baseline right parenthesis
This is illustrated in Fig. 3.8b. 
Back to Fig. 3.7. The voltage meter will measure the thermo emf 
up er U Sub script m Basel ine equals uppe r E  Subs
cript upper A Baseline left parenthesis upper T Subscript upper C Baseline right arrow upper T Subscript upper H Baseline right parenthesis plus upper E Subscript upper B Baseline left parenthesis upper T Subscript upper H Baseline right arrow 0 Superscript ring Baseline upper C right parenthesis plus upper E Subscript upper A Baseline left parenthesis 0 Superscript ring Baseline upper C right arrow upper T Subscript upper C Baseline right parenthesis
Fig. 3.7 The ice water trick 
Fig. 3.8 a ‘Intermediate’ temperature. b The law of intermediate temperatures 

3.2 Temperature Sensors
39
If we use the law of intermediate temperatures on the emfs across the A conductors, 
T C will be the ‘intermediate temperature’, and we get 
upper  E SubscriptAuppe r A Baseline lef t paren thesis 0 Su perscript ring Baseline upper C right arrow upper T Subscript upper C Baseline right parenthesis plus upper E Subscript upper A Baseline left parenthesis upper T Subscript upper C Baseline right arrow upper T Subscript upper H Baseline right parenthesis equals upper E Subscript upper A Baseline left parenthesis 0 Superscript ring Baseline upper C right arrow upper T Subscript upper H Baseline right parenthesis equals minus upper E Subscript upper A Baseline left parenthesis upper T Subscript upper H Baseline right arrow 0 Superscript ring Baseline upper C right parenthesis
And hence, we can write Eq. (3.5) as  
up er U Sub scri pt m Baselin e eq ual
s upper E Subscript upper B Baseline left parenthesis upper T Subscript upper H Baseline right arrow 0 Superscript ring Baseline upper C right parenthesis minus upper E Subscript upper A Baseline left parenthesis upper T Subscript upper H Baseline right arrow 0 Superscript ring Baseline upper C right parenthesis
In expression (3.6), Um is independent of the cold junction temperature; we have 
turned the temperature measurement into an absolute measurement. In general, ther-
mocouples only measure a temperature difference, but that doesn’t mean that you can 
just add the cold junction temperature to the temperature you get from the thermo 
emf. The proper way to do it is to convert the cold junction temperature to voltage, add 
that voltage to the thermo emf, and then convert the summed voltage to a temperature 
(using a table). This is called ‘cold junction compensation’ (see Problem 3.5). 
3.2.2 
Metal Temperature Sensors 
Temperature sensors based on pure metals are called resistance temperature detectors 
or just ‘RTDs’. The resistance of all metals has a positive temperature dependence3 ; 
the resistance increases when the temperature increases. So, we could use any metal 
as a temperature sensor, but only three are really used, platinum, copper, and nickel. 
In fact, in industrial applications, only (almost) platinum sensors are used, so that is 
what we will be focusing on here. It is highly unlikely that you will ever see anything 
else in your physics lab. 
A platinum temperature sensor is denoted ‘Pt-100’ or ‘Pt-1000’. ‘Pt’ is of course 
for ‘Platinum’ and the number, 100 and 1000, respectively, is the sensor’s resistance 
at 0 °C. Unlike thermocouples, the temperature dependence of metals is very linear. 
The resistance’s dependence on the temperature is given by Eq. (3.7): 
up per R e quals u
pper R 0 left parenthesis 1 plus gamma upper T right parenthesis
where T is the temperature in °C, R0 is the resistance at 0 °C, and γ is the sensor 
coefﬁcient, and for platinum, γ = 3.85 · 10−3 °C−1. Hence, for a Pt-100 RTD, we 
can write Eq. (3.7) as  
up per R
 
eq uals 10 0 left p
a
renthe sis 1 pl
us 3.85 dot 10 Superscript negative 3 Baseline upper T right parenthesis equals 100 plus 0.385 upper T
3 Germanium and silicon have negative temperature coefﬁcients, but they are not ‘metals’, they are 
‘metalloids’, and there are also non-metals with negative temperature coefﬁcients (like carbon). 

40
3
Sensors
Fig. 3.9 RTDs come in different shapes 
From Eq. (3.8), we can see that the sensitivity is 0.385 Ω/°C (and hence ten times 
higher for a Pt-1000 RTD). Platinum RTDs are mainly used in the temperature range 
−50 °C to +500 °C. They can operate outside this range, but outside this range, 
thermocouples typically perform better. 
A Pt-100 RTD is usually made of thin platinum wires that are wrapped around 
some heat-resisting material and then encapsulated in a protective housing, see 
Fig. 3.9. They have become very popular in industrial applications in ranges below 
600 °C because of their excellent accuracy and long-term stability. 
RTDs are also often used to measure the cold junction temperature in thermo-
couple applications. 
RTDs are more accurate and reliable than thermocouples, but they have one 
inherent disadvantage compared to thermocouples; the output quantity is resistance, 
not voltage, and we simply have better instruments to measure voltage compared 
to resistance. Measuring resistance can be a little precarious and needs to be done 
carefully. Since this is an especially important aspect of RTDs, we investigate the 
details in the next section. 
3.2.3 
Measuring Resistance 
Figure 3.10 illustrates the simplest way to measure resistance using a common, 
portable DMM. Handheld DMMs usually only have two connectors and, when 
you set the unit selector knob to ‘Resistance’, it will generate a probing current 
and measure the voltage drop across the external resistance using the same two 
connectors, see Fig. 3.10.
From Fig. 3.10, it is obvious that the resistance measured will also include the 
resistance of the wires. That may or may not be a problem, it depends on the size of 
the resistance of the wires and the sensor and on the required accuracy. The following 
example will illustrate this. 
Example 3.1 In a temperature measurement, a Pt-100 RTD is placed ﬁve meters 
from the DMM, and a TP cable is used where the copper wires’ cross-sectional 
area is 0.25 mm2. What will the error in the temperature measurement be due to the 
contribution from the wires? 
Solution The resistivity of copper is 1.77 · 10−8 Ωm. The resistance of one wire is 
upper R Subscript wire Baseline equals rho StartFraction upper L Over upper A EndFraction equals 1.77 dot 10 Superscript negative 8 Baseline StartFraction 5 Over 0.25 dot 10 Superscript negative 6 Baseline EndFraction equals 0.354 normal upper Omega
up per R S ubscri
pt wire Baseline equals rho StartFraction upper L Over upper A EndFraction equals 1.77 dot 10 Superscript negative 8 Baseline StartFraction 5 Over 0.25 dot 10 Superscript negative 6 Baseline EndFraction equals 0.354 normal upper Omega
upper  R Subs cript w ire Baseline equals rho StartFraction upper L Over upper A EndFraction equals 1.77 dot 10 Superscript negative 8 Baseline StartFraction 5 Over 0.25 dot 10 Superscript negative 6 Baseline EndFraction equals 0.354 normal upper Omega

3.2 Temperature Sensors
41
Fig. 3.10 The 2-wire method
And since we have two wires, the total contribution from the wires is 0.708 Ω. 
Since the sensitivity coefﬁcient of a Pt-100 RTD is 0.385 Ω/°C, 0.708 Ω corresponds 
to a temperature error of 0.708/0.385 = 1.8 °C. (It would be 18 °C for a Pt-1000!) 
The error of 1.8 °C in the previous example, may or may not be a problem, but 
consider that the distance between the sensor and the DMM was ‘only’ ﬁve meters. 
In a physics lab, it can be considerably longer. In some labs, the sensor is inside 
a vacuum chamber in another room. Second, it depends on the application. If you 
just heat an oven, it might not matter much, but if you try to control a boiler, a few 
degrees are critical. 
To avoid the problem, you must use the 4-wire method. This is illustrated in 
Fig. 3.11. 
In Fig. 3.11, the current source and the voltage meter have separate wires all 
the way to the sensor. At a ﬁrst glance, this may not seem to improve things; we 
just introduced two more wire resistances. However, if you analyze the two current 
circuits in Fig. 3.11, you see that there will be no current in the inner circuit, iV = 
0 A. The reason is that the inner circuit has a voltage meter in series and voltage 
meters have very high impedance. Hence, there is no voltage drop across the Rwire 
resistances in the inner circuit and the voltage meter will only measure the voltage 
drop across the RTD. The Rwire contributions are effectively eliminated.
Fig. 3.11 The 4-wire method  

42
3
Sensors
Fig. 3.12 Keysight’s/ 
Agilent’s DMM interface for 
2-/4-wire measurements 
If we compare Figs. 3.10 and 3.11, we can also see the disadvantage of the 4-wire 
method; apart from two extra wires, it also requires an ‘expensive’ DMM. To do a 
4-wire resistance measurement you almost certainly need a desktop DMM, like the 
popular Agilent/Keysight 344xx model. The front panel resistance interface of this 
DMM is illustrated in Fig. 3.12. The probe current comes out of the right-hand side 
pair of connectors and the left-hand side ‘Sense’ pair measures the voltage. Notice 
the ‘4W’ label. Most students think this means ‘4 Watts’. Now you know better. 
3.2.4 
Bandgap Sensors 
Thermocouples and RTDs are extremely popular in physics labs, but they are not 
the most common temperature sensors when it comes to commercial applications 
outside the laboratory or in industrial applications. An inherent disadvantage is that 
they are not semiconductors and cannot be integrated into a silicon wafer, which is a 
typical demand in commercial products. Also, commercial products seldom require 
the extreme ranges offered by thermocouples and RTDs. 
In commercial applications, the ‘bandgap’ sensor is very popular. The basic prin-
ciple behind a bandgap temperature sensor is that the forward voltage of a pn junction 
(a silicon diode) is very temperature-dependent (approximately −2 mV/°C, compare 
that with thermocouples in Table 3.1). In principle, you could just bias a silicon diode 
but that is not recommended. The expression for the forward voltage’s dependence 
on the temperature is overly complicated [1] and it has a disadvantage; just like 
the thermocouple, it depends on a reference temperature. For that reason, another 
approach is used. 
The forward voltage also depends on the current used. Therefore, two pn junctions 
are used with different currents, and then the difference in forward voltages will be 
independent of any reference temperature. These devices are sometimes referred to 
as PTATs, Proportional To Absolute Temperature.

3.2 Temperature Sensors
43
Bandgap sensors can be integrated in silicon and are used in applications up to 
200 °C. Other advantages are that they are inexpensive and very sensitive. 
3.2.5 
Cryogenic Temperatures 
At cryogenic temperatures (<−153 °C), you need to take extra care to use the right 
sensor. Some of the sensor technologies described above can be used also at cryogenic 
temperatures but remember that also the housings must be able to endure the stress 
implied by the extremely low temperatures. Having said that, silicon diodes can be 
designed for temperatures down to 1.5 K and some thermocouples can also be used at 
cryogenic temperatures (type N and T). A special cryogenic RTD has been designed 
using a platinum/cobalt alloy which can be used down to 1.4 K. In environments that 
include magnetic ﬁelds, ruthenium oxide RTDs are recommended. 
3.2.6 
Extremely High Temperatures 
At the other end of the scale, we have extremely high temperatures (> 800 °C), that 
need to be measured in for example metal processing and plasma physics. There are 
some thermocouples that can be used up to 1800 °C (type B and type S), but above 
1800 °C, pyrometers are used. 
The word ‘pyro’ is Greek for ‘ﬁre’. Pyrometers are based on two classic laws 
of physics. All objects warmer than 0 K emit a broad spectrum of infrared radia-
tion. Wien discovered that the wavelength peak of this radiation decreases when the 
temperature increases, and Stefan–Boltzmann discovered that the total energy that 
is emitted from the object (per surface area and unit time) increases rapidly with 
increasing temperature (~T 4). Both these laws can be observed in Fig. 3.13.
Since it is easier to measure the increase in emitted energy rather than ﬁnding the 
wavelength peak, it is Stefan–Boltzmann’s law that is usually used in pyrometers. 
Pyrometers are non-contact devices that measure the energy emitted from a black 
body by focusing the infrared light onto a thermopile. A thermopile consists of several 
thermocouples connected in series, see Fig. 3.14.
The infrared light is absorbed by the material in the hot junction layer, and this will 
heat the material; the temperature of the hot layer junction will be proportional to the 
radiation intensity which, according to Stefan–Boltzmann’s law, is proportional to 
the temperature. The thermopile consisting of N thermocouples in series produces a 
thermo emf that is N times the emf of a single thermocouple. Commercial pyrometers 
with a resolution of 0.1 °C are available. 
One problem that needs to be addressed when you use a pyrometer is the emissivity 
of the object whose temperature you want to measure. The emissivity is a number 
between 0 and 1 and reﬂects the object’s effectiveness in emitting energy as thermal 
radiation. Pyrometers are typically calibrated for emissivity = 1 (i.e., a ‘black body’),

44
3
Sensors
Fig. 3.13 Energy emitted from black body. Notice that the wavelength peak shifts left with 
increasing temperature and that the total energy emitted (the area under the curves) increases with 
temperature
Fig. 3.14 A thermopile
but the emissivity of a shiny metal surface can be as low as 0.1. On the more advanced 
pyrometers, you can set the emissivity number. 
One more thing: Pyrometers do not work through glass, so even if there is a 
window in your vacuum chamber, you cannot use it to read the temperature of an 
object inside with a pyrometer. If that is what you need to do, the window must be 
made of an infrared transparent material such as silicon or sapphire, depending on 
the temperature range. Potassium bromide has a very wide transparency range in the 
infrared but is more expensive. 
Some labs use ‘disappearing-ﬁlament’ pyrometers where you simply heat a ﬁla-
ment until its color matches that of the object (they take advantage of Wien’s law 
rather than Stefan–Boltzmann’s law). This could be a good alternative if you need 
to measure for example the temperature of a ﬁlament inside a vacuum chamber that 
only has plain glass windows.

3.3 The Strain Gauge Principle
45
3.3 
The Strain Gauge Principle 
3.3.1 
Strain Gauges 
The resistance of a conductor with cross-sectional area A and length L is 
up per R equals rho StartFraction upper L Over upper A EndFraction
up
per R equals rho StartFraction upper L Over upper A EndFraction
where ρ is the resistivity of the conductor material. If the conductor is subjected to 
some tension, for example, if we pull both ends, see Fig. 3.15, then the resistance 
will change. 
The resistance will change because the parameters in Eq. (3.9) are affected by the 
tension; the conductor will be a little longer (L = L0 + dL), the area will decrease (A 
= A0 – dA) and for some materials even ρ will change (‘piezoresistive’ materials). 
The most common material used in sensors (‘strain gauges’) is Constantan (yes, the 
same alloy that we use in some thermocouples). Constantan is used because it has a 
low-temperature coefﬁcient and high ‘strain sensitivity’, i.e., the resistance changes 
a lot when it is subjected to strain or tension. 
For Constantan, it is mostly a change in the length that is causing the change in 
resistance. The ‘gauge factor’ is deﬁned as the quotient between the relative change 
in resistance and the relative change in length: 
k equ als StartFraction d upper R divided by upper R Over d upper L divided by upper L EndFraction
k equ
als StartFraction d upper R divided by upper R Over d upper L divided by upper L EndFraction
(dL/L is, by deﬁnition, the ‘strain’, hence the name ‘strain gauge’.) For Constantan, k 
is approximately 2. Instead of a circular conductor, as indicated in Fig. 3.15, a strain  
gauge is made from a thin foil that is folded back and forth and then placed between 
two substrates, see Fig. 3.16.
To use it in an application, it must be glued to the object. The gluing is impor-
tant; you must use a special glue to make sure the strain gauge is subjected to the 
same strain as the object. And herein lies the problem. Assuming the object whose 
strain we are trying to measure, is not made of Constantan (it never is, think ‘car 
chassis’) then the object will not be of the same material as the strain gauge and that 
implies that the object and the strain gauge do not have the same temperature coef-
ﬁcient. If the temperature changes, the object, and the strain gauge will not expand/
Fig. 3.15 Conductor 
subjected to tension 
L0 
A 
F 

46
3
Sensors
Fig. 3.16 Strain gauge. 
They come in a huge range 
of dimensions, but a typical 
sensor element is 1 × 2 cm
contract equally, and since they are glued hard together, that difference in expan-
sion/contraction will cause a strain in the gauge. This is called a ‘false’ strain or an 
‘ostensible’ strain. 
That means that if we only measure the resistance of the strain gauge, there is no 
way to tell if a change in resistance is caused by a ‘real’ strain or a ‘false’ strain. We 
must be smarter than that. 
The trick is to apply the strain gauges pairwise so that they ‘counteract’; when 
there is a ‘real’ strain, one is stretched and the other one is compressed. By subtracting 
the resistance of one from the other, not only do we eliminate ‘false’ strain we also 
amplify the signal by a factor of 2. Figure 3.17 illustrates an example. 
First, if we assume that the resistance of the gauge ‘at rest’ is R0, we can write 
the resistance as 
up per R  eq u a ls u
p
pe r R  0 plus d upper R equals upper R 0 left parenthesis 1 plus StartFraction d upper R Over upper R 0 EndFraction right parenthesis equals upper R 0 left parenthesis 1 plus normal upper Delta right parenthesis
up
p
er R eq u al
s upper R 0 plus d upper R equals upper R 0 left parenthesis 1 plus StartFraction d upper R Over upper R 0 EndFraction right parenthesis equals upper R 0 left parenthesis 1 plus normal upper Delta right parenthesis
where ∆= dR/R0 is the relative change in resistance. In Fig. 3.17, we have glued one 
strain gauge on the top side of the girder and one on the bottom side. If we subtract 
them, we get 
up er R Su b script m Ba s eline equals  upp
er R 0 left parenthesis 1 plus normal upper Delta 1 right parenthesis minus upper R 0 left parenthesis 1 plus normal upper Delta 2 right parenthesis equals upper R 0 left parenthesis normal upper Delta 1 minus normal upper Delta 2 right parenthesis
When the girder is subjected to a force, it will bend downwards and that will 
stretch the gauge on the top side and compress the gauge on the bottom side. We will 
assume here that the gauge on the bottom side is compressed as much as the gauge 
on the top side is stretched. That means that the gauge on the top side has a positive
Fig. 3.17 Strain gauges are 
applied pairwise 

3.3 The Strain Gauge Principle
47
∆and the one on the bottom side has a negative ∆; ∆2 = −∆1. Hence, for a ‘real’ 
strain, Eq. (3.12) becomes 
up er R Sub script m Baselin
e equals upper R 0 left parenthesis normal upper Delta 1 minus left parenthesis minus normal upper Delta 1 right parenthesis right parenthesis equals 2 upper R 0 normal upper Delta 1
On the other hand, if we have a ‘false’ strain due to a temperature change, 
both gauges will be stretched/compressed in the same direction, i.e., ∆2 = ∆1, 
and Eq. (3.12) becomes 
up er R Sub s cript m
 Baseline equals upper R 0 left parenthesis normal upper Delta 1 minus normal upper Delta 1 right parenthesis equals 0
By applying the gauges pairwise in a counteracting way and then subtracting their 
resistances, we get a reading that is independent of variations in temperature. 
However, we are still measuring resistance and we would really like to measure 
voltage. There are two reasons for that. First, we can measure voltage more accurately 
than resistance, and second, we can amplify voltage. 
So, if we would make a wishing list, we would like to have an electric circuit that 
can produce a voltage that is proportional to ∆1 −∆2, i.e., a circuit that produces 
u S ubscrip t  m 
Baseline equals k left parenthesis normal upper Delta 1 minus normal upper Delta 2 right parenthesis
That would be a voltage that only reacts to ‘real’ strains and would produce 0 V 
for ‘false’ strains. Does such a circuit exist? Yes, it does. It may be one of the most 
common circuits in electrical measurements. It is called the Wheatstone bridge. 
3.3.2 
The Wheatstone Bridge 
Figure 3.18 illustrates the Wheatstone bridge where the strain gauges from Fig. 3.17 
have been connected in the upper branch of the bridge. 
Fig. 3.18 The Wheatstone 
bridge

48
3
Sensors
The ‘bridge voltage’ is the potential difference between points A and B: 
Sta rtLay out 1 s
t Row  1st Column u Subscript b 2nd Column equals upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline equals StartFraction upper R 0 left parenthesis 1 plus normal upper Delta 1 right parenthesis Over upper R 0 left parenthesis 1 plus normal upper Delta 1 right parenthesis plus upper R 0 left parenthesis 1 plus normal upper Delta 2 right parenthesis EndFraction upper U 0 minus StartFraction upper R 0 Over upper R 0 plus upper R 0 EndFraction upper U 0 equals 2nd Row 1st Column Blank 2nd Column equals left parenthesis StartFraction 1 plus normal upper Delta 1 Over 2 plus normal upper Delta 1 plus normal upper Delta 2 EndFraction minus one half right parenthesis upper U 0 equals StartFraction 2 plus 2 normal upper Delta 1 minus 2 minus normal upper Delta 1 minus normal upper Delta 2 Over 2 left parenthesis 2 plus normal upper Delta 1 plus normal upper Delta 2 right parenthesis EndFraction upper U 0 3rd Row 1st Column Blank 2nd Column equals StartFraction upper U 0 Over 2 EndFraction dot StartFraction normal upper Delta 1 minus normal upper Delta 2 Over 2 plus normal upper Delta 1 plus normal upper Delta 2 EndFraction EndLayout
Start L ayout 1st R o w 1st C o
lumn u Subscript b 2nd Column equals upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline equals StartFraction upper R 0 left parenthesis 1 plus normal upper Delta 1 right parenthesis Over upper R 0 left parenthesis 1 plus normal upper Delta 1 right parenthesis plus upper R 0 left parenthesis 1 plus normal upper Delta 2 right parenthesis EndFraction upper U 0 minus StartFraction upper R 0 Over upper R 0 plus upper R 0 EndFraction upper U 0 equals 2nd Row 1st Column Blank 2nd Column equals left parenthesis StartFraction 1 plus normal upper Delta 1 Over 2 plus normal upper Delta 1 plus normal upper Delta 2 EndFraction minus one half right parenthesis upper U 0 equals StartFraction 2 plus 2 normal upper Delta 1 minus 2 minus normal upper Delta 1 minus normal upper Delta 2 Over 2 left parenthesis 2 plus normal upper Delta 1 plus normal upper Delta 2 right parenthesis EndFraction upper U 0 3rd Row 1st Column Blank 2nd Column equals StartFraction upper U 0 Over 2 EndFraction dot StartFraction normal upper Delta 1 minus normal upper Delta 2 Over 2 plus normal upper Delta 1 plus normal upper Delta 2 EndFraction EndLayout
Sta rtLay
out  1
s
t
 R o w 1st Column u Subscript b 2nd Column equals upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline equals StartFraction upper R 0 left parenthesis 1 plus normal upper Delta 1 right parenthesis Over upper R 0 left parenthesis 1 plus normal upper Delta 1 right parenthesis plus upper R 0 left parenthesis 1 plus normal upper Delta 2 right parenthesis EndFraction upper U 0 minus StartFraction upper R 0 Over upper R 0 plus upper R 0 EndFraction upper U 0 equals 2nd Row 1st Column Blank 2nd Column equals left parenthesis StartFraction 1 plus normal upper Delta 1 Over 2 plus normal upper Delta 1 plus normal upper Delta 2 EndFraction minus one half right parenthesis upper U 0 equals StartFraction 2 plus 2 normal upper Delta 1 minus 2 minus normal upper Delta 1 minus normal upper Delta 2 Over 2 left parenthesis 2 plus normal upper Delta 1 plus normal upper Delta 2 right parenthesis EndFraction upper U 0 3rd Row 1st Column Blank 2nd Column equals StartFraction upper U 0 Over 2 EndFraction dot StartFraction normal upper Delta 1 minus normal upper Delta 2 Over 2 plus normal upper Delta 1 plus normal upper Delta 2 EndFraction EndLayout
St a rtL a you
t 1st Row 1st Column u Subscript b 2nd Column equals upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline equals StartFraction upper R 0 left parenthesis 1 plus normal upper Delta 1 right parenthesis Over upper R 0 left parenthesis 1 plus normal upper Delta 1 right parenthesis plus upper R 0 left parenthesis 1 plus normal upper Delta 2 right parenthesis EndFraction upper U 0 minus StartFraction upper R 0 Over upper R 0 plus upper R 0 EndFraction upper U 0 equals 2nd Row 1st Column Blank 2nd Column equals left parenthesis StartFraction 1 plus normal upper Delta 1 Over 2 plus normal upper Delta 1 plus normal upper Delta 2 EndFraction minus one half right parenthesis upper U 0 equals StartFraction 2 plus 2 normal upper Delta 1 minus 2 minus normal upper Delta 1 minus normal upper Delta 2 Over 2 left parenthesis 2 plus normal upper Delta 1 plus normal upper Delta 2 right parenthesis EndFraction upper U 0 3rd Row 1st Column Blank 2nd Column equals StartFraction upper U 0 Over 2 EndFraction dot StartFraction normal upper Delta 1 minus normal upper Delta 2 Over 2 plus normal upper Delta 1 plus normal upper Delta 2 EndFraction EndLayout
S
t
art Layo ut 1st  Row  1st  Column u Subscript b 2nd Column equals upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline equals StartFraction upper R 0 left parenthesis 1 plus normal upper Delta 1 right parenthesis Over upper R 0 left parenthesis 1 plus normal upper Delta 1 right parenthesis plus upper R 0 left parenthesis 1 plus normal upper Delta 2 right parenthesis EndFraction upper U 0 minus StartFraction upper R 0 Over upper R 0 plus upper R 0 EndFraction upper U 0 equals 2nd Row 1st Column Blank 2nd Column equals left parenthesis StartFraction 1 plus normal upper Delta 1 Over 2 plus normal upper Delta 1 plus normal upper Delta 2 EndFraction minus one half right parenthesis upper U 0 equals StartFraction 2 plus 2 normal upper Delta 1 minus 2 minus normal upper Delta 1 minus normal upper Delta 2 Over 2 left parenthesis 2 plus normal upper Delta 1 plus normal upper Delta 2 right parenthesis EndFraction upper U 0 3rd Row 1st Column Blank 2nd Column equals StartFraction upper U 0 Over 2 EndFraction dot StartFraction normal upper Delta 1 minus normal upper Delta 2 Over 2 plus normal upper Delta 1 plus normal upper Delta 2 EndFraction EndLayout
Star t Lay o ut 1
st 
Row 1st Column u Subscript b 2nd Column equals upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline equals StartFraction upper R 0 left parenthesis 1 plus normal upper Delta 1 right parenthesis Over upper R 0 left parenthesis 1 plus normal upper Delta 1 right parenthesis plus upper R 0 left parenthesis 1 plus normal upper Delta 2 right parenthesis EndFraction upper U 0 minus StartFraction upper R 0 Over upper R 0 plus upper R 0 EndFraction upper U 0 equals 2nd Row 1st Column Blank 2nd Column equals left parenthesis StartFraction 1 plus normal upper Delta 1 Over 2 plus normal upper Delta 1 plus normal upper Delta 2 EndFraction minus one half right parenthesis upper U 0 equals StartFraction 2 plus 2 normal upper Delta 1 minus 2 minus normal upper Delta 1 minus normal upper Delta 2 Over 2 left parenthesis 2 plus normal upper Delta 1 plus normal upper Delta 2 right parenthesis EndFraction upper U 0 3rd Row 1st Column Blank 2nd Column equals StartFraction upper U 0 Over 2 EndFraction dot StartFraction normal upper Delta 1 minus normal upper Delta 2 Over 2 plus normal upper Delta 1 plus normal upper Delta 2 EndFraction EndLayout
St a
rtL a yout 1st Row 1st Column u Subscript b 2nd Column equals upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline equals StartFraction upper R 0 left parenthesis 1 plus normal upper Delta 1 right parenthesis Over upper R 0 left parenthesis 1 plus normal upper Delta 1 right parenthesis plus upper R 0 left parenthesis 1 plus normal upper Delta 2 right parenthesis EndFraction upper U 0 minus StartFraction upper R 0 Over upper R 0 plus upper R 0 EndFraction upper U 0 equals 2nd Row 1st Column Blank 2nd Column equals left parenthesis StartFraction 1 plus normal upper Delta 1 Over 2 plus normal upper Delta 1 plus normal upper Delta 2 EndFraction minus one half right parenthesis upper U 0 equals StartFraction 2 plus 2 normal upper Delta 1 minus 2 minus normal upper Delta 1 minus normal upper Delta 2 Over 2 left parenthesis 2 plus normal upper Delta 1 plus normal upper Delta 2 right parenthesis EndFraction upper U 0 3rd Row 1st Column Blank 2nd Column equals StartFraction upper U 0 Over 2 EndFraction dot StartFraction normal upper Delta 1 minus normal upper Delta 2 Over 2 plus normal upper Delta 1 plus normal upper Delta 2 EndFraction EndLayout
St a rtL a yout 1st Row 1st Column u Subscript b 2nd Column equals upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline equals StartFraction upper R 0 left parenthesis 1 plus normal upper Delta 1 right parenthesis Over upper R 0 left parenthesis 1 plus normal upper Delta 1 right parenthesis plus upper R 0 left parenthesis 1 plus normal upper Delta 2 right parenthesis EndFraction upper U 0 minus StartFraction upper R 0 Over upper R 0 plus upper R 0 EndFraction upper U 0 equals 2nd Row 1st Column Blank 2nd Column equals left parenthesis StartFraction 1 plus normal upper Delta 1 Over 2 plus normal upper Delta 1 plus normal upper Delta 2 EndFraction minus one half right parenthesis upper U 0 equals StartFraction 2 plus 2 normal upper Delta 1 minus 2 minus normal upper Delta 1 minus normal upper Delta 2 Over 2 left parenthesis 2 plus normal upper Delta 1 plus normal upper Delta 2 right parenthesis EndFraction upper U 0 3rd Row 1st Column Blank 2nd Column equals StartFraction upper U 0 Over 2 EndFraction dot StartFraction normal upper Delta 1 minus normal upper Delta 2 Over 2 plus normal upper Delta 1 plus normal upper Delta 2 EndFraction EndLayout
Now we will make an approximation. ∆is the relative change in the resistance 
and it is very small. (Pull a copper wire and try to imagine how much it expands…)
∆is of the order of permille (‰). That means that the denominator above, 2 + ∆1 
+ ∆2 ≈ 2, and we can write the bridge voltage above as 
u S ubscript b Baseline equals StartFraction upper U 0 Over 4 EndFraction left parenthesis normal upper Delta 1 minus normal upper Delta 2 right parenthesis
u Subs c rip
t b Baseline equals StartFraction upper U 0 Over 4 EndFraction left parenthesis normal upper Delta 1 minus normal upper Delta 2 right parenthesis
The bridge voltage is proportional to the difference in relative change in resistance, 
and hence it does not react to ‘false’ strains due to changes in temperature. 
The bridge in Fig. 3.18 is a ‘half-bridge’. In a ‘full bridge’, we apply four strain 
gauges to the girder, two on each side, see Fig. 3.19. 
Figure 3.20 illustrates how the gauges are connected in the Wheatstone bridge. 
The bridge voltage in Fig. 3.20 is two times higher than in Eq. (3.16).
At ﬁrst sight, the beam with strain gauges in Fig. 3.17 might appear to have a 
limited number of applications; you can measure the strain in a cantilever, but how 
often do you need to do that? Well, that is just wrong. This ‘strain gauge principle’ is 
one of the most versatile and common sensor techniques in electrical measurement 
systems. It is used to measure a wide range of physical quantities, like acceleration, 
position, pressure, torque, viscosity, ﬂow, humidity, etc. One of the reasons it has 
become so popular is the emergence of MEMS technology (MicroElectro Mechanical 
Systems); the beam with the four strain gauges can be miniaturized to sub-mm 
scales. Implementing strain gauges in semiconductor material also makes it possible
Fig. 3.19 Four gauges 

3.3 The Strain Gauge Principle
49
Fig. 3.20 A full bridge
to integrate them on silicon. Below we will present several common applications of 
the strain gauge principle to give you an idea of the versatility. 
3.3.3 
Accelerometers 
Figure 3.21 illustrates an accelerometer based on the strain gauge principle. A minia-
ture cantilever with four strain gauges is placed in an isolated housing. To increase 
the sensitivity, a ‘seismic mass’ is placed on the end of the cantilever and the entire 
system is ﬁlled with some oil to ‘damp’ the system. 
The strain gauges are internally connected in a Wheatstone bridge, see Fig. 3.22. 
As a matter of fact, this is (typically) how you can identify sensors based on the 
strain gauge principle; the electrical interface consists of four wires. Two should 
be connected to ‘power’ and the other two are the Wheatstone bridge voltage (that 
should be connected to an instrumentation ampliﬁer, see Chap. 4).
The entire sensor is of the order of 10 mm and Fig. 3.23 illustrates a typical 
sensor. They are used abundantly in car crash testing and vibration monitoring and
Fig. 3.21 Accelerometer 

50
3
Sensors
Fig. 3.22 Most likely you have a strain gauge sensor when the electrical interface consists of four 
wires; connect red/black to power and green/blue to the ampliﬁer (mind the polarity)
Fig. 3.23 Piezoresistive accelerometer: H × W × L = 5 × 10 × 12 mm 
are available in ranges from a few g up to thousands of g and are also available in 
‘multi axis’ versions (2- or 3-axis). 
3.3.4 
Pressure Sensors 
In Fig. 3.24, piezoresistive strain gauges have been integrated onto a silicon 
membrane to form a pressure gauge. The strain gauges are connected in a Wheatstone 
bridge (as in Fig. 3.22); the signal interface is four wires.
The four strain gauges are placed on the silicon membrane so that two are stretched 
and two are compressed when the membrane is subjected to a force due to air pressure. 
Figure 3.25 illustrates the membrane in the sensor housing.
Figure 3.25 illustrates an ‘absolute’ pressure sensor, but they are also available 
as ‘differential’ sensors. Differential sensors would also have a pressure inlet on the 
bottom side of the sensor housing in Fig. 3.25. Figure 3.26 illustrates a differential

3.3 The Strain Gauge Principle
51
Fig. 3.24 Piezoresistive elements on silicon
Fig. 3.25 The strain gauges are stretched/compressed due to the air pressure
pressure sensor from NXP Semiconductors. (Notice the four signal interface pins.) 
These sensors are available in ranges up to about 200 kPa.
3.3.5 
Flow Sensors 
Once we can measure pressure, we can measure ﬂow. In this context ‘ﬂow’ means 
volume ﬂow, [m3/s], and ‘ﬂuid’ refers to gas or liquid (but you may assume liquid if 
it makes understanding easier). Flow measurements are often based on Bernoulli’s

52
3
Sensors
Fig. 3.26 Differential 
pressure gauge based on the 
strain gauge principle
equation (which is really a ‘conservation of energy law’). To measure ﬂow in a ﬂuid 
pipe, an obstacle is introduced; the pipe diameter is narrowed down, see Fig. 3.27. 
Bernoulli’s equation states that 
StartFraction p 1 Over rho g EndFraction Underscript StartLayout 1st Row left single quotation mark pressure right single quotation mark 2nd Row energy EndLayout Endscripts plus StartFraction v 1 squared Over 2 g EndFraction Underscript StartLayout 1st Row kinetic 2nd Row energy EndLayout Endscripts plus h 1 Underscript StartLayout 1st Row potential 2nd Row energy EndLayout Endscripts equals StartFraction p 2 Over rho g EndFraction plus StartFraction v 2 squared Over 2 g EndFraction plus h 2
Sta
rtFraction 
p 1 Ove
r
 rh
o g EndFraction Underscript StartLayout 1st Row left single quotation mark pressure right single quotation mark 2nd Row energy EndLayout Endscripts plus StartFraction v 1 squared Over 2 g EndFraction Underscript StartLayout 1st Row kinetic 2nd Row energy EndLayout Endscripts plus h 1 Underscript StartLayout 1st Row potential 2nd Row energy EndLayout Endscripts equals StartFraction p 2 Over rho g EndFraction plus StartFraction v 2 squared Over 2 g EndFraction plus h 2
Sta
rtFracti
on p 1 
O
ver
 rho g End
Fractio
n Underscript StartLayout 1st Row left single quotation mark pressure right single quotation mark 2nd Row energy EndLayout Endscripts plus StartFraction v 1 squared Over 2 g EndFraction Underscript StartLayout 1st Row kinetic 2nd Row energy EndLayout Endscripts plus h 1 Underscript StartLayout 1st Row potential 2nd Row energy EndLayout Endscripts equals StartFraction p 2 Over rho g EndFraction plus StartFraction v 2 squared Over 2 g EndFraction plus h 2
Sta rtFra
ction p 1 Over rho g EndFraction Underscript StartLayout 1st Row left single quotation mark pressure right single quotation mark 2nd Row energy EndLayout Endscripts plus StartFraction v 1 squared Over 2 g EndFraction Underscript StartLayout 1st Row kinetic 2nd Row energy EndLayout Endscripts plus h 1 Underscript StartLayout 1st Row potential 2nd Row energy EndLayout Endscripts equals StartFraction p 2 Over rho g EndFraction plus StartFraction v 2 squared Over 2 g EndFraction plus h 2
Sta rtFr
action p 1 Over rho g EndFraction Underscript StartLayout 1st Row left single quotation mark pressure right single quotation mark 2nd Row energy EndLayout Endscripts plus StartFraction v 1 squared Over 2 g EndFraction Underscript StartLayout 1st Row kinetic 2nd Row energy EndLayout Endscripts plus h 1 Underscript StartLayout 1st Row potential 2nd Row energy EndLayout Endscripts equals StartFraction p 2 Over rho g EndFraction plus StartFraction v 2 squared Over 2 g EndFraction plus h 2
where ρ is the ﬂuid density, g is the gravitational constant, hx is the height and px is 
the static pressure that the ﬂuid exerts on the pipe walls. If we assume that h1 = h2,
Fig. 3.27 Flow measurement (using a ‘Venturi pipe’) 

3.3 The Strain Gauge Principle
53
we can write Eq. (3.17) as  
StartFraction p 1 Over rho EndFraction plus StartFraction v 1 squared Over 2 EndFraction equals StartFraction p 2 Over rho EndFraction plus StartFraction v 2 squared Over 2 EndFraction right double arrow StartFraction 1 Over rho EndFraction left parenthesis p 1 minus p 2 right parenthesis equals one half left parenthesis v 2 squared minus v 1 squared right parenthesis
St artFr
action p 1 Over rho EndFraction plus StartFraction v 1 squared Over 2 EndFraction equals StartFraction p 2 Over rho EndFraction plus StartFraction v 2 squared Over 2 EndFraction right double arrow StartFraction 1 Over rho EndFraction left parenthesis p 1 minus p 2 right parenthesis equals one half left parenthesis v 2 squared minus v 1 squared right parenthesis
St ar tFraction p 1 Over rho EndFraction plus StartFraction v 1 squared Over 2 EndFraction equals StartFraction p 2 Over rho EndFraction plus StartFraction v 2 squared Over 2 EndFraction right double arrow StartFraction 1 Over rho EndFraction left parenthesis p 1 minus p 2 right parenthesis equals one half left parenthesis v 2 squared minus v 1 squared right parenthesis
St artFr
action p 1 Over rho EndFraction plus StartFraction v 1 squared Over 2 EndFraction equals StartFraction p 2 Over rho EndFraction plus StartFraction v 2 squared Over 2 EndFraction right double arrow StartFraction 1 Over rho EndFraction left parenthesis p 1 minus p 2 right parenthesis equals one half left parenthesis v 2 squared minus v 1 squared right parenthesis
St ar tFraction p 1 Over rho EndFraction plus StartFraction v 1 squared Over 2 EndFraction equals StartFraction p 2 Over rho EndFraction plus StartFraction v 2 squared Over 2 EndFraction right double arrow StartFraction 1 Over rho EndFraction left parenthesis p 1 minus p 2 right parenthesis equals one half left parenthesis v 2 squared minus v 1 squared right parenthesis
StartF raction p 1 Over rho EndFraction plus StartFraction v 1 squared Over 2 EndFraction equals StartFraction p 2 Over rho EndFraction plus StartFraction v 2 squared Over 2 EndFraction right double arrow StartFraction 1 Over rho EndFraction left parenthesis p 1 minus p 2 right parenthesis equals one half left parenthesis v 2 squared minus v 1 squared right parenthesis
S
t
art
Fr actio
n
 
p 1 Over rho EndFraction plus StartFraction v 1 squared Over 2 EndFraction equals StartFraction p 2 Over rho EndFraction plus StartFraction v 2 squared Over 2 EndFraction right double arrow StartFraction 1 Over rho EndFraction left parenthesis p 1 minus p 2 right parenthesis equals one half left parenthesis v 2 squared minus v 1 squared right parenthesis
In general, the relationship between the ﬂow, q, the pipe area A and the ﬂuid 
velocity v is 
q equa ls upper A 
dot v left bracket m cubed slash s right bracket
Since the ﬂow q must be a constant everywhere in the pipe, we must have that 
v S
ub sc ript x Superscript 2 Baseline equals StartFraction 1 Over upper A Subscript x Superscript 2 Baseline EndFraction q squared right double arrow v 2 squared minus v 1 squared equals left parenthesis StartFraction 1 Over upper A 2 squared EndFraction minus StartFraction 1 Over upper A 1 squared EndFraction right parenthesis q squared
v Sub
scr ipt x
 S upers
cr i
p t 2 Baseline equals StartFraction 1 Over upper A Subscript x Superscript 2 Baseline EndFraction q squared right double arrow v 2 squared minus v 1 squared equals left parenthesis StartFraction 1 Over upper A 2 squared EndFraction minus StartFraction 1 Over upper A 1 squared EndFraction right parenthesis q squared
v S
ub
sc ript x Superscript 2 Baseline equals StartFraction 1 Over upper A Subscript x Superscript 2 Baseline EndFraction q squared right double arrow v 2 squared minus v 1 squared equals left parenthesis StartFraction 1 Over upper A 2 squared EndFraction minus StartFraction 1 Over upper A 1 squared EndFraction right parenthesis q squared
v S
u
b
scr
ipt x Superscript 2 Baseline equals StartFraction 1 Over upper A Subscript x Superscript 2 Baseline EndFraction q squared right double arrow v 2 squared minus v 1 squared equals left parenthesis StartFraction 1 Over upper A 2 squared EndFraction minus StartFraction 1 Over upper A 1 squared EndFraction right parenthesis q squared
Inserting Eq. (3.20) into Eq. (3.18) and solving for q gives us 
q equals StartRoot StartStartFraction 2 OverOver rho left parenthesis StartFraction 1 Over upper A 2 squared minus upper A 1 squared EndFraction right parenthesis EndEndFraction EndRoot dot StartRoot p 1 minus p 2 EndRoot equals k StartRoot normal upper Delta p EndRoot
 
|
|
|
q equals StartRoot StartStartFraction 2 OverOver rho left parenthesis StartFraction 1 Over upper A 2 squared minus upper A 1 squared EndFraction right parenthesis EndEndFraction EndRoot dot StartRoot p 1 minus p 2 EndRoot equals k StartRoot normal upper Delta p EndRoot
q
 
equals StartRoot StartStartFraction 2 OverOver rho left parenthesis StartFraction 1 Over upper A 2 squared minus upper A 1 squared EndFraction right parenthesis EndEndFraction EndRoot dot StartRoot p 1 minus p 2 EndRoot equals k StartRoot normal upper Delta p EndRoot
q e
quals
 
S tartRoot StartStartFraction 2 OverOver rho left parenthesis StartFraction 1 Over upper A 2 squared minus upper A 1 squared EndFraction right parenthesis EndEndFraction EndRoot dot StartRoot p 1 minus p 2 EndRoot equals k StartRoot normal upper Delta p EndRoot√q e quals  StartRoot StartStartFraction 2 OverOver rho left parenthesis StartFraction 1 Over upper A 2 squared minus upper A 1 squared EndFraction right parenthesis EndEndFraction EndRoot dot StartRoot p 1 minus p 2 EndRoot equals k StartRoot normal upper Delta p EndRoot
√
q 
equals StartRoot StartStartFraction 2 OverOver rho left parenthesis StartFraction 1 Over upper A 2 squared minus upper A 1 squared EndFraction right parenthesis EndEndFraction EndRoot dot StartRoot p 1 minus p 2 EndRoot equals k StartRoot normal upper Delta p EndRoot
From Eq. (3.21), we can see that the ﬂow is proportional to the square root of 
the difference in static pressure in the pipe between the two points with different 
cross-section areas. Two capillary tubes are inserted at both points and the pressure 
difference is measured with a differential pressure gauge as illustrated in Fig. 3.27. 
The tube in Fig. 3.27 with the ‘slender waist’ is called a ‘Venturi pipe’. 
3.3.6 
Fluid Level Sensors 
Same thing with ﬂuid level; once you can measure pressure, you can measure ﬂuid 
level. In Fig. 3.28, a tube is placed in the (empty) vessel, and when it ﬁlls with ﬂuid, 
the air trapped inside the tube is compressed and the pressure gauge will generate a 
signal proportional to the ﬂuid level.
3.3.7 
Torque Sensors 
Torque is another physical quantity that is readily measured with strain gauges. 
Figure 3.29 illustrates a shaft, or a spindle, subjected to some torque M. The torque 
will induce two opposing strains in the shaft. The tensile strain is in the direction of the 
torque with an angle of 45° versus the shaft direction, see Fig. 3.29. The compressive 
strain is in the orthogonal direction, at an angle of 90° versus the ‘tensile’ strain. (Roll

54
3
Sensors
Fig. 3.28 Fluid-level sensor
a piece of paper, twist it, and observe the tensions.) Hence, we can get counter-acting 
strain gauges by applying them pairwise at an angle of 90° as illustrated in Fig. 3.29. 
For rotating shafts, the signals are transferred to the ‘outside’ by sliprings. 
Fig. 3.29 Measuring torque

3.3 The Strain Gauge Principle
55
3.3.8 
Viscosity Sensors 
If you have a degree in physics, you have probably measured viscosity in some 
undergraduate lab exercise by measuring the time it takes for an object to sink in 
some ﬂuid. That is ﬁne, but it doesn’t provide a ‘sensor’ for us. The strain gauge does; 
if you can measure torque, you can measure viscosity. If you rotate a propeller (at a 
constant speed) in the ﬂuid, the torque exerted on the propeller shaft is proportional 
to the viscosity. 
3.3.9 
Load Cell 
Figure 3.30 illustrates the load cell principle. When the ‘cell’ is subjected to a load the 
vertical strain gauges will be compressed, and the horizontal ones will be extracted, 
and we can again place the strain gauges in a Wheatstone bridge to get a signal that 
only reacts to ‘real’ strains and not to false strains due to a variation in temperature. 
Load cells are mostly used for weighting (people, cars, and trucks) but can also 
be used to measure volume/level in a tank (volume/level is proportional to weight). 
It is also used to provide force feedback in robotic applications and rocket thrust 
measurements. 
We could give you more examples of applications for the strain gauge principle, but 
we think we have made the point; the strain gauge principle is a very versatile sensor 
technique and omnipresent. Instead, we will present some other sensor techniques 
that are almost as versatile.
Fig. 3.30 The load cell 
principle 

56
3
Sensors
3.4 
Piezoelectric Crystals 
A ‘piezoelectric’ crystal has a symmetric crystal lattice of Silicon and Oxygen atoms, 
see Fig. 3.31. When the crystal is ‘at rest’ the positive Silicon atoms and the negative 
Oxygen atoms are arranged so that there is no net charge on any surface; the center 
of charge for positive and negative atoms coincide. 
However, if the crystal is deformed by an external force, see Fig. 3.32, the atoms 
in the lattice are displaced and the centers for positive and negative charges no longer 
coincide and a net charge can be detected on the surface. 
The amount of charge is proportional to the external force deforming the crystal. 
Just like the strain gauge case, we have a method to detect force, and we saw in the 
previous sections how that can be used to measure many other quantities. The charge 
depends very linearly on the force (just like the strain gauge arrangement), but the 
piezoelectric crystal has one advantage over the strain gauges; it is unaffected by 
temperature variations. 
However, it has some disadvantages too; we need to measure the charge that 
is generated by the force, and that is not as straightforward as it might seem. To 
understand the problem, we need a signal model of the crystal; we model it as a 
current/charge source that produces a charge Q = kF (F is the force on the crystal) 
and we model the crystal surfaces as a capacitor Cx, see Fig. 3.33.
That means that the voltage across the crystal is Ux = Q/Cx = kF/Cx, so by just  
measuring the voltage across the crystal would give us a number proportional to the 
force. The problem is that the capacitance Cx is very small and even if it is a non-
conducting material, there is still some ‘isolation resistance’ between the surfaces
Silicon atom 
Oxygen atom 
Centre of symmetry 
for postive and 
negative charge 
coincide. 
Electrodes 
Fig. 3.31 A piezoelectric crystal 
Centre of symmetry 
for positive charge. 
Centre of symmetry 
for negative charge. 
Fig. 3.32 A load will displace the centers of charge 

3.4 Piezoelectric Crystals
57
↑
Q = k F 
CX
RX
Rv
V 
Fig. 3.33 The piezoelectric crystal signal model
(modeled by Rx in Fig. 3.33). Hence, the crystal will discharge through Rx and the 
voltage will decrease exponentially: 
upper U Subscript x Baseline left parenthesis t right parenthesis equals StartFraction k upper F Over upper C Subscript x Baseline EndFraction e Superscript negative t divided by tau
up
er U S
ubscript x Baseline left parenthesis t right parenthesis equals StartFraction k upper F Over upper C Subscript x Baseline EndFraction e Superscript negative t divided by tau
where τ = RxCx. The isolation resistance is very large (1012 Ω) but  Cx is of the order 
of pF, so τ ≈ 1 s; the voltage drops to 36% in just one second. As a matter of fact, 
the situation is much worse than that. To measure the voltage across the surfaces, 
we need to connect a voltage meter, see Fig. 3.33, and when we do that, the input 
impedance of the voltage meter is connected in parallel with Rx, and a typical voltage 
meter has an input impedance Rv = 1 MΩ. The consequence is that instead of 1012
Ω, the charge will discharge through Rv and τ in Eq. (3.22) is of the order of 1 μs! 
The charge is gone long before we have a reasonable chance to record it. 
Measuring the charge on a piezoelectric crystal is obviously not that straightfor-
ward. The trick is to ‘fool’ the charge to leave the crystal surface immediately. That 
is what a ‘charge ampliﬁer’ does, see Fig. 3.34.
First, the negative op amp input is at ‘virtual’ ground. That means that the charge 
Q created on the crystal has three paths to ground: Through Cx, through Rx, or  
straight forward through no impedance at all. According to Kirchhoff’s current law, 
that means that all charge will go straight forward to the negative input of the op 
amp.
↑
Q = k F 
CX
RX
-
+ 
C 
Q = k F 
Uout 
Piezo crystal 
Fig. 3.34 A piezoelectric crystal with charge ampliﬁer 

58
3
Sensors
Once it reaches the op amp, it has nowhere else to go but ‘upwards’ to the external 
capacitor C; the output voltage will be 
upper  U  Subscript out Baseline equals minus StartFraction upper Q Over upper C EndFraction equals minus StartFraction k upper F Over upper C EndFraction
up p e r U Subscript out Baseline equals minus StartFraction upper Q Over upper C EndFraction equals minus StartFraction k upper F Over upper C EndFraction
up
per U Subscript out Baseline equals minus StartFraction upper Q Over upper C EndFraction equals minus StartFraction k upper F Over upper C EndFraction
It might seem like we just transferred the discharging problem from one capacitor 
to another, but that is wrong; C is an external capacitor that we can choose arbitrarily. 
It will have an isolation resistance too, but with the arrangement in Fig. 3.34, we can 
improve τ by many orders of magnitude. 
Still, τ will not be inﬁnite, and piezoelectric crystals are not suitable for measuring 
static forces, but it is a popular sensor technique in dynamic applications because of 
its robustness against temperature variations, linear nature, and reliability. 
3.5 
Hall Sensors 
When a charged particle moves in a magnetic ﬁeld a force will act on it and bend the 
trajectory according to Fleming’s right-hand rule. 
In Fig. 3.35, a current is injected into a ﬂat conductor (a metal strip) that at the same 
time is subjected to a magnetic ﬁeld. Due to the magnetic ﬁeld, the negative electrons 
will be forced to one side of the conductor and hence there will be a voltage across 
the conductor’s sides (perpendicular to the current’s direction and to the magnetic 
ﬁeld lines). This is called the ‘Hall effect’ after Edvin Hall who discovered this 
phenomenon in 1879 (while working on his doctoral thesis in physics). 
The voltage across the conductor is proportional to both the current and the 
magnetic ﬁeld, which indicates that the Hall effect has two major applications: 
Measuring currents (i.e., charge ﬂow) and measuring magnetic ﬁelds. In the ﬁrst
Fig. 3.35 The Hall effect 
principle 

3.6 Position Sensors
59
Fig. 3.36 Non-invasive ﬂow 
meter 
Fig. 3.37 Hall probe 
case, we use a constant magnetic ﬁeld and, in the other case, we use a constant 
current. 
Figure 3.36 illustrates a non-invasive ﬂow meter (for conducting ﬂuids, like water). 
When the ﬂuid in the ﬂow pipe passes through the (constant) magnetic ﬁeld, the 
charges will be forced to the sides of the tube where electrodes pick up the charge 
and the voltage across the tube will be proportional to the ﬂow q. Notice the advantage 
compared to the ﬂow meter in Fig. 3.27; the Hall effect ﬂow meter is non-invasive 
and does not interfere with the ﬂuid (but it only works for conducting ﬂuids with free 
ions). 
Figure 3.37 illustrates a Hall probe used to measure magnetic ﬁelds. A small metal 
plate/ﬁlm is integrated on a probe stick and a constant current is sent through the 
plate and the voltage is measured across the plate. 
3.6 
Position Sensors 
There is a plethora of position sensors on the market, and you really need to specify 
your needs in terms of accuracy, range, sensitivity, and reliability before you start 
searching for a position sensor. We will only cover one here; the Linear Variable 
Differential Transformer (LVDT). LVDTs emerged already in the 1930s to meet the 
need for displacement measurements in the process industry. The basic principle is 
illustrated in Fig. 3.38. A primary coil is wound on the same bobbin as two secondary 
coils and the ferromagnetic core is long enough to cover the primary coil and one 
of the secondary coils at both extremes. The primary coil is excited by an AC signal

60
3
Sensors
Fig. 3.38 The LVDT principle 
and as the core moves from one extreme to the other, the amplitudes of the signals 
transferred to the secondary coils will vary linearly with the core’s distance from the 
center position. The difference in amplitudes of the two secondary coils’ signals is 
an absolute measure of the core’s displacement from the center position. 
LVDTs are very linear (better than 1%), robust, and accurate. The resolution is in 
the low micrometer range. The sensitivity is of the order of millivolts per millimeter 
(‘millivolts’ referring to the difference in amplitudes between the secondary coils’ 
signals). LVDTs are not only used for displacement measurements but also as the 
sensing element in pressure gauges, force measurements, detection of gravitational 
waves, and calibration of atomic force microscopes. Hydraulic control systems and 
haptic robot interfaces are other areas of application. 
The signal conditioning required is an excitation source for the primary coil and 
demodulation circuitry for the secondary coils. The amplitudes of the secondary 
coils’ output depend on the core’s position x, but will also be inﬂuenced by the 
core material, the excitation frequency, the temperature, and the secondary coils’ 
design parameters (windings, length, diameter, etc.). It has been reported though, 
that the quotient between the difference and sum of the secondary coils’ signals is 
independent of temperature, excitation current, and excitation frequency [2]:

3.7 Photo Sensors
61
Sta rtFraction e 1 minus e 2 Over e 1 plus e 2 EndFraction equals k x
Sta rtFra
ctio
n e 1 minus e 2 Over e 1 plus e 2 EndFraction equals k x
Equation (3.24) is the key to successful demodulation of the LVDT signal. 
3.7 
Photo Sensors 
3.7.1 
Light Units 
Before, we get into photosensors, we need to deﬁne the units we use to describe 
light intensity. The power of a light source is in general measured in Watts [W] (= 
‘radial’ ﬂow), but it is common to use ‘luminous’ ﬂow for light sources in the visible 
wavelength range. The unit is ‘lumen’ [lm] (which is an SI unit) and is weighted 
according to the human eye’s response to different wavelengths. For example, a 
standard 40 W bulb (omnidirectional) emits 400 lm. 
Then there is ‘lux’ [lx] which is the (perceived) light power per unit area, i.e., 
1 lx  = 1 lm/m2. This is called ‘illumination’ or ‘luminous intensity’. Direct sunlight 
corresponds to 50,000–100,000 lx and typical ofﬁce lighting is about 300–500 lx. 
Example 3.2 What is the luminous intensity of a 40 W bulb at 1 m? 
Solution We know from above that it emits 400 lm. Assuming that the bulb is ‘omni-
directional’, at 1 m, the 400 lm is distributed over a sphere with an area of 4πr2 = 
4π12 = 12.57 m2. Hence, the illumination at 1 m is 400/12.57 = 32 lx. 
There are many kinds of photosensors, like photoresistors, photodiodes, photo-
transistors, etc., but here we will limit our presentation to the most common photode-
tectors used in a physics lab; photodiodes (of different kinds) and photomultipliers. 
3.7.2 
Photodiodes 
If a photon of sufﬁcient energy hits the depletion area between the p- and n-doped 
area in a diode, an electron–hole pair is created and because of the electric ﬁeld in the 
depletion region, the hole will move to the anode, and the electron will move to the 
cathode. If the diode electrodes are part of a closed circuit, a photocurrent will occur 
that is (a) in the ‘backward’ direction and (b) proportional to the light illuminance. 
This is illustrated in Fig. 3.39.
A photodiode is operated in one of two different modes: The ‘photovoltaic’ mode 
or the ‘photoconductive’ mode. In the photovoltaic mode, the anode and cathode are 
kept at the same potential (sometimes called the ‘zero-biased’ mode). The advantage 
of this mode is that it minimizes the ‘dark current’, i.e., the self-induced current

62
3
Sensors
++ +++ + + 
+ 
p
n
 
+ 
ID 
Fig. 3.39 The photodiode principle
due spontaneous creation of electron–hole pairs. Figure 3.40 illustrates an example 
where a photodiode is operated in the photovoltaic mode. 
Figure 3.41 illustrates a photodiode operating in the photoconductive mode where 
the photodiode is reversed-biased (cathode is at a higher potential than the anode). 
Fig. 3.40 Photovoltaic mode. Notice that the anode and cathode have the same potential. The 
output range is determined by the feedback resistor 
Fig. 3.41 Photoconductive mode

3.7 Photo Sensors
63
Fig. 3.42 The photodiode 
BPW21 
Anode 
Cathode 
The advantage of the photoconductive mode is that the reverse-biased voltage 
widens the depletion area and makes the diode more sensitive (more hole-electron 
pairs can be created) and it also improves the response time. The reason for the faster 
response is that when the depleted area is widened, the pn junction capacitance is 
decreased. The disadvantage of the photoconductive mode is that it increases the 
dark current. 
The sensitivity of a typical photodiode is of the order of 10 nA/lx. Figure 3.42 
illustrates the popular BPW21 photodiode that is optimized for green light and has 
a sensitivity of 9 nA/lx. 
A development of the photodiode is the PIN photodiode which consists of three 
layers, heavily doped p- and n-layers, and a lightly doped intrinsic area. This has 
two advantages. First, the depletion area where electron–hole pairs can be created 
is increased, and the wider depletion region decreases the capacitance even more 
which gives a faster response. 
3.7.3 
Avalanche Photodiodes 
Avalanche photodiodes have yet another layer (four layers) and they are operated at 
much higher reverse-biased voltages (near the break-down voltage). The idea of an 
avalanche photodiode is that when an electron–hole pair is created by incident light, 
the electrons are accelerated to a very high speed (because of the high reverse-biased 
voltage). When the electrons are accelerated through the fourth layer (a lightly doped 
p-layer) they will collide with the atoms and because of their high velocity, they will 
create new electrons (due to impact ionization). This will generate a multiplication 
effect and the multiplication increases with the reverse-biased voltage. The reverse-
biased voltage is of the order of 100–500 V and gain factors of up to 200 can be 
achieved, which makes them very sensitive. 
The disadvantages of avalanche photodiodes are that they are noisy, non-linear 
and you must handle a high DC voltage in your setup.

64
3
Sensors
3.7.4 
Position-Sensitive Detectors 
Position-sensitive detectors (PSDs) are photodiodes that produce currents depending 
on where the incident light hits the active surface. It consists of two photodiodes with 
a common cathode, see Figs. 3.44 and 3.45. 
As illustrated in Fig. 3.45, both photodiodes will generate a current when an 
incident light beam hits the surface, and the difference between these two currents is 
proportional to x (the distance between the incident light beam and the center of the 
active photodiode area). However, the difference between the currents also depends 
on the light’s intensity. To get a reading that is independent of the light intensity, the 
manufacturer recommends that you divide by the sum of the currents: 
Star tFraction upper I Subscript x Baseline 1 Baseline minus upper I Subscript x Baseline 2 Baseline Over upper I Subscript x Baseline 1 Baseline plus upper I Subscript x Baseline 2 Baseline EndFraction equals StartFraction 2 x Over upper L Subscript x Baseline EndFraction
Star tFract
io n upper I Subscript x Baseline 1 Baseline minus upper I Subscript x Baseline 2 Baseline Over upper I Subscript x Baseline 1 Baseline plus upper I Subscript x Baseline 2 Baseline EndFraction equals StartFraction 2 x Over upper L Subscript x Baseline EndFraction
Sta
rtFraction upper I Subscript x Baseline 1 Baseline minus upper I Subscript x Baseline 2 Baseline Over upper I Subscript x Baseline 1 Baseline plus upper I Subscript x Baseline 2 Baseline EndFraction equals StartFraction 2 x Over upper L Subscript x Baseline EndFraction
In the S3932 model illustrated in Fig. 3.43, the active area is 12 mm long. They 
are also available as two-dimensional detectors (x and y detectors). The common 
cathode is usually reverse-biased (5–10 V). Figure 3.46 illustrates the recommended 
signal conditioning where the currents are converted to voltages. 
Once you have the voltages, you can proceed with either analog electronics to 
generate the sum and difference currents (see solved Problem 3.4), or you can sample 
them and do it in software. (Since Eq. (3.25) involves division, it is recommended 
that you do it in software.) 
A very common application of PSDs is distance measuring by ‘triangulation’. 
Figure 3.47 illustrates the principle.
Depending on the distance to the obstacle, the reﬂected light will hit the PSD in 
a different position relative to the center and the PSD output will be proportional to 
the distance to the obstacle. For example, this is used by some projectors to measure 
the distance to the screen (enabling auto-focusing) and by vacuum robots to detect 
obstacles.
Fig. 3.43 PSD S3932 from 
Hamamatsu 
Fig. 3.44 Two photodiodes 
with common cathode

3.7 Photo Sensors
65
Fig. 3.45 PSD: current difference is proportional to x 
Fig. 3.46 Typical signal 
conditioning for PSD
3.7.5 
Photomultipliers 
Figure 3.48 illustrates a photomultiplier tube (PMT). The front end of a PMT consists 
of a photocathode. When hit by a photon, an electron is emitted (a ‘photoelectron’). 
Inside the tube are several ‘dynodes’ with successively higher potential: The photo-
cathode is at approximately –1 kV and the potential of the succeeding dynodes is 
about 100 V higher (each). When the ﬁrst photoelectron is emitted, it is accelerated

66
3
Sensors
Fig. 3.47 Optical 
triangulation
Fig. 3.48 Photomultiplier tube (PMT)
towards the ﬁrst dynode. The dynodes’ surface is made of a material that is specif-
ically designed to emit secondary electrons. Common materials are AgMgO, BeO, 
or GaAsP. A typical PMT has 12–14 dynodes and the quantum efﬁciency4 can be as 
good as 30% and gains of 106 are common, which means that PMTs can be used for 
photon counting (single photon detection). 
4 The quantum efﬁciency is the fraction of incident photons that generate a primary electron emission 
from the photocathode. 

3.8 Particle Detectors
67
PMTs are delicate instruments. First, the tube is evacuated, and the sealing must 
never be broken. Second, they should never be exposed to daylight, even when not 
powered. They are also very expensive and suffer from high dark currents. 
3.8 
Particle Detectors 
3.8.1 
Channel Electron Multipliers 
Channel Electron Multipliers, CEMs (or ‘channeltrons’) are particle detectors that 
use a similar electron multiplication technique as PMTs. CEMs come in many 
different sizes and shapes, and Fig. 3.49 illustrates a common standard CEM. 
It is primarily used to detect ions (positive or negative) but can also be used to 
detect electrons or photons. The incoming ion hits a collector cone coated with a high 
secondary electron emission material and then electrons are accelerated backwards 
by an electric ﬁeld and multiplied as they propagate through the channel to the end 
collector. Unlike the PMT, the CEM does not have discrete dynodes, instead it has 
one single ‘continuous dynode’ which creates a continuous electric ﬁeld inside the 
channel, forcing the electrons to propagate towards the anode end. 
The inside channel is approximately 1 mm in diameter. Notice in Fig. 3.49 the 
incurvation of the channel. This is necessary to prevent ‘ion feedback’. Because of 
the multiplying effect, the electron density can be very high at the channel output, and 
this can cause adsorbed gases on the channel wall to desorb and ionize. This results in 
positive ions in the channel propagating back to the input, producing extra secondary 
electrons which generate noise in the output signal. The incurvation prevents the ions 
from gaining enough energy to produce secondary electrons. Without the incurvation, 
the gain would be limited to <105. Curved CEMs can have a gain factor of 108.
Fig. 3.49 Channel electron multiplier 

68
3
Sensors
3.8.2 
Microchannel Plates 
Microchannel plates (MCPs) are a development of CEMs. As the name indicates, 
MCPs consist of several (parallel) channels, which provide a spatial resolution 
(provided that the charge collector is designed for that). Figure 3.50 illustrates a 
single MCP. 
An MCP is typically 0.5–2 mm thick and the diameter can vary from 10 mm 
up to 200 mm. Each microchannel’s diameter is 5–20 μm in diameter (less than a 
human hair). Just like the CEM channels, the inside of the channels is covered with 
a material with a high secondary electron emissivity. The top and bottom sides are 
high-voltage biased to produce an electric ﬁeld across the continuous-dynode of the 
order of 106 V/m. Still, the gain of a single MCP is only of the order of 10,000. For 
that reason, two (or more) MCPs are stacked to improve the gain, see Fig. 3.51. 
Fig. 3.50 Microchannel plate 
Fig. 3.51 Chevron microchannel plate

3.9 Vacuum Gauges
69
Notice in Fig. 3.50 how all the channels are tilted by a small angle against the 
normal (8–13°). This is to guarantee that an incident particle hits the channel wall and 
initiates an electron avalanche (instead of just passing straight through). Figure 3.51 
illustrates a ‘Chevron’ MCP. 
A Chevron MCP consists of two microchannel plates where the channels’ angles 
are in ‘opposite’ directions. This has two advantages. First, with two MCPs in series, 
gains up to 107 are possible. Second, the ‘opposing’ channel angles reduce ion feed-
back and reduce the noise in the output signal. ‘Z’ MCPs stack three microchannel 
plates. 
MCPs are used as particle detectors in mass spectrometers and space-based instru-
ments for detection of photons and high-energetic particles, but because of their 
spatial resolution capacity, they can also be used as intensity ampliﬁers in night-vision 
googles. 
3.9 
Vacuum Gauges 
3.9.1 
Introduction 
Vacuum chambers are omnipresent in physics labs, and where there are vacuum 
chambers there is a need to monitor the pressure, i.e., we need a vacuum gauge. 
But before we get into the details of vacuum gauges, let’s ﬁrst talk about pressure 
units. Vacuum/pressure is one of the areas where the use of the SI unit (Pa, Pascal) 
is not necessarily the most common unit. There is a plethora of vacuum pressure 
units, and the preference depends on the context. ‘Context’ can refer to region and/ 
or application. My personal (prejudiced?) opinion is that Europeans use ‘mbar’, 
Americans use ‘Torr’ and Asians use ‘Pa’. Fortunately, 1 mbar is approximately 
equal to 1 Torr (1 Torr = 1.333 mbar), and the pressure in vacuum chambers are 
usually only measured in orders of magnitude anyway, so, if the pressure in your 
vacuum chamber is 10−6 Torr or 10−6 mbar, doesn’t matter, it is the same (for all we 
usually care). I will use mbar in this presentation. 
We distinguish between ‘low’ vacuum (LV), ≥ 10−3 mbar and ‘high’ vacuum 
(HV) ≤ 10−3 mbar. This is the only distinction we need when it comes to choosing 
a vacuum gauge. For LV, you use a ‘thermal conductivity gauge’ (called a ‘Pirani’ 
gauge) and for HV you must use a ‘gas ionization’ gauge. 
3.9.2 
The Pirani Gauge 
There are several ways to implement a thermal conductivity pressure gauge, but the 
most common one is the ‘Pirani’ gauge. In a Pirani gauge, a thin ﬁlament (usually 
Platinum) is heated to approximately 50 °C. We know already (from Sect. 3.2.2) that

70
3
Sensors
the resistance of a metal ﬁlament depends on the temperature. When the ﬁlament is 
heated, some of the heat will be dissipated to the ambient gas (the air) and this will 
cool the ﬁlament (and cooling means decreasing resistance). The heat is carried away 
by conduction and the gas’s ability to carry heat is called ‘thermal conductivity’. The 
thermal conductivity is proportional to the gas density, which of course depends on 
the pressure. When the gas is evacuated, the thermal conductivity is reduced and the 
cooling effect on the ﬁlament is reduced, and the wire gets warmer and therefore the 
resistance increases. In conclusion, the ﬁlament resistance goes up when the pressure 
decreases. 
A Pirani gauge consists of two ﬁlaments. Both are heated by the same current, 
but only one is subjected to the vacuum chamber atmosphere. The other one is a 
reference gauge that compensates for variations in the ambient temperature. The 
reference gauge is sealed (under a ‘reference’ vacuum). Figure 3.52 illustrates a 
Pirani vacuum head. 
Hence, to measure the vacuum, we must measure the resistance of the ﬁlament 
(relative the reference ﬁlament) and we know already that this is best implemented 
in a Wheatstone bridge. However, there are several ways to implement the bridge. 
We could keep the Wheatstone supply voltage constant and measure the resistance or 
we could keep the current constant. A common implementation is a ‘self-balancing’ 
bridge, see Fig. 3.53.
In the bridge in Fig. 3.53, the output signal from an op amp is fed back as the 
supply voltage to the bridge. Since it has negative feedback, the op amp will do what 
it takes to keep the inverting (U−) and the non-inverting (U+) inputs equal; the op 
amp will ‘balance’ the bridge. 
When the pressure in the vacuum chamber decreases, RV (the ﬁlament resistance) 
increases, which means that U− (inverting op amp input) increases. To compensate 
for that the current through the ﬁlament must be reduced, which means that the supply 
voltage (the op amp output voltage) must be reduced; the op amp output voltage
Fig. 3.52 A Pirani gauge 
head; the reference gauge is 
sealed 
Inlet

3.9 Vacuum Gauges
71
Fig. 3.53 Self-balancing Wheatstone bridge
decreases when the pressure in the vacuum chamber decreases. The op amp’s output 
is proportional to the pressure in the vacuum chamber. (The dependence is not linear 
and needs to be calibrated.) 
This vacuum gauge was invented by Marcello Pirani in 1906 in Germany and is 
still one of the most common vacuum sensor techniques for ‘pre-vacuums’ down to 
10−3 mbar. 
3.9.3 
Gas Ionization Gauges 
There are several ways to design ionization gauges too, but the most common one is 
the ‘nude hot-cathode ionization’ gauge designed by Bayard & Alpert in the 1950s. 
(BAG = Bayard & Alpert gauge.) ‘Nude’ refers to the fact that it does not have any 
protective glass shielding. Technically, it is a ‘triode’ since it has three electrodes. 
The ﬁrst electrode is a ‘hot’ cathode (a helical tungsten wire) that emits electrons. 
The second electrode is a ‘grid’ with a positive-biased potential to attract (accelerate) 
the electrons and the third electrode is a charge collector (the ‘anode’). Figure 3.54 
illustrates the gauge head.
In Fig. 3.54, the grid is a cylinder, and the anode is just a ‘pin’. The cathode 
ﬁlament has a potential of +30 to +50 V and the grid has a potential of +180 to 
230 V. When the ﬁlament is heated (by a 10-mA current) electrons are emitted and 
accelerated towards the grid. Most of the electrons pass right through the grid and 
will interact with the gas atoms inside the grid cylinder. An atom/molecule hit by a 
high-energy electron will be ionized (at some probability rate) and that will generate 
a positive ion. This positive ion will be attracted to the 0 V anode pin and generate 
a current in the anode circuit. The size of this current will be proportional to the gas 
density in the chamber. The ‘conversion factor’ is of the order of 100 mA/mbar. At 
a pressure of 10−10 mbar, the current is of the order of 100 pA.

72
3
Sensors
Fig. 3.54 The nude 
hot-cathode ionization gauge
The range for a typical ionization gauge is 10−3 to 10−10 mbar and hot-cathode 
gauges should never be exposed to atmospheric pressure (when they are powered) 
since this can damage them permanently. 
3.10 
Solved Problems 
Problem 3.1 In a thermocouple experiment two conductors A and B were combined 
as illustrated in Fig. 3.55 and this produced the thermo emf UAB and this experiment 
was repeated with conductors B and C, see Fig. 3.56, which generated the thermo 
emf UBC.
Then ﬁnally, conductors A and C were combined to form a third thermocouple, 
see Fig. 3.57. Prove that UAC will equal UAB + UBC.
Solution The sum of the emfs in the ﬁrst two experiments is:
Star tLayou t 1st Row 1st Column  uppe r U Subscript upper A upper B Baseline plus upper U Subscript upper B upper C 2nd Column equals left brace upper E Subscript upper B Baseline left parenthesis upper T Subscript upper H Baseline right arrow upper T Subscript upper C Baseline right parenthesis minus upper E Subscript upper A Baseline left parenthesis upper T Subscript upper H Baseline right arrow upper T Subscript upper C Baseline right parenthesis right brace 2nd Row 1st Column Blank 2nd Column plus left brace upper E Subscript upper C Baseline left parenthesis upper T Subscript upper H Baseline right arrow upper T Subscript upper C Baseline right parenthesis minus upper E Subscript upper B Baseline left parenthesis upper T Subscript upper H Baseline right arrow upper T Subscript upper C Baseline right parenthesis right brace equals 3rd Row 1st Column Blank 2nd Column equals upper E Subscript upper C Baseline left parenthesis upper T Subscript upper H Baseline right arrow upper T Subscript upper C Baseline right parenthesis minus upper E Subscript upper A Baseline left parenthesis upper T Subscript upper H Baseline right arrow upper T Subscript upper C Baseline right parenthesis equals upper U Subscript upper A upper C EndLayout

3.10 Solved Problems
73
Fig. 3.55 Thermocouple 1 
Fig. 3.56 Thermocouple 2
Fig. 3.57 Thermocouple 3
+ {EC (TH → TC ) − EB (TH → TC )} = 
= EC (TH → TC ) − E A(TH → TC ) = UAC
Problem 3.2 Figure 3.11 illustrates the 4-wire method for resistance measurements. 
The disadvantage of this method is that it requires an ‘expensive’ DMM. Prove that 
you can eliminate the wire resistance using a ‘cheap’ DMM (see Fig. 3.10) and only 
three wires. 
Solution Figure 3.58 illustrates the solution.
When the switch is in position ‘1’ the DMM will measure R1 = 2Rwire and when 
the switch is in position ‘2’ it will measure R2 = 2Rwire + RPt. Hence, by subtracting 
the ﬁrst measurement from the second, we will get Rm = R2 – R1 = RPt. 
Problem 3.3 According to local trafﬁc regulations, your bicycle must have a white 
headlight and a red taillight. The headlight “must be strong enough to be visible from 
300 m”. In physical units, that translates to 100 lumens, minimum. Assuming you

74
3
Sensors
Fig. 3.58 The 3-wire method
have a photodiode BPW21, how would you test if the headlight on your bike meets 
the local trafﬁc regulations? 
Solution I would use the circuit in Fig. 3.40 with a feedback resistor of 1 MΩ. The  
setup would be in a completely dark room with the headlight as the only source 
of light and I would place the photodiode 10 cm in front of the headlight. At this 
distance, the illumination must be at least 
Star tFraction 100 lumen Over 4 normal pi dot 0.1 squared m squared EndFraction equals 796 lx
StartFract ion  100 l umen Over 4 normal pi dot 0.1 squared m squared EndFraction equals 796 lx
With a sensitivity of 9 nA/lx, the photocurrent would be 796 × 9 = 7.16 μA and 
the output voltage would be 7.16 μA × 1 MΩ = 7.16 V. Hence, if the voltage at the 
op amp output exceeds 7.16 V, my headlight complies with the local regulations. 
Problem 3.4 Prove that the circuit in Fig. 3.59 produces both the sum and difference 
signals for the PSD.
Solution The left part of Fig. 3.59 is just the current-to-voltage conversion. We only 
need to prove that the right-hand side produces the sum and the difference. The op 
amp circuit in the upper right corner is the ‘difference’ circuit (Fig. 3.60).
To see that, ﬁrst notice that the potential on the op amp’s ‘+’ input is V X2/2 which 
then is also the potential at the ‘−’ input. That means that the current I1 is 
up er I 1  equals StartStartFraction upper V Subscript upper X 1 Baseline minus StartFraction upper V Subscript upper X 2 Baseline Over 2 EndFraction OverOver upper R EndEndFraction
upper I 1 equals StartStartFraction upper V Subscript upper X 1 Baseline minus StartFraction upper V Subscript upper X 2 Baseline Over 2 EndFraction OverOver upper R EndEndFraction
upper I 1 equals StartStartFraction upper V Subscript upper X 1 Baseline minus StartFraction upper V Subscript upper X 2 Baseline Over 2 EndFraction OverOver upper R EndEndFraction
This current has nowhere else to go, but to the output. The potential at the op 
amp’s output is 
upper U Subscript diff Baseline equals StartFraction upper V Subscript upper X 2 Baseline Over 2 EndFraction minus upper I 1 upper R equals StartFraction upper V Subscript upper X 2 Baseline Over 2 EndFraction minus left parenthesis upper V Subscript upper X 1 Baseline minus StartFraction upper V Subscript upper X 2 Baseline Over 2 EndFraction right parenthesis equals upper V Subscript upper X 2 Baseline minus upper V Subscript upper X 1 Baseline equals minus left parenthesis upper V Subscript upper X 1 Baseline minus upper V Subscript upper X 2 Baseline right parenthesis
up
per U S ubscript diff Baseline equals StartFraction upper V Subscript upper X 2 Baseline Over 2 EndFraction minus upper I 1 upper R equals StartFraction upper V Subscript upper X 2 Baseline Over 2 EndFraction minus left parenthesis upper V Subscript upper X 1 Baseline minus StartFraction upper V Subscript upper X 2 Baseline Over 2 EndFraction right parenthesis equals upper V Subscript upper X 2 Baseline minus upper V Subscript upper X 1 Baseline equals minus left parenthesis upper V Subscript upper X 1 Baseline minus upper V Subscript upper X 2 Baseline right parenthesis
up
p
e
r U Subscript diff Baseline equals StartFraction upper V Subscript upper X 2 Baseline Over 2 EndFraction minus upper I 1 upper R equals StartFraction upper V Subscript upper X 2 Baseline Over 2 EndFraction minus left parenthesis upper V Subscript upper X 1 Baseline minus StartFraction upper V Subscript upper X 2 Baseline Over 2 EndFraction right parenthesis equals upper V Subscript upper X 2 Baseline minus upper V Subscript upper X 1 Baseline equals minus left parenthesis upper V Subscript upper X 1 Baseline minus upper V Subscript upper X 2 Baseline right parenthesis
u
p
per U Subscr i pt dif f Baseline equals StartFraction upper V Subscript upper X 2 Baseline Over 2 EndFraction minus upper I 1 upper R equals StartFraction upper V Subscript upper X 2 Baseline Over 2 EndFraction minus left parenthesis upper V Subscript upper X 1 Baseline minus StartFraction upper V Subscript upper X 2 Baseline Over 2 EndFraction right parenthesis equals upper V Subscript upper X 2 Baseline minus upper V Subscript upper X 1 Baseline equals minus left parenthesis upper V Subscript upper X 1 Baseline minus upper V Subscript upper X 2 Baseline right parenthesis

3.10 Solved Problems
75
Fig. 3.59 Signal conditioning for PSD
Fig. 3.60 The difference 
circuit
Next, we analyze the lower right-hand side op amp (Fig. 3.61). 
In this circuit, the ‘−’ input of the op amp has potential 0 V. That means that the 
currents I1 and I2 are just V X1/R and V X2/R, respectively. These currents must go to 
the op amp’s output and the potential at the output is 
upper  U S ubscri pt sum Bas e line e quals 0 minus left parenthesis upper I Subscript 1 Baseline plus upper I Subscript 2 Baseline right parenthesis times upper R equals minus left parenthesis upper V Subscript upper X 1 Baseline plus upper V Subscript upper X 2 Baseline right parenthesis
Fig. 3.61 The summing 
circuit 

76
3
Sensors
Notice that if we divide Udiff by Usum, the minus signs cancel. 
Problem 3.5 Suppose that the thermocouple in Fig. 3.4 is a type K thermocouple 
and that T C = 20 °C. If Um = 25.000 mV, what is the temperature at the hot junction. 
Solution A quick Google search for a ‘type K thermocouple table’, gives that 20 °C 
corresponds to 0.798 mV. Adding that to 25 mV gives 25.798 mV. Going back into 
the same table gives T H = 621 °C. 
References 
1. Widlar, R.J. 1967. An exact expression for the thermal variation of the emitter base voltage of 
bi-polar transistors. Proceedings of the IEEE 55 (1): 2. 
2. Saxena, S.C, and S.B.L. Seksena. 1989. A self-compensated smart LVDT transducer. IEEE 
Transactions on Instrumentation and Measurement 38(3): 6.

Chapter 4 
The Instrumentation Ampliﬁer 
Abstract This chapter introduces the instrumentation ampliﬁer. This is perhaps the 
most important of all ampliﬁers in electrical measurement systems. The common 
mode rejection ratio is redeﬁned and its relationship to the signal-to-noise ratio is 
emphasized. Instrumentation ampliﬁers are implemented with op amps, and the most 
common implementation circuits are illustrated. 
4.1 
Introduction 
Different kinds of ampliﬁers are used in almost all measurement systems and in 
this chapter, we will introduce one of the most common and versatile ampliﬁers, 
the instrumentation ampliﬁer. The instrumentation ampliﬁer is a differential-ended 
ampliﬁer, i.e., the input voltage is not referenced to ground. We saw in the previous 
chapter that there are plenty of sensor implementations that rely on such ampli-
ﬁers (the strain gauge, thermocouples, etc.). From here on, we will refer to the 
instrumentation ampliﬁer as the ‘IA’ and its symbol is illustrated in Fig. 4.1.
As you can see, it has the same symbol as the operational ampliﬁer, but unlike the 
op amp, this ampliﬁer does not need feedback, because the open-loop ampliﬁcation 
is ‘small’. It ampliﬁes the potential difference between the plus and minus inputs by 
a ‘reasonable’ number (10–1000). A huge ampliﬁcation is not what characterizes the 
IA. 
The IA is all about CMRR (see Sect. 1.2), i.e., the quality of the subtraction. 
The subtraction of potentials in electronics is never perfect and there will always 
be a small common mode residual. In Chap. 1, we introduced the signal model that 
we repeat in Fig. 4.2. The noise is the common mode voltage, and the signal is the 
normal mode voltage. (See, for example, the Wheatstone bridge signal in Fig. 3.20.) 
Because of the imperfection in the subtraction, the signal model in Fig. 4.1 is too 
naïve; instead, we use the model in Fig. 4.3.
FNM represents the ampliﬁcation of the normal mode voltage (the ‘signal’) and 
FCM represents the suppression of the common mode voltage (the ‘noise’). The 
output voltage is
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_4 
77

78
4
The Instrumentation Ampliﬁer
 
Fig. 4.1 The instrumentation ampliﬁer
Fig. 4.2 Signal model 
Fig. 4.3 There will always be a small cm residual
upper  U Subscr ipt out 
Baseline equals upper F Subscript NM Baseline upper U Subscript NM Baseline plus upper F Subscript CM Baseline upper U Subscript CM
where FCMUCM represents what is left of the common mode voltage after the 
ampliﬁer. 
Instrumentation ampliﬁers are most of all characterized by how well they suppress 
the common mode voltage compared to how much they amplify the normal mode. We 
deﬁned the common mode rejection ratio (CMRR) already in Chap. 1 for a DMM. 
We use the same number to represent the quality of an IA:

4.2 Implementations
79
Fig. 4.4 The Wheatstone 
bridge signal is ampliﬁed by 
an IA 
CMRR equals 2 0 log StartFraction upper F Subscript NM Baseline Over upper F Subscript CM Baseline EndFraction left bracket dB right bracket
CMRR
 equ
als 20 log StartFraction upper F Subscript NM Baseline Over upper F Subscript CM Baseline EndFraction left bracket dB right bracket
The following example will illustrate the use of an IA. 
Example 4.1 Figure 4.4 illustrates how a Wheatstone bridge produces two voltage 
potentials: One with the common mode potential and one with the common mode 
plus the normal mode potential. 
Assuming we have a bridge voltage of 1 mV and an IA with CMRR = 105 dB 
and FNM = 100, what is the output voltage from the IA? 
Solution First, we ﬁnd the FCM from Eq. (4.2): uppe r F Su bscript CM Ba se
lin e  equals up per F  Subscript NM Baseline times 10 Superscript minus CMRR slash 20 Baseline equals 100 dot 10 Superscript negative 105 divided by 20 Baseline equals 5.6 dot 10 Superscript negative 4. Hence, normal mode voltages are ampliﬁed by 100 and 
common mode voltages are suppressed by a factor of 0.00056. The common mode 
voltage is U0/2 = 12/2 = 6 V. The output voltage is 
Start Layout 1s t Row 1st  Colum n upper U Su bscript ou
t 2nd Colum n equal
s uppe r F Subscript NM Baseline upper U Subscript NM Baseline plus upper F Subscript CM Baseline upper U Subscript CM Baseline equals 100 dot 0.001 plus 6 dot 0.00056 2nd Row 1st Column Blank 2nd Column equals 100 plus 3.4 mV equals ModifyingBelow 1 With normal bar 03.4 mV EndLayout
4.2 
Implementations 
4.2.1 
Classic IA Circuit 
Before we get into the details of IA circuits, we need to understand the classic 
differential ampliﬁer in Fig. 4.5.
The potential on the op amp’s + input is Uin'2R2/(R1 + R2). Since this is also the 
potential on the op amp’s − input, the current i is 
i eq
uals S tartStar
tFraction upper U Subscript in prime 1 Baseline minus upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction OverOver upper R 1 EndEndFraction
i equals StartStartFraction upper U Subscript in prime 1 Baseline minus upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction OverOver upper R 1 EndEndFraction
i equals StartStartFraction upper U Subscript in prime 1 Baseline minus upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction OverOver upper R 1 EndEndFraction

80
4
The Instrumentation Ampliﬁer
Fig. 4.5 Classic differential 
ampliﬁer
Hence, the output voltage is 
Start Layou t 1s t Row  1st Col
umn upper U Subscript out 2nd Column equals upper U normal bar minus i dot upper R 2 equals upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction minus StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis upper U Subscript in prime 1 Baseline minus upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction left parenthesis 1 plus StartFraction upper R 2 Over upper R 1 EndFraction right parenthesis minus StartFraction upper R 2 Over upper R 1 EndFraction upper U Subscript in prime 1 Baseline equals StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline right parenthesis EndLayout
Sta rtLay
out 1st Row 1st Column upper U Subscript out 2nd Column equals upper U normal bar minus i dot upper R 2 equals upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction minus StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis upper U Subscript in prime 1 Baseline minus upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction left parenthesis 1 plus StartFraction upper R 2 Over upper R 1 EndFraction right parenthesis minus StartFraction upper R 2 Over upper R 1 EndFraction upper U Subscript in prime 1 Baseline equals StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline right parenthesis EndLayout
St
a
rtLayo ut 1st R
ow 1st Column upper U Subscript out 2nd Column equals upper U normal bar minus i dot upper R 2 equals upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction minus StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis upper U Subscript in prime 1 Baseline minus upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction left parenthesis 1 plus StartFraction upper R 2 Over upper R 1 EndFraction right parenthesis minus StartFraction upper R 2 Over upper R 1 EndFraction upper U Subscript in prime 1 Baseline equals StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline right parenthesis EndLayout
Sta rtLa
y
out 1st 
Row 1st Column upper U Subscript out 2nd Column equals upper U normal bar minus i dot upper R 2 equals upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction minus StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis upper U Subscript in prime 1 Baseline minus upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction left parenthesis 1 plus StartFraction upper R 2 Over upper R 1 EndFraction right parenthesis minus StartFraction upper R 2 Over upper R 1 EndFraction upper U Subscript in prime 1 Baseline equals StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline right parenthesis EndLayout
Sta rtLa
y
ou t 1st Row 1st Column upper U Subscript out 2nd Column equals upper U normal bar minus i dot upper R 2 equals upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction minus StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis upper U Subscript in prime 1 Baseline minus upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction left parenthesis 1 plus StartFraction upper R 2 Over upper R 1 EndFraction right parenthesis minus StartFraction upper R 2 Over upper R 1 EndFraction upper U Subscript in prime 1 Baseline equals StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline right parenthesis EndLayout
St
a
rtLayout 1st Row 1st Column upper U Subscript out 2nd Column equals upper U normal bar minus i dot upper R 2 equals upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction minus StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis upper U Subscript in prime 1 Baseline minus upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction left parenthesis 1 plus StartFraction upper R 2 Over upper R 1 EndFraction right parenthesis minus StartFraction upper R 2 Over upper R 1 EndFraction upper U Subscript in prime 1 Baseline equals StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline right parenthesis EndLayout
Sta
rtLayo ut  1st Row 1st Column upper U Subscript out 2nd Column equals upper U normal bar minus i dot upper R 2 equals upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction minus StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis upper U Subscript in prime 1 Baseline minus upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction left parenthesis 1 plus StartFraction upper R 2 Over upper R 1 EndFraction right parenthesis minus StartFraction upper R 2 Over upper R 1 EndFraction upper U Subscript in prime 1 Baseline equals StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline right parenthesis EndLayout
Sta
rtLayou t 1st Ro
w 1st Column upper U Subscript out 2nd Column equals upper U normal bar minus i dot upper R 2 equals upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction minus StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis upper U Subscript in prime 1 Baseline minus upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper U Subscript in prime 2 Baseline StartFraction upper R 2 Over upper R 1 plus upper R 2 EndFraction left parenthesis 1 plus StartFraction upper R 2 Over upper R 1 EndFraction right parenthesis minus StartFraction upper R 2 Over upper R 1 EndFraction upper U Subscript in prime 1 Baseline equals StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline right parenthesis EndLayout
Hence, we have a differential ampliﬁer where we can choose the ampliﬁcation 
arbitrarily with the resistors R1 and R2. 
This is what we were looking for, but we are not done yet; the circuit in Fig. 4.5 
has a disadvantage. Since the + and − inputs of the op amp are ‘virtually’ short-
circuited, the input impedance of the circuit is R1 + R1 = 2R1 and we must have a 
large R1 resistor to have a large input resistance. But then R2 must be very large to 
get an ampliﬁcation of 10–1000, and it is likely to be impractically large. For that 
reason, we are looking for another solution. This solution is illustrated in Fig. 4.6. 
In Fig. 4.6, we can see that the problem with the input impedance is remedied 
since the signal inputs are now connected directly to the inputs of op amps. Let’s see 
what the output voltage is (to make sure we still have a differential ampliﬁer). 
Assuming Uin1 > Uin2, the current ib through the Rb resistor is 
i S ubscrip t b Baseline equals StartFraction upper U Subscript in 1 Baseline minus upper U Subscript in 2 Baseline Over upper R Subscript b Baseline EndFraction
i Subscript b Baseline equals StartFraction upper U Subscript in 1 Baseline minus upper U Subscript in 2 Baseline Over upper R Subscript b Baseline EndFraction
Fig. 4.6 Instrumentation 
ampliﬁer circuit 

4.2 Implementations
81
Then the voltages Uin'2 and Uin'1 are 
StartL ayout 1s t Row 1s
t Colu mn Blank  2nd Co
l
umn St artLayou t 1st R ow uppe r U Subsc
ript in prime 1 Baselin e equal s upper U Subscript in prime 1 Baseline plus i Subscript b Baseline upper R Subscript a Baseline 2nd Row upper U Subscript in prime 2 Baseline equals upper U Subscript in prime 2 Baseline minus i Subscript b Baseline upper R Subscript a Baseline EndLayout right brace upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline equals upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline minus 2 i Subscript b Baseline upper R Subscript a Baseline 2nd Row 1st Column Blank 2nd Column right double arrow upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline equals upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline minus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction left parenthesis upper U Subscript in 1 Baseline minus upper U Subscript in 2 Baseline right parenthesis 3rd Row 1st Column Blank 2nd Column equals upper U Subscript in 2 Baseline left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis minus upper U Subscript in 1 Baseline left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis equals left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis left parenthesis upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline right parenthesis EndLayout
Sta
rtLayo ut 1st R
ow 1st
 
Co lumn Blank 2nd Column StartLayout 1st Row upper U Subscript in prime 1 Baseline equals upper U Subscript in prime 1 Baseline plus i Subscript b Baseline upper R Subscript a Baseline 2nd Row upper U Subscript in prime 2 Baseline equals upper U Subscript in prime 2 Baseline minus i Subscript b Baseline upper R Subscript a Baseline EndLayout right brace upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline equals upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline minus 2 i Subscript b Baseline upper R Subscript a Baseline 2nd Row 1st Column Blank 2nd Column right double arrow upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline equals upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline minus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction left parenthesis upper U Subscript in 1 Baseline minus upper U Subscript in 2 Baseline right parenthesis 3rd Row 1st Column Blank 2nd Column equals upper U Subscript in 2 Baseline left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis minus upper U Subscript in 1 Baseline left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis equals left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis left parenthesis upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline right parenthesis EndLayout
St
a
rtLayo
u
t 1st Row 1st Column Blank 2nd Column StartLayout 1st Row upper U Subscript in prime 1 Baseline equals upper U Subscript in prime 1 Baseline plus i Subscript b Baseline upper R Subscript a Baseline 2nd Row upper U Subscript in prime 2 Baseline equals upper U Subscript in prime 2 Baseline minus i Subscript b Baseline upper R Subscript a Baseline EndLayout right brace upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline equals upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline minus 2 i Subscript b Baseline upper R Subscript a Baseline 2nd Row 1st Column Blank 2nd Column right double arrow upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline equals upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline minus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction left parenthesis upper U Subscript in 1 Baseline minus upper U Subscript in 2 Baseline right parenthesis 3rd Row 1st Column Blank 2nd Column equals upper U Subscript in 2 Baseline left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis minus upper U Subscript in 1 Baseline left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis equals left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis left parenthesis upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline right parenthesis EndLayout
St
a
r
t
La yout 1st Row 1st Column Blank 2nd Column StartLayout 1st Row upper U Subscript in prime 1 Baseline equals upper U Subscript in prime 1 Baseline plus i Subscript b Baseline upper R Subscript a Baseline 2nd Row upper U Subscript in prime 2 Baseline equals upper U Subscript in prime 2 Baseline minus i Subscript b Baseline upper R Subscript a Baseline EndLayout right brace upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline equals upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline minus 2 i Subscript b Baseline upper R Subscript a Baseline 2nd Row 1st Column Blank 2nd Column right double arrow upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline equals upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline minus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction left parenthesis upper U Subscript in 1 Baseline minus upper U Subscript in 2 Baseline right parenthesis 3rd Row 1st Column Blank 2nd Column equals upper U Subscript in 2 Baseline left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis minus upper U Subscript in 1 Baseline left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis equals left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis left parenthesis upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline right parenthesis EndLayout
St
a
rtLayo ut 1st Row 1st Column Blank 2nd Column StartLayout 1st Row upper U Subscript in prime 1 Baseline equals upper U Subscript in prime 1 Baseline plus i Subscript b Baseline upper R Subscript a Baseline 2nd Row upper U Subscript in prime 2 Baseline equals upper U Subscript in prime 2 Baseline minus i Subscript b Baseline upper R Subscript a Baseline EndLayout right brace upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline equals upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline minus 2 i Subscript b Baseline upper R Subscript a Baseline 2nd Row 1st Column Blank 2nd Column right double arrow upper U Subscript in prime 2 Baseline minus upper U Subscript in prime 1 Baseline equals upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline minus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction left parenthesis upper U Subscript in 1 Baseline minus upper U Subscript in 2 Baseline right parenthesis 3rd Row 1st Column Blank 2nd Column equals upper U Subscript in 2 Baseline left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis minus upper U Subscript in 1 Baseline left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis equals left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis left parenthesis upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline right parenthesis EndLayout
Inserting this into Eq. (4.3), we get the output voltage: 
upper  U  Subscript out Baseline equals StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis left parenthesis upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline right parenthesis
up
p
er  U Subscript out Baseline equals StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis left parenthesis upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline right parenthesis
up
p
er U S ubscrip
t out Baseline equals StartFraction upper R 2 Over upper R 1 EndFraction left parenthesis 1 plus StartFraction 2 upper R Subscript a Baseline Over upper R Subscript b Baseline EndFraction right parenthesis left parenthesis upper U Subscript in 2 Baseline minus upper U Subscript in 1 Baseline right parenthesis
The normal mode ampliﬁcation is uppe r F S ubscript NM Baseline equals left parenthesis 1 plus 2 upper R Subscript a Baseline divided by upper R Subscript b Baseline right parenthesis upper R 2 divided by upper R 1 and there are 
obviously several ways to vary the ampliﬁcation, but, if we change R1, R2, or Ra, it  
involves two resistors. Changing Rb only involves one resistor. For that reason, IAs 
with variable FNM usually allow the user to apply an external Rb resistor. 
Example 4.2 Figure 4.7 illustrates an IA-integrated circuit. By varying Rb, what is 
the range of possible normal mode ampliﬁcations? 
Solution R2/R1 = 10, so if Rb = ∞, then FNM = 10 and if Rb = 0, the FNM = ∞. 
The range is uppe r F Sub script NM Baseline element of left bracket 10 comma normal infinity right bracket. 
The popular IAs from Texas Instruments (INA128) and Analog Devices (AD622) 
both have exactly the conﬁguration illustrated in Fig. 4.6. Linear Technology though, 
has a different implementation that only requires two op amps (LT110x). However, 
this is at the expense of not offering arbitrary ampliﬁcations. The circuit is illustrated 
in Fig. 4.8.
Fig. 4.7 Integrated IA 

82
4
The Instrumentation Ampliﬁer
Fig. 4.8 2-op amp IA 
As in the previous solution, the inputs are directly connected to the input of op 
amps, so the input impedance is ﬁne. The current I1 is Uin−/99R. Hence, the potential 
at point A is 
up er U Subscript  upper
 
A Ba seline equals upper U Subscript in minus Baseline plus upper I 1 upper R equals upper U Subscript in minus Baseline left parenthesis 1 plus one ninety ninth right parenthesis equals upper U Subscript in minus Baseline StartFraction 100 Over 99 EndFraction
up
p
er U Su
bscript upper A Baseline equals upper U Subscript in minus Baseline plus upper I 1 upper R equals upper U Subscript in minus Baseline left parenthesis 1 plus one ninety ninth right parenthesis equals upper U Subscript in minus Baseline StartFraction 100 Over 99 EndFraction
upper U Subscript upper A Baseline equals upper U Subscript in minus Baseline plus upper I 1 upper R equals upper U Subscript in minus Baseline left parenthesis 1 plus one ninety ninth right parenthesis equals upper U Subscript in minus Baseline StartFraction 100 Over 99 EndFraction
The current I2 is 
up er I 2 equals StartFraction upper U Subscript upper A Baseline minus upper U Subscript in plus Baseline Over upper R EndFraction equals StartStartFraction upper U Subscript in minus Baseline StartFraction 100 Over 99 EndFraction minus upper U Subscript in plus Baseline OverOver upper R EndEndFraction
u
pper I 2 equals StartFraction upper U Subscript upper A Baseline minus upper U Subscript in plus Baseline Over upper R EndFraction equals StartStartFraction upper U Subscript in minus Baseline StartFraction 100 Over 99 EndFraction minus upper U Subscript in plus Baseline OverOver upper R EndEndFraction
upp er I 2 equals StartFraction upper U Subscript upper A Baseline minus upper U Subscript in plus Baseline Over upper R EndFraction equals StartStartFraction upper U Subscript in minus Baseline StartFraction 100 Over 99 EndFraction minus upper U Subscript in plus Baseline OverOver upper R EndEndFraction
upper I 2 equals StartFraction upper U Subscript upper A Baseline minus upper U Subscript in plus Baseline Over upper R EndFraction equals StartStartFraction upper U Subscript in minus Baseline StartFraction 100 Over 99 EndFraction minus upper U Subscript in plus Baseline OverOver upper R EndEndFraction
And ﬁnally, Uout is 
upper  U Subscript ou t Baseline eq uals upper U Subscript in plus Baseline minus upper I 2 99 upper R equals upper U Subscript in plus Baseline minus 100 upper U Subscript in minus Baseline plus 99 upper U Subscript in plus Baseline equals 100 left parenthesis upper U Subscript in plus Baseline minus upper U Subscript in minus Baseline right parenthesis
We conclude that the IA in Fig. 4.8 has a normal mode ampliﬁcation of 100, and 
it is easy to derive that it would be reduced to 10 if we short-circuit the 90R resistors 
(and FCM would also decrease by a factor of 10). 
Example 4.3 In Fig. 4.9, we use an IA to amplify the emf from a thermocouple. 
The circuit is radiated with 50 Hz EMC interferences from the surrounding power 
grid which induces a common mode voltage of 1 V in the circuit. The application 
requires a normal mode ampliﬁcation of the thermo emf of 50. What CMRR does 
the IA need if we want the common mode contribution in the output signal to be less 
the 5%? (The thermo emf is around 0.8 mV.)
Solution The normal mode contribution is 50 × 0.8 mV = 40 mV. The output signal 
is 40 mV + FCM·1 = 40 mV + FCM. The CM part of the output should be less than 
5%:

4.3 CMRR Versus SNR
83
Fig. 4.9 Thermocouple ampliﬁer
StartLayout 1st Row 1st Column StartFraction upper F Subscript CM Baseline upper U Subscript CM Baseline Over upper F Subscript NM Baseline upper U Subscript NM Baseline plus upper F Subscript CM Baseline upper U Subscript CM Baseline EndFraction 2nd Column equals StartFraction upper F Subscript CM Baseline Over 0.04 plus upper F Subscript CM Baseline EndFraction less than or equals StartFraction 5 Over 100 EndFraction 2nd Row 1st Column Blank 2nd Column right double arrow 95 upper F Subscript CM Baseline equals 0.2 right double arrow upper F Subscript CM Baseline equals 2.1 dot 10 Superscript negative 3 EndLayout
StartLa yout 1st 
R
ow 1st Column StartFraction upper F Subscript CM Baseline upper U Subscript CM Baseline Over upper F Subscript NM Baseline upper U Subscript NM Baseline plus upper F Subscript CM Baseline upper U Subscript CM Baseline EndFraction 2nd Column equals StartFraction upper F Subscript CM Baseline Over 0.04 plus upper F Subscript CM Baseline EndFraction less than or equals StartFraction 5 Over 100 EndFraction 2nd Row 1st Column Blank 2nd Column right double arrow 95 upper F Subscript CM Baseline equals 0.2 right double arrow upper F Subscript CM Baseline equals 2.1 dot 10 Superscript negative 3 EndLayout
Start Layout
 1 st Row 1st Column StartFraction upper F Subscript CM Baseline upper U Subscript CM Baseline Over upper F Subscript NM Baseline upper U Subscript NM Baseline plus upper F Subscript CM Baseline upper U Subscript CM Baseline EndFraction 2nd Column equals StartFraction upper F Subscript CM Baseline Over 0.04 plus upper F Subscript CM Baseline EndFraction less than or equals StartFraction 5 Over 100 EndFraction 2nd Row 1st Column Blank 2nd Column right double arrow 95 upper F Subscript CM Baseline equals 0.2 right double arrow upper F Subscript CM Baseline equals 2.1 dot 10 Superscript negative 3 EndLayout
Star
tLayout 1st Ro w 1st Column  StartFraction upper F Subscript CM Baseline upper U Subscript CM Baseline Over upper F Subscript NM Baseline upper U Subscript NM Baseline plus upper F Subscript CM Baseline upper U Subscript CM Baseline EndFraction 2nd Column equals StartFraction upper F Subscript CM Baseline Over 0.04 plus upper F Subscript CM Baseline EndFraction less than or equals StartFraction 5 Over 100 EndFraction 2nd Row 1st Column Blank 2nd Column right double arrow 95 upper F Subscript CM Baseline equals 0.2 right double arrow upper F Subscript CM Baseline equals 2.1 dot 10 Superscript negative 3 EndLayout
CMRR greater 
than or equals 20 log StartFraction 50 Over 2.1 dot 10 Superscript negative 3 Baseline EndFraction equals 88 dB
CMR  greate r tha n or equals 20 log StartFraction 50 Over 2.1 dot 10 Superscript negative 3 Baseline EndFraction equals 88 dB
We should look for an IA with a CMRR of at least 90 dB. 
4.3 
CMRR Versus SNR 
If we revisit Fig. 4.3, we can see that the ‘signal’ is the NM part of the voltage before 
the IA and the ‘noise’ is the CM part; the signal-to-noise ratio before the IA is 
SNR Subscr ipt before Baseline equals StartFraction upper U Subscript NM Baseline Over upper U Subscript CM Baseline EndFraction
SNR 
Subscript before Baseline equals StartFraction upper U Subscript NM Baseline Over upper U Subscript CM Baseline EndFraction
In the output signal, the ‘signal’ is FNMUNM, and the noise is FCMUCM; the  
signal-to-noise ratio after the IA is 
SNR Subsc ri pt after Baseline equals StartFraction upper F Subscript NM Baseline upper U Subscript NM Baseline Over upper F Subscript CM Baseline upper U Subscript CM Baseline EndFraction
SNR Sub
script after Baseline equals StartFraction upper F Subscript NM Baseline upper U Subscript NM Baseline Over upper F Subscript CM Baseline upper U Subscript CM Baseline EndFraction
Next, we take the quotient of the signal-to-noise before and after the IA: 
StartFraction SNR Subscript after Baseline Over SNR Subscript before Baseline EndFraction equals StartStartFraction StartFraction upper F Subscript NM Baseline upper U Subscript NM Baseline Over upper F Subscript CM Baseline upper U Subscript CM Baseline EndFraction OverOver StartFraction upper U Subscript NM Baseline Over upper U Subscript CM Baseline EndFraction EndEndFraction equals StartFraction upper F Subscript NM Baseline Over upper F Subscript CM Baseline EndFraction equals CMRR
StartFract
io
n SNR Subscript after Baseline Over SNR Subscript before Baseline EndFraction equals StartStartFraction StartFraction upper F Subscript NM Baseline upper U Subscript NM Baseline Over upper F Subscript CM Baseline upper U Subscript CM Baseline EndFraction OverOver StartFraction upper U Subscript NM Baseline Over upper U Subscript CM Baseline EndFraction EndEndFraction equals StartFraction upper F Subscript NM Baseline Over upper F Subscript CM Baseline EndFraction equals CMRR
StartFraction SNR Subscript after Baseline Over SNR Subscript before Baseline EndFraction equals StartStartFraction StartFraction upper F Subscript NM Baseline upper U Subscript NM Baseline Over upper F Subscript CM Baseline upper U Subscript CM Baseline EndFraction OverOver StartFraction upper U Subscript NM Baseline Over upper U Subscript CM Baseline EndFraction EndEndFraction equals StartFraction upper F Subscript NM Baseline Over upper F Subscript CM Baseline EndFraction equals CMRR
StartFraction SNR Subscript after Baseline Over SNR Subscript before Baseline EndFraction equals StartStartFraction StartFraction upper F Subscript NM Baseline upper U Subscript NM Baseline Over upper F Subscript CM Baseline upper U Subscript CM Baseline EndFraction OverOver StartFraction upper U Subscript NM Baseline Over upper U Subscript CM Baseline EndFraction EndEndFraction equals StartFraction upper F Subscript NM Baseline Over upper F Subscript CM Baseline EndFraction equals CMRR
Star
tF raction SNR Subscript after Baseline Over SNR Subscript before Baseline EndFraction equals StartStartFraction StartFraction upper F Subscript NM Baseline upper U Subscript NM Baseline Over upper F Subscript CM Baseline upper U Subscript CM Baseline EndFraction OverOver StartFraction upper U Subscript NM Baseline Over upper U Subscript CM Baseline EndFraction EndEndFraction equals StartFraction upper F Subscript NM Baseline Over upper F Subscript CM Baseline EndFraction equals CMRR
Star
tFract
ion SNR Subscript after Baseline Over SNR Subscript before Baseline EndFraction equals StartStartFraction StartFraction upper F Subscript NM Baseline upper U Subscript NM Baseline Over upper F Subscript CM Baseline upper U Subscript CM Baseline EndFraction OverOver StartFraction upper U Subscript NM Baseline Over upper U Subscript CM Baseline EndFraction EndEndFraction equals StartFraction upper F Subscript NM Baseline Over upper F Subscript CM Baseline EndFraction equals CMRR
The quotient of the signal-to-noise before and after the IA is equal to the CMRR. 
This is how I recommend you think of CMRR. Rather than thinking of CMRR as a 
quotient between two ampliﬁcations, it tells you how much the signal-to-noise ratio 
is improved (with respect to the common mode noise). 
Example 4.4 Recalculate Example 4.4 using Eq. (4.7). 
Solution The SNR Subscr ipt b efore Baseli ne equals 0.8 mV slash 1 upper V equals 0.8 dot 10 Superscript negative 3. In the output signal, the CM 
part should only correspond to 5% of the total signal:

84
4
The Instrumentation Ampliﬁer
StartFraction CM Over CM plus NM EndFraction less than or equals StartFraction 5 Over 100 EndFraction right double arrow StartFraction NM Over CM EndFraction greater than or equals StartFraction 95 Over 5 EndFraction equals SNR Subscript after
StartF ra ction CM Over CM plus NM EndFraction less than or equals StartFraction 5 Over 100 EndFraction right double arrow StartFraction NM Over CM EndFraction greater than or equals StartFraction 95 Over 5 EndFraction equals SNR Subscript after
Star tFraction CM Over CM plus NM EndFraction less than or equals StartFraction 5 Over 100 EndFraction right double arrow StartFraction NM Over CM EndFraction greater than or equals StartFraction 95 Over 5 EndFraction equals SNR Subscript after
Sta rtFraction CM Over CM plus NM EndFraction less than or equals StartFraction 5 Over 100 EndFraction right double arrow StartFraction NM Over CM EndFraction greater than or equals StartFraction 95 Over 5 EndFraction equals SNR Subscript after
St artFraction CM Over CM plus NM EndFraction less than or equals StartFraction 5 Over 100 EndFraction right double arrow StartFraction NM Over CM EndFraction greater than or equals StartFraction 95 Over 5 EndFraction equals SNR Subscript after
The CMRR we need is 
CMRR equals 2
0 log StartFraction 95 divided by 5 Over 0.8 dot 10 Superscript negative 3 Baseline EndFraction equals ModifyingBelow 88 dB With quotation dash
CMRR  equals  20 l og StartFraction 95 divided by 5 Over 0.8 dot 10 Superscript negative 3 Baseline EndFraction equals ModifyingBelow 88 dB With quotation dash
4.4 
Solved Problems 
Problem 4.1 An IA has a normal mode ampliﬁcation of 100 and a CMRR = 80 dB. 
How much does it attenuate the common mode signals? 
Solution 80 equals 2 0 log StartFraction 100 Over upper F Subscript CM Baseline EndFraction right double arrow upper F Subscript CM Baseline equals 100 dot 10 Superscript negative 80 divided by 20 Baseline equals 0.01
80 e quals 20 log  StartFract ion 100 Over upper F Subscript CM Baseline EndFraction right double arrow upper F Subscript CM Baseline equals 100 dot 10 Superscript negative 80 divided by 20 Baseline equals 0.01
Problem 4.2 If we use the IA in problem 4.1 in an application where UCM = 2 V and 
UNM = 5 mV, what will the output signal be, and what are the normal and common 
mode contributions to the output signals? 
Solution upper  U Subscript out Ba seline equa ls 100 times 0.005 plus 0.01 times 2 equals 0.5 plus 0.02 equals ModifyingBelow 0.52 upper V With quotation dash. The NM contribution 
is 0.5 V, and the CM contribution is 0.02 V. 
Problem 4.3 An IA is used to amplify the signal from an ECG measurement, see 
Fig. 4.10. What CMRR is required for the CM contribution at the output to be less 
than 1%? 
Solution The SNR Subscr ipt  befor e  Baseline equals 3 mV slash 1.5 upper V equals 2 dot 10 Superscript negative 3. In the output signal, the CM part 
should only correspond to 1% of the total signal: 
StartFraction CM Over CM plus NM EndFraction less than or equals StartFraction 1 Over 100 EndFraction right double arrow StartFraction NM Over CM EndFraction greater than or equals StartFraction 99 Over 1 EndFraction equals 99 equals SNR Subscript after
StartF ra ction CM Over CM plus NM EndFraction less than or equals StartFraction 1 Over 100 EndFraction right double arrow StartFraction NM Over CM EndFraction greater than or equals StartFraction 99 Over 1 EndFraction equals 99 equals SNR Subscript after
Star tFraction CM Over CM plus NM EndFraction less than or equals StartFraction 1 Over 100 EndFraction right double arrow StartFraction NM Over CM EndFraction greater than or equals StartFraction 99 Over 1 EndFraction equals 99 equals SNR Subscript after
Sta rtFraction CM Over CM plus NM EndFraction less than or equals StartFraction 1 Over 100 EndFraction right double arrow StartFraction NM Over CM EndFraction greater than or equals StartFraction 99 Over 1 EndFraction equals 99 equals SNR Subscript after
St artFr action CM Over CM plus NM EndFraction less than or equals StartFraction 1 Over 100 EndFraction right double arrow StartFraction NM Over CM EndFraction greater than or equals StartFraction 99 Over 1 EndFraction equals 99 equals SNR Subscript after
The CMRR we need is 
CMRR equals 2
0 log StartFraction 99 Over 2 dot 10 Superscript negative 3 Baseline EndFraction equals ModifyingBelow 94 dB With quotation dash
CM RR equa ls 20  log StartFraction 99 Over 2 dot 10 Superscript negative 3 Baseline EndFraction equals ModifyingBelow 94 dB With quotation dash
Fig. 4.10 IA in ECG 
measurement 

Chapter 5 
Transmission Lines 
Abstract This chapter explains why the impedance 50 Ω is so ubiquitous in physics 
labs. First, the transmission line is introduced and then the extremely important 
concept of its characteristic impedance is deﬁned. Fresnel’s law is used to ﬁnd the 
reﬂection coefﬁcient for electric signals in a transmission line (Eq. 5.2) and that 
will explain why transmission lines need to be terminated. One section treats the 
problem of how to properly split and splice transmission lines. Finally, one of the 
most common applications of signal reﬂections in transmission lines is presented, 
namely, the Time Domain Reﬂectometer. 
5.1 
Introduction 
Once you start working in a physics lab, connecting cables between instruments, 
lasers, and vacuum chambers, it doesn’t take long before you hear people talking 
about ‘50 Ω’ and that number keeps popping up in manuals and datasheets and it 
is almost like 50 Ω is a magic number. There is nothing magic about it, but it is 
paramount that you understand the fuss about 50 Ω. This chapter will remedy that 
and unravel the ‘50-Ω secret’. 
5.2 
The Characteristic Impedance 
It all starts with a very simple experiment. In Fig. 5.1, a signal source with internal 
impedance 100 Ω is connected to a 100-Ω load impedance via a switch. The switch 
is closed at t = 0.
In Fig. 5.1, we can easily conclude that exactly at t = 0, the 10 V will immediately 
be equally distributed across the internal impedance Zi and the load impedance Zload; 
at t = 0, Uload goes immediately from 0 to 5 V. 
The experiment in Fig. 5.1 is straightforward, 5 V across the load and 5 V across 
the internal impedance.
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_5 
85

86
5
Transmission Lines
Fig. 5.1 Signal model
Fig. 5.2 Same experiment but with a small twist 
However, as the next example will illustrate, it doesn’t take much for your under-
graduate electricity skills to ‘break down’. In Fig. 5.2, we repeat the exact same 
experiment, only with one small difference; we place the load impedance at some 
distance. This distance is ‘long enough not to be ignored’. 
What happens to the voltage across the load impedance now (at t = 0)? That’s 
easy: Nothing! Because it takes some time for the voltage to propagate to the load 
impedance. Something will happen later, but exactly at t = 0, nothing happens. 
Here is a harder question: How large is the voltage across the internal impedance 
Zi, at  t = 0 (the moment immediately after the switch is closed)? 
This is the key question here (and the key to the whole 50-Ω fuss). At t = 0, the 
voltage source cannot see the load impedance, so how much should it ‘keep’ across 
Zi and how much should it send down the cable to Zload? Most students answer, ‘0 V’ 
or ‘10 V’, but that is just wrong. It is more complicated than that. At t = 0, the voltage 
source ‘sees’ the internal impedance and ….. the cable!!! To answer the question, 
we must understand how the cable behaves at t = 0 (from the voltage source’s point 
of view). 
The answer is that at t = 0, the cable is ‘perceived’ as an impedance to ground, 
see Fig. 5.3. This ‘perceived’ impedance is the cable’s characteristic impedance and 
is denoted Z0. Here are some facts you should know about Z0:
• Equation (3.9) tells us the ‘ohm resistance’ of a conductor of some length and 
diameter. Most students think that the characteristic impedance has something to 
do with Eq. (3.9), or even think that Z0 is the same as Eq. (3.9). This is completely

5.2 The Characteristic Impedance
87
Fig. 5.3 At t = 0, the cable 
is perceived as an impedance 
to ground 
wrong! Z0 has nothing to do with the ohm resistance in Eq. (3.9)!! (Of course it 
doesn’t! Eq. (3.9) depends on the cable length. In Fig. 5.3, the cable length is still 
unknown, and still, we have a number for Z0.)
• Z0 is the ‘wave impedance’; how hard it is for the EM ﬁeld to propagate down 
the cable. 
• Z0 still depends on manufacturing parameters, but ‘standard’ cables have ‘stan-
dard’ Z0 values. The standard cable in a physics lab is the RG58 coaxial cable 
which has a characteristic impedance of ….. 50 Ω! 
This is the origin of the ‘50-Ω’ fuss; since RG58 cables are omnipresent in all 
labs, a lot of equipment have been customized to work in that ‘environment’. 
Obviously, from Fig. 5.3, we can see that at time t = 0, the voltage U0 will be 
distributed across Zi and Z0. The voltage across Z0 is 
uppe r
 U Subscript upper Z Baseline 0 Baseline equals StartFraction upper Z 0 Over upper Z 0 plus upper Z Subscript i Baseline EndFraction upper U 0
upp er U 
Su
bscript upper Z Baseline 0 Baseline equals StartFraction upper Z 0 Over upper Z 0 plus upper Z Subscript i Baseline EndFraction upper U 0
UZ0 is the voltage that will propagate down the cable towards the load. (UZ0 has 
nothing to do with the size of the load Zload.) The rest of U0 (i.e., U0 − UZ0) stays 
over Zi. We will illustrate the consequences of the characteristic impedance by a 
detailed example. 
Example 5.1 Suppose we have the system in Fig. 5.4. If  U0 is a step voltage that 
goes from 0 to +5 V at  t = 0, plot the signal levels at the ‘near’ end (un) and the ‘far’ 
end (uf) as a function of time (in the same diagram).
Solution Since we have an RG58 coax cable, Z0 = 50 Ω. According to Fig. 5.3, we  
have the equivalent circuit in Fig. 5.5 at t = 0.
Equation (5.1) gives us 
uppe r
 U Subscript upper Z Baseline 0 Baseline equals StartFraction 50 Over 20 plus 50 EndFraction dot 5 upper V equals plus 3.57 upper V
upp er U Sub s cr ipt up per Z Baseline 0 Baseline equals StartFraction 50 Over 20 plus 50 EndFraction dot 5 upper V equals plus 3.57 upper V
This is the voltage that will propagate down the coax cable towards the far end, 
and since this is the voltage at the near end, un will go from 0 V to +3.57 V at t =

88
5
Transmission Lines
Fig. 5.4 Voltage source and transmission cable. Load impedance = ∞ means the far end is ‘open’
Fig. 5.5 System at t = 0
0. Nothing happens at the far end (yet); uf still = 0. Figure 5.6 illustrates the near-
and far-end signals a few moments after t = 0. 
Fig. 5.6 Signal levels just after t = 0

5.2 The Characteristic Impedance
89
Fig. 5.7 The signal situation on the cable just after t = 0 
Next, we need to understand what happens in the cable after t = 0. UZ0 represents 
the voltage that moves towards the far end; a ‘wavefront’, 3.57 V high, propagates 
down the cable, see Fig. 5.7. This ‘wavefront’ leaves the voltage level +3.57 V 
behind it on the cable (but the voltage in front of the wavefront is still 0 V). 
Nothing will happen at the far end until the wavefront in Fig. 5.7 reaches the far 
end. Before we worry about what happens when the wavefront hits the far end, we 
must ﬁrst ﬁgure out how long it takes until this happens. How fast does the wavefront 
in Fig. 5.7 propagate? The wavefront in Fig. 5.7 represents the propagation of the 
EM ﬁeld in the cable, and EM ﬁelds travel at the speed of light. That is, the speed of 
light in the cable, which for an RG58 coax cable is 0.66 × c0 = 2·108 m/s. So, if the 
cable is 20 m long, it will take 20/2·108 = 100 ns. After 100 ns, the wavefront hits 
the load impedance. To understand what happens at that moment, we will rephrase 
that: After 100 ns, the wave enters a new medium. And we know from wave theory 
that when a wave enters a new medium, there will be wave reﬂection; some wave  
energy will be absorbed (or transmitted) and some will be reﬂected. Fresnel’s law 
gives us the reﬂection coefﬁcient as the quotient between the difference and sum of 
the refractive indices, but we don’t know the refractive indices here. 
Fortunately, the refractive indices are proportional to the wave impedances, so we 
can write Fresnel’s law as 
ga mma e quals StartFraction n 2 minus n 1 Over n 2 plus n 1 EndFraction equals StartFraction upper Z 2 minus upper Z 1 Over upper Z 2 plus upper Z 1 EndFraction
gam ma eq
ua ls StartFraction n 2 minus n 1 Over n 2 plus n 1 EndFraction equals StartFraction upper Z 2 minus upper Z 1 Over upper Z 2 plus upper Z 1 EndFraction
gam ma eq
uals StartFraction n 2 minus n 1 Over n 2 plus n 1 EndFraction equals StartFraction upper Z 2 minus upper Z 1 Over upper Z 2 plus upper Z 1 EndFraction
At the far end, Z2 = Zload = ∞ and Z1 = Z0 = 50 Ω, so the reﬂection coefﬁcient 
at the far end is 
gam a S u bscript f Baseline equals StartFraction normal infinity minus 50 Over normal infinity plus 50 EndFraction equals plus 1
g a mma S ubscript f Baseline equals StartFraction normal infinity minus 50 Over normal infinity plus 50 EndFraction equals plus 1
That means that all of the incoming wave is reﬂected. (Of course, it is. The far 
end is open. Where else would it go?). So, after 100 ns we will have a wave of +

90
5
Transmission Lines
Fig. 5.8 The signal situation on the cable just after 100 ns 
3.57 V going back to the near end. The ‘+’ sign indicates that there is no phase shift, 
so the ‘back’ going waves will interact constructively with the incoming waves, and 
hence the back/left-going wavefront will leave a voltage level behind of 3.57 + 3.57 
= 7.14 V. This is illustrated in Fig. 5.8. 
And, since we measure uf at the far end, uf = 7.14 V after 100 ns. We can now 
update our timing diagram in Fig. 5.6, see Fig. 5.9. Nothing happens at the near end 
(yet). The near-end signal is stationary until the new wavefront reaches the near end. 
(Notice in Fig. 5.9 that neither signal is nowhere near the ‘expected’ 5-V line. 
Yet…). 
After 200 ns, the wavefront in Fig. 5.8 reaches the near end, and we will again 
have wave reﬂection. The reﬂection coefﬁcient at the near end is
Fig. 5.9 Signal levels just after t = 100 ns 

5.2 The Characteristic Impedance
91
gam ma  Su bscript n Baseline equals StartFraction upper Z Subscript i Baseline minus upper Z 0 Over upper Z Subscript i Baseline plus upper Z 0 EndFraction equals StartFraction 20 minus 50 Over 20 plus 50 EndFraction equals negative 0.429
gam ma Su
bscri pt n Baseline equals StartFraction upper Z Subscript i Baseline minus upper Z 0 Over upper Z Subscript i Baseline plus upper Z 0 EndFraction equals StartFraction 20 minus 50 Over 20 plus 50 EndFraction equals negative 0.429
gam ma Su b script n Baseline equals StartFraction upper Z Subscript i Baseline minus upper Z 0 Over upper Z Subscript i Baseline plus upper Z 0 EndFraction equals StartFraction 20 minus 50 Over 20 plus 50 EndFraction equals negative 0.429
Hence, the reﬂected wave is −0.429 × (+3.57) = −1.53 V. So, after the wavefront 
impacts the near end, a wave with amplitude −1.53 V will go back again towards the 
far end. The ‘−’ sign indicates a phase shift of 180°, which means that the back-going 
waves will interact destructively with the incoming waves. The incoming wavefront 
left a voltage level of 7.14 V behind. The new wavefront going back to the far end 
will leave a voltage of 7.14 − 1.53 = 5.61 V behind. This is illustrated in Fig. 5.10 
and in Fig. 5.11, we have updated our timing diagram; the near-end voltage goes up 
to 5.61 V. 
Fig. 5.10 The signal levels on the cable just after t = 200 ns 
Fig. 5.11 The far- and near-end signals after 200 ns

92
5
Transmission Lines
After another 100 ns (t = 300 ns), the −1.53 V wavefront in Fig. 5.10 will hit 
the far end and since the reﬂection coefﬁcient at the far end is (still) +1, all of the 
incoming wave is reﬂected; there will be a wavefront of −1.53 V going back to the 
near end. This will interact destructively with the incoming waves, leaving a voltage 
level of 5.61 – 1.53 = 4.08 V behind the wavefront, see Fig. 5.12. Hence, the far-end 
signal level will drop to 4.08 V, see Fig. 5.13. 
At t = 400 ns, the −1.53 V wavefront returns to the near end where the reﬂection 
is −0.429 × (−1.53) = +0.65. The ‘+’ sign indicates a constructive interaction with 
the incoming waves which means that the wavefront returning to the far end will
Fig. 5.12 Signal levels on the cable just after t = 300 ns 
Fig. 5.13 Far- and near-end signals after 300 ns 

5.2 The Characteristic Impedance
93
leave behind a voltage level of 4.08 + 0.65 = 4.73 V, see Fig. 5.14, and this will also 
be the signal level at the near end, see the updated timing diagram in Fig. 5.15. 
After 500 ns, the +0.65 V wavefront is reﬂected at the far end (+1) and a new 
+0.65 V wavefront goes back to the near end. The new +0.65 V wave interacts 
constructively with the incoming waves, leaving behind a voltage level of 4.73 + 
0.65 = 5.38 V (= uf), see Figs. 5.16 and 5.17.
At t = 600 ns, the 0.65 V wave returns to the near end and the reﬂected wave is − 
0.429 × 0.65 = −0.28 V, interacting destructively with the incoming waves, leaving 
5.38 – 0.28 = 5.10 V behind (= un), see Figs. 5.18 and 5.19.
Fig. 5.14 Signal levels on the cable just after t = 400 ns 
Fig. 5.15 Far- and near-end signals after 400 ns 

94
5
Transmission Lines
Fig. 5.16 Signal levels on the cable just after t = 500 ns 
Fig. 5.17 Far- and near-end signals after 500 ns
We got the idea. Both the near- and far-end signals converge to +5 V, see Fig. 5.20. 
Of course, they do; it’s an open circuit! Eventually, it is just a DC voltage on an open 
wire. But it takes a while! In this case, more than a microsecond. That may or may 
not be okay, but it is easy to see how this could cause some serious problems.
First, it takes over 1 µs for the reﬂections to peter out. What if we don’t have 
that time? Suppose the source signal is not a step function, but a square wave with 
frequency 10 MHz, i.e., a period of 100 ns. Then, because of the reﬂections, the 
signal would be seriously distorted. 
Second, suppose we have some kind of digital counting device at the far end (high-
impedance input) with a trigger level of 5 V, then according to the timing diagram 
in Fig. 5.20, each pulse would generate multiple counts.

5.3 Termination
95
Fig. 5.18 Signal levels on the cable just after t = 600 ns 
Fig. 5.19 Far- and near-end signals after 600 ns
Third, if this situation was allowed to occur in a serial digital network, like Ethernet 
or the automotive CAN network, it would corrupt all communication in the network. 
5.3 
Termination 
Reﬂections in a transmission cable, like the ones we saw in Example 5.1, are almost 
always unwanted. Admittedly, there are some applications that capitalize on this 
phenomenon (see Sect. 5.5), but in most situations, pulse reﬂections are unwanted 
and need to be remedied. It is not that hard; Eq. (5.2) gives us the answer. The

96
5
Transmission Lines
Fig. 5.20 Far- and near-end signals after 1200 ns
reﬂections are promptly cancelled if the reﬂection coefﬁcient is zero. It is zero if the 
numerator in Eq. (5.2) is zero, i.e., if 
upper Z Sub scri pt 
load Baseline equals upper Z 0 right double arrow gamma equals 0
If the load impedance equals the characteristic impedance of the cable, then reﬂec-
tions are cancelled. If we have a 50-Ω cable (RG58) we must ‘terminate’ the cable 
with a 50-Ω load resistor to prevent reﬂections. This is called ‘impedance matching’. 
And this is true for both ends. That is why most waveform generators, like the popular 
Agilent/Keysight 33220 series, have an output impedance of 50 Ω; if anything comes 
back from the far end, the waveform generator will absorb it. This is also why modern 
oscilloscopes always have a 50-Ω input option. The default input impedance of an 
oscilloscope is 1 MΩ, but it can always be changed to 50 Ω if you have a problem 
with reﬂections. Figure 5.21 illustrates an external 50-Ω terminator for an RG58 
coax cable. 
Don’t you always have this problem? Of course, not. See Fig. 5.1. We had no 
problems there. The problem only occurs when you have ‘long’ cables or ‘fast’ 
signals. ‘Long’ and ‘fast’ are relative terms; a cable is ‘long’ compared to the signal’s
Fig. 5.21 50 Ω terminator 

5.4 Splitting and Splicing
97
wavelength. You need to worry about cable termination if the cable is longer than 
about half the wavelength (for a sinusoidal signal). For a square signal, you terminate 
the cable if the signal rise time is shorter than the propagation time in the cable. (These 
are just rules of thumb. You must always assess the situation at hand.) 
5.4 
Splitting and Splicing 
Sometimes one cable is not long enough and needs to be spliced, or maybe it 
needs to be split to feed multiple instruments. Splitting and splicing of high-speed 
transmission lines is a precarious task and we will investigate both here. 
If you need to splice a cable, you should obviously be careful to use identical 
cables (preferably even from the same cable drum). However, sometimes you might 
have to splice an RG58 cable to another kind of cable (RG59, TP, …) which does 
not have the same characteristic impedance. If you connect two cables with different 
Z0, there will be reﬂections at the the joint, see Fig. 5.22. To avoid that, you need to 
design a simple interface between the cables. 
In Fig. 5.23, we want to splice an RG58 coax (Z1 = 50 Ω) with an RG62 coax 
cable (Z2 = 93 Ω). All we need is the simple resistor network in Fig. 5.23. 
The resistor values are given by the expressions in Eq. (5.4): 
up er R 1 equals upper Z 1 StartRoot StartFraction upper Z 2 Over upper Z 2 minus upper Z 1 EndFraction EndRoot upper R 2 equals StartRoot upper Z 2 left parenthesis upper Z 2 minus upper Z 1 right parenthesis EndRoot
/
uper R 1 equals upper Z 1 StartRoot StartFraction upper Z 2 Over upper Z 2 minus upper Z 1 EndFraction EndRoot upper R 2 equals StartRoot upper Z 2 left parenthesis upper Z 2 minus upper Z 1 right parenthesis EndRoot
up er R 
1 e quals upper Z 1 StartRoot StartFraction upper Z 2 Over upper Z 2 minus upper Z 1 EndFraction EndRoot upper R 2 equals StartRoot upper Z 2 left parenthesis upper Z 2 minus upper Z 1 right parenthesis EndRoot
√
upper R 1 e
quals upper Z 1 StartRoot StartFraction upper Z 2 Over upper Z 2 minus upper Z 1 EndFraction EndRoot upper R 2 equals StartRoot upper Z 2 left parenthesis upper Z 2 minus upper Z 1 right parenthesis EndRoot
Fig. 5.22 Splicing two cables with different Z0 will generate reﬂections at the joint 
RG58
RG62/U 
Z1 = 50 Ω
Z2 = 93 Ω
Z2 > Z1 
R1 
R2 
Fig. 5.23 Splicing two cables 

98
5
Transmission Lines
Fig. 5.24 Splitting a cable with a T-cross will cause reﬂections 
Example 5.2 Find the resistor values for R1 and R2 if you need to splice an RG58 
cable with an RG62 cable. 
Solution Z1 = 50 Ω and Z2 = 93 Ω: 
up er R 1 equals 50 StartRoot StartFraction 93 Over 93 minus 50 EndFraction EndRoot equals 74 normal upper Omega upper R 2 equals StartRoot 93 left parenthesis 93 minus 50 right parenthesis EndRoot equals 63 normal upper Omega
/
upper R 1 equals 50 StartRoot StartFraction 93 Over 93 minus 50 EndFraction EndRoot equals 74 normal upper Omega upper R 2 equals StartRoot 93 left parenthesis 93 minus 50 right parenthesis EndRoot equals 63 normal upper Omega
upp er R 1 eq u
als  50 StartRoot StartFraction 93 Over 93 minus 50 EndFraction EndRoot equals 74 normal upper Omega upper R 2 equals StartRoot 93 left parenthesis 93 minus 50 right parenthesis EndRoot equals 63 normal upper Omega
√
upper R 1 equals  50 StartRoot StartFraction 93 Over 93 minus 50 EndFraction EndRoot equals 74 normal upper Omega upper R 2 equals StartRoot 93 left parenthesis 93 minus 50 right parenthesis EndRoot equals 63 normal upper Omega
Another problem is splitting a transmission cable. Most people just use a ‘T-
cross’ connector, see Fig. 5.24. This is not a good idea if you have ‘fast’ signals, 
because this splitting will cause reﬂections. The reason is that the incoming signal 
(from any direction) will see two cables, i.e., two 50-Ω impedances to ground, which 
corresponds to 25 Ω to ground, which is an impedance mismatch, and we will have 
reﬂections. 
The trick is to insert a network so that the perceived impedance is always 50 Ω, 
regardless of where the signal comes from. The solution is illustrated in Fig. 5.25. 
This splitting is reﬂection-free since from any direction the total impedance is 16.7 
+ (16.7 + 50)//(16.7 + 50) = 16.7 + 66.7//67.7 = 16.7 + 33.3 = 50 Ω.
5.5 
Attenuation 
Because of the non-zero ohm resistance in any conductor, a propagating signal will 
be attenuated. This is illustrated in Fig. 5.26.
The attenuation factor is expressed in ‘dB/m’: 
alph
a e quals StartStartFraction 20 dot log StartFraction u Subscript x Baseline Over u 0 EndFraction OverOver x EndEndFraction left bracket dB slash m right bracket
alpha equals StartStartFraction 20 dot log StartFraction u Subscript x Baseline Over u 0 EndFraction OverOver x EndEndFraction left bracket dB slash m right bracket
al
pha eq
uals StartStartFraction 20 dot log StartFraction u Subscript x Baseline Over u 0 EndFraction OverOver x EndEndFraction left bracket dB slash m right bracket

5.6 Time Domain Reﬂectometry
99
RG58 
RG58
RG58 
16.7 Ω
16.7 Ω
16.7 Ω
Fig. 5.25 Reﬂection-free splitting
Fig. 5.26 The signal is attenuated in the cable
and hence 
u S ubscr ipt x Base
line equals u 0 dot 10 Superscript alpha x divided by 20
There is one important aspect of the attenuation factor that you need to know; it 
is highly frequency dependent, α = α( f ). You will ﬁnd an attenuation number in 
the data sheet but remember that it is for a speciﬁc frequency. For example, it could 
say ‘−0.1 dB/m @ 50 MHz’. That means that you can use that attenuation factor 
only for  a 50 MHz  sinusoidal signal. If you use anything else, you must measure the 
attenuation yourself (by ﬁrst applying your signal to a cable with a known length.) 
5.6 
Time Domain Reﬂectometry 
Time Domain Reﬂectometry, TDR, is an example of a measurement technique that 
takes advantage of impedance mismatching. Consider the setup in Fig. 5.27.
In Fig. 5.27, the cable type and the cable length are unknown, and so is the load 
impedance at the far end. Next, suppose the waveform generator sends out a ‘short’

100
5
Transmission Lines
Fig. 5.27 We don’t know the cable type, the cable length, or the load impedance
pulse and that we monitor the near-end signal un on an oscilloscope. Figure 5.28 
illustrates un. 
There is a lot of information that we can extract from Fig. 5.28. First, we can 
ﬁgure out the characteristic impedance of the unknown cable. By measuring uZ0 and 
applying Eq. (5.1), we can solve for Z0. 
And once we know Z0, we can identify the cable and then we know the propagation 
velocity in the cable. And if we know the signal velocity, we can ﬁnd the cable length, 
since the time it takes for the pulse to return corresponds to twice the cable length: 
L = v·t2L/2. 
Finally, we can also ﬁgure out the far-end load impedance by studying the size of 
the returned pulse; if we can ﬁgure out the far-end reﬂection coefﬁcient, we can use 
Eq. (5.2) and solve for Zload (= Z2). But this is a little precarious. 
The returned pulse will be smaller than uZ0, but it is important to understand that 
there are two reasons for that. It will lose amplitude partly because of the attenuation 
in the cable and partly because of the reﬂection against the far-end impedance (see 
Fig. 5.29).
If we send out a pulse of height uZ0, then according to Eq. (5.6), u Su bscript upper Z Baseline 0 Baseline dot 10 Superscript alpha upper L divided by 20 will 
arrive at the far end. At the far end, there will be wave reﬂections and the size of the 
reﬂected wavefront will be u Su bscript upp er Z Baseline 0 Baseline dot 10 Superscript alpha upper L divided by 20 Baseline dot gamma Subscript f. On its way back to the near end, the 
pulse will again be attenuated, so the height of the pulse returning to the near end is
Fig. 5.28 A typical TDR response 

5.7 Solved Problems
101
Fig. 5.29 There are two 
contributions to the signal 
loss
(5.7) 
And solving for gamma Subscript f: 
gam ma Subscript f Baseline equals StartFraction u Subscript 2 upper L Baseline Over u Subscript upper Z Baseline 0 Baseline EndFraction dot 10 Superscript minus alpha upper L divided by 10
gam
a Subscript
 f Baseline equals StartFraction u Subscript 2 upper L Baseline Over u Subscript upper Z Baseline 0 Baseline EndFraction dot 10 Superscript minus alpha upper L divided by 10
Inserting this γ f number into Eq. (5.2), we can solve for the load impedance. 
There is just one problem; we must know the attenuation coefﬁcient in the cable for 
our probing pulse. There is no easy way to ﬁnd α. Once you have identiﬁed the cable 
(from Z0), you must ﬁnd an identical cable of known length (open-ended) and send 
in your pulse and study the attenuation of the returned pulse. 
This is the basic TDR theory. It can be used to ﬁnd anyone of the parameters, Z0, 
L, and γ , but in ‘TDR applications, it is usually understood that it is used only to 
ﬁnd L. For example, it is used to localize cable failures in long transmission lines or 
communication networks. 
However, due to the versatility of the TDR technique, it has found applications in 
a wide range of areas. For example, a TDR-based technique for automatic monitoring 
of the water content in soil [1, 2] has been reported, landslide warning systems in 
Taiwan [3] and monitoring of rock mass response in underground mining [4] are  
other examples of TDR applications. 
5.7 
Solved Problems 
Problem 5.1 A 10-m RG58 coax cable is used to transmit a 45-MHz sine signal. 
Does this cable need to be 50-Ω terminated? 
Solution It needs to be terminated if the cable is longer than half the signal 
wavelength. The signal wavelength is

102
5
Transmission Lines
Fig. 5.30 A TDR experiment 
lamd a equals StartFraction v Over f EndFraction equals StartFraction 2 dot 10 Superscript 8 Baseline Over 45 dot 10 Superscript 6 Baseline EndFraction equals 4.4 m
la md a equals StartFraction v Over f EndFraction equals StartFraction 2 dot 10 Superscript 8 Baseline Over 45 dot 10 Superscript 6 Baseline EndFraction equals 4.4 m
lam da equ als S t artFraction v Over f EndFraction equals StartFraction 2 dot 10 Superscript 8 Baseline Over 45 dot 10 Superscript 6 Baseline EndFraction equals 4.4 m
Half the signal wavelength is 2.2 m which is shorter than the cable length. Yes, 
this cable needs to be 50-Ω terminated. 
Problem 5.2 A CAN bus runs at a bit rate of 5 Mbits/s and the bits’ risetime is 10 ns. 
How long network can you have before you need to terminate the ends of the bus1 ? 
Solution If we assume the same velocity factor in a CAN bus cable as in an RG58 
coax cable, the signal travels 2·108 × 10·10−9 = 2 m during the rise time. If the 
network is longer than that, it needs to be terminated (at both ends). 
Problem 5.3 In Example 5.2, we got the resistor values 74 and 63 Ω. These are 
not ‘standard’ resistor values. How would you solve this if you only have access to 
resistors from the E12 series? 
Solution The E12 series comprises the numbers 10, 12, 15, 22, 27, 33, 39, 47, 56, 68, 
and 82 (multiplied by any multiple of 10). Then we use the following combinations 
to get the desired resistances: 
74  norma l up
pe r  Omega equ al s 4 7 plus 27 63 normal upper Omega equals 82 slash slash 270 equals StartFraction 82 dot 270 Over 82 plus 270 EndFraction equals 63
74 normal  upper Omega equals 47 plus 27 63 normal upper Omega equals 82 slash slash 270 equals StartFraction 82 dot 270 Over 82 plus 270 EndFraction equals 63
To get 74 Ω, we connect a 47-Ω resistor in series with a 27-Ω resistor. To get 63
Ω, we connect an 82-Ω resistor in parallel with a 270-Ω resistor.2 
Problem 5.4 Consider the TDR experiment in Fig. 5.30. Figure 5.31 illustrates the 
near-end signal.
The propagation speed in the cable is 0.7c0.
1 The characteristic impedance of a CAN bus cable is typically 120 Ω, so ‘termination’ in this case 
would be a 120-Ω resistor. 
2 Google “resistor e12 series online combination” and you will ﬁnd an online tool for how to 
combine standard resistor values to any other resistance. 

5.7 Solved Problems
103
Fig. 5.31 The near-end signal
(a) Determine the characteristic impedance of the cable. (b) What is the cable length? 
(c) What is the attenuation in the cable? and (d) Draw the corresponding diagram if 
the far-end is short-circuited to ground. 
Solution (a) Equation (5.1)gives Star t
Layout 1st Row 1st Column upper U Subscript upper Z Baseline 0 Baseline equals StartFraction upper Z 0 Over upper Z 0 plus 50 EndFraction dot 2 2nd Column equals 1.2 right double arrow 2 upper Z 0 equals 1.2 upper Z 0 plus 60 EndLayout
Sta rtLay out 1s t Ro w 1st Column u pper U Subscript upper Z Baseline 0 Baseline equals StartFraction upper Z 0 Over upper Z 0 plus 50 EndFraction dot 2 2nd Column equals 1.2 right double arrow 2 upper Z 0 equals 1.2 upper Z 0 plus 60 EndLayout
St artLay out 1 st Ro w ri ght double arrow 0.8 upper Z 0 equals 60 right double arrow upper Z 0 equals ModifyingBelow 75 normal upper Omega With quotation dash EndLayout
(b) up per L e quals v t divide d by 2  equals 0 .7 dot 3  dot 10 Superscript 8 Baseline dot 230 dot 10 Superscript negative 9 Baseline divided by 2 equals ModifyingBelow 24.15 m With quotation dash
(c) alph
a e qual s StartStartFraction 20 log StartFraction u Subscript x Baseline Over u 0 EndFraction OverOver 2 dot upper L EndEndFraction equals StartStartFraction 20 log StartFraction 1 Over 1.2 EndFraction OverOver 2 dot 24.15 EndEndFraction equals ModifyingBelow negative 0.033 dB slash m With quotation dash
alpha equals StartStartFraction 20 log StartFraction u Subscript x Baseline Over u 0 EndFraction OverOver 2 dot upper L EndEndFraction equals StartStartFraction 20 log StartFraction 1 Over 1.2 EndFraction OverOver 2 dot 24.15 EndEndFraction equals ModifyingBelow negative 0.033 dB slash m With quotation dash
alph
a 
equ als StartStartFraction 20 log StartFraction u Subscript x Baseline Over u 0 EndFraction OverOver 2 dot upper L EndEndFraction equals StartStartFraction 20 log StartFraction 1 Over 1.2 EndFraction OverOver 2 dot 24.15 EndEndFraction equals ModifyingBelow negative 0.033 dB slash m With quotation dash
alpha equals StartStartFraction 20 log StartFraction u Subscript x Baseline Over u 0 EndFraction OverOver 2 dot upper L EndEndFraction equals StartStartFraction 20 log StartFraction 1 Over 1.2 EndFraction OverOver 2 dot 24.15 EndEndFraction equals ModifyingBelow negative 0.033 dB slash m With quotation dash
alpha eq u als Sta rtStartFraction 20 log StartFraction u Subscript x Baseline Over u 0 EndFraction OverOver 2 dot upper L EndEndFraction equals StartStartFraction 20 log StartFraction 1 Over 1.2 EndFraction OverOver 2 dot 24.15 EndEndFraction equals ModifyingBelow negative 0.033 dB slash m With quotation dash
(d) Short-circuit to ground ⇒ γ f = –1 (see Fig. 5.32). 
Problem 5.5 Consider the experiment in Fig. 5.33. 
This is what we know about the cable: It is 30 m long, has a characteristic 
impedance of 50 Ω, and, for the pulse-type signal in Fig. 5.33, the attenuation is 
−0.02 dB/m.
Determine the load impedance if the near-end signal looks as in Fig. 5.34.
Solution u S ubsc ript x Baseline equa ls 2 dot 10 Supe rscript ne g ati ve 0.0 2  dot 30 divided by 20 Baseline gamma Subscript f Baseline dot 10 Superscript negative 0.02 dot 30 divided by 20 Baseline equals 1.74 gamma Subscript f Baseline equals negative 1 right double arrow gamma Subscript f Baseline equals negative 0.574
Fig. 5.32 The near-end signal if the far end is short-circuited 

104
5
Transmission Lines
Fig. 5.33 The TDR experiment
Fig. 5.34 The near-end signal
Star tL ayout 1st Row 1st Column gamma Subscript f Baseline equals StartFraction upper Z Subscript load Baseline minus 50 Over upper Z Subscript load Baseline plus 50 EndFraction equals negative 0.574 right double arrow upper Z Subscript load Baseline minus 50 equals 2nd Column negative 0.574 dot upper Z Subscript load minus 28.7 2nd Row 1st Column Blank 2nd Column 1.574 dot upper Z Subscript load Baseline equals 21.3 right double arrow ModifyingBelow upper Z Subscript load Baseline equals 13.5 normal upper Omega With quotation dash EndLayout
StartL ayout  1st Row  1st Col umn g a m ma Subs cript f Baselin
e equa ls Start Fractio n upper Z Subs cript load Baseline minus 50 Over upper Z Subscript load Baseline plus 50 EndFraction equals negative 0.574 right double arrow upper Z Subscript load Baseline minus 50 equals 2nd Column negative 0.574 dot upper Z Subscript load minus 28.7 2nd Row 1st Column Blank 2nd Column 1.574 dot upper Z Subscript load Baseline equals 21.3 right double arrow ModifyingBelow upper Z Subscript load Baseline equals 13.5 normal upper Omega With quotation dash EndLayout
Problem 5.6 Consider the experiment in Fig. 5.35 (the input signal is a step function). 
Plot the near-end signal if Zload is (a) an open end, (b) a short-circuit to ground, 
(c) a 50-Ω resistor, (d) a capacitor, and (e) an inductor. (Disregard attenuation in this 
problem.) 
Solution First, let’s ﬁgure out what the step response of un is. Since we have an 
RG58 cable, it has a characteristic impedance of 50 Ω; at  t = 0, 2 V will propagate 
down the cable. If anything is reﬂected at the far end, it will return to the near end
Fig. 5.35 A TDR experiment 

5.7 Solved Problems
105
Fig. 5.36 The ﬁrst t2L seconds are independent of the load 
after t2L = 2L/v seconds. So, whatever Zload is, the near-end signal will always look 
the same for the ﬁrst t2L seconds, see Fig. 5.36. 
If the far end is open, γ f = +1 and all the incoming +2 V is reﬂected, interacting 
constructively with the incoming waves, leaving a voltage of 2 + 2 = 4 V behind. 
When it reaches the near end, un will = 4 V, see Fig. 5.37. 
If the far end load is a short-circuit, the reﬂection coefﬁcient is –1, and the reﬂected 
2 V will interact destructively with the incoming waves and since2–2= 0, the voltage 
level on the cable is cancelled. At t2L, un = 0, see Fig. 5.38.
If Zload = 50 Ω, the far-end reﬂection coefﬁcient is 0 and nothing is returned, see 
Fig. 5.39.
If the load is a capacitor, it will initially be uncharged and as long as it is uncharged, 
current can pass right through it (like a short-circuit). But soon (sooner rather than 
later) it will be fully charged and then it will stop conducting current and act like 
an open circuit. Hence, at ﬁrst it will act like Fig. 5.38, but soon it will act as in 
Fig. 5.37. Figure 5.40 illustrates the capacitor case.
Fig. 5.37 un if Zload = ∞ 

106
5
Transmission Lines
Fig. 5.38 un if Zload = 0
Fig. 5.39 un if Zload = 50 Ω
Fig. 5.40 un if Zload = a capacitor 
On the other hand, if the load is an inductor, it will initially act as an open circuit 
(Fig. 5.37), but once it understands that it is just a DC signal, it will act as a short-
circuit (Fig. 5.38). Figure 5.41 illustrates the inductor case.

5.7 Solved Problems
107
Fig. 5.41 un if Zload = an inductor 
RG58 
Fig. 5.42 Splice the cables 
Problem 5.7 In an experiment, a TP signal cable needs to be spliced to an RG58 
coax cable, see Fig. 5.42. How would you do that if the characteristic impedance of 
the TP cable is 75 Ω? 
Solution Eq. (5.4) gives  
upp er R 1 equals 50 StartRoot StartFraction 75 Over 75 minus 50 EndFraction EndRoot equals 87 normal upper Omega equals 100 normal upper Omega slash slash 680 normal upper Omega
/
upper R 1 equals 50 StartRoot StartFraction 75 Over 75 minus 50 EndFraction EndRoot equals 87 normal upper Omega equals 100 normal upper Omega slash slash 680 normal upper Omega
upp er R 1 eq u als 5 0  S tart Root StartFraction 75 Over 75 minus 50 EndFraction EndRoot equals 87 normal upper Omega equals 100 normal upper Omega slash slash 680 normal upper Omega
upp er R 2 equals StartRoot 75 left parenthesis 75 minus 50 right parenthesis EndRoot equals 43 normal upper Omega equals 10 normal upper Omega plus 33 normal upper Omega
√
upper R 2 equals  Star t Root  75 left parenthesis 75 minus 50 right parenthesis EndRoot equals 43 normal upper Omega equals 10 normal upper Omega plus 33 normal upper Omega
Above we have assumed that we only have access to E12 series resistor values. 
The reﬂection-free splicing is illustrated in Fig. 5.43. 
Problem 5.8 Suggest another way to do the splitting in Fig. 5.25.
RG58 
10 Ω
100 Ω
33 Ω
680 Ω
Fig. 5.43 Reﬂection-free splicing 

108
5
Transmission Lines
Fig. 5.44 Y and ∆networks 
RG58 
RG58
RG58 
50 Ω
50 Ω
50 Ω
Fig. 5.45 Alternative splitting 
Solution The circuit in Fig. 5.25 is a ‘Y’ network (‘wye’). This can be transferred 
to a ‘∆’ network (‘delta’) (see any electricity handbook) (see Fig. 5.44). 
For example, uppe r R 12 
e
quals upper R 1 upper R 2 left parenthesis StartFraction 1 Over upper R 1 EndFraction plus StartFraction 1 Over upper R 2 EndFraction plus StartFraction 1 Over upper R 3 EndFraction right parenthesis comma
up er  R 12 equals upper R 1 upper R 2 left parenthesis StartFraction 1 Over upper R 1 EndFraction plus StartFraction 1 Over upper R 2 EndFraction plus StartFraction 1 Over upper R 3 EndFraction right parenthesis comma
up er  R 12 equals upper R 1 upper R 2 left parenthesis StartFraction 1 Over upper R 1 EndFraction plus StartFraction 1 Over upper R 2 EndFraction plus StartFraction 1 Over upper R 3 EndFraction right parenthesis comma
up
p
er R 12 equals upper R 1 upper R 2 left parenthesis StartFraction 1 Over upper R 1 EndFraction plus StartFraction 1 Over upper R 2 EndFraction plus StartFraction 1 Over upper R 3 EndFraction right parenthesis commabut if R1 = R2 = R3, then this is 
reduced to R12 = 3R1. For our network in Fig. 5.25, that would give us R12 = R23 = 
R13 = 3 × 16.7 = 50 Ω. The alternative network is illustrated in Fig. 5.45.

References
109
References 
1. Wraith, J.M., et al. 2005. Spatially characterizing apparent electrical conductivity and water 
content of surface soils with time domain reﬂectometry. Computers and Electronics in 
Agriculture 46 (1–3): 239–261. 
2. Walker, J.P., G.R. Willgoose, and J.D. Kalma. 2004. In situ measurement of soil moisture: A 
comparison of techniques. Journal of Hydrology 293 (1–4): 85–99. 
3. Su, M.-B., I.-H. Chen, and C.-H. Liao. 2009. Using TDR cables and GPS for landslide monitoring 
in high mountain area. Journal of Geotechnical and Geoenvironmental Engineering 135 (8): 
1113–1121. 
4. O’Connor, K.M., and L.V. Wade. 1994. Applications of time domain reﬂectometry in the 
mining industry. In Proceedings of the symposium and workshop on TDR in environmental, 
infrastructure and mining applications, Northwestern University, Evanston, IL, USA, Sep 1994.

Chapter 6 
Probes 
Abstract This chapter emphasizes the need for probes in electrical measurements. 
A ‘probe’ is used to minimize the measurement system’s interference with the 
measurement object (observing without interfering). Passive probes are introduced 
in Sect. 6.2, active probes in Sect. 6.3, and current probes in Sect. 6.4. 
6.1 
Introduction 
Consider the simple network in Fig. 6.1.
It is easy to see that the potential at point A is 2.5 V. But, of course, we don’t 
really know that until we measure it. A common DMM (or an oscilloscope) has an 
input impedance of 1 MΩ. If we connect that over the 200-kΩ resistor, see Fig. 6.2, 
then the voltage meter’s impedance will be in parallel with the 200-kΩ resistor, and 
the total impedance will be 200//1000 = 167 kΩ, see Fig. 6.2.
By trying to measure the voltage, we change the system. In this example, the 
result is off by almost 10%! System interference is inevitable; you can (almost) 
never measure something without disturbing the system. The important thing here is 
to ﬁrst be aware of that, and second, to do what you can to minimize your instruments’ 
interference. 
In the previous example, it is obvious that the problem is the ‘high’ source 
impedance (or the ‘low’ instrument impedance); the source’s and the instrument’s 
impedances are of the same order. Obviously, the remedy is to increase the impedance 
of the instrument so that it is ‘much higher’ than the source impedance. 
That is exactly what a ‘probe’ does; it increases the impedance of the instrument to 
minimize the instrument’s interference with the system. In the previous DC example, 
the probe would just be a simple high-Ω resistor in series with the voltage meter. In 
Fig. 6.3, we have connected a 9-MΩ resistor in series, which means that the total 
impedance is now 200//10000 = 196 kΩ and the potential in point A is now 2.47 V; 
our new instrument only causes a disturbance corresponding to 1%. That is quite an 
improvement.
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_6 
111

112
6
Probes
Fig. 6.1 Simple DC measurement
Fig. 6.2 Connecting the instrument will change the impedance
Fig. 6.3 Using a probe 
Of course, it could be argued that this will cause an error in the measurement; the 
voltage meter in Fig. 6.3 will only measure one-tenth of this (0.247 V), but that is 
easily compensated for (just multiply by a factor of 10). 
In this example, it was easy and straightforward to design a probe. However, 
probes are mostly used with oscilloscopes measuring AC signals, and that makes

6.2 Passive Probes
113
things a little more complicated. The main objective here is to design probes for 
oscilloscopes. 
6.2 
Passive Probes 
First, we need an accurate model of the oscilloscope’s input. An oscilloscope input 
is always marked with a resistance and a capacitance, see Fig. 6.4. That refers to the 
input impedance values as illustrated in the right-hand side of Fig. 6.4; the input is 
modeled as a resistor and a capacitor in parallel. (The ‘capacitor’ is not a capacitor; 
it is the inherent capacitance of the input.) 
Hence, the input impedance is 
up er Z 1 equ al
s upper X Subscript upper C 1 Baseline slash slash upper R 1 equals StartStartFraction StartFraction 1 Over j omega upper C 1 EndFraction upper R 1 OverOver StartFraction 1 Over j omega upper C 1 EndFraction plus upper R 1 EndEndFraction equals StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction
upper  Z 1 equals upper X Subscript upper C 1 Baseline slash slash upper R 1 equals StartStartFraction StartFraction 1 Over j omega upper C 1 EndFraction upper R 1 OverOver StartFraction 1 Over j omega upper C 1 EndFraction plus upper R 1 EndEndFraction equals StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction
upper Z 1 equals upper X Subscript upper C 1 Baseline slash slash upper R 1 equals StartStartFraction StartFraction 1 Over j omega upper C 1 EndFraction upper R 1 OverOver StartFraction 1 Over j omega upper C 1 EndFraction plus upper R 1 EndEndFraction equals StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction
upper  Z 1 
e
quals upper X Subscript upper C 1 Baseline slash slash upper R 1 equals StartStartFraction StartFraction 1 Over j omega upper C 1 EndFraction upper R 1 OverOver StartFraction 1 Over j omega upper C 1 EndFraction plus upper R 1 EndEndFraction equals StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction
up per Z 1 e
quals upper X Subscript upper C 1 Baseline slash slash upper R 1 equals StartStartFraction StartFraction 1 Over j omega upper C 1 EndFraction upper R 1 OverOver StartFraction 1 Over j omega upper C 1 EndFraction plus upper R 1 EndEndFraction equals StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction
In Eq. (6.1), we see the problem; Z1 depends on the frequency. 
In Fig. 6.3, we multiplied the voltage meter reading by a factor of 10 to get the 
right answer. That is acceptable, if we can always multiply by the same constant (= 
10) to get the right answer, but if we did the same trick in Fig. 6.4, the portion of the 
input voltage that falls over R1 would depend on the frequency; we would have to 
calculate a new multiplication factor for each new frequency, and that would make 
the trick next to useless. So, for AC signals and oscilloscopes, we need to be a little 
more creative. Figure 6.5 illustrates our ‘creative’ solution.
In Fig. 6.5, the ‘probe’ is the R2/C2 circuit, and this is what we need to make 
the fraction of uin that ends up over R1 independent of the input signal’s frequency. 
That may look unlikely at ﬁrst sight, since we have added one more component that 
has a frequency-dependent impedance (C2), but we will prove it shortly. First, we 
consider the DC case. If the input signal is DC, then we can disregard the capacitors 
and we are back to the same problem as in Fig. 6.3. The most common probes are 
‘X10’ probes, meaning that only one-tenth of the input signal ends up over R1 and 
that’s what we are aiming for here. Well, for that to be true for DC signals, we must 
have R2 = 9 MΩ, just like in Fig. 6.3. 
So, we already know the value of R2. The trick now is to, if possible, select a value 
for C2 such that the fraction of the voltage uin that falls over R1 is always one-tenth
1 
1 M 
12 pF 
R1 = 1 M
C1 = 12 pF 
Fig. 6.4 Oscilloscope input 

114
6
Probes
Fig. 6.5 Oscilloscope with probe (R1 = 1 MΩ)
of uin, regardless of the input signal’s frequency. If we can’t ﬁnd such a capacitance, 
the whole idea will be rejected. Let’s see what uosc is 
u Sub sc
ript osc Baseline equals StartStartFraction StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction OverOver ModifyingBelow StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction plus StartFraction upper R 2 Over 1 plus j omega upper R 2 upper C 2 EndFraction With bottom brace Underscript delta Endscripts EndEndFraction times u Subscript in
u Subscript osc Baseline equals StartStartFraction StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction OverOver ModifyingBelow StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction plus StartFraction upper R 2 Over 1 plus j omega upper R 2 upper C 2 EndFraction With bottom brace Underscript delta Endscripts EndEndFraction times u Subscript in
u Subscript osc Baseline equals StartStartFraction StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction OverOver ModifyingBelow StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction plus StartFraction upper R 2 Over 1 plus j omega upper R 2 upper C 2 EndFraction With bottom brace Underscript delta Endscripts EndEndFraction times u Subscript in
u Subscript
 
osc Baseline equals StartStartFraction StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction OverOver ModifyingBelow StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction plus StartFraction upper R 2 Over 1 plus j omega upper R 2 upper C 2 EndFraction With bottom brace Underscript delta Endscripts EndEndFraction times u Subscript in
u Subscrip
t osc Baseline equals StartStartFraction StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction OverOver ModifyingBelow StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction plus StartFraction upper R 2 Over 1 plus j omega upper R 2 upper C 2 EndFraction With bottom brace Underscript delta Endscripts EndEndFraction times u Subscript in
u Subscript osc Baseline equals StartStartFraction StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction OverOver ModifyingBelow StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction plus StartFraction upper R 2 Over 1 plus j omega upper R 2 upper C 2 EndFraction With bottom brace Underscript delta Endscripts EndEndFraction times u Subscript in
u
 S
ubscr
ipt osc Baseline equals StartStartFraction StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction OverOver ModifyingBelow StartFraction upper R 1 Over 1 plus j omega upper R 1 upper C 1 EndFraction plus StartFraction upper R 2 Over 1 plus j omega upper R 2 upper C 2 EndFraction With bottom brace Underscript delta Endscripts EndEndFraction times u Subscript in
Equation (6.2) does not look very promising; there are a lot of ωs in Eq.  (6.2) and 
we want δ to be independent of ω; we want δ = 1/10. Well, that is possible; if we 
make R1C1 = R2C2, we can cancel all the 1 + jωRxCx denominators and then: 
u Sub sc
ript osc Baseline equals StartFraction upper R 1 Over upper R 1 plus upper R 2 EndFraction times u Subscript in Baseline equals StartFraction 1 Over 1 plus 9 EndFraction times u Subscript in Baseline equals one tenth times u Subscript in
u S ubscr
ipt os c 
Baseline equals StartFraction upper R 1 Over upper R 1 plus upper R 2 EndFraction times u Subscript in Baseline equals StartFraction 1 Over 1 plus 9 EndFraction times u Subscript in Baseline equals one tenth times u Subscript in
u Subs cript os c Baseline equals StartFraction upper R 1 Over upper R 1 plus upper R 2 EndFraction times u Subscript in Baseline equals StartFraction 1 Over 1 plus 9 EndFraction times u Subscript in Baseline equals one tenth times u Subscript in
u S ubscr
ipt osc Baseline equals StartFraction upper R 1 Over upper R 1 plus upper R 2 EndFraction times u Subscript in Baseline equals StartFraction 1 Over 1 plus 9 EndFraction times u Subscript in Baseline equals one tenth times u Subscript in
which is exactly what we are looking for. So, if 
up er  C 2 equals StartFraction upper R 1 Over upper R 2 EndFraction upper C 1 equals one ninth times 12 equals 1.33 p upper F
up
er C 2 equals StartFraction upper R 1 Over upper R 2 EndFraction upper C 1 equals one ninth times 12 equals 1.33 p upper F
up per C  2 equa ls
 StartFraction upper R 1 Over upper R 2 EndFraction upper C 1 equals one ninth times 12 equals 1.33 p upper F
we have a frequency-independent voltage divider in Fig. 6.5, and that’s what a passive 
probe is. Figure 6.6 illustrates a typical oscilloscope probe. 
The advantage of an oscilloscope probe is that your instrument’s ‘disturbance’ on 
the system is signiﬁcantly reduced (which is paramount), but the disadvantage is that 
since only a fraction of the input voltage (one-tenth) ends up over the oscilloscope 
(the rest is over the probe), the sensitivity is reduced by a factor of 10. However, 
if you insert the right probe (i.e., the oscilloscope vendor’s probe), the scope will 
automatically recognize it and automatically recalibrate the vertical scale to give you 
the correct reading (you don’t have to think about the 1/10 factor). As you can see 
in Fig. 6.5, the  C2 capacitance is adjustable, usually by a small screw on the probe’s 
head, (see oscilloscope manual for the procedure), but modern oscilloscopes have an 
‘auto-calibration’ option for probes (in some menu somewhere…).

6.2 Passive Probes
115
Apart from not disturbing the voltage at the measurement point, there is one more 
thing you need to consider. We will illustrate that by an example. 
Example 6.1 In Fig. 6.7, two systems are cascaded, one with bandwidth 100 MHz 
and one with bandwidth 120 MHz. What is the overall bandwidth of this system? 
Solution On an exam, a lot of students would answer ‘100 MHz’, arguing that in a 
cascaded system, the component with the narrowest bandwidth deﬁnes the overall 
bandwidth. That is wrong (and earns you zero credits on an exam). It is a lot worse 
than that. Go back to Chap. 1, Fig.  1.4, and Eqs. (1.7) and (1.8), and you will see 
why. The overall risetime of the system in Fig. 6.7 is 
t Subsc ript total Baseline equals StartRoot left parenthesis StartFraction 0.35 Over 0.12 EndFraction right parenthesis squared plus left parenthesis StartFraction 0.35 Over 0.10 EndFraction right parenthesis squared EndRoot equals 4.56 ns
/t Subscript total Baseline equals StartRoot left parenthesis StartFraction 0.35 Over 0.12 EndFraction right parenthesis squared plus left parenthesis StartFraction 0.35 Over 0.10 EndFraction right parenthesis squared EndRoot equals 4.56 ns
t Su
bsc
r
ipt total Baseline equals StartRoot left parenthesis StartFraction 0.35 Over 0.12 EndFraction right parenthesis squared plus left parenthesis StartFraction 0.35 Over 0.10 EndFraction right parenthesis squared EndRoot equals 4.56 ns
t Su
bsc
ript to tal Baseline equals StartRoot left parenthesis StartFraction 0.35 Over 0.12 EndFraction right parenthesis squared plus left parenthesis StartFraction 0.35 Over 0.10 EndFraction right parenthesis squared EndRoot equals 4.56 ns
which means that the overall bandwidth is 
upper B  Subscript total Baseline equals StartFraction 0.35 Over 4.56 EndFraction equals 77 MHz
upper  B Su bscript total Baseline equals StartFraction 0.35 Over 4.56 EndFraction equals 77 MHz
Fig. 6.6 A ‘passive’ 
oscilloscope probe 
Fig. 6.7 Two cascaded 
systems 

116
6
Probes
We learn two things from this example. First, we learn that the overall bandwidth of 
a cascaded system of components is always less than the bandwidth of the system with 
the narrowest bandwidth. Second, notice that by adding the probe to the oscilloscope 
above, we signiﬁcantly reduced the system’s bandwidth. We went from 100 MHz 
without the probe to 77 MHz, with the probe. So, we learned one more thing: 
The probe’s bandwidth must be signiﬁcantly larger than the oscilloscope’s 
bandwidth (or the overall bandwidth will be reduced). 
6.3 
Active Probes 
If high input impedance is what we want, then we can easily ﬁnd a better solution; 
feed the input signal to the input of a op amp in a voltage follower circuit, see Fig. 6.8. 
The probe in Fig. 6.8 is an ‘active’ probe; it is ‘active’ because it needs external 
power to work. Anyway, this is obviously the perfect probe! The input of an op amp 
is extremely large so it would not induce any disturbance at the measurement point, 
and it also does not reduce the sensitivity like the passive probe does. So, if this 
probe is so perfect, why don’t we always use it? Why do we bother with passive 
probes at all? The probe in Fig. 6.8 is so perfect, it is almost too good to be true…. 
And when something sounds too good to be true, it usually is. Active probes are 
no exception. The problem with active probes is that they are very expensive. An 
active probe could easily be e10,000. Why are they so expensive? It looks like a 
simple enough circuit. The answer is in the previous example. We concluded that the 
probe’s bandwidth must be much larger than the oscilloscope’s bandwidth. If you 
have a 500 MHz oscilloscope, you need maybe a 5 GHz probe. So, even if the circuit 
in Fig. 6.8 looks simple and innocent enough, if you scale it up to the GHz range 
(and above), it becomes a very complicated (and expensive) design. So, unless you 
have very deep pockets, you will be stuck with passive probes. 
Here is a common question about active probes: If ‘active’ means that it needs 
external power, does that mean that I need to supply power from an external DC 
power supply? 
No, you don’t. Again, if you use the right probe, the oscilloscope will recognize 
it, and provide the necessary power automatically through the copper pads on the 
oscilloscope input, see Fig. 6.9. (So, for God’s sake, don’t buy the wrong active probe 
to your oscilloscope! If the scope doesn’t recognize it, it is a lot of money down the 
drain.)
Fig. 6.8 An ‘active’ probe 

6.4 Current Probes
117
Fig. 6.9 An active probe is 
powered from the 
oscilloscope 
6.4 
Current Probes 
Oscilloscopes are voltage meters; they inherently measure voltage. You could of 
course measure current by measuring the voltage across some reference resistor, but 
the vertical scale on your scope would still be voltage [V]. However, you can measure 
current with an oscilloscope (with amps [A] on the vertical axis) if you buy a current 
probe. 
Current probes for oscilloscopes are non-contact probes; the probe clamps an 
iron core around the wire-under-test and the induced magnetic ﬂux in the iron core 
is proportional to the current. Figure 6.10 illustrates the principle. 
Fig. 6.10 The current probe principle

118
6
Probes
Fig. 6.11 Current probe with op amp feedback 
The disadvantage of the current probe in Fig. 6.10 is that it doesn’t work for DC 
currents. For that reason, current probe designs typically include a Hall sensor and a 
feedback op amp, see Fig. 6.11. 
In Fig. 6.11, the Hall sensor signal is fed to an op amp with negative feedback and 
since the non-inverting input is at 0 V, the op amp will generate a signal that makes 
the Hall sensor signal zero; the op amp will generate a signal in the coil that cancels 
the total ﬂux in the iron core. Hence, the op amp output signal is proportional to the 
current. 
Current probes are expensive too, and the price depends on the bandwidth you need 
for the current measurement; the higher the current bandwidth the more expensive 
will the probe be. 
If the current is small, a common trick is to twist the wire multiple times around 
the iron core. Figure 6.12 illustrates a common current probe.

6.5 Solved Problems
119
Fig. 6.12 Current probe 
6.5 
Solved Problems 
Problem 6.1 Design a ×10 probe for the oscilloscope in Fig. 6.13. 
Solution Fig. 6.14 illustrates the probe. If we ﬁrst consider the DC case (ignore the 
capacitors), we can ﬁnd R2: 
StartFraction 3 Over 3 plus upper R 2 EndFraction equals one tenth right double arrow ModifyingBelow upper R 2 equals 27 upper M normal upper Omega With quotation dash
St artFr
ac tion 3 Over 3 plus upper R 2 EndFraction equals one tenth right double arrow ModifyingBelow upper R 2 equals 27 upper M normal upper Omega With quotation dash
Sta rtFra ction  3 Over 3 plus upper R 2 EndFraction equals one tenth right double arrow ModifyingBelow upper R 2 equals 27 upper M normal upper Omega With quotation dash
Equation (6.4) gives us upp er C 2 equ als upper R 1 upper C 1 divided by upper R 2 equals 3 dot StartFraction 40 Over 27 EndFraction equals ModifyingBelow 4.44 pF With quotation dash
upp er C 2 equals upper R 1 upper C 1 divided by upper R 2 equals 3 dot StartFraction 40 Over 27 EndFraction equals ModifyingBelow 4.44 pF With quotation dash.
Fig. 6.13 Instrument input 
3 M
40 pF 
Instrument 
Signal 
input 

120
6
Probes
Fig. 6.14 The probe
3 M
40 pF 
Instrument 
R2 
C2 
Probe 
Fig. 6.15 Find the ‘true’ 
potential at A 
Problem 6.2a What is the voltage at point A in Fig. 6.15? 
Solution One-fourth of x(t) falls over the 100-kΩ resistor: ModifyingB elow u Subscript upper A Baseline left parenthesis t right parenthesis equals 1 times sine 10 Superscript 6 Baseline t upper V With quotation dash. 
Problem 6.2b What signal will the oscilloscope in Fig. 6.16 measure? 
Solution 100//1000 = 90.9 kΩ. up e r X Sub script upper  C Basel i ne equ als minus j slash omega upper C equals minus j slash 10 Superscript 6 Baseline dot 15 dot 10 Superscript negative 12 Baseline equals minus j 66 .7 k normal upper Omega
∼ 
100 kΩ 
300 kΩ 
x(t) = 4×sin106t 
1 MΩ
15 pF 
Oscilloscope 
Fig. 6.16 What signal will the oscilloscope display? 

6.5 Solved Problems
121
St artLayout 1st Row  1st Colu mn upper Z equals 2nd Column 90.9 slash slash minus j 66.7 equals StartFraction minus j 66 .7 dot 90 .9 Over 90.9 minus j 66.7 EndFraction equals StartFraction 6063 dot e Superscript minus j 90 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline Over 112.7 dot e Superscript minus j 36.3 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline EndFraction equals 53.8 dot e Superscript minus j 53.7 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline 2nd Row 1st Column Blank 2nd Column equals 31.8 minus j 43.5 k normal upper Omega EndLayout
Start Layout 1 st  Row 1st Col
umn upper Z equals 2nd Column 90.9 slash slash minus j 66.7 equals StartFraction minus j 66 .7 dot 90 .9 Over 90.9 minus j 66.7 EndFraction equals StartFraction 6063 dot e Superscript minus j 90 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline Over 112.7 dot e Superscript minus j 36.3 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline EndFraction equals 53.8 dot e Superscript minus j 53.7 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline 2nd Row 1st Column Blank 2nd Column equals 31.8 minus j 43.5 k normal upper Omega EndLayout
StartL ayout 1st R ow 1st Column up
pe
r Z equ als 2nd  Column 90.9 slash slash minus j 66.7 equals StartFraction minus j 66 .7 dot 90 .9 Over 90.9 minus j 66.7 EndFraction equals StartFraction 6063 dot e Superscript minus j 90 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline Over 112.7 dot e Superscript minus j 36.3 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline EndFraction equals 53.8 dot e Superscript minus j 53.7 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline 2nd Row 1st Column Blank 2nd Column equals 31.8 minus j 43.5 k normal upper Omega EndLayout
StartL a
yout 1st Row 1st Column u Subscript upper A Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction upper Z Over upper Z plus 300 EndFraction dot x left parenthesis t right parenthesis equals StartFraction 53.8 dot e Superscript minus j 53.7 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline Over 31.8 minus j 43.4 plus 300 EndFraction dot 4 dot e Superscript j 10 Super Superscript 6 Superscript t Baseline equals StartFraction 53.8 dot e Superscript minus j 53.7 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline Over 334.6 dot e Superscript minus j 7.5 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline EndFraction dot 4 dot e Superscript j 10 Super Superscript 6 Superscript t Baseline 2nd Row 1st Column Blank 2nd Column equals ModifyingBelow 0.64 dot e Superscript j left parenthesis 10 Super Superscript 6 Superscript t minus 46.2 Super Superscript Super Super Superscript ring Super Superscript Superscript right parenthesis Baseline With quotation dash EndLayout
StartLay out 1st 
Row 1 st Column
 u Subscript upper A Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction upper Z Over upper Z plus 300 EndFraction dot x left parenthesis t right parenthesis equals StartFraction 53.8 dot e Superscript minus j 53.7 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline Over 31.8 minus j 43.4 plus 300 EndFraction dot 4 dot e Superscript j 10 Super Superscript 6 Superscript t Baseline equals StartFraction 53.8 dot e Superscript minus j 53.7 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline Over 334.6 dot e Superscript minus j 7.5 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline EndFraction dot 4 dot e Superscript j 10 Super Superscript 6 Superscript t Baseline 2nd Row 1st Column Blank 2nd Column equals ModifyingBelow 0.64 dot e Superscript j left parenthesis 10 Super Superscript 6 Superscript t minus 46.2 Super Superscript Super Super Superscript ring Super Superscript Superscript right parenthesis Baseline With quotation dash EndLayout
Start Layout 1 st Row  1st  Column u  S ubscr ipt upper
 A Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction upper Z Over upper Z plus 300 EndFraction dot x left parenthesis t right parenthesis equals StartFraction 53.8 dot e Superscript minus j 53.7 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline Over 31.8 minus j 43.4 plus 300 EndFraction dot 4 dot e Superscript j 10 Super Superscript 6 Superscript t Baseline equals StartFraction 53.8 dot e Superscript minus j 53.7 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline Over 334.6 dot e Superscript minus j 7.5 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline EndFraction dot 4 dot e Superscript j 10 Super Superscript 6 Superscript t Baseline 2nd Row 1st Column Blank 2nd Column equals ModifyingBelow 0.64 dot e Superscript j left parenthesis 10 Super Superscript 6 Superscript t minus 46.2 Super Superscript Super Super Superscript ring Super Superscript Superscript right parenthesis Baseline With quotation dash EndLayout
StartL ayout 1st Row 1st Colum
n u Sub scri
p
t
 upper A 
Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction upper Z Over upper Z plus 300 EndFraction dot x left parenthesis t right parenthesis equals StartFraction 53.8 dot e Superscript minus j 53.7 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline Over 31.8 minus j 43.4 plus 300 EndFraction dot 4 dot e Superscript j 10 Super Superscript 6 Superscript t Baseline equals StartFraction 53.8 dot e Superscript minus j 53.7 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline Over 334.6 dot e Superscript minus j 7.5 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline EndFraction dot 4 dot e Superscript j 10 Super Superscript 6 Superscript t Baseline 2nd Row 1st Column Blank 2nd Column equals ModifyingBelow 0.64 dot e Superscript j left parenthesis 10 Super Superscript 6 Superscript t minus 46.2 Super Superscript Super Super Superscript ring Super Superscript Superscript right parenthesis Baseline With quotation dash EndLayout
Compared to the ‘true’ value, we have an amplitude error of 36% and a phase 
error of 46.2°. 
Problem 6.2c Design a × 10 probe for the oscilloscope in Fig. 6.16. 
Solution R2 = 9 MΩ, C2 = 15/9 = 1.67 pF. 
Problem 6.2d What will the oscilloscope measure if we use the probe at point A? 
Solution Fig. 6.17 illustrates the oscilloscope with the probe. 
First, we ﬁnd the impedances Z1 and Z2 (see Eq. (6.1)): 
up e
r  Z 1 equals StartFraction 1 upper M Over 1 plus j dot 10 Superscript 6 Baseline dot 10 Superscript 6 Baseline dot 15 dot 10 Superscript negative 12 Baseline EndFraction equals 66.5 dot e Superscript minus j 86.2 Super Superscript ring Superscript Baseline k normal upper Omega equals 4.4 minus j 66.4 k normal upper Omega
up per Z 1 eq uals S tartF raction 1 upper  M Over 1 plu s j do t 10 Su perscript 6 Baseline dot 10 Superscript 6 Baseline dot 15 dot 10 Superscript negative 12 Baseline EndFraction equals 66.5 dot e Superscript minus j 86.2 Super Superscript ring Superscript Baseline k normal upper Omega equals 4.4 minus j 66.4 k normal upper Omega
up e
r  Z 2 equals StartFraction 9 upper M Over 1 plus j dot 10 Superscript 6 Baseline dot 9 dot 10 Superscript 6 Baseline dot 1.67 dot 10 Superscript negative 12 Baseline EndFraction equals 598.7 dot e Superscript minus j 86.2 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline k normal upper Omega equals 39.7 minus j 597.4 k normal upper Omega
up per Z 2 eq uals  Start Fractio n 9 uppe r M Over  1 plus j
 d
ot  10 Sup erscript  6 Baseline dot 9 dot 10 Superscript 6 Baseline dot 1.67 dot 10 Superscript negative 12 Baseline EndFraction equals 598.7 dot e Superscript minus j 86.2 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline k normal upper Omega equals 39.7 minus j 597.4 k normal upper Omega
up er Z 1 plus upper Z 2 equals 4 4.1 minus j 663.8 k normal upper Omega equals 665.3 dot e Superscript minus j 86.2 Super Superscript ring Superscript Baseline k normal upper Omega
∼ 
100 kΩ 
300 kΩ 
x(t) = 4×sin106t 
1 MΩ
15 pF 
1.67 pF 
A 
9 MΩ 
Z1 
Z2 
Fig. 6.17 Measuring with probe 

122
6
Probes
Sta rt Layo ut 1st Row 1s t Colu mn upper  Z Subscript upper A 2nd Column equals left parenthesis upper Z 1 plus upper Z 2 right parenthesis slash slash 100 k normal upper Omega equals StartFraction 100 dot 665.3 dot e Superscript minus j 86.2 Super Superscript ring Superscript Baseline Over 144.1 minus j 663.8 EndFraction equals StartFraction 66530 dot e Superscript minus j 86.2 Super Superscript ring Superscript Baseline Over 679.3 dot e Superscript minus j 77.8 Super Superscript ring Superscript Baseline EndFraction 2nd Row 1st Column Blank 2nd Column equals 97.9 dot e Superscript minus j 8.4 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline k normal upper Omega equals 96.8 minus j 14.3 k normal upper Omega EndLayout
StartL ayout 1st
 Row 1st  Column upper Z Subscript upper A 2nd Column equals left parenthesis upper Z 1 plus upper Z 2 right parenthesis slash slash 100 k normal upper Omega equals StartFraction 100 dot 665.3 dot e Superscript minus j 86.2 Super Superscript ring Superscript Baseline Over 144.1 minus j 663.8 EndFraction equals StartFraction 66530 dot e Superscript minus j 86.2 Super Superscript ring Superscript Baseline Over 679.3 dot e Superscript minus j 77.8 Super Superscript ring Superscript Baseline EndFraction 2nd Row 1st Column Blank 2nd Column equals 97.9 dot e Superscript minus j 8.4 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline k normal upper Omega equals 96.8 minus j 14.3 k normal upper Omega EndLayout
StartL ayout 1st R
ow  1st Column u
pp
er  Z Subs cript u pper A 2nd Column equals left parenthesis upper Z 1 plus upper Z 2 right parenthesis slash slash 100 k normal upper Omega equals StartFraction 100 dot 665.3 dot e Superscript minus j 86.2 Super Superscript ring Superscript Baseline Over 144.1 minus j 663.8 EndFraction equals StartFraction 66530 dot e Superscript minus j 86.2 Super Superscript ring Superscript Baseline Over 679.3 dot e Superscript minus j 77.8 Super Superscript ring Superscript Baseline EndFraction 2nd Row 1st Column Blank 2nd Column equals 97.9 dot e Superscript minus j 8.4 Super Superscript Super Super Superscript ring Super Superscript Superscript Baseline k normal upper Omega equals 96.8 minus j 14.3 k normal upper Omega EndLayout
StartL a
y out 1st Row 1st Column u Subscript upper A Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction upper Z Subscript upper A Baseline Over upper Z Subscript upper A Baseline plus 300 EndFraction dot x left parenthesis t right parenthesis equals StartFraction 97.9 dot e Superscript minus j 8 .4 Super Superscript ring Superscript Baseline Over 396.8 minus j 14 .3 EndFraction dot 4 dot e Superscript j 10 Super Superscript 6 Superscript t Baseline equals StartFraction 97.9 dot e Superscript minus j 8 .4 Super Superscript ring Superscript Baseline Over 397.1 dot e Superscript minus j 2.1 Super Superscript ring Superscript Baseline EndFraction dot 4 dot e Superscript j 10 Super Superscript 6 Superscript t Baseline 2nd Row 1st Column Blank 2nd Column equals 0.99 dot e Superscript minus j left parenthesis 10 Super Superscript 6 Superscript t minus 6.3 Super Superscript ring Superscript right parenthesis Baseline equals ModifyingBelow 0.99 times sine left parenthesis 10 Superscript 6 Baseline t minus 6.3 Superscript Super Superscript ring Superscript Baseline right parenthesis upper V With quotation dash EndLayout
S tartLayo ut 1st Ro w 1st  Column u Subscript upper A Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction upper Z Subscript upper A Baseline Over upper Z Subscript upper A Baseline plus 300 EndFraction dot x left parenthesis t right parenthesis equals StartFraction 97.9 dot e Superscript minus j 8 .4 Super Superscript ring Superscript Baseline Over 396.8 minus j 14 .3 EndFraction dot 4 dot e Superscript j 10 Super Superscript 6 Superscript t Baseline equals StartFraction 97.9 dot e Superscript minus j 8 .4 Super Superscript ring Superscript Baseline Over 397.1 dot e Superscript minus j 2.1 Super Superscript ring Superscript Baseline EndFraction dot 4 dot e Superscript j 10 Super Superscript 6 Superscript t Baseline 2nd Row 1st Column Blank 2nd Column equals 0.99 dot e Superscript minus j left parenthesis 10 Super Superscript 6 Superscript t minus 6.3 Super Superscript ring Superscript right parenthesis Baseline equals ModifyingBelow 0.99 times sine left parenthesis 10 Superscript 6 Baseline t minus 6.3 Superscript Super Superscript ring Superscript Baseline right parenthesis upper V With quotation dash EndLayout
StartL ayout 1s t Ro w 1st Col um n u S ubscript upper A Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction upper Z Subscript upper A Baseline Over upper Z Subscript upper A Baseline plus 300 EndFraction dot x left parenthesis t right parenthesis equals StartFraction 97.9 dot e Superscript minus j 8 .4 Super Superscript ring Superscript Baseline Over 396.8 minus j 14 .3 EndFraction dot 4 dot e Superscript j 10 Super Superscript 6 Superscript t Baseline equals StartFraction 97.9 dot e Superscript minus j 8 .4 Super Superscript ring Superscript Baseline Over 397.1 dot e Superscript minus j 2.1 Super Superscript ring Superscript Baseline EndFraction dot 4 dot e Superscript j 10 Super Superscript 6 Superscript t Baseline 2nd Row 1st Column Blank 2nd Column equals 0.99 dot e Superscript minus j left parenthesis 10 Super Superscript 6 Superscript t minus 6.3 Super Superscript ring Superscript right parenthesis Baseline equals ModifyingBelow 0.99 times sine left parenthesis 10 Superscript 6 Baseline t minus 6.3 Superscript Super Superscript ring Superscript Baseline right parenthesis upper V With quotation dash EndLayout
StartL ayout 1st Row 1st Colum
n u Sub script upper A Baseline left 
p
arenthesis 
t 
right parenthesis 2nd Column equals StartFraction upper Z Subscript upper A Baseline Over upper Z Subscript upper A Baseline plus 300 EndFraction dot x left parenthesis t right parenthesis equals StartFraction 97.9 dot e Superscript minus j 8 .4 Super Superscript ring Superscript Baseline Over 396.8 minus j 14 .3 EndFraction dot 4 dot e Superscript j 10 Super Superscript 6 Superscript t Baseline equals StartFraction 97.9 dot e Superscript minus j 8 .4 Super Superscript ring Superscript Baseline Over 397.1 dot e Superscript minus j 2.1 Super Superscript ring Superscript Baseline EndFraction dot 4 dot e Superscript j 10 Super Superscript 6 Superscript t Baseline 2nd Row 1st Column Blank 2nd Column equals 0.99 dot e Superscript minus j left parenthesis 10 Super Superscript 6 Superscript t minus 6.3 Super Superscript ring Superscript right parenthesis Baseline equals ModifyingBelow 0.99 times sine left parenthesis 10 Superscript 6 Baseline t minus 6.3 Superscript Super Superscript ring Superscript Baseline right parenthesis upper V With quotation dash EndLayout
We now have a 1% error in the amplitude and 6.3-degree error in the phase.

Chapter 7 
Transform Theory 
Abstract This long and important chapter introduces a mathematical tool called 
transforms. This is probably the most important mathematical operation used in 
electrical measurements. It transforms a signal in time space to frequency space, and 
this is extremely common (and useful) to understand and analyze your measurement 
signal. The focus in this chapter is the understanding of transforms and it starts with 
understanding exactly what is meant by the frequency (and later we must under-
stand why the frequency can be a complex number). Transform theory is by most 
students perceived to be ‘hard’ and the main reason for that is that there appears to 
be so many different transform expressions; depending on the nature of the (time) 
signal, it is necessary to use different mathematical expressions, but they all really 
do the same thing (i.e., transfer a time signal to frequency space). Because there 
are so many different expressions, this chapter tries to organize them for you (see 
Table 7.6). Several different transforms are introduced; the Fourier transform, the 
discrete Fourier transform, the Fast Fourier transform, the Laplace transform, and 
the z transform, but remember they all do the same thing; they take your signal from 
time space to frequency space. The main objective of this chapter is to help the reader 
understand transforms and see how they are related. This chapter also introduces the 
Bode plot and deﬁnes LTI systems (linear and time-invariant system). 
7.1 
Introduction 
You should consider this to be one of the most important chapters in this book. 
‘Transform theory’ is what we use to transfer a signal from ‘time space’ to ‘frequency 
space’. It will become obvious that we can learn so much more about any signal (or 
system) if we leave time space and go to frequency space. Our primary objective here 
is to do a ‘frequency analysis’ and the tool(s) we need to do that is called a ‘transform’. 
There is not just one transform, there are several different ones, depending on the 
signal we are looking at. The signal could be ‘analog’ or it could be ‘digital’. In 
this context, ‘digital’ means ‘sampled’ (the mathematical term is ‘discrete’). We 
will also introduce a few new frequency variables. For example, we will have both
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_7 
123

124
7
Transform Theory
‘non-complex’ and ‘complex’ frequencies. That gives us four transforms already, 
see Table 7.1. 
We will ﬁll the gaps in this table as we learn about the transform tools in this 
chapter. 
But we need to start from the beginning. We should start by properly deﬁning 
exactly what we mean by ‘frequency’. I’m sure you have a clear idea about what a 
signal’s ‘frequency’ is, but our deﬁnition of ‘frequency’ in this context is very strict: 
If a signal has frequency f , it is a  harmonic function (sinusoidal) with period T = 1/ 
f . Hence, the signal in Fig. 7.1 has frequency f , but not the signal in Fig. 7.2. (Well, 
it does have the frequency f , but also at lot of other frequencies, see Example 7.1.) 
Hence, when we say ‘frequency’ we mean the frequency of a harmonic signal. 
We also need to deﬁne the word ‘analysis’, but ﬁrst we will present a fundamental 
theorem. 
Theorem All signals can be expressed as a sum of cosines: 
StartLayou t 1st  Row 1st  Column x l eft pare nthesis t  r i
ght p a
r
en
the sis 2nd Colum
n equals a 0 plus a 1 cosine left parenthesis omega 1 t plus phi 1 right parenthesis plus a 2 cosine left parenthesis omega 2 t plus phi 2 right parenthesis plus ellipsis 2nd Row 1st Column Blank 2nd Column equals a 0 plus sigma summation Underscript k Endscripts a Subscript k Baseline cosine left parenthesis omega Subscript k Baseline t plus phi Subscript k Baseline right parenthesis EndLayout
Table 7.1 The transform 
map
Non-complex frequency
Complex frequency 
Analog 
Sampled 
Fig. 7.1 A signal with frequency f = 1/T 
Fig. 7.2 This signal has frequency f = 1/T and many more (see Example 7.1) 

7.2 The Fourier Transform
125
The domain of k depends on the signal; if x(t) is periodic with period T, then the 
domain of k is all positive integers and omega element of k dot omega 0, where 
ome ga 0 equals StartFraction 2 normal pi Over upper T EndFraction right double arrow omega 0 upper T equals 2 normal pi
om ega 0 equa
ls StartFraction 2 normal pi Over upper T EndFraction right double arrow omega 0 upper T equals 2 normal pi
On the other hand, if x(t) is not periodic, then k can be any number and omega element of double struck upper R
(all real numbers). When x(t) is not periodic, Eq. (7.1) doesn’t make sense. We will 
come back to that later. 
Now we can deﬁne ‘analysis’. In general, ‘analysis’ means ‘decompose into 
constituents’. When we do ‘frequency analysis’ of a signal, we express it as in 
Eq. (7.1), i.e., we write it as a linear combination of cosines (the cosines are the ‘base 
vectors’). If x(t) is periodic, we already know the frequencies (they are k dot omega 0); we 
only need to ﬁnd all the amplitudes ak and phase angles ϕk. The tool we use to ﬁnd 
the amplitudes and the phase angles is called the Fourier transform. 
7.2 
The Fourier Transform 
The Fourier transform takes our signal and produces an expression that is a function 
of the frequency, X(ω) (Fig. 7.3); this is a complex function and the magnitude of 
X(ω) gives us the amplitude of the cosine with frequency ω, and the argument (arg 
X(ω)) of X(ω) gives us the phase angle. 
Depending on the signal, we can identify three different cases that we need to 
treat separately. 
7.2.1 
Case 1: Signal is Periodic 
In the ﬁrst case, the signal is periodic, the period is T and, in that case, only frequencies 
which are a multiple of ω0 can exist in Eq. (7.1). For that reason, we write the Fourier 
transform X(ω) as  X(ω) = X(k·ω0) = X(k), and we deﬁne it as 
upper X  left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis dot e Superscript minus j omega t Baseline d t equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t
up
pe
r
 X
 left parenthesi s k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis dot e Superscript minus j omega t Baseline d t equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t
up
pe
r
 X
 left parenthesis
 k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis dot e Superscript minus j omega t Baseline d t equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t
Example 7.1 Express the square wave in Fig. 7.4 as a sum of cosines.
Fig. 7.3 The Fourier 
transform operator 

126
7
Transform Theory
Fig. 7.4 We will analyze a square signal 
Solution First, we ﬁnd the Fourier transform expression. In Eq. (7.3), we can inte-
grate over any period. Since the signal is symmetric, we choose to integrate over a 
symmetric interval: 
StartLa yout 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 2 Overscript upper T divided by 2 Endscripts x left parenthesis t right parenthesis normal e Superscript minus normal j k omega 0 t Baseline d t equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 4 Overscript upper T divided by 4 Endscripts 1 dot normal e Superscript minus normal j k omega 0 t Baseline d t equals minus StartFraction 1 Over normal j k omega 0 upper T EndFraction left bracket normal e Superscript minus normal j k omega 0 t Baseline right bracket Subscript negative upper T divided by 4 Superscript upper T divided by 4 Baseline 2nd Row equals minus StartFraction 1 Over normal j k Baseline 2 normal pi EndFraction left parenthesis normal e Superscript minus normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline minus normal e Superscript normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction dot StartFraction 1 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j k normal pi divided by 2 Baseline minus normal e Superscript minus normal j k normal pi divided by 2 Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction sine StartFraction k normal pi Over 2 EndFraction EndLayout
St
artLa
y
out 1
st Row upper X le ft parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 2 Overscript upper T divided by 2 Endscripts x left parenthesis t right parenthesis normal e Superscript minus normal j k omega 0 t Baseline d t equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 4 Overscript upper T divided by 4 Endscripts 1 dot normal e Superscript minus normal j k omega 0 t Baseline d t equals minus StartFraction 1 Over normal j k omega 0 upper T EndFraction left bracket normal e Superscript minus normal j k omega 0 t Baseline right bracket Subscript negative upper T divided by 4 Superscript upper T divided by 4 Baseline 2nd Row equals minus StartFraction 1 Over normal j k Baseline 2 normal pi EndFraction left parenthesis normal e Superscript minus normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline minus normal e Superscript normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction dot StartFraction 1 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j k normal pi divided by 2 Baseline minus normal e Superscript minus normal j k normal pi divided by 2 Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction sine StartFraction k normal pi Over 2 EndFraction EndLayout
St
artLa
y
out 1
st  Row upper X l e f t parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 2 Overscript upper T divided by 2 Endscripts x left parenthesis t right parenthesis normal e Superscript minus normal j k omega 0 t Baseline d t equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 4 Overscript upper T divided by 4 Endscripts 1 dot normal e Superscript minus normal j k omega 0 t Baseline d t equals minus StartFraction 1 Over normal j k omega 0 upper T EndFraction left bracket normal e Superscript minus normal j k omega 0 t Baseline right bracket Subscript negative upper T divided by 4 Superscript upper T divided by 4 Baseline 2nd Row equals minus StartFraction 1 Over normal j k Baseline 2 normal pi EndFraction left parenthesis normal e Superscript minus normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline minus normal e Superscript normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction dot StartFraction 1 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j k normal pi divided by 2 Baseline minus normal e Superscript minus normal j k normal pi divided by 2 Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction sine StartFraction k normal pi Over 2 EndFraction EndLayout
Start
L
ayout 1st Ro
w up
e r  X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 2 Overscript upper T divided by 2 Endscripts x left parenthesis t right parenthesis normal e Superscript minus normal j k omega 0 t Baseline d t equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 4 Overscript upper T divided by 4 Endscripts 1 dot normal e Superscript minus normal j k omega 0 t Baseline d t equals minus StartFraction 1 Over normal j k omega 0 upper T EndFraction left bracket normal e Superscript minus normal j k omega 0 t Baseline right bracket Subscript negative upper T divided by 4 Superscript upper T divided by 4 Baseline 2nd Row equals minus StartFraction 1 Over normal j k Baseline 2 normal pi EndFraction left parenthesis normal e Superscript minus normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline minus normal e Superscript normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction dot StartFraction 1 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j k normal pi divided by 2 Baseline minus normal e Superscript minus normal j k normal pi divided by 2 Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction sine StartFraction k normal pi Over 2 EndFraction EndLayout
Star
t
Layout 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 2 Overscript upper T divided by 2 Endscripts x left parenthesis t right parenthesis normal e Superscript minus normal j k omega 0 t Baseline d t equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 4 Overscript upper T divided by 4 Endscripts 1 dot normal e Superscript minus normal j k omega 0 t Baseline d t equals minus StartFraction 1 Over normal j k omega 0 upper T EndFraction left bracket normal e Superscript minus normal j k omega 0 t Baseline right bracket Subscript negative upper T divided by 4 Superscript upper T divided by 4 Baseline 2nd Row equals minus StartFraction 1 Over normal j k Baseline 2 normal pi EndFraction left parenthesis normal e Superscript minus normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline minus normal e Superscript normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction dot StartFraction 1 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j k normal pi divided by 2 Baseline minus normal e Superscript minus normal j k normal pi divided by 2 Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction sine StartFraction k normal pi Over 2 EndFraction EndLayout
St artLayou t 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 2 Overscript upper T divided by 2 Endscripts x left parenthesis t right parenthesis normal e Superscript minus normal j k omega 0 t Baseline d t equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 4 Overscript upper T divided by 4 Endscripts 1 dot normal e Superscript minus normal j k omega 0 t Baseline d t equals minus StartFraction 1 Over normal j k omega 0 upper T EndFraction left bracket normal e Superscript minus normal j k omega 0 t Baseline right bracket Subscript negative upper T divided by 4 Superscript upper T divided by 4 Baseline 2nd Row equals minus StartFraction 1 Over normal j k Baseline 2 normal pi EndFraction left parenthesis normal e Superscript minus normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline minus normal e Superscript normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction dot StartFraction 1 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j k normal pi divided by 2 Baseline minus normal e Superscript minus normal j k normal pi divided by 2 Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction sine StartFraction k normal pi Over 2 EndFraction EndLayout
S
t
ar tLayout 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 2 Overscript upper T divided by 2 Endscripts x left parenthesis t right parenthesis normal e Superscript minus normal j k omega 0 t Baseline d t equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 4 Overscript upper T divided by 4 Endscripts 1 dot normal e Superscript minus normal j k omega 0 t Baseline d t equals minus StartFraction 1 Over normal j k omega 0 upper T EndFraction left bracket normal e Superscript minus normal j k omega 0 t Baseline right bracket Subscript negative upper T divided by 4 Superscript upper T divided by 4 Baseline 2nd Row equals minus StartFraction 1 Over normal j k Baseline 2 normal pi EndFraction left parenthesis normal e Superscript minus normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline minus normal e Superscript normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction dot StartFraction 1 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j k normal pi divided by 2 Baseline minus normal e Superscript minus normal j k normal pi divided by 2 Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction sine StartFraction k normal pi Over 2 EndFraction EndLayout
Start Layout 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 2 Overscript upper T divided by 2 Endscripts x left parenthesis t right parenthesis normal e Superscript minus normal j k omega 0 t Baseline d t equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 4 Overscript upper T divided by 4 Endscripts 1 dot normal e Superscript minus normal j k omega 0 t Baseline d t equals minus StartFraction 1 Over normal j k omega 0 upper T EndFraction left bracket normal e Superscript minus normal j k omega 0 t Baseline right bracket Subscript negative upper T divided by 4 Superscript upper T divided by 4 Baseline 2nd Row equals minus StartFraction 1 Over normal j k Baseline 2 normal pi EndFraction left parenthesis normal e Superscript minus normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline minus normal e Superscript normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction dot StartFraction 1 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j k normal pi divided by 2 Baseline minus normal e Superscript minus normal j k normal pi divided by 2 Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction sine StartFraction k normal pi Over 2 EndFraction EndLayout
St
a
rtLayou t 1st Row 
up per X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 2 Overscript upper T divided by 2 Endscripts x left parenthesis t right parenthesis normal e Superscript minus normal j k omega 0 t Baseline d t equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 4 Overscript upper T divided by 4 Endscripts 1 dot normal e Superscript minus normal j k omega 0 t Baseline d t equals minus StartFraction 1 Over normal j k omega 0 upper T EndFraction left bracket normal e Superscript minus normal j k omega 0 t Baseline right bracket Subscript negative upper T divided by 4 Superscript upper T divided by 4 Baseline 2nd Row equals minus StartFraction 1 Over normal j k Baseline 2 normal pi EndFraction left parenthesis normal e Superscript minus normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline minus normal e Superscript normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction dot StartFraction 1 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j k normal pi divided by 2 Baseline minus normal e Superscript minus normal j k normal pi divided by 2 Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction sine StartFraction k normal pi Over 2 EndFraction EndLayout
StartLa yout 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 2 Overscript upper T divided by 2 Endscripts x left parenthesis t right parenthesis normal e Superscript minus normal j k omega 0 t Baseline d t equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 4 Overscript upper T divided by 4 Endscripts 1 dot normal e Superscript minus normal j k omega 0 t Baseline d t equals minus StartFraction 1 Over normal j k omega 0 upper T EndFraction left bracket normal e Superscript minus normal j k omega 0 t Baseline right bracket Subscript negative upper T divided by 4 Superscript upper T divided by 4 Baseline 2nd Row equals minus StartFraction 1 Over normal j k Baseline 2 normal pi EndFraction left parenthesis normal e Superscript minus normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline minus normal e Superscript normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction dot StartFraction 1 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j k normal pi divided by 2 Baseline minus normal e Superscript minus normal j k normal pi divided by 2 Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction sine StartFraction k normal pi Over 2 EndFraction EndLayout
St
artLayout 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 2 Overscript upper T divided by 2 Endscripts x left parenthesis t right parenthesis normal e Superscript minus normal j k omega 0 t Baseline d t equals StartFraction 1 Over upper T EndFraction integral Underscript negative upper T divided by 4 Overscript upper T divided by 4 Endscripts 1 dot normal e Superscript minus normal j k omega 0 t Baseline d t equals minus StartFraction 1 Over normal j k omega 0 upper T EndFraction left bracket normal e Superscript minus normal j k omega 0 t Baseline right bracket Subscript negative upper T divided by 4 Superscript upper T divided by 4 Baseline 2nd Row equals minus StartFraction 1 Over normal j k Baseline 2 normal pi EndFraction left parenthesis normal e Superscript minus normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline minus normal e Superscript normal j k omega 0 StartFraction upper T Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction dot StartFraction 1 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j k normal pi divided by 2 Baseline minus normal e Superscript minus normal j k normal pi divided by 2 Baseline right parenthesis equals StartFraction 1 Over k normal pi EndFraction sine StartFraction k normal pi Over 2 EndFraction EndLayout
In Eq. (7.4), we can immediately see that X(k) = 0 if  k is an even number (/= 0). 
If k is odd, then sinkπ/2 = ±  1 and X(1) = 1/π, X(3) = −1/3π, X(5) = 1/5π, etc.  
For k = 0, we need to ﬁnd the limit when k → 0. We use l’Hospital’s rule to ﬁnd the 
limit: 
limi
t Un
ders cr ipt k right arrow 0 Endscripts StartStartFraction sine k StartFraction normal pi Over 2 EndFraction OverOver k normal pi EndEndFraction equals limit Underscript k right arrow 0 Endscripts StartStartFraction StartFraction normal pi Over 2 EndFraction cosine k StartFraction normal pi Over 2 EndFraction OverOver normal pi EndEndFraction equals one half
limit Underscript k right arrow 0 Endscripts StartStartFraction sine k StartFraction normal pi Over 2 EndFraction OverOver k normal pi EndEndFraction equals limit Underscript k right arrow 0 Endscripts StartStartFraction StartFraction normal pi Over 2 EndFraction cosine k StartFraction normal pi Over 2 EndFraction OverOver normal pi EndEndFraction equals one half
lim
it Und
ersc
ript k right arrow 0 Endscripts StartStartFraction sine k StartFraction normal pi Over 2 EndFraction OverOver k normal pi EndEndFraction equals limit Underscript k right arrow 0 Endscripts StartStartFraction StartFraction normal pi Over 2 EndFraction cosine k StartFraction normal pi Over 2 EndFraction OverOver normal pi EndEndFraction equals one half
li mit Un derscript k right arrow 0 Endscripts StartStartFraction sine k StartFraction normal pi Over 2 EndFraction OverOver k normal pi EndEndFraction equals limit Underscript k right arrow 0 Endscripts StartStartFraction StartFraction normal pi Over 2 EndFraction cosine k StartFraction normal pi Over 2 EndFraction OverOver normal pi EndEndFraction equals one half
limit Underscript k right arrow 0 Endscripts StartStartFraction sine k StartFraction normal pi Over 2 EndFraction OverOver k normal pi EndEndFraction equals limit Underscript k right arrow 0 Endscripts StartStartFraction StartFraction normal pi Over 2 EndFraction cosine k StartFraction normal pi Over 2 EndFraction OverOver normal pi EndEndFraction equals one half
l
imit Underscript k right arrow 0 Endscripts StartStartFraction sine k StartFraction normal pi Over 2 EndFraction OverOver k normal pi EndEndFraction equals limit Underscript k right arrow 0 Endscripts StartStartFraction StartFraction normal pi Over 2 EndFraction cosine k StartFraction normal pi Over 2 EndFraction OverOver normal pi EndEndFraction equals one half
limit Underscript k right arrow 0 Endscripts StartStartFraction sine k StartFraction normal pi Over 2 EndFraction OverOver k normal pi EndEndFraction equals limit Underscript k right arrow 0 Endscripts StartStartFraction StartFraction normal pi Over 2 EndFraction cosine k StartFraction normal pi Over 2 EndFraction OverOver normal pi EndEndFraction equals one half
Hence, we get the following Fourier transform: 
upper X 
le
ft
 p
arenthesis k right parenthesis equals StartLayout Enlarged left brace 1st Row 1st Column one half 2nd Column if k equals 0 2nd Row 1st Column plus or minus StartFraction 1 Over k normal pi EndFraction 2nd Column if k is odd 3rd Row 1st Column 0 2nd Column if k is even EndLayout
u
ppe r X le
ft parenthesis k right parenthesis equals StartLayout Enlarged left brace 1st Row 1st Column one half 2nd Column if k equals 0 2nd Row 1st Column plus or minus StartFraction 1 Over k normal pi EndFraction 2nd Column if k is odd 3rd Row 1st Column 0 2nd Column if k is even EndLayout
upp er X lef t pa
r
en
t
he sis  k ri
ght parenthesis equals StartLayout Enlarged left brace 1st Row 1st Column one half 2nd Column if k equals 0 2nd Row 1st Column plus or minus StartFraction 1 Over k normal pi EndFraction 2nd Column if k is odd 3rd Row 1st Column 0 2nd Column if k is even EndLayout
Notice in Eq. (7.5) that k is both positive and negative, which suggests negative 
frequencies. But of course, frequencies cannot be negative; the negative k values are 
only a consequence of Euler’s formulas for sine and cosine: 
Sta rtLayout  1st Row a 
Subscript k Baseline cosine left parenthesis omega Subscript k Baseline t plus phi Subscript k Baseline right parenthesis equals a Subscript k Baseline one half left parenthesis e Superscript j left parenthesis omega Super Subscript k Superscript t plus phi Super Subscript k Superscript right parenthesis Baseline plus e Superscript minus j left parenthesis omega Super Subscript k Superscript t plus phi Super Subscript k Superscript right parenthesis Baseline right parenthesis 2nd Row equals ModifyingBelow one half a Subscript k Baseline dot e Superscript j phi Super Subscript k Superscript Baseline With bottom brace Underscript upper X left parenthesis k right parenthesis Endscripts dot e Superscript j omega Super Subscript k Superscript t Baseline plus ModifyingBelow one half a Subscript k Baseline dot e Superscript minus j phi Super Subscript k Superscript Baseline With bottom brace Underscript upper X left parenthesis negative k right parenthesis Endscripts dot e Superscript minus j omega Super Subscript k Superscript t Baseline EndLayout
S
t
artLayout 1st Row a Subscri
pt k Baseline cosine left parenthesis omega Subscript k Baseline t plus phi Subscript k Baseline right parenthesis equals a Subscript k Baseline one half left parenthesis e Superscript j left parenthesis omega Super Subscript k Superscript t plus phi Super Subscript k Superscript right parenthesis Baseline plus e Superscript minus j left parenthesis omega Super Subscript k Superscript t plus phi Super Subscript k Superscript right parenthesis Baseline right parenthesis 2nd Row equals ModifyingBelow one half a Subscript k Baseline dot e Superscript j phi Super Subscript k Superscript Baseline With bottom brace Underscript upper X left parenthesis k right parenthesis Endscripts dot e Superscript j omega Super Subscript k Superscript t Baseline plus ModifyingBelow one half a Subscript k Baseline dot e Superscript minus j phi Super Subscript k Superscript Baseline With bottom brace Underscript upper X left parenthesis negative k right parenthesis Endscripts dot e Superscript minus j omega Super Subscript k Superscript t Baseline EndLayout
Start Layout
 1st Row a Subscript k Baseline cosine left parenthesis omega Subscript k Baseline t plus phi Subscript k Baseline right parenthesis equals a Subscript k Baseline one half left parenthesis e Superscript j left parenthesis omega Super Subscript k Superscript t plus phi Super Subscript k Superscript right parenthesis Baseline plus e Superscript minus j left parenthesis omega Super Subscript k Superscript t plus phi Super Subscript k Superscript right parenthesis Baseline right parenthesis 2nd Row equals ModifyingBelow one half a Subscript k Baseline dot e Superscript j phi Super Subscript k Superscript Baseline With bottom brace Underscript upper X left parenthesis k right parenthesis Endscripts dot e Superscript j omega Super Subscript k Superscript t Baseline plus ModifyingBelow one half a Subscript k Baseline dot e Superscript minus j phi Super Subscript k Superscript Baseline With bottom brace Underscript upper X left parenthesis negative k right parenthesis Endscripts dot e Superscript minus j omega Super Subscript k Superscript t Baseline EndLayout
StartLayout 1st Row a Subscript k Baseline cosine left parenthesis omega Subscript k Baseline t plus phi Subscript k Baseline right parenthesis equals a Subscript k Baseline one half left parenthesis e Superscript j left parenthesis omega Super Subscript k Superscript t plus phi Super Subscript k Superscript right parenthesis Baseline plus e Superscript minus j left parenthesis omega Super Subscript k Superscript t plus phi Super Subscript k Superscript right parenthesis Baseline right parenthesis 2nd Row equals ModifyingBelow one half a Subscript k Baseline dot e Superscript j phi Super Subscript k Superscript Baseline With bottom brace Underscript upper X left parenthesis k right parenthesis Endscripts dot e Superscript j omega Super Subscript k Superscript t Baseline plus ModifyingBelow one half a Subscript k Baseline dot e Superscript minus j phi Super Subscript k Superscript Baseline With bottom brace Underscript upper X left parenthesis negative k right parenthesis Endscripts dot e Superscript minus j omega Super Subscript k Superscript t Baseline EndLayout
S
tartL
ayout 1 st Row a Subscript k Baseline cosine left parenthesis omega Subscript k Baseline t plus phi Subscript k Baseline right parenthesis equals a Subscript k Baseline one half left parenthesis e Superscript j left parenthesis omega Super Subscript k Superscript t plus phi Super Subscript k Superscript right parenthesis Baseline plus e Superscript minus j left parenthesis omega Super Subscript k Superscript t plus phi Super Subscript k Superscript right parenthesis Baseline right parenthesis 2nd Row equals ModifyingBelow one half a Subscript k Baseline dot e Superscript j phi Super Subscript k Superscript Baseline With bottom brace Underscript upper X left parenthesis k right parenthesis Endscripts dot e Superscript j omega Super Subscript k Superscript t Baseline plus ModifyingBelow one half a Subscript k Baseline dot e Superscript minus j phi Super Subscript k Superscript Baseline With bottom brace Underscript upper X left parenthesis negative k right parenthesis Endscripts dot e Superscript minus j omega Super Subscript k Superscript t Baseline EndLayout
Start Layout 
1st Row a Subscript k Baseline cosine left parenthesis omega Subscript k Baseline t plus phi Subscript k Baseline right parenthesis equals a Subscript k Baseline one half left parenthesis e Superscript j left parenthesis omega Super Subscript k Superscript t plus phi Super Subscript k Superscript right parenthesis Baseline plus e Superscript minus j left parenthesis omega Super Subscript k Superscript t plus phi Super Subscript k Superscript right parenthesis Baseline right parenthesis 2nd Row equals ModifyingBelow one half a Subscript k Baseline dot e Superscript j phi Super Subscript k Superscript Baseline With bottom brace Underscript upper X left parenthesis k right parenthesis Endscripts dot e Superscript j omega Super Subscript k Superscript t Baseline plus ModifyingBelow one half a Subscript k Baseline dot e Superscript minus j phi Super Subscript k Superscript Baseline With bottom brace Underscript upper X left parenthesis negative k right parenthesis Endscripts dot e Superscript minus j omega Super Subscript k Superscript t Baseline EndLayout
StartLayout 1st Row a Subscript k Baseline cosine left parenthesis omega Subscript k Baseline t plus phi Subscript k Baseline right parenthesis equals a Subscript k Baseline one half left parenthesis e Superscript j left parenthesis omega Super Subscript k Superscript t plus phi Super Subscript k Superscript right parenthesis Baseline plus e Superscript minus j left parenthesis omega Super Subscript k Superscript t plus phi Super Subscript k Superscript right parenthesis Baseline right parenthesis 2nd Row equals ModifyingBelow one half a Subscript k Baseline dot e Superscript j phi Super Subscript k Superscript Baseline With bottom brace Underscript upper X left parenthesis k right parenthesis Endscripts dot e Superscript j omega Super Subscript k Superscript t Baseline plus ModifyingBelow one half a Subscript k Baseline dot e Superscript minus j phi Super Subscript k Superscript Baseline With bottom brace Underscript upper X left parenthesis negative k right parenthesis Endscripts dot e Superscript minus j omega Super Subscript k Superscript t Baseline EndLayout
S
tartLa
yout 1s
t Row a Subscript k Baseline cosine left parenthesis omega Subscript k Baseline t plus phi Subscript k Baseline right parenthesis equals a Subscript k Baseline one half left parenthesis e Superscript j left parenthesis omega Super Subscript k Superscript t plus phi Super Subscript k Superscript right parenthesis Baseline plus e Superscript minus j left parenthesis omega Super Subscript k Superscript t plus phi Super Subscript k Superscript right parenthesis Baseline right parenthesis 2nd Row equals ModifyingBelow one half a Subscript k Baseline dot e Superscript j phi Super Subscript k Superscript Baseline With bottom brace Underscript upper X left parenthesis k right parenthesis Endscripts dot e Superscript j omega Super Subscript k Superscript t Baseline plus ModifyingBelow one half a Subscript k Baseline dot e Superscript minus j phi Super Subscript k Superscript Baseline With bottom brace Underscript upper X left parenthesis negative k right parenthesis Endscripts dot e Superscript minus j omega Super Subscript k Superscript t Baseline EndLayout

7.2 The Fourier Transform
127
Euler’s formula for cosine assigns half the signal energy to the ‘positive’ frequency 
and the other half to the ‘negative’ frequency. Except for k = 0, of course, where + 0 
and −0 coincide, and all the energy is in k = 0 (k = 0 is the ‘DC’ part of the signal). 
From Eq. (7.6), we can see that 
StartAbsoluteValue upper X left parenthesis k right parenthesis EndAbsoluteValue equals one half a Subscript k Baseline right double arrow a Subscript k Baseline equals 2 dot StartAbsoluteValue upper X left parenthesis k right parenthesis EndAbsoluteValue k not equals 0
Start Absol uteV alue upper  X le
ft parenthesis k right parenthesis EndAbsoluteValue equals one half a Subscript k Baseline right double arrow a Subscript k Baseline equals 2 dot StartAbsoluteValue upper X left parenthesis k right parenthesis EndAbsoluteValue k not equals 0
phi  Subscrip
t k Baseline equals arg upper X left parenthesis k right parenthesis
a 0  equals S
tartAbsoluteValue upper X left parenthesis 0 right parenthesis EndAbsoluteValue
Expression (7.7) is the link between the Fourier transform and the sum of cosines 
in Eq. (7.1). In our example, we get 
Sta rtLayout 1st Row a 0 equals StartAbsoluteValue upper X left parenthesis 0 right parenthesis EndAbsoluteValue equals one half 2nd Row upper X left parenthesis 1 right parenthesis equals StartFraction 1 Over normal pi EndFraction equals StartFraction 1 Over normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 1 equals 2 dot StartFraction 1 Over normal pi EndFraction phi 1 equals 0 3rd Row upper X left parenthesis 3 right parenthesis equals minus StartFraction 1 Over 3 normal pi EndFraction equals StartFraction 1 Over 3 normal pi EndFraction normal e Superscript normal j normal pi Baseline right double arrow a 3 equals 2 dot StartFraction 1 Over 3 normal pi EndFraction phi 3 equals normal pi 4th Row upper X left parenthesis 5 right parenthesis equals StartFraction 1 Over 5 normal pi EndFraction equals StartFraction 1 Over 5 normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 5 equals 2 dot StartFraction 1 Over 5 normal pi EndFraction phi 5 equals 0 EndLayout
St
artLayou t 1st Row a 0 equals StartAbsoluteValue upper X left parenthesis 0 right parenthesis EndAbsoluteValue equals one half 2nd Row upper X left parenthesis 1 right parenthesis equals StartFraction 1 Over normal pi EndFraction equals StartFraction 1 Over normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 1 equals 2 dot StartFraction 1 Over normal pi EndFraction phi 1 equals 0 3rd Row upper X left parenthesis 3 right parenthesis equals minus StartFraction 1 Over 3 normal pi EndFraction equals StartFraction 1 Over 3 normal pi EndFraction normal e Superscript normal j normal pi Baseline right double arrow a 3 equals 2 dot StartFraction 1 Over 3 normal pi EndFraction phi 3 equals normal pi 4th Row upper X left parenthesis 5 right parenthesis equals StartFraction 1 Over 5 normal pi EndFraction equals StartFraction 1 Over 5 normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 5 equals 2 dot StartFraction 1 Over 5 normal pi EndFraction phi 5 equals 0 EndLayout
Star tLayout 1st Row a 0 equals StartAbsoluteValue upper X left parenthesis 0 right parenthesis EndAbsoluteValue equals one half 2nd Row upper X left parenthesis 1 right parenthesis equals StartFraction 1 Over normal pi EndFraction equals StartFraction 1 Over normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 1 equals 2 dot StartFraction 1 Over normal pi EndFraction phi 1 equals 0 3rd Row upper X left parenthesis 3 right parenthesis equals minus StartFraction 1 Over 3 normal pi EndFraction equals StartFraction 1 Over 3 normal pi EndFraction normal e Superscript normal j normal pi Baseline right double arrow a 3 equals 2 dot StartFraction 1 Over 3 normal pi EndFraction phi 3 equals normal pi 4th Row upper X left parenthesis 5 right parenthesis equals StartFraction 1 Over 5 normal pi EndFraction equals StartFraction 1 Over 5 normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 5 equals 2 dot StartFraction 1 Over 5 normal pi EndFraction phi 5 equals 0 EndLayout
StartL ayout  1st  R ow a 0 equals StartAbsoluteValue upper X left parenthesis 0 right parenthesis EndAbsoluteValue equals one half 2nd Row upper X left parenthesis 1 right parenthesis equals StartFraction 1 Over normal pi EndFraction equals StartFraction 1 Over normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 1 equals 2 dot StartFraction 1 Over normal pi EndFraction phi 1 equals 0 3rd Row upper X left parenthesis 3 right parenthesis equals minus StartFraction 1 Over 3 normal pi EndFraction equals StartFraction 1 Over 3 normal pi EndFraction normal e Superscript normal j normal pi Baseline right double arrow a 3 equals 2 dot StartFraction 1 Over 3 normal pi EndFraction phi 3 equals normal pi 4th Row upper X left parenthesis 5 right parenthesis equals StartFraction 1 Over 5 normal pi EndFraction equals StartFraction 1 Over 5 normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 5 equals 2 dot StartFraction 1 Over 5 normal pi EndFraction phi 5 equals 0 EndLayout
St
art Layo
ut 1st R ow a 0 equals StartAbsoluteValue upper X left parenthesis 0 right parenthesis EndAbsoluteValue equals one half 2nd Row upper X left parenthesis 1 right parenthesis equals StartFraction 1 Over normal pi EndFraction equals StartFraction 1 Over normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 1 equals 2 dot StartFraction 1 Over normal pi EndFraction phi 1 equals 0 3rd Row upper X left parenthesis 3 right parenthesis equals minus StartFraction 1 Over 3 normal pi EndFraction equals StartFraction 1 Over 3 normal pi EndFraction normal e Superscript normal j normal pi Baseline right double arrow a 3 equals 2 dot StartFraction 1 Over 3 normal pi EndFraction phi 3 equals normal pi 4th Row upper X left parenthesis 5 right parenthesis equals StartFraction 1 Over 5 normal pi EndFraction equals StartFraction 1 Over 5 normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 5 equals 2 dot StartFraction 1 Over 5 normal pi EndFraction phi 5 equals 0 EndLayout
Start Layout 1st Row a 0 equals StartAbsoluteValue upper X left parenthesis 0 right parenthesis EndAbsoluteValue equals one half 2nd Row upper X left parenthesis 1 right parenthesis equals StartFraction 1 Over normal pi EndFraction equals StartFraction 1 Over normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 1 equals 2 dot StartFraction 1 Over normal pi EndFraction phi 1 equals 0 3rd Row upper X left parenthesis 3 right parenthesis equals minus StartFraction 1 Over 3 normal pi EndFraction equals StartFraction 1 Over 3 normal pi EndFraction normal e Superscript normal j normal pi Baseline right double arrow a 3 equals 2 dot StartFraction 1 Over 3 normal pi EndFraction phi 3 equals normal pi 4th Row upper X left parenthesis 5 right parenthesis equals StartFraction 1 Over 5 normal pi EndFraction equals StartFraction 1 Over 5 normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 5 equals 2 dot StartFraction 1 Over 5 normal pi EndFraction phi 5 equals 0 EndLayout
StartLayout 1st Ro w a 0 equals StartAbsoluteValue upper X left parenthesis 0 right parenthesis EndAbsoluteValue equals one half 2nd Row upper X left parenthesis 1 right parenthesis equals StartFraction 1 Over normal pi EndFraction equals StartFraction 1 Over normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 1 equals 2 dot StartFraction 1 Over normal pi EndFraction phi 1 equals 0 3rd Row upper X left parenthesis 3 right parenthesis equals minus StartFraction 1 Over 3 normal pi EndFraction equals StartFraction 1 Over 3 normal pi EndFraction normal e Superscript normal j normal pi Baseline right double arrow a 3 equals 2 dot StartFraction 1 Over 3 normal pi EndFraction phi 3 equals normal pi 4th Row upper X left parenthesis 5 right parenthesis equals StartFraction 1 Over 5 normal pi EndFraction equals StartFraction 1 Over 5 normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 5 equals 2 dot StartFraction 1 Over 5 normal pi EndFraction phi 5 equals 0 EndLayout
Sta
rtL ayou
t 1st Ro w a 0 equals StartAbsoluteValue upper X left parenthesis 0 right parenthesis EndAbsoluteValue equals one half 2nd Row upper X left parenthesis 1 right parenthesis equals StartFraction 1 Over normal pi EndFraction equals StartFraction 1 Over normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 1 equals 2 dot StartFraction 1 Over normal pi EndFraction phi 1 equals 0 3rd Row upper X left parenthesis 3 right parenthesis equals minus StartFraction 1 Over 3 normal pi EndFraction equals StartFraction 1 Over 3 normal pi EndFraction normal e Superscript normal j normal pi Baseline right double arrow a 3 equals 2 dot StartFraction 1 Over 3 normal pi EndFraction phi 3 equals normal pi 4th Row upper X left parenthesis 5 right parenthesis equals StartFraction 1 Over 5 normal pi EndFraction equals StartFraction 1 Over 5 normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 5 equals 2 dot StartFraction 1 Over 5 normal pi EndFraction phi 5 equals 0 EndLayout
Start Layout 1st Row a 0 equals StartAbsoluteValue upper X left parenthesis 0 right parenthesis EndAbsoluteValue equals one half 2nd Row upper X left parenthesis 1 right parenthesis equals StartFraction 1 Over normal pi EndFraction equals StartFraction 1 Over normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 1 equals 2 dot StartFraction 1 Over normal pi EndFraction phi 1 equals 0 3rd Row upper X left parenthesis 3 right parenthesis equals minus StartFraction 1 Over 3 normal pi EndFraction equals StartFraction 1 Over 3 normal pi EndFraction normal e Superscript normal j normal pi Baseline right double arrow a 3 equals 2 dot StartFraction 1 Over 3 normal pi EndFraction phi 3 equals normal pi 4th Row upper X left parenthesis 5 right parenthesis equals StartFraction 1 Over 5 normal pi EndFraction equals StartFraction 1 Over 5 normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 5 equals 2 dot StartFraction 1 Over 5 normal pi EndFraction phi 5 equals 0 EndLayout
StartLa yout 1st Ro w a 0 equals StartAbsoluteValue upper X left parenthesis 0 right parenthesis EndAbsoluteValue equals one half 2nd Row upper X left parenthesis 1 right parenthesis equals StartFraction 1 Over normal pi EndFraction equals StartFraction 1 Over normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 1 equals 2 dot StartFraction 1 Over normal pi EndFraction phi 1 equals 0 3rd Row upper X left parenthesis 3 right parenthesis equals minus StartFraction 1 Over 3 normal pi EndFraction equals StartFraction 1 Over 3 normal pi EndFraction normal e Superscript normal j normal pi Baseline right double arrow a 3 equals 2 dot StartFraction 1 Over 3 normal pi EndFraction phi 3 equals normal pi 4th Row upper X left parenthesis 5 right parenthesis equals StartFraction 1 Over 5 normal pi EndFraction equals StartFraction 1 Over 5 normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 5 equals 2 dot StartFraction 1 Over 5 normal pi EndFraction phi 5 equals 0 EndLayout
Sta
rtL ayout 1st Row a 0 equals StartAbsoluteValue upper X left parenthesis 0 right parenthesis EndAbsoluteValue equals one half 2nd Row upper X left parenthesis 1 right parenthesis equals StartFraction 1 Over normal pi EndFraction equals StartFraction 1 Over normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 1 equals 2 dot StartFraction 1 Over normal pi EndFraction phi 1 equals 0 3rd Row upper X left parenthesis 3 right parenthesis equals minus StartFraction 1 Over 3 normal pi EndFraction equals StartFraction 1 Over 3 normal pi EndFraction normal e Superscript normal j normal pi Baseline right double arrow a 3 equals 2 dot StartFraction 1 Over 3 normal pi EndFraction phi 3 equals normal pi 4th Row upper X left parenthesis 5 right parenthesis equals StartFraction 1 Over 5 normal pi EndFraction equals StartFraction 1 Over 5 normal pi EndFraction normal e Superscript normal j Baseline 0 Baseline right double arrow a 5 equals 2 dot StartFraction 1 Over 5 normal pi EndFraction phi 5 equals 0 EndLayout
Since cos(α + π) = minuscos(α), we can now use Expression (7.1) to write x(t) as  
x left parenthesis t right parenthesis equals one half plus StartFraction 2 Over normal pi EndFraction left parenthesis cosine omega 0 t minus one third cosine 3 omega 0 t plus one fifth cosine 5 omega 0 t minus ellipsis period period right parenthesis
x left parenthesis t right parenthesis equals one half plus StartFraction 2 Over normal pi EndFraction left parenthesis cosine omega 0 t minus one third cosine 3 omega 0 t plus one fifth cosine 5 omega 0 t minus ellipsis period period right parenthesis
x
 
left  par enthesis t right parenthesis equals one half plus StartFraction 2 Over normal pi EndFraction left parenthesis cosine omega 0 t minus one third cosine 3 omega 0 t plus one fifth cosine 5 omega 0 t minus ellipsis period period right parenthesis
x left  pare nthesis t right parenthesis equals one half plus StartFraction 2 Over normal pi EndFraction left parenthesis cosine omega 0 t minus one third cosine 3 omega 0 t plus one fifth cosine 5 omega 0 t minus ellipsis period period right parenthesis
x left  pare nth e s is
 
t right parenthesis equals one half plus StartFraction 2 Over normal pi EndFraction left parenthesis cosine omega 0 t minus one third cosine 3 omega 0 t plus one fifth cosine 5 omega 0 t minus ellipsis period period right parenthesis
In Fig. 7.5, we have plotted the amplitude spectrum of x(t) and in Fig. 7.6 we have 
plotted the different components and the sum of the ﬁrst four terms in Eq. (7.8) to  
compare it with the original square signal. 
We can learn a few important things from this example. First, notice that we use 
k as the frequency variable. Get used to that! The frequency is a multiple of ω0 and 
it is very important that you get used expressing frequency in terms of k. ω0 = 2π/T
Fig. 7.5 The amplitude spectrum of x(t)

128
7
Transform Theory
Fig. 7.6 The different frequency components of x(t)
or f 0 = 1/T. So, for example, when we say that the frequency is ‘3’, we mean that 
it is 3 × f 0. Here is an alternative way to think of k: We know the period T of the 
signal and k tells us how many periods of a cosine that ﬁts in T, see Fig. 7.7. 
Second, notice that we only plotted the amplitude spectrum in Fig. 7.5; we didn’t 
plot the phase spectrum. We could have done that too, but we didn’t. This is typical; 
in most cases, we only care about the distribution of amplitudes in a signal (see 
Chap. 8 about spectral analysis). 
Let’s return to Eq. (7.3). The Fourier transform expression has a very important 
feature; the amplitude spectrum is symmetric, i.e., 
upper X left parenthesis negative 
k right parenthesis equals upper X Superscript asterisk Baseline left parenthesis k right parenthesis right double arrow StartAbsoluteValue upper X left parenthesis negative k right parenthesis EndAbsoluteValue equals StartAbsoluteValue upper X left parenthesis k right parenthesis EndAbsoluteValue
(In Eq. (7.3), it doesn’t matter if we change sign of k or j.) As we will see later, 
this is a feature that characterizes all Fourier transforms. 
Now we can update our transform map in Table 7.1 with our ﬁrst transform. 
In Table 7.2, we had to split the analog/non-complex frequency cell into two, 
because we are not done with this signal category yet.
Fig. 7.7 
k is our frequency variable 

7.2 The Fourier Transform
129
Table 7.2 The transform 
map
Non-complex frequency
Complex frequency 
Analog 
upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis e Superscript minus j k omega 0 t Baseline d t
up
pe
r
 X
 left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis e Superscript minus j k omega 0 t Baseline d t
Sampled 
7.2.2 
Case 2: Signal is Non-Periodic, But ‘Time-Limited’ 
Another name for a ‘non-periodic, time-limited’ signal is a ‘transient’, see Fig. 7.8. 
A transient is characterized by the fact that its energy is limited. (A periodic signal 
has inﬁnite energy, but limited power.) Since a transient doesn’t have a period T, we  
cannot deﬁne an ω0 and the frequencies of the cosines in Eq. (7.1) cannot be predicted 
with some simple formula. As a matter of fact, when x(t) is a transient, all frequencies 
are allowed and omega element of double struck upper R (all real numbers). That means that Expression (7.1) is no  
longer meaningful, and when we describe a transient, we only present its amplitude 
spectrum (which is now a continuous function). Fourier transform Expression (7.3) 
must be manipulated to allow any frequency: 
upper X 
lef
t
 parenthesis omega
 right parenthesis equals integral Underscript negative normal infinity Overscript plus normal infinity Endscripts x left parenthesis t right parenthesis dot e Superscript minus j omega t Baseline d t
Example 7.2 Plot the magnitude spectrum of the transient in Fig. 7.9. What is the 
signal’s bandwidth?
Solution First we need to ﬁnd the Fourier transform:
Fig. 7.8 A transient 

130
7
Transform Theory
Fig. 7.9 A transient
StartLa
yo
u
t 
1s t Row upper  X  left parenthesis omega right parenthesis equals integral Underscript 0 Overscript 1 Endscripts 1 dot e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction dot left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 1 Baseline equals minus StartFraction 1 Over omega EndFraction dot StartFraction 1 Over j EndFraction left parenthesis e Superscript minus j omega Baseline minus 1 right parenthesis equals 2nd Row equals minus StartFraction 2 Over omega EndFraction dot ModifyingBelow StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega divided by 2 Baseline minus e Superscript j omega divided by 2 Baseline right parenthesis With bottom brace Underscript minus sine omega divided by 2 Endscripts dot e Superscript minus j omega divided by 2 Baseline equals StartFraction 2 Over omega EndFraction dot sine StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline equals sinc StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline 3rd Row right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals StartAbsoluteValue sinc omega divided by 2 EndAbsoluteValue EndLayout
Star
t
Layout 1
st  R ow upper X left parenthesis omega right parenthesis equals integral Underscript 0 Overscript 1 Endscripts 1 dot e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction dot left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 1 Baseline equals minus StartFraction 1 Over omega EndFraction dot StartFraction 1 Over j EndFraction left parenthesis e Superscript minus j omega Baseline minus 1 right parenthesis equals 2nd Row equals minus StartFraction 2 Over omega EndFraction dot ModifyingBelow StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega divided by 2 Baseline minus e Superscript j omega divided by 2 Baseline right parenthesis With bottom brace Underscript minus sine omega divided by 2 Endscripts dot e Superscript minus j omega divided by 2 Baseline equals StartFraction 2 Over omega EndFraction dot sine StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline equals sinc StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline 3rd Row right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals StartAbsoluteValue sinc omega divided by 2 EndAbsoluteValue EndLayout
StartLayout 1st Row upper X left parenthesis omega right parenthesis equals integral Underscript 0 Overscript 1 Endscripts 1 dot e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction dot left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 1 Baseline equals minus StartFraction 1 Over omega EndFraction dot StartFraction 1 Over j EndFraction left parenthesis e Superscript minus j omega Baseline minus 1 right parenthesis equals 2nd Row equals minus StartFraction 2 Over omega EndFraction dot ModifyingBelow StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega divided by 2 Baseline minus e Superscript j omega divided by 2 Baseline right parenthesis With bottom brace Underscript minus sine omega divided by 2 Endscripts dot e Superscript minus j omega divided by 2 Baseline equals StartFraction 2 Over omega EndFraction dot sine StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline equals sinc StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline 3rd Row right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals StartAbsoluteValue sinc omega divided by 2 EndAbsoluteValue EndLayout
S
t
artLayou
t
 1
s t  Row upper X left parenthesis omega right parenthesis equals integral Underscript 0 Overscript 1 Endscripts 1 dot e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction dot left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 1 Baseline equals minus StartFraction 1 Over omega EndFraction dot StartFraction 1 Over j EndFraction left parenthesis e Superscript minus j omega Baseline minus 1 right parenthesis equals 2nd Row equals minus StartFraction 2 Over omega EndFraction dot ModifyingBelow StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega divided by 2 Baseline minus e Superscript j omega divided by 2 Baseline right parenthesis With bottom brace Underscript minus sine omega divided by 2 Endscripts dot e Superscript minus j omega divided by 2 Baseline equals StartFraction 2 Over omega EndFraction dot sine StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline equals sinc StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline 3rd Row right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals StartAbsoluteValue sinc omega divided by 2 EndAbsoluteValue EndLayout
Star tLayout 1st Row upper X left parenthesis omega right parenthesis equals integral Underscript 0 Overscript 1 Endscripts 1 dot e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction dot left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 1 Baseline equals minus StartFraction 1 Over omega EndFraction dot StartFraction 1 Over j EndFraction left parenthesis e Superscript minus j omega Baseline minus 1 right parenthesis equals 2nd Row equals minus StartFraction 2 Over omega EndFraction dot ModifyingBelow StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega divided by 2 Baseline minus e Superscript j omega divided by 2 Baseline right parenthesis With bottom brace Underscript minus sine omega divided by 2 Endscripts dot e Superscript minus j omega divided by 2 Baseline equals StartFraction 2 Over omega EndFraction dot sine StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline equals sinc StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline 3rd Row right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals StartAbsoluteValue sinc omega divided by 2 EndAbsoluteValue EndLayout
St
a
rtLayou t 1st Ro
w upper X left parenthesis omega right parenthesis equals integral Underscript 0 Overscript 1 Endscripts 1 dot e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction dot left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 1 Baseline equals minus StartFraction 1 Over omega EndFraction dot StartFraction 1 Over j EndFraction left parenthesis e Superscript minus j omega Baseline minus 1 right parenthesis equals 2nd Row equals minus StartFraction 2 Over omega EndFraction dot ModifyingBelow StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega divided by 2 Baseline minus e Superscript j omega divided by 2 Baseline right parenthesis With bottom brace Underscript minus sine omega divided by 2 Endscripts dot e Superscript minus j omega divided by 2 Baseline equals StartFraction 2 Over omega EndFraction dot sine StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline equals sinc StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline 3rd Row right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals StartAbsoluteValue sinc omega divided by 2 EndAbsoluteValue EndLayout
StartLayout 1st Row upper X left parenthesis omega right parenthesis equals integral Underscript 0 Overscript 1 Endscripts 1 dot e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction dot left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 1 Baseline equals minus StartFraction 1 Over omega EndFraction dot StartFraction 1 Over j EndFraction left parenthesis e Superscript minus j omega Baseline minus 1 right parenthesis equals 2nd Row equals minus StartFraction 2 Over omega EndFraction dot ModifyingBelow StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega divided by 2 Baseline minus e Superscript j omega divided by 2 Baseline right parenthesis With bottom brace Underscript minus sine omega divided by 2 Endscripts dot e Superscript minus j omega divided by 2 Baseline equals StartFraction 2 Over omega EndFraction dot sine StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline equals sinc StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline 3rd Row right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals StartAbsoluteValue sinc omega divided by 2 EndAbsoluteValue EndLayout
S
tartLa yout
 1st Row  u per X left parenthesis omega right parenthesis equals integral Underscript 0 Overscript 1 Endscripts 1 dot e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction dot left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 1 Baseline equals minus StartFraction 1 Over omega EndFraction dot StartFraction 1 Over j EndFraction left parenthesis e Superscript minus j omega Baseline minus 1 right parenthesis equals 2nd Row equals minus StartFraction 2 Over omega EndFraction dot ModifyingBelow StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega divided by 2 Baseline minus e Superscript j omega divided by 2 Baseline right parenthesis With bottom brace Underscript minus sine omega divided by 2 Endscripts dot e Superscript minus j omega divided by 2 Baseline equals StartFraction 2 Over omega EndFraction dot sine StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline equals sinc StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline 3rd Row right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals StartAbsoluteValue sinc omega divided by 2 EndAbsoluteValue EndLayout
StartLay out 1st Row upper X left parenthesis omega right parenthesis equals integral Underscript 0 Overscript 1 Endscripts 1 dot e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction dot left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 1 Baseline equals minus StartFraction 1 Over omega EndFraction dot StartFraction 1 Over j EndFraction left parenthesis e Superscript minus j omega Baseline minus 1 right parenthesis equals 2nd Row equals minus StartFraction 2 Over omega EndFraction dot ModifyingBelow StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega divided by 2 Baseline minus e Superscript j omega divided by 2 Baseline right parenthesis With bottom brace Underscript minus sine omega divided by 2 Endscripts dot e Superscript minus j omega divided by 2 Baseline equals StartFraction 2 Over omega EndFraction dot sine StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline equals sinc StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline 3rd Row right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals StartAbsoluteValue sinc omega divided by 2 EndAbsoluteValue EndLayout
St artLayout  1st Row upper X left parenthesis omega right parenthesis equals integral Underscript 0 Overscript 1 Endscripts 1 dot e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction dot left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 1 Baseline equals minus StartFraction 1 Over omega EndFraction dot StartFraction 1 Over j EndFraction left parenthesis e Superscript minus j omega Baseline minus 1 right parenthesis equals 2nd Row equals minus StartFraction 2 Over omega EndFraction dot ModifyingBelow StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega divided by 2 Baseline minus e Superscript j omega divided by 2 Baseline right parenthesis With bottom brace Underscript minus sine omega divided by 2 Endscripts dot e Superscript minus j omega divided by 2 Baseline equals StartFraction 2 Over omega EndFraction dot sine StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline equals sinc StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline 3rd Row right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals StartAbsoluteValue sinc omega divided by 2 EndAbsoluteValue EndLayout
St artLayout
 1st Row upper X left 
parenthesis omega right parenthesis equals integral Underscript 0 Overscript 1 Endscripts 1 dot e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction dot left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 1 Baseline equals minus StartFraction 1 Over omega EndFraction dot StartFraction 1 Over j EndFraction left parenthesis e Superscript minus j omega Baseline minus 1 right parenthesis equals 2nd Row equals minus StartFraction 2 Over omega EndFraction dot ModifyingBelow StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega divided by 2 Baseline minus e Superscript j omega divided by 2 Baseline right parenthesis With bottom brace Underscript minus sine omega divided by 2 Endscripts dot e Superscript minus j omega divided by 2 Baseline equals StartFraction 2 Over omega EndFraction dot sine StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline equals sinc StartFraction omega Over 2 EndFraction dot e Superscript minus j omega divided by 2 Baseline 3rd Row right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals StartAbsoluteValue sinc omega divided by 2 EndAbsoluteValue EndLayout
The amplitude spectrum is plotted in Fig. 7.10. 
In Fig. 7.10, we can see that the signal’s bandwidth is inﬁnite, but most of its 
energy is in the interval 0… 2π rad/s. 
Notice in Eq. (7.10) that the Fourier transform for a transient is also symmetric: 
upper X left parenthesis negative 
omega right parenthesis equals upper X Superscript asterisk Baseline left parenthesis omega right parenthesis right double arrow StartAbsoluteValue upper X left parenthesis negative omega right parenthesis EndAbsoluteValue equals StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue
So, if we also plotted the amplitude spectrum in Fig. 7.10 for negative frequencies, 
it would just be a mirror of the positive frequency values. 
Compare the amplitude spectrums in Figs. 7.5 and 7.10; for periodic signals, 
the amplitude spectrum is always a discrete function (only certain frequencies are 
allowed) and for transients the amplitude spectrum is always a continuous function 
(any frequency is allowed).
Fig. 7.10 The amplitude spectrum is now a continuous function 

7.2 The Fourier Transform
131
Table 7.3 The transform map 
Non-complex frequency
Complex frequency 
Analog
Periodic 
upper X  left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis e Superscript minus j k omega 0 t Baseline d t
up
pe
r
 X
 left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis e Superscript minus j k omega 0 t Baseline d t
Transient
upper X
 l
e
ft parenthesis omega right parenthesis equals integral Underscript negative normal infinity Overscript normal infinity Endscripts x left parenthesis t right parenthesis e Superscript minus j omega t Baseline d t
Sampled 
Let’s update our transform map with our new Fourier transform (Table 7.3). 
7.2.3 
Case 3: Signal is Non-Periodic and Inﬁnite 
Figure 7.11 illustrates a non-periodic, inﬁnite signal. 
This signal is a little bit of a headache because we don’t have a transform formula 
for it. It is not periodic, and it is not a transient. It is not even deterministic, i.e., we 
don’t have a closed-form expression for it to put into a formula. So, what do we do? 
If you think about it, this must be what most ‘real-life’ signals look like, and there 
are plenty of situations where we need to know the amplitude spectrum of this kind 
of signals (to ﬁnd the signal bandwidth, for example). 
The answer is that we must sample it. ‘Sampling’ means recording its signal value 
at regular time intervals, see Fig. 7.12.
T S is the sampling time interval, the time between each sample, and the inverse 
is the sampling rate: 
f S ub script upper S Baseline equals StartFraction 1 Over upper T Subscript upper S Baseline EndFraction left bracket normal upper S divided by normal s right bracket
f S
ubscr
ipt upper S Baseline equals StartFraction 1 Over upper T Subscript upper S Baseline EndFraction left bracket normal upper S divided by normal s right bracket
(The unit is ‘Samples per second’.) Sampling is a precarious operation; there is a 
strict rule that you must always follow:
Fig. 7.11 A non-periodic and inﬁnite signal 

132
7
Transform Theory
Fig. 7.12 Sampling a signal
Theorem When you sample a signal with a maximum frequency of f max (= the 
signal bandwidth), the sampling rate must exceed 2·f max: 
f S ubsc ri pt up pe r S B as eline greater than 2 dot f Subscript max Baseline right double arrow f Subscript max Baseline less than StartFraction f Subscript upper S Baseline Over 2 EndFraction
f 
Subscript upper S Baseline greater than 2 dot f Subscript max Baseline right double arrow f Subscript max Baseline less than StartFraction f Subscript upper S Baseline Over 2 EndFraction
This is the sampling theorem, sometimes also called the Nyquist sampling theorem 
(or the Shannon sampling theorem1 ). Notice the use of ‘ > ’ and ‘ < ’ in Eq. (7.14) and 
not ‘ ≥ ’ and ‘ ≤ ’. The sampling rate must be greater than 2·f max. Not  greater than or 
equal! This is important and we will talk a lot more about this later. A consequence 
of the sampling is that the signal becomes discrete: x(t) becomes x(n): 
x left pare nthesis t ri
ght parenthesis right arrow x left parenthesis n dot upper T Subscript upper S Baseline right parenthesis equals x left parenthesis n right parenthesis
x(n) should be interpreted as x(n·T S). Also, we will usually write ‘xn’ instead of x(n) 
(laziness wins). 
Another thing we need to decide is when to stop sampling. The signal is inﬁnite, 
but we can’t just sample forever. Sooner or later, we must stop sampling and do 
something with our samples (like ﬁnding the Fourier transform). Hence, we take 
N samples and then we stop (temporarily) to do some calculations on our samples. 
When we stop sampling, we have observed the signal for a time duration T: 
up per T eq
uals upper N times upper T Subscript upper S
The question is: What do these samples represent and how do we ﬁnd the Fourier 
transform? Well, the answer is that we must adjust one of the Expressions (7.3) 
or (7.10) to discrete time. (We don’t have any other expressions for the Fourier 
transform.) But, which one? Using Expression (7.3) would indicate that we consider 
our N samples to be exactly one period of a periodic signal and using Expression 
(7.10) would suggest that we consider the N samples to be a transient, equal to zero 
outside the observed time T = N·T S. So, whichever expression we use, it will not be
1 Neither Shannon nor Nyquist’discovered’ the sampling theorem; Edmund Whittaker published it 
already in 1915, but Shannon and Nyquist are usually credited for it. Fair or not, that is how it is. 

7.2 The Fourier Transform
133
completely correct, but again, these are all the expressions we have. And, as it turns 
out, it doesn’t matter which one we choose, the result will be the same! However, we 
will arrive at the result a little faster (and a little more elegantly) if we use Expression 
(7.3): We consider our N samples to be exactly one period of a periodic signal with 
period T = N·T S. We denote our samples in Fig. 7.12 as StartSet x 0 comma x  1 comma x 2 comma x 3 comma x 4 comma period period x Subscript upper N negative 1 Baseline EndSet. 
To ﬁnd the Fourier transform of the samples, we adjust Eq. (7.3) for discrete time: t 
→ n·T S. 
upper X  left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis dot e Superscript minus j k omega 0 t Baseline equals d t left brace t right arrow n upper T Subscript upper S Baseline right brace equals StartFraction 1 Over upper N EndFraction sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline dot e Superscript minus j k omega 0 n upper T Super Subscript upper S Superscript
up
pe
r
 X
 left parenthes is k rig ht par e nthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis dot e Superscript minus j k omega 0 t Baseline equals d t left brace t right arrow n upper T Subscript upper S Baseline right brace equals StartFraction 1 Over upper N EndFraction sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline dot e Superscript minus j k omega 0 n upper T Super Subscript upper S Superscript
up
per
 
X le
ft parenthesis 
k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis dot e Superscript minus j k omega 0 t Baseline equals d t left brace t right arrow n upper T Subscript upper S Baseline right brace equals StartFraction 1 Over upper N EndFraction sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline dot e Superscript minus j k omega 0 n upper T Super Subscript upper S Superscript
But, omega  0 upper T Subscript upper S Baseline equals omega 0 upper T divided by upper N equals 2 normal pi divided by upper N, so  
upper X left parenthesis k right parenthesis equals ModifyingBelow StartFraction 1 Over upper N EndFraction With bottom brace Underscript StartLayout 1st Row normal upper D normal r normal o normal p 2nd Row normal i normal t factorial EndLayout Endscripts sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline dot normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction dot n Baseline equals sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline dot normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction dot n Baseline equals DFT
u
pper
 X le
ft p
are
n
thes
is k right  parenthesis equals ModifyingBelow StartFraction 1 Over upper N EndFraction With bottom brace Underscript StartLayout 1st Row normal upper D normal r normal o normal p 2nd Row normal i normal t factorial EndLayout Endscripts sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline dot normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction dot n Baseline equals sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline dot normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction dot n Baseline equals DFT
up per  X
 le
f
t pa
ren thesis k right parenthesis equals ModifyingBelow StartFraction 1 Over upper N EndFraction With bottom brace Underscript StartLayout 1st Row normal upper D normal r normal o normal p 2nd Row normal i normal t factorial EndLayout Endscripts sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline dot normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction dot n Baseline equals sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline dot normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction dot n Baseline equals DFT
up per  X le
ft parenthesis k right parenthesis equals ModifyingBelow StartFraction 1 Over upper N EndFraction With bottom brace Underscript StartLayout 1st Row normal upper D normal r normal o normal p 2nd Row normal i normal t factorial EndLayout Endscripts sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline dot normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction dot n Baseline equals sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline dot normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction dot n Baseline equals DFT
Expression (7.18) is called the Discrete Fourier Transform, or just DFT. Notice 
that we dropped the 1/N factor above; it carries no information (since it only scales 
each X(k) value by the same factor), and we drop it because our samples will of course 
be processed by a computer algorithm with a real-time constraint and multiplying 
by 1/N is just a waste of processor time that doesn’t add any information. (Our X(k) 
samples will be N times ‘too large’, though. We need to keep that in mind when we 
use a computer to ﬁnd the Fourier transform. See Example 7.4.) 
Equation (7.18) requires exactly N (complex) multiplications for each X(k), and 
there will be exactly N X(k)s to calculate (we will explain why there are exactly 
N values later), so the DFT requires N2 complex multiplications. This is a time-
consuming task that puts a limit on the real-time sampling rate. However, analyzing 
Eq. (7.18) in more detail reveals that a lot of the multiplications are identical and/or 
‘symmetrical’. 
When a computer computes the discrete Fourier transform, it takes advantage 
of the symmetries in Eq. (7.18) by using an algorithm known as the Fast Fourier 
transform or the ‘FFT algorithm’. It was ﬁrst presented by Cooley and Tukey in 
1965 [1], and it reduces the number of complex multiplications to only N·log2N. 
Anyway, the details of that algorithm are not important to us (let the computer worry 
about that). In this context, ‘DFT’ and ‘FFT’ mean the same thing and will be used 
interchangeably. 
Before we present any examples of how to use the DFT, we make some obser-
vations. First, the Fourier transform Expression (7.18) is still symmetric (upper X l
eft parenthesis negative k right parenthesis equals upper X Superscript asterisk Baseline left parenthesis k right parenthesis), so we still have symmetric amplitude spectra. However, the DFT expression 
has a new property that we have not seen in our earlier expressions, and this new 
property is all-important! To see this property, we ﬁnd the DFT of X(k + N):

134
7
Transform Theory
Start Layout 
1
st Row uper X left parenthesis k plus upper N right parenthesis equals sigma summation x Subscript n Baseline normal e Superscript minus normal j left parenthesis k plus upper N right parenthesis StartFraction 2 normal pi Over upper N EndFraction dot n Baseline equals sigma summation x Subscript n Baseline normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction n Baseline dot ModifyingBelow normal e Superscript minus normal j Baseline 2 normal pi n Baseline With bottom brace Underscript equals 1 Endscripts equals sigma summation x Subscript n Baseline normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction n Baseline 2nd Row equals upper X left parenthesis k right parenthesis EndLayout
St art L
a
yout 1s t Row upper X left parenthesis k plus upper N right parenthesis equals sigma summation x Subscript n Baseline normal e Superscript minus normal j left parenthesis k plus upper N right parenthesis StartFraction 2 normal pi Over upper N EndFraction dot n Baseline equals sigma summation x Subscript n Baseline normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction n Baseline dot ModifyingBelow normal e Superscript minus normal j Baseline 2 normal pi n Baseline With bottom brace Underscript equals 1 Endscripts equals sigma summation x Subscript n Baseline normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction n Baseline 2nd Row equals upper X left parenthesis k right parenthesis EndLayout
St ar tLayout 
1st Row upper X left parenthesis k plus upper N right parenthesis equals sigma summation x Subscript n Baseline normal e Superscript minus normal j left parenthesis k plus upper N right parenthesis StartFraction 2 normal pi Over upper N EndFraction dot n Baseline equals sigma summation x Subscript n Baseline normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction n Baseline dot ModifyingBelow normal e Superscript minus normal j Baseline 2 normal pi n Baseline With bottom brace Underscript equals 1 Endscripts equals sigma summation x Subscript n Baseline normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction n Baseline 2nd Row equals upper X left parenthesis k right parenthesis EndLayout StartLayout 1st Row upper X left parenthesis k plus upper N right parenthesis equals sigma summation x Subscript n Baseline normal e Superscript minus normal j left parenthesis k plus upper N right parenthesis StartFraction 2 normal pi Over upper N EndFraction dot n Baseline equals sigma summation x Subscript n Baseline normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction n Baseline dot ModifyingBelow normal e Superscript minus normal j Baseline 2 normal pi n Baseline With bottom brace Underscript equals 1 Endscripts equals sigma summation x Subscript n Baseline normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction n Baseline 2nd Row equals upper X left parenthesis k right parenthesis EndLayout S
tar
t
L
ayout 1 st Row upper X left parenthesis k plus upper N right parenthesis equals sigma summation x Subscript n Baseline normal e Superscript minus normal j left parenthesis k plus upper N right parenthesis StartFraction 2 normal pi Over upper N EndFraction dot n Baseline equals sigma summation x Subscript n Baseline normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction n Baseline dot ModifyingBelow normal e Superscript minus normal j Baseline 2 normal pi n Baseline With bottom brace Underscript equals 1 Endscripts equals sigma summation x Subscript n Baseline normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction n Baseline 2nd Row equals upper X left parenthesis k right parenthesis EndLayout
St ar
tLayout 
1st Row upper X left parenthesis k plus upper N right parenthesis equals sigma summation x Subscript n Baseline normal e Superscript minus normal j left parenthesis k plus upper N right parenthesis StartFraction 2 normal pi Over upper N EndFraction dot n Baseline equals sigma summation x Subscript n Baseline normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction n Baseline dot ModifyingBelow normal e Superscript minus normal j Baseline 2 normal pi n Baseline With bottom brace Underscript equals 1 Endscripts equals sigma summation x Subscript n Baseline normal e Superscript minus normal j k StartFraction 2 normal pi Over upper N EndFraction n Baseline 2nd Row equals upper X left parenthesis k right parenthesis EndLayout
We can easily see that Eq. (7.19) holds for any multiple of N: X(k + mN) = X(k), 
which proves that the DFT is periodic. 
If You Take N Samples of X(t), X(k) Becomes Periodic with Period N! 
(Which explains why we only need to calculate exactly N X(k) values.) 
Notice also that we still use k as our frequency variable! If the frequency is ‘3’, it 
still means that the cosine has a frequency such that its period ﬁts three times in T. 
The only difference is that T is now the ‘observation time’ deﬁned in Fig. 7.12. The  
frequency of the ‘fundamental’ is f 0 = 1/T, and all other signal frequencies must 
(still) be a multiple if this frequency: 
f equa ls  k dot f 0 equals k StartFraction 1 Over upper T EndFraction equals k StartFraction 1 Over upper N upper T Subscript upper S Baseline EndFraction equals k StartFraction f Subscript upper S Baseline Over upper N EndFraction equals k dot normal upper Delta f
f equa
ls k dot f 0 equals k StartFraction 1 Over upper T EndFraction equals k StartFraction 1 Over upper N upper T Subscript upper S Baseline EndFraction equals k StartFraction f Subscript upper S Baseline Over upper N EndFraction equals k dot normal upper Delta f
f eq
uals  k dot f 0 equals k StartFraction 1 Over upper T EndFraction equals k StartFraction 1 Over upper N upper T Subscript upper S Baseline EndFraction equals k StartFraction f Subscript upper S Baseline Over upper N EndFraction equals k dot normal upper Delta f
f equa l s 
k dot f 0 equals k StartFraction 1 Over upper T EndFraction equals k StartFraction 1 Over upper N upper T Subscript upper S Baseline EndFraction equals k StartFraction f Subscript upper S Baseline Over upper N EndFraction equals k dot normal upper Delta f
where ∆f = f S/N is the frequency resolution. Notice that the frequency resolution 
is improved if we reduce the sampling rate (or take more samples). The sampling 
rate and the number of samples determine how small frequency differences we can 
resolve in the amplitude spectrum. A high sampling rate gives us a high resolution 
in the time domain, but a low resolution in the frequency domain. 
7.2.4 
FFT Outputs 
If you use an FFT algorithm to compute the DFT, it will output exactly one period 
of X(k); X(0) …. X(N − 1). These samples need to be treated ‘carefully’. First, 
remember the sampling theorem: only frequencies < f S/2 are ‘legit’. Are all N DFT 
samples produced by the FFT algorithm legit? Well, yes and no. First, according 
to Eq. (7.20), the frequencies are k·f S/N. Inserting this into the sampling theorem 
condition gives us 
f equa ls  k dot StartFraction f Subscript upper S Baseline Over upper N EndFraction less than StartFraction f Subscript upper S Baseline Over 2 EndFraction right double arrow k less than StartFraction upper N Over 2 EndFraction
f eq uals k dot StartFraction f Subscript upper S Baseline Over upper N EndFraction less than StartFraction f Subscript upper S Baseline Over 2 EndFraction right double arrow k less than StartFraction upper N Over 2 EndFraction
f equa ls  k dot StartFraction f Subscript upper S Baseline Over upper N EndFraction less than StartFraction f Subscript upper S Baseline Over 2 EndFraction right double arrow k less than StartFraction upper N Over 2 EndFraction
f 
equals k dot StartFraction f Subscript upper S Baseline Over upper N EndFraction less than StartFraction f Subscript upper S Baseline Over 2 EndFraction right double arrow k less than StartFraction upper N Over 2 EndFraction
Hence, you could argue that only the ﬁrst half of the N X(k) samples are ‘legit’; 
the second half has frequencies that violate the sampling theorem. On the other hand, 
we have the symmetric and periodic properties of the DFT. Assume that N/2 ≤ k < 
N – 1, i.e., k represents a frequency that violates the sampling theorem. Then, 
upper
 
X le
ft p are
nthesis k ri
ght p arenth
e
sis 
Modi fyi
ngBelow e
quals  Wit
h bottom brace Underscript StartLayout 1st Row Due to 2nd Row periodicity EndLayout Endscripts upper X left parenthesis k minus upper N right parenthesis ModifyingBelow equals With bottom brace Underscript StartLayout 1st Row Due to 2nd Row symmetry EndLayout Endscripts upper X Superscript asterisk Baseline left parenthesis upper N minus k right parenthesis

7.2 The Fourier Transform
135
Suppose N = 16 and k = 10. Then X(10) = X(−6) = X*(6). Hence, you could 
argue that the second half of the N DFT samples is legit; they are just the ‘negative’ 
half (and will always be the complex conjugates of the ‘positive’ half). Figure 7.13 
illustrates some of these important aspects of the DFT. 
Example 7.3 Figure 7.14 illustrates a sinusoidal function (not sampled). Without 
doing any actual calculations, predict its Fourier transform. 
Solution There is only one cosine in this signal, and it deﬁnes the period T. That 
means that only X(1) and X(−1) are /= 0. Equation (7.7) gives us immediately that 
the magnitudes are 0.5. Since it is a sine, and not a cosine, it has a phase shift of − 
90°: 
upper X left  parenthe s is 1 r ight parenthesis equals 0.5 dot e Superscript minus normal j 90 Super Superscript ring Baseline equals minus 0.5 normal j right double arrow upper X left parenthesis negative 1 right parenthesis equals upper X Superscript asterisk Baseline left parenthesis 1 right parenthesis equals 0.5 normal j
X(k) = 0 for all k /= ±  1. 
Notice how easy it was to ﬁnd the Fourier transform once you understand what it 
represents.
Fig. 7.13 A DFT spectrum when N = 10; notice the periodicity and the symmetry 
Fig. 7.14 A sinusoidal function 

136
7
Transform Theory
Fig. 7.15 Taking eight samples of a sinusoidal signal 
Example 7.4 In Fig. 7.15, we have sampled the signal in Fig. 7.14. What would 
MATLAB (or any other signal processing software) produce if we used the fft 
command on these samples? 
Solution It is important to understand that T is no longer determined by the signal’s 
period; it is determined by the (total) sampling time N·T S as indicated in Fig. 7.15. 
Since our signal’s period ﬁts exactly two times in this time T, only X(2) will be /= 0. 
From the symmetry property, we also know that X(−2) would be = X*(2), but the fft 
algorithm doesn’t produce, X(−2), it only produces X(k) for  k = 0…7. However, the 
periodic property of the DFT implies that X(−2) = X(−2 + 8) = X(6) which indeed 
is a number that the fft algorithm produces. Hence X(6) = X*(2) /= 0, all other DFT 
values will be 0. So, we only need to ﬁnd X(2), everything else is predicted. 
So, what is X(2)? Well, the phase angle is the same as in Example 7.3, so we will  
again get a ‘−j’. The amplitude is also the same, but that does not mean that X(2) = 
−0.5j! The reason is that in the DFT expression in Eq. (7.18), we dropped the 1/N 
factor! Now we must face the consequences of that; our X(k) values will be N times 
too large! So, instead of −0.5j, we will get −0.5j × 8 = −4j (and X(6) = 4j). 
We encourage you to check this by applying the fft command in MATLAB to the 
eight samples [0,1,0,−1,0,1,0,−1]. 
Finally, we should update our transform map, see Table 7.4. Notice in Table 7.4 
that we use the same frequency variable k in two transforms, and that they mean the 
same thing. Almost….! Make sure you understand the subtle difference between the 
k variables in the two transforms.
7.2.5 
Aliasing 
If we don’t comply with the sampling theorem, there will be consequences, which 
we will illustrate in the following two examples. 
Example 7.5 Plot the amplitude spectrum of the signal x(t) = sin2π1000t, if it is  
sampled at a rate of f S = 10 kS/s.

7.2 The Fourier Transform
137
Table 7.4 The transform map 
Non-complex frequency
Complex frequency 
Analog
Periodic 
upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis e Superscript minus j k omega 0 t Baseline d t
up
pe
r
 X
 left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis e Superscript minus j k omega 0 t Baseline d t
Transient
upper X 
le
f
t parenthesis omega right parenthesis equals integral Underscript negative normal infinity Overscript normal infinity Endscripts x left parenthesis t right parenthesis e Superscript minus j omega t Baseline d t
Sampled 
upper X
 lef
t
 par
enthesi s k right parenthesis equals sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline e Superscript minus j k StartFraction 2 normal pi Over upper N EndFraction n
up per X left parenthesis k right parenthesis equals sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline e Superscript minus j k StartFraction 2 normal pi Over upper N EndFraction n
Solution This is easy; there is only one frequency (= 1000 Hz), so we will have a 
spectrum peak at f = 1000 Hz. But, since we are sampling, there will be other peaks 
too, due to the symmetry and periodic properties. First, due to symmetry, we will 
have an equally large peak for f = −1000 Hz, and then these two peaks will repeat 
for every multiple of the sampling frequency, i.e., we will have peaks at (m·10,000 
± 1000) Hz, see Fig. 7.16. 
Due to the symmetry and periodic properties of the DFT, there will be a lot of 
‘peaks’ in the amplitude spectrum (inﬁnitely many), but since we only look in the 
‘allowed’ range 0 … f S/2, that is not a problem; our 1000 Hz signal shows up correctly 
in this region. The other peaks are called ‘aliasing’ peaks and in this example, they 
don’t cause us any trouble, but they will cause you trouble if you don’t comply with 
the sampling theorem. The next example will illustrate that. 
Example 7.6 Plot the amplitude spectrum of the signal x(t) = sin2π9000t, if it is  
sampled at a rate of f S = 10 kS/s. 
Solution Just as easy; ‘real’ peak at 9000 Hz, ‘symmetry’ peak at −9000 Hz and then 
the ‘periodic’ peaks at (m·10,000 ± 9000) Hz. That will give us peaks at frequencies 
…−9000, + 1000, + 11,000, + 21,000 ….. and −1000, 9000, 19,000, 29,000 ….. 
Exactly at the same positions as in the previous example!! (Fig. 7.17).
Fig. 7.16 Amplitude spectrum of a 1000 Hz sinusoidal signal sampled at 10 kS/s 

138
7
Transform Theory
Fig. 7.17 Same amplitude spectrum as in Fig. 7.16 
Fig. 7.18 Aliasing in the time domain; sampling violates the Nyquist theorem 
Since we still only look in the Nyquist interval ( f < f S/2), we will only see the 
1000 Hz peak and draw the erroneous conclusion that we are measuring a sinusoidal 
with frequency 1000 Hz. We have aliasing in our amplitude spectrum, which will 
happen when you don’t comply with the sampling theorem. Figure 7.18 illustrates 
what aliasing looks like in the time domain. 
7.3 
Describing Systems 
So far, we have only used transforms to describe signals, but it is very common to 
also use them to describe systems. In Fig. 7.19, the signal x(t) is the input to a system 
and y(t) is what comes out of the system. The Fourier transform of the input signal 
is X(ω) and the Fourier transform of the output signal is Y(ω). We now deﬁne the 
system’s transfer function H(ω) as the quotient between Y(ω) and X(ω): 
upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue dot e Superscript j phi left parenthesis omega right parenthesis
upper H left parenthesis 
omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue dot e Superscript j phi left parenthesis omega right parenthesis

7.3 Describing Systems
139
Fig. 7.19 Signals and 
systems are described with 
transforms 
H(ω) is in general a complex function where |H(ω)| is the ampliﬁcation diagram 
(or ‘gain’ diagram) and ϕ(ω) is the  phase diagram. The ampliﬁcation diagram tells 
you what happens to the amplitudes of the cosines in x(t) and the phase diagram tells 
you what happens to their phase angles. An example will make this clear. 
Example 7.7 If the signal x left pa renthesis t  right parenthesis equals 4 cosine left parenthesis 20000 t plus 25 Superscript ring Baseline right parenthesisis the input to the system in 
Fig. 7.20, what will the output be? 
Solution First we ﬁnd y(t): 
StartL
ayout 1st Row y left parenthesis t right parenthesis equals StartFraction upper X Subscript upper C Baseline Over upper X Subscript upper C Baseline plus upper R EndFraction dot x left parenthesis t right parenthesis 2nd Row equals StartStartFraction StartFraction 1 Over j omega upper C EndFraction OverOver StartFraction 1 Over j omega upper C EndFraction plus upper R EndEndFraction x left parenthesis t right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction upper X left parenthesis omega right parenthesis 3rd Row right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction equals StartFraction 1 dot e Superscript j dot 0 Baseline Over StartRoot 1 squared plus left parenthesis omega upper R upper C right parenthesis squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript omega upper R upper C divided by 1 Baseline EndFraction 4th Row equals StartFraction 1 Over ModifyingBelow StartRoot 1 plus upper R squared upper C squared omega squared EndRoot With bottom brace Underscript StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue Endscripts EndFraction dot e Superscript minus j ModifyingBelow tangent Super Superscript negative 1 Superscript upper R upper C omega With bottom brace Underscript phi left parenthesis omega right parenthesis Endscripts Baseline EndLayout
Sta rtLa yout 1s
t 
Row y left parenthesis t right parenthesis equals StartFraction upper X Subscript upper C Baseline Over upper X Subscript upper C Baseline plus upper R EndFraction dot x left parenthesis t right parenthesis 2nd Row equals StartStartFraction StartFraction 1 Over j omega upper C EndFraction OverOver StartFraction 1 Over j omega upper C EndFraction plus upper R EndEndFraction x left parenthesis t right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction upper X left parenthesis omega right parenthesis 3rd Row right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction equals StartFraction 1 dot e Superscript j dot 0 Baseline Over StartRoot 1 squared plus left parenthesis omega upper R upper C right parenthesis squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript omega upper R upper C divided by 1 Baseline EndFraction 4th Row equals StartFraction 1 Over ModifyingBelow StartRoot 1 plus upper R squared upper C squared omega squared EndRoot With bottom brace Underscript StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue Endscripts EndFraction dot e Superscript minus j ModifyingBelow tangent Super Superscript negative 1 Superscript upper R upper C omega With bottom brace Underscript phi left parenthesis omega right parenthesis Endscripts Baseline EndLayout
StartLayout 1st Row y left parenthesis t right parenthesis equals StartFraction upper X Subscript upper C Baseline Over upper X Subscript upper C Baseline plus upper R EndFraction dot x left parenthesis t right parenthesis 2nd Row equals StartStartFraction StartFraction 1 Over j omega upper C EndFraction OverOver StartFraction 1 Over j omega upper C EndFraction plus upper R EndEndFraction x left parenthesis t right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction upper X left parenthesis omega right parenthesis 3rd Row right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction equals StartFraction 1 dot e Superscript j dot 0 Baseline Over StartRoot 1 squared plus left parenthesis omega upper R upper C right parenthesis squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript omega upper R upper C divided by 1 Baseline EndFraction 4th Row equals StartFraction 1 Over ModifyingBelow StartRoot 1 plus upper R squared upper C squared omega squared EndRoot With bottom brace Underscript StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue Endscripts EndFraction dot e Superscript minus j ModifyingBelow tangent Super Superscript negative 1 Superscript upper R upper C omega With bottom brace Underscript phi left parenthesis omega right parenthesis Endscripts Baseline EndLayout
StartLayout 1st Row y left parenthesis t right parenthesis equals StartFraction upper X Subscript upper C Baseline Over upper X Subscript upper C Baseline plus upper R EndFraction dot x left parenthesis t right parenthesis 2nd Row equals StartStartFraction StartFraction 1 Over j omega upper C EndFraction OverOver StartFraction 1 Over j omega upper C EndFraction plus upper R EndEndFraction x left parenthesis t right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction upper X left parenthesis omega right parenthesis 3rd Row right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction equals StartFraction 1 dot e Superscript j dot 0 Baseline Over StartRoot 1 squared plus left parenthesis omega upper R upper C right parenthesis squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript omega upper R upper C divided by 1 Baseline EndFraction 4th Row equals StartFraction 1 Over ModifyingBelow StartRoot 1 plus upper R squared upper C squared omega squared EndRoot With bottom brace Underscript StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue Endscripts EndFraction dot e Superscript minus j ModifyingBelow tangent Super Superscript negative 1 Superscript upper R upper C omega With bottom brace Underscript phi left parenthesis omega right parenthesis Endscripts Baseline EndLayout
Star tLay out 1s
t Row y left parenthesis t right parenthesis equals StartFraction upper X Subscript upper C Baseline Over upper X Subscript upper C Baseline plus upper R EndFraction dot x left parenthesis t right parenthesis 2nd Row equals StartStartFraction StartFraction 1 Over j omega upper C EndFraction OverOver StartFraction 1 Over j omega upper C EndFraction plus upper R EndEndFraction x left parenthesis t right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction upper X left parenthesis omega right parenthesis 3rd Row right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction equals StartFraction 1 dot e Superscript j dot 0 Baseline Over StartRoot 1 squared plus left parenthesis omega upper R upper C right parenthesis squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript omega upper R upper C divided by 1 Baseline EndFraction 4th Row equals StartFraction 1 Over ModifyingBelow StartRoot 1 plus upper R squared upper C squared omega squared EndRoot With bottom brace Underscript StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue Endscripts EndFraction dot e Superscript minus j ModifyingBelow tangent Super Superscript negative 1 Superscript upper R upper C omega With bottom brace Underscript phi left parenthesis omega right parenthesis Endscripts Baseline EndLayout
St artLayou t 1st Row y le
ft parenthesis t right parenthesis equals StartFraction upper X Subscript upper C Baseline Over upper X Subscript upper C Baseline plus upper R EndFraction dot x left parenthesis t right parenthesis 2nd Row equals StartStartFraction StartFraction 1 Over j omega upper C EndFraction OverOver StartFraction 1 Over j omega upper C EndFraction plus upper R EndEndFraction x left parenthesis t right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction upper X left parenthesis omega right parenthesis 3rd Row right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction equals StartFraction 1 dot e Superscript j dot 0 Baseline Over StartRoot 1 squared plus left parenthesis omega upper R upper C right parenthesis squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript omega upper R upper C divided by 1 Baseline EndFraction 4th Row equals StartFraction 1 Over ModifyingBelow StartRoot 1 plus upper R squared upper C squared omega squared EndRoot With bottom brace Underscript StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue Endscripts EndFraction dot e Superscript minus j ModifyingBelow tangent Super Superscript negative 1 Superscript upper R upper C omega With bottom brace Underscript phi left parenthesis omega right parenthesis Endscripts Baseline EndLayout
St artLayou t 1st 
Row y left  parenthesis t right parenthesis equals StartFraction upper X Subscript upper C Baseline Over upper X Subscript upper C Baseline plus upper R EndFraction dot x left parenthesis t right parenthesis 2nd Row equals StartStartFraction StartFraction 1 Over j omega upper C EndFraction OverOver StartFraction 1 Over j omega upper C EndFraction plus upper R EndEndFraction x left parenthesis t right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction upper X left parenthesis omega right parenthesis 3rd Row right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction equals StartFraction 1 dot e Superscript j dot 0 Baseline Over StartRoot 1 squared plus left parenthesis omega upper R upper C right parenthesis squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript omega upper R upper C divided by 1 Baseline EndFraction 4th Row equals StartFraction 1 Over ModifyingBelow StartRoot 1 plus upper R squared upper C squared omega squared EndRoot With bottom brace Underscript StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue Endscripts EndFraction dot e Superscript minus j ModifyingBelow tangent Super Superscript negative 1 Superscript upper R upper C omega With bottom brace Underscript phi left parenthesis omega right parenthesis Endscripts Baseline EndLayout
StartLa
yout 1st Row y left parenthesis t right parenthesis equals StartFraction upper X Subscript upper C Baseline Over upper X Subscript upper C Baseline plus upper R EndFraction dot x left parenthesis t right parenthesis 2nd Row equals StartStartFraction StartFraction 1 Over j omega upper C EndFraction OverOver StartFraction 1 Over j omega upper C EndFraction plus upper R EndEndFraction x left parenthesis t right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction upper X left parenthesis omega right parenthesis 3rd Row right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction equals StartFraction 1 dot e Superscript j dot 0 Baseline Over StartRoot 1 squared plus left parenthesis omega upper R upper C right parenthesis squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript omega upper R upper C divided by 1 Baseline EndFraction 4th Row equals StartFraction 1 Over ModifyingBelow StartRoot 1 plus upper R squared upper C squared omega squared EndRoot With bottom brace Underscript StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue Endscripts EndFraction dot e Superscript minus j ModifyingBelow tangent Super Superscript negative 1 Superscript upper R upper C omega With bottom brace Underscript phi left parenthesis omega right parenthesis Endscripts Baseline EndLayout
St artLayou t
 1 st Row y left parenthesis t right parenthesis equals StartFraction upper X Subscript upper C Baseline Over upper X Subscript upper C Baseline plus upper R EndFraction dot x left parenthesis t right parenthesis 2nd Row equals StartStartFraction StartFraction 1 Over j omega upper C EndFraction OverOver StartFraction 1 Over j omega upper C EndFraction plus upper R EndEndFraction x left parenthesis t right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction upper X left parenthesis omega right parenthesis 3rd Row right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction equals StartFraction 1 dot e Superscript j dot 0 Baseline Over StartRoot 1 squared plus left parenthesis omega upper R upper C right parenthesis squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript omega upper R upper C divided by 1 Baseline EndFraction 4th Row equals StartFraction 1 Over ModifyingBelow StartRoot 1 plus upper R squared upper C squared omega squared EndRoot With bottom brace Underscript StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue Endscripts EndFraction dot e Superscript minus j ModifyingBelow tangent Super Superscript negative 1 Superscript upper R upper C omega With bottom brace Underscript phi left parenthesis omega right parenthesis Endscripts Baseline EndLayout
√
Sta rtLayout 1 st R ow y l eft par
e
nthesis t right parenthesis equals StartFraction upper X Subscript upper C Baseline Over upper X Subscript upper C Baseline plus upper R EndFraction dot x left parenthesis t right parenthesis 2nd Row equals StartStartFraction StartFraction 1 Over j omega upper C EndFraction OverOver StartFraction 1 Over j omega upper C EndFraction plus upper R EndEndFraction x left parenthesis t right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction upper X left parenthesis omega right parenthesis 3rd Row right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction equals StartFraction 1 dot e Superscript j dot 0 Baseline Over StartRoot 1 squared plus left parenthesis omega upper R upper C right parenthesis squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript omega upper R upper C divided by 1 Baseline EndFraction 4th Row equals StartFraction 1 Over ModifyingBelow StartRoot 1 plus upper R squared upper C squared omega squared EndRoot With bottom brace Underscript StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue Endscripts EndFraction dot e Superscript minus j ModifyingBelow tangent Super Superscript negative 1 Superscript upper R upper C omega With bottom brace Underscript phi left parenthesis omega right parenthesis Endscripts Baseline EndLayout
√
St artLayou
t 1st Row y left parenthesis t right parenthesis equals StartFraction upper X Subscript upper C Baseline Over upper X Subscript upper C Baseline plus upper R EndFraction dot x left parenthesis t right parenthesis 2nd Row equals StartStartFraction StartFraction 1 Over j omega upper C EndFraction OverOver StartFraction 1 Over j omega upper C EndFraction plus upper R EndEndFraction x left parenthesis t right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction upper X left parenthesis omega right parenthesis 3rd Row right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction equals StartFraction 1 dot e Superscript j dot 0 Baseline Over StartRoot 1 squared plus left parenthesis omega upper R upper C right parenthesis squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript omega upper R upper C divided by 1 Baseline EndFraction 4th Row equals StartFraction 1 Over ModifyingBelow StartRoot 1 plus upper R squared upper C squared omega squared EndRoot With bottom brace Underscript StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue Endscripts EndFraction dot e Superscript minus j ModifyingBelow tangent Super Superscript negative 1 Superscript upper R upper C omega With bottom brace Underscript phi left parenthesis omega right parenthesis Endscripts Baseline EndLayout
StartLayout 1st Row y left parenthesis t right parenthesis equals StartFraction upper X Subscript upper C Baseline Over upper X Subscript upper C Baseline plus upper R EndFraction dot x left parenthesis t right parenthesis 2nd Row equals StartStartFraction StartFraction 1 Over j omega upper C EndFraction OverOver StartFraction 1 Over j omega upper C EndFraction plus upper R EndEndFraction x left parenthesis t right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction upper X left parenthesis omega right parenthesis 3rd Row right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction equals StartFraction 1 dot e Superscript j dot 0 Baseline Over StartRoot 1 squared plus left parenthesis omega upper R upper C right parenthesis squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript omega upper R upper C divided by 1 Baseline EndFraction 4th Row equals StartFraction 1 Over ModifyingBelow StartRoot 1 plus upper R squared upper C squared omega squared EndRoot With bottom brace Underscript StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue Endscripts EndFraction dot e Superscript minus j ModifyingBelow tangent Super Superscript negative 1 Superscript upper R upper C omega With bottom brace Underscript phi left parenthesis omega right parenthesis Endscripts Baseline EndLayout
S
tartLayo
ut 1
st Row y lef
t parenthesis t right parenthesis equals StartFraction upper X Subscript upper C Baseline Over upper X Subscript upper C Baseline plus upper R EndFraction dot x left parenthesis t right parenthesis 2nd Row equals StartStartFraction StartFraction 1 Over j omega upper C EndFraction OverOver StartFraction 1 Over j omega upper C EndFraction plus upper R EndEndFraction x left parenthesis t right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction upper X left parenthesis omega right parenthesis 3rd Row right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction equals StartFraction 1 dot e Superscript j dot 0 Baseline Over StartRoot 1 squared plus left parenthesis omega upper R upper C right parenthesis squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript omega upper R upper C divided by 1 Baseline EndFraction 4th Row equals StartFraction 1 Over ModifyingBelow StartRoot 1 plus upper R squared upper C squared omega squared EndRoot With bottom brace Underscript StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue Endscripts EndFraction dot e Superscript minus j ModifyingBelow tangent Super Superscript negative 1 Superscript upper R upper C omega With bottom brace Underscript phi left parenthesis omega right parenthesis Endscripts Baseline EndLayout
StartLayout 1st Row y left parenthesis t right parenthesis equals StartFraction upper X Subscript upper C Baseline Over upper X Subscript upper C Baseline plus upper R EndFraction dot x left parenthesis t right parenthesis 2nd Row equals StartStartFraction StartFraction 1 Over j omega upper C EndFraction OverOver StartFraction 1 Over j omega upper C EndFraction plus upper R EndEndFraction x left parenthesis t right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction upper X left parenthesis omega right parenthesis 3rd Row right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction equals StartFraction 1 dot e Superscript j dot 0 Baseline Over StartRoot 1 squared plus left parenthesis omega upper R upper C right parenthesis squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript omega upper R upper C divided by 1 Baseline EndFraction 4th Row equals StartFraction 1 Over ModifyingBelow StartRoot 1 plus upper R squared upper C squared omega squared EndRoot With bottom brace Underscript StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue Endscripts EndFraction dot e Superscript minus j ModifyingBelow tangent Super Superscript negative 1 Superscript upper R upper C omega With bottom brace Underscript phi left parenthesis omega right parenthesis Endscripts Baseline EndLayout
S
tartLayout 1st Row y left parenthesis t right parenthesis equals StartFraction upper X Subscript upper C Baseline Over upper X Subscript upper C Baseline plus upper R EndFraction dot x left parenthesis t right parenthesis 2nd Row equals StartStartFraction StartFraction 1 Over j omega upper C EndFraction OverOver StartFraction 1 Over j omega upper C EndFraction plus upper R EndEndFraction x left parenthesis t right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction upper X left parenthesis omega right parenthesis 3rd Row right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction equals StartFraction 1 dot e Superscript j dot 0 Baseline Over StartRoot 1 squared plus left parenthesis omega upper R upper C right parenthesis squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript omega upper R upper C divided by 1 Baseline EndFraction 4th Row equals StartFraction 1 Over ModifyingBelow StartRoot 1 plus upper R squared upper C squared omega squared EndRoot With bottom brace Underscript StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue Endscripts EndFraction dot e Superscript minus j ModifyingBelow tangent Super Superscript negative 1 Superscript upper R upper C omega With bottom brace Underscript phi left parenthesis omega right parenthesis Endscripts Baseline EndLayout
Since StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValueis a ﬁrst-order polynomial in ω, the system in Fig. 7.20 is a ﬁrst-
order system. It is also a lowpass system, since StartAbsoluteValue upper H left parenthesis 0 right parenthesis EndAbsoluteValue equals 1, and StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue right arrow 0, when 
ome ga right arrow normal infinity. In Fig.  7.21, we have plotted the Bode diagram of the system, i.e., StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue
and ϕ(ω) for  R = 1 kΩ and C = 100 nF. From this plot, we can see that a signal with 
frequency 20 krad/s will be attenuated by a factor of 0.45 and the phase angle will 
be shifted by −63 degrees. Hence, the output y(t) in Fig.  7.20 is 
y left paren thes is t right parenthesis equals 0.45 dot 4 cosine left parenthesis 20000 t plus 25 Superscript ring Baseline minus 63 Superscript ring Baseline right parenthesis equals 1.8 cosine left parenthesis 20000 t minus 38 Superscript ring Baseline right parenthesis
Fig. 7.20 A ﬁrst-order 
system 

140
7
Transform Theory
Fig. 7.21 The Bode plot 
Notice in Example 7.7 that we mix radians and degrees in the cosine argument. 
Mathematically this is of course wrong, but it is common practice, simply because 
it is easier to imagine the size of an angle in degrees than in radians. You just have 
to keep that in mind and be careful when you use your calculator. 
Another detail worth pointing out in this example is that the system changed the 
amplitude and the phase of the signal, but it didn’t change the frequency. This is 
what characterizes linear and time-invariant systems (LTI), and we will only treat 
LTI systems in this book. That is the most common restraint in signal processing 
textbooks.2 
The Bode plot in Fig. 7.21 is what characterizes any system; if you know the 
transfer function, you know the Bode plot and then you know everything you need 
to know about the system; with ‘everything’ we mean that you can predict the output 
for any signal input. As a matter of fact, systems are characterized by the StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue
diagram (which we will call the ampliﬁcation diagram or gain diagram) and there 
are, in general, six different types of systems: Lowpass, highpass, bandpass, stop-
band, resonance, and notch systems. Their characteristic ampliﬁcation diagrams are 
illustrated in Fig. 7.22 on the next page.
Most systems are ‘by nature’ lowpass, like ampliﬁers, instruments, and transmis-
sion lines (they are typically also ﬁrst-order systems). In general, to get anything else 
than a ﬁrst-order lowpass system, you need to design a ‘ﬁlter’ (see Chaps. 9 and 10). 
For that reason, we will take a closer look at the ampliﬁcation diagram of a lowpass 
system, see Fig. 7.23.
First, in most diagrams, both axes are logarithmic. Second, the system’s bandwidth 
is deﬁned as the frequency ωB where the ampliﬁcation has decreased by −3 dB
2 Look for textbooks about ‘Non-linear systems’ or ‘Adaptive systems’ if you want to go beyond 
the LTI restriction. 

7.3 Describing Systems
141
Fig. 7.22 Six different types of systems
Fig. 7.23 A lowpass system
(compared to the ampliﬁcation at ω = 0). Third, in the stopband (ω > ωB), the 
ampliﬁcation drops as n·20 dB/decade, where n is the system order. Hence, you can 
ﬁgure out the system order by looking at the stopband roll-off. 
7.3.1 
Distortion-Free Systems 
Consider the signal x lef t pare nt hesis t  rig ht parenthesis equals sine t plus 0.33 sine 3 t. This signal is passed through the 
lowpass system in Fig. 7.24 with the ampliﬁcation diagram in Fig. 7.25. x(t) has 
frequencies 1 and 3 rad/s and according to the ampliﬁcation diagram, neither of the 
amplitudes are affected by the system (since the ampliﬁcation = 1 for both signals.) 
Does that mean that y(t) = x(t)?

142
7
Transform Theory
Fig. 7.24 x(t) is passed through the system H(ω). 
Fig. 7.25 The ampliﬁcation diagram of the system 
The right answer to that question is: We don’t know! To answer that question, we 
also need to know the phase diagram. Figure 7.26 illustrates the phase diagram of 
the system. 
Now we can answer the question: The answer is ‘No, y(t) will not equal x(t)’. 
Here is the reason. 
Figure 7.27 illustrates the signal x(t) and its two components and Fig. 7.28 illus-
trates what happens to the two components and the sum of them (which is y(t)) after 
they have been phase shifted −90° and −120°, respectively. 
Fig. 7.26 The phase diagram 
Fig. 7.27 x(t) and its components.

7.4 Complex Frequencies
143
Fig. 7.28 y(t) and its components. 
Fig. 7.29 y(t) and its components. 
From Fig. 7.28, we can see that even though the amplitudes are not affected, we 
still have distortion because of the phase diagram. So, what is wrong with the phase 
diagram in Fig. 7.26? To have a distortions-free passage, the phase diagram must 
be linear, i.e., ϕ(ω) = k·ω, and we can see immediately that the phase diagram in 
Fig. 7.26 is not linear and distortion is expected. 
For a distortion-free passage of x(t), the phase shift for ω = 3 rad/s must be three 
times higher than the phase shift for ω = 1 rad/s. Figure 7.29 illustrates the system 
output when sin3t is phase shifted −270° (= 3 × (−90°) = 3 × ϕ(1)). 
So, distortion-free systems are characterized by linear phase diagrams; however, 
remember that it only needs to be linear in the passband (ω < ωB); we don’t care 
what happens in the stopband since these signals are attenuated anyway. 
7.4 
Complex Frequencies 
Now that we know something about systems, and how to describe them, we will take 
a new look at our frequency variables. From experience, I know that wrapping your 
head around all the frequency variables in transform theory is the hardest part. So far, 
we have introduced f , ω, and k, but I’m sorry to say, we are only half-way through.

144
7
Transform Theory
The Fourier transform expressions in Eqs. (7.3), (7.10), and (7.18) are really 
scalar products, where x is the vector we ‘analyze’ and e−jωt is the ‘base vector’ 
(base function). Compare with what you learned in linear algebra; to ﬁnd the vector 
component along the x-axis, you take the scalar product of the vector and the x base 
vector: v S u bscript x Baseline equals left angle bracket ModifyingAbove v With quotation dash vertical bar ModifyingAbove e With quotation dash Subscript x Baseline right angle bracket equals left parenthesis v Subscript x Baseline comma v Subscript y Baseline right parenthesis dot left parenthesis 1 comma 0 right parenthesis equals v Subscript xv Subscript x Baseline equals left angle bracket ModifyingAbove v With quotation dash vertical bar ModifyingAbove e With quotation dash Subscript x Baseline right angle bracket equals left parenthesis v Subscript x Baseline comma v Subscript y Baseline right parenthesis dot left parenthesis 1 comma 0 right parenthesis equals v Subscript xv S u
b
scri pt
 
x Baseline equals left angle bracket ModifyingAbove v With quotation dash vertical bar ModifyingAbove e With quotation dash Subscript x Baseline right angle bracket equals left parenthesis v Subscript x Baseline comma v Subscript y Baseline right parenthesis dot left parenthesis 1 comma 0 right parenthesis equals v Subscript x. Well, that is exactly what we do when 
we use the Fourier transform (signals are vectors!). We do it to ﬁnd the size of the 
signal in the different ‘cosine directions’ in Eq. (7.1). 
You could argue against that, saying: ‘But if the cosines are the base vectors, how 
come we don’t have cosines in the Fourier transform expressions?’ Well, we do! We  
have just used Euler’s formula for cosine: 
upper A e Supe rscript  j o meg
a t Baseline equals upper A cosine omega t left parenthesis plus j upper A sine omega t right parenthesis
(And remember that the scalar product between two functions is l eft a n gle b ra
cket f comma g right angle bracket equals integral f dot g Superscript asterisk Baseline d t.) When we substitute cosine for an exponential expression, something else 
happens at the same time: The frequency goes from being a real number (ω) to an  
imaginary number (jω). Is that important? Maybe not, but it becomes important if we 
take it one step further: If the frequency can be an imaginary number, could it also 
be a complex number? The answer is actually ‘Yes’! We know what the imaginary 
part (ω) represents (the signal’s harmonic oscillation frequency), but what would the 
real part of the frequency represent? We will assign the letter s to our new complex 
frequency variable: 
s equals s
igma plus normal j omega
We will later come back to what physical property the real part (σ ) represents. 
First, let’s update our transform expression with our new frequency. We only need 
to adjust Expression (7.10) (it will become clear later why we don’t worry about 
Eq. (7.3)). In Eq. (7.10), we substitute jω for s: 
upper X left parenthes is omega right par ent hesis right arrow 
upper X left parenthesis sigma plus normal j omega right parenthesis equals integral x left parenthesis t right parenthesis e Superscript minus left parenthesis sigma plus normal j omega right parenthesis t Baseline d t equals integral x left parenthesis t right parenthesis normal e Superscript minus s t Baseline d t equals upper X left parenthesis s right parenthesis
X(s) is the  Laplace transform (and notice that the Fourier transform is just a special 
case of the Laplace transform, when σ = 0 and s = jω). 
Now, let’s ﬁrst ﬁgure out what the real part of the new frequency variable 
represents. First, we substitute jω for s in Eq. (7.24): 
upper A e Sup erscript j om ega t Ba seline r
ight 
arrow upper A e Superscript s t Baseline equals upper A e Superscript left parenthesis sigma plus j omega right parenthesis t Baseline equals upper A e Superscript sigma t Baseline dot e Superscript j omega t Baseline equals ModifyingBelow upper A e Superscript sigma t Baseline With bottom brace Underscript Amplitude exclamation mark Endscripts cosine omega tupper A e Superscript j omega t Baseline right arrow upper A e Superscript s t Baseline equals upper A e Superscript left parenthesis sigma plus j omega right parenthesis t Baseline equals upper A e Superscript sigma t Baseline dot e Superscript j omega t Baseline equals ModifyingBelow upper A e Superscript sigma t Baseline With bottom brace Underscript Amplitude exclamation mark Endscripts cosine omega tu
pper A e Su
pers cr
ipt j omega t Baseline right arrow upper A e Superscript s t Baseline equals upper A e Superscript left parenthesis sigma plus j omega right parenthesis t Baseline equals upper A e Superscript sigma t Baseline dot e Superscript j omega t Baseline equals ModifyingBelow upper A e Superscript sigma t Baseline With bottom brace Underscript Amplitude exclamation mark Endscripts cosine omega t
Look at Eq. (7.27). By introducing a real part in the frequency, we can also 
represent harmonic functions with exponentially decaying/increasing amplitudes! 
(With the Fourier transform we can only process harmonic signals with constant 
amplitudes.) From Eq. (7.27), we can also see that if σ > 0, we have a harmonic

7.4 Complex Frequencies
145
signal with exponentially growing amplitude! We never want that!3 It would drive 
our signal output to the power supply limit (and we would suddenly have a non-linear, 
malfunctioning system). Hence, we (almost) always want to make sure that we have 
signals where the real part of the frequency is ≤ 0. 
However, our main concern here is not signals; it is systems. 
7.4.1 
Laplace Representation of Systems 
We previously derived the expression upper H left parenthesis omega right parenthesis equals 1 divided by left parenthesis 1 plus j upper R upper C omega right parenthesisfor the transfer func-
tion of the system in Fig. 7.20. We can, and usually do, express the transfer function 
using the complex frequency s, just substitute jω for s: 
upper H
 left parenthesis s right parenthesis equals StartFraction 1 Over 1 plus upper R upper C s EndFraction
up per H 
left parenthesis s right parenthesis equals StartFraction 1 Over 1 plus upper R upper C s EndFraction
In Chap. 9, we will investigate the details of ﬁlters and how to describe and design 
them, but Eq. (7.28) is a typical ﬁlter equation; in general, a ﬁlter transfer function 
is a quotient between two polynomials of s, and the ﬁlter ‘order’ is determined by 
the highest polynomial order. Right now, we are trying to understand the Laplace 
transform, and to have something to work with we will use the following second-order 
ﬁlter: 
upper H
 left parenthesis s right parenthesis equals StartFraction 4 s Over s squared plus 2 s plus 2 EndFraction
up er H left
 parenthesis s right parenthesis equals StartFraction 4 s Over s squared plus 2 s plus 2 EndFraction
First, let’s ﬁnd the Bode plot to see what kind of ﬁlter we are dealing with. 
Substitute s for jω to get the Fourier transform: 
StartLa
yout 1st Row upper H left parenthesis omega right parenthesis equals StartFraction 4 j omega Over minus omega squared plus 2 j omega plus 2 EndFraction equals StartFraction 4 omega e Superscript j 90 Super Superscript ring Superscript Baseline Over StartRoot left parenthesis 2 minus omega squared right parenthesis squared plus 4 omega squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript 2 omega divided by left parenthesis 2 minus omega squared right parenthesis Baseline EndFraction equals 2nd Row equals StartFraction 4 omega Over StartRoot left parenthesis 2 minus omega squared right parenthesis squared plus 4 omega squared EndRoot EndFraction dot e Superscript j left parenthesis 90 Super Superscript ring Superscript minus tangent Super Superscript negative 1 Superscript 2 omega divided by left parenthesis 2 minus omega squared right parenthesis right parenthesis Baseline equals StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue dot e Superscript j phi left parenthesis omega right parenthesis Baseline EndLayout
Star tLayout 1s t
 Row upper H left parenthesis omega right parenthesis equals StartFraction 4 j omega Over minus omega squared plus 2 j omega plus 2 EndFraction equals StartFraction 4 omega e Superscript j 90 Super Superscript ring Superscript Baseline Over StartRoot left parenthesis 2 minus omega squared right parenthesis squared plus 4 omega squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript 2 omega divided by left parenthesis 2 minus omega squared right parenthesis Baseline EndFraction equals 2nd Row equals StartFraction 4 omega Over StartRoot left parenthesis 2 minus omega squared right parenthesis squared plus 4 omega squared EndRoot EndFraction dot e Superscript j left parenthesis 90 Super Superscript ring Superscript minus tangent Super Superscript negative 1 Superscript 2 omega divided by left parenthesis 2 minus omega squared right parenthesis right parenthesis Baseline equals StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue dot e Superscript j phi left parenthesis omega right parenthesis Baseline EndLayout
/S
ta rtLayou t 1st Row upper H left pare
nt
h
esis omega right parenthesis equals StartFraction 4 j omega Over minus omega squared plus 2 j omega plus 2 EndFraction equals StartFraction 4 omega e Superscript j 90 Super Superscript ring Superscript Baseline Over StartRoot left parenthesis 2 minus omega squared right parenthesis squared plus 4 omega squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript 2 omega divided by left parenthesis 2 minus omega squared right parenthesis Baseline EndFraction equals 2nd Row equals StartFraction 4 omega Over StartRoot left parenthesis 2 minus omega squared right parenthesis squared plus 4 omega squared EndRoot EndFraction dot e Superscript j left parenthesis 90 Super Superscript ring Superscript minus tangent Super Superscript negative 1 Superscript 2 omega divided by left parenthesis 2 minus omega squared right parenthesis right parenthesis Baseline equals StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue dot e Superscript j phi left parenthesis omega right parenthesis Baseline EndLayout
/S
ta rtLayou t 1st 
Row upper H lef t parenthesis omega right paren
thesis equals StartFraction 4 j omega Over minus omega squared plus 2 j omega plus 2 EndFraction equals StartFraction 4 omega e Superscript j 90 Super Superscript ring Superscript Baseline Over StartRoot left parenthesis 2 minus omega squared right parenthesis squared plus 4 omega squared EndRoot dot e Superscript j tangent Super Superscript negative 1 Superscript 2 omega divided by left parenthesis 2 minus omega squared right parenthesis Baseline EndFraction equals 2nd Row equals StartFraction 4 omega Over StartRoot left parenthesis 2 minus omega squared right parenthesis squared plus 4 omega squared EndRoot EndFraction dot e Superscript j left parenthesis 90 Super Superscript ring Superscript minus tangent Super Superscript negative 1 Superscript 2 omega divided by left parenthesis 2 minus omega squared right parenthesis right parenthesis Baseline equals StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue dot e Superscript j phi left parenthesis omega right parenthesis Baseline EndLayout
Figure 7.30 illustrates the Bode diagram of this system. From Fig. 7.30, we can 
see that we are dealing with a bandpass system with a peak ampliﬁcation around 
1 rad/s. Also, the discontinuity in the phase diagram is a not real; it is because the 
MATLAB arctan function returns values in the range −π/2 … π/2 only.
Speaking of MATLAB, there is a faster way to get the Bode plot of a given 
system. If we deﬁne the numerator and denominator as b = [4,0] and a = [1,2,2],
3 Unless you are designing an oscillator. 

146
7
Transform Theory
Fig. 7.30 The Bode plot
the freqs(b,a) command will immediately plot the Bode diagram (with logarithmic 
axes and no arctan folding), see Fig. 7.31. 
Next, we substitute s for σ + jω, in Eq.  (7.29): 
upper H l
eft parenthesis sigma comma omega right parenthesis equals StartFraction 4 left parenthesis sigma plus j omega right parenthesis Over left parenthesis sigma plus j omega right parenthesis squared plus 2 left parenthesis sigma plus j omega right parenthesis plus 2 EndFraction
upper H le ft parenthesis s
igma comma omega right parenthesis equals StartFraction 4 left parenthesis sigma plus j omega right parenthesis Over left parenthesis sigma plus j omega right parenthesis squared plus 2 left parenthesis sigma plus j omega right parenthesis plus 2 EndFraction
Let’s look at the magnitude function of this expression. 
StartAbsolu
teValue upper H left parenthesis sigma comma omega right parenthesis EndAbsoluteValue equals StartFraction 4 StartRoot sigma squared plus omega squared EndRoot Over StartRoot left parenthesis sigma squared minus omega squared plus 2 sigma plus 2 right parenthesis squared plus 4 omega squared left parenthesis sigma plus 1 right parenthesis squared EndRoot EndFraction
√
Star tAbsoluteValue upper H left parenthesis sigma comma omega right parenthesis EndAbsoluteValue equals StartFraction 4 StartRoot sigma squared plus omega squared EndRoot Over StartRoot left parenthesis sigma squared minus omega squared plus 2 sigma plus 2 right parenthesis squared plus 4 omega squared left parenthesis sigma plus 1 right parenthesis squared EndRoot EndFraction
/S
tart Absol uteValue
 up per H left par
enthesis sigma comma omega right parenthesis EndAbsoluteValue equals StartFraction 4 StartRoot sigma squared plus omega squared EndRoot Over StartRoot left parenthesis sigma squared minus omega squared plus 2 sigma plus 2 right parenthesis squared plus 4 omega squared left parenthesis sigma plus 1 right parenthesis squared EndRoot EndFraction
Since this is a function of two variables, the ampliﬁcation diagram of a system 
represented by the Laplace transform will be a 3D graph, see Fig. 7.32. In Fig.  7.32,
Fig. 7.31 Using the freqs command in MATLAB 

7.4 Complex Frequencies
147
Fig. 7.32 The ampliﬁcation diagram of the system in Eq. (7.29) is a 3D graph 
‘Real’ is the σ-axis and ‘Imag’ is the jω-axis. Notice most of all in Fig. 7.32 that we 
have ‘cut’ the graph along σ = 0; the edge line in the cut corresponds to the Fourier 
transform’s ampliﬁcation diagram. Compare the edge line with the top diagram in 
Fig. 7.30. 
We will comment more on this 3D graph in a minute, but ﬁrst we must introduce 
the concept of a system’s ‘poles’ and ‘zeros’. 
The roots of the numerator are the ‘zeros’ and the roots of the denominator are 
the ‘poles’. Our system in Eq. (7.29) has one zero only; s = 0. The poles are 
s s quare d pl us 2 s plu s 2 equa ls s square d pl us 2  s p l us 1 p
lus 1 equals left parenthesis s plus 1 right parenthesis squared plus 1 equals 0 right double arrow s equals negative 1 plus or minus normal j
In Fig. 7.33, we have marked the poles (‘X’) and zeros (‘O’) in the s plane 
(using the pzplot command in MATLAB). Compare Figs. 7.32 and 7.33; the poles 
in Fig. 7.33 coincide with the ‘poles’ in Fig. 7.32 and the zero in Fig. 7.33 coincides 
with the (0,0)-coordinate where the ampliﬁcation diagram touches the zero plane. 
Now we understand the names ‘poles’ and ‘zeros’. When you get used to this kind 
of representation of systems, you will be able to immediately identify the pole-zero 
diagram in Fig. 7.33 as a bandpass system.
So far, we have presented three different ways to represent a system: the transfer 
function, the Bode plot, and the pole-zero diagram. They all say the same thing and it 
is important that you learn to transfer smoothly between the different representations. 
In Chap. 9, we will introduce a few more ways to represent systems, but this is all 
we need for now.

148
7
Transform Theory
Fig. 7.33 Poles and zeros in 
the s plane
Hopefully, you can also see the beneﬁt of introducing the complex frequency 
variable s; it provides so much more information about the system than when we 
only use the ‘one-dimensional’ frequency variable jω. 
It is time to update our transform map, see Table 7.5. 
From Table 7.5, it is obvious where we must go next; we have a void in our 
transform map. We need to introduce a complex frequency variable for the sampled 
case and ﬁnd a discrete-time correspondence to the Laplace transform. 
But before we do that, we should look at one more aspect of systems and their 
pole-zero diagram. We do that in the following example. 
Example 7.8 A system’s  impulse response h(t) is the system’s output when the input 
is an impulse, see Fig. 7.34. By ‘impulse’ we mean a Dirac impulse: 
delta l
ef
t 
pa
r en th esis
 t
 
right pare nthe
sis equals StartLayout Enlarged left brace 1st Row 0 if t not equals 0 2nd Row integral Underscript negative normal infinity Overscript normal infinity Endscripts delta left parenthesis t right parenthesis d t equals 1 EndLayout
Table 7.5 The transform map 
Non-complex frequency
Complex frequency 
Analog
Periodic 
upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis e Superscript minus j k omega 0 t Baseline d t
up
pe
r
 X
 left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis e Superscript minus j k omega 0 t Baseline d t
upper X 
le
f
t 
parenthesis s right parenthesis equals integral Underscript 0 Overscript normal infinity Endscripts x left parenthesis t right parenthesis e Superscript minus s t Baseline d t
Transient
upper X 
le
f
t parenthesis omega right parenthesis equals integral Underscript negative normal infinity Overscript normal infinity Endscripts x left parenthesis t right parenthesis e Superscript minus j omega t Baseline d t
Sampled 
upper X 
left
 
pare
nthesis  k right parenthesis equals sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline e Superscript minus j k StartFraction 2 normal pi Over upper N EndFraction n
up per X left parenthesis k right parenthesis equals sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline e Superscript minus j k StartFraction 2 normal pi Over upper N EndFraction n

7.4 Complex Frequencies
149
Fig. 7.34 The impulse response 
The impulse response is a very important characteristic of a system; the Laplace 
transform of the impulse response is the transfer function: 
upper H 
le
f
t 
parenthesis s right pa renthe
sis equals integral Underscript 0 Overscript normal infinity Endscripts h left parenthesis t right parenthesis e Superscript minus s t Baseline d t right double arrow h left parenthesis t right parenthesis equals upper H Superscript negative 1 Baseline left parenthesis s right parenthesis
Suppose that the impulse response for some system is h(t) = e−at. What is the 
domain of a that guarantees a stable system? What does that imply for the system’s 
poles? 
Solution Obviously, we must have a > 0 to have a stable system; if a ≤ 0, just a short 
impulse input would generate an output that would never ‘die’. A ‘healthy’ system 
is characterized by ‘limited input’ must generate a ‘limited output’. To see what that 
implies for the system’s poles, we need to ﬁnd the poles. And to ﬁnd the poles we 
need the transfer function: 
StartLay
ou
t
 1
st Row upper  H
 l
e
ft
 parenthesis s 
ri
g
ht
 parenthesis  e q uals integral Underscript 0 Overscript normal infinity Endscripts h left parenthesis t right parenthesis e Superscript minus s t Baseline d t equals integral Underscript 0 Overscript normal infinity Endscripts e Superscript minus a t Baseline e Superscript minus s t Baseline d t equals integral Underscript 0 Overscript normal infinity Endscripts e Superscript minus left parenthesis a plus s right parenthesis t Baseline d t equals minus StartFraction 1 Over a plus s EndFraction left bracket e Superscript minus left parenthesis a plus s right parenthesis t Baseline right bracket Subscript 0 Superscript normal infinity Baseline 2nd Row equals minus StartFraction 1 Over a plus s EndFraction left parenthesis 0 minus 1 right parenthesis equals StartFraction 1 Over s plus a EndFraction EndLayout
St art
L
ayout 1st R
ow
 u p per H left parenthesis s right parenthesis equals integral Underscript 0 Overscript normal infinity Endscripts h left parenthesis t right parenthesis e Superscript minus s t Baseline d t equals integral Underscript 0 Overscript normal infinity Endscripts e Superscript minus a t Baseline e Superscript minus s t Baseline d t equals integral Underscript 0 Overscript normal infinity Endscripts e Superscript minus left parenthesis a plus s right parenthesis t Baseline d t equals minus StartFraction 1 Over a plus s EndFraction left bracket e Superscript minus left parenthesis a plus s right parenthesis t Baseline right bracket Subscript 0 Superscript normal infinity Baseline 2nd Row equals minus StartFraction 1 Over a plus s EndFraction left parenthesis 0 minus 1 right parenthesis equals StartFraction 1 Over s plus a EndFraction EndLayout
St artL ayo ut 1st
 Row upper H left parenthesis s right parenthesis equals integral Underscript 0 Overscript normal infinity Endscripts h left parenthesis t right parenthesis e Superscript minus s t Baseline d t equals integral Underscript 0 Overscript normal infinity Endscripts e Superscript minus a t Baseline e Superscript minus s t Baseline d t equals integral Underscript 0 Overscript normal infinity Endscripts e Superscript minus left parenthesis a plus s right parenthesis t Baseline d t equals minus StartFraction 1 Over a plus s EndFraction left bracket e Superscript minus left parenthesis a plus s right parenthesis t Baseline right bracket Subscript 0 Superscript normal infinity Baseline 2nd Row equals minus StartFraction 1 Over a plus s EndFraction left parenthesis 0 minus 1 right parenthesis equals StartFraction 1 Over s plus a EndFraction EndLayout
St artL
ayout 1st Row upper H left parenthesis s right parenthesis equals integral Underscript 0 Overscript normal infinity Endscripts h left parenthesis t right parenthesis e Superscript minus s t Baseline d t equals integral Underscript 0 Overscript normal infinity Endscripts e Superscript minus a t Baseline e Superscript minus s t Baseline d t equals integral Underscript 0 Overscript normal infinity Endscripts e Superscript minus left parenthesis a plus s right parenthesis t Baseline d t equals minus StartFraction 1 Over a plus s EndFraction left bracket e Superscript minus left parenthesis a plus s right parenthesis t Baseline right bracket Subscript 0 Superscript normal infinity Baseline 2nd Row equals minus StartFraction 1 Over a plus s EndFraction left parenthesis 0 minus 1 right parenthesis equals StartFraction 1 Over s plus a EndFraction EndLayout
The system has no zeros, just one pole in sp = −a. Since we already restricted a 
to be > 0, obviously this pole can only be in the ‘negative’ half of the s plane (the 
left half), see Fig. 7.35.
The conclusion in the previous example is true in general; a system’s poles must 
be in the left half of the s plane to be stable. (There is no such restriction for the 
zeros.) 
7.4.2 
The z Transform 
The objective here is to ﬁnd the Laplace transform correspondence in discrete-time 
space (for a sampled signal). Before we do that, let’s talk about what properties we 
would expect to ﬁnd in such a transform.

150
7
Transform Theory
Fig. 7.35 Poles must be in 
the left half of the s plane
In the Laplace transform, we ﬁnd the Fourier transform by setting σ = 0, i.e., the 
Fourier transform is along the jω-axis in the s plane. We already know that that can’t 
be true for the discrete-time ‘Laplace transform’, since we have already concluded 
that the discrete Fourier transform of a sampled signal is periodic! Then it can’t be 
on a straight line, because that would require an inﬁnite number of poles and zeros. 
The only thing that would account for the periodicity of the discrete-time Fourier 
transform is if the Fourier transform is on a circle! When we transfer from the s plane 
to the corresponding space for sampled signals, we must make sure that the jω-axis is 
transferred to a circle. How do we do that? That’s easy. We use the following transfer 
trick: 
z equals 
e Superscript s upper T Super Subscript upper S
(T S is the sampling interval time.) We call the new space the ‘z space’ and the 
‘Laplace transform’ for sampled signals is called the z transform. Let’s take a closer 
look at Eq. (7.37): 
z equals e Superscript  s upper  T Super  Subscript 
upper S Baseline equals e Superscript left parenthesis sigma plus j omega right parenthesis upper T Super Subscript upper S Baseline equals e Superscript sigma upper T Super Subscript upper S Baseline dot e Superscript j omega upper T Super Subscript upper S Superscript Baseline equals StartAbsoluteValue z EndAbsoluteValue dot e Superscript j normal upper Omega
where 
StartAbsolut
eValue z EndAbsoluteValue equals e Superscript sigma upper T Super Subscript upper S
n ormal
 upper Omega equals omega upper T Subscript upper S
z is illustrated in Fig. 7.36: e Superscript sigma upper T Super Subscript upper S is the ‘length’ of z and ωT S is the ‘angle’.
To ﬁnd the Fourier transform in this new space, we set σ = 0, and from Eq. (7.39a) 
we conclude that the Fourier transform is on the unit circle in z space (StartAbsoluteValue z EndAbsoluteValue equals 1). This

7.4 Complex Frequencies
151
Fig. 7.36 The z frequency
will make it periodic with period Ω = 2π. That corresponds to a period in frequency 
equal to f S:
n ormal upper Omega equals omega upper T Subscript upper S Baseline equals omega StartFraction 2 normal pi Over omega Subscript upper S Baseline EndFraction equals 2 normal pi StartFraction omega Over omega Subscript upper S Baseline EndFraction equals 2 normal pi StartFraction f Over f Subscript upper S Baseline EndFraction
nor
mal upper Omega equals omega upper T Subscript upper S Baseline equals omega StartFraction 2 normal pi Over omega Subscript upper S Baseline EndFraction equals 2 normal pi StartFraction omega Over omega Subscript upper S Baseline EndFraction equals 2 normal pi StartFraction f Over f Subscript upper S Baseline EndFraction
nor
mal u pper Omega equals omega upper T Subscript upper S Baseline equals omega StartFraction 2 normal pi Over omega Subscript upper S Baseline EndFraction equals 2 normal pi StartFraction omega Over omega Subscript upper S Baseline EndFraction equals 2 normal pi StartFraction f Over f Subscript upper S Baseline EndFraction
nor
mal upper Omega equals omega upper T Subscript upper S Baseline equals omega StartFraction 2 normal pi Over omega Subscript upper S Baseline EndFraction equals 2 normal pi StartFraction omega Over omega Subscript upper S Baseline EndFraction equals 2 normal pi StartFraction f Over f Subscript upper S Baseline EndFraction
(Ω is the ‘normalized’ frequency.) Hence, the z frequency variable reﬂects the 
periodicity of the Fourier transform in sampled signals. Let’s ﬁnd the transforms 
that correspond to the Laplace and Fourier transforms for sampled signals. First, we 
discretize the time in the Laplace transform, and then we substitute e Superscript s upper T Super Subscript upper S for z: 
StartLa
yo
u
t 
1st Row uppe r X l eft paren
t
h
esis
 s right pa
r
e
nthe
si
s
 equals 
in
t
e
gral
 Under script 
0 Overscript normal infinity Endscripts x left parenthesis t right parenthesis e Superscript minus s t Baseline d t equals left brace t right arrow n upper T Subscript s Baseline right brace equals sigma summation Underscript n equals 0 Overscript normal infinity Endscripts x Subscript n Baseline e Superscript minus s n upper T Super Subscript upper S Superscript Baseline equals sigma summation Underscript n equals 0 Overscript normal infinity Endscripts x Subscript n Baseline left parenthesis e Superscript s upper T Super Subscript upper S Superscript Baseline right parenthesis Superscript negative n Baseline 2nd Row equals sigma summation Underscript n equals 0 Overscript normal infinity Endscripts x Subscript n Baseline z Superscript negative n Baseline equals upper X left parenthesis z right parenthesis EndLayout
This is the z transform and corresponds to the Laplace transform in continuous 
time. We will take a closer look at it in a minute, but let’s ﬁrst also derive the Fourier 
transform. Setting σ = 0 and substituting s for jω in Eq. (7.41) give us:  
s
i
gma 
summation Un
d
e
rscr
ipt n eq uals 0 
Overscript normal infinity Endscripts x Subscript n Baseline e Superscript minus j omega n upper T Super Subscript upper S Superscript Baseline equals sigma summation Underscript n equals 0 Overscript normal infinity Endscripts x Subscript n Baseline e Superscript minus j normal upper Omega n Baseline equals upper X left parenthesis normal upper Omega right parenthesis
Equation (7.42) is the Fourier transform for discrete-time signals. (Not to be 
confused with the discrete Fourier transform, the DFT! We’ll talk more about that 
later.) We have requested that it should be periodic with period Ω = 2π. Let’s check 
that:

152
7
Transform Theory
uppe r X lef
t
 parenthesis n
o
rmal up er Omega
 plus 2 normal pi right parenthesis equals sigma summation x Subscript n Baseline normal e Superscript minus normal j left parenthesis normal upper Omega plus 2 normal pi right parenthesis n Baseline equals sigma summation x Subscript n Baseline normal e Superscript minus normal j normal upper Omega n Baseline dot ModifyingBelow normal e Superscript minus normal j Baseline 2 normal pi n Baseline With bottom brace Underscript equals 1 Endscripts equals sigma summation x Subscript n Baseline normal e Superscript minus normal j normal upper Omega n Baseline equals upper X left parenthesis normal upper Omega right parenthesis upper X left parenthesis normal upper Omega plus 2 normal pi right parenthesis equals sigma summation x Subscript n Baseline normal e Superscript minus normal j left parenthesis normal upper Omega plus 2 normal pi right parenthesis n Baseline equals sigma summation x Subscript n Baseline normal e Superscript minus normal j normal upper Omega n Baseline dot ModifyingBelow normal e Superscript minus normal j Baseline 2 normal pi n Baseline With bottom brace Underscript equals 1 Endscripts equals sigma summation x Subscript n Baseline normal e Superscript minus normal j normal upper Omega n Baseline equals upper X left parenthesis normal upper Omega right parenthesis u
ppe
r
 
X left p arenthesis normal upper Omega plus 2 normal pi right parenthesis equals sigma summation x Subscript n Baseline normal e Superscript minus normal j left parenthesis normal upper Omega plus 2 normal pi right parenthesis n Baseline equals sigma summation x Subscript n Baseline normal e Superscript minus normal j normal upper Omega n Baseline dot ModifyingBelow normal e Superscript minus normal j Baseline 2 normal pi n Baseline With bottom brace Underscript equals 1 Endscripts equals sigma summation x Subscript n Baseline normal e Superscript minus normal j normal upper Omega n Baseline equals upper X left parenthesis normal upper Omega right parenthesis
So, the Fourier transform is periodic with a period Ω = 2π, which according to 
Eq. (7.40) corresponds to a frequency of f = f S. Figure 7.37 illustrates the relation 
between the s space and the z space. (Notice that ω = 0 and ω = ωS ends up in the 
same place in z space.) 
You might be a little confused right now. We just derived the Fourier transform 
for sampled signals, but didn’t we do that already in Sect. 7.2.3, Eq. (7.18)? No, we 
didn’t actually! Eq. (7.18) is the  discrete Fourier transform. It is a very common 
misunderstanding that the word ‘discrete’ in ‘discrete Fourier transform’ refers to 
discrete time, i.e., to the fact that we have sampled the signal. It does not! Expression 
(7.42) is the  discrete-time Fourier transform. 
Expression (7.18) is the  discrete Fourier transform, i.e., it is a discrete version 
of Eq. (7.42), where ‘discrete’ means that we only calculate Eq. (7.42) for certain 
Ω-values (you could say that we sample X(Ω)). The DFT is an adaption to the ‘real-
world’ situation if you like. Look at Eq. (7.42); the domain of Ω is double struck upper R; all  Ω-values 
are allowed, and we don’t have time to calculate X(Ω) for that many Ω-values. As 
if that was not enough; the Fourier transform in Eq. (7.42) sums forever! In a ‘real-
world’ application, we must stop sampling at some point (after N samples) and due 
to real-time constraints, we want to calculate X(Ω) for just enough Ω-values; no 
more and no less than necessary. So how many X(Ω)-values are ‘enough’? Well, by 
deﬁnition, it is enough when we have enough X(Ω)-values to be able to reproduce xn 
by an inverse Fourier transform, i.e., when X−1(Ω) = xn. And, if we take N samples 
of a signal, we must have (at least) N X(Ω)-values to get the signal back when we 
do an inverse transform. 
If we have N samples and calculate Eq. (7.42) for exactly N Ω-values, the distance 
between Ω-values must be 2π/N and
Fig. 7.37 From s space to z space 

7.5 Solved Problems
153
Fig. 7.38 Poles must be 
within the unit circle
n orma l upper Omega equals k dot StartFraction 2 normal pi Over upper N EndFraction
no
rmal upper Omega equals k dot StartFraction 2 normal pi Over upper N EndFraction
Inserting that into Eq. (7.42) gives us 
upper X l
e
ft  parenthesis normal upper Omega right parenthesis equals upper X left parenthesis k dot StartFraction 2 normal pi Over upper N EndFraction right parenthesis equals upper X left parenthesis k right parenthesis equals sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline e Superscript minus j k StartFraction 2 normal pi Over upper N EndFraction n
u
p
per X left
 pa
r
enth
esis no rmal upper Omega right parenthesis equals upper X left parenthesis k dot StartFraction 2 normal pi Over upper N EndFraction right parenthesis equals upper X left parenthesis k right parenthesis equals sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline e Superscript minus j k StartFraction 2 normal pi Over upper N EndFraction n
up pe
r X left parenthesis normal upper Omega right parenthesis equals upper X left parenthesis k dot StartFraction 2 normal pi Over upper N EndFraction right parenthesis equals upper X left parenthesis k right parenthesis equals sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline e Superscript minus j k StartFraction 2 normal pi Over upper N EndFraction n
which is exactly the DFT expression in Eq. (7.18). The DFT is a discrete (sampled) 
version of the Fourier transform in Eq. (7.42). That’s why it is ‘discrete’, not because 
it processes discrete signals. 
Finally, let’s also see what happens to our ‘poles restraint’ in Fig. 7.35. For  a  
continuous-time system to be stable, all poles must be in the left half of the s plane, 
i.e., σ < 0. How does that translate to discrete time? Well, inserting σ < 0 in  Eq. (7.39a) 
implies that StartAbsoluteValue z EndAbsoluteValue less than 1, i.e., in the z plane, all poles must be within the unit circle for 
the system to be stable, see Fig. 7.38. 
Time to update (to complete!) our transform map, see Table 7.6.
Admittedly, there are a lot of transforms, but hopefully, after reading this chapter 
you can see how they ﬁt together and Table 7.6 may help you to ‘organize’ them. We 
will have plenty of reasons to use transforms later in this book. In Fig. 7.39, we have  
summarized the three different transforms for sampled signals and their relationship.
7.5 
Solved Problems 
Problem 7.1 Plot the amplitude spectrum of the signal x(t) in Fig.  7.40.
Solution First we need to ﬁnd the Fourier transform. The signal is periodic with 
period T = 0.1 s. In the time interval 0 … 0.1 s, the signal equation is x(t) = 1 – 10t

154
7
Transform Theory
Table 7.6 The complete transform map 
Non-complex frequency
Complex frequency 
Analog
Periodic 
upper X  left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis e Superscript minus j k omega 0 t Baseline d t
up
pe
r
 X
 left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts x left parenthesis t right parenthesis e Superscript minus j k omega 0 t Baseline d t
upper X 
le
f
t 
parenthesis s right parenthesis equals integral Underscript 0 Overscript normal infinity Endscripts x left parenthesis t right parenthesis e Superscript minus s t Baseline d t
Transient
upper X
 l
e
ft parenthesis omega right parenthesis equals integral Underscript negative normal infinity Overscript normal infinity Endscripts x left parenthesis t right parenthesis e Superscript minus j omega t Baseline d t
Sampled
DFT 
upper X 
left
 
pare
nthesis  k right parenthesis equals sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline e Superscript minus j k StartFraction 2 normal pi Over upper N EndFraction n
up per X left parenthesis k right parenthesis equals sigma summation Underscript n equals 0 Overscript upper N minus 1 Endscripts x Subscript n Baseline e Superscript minus j k StartFraction 2 normal pi Over upper N EndFraction n
upper X
 
l
eft 
parenthesis z right parenthesis equals sigma summation Underscript n equals 0 Overscript normal infinity Endscripts x Subscript n Baseline z Superscript negative n
Fourier 
upper X 
l
e
ft p
arenthesis normal upper Omega right parenthesis equals sigma summation Underscript n equals 0 Overscript normal infinity Endscripts x Subscript n Baseline e Superscript minus j normal upper Omega n
Im(z) 
Re(z) 
1 
j 
The z transform domain is 
the entire z plane. 
Increasing frequency. 
Discrete Fourier transform domain (DFT) 
Discrete-time Fourier transform domain 
Ω 
ΔΩ = 2π/N 
Fig. 7.39 Transform domains for sampled signals
Fig. 7.40 A sawtooth signal
= 1 –  t/T. The Fourier transform is

7.5 Solved Problems
155
StartLay out 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
St
ar
t
L
a
yo ut  1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
St a
r
tLayout 1st R
ow  upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
S
t
ar tLayout 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
Star
tL
ay ou t 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
St a
r
tLayout 1
st 
Ro
w
 upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
StartL
ay
o
ut
 1st Row u
p
pe r X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
S
t artLayout 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
Start
L
ayout 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
StartLay
ou
t
 1st Row u
p
p
er  X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
St
ar
tLayout
 1st Ro
w upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
Start
La
yout 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
Start
Lay
ou
t 1st Row u
pper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
StartLayout 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
S
tar
tL
a
yout 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
StartLayout 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
S
ta rt Layout
 1
st Row 
upper X
 
left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
StartLayout 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
S tartLayout 1st Row upper X left parenthesis k right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline d t 2nd Row equals StartFraction 1 Over upper T EndFraction left brace minus StartFraction 1 Over j k omega 0 EndFraction left bracket left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis dot e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline minus StartFraction 1 Over j k omega 0 upper T EndFraction integral Underscript 0 Overscript upper T Endscripts e Superscript minus j k omega 0 t Baseline d t right brace 3rd Row equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction plus StartFraction 1 Over j squared k squared omega 0 squared upper T EndFraction left bracket e Superscript minus j k omega 0 t Baseline right bracket Subscript 0 Superscript upper T Baseline right brace equals StartFraction 1 Over upper T EndFraction left brace StartFraction 1 Over j k omega 0 EndFraction minus ModifyingBelow StartFraction 1 Over k squared omega 0 squared upper T EndFraction left parenthesis ModifyingBelow e Superscript minus j k Baseline 2 normal pi Baseline minus 1 With bottom brace Underscript equals 1 Endscripts right parenthesis With bottom brace Underscript equals 0 if k not equals 0 Endscripts right brace 4th Row equals ModifyingBelow StartFraction 1 Over j k Baseline 2 normal pi EndFraction With quotation dash k not equals 0 EndLayout
We need to treat the case k = 0, separately. Since k = 0 represents the DC 
component in the signal, we can easily see in Fig. 7.40 that X(0) must be = 0.5. But 
let’s calculate it anyway: 
upper X left parenthesis 0 right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis d t equals StartFraction 1 Over upper T EndFraction left bracket t minus StartFraction 1 Over 2 upper T EndFraction t squared right bracket Subscript 0 Superscript upper T Baseline equals StartFraction 1 Over upper T EndFraction left parenthesis upper T minus StartFraction upper T Over 2 EndFraction right parenthesis equals one half
up
pe
r
 
X
 l ef t parenthesis 0 right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis d t equals StartFraction 1 Over upper T EndFraction left bracket t minus StartFraction 1 Over 2 upper T EndFraction t squared right bracket Subscript 0 Superscript upper T Baseline equals StartFraction 1 Over upper T EndFraction left parenthesis upper T minus StartFraction upper T Over 2 EndFraction right parenthesis equals one half
up p
e
r X  l eft parenthesis 0 right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis d t equals StartFraction 1 Over upper T EndFraction left bracket t minus StartFraction 1 Over 2 upper T EndFraction t squared right bracket Subscript 0 Superscript upper T Baseline equals StartFraction 1 Over upper T EndFraction left parenthesis upper T minus StartFraction upper T Over 2 EndFraction right parenthesis equals one half
u
p
pe r X left parenthesis 0 right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis d t equals StartFraction 1 Over upper T EndFraction left bracket t minus StartFraction 1 Over 2 upper T EndFraction t squared right bracket Subscript 0 Superscript upper T Baseline equals StartFraction 1 Over upper T EndFraction left parenthesis upper T minus StartFraction upper T Over 2 EndFraction right parenthesis equals one half
up er
 X 
le
ft  parenthesis 0 right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis d t equals StartFraction 1 Over upper T EndFraction left bracket t minus StartFraction 1 Over 2 upper T EndFraction t squared right bracket Subscript 0 Superscript upper T Baseline equals StartFraction 1 Over upper T EndFraction left parenthesis upper T minus StartFraction upper T Over 2 EndFraction right parenthesis equals one half
u
p
pe r X left parenthesis 0 right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis d t equals StartFraction 1 Over upper T EndFraction left bracket t minus StartFraction 1 Over 2 upper T EndFraction t squared right bracket Subscript 0 Superscript upper T Baseline equals StartFraction 1 Over upper T EndFraction left parenthesis upper T minus StartFraction upper T Over 2 EndFraction right parenthesis equals one half
u
p
per X left parenthesis 0 right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis d t equals StartFraction 1 Over upper T EndFraction left bracket t minus StartFraction 1 Over 2 upper T EndFraction t squared right bracket Subscript 0 Superscript upper T Baseline equals StartFraction 1 Over upper T EndFraction left parenthesis upper T minus StartFraction upper T Over 2 EndFraction right parenthesis equals one half
upper X left parenthesis 0 right parenthesis equals StartFraction 1 Over upper T EndFraction integral Underscript 0 Overscript upper T Endscripts left parenthesis 1 minus StartFraction 1 Over upper T EndFraction t right parenthesis d t equals StartFraction 1 Over upper T EndFraction left bracket t minus StartFraction 1 Over 2 upper T EndFraction t squared right bracket Subscript 0 Superscript upper T Baseline equals StartFraction 1 Over upper T EndFraction left parenthesis upper T minus StartFraction upper T Over 2 EndFraction right parenthesis equals one half
Hence: 
StartAbsol
ut
eV
al
ue upper X left parenthesis k right parenthesis EndAbsoluteValue equals StartLayout Enlarged left brace 1st Row one half k equals 0 2nd Row Blank 3rd Row StartFraction 1 Over k Baseline 2 normal pi EndFraction k not equals 0 EndLayout
St
ar tAbs
oluteValue upper X left parenthesis k right parenthesis EndAbsoluteValue equals StartLayout Enlarged left brace 1st Row one half k equals 0 2nd Row Blank 3rd Row StartFraction 1 Over k Baseline 2 normal pi EndFraction k not equals 0 EndLayout
Star t AbsoluteValue upper X left parenthesis k right parenthesis EndAbsoluteValue equals StartLayout Enlarged left brace 1st Row one half k equals 0 2nd Row Blank 3rd Row StartFraction 1 Over k Baseline 2 normal pi EndFraction k not equals 0 EndLayout
Figure 7.41 illustrates the amplitude spectrum. 
Problem 7.2 Prove that the signal x(t – t0) has the same amplitude spectrum as the 
signal x(t). 
Solution To prove this, we do a substitution: τ = t – t0. The Fourier transform of 
x(t – t0) is
Fig. 7.41 Amplitude spectrum of sawtooth 

156
7
Transform Theory
StartL ayout 1st Row integral x left parenthesis  t minus t 0 right pare
nthesis e  Superscript minus j ome ga t Baseline d t equals integra
l x left parenthesis tau right parenthesis e Superscript minus j omega left parenthesis tau plus t 0 right parenthesis Baseline d tau equals integral x left parenthesis tau right parenthesis e Superscript minus j omega tau Baseline dot e Superscript minus j omega t 0 Baseline d tau 2nd Row equals e Superscript minus j omega t 0 Baseline integral x left parenthesis tau right parenthesis e Superscript minus j omega tau Baseline d tau equals e Superscript minus j omega t 0 Baseline upper X left parenthesis omega right parenthesis equals e Superscript minus j omega t 0 Baseline StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue dot e Superscript minus j phi left parenthesis omega right parenthesis Baseline 3rd Row equals StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue dot e Superscript minus j left parenthesis phi left parenthesis omega right parenthesis plus omega t 0 right parenthesis Baseline EndLayout
A time shift only adds a phase angle ωt0 to the phase diagram. The amplitude 
spectrum is unaffected by time shifts in the signal. 
Problem 7.3 How does the bandwidth of the signal in Example 7.2 depend on the 
pulse width? 
Solution We set the pulse width to a (instead of 1). According to the previous 
example, we can shift the pulse anywhere we want to, it doesn’t affect the amplitude 
spectrum. Hence, we assume it is between −a/2 and a/2: 
Star
t
Layou
t 1st Row  i ntegral Underscript negative a divided by 2 Overscript a divided by 2 Endscripts e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative a divided by 2 Superscript a divided by 2 Baseline equals minus StartFraction 2 a Over omega a EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega a divided by 2 Baseline minus e Superscript j omega a divided by 2 Baseline right parenthesis 2nd Row equals a dot StartFraction sine omega a divided by 2 Over omega a divided by 2 EndFraction equals a dot sinc StartFraction omega a Over 2 EndFraction right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals a dot StartAbsoluteValue sinc StartFraction omega a Over 2 EndFraction EndAbsoluteValue EndLayout
St
a
rtLayout 1
st Ro w  integral Underscript negative a divided by 2 Overscript a divided by 2 Endscripts e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative a divided by 2 Superscript a divided by 2 Baseline equals minus StartFraction 2 a Over omega a EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega a divided by 2 Baseline minus e Superscript j omega a divided by 2 Baseline right parenthesis 2nd Row equals a dot StartFraction sine omega a divided by 2 Over omega a divided by 2 EndFraction equals a dot sinc StartFraction omega a Over 2 EndFraction right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals a dot StartAbsoluteValue sinc StartFraction omega a Over 2 EndFraction EndAbsoluteValue EndLayout
Sta rt Layout 1st Row integral Underscript negative a divided by 2 Overscript a divided by 2 Endscripts e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative a divided by 2 Superscript a divided by 2 Baseline equals minus StartFraction 2 a Over omega a EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega a divided by 2 Baseline minus e Superscript j omega a divided by 2 Baseline right parenthesis 2nd Row equals a dot StartFraction sine omega a divided by 2 Over omega a divided by 2 EndFraction equals a dot sinc StartFraction omega a Over 2 EndFraction right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals a dot StartAbsoluteValue sinc StartFraction omega a Over 2 EndFraction EndAbsoluteValue EndLayout
St
a
rtLayout  1st Row 
inte gral U nderscript negative a divided by 2 Overscript a divided by 2 Endscripts e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative a divided by 2 Superscript a divided by 2 Baseline equals minus StartFraction 2 a Over omega a EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega a divided by 2 Baseline minus e Superscript j omega a divided by 2 Baseline right parenthesis 2nd Row equals a dot StartFraction sine omega a divided by 2 Over omega a divided by 2 EndFraction equals a dot sinc StartFraction omega a Over 2 EndFraction right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals a dot StartAbsoluteValue sinc StartFraction omega a Over 2 EndFraction EndAbsoluteValue EndLayout
Start
Layo ut 1st Row integral Underscript negative a divided by 2 Overscript a divided by 2 Endscripts e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative a divided by 2 Superscript a divided by 2 Baseline equals minus StartFraction 2 a Over omega a EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega a divided by 2 Baseline minus e Superscript j omega a divided by 2 Baseline right parenthesis 2nd Row equals a dot StartFraction sine omega a divided by 2 Over omega a divided by 2 EndFraction equals a dot sinc StartFraction omega a Over 2 EndFraction right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals a dot StartAbsoluteValue sinc StartFraction omega a Over 2 EndFraction EndAbsoluteValue EndLayout
St artLayout 1st R
ow integral Underscript negative a divided by 2 Overscript a divided by 2 Endscripts e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative a divided by 2 Superscript a divided by 2 Baseline equals minus StartFraction 2 a Over omega a EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega a divided by 2 Baseline minus e Superscript j omega a divided by 2 Baseline right parenthesis 2nd Row equals a dot StartFraction sine omega a divided by 2 Over omega a divided by 2 EndFraction equals a dot sinc StartFraction omega a Over 2 EndFraction right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals a dot StartAbsoluteValue sinc StartFraction omega a Over 2 EndFraction EndAbsoluteValue EndLayout
S
tartLayout 1st Row integral Underscript negative a divided by 2 Overscript a divided by 2 Endscripts e Superscript minus j omega t Baseline d t equals minus StartFraction 1 Over j omega EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative a divided by 2 Superscript a divided by 2 Baseline equals minus StartFraction 2 a Over omega a EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j omega a divided by 2 Baseline minus e Superscript j omega a divided by 2 Baseline right parenthesis 2nd Row equals a dot StartFraction sine omega a divided by 2 Over omega a divided by 2 EndFraction equals a dot sinc StartFraction omega a Over 2 EndFraction right double arrow StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue equals a dot StartAbsoluteValue sinc StartFraction omega a Over 2 EndFraction EndAbsoluteValue EndLayout
This expression is plotted in Fig. 7.42 and it is obvious that the bandwidth increases 
when the pulse width decreases. This is true in general; ‘short in time, wide in 
frequency’ (and vice versa). 
Problem 7.4 Some FFT software produced the following output for a 16-sample 
input: 
24 0 0 
nega tive 5 plu s 2 j  0  3  0  p lus 18 j 
0 0 0  0 0 3 0 minus 18 j 0 negative 5 minus 2 j 0 0
The 16 samples were sampled at 100 kS/s. Write down an expression for the analog 
signal that was sampled. (No aliasing occurred.) 
Solution We have X(0) = 24, hence a0 = 24/16 = 1.5. X(3) = −5 + 2j and X(5) = 
30 + 18j. Use Eq. (7.7) to ﬁnd the corresponding amplitudes and phase angles (and 
divide the amplitudes by N = 16):
Fig. 7.42 The bandwidth increases when the pulse width decreases 

7.5 Solved Problems
157
StartL ayo ut 1s t Row upper X l eft p aren thesis 3 right parenthesis equals negative 5 plus 2 j equals 5.38 e Superscript j 158 .2 Super Superscript ring Superscript Baseline right double arrow a 3 equals 2 dot 5.38 dot one sixteenth equals 0.67 phi 3 equals 158.2 Superscript ring Baseline 2nd Row upper X left parenthesis 5 right parenthesis equals 30 plus 18 j equals 35.98 e Superscript j 31 .0 Super Superscript ring Superscript Baseline right double arrow a 5 equals 2 dot 35.98 dot one sixteenth equals 4.50 phi 5 equals 31.0 Superscript ring Baseline EndLayout
Sta rtLayo
ut 1st Row u
pper X lef t pare nthesis 3 right  pare nthe sis equa ls  negative 5 plus 2 j equals 5.38 e Superscript j 158 .2 Super Superscript ring Superscript Baseline right double arrow a 3 equals 2 dot 5.38 dot one sixteenth equals 0.67 phi 3 equals 158.2 Superscript ring Baseline 2nd Row upper X left parenthesis 5 right parenthesis equals 30 plus 18 j equals 35.98 e Superscript j 31 .0 Super Superscript ring Superscript Baseline right double arrow a 5 equals 2 dot 35.98 dot one sixteenth equals 4.50 phi 5 equals 31.0 Superscript ring Baseline EndLayout
Sta rtLayo
ut 1st Row upper X left parenthesis 3 right parenthesis equals negative 5 plus 2 j equals 5.38 e Superscript j 158 .2 Super Superscript ring Superscript Baseline right double arrow a 3 equals 2 dot 5.38 dot one sixteenth equals 0.67 phi 3 equals 158.2 Superscript ring Baseline 2nd Row upper X left parenthesis 5 right parenthesis equals 30 plus 18 j equals 35.98 e Superscript j 31 .0 Super Superscript ring Superscript Baseline right double arrow a 5 equals 2 dot 35.98 dot one sixteenth equals 4.50 phi 5 equals 31.0 Superscript ring Baseline EndLayout
Frequencies are 
k do t StartFraction f Subscript upper S Baseline Over upper N EndFraction equals k dot StartFraction 100 Over 16 EndFraction kHz equals k dot 6.25 kHz right double arrow f 3 equals 3 dot 6.25 equals 18.75 kHz comma f 5 equals 31.25 kHz
k dot StartFraction f Subscript upper S Baseline Over upper N EndFraction equals k dot StartFraction 100 Over 16 EndFraction kHz equals k dot 6.25 kHz right double arrow f 3 equals 3 dot 6.25 equals 18.75 kHz comma f 5 equals 31.25 kHz
k d ot S tart Fractio n f Su bsc ript  upper S Baseli ne Ov er upper N EndFraction equals k dot StartFraction 100 Over 16 EndFraction kHz equals k dot 6.25 kHz right double arrow f 3 equals 3 dot 6.25 equals 18.75 kHz comma f 5 equals 31.25 kHz
ModifyingBel ow x le ft parenthesi s t right parenth esis equals 1 .50 plus 0.67 cosine left parenthesis 2 normal pi Baseline 18750 t plus 158.2 Superscript ring Baseline right parenthesis plus 4.50 cosine left parenthesis 2 normal pi Baseline 31250 t plus 31 Superscript ring Baseline right parenthesis With quotation dash normal upper VModifyingBelow x left parenthesis t right parenthesis equals 1.50 plus 0.67 cosine left parenthesis 2 normal pi Baseline 18750 t plus 158.2 Superscript ring Baseline right parenthesis plus 4.50 cosine left parenthesis 2 normal pi Baseline 31250 t plus 31 Superscript ring Baseline right parenthesis With quotation dash normal upper V
Problem 7.5 If you sample the signal x lef t par enthesis t rig ht parenthesis equals 10 sine left parenthesis 2 normal pi Baseline 200000 t minus 45 Superscript ring Baseline right parenthesis, with a 
sampling rate of 75 kS/s, what frequency would you see? 
Solution Signal frequency is 200 kHz which is > f S/2 = 37.5 kHz, and there will 
be aliasing. We need to ﬁnd the aliasing frequency that ends up in the ‘observa-
tion’ interval 0 … 37.5 kHz, because that is the frequency we will ‘see’. First, we 
subtract 75 from 200 repeatedly: 200, 125, 50, −25, −100… None of these falls 
into the observation area. Next, add 75 repeatedly to −200: −125, −50, 25, 100, …. 
Obviously, 25 kHz is the aliasing frequency that ends up in our observation interval. 
Answer: We will see a frequency of 25 kHz. 
Problem 7.6 If x(t) has the Laplace transform X(s), what is the Laplace transform 
of x’(t)? 
Solution Integrating by parts: 
St
a
rt
Layout 1st Ro w
 
integral Un
de rscr
ip
t
 0
 Overscript norm al infinity Ends
cripts x prime left parenthesis t right parenthesis e Superscript minus s t Baseline d t equals left bracket x left parenthesis t right parenthesis e Superscript minus s t Baseline right bracket Subscript 0 Superscript normal infinity Baseline plus s integral Underscript 0 Overscript normal infinity Endscripts x left parenthesis t right parenthesis e Superscript minus s t Baseline d t equals 0 minus x left parenthesis 0 right parenthesis plus s upper X left parenthesis s right parenthesis 2nd Row equals ModifyingBelow s upper X left parenthesis s right parenthesis minus x left parenthesis 0 right parenthesis With quotation dash EndLayout
Problem 7.7 If x(t) has the Laplace transform X(s), what is the Laplace transform 
of the primitive function of x(t)? 
Solution Setting y lef t 
pa
r
en
thesis t right parenthesis equals integral Underscript 0 Overscript t Endscripts x left parenthesis tau right parenthesis d tau, then y’(t) = x(t) and y(0) = 0. According to 
Example 7.6, we have that the Laplace transform of y’(t) is  
StartLayout 1st Row 1st Column script upper L left parenthesis y prime left parenthesis t right parenthesis right parenthesis 2nd Column equals s upper Y left parenthesis s right parenthesis minus y left parenthesis 0 right parenthesis equals s upper Y left parenthesis s right parenthesis right double arrow upper Y left parenthesis s right parenthesis equals StartFraction script upper L left parenthesis y prime left parenthesis t right parenthesis right parenthesis Over s EndFraction equals StartFraction script upper L left parenthesis x left parenthesis t right parenthesis right parenthesis Over s EndFraction 2nd Row 1st Column Blank 2nd Column equals StartFraction upper X left parenthesis s right parenthesis Over s EndFraction equals ModifyingBelow StartFraction 1 Over s EndFraction upper X left parenthesis s right parenthesis With quotation dash EndLayout
S
tartLayout 1st Row 1st Column script upper L left parenthesis y prime left parenthesis t right parenthesis right parenthesis 2nd Column equals s upper Y left parenthesis s right parenthesis minus y left parenthesis 0 right parenthesis equals s upper Y left parenthesis s right parenthesis right double arrow upper Y left parenthesis s right parenthesis equals StartFraction script upper L left parenthesis y prime left parenthesis t right parenthesis right parenthesis Over s EndFraction equals StartFraction script upper L left parenthesis x left parenthesis t right parenthesis right parenthesis Over s EndFraction 2nd Row 1st Column Blank 2nd Column equals StartFraction upper X left parenthesis s right parenthesis Over s EndFraction equals ModifyingBelow StartFraction 1 Over s EndFraction upper X left parenthesis s right parenthesis With quotation dash EndLayout
St
ar tLayout 1st Row 1st Column script upper L left parenthesis y prime left parenthesis t right parenthesis right parenthesis 2nd Column equals s upper Y left parenthesis s right parenthesis minus y left parenthesis 0 right parenthesis equals s upper Y left parenthesis s right parenthesis right double arrow upper Y left parenthesis s right parenthesis equals StartFraction script upper L left parenthesis y prime left parenthesis t right parenthesis right parenthesis Over s EndFraction equals StartFraction script upper L left parenthesis x left parenthesis t right parenthesis right parenthesis Over s EndFraction 2nd Row 1st Column Blank 2nd Column equals StartFraction upper X left parenthesis s right parenthesis Over s EndFraction equals ModifyingBelow StartFraction 1 Over s EndFraction upper X left parenthesis s right parenthesis With quotation dash EndLayout
S
tartLayout 1st Row 1st Column script upper L left parenthesis y prime left parenthesis t right parenthesis right parenthesis 2nd Column equals s upper Y left parenthesis s right parenthesis minus y left parenthesis 0 right parenthesis equals s upper Y left parenthesis s right parenthesis right double arrow upper Y left parenthesis s right parenthesis equals StartFraction script upper L left parenthesis y prime left parenthesis t right parenthesis right parenthesis Over s EndFraction equals StartFraction script upper L left parenthesis x left parenthesis t right parenthesis right parenthesis Over s EndFraction 2nd Row 1st Column Blank 2nd Column equals StartFraction upper X left parenthesis s right parenthesis Over s EndFraction equals ModifyingBelow StartFraction 1 Over s EndFraction upper X left parenthesis s right parenthesis With quotation dash EndLayout
St artLayout 1st Row 1st Column script upper L left parenthesis y prime left parenthesis t right parenthesis right parenthesis 2nd Column equals s upper Y left parenthesis s right parenthesis minus y left parenthesis 0 right parenthesis equals s upper Y left parenthesis s right parenthesis right double arrow upper Y left parenthesis s right parenthesis equals StartFraction script upper L left parenthesis y prime left parenthesis t right parenthesis right parenthesis Over s EndFraction equals StartFraction script upper L left parenthesis x left parenthesis t right parenthesis right parenthesis Over s EndFraction 2nd Row 1st Column Blank 2nd Column equals StartFraction upper X left parenthesis s right parenthesis Over s EndFraction equals ModifyingBelow StartFraction 1 Over s EndFraction upper X left parenthesis s right parenthesis With quotation dash EndLayout
Problem 7.8 What is the Laplace transform of a ‘step function’, see Fig. 7.43.
Solution 
in
t
eg
ra l Undersc r i pt 0 Overscript normal infinity Endscripts 1 dot e Superscript minus s t Baseline d t equals minus StartFraction 1 Over s EndFraction left bracket e Superscript minus s t Baseline right bracket Subscript 0 Superscript normal infinity Baseline equals minus StartFraction 1 Over s EndFraction left parenthesis 0 minus 1 right parenthesis equals StartFraction 1 Over s EndFraction
i
n
tegral 
Un d e rscript 0 Overscript normal infinity Endscripts 1 dot e Superscript minus s t Baseline d t equals minus StartFraction 1 Over s EndFraction left bracket e Superscript minus s t Baseline right bracket Subscript 0 Superscript normal infinity Baseline equals minus StartFraction 1 Over s EndFraction left parenthesis 0 minus 1 right parenthesis equals StartFraction 1 Over s EndFraction
in teg ral Und erscript 0 Overscript normal infinity Endscripts 1 dot e Superscript minus s t Baseline d t equals minus StartFraction 1 Over s EndFraction left bracket e Superscript minus s t Baseline right bracket Subscript 0 Superscript normal infinity Baseline equals minus StartFraction 1 Over s EndFraction left parenthesis 0 minus 1 right parenthesis equals StartFraction 1 Over s EndFraction
integral Underscript 0 Overscript normal infinity Endscripts 1 dot e Superscript minus s t Baseline d t equals minus StartFraction 1 Over s EndFraction left bracket e Superscript minus s t Baseline right bracket Subscript 0 Superscript normal infinity Baseline equals minus StartFraction 1 Over s EndFraction left parenthesis 0 minus 1 right parenthesis equals StartFraction 1 Over s EndFraction .

158
7
Transform Theory
Fig. 7.43 A ‘step function’ 
(sometimes called a 
‘Heaviside’ function)
Problem 7.9 What is the Laplace transform of x(t) = e−at? (x(t) = 0 for  t < 0.)  
Solution
i nt
eg ral S ubscript 0
 Su
pe rscript nor m a l infinity Baseline e Superscript minus a t Baseline dot e Superscript minus s t Baseline d t equals integral Subscript 0 Superscript normal infinity Baseline e Superscript minus left parenthesis s plus a right parenthesis t Baseline d t equals minus StartFraction 1 Over s plus a EndFraction left bracket e Superscript minus left parenthesis s plus a right parenthesis t Baseline right bracket Subscript 0 Superscript normal infinity Baseline equals StartFraction 1 Over s plus a EndFraction
int
e
gral Subscr
ip t 
0 Superscript normal infinity Baseline e Superscript minus a t Baseline dot e Superscript minus s t Baseline d t equals integral Subscript 0 Superscript normal infinity Baseline e Superscript minus left parenthesis s plus a right parenthesis t Baseline d t equals minus StartFraction 1 Over s plus a EndFraction left bracket e Superscript minus left parenthesis s plus a right parenthesis t Baseline right bracket Subscript 0 Superscript normal infinity Baseline equals StartFraction 1 Over s plus a EndFraction
integral Subscript 0 Superscript normal infinity Baseline e Superscript minus a t Baseline dot e Superscript minus s t Baseline d t equals integral Subscript 0 Superscript normal infinity Baseline e Superscript minus left parenthesis s plus a right parenthesis t Baseline d t equals minus StartFraction 1 Over s plus a EndFraction left bracket e Superscript minus left parenthesis s plus a right parenthesis t Baseline right bracket Subscript 0 Superscript normal infinity Baseline equals StartFraction 1 Over s plus a EndFraction . 
Problem 7.10 If the z transform of x(n) is  X(z), then what is the z transform of x(n 
– n0)? 
Solution Inserting x(n – n0) into Eq. (7.41) gives us 
S
t
artL
ayout 1st R
ow sigm a sum
ma tion  Und
e
rs
c
r
ipt n 
equals 0 Overscript n orm al in fin ity E
nd
s
c
ript
s x Subscri pt n minus n 0 Baseline z Superscript negative n Baseline equals StartBinomialOrMatrix m equals n minus n 0 Choose n equals m plus n 0 EndBinomialOrMatrix equals 2nd Row sigma summation Underscript m equals minus n 0 Overscript normal infinity Endscripts x Subscript m Baseline z Superscript negative m minus n 0 Baseline equals left brace assuming x Subscript n Baseline equals 0 if n less than 0 right brace 3rd Row equals sigma summation Underscript m equals 0 Overscript normal infinity Endscripts x Subscript m Baseline z Superscript negative m Baseline z Superscript minus n 0 Baseline equals ModifyingBelow upper X left parenthesis z right parenthesis dot z Superscript minus n 0 Baseline With quotation dash EndLayout
Problem 7.11 If x(t) has the Laplace transform X(s), what is the Laplace transform 
of the delayed signal x(t – t0)? 
Solution Substituting τ for t – t0 and that x(t) = 0 for  t < 0:  
StartL ayout 1st
 R
o
w 
scri pt upper L le ft
 p
ar
en
thesis  x le
ft paren
th esis t mi
nu
s 
t 0 
ri
g
ht p
arenthesis right pa
renthesi
s 
e
qu
als integral Underscr ipt 0 Overscript normal infinity Endscripts x left parenthesis t minus t 0 right parenthesis e Superscript minus s t Baseline d t equals Start 3 By 1 Matrix 1st Row tau equals t minus t 0 2nd Row d tau equals d t 3rd Row t equals tau plus t 0 EndMatrix equals integral Underscript minus t 0 Overscript normal infinity Endscripts x left parenthesis tau right parenthesis e Superscript minus s left parenthesis tau plus t 0 right parenthesis Baseline d tau 2nd Row equals e Superscript minus s t 0 Baseline integral Underscript 0 Overscript normal infinity Endscripts x left parenthesis tau right parenthesis e Superscript minus s tau Baseline d tau equals e Superscript minus s t 0 Baseline upper X left parenthesis s right parenthesis EndLayout
If x(t) has the Laplace transform X(s), then x(t – t0) has the Laplace transform 
Modify ingBelow normal e Superscript minus s t 0 Baseline upper X left parenthesis s right parenthesis With quotation dash.

Reference
159
Reference 
1. Cooley, J.W., and J.W. Tukey. 1965. An algorithm for the machine calculation of complex Fourier 
series. Mathematics of computation 19 (90): 297–301.

Chapter 8 
Spectrum Analyzers 
Abstract Spectrum analyzers are one of the most common instruments used in a 
measurement laboratory (often integrated into the oscilloscope) and it is an imperative 
skill of a scientist to be able to handle a spectrum analyzer and to interpret its output. 
A spectrum analyzer is the most basic application of transform theory, and this 
chapter relies heavily on the previous chapter. Spectrum analyzers can be analog (non-
sampling) or digital (sampling). Both kinds of analyzers are treated in this chapter, but 
the focus is on sampling systems based on the fast Fourier transform. Fundamental 
spectrum concepts like spectral leakage and windows, resolution bandwidth, and 
heterodyne analyzers are highlighted and illustrated by examples. 
8.1 
Introduction 
In general, a ‘spectrum analyzer’ produces the Fourier transform of a signal. However, 
in most situations, it is understood that only the magnitude (StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue) of the Fourier 
transform is of interest. Some spectrum analyzers produce the phase diagram too, 
but here we will consider spectrum analyzers that produce the magnitude diagram 
only. 
A spectrum analyzer can be ‘digital’ or ‘analog’. We will treat ‘analog’ spectrum 
analyzers in Sect. 8.4. Digital spectrum analyzers sample the signal and calculate 
the discrete Fourier transform (Expression (7.18)), but of course, they use the FFT 
algorithm to speed up the math (see Sect. 7.2). We know from the previous chapter 
that Fourier transform spectra can be corrupted by aliasing, so here we will assume 
that the signal is sampled with respect to the sampling theorem. Instead, we will 
concentrate on other aspects of the Fourier transform spectrum. 
Our starting point is Expression (7.20), that speciﬁes the resolution of the FFT 
spectrum: 
f equa ls  k dot StartFraction f Subscript upper S Baseline Over upper N EndFraction equals k dot normal upper Delta f
f equa l s 
k dot StartFraction f Subscript upper S Baseline Over upper N EndFraction equals k dot normal upper Delta f
where ∆f is the resolution of the FFT spectrum (StartAbsoluteValue upper X left parenthesis k right parenthesis EndAbsoluteValue).
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_8 
161

162
8
Spectrum Analyzers
Consider the analog signal in Fig. 8.1. To produce the FFT, we must sample it, 
and we must stop sampling it at some point; we take N samples of the signal at a rate 
of f S. If we would sample the signal in the interval indicated in Fig. 8.1, the signal’s 
period would ﬁt exactly ﬁve times in this interval, and that would correspond to a 
‘frequency’ of k = 5 in Eq.  (8.1). The FFT spectrum would produce a single peak 
for k = 5, see Fig. 8.2; k represents the number of periods of the signal that ﬁts in 
the sampling interval. 
The spectrum in Fig. 8.2 looks nice and clean, but if you think about it, we were 
quite lucky in our sampling; we sampled exactly ﬁve periods of the signal! What are 
the odds of that in a ‘real’ situation? In a real situation, we would not know the signal 
frequency and it is more likely to look as in Fig. 8.3.
In Fig. 8.3, the sampling interval is not an exact multiple of the signal’s frequency; 
it corresponds to k ≈ 4.8. But the FFT only outputs frequencies for integer values 
of k. So, in what FFT channel will we see this signal? Well, the answer is that in 
this case, which is the most common case, the signal will be smeared out over all 
frequencies (over all k values), see Fig. 8.4. However, the k frequency closest to 4.8
Fig. 8.1 Sampling a sinusoidal signal 
Fig. 8.2 The FFT spectrum 

8.1 Introduction
163
Fig. 8.3 ‘Real’ case: The sampling interval is not an exact multiple of the signal’s period
Fig. 8.4 Spectral leakage 
(= 5) will have the largest value and the other frequencies’ magnitudes will drop off 
with the distance to 4.8, see Fig. 8.4. 
This phenomenon, the ‘smearing out’ of the signal’s energy over a wide range of 
frequencies in the FFT spectrum, is called ‘spectral leakage’. If we only learn that 
the k frequency represents a signal period that ﬁts k times in the sampling interval, 
then we could (erroneously) conclude from the spectrum in Fig. 8.4 that the original 
signal consists of many sinusoidal signals with a wide range of frequencies, so it is 
important to understand that multiple peaks in an FFT spectrum can be (and often 
are) caused by spectral leakage. 
Apart from introducing an uncertainty in the signal’s frequency, the biggest disad-
vantage of leakage is that the frequency peak is ‘broadened’, which reduces our ability 
to resolve signals with close frequencies in the spectrum. If that is the problem, then 
we need to reduce the leakage.

164
8
Spectrum Analyzers
8.2 
Windows 
The reason for the spectral leakage is obvious from Fig. 8.3; we don’t sample an 
exact multiple of the signal’s period. Remember from Chap. 7, the DFT expression 
assumes that we have sampled exactly one period of a periodic signal. If we take 
the sampled interval in Fig. 8.3 and repeat it, we get the signal that the DFT really 
represents, see Fig. 8.5. 
The periodic signal will have singularities, and then it is no wonder that the 
FFT spectrum will be ‘broadened’. The reason for the spectrum broadening is the 
discontinuities in the periodic signal in Fig. 8.5; if we want to remedy the spectral 
broadening, we must remedy the discontinuities. 
We remedy the discontinuities by applying a ‘window’ to the sampled data. A 
window is a function that is zero (or almost) at both ends. There are a lot of window 
functions and we have plotted four of the most common ones in Fig. 8.6. 
That means that if we multiply our sampled data with a window function, it will 
be forced to zero at both ends and that will cancel the discontinuities. In Fig. 8.7, we  
have multiplied our samples with a Hanning window function, and it is obvious that 
the resulting periodic function is now a continuous function with no singularities.
Admittedly, the window distorts the signal, but our main concern here was spectral 
resolution, not amplitude accuracy. In Fig. 8.8, we have plotted the new FFT spectrum 
after the windowing.
Fig. 8.5 The periodic signal has a singularity 
Fig. 8.6 Some window functions 

8.2 Windows
165
Fig. 8.7 Applying a Hanning window: The periodic signal has no discontinuities
Fig. 8.8 The FFT spectrum after a Hanning window has been applied to the signal 
If we compare the spectrum in Fig. 8.8 with the spectrum in Fig. 8.4, we can see 
that the spectrum has been narrowed, it is spread out over three k-numbers only (in 
Fig. 8.4 it is spread over 8–10 k-numbers). 
Modern oscilloscopes that have an FFT analyzer also have a set of window func-
tions that you can choose from. Different windows work best for different situations, 
so you just try them all and see which one works best for your signal. Windows are 
particularly useful when you need to resolve spectrum peaks where a ‘small’ peak 
is drowned in the leakage from a ‘big’ peak. This is illustrated in the next example. 
Example 8.1 Figure 8.9 illustrates the amplitude spectrum of the signal x lef t 
par enth esis t righ t pa renthesis equals 10 sine 100 t plus 0.5 sine 104 t. (  f S = 100 S/s, N = 501.)
As we can see in Fig. 8.9, the 104 rad/s signal is hard to discern; it drowns in the 
leakage from the 100 rad/s signal. Try resolving the peaks by applying a window to 
the sampled data. 
Solution Fig. 8.10 illustrates what the spectrum looks like after a Bartlett window 
has been applied to the data. Comparing it with Fig. 8.9, we can see that it is now 
easier to discern the small peak.

166
8
Spectrum Analyzers
Fig. 8.9 The ‘small’ peak drowns in the ‘big’ peak’s leakage
Fig. 8.10 Spectral resolution has been improved by a Bartlett window 
8.3 
Resolution Bandwidth 
8.3.1 
Quantifying the Leakage 
It is possible to quantify (and predict) the leakage exactly, and it is not that hard 
either. To explain how to do that, we need some numbers to work with. Let’s assume 
that we take 128 samples of a sine signal with frequency 336 Hz at a rate of 10 kS/s. 
The total sampling time is N·T S = 128/10 k = 12.8 ms. The signal period is 1/336 
= 2.97 ms, and hence we expect a peak in the DFT spectrum at 
k equals StartFraction 12.8 Over 2.97 EndFraction equals 4.3
k equ als S
tartF
Since the DFT spectrum only provides values for integer numbers of k, there will 
be leakage; the biggest peak will be at k = 4, the second biggest will be at k = 5, 
etc., see Fig. 8.11.

8.3 Resolution Bandwidth
167
Fig. 8.11 Estimated spectrum: We will ﬁgure out the relative sizes of the peaks in the leakage 
Our objective here is to calculate the relative heights of the peaks in Fig. 8.11. 
It is not that hard once you understand how to model each ‘channel’ (= each k). 
Admittedly, we have not covered ﬁlters yet, so you might need to read this section 
again after you have read Chapter 9, but we think this is understandable even without 
the ﬁlter theory in Chapter 9. 
First, we will refer to each k frequency in the DFT spectrum as a ‘channel’, and 
we model each channel as a narrow resonance ﬁlter with center frequency ∆f = 
k·f S. However, this resonance ﬁlter is not inﬁnitely narrow; the frequency response 
function for each channel is a sinc function, see Fig. 8.12. 
Notice in Fig. 8.12 that the period of the sinc function is 2π; the sinc function’s 
zeros coincide exactly with all the other channels’ center frequencies. If the signal 
frequency had been exactly k = 4, the channel 4 peak would have had height 1 
(normalized), but since it is 0.3π to the right of channel 4, the channel 4 height will 
be 
Channel 4 c olon  StartFraction sine 0.3 normal pi Over 0.3 normal pi EndFraction equals 0.86
Chann el 4 colon StartFraction sine 0.3 normal pi Over 0.3 normal pi EndFraction equals 0.86
Fig. 8.12 The relative peak height in channel 4 will be 0.86 

168
8
Spectrum Analyzers
Figure 8.13 illustrates the resonance ﬁlter over channel 5, and since the frequency 
k = 4.3 is 0.7π away from the center of channel 5, the peak height in channel 5 will 
be 
Channel 5 c olon  StartFraction sine 0.7 normal pi Over 0.7 normal pi EndFraction equals 0.37
Chann el 5 colon StartFraction sine 0.7 normal pi Over 0.7 normal pi EndFraction equals 0.37
We center a sinc function over each channel and calculate the peak height from 
the ‘real’ signal’s distance to the channel center. 
And once you accept the ‘sinc resonance ﬁlter’ model for each DFT channel, there 
is an easier way to do this; if you center a sinc function over the ‘real’ frequency, 
you can read the relative height in each channel from the sinc function’s value over 
the channel, see Fig. 8.14. Compare Fig. 8.14 with Fig. 8.15 where the real DFT 
spectrum has been plotted. 
Fig. 8.13 The relative peak in channel 5 will be 0.37 
Fig. 8.14 Center the sinc function over k = 4.3

8.3 Resolution Bandwidth
169
Fig. 8.15 The real DFT spectrum (compare with Fig. 8.14) 
8.3.2 
Resolution Bandwidth 
Equation (8.1) deﬁnes the resolution ∆f in the FFT spectrum. However, ∆f is not 
the most common number used to describe the resolution in FFT spectra; the most 
common number is the resolution bandwidth, RBW. The RBW is almost the same 
as ∆f but there is a subtle difference that we think is important to understand, and 
the RBW has an advantage over ∆f ; RBW is adjusted for different windows. 
In Chap. 9, we will learn that a ﬁlter’s bandwidth is deﬁned as the ‘3 dB’ limit, i.e., 
the frequency where the gain has decreased by –3 dB (equals 1 divided by StartRoot 2 EndRoot almost equals 0.707
√
eq uals 1 divided by StartRoot 2 EndRoot almost equals 0.707). Translated 
to our sinc resonance ﬁlters in the FFT spectrum, the bandwidth will be the distance 
between the upper and lower limits where the gain has decreased by –3 dB, see 
Fig. 8.16. 
To ﬁnd the exact bandwidth, we must solve the equation sine  x d ivided by x equals 1 divided by StartRoot 2 EndRoot
√
sine x divided by x equals 1 divided by StartRoot 2 EndRoot which 
has the solutions x e quals plus or minus 0.44 normal pi, which means that the bandwidth is 2 dot 0.44 normal pi almost equals 0.9 normal pi
or 0.9 d ot normal upper Delta f (since the distance between each channel is π in terms of ‘sinc angle’ 
and ∆f in terms of ‘Hz’).
Fig. 8.16 Deﬁning the resolution bandwidth 

170
8
Spectrum Analyzers
So, RBW equals  0.9 dot normal upper Delta f which indicates that RBW and ∆f are almost the same 
and it shouldn’t really matter which one we use, but it does, because RBW can be 
compensated for the use of different windows. The ‘frequency space’ consequence 
of applying a window is that we change the resolution bandwidth in each channel. 
The general expression for the resolution bandwidth is 
RBW equa l s 
w dot normal upper Delta f
where w is a constant that depends on what window we use. If we have no window (= 
‘rectangular’ window), then w = 0.9, but if we have a Hamming window, for example, 
then w = 1.30 and for a Hanning window w = 1.44. That means that applying a 
window increases the RBW which would indicate an impairment in resolution, but 
because the leakage is reduced, the overall resolution could still improve. However, 
if you don’t suffer from leakage, you should not use a window because it deteriorates 
the resolution bandwidth. 
8.4 
Heterodyne Analyzers 
It is not necessary to sample the signal to ﬁnd it’s amplitude spectrum, it is quite 
possible to design analog (non-sampling) hardware that produces StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue. That 
hardware is based on the following trigonometric identity: 
up per A cosi ne a lpha  dot upper B cosine beta equals StartFraction upper A upper B Over 2 EndFraction left parenthesis cosine left parenthesis alpha plus beta right parenthesis plus cosine left parenthesis alpha minus beta right parenthesis right parenthesis
up per A cosine alpha dot up
per B cosine beta equals StartFraction upper A upper B Over 2 EndFraction left parenthesis cosine left parenthesis alpha plus beta right parenthesis plus cosine left parenthesis alpha minus beta right parenthesis right parenthesis
If we multiply two trigonometric functions, we get two new ones: One with 
the ‘sum-of-angles’ and one with the ‘difference-of-angles’. That implies that if 
we multiply two sinusoidal signals with different frequencies, we will get two new 
sinusoidal signals, one with the sum frequency and one with the difference frequency, 
see Fig. 8.17. 
Multiplying two signals is sometimes called ‘mixing’, and there are ready-made 
components that do that, for example, the AD633 circuit from Analog Devices. As a 
matter of fact, we only have to add a very narrow resonance ﬁlter and an AC voltage 
meter to the circuit in Fig. 8.17 to get a spectrum analyzer.
Fig. 8.17 ‘Mixing’ two signals produces the sum and difference frequencies 

8.4 Heterodyne Analyzers
171
Fig. 8.18 An analog spectrum analyzer (a ‘heterodyne’ analyzer) 
In Fig. 8.18, x(t) is the signal we want to analyze (i.e., ﬁnd the magnitude of its 
Fourier transform) and ‘lo’ is short for ‘local oscillator’. In Fig. 8.18, the signal y(t) 
is 
StartLayo ut 1st Row y left parenthesis t right parenthesis equals StartFraction 2 dot upper A Over 2 EndFraction left parenthesis cosine left parenthesis omega Subscript lo Baseline plus omega Subscript x Baseline right parenthesis t plus cosine left parenthesis omega Subscript lo Baseline minus omega Subscript x Baseline right parenthesis t right parenthesis equals 2nd Row upper A cosine left parenthesis omega Subscript lo Baseline plus omega Subscript x Baseline right parenthesis t plus upper A cosine left parenthesis omega Subscript lo Baseline minus omega Subscript x Baseline right parenthesis t EndLayout
St
artLayout  1st Ro w y left p arenthesis
 t  right p arenthe sis equals S tartFra
ction 2 dot upper A Over 2 EndFraction left parenthesis cosine left parenthesis omega Subscript lo Baseline plus omega Subscript x Baseline right parenthesis t plus cosine left parenthesis omega Subscript lo Baseline minus omega Subscript x Baseline right parenthesis t right parenthesis equals 2nd Row upper A cosine left parenthesis omega Subscript lo Baseline plus omega Subscript x Baseline right parenthesis t plus upper A cosine left parenthesis omega Subscript lo Baseline minus omega Subscript x Baseline right parenthesis t EndLayout
Next, we sweep the local oscillator’s frequency; we start on ω0 and sweep contin-
uously up to ω0 + ωbw. (‘bw’ is short for ‘bandwidth’.) Also remember that the 
narrow resonance ﬁlter only allows signals with the exact frequency ω0 to pass. That 
means that u(t) /= 0 only if ωlo + ωx = ω0, or if  ωlo − ωx = ω0, i.e., if 
Star tLayou t 1s t Row  Sum term c olon omeg
a Subscript lo Baseline plus omega Subscript x Baseline equals omega 0 right double arrow omega Subscript lo Baseline equals omega 0 minus omega Subscript x Baseline EndLayout
StartLayout  1st R ow D iffer ence term c olon omeg
a Subscript lo Baseline minus omega Subscript x Baseline equals omega 0 right double arrow omega Subscript lo Baseline equals omega 0 plus omega Subscript x Baseline EndLayout
Since the local oscillator’s frequency starts on ω0 (and sweeps upward), the condi-
tion ωlo = ω0 − ωx will never happen; the resonance ﬁlter will always cancel the 
sum signal in Eq. (8.5). 
The difference term, however, will pass the resonance ﬁlter if only ωlo = ω0 
+ ωx < ω0 + ωbw, i.e., if ωx < ωbw; the signal x(t) must be within the analyzer’s 
bandwidth. When ωlo = ω0 + ωx, then u(t) = Acosω0t, and the ACV meter will 
register its amplitude (or rms value). For all other frequencies, the ACV will read 
0 V.  
So, we sweep the local oscillator’s frequency from ω0 to ω0 + ωbw and read the 
ACV. Figure 8.19 illustrates the ACV reading as a function of the local oscillator’s 
frequency.
All we need to do is to rescale the frequency axis and we have the magnitude of the 
Fourier transform of x(t). (Even better since we don’t have the ½ factor on the vertical 
scale as the Fourier transform does.) This kind of frequency analyzers are called 
heterodyne analyzers and more expensive oscilloscopes have built-in heterodyne 
analyzers.

172
8
Spectrum Analyzers
Fig. 8.19 The ACV reading as a function of the local oscillator frequency
The advantage of heterodyne analyzers is that they don’t sample, so they are not 
limited by the sampling theorem (no aliasing); heterodyne analyzers typically have 
much higher bandwidths than FFT analyzers. 
8.5 
Solved Problems 
Problem 8.1a A 500 Hz sine signal is sampled 256 times at a sampling rate of 5 kS/ 
s. Find the relative sizes of the six largest peaks in the FFT spectrum (for k < 128). 
Problem 8.1b How would the spectrum change if the sampling rate is changed to 
5.12 kS/s? 
Solution The frequency resolution is ∆f = 5000/256 = 19.53 Hz, and the 500 Hz 
sine corresponds to a frequency k = 500/19.53 = 25.6. 
That means that the ‘biggest’ peaks will be 26, 25, 27, 24, 28, and 23, in that 
order. The ‘26 peak’ is only 0.4π from the sinc maximum, so its relative size will be 
Channel 26 c olon  StartFraction sine 0.4 normal pi Over 0.4 normal pi EndFraction equals 0.76
Chann el 26 colon StartFraction sine 0.4 normal pi Over 0.4 normal pi EndFraction equals 0.76
Channel 25 is 0.6π from the sinc maximum, and for the following channels we 
add one π for each channel: 
Channel 25 c olon  StartFraction sine 0.6 normal pi Over 0.6 normal pi EndFraction equals 0.50 Channel 27 colon StartFraction sine 1.4 normal pi Over 1.4 normal pi EndFraction equals 0.22
Chann el 25 
colon St artF ract ion sine 0.6 normal pi Over 0.6 normal pi EndFraction equals 0.50 Channel 27 colon StartFraction sine 1.4 normal pi Over 1.4 normal pi EndFraction equals 0.22
Chann el 25 colon StartFraction sine 0.6 normal pi Over 0.6 normal pi EndFraction equals 0.50 Channel 27 colon StartFraction sine 1.4 normal pi Over 1.4 normal pi EndFraction equals 0.22
Channel 24 c olon  StartFraction sine 1.6 normal pi Over 1.6 normal pi EndFraction equals 0.19 Channel 28 colon StartFraction sine 2.4 normal pi Over 2.4 normal pi EndFraction equals 0.13
Chann el 24 
colon St artF ract ion sine 1.6 normal pi Over 1.6 normal pi EndFraction equals 0.19 Channel 28 colon StartFraction sine 2.4 normal pi Over 2.4 normal pi EndFraction equals 0.13
Chann el 24 colon StartFraction sine 1.6 normal pi Over 1.6 normal pi EndFraction equals 0.19 Channel 28 colon StartFraction sine 2.4 normal pi Over 2.4 normal pi EndFraction equals 0.13
Channel 23 c olon  StartFraction sine 2.6 normal pi Over 2.6 normal pi EndFraction equals 0.12
Chann el 23 colon StartFraction sine 2.6 normal pi Over 2.6 normal pi EndFraction equals 0.12

8.5 Solved Problems
173
In Fig. 8.20, we have plotted these six peaks together with the sinc function and 
in Fig. 8.21, we have plotted the real FFT spectrum for the sampled 500 Hz signal. 
If we compare Figs. 8.20 and 8.21, we can see that our prediction in Fig. 8.20 is 
correct. 
If we change the sampling rate to 5.12 kS/s, then ∆f = 5120/256 = 20 Hz exactly, 
and the 500 Hz sine corresponds to k = 500/20 = 25. That would give a single peak 
at k = 25 in the FFT spectrum, see Fig. 8.22.
Problem 8.2 Figure 8.23 illustrates the FFT spectrum of some unknown signal that 
was sampled at 10 kS/s and 100 samples were taken. What can you say about the 
signal?
Solution The spectrum is perfectly symmetric around k = 20.5; the signal that was 
sampled was a sinusoidal signal with frequency f = 20.5·∆f = 20.5·10,000/100 = 
2050 Hz.
Fig. 8.20 Predicting the six biggest peaks in the FFT spectrum 
Fig. 8.21 The real spectrum (using the fft command in MATLAB) 

174
8
Spectrum Analyzers
Fig. 8.22 FFT spectrum if the sampling rate is changed to 5.12 kS/s
Fig. 8.23 FFT spectrum of unknown signal
Problem 8.3 What is the resolution bandwidth of the FFT analyzer in Problem 8.2? 
What would the resolution bandwidth be if we applied a Hamming window to the 
data? 
Solution ∆f = 10,000/100 = 100 Hz, so RBW = 0.9·100 = 90 Hz. If we apply a 
Hamming window, RBW is increased by a factor of 1.30: RBW = 90·1.30 = 117 Hz.

Chapter 9 
Analog Filters 
Abstract A ﬁlter is used to discriminate unwanted signals in a complex measure-
ment signal. This chapter ﬁrst introduces passive ﬁlters (RCL ﬁlters) of ﬁrst and 
second order. Next, biquad ﬁlters, switched capacitor ﬁlters, and state-variable 
ﬁlters are introduced. The quality factor is deﬁned (the Q factor) and different ﬁlter 
characteristics and ﬁlter models (Butterworth, Chebyshev, and elliptic models) are 
illustrated. Analog ﬁlters can be implemented using so-called Sallen–Key links. 
Section 9.6 demonstrates how a given ﬁlter characteristic can be transformed into 
any other ﬁlter characteristic. To process the signal in time space, it is necessary to 
introduce a mathematical operation called convolution (Sect. 9.7). Like transforms, 
convolution is usually considered to be hard to grasp by students, but this chapter 
emphasizes the understanding of convolution by using graphical examples. 
9.1 
Introduction 
By ‘analog’ ﬁlters we mean ﬁlters that can be implemented in hardware, using analog 
electronics. (We will treat ‘digital’ ﬁlters in Chap. 10.) Filter theory depends heavily 
on the transform theory that we presented in Chap. 7, like Bode plots (Sect. 7.3) and 
pole-zero diagrams. 
9.2 
First-Order Filters 
9.2.1 
Passive Filters 
A ﬁrst-order passive ﬁlter is a simple voltage division between two impedances, see 
Fig. 9.1. 
The impedances are either real or imaginary (they could be complex, but we limit 
the presentation here to non-complex impedances). The transfer function is simple 
enough:
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_9 
175

176
9
Analog Filters
Start L
ayout 1st Row 1st Column y left parenthesis t right parenthesis equals 2nd Column StartFraction upper Z 2 Over upper Z 1 plus upper Z 2 EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction upper Z 2 Over upper Z 1 plus upper Z 2 EndFraction upper X left parenthesis omega right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction upper Z 2 Over upper Z 1 plus upper Z 2 EndFraction EndLayout
Sta rtLay
out 1st Row 1st
 Column y left parenthesis t right parenthesis equals 2nd Column StartFraction upper Z 2 Over upper Z 1 plus upper Z 2 EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction upper Z 2 Over upper Z 1 plus upper Z 2 EndFraction upper X left parenthesis omega right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction upper Z 2 Over upper Z 1 plus upper Z 2 EndFraction EndLayout
Sta rtLay
ou t 1s
t Row 1st Column y left parenthesis t right parenthesis equals 2nd Column StartFraction upper Z 2 Over upper Z 1 plus upper Z 2 EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction upper Z 2 Over upper Z 1 plus upper Z 2 EndFraction upper X left parenthesis omega right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction upper Z 2 Over upper Z 1 plus upper Z 2 EndFraction EndLayout
St artLa
yout 1st Row 1st Column y left parenthesis t right parenthesis equals 2nd Column StartFraction upper Z 2 Over upper Z 1 plus upper Z 2 EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction upper Z 2 Over upper Z 1 plus upper Z 2 EndFraction upper X left parenthesis omega right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction upper Z 2 Over upper Z 1 plus upper Z 2 EndFraction EndLayout
Sta rtLay
out 1st Row 1st Column y left parenthesis t right parenthesis equals 2nd Column StartFraction upper Z 2 Over upper Z 1 plus upper Z 2 EndFraction x left parenthesis t right parenthesis right double arrow upper Y left parenthesis omega right parenthesis equals StartFraction upper Z 2 Over upper Z 1 plus upper Z 2 EndFraction upper X left parenthesis omega right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper H left parenthesis omega right parenthesis equals StartFraction upper Y left parenthesis omega right parenthesis Over upper X left parenthesis omega right parenthesis EndFraction equals StartFraction upper Z 2 Over upper Z 1 plus upper Z 2 EndFraction EndLayout
In Example 7.7, we illustrated the case where Z1 = R and Z2 = 1/jωC: 
upper H
 left parenthesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction right double arrow upper H left parenthesis s right parenthesis equals StartFraction 1 Over 1 plus s upper R upper C EndFraction
up per H l eft paren
thesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction right double arrow upper H left parenthesis s right parenthesis equals StartFraction 1 Over 1 plus s upper R upper C EndFraction
up per H 
left parenthesis omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction right double arrow upper H left parenthesis s right parenthesis equals StartFraction 1 Over 1 plus s upper R upper C EndFraction
This is a lowpass system with a pole in s e quals negative 1 divided by upper R upper C. By replacing Z1 and Z2 in 
Eq. (9.1) with other combinations of R, jωL or 1/jωC, we can get highpass ﬁlters too. 
The ﬁlter in Fig. 9.1 has a disadvantage; if it is cascaded with a second ﬁlter 
module, its output impedance will be connected in parallel with the next stage’s 
input impedance and that might change the characteristics of the ﬁlter. This is easily 
avoided by inserting an op amp as a voltage follower, see Fig. 9.2, and once we 
have an op amp, we might as well take advantage of it and use it as a non-inverting 
ampliﬁer to add an arbitrary ampliﬁcation, see Fig. 9.3. Filters with op amps are 
called ‘active’ ﬁlters. 
Fig. 9.1 First-order ﬁlter 
Fig. 9.2 First-order ﬁlter 
with voltage follower 
Fig. 9.3 First-order ﬁlter 
with ampliﬁcation (1 + R2/ 
R1)

9.3 Second-Order Filters
177
9.3 
Second-Order Filters 
9.3.1 
‘Biquad’ 
The general expression for a second-order ﬁlter is 
upper H left parenthesis s right parenthesis equals StartFraction upper N left parenthesis s right parenthesis Over upper D left parenthesis s right parenthesis EndFraction equals StartFraction b 2 s squared plus b 1 s plus b 0 Over s squared plus a 1 s plus a 0 EndFraction
upper H left  paren thesis s right parenthesis equals StartFraction upper N left parenthesis s right parenthesis Over upper D left parenthesis s right parenthesis EndFraction equals StartFraction b 2 s squared plus b 1 s plus b 0 Over s squared plus a 1 s plus a 0 EndFraction
up er H l eft p
arenthesis s right parenthesis equals StartFraction upper N left parenthesis s right parenthesis Over upper D left parenthesis s right parenthesis EndFraction equals StartFraction b 2 s squared plus b 1 s plus b 0 Over s squared plus a 1 s plus a 0 EndFraction
We know from Sect. 7.4 that the roots of the denominator polynomial represent 
the system’s singular points (the ‘poles’) and they determine the system’s resonance 
frequencies. If the ﬁlter in Eq. (9.3) has the poles s e quals  negative sigma Subscript p Baseline plus or minus j omega Subscript p Baseline (remember that the 
poles must be in the left half-plane in s space), then the denominator polynomial is 
Start L
a
yo ut 1s
t 
Ro w 1st
 
C
o
lu mn up per D
 l
ef t par enthe
s
is  s right p arenth
es is eq
u
als 2nd Column left parenthesis s minus s Subscript p Baseline 1 Baseline right parenthesis left parenthesis s minus s Subscript p Baseline 2 Baseline right parenthesis equals left parenthesis s plus sigma Subscript p Baseline minus j omega Subscript p Baseline right parenthesis left parenthesis s plus sigma Subscript p Baseline plus j omega Subscript p Baseline right parenthesis 2nd Row 1st Column Blank 2nd Column equals s squared plus 2 sigma Subscript p Baseline s plus sigma Subscript p Superscript 2 Baseline plus omega Subscript p Superscript 2 EndLayout
/
StartR oot sig ma  Subscript p Superscript 2 Baseline plus omega Subscript p Superscript 2 Baseline EndRoot equals omega 0 is of course the poles’ distance to the origin, and we deﬁne the 
system’s ‘quality factor’ as 
up pe
r Q equals StartFraction omega 0 Over 2 dot StartAbsoluteValue sigma Subscript p Baseline EndAbsoluteValue EndFraction right double arrow StartAbsoluteValue sigma Subscript p Baseline EndAbsoluteValue equals StartFraction omega 0 Over 2 upper Q EndFraction
up p
er Q
 e q
uals
 S ta rtFraction omega 0 Over 2 dot StartAbsoluteValue sigma Subscript p Baseline EndAbsoluteValue EndFraction right double arrow StartAbsoluteValue sigma Subscript p Baseline EndAbsoluteValue equals StartFraction omega 0 Over 2 upper Q EndFraction
upp
er Q equals StartFraction omega 0 Over 2 dot StartAbsoluteValue sigma Subscript p Baseline EndAbsoluteValue EndFraction right double arrow StartAbsoluteValue sigma Subscript p Baseline EndAbsoluteValue equals StartFraction omega 0 Over 2 upper Q EndFraction
Hence, Q is the poles’ distance from the origin divided by their distance from the 
jω-axis, see Fig. 9.4.
This means that we can write the denominator polynomial in (9.3) as  
upper D le ft parenthesis s right parenthesis equals s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared
up pe r D l
e
ft parenthesis s right parenthesis equals s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared
Inserting that into Eq. (9.3) gives us 
upper H left parenthesis s right parenthesis equals StartFraction upper N left parenthesis s right parenthesis Over upper D left parenthesis s right parenthesis EndFraction equals StartStartFraction b 2 s squared plus b 1 s plus b 0 OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction
upper H left  paren thesis s right parenthesis equals StartFraction upper N left parenthesis s right parenthesis Over upper D left parenthesis s right parenthesis EndFraction equals StartStartFraction b 2 s squared plus b 1 s plus b 0 OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction
up er H left parenthesis s right parenthesis equals StartFraction upper N left parenthesis s right parenthesis Over upper D left parenthesis s right parenthesis EndFraction equals StartStartFraction b 2 s squared plus b 1 s plus b 0 OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction
up pe r H l
ef
t parenthesis s right parenthesis equals StartFraction upper N left parenthesis s right parenthesis Over upper D left parenthesis s right parenthesis EndFraction equals StartStartFraction b 2 s squared plus b 1 s plus b 0 OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction
In Eq. (9.7), we have a second-order polynomial in both the numerator and 
the denominator. Since we have two quadratic polynomials, the ﬁlter is sometimes 
referred to as ‘biquadratic’ or just ‘biquad’. It is the denominator polynomial (the 
poles) that determines the ﬁlter’s resonance frequency (ω0), but it is the numerator 
polynomial that determines the ﬁlter type (lowpass, highpass, bandpass, etc.). That 
gives us three important special cases.

178
9
Analog Filters
Fig. 9.4 Deﬁning Q and ω0
9.3.2 
Lowpass: b 2  e qua ls  b 1 equals 0
With b2 = b1 = 0 we get the transfer function 
upper H
 left parenthesis s right parenthesis equals StartStartFraction b 0 OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue b 0 EndAbsoluteValue Over StartRoot left parenthesis StartFraction omega 0 Over upper Q EndFraction omega right parenthesis squared plus left parenthesis omega 0 squared minus omega squared right parenthesis squared EndRoot EndFraction
upp er H left parenthesis s right parenthesis equals StartStartFraction b 0 OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue b 0 EndAbsoluteValue Over StartRoot left parenthesis StartFraction omega 0 Over upper Q EndFraction omega right parenthesis squared plus left parenthesis omega 0 squared minus omega squared right parenthesis squared EndRoot EndFraction
up pe r H l
ef
t parenthes
is s right parenthesis equals StartStartFraction b 0 OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue b 0 EndAbsoluteValue Over StartRoot left parenthesis StartFraction omega 0 Over upper Q EndFraction omega right parenthesis squared plus left parenthesis omega 0 squared minus omega squared right parenthesis squared EndRoot EndFraction
/u
pper H left parenthesis s right parenthesis equals StartStartFraction b 0 OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue b 0 EndAbsoluteValue Over StartRoot left parenthesis StartFraction omega 0 Over upper Q EndFraction omega right parenthesis squared plus left parenthesis omega 0 squared minus omega squared right parenthesis squared EndRoot EndFraction
up p
er 
H
 
lef
t parenth
esis s right parenthesis equals StartStartFraction b 0 OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue b 0 EndAbsoluteValue Over StartRoot left parenthesis StartFraction omega 0 Over upper Q EndFraction omega right parenthesis squared plus left parenthesis omega 0 squared minus omega squared right parenthesis squared EndRoot EndFraction
In Fig. 9.5, we have plotted StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValuefor b0 = ω0 = 1 for different quality factors. 
Notice ﬁrst the lowpass characteristics; the ampliﬁcation is =1 for low frequencies 
and =0 for high frequencies. Another thing to notice is the ‘resonance’ at ω = 1 
(= ω0) and that the peak gets higher and sharper with increasing Q. This is easy
Fig. 9.5 Ampliﬁcation versus frequency for different quality factors 

9.3 Second-Order Filters
179
Fig. 9.6 Ampliﬁcation diagram for bandpass ﬁlter 
to understand from Fig. 9.4; when Q increases, the pole’s distance to the jω-axis 
decreases and the closer the pole is to the jω-axis, the higher and sharper is the 
resonance peak (see also Fig. 7.32). The special case where Q = 0.707 (1 divided by StartRoot 2 EndRoot
√
1 divided by StartRoot 2 EndRoot) 
generates no ‘overshoot’ and the system response is ‘ﬂat’ (in the ‘passband’; we will 
later refer to this case as the ‘Butterworth ﬁlter’). For Q > 0.707, we have overshoots 
(the system is ‘underdamped’), for Q < 0.707 the system is ‘overdamped’ and the 
system is ‘critically damped’ if Q = 0.707. (See also Sect. 18.5.2 about step response 
of second-order systems.) 
9.3.3 
Bandpass: b 2  e qua ls  b 0 equals 0
With b2 = b0 = 0 we get the transfer function 
upper H
 left parenthesis s right parenthesis equals StartStartFraction b 1 s OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue b 1 omega EndAbsoluteValue Over StartRoot left parenthesis StartFraction omega 0 Over upper Q EndFraction omega right parenthesis squared plus left parenthesis omega 0 squared minus omega squared right parenthesis squared EndRoot EndFraction
upp er H left parenthesis s right parenthesis equals StartStartFraction b 1 s OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue b 1 omega EndAbsoluteValue Over StartRoot left parenthesis StartFraction omega 0 Over upper Q EndFraction omega right parenthesis squared plus left parenthesis omega 0 squared minus omega squared right parenthesis squared EndRoot EndFraction
up pe r H l
ef
t parenthes
is s right parenthesis equals StartStartFraction b 1 s OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue b 1 omega EndAbsoluteValue Over StartRoot left parenthesis StartFraction omega 0 Over upper Q EndFraction omega right parenthesis squared plus left parenthesis omega 0 squared minus omega squared right parenthesis squared EndRoot EndFraction
/u
pper H left parenthesis s right parenthesis equals StartStartFraction b 1 s OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue b 1 omega EndAbsoluteValue Over StartRoot left parenthesis StartFraction omega 0 Over upper Q EndFraction omega right parenthesis squared plus left parenthesis omega 0 squared minus omega squared right parenthesis squared EndRoot EndFraction
up p
er 
H
 
lef
t parenth
esis s right parenthesis equals StartStartFraction b 1 s OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue b 1 omega EndAbsoluteValue Over StartRoot left parenthesis StartFraction omega 0 Over upper Q EndFraction omega right parenthesis squared plus left parenthesis omega 0 squared minus omega squared right parenthesis squared EndRoot EndFraction
In Fig. 9.6, we have plotted StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValuefor b1 = ω0 = 1. Notice the bandpass char-
acteristics; the ampliﬁcation diagram goes to zero at both ends. The resonance peak 
is still at ω = ω0 = 1 and the peak gets higher and sharper with increasing Q. In a  
lowpass ﬁlter, you try to keep the peak as low as possible, but in a resonance ﬁlter, 
the sharpness of the peak is intentional; the sharper the resonance peak is, the more 
selective is the ﬁlter.

180
9
Analog Filters
Fig. 9.7 Ampliﬁcation diagram for a second-order highpass ﬁlter 
9.3.4 
Highpass: b 1  e qua ls  b 0 equals 0
With b1 = b0 = 0 we get the transfer function 
upper H
 left parenthesis s right parenthesis equals StartStartFraction b 2 s squared OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue b 2 omega squared EndAbsoluteValue Over StartRoot left parenthesis StartFraction omega 0 Over upper Q EndFraction omega right parenthesis squared plus left parenthesis omega 0 squared minus omega squared right parenthesis squared EndRoot EndFraction
up er H left parenthesis s right parenthesis equals StartStartFraction b 2 s squared OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue b 2 omega squared EndAbsoluteValue Over StartRoot left parenthesis StartFraction omega 0 Over upper Q EndFraction omega right parenthesis squared plus left parenthesis omega 0 squared minus omega squared right parenthesis squared EndRoot EndFraction
up pe r H l
ef
t parenthes
is s right parenthesis equals StartStartFraction b 2 s squared OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue b 2 omega squared EndAbsoluteValue Over StartRoot left parenthesis StartFraction omega 0 Over upper Q EndFraction omega right parenthesis squared plus left parenthesis omega 0 squared minus omega squared right parenthesis squared EndRoot EndFraction
/u
pper H left parenthesis s right parenthesis equals StartStartFraction b 2 s squared OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue b 2 omega squared EndAbsoluteValue Over StartRoot left parenthesis StartFraction omega 0 Over upper Q EndFraction omega right parenthesis squared plus left parenthesis omega 0 squared minus omega squared right parenthesis squared EndRoot EndFraction
up p
er 
H
 
lef
t parenth
esis s right parenthesis equals StartStartFraction b 2 s squared OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue b 2 omega squared EndAbsoluteValue Over StartRoot left parenthesis StartFraction omega 0 Over upper Q EndFraction omega right parenthesis squared plus left parenthesis omega 0 squared minus omega squared right parenthesis squared EndRoot EndFraction
In Fig. 9.7, we have plotted StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValuefor b2 = ω0 = 1. 
This is a highpass ﬁlter since ampliﬁcation =0 for low frequencies and =1 for  
high frequencies. 
9.4 
Implementations 
There are several different ways to implement analog ﬁlters in hardware and we will 
present the most common ones here. 
9.4.1 
The Double Integral Method 
If we have a highpass ﬁlter as in Eq. (9.10a), then (see Fig. 9.8)
Fig. 9.8 Second-order 
highpass ﬁlter 

9.4 Implementations
181
upper H
 left parenthesis s right parenthesis equals StartStartFraction b 2 s squared OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction equals StartFraction upper Y left parenthesis s right parenthesis Over upper X left parenthesis s right parenthesis EndFraction
upp er H left parenthesis s right parenthesis equals StartStartFraction b 2 s squared OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction equals StartFraction upper Y left parenthesis s right parenthesis Over upper X left parenthesis s right parenthesis EndFraction
up pe r H l
ef
t parenthesis s right parenthesis equals StartStartFraction b 2 s squared OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction equals StartFraction upper Y left parenthesis s right parenthesis Over upper X left parenthesis s right parenthesis EndFraction
up per 
H left parenthesis s right parenthesis equals StartStartFraction b 2 s squared OverOver s squared plus StartFraction omega 0 Over upper Q EndFraction s plus omega 0 squared EndEndFraction equals StartFraction upper Y left parenthesis s right parenthesis Over upper X left parenthesis s right parenthesis EndFraction
and s squared uper Y left parenthesis s right parenthesis plus StartFraction omega 0 Over upper Q EndFraction s upper Y left parenthesis s right parenthesis plus omega 0 squared upper Y left parenthesis s right parenthesis equals b 2 s squared upper X left parenthesis s right parenthesis
s squared uppe
r Y left parent hesis s right parenthesis plus StartFraction omega 0 Over upper Q EndFraction s upper Y left parenthesis s right parenthesis plus omega 0 squared upper Y left parenthesis s right parenthesis equals b 2 s squared upper X left parenthesis s right parenthesis. Next, we rearrange this expression as 
follows: 
StartLayout 1st Row 1st Column upper Y left parenthesis s right parenthesis plus 2nd Column StartFraction 1 Over s EndFraction StartFraction omega 0 Over upper Q EndFraction upper Y left parenthesis s right parenthesis plus StartFraction 1 Over s squared EndFraction omega 0 squared upper Y left parenthesis s right parenthesis equals b 2 upper X left parenthesis s right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper Y left parenthesis s right parenthesis equals b 2 upper X left parenthesis s right parenthesis minus StartFraction omega 0 Over s EndFraction StartFraction 1 Over upper Q EndFraction upper Y left parenthesis s right parenthesis minus StartFraction omega 0 squared Over s squared EndFraction upper Y left parenthesis s right parenthesis EndLayout
St
artLayout 1st Row 1st Column upper Y left parenthesis s right parenthesis plus 2nd Column StartFraction 1 Over s EndFraction StartFraction omega 0 Over upper Q EndFraction upper Y left parenthesis s right parenthesis plus StartFraction 1 Over s squared EndFraction omega 0 squared upper Y left parenthesis s right parenthesis equals b 2 upper X left parenthesis s right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper Y left parenthesis s right parenthesis equals b 2 upper X left parenthesis s right parenthesis minus StartFraction omega 0 Over s EndFraction StartFraction 1 Over upper Q EndFraction upper Y left parenthesis s right parenthesis minus StartFraction omega 0 squared Over s squared EndFraction upper Y left parenthesis s right parenthesis EndLayout
St artLayou t 1st Row 1st Column upper Y left parenthesis s right parenthesis plus 2nd Column StartFraction 1 Over s EndFraction StartFraction omega 0 Over upper Q EndFraction upper Y left parenthesis s right parenthesis plus StartFraction 1 Over s squared EndFraction omega 0 squared upper Y left parenthesis s right parenthesis equals b 2 upper X left parenthesis s right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper Y left parenthesis s right parenthesis equals b 2 upper X left parenthesis s right parenthesis minus StartFraction omega 0 Over s EndFraction StartFraction 1 Over upper Q EndFraction upper Y left parenthesis s right parenthesis minus StartFraction omega 0 squared Over s squared EndFraction upper Y left parenthesis s right parenthesis EndLayout
Sta rtL
ayout 1st Row  1st
 C olumn upper Y left parenthesis s right parenthesis plus 2nd Column StartFraction 1 Over s EndFraction StartFraction omega 0 Over upper Q EndFraction upper Y left parenthesis s right parenthesis plus StartFraction 1 Over s squared EndFraction omega 0 squared upper Y left parenthesis s right parenthesis equals b 2 upper X left parenthesis s right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper Y left parenthesis s right parenthesis equals b 2 upper X left parenthesis s right parenthesis minus StartFraction omega 0 Over s EndFraction StartFraction 1 Over upper Q EndFraction upper Y left parenthesis s right parenthesis minus StartFraction omega 0 squared Over s squared EndFraction upper Y left parenthesis s right parenthesis EndLayout
St
artLayout 1st Row 1st Column upper Y left parenthesis s right parenthesis plus 2nd Column StartFraction 1 Over s EndFraction StartFraction omega 0 Over upper Q EndFraction upper Y left parenthesis s right parenthesis plus StartFraction 1 Over s squared EndFraction omega 0 squared upper Y left parenthesis s right parenthesis equals b 2 upper X left parenthesis s right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper Y left parenthesis s right parenthesis equals b 2 upper X left parenthesis s right parenthesis minus StartFraction omega 0 Over s EndFraction StartFraction 1 Over upper Q EndFraction upper Y left parenthesis s right parenthesis minus StartFraction omega 0 squared Over s squared EndFraction upper Y left parenthesis s right parenthesis EndLayout
StartLayout 1
st Row 1st Column upper Y left parenthesis s right parenthesis plus 2nd Column StartFraction 1 Over s EndFraction StartFraction omega 0 Over upper Q EndFraction upper Y left parenthesis s right parenthesis plus StartFraction 1 Over s squared EndFraction omega 0 squared upper Y left parenthesis s right parenthesis equals b 2 upper X left parenthesis s right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper Y left parenthesis s right parenthesis equals b 2 upper X left parenthesis s right parenthesis minus StartFraction omega 0 Over s EndFraction StartFraction 1 Over upper Q EndFraction upper Y left parenthesis s right parenthesis minus StartFraction omega 0 squared Over s squared EndFraction upper Y left parenthesis s right parenthesis EndLayout
Sta rtLay
out 1st Row 1st Column upper Y left parenthesis s right parenthesis plus 2nd Column StartFraction 1 Over s EndFraction StartFraction omega 0 Over upper Q EndFraction upper Y left parenthesis s right parenthesis plus StartFraction 1 Over s squared EndFraction omega 0 squared upper Y left parenthesis s right parenthesis equals b 2 upper X left parenthesis s right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper Y left parenthesis s right parenthesis equals b 2 upper X left parenthesis s right parenthesis minus StartFraction omega 0 Over s EndFraction StartFraction 1 Over upper Q EndFraction upper Y left parenthesis s right parenthesis minus StartFraction omega 0 squared Over s squared EndFraction upper Y left parenthesis s right parenthesis EndLayout
In Problem 7.7, we learned that if the function f (t) has the Laplace transform F(s), 
then the Laplace transform of the integral of f (t) is  F(s)/s. Hence, if we integrate 
the function y left parenthesis t right parenthesisusing an integrator with time constant 1/ω0 (see Problem 9.1), the 
output is omega 0 upper Y left parenthesis s right parenthesis divided by s and if we integrate it again, the output will be ome
ga 0 squared upper Y left parenthesis s right parenthesis divided by s squared. That 
means that we can represent the system in Eq. (9.11) with the block model in Fig. 9.9. 
Next, we rearrange the blocks in Fig. 9.9 as illustrated in Fig. 9.10. The highpass 
output signal is the signal right after the summator in Fig. 9.10. However, since an 
integration corresponds to a division by s in frequency space, the output after the ﬁrst 
integrator is a bandpass ﬁlter (Eq. (9.9)) and the output after the second integrator is 
a lowpass ﬁlter (Eq. (9.8)); with a single design we can get three different ﬁlters!
The derivatives of a signal are called the ‘state variables’ of the signal and for that 
reason the ﬁlter(s) in Fig. 9.10 is called a ‘state-variable’ ﬁlter. Figure 9.11 illustrates 
how it is implemented with only three op amps.
This implementation is usually referred to as the ‘KHN biquad’ (from Kerwin– 
Huelsman–Newcomb) and you only need two design equations: 
ome ga  0 equals StartFraction 1 Over upper R upper C EndFraction StartFraction upper R 3 Over upper R 2 EndFraction equals 2 upper Q minus 1
ome
ga 0 equals StartFraction 1 Over upper R upper C EndFraction StartFraction upper R 3 Over upper R 2 EndFraction equals 2 upper Q minus 1
ome
ga 0 equ
als StartFraction 1 Over upper R upper C EndFraction StartFraction upper R 3 Over upper R 2 EndFraction equals 2 upper Q minus 1
(The R1 resistors’ value doesn’t matter; they are only part of the summation 
circuit.) Another usual name for this ﬁlter is ‘UAF’, which stands for Universal 
Active Filter. The UAF42 circuit from Burr-Brown is an example of such a circuit.
Fig. 9.9 Block diagram of Eq. (9.11) 

182
9
Analog Filters
Fig. 9.10 Rearranging the blocks; a ‘state-variable’ ﬁlter
Fig. 9.11 A state-variable ﬁlter can be implemented with only three op amps
Some ﬁnal comments about the quality factor Q. For a lowpass or a highpass ﬁlter, 
the Q number determines the ‘steepness’ of the ﬁlter, i.e., the width of the transition 
area from the passband to the stopband. For a bandpass ﬁlter, Q determines the 
‘selectiveness’, i.e., how narrow it is: 
up pe
r Q equals StartFraction omega 0 Over omega Subscript u Baseline minus omega Subscript l Baseline EndFraction
up er Q 
equals StartFraction omega 0 Over omega Subscript u Baseline minus omega Subscript l Baseline EndFraction
where ωu and ωl are the ‘3 dB’ frequencies (‘upper’ and ‘lower’, respectively), i.e., 
where the ampliﬁcation has decreased by 3 dB on either side of the resonance peak. 
9.4.2 
The Sallen–Key Link 
The ﬁrst-order lowpass RC ﬁlter is the most basic of all ﬁlters (see Example 7.7). By 
adding a voltage follower, it doesn’t impose any load on the next step, and if we are

9.4 Implementations
183
adding a voltage follower, we might as well turn that into a non-inverting ampliﬁer; 
that turns our ﬁlter into a ﬁrst-order ‘Sallen–Key’ link, see Fig. 9.12. 
The transfer function is still 1/(1 + jωRC), see Example 7.7, and the cutoff 
frequency (where the ampliﬁcation is down by 3 dB) is 
StartAbso
luteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction 1 Over StartRoot 1 plus left parenthesis omega upper R upper C right parenthesis squared EndRoot EndFraction equals StartFraction 1 Over StartRoot 2 EndRoot EndFraction right double arrow omega Subscript c Baseline equals 1 divided by upper R upper C
√
St artAbsolu te Value upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction 1 Over StartRoot 1 plus left parenthesis omega upper R upper C right parenthesis squared EndRoot EndFraction equals StartFraction 1 Over StartRoot 2 EndRoot EndFraction right double arrow omega Subscript c Baseline equals 1 divided by upper R upper C
√
St
artAb solute
Value upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction 1 Over StartRoot 1 plus left parenthesis omega upper R upper C right parenthesis squared EndRoot EndFraction equals StartFraction 1 Over StartRoot 2 EndRoot EndFraction right double arrow omega Subscript c Baseline equals 1 divided by upper R upper C
and the DC ampliﬁcation can be adjusted arbitrarily with the R1 and R2 resistors (1 
+ R2/R1). We can easily change it into a highpass ﬁlter by changing places with R 
and C. 
Figure 9.13 illustrates a second-order lowpass Sallen–Key link. 
The transfer function is (see Problem 9.3): 
upper H
 left parenthesis s right parenthesis equals StartStartFraction 1 divided by upper R 1 upper R 2 upper C 1 upper C 2 OverOver s squared plus StartFraction upper R 1 plus upper R 2 Over upper R 1 upper R 2 upper C 1 EndFraction s plus 1 divided by upper R 1 upper R 2 upper C 1 upper C 2 EndEndFraction
upp er  H left parenthesis s right parenthesis equals StartStartFraction 1 divided by upper R 1 upper R 2 upper C 1 upper C 2 OverOver s squared plus StartFraction upper R 1 plus upper R 2 Over upper R 1 upper R 2 upper C 1 EndFraction s plus 1 divided by upper R 1 upper R 2 upper C 1 upper C 2 EndEndFraction
upper H  l eft parenthes
is s right parenthesis equals StartStartFraction 1 divided by upper R 1 upper R 2 upper C 1 upper C 2 OverOver s squared plus StartFraction upper R 1 plus upper R 2 Over upper R 1 upper R 2 upper C 1 EndFraction s plus 1 divided by upper R 1 upper R 2 upper C 1 upper C 2 EndEndFraction
or, if we set R1 = R2 = R, then 
upper H
 left parenthesis s right parenthesis equals StartStartFraction 1 divided by upper R squared upper C Subscript 1 Baseline upper C 2 OverOver s squared plus StartFraction 2 Over upper R upper C 1 EndFraction s plus 1 divided by upper R squared upper C 1 upper C 2 EndEndFraction
up er  H left parenthesis s right parenthesis equals StartStartFraction 1 divided by upper R squared upper C Subscript 1 Baseline upper C 2 OverOver s squared plus StartFraction 2 Over upper R upper C 1 EndFraction s plus 1 divided by upper R squared upper C 1 upper C 2 EndEndFraction
uppe r H left pare
nthesis s right parenthesis equals StartStartFraction 1 divided by upper R squared upper C Subscript 1 Baseline upper C 2 OverOver s squared plus StartFraction 2 Over upper R upper C 1 EndFraction s plus 1 divided by upper R squared upper C 1 upper C 2 EndEndFraction
Comparing with Eq. (9.7), we can see that 
StartFraction 2 Over upper R upper C 1 EndFraction equals StartFraction omega 0 Over upper Q EndFraction
Star
tFraction 2 Over upper R upper C 1 EndFraction equals StartFraction omega 0 Over upper Q EndFraction
St
artFraction 2 Over upper R upper C 1 EndFraction equals StartFraction omega 0 Over upper Q EndFraction
Fig. 9.12 First-order 
Sallen–Key link 
Fig. 9.13 Second-order 
Sallen–Key link 

184
9
Analog Filters
and 
ome
ga  
0 squared equals StartFraction 1 Over upper R squared upper C 1 upper C 2 EndFraction
omega 0
 squared equals StartFraction 1 Over upper R squared upper C 1 upper C 2 EndFraction
Using Eqs. (9.17) and (9.18), we can implement any ω0 and Q values we want to, 
by selecting the right R, C1 and C2 values. Also, by changing places with resistors 
and capacitors in Fig. 9.13, we get a highpass ﬁlter. 
9.4.3 
Switched Capacitors 
As we have seen above, both the biquad and the Sallen–Key ﬁlters depend on passive 
components like resistors and capacitors. When implemented in integrated circuits, 
silicon area saving is paramount; capacitors don’t require much area, but resistors do. 
For that reason, a technique to implement resistors using a capacitor has been devel-
oped. This technique is called the ‘switched capacitor’ technique and it replaces a 
resistor with a capacitor and two switches (the switches are of course two transistors). 
Figure 9.14 illustrates the switched capacitor resistor. 
The switches are controlled by two clock signals that are 180° out of phase; when 
one switch is closed, the other one is open. The clock signal’s period is T = 1/f 0 and 
the duty cycle is 50%. When switch S1 is closed, the capacitor is charged by U1, and 
when S2 is closed, the capacitor is charged (or discharged) by U2. Figures 9.15 and 
9.16 illustrate the two situations. 
Hence, over one clock period T, the change in charge over the capacitor is ∆Q = 
C(U1 – U2). By deﬁnition, current is the change of charge per time unit; the average 
current between the end points during one period is
Fig. 9.14 A switched  
capacitor resistor 
Fig. 9.15 S1 is closed

9.4 Implementations
185
Fig. 9.16 S2 is closed
i e quals StartFraction normal upper Delta upper Q Over upper T EndFraction equals StartFraction upper C left parenthesis upper U 1 minus upper U 2 right parenthesis Over 1 divided by f 0 EndFraction right double arrow upper R equals StartFraction upper U 1 minus upper U 2 Over i EndFraction equals StartFraction 1 Over upper C f 0 EndFraction
i 
equals StartFraction normal upper Delta upper Q Over upper T EndFraction equals StartFraction upper C left parenthesis upper U 1 minus upper U 2 right parenthesis Over 1 divided by f 0 EndFraction right double arrow upper R equals StartFraction upper U 1 minus upper U 2 Over i EndFraction equals StartFraction 1 Over upper C f 0 EndFraction
i equ
als Start Fraction normal upper Delta upper Q Over upper T EndFraction equals StartFraction upper C left parenthesis upper U 1 minus upper U 2 right parenthesis Over 1 divided by f 0 EndFraction right double arrow upper R equals StartFraction upper U 1 minus upper U 2 Over i EndFraction equals StartFraction 1 Over upper C f 0 EndFraction
i
 e quals StartFraction normal upper Delta upper Q Over upper T EndFraction equals StartFraction upper C left parenthesis upper U 1 minus upper U 2 right parenthesis Over 1 divided by f 0 EndFraction right double arrow upper R equals StartFraction upper U 1 minus upper U 2 Over i EndFraction equals StartFraction 1 Over upper C f 0 EndFraction
i eq
uals StartFraction normal upper Delta upper Q Over upper T EndFraction equals StartFraction upper C left parenthesis upper U 1 minus upper U 2 right parenthesis Over 1 divided by f 0 EndFraction right double arrow upper R equals StartFraction upper U 1 minus upper U 2 Over i EndFraction equals StartFraction 1 Over upper C f 0 EndFraction
From Eq. (9.19), we can see that this circuit corresponds to a resistance between 
the end points that depends on the capacitor and the clock frequency. By using 
a switched capacitor as the resistance in a ﬁlter design, we can control the ﬁlter 
parameters with the clock frequency. MAX7400 is an example of an integrated ﬁlter 
that uses switched capacitors. 
9.4.4 
More About Passive Filters 
In Fig. 9.1, we only have two impedances, and that limits our range of ﬁlters to lowpass 
and highpass ﬁlters. If we introduce a third impedance, we can also design bandpass 
and bandstop ﬁlters (since they need to be second-order ﬁlters), see Fig. 9.17. 
For example, Fig. 9.18 illustrates a bandpass ﬁlter. The transfer function is 
StartL a
yout 1st Row 1st Column upper H left parenthesis s right parenthesis equals 2nd Column StartFraction upper X Subscript upper L Baseline divided by slash upper X Subscript upper C Baseline Over upper R plus upper X Subscript upper L Baseline divided by slash upper X Subscript upper C Baseline EndFraction equals StartStartFraction StartFraction s upper L dot 1 divided by s upper C Over s upper L plus 1 divided by s upper C EndFraction OverOver upper R plus StartFraction s upper L dot 1 divided by s upper C Over s upper L plus 1 divided by s upper C EndFraction EndEndFraction equals StartFraction s upper L dot 1 divided by s upper C Over s upper L upper R plus upper R divided by s upper C plus s upper L dot 1 divided by s upper C EndFraction 2nd Row 1st Column Blank 2nd Column equals StartFraction s upper L Over s squared upper L upper R upper C plus s upper L plus upper R EndFraction equals StartFraction s divided by upper R upper C Over s squared plus s divided by upper R upper C plus 1 divided by upper L upper C EndFraction EndLayout
St artLayout
 1
st Row 1st Column upper H left parenthesis s right parenthesis equals 2nd Column StartFraction upper X Subscript upper L Baseline divided by slash upper X Subscript upper C Baseline Over upper R plus upper X Subscript upper L Baseline divided by slash upper X Subscript upper C Baseline EndFraction equals StartStartFraction StartFraction s upper L dot 1 divided by s upper C Over s upper L plus 1 divided by s upper C EndFraction OverOver upper R plus StartFraction s upper L dot 1 divided by s upper C Over s upper L plus 1 divided by s upper C EndFraction EndEndFraction equals StartFraction s upper L dot 1 divided by s upper C Over s upper L upper R plus upper R divided by s upper C plus s upper L dot 1 divided by s upper C EndFraction 2nd Row 1st Column Blank 2nd Column equals StartFraction s upper L Over s squared upper L upper R upper C plus s upper L plus upper R EndFraction equals StartFraction s divided by upper R upper C Over s squared plus s divided by upper R upper C plus 1 divided by upper L upper C EndFraction EndLayout
StartLayout 1st Row 1st Column upper H left parenthesis s right parenthesis equals 2nd Column StartFraction upper X Subscript upper L Baseline divided by slash upper X Subscript upper C Baseline Over upper R plus upper X Subscript upper L Baseline divided by slash upper X Subscript upper C Baseline EndFraction equals StartStartFraction StartFraction s upper L dot 1 divided by s upper C Over s upper L plus 1 divided by s upper C EndFraction OverOver upper R plus StartFraction s upper L dot 1 divided by s upper C Over s upper L plus 1 divided by s upper C EndFraction EndEndFraction equals StartFraction s upper L dot 1 divided by s upper C Over s upper L upper R plus upper R divided by s upper C plus s upper L dot 1 divided by s upper C EndFraction 2nd Row 1st Column Blank 2nd Column equals StartFraction s upper L Over s squared upper L upper R upper C plus s upper L plus upper R EndFraction equals StartFraction s divided by upper R upper C Over s squared plus s divided by upper R upper C plus 1 divided by upper L upper C EndFraction EndLayout
St ar tLayout 1st Row 1st Column upper H left parenthesis s right parenthesis equals 2nd Column StartFraction upper X Subscript upper L Baseline divided by slash upper X Subscript upper C Baseline Over upper R plus upper X Subscript upper L Baseline divided by slash upper X Subscript upper C Baseline EndFraction equals StartStartFraction StartFraction s upper L dot 1 divided by s upper C Over s upper L plus 1 divided by s upper C EndFraction OverOver upper R plus StartFraction s upper L dot 1 divided by s upper C Over s upper L plus 1 divided by s upper C EndFraction EndEndFraction equals StartFraction s upper L dot 1 divided by s upper C Over s upper L upper R plus upper R divided by s upper C plus s upper L dot 1 divided by s upper C EndFraction 2nd Row 1st Column Blank 2nd Column equals StartFraction s upper L Over s squared upper L upper R upper C plus s upper L plus upper R EndFraction equals StartFraction s divided by upper R upper C Over s squared plus s divided by upper R upper C plus 1 divided by upper L upper C EndFraction EndLayout
StartLay
o
ut 1st Row 1st Column upper H left parenthesis s right parenthesis equals 2nd Column StartFraction upper X Subscript upper L Baseline divided by slash upper X Subscript upper C Baseline Over upper R plus upper X Subscript upper L Baseline divided by slash upper X Subscript upper C Baseline EndFraction equals StartStartFraction StartFraction s upper L dot 1 divided by s upper C Over s upper L plus 1 divided by s upper C EndFraction OverOver upper R plus StartFraction s upper L dot 1 divided by s upper C Over s upper L plus 1 divided by s upper C EndFraction EndEndFraction equals StartFraction s upper L dot 1 divided by s upper C Over s upper L upper R plus upper R divided by s upper C plus s upper L dot 1 divided by s upper C EndFraction 2nd Row 1st Column Blank 2nd Column equals StartFraction s upper L Over s squared upper L upper R upper C plus s upper L plus upper R EndFraction equals StartFraction s divided by upper R upper C Over s squared plus s divided by upper R upper C plus 1 divided by upper L upper C EndFraction EndLayout
Star tLayout  1st Row 1st
 
Column upper H left parenthesis s right parenthesis equals 2nd Column StartFraction upper X Subscript upper L Baseline divided by slash upper X Subscript upper C Baseline Over upper R plus upper X Subscript upper L Baseline divided by slash upper X Subscript upper C Baseline EndFraction equals StartStartFraction StartFraction s upper L dot 1 divided by s upper C Over s upper L plus 1 divided by s upper C EndFraction OverOver upper R plus StartFraction s upper L dot 1 divided by s upper C Over s upper L plus 1 divided by s upper C EndFraction EndEndFraction equals StartFraction s upper L dot 1 divided by s upper C Over s upper L upper R plus upper R divided by s upper C plus s upper L dot 1 divided by s upper C EndFraction 2nd Row 1st Column Blank 2nd Column equals StartFraction s upper L Over s squared upper L upper R upper C plus s upper L plus upper R EndFraction equals StartFraction s divided by upper R upper C Over s squared plus s divided by upper R upper C plus 1 divided by upper L upper C EndFraction EndLayout
StartL ayout  1st  
Row 1st Column upper H left parenthesis s right parenthesis equals 2nd Column StartFraction upper X Subscript upper L Baseline divided by slash upper X Subscript upper C Baseline Over upper R plus upper X Subscript upper L Baseline divided by slash upper X Subscript upper C Baseline EndFraction equals StartStartFraction StartFraction s upper L dot 1 divided by s upper C Over s upper L plus 1 divided by s upper C EndFraction OverOver upper R plus StartFraction s upper L dot 1 divided by s upper C Over s upper L plus 1 divided by s upper C EndFraction EndEndFraction equals StartFraction s upper L dot 1 divided by s upper C Over s upper L upper R plus upper R divided by s upper C plus s upper L dot 1 divided by s upper C EndFraction 2nd Row 1st Column Blank 2nd Column equals StartFraction s upper L Over s squared upper L upper R upper C plus s upper L plus upper R EndFraction equals StartFraction s divided by upper R upper C Over s squared plus s divided by upper R upper C plus 1 divided by upper L upper C EndFraction EndLayout
Sta rtLayou t 1st R
ow 1st Column upper H left parenthesis s right parenthesis equals 2nd Column StartFraction upper X Subscript upper L Baseline divided by slash upper X Subscript upper C Baseline Over upper R plus upper X Subscript upper L Baseline divided by slash upper X Subscript upper C Baseline EndFraction equals StartStartFraction StartFraction s upper L dot 1 divided by s upper C Over s upper L plus 1 divided by s upper C EndFraction OverOver upper R plus StartFraction s upper L dot 1 divided by s upper C Over s upper L plus 1 divided by s upper C EndFraction EndEndFraction equals StartFraction s upper L dot 1 divided by s upper C Over s upper L upper R plus upper R divided by s upper C plus s upper L dot 1 divided by s upper C EndFraction 2nd Row 1st Column Blank 2nd Column equals StartFraction s upper L Over s squared upper L upper R upper C plus s upper L plus upper R EndFraction equals StartFraction s divided by upper R upper C Over s squared plus s divided by upper R upper C plus 1 divided by upper L upper C EndFraction EndLayout
And according to Eq. (9.9), this is a bandpass ﬁlter with ome ga  0 equals 1 divided by StartRoot upper L upper C EndRoot
√
omega 0 equals 1 divided by StartRoot upper L upper C EndRoot and 
up per Q equals upper R StartRoot upper C divided by upper L EndRoot√upper Q equals upper R StartRoot upper C divided by upper L EndRoot. By changing places with R and the LC network in Fig. 9.18, we get a 
bandstop ﬁlter.
Fig. 9.17 With three impedances, we can create bandpass and bandstop ﬁlters 

186
9
Analog Filters
Fig. 9.18 A bandpass ﬁlter
9.4.5 
Special Cases 
A special case of bandstop ﬁlters is the ‘notch’ ﬁlter, see Fig. 7.22, that is designed 
to block just one single frequency. For example, in a physics lab, the power line 
frequency, 50 or 60 Hz, is omnipresent in measurements and it can be blocked with 
a passive second-order ﬁlter called the ‘Twin-T’ notch ﬁlter, see Fig. 9.19. This ﬁlter 
has a zero on the imaginary axis at ω = 1/RC. 
9.5 
Filter Models 
Equation (9.3) is the general expression for a second-order ﬁlter, and it can certainly 
be extended to an arbitrary order ﬁlter. The ﬁlter coefﬁcients (the ai and bi polynomial 
coefﬁcients) are optimized for certain conditions: 
In a ‘Butterworth’ ﬁlter, the ampliﬁcation diagram (in the Bode plot) is as ‘ﬂat’ as possible 
in the passband (no ‘ripple’). 
Chebyshev and Cauer ﬁlters are more selective (the transition area from passband to stopband 
is narrower) at the expense of some passband ripple. 
The Bessel ﬁlter is not that selective but has the advantage of a very linear phase diagram 
(which is what we need to minimize the signal distortion, see Sect. 7.3.1). 
We will give a brief presentation of the Butterworth, Chebyshev, and Cauer ﬁlters 
here. In the following presentation, we will only treat the lowpass ﬁlter types; in 
Sect. 9.6, we will show you how to transform a lowpass ﬁlter to any other ﬁlter type.
Fig. 9.19 The Twin-T notch 
ﬁlter 

9.5 Filter Models
187
9.5.1 
Butterworth 
A Butterworth ﬁlter is an ‘all-pole’ ﬁlter, i.e., no zeros, and all the poles are on a 
perfect circle (semi-circle) in the s plane, see Fig. 9.20. If the ﬁlter order is odd, there 
is a pole on the negative σ-axis and the angle between the poles is π/n, where n is the 
ﬁlter order. In a Butterworth ﬁlter, the numerator polynomial N(s) = 1. Comparing 
Fig. 9.20 with Fig. 9.4, we can see that
Star
tA bsoluteValu e sigma Subscript p Baseline EndAbsoluteValue equals omega 0 cosine normal pi divided by 4 equals omega 0 divided by StartRoot 2 EndRoot
√
StartAbsoluteValue sigma Subscript p Baseline EndAbsoluteValue equals omega 0 cosine normal pi divided by 4 equals omega 0 divided by StartRoot 2 EndRoot. Equation (9.5) 
gives us Butterworth ﬁlter’s quality factor: 
up p
er Q equals StartFraction omega 0 Over 2 dot omega 0 divided by StartRoot 2 EndRoot EndFraction equals StartFraction 1 Over StartRoot 2 EndRoot EndFraction almost equals 0.707
up per Q equals StartFraction omega 0 Over 2 dot omega 0 divided by StartRoot 2 EndRoot EndFraction equals StartFraction 1 Over StartRoot 2 EndRoot EndFraction almost equals 0.707
√
up
pe r Q equals StartFraction omega 0 Over 2 dot omega 0 divided by StartRoot 2 EndRoot EndFraction equals StartFraction 1 Over StartRoot 2 EndRoot EndFraction almost equals 0.707
√
up
per Q e
quals StartFraction omega 0 Over 2 dot omega 0 divided by StartRoot 2 EndRoot EndFraction equals StartFraction 1 Over StartRoot 2 EndRoot EndFraction almost equals 0.707
Comparing this with Fig. 9.5, we can see that this represents an ampliﬁcation 
diagram with no overshoot (‘critically’ damped); the ampliﬁcation diagram is ‘maxi-
mally ﬂat’ in the passband, which is the hallmark of all Butterworth ﬁlters. This is a 
consequence of the fact that the poles are on a circle and the circle radius determines 
the resonance frequency ω0. 
In Table 9.1, you can see the denominator polynomials for all Butterworth ﬁlters 
up to the seventh order for ω0 = 1. (In Sect. 9.6 we will show you how to transfer 
them to other ω0s.)
Figure 9.21 illustrates the ampliﬁcation diagram for Butterworth ﬁlters of different 
orders; the higher the order, the more selective is the ﬁlter. Notice in Fig. 9.21 that 
the ampliﬁcation diagrams have no ‘ripple’; it declines monotonically.
Notice in Table  9.1 that higher order ﬁlters are written as a product of ﬁrst- and 
second-order ﬁlters; they are typically implemented by cascading ﬁrst- and second-
order ﬁlters.
(a)
(b) 
Fig. 9.20 a Second-order Butterworth ﬁlter. b Fifth-order Butterworth 

188
9
Analog Filters
Table 9.1 Butterworth ﬁlter polynomials 
Order
Polynomial 
1
s plus 1
2
s s quared p lus 1.41 s plus 1
3
lef t pa
r
ent hesi s s
 plus 1 right parenthesis left parenthesis s squared plus s plus 1 right parenthesis
4
l
eft  parenthe sis
 s
 sq uared plu s 0
.765 s plus 1 right parenthesis left parenthesis s squared plus 1.848 s plus 1 right parenthesis
5
lef t pa
r
ent hesis s p lus
 1
 ri ght paren the
sis left parenthesis s squared plus 0.618 s plus 1 right parenthesis left parenthesis s squared plus 1.618 s plus 1 right parenthesis
6
l
eft  parenthe sis
 s
 sq uared plu s 0
.5
18 s plus 1 rig
ht parenthesis left parenthesis s squared plus 1.414 s plus 1 right parenthesis left parenthesis s squared plus 1.932 s plus 1 right parenthesis
7
lef t pa
r
ent hesis s p lus
 1
 ri ght paren the
si
s l eft paren the
sis s squared plus 0.444 s plus 1 right parenthesis left parenthesis s squared plus 1.246 s plus 1 right parenthesis left parenthesis s squared plus 1.802 s plus 1 right parenthesis
Fig. 9.21 Ampliﬁcation diagram for Butterworth ﬁlters
To see exactly how that works, let’s take a fourth-order ﬁlter as an example: 
upper H
 left parenthesis s right parenthesis equals StartFraction 1 Over s squared plus 0.765 s plus 1 EndFraction dot StartFraction 1 Over s squared plus 1.848 s plus 1 EndFraction
upp er H left  par e
nthesis s right parenthesis equals StartFraction 1 Over s squared plus 0.765 s plus 1 EndFraction dot StartFraction 1 Over s squared plus 1.848 s plus 1 EndFraction
up er H left  par
enthesis s right parenthesis equals StartFraction 1 Over s squared plus 0.765 s plus 1 EndFraction dot StartFraction 1 Over s squared plus 1.848 s plus 1 EndFraction
Since ω0 = 1 for both ﬁlters, the ﬁlters’ quality factors are 1/0.765 = 1.307 and 
1/1.848 = 0.541. If we compare these Q numbers with Fig. 9.5, we can see that 
the ﬁrst ﬁlter is underdamped (Q > 0.707) and the other one is overdamped (Q < 
0.707), but if we combine them, the overall gain diagram is perfectly ﬂat. In Fig. 9.22, 
we have plotted both systems’ gain diagrams together with the combined diagram. 
(Combined Q = 1.307·0.541 = 0.707.)
9.5.2 
Chebyshev 
A Chebyshev ﬁlter is more selective (steeper roll-off) than a Butterworth ﬁlter of the 
same order. It is still an ‘all-pole’ ﬁlter, and the greater selectiveness is achieved by 
placing the poles on an ellipse instead of a circle, see Fig. 9.23. The elliptic shape of 
the poles’ location is the reason for the greater selectiveness, but it creates a ‘ripple’ in 
the passband. In Fig. 9.24, we have plotted the gain diagram of the ﬁlter in Fig. 9.23.

9.5 Filter Models
189
Fig. 9.22 A fourth-order ﬁlter = two cascaded second-order ﬁlters
Fig. 9.23 A Chebyshev ﬁlter has all poles on an ellipse 
Fig. 9.24 Gain response of ﬁfth-order Chebyshev 1 ﬁlter 
The ﬁlter in Figs. 9.23 and 9.24 is a ‘Chebyshev 1’ ﬁlter and is characterized by 
its passband ripple. In Fig. 9.24, the ripple is 3 dB, but that is a design parameter that 
can be selected arbitrarily.

190
9
Analog Filters
Fig. 9.25 Chebyshev 2 ﬁlters have zeros 
Fig. 9.26 Gain response of ﬁfth-order Chebyshev 2 ﬁlter 
There is also a ‘Chebyshev 2’ ﬁlter, which does not ripple in the passband; instead, 
it ripples in the stopband. This is achieved by adding some zeros, see Figs. 9.25 and 
9.26. 
The passband (or stopband) ripple is not the only ‘cost’ for the greater selec-
tiveness; Chebyshev ﬁlters’ phase diagram is less linear than the phase diagram of 
Butterworth ﬁlters, i.e., they are more prone to distort the signal. 
9.5.3 
Cauer 
Chebyshev 1 ﬁlters ripple in the passband and Chebyshev 2 ﬁlters ripple in the 
stopband. What if we allowed ripple in both the passband and the stopband? Wouldn’t 
that improve selectiveness even more? Yes, it would, and ﬁlters that ripple in both

9.6 Filter Transformations
191
Fig. 9.27 Poles and zeros of a sixth-order Cauer ﬁlter 
Fig. 9.28 Gain diagram of sixth-order Cauer ﬁlter (3 dB passband ripple, 20 dB stopband ripple) 
passband and stopband are called ‘Cauer’ ﬁlters (or sometimes ‘elliptic’ ﬁlters). 
Figure 9.27 illustrates the poles’/zeros’ location in the s plane for a sixth-order 
Cauer ﬁlter, and Fig. 9.28 illustrates the corresponding gain diagram. 
In Fig. 9.29, we have plotted the gain diagram for all four ﬁlter models (third-order 
ﬁlters). Comparing them, we can clearly see that the Cauer ﬁlter is the most selective 
one but keep in mind that the ‘cost’ is ripple in both passband and stopband and that 
the phase diagram is less linear (higher degree of distortion).
9.6 
Filter Transformations 
So far, we have mostly treated lowpass ﬁlters (with cutoff frequency ω0 = 1). The 
reason is that that is what you start with and then you just ‘transform’ your ﬁlter to 
whatever type and frequency you want in your application. We will present these 
transformation equations here.

192
9
Analog Filters
Fig. 9.29 Comparing ﬁlter models (passband ripple = 3 dB, stopband ripple = 20 dB)
9.6.1 
Lowpass to Lowpass 
If you have a lowpass ﬁlter with cutoff frequency ω0 and want a lowpass ﬁlter with 
cutoff frequency om
ega prime Subscript Sub Subscript 0, you do the following substitution: 
s right arrow StartFraction omega 0 Over omega prime 0 EndFraction dot s
s 
ri
ght
 arrow StartFraction omega 0 Over omega prime 0 EndFraction dot s
Example 9.1 What is the transfer function of a ﬁrst-order lowpass ﬁlter with cutoff 
frequency 8 rad/s? 
Solution The transfer function of a ﬁrst-order lowpass ﬁlter with cutoff frequency 
= 1 is 1/(1  + s). Substituting s/8 for s gives us the new transfer function: 
upper H
 left parenthesis s right parenthesis equals StartFraction 1 Over 1 plus s divided by 8 EndFraction equals StartFraction 8 Over s plus 8 EndFraction
up per H l
eft parenthesis s right parenthesis equals StartFraction 1 Over 1 plus s divided by 8 EndFraction equals StartFraction 8 Over s plus 8 EndFraction
up per H left parenthesis s right parenthesis equals StartFraction 1 Over 1 plus s divided by 8 EndFraction equals StartFraction 8 Over s plus 8 EndFraction
The ampliﬁcation diagram is plotted in Fig. 9.30. 
Fig. 9.30 A lowpass ﬁlter with cutoff frequency 8 rad/s

9.6 Filter Transformations
193
Fig. 9.31 A highpass ﬁlter with cutoff frequency 8 rad/s 
9.6.2 
Lowpass to Highpass 
If you want to transform a lowpass ﬁlter with cutoff frequency ω0 to a highpass ﬁlter 
with cutoff frequency om
ega prime Subscript Sub Subscript 0, you do the substitution 
s right 
arrow StartFraction omega 0 omega prime Subscript Sub Subscript 0 Subscript Over s EndFraction
s 
right arrow StartFraction omega 0 omega prime Subscript Sub Subscript 0 Subscript Over s EndFraction
Example 9.2 What is the transfer function of a ﬁrst-order highpass ﬁlter with cutoff 
frequency 8 rad/s? 
Solution Substituting 8/s for s: upper H 
left parenthesis s right parenthesis equals StartFraction 1 Over 8 divided by s plus 1 EndFraction equals StartFraction s Over s plus 8 EndFraction
upper H 
left parenthesis s right parenthesis equals StartFraction 1 Over 8 divided by s plus 1 EndFraction equals StartFraction s Over s plus 8 EndFraction
upper H left parenthesis s right parenthesis equals StartFraction 1 Over 8 divided by s plus 1 EndFraction equals StartFraction s Over s plus 8 EndFraction. Figure 9.31 illustrates the 
ampliﬁcation diagram. 
9.6.3 
Lowpass to Bandpass 
To transfer a lowpass ﬁlter with cutoff frequency ω0 to a bandpass ﬁlter with the 
upper and lower cutoff frequencies ωu and ωl, you do the substitution: 
s ri ght  arrow StartFraction s squared plus omega Subscript l Baseline omega Subscript u Baseline Over s dot left parenthesis omega Subscript u Baseline minus omega Subscript l Baseline right parenthesis EndFraction dot omega 0
s right arrow Star
tFraction s squared plus omega Subscript l Baseline omega Subscript u Baseline Over s dot left parenthesis omega Subscript u Baseline minus omega Subscript l Baseline right parenthesis EndFraction dot omega 0
Example 9.3 What is the transfer function of a second-order bandpass ﬁlter with 
upper and lower cutoff frequencies 25 and 20 rad/s, respectively? 
Solution ωuωl = 25·20 = 500 and ωu – ωl = 5. The substitution we need to do is 
s right  arrow StartFraction s squared plus 500 Over 5 s EndFraction right double arrow upper H left parenthesis s right parenthesis equals StartStartFraction 1 OverOver StartFraction s squared plus 500 Over 5 s EndFraction plus 1 EndEndFraction equals StartFraction 5 s Over s squared plus 5 s plus 500 EndFraction
s 
right arr
ow StartFraction s squared plus 500 Over 5 s EndFraction right double arrow upper H left parenthesis s right parenthesis equals StartStartFraction 1 OverOver StartFraction s squared plus 500 Over 5 s EndFraction plus 1 EndEndFraction equals StartFraction 5 s Over s squared plus 5 s plus 500 EndFraction
s right arrow StartFraction s squared plus 500 Over 5 s EndFraction right double arrow upper H left parenthesis s right parenthesis equals StartStartFraction 1 OverOver StartFraction s squared plus 500 Over 5 s EndFraction plus 1 EndEndFraction equals StartFraction 5 s Over s squared plus 5 s plus 500 EndFraction
s r
ight
 
arow StartFraction s squared plus 500 Over 5 s EndFraction right double arrow upper H left parenthesis s right parenthesis equals StartStartFraction 1 OverOver StartFraction s squared plus 500 Over 5 s EndFraction plus 1 EndEndFraction equals StartFraction 5 s Over s squared plus 5 s plus 500 EndFraction
s r ight arrow StartFraction s squared plus 500 Over 5 s EndFraction right double arrow upper H left parenthesis s right parenthesis equals StartStartFraction 1 OverOver StartFraction s squared plus 500 Over 5 s EndFraction plus 1 EndEndFraction equals StartFraction 5 s Over s squared plus 5 s plus 500 EndFraction
Figure 9.32 illustrates the ampliﬁcation diagram.

194
9
Analog Filters
Fig. 9.32 A bandpass ﬁlter 
9.6.4 
Lowpass to Bandstop 
You transform a lowpass ﬁlter with cutoff frequency ω0 to a bandstop ﬁlter with 
upper and lower cutoff frequencies ωu and ωl, respectively, with the substitution 
s righ t arro w StartFraction s dot left parenthesis omega Subscript u Baseline minus omega Subscript l Baseline right parenthesis Over s squared plus omega Subscript u Baseline omega Subscript l Baseline EndFraction dot omega Subscript 0
s r ight ar
row
 StartFraction s dot left parenthesis omega Subscript u Baseline minus omega Subscript l Baseline right parenthesis Over s squared plus omega Subscript u Baseline omega Subscript l Baseline EndFraction dot omega Subscript 0
Example 9.4 What is the transfer function of a second-order bandstop ﬁlter with 
upper and lower cutoff frequencies 55 and 45 rad/s, respectively? 
Solution ωuωl = 55·45 = 2475 and ωu – ωl = 10. The substitution we need to do is 
s r
ight arrow StartFraction 10 s Over s squared plus 2475 EndFraction right double arrow upper H left parenthesis s right parenthesis equals StartStartFraction 1 OverOver StartFraction 10 s Over s squared plus 2475 EndFraction plus 1 EndEndFraction equals StartFraction s squared plus 2475 Over s squared plus 10 s plus 2475 EndFraction
s r ight ar row Start
Fraction 10 s Over s squared plus 2475 EndFraction right double arrow upper H left parenthesis s right parenthesis equals StartStartFraction 1 OverOver StartFraction 10 s Over s squared plus 2475 EndFraction plus 1 EndEndFraction equals StartFraction s squared plus 2475 Over s squared plus 10 s plus 2475 EndFraction
s right arrow StartFraction 10 s Over s squared plus 2475 EndFraction right double arrow upper H left parenthesis s right parenthesis equals StartStartFraction 1 OverOver StartFraction 10 s Over s squared plus 2475 EndFraction plus 1 EndEndFraction equals StartFraction s squared plus 2475 Over s squared plus 10 s plus 2475 EndFraction
s right arro w
 St artFraction 10 s Over s squared plus 2475 EndFraction right double arrow upper H left parenthesis s right parenthesis equals StartStartFraction 1 OverOver StartFraction 10 s Over s squared plus 2475 EndFraction plus 1 EndEndFraction equals StartFraction s squared plus 2475 Over s squared plus 10 s plus 2475 EndFraction
s r ight a rrow StartFraction 10 s Over s squared plus 2475 EndFraction right double arrow upper H left parenthesis s right parenthesis equals StartStartFraction 1 OverOver StartFraction 10 s Over s squared plus 2475 EndFraction plus 1 EndEndFraction equals StartFraction s squared plus 2475 Over s squared plus 10 s plus 2475 EndFraction
The ampliﬁcation diagram of this transfer function is plotted in Fig. 9.33. 
Fig. 9.33 A bandstop ﬁlter

9.7 Time Domain
195
9.7 
Time Domain 
In the frequency domain, we ﬁnd the system’s output by multiplying the input signal’s 
Laplace transform (or the Fourier transform) with the system’s transfer function, see 
Fig. 9.34. In the time domain, the system is represented by the system’s impulse 
response (see Example 7.8), which is the inverse Laplace transform of the transfer 
function (h left parenthesis t right parenthesis equals upper H left parenthesis s right parenthesis Superscript negative 1 Baseline right parenthesis. 
It is a common misunderstanding that you should also multiply h(t) by  x(t) to  
get the output y(t); that is not the case! In time space, you must convolve the input 
signal with the impulse response. This is illustrated in Fig. 9.35 where the symbol 
⊗ represents ‘convolution’. Since this is a widely misunderstood concept, we will 
elucidate it in detail here. 
9.7.1 
Convolution 
First, convolution is an integral: 
y left parenthesis t 
r
i
ght
 parenthe sis equa
ls h left parenthesis t right parenthesis circled times x left parenthesis t right parenthesis equals integral Subscript negative normal infinity Superscript normal infinity Baseline h left parenthesis tau right parenthesis x left parenthesis t minus tau right parenthesis d tau
This integral causes most students a lot of problems, so take a minute to really look 
at it. First, we have the temporal variable τ that we only use inside the integral; the 
integral output is still a function of t! Second, most people have trouble visualizing 
the function x(t –  τ ) and we will discuss that in detail in a minute, and third we 
integrate over all τ s, where the two functions overlap. The output is the area of 
the ‘product function’ at each time t. The key to understanding convolution is to 
understand exactly where (in τ space) the function x(t – τ ) is for  every time  t and 
exactly what the integral limits are (expressed in t). 
So, before we do any convolution, let’s look at the function x(t – τ ) and what it 
looks like in τ space. First, in τ space, t is a constant! Let’s consider the straight line 
x(τ ) = 2τ – 1. This signal is plotted in Fig. 9.36. The signal x(–τ ) is the ‘mirror’ of 
x(τ ) around τ = 0, see Fig. 9.37.
Fig. 9.34 Frequency space: 
Multiplication 
Fig. 9.35 Time space: 
Convolution 

196
9
Analog Filters
Fig. 9.36 x(τ ) = 2τ – 1  
Fig. 9.37 x(–τ ) = –2τ – 1  
Next, we consider the function x(τ – t); remember that τ is our time variable here 
and t is a constant. In that case, x(τ – t) is a  delayed copy of x(τ ) (delayed by t). For 
example, if t = 1, then x(τ – 1)  = 2(τ – 1) – 1  = 2τ – 3, and if t = 2, then x(τ – 2)  
= 2(τ – 2) – 1  = 2τ – 5, see Fig. 9.38.
And that brings us to the key question; what does x(t – τ ) look like? Well, x(t – τ ) 
= x(–(τ – t)), i.e., it is the ‘mirror’ of x(t – τ ) around τ = t. For example, if t = 1, 
then x(1 – τ ) = 2(1 – τ ) – 1  = –2τ + 1, and if t = 2, then x(2 – τ ) = 2(2 – τ ) – 1  = 
–2τ + 3, see Fig. 9.39.
In Figs. 9.40 and 9.41, we compare x(τ – t) and x (t – τ ) for the same t values, 
and we can see that x(t – τ ) is just the mirror image of x(τ – t) around τ = t. We  
can draw two conclusions from this; ﬁrst, as t increases, x(t – τ ) moves to the right

9.7 Time Domain
197
Fig. 9.38 x(τ – t) for  t = 0, 
1 and  2
Fig. 9.39 x(t – τ ) for  t = 
–1, 0, 1 and 2
along the τ-axis, and second, if t < 0,  x (t – τ ) moves to the left. t = –∞ is to the 
far left and t = + ∞ is to the far right. Hence, when t goes from –∞ to + ∞, the  
function x(t – τ ) ‘slides’ from left to right along the τ-axis, see Fig. 9.42.
Now, let’s go back to Eq. (9.27). h(τ ) doesn’t move with t (independent of t); 
for each time t, we must ﬁgure out where x(t – τ ) is, multiply it with h(τ ) and then 
integrate over all τ, i.e., over all τ s where the two functions overlap. If you understand 
Fig. 9.42, you will know where x(t – τ ) is, but that is only half the problem; the second 
part is what the integration limits are. We illustrate that with an example. 
Example 9.5 Figure 9.43 illustrates h(t) and Fig. 9.44 illustrates x(t). What is the 
convolution of h(t) and x(t); ﬁnd y(t) = h(t) ⊗ x(t).

198
9
Analog Filters
Fig. 9.40 x(1 – τ ) is  x(τ 
– 1) mirrored in  t = 1 
Fig. 9.41 x(2 – τ ) is  x(τ – 2) mirrored in τ = 2
Solution First, we plot x(t – τ ) for some different t values to make sure we understand 
what goes on, see Fig. 9.45. In Fig.  9.45, we can see that as x(t – τ ) slides from left 
to right, there is no overlap between x(t – τ ) and h(τ ) until right after t = 0; hence 
the convolution h(t) ⊗ x(t) = 0 for  t < 0. Figure 9.46 illustrates the situation for 0 
< t < 1. From Fig.  9.46, we can see that the integration limits are τ = –1 and τ = 
–(1 – t) = t – 1. In this interval, x(t – τ ) = 1 and h(τ ) = τ + 1. Now we can calculate 
the convolution expression (9.27) for  t element of left bracket 0 comma 1 right bracket:

9.7 Time Domain
199
Fig. 9.42 x(t – τ ) ‘slides’ from left to right as t increases
Fig. 9.43 
h(t) 
Fig. 9.44 x(t)

200
9
Analog Filters
Sta
r
tLa
yout 1st Row 1st
 Column integral Subscript negative 1 Superscript t minus 1 Baseline left parenthesis tau plus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared plus tau right bracket Subscript negative 1 Superscript t minus 1 Baseline equals 2nd Column one half left parenthesis t minus 1 right parenthesis squared plus t minus 1 minus left parenthesis one half minus 1 right parenthesis 2nd Row 1st Column Blank 2nd Column equals one half left parenthesis t squared minus 2 t plus 1 right parenthesis plus t minus one half equals ModifyingBelow one half t squared With quotation dash for 0 less than or equals t less than 1 EndLayout
StartL ayo
ut 1s
t R
ow 1st Column integral Subscript negative 1 Superscript t minus 1 Baseline left parenthesis tau plus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared plus tau right bracket Subscript negative 1 Superscript t minus 1 Baseline equals 2nd Column one half left parenthesis t minus 1 right parenthesis squared plus t minus 1 minus left parenthesis one half minus 1 right parenthesis 2nd Row 1st Column Blank 2nd Column equals one half left parenthesis t squared minus 2 t plus 1 right parenthesis plus t minus one half equals ModifyingBelow one half t squared With quotation dash for 0 less than or equals t less than 1 EndLayout
Start Layout  1st  Row  
1st Column integral Subscript negative 1 Superscript t minus 1 Baseline left parenthesis tau plus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared plus tau right bracket Subscript negative 1 Superscript t minus 1 Baseline equals 2nd Column one half left parenthesis t minus 1 right parenthesis squared plus t minus 1 minus left parenthesis one half minus 1 right parenthesis 2nd Row 1st Column Blank 2nd Column equals one half left parenthesis t squared minus 2 t plus 1 right parenthesis plus t minus one half equals ModifyingBelow one half t squared With quotation dash for 0 less than or equals t less than 1 EndLayout
St art
L
ay out 1st Row 1st Column integral Subscript negative 1 Superscript t minus 1 Baseline left parenthesis tau plus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared plus tau right bracket Subscript negative 1 Superscript t minus 1 Baseline equals 2nd Column one half left parenthesis t minus 1 right parenthesis squared plus t minus 1 minus left parenthesis one half minus 1 right parenthesis 2nd Row 1st Column Blank 2nd Column equals one half left parenthesis t squared minus 2 t plus 1 right parenthesis plus t minus one half equals ModifyingBelow one half t squared With quotation dash for 0 less than or equals t less than 1 EndLayout
S
t
art Layou t 1
s
t Ro w 1st Column integral Subscript negative 1 Superscript t minus 1 Baseline left parenthesis tau plus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared plus tau right bracket Subscript negative 1 Superscript t minus 1 Baseline equals 2nd Column one half left parenthesis t minus 1 right parenthesis squared plus t minus 1 minus left parenthesis one half minus 1 right parenthesis 2nd Row 1st Column Blank 2nd Column equals one half left parenthesis t squared minus 2 t plus 1 right parenthesis plus t minus one half equals ModifyingBelow one half t squared With quotation dash for 0 less than or equals t less than 1 EndLayout
St artLayout 1st Row 1st Column integral Subscript negative 1 Superscript t minus 1 Baseline left parenthesis tau plus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared plus tau right bracket Subscript negative 1 Superscript t minus 1 Baseline equals 2nd Column one half left parenthesis t minus 1 right parenthesis squared plus t minus 1 minus left parenthesis one half minus 1 right parenthesis 2nd Row 1st Column Blank 2nd Column equals one half left parenthesis t squared minus 2 t plus 1 right parenthesis plus t minus one half equals ModifyingBelow one half t squared With quotation dash for 0 less than or equals t less than 1 EndLayout
StartLayout 1st Row 1st Column integral Subscript negative 1 Superscript t minus 1 Baseline left parenthesis tau plus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared plus tau right bracket Subscript negative 1 Superscript t minus 1 Baseline equals 2nd Column one half left parenthesis t minus 1 right parenthesis squared plus t minus 1 minus left parenthesis one half minus 1 right parenthesis 2nd Row 1st Column Blank 2nd Column equals one half left parenthesis t squared minus 2 t plus 1 right parenthesis plus t minus one half equals ModifyingBelow one half t squared With quotation dash for 0 less than or equals t less than 1 EndLayout
Star tL ayou t 1st Row 1st Column integral Subscript negative 1 Superscript t minus 1 Baseline left parenthesis tau plus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared plus tau right bracket Subscript negative 1 Superscript t minus 1 Baseline equals 2nd Column one half left parenthesis t minus 1 right parenthesis squared plus t minus 1 minus left parenthesis one half minus 1 right parenthesis 2nd Row 1st Column Blank 2nd Column equals one half left parenthesis t squared minus 2 t plus 1 right parenthesis plus t minus one half equals ModifyingBelow one half t squared With quotation dash for 0 less than or equals t less than 1 EndLayout
Figure 9.47 illustrates the signals for 1 < t < 2.  
From Fig. 9.47, we can see that we need to integrate τ + 1 between τ = t – 2 and 
0, and τ – 1, between 0 and t – 1:
Fig. 9.45 x(t – τ ) for different times t 
Fig. 9.46 0 <  t < 1

9.7 Time Domain
201
Fig. 9.47 1 <  t < 2
S
t
artL
ayout 1st Row 1st
 Co
l
um
n Blank 2nd Colu
mn integral Subscript t minus 2 Superscript 0 Baseline left parenthesis tau plus 1 right parenthesis dot 1 d tau plus integral Subscript 0 Superscript t minus 1 Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared plus tau right bracket Subscript t minus 2 Superscript 0 Baseline plus left bracket one half tau squared minus tau right bracket Subscript 0 Superscript t minus 1 Baseline 2nd Row 1st Column Blank 2nd Column equals minus one half left parenthesis t minus 2 right parenthesis squared minus t plus 2 plus one half left parenthesis t minus 1 right parenthesis squared minus t plus 1 equals midline horizontal ellipsis equals ModifyingBelow negative t plus 1.5 With quotation dash for 1 less than or equals t less than 2 EndLayout
StartL ayo
ut 
1st 
R
ow 1st Column Blank 2nd Column integral Subscript t minus 2 Superscript 0 Baseline left parenthesis tau plus 1 right parenthesis dot 1 d tau plus integral Subscript 0 Superscript t minus 1 Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared plus tau right bracket Subscript t minus 2 Superscript 0 Baseline plus left bracket one half tau squared minus tau right bracket Subscript 0 Superscript t minus 1 Baseline 2nd Row 1st Column Blank 2nd Column equals minus one half left parenthesis t minus 2 right parenthesis squared minus t plus 2 plus one half left parenthesis t minus 1 right parenthesis squared minus t plus 1 equals midline horizontal ellipsis equals ModifyingBelow negative t plus 1.5 With quotation dash for 1 less than or equals t less than 2 EndLayout
StartL ayo
ut 1s
t 
R o w 1st Column Blank 2nd Column integral Subscript t minus 2 Superscript 0 Baseline left parenthesis tau plus 1 right parenthesis dot 1 d tau plus integral Subscript 0 Superscript t minus 1 Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared plus tau right bracket Subscript t minus 2 Superscript 0 Baseline plus left bracket one half tau squared minus tau right bracket Subscript 0 Superscript t minus 1 Baseline 2nd Row 1st Column Blank 2nd Column equals minus one half left parenthesis t minus 2 right parenthesis squared minus t plus 2 plus one half left parenthesis t minus 1 right parenthesis squared minus t plus 1 equals midline horizontal ellipsis equals ModifyingBelow negative t plus 1.5 With quotation dash for 1 less than or equals t less than 2 EndLayout
Start Layout  1st  Row  1st Column Blank 2nd Column integral Subscript t minus 2 Superscript 0 Baseline left parenthesis tau plus 1 right parenthesis dot 1 d tau plus integral Subscript 0 Superscript t minus 1 Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared plus tau right bracket Subscript t minus 2 Superscript 0 Baseline plus left bracket one half tau squared minus tau right bracket Subscript 0 Superscript t minus 1 Baseline 2nd Row 1st Column Blank 2nd Column equals minus one half left parenthesis t minus 2 right parenthesis squared minus t plus 2 plus one half left parenthesis t minus 1 right parenthesis squared minus t plus 1 equals midline horizontal ellipsis equals ModifyingBelow negative t plus 1.5 With quotation dash for 1 less than or equals t less than 2 EndLayout
Start Layout  1st  Row  1s t  Co lumn  Blank 2nd Column integral Subscript t minus 2 Superscript 0 Baseline left parenthesis tau plus 1 right parenthesis dot 1 d tau plus integral Subscript 0 Superscript t minus 1 Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared plus tau right bracket Subscript t minus 2 Superscript 0 Baseline plus left bracket one half tau squared minus tau right bracket Subscript 0 Superscript t minus 1 Baseline 2nd Row 1st Column Blank 2nd Column equals minus one half left parenthesis t minus 2 right parenthesis squared minus t plus 2 plus one half left parenthesis t minus 1 right parenthesis squared minus t plus 1 equals midline horizontal ellipsis equals ModifyingBelow negative t plus 1.5 With quotation dash for 1 less than or equals t less than 2 EndLayout Star tL ayou t 1st Row 1st Column Blank 2nd Column integral Subscript t minus 2 Superscript 0 Baseline left parenthesis tau plus 1 right parenthesis dot 1 d tau plus integral Subscript 0 Superscript t minus 1 Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared plus tau right bracket Subscript t minus 2 Superscript 0 Baseline plus left bracket one half tau squared minus tau right bracket Subscript 0 Superscript t minus 1 Baseline 2nd Row 1st Column Blank 2nd Column equals minus one half left parenthesis t minus 2 right parenthesis squared minus t plus 2 plus one half left parenthesis t minus 1 right parenthesis squared minus t plus 1 equals midline horizontal ellipsis equals ModifyingBelow negative t plus 1.5 With quotation dash for 1 less than or equals t less than 2 EndLayout
Figure 9.48 illustrates the signals for 2 < t < 3.  
Fig. 9.48 2 <  t < 3

202
9
Analog Filters
Fig. 9.49 The convolution h(t) ⊗ x(t) of the signals in Figs. 9.43 and 9.44 
From Fig. 9.48, it is clear that we should integrate τ – 1 over the interval t – 2 <  
τ < 1:  
S
t
artL
ayout 1st Row 1 s
t Column integral Subscript t minus 2 Superscript 1 Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau 2nd Column equals left bracket one half tau squared minus tau right bracket Subscript t minus 2 Superscript 1 Baseline equals one half minus 1 minus left parenthesis one half left parenthesis t minus 2 right parenthesis squared minus left parenthesis t minus 2 right parenthesis right parenthesis equals 2nd Row 1st Column Blank 2nd Column midline horizontal ellipsis equals ModifyingBelow minus one half t squared plus 3 t minus 4.5 With quotation dash for 2 less than or equals t less than 3 EndLayout
StartL ayo
ut 
1st 
Row 1st Column integral Subscript t minus 2 Superscript 1 Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau 2nd Column equals left bracket one half tau squared minus tau right bracket Subscript t minus 2 Superscript 1 Baseline equals one half minus 1 minus left parenthesis one half left parenthesis t minus 2 right parenthesis squared minus left parenthesis t minus 2 right parenthesis right parenthesis equals 2nd Row 1st Column Blank 2nd Column midline horizontal ellipsis equals ModifyingBelow minus one half t squared plus 3 t minus 4.5 With quotation dash for 2 less than or equals t less than 3 EndLayout
St artL a
yout 1st Row 1st Column integral Subscript t minus 2 Superscript 1 Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau 2nd Column equals left bracket one half tau squared minus tau right bracket Subscript t minus 2 Superscript 1 Baseline equals one half minus 1 minus left parenthesis one half left parenthesis t minus 2 right parenthesis squared minus left parenthesis t minus 2 right parenthesis right parenthesis equals 2nd Row 1st Column Blank 2nd Column midline horizontal ellipsis equals ModifyingBelow minus one half t squared plus 3 t minus 4.5 With quotation dash for 2 less than or equals t less than 3 EndLayout
Start Layout  1st Row 
1
st
 C o lu mn  integral Subscript t minus 2 Superscript 1 Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau 2nd Column equals left bracket one half tau squared minus tau right bracket Subscript t minus 2 Superscript 1 Baseline equals one half minus 1 minus left parenthesis one half left parenthesis t minus 2 right parenthesis squared minus left parenthesis t minus 2 right parenthesis right parenthesis equals 2nd Row 1st Column Blank 2nd Column midline horizontal ellipsis equals ModifyingBelow minus one half t squared plus 3 t minus 4.5 With quotation dash for 2 less than or equals t less than 3 EndLayout
Start Layou t 1st Row 1st Column integral Subscript t minus 2 Superscript 1 Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau 2nd Column equals left bracket one half tau squared minus tau right bracket Subscript t minus 2 Superscript 1 Baseline equals one half minus 1 minus left parenthesis one half left parenthesis t minus 2 right parenthesis squared minus left parenthesis t minus 2 right parenthesis right parenthesis equals 2nd Row 1st Column Blank 2nd Column midline horizontal ellipsis equals ModifyingBelow minus one half t squared plus 3 t minus 4.5 With quotation dash for 2 less than or equals t less than 3 EndLayout Star tL ayou t 1st Row 1st Column integral Subscript t minus 2 Superscript 1 Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau 2nd Column equals left bracket one half tau squared minus tau right bracket Subscript t minus 2 Superscript 1 Baseline equals one half minus 1 minus left parenthesis one half left parenthesis t minus 2 right parenthesis squared minus left parenthesis t minus 2 right parenthesis right parenthesis equals 2nd Row 1st Column Blank 2nd Column midline horizontal ellipsis equals ModifyingBelow minus one half t squared plus 3 t minus 4.5 With quotation dash for 2 less than or equals t less than 3 EndLayout
In Fig. 9.49, we have plotted the convolution expressions for all ts. 
Convolution can really challenge your patience, but remember, there are two keys; 
understanding how x(t – τ ) moves in τ space and ﬁguring out what the integration 
limits are. You need to do a couple of convolution integrals on your own before the 
penny drops. 
9.8 
Solved Problems 
Problem 9.1 Prove that the simple RC ﬁlter in Fig. 9.50, under certain circumstances, 
is an integrator, i.e., that u S u
b
script y Baseline tilde integral u Subscript x Baseline d t. 
Solution The output voltage uy equals the voltage over the capacitor which is the 
charge Q divided by the capacitance and the charge is the integral of the current 
i: u S ub scr ip t y Baseline equals u Subscript upper C Baseline equals StartFraction upper Q Over upper C EndFraction equals StartFraction 1 Over upper C EndFraction integral i d t
u Su bscript y Baseline equals u Subscript upper C Baseline equals StartFraction upper Q Over upper C EndFraction equals StartFraction 1 Over upper C EndFraction integral i d t
u
 
Subscript y Baseline equals u Subscript upper C Baseline equals StartFraction upper Q Over upper C EndFraction equals StartFraction 1 Over upper C EndFraction integral i d t. If  R >> XC = 1/ωC, then the current i ≈ ux/R and
Fig. 9.50 First-order RC ﬁlter 

9.8 Solved Problems
203
u S ub script y Baseline equals StartFraction 1 Over upper C EndFraction integral StartFraction u Subscript x Baseline Over upper R EndFraction d t equals StartFraction 1 Over upper R upper C EndFraction integral u Subscript x Baseline d t
u
 Subscript y Baseline equals StartFraction 1 Over upper C EndFraction integral StartFraction u Subscript x Baseline Over upper R EndFraction d t equals StartFraction 1 Over upper R upper C EndFraction integral u Subscript x Baseline d t
u Sub sc ript y Baseline equals StartFraction 1 Over upper C EndFraction integral StartFraction u Subscript x Baseline Over upper R EndFraction d t equals StartFraction 1 Over upper R upper C EndFraction integral u Subscript x Baseline d t
u 
S
ubscript y Baseline equals StartFraction 1 Over upper C EndFraction integral StartFraction u Subscript x Baseline Over upper R EndFraction d t equals StartFraction 1 Over upper R upper C EndFraction integral u Subscript x Baseline d t. Hence, the ﬁrst-order lowpass ﬁlter in Fig. 9.50 is an 
integrator if R >> 1/ωC, i.e., if upp er R  upper C equals tau much greater than StartFraction 1 Over omega EndFraction equals StartFraction upper T Over 2 normal pi EndFraction
up pe r R upper C equals tau much greater than StartFraction 1 Over omega EndFraction equals StartFraction upper T Over 2 normal pi EndFraction
upper R upper C equals tau much greater than StartFraction 1 Over omega EndFraction equals StartFraction upper T Over 2 normal pi EndFraction. 
Conclusion: The lowpass ﬁlter acts as an integrator if the ﬁlter time constant is 
much greater than the signal period. 
Problem 9.2 Consider the ﬁlter upper H
 left parenthesis s right parenthesis equals StartFraction 12.5 s Over s squared plus 12.5 s plus 625 EndFraction
upper H left parenthesis s right parenthesis equals StartFraction 12.5 s Over s squared plus 12.5 s plus 625 EndFraction. a What kind of ﬁlter is this? 
b What is ω0? c What is Q? d What is the maximum ampliﬁcation? e Plot the 
ampliﬁcation diagram. 
Solution First, H(s) = 0 for  s = 0 and s = ∞, so it is a bandpass ﬁlter. Second, we 
can rewrite the transfer function as upper H 
left parenthesis s right parenthesis equals StartStartFraction 12.5 s OverOver s squared plus StartFraction 25 Over 2 EndFraction s plus 25 squared EndEndFraction right double arrow upper H left parenthesis omega right parenthesis equals StartFraction 12.5 j omega Over 12.5 j omega plus 25 squared minus omega squared EndFraction right double arrow
upp er H left parenthesis s right parenthesis equals StartStartFraction 12.5 s OverOver s squared plus StartFraction 25 Over 2 EndFraction s plus 25 squared EndEndFraction right double arrow upper H left parenthesis omega right parenthesis equals StartFraction 12.5 j omega Over 12.5 j omega plus 25 squared minus omega squared EndFraction right double arrow
up per H left pare
nthesis s right parenthesis equals StartStartFraction 12.5 s OverOver s squared plus StartFraction 25 Over 2 EndFraction s plus 25 squared EndEndFraction right double arrow upper H left parenthesis omega right parenthesis equals StartFraction 12.5 j omega Over 12.5 j omega plus 25 squared minus omega squared EndFraction right double arrow
upper H left p arenthesis s right parenthesis equals StartStartFraction 12.5 s OverOver s squared plus StartFraction 25 Over 2 EndFraction s plus 25 squared EndEndFraction right double arrow upper H left parenthesis omega right parenthesis equals StartFraction 12.5 j omega Over 12.5 j omega plus 25 squared minus omega squared EndFraction right double arrow
StartAbso
luteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue 12.5 omega EndAbsoluteValue Over StartRoot 12.5 squared omega squared plus left parenthesis 25 squared minus omega squared right parenthesis squared EndRoot EndFraction
/
StartAbsoluteValue
 upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue 12.5 omega EndAbsoluteValue Over StartRoot 12.5 squared omega squared plus left parenthesis 25 squared minus omega squared right parenthesis squared EndRoot EndFraction , and hence ω0 = 25 rad/s and Q = 2. We can also see 
that StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValuehas its maximum value when ω = 25 rad/s and StartAbsoluteValue upper H left parenthesis omega equals 25 right parenthesis EndAbsoluteValue equals 1 periodThe 
ampliﬁcation diagram is plotted in Fig. 9.51. 
Problem 9.3 Derive the transfer function of the Sallen–Key link in Fig. 9.13 
(Eq. (9.15)). 
Solution Referring to Fig. 9.52, the potential at point B is 
up er
 U Subscript upper B Baseline equals StartFraction 1 divided by s upper C 2 Over upper R 2 plus 1 divided by s upper C 2 EndFraction upper U Subscript upper A Baseline equals StartFraction upper U Subscript upper A Baseline Over 1 plus s upper R 2 upper C 2 EndFraction right double arrow upper U Subscript upper A Baseline equals upper U Subscript upper B Baseline left parenthesis 1 plus s upper R 2 upper C 2 right parenthesis
up er U Sub
scr i
pt upper B Baseline equals StartFraction 1 divided by s upper C 2 Over upper R 2 plus 1 divided by s upper C 2 EndFraction upper U Subscript upper A Baseline equals StartFraction upper U Subscript upper A Baseline Over 1 plus s upper R 2 upper C 2 EndFraction right double arrow upper U Subscript upper A Baseline equals upper U Subscript upper B Baseline left parenthesis 1 plus s upper R 2 upper C 2 right parenthesis
up per U Su
bscri pt uppe r B Base
line equals StartFraction 1 divided by s upper C 2 Over upper R 2 plus 1 divided by s upper C 2 EndFraction upper U Subscript upper A Baseline equals StartFraction upper U Subscript upper A Baseline Over 1 plus s upper R 2 upper C 2 EndFraction right double arrow upper U Subscript upper A Baseline equals upper U Subscript upper B Baseline left parenthesis 1 plus s upper R 2 upper C 2 right parenthesis
Fig. 9.51 Bandpass ﬁlter 
Fig. 9.52 The Sallen–Key link (second order) 

204
9
Analog Filters
At point A, i1 = i2 + i3: 
St artLayout 1st Row 1st Column Blank 2nd Column StartFraction upper X left parenthesis s right parenthesis minus upper U Subscript upper A Baseline Over upper R 1 EndFraction equals StartFraction upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis Over 1 divided by s upper C 1 EndFraction plus StartFraction upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline Over upper R 2 EndFraction equals s upper C 1 left parenthesis upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis right parenthesis plus StartFraction 1 Over upper R 2 EndFraction left parenthesis upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper X left parenthesis s right parenthesis equals upper U Subscript upper A Baseline plus s upper R 1 upper C 1 left parenthesis upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis right parenthesis plus StartFraction upper R 1 Over upper R 2 EndFraction left parenthesis upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline right parenthesis EndLayout
Sta
rtLay out 1st Row 1st Column Blank 2nd Column StartFraction upper X left parenthesis s right parenthesis minus upper U Subscript upper A Baseline Over upper R 1 EndFraction equals StartFraction upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis Over 1 divided by s upper C 1 EndFraction plus StartFraction upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline Over upper R 2 EndFraction equals s upper C 1 left parenthesis upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis right parenthesis plus StartFraction 1 Over upper R 2 EndFraction left parenthesis upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper X left parenthesis s right parenthesis equals upper U Subscript upper A Baseline plus s upper R 1 upper C 1 left parenthesis upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis right parenthesis plus StartFraction upper R 1 Over upper R 2 EndFraction left parenthesis upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline right parenthesis EndLayout
StartL
ayout  1st Row 1st Column Blank 2nd Column StartFraction upper X left parenthesis s right parenthesis minus upper U Subscript upper A Baseline Over upper R 1 EndFraction equals StartFraction upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis Over 1 divided by s upper C 1 EndFraction plus StartFraction upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline Over upper R 2 EndFraction equals s upper C 1 left parenthesis upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis right parenthesis plus StartFraction 1 Over upper R 2 EndFraction left parenthesis upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper X left parenthesis s right parenthesis equals upper U Subscript upper A Baseline plus s upper R 1 upper C 1 left parenthesis upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis right parenthesis plus StartFraction upper R 1 Over upper R 2 EndFraction left parenthesis upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline right parenthesis EndLayout
Sta
rtLayout 1st Row 1st  Column Blank 2nd Column StartFraction upper X left parenthesis s right parenthesis minus upper U Subscript upper A Baseline Over upper R 1 EndFraction equals StartFraction upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis Over 1 divided by s upper C 1 EndFraction plus StartFraction upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline Over upper R 2 EndFraction equals s upper C 1 left parenthesis upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis right parenthesis plus StartFraction 1 Over upper R 2 EndFraction left parenthesis upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper X left parenthesis s right parenthesis equals upper U Subscript upper A Baseline plus s upper R 1 upper C 1 left parenthesis upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis right parenthesis plus StartFraction upper R 1 Over upper R 2 EndFraction left parenthesis upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline right parenthesis EndLayout
Sta
rtLa yout 1
st R ow 1st Co lumn Blank 2nd Column StartFraction upper X left parenthesis s right parenthesis minus upper U Subscript upper A Baseline Over upper R 1 EndFraction equals StartFraction upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis Over 1 divided by s upper C 1 EndFraction plus StartFraction upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline Over upper R 2 EndFraction equals s upper C 1 left parenthesis upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis right parenthesis plus StartFraction 1 Over upper R 2 EndFraction left parenthesis upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper X left parenthesis s right parenthesis equals upper U Subscript upper A Baseline plus s upper R 1 upper C 1 left parenthesis upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis right parenthesis plus StartFraction upper R 1 Over upper R 2 EndFraction left parenthesis upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline right parenthesis EndLayout
Sta
rtLa yout 
1st Row 1st Column Blank 2nd Column StartFraction upper X left parenthesis s right parenthesis minus upper U Subscript upper A Baseline Over upper R 1 EndFraction equals StartFraction upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis Over 1 divided by s upper C 1 EndFraction plus StartFraction upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline Over upper R 2 EndFraction equals s upper C 1 left parenthesis upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis right parenthesis plus StartFraction 1 Over upper R 2 EndFraction left parenthesis upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline right parenthesis 2nd Row 1st Column Blank 2nd Column right double arrow upper X left parenthesis s right parenthesis equals upper U Subscript upper A Baseline plus s upper R 1 upper C 1 left parenthesis upper U Subscript upper A Baseline minus upper Y left parenthesis s right parenthesis right parenthesis plus StartFraction upper R 1 Over upper R 2 EndFraction left parenthesis upper U Subscript upper A Baseline minus upper U Subscript upper B Baseline right parenthesis EndLayout
Next, we insert Eq. (9.28) into Eq. (9.29): 
up per X left parenthesis s right pa renthesis equals upper U Subscript upper B Baseline left parenthesis 1 plus s upper R 2 upper C 2 right parenthesis plus s upper R 1 upper C 1 left parenthesis upper U Subscript upper B Baseline left parenthesis 1 plus s upper R 2 upper C 2 right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis plus StartFraction upper R 1 Over upper R 2 EndFraction left parenthesis upper U Subscript upper B Baseline left parenthesis 1 plus s upper R 2 upper C 2 right parenthesis minus upper U Subscript upper B Baseline right parenthesis
up
er X l eft parenthesis s right parenthesis equals upper U Subscript upper B Baseline left parenthesis 1 plus s upper R 2 upper C 2 right parenthesis plus s upper R 1 upper C 1 left parenthesis upper U Subscript upper B Baseline left parenthesis 1 plus s upper R 2 upper C 2 right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis plus StartFraction upper R 1 Over upper R 2 EndFraction left parenthesis upper U Subscript upper B Baseline left parenthesis 1 plus s upper R 2 upper C 2 right parenthesis minus upper U Subscript upper B Baseline right parenthesis
Since the op amp has negative feedback, the potential at point B follows y(t) and 
UB = Y(s): 
St artL ayout 1
s
t R ow 1st Column upper X left parenthesis s right parenthesis equals 2nd Column upper Y left parenthesis s right parenthesis left parenthesis left parenthesis 1 plus s upper R 2 upper C 2 right parenthesis plus s upper R 1 upper C 1 left parenthesis left parenthesis 1 plus s upper R 2 upper C 2 right parenthesis minus 1 right parenthesis plus StartFraction upper R 1 Over upper R 2 EndFraction left parenthesis left parenthesis 1 plus s upper R 2 upper C 2 right parenthesis minus 1 right parenthesis right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper Y left parenthesis s right parenthesis left parenthesis 1 plus s upper R 2 upper C 2 plus s squared upper R 1 upper R 2 upper C 1 upper C 2 plus s upper R 1 upper C 2 right parenthesis EndLayout
Sta
rtLa yout 1st Row 
1
st  Colu
m
n upper X left parenthes is s ri
ght parenthesis equals 2nd Column upper Y left parenthesis s right parenthesis left parenthesis left parenthesis 1 plus s upper R 2 upper C 2 right parenthesis plus s upper R 1 upper C 1 left parenthesis left parenthesis 1 plus s upper R 2 upper C 2 right parenthesis minus 1 right parenthesis plus StartFraction upper R 1 Over upper R 2 EndFraction left parenthesis left parenthesis 1 plus s upper R 2 upper C 2 right parenthesis minus 1 right parenthesis right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper Y left parenthesis s right parenthesis left parenthesis 1 plus s upper R 2 upper C 2 plus s squared upper R 1 upper R 2 upper C 1 upper C 2 plus s upper R 1 upper C 2 right parenthesis EndLayout
The transfer function is H(s) = Y(s)/X(s): 
upper H
 left parenthesis s right parenthesis equals StartFraction 1 Over s squared upper R 1 upper R 2 upper C 1 upper C 2 plus s left parenthesis upper R 1 plus upper R 2 right parenthesis upper C 2 plus 1 EndFraction equals StartFraction 1 divided by upper R 1 upper R 2 upper C 1 upper C 2 Over s squared plus s left parenthesis upper R 1 plus upper R 2 right parenthesis divided by upper R 1 upper R 2 upper C 1 plus 1 divided by upper R 1 upper R 2 upper C 1 upper C 2 EndFraction
upper H lef t paren thesis s  rig h
t parenthesis equals StartFraction 1 Over s squared upper R 1 upper R 2 upper C 1 upper C 2 plus s left parenthesis upper R 1 plus upper R 2 right parenthesis upper C 2 plus 1 EndFraction equals StartFraction 1 divided by upper R 1 upper R 2 upper C 1 upper C 2 Over s squared plus s left parenthesis upper R 1 plus upper R 2 right parenthesis divided by upper R 1 upper R 2 upper C 1 plus 1 divided by upper R 1 upper R 2 upper C 1 upper C 2 EndFraction
up er H le ft parenthesi s s right parenthesis equals StartFraction 1 Over s squared upper R 1 upper R 2 upper C 1 upper C 2 plus s left parenthesis upper R 1 plus upper R 2 right parenthesis upper C 2 plus 1 EndFraction equals StartFraction 1 divided by upper R 1 upper R 2 upper C 1 upper C 2 Over s squared plus s left parenthesis upper R 1 plus upper R 2 right parenthesis divided by upper R 1 upper R 2 upper C 1 plus 1 divided by upper R 1 upper R 2 upper C 1 upper C 2 EndFraction
And we have Expression (9.15). 
Problem 9.4 Design a second-order bandstop ﬁlter, Chebyshev 1 type, with lower 
and upper cutoff frequencies 100 and 200 rad/s, respectively. 
Solution From Table 9.2, we get the transfer function of a ﬁrst-order lowpass ﬁlter 
with cutoff frequency 1 rad/s: 
upper H 
left parenthesis s right parenthesis equals StartFraction 1.024 Over s plus 1.024 EndFraction
up per H le
ft parenthesis s right parenthesis equals StartFraction 1.024 Over s plus 1.024 EndFraction
To transform this into a bandstop ﬁlter, we use the substitution in Eq. (9.26): 
s ri ght ar row StartFraction s left parenthesis 200 minus 100 right parenthesis Over s squared plus 200 dot 100 EndFraction equals StartFraction 100 s Over s squared plus 20000 EndFraction
s r ight a rrow S t
artFraction s left parenthesis 200 minus 100 right parenthesis Over s squared plus 200 dot 100 EndFraction equals StartFraction 100 s Over s squared plus 20000 EndFraction
s r ight arrow StartFraction s left parenthesis 200 minus 100 right parenthesis Over s squared plus 200 dot 100 EndFraction equals StartFraction 100 s Over s squared plus 20000 EndFraction
Table 9.2 Chebyshev 1 ﬁlter 
polynomials (passband ripple 
= 3 dB)  
Order
Polynomial 
1
1.024 div ided by left parenthesis s plus 1.024 right parenthesis
2
0.5012 
d
ivi ded by lef t parent
hesis s squared plus 0.6449 s plus 0.7079 right parenthesis
3
0.2506 
d
ivi ded by left  parenthes is s cub
ed plus 0.5972 s squared plus 0.9283 s plus 0.2506 right parenthesis

9.8 Solved Problems
205
Inserted into Eq. (9.30): 
upper H
 left parenthesis s right parenthesis equals StartStartFraction 1.024 OverOver StartFraction 100 s Over s squared plus 20000 EndFraction plus 1.024 EndEndFraction equals StartFraction 1.024 left parenthesis s squared plus 20000 right parenthesis Over 100 s plus 1.024 left parenthesis s squared plus 20000 right parenthesis EndFraction equals StartFraction s squared plus 20000 Over s squared plus 97.7 s plus 20000 EndFraction
upper H left parenthesis s right parenthesis equals StartStartFraction 1.024 OverOver StartFraction 100 s Over s squared plus 20000 EndFraction plus 1.024 EndEndFraction equals StartFraction 1.024 left parenthesis s squared plus 20000 right parenthesis Over 100 s plus 1.024 left parenthesis s squared plus 20000 right parenthesis EndFraction equals StartFraction s squared plus 20000 Over s squared plus 97.7 s plus 20000 EndFraction
upper H l eft pare n
thesi
s
 s right p
arenthesis equals StartStartFraction 1.024 OverOver StartFraction 100 s Over s squared plus 20000 EndFraction plus 1.024 EndEndFraction equals StartFraction 1.024 left parenthesis s squared plus 20000 right parenthesis Over 100 s plus 1.024 left parenthesis s squared plus 20000 right parenthesis EndFraction equals StartFraction s squared plus 20000 Over s squared plus 97.7 s plus 20000 EndFraction
upper  H left
 
par enthesi
s  
s r ight parenthesis equals StartStartFraction 1.024 OverOver StartFraction 100 s Over s squared plus 20000 EndFraction plus 1.024 EndEndFraction equals StartFraction 1.024 left parenthesis s squared plus 20000 right parenthesis Over 100 s plus 1.024 left parenthesis s squared plus 20000 right parenthesis EndFraction equals StartFraction s squared plus 20000 Over s squared plus 97.7 s plus 20000 EndFraction
up er H lef t parenthesis s right parenthesis equals StartStartFraction 1.024 OverOver StartFraction 100 s Over s squared plus 20000 EndFraction plus 1.024 EndEndFraction equals StartFraction 1.024 left parenthesis s squared plus 20000 right parenthesis Over 100 s plus 1.024 left parenthesis s squared plus 20000 right parenthesis EndFraction equals StartFraction s squared plus 20000 Over s squared plus 97.7 s plus 20000 EndFraction
The ampliﬁcation diagram of this ﬁlter is illustrated in Fig. 9.53. 
Problem 9.5 A ﬁlter has an impulse response as illustrated in Fig. 9.54. What is the 
output y(t) if Fig.  9.55 represents the input signal x(t)? 
Fig. 9.53 Bandstop ﬁlter 
Fig. 9.54 Impulse response 
Fig. 9.55 Input signal x(t)

206
9
Analog Filters
Fig. 9.56 x(t –  τ ) for different t 
Fig. 9.57 a h(t) and  x(t –  τ ) at times 0 < t < 1.  b h(t) and  x(t –  τ ) at times  1 <  t < 2.  
Solution Fig. 9.56 illustrates the function x(t – τ ) at some times t, and Fig. 9.57a 
illustrates h(t) and x(t –  τ ) for times 0 < t < 1. Since x(t) = t (in Fig. 9.55), x(t –  τ ) 
= t –  τ. Hence:
i nt
eg
ra l Sub script 0 S
u
perscript t Baseline 1 dot left parenthesis t minus tau right parenthesis d tau equals left bracket t tau minus one half tau squared right bracket Subscript 0 Superscript t Baseline equals t squared minus one half t squared equals ModifyingBelow one half t squared With quotation dash
integ
ral
 S
ubscr ipt 0 Superscript t Baseline 1 dot left parenthesis t minus tau right parenthesis d tau equals left bracket t tau minus one half tau squared right bracket Subscript 0 Superscript t Baseline equals t squared minus one half t squared equals ModifyingBelow one half t squared With quotation dash
integ ral Subscript 0 Superscript t Baseline 1 dot left parenthesis t minus tau right parenthesis d tau equals left bracket t tau minus one half tau squared right bracket Subscript 0 Superscript t Baseline equals t squared minus one half t squared equals ModifyingBelow one half t squared With quotation dash
integral Subscript 0 Superscript t Baseline 1 dot left parenthesis t minus tau right parenthesis d tau equals left bracket t tau minus one half tau squared right bracket Subscript 0 Superscript t Baseline equals t squared minus one half t squared equals ModifyingBelow one half t squared With quotation dash
Figure 9.57b illustrates the signals for 1 < t < 2:  
S
t
artL
ay out 1 st Row 1st 
C
o
lu
mn Blank 2 nd Column 
i
ntegral Subscript t minus 1 Superscript 1 Baseline 1 dot left parenthesis t minus tau right parenthesis d tau plus integral Subscript 1 Superscript t Baseline left parenthesis negative 1 right parenthesis dot left parenthesis t minus tau right parenthesis d tau equals left bracket t tau minus one half tau squared right bracket Subscript t minus 1 Superscript 1 Baseline minus left bracket t tau minus one half tau squared right bracket Subscript 1 Superscript t Baseline 2nd Row 1st Column Blank 2nd Column equals t minus one half minus left parenthesis t left parenthesis t minus 1 right parenthesis minus one half left parenthesis t minus 1 right parenthesis squared right parenthesis minus left parenthesis t squared minus one half t squared minus t plus one half right parenthesis equals midline horizontal ellipsis equals ModifyingBelow minus t squared plus 2 t minus one half With quotation dash EndLayout
Start
Lay
out 
1
s
t Row 1st Column Blank 2nd Column integral Subscript t minus 1 Superscript 1 Baseline 1 dot left parenthesis t minus tau right parenthesis d tau plus integral Subscript 1 Superscript t Baseline left parenthesis negative 1 right parenthesis dot left parenthesis t minus tau right parenthesis d tau equals left bracket t tau minus one half tau squared right bracket Subscript t minus 1 Superscript 1 Baseline minus left bracket t tau minus one half tau squared right bracket Subscript 1 Superscript t Baseline 2nd Row 1st Column Blank 2nd Column equals t minus one half minus left parenthesis t left parenthesis t minus 1 right parenthesis minus one half left parenthesis t minus 1 right parenthesis squared right parenthesis minus left parenthesis t squared minus one half t squared minus t plus one half right parenthesis equals midline horizontal ellipsis equals ModifyingBelow minus t squared plus 2 t minus one half With quotation dash EndLayout
Start
Lay
ou
t 1s t Row 1st Column Blank 2nd Column integral Subscript t minus 1 Superscript 1 Baseline 1 dot left parenthesis t minus tau right parenthesis d tau plus integral Subscript 1 Superscript t Baseline left parenthesis negative 1 right parenthesis dot left parenthesis t minus tau right parenthesis d tau equals left bracket t tau minus one half tau squared right bracket Subscript t minus 1 Superscript 1 Baseline minus left bracket t tau minus one half tau squared right bracket Subscript 1 Superscript t Baseline 2nd Row 1st Column Blank 2nd Column equals t minus one half minus left parenthesis t left parenthesis t minus 1 right parenthesis minus one half left parenthesis t minus 1 right parenthesis squared right parenthesis minus left parenthesis t squared minus one half t squared minus t plus one half right parenthesis equals midline horizontal ellipsis equals ModifyingBelow minus t squared plus 2 t minus one half With quotation dash EndLayout
St a
r
tLay out 1st Row 1st Column Blank 2nd Column integral Subscript t minus 1 Superscript 1 Baseline 1 dot left parenthesis t minus tau right parenthesis d tau plus integral Subscript 1 Superscript t Baseline left parenthesis negative 1 right parenthesis dot left parenthesis t minus tau right parenthesis d tau equals left bracket t tau minus one half tau squared right bracket Subscript t minus 1 Superscript 1 Baseline minus left bracket t tau minus one half tau squared right bracket Subscript 1 Superscript t Baseline 2nd Row 1st Column Blank 2nd Column equals t minus one half minus left parenthesis t left parenthesis t minus 1 right parenthesis minus one half left parenthesis t minus 1 right parenthesis squared right parenthesis minus left parenthesis t squared minus one half t squared minus t plus one half right parenthesis equals midline horizontal ellipsis equals ModifyingBelow minus t squared plus 2 t minus one half With quotation dash EndLayout
Start Layou
t
 
1
st Row 1st Column Blank 2nd Column integral Subscript t minus 1 Superscript 1 Baseline 1 dot left parenthesis t minus tau right parenthesis d tau plus integral Subscript 1 Superscript t Baseline left parenthesis negative 1 right parenthesis dot left parenthesis t minus tau right parenthesis d tau equals left bracket t tau minus one half tau squared right bracket Subscript t minus 1 Superscript 1 Baseline minus left bracket t tau minus one half tau squared right bracket Subscript 1 Superscript t Baseline 2nd Row 1st Column Blank 2nd Column equals t minus one half minus left parenthesis t left parenthesis t minus 1 right parenthesis minus one half left parenthesis t minus 1 right parenthesis squared right parenthesis minus left parenthesis t squared minus one half t squared minus t plus one half right parenthesis equals midline horizontal ellipsis equals ModifyingBelow minus t squared plus 2 t minus one half With quotation dash EndLayout
Start Layo ut 1st Row 1st Column Blank 2nd Column integral Subscript t minus 1 Superscript 1 Baseline 1 dot left parenthesis t minus tau right parenthesis d tau plus integral Subscript 1 Superscript t Baseline left parenthesis negative 1 right parenthesis dot left parenthesis t minus tau right parenthesis d tau equals left bracket t tau minus one half tau squared right bracket Subscript t minus 1 Superscript 1 Baseline minus left bracket t tau minus one half tau squared right bracket Subscript 1 Superscript t Baseline 2nd Row 1st Column Blank 2nd Column equals t minus one half minus left parenthesis t left parenthesis t minus 1 right parenthesis minus one half left parenthesis t minus 1 right parenthesis squared right parenthesis minus left parenthesis t squared minus one half t squared minus t plus one half right parenthesis equals midline horizontal ellipsis equals ModifyingBelow minus t squared plus 2 t minus one half With quotation dash EndLayout
S
t
a rt L a yo ut 1s t Row  1st Column Blank 2nd Column integral Subscript t minus 1 Superscript 1 Baseline 1 dot left parenthesis t minus tau right parenthesis d tau plus integral Subscript 1 Superscript t Baseline left parenthesis negative 1 right parenthesis dot left parenthesis t minus tau right parenthesis d tau equals left bracket t tau minus one half tau squared right bracket Subscript t minus 1 Superscript 1 Baseline minus left bracket t tau minus one half tau squared right bracket Subscript 1 Superscript t Baseline 2nd Row 1st Column Blank 2nd Column equals t minus one half minus left parenthesis t left parenthesis t minus 1 right parenthesis minus one half left parenthesis t minus 1 right parenthesis squared right parenthesis minus left parenthesis t squared minus one half t squared minus t plus one half right parenthesis equals midline horizontal ellipsis equals ModifyingBelow minus t squared plus 2 t minus one half With quotation dash EndLayout
StartLayout 1st Row 1st Column Blank 2nd Column integral Subscript t minus 1 Superscript 1 Baseline 1 dot left parenthesis t minus tau right parenthesis d tau plus integral Subscript 1 Superscript t Baseline left parenthesis negative 1 right parenthesis dot left parenthesis t minus tau right parenthesis d tau equals left bracket t tau minus one half tau squared right bracket Subscript t minus 1 Superscript 1 Baseline minus left bracket t tau minus one half tau squared right bracket Subscript 1 Superscript t Baseline 2nd Row 1st Column Blank 2nd Column equals t minus one half minus left parenthesis t left parenthesis t minus 1 right parenthesis minus one half left parenthesis t minus 1 right parenthesis squared right parenthesis minus left parenthesis t squared minus one half t squared minus t plus one half right parenthesis equals midline horizontal ellipsis equals ModifyingBelow minus t squared plus 2 t minus one half With quotation dash EndLayout

9.8 Solved Problems
207
Fig. 9.58 h(t) and  x(t –  τ ) at times 2 < t < 3  
Fig. 9.59 The convolution h(t) ⊗ x(t) 
Figure 9.58 illustrates the signals for 2 < t < 3:  
S
t
artL
ayout 1 st Row 1st 
C
o
lumn
 Blank 2nd Co
lumn integral Subscript t minus 1 Superscript 2 Baseline left parenthesis negative 1 right parenthesis left parenthesis t minus tau right parenthesis d tau equals integral Subscript t minus 1 Superscript 2 Baseline left parenthesis tau minus t right parenthesis d tau equals left bracket one half tau squared minus t tau right bracket Subscript t minus 1 Superscript 2 Baseline 2nd Row 1st Column Blank 2nd Column equals 2 minus 2 t minus left parenthesis one half left parenthesis t minus 1 right parenthesis squared minus t left parenthesis t minus 1 right parenthesis right parenthesis equals midline horizontal ellipsis equals ModifyingBelow one half t squared minus 2 t plus three halves With quotation dash EndLayout
StartL ayou
t 1
st R
ow 1 st Co l
umn Blank 2nd Column integral Subscript t minus 1 Superscript 2 Baseline left parenthesis negative 1 right parenthesis left parenthesis t minus tau right parenthesis d tau equals integral Subscript t minus 1 Superscript 2 Baseline left parenthesis tau minus t right parenthesis d tau equals left bracket one half tau squared minus t tau right bracket Subscript t minus 1 Superscript 2 Baseline 2nd Row 1st Column Blank 2nd Column equals 2 minus 2 t minus left parenthesis one half left parenthesis t minus 1 right parenthesis squared minus t left parenthesis t minus 1 right parenthesis right parenthesis equals midline horizontal ellipsis equals ModifyingBelow one half t squared minus 2 t plus three halves With quotation dash EndLayout
Start Layout  1st R ow 1
s
t  C o l um n Blank 2nd Column integral Subscript t minus 1 Superscript 2 Baseline left parenthesis negative 1 right parenthesis left parenthesis t minus tau right parenthesis d tau equals integral Subscript t minus 1 Superscript 2 Baseline left parenthesis tau minus t right parenthesis d tau equals left bracket one half tau squared minus t tau right bracket Subscript t minus 1 Superscript 2 Baseline 2nd Row 1st Column Blank 2nd Column equals 2 minus 2 t minus left parenthesis one half left parenthesis t minus 1 right parenthesis squared minus t left parenthesis t minus 1 right parenthesis right parenthesis equals midline horizontal ellipsis equals ModifyingBelow one half t squared minus 2 t plus three halves With quotation dash EndLayout
Start Layou t 1st Row 1st Column Blank 2nd Column integral Subscript t minus 1 Superscript 2 Baseline left parenthesis negative 1 right parenthesis left parenthesis t minus tau right parenthesis d tau equals integral Subscript t minus 1 Superscript 2 Baseline left parenthesis tau minus t right parenthesis d tau equals left bracket one half tau squared minus t tau right bracket Subscript t minus 1 Superscript 2 Baseline 2nd Row 1st Column Blank 2nd Column equals 2 minus 2 t minus left parenthesis one half left parenthesis t minus 1 right parenthesis squared minus t left parenthesis t minus 1 right parenthesis right parenthesis equals midline horizontal ellipsis equals ModifyingBelow one half t squared minus 2 t plus three halves With quotation dash EndLayout
StartLayout 1st Row 1st Column Blank 2nd Column integral Subscript t minus 1 Superscript 2 Baseline left parenthesis negative 1 right parenthesis left parenthesis t minus tau right parenthesis d tau equals integral Subscript t minus 1 Superscript 2 Baseline left parenthesis tau minus t right parenthesis d tau equals left bracket one half tau squared minus t tau right bracket Subscript t minus 1 Superscript 2 Baseline 2nd Row 1st Column Blank 2nd Column equals 2 minus 2 t minus left parenthesis one half left parenthesis t minus 1 right parenthesis squared minus t left parenthesis t minus 1 right parenthesis right parenthesis equals midline horizontal ellipsis equals ModifyingBelow one half t squared minus 2 t plus three halves With quotation dash EndLayout
The convolution signal is illustrated in Fig. 9.59.

Chapter 10 
Digital Filters 
Abstract In this chapter digital ﬁlters are introduced. While an analog ﬁlter is 
implemented in hardware, a digital ﬁlter is implemented in software; it is a computer 
algorithm. Hence, this chapter works with sampled signals and the objective is to 
do the same thing with sampled signals as we did with analog signals (non-sampled 
signals) in Chap. 9, but instead of using hardware, software algorithms are presented 
that do the ﬁltering. First, discrete-time convolution is deﬁned, but the focus is on 
the FIR and IIR ﬁlters, which are the two most common digital ﬁlter algorithms for 
sampled signals. The reader will learn two design techniques for digital ﬁlters; the 
inverse Fourier transform method and the bilinear transformation method. 
10.1 
Introduction 
In the previous chapter we looked at analog ﬁlters which are implemented in hard-
ware. In this chapter, we will demonstrate how we can achieve the same signal 
processing results using computer algorithms. These computer algorithms are based 
on samples (from an ADC, see Chap. 11) and are called ‘digital ﬁlters’. Compared 
to analog ﬁlters, digital ﬁlters have some advantages but certainly also some disad-
vantages and we will carefully point out the pros and cons of digital ﬁlters in this 
chapter. The objective here is to be able to design any (?) ﬁlter speciﬁed from an 
ampliﬁcation diagram. 
This chapter will depend heavily on our results from the z transform Sect. 7.4.2 
and we will also refer to solved Problem 7.10. 
Figure 10.1 illustrates our general model of an analog ﬁlter.
In Sect. 9.8 we learned that in the time domain, the output from this ﬁlter is the 
convolution between h(t) and x(t), Eq. (9.27): 
y left
 pa
ren
thesis t right p
arenth
esis equals integral Subscript negative normal infinity Superscript normal infinity Baseline h left parenthesis tau right parenthesis x left parenthesis t minus tau right parenthesis d tau left parenthesis 9.27 right parenthesis
To get a digital ﬁlter, we need to sample the signal, i.e., t right arrow n upper T Subscript upper S:
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_10 
209

210
10
Digital Filters
x(t)
h(t)
y(t) 
Fig. 10.1 Signal model
Fig. 10.2 The discrete-time Dirac impulse 
Fig. 10.3 Impulse and 
impulse response 
y left parenthesis t right  p
ar
e
nthes
is rig
ht arrow y left parenthesis n upper T Subscript upper S Baseline right parenthesis equals y left parenthesis n right parenthesis equals y Subscript n Baseline equals sigma summation Underscript i equals negative normal infinity Overscript plus normal infinity Endscripts h Subscript i Baseline x Subscript n minus i
In Eq. (10.2), hn is still the impulse response; the system’s output when the input 
is an impulse. Figures 10.2 and 10.3 illustrate the Dirac impulse in discrete time. 
First, we will assume that all our ﬁlters are ‘causal’. That means that there can’t 
be any output signal before there is an input signal. In Fig. 10.2, the impulse appears 
at time n = 0. If the system is casual, then hn must = 0 if  n < 0. (We could have 
non-causal digital ﬁlters, just not in real time. However, we limit the scope here to 
include only the causal ﬁlters.) That means that the summation in Eq. (10.2) should 
start at i = 0: 
y S ub
s
c
ript
 n Bas
eline equals sigma summation Underscript i equals 0 Overscript normal infinity Endscripts h Subscript i Baseline x Subscript n minus i
Second, if we write out Eq. (10.3) explicitly, then 
y S ubscript n Basel ine equal s h 0 x S u b s
cript n Baseline plus h 1 x Subscript n minus 1 Baseline plus h 2 x Subscript n minus 2 Baseline plus h 3 x Subscript n minus 3 Baseline ellipsis
xn is the ‘latest’ sample and xn – 1  is the second last sample, etc. Notice that we ‘time 
reverse’ the samples, just like we did in analog convolution (see Fig. 9.45). Table 10.1 
illustrates the case where we have a time series of ﬁve samples x equals StartSet x 0 comma x 1 comma x 2 comma x 3 comma x 4 EndSet
and four impulse response coefﬁcients.

10.2 FIR Filters
211
Table 10.1 Convolution in discrete time 
x =[x0  x1  x2  x3  x4]
h0
h1
h2
h3
yn 
x4  x3  x2  x1
y0 = h0 x0 
x4  x3  x2 
h1 x0
y1 = h0 x1 + h1 x0 
x4  x3
h1 x1
h2 x0
y2 = h0 x2 + h1 x1 + h2 x0 
x4 
h1 x2
h2 x1
h3 x0
y3 = h0 x3 + h1 x2 + h2 x1+ h3 x0 
h0 x0 
h0 x1 
h0 x2 
h0 x3 
h0 x4
h1 x3
h2 x2
h3 x1
y4 = h0 x4 + h1 x3 + h2 x2+ h3 x1 
h1 x4
h2 x3
h3 x2
y5 =             h1 x4 + h2 x3+ h3 x2 
h2 x4
h3 x3
y6 =                         h2 x4+ h3 x3 
h3 x4
y7 =                                    h3 x4 
y8 = 0 
In general, there are two kinds of digital ﬁlters. They all use input samples to 
calculate the next output sample, but some ﬁlters also use previous output samples in 
the algorithm to produce the next output sample. Just like analog ﬁlters, digital ﬁlters 
are represented by a transfer function that is a quotient between two polynomials; of 
course, for a digital ﬁlter it is a polynomial in z: 
upper H left parenthesis z right parenthesis equals StartFraction upper B left parenthesis z right parenthesis Over upper A left parenthesis z right parenthesis EndFraction equals ContinuedFraction b 0 plus b 1 z Superscript negative 1 Baseline plus b 2 z Superscript negative 2 Baseline plus ellipsis Over 1 plus a 1 z Superscript negative 1 Baseline plus a 2 z Superscript negative 2 Baseline plus ellipsis
upper H le ft paren thesis z  ri g h t parenthesis equals StartFraction upper B left parenthesis z right parenthesis Over upper A left parenthesis z right parenthesis EndFraction equals ContinuedFraction b 0 plus b 1 z Superscript negative 1 Baseline plus b 2 z Superscript negative 2 Baseline plus ellipsis Over 1 plus a 1 z Superscript negative 1 Baseline plus a 2 z Superscript negative 2 Baseline plus ellipsis
up per H le ft paren the s i s
 z right parenthesis equals StartFraction upper B left parenthesis z right parenthesis Over upper A left parenthesis z right parenthesis EndFraction equals ContinuedFraction b 0 plus b 1 z Superscript negative 1 Baseline plus b 2 z Superscript negative 2 Baseline plus ellipsis Over 1 plus a 1 z Superscript negative 1 Baseline plus a 2 z Superscript negative 2 Baseline plus ellipsis
The ﬁlters that don’t use previous output samples in the next output sample algo-
rithm are characterized by having A(z) = 1, and these are the ﬁlters we will start 
with. 
10.2 
FIR Filters 
If A(z) = 1, then 
upper H le ft paren thesis z  ri g h
t parenthesis equals b 0 plus b 1 z Superscript negative 1 Baseline plus b 2 z Superscript negative 2 Baseline plus ellipsis
Also, remember that the transfer function is by deﬁnition the quotient between 
the output and input signals’ transforms (the z transforms in this case): 
StartLay out 1st Row 1st Column upper H left parenthesis z right parenthesis 2nd Column equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction equals b 0 plus b 1 z Superscript negative 1 Baseline plus b 2 z Superscript negative 2 Baseline plus midline horizontal ellipsis right double arrow 2nd Row 1st Column upper Y left parenthesis z right parenthesis 2nd Column equals upper X left parenthesis z right parenthesis left parenthesis b 0 plus b 1 z Superscript negative 1 Baseline plus b 2 z Superscript negative 2 Baseline plus ellipsis right parenthesis equals 3rd Row 1st Column Blank 2nd Column equals b 0 upper X left parenthesis z right parenthesis plus b 1 upper X left parenthesis z right parenthesis z Superscript negative 1 Baseline plus b 2 upper X left parenthesis z right parenthesis z Superscript negative 2 Baseline plus ellipsis EndLayout
StartLayout  1st Row  1st Col u mn  u pp e
r H left pare
n
the sis z ri ght pare nth e s
i
s 
2nd Column equals Star tFraction up per  Y
 left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction equals b 0 plus b 1 z Superscript negative 1 Baseline plus b 2 z Superscript negative 2 Baseline plus midline horizontal ellipsis right double arrow 2nd Row 1st Column upper Y left parenthesis z right parenthesis 2nd Column equals upper X left parenthesis z right parenthesis left parenthesis b 0 plus b 1 z Superscript negative 1 Baseline plus b 2 z Superscript negative 2 Baseline plus ellipsis right parenthesis equals 3rd Row 1st Column Blank 2nd Column equals b 0 upper X left parenthesis z right parenthesis plus b 1 upper X left parenthesis z right parenthesis z Superscript negative 1 Baseline plus b 2 upper X left parenthesis z right parenthesis z Superscript negative 2 Baseline plus ellipsis EndLayout

212
10
Digital Filters
Fig. 10.4 The block 
diagram of a FIR ﬁlter 
If we take the inverse z transform of both sides of Eq. (10.7) we get, remembering 
from Problem 7.10 that the z transform of x Subscript n minus n 0 is upper X left parenthesis z right parenthesis z Superscript minus n 0: 
y S ubscript n Basel ine equal s b  0
 x Subscript n Baseline plus b 1 x Subscript n minus 1 Baseline plus b 2 x Subscript n minus 2 Baseline plus ellipsis
Comparing with Eq. (10.4), we can see that in this case, the ﬁlter coefﬁcients bi 
are also the impulse response coefﬁcients. This means that the number of impulse 
response coefﬁcients is limited by the number of ﬁlter coefﬁcients, which is a ﬁnite 
number; this kind of ﬁlters are called ‘FIR’ ﬁlters; Finite Impulse Response ﬁlters. 
Figure 10.4 illustrates the block diagram of an FIR ﬁlter. 
Notice in Fig. 10.4 that each sample must be ‘saved’ and pushed downwards in the 
delay chain. Notice also that each ‘delay box’ is represented by ‘z−1’; this represents 
the delay of one sample (in frequency space). (In time space it would be T S.) 
Also, each ‘branch’ in the delay chain is called a ‘tap’ and ﬁlters are sometimes 
characterized by the number of taps used: An n-tap ﬁlter has n delay taps. 
Example 10.1 Plot the frequency response of the following FIR ﬁlter: 
y S ubscript n Baseline equals 0.25  x Subscript n Baseline plus 0.25 x Subscript n minus 1 Baseline plus 0.25 x Subscript n minus 2 Baseline plus 0.25 x Subscript n minus 3
Solution This ﬁlter produces the average of four samples; we expect a lowpass 
behavior. To ﬁnd the transfer function, we must ﬁrst take the z transform of both 
sides: 
StartLayout 1st Row 1st Column upper Y left parenthesis z right parenthesis 2nd Column equals one fourth left parenthesis upper X left parenthesis z right parenthesis plus upper X left parenthesis z right parenthesis z Superscript negative 1 Baseline plus upper X left parenthesis z right parenthesis z Superscript negative 2 Baseline plus upper X left parenthesis z right parenthesis z Superscript negative 3 Baseline right parenthesis equals 2nd Row 1st Column Blank 2nd Column equals one fourth left parenthesis 1 plus z Superscript negative 1 Baseline plus z Superscript negative 2 Baseline plus z Superscript negative 3 Baseline right parenthesis upper X left parenthesis z right parenthesis right double arrow 3rd Row 1st Column upper H left parenthesis z right parenthesis 2nd Column equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction equals one fourth left parenthesis 1 plus z Superscript negative 1 Baseline plus z Superscript negative 2 Baseline plus z Superscript negative 3 Baseline right parenthesis equals one fourth left parenthesis z Superscript 1.5 Baseline plus z Superscript 0.5 Baseline plus z Superscript negative 0.5 Baseline plus z Superscript negative 1.5 Baseline right parenthesis dot z Superscript negative 1.5 EndLayout
S
t
artLayout 1st R ow 1st Col umn upper Y
 l
eft parenthesis z right parenthesis 2nd Column equals one fourth left parenthesis upper X left parenthesis z right parenthesis plus upper X left parenthesis z right parenthesis z Superscript negative 1 Baseline plus upper X left parenthesis z right parenthesis z Superscript negative 2 Baseline plus upper X left parenthesis z right parenthesis z Superscript negative 3 Baseline right parenthesis equals 2nd Row 1st Column Blank 2nd Column equals one fourth left parenthesis 1 plus z Superscript negative 1 Baseline plus z Superscript negative 2 Baseline plus z Superscript negative 3 Baseline right parenthesis upper X left parenthesis z right parenthesis right double arrow 3rd Row 1st Column upper H left parenthesis z right parenthesis 2nd Column equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction equals one fourth left parenthesis 1 plus z Superscript negative 1 Baseline plus z Superscript negative 2 Baseline plus z Superscript negative 3 Baseline right parenthesis equals one fourth left parenthesis z Superscript 1.5 Baseline plus z Superscript 0.5 Baseline plus z Superscript negative 0.5 Baseline plus z Superscript negative 1.5 Baseline right parenthesis dot z Superscript negative 1.5 EndLayout
S
t
ar tLayou t 1st Row 1s
t Colum
n upper Y left parenthesis z right parenthesis 2nd Column equals one fourth left parenthesis upper X left parenthesis z right parenthesis plus upper X left parenthesis z right parenthesis z Superscript negative 1 Baseline plus upper X left parenthesis z right parenthesis z Superscript negative 2 Baseline plus upper X left parenthesis z right parenthesis z Superscript negative 3 Baseline right parenthesis equals 2nd Row 1st Column Blank 2nd Column equals one fourth left parenthesis 1 plus z Superscript negative 1 Baseline plus z Superscript negative 2 Baseline plus z Superscript negative 3 Baseline right parenthesis upper X left parenthesis z right parenthesis right double arrow 3rd Row 1st Column upper H left parenthesis z right parenthesis 2nd Column equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction equals one fourth left parenthesis 1 plus z Superscript negative 1 Baseline plus z Superscript negative 2 Baseline plus z Superscript negative 3 Baseline right parenthesis equals one fourth left parenthesis z Superscript 1.5 Baseline plus z Superscript 0.5 Baseline plus z Superscript negative 0.5 Baseline plus z Superscript negative 1.5 Baseline right parenthesis dot z Superscript negative 1.5 EndLayout
StartLayout 1st Row 1st Column upper Y left parenthesis z right parenthesis 2nd Column equals one fourth left parenthesis upper X left parenthesis z right parenthesis plus upper X left parenthesis z right parenthesis z Superscript negative 1 Baseline plus upper X left parenthesis z right parenthesis z Superscript negative 2 Baseline plus upper X left parenthesis z right parenthesis z Superscript negative 3 Baseline right parenthesis equals 2nd Row 1st Column Blank 2nd Column equals one fourth left parenthesis 1 plus z Superscript negative 1 Baseline plus z Superscript negative 2 Baseline plus z Superscript negative 3 Baseline right parenthesis upper X left parenthesis z right parenthesis right double arrow 3rd Row 1st Column upper H left parenthesis z right parenthesis 2nd Column equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction equals one fourth left parenthesis 1 plus z Superscript negative 1 Baseline plus z Superscript negative 2 Baseline plus z Superscript negative 3 Baseline right parenthesis equals one fourth left parenthesis z Superscript 1.5 Baseline plus z Superscript 0.5 Baseline plus z Superscript negative 0.5 Baseline plus z Superscript negative 1.5 Baseline right parenthesis dot z Superscript negative 1.5 EndLayout
S
t
ar tLayou t 1st Row 1s
t Column upper Y left parenthesis z right parenthesis 2nd Column equals one fourth left parenthesis upper X left parenthesis z right parenthesis plus upper X left parenthesis z right parenthesis z Superscript negative 1 Baseline plus upper X left parenthesis z right parenthesis z Superscript negative 2 Baseline plus upper X left parenthesis z right parenthesis z Superscript negative 3 Baseline right parenthesis equals 2nd Row 1st Column Blank 2nd Column equals one fourth left parenthesis 1 plus z Superscript negative 1 Baseline plus z Superscript negative 2 Baseline plus z Superscript negative 3 Baseline right parenthesis upper X left parenthesis z right parenthesis right double arrow 3rd Row 1st Column upper H left parenthesis z right parenthesis 2nd Column equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction equals one fourth left parenthesis 1 plus z Superscript negative 1 Baseline plus z Superscript negative 2 Baseline plus z Superscript negative 3 Baseline right parenthesis equals one fourth left parenthesis z Superscript 1.5 Baseline plus z Superscript 0.5 Baseline plus z Superscript negative 0.5 Baseline plus z Superscript negative 1.5 Baseline right parenthesis dot z Superscript negative 1.5 EndLayout
S
t
artLa yout 1s t Row 1s t Column
 upper Y left parenthesis z right parenthesis 2nd Column equals one fourth left parenthesis upper X left parenthesis z right parenthesis plus upper X left parenthesis z right parenthesis z Superscript negative 1 Baseline plus upper X left parenthesis z right parenthesis z Superscript negative 2 Baseline plus upper X left parenthesis z right parenthesis z Superscript negative 3 Baseline right parenthesis equals 2nd Row 1st Column Blank 2nd Column equals one fourth left parenthesis 1 plus z Superscript negative 1 Baseline plus z Superscript negative 2 Baseline plus z Superscript negative 3 Baseline right parenthesis upper X left parenthesis z right parenthesis right double arrow 3rd Row 1st Column upper H left parenthesis z right parenthesis 2nd Column equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction equals one fourth left parenthesis 1 plus z Superscript negative 1 Baseline plus z Superscript negative 2 Baseline plus z Superscript negative 3 Baseline right parenthesis equals one fourth left parenthesis z Superscript 1.5 Baseline plus z Superscript 0.5 Baseline plus z Superscript negative 0.5 Baseline plus z Superscript negative 1.5 Baseline right parenthesis dot z Superscript negative 1.5 EndLayout

10.3 IIR Filters
213
Fig. 10.5 The frequency response of the averaging ﬁlter 
We get the Fourier transform by setting z = ejΩ: 
StartLay out 1st Row  1st Column upper H left parenthesis normal upper Omega right parenthesis 2nd Column equals upper H left parenthesis z right parenthesis vertical bar Subscript z equals e Sub Superscript j normal upper Omega Baseline equals one fourth left parenthesis e Superscript j 1.5 normal upper Omega Baseline plus e Superscript j 0.5 normal upper Omega Baseline plus e Superscript minus j 0.5 normal upper Omega Baseline plus e Superscript minus j 1.5 normal upper Omega Baseline right parenthesis dot e Superscript minus j 1.5 normal upper Omega Baseline equals 2nd Row 1st Column Blank 2nd Column equals one fourth dot 2 left parenthesis cosine 0.5 normal upper Omega plus cosine 1.5 normal upper Omega right parenthesis dot e Superscript minus j 1.5 normal upper Omega Baseline right double arrow ModifyingBelow StartAbsoluteValue upper H left parenthesis normal upper Omega right parenthesis EndAbsoluteValue equals one half dot StartAbsoluteValue cosine 0.5 normal upper Omega plus cosine 1.5 normal upper Omega EndAbsoluteValue With quotation dash EndLayout
S
t
artLay out 1st Row 1st C olumn uppe
r H left pa
renthesis normal upper Omega right parenthesis 2nd Column equals upper H left parenthesis z right parenthesis vertical bar Subscript z equals e Sub Superscript j normal upper Omega Baseline equals one fourth left parenthesis e Superscript j 1.5 normal upper Omega Baseline plus e Superscript j 0.5 normal upper Omega Baseline plus e Superscript minus j 0.5 normal upper Omega Baseline plus e Superscript minus j 1.5 normal upper Omega Baseline right parenthesis dot e Superscript minus j 1.5 normal upper Omega Baseline equals 2nd Row 1st Column Blank 2nd Column equals one fourth dot 2 left parenthesis cosine 0.5 normal upper Omega plus cosine 1.5 normal upper Omega right parenthesis dot e Superscript minus j 1.5 normal upper Omega Baseline right double arrow ModifyingBelow StartAbsoluteValue upper H left parenthesis normal upper Omega right parenthesis EndAbsoluteValue equals one half dot StartAbsoluteValue cosine 0.5 normal upper Omega plus cosine 1.5 normal upper Omega EndAbsoluteValue With quotation dash EndLayout
St artLayou t 1s t Row 1st Column uppe r H left parenthesis normal upper Omega right parenthesis 2nd Column equals upper H left parenthesis z right parenthesis vertical bar Subscript z equals e Sub Superscript j normal upper Omega Baseline equals one fourth left parenthesis e Superscript j 1.5 normal upper Omega Baseline plus e Superscript j 0.5 normal upper Omega Baseline plus e Superscript minus j 0.5 normal upper Omega Baseline plus e Superscript minus j 1.5 normal upper Omega Baseline right parenthesis dot e Superscript minus j 1.5 normal upper Omega Baseline equals 2nd Row 1st Column Blank 2nd Column equals one fourth dot 2 left parenthesis cosine 0.5 normal upper Omega plus cosine 1.5 normal upper Omega right parenthesis dot e Superscript minus j 1.5 normal upper Omega Baseline right double arrow ModifyingBelow StartAbsoluteValue upper H left parenthesis normal upper Omega right parenthesis EndAbsoluteValue equals one half dot StartAbsoluteValue cosine 0.5 normal upper Omega plus cosine 1.5 normal upper Omega EndAbsoluteValue With quotation dash EndLayout
St artLayo ut 1 st Row  1st Column upper H left parenthesis normal upper Omega right parenthesis 2nd Column equals upper H left parenthesis z right parenthesis vertical bar Subscript z equals e Sub Superscript j normal upper Omega Baseline equals one fourth left parenthesis e Superscript j 1.5 normal upper Omega Baseline plus e Superscript j 0.5 normal upper Omega Baseline plus e Superscript minus j 0.5 normal upper Omega Baseline plus e Superscript minus j 1.5 normal upper Omega Baseline right parenthesis dot e Superscript minus j 1.5 normal upper Omega Baseline equals 2nd Row 1st Column Blank 2nd Column equals one fourth dot 2 left parenthesis cosine 0.5 normal upper Omega plus cosine 1.5 normal upper Omega right parenthesis dot e Superscript minus j 1.5 normal upper Omega Baseline right double arrow ModifyingBelow StartAbsoluteValue upper H left parenthesis normal upper Omega right parenthesis EndAbsoluteValue equals one half dot StartAbsoluteValue cosine 0.5 normal upper Omega plus cosine 1.5 normal upper Omega EndAbsoluteValue With quotation dash EndLayout
The ampliﬁcation diagram is plotted in Fig. 10.5, and as we expected, it has a 
lowpass characteristic. 
In Sect. 7.4 we learned about poles and zeros of a system; the roots of the numerator 
polynomial in Eq. (10.5) are the ‘zeros’, and the roots of the denominator polynomial 
are the ‘poles’. Obviously, a FIR ﬁlter doesn’t have any poles; that makes it inherently 
stable. The averaging FIR ﬁlter in Example 10.1 has three zeros: 
1 plus z  Super script  ne
gativ e  1 Basel i ne plus z Superscript negative 2 Baseline plus z Superscript negative 3 Baseline equals 0 right double arrow z 1 equals negative 1 z Subscript 2 comma 3 Baseline equals plus or minus j
These zeros are illustrated in Fig. 10.6. Compare this diagram to the frequency 
response in Fig. 10.5 and remember that the Fourier transform is on the unit circle in 
the z plane. Figure 10.6 indicates that we should have a zero response for ‘frequencies’
Ω = π/2 and π, which is conﬁrmed by the ampliﬁcation diagram in Fig. 10.5.
10.3 
IIR Filters 
Let’s see what happens if the denominator polynomial in Eq. (10.5) is /= 1. For 
example, if B(z) = 1 and A(z) = 1 + a1z–1 then 
StartLa
yout 1st Row 1st Column upper H left parenthesis z right parenthesis equals StartFraction 1 Over 1 plus a 1 z Superscript negative 1 Baseline EndFraction 2nd Column equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis x right parenthesis EndFraction right double arrow upper Y left parenthesis z right parenthesis left parenthesis 1 plus a 1 z Superscript negative 1 Baseline right parenthesis equals upper X left parenthesis z right parenthesis 2nd Row 1st Column upper Y left parenthesis z right parenthesis plus a 1 upper Y left parenthesis z right parenthesis z Superscript negative 1 2nd Column equals upper X left parenthesis z right parenthesis right double arrow y Subscript n Baseline equals minus a 1 y Subscript n minus 1 Baseline plus x Subscript n EndLayout
St artLayou t 1st Row 1st Column upper H left parenthesis z right parenthesis equals StartFraction 1 Over 1 plus a 1 z Superscript negative 1 Baseline EndFraction 2nd Column equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis x right parenthesis EndFraction right double arrow upper Y left parenthesis z right parenthesis left parenthesis 1 plus a 1 z Superscript negative 1 Baseline right parenthesis equals upper X left parenthesis z right parenthesis 2nd Row 1st Column upper Y left parenthesis z right parenthesis plus a 1 upper Y left parenthesis z right parenthesis z Superscript negative 1 2nd Column equals upper X left parenthesis z right parenthesis right double arrow y Subscript n Baseline equals minus a 1 y Subscript n minus 1 Baseline plus x Subscript n EndLayout
StartLayout 1
s
t Row 1st 
Column u
pper H left parent hesis z right  parenthe sis equals StartFraction 1 Over 1 plus a 1 z Superscript negative 1 Baseline EndFraction 2nd Column equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis x right parenthesis EndFraction right double arrow upper Y left parenthesis z right parenthesis left parenthesis 1 plus a 1 z Superscript negative 1 Baseline right parenthesis equals upper X left parenthesis z right parenthesis 2nd Row 1st Column upper Y left parenthesis z right parenthesis plus a 1 upper Y left parenthesis z right parenthesis z Superscript negative 1 2nd Column equals upper X left parenthesis z right parenthesis right double arrow y Subscript n Baseline equals minus a 1 y Subscript n minus 1 Baseline plus x Subscript n EndLayout
Let’s see what the impulse response is: x S ubscr ipt n  Baseline equals delta Subscript n Baseline right double arrow y Subscript n Baseline equals h Subscript n

214
10
Digital Filters
Fig. 10.6 Zeros of FIR ﬁlter 
in Example 10.1
Sta r tLayout 1st R ow 1 st C olum n y 0
 2n d  Colum n equ a ls mi nus a  1 y
 Su b script  n mi
nu
s 1  Baseli ne plus d elta 0 equals 0 plus 1 equals 1 equals h 0 2nd Row 1st Column h 1 2nd Column equals minus a 1 h 0 plus delta 1 equals minus a 1 1 plus 0 equals minus a 1 3rd Row 1st Column h 2 2nd Column equals minus a 1 h 1 equals a 1 squared 4th Row 1st Column h 3 2nd Column equals minus a 1 h 2 equals left parenthesis minus a 1 right parenthesis cubed right double arrow h Subscript n Baseline equals left parenthesis minus a 1 right parenthesis Superscript n EndLayout
From this simple example we can see that the number of impulse response coef-
ﬁcients is inﬁnite; when A(z) /= 1, we have an Inﬁnite Impulse Response ﬁlter, an 
‘IIR’ ﬁlter. Since the nth impulse response coefﬁcient is (−a1)n, we conclude that 
the ﬁlter is unstable if StartAbsoluteValue a 1 EndAbsoluteValue greater than or equals 0. The ﬁlter pole is 
1 plus a 1  z S upe rs c ript negative 1 Baseline equals 0 right double arrow z Subscript p Baseline equals minus a 1
Figure 10.7 illustrates the pole’s location for the case where StartAbsoluteValue a 1 EndAbsoluteValue greater than 1 and StartAbsoluteValue a 1 EndAbsoluteValue less than 1.
From Fig. 10.7 we can see that the ﬁlter is unstable if the pole is outside the unit 
circle; for digital ﬁlters all poles must be within the unit circle. This conclusion is 
general and consistent with our results in Sect. 7.4.2 (Fig. 7.38). 
Equation (10.5) represents the general expression for a second-order IIR ﬁlter: 
upper H lef t parent hesis z right parenthesis equals StartFraction b 0 plus b 1 z Superscript negative 1 Baseline plus b 2 z Superscript negative 2 Baseline Over 1 plus a 1 z Superscript negative 1 Baseline plus a 2 z Superscript negative 2 Baseline EndFraction equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction
up per H le ft paren th esis z right parenthesis equals StartFraction b 0 plus b 1 z Superscript negative 1 Baseline plus b 2 z Superscript negative 2 Baseline Over 1 plus a 1 z Superscript negative 1 Baseline plus a 2 z Superscript negative 2 Baseline EndFraction equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction
upper 
H left parenthesis z right parenthesis equals StartFraction b 0 plus b 1 z Superscript negative 1 Baseline plus b 2 z Superscript negative 2 Baseline Over 1 plus a 1 z Superscript negative 1 Baseline plus a 2 z Superscript negative 2 Baseline EndFraction equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction
Taking the inverse z transform of Eq. (10.9) gives us the difference equation for 
the output sample: 
y S u bscript n aaselin e equals minus a  1 y Sub
script n minus 1 Baseline minus a 2 y Subscript n minus 2 Baseline plus b 0 x Subscript n Baseline plus b 1 x Subscript n minus 1 Baseline plus b 2 x Subscript n minus 2
Figure 10.8 illustrates the block diagram.

10.3 IIR Filters
215
Fig. 10.7 Stable if poles are 
inside the unit circle
Fig. 10.8 Block diagram of 
second-order IIR ﬁlter 
Example 10.2 Consider the ﬁlter left p
arenthesis z right parenthesis equals StartFraction 1 minus z Superscript negative 2 Baseline Over 1 plus 0.81 z Superscript negative 2 Baseline EndFraction
left parenthesis z right parenthesis equals StartFraction 1 minus z Superscript negative 2 Baseline Over 1 plus 0.81 z Superscript negative 2 Baseline EndFraction . 
a Where are the poles and the zeros? b What is the Fourier transform? c Find and 
plot the ampliﬁcation diagram. d What is the difference equation? e Draw the block 
diagram. f What is the impulse response? g What is the output if the input is x = [2, 
−1, 0.5]? 
Solution We can re-write the transfer function as follows: 
upper H  le ft parenthesis z right parenthesis equals StartFraction z squared minus 1 Over z squared plus 0.81 EndFraction equals StartFraction left parenthesis z plus 1 right parenthesis left parenthesis z minus 1 right parenthesis Over left parenthesis z plus 0.9 j right parenthesis left parenthesis z minus 0.9 j right parenthesis EndFraction
up er H le f
t parenthesis z right parenthesis equals StartFraction z squared minus 1 Over z squared plus 0.81 EndFraction equals StartFraction left parenthesis z plus 1 right parenthesis left parenthesis z minus 1 right parenthesis Over left parenthesis z plus 0.9 j right parenthesis left parenthesis z minus 0.9 j right parenthesis EndFraction
upper H left parenthesis z right parenthesis equals StartFraction z squared minus 1 Over z squared plus 0.81 EndFraction equals StartFraction left parenthesis z plus 1 right parenthesis left parenthesis z minus 1 right parenthesis Over left parenthesis z plus 0.9 j right parenthesis left parenthesis z minus 0.9 j right parenthesis EndFraction
and it is obvious that we have two zeros (±1) and two poles (±0.9j). To ﬁnd the 
Fourier transform, we replace z with ejΩ:
StartLa
yout  1st Row 1st Column upper H left parenthesis normal upper Omega right parenthesis 2nd Column equals ModifyingBelow StartFraction e Superscript j 2 normal upper Omega Baseline minus 1 Over e Superscript j 2 normal upper Omega Baseline plus 0.81 EndFraction With quotation dash equals StartFraction left parenthesis e Superscript j normal upper Omega Baseline minus e Superscript minus j normal upper Omega Baseline right parenthesis dot e Superscript j normal upper Omega Baseline Over cosine 2 normal upper Omega plus j sine 2 normal upper Omega plus 0.81 EndFraction equals StartFraction 2 j sine normal upper Omega dot e Superscript j normal upper Omega Baseline Over left parenthesis 0.81 plus cosine 2 normal upper Omega right parenthesis plus j sine 2 normal upper Omega EndFraction equals 2nd Row 1st Column Blank 2nd Column equals ModifyingBelow StartFraction 2 dot StartAbsoluteValue sine normal upper Omega EndAbsoluteValue Over StartRoot left parenthesis 0.81 plus cosine 2 normal upper Omega right parenthesis squared plus left parenthesis sine 2 normal upper Omega right parenthesis squared EndRoot EndFraction With bottom brace Underscript equals StartAbsoluteValue upper H left parenthesis normal upper Omega right parenthesis EndAbsoluteValue Endscripts dot StartFraction e Superscript j left parenthesis normal upper Omega plus normal pi divided by 2 right parenthesis Baseline Over e Superscript j tangent Super Superscript negative 1 Superscript left parenthesis sine 2 normal upper Omega divided by left parenthesis 0.81 plus cosine 2 normal upper Omega right parenthesis right parenthesis Baseline EndFraction EndLayout
Star tLayout 1st Row 1st Column upper H left parenthesis normal upper Omega right parenthesis 2nd Column equals ModifyingBelow StartFraction e Superscript j 2 normal upper Omega Baseline minus 1 Over e Superscript j 2 normal upper Omega Baseline plus 0.81 EndFraction With quotation dash equals StartFraction left parenthesis e Superscript j normal upper Omega Baseline minus e Superscript minus j normal upper Omega Baseline right parenthesis dot e Superscript j normal upper Omega Baseline Over cosine 2 normal upper Omega plus j sine 2 normal upper Omega plus 0.81 EndFraction equals StartFraction 2 j sine normal upper Omega dot e Superscript j normal upper Omega Baseline Over left parenthesis 0.81 plus cosine 2 normal upper Omega right parenthesis plus j sine 2 normal upper Omega EndFraction equals 2nd Row 1st Column Blank 2nd Column equals ModifyingBelow StartFraction 2 dot StartAbsoluteValue sine normal upper Omega EndAbsoluteValue Over StartRoot left parenthesis 0.81 plus cosine 2 normal upper Omega right parenthesis squared plus left parenthesis sine 2 normal upper Omega right parenthesis squared EndRoot EndFraction With bottom brace Underscript equals StartAbsoluteValue upper H left parenthesis normal upper Omega right parenthesis EndAbsoluteValue Endscripts dot StartFraction e Superscript j left parenthesis normal upper Omega plus normal pi divided by 2 right parenthesis Baseline Over e Superscript j tangent Super Superscript negative 1 Superscript left parenthesis sine 2 normal upper Omega divided by left parenthesis 0.81 plus cosine 2 normal upper Omega right parenthesis right parenthesis Baseline EndFraction EndLayout S
t
art Layout 
1st Row 1st Column upper H left parenthesis normal upper Omega right parenthesis 2nd Column equals ModifyingBelow StartFraction e Superscript j 2 normal upper Omega Baseline minus 1 Over e Superscript j 2 normal upper Omega Baseline plus 0.81 EndFraction With quotation dash equals StartFraction left parenthesis e Superscript j normal upper Omega Baseline minus e Superscript minus j normal upper Omega Baseline right parenthesis dot e Superscript j normal upper Omega Baseline Over cosine 2 normal upper Omega plus j sine 2 normal upper Omega plus 0.81 EndFraction equals StartFraction 2 j sine normal upper Omega dot e Superscript j normal upper Omega Baseline Over left parenthesis 0.81 plus cosine 2 normal upper Omega right parenthesis plus j sine 2 normal upper Omega EndFraction equals 2nd Row 1st Column Blank 2nd Column equals ModifyingBelow StartFraction 2 dot StartAbsoluteValue sine normal upper Omega EndAbsoluteValue Over StartRoot left parenthesis 0.81 plus cosine 2 normal upper Omega right parenthesis squared plus left parenthesis sine 2 normal upper Omega right parenthesis squared EndRoot EndFraction With bottom brace Underscript equals StartAbsoluteValue upper H left parenthesis normal upper Omega right parenthesis EndAbsoluteValue Endscripts dot StartFraction e Superscript j left parenthesis normal upper Omega plus normal pi divided by 2 right parenthesis Baseline Over e Superscript j tangent Super Superscript negative 1 Superscript left parenthesis sine 2 normal upper Omega divided by left parenthesis 0.81 plus cosine 2 normal upper Omega right parenthesis right parenthesis Baseline EndFraction EndLayout
Star tL ayo ut 1st  Row 1s t
 Co lum n  upper H left parenthesis normal upper Omega right parenthesis 2nd Column equals ModifyingBelow StartFraction e Superscript j 2 normal upper Omega Baseline minus 1 Over e Superscript j 2 normal upper Omega Baseline plus 0.81 EndFraction With quotation dash equals StartFraction left parenthesis e Superscript j normal upper Omega Baseline minus e Superscript minus j normal upper Omega Baseline right parenthesis dot e Superscript j normal upper Omega Baseline Over cosine 2 normal upper Omega plus j sine 2 normal upper Omega plus 0.81 EndFraction equals StartFraction 2 j sine normal upper Omega dot e Superscript j normal upper Omega Baseline Over left parenthesis 0.81 plus cosine 2 normal upper Omega right parenthesis plus j sine 2 normal upper Omega EndFraction equals 2nd Row 1st Column Blank 2nd Column equals ModifyingBelow StartFraction 2 dot StartAbsoluteValue sine normal upper Omega EndAbsoluteValue Over StartRoot left parenthesis 0.81 plus cosine 2 normal upper Omega right parenthesis squared plus left parenthesis sine 2 normal upper Omega right parenthesis squared EndRoot EndFraction With bottom brace Underscript equals StartAbsoluteValue upper H left parenthesis normal upper Omega right parenthesis EndAbsoluteValue Endscripts dot StartFraction e Superscript j left parenthesis normal upper Omega plus normal pi divided by 2 right parenthesis Baseline Over e Superscript j tangent Super Superscript negative 1 Superscript left parenthesis sine 2 normal upper Omega divided by left parenthesis 0.81 plus cosine 2 normal upper Omega right parenthesis right parenthesis Baseline EndFraction EndLayout
StartL ayout 1st Row  1s t C olumn upper H left parenthesis normal upper Omega right parenthesis 2nd Column equals ModifyingBelow StartFraction e Superscript j 2 normal upper Omega Baseline minus 1 Over e Superscript j 2 normal upper Omega Baseline plus 0.81 EndFraction With quotation dash equals StartFraction left parenthesis e Superscript j normal upper Omega Baseline minus e Superscript minus j normal upper Omega Baseline right parenthesis dot e Superscript j normal upper Omega Baseline Over cosine 2 normal upper Omega plus j sine 2 normal upper Omega plus 0.81 EndFraction equals StartFraction 2 j sine normal upper Omega dot e Superscript j normal upper Omega Baseline Over left parenthesis 0.81 plus cosine 2 normal upper Omega right parenthesis plus j sine 2 normal upper Omega EndFraction equals 2nd Row 1st Column Blank 2nd Column equals ModifyingBelow StartFraction 2 dot StartAbsoluteValue sine normal upper Omega EndAbsoluteValue Over StartRoot left parenthesis 0.81 plus cosine 2 normal upper Omega right parenthesis squared plus left parenthesis sine 2 normal upper Omega right parenthesis squared EndRoot EndFraction With bottom brace Underscript equals StartAbsoluteValue upper H left parenthesis normal upper Omega right parenthesis EndAbsoluteValue Endscripts dot StartFraction e Superscript j left parenthesis normal upper Omega plus normal pi divided by 2 right parenthesis Baseline Over e Superscript j tangent Super Superscript negative 1 Superscript left parenthesis sine 2 normal upper Omega divided by left parenthesis 0.81 plus cosine 2 normal upper Omega right parenthesis right parenthesis Baseline EndFraction EndLayout

216
10
Digital Filters
Fig. 10.9 The ampliﬁcation diagram 
=
2 · |sin Ω| 
√
(0.81 + cos 2Ω)2 + (sin 2Ω)2
 
  
 
=|H (Ω)| 
·
ej(Ω+π/2) 
ejtan−1(sin 2Ω/(0.81+cos 2Ω))
|H(Ω)| is plotted in Fig. 10.9. (Remember that we have a pole in z = +0.9j, i.e., 
at Ω = π/2.) 
The difference equation: 
StartLayout 1st Row 1st Column StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction 2nd Column equals StartFraction 1 minus z Superscript negative 2 Baseline Over 1 plus 0.81 z Superscript negative 2 Baseline EndFraction right double arrow upper Y left parenthesis z right parenthesis plus 0.81 upper Y left parenthesis z right parenthesis z Superscript negative 2 Baseline equals upper X left parenthesis z right parenthesis minus upper X left parenthesis z right parenthesis z Superscript negative 2 Baseline right double arrow 2nd Row 1st Column y Subscript n 2nd Column equals minus 0.81 y Subscript n minus 2 Baseline plus x Subscript n Baseline minus x Subscript n minus 2 EndLayout
StartLa
yo ut 1st Row 1st Column StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction 2nd Column equals StartFraction 1 minus z Superscript negative 2 Baseline Over 1 plus 0.81 z Superscript negative 2 Baseline EndFraction right double arrow upper Y left parenthesis z right parenthesis plus 0.81 upper Y left parenthesis z right parenthesis z Superscript negative 2 Baseline equals upper X left parenthesis z right parenthesis minus upper X left parenthesis z right parenthesis z Superscript negative 2 Baseline right double arrow 2nd Row 1st Column y Subscript n 2nd Column equals minus 0.81 y Subscript n minus 2 Baseline plus x Subscript n Baseline minus x Subscript n minus 2 EndLayout
St artLayout 1st Row 1st Column St artFraction upper Y 
lef t  parenthes is z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction 2nd Column equals StartFraction 1 minus z Superscript negative 2 Baseline Over 1 plus 0.81 z Superscript negative 2 Baseline EndFraction right double arrow upper Y left parenthesis z right parenthesis plus 0.81 upper Y left parenthesis z right parenthesis z Superscript negative 2 Baseline equals upper X left parenthesis z right parenthesis minus upper X left parenthesis z right parenthesis z Superscript negative 2 Baseline right double arrow 2nd Row 1st Column y Subscript n 2nd Column equals minus 0.81 y Subscript n minus 2 Baseline plus x Subscript n Baseline minus x Subscript n minus 2 EndLayout
Figure 10.10 illustrates the block diagram. 
We get the impulse response by setting xn = δn: 
Sta rtLay out 1st  Row  1s t  Colum n Bl ank 2 n d Colu mn h 0 
equ a ls del ta 0 equals 1 h 1  eq uals  0 h  2 equ als neg a tive 0 .81  dot  1  m inus delta 0 equals negative 1.81 h 3 equals 0 2nd Row 1st Column Blank 2nd Column h 4 equals negative 0.81 dot left parenthesis negative 1.81 right parenthesis equals 1.47 h 5 equals 0 h 6 equals negative 0.81 dot 1.47 equals negative 1.19 h 7 equals 0 ellipsis period EndLayout
The impulse response is plotted in Fig. 10.11.
Fig. 10.10 The block 
diagram 

10.3 IIR Filters
217
Fig. 10.11 The impulse response 
To ﬁnd the output for the input x = [2, −1, 0.5], we could use a convolution 
table as in table 10.1, but here we take the opportunity to illustrate discrete-time 
convolution graphically, see Fig. 10.12. 
In Fig. 10.12, we have plotted the signal xn−i, for  n = −1, see Eq. (10.3), and as 
time (n) increases, xn−i slides right, and at each time (n) we stop and multiply all 
overlaps between xn−i and hi and then we sum all the products. Compare Fig. 10.12 
to Fig. 9.42 in Chap. 9. Figure 10.13 illustrates the resulting output from the ﬁlter.
Fig. 10.12 Discrete time convolution 

218
10
Digital Filters
Fig. 10.13 Filter output 
10.4 
Designing Digital Filters 
10.4.1 
FIR Filters: The Inverse Fourier Transform Method 
Now that we understand how IIR and FIR ﬁlters work, we need to learn how to design 
them. There are several methods to design digital ﬁlters, but here we will only learn 
one method for FIR ﬁlters and one method for IIR ﬁlters. We start with FIR ﬁlter 
design. 
We use the inverse Fourier transform method to design FIR ﬁlters. This method 
starts from the ampliﬁcation diagram StartAbsoluteValue upper H left parenthesis normal upper Omega right parenthesis EndAbsoluteValue of the desired ﬁlter’s frequency 
response. We get the FIR ﬁlter coefﬁcients by taking the inverse Fourier transform 
ofStartAbsoluteValue upper H left parenthesis normal upper Omega right parenthesis EndAbsoluteValue: 
b S ub script k Baseline equals StartFraction 1 Over 2 normal pi EndFraction integral Subscript negative normal pi Superscript normal pi Baseline StartAbsoluteValue upper H left parenthesis normal upper Omega right parenthesis EndAbsoluteValue dot e Superscript j k normal upper Omega Baseline
b 
S ub
scr
ipt k Baselin
e equals StartFraction 1 Over 2 normal pi EndFraction integral Subscript negative normal pi Superscript normal pi Baseline StartAbsoluteValue upper H left parenthesis normal upper Omega right parenthesis EndAbsoluteValue dot e Superscript j k normal upper Omega Baseline
Example 10.3 Design an FIR ﬁlter with a frequency response as illustrated in 
Fig. 10.14. 
Solution The ﬁlter coefﬁcients are
Fig. 10.14 Desired frequency response 

10.4 Designing Digital Filters
219
Sta rt Layout 1st Row 1st Column b Subscript k 2nd Column equals StartFraction 1 Over 2 normal pi EndFraction integral Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 1 dot e Superscript j k normal upper Omega Baseline d normal upper Omega equals StartFraction 1 Over 2 normal pi j k EndFraction left bracket e Superscript j k normal upper Omega Baseline right bracket Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over normal pi k EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript j k StartFraction normal pi Over 4 EndFraction Baseline minus e Superscript minus j k StartFraction normal pi Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over normal pi k EndFraction sine StartFraction k normal pi Over 4 EndFraction EndLayout
St
a rtLa
yout 
1s t Row 1s t
 Column b Subscript k 2nd Column equals StartFraction 1 Over 2 normal pi EndFraction integral Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 1 dot e Superscript j k normal upper Omega Baseline d normal upper Omega equals StartFraction 1 Over 2 normal pi j k EndFraction left bracket e Superscript j k normal upper Omega Baseline right bracket Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over normal pi k EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript j k StartFraction normal pi Over 4 EndFraction Baseline minus e Superscript minus j k StartFraction normal pi Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over normal pi k EndFraction sine StartFraction k normal pi Over 4 EndFraction EndLayout
Star
t
Layout 1s
t Row
 1 st Column b Subscript k 2nd Column equals StartFraction 1 Over 2 normal pi EndFraction integral Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 1 dot e Superscript j k normal upper Omega Baseline d normal upper Omega equals StartFraction 1 Over 2 normal pi j k EndFraction left bracket e Superscript j k normal upper Omega Baseline right bracket Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over normal pi k EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript j k StartFraction normal pi Over 4 EndFraction Baseline minus e Superscript minus j k StartFraction normal pi Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over normal pi k EndFraction sine StartFraction k normal pi Over 4 EndFraction EndLayout
Sta rt Layout 1st Row 1st Column b Subscript k 2nd Column equals StartFraction 1 Over 2 normal pi EndFraction integral Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 1 dot e Superscript j k normal upper Omega Baseline d normal upper Omega equals StartFraction 1 Over 2 normal pi j k EndFraction left bracket e Superscript j k normal upper Omega Baseline right bracket Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over normal pi k EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript j k StartFraction normal pi Over 4 EndFraction Baseline minus e Superscript minus j k StartFraction normal pi Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over normal pi k EndFraction sine StartFraction k normal pi Over 4 EndFraction EndLayout
St
a
rtkayout 1st Row 1st Column b Subscript k 2nd Column equals StartFraction 1 Over 2 normal pi EndFraction integral Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 1 dot e Superscript j k normal upper Omega Baseline d normal upper Omega equals StartFraction 1 Over 2 normal pi j k EndFraction left bracket e Superscript j k normal upper Omega Baseline right bracket Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over normal pi k EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript j k StartFraction normal pi Over 4 EndFraction Baseline minus e Superscript minus j k StartFraction normal pi Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over normal pi k EndFraction sine StartFraction k normal pi Over 4 EndFraction EndLayout
St artLayout 1st Row 1st Column b Subscript k 2nd Column equals StartFraction 1 Over 2 normal pi EndFraction integral Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 1 dot e Superscript j k normal upper Omega Baseline d normal upper Omega equals StartFraction 1 Over 2 normal pi j k EndFraction left bracket e Superscript j k normal upper Omega Baseline right bracket Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over normal pi k EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript j k StartFraction normal pi Over 4 EndFraction Baseline minus e Superscript minus j k StartFraction normal pi Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over normal pi k EndFraction sine StartFraction k normal pi Over 4 EndFraction EndLayout
S
t
ar tLayout 1st Row 1st Column b Subscript k 2nd Column equals StartFraction 1 Over 2 normal pi EndFraction integral Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 1 dot e Superscript j k normal upper Omega Baseline d normal upper Omega equals StartFraction 1 Over 2 normal pi j k EndFraction left bracket e Superscript j k normal upper Omega Baseline right bracket Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over normal pi k EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript j k StartFraction normal pi Over 4 EndFraction Baseline minus e Superscript minus j k StartFraction normal pi Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over normal pi k EndFraction sine StartFraction k normal pi Over 4 EndFraction EndLayout
StartLa yout 1st Row 1st Column b Subscript k 2nd Column equals StartFraction 1 Over 2 normal pi EndFraction integral Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 1 dot e Superscript j k normal upper Omega Baseline d normal upper Omega equals StartFraction 1 Over 2 normal pi j k EndFraction left bracket e Superscript j k normal upper Omega Baseline right bracket Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over normal pi k EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript j k StartFraction normal pi Over 4 EndFraction Baseline minus e Superscript minus j k StartFraction normal pi Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over normal pi k EndFraction sine StartFraction k normal pi Over 4 EndFraction EndLayout
StartLayout 1st Row 1st Column b Subscript k 2nd Column equals StartFraction 1 Over 2 normal pi EndFraction integral Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 1 dot e Superscript j k normal upper Omega Baseline d normal upper Omega equals StartFraction 1 Over 2 normal pi j k EndFraction left bracket e Superscript j k normal upper Omega Baseline right bracket Subscript negative normal pi divided by 4 Superscript normal pi divided by 4 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over normal pi k EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript j k StartFraction normal pi Over 4 EndFraction Baseline minus e Superscript minus j k StartFraction normal pi Over 4 EndFraction Baseline right parenthesis equals StartFraction 1 Over normal pi k EndFraction sine StartFraction k normal pi Over 4 EndFraction EndLayout
Table 10.2 contains the ﬁlter coefﬁcient values for the ﬁrst eleven coefﬁcients. 
Notice two things in Table 10.2. First, we have truncated the table since we must 
limit the number of coefﬁcients. Second, there are ‘negative-time’ ﬁlter coefﬁcients. 
That means that we must ‘shift’ the coefﬁcients right (delay) to get a causal ﬁlter. 
Below are the difference equations for the 3-, 9- and 11-‘tap’ ﬁlters (b±4 = 0): 
Sta rtLayout 1st Row 1st C olumn y Subs
cri pt n 2nd Column equals  0.225 x Sub script n Bas eline plus 0.
250 x Subscr ipt n minus 
1 B a seline plus 0.225 x S ubscript n m inus 2 Basel ine 2nd Row 1
st Column y Subscript n 2nd Column e quals 0.075 x Subscript n Baseline plus 0.159 x Subscript n minus 1 Baseline plus 0.225 x Subscript n minus 2 Baseline plus 0.250 x Subscript n minus 3 Baseline plus 0.225 x Subscript n minus 4 Baseline plus 3rd Row 1st Column Blank 2nd Column plus 0.159 x Subscript n minus 5 Baseline plus 0.075 x Subscript n minus 6 Baseline 4th Row 1st Column y Subscript n 2nd Column equals minus 0.045 x Subscript n Baseline plus 0.075 x Subscript n minus 2 Baseline plus 0.159 x Subscript n minus 3 Baseline plus 0.225 x Subscript n minus 4 Baseline plus 0.250 x Subscript n minus 5 Baseline plus 5th Row 1st Column Blank 2nd Column plus 0.225 x Subscript n minus 6 Baseline plus 0.159 x Subscript n minus 7 Baseline plus 0.075 x Subscript n minus 8 Baseline minus 0.045 x Subscript n minus 10 Baseline EndLayout
Figure 10.15 illustrates the frequency response of these three ﬁlters (and a 21-tap 
ﬁlter). 
From Fig. 10.15 it is obvious that the more taps we implement, the closer is the 
frequency response to the ideal response. 
In general, IIR ﬁlters are more ‘computational efﬁcient’ than FIR ﬁlters; they get 
the job done with less taps (less ‘multiply-and-add’ operations). So why use FIR 
ﬁlters at all? Well, we have already seen one reason; the lack of poles makes them 
inherently stable. But that is not the most important reason. The most important 
reason is stated in the following theorem:
Table 10.2 Filter coefﬁcients 
b−5
b−4
b−3
b−2
b−1
b0
b1
b2
b3
b4
b5 
−0.045
0.000
0.075
0.159
0.225
0.250
0.225
0.159
0.075
0.000 
−0.045 
Fig. 10.15 The frequency response of the three FIR ﬁlters 

220
10
Digital Filters
Theorem FIR ﬁlters with a symmetric set of ﬁlter coefﬁcients have linear phase 
diagrams. 
Proof We will not give general proof here, only a ‘convincing’ example. ‘Symmetric’ 
ﬁlter coefﬁcients means that if we have an n-tap ﬁlter, then b0 = bn−1, b1 = bn−2, 
etc. Let’s take a symmetric 3-tap ﬁlter: 
y S ubscript n Basel ine equal s b 0 x Subscrip t n Basel ine plus b 1 x Subscript n minus 1 Baseline plus b 2 x Subscript n minus 2 Baseline equals b 0 x Subscript n Baseline plus b 1 x Subscript n minus 1 Baseline plus b 0 x Subscript n minus 2 Baseline right double arrow
upper Y left
 
par enthesis  z right
 parenthe
s
is eq uals upper X 
left p arenthesis z right parenthesis left parenthesis b 0 plus b 1 z Superscript negative 1 Baseline plus b 0 z Superscript negative 2 Baseline right parenthesis right double arrow upper H left parenthesis z right parenthesis equals left parenthesis b 0 z Superscript 1 Baseline plus b 1 plus b 0 z Superscript negative 1 Baseline right parenthesis dot z Superscript negative 1 Baseline right double arrow
upper H
 
left paren thesis no
rmal u pper O mega r igh t parenthesis equals left parenthesis b 0 e Superscript j normal upper Omega Baseline plus b 1 plus b 0 e Superscript minus j normal upper Omega Baseline right parenthesis dot e Superscript minus j normal upper Omega Baseline equals left parenthesis b 1 plus 2 b 0 cosine normal upper Omega right parenthesis dot e Superscript minus j normal upper Omega
(Remember that ﬁlters with linear phase diagrams don’t distort the signal.) And 
we can see that the phase function is phi le ft parenthesis normal upper Omega right parenthesis equals negative normal upper Omega, i.e., it is a linear function in Ω. 
This will hold true for any number of taps as long as the coefﬁcients are ‘symmetric’, 
and it is not restricted to odd numbers of taps. See Example 10.1, where we had n = 
4 and symmetric taps. The phase function was phi le ft parenthesis normal upper Omega right parenthesis equals minus 1.5 normal upper Omega. 
10.4.2 
IIR Filters: The Bilinear Transformation Method 
When we design IIR ﬁlters, we start from an analog ﬁlter and then we try to mimic 
its frequency response in discrete time. Let’s take the simple ﬁrst-order RC ﬁlter in 
Fig. 10.16 as an example. 
The transfer function is 
upper H
 left parenthesis s right parenthesis equals StartFraction 1 Over 1 plus s upper R upper C EndFraction right double arrow
up p er H 
left parenthesis s right parenthesis equals StartFraction 1 Over 1 plus s upper R upper C EndFraction right double arrow
upper 
H left parenthesis normal upper Omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction right double arrow StartAbsoluteValue upper H left parenthesis normal upper Omega right parenthesis EndAbsoluteValue equals StartFraction 1 Over StartRoot left parenthesis 1 plus left parenthesis omega upper R upper C right parenthesis squared right parenthesis EndRoot EndFraction
up per H l eft parenth
esis normal upper Omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction right double arrow StartAbsoluteValue upper H left parenthesis normal upper Omega right parenthesis EndAbsoluteValue equals StartFraction 1 Over StartRoot left parenthesis 1 plus left parenthesis omega upper R upper C right parenthesis squared right parenthesis EndRoot EndFraction
/u
p er H left
 parenthesis normal upper Omega right parenthesis equals StartFraction 1 Over 1 plus j omega upper R upper C EndFraction right double arrow StartAbsoluteValue upper H left parenthesis normal upper Omega right parenthesis EndAbsoluteValue equals StartFraction 1 Over StartRoot left parenthesis 1 plus left parenthesis omega upper R upper C right parenthesis squared right parenthesis EndRoot EndFraction
Fig. 10.16 First order RC 
ﬁlter 

10.4 Designing Digital Filters
221
Fig. 10.17 The ω axis must be squeezed in between −π and +π 
This is a lowpass ﬁlter and its ampliﬁcation diagram is illustrated in the top 
diagram in Fig. 10.17. 
To mimic this behavior in discrete time, we must shoehorn the entire ω axis into 
the range ±π on the Ω axis, see Fig. 10.17. 
We are looking for a transformation that transforms −∞ to −π, 0 to 0 and + 
∞ to +π. Do we know any such function? Yes, we do! The tangent Superscript negative 1 Baseline omegahas the range 
±π/2, hence, if we just multiply it by 2, we will have our transformation formula. 
However, for reasons that we will explain later, we will multiply ω by k (tangent Superscript negative 1 Baseline k omega
has the same range):
n orma l upper Om
ega equals 2 dot tangent Superscript negative 1 Baseline k omega
Equation (10.14) is a transformation between the Fourier transforms in continuous 
and discrete time. Since we prefer working in the z and s spaces, we need to translate 
this expression into a transformation from s space to z space. We solve for kω and 
multiply both sides by j: 
StartLayout 1st Row 1st Column j k omega 2nd Column equals j tangent StartFraction normal upper Omega Over 2 EndFraction equals StartFraction j sine normal upper Omega divided by 2 Over cosine normal upper Omega divided by 2 EndFraction equals StartFraction one half left parenthesis e Superscript j normal upper Omega divided by 2 Baseline minus e Superscript minus j normal upper Omega divided by 2 Baseline right parenthesis Over one half left parenthesis e Superscript j normal upper Omega divided by 2 Baseline plus e Superscript minus j normal upper Omega divided by 2 Baseline right parenthesis EndFraction equals 2nd Row 1st Column Blank 2nd Column equals StartFraction e Superscript j normal upper Omega divided by 2 Baseline left parenthesis 1 minus e Superscript minus j normal upper Omega Baseline right parenthesis Over e Superscript j normal upper Omega divided by 2 Baseline left parenthesis 1 plus e Superscript minus j normal upper Omega Baseline right parenthesis EndFraction equals StartFraction 1 minus e Superscript minus j normal upper Omega Baseline Over 1 plus e Superscript minus j normal upper Omega Baseline EndFraction EndLayout
St art Lay out 1st Row 1st Column j k omega 2nd Column equals j tangent StartFraction normal upper Omega Over 2 EndFraction equals StartFraction j sine normal upper Omega divided by 2 Over cosine normal upper Omega divided by 2 EndFraction equals StartFraction one half left parenthesis e Superscript j normal upper Omega divided by 2 Baseline minus e Superscript minus j normal upper Omega divided by 2 Baseline right parenthesis Over one half left parenthesis e Superscript j normal upper Omega divided by 2 Baseline plus e Superscript minus j normal upper Omega divided by 2 Baseline right parenthesis EndFraction equals 2nd Row 1st Column Blank 2nd Column equals StartFraction e Superscript j normal upper Omega divided by 2 Baseline left parenthesis 1 minus e Superscript minus j normal upper Omega Baseline right parenthesis Over e Superscript j normal upper Omega divided by 2 Baseline left parenthesis 1 plus e Superscript minus j normal upper Omega Baseline right parenthesis EndFraction equals StartFraction 1 minus e Superscript minus j normal upper Omega Baseline Over 1 plus e Superscript minus j normal upper Omega Baseline EndFraction EndLayout
Sta rtLa yo
ut 1st Row 1st Column j k omega 2nd Column equals j tangent StartFraction normal upper Omega Over 2 EndFraction equals StartFraction j sine normal upper Omega divided by 2 Over cosine normal upper Omega divided by 2 EndFraction equals StartFraction one half left parenthesis e Superscript j normal upper Omega divided by 2 Baseline minus e Superscript minus j normal upper Omega divided by 2 Baseline right parenthesis Over one half left parenthesis e Superscript j normal upper Omega divided by 2 Baseline plus e Superscript minus j normal upper Omega divided by 2 Baseline right parenthesis EndFraction equals 2nd Row 1st Column Blank 2nd Column equals StartFraction e Superscript j normal upper Omega divided by 2 Baseline left parenthesis 1 minus e Superscript minus j normal upper Omega Baseline right parenthesis Over e Superscript j normal upper Omega divided by 2 Baseline left parenthesis 1 plus e Superscript minus j normal upper Omega Baseline right parenthesis EndFraction equals StartFraction 1 minus e Superscript minus j normal upper Omega Baseline Over 1 plus e Superscript minus j normal upper Omega Baseline EndFraction EndLayout
S
t
artLay out 1st Row 1st Column j k omega 2nd Column equals j tangent StartFraction normal upper Omega Over 2 EndFraction equals StartFraction j sine normal upper Omega divided by 2 Over cosine normal upper Omega divided by 2 EndFraction equals StartFraction one half left parenthesis e Superscript j normal upper Omega divided by 2 Baseline minus e Superscript minus j normal upper Omega divided by 2 Baseline right parenthesis Over one half left parenthesis e Superscript j normal upper Omega divided by 2 Baseline plus e Superscript minus j normal upper Omega divided by 2 Baseline right parenthesis EndFraction equals 2nd Row 1st Column Blank 2nd Column equals StartFraction e Superscript j normal upper Omega divided by 2 Baseline left parenthesis 1 minus e Superscript minus j normal upper Omega Baseline right parenthesis Over e Superscript j normal upper Omega divided by 2 Baseline left parenthesis 1 plus e Superscript minus j normal upper Omega Baseline right parenthesis EndFraction equals StartFraction 1 minus e Superscript minus j normal upper Omega Baseline Over 1 plus e Superscript minus j normal upper Omega Baseline EndFraction EndLayout
StartLayout 1st Row 1st Column j k omega 2nd Column equals j tangent StartFraction normal upper Omega Over 2 EndFraction equals StartFraction j sine normal upper Omega divided by 2 Over cosine normal upper Omega divided by 2 EndFraction equals StartFraction one half left parenthesis e Superscript j normal upper Omega divided by 2 Baseline minus e Superscript minus j normal upper Omega divided by 2 Baseline right parenthesis Over one half left parenthesis e Superscript j normal upper Omega divided by 2 Baseline plus e Superscript minus j normal upper Omega divided by 2 Baseline right parenthesis EndFraction equals 2nd Row 1st Column Blank 2nd Column equals StartFraction e Superscript j normal upper Omega divided by 2 Baseline left parenthesis 1 minus e Superscript minus j normal upper Omega Baseline right parenthesis Over e Superscript j normal upper Omega divided by 2 Baseline left parenthesis 1 plus e Superscript minus j normal upper Omega Baseline right parenthesis EndFraction equals StartFraction 1 minus e Superscript minus j normal upper Omega Baseline Over 1 plus e Superscript minus j normal upper Omega Baseline EndFraction EndLayout
S
t
artLay out 1st R ow
 1st Col
um n j k omega 2nd Column equals j tangent StartFraction normal upper Omega Over 2 EndFraction equals StartFraction j sine normal upper Omega divided by 2 Over cosine normal upper Omega divided by 2 EndFraction equals StartFraction one half left parenthesis e Superscript j normal upper Omega divided by 2 Baseline minus e Superscript minus j normal upper Omega divided by 2 Baseline right parenthesis Over one half left parenthesis e Superscript j normal upper Omega divided by 2 Baseline plus e Superscript minus j normal upper Omega divided by 2 Baseline right parenthesis EndFraction equals 2nd Row 1st Column Blank 2nd Column equals StartFraction e Superscript j normal upper Omega divided by 2 Baseline left parenthesis 1 minus e Superscript minus j normal upper Omega Baseline right parenthesis Over e Superscript j normal upper Omega divided by 2 Baseline left parenthesis 1 plus e Superscript minus j normal upper Omega Baseline right parenthesis EndFraction equals StartFraction 1 minus e Superscript minus j normal upper Omega Baseline Over 1 plus e Superscript minus j normal upper Omega Baseline EndFraction EndLayout
StartL
ay out 1st  Row  1st Column j k omega 2nd Column equals j tangent StartFraction normal upper Omega Over 2 EndFraction equals StartFraction j sine normal upper Omega divided by 2 Over cosine normal upper Omega divided by 2 EndFraction equals StartFraction one half left parenthesis e Superscript j normal upper Omega divided by 2 Baseline minus e Superscript minus j normal upper Omega divided by 2 Baseline right parenthesis Over one half left parenthesis e Superscript j normal upper Omega divided by 2 Baseline plus e Superscript minus j normal upper Omega divided by 2 Baseline right parenthesis EndFraction equals 2nd Row 1st Column Blank 2nd Column equals StartFraction e Superscript j normal upper Omega divided by 2 Baseline left parenthesis 1 minus e Superscript minus j normal upper Omega Baseline right parenthesis Over e Superscript j normal upper Omega divided by 2 Baseline left parenthesis 1 plus e Superscript minus j normal upper Omega Baseline right parenthesis EndFraction equals StartFraction 1 minus e Superscript minus j normal upper Omega Baseline Over 1 plus e Superscript minus j normal upper Omega Baseline EndFraction EndLayout
St artLayout 1st Row 1st Column j k omega 2nd Column equals j tangent StartFraction normal upper Omega Over 2 EndFraction equals StartFraction j sine normal upper Omega divided by 2 Over cosine normal upper Omega divided by 2 EndFraction equals StartFraction one half left parenthesis e Superscript j normal upper Omega divided by 2 Baseline minus e Superscript minus j normal upper Omega divided by 2 Baseline right parenthesis Over one half left parenthesis e Superscript j normal upper Omega divided by 2 Baseline plus e Superscript minus j normal upper Omega divided by 2 Baseline right parenthesis EndFraction equals 2nd Row 1st Column Blank 2nd Column equals StartFraction e Superscript j normal upper Omega divided by 2 Baseline left parenthesis 1 minus e Superscript minus j normal upper Omega Baseline right parenthesis Over e Superscript j normal upper Omega divided by 2 Baseline left parenthesis 1 plus e Superscript minus j normal upper Omega Baseline right parenthesis EndFraction equals StartFraction 1 minus e Superscript minus j normal upper Omega Baseline Over 1 plus e Superscript minus j normal upper Omega Baseline EndFraction EndLayout

222
10
Digital Filters
Now we substitute s for jω on the left-hand side and z for ejΩ on the right-hand 
side: 
k s equ als StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction right double arrow s equals StartFraction 1 Over k EndFraction dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction
k s equa ls StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction right double arrow s equals StartFraction 1 Over k EndFraction dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction
k s eq uals StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction right double arrow s equals StartFraction 1 Over k EndFraction dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction
k s equals StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction right double arrow s equals StartFraction 1 Over k EndFraction dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction
All we need now is to determine the constant k. If we look at Fig. 10.17, we realize 
that there will be some distortion of the frequency response in the transformation 
from s to z space. In most digital applications we try to ‘oversample’, i.e., we stay as 
far away from f S as possible. That means that we are more concerned about having 
the right frequency response for ‘low’ frequencies. This is what we use the constant 
k for; in the transformation we prioritize a correct representation of the low end of 
the ω axis. For ‘low’ frequencies, tan Ω/2 ≈Ω/2, and then 
j omega k almost equals j StartFraction normal upper Omega Over 2 EndFraction right double arrow k equals StartFraction normal upper Omega Over 2 omega EndFraction equals StartFraction omega upper T Subscript upper S Baseline Over 2 omega EndFraction equals StartFraction upper T Subscript upper S Baseline Over 2 EndFraction right double arrow s equals StartFraction 2 Over upper T Subscript upper S Baseline EndFraction dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction
j omega  k almost equals j StartFraction normal upper Omega Over 2 EndFraction right double arrow k equals StartFraction normal upper Omega Over 2 omega EndFraction equals StartFraction omega upper T Subscript upper S Baseline Over 2 omega EndFraction equals StartFraction upper T Subscript upper S Baseline Over 2 EndFraction right double arrow s equals StartFraction 2 Over upper T Subscript upper S Baseline EndFraction dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction
j omega k almost equals j StartFraction normal upper Omega Over 2 EndFraction right double arrow k equals StartFraction normal upper Omega Over 2 omega EndFraction equals StartFraction omega upper T Subscript upper S Baseline Over 2 omega EndFraction equals StartFraction upper T Subscript upper S Baseline Over 2 EndFraction right double arrow s equals StartFraction 2 Over upper T Subscript upper S Baseline EndFraction dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction
j o mega k almost equals j StartFraction normal upper Omega Over 2 EndFraction right double arrow k equals StartFraction normal upper Omega Over 2 omega EndFraction equals StartFraction omega upper T Subscript upper S Baseline Over 2 omega EndFraction equals StartFraction upper T Subscript upper S Baseline Over 2 EndFraction right double arrow s equals StartFraction 2 Over upper T Subscript upper S Baseline EndFraction dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction
j omega k almost equals j StartFraction normal upper Omega Over 2 EndFraction right double arrow k equals StartFraction normal upper Omega Over 2 omega EndFraction equals StartFraction omega upper T Subscript upper S Baseline Over 2 omega EndFraction equals StartFraction upper T Subscript upper S Baseline Over 2 EndFraction right double arrow s equals StartFraction 2 Over upper T Subscript upper S Baseline EndFraction dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction
j o
mega  k almost equals j StartFraction normal upper Omega Over 2 EndFraction right double arrow k equals StartFraction normal upper Omega Over 2 omega EndFraction equals StartFraction omega upper T Subscript upper S Baseline Over 2 omega EndFraction equals StartFraction upper T Subscript upper S Baseline Over 2 EndFraction right double arrow s equals StartFraction 2 Over upper T Subscript upper S Baseline EndFraction dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction
j omega 
k almost equals j StartFraction normal upper Omega Over 2 EndFraction right double arrow k equals StartFraction normal upper Omega Over 2 omega EndFraction equals StartFraction omega upper T Subscript upper S Baseline Over 2 omega EndFraction equals StartFraction upper T Subscript upper S Baseline Over 2 EndFraction right double arrow s equals StartFraction 2 Over upper T Subscript upper S Baseline EndFraction dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction
Equation (10.15) is the  bilinear transformation that we use to ‘convert’ an analog 
transfer function into a corresponding digital IIR ﬁlter. 
Example 10.4 Assuming in Eq. (10.12) that RC = 0.01, use bilinear transformation 
to design a corresponding digital IIR ﬁlter. The sampling rate of the digital ﬁlter is 
1 kS/s. Plot the frequency response for both the analog and the digital ﬁlters and 
compare their cutoff frequencies. 
Solution 
upper H
 left parenthesis z right parenthesis equals StartStartFraction 1 OverOver 1 plus StartFraction 2 Over upper T Subscript upper S Baseline EndFraction dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction upper R upper C EndEndFraction equals StartStartFraction 1 plus z Superscript negative 1 Baseline OverOver 1 plus z Superscript negative 1 Baseline plus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction left parenthesis 1 minus z Superscript negative 1 Baseline right parenthesis EndEndFraction equals
up pe r H left parenthesis z right parenthesis equals StartStartFraction 1 OverOver 1 plus StartFraction 2 Over upper T Subscript upper S Baseline EndFraction dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction upper R upper C EndEndFraction equals StartStartFraction 1 plus z Superscript negative 1 Baseline OverOver 1 plus z Superscript negative 1 Baseline plus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction left parenthesis 1 minus z Superscript negative 1 Baseline right parenthesis EndEndFraction equals
upp er H left parenthesis z right parenthesis equals StartStartFraction 1 OverOver 1 plus StartFraction 2 Over upper T Subscript upper S Baseline EndFraction dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction upper R upper C EndEndFraction equals StartStartFraction 1 plus z Superscript negative 1 Baseline OverOver 1 plus z Superscript negative 1 Baseline plus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction left parenthesis 1 minus z Superscript negative 1 Baseline right parenthesis EndEndFraction equals
upper H l
e
ft  parenthesis z right parenthesis equals StartStartFraction 1 OverOver 1 plus StartFraction 2 Over upper T Subscript upper S Baseline EndFraction dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction upper R upper C EndEndFraction equals StartStartFraction 1 plus z Superscript negative 1 Baseline OverOver 1 plus z Superscript negative 1 Baseline plus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction left parenthesis 1 minus z Superscript negative 1 Baseline right parenthesis EndEndFraction equals
up per H left parenthesis z right parenthesis equals StartStartFraction 1 OverOver 1 plus StartFraction 2 Over upper T Subscript upper S Baseline EndFraction dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction upper R upper C EndEndFraction equals StartStartFraction 1 plus z Superscript negative 1 Baseline OverOver 1 plus z Superscript negative 1 Baseline plus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction left parenthesis 1 minus z Superscript negative 1 Baseline right parenthesis EndEndFraction equals
up
p
er  H lef t parenthesis z right parenthesis equals StartStartFraction 1 OverOver 1 plus StartFraction 2 Over upper T Subscript upper S Baseline EndFraction dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction upper R upper C EndEndFraction equals StartStartFraction 1 plus z Superscript negative 1 Baseline OverOver 1 plus z Superscript negative 1 Baseline plus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction left parenthesis 1 minus z Superscript negative 1 Baseline right parenthesis EndEndFraction equals
e
qu als StartStartFraction 1 plus z Superscript negative 1 Baseline OverOver left parenthesis 1 plus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction right parenthesis plus left parenthesis 1 minus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction right parenthesis z Superscript negative 1 Baseline EndEndFraction equals StartFraction 1 plus z Superscript negative 1 Baseline Over 21 minus 19 z Superscript negative 1 Baseline EndFraction equals StartFraction 0.048 plus 0.048 z Superscript negative 1 Baseline Over 1 minus 0.905 z Superscript negative 1 Baseline EndFraction equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction
e
qu als StartStartFraction 1 plus z Superscript negative 1 Baseline OverOver left parenthesis 1 plus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction right parenthesis plus left parenthesis 1 minus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction right parenthesis z Superscript negative 1 Baseline EndEndFraction equals StartFraction 1 plus z Superscript negative 1 Baseline Over 21 minus 19 z Superscript negative 1 Baseline EndFraction equals StartFraction 0.048 plus 0.048 z Superscript negative 1 Baseline Over 1 minus 0.905 z Superscript negative 1 Baseline EndFraction equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction
eq
u
a
l
s StartStartFraction 1 plus z Superscript negative 1 Baseline OverOver left parenthesis 1 plus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction right parenthesis plus left parenthesis 1 minus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction right parenthesis z Superscript negative 1 Baseline EndEndFraction equals StartFraction 1 plus z Superscript negative 1 Baseline Over 21 minus 19 z Superscript negative 1 Baseline EndFraction equals StartFraction 0.048 plus 0.048 z Superscript negative 1 Baseline Over 1 minus 0.905 z Superscript negative 1 Baseline EndFraction equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction
eq
u
als S
ta rtStartFraction 1 plus z Superscript negative 1 Baseline OverOver left parenthesis 1 plus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction right parenthesis plus left parenthesis 1 minus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction right parenthesis z Superscript negative 1 Baseline EndEndFraction equals StartFraction 1 plus z Superscript negative 1 Baseline Over 21 minus 19 z Superscript negative 1 Baseline EndFraction equals StartFraction 0.048 plus 0.048 z Superscript negative 1 Baseline Over 1 minus 0.905 z Superscript negative 1 Baseline EndFraction equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction
equ als Star tStartFr action 1 plus z Superscript negative 1 Baseline OverOver left parenthesis 1 plus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction right parenthesis plus left parenthesis 1 minus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction right parenthesis z Superscript negative 1 Baseline EndEndFraction equals StartFraction 1 plus z Superscript negative 1 Baseline Over 21 minus 19 z Superscript negative 1 Baseline EndFraction equals StartFraction 0.048 plus 0.048 z Superscript negative 1 Baseline Over 1 minus 0.905 z Superscript negative 1 Baseline EndFraction equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction
eq uals StartS
ta rtFraction 1 plus z Superscript negative 1 Baseline OverOver left parenthesis 1 plus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction right parenthesis plus left parenthesis 1 minus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction right parenthesis z Superscript negative 1 Baseline EndEndFraction equals StartFraction 1 plus z Superscript negative 1 Baseline Over 21 minus 19 z Superscript negative 1 Baseline EndFraction equals StartFraction 0.048 plus 0.048 z Superscript negative 1 Baseline Over 1 minus 0.905 z Superscript negative 1 Baseline EndFraction equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction
equals StartStartFraction 1 plus z Superscript negative 1 Baseline OverOver left parenthesis 1 plus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction right parenthesis plus left parenthesis 1 minus StartFraction 2 upper R upper C Over upper T Subscript upper S Baseline EndFraction right parenthesis z Superscript negative 1 Baseline EndEndFraction equals StartFraction 1 plus z Superscript negative 1 Baseline Over 21 minus 19 z Superscript negative 1 Baseline EndFraction equals StartFraction 0.048 plus 0.048 z Superscript negative 1 Baseline Over 1 minus 0.905 z Superscript negative 1 Baseline EndFraction equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction
right double arrow upper  Y left parenthesis z right parenthesis minus 0.905 upper Y left parenthesis z right parenthesis z Superscript negative 1 Baseline equals 0.048 upper X left parenthesis z right parenthesis plus 0.048 upper X left parenthesis z right parenthesis z Superscript negative 1
Mod ifyingBelow y Subscript n Baseline equals 0.905 y Subscript n minus 1 Baseline plus 0.048 x Subscript n Baseline plus 0.048 x Subscript n minus 1 Baseline With quotation dash
The Fourier transform is upper H  left parenthesis normal upper Omega right parenthesis equals StartFraction 0.048 plus 0.048 e Superscript minus j normal upper Omega Baseline Over 1 minus 0.905 e Superscript minus j normal upper Omega Baseline EndFraction
upper H left parenthesis normal upper Omega right parenthesis equals StartFraction 0.048 plus 0.048 e Superscript minus j normal upper Omega Baseline Over 1 minus 0.905 e Superscript minus j normal upper Omega Baseline EndFraction . In Fig.  10.18, we have plotted 
the ampliﬁcation diagram of this ﬁlter with absolute frequencies on the x-axis, and 
in Fig. 10.19, we have plotted the frequency response of the original analog ﬁlter. 
Notice in Figs. 10.18 and 10.19 that the cutoff frequency is the same (100 rad/s). 
This is expected; from Eq. (10.14) we predict the ‘analog’ frequency of 100 rad/s to 
be transformed to
n ormal up er Omega equals 2 tangent Superscript negative 1 Baseline StartFraction upper T Subscript upper S Baseline Over 2 EndFraction omega equals 2 tangent Superscript negative 1 Baseline StartFraction 0.001 Over 2 EndFraction 100 equals 0.1 rad right double arrow 0.1 StartFraction 1000 Over 2 pi EndFraction equals 15.9 Hz equals 100 rad slash s
no rmal upper Omega equals 2 tangent Superscript negative 1 Baseline StartFraction upper T Subscript upper S Baseline Over 2 EndFraction omega equals 2 tangent Superscript negative 1 Baseline StartFraction 0.001 Over 2 EndFraction 100 equals 0.1 rad right double arrow 0.1 StartFraction 1000 Over 2 pi EndFraction equals 15.9 Hz equals 100 rad slash s
no
rmal  uppe r O mega equals 2 tangent Superscript negative 1 Baseline StartFraction upper T Subscript upper S Baseline Over 2 EndFraction omega equals 2 tangent Superscript negative 1 Baseline StartFraction 0.001 Over 2 EndFraction 100 equals 0.1 rad right double arrow 0.1 StartFraction 1000 Over 2 pi EndFraction equals 15.9 Hz equals 100 rad slash s
nor mal up pe r Omega  equals 2 tangent Superscript negative 1 Baseline StartFraction upper T Subscript upper S Baseline Over 2 EndFraction omega equals 2 tangent Superscript negative 1 Baseline StartFraction 0.001 Over 2 EndFraction 100 equals 0.1 rad right double arrow 0.1 StartFraction 1000 Over 2 pi EndFraction equals 15.9 Hz equals 100 rad slash s

10.5 Solved Problems
223
Fig. 10.18 Digital ﬁlter from bilinear transformation 
Fig. 10.19 Analog ‘model’ ﬁlter 
Notice also how well the shape of the analog ﬁlter transfers to the digital ﬁlter’s 
frequency response. 
10.5 
Solved Problems 
Problem 10.1 Design a FIR ﬁlter with a frequency response as in Fig. 10.20. 
Use only the ﬁrst nine non-zero ﬁlter coefﬁcients. Plot the frequency response of 
the resulting ﬁlter.
Fig. 10.20 A bandpass ﬁlter 

224
10
Digital Filters
Table 10.3 FIR ﬁlter coefﬁcients 
k
0
± 1
± 2
± 3
± 4
± 5 
bk
0.250
0.093
−0.159
−0.181
0
0.109 
Solution Remember that we need to integrate from −π to +π and that the Fourier 
transform is symmetric: 
b S ub script k Baseline equals StartFraction 1 Over 2 normal pi EndFraction left parenthesis integral Subscript negative normal pi divided by 2 Superscript negative normal pi divided by 4 Baseline 1 dot e Superscript j k omega Baseline d omega plus integral Subscript normal pi divided by 4 Superscript normal pi divided by 2 Baseline 1 dot e Superscript j k omega Baseline d omega right parenthesis equals StartFraction 1 Over 2 normal pi EndFraction dot StartFraction 1 Over j k EndFraction left parenthesis left bracket e Superscript j k omega Baseline right bracket Subscript negative normal pi divided by 2 Superscript negative normal pi divided by 4 Baseline plus left bracket e Superscript j k omega Baseline right bracket Subscript normal pi divided by 4 Superscript normal pi divided by 2 Baseline right parenthesis equals
b 
Su bscri
pt k 
Ba seline equ
a ls S
tart
Fr action 1
 
Ov er 2 normal pi EndFraction left parenthesis integral Subscript negative normal pi divided by 2 Superscript negative normal pi divided by 4 Baseline 1 dot e Superscript j k omega Baseline d omega plus integral Subscript normal pi divided by 4 Superscript normal pi divided by 2 Baseline 1 dot e Superscript j k omega Baseline d omega right parenthesis equals StartFraction 1 Over 2 normal pi EndFraction dot StartFraction 1 Over j k EndFraction left parenthesis left bracket e Superscript j k omega Baseline right bracket Subscript negative normal pi divided by 2 Superscript negative normal pi divided by 4 Baseline plus left bracket e Superscript j k omega Baseline right bracket Subscript normal pi divided by 4 Superscript normal pi divided by 2 Baseline right parenthesis equals
b Sub script k Baseline equals StartFraction 1 Over 2 normal pi EndFraction left parenthesis integral Subscript negative normal pi divided by 2 Superscript negative normal pi divided by 4 Baseline 1 dot e Superscript j k omega Baseline d omega plus integral Subscript normal pi divided by 4 Superscript normal pi divided by 2 Baseline 1 dot e Superscript j k omega Baseline d omega right parenthesis equals StartFraction 1 Over 2 normal pi EndFraction dot StartFraction 1 Over j k EndFraction left parenthesis left bracket e Superscript j k omega Baseline right bracket Subscript negative normal pi divided by 2 Superscript negative normal pi divided by 4 Baseline plus left bracket e Superscript j k omega Baseline right bracket Subscript normal pi divided by 4 Superscript normal pi divided by 2 Baseline right parenthesis equals
b 
Su
bscript k 
Basel i
n
e equals 
Sta
r
tFraction 1 Over 2 normal pi EndFraction left parenthesis integral Subscript negative normal pi divided by 2 Superscript negative normal pi divided by 4 Baseline 1 dot e Superscript j k omega Baseline d omega plus integral Subscript normal pi divided by 4 Superscript normal pi divided by 2 Baseline 1 dot e Superscript j k omega Baseline d omega right parenthesis equals StartFraction 1 Over 2 normal pi EndFraction dot StartFraction 1 Over j k EndFraction left parenthesis left bracket e Superscript j k omega Baseline right bracket Subscript negative normal pi divided by 2 Superscript negative normal pi divided by 4 Baseline plus left bracket e Superscript j k omega Baseline right bracket Subscript normal pi divided by 4 Superscript normal pi divided by 2 Baseline right parenthesis equals
eq uals StartFraction 1 Over normal pi k EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j k normal pi divided by 4 Baseline minus e Superscript minus j k normal pi divided by 2 Baseline plus e Superscript j k normal pi divided by 2 Baseline minus e Superscript j k normal pi divided by 4 Baseline right parenthesis equals ModifyingBelow StartFraction 1 Over normal pi k EndFraction left parenthesis sine k StartFraction normal pi Over 2 EndFraction minus sine k StartFraction normal pi Over 4 EndFraction right parenthesis With quotation dash
equ al s StartFraction 1 Over normal pi k EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j k normal pi divided by 4 Baseline minus e Superscript minus j k normal pi divided by 2 Baseline plus e Superscript j k normal pi divided by 2 Baseline minus e Superscript j k normal pi divided by 4 Baseline right parenthesis equals ModifyingBelow StartFraction 1 Over normal pi k EndFraction left parenthesis sine k StartFraction normal pi Over 2 EndFraction minus sine k StartFraction normal pi Over 4 EndFraction right parenthesis With quotation dash
eq
u
als Star tFraction 1 Over no rmal pi k
 E ndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j k normal pi divided by 4 Baseline minus e Superscript minus j k normal pi divided by 2 Baseline plus e Superscript j k normal pi divided by 2 Baseline minus e Superscript j k normal pi divided by 4 Baseline right parenthesis equals ModifyingBelow StartFraction 1 Over normal pi k EndFraction left parenthesis sine k StartFraction normal pi Over 2 EndFraction minus sine k StartFraction normal pi Over 4 EndFraction right parenthesis With quotation dash
eq
u
als StartFraction 1 Over normal pi k EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j k normal pi divided by 4 Baseline minus e Superscript minus j k normal pi divided by 2 Baseline plus e Superscript j k normal pi divided by 2 Baseline minus e Superscript j k normal pi divided by 4 Baseline right parenthesis equals ModifyingBelow StartFraction 1 Over normal pi k EndFraction left parenthesis sine k StartFraction normal pi Over 2 EndFraction minus sine k StartFraction normal pi Over 4 EndFraction right parenthesis With quotation dash
eq uals S tartFraction 1 Over normal pi k EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j k normal pi divided by 4 Baseline minus e Superscript minus j k normal pi divided by 2 Baseline plus e Superscript j k normal pi divided by 2 Baseline minus e Superscript j k normal pi divided by 4 Baseline right parenthesis equals ModifyingBelow StartFraction 1 Over normal pi k EndFraction left parenthesis sine k StartFraction normal pi Over 2 EndFraction minus sine k StartFraction normal pi Over 4 EndFraction right parenthesis With quotation dash
e
quals StartFraction 1 Over normal pi k EndFraction dot StartFraction 1 Over 2 j EndFraction left parenthesis e Superscript minus j k normal pi divided by 4 Baseline minus e Superscript minus j k normal pi divided by 2 Baseline plus e Superscript j k normal pi divided by 2 Baseline minus e Superscript j k normal pi divided by 4 Baseline right parenthesis equals ModifyingBelow StartFraction 1 Over normal pi k EndFraction left parenthesis sine k StartFraction normal pi Over 2 EndFraction minus sine k StartFraction normal pi Over 4 EndFraction right parenthesis With quotation dash
Table 10.3 lists the ﬁrst eleven coefﬁcients. Since b±4 = 0 and since we need “the 
ﬁrst nine non-zero coefﬁcients” we must also use b±5. Hence, the difference equation 
is 
y S ubscript n Baseline eq uals 0.109 x  Subscript n  Baseline m inus 0.181 x Subscript n minus 2 Baseline minus 0.159 x Subscript n minus 3 Baseline plus 0.093 x Subscript n minus 4 Baseline plus 0.25 x Subscript n minus 5 Baseline plus 0.093 x Subscript n minus 6 minus
minus 0.159  x Subscript  n minus 7 minus 0.181 x Subscript n minus 8 plus 0.109 x Subscript n minus 10
The frequency response is plotted in Fig. 10.21. 
Problem 10.2 First, plot the frequency response of the analog ﬁlter upper  H
 left parenthesis s right parenthesis equals s divided by left parenthesis s plus 10 right parenthesis. What type of ﬁlter is it and what is the cutoff frequency? Next, use 
bilinear transformation to design the corresponding IIR ﬁlter using a sampling rate 
of 100 S/s. Plot the frequency response of this ﬁlter. What is the cutoff frequency of 
the IIR ﬁlter? 
Solution The Fourier transform is
Fig. 10.21 The frequency response 

10.5 Solved Problems
225
Fig. 10.22 Frequency response of analog ﬁlter 
upper H 
left parenthesis omega right parenthesis equals StartFraction j omega Over j omega plus 10 EndFraction equals StartFraction StartAbsoluteValue omega EndAbsoluteValue Over StartRoot omega squared plus 10 squared EndRoot EndFraction dot e Superscript j left parenthesis 90 Super Superscript ring Superscript minus tangent Super Superscript negative 1 Superscript omega divided by 10 right parenthesis Baseline equals StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue dot e Superscript j phi left parenthesis omega right parenthesis
upper H l
eft parenthesis omega right parenthesis equals StartFraction j omega Over j omega plus 10 EndFraction equals StartFraction StartAbsoluteValue omega EndAbsoluteValue Over StartRoot omega squared plus 10 squared EndRoot EndFraction dot e Superscript j left parenthesis 90 Super Superscript ring Superscript minus tangent Super Superscript negative 1 Superscript omega divided by 10 right parenthesis Baseline equals StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue dot e Superscript j phi left parenthesis omega right parenthesis
√
up er H l eft parenthesis omega right parenthesis equals StartFraction j omega Over j omega plus 10 EndFraction equals StartFraction StartAbsoluteValue omega EndAbsoluteValue Over StartRoot omega squared plus 10 squared EndRoot EndFraction dot e Superscript j left parenthesis 90 Super Superscript ring Superscript minus tangent Super Superscript negative 1 Superscript omega divided by 10 right parenthesis Baseline equals StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue dot e Superscript j phi left parenthesis omega right parenthesis
The frequency response is plotted in Fig. 10.22; it is a highpass ﬁlter with a cutoff 
frequency of 10 rad/s. 
Since 2/T S = 2/(1/100) = 200, the bilinear transformation to z space is 
upper 
H le ft parenthesis z right parenthesis equals StartStartFraction 200 dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction OverOver 200 dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction plus 10 EndEndFraction equals StartFraction 1 minus z Superscript negative 1 Baseline Over 1 minus z Superscript negative 1 Baseline plus 0.05 left parenthesis 1 plus z Superscript negative 1 Baseline right parenthesis EndFraction equals StartFraction 1 minus z Superscript negative 1 Baseline Over 1.05 minus 0.95 z Superscript negative 1 Baseline EndFraction equals
upper H left parenthesis z right parenthesis equals StartStartFraction 200 dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction OverOver 200 dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction plus 10 EndEndFraction equals StartFraction 1 minus z Superscript negative 1 Baseline Over 1 minus z Superscript negative 1 Baseline plus 0.05 left parenthesis 1 plus z Superscript negative 1 Baseline right parenthesis EndFraction equals StartFraction 1 minus z Superscript negative 1 Baseline Over 1.05 minus 0.95 z Superscript negative 1 Baseline EndFraction equals
uppe r H left parenthesis z right parenthesis equals StartStartFraction 200 dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction OverOver 200 dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction plus 10 EndEndFraction equals StartFraction 1 minus z Superscript negative 1 Baseline Over 1 minus z Superscript negative 1 Baseline plus 0.05 left parenthesis 1 plus z Superscript negative 1 Baseline right parenthesis EndFraction equals StartFraction 1 minus z Superscript negative 1 Baseline Over 1.05 minus 0.95 z Superscript negative 1 Baseline EndFraction equals
upper H lef
t
 p arenthesis z right parenthesis equals StartStartFraction 200 dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction OverOver 200 dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction plus 10 EndEndFraction equals StartFraction 1 minus z Superscript negative 1 Baseline Over 1 minus z Superscript negative 1 Baseline plus 0.05 left parenthesis 1 plus z Superscript negative 1 Baseline right parenthesis EndFraction equals StartFraction 1 minus z Superscript negative 1 Baseline Over 1.05 minus 0.95 z Superscript negative 1 Baseline EndFraction equals
up per H left p
a
re nthesi s
 z  right parenthesis equals StartStartFraction 200 dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction OverOver 200 dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction plus 10 EndEndFraction equals StartFraction 1 minus z Superscript negative 1 Baseline Over 1 minus z Superscript negative 1 Baseline plus 0.05 left parenthesis 1 plus z Superscript negative 1 Baseline right parenthesis EndFraction equals StartFraction 1 minus z Superscript negative 1 Baseline Over 1.05 minus 0.95 z Superscript negative 1 Baseline EndFraction equals
upper  H left pa renthesis z right parenthesis equals StartStartFraction 200 dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction OverOver 200 dot StartFraction 1 minus z Superscript negative 1 Baseline Over 1 plus z Superscript negative 1 Baseline EndFraction plus 10 EndEndFraction equals StartFraction 1 minus z Superscript negative 1 Baseline Over 1 minus z Superscript negative 1 Baseline plus 0.05 left parenthesis 1 plus z Superscript negative 1 Baseline right parenthesis EndFraction equals StartFraction 1 minus z Superscript negative 1 Baseline Over 1.05 minus 0.95 z Superscript negative 1 Baseline EndFraction equals
equals S tartFraction 0.952 minus 0.952 z Superscript negative 1 Baseline Over 1 minus 0.905 z Superscript negative 1 Baseline EndFraction equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction right double arrow
eq uals StartF
ra ction 0.952 minus 0.952 z Superscript negative 1 Baseline Over 1 minus 0.905 z Superscript negative 1 Baseline EndFraction equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction right double arrow
equals StartFraction 0.952 minus 0.952 z Superscript negative 1 Baseline Over 1 minus 0.905 z Superscript negative 1 Baseline EndFraction equals StartFraction upper Y left parenthesis z right parenthesis Over upper X left parenthesis z right parenthesis EndFraction right double arrow
right double arrow uppe r Y left parenthesis z right parenthesis minus 0.905 upper Y left parenthesis z right parenthesis z Superscript negative 1 Baseline equals 0.952 upper X left parenthesis z right parenthesis minus 0.952 upper X left parenthesis z right parenthesis z Superscript negative 1 Baseline right double arrow
right  double arro w y Subscript n Baseline equals 0.905 y Subscript n minus 1 Baseline plus 0.952 x Subscript n Baseline minus 0.952 x Subscript n minus 1
The frequency response is plotted in Fig. 10.23. 
The cutoff frequency of 10 rad/s in analog space has been transformed to 0.1 rad 
in z space. This is expected since
Fig. 10.23 Frequency response of the IIR ﬁlter 

226
10
Digital Filters
Fig. 10.24 IIR ﬁlter
n ormal upp er Omega equals 2 tangent Superscript negative 1 Baseline StartFraction upper T Subscript upper S Baseline Over 2 EndFraction omega equals 2 tangent Superscript negative 1 Baseline StartFraction 10 Over 200 EndFraction equals 0.1 rad
no rmal upper Omega equals 2 tangent Superscript negative 1 Baseline StartFraction upper T Subscript upper S Baseline Over 2 EndFraction omega equals 2 tangent Superscript negative 1 Baseline StartFraction 10 Over 200 EndFraction equals 0.1 rad
norm al up per  Omega equals 2 tangent Superscript negative 1 Baseline StartFraction upper T Subscript upper S Baseline Over 2 EndFraction omega equals 2 tangent Superscript negative 1 Baseline StartFraction 10 Over 200 EndFraction equals 0.1 rad
This corresponds to a frequency of StartFraction 0.1 Over 2 normal pi EndFraction 100 equals 1.6 Hz equals 10 rad slash s
StartFr actio n 0 .1 Ov er 2 normal pi EndFraction 100 equals 1.6 Hz equals 10 rad slash s. 
Problem 10.3 Look at the IIR ﬁlter in Fig. 10.24. What does this ﬁlter do? What is 
the application of such a ﬁlter? 
Solution The difference equation is y S ubscript n B aseline equals 0.2 y Subscript n minus 100 Baseline plus x Subscript n and the transfer function 
is 
upper H
 left parenthesis z right parenthesis equals StartFraction 1 Over 1 minus 0.2 z Superscript negative 100 Baseline EndFraction Poles colon 1 minus 0.2 z Superscript negative 100 Baseline equals 0 right double arrow z Superscript 100 Baseline equals 0.2 right double arrow
up per H left 
parenth es is z right pare
nthesis  equa
ls StartFraction 1 Over 1 minus 0.2 z Superscript negative 100 Baseline EndFraction Poles colon 1 minus 0.2 z Superscript negative 100 Baseline equals 0 right double arrow z Superscript 100 Baseline equals 0.2 right double arrow
l
eft parenthe sis up per A dot e Sup
erscript j phi Baselin e r ight parenthesis Superscript 100 Baseline equals 0.2 dot e Superscript j left parenthesis 0 Super Superscript ring Superscript plus or minus n 360 Super Superscript ring Superscript right parenthesis Baseline right double arrow upper A equals 0.2 Superscript 1 divided by 100 Baseline equals 0.98 phi equals plus or minus n dot 3.6 Superscript ring
The poles’ location in z space is illustrated in Fig. 10.25; there are 100 poles and 
only the ﬁrst 10 poles are marked in Fig. 10.25. The frequency response is illustrated 
in Fig. 10.26.
From the look of the frequency response, this kind of ﬁlter is sometimes called 
a ‘comb’ ﬁlter. What does it do? It adds an attenuated delayed output sample to the 
present output sample; that will generate an ‘echo’ effect. This has obvious audio 
applications where the input is the microphone, and the output is the loudspeaker.

10.5 Solved Problems
227
Fig. 10.25 Pole chart; ﬁrst ten poles (of 100) 
Fig. 10.26 Frequency response of ‘comb’ ﬁlter

Chapter 11 
ADCs and Sampling 
Abstract Almost all real signals are analog by nature and almost all measurement 
systems are digital. That means that in most measurement systems, the signal must 
be converted from the analog world to the digital world and a basic understanding of 
this process is paramount. First, quantization and quantization noise are discussed in 
general and then a few different analog-to-digital converter techniques (ADCs) are 
presented. The ﬁrst one is the successive approximation ADC (SAR) followed by the 
ﬂash ADC, the pipeline ADC, and the dual slope ADC. Level-crossing ADCs and 
the sigma-delta ADCs are also presented (but they are less common in the physics 
lab). The theory also includes the concept of an equivalent number of bits (ENOB) 
and ‘dithering’. This chapter also digs a little deeper into the sampling process; the 
beneﬁt of oversampling and how to achieve extreme sampling rates (time-interleaved 
sampling and equivalent-time sampling). 
11.1 
Introduction 
We have previously ‘sampled’ to ‘discretize’ an analog signal, but we never got into 
the details of how this is implemented in hardware. The sampling unit is a central 
component in any measurement system, but the sampling itself is only part of the 
secret. The ‘sample’ value of an analog signal can have any value; its range is all real 
numbers (element of double struck upper R). Since the ‘end station’ of most samples is ‘some kind of computer’ 
(digital device), the sample must also be ‘digitized’ (we will call it ‘quantized’). The 
quantization is done by an analog-to-digital converter (ADC) and there are only a 
handful techniques to implement an ADC in electronics. Finally, we will discuss 
some ‘advanced’ aspects on sampling and quantization theory.
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_11 
229

230
11
ADCs and Sampling
Fig. 11.1 Sampling 
11.2 
Sampling 
For the quantization process to work (the analog-to-digital conversion), the sample 
value must be constant during the entire conversion process. This is illustrated in 
Fig. 11.1; the dotted line represents the input value to the ADC. It is the responsibility 
of the sample and hold unit to take a sample and hold it constant until the quantization 
is completed. 
Figure 11.2 illustrates a sample and hold unit. The S&H unit consists of three 
components: A voltage follower, a capacitor, and a switch. The switch is controlled 
by the sampling clock signal. It is ‘closed’ during the ‘positive’ period of the sampling 
clock and during this time the capacitor is charged to the input signal level. The high 
input impedance of the op-amp ensures that it doesn’t discharge during the ‘negative’ 
period. Hence, the output of the voltage follower will be the dotted line in Fig. 11.1.
11.3 
Quantization and Quantization Noise 
An ADC takes an analog voltage (the sample) and converts it into an integer (a 
binary integer) that is proportional to the sample voltage. An ADC is characterized 
by two parameters. The most important parameter is the number of bits, n, in the  
digital (binary) output integer. The second parameter is the reference voltage Uref. 
Figure 11.3 illustrates an n-bit ADC.
The ADC divides the reference voltage into 2n equidistant levels (usually). If, for 
example, Uref = 3.3 V and n = 8, we will have 256 levels, and the distance between 
each level is
normal uper Delta upper U equals StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction equals StartFraction 3.3 Over 2 Superscript 8 Baseline EndFraction equals 12.89 mV
nor mal upper Delta upper U equals StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction equals StartFraction 3.3 Over 2 Superscript 8 Baseline EndFraction equals 12.89 mV
nor mal uppe r 
Delta upper U equals StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction equals StartFraction 3.3 Over 2 Superscript 8 Baseline EndFraction equals 12.89 mV
ΔU is the resolution of the ADC.1 Figure 11.4 illustrates how the reference voltage 
is divided into 256 levels (2n levels in the general case).
1 Sometimes just the number of bits (n) is used for the resolution: “The ADC has a resolution of 12 
bits.” 

11.3 Quantization and Quantization Noise
231
Fig. 11.2 Sample and hold unit
Fig. 11.3 Analog-to-digital conversion
Notice that there are 256 levels, numbered from 0 to 255; there is no level 256. 
The last voltage level is Uref – ΔU. The  sample  Ain from the sample and hold unit is 
simply assigned the integer level number that is closest to the sample value: 
upper  D Subs
c ript out Baseline equals round left parenthesis StartFraction upper A Subscript in Baseline Over normal upper Delta upper U EndFraction right parenthesis
up
p
er D Subscript out Baseline equals round left parenthesis StartFraction upper A Subscript in Baseline Over normal upper Delta upper U EndFraction right parenthesis

232
11
ADCs and Sampling
Fig. 11.4 The reference voltage is divided into 2n levels
Our sample of 2.397338662 in Fig. 11.3 will be converted to 
upper  D Subs
cript out Baseline equals round left parenthesis StartFraction 2.397338662 Over 0.01289 EndFraction right parenthesis equals round left parenthesis 185.984 right parenthesis equals 186
upper D
 
Subscript out Baseline equals round left parenthesis StartFraction 2.397338662 Over 0.01289 EndFraction right parenthesis equals round left parenthesis 185.984 right parenthesis equals 186
Of course, the ADC will produce it in binary format: 
upper  D Subscript  out Baseline equals 1011 1010 Subscript 2 Baseline equals 186 Subscript 10
This is the number that is sampled by the data acquisition computer, and it will 
be re-converted to a voltage: 
M
o
dif yingAbo v e upper A  With care t Subscript i n
 Baseline equals upper D Subscript out Baseline times normal upper Delta upper U equals 186 times 0.01289 equals 2.39765625 upper V
Notice a few details in Fig. 11.4. The digital output value changes in the middle of 
the two ΔU levels. A consequence of that is that the width of the ﬁrst interval is only
ΔU/2 and the last interval is 3ΔU/2. Figure 11.5 illustrates the in–out characteristics 
of an 8-bit ADC.
We can see in Eq. (11.3) that there is a small discrepancy between our estimate 
M
o
difyingAbove upper A With caret Subscript in and the ‘true’ upper A Subscript in sample, an uncertainty, because of the rounding in Eq. (11.2). 
The ‘true’ value upper A Subscript in can be anywhere in the interval 
left p arenthes is upper D Subscr ipt out Ba
seline minus 0.5 right parenthesis times normal upper Delta upper U less than or equals upper A Subscript in Baseline less than or equals left parenthesis upper D Subscript out Baseline plus 0.5 right parenthesis times normal upper Delta upper U

11.4 Digital-to-Analog Converters
233
Fig. 11.5 In–out characteristics of 8-bit ADC
Fig. 11.6 The quantization 
adds noise to the signal 
The discrepancy between M
o
difyingAbove upper A With caret Subscript in and upper A Subscript in is called the quantization noise (or the 
‘residual’) and is a stochastic variable with a uniform distribution between plus or minus normal upper Delta upper U divided by 2. 
We can model this as noise that is added to the sample, see Fig. 11.6. 
In Fig. 11.7 we have sampled a sinusoidal signal and plotted the quantization 
noise in the same graph (×20); the quantization noise will set a limit to how small 
signal changes we can detect with the ADC.
We will have more to say about quantization noise later. 
11.4 
Digital-to-Analog Converters 
A Digital-to-Analog converter (DAC) does exactly the opposite of an ADC; the input 
is an integer (the ‘digital’) and the output is an analog voltage, see Fig. 11.8. The  
analog output voltage is

234
11
ADCs and Sampling
Fig. 11.7 The quantization noise in sampling (Uref = 5.0 V, 8-bit ADC)
upper  A  Subscript out Baseline equals StartFraction upper D Subscript in Baseline Over 2 Superscript n Baseline EndFraction times upper U Subscript ref
upp er A S
ubscript out Baseline equals StartFraction upper D Subscript in Baseline Over 2 Superscript n Baseline EndFraction times upper U Subscript ref
We will not go into the details of DACs here. They are much easier to implement 
in hardware than ADCs; the two dominating techniques are (a) an ‘R-2R ladder’ 
circuit and (b) lowpass ﬁltering of a PWM signal. (You can easily google that if 
you are interested.) The only reason we mention them here is because some ADCs 
depend on a DAC to do an analog-to-digital conversion. 
11.5 
SAR ADCs 
The successive approximation register (SAR) ADC is one of the most common 
and popular ADCs since it is a good compromise between speed and resolution. 
Figure 11.9 illustrates the SAR architecture. 
The DAC generates an analog voltage that is compared with the analog input 
sample in a comparator. The comparator output is fed back to the ‘SAR logic’ which 
changes the DAC input value until it equals Ain. The ‘cleverness’ in the circuit is 
the order in which the SAR logic changes the input values to the DAC to minimize 
the conversion time. In the ﬁrst input value to the DAC, only the most signiﬁcant
Fig. 11.8 Digital-to-analog 
converter

11.5 SAR ADCs
235
Fig. 11.9 SAR ADC 
architecture
bit is set: 10000 … 00 (binary). This corresponds to a DAC output value of Uref/ 
2. If the comparator output is ‘1’, we know that Ain > Uref/2, and the only way to 
get a larger analog output from the DAC is if we keep the most signiﬁcant bit = 1. 
If the comparator output is ‘0’, we know that Ain < Uref/2, and the most signiﬁcant 
bit must be = 0; in a single comparison, we have determined the value of the most 
signiﬁcant bit. In the next comparison, we set the second most signiﬁcant bit to ‘1’, 
and the comparator output determines if we should keep it or not. We continue until 
all bits have been compared and the digital output value is the output from the n-bit 
register used as the DAC input. An n-bit SAR ADC needs n comparisons to do an 
analog-to-digital conversion. The comparison process for an 8-bit SAR is illustrated 
in Fig. 11.10. 
The SAR algorithm is by no means a contemporary invention. It was ﬁrst suggested 
by an Italian mathematician, Tartaglia, in 1556. However, he was not concerned with 
SAR ADCs, he suggested the SAR algorithm to optimize the weighting on balance 
scales: Start with the heaviest counterweight and keep it if the weight is too small. 
Next, take the second heaviest counterweight, etc.
Fig. 11.10 Ain = 1.87 V ⇒ Dout = 1001 00012 = 145 (Uref = 3.3 V) 

236
11
ADCs and Sampling
11.6 
Flash ADCs 
When it comes to conversion speed, there is no design that can beat the ﬂash ADC. 
The ﬂash technique is illustrated in Fig. 11.11. In a ﬂash ADC, the input sample 
is fed to the minus input of many comparators and the plus inputs are provided a 
successively higher potential from a resistor network; if the input sample voltage is 
higher than the potential on the comparator’s plus input, the output will be ‘0’. In 
general, the comparators at the bottom will have a ‘0’ output, and the comparators at 
the top will have an output = ‘1’. The number of 0s at the bottom will be proportional 
to the input sample voltage and the ‘decoder’s’ job is simply to count the number of 0s 
and produce this number on the output (a 2n – to –  n decoder). Since all comparisons 
are performed simultaneously, it is sometimes called a parallel ADC.
It is easy to see why this technique is so fast; all comparisons take place at the same 
time and the only delay is caused by the signal propagation delays in the comparators 
and the decoder. It is also easy to see the disadvantage; an n-bit ﬂash ADC requires 
2n comparators (minus 1); a 16-bit ﬂash ADC would need 65,535 comparators. This 
is not possible to implement in silicon and for that reason, you will only ﬁnd ﬂash 
ADCs with ‘low’ resolution (8–10 bits). In the next section we will see how to remedy 
this. 
11.7 
Pipeline ADCs 
To solve the problem with the large number of comparators in a ﬂash ADC, pipeline 
ADCs are used. We will present the pipeline ADC with an example. First, a sample 
voltage of Ain = 2.65 V would be converted to 
round
 
left parenthesis StartFraction 2.65 Over 5.00 divided by 2 Superscript 13 Baseline EndFraction right parenthesis equals 4342 equals 10 upper F 6 Subscript 16 Baseline equals 1 0000 1111 0110 Subscript 2 Baseline
round le
f
t paren thesis St artF racti on 2. 65 Ov
er 5.00 divided by 2 Superscript 13 Baseline EndFraction right parenthesis equals 4342 equals 10 upper F 6 Subscript 16 Baseline equals 1 0000 1111 0110 Subscript 2 Baseline
in a 13-bit ADC with a +5.00-V reference voltage. (We keep this in mind to verify 
our result later.) If the ADC is the ﬂash ADC in Fig. 11.11, we would need 213 – 1  
= 8191 comparators. With the pipeline ADC, we only need 36! (At the cost of some 
minor additional delay.) Figure 11.12 illustrates the pipeline ADC. The secret of the 
pipeline ADC is the electronics in the ‘stages’. Figure 11.13 illustrates the contents 
of stage 1.
In stage 1, Ain is ﬁrst converted by a 3-bit (ﬂash) ADC and the ADC output is then 
DA converted back to an analog voltage. This analog voltage is subtracted from Ain 
to get the ‘residual’ of the 3-bit AD conversion. This residual could be anywhere in 
the range plus or minus normal upper Delta upper U divided by 2; if it is negative, our circuit would add it to Ain. For that reason, 
we will assume that we have a truncating ADC (which is only a modiﬁcation of 
the resistor network in Fig. 11.11) and then the residual will always be positive in 
the range 0 to nor mal upper Delta upper U equals upper U Subscript r e f Baseline divided by 2 cubed. This residual is multiplied by 4 (22) before it is fed

11.7 Pipeline ADCs
237
Fig. 11.11 Flash ADC
forward to the next stage. Hence, the maximum voltage fed forward to the next stage 
is 
StartFraction upper U Subscript ref Baseline Over 2 cubed EndFraction times 2 squared equals StartFraction upper U Subscript ref Baseline Over 2 EndFraction
Sta rtFra ction upper U Subscript ref Baseline Over 2 cubed EndFraction times 2 squared equals StartFraction upper U Subscript ref Baseline Over 2 EndFraction
St
artFraction upper U Subscript ref Baseline Over 2 cubed EndFraction times 2 squared equals StartFraction upper U Subscript ref Baseline Over 2 EndFraction
(Which means that the reference voltage of the ADC in the next stage should be 
half of the reference voltage in the previous stage.) Our 3-bit ADC in Fig. 11.13 has 
a resolution of 5 divided by 2 cubed = 0.625 V. The ADC output is StartAbsoluteValu e 2.65 divided by 0.625 EndAbsoluteValue equals 4 equals 100 Subscript 2. This  
is also the input to the DAC and the DAC output will be 4 t imes 0.625 = 2.50 V and the

238
11
ADCs and Sampling
Fig. 11.12 A pipeline ADC 
Fig. 11.13 Stage 1
residual is 2.65 – 2.50 = 0.15 V. The voltage fed forward to stage 2 is 4 times 0.15 = 
0.60 V. 
Stage 2 is identical to stage 1, except that the reference voltages have been divided 
by 2, see Fig. 11.14.
In stage 2, the ADC resolution is 2.5/8 = 0.3125 and the ADC output is 
StartAbsolute Va lu e 0.6 divided by 0.3125 EndAbsoluteValue equals 1 equals 001 Subscript 2. The DAC output is 1 × 0.3125 = 0.3125 V, and the 
residual is 0.6000 – 0.3125 = 0.2875 V. The voltage fed forward to stage 3 is 4 × 
0.2875 = 1.15 V. Stage 3 is identical to stage 2, except that the reference voltages 
have again been divided by 2, see Fig. 11.15.
The ADC resolution its now 1.25/8 = 0.15625 V and the ADC output is 
StartAbsoluteValue 1.15 divided by 0.15625 EndAbsoluteValue equals 7 equals 111 Subscript 2. The DAC output is 7 × 0.15625 = 1.09375 V, and 
the residual is 1.15 – 1.09375 = 0.05625 V. The voltage fed forward to the ﬁnal stage 
is 4 × 0.05625 = 0.225 V. 
Stage 4 is a 4-bit ﬂash ADC (rounding, not truncating) with a reference voltage 
that has again been divided by 2, see Fig. 11.16.

11.7 Pipeline ADCs
239
Fig. 11.14 Stage 2; reference voltages have been divided by 2
Fig. 11.15 Stage 3
Fig. 11.16 Stage 4 
The resolution of this ADC is 0.625 divided by 2 Superscript 4 and with an input voltage of 0.225, the 
output is itali
c
 round
 
left paren
thes is 0.225 divided by left parenthesis 0.625 divided by 2 Superscript 4 Baseline right parenthesis right parenthesis equals 6 equals 0110 Subscript 2 Baseline. Putting all the digital outputs in 
Figs. 11.13, 11.14, 11.15 and 11.16 together, we see that the 13-bit output is

240
11
ADCs and Sampling
1 0000 1111 0110 S ubscri
pt 2 Baseline equals 4342
Which agrees exactly with our prediction in Eq. (11.6). 
Notice ﬁrst, that stages 1–3 used a 3-bit ﬂash ADC, i.e., a total of 3 × (23 – 1)  
= 21 comparators. Stage 4 used a 4-bit ﬂash which needs 24 – 1  = 15 comparators 
and hence the entire pipeline ADC design in Fig. 11.12 only needs a total of 36 
comparators (compared to the 8191 comparators that would be required in a ‘real’ 
13-bit ﬂash ADC). 
The disadvantage of the design is that it will take a little longer to complete the 
conversion compared to a ‘real’ ﬂash ADC. However, the extra delay is very small 
since it only depends on gate delays in the circuits (there is no clock involved). And 
second, we can make up for this delay; if the result from the ﬁrst stage is ‘latched’ 
in a register, then we can start the conversion of the next sample as soon as the ﬁrst 
stage is completed (samples are ‘pipelined’). Hence, the effective conversion time is 
¼ of the total conversion time of the ADC. 
11.8 
Dual Slope ADCs 
The dual slope ADC is the dominating ADC technique used in DMMs. The dual slope 
ADC is also called the ‘integrating’ ADC. The reason is that it uses an integrator as 
part of the design. 
11.8.1 
The Integrator 
Figure 11.17 illustrates an integrator. 
The op-amp in Fig. 11.17 has negative feedback, indicating that the inverting input 
is at virtual ground, and hence the current I must be Uin/R. By deﬁnition, current is 
‘charge variation per time unit’:
Fig. 11.17 Integrator 

11.8 Dual Slope ADCs
241
up per I equals StartFraction upper U Subscript in Baseline Over upper R EndFraction equals StartFraction d upper Q Over d t EndFraction long right double arrow d upper Q equals upper I d t equals StartFraction upper U Subscript in Baseline Over upper R EndFraction d t
up per I equals StartFraction upper U Subscript in Baseline Over upper R EndFraction equals StartFraction d upper Q Over d t EndFraction long right double arrow d upper Q equals upper I d t equals StartFraction upper U Subscript in Baseline Over upper R EndFraction d t
upp er I equals StartFraction upper U Subscript in Baseline Over upper R EndFraction equals StartFraction d upper Q Over d t EndFraction long right double arrow d upper Q equals upper I d t equals StartFraction upper U Subscript in Baseline Over upper R EndFraction d t
up pe
r I equals StartFraction upper U Subscript in Baseline Over upper R EndFraction equals StartFraction d upper Q Over d t EndFraction long right double arrow d upper Q equals upper I d t equals StartFraction upper U Subscript in Baseline Over upper R EndFraction d t
lon g r
i
ght do uble arrow upper Q equals integral upper I d t equals StartFraction 1 Over upper R EndFraction integral upper U Subscript in Baseline d t
l
o
ng ri
ght double arrow upper Q equals integral upper I d t equals StartFraction 1 Over upper R EndFraction integral upper U Subscript in Baseline d t
The voltage across the capacitor is 
upp er  U Subscript c Baseline equals StartFraction upper Q Over upper C EndFraction equals StartFraction 1 Over upper R upper C EndFraction integral upper U Subscript in Baseline d t
up pe r U Subscript c Baseline equals StartFraction upper Q Over upper C EndFraction equals StartFraction 1 Over upper R upper C EndFraction integral upper U Subscript in Baseline d t
up
p
er U 
Subscript c Baseline equals StartFraction upper Q Over upper C EndFraction equals StartFraction 1 Over upper R upper C EndFraction integral upper U Subscript in Baseline d t
The op-amp output Uout = −Uc: 
upper  U  Subscript out Baseline equals minus StartFraction 1 Over upper R upper C EndFraction integral upper U Subscript in Baseline d t
up
p
er U 
Subscript out Baseline equals minus StartFraction 1 Over upper R upper C EndFraction integral upper U Subscript in Baseline d t
We conclude that the output of the circuit in Fig. 11.17 is the integral of the 
input signal and if the input signal is constant (positive), the output will be a linearly 
decreasing signal: 
upper  U  Subscript out Baseline equals minus StartFraction 1 Over upper R upper C EndFraction dot upper U Subscript in Baseline dot t
upper U S ubs
cript out Baseline equals minus StartFraction 1 Over upper R upper C EndFraction dot upper U Subscript in Baseline dot t
That is what we need to explain the dual slope ADC. 
11.8.2 
The Dual Slope Circuit 
The dual slope ADC is illustrated in Fig. 11.18.
We can see an integrator (with output signal UI), a comparator, and a binary 
counter. There are two input voltages to the integrator: The input sample Ain and the 
reference voltage Uref. The switches S1 and S2 decide which voltage is fed to the 
integrator. For the design to work, Uref < 0, and StartAbsoluteValue upper A Subscript in Baseline EndAbsoluteValue less than StartAbsoluteValue upper U Subscript ref Baseline EndAbsoluteValue. Ain is assumed to be 
≥0 V.  
At time t = 0, the controller closes switch S1 and opens switch S2; Ain is the input 
signal to the integrator and hence the integrator output is −Ain · t/RC (see Eq. (11.13)); 
UI decreases linearly with time at a rate that depends on the input sample Ain. Since 
the integrator output is < 0, the comparator output will be ‘0’. Also, at t = 0, the 
binary counter is reset, and the clock starts to increase the binary counter value (from 
0). The integrator output decreases until the binary counter reaches its maximum 
count value and ‘overﬂows’ (after 2n clock pulses). This happens after time t1 and 
Fig. 11.19 illustrates the integrator’s and the comparator’s output and the counter 
value at t = t1.
When the control logic senses the overﬂow signal from the binary counter, it opens 
switch S1 and closes switch S2; the (negative) reference voltage will now discharge

242
11
ADCs and Sampling
Fig. 11.18 The dual slope ADC
Fig. 11.19 Phase 1: charging
the capacitor, and the voltage on the integrator output will ‘turn upwards’. It is still < 
0 though, so the comparator output is still ‘0’. The binary counter just starts over 
from 0. Figure 11.20 illustrates the signals sometime after t1.
When the integrator output crosses the ‘zero line’ (after time t2) the comparator 
output goes high and when the control logic senses this, the clock to the binary 
counter is immediately stopped and the binary counter output stops on Dout, see  
Fig. 11.21.
We will now prove that this an ADC; by deﬁnition, it is an ADC if the relationship 
between the input sample Ain and the digital output Dout is 
uppe r A Sub script in Baseline equals upper D Subscript out Baseline times StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction
upp
er A Subscript in Baseline equals upper D Subscript out Baseline times StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction

11.8 Dual Slope ADCs
243
Fig. 11.20 Phase 2: discharging
Fig. 11.21 Done!
After time t1 the integrator output will stop on 
upper U  S ubscript upper I comma max Baseline equals minus StartFraction 1 Over upper R upper C EndFraction dot upper A Subscript in Baseline t 1
upper U Su
bscript upper I comma max Baseline equals minus StartFraction 1 Over upper R upper C EndFraction dot upper A Subscript in Baseline t 1
During time t2, Uref will discharge the same voltage: 
upper U  S ubscript upper I comma max Baseline equals minus StartFraction 1 Over upper R upper C EndFraction dot upper U Subscript ref Baseline t 2 equals minus StartFraction 1 Over upper R upper C EndFraction dot upper A Subscript in Baseline t 1 right double arrow StartFraction t 2 Over t 1 EndFraction equals StartFraction upper A Subscript in Baseline Over upper U Subscript r e f Baseline EndFraction
upper U Subs c r ipt upper I comma max Baseline equals minus StartFraction 1 Over upper R upper C EndFraction dot upper U Subscript ref Baseline t 2 equals minus StartFraction 1 Over upper R upper C EndFraction dot upper A Subscript in Baseline t 1 right double arrow StartFraction t 2 Over t 1 EndFraction equals StartFraction upper A Subscript in Baseline Over upper U Subscript r e f Baseline EndFraction
upper U Sub script upper I comma max Baseline equals minus StartFraction 1 Over upper R upper C EndFraction dot upper U Subscript ref Baseline t 2 equals minus StartFraction 1 Over upper R upper C EndFraction dot upper A Subscript in Baseline t 1 right double arrow StartFraction t 2 Over t 1 EndFraction equals StartFraction upper A Subscript in Baseline Over upper U Subscript r e f Baseline EndFraction
up
er  U Subscript upper I comma max Baseline equals minus StartFraction 1 Over upper R upper C EndFraction dot upper U Subscript ref Baseline t 2 equals minus StartFraction 1 Over upper R upper C EndFraction dot upper A Subscript in Baseline t 1 right double arrow StartFraction t 2 Over t 1 EndFraction equals StartFraction upper A Subscript in Baseline Over upper U Subscript r e f Baseline EndFraction
upper
 U Subscript upper I comma max Baseline equals minus StartFraction 1 Over upper R upper C EndFraction dot upper U Subscript ref Baseline t 2 equals minus StartFraction 1 Over upper R upper C EndFraction dot upper A Subscript in Baseline t 1 right double arrow StartFraction t 2 Over t 1 EndFraction equals StartFraction upper A Subscript in Baseline Over upper U Subscript r e f Baseline EndFraction
We also know that the clock frequency is constant during phase 1 and phase 2. 
The clock frequency f c is 
f S ubscript c Baseline equals StartFraction 2 Superscript n Baseline Over t 1 EndFraction equals StartFraction upper D Subscript out Baseline Over t 2 EndFraction right double arrow StartFraction t 2 Over t 1 EndFraction equals StartFraction upper D Subscript out Baseline Over 2 Superscript n Baseline EndFraction
f S
ub script c Baseline equals StartFraction 2 Superscript n Baseline Over t 1 EndFraction equals StartFraction upper D Subscript out Baseline Over t 2 EndFraction right double arrow StartFraction t 2 Over t 1 EndFraction equals StartFraction upper D Subscript out Baseline Over 2 Superscript n Baseline EndFraction
f S
ubscript c Baseline equals StartFraction 2 Superscript n Baseline Over t 1 EndFraction equals StartFraction upper D Subscript out Baseline Over t 2 EndFraction right double arrow StartFraction t 2 Over t 1 EndFraction equals StartFraction upper D Subscript out Baseline Over 2 Superscript n Baseline EndFraction
f S
ub script c Baseline equals StartFraction 2 Superscript n Baseline Over t 1 EndFraction equals StartFraction upper D Subscript out Baseline Over t 2 EndFraction right double arrow StartFraction t 2 Over t 1 EndFraction equals StartFraction upper D Subscript out Baseline Over 2 Superscript n Baseline EndFraction
f S
ubscript c Baseline equals StartFraction 2 Superscript n Baseline Over t 1 EndFraction equals StartFraction upper D Subscript out Baseline Over t 2 EndFraction right double arrow StartFraction t 2 Over t 1 EndFraction equals StartFraction upper D Subscript out Baseline Over 2 Superscript n Baseline EndFraction

244
11
ADCs and Sampling
Fig. 11.22 Phase 1: charging time is constant. Phase 2: discharging rate is constant 
Combining Eqs. (11.16) and (11.17) will give us Eq. (11.14) and we have proved 
that the circuit in Fig. 11.18 is indeed an ADC. 
Notice that the result above is independent of the R and C values which means 
that the design is independent of variations of these components (due to aging, 
temperature, etc.). We could have designed a much simpler solution, a single-slope 
ADC, but then the result would depend on the component values. The cleverness of 
the dual slope ADC is that it is independent of variations in R and C. 
From the design we can draw two conclusions: (1) It is not very fast. Charging 
and discharging of the integrator capacitor takes a ‘long’ time. (2) It is easy to design 
a dual slope ADC with high resolution; binary counters with many bits are easy 
to build. Hence, we have a slow ADC but with high-resolution potential. (Just the 
opposite of ﬂash ADCs.) 
Figure 11.22 summarizes the dual slope function. During phase 1 the time is 
always constant (the time it takes for the binary counter to overﬂow). During phase 
2, the discharging rate is always constant (determined by the reference voltage). 
Slow but ‘high-resolution’ is exactly what we need in a DMM and DMMs are 
always based on dual slope ADCs. 
11.9 
Level-Crossing ADCs 
Traditional sampling is based on a constant sampling time T S = 1/f S; samples 
are taken at regular intervals (see Fig. 11.1). This is sometimes referred to as 
‘synchronous’ sampling. Synchronous ADCs are characterized by a periodicity in 
time and equidistant quantization levels. Because of the ﬁxed equidistant quantiza-
tion levels, each sample will have an uncertainty, an error, see Fig. 11.23, and the 
size of the error is determined by the ADC’s resolution: 
Max error e q uals plus or minus one half times normal upper Delta upper U equals plus or minus one half times StartFraction upper U Subscript ref Baseline Over 2 Superscript upper N Baseline EndFraction
Ma x  err o r equals plus or minus one half times normal upper Delta upper U equals plus or minus one half times StartFraction upper U Subscript ref Baseline Over 2 Superscript upper N Baseline EndFraction
Ma x error equals plus or minus one half times normal upper Delta upper U equals plus or minus one half times StartFraction upper U Subscript ref Baseline Over 2 Superscript upper N Baseline EndFraction
Max
 error equals plus or minus one half times normal upper Delta upper U equals plus or minus one half times StartFraction upper U Subscript ref Baseline Over 2 Superscript upper N Baseline EndFraction

11.9 Level-Crossing ADCs
245
The ‘problem’ with synchronous ADCs is when ‘sparse’ or ‘burst-like’ signals 
are analyzed. Sparse or burst-like signals are signals with long periods of no, or very 
low, activity, resulting in a lot of identical samples (that really doesn’t carry any 
net information). Sparse and burst-like signals are, for example, radar and speech 
signals and electro cardiograms, see Figs. 11.24 and 11.25. For these situations, asyn-
chronous sampling is sometimes used. Asynchronous sampling is also sometimes 
called level-crossing sampling. 
The level-crossing ADC (LC-ADC) was ﬁrst suggested by Inose et al. in 1966 
[1] and in an LC-ADC the sampling is triggered by the signal activity rather than
Fig. 11.23 Synchronous sampling: uncertainty in voltage 
Fig. 11.24 An ECG signal is ‘sparse’

246
11
ADCs and Sampling
Fig. 11.25 A speech signal is ‘burst-like’
by a ﬁxed time interval. Instead of sampling regularly, the time between predeﬁned 
level-crossings is registered. 
Hence, the ‘sample’ is now a ‘time’ and not a ‘voltage’. Also, the sample must 
indicate the ‘direction’ of the change (up or down). The sample is a ‘time with a sign’. 
If the sample is −0.346 μs, it means that the signal has decreased one level during 
the last 0.346 μs and if it is +0.346 μs it has increased. Figure 11.26 illustrates the 
signal from Fig. 11.23 sampled asynchronously. 
Notice the irregular sampling intervals; the sample density follows the signal 
derivative. But notice most of all, that there is now no uncertainty in the samples’ 
voltage levels! The voltage levels are predeﬁned. The sampling problem has been 
transferred from quantizing voltage to quantizing time. And, as we will see in the 
next chapter, we can quantize time much more accurately than voltage. There are 
other advantages with the LC-ADCs too. First, for sparse and burst-like signals we 
take less samples and save memory. Second, since sampling is sparse, power-saving 
is implied since the sampling computer can revert to an ‘idle’, low-power mode 
between samples.
Fig. 11.26 Asynchronous sampling (‘level-crossing’): uncertainty in time 

11.11 Oversampling
247
11.10 
Equivalent Number of Bits 
The uncertainty in a synchronous sampling ADC is plus or minus normal upper Delta upper U divided by 2 (see Eq. (11.18)). We 
consider this uncertainty as the ‘noise’ in the ADC output with a ‘uniform’ probability 
distribution (see Sect. 13.5). The ‘power’ of this noise (produced in a 1-Ω resistor) 
is the variance of the corresponding stochastic variable, and it is (see Eq. (13.27)) 
upper P  Subsc ript noise Baseline equals sigma squared equals one third times left parenthesis StartFraction normal upper Delta upper U Over 2 EndFraction right parenthesis squared equals StartFraction normal upper Delta upper U squared Over 12 EndFraction
up p
er P Subscript noise Baseline equals sigma squared equals one third times left parenthesis StartFraction normal upper Delta upper U Over 2 EndFraction right parenthesis squared equals StartFraction normal upper Delta upper U squared Over 12 EndFraction
u
ppe
r  P  Subscript noise Baseline equals sigma squared equals one third times left parenthesis StartFraction normal upper Delta upper U Over 2 EndFraction right parenthesis squared equals StartFraction normal upper Delta upper U squared Over 12 EndFraction
upp
er P Subscript noise Baseline equals sigma squared equals one third times left parenthesis StartFraction normal upper Delta upper U Over 2 EndFraction right parenthesis squared equals StartFraction normal upper Delta upper U squared Over 12 EndFraction
The ADC range is 2n × ΔU; a maximum range sinusoidal would have an ampli-
tude of 2n × ΔU/2. The power of that signal (produced in a 1-Ω resistor) would 
be 
upper P Subscri p
t  signal Baseline equals RMS squared equals left parenthesis StartFraction upper A Over StartRoot 2 EndRoot EndFraction right parenthesis squared equals one half left parenthesis one half 2 Superscript n Baseline normal upper Delta upper U right parenthesis squared equals one eighth 2 Superscript 2 n Baseline normal upper Delta upper U squared
√
u
ppe
r P Subscript signal Baseline equals RMS squared equals left parenthesis StartFraction upper A Over StartRoot 2 EndRoot EndFraction right parenthesis squared equals one half left parenthesis one half 2 Superscript n Baseline normal upper Delta upper U right parenthesis squared equals one eighth 2 Superscript 2 n Baseline normal upper Delta upper U squared
u
pper P Subscript signal Baseline equals RMS squared equals left parenthesis StartFraction upper A Over StartRoot 2 EndRoot EndFraction right parenthesis squared equals one half left parenthesis one half 2 Superscript n Baseline normal upper Delta upper U right parenthesis squared equals one eighth 2 Superscript 2 n Baseline normal upper Delta upper U squared
upper 
P S
ubscript signal Baseline equals RMS squared equals left parenthesis StartFraction upper A Over StartRoot 2 EndRoot EndFraction right parenthesis squared equals one half left parenthesis one half 2 Superscript n Baseline normal upper Delta upper U right parenthesis squared equals one eighth 2 Superscript 2 n Baseline normal upper Delta upper U squared
upper P  S
ubscript signal Baseline equals RMS squared equals left parenthesis StartFraction upper A Over StartRoot 2 EndRoot EndFraction right parenthesis squared equals one half left parenthesis one half 2 Superscript n Baseline normal upper Delta upper U right parenthesis squared equals one eighth 2 Superscript 2 n Baseline normal upper Delta upper U squared
The signal-to-noise ratio of the ADC output (of the signal in Fig. 11.7) is  
Star tLayo ut 1st  Row 1st Column SNR 2nd Column equals 10 dot log StartFraction upper P Subscript signal Baseline Over upper P Subscript noise Baseline EndFraction equals 10 dot log StartFraction 2 Superscript 2 n Baseline normal upper Delta upper U squared divided by 8 Over normal upper Delta upper U squared divided by 12 EndFraction equals 10 dot log left parenthesis three halves dot 2 Superscript 2 n Baseline right parenthesis equals 2nd Row 1st Column Blank 2nd Column equals 10 dot log three halves plus 20 n dot log 2 equals 1.76 plus 6.02 n EndLayout
StartLa
yout 1st Ro w 1st  Column SNR 2nd Column equals 10 dot log StartFraction upper P Subscript signal Baseline Over upper P Subscript noise Baseline EndFraction equals 10 dot log StartFraction 2 Superscript 2 n Baseline normal upper Delta upper U squared divided by 8 Over normal upper Delta upper U squared divided by 12 EndFraction equals 10 dot log left parenthesis three halves dot 2 Superscript 2 n Baseline right parenthesis equals 2nd Row 1st Column Blank 2nd Column equals 10 dot log three halves plus 20 n dot log 2 equals 1.76 plus 6.02 n EndLayout
St artLay out 1 st Ro
w 1st Column SNR 2nd Column equals 10 dot log StartFraction upper P Subscript signal Baseline Over upper P Subscript noise Baseline EndFraction equals 10 dot log StartFraction 2 Superscript 2 n Baseline normal upper Delta upper U squared divided by 8 Over normal upper Delta upper U squared divided by 12 EndFraction equals 10 dot log left parenthesis three halves dot 2 Superscript 2 n Baseline right parenthesis equals 2nd Row 1st Column Blank 2nd Column equals 10 dot log three halves plus 20 n dot log 2 equals 1.76 plus 6.02 n EndLayout
St artLa
y
ou
t 1st  Row 1 st Column SNR 2nd Column equals 10 dot log StartFraction upper P Subscript signal Baseline Over upper P Subscript noise Baseline EndFraction equals 10 dot log StartFraction 2 Superscript 2 n Baseline normal upper Delta upper U squared divided by 8 Over normal upper Delta upper U squared divided by 12 EndFraction equals 10 dot log left parenthesis three halves dot 2 Superscript 2 n Baseline right parenthesis equals 2nd Row 1st Column Blank 2nd Column equals 10 dot log three halves plus 20 n dot log 2 equals 1.76 plus 6.02 n EndLayout
St artLayout 1s t Row 1st  Column
 SNR 2nd Column equals 10 dot log StartFraction upper P Subscript signal Baseline Over upper P Subscript noise Baseline EndFraction equals 10 dot log StartFraction 2 Superscript 2 n Baseline normal upper Delta upper U squared divided by 8 Over normal upper Delta upper U squared divided by 12 EndFraction equals 10 dot log left parenthesis three halves dot 2 Superscript 2 n Baseline right parenthesis equals 2nd Row 1st Column Blank 2nd Column equals 10 dot log three halves plus 20 n dot log 2 equals 1.76 plus 6.02 n EndLayout
This is the ‘raw’ signal-to-noise ratio in the ADC’s output. Circumstances can 
make this larger or smaller. External noise can make it smaller and signal processing 
tricks can make it larger. It is common to express the signal-to-noise ratio as the 
‘equivalent number of bits’ (ENOB); just solve for n in Eq. (11.21): 
ENOB equals  StartFraction SNR negative 1.76 Over 6.02 EndFraction
ENOB 
equals StartFraction SNR negative 1.76 Over 6.02 EndFraction
11.11 
Oversampling 
11.11.1 
As a Means to Reduce Noise 
According to the sampling theorem, a signal with bandwidth f b must be sampled 
at a rate higher than 2f b. Most systems sample faster than that and we deﬁne the 
oversampling rate (OSR) as how many times faster than the Nyquist limit 2f b we 
sample:

248
11
ADCs and Sampling
OSR eq uals StartFraction f Subscript upper S Baseline Over 2 f Subscript b Baseline EndFraction
OS R e
quals StartFraction f Subscript upper S Baseline Over 2 f Subscript b Baseline EndFraction
The obvious reason for oversampling is to get a better resolution in the time–space 
representation of the signal, but there are other advantages too. In Eq. (11.19), we 
found that the noise in the ADC output, due to the quantization, is no rmal upper Delta upper U squared divided by 12. Due  
to aliasing, this noise ends up in the frequency band 0…f S/2. Hence, the spectral 
density of the quantization noise is 
p e qu als StartFraction normal upper Delta upper U squared divided by 12 Over f Subscript upper S Baseline divided by 2 EndFraction equals StartFraction normal upper Delta upper U squared Over 12 EndFraction dot StartFraction 2 Over f Subscript upper S Baseline EndFraction left bracket StartFraction upper W Over Hz EndFraction right bracket
p equ
a ls  StartFraction normal upper Delta upper U squared divided by 12 Over f Subscript upper S Baseline divided by 2 EndFraction equals StartFraction normal upper Delta upper U squared Over 12 EndFraction dot StartFraction 2 Over f Subscript upper S Baseline EndFraction left bracket StartFraction upper W Over Hz EndFraction right bracket
p e
qu als StartFraction normal upper Delta upper U squared divided by 12 Over f Subscript upper S Baseline divided by 2 EndFraction equals StartFraction normal upper Delta upper U squared Over 12 EndFraction dot StartFraction 2 Over f Subscript upper S Baseline EndFraction left bracket StartFraction upper W Over Hz EndFraction right bracket
p 
e quals StartFraction normal upper Delta upper U squared divided by 12 Over f Subscript upper S Baseline divided by 2 EndFraction equals StartFraction normal upper Delta upper U squared Over 12 EndFraction dot StartFraction 2 Over f Subscript upper S Baseline EndFraction left bracket StartFraction upper W Over Hz EndFraction right bracket
p 
e
quals StartFraction normal upper Delta upper U squared divided by 12 Over f Subscript upper S Baseline divided by 2 EndFraction equals StartFraction normal upper Delta upper U squared Over 12 EndFraction dot StartFraction 2 Over f Subscript upper S Baseline EndFraction left bracket StartFraction upper W Over Hz EndFraction right bracket
The noise power in the frequency range of interest is the noise within the signal’s 
bandwidth f b: 
p S ubscri pt b  B aseline equals p dot f Subscript b Baseline equals StartFraction normal upper Delta upper U squared Over 12 EndFraction dot StartFraction 2 f Subscript b Baseline Over f Subscript upper S Baseline EndFraction equals StartFraction normal upper Delta upper U squared Over 12 EndFraction dot StartFraction 1 Over OSR EndFraction
p S
ubsc ript b Baseline equals p dot f Subscript b Baseline equals StartFraction normal upper Delta upper U squared Over 12 EndFraction dot StartFraction 2 f Subscript b Baseline Over f Subscript upper S Baseline EndFraction equals StartFraction normal upper Delta upper U squared Over 12 EndFraction dot StartFraction 1 Over OSR EndFraction
p S
u bs cript b Baseline equals p dot f Subscript b Baseline equals StartFraction normal upper Delta upper U squared Over 12 EndFraction dot StartFraction 2 f Subscript b Baseline Over f Subscript upper S Baseline EndFraction equals StartFraction normal upper Delta upper U squared Over 12 EndFraction dot StartFraction 1 Over OSR EndFraction
p S
u
bscript b Baseline equals p dot f Subscript b Baseline equals StartFraction normal upper Delta upper U squared Over 12 EndFraction dot StartFraction 2 f Subscript b Baseline Over f Subscript upper S Baseline EndFraction equals StartFraction normal upper Delta upper U squared Over 12 EndFraction dot StartFraction 1 Over OSR EndFraction
p Su
bscript b Baseline equals p dot f Subscript b Baseline equals StartFraction normal upper Delta upper U squared Over 12 EndFraction dot StartFraction 2 f Subscript b Baseline Over f Subscript upper S Baseline EndFraction equals StartFraction normal upper Delta upper U squared Over 12 EndFraction dot StartFraction 1 Over OSR EndFraction
From Eq. (11.25) we can see that the noise power within the signal’s bandwidth 
decreases with the oversampling rate; oversampling improves the signal-to-noise 
ratio. This is illustrated in Fig. 11.27. In the ﬁrst case, the signal is sampled at the 
Nyquist limit ( f S is just above 2f b) and in the second case, the signal is oversampled 
by a factor of K. 
According to Hauser [2], the SNR expression in Eq. (11.21), for a full-scale 
sinusoidal signal oversampled by a factor of K, is improved to
Fig. 11.27 The distribution of quantization noise 

11.11 Oversampling
249
SNR equals 6.02 n p lus 1 .76 p
lus 10 log upper K
Or, if we express the oversampling rate in octaves L (K = 2L), then 
SNR equals 6.02 left parenth es
is n plus 0.5 upper L right parenthesis plus 1.76 dB
Oversampling an n-bit ADC by a factor of K = 2L generates the same quantization 
noise as an (n + 0.5L)-bit ADC sampled at the Nyquist rate! For example, an 8-bit 
ADC oversampling by a factor of 64 (= 26) will only produce quantization noise 
(in the signal bandwidth) corresponding to that of an 11-bit ADC sampling at the 
Nyquist limit. 
Another advantage of oversampling is that the anti-aliasing ﬁlter requirements 
are relaxed. If we sample at the Nyquist limit, we need a very ‘steep’ (high order) 
anti-aliasing ﬁlter, but if we oversample, we might even get away with a ﬁrst-order 
ﬁlter, see Figs. 11.28 and 11.29. 
Fig. 11.28 Sampling at the Nyquist limit requires a high-order anti-aliasing ﬁlter 
Fig. 11.29 Oversampling relaxes the anti-aliasing ﬁlter requirements

250
11
ADCs and Sampling
11.11.2 
As a Means to Improve Resolution 
A 10-bit ADC with a reference voltage of +5 V has a resolution of 5/210 = 
4.88 mV. However, suppose our application needs a resolution of 1.0 mV. That 
would correspond to 
StartFraction 5 Over 2 Superscript n Baseline EndFraction less than or equals 1.0 dot 10 Superscript negative 3 Baseline right double arrow n greater than log Subscript 2 Baseline 5000 equals 12.2877 ellipsis bits
Sta rtFrac tion 5 Over 2 Supe rscri pt n Basel i n e  EndF
raction less than or equals 1.0 dot 10 Superscript negative 3 Baseline right double arrow n greater than log Subscript 2 Baseline 5000 equals 12.2877 ellipsis bits
I.e., we would need a 13-bit ADC. According to our results in the previous section, 
that corresponds to an oversampling rate of 
10 plus 0.5 upp er L equ als 13 ri ght 
double arrow upper L equals 6 right double arrow upper K equals 2 Superscript 6 Baseline equals 64
Hence, if we oversample by a factor of 64, we get the same quantization noise 
as a 13-bit ADC. However, the ADC itself still produces a 10-bit integer. The 13-bit 
number must be derived in ‘software’. 
If we add two n-bit numbers, the result is (in general) an (n + 1)-bit number. If 
we add m n-bit numbers, we get a (n + log2m)-bit number. 
If we oversample by a factor of 64 (26) we get 64 samples in the same time interval 
as if we take one sample at the Nyquist limit. If we add all these 26 n-bit samples,2 
we get a 10 + 6 = 16-bit number. If we divide this number by 28 (which is only a 
binary right-shift by three), we get the 13-bit number (with the 1.0 mV resolution) 
that we are looking for. This technique is called ﬁltering and decimation and is used 
to increase the resolution of low-resolution ADCs. (It is also called interpolation 
sometimes because we read values between the original ADC’s levels.) 
11.12 
Dithering 
The ‘ﬁltering and decimation’ trick in Sect. 11.11.2 only works if there is enough 
noise in the ADC output. If there is no noise, we will get the same output each time, 
and ﬁltering and decimation would not improve anything. In those cases, where the 
noise level is smaller than the ADC resolution, we must add noise to improve the 
resolution. This is called dithering. 
It seems contradictory that adding noise can improve things, but this has been 
known for a long time. During the second World War, airplane bombers were 
controlled by mechanical ‘computers’, and engineers were puzzled by the fact that 
the airplanes seemed to perform much better when ﬂying than what was indicated by 
simulations in the laboratory. They concluded that this was attributed to the vibrations 
induced (by the engines) into the mechanical control system; the vibrations helped
2 We average them, but that includes adding them. 

11.12 Dithering
251
overcome the friction in the mechanical parts. This is the ﬁrst known example of 
how noise injection can improve performance. 
We can use the same trick to improve the performance of an ADC; the quantization 
levels correspond to the mechanical system’s ‘friction’. By inserting noise, we can 
help the ADC to overcome this ‘friction’ and read between the quantization levels. 
An 8-bit ADC with a reference voltage of +5 V, has a resolution of 5/256 = 
19.53 mV. An input signal of 1.12 V will generate round(1.12/0.01953) = 57 at the 
ADC output. The quantization error is StartA bsolu teValue 1.12 minus 57 dot 0.01953 EndAbsoluteValue= 6.72 mV (an error 
of 0.6%). If there is no noise in the signal, there is nothing we can do about this; 
averaging samples won’t help, since we would get the same ADC output each time 
(= 57), see Fig. 11.30. 
However, by adding (Gaussian) noise to the signal, we force a variation of the 
output sample values. By averaging theses samples, we will be able to read ‘in 
between’ the quantization levels (interpolating) and get a more accurate estimate of 
upper A Subscript in, see Figs. 11.31 and 11.32.
For example, adding Gaussian noise with a standard deviation equal to 2 times normal upper Delta upper Uto 
the 1.12-V signal in Fig. 11.30, and taking 64 samples, see Fig. 11.32, generated the 
sample distribution illustrated by the histogram in Fig. 11.33. Averaging the samples 
enables us to interpolate between the quantization levels. The sample average is 57.17 
which corresponds to a residual error of only 0.3%.
Fig. 11.30 If there is no noise, we get the same sample value every time 

252
11
ADCs and Sampling
Fig. 11.31 Adding noise (Gaussian) 
Fig. 11.32 Adding noise will produce a variation in output samples

11.13 Sigma-Delta ADCs
253
Fig. 11.33 Sample distribution after dithering 
11.13 
Sigma-Delta ADCs 
11.13.1 
Background 
The Sigma-Delta ADC (∑Δ ADC) technology emerged from the Δ-modulation 
technique developed for data transmission. In a Δ-modulator, the actual sample 
value is not transmitted, but rather the difference between successive samples. If the 
transmitted value is positive, a positive signal change has occurred since the last 
sample and vice versa; a Δ-modulator tracks the signal’s derivative. (And hence, the 
receiving end must integrate the signal to restore it.) In fact, true Δ-modulators only 
transmit 1-bit values; 1s or 0s indicating a positive or negative signal change, see 
Fig. 11.34. 
This is implemented by feeding back the quantized signal via an integrator, see 
Fig. 11.35. 
The ‘recovered’ signal in Fig. 11.34 corresponds to the demodulator signal before 
the lowpass ﬁlter; the lowpass ﬁlter ‘smooths’ the edges of the recovered signal to 
recover the original signal exactly.
The Δ-modulator was developed for the purpose of improving signal transmission 
and had nothing to do with ADCs. The modulator was later improved by Inose et al. 
[3] (still for the purpose of transmitting signals) and they also coined the term ‘∑Δ
modulation’. Here is how they reasoned: 
First, integration is a linear operation;
i
ntegral a dot 
x
 left parenthesis t right parenthesis d t equals a integral x left parenthesis t right parenthesis d t, which indicates 
that it doesn’t matter if we integrate ﬁrst and do ‘something else’ second, or vice 
versa, see Fig. 11.36. In Fig.  11.35, that means that the integrator at the receiving 
end can be moved to the front without changing the result, see Fig. 11.37.
Another consequence of the linearity of integration is that it doesn’t matter if we 
integrate ﬁrst and add second:
i
ntegral 
x
 left pa
r
enthesis t right parenthesis d t plus integral y left parenthesis t right parenthesis d t equals integral left parenthesis x left parenthesis t right parenthesis plus y left parenthesis t right parenthesis right parenthesis d t. Hence, in 
Fig. 11.37, we can replace the two integrators with just one if we move it inside the 
loop, after the summing circuit, see Fig. 11.38. 
Inose et al. named it ‘∑Δ modulator’ because ‘sigma’ refers to the summing 
component and ‘delta’ refers to the differentiator. However, it wasn’t until 1969

254
11
ADCs and Sampling
Fig. 11.34 Δ-modulated signal
Fig. 11.35 Δ-modulator 
Fig. 11.36 Integration is a linear process; the order doesn’t matter 
Fig. 11.37 Modiﬁed Δ-modulator

11.13 Sigma-Delta ADCs
255
Fig. 11.38 Inose’s (et al.) modiﬁed Δ-modulator [3] 
that it was suggested that this modulator could be used explicitly for the purpose of 
analog-to-digital conversions [4]. 
It has been debated in the community whether the correct name is ‘∑Δ ADC’ 
or ‘Δ∑ADC’. In 1990, the editor of Analog Dialog addressed this problem in an 
editor’s note and concluded that the correct name is indeed ‘∑Δ ADC’ and urged 
application engineers in the community to promote that name. That name is now 
well-established in the community. That was the historical background of the ∑Δ
ADC. Let’s look at why it has become such a popular ADC technology. 
11.13.2 
Theory 
The ∑Δ ADC differs signiﬁcantly from the other ADC techniques; it produces 
(primarily) a bitstream of 1s and 0s and the density of 1s in the bitstream is propor-
tional to the sample voltage. A post-processing, digital averaging ﬁlter will convert 
this bitstream to a conventional integer, but the primary output of a ∑Δ ADC is 
a bitstream whose density of 1s represents the sample voltage. The advantage of
∑Δ ADCs is that it offers extreme resolution (number of bits), but at the expense of 
speed. (It is a competitor to dual slope ADCs). But, as we will see later, it has another 
unique property; it will shape the quantization noise, boosting the SNR beyond the 
theoretical limit suggested in Eq. (11.21) and even beyond Eq. (11.27). Here we will 
only describe the ﬁrst-order ∑Δ ADC and this description is mostly based on works 
by Kester [5] and Hauser [2]. Figure 11.39 illustrates a ﬁrst-order ∑Δ ADC. 
If we disregard the digital ﬁlter for now, the ﬁrst-order ∑Δ ADC has four compo-
nents: An analog summing circuit, an integrator, a comparator, and a 1-bit DAC. The
Fig. 11.39 First order ∑Δ ADC 

256
11
ADCs and Sampling
output of the comparator will be a stream of logic 1s and 0s that will be sampled by 
the digital ﬁlter. The 1-bit DAC produces either +Uref or −Uref depending on the 
comparator’s output. Even though the DAC only has a two-level output, the conse-
quence of the negative feedback loop is that the average output of the DAC equals 
the input voltage x. If the input x increases, so will the average output of the 1-bit 
DAC which means that the stream of 1s from the comparator output increases; the 
density of 1s at the comparator output will be proportional to x. 
However, the cleverest feature of the ∑Δ design is its inherent ability to ‘shape’ 
the quantization noise, pushing it towards higher frequencies. To understand the 
noise-shaping, we re-draw Fig. 11.39; we idealize the 1-bit DAC and replace it 
with a transfer function = 1. The transfer function of the integrator is 1/s and the 
comparator is in fact a 1-bit ADC, which means that the comparator output is a 
(rough) digitized estimate of the input. Since we have previously modeled an ADC 
output as the input plus some quantization noise (see Fig. 11.6), we can re-write 
Fig. 11.39 as in Fig. 11.40. 
Figure 11.40 looks simple enough, but this is a very clever circuit! To see that we 
need to ﬁgure out what it does both to the signal x and to the noise q. We start with 
the signal; to see what happens to the signal, we temporarily cancel the noise; q(t) 
= 0. That gives us Fig. 11.41. 
The system’s transfer function is easily calculated: 
StartLayout 1st Row 1st Column upper Y left parenthesis s right parenthesis equals StartFraction 1 Over s EndFraction left parenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis 2nd Column right double arrow s upper Y left parenthesis s right parenthesis equals upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis 2nd Row 1st Column left parenthesis 1 plus s right parenthesis upper Y left parenthesis s right parenthesis equals upper X left parenthesis s right parenthesis 2nd Column right double arrow upper H left parenthesis s right parenthesis equals StartFraction upper Y left parenthesis s right parenthesis Over upper X left parenthesis s right parenthesis EndFraction equals StartFraction 1 Over s plus 1 EndFraction EndLayout
StartLayout 1st Row 1st Column upper Y le
ft parenthesis s right parenthe sis equals StartFraction 1 Over s EndFraction left parenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis 2nd Column right double arrow s upper Y left parenthesis s right parenthesis equals upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis 2nd Row 1st Column left parenthesis 1 plus s right parenthesis upper Y left parenthesis s right parenthesis equals upper X left parenthesis s right parenthesis 2nd Column right double arrow upper H left parenthesis s right parenthesis equals StartFraction upper Y left parenthesis s right parenthesis Over upper X left parenthesis s right parenthesis EndFraction equals StartFraction 1 Over s plus 1 EndFraction EndLayout
StartLa
yout 1st Row 1st Column upper Y left parenthesis s right parenthesis equals StartFraction 1 Over s EndFraction left parenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis 2nd Column right double arrow s upper Y left parenthesis s right parenthesis equals upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis 2nd Row 1st Column left parenthesis 1 plus s right parenthesis upper Y left parenthesis s right parenthesis equals upper X left parenthesis s right parenthesis 2nd Column right double arrow upper H left parenthesis s right parenthesis equals StartFraction upper Y left parenthesis s right parenthesis Over upper X left parenthesis s right parenthesis EndFraction equals StartFraction 1 Over s plus 1 EndFraction EndLayout
StartL
ayout 1st Row 1st Column upper Y left parenthesis s right parenthesis equals StartFraction 1 Over s EndFraction left parenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis 2nd Column right double arrow s upper Y left parenthesis s right parenthesis equals upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis 2nd Row 1st Column left parenthesis 1 plus s right parenthesis upper Y left parenthesis s right parenthesis equals upper X left parenthesis s right parenthesis 2nd Column right double arrow upper H left parenthesis s right parenthesis equals StartFraction upper Y left parenthesis s right parenthesis Over upper X left parenthesis s right parenthesis EndFraction equals StartFraction 1 Over s plus 1 EndFraction EndLayout
Fig. 11.40 A simpliﬁed 
model of a ﬁrst-order ∑Δ
ADC 
Fig. 11.41 To see what 
happens to the signal, we 
cancel the noise 

11.14 Extreme Sampling Rates
257
Fig. 11.42 To see what 
happens to the noise, we 
cancel the signal 
From Eq. (11.30), we can see that as far as the input signal is concerned, the 
system is a ﬁrst-order lowpass ﬁlter. 
To see how the system treats the noise, we cancel the input signal, see Fig. 11.42. 
The transfer function is now 
StartLayout 1st Row 1st Column upper Y left parenthesis s right parenthesis equals upper Q left parenthesis s right parenthesis minus StartFraction 1 Over s EndFraction upper Y left parenthesis s right parenthesis 2nd Column right double arrow s upper Y left parenthesis s right parenthesis equals s upper Q left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis 2nd Row 1st Column s upper Q left parenthesis s right parenthesis equals upper Y left parenthesis s right parenthesis dot left parenthesis s plus 1 right parenthesis 2nd Column right double arrow upper H left parenthesis s right parenthesis equals StartFraction upper Y left parenthesis s right parenthesis Over upper Q left parenthesis s right parenthesis EndFraction equals StartFraction s Over s plus 1 EndFraction EndLayout
StartLayout 1st Row 1st Column u
pper Y left parenthesis s right p arenthesis equals upper Q left parenthesis s right parenthesis minus StartFraction 1 Over s EndFraction upper Y left parenthesis s right parenthesis 2nd Column right double arrow s upper Y left parenthesis s right parenthesis equals s upper Q left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis 2nd Row 1st Column s upper Q left parenthesis s right parenthesis equals upper Y left parenthesis s right parenthesis dot left parenthesis s plus 1 right parenthesis 2nd Column right double arrow upper H left parenthesis s right parenthesis equals StartFraction upper Y left parenthesis s right parenthesis Over upper Q left parenthesis s right parenthesis EndFraction equals StartFraction s Over s plus 1 EndFraction EndLayout
StartLa
yout 1st Row 1st Column upper Y left parenthesis s right parenthesis equals upper Q left parenthesis s right parenthesis minus StartFraction 1 Over s EndFraction upper Y left parenthesis s right parenthesis 2nd Column right double arrow s upper Y left parenthesis s right parenthesis equals s upper Q left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis 2nd Row 1st Column s upper Q left parenthesis s right parenthesis equals upper Y left parenthesis s right parenthesis dot left parenthesis s plus 1 right parenthesis 2nd Column right double arrow upper H left parenthesis s right parenthesis equals StartFraction upper Y left parenthesis s right parenthesis Over upper Q left parenthesis s right parenthesis EndFraction equals StartFraction s Over s plus 1 EndFraction EndLayout
StartL
ayout 1st Row 1st Column upper Y left parenthesis s right parenthesis equals upper Q left parenthesis s right parenthesis minus StartFraction 1 Over s EndFraction upper Y left parenthesis s right parenthesis 2nd Column right double arrow s upper Y left parenthesis s right parenthesis equals s upper Q left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis 2nd Row 1st Column s upper Q left parenthesis s right parenthesis equals upper Y left parenthesis s right parenthesis dot left parenthesis s plus 1 right parenthesis 2nd Column right double arrow upper H left parenthesis s right parenthesis equals StartFraction upper Y left parenthesis s right parenthesis Over upper Q left parenthesis s right parenthesis EndFraction equals StartFraction s Over s plus 1 EndFraction EndLayout
From Eq. (11.31), we can see that the system highpass ﬁlters the quantization 
noise! The system lowpass ﬁlters the signal and highpass ﬁlters the noise. That means 
that an even larger part of the quantization noise will be attenuated by a lowpass ﬁlter 
and that even less noise ends up within the signal’s bandwidth. This is illustrated in 
Fig. 11.43.
This means that the SNR (due to quantization noise) is increased beyond even 
Eq. (11.27). According to Hauser (1991) the SNR of a ﬁrst-order ∑Δ is 
SNR equals 6.02 left parenth es
is n plus 1.5 upper L right parenthesis minus 3.41 dB
11.14 
Extreme Sampling Rates 
There are a few ways to ‘boost’ the sampling rate to ‘extreme’ rates without using 
a ﬂash ADC. The pipeline ADC is one solution, but it still contains too many 
analog components to be a favorite among ASIC designers of oscilloscope chips. 
Techniques have been developed that can take ‘traditional’ ADCs (such as SARs) 
beyond the sampling rate of what is indicated by the limit of individual ADCs. We 
will here describe the interleaved SARs technique and the equivalent-time sampling 
techniques.

258
11
ADCs and Sampling
Fig. 11.43 The noise is pushed to high frequencies by the ∑Δ ADC
11.14.1 
Interleaved SARs 
In an interleaved SAR (sometimes called time-interleaved), m SAR ADCs are 
synchronized to achieve an effective sampling rate that is m times higher than the 
sampling rate of each individual ADC. Figure 11.44 illustrates an interleaved SAR 
with m = 4.
Each n-bit SAR ADC has a sample and hold circuit, and the ‘sample’ input signals 
are phase-shifted 90° relative to each other (360°/m in the general case). The output 
of each ADC is connected to a multiplexer that interleaves the ADCs’ outputs to the 
common Dout. Figure 11.45 illustrates the timing diagram of the clock signals and 
Dout.
In Fig. 11.45 we can see that a new Dout is produced at a speed four times higher 
than the output of each individual ADC. This is the ADC technique used in advanced 
high-speed digital oscilloscopes (such as Tektronix’s ‘Mixed Signal Oscilloscopes’). 
11.14.2 
Equivalent-Time Sampling 
Another technique used to boost the sampling rate in oscilloscopes is equivalent-
time sampling (as opposed to real-time sampling). With equivalent-time sampling, 
extreme sampling rates can be achieved, but the restriction is that it only works 
for periodic signals (which is what we have in most cases anyway). Figure 11.46 
illustrates the idea behind equivalent-time sampling.

11.14 Extreme Sampling Rates
259
Fig. 11.44 Time-interleaved SARs
Fig. 11.45 The throughput speed is four times higher

260
11
ADCs and Sampling
Fig. 11.46 Equivalent-time sampling 
The top graph illustrates traditional, real-time sampling where the time between 
samples is T S and that is exactly what you see on the oscilloscope screen (you see the 
‘real signal’). The middle graph illustrates equivalent-time sampling. In equivalent-
time sampling, the scope takes a sample, the ADC converts it and then the scope 
waits for the next trigger condition to occur. At the next triggering, it waits some 
time Δt before it takes the next sample. 
Each time the scope triggers, it adds another Δt delay before sampling. On the 
scope display, samples are plotted only Δt apart, making Δt the equivalent-time 
sampling period and f S = 1/Δt. The ADC will have plenty of time between samples 
and the sampling rate is no longer limited by the ADC’s conversion time, but by how 
small (and accurate) we can make Δt. Equivalent-time sampling oscilloscopes with 
f S > 10 GS/s are available. But remember, the equivalent-time sampling trick only 
works for periodic signals. 
Equivalent-time sampling oscilloscopes are often called just sampling oscillo-
scopes. 
11.15 
Solved Problems 
Problem 11.1 Consider Fig. 11.47. What is Dout?
Solution The temperature sensor resistance is 100
 
le ft pare nthesis  1 p
l
us
 3.85 dot 10 Superscript negative 3 Baseline dot 50 right parenthesis equals 119.25 normal upper Omega. upp er  U  Subscript mi nus Basel ine equa ls  1 dot 1000 divided by left parenthesis 1000 plus 119.25 plus 1000 right parenthesis equals 0.47187 volt. upp er
 U  Subscript plus Ba seline equ als 1 dot 1119.25 di vide d by 2119.25 equals 0.52813 equals 0.47187 plus 0.05626 left parenthesis CM plus NM right parenthesis volt.

11.15 Solved Problems
261
Fig. 11.47 Measuring temperature with an ADC
Fig. 11.48 Thermocouple reading with an ADC 
The common mode suppression of the instrumentation ampliﬁer is uppe r 
F Subscript  CM Baseline equals 10 divided by 10 Superscript 60 divided by 20 Baseline equals 0.01. The ADC input signal is uppe r A S u bscript i n Bas eline equa ls
 10 dot 0.05626 plus 0.01 dot 0.47187 equals 0.56732, and hence, the ADC output is upper  D Subs
c
ript out
 
Baselin
e equals round left parenthesis 0.56732 divided by left parenthesis 5 divided by 2 Superscript 16 Baseline right parenthesis right parenthesis equals ModifyingBelow Below ModifyingBelow 7436 With quotation dash With quotation dash. 
Problem 11.2 In Fig. 11.48, an ADC is used to read the temperature from a type T 
thermocouple. 
a What is the temperature range of this system? b How many bits resolution does 
the ADC need, to resolve temperature changes of the order of 0.1 °C? 
Solution a The maximum input to the ADC is +5.00 V which means that the 
maximum thermocouple emf is 5.00 mV. First, we do a cold junction compensation; 
a google search for a ‘thermocouple type T chart’ gives ﬁrst that 20 °C corresponds 
to an emf of 0.790 mV. Adding 5 mV to that gives us a maximum emf of 5.790 mV, 
corresponding to 131 °C (see thermocouple table). Hence, the temperature range (for 
the hot junction) is 20–131 °C. 
b The thermocouple chart has a 1 °C resolution only, but the smallest emf change 
between two adjacent temperatures is 39 μV. This would indicate a 3.9 μV change in 
the thermo emf for a 0.1 °C change in temperature (assuming a linear interpolation). 
This would be ampliﬁed to 3.9 mV at the ADC input; the ADC needs to be able to 
resolve input changes of 3.9 mV: 
S t artFraction 5 upper V Over 2 Superscript n Baseline EndFraction less than or equals 3.9 mV right double arrow ModifyingBelow Below ModifyingBelow n equals 11 With quotation dash With quotation dash
Sta rtFra ct ion 5 upper V Over 2 Superscript n Baseline EndFraction less than or equals 3.9 mV right double arrow ModifyingBelow Below ModifyingBelow n equals 11 With quotation dash With quotation dash

262
11
ADCs and Sampling
Problem 11.3 If we have an 8-bit ADC with reference voltage+ 5.00 V in Fig. 11.48, 
and the digital output is 0xB3, in what temperature range is the temperature at the 
hot junction? 
Solution ΔU = 5/256 = 0.01953 V. 0xB3 = 179 ⇒ uppe r A Sub script in Basel ine equals left parenthesis 179 plus or minus 0.5 right parenthesis times 0.01953 upper V. 
3.486 up per V less tha n or equals upper A Subscript in Baseline less than or equals 3.506 upper V
3.486 mV less t han or e quals emf less than or equals 3.506 mV
CJC left parent hesis  add 0 .79 0 mV r ight par enthesis colon 4.276 mV less than or equals emf less than or equals 4.296 mV
The type T thermocouple emf table gives that this thermo emf corresponds to 
approximately 100 °C. A linear interpolation between 99 and 101 °C gives that 
up per T equ als 21 .505 tim es emf plus 7.991 Superscript ring Baseline upper C. Hence, we can convert the emf values above to a 
temperature range: 
Modif yin gBelow Below Mo difyingBelow 99.9 Superscript ring Baseline upper C less than or equals upper T Subscript hot Baseline less than or equals 100.4 Superscript ring Baseline upper C With quotation dash With quotation dash
Problem 11.4 In Fig. 11.49, an ADC is used to measure time. a Prove that Δt is 
proportional to Dout. b If Dout = 0x3AC, what is Δt? 
Solution First, 0x3AC = 940. The charge on the capacitor is upper Q equals  uppe
r I dot normal upper Delta t equals upper U Subscript upper C Baseline dot upper C equals upper A Subscript in Baseline dot upper C periodHence,
normal upper Delta t equals StartFraction upper C Over upper I EndFraction times upper A Subscript in Baseline equals ModifyingBelow Below ModifyingBelow StartFraction upper C Over upper I EndFraction times upper D Subscript out Baseline times StartFraction upper U Subscript r e f Baseline Over 2 Superscript n Baseline EndFraction With quotation dash With quotation dash equals StartFraction 100 dot 10 Superscript negative 9 Baseline Over 1 dot 10 Superscript negative 3 Baseline EndFraction dot 940 dot StartFraction 5 Over 2 Superscript 12 Baseline EndFraction equals ModifyingBelow Below ModifyingBelow 114.7 normal mu s With quotation dash With quotation dash
no rmal u pper Delta t equals StartFraction upper C Over upper I EndFraction times upper A Subscript in Baseline equals ModifyingBelow Below ModifyingBelow StartFraction upper C Over upper I EndFraction times upper D Subscript out Baseline times StartFraction upper U Subscript r e f Baseline Over 2 Superscript n Baseline EndFraction With quotation dash With quotation dash equals StartFraction 100 dot 10 Superscript negative 9 Baseline Over 1 dot 10 Superscript negative 3 Baseline EndFraction dot 940 dot StartFraction 5 Over 2 Superscript 12 Baseline EndFraction equals ModifyingBelow Below ModifyingBelow 114.7 normal mu s With quotation dash With quotation dash
no rmal up per Delta t equals StartFraction upper C Over upper I EndFraction times upper A Subscript in Baseline equals ModifyingBelow Below ModifyingBelow StartFraction upper C Over upper I EndFraction times upper D Subscript out Baseline times StartFraction upper U Subscript r e f Baseline Over 2 Superscript n Baseline EndFraction With quotation dash With quotation dash equals StartFraction 100 dot 10 Superscript negative 9 Baseline Over 1 dot 10 Superscript negative 3 Baseline EndFraction dot 940 dot StartFraction 5 Over 2 Superscript 12 Baseline EndFraction equals ModifyingBelow Below ModifyingBelow 114.7 normal mu s With quotation dash With quotation dash
normal upper Delta t equals StartFraction upper C Over upper I EndFraction times upper A Subscript in Baseline equals ModifyingBelow Below ModifyingBelow StartFraction upper C Over upper I EndFraction times upper D Subscript out Baseline times StartFraction upper U Subscript r e f Baseline Over 2 Superscript n Baseline EndFraction With quotation dash With quotation dash equals StartFraction 100 dot 10 Superscript negative 9 Baseline Over 1 dot 10 Superscript negative 3 Baseline EndFraction dot 940 dot StartFraction 5 Over 2 Superscript 12 Baseline EndFraction equals ModifyingBelow Below ModifyingBelow 114.7 normal mu s With quotation dash With quotation dash normal  upper Delta t equals StartFraction upper C Over upper I EndFraction times upper A Subscript in Baseline equals ModifyingBelow Below ModifyingBelow StartFraction upper C Over upper I EndFraction times upper D Subscript out Baseline times StartFraction upper U Subscript r e f Baseline Over 2 Superscript n Baseline EndFraction With quotation dash With quotation dash equals StartFraction 100 dot 10 Superscript negative 9 Baseline Over 1 dot 10 Superscript negative 3 Baseline EndFraction dot 940 dot StartFraction 5 Over 2 Superscript 12 Baseline EndFraction equals ModifyingBelow Below ModifyingBelow 114.7 normal mu s With quotation dash With quotation dash
no rmal up
per De lt a t equals StartFraction upper C Over upper I EndFraction times upper A Subscript in Baseline equals ModifyingBelow Below ModifyingBelow StartFraction upper C Over upper I EndFraction times upper D Subscript out Baseline times StartFraction upper U Subscript r e f Baseline Over 2 Superscript n Baseline EndFraction With quotation dash With quotation dash equals StartFraction 100 dot 10 Superscript negative 9 Baseline Over 1 dot 10 Superscript negative 3 Baseline EndFraction dot 940 dot StartFraction 5 Over 2 Superscript 12 Baseline EndFraction equals ModifyingBelow Below ModifyingBelow 114.7 normal mu s With quotation dash With quotation dash
norm al upper  Delta t equals StartFraction upper C Over upper I EndFraction times upper A Subscript in Baseline equals ModifyingBelow Below ModifyingBelow StartFraction upper C Over upper I EndFraction times upper D Subscript out Baseline times StartFraction upper U Subscript r e f Baseline Over 2 Superscript n Baseline EndFraction With quotation dash With quotation dash equals StartFraction 100 dot 10 Superscript negative 9 Baseline Over 1 dot 10 Superscript negative 3 Baseline EndFraction dot 940 dot StartFraction 5 Over 2 Superscript 12 Baseline EndFraction equals ModifyingBelow Below ModifyingBelow 114.7 normal mu s With quotation dash With quotation dash
Problem 11.5 The signal x(t) = 2(cos(100t − 0.875) + 1) is sampled at a rate of 
150 S/s. 
a Is the sampling theorem met? 
b If the sampling starts at t = 0, what are the exact values of the ﬁrst three samples 
(after the sample and hold unit, but before the ADC)? 
c What are the values of these three samples after the ADC, if we use a 12-bit 
ADC with a reference voltage of +5 V?
Fig. 11.49 Measuring time 
with an ADC 

11.15 Solved Problems
263
d If the ADC produces the integer 2075, in what range is then the input sample 
voltage? 
Solution a f = 100/2π = 15.9 Hz < 150/2 = 75 Hz. Yes, the sampling complies 
with the sampling theorem. 
b x left parenthe sis 0 righ t parenthes is equals 2 left parenthesis cosine left parenthesis 0 minus 0.875 right parenthesis plus 1 right parenthesis equals ModifyingBelow 3.282 upper V With quotation dash x left parenthesis 1 right parenthesis equals 2 left parenthesis cosine left parenthesis 100 divided by 150 minus 0.875 right parenthesis plus 1 right parenthesis equals ModifyingBelow 3.957 upper V With quotation dash period x left parenthesis 2 right parenthesis equals 2 left parenthesis cosine left parenthesis 100 dot 2 divided by 150 minus 0.875 right parenthesis plus 1 right parenthesis equals ModifyingBelow 3.794 upper V With quotation dash period
x left parenthesis 0 right paren
thesis equa ls 2 left parenthesis cosine left parenthesis 0 minus 0.875 right parenthesis plus 1 right parenthesis equals ModifyingBelow 3.282 upper V With quotation dash x left parenthesis 1 right parenthesis equals 2 left parenthesis cosine left parenthesis 100 divided by 150 minus 0.875 right parenthesis plus 1 right parenthesis equals ModifyingBelow 3.957 upper V With quotation dash period x left parenthesis 2 right parenthesis equals 2 left parenthesis cosine left parenthesis 100 dot 2 divided by 150 minus 0.875 right parenthesis plus 1 right parenthesis equals ModifyingBelow 3.794 upper V With quotation dash periodx left parenthesis 0 right parenthesis equals 2 l eft parenthesis cosine left parenthesis 0 minus 0.875 right parenthesis plus 1 right parenthesis equals ModifyingBelow 3.282 upper V With quotation dash x left parenthesis 1 right parenthesis equals 2 left parenthesis cosine left parenthesis 100 divided by 150 minus 0.875 right parenthesis plus 1 right parenthesis equals ModifyingBelow 3.957 upper V With quotation dash period x left parenthesis 2 right parenthesis equals 2 left parenthesis cosine left parenthesis 100 dot 2 divided by 150 minus 0.875 right parenthesis plus 1 right parenthesis equals ModifyingBelow 3.794 upper V With quotation dash periodx left parenthesis 0 right parenthesis equals 2 left parenthesis cosine left parenthesis 0 minus 0.875 right parenthesis plus 1 right parenthesis equals ModifyingBelow 3.282 upper V With quotation dash x left parenthesis 1 right parenthesis equals 2 left parenthesis cosine left parenthesis 100 divided by 150 minus 0.875 right parenthesis plus 1 right parenthesis equals ModifyingBelow 3.957 upper V With quotation dash period x left parenthesis 2 right parenthesis equals 2 left parenthesis cosine left parenthesis 100 dot 2 divided by 150 minus 0.875 right parenthesis plus 1 right parenthesis equals ModifyingBelow 3.794 upper V With quotation dash period
c nor ma l uppe r Delta  up p
er U equals 5 di vided by 2 Superscript 12 Baseline equals 1.22 normal m normal upper V right double arrow 3.282 divided by 0.00122 equals ModifyingBelow 2689 With quotation dash 3.957 divided by 0.00122 equals ModifyingBelow 3242 With quotation dash 3.794 divided by 0.00122 equals ModifyingBelow 3108 With quotation dash period normal upper D el
ta upper U equals 5 divided by 2 Superscript 12 Baseline equals 1.22 normal m normal upper V right double arrow 3.282 divided by 0.00122 equals ModifyingBelow 2689 With quotation dash 3.957 divided by 0.00122 equals ModifyingBelow 3242 With quotation dash 3.794 divided by 0.00122 equals ModifyingBelow 3108 With quotation dash period normal upper D elta upper U equals 5 divided by 2 Superscript 12 Baseline equals 1.22 normal m normal upper V right double arrow 3.282 divided by 0.00122 equals ModifyingBelow 2689 With quotation dash 3.957 divided by 0.00122 equals ModifyingBelow 3242 With quotation dash 3.794 divided by 0.00122 equals ModifyingBelow 3108 With quotation dash periodnormal upper Delta upper U equals 5 divided by 2 Superscript 12 Baseline equals 1.22 normal m normal upper V right double arrow 3.282 divided by 0.00122 equals ModifyingBelow 2689 With quotation dash 3.957 divided by 0.00122 equals ModifyingBelow 3242 With quotation dash 3.794 divided by 0.00122 equals ModifyingBelow 3108 With quotation dash period
d x = ΔU · (Dout ± 0.5) = 0.00122 · (2075 ± 0.5) ⇒ 2.5323 < x < 2.5336 V. 
Problem 11.6 A scientist uses instruments in a ‘NIM’ rack and one of the instruments 
is an ADC module. To use it, he/she needs to know what the sampling rate of this 
ADC is. However, the module is old, and nobody knows where the manual is. The 
scientist decides to ﬁgure out the sampling rate by performing a simple experiment. 
He/she ﬁrst connects a 10 kHz sinusoidal signal from a waveform generator to 
the ADC input. The computer, reading the samples from the NIM module, correctly 
recreates the 10 kHz sine signal. 
Next, the scientist slowly increases the frequency of the sine signal and when the 
sine wave frequency reaches 190 kS/s, the computer again displays a 10 kHz sine 
signal. 
a What is the sampling rate of the ADC module? 
b If the frequency is increased even more, what would be the next sine frequency 
that the computer would interpret as 10 kHz? 
Solution a Since the frequency was increased slowly, 190 kHz, was the ﬁrst 
frequency that produced 10 kHz as an aliasing signal. For a signal with frequency 
f 0, sampled at f S, aliasing frequencies appear at nf S ± f 0. Hence, the ﬁrst one is 1 · 
f S – 10  = 190 ⇒ fS = 200 kS/s. 
b The second one is 1 · f S + 10 = 200 + 10 = 210 kHz. 
Problem 11.7a In an experiment, a 10-bit AD converter was used to measure a 
voltage X, see Fig. 11.50. In this measurement, Dout was consistently = 852 (dec). 
Find X and the quantization uncertainty: In what range is X?
Solution upper X e quals upper D Subscript out Baseline dot StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction plus or minus one half dot StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction upper X equals 852 dot StartFraction 5 Over 2 Superscript 10 Baseline EndFraction plus or minus one half dot StartFraction 5 Over 2 Superscript 10 Baseline EndFraction
upp er X equals upper D Subscript out Baseline dot StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction plus or minus one half dot StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction upper X equals 852 dot StartFraction 5 Over 2 Superscript 10 Baseline EndFraction plus or minus one half dot StartFraction 5 Over 2 Superscript 10 Baseline EndFraction
up per X equals upper D Subscript out Baseline dot StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction plus or minus one half dot StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction upper X equals 852 dot StartFraction 5 Over 2 Superscript 10 Baseline EndFraction plus or minus one half dot StartFraction 5 Over 2 Superscript 10 Baseline EndFraction
upp er X equ al s upper D Subscript out Baseline dot StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction plus or minus one half dot StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction upper X equals 852 dot StartFraction 5 Over 2 Superscript 10 Baseline EndFraction plus or minus one half dot StartFraction 5 Over 2 Superscript 10 Baseline EndFraction
uppe r X equals upper D Subscript out Baseline dot StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction plus or minus one half dot StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction upper X equals 852 dot StartFraction 5 Over 2 Superscript 10 Baseline EndFraction plus or minus one half dot StartFraction 5 Over 2 Superscript 10 Baseline EndFraction
up pe r X equals upper D Subscript out Baseline dot StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction plus or minus one half dot StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction upper X equals 852 dot StartFraction 5 Over 2 Superscript 10 Baseline EndFraction plus or minus one half dot StartFraction 5 Over 2 Superscript 10 Baseline EndFraction
upper X equals upper D Subscript out Baseline dot StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction plus or minus one half dot StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction upper X equals 852 dot StartFraction 5 Over 2 Superscript 10 Baseline EndFraction plus or minus one half dot StartFraction 5 Over 2 Superscript 10 Baseline EndFraction ModifyingBe low upper  X equals 4.1602 plus or minus 0.0024 upper V With quotation dash
Problem 11.7b It was decided that the uncertainty was too high. Unfortunately, they 
did not have an ADC with higher resolution. To overcome the problem, they added 
some noise (zero mean, Gaussian) to X, see Fig. 11.51. By doing that, Dout varied 
from sample to sample. Instead of taking just one sample, they took 16 samples and 
added them. The 16 samples were: 855, 850, 847, 855, 851, 851, 850, 850, 852, 854, 
854, 853, 851, 854, 851, 851.
Make a new estimate of X from these samples. 
Solution Adding 16 10-bit numbers gives us a 10 + log216 = 14-bit number. The 
14-bit sample is (= the sum of the samples) 855 + 850 + 847 + … 851 = 13,629. 
Hence:

264
11
ADCs and Sampling
Fig. 11.50 AD conversion of sample
Fig. 11.51 AD conversion with dithering
upper X eq ua ls 13629 dot StartFraction 5 Over 2 Superscript 14 Baseline EndFraction plus or minus one half dot StartFraction 5 Over 2 Superscript 14 Baseline EndFraction equals ModifyingBelow 4.15924 plus or minus 0.00015 upper V With quotation dash
uppe r X equals 13629 dot StartFraction 5 Over 2 Superscript 14 Baseline EndFraction plus or minus one half dot StartFraction 5 Over 2 Superscript 14 Baseline EndFraction equals ModifyingBelow 4.15924 plus or minus 0.00015 upper V With quotation dash
up pe r X equals 13629 dot StartFraction 5 Over 2 Superscript 14 Baseline EndFraction plus or minus one half dot StartFraction 5 Over 2 Superscript 14 Baseline EndFraction equals ModifyingBelow 4.15924 plus or minus 0.00015 upper V With quotation dash
uppe r X equals  13629 dot  StartFraction 5 Over 2 Superscript 14 Baseline EndFraction plus or minus one half dot StartFraction 5 Over 2 Superscript 14 Baseline EndFraction equals ModifyingBelow 4.15924 plus or minus 0.00015 upper V With quotation dash

References
265
References 
1. Inose, H., T. Aoki, and K. Watanabe. 1966. Asynchronous delta-modulation system. Electronics 
Letters 3 (2): 95–96. 
2. Hauser, M.W. 1991. Principles of oversampling A/D conversion. Journal of the Audio 
Engineering Society 39 (1/2): 3–26. 
3. Inose, H., Y. Yasuda, and J. Murakami. 1962. A telemetering system by code modulation-δ-
σmodulation. IRE Transactions on Space Electronics and Telemetry 3: 204–209. 
4. Goodman, D.J. 1969. The application of Delta modulation to analog-to-PCM encoding. Bell 
System Technical Journal 48 (2): 321–343. 
5. Kester, W. 2008. ADC architectures III: Sigma-delta ADC basics. Analog Devices, MT022.

Chapter 12 
Time-to-Digital Converters 
Abstract Accurate time measurements are critical in many disciplines such as laser, 
atomic, and nuclear physics and we need a way to convert time to a digital number 
with extreme resolution and extreme accuracy. That is what a TDC does (Time-to-
Digital converter). This chapter presents the two dominating TDC techniques: the 
Vernier principle and time stretching. 
12.1 
Introduction 
A lot of experiments in a physics laboratory depend on accurate time measurements 
(decay times, time-of-ﬂight mass spectroscopy, reaction times, etc.). And, just as in 
the ‘voltage problem’ addressed in the previous chapter, we prefer to measure time 
in digital units. Since time is by nature an analog quantity, we will need a ‘Time-to-
Digital Converter’, a TDC. There are basically two situations we encounter; either 
we need to measure the time between a start and a stop signal or, we need to measure 
the duration of a pulse. Some TDCs are designed for the ﬁrst case and others are 
designed for the latter case, but that is not important; one case can easily be translated 
to the other case with some simple digital electronics. For example, a ‘start’ and a 
‘stop’ signal pair can be translated to a pulse with just an xor gate, see Fig. 12.1.
Similarly, a pulse signal can easily be translated to a start/stop pair with two D 
ﬂip-ﬂops, see Fig. 12.2.
(Notice that in both Figs. 12.1 and 12.2, both signals suffer from the same gate 
delay.) Even if we usually prefer digital TDCs, some are analog, or at least ‘semi-
analog’. A common semi-analog TDC technique is to integrate the pulse and then use 
an ADC to digitize the time, see Fig. 12.3. (See Fig. 11.7 for an integrator circuit.)
The main disadvantage of the analog TDC is that it contains analog circuitry that 
doesn’t scale very well; all-digital circuitry scales much better in VLSI designs than 
mixed-signal circuitry. For that reason, TDCs are almost always counter based. That 
means that they in principle, simply count the pulses from an oscillator during the 
start and stop interval (or during the pulse duration).
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_12 
267

268
12
Time-to-Digital Converters
Fig. 12.1 From start/stop to 
pulse (an SR latch would 
work too)
Fig. 12.2 Pulse to start/stop 
pair
Fig. 12.3 Analog TDC
∫ 
Figure 12.4 looks simple enough but notice that the start and stop signals are 
asynchronous (to each other and to the reference clock). Figure 12.5 illustrates a 
typical timing diagram. 
If we assume that we have a positive edge-triggered counter, we can see from 
Fig. 12.5 that the start-stop interval T is
Fig. 12.4 Digital TDC

12.1 Introduction
269
Fig. 12.5 Timing diagram of asynchronous TDC
up per T equ a ls upper  N dot 
t Subscript c Baseline plus normal upper Delta t Subscript start Baseline minus normal upper Delta t Subscript stop
(Where N = 4 in Fig.  12.5). Since both normal upper Delta t Subscript start and normal upper Delta t Subscript stop element of left bracket 0 comma t Subscript c Baseline right bracket, the inherent 
quantization error of counting TDCs is ± tc. Hence, the quantization error scales 
with the reference clock’s period. However, increasing the clock frequency raises 
two other issues; ﬁrst, the power consumption increases. Second, there is a limit to 
the maximum oscillator frequency that can be implemented in CMOS technology. 
Other tricks must be implemented to overcome the inherent quantization uncertainty. 
For example, if the signal is repetitive, we could average several measurements; if 
we average n measurements the uncertainty will decrease to t Subscript c Baseline divided by StartRoot n EndRoot√t Subscript c Baseline divided by StartRoot n EndRoot (see Eq. (13.18)). 
For non-repetitive transients, more advanced tricks are needed. 
Most of the tricks improve the resolution by interpolating between the clock cycle 
pulses (without increasing the clock frequency). These techniques are referred to as 
Vernier time measurements. The name refers to the inventor of the metric caliper, 
Pierre Vernier (1580–1637), which can indeed perform a mechanical interpolation 
between the millimeter markers of a ruler; it has a ‘Nonie’ scale (Fig. 12.6). 
Fig. 12.6 A Vernier caliper

270
12
Time-to-Digital Converters
So how can we implement a Nonie scale in our TDC in Fig. 12.4? In fact, the 
Nonie scale is what characterizes, or even deﬁnes a TDC; the counter gives you the 
‘coarse’ time only, but a TDC will also give you the ‘ﬁne structure’ (interpolation). 
12.2 
The Vernier Principle 
Even if all interpolation techniques could be referred to as ‘Vernier’ methods, the 
one presented here is the one that is most often implied when we refer to the ‘Vernier 
method’. In this method, interpolation between clock cycles is implemented by 
engaging two oscillators with slightly different frequencies, f 1 = 1/T 1 and f 2 = 1/T 2, 
respectively, where f 2 > f 1 (slightly larger). There are two different implementations 
of the Vernier TDC principle: With or without a reference clock. 
12.2.1 
Vernier TDC with no Reference Clock 
Figure 12.7 illustrates the timing diagram of the ﬁrst method (not using a reference 
clock) [1]. 
Oscillator 1, with frequency f 1 < f 2, starts on the positive edge of the start signal. 
The second oscillator with frequency, f 2, is triggered by the positive edge of the stop 
signal. Since f 2 > f 1, the pulses from the f 2 oscillator will eventually ‘catch up’ with 
the pulses from the f 1 oscillator. When this happens, both oscillators are stopped 
(‘moment of coincidence’) and at this point both oscillators have generated the same 
number of pulses, i.e., N1 = N2 = N. From Fig.  12.7, we can see that
nor mal up er Delt a t equa ls upper N  1 
upper T 1 minus upper N 2 upper T 2 equals upper N left parenthesis upper T 1 minus upper T 2 right parenthesis equals upper N dot normal upper Delta upper T
Fig. 12.7 The Vernier TDC (no reference clock) 

12.2 The Vernier Principle
271
From Eq. (12.2) we can see that the time resolution depends on the difference ∆T 
in the clocks’ cycle periods; we can read values in between the clock pulses of the 
individual clocks. 
12.2.2 
Vernier TDC with a Reference Clock 
The alternative approach is to use a reference clock that runs asynchronously to the 
Vernier clocks, see Fig. 12.8. The reference clock’s cycle period is T ref and we make 
the Vernier clocks’ cycle period slightly longer; T vern = T ref(1 + 1/N), where N is 
an integer that determines the overall time resolution. The ‘start’ Vernier clock starts 
on the positive edge of the pulse and the ‘stop’ Vernier clock starts on the negative 
edge. tstart is the time it takes for the start clock’s edges to align with the reference 
clock’s edges and tstop is the time it takes for the stop clock’s edges to align with the 
reference clock’s edges. 
From Fig. 12.8, we can see that
Sta rtLayout  1st Row 1st Col
umn  Blank 2n d Column  normal upper Delt a t plus t Subscri
pt stop Baseline equals t Subscript start Baseline plus t Subscript diff Baseline 2nd Row 1st Column Blank 2nd Column normal upper Delta t equals t Subscript start Baseline plus t Subscript diff Baseline minus t Subscript stop Baseline equals n 0 upper T Subscript vern Baseline plus n 1 upper T Subscript ref Baseline minus n 2 upper T Subscript vern EndLayout
where n0 is the number of T vern-pulses counted during tstart, n1 is the number of 
T ref-pulses counted during tdiff, and n2 is the number of T vern-pulses counted during
Fig. 12.8 The Vernier TDC (with reference clock) 

272
12
Time-to-Digital Converters
tstop. If we insert T vern = T ref(1 + 1/N), we get that
Sta rtLayo
u
t 
1
st  R ow 1st Column normal upper Delta t 2nd Column equals upper T Subscript ref Baseline left parenthesis n 0 left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis plus n 1 minus n 2 left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis right parenthesis equals 2nd Row 1st Column Blank 2nd Column equals upper T Subscript ref Baseline left parenthesis n 1 plus left parenthesis n 0 minus n 2 right parenthesis left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis right parenthesis equals 3rd Row 1st Column Blank 2nd Column equals upper T Subscript ref Baseline left parenthesis n 1 plus n 0 minus n 2 right parenthesis plus StartFraction upper T Subscript ref Baseline Over upper N EndFraction left parenthesis n 0 minus n 2 right parenthesis EndLayout
S
t
artLa yout
 
1s t Row 1st Column normal upper Delta t 2nd Column equals upper T Subscript ref Baseline left parenthesis n 0 left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis plus n 1 minus n 2 left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis right parenthesis equals 2nd Row 1st Column Blank 2nd Column equals upper T Subscript ref Baseline left parenthesis n 1 plus left parenthesis n 0 minus n 2 right parenthesis left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis right parenthesis equals 3rd Row 1st Column Blank 2nd Column equals upper T Subscript ref Baseline left parenthesis n 1 plus n 0 minus n 2 right parenthesis plus StartFraction upper T Subscript ref Baseline Over upper N EndFraction left parenthesis n 0 minus n 2 right parenthesis EndLayout
S
ta
rt
Layout
 
1st  Row 1 st Co
l
um n normal upper Delta t 2nd Column equals upper T Subscript ref Baseline left parenthesis n 0 left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis plus n 1 minus n 2 left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis right parenthesis equals 2nd Row 1st Column Blank 2nd Column equals upper T Subscript ref Baseline left parenthesis n 1 plus left parenthesis n 0 minus n 2 right parenthesis left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis right parenthesis equals 3rd Row 1st Column Blank 2nd Column equals upper T Subscript ref Baseline left parenthesis n 1 plus n 0 minus n 2 right parenthesis plus StartFraction upper T Subscript ref Baseline Over upper N EndFraction left parenthesis n 0 minus n 2 right parenthesis EndLayout
S
ta
rt
Layout 1st  Row 1st Column normal upper Delta t 2nd Column equals upper T Subscript ref Baseline left parenthesis n 0 left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis plus n 1 minus n 2 left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis right parenthesis equals 2nd Row 1st Column Blank 2nd Column equals upper T Subscript ref Baseline left parenthesis n 1 plus left parenthesis n 0 minus n 2 right parenthesis left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis right parenthesis equals 3rd Row 1st Column Blank 2nd Column equals upper T Subscript ref Baseline left parenthesis n 1 plus n 0 minus n 2 right parenthesis plus StartFraction upper T Subscript ref Baseline Over upper N EndFraction left parenthesis n 0 minus n 2 right parenthesis EndLayout
St artL ayout
 1st Row 1st Column normal upper Delta t 2nd Column equals upper T Subscript ref Baseline left parenthesis n 0 left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis plus n 1 minus n 2 left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis right parenthesis equals 2nd Row 1st Column Blank 2nd Column equals upper T Subscript ref Baseline left parenthesis n 1 plus left parenthesis n 0 minus n 2 right parenthesis left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis right parenthesis equals 3rd Row 1st Column Blank 2nd Column equals upper T Subscript ref Baseline left parenthesis n 1 plus n 0 minus n 2 right parenthesis plus StartFraction upper T Subscript ref Baseline Over upper N EndFraction left parenthesis n 0 minus n 2 right parenthesis EndLayout
and we can see from (12.4) that this design offers a time resolution of T ref/N. We can 
easily translate a speciﬁed time resolution into a difference in clock cycle periods: 
upper T Subs
c
ri pt  vern Baseline equals upper T Subscript ref Baseline left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis long right double arrow normal upper Delta upper T equals upper T Subscript vern Baseline minus upper T Subscript ref Baseline equals upper T Subscript ref Baseline times StartFraction 1 Over upper N EndFraction
u
p
pe r T  Subscri pt vern  Baseli ne  equals upper T Subscript ref Baseline left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis long right double arrow normal upper Delta upper T equals upper T Subscript vern Baseline minus upper T Subscript ref Baseline equals upper T Subscript ref Baseline times StartFraction 1 Over upper N EndFraction
up
per T Subscript vern Baseline equals upper T Subscript ref Baseline left parenthesis 1 plus StartFraction 1 Over upper N EndFraction right parenthesis long right double arrow normal upper Delta upper T equals upper T Subscript vern Baseline minus upper T Subscript ref Baseline equals upper T Subscript ref Baseline times StartFraction 1 Over upper N EndFraction
12.3 
Delaylines 
If you design a TDC in CMOS technology (VLSI designers) there are a few alternative 
implementations to the Vernier techniques in Sect. 12.2. Figure 12.9 illustrates the 
basic idea. 
The start signal is connected to the ﬁrst of an array of cascaded buffers. The 
start signal’s high level will propagate through the chain of buffers at a speed corre-
sponding to each buffer’s gate delay τ delay. The output of each buffer is the data input 
to an edge-triggered ﬂip-ﬂop. The ﬂip-ﬂops are latched by the stop signal arriving 
sometime later. When the stop signal arrives and latches the ﬂip-ﬂops, some of them 
will have a high (‘1’) data input, and some will have a low (‘0’) data input, depending 
on how far the start edge has propagated through the buffer chain when the stop edge 
appears. This is illustrated in Fig. 12.10.
When the stop signal latches the ﬂip-ﬂops, the ﬂip-ﬂops’ output will be a ‘ther-
mometer’ bit code representing how far the start signal’s positive edge has propa-
gated. The resolution of this TDC is τ delay. Notice that it doesn’t involve a counter/
Fig. 12.9 Delayline for clock cycle subdivision 

12.3 Delaylines
273
Fig. 12.10 The stop signal latches the ﬂip-ﬂops
oscillator. This means that the range is limited to the number of buffers (=N); the 
range is N · τ delay. However, it is all-digital and therefore scalable. Since time-to-
digital conversion in this case is immediate, it is sometimes referred to as the ‘ﬂash’ 
TDC. 
Figure 12.9 represents the ‘basic’ tapped delayline; the resolution depends on 
the buffers’ delay τ delay. The ‘next-generation’ TDCs take this technique one step 
further; the resolution depends on the difference in buffers’ delay. This is illustrated 
in Fig. 12.11. 
The buffers in the top delayline have a delay of τ 1 that is slightly longer than 
the delay τ 2 of the buffers in the bottom delayline; τ 1 > τ 2. Hence, when the start 
and stop signals arrive, the stop signal will propagate faster through the delayline 
than the start signal does. If the start signal is leading, 1s will be latched into each 
ﬂip-ﬂop when the stop signal (= latch signal) arrives. At some point though, the stop 
signal will catch up and pass the start signal (since it propagates faster) and from that 
point on, 0s will be latched into each ﬂip-ﬂop. The ‘temperature’ code formed by the 
ﬂip-ﬂops’ outputs represents the time difference between the arrivals of the start and
Fig. 12.11 A ‘Vernier’ delayline [2] 

274
12
Time-to-Digital Converters
stop signal and the resolution is now equal to the difference in the delay between the 
buffers in the ﬁrst delayline and the second delayline. 
12.4 
Time Stretching 
Figure 12.12 illustrates the ‘basic’ digital time measurement system. We learned in 
Sect. 12.1 that this system has an inherent uncertainty of ±1 tc, i.e.,
Mo
d
ifying Above nor
mal upper Delta t With caret equals left parenthesis upper N 0 plus or minus 1 right parenthesis times t Subscript c
if we count N0 pulses during ∆t; the resolution is tc and the uncertainty is ± tc. Next,  
suppose that we could stretch the time interval by a factor of k (Fig. 12.13). 
If we measure the stretched time interval ∆T with the same instrument as in 
Fig. 12.12, we get
Mo
d
ifying Above norm al uppe r De
lta upper T With caret equals left parenthesis upper N 1 plus or minus 1 right parenthesis times t Subscript c Baseline equals upper N 1 t Subscript c Baseline plus or minus t Subscript c
(if we count N1 pulses during ∆T). But, since nor m al upper Delta t equals normal upper Delta upper T divided by k, then
Mo
d
ifyingAbove normal upper Delta t With caret equals StartFraction 1 Over k EndFraction ModifyingAbove normal upper Delta upper T With caret equals upper N 1 StartFraction t Subscript c Baseline Over k EndFraction plus or minus StartFraction t Subscript c Baseline Over k EndFraction
M od
i
fying
tbove normal upper Delta t With caret equals StartFraction 1 Over k EndFraction ModifyingAbove normal upper Delta upper T With caret equals upper N 1 StartFraction t Subscript c Baseline Over k EndFraction plus or minus StartFraction t Subscript c Baseline Over k EndFraction
Mo difyingAbove normal upper Delta t With caret equals StartFraction 1 Over k EndFraction ModifyingAbove normal upper Delta upper T With caret equals upper N 1 StartFraction t Subscript c Baseline Over k EndFraction plus or minus StartFraction t Subscript c Baseline Over k EndFraction
Mo
difyingAbove normal upper Delta t With caret equals StartFraction 1 Over k EndFraction ModifyingAbove normal upper Delta upper T With caret equals upper N 1 StartFraction t Subscript c Baseline Over k EndFraction plus or minus StartFraction t Subscript c Baseline Over k EndFraction
Hence, if the time interval is stretched by a factor of k, both the resolution and 
the uncertainty improve by a factor of k. Figure 12.14 illustrates how a pulse can be 
stretched.
In Fig. 12.14, i1 >> i2. The time stretching is a two-step process. In step one, 
the switch is closed during ∆t and the capacitor is charged by a constant current i1
Fig. 12.12 A basic digital time measurement system 
Fig. 12.13 A pulse stretcher 

12.4 Time Stretching
275
Fig. 12.14 Time stretching [3]
– i2. The comparator’s output goes high immediately after the switch is closed. The 
switch opens when the time interval ∆t expires and at that time the voltage across 
the capacitor is 
up er  U Subscript upper C Baseline equals StartFraction upper Q Over upper C EndFraction equals StartFraction 1 Over upper C EndFraction integral left parenthesis i 1 minus i 2 right parenthesis d t equals StartFraction 1 Over upper C EndFraction left parenthesis i 1 minus i 2 right parenthesis dot normal upper Delta t
up pe r U Subscript upper C Baseline equals StartFraction upper Q Over upper C EndFraction equals StartFraction 1 Over upper C EndFraction integral left parenthesis i 1 minus i 2 right parenthesis d t equals StartFraction 1 Over upper C EndFraction left parenthesis i 1 minus i 2 right parenthesis dot normal upper Delta t
u
p
per U Subscr ip t upper C Baseline equals StartFraction upper Q Over upper C EndFraction equals StartFraction 1 Over upper C EndFraction integral left parenthesis i 1 minus i 2 right parenthesis d t equals StartFraction 1 Over upper C EndFraction left parenthesis i 1 minus i 2 right parenthesis dot normal upper Delta t
up per U Subsc ri
pt upper C Baseline equals StartFraction upper Q Over upper C EndFraction equals StartFraction 1 Over upper C EndFraction integral left parenthesis i 1 minus i 2 right parenthesis d t equals StartFraction 1 Over upper C EndFraction left parenthesis i 1 minus i 2 right parenthesis dot normal upper Delta t
When the switch opens, the capacitor is discharged by the constant current i2. The  
capacitor will be discharged after some time T d: 
StartFraction 1 Over upper C EndFraction i 2 upper T Subscript d Baseline equals StartFraction 1 Over upper C EndFraction left parenthesis i 1 minus i 2 right parenthesis dot normal upper Delta t long right double arrow upper T Subscript d Baseline equals StartFraction i 1 minus i 2 Over i 2 EndFraction dot normal upper Delta t equals left parenthesis StartFraction i 1 Over i 2 EndFraction minus 1 right parenthesis dot normal upper Delta t
St artFr ac tion 1 Over upper C EndFraction i 2 upper T Subscript d Baseline equals StartFraction 1 Over upper C EndFraction left parenthesis i 1 minus i 2 right parenthesis dot normal upper Delta t long right double arrow upper T Subscript d Baseline equals StartFraction i 1 minus i 2 Over i 2 EndFraction dot normal upper Delta t equals left parenthesis StartFraction i 1 Over i 2 EndFraction minus 1 right parenthesis dot normal upper Delta t
St artF raction  1 Ove r u pper C EndFraction i 2 upper T Subscript d Baseline equals StartFraction 1 Over upper C EndFraction left parenthesis i 1 minus i 2 right parenthesis dot normal upper Delta t long right double arrow upper T Subscript d Baseline equals StartFraction i 1 minus i 2 Over i 2 EndFraction dot normal upper Delta t equals left parenthesis StartFraction i 1 Over i 2 EndFraction minus 1 right parenthesis dot normal upper Delta t
Sta
r tFr a
ction 1 Over upper C EndFraction i 2 upper T Subscript d Baseline equals StartFraction 1 Over upper C EndFraction left parenthesis i 1 minus i 2 right parenthesis dot normal upper Delta t long right double arrow upper T Subscript d Baseline equals StartFraction i 1 minus i 2 Over i 2 EndFraction dot normal upper Delta t equals left parenthesis StartFraction i 1 Over i 2 EndFraction minus 1 right parenthesis dot normal upper Delta t
Sta
rtF
r
a ct
ion 1 Over upper C EndFraction i 2 upper T Subscript d Baseline equals StartFraction 1 Over upper C EndFraction left parenthesis i 1 minus i 2 right parenthesis dot normal upper Delta t long right double arrow upper T Subscript d Baseline equals StartFraction i 1 minus i 2 Over i 2 EndFraction dot normal upper Delta t equals left parenthesis StartFraction i 1 Over i 2 EndFraction minus 1 right parenthesis dot normal upper Delta t
The comparator’s output will be high for a time
nor mal u p per  
Delta t plus upper T Subscript d Baseline equals normal upper Delta t plus left parenthesis StartFraction i 1 Over i 2 EndFraction minus 1 right parenthesis dot normal upper Delta t equals StartFraction i 1 Over i 2 EndFraction normal upper Delta t
nor
mal
 
u ppe r Delta t plus upper T Subscript d Baseline equals normal upper Delta t plus left parenthesis StartFraction i 1 Over i 2 EndFraction minus 1 right parenthesis dot normal upper Delta t equals StartFraction i 1 Over i 2 EndFraction normal upper Delta t
no
rm
al upper Delta t plus upper T Subscript d Baseline equals normal upper Delta t plus left parenthesis StartFraction i 1 Over i 2 EndFraction minus 1 right parenthesis dot normal upper Delta t equals StartFraction i 1 Over i 2 EndFraction normal upper Delta t
Hence, if we compare the comparator’s output with the input pulse, we can see 
that the time interval has been stretched by a factor of k = i1/i2, see Fig. 12.15. 
Time resolutions of <10 ps have been reported [4] with the time stretching tech-
nique and is used in, for example, pulsed time-of-ﬂight laser radars with a 4.5 mm 
precision over a range from 1.5 to 370 m [5].

276
12
Time-to-Digital Converters
Fig. 12.15 Pulse stretching 
Fig. 12.16 ‘Basic’ TDC 
12.5 
Solved Problems 
Problem 12.1 A ‘basic’ TDC has a reference clock of 100 MHz, see Fig. 12.16. 
a If you want to detect/measure a pulse of a few hundred ns with a resolution 
of 50 ps, how much would you have to stretch it if you are going to use the TDC in 
Fig. 12.16? 
b Suggest a Vernier solution for this problem, assuming the reference clock above 
is one of the Vernier clocks.

12.5 Solved Problems
277
Solution a The resolution of the ‘basic’ TDC in Fig. 12.16 is 1/100 · 106 = 10 ns. 
After stretching: 10 ns/k = 0.050 ns ⇒ k = 200 times. 
b ∆t = T 1 – T 2 ⇒ 0.05 = 10 ns – T 2 ⇒ T 2 = 9.95 ns ⇒ f2 = 100.5 MHz. 
Problem 12.2 In a physics lab, scientists are ionizing a graphite sample and they 
want to know the distribution of carbon-12 and carbon-13 in the sample. They use a 
1-m-long time-of-ﬂight mass spectrometer where the ions are accelerated by 1 kV, 
see Fig. 12.17. They have a TDC that measures the time between the ionization pulse 
(= ‘start’) and the detector pulse (‘stop’). 
In this experiment, they used the basic TDC in Fig. 12.16 to measure the ﬂight 
times. After how many ‘counts’ will the carbon-12 and carbon-13 ions show up on 
the mass spectrum? 
Solution The ions are accelerated by a voltage U = 1 kV, which means that they 
enter the ﬁeld-free ﬂight area with a kinetic energy of qU. Hence, 
q u pper U equals one half m v squared right double arrow v equals StartRoot StartFraction 2 q upper U Over m EndFraction EndRoot
q uppe r U equals one half m v squared right double arrow v equals StartRoot StartFraction 2 q upper U Over m EndFraction EndRoot
/
q upper U equals one half m v squared right double arrow v equals StartRoot StartFraction 2 q upper U Over m EndFraction EndRoot
q upper U equals one half m v squared right double arrow v equals StartRoot StartFraction 2 q upper U Over m EndFraction EndRoot
The ﬂight time is 
t eq uals StartFraction s Over v EndFraction equals StartFraction 1 m Over v EndFraction equals v Superscript negative 1 Baseline equals StartRoot StartFraction m Over 2 q upper U EndFraction EndRoot
t equ a ls StartFraction s Over v EndFraction equals StartFraction 1 m Over v EndFraction equals v Superscript negative 1 Baseline equals StartRoot StartFraction m Over 2 q upper U EndFraction EndRoot
t equals  StartFraction s Over v EndFraction equals StartFraction 1 m Over v EndFraction equals v Superscript negative 1 Baseline equals StartRoot StartFraction m Over 2 q upper U EndFraction EndRoot
/ t equals StartFraction s Over v EndFraction equals StartFraction 1 m Over v EndFraction equals v Superscript negative 1 Baseline equals StartRoot StartFraction m Over 2 q upper U EndFraction EndRoot
t equals StartFraction s Over v EndFraction equals StartFraction 1 m Over v EndFraction equals v Superscript negative 1 Baseline equals StartRoot StartFraction m Over 2 q upper U EndFraction EndRoot
The ﬂight times for the two carbon isotopes are 
t 13  equals StartRoot StartFraction 13 dot 1.66 dot 10 Superscript negative 27 Baseline Over 2 dot 1.602 dot 10 Superscript negative 19 Baseline dot 10 cubed EndFraction EndRoot equals 8.207 normal mu s
/
t 1 3 equal s StartRoot StartFraction 13 dot 1.66 dot 10 Superscript negative 27 Baseline Over 2 dot 1.602 dot 10 Superscript negative 19 Baseline dot 10 cubed EndFraction EndRoot equals 8.207 normal mu s
t 13 equal s StartR oot St artFract ion 13 dot 1.66 dot 10 Superscript negative 27 Baseline Over 2 dot 1.602 dot 10 Superscript negative 19 Baseline dot 10 cubed EndFraction EndRoot equals 8.207 normal mu s
1 kV 
13C
12C 
1 m 
+
– 
Fig. 12.17 Time-of-ﬂight mass spectrometer 

278
12
Time-to-Digital Converters
t 12  equals StartRoot StartFraction 12 dot 1.66 dot 10 Superscript negative 27 Baseline Over 2 dot 1.602 dot 10 Superscript negative 19 Baseline dot 10 cubed EndFraction EndRoot equals 7.885 normal mu s
/
t 1 2 equal s StartRoot StartFraction 12 dot 1.66 dot 10 Superscript negative 27 Baseline Over 2 dot 1.602 dot 10 Superscript negative 19 Baseline dot 10 cubed EndFraction EndRoot equals 7.885 normal mu s
t 12 equal s StartR oot St artFract ion 12 dot 1.66 dot 10 Superscript negative 27 Baseline Over 2 dot 1.602 dot 10 Superscript negative 19 Baseline dot 10 cubed EndFraction EndRoot equals 7.885 normal mu s
The basic TDC has a resolution of 10 ns, so the ﬂight times correspond to 8.207/ 
0.01 = 820 counts and 7.885/0.01 = 788 counts, respectively. 
References 
1. Porat, D.I. 1973. Review of sub-nanosecond time-interval measurements. IEEE Transactions 
on Nuclear Science 20 (5): 36–51. 
2. Henzler, S. 2010. Time-to-digital converters with sub-gatedelay resolution–the third generation. 
In Time-to-digital converters, 69–102. 
3. Nutt, R. 1968. Digital time intervalometer. Review of scientiﬁc instruments 39 (9): 1342–1345. 
4. Kalisz, J., M. Pawlowski, and R. Pelka. 1985. A method for autocalibration of the interpolation 
time interval digitiser with picosecond resolution. Journal of Physics E: Scientiﬁc Instruments 
18 (5): 444. 
5. Raisanen-Ruotsalainen, E., T. Rahkonen, and J. Kostamovaara. 2000. An integrated time-to-
digital converter with 30-ps single-shot precision. IEEE Journal of Solid-State Circuits 35 (10): 
1507–1510.

Chapter 13 
Statistics 
Abstract This chapter summarizes the basic concepts of statistics with the only 
purpose of laying the ground for the next chapter (about measurement uncertainty). 
Basic statistical concepts are deﬁned, such as stochastic variables and the most 
common probability distribution functions (normal, uniform). The expectation value, 
the variance, and the standard deviation of a stochastic variable are deﬁned, and the 
difference between the population variance and the sample variance is stressed. This 
leads to interval estimations, the Student-t distribution, and the central limit theorem. 
13.1 
Introduction 
In any measurement, noise is omnipresent (see Chap. 2); it is only a matter of what 
level of accuracy you are considering. Noise will cause a ‘ﬂickering’ on the display 
of a voltage meter; if there is no ﬂickering, it only means that the noise is less than the 
voltage represented by the least signiﬁcant digit on the display. Figure 13.1 illustrates 
our signal model of a DMM measurement.
Noise adds to the system in either normal or common mode; the DMM’s sample 
value is in general: 
up er U Subscr ipt m Baseli n
e equals upper U 0 plus upper U Subscript upper N upper M Baseline left parenthesis plus upper F Subscript upper C upper M Baseline dot upper U Subscript upper C upper M Baseline right parenthesis
However, in the following, we will disregard the CM residual in the output and 
only focus on the normal mode noise. If we assume that the noise (UNM) is ‘white 
Gaussian’ (variance σ 2), then the voltage measured by the DMM is 
uppe r U Su b script N M Basel i ne
 element of normal upper N left parenthesis 0 comma sigma right parenthesis right double arrow upper U Subscript m Baseline element of normal upper N left parenthesis upper U 0 comma sigma right parenthesis
Figure 13.2 illustrates the density function of the measured voltage.
Hence, the conclusion is that the voltage we measure with the DMM is a stochastic 
variable. The density function expression is
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_13 
279

280
13
Statistics
Fig. 13.1 Signal model
Fig. 13.2 The sample is a stochastic variable
f left p
arenthesis upper U Subscript m Baseline right parenthesis equals StartFraction 1 Over sigma StartRoot 2 normal pi EndRoot EndFraction dot e Superscript minus StartFraction left parenthesis upper U Super Subscript m Superscript minus upper U 0 right parenthesis squared Over 2 sigma squared EndFraction
f left parenthesis upper U Subscript m Baseline right parenthesis equals StartFraction 1 Over sigma StartRoot 2 normal pi EndRoot EndFraction dot e Superscript minus StartFraction left parenthesis upper U Super Subscript m Superscript minus upper U 0 right parenthesis squared Over 2 sigma squared EndFraction
√
f l
eft parenthesis upper U Subscript m Baseline right parenthesis equals StartFraction 1 Over sigma StartRoot 2 normal pi EndRoot EndFraction dot e Superscript minus StartFraction left parenthesis upper U Super Subscript m Superscript minus upper U 0 right parenthesis squared Over 2 sigma squared EndFraction
f le
ft parenthesis upper U Subscript m Baseline right parenthesis equals StartFraction 1 Over sigma StartRoot 2 normal pi EndRoot EndFraction dot e Superscript minus StartFraction left parenthesis upper U Super Subscript m Superscript minus upper U 0 right parenthesis squared Over 2 sigma squared EndFraction

13.2 Expectation and Variance
281
13.2 
Expectation and Variance 
Usually, we don’t need the density function expression; instead, we use three param-
eters that characterize the stochastic variable; the expectation value, the  variance, 
and the standard deviation: 
The expectation value of a stochastic variable X is deﬁned as 
uppe r E
 le
ft 
par enthes is 
upper X right parenthesis equals integral Subscript negative normal infinity Superscript normal infinity Baseline x f left parenthesis x right parenthesis d x equals mu
We will refer to μ as the mean value. In our example in Fig. 13.2, E(Um) = U0. 
The variance of the stochastic variable X is deﬁned as 
norm al up
p
er V left
 
p ar
ent
hes is uper  X rig ht par
enthesis equals normal upper E left brace left parenthesis x minus mu right parenthesis squared right brace equals integral Subscript negative normal infinity Superscript normal infinity Baseline left parenthesis x minus mu right parenthesis squared f left parenthesis x right parenthesis d x equals sigma squared
The variance is a number that tells us something about the ‘spread’ of the values 
around the expectation value. However, the variance unit is ‘voltage squared’ [V2] 
and when we talk about ‘spread’, it makes more sense to express spread in the same 
unit as the stochastic variable. For that reason, we have the standard deviation as the 
square root of the variance: 
sigma equals StartRoot normal upper V left parenthesis upper X right parenthesis EndRoot
√
sigm a
 equals StartRoot normal upper V left parenthesis upper X right parenthesis EndRoot
We also need to ﬁnd expressions for the expectation and variance values of some 
functions of X. First, we multiply X by a constant a: 
up per 
Y equals a upper X
The expectation value of Y is E(aX), but since the expectation is an integral, which 
is a ‘linear’ operation, E(aX) = aE(X) and hence: 
normal upper E left
 parenthesis upper Y right parenthesis equals a upper E left parenthesis upper X right parenthesis equals a mu
We also need the variance of Y: 
upper V l
e
ft parenthesi
s u
p
per Y right
 pa
r
enthes is equ
als upper E left brace left parenthesis upper Y minus upper E left parenthesis upper Y right parenthesis right parenthesis squared right brace equals upper E left brace left parenthesis a upper X minus a mu right parenthesis squared right brace equals upper E StartSet a squared left parenthesis upper X minus mu right parenthesis squared EndSet equals
equals
 
a s quared
 upper E left brace 
left parenthesis upper X minus mu right parenthesis squared right brace equals a squared upper V left parenthesis upper X right parenthesis equals a squared sigma squared
The next function of stochastic variables that we need to analyze is the sum of 
two variables: 
up per Y  equ
als upper X 1 plus upper X 2

282
13
Statistics
It is important for the following that the stochastic variables X1 and X2 in 
Eq. (13.10) are  iid, i.e., independent, and identically distributed. We justify that 
assumption by remembering that X1 and X2 are two DMM samples and they are iid 
because we assume that the ﬁrst sample has no inﬂuence on the second sample, which 
seems reasonable. Under what circumstances would they not be iid? Well, if we look 
at the sample and hold circuit in Fig. 11.2, they could be dependent if the ‘holding’ 
capacitor is not allowed enough time to charge/discharge between samples, i.e., if we 
sample too fast, but that would be a design ﬂaw in the measurement system. Since 
the samples come from the same ‘population’ in a measurement, they are always 
identically distributed. 
The expectation of Y is 
upper E  left  parenthesis upper Y right parenth
esis equals upper E left parenthesis upper X 1 plus upper X 2 right parenthesis equals upper E left parenthesis upper X 1 right parenthesis plus upper E left parenthesis upper X 2 right parenthesis equals mu plus mu equals 2 mu
We can easily see how this result can be generalized for a sum of N variables: 
up p
er 
Y equal s sigma suma
tion Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline right double arrow upper E left parenthesis upper Y right parenthesis equals upper N mu
The variance of Y is 
upper V left parenthes
i
s up per Y  right 
par
e
nthes is equals u pper V 
left parenthesis upper X 1 plus upper X 2 right parenthesis equals upper E left brace left parenthesis upper X 1 plus upper X 2 minus 2 mu right parenthesis squared right brace equals upper E left brace left parenthesis left parenthesis upper X 1 minus mu right parenthesis plus left parenthesis upper X 2 minus mu right parenthesis right parenthesis squared right brace equals
eq u
a
ls u pper E  left brace left  paren thesis uppe r X 
1
 minus mu right parenthesis squared plus left parenthesis upper X 2 minus mu right parenthesis squared plus 2 dot left parenthesis upper X 1 minus mu right parenthesis dot left parenthesis upper X 2 minus mu right parenthesis right brace equals
eq u
a
ls u pper E
 le
f
t br ace le
ft p arenthes is upper  X 1 minus mu right parenthesis squared right brace plus upper E left brace left parenthesis upper X 2 minus mu right parenthesis squared right brace plus 2 dot upper E StartSet left parenthesis upper X 1 minus mu right parenthesis left parenthesis upper X 2 minus mu right parenthesis EndSet equals
equals upper V left  parenthesis upper  X 1 r ight  parent
hesis plus upper V left parenthesis upper X 2 right parenthesis plus 2 cov left parenthesis upper X 1 comma upper X 2 right parenthesis equals sigma squared plus sigma squared plus 0 equals 2 sigma squared
where the last equal sign comes from the assumption that our samples are iid; the 
covariance of iid variables is zero. Again, we can easily generalize this result: 
up p
er 
Y eq ual s sigma sumatio
n Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline right double arrow upper V left parenthesis upper Y right parenthesis equals upper N sigma squared
13.3 
Unbiased Estimators 
In a typical measurement we try to estimate the value of some unknown parameter 
and our estimation is usually based on sampled data (not always). The ‘estimator’ is 
‘unbiased’ if its expectation value equals the mean. For example, the best unbiased 
estimator of the mean is the average:

13.3 Unbiased Estimators
283
Average colon ModifyingAbove upper X With quotation dash equals StartFraction 1 Over upper N EndFraction dot sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline Av er age colon ModifyingAbove upper X With quotation dash equals StartFraction 1 Over upper N EndFraction dot sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline
Av e
rag
e colo
n ModifyingAbove upper X With quotation dash equals StartFraction 1 Over upper N EndFraction dot sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline
This is an unbiased estimator of the mean because: 
u
pper E StartSet ModifyingAbove upper X With quotation dash EndSet equals upper E StartSet StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline EndSet equals StartFraction 1 Over upper N EndFraction upper E StartSet sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline EndSet equals StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts upper E StartSet upper X Subscript i Baseline EndSet equals
u
p
per
 
E StartSet ModifyingAbove upper X With quotation dash EndSet equals upper E StartSet StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline EndSet equals StartFraction 1 Over upper N EndFraction upper E StartSet sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline EndSet equals StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts upper E StartSet upper X Subscript i Baseline EndSet equals
up
p
e
r E 
St
a
rt Set ModifyingAbove upper X With quotation dash EndSet equals upper E StartSet StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline EndSet equals StartFraction 1 Over upper N EndFraction upper E StartSet sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline EndSet equals StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts upper E StartSet upper X Subscript i Baseline EndSet equals
up p
e r
 
E St
ar
t
Se t ModifyingAbove upper X With quotation dash EndSet equals upper E StartSet StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline EndSet equals StartFraction 1 Over upper N EndFraction upper E StartSet sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline EndSet equals StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts upper E StartSet upper X Subscript i Baseline EndSet equals
up
p
e
r E 
StartSet ModifyingAbove upper X With quotation dash EndSet equals upper E StartSet StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline EndSet equals StartFraction 1 Over upper N EndFraction upper E StartSet sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline EndSet equals StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts upper E StartSet upper X Subscript i Baseline EndSet equals
eq uals StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts mu equals StartFraction 1 Over upper N EndFraction upper N mu equals mu
e
qua
ls Start Fraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts mu equals StartFraction 1 Over upper N EndFraction upper N mu equals mu
eq uals St
artFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts mu equals StartFraction 1 Over upper N EndFraction upper N mu equals mu
(We can change places between the ‘sum’ and the ‘expectation’ operators since 
integration is a linear operation). We also need the variance of the average: 
u
pper V left parenthesis ModifyingAbove upper X With quotation dash right parenthesis equals upper V left parenthesis StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline right parenthesis equals StartFraction 1 Over upper N squared EndFraction upper V left parenthesis sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline right parenthesis equals StartFraction 1 Over upper N squared EndFraction upper N sigma squared equals StartFraction sigma squared Over upper N EndFraction
u
p
per
 V left parenthesis ModifyingAbove upper X With quotation dash right parenthesis equals upper V left parenthesis StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline right parenthesis equals StartFraction 1 Over upper N squared EndFraction upper V left parenthesis sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline right parenthesis equals StartFraction 1 Over upper N squared EndFraction upper N sigma squared equals StartFraction sigma squared Over upper N EndFraction
u
ppe
r V le
f
t parenthesis ModifyingAbove upper X With quotation dash right parenthesis equals upper V left parenthesis StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline right parenthesis equals StartFraction 1 Over upper N squared EndFraction upper V left parenthesis sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline right parenthesis equals StartFraction 1 Over upper N squared EndFraction upper N sigma squared equals StartFraction sigma squared Over upper N EndFraction
up pe r
 V l
eft pa
r
en thesis ModifyingAbove upper X With quotation dash right parenthesis equals upper V left parenthesis StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline right parenthesis equals StartFraction 1 Over upper N squared EndFraction upper V left parenthesis sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline right parenthesis equals StartFraction 1 Over upper N squared EndFraction upper N sigma squared equals StartFraction sigma squared Over upper N EndFraction
up pe r V le ft parenthesis ModifyingAbove upper X With quotation dash right parenthesis equals upper V left parenthesis StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline right parenthesis equals StartFraction 1 Over upper N squared EndFraction upper V left parenthesis sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline right parenthesis equals StartFraction 1 Over upper N squared EndFraction upper N sigma squared equals StartFraction sigma squared Over upper N EndFraction
up
per V left parenthesis ModifyingAbove upper X With quotation dash right parenthesis equals upper V left parenthesis StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline right parenthesis equals StartFraction 1 Over upper N squared EndFraction upper V left parenthesis sigma summation Underscript i equals 1 Overscript upper N Endscripts upper X Subscript i Baseline right parenthesis equals StartFraction 1 Over upper N squared EndFraction upper N sigma squared equals StartFraction sigma squared Over upper N EndFraction
where we have used the results from Eqs. (13.9) and (13.14). We now deﬁne the 
standard error as the standard deviation of the mean: 
sigma Subscript ModifyingAbove upper X With quotation dash Baseline equals StartRoot upper V left parenthesis ModifyingAbove upper X With quotation dash right parenthesis EndRoot equals StartFraction sigma Over StartRoot upper N EndRoot EndFractionsi gma Subscript ModifyingAbove upper X With quotation dash Baseline equals StartRoot upper V left parenthesis ModifyingAbove upper X With quotation dash right parenthesis EndRoot equals StartFraction sigma Over StartRoot upper N EndRoot EndFraction
/
s
igma Subscript ModifyingAbove upper X With quotation dash Baseline equals StartRoot upper V left parenthesis ModifyingAbove upper X With quotation dash right parenthesis EndRoot equals StartFraction sigma Over StartRoot upper N EndRoot EndFraction
s
i
gm a Subscript ModifyingAbove upper X With quotation dash Baseline equals StartRoot upper V left parenthesis ModifyingAbove upper X With quotation dash right parenthesis EndRoot equals StartFraction sigma Over StartRoot upper N EndRoot EndFraction
√
si
gma Subscript ModifyingAbove upper X With quotation dash Baseline equals StartRoot upper V left parenthesis ModifyingAbove upper X With quotation dash right parenthesis EndRoot equals StartFraction sigma Over StartRoot upper N EndRoot EndFraction
Hence, if our ‘raw’ samples have the distribution N(μ, σ ), the average of N 
samples has the distribution 
Mo difyingAbove upper X With quotation dash element of upper N left parenthesis mu comma sigma divided by StartRoot upper N EndRoot right parenthesis√
Mo
difyingAbove upper X With quotation dash element of upper N left parenthesis mu comma sigma divided by StartRoot upper N EndRoot right parenthesis
Notice that the mean value μ is ‘what we are looking for’, and the parameter 
value that we try to estimate (by our samples); μ is the ‘signal level’. σ represents 
the ‘noise’ in our samples. Hence, we can deﬁne the signal-to-noise ratio (for normal 
mode coupled noise) as 
SNR le ft parenthesis upper X right parenthesis equals StartFraction mu Over sigma EndFraction
SN
R left parenthesis upper X right parenthesis equals StartFraction mu Over sigma EndFraction
The signal-to-noise ratio for the averaged value is then: 
SNR
 left parenthesis ModifyingAbove upper X With quotation dash right parenthesis equals StartFraction mu Over sigma divided by StartRoot upper N EndRoot EndFraction equals StartRoot upper N EndRoot StartFraction mu Over sigma EndFraction equals StartRoot upper N EndRoot times SNR left parenthesis upper X right parenthesis
S
N
R
 left parenthesis ModifyingAbove upper X With quotation dash right parenthesis equals StartFraction mu Over sigma divided by StartRoot upper N EndRoot EndFraction equals StartRoot upper N EndRoot StartFraction mu Over sigma EndFraction equals StartRoot upper N EndRoot times SNR left parenthesis upper X right parenthesis
SNR left parenthesis ModifyingAbove upper X With quotation dash right parenthesis equals StartFraction mu Over sigma divided by StartRoot upper N EndRoot EndFraction equals StartRoot upper N EndRoot StartFraction mu Over sigma EndFraction equals StartRoot upper N EndRoot times SNR left parenthesis upper X right parenthesis
√
SN
R left parenthesis ModifyingAbove upper X With quotation dash right parenthesis equals StartFraction mu Over sigma divided by StartRoot upper N EndRoot EndFraction equals StartRoot upper N EndRoot StartFraction mu Over sigma EndFraction equals StartRoot upper N EndRoot times SNR left parenthesis upper X right parenthesis
√
SN R left parenthesis ModifyingAbove upper X With quotation dash right parenthesis equals StartFraction mu Over sigma divided by StartRoot upper N EndRoot EndFraction equals StartRoot upper N EndRoot StartFraction mu Over sigma EndFraction equals StartRoot upper N EndRoot times SNR left parenthesis upper X right parenthesis
SN R left parenthesis ModifyingAbove upper X With quotation dash right parenthesis equals StartFraction mu Over sigma divided by StartRoot upper N EndRoot EndFraction equals StartRoot upper N EndRoot StartFraction mu Over sigma EndFraction equals StartRoot upper N EndRoot times SNR left parenthesis upper X right parenthesis
√
SN R left p a
renthesis ModifyingAbove upper X With quotation dash right parenthesis equals StartFraction mu Over sigma divided by StartRoot upper N EndRoot EndFraction equals StartRoot upper N EndRoot StartFraction mu Over sigma EndFraction equals StartRoot upper N EndRoot times SNR left parenthesis upper X right parenthesis
From Eq. (13.21) we conclude that averaging improves the SNR by a factor of 
√
StartRoot upper N EndRoot. Figure 13.3 illustrates a sinusoidal signal superimposed with white Gaussian 
noise and what it looks like after 4 and 64 averages, respectively.
Equation (13.15) gives us the unbiased estimator for the mean. We also need an 
unbiased estimator for the variance; in most cases we will not know the variance 
and we need to estimate it. We refer to sigma squared as the population variance (the ‘true’

284
13
Statistics
Fig. 13.3 Averaging improves the SNR
variance), and we estimate it with the sample variance, s2: 
s s q
uared equals StartFraction 1 Over upper N minus 1 EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts left parenthesis upper X Subscript i Baseline minus ModifyingAbove upper X With quotation dash right parenthesis squared
s squ
are
d e
q
ual s StartFraction 1 Over upper N minus 1 EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts left parenthesis upper X Subscript i Baseline minus ModifyingAbove upper X With quotation dash right parenthesis squareds
 sq
uared equals StartFraction 1 Over upper N minus 1 EndFraction sigma summation Underscript i equals 1 Overscript upper N Endscripts left parenthesis upper X Subscript i Baseline minus ModifyingAbove upper X With quotation dash right parenthesis squared
(The reason we are using N−1 and not N in the denominator in (13.22) is because 
we lose one degree of freedom when we use ModifyingAbove upper X With quotation dash instead of μ). 
13.4 
Interval Estimations 
The estimator in Eq. (13.15) is ‘only’ a ‘point estimator’; it has some ‘uncertainty’. 
In a typical measurement, you don’t report only the point estimation, you report an 
‘interval estimation’. You report an interval x 0  eq
u als ModifyingAbove x With caret plus or minus upper U, but remember that we are 
dealing with stochastic variables here that in most cases are normally distributed, or 
close to normally distributed. That implies that to be 100% sure of that x 0 is in the 
interval x 0  plus or minus upper U, U would have to be inﬁnitely large, and that information would be 
useless (since x 0 is obviously in the interval plus or minus normal infinity). For that reason, we will have to 
settle with a U value that does not guarantee 100% inclusion of x 0. This is expressed

13.4 Interval Estimations
285
Fig. 13.4 The 68% conﬁdence interval 
as a conﬁdence level: ‘I am  X % sure that x 0 is in the interval x 0  plus or minus upper U’. The larger U is 
the more ‘conﬁdent’ we are that x 0 is within the interval (the ‘conﬁdence interval’). 
For example, if we take one sample from a normal distribution, we can be 68% 
conﬁdent that the sample will be in the interval up er X Subscript m Baseline equals upper U 0 plus or minus sigma equals mu plus or minus sigma, see Fig. 13.4. 
However, we don’t really want to know the probability that our sample is in 
a certain interval; our objective with the measurement is to estimate the unknown 
parameter μ; we want to ﬁnd an interval for μ , not for Xm. Well, we can remedy 
that with some simple probability juggling. The fact that Xm is in the interval mu plus or minus sigma
with a probability of 68%, can be expressed as 
upper P  left  p arenthesis mu
 minus sigma less than upper X Subscript m Baseline less than mu plus sigma right parenthesis equals 0.68
(where ‘P’ is the ‘Probability’). Next, we subtract, Xm and μ from each value: 
upper P l e ft p arent hesis minus 
upper X Subscript m Baseline minus sigma less than negative mu less than minus upper X Subscript m Baseline plus sigma right parenthesis equals 0.68
We can change the ‘ < ’ to ‘ > ’ if we also change all the signs: 
upper  P le f t  par enthesis upp
er X Subscript m Baseline plus sigma greater than mu greater than upper X Subscript m Baseline minus sigma right parenthesis equals 0.68
From Eq. (13.24) we conclude that if we take a sample Xm, we can say that μ (the 
parameter that we are trying to estimate) is in the interval up er X Subscript m Baseline plus or minus sigmawith a probability 
of 68%; we are 68% conﬁdent that μ is in this interval. 
The interval plus or minus sigma corresponds to 68% probability. This is usually considered to 
be ‘too uncertain’; there is a 32% probability that μ is not in this interval! For that 
reason, it is generally recommended that you use the interval plus or minus 2 sigmawhich represents 
a 95% probability of ﬁnding μ within the interval. Actually, the probability is 95.4%; 
you need to multiply by 1.96 if you want 95% exactly.

286
13
Statistics
Hence, if we take N samples and instead use the average as our estimator, the 
95% conﬁdence interval for μ becomes 
mu equals ModifyingAbove x With quotation dash plus or minus 1.96 StartFraction sigma Over StartRoot upper N EndRoot EndFractionmu  equals  ModifyingAbove x With quotation dash plus or minus 1.96 StartFraction sigma Over StartRoot upper N EndRoot EndFraction
√
mu
 equals ModifyingAbove x With quotation dash plus or minus 1.96 StartFraction sigma Over StartRoot upper N EndRoot EndFraction
(Notice how the conﬁdence interval decreases with N; the more information we 
collect, the less uncertainty we have). 
The calculations above assumed that σ is known. When you think about it, that is 
usually not the case; in most measurements, we don’t know the standard deviation of 
the population (We may not even know it is normal). In those cases, we must make 
do with the sample variance in Eq. (13.22). The fact that we don’t know σ adds to 
the uncertainty; we replace σ in Eq. (13.26) with an estimation (s) and of course 
that makes our estimation a little more precarious. The consequence is that we will 
probably have to multiply by a larger number (a larger coverage factor) than 1.96 to 
get a conﬁdence level of 95%. 
Even if that is true in general, we may keep the 1.96 if the circumstances are 
‘right’. Here, we lean on the central limit theorem (CLT) which says that if you 
average enough samples, the distribution is still normal even if the original samples 
are not normal. ‘Enough’ samples are generally considered to be ’30 or more’; if N 
≥ 30, we will still use Eq. (13.26) and just replace σ with s. Our problems appear 
when N < 30; in these cases, we need to ﬁnd a new value for the coverage factor 
(a larger value) because the average value’s distribution is in general no longer an 
exact normal distribution; it has a Student-t distribution. 
The Student-t distribution looks like the normal distribution, but it is ‘wider’ 
(reﬂecting a larger spread of the samples). As a matter of fact, the Student-t distri-
bution is not just one distribution, it is a series of distributions: one for each degree 
of freedom. (The degree of freedom v = N−1). When up p er N right arrow normal infinity, the  t-distribution 
becomes the normal distribution. Figure 13.5 illustrates the t density function for 
different degrees of freedom.
If our average value has a t-distribution, then the 95% conﬁdence interval is 
mu equals ModifyingAbove x With quotation dash plus or minus t Subscript upsilon comma alpha Baseline times StartFraction s Over StartRoot upper N EndRoot EndFractionmu  equals M odifyingAbove x With quotation dash plus or minus t Subscript upsilon comma alpha Baseline times StartFraction s Over StartRoot upper N EndRoot EndFraction
√
mu
 equals ModifyingAbove x With quotation dash plus or minus t Subscript upsilon comma alpha Baseline times StartFraction s Over StartRoot upper N EndRoot EndFraction
where alpha equals 1 minusconﬁdence = 1 minus  0.95 equals 0.05. For example, if N = 10 and we want a 
95% conﬁdence level, we must ﬁnd the t Subscript 9 comma 0.05 value. A quick googling for ‘two-tailed 
t-table’ immediately gives us something like Table 13.1; the value we are looking 
for is t Subscr ipt 9 comma 0.05 Baseline equals 2.262.

13.5 The Uniform Distribution
287
Fig. 13.5 The t-distribution (plotted in MATLAB using the tpdf command)
Table 13.1 The two-tailed t-table 
Signiﬁcance level (α) 
Degrees of freedom (df )
0.2
0.15
0.1
0.05
0.025 
: 
8
1.397
1.592
1.860
2.306
2.752 
9
1.383
1.574
1.833
2.262
2.685 
10
1.372
1.559
1.812
2.228
2.634 
: 
13.5 
The Uniform Distribution 
Finally, we will need the variance and standard deviation of a uniform probability 
distribution, see Fig. 13.6. A uniformly distributed stochastic variable can take any 
value between the upper and lower limits with equal probability (‘uniform’ proba-
bility). The variance of a (symmetric) uniform distribution as the one in Fig. 13.6 is 
straightforward:
sigm a squa red e
q
ual s uppe
r V
 
le ft
 
p are
nth
esis upper X
 rig
ht 
par enthesis equals upper E left brace left parenthesis upper X minus mu right parenthesis squared right brace equals upper E StartSet upper X squared EndSet equals integral Subscript negative normal infinity Superscript plus normal infinity Baseline x squared f left parenthesis x right parenthesis d x equals integral Subscript negative c Superscript plus c Baseline x squared StartFraction 1 Over 2 c EndFraction d x equals
sigma squared equals upper V left parenthesis upper X right parenthesis equals upper E left brace left parenthesis upper X minus mu right parenthesis squared right brace equals upper E StartSet upper X squared EndSet equals integral Subscript negative normal infinity Superscript plus normal infinity Baseline x squared f left parenthesis x right parenthesis d x equals integral Subscript negative c Superscript plus c Baseline x squared StartFraction 1 Over 2 c EndFraction d x equals

288
13
Statistics
Fig. 13.6 A uniform distribution (‘rectangular’)
eq uals StartFraction 1 Over 2 c EndFraction dot one third left bracket x cubed right bracket Subscript negative c Superscript plus c Baseline equals StartFraction 1 Over 2 c EndFraction dot one third left parenthesis c cubed plus c cubed right parenthesis equals one third c squared
equ als StartFraction 1 Over 2 c EndFraction dot one third left bracket x cubed right bracket Subscript negative c Superscript plus c Baseline equals StartFraction 1 Over 2 c EndFraction dot one third left parenthesis c cubed plus c cubed right parenthesis equals one third c squared
e
q
uals S
tar tF raction 1 Over 2 c EndFraction dot one third left bracket x cubed right bracket Subscript negative c Superscript plus c Baseline equals StartFraction 1 Over 2 c EndFraction dot one third left parenthesis c cubed plus c cubed right parenthesis equals one third c squared
equ als StartFraction 1 Over 2 c EndFraction dot one third left bracket x cubed right bracket Subscript negative c Superscript plus c Baseline equals StartFraction 1 Over 2 c EndFraction dot one third left parenthesis c cubed plus c cubed right parenthesis equals one third c squared
e
q
ual s Sta
rtFraction 1 Over 2 c EndFraction dot one third left bracket x cubed right bracket Subscript negative c Superscript plus c Baseline equals StartFraction 1 Over 2 c EndFraction dot one third left parenthesis c cubed plus c cubed right parenthesis equals one third c squared
equal
s StartFraction 1 Over 2 c EndFraction dot one third left bracket x cubed right bracket Subscript negative c Superscript plus c Baseline equals StartFraction 1 Over 2 c EndFraction dot one third left parenthesis c cubed plus c cubed right parenthesis equals one third c squared
Hence, the standard deviation of a uniformly distributed variable is 
sigm a equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction dot c
√
si
gma
 equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction dot c
This is all we need to set up an ‘uncertainty budget’ to ﬁnd the uncertainty of a 
measurement. 
13.6 
Solved Problems 
Problem 13.1 Using a 6 ½ DMM,  N samples were taken of a DC voltage. The 
average of the samples was 4.17698 V, and the sample standard deviation was s = 
0.76 mV. Find the 95% conﬁdence interval of this measurement if a N = 100, b N 
= 12. 
Solution a The ‘standard error’ is s divided by StartRoot upper N EndRoot equals 0.76 divided by StartRoot 100 EndRoot equals 0.076 mV
√
s divided by StartRoot upper N EndRoot equals 0.76 divided by StartRoot 100 EndRoot equals 0.076 mV
√
s di vided by  StartRoot upper N EndRoot equals 0.76 divided by StartRoot 100 EndRoot equals 0.076 mV, and 1.96·0.076 
= 0.149 mV ≈ 0.15 mV. Hence, Um = 4.17698 ± 0.00015 V (95%). 
b 0.76 divided by StartRoot 12 EndRoot equals 0.219 mV period
√
0.7 6 divide d by StartRoot 12 EndRoot equals 0.219 mV period Degrees of freedom = 12 – 1  = 11 ⇒ cover factor 
2.201. 2.201·0.219 = 0.483 mV ≈ 0.49 mV. Hence, Um = 4.17698 ± 0.00049 V 
(95%). 
Problem 13.2 The quantization uncertainty of an ADC is p lus or minus one half normal upper Delta upper U
plus or minus one half normal upper Delta upper U (see Eq. (11.4)). 
What is the standard deviation of the output from a 12-bit ADC with + 5 V reference 
voltage?

13.6 Solved Problems
289
Solution Eq. (13.29) gives that 
sigm a equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction times one half times StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction times one half times StartFraction 5 Over 2 Superscript 12 Baseline EndFraction equals ModifyingBelow 0.352 mV With quotation dash
√
si
gma equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction times one half times StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction times one half times StartFraction 5 Over 2 Superscript 12 Baseline EndFraction equals ModifyingBelow 0.352 mV With quotation dash
si gma equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction times one half times StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction times one half times StartFraction 5 Over 2 Superscript 12 Baseline EndFraction equals ModifyingBelow 0.352 mV With quotation dash
sig ma  equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction times one half times StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction times one half times StartFraction 5 Over 2 Superscript 12 Baseline EndFraction equals ModifyingBelow 0.352 mV With quotation dash
√
si
gma equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction times one half times StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction times one half times StartFraction 5 Over 2 Superscript 12 Baseline EndFraction equals ModifyingBelow 0.352 mV With quotation dash
si gm a equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction times one half times StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction times one half times StartFraction 5 Over 2 Superscript 12 Baseline EndFraction equals ModifyingBelow 0.352 mV With quotation dash
sigm a equals  StartFraction 1 Over StartRoot 3 EndRoot EndFraction times one half times StartFraction upper U Subscript ref Baseline Over 2 Superscript n Baseline EndFraction equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction times one half times StartFraction 5 Over 2 Superscript 12 Baseline EndFraction equals ModifyingBelow 0.352 mV With quotation dash
Problem 13.3 A noisy DC voltage is normally distributed with μ = 3.30 V and σ = 
60 mV. If we measure this voltage once, what is the probability that we will measure 
a voltage a < 3.35 V and b > 3.20 V?  
Solution a First we ‘normalize’ the distribution by calculating the z value: 
z equa ls StartFraction x minus mu Over sigma EndFraction equals StartFraction 3.35 minus 3.30 Over 0.06 EndFraction equals 0.83
z 
equals StartFraction x minus mu Over sigma EndFraction equals StartFraction 3.35 minus 3.30 Over 0.06 EndFraction equals 0.83
z eq
uals StartFraction x minus mu Over sigma EndFraction equals StartFraction 3.35 minus 3.30 Over 0.06 EndFraction equals 0.83
Looking up this number in a normal z-table gives that this corresponds to a 
probability 
p le ft parenthesis  upper U less than 3.35 right parenthesis equals p left parenthesis upper Z less than 0.83 right parenthesis equals ModifyingBelow 0.7967 With quotation dash
b 
z equals  StartFraction 3.2 minus 3.3 Over 0.06 EndFraction equals negative 1.67 right double arrow p left parenthesis upper Z less than negative 1.67 right parenthesis equals 0.0475 equals p left parenthesis upper U less than 3.20 right parenthesis
z equ
a ls Sta rtFrac tion 3.2 minus 3.3  Over 0.06 EndFraction equals negative 1.67 right double arrow p left parenthesis upper Z less than negative 1.67 right parenthesis equals 0.0475 equals p left parenthesis upper U less than 3.20 right parenthesis
right double arrow  p lef t parenthesi s upper U  greater than 3.20 right parenthesis equals 1 minus p left parenthesis upper U less than 3.20 right parenthesis equals 1 minus 0.0475 equals ModifyingBelow 0.9525 With quotation dash
Problem 13.4 If we measure the voltage in problem 13.3, 15 times, what is the 
probability that the average of these samples is > 3.33 V? 
Solution Since the individual samples are normally distributed, the average will 
also be normally distributed with a standard deviation of sigma divided by StartRoot upper N EndRoot equals 0.06 divided by StartRoot 15 EndRoot equals 0.0155 volts period
√
si gm a divided by StartRoot upper N EndRoot equals 0.06 divided by StartRoot 15 EndRoot equals 0.0155 volts period
√
sig ma
 divide d by StartRoot upper N EndRoot equals 0.06 divided by StartRoot 15 EndRoot equals 0.0155 volts period
Hence, 
z equals StartFraction 3.33 minus 3.30 Over 0.0155 EndFraction equals 1.94
z equal
s StartFraction 3.33 minus 3.30 Over 0.0155 EndFraction equals 1.94
p le ft parenthes is up er U greater  than 3.33 right p arenthesi s equals 1 minus p left parenthesis upper U less than 3.33 right parenthesis equals 1 minus p left parenthesis z less than 1.94 right parenthesis equals 1 minus 0.9738 equals ModifyingBelow 0 .0262 With quotation dash
Problem 13.5 In problem 13.4 we knew that the samples were normally distributed, 
and we knew the mean and the standard deviation. That is usually not the case. What 
do we do if we don’t know the distribution, the mean, and the standard deviation? 
Solution Then we must use the t-table instead of the z-table (for N–1 degrees of 
freedom).

Chapter 14 
Uncertainty Budgets 
Abstract All measurement numbers have ﬁnite accuracy, and it is good practice to 
always state the uncertainty in a measurement. The uncertainty is typically expressed 
as an uncertainty interval ± U around the measurement number and it is extremely 
important to understand how to ﬁnd U and what it represents. This should always 
be done by setting up an uncertainty budget. This chapter introduces the uncertainty 
budget and deﬁnes concepts like the coverage factor, the standard uncertainty, and 
the effective degrees of freedom. 
14.1 
Introduction 
All measurements should be reported as a conﬁdence interval; a point estimation is 
in general not enough. It is the responsibility (and privilege) of The International 
Bureau of Weights and Measures (the BIPM1 ) in Paris to provide guidelines for 
the community of exactly how to report uncertainties. These guidelines have been 
published in a document that the community refers to as the ‘GUM’ document [1]. 
However, this document is very extensive and could be overwhelming for the average 
engineer. For that reason, local organizations have published ‘light versions’ of the 
original GUM document with step-by-step instructions on how to conduct a proper 
uncertainty analysis. In this chapter, we will follow the guidelines presented in the 
European Accreditation’s publication Evaluation of the Uncertainty of Measurement 
in calibration [2]. 
14.2 
Signal Models 
First, we need to update our signal model in Fig. 13.1; instead of separating the 
signal and the (external) noise, we combine them and attribute the noise to the signal 
source itself (which may very well be the case anyway). Hence, if the noise has a
1 BIPM: Bureau International des Poids et Mesures. 
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_14 
291

292
14
Uncertainty Budgets
normal distribution, we model the measurand as a stochastic variable with a normal 
distribution, an expectation value of X0, and a standard deviation of σ, see Fig. 14.1. 
Next, we also need a signal model for the DMM; the DMM is not perfect, it too 
has some inherent ‘noise’. Figure 14.2 illustrates an excerpt from a DMM datasheet. 
Notice in Fig. 14.2 how the instrument’s accuracy is speciﬁed as ‘ ± (% of 
reading + % of range)’. This represents the uncertainty of the instrument display 
value, and this implies that even if there is no noise in the input signal, there is still 
an uncertainty in the measurement because of the limitations of the instrument itself. 
We will take the instrument’s uncertainty into account by modeling that as an internal 
noise source, see Fig. 14.3.
The ± accuracy number in Fig. 14.2 should be interpreted as the upper and lower 
limits, ± c, in a uniform distribution, and according to Eq. (13.29), the standard 
deviation of such a distribution is c divided by StartRoot 3 EndRoot period
√
c divided by StartRoot 3 EndRoot periodFrom Fig. 14.3, we have that 
up e
r 
X Su
bscript m Baseline equals ModifyingBelow upper X 1 With bottom brace Underscript upper N left parenthesis upper X 0 comma sigma divided by StartRoot upper N EndRoot right parenthesis Endscripts plus ModifyingBelow upper X 2 With bottom brace Underscript upper U left parenthesis 0 comma c divided by StartRoot 3 EndRoot right parenthesis Endscripts
√
upp
e
r 
X Su
bscript m Baseline equals ModifyingBelow upper X 1 With bottom brace Underscript upper N left parenthesis upper X 0 comma sigma divided by StartRoot upper N EndRoot right parenthesis Endscripts plus ModifyingBelow upper X 2 With bottom brace Underscript upper U left parenthesis 0 comma c divided by StartRoot 3 EndRoot right parenthesis Endscripts
√
upp
er X Subscript m Baseline equals ModifyingBelow upper X 1 With bottom brace Underscript upper N left parenthesis upper X 0 comma sigma divided by StartRoot upper N EndRoot right parenthesis Endscripts plus ModifyingBelow upper X 2 With bottom brace Underscript upper U left parenthesis 0 comma c divided by StartRoot 3 EndRoot right parenthesis Endscripts
Fig. 14.1 Signal model 
Fig. 14.2 Typical instrument speciﬁcations [3] (Published courtesy of Keysight Technologies, Inc.) 

14.2 Signal Models
293
√ 
Fig. 14.3 Instrument model
where we have assumed that  X1 is the average of a sample from a population with 
known variance σ 2. (If variance is unknown, we use s2.) 
Our objective here is to present the measurement result as a 95% conﬁdence 
interval. In the publication reference EA4-02 M, this is expressed as follows: 
upp er  X 0 eq ua ls Modi fyi
n
gA
b
ove upper X With caret plus or minus upper U equals ModifyingAbove upper X With caret plus or minus k dot u left parenthesis ModifyingAbove upper X With caret right parenthesis
where U is the expanded uncertainty of the measurement (and should represent a 
95% conﬁdence interval), k is the coverage factor (and should ‘almost always be 
= 2’, see Sect. 14.3.) and u
 
le
ft parenthesis ModifyingAbove upper X With caret right parenthesis
is the standard uncertainty of the estimate output. 
Hence, we need to ﬁnd u
 
le
ft parenthesis ModifyingAbove upper X With caret right parenthesis
. If all the contributions are uncorrelated (which we 
will always assume), we can add the variances (according to Eq. (13.14)): 
u s
qu
a
r
e
d le ft
 parenth
esis ModifyingAbove upper X With caret right parenthesis equals sigma summation Underscript all i Endscripts u squared left parenthesis upper X Subscript i Baseline right parenthesis
Finally, if y = f (x), then 
u left parenthesis y r ight pa r e nthesis equals c left parenthesis x right parenthesis u left parenthesis x right parenthesis where c left parenthesis x right parenthesis equals StartFraction d f Over d x EndFraction vertical bar Subscript x equals ModifyingAbove x With caret Baseline
u 
left
 pare
nthesis y right parenthesis equals c left parenthesis x right parenthesis u left parenthesis x right parenthesis where c left parenthesis x right parenthesis equals StartFraction d f Over d x EndFraction vertical bar Subscript x equals ModifyingAbove x With caret Baseline
where c(x) is the  sensitivity coefﬁcient (a number that represents the uncer-
tainty propagation). The GUM document recommends that an uncertainty analysis 
is performed by using an uncertainty budget.

294
14
Uncertainty Budgets
14.3 
Uncertainty Budgets 
When you calculate the uncertainty of an output estimate there will inevitably be a 
lot of numbers and just keeping track of all these numbers is a challenge. The use 
of an uncertainty budget is a suggested remedy for this. But, as we will see later, 
the uncertainty budget is more than just a way to organize all the numbers; it will 
provide important information about the measurement. We will illustrate that later. 
Table 14.1 illustrates an uncertainty budget template. 
In Table 14.1, ModifyingAbove y With caret is the output estimate and u
 
le
ft parenthesis ModifyingAbove y With caret right parenthesis
is the standard uncertainty of ModifyingAbove y With caret. 
If all contributions are uncorrelated, we add the variances to get the total standard 
uncertainty: 
u
 
le
f
t parenthesis ModifyingAbove y With caret right parenthesis equals StartRoot sigma summation Underscript i equals 1 Overscript n Endscripts left parenthesis c left parenthesis x Subscript i Baseline right parenthesis u left parenthesis x Subscript i Baseline right parenthesis right parenthesis squared EndRoot
[
|
|
√
u
 
left
 parenthesis Mod
ifyingAbove y With caret right parenthesis equals StartRoot sigma summation Underscript i equals 1 Overscript n Endscripts left parenthesis c left parenthesis x Subscript i Baseline right parenthesis u left parenthesis x Subscript i Baseline right parenthesis right parenthesis squared EndRoot
The expanded uncertainty U (representing the 95% conﬁdence interval) is the 
coverage factor k times u
 
le
ft parenthesis ModifyingAbove y With caret right parenthesis
. When the conditions of the central limit theorem can 
be assumed to be sufﬁciently fulﬁlled (‘enough data’), the coverage factor k = 2, 
should be used. When the conditions of the central limit theorem are not met, we 
must ﬁrst ﬁnd the effective degrees of freedom, veff, and then ﬁnd the proper k value. 
The effective degrees of freedom are given by the Welch–Satterthwaite formula: 
nu Sub s
cri
pt
 e f f Baseline equals StartStartFraction u Superscript 4 Baseline left parenthesis ModifyingAbove y With caret right parenthesis OverOver sigma summation Underscript i equals 1 Overscript n Endscripts StartFraction left parenthesis c left parenthesis x Subscript i Baseline right parenthesis u left parenthesis x Subscript i Baseline right parenthesis right parenthesis Superscript 4 Baseline Over upsilon Subscript i Baseline EndFraction EndEndFraction
nu 
Subs
cript e f f Baseline equals StartStartFraction u Superscript 4 Baseline left parenthesis ModifyingAbove y With caret right parenthesis OverOver sigma summation Underscript i equals 1 Overscript n Endscripts StartFraction left parenthesis c left parenthesis x Subscript i Baseline right parenthesis u left parenthesis x Subscript i Baseline right parenthesis right parenthesis Superscript 4 Baseline Over upsilon Subscript i Baseline EndFraction EndEndFraction
nu 
Subscript e f f Baseline equals StartStartFraction u Superscript 4 Baseline left parenthesis ModifyingAbove y With caret right parenthesis OverOver sigma summation Underscript i equals 1 Overscript n Endscripts StartFraction left parenthesis c left parenthesis x Subscript i Baseline right parenthesis u left parenthesis x Subscript i Baseline right parenthesis right parenthesis Superscript 4 Baseline Over upsilon Subscript i Baseline EndFraction EndEndFraction
In Eq. (14.6), vi is the degrees of freedom for each individual contribution. For 
contributions from type A uncertainties (uncertainties based on data samples), the 
degrees of freedom are N−1. If the uncertainty is not based on data samples (= type 
B uncertainties), we must estimate the degrees of freedom in each case. However, 
according to the GUM document, when the uncertainty comes from a contribution 
where it has been estimated with the upper and lower limits of a uniform distribution, 
the degrees of freedom can be assumed to be inﬁnite. Also, the effective degrees of
Table 14.1 An uncertainty budget 
Quantity
Estimate
u(xi)
c(xi)
c(xi)·u(xi) 
x1
ModifyingAbove x With caret Subscript 1
u(x1)
c(x1)
c(x1)·u(x1) 
x2
ModifyingAbove x With caret Subscript 2
u(x2)
c(x2)
c(x2)·u(x2) 
:
:
:
:
: 
xn
ModifyingAbove x With caret Subscript n
u(xn)
c(xn)
c(xn)·u(xn) 
y = f (x1,..,xn)
ModifyingAbove y With caret
u
 
le
ft parenthesis ModifyingAbove y With caret right parenthesis

14.3 Uncertainty Budgets
295
Table 14.2 Coverage factors k for 95% conﬁdence (95.45%) 
veff
1
2
3
4
5
6
7
8
9
10 
k
13.97
4.53
3.31
2.87
2.65
2.52
2.43
2.37
2.32
2.28 
veff
11
12
13
14
15
16
17
18
19
20 
k
2.25
2.23
2.21
2.20
2.18
2.17
2.16
2.15
2.14
2.13 
veff
25
30
35
40
45
50
∞ 
k
2.11
2.09
2.07
2.06
2.06
2.05
2.00 
freedom calculated from Eq. (14.6) will in general not be an integer, and the number 
should then be truncated to the nearest lower integer. 
Once we know the effective degrees of freedom, the coverage factor is given by 
Table 14.2 (which is really the two-tailed t-table for a 95.45% conﬁdence interval). 
The use of an uncertainty budget is best illustrated by examples. 
14.3.1 
Examples 
Example 14.1 Figure 14.4 illustrates a DC voltage measurement where the DMM 
range is 10 V and according to the DMM’s manual, the instrument’s uncertainty on 
this range is ± (0.04% of reading + 0.03% of range). 
We took ten samples: 
StartLayout 1s t 
Row x left par en
thesis 1  r i
gh
t parenth e s i
s 
eq
ua
ls
 9
.0
12
5 
up
pe
r 
V 
2nd Row x left parenthesis 2 right parenthesis equals 8.9763 upper V 3rd Row x left parenthesis 3 right parenthesis equals ellipsis 4th Row colon 5th Row x left parenthesis 10 right parenthesis equals ellipsis EndLayout right brace StartLayout 1st Row ModifyingAbove x With quotation dash equals 9.0068 upper V 2nd Row s equals 0.01752 upper V 3rd Row s divided by StartRoot 10 EndRoot equals 0.00554 upper V EndLayout
St artLayout  1
st  Row x lef t 
parenthesis 1 right parenthesis equals 9.0125 upper V 2nd Row x left parenthesis 2 right parenthesis equals 8.9763 upper V 3rd Row x left parenthesis 3 right parenthesis equals ellipsis 4th Row colon 5th Row x left parenthesis 10 right parenthesis equals ellipsis EndLayout right brace StartLayout 1st Row ModifyingAbove x With quotation dash equals 9.0068 upper V 2nd Row s equals 0.01752 upper V 3rd Row s divided by StartRoot 10 EndRoot equals 0.00554 upper V EndLayout
√
Sta rtLayout 1 st Row x left parenthesis 1 right parenthesis equals 9.0125 upper V 2nd Row x left parenthesis 2 right parenthesis equals 8.9763 upper V 3rd Row x left parenthesis 3 right parenthesis equals ellipsis 4th Row colon 5th Row x left parenthesis 10 right parenthesis equals ellipsis EndLayout right brace StartLayout 1st Row ModifyingAbove x With quotation dash equals 9.0068 upper V 2nd Row s equals 0.01752 upper V 3rd Row s divided by StartRoot 10 EndRoot equals 0.00554 upper V EndLayout
According to Eq. (14.1) we have that 
ModifyingAbove  y Wi th caret left parenthesis equals upper X Subscript m Baseline right parenthesis equals upper X 1 plus upper X 2 equals ModifyingAbove x With quotation dash plus 0 equals 9.0068 upper VMo dify ingAbove y With caret left parenthesis equals upper X Subscript m Baseline right parenthesis equals upper X 1 plus upper X 2 equals ModifyingAbove x With quotation dash plus 0 equals 9.0068 upper V
Fig. 14.4 DCV 
measurement 
V
X1
Xm 

296
14
Uncertainty Budgets
Table 14.3 An uncertainty budget 
Quantity
Estimate
u(xi)
c(xi)
c(xi)·u(xi) 
x1
9.0068 V
5.54 mV
1
5.54 mV 
x2
0 V
3.81 mV
1
3.81 mV 
y
9.0068 V
6.72 mV 
The uncertainty of X1 is s divided by StartRoot upper N EndRoot equals
√
s divided by StartRoot upper N EndRoot equals0.00554 V and the uncertainty of X2 is (see 
Eq. (14.1)): 
StartFraction 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.04 and StartFraction 1 Over 100 EndFraction dot 9.0068 plus 0.03 and StartFraction 1 Over 100 EndFraction dot 10 right parenthesis equals 3.81 mV
√
S
t
artFr action 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.04 and StartFraction 1 Over 100 EndFraction dot 9.0068 plus 0.03 and StartFraction 1 Over 100 EndFraction dot 10 right parenthesis equals 3.81 mV
Star tFraction  1 Over  StartRoot 3 EndRoot EndFraction left parenthesis 0.04 and StartFraction 1 Over 100 EndFraction dot 9.0068 plus 0.03 and StartFraction 1 Over 100 EndFraction dot 10 right parenthesis equals 3.81 mV
Star tFra
c
tion 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.04 and StartFraction 1 Over 100 EndFraction dot 9.0068 plus 0.03 and StartFraction 1 Over 100 EndFraction dot 10 right parenthesis equals 3.81 mV
and since all df /dxi = 1 in this case, we have the uncertainty budget in Table 14.3. 
Equation (14.5) gives us the total uncertainty for the output estimate. 
u
 
le
f
t parenthesis ModifyingAbove y With caret right parenthesis equals StartRoot 5.54 squared plus 3.81 squared EndRoot equals 6.72 mV
√
u left  parenth esis Mo difyingAbove y With caret right parenthesis equals StartRoot 5.54 squared plus 3.81 squared EndRoot equals 6.72 mV
Since we only took ten samples in this case, we cannot assume that the output 
estimate has a normal distribution, hence we need to calculate the effective degrees 
of freedom to ﬁnd the proper coverage factor. 
upsilo n
 Subscript e f f Baseline equals StartStartFraction 6.72 Superscript 4 Baseline OverOver StartFraction 5.54 Superscript 4 Baseline Over 9 EndFraction plus StartFraction 3.81 Superscript 4 Baseline Over normal infinity EndFraction EndEndFraction equals 19.5 right arrow upsilon Subscript e f f Baseline equals 19 right arrow k equals 2.14
upsilon Subscript e f f Baseline equals StartStartFraction 6.72 Superscript 4 Baseline OverOver StartFraction 5.54 Superscript 4 Baseline Over 9 EndFraction plus StartFraction 3.81 Superscript 4 Baseline Over normal infinity EndFraction EndEndFraction equals 19.5 right arrow upsilon Subscript e f f Baseline equals 19 right arrow k equals 2.14
up
silon Subscript e f f Baseline equals StartStartFraction 6.72 Superscript 4 Baseline OverOver StartFraction 5.54 Superscript 4 Baseline Over 9 EndFraction plus StartFraction 3.81 Superscript 4 Baseline Over normal infinity EndFraction EndEndFraction equals 19.5 right arrow upsilon Subscript e f f Baseline equals 19 right arrow k equals 2.14
up
silon S ubscript  e f f Ba seline equals StartStartFraction 6.72 Superscript 4 Baseline OverOver StartFraction 5.54 Superscript 4 Baseline Over 9 EndFraction plus StartFraction 3.81 Superscript 4 Baseline Over normal infinity EndFraction EndEndFraction equals 19.5 right arrow upsilon Subscript e f f Baseline equals 19 right arrow k equals 2.14
Hence, the expanded uncertainty U is 
up per U e quals 2 .14  t imes 6 .72  mV equa ls 14 .38 mV equals 0.015 upper V
Since the uncertainty is of the order of 15 mV, it really doesn’t make sense to 
report the output estimate with four decimals. This is how we would present the 
result of our measurement in a ‘scientiﬁc’ report: 
In order to estimate the accuracy in the measurement, an uncertainty analysis was conducted 
according to the guidelines in reference [1, 2]. The uncertainty budget produced a standard 
uncertainty of 6.72 mV, and a coverage factor of 2.14 was used to get the 95% conﬁdence 
interval: 
y equals 9 .007 plu s or minus 0.015 upper V
(Reference [1, 2] would be the GUM and the EA-4/02 documents.) 
Notice a few details in this example: 
• We made no ‘t compensation’ in the uncertainty budget for u(x1) even though 
we had less than 30 samples; the ‘t compensation’ was only introduced at the 
last stage with the use of the Welch–Satterthwaite formula to ﬁnd the expanded 
uncertainty. This makes sense; since the total uncertainty has more contributions

14.3 Uncertainty Budgets
297
(just one more in this case) the ‘t problem’ is mitigated; according to the central 
limit theorem, the more things we add, the closer to a normal distribution we get. 
For that reason, we should ‘t compensate’ the ﬁnal uncertainty value only. 
• The number of signiﬁcant digits in the uncertainty is two; this is what is generally 
recommended. 
• The estimate and the uncertainty have the same number of decimals; the 
uncertainty determines how many signiﬁcant digits are meaningful. 
• The estimate and the uncertainty have the same unit, if the estimate is in [V], the 
uncertainty should be in [V] (not [mV]!). 
Example 14.2 Figure 14.5 illustrates a current measurement; we use a DMM to 
measure the voltage across a resistor to get the current I. The uncertainty of the DMM 
is ± (0.04% of reading + 0.02% of range). We took 40 samples, and the average 
was 6.62953 V (range: 10 V) and the sample standard deviation was 6.83 mV. The 
resistor has color code marking that can be interpreted as ‘1800 Ω, ±1%’. What is 
the 95% conﬁdence interval of this current measurement? 
Solution up pe r I equals StartFraction upper U Over upper R EndFraction equals StartFraction upper X 1 plus upper X 2 Over upper R EndFraction equals f left parenthesis upper X 1 comma upper X 2 comma upper R right parenthesis
up pe r I equals StartFraction upper U Over upper R EndFraction equals StartFraction upper X 1 plus upper X 2 Over upper R EndFraction equals f left parenthesis upper X 1 comma upper X 2 comma upper R right parenthesis
up
pe r I equals StartFraction upper U Over upper R EndFraction equals StartFraction upper X 1 plus upper X 2 Over upper R EndFraction equals f left parenthesis upper X 1 comma upper X 2 comma upper R right parenthesis
up per I equa ls StartFraction 4.62953 plus 0 Over 1800 EndFraction equals 2.5719611 mA u left parenthesis upper X 1 right parenthesis equals 6.83 divided by StartRoot 40 EndRoot equals 1.08 mV
uppe
r I equals S tar
tFraction 4.62953 plus 0 Over 1800 EndFraction equals 2.5719611 mA u left parenthesis upper X 1 right parenthesis equals 6.83 divided by StartRoot 40 EndRoot equals 1.08 mV
√
upp er I eq uals StartFraction 4.62953 plus 0 Over 1800 EndFraction equals 2.5719611 mA u left parenthesis upper X 1 right parenthesis equals 6.83 divided by StartRoot 40 EndRoot equals 1.08 mV
u left p arenthesis upper X 2 right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.0004 dot 4.62953 plus 0.0002 dot 10 right parenthesis equals 2.22 mV
√
u 
left par enthesis u pper X 2 right parenth esis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.0004 dot 4.62953 plus 0.0002 dot 10 right parenthesis equals 2.22 mV
The uncertainty of the resistor is speciﬁed as ‘ ± 1%’. Since we have no other 
information about this value, we must assume that it represents the upper and lower 
limits in a uniform distribution: 
u left parenthesis upper R right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction dot 1800 dot StartFraction 1 Over 100 EndFraction equals 10.4 normal upper Omega
√
u 
left pa re nthesis upper R right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction dot 1800 dot StartFraction 1 Over 100 EndFraction equals 10.4 normal upper Omega
u le ft par enthesis upper R right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction dot 1800 dot StartFraction 1 Over 100 EndFraction equals 10.4 normal upper Omega
Before we design the uncertainty budget, we calculate the sensitivity coefﬁcients:
Fig. 14.5 Current 
measurement 
V 
I 
R 

298
14
Uncertainty Budgets
c left p a r enthesis upper X 1 right parenthesis equals StartFraction d f Over d upper X 1 EndFraction equals StartFraction 1 Over upper R EndFraction equals StartFraction 1 Over 1800 EndFraction equals 5.56 dot 10 Superscript negative 4 Baseline normal upper Omega Superscript negative 1 Baseline equals c left parenthesis upper X 2 right parenthesis
c  le
ft  parenthesis upper X 1 right parenthesis equals StartFraction d f Over d upper X 1 EndFraction equals StartFraction 1 Over upper R EndFraction equals StartFraction 1 Over 1800 EndFraction equals 5.56 dot 10 Superscript negative 4 Baseline normal upper Omega Superscript negative 1 Baseline equals c left parenthesis upper X 2 right parenthesis
c le
ft parenthesis upper X 1 right parenthesis equals StartFraction d f Over d upper X 1 EndFraction equals StartFraction 1 Over upper R EndFraction equals StartFraction 1 Over 1800 EndFraction equals 5.56 dot 10 Superscript negative 4 Baseline normal upper Omega Superscript negative 1 Baseline equals c left parenthesis upper X 2 right parenthesis
c lef t paren thesis  up er X 1 right parenthesis equals StartFraction d f Over d upper X 1 EndFraction equals StartFraction 1 Over upper R EndFraction equals StartFraction 1 Over 1800 EndFraction equals 5.56 dot 10 Superscript negative 4 Baseline normal upper Omega Superscript negative 1 Baseline equals c left parenthesis upper X 2 right parenthesis
c left p a renthesis upper R right parenthesis equals StartFraction d f Over d upper R EndFraction equals left parenthesis minus right parenthesis StartFraction upper X 1 plus upper X 2 Over upper R squared EndFraction equals StartFraction 4.62953 Over 1800 squared EndFraction equals 1.43 dot 10 Superscript negative 6 Baseline normal upper V normal upper Omega Superscript negative 2
c  l eft paren thesis upper R right parenthesis equals StartFraction d f Over d upper R EndFraction equals left parenthesis minus right parenthesis StartFraction upper X 1 plus upper X 2 Over upper R squared EndFraction equals StartFraction 4.62953 Over 1800 squared EndFraction equals 1.43 dot 10 Superscript negative 6 Baseline normal upper V normal upper Omega Superscript negative 2
c l
eft parenthesis upper R right parenthesis equals StartFraction d f Over d upper R EndFraction equals left parenthesis minus right parenthesis StartFraction upper X 1 plus upper X 2 Over upper R squared EndFraction equals StartFraction 4.62953 Over 1800 squared EndFraction equals 1.43 dot 10 Superscript negative 6 Baseline normal upper V normal upper Omega Superscript negative 2
c left
 parent hesis u pper R right parenthesis equals StartFraction d f Over d upper R EndFraction equals left parenthesis minus right parenthesis StartFraction upper X 1 plus upper X 2 Over upper R squared EndFraction equals StartFraction 4.62953 Over 1800 squared EndFraction equals 1.43 dot 10 Superscript negative 6 Baseline normal upper V normal upper Omega Superscript negative 2
Now we have what we need to setup the uncertainty budget (Table 14.4): 
We sum the squares of the uncertainties to get the uncertainty of the estimate: 
u left parenthesis upper I right parenthesis equals StartRoot 0.601 squared plus 1.24 squared plus 14.9 squared EndRoot equals 14.96 normal mu upper A
√
u left parenthe sis uppe r I righ t parenthesis equals StartRoot 0.601 squared plus 1.24 squared plus 14.9 squared EndRoot equals 14.96 normal mu upper A
In this case, we have enough samples not worry about any ‘t compensation’; we 
use the coverage factor k = 2 to get the expanded uncertainty: 
up per U equals 2 times  u left par enthesis upper I right parenthesis equals 29.93 normal mu upper A equals 0.030 normal m normal upper A
Hence, only three decimals make sense when we report the measurement: 
up per I eq uals 2.5 72 plus  o r minus 0.030 mA left parenthesis 95 percent sign right parenthesis
From this example we can learn something more about the use of uncertainty 
budgets: 
• Use at least three signiﬁcant digits in the budget; only round (upwards) to two 
digits in the last stage when you calculate the expanded uncertainty. 
• We get important information from the budget. From the budget it is obvious that 
it is the lack of information about the resistor that is hurting our accuracy. To 
improve the accuracy in this example we should try to get a more accurate value 
for R (by measuring it!); buying a new (more expensive) DMM would not help 
and taking more samples wouldn’t help either!
Table 14.4 The uncertainty budget 
Quantity
Estimate
u(xi)
c(xi)
c(xi)·u(xi) (μA) 
X1
4.62953 V
1.08 mV
5.56·10–4 Ω−1
0.601 
X2
0 V
2.22 mV
5.56·10–4 Ω−1
1.24 
R
1800 Ω
10.4 Ω
1.43·10–6 V Ω−2
14.9 
I
2.5719611 mA
14.96 

14.4 ‘Guesstimating’
299
14.4 
‘Guesstimating’ 
Sometimes we don’t have any information about the uncertainty of a quantity. For 
example, suppose we use a DMM to measure the resistance of a Pt-100 temperature 
sensor. We use the 4-wire method, a 7½ digit DMM and we take a thousand samples 
to really minimize the noise (the ‘type A’ uncertainty); the X1 and X2 uncertainties 
are so small that it implies a ppm accuracy (part per million). However, when we 
translate the resistance to temperature, we use the following formula: 
up per R e quals upper R 0 left parenthesis 1 plus gamma upper T right parenthesis right double arrow upper T equals StartFraction 1 Over gamma EndFraction left parenthesis StartFraction upper R Over upper R 0 EndFraction minus 1 right parenthesis equals f left parenthesis gamma comma upper R comma upper R 0 right parenthesis
u
p per R equals upper R 0 left parenthesis 1 plus gamma upper T right parenthesis right double arrow upper T equals StartFraction 1 Over gamma EndFraction left parenthesis StartFraction upper R Over upper R 0 EndFraction minus 1 right parenthesis equals f left parenthesis gamma comma upper R comma upper R 0 right parenthesis
up
er 
R
 e qu als upper 
R 0 left parenthesis 1 plus gamma upper T right parenthesis right double arrow upper T equals StartFraction 1 Over gamma EndFraction left parenthesis StartFraction upper R Over upper R 0 EndFraction minus 1 right parenthesis equals f left parenthesis gamma comma upper R comma upper R 0 right parenthesis
(In Eq. (14.7), R = R1 + R2 if we use a DMM, see Fig. 14.3). From Eq. (14.7), 
it is clear that the uncertainty of T doesn’t depend only on the uncertainty of the 
measured quantity R, it also depends on the accuracy of γ and R0. Suppose we use 
R0 = 100 Ω and γ = 3.85·10−3 °C−1, to calculate the temperature. What will the 
uncertainty of T be? 
Well, we don’t have any information about the uncertainties of R0 and γ, so  
we will have to estimate it by guessing (‘guesstimating’). We only know that γ = 
3.85·10−3 °C−1, and we will have to assume that this number has been ‘correctly 
rounded’. That implies that the ‘true’ value of γ is somewhere in the range 
3.845 dot 10 S u pe rscript  negative 3 Baseline less than gamma less than 3.855 dot 10 Superscript negative 3
Any γ value in this range would be rounded to 3.85·10−3 °C−1 if you only use three 
signiﬁcant digits. Hence, if the only information we have is that γ = 3.85·10−3 °C−1, 
then it is a reasonable assumption that ga mma equal s left parenthesis 3.850 plus or minus 0.005 right parenthesis dot 10 Superscript negative 3 °C−1. And since 
we base that assumption on a ‘rounding’, the correct value can be anywhere in 
that range; it follows that we must assume a uniform distribution function. The 
standard uncertainty of γ , that we would use in the uncertainty budget, would be 
(see Eq. (13.29)) 
u left p arenthesis gamma right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction dot 0.005 dot 10 Superscript negative 3 Baseline equals 0.00289 dot 10 Superscript negative 3 Superscript ring Baseline upper C Superscript negative 1
√
u 
left par enthesi s gamma ri ght par enthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction dot 0.005 dot 10 Superscript negative 3 Baseline equals 0.00289 dot 10 Superscript negative 3 Superscript ring Baseline upper C Superscript negative 1
With the same reasoning, the reasonable range of R0 would be 100.0 ± 0.5 Ω, 
with a standard uncertainty of 0.289 Ω. Both the uncertainties of γ and R0 are of the 
order of ‰. We would have to ﬁnd the sensitivity coefﬁcients to really understand the 
impact they have on the uncertainty of T, but considering the relative uncertainties 
of γ and R0, a ppm accuracy in the measured R-value is likely to be redundant. We 
will illustrate this with another example. 
Example 14.2 A BPW21 photo diode and a resistor are used to measure light ﬂux. 
A 4½ digits DMM measures the voltage over the resistor, see Fig. 14.6. The resistor 
has a nominal resistance of 10 kΩ and has a 2% precision. The DMM uncertainty

300
14
Uncertainty Budgets
Fig. 14.6 Measuring light 
ﬂux 
BPW21 
R = 10k 
V 
ID 
is ± (0.08% of rdg + 2 digits) and the nominal sensor constant for the photodiode 
is 9.2 nA/lx. In a previous measurement, the sample standard deviation was s = 
4 mV. One sample reads 1.2843 V. If you were asked to determine the light ﬂux in 
this experiment, how many samples would you take (how many samples would you 
average)? 
(‘x digits’ is sometimes used instead of ‘range’. It means ‘x’ units of the last 
display digit’s weight.) Using E for the light ﬂux, we get 
upp er U Su bscr ipt m Baseline equals k upper E upper R right double arrow upper E equals StartFraction upper U Subscript m Baseline Over k upper R EndFraction equals StartFraction upper X 1 plus upper X 2 Over k upper R EndFraction equals f left parenthesis upper X 1 comma upper X 2 comma k comma upper R right parenthesis
upp er  U Subscript m Baseline equals k upper E upper R right double arrow upper E equals StartFraction upper U Subscript m Baseline Over k upper R EndFraction equals StartFraction upper X 1 plus upper X 2 Over k upper R EndFraction equals f left parenthesis upper X 1 comma upper X 2 comma k comma upper R right parenthesis
up
pe r U Subscript m Baseline equals k upper E upper R right double arrow upper E equals StartFraction upper U Subscript m Baseline Over k upper R EndFraction equals StartFraction upper X 1 plus upper X 2 Over k upper R EndFraction equals f left parenthesis upper X 1 comma upper X 2 comma k comma upper R right parenthesis
StartLay out 1st Row 1st Column u left parenthesis upper X 2 right parenthesis 2nd Column equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.08 and StartFraction 1 Over 100 EndFraction dot 1.2843 plus 0.002 right parenthesis equals 0.7087 mV 2nd Row 1st Column Blank 2nd Column k equals 9.20 plus or minus 0.05 nA slash lx right double arrow EndLayout
√
S
t
artLa yout 1st Row 1st Column u left parenthesis upper X 2 right parenthesis 2nd Column equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.08 and StartFraction 1 Over 100 EndFraction dot 1.2843 plus 0.002 right parenthesis equals 0.7087 mV 2nd Row 1st Column Blank 2nd Column k equals 9.20 plus or minus 0.05 nA slash lx right double arrow EndLayout
Star tLayout 1 st Row 
1
st Column  u 
le ft pare nthesis  upper  X 2 right parenthesis 2nd Column equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.08 and StartFraction 1 Over 100 EndFraction dot 1.2843 plus 0.002 right parenthesis equals 0.7087 mV 2nd Row 1st Column Blank 2nd Column k equals 9.20 plus or minus 0.05 nA slash lx right double arrow EndLayout
u left parenthesis k right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction 0.05 equals 0.0289 nA lx Superscript negative 1 Baseline u left parenthesis upper R right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction 10000 dot StartFraction 2 Over 100 EndFraction equals 115.5 normal upper Omega
√
u 
left parenthes is k rig
ht pare nthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction 0.05 equals 0.0289 nA lx Superscript negative 1 Baseline u left parenthesis upper R right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction 10000 dot StartFraction 2 Over 100 EndFraction equals 115.5 normal upper Omega
√
u 
left p ar enthesis k right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction 0.05 equals 0.0289 nA lx Superscript negative 1 Baseline u left parenthesis upper R right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction 10000 dot StartFraction 2 Over 100 EndFraction equals 115.5 normal upper Omega
u le ft pare nthesis k right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction 0.05 equals 0.0289 nA lx Superscript negative 1 Baseline u left parenthesis upper R right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction 10000 dot StartFraction 2 Over 100 EndFraction equals 115.5 normal upper Omega
c left p a r enthesis upper X 1 right parenthesis equals StartFraction d f Over d upper X 1 EndFraction equals StartFraction 1 Over k upper R EndFraction equals StartFraction 1 Over 9.2 dot 10 Superscript negative 9 Baseline dot 10000 EndFraction equals 1.087 dot 10 Superscript 4 Baseline lx upper V Superscript negative 1 Baseline equals c left parenthesis upper X 2 right parenthesis
c  le
ft  parenthesis upper X 1 right parenthesis equals StartFraction d f Over d upper X 1 EndFraction equals StartFraction 1 Over k upper R EndFraction equals StartFraction 1 Over 9.2 dot 10 Superscript negative 9 Baseline dot 10000 EndFraction equals 1.087 dot 10 Superscript 4 Baseline lx upper V Superscript negative 1 Baseline equals c left parenthesis upper X 2 right parenthesis
c l e
ft parenthesis upper X 1 right parenthesis equals StartFraction d f Over d upper X 1 EndFraction equals StartFraction 1 Over k upper R EndFraction equals StartFraction 1 Over 9.2 dot 10 Superscript negative 9 Baseline dot 10000 EndFraction equals 1.087 dot 10 Superscript 4 Baseline lx upper V Superscript negative 1 Baseline equals c left parenthesis upper X 2 right parenthesis
c le ft pare nthesis upper X 1 righ t p aren thesis equals StartFraction d f Over d upper X 1 EndFraction equals StartFraction 1 Over k upper R EndFraction equals StartFraction 1 Over 9.2 dot 10 Superscript negative 9 Baseline dot 10000 EndFraction equals 1.087 dot 10 Superscript 4 Baseline lx upper V Superscript negative 1 Baseline equals c left parenthesis upper X 2 right parenthesis
c left p a renthesis k right parenthesis equals StartFraction d f Over d k EndFraction equals StartFraction upper X 1 plus upper X 2 Over k squared upper R EndFraction equals ellipsis equals 1.517 dot 10 Superscript 12 Baseline upper A Superscript negative 1 Baseline lx squared
c l ef t p arenthesis k right parenthesis equals StartFraction d f Over d k EndFraction equals StartFraction upper X 1 plus upper X 2 Over k squared upper R EndFraction equals ellipsis equals 1.517 dot 10 Superscript 12 Baseline upper A Superscript negative 1 Baseline lx squared
c lef
t p a r enthesis k right Aparenthesis equals StartFraction d f Over d k EndFraction equals StartFraction upper X 1 plus upper X 2 Over k squared upper R EndFraction equals ellipsis equals 1.517 dot 10 Superscript 12 Baseline upper A Superscript negative 1 Baseline lx squared
c left p a renthesis upper R right parenthesis equals StartFraction d f Over d upper R EndFraction equals StartFraction upper X 1 plus x 2 Over k upper R squared EndFraction equals ellipsis equals 1.396 lx normal upper Omega Superscript negative 1
c  l ef t p arenthesis upper R right parenthesis equals StartFraction d f Over d upper R EndFraction equals StartFraction upper X 1 plus x 2 Over k upper R squared EndFraction equals ellipsis equals 1.396 lx normal upper Omega Superscript negative 1
c le
ft p a renthesis  u pper R right parenthesis equals StartFraction d f Over d upper R EndFraction equals StartFraction upper X 1 plus x 2 Over k upper R squared EndFraction equals ellipsis equals 1.396 lx normal upper Omega Superscript negative 1
This gives us the uncertainty budget in Table 14.5. From this budget we can 
see that it is the uncertainty of R that dominates the contributions to the estimate’s 
uncertainty; it is about 20 times larger than the smallest contribution (from X2). We 
can conclude that an uncertainty of, say 10 lx, from X1 wouldn’t have any signiﬁcant 
impact on the total uncertainty. That means that 
u left parenthe
sis upper X 1 right parenthesis dot c left parenthesis upper X 1 right parenthesis equals StartFraction s Over StartRoot upper N EndRoot EndFraction dot c left parenthesis upper X 1 right parenthesis less than or equals 10 right double arrow upper N greater than or equals left parenthesis StartFraction s dot c left parenthesis upper X 1 right parenthesis Over 10 EndFraction right parenthesis squared
√
u 
left parenthe sis u
ppe r X 1 right parenthesis dot c left parenthesis upper X 1 right parenthesis equals StartFraction s Over StartRoot upper N EndRoot EndFraction dot c left parenthesis upper X 1 right parenthesis less than or equals 10 right double arrow upper N greater than or equals left parenthesis StartFraction s dot c left parenthesis upper X 1 right parenthesis Over 10 EndFraction right parenthesis squared
u 
left parenthesis upper X 1 right parenthesis dot c left parenthesis upper X 1 right parenthesis equals StartFraction s Over StartRoot upper N EndRoot EndFraction dot c left parenthesis upper X 1 right parenthesis less than or equals 10 right double arrow upper N greater than or equals left parenthesis StartFraction s dot c left parenthesis upper X 1 right parenthesis Over 10 EndFraction right parenthesis squared

14.5 Summary
301
Table 14.5 The uncertainty budget 
Quantity
Estimate
u(xi)
c(xi)
c(xi)·u(xi) 
X1
1.2843 V
s divided by StartRoot upper N EndRoot
√
s divided by StartRoot upper N EndRoot V
1.087·104 lx V−1
u(X1)·c(X1) 
X2
0 V
0.709 mV
1.087·104 lx V−1
7.70 lx 
k
9.2·10–9 nA lx−1
0.0289 nA lx−1
1.5171.087·1012 A−1 lx2
43.9 lx 
R
10,000 Ω
115.5 Ω
1.396 lx Ω−1
161.2 lx 
E
13,959.5 lx
u(E) 
up p
er N great er than or equals left parenthesis StartFraction 4 dot 10 Superscript negative 3 Baseline dot 1.087 dot 10 Superscript 4 Baseline Over 10 EndFraction right parenthesis squared equals 18.9
up
per
 N greater than or equals left parenthesis StartFraction 4 dot 10 Superscript negative 3 Baseline dot 1.087 dot 10 Superscript 4 Baseline Over 10 EndFraction right parenthesis squared equals 18.9
Conclusion: We don’t need to take more than 20 samples; after that, the uncertainty 
of the other quantities hurts us more than the uncertainty from the sample variation 
and the DMM uncertainty. 
14.5 
Summary 
Being able to determine the uncertainty in a measurement is extremely important and 
should be considered as a ‘fundamental’ skill for any measurement personal. The 
math is not ‘advanced’, but there are a lot of numbers to handle, and the uncertainty 
budget is a good way to organize them. As we have seen in this chapter, the budget 
does not only produce the standard uncertainty of the output estimate, but it also 
provides important information about which quantity is hurting our overall accuracy 
most; we know what to do ﬁrst if we need to improve the accuracy. 
In Fig. 14.2, we demonstrated that the uncertainty of a digital DMM is typically 
stated as ± (% of reading + % of range). Students often ask where these uncertainties 
come from. That information is not so easy to ﬁnd in the literature (or DMM vendors’ 
manuals), but we can draw some conclusions from what we have learned so far. A 
digital DMM is of course based on an ADC, and we learned in Chap. 11 that ADCs 
have an inherent uncertainty of ± 0.5 LSB, which accounts for the ‘% of range’ 
uncertainty. 
The other contribution, ‘% of reading’, is a little harder to motivate; this is an 
uncertainty that increases with the input sample’s voltage level! To explain that we 
need to consider the hardware design of the dual slope. During the charging phase 
(see Fig. 11.18) a capacitor is charged, and this charging must be linear for the 
design to work. It is reasonable to assume that it is not linear and that it becomes 
more non-linear the more charge we have on the capacitor. That would explain why 
the uncertainty increases with the ‘reading’.

302
14
Uncertainty Budgets
14.6 
Solved problems 
Problem 14.1 In Fig. 14.7 we measure the electric power generated in a resistor. 
The amp meter is a 3½ digits handheld DMM with uncertainty ± (0.2% of rdg + 1 
digit) and the display reads 0.467 A (stable, no ﬂickering). The voltage meter is a 
6½ digits desktop DMM with uncertainty ± (0.02% of rdg + 0.04% of range). We 
took 18 samples with an average of 0.7594175 V and a sample standard deviation of 
s = 367 μV. What is the 95% conﬁdence interval of the power in this measurement? 
Solution: The power is St art L a yout 1 st Row upper  P equals upper U upper I equals left parenthesis upper U 1 plus upper U 2 right parenthesis dot left parenthesis upper I 1 plus upper I 2 right parenthesis equals EndLayout
StartLayout 1 st Row equals left parenthesi s 0.7594175 plus 0 right parenthesis dot left parenthesis 0.467 plus 0 right parenthesis equals ModifyingBelow 354.648 mW With quotation dash equals f left parenthesis upper U 1 comma upper U 2 comma upper I 1 period upper I 2 right parenthesis EndLayoutStar tLayout 1st Row equals left parenthesis 0.7594175 plus 0 right parenthesis dot left parenthesis 0.467 plus 0 right parenthesis equals ModifyingBelow 354.648 mW With quotation dash equals f left parenthesis upper U 1 comma upper U 2 comma upper I 1 period upper I 2 right parenthesis EndLayout
u(U1) is the type A uncertainty of the voltage measurement: u left  p arenthesis upper U 1 right parenthesis equals StartFraction 367 Over StartRoot 18 EndRoot EndFraction equals ModifyingBelow 86.50 normal mu upper V With quotation dash
√
u l ef
t pare nthesis upper U 1 right parenthesis equals StartFraction 367 Over StartRoot 18 EndRoot EndFraction equals ModifyingBelow 86.50 normal mu upper V With quotation dash. u(U2) is the type B uncertainty of the voltage measurement. Since the 
reading (average) is 0.7594175 V, we conclude that the range used was ‘1 V’: 
u left p arenthesis upper U 2 right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.02 and StartFraction 1 Over 100 EndFraction dot 0.759417 plus 0.04 and StartFraction 1 Over 100 EndFraction dot 1 right parenthesis equals ModifyingBelow 318.6 normal mu upper V With quotation dash
√
u
 
left parenthesis upper U 2 right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.02 and StartFraction 1 Over 100 EndFraction dot 0.759417 plus 0.04 and StartFraction 1 Over 100 EndFraction dot 1 right parenthesis equals ModifyingBelow 318.6 normal mu upper V With quotation dash
u le ft parenthe sis upp er U 2 right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.02 and StartFraction 1 Over 100 EndFraction dot 0.759417 plus 0.04 and StartFraction 1 Over 100 EndFraction dot 1 right parenthesis equals ModifyingBelow 318.6 normal mu upper V With quotation dash
u le ft 
p
arenthes is upper U 2 right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.02 and StartFraction 1 Over 100 EndFraction dot 0.759417 plus 0.04 and StartFraction 1 Over 100 EndFraction dot 1 right parenthesis equals ModifyingBelow 318.6 normal mu upper V With quotation dash
The type A uncertainty of the current measurement, u(I1), is = 0 (since there was 
‘no ﬂickering’ on the DMM display). The type B uncertainty is 
u left p arenthesis upper I 2 right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.2 and StartFraction 1 Over 100 EndFraction dot 0.467 plus 0.001 right parenthesis equals ModifyingBelow 1.117 mA With quotation dash
√
u
 
left  parenthesis upper I 2 right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.2 and StartFraction 1 Over 100 EndFraction dot 0.467 plus 0.001 right parenthesis equals ModifyingBelow 1.117 mA With quotation dash
u le ft paren thesis 
u
pper I 2  right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.2 and StartFraction 1 Over 100 EndFraction dot 0.467 plus 0.001 right parenthesis equals ModifyingBelow 1.117 mA With quotation dash
Sensitivity coefﬁcients are 
c left p a r enthesis upper U 1 right parenthesis equals StartFraction d f Over d upper U 1 EndFraction equals upper I 1 plus upper I 2 equals ModifyingBelow 0.467 upper A With quotation dash equals c left parenthesis upper U 2 right parenthesis
c le
ft pa renth esis upp er U 1 right parenthesis equals StartFraction d f Over d upper U 1 EndFraction equals upper I 1 plus upper I 2 equals ModifyingBelow 0.467 upper A With quotation dash equals c left parenthesis upper U 2 right parenthesis c left parenthesis upper U 1 right parenthesis equals StartFraction d f Over d upper U 1 EndFraction equals upper I 1 plus upper I 2 equals ModifyingBelow 0.467 upper A With quotation dash equals c left parenthesis upper U 2 right parenthesis
c left p a r enthesis upper I 1 right parenthesis equals StartFraction d f Over d upper I 1 EndFraction equals upper U 1 plus upper U 2 equals ModifyingBelow 0.7594175 upper V With quotation dash equals c left parenthesis upper I 2 right parenthesis
c le
ft pa renth esis upper I  1 right parenthesis equals StartFraction d f Over d upper I 1 EndFraction equals upper U 1 plus upper U 2 equals ModifyingBelow 0.7594175 upper V With quotation dash equals c left parenthesis upper I 2 right parenthesis c left parenthesis upper I 1 right parenthesis equals StartFraction d f Over d upper I 1 EndFraction equals upper U 1 plus upper U 2 equals ModifyingBelow 0.7594175 upper V With quotation dash equals c left parenthesis upper I 2 right parenthesis
Fig. 14.7 Power 
measurement 
V 
A 

14.6 Solved problems
303
This gives us the uncertainty budget in Table 14.6. The standard uncertainty of 
the power is u
 
le
f
t parenthesis ModifyingAbove upper P With caret right parenthesis equals StartRoot 40.40 squared plus 148.8 squared plus 848.3 squared EndRoot equals
√
u left parenthes is Modify ingAbove upper P With caret right parenthesis equals StartRoot 40.40 squared plus 148.8 squared plus 848.3 squared EndRoot equals862.2 μW. Since the number 
of samples are less < 30, we need to ﬁnd the effective degrees of freedom: 
upsilo n
 Subscript e f f Baseline equals StartStartFraction 862.2 Superscript 4 Baseline OverOver StartFraction 40.40 Superscript 4 Baseline Over 17 EndFraction plus StartFraction 148.8 Superscript 4 Baseline Over normal infinity EndFraction plus StartFraction 848.3 Superscript 4 Baseline Over normal infinity EndFraction EndEndFraction much greater than 30 right arrow k equals 2
upsilon Subscript e f f Baseline equals StartStartFraction 862.2 Superscript 4 Baseline OverOver StartFraction 40.40 Superscript 4 Baseline Over 17 EndFraction plus StartFraction 148.8 Superscript 4 Baseline Over normal infinity EndFraction plus StartFraction 848.3 Superscript 4 Baseline Over normal infinity EndFraction EndEndFraction much greater than 30 right arrow k equals 2
ups
ilon Subscript e f f Baseline equals StartStartFraction 862.2 Superscript 4 Baseline OverOver StartFraction 40.40 Superscript 4 Baseline Over 17 EndFraction plus StartFraction 148.8 Superscript 4 Baseline Over normal infinity EndFraction plus StartFraction 848.3 Superscript 4 Baseline Over normal infinity EndFraction EndEndFraction much greater than 30 right arrow k equals 2
up silon Subscript e f f Baseline equals StartStartFraction 862.2 Superscript 4 Baseline OverOver StartFraction 40.40 Superscript 4 Baseline Over 17 EndFraction plus StartFraction 148.8 Superscript 4 Baseline Over normal infinity EndFraction plus StartFraction 848.3 Superscript 4 Baseline Over normal infinity EndFraction EndEndFraction much greater than 30 right arrow k equals 2
u
ps ilo n Su bscript e f f Baseline equals StartStartFraction 862.2 Superscript 4 Baseline OverOver StartFraction 40.40 Superscript 4 Baseline Over 17 EndFraction plus StartFraction 148.8 Superscript 4 Baseline Over normal infinity EndFraction plus StartFraction 848.3 Superscript 4 Baseline Over normal infinity EndFraction EndEndFraction much greater than 30 right arrow k equals 2
up per U equals  2 times 8 62. 2 norm al mu n ormal up per W  e qual s 1. 72 mW right double arrow 1 .8 mW right double arrow ModifyingBelow Below ModifyingBelow upper P equals 354.6 plus or minus 1.8 mW left parenthesis 95 percent sign right parenthesis With quotation dash With quotation dash
Problem 14.2 Figure 14.8 illustrates a ﬂow measurement in a water pipe. The output 
voltage of the sensor depends on the volume ﬂow q as up er U Subscript m Baseline equals alpha times StartRoot q EndRoot√upper U Subscript m Baseline equals alpha times StartRoot q EndRoot, and according 
to the datasheet, the sensor constant is 5.0  mV dot left parenthesis l slash min right parenthesis Superscript negative 0.5V
. The differential ampliﬁer 
has an ampliﬁcation of 175 and a 5½ digits DMM was used. The DMM uncertainty 
was ± (0.08% of rdg + 0.05% of range). We took eight readings as reported in 
Table 14.7. What is the 95% conﬁdence interval of the volume ﬂow q in this case?
Solution: From Table 14.7 we conclude that the DMM range used was 10 V. 
u S ubscript m Baseline equals alpha StartRoot q EndRoot dot upper F right double arrow q equals StartFraction u Subscript m Superscript 2 Baseline Over alpha squared upper F squared EndFraction equals StartFraction left parenthesis upper X 1 plus upper X 2 right parenthesis squared Over alpha squared upper F squared EndFraction equals f left parenthesis upper X 1 comma upper X 2 comma alpha comma upper F right parenthesis√u Subs crip t m B
aseline equals alpha StartRoot q EndRoot dot upper F right double arrow q equals StartFraction u Subscript m Superscript 2 Baseline Over alpha squared upper F squared EndFraction equals StartFraction left parenthesis upper X 1 plus upper X 2 right parenthesis squared Over alpha squared upper F squared EndFraction equals f left parenthesis upper X 1 comma upper X 2 comma alpha comma upper F right parenthesis
u Subs cript m Baseline equals alpha StartRoot q EndRoot dot upper F right double arrow q equals StartFraction u Subscript m Superscript 2 Baseline Over alpha squared upper F squared EndFraction equals StartFraction left parenthesis upper X 1 plus upper X 2 right parenthesis squared Over alpha squared upper F squared EndFraction equals f left parenthesis upper X 1 comma upper X 2 comma alpha comma upper F right parenthesis
u Sub
sc ri pt m Bas el ine equals alpha StartRoot q EndRoot dot upper F right double arrow q equals StartFraction u Subscript m Superscript 2 Baseline Over alpha squared upper F squared EndFraction equals StartFraction left parenthesis upper X 1 plus upper X 2 right parenthesis squared Over alpha squared upper F squared EndFraction equals f left parenthesis upper X 1 comma upper X 2 comma alpha comma upper F right parenthesis
up er X 1 equals ModifyingAbove u With quotation dash Subscript m Baseline equals one eighth left parenthesis 2.6946 plus ellipsis period plus 2.8276 right parenthesis equals ModifyingBelow 2.7414375 upper V With quotation dashup er X 1 equals ModifyingAbove u With quotation dash Subscript m Baseline equals one eighth left parenthesis 2.6946 plus ellipsis period plus 2.8276 right parenthesis equals ModifyingBelow 2.7414375 upper V With quotation dash
upper X 1 equ a l s  ModifyingAbove u With quotation dash Subscript m Baseline equals one eighth left parenthesis 2.6946 plus ellipsis period plus 2.8276 right parenthesis equals ModifyingBelow 2.7414375 upper V With quotation dash
Mod ifyingAbove q  With caret equals StartFraction left parenthesis 2.7414375 plus 0 right parenthesis squared Over 0.005 squared dot 175 squared EndFraction equals ModifyingBelow 9.81614 l dot min Superscript negative 1 Baseline With quotation dash
Modifyi ngAbove
 q With ca re t equals StartFraction left parenthesis 2.7414375 plus 0 right parenthesis squared Over 0.005 squared dot 175 squared EndFraction equals ModifyingBelow 9.81614 l dot min Superscript negative 1 Baseline With quotation dash
s equals StartRoot StartFraction 1 Over 8 minus 1 EndFraction left parenthesis left parenthesis 2.6946 minus 2.7414375 right parenthesis squared plus ellipsis plus left parenthesis 2.8276 minus 2.7414375 right parenthesis squared right parenthesis EndRoot equals 0.07802 upper V
√
s equals StartRoot StartFraction 1 Over 8 minus 1 EndFraction left parenthesis left parenthesis 2.6946 minus 2.7414375 right parenthesis squared plus ellipsis plus left parenthesis 2.8276 minus 2.7414375 right parenthesis squared right parenthesis EndRoot equals 0.07802 upper V
s equ
a
ls Start Root StartFrac tio n  1 Over 8 mi nus 1 EndFract
ion left p arenthesis left parenthesis 2.6946 minus 2.7414375 right parenthesis squared plus ellipsis plus left parenthesis 2.8276 minus 2.7414375 right parenthesis squared right parenthesis EndRoot equals 0.07802 upper V
u left parenthesis upper X 1 right parenthesis equals s divided by StartRoot 8 EndRoot equals 0.07802 divided by StartRoot 8 EndRoot equals ModifyingBelow 0.0276 upper V With quotation dash
√
u left parenthesis upper X 1 right parenthesis equals s divided by StartRoot 8 EndRoot equals 0.07802 divided by StartRoot 8 EndRoot equals ModifyingBelow 0.0276 upper V With quotation dash
√
u left pare nthesis upper X 1 right parenthesis equals s divided by StartRoot 8 EndRoot equals 0.07802 divided by StartRoot 8 EndRoot equals ModifyingBelow 0.0276 upper V With quotation dash
u left p arenthesis upper X 2 right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.08 and StartFraction 1 Over 100 EndFraction dot 2.7414375 plus 0.05 and StartFraction 1 Over 100 EndFraction dot 10 right parenthesis equals ModifyingBelow 0.00415 upper V With quotation dash
√
u
 
left parenthesis upper X 2 right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.08 and StartFraction 1 Over 100 EndFraction dot 2.7414375 plus 0.05 and StartFraction 1 Over 100 EndFraction dot 10 right parenthesis equals ModifyingBelow 0.00415 upper V With quotation dash
u le ft parenthes is uppe r X 2 right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.08 and StartFraction 1 Over 100 EndFraction dot 2.7414375 plus 0.05 and StartFraction 1 Over 100 EndFraction dot 10 right parenthesis equals ModifyingBelow 0.00415 upper V With quotation dash
u le ft p
a
renthesis upper X 2 right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction left parenthesis 0.08 and StartFraction 1 Over 100 EndFraction dot 2.7414375 plus 0.05 and StartFraction 1 Over 100 EndFraction dot 10 right parenthesis equals ModifyingBelow 0.00415 upper V With quotation dash
Table 14.6 The uncertainty budget 
Quantity
Estimate
u(xi)
c(xi)
c(xi)·u(xi) 
U1
0.7594175 V
86.50 μV
0.467 A
40.40 μW 
U2
0 V
318.6 μV
0.467 A
148.8 μW 
I1
0.467 A
0 A
0.7594175 V
0 μW 
I2
0 A
1.117 mA
0.7594175 V
848.3 μW 
P
354.648 mW
862.2 µW 

304
14
Uncertainty Budgets
Fig. 14.8 Flow 
measurement 
Table 14.7 We took eight samples 
Um (V)
02.6946
02.6650
02.7918
02.7186
02.7885
02.8256
02.6198
02.8276
We know nothing about the uncertainties of α and k, so we will have to 
‘guestimate’: 
alpha equ als 5.0 0 p lus or minus 0. 05 mV dot  l Superscript negative 0.5 Baseline min Superscript 0.5 Baseline right double arrow u left parenthesis alpha right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction dot 0.05 equals ModifyingBelow 0.0289 mV dot l Superscript negative 0.5 Baseline min Superscript 0.5 Baseline With quotation dash
√
al
pha equ als 5.00 plu s or minus 0.05 mV dot l Superscript negative 0.5 Baseline min Superscript 0.5 Baseline right double arrow u left parenthesis alpha right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction dot 0.05 equals ModifyingBelow 0.0289 mV dot l Superscript negative 0.5 Baseline min Superscript 0.5 Baseline With quotation dash
up per F eq uals 1 75.0 plus  or minus 0.5 right double arrow u left parenthesis upper F right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction dot 0.5 equals ModifyingBelow 0.289 With quotation dash
√
up
per F equals 175.0 plus or minus 0.5 right double arrow u left parenthesis upper F right parenthesis equals StartFraction 1 Over StartRoot 3 EndRoot EndFraction dot 0.5 equals ModifyingBelow 0.289 With quotation dash
c left p a r enthesis upper X 1 right parenthesis equals StartFraction d f Over d upper X 1 EndFraction equals StartFraction 2 dot left parenthesis upper X 1 plus upper X 2 right parenthesis Over alpha squared upper F squared EndFraction equals ellipsis equals ModifyingBelow 7.161 upper V Superscript negative 1 Baseline dot l Superscript negative 1 Baseline dot min With quotation dash equals c left parenthesis upper X 2 right parenthesis
c  le
ft p arenth esis upper X 1 right parenthesis equals StartFraction d f Over d upper X 1 EndFraction equals StartFraction 2 dot left parenthesis upper X 1 plus upper X 2 right parenthesis Over alpha squared upper F squared EndFraction equals ellipsis equals ModifyingBelow 7.161 upper V Superscript negative 1 Baseline dot l Superscript negative 1 Baseline dot min With quotation dash equals c left parenthesis upper X 2 right parenthesis
c lef
t p a r enthesis uppe r X 1 right parenthesis equals StartFraction d f Over d upper X 1 EndFraction equals StartFraction 2 dot left parenthesis upper X 1 plus upper X 2 right parenthesis Over alpha squared upper F squared EndFraction equals ellipsis equals ModifyingBelow 7.161 upper V Superscript negative 1 Baseline dot l Superscript negative 1 Baseline dot min With quotation dash equals c left parenthesis upper X 2 right parenthesis c left parenthesis upper X 1 right parenthesis equals StartFraction d f Over d upper X 1 EndFraction equals StartFraction 2 dot left parenthesis upper X 1 plus upper X 2 right parenthesis Over alpha squared upper F squared EndFraction equals ellipsis equals ModifyingBelow 7.161 upper V Superscript negative 1 Baseline dot l Superscript negative 1 Baseline dot min With quotation dash equals c left parenthesis upper X 2 right parenthesis
c left p a renthesis alpha right parenthesis equals StartFraction d f Over d alpha EndFraction equals left parenthesis minus right parenthesis 2 times StartFraction left parenthesis upper X 1 plus upper X 2 right parenthesis squared Over alpha cubed upper F squared EndFraction equals ellipsis equals ModifyingBelow 3926.5 upper V Superscript negative 1 Baseline dot l Superscript 3 divided by 2 Baseline dot min Superscript negative 3 divided by 2 Baseline With quotation dash
c l eft par enthes is alpha right parenthesis equals StartFraction d f Over d alpha EndFraction equals left parenthesis minus right parenthesis 2 times StartFraction left parenthesis upper X 1 plus upper X 2 right parenthesis squared Over alpha cubed upper F squared EndFraction equals ellipsis equals ModifyingBelow 3926.5 upper V Superscript negative 1 Baseline dot l Superscript 3 divided by 2 Baseline dot min Superscript negative 3 divided by 2 Baseline With quotation dash
c lef
t p a r enthesis alph a right  parenthesis equals StartFraction d f Over d alpha EndFraction equals left parenthesis minus right parenthesis 2 times StartFraction left parenthesis upper X 1 plus upper X 2 right parenthesis squared Over alpha cubed upper F squared EndFraction equals ellipsis equals ModifyingBelow 3926.5 upper V Superscript negative 1 Baseline dot l Superscript 3 divided by 2 Baseline dot min Superscript negative 3 divided by 2 Baseline With quotation dash
c left p a renthesis upper F right parenthesis equals StartFraction d f Over d upper F EndFraction equals left parenthesis minus right parenthesis 2 times StartFraction left parenthesis upper X 1 plus upper X 2 right parenthesis squared Over alpha squared upper F cubed EndFraction equals ellipsis period equals ModifyingBelow 0.1122 l dot min Superscript negative 1 Baseline With quotation dash
c l eft par enthes is upper F right parenthesis equals StartFraction d f Over d upper F EndFraction equals left parenthesis minus right parenthesis 2 times StartFraction left parenthesis upper X 1 plus upper X 2 right parenthesis squared Over alpha squared upper F cubed EndFraction equals ellipsis period equals ModifyingBelow 0.1122 l dot min Superscript negative 1 Baseline With quotation dash
c lef
t p a r e nthesis up pe r F right parenthesis equals StartFraction d f Over d upper F EndFraction equals left parenthesis minus right parenthesis 2 times StartFraction left parenthesis upper X 1 plus upper X 2 right parenthesis squared Over alpha squared upper F cubed EndFraction equals ellipsis period equals ModifyingBelow 0.1122 l dot min Superscript negative 1 Baseline With quotation dash
u
 
le
f
t parenthesis ModifyingAbove q With caret right parenthesis equals StartRoot 0.198 squared plus 0.0297 squared plus 0.114 squared plus 0.0325 squared EndRoot equals 0.233 l dot min
√
u left parenthesi s Modifyi ngAbove q With car et  right parenthesis equals StartRoot 0.198 squared plus 0.0297 squared plus 0.114 squared plus 0.0325 squared EndRoot equals 0.233 l dot min

References
305
Table 14.8 The uncertainty budget 
Quantity
Estimate
u(xi)
c(xi)
c(xi)·u(xi) 
X1
2.7414375
0.0276
7.161
0.198 l/min 
X2
0
0.00415
7.161
0.0297 l/min 
α
5.0
0.0289
3926.5
0.114 l/min 
F
175
0.289
0.1122
0.0325 l/min 
q
9.81614 l/min
0.233 l/min 
nu Sub s
cript e f f Baseline equals StartStartFraction 0.233 Superscript 4 Baseline OverOver StartFraction 0.198 Superscript 4 Baseline Over 7 EndFraction plus StartFraction 0.0297 Superscript 4 Baseline Over normal infinity EndFraction plus StartFraction 0.0297 Superscript 4 Baseline Over normal infinity EndFraction plus StartFraction 0.0325 Superscript 4 Baseline Over normal infinity EndFraction EndEndFraction equals 13.4 equals 13 right arrow k equals 2.21
nu Subscript e f f Baseline equals StartStartFraction 0.233 Superscript 4 Baseline OverOver StartFraction 0.198 Superscript 4 Baseline Over 7 EndFraction plus StartFraction 0.0297 Superscript 4 Baseline Over normal infinity EndFraction plus StartFraction 0.0297 Superscript 4 Baseline Over normal infinity EndFraction plus StartFraction 0.0325 Superscript 4 Baseline Over normal infinity EndFraction EndEndFraction equals 13.4 equals 13 right arrow k equals 2.21
nu
 Subscript e f f Baseline equals StartStartFraction 0.233 Superscript 4 Baseline OverOver StartFraction 0.198 Superscript 4 Baseline Over 7 EndFraction plus StartFraction 0.0297 Superscript 4 Baseline Over normal infinity EndFraction plus StartFraction 0.0297 Superscript 4 Baseline Over normal infinity EndFraction plus StartFraction 0.0325 Superscript 4 Baseline Over normal infinity EndFraction EndEndFraction equals 13.4 equals 13 right arrow k equals 2.21
nu
 Subscript e f f Baseline equals StartStartFraction 0.233 Superscript 4 Baseline OverOver StartFraction 0.198 Superscript 4 Baseline Over 7 EndFraction plus StartFraction 0.0297 Superscript 4 Baseline Over normal infinity EndFraction plus StartFraction 0.0297 Superscript 4 Baseline Over normal infinity EndFraction plus StartFraction 0.0325 Superscript 4 Baseline Over normal infinity EndFraction EndEndFraction equals 13.4 equals 13 right arrow k equals 2.21
nu
 Subscript e f f Baseline equals StartStartFraction 0.233 Superscript 4 Baseline OverOver StartFraction 0.198 Superscript 4 Baseline Over 7 EndFraction plus StartFraction 0.0297 Superscript 4 Baseline Over normal infinity EndFraction plus StartFraction 0.0297 Superscript 4 Baseline Over normal infinity EndFraction plus StartFraction 0.0325 Superscript 4 Baseline Over normal infinity EndFraction EndEndFraction equals 13.4 equals 13 right arrow k equals 2.21
nu
 Subscr ipt e  f f  Baseline equals StartStartFraction 0.233 Superscript 4 Baseline OverOver StartFraction 0.198 Superscript 4 Baseline Over 7 EndFraction plus StartFraction 0.0297 Superscript 4 Baseline Over normal infinity EndFraction plus StartFraction 0.0297 Superscript 4 Baseline Over normal infinity EndFraction plus StartFraction 0.0325 Superscript 4 Baseline Over normal infinity EndFraction EndEndFraction equals 13.4 equals 13 right arrow k equals 2.21
up per U e quals 2. 21 tim
es  0.233 equals 0.52 ModifyingBelow Below ModifyingBelow q equals 9.82 plus or minus 0.52 l slash min With quotation dash With quotation dash left parenthesis 95 percent sign right parenthesis upper U equals 2.21 times 0.233 equals 0.52 ModifyingBelow Below ModifyingBelow q equals 9.82 plus or minus 0.52 l slash min With quotation dash With quotation dash left parenthesis 95 percent sign right parenthesis
That gives us the uncertainty budget in Table 14.8. 
From the uncertainty table, it is obvious that we should take more samples. 
References 
1. BIPM. (2008) Evaluation of measurement data—guide to the expression of uncertainty in 
measurement, JCGM 100: 2008 GUM 1995 with minor corrections. Jt Comm Guid Metrol 
98 
2. Expression of the Uncertainty of Measurement in Calibration (1999) European co-operation for 
accrediation 
3. Keysight Technologies I (2022) Digital multimeters 34460A, 34461A, 34465A (6 1/2 digit), 
34470A (7 1/2 digit)

Chapter 15 
The Lock-In Ampliﬁer 
Abstract The lock-in ampliﬁer (LIA) is a common instrument in physics labora-
tories that can detect signals with extremely low signal-to-noise ratios. However, to 
really take advantage of its potential, a basic understanding of its operating principle 
is necessary. This chapter ﬁrst introduces the phase sensitive detector (PSD) and 
evolves it into a lock-in ampliﬁer. At the end of this chapter, the dual-phase lock-in 
ampliﬁer is introduced and the I and Q signals are deﬁned. 
15.1 
Introduction 
The fundamental problem that we address in this book is how to ﬁnd a ‘sinusoidal 
signal in noise’. We have provided several solutions for that already (and will provide 
a few more) and the solution depends on the circumstances: What kind of noise do 
we have? (NM/CM? Random/periodic?) How large is the noise? (SNR?). Do we 
know the period of the sine or not? etc. Each problem has its ‘best’ solution. In this 
chapter we will address the problem where the sinusoidal frequency is known; in  
fact, we control the frequency. This is not unusual, think of the sinusoidal as the 
‘excitation frequency’ of the experiment. For example, in a physics lab we might 
use a pulsed laser (or a laser beam ‘chopper’) and then the laser pulse frequency 
is the ‘excitation frequency’ (which we control) of the experiment. So, we know/ 
control the frequency, and we want to determine the amplitude. The ‘catch’ is that 
the sine (or any periodic ‘response signal’) is ‘buried’ in noise; here we will assume 
an extremely low SNR (<< 1). 
Here is a common argument (misunderstanding): ‘If we know the frequency, why 
don’t we just design a resonance ﬁlter (as described in Chap. 9) with a resonance 
frequency that matches our sinusoidal signal?’. 
That won’t work for several reasons. First, the SNR is so low, that we would need 
an extremely narrow resonance ﬁlter (Q > 10,000) and such narrow resonance ﬁlters 
are impossible (?) to design with standard analog components. Second, even if we 
could design such a narrow ﬁlter it would need to have a stability on a ‘ppm level’ 
or the signal frequency would ‘slip off’ the ﬁlter resonance, and the signal would
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_15 
307

308
15
The Lock-In Ampliﬁer
be ‘killed’ with the noise. All it would take is that the signal frequency, or the ﬁlter 
parameters, change just a little bit (due to temperature, humidity….) and we would 
fail to detect our sinusoidal signal. 
We will build a ‘resonance ﬁlter’ with an extremely high-Q value (> 106), but for 
that to work, we can’t use ordinary components as we did in Chap. 9. For such a 
high-Q ﬁlter to work, the signal frequency must be ‘locked’ to the ﬁlter’s resonance 
frequency; if one changes, the other must follow. Such a narrow ‘resonance ﬁlter’ is 
called a lock-in ampliﬁer (LIA). 
15.2 
Phase Sensitive Detector 
15.2.1 
PSDs 
Before we get into the lock-in ampliﬁers, there are some electronics that we need to 
introduce. First, we need a phase sensitive detector (a ‘PSD’). Imagine that we have 
the following signal: 
x left paren thes is t ri ght p aren thesis equals 0 .01  sine 2 norm
al pi Baseline 100 t plus 10 sine 2 normal pi Baseline 120 t plus left single quotation mark lots of white noise right single quotation mark 
We assume that the 100 Hz signal is the ‘good’ signal that we want to detect, 
and the other signal parts are ‘noise’. By ‘detect’ we mean that we want to ﬁnd its 
amplitude (we know the frequency, remember?). This signal is illustrated in Fig. 15.1. 
The signal-to-noise ratio here is so bad that there is not even the slightest hint of 
it in Fig. 15.1. Earlier, when we learned about Fourier transforms, we demonstrated 
that we could just do an FFT of the signal to ‘detect’ a small signal in a lot of noise.
Fig. 15.1 There is no trace of our 100 Hz signal 

15.2 Phase Sensitive Detector
309
That won’t work here. First, we know what frequency we are looking for, we don’t 
need to do a spectral analysis to ﬁnd the frequency. Second, the SNR is so poor 
that we wouldn’t see it anyway. (If you don’t believe it, Fig. 15.2 illustrates the FFT 
spectrum of the signal in Fig. 15.1.) Nevertheless, we need to detect it. That seems 
like ‘mission impossible’, but since we know what frequency we are looking for, 
we will ﬁnd it; all it takes is some clever sampling and some time (or lots of time, 
depending on the SNR). Here is what we are going to do: The frequency is 100 Hz, 
i.e., the period of the signal is 10 ms. We are going to sample the signal with a 
sampling frequency of 5 ms (200 S/s), taking exactly two samples per period, see 
Fig. 15.3. 
Fig. 15.2 There is nothing at 100 Hz 
Fig. 15.3 PSD in software: take samples 180° apart and subtract [1]

310
15
The Lock-In Ampliﬁer
Fig. 15.4 Sampling a 120 Hz signal at 200 S/s 
(I know what you are thinking: The sampling in Fig. 15.3 violates the sampling 
theorem since the sampling rate is not > 2f signal. But we don’t worry about that 
here, because we are not going to do any FFT or ﬁltering, so we don’t care about 
aliasing!) Notice in Fig. 15.3 that since we take our samples 180° apart, they will 
always have the same magnitude, but the opposite sign! Hence, if we subtract our 
samples pairwise, they will add; if the ﬁrst sample is x(t) and the second one is x(t 
+ T/2), then x(t + T/2) = − x(t), and x(t) − x(t + T/2) = 2x(t). If we take samples 
180° apart and subtract, we amplify the sample by a factor of two. Then we realize 
that if we add N ‘pairwise subtracted’ samples, we will amplify the signal 2N times! 
The sum of the 10 ‘sample pairs’ in Fig. 15.3 is ≈ 0.12. Compare that with the signal 
amplitude which is 0.01. 
Let’s see what happens to the other signal components in Eq. (15.1). In Fig. 15.4 
we sample the 120 Hz signal with the same sampling rate. 
It is obvious from Fig. 15.4 that two adjacent samples will not have the same 
magnitude and hence, they will not ‘amplify’ if we subtract them pairwise. If we 
subtract the samples in Fig. 15.4 pairwise and then add all the ‘subtracted pairs’, the 
sum would be ≈−1! Compare that with the signal amplitude of 10. 
Let the power of this sink in; if we disregard the white noise for the moment, 
we have an SNR in the raw signal in Eq. (15.1) of 0.01/10 = 0.001. After twenty 
samples we have changed the relationship between the signal and the noise to 0.12/ 
1 = 0.12. With only twenty samples, we have improved the SNR by a factor of 120! 
From Figs. 15.3 to 15.4, we conclude that if we sample a signal with a sampling 
rate that is exactly T 0/2, and subtract samples pairwise, then any signal component 
with frequency f 0 = 1/T 0 will be ampliﬁed and signals with any other frequency will 
be attenuated! 
What about the white noise? If we treat our subtracted pairs as a random variable, 
Y = X1 – X2, where the X variables are normally distributed with a standard deviation 
of σ (same as the noise), then it is easy to prove that Y has a standard deviation of

15.2 Phase Sensitive Detector
311
√
StartRoot 2 EndRoot sigma. Hence, if we take the average of N subtracted pairs (just accumulating will not 
work, we will overﬂow), then we know from Chap. 13 that the standard deviation of 
the average will be sigma StartRoot 2 divided by upper N EndRoot√sigma StartRoot 2 divided by upper N EndRoot; the random noise will also be reduced as we take more 
samples. 
Hence, if we just keep sampling the signal in Eq. (15.1) (at 200 S/s) and average 
‘subtracted pairs’, the signal with frequency f 0 will gradually materialize from the 
noise since this sampling technique gradually ampliﬁes the f 0 signal and attenuates 
anything else. By ‘materialize’, we mean that we will be able to detect its presence 
despite the extremely poor SNR in the raw signal. 
The conclusion is that if the signal we are looking for is periodic, with a known 
period, we can always ﬁnd it (at least in theory); it is only a matter of time (take 
enough samples). 
We can also learn something else from Fig. 15.3. We take the ﬁrst sample at a 
phase angle of approximately 45° and the sample value is approximately 0.006. We 
realize that we could have done better! If we instead take the ﬁrst sample at a phase 
angle of 90°, the ﬁrst sample would be 0.01 and the ampliﬁcation by accumulating 
pairwise subtractions would have been even larger. 
On the other hand, we could have done worse too. If we take the ﬁrst sample at 
a phase angle of 0°, all samples would be 0 and there would be no ampliﬁcation at 
all. So, this sampling strategy is a little precarious; the result depends on the phase 
angle of the ﬁrst sample! In fact, what we have here is a phase sensitive detector, a  
PSD; the outcome depends on the phase angle. 
15.2.2 
Analog PSDs 
The sampling technique illustrated in Fig. 15.2 is the ‘digital’ version of a PSD. It 
is ‘digital’ because the PSD is implemented in software. Figure 15.5 illustrates the 
classic ‘analog’ PSD that can be implemented in hardware. 
Here, the reference signal is a square signal that controls a bipolar switch; when 
the reference signal is ‘on’ the signal x(t) is routed through the switch, and when the 
reference signal is ‘off’, the signal −x(t) is routed through. If there is a sinusoidal 
in x(t) with a frequency that is exactly f 0 = 1/T 0, and in phase with r(t) (ϕ = 0°),
Fig. 15.5 The classic analog PSD 

312
15
The Lock-In Ampliﬁer
Fig. 15.6 We have a rectiﬁer 
then the ﬁrst part of the electronics in Fig. 15.5 is a rectiﬁer. This is illustrated in 
Fig. 15.6. 
The post-processing lowpass ﬁlter will ‘smooth’ the signal to a DC voltage. Notice 
the phase angle regulator in Fig. 15.5; with this ‘knob’ we can adjust the phase angle 
arbitrarily to match the phase of x(t). In this case, the phase should be exactly 0° for 
a maximum output. A gradual phase shift from 0° to 180° would generate a change 
in u(ϕ) from  +1 to  −1; we have a phase sensitive detector. 
15.2.3 
Multiplying PSDs 
The PSD in Fig. 15.5 has a disadvantage, the switch. Even if this switch is a semi-
conductor relay, it limits the frequency range we can use. Lock-in ampliﬁers, depend 
on PSDs, but they use a different technique, like the heterodyne technique we used 
in Chap. 8; we multiply the signal with the reference signal, see Fig. 15.7. 
If we multiply them, the multiplier output y(t) is (see Chap. 8) 
y left parenthesi s t rig ht pa renthesis equals  upper A lef t brac
e cosine left parenthesis left parenthesis omega Subscript x Baseline plus omega 0 right parenthesis t plus phi Subscript x Baseline plus phi 0 right parenthesis plus cosine left parenthesis left parenthesis omega Subscript x Baseline minus omega 0 right parenthesis t plus phi Subscript x Baseline minus phi 0 right parenthesis right brace
Fig. 15.7 A multiplying 
PSD 
× 

15.4 LIAs
313
Fig. 15.8 A PLL shapes the 
reference signal 
The lowpass ﬁlter will stop the ‘sum frequency’ signal. We assume that the cutoff 
frequency of the lowpass ﬁlter is so low, that it blocks all frequencies /= 0; anything 
but DC is blocked by the lowpass ﬁlter. Hence, the only case where anything comes 
out of the lowpass ﬁlter is if ωx = ω0. In that case 
u left pa renthes is t 
right parenthesis equals upper A cosine left parenthesis phi Subscript x Baseline minus phi 0 right parenthesis
From Eq. (15.3) it is obvious that the multiplier + ﬁlter in Fig. 15.7 is a phase 
detector. For a ‘perfect’ detection, we would need a phase angle shifter (as in Fig. 15.5) 
to match the phases of the signal and the reference signal. A lock-in ampliﬁer does not 
need one though, at least not the more expensive ones. We explain that in Sect. 15.4. 
15.3 
Phase-Locked Loops 
Before we present the lock-in ampliﬁer, there is one more component we need to 
introduce. From Fig. 15.7 and Eq. (15.2) it is obvious that the detection depends on a 
reference signal that is a ‘good’ cosine. Keep in mind that the reference signal is the 
signal that we use to ‘excite’ the experiment. That could be a cosine, but more often it 
is not. In laser experiments, we either use a ‘pulsed’ laser or a ‘chopper’ to periodize 
a photo detector signal. In both cases the reference signal will be a square signal. 
It may also be ‘noisy’. For that reason, the reference signal in a lock-in ampliﬁer, 
is ﬁrst passed through a phase-locked loop (PLL). We will not go into the details 
of PLLs here. It is a versatile, standard component that can divide or multiply a 
signal’s frequency, but for our purposes, we will only use it as a ‘signal formatting’ 
component; we input a ‘noisy’ signal with some period, and the PLL will output a 
‘good’ cosine with the same frequency (Fig. 15.8). 
15.4 
LIAs 
A lock-in ampliﬁer (LIA) is an ‘advanced PSD’. The ‘simple’ LIAs have indeed 
a phase control knob that you have to adjust (manually) to ‘align’ the reference 
signal with the detector signal. (Which can be quite a challenge!). The ‘advanced’ 
LIAs produce a signal that is independent of the phase angle (but they still produce 
and display the phase angle). They achieve that by adding another multiplying PSD 
where the reference signal is phase-shifted 90° (converting a ‘cosine’ to a ‘sine’). To 
see how this works, we need a few basic trigonometric expressions. In Chap. 8 we 
multiplied two cosines. If we multiply a sine and cosine, we get Eq. (15.4).

314
15
The Lock-In Ampliﬁer
Fig. 15.9 Reference signal 
is phase-shifted 90°
× 
sine  alpha t imes cosine beta equals one half left parenthesis sine left parenthesis alpha plus beta right parenthesis plus sine left parenthesis alpha minus beta right parenthesis right parenthesis
sine alpha times cosine bet
a equals one half left parenthesis sine left parenthesis alpha plus beta right parenthesis plus sine left parenthesis alpha minus beta right parenthesis right parenthesis
In Fig. 15.9 we have a multiplying PSD where the reference signal is phase-shifted 
90° versus the signal. 
If we apply Eq. (15.4), and the same reasoning that gave us Eq. (15.3), we see 
that the ﬁlter output in Fig. 15.9 will be 
u left pa renthes is t 
right parenthesis equals upper A sine left parenthesis phi Subscript x Baseline minus phi 0 right parenthesis
Next, we apply the Pythagorean identity expression sine squared a lpha plus cosine squared alpha equals 1 to Eqs. 
(15.3) and (15.5): 
/
Sta rtRoot u pper A squa red cosin e squared
 left parenthesis phi Subscript x Baseline minus phi 0 right parenthesis plus upper A squared sine squared left parenthesis phi Subscript x Baseline minus phi 0 right parenthesis EndRoot equals upper A
From Eq. (15.6), we see that if we have ‘dual phase’ detectors, with a 90° phase 
shift, we can get an output that is independent of the phase shift between the signal 
and the reference (which saves you a lot of time and frustration in the lab, believe 
me!). Figure 15.10 illustrates a ‘dual phase’ lock-in ampliﬁer. 
The ‘output box’ in Fig. 15.10 (the ‘squaring’ and ‘root squaring’) can be imple-
mented either in hardware or software; here we will just treat it as a ‘black box’. In 
a commercial LIA you will also ﬁnd pre- and post-ampliﬁers, pre- and post-ﬁlters, 
several input signal options (current inputs, differential-ended inputs), etc. 
When you use a lock-in ampliﬁer, you provide the reference signal (from the ‘exci-
tation device’ in your experiment) and the general rule is that you select a frequency
××
Acos(ω0t + ϕx) + ’noise’ 
2cos(ω0t + ϕ0) 
LP 
×
LP 
90º 
x 
x2 + y2 
y 
A 
I 
Q 
Fig. 15.10 ‘Dual phase’ lock-in ampliﬁer 

15.5 Solved Problems
315
‘far away’ from the local power line frequency (50/60 Hz) and its harmonics. The 
reason is that in many situations the noise comes from the power line (see Chap. 2) 
and so you should use some ‘odd frequency number’. If the power line frequency is 
50 Hz, you don’t excite your system with 50 or 100 Hz, you use something ‘odd’ 
(like 217 Hz, for example). 
Finally, a few comments about LIAs. First, notice in Fig. 15.10 that we have named 
the phase detectors’ outputs ‘I’ and ‘Q’, respectively. ‘I’ stands for ‘In-phase’ (with 
the measurement signal) and ‘Q’ stands for ‘phase shifted a Quarter of a period’. 
That is ‘standard terminology’. Second, the LIA in Fig. 15.10 produces the signal 
magnitude only, but since we have access to both the I and Q parts, we can easily 
also produce the phase angle: 
phi equals  ta
ngent Superscript negative 1 Baseline upper Q divided by upper I
Some LIAs indeed do that and since they produce both the magnitude and the 
phase angle, they are sometimes referred to as ‘vector voltage meters’. 
Third, we can implement the ‘I’ and ‘Q’ parts in the digital (software) phase 
detector too. In 2011, Li et al. [2] presented an algorithm that accomplishes that. They 
took samples only π/2 apart (twice as fast as in Fig. 15.3) and showed that the I-part 
corresponds to left parenthesis x left parenthesis 1 right parenthesis minus x left parenthesis 3 right parenthesis right parenthesis divided by 4 and the Q-part corresponds to left parenthesis x left parenthesis 0 right parenthesis minus x left parenthesis 2 right parenthesis right parenthesis divided by 4. 
15.5 
Solved Problems 
Problem 15.1 In a bioscience laboratory, researchers want to measure the resistance 
in a very thin cell tissue. The resistance is very small (mΩ) and since the properties of 
the cell sample are very temperature dependent, it is paramount that the sample is not 
heated during the measurement; the power must be minimized, i.e., the experiment 
conditions don’t allow you to just crank up the current through your sample. It has 
been estimated that the current must not exceed 1 μA. How would you solve this 
problem? 
Solution We measure resistance by sending current through the sample and measure 
the voltage across it. We will excite the sample with a cosine from a waveform 
generator (amplitude 1 V, frequency 217 Hz), and by adding a 1-MΩ series resistor, 
we make sure we don’t violate the 1 μA current restriction. This circuit is connected 
to a lock-in ampliﬁer as illustrated in Fig. 15.11.
In Fig. 15.11, the sample resistance is <<1 MΩ, so we may assume that the current 
in the circuit is 1 μA. The output voltage has been ampliﬁed 200,000 times; hence, 
the voltage across the sample is 0.134 V/200,000 = 0.67 μV. The sample resistance 
is 0.67 μV/1 μA = 0.67 Ω. 
Problem 15.2 In an atomic physics experiment, atoms in a vacuum chamber are 
excited by a continuous wave (CW) laser, and the relaxation light is detected by a

316
15
The Lock-In Ampliﬁer
× 
× 
Fig. 15.11 Cell tissue experiment
photo sensor, see Fig. 15.12. However, due to low signal levels and ambient light, 
they are unable to detect the scattered relaxation light. 
How would you suggest they solve this problem? 
Solution The experiment must be ‘excited’, i.e., we must make sure that the light 
signal we are trying to detect only appears at the photo sensor with a certain frequency; 
a frequency that we control, or at least can measure conﬁdently. To achieve that, we 
‘chopper’ the laser beam. This is ‘standard’ laser accessory; a round plate with holes 
in, rotated by a stepper or DC motor, see Fig. 15.13.
Fig. 15.12 Atomic excitation experiment 

15.5 Solved Problems
317
× 
× 
Fig. 15.13 ‘Excite’ the experiment 
That will ‘excite’ the system. The chopper system may provide a ‘sync’ signal, 
but if it doesn’t, we use a glass plate to deﬂect a small fraction of the laser beam to 
another photo sensor; that photo sensor provides the reference signal to our LIA. 
The entire solution is illustrated in Fig. 15.13. Even if this excites the detection 
signal to a unique frequency, it is usually a good idea to reduce the ambient light in 
the room anyway. Single photon detections have been reported with this technique 
[3]. 
For an introductory laboratory exercise, I recommend a paper by Libbrecht et al. 
[4].

318
15
The Lock-In Ampliﬁer
References 
1. Momo, F., et al. 1981. Microcomputer based phase sensitive detector. Journal of Physics E: 
Scientiﬁc Instruments 14 (11): 1253. 
2. Li, G., et al. 2011. A novel algorithm combining oversampling and digital lock-in ampliﬁer of 
high speed and precision. Review of Scientiﬁc Instruments 82 (9). 
3. Wang, X., et al. 2012. Detection efﬁciency enhancement of single-photon detector at 1.55-μm 
by using of single photons lock-in and optimal threshold. Optics & Laser Technology 44 (6): 
1773–1775. 
4. Libbrecht, K., E. Black, and C. Hirata. 2003. A basic lock-in ampliﬁer experiment for the 
undergraduate laboratory. American Journal of Physics 71 (11): 1208–1213.

Chapter 16 
Correlation 
Abstract By ‘correlation’, this book primarily refers to temporal correlation. This 
chapter deﬁnes the auto- and cross-correlation functions and presents their applica-
tions in signal processing. The cross-correlation function is compared to the convo-
lution operator and from this a matched ﬁlter can be designed. Both analog and 
discrete-time correlation is treated, and computer implementations of correlation 
algorithms (such as ‘circular’ correlation) are discussed. 
16.1 
Introduction 
In this context, ‘correlation’ refers to ‘time-correlation’ (or ‘temporal’ correlation). 
The (time) correlation function of two, time functions x(t) and y(t) is  
upper R S
ub
s
cri
pt x y Ba seline 
left parenthesis t right parenthesis equals integral Subscript negative normal infinity Superscript plus normal infinity Baseline x left parenthesis tau right parenthesis y left parenthesis t plus tau right parenthesis d tau
Does this expression look familiar? If we compare Eq. (16.1) with the convolution 
expression Eq. (9.27), we can see that they are identical, except that we don’t time-
reverse the second function. Hence, we can treat correlation just like convolution, 
except for the time-reversion (which for most students is easier to comprehend, 
conceptually). 
There are two cases of Eq. (16.1); when x(t) = y(t) and when x(t) /= y(t). The 
former case is called ‘auto-correlation’ (‘correlate with yourself’) and the second 
case is called cross-correlation (‘correlate with someone else’). Both are important 
in physics, and they are used in quite different applications. Auto-correlation is 
primarily used to ﬁnd a periodic signal in stochastic noise and cross-correlation is 
used to ﬁnd a ‘known’ signal in a lot of noise (such as a radar echo, for example). 
The close relationship with the convolution integral is also very important, and 
we will discuss this in detail in Sect. 16.2.1 (‘matched ﬁlters’). We will also present 
the discrete-time correlation functions and some practical computational problems 
when it comes to correlation.
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_16 
319

320
16
Correlation
But ﬁrst, we need some correlation theory, and we will start with cross-correlation. 
16.2 
Cross-Correlation 
To illustrate the cross-correlation process (Eq. (16.1)), we will use the same signals 
that we used when we illustrated convolution in Sect. 9.8.1. First, we look at the 
signal y(τ ) = 2τ – 1. This signal is illustrated in Fig. 16.1, and Fig. 16.2 illustrates 
y(t + τ ) for different times t. 
Comparing with Figs. 9.38 and 9.39, we can see that y(t + τ ) is ﬁrst, not time-
reversed and second, when t goes from −∞ to +∞, y(t + τ ) slides from right to left 
on the τ axis (the opposite direction compared to convolution). 
Example 16.1 Figure 16.3 illustrates x(t) and Fig. 16.4 illustrates y(t). Find the 
cross-correlation between x(t) and y(t). (Compare the result with Example 9.5).
Solution Figure 16.5 illustrates how y(t + τ ) moves along the τ axis relative x(τ ). 
We can see that there is no overlap between the two signals for times t < 0 and t > 3.  
Figure 16.6 illustrates the signals for 0 < t < 1. For this time interval, Eq. (16.1) is  
StartLayo
u
t
 1st
 Row 1st Column
 upper R Subscript x y Baseline left parenthesis t right parenthesis 2nd Column equals integral Subscript 1 minus t Superscript 1 Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared minus tau right bracket Subscript 1 minus t Superscript 1 Baseline 2nd Row 1st Column Blank 2nd Column equals one half minus 1 minus one half left parenthesis 1 minus tau right parenthesis squared plus left parenthesis 1 minus tau right parenthesis equals midline horizontal ellipsis equals ModifyingBelow minus one half tau squared With quotation dash EndLayout
StartL ayo
ut 
1st 
Row 1st Column upper R Subscript x y Baseline left parenthesis t right parenthesis 2nd Column equals integral Subscript 1 minus t Superscript 1 Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared minus tau right bracket Subscript 1 minus t Superscript 1 Baseline 2nd Row 1st Column Blank 2nd Column equals one half minus 1 minus one half left parenthesis 1 minus tau right parenthesis squared plus left parenthesis 1 minus tau right parenthesis equals midline horizontal ellipsis equals ModifyingBelow minus one half tau squared With quotation dash EndLayout
St artL ayout 1st Row 1st Column upper R Subscript x y Baseline left parenthesis t right parenthesis 2nd Column equals integral Subscript 1 minus t Superscript 1 Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared minus tau right bracket Subscript 1 minus t Superscript 1 Baseline 2nd Row 1st Column Blank 2nd Column equals one half minus 1 minus one half left parenthesis 1 minus tau right parenthesis squared plus left parenthesis 1 minus tau right parenthesis equals midline horizontal ellipsis equals ModifyingBelow minus one half tau squared With quotation dash EndLayout
Start Layout 1st R ow 1st Co l u mn  u pper R Subscript x y Baseline left parenthesis t right parenthesis 2nd Column equals integral Subscript 1 minus t Superscript 1 Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared minus tau right bracket Subscript 1 minus t Superscript 1 Baseline 2nd Row 1st Column Blank 2nd Column equals one half minus 1 minus one half left parenthesis 1 minus tau right parenthesis squared plus left parenthesis 1 minus tau right parenthesis equals midline horizontal ellipsis equals ModifyingBelow minus one half tau squared With quotation dash EndLayout
StartLayout 1st Row 1st Column upper R Subscript x y Baseline left parenthesis t right parenthesis 2nd Column equals integral Subscript 1 minus t Superscript 1 Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared minus tau right bracket Subscript 1 minus t Superscript 1 Baseline 2nd Row 1st Column Blank 2nd Column equals one half minus 1 minus one half left parenthesis 1 minus tau right parenthesis squared plus left parenthesis 1 minus tau right parenthesis equals midline horizontal ellipsis equals ModifyingBelow minus one half tau squared With quotation dash EndLayout
Figure 16.17 illustrates the two signals for 1 < t < 2. Equation (16.1) is now:
Fig. 16.1 y(τ ) = 2τ – 1

16.2 Cross-Correlation
321
Fig. 16.2 y(t + τ ) for  t = +  
3, 0 and −3
Fig. 16.3 x(t) 
Fig. 16.4 y(t)

322
16
Correlation
Fig. 16.5 x(t) and  y(t + τ ) for some t values 
Fig. 16.6 x(t) and  y(t + τ ) for some 0 < t < 1.  
Fig. 16.7 x(t) and  y(t + τ ) for some 1 < t < 2

16.2 Cross-Correlation
323
i
n
tegr
al Subscript 1 m
inu
s
 t
 Superscript 0 
Baseline left parenthesis tau plus 1 right parenthesis dot 1 d tau plus integral Subscript 0 Superscript 2 minus t Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared plus tau right bracket Subscript 1 minus t Superscript 0 Baseline plus left bracket one half tau squared minus tau right bracket Subscript 0 Superscript 2 minus t
integr al 
Sub
scri
p
t 1 minus t Superscript 0 Baseline left parenthesis tau plus 1 right parenthesis dot 1 d tau plus integral Subscript 0 Superscript 2 minus t Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared plus tau right bracket Subscript 1 minus t Superscript 0 Baseline plus left bracket one half tau squared minus tau right bracket Subscript 0 Superscript 2 minus t
integr al 
Subsc
ript 1 minus t Superscript 0 Baseline left parenthesis tau plus 1 right parenthesis dot 1 d tau plus integral Subscript 0 Superscript 2 minus t Baseline left parenthesis tau minus 1 right parenthesis dot 1 d tau equals left bracket one half tau squared plus tau right bracket Subscript 1 minus t Superscript 0 Baseline plus left bracket one half tau squared minus tau right bracket Subscript 0 Superscript 2 minus t
equa l
s 0 minus left parenthesis one half left parenthesis 1 minus t right parenthesis squared plus 1 minus t right parenthesis plus one half left parenthesis 2 minus t right parenthesis squared minus 2 plus t equals midline horizontal ellipsis equals ModifyingBelow t minus 1.5 With quotation dash
equal s 0 mi nus lef
t
 parenthesis one half left parenthesis 1 minus t right parenthesis squared plus 1 minus t right parenthesis plus one half left parenthesis 2 minus t right parenthesis squared minus 2 plus t equals midline horizontal ellipsis equals ModifyingBelow t minus 1.5 With quotation dash
equal s 0 mi nus left  pa r e nt hes is one half left parenthesis 1 minus t right parenthesis squared plus 1 minus t right parenthesis plus one half left parenthesis 2 minus t right parenthesis squared minus 2 plus t equals midline horizontal ellipsis equals ModifyingBelow t minus 1.5 With quotation dash
Finally, Fig. 16.8 illustrates the signals for 2 < t < 3. The cross-correlation is 
Sta
r
tLa
yout 1st Ro
w 1st Column integral Subscript negative 1 Superscript 2 minus t Baseline left parenthesis tau plus 1 right parenthesis d tau 2nd Column equals left bracket one half tau squared plus tau right bracket Subscript negative 1 Superscript 2 minus t Baseline equals one half left parenthesis 2 minus t right parenthesis squared plus 2 minus t minus left parenthesis one half minus 1 right parenthesis 2nd Row 1st Column Blank 2nd Column equals midline horizontal ellipsis equals ModifyingBelow one half t squared minus 3 t plus 4.5 With quotation dash EndLayout
StartL ayo
ut 1s
t R
ow 1st Column integral Subscript negative 1 Superscript 2 minus t Baseline left parenthesis tau plus 1 right parenthesis d tau 2nd Column equals left bracket one half tau squared plus tau right bracket Subscript negative 1 Superscript 2 minus t Baseline equals one half left parenthesis 2 minus t right parenthesis squared plus 2 minus t minus left parenthesis one half minus 1 right parenthesis 2nd Row 1st Column Blank 2nd Column equals midline horizontal ellipsis equals ModifyingBelow one half t squared minus 3 t plus 4.5 With quotation dash EndLayout
Start Layout  1st  Row  
1st Column integral Subscript negative 1 Superscript 2 minus t Baseline left parenthesis tau plus 1 right parenthesis d tau 2nd Column equals left bracket one half tau squared plus tau right bracket Subscript negative 1 Superscript 2 minus t Baseline equals one half left parenthesis 2 minus t right parenthesis squared plus 2 minus t minus left parenthesis one half minus 1 right parenthesis 2nd Row 1st Column Blank 2nd Column equals midline horizontal ellipsis equals ModifyingBelow one half t squared minus 3 t plus 4.5 With quotation dash EndLayout
St art
L
a yo u t  1 st Row 1st Column integral Subscript negative 1 Superscript 2 minus t Baseline left parenthesis tau plus 1 right parenthesis d tau 2nd Column equals left bracket one half tau squared plus tau right bracket Subscript negative 1 Superscript 2 minus t Baseline equals one half left parenthesis 2 minus t right parenthesis squared plus 2 minus t minus left parenthesis one half minus 1 right parenthesis 2nd Row 1st Column Blank 2nd Column equals midline horizontal ellipsis equals ModifyingBelow one half t squared minus 3 t plus 4.5 With quotation dash EndLayout
St art Layou t 1st Row 1st Column integral Subscript negative 1 Superscript 2 minus t Baseline left parenthesis tau plus 1 right parenthesis d tau 2nd Column equals left bracket one half tau squared plus tau right bracket Subscript negative 1 Superscript 2 minus t Baseline equals one half left parenthesis 2 minus t right parenthesis squared plus 2 minus t minus left parenthesis one half minus 1 right parenthesis 2nd Row 1st Column Blank 2nd Column equals midline horizontal ellipsis equals ModifyingBelow one half t squared minus 3 t plus 4.5 With quotation dash EndLayout
The resulting cross-correlation function is plotted in Fig. 16.9. 
Cross-correlation has the following properties: First, it is commutative, i.e., Rxy(t) 
= Ryx(t). Second, if x and y correlate to Rxy and x and z correlate to Rxz, then x and
Fig. 16.8 x(t) and  y(t + τ ) for some 2 < t < 3  
Fig. 16.9 The cross-correlation function 

324
16
Correlation
(y + z) correlate to Rxy + Rxz. Also, if we compare Fig. 16.9 with Fig. 9.49, we  
can conﬁrm that cross-correlation corresponds to convolution with a time-reversed 
impulse response. 
So, what are the applications of cross-correlation? To see that, let’s ﬁrst cross-
correlate white noise (x(t), Fig. 16.10) with the symmetric, bipolar square signal in 
Fig. 16.11. 
In Fig. 16.12, we have plotted x(t) and y(t + τ ) for some different times t. If  
we multiply x(t) and y(t + τ ), the resulting ‘area’ will be ≈ 0 for any time t; the  
cross-correlation of x(t) and y(t + τ ) is  ≈ 0 everywhere.
In Fig. 16.13, y(t) is a ‘small’, delayed copy of x(t). If we cross-correlate x(t) 
and y(t) (let  y(t) ‘slide’ left), Rxy(t) will be zero until they start to overlap (for t = 
t0 – 2).  Rxy(t) will have a maximum for t = t0 and then it will decrease to 0 again. 
Figure 16.14 illustrates Rxy(t).
Hence, the ‘peak’ in the cross-correlation function indicates the position of the 
‘small copy’ of x(t). This is how radar and sonar systems work. They emit a known 
‘signature’ chirp (x(t)), and they cross-correlate it with the echo detector signal and 
the ‘peak’ will correspond to the time it took for the chirp to travel back and forth to 
the ‘target’.
Fig. 16.10 White noise 
Fig. 16.11 Symmetric and bipolar 

16.2 Cross-Correlation
325
Fig. 16.12 Rxy(t) ≈ 0 for  all  t
Fig. 16.13 y(t) is a small delayed ‘copy’ of x(t) 
Fig. 16.14 The cross-correlation function
Figure 16.15 illustrates a radar chirp and an ‘echo’ and in Fig. 16.16 you can 
see the detector signal. The echo signal is not visible in the detector signal, but we 
have plotted it separately to indicate where it is. In Fig. 16.17, we have plotted the 
cross-correlation between the detector signal in Fig. 16.16 and the chirp signal in 
Fig. 16.15. From the  Rxy peak in Fig. 16.17, we can easily determine where the echo 
is in Fig. 16.16.
We conclude that cross-correlation is used to ﬁnd ‘known’ signals buried in 
random noise. NB! The cross-correlation technique is extremely selective and in 
radar applications, the echo signal in Fig. 16.16 may be frequency-shifted due 
to the Doppler effect and that has a severe impact on the detectability. For that 
reason, radar detection is complemented with statistical hypothesis testing (called 
‘Neyman-Pearson’ detection).

326
16
Correlation
Fig. 16.15 A radar chirp and an ‘echo’ 
Fig. 16.16 Can you see the echo signal in the noise? 
Fig. 16.17 The cross-correlation function
16.2.1 
Implementation: Matched Filters 
Consider the signal x(t). If we cross-correlate it with y(t) we get 
Cross hyphen correl
a
t
ion
 colon in tegral Sub
s
c
rip
t negativ e norma
l infinity Superscript normal infinity Baseline x left parenthesis tau right parenthesis y left parenthesis t plus tau right parenthesis d tau equals integral Subscript negative normal infinity Superscript normal infinity Baseline y left parenthesis tau right parenthesis x left parenthesis t plus tau right parenthesis d tau

16.3 Auto-Correlation
327
Fig. 16.18 Convolution versus cross-correlation 
Fig. 16.19 A 
cross-correlator
If we instead ﬁlter the signal y(t) in a ﬁlter with impulse response x(t) we get 
Convolution c
o
l
on 
integral Subscript 
n
e
gat
ive norma l infin
ity Superscript normal infinity Baseline x left parenthesis tau right parenthesis y left parenthesis t minus tau right parenthesis d tau equals integral Subscript negative normal infinity Superscript normal infinity Baseline y left parenthesis tau right parenthesis x left parenthesis t minus tau right parenthesis d tau
In the cross-correlation case, x(t + τ ) slides from right to left when t increases, 
and in the convolution case, the time-reversed signal slides from left to right, see 
Fig. 16.18. 
That means that we can implement a cross-correlator in a ﬁlter by designing the 
ﬁlter such that its impulse response h(t) = x(−t). This is called a ‘matched’ ﬁlter, 
see Fig. 16.19. 
16.3 
Auto-Correlation 
The auto-correlation function (ACF) is 
upper R Su
b
s
cri
pt x x Ba seline 
left parenthesis t right parenthesis equals integral Subscript negative normal infinity Superscript normal infinity Baseline x left parenthesis tau right parenthesis x left parenthesis t plus tau right parenthesis d tau
In auto-correlation, a time-shifted copy of the signal ‘slides over itself’, see 
Fig. 16.20. An inherent property of the ACF is that it is always symmetric around t 
= 0, i.e., Rxx(t) = Rxx(−t).

328
16
Correlation
Fig. 16.20 A copy of the signal ‘slides over itself’ 
Example 16.2 Plot the ACF of the signal in Fig. 16.21. 
Solution In auto-correlation, it is usually easier to ﬁnd the integration limits by 
starting from x(0 + τ ) and then ‘slide left’ (in the positive t direction). Because of 
the inherent symmetric property of the ACF, we only need to ﬁnd Rxx(t) for positive 
times t. In Fig.  16.22, we can see that for 0 < t < 2, we must integrate between τ = 
−1 and 1 – t. 
upper R Su
bsc
r
ipt
 x  x Baseline left
 pa rent hesi s t righ t parenthesis equals integral Subscript negative 1 Superscript 1 minus t Baseline 1 dot 1 d tau equals left bracket tau right bracket Subscript negative 1 Superscript 1 minus t Baseline equals 1 minus t plus 1 equals ModifyingBelow 2 minus t With quotation dash
The ACF for the time interval − 2 <  t < 0 is then 2 + t. Figure 16.23 illustrates 
the ACF.
Fig. 16.21 Auto-correlate a 
square pulse 
Fig. 16.22 We only need to 
ﬁnd the ACF for positive 
times t 

16.3 Auto-Correlation
329
Fig. 16.23 The ACF 
From Example 16.2, we can draw another conclusion about the ACF; it will always 
have a maximum for t = 0. 
Example 16.3 Find the ACF of a sine function, x(t) = sint. 
Solution For a periodic signal, we only need to integrate over one period, and the 
auto-correlation expression should also be divided by the period T: 
StartLayou t 1st Row 1st Column upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over upper T EndFraction integral Subscript 0 Superscript upper T Baseline sine tau times sine left parenthesis t plus tau right parenthesis d tau 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over 2 upper T EndFraction integral Subscript 0 Superscript upper T Baseline left parenthesis ModifyingBelow cosine left parenthesis negative t right parenthesis With bottom brace Underscript equals cosine t UnderUnderscript Independent of tau Endscripts plus ModifyingBelow cosine left parenthesis 2 tau plus t right parenthesis With bottom brace Underscript equals 0 UnderUnderscript Integrated over two periods Endscripts right parenthesis d tau 3rd Row 1st Column upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over 2 upper T EndFraction cosine t integral Subscript 0 Superscript upper T Baseline d tau equals ModifyingBelow one half cosine t With quotation dash EndLayout
St
a
r
tL
ayou t 1st Row 1st Col
um n upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over upper T EndFraction integral Subscript 0 Superscript upper T Baseline sine tau times sine left parenthesis t plus tau right parenthesis d tau 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over 2 upper T EndFraction integral Subscript 0 Superscript upper T Baseline left parenthesis ModifyingBelow cosine left parenthesis negative t right parenthesis With bottom brace Underscript equals cosine t UnderUnderscript Independent of tau Endscripts plus ModifyingBelow cosine left parenthesis 2 tau plus t right parenthesis With bottom brace Underscript equals 0 UnderUnderscript Integrated over two periods Endscripts right parenthesis d tau 3rd Row 1st Column upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over 2 upper T EndFraction cosine t integral Subscript 0 Superscript upper T Baseline d tau equals ModifyingBelow one half cosine t With quotation dash EndLayout
Sta
r
t
La
yo
ut 1s t Row 1
st Column upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over upper T EndFraction integral Subscript 0 Superscript upper T Baseline sine tau times sine left parenthesis t plus tau right parenthesis d tau 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over 2 upper T EndFraction integral Subscript 0 Superscript upper T Baseline left parenthesis ModifyingBelow cosine left parenthesis negative t right parenthesis With bottom brace Underscript equals cosine t UnderUnderscript Independent of tau Endscripts plus ModifyingBelow cosine left parenthesis 2 tau plus t right parenthesis With bottom brace Underscript equals 0 UnderUnderscript Integrated over two periods Endscripts right parenthesis d tau 3rd Row 1st Column upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over 2 upper T EndFraction cosine t integral Subscript 0 Superscript upper T Baseline d tau equals ModifyingBelow one half cosine t With quotation dash EndLayout StartLayout 1st Row 1st Column upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over upper T EndFraction integral Subscript 0 Superscript upper T Baseline sine tau times sine left parenthesis t plus tau right parenthesis d tau 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over 2 upper T EndFraction integral Subscript 0 Superscript upper T Baseline left parenthesis ModifyingBelow cosine left parenthesis negative t right parenthesis With bottom brace Underscript equals cosine t UnderUnderscript Independent of tau Endscripts plus ModifyingBelow cosine left parenthesis 2 tau plus t right parenthesis With bottom brace Underscript equals 0 UnderUnderscript Integrated over two periods Endscripts right parenthesis d tau 3rd Row 1st Column upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over 2 upper T EndFraction cosine t integral Subscript 0 Superscript upper T Baseline d tau equals ModifyingBelow one half cosine t With quotation dash EndLayout S
tartL ay
out 1st Row 1st  C
o
lumn upper 
R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over upper T EndFraction integral Subscript 0 Superscript upper T Baseline sine tau times sine left parenthesis t plus tau right parenthesis d tau 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over 2 upper T EndFraction integral Subscript 0 Superscript upper T Baseline left parenthesis ModifyingBelow cosine left parenthesis negative t right parenthesis With bottom brace Underscript equals cosine t UnderUnderscript Independent of tau Endscripts plus ModifyingBelow cosine left parenthesis 2 tau plus t right parenthesis With bottom brace Underscript equals 0 UnderUnderscript Integrated over two periods Endscripts right parenthesis d tau 3rd Row 1st Column upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over 2 upper T EndFraction cosine t integral Subscript 0 Superscript upper T Baseline d tau equals ModifyingBelow one half cosine t With quotation dash EndLayout
StartLayout 1st Row 1st Column upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over upper T EndFraction integral Subscript 0 Superscript upper T Baseline sine tau times sine left parenthesis t plus tau right parenthesis d tau 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over 2 upper T EndFraction integral Subscript 0 Superscript upper T Baseline left parenthesis ModifyingBelow cosine left parenthesis negative t right parenthesis With bottom brace Underscript equals cosine t UnderUnderscript Independent of tau Endscripts plus ModifyingBelow cosine left parenthesis 2 tau plus t right parenthesis With bottom brace Underscript equals 0 UnderUnderscript Integrated over two periods Endscripts right parenthesis d tau 3rd Row 1st Column upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over 2 upper T EndFraction cosine t integral Subscript 0 Superscript upper T Baseline d tau equals ModifyingBelow one half cosine t With quotation dash EndLayout
S
tar
tLayout 1st  Row 1st Column u
pp
er R Su
bscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over upper T EndFraction integral Subscript 0 Superscript upper T Baseline sine tau times sine left parenthesis t plus tau right parenthesis d tau 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over 2 upper T EndFraction integral Subscript 0 Superscript upper T Baseline left parenthesis ModifyingBelow cosine left parenthesis negative t right parenthesis With bottom brace Underscript equals cosine t UnderUnderscript Independent of tau Endscripts plus ModifyingBelow cosine left parenthesis 2 tau plus t right parenthesis With bottom brace Underscript equals 0 UnderUnderscript Integrated over two periods Endscripts right parenthesis d tau 3rd Row 1st Column upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over 2 upper T EndFraction cosine t integral Subscript 0 Superscript upper T Baseline d tau equals ModifyingBelow one half cosine t With quotation dash EndLayout
Sta rtLa yo
u
t
 1
st Row 1st Column upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over upper T EndFraction integral Subscript 0 Superscript upper T Baseline sine tau times sine left parenthesis t plus tau right parenthesis d tau 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over 2 upper T EndFraction integral Subscript 0 Superscript upper T Baseline left parenthesis ModifyingBelow cosine left parenthesis negative t right parenthesis With bottom brace Underscript equals cosine t UnderUnderscript Independent of tau Endscripts plus ModifyingBelow cosine left parenthesis 2 tau plus t right parenthesis With bottom brace Underscript equals 0 UnderUnderscript Integrated over two periods Endscripts right parenthesis d tau 3rd Row 1st Column upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over 2 upper T EndFraction cosine t integral Subscript 0 Superscript upper T Baseline d tau equals ModifyingBelow one half cosine t With quotation dash EndLayout
St artL ayout 1st Row 1st Column upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over upper T EndFraction integral Subscript 0 Superscript upper T Baseline sine tau times sine left parenthesis t plus tau right parenthesis d tau 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over 2 upper T EndFraction integral Subscript 0 Superscript upper T Baseline left parenthesis ModifyingBelow cosine left parenthesis negative t right parenthesis With bottom brace Underscript equals cosine t UnderUnderscript Independent of tau Endscripts plus ModifyingBelow cosine left parenthesis 2 tau plus t right parenthesis With bottom brace Underscript equals 0 UnderUnderscript Integrated over two periods Endscripts right parenthesis d tau 3rd Row 1st Column upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over 2 upper T EndFraction cosine t integral Subscript 0 Superscript upper T Baseline d tau equals ModifyingBelow one half cosine t With quotation dash EndLayout
StartLayout 1st Row 1st Column upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over upper T EndFraction integral Subscript 0 Superscript upper T Baseline sine tau times sine left parenthesis t plus tau right parenthesis d tau 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over 2 upper T EndFraction integral Subscript 0 Superscript upper T Baseline left parenthesis ModifyingBelow cosine left parenthesis negative t right parenthesis With bottom brace Underscript equals cosine t UnderUnderscript Independent of tau Endscripts plus ModifyingBelow cosine left parenthesis 2 tau plus t right parenthesis With bottom brace Underscript equals 0 UnderUnderscript Integrated over two periods Endscripts right parenthesis d tau 3rd Row 1st Column upper R Subscript x x Baseline left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over 2 upper T EndFraction cosine t integral Subscript 0 Superscript upper T Baseline d tau equals ModifyingBelow one half cosine t With quotation dash EndLayout
From Example 16.3, we can draw some more conclusions about the ACF. First, 
if x(t) is periodic, then Rxx(t) has the same period as x(t); the frequency information 
is preserved in the auto-correlation process. Second, we auto-correlated a sine and 
got a cosine. As a matter of fact, we would always get a cosine for any sin(ωt + 
ϕ) function, independent of the phase angle ϕ; the phase information is lost in the 
auto-correlation process. 
So, what are the applications of auto-correlation? To see that, we ﬁrst auto-
correlate white noise. Figure 16.24 illustrates white noise and a time-shifted copy of 
it. Imagine that we multiply the noise signal and the time-shifted copy at each time 
instant. If the time-shift is zero, then we just square the noise signal, and the product 
signal would be all-positive and if we integrated it, we would get a number > 0; this 
number is equal to the variance σ 2 of the noise (the noise power).

330
16
Correlation
Fig. 16.24 White noise (bandwidth-limited) 
Fig. 16.25 Auto-correlation 
of white noise 
However, if the time shift is > 0, then soon the product function between the noise 
and the time-shifted copy will be a random noise signal and integrating it over some 
time interval would just be ≈ 0 everywhere. This is illustrated in Fig. 16.25. 
How fast Rxx goes to zero from t = 0 depends on the noise bandwidth; if the noise 
is not bandlimited, then the ACF is actually a delta function: 
upper R 
Subsc
ri pt y
 
y  Base
line left parenthesis t right parenthesis equals StartLayout Enlarged left brace 1st Row sigma squared t equals 0 2nd Row 0 t not equals 0 EndLayout
i.e., upper R Subscript x x Baseline left parenthesis t right parenthesis equals sigma squared delta left parenthesis t right parenthesis period
Next, suppose that the signal x(t) has the ACF Rxx(t), and that y(t) has the ACF 
Ryy(t). Then the signal x(t) + y(t) has the ACF Rxx(t) + Ryy(t) (provided that the two 
functions are statistically independent). The proof of this relies on statistics and is 
presented in Problem 16.6. 
Now, let’s suppose that we have a periodic signal (sint) with white noise; x(t) = 
(sint + white noise), see Fig. 16.26. The ACF of this signal is the sum of the ACF 
of the sine (= a cosine) and the ACF of the noise (a delta function). The ACF is 
illustrated in Fig. 16.27. Notice in Fig. 16.27 that (a) the noise is concentrated to t = 
0 and (b) the huge improvement of the signal-to-noise ratio.

16.3 Auto-Correlation
331
Fig. 16.26 Sine + white noise 
Fig. 16.27 The ACF 
Improving the signal-to-noise ratio in periodic signals with white noise is the 
obvious application of autocorrelation, but it doesn’t stop there. Auto-correlation is 
used in a huge range of applications, and we will present some of them in the next 
section. 
16.3.1 
Auto-Correlation Applications 
Figure 16.28 illustrates a Photon Correlation Spectroscopy experiment (PCS). Here, 
auto-correlation is used to determine the diffusion coefﬁcient and the size of colloidal 
particles in a solvent. 
If the size of the particles is smaller than the laser wavelength, then Rayleigh 
scattering will occur. If the distance d × sinθ between two adjacent light-scattering 
particles equals a multiple of the laser wavelength (mλ), then there will be construc-
tive interference in the photodetector resulting in a high photodetector current I(t). 
On the other hand, if the distance equals a multiple of λ/2, then there will be destruc-
tive interference resulting in a low photodetector current. Due to Brownian motion 
of the particles, the photodetector signal will vary randomly as the phase shift of 
the light from two adjacent particles will change gradually when the particles move. 
Figure 16.29 illustrates the photodetector signal.

332
16
Correlation
Laser 
Wavelength = λ 
Photo detector 
PD 
I(t)   
Colloidal particles 
in solvent
Distance d 
d sinθ 
θ 
Fig. 16.28 Photo correlation spectroscopy (PCS) (or ‘Dynamic light scattering’, DLS) 
Fig. 16.29 The photodetector signal 
The photodetector signal is random, but not ‘white’ random; there is some corre-
lation between adjacent samples. This is reﬂected in the ACF, which will be an expo-
nentially decaying signal, see Fig. 16.30; the correlation between samples decreases 
with time. From the ACF parameters (time constant, baseline, max value), both 
the diffusion coefﬁcient and the particle size can be derived [1]. For example, this 
technique has been used to study the homogeneity of proteins [2]. 
Fig. 16.30 The ACF

16.4 Discrete-Time Correlation
333
It has also been used to measure particle-ﬂow velocity [3]. When the particles pass 
through a laser beam, the moving particles ‘encode’ an intensity ﬂuctuation in the 
backscattered light and the slope of the ACF is proportional to the particle velocity. 
Spatial autocorrelation has its own applications. For example, it is used in ecology 
to study the synchronous ﬂuctuation of ecological variables over wide geograph-
ical areas (such as birds, butterﬂies, trees, hares…) [4]. It is also used to study the 
ﬂuctuation of socio-economic variables over regional areas [5]. 
In the physics lab though, we mostly use it to detect periodic signals in random 
noise. 
16.4 
Discrete-Time Correlation 
16.4.1 
Cross-Correlation 
The discrete-time expression for cross-correlation is 
upper R 
Sub
script x y 
Baseline left parenthesis n right parenthesis equals sigma summation Underscript i equals negative normal infinity Overscript normal infinity Endscripts x Subscript i Baseline y Subscript n plus i
If we compare this expression with Eq. (10.3) (discrete-time convolution), we can 
see that it is in principle the same thing, except we don’t time-reverse yn. Writing it 
out explicitly we get (assuming all signals = 0 for  n < 0)  
upper R Subscri pt x y Ba seline lef t p a r e nthesis n right parenthesis equals x 0 y Subscript n Baseline plus x 1 y Subscript n plus 1 Baseline plus x 2 y Subscript n plus 2 Baseline plus ellipsis period
Table 16.1 illustrates the case where x = [x0, x1, x2] and y = [y0, y1, y2, y3]. If we 
compare this to Table 10.1, we can see that data is now ‘sliding’ in from the right 
side (and is not time-reversed). 
Example 16.4 Cross-correlate the signals in Figs. 16.31 and 16.32.
Table 16.1 Cross-correlation in discrete time 
Rxy(n)
x0
x1
x2
y 
Rxy(−2) = x2y0
y0
y1 y2 y3 
Rxy(−1) = x1y0 + x2y1
y0
y1
y2 y3 
Rxy(0) = x0y0 + x1y1 + x2y2
y0
y1
y2
y3 
Rxy(1) = x0y1 + x1y2 + x2y3
y1
y2
y3 
Rxy(2) = x0y2 + x1y3
y2
y3 
Rxy(3) = x0y3
y3 

334
16
Correlation
Fig. 16.31 xn 
Fig. 16.32 yn 
Solution We start by delaying the yi signal by ﬁve samples (n = −5). From Fig. 16.33, 
we can see that there is no overlap until n = −4. 
upper R Subscrip t x y Ba seline left parenthesis negative 4 right parenthesis equals x 4 y 0 equals 1 dot 1 equals 1
upper R Subscri pt x y B asel ine left parenthesis negative 3 right parenthesis equals x 3 y 0 plus x 4 y 1 equals 1 plus 1 equals 2
upper R Subscrip t x y B aseline left  par enth esis negative 2 right parenthesis equals x 2 y 0 plus x 3 y 1 plus x 4 y 2 equals 1 plus 1 plus 1 equals 3
upper R Subscri pt x y B aseline  left p aren thes is n egat ive 1 right parenthesis equals x 1 y 0 plus x 2 y 1 plus x 3 y 2 plus x 4 y 3 equals 1 plus 1 plus 1 minus 1 equals 2
upper R Subscri pt x y Baseline  left p arenthes is 0  rig ht p aren thes is equals x 0 y 0 plus x 1 y 1 plus x 2 y 2 plus x 3 y 3 plus x 4 y 4 equals 1 plus 1 plus 1 minus 1 minus 1 equals 1
upper R Subscri pt x y Baseline  left p arenthes is 1  rig ht p aren thes i s equals x 0 y 1 plus x 1 y 2 plus x 2 y 3 plus x 3 y 4 plus x 4 y 5 equals 1 plus 1 minus 1 minus 1 minus 1 equals negative 1
upper R Subscri pt x y Baseline  left p aren thes is 2  rig h t parenthesis equals x 0 y 2 plus x 1 y 3 plus x 2 y 4 plus x 3 y 5 equals 1 minus 1 minus 1 minus 1 equals negative 2
upper R Subscri pt x y Baseline  lef t pa rent h esis 3 right parenthesis equals x 0 y 3 plus x 1 y 4 plus x 2 y 5 equals negative 1 minus 1 minus 1 equals negative 3

16.4 Discrete-Time Correlation
335
Fig. 16.33 No overlap until 
n = −4 
Fig. 16.34 The 
cross-correlation function 
1 
2 
n 
Rxy(n) 
upper R Subscri pt x y B ase line  left parenthesis 4 right parenthesis equals x 0 y 4 plus x 1 y 5 equals negative 1 minus 1 equals negative 2
upper R Subscri p t x y Baseline left parenthesis 5 right parenthesis equals x 0 y 5 equals negative 1
The cross-correlation function is illustrated in Fig. 16.34. 
16.4.2 
Auto-Correlation 
We get the discrete-time auto-correlation expression by just substituting yn+i for xn+i 
in expression (16.17): 
upper R S
ubs
cript x x B
aseline left parenthesis n right parenthesis equals sigma summation Underscript i equals negative normal infinity Overscript normal infinity Endscripts x Subscript i Baseline x Subscript n plus i
We don’t give any examples of discrete-time autocorrelation. It works just like the 
cross-correlation in Eq. (16.17), and it has the same properties as the continuous-time 
ACF; frequency is preserved, but not the phase and it has a maximum for n = 0. 
Instead, we will investigate a ‘computational’ problem concerned with discrete-
time correlation.

336
16
Correlation
16.4.3 
Circular Correlation 
Suppose that we sample a periodic signal like the sinusoidal in Fig. 16.35. 
When we auto-correlate a periodic signal with a period of N samples, we should 
only correlate over one period and the correct correlation expression is 
upper R Su bscript x x Baseline left parenthesis n right parenthesis equals StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 0 Overscript upper N minus 1 Endscripts x Subscript i Baseline x Subscript n plus i
u
pper 
R Su bscript
 x x Baseline left parenthesis n right parenthesis equals StartFraction 1 Over upper N EndFraction sigma summation Underscript i equals 0 Overscript upper N minus 1 Endscripts x Subscript i Baseline x Subscript n plus i
However, we could execute this expression in two different ways. We could do 
it as indicated in Table 16.1, i.e., we just let the ‘copy slide’ by the ‘original’ signal 
and multiply and sum all the overlapping samples. This is illustrated in Figs. 16.36 
and 16.37. 
Fig. 16.35 Sampling a sine 
Fig. 16.36 ‘Common’ correlation 
Fig. 16.37 ‘Common’ correlation

16.4 Discrete-Time Correlation
337
With the correlation technique in Fig. 16.36, samples that are ‘shifted’ out are 
just discarded and the number of overlapping samples decreases gradually and that 
will ‘distort’ the ACF. We can make up for this in two different ways. One simple 
solution would be to ‘re-deﬁne’ N in Eq. (16.19) from representing the signal period 
to representing the number of overlapping samples. Then N would decrease with the 
shift to compensate for the decreasing number of overlapping samples. The downside 
of this solution is that there will be very few overlapping samples at the ‘ends’ and 
that gives us ‘poor statistics’. 
A better way to make up for it is to use ‘circular’ correlation. In circular correlation, 
the sample that is shifted out is not discarded but is instead ‘rotated’ back to the 
beginning of the sample array, see Figs. 16.38 and 16.39. 
Using this technique, we will always have N overlapping samples. Circular corre-
lation was used to produce the ACF in Fig. 16.27. Figure 16.40 illustrates what it 
would have looked like if we had used ‘common’ correlation. 
Fig. 16.38 ‘Circular’ correlation 
Fig. 16.39 ‘Circular’ correlation 
Fig. 16.40 Auto-correlation without ‘circular’ correlation (compare with Fig. 16.27)

338
16
Correlation
Notice in Fig. 16.40 how the amplitude of the sine is decreasing gradually because 
of the decreasing number of samples that we ‘multiply-and-add’. 
In MATLAB, you use the xcorr command for ‘common’ correlation and the 
cxcorr command for circular correlation. (However, you need the Signal Processing 
Toolbox to get access to the cxcorr command.) 
16.5 
Solved Problems 
Problem 16.1 Prove that the lock-in ampliﬁer we introduced in Chap. 15 is just a 
special case of cross-correlation; the lock-in ampliﬁer output = Rxy(0). 
Solution Fig. 16.41 illustrates the lock-in ampliﬁer system. The multiplier obviously 
produces the signal product. All we need to do is to prove that the lowpass ﬁlter 
integrates the product. To prove that we need to look at the lowpass ﬁlter hardware. 
Figure 16.42 illustrates a ﬁrst-order RC lowpass ﬁlter. 
The output voltage b(t) equals the voltage across the capacitor: 
b left par en thesis t right parenthesis equals upper U Subscript c Baseline equals StartFraction upper Q Over upper C EndFraction equals StartFraction 1 Over upper C EndFraction integral Subscript negative normal infinity Superscript t Baseline i left parenthesis tau right parenthesis d tau
b le ft parenthesis t right parenthesis equals upper U Subscript c Baseline equals StartFraction upper Q Over upper C EndFraction equals StartFraction 1 Over upper C EndFraction integral Subscript negative normal infinity Superscript t Baseline i left parenthesis tau right parenthesis d tau
b 
le
ft 
parenthesis t right parenthesis equals upper U Subscript c Baseline equals StartFraction upper Q Over upper C EndFraction equals StartFraction 1 Over upper C EndFraction integral Subscript negative normal infinity Superscript t Baseline i left parenthesis tau right parenthesis d tau
Hence, b(t) is the integral of the current. If  R >> 1/ωC, then almost all of a(t) 
falls over R and then i ≈ a(t)/R. Hence
Fig. 16.41 Lock-in 
ampliﬁer 
×× 
y(t) 
x(t)
LP 
x(t)×y(t)
Fig. 16.42 First-order 
lowpass ﬁlter 
R 
C
b(t)
a(t) 
i 

16.5 Solved Problems
339
b left parenthesis t right parenthesis equals StartFraction 1 Over upper C EndFraction integral Subscript negative normal infinity Superscript t Baseline StartFraction a left parenthesis tau right parenthesis Over upper R EndFraction d tau equals StartFraction 1 Over upper R upper C EndFraction integral Subscript negative normal infinity Superscript t Baseline a left parenthesis tau right parenthesis d tau
b 
le
ft 
parenthesis t right parenthesis equals StartFraction 1 Over upper C EndFraction integral Subscript negative normal infinity Superscript t Baseline StartFraction a left parenthesis tau right parenthesis Over upper R EndFraction d tau equals StartFraction 1 Over upper R upper C EndFraction integral Subscript negative normal infinity Superscript t Baseline a left parenthesis tau right parenthesis d tau
b left parenthesis t right parenthesis equals StartFraction 1 Over upper C EndFraction integral Subscript negative normal infinity Superscript t Baseline StartFraction a left parenthesis tau right parenthesis Over upper R EndFraction d tau equals StartFraction 1 Over upper R upper C EndFraction integral Subscript negative normal infinity Superscript t Baseline a left parenthesis tau right parenthesis d tau
b l
ef
t p
arenthesis t right parenthesis equals StartFraction 1 Over upper C EndFraction integral Subscript negative normal infinity Superscript t Baseline StartFraction a left parenthesis tau right parenthesis Over upper R EndFraction d tau equals StartFraction 1 Over upper R upper C EndFraction integral Subscript negative normal infinity Superscript t Baseline a left parenthesis tau right parenthesis d tau
We can conclude that if R >> 1/ωC, i.e., if RC >> 1/ω, = T/2π (where T is the 
signal period), then the lowpass ﬁlter is indeed integrating the input signal and the 
lock-in ampliﬁer output is 
StartFraction 1 Over upper R upper C EndFraction integral Subscript negative normal infinity Superscript t Baseline x left parenthesis tau right parenthesis y left parenthesis tau right parenthesis d tau equals StartFraction 1 Over upper R upper C EndFraction upper R Subscript x y Baseline left parenthesis 0 right parenthesis
Sta
rt
Fra
ction 1 Over up per R upper C EndFraction integral Subscript negative normal infinity Superscript t Baseline x left parenthesis tau right parenthesis y left parenthesis tau right parenthesis d tau equals StartFraction 1 Over upper R upper C EndFraction upper R Subscript x y Baseline left parenthesis 0 right parenthesis
Sta rtFraction 1 Over upper R upper C EndFraction integral Subscript negative normal infinity Superscript t Baseline x left parenthesis tau right parenthesis y left parenthesis tau right parenthesis d tau equals StartFraction 1 Over upper R upper C EndFraction upper R Subscript x y Baseline left parenthesis 0 right parenthesis
Problem 16.2 Find the auto-correlation function of a square signal (duty cycle 50%). 
Solution Figure 16.43 illustrates a square wave x(τ ) and a shifted copy x(t + τ ) (t > 
0). 
We only need to ﬁnd one period of the ACF; we derive the ACF for −1 <  t < 1.  
Figure 16.43 represents the two signals when 0 < t < 1. In this interval, the ACF is 
upper R Subscript x x Baseline left parenthesis t right parenthesis equals one half integral Subscript 0 Superscript 1 minus t Baseline 1 dot 1 d tau equals ModifyingBelow one half left parenthesis 1 minus tau right parenthesis With quotation dash
up
per
 
R 
Su bscript x x Baseline left parenthesis t right parenthesis equals one half integral Subscript 0 Superscript 1 minus t Baseline 1 dot 1 d tau equals ModifyingBelow one half left parenthesis 1 minus tau right parenthesis With quotation dash
upper  R Subscript x x Baseline left parenthesis t right parenthesis equals one half integral Subscript 0 Superscript 1 minus t Baseline 1 dot 1 d tau equals ModifyingBelow one half left parenthesis 1 minus tau right parenthesis With quotation dash
Figure 16.44 represents the signals when −1 <  t < 0.
The ACF is 
upper R Subscript x x Baseline left parenthesis t right parenthesis equals one half integral Subscript negative t Superscript 1 Baseline 1 dot 1 d tau equals ModifyingBelow one half left parenthesis 1 plus t right parenthesis With quotation dash
up
p
e
r R
 S ubscript x x Baseline left parenthesis t right parenthesis equals one half integral Subscript negative t Superscript 1 Baseline 1 dot 1 d tau equals ModifyingBelow one half left parenthesis 1 plus t right parenthesis With quotation dash
upper  R Subscript x x Baseline left parenthesis t right parenthesis equals one half integral Subscript negative t Superscript 1 Baseline 1 dot 1 d tau equals ModifyingBelow one half left parenthesis 1 plus t right parenthesis With quotation dash
The ACF is plotted in Fig. 16.45.
Problem 16.3 In Example 16.3, we concluded that the frequency information is 
preserved in the auto-correlation and that the phase information is lost. What about 
the amplitude information. Lost or preserved?
Fig. 16.43 The two signals x(τ ) and  x(t + τ ) 

340
16
Correlation
Fig. 16.44 The two signals x(τ ) and  x(t + τ ) for  −1 <  t < 0
Fig. 16.45 The ACF
Solution It is lost (or at least ‘scrambled’). We have seen two examples of this. In 
Example 16.3, the ACF of a sine (amplitude = 1) became a cosine with amplitude 
= 0.5. Also, in Problem 16.2 above, the ACF of a square wave became a sawtooth 
signal. We know from Fourier transform theory that the square and the sawtooth have 
the same frequencies, but their amplitude spectrums are different. 
Problem 16.4 What is the auto-correlation function of the square pulse signal in 
Fig. 16.46? 
Solution This is the same problem as in Example 16.2; the auto-correlation function 
is independent of time delays. Hence, the auto-correlation function of the signal in 
Fig. 16.46 is illustrated in Fig. 16.23. 
Problem 16.5 In Sect. 16.3, we asserted that for the auto-correlation of white noise, 
Rxx(0) = σ 2. Prove that this is true.
Fig. 16.46 Squared pulse 

16.5 Solved Problems
341
Solution To prove that we need some statistical theory. First, the noise signal is 
random, and we need to treat it as a stochastic process, X(t). The auto-correlation 
function of a stochastic process is the expectation value of X(τ )· X(t + τ ). If t = 0, 
then 
upper R Subscript x x Baseli
n
e l
eft parenthesis 0 right parenthesis equals upper E left brace upper X left parenthesis t right parenthesis dot upper X left parenthesis t right parenthesis right brace equals upper E left parenthesis upper X squared right parenthesis equals sigma squared
from the deﬁnition of variance and from the fact that the expectation value of white 
noise is = 0. (Also, assuming that we have a stationary process.) 
Problem 16.6 Prove that if the signal x(t) has the auto-correlation function Rxx(t), 
and if y(t) has the auto-correlation function Ryy(t), then signal x(t) + y(t) has the 
auto-correlation function Rxx(t) + Ryy(t). 
Solution We can prove it if we treat the two signals as two stochastic processes. The 
auto-correlation function is in general the expectation value of X(τ ) and X(t + τ ). 
In our case, we have a sum of functions: 
StartLayout 1st Row 1st Colu mn Blank 2nd  Column
 upper E left p arenthesis left pa renth
esis upper X  left parenthesis tau ri
ght parenthesis  plus
 upper Y left parenthesis tau right parenthesis right parenthesis dot left parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis t plus tau right parenthesis right parenthesis right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis 3rd Row 1st Column Blank 2nd Column plus upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace 4th Row 1st Column Blank 2nd Column equals ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript x x Baseline left parenthesis t right parenthesis Endscripts plus ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts 5th Row 1st Column Blank 2nd Column plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript y y Baseline left parenthesis t right parenthesis Endscripts 6th Row 1st Column Blank 2nd Column equals upper R Subscript x x Baseline left parenthesis t right parenthesis plus upper R Subscript y y Baseline left parenthesis t right parenthesis EndLayout
StartLayout 1st Row 1st Column Blank 2nd Column upper E left parenthesis left parenthesis upper X left parenthesis tau right parenthesis plus upper Y left parenthesis tau right parenthesis right parenthesis dot left parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis t plus tau right parenthesis right parenthesis right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis 3rd Row 1st Column Blank 2nd Column plus upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace 4th Row 1st Column Blank 2nd Column equals ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript x x Baseline left parenthesis t right parenthesis Endscripts plus ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts 5th Row 1st Column Blank 2nd Column plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript y y Baseline left parenthesis t right parenthesis Endscripts 6th Row 1st Column Blank 2nd Column equals upper R Subscript x x Baseline left parenthesis t right parenthesis plus upper R Subscript y y Baseline left parenthesis t right parenthesis EndLayout
S
tartLayou
t 1st Row 1st C olumn
 Blank 2nd Column upper E left parenthesis left parenthesis upper X left parenthesis tau right parenthesis plus upper Y left parenthesis tau right parenthesis right parenthesis dot left parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis t plus tau right parenthesis right parenthesis right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis 3rd Row 1st Column Blank 2nd Column plus upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace 4th Row 1st Column Blank 2nd Column equals ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript x x Baseline left parenthesis t right parenthesis Endscripts plus ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts 5th Row 1st Column Blank 2nd Column plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript y y Baseline left parenthesis t right parenthesis Endscripts 6th Row 1st Column Blank 2nd Column equals upper R Subscript x x Baseline left parenthesis t right parenthesis plus upper R Subscript y y Baseline left parenthesis t right parenthesis EndLayout
StartLayout 1st Row 1st Column Blank 2nd Column upper E left parenthesis left parenthesis upper X left parenthesis tau right parenthesis plus upper Y left parenthesis tau right parenthesis right parenthesis dot left parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis t plus tau right parenthesis right parenthesis right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis 3rd Row 1st Column Blank 2nd Column plus upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace 4th Row 1st Column Blank 2nd Column equals ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript x x Baseline left parenthesis t right parenthesis Endscripts plus ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts 5th Row 1st Column Blank 2nd Column plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript y y Baseline left parenthesis t right parenthesis Endscripts 6th Row 1st Column Blank 2nd Column equals upper R Subscript x x Baseline left parenthesis t right parenthesis plus upper R Subscript y y Baseline left parenthesis t right parenthesis EndLayout
S
tar tLayout 1st Ro
w 1st Column Bl ank 2
nd Column upper E left parenthesis left parenthesis upper X left parenthesis tau right parenthesis plus upper Y left parenthesis tau right parenthesis right parenthesis dot left parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis t plus tau right parenthesis right parenthesis right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis 3rd Row 1st Column Blank 2nd Column plus upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace 4th Row 1st Column Blank 2nd Column equals ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript x x Baseline left parenthesis t right parenthesis Endscripts plus ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts 5th Row 1st Column Blank 2nd Column plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript y y Baseline left parenthesis t right parenthesis Endscripts 6th Row 1st Column Blank 2nd Column equals upper R Subscript x x Baseline left parenthesis t right parenthesis plus upper R Subscript y y Baseline left parenthesis t right parenthesis EndLayout
StartLayout 1st Row 1st Column Blank 2nd Column upper E left parenthesis left parenthesis upper X left parenthesis tau right parenthesis plus upper Y left parenthesis tau right parenthesis right parenthesis dot left parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis t plus tau right parenthesis right parenthesis right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis 3rd Row 1st Column Blank 2nd Column plus upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace 4th Row 1st Column Blank 2nd Column equals ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript x x Baseline left parenthesis t right parenthesis Endscripts plus ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts 5th Row 1st Column Blank 2nd Column plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript y y Baseline left parenthesis t right parenthesis Endscripts 6th Row 1st Column Blank 2nd Column equals upper R Subscript x x Baseline left parenthesis t right parenthesis plus upper R Subscript y y Baseline left parenthesis t right parenthesis EndLayout
S
tar tLayout 1st Ro
w 1st Column Bl ank 2
nd Column upper E left parenthesis left parenthesis upper X left parenthesis tau right parenthesis plus upper Y left parenthesis tau right parenthesis right parenthesis dot left parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis t plus tau right parenthesis right parenthesis right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis 3rd Row 1st Column Blank 2nd Column plus upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace 4th Row 1st Column Blank 2nd Column equals ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript x x Baseline left parenthesis t right parenthesis Endscripts plus ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts 5th Row 1st Column Blank 2nd Column plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript y y Baseline left parenthesis t right parenthesis Endscripts 6th Row 1st Column Blank 2nd Column equals upper R Subscript x x Baseline left parenthesis t right parenthesis plus upper R Subscript y y Baseline left parenthesis t right parenthesis EndLayout
StartLayout 1st Row 1st Column Blank 2nd Column upper E left parenthesis left parenthesis upper X left parenthesis tau right parenthesis plus upper Y left parenthesis tau right parenthesis right parenthesis dot left parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis t plus tau right parenthesis right parenthesis right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis 3rd Row 1st Column Blank 2nd Column plus upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace 4th Row 1st Column Blank 2nd Column equals ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript x x Baseline left parenthesis t right parenthesis Endscripts plus ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts 5th Row 1st Column Blank 2nd Column plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript y y Baseline left parenthesis t right parenthesis Endscripts 6th Row 1st Column Blank 2nd Column equals upper R Subscript x x Baseline left parenthesis t right parenthesis plus upper R Subscript y y Baseline left parenthesis t right parenthesis EndLayout
S
tartLayou
t 1st Row 1st Column Blank 2nd Column upper E left parenthesis left parenthesis upper X left parenthesis tau right parenthesis plus upper Y left parenthesis tau right parenthesis right parenthesis dot left parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis t plus tau right parenthesis right parenthesis right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis 3rd Row 1st Column Blank 2nd Column plus upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis plus upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace 4th Row 1st Column Blank 2nd Column equals ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript x x Baseline left parenthesis t right parenthesis Endscripts plus ModifyingBelow upper E left brace upper X left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts 5th Row 1st Column Blank 2nd Column plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper X left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals 0 left parenthesis Independent right parenthesis Endscripts plus ModifyingBelow upper E left brace upper Y left parenthesis tau right parenthesis upper Y left parenthesis t plus tau right parenthesis right brace With bottom brace Underscript equals upper R Subscript y y Baseline left parenthesis t right parenthesis Endscripts 6th Row 1st Column Blank 2nd Column equals upper R Subscript x x Baseline left parenthesis t right parenthesis plus upper R Subscript y y Baseline left parenthesis t right parenthesis EndLayout
(Because the correlation between independent processes is 0.) 
Problem 16.7 The ACF Rxx(t) and the power spectrum StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue squared is a ‘Fourier 
transform pair’, i.e., 
i
n
teg
ral Subscript negat ive normal infinity Superscript normal infinity Baseline upper R Subscript x x Baseline left parenthesis t right parenthesis dot e Superscript minus j omega t Baseline d t equals StartAbsoluteValue upper X left parenthesis omega right parenthesis EndAbsoluteValue squared
‘Prove’ that this is true by calculating ﬁrst the Fourier transform of the pulse in 
Fig. 16.21 and then calculating the Fourier transform of its auto-correlation function. 
Solution We already found in example 7.2 that the Fourier transform of a square 
pulse is 
StartAbsol uteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction 2 Over omega EndFraction sine StartFraction omega Over 2 EndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue squared equals StartFraction 4 Over omega squared EndFraction sine squared omega
StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction 2 Over omega EndFraction sine StartFraction omega Over 2 EndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue squared equals StartFraction 4 Over omega squared EndFraction sine squared omega
St artAbsolute Va lue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction 2 Over omega EndFraction sine StartFraction omega Over 2 EndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue squared equals StartFraction 4 Over omega squared EndFraction sine squared omega
Sta rtAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction 2 Over omega EndFraction sine StartFraction omega Over 2 EndFraction right double arrow StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue squared equals StartFraction 4 Over omega squared EndFraction sine squared omega

342
16
Correlation
We also derived the ACF of the square pulse in Problem 16.2. The Fourier 
transform is: 
i
n
teg
ral Subscript ne ga
t
i
ve 
nor mal infinity Sup er
s
c
ri
pt normal infinity Baseline upper R Subscript x x Baseline left parenthesis t right parenthesis e Superscript minus j omega t Baseline d t equals integral Subscript negative 2 Superscript 0 Baseline left parenthesis 2 plus t right parenthesis dot e Superscript minus j omega t Baseline d t plus integral Subscript 0 Superscript 2 Baseline left parenthesis 2 minus t right parenthesis dot e Superscript minus j omega t Baseline d t
equa
l
s
 2 
integral Su
b
s
cri
pt  negative 2  S
u
p
er
sc ript 2 Baseline e Superscript minus j omega t Baseline d t plus integral Subscript negative 2 Superscript 0 Baseline t dot e Superscript minus j omega t Baseline d t minus integral Subscript 0 Superscript 2 Baseline t dot e Superscript minus j omega t Baseline d t
e q uals minus StartFraction 2 Over j omega EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 2 Baseline plus left bracket minus StartFraction t Over j omega EndFraction e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 0 Baseline plus StartFraction 1 Over j omega EndFraction integral Subscript negative 2 Superscript 0 Baseline e Superscript minus j omega t Baseline d t minus left bracket minus StartFraction t Over j omega EndFraction e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 2 Baseline minus StartFraction 1 Over j omega EndFraction integral Subscript 0 Superscript 2 Baseline e Superscript minus j omega t Baseline d t equals
eq
u
als minu
s S t
a
rt Fraction 2 Over j omega EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 2 Baseline plus left bracket minus StartFraction t Over j omega EndFraction e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 0 Baseline plus StartFraction 1 Over j omega EndFraction integral Subscript negative 2 Superscript 0 Baseline e Superscript minus j omega t Baseline d t minus left bracket minus StartFraction t Over j omega EndFraction e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 2 Baseline minus StartFraction 1 Over j omega EndFraction integral Subscript 0 Superscript 2 Baseline e Superscript minus j omega t Baseline d t equals
equals m
inu
s S
ta rtFraction 2 Over j omega EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 2 Baseline plus left bracket minus StartFraction t Over j omega EndFraction e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 0 Baseline plus StartFraction 1 Over j omega EndFraction integral Subscript negative 2 Superscript 0 Baseline e Superscript minus j omega t Baseline d t minus left bracket minus StartFraction t Over j omega EndFraction e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 2 Baseline minus StartFraction 1 Over j omega EndFraction integral Subscript 0 Superscript 2 Baseline e Superscript minus j omega t Baseline d t equals
equ
a
l
s m
inus Star t
F
ra ction 2 Over j omega EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 2 Baseline plus left bracket minus StartFraction t Over j omega EndFraction e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 0 Baseline plus StartFraction 1 Over j omega EndFraction integral Subscript negative 2 Superscript 0 Baseline e Superscript minus j omega t Baseline d t minus left bracket minus StartFraction t Over j omega EndFraction e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 2 Baseline minus StartFraction 1 Over j omega EndFraction integral Subscript 0 Superscript 2 Baseline e Superscript minus j omega t Baseline d t equals
equals m
inu
s 
St artFraction 2 Over j omega EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 2 Baseline plus left bracket minus StartFraction t Over j omega EndFraction e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 0 Baseline plus StartFraction 1 Over j omega EndFraction integral Subscript negative 2 Superscript 0 Baseline e Superscript minus j omega t Baseline d t minus left bracket minus StartFraction t Over j omega EndFraction e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 2 Baseline minus StartFraction 1 Over j omega EndFraction integral Subscript 0 Superscript 2 Baseline e Superscript minus j omega t Baseline d t equals
equ
a
l
s 
minus Sta rtFraction 2 Over j omega EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 2 Baseline plus left bracket minus StartFraction t Over j omega EndFraction e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 0 Baseline plus StartFraction 1 Over j omega EndFraction integral Subscript negative 2 Superscript 0 Baseline e Superscript minus j omega t Baseline d t minus left bracket minus StartFraction t Over j omega EndFraction e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 2 Baseline minus StartFraction 1 Over j omega EndFraction integral Subscript 0 Superscript 2 Baseline e Superscript minus j omega t Baseline d t equals
e q uals minus StartFraction 2 Over j omega EndFraction e Superscript minus j 2 omega t Baseline plus StartFraction 2 Over j omega EndFraction e Superscript j 2 omega t Baseline minus StartFraction 2 Over j omega EndFraction e Superscript j 2 omega t Baseline plus StartFraction 1 Over omega squared EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 0 Baseline plus StartFraction 2 Over j omega EndFraction e Superscript minus j 2 omega t Baseline minus StartFraction 1 Over omega squared EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 2
equals min us  StartFraction 2 Over j omega EndFraction e Superscript minus j 2 omega t Baseline plus StartFraction 2 Over j omega EndFraction e Superscript j 2 omega t Baseline minus StartFraction 2 Over j omega EndFraction e Superscript j 2 omega t Baseline plus StartFraction 1 Over omega squared EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 0 Baseline plus StartFraction 2 Over j omega EndFraction e Superscript minus j 2 omega t Baseline minus StartFraction 1 Over omega squared EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 2
equals mi nu s StartFraction 2 Over j omega EndFraction e Superscript minus j 2 omega t Baseline plus StartFraction 2 Over j omega EndFraction e Superscript j 2 omega t Baseline minus StartFraction 2 Over j omega EndFraction e Superscript j 2 omega t Baseline plus StartFraction 1 Over omega squared EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 0 Baseline plus StartFraction 2 Over j omega EndFraction e Superscript minus j 2 omega t Baseline minus StartFraction 1 Over omega squared EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 2
equals mi nu s StartFraction 2 Over j omega EndFraction e Superscript minus j 2 omega t Baseline plus StartFraction 2 Over j omega EndFraction e Superscript j 2 omega t Baseline minus StartFraction 2 Over j omega EndFraction e Superscript j 2 omega t Baseline plus StartFraction 1 Over omega squared EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 0 Baseline plus StartFraction 2 Over j omega EndFraction e Superscript minus j 2 omega t Baseline minus StartFraction 1 Over omega squared EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 2
eq
u
als minu
s S ta rtFraction 2 Over j omega EndFraction e Superscript minus j 2 omega t Baseline plus StartFraction 2 Over j omega EndFraction e Superscript j 2 omega t Baseline minus StartFraction 2 Over j omega EndFraction e Superscript j 2 omega t Baseline plus StartFraction 1 Over omega squared EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 0 Baseline plus StartFraction 2 Over j omega EndFraction e Superscript minus j 2 omega t Baseline minus StartFraction 1 Over omega squared EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 2
equals min us  StartFraction 2 Over j omega EndFraction e Superscript minus j 2 omega t Baseline plus StartFraction 2 Over j omega EndFraction e Superscript j 2 omega t Baseline minus StartFraction 2 Over j omega EndFraction e Superscript j 2 omega t Baseline plus StartFraction 1 Over omega squared EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 0 Baseline plus StartFraction 2 Over j omega EndFraction e Superscript minus j 2 omega t Baseline minus StartFraction 1 Over omega squared EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 2
eq
u
als minu
s StartFraction 2 Over j omega EndFraction e Superscript minus j 2 omega t Baseline plus StartFraction 2 Over j omega EndFraction e Superscript j 2 omega t Baseline minus StartFraction 2 Over j omega EndFraction e Superscript j 2 omega t Baseline plus StartFraction 1 Over omega squared EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript negative 2 Superscript 0 Baseline plus StartFraction 2 Over j omega EndFraction e Superscript minus j 2 omega t Baseline minus StartFraction 1 Over omega squared EndFraction left bracket e Superscript minus j omega t Baseline right bracket Subscript 0 Superscript 2
eq uals StartFraction 1 Over omega squared EndFraction left parenthesis 1 minus e Superscript j 2 omega t Baseline minus e Superscript minus j 2 omega t Baseline plus 1 right parenthesis equals StartFraction 2 Over omega squared EndFraction left parenthesis 1 minus cosine 2 omega right parenthesis equals StartFraction 4 Over omega squared EndFraction sine squared omega
eq
u
al s StartF raction 1  Ov
e
r omega squared EndFraction left parenthesis 1 minus e Superscript j 2 omega t Baseline minus e Superscript minus j 2 omega t Baseline plus 1 right parenthesis equals StartFraction 2 Over omega squared EndFraction left parenthesis 1 minus cosine 2 omega right parenthesis equals StartFraction 4 Over omega squared EndFraction sine squared omega
equ als  StartFract ion 1 Over omega squared EndFraction left parenthesis 1 minus e Superscript j 2 omega t Baseline minus e Superscript minus j 2 omega t Baseline plus 1 right parenthesis equals StartFraction 2 Over omega squared EndFraction left parenthesis 1 minus cosine 2 omega right parenthesis equals StartFraction 4 Over omega squared EndFraction sine squared omega
equ als StartFraction 1 Over omega squared EndFraction left parenthesis 1 minus e Superscript j 2 omega t Baseline minus e Superscript minus j 2 omega t Baseline plus 1 right parenthesis equals StartFraction 2 Over omega squared EndFraction left parenthesis 1 minus cosine 2 omega right parenthesis equals StartFraction 4 Over omega squared EndFraction sine squared omega
And hence, 
in
teg
ral Subscript n egative normal infinity Superscript normal infinity Baseline upper R Subscript x x Baseline left parenthesis t right parenthesis e Superscript minus j omega t Baseline d t equals StartAbsoluteValue upper H left parenthesis omega right parenthesis EndAbsoluteValue squared. 
Problem 16.8 Find the ACF of x(t) = e−t (t > 0),  x(t) = 0 if  t < 0.  
Solution Figure 16.47 illustrates x(τ ) and x(t + τ ). The ACF is 
upper R Su
b
s
cr
ipt x x Baseline left 
p
a
re
nthesis t  right parenthesis equals integral Subscript 0 Superscript normal infinity Baseline e Superscript negative tau Baseline e Superscript minus left parenthesis t plus tau right parenthesis Baseline d tau equals e Superscript negative t Baseline integral Subscript 0 Superscript normal infinity Baseline e Superscript minus 2 tau Baseline d tau equals minus one half e Superscript negative t Baseline left bracket e Superscript minus 2 tau Baseline right bracket Subscript 0 Superscript normal infinity Baseline equals ModifyingBelow one half e Superscript negative t Baseline With quotation dash
upper 
R Subsc
ri pt x x Baseline left parenthesis t right parenthesis equals integral Subscript 0 Superscript normal infinity Baseline e Superscript negative tau Baseline e Superscript minus left parenthesis t plus tau right parenthesis Baseline d tau equals e Superscript negative t Baseline integral Subscript 0 Superscript normal infinity Baseline e Superscript minus 2 tau Baseline d tau equals minus one half e Superscript negative t Baseline left bracket e Superscript minus 2 tau Baseline right bracket Subscript 0 Superscript normal infinity Baseline equals ModifyingBelow one half e Superscript negative t Baseline With quotation dash
upper R Subscript x x Baseline left parenthesis t right parenthesis equals integral Subscript 0 Superscript normal infinity Baseline e Superscript negative tau Baseline e Superscript minus left parenthesis t plus tau right parenthesis Baseline d tau equals e Superscript negative t Baseline integral Subscript 0 Superscript normal infinity Baseline e Superscript minus 2 tau Baseline d tau equals minus one half e Superscript negative t Baseline left bracket e Superscript minus 2 tau Baseline right bracket Subscript 0 Superscript normal infinity Baseline equals ModifyingBelow one half e Superscript negative t Baseline With quotation dash
Fig. 16.47 Auto-correlating 
an exponential function

16.5 Solved Problems
343
Table 16.2 Sampling the exponential 
n
0
1
2
3
4
5
6
7
8
9
10 
xn
1.000
0.819
0.670
0.549
0.449
0.368
0.301
0.247
0.202
0.165
0.135 
Problem 16.9 Suggest a digital FIR ﬁlter that you could use to ‘detect’ the 
exponential function in problem 16.8 in a noise signal. 
Solution First we need to decide a sampling rate; f S = 5 S/s. That means that the 
samples are taken at times n/5 = n·0.2 s. To ‘detect’ the exponential signal in noise, 
we need to cross-correlate it with an identical exponential function and we implement 
that by designing a ﬁlter with an impulse response that is just the time-reversed copy 
of the signal. In a FIR ﬁlter, the ﬁlter coefﬁcients are also the impulse response 
coefﬁcients. 
First, we sample the exponential: xn = e−n·0.2 (Table 16.2). 
Then we just time-reverse the sample order (and shift to make it causal) to get an 
11-tap FIR ﬁlter that cross-correlates: 
Mod ifyingBelo w y Subscrip t n Baseline  equals 0.13 5  x  S ub script n Ba seline plus 0.165 x Subscript n minus 1 Baseline plus 0.202 x Subscript n minus 2 Baseline plus 0.247 x Subscript n minus 3 Baseline plus midline horizontal ellipsis plus 0.819 x Subscript n minus 9 Baseline plus x Subscript n minus 10 Baseline With quotation dash
Problem 16.10 Figure 16.48 illustrates a seismograph that determines the direction 
to the epicentrum of earthquakes. It cross-correlates the signals from three vibration 
sensors placed as indicated in Fig. 16.48. Chock waves propagate through the earth’s 
crust at a speed of 4000 m/s, and they are assumed to be ‘far away’, i.e., the shock 
waves impact as plane waves on the seismograph.
At an earthquake, the vibration signals from sensors y1 and y2 were cross-
correlated with the x signal, and the cross-correlation functions are illustrated in 
Figs. 16.49 and 16.50. Determine the direction to the epicentrum.
Solution In Rxy1(t), y1 is shifted left and we get a ‘hit’ for t > 0. That means that 
the shock wave hit sensor x before it hit sensor y1; from Rxy1(t) we conclude that 
the shock wave came either from the South-West or from the North-West. When x 
was correlated with y2, we got a hit for t < 0; the shock wave hit sensor y2 before it 
hit sensor x, and that happens if the chock wave comes from either South-West or 
South-East. The conclusion is that the shock wave came from the South-West. Once 
we know the approximate direction, we can calculate the exact direction. 
Figure 16.51 illustrates how plane waves hit the sensors (from South-West). We 
need to ﬁnd the angle θ.
According to Rxy1(t), the time difference in the impact between sensor x and sensor 
y1 is 100 ms; hence the distance L = 4000 × 0.1 = 400 m. We can then ﬁnd the 
angle θ: 
sine theta equals StartFraction 400 Over 500 EndFraction right double arrow theta equals sine Superscript negative 1 Baseline 0.8 equals ModifyingBelow 53 Superscript ring Baseline With quotation dash
sine
 theta equals St artFraction 400 Over 500 EndFraction right double arrow theta equals sine Superscript negative 1 Baseline 0.8 equals ModifyingBelow 53 Superscript ring Baseline With quotation dash

344
16
Correlation
Fig. 16.48 Epicentrum detector
Fig. 16.49 Rxy1(t)

References
345
Fig. 16.50 Rxy2(t)
Fig. 16.51 Finding the impact angle
References 
1. Tscharnuter, W. 2000. Photon correlation spectroscopy in particle sizing. Encyclopedia of 
analytical chemistry, 5469–5485. 
2. Stetefeld, J., S.A. McKenna, and T.R. Patel. 2016. Dynamic light scattering: A practical guide 
and applications in biomedical sciences. Biophysical reviews 8: 409–427. 
3. Wang, Y., and R. Wang. 2010. Autocorrelation optical coherence tomography for mapping 
transverse particle-ﬂow velocity. Optics letters 35 (21): 3538–3540. 
4. Koenig, W.D. 1999. Spatial autocorrelation of ecological phenomena. Trends in Ecology & 
Evolution 14 (1): 22–26. 
5. Getis, A. 2007. Reﬂections on spatial autocorrelation. Regional Science and Urban Economics 
37 (4): 491–496.

Chapter 17 
Curve Fitting 
Abstract One of the most common ‘post-measurement’ data processing operations 
is curve ﬁtting, i.e., ﬁtting samples to a predicted expression. This is usually derived 
by least-square calculations, but this chapter will use the orthogonality principle to 
derive the curve ﬁtting expressions. The advantage of this is that it offers a graphical 
argument for its legitimacy. The pseudo inverse of a non-square matrix is deﬁned 
and some common pitfalls due to error propagation in matrix operations are high-
lighted. Once curve ﬁtting is understood, it can be used to understand how sampling 
instruments, such as digital oscilloscopes, retrieve the original signal from only a few 
samples; in Sect. 17.6 the sampling theorem is revisited, and this section explains 
the difference between linear interpolation and sinx/x interpolation. 
17.1 
Introduction 
In a typical measurement, we observe (measure) some quantity y as some other 
quantity x varies; the objective is to ﬁgure out how y depends on x (y = f (x)). In 
a typical case, we know the ‘general’ dependence of y on x, i.e., we know they are 
related by a ﬁrst-order polynomial or an exponential function, but we don’t know the 
function coefﬁcients. So, we take data, but since data are noise-infected, they will 
not follow the expected function graph exactly. 
In Fig. 17.1, we denote the measured data ym, and the ‘theoretical’ value just y. 
In the general case, if we take r data points, the result of the measurement would be 
an r × 2 table (an r × 2 matrix), see Table 17.1. The deviation of the measured data 
from the theoretical value is called the error, ε: 
eps ilon Subsc
r
ipt n Baseline equals y Subscript n Baseline minus y Subscript n Superscript m
Our objective is to ﬁnd the theoretical function y = f (x) from the data. For this 
introduction, we will assume a straight line: 
f left pare nthes
is x right parenthesis equals c 0 plus c 1 x
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_17 
347

348
17
Curve Fitting
Fig. 17.1 Data won’t ﬁt exactly to the expected line 
Table 17.1 The data table 
x
ym 
x1
y 1
 Superscript m
x2
y 2
 Superscript m
:
: 
xr
y S
ubscript r Superscript m
If there was no noise in the data, we could choose any two data pairs in Table 17.1, 
insert them into Eq. (17.2), and we would have a system of two equations with two 
unknowns, and we could solve for the unknown coefﬁcients c0 and c1. And we would 
be done. But that won’t work because of the noise; we would get a different result 
every time depending on which two pairs we select. 
If we insert all of them into Eq. (17.1), we get the following system of equations: 
St
artLa
yout 
1st  Row 1s t Col
um
n B lank 2n d Col
um
n St
art Layout Enlar
ge
d 
le
ft
 b
ra
ce
 1 st 
Ro w c
 0 p lus 
c 1 x
 1
 e
qu
al
s y
 1 S
up
e
rs
cr
ip
t 
m 
Ba
se
li
ne 
2n
d R
ow
 c 
0 
plu
s 
c 1
 x
 2
 e
qu
al
s 
y 
2 
Supe rscr ipt
 m Baseline 3rd Row vertical ellipsis 4th Row c 0 plus c 1 x Subscript r Baseline equals y Subscript r Superscript m Baseline EndLayout right double arrow Start 4 By 2 Matrix 1st Row 1st Column 1 2nd Column x 1 2nd Row 1st Column 1 2nd Column x 2 3rd Row 1st Column vertical ellipsis 2nd Column vertical ellipsis 4th Row 1st Column 1 2nd Column x Subscript r Baseline EndMatrix dot StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix equals Start 5 By 1 Matrix 1st Row y 1 Superscript m Baseline 2nd Row y 2 Superscript m Baseline 3rd Row y 3 Superscript m Baseline 4th Row y 4 Superscript m Baseline 5th Row y 5 Superscript m Baseline EndMatrix 2nd Row 1st Column Blank 2nd Column right double arrow upper A dot upper C equals upper M EndLayout
First, this is an overdetermined system of equations (because we have more equa-
tions than we need to solve it). Second, it doesn’t have an exact solution (because 
of the noise). The only thing we can do is to try to ﬁnd the best solution. We’ll get 
back to what we mean by ‘best’ in a minute. In Eq. (17.3) we also wrote the equation 
system in matrix form and A is the observation matrix, C is the coefﬁcient matrix 
and M is the measurement data matrix. Our objective is to ﬁnd the C matrix. 
By the ‘best’ solution, we mean the straight line in Fig. 17.1 that will minimize 
the sum of all the squared errors. That makes sense; we must square them before we

17.2 The Orthogonality Principle
349
add them since the errors have different signs. So, we square and add, and then it 
becomes a classical ‘minimum’ problem (take the derivative and set it equal to zero). 
That is how it is derived in undergraduate classes, and it is called ‘linear regression’. 
However, here we will try to go a little ‘deeper’ (to promote profound understanding). 
We concluded above that our overdetermined system of equations doesn’t have 
an exact solution because of the noise. Well, let’s assume that we don’t understand 
that (or don’t care) and try to solve it anyway. Maybe we are lucky… If A had been 
quadratic (r × r), then the solution would have been easy; just invert A and multiply 
both sides from (the left) with A−1 and we get C = A−1 M. But  A isn’t quadratic, it 
is an r × 2 matrix and A−1 does not exist. Well, we can ﬁx that; multiply both sides 
(from the left) by AT (the ‘transpose’ of A, which is a 2 × r matrix): 
uper A Supe
rscript upper T Baseline upper A upper C equals upper A Superscript upper T Baseline upper M
ATA is  a quadratic, 2 × 2 matrix and does have an inverse matrix (if it only has 
‘full rank’, which all ‘normal’ measurements produce). So, if we multiply, from the 
left, with the inverse of ATA we get:
l
eft 
pare nthesi s
 
upe
r A Super scri p
t
 upp
er T Base line u
pper A right parenthesis Superscript negative 1 Baseline upper A Superscript upper T Baseline upper A upper C equals left parenthesis upper A Superscript upper T Baseline upper A right parenthesis Superscript negative 1 Baseline upper A Superscript upper T Baseline upper M right double arrow upper C equals left parenthesis upper A Superscript upper T Baseline upper A right parenthesis Superscript negative 1 Baseline upper A Superscript upper T Baseline upper M equals upper A Superscript number sign Baseline upper M
(A# = (ATA)−1AT is the ‘pseudo inverse’.) We solved it! We found a solution to 
the system of equations with no solution! Well, we said that it doesn’t have an exact 
solution. So, what does the solution in Eq. (17.5) represent? It is the same solution 
we would get if we solved the minimum square problem with the sum of errors. Here, 
will prove it to you in a different way. Equation (17.5) is the ‘best’ solution and we 
will prove it using geometry. 
17.2 
The Orthogonality Principle 
The starting point is that we consider C to be a vector; in this case, it is a vector in 
R2, but in the general case it would be a vector in Rn (when we try to ﬁt data to an n 
− 1 order polynomial). Hence, the C matrix is a column vector (c0,c1) (temporarily 
lying down here). Similarly, A also consists of two (column) vectors (1,1,…,1) and 
(x1,x2,…xr): 
upp er A 
up
pe
r 
C 
eq
ua
ls
 c
 0
 S
ta
rt 4 By
 1
 M
at
ri
x 1
st 
Ro
w 1
 2
nd
 R
ow 1
 3
rd
 R
ow
 co lon 4th
 Ro w 1 xnd
Ma
tri x plus 
c 
1 
St
a
rt 4 By 1 Matrix 1st Row x 1 2nd Row x 2 3rd Row colon 4th Row x Subscript r Baseline EndMatrix equals Start 4 By 1 Matrix 1st Row c 0 plus c 1 x 1 2nd Row c 0 plus c 1 x 2 3rd Row colon 4th Row c 0 plus c 1 x Subscript r EndMatrix
In Eq. (17.6), we multiply the column vector (1,1,…1) by c0 and the vector 
(x1,x2,…xr) is multiplied by c1. This creates a new vector, see Fig. 17.2.

350
17
Curve Fitting
Fig. 17.2 Vectors (1,1,…1) and (x1,x2,…xr) deﬁne a space 
From Fig. 17.2, we can see ﬁrst that the two column vectors (1,1,…1) and 
(x1,x2,…xr) deﬁne a 2D space (they span a 2D space) and second that the matrix 
product AC is a vector (that we call Mo
difyingAbove upper B With right arrow in Fig. 17.2). So, if the matrix product AC 
deﬁnes a vector in the space deﬁned by the vectors (1,1,…1) and (x1,x2,…xr), the 
matrix equation AC = M, can only have a solution if the vector M is in this space! 
But because of the noise in the measurement, the measurement data matrix M is not 
in this space, see Fig. 17.3. 
Since we are limited to the space spanned by vectors (1,1,…1) and (x1,x2,…xr), 
we cannot ﬁnd an exact solution to the AC = M equation. It that case, we instead 
ﬁnd the best solution. The ‘best’ solution is the vector in the space [(1,1,…1),
Fig. 17.3 Our measurement matrix M is not in the 2D space spanned by (1,1,…1) and (x1,x2,…xr) 

17.2 The Orthogonality Principle
351
Fig. 17.4 The projection of 
M is closest to M 
Fig. 17.5 M
o
difyingAbove upper M With caret minus upper M is 
perpendicular to the plane 
(x1,x2,…xr)], that is closest to M; the vector closest to M is the projection of M 
onto the [(1,1,…1),(x1,x2,…xr)] space, see Fig. 17.4. 
So how do we ﬁnd the coefﬁcients c0 and c1 that deﬁne the closest vector M
odifyingAbove upper M With caret
(‘M hat’)? That is easy; that’s when the vector M
o
difyingAbove upper M With caret minus upper M is perpendicular to the plane 
spanned by [(1,1,..1), (x1,x2,…xr)],1 see Fig. 17.5. 
To be perpendicular to the plane spanned by [(1,1,…1), (x1,x2,…xr)], it must be 
perpendicular to both vectors [(1,1,…1) and (x1,x2,…xr)], i.e., the scalar products 
between M
o
difyingAbove upper M With caret minus upper M and both vectors [(1,1,…1) and (x1,x2,…xr)] must be zero: 
St
ar
tL
ay o ut  E nlarg
e
d
 le
f
t br
ace 1st  R o w left 
p
a
ren
t
hesi
s
 1  1 e l lip
sis  1 r i g ht 
par
e
n
the
s
is 
Superscript upper T Baseline left parenthesis ModifyingAbove upper M With caret minus upper M right parenthesis equals 0 2nd Row left parenthesis x 1 x 2 ellipsis x Subscript r Baseline right parenthesis Superscript upper T Baseline left parenthesis ModifyingAbove upper M With caret minus upper M right parenthesis equals 0 EndLayout right double arrow StartBinomialOrMatrix 1 1 ellipsis 1 Choose x 1 x 2 ellipsis x Subscript r Baseline EndBinomialOrMatrix Superscript upper T Baseline left parenthesis ModifyingAbove upper M With caret minus upper M right parenthesis equals 0
up e
rMA  Supersc
ript upper T Baseline left parenthesis ModifyingAbove upper M With egingroup let elax elax endgroup [PleaseinsertPrerenderUnicode{⌢}intopreamble] minus upper M right parenthesis equals 0
But,
1 This is the’orthogonality principle’. 

352
17
Curve Fitting
M
o
dify in
gA
bo
ve
 u
ppe
r M
 W
ith
 c
ar
et
 min
us
 u
pp
er
 M 
eq
ual
s 
St
art
 4
 B
y 
1 
Matr
ix
 1
st
 R
ow y 1 2nd
 Ro w y 2 3
rd
 Ro w colon
 4
th
 R
ow y
 S
ub
sc
ri
pt 
r 
Bas
el
in
e E
nd
Ma
tr
ix
 minus Start 4 By 1 Matrix 1st Row y 1 Superscript m Baseline 2nd Row y 2 Superscript m Baseline 3rd Row colon 4th Row y Subscript r Superscript m Baseline EndMatrix equals Start 4 By 1 Matrix 1st Row c 0 plus c 1 x 1 2nd Row c 0 plus c 1 x 2 3rd Row colon 4th Row c 0 plus c 1 x Subscript r Baseline EndMatrix minus Start 4 By 1 Matrix 1st Row y 1 Superscript m Baseline 2nd Row y 2 Superscript m Baseline 3rd Row colon 4th Row y Subscript r Superscript m Baseline EndMatrix equals
eq
ua
ls
 S
ta
rt  4 
By  1 
Ma
tr ix 
1s
t 
Ro
w
 1 x
 1
 
2n
d 
Ro
w 
1 
x 2
 3
rd 
Ro
w 
col
on
 4
th
 R
ow 1 x Subscript r Baseline EndMatrix StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix minus Start 4 By 1 Matrix 1st Row y 1 Superscript m Baseline 2nd Row y 2 Superscript m Baseline 3rd Row colon 4th Row y Subscript r Superscript m Baseline EndMatrix equals upper A upper C minus upper M
Substituting AC–M for M
o
difyingAbove upper M With caret minus upper M in Eq. (17.8) gives us 
Sta r
tLa yout 1st R ow 1 stMColumn
 Blan k 2 nd Co lu mn u pper A  Supersc ri pt upp
er T Baseline left parenthesis ModifyingAbove upper M With egingroup let elax elax endgroup [PleaseinsertPrerenderUnicode{⌢}intopreamble] minus upper M right parenthesis equals upper A Superscript upper T Baseline left parenthesis upper A upper C minus upper M right parenthesis equals 0 2nd Row 1st Column Blank 2nd Column right double arrow upper A Superscript upper T Baseline upper A upper C equals upper A Superscript upper T Baseline upper M right double arrow upper C equals left parenthesis upper A Superscript upper T Baseline upper A right parenthesis Superscript negative 1 Baseline upper A Superscript upper T Baseline upper M equals upper A Superscript number sign Baseline upper M EndLayout
which proves that the solution we derived in Eq. (17.5) is indeed the best solution. 
We summarize this in the following theorem. 
Theorem (The orthogonality principle.) We ﬁnd the best solution to the overdeter-
mined system of equations AC = M, by setting the error vector M
o
difyingAbove upper M With caret minus upper M perpendicular 
to the columns in A. 
The orthogonality principle holds true for any polynomial order; if we want to ﬁt 
data to an  nth order polynomial, the C matrix is an (n + 1) × 1 matrix and A is r × 
(n + 1). 
It is also common to state the total error, i.e., the sum or all r errors in Eq. (17.1). 
However, since this number increases with the data size, we divide it by the number 
of samples: 
e s quared equals StartFraction 1 Over r EndFraction sigma summation Underscript i Endscripts epsilon Subscript i Superscript 2 Baseline equals StartFraction 1 Over r EndFraction sigma summation Underscript i equals 0 Overscript r minus 1 Endscripts left parenthesis f left parenthesis x right parenthesis minus y Subscript i Superscript m Baseline right parenthesis squared
e
 
sq
uar
ed  equals StartFraction 1 Over r EndFraction sigma summation Underscript i Endscripts epsilon Subscript i Superscript 2 Baseline equals StartFraction 1 Over r EndFraction sigma summation Underscript i equals 0 Overscript r minus 1 Endscripts left parenthesis f left parenthesis x right parenthesis minus y Subscript i Superscript m Baseline right parenthesis squared
e 
squ
a
red
 
eq uals Star
t
Fra
ction 1 Over r EndFraction sigma summation Underscript i Endscripts epsilon Subscript i Superscript 2 Baseline equals StartFraction 1 Over r EndFraction sigma summation Underscript i equals 0 Overscript r minus 1 Endscripts left parenthesis f left parenthesis x right parenthesis minus y Subscript i Superscript m Baseline right parenthesis squared
Equation (17.10) is not just a number that quantiﬁes the quality of the ﬁtting; it 
is the power of the noise that interfered with our samples. (Assuming that we are 
ﬁtting to the right polynomial, see discussion in Problem 17.1.) 
Example 17.1 Table 17.2 represents data samples from a calibration of a temperature 
sensor. Use this data to ﬁnd a ﬁrst-order calibration expression for the sensor. What 
was the noise level in the measurement?
Solution We will ﬁt data to a ﬁrst-order polynomial: up per U  equals c 0 plus c 1 upper T :

17.2 The Orthogonality Principle
353
Table 17.2 Temperature calibration data 
T [°C]
−10
0
10
20
40 
Um [V]
−2.50
−0.09
2.21
4.82
9.31
St
artLayo
ut Enla
rge d left b race 1
st Row c 0  minus
 c 1 10 eq uals ne
gat ive 2.5 0 2nd R
ow c c plu s c 1 0
 e
qu
al
s 
ne
ga
ti
ve
 0 .09 
3
r
d
 Ro w
 c 0
 pl u
s 
c 
1 
10
 e
qu
a
ls 2
.2
1
 4
th
 R
ow
 c
 0
 p
lu
s c 1 
20 equ
als 4
.82 5
th Ro
w 
c 
0 
pl
us
 c
 1
 40 e quals 9.31 EndLayout right double arrow Start 1 By 1 Matrix 1st Row StartLayout 1st Row 1st Column 1 2nd Column negative 10 2nd Row 1st Column 1 2nd Column 0 3rd Row 1st Column 1 2nd Column 10 4th Row 1st Column 1 2nd Column 20 5th Row 1st Column 1 2nd Column 40 EndLayout EndMatrix StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix equals Start 5 By 1 Matrix 1st Row negative 2.50 2nd Row negative 0.09 3rd Row 2.21 4th Row 4.82 5th Row 9.31 EndMatrix right double arrow upper A upper C equals upper M
uper  
A  
S
up
e
rscr ip t u
p
p
e
r T  B
a
se
li
ne
 u
pp
er
 A
 e qual
s
 
l
e ft  
p ar e
n th e
si
s 
St
ar
tL
ay
ou
t
 1
st
 
Row  1st
 Column 1 2nd Column 1 3rd Column 1 2nd Row 1st Column negative 10 2nd Column 0 3rd Column 10 EndLayout StartLayout 1st Row 1st Column 1 2nd Column 1 2nd Row 1st Column 20 2nd Column 40 EndLayout right parenthesis Start 1 By 1 Matrix 1st Row StartLayout 1st Row 1st Column 1 2nd Column negative 10 2nd Row 1st Column 1 2nd Column 0 3rd Row 1st Column 1 2nd Column 10 4th Row 1st Column 1 2nd Column 20 5th Row 1st Column 1 2nd Column 40 EndLayout EndMatrix equals Start 2 By 2 Matrix 1st Row 1st Column 5 2nd Column 60 2nd Row 1st Column 60 2nd Column 2200 EndMatrix
r
i
ght 
doub l
e  arrow left pa
renthes is upp
er A Superscript upper T Baseline upper A right parenthesis Superscript negative 1 Baseline equals Start 2 By 2 Matrix 1st Row 1st Column 0.2973 2nd Column negative 0.081 2nd Row 1st Column negative 0.081 2nd Column 0.0007 EndMatrix
l
eft 
parenth e
s is uppe r A Sup
erscrip t uppe
r T
 
Ba
s
elin e upp
e
r
 
A r ig
h
t parenthesis Superscript negative 1 Baseline upper A Superscript upper T Baseline equals Start 2 By 2 Matrix 1st Row 1st Column 0.2973 2nd Column negative 0.081 2nd Row 1st Column negative 0.081 2nd Column 0.0007 EndMatrix left parenthesis StartLayout 1st Row 1st Column 1 2nd Column 1 3rd Column 1 2nd Row 1st Column negative 10 2nd Column 0 3rd Column 10 EndLayout StartLayout 1st Row 1st Column 1 2nd Column 1 2nd Row 1st Column 20 2nd Column 40 EndLayout right parenthesis equals
e
q uals le ft pare nthesis
 StartLa yout 1s t Row 1s
t Colum n 0.0374
 2nd Co lumn 0
.2973 3rd Column 0.2162 2nd Row 1st Column negative 0.0149 2nd Column 0.0081 3rd Column negative 0.0014 EndLayout StartLayout 1st Row 1st Column 0.1351 2nd Column negative 0.0270 2nd Row 1st Column 0.0054 2nd Column 0.0189 EndLayout right parenthesis
up p
e
r C 
equals le f
t  parenth
esis u
p
per A  Supersc ript uppe r T Baseline upper A right parenthesis Superscript negative 1 Baseline upper A Superscript upper T Baseline upper M equals StartBinomialOrMatrix negative 0.0951 Choose 0.2371 EndBinomialOrMatrix right double arrow ModifyingBelow upper U equals negative 0.0951 plus 0.2371 times upper T With quotation dash
This line is plotted in Fig. 17.6 together with the samples. In Table 17.3, we have  
included the ﬁtted data and the errors. 
Fig. 17.6 The ﬁt and the samples

354
17
Curve Fitting
Table 17.3 Temperature calibration data 
T [°C]
−10
0
10
20
40 
Um [V]
−2.50
−0.09
2.21
4.82
9.31 
U [V]
−2.466
−0.095
2.276
4.647
9.389 
ε [V]
0.0339
−0.005
0.0658
−0.173
0.079 
The average squared error is 
e s quared equals StartFraction 1 Over r EndFraction sigma summation Underscript i equals 0 Overscript 4 Endscripts epsilon Subscript i Superscript 2 Baseline equals 0.0083 upper V squared right double arrow u Subscript rms Superscript noise Baseline equals StartRoot 0.0083 EndRoot equals 0.0913 equals ModifyingBelow 91 mV With quotation dash
e 
s
q
uare
d e
qu als Start Fra ction 1 O
ver r EndFraction sigma summation Underscript i equals 0 Overscript 4 Endscripts epsilon Subscript i Superscript 2 Baseline equals 0.0083 upper V squared right double arrow u Subscript rms Superscript noise Baseline equals StartRoot 0.0083 EndRoot equals 0.0913 equals ModifyingBelow 91 mV With quotation dash
√
e squar ed equals  Star tFraction 1 Over r EndFraction sigma summation Underscript i equals 0 Overscript 4 Endscripts epsilon Subscript i Superscript 2 Baseline equals 0.0083 upper V squared right double arrow u Subscript rms Superscript noise Baseline equals StartRoot 0.0083 EndRoot equals 0.0913 equals ModifyingBelow 91 mV With quotation dash
Example 17.2 A projectile’s position was registered at some regular time intervals, 
see Table 17.4. Use this data to determine the projectile’s initial velocity and its 
acceleration. 
Solution A projectile’s position as a function of initial position s0, initial speed, 
v0 and its acceleration a is given by 
s equal s s 0 plus v 0 t plus one half a t squared equals c 0 plus c 1 t plus c 2 t squared
s equa ls s 0 plus  v 0 t 
plus one half a t squared equals c 0 plus c 1 t plus c 2 t squared
Inserting our measurement data gives us: 
St
artLay
out 1s
t R ow 1st  Column  Blank 
2nd  Colum n Start Layout E
nla rged le ft brace  1st Row
 c 0 plus c 1 0 pl us c 2 0
 sq uared e quals 0. 02 2nd Ro
w 
c 
0 
pl
us
 c
 1
 5
 p
l u
s  c  2  
5 squ ared
 e qua ls 1
8. 21 3rd 
Ro
w 
c 
0 
pl
us
 
c 1 10 plus c 2 10 squared equals 48.95 4th Row StartLayout 1st Row c 0 plus c 1 15 plus c 2 15 squared equals 99.31 2nd Row c 0 plus c 1 20 plus c 2 20 squared equals 158.46 EndLayout EndLayout right double arrow ModifyingBelow Start 5 By 3 Matrix 1st Row 1st Column 1 2nd Column 0 3rd Column 0 2nd Row 1st Column 1 2nd Column 5 3rd Column 25 3rd Row 1st Column 1 2nd Column 10 3rd Column 100 4th Row 1st Column 1 2nd Column 15 3rd Column 225 5th Row 1st Column 1 2nd Column 20 3rd Column 400 EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 0.02 2nd Row 18.21 3rd Row StartLayout 1st Row 48.95 2nd Row 99.31 EndLayout 4th Row 158.46 EndMatrix With bottom brace Underscript upper M Endscripts EndLayout
StartLayout 1st Row 1st Column Blank 2nd Column StartLayout Enlarged left brace 1st Row c 0 plus c 1 0 plus c 2 0 squared equals 0.02 2nd Row c 0 plus c 1 5 plus c 2 5 squared equals 18.21 3rd Row c 0 plus c 1 10 plus c 2 10 squared equals 48.95 4th Row StartLayout 1st Row c 0 plus c 1 15 plus c 2 15 squared equals 99.31 2nd Row c 0 plus c 1 20 plus c 2 20 squared equals 158.46 EndLayout EndLayout right double arrow ModifyingBelow Start 5 By 3 Matrix 1st Row 1st Column 1 2nd Column 0 3rd Column 0 2nd Row 1st Column 1 2nd Column 5 3rd Column 25 3rd Row 1st Column 1 2nd Column 10 3rd Column 100 4th Row 1st Column 1 2nd Column 15 3rd Column 225 5th Row 1st Column 1 2nd Column 20 3rd Column 400 EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 0.02 2nd Row 18.21 3rd Row StartLayout 1st Row 48.95 2nd Row 99.31 EndLayout 4th Row 158.46 EndMatrix With bottom brace Underscript upper M Endscripts EndLayout
S
ta
rt
La
you
t 1
st 
Ro
w
 1st Column Blank 2nd Column StartLayout Enlarged left brace 1st Row c 0 plus c 1 0 plus c 2 0 squared equals 0.02 2nd Row c 0 plus c 1 5 plus c 2 5 squared equals 18.21 3rd Row c 0 plus c 1 10 plus c 2 10 squared equals 48.95 4th Row StartLayout 1st Row c 0 plus c 1 15 plus c 2 15 squared equals 99.31 2nd Row c 0 plus c 1 20 plus c 2 20 squared equals 158.46 EndLayout EndLayout right double arrow ModifyingBelow Start 5 By 3 Matrix 1st Row 1st Column 1 2nd Column 0 3rd Column 0 2nd Row 1st Column 1 2nd Column 5 3rd Column 25 3rd Row 1st Column 1 2nd Column 10 3rd Column 100 4th Row 1st Column 1 2nd Column 15 3rd Column 225 5th Row 1st Column 1 2nd Column 20 3rd Column 400 EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 0.02 2nd Row 18.21 3rd Row StartLayout 1st Row 48.95 2nd Row 99.31 EndLayout 4th Row 158.46 EndMatrix With bottom brace Underscript upper M Endscripts EndLayout StartLayout 1st Row 1st Column Blank 2nd Column StartLayout Enlarged left brace 1st Row c 0 plus c 1 0 plus c 2 0 squared equals 0.02 2nd Row c 0 plus c 1 5 plus c 2 5 squared equals 18.21 3rd Row c 0 plus c 1 10 plus c 2 10 squared equals 48.95 4th Row StartLayout 1st Row c 0 plus c 1 15 plus c 2 15 squared equals 99.31 2nd Row c 0 plus c 1 20 plus c 2 20 squared equals 158.46 EndLayout EndLayout right double arrow ModifyingBelow Start 5 By 3 Matrix 1st Row 1st Column 1 2nd Column 0 3rd Column 0 2nd Row 1st Column 1 2nd Column 5 3rd Column 25 3rd Row 1st Column 1 2nd Column 10 3rd Column 100 4th Row 1st Column 1 2nd Column 15 3rd Column 225 5th Row 1st Column 1 2nd Column 20 3rd Column 400 EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 0.02 2nd Row 18.21 3rd Row StartLayout 1st Row 48.95 2nd Row 99.31 EndLayout 4th Row 158.46 EndMatrix With bottom brace Underscript upper M Endscripts EndLayout S
ta
rt
La
yo
ut
 1
st
 R
ow 1s
t Colu
mn Bla
nk 2nd
 Column
 S
ta
rt
La
yo
u
t Enlarged left brace 1st Row c 0 plus c 1 0 plus c 2 0 squared equals 0.02 2nd Row c 0 plus c 1 5 plus c 2 5 squared equals 18.21 3rd Row c 0 plus c 1 10 plus c 2 10 squared equals 48.95 4th Row StartLayout 1st Row c 0 plus c 1 15 plus c 2 15 squared equals 99.31 2nd Row c 0 plus c 1 20 plus c 2 20 squared equals 158.46 EndLayout EndLayout right double arrow ModifyingBelow Start 5 By 3 Matrix 1st Row 1st Column 1 2nd Column 0 3rd Column 0 2nd Row 1st Column 1 2nd Column 5 3rd Column 25 3rd Row 1st Column 1 2nd Column 10 3rd Column 100 4th Row 1st Column 1 2nd Column 15 3rd Column 225 5th Row 1st Column 1 2nd Column 20 3rd Column 400 EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 0.02 2nd Row 18.21 3rd Row StartLayout 1st Row 48.95 2nd Row 99.31 EndLayout 4th Row 158.46 EndMatrix With bottom brace Underscript upper M Endscripts EndLayout
StartLayout 1st Row 1st Column Blank 2nd Column StartLayout Enlarged left brace 1st Row c 0 plus c 1 0 plus c 2 0 squared equals 0.02 2nd Row c 0 plus c 1 5 plus c 2 5 squared equals 18.21 3rd Row c 0 plus c 1 10 plus c 2 10 squared equals 48.95 4th Row StartLayout 1st Row c 0 plus c 1 15 plus c 2 15 squared equals 99.31 2nd Row c 0 plus c 1 20 plus c 2 20 squared equals 158.46 EndLayout EndLayout right double arrow ModifyingBelow Start 5 By 3 Matrix 1st Row 1st Column 1 2nd Column 0 3rd Column 0 2nd Row 1st Column 1 2nd Column 5 3rd Column 25 3rd Row 1st Column 1 2nd Column 10 3rd Column 100 4th Row 1st Column 1 2nd Column 15 3rd Column 225 5th Row 1st Column 1 2nd Column 20 3rd Column 400 EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 0.02 2nd Row 18.21 3rd Row StartLayout 1st Row 48.95 2nd Row 99.31 EndLayout 4th Row 158.46 EndMatrix With bottom brace Underscript upper M Endscripts EndLayout
S
tartLayout 1st Row 1st Column Blank 2nd Column StartLayout Enlarged left brace 1st Row c 0 plus c 1 0 plus c 2 0 squared equals 0.02 2nd Row c 0 plus c 1 5 plus c 2 5 squared equals 18.21 3rd Row c 0 plus c 1 10 plus c 2 10 squared equals 48.95 4th Row StartLayout 1st Row c 0 plus c 1 15 plus c 2 15 squared equals 99.31 2nd Row c 0 plus c 1 20 plus c 2 20 squared equals 158.46 EndLayout EndLayout right double arrow ModifyingBelow Start 5 By 3 Matrix 1st Row 1st Column 1 2nd Column 0 3rd Column 0 2nd Row 1st Column 1 2nd Column 5 3rd Column 25 3rd Row 1st Column 1 2nd Column 10 3rd Column 100 4th Row 1st Column 1 2nd Column 15 3rd Column 225 5th Row 1st Column 1 2nd Column 20 3rd Column 400 EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 0.02 2nd Row 18.21 3rd Row StartLayout 1st Row 48.95 2nd Row 99.31 EndLayout 4th Row 158.46 EndMatrix With bottom brace Underscript upper M Endscripts EndLayout
l
eft 
parenthes is upper A Superscr
ip
t 
upper T 
Baselin
e upper
 A
 rig
ht
 p
are
nth
esi
s 
Supe
rs
cr
ipt
 ne
gative 1 Baseline upper A Superscript upper T Baseline upper M equals StartSet Using MATLAB EndSet equals Start 3 By 1 Matrix 1st Row negative 0.1003 2nd Row 2.1573 3rd Row 0.2901 EndMatrix equals Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix equals Start 3 By 1 Matrix 1st Row s 0 2nd Row v 0 3rd Row one half a EndMatrix
left
 p
ar
enthesis upper A Superscript upper T Baseline upper A right parenthesis Superscript negative 1 Baseline upper A Superscript upper T Baseline upper M equals StartSet Using MATLAB EndSet equals Start 3 By 1 Matrix 1st Row negative 0.1003 2nd Row 2.1573 3rd Row 0.2901 EndMatrix equals Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix equals Start 3 By 1 Matrix 1st Row s 0 2nd Row v 0 3rd Row one half a EndMatrix
From Eq. (17.12), we can see that the initial velocity was 2.16 m/s, and the 
acceleration was 2·0.2901 = 0.58 m/s2. In Fig.  17.7, we have plotted the data points 
with the ﬁtted line (as a ‘sanity test’).
Table 17.4 Position at different times 
t [s]
0.00
5.00
10.00
15.00
20.00 
sm [m]
0.02
18.21
48.95
99.31
158.46 

17.3 Curve Fitting to Exponential Functions
355
Fig. 17.7 The ﬁt and the data 
17.3 
Curve Fitting to Exponential Functions 
Our ‘pseudo inverse’ formula above only works when data are ﬁtted to a polynomial, 
i.e., when data can be ﬁtted to a linear combination of the coefﬁcients. That is not 
always the case. For example, there are lots of examples of exponential relationships 
in science (nuclear decay, cooling, population growth, etc.). Suppose we have an 
expected relationship as in Eq. (17.13): 
y left par enthesi
s x right parenthesis equals c 0 dot e Superscript c 1 x
Equation (17.9) cannot be applied here, because we don’t have a linear dependence 
on all the coefﬁcients. However, we can turn it into a linear combination of coefﬁcients 
by taking the logarithm of both sides: 
ln y  equals  ln c 0  plu s c 1
 x equals ModifyingAbove c With acute Subscript 0 Baseline plus c 1 x
Hence, we just proceed exactly as above, but when we are done, we transform ´c0 
back to c 0 periodWe illustrate this with an example. 
Example 17.3 In a nuclear experiment, the radioactivity of a sample was measured 
at some times, see Table 17.5. What was the decay constant and the half-life time of 
the sample? 
Solution The radioactivity decays exponentially, so we need to take the logarithm 
of both sides:
Table 17.5 Radioactivity from a sample 
t [s]
10
20
50
100
150
300 
Am [Bq]
90,345
71,491
44,609
25,873
10,077
1329 
lnAm
11.41
11.18
10.71
10.16
9.218
7.192 

356
17
Curve Fitting
Fig. 17.8 The ﬁt and the data points 
up per A equ als up per A 0  e Su persc ript 
minus lamda t Baseline right double arrow ln upper A equals ln upper A 0 minus lamda t equals c 0 minus c 1 t
In Table 17.5, we have already calculated the logarithms: 
St
artLayou
t 1st Ro
w 1 st Co lumn Blank 2n
d C olumn  Star tLayout 
Enl arged  left  brace 1
st Row c  0 min us c 1 d
ot 10 eq uals 1 1.41 2nd
 Ro w c 0  minus  c 1 dot
 2
0 
eq
ua
ls
 1
1.
18
 3
rd
 Ro w
 c 0
 mi n
us  c 1
 d ot 5
0 equa
ls
 1
0.
71
 4
th
 R
ow
 
StartLayout 1st Row c 0 minus c 1 dot 100 equals 10.16 2nd Row c 0 minus c 1 dot 150 equals 9.218 3rd Row c 0 minus c 1 dot 300 equals 7.192 EndLayout EndLayout right double arrow ModifyingBelow Start 6 By 2 Matrix 1st Row 1st Column 1 2nd Column 10 2nd Row 1st Column 1 2nd Column 20 3rd Row 1st Column 1 2nd Column 50 4th Row 1st Column 1 2nd Column 100 5th Row 1st Column 1 2nd Column 150 6th Row 1st Column 1 2nd Column 300 EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow StartBinomialOrMatrix c 0 Choose minus c 1 EndBinomialOrMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 11.41 2nd Row 11.18 3rd Row StartLayout 1st Row 10.71 2nd Row 10.16 3rd Row 9.218 EndLayout 4th Row 7.192 EndMatrix With bottom brace Underscript upper M Endscripts EndLayout
StartLayout 1st Row 1st Column Blank 2nd Column StartLayout Enlarged left brace 1st Row c 0 minus c 1 dot 10 equals 11.41 2nd Row c 0 minus c 1 dot 20 equals 11.18 3rd Row c 0 minus c 1 dot 50 equals 10.71 4th Row StartLayout 1st Row c 0 minus c 1 dot 100 equals 10.16 2nd Row c 0 minus c 1 dot 150 equals 9.218 3rd Row c 0 minus c 1 dot 300 equals 7.192 EndLayout EndLayout right double arrow ModifyingBelow Start 6 By 2 Matrix 1st Row 1st Column 1 2nd Column 10 2nd Row 1st Column 1 2nd Column 20 3rd Row 1st Column 1 2nd Column 50 4th Row 1st Column 1 2nd Column 100 5th Row 1st Column 1 2nd Column 150 6th Row 1st Column 1 2nd Column 300 EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow StartBinomialOrMatrix c 0 Choose minus c 1 EndBinomialOrMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 11.41 2nd Row 11.18 3rd Row StartLayout 1st Row 10.71 2nd Row 10.16 3rd Row 9.218 EndLayout 4th Row 7.192 EndMatrix With bottom brace Underscript upper M Endscripts EndLayout
S
t
a rtL
ayo
u
t 1st Row 1st Column Blank 2nd Column StartLayout Enlarged left brace 1st Row c 0 minus c 1 dot 10 equals 11.41 2nd Row c 0 minus c 1 dot 20 equals 11.18 3rd Row c 0 minus c 1 dot 50 equals 10.71 4th Row StartLayout 1st Row c 0 minus c 1 dot 100 equals 10.16 2nd Row c 0 minus c 1 dot 150 equals 9.218 3rd Row c 0 minus c 1 dot 300 equals 7.192 EndLayout EndLayout right double arrow ModifyingBelow Start 6 By 2 Matrix 1st Row 1st Column 1 2nd Column 10 2nd Row 1st Column 1 2nd Column 20 3rd Row 1st Column 1 2nd Column 50 4th Row 1st Column 1 2nd Column 100 5th Row 1st Column 1 2nd Column 150 6th Row 1st Column 1 2nd Column 300 EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow StartBinomialOrMatrix c 0 Choose minus c 1 EndBinomialOrMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 11.41 2nd Row 11.18 3rd Row StartLayout 1st Row 10.71 2nd Row 10.16 3rd Row 9.218 EndLayout 4th Row 7.192 EndMatrix With bottom brace Underscript upper M Endscripts EndLayout StartLayout 1st Row 1st Column Blank 2nd Column StartLayout Enlarged left brace 1st Row c 0 minus c 1 dot 10 equals 11.41 2nd Row c 0 minus c 1 dot 20 equals 11.18 3rd Row c 0 minus c 1 dot 50 equals 10.71 4th Row StartLayout 1st Row c 0 minus c 1 dot 100 equals 10.16 2nd Row c 0 minus c 1 dot 150 equals 9.218 3rd Row c 0 minus c 1 dot 300 equals 7.192 EndLayout EndLayout right double arrow ModifyingBelow Start 6 By 2 Matrix 1st Row 1st Column 1 2nd Column 10 2nd Row 1st Column 1 2nd Column 20 3rd Row 1st Column 1 2nd Column 50 4th Row 1st Column 1 2nd Column 100 5th Row 1st Column 1 2nd Column 150 6th Row 1st Column 1 2nd Column 300 EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow StartBinomialOrMatrix c 0 Choose minus c 1 EndBinomialOrMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 11.41 2nd Row 11.18 3rd Row StartLayout 1st Row 10.71 2nd Row 10.16 3rd Row 9.218 EndLayout 4th Row 7.192 EndMatrix With bottom brace Underscript upper M Endscripts EndLayout S
ta
rt
La
yo
ut
 1
st
 R
ow
 1
st Col
umn Bl
ank 2n
d Colu
mn Sta
rtLayo
ut
 E
nl
ar
ge
d 
le
f
t brace 1st Row c 0 minus c 1 dot 10 equals 11.41 2nd Row c 0 minus c 1 dot 20 equals 11.18 3rd Row c 0 minus c 1 dot 50 equals 10.71 4th Row StartLayout 1st Row c 0 minus c 1 dot 100 equals 10.16 2nd Row c 0 minus c 1 dot 150 equals 9.218 3rd Row c 0 minus c 1 dot 300 equals 7.192 EndLayout EndLayout right double arrow ModifyingBelow Start 6 By 2 Matrix 1st Row 1st Column 1 2nd Column 10 2nd Row 1st Column 1 2nd Column 20 3rd Row 1st Column 1 2nd Column 50 4th Row 1st Column 1 2nd Column 100 5th Row 1st Column 1 2nd Column 150 6th Row 1st Column 1 2nd Column 300 EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow StartBinomialOrMatrix c 0 Choose minus c 1 EndBinomialOrMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 11.41 2nd Row 11.18 3rd Row StartLayout 1st Row 10.71 2nd Row 10.16 3rd Row 9.218 EndLayout 4th Row 7.192 EndMatrix With bottom brace Underscript upper M Endscripts EndLayout
StartLayout 1st Row 1st Column Blank 2nd Column StartLayout Enlarged left brace 1st Row c 0 minus c 1 dot 10 equals 11.41 2nd Row c 0 minus c 1 dot 20 equals 11.18 3rd Row c 0 minus c 1 dot 50 equals 10.71 4th Row StartLayout 1st Row c 0 minus c 1 dot 100 equals 10.16 2nd Row c 0 minus c 1 dot 150 equals 9.218 3rd Row c 0 minus c 1 dot 300 equals 7.192 EndLayout EndLayout right double arrow ModifyingBelow Start 6 By 2 Matrix 1st Row 1st Column 1 2nd Column 10 2nd Row 1st Column 1 2nd Column 20 3rd Row 1st Column 1 2nd Column 50 4th Row 1st Column 1 2nd Column 100 5th Row 1st Column 1 2nd Column 150 6th Row 1st Column 1 2nd Column 300 EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow StartBinomialOrMatrix c 0 Choose minus c 1 EndBinomialOrMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 11.41 2nd Row 11.18 3rd Row StartLayout 1st Row 10.71 2nd Row 10.16 3rd Row 9.218 EndLayout 4th Row 7.192 EndMatrix With bottom brace Underscript upper M Endscripts EndLayout
S
ta
rtLayout 1st Row 1st Column Blank 2nd Column StartLayout Enlarged left brace 1st Row c 0 minus c 1 dot 10 equals 11.41 2nd Row c 0 minus c 1 dot 20 equals 11.18 3rd Row c 0 minus c 1 dot 50 equals 10.71 4th Row StartLayout 1st Row c 0 minus c 1 dot 100 equals 10.16 2nd Row c 0 minus c 1 dot 150 equals 9.218 3rd Row c 0 minus c 1 dot 300 equals 7.192 EndLayout EndLayout right double arrow ModifyingBelow Start 6 By 2 Matrix 1st Row 1st Column 1 2nd Column 10 2nd Row 1st Column 1 2nd Column 20 3rd Row 1st Column 1 2nd Column 50 4th Row 1st Column 1 2nd Column 100 5th Row 1st Column 1 2nd Column 150 6th Row 1st Column 1 2nd Column 300 EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow StartBinomialOrMatrix c 0 Choose minus c 1 EndBinomialOrMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 11.41 2nd Row 11.18 3rd Row StartLayout 1st Row 10.71 2nd Row 10.16 3rd Row 9.218 EndLayout 4th Row 7.192 EndMatrix With bottom brace Underscript upper M Endscripts EndLayout
up p
e
r C 
equals le f
t  parenth
esis up
p
e
r A Su
pe
r
sc rip t upper T B
aseline upp er A right parenthesis Superscript negative 1 Baseline upper A Superscript upper T Baseline upper M equals StartBinomialOrMatrix 11.4941 Choose negative 0.0144 EndBinomialOrMatrix equals StartBinomialOrMatrix ln upper A 0 Choose negative lamda EndBinomialOrMatrix right double arrow StartLayout 1st Row upper A 0 equals 98135 Bq 2nd Row lamda equals 0.0144 s Superscript negative 1 EndLayout
righ t double  arrow upper A equals 98135 dot e Superscript minus 0.0144 t
In Fig. 17.8 we have plotted the data points and the ﬁt. 
The half-life time is: 0.5 equals e Sup erscrip t  minus 0.0144 t  Base line right double arrow t Subscript 1 divided by 2 Baseline equals minus ln 2 slash minus 0.0144 equals ModifyingBelow 48 seconds With quotation dash. 
The decay constant is λ = −0.0144 s−1. 
17.4 
MATLAB Tips 
If you have access to MATLAB, you don’t need to use Eq. (17.9); the ‘\’ operator in 
MATLAB solves the AC = M equation immediately: C = A\M. 
Example 17.4 Solve the problem in Example 7.1 using the backslash operator in 
MATLAB.

17.5 Matrix Uncertainties and Pitfalls
357
Table 17.6 Temperature calibration data 
T [°C]
−10
0
10
20
40 
Um [V]
−2.50
−0.09
2.21
4.82
9.31 
2 × u
0.25
0.27
0.23
0.24
0.22 
Fig. 17.9 The plot with error bars (95% conﬁdence) 
Solution 
>> A = [1−10;1 0;1 10;1 20;1 40]; 
>> M = [−2.50; −0.09;2.21;4.82;9.31]; 
>> C = A\M. 
C = −0.0951 
0.2371 
In Chap. 14, we learned to calculate the 95% conﬁdence interval for a measurement 
(the ‘uncertainty’) and when we ﬁt data to a polynomial, we should indicate each 
measured value’s (ym) uncertainty as an error bar. MATLAB can handle that for you 
if you just plot the graphs with the errorbar(x,y,e) command. 
Example 17.5 In Table 17.6, we have added the uncertainties for each sample (see 
Sect. 14.2). Plot the ﬁtted line and samples with error bars in the same diagram. 
Solution Using errorbar(T,U,e) in MATLAB, we get the plot in Fig. 17.9. 
17.5 
Matrix Uncertainties and Pitfalls 
17.5.1 
Error Propagation in Matrices 
In the matrix equation AC = M, M represents measured data, and in Chap. 14, we  
learned that all measured data has an uncertainty. The question to ask now is of 
course how the uncertainty in the measured data propagates to an uncertainty in

358
17
Curve Fitting
the coefﬁcients in the C matrix? Our data are supposed to follow some polynomial: 
y equals c c plus  c 1 x plus c 2 x squared plus midline horizontal ellipsis plus c Subscript p Baseline x Superscript p but because of noise there is a stochastic contribution 
to ym, and hence, 
y Superscrip t m Baseline left paren t h esis n right pare
nthesis equals c 0 plus c 1 x left parenthesis n right parenthesis plus c 2 x squared left parenthesis n right parenthesis plus ellipsis c Subscript p Baseline x Superscript p Baseline left parenthesis n right parenthesis plus b left parenthesis n right parenthesis
where b(n) is white gaussian noise: b left pare n thesis n right parenthesis element of upper N left parenthesis 0 comma sigma right parenthesis. This noise propagates to the 
coefﬁcients in the C matrix according to the following theorem: 
Theorem The variance of the ci coefﬁcients in the C matrix is found in the diagonal 
elements of the σ 2(ATA)−1 matrix, i.e., 
var left p
a
rent
hesi
s c 
Sub
script i Baseline right parenthesis equals StartSet sigma squared left parenthesis upper A Superscript upper T Baseline upper A right parenthesis Superscript negative 1 Baseline EndSet Subscript i i Baseline
We don’t prove that theorem here, but we will illustrate it with an example. 
Example 17.6 What is the uncertainty of the coefﬁcients in Example 17.1? 
Solution The variance of the noise level was 0.0083 V2, so  
sigm
a sq
uare d left pa r
e nthesis  upper 
A Super script
 
u
p per T
 Baseli
ne uppe r A rig
h
t parenthesis Superscript negative 1 Baseline equals 0.0083 dot Start 2 By 2 Matrix 1st Row 1st Column 0.2973 2nd Column negative 0.081 2nd Row 1st Column negative 0.081 2nd Column 0.0007 EndMatrix equals Start 2 By 2 Matrix 1st Row 1st Column 2.47 2nd Column negative 0.672 2nd Row 1st Column negative 0.672 2nd Column 0.00581 EndMatrix times 10 Superscript negative 3
r
i
ght double arrow StartLayout Enlarged left brace 1st Row u left parenthesis c 0 right parenthesis equals StartRoot 2.47 dot 10 Superscript negative 3 Baseline EndRoot equals 0.050 2nd Row u left parenthesis c 1 right parenthesis equals StartRoot 5.81 dot 10 Superscript negative 6 Baseline EndRoot equals 0.0024 EndLayout
√
right  double  arrow S
tartLayout Enlarged left brace 1st Row u left parenthesis c 0 right parenthesis equals StartRoot 2.47 dot 10 Superscript negative 3 Baseline EndRoot equals 0.050 2nd Row u left parenthesis c 1 right parenthesis equals StartRoot 5.81 dot 10 Superscript negative 6 Baseline EndRoot equals 0.0024 EndLayout
√
right  double  arrow StartLayout Enlarged left brace 1st Row u left parenthesis c 0 right parenthesis equals StartRoot 2.47 dot 10 Superscript negative 3 Baseline EndRoot equals 0.050 2nd Row u left parenthesis c 1 right parenthesis equals StartRoot 5.81 dot 10 Superscript negative 6 Baseline EndRoot equals 0.0024 EndLayout
With a coverage factor of 2, we get the following coefﬁcients:
S tar t Layout Enlarged
 le ft brace 1st Row c  0 eq uals negative 0.095 plus or minus 0.100 2nd Row c 1 equals 0.2371 plus or minus 0.0048 EndLayout left parenthesis 95 percent sign confidence right parenthesis
Notice in the example above that the uncertainty was much smaller for c1 than for 
c0; this is true in general. Higher order coefﬁcients are more sensitive to variations 
in data and can therefore be determined with higher precision. 
17.5.2 
Ill-Conditioned Matrices 
In some situations, the A matrix can be ‘ill-conditioned’ and that can have severe 
consequences for the precision. We will illustrate that with an example. 
Example 17.6 Table 17.7 illustrates data from some measurement. Fit this data to a 
ﬁrst-order polynomial, y = c0 + c1x.

17.5 Matrix Uncertainties and Pitfalls
359
Table 17.7 Some 
measurement
x
1000
1001
1003 
y
4
6
9 
Solution A and M are; up pe
r 
A 
eq uals 
St art 3
 B y 2 M
at
rix 1st Row 1st Column 1 2nd Column 1000 2nd Row 1st Column 1 2nd Column 1001 3rd Row 1st Column 1 2nd Column 1003 EndMatrixand up pe
r 
M 
eq
ua
ls
 S
tart 3 By 1 Matrix 1st Row 4 2nd Row 6 3rd Row 9 EndMatrix. Hence,
l
eft 
pare n
t
h
esis 
upper  A Supe
rscr
ip t upper T Baseline upper A right parenthesis Superscript negative 1 Baseline equals Start 2 By 2 Matrix 1st Row 1st Column 3 2nd Column 3004 2nd Row 1st Column 3004 2nd Column 3008010 EndMatrix Superscript negative 1 Baseline equals one fourteenth Start 2 By 2 Matrix 1st Row 1st Column 3008010 2nd Column negative 3004 2nd Row 1st Column negative 3004 2nd Column 3 EndMatrix
le
ft parent hesis 
upper
 
A
 Superscript upper T Baseline upper A right parenthesis Superscript negative 1 Baseline equals Start 2 By 2 Matrix 1st Row 1st Column 3 2nd Column 3004 2nd Row 1st Column 3004 2nd Column 3008010 EndMatrix Superscript negative 1 Baseline equals one fourteenth Start 2 By 2 Matrix 1st Row 1st Column 3008010 2nd Column negative 3004 2nd Row 1st Column negative 3004 2nd Column 3 EndMatrix
up er  
A
 
S
u
p
erscr ipt u pper
 
T 
Ba
se
li
ne
 u
pp
er 
M
 eq
uals 
S
tart 2 By 3 Matrix 1st Row 1st Column 1 2nd Column 1 3rd Column 1 2nd Row 1st Column 1000 2nd Column 1001 3rd Column 1003 EndMatrix dot Start 3 By 1 Matrix 1st Row 4 2nd Row 6 3rd Row 9 EndMatrix equals StartBinomialOrMatrix 19 Choose 19033 EndBinomialOrMatrix
righ t double arrow upper C equals one fourteenth Start 2 By 2 Matrix 1st Row 1st Column 3008010 2nd Column negative 3004 2nd Row 1st Column negative 3004 2nd Column 3 EndMatrix StartBinomialOrMatrix 19 Choose 19033 EndBinomialOrMatrix equals StartBinomialOrMatrix negative 1638.7 Choose 1.6429 EndBinomialOrMatrix equals StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix
ri
g ht doubl e arro
w upp
e
r 
C e
quals
 
o
ne fourte
enth S
t
a
rt 2
 B
y
 2 Matrix 1st Row 1st Column 3008010 2nd Column negative 3004 2nd Row 1st Column negative 3004 2nd Column 3 EndMatrix StartBinomialOrMatrix 19 Choose 19033 EndBinomialOrMatrix equals StartBinomialOrMatrix negative 1638.7 Choose 1.6429 EndBinomialOrMatrix equals StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix
Inserting these coefﬁcients into our ﬁt gives us y(1000) = 4.20, y(1001) = 5.84 
and y(1003) = 9.13. 
The result in Example 17.6 seems reasonable. However, these calculations are 
usually carried out by computers and all computers have limited accuracy. To illus-
trate the problem, we will ‘amplify’ it here, by assuming that our computer has a 
precision of only four digits. (A real computer has much higher precision, but the 
problem is the same, it is just on a smaller scale.). That means that 3,008,010 will be 
rounded to 3,008,000 and 19,033 is rounded to 19,030. In the ﬁrst case, it is an error 
of 3.3 ppm, and in the second case, it is an error of 158 ppm. You wouldn’t expect 
such small rounding errors to have any signiﬁcant impact on the result, would you? 
Let’s see: 
one fourteenth Start 2 By 2 Matrix 1st Row 1st Column 3008000 2nd Column negative 3004 2nd Row 1st Column negative 3004 2nd Column 3 EndMatrix StartBinomialOrMatrix 19 Choose 19030 EndBinomialOrMatrix equals StartBinomialOrMatrix negative 1009 Choose 1.000 EndBinomialOrMatrix equals StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix
on
e fourtee nth St
art 2
 
By
 2 
Matri
x
 
1st Row
 1st 
C
o
lumn
 3
0
08000 2nd Column negative 3004 2nd Row 1st Column negative 3004 2nd Column 3 EndMatrix StartBinomialOrMatrix 19 Choose 19030 EndBinomialOrMatrix equals StartBinomialOrMatrix negative 1009 Choose 1.000 EndBinomialOrMatrix equals StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix
Comparing Eq. (17.22) with Eq. (17.21), we can see that the ppm level rounding 
has catastrophic consequences on the calculations! The problem is that the ATA 
matrix is ‘ill-conditioned’. (This is implied by the size of the highest eigenvalue of 
the ATA matrix; in this case, it is 1734 and rounding troubles are expected.) There is an 
easier way to predict the problems in this case. If we take a closer look at the column 
vectors in A, we can see that they are almost parallel; the vector (1,1,1) is almost 
parallel to (1000, 1001, 1003). The angle between these two vectors is only 0.07° 
and that makes it hard for the two vectors to span the space properly (the ATA matrix 
is very close to being singular). Ideally, we want the angle between the ‘spanning’ 
vectors to be 90°. We can ﬁx this problem by ﬁtting to a savvier polynomial.

360
17
Curve Fitting
Example 17.7 In Example 17.6, ﬁt data to the polynomial y = c0 + c1(x − 1000) 
instead. 
Solution That gives us the following system of equations: 
St
ar
tL
ayo ut 1st  Row
 1s t Colu mn B
lan k 2nd Colu
mn
 S
ta
r t L
a y o
u t  
En
l
arge
d 
l
ef
t 
br
ac
e 
1s
t 
Row c 0 p
l
u s  c  
1  0 
equ
al
s  4
 2 n
d  R
ow
 c 
0  p l
u s 
c 1 1 equals 6 3rd Row c 0 plus c 1 3 equals 9 EndLayout right double arrow Start 3 By 2 Matrix 1st Row 1st Column 1 2nd Column 0 2nd Row 1st Column 1 2nd Column 1 3rd Row 1st Column 1 2nd Column 3 EndMatrix StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix equals Start 3 By 1 Matrix 1st Row 4 2nd Row 6 3rd Row 9 EndMatrix right double arrow upper A Superscript upper T Baseline upper A 2nd Row 1st Column Blank 2nd Column equals Start 2 By 3 Matrix 1st Row 1st Column 1 2nd Column 1 3rd Column 1 2nd Row 1st Column 0 2nd Column 1 3rd Column 3 EndMatrix Start 3 By 2 Matrix 1st Row 1st Column 1 2nd Column 0 2nd Row 1st Column 1 2nd Column 1 3rd Row 1st Column 1 2nd Column 3 EndMatrix equals Start 2 By 2 Matrix 1st Row 1st Column 3 2nd Column 4 2nd Row 1st Column 4 2nd Column 10 EndMatrix EndLayout
(The four-digit restriction doesn’t have any inﬂuence on the numbers anymore.) 
Start L
a y o u t
 1 st
 Ro
w 
1s
t 
Co
lu
mn 
uppe
r 
A
 
S
upe r
script up
pe r T Baseline upper M 2nd Column equals Start 2 By 3 Matrix 1st Row 1st Column 1 2nd Column 1 3rd Column 1 2nd Row 1st Column 0 2nd Column 1 3rd Column 3 EndMatrix Start 3 By 1 Matrix 1st Row 4 2nd Row 6 3rd Row 9 EndMatrix equals StartBinomialOrMatrix 19 Choose 33 EndBinomialOrMatrix right double arrow left parenthesis upper A Superscript upper T Baseline upper A right parenthesis Superscript negative 1 Baseline upper A Superscript upper T Baseline upper M 2nd Row 1st Column Blank 2nd Column equals one fourteenth Start 2 By 2 Matrix 1st Row 1st Column 10 2nd Column negative 4 2nd Row 1st Column negative 4 2nd Column 3 EndMatrix StartBinomialOrMatrix 19 Choose 33 EndBinomialOrMatrix equals StartBinomialOrMatrix 4.143 Choose 1.643 EndBinomialOrMatrix EndLayout
St
a rtL ayo
ut  
1st R
ow
 
1
s t Colu
mn up
per A Superscript upper T Baseline upper M 2nd Column equals Start 2 By 3 Matrix 1st Row 1st Column 1 2nd Column 1 3rd Column 1 2nd Row 1st Column 0 2nd Column 1 3rd Column 3 EndMatrix Start 3 By 1 Matrix 1st Row 4 2nd Row 6 3rd Row 9 EndMatrix equals StartBinomialOrMatrix 19 Choose 33 EndBinomialOrMatrix right double arrow left parenthesis upper A Superscript upper T Baseline upper A right parenthesis Superscript negative 1 Baseline upper A Superscript upper T Baseline upper M 2nd Row 1st Column Blank 2nd Column equals one fourteenth Start 2 By 2 Matrix 1st Row 1st Column 10 2nd Column negative 4 2nd Row 1st Column negative 4 2nd Column 3 EndMatrix StartBinomialOrMatrix 19 Choose 33 EndBinomialOrMatrix equals StartBinomialOrMatrix 4.143 Choose 1.643 EndBinomialOrMatrix EndLayout
righ t double  arrow y  equa ls 4.143 plus 1 .643 dot left parenthesis x minus 1000 right parenthesis equals negative 1639 minus 1.643 x
In Example 17.7, we have the column vectors (1,1,1) and (0,1,3). The angle 
between them is: 
up per X dot upper Y equals StartAb
so luteValue upper X EndAbsoluteValue dot StartAbsoluteValue upper Y EndAbsoluteValue cosine alpha right double arrow alpha equals cosine Superscript negative 1 Baseline StartFraction upper X dot upper Y Over StartAbsoluteValue upper X EndAbsoluteValue dot StartAbsoluteValue upper Y EndAbsoluteValue EndFraction equals cosine Superscript negative 1 Baseline StartFraction 4 Over StartRoot 3 EndRoot dot StartRoot 10 EndRoot EndFraction equals 43 Superscript ring
upper X dot upper 
Y equals StartAbsoluteValue upper X EndAbsoluteValue dot StartAbsoluteValue upper Y EndAbsoluteValue cosine alpha right double arrow alpha equals cosine Superscript negative 1 Baseline StartFraction upper X dot upper Y Over StartAbsoluteValue upper X EndAbsoluteValue dot StartAbsoluteValue upper Y EndAbsoluteValue EndFraction equals cosine Superscript negative 1 Baseline StartFraction 4 Over StartRoot 3 EndRoot dot StartRoot 10 EndRoot EndFraction equals 43 Superscript ring
√
up per X dot upper Y equals StartAbsoluteValue upper X EndAbsoluteValue dot StartAbsoluteValue upper Y EndAbsoluteValue cosine alpha right double arrow alpha equals cosine Superscript negative 1 Baseline StartFraction upper X dot upper Y Over StartAbsoluteValue upper X EndAbsoluteValue dot StartAbsoluteValue upper Y EndAbsoluteValue EndFraction equals cosine Superscript negative 1 Baseline StartFraction 4 Over StartRoot 3 EndRoot dot StartRoot 10 EndRoot EndFraction equals 43 Superscript ring
√
upp
er X dot upper Y equals StartAbsoluteValue upper X EndAbsoluteValue dot StartAbsoluteValue upper Y EndAbsoluteValue cosine alpha right double arrow alpha equals cosine Superscript negative 1 Baseline StartFraction upper X dot upper Y Over StartAbsoluteValue upper X EndAbsoluteValue dot StartAbsoluteValue upper Y EndAbsoluteValue EndFraction equals cosine Superscript negative 1 Baseline StartFraction 4 Over StartRoot 3 EndRoot dot StartRoot 10 EndRoot EndFraction equals 43 Superscript ring
which indicates a more stable ‘spanning’ of the space. 
(To what polynomial should you ﬁt the data to get perpendicular column vectors?). 
Advanced calculation programs, like MATLAB, avoid this problem by ﬁrst factor-
izing the matrices. For example, the backslash (‘\’) operator in MATLAB uses QR 
factorization to avoid rounding errors in matrices with ‘almost parallel’ column 
vectors. 
17.6 
The Sampling Theorem Revisited 
In this section, we will investigate a problem that is not exactly curve ﬁtting, but 
closely related and we will answer a question that is often asked by students. 
According to the sampling theorem, the sampling rate f S must exceed 2f max, i.e., 
f S > 2·f max. Hence, f S = 3·f max should be enough. That sampling rate indicates that

17.6 The Sampling Theorem Revisited
361
Fig. 17.10 Sampling a sine; f S = 3f 
we would only take three samples of each period of a sine. This is illustrated in 
Fig. 17.10. 
The question often asked by students is: ‘How can you recover the original sine 
from only three samples of a period’? 
First, it is possible to recover the original signal shape from only a few samples 
(as long as you don’t violate the sampling theorem). Second, linear interpolation is 
obviously not going to do it, see Fig. 17.10. We need a more cunning plan than that. 
To understand how to recover the original sine from only a few samples, we ﬁrst 
need to look at the Fourier transforms of the original sine, let’s call it xa(t) (‘a’ for 
‘analog’), and the sampled sine, xd(t) (‘d’ for ‘discrete-time’). Figure 17.11 illustrates 
the Fourier spectrum of the analog sine; there is just one pair of peaks at the positive 
and negative sine frequency. 
We know from chapter 7 that when we sample x(t), the Fourier transform becomes 
periodic, with a period equal to the sampling frequency. The Fourier spectrum of the 
sampled signal is illustrated in Fig. 17.12.
After the sampling, we only have the samples and the question is, how we can 
retrieve the original xa(t) signal? Linear interpolation of xd(t) doesn’t work and if we 
take the inverse Fourier transform of Xd(ω), we will only get our samples back, not 
the analog signal xa(t). 
Butthe keytothe retrievalof xa(t) is still in the Fourier transforms. To retrieve xa(t), 
we ﬁrst need to recreate Xa(ω). We can do that by multiplying Xd(ω) with a ‘square’ 
frequency function covering only frequencies between ± ωS/2, see Fig. 17.13.
Fig. 17.11 Fourier spectrum of analog sine 

362
17
Curve Fitting
Fig. 17.12 Fourier spectrum of discrete-time sine
Fig. 17.13 Multiplying by a ‘square’ ﬁlter 
The resulting product will be Xa(ω): 
upper X Subscript nor
mal a Baseline left parenthesis omega right parenthesis equals upper X Subscript normal d Baseline left parenthesis omega right parenthesis dot upper H left parenthesis omega right parenthesis
So, to retrieve the original signal in frequency space, we multiply Xd(ω) by  H(ω). 
We know from Sect. 9.8 that multiplication in frequency space corresponds to convo-
lution in time space. Hence, to retrieve the original signal xa(t), we must convolve 
xd(t) with h(t) (= H−1(ω)): 
x Subscript normal a Ba
se
lin
e left parenth
esis t right parenthesis equals x Subscript normal d Baseline left parenthesis t right parenthesis circled times h left parenthesis t right parenthesis equals integral Subscript negative normal infinity Superscript t Baseline x Subscript normal d Baseline left parenthesis tau right parenthesis h left parenthesis t minus tau right parenthesis d tau
Before we can evaluate Eq. (17.24) we need to ﬁnd h(t): 
StartLa yout 1st Row 1st Column h left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over omega Subscript s Baseline EndFraction integral Subscript minus omega Subscript s Baseline divided by 2 Superscript omega Subscript s Baseline divided by 2 Baseline 1 dot normal e Superscript normal j omega t Baseline d omega equals StartFraction 1 Over omega Subscript s Baseline EndFraction dot StartFraction 1 Over j t EndFraction left bracket normal e Superscript normal j omega t Baseline right bracket Subscript minus omega Sub Subscript s divided by 2 Superscript omega Super Subscript s Superscript divided by 2 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over omega Subscript s Baseline t EndFraction dot StartFraction 2 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j omega Super Subscript upper S Superscript t divided by 2 Baseline minus normal e Superscript minus normal j omega Super Subscript upper S Superscript t divided by 2 Baseline right parenthesis equals StartFraction 1 Over omega Subscript s Baseline t divided by 2 EndFraction sine StartFraction omega Subscript upper S Baseline Over 2 EndFraction t equals sine normal c StartFraction omega Subscript upper S Baseline Over 2 EndFraction t 3rd Row 1st Column Blank 2nd Column equals sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction t EndLayout
Sta
rtLay
o
ut 1st 
Ro w 1st Column  h left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over omega Subscript s Baseline EndFraction integral Subscript minus omega Subscript s Baseline divided by 2 Superscript omega Subscript s Baseline divided by 2 Baseline 1 dot normal e Superscript normal j omega t Baseline d omega equals StartFraction 1 Over omega Subscript s Baseline EndFraction dot StartFraction 1 Over j t EndFraction left bracket normal e Superscript normal j omega t Baseline right bracket Subscript minus omega Sub Subscript s divided by 2 Superscript omega Super Subscript s Superscript divided by 2 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over omega Subscript s Baseline t EndFraction dot StartFraction 2 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j omega Super Subscript upper S Superscript t divided by 2 Baseline minus normal e Superscript minus normal j omega Super Subscript upper S Superscript t divided by 2 Baseline right parenthesis equals StartFraction 1 Over omega Subscript s Baseline t divided by 2 EndFraction sine StartFraction omega Subscript upper S Baseline Over 2 EndFraction t equals sine normal c StartFraction omega Subscript upper S Baseline Over 2 EndFraction t 3rd Row 1st Column Blank 2nd Column equals sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction t EndLayout
Sta
rtLayout 1st Row 1st Column h left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over omega Subscript s Baseline EndFraction integral Subscript minus omega Subscript s Baseline divided by 2 Superscript omega Subscript s Baseline divided by 2 Baseline 1 dot normal e Superscript normal j omega t Baseline d omega equals StartFraction 1 Over omega Subscript s Baseline EndFraction dot StartFraction 1 Over j t EndFraction left bracket normal e Superscript normal j omega t Baseline right bracket Subscript minus omega Sub Subscript s divided by 2 Superscript omega Super Subscript s Superscript divided by 2 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over omega Subscript s Baseline t EndFraction dot StartFraction 2 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j omega Super Subscript upper S Superscript t divided by 2 Baseline minus normal e Superscript minus normal j omega Super Subscript upper S Superscript t divided by 2 Baseline right parenthesis equals StartFraction 1 Over omega Subscript s Baseline t divided by 2 EndFraction sine StartFraction omega Subscript upper S Baseline Over 2 EndFraction t equals sine normal c StartFraction omega Subscript upper S Baseline Over 2 EndFraction t 3rd Row 1st Column Blank 2nd Column equals sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction t EndLayout
St
a
rtLayout 1s
t Row 1
st  Column h left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over omega Subscript s Baseline EndFraction integral Subscript minus omega Subscript s Baseline divided by 2 Superscript omega Subscript s Baseline divided by 2 Baseline 1 dot normal e Superscript normal j omega t Baseline d omega equals StartFraction 1 Over omega Subscript s Baseline EndFraction dot StartFraction 1 Over j t EndFraction left bracket normal e Superscript normal j omega t Baseline right bracket Subscript minus omega Sub Subscript s divided by 2 Superscript omega Super Subscript s Superscript divided by 2 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over omega Subscript s Baseline t EndFraction dot StartFraction 2 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j omega Super Subscript upper S Superscript t divided by 2 Baseline minus normal e Superscript minus normal j omega Super Subscript upper S Superscript t divided by 2 Baseline right parenthesis equals StartFraction 1 Over omega Subscript s Baseline t divided by 2 EndFraction sine StartFraction omega Subscript upper S Baseline Over 2 EndFraction t equals sine normal c StartFraction omega Subscript upper S Baseline Over 2 EndFraction t 3rd Row 1st Column Blank 2nd Column equals sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction t EndLayout
Star tL ayout 1st Row 1st Column h left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over omega Subscript s Baseline EndFraction integral Subscript minus omega Subscript s Baseline divided by 2 Superscript omega Subscript s Baseline divided by 2 Baseline 1 dot normal e Superscript normal j omega t Baseline d omega equals StartFraction 1 Over omega Subscript s Baseline EndFraction dot StartFraction 1 Over j t EndFraction left bracket normal e Superscript normal j omega t Baseline right bracket Subscript minus omega Sub Subscript s divided by 2 Superscript omega Super Subscript s Superscript divided by 2 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over omega Subscript s Baseline t EndFraction dot StartFraction 2 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j omega Super Subscript upper S Superscript t divided by 2 Baseline minus normal e Superscript minus normal j omega Super Subscript upper S Superscript t divided by 2 Baseline right parenthesis equals StartFraction 1 Over omega Subscript s Baseline t divided by 2 EndFraction sine StartFraction omega Subscript upper S Baseline Over 2 EndFraction t equals sine normal c StartFraction omega Subscript upper S Baseline Over 2 EndFraction t 3rd Row 1st Column Blank 2nd Column equals sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction t EndLayout
St
a
rtLayout  1st Row 1s
t
 Column h left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over omega Subscript s Baseline EndFraction integral Subscript minus omega Subscript s Baseline divided by 2 Superscript omega Subscript s Baseline divided by 2 Baseline 1 dot normal e Superscript normal j omega t Baseline d omega equals StartFraction 1 Over omega Subscript s Baseline EndFraction dot StartFraction 1 Over j t EndFraction left bracket normal e Superscript normal j omega t Baseline right bracket Subscript minus omega Sub Subscript s divided by 2 Superscript omega Super Subscript s Superscript divided by 2 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over omega Subscript s Baseline t EndFraction dot StartFraction 2 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j omega Super Subscript upper S Superscript t divided by 2 Baseline minus normal e Superscript minus normal j omega Super Subscript upper S Superscript t divided by 2 Baseline right parenthesis equals StartFraction 1 Over omega Subscript s Baseline t divided by 2 EndFraction sine StartFraction omega Subscript upper S Baseline Over 2 EndFraction t equals sine normal c StartFraction omega Subscript upper S Baseline Over 2 EndFraction t 3rd Row 1st Column Blank 2nd Column equals sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction t EndLayout
StartL ayou t 1st Row 1st Column h left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over omega Subscript s Baseline EndFraction integral Subscript minus omega Subscript s Baseline divided by 2 Superscript omega Subscript s Baseline divided by 2 Baseline 1 dot normal e Superscript normal j omega t Baseline d omega equals StartFraction 1 Over omega Subscript s Baseline EndFraction dot StartFraction 1 Over j t EndFraction left bracket normal e Superscript normal j omega t Baseline right bracket Subscript minus omega Sub Subscript s divided by 2 Superscript omega Super Subscript s Superscript divided by 2 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over omega Subscript s Baseline t EndFraction dot StartFraction 2 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j omega Super Subscript upper S Superscript t divided by 2 Baseline minus normal e Superscript minus normal j omega Super Subscript upper S Superscript t divided by 2 Baseline right parenthesis equals StartFraction 1 Over omega Subscript s Baseline t divided by 2 EndFraction sine StartFraction omega Subscript upper S Baseline Over 2 EndFraction t equals sine normal c StartFraction omega Subscript upper S Baseline Over 2 EndFraction t 3rd Row 1st Column Blank 2nd Column equals sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction t EndLayout
St ar tLayout 1st Row 1st Column h left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over omega Subscript s Baseline EndFraction integral Subscript minus omega Subscript s Baseline divided by 2 Superscript omega Subscript s Baseline divided by 2 Baseline 1 dot normal e Superscript normal j omega t Baseline d omega equals StartFraction 1 Over omega Subscript s Baseline EndFraction dot StartFraction 1 Over j t EndFraction left bracket normal e Superscript normal j omega t Baseline right bracket Subscript minus omega Sub Subscript s divided by 2 Superscript omega Super Subscript s Superscript divided by 2 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over omega Subscript s Baseline t EndFraction dot StartFraction 2 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j omega Super Subscript upper S Superscript t divided by 2 Baseline minus normal e Superscript minus normal j omega Super Subscript upper S Superscript t divided by 2 Baseline right parenthesis equals StartFraction 1 Over omega Subscript s Baseline t divided by 2 EndFraction sine StartFraction omega Subscript upper S Baseline Over 2 EndFraction t equals sine normal c StartFraction omega Subscript upper S Baseline Over 2 EndFraction t 3rd Row 1st Column Blank 2nd Column equals sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction t EndLayout
St ar
tLayout  1st Row 1st Column h left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over omega Subscript s Baseline EndFraction integral Subscript minus omega Subscript s Baseline divided by 2 Superscript omega Subscript s Baseline divided by 2 Baseline 1 dot normal e Superscript normal j omega t Baseline d omega equals StartFraction 1 Over omega Subscript s Baseline EndFraction dot StartFraction 1 Over j t EndFraction left bracket normal e Superscript normal j omega t Baseline right bracket Subscript minus omega Sub Subscript s divided by 2 Superscript omega Super Subscript s Superscript divided by 2 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over omega Subscript s Baseline t EndFraction dot StartFraction 2 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j omega Super Subscript upper S Superscript t divided by 2 Baseline minus normal e Superscript minus normal j omega Super Subscript upper S Superscript t divided by 2 Baseline right parenthesis equals StartFraction 1 Over omega Subscript s Baseline t divided by 2 EndFraction sine StartFraction omega Subscript upper S Baseline Over 2 EndFraction t equals sine normal c StartFraction omega Subscript upper S Baseline Over 2 EndFraction t 3rd Row 1st Column Blank 2nd Column equals sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction t EndLayout
Star
tLayout 1st Row 1st Column h left parenthesis t right parenthesis 2nd Column equals StartFraction 1 Over omega Subscript s Baseline EndFraction integral Subscript minus omega Subscript s Baseline divided by 2 Superscript omega Subscript s Baseline divided by 2 Baseline 1 dot normal e Superscript normal j omega t Baseline d omega equals StartFraction 1 Over omega Subscript s Baseline EndFraction dot StartFraction 1 Over j t EndFraction left bracket normal e Superscript normal j omega t Baseline right bracket Subscript minus omega Sub Subscript s divided by 2 Superscript omega Super Subscript s Superscript divided by 2 Baseline 2nd Row 1st Column Blank 2nd Column equals StartFraction 1 Over omega Subscript s Baseline t EndFraction dot StartFraction 2 Over 2 normal j EndFraction left parenthesis normal e Superscript normal j omega Super Subscript upper S Superscript t divided by 2 Baseline minus normal e Superscript minus normal j omega Super Subscript upper S Superscript t divided by 2 Baseline right parenthesis equals StartFraction 1 Over omega Subscript s Baseline t divided by 2 EndFraction sine StartFraction omega Subscript upper S Baseline Over 2 EndFraction t equals sine normal c StartFraction omega Subscript upper S Baseline Over 2 EndFraction t 3rd Row 1st Column Blank 2nd Column equals sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction t EndLayout

17.6 The Sampling Theorem Revisited
363
(In the inverse Fourier transform, we divide by ωS to ‘normalize’, to make the 
area under |H(ω)| = 1.) 
h(t) is a sinc function with period 2T S. Next, we insert that into Eq. (17.24), and 
remember that xd(t) is a discrete-time function, /= 0 only if t = nT S: 
StartLay
ou
t 1
st Row 1st C olumn x Subscript normal a Baseline left parenthesis t right parenthesis 2nd Column equals integral Subscript negative normal infinity Superscript t Baseline x Subscript normal d Baseline left parenthesis tau right parenthesis sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus tau right parenthesis normal d tau 2nd Row 1st Column Blank 2nd Column equals sigma summation Underscript i Endscripts x Subscript normal d Baseline left parenthesis i right parenthesis sine normal c Underscript over all samples Endscripts StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus i dot upper T Subscript upper S Baseline right parenthesis 3rd Row 1st Column Blank 2nd Column equals x Subscript normal d Baseline left parenthesis 0 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction t plus x Subscript normal d Baseline left parenthesis 1 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus upper T Subscript upper S Baseline right parenthesis 4th Row 1st Column Blank 2nd Column plus x Subscript normal d Baseline left parenthesis 2 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus 2 upper T Subscript upper S Baseline right parenthesis plus ellipsis EndLayout
Star
tLa yout 1s
t
 
Ro
w 1st Colum
n x S ubsc ript nor
mal a Baseline left parenthesis t right parenthesis 2nd Column equals integral Subscript negative normal infinity Superscript t Baseline x Subscript normal d Baseline left parenthesis tau right parenthesis sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus tau right parenthesis normal d tau 2nd Row 1st Column Blank 2nd Column equals sigma summation Underscript i Endscripts x Subscript normal d Baseline left parenthesis i right parenthesis sine normal c Underscript over all samples Endscripts StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus i dot upper T Subscript upper S Baseline right parenthesis 3rd Row 1st Column Blank 2nd Column equals x Subscript normal d Baseline left parenthesis 0 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction t plus x Subscript normal d Baseline left parenthesis 1 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus upper T Subscript upper S Baseline right parenthesis 4th Row 1st Column Blank 2nd Column plus x Subscript normal d Baseline left parenthesis 2 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus 2 upper T Subscript upper S Baseline right parenthesis plus ellipsis EndLayout
Star
tLa yout  1st R
ow 1st Column x  Subscript normal a Baseline left parenthesis t right parenthesis 2nd Column equals integral Subscript negative normal infinity Superscript t Baseline x Subscript normal d Baseline left parenthesis tau right parenthesis sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus tau right parenthesis normal d tau 2nd Row 1st Column Blank 2nd Column equals sigma summation Underscript i Endscripts x Subscript normal d Baseline left parenthesis i right parenthesis sine normal c Underscript over all samples Endscripts StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus i dot upper T Subscript upper S Baseline right parenthesis 3rd Row 1st Column Blank 2nd Column equals x Subscript normal d Baseline left parenthesis 0 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction t plus x Subscript normal d Baseline left parenthesis 1 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus upper T Subscript upper S Baseline right parenthesis 4th Row 1st Column Blank 2nd Column plus x Subscript normal d Baseline left parenthesis 2 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus 2 upper T Subscript upper S Baseline right parenthesis plus ellipsis EndLayout
Star
tL ayout 1st Row 1 st Column x Subscript normal a Baseline left parenthesis t right parenthesis 2nd Column equals integral Subscript negative normal infinity Superscript t Baseline x Subscript normal d Baseline left parenthesis tau right parenthesis sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus tau right parenthesis normal d tau 2nd Row 1st Column Blank 2nd Column equals sigma summation Underscript i Endscripts x Subscript normal d Baseline left parenthesis i right parenthesis sine normal c Underscript over all samples Endscripts StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus i dot upper T Subscript upper S Baseline right parenthesis 3rd Row 1st Column Blank 2nd Column equals x Subscript normal d Baseline left parenthesis 0 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction t plus x Subscript normal d Baseline left parenthesis 1 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus upper T Subscript upper S Baseline right parenthesis 4th Row 1st Column Blank 2nd Column plus x Subscript normal d Baseline left parenthesis 2 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus 2 upper T Subscript upper S Baseline right parenthesis plus ellipsis EndLayout
Star
tLa yout 1
st Row 1st Colu mn x Subscript normal a Baseline left parenthesis t right parenthesis 2nd Column equals integral Subscript negative normal infinity Superscript t Baseline x Subscript normal d Baseline left parenthesis tau right parenthesis sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus tau right parenthesis normal d tau 2nd Row 1st Column Blank 2nd Column equals sigma summation Underscript i Endscripts x Subscript normal d Baseline left parenthesis i right parenthesis sine normal c Underscript over all samples Endscripts StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus i dot upper T Subscript upper S Baseline right parenthesis 3rd Row 1st Column Blank 2nd Column equals x Subscript normal d Baseline left parenthesis 0 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction t plus x Subscript normal d Baseline left parenthesis 1 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus upper T Subscript upper S Baseline right parenthesis 4th Row 1st Column Blank 2nd Column plus x Subscript normal d Baseline left parenthesis 2 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus 2 upper T Subscript upper S Baseline right parenthesis plus ellipsis EndLayout
Star
tLa yout 1st R o w  1st Column x Subscript normal a Baseline left parenthesis t right parenthesis 2nd Column equals integral Subscript negative normal infinity Superscript t Baseline x Subscript normal d Baseline left parenthesis tau right parenthesis sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus tau right parenthesis normal d tau 2nd Row 1st Column Blank 2nd Column equals sigma summation Underscript i Endscripts x Subscript normal d Baseline left parenthesis i right parenthesis sine normal c Underscript over all samples Endscripts StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus i dot upper T Subscript upper S Baseline right parenthesis 3rd Row 1st Column Blank 2nd Column equals x Subscript normal d Baseline left parenthesis 0 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction t plus x Subscript normal d Baseline left parenthesis 1 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus upper T Subscript upper S Baseline right parenthesis 4th Row 1st Column Blank 2nd Column plus x Subscript normal d Baseline left parenthesis 2 right parenthesis dot sine normal c StartFraction 2 normal pi Over 2 upper T Subscript upper S Baseline EndFraction left parenthesis t minus 2 upper T Subscript upper S Baseline right parenthesis plus ellipsis EndLayout
Hence, to recover the original analog signal xa(t), we multiply each sample by a 
sinc function that has period 2T S and is centered around the sample position. 
This is illustrated in Fig. 17.14 and in Fig. 17.15, we have plotted the sum of them 
and the original xa(t) signal. 
This is called ‘sinx/x interpolation’ and this is what digital oscilloscopes use to 
recreate the signal on the screen when there are not enough samples to do regular 
linear interpolation.
Fig. 17.14 A sinx/x interpolation

364
17
Curve Fitting
Fig. 17.15 The recreated analog signal
17.7 
Solved Problems 
Problem 17.1 Fit the data in Table 17.8 to (a) a constant, (b) a ﬁrst-order polynomial, 
(c) a second-order polynomial, and (d) an exponential function. Plot them all in the 
same graph and ﬁnd the total error in each ﬁt. Also, discuss the differences in the 
total errors and what conclusions to draw from it. 
Solution y = c0: 
St
artL
ayou
t 1 st R
ow 1st 
Col umn 
Bla nk 2
nd
 C
ol
um
n 
St
ar
tL
ay
ou
t 
En
larg ed
 l
ef
t 
br
ac
e 
1s
t 
Ro
w 
St
artLayout  1st  R ow 
c 
0 
eq
ua
ls
 7
 2
nd
 R
ow
 c
 0
 equ a
l
s 5 
3rd Row c 0 equals 2 EndLayout 2nd Row c 0 equals 1 EndLayout right double arrow StartBinomialOrMatrix StartLayout 1st Row 1 2nd Row 1 EndLayout Choose StartLayout 1st Row 1 2nd Row 1 EndLayout EndBinomialOrMatrix c 0 equals StartBinomialOrMatrix StartLayout 1st Row 7 2nd Row 5 EndLayout Choose StartLayout 1st Row 2 2nd Row 1 EndLayout EndBinomialOrMatrix right double arrow upper A Superscript upper T Baseline upper A equals left parenthesis 1 1 1 1 right parenthesis StartBinomialOrMatrix StartLayout 1st Row 1 2nd Row 1 EndLayout Choose StartLayout 1st Row 1 2nd Row 1 EndLayout EndBinomialOrMatrix 2nd Row 1st Column Blank 2nd Column equals 4 right double arrow left parenthesis upper A Superscript upper T Baseline upper A right parenthesis Superscript negative 1 Baseline equals 0.25 EndLayout
l
eft 
parenthes is uppe r A S u persc
ri
pt
 u
pp
er
 T
 B
as
el
in
e 
upper A r ight parenthesis Superscript negative 1 Baseline upper A Superscript upper T Baseline upper M equals 0.25 dot left parenthesis 1 1 1 1 right parenthesis dot StartBinomialOrMatrix StartLayout 1st Row 7 2nd Row 5 EndLayout Choose StartLayout 1st Row 2 2nd Row 1 EndLayout EndBinomialOrMatrix equals ModifyingBelow 3.75 equals c 0 With quotation dash
First-order ﬁt: y equal s c 0 plus c 1 x
Table 17.8 Data 
x
−2
0
1
3 
ym
7
5
2
1 

17.7 Solved Problems
365
St
artL
ayou
t 1 st Ro
w 1st 
Col umn S
ta rtLa
you t Enl
ar ged 
lef t bra
ce  1st
 R
ow
 c
 0
 m
in us 
c 
1 
sq
ua
re
d 
eq
ua
ls
 
7 2nd Row c 0 minus c 1 Superscript 0 Baseline equals 5 3rd Row c 0 minus c 1 Superscript 1 Baseline equals 2 4th Row c 0 minus c 1 cubed equals 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column negative 2 2nd Row 1st Column StartLayout 1st Row 1 2nd Row 1 3rd Row 1 EndLayout 2nd Column StartLayout 1st Row 0 2nd Row 1 3rd Row 3 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 7 2nd Row 5 3rd Row 2 4th Row 1 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column upper C equals upper A minus upper M equals ModifyingBelow StartBinomialOrMatrix 4.3846 Choose negative 1.2692 EndBinomialOrMatrix equals StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix With quotation dash EndLayout
StartLayout 1st Row 1st Column StartLayout Enlarged left brace 1st Row c 0 minus c 1 squared equals 7 2nd Row c 0 minus c 1 Superscript 0 Baseline equals 5 3rd Row c 0 minus c 1 Superscript 1 Baseline equals 2 4th Row c 0 minus c 1 cubed equals 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column negative 2 2nd Row 1st Column StartLayout 1st Row 1 2nd Row 1 3rd Row 1 EndLayout 2nd Column StartLayout 1st Row 0 2nd Row 1 3rd Row 3 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 7 2nd Row 5 3rd Row 2 4th Row 1 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column upper C equals upper A minus upper M equals ModifyingBelow StartBinomialOrMatrix 4.3846 Choose negative 1.2692 EndBinomialOrMatrix equals StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix With quotation dash EndLayout
S
t
artL
ay
o
ut 1st Row 1st Column StartLayout Enlarged left brace 1st Row c 0 minus c 1 squared equals 7 2nd Row c 0 minus c 1 Superscript 0 Baseline equals 5 3rd Row c 0 minus c 1 Superscript 1 Baseline equals 2 4th Row c 0 minus c 1 cubed equals 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column negative 2 2nd Row 1st Column StartLayout 1st Row 1 2nd Row 1 3rd Row 1 EndLayout 2nd Column StartLayout 1st Row 0 2nd Row 1 3rd Row 3 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 7 2nd Row 5 3rd Row 2 4th Row 1 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column upper C equals upper A minus upper M equals ModifyingBelow StartBinomialOrMatrix 4.3846 Choose negative 1.2692 EndBinomialOrMatrix equals StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix With quotation dash EndLayout StartLayout 1st Row 1st Column StartLayout Enlarged left brace 1st Row c 0 minus c 1 squared equals 7 2nd Row c 0 minus c 1 Superscript 0 Baseline equals 5 3rd Row c 0 minus c 1 Superscript 1 Baseline equals 2 4th Row c 0 minus c 1 cubed equals 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column negative 2 2nd Row 1st Column StartLayout 1st Row 1 2nd Row 1 3rd Row 1 EndLayout 2nd Column StartLayout 1st Row 0 2nd Row 1 3rd Row 3 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 7 2nd Row 5 3rd Row 2 4th Row 1 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column upper C equals upper A minus upper M equals ModifyingBelow StartBinomialOrMatrix 4.3846 Choose negative 1.2692 EndBinomialOrMatrix equals StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix With quotation dash EndLayout S
ta
rt
La
yo
ut
 1
st
 R
ow
 1
st
 C
ol
u
mn StartLayout Enlarged left brace 1st Row c 0 minus c 1 squared equals 7 2nd Row c 0 minus c 1 Superscript 0 Baseline equals 5 3rd Row c 0 minus c 1 Superscript 1 Baseline equals 2 4th Row c 0 minus c 1 cubed equals 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column negative 2 2nd Row 1st Column StartLayout 1st Row 1 2nd Row 1 3rd Row 1 EndLayout 2nd Column StartLayout 1st Row 0 2nd Row 1 3rd Row 3 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 7 2nd Row 5 3rd Row 2 4th Row 1 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column upper C equals upper A minus upper M equals ModifyingBelow StartBinomialOrMatrix 4.3846 Choose negative 1.2692 EndBinomialOrMatrix equals StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix With quotation dash EndLayout StartLayout 1st Row 1st Column StartLayout Enlarged left brace 1st Row c 0 minus c 1 squared equals 7 2nd Row c 0 minus c 1 Superscript 0 Baseline equals 5 3rd Row c 0 minus c 1 Superscript 1 Baseline equals 2 4th Row c 0 minus c 1 cubed equals 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column negative 2 2nd Row 1st Column StartLayout 1st Row 1 2nd Row 1 3rd Row 1 EndLayout 2nd Column StartLayout 1st Row 0 2nd Row 1 3rd Row 3 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 7 2nd Row 5 3rd Row 2 4th Row 1 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column upper C equals upper A minus upper M equals ModifyingBelow StartBinomialOrMatrix 4.3846 Choose negative 1.2692 EndBinomialOrMatrix equals StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix With quotation dash EndLayout S
ta
rt Layout  
1 st Row 
1st Col
u
m
n St
ar
tLayout Enlarged left brace 1st Row c 0 minus c 1 squared equals 7 2nd Row c 0 minus c 1 Superscript 0 Baseline equals 5 3rd Row c 0 minus c 1 Superscript 1 Baseline equals 2 4th Row c 0 minus c 1 cubed equals 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column negative 2 2nd Row 1st Column StartLayout 1st Row 1 2nd Row 1 3rd Row 1 EndLayout 2nd Column StartLayout 1st Row 0 2nd Row 1 3rd Row 3 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 7 2nd Row 5 3rd Row 2 4th Row 1 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column upper C equals upper A minus upper M equals ModifyingBelow StartBinomialOrMatrix 4.3846 Choose negative 1.2692 EndBinomialOrMatrix equals StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix With quotation dash EndLayout
Second-order ﬁt: y equal s c 0 plus c 1 x plus c 2 x squared
St
artL
ayou
t 1 st Row  1st Co lumn
 St artLay out Enl arge
d l eft br ace 1st  Row
 c 0 minu s c 1 2  plu
s 
c 
2 
2 
sq
ua re d  
e q u a
ls
 7
 2
nd
 R
ow
 c
 0
 p
l
us c 1 0 plus c 2 0 squared equals 5 3rd Row c 0 plus c 1 1 plus c 2 1 squared equals 2 4th Row c 0 plus c 1 3 plus c 2 3 squared equals 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 3 By 3 Matrix 1st Row 1st Column 1 2nd Column negative 2 3rd Column 4 2nd Row 1st Column 1 2nd Column 0 3rd Column 0 3rd Row 1st Column StartLayout 1st Row 1 2nd Row 1 EndLayout 2nd Column StartLayout 1st Row 1 2nd Row 3 EndLayout 3rd Column StartLayout 1st Row 1 2nd Row 9 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 7 2nd Row 5 3rd Row 2 4th Row 1 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column upper C equals upper A minus upper M equals ModifyingBelow Start 3 By 1 Matrix 1st Row 4.1346 2nd Row negative 1.3526 3rd Row 0.0833 EndMatrix equals Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With quotation dash EndLayout
StartLayout 1st Row 1st Column StartLayout Enlarged left brace 1st Row c 0 minus c 1 2 plus c 2 2 squared equals 7 2nd Row c 0 plus c 1 0 plus c 2 0 squared equals 5 3rd Row c 0 plus c 1 1 plus c 2 1 squared equals 2 4th Row c 0 plus c 1 3 plus c 2 3 squared equals 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 3 By 3 Matrix 1st Row 1st Column 1 2nd Column negative 2 3rd Column 4 2nd Row 1st Column 1 2nd Column 0 3rd Column 0 3rd Row 1st Column StartLayout 1st Row 1 2nd Row 1 EndLayout 2nd Column StartLayout 1st Row 1 2nd Row 3 EndLayout 3rd Column StartLayout 1st Row 1 2nd Row 9 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 7 2nd Row 5 3rd Row 2 4th Row 1 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column upper C equals upper A minus upper M equals ModifyingBelow Start 3 By 1 Matrix 1st Row 4.1346 2nd Row negative 1.3526 3rd Row 0.0833 EndMatrix equals Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With quotation dash EndLayout
S
ta
rt
La
you
t 1
st 
Ro
w
 1st Column StartLayout Enlarged left brace 1st Row c 0 minus c 1 2 plus c 2 2 squared equals 7 2nd Row c 0 plus c 1 0 plus c 2 0 squared equals 5 3rd Row c 0 plus c 1 1 plus c 2 1 squared equals 2 4th Row c 0 plus c 1 3 plus c 2 3 squared equals 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 3 By 3 Matrix 1st Row 1st Column 1 2nd Column negative 2 3rd Column 4 2nd Row 1st Column 1 2nd Column 0 3rd Column 0 3rd Row 1st Column StartLayout 1st Row 1 2nd Row 1 EndLayout 2nd Column StartLayout 1st Row 1 2nd Row 3 EndLayout 3rd Column StartLayout 1st Row 1 2nd Row 9 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 7 2nd Row 5 3rd Row 2 4th Row 1 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column upper C equals upper A minus upper M equals ModifyingBelow Start 3 By 1 Matrix 1st Row 4.1346 2nd Row negative 1.3526 3rd Row 0.0833 EndMatrix equals Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With quotation dash EndLayout StartLayout 1st Row 1st Column StartLayout Enlarged left brace 1st Row c 0 minus c 1 2 plus c 2 2 squared equals 7 2nd Row c 0 plus c 1 0 plus c 2 0 squared equals 5 3rd Row c 0 plus c 1 1 plus c 2 1 squared equals 2 4th Row c 0 plus c 1 3 plus c 2 3 squared equals 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 3 By 3 Matrix 1st Row 1st Column 1 2nd Column negative 2 3rd Column 4 2nd Row 1st Column 1 2nd Column 0 3rd Column 0 3rd Row 1st Column StartLayout 1st Row 1 2nd Row 1 EndLayout 2nd Column StartLayout 1st Row 1 2nd Row 3 EndLayout 3rd Column StartLayout 1st Row 1 2nd Row 9 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 7 2nd Row 5 3rd Row 2 4th Row 1 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column upper C equals upper A minus upper M equals ModifyingBelow Start 3 By 1 Matrix 1st Row 4.1346 2nd Row negative 1.3526 3rd Row 0.0833 EndMatrix equals Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With quotation dash EndLayout S
ta
rt
La
yo
ut
 1
st
 R
ow
 1
st
 C
ol
u
mn StartLayout Enlarged left brace 1st Row c 0 minus c 1 2 plus c 2 2 squared equals 7 2nd Row c 0 plus c 1 0 plus c 2 0 squared equals 5 3rd Row c 0 plus c 1 1 plus c 2 1 squared equals 2 4th Row c 0 plus c 1 3 plus c 2 3 squared equals 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 3 By 3 Matrix 1st Row 1st Column 1 2nd Column negative 2 3rd Column 4 2nd Row 1st Column 1 2nd Column 0 3rd Column 0 3rd Row 1st Column StartLayout 1st Row 1 2nd Row 1 EndLayout 2nd Column StartLayout 1st Row 1 2nd Row 3 EndLayout 3rd Column StartLayout 1st Row 1 2nd Row 9 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 7 2nd Row 5 3rd Row 2 4th Row 1 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column upper C equals upper A minus upper M equals ModifyingBelow Start 3 By 1 Matrix 1st Row 4.1346 2nd Row negative 1.3526 3rd Row 0.0833 EndMatrix equals Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With quotation dash EndLayout StartLayout 1st Row 1st Column StartLayout Enlarged left brace 1st Row c 0 minus c 1 2 plus c 2 2 squared equals 7 2nd Row c 0 plus c 1 0 plus c 2 0 squared equals 5 3rd Row c 0 plus c 1 1 plus c 2 1 squared equals 2 4th Row c 0 plus c 1 3 plus c 2 3 squared equals 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 3 By 3 Matrix 1st Row 1st Column 1 2nd Column negative 2 3rd Column 4 2nd Row 1st Column 1 2nd Column 0 3rd Column 0 3rd Row 1st Column StartLayout 1st Row 1 2nd Row 1 EndLayout 2nd Column StartLayout 1st Row 1 2nd Row 3 EndLayout 3rd Column StartLayout 1st Row 1 2nd Row 9 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 7 2nd Row 5 3rd Row 2 4th Row 1 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column upper C equals upper A minus upper M equals ModifyingBelow Start 3 By 1 Matrix 1st Row 4.1346 2nd Row negative 1.3526 3rd Row 0.0833 EndMatrix equals Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With quotation dash EndLayout S
ta
rt Layout  1
st
 R
ow 1st 
Column S
tartLay
ou
t En
la
rg
ed 
lef
t b
ra
ce 1st Row c 0 minus c 1 2 plus c 2 2 squared equals 7 2nd Row c 0 plus c 1 0 plus c 2 0 squared equals 5 3rd Row c 0 plus c 1 1 plus c 2 1 squared equals 2 4th Row c 0 plus c 1 3 plus c 2 3 squared equals 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 3 By 3 Matrix 1st Row 1st Column 1 2nd Column negative 2 3rd Column 4 2nd Row 1st Column 1 2nd Column 0 3rd Column 0 3rd Row 1st Column StartLayout 1st Row 1 2nd Row 1 EndLayout 2nd Column StartLayout 1st Row 1 2nd Row 3 EndLayout 3rd Column StartLayout 1st Row 1 2nd Row 9 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts ModifyingBelow Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With bottom brace Underscript upper C Endscripts equals ModifyingBelow Start 4 By 1 Matrix 1st Row 7 2nd Row 5 3rd Row 2 4th Row 1 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column upper C equals upper A minus upper M equals ModifyingBelow Start 3 By 1 Matrix 1st Row 4.1346 2nd Row negative 1.3526 3rd Row 0.0833 EndMatrix equals Start 3 By 1 Matrix 1st Row c 0 2nd Row c 1 3rd Row c 2 EndMatrix With quotation dash EndLayout
Exponential ﬁt: y equals c 0 e Su perscri pt c 1 x Baseline right double arrow ln y equals ln c 0 plus c 1 x
St
artL
ayou
t 1 st Row 1s t Col um
n S tar tLayou t Enl ar
ged  le ft bra ce 1s t 
Row  ln  c 0 m inus c 
1 
2 
eq
ua
ls
 l n 7
 2
nd
 R
ow
 l
n 
c 
0 
pl
u
s c 1 0 equals ln 5 3rd Row ln c 0 plus c 1 1 equals ln 2 4th Row ln c 0 plus c 1 3 equals ln 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column negative 2 2nd Row 1st Column StartLayout 1st Row 1 2nd Row 1 3rd Row 1 EndLayout 2nd Column StartLayout 1st Row 0 2nd Row 1 3rd Row 3 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts StartBinomialOrMatrix ln c 0 Choose c 1 EndBinomialOrMatrix equals ModifyingBelow Start 4 By 1 Matrix 1st Row ln 7 2nd Row ln 7 3rd Row ln 7 4th Row ln 7 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column right double arrow StartBinomialOrMatrix ln c 0 Choose c 1 EndBinomialOrMatrix equals upper A minus upper M equals StartBinomialOrMatrix 1.2669 Choose negative 0.4095 EndBinomialOrMatrix right double arrow StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix equals StartBinomialOrMatrix 3.5498 Choose negative 0.4095 EndBinomialOrMatrix EndLayout
StartLayout 1st Row 1st Column StartLayout Enlarged left brace 1st Row ln c 0 minus c 1 2 equals ln 7 2nd Row ln c 0 plus c 1 0 equals ln 5 3rd Row ln c 0 plus c 1 1 equals ln 2 4th Row ln c 0 plus c 1 3 equals ln 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column negative 2 2nd Row 1st Column StartLayout 1st Row 1 2nd Row 1 3rd Row 1 EndLayout 2nd Column StartLayout 1st Row 0 2nd Row 1 3rd Row 3 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts StartBinomialOrMatrix ln c 0 Choose c 1 EndBinomialOrMatrix equals ModifyingBelow Start 4 By 1 Matrix 1st Row ln 7 2nd Row ln 7 3rd Row ln 7 4th Row ln 7 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column right double arrow StartBinomialOrMatrix ln c 0 Choose c 1 EndBinomialOrMatrix equals upper A minus upper M equals StartBinomialOrMatrix 1.2669 Choose negative 0.4095 EndBinomialOrMatrix right double arrow StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix equals StartBinomialOrMatrix 3.5498 Choose negative 0.4095 EndBinomialOrMatrix EndLayout
S
t
artL ayo
ut
 
1s
t 
Ro
w 
1s
t C ol
umn  S
tar tL
ayo ut
 E
nl
ar
g
ed left brace 1st Row ln c 0 minus c 1 2 equals ln 7 2nd Row ln c 0 plus c 1 0 equals ln 5 3rd Row ln c 0 plus c 1 1 equals ln 2 4th Row ln c 0 plus c 1 3 equals ln 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column negative 2 2nd Row 1st Column StartLayout 1st Row 1 2nd Row 1 3rd Row 1 EndLayout 2nd Column StartLayout 1st Row 0 2nd Row 1 3rd Row 3 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts StartBinomialOrMatrix ln c 0 Choose c 1 EndBinomialOrMatrix equals ModifyingBelow Start 4 By 1 Matrix 1st Row ln 7 2nd Row ln 7 3rd Row ln 7 4th Row ln 7 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column right double arrow StartBinomialOrMatrix ln c 0 Choose c 1 EndBinomialOrMatrix equals upper A minus upper M equals StartBinomialOrMatrix 1.2669 Choose negative 0.4095 EndBinomialOrMatrix right double arrow StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix equals StartBinomialOrMatrix 3.5498 Choose negative 0.4095 EndBinomialOrMatrix EndLayout
StartLayout 1st Row 1st Column StartLayout Enlarged left brace 1st Row ln c 0 minus c 1 2 equals ln 7 2nd Row ln c 0 plus c 1 0 equals ln 5 3rd Row ln c 0 plus c 1 1 equals ln 2 4th Row ln c 0 plus c 1 3 equals ln 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column negative 2 2nd Row 1st Column StartLayout 1st Row 1 2nd Row 1 3rd Row 1 EndLayout 2nd Column StartLayout 1st Row 0 2nd Row 1 3rd Row 3 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts StartBinomialOrMatrix ln c 0 Choose c 1 EndBinomialOrMatrix equals ModifyingBelow Start 4 By 1 Matrix 1st Row ln 7 2nd Row ln 7 3rd Row ln 7 4th Row ln 7 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column right double arrow StartBinomialOrMatrix ln c 0 Choose c 1 EndBinomialOrMatrix equals upper A minus upper M equals StartBinomialOrMatrix 1.2669 Choose negative 0.4095 EndBinomialOrMatrix right double arrow StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix equals StartBinomialOrMatrix 3.5498 Choose negative 0.4095 EndBinomialOrMatrix EndLayout
S
ta
r
t Lay out
 1
s
t Row 
1
s t Colum
n Start
L
a
yout
 E
n
l
a rged le
ft brac
e 1st Row ln c 0 minus c 1 2 equals ln 7 2nd Row ln c 0 plus c 1 0 equals ln 5 3rd Row ln c 0 plus c 1 1 equals ln 2 4th Row ln c 0 plus c 1 3 equals ln 1 EndLayout 2nd Column right double arrow ModifyingBelow Start 2 By 2 Matrix 1st Row 1st Column 1 2nd Column negative 2 2nd Row 1st Column StartLayout 1st Row 1 2nd Row 1 3rd Row 1 EndLayout 2nd Column StartLayout 1st Row 0 2nd Row 1 3rd Row 3 EndLayout EndMatrix With bottom brace Underscript upper A Endscripts StartBinomialOrMatrix ln c 0 Choose c 1 EndBinomialOrMatrix equals ModifyingBelow Start 4 By 1 Matrix 1st Row ln 7 2nd Row ln 7 3rd Row ln 7 4th Row ln 7 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column right double arrow StartBinomialOrMatrix ln c 0 Choose c 1 EndBinomialOrMatrix equals upper A minus upper M equals StartBinomialOrMatrix 1.2669 Choose negative 0.4095 EndBinomialOrMatrix right double arrow StartBinomialOrMatrix c 0 Choose c 1 EndBinomialOrMatrix equals StartBinomialOrMatrix 3.5498 Choose negative 0.4095 EndBinomialOrMatrix EndLayout
All four ﬁts are plotted in Fig. 17.16.
The total error of each ﬁt is plotted in Table 17.9. From the table, we can see 
that the ﬁt to a second-order polynomial has the least error. However, it is deceiving 
to only focus on the total error to ﬁnd a relationship. Table 17.9 cannot be used to 
deduce that the relationship between y and x is a second-order polynomial; the total 
error will decrease with the polynomial order. For higher order polynomials, we end 
up ﬁtting data to the noise. We need a priori knowledge of the relationship before 
we do the ﬁtting.
Problem 17.2 The resistance of an unknown temperature sensor was measured for 
some temperatures, see Table 17.10. What kind of temperature sensor was used?
Solution Assuming a ﬁrst-order ﬁt: R = R0 + αT:

366
17
Curve Fitting
Fig. 17.16 Four different ﬁts
Table 17.9 Error table 
x
ym
y0–ym
y1–ym
y2–ym
yexp–ym 
−2
7
−3.25
−0.0770
0.1735
1.0518 
0
5
−1.25
−0.6154
−0.8654
−1.4502 
1
2
1.75
1.1154
−0.8653
0.3570 
3
1
2.75
−0.4230
−0.1735
0.0391
s igma summation epsilon squared divided by 4
1.192
0.336
0.312
0.457
Table 17.10 Temperature sensor data 
T [°C]
20
60
80
120
150 
R [Ω]
1080
1209
1312
1526
1641
St
artLayo
ut 1st 
Row  1st C olumn B
lan k 2nd Column 
Sta rtLayo ut Enla
rge d left brace 1
st Row upp er R 0 
pl
us
 a
lp
ha
 B
as
el
i ne  
2 0 e
q ua l
s 1080
 2 nd R
ow
 u
pp
er
 R
 0
 
p lus
 
a
lp
ha
 B
as
el
in
e 
60 eq
uals 
1209 
3rd R
ow up
pe
r 
R 
0 
pl
us
 
a lph
a
 
Baseli n
e  80 eq
uals 
1312 4th Row upper R 0 plus alpha Baseline 120 equals 1526 5th Row upper R 0 plus alpha Baseline 150 equals 1641 EndLayout right double arrow Start 5 By 2 Matrix 1st Row 1st Column 1 2nd Column 20 2nd Row 1st Column 1 2nd Column 60 3rd Row 1st Column 1 2nd Column 80 4th Row 1st Column 1 2nd Column 120 5th Row 1st Column 1 2nd Column 150 EndMatrix StartBinomialOrMatrix upper R 0 Choose alpha EndBinomialOrMatrix equals Start 4 By 1 Matrix 1st Row 1080 2nd Row 1209 3rd Row 1312 4th Row StartLayout 1st Row 1526 2nd Row 1641 EndLayout EndMatrix 2nd Row 1st Column Blank 2nd Column right double arrow StartBinomialOrMatrix upper R 0 Choose alpha EndBinomialOrMatrix equals upper A minus upper M equals StartBinomialOrMatrix 967.6 Choose 4.489 EndBinomialOrMatrix EndLayout
We can write our linear expression as: 
up per R eq uals 976. 6 plu
s
 4 .489 up per T eq
uals 977 left parenthesis 1 plus 4.49 dot 10 Superscript negative 3 Baseline upper T right parenthesis
Most likely the temperature sensor was a Cu-1000 sensor (where up
pe
r R 
e
qu als 100 0 left p
arenthesis 1 plus 4.33 dot 10 Superscript negative 3 Baseline upper T right parenthesis
).

17.7 Solved Problems
367
Problem 17.3 Eight samples of the signal y = a0 + a1sin2π250t (+ noise) are taken, 
see Table 17.11. Find the DC offset a0 and the amplitude a1. 
Solution We get the following system of equations: 
St
artLayout 1s
t Row 1st Co
lum n Bla nk 2 nd Col umn StartLay
out  Enla rged  left brace 1st Row  a 0 plu
s a  1 si ne 2  norma l pi B aseline  250 ast
eri sk 0 equa ls 1.1 96 2nd  Row a 0 plus a
 1 sine 2 no rmal p i Base line 25 0 asteri
sk 0.5 a ster isk 10  Super script n egative
 3 Basel ine equals  4.242  3rd Ro w  a 0 pl
us a 1 s ine 2 norm al pi Baselin e  250 as
te
ri
sk 1.0 asteri
sk 10 Supersc
rip t nega tive 3 B
ase line equal s 5.291 
4th  Row S tartLayo
ut 1st Row a 0 plus a
 1 sine 2  normal 
pi Baseline 2 5 0 aster
isk  1a5 a s terisk 
10 Superscrip t  negative 3 Baseline equals 3.707 2nd Row a 0 plus a 1 sine 2 normal pi Baseline 250 asterisk 2.0 asterisk 10 Superscript negative 3 Baseline equals 1.117 3rd Row a 0 plus a 1 sine 2 normal pi Baseline 250 asterisk 2.5 asterisk 10 Superscript negative 3 Baseline equals negative 2.143 4th Row a 0 plus a 1 sine 2 normal pi Baseline 250 asterisk 3.0 asterisk 10 Superscript negative 3 Baseline equals negative 2.645 5th Row a 0 plus a 1 sine 2 normal pi Baseline 250 asterisk 3.5 asterisk 10 Superscript negative 3 Baseline equals negative 2.287 EndLayout EndLayout 2nd Row 1st Column Blank 2nd Column equals StartLayout Enlarged left brace 1st Row a 0 plus a 0 0 equals 1.196 2nd Row a 0 plus a 1 0.707 equals 4.242 3rd Row a 0 plus a 1 1 equals 5.291 4th Row a 0 plus a 1 0.707 equals 3.707 5th Row a 0 plus a 1 0 equals 1.117 6th Row a 0 minus a 1 0.707 equals negative 2.143 7th Row a 0 minus a 1 1 equals negative 2.645 8th Row a 0 minus a 1 0.707 equals negative 2.287 EndLayout EndLayout
St
ar
tL
ay
ou
t 
1s
t 
Ro
w 
1s
t 
Co
l
u
m
n  Blank
 
2
n
d  Colum
n
 
M
od ifyingB
el
ow 
St art 8 B
y 
2 
Ma
tr
ix
 1
st
 R
ow
 1
st
 C
o
lumn 1 2nd Column 0 2nd Row 1st Column 1 2nd Column 0.707 3rd Row 1st Column 1 2nd Column 1 4th Row 1st Column 1 2nd Column 0.707 5th Row 1st Column 1 2nd Column 0 6th Row 1st Column 1 2nd Column negative 0.707 7th Row 1st Column 1 2nd Column negative 1 8th Row 1st Column 1 2nd Column negative 0.707 EndMatrix With bottom brace Underscript upper A Endscripts StartBinomialOrMatrix a 0 Choose a 1 EndBinomialOrMatrix equals ModifyingBelow Start 8 By 1 Matrix 1st Row 1.196 2nd Row 4.242 3rd Row 5.291 4th Row 3.707 5th Row 1.117 6th Row negative 2.143 7th Row negative 2.645 8th Row negative 2.287 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column right double arrow StartBinomialOrMatrix a 0 Choose a 1 EndBinomialOrMatrix equals upper A minus upper M equals StartBinomialOrMatrix 1.0597 Choose 4.1726 EndBinomialOrMatrix EndLayout
StartLayout 1st Row 1st Column Blank 2nd Column ModifyingBelow Start 8 By 2 Matrix 1st Row 1st Column 1 2nd Column 0 2nd Row 1st Column 1 2nd Column 0.707 3rd Row 1st Column 1 2nd Column 1 4th Row 1st Column 1 2nd Column 0.707 5th Row 1st Column 1 2nd Column 0 6th Row 1st Column 1 2nd Column negative 0.707 7th Row 1st Column 1 2nd Column negative 1 8th Row 1st Column 1 2nd Column negative 0.707 EndMatrix With bottom brace Underscript upper A Endscripts StartBinomialOrMatrix a 0 Choose a 1 EndBinomialOrMatrix equals ModifyingBelow Start 8 By 1 Matrix 1st Row 1.196 2nd Row 4.242 3rd Row 5.291 4th Row 3.707 5th Row 1.117 6th Row negative 2.143 7th Row negative 2.645 8th Row negative 2.287 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column right double arrow StartBinomialOrMatrix a 0 Choose a 1 EndBinomialOrMatrix equals upper A minus upper M equals StartBinomialOrMatrix 1.0597 Choose 4.1726 EndBinomialOrMatrix EndLayout
S
t
artL
ay
o
ut
 1
st
 R
ow
 1
st
 C
ol
um
n 
Bl
an
k 
2nd Co
lumn M
odifyi
ngBelo
w Star
t 8 By 
2 Matri
x 1st R
ow
 1
st
 C
ol
um
n 
1 
2n
d 
Co
lu
m
n 0 2nd Row 1st Column 1 2nd Column 0.707 3rd Row 1st Column 1 2nd Column 1 4th Row 1st Column 1 2nd Column 0.707 5th Row 1st Column 1 2nd Column 0 6th Row 1st Column 1 2nd Column negative 0.707 7th Row 1st Column 1 2nd Column negative 1 8th Row 1st Column 1 2nd Column negative 0.707 EndMatrix With bottom brace Underscript upper A Endscripts StartBinomialOrMatrix a 0 Choose a 1 EndBinomialOrMatrix equals ModifyingBelow Start 8 By 1 Matrix 1st Row 1.196 2nd Row 4.242 3rd Row 5.291 4th Row 3.707 5th Row 1.117 6th Row negative 2.143 7th Row negative 2.645 8th Row negative 2.287 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column right double arrow StartBinomialOrMatrix a 0 Choose a 1 EndBinomialOrMatrix equals upper A minus upper M equals StartBinomialOrMatrix 1.0597 Choose 4.1726 EndBinomialOrMatrix EndLayout
StartLayout 1st Row 1st Column Blank 2nd Column ModifyingBelow Start 8 By 2 Matrix 1st Row 1st Column 1 2nd Column 0 2nd Row 1st Column 1 2nd Column 0.707 3rd Row 1st Column 1 2nd Column 1 4th Row 1st Column 1 2nd Column 0.707 5th Row 1st Column 1 2nd Column 0 6th Row 1st Column 1 2nd Column negative 0.707 7th Row 1st Column 1 2nd Column negative 1 8th Row 1st Column 1 2nd Column negative 0.707 EndMatrix With bottom brace Underscript upper A Endscripts StartBinomialOrMatrix a 0 Choose a 1 EndBinomialOrMatrix equals ModifyingBelow Start 8 By 1 Matrix 1st Row 1.196 2nd Row 4.242 3rd Row 5.291 4th Row 3.707 5th Row 1.117 6th Row negative 2.143 7th Row negative 2.645 8th Row negative 2.287 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column right double arrow StartBinomialOrMatrix a 0 Choose a 1 EndBinomialOrMatrix equals upper A minus upper M equals StartBinomialOrMatrix 1.0597 Choose 4.1726 EndBinomialOrMatrix EndLayout
S
ta
r
tLay
ou
t
 1stMR o
w  1st Co
lumn B
lank 2nd Column ModifyingBelow Start 8 By 2 Matrix 1st Row 1st Column 1 2nd Column 0 2nd Row 1st Column 1 2nd Column 0.707 3rd Row 1st Column 1 2nd Column 1 4th Row 1st Column 1 2nd Column 0.707 5th Row 1st Column 1 2nd Column 0 6th Row 1st Column 1 2nd Column negative 0.707 7th Row 1st Column 1 2nd Column negative 1 8th Row 1st Column 1 2nd Column negative 0.707 EndMatrix With bottom brace Underscript upper A Endscripts StartBinomialOrMatrix a 0 Choose a 1 EndBinomialOrMatrix equals ModifyingBelow Start 8 By 1 Matrix 1st Row 1.196 2nd Row 4.242 3rd Row 5.291 4th Row 3.707 5th Row 1.117 6th Row negative 2.143 7th Row negative 2.645 8th Row negative 2.287 EndMatrix With bottom brace Underscript upper M Endscripts 2nd Row 1st Column Blank 2nd Column right double arrow StartBinomialOrMatrix a 0 Choose a 1 EndBinomialOrMatrix equals upper A minus upper M equals StartBinomialOrMatrix 1.0597 Choose 4.1726 EndBinomialOrMatrix EndLayout
Hence, the DC offset is 1.0597 V, and the amplitude is 4.1726. In Fig. 17.17, we  
have plotted y = 1.0597 + 4.1726 × sin2π250t and the sampled data.
Table 17.11 Samples of a sine signal (with noise) 
t [ms]
0.000
0.500
1.000
1.500
2.000
2.500
3.000
3.500 
y [V]
1.196
4.242
5.291
3.707
1.117
−2.143
−2.645
−2.287 

368
17
Curve Fitting
Fig. 17.17 Data and the best ﬁt

Chapter 18 
Introduction to Control Theory 
Abstract Control theory may or may not be part of the electrical measurement 
curriculum, but it is such a common instrument in a physics laboratory that a funda-
mental understanding of its operation is necessary. This chapter focuses on the PID 
controller, feedback models and stability criteria, the need for integration and differ-
entiation of the error signal and how to identify an unknown system. It is explained 
how control parameters are derived using rules of thumb (Ziegler–Nichol’s) or 
phase/gain margins. Finally, this chapter illustrates how a control algorithm can 
be implemented in a computer system using either Euler transformation or bilinear 
transformation. 
18.1 
Control Systems 
Figure 18.1 illustrates a control system (Fig. 18.1).
G(s) represents the ‘plant’ that we want to control, for example, a furnace whose 
temperature we want to control, y(t) is the ‘process value’ (the actual temperature) 
and x(t) is the ‘set value’ (the temperature we would like the oven to have). The 
process value is fed back via a (temperature) sensor and subtracted from the set 
value to produce the ‘error signal’ e(t). C(s) is the ‘controller’ whose job it is to 
produce a voltage u(t) depending on e(t) such that the process value is always equal 
to x(t). 
There are several different kinds of controllers, but here we will only describe the 
PID controller (since it is the most common type of controller in a physics lab). Our 
objective here is to ﬁnd the C(s) control function so that y(t) = x(t), and we need to 
do that so that the system is ﬁrst of all stable; all feedback systems have a potential 
risk of instability. After a change in the set value (or some other disturbance), there 
will be some transient events on all signals, but after some time (‘settling time’), we 
should again have y(t) = x(t), i.e., e(t) = 0; our system should not have a steady state 
error. 
Other properties of interest are the system’s reaction to step changes in the set 
value (the ‘step response’), see Fig. 18.2.
© The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8_18 
369

370
18
Introduction to Control Theory
Fig. 18.1 A control system
Fig. 18.2 Step response 
Fig. 18.3 Signal model 
The risetime is the time it takes to go from 10 to 90% of the ﬁnal value and 
the settling time is the time it takes for the output to stabilize within 5% of the 
ﬁnal value. The overshoot is the maximum voltage above the ﬁnal voltage level. All 
these parameters are affected when we change the parameters of the controller, and 
different applications have different priorities (overshoot, rise time or settling time). 
In this context, we will not worry too much about them; our main priority here is to 
ﬁnd the conditions where the system is stable and has no steady state error. 
In most systems, it is also assumed that the sensor feedback system has a transfer 
function F(s) = 1 and that is what we will assume here. To make sure that we don’t 
get too complicated equations, initially, we will limit our plant systems to ﬁrst-order 
systems; G(s) =1/(s + a). That will allow us to focus more on the understanding of the

18.2 Feedback Systems
371
control function’s inﬂuence on the system’s behavior. We will look at second-order 
systems later. 
18.2 
Feedback Systems 
In our ﬁrst analysis of the control system, we will cancel the controller and just look 
at the plant with feedback and analyze its behavior, see Fig. 18.3. 
The signal e(t) = x(t) –  y(t) is the difference between the input signal and the 
output signal. Let’s ﬁnd the transfer function of this system: 
StartLayout 1st Row 1st Column Blank 2nd Column upper Y left pare
nthesis s right parenthesis equals up per G left parenthesis s right parenthesis dot upper E left parenthesis s right parenthesis equals upper G left parenthesis s right parenthesis left parenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis equals upper G left parenthesis s right parenthesis upper X left parenthesis s right parenthesis minus upper G left parenthesis s right parenthesis upper Y left parenthesis s right parenthesis 2nd Row 1st Column Blank 2nd Column upper Y left parenthesis s right parenthesis left parenthesis 1 plus upper G left parenthesis s right parenthesis right parenthesis equals upper X left parenthesis s right parenthesis upper G left parenthesis s right parenthesis right double arrow upper H left parenthesis s right parenthesis equals StartFraction upper Y left parenthesis s right parenthesis Over upper X left parenthesis s right parenthesis EndFraction equals StartFraction upper G left parenthesis s right parenthesis Over 1 plus upper G left parenthesis s right parenthesis EndFraction EndLayout
StartLa
yout 1st Row 1st Column Blank 2nd Column upper Y left parenthesis s right parenthesis equals upper G left parenthesis s right parenthesis dot upper E left parenthesis s right parenthesis equals upper G left parenthesis s right parenthesis left parenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis equals upper G left parenthesis s right parenthesis upper X left parenthesis s right parenthesis minus upper G left parenthesis s right parenthesis upper Y left parenthesis s right parenthesis 2nd Row 1st Column Blank 2nd Column upper Y left parenthesis s right parenthesis left parenthesis 1 plus upper G left parenthesis s right parenthesis right parenthesis equals upper X left parenthesis s right parenthesis upper G left parenthesis s right parenthesis right double arrow upper H left parenthesis s right parenthesis equals StartFraction upper Y left parenthesis s right parenthesis Over upper X left parenthesis s right parenthesis EndFraction equals StartFraction upper G left parenthesis s right parenthesis Over 1 plus upper G left parenthesis s right parenthesis EndFraction EndLayout
St artLayo
ut 1st Row 1st Column Blank 2nd Column upper Y left parenthesis s right parenthesis equals upper G left parenthesis s right parenthesis dot upper E left parenthesis s right parenthesis equals upper G left parenthesis s right parenthesis left parenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis equals upper G left parenthesis s right parenthesis upper X left parenthesis s right parenthesis minus upper G left parenthesis s right parenthesis upper Y left parenthesis s right parenthesis 2nd Row 1st Column Blank 2nd Column upper Y left parenthesis s right parenthesis left parenthesis 1 plus upper G left parenthesis s right parenthesis right parenthesis equals upper X left parenthesis s right parenthesis upper G left parenthesis s right parenthesis right double arrow upper H left parenthesis s right parenthesis equals StartFraction upper Y left parenthesis s right parenthesis Over upper X left parenthesis s right parenthesis EndFraction equals StartFraction upper G left parenthesis s right parenthesis Over 1 plus upper G left parenthesis s right parenthesis EndFraction EndLayout
From Eq. (18.1) we can see that this system will be unstable if 1 + G(s) = 0, i.e., 
if 
upper G l eft parenthesi s  s rig h t paren
thesis equals negative 1 equals 1 dot e Superscript minus j 180 Super Superscript ring Superscript Baseline equals StartAbsoluteValue upper G left parenthesis s right parenthesis EndAbsoluteValue dot e Superscript phi left parenthesis omega right parenthesis
Hence, if the system has a gain of +1 (or greater) for the frequency where the 
phase shift is −180°, the system will be unstable. So, we can see immediately from 
the Bode plot if the system is stable or not; just check the phase shift at ampliﬁcation 
= 1 (0 dB) and the ampliﬁcation at ϕ = −180°, see Fig. 18.4. The distance from 
the phase diagram to −180° at 0 dB is the phase margin, which tells you how far 
the phase diagram is from instability. The distance from the gain diagram to 0 dB at 
phase angle −180° is the gain margin, which tells you how far the gain diagram is 
from instability. (We want some margin because there are some uncertainties in the 
system that could push it over the ‘edge’ and become unstable if we are too close to 
the margins.)
From Fig. 18.4, we can see that there are two things that could make our system 
unstable; either if we ‘lift’ (amplify) the gain diagram or if we ‘lower’ the phase 
diagram. Any action we take that either lifts the gain or lowers the phase may render 
the system unstable. 
Something else we can see in Eq. (18.1) is that if G(s) >> 1, then H(s) ≈ 1, which 
would mean that y(t) ≈ x(t), (which is what we are looking for in a control system), 
and for that reason it is tempting to amplify G(s) with some factor KP, see Fig. 18.5.
However, by doing that we push the gain diagram in the Bode plot upwards, see 
Fig. 18.6, which means that the gain margin decreases. In Fig. 18.6, we can see 
that we ampliﬁed the signal too much; at the phase shift angle −180°, we have an 
ampliﬁcation >0 dB, and the system is unstable (it will oscillate).

372
18
Introduction to Control Theory
Fig. 18.4 The Bode plot
Fig. 18.5 Amplifying
Do you see the problem? On the one hand, we want a large ampliﬁcation for y(t) 
to follow x(t), but a large ampliﬁcation might render the system unstable. That means 
that we need to be a little shrewder than ‘just amplifying’. 
The simple KP ampliﬁer above only affected the gain diagram. In this chapter, we 
will learn to use other ‘ampliﬁers’ that also affect the phase diagram in such a way 
that we avoid instability when we amplify the signal. 
In Fig. 18.5, the controller just ampliﬁes the error signal; the controller produces 
an output signal proportional to the error and is therefore called a proportional 
controller, or just  P controller. Let’s look at a general system.

18.3 Control Systems
373
Fig. 18.6 The Bode plot after ampliﬁcation
18.3 
Control Systems 
Figure 18.7 illustrates our control system. 
In Fig. 18.5, C(s) = KP and apart from pushing the system closer towards insta-
bility, it also has another problem; it has a ‘steady state’ error. That means that when 
things have ‘settled down’, typically after a change in the set value, there would still 
be an error between the set and process values, i.e., e(t) would not be zero and x(t)
/= y(t) (which after all is the whole point of the system) unless KP = ∞. To see  why  
that is, and to ﬁgure out exactly what the remaining steady state error is, we need a 
system to work with. Let’s assume the plant is a simple ﬁrst-order system, i.e., G(s) 
= 1/(s + a) and C(s) = KP, see Fig. 18.8.
Let’s assume ﬁrst that the error e(t) is  = 0 in Fig.  18.8. Since the control system 
just multiplies it by a constant, the output from the control system will also be = 0 
and multiplying G(s) with 0 is of course also = 0; y(t) = 0! But in that case, the error
Fig. 18.7 Our control system 

374
18
Introduction to Control Theory
Fig. 18.8 The plant is a ﬁrst-order system
e(t) = x(t) –  y(t) = x(t), which can only be zero if x(t) = 0. Hence, if x(t) /= 0, we 
cannot have e(t) = 0, and there must be a difference between y(t) and x(t). 
So, what is the steady state error e(t)? Let’s see: 
left parenthesis up er  
X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis dot upper K Subscript upper P Baseline dot StartFraction 1 Over s plus a EndFraction equals upper Y left parenthesis s right parenthesis right double arrow left parenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis dot upper K Subscript upper P Baseline equals s upper Y left parenthesis s right parenthesis plus a upper Y left parenthesis s right parenthesis
le ft p arenthesis upper X left parent he sis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis dot upper K Subscript upper P Baseline dot StartFraction 1 Over s plus a EndFraction equals upper Y left parenthesis s right parenthesis right double arrow left parenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis dot upper K Subscript upper P Baseline equals s upper Y left parenthesis s right parenthesis plus a upper Y left parenthesis s right parenthesis
Going back to time–space (using the results from Problem 7.6), we have that 
x left parenth esis t right parenthesis minus y left parenthesis t right parenthesis equals StartFraction 1 Over upper K Subscript upper P Baseline EndFraction left parenthesis y prime left parenthesis t right parenthesis plus a y left parenthesis t right parenthesis right parenthesis
x le
ft parenthesis t right parenthesis minus y left parenthesis t right parenthesis equals StartFraction 1 Over upper K Subscript upper P Baseline EndFraction left parenthesis y prime left parenthesis t right parenthesis plus a y left parenthesis t right parenthesis right parenthesis
‘Steady state’ implies, by deﬁnition, that y’(t) = 0, so 
x left pare
n thesis t right parenthesis equals y left parenthesis t right parenthesis left parenthesis StartFraction a Over upper K Subscript upper P Baseline EndFraction plus 1 right parenthesis right double arrow y left parenthesis t right parenthesis equals StartFraction 1 Over a divided by upper K Subscript upper P Baseline plus 1 EndFraction x left parenthesis t right parenthesis equals StartFraction upper K Subscript upper P Baseline Over a plus upper K Subscript upper P Baseline EndFraction x left parenthesis t right parenthesis
x le
ft 
p
arenthes
is t right parenthesis equals y left parenthesis t right parenthesis left parenthesis StartFraction a Over upper K Subscript upper P Baseline EndFraction plus 1 right parenthesis right double arrow y left parenthesis t right parenthesis equals StartFraction 1 Over a divided by upper K Subscript upper P Baseline plus 1 EndFraction x left parenthesis t right parenthesis equals StartFraction upper K Subscript upper P Baseline Over a plus upper K Subscript upper P Baseline EndFraction x left parenthesis t right parenthesis
x le ft  parenthes
is  t right parenthesis equals y left parenthesis t right parenthesis left parenthesis StartFraction a Over upper K Subscript upper P Baseline EndFraction plus 1 right parenthesis right double arrow y left parenthesis t right parenthesis equals StartFraction 1 Over a divided by upper K Subscript upper P Baseline plus 1 EndFraction x left parenthesis t right parenthesis equals StartFraction upper K Subscript upper P Baseline Over a plus upper K Subscript upper P Baseline EndFraction x left parenthesis t right parenthesis
x left  p
aren
thesis t right parenthesis equals y left parenthesis t right parenthesis left parenthesis StartFraction a Over upper K Subscript upper P Baseline EndFraction plus 1 right parenthesis right double arrow y left parenthesis t right parenthesis equals StartFraction 1 Over a divided by upper K Subscript upper P Baseline plus 1 EndFraction x left parenthesis t right parenthesis equals StartFraction upper K Subscript upper P Baseline Over a plus upper K Subscript upper P Baseline EndFraction x left parenthesis t right parenthesis
which conﬁrms that KP needs to be inﬁnite for y(t) = x(t) (but that would make the 
system unstable). For example, if a = KP = 1, and we set x(t) = 1, y(t) would be 
0.5. So, the P regulator has some problems and in the next section we will ﬁx that, 
but ﬁrst, we will present a theorem that will simplify our analysis a little bit. 
In the above analysis, we considered the entire system’s transfer function Y(s)/ 
X(s), the closed loop system. That is not necessary; we only need to consider the 
open loop system GOL(s) = C(s)·G(s) (if  F(s) = 1). Nyquist’s (simpliﬁed) stability 
criterion states that a feedback system is stable if StartAbsoluteValue upper G Subscript OL Baseline left parenthesis omega right parenthesis EndAbsoluteValue less than 1 at the frequency 
where phi Sub s cript OL Baseline left parenthesis omega right parenthesis equals minus 180 Superscript ring. (Makes sense; the subtraction in the feedback adds the 
other 180°.) 
18.4 
The PI Controller 
The trick that eliminates the steady state error is to integrate the error signal: 
u left pa re nthesis t r
i
ght par enth e
s
is equa ls upper K Subscript upper P Baseline dot e left parenthesis t right parenthesis plus upper K Subscript upper I Baseline integral e left parenthesis t right parenthesis d t equals upper K Subscript upper P Baseline left parenthesis e left parenthesis t right parenthesis plus StartFraction 1 Over upper T Subscript upper I Baseline EndFraction integral e left parenthesis t right parenthesis d t right parenthesis
u 
l
eft pa
r
enthesis t right parenthesis equals upper K Subscript upper P Baseline dot e left parenthesis t right parenthesis plus upper K Subscript upper I Baseline integral e left parenthesis t right parenthesis d t equals upper K Subscript upper P Baseline left parenthesis e left parenthesis t right parenthesis plus StartFraction 1 Over upper T Subscript upper I Baseline EndFraction integral e left parenthesis t right parenthesis d t right parenthesis

18.4 The PI Controller
375
where T I is the integration time constant, and this is a PI control function 
(Proportional and Integrating). Taking the Laplace transform of both sides gives 
us: 
StartLayo u
t
 1st Ro w 1st Column upper U left parenthesis s right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis upper E left parenthesis s right parenthesis plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction upper E left parenthesis s right parenthesis right parenthesis equals upper K Subscript p Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis upper E left parenthesis s right parenthesis right double arrow 2nd Row 1st Column Blank 2nd Column upper C left parenthesis s right parenthesis equals StartFraction upper U left parenthesis s right parenthesis Over upper E left parenthesis s right parenthesis EndFraction equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis EndLayout
Start Layo
u
t 1s t
 
Ro w 1st Column upper U left parenthesis s right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis upper E left parenthesis s right parenthesis plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction upper E left parenthesis s right parenthesis right parenthesis equals upper K Subscript p Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis upper E left parenthesis s right parenthesis right double arrow 2nd Row 1st Column Blank 2nd Column upper C left parenthesis s right parenthesis equals StartFraction upper U left parenthesis s right parenthesis Over upper E left parenthesis s right parenthesis EndFraction equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis EndLayout
Star
t
Layout 
1st Row 1st Column upper U left parenthesis s right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis upper E left parenthesis s right parenthesis plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction upper E left parenthesis s right parenthesis right parenthesis equals upper K Subscript p Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis upper E left parenthesis s right parenthesis right double arrow 2nd Row 1st Column Blank 2nd Column upper C left parenthesis s right parenthesis equals StartFraction upper U left parenthesis s right parenthesis Over upper E left parenthesis s right parenthesis EndFraction equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis EndLayout
StartLayo u
t
 1 st  Row 1st Column upper U left parenthesis s right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis upper E left parenthesis s right parenthesis plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction upper E left parenthesis s right parenthesis right parenthesis equals upper K Subscript p Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis upper E left parenthesis s right parenthesis right double arrow 2nd Row 1st Column Blank 2nd Column upper C left parenthesis s right parenthesis equals StartFraction upper U left parenthesis s right parenthesis Over upper E left parenthesis s right parenthesis EndFraction equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis EndLayout
Star
t
Layout 1st Row 1st Column upper U left parenthesis s right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis upper E left parenthesis s right parenthesis plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction upper E left parenthesis s right parenthesis right parenthesis equals upper K Subscript p Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis upper E left parenthesis s right parenthesis right double arrow 2nd Row 1st Column Blank 2nd Column upper C left parenthesis s right parenthesis equals StartFraction upper U left parenthesis s right parenthesis Over upper E left parenthesis s right parenthesis EndFraction equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis EndLayout
(See Problem 7.7 for the Laplace transform of an integral.) Inserting Eq. (18.5) 
into Fig. 18.8 gives us: 
left parenthesis upper X left parenthesis s right parenth e
s
is  m inus upper Y left parenthesis s right parenthesis right parenthesis dot upper C left parenthesis s right parenthesis dot upper G left parenthesis s right parenthesis equals upper Y left parenthesis s right parenthesis right double arrow left parenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis StartFraction 1 Over s plus a EndFraction equals upper Y left parenthesis s right parenthesis
left
 
parenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis dot upper C left parenthesis s right parenthesis dot upper G left parenthesis s right parenthesis equals upper Y left parenthesis s right parenthesis right double arrow left parenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis StartFraction 1 Over s plus a EndFraction equals upper Y left parenthesis s right parenthesis
le ft p arenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis dot upper C left parenthesis s right parenthesis dot upper G left parenthesis s right parenthesis equals upper Y left parenthesis s right parenthesis right double arrow left parenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis StartFraction 1 Over s plus a EndFraction equals upper Y left parenthesis s right parenthesis
left parenthesis u
p
pe r X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis equals s upper Y left parenthesis s right parenthesis plus a upper Y left parenthesis s right parenthesis
left
 
parenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis equals s upper Y left parenthesis s right parenthesis plus a upper Y left parenthesis s right parenthesis
left parenthesis u
p
pe r X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis upper K Subscript upper P Baseline left parenthesis s plus StartFraction 1 Over upper T Subscript upper I Baseline EndFraction right parenthesis equals s squared upper Y left parenthesis s right parenthesis plus a s upper Y left parenthesis s right parenthesis
le
f
t parenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis upper K Subscript upper P Baseline left parenthesis s plus StartFraction 1 Over upper T Subscript upper I Baseline EndFraction right parenthesis equals s squared upper Y left parenthesis s right parenthesis plus a s upper Y left parenthesis s right parenthesis
up per K Subscript upper P Baseline left parenthesis s upper X left parenthesis s right parenthesis minus s upper Y left parenthesis s right parenthesis right parenthesis plus StartFraction upper K Subscript upper P Baseline Over upper T Subscript upper I Baseline EndFraction left parenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis equals s squared upper Y left parenthesis s right parenthesis plus a s upper Y left parenthesis s right parenthesis
up
er K Subscript upper P Baseline left parenthesis s upper X left parenthesis s right parenthesis minus s upper Y left parenthesis s right parenthesis right parenthesis plus StartFraction upper K Subscript upper P Baseline Over upper T Subscript upper I Baseline EndFraction left parenthesis upper X left parenthesis s right parenthesis minus upper Y left parenthesis s right parenthesis right parenthesis equals s squared upper Y left parenthesis s right parenthesis plus a s upper Y left parenthesis s right parenthesis
Going back to time–space: 
up per K Subscript upper P Baseline left parenthesis x prime left parenthesis t right parenthesis minus y prime left parenthesis t right parenthesis right parenthesis plus StartFraction upper K Subscript upper P Baseline Over upper T Subscript upper I Baseline EndFraction left parenthesis x left parenthesis t right parenthesis minus y left parenthesis t right parenthesis right parenthesis equals y double prime left parenthesis t right parenthesis plus a y prime left parenthesis t right parenthesis
up
er K Subscript upper P Baseline left parenthesis x prime left parenthesis t right parenthesis minus y prime left parenthesis t right parenthesis right parenthesis plus StartFraction upper K Subscript upper P Baseline Over upper T Subscript upper I Baseline EndFraction left parenthesis x left parenthesis t right parenthesis minus y left parenthesis t right parenthesis right parenthesis equals y double prime left parenthesis t right parenthesis plus a y prime left parenthesis t right parenthesis
Again, in steady state, all derivatives are zero: 
St artFraction upper K Subscript upper P Baseline Over upper T Subscript upper I Baseline EndFraction left parenthesis x left parenthesis t right parenthesis minus y left parenthesis t right parenthesis right parenthesis equals 0 right double arrow y left parenthesis t right parenthesis equals x left parenthesis t right parenthesis
Sta
rtFraction upper K  Subscript up
per P Baseline Over upper T Subscript upper I Baseline EndFraction left parenthesis x left parenthesis t right parenthesis minus y left parenthesis t right parenthesis right parenthesis equals 0 right double arrow y left parenthesis t right parenthesis equals x left parenthesis t right parenthesis
Hence, in steady state y(t) = x(t), there is no steady state error. Unfortunately, 
while ﬁxing the steady state error, we introduced another problem. In Fig. 18.8, the  
open-loop transfer function is C(s)G(s), i.e., 
upper G Subscript OL  Baseline lef t pa r e nthesis s right 
parenthesis equals StartAbsoluteValue upper C left parenthesis s right parenthesis EndAbsoluteValue e Superscript j phi Super Subscript upper C Baseline dot StartAbsoluteValue upper G left parenthesis s right parenthesis EndAbsoluteValue e Superscript j phi Super Subscript upper G Baseline equals StartAbsoluteValue ellipsis EndAbsoluteValue dot e Superscript j left parenthesis phi Super Subscript upper C Superscript plus phi Super Subscript upper G Superscript right parenthesis
Hence, the open loop phase diagram is the sum of the phases from C(s) and G(s). 
Let’s take a closer look at the phase function of C(s): 
StartLayo u
t
 1 st  Row 1st Column upper C left parenthesis s right parenthesis 2nd Column equals upper K Subscript p Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline upper S EndFraction right parenthesis equals upper K Subscript p Baseline StartFraction upper T Subscript upper I Baseline s plus 1 Over upper T Subscript upper I Baseline s EndFraction 2nd Row 1st Column Blank 2nd Column right double arrow upper C left parenthesis omega right parenthesis equals upper K Subscript upper P Baseline StartFraction j omega upper T Subscript upper I Baseline plus 1 Over normal j omega normal upper T Subscript normal upper I Baseline EndFraction 3rd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline StartAbsoluteValue ellipsis EndAbsoluteValue dot e Superscript j left parenthesis tangent Super Superscript negative 1 Superscript omega upper T Super Subscript upper I Superscript minus 90 Super Superscript ring Superscript right parenthesis Baseline 4th Row 1st Column Blank 2nd Column right double arrow ModifyingBelow tangent Superscript negative 1 Baseline omega upper T Subscript upper I Baseline minus 90 Superscript ring Baseline With bottom brace Underscript less than or equals 0 factorial Endscripts EndLayout
Sta r
t
Layo ut
 1st Row 1st Column upper C left parenthesis s right parenthesis 2nd Column equals upper K Subscript p Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline upper S EndFraction right parenthesis equals upper K Subscript p Baseline StartFraction upper T Subscript upper I Baseline s plus 1 Over upper T Subscript upper I Baseline s EndFraction 2nd Row 1st Column Blank 2nd Column right double arrow upper C left parenthesis omega right parenthesis equals upper K Subscript upper P Baseline StartFraction j omega upper T Subscript upper I Baseline plus 1 Over normal j omega normal upper T Subscript normal upper I Baseline EndFraction 3rd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline StartAbsoluteValue ellipsis EndAbsoluteValue dot e Superscript j left parenthesis tangent Super Superscript negative 1 Superscript omega upper T Super Subscript upper I Superscript minus 90 Super Superscript ring Superscript right parenthesis Baseline 4th Row 1st Column Blank 2nd Column right double arrow ModifyingBelow tangent Superscript negative 1 Baseline omega upper T Subscript upper I Baseline minus 90 Superscript ring Baseline With bottom brace Underscript less than or equals 0 factorial Endscripts EndLayout
StartLayout 1st Row 1st Column upper C left parenthesis s right parenthesis 2nd Column equals upper K Subscript p Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline upper S EndFraction right parenthesis equals upper K Subscript p Baseline StartFraction upper T Subscript upper I Baseline s plus 1 Over upper T Subscript upper I Baseline s EndFraction 2nd Row 1st Column Blank 2nd Column right double arrow upper C left parenthesis omega right parenthesis equals upper K Subscript upper P Baseline StartFraction j omega upper T Subscript upper I Baseline plus 1 Over normal j omega normal upper T Subscript normal upper I Baseline EndFraction 3rd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline StartAbsoluteValue ellipsis EndAbsoluteValue dot e Superscript j left parenthesis tangent Super Superscript negative 1 Superscript omega upper T Super Subscript upper I Superscript minus 90 Super Superscript ring Superscript right parenthesis Baseline 4th Row 1st Column Blank 2nd Column right double arrow ModifyingBelow tangent Superscript negative 1 Baseline omega upper T Subscript upper I Baseline minus 90 Superscript ring Baseline With bottom brace Underscript less than or equals 0 factorial Endscripts EndLayout

376
18
Introduction to Control Theory
StartLayout  1
st Ro w 1st Column upper C left parenthesis s right parenthesis 2nd Column equals upper K Subscript p Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline upper S EndFraction right parenthesis equals upper K Subscript p Baseline StartFraction upper T Subscript upper I Baseline s plus 1 Over upper T Subscript upper I Baseline s EndFraction 2nd Row 1st Column Blank 2nd Column right double arrow upper C left parenthesis omega right parenthesis equals upper K Subscript upper P Baseline StartFraction j omega upper T Subscript upper I Baseline plus 1 Over normal j omega normal upper T Subscript normal upper I Baseline EndFraction 3rd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline StartAbsoluteValue ellipsis EndAbsoluteValue dot e Superscript j left parenthesis tangent Super Superscript negative 1 Superscript omega upper T Super Subscript upper I Superscript minus 90 Super Superscript ring Superscript right parenthesis Baseline 4th Row 1st Column Blank 2nd Column right double arrow ModifyingBelow tangent Superscript negative 1 Baseline omega upper T Subscript upper I Baseline minus 90 Superscript ring Baseline With bottom brace Underscript less than or equals 0 factorial Endscripts EndLayout
Start
Layo ut 1 s t  R o w 1st Colu mn u pper C
 left pa rent hesis
 s right parenthesis 2nd Column equals upper K Subscript p Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline upper S EndFraction right parenthesis equals upper K Subscript p Baseline StartFraction upper T Subscript upper I Baseline s plus 1 Over upper T Subscript upper I Baseline s EndFraction 2nd Row 1st Column Blank 2nd Column right double arrow upper C left parenthesis omega right parenthesis equals upper K Subscript upper P Baseline StartFraction j omega upper T Subscript upper I Baseline plus 1 Over normal j omega normal upper T Subscript normal upper I Baseline EndFraction 3rd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline StartAbsoluteValue ellipsis EndAbsoluteValue dot e Superscript j left parenthesis tangent Super Superscript negative 1 Superscript omega upper T Super Subscript upper I Superscript minus 90 Super Superscript ring Superscript right parenthesis Baseline 4th Row 1st Column Blank 2nd Column right double arrow ModifyingBelow tangent Superscript negative 1 Baseline omega upper T Subscript upper I Baseline minus 90 Superscript ring Baseline With bottom brace Underscript less than or equals 0 factorial Endscripts EndLayout
StartLayout 1st Row 1st Column upper C left parenthesis s right parenthesis 2nd Column equals upper K Subscript p Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline upper S EndFraction right parenthesis equals upper K Subscript p Baseline StartFraction upper T Subscript upper I Baseline s plus 1 Over upper T Subscript upper I Baseline s EndFraction 2nd Row 1st Column Blank 2nd Column right double arrow upper C left parenthesis omega right parenthesis equals upper K Subscript upper P Baseline StartFraction j omega upper T Subscript upper I Baseline plus 1 Over normal j omega normal upper T Subscript normal upper I Baseline EndFraction 3rd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline StartAbsoluteValue ellipsis EndAbsoluteValue dot e Superscript j left parenthesis tangent Super Superscript negative 1 Superscript omega upper T Super Subscript upper I Superscript minus 90 Super Superscript ring Superscript right parenthesis Baseline 4th Row 1st Column Blank 2nd Column right double arrow ModifyingBelow tangent Superscript negative 1 Baseline omega upper T Subscript upper I Baseline minus 90 Superscript ring Baseline With bottom brace Underscript less than or equals 0 factorial Endscripts EndLayout
S
tart
Layout 1st Row 1st Column upper C left parenthesis s right parenthesis 2nd Column equals upper K Subscript p Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline upper S EndFraction right parenthesis equals upper K Subscript p Baseline StartFraction upper T Subscript upper I Baseline s plus 1 Over upper T Subscript upper I Baseline s EndFraction 2nd Row 1st Column Blank 2nd Column right double arrow upper C left parenthesis omega right parenthesis equals upper K Subscript upper P Baseline StartFraction j omega upper T Subscript upper I Baseline plus 1 Over normal j omega normal upper T Subscript normal upper I Baseline EndFraction 3rd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline StartAbsoluteValue ellipsis EndAbsoluteValue dot e Superscript j left parenthesis tangent Super Superscript negative 1 Superscript omega upper T Super Subscript upper I Superscript minus 90 Super Superscript ring Superscript right parenthesis Baseline 4th Row 1st Column Blank 2nd Column right double arrow ModifyingBelow tangent Superscript negative 1 Baseline omega upper T Subscript upper I Baseline minus 90 Superscript ring Baseline With bottom brace Underscript less than or equals 0 factorial Endscripts EndLayout
From Eq. (18.8), we can see that the PI regulator adds a negative contribution to the 
phase diagram, and it will push the phase diagram in Fig. 18.4 downwards, decreasing 
the phase margin, and hence increasing the risk of instability. The integration ﬁxed 
the steady state error, but the resulting system is more likely to be unstable. We will 
ﬁx that in a moment, but let’s ﬁrst see what happens if we instead of integrating the 
error, differentiate the error signal. 
18.5 
The PD Controller 
If we, instead of integrating the error signal, differentiate it, we get the control function 
u left pa renthesis  t right pa renthesis equals u
pper K Subscript upper P Baseline e left parenthesis t right parenthesis plus upper K Subscript upper D Baseline e prime left parenthesis t right parenthesis equals upper K Subscript upper P Baseline left parenthesis e left parenthesis t right parenthesis plus upper T Subscript upper D Baseline e prime left parenthesis t right parenthesis right parenthesis
where T D is the differentiation time constant. We ﬁnd the transfer function by taking 
the Laplace transform of both sides: 
upper U le ft pa renthesis s right parenthesis equals upper K Subscript upper P Baseline left parenthesis 1 plus upper T Subscript upper D Baseline s right parenthesis upper E left parenthesis s right parenthesis right double arrow upper C left parenthesis s right parenthesis equals StartFraction upper U left parenthesis s right parenthesis Over upper E left parenthesis s right parenthesis EndFraction equals upper K Subscript upper P Baseline left parenthesis 1 plus upper T Subscript upper D Baseline s right parenthesis
upper U l eft p arenth
esis s right parenthesis equals upper K Subscript upper P Baseline left parenthesis 1 plus upper T Subscript upper D Baseline s right parenthesis upper E left parenthesis s right parenthesis right double arrow upper C left parenthesis s right parenthesis equals StartFraction upper U left parenthesis s right parenthesis Over upper E left parenthesis s right parenthesis EndFraction equals upper K Subscript upper P Baseline left parenthesis 1 plus upper T Subscript upper D Baseline s right parenthesis
and the frequency response function is: 
StartLayo ut 1s t Row 1st  Co l u mn  upper C le ft p
arenthesis omeg a r
ight parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis 1 plus j omega upper T Subscript upper D Baseline right parenthesis equals StartAbsoluteValue ellipsis EndAbsoluteValue dot e Superscript j dot tangent Super Superscript negative 1 Superscript omega upper T Super Subscript upper D Superscript Baseline 2nd Row 1st Column Blank 2nd Column right double arrow phi left parenthesis omega right parenthesis equals ModifyingBelow tangent Superscript negative 1 Baseline omega upper T Subscript upper D Baseline With bottom brace Underscript greater than or equals 0 Endscripts EndLayout
StartLayout 1st Row 1st Column upper C left parenthesis omega right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis 1 plus j omega upper T Subscript upper D Baseline right parenthesis equals StartAbsoluteValue ellipsis EndAbsoluteValue dot e Superscript j dot tangent Super Superscript negative 1 Superscript omega upper T Super Subscript upper D Superscript Baseline 2nd Row 1st Column Blank 2nd Column right double arrow phi left parenthesis omega right parenthesis equals ModifyingBelow tangent Superscript negative 1 Baseline omega upper T Subscript upper D Baseline With bottom brace Underscript greater than or equals 0 Endscripts EndLayout
S
tar
tLayout 1st Row 1st Column upper C left parenthesis omega right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis 1 plus j omega upper T Subscript upper D Baseline right parenthesis equals StartAbsoluteValue ellipsis EndAbsoluteValue dot e Superscript j dot tangent Super Superscript negative 1 Superscript omega upper T Super Subscript upper D Superscript Baseline 2nd Row 1st Column Blank 2nd Column right double arrow phi left parenthesis omega right parenthesis equals ModifyingBelow tangent Superscript negative 1 Baseline omega upper T Subscript upper D Baseline With bottom brace Underscript greater than or equals 0 Endscripts EndLayout
When we multiply the plant function G(s) with C(s), the phase diagrams will add, 
and from 18.11, we can see that the control function will now add a phase angle >0, 
which means that the phase diagram in Fig. 18.4 is pushed upwards, and hence the 
phase margin is increased; the system is less likely to become unstable. 
Next step is of course to combine integration and differentiation.

18.6 The PID Controller
377
18.6 
The PID Controller 
In a PID controller, we both integrate and differentiate the error signal: 
u left pa r
e
nthesis  t right parenthesis equals upper K Subscript upper P Baseline left parenthesis e left parenthesis t right parenthesis plus StartFraction 1 Over upper T Subscript upper I Baseline EndFraction integral e left parenthesis t right parenthesis d t plus upper T Subscript upper D Baseline e prime left parenthesis t right parenthesis right parenthesis right double arrow
u 
l
eft par enthesis 
t
 right parenthesis equals upper K Subscript upper P Baseline left parenthesis e left parenthesis t right parenthesis plus StartFraction 1 Over upper T Subscript upper I Baseline EndFraction integral e left parenthesis t right parenthesis d t plus upper T Subscript upper D Baseline e prime left parenthesis t right parenthesis right parenthesis right double arrow
upper C left parenthesis s right parenthesis equals StartFraction upper U left parenthesis s right parenthesis Over upper E left parenthesis s right parenthesis EndFraction equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction plus upper T Subscript upper D Baseline s right parenthesis equals upper K Subscript upper P Baseline StartFraction 1 plus upper T Subscript upper I Baseline s plus upper T Subscript upper I Baseline upper T Subscript upper D Baseline s squared Over upper T Subscript upper I Baseline s EndFraction
upper C l e
f
t pa renthesis s right parenthesis equals StartFraction upper U left parenthesis s right parenthesis Over upper E left parenthesis s right parenthesis EndFraction equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction plus upper T Subscript upper D Baseline s right parenthesis equals upper K Subscript upper P Baseline StartFraction 1 plus upper T Subscript upper I Baseline s plus upper T Subscript upper I Baseline upper T Subscript upper D Baseline s squared Over upper T Subscript upper I Baseline s EndFraction
uper  C le
f
t pa re
nt hesis s  righ t parenthesis equals StartFraction upper U left parenthesis s right parenthesis Over upper E left parenthesis s right parenthesis EndFraction equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction plus upper T Subscript upper D Baseline s right parenthesis equals upper K Subscript upper P Baseline StartFraction 1 plus upper T Subscript upper I Baseline s plus upper T Subscript upper I Baseline upper T Subscript upper D Baseline s squared Over upper T Subscript upper I Baseline s EndFraction
uper
 C left parenthesis s right parenthesis equals StartFraction upper U left parenthesis s right parenthesis Over upper E left parenthesis s right parenthesis EndFraction equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction plus upper T Subscript upper D Baseline s right parenthesis equals upper K Subscript upper P Baseline StartFraction 1 plus upper T Subscript upper I Baseline s plus upper T Subscript upper I Baseline upper T Subscript upper D Baseline s squared Over upper T Subscript upper I Baseline s EndFraction
It is not obvious what happens to the phase diagram in this transfer function, and 
before we derive the phase diagram expression, we are going to make a small approxi-
mation; the transfer function of most plants is such that the required control function 
needs to have T I >> T D. In that case, we can make the following approximation: 
upper  T Sub script upper I Baseline s almost equals left parenthesis upper T Subscript upper I Baseline plus upper T Subscript upper D Baseline right parenthesis s, and in that case 
1 plus up per T  Subs crip t upper  I Bas eline  s pl us up per T Subs cript upper I Baseline upper T Subscript upper D Baseline s squared almost equals 1 plus upper T Subscript upper I Baseline s plus upper T Subscript upper D Baseline s plus upper T Subscript upper I Baseline upper T Subscript upper D Baseline s squared equals left parenthesis 1 plus upper T Subscript upper I Baseline s right parenthesis left parenthesis 1 plus upper T Subscript upper D Baseline s right parenthesis
Inserting this approximation into Eq. (18.12) gives us the following control 
function: 
upper C l ef
t p arenthesis  s right parenthesis almost equals upper K Subscript upper P Baseline StartFraction left parenthesis 1 plus upper T Subscript upper I Baseline s right parenthesis left parenthesis 1 plus upper T Subscript upper D Baseline s right parenthesis Over upper T Subscript upper I Baseline s EndFraction equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis left parenthesis 1 plus upper T Subscript upper D Baseline s right parenthesis
upe
r C l
e
ft  p arenthesis s right parenthesis almost equals upper K Subscript upper P Baseline StartFraction left parenthesis 1 plus upper T Subscript upper I Baseline s right parenthesis left parenthesis 1 plus upper T Subscript upper D Baseline s right parenthesis Over upper T Subscript upper I Baseline s EndFraction equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis left parenthesis 1 plus upper T Subscript upper D Baseline s right parenthesis
upe
r
 C left p
arenthesis s right parenthesis almost equals upper K Subscript upper P Baseline StartFraction left parenthesis 1 plus upper T Subscript upper I Baseline s right parenthesis left parenthesis 1 plus upper T Subscript upper D Baseline s right parenthesis Over upper T Subscript upper I Baseline s EndFraction equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction 1 Over upper T Subscript upper I Baseline s EndFraction right parenthesis left parenthesis 1 plus upper T Subscript upper D Baseline s right parenthesis
From Eq. (18.13), we can see that with the assumption that T I >> T D, the PID 
controller is approximately the same as cascading a PI and a PD, controller, which 
means that the total phase diagram is the sum of the PI and PD controller’s phase 
diagrams; the damage the integration does to our phase diagram (in Eq. 18.8) is  
undone by the differentiation (in Eq. 18.11), and our system is less likely to be 
unstable. 
Let’s summarize our conclusions: The P controller only ampliﬁes the error signal 
by some factor KP. Increasing KP makes the system react faster to changes in the 
set value (rise time and settling time improve) but increasing KP comes with a prize; 
the system is pushed closer to instability and the overshoot increases. Most of all 
though, a P regulator suffers from an inherent incapability of eliminating steady state 
errors. That’s why we almost always need an integrating part; by also integrating the 
error, we can eliminate the steady state error. However, the integration has a negative 
inﬂuence on the phase margin, it makes the system response slower (risetime and 
settling time increase) and it also increases the overshoot. (The only good thing about 
the integration is that it takes care of the steady state error.) The differentiation part 
is everything the integration is not; it has a positive inﬂuence on the phase margin, it 
improves the response times, and it suppresses the overshoot. 
Figure 18.9 summarizes our PID model and Fig. 18.10 is our approximation model 
when T I >> T D. Next, we need to ﬁgure out how to ﬁnd the PID parameters (KP, 
T I, and T D) for a given plant system.

378
18
Introduction to Control Theory
Fig. 18.9 PID controller model 
Fig. 18.10 Approximate model when TI >> TD 
18.7 
Identifying the System 
18.7.1 
First-Order Systems 
Before we start designing the controller, we must know what kind of system we have, 
i.e., the plant transfer function G(s). The process of ﬁnding the transfer function of 
an unknown system is called system identiﬁcation. This is a research ﬁeld of its own, 
and there is no lack of literature treating this subject in detail. Here, we will keep it 
short and only illustrate the basic ideas (that are likely to solve the most common 
problems in a physics lab). Our strategy here will be to use our a priori knowledge of 
the system (by experience or reasonable assumptions) when we identify our system: 
‘Because …., it is reasonable to assume that this is a ﬁrst order system’. We will start 
gently, by assuming that we have a ‘plant’ where we have good reasons to assume 
that it is a ﬁrst-order system. Hence, the plant function is 
upper 
G left parenthesis s right parenthesis equals StartFraction b Over s plus a EndFraction equals StartFraction b divided by a Over s divided by a plus 1 EndFraction equals StartFraction upper K Over upper T s plus 1 EndFraction
up per G
 left parenthesis s right parenthesis equals StartFraction b Over s plus a EndFraction equals StartFraction b divided by a Over s divided by a plus 1 EndFraction equals StartFraction upper K Over upper T s plus 1 EndFraction
uppe r G l
eft parenthesis s right parenthesis equals StartFraction b Over s plus a EndFraction equals StartFraction b divided by a Over s divided by a plus 1 EndFraction equals StartFraction upper K Over upper T s plus 1 EndFraction
u p per G
 left parenthesis s right parenthesis equals StartFraction b Over s plus a EndFraction equals StartFraction b divided by a Over s divided by a plus 1 EndFraction equals StartFraction upper K Over upper T s plus 1 EndFraction
where K is the ampliﬁcation and T is the system’s time constant. To ﬁnd K and T, 
we look at the step response; the output when the input is a step signal. The step 
signal has Laplace transform 1/s (see Problem 7.8) and we get the step response by 
multiplying G(s) with 1/s: 
upper Y Subscript step Baseline left parenthesis s right parenthesis equals StartFraction 1 Over s EndFraction dot StartFraction upper K Over upper T s plus 1 EndFraction equals StartFraction upper A Over s EndFraction plus StartFraction upper B Over upper T s plus 1 EndFraction equals StartFraction upper A upper T s plus upper A plus upper B s Over s left parenthesis upper T s plus 1 right parenthesis EndFraction
up p
er Y Subscript step Baseline left parenthesis s right parenthesis equals StartFraction 1 Over s EndFraction dot StartFraction upper K Over upper T s plus 1 EndFraction equals StartFraction upper A Over s EndFraction plus StartFraction upper B Over upper T s plus 1 EndFraction equals StartFraction upper A upper T s plus upper A plus upper B s Over s left parenthesis upper T s plus 1 right parenthesis EndFraction
u p per Y  S ubscript step Baseline left parenthesis s right parenthesis equals StartFraction 1 Over s EndFraction dot StartFraction upper K Over upper T s plus 1 EndFraction equals StartFraction upper A Over s EndFraction plus StartFraction upper B Over upper T s plus 1 EndFraction equals StartFraction upper A upper T s plus upper A plus upper B s Over s left parenthesis upper T s plus 1 right parenthesis EndFraction
up p
er Y Subscript step Baseline left parenthesis s right parenthesis equals StartFraction 1 Over s EndFraction dot StartFraction upper K Over upper T s plus 1 EndFraction equals StartFraction upper A Over s EndFraction plus StartFraction upper B Over upper T s plus 1 EndFraction equals StartFraction upper A upper T s plus upper A plus upper B s Over s left parenthesis upper T s plus 1 right parenthesis EndFraction
u p per Y  S ubscr ipt step Baseline left parenthesis s right parenthesis equals StartFraction 1 Over s EndFraction dot StartFraction upper K Over upper T s plus 1 EndFraction equals StartFraction upper A Over s EndFraction plus StartFraction upper B Over upper T s plus 1 EndFraction equals StartFraction upper A upper T s plus upper A plus upper B s Over s left parenthesis upper T s plus 1 right parenthesis EndFraction
upp e r Y Su
bscript step Baseline left parenthesis s right parenthesis equals StartFraction 1 Over s EndFraction dot StartFraction upper K Over upper T s plus 1 EndFraction equals StartFraction upper A Over s EndFraction plus StartFraction upper B Over upper T s plus 1 EndFraction equals StartFraction upper A upper T s plus upper A plus upper B s Over s left parenthesis upper T s plus 1 right parenthesis EndFraction

18.7 Identifying the System
379
By comparing the numerators in Eq. (18.15), we can see that A = K and AT + B 
= 0 ⇒ B = −AT = −KT. Inserted into Eq. (18.15) gives us 
upper Y Sub script step Baseline left parenthesis s right parenthesis equals StartFraction upper K Over s EndFraction minus StartFraction upper K upper T Over upper T s plus 1 EndFraction equals upper K left parenthesis StartFraction 1 Over s EndFraction minus StartFraction 1 Over s plus 1 divided by upper T EndFraction right parenthesis
up p
e r  Y Subscript step Baseline left parenthesis s right parenthesis equals StartFraction upper K Over s EndFraction minus StartFraction upper K upper T Over upper T s plus 1 EndFraction equals upper K left parenthesis StartFraction 1 Over s EndFraction minus StartFraction 1 Over s plus 1 divided by upper T EndFraction right parenthesis
u p per Y  Su
bscript step Baseline left parenthesis s right parenthesis equals StartFraction upper K Over s EndFraction minus StartFraction upper K upper T Over upper T s plus 1 EndFraction equals upper K left parenthesis StartFraction 1 Over s EndFraction minus StartFraction 1 Over s plus 1 divided by upper T EndFraction right parenthesis
up p
er Y Subscript step Baseline left parenthesis s right parenthesis equals StartFraction upper K Over s EndFraction minus StartFraction upper K upper T Over upper T s plus 1 EndFraction equals upper K left parenthesis StartFraction 1 Over s EndFraction minus StartFraction 1 Over s plus 1 divided by upper T EndFraction right parenthesis
up per Y
 
Subscript step Baseline left parenthesis s right parenthesis equals StartFraction upper K Over s EndFraction minus StartFraction upper K upper T Over upper T s plus 1 EndFraction equals upper K left parenthesis StartFraction 1 Over s EndFraction minus StartFraction 1 Over s plus 1 divided by upper T EndFraction right parenthesis
Inverse Laplace transform of Eq. (18.16) gives us the time function: 
y Subscript 
s
te p easel i
ne left parenthesis t right parenthesis equals upper K left parenthesis 1 minus e Superscript negative t divided by upper T Baseline right parenthesis
This step response is plotted in Fig. 18.11, and in Fig. 18.12 we have plotted the 
Bode diagram for the case where K and T are both = 1. 
Fig. 18.11 Step response of ﬁrst-order system 
Fig. 18.12 Bode plot of ﬁrst-order system

380
18
Introduction to Control Theory
Fig. 18.13 Step response of ﬁrst-order system with ‘dead time’ 
From the Bode diagram, we can see that the phase shift is never less than −90° 
and since it takes −180° for the system to be unstable, it appears that ﬁrst-order 
systems are inherently stable. However, in a real plant, that is only an illusion; most 
plants have an inherent delay t0, before they respond to a step input (‘dead time’). 
This is illustrated in Fig. 18.13. 
The transfer function of the delayed system is e Superscript minus s t 0 times the non-delayed transfer 
function (see Problem 7.11): 
upper G  l eft parenthesis s right parenthesis equals StartFraction upper K dot e Superscript minus s t 0 Baseline Over upper T s plus 1 EndFraction
u p per G
 left parenthesis s right parenthesis equals StartFraction upper K dot e Superscript minus s t 0 Baseline Over upper T s plus 1 EndFraction
This inherent delay can have a dramatic impact on stability. To see that we ﬁnd 
the Bode plot functions: 
StartLa yo ut 1st Row 1st Column upper G left parenthesis omega right parenthesis 2nd Column equals StartFraction upper K dot e Superscript minus j omega t 0 Baseline Over j omega upper T plus 1 EndFraction 2nd Row 1st Column Blank 2nd Column right double arrow StartAbsoluteValue upper G left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue upper K EndAbsoluteValue Over StartRoot omega squared upper T squared plus 1 EndRoot EndFraction phi left parenthesis omega right parenthesis equals ModifyingBelow minus omega t 0 With bottom brace Underscript From delay Endscripts minus tangent Superscript negative 1 Baseline omega upper T EndLayout
Star tLay
o ut 1st  
Row 1st Column upper G left parenthesis omega right parenthesis 2nd Column equals StartFraction upper K dot e Superscript minus j omega t 0 Baseline Over j omega upper T plus 1 EndFraction 2nd Row 1st Column Blank 2nd Column right double arrow StartAbsoluteValue upper G left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue upper K EndAbsoluteValue Over StartRoot omega squared upper T squared plus 1 EndRoot EndFraction phi left parenthesis omega right parenthesis equals ModifyingBelow minus omega t 0 With bottom brace Underscript From delay Endscripts minus tangent Superscript negative 1 Baseline omega upper T EndLayout
√
Star tL ayou
t 1st Row 
1st Column upper G left parenthesis omega right parenthesis 2nd Column equals StartFraction upper K dot e Superscript minus j omega t 0 Baseline Over j omega upper T plus 1 EndFraction 2nd Row 1st Column Blank 2nd Column right double arrow StartAbsoluteValue upper G left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue upper K EndAbsoluteValue Over StartRoot omega squared upper T squared plus 1 EndRoot EndFraction phi left parenthesis omega right parenthesis equals ModifyingBelow minus omega t 0 With bottom brace Underscript From delay Endscripts minus tangent Superscript negative 1 Baseline omega upper T EndLayout StartLayout 1st Row 1st Column upper G left parenthesis omega right parenthesis 2nd Column equals StartFraction upper K dot e Superscript minus j omega t 0 Baseline Over j omega upper T plus 1 EndFraction 2nd Row 1st Column Blank 2nd Column right double arrow StartAbsoluteValue upper G left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue upper K EndAbsoluteValue Over StartRoot omega squared upper T squared plus 1 EndRoot EndFraction phi left parenthesis omega right parenthesis equals ModifyingBelow minus omega t 0 With bottom brace Underscript From delay Endscripts minus tangent Superscript negative 1 Baseline omega upper T EndLayout S
tartL ayout 
1st Row 1st Column upper G left parenthesis omega right parenthesis 2nd Column equals StartFraction upper K dot e Superscript minus j omega t 0 Baseline Over j omega upper T plus 1 EndFraction 2nd Row 1st Column Blank 2nd Column right double arrow StartAbsoluteValue upper G left parenthesis omega right parenthesis EndAbsoluteValue equals StartFraction StartAbsoluteValue upper K EndAbsoluteValue Over StartRoot omega squared upper T squared plus 1 EndRoot EndFraction phi left parenthesis omega right parenthesis equals ModifyingBelow minus omega t 0 With bottom brace Underscript From delay Endscripts minus tangent Superscript negative 1 Baseline omega upper T EndLayout
From the phase function, we can see that the delay adds a negative contribution 
to the phase diagram and stability is no longer guaranteed. The system in Fig. 18.12 
also has an ampliﬁcation of just 1. In Fig. 18.14, we have plotted the Bode diagram 
of a ﬁrst-order system with a dead time of two seconds and an inherent ampliﬁcation 
of 5 and it is already instable. (We also need to add the negative phase contribution 
from the integration part of the controller.)
Example 18.1 Figure 18.15 below illustrates a setup to identify the transfer func-
tion of a furnace heating system. The step and the step response are illustrated in 
Fig. 18.16. Find the transfer function of the system and plot the Bode diagram.
Solution We have an ampliﬁcation of (5–0.5)/(3–1) = 2.25, t0 = 3.5 s and T = 18 s:

18.7 Identifying the System
381
Fig. 18.14 Bode plot of ﬁrst-order system with ‘dead time’
Fig. 18.15 Identifying the system 
t 
[V] 
63 % 
3.5 s 
1 V 
18 s 
0.5 V 
5 V 
3 V 
Fig. 18.16 The step and the step response

382
18
Introduction to Control Theory
Fig. 18.17 The bode plot 
upper G left  parenthesis s right parenthesis equals StartFraction 2.25 dot e Superscript minus 3.5 s Baseline Over 18 s plus 1 EndFraction right double arrow upper G left parenthesis omega right parenthesis equals StartFraction 2.25 Over StartRoot 18 squared omega squared plus 1 EndRoot EndFraction dot e Superscript minus j left parenthesis 3.5 omega plus tangent Super Superscript negative 1 Superscript 18 omega right parenthesis
uppe r G 
left par
enthesis s right parenthesis equals StartFraction 2.25 dot e Superscript minus 3.5 s Baseline Over 18 s plus 1 EndFraction right double arrow upper G left parenthesis omega right parenthesis equals StartFraction 2.25 Over StartRoot 18 squared omega squared plus 1 EndRoot EndFraction dot e Superscript minus j left parenthesis 3.5 omega plus tangent Super Superscript negative 1 Superscript 18 omega right parenthesis
√
upper G  lef
t parenthesis s righ
t parenthesis equals StartFraction 2.25 dot e Superscript minus 3.5 s Baseline Over 18 s plus 1 EndFraction right double arrow upper G left parenthesis omega right parenthesis equals StartFraction 2.25 Over StartRoot 18 squared omega squared plus 1 EndRoot EndFraction dot e Superscript minus j left parenthesis 3.5 omega plus tangent Super Superscript negative 1 Superscript 18 omega right parenthesis
The Bode diagram is illustrated in Fig. 18.17. We have a phase margin of approx-
imately 90° and a gain margin of approximately 4. The closed-loop system would 
be stable. 
18.7.2 
Second-Order Systems 
Second-order systems are described by the general transfer function 
upper H
 le
ft parenthesis s right parenthesis equals StartFraction omega 0 squared Over s squared plus 2 zeta omega 0 plus omega 0 squared EndFraction
up er H le ft pa
re
nthesis s right parenthesis equals StartFraction omega 0 squared Over s squared plus 2 zeta omega 0 plus omega 0 squared EndFraction
where omega 0 is the resonance frequency of the undamped system and ζ is the damping 
constant. In Fig. 18.18, we have plotted the step response of a second-order system 
for different damping constants (ζ = d) with ome ga 0 equals 1.
If the damping is 0, there is no damping at all, and the systems oscillate indeﬁnitely. 
If the damping is <1 (but >0), there will be a gradual decrease in the oscillation 
amplitude (the system is ‘underdamped’), if the damping = 1, there is no oscillations 
at all (‘critical damping’) and if the damping is >1 the system is ‘overdamped’. We 
can  see in Fig.  18.18 that the system response time decreases when the damping 
increases. The damping also has some impact on the oscillation frequency. For a 
certain damping, the oscillation frequency is (ζ < 1)  
ome ga Subscript d Baseline equals omega 0 StartRoot 1 minus zeta squared EndRoot
√
om ega S
ubscript d Baseline equals omega 0 StartRoot 1 minus zeta squared EndRoot
Figure 18.19 illustrates the step response parameters you need to identify a second-
order system. First you determine the ‘overshoot ratio’, see Fig. 18.19. From the

18.7 Identifying the System
383
Fig. 18.18 The step response for different damping constants
overshoot ratio (OS), you ﬁnd the damping constant: 
zeta equals StartRoot StartFraction left parenthesis ln OS right parenthesis squared Over normal pi squared plus left parenthesis ln OS right parenthesis squared EndFraction EndRoot
/
zeta  equals StartRoot StartFraction left parenthesis ln OS right parenthesis squared Over normal pi squared plus left parenthesis ln OS right parenthesis squared EndFraction EndRoot
zet a equa ls St
artRoot StartFraction left parenthesis ln OS right parenthesis squared Over normal pi squared plus left parenthesis ln OS right parenthesis squared EndFraction EndRoot
(don’t ask), and from the period T you ﬁnd ωd which gives you ω0 (Eq. 18.21).
Fig. 18.19 Step response parameters for a second-order system 

384
18
Introduction to Control Theory
18.8 
Finding the Control Parameters 
In this section, we will ﬁnd control parameters for our system in Example 18.1. 
First, we will do it using a ‘rule of thumb’ strategy that seems to be ‘plan A’ in most 
practical implementations. We will also discuss the details of a more ‘scientiﬁc’ 
approach where we consider phase and gain margin requirements. 
18.8.1 
Ziegler–Nichol’s Rule of Thumb 
First, we study the Bode plot of the plant, see Fig. 18.20. From the Bode plot, we 
determine the self-oscillation frequency of the plant, ω0 and the gain at that frequency 
Sta rtAbsoluteValue upper G Subscript upper P Baseline left parenthesis omega 0 right parenthesis EndAbsoluteValue. From these two numbers, we ﬁnd T 0 and K0: 
up er T 0 equals StartFraction 2 normal pi Over omega 0 EndFraction
upp
er T 0 equals StartFraction 2 normal pi Over omega 0 EndFraction
upp e
r K 0 equals StartFraction 1 Over StartAbsoluteValue upper G Subscript upper P Baseline left parenthesis omega 0 right parenthesis EndAbsoluteValue EndFraction
up er K 0 
equals StartFraction 1 Over StartAbsoluteValue upper G Subscript upper P Baseline left parenthesis omega 0 right parenthesis EndAbsoluteValue EndFraction
Fig. 18.20 The bode plot of the plant

18.8 Finding the Control Parameters
385
Table 18.1 Ziegler and 
Nichol’s PID parameter table
Parameters 
K
TI
TD 
P
0.5K0
–
– 
PI
0.45K0
0.85T0
– 
PID
0.6K0
0.5T0
0.125T0 
From T 0 and K0, we use Ziegler and Nichol’s table to ﬁnd control parameters for 
different controllers: 
Example 18.2 Suggest a PI and a PID controller for the system in Example 18.1 
using Ziegler and Nichol’s method. 
Solution From the Bode plot in Fig. 18.17, we get ome ga 0  equals  5 dot  10 Superscript negative 1 Baseline equals 0.5 rad slash s and 
Sta rtAbsoluteValue upper G Subscript upper P Baseline left parenthesis omega 0 right parenthesis EndAbsoluteValue equals 0.25. Hence: 
upp er  T 0 equals StartFraction 2 normal pi Over 0.5 EndFraction equals 13 seconds and upper K 0 equals StartFraction 1 Over 0.25 EndFraction equals 4
uppe r T 0  equals Star tFr ac tion 2 normal pi Over 0.5 EndFraction equals 13 seconds and upper K 0 equals StartFraction 1 Over 0.25 EndFraction equals 4
upper  T 0 equals StartFraction 2 normal pi Over 0.5 EndFraction equals 13 seconds and upper K 0 equals StartFraction 1 Over 0.25 EndFraction equals 4
Using Table 18.1 gives us the following control functions: 
upp er P upper I c olo
n
 u p
per C left parenthesis s right parenthesis equals 0.45 dot 4 left parenthesis 1 plus StartFraction 1 Over 0.85 dot 13 s EndFraction right parenthesis equals 1.8 left parenthesis 1 plus StartFraction 1 Over 11 s EndFraction right parenthesis
upper  P up
p
er I 
c
ol on  upper C left parenthesis s right parenthesis equals 0.45 dot 4 left parenthesis 1 plus StartFraction 1 Over 0.85 dot 13 s EndFraction right parenthesis equals 1.8 left parenthesis 1 plus StartFraction 1 Over 11 s EndFraction right parenthesis
upp
e
r P upper I colon upper C left parenthesis s right parenthesis equals 0.45 dot 4 left parenthesis 1 plus StartFraction 1 Over 0.85 dot 13 s EndFraction right parenthesis equals 1.8 left parenthesis 1 plus StartFraction 1 Over 11 s EndFraction right parenthesis
right double a
r
row u S ubscript PI Baseline left parenthesis t right parenthesis equals 1.8 left parenthesis e left parenthesis t right parenthesis plus one eleventh integral e left parenthesis t right parenthesis d t right parenthesis
ri
g
ht dou
b
le arrow u Subscript PI Baseline left parenthesis t right parenthesis equals 1.8 left parenthesis e left parenthesis t right parenthesis plus one eleventh integral e left parenthesis t right parenthesis d t right parenthesis
uppe r P upper I 
u
pp er  D colon upper C left parenthesis s right parenthesis equals 2.4 left parenthesis 1 plus StartFraction 1 Over 6.5 s EndFraction plus 1.6 s right parenthesis
upper  P upp
e
r I upper D colon upper C left parenthesis s right parenthesis equals 2.4 left parenthesis 1 plus StartFraction 1 Over 6.5 s EndFraction plus 1.6 s right parenthesis
right double ar
r
ow u Su bscript PID Baseline left parenthesis t right parenthesis equals 2.4 left parenthesis e left parenthesis t right parenthesis plus StartFraction 1 Over 6.5 EndFraction integral e left parenthesis t right parenthesis d t plus 1.6 e prime left parenthesis t right parenthesis right parenthesis
rig
h
t doubl e arrow u 
S
ubscript PID Baseline left parenthesis t right parenthesis equals 2.4 left parenthesis e left parenthesis t right parenthesis plus StartFraction 1 Over 6.5 EndFraction integral e left parenthesis t right parenthesis d t plus 1.6 e prime left parenthesis t right parenthesis right parenthesis
In Figs. 18.21 and 18.22, we have plotted the resulting Bode plot for the plant 
and the PI and PID controller functions, respectively. First, compare Fig. 18.21 with 
Fig. 18.17; we can see the effect of the integration part. In Fig. 18.17, we have a phase 
margin of approximately 90°. In Fig. 18.21, this phase margin has been reduced to 
30°. In Fig. 18.22, some of that phase margin has been restored to about 40°.
18.8.2 
Using Phase and Gain Margin Criteria 
The Ziegler and Nichol’s rules of thumb generate stable systems as is illustrated in 
Figs. 18.21 and 18.22. Another approach is to start with the Bode plot of the system

386
18
Introduction to Control Theory
Fig. 18.21 The bode plot of the plant + the PI controller 
Fig. 18.22 The bode plot of the plant + the PID controller
(Fig. 18.17) and aim for some speciﬁc gain and/or phase margins. The general rule 
in this case is that the integrator part lowers the phase diagram by approximately 11 
degrees at the cross-over frequency (where the ampliﬁcation is 0 dB, see Fig. 18.20). 
If the system (the plant) itself has a phase margin of 40°, adding an integrator would 
decrease the phase margin to under 30°. If the system speciﬁcations dictate a phase 
margin of 50°, then you must use the derivative part to increase the phase margin 
(Eq. (18.11)). 
Example 18.3 Given conditions mentioned above, what derivation time T D would 
you need for the differentiation part? The cross-over frequency was 0.3 rad/second. 
Solution 40–11 = 29°. To meet the phase margin demand, we need to raise the phase 
diagram by 50–29 = 21°. Equation (18.11) gives us 
phi equals tan gent Superscript negative 1 Baseline omega upper T Subscript upper D Baseline right double arrow upper T Subscript upper D Baseline equals StartFraction tangent phi Over omega EndFraction equals StartFraction tangent 21 Superscript ring Baseline Over 0.3 EndFraction equals 1.3 secant
p
hi equals tangent Superscript negative 1 Baseline omega upper T Subscript upper D Baseline right double arrow upper T Subscript upper D Baseline equals StartFraction tangent phi Over omega EndFraction equals StartFraction tangent 21 Superscript ring Baseline Over 0.3 EndFraction equals 1.3 secant
phi 
equal s tangent Superscript negative 1 Baseline omega upper T Subscript upper D Baseline right double arrow upper T Subscript upper D Baseline equals StartFraction tangent phi Over omega EndFraction equals StartFraction tangent 21 Superscript ring Baseline Over 0.3 EndFraction equals 1.3 secant

18.9 Discretizing
387
18.9 
Discretizing 
To implement a controller into a computer system (a microcontroller, like an Arduino 
or a Raspberry Pi), we must ‘translate’ the control functions to discrete time. There 
are several ways to do that, and we will present two ways here. We will only consider 
the PI and PID controller, Eqs. (18.4) and (18.12): 
u left pa r
e
nthesis  t right parenthesis equals upper K Subscript upper P Baseline left parenthesis e left parenthesis t right parenthesis plus StartFraction 1 Over upper T Subscript upper I Baseline EndFraction integral e left parenthesis t right parenthesis d t right parenthesis
u 
l
eft pa
r
enthesis t right parenthesis equals upper K Subscript upper P Baseline left parenthesis e left parenthesis t right parenthesis plus StartFraction 1 Over upper T Subscript upper I Baseline EndFraction integral e left parenthesis t right parenthesis d t right parenthesis
u left pa r
e
nthesis  t right parenthesis equals upper K Subscript upper P Baseline left parenthesis e left parenthesis t right parenthesis plus StartFraction 1 Over upper T Subscript upper I Baseline EndFraction integral e left parenthesis t right parenthesis d t plus upper T Subscript upper D Baseline e prime left parenthesis t right parenthesis right parenthesis
u 
l
eft par enthesis 
t
 right parenthesis equals upper K Subscript upper P Baseline left parenthesis e left parenthesis t right parenthesis plus StartFraction 1 Over upper T Subscript upper I Baseline EndFraction integral e left parenthesis t right parenthesis d t plus upper T Subscript upper D Baseline e prime left parenthesis t right parenthesis right parenthesis
18.9.1 
Euler Transformation 
A computer system must sample the error signal; in Fig. 18.23, we have sampled the 
error signal with the sampling rate f S = 1/T S. From Fig.  18.23, we can see that the 
integral of e(t) is approximately equal to the sum of the rectangles. 
Hence,
i
ntegral  
e l
eft parenthesis  t r
igh
t parent
hesis d t almost equals sigma summation Underscript i equals 0 Overscript n Endscripts e left parenthesis i right parenthesis dot upper T Subscript upper S Baseline equals upper T Subscript upper S Baseline sigma summation Underscript i equals 0 Overscript n Endscripts e left parenthesis i right parenthesis
Similarly, we can see in Fig. 18.24 that the derivative can be approximated with 
a straight line, and hence 
e prime left parent hesis t right parenthesis almost equals StartFraction e left parenthesis n right parenthesis minus e left parenthesis n minus 1 right parenthesis Over upper T Subscript upper S Baseline EndFraction
e p
rime left parenthesis t right parenthesis almost equals StartFraction e left parenthesis n right parenthesis minus e left parenthesis n minus 1 right parenthesis Over upper T Subscript upper S Baseline EndFraction
Fig. 18.23 The integral ≈ the sum or rectangles 

388
18
Introduction to Control Theory
Fig. 18.24 The derivative ≈ the straight line between two samples 
That gives us the following ‘computer friendly’ PI and PID control algorithms (= 
the ‘Euler transformation’): 
u left pa r
e
nthesis n right parenthesis equals upper K Subscript upper P Baseline left parenthesis e left parenthesis n right parenthesis plus StartFraction upper T Subscript upper S Baseline Over upper T Subscript upper I Baseline EndFraction sigma summation Underscript i equals 0 Overscript n Endscripts e left parenthesis i right parenthesis right parenthesis
u 
lef
t parenth
e
sis n right parenthesis equals upper K Subscript upper P Baseline left parenthesis e left parenthesis n right parenthesis plus StartFraction upper T Subscript upper S Baseline Over upper T Subscript upper I Baseline EndFraction sigma summation Underscript i equals 0 Overscript n Endscripts e left parenthesis i right parenthesis right parenthesis
u left pa r
e
nthesis n right parenthesis equals upper K Subscript upper P Baseline left parenthesis e left parenthesis n right parenthesis plus StartFraction upper T Subscript upper S Baseline Over upper T Subscript upper I Baseline EndFraction sigma summation Underscript i equals 0 Overscript n Endscripts e left parenthesis i right parenthesis plus StartFraction upper T Subscript upper D Baseline Over upper T Subscript upper S Baseline EndFraction left parenthesis e left parenthesis n right parenthesis minus e left parenthesis n minus 1 right parenthesis right parenthesis right parenthesis
u 
lef
t parenthesis n right parenthesis equals upper K Subscript upper P Baseline left parenthesis e left parenthesis n right parenthesis plus StartFraction upper T Subscript upper S Baseline Over upper T Subscript upper I Baseline EndFraction sigma summation Underscript i equals 0 Overscript n Endscripts e left parenthesis i right parenthesis plus StartFraction upper T Subscript upper D Baseline Over upper T Subscript upper S Baseline EndFraction left parenthesis e left parenthesis n right parenthesis minus e left parenthesis n minus 1 right parenthesis right parenthesis right parenthesis
u l
eft parenthe sis n
 
right parenthesis equals upper K Subscript upper P Baseline left parenthesis e left parenthesis n right parenthesis plus StartFraction upper T Subscript upper S Baseline Over upper T Subscript upper I Baseline EndFraction sigma summation Underscript i equals 0 Overscript n Endscripts e left parenthesis i right parenthesis plus StartFraction upper T Subscript upper D Baseline Over upper T Subscript upper S Baseline EndFraction left parenthesis e left parenthesis n right parenthesis minus e left parenthesis n minus 1 right parenthesis right parenthesis right parenthesis
Example 18.4 Use the Euler transformation to ﬁnd computer-friendly algorithms 
for the PI and PID controllers in Example 18.2. 
Solution We obviously must ﬁnd the sampling rate ﬁrst. Considering that ω0 = 
0.5 rad/s, a sampling rate of 2 S/s is enough, i.e., T S = 0.5 s. First, we discretize 
Eq. (18.26): 
u S ubscr
i
pt n Baseline equals 1.8 left parenthesis e Subscript n Baseline plus StartFraction 0.5 Over 11 EndFraction sigma summation Underscript i Endscripts e Subscript i Baseline right parenthesis equals 1.8 left parenthesis e Subscript n Baseline plus 0.045 sigma summation Underscript i Endscripts e Subscript i Baseline right parenthesis
u 
S
ub
sc
r
ipt n
 
Bas eline e
q
uals
 1.8 left parenthesis e Subscript n Baseline plus StartFraction 0.5 Over 11 EndFraction sigma summation Underscript i Endscripts e Subscript i Baseline right parenthesis equals 1.8 left parenthesis e Subscript n Baseline plus 0.045 sigma summation Underscript i Endscripts e Subscript i Baseline right parenthesis
Next, we discretize Eq. (18.28): 
Sta rtLay
o
ut 1st Row 1st Column u Subscript n 2nd Column equals 2.4 left parenthesis e Subscript n Baseline plus StartFraction 0.5 Over 6.5 EndFraction sigma summation Underscript i Endscripts e Subscript i Baseline plus StartFraction 1.6 Over 0.5 EndFraction left parenthesis e Subscript n Baseline minus e Subscript n minus 1 Baseline right parenthesis right parenthesis 2nd Row 1st Column Blank 2nd Column equals 2.4 left parenthesis e Subscript n Baseline plus 0.077 sigma summation Underscript i Endscripts e Subscript i Baseline plus 3.2 left parenthesis e Subscript n Baseline minus e Subscript n minus 1 Baseline right parenthesis right parenthesis EndLayout
Sta
r
tL
ayo ut 1st Row 1st Column u Subscript n 2nd Column equals 2.4 left parenthesis e Subscript n Baseline plus StartFraction 0.5 Over 6.5 EndFraction sigma summation Underscript i Endscripts e Subscript i Baseline plus StartFraction 1.6 Over 0.5 EndFraction left parenthesis e Subscript n Baseline minus e Subscript n minus 1 Baseline right parenthesis right parenthesis 2nd Row 1st Column Blank 2nd Column equals 2.4 left parenthesis e Subscript n Baseline plus 0.077 sigma summation Underscript i Endscripts e Subscript i Baseline plus 3.2 left parenthesis e Subscript n Baseline minus e Subscript n minus 1 Baseline right parenthesis right parenthesis EndLayout
StartLay out 1st
 
Row 1
s
t C olumn u
 
Su
bsc ript n 2n d Colum
n equals 2.4 left parenthesis e Subscript n Baseline plus StartFraction 0.5 Over 6.5 EndFraction sigma summation Underscript i Endscripts e Subscript i Baseline plus StartFraction 1.6 Over 0.5 EndFraction left parenthesis e Subscript n Baseline minus e Subscript n minus 1 Baseline right parenthesis right parenthesis 2nd Row 1st Column Blank 2nd Column equals 2.4 left parenthesis e Subscript n Baseline plus 0.077 sigma summation Underscript i Endscripts e Subscript i Baseline plus 3.2 left parenthesis e Subscript n Baseline minus e Subscript n minus 1 Baseline right parenthesis right parenthesis EndLayout

18.9 Discretizing
389
18.9.2 
Bilinear Transformation 
In the bilinear transformation, we start from the Laplace transfer functions (Eqs. 18.5 
and 18.12) and ﬁrst transfer them to the corresponding z transforms using the bilinear 
transformation (see Chap. 10): 
s eq uals StartFraction 2 Over upper T Subscript upper S Baseline EndFraction StartFraction z minus 1 Over z plus 1 EndFraction
s e
qu als StartFraction 2 Over upper T Subscript upper S Baseline EndFraction StartFraction z minus 1 Over z plus 1 EndFraction
s equa
ls StartFraction 2 Over upper T Subscript upper S Baseline EndFraction StartFraction z minus 1 Over z plus 1 EndFraction
For the PI controller (Eq. 18.5), we get 
StartLayo u
t
 1 s
t Row 1st Column upper C left parenthesis z right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis 1 plus StartStartFraction 1 OverOver upper T Subscript upper I Baseline StartFraction 2 Over upper T Subscript upper S Baseline EndFraction StartFraction z minus 1 Over z plus 1 EndFraction EndEndFraction right parenthesis equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction upper T Subscript upper S Baseline Over 2 upper T Subscript upper I Baseline EndFraction StartFraction z plus 1 Over z minus 1 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline left parenthesis StartFraction 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction plus StartFraction upper T Subscript upper S Baseline left parenthesis z plus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction right parenthesis 3rd Row 1st Column Blank 2nd Column equals StartFraction upper K Subscript upper P Baseline Over 2 upper T Subscript upper I Baseline EndFraction dot StartFraction left parenthesis 2 upper T Subscript upper I Baseline plus upper T Subscript upper S Baseline right parenthesis plus left parenthesis upper T Subscript upper S Baseline minus 2 upper T Subscript upper I Baseline right parenthesis dot z Superscript negative 1 Baseline Over 1 minus z Superscript negative 1 Baseline EndFraction equals StartFraction upper U left parenthesis z right parenthesis Over upper E left parenthesis z right parenthesis EndFraction EndLayout
Sta rtLayout 1st Row 1st Column upper C left parenthesis z right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis 1 plus StartStartFraction 1 OverOver upper T Subscript upper I Baseline StartFraction 2 Over upper T Subscript upper S Baseline EndFraction StartFraction z minus 1 Over z plus 1 EndFraction EndEndFraction right parenthesis equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction upper T Subscript upper S Baseline Over 2 upper T Subscript upper I Baseline EndFraction StartFraction z plus 1 Over z minus 1 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline left parenthesis StartFraction 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction plus StartFraction upper T Subscript upper S Baseline left parenthesis z plus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction right parenthesis 3rd Row 1st Column Blank 2nd Column equals StartFraction upper K Subscript upper P Baseline Over 2 upper T Subscript upper I Baseline EndFraction dot StartFraction left parenthesis 2 upper T Subscript upper I Baseline plus upper T Subscript upper S Baseline right parenthesis plus left parenthesis upper T Subscript upper S Baseline minus 2 upper T Subscript upper I Baseline right parenthesis dot z Superscript negative 1 Baseline Over 1 minus z Superscript negative 1 Baseline EndFraction equals StartFraction upper U left parenthesis z right parenthesis Over upper E left parenthesis z right parenthesis EndFraction EndLayout
Sta
rtLayout 1st Row 1st Column upper C left parenthesis z right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis 1 plus StartStartFraction 1 OverOver upper T Subscript upper I Baseline StartFraction 2 Over upper T Subscript upper S Baseline EndFraction StartFraction z minus 1 Over z plus 1 EndFraction EndEndFraction right parenthesis equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction upper T Subscript upper S Baseline Over 2 upper T Subscript upper I Baseline EndFraction StartFraction z plus 1 Over z minus 1 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline left parenthesis StartFraction 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction plus StartFraction upper T Subscript upper S Baseline left parenthesis z plus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction right parenthesis 3rd Row 1st Column Blank 2nd Column equals StartFraction upper K Subscript upper P Baseline Over 2 upper T Subscript upper I Baseline EndFraction dot StartFraction left parenthesis 2 upper T Subscript upper I Baseline plus upper T Subscript upper S Baseline right parenthesis plus left parenthesis upper T Subscript upper S Baseline minus 2 upper T Subscript upper I Baseline right parenthesis dot z Superscript negative 1 Baseline Over 1 minus z Superscript negative 1 Baseline EndFraction equals StartFraction upper U left parenthesis z right parenthesis Over upper E left parenthesis z right parenthesis EndFraction EndLayout
Sta
r
tLay o
u
t 1s t Row 1st Column upper C left parenthesis z right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis 1 plus StartStartFraction 1 OverOver upper T Subscript upper I Baseline StartFraction 2 Over upper T Subscript upper S Baseline EndFraction StartFraction z minus 1 Over z plus 1 EndFraction EndEndFraction right parenthesis equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction upper T Subscript upper S Baseline Over 2 upper T Subscript upper I Baseline EndFraction StartFraction z plus 1 Over z minus 1 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline left parenthesis StartFraction 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction plus StartFraction upper T Subscript upper S Baseline left parenthesis z plus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction right parenthesis 3rd Row 1st Column Blank 2nd Column equals StartFraction upper K Subscript upper P Baseline Over 2 upper T Subscript upper I Baseline EndFraction dot StartFraction left parenthesis 2 upper T Subscript upper I Baseline plus upper T Subscript upper S Baseline right parenthesis plus left parenthesis upper T Subscript upper S Baseline minus 2 upper T Subscript upper I Baseline right parenthesis dot z Superscript negative 1 Baseline Over 1 minus z Superscript negative 1 Baseline EndFraction equals StartFraction upper U left parenthesis z right parenthesis Over upper E left parenthesis z right parenthesis EndFraction EndLayout
Star
tL ayout 1st Row 1st Column upper C left parenthesis z right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis 1 plus StartStartFraction 1 OverOver upper T Subscript upper I Baseline StartFraction 2 Over upper T Subscript upper S Baseline EndFraction StartFraction z minus 1 Over z plus 1 EndFraction EndEndFraction right parenthesis equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction upper T Subscript upper S Baseline Over 2 upper T Subscript upper I Baseline EndFraction StartFraction z plus 1 Over z minus 1 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline left parenthesis StartFraction 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction plus StartFraction upper T Subscript upper S Baseline left parenthesis z plus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction right parenthesis 3rd Row 1st Column Blank 2nd Column equals StartFraction upper K Subscript upper P Baseline Over 2 upper T Subscript upper I Baseline EndFraction dot StartFraction left parenthesis 2 upper T Subscript upper I Baseline plus upper T Subscript upper S Baseline right parenthesis plus left parenthesis upper T Subscript upper S Baseline minus 2 upper T Subscript upper I Baseline right parenthesis dot z Superscript negative 1 Baseline Over 1 minus z Superscript negative 1 Baseline EndFraction equals StartFraction upper U left parenthesis z right parenthesis Over upper E left parenthesis z right parenthesis EndFraction EndLayout
St art
L
ayou t
 1st Row  1st Column upper C left parenthesis z right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis 1 plus StartStartFraction 1 OverOver upper T Subscript upper I Baseline StartFraction 2 Over upper T Subscript upper S Baseline EndFraction StartFraction z minus 1 Over z plus 1 EndFraction EndEndFraction right parenthesis equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction upper T Subscript upper S Baseline Over 2 upper T Subscript upper I Baseline EndFraction StartFraction z plus 1 Over z minus 1 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline left parenthesis StartFraction 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction plus StartFraction upper T Subscript upper S Baseline left parenthesis z plus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction right parenthesis 3rd Row 1st Column Blank 2nd Column equals StartFraction upper K Subscript upper P Baseline Over 2 upper T Subscript upper I Baseline EndFraction dot StartFraction left parenthesis 2 upper T Subscript upper I Baseline plus upper T Subscript upper S Baseline right parenthesis plus left parenthesis upper T Subscript upper S Baseline minus 2 upper T Subscript upper I Baseline right parenthesis dot z Superscript negative 1 Baseline Over 1 minus z Superscript negative 1 Baseline EndFraction equals StartFraction upper U left parenthesis z right parenthesis Over upper E left parenthesis z right parenthesis EndFraction EndLayout
StartLa yout 1s t Row  1st Column upper C left parenthesis z right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis 1 plus StartStartFraction 1 OverOver upper T Subscript upper I Baseline StartFraction 2 Over upper T Subscript upper S Baseline EndFraction StartFraction z minus 1 Over z plus 1 EndFraction EndEndFraction right parenthesis equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction upper T Subscript upper S Baseline Over 2 upper T Subscript upper I Baseline EndFraction StartFraction z plus 1 Over z minus 1 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline left parenthesis StartFraction 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction plus StartFraction upper T Subscript upper S Baseline left parenthesis z plus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction right parenthesis 3rd Row 1st Column Blank 2nd Column equals StartFraction upper K Subscript upper P Baseline Over 2 upper T Subscript upper I Baseline EndFraction dot StartFraction left parenthesis 2 upper T Subscript upper I Baseline plus upper T Subscript upper S Baseline right parenthesis plus left parenthesis upper T Subscript upper S Baseline minus 2 upper T Subscript upper I Baseline right parenthesis dot z Superscript negative 1 Baseline Over 1 minus z Superscript negative 1 Baseline EndFraction equals StartFraction upper U left parenthesis z right parenthesis Over upper E left parenthesis z right parenthesis EndFraction EndLayout
StartLa yout
 
1s t Row 1st Column upper C left parenthesis z right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis 1 plus StartStartFraction 1 OverOver upper T Subscript upper I Baseline StartFraction 2 Over upper T Subscript upper S Baseline EndFraction StartFraction z minus 1 Over z plus 1 EndFraction EndEndFraction right parenthesis equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction upper T Subscript upper S Baseline Over 2 upper T Subscript upper I Baseline EndFraction StartFraction z plus 1 Over z minus 1 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline left parenthesis StartFraction 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction plus StartFraction upper T Subscript upper S Baseline left parenthesis z plus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction right parenthesis 3rd Row 1st Column Blank 2nd Column equals StartFraction upper K Subscript upper P Baseline Over 2 upper T Subscript upper I Baseline EndFraction dot StartFraction left parenthesis 2 upper T Subscript upper I Baseline plus upper T Subscript upper S Baseline right parenthesis plus left parenthesis upper T Subscript upper S Baseline minus 2 upper T Subscript upper I Baseline right parenthesis dot z Superscript negative 1 Baseline Over 1 minus z Superscript negative 1 Baseline EndFraction equals StartFraction upper U left parenthesis z right parenthesis Over upper E left parenthesis z right parenthesis EndFraction EndLayout
Star
tLayout  1st Row 1st  Column upper C left parenthesis z right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis 1 plus StartStartFraction 1 OverOver upper T Subscript upper I Baseline StartFraction 2 Over upper T Subscript upper S Baseline EndFraction StartFraction z minus 1 Over z plus 1 EndFraction EndEndFraction right parenthesis equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction upper T Subscript upper S Baseline Over 2 upper T Subscript upper I Baseline EndFraction StartFraction z plus 1 Over z minus 1 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline left parenthesis StartFraction 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction plus StartFraction upper T Subscript upper S Baseline left parenthesis z plus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction right parenthesis 3rd Row 1st Column Blank 2nd Column equals StartFraction upper K Subscript upper P Baseline Over 2 upper T Subscript upper I Baseline EndFraction dot StartFraction left parenthesis 2 upper T Subscript upper I Baseline plus upper T Subscript upper S Baseline right parenthesis plus left parenthesis upper T Subscript upper S Baseline minus 2 upper T Subscript upper I Baseline right parenthesis dot z Superscript negative 1 Baseline Over 1 minus z Superscript negative 1 Baseline EndFraction equals StartFraction upper U left parenthesis z right parenthesis Over upper E left parenthesis z right parenthesis EndFraction EndLayout
St artLa
yout 1st Row 1st Column upper C left parenthesis z right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis 1 plus StartStartFraction 1 OverOver upper T Subscript upper I Baseline StartFraction 2 Over upper T Subscript upper S Baseline EndFraction StartFraction z minus 1 Over z plus 1 EndFraction EndEndFraction right parenthesis equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction upper T Subscript upper S Baseline Over 2 upper T Subscript upper I Baseline EndFraction StartFraction z plus 1 Over z minus 1 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline left parenthesis StartFraction 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction plus StartFraction upper T Subscript upper S Baseline left parenthesis z plus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction right parenthesis 3rd Row 1st Column Blank 2nd Column equals StartFraction upper K Subscript upper P Baseline Over 2 upper T Subscript upper I Baseline EndFraction dot StartFraction left parenthesis 2 upper T Subscript upper I Baseline plus upper T Subscript upper S Baseline right parenthesis plus left parenthesis upper T Subscript upper S Baseline minus 2 upper T Subscript upper I Baseline right parenthesis dot z Superscript negative 1 Baseline Over 1 minus z Superscript negative 1 Baseline EndFraction equals StartFraction upper U left parenthesis z right parenthesis Over upper E left parenthesis z right parenthesis EndFraction EndLayout
Start
Layout 1st Row 1st Column upper C left parenthesis z right parenthesis 2nd Column equals upper K Subscript upper P Baseline left parenthesis 1 plus StartStartFraction 1 OverOver upper T Subscript upper I Baseline StartFraction 2 Over upper T Subscript upper S Baseline EndFraction StartFraction z minus 1 Over z plus 1 EndFraction EndEndFraction right parenthesis equals upper K Subscript upper P Baseline left parenthesis 1 plus StartFraction upper T Subscript upper S Baseline Over 2 upper T Subscript upper I Baseline EndFraction StartFraction z plus 1 Over z minus 1 EndFraction right parenthesis 2nd Row 1st Column Blank 2nd Column equals upper K Subscript upper P Baseline left parenthesis StartFraction 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction plus StartFraction upper T Subscript upper S Baseline left parenthesis z plus 1 right parenthesis Over 2 upper T Subscript upper I Baseline left parenthesis z minus 1 right parenthesis EndFraction right parenthesis 3rd Row 1st Column Blank 2nd Column equals StartFraction upper K Subscript upper P Baseline Over 2 upper T Subscript upper I Baseline EndFraction dot StartFraction left parenthesis 2 upper T Subscript upper I Baseline plus upper T Subscript upper S Baseline right parenthesis plus left parenthesis upper T Subscript upper S Baseline minus 2 upper T Subscript upper I Baseline right parenthesis dot z Superscript negative 1 Baseline Over 1 minus z Superscript negative 1 Baseline EndFraction equals StartFraction upper U left parenthesis z right parenthesis Over upper E left parenthesis z right parenthesis EndFraction EndLayout
An inverse z transformation on expression (18.36) gives us the following 
difference equation: 
u S ubscrip t n Baseline equals u Subscript n minus 1 Baseline plus StartFraction upper K Subscript upper P Baseline Over 2 upper T Subscript upper I Baseline EndFraction left parenthesis left parenthesis 2 upper T Subscript upper I Baseline plus upper T Subscript upper S Baseline right parenthesis dot e Subscript n Baseline plus left parenthesis upper T Subscript upper S Baseline minus 2 upper T Subscript upper I Baseline right parenthesis dot e Subscript n minus 1 Baseline right parenthesis
u Su
bscrip t n Baselin e equa ls u Subscript 
n minus 1 Baseline plus StartFraction upper K Subscript upper P Baseline Over 2 upper T Subscript upper I Baseline EndFraction left parenthesis left parenthesis 2 upper T Subscript upper I Baseline plus upper T Subscript upper S Baseline right parenthesis dot e Subscript n Baseline plus left parenthesis upper T Subscript upper S Baseline minus 2 upper T Subscript upper I Baseline right parenthesis dot e Subscript n minus 1 Baseline right parenthesis
The corresponding expression for the PID controller (Eq. (18.12)) is 
Sta rtLayou t 1s t
 R
ow 1 st Colu mn
 u  Subsc ri
p
t n  
2
nd Co
lu mn equ al
s
 u Su
b
s
crip t n  min us
 2  Basel in
e
 plu
s
 upper K Subscript upper P Baseline left brace left parenthesis 2 upper T Subscript upper I Baseline upper T Subscript upper S Baseline plus upper T Subscript upper S Superscript 2 Baseline plus 4 upper T Subscript upper I Baseline upper T Subscript upper D Baseline right parenthesis e Subscript n Baseline plus left parenthesis 2 upper T Subscript upper S Superscript 2 Baseline minus 8 upper T Subscript upper I Baseline upper T Subscript upper D Baseline right parenthesis e Subscript n minus 1 Baseline 2nd Row 1st Column Blank 2nd Column plus left parenthesis 4 upper T Subscript upper I Baseline upper T Subscript upper D Baseline plus upper T Subscript upper S Superscript 2 Baseline minus 2 upper T Subscript upper I Baseline upper T Subscript upper S Baseline right parenthesis e Subscript n minus 2 Baseline right brace EndLayout
Example 18.5 Use the bilinear transform to ﬁnd computer-friendly algorithms for 
the PI and PID controllers in Example 18.2. 
Solution Using the same sample rate as in Example 18.4, a bilinear transformation 
of Eqs. (18.25) and (18.27) give us:  
Star tLa yout 1s t Row 1st Column PI colon u Subscript n 2nd Column equals u Subscript n minus 1 Baseline plus StartFraction 1.8 Over 2 dot 11 EndFraction dot left parenthesis left parenthesis 2 dot 11 plus 0.5 right parenthesis e Subscript n Baseline plus left parenthesis 0.5 minus 2 dot 11 right parenthesis e Subscript n minus 1 Baseline right parenthesis 2nd Row 1st Column Blank 2nd Column equals u Subscript n minus 1 Baseline plus 1.84 e Subscript n Baseline minus 1.76 e Subscript n minus 1 EndLayout
St artLa yout 1 st Ro w 1st Col umn PI colo n u Subscri
pt n 2n d Column equals u Subscript n minus 1 Baseline plus StartFraction 1.8 Over 2 dot 11 EndFraction dot left parenthesis left parenthesis 2 dot 11 plus 0.5 right parenthesis e Subscript n Baseline plus left parenthesis 0.5 minus 2 dot 11 right parenthesis e Subscript n minus 1 Baseline right parenthesis 2nd Row 1st Column Blank 2nd Column equals u Subscript n minus 1 Baseline plus 1.84 e Subscript n Baseline minus 1.76 e Subscript n minus 1 EndLayout
PID c olo n u Sub script n  Baseline e quals u Subscript  n minus 2 Baseline plus 2.4 left parenthesis ellipsis period right parenthesis equals u Subscript n minus 2 Baseline plus 116 e Subscript n Baseline minus 83 e Subscript n minus 1 Baseline plus 35 e Subscript n minus 2 Baseline

390
18
Introduction to Control Theory
Comments: In computer algorithms, there is always a breakpoint when you need 
to use ﬂoating-point calculations. Floating-point calculations are time and memory 
consuming and should be avoided if possible. In the above examples, where we have 
simulated the heating control of some oven, the use of ﬂoating-point calculations 
would not be a problem since the sampling rate is only 2 S/s. 
Also notice the main difference between the Euler and the bilinear transformations 
above: The bilinear also uses old output samples (and could thereby potentially 
become instable.)

Appendix 
Operational Ampliﬁers 
Abstract A lot of the analog electronics used in electrical measurement systems 
are based on operational ampliﬁers (op amps) and a basic understanding of this 
fundamental device is necessary; op amps will occur repeatedly throughout this 
book. Because of the extremely high inherent ampliﬁcation of the differential-ended 
input signal, an op amp is almost always used with negative feedback. This chapter 
will demonstrate that two simple rules are all you need to understand and solve any 
op amp circuit. These simple rules are then used to exemplify the versatility of the 
op amp. 
1. Introduction 
The operational ampliﬁer (‘op amp’) is one of the most versatile analog electronic 
components and omnipresent in electrical measurement systems. If you are going 
to work with electrical measurement systems, it is inevitable that you will sooner or 
later come across op amps and a basic understanding of this multifaceted component 
is imperative. Figure A.1 illustrates the op amp symbol. 
Fig. A.1 Signal model
+
U+ 
—
—
U 
Uout 
VS+ 
VS— 
© The Editor(s) (if applicable) and The Author(s), under exclusive license 
to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8 
391

392
Appendix: Operational Ampliﬁers
Fig. A.2 Op amp with 
negative feedback 
+ 
— 
I+ 
Uout 
Zfb 
U 
U+ 
— 
—I 
It is a differential ampliﬁer; it ampliﬁes the potential difference (U+ − U−), but 
the differential ampliﬁcation is so large (>106), so for any real-world signal, the 
output will be driven ‘high’ (= V S+) or ‘low’  (= V S−). So, operated as a differential 
ampliﬁer, it will act as a ‘comparator’. If it is a differential ampliﬁer, you are looking 
for (with a ‘reasonable’ ampliﬁcation) then you are not looking for an op amp, you 
are looking for an instrumentation ampliﬁer, see Chap. 4. 
You see, op amps are (almost) always used with feedback. That means that (part 
of) the output signal is fed back to the input. In principle, you can feed the output back 
in two different ways; either to the ‘+’ input (= ‘positive feedback’) or to the ‘−’ 
input (‘negative’ feedback). With positive feedback, the ampliﬁcation is increased 
which might seem redundant considering the enormous open-loop gain, but it has 
some applications (for example in oscillator designs). However, most op amp designs 
have negative feedback and that’s what we will describe here, since that is what you 
will almost always use in a physics lab. Before we go into that, we will just mention 
a few characteristic properties of the ideal op amp. 
First, the op amp needs dual power supply, ±12 V or ±15 V. For most op amps, 
the maximum output level is approximately 1–2 V lower than V S+ (and the minimum 
is 1–2 V higher than V S−). If you need the output levels to reach the supply voltage 
level, look for an op amp that is ‘rail-to-rail.’ 
An ideal op amp has inﬁnite differential gain, inﬁnite bandwidth, inﬁnite input 
impedance and zero output impedance. A real op amp comes very close to inﬁnite 
gain and inﬁnite input impedance but does not have zero output impedance (≈ 100
Ω) and is nowhere near inﬁnite bandwidth. However, for our presentation of ‘op 
amps with negative feedback’, we only need the ‘inﬁnite input impedance’ property, 
and CMOS op amps have that (or as close as you can hope for). 
Figure A.2 illustrates an op amp with negative feedback. 
To understand what happens in an op amp with negative feedback, it is important 
to understand that the op amp is not really an ampliﬁer. It is a  controller; it is  
not designed to amplify anything; it is designed to make U+ = U−. With negative 
feedback, the output will generate whatever voltage/current necessary to make U+ = 
U−. That’s it! Well, there is one more thing; because of the inﬁnite input impedance, 
we can always assume that the currents I+ and I− = 0. There is never any current 
in or out of the inputs. These two rules (U+ = U− and I+ = I− = 0) are sometimes 
referred to as the ‘golden rules’ of op amps. These two rules are all you need to design

Appendix: Operational Ampliﬁers
393
Fig. A.3 The inverting 
ampliﬁer 
+ 
— 
Uout 
R2 
Uin 
R1 
Iin 
Ifb 
‘anything’. The op amp has no inherent ‘ampliﬁcation’ (except for the inﬁnite open-
loop ampliﬁcation) but you can take advantage of the above-described properties to 
design an ampliﬁer with arbitrary gain. But keep in mind; the op amp (with negative 
feedback) doesn’t care about gain, it only cares about making U+ = U−, and that’s 
it! 
2. Ampliﬁers 
Op amp textbooks always start with the circuit in Fig. A.3. 
In Fig. A.3, the ‘+’ input is grounded, so U+ = 0 V. That means that the output 
will make sure that also U− = 0 (the ‘−’ input is ‘virtually grounded’). In that case, 
the current Iin = (Uin – 0)/R1 = Uin/R1. When this current reaches the ‘−’ input, it 
has nowhere else to go but to the R2 resistor (because the current in/out of the input 
is zero); Ifb = Iin. Now we can ﬁnd the output voltage. If we start at the ‘−’ input, 
where the potential = 0 V, and move to the output, then: 
0 minus upp e r I Subscript fb Baseline upper R 2 equals minus StartFraction upper U Subscript in Baseline Over upper R 1 EndFraction upper R 2 equals upper U Subscript out Baseline right double arrow upper U Subscript out Baseline equals minus StartFraction upper R 2 Over upper R 1 EndFraction upper U Subscript in
0 m
inu s upper  I Subs c r ipt fb Baseline upper R 2 equals minus StartFraction upper U Subscript in Baseline Over upper R 1 EndFraction upper R 2 equals upper U Subscript out Baseline right double arrow upper U Subscript out Baseline equals minus StartFraction upper R 2 Over upper R 1 EndFraction upper U Subscript in
0 m
inu
s upper I Subscript fb Baseline upper R 2 equals minus StartFraction upper U Subscript in Baseline Over upper R 1 EndFraction upper R 2 equals upper U Subscript out Baseline right double arrow upper U Subscript out Baseline equals minus StartFraction upper R 2 Over upper R 1 EndFraction upper U Subscript in
and we have an ampliﬁer, an inverting ampliﬁer because of the minus sign, and we 
can set the gain arbitrarily with the resistors. Notice how we only used the op amp’s 
‘control’ property to design an ampliﬁer. 
If you want a non-inverting ampliﬁer, you use the circuit in Fig. A.4.
In this case, U− = U+ = Uin. That means that the current Iin is Uin/R1, and this 
current can only come from the output Ifb (because the current from the inputs is still 
= 0 A). So, if we start on the ‘−’ input, where the potential is Uin, we can ﬁnd the 
output voltage: 
uppe r U Subsc ript in  Baseli ne plu s upper I Subscript fb Baseline upper R 2 equals upper U Subscript out Baseline right double arrow upper U Subscript out Baseline equals upper U Subscript in Baseline plus StartFraction upper U Subscript in Baseline Over upper R 1 EndFraction upper R 2 equals upper U Subscript in Baseline left parenthesis 1 plus StartFraction upper R 2 Over upper R 1 EndFraction right parenthesis
up
er U Sub
s
cr ipt in Baseline plus upper I Subscript fb Baseline upper R 2 equals upper U Subscript out Baseline right double arrow upper U Subscript out Baseline equals upper U Subscript in Baseline plus StartFraction upper U Subscript in Baseline Over upper R 1 EndFraction upper R 2 equals upper U Subscript in Baseline left parenthesis 1 plus StartFraction upper R 2 Over upper R 1 EndFraction right parenthesis
up
p
er U Subscript in Baseline plus upper I Subscript fb Baseline upper R 2 equals upper U Subscript out Baseline right double arrow upper U Subscript out Baseline equals upper U Subscript in Baseline plus StartFraction upper U Subscript in Baseline Over upper R 1 EndFraction upper R 2 equals upper U Subscript in Baseline left parenthesis 1 plus StartFraction upper R 2 Over upper R 1 EndFraction right parenthesis
Again, we can set the gain arbitrarily with the resistors R1 and R2.

394
Appendix: Operational Ampliﬁers
+ 
— 
Uout 
R2 
Uin 
R1 
Iin 
Ifb 
Fig. A.4 A non-inverting ampliﬁer
+ 
— 
R 
U1 
U2 
Usum 
U1 
I1 
I2 
Isum 
Isum 
R 
R 
Fig. A.5 Summing circuit 
3. Summing 
Summing voltages is a common application of op amps. The circuit in Fig. A.5 
produces the sum of two voltages. 
Since the ‘−’ input is virtually grounded, the currents I1 and I2 are U1/R and U2/ 
R, respectively. These currents will add at the ‘−’ input and this sum of currents has 
nowhere else to go but to the output (the output sinks the current): 
0 minus up er I Su b s
cript sum Baseline upper R equals upper U Subscript sum Baseline equals minus left parenthesis StartFraction upper U 1 Over upper R EndFraction plus StartFraction upper U 2 Over upper R EndFraction right parenthesis upper R equals minus left parenthesis upper U 1 plus upper U 2 right parenthesis
0 minus upper I Subscript sum Baseline upper R equals upper U Subscript sum Baseline equals minus left parenthesis StartFraction upper U 1 Over upper R EndFraction plus StartFraction upper U 2 Over upper R EndFraction right parenthesis upper R equals minus left parenthesis upper U 1 plus upper U 2 right parenthesis
0
 
mi n us up per I
 Subscript sum Baseline upper R equals upper U Subscript sum Baseline equals minus left parenthesis StartFraction upper U 1 Over upper R EndFraction plus StartFraction upper U 2 Over upper R EndFraction right parenthesis upper R equals minus left parenthesis upper U 1 plus upper U 2 right parenthesis
4. Integrals and Derivatives 
Sometimes we want to ﬁnd the derivative or the integral of a signal. The circuit in 
Fig. A.6 will differentiate the input signal. First, the output voltage is –IfbR, and 
second, the voltage over the capacitor equals the input voltage Uin. The current Iin 
is, by deﬁnition, the change of charge per time unit:

Appendix: Operational Ampliﬁers
395
Fig. A.6 Differentiating 
circuit 
+ 
— 
Uout 
R 
Uin 
C 
Iin 
Ifb 
Fig. A.7 Integrating circuit 
— 
+ 
Uout 
R 
Uin 
C 
Iin 
Ifb 
upper  U Subsc r ipt out  Bas eline equals minus upper I Subscript fb Baseline upper R equals minus upper I Subscript in Baseline upper R equals minus upper R StartFraction d upper Q Over d t EndFraction equals minus upper R StartFraction d Over d t EndFraction left parenthesis upper U Subscript c Baseline upper C right parenthesis equals minus upper R upper C StartFraction d Over d t EndFraction upper U Subscript in
upp e r U  Subscript out Baseline equals minus upper I Subscript fb Baseline upper R equals minus upper I Subscript in Baseline upper R equals minus upper R StartFraction d upper Q Over d t EndFraction equals minus upper R StartFraction d Over d t EndFraction left parenthesis upper U Subscript c Baseline upper C right parenthesis equals minus upper R upper C StartFraction d Over d t EndFraction upper U Subscript in
upper U Su bscr ipt out Baseline equals minus upper I Subscript fb Baseline upper R equals minus upper I Subscript in Baseline upper R equals minus upper R StartFraction d upper Q Over d t EndFraction equals minus upper R StartFraction d Over d t EndFraction left parenthesis upper U Subscript c Baseline upper C right parenthesis equals minus upper R upper C StartFraction d Over d t EndFraction upper U Subscript in
upper 
U Subscript out Baseline equals minus upper I Subscript fb Baseline upper R equals minus upper I Subscript in Baseline upper R equals minus upper R StartFraction d upper Q Over d t EndFraction equals minus upper R StartFraction d Over d t EndFraction left parenthesis upper U Subscript c Baseline upper C right parenthesis equals minus upper R upper C StartFraction d Over d t EndFraction upper U Subscript in
And hence the input signal is differentiated. 
If we change places with the resistor and the capacitor, we get an integrating 
circuit, see Fig. A.7. In this circuit, the output signal Uout = −UC, and charge Q is, 
by deﬁnition, the integral of current: 
upper  U Su b s cript out Baseline equals minus upper U Subscript upper C Baseline equals minus StartFraction upper Q Over upper C EndFraction equals minus StartFraction 1 Over upper C EndFraction integral upper I Subscript in Baseline d t equals minus StartFraction 1 Over upper C EndFraction integral StartFraction upper U Subscript in Baseline Over upper R EndFraction d t equals minus StartFraction 1 Over upper R upper C EndFraction integral upper U Subscript in Baseline d t
up p e r U Subscript out Baseline equals minus upper U Subscript upper C Baseline equals minus StartFraction upper Q Over upper C EndFraction equals minus StartFraction 1 Over upper C EndFraction integral upper I Subscript in Baseline d t equals minus StartFraction 1 Over upper C EndFraction integral StartFraction upper U Subscript in Baseline Over upper R EndFraction d t equals minus StartFraction 1 Over upper R upper C EndFraction integral upper U Subscript in Baseline d t
u
p
per U S u bscript out Baseline equals minus upper U Subscript upper C Baseline equals minus StartFraction upper Q Over upper C EndFraction equals minus StartFraction 1 Over upper C EndFraction integral upper I Subscript in Baseline d t equals minus StartFraction 1 Over upper C EndFraction integral StartFraction upper U Subscript in Baseline Over upper R EndFraction d t equals minus StartFraction 1 Over upper R upper C EndFraction integral upper U Subscript in Baseline d t
u
p per U Subscript out Baseline equals minus upper U Subscript upper C Baseline equals minus StartFraction upper Q Over upper C EndFraction equals minus StartFraction 1 Over upper C EndFraction integral upper I Subscript in Baseline d t equals minus StartFraction 1 Over upper C EndFraction integral StartFraction upper U Subscript in Baseline Over upper R EndFraction d t equals minus StartFraction 1 Over upper R upper C EndFraction integral upper U Subscript in Baseline d t
up per  U  Subscript out Baseline equals minus upper U Subscript upper C Baseline equals minus StartFraction upper Q Over upper C EndFraction equals minus StartFraction 1 Over upper C EndFraction integral upper I Subscript in Baseline d t equals minus StartFraction 1 Over upper C EndFraction integral StartFraction upper U Subscript in Baseline Over upper R EndFraction d t equals minus StartFraction 1 Over upper R upper C EndFraction integral upper U Subscript in Baseline d t
up
p
er U 
Subscript out Baseline equals minus upper U Subscript upper C Baseline equals minus StartFraction upper Q Over upper C EndFraction equals minus StartFraction 1 Over upper C EndFraction integral upper I Subscript in Baseline d t equals minus StartFraction 1 Over upper C EndFraction integral StartFraction upper U Subscript in Baseline Over upper R EndFraction d t equals minus StartFraction 1 Over upper R upper C EndFraction integral upper U Subscript in Baseline d t
5. Constant Current Generator 
Figure A.8 illustrates a constant current generator. 
The op amp will keep the current through the Rsense resistor constant: Isense = (US 
– Uin)/Rsense, and since the collector current is ≈ Iemitter = Isense, the current through 
the load impedance will also be constant, independent of the size of the load.

396
Appendix: Operational Ampliﬁers
Fig. A.8 Constant current 
generator 
+ 
— 
US 
IC 
Uin 
Rsense 
Rload 
Iload 
Fig. A.9 A voltage follower 
+ 
— 
Uout = Uin 
Uin 
6. Voltage Follower 
Figure A.9 illustrates a ‘voltage follower’; the output is always equal to the input 
voltage. The usefulness of that might at ﬁrst glance be questionable, but this is 
extremely useful. 
The voltage follower is used as an ‘impedance converter’. Sometimes we have a 
signal source with a ‘high’ output impedance and/or a receiving component with a 
‘low’ input impedance. Using a voltage follower means the source is not loaded (no 
current is required from the source since the op amp input current is zero) and at the 
receiving end, a low impedance signal source is connected to the receiver (because 
the output impedance of the op amp is ‘low’). 
The voltage follower is sometime called a ‘buffer’.

Appendix: Operational Ampliﬁers
397
Uin > 0 
Iin 
R 
Fig. A.10 Positive resistance 
Uin> 0 
Iin 
+ 
— 
Uout 
R2 
R1 
RNR 
Fig. A.11 Negative resistance 
7. Negative Resistance 
Consider the circuit in Fig. A.10. 
We know that in a ‘normal’ circuit, the current Iin = Uin/R in Fig. A.10 is >0 if 
Uin > 0;  Uin sources current into the resistor. We would have a negative resistance 
if Iin < 0, i.e., if Uin would sink current. With an op amp, we can design a negative 
resistance. Consider the circuit in Fig. A.11. 
If we can prove that the current Iin in Fig. A.11 is <0, then the circuit behaves as 
a negative resistance. Uout is obviously Uin(1 + R2/R1). Then 
uppe r I Su bscript in Baseline equals StartFraction upper U Subscript in Baseline minus upper U Subscript out Baseline Over upper R Subscript NR Baseline EndFraction equals minus StartFraction upper R 2 divided by upper R 1 Over upper R Subscript NR Baseline EndFraction upper U Subscript in Baseline less than 0 right double arrow upper R Subscript in Baseline equals StartFraction upper U Subscript in Baseline Over upper I Subscript in Baseline EndFraction equals minus StartFraction upper R 1 Over upper R 2 EndFraction upper R Subscript NR
uppe
r  I Subscript in Baseline equals StartFraction upper U Subscript in Baseline minus upper U Subscript out Baseline Over upper R Subscript NR Baseline EndFraction equals minus StartFraction upper R 2 divided by upper R 1 Over upper R Subscript NR Baseline EndFraction upper U Subscript in Baseline less than 0 right double arrow upper R Subscript in Baseline equals StartFraction upper U Subscript in Baseline Over upper I Subscript in Baseline EndFraction equals minus StartFraction upper R 1 Over upper R 2 EndFraction upper R Subscript NR
uppe
r I Subs cript in Baseline equals StartFraction upper U Subscript in Baseline minus upper U Subscript out Baseline Over upper R Subscript NR Baseline EndFraction equals minus StartFraction upper R 2 divided by upper R 1 Over upper R Subscript NR Baseline EndFraction upper U Subscript in Baseline less than 0 right double arrow upper R Subscript in Baseline equals StartFraction upper U Subscript in Baseline Over upper I Subscript in Baseline EndFraction equals minus StartFraction upper R 1 Over upper R 2 EndFraction upper R Subscript NR
uppe
r  I Subscript in Baseline equals StartFraction upper U Subscript in Baseline minus upper U Subscript out Baseline Over upper R Subscript NR Baseline EndFraction equals minus StartFraction upper R 2 divided by upper R 1 Over upper R Subscript NR Baseline EndFraction upper U Subscript in Baseline less than 0 right double arrow upper R Subscript in Baseline equals StartFraction upper U Subscript in Baseline Over upper I Subscript in Baseline EndFraction equals minus StartFraction upper R 1 Over upper R 2 EndFraction upper R Subscript NR
up
er 
I Subscript in Baseline equals StartFraction upper U Subscript in Baseline minus upper U Subscript out Baseline Over upper R Subscript NR Baseline EndFraction equals minus StartFraction upper R 2 divided by upper R 1 Over upper R Subscript NR Baseline EndFraction upper U Subscript in Baseline less than 0 right double arrow upper R Subscript in Baseline equals StartFraction upper U Subscript in Baseline Over upper I Subscript in Baseline EndFraction equals minus StartFraction upper R 1 Over upper R 2 EndFraction upper R Subscript NR
Hence, this circuit acts as a negative resistance, sinking current at the input.

398
Appendix: Operational Ampliﬁers
+ 
— 
+ 
— 
Uin 
R1 
R2 
R3 
R4 
C 
Iin 
Uin 
Iin 
sL 
Fig. A.12 Inductor replacement circuit 
8. Inductor Replacement 
Resistors and capacitors are easily integrated on silicon, but inductors are harder. 
For that reason, inductor replacement circuits have been developed. Figure A.12 
illustrates ‘Antoniou’s inductor replacement’ circuit. This is an inductor replacement 
circuit if it behaves like an inductor, i.e., if the impedance Uin/Iin = sL. To prove that 
we need to indicate some potentials and currents, see Fig. A.13. 
First, we can see that both op amps’ inputs must have the same potential Uin 
(because of the negative feedback). That means that the current I4 is Uin/R4, and this 
current must come from the capacitor branch. Then the potential UC must be: 
up er U S ubscr
ipt upper C Baseline equals upper U Subscript in Baseline plus upper I 4 StartFraction 1 Over s upper C EndFraction equals upper U Subscript in Baseline left parenthesis 1 plus StartFraction 1 Over s upper R 4 upper C EndFraction right parenthesis
upp er U 
S
ub sc
ript upper C Baseline equals upper U Subscript in Baseline plus upper I 4 StartFraction 1 Over s upper C EndFraction equals upper U Subscript in Baseline left parenthesis 1 plus StartFraction 1 Over s upper R 4 upper C EndFraction right parenthesis
uppe
r
 U Subscript upper C Baseline equals upper U Subscript in Baseline plus upper I 4 StartFraction 1 Over s upper C EndFraction equals upper U Subscript in Baseline left parenthesis 1 plus StartFraction 1 Over s upper R 4 upper C EndFraction right parenthesis
Then the current I3 must be:

Appendix: Operational Ampliﬁers
399
I3 
+ 
— 
+ 
— 
Uin 
R1 
R2 
R3 
R4 
C 
Iin 
Uin 
Uin 
U12 
I4 
UC 
I4 
I3 
Fig. A.13 Inductor replacement circuit 
upp er I 3 equals StartFraction upper U Subscript upper C Baseline minus upper U Subscript in Baseline Over upper R 3 EndFraction equals StartFraction upper U Subscript in Baseline Over s upper R 3 upper R 4 upper C EndFraction
upp
e
r I 3 equals StartFraction upper U Subscript upper C Baseline minus upper U Subscript in Baseline Over upper R 3 EndFraction equals StartFraction upper U Subscript in Baseline Over s upper R 3 upper R 4 upper C EndFraction
upper I 
3 equals StartFraction upper U Subscript upper C Baseline minus upper U Subscript in Baseline Over upper R 3 EndFraction equals StartFraction upper U Subscript in Baseline Over s upper R 3 upper R 4 upper C EndFraction
Then U12 is. 
uppe r U 12  equals upper U 
Subscript in Baseline minus upper R 2 upper I 3 equals upper U Subscript in Baseline minus StartFraction upper R 2 Over s upper R 3 upper R 4 upper C EndFraction upper U Subscript in Baseline equals upper U Subscript in Baseline left parenthesis 1 minus StartFraction upper R 2 Over s upper R 3 upper R 4 upper C EndFraction right parenthesis
upper U 12 e quals
 
up p
er U Subscript in Baseline minus upper R 2 upper I 3 equals upper U Subscript in Baseline minus StartFraction upper R 2 Over s upper R 3 upper R 4 upper C EndFraction upper U Subscript in Baseline equals upper U Subscript in Baseline left parenthesis 1 minus StartFraction upper R 2 Over s upper R 3 upper R 4 upper C EndFraction right parenthesis
upper U
 
12 equals upper U Subscript in Baseline minus upper R 2 upper I 3 equals upper U Subscript in Baseline minus StartFraction upper R 2 Over s upper R 3 upper R 4 upper C EndFraction upper U Subscript in Baseline equals upper U Subscript in Baseline left parenthesis 1 minus StartFraction upper R 2 Over s upper R 3 upper R 4 upper C EndFraction right parenthesis
Then Iin must be: 
uppe r 
I Su bscri
p
t in
 Baseline equals StartStartFraction upper U Subscript in Baseline minus upper U Subscript in Baseline left parenthesis 1 minus StartFraction upper R 2 Over s upper R 3 upper R 4 upper C EndFraction right parenthesis OverOver upper R 1 EndEndFraction equals StartFraction upper R 2 Over s upper R 1 upper R Subscript 3 Baseline upper R 4 upper C EndFraction upper U Subscript in
uppe r I
 Subscript in Baseline equals StartStartFraction upper U Subscript in Baseline minus upper U Subscript in Baseline left parenthesis 1 minus StartFraction upper R 2 Over s upper R 3 upper R 4 upper C EndFraction right parenthesis OverOver upper R 1 EndEndFraction equals StartFraction upper R 2 Over s upper R 1 upper R Subscript 3 Baseline upper R 4 upper C EndFraction upper U Subscript in
up
e
r I Subscript in Baseline equals StartStartFraction upper U Subscript in Baseline minus upper U Subscript in Baseline left parenthesis 1 minus StartFraction upper R 2 Over s upper R 3 upper R 4 upper C EndFraction right parenthesis OverOver upper R 1 EndEndFraction equals StartFraction upper R 2 Over s upper R 1 upper R Subscript 3 Baseline upper R 4 upper C EndFraction upper U Subscript in
upper I Sub scr
ipt in Baseline equals StartStartFraction upper U Subscript in Baseline minus upper U Subscript in Baseline left parenthesis 1 minus StartFraction upper R 2 Over s upper R 3 upper R 4 upper C EndFraction right parenthesis OverOver upper R 1 EndEndFraction equals StartFraction upper R 2 Over s upper R 1 upper R Subscript 3 Baseline upper R 4 upper C EndFraction upper U Subscript in

400
Appendix: Operational Ampliﬁers
and hence 
StartFraction upper U Subscript in Baseline Over upper I Subscript in Baseline EndFraction equals s upper L where upper L equals StartFraction upper R 1 upper R 3 upper R 4 upper C Over upper R 2 EndFraction
Star
tFrac tion u pp er  U Subscript in Baseline Over upper I Subscript in Baseline EndFraction equals s upper L where upper L equals StartFraction upper R 1 upper R 3 upper R 4 upper C Over upper R 2 EndFraction
Sta
rtFraction upper U Subscript in Baseline Over upper I Subscript in Baseline EndFraction equals s upper L where upper L equals StartFraction upper R 1 upper R 3 upper R 4 upper C Over upper R 2 EndFraction
This proves that the circuit in Fig. A.12 acts as an inductor. 
These are just some examples of the versatile applications of op amps and this 
textbook contains a lot more. For example, Fig. 3.60 illustrates a difference circuit, in 
Fig. 4.5, we have differential ampliﬁer, Figs. 4.6 and 4.8 illustrate two different imple-
mentations of instrument ampliﬁers, Fig. 6.8 is an active probe, Fig. 6.11 illustrates 
a current probe, Fig. 9.11 illustrates a state variable ﬁlter, Fig. 9.13 is a Sallen-Key 
ﬁlter and in Fig. 11.2 an op amp is used in a sample and hold circuit.

Index 
A 
Accelerometer, 49, 50 
ADC, 229 
Aliasing, 136, 138 
Alumel, 37 
Ampliﬁer 
differential, 80, 392 
differential-ended, 77 
instrumentation, 78, 80f, 392 
inverting, 393 
non-inverting, 176, 393 
operational, 77 
Analog-to-digital converter, see ’ADC’, 229 
dual slope, 240, 241 
ﬂash, 236 
integrating, 240 
level-crossing (LC), 245 
parallel, 236 
pipeline, 236, 238 
SAR, 234 
sigma-delta, 253 
single slope, 244 
successive approximation, 234 
Analysis, 124 
Analyzer 
heterodyne, 171 
Antenna, 16 
electric dipole, 12 
magnetic dipole, 16 
Attenuation, 98 
Attenuation factor, 98 
Auto-correlation, see ’correlation’ 
B 
Bandwidth, 5, 10, 115, 140f, 156, 169, 171 
Bayonet Neill-Concelman (BNC), 16 
Bernoulli’s equation, 52 
Bilinear transformation, 222, 389 
Black body, 43 
Block diagram, 212, 214 
Bode diagram, 139, 145, 147 
Bode plot, 371, 372, 379, 384 
Boltzmann’s constant, 10 
Bureau International de Poids et Mesures 
(BIPM), 291 
Burst-like signal, 245, 246 
C 
Causal, 210, 219 
Central limit theorem, 286, 294f 
Channel Electron Multiplier (CEM), 67 
Channeltron, 67 
Characteristic impedance, 85, 86f 
Chromel, 37 
CM residual, 2 
Cold junction, 34, 36 
compensation, 39 
Common, 2 
Common ground, 26 
Common mode, 2, 77, 279 
Common Mode Rejection Ratio (CMRR), 
3, 78, 83 
Comparator, 392 
Conﬁdence interval, 285, 293, 357 
Conﬁdence level, 285 
Constantan, 36, 45 
Constant current generator, 395 
Control function, 369, 385 
PI, 375 
Controller, 369, 392
© The Editor(s) (if applicable) and The Author(s), under exclusive license 
to Springer Nature Singapore Pte Ltd. 2024 
L. Bengtsson, Electrical Measurement Techniques, 
https://doi.org/10.1007/978-981-99-8187-8 
401

402
Index
P, 372, 377 
PD, 377 
PI, 377 
PID, 377, 378 
proportional, 372 
Control system, see ’system’ 
Convolution, 195f, 202, 319, 362 
discrete-time, 333 
Correlation, 319 
auto-, 319 
auto-, discrete-time, 335 
circular, 337 
cross-, 319, 325 
cross-, distrete-time, 333 
temporal, 319 
time-, 319 
Coupling, 9 
Covariance, 282 
Coverage factor, 286, 293 
Critical damping, 382 
Critically damped, 179, 187 
Cross-correlation, see ’correlation’ 
Crosstalk, 26, 29 
B-ﬁeld, 18 
capacitive, 20 
common impedance, 27 
E-radiation, 13 
inductive, 23, 24 
Cryogenic, 43 
Crystal 
piezoelectric, 56, 57 
cxcorr, 338 
D 
Damping, 382 
Damping constant, 382 
Dark current, 61, 67 
dB, 3 
dBm, 3 
dBV, 3 
Dead time, 380, 381 
Decimation, 250 
Degrees of freedom, 286 
effective, 294f 
Delayline, 272 
tapped, 273 
Delta-function, 330 
Delta network, 108 
Density function, 279, 286 
Difference equation, 214, 216, 224 
Differential-ended, 4, 314 
Differential mode, 2 
Differentiation time constant, 376 
Digital ﬁlter, 209 
Digital Multimeter (DMM), 244 
Digital-to-Analog Converter (DAC), 233 
1-bit, 256 
Digitizing, 230 
Dirac impulse, 148f, 210 
Discrete Fourier Transform (DFT), 133, 
134, 152, 164 
spectrum, 167, 168 
Discrete-time space, 149 
Discretizing, 230 
Dispersion, 29 
Distribution 
normal, 286, 292 
student-t, 286 
t, 287 
uniform, 287 
Dithering, 250 
Double integral method, 180 
Dynamic Light Scattering (DLS), 332 
Dynode, 65 
continuous-, 67 
E 
E12 series, 102 
Electrical quantity, 1 
ElectroCardioGram (ECG), 245 
Emf, 35 
thermo, 36, 43 
Emissivity, 43 
secondary electron, 68 
Equivalent Number Of Bits (ENOB), 247 
Equivalent-time sampling, 260 
Error bar, 357 
Error signal, 369 
Euler’s formula, 126, 144 
Euler transformation, 388 
Expectation value, 281 
F 
Falltime, 4 
Faraday cage, 15, 22 
Far end, 87 
Fast Fourier Transform (FFT), 133, 134, 
162 
algorithm, 133 
spectrum, 164, 169 
Feedback, 392 
negative, 392 
positive, 392 
Fiber optics, 29

Index
403
Filter, 140, 220, 308 
active, 176 
all-pole, 187, 188 
analog, 175 
anti-aliasing, 249 
bandpass, 181, 185, 193, 194, 203, 223 
bandstop, 185, 194, 204 
Bessel, 186 
biquad, 177 
biquadratic, 177 
butterworth, 179, 187f 
Cauer, 186, 191f 
causal, 219 
Chebyshev, 186, 188f, 204 
coefﬁcients, 223 
comb, 226 
elliptic, 191 
ﬁnite impulse response (FIR), 212, 218, 
223, 343 
ﬁrst order, 175, 182, 220 
highpass, 180, 185, 193, 225, 257 
inﬁnite impulse response (IIR), 214, 
222, 226 
lowpass, 181, 182, 185, 192, 257, 312 
matched, 319, 327f 
notch, 186 
n-tap, 212, 220 
order, 145 
passive, 175 
RC, 182, 202, 220 
resonance, 167, 170 
second order, 177, 180, 185 
selectiveness, 182 
state-variable, 182 
steepness, 182 
transformation, 191 
Twin-T, 186 
type, 177 
Filter coefﬁcients, 212, 218 
Filters 
passive, 185 
Fleming’s right-hand rule, 58 
Flip-ﬂop, 267, 272 
Flow meter, 59 
Fourier spectrum, 361 
Fourier transform, 125, 125, 129, 144, 147, 
150, 161, 171, 195, 361 
discrete, 133f, 152 
discrete-time, 152 
fast, 133 
inverse, 361 
pair, 341 
freqs, 146 
Frequency, 124, 162 
complex, 143, 144, 148 
cross-over, 386 
cutoff, 183, 204, 222, 225 
excitation, 307 
imaginary, 144 
resolution, 134 
resonance, 177 
sampling, 361 
self-oscillation, 384 
Frequency response, 218 
Frequency space, 123 
Fresnel’s law, 89 
Full rank, 349 
G 
Gain margin, 371 
Gauge, 33 
gas ionization, 69 
hot-cathode, 72, 72f 
Pirani, 69, 69 
thermal conductivity, 69 
vacuum, 69 
Gauge factor, 45 
Guesstimating, 299f 
GUM document, 291, 294f 
H 
Hall effect, 58 
Hall probe, 59 
Heaviside function, 158 
Heterodyne, see ’analyzer’ 
Heterodyne technique, 312 
Hot junction, 34, 36, 43 
I 
iid, 282 
Illumination, 61 
Impact angle, 345 
Impedance matching, 96 
Impulse response, 148f, 149, 195, 205, 210, 
213, 217, 327 
coefﬁcients, 212 
Inductance 
mutual, 23 
Inductor replacement, 398 
Antoniou’s, 398 
In-phase, 315 
Instrumentation ampliﬁer, see ’ampliﬁer’ 
Integration time constant, 375 
Interpolation, 250, 269

404
Index
sinx/x, 363 
Interval estimation, 284 
Inverse Fourier transform method, 218 
Ion feedback, 67 
J 
Johnson noise, 10 
K 
Kirchhoff’s law 
current, 25, 57 
voltage, 26 
L 
Laplace transform, 144f, 145, 146, 148, 
149, 151, 157, 158, 181, 195 
Leakage, 163, 170 
quantify, 166 
Lenz’s law, 24 
l’Hospital’s rule, 126 
Linear and Time-Invariant (LTI), 140 
Linear interpolation, 361 
Linear regression, 349 
Load cell, see ’sensor’ 
Local oscillator, 171 
Lock-In Ampliﬁer (LIA), 308, 313f, 314 
Lumen (lm), 61 
Luminous ﬂow, 61 
Luminous intensity, 61 
Lux (lx), 61 
M 
Mass spectrometer, 277 
Matrix 
coefﬁcient, 348 
ill-conditioned, 358 
measurement data, 348 
observation, 348 
Mean, 281 
Microchannel Plate (MCP), 68 
Chevron, 69 
Z, 69 
Modulator 
delta, 254 
Moment of coincidence, 270 
N 
Near end, 87 
Neyman-Pearson detection, 325 
Night-vision googles, 69 
Noise, 9 
1/f, 11 
ﬂicker, 11 
gaussian, 279 
Johnson, 10 
pink, 11 
power, 329 
quantization, 12 
shot, 11 
white gaussian, 358 
Noise factor, 11 
Noise-shaping, 256 
Nonie scale, 269 
Non-referenced, 4, 29 
Normal, 2 
Normal mode, 2, 77, 279 
ampliﬁcation, 81 
Nyquist interval, 138 
Nyquist limit, 249 
Nyquist sampling, see ’sampling theorem’ 
Nyquist’s stability criterion, 374 
O 
Operational ampliﬁer (Op amp), 391f, 391 
golden rules, 392 
Opto coupler, 29 
Orthogonality principle, 352 
Oscilloscope 
sampling, 260 
Output estimate, 294f 
Overdamped, 188 
Oversampling, 222, 247, 249 
Oversampling rate (OSR), 247 
Overshoot, 179, 187, 370, 377 
Overshoot ratio, 382 
P 
Passband, 179 
Phase diagram, 190, 371 
linear, 143, 186 
Phase-locked loop, see ’PLL’ 
Phase-locked loop, 313 
Phase margin, 371, 377 
Phase Sensitive Detector (PSD), 308, 309, 
311, 313 
Photocathode, 65 
Photoconductive, 61 
Photodiode 
avalanche, 63 
Photodiodes, 61 
Photomultiplier, 61, 65

Index
405
Photomultiplier Tube (PMT), 65 
Photon Correlation Spectroscopy (PCS), 
331 
Photoresistors, 61 
Phototransistors, 61 
Photovoltaic, 61, 62 
Physical quantity, 1 
PI, 375 
PID parameters, 377 
Piezoelectric crystals, see ’crystal’ 
Piezoresistive, 45 
Plant, 378 
PLL, 313 
Point estimator, 284 
poles, see ’system’ 
Position sensitive detectors, see ’sensor’ 
Position Sensitive Detectors (PSD), 64 
Probability, 285 
Probability distribution 
uniform, 247 
Probe, 111, 113f 
active, 116 
current, 117, 118f 
passive, 113, 114f 
Process 
stationary, 341 
stochastic, 341 
Process value, 369 
Pseudo inverse, 349, 355 
Pyrometer, 43 
dissapering-ﬁlament, 44 
Pythagorean identity, 314 
pzplot, 147 
Q 
Q, 177, 308, 315 
QR factorization, 360 
Quality factor, 177, 182, 187 
Quantity 
electrical, 33 
physical, 33 
Quantization, 229 
noise, 233 
Quantization error, 269 
Quantization noise, 248f, 255 
Quantum efﬁciency, 66 
Quarter of a period, 315 
R 
Rail-to-rail, 392 
Rectiﬁer, 312 
Referenced, 29 
Reference signal, 312, 314 
Residual, 233 
Resistance 
negative, 397 
Resistivity, 45 
Resolution, 169 
ADC, 230, 244 
bandwidth, 170 
time, 271 
Resolution Bandwidth (RBW), 169f 
Response time, 377 
Ripple, 187, 188, 190 
passband, 186 
Risetime, 4, 5, 370, 377 
S 
s, 148 
S&H, see ’sample & hold’ 
Sallen–Key link, 183, 203 
second order, 183 
Sample & hold, 230, 231 
Sampling 
asynchronous, 245, 246 
equivalent-time, 260 
level-crossing, 245 
real-time, 260 
synchronous, 244, 245 
Sampling rate, 131 
Sampling theorem, 132, 138, 247, 360 
Nyquist, 132 
Shannon, 132 
Scalar product, 144 
Seebeck coefﬁcient, 36 
Seebeck effect, 34 
Seismic mass, 49 
Seismograph, 343 
Sensitivity coefﬁcient, 293 
Sensor, 1, 33 
bandgap, 42 
ﬂow, 51, 59 
ﬂuid level, 53, 54 
Hall, 58, 118 
load cell, 55 
magnetic, 58 
photo, 61 
position, 59 
position sensitive detector, 64 
pressure, 50 
temperature, 34 
torque, 53, 54 
viscosity, 55 
Settling time, 369, 370, 377

406
Index
Set value, 369 
Shannon, see ’sampling theorem’ 
Shield, 21, 24 
Shot noise, 11 
Sigma-delta 
modulation, 253 
Signal conditioning, 1, 34 
Signal-to-noise, 3, 283 
Signal-to-noise ratio (SNR), 83, 247, 248, 
255, 283 
Sinc function, 167, 363 
Single-ended, 4 
Single photon detection, 66 
Smooth, 312 
Sparse signal, 245 
Spectral density, 248 
Spectrum analyzer, 161, 170 
analog, 161 
digital, 161 
s-plane, 149, 150, 187, 191 
Splicing, 97, 97 
Splitting, 97, 99f 
s space, 152 
Standard deviation, 281f 
Standard error, 283f 
State variables, 181 
Steady state, 374 
Steady state error, 369, 373, 377 
Stefan-Boltzmann’s law, 43 
Step function, 158 
Step response, 369, 378, 381 
Stochastic process, 341 
Stochastic variable, 280, 284, 292 
Strain, 45 
false, 46 
ostensible, 46 
Strain gauge, 46f 
piezoresistive, 50 
principle, 45f, 48 
Successive Approximation Register (SAR) 
interleaved, 258 
Switched capacitor, 184 
System, 5 
bandpass, 140, 141, 147 
bandstop, 141 
closed loop, 374 
control, 369, 373 
feedback, 371 
ﬁrst order, 373, 378 
highpass, 140, 141 
identiﬁcation, 378 
linear and time-invariant, 140 
lowpass, 139–141, 176 
notch, 140, 141 
open loop, 374 
overdamped, 382 
pole, 147, 177, 227 
resonance, 140, 141 
second order, 371, 382 
stopband, 140 
time constant, 378 
underdamped, 382 
zero, 147 
System of equations 
overdetermined, 348, 352 
T 
Tap, 212 
T-cross, 98 
Temperature coefﬁcient, 45 
Termination, 95 
Thermal conductivity, 70 
Thermocouple, 34, 35 
type T, 261 
Thermopile, 43 
Thomson effect, 34 
Time Domain Reﬂectometry (TDR), 99 
Time measurements 
Vernier, 269 
Time space, 123 
Time stretching, 274 
Time-to-Digital Converter (TDC), 267 
analog, 267 
asynchronous, 269 
counter based, 268 
digital, 267 
ﬂash, 273 
Vernier, 271 
Transducer, 33 
Transfer function, 138, 145, 203, 204, 211, 
256, 370, 378 
Transform domains, 154 
Transformer, 23 
isolation, 29 
Transform theory, 123 
Triangulation 
optical, 66 
Triode, 71 
Twisted-pair (TP), 19, 28 
shielded, 29 
U 
Unbiased estimator, 283 
Uncertainty 
expanded, 293, 294f

Index
407
propagation, 293 
standard, 293, 294f 
type A, 294f 
type B, 294f 
Uncertainty budget, 288, 293, 294, 301f 
Underdamped, 179, 188 
Universal Active Filter (UAF), 181 
V 
Variance, 281, 283, 329 
population, 283 
sample, 284, 286 
uniform distribution, 287 
Vector, 144, 349 
base, 144 
column, 349 
Venturi pipe, 52 
Voltage follower, 176, 230, 396 
Voltage meter 
vector, 315 
W 
Wave impedance, 87f 
Wave reﬂection, 89 
Welch–Satterthwaite formula, 294f 
Wheatstone bridge, 47f, 49, 70, 71, 79 
full bridge, 48 
half-bridge, 48 
Wien’s law, 43 
Window, 164 
Bartlett, 165 
Blackman, 164 
Hamming, 164, 170 
Hanning, 164 
rectangular, 170 
triangle, 164 
2-wire method, 41 
3-wire method, 74 
4-wire method, 41 
X 
xcorr, 338 
Y 
Y network,  108 
Z 
Zero-biased, 61 
zeros, see ’system’ 
Ziegler-Nichol’s rule of thumb, 385 
z plane, 153 
z space, 150, 152 
z transform, 150, 151f 
inverse, 212

