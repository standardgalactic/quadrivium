Alex Aiken 
Compilers 
Cool Semantics I 

Alex Aiken 
Cool Semantics I 
so, E, S d true : Bool(true), S 
so, E, S d false : Bool(false), S 
s is a string literal 
n is the length of s 
so, E, S d s : String(n,s), S 
i is an integer literal 
so, E, S d i : Int(i), S 

Alex Aiken 
E(id) = lid 
S(lid) = v 
so, E, S d id : v, S 
Cool Semantics I 

Alex Aiken 
Cool Semantics I 
so, E, S d self : so, S 

Alex Aiken 
Cool Semantics I 
so, E, S d e : v, S1  
E(id) = lid 
S2 = S1[v/lid] 
so, E, S d id  e : v, S2 

Alex Aiken 
Cool Semantics I 
so, E, S d e1 : v1, S1  
so, E, S1 d e2 : v2, S2  
so, E, S d e1 + e2: v1 +v2, S2 

Alex Aiken 
Cool Semantics I 
so, E, S d e1 : v1, S1  
so, E, S1 d e2 : v2, S2 
…  
so, E, Sn-1 d en : vn , Sn 
so, E, S d { e1; … en; } : vn, Sn 

Alex Aiken 
Cool Semantics I 
• Consider the expression 
– { X  7 + 5; 4; } 

Alex Aiken 
Cool Semantics I 
so, E, S d e1 : Bool(true), S1  
so, E, S1 d e2 : v, S2 
so, E, S d if e1 then e2 else e3 : v, S2 

Alex Aiken 
Cool Semantics I 
so, E, S d e1 : Bool(false), S1  
so, E, S d while e1 loop e2 pool : void, S1 

Alex Aiken 
Cool Semantics I 
so, E, S d e1 : Bool(true), S1  
so, E, S1 d e2 : v, S2 
so, E, S2 d while e1 loop e2 pool : void, S3 
so, E, S d while e1 loop e2 pool : void, S3 

Alex Aiken 
Cool Semantics I 
 
• In what context should e2 be evaluated? 
– Environment like E but with a new binding of id to a 
fresh location lnew 
– Store like S1 but with lnew mapped to v1 
so, E, S d e1 : v1, S1  
so, ?, ? d e2 : v, S2 
so, E, S d let id : T  e1 in e2 : v2, S2 

Alex Aiken 
• We write lnew =  newloc(S) to say that lnew is a location 
not already used in S 
– newloc is like the memory allocation function 
so, E, S d e1 : v1, S1 
lnew = newloc(S1)  
so, E[lnew/id] , S1[v1/lnew] d e2 : v2, S2 
so, E, S d let id : T  e1 in e2 : v2, S2 
Cool Semantics I 

Cool Semantics I 
Fill in the missing store value for the derivation of (x  6) < x + 1. 
[l3] 
[l3] 
[l6] 
[l7] 
[l6] 
[l6] 
[l7] 
[l7] 
 
[l3] 
[l3] 
[l6] 
[l6] 
 
[l3] 
[l6] 
[l6] 
[l6] 
  
  
S2    
S3  
S4  
S5  
 
so, [x:l], S1 d 6 : Int(6), S2 
 
so, [x:l], S3 d 1 : Int(1), S4 
S3 = S2[6/l] 
 
 
so, [x:l], S4 d x : 6, S5  
 
so, [x:l], S1 d x  6 : 6, S3 
 
so, [x:l], S3 d x + 1 : 7, S5  
  
so, [x:l], [l3] d (x  6) < x + 1 : Bool(true), S5 

