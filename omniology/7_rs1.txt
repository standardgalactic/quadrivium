1
Decision Properties of Regular 
Languages
General Discussion of “Properties”
The Pumping Lemma
Membership, Emptiness, Etc.

2
Properties of Language Classes
A language class is a set of 
languages.

Example: the regular languages.
Language classes have two important 
kinds of properties:
1. Decision properties.
2. Closure properties.

3
Closure Properties
A closure property of a language class 
says that given languages in the class, 
an operation (e.g., union) produces 
another language in the same class.
Example: the regular languages are 
obviously closed under union, 
concatenation, and (Kleene) closure.
Use the RE representation of languages.

4
Representation of Languages
Representations can be formal or informal.
Example (formal): represent a language by 
a RE or FA defining it.
Example: (informal): a logical or prose 
statement about its strings:
{0n1n | n is a nonnegative integer}
“The set of strings consisting of some number of 
0’s followed by the same number of 1’s.”

5
Decision Properties
A decision property for a class of 
languages is an algorithm that takes a 
formal description of a language (e.g., a 
DFA) and tells whether or not some 
property holds.
Example: Is language L empty?

6
Why Decision Properties?
Think about DFA’s representing 
protocols.
Example: “Does the protocol terminate?” 
= “Is the language finite?”
Example: “Can the protocol fail?” = “Is 
the language nonempty?”
Make the final state be the “error” state.

7
Why Decision Properties – (2)
We might want a “smallest” 
representation for a language, e.g., a 
minimum-state DFA or a shortest RE.
If you can’t decide “Are these two 
languages the same?”
I.e., do two DFA’s define the same 
language?
You can’t find a “smallest.”

8
The Membership Problem
Our first decision property for regular 
languages is the question: “is string w 
in regular language L?”
Assume L is represented by a DFA A.
Simulate the action of A on the 
sequence of input symbols forming w.

9
Example: Testing Membership
Start
1
0
A
C
B
1
0
0,1
0 1 0 1 1
Next
symbol
Current
state

10
Example: Testing Membership
Start
1
0
A
C
B
1
0
0,1
0 1 0 1 1
Next
symbol
Current
state

11
Example: Testing Membership
Start
1
0
A
C
B
1
0
0,1
0 1 0 1 1
Next
symbol
Current
state

12
Example: Testing Membership
Start
1
0
A
C
B
1
0
0,1
0 1 0 1 1
Next
symbol
Current
state

13
Example: Testing Membership
Start
1
0
A
C
B
1
0
0,1
0 1 0 1 1
Next
symbol
Current
state

14
Example: Testing Membership
Start
1
0
A
C
B
1
0
0,1
0 1 0 1 1
Next
symbol
Current
state

15
What if We Have the Wrong 
Representation?
There is a circle of conversions from 
one form to another:
RE
DFA
NFA
ε-NFA

16
The Emptiness Problem
Given a regular language, does the 
language contain any string at all?
Assume representation is DFA.
Compute the set of states reachable 
from the start state.
If at least one final state is reachable, 
then yes, else no.

17
The Infiniteness Problem
Is a given regular language infinite?
Start with a DFA for the language.
Key idea: if the DFA has n states, and 
the language contains any string of 
length n or more, then the language is 
infinite.
Otherwise, the language is surely finite.
Limited to strings of length n or less. 

18
Proof of Key Idea
If an n-state DFA accepts a string w of 
length n or more, then there must be a 
state that appears twice on the path 
labeled w from the start state to a final 
state.
Because there are at least n+1 states 
along the path.

19
Proof – (2)
w = xyz
q
x
y
z
Then xyiz is in the language for all i > 0.
Since y is not ε, we see an infinite
number of strings in L.

20
Infiniteness – Continued
We do not yet have an algorithm.
There are an infinite number of strings 
of length > n, and we can’t test them 
all.
Second key idea: if there is a string of 
length > n (= number of states) in L, 
then there is a string of length between 
n and 2n-1.

21
Proof of 2nd Key Idea
Remember:
y is the first cycle on the path.
So |xy| < n; in particular, 1 < |y| < n.
Thus, if w is of length 2n or more, 
there is a shorter string in L that is still 
of length at least n.
Keep shortening to reach [n, 2n-1].
x
y
z

22
Completion of Infiniteness 
Algorithm
Test for membership all strings of length 
between n and 2n-1.
If any are accepted, then infinite, else finite.
A terrible algorithm.
Better: find cycles between the start 
state and a final state.

23
Finding Cycles
1. Eliminate states not reachable from 
the start state.
2. Eliminate states that do not reach a 
final state.
3. Test if the remaining transition graph 
has any cycles.

24
Finding Cycles – (2)
But a simple, less efficient way to find 
cycles is to search forward from a given 
node N.
If you can reach N, then there is a 
cycle.
Do this starting at each node.

25
The Pumping Lemma
We have, almost accidentally, proved a 
statement that is quite useful for showing 
certain languages are not regular.
Called the pumping lemma for regular 
languages.

26
Statement of the Pumping Lemma
For every regular language L
There is an integer n, such that
For every string w in L of length > n
We can write w = xyz such that:
1. |xy| < n.
2. |y| > 0.
3. For all i > 0, xyiz is in L.
Number of
states of
DFA for L
Labels along
first cycle on
path labeled w

27
Example: Use of Pumping Lemma
We have claimed {0k1k | k > 1} is not a 
regular language.
Suppose it were.  Then there would be 
an associated n for the pumping lemma.
Let w = 0n1n.  We can write w = xyz, 
where x and y consist of 0’s, and y ε.
But then xyyz would be in L, and this 
string has more 0’s than 1’s.

28
Decision Property: Equivalence
Given regular languages L and M, is     
L = M?
Algorithm involves constructing the 
product DFA from DFA’s for L and M.
Let these DFA’s have sets of states Q 
and R, respectively.
Product DFA has set of states Q R.
I.e., pairs [q, r] with q in Q, r in R.

29
Product DFA – Continued
Start state = [q0, r0] (the start states of 
the DFA’s for L, M).
Transitions: δ([q,r], a) =            
[δL(q,a), δM(r,a)]
δL, δM are the transition functions for the 
DFA’s of L, M.
That is, we simulate the two DFA’s in the 
two state components of the product DFA.

30
Example: Product DFA
A
C
B
D
0
1
0, 1
1
1
0
0
[A,C]
[A,D]
0
[B,C]
1
0
1
0
1
[B,D]
0
1

31
Equivalence Algorithm
Make the final states of the product 
DFA be those states [q, r] such that 
exactly one of q and r is a final state of 
its own DFA.
Thus, the product accepts w iff w is in 
exactly one of L and M.
L = M if and only if the product 
automaton’s language is empty.

32
Example: Equivalence
A
C
B
D
0
1
0, 1
1
1
0
0
[A,C]
[A,D]
0
[B,C]
1
0
1
0
1
[B,D]
0
1

33
Decision Property: Containment 
Given regular languages L and M, is   
L M?
Algorithm also uses the product 
automaton.
How do you define the final states [q, r] 
of the product so its language is empty 
iff L M?
Answer: q is final; r is not.

34
Example: Containment
A
C
B
D
0
1
0, 1
1
1
0
0
[A,C]
[A,D]
0
[B,C]
1
0
1
0
1
[B,D]
0
1
Note: the only final state
is unreachable, so
containment holds.

35
The Minimum-State DFA for a 
Regular Language
In principle, since we can test for 
equivalence of DFA’s we can, given a 
DFA A find the DFA with the fewest 
states accepting L(A).
Test all smaller DFA’s for equivalence 
with A.
But that’s a terrible algorithm.

36
Efficient State Minimization
Construct a table with all pairs of 
states.
If you find a string that distinguishes
two states (takes exactly one to an 
accepting state), mark that pair.
Algorithm is a recursion on the length 
of the shortest distinguishing string.

37
Love
Start
Love-15
15-Love
s
o
Love-30
15-all
30-Love
s
s
o
o
Love-40
15-30
30-15
40-Love
s
s
s
o
o
o
Server
Wins
Opp’nt
Wins
s
o
40-15
15-40
30-all
s
s
s
o
o
o
30-40
40-30
s
s
s
o
o
o
deuce
s
s
o
o
Ad-out
Ad-in
s
o
s
o
s
o

38
State Minimization – (2)
Basis: Mark pairs with exactly one final state.
Induction: mark [q, r] if for some input 
symbol a, [δ(q,a), δ(r,a)] is marked.
After no more marks are possible, the 
unmarked pairs are equivalent and can be 
merged into one state.

39
Transitivity of “Indistinguishable”
If state p is indistinguishable from q, 
and q is indistinguishable from r, then p 
is indistinguishable from r.
Proof: The outcome (accept or don’t) of 
p and q on input w is the same, and the 
outcome of q and r on w is the same, 
then likewise the outcome of p and r.

40
Constructing the Minimum-
State DFA
Suppose q1,…,qk are indistinguishable states.
Replace them by one representative state q.
Then δ(q1, a),…, δ(qk, a) are all 
indistinguishable states.
Key point: otherwise, we should have marked at 
least one more pair.
Let δ(q, a) = the representative state for that 
group.

41
Example: State Minimization
r
b
{1}
* {1,3,5,7,9} {2,4,6,8} {1,3,5,7,9}
*   {1,3,7,9} {2,4,6,8}     {5}
{2,4,6,8} {1,3,5,7,9}
{2,4,6,8}
{2,4,6,8}  {1,3,7,9}
{5}
{2,4}
{2,4,6,8}  {1,3,5,7}
{1,3,5,7}
{2,4}       {5}
{2,4,6,8} {1,3,5,7,9}
Remember this DFA? It was constructed for the
chessboard NFA by the subset construction. 
r   b
A B  C
B D  E
C D  F
D D  G
E D  G
F D  C
G D  G
*
*
Here it is
with more
convenient
state names

42
Example – Continued
r   b
A B  C
B D  E
C D  F
D D  G
E D  G
F D  C
G D  G
*
*
G   F   E   D   C   B
A
B
C
D
E
F
x
x
x
x
x
x
x
x
x
x
Start with marks for
the pairs with one of
the final states F or G.

43
Example – Continued
r   b
A B  C
B D  E
C D  F
D D  G
E D  G
F D  C
G D  G
*
*
G   F   E   D   C   B
A
B
C
D
E
F
x
x
x
x
x
x
x
x
x
x
Input r gives no help,
because the pair [B, D]
is not marked.

44
Example – Continued
r   b
A B  C
B D  E
C D  F
D D  G
E D  G
F D  C
G D  G
*
*
G   F   E   D   C   B
A
B
C
D
E
F
x
x
x
x
x
x
x
x
x
x
But input b distinguishes {A,B,F}
from {C,D,E,G}.  For example, [A, C]
gets marked because [C, F] is marked.
x
x
x
x
x
x
x

45
Example – Continued
r   b
A B  C
B D  E
C D  F
D D  G
E D  G
F D  C
G D  G
*
*
G   F   E   D   C   B
A
B
C
D
E
F
x
x
x
x
x
x
x
x
x
x
[C, D] and [C, E] are marked
because of transitions on b to
marked pair [F, G]. 
x
x
x
x
x
x
x
x
x

46
Example – Continued
r   b
A B  C
B D  E
C D  F
D D  G
E D  G
F D  C
G D  G
*
*
G   F   E   D   C   B
A
B
C
D
E
F
x
x
x
x
x
x
x
x
x
x
[A, B] is marked
because of transitions on r
to marked pair [B, D]. 
x
x
x
x
x
x
x
x
x
x
[D, E] can never be marked,
because on both inputs they
go to the same state.

47
Example – Concluded
r   b
A B  C
B D  E
C D  F
D D  G
E D  G
F D  C
G D  G
*
*
G   F   E   D   C   B
A
B
C
D
E
F
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
x
r   b
A B  C
B H  H
C H  F
H H  G
F H  C
G H  G
*
*
Replace D and E by H.
Result is the minimum-state DFA.

48
Eliminating Unreachable States
Unfortunately, combining 
indistinguishable states could leave us 
with unreachable states in the 
“minimum-state” DFA.
Thus, before or after, remove states 
that are not reachable from the start 
state.

49
Clincher
We have combined states of the given 
DFA wherever possible.
Could there be another, completely 
unrelated DFA with fewer states?
No.  The proof involves minimizing the 
DFA we derived with the hypothetical 
better DFA.

50
Proof: No Unrelated, Smaller DFA
Let A be our minimized DFA; let B be a 
smaller equivalent.
Consider an automaton with the states of 
A and B combined.
Use “distinguishable” in its contrapositive 
form:
If states q and p are indistinguishable, so are 
δ(q, a) and δ(p, a).

51
Inferring Indistinguishability
q0
p0
Start states
of A and B
indistinguishable
because L(A)
= L(B).
a
q
p
a
Must be
indistinguishable
b
r
s
b
Must be
indistinguishable

52
Inductive Hypothesis
Every state q of A is indistinguishable 
from some state of B.
Induction is on the length of the 
shortest string taking you from the start 
state of A to q.

53
Proof – (2)
Basis: Start states of A and B are 
indistinguishable, because L(A) = L(B).
Induction: Suppose w = xa is a shortest 
string getting A to state q.
By the IH, x gets A to some state r that is 
indistinguishable from some state p of B.
Then δA(r, a) = q is indistinguishable from    
δB(p, a).

54
Proof – (3)
However, two states of A cannot be 
indistinguishable from the same state of 
B, or they would be indistinguishable 
from each other.
Violates transitivity of “indistinguishable.”
Thus, B has at least as many states as 
A.

