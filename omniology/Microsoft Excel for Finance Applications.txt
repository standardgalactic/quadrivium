Microsoft Excel 
for Finance Applications 
CONTENTS 
Chapter 1. 
The basics of Excel .................................................................................................... 1 
Chapter 2. 
Best practices in Microsoft Excel ............................................................................ 18 
Chapter 3. 
Statistics and histograms ........................................................................................ 26 
Chapter 4. 
Data Analysis ToolPak ............................................................................................. 39 
Chapter 5. 
Financial functions .................................................................................................. 42 
Chapter 6. 
Bond pricing and analysis ....................................................................................... 50 
Chapter 7. 
Creating charts ........................................................................................................ 60 
Chapter 8. 
Built-in date and time functions ............................................................................. 73 
Chapter 9. 
Solver ...................................................................................................................... 76 
Chapter 10. 
Using Data Validation .......................................................................................... 84 
Chapter 11. 
Adding ActiveX tools ........................................................................................... 89 
Chapter 12. 
Creating a dynamic table and chart .................................................................... 96 
Chapter 13. 
Reference functions .......................................................................................... 106 
Chapter 14. 
PivotTables ........................................................................................................ 114 
Chapter 15. 
VBA Basics ......................................................................................................... 120 
Chapter 16. 
Macros for finance applications ........................................................................ 128 
Chapter 17. 
Creating a user-defined function ...................................................................... 138 
Chapter 18. 
Anatomy of a Solver macro ............................................................................... 142 
Appendix A: 
Excel keyboard short-cuts ................................................................................. 149 
Appendix B: 
Excel Document 508 Checklist for Accessibility ................................................ 151 
Index ............................................................................................................................................ 153 
 
 
 

©2017, Pamela Peterson Drake 
 
1 
Chapter 1.  
The basics of Excel 
Microsoft’s Excel is a spreadsheet program that makes it easy to manage, present, and analyze data.  Many 
of the tools that you use in Excel can be used through simple point-and-click.  Though each installation of 
Excel allows the user to customize what the user sees, we cover what is typical in most installations. 
RIBBONS 
The functions and tasks that you can use in Excel are presented in the ribbons which are along the top of 
the screen, such as the Home ribbon: 
 
The ribbons you see here may not be identical to what you see in your Excel simply because these can 
be customized by the user to add or exclude different commands.  The standard ribbons are: 
Ribbon 
Examples of what is available on the ribbon 
Home 
Formatting cells and characters, sorting, copy and paste. 
Insert 
Inserting pictures, charts, text, hyperlinks, clip-art 
Page Layout 
Margin, page breaks, print area, positioning 
Formula 
Functions, Name manager, formula trouble-shooting, calculations 
Data 
Converting data, removing duplicates, data validation, What if, grouping 
Review  
Spell check, commenting, protecting sheets or workbooks 
View 
View of work area, what to show (e.g., gridlines), freeze panes, hiding 
 
In addition, you may add ribbons for specific functions or to connect with other software.  For example, 
the ribbon above shown above has the Developer ribbon.  The Developer ribbon is needed for writing 
macros and developing ActiveX and Forms; you add this ribbon using File > Options > Customize Ribbon.   
THE WORKSHEET 
The basic idea of using a worksheet is that each item resides in a cell, and the cells may be identified by 
alphabetic column and numeric row, referred to as the A1 reference style: 
 
 
A 
B 
C 
1 
 
 
 
2 
 
 
 
3 
 
 
 
 
or, by numeric row and column identifiers, known as R1C1 reference style:  
 
B2 

©2017, Pamela Peterson Drake 
 
2 
 
1 
2 
3 
1 
 
 
 
2 
 
 
 
3 
 
 
 
 
The A1 referencing style is likely the more popular of the two styles, but the R1C1 style is likely easier 
when using more advanced Excel techniques, such as manipulating cell data in VBA macros. 
You can switch between these two styles using the Excel File > Options > Formulas:1 
 
You can refer to a group of adjacent cells by using a colon between the upper-left most cell and the lower-
right most cell (e.g., B5:B20 or B5:L5). 
NAVIGATING WORKSHEETS  
When you first start Excel, you are presented with one or more “sheets”, which are labeled Sheet1, 
Sheet2, etc.  An unnamed, smaller tab is also present; clicking on this small tab will add another sheet to 
the workbook.  You can also add a sheet by inserting a sheet using ribbon commands: Home > Insert > 
Insert Sheet. 
For example, we can rename Sheet1, Sheet 2, and Sheet 3 into something more useful: 
 
 
 
 
We can reorder sheets using Home > Format > Move or Copy Sheet – or simply click on the tab and drag 
it where you want it.  If you workbook includes a large number of worksheets, consider have an 
introductory worksheet with descriptions and hyperlinks to each worksheet [Insert > Hyperlink > Place in 
                                                           
1 In earlier versions of Excel, you may find this checkbox listed under Tools. 
R2C2 

©2017, Pamela Peterson Drake 
 
3 
This Document].  Also, consider color-coding the worksheet tabs (e.g., all sheets in a group have the 
same colors). 
We move from worksheet to worksheet by clicking on the worksheet’s tab, and we move from cell to 
cell either using the keyboard TAB, or by using point-and-click. 
Applying finishing touches to a workbook, you may want to consider the following: 
 
Delete any unused sheets [Home > Delete > Delete Sheet] 
 
Rename the sheets to something meaningful instead of Sheet1, Sheet 2, and so on.  Double-click 
on the tab to change a worksheet name. 
 
Color code your worksheet tabs.  This is useful for not only dressing up your workbook, but also 
for identifying worksheets that may go together by using similar or the same color. 
 
Removing gridlines  
REFERENCING WORKSHEETS 
A nice feature of Excel is that in one worksheet you can refer to another worksheet.  This is useful when 
you want to create, say, a user interface and have all the data stored on another worksheet so that the 
user interface is not cluttered. 
We refer to worksheets by the name of the tab.  For example, if we are referring to cell B2 on a worksheet 
with a name of Sheet1, we simply use Sheet1!B2 and Excel knows the cell that we are referencing.  Note 
that the exclamation mark, the !, separates the worksheet name from the cell reference or references.  If 
the worksheet’s name has a space in it, we must set out the name in single quotes. For example, if the 
name of the sheet is Entire Data, then referring to cell B2 on this sheet requires: ‘Entire Data’!B2. 
HELPFUL HINT: When developing your workbook, keep the worksheet names as simple as possible.  When 
you complete the workbook, change the names of the worksheets – and Excel will change the name 
throughout the workbook (with quotes when needed) at that time. 
COPYING CONTENTS OF CELLS 
We often are using Excel for repetitive calculation, so we may have a formula in, say, cell B3 that we 
would like to copy to cells B4 through B100.  Once we have the formula in B3, we can highlight B3, and 
then use Copy and Paste in the Home ribbon, directing Excel to copy this to the range of cells B4 through 
B100 by highlighting these cells as the target.   
Another way of copying cells is using a short-cut: double-click the lower right corner of B3, and Excel will 
then copy what is in B3 to all cells below for which there is also something in the column to the left (in 
this case, column A).  If Column A is blank, this short-cut will not work. 
You may be tempted to copy a cell and pasting it to an entire column by indicating the column heading 
in your paste.  Resist this temptation, because if you do this, you will have copied the contents of the 
cell to all available cells in that column. That means that you have copied the contents to 1,048,576 
rows, with the result that you file is now very large and takes longer to save and open.    
When we copy a formula, Excel will automatically adjust any cell reference to the new cell unless you 
indicate otherwise.  For example, if we have the following formula in cell B2: 
=A2-B1 
when we copy this to C2, it becomes: 

©2017, Pamela Peterson Drake 
 
4 
=B2-C1 
If we copy it to B3, if becomes: 
=A3-B2 
So you likely get the picture: The column and rows are automatically adjusted by Excel.   
But what if you did not want part of the cell reference adjusted, but you still wanted to copy cell formulas?  
Cell references may be locked in by using a $ sign.  To copy the cell C5 and keep the same row and column, 
use $C$5; to keep just the column fixed, $C5, and to keep just the row fixed C$5. 
Suppose you want to lock in a cell identifier (row, column or both) for B1. 
Lock in the row: 
 
A2-B$1 
Lock in the column: 
A2-$B1 
 
Lock in both: 
 
A2-$B$1 
HELPFUL HINT:  You can use the F4 keyboard key to lock in; hitting it repeatedly cycles through both, row, 
and column lock-ins. Just place the cursor immediately after the cell reference that you wish to lock in, 
and then hit F4. 
CALCULATIONS 
We perform arithmetic calculations by typing in the values themselves into an equation (referred to as 
“hard-coding”, which is frowned upon in Excel), or using cell references (e.g., B2).    
Arithmetic operators 
The arithmetic operators are: 
 
Arithmetic 
operator 
Operation 
 
Math equation 
 
Excel 
representation 
% 
Percentage 
 
.05 
 
5% 
* 
Multiplication 
 
5 × 4 = 
 
=5*4 
/ 
Division 
 
5 ÷ 4 = 
 
=5/4 
^ 
Power 
 
43 = 
 
=4^3 
+ 
Addition 
 
6 + 7 = 
 
=6+7 
─ 
Subtraction 
 
9 ─ 4 = 
 
=9-4 
 
The order in which operations are performed according to the mathematical hierarchy, which is the 
following: 
1. Parentheses 
2. Exponents 
3. Multiplication and division 
4. Addition and subtraction 

©2017, Pamela Peterson Drake 
 
5 
 
You should keep this order of operations in mind when devising formulas to ensure that the result is 
accurate.2 
Consider the following equation, which is the calculation of a future value of $1,000 (the present value) 
given an interest rate of 5 percent per period and four periods: 
$1,000 × (1 + 0.05)4 
We could hard code this into a cell: 
 
A 
B 
1 
$1,215.51  
2 
 
 
3 
 
 
or we can use cell references: 
 
 
A 
B 
1 
Present value 
$1,000 
2 
Interest rate 
5% 
3 
Number of periods 
4 
4 
Future value 
$1,215.51 
Math functions 
In addition to the operators, there are several math functions, including: 
Math 
function 
Operation 
 
Math equation 
 
Excel 
representation 
EXP(n) 
Euler’s e of n 
 
e0.1 =  
 
=EXP(.1) 
LOG(n,b) 
Log of n 
 
Log base 5 of 7  
 
=LOG(7,5) 
LN(n) 
Natural log 
 
Natural log of 2 
 
=LN(2) 
ABS(n) 
Absolute value 
 
|6| 
 
=ABS(6) 
INT(n) 
Integer 
 
 
 
=INT(5.76) 
 
                                                           
2 It is possible to have a formula that works (that is, it produces a value instead of an error message), but that is 
incorrect.  Therefore, you need to check to make sure that you have devised a formula that does what you want it 
to do. 
Parentheses
Exponents
Multiplication 
and division
Addition and 
subtraction
=B1*((1+B2)^B3) 
1000*((1+.05)^4) 

©2017, Pamela Peterson Drake 
 
6 
ERROR MESSAGES 
There is no limit to the complexity of an equation, though Excel warns you if you are missing 
parentheses or if no value results from the equation (e.g., division by zero).  Common errors messages 
include the following: 
Message in cell 
Indicates … 
######## 
The column is not sufficiently wide to accommodate the value. 
#DIV/0 
You tried to divide by zero and Excel would not let you do this. 
#N/A! 
A cell is referenced that does not exist. 
#NAME 
You did not use an Excel function name correctly (e.g., misspelling) 
#REF 
A cell is referenced that is missing. 
#VALUE 
Incorrect formula (e.g., tried dividing a numeric value by a text cell) 
#NULL 
The formula refers to a range of cells that is incorrect. 
 
However, Microsoft Excel will often provide a pop-up box that reports to you that there is an error or that 
Excel made a judgment call and adjusted the equation.  Excel has tools to help you debug formulas.  These 
tools are generally located in the Formulas ribbon, in the Formula Auditing section: 
 
Tracing precedents and dependents allows you to check your cell referencing (are you referencing the 
correct cells?) by providing arrows connecting the cells per your formula and cell referencing.  Once you 
have seen the precedents and/or dependents, you can then remove the arrows.  The Show Formulas 
option exposes all the formulas on the worksheet, so you can look for consistency among similar 
calculations, for example.   
Likely the most useful of the auditing commands is Evaluate Formula.  When you click on this, you launch 
a pop-up window that allows you to step through your formula, stepping through the equation showing 
you the intermediate results and then the result. 
TYPES OF DATA AND FORMATTING 
Each cell has a format associated with it; if you do not specify this, the default format is “General”. 
However, in most applications we want to present the data in the most appropriate format. The available 
formats in Excel are: 
General 
Number 
Currency 
Accounting 
Short Date 
Long Date 

©2017, Pamela Peterson Drake 
 
7 
Time  
Percentage 
Fraction 
Scientific 
Text 
 
Each of these can be customized for your application. For example, if you want cells presented in terms 
of U.S. dollars using three decimal places, you go to Home > Number (drop down arrow) > Currency > 
Decimal Places and specify 3.  In addition to these formats, you can create your own format using the 
Custom option at the end of the available list. 
Currency v. Accounting format 
Both the Currency and the Accounting formats allow you to specify both the number of decimal places 
and the currency symbol (e.g., $).  So what is the difference?  The Accounting format places the currency 
symbol as left justified so that when you have a worksheet full of these accounting numbers, the currency 
symbols line up.  The Currency format allows you to choose the currency symbol, but places it immediately 
left of the first digit in the number.   
While this seems at first to be a matter of taste, it makes a difference when copying cells from Excel to 
another document, such as a Word file:  the Accounting format adds spaces between the symbol and the 
first digit, which may give a jagged appearance if using a font other than what was used in Excel.  Another 
difference is the zero is represented differently: In the Currency format it is $0 or €0 or whatever the 
currency you are using; in the Accounting format, it is “-“, which is awkward in graphing. 
Converting text to values 
When you create a dataset within Excel, the data takes on the format that you assign to the cell, row, or 
column.  However, when you bring data in from another source, it sometimes occurs that the data is 
interpreted by Excel as text information, even though the cell contains all numbers.  In these cases, you 
cannot perform calculations while the data is in text format. And changing the Number format of the 
cell, row, or column will not change text into numeric data.   
A trick that you can use to convert text into numbers is to do the following: 
1. Type the number 1 in a cell that has no data in it.   
2. Make this cell a number format.   
3. Click on this cell and copy [Home > Copy]  
4. Highlight the data you want converted. 
5. Multiply the text by the number 1 using Home > Paste > Paste Special > Multiply 
 
This trick is also handy if you have data that you wish to rescale. For example, if you have data in millions 
and you want to restate all the data into billions,  
1. Type the number 1000 in a cell that had no data in it already.   
2. Make this cell a number format.   
3. Click on this cell and copy [Home > Copy]  
4. Highlight the data you want converted. 
5. Use Home > Paste > Paste Special > Divide to divide the cells by the number 1000. 

©2017, Pamela Peterson Drake 
 
8 
WORKING WITH DATES  
You can specify dates in many different formats, including ”Saturday, March 01, 2014”, “01-Mar-14”, 
and “March 1, 2014”, but the key is that the Number be specified as “Date”: 
 
Most software use a system for dates that identifies a base date and then every date thereafter is a count 
from that date; this count becomes the serial number.  Excel’s base date is January 1, 1900.  Therefore, 
January 2, 1900 has a serial number of 2, January 3, 1900 has a serial number of 3, January 1, 2014 has a 
serial number of 41640, etc. Why use serial numbers?  So that we can perform arithmetic operations on 
dates.  For example, suppose you want to know how many days fall between January 1, 2014, and March 
1, 2014. We would input the dates into cells and then take the difference, subtracting one so we don’t 
count the end day of 3/1/2004: 
 
A 
B 
1 
1/1/2014 
 
2 
3/1/2014 
 
3 
58 
 
The difference is 59 days, and therefore there are 58 days between these dates. 
If you type a date directly into a cell using one of the usual formats (e.g., “March 1, 2014”, “3/1/2014”), 
Excel will automatically consider this cell as having the Date format. However, if you bring in data from 
another source, such as reading in a database from downloaded data, you may have to convert the 
information into a date using Excel’s DATE function. Consider a date that is read in as 19871019.  We can 
use the DATE function [=DATE(YEAR,MONTH,DAY)], along with some positional functions (LEFT, MID and 
RIGHT), to parse out and reassemble the pieces as an Excel date. 
 
A 
B 
1 
19871019 
10/19/1989 
2 
 
 
3 
 
 
 
Therefore, the year is determined from the four left-most characters in A1, the month is determined 
from the fifth and sixth characters, and the day is determined as the two right-most characters. 
LOGIC FUNCTIONS  
Logic functions are those functions that make comparisons.  These functions include: 
Function 
Specification 
IF 
=IF(logic statement, what to do when true, what to do when false) 
=a2-a1-1 
=DATE(LEFT(A1,4),MID(A1,5,2),RIGHT(A1,2)) 

©2017, Pamela Peterson Drake 
 
9 
NOT 
=NOT(logic statement) 
AND 
=AND(logic statement, logic statement,…) 
OR 
=OR(logic statement, logic statement,…) 
IFERROR 
=IFERROR(arithmetic statement, what to do if there is an error in the statement) 
 
There are also many comparisons that you can make within logic statements: 
Symbol 
Comparison 
= 
Equal to 
> 
Greater than 
>= 
Greater than or equal to 
< 
Less than 
<= 
Less than or equal to 
<> 
Not equal to 
The IF function 
Consider an example in which we want to make sure that we are not dividing by zero, so we check the 
denominator and perform the calculation if and only if the denominator is not zero; if the denominator is 
zero, we leave a blank cell.  Suppose we have the following data and we want to take the ratio of the items 
in columns A (Current Assets) and B (Current Liabilities), placing the result in column C (Current Ratio). 
 
A 
B 
C 
1 
Current 
assets 
Current 
liabilities 
 
2 
$100 
$129 
 
3 
$450 
$300 
 
4 
$20 
$0 
 
5 
$80 
$60 
 
6 
$70 
$45 
 
In cell C2, we could use the formula =A2/B2. While this works for C2, what happens when we copy this to 
cell C4?  We would be dividing by zero, which produces an error message.  We could guard against this by 
using the logical function IF: 
=IF(B2<>0,A2/B2,””) 
We generally use quotes (e.g., “Yes “) to indicate character data. However, if there is no space between 
the quotation marks, the “”” produces a blank cell.  Copying this to all the cells, we would then get: 
 
A 
B 
C 
1 
Current 
assets 
Current 
liabilities 
Current 
ratio 
2 
$100 
$129 
0.775194 
3 
$450 
$300 
1.5 

©2017, Pamela Peterson Drake 
 
10 
4 
$20 
$0  
5 
$80 
$60 
1.333333 
6 
$70 
$45 
1.555556 
 
Consider another example.  In preparation for looking at the pattern of stock returns, indicate whether 
the monthly return is Non-Non-negative or negative for the following data: 
Month 
Monthly 
return 
1 
1.10% 
2 
-0.05% 
3 
0.60% 
4 
0.09% 
5 
-0.01% 
6 
1.08% 
7 
-0.50% 
 
In this case, the IF function, with the condition comparing the cell with zero, returns the text string 
“Non-negative” if the condition is true, and “Negative” if the condition is false.  
 
 
A 
B 
C 
1 
Month 
Return Positive or Negative? 
2 
1 
1.10% =IF(B2>=0,"Positive","Negative") 
3 
2 
-0.05% =IF(B3>=0,"Non-negative","Negative") 
4 
3 
0.60% =IF(B4>=0,"Non-negative","Negative") 
5 
4 
0.09% =IF(B5>=0,"Non-negative","Negative") 
6 
5 
-0.01% =IF(B6>=0,"Non-negative","Negative") 
7 
6 
1.08% =IF(B7>=0,"Non-negative","Negative") 
8 
7 
-0.50% =IF(B8>=0,"Non-negative","Negative") 
 
This results in: 
 
A 
B 
C 
1 
Month 
Return Non-negative or Negative? 
2 
1 
1.10% Non-negative 
3 
2 
-0.05% Negative 

©2017, Pamela Peterson Drake 
 
11 
4 
3 
0.60% Non-negative 
5 
4 
0.09% Non-negative 
6 
5 
-0.01% Negative 
7 
6 
1.08% Non-negative 
8 
7 
-0.50% Negative 
 
Combining IF with OR or AND 
Let’s try a more advanced logic statement that uses IF, OR, and date information.  First, let’s deal with the 
date information.  If you want the day of the week that corresponds to a given date, you use the TEXT 
command. Suppose we would like the day of the week for a date: 
 
A 
B 
1 
10/19/1989 Mon 
2 
 
 
3 
 
 
 
The “ddd” indicates the three character abbreviation for the date. If we want the full name of the day, we 
use “dddd”: =TEXT(A1,"dddd"), which produces “Monday”.  Now with the example. Suppose we have 
stock prices for a stock for a sample of dates and we want to identify which of these prices correspond to 
a Monday or a Friday.  Logically, what we want to do is use the OR function and check to see if the 
corresponding day of the week is either Monday or Friday.  If it is Monday or Friday, we want to have 
Excel put the characters “MF” in the cell next to the price, otherwise leave the cell blank.  Creating a blank 
cell is accomplished by using two quote sets, “”.  So, for the sample: 
 
 
A 
B 
1 
Date 
Price 
2 
25-Apr-13 
26.14 
3 
26-Apr-13 
26.85 
4 
29-Apr-13 
26.98 
5 
30-Apr-13 
27.77 
6 
1-May-13 
27.43 
7 
2-May-13 
28.97 
8 
3-May-13 
28.31 
9 
6-May-13 
27.57 
10 
7-May-13 
26.89 
11 
8-May-13 
27.12 
=TEXT(A1,"ddd") 

©2017, Pamela Peterson Drake 
 
12 
12 
9-May-13 
27.04 
13 
10-May-13 
26.68 
14 
13-May-13 
26.82 
15 
14-May-13 
27.07 
 
We use the following IF functions: 
 
A 
B 
C 
1 
Date 
Price 
Monday or Friday Indicator 
2 
25-Apr-13 
26.14 =IF(OR(TEXT(A2,"dddd")="Monday",TEXT(A2,"dddd")="Friday"),"MF","") 
3 
26-Apr-13 
26.85 =IF(OR(TEXT(A3,"dddd")="Monday",TEXT(A3,"dddd")="Friday"),"MF","") 
4 
29-Apr-13 
26.98 =IF(OR(TEXT(A4,"dddd")="Monday",TEXT(A4,"dddd")="Friday"),"MF","") 
5 
30-Apr-13 
27.77 =IF(OR(TEXT(A5,"dddd")="Monday",TEXT(A5,"dddd")="Friday"),"MF","") 
6 
1-May-13 
27.43 =IF(OR(TEXT(A6,"dddd")="Monday",TEXT(A6,"dddd")="Friday"),"MF","") 
7 
2-May-13 
28.97 =IF(OR(TEXT(A7,"dddd")="Monday",TEXT(A7,"dddd")="Friday"),"MF","") 
8 
3-May-13 
28.31 =IF(OR(TEXT(A8,"dddd")="Monday",TEXT(A8,"dddd")="Friday"),"MF","") 
9 
6-May-13 
27.57 =IF(OR(TEXT(A9,"dddd")="Monday",TEXT(A9,"dddd")="Friday"),"MF","") 
10 
7-May-13 
26.89 =IF(OR(TEXT(A10,"dddd")="Monday",TEXT(A10,"dddd")="Friday"),"MF","") 
11 
8-May-13 
27.12 =IF(OR(TEXT(A11,"dddd")="Monday",TEXT(A11,"dddd")="Friday"),"MF","") 
12 
9-May-13 
27.04 =IF(OR(TEXT(A12,"dddd")="Monday",TEXT(A12,"dddd")="Friday"),"MF","") 
13 
10-May-13 
26.68 =IF(OR(TEXT(A13,"dddd")="Monday",TEXT(A13,"dddd")="Friday"),"MF","") 
14 
13-May-13 
26.82 =IF(OR(TEXT(A14,"dddd")="Monday",TEXT(A14,"dddd")="Friday"),"MF","") 
15 
14-May-13 
27.07 =IF(OR(TEXT(A15,"dddd")="Monday",TEXT(A15,"dddd")="Friday"),"MF","") 
16 
15-May-13 
26.6 =IF(OR(TEXT(A16,"dddd")="Monday",TEXT(A16,"dddd")="Friday"),"MF","") 
 
which results in: 

©2017, Pamela Peterson Drake 
 
13 
 
A 
B 
C 
1 
Date 
Price 
Monday or Friday Indicator 
2 
25-Apr-13 
26.14  
3 
26-Apr-13 
26.85 MF 
4 
29-Apr-13 
26.98 MF 
5 
30-Apr-13 
27.77  
6 
1-May-13 
27.43  
7 
2-May-13 
28.97  
8 
3-May-13 
28.31 MF 
9 
6-May-13 
27.57 MF 
10 
7-May-13 
26.89  
11 
8-May-13 
27.12  
12 
9-May-13 
27.04  
13 
10-May-13 
26.68 MF 
14 
13-May-13 
26.82 MF 
15 
14-May-13 
27.07  
16 
15-May-13 
26.6  
 
We can also use AND for other logical relationships.  Using the same data, let’s identify all prices in which 
the day is Monday and the price is higher on this day than the previous day.  In the AND function we have 
two logical statements; it is only when both are true that the IF function will perform whatever is in the 
second (that is, TRUE) argument:   
=IF(AND(TEXT(A2,"dddd")="Monday",B2>B1),"Up Monday","") 
Because we are comparing prices from one day to the previous day, we need to also include a third logical 
statement that checks to make sure that there is a price on the day before. Excel has many “IS” functions, 
which can check a cell’s contents to see if some condition is met.  For example, the ISTEXT function checks 
to see whether the cell contains text.  If there is text, the function returns TRUE; if there is no text, the 
function returns FALSE. Based on the data, we know that this function should only return TRUE for C2 
because the B1 has text in the cell.  The revised IF statement is: 
=IF(AND(ISTEXT(B2)=FALSE,TEXT(A3,"dddd")="Monday",B3>B2),"Up Monday","") 
Excel will only put “Up Monday” in the cell if all three logical conditions are true: there is no text in the 
preceding price cell, the date corresponds to a Monday, and the price on the day is above the price on the 
previous day. 
The first few lines of the data worksheet are: 

©2017, Pamela Peterson Drake 
 
14 
 
A 
B 
C 
1 
Date 
Price 
Monday or Friday Indicator 
2 
25-Apr-13 
26.14 =IF(AND(ISTEXT(B1)=FALSE,TEXT(A2,"dddd")="Monday",B2>B1),"Up Monday","") 
3 
26-Apr-13 
26.85 =IF(AND(ISTEXT(B2)=FALSE,TEXT(A3,"dddd")="Monday",B3>B2),"Up Monday","") 
4 
29-Apr-13 
26.98 =IF(AND(ISTEXT(B3)=FALSE,TEXT(A4,"dddd")="Monday",B4>B3),"Up Monday","") 
5 
30-Apr-13 
27.77 =IF(AND(ISTEXT(B4)=FALSE,TEXT(A5,"dddd")="Monday",B5>B4),"Up Monday","") 
 
Resulting in: 
 
A 
B 
C 
1 
Date 
Price 
Up Monday Indicator 
2 
25-Apr-13 
26.14  
3 
26-Apr-13 
26.85  
4 
29-Apr-13 
26.98 Up Monday 
5 
30-Apr-13 
27.77  
6 
1-May-13 
27.43  
7 
2-May-13 
28.97  
8 
3-May-13 
28.31  
9 
6-May-13 
27.57  
10 
7-May-13 
26.89  
11 
8-May-13 
27.12  
12 
9-May-13 
27.04  
13 
10-May-13 
26.68  
14 
13-May-13 
26.82 Up Monday 
15 
14-May-13 
27.07  
16 
15-May-13 
26.6  
 
As you can see, developing logic statements can become quite complex. However, if you start the 
statement in a simple manner, test the logic, add more logic, test the logic, and so on, you will be able to 
program what you need. 
IS FUNCTIONS 
In addition to ISTEXT, there are many IS functions that give the user some control over the outcome if 
there is some condition present, such as text, error message, or a blank.  The IS functions require the user 

©2017, Pamela Peterson Drake 
 
15 
to specify what the condition is, which can then be used in a logic statement.  Each IS function has one 
argument, the cell, value, or text that is examined: 
 
IS Function 
Checks to see if 
ISBLANK 
a cell is blank 
ISERR 
the cell formula produces an error, except for #DIV/0! errors 
ISERROR 
the cell formula produces an error 
ISEVEN 
the number is an even number 
ISLOGICAL 
the cell represents a logical value 
ISNA 
the cell formula produces #NA 
ISNONTEXT 
the cell contents are not text 
ISNUMBER 
the cell contents are a number 
ISODD 
the number is an odd number 
ISREF 
there is a cell reference error 
ISTEXT 
the cell contents are text 
 
Suppose you have the following entries for Column A cells: 
 
A 
1 
 
2 
1 
3 
2 
4 
3 
5 
 
6 
6 
7 
7 
8 
=8/0 
9 
=NA() 
10 =IF(ISERROR(A8),TRUE,FALSE) 
 
What outcome is there when you apply the following to these cells? 
 
ISODD 
 
ISBLANK 
 
ISNA 
 
ISERROR 

©2017, Pamela Peterson Drake 
 
16 
 
ISERR 
 
ISLOGICAL 
For example, applying ISODD to the value in cell A2 we use =ISODD(A2).  The result is: 
 
A 
B 
C 
D 
E 
F 
G 
1 
 
ISODD 
ISBLANK ISNA 
ISERROR ISERR 
ISLOGICAL 
2 
1 
TRUE 
FALSE 
FALSE 
FALSE 
FALSE 
FALSE 
3 
2 
FALSE 
FALSE 
FALSE 
FALSE 
FALSE 
FALSE 
4 
3 
TRUE 
FALSE 
FALSE 
FALSE 
FALSE 
FALSE 
5 
 
FALSE 
TRUE 
FALSE 
FALSE 
FALSE 
FALSE 
6 
6 
FALSE 
FALSE 
FALSE 
FALSE 
FALSE 
FALSE 
7 
7 
TRUE 
FALSE 
FALSE 
FALSE 
FALSE 
FALSE 
8 
#DIV/0! 
#DIV/0! 
FALSE 
FALSE 
TRUE 
TRUE 
FALSE 
9 
#N/A 
#N/A 
FALSE 
TRUE 
TRUE 
FALSE 
FALSE 
10 
TRUE 
#VALUE! 
FALSE 
FALSE 
FALSE 
FALSE 
TRUE 
 
The value of the IS functions is not the actual identification of TRUE or FALSE, but rather how this can be 
used in logic statement to get the intended result. 
CONCATENATING DATA 
There are cases in which we would like to join several data items into one string; these data items may be 
dates, character values, or numbers.  For example, suppose we have one column of first names and 
another column of last names.  If we want to bring these two items together, with the last name first then 
first name, separated by a comma, we can use the CONCATENATE function or the &. 
 
 
Using CONCATENATE, D1 would be:   
=CONCATENATE(C3,", ",B3) 
Why the “, ”?  This adds the comma and a space between the two names.  Using the &, 

©2017, Pamela Peterson Drake 
 
17 
=C4&", "&B4 
The result of using either of these is: 
 
 

©2017, Pamela Peterson Drake 
 
18 
Chapter 2.  
Best practices in Microsoft Excel 
The purpose of this chapter is to provide guidance on the best practices in Microsoft Excel. These practices 
are geared toward the use of Excel in financial data and analysis, but are likely applicable beyond this 
realm. 
WORKSHEET ROWS AND COLUMNS 
Avoid referencing entire columns 
The most current version of Excel has the following limits: 
Number of rows = 220 = 1,048,576 
Number of columns = 214 = 16,384 
Users should be aware that when they perform calculations or formatting involving entire columns, 
they are using far more cells than necessary for the application and likely will be slowing processing 
speeds when using the worksheet.  For example, some users specify =SUM(A:A), which is asking Excel 
to look at all values in 1 million+ cells.   It is more efficient to identify the specific cells, e.g., 
=SUM(A1:A100).  In a simple worksheet, you may not notice a difference, but as the worksheet 
becomes more complex (data, formulas, etc.), you may notice the slow down.   
Best practice: Avoid all references to entire columns 
Be aware of the last cell 
It is often useful to know the position the last cell in your worksheet for formatting, printing, and other 
reasons. However, what can cause problems is 
when there is formatting or formulas in blank cells: 
 
If there is formatting in blank cells beyond 
where the data ends, this will be 
considered part of the active worksheet and CTRL END will take you to that extreme.   
 
If there are formulas in cells, even though there are no values (due to logic, which produces a 
blank), printing the worksheet will now incorporate all the way to the end of where the 
formulas reside. 
Best practice: Do not format or put formulas in cells when not necessary 
Use a standard structure for data 
Generally, when we have many observations and variables, we generally present the observations in 
the two dimension and the variables in the column dimension.  While this is not a hard and fast rule, 
the fact that there are fewer columns than rows should guide you to put the observations in rows.  
This is referred to as “organizing your worksheet vertically” or the “vertical scheme”, which is viewed 
as more efficient. 
Be sure that your data has column headings and that the rows are labeled in some way, such as 
observation number, date, company ticker, etc.  
Best practice: Observations in rows, variables in columns. 
Go to the last cell in the worksheet: CTRL END 
Go to the first cell in the worksheet: CTRL HOME 

©2017, Pamela Peterson Drake 
 
19 
Avoid blank columns and rows 
You should try to avoid having any blank rows or 
columns.  This is because when you want to copy 
formulas down or across, the built-in short-cuts 
(e.g. double-click lower right corner of cell to be 
copied) will go only until it hits a blank row or 
column. 
Want blank columns and rows for visual clarity? 
Design your worksheet, get it ready, and then add 
blank rows and columns to make it more visually 
appealing.  Be sure to not add more blank rows and 
columns than necessary because you would like, 
ideally, for the user interface to appear on one 
screen. 
Best practice: Avoid blank columns or rows when 
designing a worksheet 
CELL CONTENTS 
Use CURRENCY for monetary values 
Use the appropriate CURRENCY format (e.g., $ for USD, € for Euros, etc.). 
The ACCOUNTING format is used for specific financial statement purposes, and is not the preferred 
monetary format for most finance applications.  This format does not work well with other 
applications (e.g., copying a table in Excel and putting it into Word or PowerPoint), adding spaces that 
interfere with formatting in the latter applications. 
Best practice: Use CURRENCY format for monetary values 
Be parsimonious with decimal places 
Normally, we do not use decimal places for monetary values, except for share prices.  With returns, 
we generally represent returns as percentage with one or two decimal places, though three or four 
places may be necessary for rates close to zero or when the point is being made that returns differ in 
the hundredths or thousandths’ places. 
Best practice: Do not include more decimal places than necessary 
Represent dates appropriately 
Dates in Excel are based on serial numbers, with January 1, 1900 as the starting value, 1. Dates are 
generally displayed using the standard formats for the country.  For the U.S., that would be the 
MM/DD/YYYY or MMM DD, YYYY conventions (e.g., 6/15/2016 or JUN 6, 2016), and for Europe would 
be the DD MMM YYYY convention (e.g., 15 JUN 2016).3   The regional settings in Windows (CONTROL 
PANEL > REGIONAL LANGUAGE OPTIONS> CUSTOMIZE) will determine the default format of the date. 
                                                           
3 MM indicates the month in digits, whereas MMM indicates month in three characters (e.g., JUN). 
Copying cells using the short-cut requires that the 
cells to the next left column or next right column 
are filled (values, text, or formulas). You can copy 
cells by using double-clicking on the small box in 
the lower-right corner of the cell’s highlight: 
 

©2017, Pamela Peterson Drake 
 
20 
Date formats may include time, but only include the time dimension if it is necessary.  Excel will often 
interpret your input as a date, so if you enter 1-1-2016 in a cell, it will automatically convert it into a 
date using your default date format (e.g., entering 1-1-2016 will be represented as 1/1/2016) 
Best practice: Display dates in standard formats 
Align based on type of data 
Formatting text should be in black font and left-justified.  For example, company names, industry 
names and codes, CUSIP numbers, and variable titles should be left-justified.  All alphanumerics 
should be left-aligned. 
Numbers should be right-aligned.  In lists of values, it may be preferable to use the same number of 
decimal places so that the items are aligned by decimal place. 
 
Best practice: Text are left-justified and numbers are right-justified 
Minimized use of cell and area borders and shading 
Borders should be used sparingly, and only when useful to the application.  For example, user input 
boxes could have borders to separate them from data produced by a macro or item descriptors. 
Cell fill should be used rarely.  Though useful to highlight boxes for input by the user, these should be 
of a shade of color that allows the cell contents to be readable.  For example, a light blue or yellow 
shading may be useful, but a medium blue or yellow would not be useful.   
Remember, someone may print the worksheet and may not have a color printer. Ask yourself:  What 
will this look like printed using a non-color printer? 
Best practice: Keep the use of color and borders to a minimum 
Avoid hidden rows or columns 
Hiding rows and columns generally raises suspicions regarding 
what the user is not permitted to see.  It is generally poor practice 
to hide rows or columns (or to effectively do the same using white 
font on a white background).  Hiding usually results from poor 
development of the formulas or from poor design. 
Best practice:  Do not hide rows or columns  
Text is left-
aligned
Numbers are 
right-aligned
How do you find hidden rows and 
columns?  FILE > INSPECT 
WORKBOOK will reveal whether 
there are hidden rows or 
columns. 

©2017, Pamela Peterson Drake 
 
21 
CHARTS 
Label everything that is important to understand the chart 
The user of a chart should understand the contents of the chart without any explanation. Therefore, 
all charts should have axis labels for the vertical and horizontal axes, as well as a chart title.  If more 
than one series is charted on the graph, include a legend; if only one series is graphed, do not include 
a legend, but rather make sure that the series is identified in the chart title. 
Best practice: Include axis labels and a chart title 
Use a format that makes sense for the data and chart 
Though it may be useful to have a few decimal places when analyzing the data, but is it necessary 
when you graph this data?  Check to see if the chart would be just as meaningful if you eliminated the 
decimal places. 
For monetary values, use CURRENCY formats; using the Accounting format produces a “$-“ for “$0”, 
which will appear strange to the user. 
Are the data in millions when billions would be easier for the user to interpret?  Then think about 
changing the scale of the data from millions to billions (or thousands to millions, etc.).  You can do this 
by either changing the input data (e.g., PASTE-SPECIAL > DIVIDE by 1000) or changing the AXIS 
OPTIONS > DISPLAY UNITS in the CHART DESIGN.  
Best practice: Pay attention to the units of measure for the axes 
Avoid graphing series on top of axis labels 
A common problem occurs when you graph a series that 
has negative values:  the series column or line overtypes 
the horizontal axis.  The simple remedy for this problem 
is to use CHART TOOLS > CHART DESIGN > FORMAT AXIS 
> LABELS > LABEL POSITION and set this to LOW. 
Best practice: Ensure that axis labels are not obscured by the 
series plot 
AVOID GRAPHING SERIES WITH DIFFERENT SCALES ON THE SAME AXIS 
There are occasions when we want to illustrate the pattern in two series, but these series are different 
scales.  For example, we may want to show for a company the trend in the current ratio and the net 
profit margin; the former is a coverage ratio (that is, number of times), and the latter is a percentage.  
Plotting these on the same graph will present problems (the net profit margin will likely look like a 
straight line, dwarfed by the coverage ratio).  The way to resolve this is to select one of the series and 
CHART TOOLS > FORMAT > SERIES OPTIONS and check the box for SECONDARY AXIS. 
Best practice:  Plot series on scales that are appropriate 
Avoid this in your charts: 
 

©2017, Pamela Peterson Drake 
 
22 
Avoid filled chart and plot areas 
A chart should not have a background color in the chart area or the plot area unless there is a specific 
end-user purpose for this.  Not only do color backgrounds use printer ink unnecessarily, but (1) the 
chart may become unreadable if there is insufficient contrast between the series and the background, 
and (2) the chart may not copy well to other applications.  
Best practice: Charts should be stand-alone and clear 
EFFECTIVE USE OF FORMULAS 
Avoid hard coding in formulas 
Hard coding in a formula means that you are putting actual values into the formula (for example, 
=5*C1). The problem with this is that if the value changes from 5 to some other value, the user must 
change the formula.  It is easier to “soft code” this; for example, putting 5 in B1 and then writing the 
formula as =B1*C1.  This offers much more flexibility and adaptability in your worksheet.  Future users 
of the worksheet will thank you for having some foresight. 
Best practice: Never hard-code formulas   
Calculations: Keep it simple 
Many different formulas can generally be written to accomplish a particular task.  The key is to write 
the formula in the simplest manner, which allows the user the best chance of figuring out what you 
are calculating. 
Best practice: Keep formulas simple 
Use AUTOMATIC calculations 
A worksheet will recalculate all calculations each time it performs a calculation on a single cell.  Have 
lots of calculations on the worksheet?  Each time the worksheet refreshes one calculation, it refreshes 
all.  In some complex worksheets, this could take some time.  Tempted to change the settings 
FORMULA > CALCULATE > MANUAL?  Resist the temptation because this will cause problems in the 
usability of the worksheet – calculations dependent on other may not be updated, and you could 
simple end up with wrong numbers.  However, if you focusing on creating just a portion of the 
worksheet and do not want the wait, change the formatting to MANUAL, but be sure to change it back 
when you are done creating/editing. 
Best practice:  Always have calculations set to be AUTOMATIC 
Use DATA VALIDATION 
The purpose of DATA > DATA VALIDATION is to limit what the user can input into a particular cell.  This 
is especially useful when the application is intended to limit the data to specific ranges (by setting a 
minimum, a maximum, or both) or types of data (e.g., whole number of decimal). For example, 
suppose you allow the user to enter in a required rate of return and a growth rate, but the theory 
states that the growth rate must be less than the required rate of return; you can use DATA 
VALIDATION to limit the choices of the growth rate. DATA VALIDATION can also be used to offer the 
user a selection of choices in a drop down box (using the LIST option).  

©2017, Pamela Peterson Drake 
 
23 
Best practice: Use DATA VALIDATION for user input cells 
Do not hide errors 
Some are tempted to use the informational functions of Excel to hide errors in logic.  For example, a 
complex formula written incorrectly may produce #N/A in cells, and the designer is tempted to use 
ISNA to cover this up.  Avoid that temptation and instead figure out why the formula is producing 
#N/A and deal with it within the formula.  For example, if you are performing a calculation and the 
observation has a missing value, include the possibility of a missing value in your logic (e.g., if missing, 
then cell contents are “Missing value”). 
Best practice: Do not hide errors, but rather fix formulas 
Do not have “mystery” values in cells 
It is poor Excel design to have unidentified values in cells.  Everything cell should be clearly identified. 
If this is a sheet of data, each column should have a heading and each row should be identified in 
some manner (e.g., date, company ticker, observation number). Within a user interface, every cell 
containing a value or text string should be labeled in some manner (e.g., Company name, Annual 
return, Hedge ratio). 
What about a helper cell?  There are some, rare instances in which the designer must use a helper cell 
(e.g., using ActiveX scroll bar function to produce a decimal). In this case, the cell should be identified 
as a helper cell so the user does not interpret the stray value as an error. 
Best practices: Clearly identify cells containing text and values 
Use names 
The Name Manager allows you to name a single cell or a group of cells.  You can use NAME MANGER 
to create the name, but use the short-cut: Highlight the cells, 
click on the cell reference box, and type in a name.  Make sure 
to use a name that is not already a built-in function, and avoid 
spaces in the name (which will require you to then use quotes 
around the name each time you use it). 
Names can be static (that is, a set of cells) or dynamic (a 
variable set of cells).  You accomplish the latter using the OFFSET function in conjunction with the 
Name Manager. 
Best practice: Use names when practical 
Be transparent in user-defined functions 
A user-defined function (UDF) should be kept as simple as possible, ideally with the code fitting on 
one screen view.  A UDF that is too long and complex fails the test of being understandable, reusable, 
and adapted.  It is important to use variable names that are suggestive of the inputs so that the user 
will receive hints if they CTRL-a as they call up the function (e.g., “ret” for a return, “std” for a standard 
deviation).  
A UDF should not be used if a simple calculation in Excel is possible.  For example, if the UDF subtracts 
one cell from another, this could have been done in the worksheet itself – and much faster. 
 

©2017, Pamela Peterson Drake 
 
24 
A UDF should have instructions that identify the arguments, and the programmer should include 
comments in the function to identify the steps in the calculation.   
Best practice: Keep UDFs simple 
BE TRANSPARENT WITH VBA MACROS 
Macros used in the workbook should be identified and, if appropriate, a button to trigger the macro 
should be provided to the user. Do not expect the user to dig through VBA – help them out.  Also, be 
sure to add comments in your macro to help the user follow your process and calculations. 
Best practice: Be transparent with respect to macros 
WORKBOOK CONSIDERATIONS 
Include an introduction worksheet 
This introduction should include the purpose, the author, the description, and the version number or 
date.  If there are many worksheets or tasks in the workbook, include a table of contents that is 
hyperlinked to the corresponding worksheets. 
Organize the worksheets 
A workbook with multiple worksheets should label each worksheet with an appropriate name and 
color-code the tabs for related worksheets.  The worksheets should be in a logical order. 
Design the workbook with others in mind.  The workbook may be used more than a single application, 
so notes should be provided to the potential users.  Also, the workbook may be used with other inputs 
and assumptions, so the workbook should be designed to be flexible, whether that be with respect to 
inputs, assumptions, or number of observations. 
Identify any macros or functions 
If worksheets were developed with macros and user-defined functions, these should be identified 
clearly and instructions for use provided. 
Avoid links to other workbooks 
When you copy cells and VBA from one workbook to another, an unintended consequence may be 
that there are links to the other workbooks in the current workbook.  This causes problems because 
if the user does not also have that other workbook and it has the same address on their computer, 
then there is a chance that the workbook will not work as intended, and the user will get a message 
upon opening that there are links to other workbook.   
Check to make sure that there are no links using FILE > INFO > and check the area entitled RELATED 
DOCUMENTS.  If there are linked documents, EDIT LINKS will be indicated. 
Consider the accessibility of the Excel workbook 
We often prepare Excel workbooks for clients, supervisors, or for others on our team, or others that 
may perform this task in future years. Consider the accessibility standards promoted by the U.S. 
Government’s Health and Human Services (see Appendix).  

©2017, Pamela Peterson Drake 
 
25 
Best practices: Design the workbook so that someone else can take it over 

©2017, Pamela Peterson Drake 
 
26 
Chapter 3.  
Statistics and histograms 
Microsoft Excel is great at helping us generate a large number of statistics. 
THE DATA 
We will generate statistics and histograms using a sample of 108 returns on IBM stock from January, 2007 
through December 2015, provided in cells B5:B112: 
 
NAMING THE ARRAYS OF DATA 
The first task is to name the return data so that we do not have to keep referring to the cell addresses; 
whereas this is not necessary, it is quite convenient. Naming an array requires that you first highlight the 
data, and then type in a name in the box for cell references: 

©2017, Pamela Peterson Drake 
 
27 
 
 
We assigned the name “IBM” to cells B5:B112, and can verify this by going to Formulas > Name Manager 
and checking out the name IBM: 
 

©2017, Pamela Peterson Drake 
 
28 
Once established, I can use the name “IBM” to refer to these cells in any function.4  To enable a wider 
variety of statistics and calculations, we also create a column that is the return plus one, and name it 
IBM_one: 
 
 
CALCULATING STATISTICS 
We calculate various statistics using the built-in functions: 
                                                           
4 We can also create names directly in Name Manager by clicking on New, providing a name, and then typing in the 
cell references to this new name. 

©2017, Pamela Peterson Drake 
 
29 
 
Using the formulas: 
 
Because the default scope of the name is “Workbook”, we can use “IBM” on any worksheet to indicate 
the range of cells that correspond to the returns. 
We also can calculate several statistics and values that are useful in finance: 

©2017, Pamela Peterson Drake 
 
30 
 
which are calculated as:5 
 
Using the appropriate format and reporting a reasonable number of decimal places, we end up with: 
                                                           
5 Remember that we cannot use GEOMEAN and HARMEAN directly on returns because these returns may be 
negative.  Therefore, we first add one to each return (which is the named array “ibm_one”), use the function, and 
then subtract one. 

©2017, Pamela Peterson Drake 
 
31 
 
Remember that the statistics are based on monthly returns, so we would need to annualize the means 
and standard deviations to report on the customary annual basis.6 
                                                           
6 For mean returns we would add one and take it to the 12th power, then subtracting one. For the standard 
deviation, we take the monthly standard deviation and multiple by the square root of 12 to convert it into an 
annual equivalent. 

©2017, Pamela Peterson Drake 
 
32 
AVAILABLE STATISTICAL FUNCTIONS 
Note: this is not an exhaustive list of statistical functions 
Statistical functions 
Conditional 
statistical 
functions 
Statistical tests and 
intervals 
Probability distributions 
Regression, correlation, and 
trend analysis 
AVEDEV 
AVERAGE, AVERAGEA 
COMBIN, COMBINA 
COUNT, COUNTA 
COVARIANCE.S, COVARNACE.P 
DEVSQ 
FREQUENCY 
GEOMEAN 
HARMEAN 
LARGE 
MAX, MAXA 
MEDIAN 
MIN, MINA 
PERMUT 
PROB 
QUARTILE.EXC, QUARTILE.INC 
RANK, RANK.AVG, RANK.EQ 
SKEW 
SMALL 
STANDARDIZE 
STDEV, STDEVA, STDEVPA 
SUM 
TRIMMEAN 
VAR, VAR.S, VAR.P, VARPA 
AVERAGEIF 
AVERAGEIFS 
COUNTIF 
COUNTIFS 
MAXIFS 
MINIFS 
SUMIF 
SUMIFS 
 
CONFIDENCE.NORM 
CONFIDENCE.T 
F.TEST 
T.TEST 
Z.TEST 
BETA.DIST 
BETA.INV 
BINOM.DIST 
 BINOM.INV 
CHISQ.DIST, CHISQ.DIST.RT 
CHISQ.INV, CHISQ.INV.RT 
EXPON.DIST 
F.DIST 
FISHER, FISHINV 
GAMMA 
GAMM.DIST 
GAMMA.INV 
GAMMALN, GAMMALN.PRECISE 
GAUSS 
HYPGEOM.DIST 
LOGNORM.DIST 
LOGNORM.INV 
NEGBINO.DIST 
NORM.DIST, NORM.S.DIST 
NORM.INV, NORM.S.INV 
PHI 
POISSON.DIST 
T.DIST, T.DIST.2T, T.DIST.RT 
T.INV 
WEIBULL.DIST 
 
CORREL 
FORECAST 
FORECAST.ETS 
FORECAST.ETS.CONTENT 
FORECAST.ETS.SEASONALITY 
FORECAST.ETS.STAT 
FORECAST.LINEAR 
GROWTH 
INTERCEPT 
LINEST 
LOGEST 
PEARSON 
RSQ 
SLOPE 
STEYX 
TREND 
 
 
 

©2017, Pamela Peterson Drake 
 
33 
CREATING A FREQUENCY TABLE AND HISTOGRAM 
We often have uses for a histogram in describing a distribution.  Using the returns on IBM, as can construct 
a frequency distribution table and then a histogram. 
Step 1: Calculate the maximum and minimum values 
These will be the bounds of our table and histogram. 
 
Step 2: Decide on the number of intervals  
You may want few of many intervals or bins in your table and histogram, depending on your purpose. It 
is convenient to use an odd number of bins so that there is a center point in your table and illustration.  I 
will use 7 for our example purposes. 
Step 3: Calculate the bin limits 
The first bin is easy: the minimum of the data is the low value of the lowest bin.   
The highest value in the first bin is Lower level of first bin + 
𝑚𝑎𝑖𝑚𝑢𝑚−𝑚𝑖𝑛𝑖𝑚𝑢𝑚
𝑛𝑜.  𝑜𝑓 𝑖𝑛𝑡𝑒𝑟𝑣𝑎𝑙𝑠. 
 
The low for the next bin is the high for the previous bin, and then the Bin high formula is copied downward: 

©2017, Pamela Peterson Drake 
 
34 
 
The formulas behind these entries are: 
 
The next step is to count the number of returns that fall into each interval or bin, using COUNTIFS: 
= COUNTIFS(range, criteria, range, criteria, …) 
We will use this with two criteria -- exceeding or equaling the lower bin return and less than the high bind 
return: 
=COUNTIFS(ibm,">="&D8,ibm,"<"&E8) 
“ibm” is the name of the range of cells, the quote marks are used because the arithmetic operators are 
text strings, and the ampersand (&) is used to join together the arithmetic operator and the cell. 

©2017, Pamela Peterson Drake 
 
35 
 
We copy the formula down to all bins, but make one small change in the last bin to make sure that we 
have captured the maximum value.  The result, with a summation to check that we got all 108 
observations: 
 
Now we are ready to create labels for each bin.  We use the TEXT command to produce the format for the 
data, and the & to join components of the label: 

©2017, Pamela Peterson Drake 
 
36 
 
Note that if these were dollar amounts instead of returns, we would use “$#0.00” or some other similar 
formatting in the TEXT command. 
We have now created the frequency distribution: 
 
 
CREATING THE HISTOGRAM 
The histogram is an illustration of the data in the frequency distribution.  We simply create a column chart 
with the count as the series and the descriptions as the horizontal axis labels:7 
                                                           
7 How do you include the bin descriptions as horizontal axis labels?  Click on the chart, then in Chart Tools > Design 
> Select Data  and in the horizontal axis labels box, Edit and select the labels. 

©2017, Pamela Peterson Drake 
 
37 
 
The vertical axis is the number of observations (i.e., the count) in the sample that falls in the range.  The 
horizontal axis consists of the bin. 
REGRESSION AND CORRELATION 
There are several regression and correlation related statistical functions. These functions are useful for 
the most common linear regression applications: 
FUNCTION 
EXPLANATION 
SLOPE(Y_array,X_array) 
Estimates the slope using least squares regression. 
INTERCEPT(Y_array,X_array) 
Estimates the intercept using least squares regression. 
LINEST(Y_array,X_array, const, 
stats) 
Estimates the regression line, assuming constrained intercept 
(const=FALSE) or unconstrained (const=TRUE), either with 
statistics (stats=TRUE) or without (stats=FALSE) 
Because LINEST produces an array if more than one cell is 
indicated, with different statistics in different elements, you can 
use the INDEX function in combination with LINEST to identify 
specific items. For example, =INDEX 

©2017, Pamela Peterson Drake 
 
38 
(LINEST(Y_array,X_array,TRUE,TRUE),2) is the standard error of 
the slope. 
TREND(Y_array,X_array, const) 
Estimates the trend line, assuming constrained intercept (FALSE) 
or unconstrained (TRUE).  
CORREL(array1,array2) 
Calculates the correlation coefficient for two arrays. 
STEYX(Y_array,X_array) 
Calculates the standard error of the estimate for a simple 
regression. 
RSQ(Y_array, X_array) 
Calculates the coefficient of determination between two series of 
data. 
 
Each of these functions requires two arrays of equal length; multiple regression is not available in the 
built-in functions.8 
                                                           
8 You would need to use Data Analysis ToolPack for multiple regression/ 
 

©2017, Pamela Peterson Drake 
 
39 
Chapter 4.  
Data Analysis ToolPak 
The Analysis ToolPak is a collection of statistical programs that operate within Excel. The Analysis ToolPak 
is an Excel Add-on, which means that you need to manually perform a one-time operation: 
FILE > OPTIONS > Add-ins > Excel Add-ins Go  > and then check the box for Analysis ToolPak 
Once added, you need not add it again unless you have unchecked this box.  You will find this add-in in 
your Data ribbon, and it will likely be referred to as “Data Analysis”.  This add-in is a specific set of statistical 
analyses that duplicate some of the built-in functions and extend others. 
WHAT IS AVAILABLE WITH DATA ANALYSIS? 
The list of programs available in Data Analysis: 
ANOVA 
Correlation 
Covariance 
Descriptive statistics 
Exponential smoothing 
Fourier analysis 
F-Test Two sample for variances 
Histogram 
Moving average 
Random number generation 
Rank and percentile 
Regression 
Sampling 
t-Test (paired and unpaired, assuming equal or unequal variances) 
z-Test (two sample for means) 
 
Why use Analysis ToolPak instead of the individual functions available for statistical analysis (e.g. 
AVERAGE)?  Here are a few issues to ponder: 
 
Use Data Analysis 
Use individual 
statistical functions 
Need calculations quickly and for a one-time use?  
 
 
Need to calculate statistics repeatedly for many cases? 
 
 
Need to update statistics?  
 
 
Need to estimate a multiple regression?  
 
 
Need to estimate a single statistic or a couple statistics 
for a regression, but do not need all the rest of the 
regression statistics?  
 
 
Want to create a histogram that will allow updating? 
 
 

©2017, Pamela Peterson Drake 
 
40 
Want to create a simulation that the user can use over 
and over again? 
 
 
USING DATA ANALYSIS 
The attraction of using Data Analysis is its simplicity.  Once you click on Data Analysis, you are provided 
with a menu.  Select the analysis that you want, and then indicate the data.  For most of the statistical 
programs, you indicate the cells in which your data reside, identify where you would like the results to 
reside, and then click on OK.  The results will appear quickly. 
In some cases, such as the histogram, you must work a bit harder.  For example, in the case of a histogram, 
you already need to have the bins (that is, intervals) set up and in the workbook; what this program does 
is the same as the COUNTIFS function, counting how many observations fall in each bin. 
Consider the case of a regression of Data1 against Data2: 
 
Using the menu for Regression, we specify the cells, indicate that the at first cell of each set consists of a 
label, and use the default of putting the results on a new sheet:9  
 
                                                           
9A new sheet is recommended for this analysis because there is a risk that it would overwrite data on the sheet in 
which the data resides. 

©2017, Pamela Peterson Drake 
 
41 
 
The results on a new sheet are: 
 
If we want to re-estimate this regression with a different set of data or updated data, we would need to 
perform this operation once again.  And if we just wanted to estimate, say, the slope, we could have used 
=SLOPE(A2:A11,B2:B11) to produce the value of -0.2268386. 
 

©2017, Pamela Peterson Drake 
 
42 
Chapter 5.  
Financial functions 
We use the time value of money functions to calculate the value of an amount or a series of cash flows. 
We can also use these functions to calculate interest rates or returns, as well as the time it takes for a sum 
to grow to a specific value.  There are, of course, variations on these basic time value of money tasks, but 
these are the most frequent uses of these functions.  
Most of the time value of money functions use the following inputs: 
Variable 
name 
Variable 
Explanation 
FV 
Future value 
The value of a series, lump-sum, or combined series and lump-sum 
some number of compounding periods in the future. 
PV 
Present value 
The value today of a series of future cash flows, future lump-sum, 
or combined future series and lump-sum. 
NPER 
Number of periods 
Number of periods, in the case of compounding or discounting a 
lump-sum, or number of payments in the case of an annuity. 
RATE 
Interest rate 
Compound rate or discount rate of interest per period. 
PMT 
Payment 
Periodic cash flow. 
 
In most of the time value of money functions, you specify the four inputs (out of FV, PV, RATE, NPER, PMT) 
and, if necessary, the timing of the payments (i.e., TYPE), to calculate the fifth variable.  You can see this 
with the list of functions: 
Time value of money built-in functions 
Objective 
Function specification 
Future value 
=FV(RATE,NPER,PMT,PV,TYPE) 
Present value 
=PV(RATE,NPER,PMT,FV,TYPE) 
Interest rate 
=RATE(NPER,PMT,PV,FV,TYPE,GUESS) 
Number of periods 
=NPER(RATE,PMT,PV,FV,TYPE) 
Payment 
=PMT(RATE,NPER,PV,FV,TYPE) 
Interest in a loan payment 
=IPMT(RATE,PER,NPER,PV,FV,TYPE) 
Principal repayment in a loan payment 
=PPMT(RATE,PER,NPER,PV,FV,TYPE) 
Future value 
=FVSCHEDULE(PV,cell range) 
  
For example, we need to provide the interest rate, the number of periods, any periodic payment, and the 
present value (if any) to calculate the future value.  If an input is not used in the function, a zero 
placeholder (that is, 0) must be used.  
A few notes on using these functions: 

©2017, Pamela Peterson Drake 
 
43 
 RATE, when used in a function, should be in decimal form or with a percentage sign, %. 
 PMT and PV should reflect whether these are cash inflows or outflows, and whether the signs agree 
 In all functions, TYPE is either 0, indicating end of period (that is, an ordinary annuity), or 1, indicating 
the beginning of the period (that is, an annuity due). 
 When you have both PV and FV as inputs (e.g., RATE, NPER, PMT), PV and FV cannot be the same 
sign. 
 When PMT is not equal to zero, the number of periods (NPER) is assumed equal to the number of 
payments. 
 The interest rate function has the added, optional variable of GUESS, which is a value a user inputs if 
Excel has difficulty determining the interest rate.10 
 When amortizing a loan, the IPMT and PPMT functions help you break out the interest and principal 
portions of the constant payment, where the particular period is indicated as PER. 
 If the rate of interest changes each period, you can use FVSCHEDULE to calculate the future value given 
a series of interest rates, with the rates in adjacent cells with the range specified as the second 
argument in the FVSCHEDULE function. 
The most challenging part of using the time value of money functions is interpreting the problem and 
determining the values of the known variables.  The focus of this module is to detail the different functions 
and to highlight some of the issues that may arise in typical problems. 
CALCULATING A FUTURE VALUE 
Because of the similarity among the time value of money functions, we demonstrate the use of these 
functions using the future value, FV, function. The future value function, FV, requires that you specify four 
arguments (that is, RATE, NPER, PMT, and PV) and you have a fifth, optional argument: 
=FV(RATE,NPER,PMT,PV,[TYPE]) 
where  
RATE 
is the rate period, in decimal form (that is, 0.05 for 5 percent); 
NPER 
is the number of compound periods; 
PMT 
is the periodic payment; 
PV 
is the present value;  and 
TYPE 
is the type: 0 if the payments occur at the beginning of the period, 1 otherwise. 
 
The order of these arguments is important, but if the right-most variable or variables are zero, you can 
leave these off. 
Consider the following problem: 
Suppose you have a savings account that pays interest at 4 percent per year, compounded 
annually.  If you currently have $2,000 in that account and then deposit $100 in the 
account at the end of each of the next five years, how much will have in the account?  
The specification in the FV function for this problem is: 
=FV(.04,5,100,2000,0) 
                                                           
10 This is rarely needed. 

©2017, Pamela Peterson Drake 
 
44 
The answer is $2,974.94, but because we did not specify the present value and the deposits as outflows, 
the future value that Excel returns is -$2,974.94.  Because the present value and payments represent 
investments (outflows) that produce the future value (inflow), we could, more appropriately, specify this 
problem as: 
=FV(.04,5,-100,-2000,0) 
which returns a value of $2,974.94. 
A few notes about this function: 
 
Because TYPE is the last argument, Excel will assume a value of 0 if you do not specify this 
argument.  Therefore, you could calculate the future value using =FV(.04,5,-100,-2000). 
 
If there was no balance in the account to begin with (that is, no present value), you could either 
place a 0 in that argument or leave the argument off if (and only if) you are also leaving off the 
type, and a 0 will be assumed: =FV(.04,5,-100). 
 
If the problem has a present value, but no periodic payments, you would need to put a zero in 
the place of the payment so that Excel does not interpret the present value as a payment.  We 
would specify the case without payments as: =FV(.04,5,0,-2000). 
 
Using the whole number for the interest rate (that is, 4 instead of .04) results in an incorrect 
future value. 
 
Do not use currency symbols (e.g., $, €) in the function. 
 
Do not insert a comma to separate thousands from hundreds, etc. Excel will interpret a comma 
as a separation of arguments within the function. 
Additional considerations 
Compounding frequency 
If interest is compounded more frequently than once per year, this does not present a problem – it just 
requires an adjustment.  And you can make this adjustment within the function.   
Suppose we deposit $5,000 in an account that pays interest at the rate of 9 percent per 
year, compounded monthly.  How much will be in the account at the end of five years? 
We can perform the calculations within the function to take advantage of Excel’s precision: 
=FV(.09/12,5*12,0,-5000,0) 
where “/” indicates division and “*” indicates multiplication.11   
You must take care, however, when there are periodic payments involved.  For example, if payments are 
annual but interest is compounded monthly, you cannot use the adjustment as we just did because if we 
divide the interest to get a rate per period and multiply the number of periods, we are also multiplying 
the number of payments, which may not be our intention.  If the compounding frequency and the 
payment frequency are not the same, we instead must use the effective interest rate in place of the 
interest rate, matching the compounding period length with the periodicity of the payments.  For 
example, 
                                                           
11 You could perform the .09  12 in your calculator and then input this into the function, but risk losing some 
precision if you round off your answer to .09  12 to, say, .008 instead of the precise 0.0075. 

©2017, Pamela Peterson Drake 
 
45 
Suppose we deposit $100 in an account each quarter, starting at the end of the first 
quarter, in an account that pays interest at the rate of 6 percent per year, compounded 
monthly.  How much will be in the account at the end of five years? 
We need to have NPER and RATE in terms of the same unit of time (e.g., quarterly).  Therefore, in this 
problem we would need to have RATE in terms of quarters and NPER be the number of quarters.  The 
effective quarterly rate for this problem is (1 + 0.005)3 – 1 = 1.5075 percent per quarter.12 
Effective and nominal interest rate 
An alternative to dealing with compounding frequency that does not involve altering the number of years 
is to use the EFFECT function, which converts an annual percentage rate (also known as the nominal or 
stated rate) into an effective rate. There are two arguments in this function: the first is the annual 
percentage rate and the second is the number of compounding periods in a year. For example, if interest 
is 10 percent per year, compounded quarterly, the effective rate is: 
=EFFECT(.10,4) 
with a result of 10.3813 percent as the effective annual rate. 
Suppose we deposit $500 in an account that pays interest at the rate of 6 percent per 
year, compounded monthly.  How much will be in the account at the end of five years? 
We can use EFFECT in our future value example with monthly compounding. 
=FV(EFFECT(.06,12),5,0,-500,0) 
and the answer is $674.43.  In other words, we can use a function within another function.13 
Returning to our problem involving quarterly payments and monthly compounding, 
Suppose we deposit $100 in an account each quarter, starting at the end of the first 
quarter, in an account that pays interest at the rate of 6 percent per year, compounded 
monthly.  How much will be in the account at the end of five years? 
We cannot use the EFFECT for an easy fix, but rather need to put the math equation into the function.  
The math equation, using Excel notation, is: 
((1 + (0.06/12))^3)-1 
where 0.06/12 is the rate per month, and “^” indicates taking the term to a power (in this case, the power 
of 3).  Putting this in the equation for the RATE, together with the rest of the function, we have: 
=FV(((1+(0.06/12))^3)-1,5*4,-100,0) 
which produces a future value of $2,314.08.14 
                                                           
12 The effective rate is determined by first calculating the rate per period. The rate per period is 6%  12 = 0.5% per 
month.  If we want the effective annual rate equivalent to 6 percent, compounded monthly, we calculate: (1 + 
0.005)12 -1 = 6.1678%.  In this example, however, we need the equivalent quarterly rate.  To do this, we take this 
monthly rate and find the effective quarterly rate, considering that there are three months in a quarter: (1 + rate 
per period) number of periods – 1 = (1 + 0.005)3 -1 = 1.5075%.  
13 Alternatively, you could calculate the effective rate in another cell and then simply refer to that cell’s address 
within the FV function. 
14 We could have simplified this by calculating the RATE and NPER variables and then inserting these values into 
the function: = FV(.015075,20,-100,0). 

©2017, Pamela Peterson Drake 
 
46 
What if you have a problem in which you are given an effective rate and need to calculate the nominal or 
stated rate?  Just use the NOMINAL function, which has two arguments:  the effective rate of interest and 
the compounding frequency.   
Consider a bank that wants to pay, effectively, 2.5 percent interest on accounts that are 
compounded daily.  What nominal rate should the banks put in their advertisements? 
We use the NOMINAL function, 
=NOMINAL(.025,365) 
which produces the result of 2.4693 percent. In other words, a nominal rate of 2.4693 percent is 
equivalent to an effective rate of 2.5 percent if interest is compounded daily. 
Continuous compounding 
What if interest is compounded continuously?  In this case we have to resort to using the EXP function, 
with whatever would be in the exponent contained as the only argument.  Let’s see how this works.  The 
effective interest rate continuous compounding is eAPR -1, where APR is the nominal rate per year.    Let’s 
restate the problem to see how we can use EXP to help us solve for a value: 
Suppose you have a savings account that pays interest at 4 percent per year, compounded 
continuously.  If you currently have $2,000 in that account and then deposit $100 in the 
account at the end of each of the next five years, how much will have in the account?  
If interest is compounded continuous and is stated as 4 percent per year, then the effective rate per year 
is: 
=EXP(.04) – 1 
which is 4.0811 percent.  Using the FV function, substituting EXP(.04)-1 for the interest rate, 
=FV(EXP(.04)-1 ,5,-100,-2000,0) 
which produces a future value of $2,985.32 
Cell references 
So far, we have presented the time value of money functions using direct inputs.  An alternative is to use 
cell references. Consider the same example, but with the inputs in cells: 
 
 
A 
B 
 
1 
Interest rate 
4% 
 
2 
Number of periods 
5 
 
3 
Payment 
$100 
 
4 
Present value 
$2,000 
 
5 
 
6 
Future value 
$2,974.94  ← =FV(B1,B2,-B3,-B4) 
 
Instead of making the cell values negative, which can be confusing to some users, we can just take care of 
this by adding a minus sign in front of any of the values that need to be negative, essentially multiplying 
the cell value by -1. 

©2017, Pamela Peterson Drake 
 
47 
EXAMPLES 
Future value  
If you deposit $1,000 in an account today and your deposit earns interest at a rate of 5 percent per year, 
compounded annually, how much will you have in the account at the end of ten years? 
The function and arguments in the function are: 
=FV(.05,10,0,-1000) 
and the answer is $1,629.89.  
Present value  
Suppose you want to have $10,000 in five years and can deposit an amount in an account today that 
earns interest at the rate of 7 percent per year, compounded quarterly.  What would you have to 
deposit today to meet your savings goal? 
The function and arguments in the function are: 
=PV(.07/4,5*4,0,-10000) 
and the answer is $7,068.25. 
Interest rate  
What annual rate of return must you earn on your savings if you can invest $3,000 today and want this 
to grow to $6,000 by the end of ten years? 
The function and arguments in the function are: 
=RATE(10,0,-3000,6000) 
and the answer is 7.177 percent. 
Number of periods  
How long does it take for a deposit of $4,000 to grow to $5,000 if the annual rate of interest is 4 
percent? 
The function and arguments in the function are: 
=NPER(.04,0,-4000,5000) 
and the answer is 5,689 years. 
Payment  
How much must you deposit at the beginning of each year if you earn 8 percent per year and have a 
goal of having $60,000 at the end of ten years? 
The function and arguments in the function are: 
=PMT(.08,10,0,-60000,1) 
and the answer is $3,834.97. 

©2017, Pamela Peterson Drake 
 
48 
Loan amortization  
Consider a loan of $20,000 that is paid off in three years in monthly installments.  The nominal rate of 
interest is 12 percent.  For the tenth month, how much of the installment payment is interest and how 
much is principal? 
The function and arguments in the function are: 
=IPMT(.12/12,10,36,-20000) 
and 
=PPMT(.12/12,10,36,-20000) 
and the answers are $156.503 and $507.783, respectively.  You can check your work by calculating the 
payment, =PMT(.12/12,36,-20000), and verifying that the interest and principal portions add up to the 
payment, which is $664.286.   
FUTURE VALUE WITH A SCHEDULE OF INTEREST RATES 
Suppose you invest $10,000 in an investment at the beginning of 20X1 that earns the following returns: 
 
Year 
Return 
20X1 
5% 
20X2 
-3% 
20X3 
4% 
20X4 
2% 
 
What is the value of this investment at the end of 20X4? 
Given the following spreadsheet: 
 
A 
B 
1 
Year 
Return 
2 
20X1 
5% 
3 
20X2 
-3% 
4 
20X3 
4% 
5 
20X4 
2% 
 
the function and arguments in the function are: 
=FVSCHEDULE(10000,B2:B5) 
and the answer is $10,804.25. 

©2017, Pamela Peterson Drake 
 
49 
NOMINAL RATE OF INTEREST 
Suppose a bank would like to advertise a nominal rate of interest that is equivalent to paying, effectively, 
4 percent per year when compounded daily.  What is the nominal rate that is equivalent to this effective 
rate? 
The function and arguments are: 
=NOMINAL(.04,365) 
and the answer is 3.922 percent. 
Effective rate of interest  
Suppose a bank is advertising an account as 4 percent stated interest, compounded daily.  What is the 
effective rate of interest on this account? 
The function and arguments are: 
=EFFECT(.04,365) 
and the answer is 4.081 percent. 

©2017, Pamela Peterson Drake 
 
50 
Chapter 6.  
Bond pricing and analysis 
Bond pricing and related calculations are accomplished in Microsoft Excel using specific functions for 
bonds.  These functions include pricing and yield functions 
THE PRICE FUNCTIONS 
When we begin looking at the valuation of bonds, we usually focus on the simplest situation, in which the 
valuation occurs precisely at a coupon payment date.  In the case of this situation, we value a bond using 
the PV function.  
Suppose we have a bond with a coupon rate of 5 percent, six years remaining to 
maturity, and is priced to yield 8 percent.  What is the value of this bond? 
Using bond quote terms, with the “*-1” used to convert the present value to a positive value:15 
=PV( RATE, NPER, PMT, FV )*-1 
 
↑ 
↑ 
↑ ↑ 
 
=PV( .08/2, 6*2, 5/2, 100 )*-1 
 
which we could also write as =PV(.04,12,2.5,100)*-1.  This provides the value of the bond of 85.92 (per 
100 par value) if there is a complete coupon period between the date of the present value and the first 
coupon.   
A better, and more accurate, approach is to value of a bond using the PRICE function.  The price function, 
and the related functions of PRICEDISC and PRICEMAT, are specified in a similar manner: 
FUNCTION 
PURPOSE 
SPECIFICATION 
PRICE 
Values a security with 
periodic interest. 
 
PRICE(SDATE,MDATE,COUPONRATE,YIELD,RVALUE,FREQ,BASIS) 
PRICEDISC 
Values a security 
without interest 
 
PRICEDISC(SDATE,MDATE,YIELD,RVALUE,BASIS) 
PRICEMAT 
Values a security that 
pays interest only at 
maturity. 
 
PRICEMAT(SDATE,MDATE,IDATE,INTERESTRATE,YIELD,BASIS) 
 
where 
Argument 
What it means 
BASIS 
Convention for the way to count days:  
0 = US(30/360)  
1=actual/actual 
2=actual/360 
3=actual/365 
                                                           
15 The bond quote terms give us the value per 100 face value.  Using this method of quoting, we need not know the 
denomination of the bonds that make up this bond issue, and simply specify the coupon (the PMT) per 100.  The 
division by 2 is for the semi-annual coupons, which is typical of US bonds. 

©2017, Pamela Peterson Drake 
 
51 
4=European 30/360 
COUPON RATE 
Annual coupon rate 
FREQ 
Frequency of coupons within a year 
IDATE 
Issue date 
MDATE 
Maturity date 
RVALUE 
Redemption value 
SDATE 
Settlement date 
YIELD 
Annualized yield 
 
The settlement date is the date of the valuation, and the redemption value, using standard conventions 
for reporting, is 100.  U.S. corporate bonds typically have semi-annual interest (FREQ = 2) and use the 
U.S. basis (BASIS = 0), but be sure to check the specific security. 
 
Consider an example: 
Per FINRA, the IBM 4% coupon bond maturing in 2042 is priced to yield 4.06% on 
12/28/2016.  Investors in these bonds receive interest every six months.  What is the 
value of this bond? 
The settlement date is the date in which the bond transaction takes place, so it would be 12/28/2016. 
 
 
A 
B 
1 
IBM3862755 | CUSIP 459200HF1 
 
2 
Coupon rate 
4.00% 
3 
Maturity date 
7/15/2023 
4 
Yield 
4.06% 
5 
Settlement 
12/28/2016 
6 
Value of the bond 
99.0364 
 
When we value a bond, we often want the value today.  Therefore, we specify today as the settlement 
date; a simple way of doing this is to use the function NOW(), which produces today’s date.   
 
Suppose that we expect the yield on this bond to increase to 5% by the time we plan to sell it on Using 
NOW() as the settlement date, where the example was established 6/17/2013, 
 
 
A 
B 
1 IBM3862755 | CUSIP 459200HF1 
2 Specified future date 
6/1/2021 
3 Coupon rate 
4.00% 
4 Maturity date 
6/20/2042 
5 Yield 
5.00% 
6 Settlement 
85.6821 
7 Value of the bond 
6/1/2021 
 
=PRICE(B5,B3,B2,B4,100,2,0) 

©2017, Pamela Peterson Drake 
 
52 
DISCOUNTS AND YIELDS  
Similar to the functions that value bonds, there are a number of functions that help us calculate the yields 
on bonds.  The arguments are similar, but now we need to specify the price of the security as an input and 
then we solve for the yield: 
 
Function 
Description 
Specification 
DISC 
Calculates the discount 
rate of a security that 
does not pay interest. 
=DISC(SDATE,MDATE,PRICE,RVALUE,BASIS) 
INTRATE 
Calculates the implied 
interest rate for a 
security assuming no 
coupon, no 
compounding, and that 
the security is held to 
maturity. 
=INTRATE(SDATE,MDATE,INVESTED,RVALUE,BASIS) 
YIELD 
Calculates the yield on 
a security. 
=YIELD(SDATE,MDATE,COUPONRATE,PRICE,FREQ,BASIS) 
YIELDDISC 
Calculates the annual 
yield on a security that 
does not pay interest. 
=YIELDDISC(SDATE,MDATE,PRICE,RVALUE,BASIS) 
YIELDMAT 
Calculates the yield to 
maturity of a security 
that pays interest only 
at maturity. 
=YIELDMAT(SDATE,MDATE,IDATE,COUPONRATE,PRICE,BASIS) 
 
Consider an example: 
Suppose you want to determine the yield to maturity on the Allied Signal 9.065% semi-
annual pay bond that matures June 1, 2033.  If the price of this bond on December 28, 
2016 is 157.93, what is this bond’s yield to maturity?    
We are given: 
 
 
A 
B 
1 
Allied Signal [CUSIP = 019512AM4] 
2 
Maturity 
6/1/2033 
3 
Coupon rate 
9.065% 
4 
Price 
157.93 
5 
Settlement date (date of price) 
12/28/2016 
 

©2017, Pamela Peterson Drake 
 
53 
and calculate 
 
A 
B 
1 
Allied Signal [CUSIP = 019512AM4] 
2 
Maturity 
6/1/2033 
3 
Coupon rate 
9.07% 
4 
Price 
157.93 
5 
Settlement date (date of price) 
12/28/2016 
6 
Yield to maturity 
4.161% 
 
If a bond does not pay interest (that is, it is a zero-coupon bond), you use the same YIELD calculation as 
with a coupon bond, but the coupon rate is 0%. 
TREASURY BILL CALCULATIONS 
We calculate Treasury bill yields and prices using the specific, tailored functions: 
 
TBILLPRICE 
Calculates the value of a Treasury bill 
given a discount yield. 
TBILLPRICE(SDATE,MDATE,DISCOUNTRATE) 
TBILLYIELD 
Calculates the yield on a Treasury bill. 
TBILLYIELD(SDATE,MDATE,PRICE) 
TBILLEQ 
Calculates the bond-equivalent yield on 
a Treasury bill. 
TBILLEQ(SDATE,MDATE,DISCOUNTRATE) 
 
The settlement date (SDATE) is the date in which you are valuing the Treasury bill, and the calculations 
behind the function involve comparing the settlement date with the maturity date.  
 
Suppose you see that a Treasury bill matures July 1, 2017 and has a discount rate of 
0.05%.on June 1, 2017.  What is the price of this bond? 
 
We use TBILLPRICE with: 
 
 
 
and the calculation is: 
=TBILLPRICE(B2,B2,B3) 
 
which produces a price of 99.9958. 
 
Now consider a problem in which we want to solve for the yield: 
 
Suppose it is July 1, 2018, and you observe that a bill that matures October 1, 2018 has a 
price of 99.5.  What is the yield on this bond? 
 
A 
B 
1 
Settlement date 
6/1/2017 
2 
Maturity date 
7/1/2017 
3 
Discount rate 
0.0005 
=YIELD(B5,B2,B3,B4,100,2,0) 

©2017, Pamela Peterson Drake 
 
54 
The inputs are: 
 
A 
B 
1 
Settlement date 
7/1/2018 
2 
Maturity date 
10/1/2018 
3 
Price 
99.5 
 
Using TBILLYIELD, 
 
=TBILLYIELD(B1,B2,B3) 
 
produces a yield of 1.9664%. 
 
If we are given a discount yield and want the bond equivalent yield, for comparisons to other 
investments, we use TBILLEQ.  Consider the following problem: 
 
Suppose it is September 1, 2018 and you are told that a bill maturing December 31, 
2018 has a discount yield of 1%. What is this bill’s bond equivalent yield? 
 
We use the inputs 
 
A 
B 
1 
Settlement date 
9/1/2018 
2 
Maturity date 
12/31/2018 
3 
Discount rate 
0.01 
 
and the TBILLEQ function: 
=TBILLEQ(B1,B2,B3) 
 
which produces a bond equivalent yield of 1.0173%. 
 
Suppose you don’t have a particular Treasury bill that we are analyzing, but rather want to value a bill 
with a specific number of days or months from today.  Adding months, we can use =NOW() to represent 
today’s date and then use the function EDATE, which has two arguments: the base date reference and 
the number of months to add.  For example, if today is June 28, 2013, and we want to value a Treasury 
bill that has three months to maturity and a discount rate of 1%, 
 
 
A 
B 
1 
Settlement date 
=NOW() 
2 
Maturity date 
=EDATE(B1,3) 
3 
Discount rate 
0.01 
 
Tbill price 
=TBILLPRICE(B1,B2,B3) 
 
produces: 
 
 
A 
B 
1 
Settlement date 
12/28/2016 
2 
Maturity date 
3/28/2017 
3 
Discount rate 
1% 

©2017, Pamela Peterson Drake 
 
55 
 
Tbill price 
99.7500 
 
Suppose, instead, you want to add a specific number of days.  In this case, 
 
 
A 
B 
1 
Settlement date 
=NOW() 
2 
Maturity date 
=NOW()+90 
3 
Discount rate 
0.01 
 
Tbill price 
=TBILLPRICE(B1,B2,B3) 
 
produces: 
 
 
A 
B 
1 
Settlement date 
6/28/2013 
2 
Maturity date 
3/28/2013 
3 
Discount rate 
1% 
 
Tbill price 
99.7500 
ACCRUED INTEREST 
We use the accrued interest functions to determine how much of a bond’s value is due to accrued interest 
if the bond is sold or bought between coupon payments.  The most common of these functions is ACCRINT, 
which calculates accrued interest on a bond from the bond’s issuance to the settlement date.   
 
Function 
Description 
Specification 
ACCRINT 
Calculates accrued interest 
on a bond. 
 
ACCRINT(IDATE,FDATE,SDATE,COUPONRATE,PAR,FREQ, 
BASIS,CALCULATION METHOD) 
ACCRINTM Calculates accrued interest 
on a bond that pays 
interest only at maturity. 
ACCRINTM(IDATE,SDATE,COUPONRATE,PAR,BASIS) 
 
Consider the GEICO bond once again.  Suppose we would like to know the accrued interest on this bond, 
as of June 22, 2013, but only since the last coupon payment. The problem is that ACCRINT won’t tell you 
this directly. If you want the accrued interest simply from the last coupon payment, you will need to 
incorporate one of the “COUP” functions.   
 
The “COUP” functions assist use with the gritty details of bond transactions, helping determine the 
number of the days since the last coupon (COUPDAYSBS), the number of days between coupon dates 
(COUDAYS), and the number of days until the next coupon (COUPDAYSNC).  The COUPNCD and COUPPCD 
functions determine the date of the next and previous coupons, respectively. 
 
Function 
Purpose 
Specification 
COUPDAYBS 
Calculates the number of days from the 
last coupon payment 
COUPDAYBS(sdate,mdate,freq,basis) 
COUPDAYS 
Calculates the number of days from the 
last coupon date to the next coupon 
date. 
COUPDAYS(sdate,mdate,freq,basis) 

©2017, Pamela Peterson Drake 
 
56 
COUPDAYSNC Calculates the number of days to the 
next coupon payment 
COUPDAYSNC(sdate,mdate,freq,basis) 
COUPNCD 
Determines the next coupon date after 
the settlement date. 
COUPNCD(sdate,mdate,freq,basis) 
COUPPCD 
Calculate the coupon date before the 
settlement date. 
COUPPCD(sdate,mdate,freq,basis) 
 
If consider a timeline of the coupon payment dates, for a semi-annual coupon paid 1/15/2018 and 
7/15/2018, and a settlement date of 5/20/2013: 
1/15/2013 
 
5/20/2018  
7/15/2018 
| 
 
| 
 
| 
| 
 
| 
 
| 
↑ 
 
↑ 
 └ 
COUPDAYS = 180   
┘           
↑ 
 
↑ 
 
↑ 
└ 
COUPDAYBS = 125   
┘└   
COUPDAYSNC = 55 
┘ 
 
If we want to accrued interest from the last coupon payment, 
 
 
A 
B 
1 
Last coupon 
=COUPPCD(B2,B3,2,0) 
2 
Settlement date 
5/20/2018 
3 
Next coupon 
7/15/2018 
4 
Coupon rate 
7.35% 
5 
COUPDAYS 
=COUPDAYS(B2,B3,2,0) 
6 
COUPDAYBS 
=COUPDAYBS(B2,B3,2,0) 
7 
COUPDAYSNC 
=COUPDAYSNC(B2,B3,2,0) 
8 
Accrued interest since last coupon 
=ACCRINT(B1,B5,B2,B4,100,2,0) 
 
which results in: 
 
 
A 
B 
1 
Last coupon 
1/15/2018 
2 
Settlement date 
5/20/2018 
3 
Next coupon 
7/15/2018 
4 
Coupon rate 
7.35% 
5 
COUPDAYS 
180 
6 
COUPDAYBS 
125 
7 
COUPDAYSNC 
55 
8 
Accrued interest since last coupon 
$2.552 
 

©2017, Pamela Peterson Drake 
 
57 
You can check this with a simple calculation using the interest for one 6-month period assuming a 
redemption value of 100, $7.35  2 = $3.675, and the proportion of the coupon period, 125  180 = 
0.69444: Accrued interest = $3.675 × 0.69444 = $2.552.16 
DURATION AND MODIFIED DURATION 
There are two functions that can be used to evaluate a bond’s interest rate sensitivity: DURATION and 
MDURATION: 
 
DURATION 
Calculates 
Macauley 
duration for a 
bond. 
=DURATION(SDATE,MDATE,COUPONRATE,YIELD,FREQ,BASIS) 
MDURATION 
Calculates 
modified 
Macauley 
duration for a 
bond. 
=MDURATION(SDATE,MDATE,COUPONRATE,YIELD,FREQ,BASIS) 
You’ll notice that these functions have identical arguments. 
Re-using a previous example, with the GEICO bond but this time calculating the duration:17 
Per FINRA, the Pacific Gas & Electric Company 6.05% bond maturing 3/1/2034 is traded 
at a yield of 5.710% on 12/28/2016.  What is the duration of this bond as of this date? 
We specify the Macauley and modified duration of this bond as: 
 
A 
B 
1 
PCG.JA | CUSIP 694308GH4 
 
2 
Current date 
12/28/2016 
3 
Coupon rate 
7.35% 
4 
Maturity date 
7/15/2023 
5 
Yield 
3.491% 
6 
 
 
7 
Macauley duration 
10.8299 
8 
Modified duration 
10.5293 
 
Like the PRICE function, the dates must be referenced to cells that are in Excel’s date form. Unlike PRICE, 
we do not specify the redemption value because duration is not affected by the face value of a bond. 
THE ODD FUNCTIONS  
The ODD functions value a security that has a first or last period that is not a whole compounding period. 
This can occur when there is delay in the issuance of a bond 
                                                           
16 Still another way of calculating the accrued interest between coupon payments is to use ACCRINT to calculate 
the accrued interest to the settlement date, use it again to calculate the accrued interest to the last coupon date, 
and then difference these results. 
17 A bond’s duration, which is a cash-flow weighted maturity, is a function of the settlement date because it 
changes throughout the life of the bond, and is specific to the particular yield to maturity.  Therefore, we need to 
specify the yield and the settlement date. 
=DURATION(B2,B4,B3,B5,2,0) 
=MDURATION(B2,B4,B3,B5,2,0) 

©2017, Pamela Peterson Drake 
 
58 
 
Function 
Description 
Specification 
ODDFPRICE 
Values a security with odd first 
period. 
ODDFPRICE(SDATE,MDATE,IDATE,FDATE,COUPO
NRATE,YIELD,RVALUE,BASIS) 
ODDLPRICE 
Values a security with an odd 
last period. 
ODDLPRICE(SDATE,MDATE,LDATE,COUPONRATE
,YIELD,REDEMPTIONVALUE,BASIS) 
ODDFYIELD 
Calculates the yield on a security 
with an odd first period. 
ODDFYIELD(SDATE,MDATE,IDATE,FDATE,COUPO
NRATE,PRICE,RVALUE,BASIS) 
ODDLYIELD 
Calculates the yield on a security 
with an odd last period. 
ODDLYIELD(SDATE,MDATE,LDATE,COUPON,PRIC
E,RVALUE,FREQ,BASIS) 
 
Though an odd last period is unusual, an odd first period may occur when a bond is delayed in its issuance, 
but the terms remain firm.  These functions are limited in terms of the settlement date; that is, when you 
value these.  In the case of ODDFPRICE, 
Maturity date > First coupon date > Settlement date > Issue date 
or 
MDATE > FDATE > SDATE > IDATE 
In the case of ODDLPRICE, 
Maturity date > settlement date > last interest date 
or 
MDATE > SDATE > LDATE 
Consider a Johnson & Johnson 6/73% bond priced at 2.78%, identified as JNJ.GH, which has an odd first 
period: 
Issue date 
11/23/1993 
First coupon 
5/15/1994 
Maturity date 
11/15/2023 
 
If we want the value this bond as of December 1, 1993,  
 
A 
B 
1 
Settlement 
12/1/1993 
2 
Coupon rate 
6.73% 
3 
Yield 
2.78% 
4 
Issue date 
11/23/1993 
5 
First coupon 
5/15/1994 
6 
Maturity date 
11/15/2023 
we specify the function as: 
=ODDFPRICE(B1,B6,B4,B5,B2,B3,100,2,0) 

©2017, Pamela Peterson Drake 
 
59 
which produces a value of 179.9454.18  If we had used the PRICE function for this bond, we would have 
gotten a value of 179.9435, which is close but not accurate. 
Using the National Rural Utilities Cooperative 3.15% bond due September 15, 2021 and priced to yield 
2.5%, we have the following information: 
Issue date 
9/22/2011 
Last coupon 
4/15/2021 
Maturity date 
9/15/2021 
 
which indicates an odd last period (that is, the last period is five months instead of six months).  If we 
value this bond as of July 15, 2021, we use the following information: 
 
A 
B 
1 Settlement 
7/15/2021 
2 Coupon rate 
3.15% 
3 Yield 
2.50% 
4 Issue date 
9/22/2011 
5 Last coupon 
4/15/2021 
6 Maturity date 
9/15/2021 
Using ODDLPRICE, 
=ODDLPRICE(B1,B6,B5,B12,B3,100,2,0) 
which produces a value of 100.1043.19   
                                                           
18 Which we interpret as $179.9454 per $100 face value. 
19 The value calculated using the PRICE function is 100.1032. 

©2017, Pamela Peterson Drake 
 
60 
Chapter 7.  
Creating charts 
Creating a chart begins with the data.  The data must be a series of adjacent cells in one column or a 
series of adjacent cells in one row.  You create a chart by highlighting the data and then using the Insert 
ribbon, identifying the chart type [Insert > Chart].  
CREATING BASIC CHARTS 
Consider the data set of economic variables downloaded from the Federal Reserve Bank of St. Louis 
FRED database: 
 
A 
B 
C 
D 
1 
Month 
St. Louis Federal 
Reserve Financial 
Stress Index 
Recession 
probability 
Percentage  change in 
unfilled inventory orders 
2 
Jan-11 
-0.299 
22% 
0.9% 
3 
Feb-11 
-0.340 
30% 
0.0% 
4 
Mar-11 
-0.300 
6% 
1.1% 
5 
Apr-11 
-0.473 
46% 
0.5% 
6 
May-11 
-0.434 
30% 
1.0% 
7 
Jun-11 
-0.287 
14% 
0.5% 
8 
Jul-11 
-0.285 
0% 
0.8% 
9 
Aug-11 
0.311 
4% 
0.9% 
10 
Sep-11 
0.576 
12% 
0.8% 
11 
Oct-11 
0.627 
0% 
0.3% 
12 
Nov-11 
0.556 
8% 
1.3% 
13 
Dec-11 
0.465 
0% 
1.5% 
14 
Jan-12 
0.234 
2% 
0.6% 
15 
Feb-12 
-0.031 
12% 
0.9% 
16 
Mar-12 
-0.165 
52% 
0.3% 
17 
Apr-12 
-0.150 
14% 
0.3% 
18 May-12 
-0.101 
14% 
-0.2% 
19 
Jun-12 
0.079 
20% 
0.6% 
20 
Jul-12 
-0.116 
26% 
1.2% 
21 
Aug-12 
-0.253 
96% 
-1.6% 
22 
Sep-12 
-0.456 
38% 
0.2% 
23 
Oct-12 
-0.545 
24% 
0.4% 
24 
Nov-12 
-0.525 
2% 
0.0% 
25 
Dec-12 
-0.585 
14% 
1.0% 
 
Suppose that we want to graph the Stress Index, which takes on a negative value when there is less stress 
in the system and positive when there is stress in the financial system.  If we highlight the first two 
columns, and then insert a chart, Excel will graph both series – it will graph the dates as if they were data 

©2017, Pamela Peterson Drake 
 
61 
to be graphed (which they are not).  Therefore, what we want to do is highlight B1 through B25.  Why 
grab B1?  Because Excel will interpret these characters as the label for the series. 
The stress index variable is a time series, so either a line graph or a column graph would be appropriate.  
Highlighting the data and using Insert > Chart, specifying a column graph produces: 
 
 
 
Not pretty, but it is a start. The chart title automatically defaults to the name of the series that is graphed 
if there is only one series chosen.  You will notice that the horizontal labels are the numbers 1, 2, 3, … 24, 
and they are difficult to read.  We can do better. 
Adding the dates to the horizontal axis:  
1) Click on the chart. 
2) Within the Chart Tools, which appears when you click on the chart, click on Design. 
3) Within the Design ribbon, click on Select Data. 
4) In the Horizontal Category Axis Labels section, click on Edit: 
 
-0.800
-0.600
-0.400
-0.200
0.000
0.200
0.400
0.600
0.800
1
3
5
7
9 11 13 15 17 19 21 23
St. Louis Federal Reserve Financial 
Stress Index
St. Louis Federal Reserve
Financial Stress Index

©2017, Pamela Peterson Drake 
 
62 
5) Click on Edit, and then click on the spreadsheet icon with the red arrow: 
 
6) And click on the spreadsheet icon once more, 
 
7) Highlight the cells with the dates: 
 
and then click OK, and once again OK. 
The dates will now appear as horizontal axis labels. 
We can change the position of these labels by using a right-click on the labels (or Format > choose 
Horizontal [Category]Axis labels), and then changing “Next to Axis” for the Axis labels to  “Low” and 
clicking on Close. 

©2017, Pamela Peterson Drake 
 
63 
 
 
which produces: 
 
There are several things that we can do to improve the appearance of this chart, including: 
 
Axis labels (Chart Tools > Layout > Axis Titles) 
 
Remove the legend, because this is the only series in this graph, so it is unnecessary (Chart Tools 
> Layout > Legend). 
 
Remove the border around the chart unless you really need it. 
 
Remove the gridlines because they are not necessary (Chart Tools > Layout > Gridlines). 
-0.800
-0.600
-0.400
-0.200
0.000
0.200
0.400
0.600
0.800
Jan-11
Mar-11
May-11
Jul-11
Sep-11
Nov-11
Jan-12
Mar-12
May-12
Jul-12
Sep-12
Nov-12
St. Louis Federal Reserve Financial 
Stress Index
St. Louis Federal Reserve
Financial Stress Index

©2017, Pamela Peterson Drake 
 
64 
 
Reduce the spaces between columns (Chart Tools > Format > Series > Format Selection > Series 
Options > Gap width). 
 
Remove all but one decimal place in the vertical axis (Chart Tools > Format > Vertical (Value) 
Axis) > Format Selection > Number). 
 
Remove the Chart border (Chart Tools > Format > Chart Area > Format Selection > Border). 
Making these changes produces: 
 
 
We could also represent this data series using a line: 
 
MORE THAN ONE SERIES ON A CHART 
Suppose we want to plot both the stress index and the recession probability on the same chart.  We can 
do this by highlighting the cells corresponding to the second variable, click once on the chart, and then 
Paste.  Alternatively, we could add the series using Design > Select Data > Add and then choosing the cells 
that correspond to this variable.  We want to add a legend in this case so that the user can distinguish the 
series: 
 
-0.8
-0.6
-0.4
-0.2
0.0
0.2
0.4
0.6
0.8
Jan-11
Feb-11
Mar-11
Apr-11
May-11
Jun-11
Jul-11
Aug-11
Sep-11
Oct-11
Nov-11
Dec-11
Jan-12
Feb-12
Mar-12
Apr-12
May-12
Jun-12
Jul-12
Aug-12
Sep-12
Oct-12
Nov-12
Dec-12
Stress Index
Month
St. Louis Federal Reserve Financial Stress Index
-0.8
-0.6
-0.4
-0.2
0.0
0.2
0.4
0.6
0.8
Jan-11
Feb-11
Mar-11
Apr-11
May-11
Jun-11
Jul-11
Aug-11
Sep-11
Oct-11
Nov-11
Dec-11
Jan-12
Feb-12
Mar-12
Apr-12
May-12
Jun-12
Jul-12
Aug-12
Sep-12
Oct-12
Nov-12
Dec-12
Stress Index
Month
St. Louis Federal Reserve Financial Stress Index

©2017, Pamela Peterson Drake 
 
65 
 
The recession probability ranges from 0 to 1.0, yet the stress index can be positive or negative, so we 
may want to put each variable on a different axis.  To do this, we click on the series whose axis we want 
to move, and then Chart Tools > Format > Format Selection > Series Options and then change the Plot 
Series On to Secondary Axis (from Primary Axis): 
 
We then can label the axis using Chart Tools > Layout > Axis Titles, and we can limit the range from 0 to 
1.0 by clicking on the axis, then Format Selection > Axis Options and then specify a fixed minimum and 
maximum: 
-0.8
-0.6
-0.4
-0.2
0.0
0.2
0.4
0.6
0.8
1.0
1.2
Jan-11
Feb-11
Mar-11
Apr-11
May-11
Jun-11
Jul-11
Aug-11
Sep-11
Oct-11
Nov-11
Dec-11
Jan-12
Feb-12
Mar-12
Apr-12
May-12
Jun-12
Jul-12
Aug-12
Sep-12
Oct-12
Nov-12
Dec-12
Stress Index or Recession Probability
Month
St. Louis Federal Reserve Financial Stress Index
Recession probability

©2017, Pamela Peterson Drake 
 
66 
 
There are many variations on this type of chart, in which you can introduce colors, line thicknesses, 
shadows, markers for observations, etc. For example, we can take this same chart and represent it as: 
 
TYPES OF CHARTS 
There are many types of charts available, and often there is more than one type available for your 
charting task.  How do you decide?  There are some obvious choices in some situations, but in other 
situations you have choices to make.  Figure out the purpose of the chart – that is, what you are trying 
to convey – and then determine the best means of communication. 
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
-0.8
-0.6
-0.4
-0.2
0.0
0.2
0.4
0.6
0.8
Jan-11
Feb-11
Mar-11
Apr-11
May-11
Jun-11
Jul-11
Aug-11
Sep-11
Oct-11
Nov-11
Dec-11
Jan-12
Feb-12
Mar-12
Apr-12
May-12
Jun-12
Jul-12
Aug-12
Sep-12
Oct-12
Nov-12
Dec-12
Recession Probability
Stress Index
Month
Financial Stress and Recession Likelihood
St. Louis Federal Reserve Financial Stress Index
Recession probability
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
-0.8
-0.6
-0.4
-0.2
0.0
0.2
0.4
0.6
0.8
Jan-11
Feb-11
Mar-11
Apr-11
May-11
Jun-11
Jul-11
Aug-11
Sep-11
Oct-11
Nov-11
Dec-11
Jan-12
Feb-12
Mar-12
Apr-12
May-12
Jun-12
Jul-12
Aug-12
Sep-12
Oct-12
Nov-12
Dec-12
Recession Probability
Stress Index
Month
Financial Stress and Recession Likelihood
St. Louis Federal Reserve Financial Stress Index
Recession probability

©2017, Pamela Peterson Drake 
 
67 
 
Type 
The basics 
Choices 
Examples of uses 
Column 
Create columns with 
categories along the 
horizontal axis and values 
along the vertical axis. 
 
Values may be stacked, 
unstacked, or as a 
percentage of the sum. 
 
Provide financial ratios over time. 
 
Common-size analysis 
Line 
Create lines that 
represent values. 
Categories are along the 
horizontal axis and values 
along the vertical axis. 
 
Values may be stacked, 
unstacked, or as a 
percentage of the sum. 
 
Line can be with or 
without markers for 
observations, and points 
can be with or without 
connecting lines. 
 
Stock prices over time. 
 
Financial ratio over time. 
Pie 
Create pie with each slice 
representing the portion 
of the sum of the values. 
 
Highlight a selected 
“slice”. 
 
Market shares of members of an 
industry. 
 
Asset allocation of a portfolio. 
Bar 
Create horizontal 
columns, with the 
categories along the 
vertical axis and values 
along the horizontal axis. 
 
Values may be stacked, 
unstacked, or as a 
percentage of the sum. 
 
Returns for different companies 
for a period of time. 
 
Financial ratios for different 
companies 
Area 
Create filled-in areas with 
categories along the 
horizontal axis and values 
along the vertical axis. 
 
Values may be stacked, 
unstacked, or as a 
percentage of the sum. 
 
Market shares over time. 
 
Common-size analysis. 
XY 
Scatter 
Create scatterplots, with 
the X variable first and the 
Y variable second. 
 
Can have trend lines and 
equations. 
 
Can choose points 
representing values. 
 
Visual of market model 
estimation of beta. 
 
Illustration of correlation. 
Stock  
Produce standard stock 
charts, but data must be 
in the specified order: 
 
High-low close 
 
Open-high-low-close 
 
Volume-high-low-
close 
 
Volume-open-high-
low-close 
 
Few degrees of freedom 
in the design of these 
charts. 
 
Illustration of market trading 
activity. 
Surface 
charts 
Create a graph that 
involves three variables 
for a given observation. 
 
Can arrange axis to 
demonstrate a three-
dimensional relationship 
 
Illustration of patterns in stock 
prices (e.g., January effect) 
 

©2017, Pamela Peterson Drake 
 
68 
Examples of different types of charts 
PIE CHART: MARKET SHARE 
 
 
A 
B 
1 
Month 
Market share  
April, 2013 
2 
Google  
66.50% 
3 
Microsoft 
17.30% 
4 
Yahoo! 
12.00% 
5 
Ask Network 
2.70% 
6 
AOL, Inc. 
1.40% 
 
Source: comScore 
 
 
 
BAR CHART: RATIO ANALYSIS 
 
 
A 
B 
1 
Company 
Long-term 
Debt to Total 
Assets 
2 
AOL 
1.89% 
3 
Facebook 
12.66% 
4 
Google 
3.09% 
5 
Microsoft 
8.83% 
6 
Yahoo! 
0.74% 
Source of data: Yahoo! Finance 
 
 
Google 
67%
Microsoft
17%
Yahoo!
12%
Ask Network
3%
AOL, Inc.
1%
Search Engine Market Share
per comScore, April 2013 
0%
5%
10%
15%
20%
AOL
Facebook
Google
Microsoft
Yahoo!
Ratio of long-term debt to total assets
Company
Proportion of Total Assets Financed 
with Long-Term Debt

©2017, Pamela Peterson Drake 
 
69 
XY SCATTER: MARKET MODEL 
 
 
A 
B 
1 
Monthly 
return on the 
market 
Monthly 
return on 
Stock ABC 
2 
3.83% 
26.18% 
3 
-3.81% 
-14.21% 
4 
3.79% 
19.40% 
5 
4.90% 
-9.27% 
6 
-2.07% 
-0.77% 
7 
5.10% 
11.77% 
8 
-3.06% 
-4.85% 
9 
-1.00% 
7.87% 
10 
-2.29% 
-2.16% 
11 
6.20% 
2.21% 
12 
3.69% 
-1.64% 
13 
8.39% 
28.23% 
14 
-3.98% 
-16.17% 
15 
3.18% 
-8.68% 
16 
5.36% 
18.88% 
17 
-5.95% 
-34.35% 
18 
-3.90% 
-10.30% 
19 
5.16% 
27.87% 
20 
-1.71% 
-12.73% 
21 
7.58% 
0.00% 
22 
-5.11% 
-13.61% 
23 
-2.46% 
14.20% 
24 
-10.25% 
-16.70% 
25 
2.03% 
-24.40% 
 
-40%
-30%
-20%
-10%
0%
10%
20%
30%
40%
-40%
-20%
0%
20%
40%
Returns on Stock ABC
Returns on the market
Returns on a stock v. returns on the market

©2017, Pamela Peterson Drake 
 
70 
AREA: COMMON SIZE ANALYSIS 
 
Dow Chemical Company, FY2008-FY2013 
Balance Sheet: Assets 
 
FY2008 
FY2009 
FY2010 
FY2011 
FY2012 
Cash & Equivalents & Short-term Investments 
$2,800 
$2,846 
$7,039 
$5,446 
$4,318 
Receivables   
$6,856 
$9,195 
$9,044 
$9,626 
$9,679 
Inventories 
$6,036 
$6,847 
$7,087 
$7,577 
$8,476 
Other Current Assets 
$368 
$672 
$611 
$773 
$1,211 
Net Property Plant & Equipment 
$14,294 
$18,141 
$17,668 
$17,299 
$17,520 
Receivables - Long-term 
$934 
$540 
$608 
$1,316 
$468 
Long Term Investments 
$5,449 
$5,785 
$5,995 
$5,913 
$6,686 
Intangible Assets 
$4,223 
$19,080 
$18,497 
$17,991 
$17,450 
Deferred Long-term Assets 
$3,900 
$2,039 
$2,079 
$2,559 
$3,333 
Other Assets 
$614 
$792 
$960 
$724 
$464 
 
 
 
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
FY2008
FY2009
FY2010
FY2011
FY2012
Portion of Total Assets
Fiscal year (FY)
Common Size Analysis of the Assets of Dow Chemical Company
FY2008-FY2012
Other Assets
Deferred Long-term Assets
Intangible Assets
Long Term Investments
Receivables - Long-term
Net Property Plant & Equipment
Other Current Assets
Inventories
Receivables
Cash & Equivs & Short-term
Investments

©2017, Pamela Peterson Drake 
 
71 
 
SURFACE: VOLUME OF TRADING BY DAY OF THE WEEK AND MONTH OF THE YEAR 
 
Mon 
Tue 
Wed 
Thu 
Fri 
Jan 
551 
703 
741 
766 
723 
Feb 
592 
701 
708 
704 
720 
Mar 
700 
725 
717 
742 
733 
Apr 
667 
727 
750 
748 
731 
May 
640 
735 
758 
759 
704 
Jun 
628 
675 
702 
677 
706 
Jul 
589 
690 
693 
727 
648 
Aug 
589 
622 
690 
647 
624 
Sep 
664 
706 
716 
714 
695 
Oct 
652 
695 
760 
760 
744 
Nov 
650 
768 
698 
763 
599 
Dec 
598 
624 
636 
629 
645 
 
 
 
 
Mon
Tue
Wed
Thu
Fri
400
450
500
550
600
650
700
750
800
Jan
Feb
Mar
Apr
May
Jun
Jul
Aug
Sep
Oct
Nov
Dec
Day of the week
Volume of shares, in millions
Month
Volume in the S&P 500 stocks, 1950-2013,
by the day of the week and the month of the year
750-800
700-750
650-700
600-650
550-600
500-550
450-500
400-450
Source of data: Yahoo! Finance 

©2017, Pamela Peterson Drake 
 
72 
CHART DO’S AND DON’TS 
Everyone has their own style, and many companies will dictate a specific color scheme and/or style for 
graphing, so there are no hard-and-fast rules, but a few guidelines may be useful: 
1. Simpler is preferred to clutter.  
2. All axes must be labeled. 
3. Select colors that will be appropriate when the graph is printed with a black and white printer. 
4. Use font sizes appropriate for the medium. 
5. If more than one series is graphed, provide a legend. 
6. Simplify axes by removing extraneous decimal places. 
7. Only use gridlines if useful for the user. 
8. If dates are on an axis, be sure to make them understandable. 
9. Remove hash marks on axes if they are not useful (e.g., so many that they are blurring together). 
10. Use two vertical axes if the series are of different scales (e.g., turnover and profit margin, or sales 
and net income). 
11. Identify the source of your data on the chart. 
12. Do not use a dark background if the chart is to be printed.  A dark background is useful for 
presentations, however. 
13. When transferring a chart to another document (e.g., Word or PowerPoint) copy and paste as a 
Microsoft Graphic Object.  If your workbook and this other document will be separated, be sure to 
unlink these: Office Button > Prepare > Edit Links and remove the link.  The spreadsheet will then be 
embedded, but not linked. 
14. If you have blank cells in your data, Excel generally interprets these as zero values, which you likely 
do not want in your chart.  The only way to avoid these zeroes is to replace them in your data (using 
logic) as #NA.  You can place #NA in the cell that is interpreted correctly using =NA(). 
 

©2017, Pamela Peterson Drake 
 
73 
Chapter 8.  
Built-in date and time functions  
Software, such as Microsoft Excel, provide a system of specifying dates and time that allow flexible 
representation, but that also allows arithmetic operations. 
EXCEL DATES 
Formats 
Excel dates may be specified in several ways, including customizable formats.  Date formats include: 
Format 
Example 
M/D/YYYY 
5/16/2017 
M/D/YY 
5/16/17 
M/D 
5/16 
MM/DD/YYYY 
05/16/2017 
International 
16-May-17 
Month, D, YYYY 
May 16, 2017 
M-YY 
5-17 
 
Specifying M for the month produces the number from 1 to 12 that represents the month. Specifying 
MM for the month will produce a two-digit month (e.g., 06), and specifying MMM will produce a three-
character abbreviation of the month/ 
The default date representation is controlled by your selection of Regional and Language Options within 
your computer’s operating system Control Panel.  If you want to alter a date’s format in your 
spreadsheet, use the Number dialogue in the Home ribbon. 
Managing dates 
The base date for Excel is January 1, 1900.  Excel assigns a serial number (January 1, 1900 = 1) to each 
date, and then the format is used to translate the serial number into a date. 
Serial number 
Date 
1 
January 1, 1900 
30000 
February 18, 1982 
40000 
July 6, 2009 
25000 
June 11, 1968 
50000 
November 21, 2036 
 
Why use a serial number?  Because you can then do math with date: 
=October 6, 2019 + 35 
results in November 19, 2019 

©2017, Pamela Peterson Drake 
 
74 
The DATE function 
The built-in function =DATE(YEAR,MONTH,DAY) requires the three arguments (i.e., year, month, and 
day), where 
YEAR is a year any number between one and four digits.   
If the year consists of digits between 0 and 1899, this number is added to 1900.   
If the years is four digits, between 1900 and 9999, this is used as a year.   
MONTH is any month represented from 1 to 12.   
If MONTH is less than 1, Excel subtracts this from 1, providing a previous month.  
If MONTH is greater than 12, Excel adds this to the date, moving it into the next year. 
DAY is the day within a month. 
If DAY exceeds the number of days in the month, the day corresponding to the excess amount in 
the next month is provided. 
If DAY is less than 1, then it is subtracted and therefore provides a previous month’s day. 
Examples of date specifications: 
=DATE() specification 
Results in … 
  =DATE(50,8,12) 
August 12, 1950 
  =DATE(2001,2,15) 
February 15, 2001 
  =DATE(600,5,10) 
May 19, 2500 
  =DATE(2017,2,3) 
March 2, 2017 
  =DATE(2019,14,5) 
February 5, 2020 
  =DATE(2020,-2,6) 
October 6, 2019 
  =DATE(2015,12,-5) 
November 25, 2015 
 
Suppose you are given a date in C3 in the form: 
20180715 
which is not automatically translated into a date in Excel.  We can use LEFT, MID, and RIGHT to create a 
date from this representation: 
=DATE(LEFT(C3,4), MID(C3,5,2), RIGHT(C3,2)) 
The LEFT and RIGHT functions indicate the cell and how many characters to use from that cell’s 
contents.  The MID specifies the cell, the starting character, and the number of characters. 
EXCEL TIME 
The TIME function 
The TIME function consists of the hour, minute, and second: =TIME(HOUR,MINUTE,SECOND), where  
HOUR is a number from 0 to 32767. 
If HOUR is greater than 23 will be divided into portions of the 24-hour period. 

©2017, Pamela Peterson Drake 
 
75 
MINUTE is a number of 0 to 32767. 
If MINUTE is greater than 59, it will be converted to hours and minutes 
SECOND is a number from 0 to 32767.  
If SECOND is greater than 59, this will be converted into hours, minutes, and seconds, 
appropriately. 
Examples of time specifications: 
=TIME() specification 
Results in … 
=TIME(0,0,0) 
12:00:00 AM 
=TIME(5,36,45) 
5:36:45 AM 
=TIME(30,25,10) 
6:25:10 AM 
=TIME(15,45,30) 
3:45:30 PM 
=TIME(15,80,0) 
4:20:00 PM 
 
OTHER DATE AND TIME FUNCTIONS 
Excel has many useful date and time functions, including: 
Function 
What it does 
=DAYS(date1, date2) 
Calculates the number of days between DATE1 
and DATE2 (input as serial numbers or dates) 
=NOW() 
Produces the current date and time 
=TODAY() 
Produces the current date 
=WEEKDAY(SERIAL NUMBER, RETURN_TYPE) 
Provides the day of the week for a given date 
serial number, with RETURN_TYPE indicating 
whether the week begins on Sunday (1 or 
default) or another day (e.g., 2 for Monday)  
=WEEKNUM(SERIAL NUMBER, RETURN_TYPE) 
Provides the count of the week within the year. 
By default, RETURN_TYPE indicates when the 
week begins (1 is Sunday) 
=YEARFRAC(DATE1, DATE2, BASIS) 
Calculates the fraction of the year between 
DATE1 and DATE2. the BASIS is the convention 
(e.g., 0 or default is US). 
 

©2017, Pamela Peterson Drake 
 
76 
Chapter 9.  
Solver 
Solver is a Microsoft Excel function that helps you find a solution to a particular calculation, given specified 
constraints.  The elements of a Solver problem: 
1. The objective. Solver focuses on the objective, which involves a key calculation. This calculation 
may be a summation, a product, a valuation, etc., that is dependent on other cells. The objective 
may be to maximize or minimize the key value, or for the key value to be equal to some specified 
value.  
2. The independent inputs. These are values external to the problem. 
3. The decision cells. These cells, when combined with the independent cells, are involved in the key 
calculation. 
4. Any constraints. 
 
Solver is part of with Microsoft Excel and you can find it in the Data ribbon. If you do not see Solver, go to 
Excel Options > Add-ins, and then select Solver from the list if Excel Add-ins. 
As an example, suppose you have a number of capital projects, with their initial investment and net 
present value, and you have a limit on the capital budget.  You can use Solver to solve for the set of 
projects that maximize the total net present value within this budget. 

©2017, Pamela Peterson Drake 
 
77 
STEP-BY-STEP SOLVER 
Step 1: 
Set up the independent cells 
In our example, the independent cells are the initial investment and the present value of the future cash 
flows.  If we subtract the initial investment from the present value, we arrive at the net present value: 
 
Step 2:  
Set up the decision cells 
Our objective is to maximize the total net present value of selected projects. We create another variable, 
“Accept?”, which is a dummy variable: taking on a value of 1 if accepted, 0 if not accepted.  We begin with 
the variable Accept?, with zero values for each project – but this will change once we solve for the optimal 
set of projects. 

©2017, Pamela Peterson Drake 
 
78 
 
Step 3:  
Set up the key calculation 
We now need to set up the calculations for two elements: 
 
 
The total spent, which will be constrained to the budget 
 
The total net present value, which is what we want solver to maximize within the constrained 
budget. 
 
The easiest way to accomplish this is to use the SUMPRODUCT function.  SUMPRODUCT calculates the 
sum of the product of the specified arrays, which in this case are the expenditures and the Accept? binary; 
in other words, what is summed depends on whether it is accepted.   
 
Therefore, for example, for the total expenditure, 

©2017, Pamela Peterson Drake 
 
79 
 
 
And for the total net present value: 
 

©2017, Pamela Peterson Drake 
 
80 
In other words, using SUMPRODUCT will add only those net present values for accepted (Accept?=1) 
projects. 
Before we apply solver, this does not look very interesting.  
Step 4:  
Apply Solver 
Use the Data ribbon, and select Solver.  Once you select Solver, the Solver Parameters box will appear: 
 
 
 
Parameters: 
 
The target cell in this example is D21, which is the SUMPRODUCT of the NPV column and the 
Accept? column, and our goal is to maximize the total net present value. 
 
The independent values are the inputs (Initial investment and Present value of future cash flows, 
and the calculated input,   
 
The decision cells, “By Changing Cells”, are the cells in the Accept? column. 
 
The constraints are the following: 
o The SUMPRODUCT of the Initial Investment and the Accept? is less than the capital 
budget. 
o The Accept? cells are binary (that is, 0 or1). 
 

©2017, Pamela Peterson Drake 
 
81 
 
When or if this converges, you will get a status box.  The successful convergence for this problem is: 
 
 
If Solver cannot converge upon a solution, you will be notified of this.  You can then decide to either 
change the options on the convergence (that is, allow more time or iterations), or alter the constraints 
(if necessary). 
In our example, the result are: 

©2017, Pamela Peterson Drake 
 
82 
 
In other words, we should accept projects A, B, C, H, and L.  This produces a net present value of 
$380,000 on the $4 million of expenditures. 
If we change the budget to $3 million,  
 
 
we arrive at a solution of accepting projects A, B, C, D, E, F, G, L and M: 

©2017, Pamela Peterson Drake 
 
83 
 
 
REFINEMENTS 
What we just performed is a simply Solver problem.  More complex problems can have several decision 
variables involved, with many more constraints.  Consider the following possible finance applications: 
 
Solve for the depreciation method that produces a specific earnings per share target. 
 
Solve for the multiple rates in an IRR problem. 
 
Solve for the cash needed/excess in a forecasting model.  
In addition, you can: 
 
Use Formula > Name Manager to specify names for sets of cells. 
 
Make the worksheet dynamic. 
 
Save the Scenario (constraints and objective) for later use.  
 
Request that Excel show the iteration steps [Options > Show Iteration Results] 

©2017, Pamela Peterson Drake 
 
84 
Chapter 10.  Using Data Validation 
WHAT IS DATA VALIDATION? 
Data Validation is a set of tools that allows you to specify what may or may not be placed in a 
designated cell.  You will likely find Data Validation in the Data ribbon. 
The specification of what may go into a specified cell or cells may be one of the following: 
 
As you can see, it is possible to specify, for example, that the cell be a whole number, one from a list, of 
that its length is a specified number of characters.  For the Whole number, Decimal, Date, Time, and Text 
Length, you can specify whether the data be between, greater than less than, and various other relations: 

©2017, Pamela Peterson Drake 
 
85 
 
The List form of data validation allows you to create a list of possible values somewhere in the worksheet, 
and then use this as a source of a drop-down box of user choices. 
You can also specify whether there is an Input Message associated with the cell, one that pops up if the 
user hovers over the cell, and you can specify what type of error message that you would like to provide 
the user if the cell contents that the user is trying to enter do not meet the specifications. 
CREATING A DROP-DOWN BOX 
A drop-down box allows the worksheet creator to limit the choices the user makes related to some 
calculation within the worksheet. The easiest way to create the drop-down box is to specify the 
choices on one worksheet, and then the main worksheet refers to these choices. 
Consider the time value of money function, FV. This function requires several inputs:20 
=FV(RATE,NPER,PMT,PV,TYPE) 
Suppose you want to limit the user’s choices regarding each of these arguments. You would then create 
a worksheet that gives the user drop-down boxes with the choices for each of these arguments.21 
Specify the choices on a worksheet 
Using the worksheet labeled, Choices: 
                                                           
20 The “Type” indicates timing: 0 (default if this argument is left off) indicates end of period cash flows, whereas 1 
indicates beginning of the period cash flows. 
21 In the example, we have ignored the “Type”, which could be added as another choice. 

©2017, Pamela Peterson Drake 
 
86 
 
 
The headings are not necessary, but when you have lots of options, it is useful to organize and identify 
these. 
Prepare the calculation worksheet 
Including labels for the inputs and instructions assist the user: 
 
 
Create the drop-down boxes 
You do this by clicking on the target cell, and then Data > Data validation, which produces: 

©2017, Pamela Peterson Drake 
 
87 
 
 
In Allow, click on List and identify the source of the list: 
 
 
 
This produces: 
 

©2017, Pamela Peterson Drake 
 
88 
 
Repeat this for all the other choices. Once you have these choices, you then specify the FV function, 
referring to the selected cells: 
=FV(B4,B5,B6,-B7,0) 
The multiplication by -1 is because the function will return the negative value. 
Because the drop-down box is not revealed until the user clicks on it, you may want to highlight these 
cells for the user. For example: 
 
 

©2017, Pamela Peterson Drake 
 
89 
Chapter 11.  Adding ActiveX tools 
WHAT IS ACTIVEX? 
ActiveX is a set of object-oriented programming that supports what the user sees on a worksheet.22  Think 
of ActiveX as a set of code blocks that can be added to a workbook without knowing any code.  These 
blocks, known as ActiveX controls, are useful in designing interactive, dynamic user interfaces. 
ADDING ACTIVEX FUNCTIONALITY 
You can add ActiveX functionality to Microsoft Excel using Developer tools. This allows for more 
interactively and flexibility in your spreadsheet. 
Begin with a simple worksheet that uses an Excel function and one or more variables that you want the 
user to be able to change. Consider this simple example that uses the annual percentage rate, APR, and 
the frequency of compounding within a year as inputs to the EFFECT function, producing the effective 
annual rate, EAR: 
 
 
To add interactivity, use the Developer Ribbon: 
                                                           
22 OK, it is more complex than this, but think of an ActiveX as an app, and an ActiveX control as a mini-app, or 
applet. 

©2017, Pamela Peterson Drake 
 
90 
 
select Insert and choose the slider from the menu: 
 
 
 
 
Dragging and resizing the slider to the desired cell, using ALT to snap it in place produces: 

©2017, Pamela Peterson Drake 
 
91 
 
Once the slider is in the cell, you need to connect the slider with the data to be used to determine the 
range.  We do this by right-clicking on the slider the selecting Properties. This produces the properties 
menu, that you can view by category or alphabetical order: 
 
 
The key items to alter: 

©2017, Pamela Peterson Drake 
 
92 
LinkedCell 
The cell that whose value we want to change with the slider 
Min 
The smallest value, which is the extreme left arrow in the slide 
Max 
The largest value, which is the extreme right arrow in the slide 
SmallChange The increments that occur when the slider is moved slowly 
LargeChange The increments that occur when the slider is moved quickly 
 
Cosmetic changes that you can make include: 
BackColor 
ForeColor 
Height 
Width 
MousePointer 
 
For example, to keep the frequency of compounding in B5 within the range from 1 to 365, with small 
increments of 1 and large increments of 10: 
 
 

©2017, Pamela Peterson Drake 
 
93 
This produces a slider for the frequency that we can test by first getting out of Design Mode, and then 
moving the slider with the cursor: 
 
Making cosmetic changes produces: 
 
If you wish to use a slider for a non-integer, you will need to take a couple of extra steps. For example, if 
you wish to use a slider for the APR, you would need to create another cell on this or another worksheet 
(referred to as a helper cell) that has the APR as a whole number (which the slider would change), but 
have the cell that is used in EFFECT be that whole number scaled by 100.   
For example, the whole number for the APR is in cell AA4.  Cell B4 is =AA4/100: 
 

©2017, Pamela Peterson Drake 
 
94 
 
With this worksheet, the user can calculate the EAR, changing both the APR and the frequency of 
compounding. 
 
NOTES: 
1. Before testing the slider, be sure that you are no longer in the Design Mode. 
2. Sliders can be used for whole numbers only. To use values other than whole numbers, you need 
to perform additional calculations (see the example above), or use another ActiveX control, such 
as a pre-made list for a drop-down box. 
3. Sliders work in a manner similar to other ActiveX controls. Other ActiveX controls include: 
a. CommandButton, which generates a click event (that is, when the user clicks some event 
occurs, such as running a macro. 
b. ComboBox, which generates a drop-down box. 
c. CheckBox or OptionButton, both of which generate code (e.g., running a Macro) if the box 
is checked or the button selected. 

©2017, Pamela Peterson Drake 
 
95 
d. ListBox and TextBox, both of which generate a box that the user can submit text. 
e. SpinButton, which is similar to the slider demonstrated above. 
f. ToggleButton, which allows the user to select from two values. 
 
 
 
CommandButton 
Slider 

©2017, Pamela Peterson Drake 
 
96 
Chapter 12.  Creating a dynamic table and 
chart  
Using a simple financial function, we will detail how you can create a dynamic chart and table that enables 
the user to explore the results of different inputs. 
CREATING A DYNAMIC TABLE 
Consider the simple problem of calculating the future value of an amount for each period up to a specified 
number of periods, with the user inputs in the shaded boxes: 
 
 
 
Our goal is to create a table of number of periods and future value that is robust to the number of periods 
that the user insert into cell C6. 
In a static table, the number of periods is simply started at 1 and incremented by one each period. To 
make the table responsive to the user-specified number of periods, we first work on the cells for the 
number of periods, comparing the value we increment to the user input. 
Before we make a change, we have: 

©2017, Pamela Peterson Drake 
 
97 
 
We use the IF function, which has three arguments: 
=IF (
Logic
condition  , What to do if
condition is met , 
What to do if
condition is not met) 
We also employ the use of a blank, which is two double quote marks in succession: “”.23 
After the change we have: 
 
which is not complete because we have the risk of #VALUE.  To fix this issue, we consider that the cell 
above may be blank and then use the IF statement to deal with this. 
                                                           
23 The double quote marks designate a blank cell. If there is a space between the quote marks, this is not 
equivalent to a blank cell. 

©2017, Pamela Peterson Drake 
 
98 
 
 
To ensure that we do not try to add 1 to a blank cell (which generated the #VALUE! error message), we 
add an outer IF statement to check for this – if Excel looks above and finds that the cell is blank, a blank 
is then reported.  A blank is created with “” (double quotes without a space in between). 
 
What does this mean?  It means that if Excel in E10, for example, looks to the cell above (E9) and sees a 
blank, it reports a blank; otherwise, it will see if adding one will create a value exceeding the user-specified 

©2017, Pamela Peterson Drake 
 
99 
value – if adding one is still less than or equal to the user-selected number of periods, it adds one and 
otherwise reports a blank. 
Now we fix the future value column.  This is a simpler fix:  we instruct Excel to look to the cell to the left 
(e.g., in F5, looks to E5); if the cell to the left is blank, report a blank – otherwise calculate the FV. 
 
You would copy the contents of these cells to the maximum that you will permit the user to choose. How 
do you limit the user’s choice?  You can use either Data Validation (and set a minimum and a maximum) 
or you would insert a scroll bar with a linked cell to C6. 
To test if this works, simply type in a different value in C6 and see if the table changes appropriately. For 
example: 

©2017, Pamela Peterson Drake 
 
100 
 

©2017, Pamela Peterson Drake 
 
101 
CREATING A DYNAMIC CHART 
Now that we know the dynamic table is working, we need to make a dynamic chart.  This requires creating 
a Name (which is a name used to represent a cell or set of cells) that is dynamic. 
To create a dynamic name, we first go to Name manager in the Formulas ribbon: 
 
Clicking on New …, we have the following dialogue box: 
 
The default “Refers to” is the location where our cursor was last when we pull up the Name Manager.  
The Scope is either Workbook (can use the name anywhere in the workbook) or Worksheet (anywhere 
on that specified worksheet). 

©2017, Pamela Peterson Drake 
 
102 
We will name this as “future” with a workbook scope. Now comes the tricky part.  We want a dynamic 
name, not a static name.  To do this, we have to resort to using the OFFSET function.  The OFFSET function 
has five arguments (and we use only three of these): 
=OFFSET (name anchor
cell
 ,  no. of rows
in anchor   ,  no. of columns
in anchor
  ,  no. of rows 
in name   ,  number of columns
in name
) 
We will use a single cell as an anchor, so the second and third arguments will be 0.  For our application,  
 
We start with the first FV value and then grab the number of rows corresponding to the user-specified 
number of periods. 
Now that we have the name, let’s create another one for the periods: 
 
Now the part that helps create the dynamic chart. 
Insert a column chart and then in Chart Tools > Design > Select Data, let’s select the names: 

©2017, Pamela Peterson Drake 
 
103 
 
Because this is a workbook name, we include the workbook name (the scope) in front of the ! and then 
the name after the !.  Note: it is convenient to use a simple name for your workbook. If you use spaces 
in your workbook name, put the entire workbook name in single quotes.  Also, if the workbook is a 
regular workbook, you likely will using the “xlsx”; I happened to have saved my file as a macro-enable 
file, hence the “xlsm” in the name. 
Doing this for the Category axis labels: 
 
We now have a graph that is dynamic. 
 

©2017, Pamela Peterson Drake 
 
104 
 
When you have completed making both the table and the chart dynamic, test it with different values of 
the number of periods. 

©2017, Pamela Peterson Drake 
 
105 
THE FINISHED PRODUCT 
Inserting an ActiveX control for the user selection of number of periods, and cleaning up the chart with 
titles, spacing, pagination, etc., the finished product is: 
 

©2017, Pamela Peterson Drake 
 
106 
Chapter 13.  Reference functions 
Reference functions are used to locate data in large databases. For example, if you create a database of 
financial data and identify companies by their ticker symbol, you can then use the ticker symbol as the 
look-up value in the reference functions. 
The choice of the reference function depends on (1) how the database is arranged (whether it is in a 
specific order), and (2) what type of information you seek (actual data or just where the data is located). 
There are many reference functions available: 
Data lookup 
Row/Column/Area 
References to cell ranges 
Other 
CHOOSE 
GETPIVODATA 
HLOOKUP 
LOOKUP 
MATCH 
VLOOKUP 
AREAS 
COLUMN 
COLUMNS 
ROW 
ROWS 
ADDRESS 
INDEX 
INDIRECT 
OFFSET 
FORMULATEXT 
HYPERLINK 
RTD 
TRANSPOSE 
 
If we have a large database and want to retrieve specific data, we would use a data lookup function.  If, 
on the other hand, we want to know the position of a data item in the database, we would use a row or 
column function.  If we want to select a group of cells, for example, we could use INDEX, INDIRECT, or 
OFFSET.24  
 
 
                                                           
24 We use OFFSET, for example, to indicate a dynamic set of rows or columns when creating a dynamic chart. 

©2017, Pamela Peterson Drake 
 
107 
DATA LOOKUP REFERENCE FUNCTIONS 
Note: there are some variations permitted, such as leaving off the MATCH_TYPE 
Function 
Use 
HLOOKUP(LOOKUP_VALUE,TABLE_ARRAY,ROW_NUMBER,RANGE_LOOKUP, MATCH_TYPE) 
Search a row for a match to the LOOKUP_VALUE, 
then provide information in a specified row in that 
column. 
VLOOKUP(LOOKUP_VALUE,TABLE_ARRAY,COL_NUM,RANGE_LOOKUP, MATCH_TYPE) 
Search an array for a match, then provides 
information in a specified column in that same 
row. 
MATCH(LOOK_VALUE,LOOKUP_ARRAY,MATCH_TYPE) 
Locate the row number corresponding to a 
LOOKUP_VALUE 
LOOKUP(LOOKUP_VALUE, LOOKUP_VECTOR, RESULT_VECTOR) 
Locate a match to the LOOKUP_VALUE in an array 
CELL REFERENCE FUNCTIONS 
Function 
Use 
INDEX(ARRAY,ROW_NUM,COLUMN_NUM) 
Finds the value in a cell that is the intersection of 
the specified row and column. 
INDIRECT(CELL REFERENCES) 
Convert a string into a reference.  This allows you 
to use functions, such as a statistical function, 
without specifying the cell range – but instead 
allows you to calculate the cell range and then use 
the results of this as cell references. 
OFFSET(REFERENCE, ROWS, COLS, HEIGHT, WIDTH)  
Select a range of cells that is a specified number of 
rows and columns from an initial cell or range of 
cells.  The first three arguments set up the initial 
cell and/or range, and the last two select the cells 
relative to the initial cell or cells. 
 

©2017, Pamela Peterson Drake 
 
108 
We will cover briefly the most frequently used lookup functions. 
COMMONLY USED LOOKUP REFERENCE FUNCTIONS 
Lookup 
The simplest reference function is the LOOKUP function.  You simply indicate the LOOKUP value, specify 
what column or row that you want searched, and then indicate the column or row of the data that you 
want to retrieve. 
For example, suppose that you want to retrieve the sales and net income for the Pear Company.  The 
LOOKUP cell is A1, and you search column A for a match and then retrieve the corresponding data in 
column B. 
 
 
A 
B 
C 
1 
Pear  
=LOOKUP(A1,$A$3:$A$6,$B$3:$B$6) =LOOKUP(A1,$A$3:$A$6,$C$3:$C$6) 
2 
 
 
 
3 
Company 
Sales 
Net income 
4 
Apple 
$1,000 
$30 
5 
Pear 
$500 
$10 
6 
Peach 
$250 
$20 
 
VLOOKUP 
We use VLOOKUP when we search one column, find a match, and then go across to retrieve specific 
data in that row. For example, we may want to find the Sales for the company named in cell A1: 
 
 
A 
B 
C 
1 
Pear  
=VLOOKUP($A$1,$A$3:$C$6,2,FALSE) 
 
2 
 
 
 
3 
Company 
Sales 
Net income 
4 
Apple 
$1,000 
$30 
5 
Pear 
$500 
$10 
6 
Peach 
$250 
$20 
 
The range $A$3:$C$6 indicates the entire search area (an array), though we are going to first search the 
first column of this area for a match, then count columns over in this area to retrieve the data.  Because 
Sales is the second column in the search area, we use a 2 for the third argument.  And because we want 
an exact match in column A of the search area, we specify FALSE. 
We use HLOOKUP when we look across columns for a match, and then seek data that is in that column. 
In other words, it is used when the database, in our example, has the companies we want to search on 
in columns, and the different data items are in the different rows. 
There are several issues of concern in using LOOKUP, VLOOKUP and HLOOKUP: 

©2017, Pamela Peterson Drake 
 
109 
1. The row or column that is searched for a match to the LOOKUP variable must be in 
alphanumeric order because Excel will stop searching once a value/alphanumeric is found that 
exceeds the LOOKUP variable. 
2. You need to specify whether you want a match or will take the closest value in the third 
argument. 
3. The row or column searched for a match must be the first row or column in the array. 
Failure to abide by these cautions may result in either an erroneous match (which you would only 
realize if you had checked the database), or in an error message. 
The MATCH function 
Basic use 
The MATCH function is useful when pulling data from a large database in which the data is not sorted in 
a particular order.  The MATCH function indicates the position number in an array, and has three 
arguments: 
=MATCH(object of match, array to find the match, type of match) 
1. The object of the match is what you are trying to match, 
2. The array is where you expect to find the match, and 
3. The type of match is whether you want an exact match (type = 0) or largest value that is less 
than or equal to (type = 1 or any number 1 or above), or the smallest value that is greater than 
or equal to the value (type = -1).  
The position number is not the row number unless the array begins in row 1; otherwise, a slight 
adjustment is necessary.  Matching can be frustrating because the coding is awkward for the type of 
match. 
Consider the example, with the row number calculated as the match + 6: 
 
For example, the code in F8 is: 
=MATCH($C$3,$C$7:$C$16,E8) 

©2017, Pamela Peterson Drake 
 
110 
and the code in G8 is: 
=MATCH($C$3,$C$7:$C$16,E8)+6 . 
The matching works well with the exact match and with the largest value less than (which produces the 
last value of the item in the database.  It does not work well with the type = -1, which requires it to look 
for the smallest value that is greater than or equal to the object, MNO. 
You can see the same mechanisms work if we are looking for a match to the year: 
 
For example, the code in cell F7 is =MATCH($C$3,$B$7:$B$16,E7). 
Excel locates the first occurrence and the last occurrence of 2011. The type = -1 is ineffective in this 
example. 
Matching on two criteria 
What if we want to match on two criteria (e.g., year and company)?  We would use MATCH a bit differently 
– using code to specify an intersection. 
Suppose we want to match on both the company name and the year: 

©2017, Pamela Peterson Drake 
 
111 
 
The way we do this takes two steps: 
Step 1: Specify the MATCH statement, using “&” to indicate that we want matches on two objects that 
will appear on two arrays, keeping the arrays in order of the objects: 
=MATCH($C$4&$C$3,$B$7:$B$16&$C$7:$C$16) 
Step 2: Because this involves the two arrays, this is an “array” formula, and we must use CTRL-SHIFT-
ENTER instead of ENTER once we insert the code. To do otherwise results in a #VALUE! error 
message. Once done correctly, the equation will then appear as:25 
{=MATCH($C$4&$C$3,$B$7:$B$16&$C$7:$C$16)} 
Effective use of MATCH 
Match provides the array position, but to use it we need to transform it to a row number and then we 
may want to pull data from another column. 
Suppose we have the following data: 
                                                           
25 Note that we do not type in the { }, but rather Excel inserts them in the formula bar to indicate that this is an 
array formula. 

©2017, Pamela Peterson Drake 
 
112 
 
How do we pull the Assets for a specific company and year?  We can use the INDEX function along with 
the MATCH to identify the item: 
=INDEX($D$7:$D$16,MATCH($C$4&$C$3,$B$7:$B$16&$C$7:$C$16,0)) 
Be sure to use the CTRL-SHIFT-ENTER combination instead of ENTER once you type this into the Formula 
bar.  The result is the total asset amount in F7 for company MNO and year 2011: 
 

©2017, Pamela Peterson Drake 
 
113 
 
Goal 
Select data from a database that 
matches a specific choice in a key 
variable  (e.g., company name, 
client number, ticker symbol)
Data is not sorted and 
cannot be sorted
Use INDEX and MATCH
Data can be sorted by 
key variable
Key variable is left-
most of all variables 
needed to be used
Use VLOOKUP
Key variable is not left-
most of all variables 
needed to be used
Use LOOKUP
Microsoft Excel’s  
Lookup functions 
When to use VLOOKUP, LOOKUP, and INDEX-MATCH? 

114  
 
 
Chapter 14.  PivotTables 
THE BASICS 
Microsoft's Excel 's PivotTables are summaries and/or rearrangements  of data, allowing you to see the "big picture" 
of a set of data; especially useful is the ability to create a cross-tabulation of your data with a few clicks.  You can 
also use PivotTables to filter and organize your data. 
PivotTables work from the variable names (e.g., column headings). Once you have your data, the basic procedure is 
to Insert >  PivotTable and then use the wizard to create your table.   
 
Key elements: 
 
The data that you want to use is the source data. 
 
The variables are fields. 
 
Entries or data items are items. 
 
There are different field types: row fields, column fields, page fields and data fields. 
 
The "Dos and Do nots": 
 
Do not have blank columns or rows in the source data. 
 
Do use the first row of the source data for variable names that will become fields. 
 
Do calculate any new variables before inserting the PivotTable. It is much easier to perform the calculations 
in the worksheet before inserting the PivotTable than after (though adding fields can be done as you create 
the PivotTable). 
 
Do consider using one of the many table designs available within PivotTable style gallery [PivotTable Tools > 
Options and Design > Design] 
•Variable names in first 
row
•Data need not be sorted
Prepare the data
•Follow the Create 
PivotTable dialogue
•Specify data range and 
where you want the new 
table
Insert a PivotTable
•Which variable(s) are in 
columns?
•Which variable(s) are in 
rows?
•Which statistics do you 
need?
Specify the contents 
of the new table

115  
 
 
STEP-BY-STEP PIVOTTABLES 
Step 1:  
Get the source data ready 
Make sure that the data is in contiguous columns and rows; in other words, do not have blank columns or rows 
within the data range that you want to analyze. 
Consider data downloaded from Standard & Poor's Compustat for five companies over fiscal years from 1980 
through 2008: 
 
 
Step 2:  
Insert a PivotTable 
You insert a PivotTable by using Insert > PivotTable: 
 
 
You then specify the source data and whether you want the PivotTable to be on the same worksheet (with the 
cursor position as the default), or on a new worksheet: 

116  
 
 
 
Step 3:  
Build the table 
When you begin to build the table, you are provided with a field list and areas: 
 
If the field list box does not appear, click within the instruction box (the left most box above). 
If you check the box aside the fields, they will appear in the rows, columns, and values boxes, with Excel guessing 
where you want them.  Feel free to rearrange the variables by dragging them where they should go.  For example, if 
we want the left-most column to be the company names, with the operating return on assets for each fiscal year 
across the columns:  
Field list box 

117  
 
 
 
PivotTables automatically provides grand totals.  If you don't want these, go to PivotTable Tools > Options > 
Options > Totals & Filters and uncheck the box(ex): 
 
 
Step 4:  
Decide on what you want 
The reason you use PivotTables is to help you better understand the data. Therefore, you want to make sure that you 
know how you want the data organized, in terms of variables, rows, columns, and statistics. 

118  
 
 
 
 
Note that you can choose alternative fields and format presentations: 

 

 

 

 
 
It doesn't matter which you choose.  Just check the fields you want to use, and drag them to the row, column, or 
values areas. 
Step 5:  
Create a PivotChart 
In PivotChart Tools > Options, select PivotChart.  You select the type of chart, and Microsoft Excel will create the 
default chart, that you can then modify: 
 

119  
 
 
 

120  
 
 
Chapter 15.  VBA Basics 
WHAT IS VBA? 
VBA is Visual Basic for Applications, which is a programming language for Excel and other Microsoft Office products.  
In VBA, the user can design their own functions, which are referred to as user-defined functions, or UDFs.  Using a 
macro in VBA, you can automate a process, which is useful for repetitive, detailed calculations.  You can even 
connect Office products, putting a chart from Excel into a PowerPoint presentation. 
WHY USE A MACRO OR A FUNCTION? 
Macros and functions help you with repetitive tasks.  Need to calculate the semi-variance on a regular basis? A 
function can help. Need your worksheets to conform to a particular style guide? A macro can help. Want to 
calculate the Black-Scholes value of an option given the five inputs without having to do all the tedious calculations?  
A function or macro can help. Want a chart to look a certain way without having to do all that tedious formatting 
each time you create a chart? A macro can help. 
What is the difference between a macro and a user-defined function? 
 
A macro can perform several tasks in one run, creating one or more values, formatting one of more cells, 
etc., at a single call.  
 
A user-defined function is used to calculate a single value.   
 
Both macros and functions can be added into your version of Excel so that you do not have to find the 
original worksheet that you used to create these each time. 
 
Both macros and functions use VBA programming and pass values back to the worksheet through the ( ) in 
the first line of the coding. 
 
You can run a macro through a button, through Developer > Visual Basic, or Developer > Macros, or by 
adding it to your Quick Access ribbon or Customize a ribbon. 
 
You access a function by typing = in a cell and then selecting the function.26 
HOW DO YOU GET STARTED? 
You begin writing your macro or function by first going to Developer > Visual Basic. once there, Insert > Module, and 
your blank canvas appears.  If you have more than one Excel workbook open at a time, there will be a “project” open 
for each one.  Your module will be located, by default, in the workbook that you had open and active before Developer 
> Visual Basic.  When first starting out, simplify your life by having only one workbook open.   
Keep in mind that any macro or function in any open workbook is available for execution from the Visual Basic 
workspace.  This also mean that you need to take care when running macros not to “clobber” an innocent worksheet 
– make sure you know which worksheet is open and active.27   
                                                           
26 If you use lower-case letters in your function, you can easily identify these when you start typing beyond the = sign. 
27 You can be safer if you explicitly indicate the worksheet you want active using the Worksheets(“Sheet1”).Activate command. 

121  
 
 
BASIC STRUCTURE OF A MACRO OR FUNCTION 
A macro or user-defined function has a basic structure of: 
Macro 
User-defined function 
Sub name 
Dim variable As type 
. 
. 
. 
Logic 
. 
. 
. 
End Sub 
Function name 
Dim variable As type 
. 
. 
. 
Logic 
. 
. 
. 
End Function 
 
A few notes to keep in mind: 
 
Upper and lower case do not matter.  VBA will automatically capitalize what it wants to and leave the rest 
to your discretion. 
 
Spaces and alignment do not matter if functions and variable names are separated by a space as required.  
You can line everything up to the left margin or use indentation.  Programmers tend to indent related 
matter, but this is just a style issue.   
 
Blank lines do not matter in the operation of your code.  Use these if you would to help in debugging your 
program, but these are not necessary. 
 
Comments are made by putting a single quote ‘ on the left of the line – the program then ignores everything 
in that line after (and turns it green, so you know it is ignored).  Comments are useful so that when you look 
back months later you will know what you were trying to do. 
 
Running the program requires you to either go to RUN in the top ribbon of VBA or click on the green box.  If 
you have an error, the program terminates, turns a suspect code red, and cannot be run again until you 
BREAK in the top ribbon.  Note that the red is helpful, but the error may be in the code above the red, not 
necessarily in the red-colored code. 
Declaring types of variables 
The DIM statement identifies the type of variable, which can simplify calculations or other tasks. While it is optional, 
it is also useful. 
DIM variable As type 
Command 
Type 
As Integer 
A whole number 
As Boolean 
A dichotomous variable (that is, takes on one of two values 
As Double 
A double-precision, floating point variable 
As Date 
As an Excel date 
As String 
As an array 

122  
 
 
Refer to a cell 
There are multiple ways of referring to cells in a worksheet.  Suppose you want to refer to cell B3 in your program: 
Method 
Syntax 
Example 
Cells 
Cells(row number, column number) 
Cells(3,2) 
Range 
Range(“address”) 
Range(“B3”) 
Loops for repetitive tasks 
You can loop within a macro or function, performing the same calculation or function on each specified observation.  
A loop performs the calculation on successive elements in an array until the end is specified, such as with DO UNTIL 
a specified condition is met or FOR using the increment variable and NEXT.   
Suppose you want to add all the values in the array X:  
Using DO UNTIL 
Using FOR 
DIM i As Integer 
i = 1 
sum = 0 
DO UNTIL i > 10 
  sum = sum + X(i) 
i = i + 1 
LOOP 
DIM i As Integer 
sum = 0 
For i = 1 to 10 
  sum = sum + X(i) 
Next i 
 
Though this example has fixed start and end points (that is, 1 and 10), but we could have just as easily made these 
variables. 
You can have loops within loops (e.g., perform the operation on both rows and columns of the array), and you can 
have the program exit a loop under specific conditions.  You can even program the loop to perform operations on 
whole worksheets or workbooks. 
Select workbook, worksheet, cell as the Active work area 
The default workbook, worksheet, or cell that is used in a macro is what is active at the time the macro is called.  
You can change this (or simply declare it just in case) using the .Activate function.  Suppose that the worksheet 
name is Data and that the workbook name is Sample: 
Active the workbook: 
 
Workbooks(“Sample”).Activate 
Activate the worksheet:  
Worksheets(“Data”).Activate 
VBA works a bit different with cells.   
Select a single cell: 
 
Range (“B2”).Select 
Select a range of cells:  
Range(“B3:B6”).Select 
has the same effect as if you selected this cell or range of cells in the worksheet with your mouse. 
For example, if you wanted to copy and paste some cells from B1:B3 to D4:D6: 
Range("B1:B3").Select 
Selection.Copy 

123  
 
 
Range("D4").Select 
ActiveSheet.Paste 
Just as when you copy and paste in a workbook, only the first paste cell need be indicated. 
Create interaction with the user 
There are a number of ways to interact with the user.  Two common methods are the message box and the input 
box. 
Message box 
The message box simply creates a pop-up box with whatever you put between the quote marks: 
MsgBox (“Hello world”) 
Input box 
The InputBox is a way of getting information from the user, that you can then use in a calculation and/or put in a 
worksheet cell. 
age = InputBox(“How old are you?”) 
cells(2,3) = age 
Having a conversation with the user 
You can combine the MsgBox and the InputBox to create a useful conversation.  Asking for a name and then using it 
in the conversation is one way of interacting. 
DIM nam as String 
Nam=InputBox(“Please enter your name”) 
MsgBox (“Hi there “,& nam & “. Glad to meet you”) 
Other ways to interact include gathering information using InputBox, performing a calculation, and then returning 
the results in a MsgBox. 
 

124  
 
 
EXAMPLES 
Example 1: Using MsgBox and InputBox 
Sub BMI_calculator() 
 
Dim str As String 
 
MsgBox "Hello", , "BMI Calculator" 
 
Height = InputBox("What is your height in inches (e.g., 6 feet report 72)?", "The first of two questions") 
Weight = InputBox("What is your weight?", "The second question") 
 
wk = Weight * 0.45359237 
hm = Height * 0.0254 
 
bmi = wk / (hm ^ 2) 
 
Cells(1, 1) = "Body mass calculator" 
Cells(3, 1) = "Weight in kilograms" 
Cells(4, 1) = "Height in meters" 
Cells(6, 1) = "Your BMI is = " 
 
Cells(3, 2) = Format(wk, "##00.0000") 
Cells(4, 2) = Format(hm, "###0.0000") 
Cells(6, 2) = Format(bmi, "##00.0000") 
 
Columns("A:A").ColumnWidth = 18 
 
If bmi < 18.5 Then str = "excellent." 
If bmi > 18.5 And bmi < 24.9 Then str = "normal." 
If bmi > 24.9 Then str = "higher than normal." 
 
MsgBox "Your BMI  " & " " & Format(bmi, "##0.00") & " which is " & str, vbInformation, " BMI calculator" 
 
End Sub 
 
 

125  
 
 
Example 2: Function to calculate the compounded value of $100 
Function valueof100(r As Range) 
Dim i As Integer 
Dim n As Integer 
 
'Initialize variables 
 
n = Application.Count(r) 
Value = 100 
 
'Compound values 
 
For i = 1 To n 
  Value = Value * (1 + r(i)) 
Next i 
 
'Send back to worksheet 
 
valueof100 = Format(Value, "$###00.00") 
 
End Function 
 

126  
 
 
Example 3: Loan amortization with user interrogatory 
Sub Loan() 
Dim r 
Dim intrate 
 
'Activate and label worksheet, and clear the worksheet of any other data 
 
Worksheets("Loan").Activate 
Sheets("Loan").Cells.ClearContents 
 
‘Create a title by merging cells in the first row 
 
Cells(1, 1) = "Loan amortization" 
Worksheets("Loan").Range("A1:E1").Select 
  With Selection.Font 
    .Size = 14 
    .Shadow = True 
  End With 
  With Selection.Merge 
  End With 
 
'Set column widths 
 
  Columns("A:A").ColumnWidth = 18 
  Columns("B:F").ColumnWidth = 15 
 
'Ask the user for information 
 
  r = (InputBox("What is your interest rate in whole numbers (e.g., 5 for 5%)") / 100) 
  mature = InputBox("What is the loan life in months?") 
  amount = InputBox("What is the amount of the loan") 
 
'Put the information in the worksheet 
 
  Cells(4, 1) = "Interest rate" 
  Cells(5, 1) = "Life of the loan" 
  Cells(6, 1) = "Amount of the loan" 
  Cells(8, 1) = "Payment" 
 
  Cells(4, 2) = Format(r, "Percent") 
  Cells(5, 2) = mature 
  Cells(6, 2) = Format(Amount, "$####0.00") 
 
'Calculate and report the payment 
 
payment = -1 * pmt(r / 12, mature, amount, 0, 0) 
Cells(8, 2) = Format(payment, "$####0.00") 

127  
 
 
 
'Get the loan amortization table ready 
‘outrow is the row number in the worksheet where the table begins 
 
  outrow = 10 
  Cells(10, 1) = "Payment number" 
  Cells(10, 2) = "Beginning balance" 
  Cells(10, 3) = "Payment" 
  Cells(10, 4) = "Interest" 
  Cells(10, 5) = "Principal repayment" 
  Cells(10, 6) = "Ending balance" 
  Worksheets("Loan").Range("A10:F10").WrapText = True 
  Range("A10:f10").HorizontalAlignment = xlCenter 
 
  begbal = Amount 
 
'Amortize the loan one month at a time (num is the month) 
 
  For num = 1 To mature 
     interest = begbal * r / 12 
     principal = payment - interest 
     endbal = begbal - principal 
 
  Cells(outrow + num, 1).Value = num 
  Cells(outrow + num, 2).Value = begbal 
  Cells(outrow + num, 3).Value = payment 
  Cells(outrow + num, 4).Value = interest 
  Cells(outrow + num, 5).Value = principal 
  Cells(outrow + num, 6).Value = endbal 
 
  begbal = endbal 
  Next num 
 
End Sub 
 

128  
 
 
Chapter 16.  Macros for finance applications 
A macro is snippet of code that instructs the software (e.g., Microsoft Excel) to perform an operation or a series of 
operations.28  Macros are most useful when you have repetitive tasks or when you want to reuse a set of operations 
for different worksheets or workbooks.29  You can create a macro, use it, store it, and then use it again, and again.  
RECORDING A MACRO V. USING VBA 
You can create a Macro by recording operations that you code directly in a worksheet, or by using a set of Visual 
Basic code and programming these operations.  In either case, you need to enable Macros in Microsoft Excel. 
RECORDING A MACRO 
USING VBA 
 
 
 
                                                           
28 “Macro” is short for “macroinstruction”, which is a set of computer code that performs a task or process, which can be used 
over and over again. 
29 A macro is sometimes referred to as a SUB procedure, which is derived from the use of subroutines in programming that 
performed a specific task, but could be used by other programs.  A macro can be “called” (or used) by another macro, and 
hence is used as a subroutine. 
Save the workbook as a Macro-
enabled workbook
Alter Macro security setting to 
allow Macros
Start recording the Macro
Perform calculations in the 
worksheet that you want to record 
within the Macro
Stop recording
Use Macro, applying the CTRL+ key 
or by using Macros, select the 
Macro, and then Run
Save the workbook as a Macro-
enabled workbook
Alter the Macro security setting to 
allow Macros
Go to the Visual Basic program via 
Developer and then Insert > Module
Enter your VBA code
Run your VBA code to make sure it 
works
Save the Macro (File > Save)

129  
 
 
Include the Developer ribbon 
If Developer does not appear on the Ribbon in Excel, go to Excel Options and in the Popular section, check the box 
for “Show Developer tab in the Ribbon”: 
 
 
Save as a Microsoft Excel Macro-Enabled Workbook 
When you begin your project, be sure to save the workbook as Macro-Enabled.  This is required. 
 
Enable Macros 
Using the Developer portion of the Ribbon, 

130  
 
 
 
 
check the appropriate setting to enable all macros: 
 
HOW TO RECORD A MACRO 
Recording a macro is quite simple: you start recording, perform the operation(s), and then you stop recording.  To 
record a Macro, simply click on the Record Macro in the Developer Ribbon: 
 
When you record a Macro, you will be asked to  
 
name the Macro,  
 
provide the short-cut key,  
 
identify where the Macro should be stored, and  
 
provide a description of the Macro (optional, but useful) 

131  
 
 
 
 
Clinking on OK and returns you to the worksheet. Place the cursor in the cell (or highlight a group of cells) that you 
want the calculation and then type in the short-cut keys (e.g., CTRL v): 
 
If you want to run the Macro again, click on the link to Macros in the Ribbon, select the Macro in the list of Macro 
names, and then Run: 

132  
 
 
 
This produces: 
 
HOW TO USE VBA TO CREATE A MACRO 
You can use VBA to create a macro, which allows you to produce and test a set of code to perform functions.  An 
advantage of creating such a macro is that you can store the macro and use it on many different worksheets. 
The first step is to set up the destination worksheet, e.g.,: 

133  
 
 
 
Clicking on the link to Visual Basic in the Developer Ribbon,  
 
you enter Visual Basic: 
 
 
When you Insert > Module, a blank workspace is created: 

134  
 
 
 
 
You then place your code in the workplace: 
 
You run the program by either using the green arrow or Run in the ribbon, which produces: 
 
If your program does not run, you can “Step in” to your program using F8, seeing each step and diagnosing any 
programming errors. 

135  
 
 
Hint: An easy way to learn about coding using VBA is to record a Macro and then Edit that Macro in Visual Basic, 
which will produce the code behind your recorded operations. 
VBA code highlights 
1. The VBA coding starts with Sub and the name of the macro, and end with End Sub.  You name the Macro 
using the Sub command. For example, if you name your Macro Tree, 
Sub Tree ( ) 
. 
. 
End Sub 
The Macro editor will add the ( ) after the name and will automatically produce the End Sub at the end of 
the coding. 
2. You can refer to cells in a worksheet using several methods. The easiest is probably using Cells(row,column). 
3. You can execute repetitive tasks using the For or the Do approaches.  If, for example, you want to add 
values from columns B and C, placing the results in column A, for 10 observations in rows 1 through 10, you 
have a couple ways to do this: 
 
Using For 
Using Do While 
FOR J = 1 to 10 
Cells(J,1)=Cells(J,2)+Cells(J,3) 
Next 
 
J = 1 
DO WHILE J < 10 
Cells(J,1)=Cells(J,2)+Cells(J,3) 
J=J+1 
Loop 

136  
 
 
VBA EXAMPLES 
Calculate the present value 
This macro is useful for calculating the present value for specified interest rates, given the future value, the number 
of payments, and the periodic cash flow. 
Some notes about this macro: 
 
The present value function refers to the following arguments: 
PV(interest rate, number of periods, periodic cash flow, future value). 
o The interest rate is one in the list in cells A9 through A29; 
 
The number of periods is in cell B5,  
 
the periodic cash flow is in B6, 
 
the future value is in B4. 
“Cells” refers to the row and column location of a cell.  For example, Cells(3,4) is cell D3, and Cells (4,3) is cell C4.  
Sub PVMacro() 
For x = 9 To 29 
  Cells(x, 2) = PV(Cells(x, 1), Cells(5, 2), Cells(6, 2), Cells(4, 2)) * -1 
  Cells(x, 2) = Format(Cells(x, 2), "Currency") 
  Next 
End Sub 
Calculate the present and future values  
This macro is useful for calculating present and future values over a range of interest rates.  Some notes on this 
macro: 
 
The range of interest rates is in the worksheet in cell B9 (the minimum) and B10 (the maximum) 
 
The lump-sum is in B4. 
 
The amount of the periodic cash flow is in B5 
 
The number of periods is in B6 
 
The output is in columns D, E and F, with the number of rows dependent on the requested interest rate 
range.  The first row of results is the third row. 
 
Sub TVM() 
X = (Cells(9, 2) * 100) 
Y = (Cells(10, 2) * 100) 
Z = Y - X + 1 
i = Cells(9, 2) 
For m = 3 To (Z + 2) 
  Cells(m, 4) = i 
  Cells(m, 5) = PV(Cells(m, 4), Cells(6, 2), Cells(5, 2), Cells(4, 2)) * -1 
  Cells(m, 6) = FV(Cells(m, 4), Cells(6, 2), Cells(5, 2), Cells(4, 2)) * -1 
  i = i + 0.01 
  Next 
End Sub 

137  
 
 
WHY WRITE A MACRO IF YOU CAN JUST RECORD A MACRO? 
It would be a simple task to simply record a macro and not have to deal with any VBA, but that is not the way to create 
good quality macros.  The problems with recording a macro rather than using the do-it-yourself macro (DIY macro) 
are many, including: 
1. The recorder records every click and turns each one into code, even if you did not mean to click the mouse 
during the recording.  Recording a macro requires performing the task or tasks flawlessly. 
2. The recorded macro has many more lines of code than the more efficient DIY macro.  When you go in to 
edit the macro, which is inevitable, will you be able to make the appropriate adjustments to the code?  
Writing the code yourself allows you to put in comments that will help remind you of what you were doing 
with the particular code. 
3. If data is being read and the data is not of the exact dimensions of that used when recording, the macro will 
produce bad results. For example, if the macro was recorded using a dataset of 11 firms, but there are 12 
firms when you try to use the recorded macro, you will get bad results (how bad depends on the logic and 
data). 
4. The recorded macro may fail when used on different data because the logic of avoiding missing values, 
divide by zero, etc., is not built-into the recorded macro, but can be built-into the DIY macro. 
5. The default setting in recording may be relative references (R1C1 reference style).  First, are you ready to 
dive into a macro written with relative references? Second, if the cursor is in a different position to rerun 
the macro than when you recorded the macro, strange results may occur.30 
6. Never use AutoSum for a recorded macro because the macro will hard-code the sum, which is a problem 
when using the recorded macro on another set of data. 
 
So, if there seem to be problems with recording a macro, why bother?  Because there are few reliable reference sites 
for VBA code, you could record a single task and see how this appears in the code.  
 
 
                                                           
30 The R1C1 is a relative reference style, whereas D3 and Cells (3,4) are absolute references.  

138  
 
 
Chapter 17.  Creating a user-defined function 
WHAT ARE USER-DEFINED FUNCTIONS? 
A user-defined function, or UDF, is a set of code written in Visual Basic to perform a task and return a single value or 
text.  Just as Excel functions [e.g., AVERAGE(), VLOOKUP() and SLOPE()] operate, we call the function either from the 
worksheet, using the “=”, or within a macro. 
Consider the following function that calculates the geometric mean return: 
Function georet(a As Range) 
 
    n = Application.Count(a) 
    Product = 1 
    For i = 1 To n 
       Product = Product * (1 + a(i)) 
    Next i 
     
    georet = (Product ^ (1 / n)) - 1 
 
End Function 
 
To use it in a program with the file containing the functions open on our desktop, we simply type the equal sign in a 
cell, followed by the name of the function, with the required data referred to in the parentheses, ( ).  For example, 
suppose we want to calculate the geometric mean return in cell B2 of the data in cells B5:B10. In cell B2 we type: 
=georet(B5:B10) 
and the result will be produced in B2: 
 

139  
 
 
A few notes about functions: 
1. The function name (the word that follows the word “Function” in the first line) should be something other 
than an Excel function, should not contain any blanks, and should be descriptive of the function. 
Hint: If you use lowercase names, you will be able to distinguish them from Excel functions, which are 
comprised of all uppercase letters. 
2. The variable or variables that go into the function are in parentheses, ( ), following the name. 
Hint: Make these descriptive/obvious.   
Hint: If you forget what goes in ( ), use CTRL-SHIFT-A after entering the equal sign and the name of the 
function; the names of the inputs will be displayed. 
3. The name of the function is the variable that takes on the value from the function. 
In the example, the range of data is sent to the function, and then the georet is calculated in the function 
and fed back into the worksheet where the function was “called” or referenced.  
 
4. For complex calculations, perform a test calculation to verify the accuracy of your function. Mistakes/typos 
happen and can affect the results. 
Dissecting a function 
Functions are similar to macros because they are both written in VB.  The primary difference is that a function is 
simpler. 
Function georet(a As Range) 
The name of the function is “georet” and the variable “a” is an array 
  n = Application.Count(a) 
n is the number of observations in the array a 
  Product = 1 
The variable Product is initialized to 1.0 
  For i = 1 To n 
Begins the loop from 1 to the number of observations 
     Product = Product * (1 + a(i)) 
Compounds the returns by adding one to the return and multiplying  
     Next i 
Continues the loop until n observations 
  georet = (Product ^ (1 / n)) – 1 
Calculates the geometric mean return 
End Function 
 
 
CREATING A FUNCTION 
The process is similar to creating a macro. First make sure that the DEVELOPER ribbon is checked in FILE > OPTIONS 
> Customize ribbon. 
Using the DEVELOPER ribbon: 
Use the function in a cell 
on the worksheet
Data in ( ) feeds 
into function for 
calculation
Function returns 
value into 
worksheet cell

140  
 
 
 
If you want to add your function as an Excel Add-in, save your file as an Excel Add-in (choose from the saving menu) 
and then FILE > OPTIONS > Add-ins > Excel-Add-ins and then check the box for your file of functions.  Once added in, 
you do not need the separate file that created the function – it will always be with the Excel program on that 
computer. 
EXAMPLES OF FUNCTIONS 
Harmonic mean return 
Function harm(a As Range) 
     
    n = Application.Count(a) 
    Sum = 0 
    For i = 1 To n 
       Sum = Sum + (1 / (1 + a(i))) 
    Next i 
         
    harm = (n / Sum) - 1 
         
End Function 
 
Convert a date in YYYYMMDD form to an Excel date 
Function dateconv(e  As String) 
 
y = Left(e, 4) 
m = Mid(e, 5, 2) 
d = Right(e, 2) 
 
dateconv = DateSerial(y, m, d) 
 
End Function 
 
Black-Scholes option pricing model 
Function BSCall(S, X, r, t, sigma) 
 
Open VB:
DEVELOPER > Visual 
Basic
Insert a module:
Insert > Module
Type in the code for 
your function
Return to your 
worksheet and save 
the file as a macro-
enabled file 
Use the function, 
typing the equal sign 
and the name of the 
function

141  
 
 
Dim ert 
Dim D1, D2, ND1, ND2 
 
ert = Exp(-r * t) 
 
D1 = ((Log(S / X) + (r + (0.5 * sigma ^ 2) * t))) / (sigma * Sqr(t)) 
D2 = ((Log(S / X) + (r - (0.5 * sigma ^ 2) * t))) / (sigma * Sqr(t)) 
 
ND1 = Application.NormSDist(D1) 
ND2 = Application.NormSDist(D2) 
 
BSCall = (S * ND1) - (X * ert * ND2) 
 
End Function 
 

142  
 
 
Chapter 18.  Anatomy of a Solver macro 
Solver is a function available in Microsoft Excel that enables you to find optimal solutions to a problem.  A Solver 
macro is a set of VBA code that performs the Solver optimization function, but without the need for user interaction 
and set up.  The problem can be any number of problems in finance, such as portfolio optimization, solving for the z-
spread on bonds, or selecting the optimal capital projects given a financially-constrained budget. 
Consider the problem of solving for the weights applied to a portfolio problem such that the beta of the portfolio is 
equal to a user specified value.  Suppose we have the following stocks and betas: 
 
We want Solver to choose the weights applied to each stock in the portfolio such that the weights sum to 100% 
invested.  
We also want the user to choose the level of market risk for the portfolio to meet her risk tolerance. The goal is the 
portfolio beta is what the user/investor wants, so we need to build-in the portfolio beta math into the worksheet: 
weight each beta by the portfolio weight and add up; this sum should be equal to what the user wants.31 
Let us also constrain the problem so that we have no more than a user-specified percent invested in one stock (in 
other words, each weight must be < 20%). 
So how do we do this? We would first put the choice and constraint elements into the worksheet, e.g., 
                                                           
31 A portfolio’s beta is the weighted average of the betas in the portfolio, where the weights sum to one. 

143  
 
 
 
 
Using built-in Solver, Data > Solver: 
 

144  
 
 
The result is: 
 
 
The user can change the two cells C4 and C5 and then simply rerun Solver. 
USING A MACRO WITH SOLVER 
We can use a macro with Solver also, where we program the Solver objective function and constraints in the 
background, permitting the user to change the inputs and then simply press of button to run the macro.32  Before 
starting, be sure to save your file as a macro-enable Excel workbook. 
The first step is to open up Visual Basic and insert a Module:33 
                                                           
32 If you do not already have the Developer ribbon in Excel, go to File > Options > Customize Ribbon and check the box for 
Developer. 
33 If you already have other macro-enabled files open, be sure to click on the section in the Project Window (the left-most 
window) that pertains to the workbook you are working on – otherwise when you insert a module, it may end up elsewhere. 

145  
 
 
 
Let’s call this macro “Solving”: 
 
 
We must make sure that Solver is ready to go on the computer, so be sure to go to Tools > References and make 
sure the Solver is checked: 
 
What if the box is not checked?  VBA will not recognize your first Solver code and therefore will not run. 

146  
 
 
A Solver macro has a few required parts: 
Solverreset 
which clears out any information already stored in Solver 
Solverok 
which is the objective function specification 
Solveradd 
which is where we specify the constraints 
Solversolve 
which is where we instruct Excel to run Solver 
For our problem at hand, the solver macro is: 
Sub solving() 
Solverreset 
Solverok setcell:="$G$24", maxminval:=3, valueof:=0, bychange:="$D$8:$D$21", _ 
  engine:=1, enginedesc:="GRG Nonlinear" 
Solveradd cellref:="$D$22", relation:=2, formulatext:="=1" 
Solveradd cellref:="$D$8:$D$21", relation:=1, formulatext:="$C$5" 
Solversolve userfinish:=True 
End Sub 
 
We will look at this, taking each line, element by element. 
Clearing out the Solver registries 
The Solverreset erases what may already be in the Solver dialogue from the last time it was run 
 
Objective function 
The code: 
Solverok setcell:="$G$24", maxminval:=3, valueof:=0, bychange:="$D$8:$D$21", _ 
  engine:=1, enginedesc:="GRG Nonlinear" 
 
 
specifies that we want to optimize such that G24 has a value of zero by changing the weights applied to each stock’s 
beta, those in D8:D21. 
If maxminval:=1  
this means we want to maximize G24 
if maxminval:=2 
 
this means we want to minimize G24 
if maxminval:=3 
 
this means we want to set G24 to whatever value is after 
“valueof:=” 
The engine:=1, enginedesc:="GRG Nonlinear" portion is how we want the optimize performed (these are the default 
values in our case). 
The underscore, “_” indicates continuation on the next line for this command. 
Constraints 
We specify the constraints in the form of a “relation”: 
Solveradd cellref:="$D$22", relation:=2, formulatext:="=1" 
Solveradd cellref:="$D$8:$D$21", relation:=1, formulatext:="$C$5" 

147  
 
 
 
The relations are: 
1 
<= 
2 
= 
3 
>= 
4 
int 
(integer only) 
5 
bin 
(binary variable only) 
6 
dif 
(all different values) 
 
The formulatext may be a specific number (in this case, use an equal sign before the number itself) or point to a 
specific cell (in the case of our second constraint, C5). 
Running Solver 
We get VBA to run Solver by using: 
Solversolve userfinish:=True 
 
The role of the “True” is to suppress the Solver box from popping up for the user. If we have a poorly-behaved 
function (one that may not optimize), we may want to use specify “False” so that the user sees that the optimum 
was not reached. 
ADDING A BUTTON 
We can add a button in the worksheet, which will allow the user to run the macro without getting into the hassle of 
finding Visual Basic or the Macro listing.  To do this, simply create a button using a graphic or Shape, and then right-
clicking the button to “Assign macro”, at which time you would point to the Solving macro in our example. 
HELPS, HINTS, AND HEADACHES 
 
If you are trying to optimize by setting a cell to a specific value, consider using the difference cell (G24 in our 
example). This way, you do not have to change the Solver macro each time the user chooses a different value. 
 
The syntax of Solver, including “:=” can be daunting.  Missing a colon, comma, or equal sign can make the 
program not run. 
 
If you do have an error and then correct it, be sure to reset before rerunning (use the blue box in the Visual 
Basic editor). 
 
Forgetting to make sure that Solver for VBA is loaded can result in the macro not running without much 
explanation. 
 
It is a good idea to try out your Solver problem using the Solver dialogue box before coding the macro. 
 
Add one constraint at a time and test after each constraint is added. this will help you pinpoint problems in 
reaching the optimum. 
 
You could use a private sub worksheet_change macro (that is, a macro that is written for a specific worksheet) 
this is an event handling macro such that any time the user changes a specification (e.g., desired beta), the 
macro is run without any other action (such as clicking on a button). 
THE FINISHED PRODUCT 
The final spreadsheet, with aids for the user to select the constraints, results in the following: 

148  
 
 
 
 

149  
 
 
Appendix A: Excel keyboard short-cuts 
Note that this is not an exhaustive list of keyboard short-cuts. 
Affecting views 
CTRL 6 
Alternates between hiding objects, displaying objects, and displaying placeholders for 
objects. 
CTRL 8 
Displays or hides the outline symbols. 
CTRL 0 
Hides the selected columns 
CTRL 9 
Hides the selected rows. 
CTRL SHIFT u 
Switches between expanding and collapsing the formula bar 
CTRL SHFT ) 
Unhides hidden columns within the selection. 
CTRL SHFT ( 
Unhides hidden rows within the selection. 
Affecting formatting 
CTRL 2 
Applies or removes bold formatting. 
CTRL b 
Applies or removes bold formatting. 
CTRL i 
Applies or removes italic formatting 
CTRL 3 
Applies or removes italic formatting. 
CTRL 5 
Applies or removes strikethrough. 
CTRL 4 
Applies or removes underlining 
CTRL u 
Applies or removes underlining. 
CTRL SHFT $ 
Applies the Currency format with two decimal places (negative numbers in 
parentheses). 
CTRL SHFT # 
Applies the Date format with the day, month, and year. 
CTRL SHFT ^ 
Applies the Exponential number format with two decimal places. 
CTRL SHFT ~ 
Applies the General number format 
CTRL SHFT ! 
Applies the Number format with two decimal places, thousands separator, and minus 
sign (‐) for negative values. 
CTRL SHFT & 
Applies the outline border to the selected cells. 
CTRL SHFT % 
Applies the Percentage format with no decimal places. 
CTRL SHFT @ 
Applies the Time format with the hour and minute, and AM or PM. 
CTRL SHFT_ 
Removes the outline border from the selected cells. 
Copying and cutting 
CTRL ' 
Copies a formula from the cell above the active cell into the cell or the Formula Bar. 
CTRL c 
Copies the selected cells. CTRL+C followed by another CTRL+C displays the Clipboard. 
CTRL SHFT 
Copies the value from the cell above the active cell into the cell or the Formula Bar. 
CTRL x 
Cuts the selected cells. 
CTRL v 
Inserts the contents of the Clipboard at the insertion point and replaces any selection. 
Available only after you have cut or copied an object, text, or cell contents. 
CTRL d 
Uses the Fill Down command to copy the contents and format of the topmost cell of a 
selected range into the cells below. 
CTRL r 
Uses the Fill Right command to copy the contents and format of the leftmost cell of a 
selected range into the cells to the right. 

150  
 
 
 
Navigation 
ARROW KEYS 
Move one cell up, down, left, or right in a worksheet. 
CTRL ARROW 
Moves to the edge of the current data region. 
END 
Moves to the cell in the lower‐right corner of the window when SCROLL LOCK is turned 
on. Also selects the last command on the menu when a menu or submenu is visible. 
CTRL END 
Moves to the last cell on a worksheet. 
PAGE DOWN 
Moves one screen down in a worksheet. 
ALT PAGE DOWN 
Moves one screen to the right in a worksheet. 
CTRL PAGE DOWN 
Moves to the next sheet in a workbook. 
PAGE UP 
Moves one screen up in a worksheet. 
ALT PAGE UP 
Moves one screen to the left in a worksheet 
TAB 
Moves one cell to the right in a worksheet. Moves between unlocked cells in a 
protected worksheet. Moves to the next option or option group in a dialog box. 
SHIFT TAB 
Moves to the previous cell in a worksheet or previous option in a dialog box. 
CTRL HOME 
Moves to the beginning of a worksheet 
HOME 
Moves to the beginning of a row in a worksheet. Moves to the cell in the upper‐left 
corner of the window when SCROLL LOCK is turned on. Selects the first command on 
the menu when a menu or submenu is visible. 
 

151  
 
 
Appendix B: Excel Document 508 Checklist 
for Accessibility 
Section 508 is the set of standards promoted by the United States Access Board that are intended to 
ensure accessibility of public and governmental documents as required under Section 508 of the 
Rehabilitation Act.34 
From U. S. Government Health and Human Services, www.hhs.gov. 
ID 
1.0.Master Requirements for all Documents 
Yes 
(Pass) 
No 
(Fail) 
N/A 
1.1 
Does the document file name not contain spaces and/or special characters? 
  
  
  
1.2 
Is the document file name concise, generally limited to 20-30 characters, and 
does it make the contents of the file clear? 
  
  
  
1.3 
Have the Document Properties for Title, Author, Subject (AKA Description), 
Keywords, Language, and Copyright Status been applied per HHS guidance? 
  
  
  
1.4 
Does the document utilize recommended fonts (i.e., Times New Roman, 
Verdana, Arial, Tahoma, Helvetica, or Calibri)? 
  
  
  
1.5 
Have track changes been accepted or rejected and turned off? 
  
  
  
1.6 
Have comments been removed and formatting marks been turned off? 
  
  
  
1.7 
Does the document refrain from using flashing/flickering text and/or animated 
text? 
  
  
  
1.8 
Is the document free of background images or watermarks? 
  
  
  
1.9 
Do all images, grouped images, and non-text elements that convey information 
have meaningful alternative-text descriptions? 
  
  
  
1.10 Do complex images (i.e., charts and graphs) have descriptive text near the 
image (perhaps as a caption)? 
  
  
  
1.11 Do all URLs contain descriptive hyperlinks (i.e., avoid generic phrases like “Click 
here” and, instead, use phrases that let users know about the content of the 
linked page prior to selecting it)? 
  
  
  
1.12 Are all URLs linked to correct Web destinations? 
  
  
  
1.13 Are e-mail links accessible? 
  
  
  
1.14 Has a separate accessible version of the document been provided when there 
is no other way to make the content accessible? 
  
  
  
1.15 If there are tables, are blank cells avoided? 
  
  
  
1.16 Is all of the text easy to read in comparison to the background of the document 
(i.e., has a color-contrast ratio of 4.5:1)? 
  
  
  
1.17 Has the document been reviewed in Print Preview for a final visual check? 
  
  
  
 
                                                           
34 29 U.S.C. 794d, Section 508. Electronic and Information Technology, amended by Workforce Investment Act of 
1998 (Public Law 105-220). 

152  
 
 
 
ID 
2.0. General Layout and Formatting Requirements 
Yes 
(Pass) 
No 
(Fail) 
N/A 
2.1 
Is the table free of merged cells? (If not, but the final format will be PDF or HTML, 
then merged cells are okay). 
  
  
  
2.2 
Do the active worksheets have clear and concise names that allow users (and 
assistive technology) to identify the table’s source and content? 
  
  
  
2.3 
Is each table prefixed (titled) with the table name and table number? 
  
  
  
2.4 
Does the table header repeat at the top of the table as it goes from one page to 
another? 
  
  
  
2.5 
If color is used to emphasize important text, is there is an alternate, compliant 
method used as well? 
  
  
  
2.6 
Have all extraneous comments have been removed? 
  
  
  
2.7 
Is the document free of text boxes? (If not, but the final format will be PDF or 
HTML, then text boxes are okay). 
  
  
  
 
ID 
3.0. Charts/Image Requirements 
Yes 
(Pass) 
No 
(Fail) N/A 
3.1 
Are associated images on the same page, such as boxes in an organizational 
chart, grouped as one object? 
  
  
  
3.2 
Have all multilayered objects been flattened into one image? 
  
  
  
3.3 
Do all non-text elements that convey information, including images, have 
descriptive captions (alternative text does not currently work in Excel)? 
  
  
  
3.4 
Do all charts have titles, legends, and axis labels? 
  
  
  
 

153  
 
 
Index 
#DIV/0!, 6 
#N/A, 6 
#NAME, 6 
#NULL, 6 
#REF, 6 
#VALUE, 6, 97 
&, 16 
ABS function, 5 
Accessibility, 151 
Accounting format, 7, 19 
ACCRINT function, 55 
ACCRINTM function, 55 
Accrued interest functions, 55 
Active work area, 122 
Analysis ToolPak, 39 
AND function, 9 
ANOVA, 39 
Area chart, 70 
Arithmetic operators, 4 
Array formula, 111 
AUTOMATIC calculations, 22 
AVERAGE function, 138 
Bar chart, 68 
BASIS, 50 
Black-Scholes option pricing model, 140 
Button, 147 
Cell reference locking, 4 
Charts, 21 
Columns, number of, 18 
CONCATENATE function, 16 
Converting text to values, 7 
Copying contents, 3 
CORREL function, 38 
Correlation, 39 
Correlation coefficient, 38 
COUPDAYBS function, 55 
COUPDAYS function, 55 
COUPDAYSNC function, 56 
COUPNCD function, 56 
COUPPCD function, 56 
Covariance, 39 
Currency format, 7, 19 
Data Analysis, 39 
Data Validation, 22, 84 
DATE function, 74 
Dates, 73 
DAYS function, 75 
Descriptive statistics, 39 
Developer, 129 
DISC function, 52 
DO UNTIL, 122 
DO WHILE, 135 
Drop-down box, 85 
DURATION function, 57 
Dynamic chart, 101 
Dynamic table, 96 
EFFECT function, 45 
Errors messages, 6 
EXP function, 5 
Exponential smoothing, 39 
FOR, 122, 135 
Formulatext, 147 
Fourier analysis, 39 
F-Test, 39 
FV function, 42, 43, 85 
FVSCHEDULE function, 48 
Harmonic mean return, 140 
Helper cell, 23 
Histogram, 33, 36, 39 
HLOOKUP function, 107, 108 
IF function, 8, 9, 10, 97 
IFERROR function, 9 
INDEX function, 107 
INDIRECT function, 107 
Intercept, 37 
INTERCEPT function, 37 
Interrogatory, 126 
INTRATE function, 52 
IPMT function), 48 
IS functions, 14 
ISBLANK function, 15 
ISERR function, 15 
ISERROR function, 15 
ISEVEN function, 15 
ISLOGICAL function, 15 
ISNA function, 15 
ISNONTEXT function, 15 
ISNUMBER function, 15 

154  
 
 
ISODD function, 15 
ISTEXT function, 13, 14, 15 
Join several data items, 16 
Keyboard short-cuts, 149 
LINEST function, 37 
LN function, 5 
LOG function, 5 
LOOKUP function, 107, 108 
Macro, 120, 128 
MATCH function, 107, 109 
Match on two criteria, 110 
Maxminval, 146 
MDATE, 51 
MDURATION function, 57 
MINUTE, 75 
Moving average, 39 
Name Manager, 23, 27 
Naming an array, 26 
NOMINAL function, 46 
NOT function, 9 
NOW function, 75 
NPER, 43 
NPER function, 42 
Objective function, 146 
ODD functions, 57 
ODDFPRICE function, 58 
ODDFYIELD function, 58 
ODDLPRICE function, 58 
ODDLYIELD function, 58 
OFFSET function, 102 
OR function, 9 
Percentile, 39 
Pie chart, 68 
PivotChart, 118 
PivotTables, 114 
PMT, 43 
PMT function, 42 
PPMT function, 48 
PRICE function, 50 
PRICEDISC function, 50 
PRICEMAT function, 50 
PV, 43 
PV function, 42 
Random number generation, 39 
Rank, 39 
RATE, 43 
RATE function, 42, 47 
Recording a macro, 128 
Reference functions, 106 
Regression, 39 
Regression line, 37 
Ribbon, 1 
Rows, number of, 18 
RSQ function, 38 
Sampling, 39 
SECOND, 75 
Show Formulas, 6 
SLOPE function, 37 
Slope of least squares regression, 37 
Solver, 76, 77, 80 
Solver macro, 142 
Solveradd, 146 
Solverok, 146 
Solverreset, 146 
Solversolve, 146, 147 
Standard error of the estimate, 38 
Statistical functions, 32 
STEYX function, 38 
SUMPRODUCT function, 78, 80 
Surface chart, 71 
TBILLEQ function, 53 
TBILLPRICE function, 53 
TBILLYIELD function, 53 
TIME function, 74 
TREND function, 38 
Trend line, 38 
t-Test, 39 
UDF, 23, 138 
User-defined function, 23, 120, 121, 138 
VBA, 132 
VBA basics, 120 
Visual Basic for Applications, 120 
VLOOKUP function, 107, 108 
WEEKDAY function, 75 
Worksheet, 1 
Worksheet, managing, 2 
XY Scatter plot, 69 
YEARFRAC function, 75 
YIELD function, 52 
YIELDDISC function, 52 
YIELDMAT function, 52 
z-Test, 39 
 

