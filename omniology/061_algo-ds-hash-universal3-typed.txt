Data Structures
Universal Hash
Universal Hash 
Functions: Performance 
Guarantees (Chaining)
Design and Analysis 
of Algorithms I

Overview of Universal Hashing
Next : details on randomized solution (in 3 parts).
Part 1 : proposed definition of a “good random hash function”.
(“universal family of hash functions”)
Tim Roughgarden
(
y
)
Part 3 : concrete example of simple + practical such functions
Part 4 : justifications of definition : “good functions” lead to “good
performance”

Definition : Let H be a set of hash function from U to {0,1,2,..,n-1}
H is universal if and only if :
For all 
(with
)
Universal Hash Functions
Tim Roughgarden
When h is chosen uniformly at random at random from H.
(i.e., collision probability as small as with “gold standard” of perfectly 
random hashing)
(n = # of buckets )

Scenario : hash table implemented with chaining. Hash function h 
chosen uniformly at random from universal family H.
Theorem : [Carter-Wegman 1979]
Chaining: Constant-Time Guarantee
Tim Roughgarden
All operations run in O(1) time.
(for every data set S)
Caveats : 1.) in expectation over the random choice of the hash 
function h.
(h = # of buckets)
2.) assumes |S| = O(n)   [i.e., load 
]
3.) assumes takes O(1) time to evaluate hash function

Will analyze an unsuccessful Lookup
(other operations only faster).
So : Let S = data set with |S| = O(n)
Proof (Part I)
# of buckets
Tim Roughgarden
Consider Lookup for 
(arbitrary data set S)
Running Time : O(1) + O( list length in A[h(x)] )
Compute 
h(x)
Traverse 
list
A random variable, 
depends on hash 
function h
L

Collision : distinct x,y in U such that h(x) = h(y).
Solution#1: (separate) chaining.
-- keep linked list in each bucket
k
/ b
f
/
l
/
k
h
A General Decomposition Principle
Tim Roughgarden
-- given a key/object x, perform Insert/Delete/Lookup in the
list in A[h(x)]
Solution#2 : open addressing. (only one object per bucket)
-- hash function now specifies probe sequence h1(x), h2(x), …
(keep trying till find open slot)
-- examples : linear probing (look consecutively), double hashing
bucket for x
linked list for x
use 2 hash functions

Let L = list length in A[h(x)].
For 
(so, 
)  define 
Proof (Part II)
1 if h(y) = h(x)
0 otherwise
Tim Roughgarden
Note : 
So :

Recall
1 if h(y) = h(x)
0 otherwise

Let L = list length in A[h(x)].
For 
(so, 
)  define 
Proof (Part II)
1 if h(y) = h(x)
0 otherwise
Tim Roughgarden
Note : 
So :

By definition of a universal family 
of hash functions

Let L = list length in A[h(x)].
For 
(so, 
)  define 
Note : 
Proof (Part II)
1 if h(y) = h(x)
0 otherwise
Tim Roughgarden
So :
Since H is universal
Provided |S| = O(n)

