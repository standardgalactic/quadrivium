Alex Aiken 
Compilers 
Cool Semantics II 

Alex Aiken 
Cool Semantics II 
• Informal semantics of new T 
– Allocate locations to hold all attributes of an 
object of class T 
• Essentially, allocate a new object 
– Set attributes with their default values  
– Evaluate the initializers and set the resulting 
attribute values 
– Return the newly allocated object 

Alex Aiken 
Cool Semantics II 
• For each class A there is a default value DA 
– Dint = Int(0) 
– Dbool = Bool(false) 
– Dstring = String(0, “”) 
– DA = void (for any other class A)  

Alex Aiken 
Cool Semantics II 
• For a class A we write 
 class(A) = (a1 : T1  e1, …, an : Tn  en) where 
– ai are the attributes (including the inherited ones) 
– Ti are the attributes’ declared types 
– ei are the initializers 
 

Alex Aiken 
Cool Semantics II 
T0 = if (T == SELF_TYPE and so = X(…)) then X else T 
class(T0) = (a1 : T1  e1,…, an : Tn  en) 
li = newloc(S) for i = 1,…,n 
v = T0(a1= l1,…,an= ln) 
S1 = S[DT1/l1,…,DTn/ln] 
E’ = [a1 : l1, …, an : ln] 
v, E’, S1 d { a1  e1; …; an  en; } : vn, S2 
so, E, S d new T : v, S2 

Alex Aiken 
Cool Semantics II 
• The first three steps allocate the object 
 
• The remaining steps initialize it 
– By evaluating a sequence of assignments 
 
• State in which the initializers are evaluated 
– Self is the current object 
– Only the attributes are in scope (same as in typing) 
– Initial values of attributes are the defaults 

Alex Aiken 
Cool Semantics II 
• Informal semantics of e0.f(e1,…,en) 
– Evaluate the arguments in order e1,…,en 
– Evaluate e0 to the target object 
– Let X be the dynamic type of the target object 
– Fetch from X the definition of f (with n args.) 
– Create n new locations and an environment that maps 
f’s formal arguments to those locations 
– Initialize the locations with the actual arguments 
– Set self to the target object and evaluate f’s body 

Alex Aiken 
Cool Semantics II 
• For a class A and a method f of A (possibly inherited): 
 
impl(A, f) = (x1, …, xn, ebody) where 
– xi are the names of the formal arguments 
– ebody is the body of the method 
 

Alex Aiken 
Cool Semantics II 
so, E, S d e1  : v1 , S1 
so, E, S1 d e2  : v2 , S2 
… 
so, E, Sn-1 d en  : vn , Sn 
so, E, Sn d e0  : v0, Sn+1 
v0 = X(a1 = l1,…, am  = lm) 
impl(X, f) = (x1,…, xn, ebody) 
lxi = newloc(Sn+1) for i = 1,…,n 
E’ = [a1 : l1,…,am : lm][x1/lx1, …, xn/lxn] 
Sn+2 = Sn+1[v1/lx1,…,vn/lxn] 
v0 , E’, Sn+2 d ebody : v, Sn+3 
so, E, S d e0.f(e1,…,en)  : v, Sn+3 

Cool Semantics II 
What is the final value of S5 in the dispatch of obj.foo(i) below? 
Class  C { 
        a: Int <- 0; 
        foo(x: Int) : Int { x + a }; 
}; 
[lobj_a1, li3, lx3] 
It cannot be determined from the information given. 
[lobj_a1, li3] 
[li3] 
so, [i:li], S1 d i  : 3, S2 
so, [i:li], S2 d obj : C(a = lobj_a), S3  
impl(C, foo) = (x, x + a) 
lx = newloc(S3) 
S4 = S3[3/lx] 
C(a = lobj_a), [a:lobj_a][x/lx], S4 d x + a : 4, S5 
so, [i:li], [lobj_a1, li3] d obj.foo(i)  : 4, S5 

Alex Aiken 
Cool Semantics II 
• The body of the method is invoked with 
– E mapping formal arguments and self’s attributes 
– S like the caller’s except with actual arguments bound 
to the locations allocated for formals 
 
• The notion of the frame is implicit 
– New locations are allocated for actual arguments 
 
• The semantics of static dispatch is similar 

Alex Aiken 
Runtime Errors 
Operational rules do not cover all cases 
Consider the dispatch example: 
… 
so, E, Sn d e0  : v0,Sn+1 
v0 = X(a1 = l1,…, am  = lm) 
impl(X, f) = (x1,…, xn, ebody) 
… 

Alex Aiken 
Cool Semantics II 
• There are some runtime errors that the type checker 
does not prevent 
– A dispatch on void 
– Division by zero 
– Substring out of range 
– Heap overflow 
 
• In such cases execution must abort gracefully 
– With an error message, not with a segfault  

Alex Aiken 
Cool Semantics II 
• Operational rules are very precise & detailed 
– Nothing is left unspecified 
– Read them carefully 
 
• Most languages do not have a well specified operational 
semantics 
 
• When portability is important an operational semantics 
becomes essential 

