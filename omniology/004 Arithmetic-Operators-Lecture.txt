©2019 MathByte Academy

Special Methods: Arithmetic Operators
__add__
__sub__
__mul__
__truediv__
__floordiv__
__mod__
__pow__
+
-
*
/
//
%
**
à to indicate the operation is not supported, implement method 
and return NotImplemented
__matmul__
@
New in 3.5: Currently Python does not have 
this operator implemented in any type, but 
this was added for better numpy support, 
which does implement this for matrix 
multiplication. We can use too of course.
©2019 MathByte Academy

Special Methods: Reflected Operators
Consider a + b
à Python will attempt to call a.__add__(b)
if this returns NotImplemented
Python will swap the operands and try this instead:
b.__radd__(a)
__radd__
__rsub__
__rmul__
__rtruediv__
__rfloordiv__
__rmod__
__rpow__
à we'll look at some code examples where this might be useful
AND
operands are not of the same type
©2019 MathByte Academy

Special Methods: In-Place Operators
__iadd__
__isub__
__imul__
__itruediv__
__ifloordiv__
__imod__
__ipow__
+=
-=
*=
/=
//=
%=
**=
©2019 MathByte Academy

Special Methods: Unary Operators, Functions
__neg__
__pos__
__abs__
-a
+a
abs(a)
©2019 MathByte Academy

Coding
©2019 MathByte Academy

