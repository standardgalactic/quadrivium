QuickSort	  
Choosing	  a	  
Good	  Pivot	  
Design	  and	  Analysis	  
of	  Algorithms	  I	  

QuickSort:	  High-­‐Level	  DescripBon	  
[	  Hoare	  circa	  1961	  ]	  
QuickSort	  (array	  A,	  length	  n)	  
-­‐ If	  n=1	  	  	  return	  
-­‐ p	  =	  ChoosePivot(A,n)	  
-­‐ ParBBon	  A	  around	  p	  
-­‐ Recursively	  sort	  1st	  part	  
-­‐ Recursively	  sort	  2nd	  part	  
[	  currently	  unimplemented	  ]	  
1st	  part	  
2nd	  part	  

Tim	  Roughgarden	  
The	  Importance	  of	  the	  Pivot	  
Q	  :	  running	  Bme	  of	  QuickSort	  ?	  
A	  :	  depends	  on	  the	  quality	  of	  the	  pivot.	  

Tem
ver
Not	  enough	  informaBon	  to	  answer	  quesBon	  
Suppose	  we	  implement	  QuickSort	  so	  that	  ChoosePivot	  always	  
selects	  the	  ﬁrst	  element	  of	  the	  array.	  	  What	  is	  the	  running	  Bme	  of	  
this	  algorithm	  on	  an	  input	  array	  that	  is	  already	  sorted?	  
1st	  n/2	  terms	  are	  all	  
at	  least	  n/2	  
Reason	  :	  
Recurse	  on	  
these	  
Length	  n-­‐1	  (sBll	  
sorted)	  
empty	  
RunBme	  :	  

Tem
ver
Not	  enough	  informaBon	  to	  answer	  quesBon	  
Suppose	  we	  run	  QuickSort	  on	  some	  input,	  and,	  magically,	  every	  
recursive	  call	  chooses	  the	  median	  element	  of	  its	  subarray	  as	  its	  
pivot.	  	  What’s	  the	  running	  Bme	  in	  this	  case?	  	  
Reason	  :	  Let	  T(n)	  =	  running	  Bme	  on	  arrays	  of	  
size	  n.	  
Then	  	  :	  	  
Because	  pivot	  =	  median	  
	  	  	  	  	  	  	  choosePivot	  	  	  	  	  
	  	  	  	  	  	  	  parBBon	  

Tim	  Roughgarden	  
Random	  Pivots	  
Key	  QuesBon	  :	  how	  to	  choose	  pivots	  ?	  	  	  	  	  	  	  	  	  	  BIG	  IDEA	  :	  RANDOM	  PIVOTS!	  
That	  is	  :	  in	  every	  recursive	  call,	  choose	  the	  pivot	  randomly.	  
	  
	  (each	  element	  equally	  likely)	  
Hope	  :	  a	  random	  pivot	  is	  “precy	  good”	  	  	  “oRen	  enough”.	  
IntuiBon	  :	  1.)	  	  if	  always	  get	  a	  25-­‐75	  split,	  good	  enough	  for	  O(nlog(n))	  
running	  Bme.	  [this	  is	  a	  non-­‐trivial	  exercise	  :	  prove	  via	  recursion	  tree	  ]	  
2.)	  	  half	  of	  elements	  give	  a	  25-­‐75	  split	  or	  becer	  	  
	  Q	  :	  does	  this	  really	  work	  ?	  

Tim	  Roughgarden	  
Average	  Running	  Time	  of	  QuickSort	  
QuickSort	  Theorem	  :	  for	  every	  input	  array	  of	  length	  n,	  the	  average	  
running	  Bme	  of	  QuickSort	  (with	  random	  pivots)	  is	  O(nlog(n)).	  
Note	  :	  holds	  for	  every	  input.	  [no	  assumpBons	  on	  the	  data	  ]	  
	  -­‐	  recall	  our	  guiding	  principles	  !	  
	  -­‐	  “average”	  is	  over	  random	  choices	  made	  by	  the	  algorithm	  
	  (i.e.,	  the	  pivot	  choices	  )	  

