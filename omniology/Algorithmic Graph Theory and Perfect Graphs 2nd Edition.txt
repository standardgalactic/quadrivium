
Algorithmic Graph Theory 
and Perfect Graphs 
Second Edition 

ANNALS OF DISCRETE MATHEMATICS 
57 
Series Editor: Peter L. HAMMER 
Rutgers University, Piscataway, N J, U.S.A 

Algorithmic Graph Theory 
and Perfect Graphs 
Second Edition 
Martin Charles Golumbic 
Caesarea Rothschild Institute 
University of Haifa 
Haifa, Israel 
2OO4 
ELSEVIER 
Amsterdam - Boston - Heidelberg - London - New York - Oxford 
Paris - San Diego - San Francisco - Singapore- Sydney- Tokyo 

ELSEVIER B.V. 
Sara Burgerhartstraat 25 
P.O. Box 211, 1000 AE 
Amsterdam, The Netherlands 
ELSEVIER Inc. 
ELSEVIER Ltd 
525 B Street, Suite 1900 
The Boulevard, Langford Lane 
San Diego, CA 92101-4495 Kidlington, Oxford OX5 1GB 
USA 
UK 
ELSEVIER Ltd 
84 Theobalds Road 
London WC 1X 8RR 
UK 
© 2004 Elsevier B.V. All rights reserved. 
This work is protected under copyright by Elsevier B.V., and the following terms and conditions apply to its use: 
Photocopying 
Single photocopies of single chapters may be made for personal use as allowed by national copyright laws. 
Permission of the Publisher and payment of a fee is required for all other photocopying, including multiple or 
systematic copying, copying for advertising or promotional purposes, resale, and all forms of document delivery. 
Special rates are available for educational institutions that wish to make photocopies for non-profit educational 
classroom use. 
Permissions may be sought directly from Elsevier's Rights Department in Oxford, UK: phone (+44) 1865 
843830, fax (+44) 1865 853333, e-mail: permissions@elsevier.com. Requests may also be completed on-line via 
the Elsevier homepage (http://www.elsevier. com/locate/permissions). 
In the USA, users may clear permissions and make payments through the Copyright Clearance Center, Inc., 222 
Rosewood Drive, Danvers, MA 01923, USA; phone: (+1) (978) 7508400, fax: (+1) (978) 7504744, and in the 
UK through the Copyright Licensing Agency Rapid Clearance Service (CLARCS), 90 Tottenham Court Road, 
London W1P 0LP, UK; phone: (+44) 20 7631 5555; fax: (+44) 20 7631 5500. Other countries may have a local 
reprographic rights agency for payments. 
Derivative Works 
Tables of contents may be reproduced for internal circulation, but permission of the Publisher is required for 
external resale or distribution of such material. Permission of the Publisher is required for all other derivative 
works, including compilations and translations. 
Electronic Storage or Usage 
Permission of the Publisher is required to store or use electronically any material contained in this work, 
including any chapter or part of a chapter. 
Except as outlined above, no part of this work may be reproduced, stored in a retrieval system or transmitted in 
any form or by any means, electronic, mechanical, photocopying, recording or otherwise, without prior written 
permission of the Publisher. 
Address permissions requests to: Elsevier's Rights Department, at the fax and e-mail addresses noted above. 
Notice 
No responsibility is assumed by the Publisher for any injury and/or damage to persons or property as a matter of 
products liability, negligence or otherwise, or from any use or operation of any methods, products, instructions 
or ideas contained in the material herein. Because of rapid advances in the medical sciences, in particular, 
independent verification of diagnoses and drug dosages should be made. 
First edition 1980 (Academic Press, ISBN 0-12-289260-7) 
Second edition 2004 
Library of Congress Cataloging in Publication Data 
A catalog record is available from the Library of Congress. 
British Library Cataloguing in Publication Data 
A catalogue record is available from the British Library. 
ISBN: 
0-444-51530-5 
The paper used in this publication meets the requirements of ANSI/NISO Z39.48-1992 (Permanence of 
Paper). 
Printed in Hungary. 

Dedicated to my parents 
l,'l~ ~"'f~ 1"I::I ~/~rl 

This Page Intentionally Left Blank

Contents 
Foreword 2004 
Foreword 
Preface 
Acknowledgments 
List of Symbols 
Corrections and Errata 
CHAPTER 1 
Graph Theoretic Foundations 
1. 
Basic Definitions and Notations 
2. 
Intersection Graphs 
3. 
Interval Graphs-A 
Sneak Preview of the 
Notions Coming Up 
4. 
Summary 
Exercises 
Bibliography 
CHAPTER 2 
The Design of Efficient Algorithms 
1. 
2. 
Data Structures 
3. 
4. 
Transitive Tournaments and Topological 
The Complexity of Computer Algorithms 
How to Explore a Graph 
Sorting 
Exercises 
Bibliography 
... 
Xlll 
xv 
xvii 
xix 
xx i 
xxiii 
1 
9 
13 
17 
18 
20 
22 
31 
37 
42 
45 
48 
vii 

viii 
CHAPTER 3 
CHAPTER 4 
CHAPTER 5 
Perfect Graphs 
1. 
2. 
The Perfect Graph Theorem 
3. p-Critical and Partitionable Graphs 
4. A Polyhedral Characterization 
5. 
A Polyhedral Characterization 
6. 
The Star of the Show 
of Perfect Graphs 
of p-Critical Graphs 
The Strong Perfect Graph Conjecture 
Exercises 
Bibliography 
Triangulated Graphs 
1. 
2. 
3. 
4. 
5. 
6. 
7. 
Introduction 
Characterizing Triangulated Graphs 
Recognizing Triangulated Graphs 
by Lexicographic Breadth-First Search 
The Complexity of Recognizing 
Triangulated Graphs 
Triangulated Graphs as Intersection Graphs 
Triangulated Graphs Are Perfect 
Fast Algorithms for the COLORING, 
CLIQUE, STABLE SET, and 
CLIQUE-COVER Problems on 
Triangulated Graphs 
Exercises 
Bibliography 
Comparability Graphs 
Contents 
51 
53 
58 
62 
65 
71 
75 
77 
81 
81 
84 
87 
91 
94 
98 
100 
102 
1. r-Chains and Implication Classes 
105 
2. 
Uniquely Partially Orderable Graphs 
109 
3. 
The Number of Transitive Orientations 
113 
4. 
5. 
The r*-Matroid of a Graph 
124 
6. The Complexity of Comparability 
Graph Recognition 
129 
7. 
Coloring and Other Problems 
on Comparability Graphs 
132 
Schemes and G-Decompositions- An Algorithm 
for Assigning Transitive Orientations 
120 

Contents 
ix 
CHAPTER 6 
CHAPTER 7 
CHAPTER 8 
CHAPTER 9 
8. 
The Dimension of Partial Orders 
Exercises 
Bibliography 
Split Graphs 
1. 
2. 
Characterizing Split Graphs 
3. 
An Introduction to Chapters 6 8 :  Interval, 
Permutation, and Split Graphs 
Degree Sequences and Split Graphs 
Exercises 
Bibliography 
Permutation Graphs 
1. 
Introduction 
2. 
Characterizing Permutation Graphs 
3 .  
Permutation Labelings 
4. 
Applications 
5. 
Sorting a Permutation Using 
Queues in Parallel 
Exercises 
Bibliography 
Interval Graphs 
1. 
How It All Started 
2. 
3 .  
4. 
Applications of Interval Graphs 
5. 
Preference and Indifference 
6. 
Circular- Arc Graphs 
Some Characterizations of Interval Graphs 
The Complexity of Consecutive 1’s Testing 
Exercises 
Bibliography 
Superperfect Graphs 
1. 
Coloring Weighted Graphs 
2. 
Superperfection 
3. 
An Infinite Class of Superperfect 
Noncomparability Graphs 
135 
139 
1 42 
1 49 
1 49 
152 
155 
156 
157 
158 
160 
162 
164 
168 
169 
171 
172 
175 
181 
185 
188 
193 
197 
203 
206 
209 

X 
Contents 
CHAPTER 10 
CHAPTER 11 
CHAPTER 12 
4. When Does Superperfect Equal Comparability? 
212 
5. Composition of Superperfect Graphs 
214 
6. A Representation Using the Consecutive 1’s 
Property 
215 
Exercises 
218 
Bibliography 
218 
Th resho Id Graphs 
1. The Threshold Dimension 
219 
2. 
Degree Partition of Threshold Graphs 
223 
4. 
An Application to Synchronizing 
3. 
A Characterization Using Permutations 
221 
Parallel Processes 
229 
Exercises 
23 1 
Bibliography 
234 
Not So Perfect Graphs 
1. 
2. 
3. 
Overlap Graphs 
4. 
Sorting a Permutation Using Stacks in 
Parallel 
Intersecting Chords of a Circle 
Fast Algorithms for Maximum Stable Set 
and Maximum Clique of These Not So 
Perfect Graphs 
of Overlap Graphs 
Exercises 
Bibliography 
5. 
A Graph Theoretic Characterization 
Perfect Gaussian Elimination 
1. Perfect Elimination Matrices 
2. 
Symmetric Matrices 
3. 
Perfect Elimination Bipartite Graphs 
4. 
Chordal Bipartite Graphs 
Exercises 
Bibliography 
235 
231 
242 
244 
248 
25 1 
253 
254 
256 
259 
26 1 
264 
266 

Contents 
xi 
Appendix 
A. 
B. 
A Small Collection of NP-complete 
Problems 
An Algorithm for Set Union, Intersection, 
Difference, and Symmetric Difference of 
Two Subsets 
of Algorithm 2.4 
An Illustration of the Decomposition 
Algorithm 
The Properties P.E.B., C.B., (P.E.B.)', 
(C .B .) ' Illustrated 
The Properties c, r, T, T Illustrated 
C. Topological Sorting: An Example 
D. 
E. 
F. 
Epilogue 2004 
269 
270 
27 1 
273 
273 
275 
277 
307 
Index 

This Page Intentionally Left Blank

Foreword 2004: 
the Annals edition 
The publication of this new edition of Algorithmic Graph Theory and 
Perfect Graphs marks twenty three years since its first appearance. My original 
motivation for writing the book was to collect and unify the topic to act as a 
spring board for researchers, and especially graduate students, to pursue new 
directions of investigation. The ensuing years have been an amazingly fruitful 
period of research in this area. To my great satisfaction, the number of relevant 
journal articles in the literature has grown tenfold. I can hardly express my 
admiration to all these authors for creating a success story for algorithmic graph 
theory far beyond my own imagination. 
The world of perfect graphs has grown to include over 200 special graph 
classes. The Venn diagrams that I used to show some of the inclusions between 
classes in the First Generation, for example Figure 9.9 (on page 212), have 
yielded to Hasse diagrams for the Second Generation, like the one from 
Golumbic and Trenk [2004] reprinted in Figure 13.3 at the end of this edition. 
Perhaps the most important new development in the theory of perfect graphs 
is the recent proof of the Strong Perfect Graph Conjecture by Chudnovsky, 
Robertson, Seymour and Thomas, announced in May 2002. News of this was im-
mediately passed on to Claude Berge, who sadly passed away on June 30, 2002. 
On the algorithmic side, many of the problems which were open in 1980 
have subsequently been settled, and algorithms on new classes of perfect graphs 
have been studied. For example, tolerance graphs generalize both interval graphs 
and permutation graphs, and coloring tolerance graphs in polynomial time is 
important in solving scheduling problems where a measure of flexibility or 
tolerance is allowed for sharing or relinquishing resources when total exclusivity 
prevents a solution. 
At the end of this new edition, I have added a short chapter called 
XIII 

xiv 
Foreword 
Epilogue 2004 in which I survey a few of my favorite results and research 
directions from the Second Generation. Its intension is to whet the appetite. 
Six books have appeared recently which cover advanced research in this area. 
They have thankfully relieved me from a pressing need to write my own encyclo- 
pedia sequel. They are the following, and are a must for any graph theory library. 
• A. Brandst/idt, V.B. Le and J.P. Spinrad, "Graph Classes: A Survey", SIAM, 
Philadelphia [ 1999], is an extensive and invaluable compendium of the current 
status of complexity and mathematical results on hundreds on families of 
graphs. It is comprehensive with respect to definitions and theorems, citing 
over 1100 references. 
• P.C. Fishburn, "Interval Orders and Interval Graphs: A Study of Partially 
Ordered Sets", John Wiley & Sons, New York [ 1985], gives a comprehensive 
look at the research on this class of ordered sets. 
• M.C. Golumbic and A.N. Trenk, "Tolerance Graphs", Cambridge University 
Press [2004], is the youngest addition to the perfect graph bookshelf. It 
contains the first thorough study of tolerance graphs and tolerance orders, and 
includes proofs of the major results which have not appeared before in books. 
• N.V.R. Mahadev and U.N. Peled, "Threshold Graphs and Related Topics", 
North-Holland [1995], is a thorough and extensive treatment of all research 
done in the past years on threshold graphs (chapter 10 of my book), threshold 
dimension and orders, and a dozen new concepts which have emerged. 
• T.A. McKee and ER. McMorris, "Topics in Intersection Graph Theory", 
SIAM, Philadelphia [1999], is a focused monograph on structural properties, 
presenting definitions, major theorems with proofs and many applications. 
• W.T. Trotter, "Combinatorics and Partially Ordered Sets", Johns Hopkins, 
Baltimore [ 1992], is the book to which I referred at the bottom of page 136. 
It covers new directions of investigation and goes far beyond just dimension 
problems on ordered sets. 
Algorithmic Graph Theory and Perfect Graphs has now become the classic 
introduction to the field. It continues to convey the message that intersection 
graph models are a necessary and important tool for solving real-world problems. 
Solutions to the algorithmic problems on these special graph classes are 
continually integrated into systems for a large variety of application areas, 
from VLSI circuit design to scheduling, from resource allocation to physical 
mapping of DNA, from temporal reasoning in artificial intelligence to pavement 
deterioration analysis. On the mathematical side, perfect graph classes have 
provided rich soil for deep theoretical results. In short, it remains a stepping stone 
from which the reader may embark on one of many fascinating research trails. 
Martin Charles Golumbic 
Haifa, Israel 

Foreword 
Research in graph theory and its applications has increased considerably in 
recent years. Typically, the elaboration of new theoretical structures has moti-
vated a search for new algorithms compatible with those structures. Rather than 
the arduous and systematic study of every new concept definable with a graph, 
the main task for the mathematician is to eliminate the often arbitrary and cum-
bersome definitions, keeping only the "deep" mathematical problems. 
Of course, the deep problems may well be elusive; indeed, there have been 
many definitions (from Dieudonne, among others) of what a deep problem is. In 
graph theory, it should relate to a variety of other combinatorial structures and 
must therefore be connected with many difficuh practical problems. Among 
these will be problems that classical algebra is not able to solve completely or 
that the computer scientist would not attack by himself. 
This book, by Martin Golumbic, is intended as an introduction to graph theory 
through just these practical problems, nearly all of them related to the structure of 
permutation graphs, interval graphs, circle graphs, threshold graphs, perfect 
graphs, and others. 
The reader will not find motivations drawn from number theory, as is usual for 
most of the extremal graph problems, or from such refinements of old riddles as 
the four-color problem and the Hamiltonian tour. Instead, Golumbic has selected 
practical problems that occur in operations research, scheduling, econometrics, 
and even genetics or ecology. 
The author's point of view has also enjoyed increasing favor in the area of 
complexity analysis. Each time a new structure appears, the author inmiediately 
devotes some effort to a description of efficient algorithms, if any are known to 
exist, and to a determination of whether a proposed algorithm is able to solve the 
problem within a reasonable amount of time. 
XV 

xvi 
Foreword 
Certainly a wealth of literature on graph theory has developed by now. Yet it is 
clear that this book brings a new point of view and deserves a special place in the 
literature. 
CLAUDE BERGE 

Preface 
The notion of a "perfect" graph was introduced by Claude Berge at the birth 
of the 1960s. Since that time many classes of graphs, interesting in their own 
right, have been shown to be perfect. Research, in the meantime, has proceeded 
along two lines. The first line of investigation has included the proof of the 
perfect graph theorem (Theorem 3.3), attempts at proving the strong perfect 
graph conjecture, studies of critically imperfect graphs, and other aspects of 
perfect graphs. The second line of approach has been to discover mathematical 
and algorithmic properties of special classes of perfect graphs: comparability 
graphs, triangulated graphs, and interval graphs, to name just a few. Many of 
these graphs arise quite naturally in real-world applications. For example, uses 
include optimization of computer storage, analysis of genetic structure, synchro-
nization of parallel processes, and certain scheduling problems. 
Recently it appeared to me that the time was ripe to assemble and organize the 
many results on perfect graphs that are scattered throughout the literature, some 
of which are difficult to locate. A serious attempt has been made to coordinate 
the melange of some 200 papers referenced here in a manner that would make the 
subject more accessible to those interested in algorithmic and algebraic graph 
theory. I have tried to include most of the important results that are currently 
known. In addition, a few new results and new proofs of old results appear 
throughout the text. In particular, Chapter 9, on superperfect graphs, contains 
results due to Alan J. Hoffman, Ellis Johnson, Larry J. Stockmeyer, and myself 
that are appearing in print for the first time. 
The emphasis of any book naturally reflects the bias of the author. As a mathe-
matician and computer scientist, I am doubly biased. First, I have tried to present 
a rigorous and coherent theory. Proofs are constructive and are streamlined as 
much as possible. The notation has been chosen to facilitate these matters. Sec-
ond, I have directed much attention to the algorithmic aspects of every problem. 
xvii 

xviii 
Preface 
Algorithms are expressed in a manner that will make their adaptation to a partic-
ular progranmiing language relatively easy. The complexity of every algorithm is 
analyzed so that some measure of its efficiency can be determined. 
These two approaches enhance one another very well. By exploiting the math-
ematical properties satisfied a priori by a structure, one is often able to reduce the 
time or space complexity required to solve a problem. Conversely, the al-
gorithmic approach often leads to startling theoretical results. To illustrate this 
point, consider the fact that certain NP-complete problems become tractable 
when restricted to certain classes of perfect graphs, whereas the algorithm for 
recognizing comparability graphs gives rise to a matroid associated with the 
graph. 
A glance at the table of contents will provide a rough outiine of the topics to be 
discussed. The first two chapters are introductory in the sense that they provide 
the foundations, respectively, of the graph theoretic notions and the algorithmic 
design and analysis techniques that will be used in the remaining chapters. The 
reader may wish to read these two chapters quickly and refer to them as needed. 
The chapters are structured in such a way that the book will be suitable as a 
textbook in a course on algorithmic combinatorics, graph theory, or perfect 
graphs. In addition, the book will be very useful for applied mathematicians and 
computer scientists at the research level. Many applications of the theoretical and 
computational aspects of the subject are described throughout the text. At the end 
of each chapter there are numerous exercises to test the reader's understanding 
and to introduce further results. An extensive bibliography follows each chapter, 
and, when possible, the Mathematical Reviews number is included for further 
reference. 
The topics covered in this book have been chosen to fill a vacuum in the 
literature, and their interrelation and importance will become evident as early as 
Section 1.3. Since the intersection of this volume with the traditional material 
covered by most graph theory books has been designed to be small, it is highly 
recommended that the serious student augment his studies with one of these 
excellent textbooks. A one-year course with two concurrent texts is suggested. 
MARTIN CHARLES GOLUMBIC 

Acknowledgments 
I would like to express my gratitude to the many friends and colleagues who 
have assisted me in this project. Special thanks are due to Claude Berge for the 
kind words that introduce this volume. I am happy to acknowledge the help 
received from Mark Buckingham, particularly in Chapters 3 and 11. He is the 
coauthor of Sections 3.3-3.5. The suggestions and critical comments of my 
"trio" of students, Clyde Kruskal, Larry Rudolph, and Elia Weixelbaum, led to 
numerous improvements in the exposition. Over the past three years I have been 
fortunate to receive support from the Courant Institute of Mathematical Sci-
ences, the National Science Foundation, the Weizmann Institute of Science, and 
rUniversite de Paris VI. 
I would also like to express my appreciation to Alan J. Hoffman for many 
interesting discussions and for his help with the material in Chapter 9. My thanks 
go to Uri Peled, Fred S. Roberts, Allan Gottlieb, W. T. Trotter, Peter L. Ham-
mer, and Laszlo Lovasz for their comments, as well as to Lisa Sabbia Walsh, 
Daniel Gruen, and Joseph Miller for their assistance. I am also indebted to my 
teacher, Samuel Eilenberg, for the guidance, insight, and kindness shown me 
during my days at Columbia University. 
But the greatest and most crucial help has come from my wife Lynn. Although 
not a mathematician, she managed to unconfound much of this mathematician's 
gibberish. She also "axed" some of my worst (best) jokes, much to my dismay. 
More importantly, she has been the rock on which I have always relied for en-
couragement and inspiration, during our travels and at home, in the course of the 
research and writing of this book. As it is written in Proverbs: 
.r\2wybv lon-nmm ,n;3Dnn nnno n-'D 
.r]}'7T^v n^bv nxi > n wv m:n mnn 
XIX 

This Page Intentionally Left Blank

List of Symbols 
^age 
2 
2 
2 
4 
19 
3 
8 
5 
6 
3 
6 
3 
7 
7 
7 
4 
4 
4 
7 
4 
4 
6 
6 
Symbol 
Vx 
3>' 
xeX 
AQX 
BCX 
\x\ 
AHB 
AUB 
A + B 
0 
^iX) 
vx w 
SIT 
G = {V,E) 
G = {XuX2.E) 
(Vs^S) 
GA={A,EA) 
Adj(v) 
AdJXv) 
Ar(v) 
^(v) 
^(v) 
^(v) 
ET' 
E 
ib 
il^il 
G 
G^G' 
co(C?) 
k{G) 
Meaning 
For all X. 
There exists a y. 
jc is a member of X. 
y4 is a subset of X. 
5 is a proper subset of X 
The cardinality of a set X 
The intersection of /< and A 
The uMion of A and A 
The union of disjoint sets y4 and A 
The e/w/7/>' ^e/. 
The power set of X 
The Cartesian product of sets V and FT. 
Sets S and T overlap; SHTi 0, S^T, and 7^5. 
The gra/?/i G with vertex set K and edge set E. 
The bipartite graph G with vertex set X1+X2 
where each X, is stable. 
The subgraph spanned by a subset S of edges. 
The subgraph induced by a subset ^ of vertices. 
The adjacency set of vertex v. 
The adjacency set restricted to A; Adj/4(v) = Adj(v)nA. 
The neighborhood of vertex F; N(v) - {v}+Adj(v). 
The out-degree of vertex v. 
The in-degree of vertex v. 
The degree of vertex v in an undirected graph. 
The reversal of a set E of edges. 
The symmetric closure of a set E of edges. 
The undirected edge [ab]^{ba]. 
In an undirected graph G = (V,E) we define ||£|| = i |£|. 
The complement of an undirected graph G. 
Graphs G and G' are isomorphic. 
The c//^we number of <j. 
The c/i^ue cover number of G. 
XXI 

XXII 
List of Symbols 
6 
7 
113 
126 
220 
203 
206 
9 
9 
9 
9 
9 
9 
47 
77 
109 
95 
105 
106 
106 
106 
135 
135 
157 
235 
157 
158 
228 
236 
23 
26 
27 
27 
32 
176 
177 
53 
62 
62 
62 
59 
62 
60 
60 
256 
256 
ctiG) 
xiG) 
tiG) 
r(G) 
e{G) 
x(G;w) 
toiG;w) 
Kn 
Cn 
Pn 
J^m,n 
K\,n 
ItlKn 
G1XG2 
G'H 
Ho[Hu. 
^ 
r 
r* 
^AG) 
^iG) 
^(P) 
dim(P) 
Glir] 
H[7r] 
n' 
TTP 
LU 
je 
Oifim)) 
P 
NP 
n,<n2 
A 
T^r 
lU/) 
G oh 
R" 
P(A) 
Pii^) 
1 
0 
J 
I 
G(M) 
BiM) 
The stability number of G. 
The chromatic number of G. 
The number of transitive orientations of G. 
The rank of the r*-matroid of G. 
The threshold dimension of G. 
The interval chromatic number of a weighted graph {G\w). 
The maximum weighted clique number of {G\w). 
The complete graph on n vertices. 
The chordless cycle on n vertices. 
The chordless path graph on n vertices. 
The complete bipartite graph on m + « vertices partitioned 
into an m-stable set and an fi-stable set. 
The star graph on n + 1 vertices. 
m disjoint copies of Kn. 
The Cartesian product of graphs G\ and Gi. 
The normal product of graphs G and H. 
., /fn] The composition of graphs. 
The class of undirected graphs satisfying the property 
that every odd cycle of length greater than or equal 
to 5 has at least two chords. 
The forcing relation on edges. 
The reflexive, transitive closure of T. 
The collection of implication classes of G. 
The collection of color classes of G. 
The collection of linear extensions of a partial order P. 
The dimension of a partial order P. 
The permutation graph of n. 
The stack sorting graph of w. 
The inverse of the permutation w. 
The reversal of the permutation ir. 
The shuffle product. 
The class of stack sorting graphs. 
Computational complexity on the order off{m). 
The class of deterministic polynomial-time problems. 
The class of nondeterministic polynomial-time problems. 
Problem IIi is polynomially transformable to problem IIz. 
The null or undefined symbol in an algorithm. 
The Pg-trees T and T are equivalent. 
The collection of all permutations TT of A' such that the members 
of each subset hJ occur consecutively in n where JQ 
^X). 
The graph G multiplied by the vector h. 
The M-dimensional vector space over the real numbers. 
The polyhedron of matrix A. 
The integral polyhedron of matrix A. 
The vector of all ones. 
The vector of all zeros. 
The matrix of all ones. 
The identity matrix. 
The graph of matrix M. 
The bipartite graph of matrix M. 

Corrections and Errata to: 
Algorithmic Graph Theory 
and Perfect Graphs, 
the original 1980 edition 
We apologize to Prof. George Lueker for misspelling his family name 
throughout the text. Hence all occurrences "Leuker" should be "Lueker". 
Page 18: The graph in Figure 1.17 is a circular-arc graph. 
Page 48: Exercise 21 is false. 
Page 49: Garey and Johnson [1978]: add "MR80g:68056" 
Page 78: Bland, et al. [1979]: add "MR80g:05034" 
Chvatal, et al. [1979]: add "MR8lb:05044" 
de Werra [1978]: add "MR81a:05052" 
Greenwell [1978]: add "MR80d:05044" 
Page 79: Olaru [1977]: add "MR58#5411" 
Page 80: Parthasarathy and Ravindra [1979]: add "MR80m:05045" 
Pretzel [1979]: add "MR80d:06003" 
Tucker [1979]: add "MR81c:05041" 
Wagon [1978]: add "MR80i:05078" 
Page 85: Figure 4.3: The edge (b,e) is missing. 
XXIII 

xxiv 
Corrections and Errata 
Page 102: Exercise 24: The claim in the first sentence is false. For example, 
it can use as many as 7 colors on the graph Gi, in Figure 4.1. 
A different technique can be used to obtain a linear time coloring 
algorithm for triangulated graphs, which is due to Martin Farber. 
Line 21: change ''Adj{wT to ''Adj{uT 
Gavril [1978]: add "MR81g:05094" 
Page 104: Wagon [1978]: add "MR80i:05078" 
Page 138: The second footnote can be updated since M. Yannakakis has now 
proved that the complexity of determining if a poset has dimension 
3 is NP-complete. 
Page 145: Pretzel [1979]: add "MR80d:06003" 
Page 146: Gysin [1977]: add "MR58#5393" 
Page 147: Rabinovitch [1978b]: add "MR58#5424" 
Page 156: Burkard and Hammer [1977]: change to the following: 
[1980] A note on Hamiltonian split graphs, J. Combin. Theory B 28, 
245-248. MR81e:05095. 
A necessary condition for the existence of a Hamiltonian cycle in 
split graphs is proved. 
Erdos and Gallai [I960]: change "272" to "274" 
Foldes and Hammer [1978]: add "MR80c:05111" 
Hammer, Ibaraki, and Simeone [1978]: change to the following: 
[1978] Degree sequences of threshold graphs, Proc. 9th Southeastern 
Conf. on Combinatorics, Graph Theory and Computing, Con-
gressus Numeratium 21, Utilitas Math., Winnipeg, Man., 329-355. 
MR80j:05088. 
Page 163: There should be edges between 3-4 and 6-7 (corrected in this 
edition). 
Page 179: Figure 8.7: The second tree on the right should have its rightmost 
leaf "F" rather than "E". The leaves should read from left to right as 
follows: B C E A D F 
Page 190: line 6: change "will appear in Tucker [1979]" to: "appears in Tucker 
[1980]" 

Corrections and Errata 
xxv 
Page 197: line 26: change "Griggs and West [1979]" to: "Griggs and West 
[1980]" 
Abbott and Katchalski [1979]: add "MR80b:05038" 
Page 198: Booth and Lueker [1976]: add "MR55#6932" 
Page 199: Griggs [1979]: add "MR81h:05083b" 
Griggs and West: change to the following: 
[1980] Extremal values of the interval number of a graph, SIAM J. 
Algebraic Discrete Methods 1, 1-7. MR81h:05083a. 
Page 201: Roberts [1979a]: add "MR81e:05120" 
Roberts [1979b]: add "MR81e:05071" 
Trotter and Harary [1979]: add "MR81c:05055" 
Page 202: Tucker [1979]: change to the following: 
[1980] An efficient test for circular-arc graphs, SIAM J. Comput. 9, 
1-24. MR81a:68074. 
Page 203: line 17: add the following: 
Vertices x of weight w(x) = 0 are the mapped into the empty interval. 
Page 206: (D(T\ W) should be (o{G\ w) 
Page 212: Figure 9.9: 
(1) The nonsuperperfect, interval graph with the chordless 5-cycle 
should have two chords connecting the top two vertices to the 
bottom vertex. It will then be the same as the "bull's head" graph 
on page 16, (corrected in this edition). 
(2) The noncomparability, nontriangulated comparability graph on 
7 vertices has too many edges. The two vertical edges should 
be removed, (corrected in this edition). 
(3) The nonsuperperfect, interval graph which has 5 triangles, is, in 
fact, superperfect; it should be moved into the superperfect, non-
compatability, interval area of the figure. See also Section 13.9 
of the Epilogue to this edition. 
Page 234: Golumbic [1978a]: add "MR81e:68080" 
Hammer, Ibaraki, and Simeone [1978]: change to the following: 
[1978] Degree sequences of threshold graphs, Proc, 9th Southeastern 
Conf. on Combinatorics, Graph Theory and Computing, Con-
gressus Numeratium 21, Utilitas Math., Winnipeg, Man., 329-355. 
MR80j:05088. 

xxvi 
Corrections and Errata 
Page 253: Gavril [1973]: change "minimum independent" to "maximum inde-
pendent" 
Page 267: Golumbic [1979]: add "MR81c:05077" 
Golumbic and Goss [1978]: add "MR80d:05037" 
Ohtsuki, Cheung, and Fujisawa [1976]: add "MR58#5379" 
Page 280: Lueker, G. S.: change "25" to "24" 
Put name into alphabetical order. 

CHAPTER 1 
Graph Theoretic Foundations 
1. 
Basic Definitions and Notations 
Functions and Relations 
Let X and Y be sets. A function (or mapping) f from X to Y, denoted 
f:X^Y, 
is a rule which associates to each element x of X a corresponding element 
y of y. It is usual to call y the image of x under/and denote it by }^ = /(x). 
We call/an injective or one-to-one function if no pair of distinct members of 
X has the same image under/, that is, 
X # x' =>/(x) # f(x') 
(x, x' 6 AT), 
or equivalently, 
/ W = /(^') =^ X = x' 
(x, x' G Z). 
The function/is called surjective or onto if each yinY is the image of some x 
in X, that is, 
(yyeY)(3xeX) 
such that 
y=f(x), 
A function which is both injective and surjective is called a bijection. A 
permutation is simply a bijection from a set to itself. 
Following the usual notation of mathematics, xeX indicates that x is a 
member of the set X and A ^ X means that ^4 is a (not necessarily proper) 
subset of X, The cardinality or size of X is denoted by | X |. For subsets A and 
B of X, the notation A n B and ^ u B are the usual set intersection and set 

2 
1. Graph Theoretic Foundations 
union operations. When A and B are disjoint subsets, we often write their 
union with a plus sign. That is, 
C = A + B 
indicates 
AnB 
= 0 
and 
C = AKJ B, 
where 0 is the empty set. Throughout this book we will deal exclusively with 
finite sets. A collection {XiJi^j of subsets of a set X is said to cover X if their 
union equals X, The collection is called a partition of X if the subsets are 
pairwise disjoint and the collection covers X. 
Let ^(X) denote the power set of a set X, i.e., the collection of all subsets of 
X. It is well known that \^(X)\ 
= 2'^'. A binary relation on X is defined to be 
a function 
R:X 
-^^{X) 
from X to the power set of X. For each xeX, 
the image of x under R is a. 
subset R(x) ^ X called the set of relatives of x. It is customary to represent 
the relation RSLS a. collection of ordered pairs ^ ^ X x X, where 
(x, X')G,^ 
ifandonlyif 
x'G R(x). 
In this case we say that x' is related to x. Notice that this does not necessarily 
imply that x is related to x. (Perhaps one should read "will inherit from" 
instead of "is related to," as in the case of a poor nephew with ten children 
and his rich widowed childless aunt.) 
A binary relation R on X may satisfy one or more of the following prop-
erties: 
symmetric property 
x' e R{x) => xe R(x') 
(x, x' e X), 
antisymmetric property 
x' e R(x) =>x4 R(x') 
(x, x' e X), 
reflexive property 
X e R{x) 
(x e X), 
irreflexive property 
X $ R(x) 
(x G XX 
transitive property 
z e R(yX y e R(x) => ze R(x) 
(x, y,ze 
X). 
Such a relation is said to be an equivalence if it is reflexive, symmetric, and 
transitive. A binary relation is called a strict partial order if it is irreflexive and 
transitive. It is a simple exercise to show that a strict partial order will also be 
antisymmetric. 

1. 
Basic Definitions and Notations 
3 
Graphs 
Let us formally define the notion of a graph. A graph^ G consists of a finite 
set V and an irreflexive binary relation on V, We call V the set of vertices. The 
binary relation may be represented either as a collection E of ordered pairs or 
as a function from V to its power set, 
Adj: K->^(F). 
Both of these representations will be used interchangeably. We call Adj(f) 
the adjacency set of vertex v, and we call the ordered pair (v, w) e £ an edge. 
Clearly 
(f, w)eE 
if and only if 
we Adj(i;). 
In this case we say that w is adjacent to v and v and w are endpoints of the edge 
(v, w). The assumption of irreflexivity implies that 
(v,v)^E 
(veVX 
or equivalently, 
t;^Adj(t;) 
(veV). 
We further denote 
Niv) = {v} + Adj(t;), 
which is called the neighborhood of v. 
In this book we will usually drop the parentheses and the comma when 
denoting an edge. Thus 
xysE 
and 
(x, y)eE 
mil have the same meaning. This convention, we beheve, improves the clarity 
of exposition. 
We have defined a graph as a set and a certain relation on that set. It is often 
convenient to draw a "picture" of the graph. This may be done in many ways. 
Usually one draws a circle for each vertex and connects vertex x and vertex y 
with a directed arrow whenever xy is an edge. If both xy and yx are edges, then 
sometimes a single line joins x and y without arrows. Figure 1.1 shows three 
of the many possible drawings that one could use to represent the same graph. 
In each case the adjacency structure remains unchanged. Occasionally, very 
intelligent persons will become extremely angry because one does not like the 
other's pictures. When this happens it is best to remember that our figures 
are meant simply as a tool to help understand the underlying mathematical 
structure or as an aid in constructing a mathematical model for some appli-
cation. 
* Some authors use the term directed graph or digraph. 

1. 
Graph Theoretic Foundations 
d 
Figure 1.1. Three pictures of the same graph. 
Two graphs G = (K, £) and G = (V\ E') are called isomorphic, denoted 
G ^ G\ if there is a bijection/: V -^ V satisfying, for all 
x.yeV, 
(x,y)eEoif{x)J(y))eE\ 
Two edges are adjacent if they share a common endpoint; otherwise they are 
nonadjacent. 
Let G = (K, £) be a graph with vertex set V and edge set E. The graph 
G~^ = (V, E~^)is said to be the reversal of G, where 
E-' = 
{(x,y)\(y,x)eEl 
that is, 
xyeE~^ 
oyxeE 
(x,ye 
V). 
We define symmetric closure of G to be the graph G = (V, E), where 
E = 
EuE'K 
A graph G = (K, £) is called undirected if its adjacency relation is symmetric, 
i.e., if 
E = 
E-\ 
or equivalently, 
£ = £. 
We occasionally denote an undirected edge by ao = {ab} u {ba}. A graph 
H = (V, F) is called an oriented graph if its adjacency relation is antisym-
metric, i.e., if 
If, in addition, F + F~^ = E, then H (or F) is called an orientation of G 
(or £). The four nonisomorphic orientations of the pentagon are given in 
Figure 1.2. 
Let G = (F, £) be an undirected graph. We define the complement of G 
to be the graph G = (F, £), where 
£ = {(x, >;)G F X KU 7^ }; and (x, y)^ £}. 

1. 
Basic Definitions and Notations 
Pentagon 
^ i 
Figure 1.2. The four nonisomorphic orientations of the pentagon. 
Intuitively, the edges of G become the nonedges of G and vice versa. A graph 
is complete if every pair of distinct vertices is adjacent. Thus, the complement 
G = (K, £) of G could equivalently be defined as that set E satisfying E nE 
= 0 and E + E complete. The complete graph on n vertices is usually 
denoted by X„ (see Figure 1.3). 
A (partial) subgraph of a graph G = (F, £) is defined to be any graph H = 
(V\ E') satisfying V ^ V and E' ^ E. Two types of subgraphs are of particu-
lar importance, namely, the subgraph spanned by a given subset of edges and 
the subgraph induced by a given subset of vertices. They will now be described. 
A subset S ^ E of the edges spans the subgraph H = (Vg, S), where 
Vs = {veV\v 
is Siu endpoint of some edge of 5}. We call H the (partial) 
subgraph spanned by S. 
Okay partnerA 
hand over that\ 
triangle II 
I 
^ 
^ 
Figure 1.3. Some complete graphs. 

1. 
Graph Theoretic Foundations 
o ^ 
A graph G 
- • e 
c 
d 
V ' 
A (partial) 
subraph of G 
The subset spanned by 
5 = [df, fd, ef, fe) 
The induced subgraph 
Figure 1.4. Examples of subgraphs. 
Given a subset A^V 
oi the vertices, we define the subgraph induced by A 
to be GA = (A, EA\ where 
EA = {xyeE\xeA 
and ye A}. 
For vG A WQ denote Adj^(t;) = Adj(t;) n A. Obviously not every subgraph 
of G is an induced subgraph of G (Figure 1.4). 
Let G = (V,E)bc an undirected graph. Consider the following definitions. 
Clique: A subset A^Vofr 
vertices is an r-clique if it induces a complete 
subgraph, i.e., if G^ = K^.A single vertex is a 1-clique. A clique A is maximal 
if there is no clique of G which properly contains A as a subset. A cUque is 
maximum if there is no clique of G of larger cardinality. Some authors use the 
term complete set to indicate a clique. 
co(G) is the number of vertices in a maximum clique of G; it is called the 
clique number of G. 
A clique cover of size fc is a partition of the vertices V = A^ -\- A2 + " • 
+ Aj, such that each Ai is a clique. 
k{G) is the size of a smallest possible cHque cover of G; it is called the 
clique cover number of G. 
A stable set is a subset X of vertices no two of which are adjacent. Some 
authors use the term independent set to indicate a stable set. 
a(G) is the number of vertices in a stable set of maximum cardinahty; it is 
called the stability number of G. 

1. 
Basic Definitions and Notations 
7 
A proper c-coloring is a partition of the vertices F = X^ + X2 + • • • -f X^ 
such that each X^ is a stable set. In such a case, the members of X, are 
"painted" with the color i and adjacent vertices will receive different colors. 
We say that G is c-colorable. It is common to omit the word proper; a coloring 
will always be assumed to be a proper coloring. 
X(G) is the smallest possible c for which there exists a proper c-coloring of 
G; it is called the chromatic number of G. 
It is easy to see that 
co(G) < x(G) 
and 
a(G) < /c(G), 
since every vertex of a maximum clique (maximum stable set) must be con-
tained in a different partition segment in any minimum proper coloring 
(minimum chque cover). There is an obvious duality to these notions, 
namely, 
co(G) = a(G) 
and 
z(G) = fc(G). 
Let G = (F, £) be an arbitrary graph. The out-degree of a vertex x, de-
noted by rf'^(x), is defined as d'^(x) = | Adj(x)|. The in-degree d~(x) of x 
is defined similarly: 
d-ix) = 
\{y€V\xeAdiiy)}\. 
Although in general d'^(x) and d~(x) will not be equal, we do have 
'Zd^(x)= Y.d-(x) = \E\, 
xeV 
xeV 
each ordered pair in E contributing 1 to both summands. A vertex whose out-
degree (in-degree) equals zero is called a sink (source). If both d^(x) = 0 and 
d~(x) = 0, then x is an isolated vertex. 
When G is an undirected graph the situation is somewhat special. Ii^ such a 
case d'^ix) = d~(x) for each xeV, and we call this number simply the degree 
of X, denoted d(x). That is, the degree of x in an undirected graph is the size of 
its adjacency set. Finally, defining || £|| = ^ | E | we obtain the familiar formula 
Y.d(x)=\\E\\. 
1 
2 
xeV 
Let G = (F, £) be an arbitrary graph. We present some fairly standard 
definitions. 
Chain: A sequence of vertices [VQ, TJ, i;2,..., vj is a chain of length I in G 
ifVi^iViEE or ViVi-i eE for i = 1, 2,..., /. 
Path: A sequence of vertices [VQ, i^i, 1^2, • • •, vi] is a path from VQ to Vi of 
length I in G provided that VI-IVIEE 
for i = 1, 2,..., /. 

8 
1. 
Graph Theoretic Foundations 
^s 
^^4,3 
>k 
Figure 1.5. 
AVA 
5/r, 
A path or chain in G is called simple if no vertex occurs more than once. It 
is called trivial if / = 0. 
Connected graph: A graph G is connected if between any two vertices there 
exists a chain in G joining them. 
Strongly connected graph: A graph G is strongly connected if for any two 
vertices x and y there exists a path in G from x to y. 
Remark. The notions of chain and path coincide when G is an undirected 
graph. 
Cycle: A sequence of vertices [VQ, Vi, V2, ..., Vi, VQ] is called a cycle of 
length / -f 1 (or closed path) if Vi^ iVi e £ for / = 1, 2,..., / and VIVQ e E. 
Simple cycle: A cycle [VQ, Vi, V2,. -., Vi, VQ] is a, simple cycle if Vi ^ Vj for 
Chordless cycle: A simple cycle [vo,Vi,V2,^",Vi,Vo]is 
chordless ifviVj ^ E 
for i and; differing by more than 1 mod / + 1. 
Bipartite graph: An undirected graph G = (K, £) is bipartite if its vertices 
can be partitioned into two disjoint stable sets F = Si + S2, i.e., every edge 
has one endpoint in Si and the other in S2. Equivalently, G is bipartite if and 
only if it is 2-colorable. It is customary to use the notation G = (Si, S2, E), 
which emphasizes the partition. Vertices x e Sf and y e Sj are of the same 
parity if i = j and are of opposite parity if i ^ j . 

2. Intersection Graphs 
9 
Complete bipartite graph: A bipartite graph G = {Si, S2, E) is complete if 
for every xeSi and y e ^2 we have xy e JE, i.e., every possible edge that could 
exist does exist. 
Throughout the text certain graphs will occur many times. We give names 
to some of them (see Figure 1.5). 
K„: the complete graph on n vertices or n-clique. 
C„: the chordless cycle on n vertices or n-cycle. 
P„: 
the chordless path graph on n vertices or n-path. 
K^„: the complete bipartite graph on m -\- n vertices partitioned into an 
m-stable set and an n-stable set. 
Ki„:thQ star graph on n -h 1 vertices. 
mK„: m disjoint copies of iC„. 
There is obviously some overlap with these names. For example, ^3 = C3 is 
called a triangle. Notice also that C4 = 2K2 and K„„ = 2K„. 
2. 
Intersection Graphs 
Let #^ be a family of nonempty sets. The intersection graph of #" is obtained 
by representing each set in #' by a vertex and connecting two vertices by an 
edge if and only if their corresponding sets intersect. When ^ is allowed to be 
an arbitrary family of sets, the class of graphs obtained as intersection graphs 
is simply all undirected graphs (Marczewski [1945]). The problem of char-
acterizing the intersection graphs of families of sets having some specific 
topological or other pattern is often very interesting and frequently has 
applications to the real world. 
The intersection graph of a family of intervals on a linearly ordered set 
(like the real line) is called an interval graph. If these intervals are required 
to have unit length, then we have a unit interval graph; a proper interval graph 
is constructed from a family of intervals on a line such that no interval prop-
erly contains another. Roberts [1969a] showed that the classes of unit in-
terval graphs and proper interval graphs coincide. Interval graphs are 
discussed in Section 1.3 and in Chapter 8. 
Consider the following relaxation of the notion of intervals on a Hne. If we 
join the two ends of our hne, thus forming a circle, the intervals will become 
arcs on the circle. Allowing arcs to slip over and include the point of connec-
tion, we obtain a class of intersection graphs called the circular-arc graphs, 
which properly contains the interval graphs. Circular-arc graphs have been 
extensively studied by A. C. Tucker and others. We will survey these results 

10 
1. 
Graph Theoretic Foundations 
in Section 8.6. There are a number of interesting applications of circular-arc 
graphs, including computer storage allocation and the phasing of traffic 
lights. Let us look at an example of the latter application. 
Example. The traffic flow at the corner of Holly, Vood, and Wine is 
pictured in Figure 1.6. Certain lanes are compatible with one another, such 
as c and7, or d and fc, while others are incompatible, such as h and/ In order 
to avoid colHsions, we wish to install a traffic light system to control the flow 
of vehicles. Each lane will be assigned an arc on a circle representing the time 
interval during which it has a green light. Incompatible lanes must be assigned 
disjoint arcs. The circle may be regarded as a clock representing an entire 
cycle which will be continually repeated. An arc assignment for our example 
is given in Figure 1.7. In general, if G is the intersection graph of the arcs of 
such an assignment (see Figure 1.8), and if E is the compatibility relation 
defined on the pairs of lanes, then clearly G is a (partial) subgraph of //. In 
our example, the compatible pairs (d, /c), (/i,;), and (1,7) are in E but are not in 
G. Additional aspects of this problem, such as how to choose an arc assign-
ment which minimizes waiting time, can also be incorporated into the model. 
The reader is referred to Stoffers [1968] and Roberts [1976, pp. 129-134; 
1978, Section 3.6] for more details. 
A proper circular-arc graph is the intersection graph of a family of arcs 
none of which properly contains another. It can be shown (Theorem 8.18) 
A 
3 : 
c 
< 
N 
ilr 
Holly Street 
Figure 1.6. 

2. 
Intersection Graphs 
11 
Figure 1.7. 
The clock cycle. 
that every proper circular-arc graph has a representation as intersecting 
arcs of a circle in which not only is no arc properly contained in another but 
also no pair of arcs together cover the entire circle. 
In a different generalization of interval graphs, Renz [1970] characterized 
the intersection graphs of paths in a tree, and Gavril [1978] gives a recogni-
tion algorithm for them. Walter [1972], Buneman [1974], and Gavril [1974] 
carried this idea further and showed that the intersection graphs of subtrees of 
a tree are exactly the triangulated graphs of Chapter 4. All of this is summar-
ized in Figure 1.9. 
A permutation diagram consists of n points on each of two parallel lines 
and n straight line segments matching the points. The intersection graph of 
the line segments is called a permutation graph. These graphs will be discussed 
Figure 1.8. 
G, the circular-arc graph. 

12 
1. 
Graph Theoretic Foundations 
c^^uees of Q f^^ 
in Chapter 7. If the 2n points are located randomly around a circle, then the 
matching segments will be chords of the circle and the resulting class of 
intersection graphs, studied in Chapter 11, properly contains the permutation 
graphs. A simple argument shows that every proper circular-arc graph is also 
the graph of intersecting chords of a circle: We may assume that no pair of 
arcs together covers the entire circle (Theorem 8.18). For each arc on the 
circle, draw the chord connecting its two endpoints. Clearly, two arcs overlap 
if and only if their corresponding chords intersect. 
There are many other interesting classes of intersection graphs. We have 
introduced you to only some of them, specifically those classes which will 
be developed further in the text. To the reader who wishes to investigate other 
intersection graphs we offer the following references: 
Cubes and boxes in n-space: 
Convex sets in n-space: 
Danzer and Grunbaum [1967], 
Roberts [1969b]. 
Wegner [1967], 
Ogden and Roberts [1970]. 

3. Interval Graphs—A Sneak Preview 
13 
3. 
interval Graphs—A Sneak Preview of the Notions 
Coming Up 
Our intention in this section is to arouse the reader's curiosity by presenting 
some basic ideas that will be pursued in greater detail in later chapters. We 
also hope to imbue the reader with a sense of how the subject matter is 
relevant to applied mathematics and computer science. 
An undirected graph G is called an interval graph if its vertices can be put 
into one-to-one correspondence with a set of intervals ^ of a linearly ordered 
set (like the real line) such that two vertices are connected by an edge of G if 
and only if their corresponding intervals have nonempty intersection. We 
call e/ an interval representation for G. (It is unimportant whether we use open 
intervals or closed intervals; the resulting class of graphs will be the same.) An 
interval representation of the windmill graph is given in Figure 1.10. 
Let us discuss one application of interval graphs. Many other such 
applications will be presented in Section 8.4. 
Application to Scheduling 
Consider a collection C = {cj of courses being offered by a major uni-
versity. Let Ti be the time interval during which course c^ is to take place. We 
would like to assign courses to classrooms so that no two courses meet in the 
same room at the same time. 
This problem can be solved by properly coloring the vertices of the graph 
G = (C, E) where 
CiCjeEoTinTj¥^ 
0. 
Each color corresponds to a different classroom. The graph G is obviously an 
interval graph, since it is represented by time intervals. 
a^ 
^d 
4 
^c 
4 
/^ 
4 
^, 
h 
h 
Figure 1.10. An interval graph— the windmill graph (at left)—and an interval representation 
for it. 

14 
1. Graph Theoretic Foundations 
This example is especially interesting because efficient, linear-time 
algorithms are known for coloring interval graphs with a minimum number 
of colors. (The minimum coloring problem is NP-complete for general 
graphs, Section 2.1.) We will discuss these algorithms in subsequent chapters. 
Remark. The determination of whether a given graph is an interval 
graph can also be carried out in hnear time (Section 8.3). 
We have chosen interval graphs as an introduction to our studies because 
they satisfy so many interesting properties. The first fact that we notice is 
that being an interval graph is a hereditary property. 
Proposition 1.1. An induced subgraph of an interval graph is an interval 
graph. 
Proof. If {/y}„eK is an interval representation for a graph G = (F, £), 
then {Iv}vex is an interval representation for the induced subgraph Gx = 
Hereditary properties abound in graph theory. Some of our favorites 
include planarity, bipartiteness, and any "forbidden subgraph" char-
acterization. The next property of interval graphs is also a hereditary 
property. 
Triangulated graph property. Every simple cycle of length strictly greater 
than 3 possesses a chord. 
Graphs which satisfy this property are called triangulated graphs. The 
graph in Figure 1.10 is triangulated, but the house graph in Figure 1.11 is not 
triangulated because it contains a chordless 4-cycle. 
Proposition 1.2 (Hajos [1958]). An interval graph satisfies the triangu-
lated graph property. 
Figure 1.11. A graph which is not triangulated: The house graph. 

3. Interval Graphs—A Sneak Preview 
15 
Figure 1.12. A triangulated graph which is not an interval graph. 
Proof. Suppose the interval graph G contains a chordless cycle [VQ, i^i, 
i;2,..., i^f _ 1, i^o] with / > 3. Let I^ denote the interval corresponding to Vj,. For 
i = 1, 2,..., / — 1, choose a point pi 6 /j-1 n I^. Since /^_ i and /^ +1 do not 
overlap, the pi constitute a strictly increasing or strictly decreasing sequence. 
Therefore, it is impossible for IQ and /^.j to intersect, contradicting the 
criterion that i^o ^/ -1 is an edge of G. 
| 
Not every triangulated graph is an interval graph. Consider the tree T 
given in Figure 1.12, which certainly has no chordless cycles. The intervals 
laJb^ and Ic of a representation for T would have to be disjoint, and I^ would 
properly include the middle interval, say Ij,. Where, then, could we put ly so 
that it intersects /^ but not /^? Clearly we would be stuck. So there must be 
more to the story of interval graphs than we have told so far. 
Transitive orientation property. 
Each edge can be assigned a one-way 
direction in such a way that the resulting oriented graph (F, F) satisfies the 
following condition: 
abeF and beef 
imply 
acef 
(Va, b,cG V). 
(1) 
An undirected graph which is transitively orientable is sometimes called a 
comparability graph. Figure 1.13 shows a transitive orientation of the A 
graph and of the suspension bridge graph. The odd length chordless cycles 
C5, C7, C9,... and the bull's head graph (see Figure 1.14) cannot be transi-
tively oriented. 
Proposition 1.3 (Ghouila-Houri [1962]). The complement of an interval 
graph satisfies the transitive orientation property. 
Proof. Let {Iv}vev be an interval representation for G = (F, E). Define 
an orientation F of the complement G = (F, £) as follows: 
xyeFoix 
< ly 
(yxyeE). 

16 
1. 
Graph Theoretic Foundations 
The A graph 
A 
The suspension bridge graph 
Figure 1.13. Transitive orientations of two comparability graphs. 
Here I^ < ly means that the interval /^ lies entirely to the left of the interval 
ly. (Remember, they are disjoint.) Clearly (1) is satisfied, since I^ < ly < I^ 
implies I^ < L. Thus, F is a transitive orientation of G. 
| 
As in the case of triangulated graphs, there are graphs whose complements 
are comparability graphs but which fail to be interval graphs. So it seems that 
Propositions 1.2 and 1.3 simply provide necessary (but not sufficient) condi-
tions for interval graphs. Rather than wait any longer, we state an important 
result that says, if we put these two properties together, we get (drum roll, 
please) exactly all interval graphs. 
Theorem 1.4 (Gilmore and Hoffman [1964]). An undirected graph G 
is an interval graph if and only if G is a triangulated graph and its complement 
G is a comparability graph. 
The proof of sufficiency is postponed until Chapter 8, primarily because 
this is a "getting acquainted with" section. 
Looking back, each of the graphs in Figures 1.10, 1.11, and 1.13 can be 
properly colored using three colors and each contains a triangle. Therefore, 
C^ 
The bull's head graph 
Figure 1.14. 
Two graphs which are not transitively orientable. Why? 

4. 
Summary 
17 
for these graphs, their chromatic number equals their chque number. This is 
not an accident. In Chapters 4 and 5 we will show that any triangulated graph 
and any comparabihty graph also satisfies the following properties. 
X-Perfect property. For each induced subgraph GA of G, 
XiGA) = co(G J. 
The chordless cycles C5, C7, Cg are not /-perfect. A dual notion of/-perfec-
tion is the following: 
a-Perfect property. For each induced subgraph G^ of G, 
a(GJ = fc(GJ. 
A very important theorem in Chapter 3 states that a graph is /-perfect if and 
only if it is a-perfect. This equivalence was originally conjectured by Claude 
Berge, and it was proved some ten years later by Laszlo Lovasz. 
4. 
Summary 
The reader has been introduced to the graph theoretic foundations needed 
for the remainder of the book. In addition, he has had a taste of some of the 
particular notions that we intend to investigate further. Returning to the 
table of contents at this point, he will recognize many of the topics listed. 
The chapter dependencies are given in Figure 1.15. 
Figure 1.15. The chapter dependencies. The reader may wish to read Chapters 1 and 2 
quickly and refer back to them as needed. 

18 
1. 
Graph Theoretic Foundations 
In the next chapter we will present the foundations of algorithmic design 
and analysis. As was the case in this chapter, many examples will be given 
which will introduce the reader to the ideas and techniques that he will find 
helpful in subsequent chapters. 
EXERCISES 
1. Show that the graphs in Figures 1.16 and 1.17 are both intersection graphs 
of a family of chords of a circle but that neither is a circular-arc graph. 
^ 
Figure 1.16. 
Figure 1.17. 
2. Can you find graphs for each zone of the Venn diagram in Figure 1.9? 
3. Let #" be a family of intervals on a line such that no interval contains 
another. Show that none of the left endpoints coincide. Give a procedure 
which constructs a family ^' of unit intervals such that the intersection graphs 
of ^ and ^' are isomorphic. 
4. Let G = (K, £) be any undirected graph. Show that there is a family ^ of 
subsets of V such that G is the intersection graph of ^ . 
5. Let G be the intersection graph of a family of paths in a tree and let i; be a 
vertex of G. Show that the induced subgraph G{yj+Adj(t;) is an interval graph. 
6. Prove directly (using only the definition) that the graph in Figure 1.17 
does not have an interval representation and is therefore not an interval 
graph. 
7. Give an interval representation for the graph in Figure 1.18. Show that 
it is not a comparabihty graph. Why is this not in conflict with the Gilmore-
Hoff'man theorem? 
Figure 1.18. 
8. Give a graph theoretic solution to the following problem: A group of 
calculus teaching assistants each gives two office hours weekly which are 
chosen in advance. Because of budgetary reasons, the TAs must share 

Exercises 
19 
offices. Since each office has only one blackboard, hoW can office space be 
assigned so that at any particular time no more than one TA is meeting with 
students? 
9. Give an example to show that the graph you obtain in Exercise 8 is not 
necessarily an interval graph. How could we alter the problem so that we 
would obtain only interval graphs? 
10. Is the bull's head graph (Figure 1.14) an interval graph? Is the comple-
ment of the suspension bridge graph (Figure 1.13) an interval graph? What is 
a good name for this last graph? 
11. 
An undirected graph is self-complementary if it is isomorphic to its 
complement. Show that there are exactly two self-complementary graphs 
having five vertices. How many are there for four vertices? Six vertices? 
12. Let G = (K, £) be an undirected graph. A subset A ^ V is called an 
edge cover of G if for every edge xy e E, either xe A or ye A or both. Prove 
that ^ is a minimum edge cover if and only if K — A is a maximum stable set. 
13. Let ^ = {SJxev be a family of subsets of a set. Two members S^ and 
Sy of J^ overlap, denoted S^i Sy, if S^nSy¥^ 
0 , S^^Sy, 
and Sy^S^. 
The 
overlap graph of #^ is the undirected graph G = (V, E) where 
xyeE 
if and only if S^ I Sy 
(x, y e V). 
(i) Show that if x and y are in separate connected components G^ 
and GB of G, then 
S^^Sy^Sa^Sy 
(aeA). 
(ii) Let ^ be the collection of (maximal) connected components of G. 
Show that the relation <, defined for all G^, G^ e ^ as 
GA < GBO^xeA^yeB 
such that Sx ^ Sy, 
is a strict partial order of ^. 
14. A family ^ of distinct nonempty subsets of a set 5 is a representation of a 
graph G if the intersection graph of ^ is isomorphic to G. A representation is 
minimum if the set S is of smallest possible cardinality over all representations 
of G. A graph G is uniquely intersectable if for all minimum representations 
J^i and J^2 of G, #"1 and ^2 ^re isomorphic. 
(i) Prove that every triangle-free graph is uniquely intersectable. 
A star n-gon is constructed from the cycle C„ by adjoining new vertices to 
the endpoints of each edge. Figure 1.19 illustrates a star 7-gon. 
(ii) Verify that the family J^ - {5o, 5^,..., S„_ j , DQ, Di,..., D„_ J is a 
minimum representation of the star n-gon, where S, = {i} and Di = 
{i, i -h 1 mod n}. 
(iii) Prove that every star n-gon is uniquely intersectable (Alter and 
Wang [1977]). 

20 
1. 
Graph Theoretic Foundations 
Figure 1.19. 
A star 7-gon. 
15. The Berge mystery story. Six professors had been to the Ubrary on the day 
that the rare tractate was stolen. Each had entered once, stayed for some time, 
and then left. If two were in the library at the same time, then at least one of 
them saw the other. Detectives questioned the professors and gathered the 
following testimony: Abe said that he saw Burt and Eddie in the Hbrary; Burt 
said that he saw Abe and Ida; Charlotte claimed to see Desmond and Ida; 
Desmond said that he saw Abe and Ida; Eddie testified to seeing Burt and 
Charlotte; Ida said that she saw Charlotte and Eddie. 
One of the professors lied!! Who was it? 
Research Problem. Characterize uniquely intersectable graphs and/or give 
a recognition algorithm. 
Bibliography 
Alter, R., and Wang, C. C. 
[1977] Uniquely intersectable graphs. Discrete Math. 18, 217-226. 
Berge, Claude 
[1973] "Graphs and Hypergraphs," Chapter 16, North-Holland. Amsterdam, 1973. 
MR50 #9640. 
[1975] Perfect graphs, in " Studies in Graph Theory," Part I (D. R. Fulkerson, ed.), pp. 1-22. 
M.A.A. Studies in Mathematics Vol. 11, Math. Assoc. Amer., Washington, D.C. 
MR53 #10585. 
Buneman, Peter 
[1974] A characterization of rigid circuit graphs. Discrete Math. 9, 205-212. MR50 # 9686. 
Danzer, L., and Grunbaum, B. 
[1967] Intersection properties of boxes in (R'', unpublished mimeograph, Univ. of Washing-
ton, Seattle. 

Bibliography 
21 
Erdos, P., Goodman, A., and Posa, L., 
[1966] The representation of a graph by set intersections, Canad. J. Math. 18, 106-112. 
MR32 #4034. 
Gavril, Fanica 
[ 1974] The intersection graphs of subtrees in trees are exactly the chordal graphs, J. Combin-
atorial Theory B 16, 47-56. MR48 #10868. 
[1978] A recognition algorithm for the intersection graphs of paths in trees, Discrete Math. 
23,211-227. 
Ghouila-Houri, Alain 
[1962] Caracterisation des graphes non orientes dont on pent orienter les arretes de maniere 
a obtenir le graphe d'une relation d'ordre, C. R. Acad. Sci. Paris 254, 1370-1371. 
MR30 #2495. 
Gilmore, Paul C , and Hoffman, Alan J. 
[1964] A characterization of comparability graphs and of interval graphs, Canad. J. Math. 
16,539-548. MR31 #87. 
Hajos, G. 
[1957] 
Uber eine Art von Graphen, Intern. Math. Nachr. 11, Problem 65. 
First posed the problem of characterizing interval graphs. 
Marczewski, E. 
[1945] Sur deux proprietes des classes d'ensembles. Fund. Math. 33, 303-307. 
Ogden, W. F., and Roberts, Fred S. 
[1970] Intersection graphs of families of convex sets with distinguished points, in "Com-
binatorial Structures and Their Applications" (R. Guy, H. Hanani, N. Sauer, and 
J. Schonheim, eds.), pp. 311-313. Gordon and Breach, New York. 
Renz, P. L. 
[1970] Intersection representations of graphs by arcs. Pacific J. Math. 34, 501-510. MR42 
#5839. 
Roberts, Fred S. 
[1969a] Indifference graphs, in "Proof Techniques in Graph Theory" (F. Harary, ed.), pp. 
139-146. Academic Press, New York. MR40 #5488. 
[1969b] On the boxity and cubicity of a graph, in "Recent Progress in Combinatorics" 
(W. T. Tutte, ed.), pp. 301-310. Academic Press, New York. 
[1976] "Discrete Mathematical Models, with Applications to Social, Biological, and 
Environmental Problems." Prentice-Hall, Englewood Cliffs, New Jersey. 
[1978] Graph Theory and its Applications to Problems of Society, NFS-CBMS Mono-
graph No. 29. SIAM, Philadelphia, Pennsylvania. 
Stoffers, K. E. 
[1968] Scheduling of traffic hghts—a new approach. Transportation Res. 2, 199-234. 
Walter, J. R. 
[1972] 
Representations of rigid cycle graphs, Ph.D. thesis, Wayne State Univ. 
Wang, D. L. 
[1976] A note on uniquely intersectable graphs, Studies in Appl. Math. 55, 361-363. 
Wegner, G. 
[1967] Eigenschaften der Nervan Homologische-einfacher Familien in (R", Ph.D. thesis, 
Gottingen. 

CHAPTER 
The Design of 
Efficient Algorithms 
1. 
The Complexity of Computer Algorithms 
With the advent of the high-speed electronic computer, new branches of 
apphed mathematics have sprouted forth. One area that has enjoyed a most 
rapid growth in the past decade is the complexity analysis of computer 
algorithms. At one level, we may wish to compare the relative efficiencies of 
procedures which solve the same problem. At a second level, we can ask 
whether one problem is intrinsically harder to solve than another problem. 
It may even turn out that a task is too hard for a computer to solve within a 
reasonable amount of time. Measuring the costs to be incurred by imple-
menting various algorithms is a vital necessity in computer science, but it 
can be a formidable challenge. 
Let us reflect for a moment on the differences between computability and 
computational complexity. These two topics, along with formal languages, 
become the pillars of the theory of computation. Computability addresses 
itself mostly to questions of existence: Is there an algorithm which solves 
problem n? An early surprise for many math and computer science students 
is that one can prove mathematically that computers cannot do everything. 
A standard example is the unsolvability of the halting problem. Loosely 
stated, this says that it is impossible for a professor to write a computer program 
which will accept as data any student's programming assignment and will 
return either the answer ''yes, this student's program will halt within finite time'' 
or ''no, this student's program (has an infinite loop and) will run forever." 
Proving that a problem is computable usually, but not always, consists of 
22 

1. 
Complexity of Computer Algorithms 
23 
demonstrating an actual algorithm which will terminate with a correct 
answer for every input. The amount of resources (time and space) used in the 
calculation, although finite, is unlimited. Thus, computability gives us an 
understanding of the capabilities and limitations of the machines that man-
kind can build, but without regard to resource restrictions. 
In contrast to this, computational complexity deals precisely with the 
quantitative aspects of problem solving. It addresses the issue of what can be 
computed within a practical or reasonable amount of time and space by 
measuring the resource requirements exactly or by obtaining upper and 
lower bounds. Complexity is actually determined on three levels: the problem, 
the algorithm, and the implementation. Naturally, we want the best algorithm 
which solves our problem, and we want to choose the best implementation of 
that algorithm. 
A problem consists of a question to be answered, a requirement to be 
fulfilled, or a best possible situation or structure to be found, called a solution, 
usually in response to several input parameters or variables, which are 
described but whose values are left unspecified. A decision problem is one 
which requires a simple "yes" or "no" answer. An instance of a problem 11 is 
a specification of particular values for its parameters. An algorithm for 11 is a 
step-by-step procedure which when applied to any instance of 11 produces 
a solution. 
Usually we can rewrite an optimization problem as a decision problem 
which at first seems to be much easier to solve than the original but turns out 
to be just about as hard. Consider the following two versions of the graph 
coloring problem. 
GRAPH COLORING (optimization version) 
Instance: An undirected graph G. 
Question: What is the smallest number of colors needed for a proper coloring 
ofG? 
GRAPH COLORING (decision version) 
Instance: An undirected graph G and an integer fc > 0. 
Question: Does there exist a proper/: coloring of G? 
The optimization version can be solved by applying an algorithm for the 
decision version n times for an n-vertex graph. If the n decision problems are 
solved sequentially, then the time needed to solve the optimization version is 
larger than that for the decision version by at most a factor of n. However, if 
they can be solved simultaneously (in parallel), then the time needed for 
both versions is essentially the same. 
It is customary to express complexity as a function of the size of the input. 
We say that an algorithm s/ for n runs in time 0(f{m)) if for some constant 

24 
2. 
Design of Efficient Algorithms 
c > 0 there exists an implementation of s^ which terminates after at most 
c/(m) (computational) steps for all instances of size m. The complexity of an 
algorithm j / is the smallest function / such that s^ runs in 0(f(m)). The 
complexity of a problem IT is the smallest/for which there exists an 0(f(m)y 
time algorithm j ^ for 11, i.e., the minimum complexity over all possible 
algorithms solving 11. Thus, demonstrating and analyzing the complexity of a 
particular algorithm for 11 provides us with an upper bound on the complexity 
ofn.* 
By presenting faster and more efficient algorithms and implementations of 
algorithms, successive researchers have improved the complexity upper 
bounds (i.e., lowered them) for many problems in recent years. Consider the 
example of testing a graph for planarity. A graph is planar if it can be drawn on 
the plane (or on the surface of a sphere) such that no two edges cross one 
another. Kuratowski's [1930] characterization of planar graphs in terms of 
forbidden configurations provides an obvious exponential-time planarity 
algorithm, namely, verify that no subset of vertices induces a subgraph 
homeomorphic to K^ or 2K^. Auslander and Parter [1961] gave a planar 
embedding procedure, which Goldstein [1963] was able to formulate in such 
a way that halting was guaranteed. Shirey [1969] implemented this algorithm 
to run in O(n^) time for an n-vertex graph. In the meantime, Lempel, Even, 
and Cederbaum [1967] gave a different planarity algorithm, and, although 
they did not specify a time bound, an easy 0{n^) implementation exists. 
Hopcroft and Tarjan [1972, 1974] then improved the Auslander-Parter 
method first to 0(n log n) and finally to 0(n), which is the best possible. 
Booth and Leuker showed that the Lempel-Even-Cederbaum method 
could also be implemented to run in 0(n) time. Table 2.1 shows the stages of 
improvement for the planarity problem and for the maximum-network-flow 
problem. Tarjan [1978] summarizes the progress on a number of other 
problems. 
Determining the complexity of a problem 11 requires a two-sided attack: 
(1) The upper bound—the minimum complexity over all known algorithms 
solving n. 
(2) The lower bound—thQ largest function/for which it has been proved 
(mathematically) that all possible algorithms solving n are required to have 
complexity at least as high as/ 
Our ultimate goal is to make these bounds coincide. A gap between (1) and 
(2) tells us how much more research is needed to achieve this goal. For many 
* We have just described the worst-case complexity analysis. One may also formulate 
complexity according to the average case. A good discussion of the pros and cons of average-case 
analysis can be found in Weide [1977, Section 4]. 

1. 
Complexity of Computer Algorithms 
25 
Table 2.1 
Progress on the complexity of two combinatorial problems 
Planarity: 
A graph with n vertices 
Maximum network flow: 
A network with n vertices and e edges 
exp 
n log n 
Kuratowski [1930] 
Auslander and Farter 
[1961] 
Goldstein [1963] 
Shirey[1969] 
Lempel, Even, and 
Cederbaum [1967] 
Hopcroft and Tarjan 
[1972] 
Hopcroft and Tarjan 
[1974] 
Booth and Leuker 
[1976] 
Nonterminating 
under certain 
conditions 
Ford and 
Fulkerson [1962] 
Edmonds and Karp 
[1972]" 
Dinic [1970]" 
Karzanov[1974] 
Cherkasky[1977] 
Galil [1978] 
ne log^ n 
Galil and Naamad 
[1979] 
''Done independently. 
problems this gap is stubbornly large. An example of this is the problem of 
matrix multiplication. 
In Strassen [1969] an algorithm is presented for multiplying a pair of 
2 x 2 matrices using only seven scalar multiplications. It is now known that 
seven multiplications is the best possible. For arbitrary n x n matrices 
Strassen's algorithm may be applied recursively (by first embedding the 
matrices into the next larger power of 2 in size) to obtain a general algorithm 
whose complexity is OCn*^^^'^) ^ 0(n^-^^). Until recently, 0{n^-^^) was the 
best result known. The best algorithm known for the case of 3 x 3 matrices is 
given by Laderman [1976]; it uses 23 scalar multiplications. By appropriately 
composing these two methods with themselves or each other, we can obtain 
the best algorithms known for n = 4, 6, 7, 8, 9, and many other values. For 

26 
2. 
Design of Efficient Algorithms 
n = 5, G. A. Schachtel has an algorithm using 103 multiplications, an im-
provement of one given by O. Sykora, which used 105. Asymptotically, 
however, in order to improve Strassen's general bound, one would need an 
algorithm for n = 3 using 21 or fewer multiplications (since log3 21 < 
log2 7 < log3 22) or an algorithm forn = 5 using 91 or fewer multiplications, 
etc. Amazingly, Pan [1978, 1979a] has discovered a collection of algorithms 
which do improve upon Strassen's bound. The best of these is an algorithm 
for n = 4S which uses 47,216 multiplications. Since log48 47,216 ^ 2.78, 
Pan's algorithm has a complexity of 0(n^-^^). In very recent work Pan 
[1979b] has reduced the complexity down to 0(/t^-^^^'*) for very large n. 
This is currently the upper bound for the matrix multiplication problem. 
On the other hand, the tightest lower bound known to date for this problem 
is only 0(n^) [see Aho, Hopcroft, and Ullman, 1974, p. 438]. 
The biggest open question involving the gap between upper and lower 
complexity bounds involves the so called NP-complete problems (discussed 
below). For each of the problems in this class Only exponential-time algo-
rithms are known, yet the best lower bounds proven so far are polynomial 
functions. Furthermore, if a polynomial-time algorithm exists for one of 
them, then such an algorithm exists for all of them. Included among the 
NP-complete problems on graphs are finding a Hamiltonian circuit, a 
minimum coloring, or a maximum clique. Appendix A contains a small 
collection of NP-complete problems which will suffice for the purposes of 
this book. For a more comprehensive list, the reader is referred to Garey and 
Johnson [1978]. Let us discuss the basics of this theory. 
The state of an algorithm consists of the current values of all variables 
and the location of the current instruction to be executed. A deterministic 
algorithm is one for which each state upon execution of the instruction unique-
ly determines at most one next state. Virtually all computers, as we know 
them, run deterministically. A problem n is in the class P if there exists a 
deterministic polynomial-time algorithm which solves 11. 
A nondeterministic algorithm is one for which a state may determine many 
next states and which follows up on each of the next states simultaneously. 
We may regard a nondeterministic algorithm as having the capability of 
branching off into many copies of itself, one for each next state. Thus, while a 
deterministic algorithm must explore a set of alternatives one at a time, a 
nondeterministic algorithm examines all alternatives at the same time. 
Following Reingold, Nievergelt, and Deo [1977], three special instruc-
tions are used in writing nondeterministic algorithms for decision problems: 
X <r- choice(S) creates 151 copies of the algorithm, and assigns every member 
of the set S to the variable x in one of the copies. 
failure causes that copy of the algorithm to stop execution. 

1. 
Complexity of Computer Algorithms 
27 
success causes all copies of the algorithm to stop execution and indicates 
a "yes" answer to that instance of the problem. 
A nondeterministic polynomial-time algorithm for the decision version of 
the CLIQUE problem is the following: Let G = (V, E) hQ an undirected 
graph and let /c > 0. 
procedure CLIQUE(G, k): 
begin 
1. ^ - 0 ; 
2. forall?;e F d o ^ <e-choiced^ + 
{v},A});; 
3. 
if\A\<k 
then failure; 
4. 
for si\lv,weA,v^w 
do 
5. 
if vw $ E then failure;; 
6. success; 
end 
The loop in line 2 nondeterministically selects a subset of vertices A^ 
V; 
lines 4-6 decide if ^ is a complete set. If success is reached in one of the 
copies, then the final value of A in that copy is a chque of size at least k. Using 
the above procedure we obtain a nondeterministic polynomial-time algo-
rithm for the optimization version of the CLIQUE problem as follows: Let 
G be an undirected graph with n vertices. 
procedure MAXCLIQUE(G): 
begin 
for A: <- « to 1 step — 1 do 
if CLIQUE(G, k) then return k; 
end 
A problem n is in the class NP if there exists a nondeterministic polynomial-
time algorithm which solves H. We have just demonstrated that CLIQUE 
G NP by presenting an appropriate algorithm. Clearly, P ^ NP. An im-
portant open question in the theory of computation is whether the contain-
ment of P in NP is proper; i.e., is P / NP? 
One problem Tl^ is polynomially transformable to another problem 112, 
denoted 11 ^ =^ 112, if there exists a function/mapping the instances of n^ 
into the instances of 112 such that 
(i) /is computable deterministically in polynomial time, and 
(ii) a solution to the instance/(/) of 112 gives a solution to the instance / 
of Hi, for all/. 
Intuitively this means that 11 ^ is no harder to solve than 112 ^P to an added 
polynomial term, for we could solve 11 ^ by combining the transformation/ 
with the best algorithm for solving 112 • Thus, if Ilj =^ 112, then 
COMPLEXITY(ni) < COMPLEXITY(n2) + POLYNOMIAL. 

28 
2. 
Design of Efficient Algorithms 
If 112 has a deterministic polynomial-time algorithm, then so does 111; if 
every deterministic algorithm solving Hi requires at least an exponential 
amount of time, then the same is true of 112 • 
A problem IT is NP-hard if any one of the following equivalent conditions 
holds: 
(H,) 
U'^U 
for all 
H G N P ; 
(H2) 
n G P = > P = NP; 
(if 3) the existence of a deterministic polynomial-time algorithm for IT 
would imply the existence of a polynomial-time algorithm for every problem 
inNP. 
A problem IT is NP-complete if it is both a member of NP and is NP-hard 
(see Figure 2.1). The NP-complete problems are the most difficult of those in 
the "zone of uncertainty." 
The topic of NP-completeness was initiated by Cook [1971]. Emphasizing 
the significance of polynomial-time reducibility, he focused attention on NP 
decision problems. He proved that the SATISFIABILITY problem of 
P-hard 
Figure 2.1. The hierarchy of complexities. The big open question is whether or not the 
'zone of uncertainty," NP-P, is empty. 

1. 
Complexity of Computer Algorithms 
29 
mathematical logic is NP-complete (Cook's theorem), and he suggested 
other problems which might be NP-complete. Karp [1972] presented a 
large collection of NP-complete problems (about two dozen) arising from 
combinatorics, logic, set theory, and other areas of discrete mathematics. 
In the next few years, hundreds of problems were shown to be NP-complete. 
The standard technique employed with NP-completeness is as follows: First, 
by Cook's theorem, place SATISFIABILITY in the bag of NP-complete 
problems. Next, repeat the following sequence of instructions a few hundred 
times: 
Find a candidate H which might be NP-complete. Select an appropriate 
IT' from the bag of NP-complete problems. Show that IT e NP and n ' =^ 11. 
Add n to the bag. 
An amount of cleverness is needed in selecting n ' and finding a transforma-
tion from n ' to n. By way of illustration we will demonstrate such a reduction 
in the proof of the next theorem. For a more complete treatment of Cook's 
theorem and the reductions following from it, see (in increasing level of 
scope) Reingold, Nievergelt, and Deo [1977], Aho, Hopcroft, and Ullman 
[1974], and Garey and Johnson [1978]. 
To illustrate the technique of reduction, we present the following result. 
Theorem 2.1 (Poljak [1974]). (i) STABLE SET ^ STABLE SET 
ON TRIANGLE-FREE GRAPHS; 
(ii) STABLE SET ^ GRAPH COLORING. 
Proof, (i) Let G be an undirected graph with n vertices and e edges. 
The idea of our proof will be to construct from G a certain triangle-free graph 
H with the property that knowing a(H) will immediately give us a(G). Sub-
divide each edge of G into a path of length 3; call the resulting graph H. 
Clearly, if is a triangle-free graph with n -\- 2e vertices and 3e edges. Also, H 
can be constructed from G in 0{n + e) steps. Finally, since a(/f) = a(G) + e, 
a deterministic polynomial time algorithm which solves for OL{H) yields a 
solution to a(G). 
(ii) 
Let G be an undirected graph and construct H as in part (i). Next we 
construct H' from H as follows. The vertices of H' correspond to the edges 
of H, and we connect two vertices of H' if their corresponding edges in H do 
not share a common vertex. This construction can be easily carried out in 
0{e^) steps. Since H is triangle-free, i{H') = {2e-^ n) - oi{H) = e-[^ n 
— (x(G). Thus, a(G) can be determined from x(H'). 
I 
Since it is well known that STABLE SET is NP-complete, we obtain the 
following lesser known result. 

30 
2. 
Design of Efficient Algorithms 
Corollary 2.2. STABLE SET ON TRIANGLE-FREE GRAPHS is 
NP-complete. 
A graph theoretic or other type of problem 11 which is normally hard to 
solve in the general case may have an efficient solution if the input domain is 
suitably restricted. The HAMILTONIAN CIRCUIT problem, for example, 
is trivial if the only graphs considered are trees. However, we have seen that 
restricting the STABLE SET problem to triangle-free graphs is not suf-
ficient to allow fast calculation (until someone proves that P = NP). Re-
search has found interesting families J^ of graphs for which certain hard 
problems H when restricted to J^ are nontrivial and tractable (i.e., in P). In 
this book we will consider this situation for various families of perfect graphs 
and some not so perfect graphs. A more perplexing topic currently under 
investigation by many complexity theorists is that of finding and under-
standing the cause of the boundary between the tractability and intractability 
of various problems H. 
One final note: Our definition of complexity suppressed one fundamental 
point. An implementation of an algorithm is always taken relative to some 
specified type of machine. As an underlying assumption throughout this 
book we will take the random access machine (RAM), introduced by Cook 
and Reckhow [1973], as our model of computation. The RAM is an abstrac-
tion of a general-purpose digital computer in which each storage cell has a 
unique address, allowing it to perform in one computational step an access 
to any cell, an arithmetic or Boolean operation, or a comparison. A computa-
tion is performed sequentially by a RAM, one step at a time. The theory of 
NP-complete problems is usually formulated using the Turing machine 
model rather than the RAM. This presents no difficulty, however, since any 
RAM can be simulated on a deterministic Turing machine with only a 
polynomial increase in running time. 
Summary 
Besides providing a basis for comparing algorithms which solve the same 
problem, algorithmic analysis has other practical uses. Most importantly, it 
aff'ords us the opportunity to know in advance of the computation an estimate 
or a bound on the storage and run time requirements. Such advance know-
ledge would be essential when designing a computer system for a manned 
spacecraft in which the ability to calculate trajectories and fire the guidance 
rockets appropriately within tight constraints had better be guaranteed. 
Even in less urgent situations, having advanced estimates allows a program-
mer to set job card Hmits to abort those runs which exceed the expected 

2. 
Data Structures 
31 
bounds and hence probably contain errors, and to avoid aborting correct 
programs. Also such estimates are needed by the person who must decide 
whether or not it is worthwhile spending the necessary funds on computer 
time to carry out a certain (very large) computation. 
2. 
Data Structures 
As the name suggests, data structures provide a systematic framework in 
which the variables being processed (both input and internal) can be organ-
ized. Data structures are really mathematical objects, but we will usually 
refer to their computer implementations by the same names. The most 
familiar data structure is the array, which is used in conjunction with sub-
scripted variables. A 0-dimensional array is a single variable or storage 
location. A d-dimensional array can be defined recursively as a finite sequence 
of(d — l)-dimensional arrays all of the same size. A vector is usually stored 
as a 1-dimensional array and a matrix as a 2-dimensional array. It is generally 
accepted that the entries of an array must be homogeneous (i.e., all of the 
same type and all requiring the same amount of space). 
The main feature of an array is its indexing capability. The subscripts 
should uniquely determine the location of each data item. The entries of an 
array are stored consecutively, and an addressing scheme using multipliers 
allows access to any entry in a constant amount of time, independent of the 
size of the array, on a random access machine. Thus, a query of the form 
"Is ylg 12 > 0?" can be executed in essentially one step. 
For those unfamiliar with the use of multipliers, the technique will be 
illustrated for an mj x m2 matrix A. Let us assume that the entries of A are 
stored sequentially in locations of size 5 in the order ^i,i, ^i,2> • • •» ^i,m2' 
^2,1, ^2,2, •••, ^2,m2^ ••, ^mi,i.^mi,2, • • , ^mrm2 (fow-major Ordering). 
Then the space used by each row of yl equals m2 s. Now Aij could be accessed 
by starting at A^ i, jumping down i — 1 rows, and then moving over 7 — 1 
columns. Thus, if B = ADDRESS(^i 1), then we have the formula 
ADDRESS(^,,,) = B + (i- 
l)m2S + 0* - IK 
An analogous formula can be obtained for column-major ordering. This 
idea easily extends to d-dimensional arrays (Exercise 14). 
A list is a data structure which consists of homogeneous records which are 
linked together in a linear fashion. Each record will contain one field or more 
of data and one field or more of pointers. Figure 2.2 shows two singly linked 
fists; each record has a single forward pointer. Unlike an array, in which the 

32 
2. 
Design of Efficient Algorithms 
COURANT 
B—H^^^l •-1 "1^60 I •H—H^^QQ| ^ 1 
COLUMBIA 
[ 3 
H212I •-^ 
H280| •-^ 
H<754| A 1 
Figure 2.2. 
Two singly linked lists. 
data is stored sequentially in memory, the records of a list can be scattered 
throughout memory. The pointers maintain law and order. This allows the 
flexibility of changing the size of the data structure, inserting and deleting 
items, by simply changing the values of a few pointers rather than shifting 
large blocks of data. An implementation of our examples is given in Figure 
2.3. It uses two arrays and two single variables. The A is a special symbol 
indicating undefined. The list COURANT can be printed out by the following 
program: 
begin 
P ^ COURANT; 
while P 7^ A 
print D ATA(P); 
P<-POINTER(P);; 
end 
This is an example of scanning a list. Scanning takes time proportional to 
the length of the list. 
Two special types of lists should be mentioned here because of their use-
fulness in computer science. A stack is a list in which we are only permitted to 
insert and delete elements at one end, called the top of the stack. A queue is a 
list in which we are only permitted to insert at one end, called the tail of the 
queue, and delete from the other end, called the head of the queue. 
COURANT : \T] 
COLUMBIA: [ T ] 
DATA: 
POINTER : 
|7100| 
ULI 
A 
A 
fiiF] 
LJJ 
1 280 1 
LJJ 
A 
A 
yf^ 
1^ 
1 212 
L ^ 
P«°l 
L L J 
Figure 2.3. 
An implementation of the lists COURANT and COLUMBIA using arrays. (In 
what year was Columbia founded?) 

2. 
Data Structures 
33 
The Adjacency Matrix of a Graph 
Let G = (F, £) be a graph whose vertices have been (arbitrarily) ordered 
Vi,V2,...,v„. The adjacency matrix M = (m,^,) of G is an n x n matrix with 
entries 
if 
ViVj^E, 
if 
ViVjEE 
(see Figure 2.4b). By definition, the main diagonal of M is all zeros, and M is 
symmetric about the main diagonal if and only if G is an undirected graph. 
If M is stored in a computer as a 2-dimensional array, then only one step 
(more precisely 0(1) time) is required for the statements "Is ViV^eEV or 
"Erase the edge ViV^'' An instruction such as "mark each vertex which is 
adjacent to r/' requires scanning the entire column j and hence takes n 
steps. Similarly, "mark each edge" takes n^ steps. The space requirement for 
the array representation is O(n^). A graph whose edges are weighted can be 
represented in the same fashion. In this more general case m,- j will equal the 
weight of ViVj\ 2i nonedge will have weight either zero or infinity depending 
upon the application. 
(a) 
(b) 
Vertex 1 
Vertex 2 
Vertex 3 
Vertex 4 
Vertex 5 
HEAD 
B-
B-
B— 
B— 
B— 
[IH 
-H4 
H -{IH-*{III] 
(0 
Figure 2.4. (a) The graph G. (b) The adjacency matrix of G. (c) The adjacency Hsts of G. 

34 
2. 
Design of Efficient Algorithms 
Some of the performance figures above can be improved upon when the 
density of M is low. We use the term sparse to indicate that \E\ <^n^, i.e., 
the number of edges is much less than n^. One of the most talked about 
classes of sparse graphs are the planar graphs for which Euler proved that 
ll^ll 
<3n-6. 
The Adjacency Lists of a Graph 
For each vertex Vi of G we create a list Adj(z;,) containing those vertices 
adjacent to i;^. The adjacency Hsts are not necessarily sorted although one 
might wish them to be (see Figure 2.4c). The space requirement for the 
adjacency list representation of a graph with n vertices and e edges is 
oh: [1 + d,-]] = 0{n + eX 
where di denotes the degree of i;^ (see Figure 2.5). Thus, from storage con-
siderations, it is usually more advantageous to use adjacency lists than the 
HEAD: 
1 2 
3 
4 5 
3 
2 
6 
10 
1 
DATA: 
LINK: 
1 
4 
A 
2 
3 
A 
3 
2 
8 
4 
1 
9 
5 
4 
4 
6 
2 
5 
7 
A 
A 
8 
3 
A 
9 
5 
A 
10 
3 
A 
11 
A 
A 
(a) 
HEAD: 
DEGREE: 
1 
1 
2 
2 
3 
1 
3 
4 
4 
4 
8 
1 
5 
9 
1 
DATA: 
2 
3 
3 
2 
4 
1 
5 
3 
4 
(b) 
Figure 2.5. Two implementations of Figure 2.4c. (a) An implementation of the adjacency 
sets of G as linked lists, (b) An implementation of the adjacency sets of G in sequential storage. 

2. 
Data Structures 
35 
Table 2.2 
Some typical graph operations and their complexity with respect to three data structures" 
Is ViVj 2in edge? 
Mark each vertex 
which is adjacent to Vi 
Mark each edge 
Add an edge ViVj 
Erase an edge y, Vj 
Adjacency matrix 
stored as an 
0(1) 
0(n) 
0(n') 
0(1) 
0(1) 
array 
Adjacency sets 
stored as lists 
0{di)* 
0(dd 
0(e) 
0(1)** 
o(d,r 
Adjacency sets 
stored sequentially 
0(rf,)* 
OW) 
0(e) 
0(e) 
0(e) 
" If the adjacency sets are sorted, then the starred entries can be reduced to 0(log ^,) 
using a binary search, but the double starred entry will increase to 0(di). 
adjacency matrix to store a sparse graph. Often, it is also advantageous from 
time considerations to store a sparse graph using adjacency lists. For example, 
the instruction "mark each vertex which is adjacent to v/' requires scanning 
the list Adj(z;^) and hence takes dj steps. Similarly, "mark each edge" takes 
0(e) steps using adjacency lists, a substantial saving over the adjacency 
matrix for a sparse graph. However, erasing an edge is more complex with 
lists than with the matrix (see Table 2.2). Thus there is no representation of a 
graph that is best for all operations and processes. Since the selection of a 
particular data structure can noticeably affect the speed and efficiency of an 
algorithm, decisions about the representation must incorporate a knowledge 
of the algorithms to be applied. Conversely, the choice of an algorithm may 
depend on how the data is initially given. For example, an algorithm to set up 
the adjacency lists of a sparse graph will take longer if we are initially given 
its adjacency matrix as an n x n array rather than as a collection of ordered 
pairs representing the edges. 
A graph problem is said to be linear in the size of the graph, or simply 
linear, if it has an algorithm which can be implemented to run in 0(n + e) 
steps on a graph with n vertices and e edges. This is usually the best that one 
could expect for a graph problem. By a careful choice of algorithm and data 
structure a number of simple problems can be solved in linear time; these 
include testing for connectivity (Section 2,3), biconnectivity (Exercise 5), and 
planarity (Table 2.1). We will illustrate this on the problem of converting the 
adjacency lists of a graph into sorted adjacency lists. 
It is by now a well-known fact that any algorithm which correctly sorts 
a set of k numbers using comparisons will require at least k log k compari-
sons both in the worst case and in the average case.* Furthermore, many 
* All logarithms will be base 2. 

36 
2. 
Design of Efficient Algorithms 
0(k log /c)-time algorithms for sorting by comparisons are available: HEAP-
SORT, BINARY INSERTION, MERGESORT, etc. This might suggest 
that sorting the adjacency list of i;, requires d, log di steps, so that sorting 
all the adjacency hsts would take Z"= ^ d^ log d, steps, which is superlinear, 
i.e., greater than 0{n + e). As an alternative to comparison sorting, Ad}(Vi) 
could be put into order using a radix or bucket sort. This method takes 
0(n + di) moves and is executed as follows: 
1. Initialize bit vector: <^i, ^2' • • » ^«> ^ <0, 0, . . . , 0> 
2. 
Scan Adj(y,) assigning: bj <«- 1 for each Vj e Adj(f,) 
3. 
Set SortedAdjCi;,) <- 0 
4. 
Scan bit vector: for7 -«- 1 to n do 
if bj = 1 then CONCATENATE Vj to SortedAdj(z;f) 
If this were done for all adjacency sets, it would require O(n^) steps which 
is superlinear for sparse graphs. Happily, there is yet another method for 
ordering the adjacency lists, which turns out to be linear. It is conceptually 
very simple and differs from the above in that the SortedAdj(i?f) are not 
created separately, but rather, simultaneously. 
Algorithm 2.1. Sorting the adjacency lists of a graph. 
Input: The unsorted adjacency lists of a graph G = {V, E) whose vertices 
are numbered 
Vi,V2,...,v„. 
Output: The sorted adjacency lists of the reversal G~^ = (K, £"^). (If G is 
undirected, then G = G~^; otherwise run the algorithm a second time on 
G-K) 
Method: The algorithm is as follows: 
begin 
1. 
for / -*- 1 to « do SortedAdj(i;,) <- empty list; 
2. 
fori <- 
Hondo 
3. 
for each Vj e Adi(Vi) do 
4. 
CONCATENATE Vi to SortedAdj(i;,); 
end 
Theorem 2.3. Algorithm 2.1 runs in 0(n + e) time. 
Proof. Line 1 is a loop which takes 0{n) steps. Concatenation is indepen-
dent of the length of a list provided that a pointing variable is used to re-
member the address of the end of the list. Thus line 4 takes 0(1) steps, and the 
loop 3-4 takes 0(di) steps. Therefore, the nested loops 2-4 require a total of 
YJ=1 0(di) = 0(e) steps, which proves the theorem. 
| 
The usual implementation of adjacency sets as linked lists is illustrated in 
Figure 2.5a. There is an alternate way of storing the adjacency sets when no 

3. 
How to Explore a Graph 
37 
inserting or deleting is anticipated. Under these circumstances sequential 
storage can be used to eliminate the links that were present in the Hst repre-
sentation and thus save space. In both implementations HEAD(0 points to 
the first member of Adj(t;,), but Adj(i;,) is now stored in consecutive locations 
DATA(HEAD(0), ..., DATA(HEAD(0 + DEGREE(0 - 1) (see Figure 
2.5b) and Exercise 9). 
For further reading on data structures and their uses see Knuth [1969], 
Aho, Hopcroft, and Ullman [1974], Horowitz and Sahni [1976], Lewis and 
Smith [1976], Wirth [1976], Goodman and Hedetniemi [1977], Reingold, 
Nievergelt, and Deo [1977], and Gotleib and Gotleib [1978]. 
3. 
How to Explore a Graph 
In designing algorithms we frequently require a mechanism for exploring 
the vertices and edges of a graph. Having the adjacency sets at hand allows 
us to repeatedly pass from a vertex to one of its neighbors and thus "walk" 
through the graph. Typically, in the midst of such a searching algorithm, some 
of the vertices will have been visited, the remainder not yet visited. A decision 
will have to be made as to which vertex x is being visited next. Since, in 
general, there will be many eligible candidates for x, we may want to es-
tablish some sort of priority among them. 
Two criteria of priority which prove to be especially useful in exploring a 
graph are discussed in this section. They are depth-first search (DFS) and 
breadth-first search (BFS). In both methods each edge is traversed exactly 
once in the forward and reverse directions and each vertex is visited. By 
examining a graph in such a structured way, some algorithms become 
easier to understand and faster to execute. The choice of which method to 
use will often affect the efficiency of the algorithm. Thus, simply selecting a 
clever data structure is not sufficient to insure a good implementation. A 
carefully chosen search technique is also needed. 
Depth-First Search 
In DFS we select and visit a vertex a, then visit a vertex b adjacent to a, 
continuing with a vertex c adjacent to b (but different from a), followed by an 
"unvisited" d adjacent to c, and so forth. As we go deeper and deeper into 
the graph, we will eventually visit a vertex y with no un visited neighbors; 
when this happens, we return to the vertex x immediately preceeding y in the 
search and revisit x. Note that if G is a connected undirected graph, then 

38 
2. 
Design of Efficient Algorithms 
procedure DFSEARCH(?;): 
begin 
1. mark v "visited"; / <^ / + 1; DFSNUMBER(t;) <- /; 
2. for each w G Adj(f) do 
3. if w is marked " unvisited " then 
begin 
4. 
add the edge vw to T; FATHER(w) <- v; 
5. 
DFSEARCH(w); 
end 
end 
Figure 2.6. 
Depth-first search. 
each vertex will be visited and every edge will be explored once in both 
directions. If G is not connected, then such a search is carried out for each 
connected component of G. 
A depth-first search of an undirected graph G = (V, E) partitions the 
edge set into two classes T and B where T comprises a spanning forest of G 
with one spanning tree for each component of G. The edge xy is placed into 
T if vertex y was visited for the first time immediately following a visit to x. 
In this case x is called thQ father of y and y is the son of x. The origin of this 
male-dominated nomenclature appears to be biblical. The edges in T are 
called tree edges. The remaining edges, called back edges, are placed into B; 
they are also called/ronds by an(n) arborist graph theorist. If G is connected 
then (K, T) is called a depth-first spanning tree. We consider each tree of 
the depth-first spanning forest to be rooted at the vertex at which the DFS of 
that tree was begun. 
An algorithm for depth-first search is given below. 
Algorithm 2.2. Depth-first search of a graph. 
Input: An undirected graph G = (F, E) represented by adjacency sets 
Adj(t;), for 
veV. 
Output: A partition of E into a set T of tree edges and a set B of back edges. 
Method: All vertices are initially marked "unvisited." The procedure 
DFSEARCH in Figure 2.6 is used recursively. All edges in E not placed into 
T are assumed to be in B. In addition, the vertices are numbered from 1 to n 
according to the order in which they are first visited; DFSNUMBER(t;) 
denotes this number for a vertex v. The algorithm is as follows: 
begin 
6. 
initiahze: T <r- 0 ; / ^ 0; 
7. for all y G Kdo mark v "unvisited"; 
8. while there exists v e Kmarked "unvisited" do 
9. 
DFSEARCH(i;); 
end 

3. 
How to Explore a Graph 
39 
In general a graph may have many depth-first spanning forests. Indeed 
there is quite a bit of freedom in choosing the vertices in Hnes 2 and 8. None-
theless, a depth-first spanning forest T has some important and useful 
properties, which we now state. 
(Dl) 
If i; is a proper ancestor of w in T, then DFSNUMBER(i;) < 
DFSNUMBER(w). 
(D2) 
For every edge of G, whether tree or back edge, one of its endpoints 
is an ancestor of the other endpoint, that is, there are no "cross edges." 
We leave the proof of properties (Dl) and (D2) as an exercise. 
DFSEARCH(t;) is an example of a recursive procedure, that is, it calls 
itself. Such a procedure is implemented using a stack. When a call to itself is 
made, the current values of all variables local to the procedure and the line 
of the procedure which made the call are stored at the top of the stack. In this 
way when control is returned the computation can continue where it had left 
off. Some computer languages, like ALGOL, PL/I, PASCAL, and SETL, allow 
recursive subroutines and set up the stack automatically for you. Other 
languages, like FORTRAN, COBOL, or BASIC, do not have this feature, so that the 
programmer must set up his own stack to simulate the recursion. 
Breadth-First Search 
In BFS we select a vertex and put it on an initially empty queue of vertices 
to be visited. We repeatedly remove the vertex x at the head of the queue and 
then place onto the queue all vertices adjacent to x which have never been 
enqueued. As in the case of depth-first search, BFS is carried out once for 
each connected component of the graph. However, in BFS each vertex is 
visited only once (and is thus exhausted, having produced all its offspring in 
one visit). 
A breadth-first search of an undirected graph G = (V, E) also partitions 
the edge set into two classes: the tree edges in T and the back edges in B. Here 
an edge xy is placed into T if vertex y is enqueued during the visit to x. The 
(partial) subgraph {V, T) is called a breadth-first spanning forest. 
An algorithm for breadth-first search is given below. 
Algorithm 2.3. Breadth-first search of a graph. 
Input: An undirected graph G = (V^E) represented by adjacency sets 
Adj(t;), for 
veV. 
Output: A partition of E into a set T of tree edges and a set B of back edges. 
Method: All vertices are initially marked "never enqueued." The procedure 
BFSEARCH in Figure 2.7 is used to visit a vertex. All edges in E not placed 

40 
2. 
Design of Efficient Algorithms 
procedure BFSEARCH(x): 
begin 
1. 
i^ 
i-\- I; BFSNUMBER(jc) ^ /; 
2. for each y e Adj(A:) do 
3. 
ify is marked " never enqueued " then 
begin 
4. 
add the edge xy to T; FATHERO) <- x; 
5. 
add>'to g; mark >^ "enqueued"; 
end 
end 
Figure 2.7. 
Breadth-first search. 
into T are assumed to be in B, An array BFSNUMBER records the order in 
which the vertices are enqueued and visited. The algorithm is as follows: 
begin 
6. 
initiahze: T <- 0; Q <- empty queue; / <- 0; 
7. for aWv e V do mark v " never enqueued "; 
8. while Q is empty and there exists v e Vmarked "never enqueued" 
9. 
add i; to 2 ; n^ark ?;" enqueued "; 
10. 
while g is nonempty 
11. 
X ^ head of 2 ; Q ^ Q - x; 
12. 
BFSEARCH(x); 
end 
end 
end 
Let r be a breadth-first spanning forest of an undirected graph G = (V, E). 
As was the case for DFS, a graph may have many breadth-first spanning 
forests. The level (in T) of a vertex v is defined inductively: 
X xnxr^x . X 
fO? 
if t; is a root of a tree in T 
LEVEL(i;) = < 
^ ^ 
[1 + LEVEL(FATHER(i;)), 
otherwise. 
A breadth-first spanning forest T satisfies the following properties. 
(Bl) If t; is a proper ancestor of w in T, then BFSNUMBER(t;) < 
BFSNUMBER(w). 
(B2) Every edge of G, whether tree or back edge, connects two vertices 
whose level in T differs by at most 1. 
(B3) If t; is a vertex in the connected component of G whose root in T is r, 
then the level of v equals the length of the shortest path from r to i; in G. 
In Section 4.3 we will discuss a variant of the process described here, called 
lexicographic breadth-first search, in which the vertices of a given level are not 
searched in the same order as they are enqueued, but rather according to a 
priority which depends on their ancestors. 

3. 
How to Explore a Graph 
41 
Implementation and Complexity 
Let G = (K, £) be a graph. Both Algorithms 2.2 and 2.3 can be imple-
mented to run in time and space proportional to | K| -f |£|. Such an imple-
mentation is said to be linear in the size of G. This is usually the best that one 
can expect from a graph algorithm, since it is reasonable to assume each 
vertex and each edge must be processed. Let us describe in detail a linear 
implementation of Algorithm 2.2 and leave Algorithm 2.3 as an exercise. 
The adjacency sets of G can be stored either as singly hnked lists or by 
using sequential allocation*; thus, the input can be entered in 0(| K| + |£|) 
time and space. A Boolean array VISITED of size | V \ can serve to mark each 
vertex v unvisited if VISITED(t;) = 0 and visited if VISITED(t;) = 1. Thus, 
line 7 of Algorithm 2.2 can be executed in 0( | F |) time, and the tests in lines 
3 and 8 can be done in constant time. The set T can be a singly linked list, 
while FATHER and DFSNUMBER vi^ill be arrays of size \V\. Hence 
statements 1, 4-6, and 9 can each be done in constant time. Now comes the 
crucial part of the complexity analysis. Statement 8 requires a pointing 
variable which will scan, or run through, all the vertices exactly once. That is, 
when this pointer finds an unvisited vertex, the pointer's value will be saved, 
so that the next time statement 8 is required the search for an unvisited 
vertex can resume at the spot where it had last left off (rather than starting at 
the beginning of V each time). Therefore, the total number of operations 
summed over all executions of statement 8 is proportional to \V\. Exactly 
the same technique is used in statement 2 to scan Adj(i;) which, together with 
our previous comments, implies that the entire procedure DFSEARCH(t;) 
takes 0(1 Adj(i;)|) time. Finally, the procedure is called once for each vertex, 
so the total time (and space) complexity of our implementation is 
0(\V\)+ 
l^O(\Adm\), 
veV 
which equals 0(1 K| + |£|). 
As we mentioned in the opening paragraphs of this section, one search 
technique may be preferable over another, that is, it may give us a more 
efficient implementation. We list some instances of problems for which DFS 
and BFS are most effective, respectively. 
DFS—planarity testing; certain connectivity related problems (bicon-
nectivity, triconnectivity); topological sorting; testing for cycles in an oriented 
graph. 
* If inserting or deleting of edges were required in the algorithm, then sequential allocation 
would not be advisable. 

42 
2. 
Design of Efficient Algorithms 
5F5—shortest-path problems; testing for chordless cycles (Sections 4.3 
and 4.4); network flow problems. 
In the next section we will discuss one of these problems—topological 
sorting. Upon completing that section the reader will have been exposed to 
all the algorithmic tools needed for the remainder of the book. For additional 
reading in this area see Aho, Hopcroft, and Ullman [1974], Goodman and 
Hedetniemi [1977], and Reingold, Nievergelt, and Deo [1977]. 
4. 
Transitive Tournaments and Topological Sorting 
Let F be an orientation of the complete graph K„ on n vertices. Each edge 
xy of F may be regarded as the outcome of a contest between the vertices x 
and y, where x was the loser and y the winner. We call F a transitive tourna-
ment if, for all triples of vertices, 
xyeF 
and 
yzeF 
implies xzeF. 
(1) 
Condition (1) simply says that F has no 3-cycles. A stronger statement can 
be made. 
Theorem 2.4. Let F be an orientation of the complete graph K„. The 
following statements are equivalent. 
(i) F is a transitive tournament, 
(ii) F is acyclic. 
Moreover, the vertices can be linearly ordered [i^i, t;2,. • •, t^J such that 
(iii) Vi has in-degree f — 1 in F, for all i, and 
(iv) Vi Vj eF if and only if / < j . 
This linear ordering of the vertices is unique. Figure 2.8 shows a transitive 
tournament and the linear ordering of its vertices. 
Proof, (i) => (ii) Since F is transitive, it has no 3-cycle. Suppose F has an 
/-cycle (/ > 3) where / is smallest possible. But this /-cycle has a chord which 
shortcuts it, producing a cycle of shorter length and thus contradicting the 
minimality of /. Hence, F is acyclic. 
(ii) => (iii) If F is acyclic, then it has a sink (a vertex of out-degree zero). 
Call the sink v„. Clearly v„ has in-degree n — 1. Deleting v„ from the graph, 
we obtain a smaller acyclic oriented graph, and the conclusion follows by 
induction. 

4. 
Transitive Tournaments and Topological Sorting 
43 
Figure 2.8. A transitive tournament. 
(iii) => (iv) 
By induction, 
(iv) => (i) 
Obvious. 
This theorem provides us with a Hnear time algorithm for recognizing 
transitive tournaments. First, calculate the in-degree of each vertex; then, 
using a Boolean vector, verify that there are no duplicates among the in-
degrees. The technique of recognizing a class of graphs solely on the basis of 
the degrees of their vertices will be seen again when we study threshold graphs 
(Chapter 10) and split graphs (Chapter 6). 
A slightly more general problem than recognizing transitive tournaments 
is that of topologically sorting an arbitrary acyclic oriented graph G = (F, F). 
What we seek is a linear ordering of the vertices [u^, V2, ..., v„^ which is 
consistent with the edges of G; that is, 
ViVjeF=>i <j 
(for all I, j). 
(2) 
An ordering which satisfies (2) is called a topological sorting of G. If G had a 
cycle, then a topological sorting would clearly be impossible. Why? But, if 
G is acyclic, then it is always possible. One method for finding an ordering 
satisfying (2) is the following: 
forj^lKI tol step - 1 
Locate a sink v of the remaining graph and call it vy, 
Delete v and all edges incident on v from the graph; 
next); 
(3) 
The correctness of this method is left as an exercise. In practice, we can 
implement (3) without actually deleting anything from our data structures. 

44 
2. 
Design of Efficient Algorithms 
Rather, we employ a depth-first search and some clever labeling. The 
algorithm is presented below. 
Algorithm 2.4. Topological sorting. 
Input: An acyclic oriented graph G = {V,F) stored as adjacency lists. 
Output: A DFS numbering of the vertices called DFSNUMBER and a 
topological sort numbering of the vertices called TSNUMBER. The algo-
rithm also tests to make sure that G is acyclic. 
Method: To find thejth vertex of the desired ordering, the depth-first search 
procedure TOPSORT in Figure 2.9 locates a vertex v all of whose successors 
in G have already been searched and numbered and are therefore considered 
as having been deleted. This vertex v is then numbered. The entire algorithm 
is as follows: 
begin 
for each x e K do 
DFSNUMBER(Jc) ^ 0; 
TSNUMBERW ^ 0;; 
J-\vu 
for each xe 
Vdo 
if DFSNUMBER(x) = 0 then 
TOPSORT(x); 
end 
Algorithm 2.4 is illustrated in an example in Appendix C. 
procedure TOPSORT(i?): 
/ ^ / + 1; 
DFSNUMBER(i;) ^ /; 
for all w e Adj(y) do 
begin 
if DFSNUMBER(w) = 0 then 
TOPSORT(w); 
eIseifTSNUMBER(H;) = 0 then 
"G is not acyclic"; 
end 
comment: We now label v with a value smaller than 
the value assigned to any descendant. 
TSNUMBERM^y; 
return 
Figure 2.9. 

Exercises 
45 
EXERCISES 
1. (a) Show that a spanning tree of the complete graph K^, is either a 
depth-first spanning tree or a breadth-first spanning tree. 
(b) Find a spanning tree of the complete graph K^ which is neither a 
depth-first nor a breadth-first spanning tree. 
2. Modify the DFS and BFS Algorithms 2.2 and 2.3 to count the number of 
connected components of an undirected graph G. 
3. Prove properties (Dl) and (D2) for any depth-first search spanning 
forest r. 
4. A vertex x is an articulation vertex of G if deleting x and all edges incident 
on it increases the number of connected components. Let G be a connected 
undirected graph, and let T be a DFS spanning tree of G. Prove that a vertex 
X is an articulation vertex of G if and only if one of the following holds: 
(i) X is the root of T, and x has more than one son; 
(ii) X is not the root of T, and for some son s of x there is no back edge 
between any descendent of s (including s itself) and a proper ancestor of x. 
Remark. A connected undirected graph G is biconnected (there are two 
vertex-disjoint paths between every pair of vertices) if and only if G has no 
articulation vertex. 
5 (Biconnectivity). Let T^e a DFS spanning tree of an undirected graph G. 
Assume that the vertices are numbered consecutively as they are first visited 
during depth-first search, and let n{v) denote this number. For each vertex x, 
define 
LOW(x) = MIN{7i(x), 7i:(w)}, 
where w runs over all proper ancestors of x accessible from a son of x by 
going down some tree edges and then up one back edge. 
(a) Write a depth-first search algorithm which assigns the values n(x) 
and calculates the values LOW(x) for all vertices x. 
(b) Prove that your algorithm can run in 0(\V\ + |£|) time for an 
arbitrary graph G = {V, E). 
(c) Show how your algorithm can detect articulation vertices using the 
function LOW. 
6. Describe an efficient implementation of Algorithm 2.3 and prove that it 
is linear in the size of the graph. 
7. Let S and T be subsets of the integers 1, 2, 3,..., n, and let X be a one-
dimensional array of size n whose values have been initialized ^(1) = 
A{2) = '" = A{n) = 0. Write subroutines which calculate S u T and S nT 
in time proportional to \S\ -f \T\, Assume that S and T are stored as 
(unordered) singly linked lists. (The answer appears in Appendix B.) 

46 
2. 
Design of Efficient Algorithms 
8. Let if = (F, F) be an acyclic oriented graph. A height function h is 
defined on the vertices inductively: 
h(v) 
0 
if i; is a sink, 
1 + max{h(w)\w e Ad}(v)} 
otherwise. 
Write a DFS algorithm which assigns a height function h to the vertices. 
Prove that your algorithm can be implemented to run in 0(\V\ + |F|) 
time. 
9. Let V = {1, 2,..., n} and let £ be a collection of m ordered pairs repre-
senting the edges of a graph G = (V, E). Write a FORTRAN program which 
allocates sequential space in an array A of size m to store the adjacency sets 
of G, where Adj(l) is followed by Adj(2), etc. Let bi denote the location in A 
of the beginning of Adj(0, and let di denote the out-degree of vertex i (i.e., the 
number of ordered pairs in which it is the first coordinate). You are permitted 
exactly two scans of E, one to calculate the out-degrees of the vertices and 
one to fill the array. For example, if 
E = {(4, 5), (1, 4), (6, 7), (3, 2), (4, 1), (5, 4), (8, 2), 
(7, 6), (2, 3), (2, 8), (9, 4), (1, 6), (4, 9), (6, 1), 
(5, 7), (4, 6), (4, 7), (7, 5), (6, 4), (7, 4)}, 
then the array A should look as indicated in Figure 2.10. Note that 
Adj(l) 
Adj(2) 
Adj(4) 
Adj(7) 
' 
4 
6 
' ' 
3 
8 
2 
r 
5 
1 
. _ « A ^ _ 
9 
6 
N 
7 
4 
7 
7 
1 
4 
6 
—'^*— 
5 
N 
4 
2 
4 
d^=2 
d^ = S dj = 3 b, = \ 
b^ = 6 
bj = \6 
d^ = 2 ds = 2 ds = \ 
^2 = 3 ^5 = 11 
^ 8 = 1 9 
^3 = 1 de = 3 dg= I 63 = 5 ^6 = 13 bg = 20 
Figure 2.10. 
10. Using the data structure from Exercise 9 implement the algorithm 
from Exercise 8 and test it on some sample graphs. 
11. Using the data structure from Exercise 9 implement the algorithm 
from Exercise 5 to test some sample undirected graphs for biconnectivity. 

Exercises 
47 
12. 
Let U(n) be the set of all upper triangular, (0, 1)-valued n x n matrices. 
That is, an n X n matrix M = [niij] is in U{n) if 
>h 
= h 
Show that l]{n) forms a group under matrix multiplication over the two 
element field GF(2) and that the identity matrix / is the identity element of 
this group. (In GF(2): 0 + 0 = 1 + 1 = 0 , 0 + 1 = 1 + 0 = 1 , 0-0 = 
0-1 =. 1-0 = 0, and 1 1 = 1.) 
13. 
Let G = (K, F) be an acyclic, topologically sorted, oriented graph; i.e., 
its vertices have been renamed such that F = {1, 2,..., /i} and 
ij e F 
implies 
i < j 
(i, j e V). 
Clearly, this numbering implies that the adjacency matrix M(G) of G is upper 
triangular and is therefore in U{n) (see Exercise 12). Consider the subset 
Uo = {MeU{n)\m,j 
= IJ < j => ijeF} 
consisting of those matrices in U(x) with nonzeros only in the positions 
determined by the nonzeros of M(G). 
(i) Show that the elements of UQ can be ordered by set inclusion to form 
a complete, distributive lattice. 
(ii) Show that UQ is a subgroup of U(n) if and only if F is transitive (i.e., 
a strict partial order). 
14. Let A be a ^f-dimensional array of size mi x m2 x • • • x m^. Discuss 
how A may be stored in consecutive storage locations of size s in a manner 
similar to row-major or column-major ordering. Give a formula for obtaining 
the address of Ai^^^ j ^ . 
15. In the proof of Theorem 2.1, show that the following claims are valid: 
(i) The transformation G\-^H is 0(n + e). 
(ii) a(H) = a(G) + e. 
(iii) The transformation H^-^H' is O(e^). Can this be improved? 
(iv) i{H') = 
e^n-a{G). 
16. Prove the following: If G has n vertices, then %(G) < r if and only if 
a(G X K^) = r, where x denotes the Cartesian product. (The Cartesian 
product of two graphs G^ = (V^, E^) and G2 = (F2, £2) is the graph G = 
(Fi X V2, E\ where E = {((i^i, 1^2), {v\, 1^2)) I either v^ = v\ and (1^2,1^2) e £2 
or V2 = V2 and (v^, v\)eE^} 
(Chvatal [1973, p. 326]). 
17. 
Using Exercise 16, show that GRAPH COLORING ^ STABLE SET. 
18. 
Prove that assigning a minimum coloring to a bipartite graph has 
complexity which is linear in the size of the graph. 

48 
2. 
Design of Efficient Algorithms 
19. Prove that STABLE SET restricted to bipartite graphs has com-
plexity which is polynomial in the size of the graph. 
20. Prove that HAMILTONIAN CIRCUIT restricted to bipartite graphs 
is NP-complete. 
21. If a positive integer m can be stored in 1 -f [log2 m] space, show that 
the numbers 1, 2, 3,..., n can be stored in a total of 0(n) space. 
22. Algorithms s/ and ^ run in n^ and 2" steps, respectively, on an input 
of size n. 
(i) If current computers can execute 10^ steps/sec, what size input can be 
processed by each algorithm in one minute? In one hour? In one year? 
(ii) Suppose that by the time this book reaches your university library 
the computer industry has a technological breakthrough, which increases 
the speed of execution by 100-fold. What will be the corresponding increased 
capability of algorithms j ^ and ^ ? 
Bibliography 
Aho, A. v., Hopcroft, J. E., and Ullman, J. D. 
[1974] ''The Design and Analysis of Computer Algorithms." Addison-Wesley, Reading, 
Massachusetts. 
Auslander, L,, and Parter, S. 
[1961] On embedding graphs in the sphere, J. Math. Mech. 10, 517-523. MR25 #1548. 
Booth, K. S., and Leuker, G. S. 
[1976] Testing for the consecutive ones property, interval graphs, and graph planarity using 
PQ-tree algorithms, J. Comput. System Sci. 13, 335-379. 1VIR55 #6932. 
Cherkasky, B. V. 
[1977] Algorithm of construction of maximal flow in networks with complexity of 0( F^ JH) 
operations, (in Russian), Math. Methods of Solution of Economical Problems 7, 
117-125. 
Christofides, Nicos 
[1975] 
" Graph Theory—An Algorithmic Approach." Academic Press, New York. 
Chvatal, Vaclav. 
[1973] Edmonds polytopes and a hierarchy of combinatorial problems, Discrete Math. 4, 
305-337. 
Cook, Stephen A. 
[1971] The complexity of theorem-proving procedures, Proc. 3rd Ann. ACM Symp. on 
Theory of Computing Machinery, New York, pp. 151-158. 
Cook, S. A., and Reckhow, R. A. 
[1973] Time bounded random access machines, J. Comput. System Sci. 7, 354-375. 
Dinic, E. A. 
[1970] Algorithm for solution of a problem of maximal flow in a network with proper 
estimation, Soviet Math. Dokl. 11, 1277-1280. MR44 #5178. 
Edmonds, Jack, and Karp, Richard M. 
[1972] Theoretical improvements in algorithmic efficiency for network flow problems, 
y.^ CM 19, 248-264. 

Bibliography 
49 
Ford, L. R., and Fulkerson, D. R. 
[1962] " Flows in Networks." Princeton Univ. Press, Princeton, New Jersey 
Galil, Zvi 
[1978] A new algorithm for the maximum flow problem, Proc. 19th IEEE Annu. Symp. on 
Foundations of Computer Science, Ann Arbor, Michigan, 16-18 October, pp. 231-245. 
Galil, Zvi, and Naamad, Amnon 
[1979] Network flow and generalized path compression, Proc. 11th Annu. ACM Symp. on 
Theory of Computing. 
Garey, Michael R., and Johnson, David S. 
[1978] "Computers and Intractability: A Guide to the Theory of NP-completeness." 
Freeman, San Francisco, California. 
Goldstein, A. J. 
[1963] An efficient and constructive algorithm for testing whether a graph can be embedded 
in the plane. Graph and Combinatorics Conf, Office of Naval Research Logistics 
Proj., Dept. of Math., Princeton Univ., Princeton, New Jersey. 
Goodman, S. E., and Hedetniemi, S. T. 
[1977] " Introduction to the Design and Analysis of Algorithms." McGraw-Hill, New York. 
Gotleib, Calvin, C , and Gotlieb, Leo R. 
[1978] " Data types and structures." Prentice-Hall, Englewood Cliff's, New Jersey. 
Hamacher, H. 
[1979] Numerical investigations on the maximal flow algorithm of Karzanov, Computing 
22, 17-29. 
Hopcroft, John E., and Tarjan, Robert Endre 
[1972] Planarity testing in Flog V steps: Extended abstract, in "Information Processing 
71," Vol. 1, " Foundations and Systems," pp. 85-90. North-Holland, Amsterdam. 
[1974] Efficient planarity testing, /. ACM 21, 549-568. 
Horowitz, E., and Sahni, S. 
[1976] '^ Fundamentals of Data Structures." Computer Science Press, Potomac, Maryland. 
Karp, Richard 
[1972] 
Reducibility among combinatorial problems, in " Complexity of Computer Compu-
tations" (R. E. Miller and J. W. Thatcher, eds.), pp. 85-103. Plenum, New York. 
Karzanov, A. V. 
[1974] 
Determining the maximum flow in a network by the method of preflows, Soviet 
Math. Dokl. 15, 434-437. 
See Hamacher [1979] for an implementation of this algorithm. 
Knuth, Donald E. 
[1969] 
"The Art of Computer Programming," Vol. 1. Addison-Wesley, Reading, Mas-
sachusetts. 
[1973] "The Art of Computer Programming." Vol. 3. Addison-Wesley, Reading, Mas-
sachusetts. 
Kuratowski, C. 
[1930] Sur le probleme des corbes gauches en topologie. Fund. Math. 15, 271-283. 
Laderman, Julian D. 
[1976] A noncommutative algorithm for multiplying 3 x 3 matrices using 23 multipHca-
tions. Bull. Amer. Math. Soc. 82, 126-128. 
Lempel, A., Even, S., and Cederbaum, I. 
[1967] An algorithm for planarity testing of graphs, in "Theory of Graphs: Int. Symp., 
Rome, July 1966" (P. Rosentiehl, ed.), pp. 215-232. Gordon and Breach, New York. 
Lewis, T. G., and Smith, M. Z. 
[1976] "Applying Data Structures." Houghton Mifflin, Boston, Massachusetts. 

50 
2. 
Design of Efficient Algorithms 
Malhotra, V. M., Kumar, M. Pramodh, and Maheshwari, S. N. 
[1978] An 0{n^) algorithm for finding the maximum flows in networks, Inf. Processing Lett. 
7, 277-278. 
Pan, Viktor Ya. 
[1978] Strassen's algorithm is not optimal; trilinear techniques of aggregating, unifying and 
cancelling for constructing fast algorithms for matrix operations, Proc. 19th IEEE 
Annu. Symp. on Foundations of Computer Science, Ann Arbor, Michigan, 16-18 
October, pp. 166-176. 
[1979a] New fast algorithms for matrix operations, SI AM J. Comput., to be published. 
[1979b] Field extension and trilinear aggregating, uniting and canceling for the acceleration 
of matrix multiplications, Proc. 20th IEEE Annu. Symp. on Foundations of Computer 
Science, San Juan, Puerto Rico {29-31 OctoberXpp. 28-38. 
Poljak, S. 
[1974] A note on stable sets and colorings of graphs, Commun. Math. Univ. Carolinae 15, 
307-309. 
Reingold, Edward M., Nievergelt, Jurg, and Deo, Narsingh 
[1977] 
"Combinatorial Algorithms: Theory and Practice." Prentice-Hall, Englewood 
Cliff's, New Jersey. 
Shirey, R. W. 
[1969] Implementation and analysis of efficient graph planarity testing algorithms, Ph. D. 
thesis, Univ. of Wisconsin. 
Strassen, V. 
[1969] 
Gaussian elimination is not optimal, Numer. Math. 13, 354-356. MR40 # 2223. 
Tarjan, Robert Endre 
[1978] Complexity of combinatorial algorithms, SI AM Rev. 20, 457-491. 
Weide, Bruce 
[1977] A survey of analysis techniques for discrete algorithms, Comput. Surveys 9, 291-313. 
Wirth, N. 
[1976] 
"Algorithms + Data Structures = Programs." Prentice-Hall, Englewood CHffs, 
New Jersey. 

CHAPTER 
Perfect Graphs 
1. 
The Star of the Show 
In this section we introduce the main character of the hook—the perfect 
graph. He was "discovered" by Claude Berge, who has been his agent since 
the early 1960s. P.G. has appeared in such memorable works as "Farbung 
von Graphen, deren samtliche bzw. deren ungerade Kreise starr sind" and 
"Caracterisation des graphes non orientes dont on pent orienter les arretes 
de maniere a obtenir le graphe d'une relation d'ordre." Despite his seemingly 
assuming name, P.G. has mixed the highbrow glamorous life with an intense 
dedication to improving the plight of mankind. His feature role in "Perfect 
graphs and an application to optimizing municipal services" has won him 
admiration and respect around the globe. Traveling incognito, a further sign 
of his modesty, he has been spotted by fans disguised as a graph parfait or as 
a (banana) split graph in a local ice cream parlor. So, ladies and gentlemen, 
without further ado, the management proudly presents 
THE PERFECT GRAPH 
Let US recall the following parameters of an undirected graph, which were 
defined in Section 1.1. 
(o{GX the clique number of G: the size of the largest complete subgraph 
ofG. 
X{G), the chromatic number of G: the fewest number of colors needed to 
properly color the vertices of G, or equivalently, the fewest number of stable 
sets needed to cover the vertices of G. 
51 

52 
3. 
Perfect Graphs 
a(G), the stability number of G: the size of the largest stable set of G. 
fe(G), the clique cover number of G: the fewest number of complete sub-
graphs needed to cover the vertices of G. 
The intersection of a clique and a stable set of a graph G can be at most one 
vertex. Thus, for any graph G, 
oKG) < x{G) 
and 
a(G) < fc(G). 
These equalities are dual to one another since a(G) = a>(G) and fe(G) = 
Z(G). 
Let G = (F, £) be an undirected graph. The main purpose of this book is 
to study those graphs satisfying the properties 
(P,) 
co(GJ = x(GJ 
(foralM^K) 
and 
(P2) 
a(GJ = 
fc(GJ 
( f o r a l M ^ n 
Such a graph is called perfect. It is clear by duality that a graph G satisfies 
(Pi) if and only if its complement G satisfies (P2). A much stronger result was 
conjectured by Berge [1961], cultivated by Fulkerson [1969, 1971, 1972], 
and finally proven by Lovasz [1972a], namely, that (Pj) and (P2) are equiv-
alent. This has become known as the Perfect Graph theorem, which will be 
proved in the next section along with a third equivalent condition, due to 
Lovasz [1972b], 
(P3) 
CO(GMGA)>\A\ 
( f o r a l M ^ n 
In subsequent chapters it will be sufficient to show that a graph satisfies any 
(P,) in order to conclude that it is perfect, and a perfect graph will satisfy 
all properties (P,). 
A fourth characterization of perfect graphs, due to Chvatal [1975], will 
be discussed in Section 3.3, and we shall encounter still another formulation 
in the chapter on superperfect graphs. 
It is traditional to call a graph X'Perfect if it satisfies (Pj) and oc-perfect if it 
satisfies (P2). The Perfect Graph theorem then states that a graph is ;f-perfect 
if and only if it is a-perfect. However, the equivalence of (Pi) and (P2) fails 
for uncountable graphs. The interested reader may consult the following 
references on infinite perfect graphs: Hajnal and Suranyi [1958], Pedes 
[1963], and Nash-Williams [1967], Baumgartner, Malitz, and Reinhardt 
[1970],Trotter [1971], and Wagon [1978]. 

2. 
Perfect Graph Theorem 
53 
2. 
The Perfect Graph Theorem 
In this section we shall show the equivalence of properties (Pi)-(P3). A 
key to the proof is that multiplication of the vertices of a graph, as defined 
below, preserves each of the properties (P^). 
Let G be an undirected graph with vertex x. The graph G o x is obtained 
from G by adding a new vertex x' which is connected to all the neighbors of 
X. We leave it to the reader to prove the elementary property 
(Gox) — y = (G — y)ox 
for distinct vertices x and y. 
More generally, if x^, X2,..., x„ are the vertices of G and h = (hi, ^2 ? • • •»'^n) 
is a vector of non-negative integers, then if = G o h is constructed by sub-
stituting for each x,- a stable set of hi vertices xj,..., x?^ and joining x? with 
x) iff Xi and x^ are adjacent in G. We say that H is obtained from G by multi-
plication of vertices. 
Remark. The definition allows /i, = 0, in which case H includes no copy 
of X,. Thus, every induced subgraph of G can be obtained by multiplication 
of the appropriate (0, l)-valued vector. 
Lemma 3.1 (Berge [1961]). Let H be obtained from G by muUiplication 
of vertices. 
(i) If G satisfies (Pi), then H satisfies (PJ. 
(ii) If G satisfies (P2), then H satisfies (P2). 
Proof. The lemma is true if G has only one vertex. We shall assume that 
(i) and (ii) are true for all graphs with fewer vertices than G. Let H = G o h. 
If one of the coordinates of h equals zero, say hi = 0, then H can be obtained 
from G — Xf by multiplication of vertices. But, if G satisfies (Pi) [resp. (P2)], 
then G — x,- also satisfies (Pi) [resp. (P2)]. In this case the induction hypoth-
esis implies (i) and (ii). 
Thus, we may assume that each coordinate /i, > 1, and since H can be 
built up from a sequence of smaller multiplications (Exercise 2), it is sufficient 
to prove the resuh for H = G o x. Let x' denote the added "copy" of x. 
Assume that G satisfies (Pi). Since x and x' are nonadjacent, co(G o x) = 
co(G), Let G be colored using co(G) colors. Color x' the same color as x. This 
will be a coloring of G o x in o){G o x) colors. Hence, Gox satisfies (i). 
Next assume that G satisfies (P2). We must show that a(G o x) = fe(G o x). 
Let jr be a clique cover of G with \Jf\ = k(G) = a(G), and let K^ be the 
clique of JT containing x. There are two cases. 

54 
3. 
Perfect Graphs 
Case 1: X is contained in a maximum stable set S ofG, i.e., \S\ = a(G). In 
this case 5 u {x'} is a stable set of G o x, so 
a(Gox) = a(G)4- 1. 
Since Jf u {{x'}} covers G o x, we have that 
fc(Gox) < fe(G) + 1 = a(G) -h 1 = a(Gox) < fc(Gox). 
Thus,a(Gox) = fc(Gox). 
Case 2: No maximum stable set oJG contains x. In this case, 
a(G o x) = a(G). 
Since each cUque of Jf intersects a maximum stable set exactly once, this is 
true in particular for K^. But x is not a member of any maximum stable set. 
Therefore, D = K^ — {x} intersects each maximum stable set of G exactly 
once, so 
a(GK-D) = ^{G) - 1. 
This implies that 
KGV-D) = OL{GV-D) = a(G) - 1 = a(G o x) - 1. 
Taking a clique cover o{ Gy-o of cardinality a(Gox) — 1 along with the 
extra clique D u {x'}, we obtain a cover of G o x. Therefore, 
fc(Gox) = a(Gox). 
I 
Lemma 3.2 (Fulkerson [1971], Lovasz [1972b]). Let G be an undirected 
graph each of whose proper induced subgraphs satisfies (Pj), and let H be 
obtained from G by multiplication of vertices. If G satisfies (P3), then H 
satisfies (P3). 
Proof. Let G satisfy (P3) and choose /f to be a graph having the smallest 
possible number of vertices which can be obtained from G by multiplication 
of vertices but which fails to satisfy (P3) itself. Thus, 
co(H)a(H)<|X|, 
(1) 
where X denotes the vertex set of if, yet (P3) does hold for each proper in-
duced subgraph of H. 
As in the proof of the preceding lemma, we may assume that each vertex of 
G was multiplied by at least 1 and that some vertex u was multiplied by 
/i > 2. Let 17 = {MS M^,..., u^} be the vertices of// corresponding to u. The 

2. 
Perfect Graph Theorem 
55 
vertex u^ plays a distinguished role in the proof. By the minimality of //, 
(P3) is satisfied by Hx-u^, which gives 
\X\-\ 
= \X^u'\< 
oKHx-uMHx-ud 
[by (P3)] 
< a)(H)oi{H) 
<\X\-l 
[by(l)]. 
Thus, equality holds throughout, and we can define 
p = (o(Hx-uO = o)(Hl 
q = oi(Hx-uO = a(H), 
and 
pq = \X\-L 
(2) 
Since ff^-u is obtained from G — w by multiplication of vertices. Lemma 
3.1 implies that Hx-u satisfies (P2). Thus, Hx-u can be covered by a set ofq 
complete subgraphs of H, say K^, K2,..., K^. We may assume that the K^ 
are pairwise disjoint and that |Xi | > IX2I > • • > |K^|. Obviously, 
X|KJ = \X-U\ 
= \X\-h 
= pq-(h-l) 
[by (2)]. 
4 z 
i = l 
Since | K( | < p, at most h — I of the K,- fail to contribute p to the sum. Hence, 
Let H' be the subgraph of H induced by X' = X, u • • • u K,_j+i u 
{«*}. Thus 
\X'\ = p{q-h+l)+l<pq+l 
= \X\ 
[by (2)], 
(3) 
so by the minimality of//, 
co(H>(H')>|X'| 
[by(P3)]. 
(4) 
But p = co(if) > co(H'X so 
a(H')>|X'|/p 
[by (4)] 
> ^ ~ / i - h l 
[by (3)]. 
Let S' be a stable set of H' of cardinality q - h -\- 2, Certainly u^ eS\ for 
otherwise S' would contain two vertices of a clique (by the definition of if'). 
Therefore, S = S' u [/ is a stable set of H with ^ + 1 vertices, contradicting 
the definition of q, 
| 

56 
3. 
Perfect Graphs 
Theorem 3.3 The Perfect Graph Theorem (Lovasz [1972b]). For an 
undirected graph G = (V, E), the following statements are equivalent: 
(Pi) 
(P2) 
(P3) 
"KG J = Z(G^) 
a(G J = fc(G J 
OKGAMGA)>\A\ 
(for all A £ V), 
(for all A £ V), 
(for all A £ V). 
Proof, We may assume that the theorem is true for all graphs with fewer 
vertices than G. 
(Pi) => (P3). Suppose we can color G^ in (O(GA) colors. Since there are at 
most a(G^) vertices of a given color it follows that co(G^)a(G^) > |>4|. 
(P3) => (Pi). Let G = (K, £) satisfy (P3); then by induction each proper 
induced subgraph of G satisfies (Pi)-(P3). It is sufficient to show that 
co(G) = x(Gy 
If we had a stable set S of G such that co(Gv-s) < oy{G\ we could then paint 
S orange and paint Gy-s^^ 0}{G) — 1 other colors, and we would have co(G) 
= Z(G). 
Suppose Gy-s has an co(G)-clique K{S) for every stable set S of G. Let 6^ 
be the collection of all stable sets of G, and keep in mind that S n K(S) — 0 . 
For each x,- e F, let /i,- denote the number of cliques K{S) which contain x,-. 
Let H = (X, F) be obtained from G by multiplying each x,- by hi. On the one 
hand, by Lemma 3.2, 
co(H)(x(H)> \X\. 
On the other hand, using some simple counting arguments we can easily 
show that 
Xi€V 
w(H) 
aim 
= 1\K(S)\ = 
SeSr 
< oKGl 
= max Y, ^i 
= maxrXir 
< 1^1 - 1, 
= oy(fi)\^\. 
nK(S)|l 
(5) 
(6) 
(7) 
(8) 
(9) 

2. 
Perfect Graph Theorem 
57 
which together imply that 
co(H)a(H)<co(GXI^|-l)<|X|, 
a contradiction.* 
(P2) <=> (P3). By what we have already proved, we have the following 
implications: 
G satisfies (P2) o G satisfies (Pi) 
o G satisfies (P3) <:> G satisfies (P3). 
| 
Corollary 3.4. A graph G is perfect if and only if its complement G is 
perfect. 
Corollary 3.5. A graph G is perfect if and only if every graph H obtained 
from G by multiplication of vertices is perfect. 
Historical note. The equivalence of (Pi) and (P2) was almost proved by 
Fulkerson. He heard the news of the success of Lovasz, who was not aware 
of Fulkerson's work at that time, from a postcard sent by Berge. Fulkerson 
immediately returned to his previous results on pluperfection and, within a 
few hours, obtained his own proof. Such are the joys and sorrows of research. 
His consolation, to our benefit, was that in the process of his investigations, 
Fulkerson invented and developed the notion of antiblocking pairs of 
polyhedra, an idea which has become an important topic in the rapidly 
growing field of polyhedral combinatorics.! 
Briefly, and in our terminology, Fulkerson had proved the following: 
Let Jt(G) be the collection of all graphs H which can be constructed from 
a graph G by multiplication of vertices. Then, H satisfies (Pi) for all HeJi{G) 
if and only if H satisfies (P2) for all H e J^(G). 
* Equations (5)-(9) are justified as follows: 
(5) Consider the incidence matrix whose rows are indexed by the vertices Xj, JC2,. . . , x„ and 
whose columns correspond to the cliques K{S) forSeS^. 
Then, h^ equals the number of non-
zeros in row /, and | K{S) \ equals the number of nonzeros in its corresponding column, which is 
by definition equal to a){G). 
(6) At most one ''copy" of any vertex of G could be in a clique of H. 
(7) If a maximum stable set of H contains some of the " copies " of JC, , then it will contain all 
of the "copies." 
(8) Restrict attention to those rows of the matrix pertinent to (5) which belong to elements 
ofr. 
(9) \TnK{S)\ 
< 1 and \TnK{T)\ 
= 0. 
t Polyhedral combinatorics deals with the interplay between concepts from combinatorics 
and mathematical programming. 

58 
3. 
Perfect Graphs 
Clearly, this result together with Lemma 3.1 would give a proof of the equival-
ence of (Pi) and (P2) for G. 
3. 
p-Critical and Partitionable Graphs* 
An undirected graph G is called p-critical if it is minimally imperfect, that 
is, G is not perfect but every proper induced subgraph of G is a perfect graph. 
Such a graph, in particular, satisfies the inequalities 
a(G — x) = k(G — x) 
and 
(o(G — x) = /(G — x) 
for all vertices x, where G — x denotes the resulting graph after deleting x. 
The following properties of p-critical graphs are easy consequences of the 
Perfect Graph theorem. 
Theorem 3.6. If G is a p-critical graph on n vertices, then 
n = (X(G)(D(G) + 1, 
and for all vertices x of G, 
a(G) = k(G - x) 
and 
co(G) = i{G - x). 
Proof. By Theorem 3.3, since G is p-critical we have n > oc(G)a>(G) and 
n — 1 < (x(G — x)(o{G — x) for all vertices x. Thus, 
n - 1 < a(G - X)CD(G - X) < a(G)co(G) < n. 
Hence, n- 
1 = a(G)co(G), a(G) = a(G - x) = k{G - x), and 
a>{G) = co(G — x) = x(G — x). 
I 
Let a, CO > 2 be arbitrary integers. An undirected graph G on n vertices is 
called (a, (o)-partitionable if n = aco + 1 and for all vertices x of G 
a = k(G — x), 
(o = x{G — x). 
We have shown in Theorem 3.6 that every p-critical graph is (a, co)-partition-
able with a = a(G) and co = CD(G). A more general result holds. 
Remark 3.7. 
After removing any vertex x of an (a, co)-partitionable graph, 
the remaining graph has aco vertices, chromatic number co, and clique cover 
number a. So an co-coloring of G — x will partition the vertices into co stable 
sets, one of which must be at least of size a. Similarly, a minimum clique 
* Sections 3.3-3.5 were written jointly with Mark Buckingham. 

3. 
p-Critical and Partitionable Graphs 
59 
cover of G — X will partition the vertices into a cliques, one of which must 
be at least of size co. 
Theorem 3.8. If G is an (a, co)-partitionable graph, then a = a(G) and 
CO = 
co(G). 
Proof, Let G = (F, £) be (a, co)-partitionable. By Remark 3.7, a < a(G) 
and CO < co(G). Conversely, take a maximum stable set 5 of G and let y e 
V — S. Then S is also a maximum stable set of G — y, so 
a(G) = \S\ = a(G - y) < KG - y) = a. 
Thus, a(G) < a. Similarly, co(G) < o). Therefore, a = a(G) and a> = (o(G). 
| 
Theorem 3.8 shows that the integers a and co for a partitionable graph are 
unique. Therefore, we shall simply use the term partitionable graph and 
assume that a = a(G)andco = co(G). The class ofp-critical graphs is properly 
contained in the class of partitionable graphs which, in turn, is properly con-
tained in the class of imperfect graphs (Exercise 10). 
Lemma 3.9. If G is a partitionable graph on n vertices, then the following 
conditions hold: 
(i) G contains a set of n maximum cliques K^,K2,...,K„ 
that cover each 
vertex of G exactly oj{G) times; 
(ii) G contains a set of n maximum stable sets S^, S2,..., 5„ that cover 
each vertex of G exactly a(G) times; and 
(iii) Ki n Sj = 0 if and only if i = j . 
Proof. Choose a maximum clique K of G and, for each xeK, choose a 
minimum clique cover JT^ of G — x. By Remark 3.7, all of the members of 
JTJC must be cliques of size co. Finally, let A be the n x n matrix whose first 
row is the characteristic vector of K and whose subsequent rows are the 
characteristic vectors of each of the cliques in jf^ for all xeK. (Note that the 
number of rows is 1 + aco = n.) 
Each vertex y^K is covered once by Jt^ for all xeK. Each vertex zeK 
is covered once by K and once by JT^ for all z # x e X. Therefore, every 
vector is covered co times. For each row a^ of A we let Ki be the clique whose 
characteristic vector is a^. We may express (i) by the matrix equation 1A = col, 
where 1 is the row vector containing all ones. Condition (i) will be satisfied 
once we show that the Ki are distinct. 
For each i, pick a vertex v e K^ and let ^ denote a minimum stable set 
covering (coloring) olG — v. By Remark 3.7 and an easy counting exercise, 
there must be some stable set Si e ^ such that K^ nSi = 0. Let bf be the 

60 
3. 
Perfect Graphs 
characteristic vector of 5^, and let B denote the n x n matrix having rows b, 
for i = 1,..., n. Since 1 • by= a, we have 
lAB^ = colB^ = coal = (n - 1)1. 
But a, • b?^ = 0, so AB^ = J — I, where J is the matrix containing all ones 
and I is the identity matrix. This proves (iii). 
Finally, both A and B are nonsingular matrices since J — I is nonsingular. 
Thus, the X^ are distinct and the Sf are distinct. Furthermore, 
IB = IBA^(A^)-^ = 1(J - IXA^)-^ =(n- 
l)l(A'r' 
= [(n - l)/co]l = al, 
which proves (ii). 
| 
The next result shows that all the maximum cliques and stable sets of G 
are among those in Lemma 3.9. 
Lemma 3.10. A partitionable graph G contains exactly n maximum 
cHques and n maximum stable sets. 
Proof. Let A and B be the matrices whose rows are the characteristic 
vectors of the cliques and stable sets, respectively, satisfying AB^ = J — I as 
specified in Lemma 3.9. Suppose that c is the characteristic vector of some 
maximum clique of G. We will show that c is a row of A. 
We first observe that A~^=co~^J — B^ since 
A((D-'J - B^) = co^AJ - AB^ = J - AB^ = I. 
A solution t to the equation tA = c will satisfy 
t = cA"^ = co-^cJ - cB^ = (o-\(ol) 
- cB^ = 1 - cB'^. 
Therefore, t is a (0, 1)-valued vector. Also, 
t • l'^ = (1 - cB'^). 1^ = « - ac • l'^ = « - aco = L 
Therefore, t is a unit vector. This implies that c is a row of A. 
Similarly, every characteristic vector of a maximum stable set is a row of B. 
I 
Theorem 3.11. Let G be an undirected graph on n vertices, and let 
a = a(G) and o) = co(G). Then G is partitionable if and only if the following 
conditions hold: 
(i) n = aco + 1; 
(ii) 
G has exactly n maximum cliques and n maximum stable sets; 

3. 
p-Critical and Partitionable Graphs 
61 
(iii) every vertex of G is contained in exactly co maximum cliques and in 
exactly a maximum stable sets; 
(iv) each maximum clique intersects all but one maximum stable set and 
vice versa. 
Proof. (=>) This implication follows from Lemmas 3.9 and 3.10. 
(<=) Following our previous notation, conditions (ii)-(iv) imply that 
AJ = JA = coJ, 
BJ = JB = aJ, 
AB^ = J - I, 
where A and B are n x n matrices whose rows are the characteristic vectors 
of the maximum cliques and maximum stable sets, respectively. Let x, be a 
vertex of G and let h^ be its corresponding column in A. Since 
A^B = B^BA^B = B HJ - I)B = B ^aJ - B) 
= aa~^J — I = J — I, 
we obtain h^B = 1 — e^, where e^ is the ith unit vector. Thus, hf designates co 
rows of B (i.e., stable sets of G) which cover G — x,. Thus, x(G — x^) < co. 
By a similar argument, k(G — x^) < a for all x^. But since n — I = aco, we 
must have x(G — x^) = co and k(G — Xf) = a. Therefore, G is partitionable. 
I 
Corollary 3.12 (Padberg [1974]). 
If G is a p-critical graph, then 
conditions (i)-(iv) of Theorem 3.11 hold. 
Padberg's investigation of the facial structure of polyhedra associated 
with (0, l)-valued matrices first led him to a proof of Corollary 3.12. (We shall 
discuss some of Padberg's work in Section 3.5.) The proof presented here, 
using only elementary linear algebra, is due to Bland, Huang, and Trotter 
[1979]. Additional results on p-critical graphs can be found in Section 3.6. 
The only p-critical graphs known are the chordless cycles of odd length 
and their complements. Figures 3.1 and 3.2 illustrate the conditions of 
Theorem 3.11 for the graphs C5 and C-j. 
K, = {1,2}, K2 = {2, 3}, K3 = {3,4}, X4 = {4, 5}, K5 = {5,1} 
Si = (3, 5}, S, = {I, 4}, S3 = {2, 5}, S4 = {1, 3}, S5 = {2, 4} 
{\}EK,,K,,S2,S^; 
{2}EK„K2,S„S,; 
{3} G K2, K„ Si, S4; {4} G K3, X4, S2, S5; 
{5}eK4,X5,Si,S3 
/7= 5. a/(^;=2, ui(6) = Z 
Figure 3.1. The graph C5 and its maximum clique and stable set structure as specified in 
Theorem 3.11. 

62 
3. 
Perfect Graphs 
A:, = {1, 2, 3}, K2 = {2, 3, 4}, X3 = {3, 4, 5}, K^ = {4, 5, 6} 
K, = {5, 6, 71, K„ = {6,7, \},K, = {7, 1,2} 
S, = {4, 7i,S2 = {1,5), S3 = {2,6},S4 = {3,7} 
5, = {l,4},Se, = {2, 5}, S7 = {3,6} 
{l}G/C,,Kft,/C-7,S2,S5 
{3}6/<',,/C2,K3,S4,S7 
{ 5 } G / C 3 , K4, ^C5,S2,56 
{ 2 } G K „ K 2 , K 7 , S 3 , S , 
{ 4 } e K 2 , K 3 , K 4 , S , , 5 5 
{6} E /C4, /C5, K5, S3, S7 
{ 7 } G K 5 , / C e „ X 7 , S i , S 4 
/7 = 7 
a(G)^Z 
ui(G)^Z 
Figure 3.2. The graph C7 and its maximum cHque and stable set structure as specified in 
Theorem 3.11. 
4. 
A Polyhedral Characterization of Perfect Graphs 
Let A be an m X n matrix. We consider the two polyhedra 
P(A)= {x|Ax< l , x > 0 } 
and 
Pj(A) = convex hull({x|xe P(A), x integral}), 
where x is an n-vector and 1 is the m-vector of all ones. Clearly P/(A) ^ P(A), 
and for (0, 1)-valued matrices A having no zero column, P(A) and P/(A) 
are bounded and are within the unit hypercube in W. An important example 
of such a matrix is the maximal cliques-versus-vertices incidence matrix of 
an undirected graph G. This is called the clique matrix if all the maximal 
cliques are included. The clique matrix of G is unique up to permutations of 
the rows and columns (see Figure 3.3). 
Let A be any m x n (0, 1)-valued matrix having no zero columns. The 
derived graph of A has n vertices r^, i?2,..., t^„ corresponding to the columns 
of A, and an edge connecting Vi and Vj whenever the ith and 7th columns of 
A have a 1 in some row a^. Clearly every row of A forms a (not necessarily 
K 
1
1
1
0 
0 
0 
1
0 
1
0 
0 
0 
1 0 
1 
Figure 3.3. A graph and its clique matrix. 

4. 
Polyhedral Characterization of Perfect Graphs 
63 
maximal) clique in its derived graph. Many matrices have the same derived 
graph. For example, if A is either the chque matrix or the edge incidence 
matrix of G, then the derived graph of A will be G. 
Lemma 3.13. Let G be an undirected graph, and let A be any (0,1)-valued 
matrix having no zero column whose derived graph equals G. Then x is an 
extremum of P/(A) if and only if x is the characteristic vector of some stable 
set of G. 
Proof, If X is an extremum of P/(A), then x must be integral, and since A 
is (0, 1)-valued without a zero column, x < L Thus, x is the characteristic 
vector of some set of vertices 5. Suppose there exist vertices u and v of 5 that 
are connected in G; hence some row a^ of A has a 1 in columns u and v. This 
yields a^ • x > 2, yet Ax < 1. Therefore, S must be a stable set. 
Conversely, given that x is a characteristic vector of a stable set of G, 
certainly x e P/(A). Let x be expressed as a convex combination of some set 
of extrema {h^'\ h^^\ ..., b^^^} of P^A); that is, 
I 
i 
Thus, if Xk = 1, then b^^^ = 1 for all i, and if x^ = 0, then bj,^'^ = 0 for all i. 
Therefore, x = b^*^ and x is an extremum of P/(A). 
I 
Theorem 3.14 (Chvatal [1975]). Let A be the clique matrix of an undirect-
ed graph G. Then G is perfect if and only if P/(A) = P(A). 
To prove the theorem we shall use a result from linear programming used 
by Edmonds [1965] and others: 
Lemma 3.15. Given bounded polyhedra S and T, where S has a finite 
number of extrema, 
S = T 
iff 
max c • x = max c • x (Vc, integral). 
subjxeS 
subjxeT 
Proof of Theorem 3.14. Assume that P/(A) = P(A). Let Gy be an induced 
subgraph of G, and let u denote the characteristic vector of U. We have, 
oc(Gu) = max ux = 
max ux 
= 
min y 1. 
subjxePi(A) 
subjAx<l,x>0 
subjyA>u, y>0 
The first equality follows from the fact that maximums are always achiev-
able at some extremum and the extrema of P/(A) correspond to stable sets 
(Lemma 3.13). The second equality follows from Lemma 3.15 setting c = u, 
and the third equality comes from the duality theorem of linear programming. 

64 
3. 
Perfect Graphs 
Therefore, choose y > 0 such that ^ yi = oc{Gu) and u < yA. Denoting the 
jth column of A by a^, we obtain 
11/| = X "j ^ Z y a^' = y Z a^" ^ y . (co(G^)l) = a(G^MG^). 
jeU 
jeU 
jeU 
Thus, by Theorem 3.3, G is perfect. 
Conversely, assume that G is perfect. For any integer vector c, form the 
graph H by multiplying the ith vertex of G by max (0, Cj) for each i. By Lemma 
3.1, H is perfect. We have the following: 
a(//) = a,(G) 
= max c • X 
subj xePi(A) 
< max c • X 
subjxGP(A) 
= 
min y • 1 
subj yA>c, y >0 
< 
min y • 1 
subj yA>c, non-negative integral y 
= K(G) 
= m). 
The maximum weighted stable set of 
G given by c. 
The maximum can always be found 
at an extremum, which corresponds 
to a stable set (Lemma 3.13). 
PjiA) ^ P(A). 
Duality theorem. 
The constraint set is smaller. 
The minimum clique covering of G 
such that vertex i is covered Cj 
times. The constraint yA > c, non-
negative integral y, specifies such a 
covering. 
Any clique off/ corresponds to a 
clique of G, thus k{H) > k^(G); if 
vertex i of G is covered by c^ 
cliques, then there are c^ cliques in 
H, each covering a different copy of 
U so /Ce(G) > k(H). 
But (x(H) = k{H). Thus, 
max c • X = max c • x 
subj X e Pi(A) 
subj x e P(A) 
and, by Lemma 3.15, Pj{k) = P(A). 
I 
Remark. The first half of the proof of Theorem 3.14 still holds under a 
weakened hypothesis on A: 
If A is a (0, 1)-valued matrix having no zero column whose derived graph 
equals G, then P/(A) = P(A) implies that G is perfect. 

5. 
Polyhedral Characterization of p-Critical Graphs 
65 
5. 
A Polyhedral Characterization of p-Critical Graphs 
Manfred Padberg first discovered the properties shown in Section 3.3 of 
p-critical graphs while investigating the facial structure of the polyhedra 
P(A) for general (0, 1)-valued matrices A. In doing so, he also discovered a 
polyhedral characterization of p-critical graphs. In Padberg [1973,1974], he 
used the results of Lovasz and Chvatal to produce these results. In a later 
work, Padberg [1976b], he developed a more general approach, which 
enabled him to prove the same results directly and to prove the theorems of 
Lovasz and Chvatal in a different manner. 
The matrix A is said to be perfect if P(A) is integral, that is, P(A) has only 
integer extrema: P/(A) = P(A). A is said to be almost perfect if P(A) is 
almost integral that is, (i) P/(A) ^ P(A) (P(A) has at least one nonintegral 
extremum), and (ii) the polyhedra P/A) = P(A) n {XG IR"|xj = 0} are all 
integral,7 = 1, 2,..., n. 
For the remainder of this section, A will always denote an m x n (0, 1)-
valued matrix having no zero column, and P, Pj, and Pj will denote P(A), 
Pj(A), and P/A), respectively. 
Padberg's results, although not stated in the following manner, include the 
following six theorems. 
Theorem 3.16. 
If A is perfect, then A is an augmented clique matrix of its 
derived graph, that is, A is the clique matrix possibly augmented with some 
redundant rows corresponding to nonmaximal cliques. 
Let J denote the matrix of all ones and I the identity matrix. We say that A 
contains the n x n submatrix J — I if some permutation of J — I occurs as 
an n X n submatrix of A. 
Theorem 3.17. 
If A is almost perfect, then either (i) A is an augmented 
clique matrix of its derived graph or (ii) A contains the n x n submatrix 
J - I . 
Theorem 3.18. 
Let G be the derived graph of A. If A is almost perfect and 
does not contain the « x n submatrix J — I, then 
(i) n = a(G)co(G) + 1; 
(ii) every vertex of G is in exactly a> cliques of size oj and in exactly a stable 
sets of size a; 
(iii) 
G has exactly n maximum cliques and n maximum stable sets; 
(iv) there is a numbering of the maximum cliques K^, X 2 , . . . , X„ and 
maximum stable sets S^, S2,..., 5„ of G such that X^ r^ Sj = 0 if and only if 
i = J' 

66 
3. 
Perfect Graphs 
A 
A' = 
Figure 3.4. The derived graph G of the matrix A is a perfect graph, yet P{\) has (i, j , i, 0,0,0) 
as an extremum; thus A is an imperfect matrix. A' is the cHque matrix of G and is perfect. 
Theorem 3.19. A is perfect if and only if A is an augmented clique matrix 
of its derived graph and the derived graph is perfect. 
Corollary 3.20. A is almost perfect if and only if either (i) A is an aug-
mented clique matrix of its derived graph and the derived graph is almost 
perfect (p-critical) or (ii) A has no row of all ones and contains the n x n 
submatrix J — I for n > 3. Furthermore, in (ii) the derived graph is complete. 
Corollary 3.21. Every p-critical graph has the four properties of Theorem 
3.18. 
Note carefully the wording of Theorem 3.19. It is very possible that A is 
not a perfect matrix and yet its derived graph G is perfect and every row of A 
corresponds to a maximal clique of G. Of course, in this case, by Theorem 
3.19, the matrix is missing a row corresponding to some other maximal 
clique (see Figure 3.4). 
Theorems 3.16, 3.17, 3.19, and Corollary 3.20 are very useful when con-
sidering graphs as incidence matrices. Corollary 3.21 is a restatement of 
Corollary 3.12. 
To show Theorems 3.16 and 3.17 we will turn to the concept of anti-
blocking polyhedra (Fulkerson [1971, 1972]). Two polyhedra P^ and Pj 
are an antiblocking pair if P^ = {x|xP2 < 1, x > 0} or P2 = {yly^i ^ I5 
y > 0}, the conditions being equivalent. If P2 is generated from a (0, 1)-
valued matrix A2 having no zero column, then we have the property, among 
many others, that every extremum of P^ is a projection of some row of A2 
and every nonredundant row of A2 is an extremem of Pj (Fulkerson [1972]). 
The same result holds if we interchange the indices. 
Let b^^\ hf'^\ ..., b^*"^ be the extrema of P/ and denote the matrix having 
rows h^'\ h^^\..., h^'^ by B. Define Q = P(B), g, = P/B) and Qj = P/B) for 
j = 1, 2,..., n. The polyhedra Pj and Q are an antiblocking pair (Fulkerson 
[1972]). By Lemma 3.13, the rows of B correspond to all of the stable sets 
of G, the derived graph of A. Thus, B is an augmented clique matrix of the 
complement G. See also Monma and Trotter [1979]. 

5. 
Polyhedral Characterization of p-Critical Graphs 
67 
Proof of Theorem 3.16. Let A be perfect (Fj = P) and G be its derived 
graph. Since Pj and Q are an antiblocking pair, P and Q are also an anti-
blocking pair. By the properties of antiblocking pairs, the extrema of Q must 
all be projections of the rows of A, so Q is integral. By Lemma 3.13, all the 
stable sets of G, in other words all the cliques of G, are extrema of Q, since 
Q = Qi- Thus, every clique of G must be a projection of some row of A. 
Therefore, A is an augmented clique matrix of its derived graph. 
| 
Proof of Theorem 3.17. Assuming that A is almost perfect, Pj is integral 
for) = 1, 2,..., n. By a similar argument to that for Theorem 3.16, each Qj 
is also integral. This follows since P(A) n {xe W\Xj = 0} is the same as 
removing the jih column from A and forming its polyhedron. 
Case 1: Q is not integral and thus is almost integral. In this case Padberg 
was able to show by a direct analysis of the facets of P that P and Qj are an 
antiblocking pair. As in the proof of Theorem 3.16, we have that A is an 
augmented clique matrix of its derived graph. 
Case 2: Q is integral. In this case Padberg was able to show by the non-
integrality of P that 1 is an extremum of Q. This means that B must be the 
identity matrix (or a permutation of it). This in turn implies that the derived 
graph of A is complete. Therefore, for Pj to be integral, some row k of the 
matrix formed by deleting the jih column of A must be all ones (Theorem 
3.16). Yet no row in A can have all ones since A is only almost perfect. Thus, 
row fc in A must be all ones except for a zero in column j . Since this is true for 
all J = 1, 2,..., n, A contains the n x n submatrix J — I. 
| 
Although Theorem 3.18 is essentially contained among the results of 
Section 3.3, Padberg's proof does not use the Perfect Graph theorem and his 
technique is valuable in its own right. Before proving Theorem 3.18 we state 
Padberg's cornerstone lemma. 
Lemma 3.22. If x is a nonintegral extremum of an almost integral 
polyhedron P, then for every n x n nonsingular submatrix A^ of A such 
that AjX = 1, there exists an n x n nonsingular submatrix Bj of B satisfying 
the matrix equation 
Furthermore, 
BiAl = J - L 
X = (l/(n - 1))B1L 
As a quick observation, we note that for any noninteger extremum x of P, 
X > 0. If for some fc, Xj, = 0, then x G P^ and thus is an extremum of P^. But 
then X would have to be integral. The only way x could be an extremum of P 

68 
3. 
Perfect Graphs 
is to satisfy n linearly independent constraints of Ax < 1. Let A^ be the n x n 
nonsingular submatrix of A. Thus, for each x there does exist such an A i as 
specified in Lemma 3.22. 
Padberg was also able to show that x, a noninteger extremum of P, is the 
unique nonintegerextremum; that y = (l/(n — l))A{l,for any A^ of Lemma 
3.22, is an extremum of Q; and that for any A^ and corresponding Bj of 
Lemma 3.22, x = |det Aj" ^ 11 and y = |det B^ ^ 11. Armed with these matrix 
equations, the proof of Theorem 3.18 is a straightforward exercise in linear 
algebra. 
Proof of Theorem 3.18. Let G be the derived graph of A, where A is almost 
perfect and does not contain the n x n submatrix J — L By the definition of 
almost perfect we have the existence of a noninteger extremum x of P. By 
Lemma 3.22 and the previous discussion, x is unique and there exist n x n 
nonsingular submatrices A^ of A and Bi of B such that A^x = 1 and B^ A{ 
= J - L Moreover, for all such Ai and Bi,x = (l/(n - l))Bll = |det Ai'^l, 
and y, defined by y = (l/(n — l))Ajl = |det Bj" ^ 11, is an extremum of Q. 
We shall first show that A^ is unique, in that any row a^ of A satisfying 
afe • X = 1 is in Ai. We have the following implications: 
BiAj = J - I => AiB{ = J - I ^ Bl = X - A7 W A r ' = X - Bl, 
where X is the n x n matrix having n columns of x. Thus, if a^ • x = 1, then 
a^A;"^ = a^X - a^Bj is 0 or 1, yet a^A;"^ • 1 = a^ • x = 1. Therefore, 
a^ A^ ^ = tj, the jth unit vector, for some; G {1,2,..., w}. This implies that a^ 
is equal to thejth row of A^, that is, a^ is in Aj. Finally, since x = | det A^" ^ 11, 
we have that A^ contains exactly all the rows of A having the maximum 
number of ones. By Theorem 3.17, A is an augmented clique matrix of G. 
Therefore, A^ must contain exactly all the maximum cliques of G. 
A similar argument holds for y, B^, B and G. Since 
Biy = Bi((l/(n - 1))AI1) = 1, 
we have Bj" ^ = Y — A|. Thus for any row b^ of B satisfying b^ • y = 1, we 
have bfcBj"^ = b^Y — b^Aj, and yet b^Bf ^ • 1 = b^ • y = 1. So b^ is in Bj. 
Since y = |det B^"^ |1, and since by construction B is an augmented clique 
matrix of G, we have that B^ must contain exactly all the maximum cliques 
ofG. 
(i) The row sum of A^ is o){G), yet A^l = Ai |det Aj |x = |det A^ |1; 
thus |det Ai | = co(G). Similarly for B^, the row sum is a(G), yet 
Bil = BildetBily = |detBi|l; 
so |det Bi I = a(G). Therefore, a(G)co(G) = |det BiAJI = |det (E - I)| = 
\(-iy-\n 
- 1)1 = w - 1. Thus, n = a(GMG) + 1. 

5. 
Polyhedral Characterization of p-Critical Graphs 
69 
(ii) Since y = (l/(n - l))All, we have (l/a)l = (l/aco), Ajl, and thus 
col = A|l. That is, all the column sums of A^ are co. Therefore, every vertex is 
in exactly a> cliques of size co. 
Similarly for x, x = (l/(n - 1))B}1 implies (l/co)l = (l/aco)Bll, and 
hence al = B{1. Therefore, every vertex is in exactly a stable sets of size a. 
(iii) Al is an n X w nonsingular matrix containing exactly all the maxi-
mum cliques of G; therefore, G has exactly n maximum cliques. By a similar 
argument on B^, G has exactly n maximum stable sets. 
(iv) Let Ki correspond to the ith row of A^ for i = 1, 2, ..., n, and Sj 
correspond to the jth row of B^ for 7 = 1, 2,..., n. Since B^Aj = J — I, the 
maximum cliques K^, K2, ..., K„ and maximum stable sets Si, S2, ", S„ 
of G are numbered such that Ki r\Sj = 0 if and only if / = j . 
| 
The "only if" condition of Theorem 3.19 is a stronger statement than 
Theorem 3.16; it states that the derived graph itself is perfect, which also 
turns out to be a sufficient condition for A to be perfect. In fact. Theorem 3.19 
is precisely Chvatal's Theorems 3.14 and 3.16 put together. A more direct 
proof here will be instructive. Again we need an intermediate result of 
Padberg's. 
Lemma 3.23. P is integral if and only if maXg^bj xep Q * x = 0 mod 1 for 
all (0, l)-valued q. 
It is well known that for a general matrix A with non-negative entries and 
no zero column, satisfying max^^bj ^ep c • x = 0 mod 1 for all non-negative c 
is equivalent to P being integral. But for our matrix A, considering only 
(0, 1)-valued q is sufficient. 
Proof of Theorem 3.19. (<^ ) Let A be an augmented clique matrix of its 
derived graph G, where G is perfect. Let q be a (0, l)-valued vector and G' its 
corresponding induced subgraph of G. Then 
(x(G') = max q • x < max q • x = 
min 
y • 1 
subjxePf 
subjxeP 
subjyA>q, y>0 
< 
min 
y • 1 = k(G). 
subj yA>q, y>0, integral 
The first equality is clear because of Lemma 3.13 and the fact that an optimal 
solution can always be found at an extremum. The last equality is true since 
A is an augmented clique matrix and any optimal y is (0, 1)-valued. The in-
equalities have been seen before in Section 3.4. 
Now since G is perfect, we must have equality everywhere. Thus, 
max q • X = 0 mod 1. 
subjxeP 

70 
3. 
Perfect Graphs 
Finally, since q was arbitrary, Lemma 3.23 implies that P is integral, and thus 
A is perfect. 
(=>) Let A be perfect. By Theorem 3.16, A is an augmented clique 
matrix of its derived graph. To show that G is perfect we shall use induction 
on the size of the induced subgraphs. 
For IG' I = 0 it is clear that a(G') = k{G'). Assume that every /c-vertex 
induced subgraph is perfect. Given |G'| = /c + 1, let q be the characteristic 
vector of G'. Since P is integral and A is an augmented clique matrix of G, 
a(G') = max q • x = 
min 
y 1 < 
min 
y • 1 
subjxeP 
subjyA>q, y>0 
subj yA>q, y>0, integral 
= KG'). 
(10) 
We claim that there is an integer optimal solution for min^^bj y^>q y>o y 1-
We know that an optimal solution y exists. If y is integral we are done; 
otherwise there is a k such that 0 < y^ < I. Clearly the /cth row a^ of A has 
the property a^ • q > 0, for otherwise y would not be optimal. Define q^ = qi 
for Uki = 0 and qi = 0 for a^i = 1. Since q is the characteristic vector of a 
smaller induced subgraph, and since (10) still holds, there is an integer 
optimal solution f for q. Clearly any optimal solution for q has its /cth 
component zero; thus y is feasible but not optimal for q. Yet y*, where y* = y 
except for y^ = 1, is feasible for q. That is, 
min 
y • 1 < 
min 
y • 1 < y * • 1 = 
min 
y • 1 + 1. 
subj yA > q, y > 0 
subj yA > q, y > 0 
subj yA > q, y> 0 
Therefore, y* is an integer optimal solution for minsubjy^>q y>o y • 1 and 
thus a(G') = k(G). 
' 
I 
The observant reader will notice that the same "only if" proof could have 
been used in Theorem 3.14. 
The proofs of Corollaries 3.20 and 3.21 are now easy. 
Proof of Corollary 3.20. {<=) Case 1: Let A be an augmented clique 
matrix of its derived graph G, where G is p-critical. Since deleting any vertex 
j of G results in a perfect graph, all the Pj are integral. Yet by Theorem 3.19, 
A is imperfect because G is imperfect; therefore A is almost perfect. 
Case 2: Let A have no row of all ones and contain the n x n submatrix 
J — I for n > 3. Since each Pj is obtained from the matrix A with its jth 
column deleted, and since this submatrix has a row containing all ones, all 
Pj are integral. Yet (l/(n — 1))1 is an extremum of P, since every row has at 
most n — I ones and J — I is an /t x « submatrix. Therefore A is almost 
perfect. 
(=>) Given that A is almost perfect, we apply Theorem 3.17 to obtain 
two cases. 

6. 
Strong Perfect Graph Conjecture 
71 
Case l.Ais an augmented clique matrix of its derived graph G. By Theorem 
3.19 each Pj is integral, the submatrix of A obtained by deleting thejth column 
is perfect, and thus the deletion of any vertex) of G results in a perfect graph. 
Yet by Theorem 3.19 again, G itself is not perfect since A is not perfect. 
Therefore, G is p-critical. 
Case 2: A contains the n x n submatrix J — I. Clearly A does not contain 
a row of all ones, for otherwise A would be perfect. Finally, we must certainly 
have n > 3, thus G is complete. 
| 
Proof of Corollary 3.21. Given a p-critical graph G, form A, its chque 
matrix. By Corollary 3.20, case 1, A is almost perfect. Certainly G is the de-
rived graph of A, and thus the hypothesis of Theorem 3.18 is satisfied. 
| 
6. 
The Strong Perfect Graph Conjecture 
The odd cycle C2k+1 (for /c > 2) is not a perfect graph since a(C2fc+1) = k 
and k(C2k+i) = k + I (or, alternatively, since oj{C2k+i) = 2 and x(C2k+i) 
= 3). However, every proper subgraph of C2k+i is perfect. Thus, C2k+1 is a 
p-critical graph (i.e., minimally imperfect) and by the Perfect Graph theorem 
its complement C2k+1 is also p-critical. To date, these are the only known p-
critical graphs. 
During the second international meeting on graph theory, held at Halle-on-
Saal in March 1960, Claude Berge raised the question of whether or not other 
p-critical graphs besides the odd cycles and their complements exist. He 
conjectured that there are none, and this has come to be known as the 
strong perfect graph conjecture (SPGC). (Actually, the word "conjecture" 
first appeared in Berge [1962].) 
The strong perfect graph conjecture may be stated in several equivalent 
forms: 
SPGC I. An undirected graph is perfect if and only if it contains no in-
duced subgraph isomorphic to C2k+i or C2k+i (for k > 2). 
SPGC2. An undirected graph G is perfect if and only if in G and in G 
every odd cycle of length > 5 has a chord. 
SPGC3. The only p-critical graphs that exist are C2k+i and C2k+i 
(for k > 2). 
The graphs C2k+i and C2k+i are commonly referred to as the odd hole 
and the odd antihole, respectively. 
We have seen in Sections 3.3 and 3.5 that p-critical graphs reflect an extra-
ordinary amount of symmetry (as indeed they should if the SPGC turns out 

72 
3. 
Perfect Graphs 
to be true). Let G be a p-critical graph on n vertices, and let a = a(G) and 
CO = co(G). Then the following conditions hold for G. 
Lovdsz condition 
n = (X(o + 1 
Padberg conditions 
Every vertex is in exactly co maximum cliques (of size co). 
Every vertex is in exactly a maximum stable sets (of size a). 
G has exactly n maximum cliques (of size co). 
G has exactly n maximum stable sets (of size a). 
The maximum cliques and maximum stable sets can be indexed Xj, 
Kj, ..., K„ and S^, S2, ..., S„, respectively, so that |K,- n S^l = 1 — 5,-^, 
where 5,-y is the Kronecker delta. 
Clearly, any p-critical graph must be connected. But C„ is the only con-
nected graph on n vertices for which co = 2 and having exactly n undirected 
edges such that each vertex is an endpoint of exactly two of these edges. So, 
by Padberg's conditions we obtain another equivalent form of the strong 
perfect graph conjecture: 
SPGC4.. There is no p-critical graph with a > 2 and cw > 2. 
Recall from Section 3.3 that a partitionable graph on n vertices satisfies 
the Lovasz and Padberg conditions. 
Figures 3.5 and 3.9 give two examples of (3, 3)-partitionable graphs which 
fail to be p-critical. For this reason, the Lovasz and Padberg conditions alone 
are not sufficient to prove the SPGC. Nevertheless, partitionable graphs do 
give us further reductions of the SPGC. 
One special type of partitionable graph is easy to describe. The undirected 
graph C^ has vertices i;i, i;2,1^3,..., r„ with r, and rejoined by an edge if and 
only if i and 7 differ by at most d. (Here and in the next theorem all subscript 
arithmetic is taken modulo n.) It is easy to see that the graph C^~+i is an 
(a, a))-partitionable graph. When co = 2, then C^~+i is simply the odd hole 
C2a+1; when a = 2, then C^~+i is the odd antihole C2o,+1-
Theorem 3.24 (Chvatal [1976]). For any integers a > 3 and co > 3, the 
partitionable graph C^J+\ is not p-critical. 
Proof. Let a > 3 and co > 3 be given. We will show that C^~+i contains 
a proper induced subgraph H which is not perfect. 
If we index the n ::= aco - 1 maximal cliques {K J of C^~+i so that Ki = 
{Vi,Vi+i,...,Vi+^^i}ioT each I < i < n, then the clique matrix of the graph 
has the familiar cyclical pattern, as shown in Figure 3.6. Let H denote the 

6. 
Strong Perfect Graph Conjecture 
73 
^ 
^z 
^ 3 
A; 
>^5 
^ 6 
^ 
^ 8 
^ 9 
^ 0 
0 
i 
1 
< 
2 
1 
1 
1 
1 
3 
1 
1 
{ 
4 
1 
1 
1 
5 
i 
1 
1 
6 
1 
1 
1 
7 
1 
1 
1 
8 
\ 
\ 
1 
9 
1 
1 
1 
•5^, 
Sz 
^ 3 
^4 
s^ 
s. 
Sy 
s^ 
S^ 
S.0 
0 
i 
1 
1 
1 
2 
1 
1 
1 
1 
3 
1 
1 
1 
4 
1 
1 
1 
5 
1 
1 
1 
6 
1 
1 
1 
7 
1 
1 
1 
8 
1 
1 
1 
9 
1 
1 
1 
Clique matrix 
Stable set matrix 
Figure 3.5. A graph satisfying the Lovasz and Padberg conditions which fails to be p-critical. 
The cHque matrix and stable set matrix indicate the required indexing of the maximum cliques 
and maximum stable sets. This example was discovered independently by Huang [1976] and by 
Chvatal, Graham, Perold, and Whitesides [1979]. 
subgraph remaining after deleting the a + 2 vertices t;„, t;2, i^ca+i» ^w+a* ^^^ 
all i;,^+2 for r = 2, 3, ..., a -- 1. In the deleting process every maximum 
clique has lost at least one of its members, so (o(H) < co — 1. Therefore, it 
suffices to show that H cannot be colored using co — 1 colors. 
Suppose that H is co — 1 colorable. Let v^ be colored black and let the 
CO — 2 additional colors be called the rainbow. We have the following series 
of implications: 
Xi => {i?3,..., i;^} requires the entire rainbow; 
^3 ^1^0+2 is black; 
{t;3,...,i;^,i;^+2} 
5 ^Ito+lS ^ ^o>+2 
=^ {^co+4» • • • 5 ^2cD+1} requires the entire rainbow; 
{i;^+4,..., V2^+u i?2a>+3} ^ ^a>+4 => ^^ac+s IS black; 

74 
3. 
Perfect Graphs 
Figure 3.6. The clique matrix of C"^^ + ,, where a> = 4 and a = 5. The markers designate which 
vertices are to be deleted to obtain an imperfect subgraph. 
and finally, by induction on t, 
t;j^+3 is black 
=^ {^ra)+4» • • •» ^(f + i)o>+1} requires the entire rainbow 
=^K+i)«+3} is black, 
for r = 2 , . . . , a - 2. 
Therefore, both v^ and v^^-Dto+d are black, but they are both contained in the 
clique i^(a-i)«,+3, a contradiction. Hence, xiH) > cw - 1 > (o(H) and H is 
imperfect as required. 
I 
As a corollary of Theorem 3.24 we obtain another equivalent version of the 
strong perfect graph conjecture: 
SPGCs. 
If G is p-critical with a(G) = a and co(G) — o, then G contains 
an induced subgraph isomorphic to C^jVi-
Chvatal, Graham, Perold, and Whitesides [1979] have presented two 
procedures for constructing (a, co)-partitionable graphs other than CJI'J+S-
If we we restrict the universe of graphs being considered by making an 
extra assumption about their structure, then, in certain cases, the SPGC can 
be shown to hold. Table 3.1 lists some successful restrictions. For the most 
part the original proofs cited do not make use of the Padberg conditions. 
Tucker [1979] has incorporated the Padberg conditions into new proofs of 
the SPGC for K^ 3-free graphs and 3-chromatic graphs. 

Exercises 
75 
Table 3.1 
Classes of graphs for which the strong perfect graph conjecture 
is known to hold 
Planar graphs 
Tucker [1973a] 
A^i 3-free graphs 
Parthasarathy and Ravindra [1976] 
Circular-arc graphs 
Tucker [1975] 
S-free graphs 
Parthasarathy and Ravindra [1979] 
3-chromatic graphs 
(actually, any graph with w < 3) 
Tucker [1977] 
Toroidal graphs; graphs having 
maximum vertex degree < 6 
Grinstead [1978] 
The strong perfect graph conjecture remains a formidable challenge to us. 
Its solution has eluded researchers for two decades. Perhaps in the third 
decade a reader of this book will settle the problem. 
EXERCISES 
1. Let X and y be distinct vertices of a graph G. Prove that (Gox) — y = 
{G -y)o 
X, 
2. Let Xj, X2,..., x„ be the vertices of a graph G and let // = G o h where 
h = (/ii, /i2,..., /i„) is a vector of non-negative integers. 
Verify that H can be constructed by the following procedure: 
begin 
H ^ G; 
for z <- 1 to A7 do 
if hi = Othen//<- H - JC,; 
else while Z^, > 0 do 
begin 
H^ 
HfiXi; 
end 
end 
3. Give an example of a graph G for which a(G) = fe(G) and co(G) < x(G). 
Why does this not contradict the Perfect Graph theorem? 
4. Suppose G satisfies a(G) = k{G), Let JT be a clique cover of G where 
I JTI = fc(G), and let ^ be the collection of all stable sets of cardinality a(G). 
Show that 
|SnK| = 1 
forallSe«9^andKGjr. 
Give a dual statement for a graph satisfying co{G) = xi^). 

76 
3. 
Perfect Graphs 
5. Prove the following: For any integer k, there exists a graph G such that 
o)(G) = 2 and x(G) = k. Thus, the gap between the clique number and the 
chromatic number can be arbitrarily large (Tutte [1954], Kelly and Kelly 
[1954], Zykov [1952]; see also Sachs [1969]). 
6. Prove that an n-vertex graph G is an odd chordless cycle if and only if 
n = 2k -\- I, a(G) = fe, and a(G — i; — w) = fe for all vertices v and w of G 
(Melnikov and Vising [1971], Greenwell [1978]). 
7. An undirected graph G is unimodular if its clique matrix A has the prop-
erty that every square submatrix of A has determinant equal to 0, -h 1, or 
— 1. Prove the following: 
(i) The graph in Figure 3.7 is unimodular; 
(ii) unimodularity is a hereditary property; 
(iii) a bipartite graph is unimodular; 
(iv) a unimodular graph is perfect (if necessary, for (iv) see Berge [1975]). 
vszv 
Figure 3.7 
8. Show that the five versions of the strong perfect graph conjecture given in 
this chapter are equivalent. 
9. Prove that G is p-critical if and only if G is partitionable but no proper 
induced subgraph of G is partitionable. 
10. Show that the graph in Figure 3.8 is partitionable but not p-critical. 
Show that the graph in Figure 3.9 is imperfect but not partitionable. 
Figure 3.8 

Bibliography 
77 
Figure 3.9 
11. Let A and B be n x n matrices and let a and co be integers. Using 
matrix operations give a short proof of the following: If AJ = JA = coJ, 
BJ = JB = oJ, and AB"^ = J - I, then aco = n - 1. 
12. Let G = (X, E) and // = (Y, F) be undirected graphs. Their normal 
product is defined to be the graph G • H whose vertex set is the Cartesian 
product X X Y with vertices (x, y) and (x', / ) adjacent if and only if 
X = x' and yy' eF 
or 
xx' e £ and y = y' 
or 
xx' e E and yy' e F. 
Prove the following: 
(i) 
x(G'h)>max{x(GlxiH)}; 
(ii) (o(G'H) = (o(G)a)(H); 
(iii) 
a(G.if)>a(G)a(if); 
(iv) 
k{GH)<k{G)k(H), 
13. Let G*" denote the normal product of G with itself r — \ times, i.e., 
G^ = G and G'^ = GG'^-\ Let 
c(G) = sup ^aCGO. 
Prove that a(G) = fc(G) implies c{G) = a(G). For an application of this to 
zero-capacity codes, see Berge [1973, p. 382; 1975, p. 13]. 
Bibliography 
Balinski, M. L., and Hoffman, A. J., eds. 
[1978] 
''Polyhedral Combinatorics,'' Math. Programming Studies, Vol. 8. North-Holland, 
Amsterdam. 
Baumgartner, J. E., MaHtz, J., and Reinhardt, W. 
[1970] Embedding trees in the rationals. Proc. Nat. Acad. Sci. U.S.A. 67, 1748-1753. 
Berge, Claude 
[1961] Farbung von Graphen, deren samtliche bzw. deren ungerade Kreise starr sind, Wiss. 
Z. Martin-Luther-Univ., Halle-Wittenberg Math.-Natur, Reihe, 114-115. 

78 
3. 
Perfect Graphs 
[1962] Sur une conjecture relative au probleme des codes optimaux, Comm. ISieme Assem-
blee Gen. URSI, Tokyo, 1962. 
[1967] Some classes of perfect graphs, "Graph Theory and Theoretical Physics," pp. 155-
165. Academic Press, London-New York. MR38 # 1017. 
[1969] Some classes of perfect graphs, "Combinatorial Mathematics and its Applications," 
pp. 539-552. Univ. North Carolina Press, Chapel Hill. MR42 # 100. 
[1973] "Graphs 
and 
Hypergraphs," 
Chapter 
16. 
North-Holland, 
Amsterdam. 
MR50 #9640. 
[1975] Perfect graphs, in "Studies in Graph Theory," Part I (D. R. Fulkerson, ed.), M.A.A. 
Studies in Mathematics Vol. 11, pp. 1-22. Math. Assoc. Amer., Washington, D.C. 
MR53 #10585. 
[1976] Short note about the history of the perfect graph conjecture, (mimeographed). 
Bland, Robert, G., Huang, H.-C, and Trotter, Leslie E., Jr. 
[1979] Graphical properties related to minimal imperfection. Discrete Math. 27, 11-22. 
Bollobas, Bela 
[1978] "Extremal Graph Theory," pp. 263-270. Academic Press, London. 
Chvatal, Vaclav 
[1973] 
Edmonds polytopes and a hierarchy of combinatorial problems, Discrete Math. 4, 
305-337. MR47 #1635. 
[1975] On certain polytopes associated with graphs, /. Combin. Theory B 18, 138-154. 
MR51 #7949. 
[1976] On the strong perfect graph conjecture, /. Combin. Theory B 20, 139-141. 
MR54 #129. 
Chvatal, Vaclav, Graham, R. L., Perold. A. P., and Whitesides, S. H. 
[1979] Combinatorial designs related to the strong perfect graph conjecture. Discrete 
Math. 26, 83-92. 
Commoner, F. G. 
[1973] A sufficient condition for a matrix to be totally unimodular, Networks 3, 351-365. 
MR49 #331. 
de Werra, D. 
[1978] On line perfect graphs. Math. Programming 15, 236-238. 
Gives alternate proof of result of L. E. Trotter [1977]. 
Edmonds, Jack 
[1965] 
Maximum matching and a polyhedron with 0,1-vertices, /. Res. Nat. Bur. Standards 
Sect. B 69, 125-130. MR32 # 1012. 
Fulkerson, Delbert Ray 
[1969] The perfect graph conjecture and pluperfect graph theorem, 2nd Chapel Hill Conf. 
on Combin. Math, and its Appl., 171-175. 
[1971] 
Blocking and anti-blocking pairs of polyhedra. Math. Programming 1, 168-194. 
MR45 #3222. 
[1972] Anti-blocking polyhedra, /. Combin. Theory 12, 50-71. MR44 #2629. 
[1973] On the perfect graph theorem, in "Mathematical Programming," (T. C. Hu and S. 
Robinson, eds.), pp. 68-76. Academic Press, New York. MR51 # 10147. 
Greenwell, Don 
[1978] Odd cycles and perfect graphs, "Theory and Applications of Graphs," Lecture 
Notes in Math. Vol. 642, pp. 191-193. Springer-Verlag, Berlin. 
Grinstead, Charles M. 
[1978] Toroidal graphs and the strong perfect graph conjecture, Ph.D. thesis, UCLA. 

Bibliography 
79 
Hajnal, Andras, and Suranyi, Janos 
[1958] 
Uber die Auflosung von Graphen in vollstandige Teilgraphen, Ann. Univ. Sci. 
Budapest Eotros. Sect. Math. 1, 113-121. MR21 # 1944. 
Huang, H.-C. 
[1976] Investigations on combinatorial optimization, Ph.D. thesis, Yale Univ. 
Jolivet, J. L. 
[1975] Graphes parfaits pour une propriete, P. Cahiers Centre Etudes Rech. Oper. 17, 
253-256. MR53 #7841. 
Karpetjan, I. A. 
[1976] Critical and essential edges in perfect graphs (Russian; Armenian summary), Akad. 
Nauk Armjan. SSR Dokl. 63, 65-70. 
Kelly, John B., and Kelly, L. M. 
[1954] Path and circuits in critical graphs, Amer, J. Math. 76, 786-792. MR16, p. 387. 
Lovasz, Laszlo 
[1972a] Normal hypergraphs and the perfect graph conjecture. Discrete Math. 2, 253-267. 
MR46 #1624. 
[1972b] A characterization of perfect graphs, J. Comhin. Theory B 13, 95-98. MR46 #8885. 
Markosjan, S. E. 
[1975] Perfect and critical graphs (Russian; Armenian summary), Akad. Nauk Armjan. 
SSR Dokl. 60, 218-223. MR53 # 10659. 
Markosjan, S. E., and Karpetjan, I. A. 
[1976] Perfect graphs (Russian; Armenian summary). Akad. Nauk Armjan. SSR Dokl. 63, 
(1976), 292-296. MR56 #8427. 
Melnikov, L. S., and Vising, V. G. 
[1971] Solution to Toft's problem (Russian), Diskret. Analiz. 19, 11-14. MR46 #3379. 
See Greenwell [1978]. 
Monma, C. L., and Trotter, Leslie E., Jr. 
[1979] On perfect graphs and polyhedra with (0,l)-valued extreme points, Math. Program-
ming 17, 239-242. 
Nash-Williams, C. St. J. A. 
[1967] Infinite graphs—a survey, y. Com/jm. Theory 3, 2S6-30\.MR35 
#5351. 
Olaru, Elefterie 
[ 1969] Uber die Uberdeckung von Graphen mit Cliquen, Wiss. Z. Tech. Hochsch. Ilmenau 
15, 115-121. MR43 #3162. 
[1972] Beitrage zur Theorie der perfekten Graphen, Elektron. Informationsverarb. Kybernet. 
8, (1972), 147-172. MR47 #8338. 
[1973a] Uber perfekte und kritisch imperfekte Graphen, Ann. St. Univ. lasi 19, 477-486. 
MR54 #5053. 
[1973b] Zur Charakterisierung perfekter Graphen, Electron. Informationsverarb. Kybernet. 
9,543-548. MR51 #10167. 
[1977] Zur Theorie der perfekten Graphen, J. Combin. Theory B 23, 94-105. 
Padberg, Manfred W. 
[1973] On the facial structure of set packing polyhedra, Math. Programming 5, 199-215. 
MR51 #4990. 
[1974] Perfect zero-one matrices, Math. Programming 6, 180-196. MR49 #4809. 
[1975] Characterizations of totally unimodular, balanced and perfect matrices, in "Com-
binatorial Programming: Methods and Apphcations," Proc. NATO Advanced 
Study Inst., Versailles, France, 1974, pp. 275-284. Reidel, Dordrecht, MR53 # 10291. 
An excellent survey article with good bibliography and clearly written. 
[1976a] A note on the total unimodularity of matrices. Discrete Math. 14, 273-278. 
MR54 #2685. 

80 
3. 
Perfect Graphs 
[1976b] Almost integral polyhedra related to certain combinatorial optimization problems, 
Linear Algebra and Appl. 15, 69-88. 
Parthasarathy, K. R., and Ravindra, G. 
[1976] The strong perfect-graph conjecture is true for K^ ,3-free graphs, /. Combin. Theory B 
21,212-223. MR55 #10308. 
[1979] The validity of the strong perfect-graph conjecture for {K^ — ^)-free graphs, J. Com-
bin. Theory B 26, 9S-\00. 
Perles, M. A. 
[1963] On Dilworth's theorem in the infinite case, IsraelJ. Math. 1, 108-109. MR29 #5758. 
Pretzel, Oliver 
[ 1979] Another proof of Dilworth's decomposition theorem, Discrete Math. 25, 91 -92. 
Ravindra, G. 
[1975] On Berge's conjecture concerning perfect graphs, Proc. Indian Nat. Sci. Acad. 41 A, 
294-296. 
Sachs, Horst 
[1969] Finite graphs (Investigations and generalizations concerning the construction of 
finite graphs having given chromatic number and no triangles), " Recent Progress in 
Combinatorics," pp. 175-184. Academic Press, New York. MR42 #2980. 
[1970] On the Berge conjecture concerning perfect graphs, "Combinatorial Structures 
and their Applications," pp. 377-384. Gordon & Breach, New York. MR42 #7549. 
Tamir, A. 
[1976] On totally unimodular matrices. Networks 6, 373-382. 
Tomescu, loan 
[1971] Sur le nombre des cliques maximales d'un graphe et quelques problemes sur les 
graphes parfaits. Rev. Roumaine Math. Pures Appl. 16, 1115-1126. MR45 # 103. 
Trotter, Leslie E., Jr. 
[1977] 
Line perfect graphs, Math. Programming 12, 255-259. MR56 #15501. 
Characterizes those graphs G whose line graphs L(G) are perfect. 
Trotter, William Thomas, Jr. 
[1971] A note on triangulated graphs. Notices Amer. Math. Soc. 18, 1045 (A). 
Tucker, Alan C. 
[1972] The strong perfect graph conjecture and an application to a municipal routing 
problem, in "Graph Theory and Applications," Proc. Conf. Western Michigan 
Univ., Kalamazoo, Lecture Notes in Math., Vol. 303, pp. 297-303. Springer-Verlag, 
Berlin. MR49 #7181. 
[1973a] The strong perfect graph conjecture for planar graphs, Canad. J. Math. 25, 103-114. 
MR47 #4868. 
[1973b] Perfect graphs and an application to optimizing municipal services, SI AM Rev. 15, 
585-590. MR48 #3817. 
[1977] Critical perfect graphs and perfect 3-chromatic graphs, J. Combin. Theory B 23, 
143-149. 
[1978] Circular arc graphs: new uses and a new algorithm, in "Theory and Application of 
Graphs," Lecture Notes in Math. 642; pp. 580-589. Springer-Verlag, Berlin. 
[1979] On Berge's strong perfect graph conjecture, Ann. N. Y. Acad. Sci. 319, 530-535. 
Tutte, W. (alias B. Descartes) 
[1954] Solution to advanced problem No. 4526, Amer. Math. Monthly 61, 352. 
Wagon, Stanley 
[1978] 
Infinite triangulated graphs, Discrete Math. 22, 183-189. 
Zykov, A. A. 
[1952] On some properties of linear complexes (Russian), Math. Sbornik N.S. lA (1949), 
163-188, English transl. Amer. Math. Soc. Transl. No. 79. MRU, p. 733. 

CHAPTER 4 
Triangulated Graphs 
1. 
Introduction 
One of the first classes of graphs to be recognized as being perfect was the 
class of triangulated graphs. Hajnal and Suranyi [1958] showed that tri-
angulated graphs satisfy the perfect property P2 (a-perfection), and Berge 
[1960] proved that they satisfy P^ (/-perfection). These two results, in large 
measure, inspired the conjecture that P^ and P2 were equivalent, a statement 
that we now know to be true (Theorem 3.3). Thus, the study of triangulated 
graphs can well be thought of as the beginning of the theory of perfect graphs. 
We briefly looked at the triangulated graph property in the sneak preview 
Section 1.3. For completeness' sake, we shall repeat the definition here and 
mention a few basic properties. 
An undirected graph G is called triangulated if every cycle of length strictly 
greater than 3 possesses a chord, that is, an edge joining two nonconsecutive 
vertices of the cycle. Equivalently, G does not contain an induced subgraph 
isomorphic to C„ for n > 3. Being triangulated is a hereditary property 
inherited by all the induced subgraphs of G. You may recall from Section 1.3 
that the interval graphs constitute a special type of triangulated graph. Thus 
we have our first example of triangulated graphs. 
In the literature, triangulated graphs have also been called chordal, rigid-
circuit, monotone transitive, and perfect elimination graphs. 
2. 
Characterizing Triangulated Graphs 
A vertex x of G is called simplicial if its adjacency set Adj(x) induces a 
complete subgraph of G, i.e., Adj(x) is a clique (not necessarily maximal). 
81 

82 
4. 
Triangulated Graphs 
Dirac [1961], and later Lekkerkerker and Boland [1962], proved that a 
triangulated graph always has a simpHcial vertex (in fact at least two of them), 
and using this fact Fulkerson and Gross [1965] suggested an iterative pro-
cedure to recognize triangulated graphs based on this and the hereditary 
property. Namely, repeatedly locate a simplicial vertex and eliminate it from 
the graph, until either no vertices remain and the graph is triangulated or at 
some stage no simplicial vertex exists and the graph is not triangulated. The 
correctness of this procedure is proved in Theorem 4.1. Let us state things 
more algebraically. 
Let G = (V, E)hQ an undirected graph and let a = [i;i, i;2,. • •, f J be an 
ordering of the vertices. We say that a is a perfect vertex elimination scheme 
(or perfect scheme) if each Vi is a simplicial vertex of the induced subgraph 
^{Vi,...,V„} 
. In other words, each set 
Xi = {i;,GAdj(i;,)|7> i} 
is complete. For example, the graph G^ in Figure 4.1 has a perfect vertex 
ehmination scheme a = [a, g, b,f c, e, d']. It is not unique; in fact G^ has 96 
different perfect elimination schemes. In contrast to this, the graph G2 has 
no simplicial vertex, so we cannot even start constructing a perfect scheme-
it has none. 
A subset S cz K is a vertex separator for nonadjacent vertices a and b (or 
an a-b separator) if the removal of S from the graph separates a and b into 
distinct connected components. If no proper subset of S is an a-b separator, 
then 5 is a minimal vertex separator for a and b. Consider again the graphs of 
Figure 4.1. In G2, the set {y, z} is a minimal vertex separator for p and q, 
whereas {x, y, z} is a minimal vertex separator for p and r. (How is it possible 
that both are minimal vertex separators, yet one is contained in the other?) 
In Gi, every minimal vertex separator has cardinality 2. This is an unusual 
phenomenon. However, notice also that the two vertices of such a separator 
of Gi are adjacent, in every case. This latter phenomenon actually occurs for 
all triangulated graphs, as you will see in Theorem 4.1. 
a
b
e
d 
vw 
g 
f 
e 
^< 
/ 
Figure 4.1. Two graphs, one triangulated and one not triangulated. 

2. 
Characterizing Triangulated Graphs 
83 
We now give two characterizations of triangulated graphs, one algorithmic 
(Fulkerson and Gross [1965]) and the other graph theoretic (Dirac [1961]). 
Theorem 4.1. Let G be an undirected graph. The following statements are 
equivalent: 
(i) G is triangulated. 
(ii) G has a perfect vertex elimination scheme. Moreover, any simplicial 
vertex can start a perfect scheme. 
(iii) Every minimal vertex separator induces a complete subgraph of G. 
Proof, (iii) ^ (i) Let la, x, b, y^^, y2,.. -, yk, ci] (k > 1) be a simple cycle 
of G = (V, E). Any minimal a-b separator must contain vertices x and y. for 
some /, so xy^ e E, which is a chord of the cycle. 
(i) => (iii) Suppose 5 is a minimal a-b separator with G^ and G^ being the 
connected components of G,^_s containing a and b, respectively. Since S is 
minimal, each x e S is adjacent to some vertex in A and some vertex in B. 
Therefore, for any pair x, yeS there exist paths [x, a^, ..., a^, y'] and [y, 
fci,..., b,, x], where each a^ e A and bi e B, such that these paths are chosen 
to be of smallest possible length. It follows that [x, (^i,..., a^, y, fc^,..., b,, x] 
is a simple cycle whose length is at least 4, implying that it must have a chord. 
But aibj ^ £ by the definition of vertex separator, and aiaj ^ E and bibj ^ E 
by the minimality of r and t. Thus, the only possible chord is xysE. 
| 
Remark. It also follows that r = t = 1, implying that for all x^yeS there 
exist vertices in A and B which are adjacent to both x and y. A stronger result 
is given in Exercise 12. 
Before continuing with the remaining implications, we pause for a message 
from our lemma department. 
Lemma 4.2 (Dirac [1961]). Every triangulated graph G = (K, E) has a 
simplicial vertex. Moreover, if G is not a clique, then it has two nonadjacent 
simplicial vertices. 
Proof. The lemma is trivial if G is complete. Assume that G has two non-
adjacent vertices a and b and that the lemma is true for all graphs with fewer 
vertices than G. Let S be a minimal vertex separator for a and b with G^ and 
Gg being the connected components of G^_s containing a and b, respectively. 
By induction, either the subgraph G^+s has two nonadjacent simplicial 
vertices one of which must be in A (since S induces a complete subgraph) or 
G^+5 is itself complete and any vertex oiA is simplicial in G^+5. Furthermore, 
since Adj(^) ^ >1 + 5, a simplicial vertex of G^+s in A is simplicial in all of 
G. Similarly B contains a simplicial vertex of G. This proves the lemma. 

84 
4. 
Triangulated Graphs 
We now rejoin the proof of the theorem which is still in progress. 
(i) => (ii) 
According to the lemma, if G is triangulated, then it has a 
simplicial vertex, say x. Since Gv-{x} is triangulated and smaller than G, it 
has, by induction, a perfect scheme which, when adjoined as a suffix of x, 
forms a perfect scheme for G. 
(ii) => (i) Let C be a simple cycle of G and let x be the vertex of C with 
the smallest index in a perfect scheme. Since | Adj(x) n C | > 2, the eventual 
simpliciality of x guarantees a chord in C 
| 
Recognizing Triangulated Graphs by Lexicographic 
Breadth-First Search 
From Lemma 4.2 we learned that the Fulkerson-Gross recognition 
procedure afTords us a choice of at least two vertices for each position in 
constructing a perfect scheme for a triangulated graph. Therefore, we can 
freely choose a vertex v„ to avoid during the whole process, saving it for the 
last position in a scheme. Similarly, we can pick any vertex v„-i adjacent to 
f„ to save for the (n — l)st position. If we continued in this manner, we would 
be constructing a scheme backwards! This is exactly what Leuker [1974] and 
Rose and Tarjan [1975] have done in order to give a linear-time algorithm 
for recognizing triangulated graphs. The version presented in Rose, Tarjan, 
and Leuker [1976] uses a lexicographic breadth-first search in which the 
usual queue of vertices is replaced by a queue of (unordered) subsets of the 
vertices which is sometimes refined but never reordered. The method 
(Figure 4.2) is as follows: 
begin 
1. assign the label 0 to each vertex; 
2. for i <- nto \ step - 1 do 
3. 
select: pick an unnumbered vertex v with largest label; 
4. 
a{i) <~ r; comment This assigns to v the number /. 
5. 
update: for each unnumbered vertex we Adj(i;) do add / to label(w); 
end 
Figure 4.2. Algorithm 4.1: Lex BFS. 
Algorithm 4.1. Lexicographic breadth-first search. 
Input: The adjacency sets of an undirected graph G = (K, E). 
Output: An ordering a of the vertices. 
Method: The vertices are numbered from n to 1 in the order that they are 
selected in line 3. This numbering fixes the positions of an elimination scheme 

3. 
Recognizing Triangulated Graphs 
85 
Figure 4.3. 
G. For each vertex x, the label of x will consist of a set of numbers listed in 
decreasing order. The vertices can then be lexicographically ordered accord-
ing to their labels. (Lexicographic order is just dictionary order, so that 
9761 < 985 and 643 < 6432.) Ties are broken arbitrarily. 
Example. We shall apply Algorithm 4.1 to the graph in Figure 4.3. The 
vertex a is selected arbitrarily in line 3 during the first pass. The evolution of 
the labeling and the numbering are illustrated in Figure 4.4. Notice that the 
final numbering a = [c, d, e, b, a] is a perfect vertex elimination scheme. This 
is no accident. 
For each value of i, let Li{x) denote the label of x when statement 4 is 
executed, i.e., when the ith vertex is numbered. Remember, the index is 
decremented at each successive iteration. For example, L„(x) = 0 for all x 
and L„_i(x) = {n} iff x e Ad}((j(n)). The following properties are of prime 
importance: 
(Ll)L,(x)<L/x) 
0 < 0 ; 
(L2) L,ix) < L,(y) => L/x) < L/y) 
(j < i); 
(L3) if a \a) < a ^(b) < a \c) and cGAdj(a) - Adj(b), then there 
exists a vertex d e Adj(b) — Adj(a) with (J~^{C) < G~ ^(d). 
a 
b 
c 
d 
e 
label 
4> 
<i> 
4> 
i> 
4> 
number 
-
-
-
-
-
a 
b 
^ c 
d 
e 
label 
<^ 
H 
<^ 
i> 
{5} 
number 
5 
-
-
-
-
a 
b 
^ c 
d 
e 
label 
4> 
H 
W 
{-} 
{5.4} 
number 
5 
4 
-
-
-
a 
b 
-^c 
d 
e 
label 
^ 
H 
{4} 
K3} 
{^A 
number 
5 
4 
-
-
3 
a 
b 
-^c 
d 
e 
label 
<^ 
H 
K2} 
{^.3} 
{^A 
number 
5 
4 
-
2 
3 
a 
b 
-^c 
d 
e 
label 
</> 
W 
{^A 
K3} 
{^A 
number 
5 
4 
1 
2 
3 
Figure 4.4. 

86 
4. 
Triangulated Graphs 
Property (LI) says that the label of a vertex may get larger but never smaller 
as the algorithm proceeds. Property (L2) states that once a vertex gets ahead 
of another vertex, they stay in that order. Finally, (L3) gives a condition under 
which there must be a suitable vertex d which was numbered before c (in 
time) and hence received a larger number. 
Lexicographic breadth-first search can be used to recognize triangulated 
graphs as demonstrated by the next theorem. 
Theorem 4.3. An undirected graph G = {V,E)is triangulated if and only 
if the ordering a produced by Algorithm 4.1 is a perfect vertex elimination 
scheme. 
Proof. lf\V\ = n=l, 
then the proof is trivial. Assume that the theorem 
is true for all graphs with fewer than n vertices and let a be the ordering pro-
duced by Algorithm 4.1 when applied to a triangulated graph G. By induction, 
it is sufficient to show that x = cr(l) is a simplicial vertex of G. 
Suppose X is not simplicial. Choose vertices x^, X2 e Adj(x) with x^X2^ E 
so that X2 is as large as possible (with respect to the ordering a). (Remember, 
(7 increases as you approach the root of the search tree.) Consider the follow-
ing inductive procedure. Assume we are given vertices x^, X2, ..., x^ with 
these properties: for all i, j > 0, 
(1) X, XiEEoi 
< 2, 
(2) XiXjeEo\i 
-j\ 
= 2, 
(3) a- \xi) 
< (J- HX2) < 
<(j- 
\xj, 
(4) x^ is the largest vertex (with respect to a) such that 
Xj_2Xj6£ 
but 
Xj^^Xj^E. 
(For notational reasons let XQ = x and x_i = x^.) The situation for m = 2 
was constructed initially. 
The vertices x^_2, ^m-i» ^^^ ^m satisfy the hypothesis of property (L3) 
as a, b, and c, respectively. Hence, choose x^+ ^ to be the largest vertex (with 
respect to a) larger than x^ which is adjacent to x^_i but not adjacent to 
x^_2. Now, if x^+1 were adjacent to x^_3, then (L3) applied to the vertices 
x^_3, x^_2, x^+i would imply the existence of a vertex larger than x^+i 
(hence larger than x^) which is adjacent to x^_2 but not to x^_3, con-
tradicting the maximality of x^ in (4). Therefore x^+i is not adjacent to 
x^_3. Finally, it follows from (1), (2), and chordality that x^x^+^^E 
for 
i = 0, 1,..., m — 4, m. 
Clearly this inductive procedure continues indefinitely, but the graph is 
finite, a contradiction. Therefore, the vertex x must be simplicial, and the 
theorem is proved in one direction. The converse follows from Theorem 4.1. 
I 

4. 
Complexity of Recognizing Triangulated Graphs 
87 
In an unpublished work, Tarjan [1976] has shown another method of 
searching a graph that can be used to recognize triangulated graphs. It is 
called maximum cardinality search (MCS), and it is defined as follows: 
MCS: The vertices are to be numbered from nto 1. 
The next vertex to be numbered is always one which is adjacent to the most 
numbered vertices, ties being broken arbitrarily. 
Using an argument similar to the proof of Theorem 4.3, one can show that G 
is triangulated if and only if every MCS ordering of the vertices is a perfect 
ellimination scheme. It should be pointed out that there are MCS orderings 
which cannot be obtained by Lex BFS, there are Lex BFS orderings which are 
not MCS, and there exist perfect ehmination schemes which are neither 
MCS nor Lex BFS. Exercises 27 and 28 develop some of the results on MCS. 
Both Lex BFS and MCS are special cases of a general method for finding 
perfect elimination schemes recently developed by Alan Hoffman and 
Michel Sakarovich. 
4. 
The Complexity of Recognizing Triangulated Graphs 
Having proved the correctness of Algorithm 4.1, let us now analyze its 
complexity. We first describe an implementation of Lex BFS, then show that 
it requires 0(\V\ + |E|) time. We do not actually calculate the labels, but 
rather we keep the unnumbered vertices in lexicographic order. 
Data Structure 
We use a queue Q of sets 
Si = {ve V\\3be\(v) = I and G~^{V) undefined} 
ordered lexicographically from smallest to largest; each set Si is represented 
by a doubly linked hst. Initially there is but one set, S^ = V. Each set Si has 
a FLAG initially set at 0. For a vertex w, the array element SET(w) points to 
-^labeKw) ^nd another array gives the address of w in SET(w) for deletion 
purposes. A list FIX LIST, initially empty, is also used, and simple arrays 
represent a and a'^. 
Implementation 
Select as v in line 3 any vertex in the last set of Q and delete v from SET(i;). 
Create a new set Si. ^ for each old set Si containing an unnumbered vertex 

5. < 
88 
4. 
Triangulated Graphs 
w G Adj(t;). We delete from Si all such vertices w and place them in the new 
set Si.i, which is inserted into the queue of sets immediately following Si. 
Clearly this method maintains the proper lexicographic ordering without our 
actually having to calculate the labels. More specifically, update can be 
implemented as follows: 
for all unnumbered vv e Adj(r) do 
begin 
if FLAG(SET(H')) = 0 then 
begin 
Create new set S' and insert it in Q immediately in back of SET(w); 
FLAG(SET(w)) ^ 1; FLAG(y) ^ 0; put a pointer to SET (w) on FIX LIST; 
end 
let 5" be the set immediately in back of SET(w) in Q; delete w from SET(M^) ; add w to 5"; 
SET(H')<- 
S'; 
end 
for each set S on FIX LIST do 
begin 
FLAG(5')^0; 
if S is empty then 
delete S from Q; 
end 
It is easy to verify that, as presented, statement 5 requires 0(|Adj(i;)|) 
time. Consequently, the for loop between statements 2 and 5 uses 0 ( | F | 4-
I £ I) time. Initializing the data structure including statement 1 takes 0( | K |) 
time. This proves the following result. 
Theorem 4.4. Algorithm 4.1 can be implemented to carry out lexico-
graphic breadth-first search on an undirected graph G = (V, E) in 0{\V\ 
+ I £ I) time and space. 
Example. 
Let Q^ denote the queue of sets of unnumbered vertices just 
before G{i) is defined in Algorithm 4.1. Figure 4.5b gives gg, Qg, and Q^ 
for the graph in Figure 4.5a. For convenience, the vertices are identified with 
their eventual position in a. Figure 4.5c shows the data structure for Q^ before 
the FIX LIST has been emptied and with the implicit labels in parentheses. 
In order to use Lex BFS to recognize triangulated graphs, we need an 
efficient method to test whether or not a given ordering a of the vertices is a 
perfect vertex elimination scheme. This is proved by the next algorithm. 
Algorithm 4.2. Testing a perfect elimination scheme. 
Input. The adjacency sets of an undirected graph G = {V,E) and an ordering 
(jofV. 

4. 
Complexity of Recognizing Triangulated Graphs 
• 3 
89 
(?9 = {l.2,3, 4. 5,6,7,8,9} 
(?3 = {1, 2} < {3, 4, 5, 6, 7, 8} 
^7 = W < {2} < {3,4,5} < {6,7} 
(a) 
(b) 
Output. "True" if cr is a perfect vertex elimination scheme and "false" 
otherwise. 
Method. A single call to the procedure PERFECTCc), given in Figure 4.6. 
The list A(u) collects all the vertices which will eventually have to be checked 
for adjacency with u. The actual checking is delayed until the iteration when 
u = cr(0 in lines 8 and 9. This technique is used so that in the a~ ^(i;)-th 
iteration there is no search of Adj(w). 
Complexity. Arrays are used for a and a'^ and lists hold Adj(i;) and A(v). 
Lines 4-7 can be implemented simultaneously in one scan of Adj(i;). The 
go to in line 5 will be executed exactly 7 — 1 times, where j is the number of 
connected components of G. The Hst A(u) will represent a set with repetitions. 
The test in line 8 simply checks for a vertex w on the list A{v) which is not 

90 
4. 
Triangulated Graphs 
boolean procedure PERFECT (a): 
begin 
1. 
for all vertices v do A{v) <~0;; 
2. 
for / <H- 1 to « - 1 do 
begin 
3. 
V <- a{i); 
4. 
X^ {xeAd}iv)\(T-\v) 
< (7-\x)}; 
5. 
i f X - 0 t h e n g o t o 8 ; ; 
6. 
u <^ G (mm {(T~^(x)\x e X}); 
7. 
concatenate X — {u} to A{u)\ 
8. 
if A{v) - Adj(y) ^ 0 then 
9. 
return " false "; 
end 
10. 
return''true"; 
end 
Figure 4.6. Procedure to test a perfect vertex elimination scheme. 
adjacent to v, can be done in 0(|Adj(i;)| + |A(i;)|) time by using an array 
TEST of size n initially set to all zeros as follows: 
begin 
for w e Adiiv) do TEST(w) ^ 1;; 
for w 6 A(v) do 
ifTEST(w) = Othen 
return "nonempty"; 
for w G Adj(i;) do TEST(H') ^ 0 ; ; 
return " empty "; 
end 
Thus, the entire algorithm can be performed in time and space proportional 
to 
veV 
ueV 
where has A(u) is its final value. Now, the middle summand is larger than the 
last since a given Adj(i;) appears as part of at most one of the lists A(u). 
Hence, both summands can be replaced by 0(\E\). This proves the com-
plexity part of the next theorem. 
Theorem 4.5. 
Algorithm 4.2 correctly tests whether or not an ordering a 
of the vertices is a perfect vertex elimination scheme. It can be implemented 
to run in time and space proportional to | K | H- | £ |. 
Proof. The algorithm returns "false" during the a~^(u)-ih iteration if 
and only if there exist vertices v, w, w ((J~^(v) < (7~^{u) < a~^{w)), where u 
is defined in line 4 during the a~ ^(i;)-th iteration, and 
u,wE Adj(D) 
but u is not adjacent to w. 
Clearly, if we get "false," then a is not a perfect elimination scheme. 

5. 
Triangulated Graphs as Intersection Graphs 
91 
Conversely, suppose G is not perfect elimination and the algorithm returns 
"true." Let v be the vertex with G~ ^{V) largest possible such that X = {w| w e 
kd]{v) and G~ ^{V) < o~ ^(w)} is not complete. Let u be the vertex of X defined 
in line 6 during the cr~^(t;)-th iteration, after which (in line 1) X — [u] is 
added to A{u). Since during the G~ ^(w)-th iteration line 9 is not executed, 
every x G X — {w} is adjacent to w. 
and 
every pair x,yeX 
— {u] is adjacent. 
The latter statement follows from the maximality of o~^{v). Thus, X is 
complete, a contradiction. 
| 
Corollary 4.6. Triangulated graphs can be recognized in linear time. 
Proof. The proof follows from Theorems 4.3-4.5. 
| 
5. 
Triangulated Graphs as Intersection Graphs 
We have seen in Chapter 1 that the interval graphs are a proper subclass 
of the triangulated graphs. This leads naturally to the problem of character-
izing triangulated graphs as the intersection graphs of some topological 
family slightly more general than intervals on a line. In this section we shall 
show that a graph is triangulated if and only if it is the intersection graph of a 
family of subtrees of a tree. (See Figure 4.7.) 
a 
b 
Figure 4.7. A triangulated graph and a subtree representation for it. 

92 
4. Triangulated Graphs 
A family {1)}^^^ of subsets of a set Tis said to satisfy the Helly property if 
J ^ / and 7] n 7} # 0 for all ij e J implies that f]j^j Tj # 0 . 
If we let T be a tree and let each 7J be a subtree of T, then we can prove the 
following result. 
Proposition 4.7. 
A family of subtrees of a tree satisfies the Helly property. 
Proof. Suppose 7] n T) # 0 for all i, j e J. Consider three points a, b, c 
on T. Let S be the set of indices s such that 7^ contains at least two of these 
three points, and let Pj, P2» ^3 be the simple paths in T connecting a with b, 
b with c, and a with c, respectively. Since T is a tree, it follows that P^ n P2 n 
P3 ^ 0 , but each T^s e S) contains one of these paths P^. Therefore, 
f]T,^P,nP2nP,^0. 
seS 
The lemma is proved by induction. Let us assume that 
[ 7 ; n 7 ; . # 0 
for all iJ eJ:\=^ (^ Tj ^ 0 
(1) 
jeJ 
for all index sets J of size < k. This is certainly true for k = 2. Consider a 
family of subtrees {7]^, ..., 7]^^ J. By the induction hypothesis there exist 
points a, b, c on T such that 
k 
k+l 
ae f]T,., 
be Q 7]., 
cG7;^n7;^^^. 
Moreover, every 7]^ contains at least two of the points a, b, c. Hence, by the 
preceeding paragraph, O'-il T^. / 0 . 
| 
Theorem 4.8 (Walter [1972], Gavril [1974a], and Buneman [1974]). Let 
G = (K, £) be an undirected graph. The following statements are equivalent: 
(i) G is a triangulated graph. 
(ii) G is the intersection graph of a family of subtrees of a tree, 
(iii) There exists a tree T = (JT, S) whose vertex set Jf is the set of maxi-
mal cliques of G such that each of the induced subgraphs T^„(i^ e V) is con-
nected (and hence a subtree), where Jf^ consists of those maximal cliques 
which contain v. 
Proof, (iii) => (ii) Assume that there exists a tree T = (JT, S) satisfying 
statement (iii). Let v.weV. Now 
vweE, 
v,weA 
for some clique 
AeJf, 
^,njf^^ 
0 , 
T^^ n T^^ # 0. 
Thus G is the intersection graph of the family of subtrees {T^frjve V} of T. 

5. 
Triangulated Graphs as Intersection Graphs 
93 
(ii) =^ (i) Let {T^}vev be a family of subtrees of a tree T such that 
VWGE 
iff 
T,nT^^0. 
Suppose G contains a chordless cycle [UQ, Vi, ..., v^-u VQ] with /c > 3 
corresponding to the sequence of subtrees TQ, Tj,..., 7i_ i, TQ of the tree T; 
that is, 7] n 7} / 0 if and only if i and; differ by at most one modulo k. All 
arithmetic will be done mod k. 
Choose a point a^- from 7J n 7]+i (i = 0, ..., /c — 1). Let bi be the last 
common point on the (unique) simple paths from Ui to a^.i and a^ to AJ+J. 
These paths lie in 7] and 7]+i, respectively, so that bi also lies in 7] n 7]+i. 
Let Pf+i be the simple path connecting bi and fej+i. Clearly Pj ^ 7]^ so 
p. n Pj- = 0 for f and 7 differing by more than 1 mod k. Moreover, Pj- n 
Pj+1 = {bj for i = 0,..., fc — L Thus, (Jj P^ is a simple cycle in T, contra-
dicting the definition of a tree. 
(i) => (iii) We prove the implication by induction on the size of G. Assume 
that the theorem is true for all graphs having fewer vertices than G. If G is 
complete, then T is a single vertex and the result is trivial. If G is disconnected 
with components G^,..., G^, then by induction there exists a corresponding 
tree 7^ satisfying (iii) for each G,. We connect a point of 7] with a point of 
7^+1 (/ = 1,..., /c — 1) to obtain a tree satisfying (iii) for G. 
Let us assume that G is connected but not complete. Choose a simplicial 
vertex a of G and let A = {a} ^ Adj(a). Clearly, yl is a maximal clique of G. 
Let 
U = {uGA\Ad}(u)^ 
A} 
and 
Y = A - U. 
Note that the sets U, Y, and V ~ A are nonempty since G is connected but not 
complete. Consider the induced subgraph G' = Gy-u^ which is triangulated 
and has fewer vertices than G. By induction, let T' be a tree whose vertex set 
K' is the set of maximal cliques of G' such that for each vertex veV — U the 
set K'^ = {X e K'\VGX} 
induces a connected subgraph (subtree) of T\ 
Remark. 
Either K = K' + {A} - {Y} or K = K' + {A} depending 
upon whether or not 7 is a maximal clique of G'. 
Let B be a maximal clique of G' containing Y. 
Case 1. If B = Y, then we obtain T from T' by renaming B, A. 
Case 2. If B ^ Y, then we obtain T from T by connecting the new 
vertex A to B. 
In either case, K^ = {A} for all uinU and X^ = X^ for all vinV — A, each 
of which induces a subtree of T. We need only worry about the sets Ky (y e Y). 

94 
4. 
Triangulated Graphs 
In case 1, Ky = Ky -\- {A} — {B}, which induces the same subtree as K'y 
since only names were changed. In case 2, Ky = Ky -{- {A}, which clearly 
induces a subtree. 
Thus, we have constructed the required tree T and the proof of the theorem 
is complete. 
| 
Buneman [1972,1974] discusses the application of the subtree intersection 
model in constructing evolutionary trees and in certain other classificatory 
problems. 
An undirected graph G = (V,E)is called a path graph if it is the intersection 
graph of a family of paths in a tree. Renz [1970] showed that G is a path 
graph if and only if G is triangulated and G is the intersection graph of a 
family J^ of paths in an undirected graph such that J^ satisfies the Helly 
property. Gavril [1978] presented an efficient algorithm for recognizing 
path graphs; he also proved a theorem for path graphs analogous to the 
equivalence of (ii) and (iii) in Theorem 4.8 (see Exercise 26). 
6. 
Triangulated Graphs Are Perfect 
Occasionally, the minimum graph coloring problem and the maximum 
clique problem can be simplified using the principle of separation into pieces 
(Berge [1973, p. 329]). This method is described in the following theorem and 
its proof. In particular, it is applicable to triangulated graphs. 
Theorem 4.9. 
Let 5 be a vertex separator of a connected undirected graph 
G = (V, E), and let G^^, G^^' • • •' ^At ^^ the connected components ofGy-s-
If S is a clique (not necessarily maximal), then 
X{G) = m^xx(Gs + A) 
i 
and 
co(G) = max (x>(Gs+^.). 
i 
Proof. Clearly x(G) > X(GS+A) for each /, so xiG) >k = max^ X(GS + A)' 
In fact, G can be colored using exactly k colors. First color Gs, then inde-
pendently extend the coloring to each piece Gs+Ar This composite will be 
a coloring of G. Thus, x(G) = k. 
Next, certainly co(G) > (O(GS+A) for each i, so a)(G) > max^ (^{Gs+A^) 
= m. Let X be a maximum clique of G, i.e., | X | = o;(G). It is impossible that 

6. 
Triangulated Graphs Are Perfect 
95 
two vertices of X lie in G^. and G^ (i ^ j) since the vertices are connected. 
Thus, X hes wholly in one of the pieces, say G^^Ar- Hence, m > (o(Gs + Ar) ^ 
\X\ = a;(G).Therefore, co(G) = m. 
' 
' 
| 
Corollary 4.10. Let 5 be a separating set of a connected undirected graph 
G = (K, E), and let G^,, G^^,..., G^^ be the connected components of G^_5. 
If S is a clique, and if each subgraph Gg+Ai is perfect, then G is perfect. 
Proof. Assume that the result is true for all graphs with fewer vertices than 
G. It suffices to show that /(G) = (D(G). Using Theorem 4.9 and the fact that 
each graph Gs+Ai is perfect, we have 
X{G) = max X(GS+A) 
= max (O{GS-,A) 
= o)(G)- 
I 
i 
i 
We are now ready to state the main result. 
Theorem 4.11 (Berge [1960], Hajnal and Suranyi [1958]). Every tri-
angulated graph is perfect. 
Proof. Let G be a triangulated graph, and assume that the theorem is 
true for all graphs having fewer vertices than G. We may assume that G is 
connected, for otherwise we consider each component individually. If G is 
complete, then G is certainly perfect. If G is not complete, then let 5 be a 
minimal vertex separator for some pair of nonadjacent vertices. By Theorem 
4.1, 5 is a clique. Moreover, by the induction hypothesis, each of the (tri-
angulated) subgraphs Gs+Ai, ^^ defined in Corollary 4.10, is perfect. Thus, 
by Corollary 4.10, G is perfect. 
| 
Remark. The proofs in this section used only the perfect graph property 
(Pi) (Berge [I960]). Historically, however, until Theorem 3.3 was proved, 
the arguments had to be carried out for property (P2) as well (Hajnal and 
Suranyi [1958]). 
Let ^ denote the class of all undirected graphs satisfying the property that 
every odd cycle of length greater than or equal to 5 has at least two chords. 
Clearly, every triangulated graph is in ^. Our ultimate goal in the remainder 
of this section is to prove that the graphs in ^ are perfect. The technique used 
to show this will be constructive in the following sense: Given a fc-coloring 
of a graph G e ^, we will show how to reduce it into an co-coloring of G, 
where k > co = a>{G), by performing a sequence of color interchanges called 
switchings. 
Let G be an undirected graph which has been properly colored. An (a, j8)-
chain in G is a chain whose vertices alternate between the colors a and j?. Let 

96 
4. 
Triangulated Graphs 
G^p denote the subgraph induced by the vertices of G which are colored a or jS. 
An <a, jS> switch with respect to G consists of the following operation: 
Either interchange the colors in a nontrivial connected component of G^p 
and leave all other colors unchanged, or recolor all isolated vertices of G^p 
using P and leave all other colors unchanged. 
Note that the result of an <a, jS> switch with respect to G is again a proper 
coloring of G. 
Lemma 4.12. 
Let G e ^ be properly colored, and let x be any vertex of 
G. Let vertices y, ze Adj(x) be colored a and jS, respectively, with a / jS. If 
y and z are linked by an (a, j8)-chain in G, then they are linked by an (a, jS)-
chaininGAdj(x)-
Proof. Let /i = [}; = XQ, x^, ^2, ..., x^ = z] be an [a, j?] chain in G of 
minimum length between y and z. Clearly, / must be odd. We claim that 
{xo, Xi, X2,..., x j ^ Adj(x). 
The claim is certainly true if / = 1. Let us assume that / > 3 and that the 
claim is true for all minimum (a, j8)-chains of odd length strictly less than /. 
Now, the cycle Ji = [x, XQ, X j , . . . , x^, x] has odd length / + 2 > 5, and all 
of its chords must have x as an endpoint since a chord between an a vertex 
and a j8 vertex of /i would give a shorter chain. Therefore, every subchain 
/x[Xs, x j = [Xj,..., x j of/z is a minimum (a, j^)-chain, and since G e^ the 
cycle p has at least two chords, xXj and xx^ (/ < 7). 
If/z[xo, x j , /x[Xj, x^], and fi\_Xj, x j all have odd length, then applying the 
induction hypothesis to each of them we obtain {XQ, XJ, ..., X J ^ Adj(x). 
Otherwise, at least one of/x[xo, x j or /^[xj, x j has even length. Without loss 
of generality, assume that /i[xo, x j has even length so that /i[Xj, xj has odd 
length. By induction, {Xj, x^+j, ..., x j ^ Adj(x). In particular, x^+^e 
Adj(x), so fi\_XQ, Xf+i] has odd length and by induction {XQ, X^, ..., x^+i) 
^ Adj(x). This proves the claim. 
| 
Let G' = GAdj(x)- Lemma 4.12 says that a nontrivial connected component 
of G^p contains only one nontrivial connected component of G^^ or only iso-
lated a vertices of G'^p or only isolated jS vertices of G'^p. 
Lemma 4.13. 
Let/be a proper coloring of a graph Ge^, and let x be a 
vertex of G colored y. Let/^' be the restriction of/to the subgraph G' induced 
by those vertices adjacent to x whose colors are from some arbitrary subset 
Q of colors with y^Q. If/G' can be transformed into a coloring g' of G' by 
a sequence of switchings with respect to G' (using colors from Q), then / 
can be transformed into a coloring/' of G by a sequence of switchings with 
respect to G such that/g. = g'. 

6. 
Triangulated Graphs Are Perfect 
97 
Proof. It is sufficient to consider the case of a single <a, /^> switch with 
respect to G\ where oc, P ^ y. Suppose that a connected component H'^p of 
G'^p was switched. If H'^p is nontrivial, then by Lemma 4.12 the same result 
could be obtained by switching the component of G^p, containing H'^p, 
IfH'^p has only one vertex, then all isolated vertices of G^^ were switched to j8. 
In this case the same result could be obtained by switching all nontrivial 
components of G^p which contain isolated a vertices of G'^p plus switching 
all isolated vertices of G^p to jS. 
| 
Theorem 4.14 (Meyniel [1976]). Let G e ^ and let/be a /c-coloring of G. 
Then there exists a ^-coloring ^ of G with q = x(G) which is obtainable from 
/ b y a sequence of switchings with respect to G. 
Proof. The theorem is obviously true for graphs with one vertex. Assume 
that the theorem is true for all graphs with fewer vertices than G. 
Consider a /c-coloring/of G using the colors {a^, a2,..., a^^} with k > q = 
X(G). Choose a vertex x with color a 7^ a^, a2, ..., a^; if there is none, the 
proof is finished. Let G' be the subgraph induced by the vertices colored 
ai, a2,..., a^ and adjacent to x. Clearly, 
q' = z(G') < xiGAdHx)) < ^ - 1. 
Since G' e ^, the induction hypothesis implies that there exists a ^'-coloring 
g' of G' which is obtainable homfc 
by a sequence of switchings with respect 
to G'. By Lemma 4.13, g' can also be obtained from/by a sequence of switch-
ings with respect to G. After performing this sequence of switchings, we can 
recolor x with one of the colors a^, a2, ..., a^ which is unused by g' (since 
q' < q — 1). Thus, we have enlarged the set of vertices colored a^, a2,..., a^. 
Repeating this process until all vertices of G are colored a^, a2, ..., a^ will 
yield a minimum coloring. 
| 
We are now ready to show that the graphs in ^ are perfect. Gallai [1962] 
originally proved the case where each odd cycle has two noncrossing chords; 
a shorter proof appeared in Suranyi [1968]. The case where each odd cycle 
has two crossing chords was proved by Olaru [1969] (see Sachs [1970]). The 
general case, as presented here, is due to Meyniel [1976]. 
Theorem 4.15. If G is an undirected graph such that every odd cycle has 
two chords, then G is perfect. 
Proof 
Let G e ^ with x(G) = q, and let H be an induced subgraph of G 
satisfying 
Z(H) = q, 
X(H — x) = q — 1 
for every vertex x of H. 

98 
4. 
Triangulated Graphs 
Choose a vertex x of H and a (^ — l)-coloring/of H — x, and let H' be the 
subgraph induced by Adj^(x). If H' were (q — 2)-colorable, then by Theorem 
4.14/restricted to H' could be transformed into a (^ — 2)-coloring ofH' by a 
sequence of switchings with respect to H\ Then by Lemma 4.13 there would 
exist a (^ — l)-coloring of H — x using q — 2 colors for Adj^(x). But this 
would imply that x(H) "= q — 1, a contradiction. 
Therefore, {x} u Adj^Cx) is not (q — l)-colorable, and hence it must be the 
entire vertex set of H. Since this argument holds for all x, it follows that H 
is a ^-clique. Thus, x(G) = co(G) = q. In like manner, x(^') = co(G') for all 
induced subgraphs G' of G since being in ^ is a hereditary property. Thus 
G is perfect. 
| 
7. 
Fast Algorithms for the COLORING, CLIQUE, STABLE 
SET, and CLIQUE-COVER Problems on Triangulated 
Graphs 
Let G = (F, £) be a triangulated graph, and let (x be a perfect elimination 
scheme for G. It was first pointed out by Fulkerson and Gross [1965] that 
every maximal clique was of the form {v} u X^ where 
X^= 
{xGAdi(v)\c7-\v)<C7-\x)}. 
This elementary fact is easily shown. By the definition of cr, each {v} u X^ 
is complete. Let w be the first vertex in a contained in an arbitrary maximal 
clique A; then A = {w} u X^. Therefore, we have the following result. 
Proposition 4.16 (Fulkerson and Gross [1965]). A triangulated graph on 
n vertices has at most n maximal cliques, with equality if and only if the graph 
has no edges. 
It is easy enough to modify Algorithm 4.2 to print out each set {v} u X^. 
However, some of these will not be maximal, and we would like to filter them 
out. The mechanism that we employ is the observation that {u} u X^ is not 
maximal iff" for some i, in line 7 of Algorithm 4.2, X„ is concatenated to A{u) 
(Exercise 13). The modified algorithm is as follows: 
Algorithm 4.3. Chromatic number and maximal cliques of a trangulated 
graph. 
Input: The adjacency sets of a triangulated graph G and a perfect elimination 
scheme a. 
Output: All maximal cliques of G and the chromatic number %(G). 

7. 
Fast Algorithms on Triangulated Graphs 
99 
Method: A single call to the procedure CLIQUES((T) given in Figure 4.8. The 
number S(v) indicates the size of the largest set that would have been con-
catenated to .4(1;) in Algorithm 4.2. A careful comparison will reveal that 
Algorithm 4.3 is a modification of Algorithm 4.2. 
Theorem 4.17. 
Algorithm 4.3 correctly calculates the chromatic number 
and all maximal cliques of a triangulated graph G = (V, E)mO(\V\ 
+ |£|) 
time. 
The proof is similar to that of Theorem 4.5. 
Next we tackle the problem of finding the stability number a(G) of a tri-
angulated graph. Better yet, since G is perfect, let us demand that we produce 
both a stable set and clique cover of size a(G). A solution is given by Gavril. 
Let cr be a perfect elimination scheme for G = (V, E). We define inductively 
a sequence of vertices j ^ , };2,..., y, in the following manner: y^ = (7(1); j;^ is 
the first vertex in a which follows };,•_ | and which is not in Xy^ u Xy^ u • • • 
u Xy._^; all vertices following y^ are in Xy^ u • • • u Xy^. Hence 
y = {yu y2,'",yt}^Xy,'^'"^ 
^yr 
The following theorem applies. 
Theorem 4.18 (Gavril [1972]). The set {y^, y2, ..., yt} is a. maximum 
stable set of G, and the collection of sets Yi = {yi} u Xy. (i = 1, 2, ..., r) 
comprises a minimum clique cover of G. 
procedure CLIQUES (o): 
1. 
2. 
3. 
4. 
5. 
6. 
7. 
8. 
9. 
10. 
11. 
12. 
13. 
[4. 
x ^ 1; 
for all vertices v do ^(r) -f- 0;; 
for i <- 1 to » do 
begin 
V ^ 
ail); 
X^ 
{xEKd]{v)\o-\v) 
< (J-\x)] 
if Adj(y) = 0 then print {v)\\ 
\{X = 0 then go to 13;; 
u •«- o{mm.{o~^{x) \x e X})\ 
S{u) ^ mdix{S{u\\X\ 
- 1}; 
iiS{v) < |Jr|thendo 
begin 
print {v} u X; 
X = max{x, 1+ \X\}; 
end 
end 
print "The chromatic number is",;^; 
end 
Figure 4.8. 
Procedure to list all maximal cliques of a triangulated graph, given a perfect 
elimination scheme. 

100 
4. 
Triangulated Graphs 
Proof. The set {y^, ^2, ..., }^J is stable since if y^jf G E for j < i, then 
yi e Xy., which cannot be. Thus a(G) > t. On the other hand, each of the sets 
^ = {yt} ^ ^yi is a chque, and so {Yi,..., yj is a cUque cover of G. Thus, 
a(G) = /c(G) = t, and we have produced the desired maximum stable set 
and minimum clique cover. 
| 
Implementing this procedure to run elBficiently is a straightforward exercise 
and is left for the reader (Exercise 25). For a treatment of the maximum 
weighted stable set problem, see Frank [1976]. 
EXERCISES 
1. Show that forn > 5 the graph C„ is not triangulated. 
2. Using Theorem 4.1, condition (iii), prove that every interval graph is 
triangulated. What is the interpretation of a separator in an interval repre-
sentation of a graph? 
3. 
Prove properties (L1)-(L3) of lexicographic breadth-first search (Section 
4.3). 
4. 
Apply Algorithm 4.1 to the graph in Figure 3.3 by arbitrarily selecting 
the vertex of degree 2 in line 3 during the first pass of the algorithm, (i) Wha:t 
is the perfect scheme you get? (ii) Find a perfect scheme of G which cannot 
possibly arise from Algorithm 4.1. 
The class of undirected graphs known as k-trees is defined recursively as 
follows: A /c-tree on k vertices consists of a clique on k vertices (/c-clique); 
given any /c-tree T„ on n vertices, we construct a /c-tree on n -{- 1 vertices by 
adjoining a new vertex x„+ ^ to T„, which is made adjacent to each vertex of 
some /c-clique of T„ and nonadjacent to the remaining n — k vertices. Notice 
that a 1-tree is just a tree in the usual sense, and that a /c-tree has at least k 
vertices. Exercises 5-7 below are due to Rose [1974]. Harary and Palmer 
[1968] discuss 2-trees. 
5. 
Show that a /c-tree has a perfect vertex elimination scheme and is therefore 
triangulated. Give an example of a triangulated graph which is not a /c-tree 
for any k. 
6. 
Prove the following result: An undirected graph G = (F, £) is a /c tree if 
and only if 
(i) G is connected, 
(ii) G has a /c-clique but no (/c + 2)-clique, and 
(iii) every minimal vertex separator of G is a /c-clique. 
7. Let G = (K, £) be a triangulated graph which has a /c-clique but no 
(/c + 2)-clique. Prove that ||£:|| <k\V\- 
^k{k + 1) with equality holding if 
and only if G is a /c-tree. 

Exercises 
101 
8. 
Show that every 3-tree is planar. 
9. 
Let G be an undirected graph and let H be constructed as follows. The 
vertices of// correspond to the edges of G, and two vertices of H are adjacent 
if their corresponding edges form two sides of a triangle in G. Prove that G 
is a 2-tree if and only if // is a cactus of triangles. 
10. Show that every vertex of a minimal x-y separator is adjacent to some 
vertex in each of the connected components containing x and y, respectively. 
11. 
Let S be a minimal x-y separator of a connected graph G. Show that 
every path in G from x to y contains a member of S and that every 5 e S is 
contained in some path /i from x to y which involves no other element of S, 
that is, ju n 5 = {s}. 
12. 
Prove the following: For any minimal vertex separator S of a triangu-
lated graph G = {V, E\ there exists a vertex c in each connected component 
of G^-s such that S ^ Adj(c). (Hint: Prove the inclusion for each subset 
X ^ S using induction.) 
13. 
Program Algorithms 4.1 and 4.2 using the data structures suggested and 
test some graphs for the triangulated graph property. 
14. Give a representation of the graph in Figure 4.5a as intersecting sub-
trees of a tree. 
15. Prove that G is triangulated if and only if G is the intersection graph of a 
family ^ of subtrees of a tree where no member of ^ contains another 
member of ^ (Gavril [1974a]). 
16. Give an algorithm which constructs for any triangulated graph G a 
collection of subtrees of a tree whose intersection graph is isomorphic to G. 
17. 
Prove the following: // is a tree if and only if every family of paths in H 
satisfies the Helly property. 
18. 
Prove the following theorem of Renz [1970]: G is the intersection graph 
of a family of paths in a tree iff G is triangulated and is the intersection] 
graph of a family of arcs of a graph satisfying the Helly property. 
19. 
Using the Helly property for subtrees of a tree, show directly that (ii) 
implies (iii) in Theorem 4.8. (Hint: for each cUque A of the intersection 
graph, paint the subtree corresponding to the intersection of all members of 
A red and paint the remainder of the tree green. What does it look like when 
you collapse each red piece to a point?) 
20. 
Prove Corollary 4.10 using the perfect graph property (P2) instead of 
(Pi). 
21. 
The line graph L{G) of G is defined to be the undirected graph whose 
vertices correspond to the edges of G, and two vertices of L{G) are joined by 
an edge if and only if they correspond to adjacent edges in G. Prove that G is 
triangulated if and only if L{G) is triangulated. 

102 
4. 
Triangulated Graphs 
22. 
Prove that Algorithm 4.3 correctly calculates the chromatic number and 
all maximal cliques of a triangulated graph. 
23. 
Let (7 be a perfect vertex elimination scheme for a triangulated graph 
G = (V, E). Let H = (F, F) be an orientation of G, where 
xyeFmo~^{x) 
< ^ ^{y)' Show that H is acyclic. Let T be any topological sorting of ff. Show 
that T is also a perfect ehmination scheme for G. 
24. 
Prove that a height function h (see Chapter 2, Exercise 8) of the acyclic 
oriented graph H defined in the preceding exercise is a minimum coloring of 
the triangulated graph G. Thus, a triangulated graph can be colored with a 
minimum number of colors in time proportional to its size. 
25. 
Modify Algorithm 4.3 so that, in addition, it prints out a maximum 
stable set and prints an asterisk next to those cliques which together comprise 
a minimum clique cover. 
26. 
Prove the following: G = (K, E) is a path graph if and only if there 
exists a tree T whose vertex set is JT (the maximal cliques of G) such that for 
all veV, the induced subgraph Ty^^ is a path in T. (Jf ^ denotes the set of 
maximal cliques which contain v) (Gavril [1978].) 
27. 
Let G = (K, £) be an undirected graph, and let cr = [t;i, i'2» • • •» ^J be 
an ordering of V. Consider the following property: 
(T): 
If o~\u) 
< o~\v) < o~^{w^) and we Adj(w) - Adj(i;), then there 
exists an x such that o~ ^{v) < o~ ^{x) and x e Adj(f) — Adj(w). 
Prove that if G is a triangulated graph and a satisfies (T), then a is a perfect 
elimination scheme for G (Tarjan [1976]).) 
28. (i) Prove that any MCS order, as defined at the end of Section 4.3, 
satisfies property (T) from the preceding exercise. 
(ii) Give an implementation of MCS to recognize triangulated graphs in 
0{n -f e) time. (Hint. To achieve linearity you may wish to link together all 
unnumbered vertices which are currently adjacent to the same number of 
numbered vertices (Tarjan [1976]).) 
29. 
An undirected graph is called i-triangulated if every odd cycle with more 
than three vertices has a set of chords which form with the cycle a planar 
graph whose unbounded face is the exterior of the cycle and whose bounded 
faces are all triangles. Prove that a graph is ^triangulated if and only if every 
cycle of odd length k has k — 3 chords that do not cross one another (Gallai 
[1962]). 
Bibliography 
Berge, Claude 
[1960] Les problemes de colorations en theorie des graphs, Publ. Inst. Statist. Univ. Paris 9, 
123-160. 

Bibliography 
103 
[1973] "Graphs 
and 
Hypergraphs," 
Chapter 
16. 
North-Holland, 
Amsterdam. 
MR50 #9640. 
Buneman, Peter 
[1972] The recovery of trees from measures of dissimilarity, " Mathematics in the Archaeo-
logical and Historical Sciences," pp. 387-395. Edinburgh Univ. Press, Edinburgh. 
[1974] A characterization of rigid circuit graphs, Discrete Math. 9, 205-212. MR50 #9686. 
Cantalupi, Gabriella Tazzi, and Zucchetti, Bianca Ricetti 
[1972] Singrammi triangolati sferici, Inst. Lombarado Accad. Sci. Lett. Rend. A 106,697-703. 
MR48 #8287. 
Which connected triangulated graphs can be drawn on the sphere? 
Dirac, G. A. 
[1961] On rigid circuit graphs, Abh. Math. Sem. Univ. Hamburg 25, 71-76. MR24 #57. 
Frank, Andras 
[1976] Some polynomial algorithms for certain graphs and hypergraphs, Proc. 5th British 
Combin. Con/., Congressus Numerantium No. XV, Utihtas Math., Winnipeg, 
MR53 #13500. 
Fulkerson, D. R., and Gross, O. A. 
[1965] Incidence matrices and interval graphs, Pacific J. Math. 15, 835-855. MR32 #3881. 
Gallai, Tibor 
[1962] Graphen mit triangulierbaren ungeraden Vielecken, Magyar Tud. Akad. Mat. 
Kutatd Int. Kdzl. 7, 3-36. MR26 #3039. 
Gavril, Fanica 
[1972] Algorithms for minimum coloring, maximum clique, minimum covering by cliques, 
and maximum independent set of a chordal graph, SI AM J. Comput. 1, 180-187. 
MR48 #5922. 
[1974a] The intersection graphs of subtrees in trees are exactly the chordal graphs, /. Combin. 
Theory B 16, 47-56. MR48 #10868. 
[1974b] An algorithm for testing chordality of graphs. Inform. Process. Lett. 3, 110-112. 
MR52 #9671. 
[1977] Algorithms on clique separable graphs, Discrete Math. 19, 159-165. 
[1978] A recognition algorithm for the intersection graphs of paths in trees, Discrete Math. 
23,211-227. 
Hajnal, Andras, and Suranyi, Janos 
[1958] 
Uber die Auflosung von Graphen in vollstandige Teilgraphen, Ann. Univ. Sci. 
Budapest Eotvos. Sect. Math. 1, 113-121. MR21 # 1944. 
Harary, Frank, and Palmer, Edgar M. 
[1968] On acyclic simplicial complexes, Mathematika 15, 115-122. MR37 #3936. 
Lekkerkerker, C. G., and Boland, J. Ch. 
[1962] 
Representation of a finite graph by a set of intervals on the real line. Fund. Math. 51, 
45-64. MR25 #2596. 
Leuker, George S. 
[1974] Structured breadth first search and chordal graphs, Princeton Univ. Tech. Rep. 
TR-158. 
Meyniel, H. 
[1976] On the perfect graph conjecture, Discrete Math. 16, 339-342. MR55 # 12568. 
Ohtsuki, Tatsuo 
[1976] A fast algorithm for finding an optimal ordering for vertex ehmination on a graph, 
SIAMJ. Comput. 5, 133-145. MR52 #13515. 
Ohtsuki, Tatsuo, Cheung, L. K., and Fujisawa, T. 
[1976] Minimal triangulation of a graph and optimal pivoting order in a sparse matrix. 
/. Math. Anal Appl 54, 622-633. 

104 
4. 
Triangulated Graphs 
Olaru, Elefterie 
[1969] Uber die Uberdeckung von Graphen mit Cliquen, Wiss. Z. Tech. Hochsch. Ilmenau 
15, 115-121. MR43 #3162. 
Renz, P. L. 
[1970] Intersection representations of graphs by arcs, Pacific J. Math. 34, 501-510. 
MR42 #5839. 
Rose, Donald J. 
[1970] Triangulated graphs and the elimination process, J. Math. Anal. Appl. 32, 597-609. 
MR42 #5840. 
[1972] A graph-theoretic study of the numerical solution of sparse positive definite systems 
of Hnear equations, in "Graph Theory and Computing," (Ronald C. Read, ed.), 
pp. 183-217. Academic Press, New York. MR49 #6579. 
[1974] On simple characterizations of A:-trees, Discrete Math 7, 317-322. MR49 # 101. 
Rose, Donald J., and Tarjan, Robert Endre 
[1975] Algorithmic aspects of vertex elimination. Proc. 7th Annu. ACM Symp. Theory 
Comput., 245-254. MR56 #7320. 
[1978] Algorithmic aspects of vertex ehmination of directed graphs, SIAM J. Appl. Math. 
34, 176-197. 
Rose, Donald J., Tarjan, Robert Endre, and Leuker, George S. 
[1976] Algorithmic aspects of vertex ehmination on graphs, S/^M J. Comput. 5, 266-283. 
MR53 #12077. 
Sachs, Horst 
[1970] On the Berge conjecture concerning perfect graphs, in "Combinatorial Structures 
and their Applications," pp. 377-384. Gordon & Breach, New York. MR42 #7549. 
Suranyi, L. 
[1968] The covering of graphs by cliques, Studia Sci. Math. Hungar. 3, 345-349. MR38 # 76. 
Tarjan, Robert Endre 
[1976] 
Maximum cardinality search and chordal graphs. Stanford Univ. Unpublished 
Lecture Notes CS 259. 
Trotter, William Thomas, Jr. 
[1971] A note on triangulated graphs. Notices Amer. Math. Soc. 18, 1045 (A). 
Wagon, Stanley 
[1978] Infinite triangulated graphs. Discrete Math 22, 183-189. 
Walter, J. R. 
[1972] Representations of rigid cycle graphs, Ph.D. thesis, Wayne State Univ. 
[1978] 
Representations of chordal graphs as subtrees of a tree, J. Graph Theory 2, 265-267. 

CHAPTER 
Comparability Graphs 
1. 
r-Chains and Implication Classes 
This chapter is devoted to the class of perfect graphs known as com-
parabiHty graphs or transitively orientable graphs. These graphs were en-
countered in Section 1.3 in connection with interval graphs (Proposition 1.3), 
but our treatment here will be independent of that brief introduction. 
An undirected graph G = (F, £) is a comparability graph if there exists an 
orientation (V, F) of G satisfying 
where F^ = {ac\ab, beef 
for some vertex b}. The relation F is a strict 
partial ordering of V whose comparability relation is exactly E, and F is 
called a transitive orientation of G (or of E). Comparability graphs are also 
known as transitively orientable graphs and partially orderable graphs. 
Examples of some comparability graphs can be found in Section 1.3. 
Let us see what happens when we try to assign a transitive orientation to 
the 4-cycle (Figure 5.1a). Arbitrarily choosing abef forces us to orient the 
bottom edge toward b and the top edge toward d (for otherwise transitivity 
would be violated). These in turn, force the remaining edge to be oriented 
toward d. Applying the same idea to the graph in Figure 5.1b, we find that a 
contradiction arises, namely, choosing abef 
forces successively the orienta-
tions cb, cd, cf, ef, bf, and ba. This graph is not a comparability graph. We now 
make the notion of forcing more precise. 
Define the binary relation F on the edges of an undirected graph G = 
{V, E) as follows: 
, ^ ,,, 
.^ 
feither 
a = a' and bb' ^ E 
ab F ab 
iff^ < 
, 
,; 
. 
, , r. 
[or 
b = b and aa f E 
105 

106 
5. 
Comparability Graphs 
(a) 
(b) 
Figure 5.1. Examples of forcing. The arbitrary choice o( ab e F forces the other indicated 
orientations. 
We say that ab directly forces a'b' whenever ah V a'V. Since E is irreflexive, 
abT ab\ however, abTba. The reader should not continue until he is con-
vinced of this fact. 
The reflexive, transitive closure F* of F is easily shown to be an equivalence 
relation on E and hence partitions E into what we shall call the implication 
classes of G. Thus edges ab and cd are in the same implication class if and only 
if there exists a sequence of edges 
ab = «o^o r a^bi T - T a^b^, = cd, 
with 
k > 0. 
Such a sequence is called a F-chain from ab to cd, and we say that ab (eventu-
ally)/orc^5 cd whenever ab F* cd. 
The reader can easily verify the properties 
ab F a'b' obaT 
b'a', 
ab F* a'b' <=> ba F* b'a', 
which follow directly from the definitions. 
Let ^(G) denote the collection of implication classes of G. We define 
J{G)={A\AeJ(G)}, 
where .4 = ^ u .4"Ms the symmetric closure of A. The members of y(G) 
are called the color classes of G for reasons that will become evident later. 
A^ = {ac, ad, ae}, 
A^^ = {ca,da, ea). 
A4, = {be, bd, be}, 
Al^ = {cb,db,eb}. 
Examples. The graph G in Figure 5.2 has eight implication classes: 
AI = {ab}, 
A2 = {cd}, 
A ; ' = {ba}, 
A2' 
^{dc}. 
So we have y(G) = {Ai,A2,A^, 
A4,}. On the other hand, the graph in Figure 
5.1b has only one implication class: 
A = {ab, cb, cd, cf, ef, bf, ba, be, 
dc,fc,fe,fb} 
and A = A. 

1. 
r-Chains and Implication Classes 
107 
Q 
. . < " > ^ 
C C^xxxxxxi^V 
• e 
Figure 5.2. An undirected graph G and a coloring of its edges according to the classes 
ofi(G). 
Theorem 5.1. Let A be an implication class of an undirected graph G. If 
G has a transitive orientation F, then either FnA 
= AovFr\A 
= A~^ and, 
in either case, A n A = 0. 
Proof. We defined F in order to capture the fact that, for any transitive 
orientation F of G, 
if abTa'b' 
and 
abeF, 
then 
a'b'eF. 
Applying this property repeatedly, we obtain FnA 
= 0 or A^F. 
Since (i) 
A ^ F -{- F~^ and (ii) F n F"^ = 0 , we have the implications 
FnA 
= 0=>A^F-' 
[by (i)] 
and 
A^F 
^A-' 
^F-'=>FnA-' 
= 0 
[by (ii)] 
= > F n ^ = ^. 
In either case A n A~^ = 0. 
| 
The converse of Theorem 5.1 is also valid, namely, if A n A~^ = 0 for 
every implication class A, then G has a transitive orientation. This result will be 
proved as part of Theorem 5.27. Theorem 5.27 also provides the justification 
for an algorithm which assigns a transitive orientation to a comparability 
graph. 
Remark. 
Many readers may wonder whether an arbitrary union of im-
plication classes F = (J, Ai satisfying F n F~^ = 0 and F + F~^ = E is 
necessarily a transitive orientation of G. The answer is no. As a counter-
example, consider a triangle which has 8 = 2^ such orientations, two of 
which fail to be transitive. 
Next we present two lemmas which will be useful throughout this chapter. 
Let ab = aoboT a^b^ F • • • F a^b^^ = cd be given. For each i = 1,..., fc we 
have 
a,_ifci_iFaibi_iFai6i, 

108 
5. 
Comparability Graphs 
since the added middle edge equals one of the other two. Hence we may state 
the following: 
Lemma 5.2. If ab T* cd, then there exists a F-chain from ab to cd of the 
form 
ab = Qobo r^ibo r^ibj Fa2bi F- • • Ta^b^ = cd. 
Such a chain will be called a canonical T-chain. 
Lemma 5.3 (The Triangle Lemma). 
Let A, B, and C be implication classes 
of an undirected graph G = (V, E) with A ^ B and A ^ C~^ and having 
edges ab eC,ace 
B, and bee A (see Figure 5.3). 
(i) If b'c' e A, then ab's C and ac' e B. 
(ii) If b'c' e A and a'b' e C, then a'c' e B. 
(iii) No edge in A touches the vertex a. 
Proof. By Lemma 5.2 there exists a canonical F-chain 
be = fco^^o r^iCo TbiCiT' 
• • T b^c^ = b'c'. 
By induction on /, we have the following implications: 
IB 3 aCiFbi+iCi e v4] => abi^ ^ e E, 
bi+ibi $ E=> abi+ ^ F abi e C, 
[C" ^ 9 fc,.+ i^rbi+1^+1 G A] => aCi+1 G £, 
Cj+ iCi fE=> aCi+1 F aCi e B. 
Therefore, in particular, ab' = ab^eC and ac' = ac^ e B. This proves (i). 
Next, let us assume that b'c' e A and a'b' e C. By part (i), ac' G B. Consider 
a new canonical F-chain, 
ab = aobo Ta^bo Ta^b^ F- • • Taibi = a'b'. 

2. 
Uniquely Partially Orderable Graphs 
109 
This chain gives rise to the chain 
ac' = UQCT a^d T - • T aid 
= 
a'd. 
Thus, ad F* a'd and a'd e B, which proves (ii). 
Finally, part (i) immediately implies (iii). 
| 
Theorem 5.4. 
Let A be an implication class of an undirected graph G = 
(K, £). Exactly one of the following alternatives holds: 
(i) A = A = A-'; 
(ii) AnA~^ 
= 0, ^ and A~^ are transitive, and they are the only 
transitive orientations of A. 
Proof, (i) Assume A n A~^ ^ 0. Let abeAr\A~^, 
so abV* ba. For 
any cd e A, cd F* ab and dc F* ba. Since F* is an equivalence relation, 
cd F* dc and dc e A. Thus A = A. 
(ii) Assume A n A~^ = 0 and let ab, beG A. Now ac^ E => abVcb=> 
cbeA=>bceA~^,3. 
contradiction. Thus ac e E. 
Let B be the implication class of G containing ac, and suppose A ^ B. 
Since A ^ A~^ and ab e A, the Triangle Lemma 5.3(i) implies that abeB^a. 
contradiction. Thus ac e A, and A is transitive. Moreover, A being transitive 
implies that ^ " Ms transitive. 
Finally, A is an implication class of ^, so by Theorem 5A A and A~ ^ are the 
only transitive orientations of A. 
| 
Corollary 5.5. 
Each color class of an undirected graph G either has exactly 
two transitive orientations, one being the reversal of the other, or has no 
transitive orientation. If in G there is a color class having no transitive orienta-
tion, then G fails to be a comparability graph. 
2. 
Uniquely Partially Orderable Graphs 
Let HQ be a graph with n vertices Vi,V2,. • - ,v„ and let H^, / / 2 , . . . , //„ be 
n disjoint graphs.* The composition graph H = HQ\_HI, H2, ..., H J is 
formed as follows: For all 1 < ij < n, replace vertex Vi in HQ with the graph 
Hi and make each vertex of H^ adjacent to each vertex of Hj whenever f, is 
* The graphs may be directed or undirected. 

110 
5. 
Comparability Graphs 
Figure 5.4. The composition of some undirected graphs. 
adjacent to Vj in HQ. Formally, for Hj = (]^, Ei) we define H = (K, £) as 
follows: 
E= [JEi^ 
{xy\xEVi,yeVj2indViVjeEQ}. 
We may also denote E = EQC^I^ ^2 ^ • • •» ^ J - ^ ^ call HQ the outer factor and 
/f 1,..., H„ the inner factors (see Figures 5.4 and 5.5). 
Theorem 5.6. 
Let G = GQ[GI, G2, ..., GJ, where the G, are disjoint 
undirected graphs. Then G is a comparability graph if and only if each G; 
(0 < i < n) is a comparability graph. 
\ 
^ ' 
A 
Figure 5.5. The composition of some transitively oriented graphs. 

2. 
Uniquely Partially Orderable Graphs 
111 
Figure 5.6. Three decompositions of the same graph. The edges are marked according to 
their color classes. 
Proof. Let FQ, F^, ..., F„ be transitive orientations of GQ, G^, ..., G„, 
respectively. It is easy to show that Fo[Fi,..., F J is a transitive orientation 
of G. The converse follows from the hereditary property of comparabiUty 
graphs. 
I 
A graph is called decomposable if it can be expressed as a nontrivial com-
position of some of its induced subgraphs; otherwise, it is called indecompos-
able. Three decompositions of the same graph are illustrated in Figure 5.6. 
Of course, any graph G has the trivial decompositions G = i^i[G] and G = 
G[Xi, Xj, ..., iC J . Formally, G = (K, E) is decomposable if there exists a 
partition V = V^ -\- V2 -\~ •-- + V^ of the vertices into nonempty pairwise 
disjoint subsets with 1 < r < | F| such that 
G = GRIGV, , GV^^, . . . , 
GvJ 
for any set of representatives R = {x^, X2,..., x j , XIEVI. Such a partition is 
said to induce a proper decomposition of G, Theorem 5.6 may be reinterpreted 
as follows. 
Corollary 5.7. 
Let F be a transitive orientation of a comparability graph 
G. If G = GRIGV^, ..., Gy^ is a proper decomposition of G, then F = 
F^[F^^,...,F^J. 
Let us examine the effect of this decomposition on the color classes. Notice 
in Figure 5.6 that each color class occurs either entirely within one internal 
factor or entirely within the external edges. This phenomenon is true in 
general. 
Theorem 5.8. 
Let G = GoEG^, ..., GJ be the composition of disjoint 
undirected graphs G^ = (I^, Fj) (f = 0,1,..., n). If ^ is a color class of G, then 
one of the following alternatives holds: 
(i) A ^ Ej for exactly one index; > 1, or 
(ii) A n Ej = 0 for all indices) > L 

112 
5. 
Comparability Graphs 
Proof. By our original definition of forcing, every color class .4 is a con-
nected (partial) subgraph of G. Suppose that A n Ej ^ 0 for some ; > 1. 
Let absAn 
Ej and consider an edge a'b' Vah. Clearly a'b' $ E^ for any 
k ^ j , k > 1, since edges in different internal components never share a 
vertex. Moreover, a'b' cannot be an external edge because if it were then by 
the definition of composition the vertices a, a', fc, b' would induce a triangle 
in G, implying that a'b'Tab. Hence, a'b' must also be in Ej. Thus, by con-
nectivity, A ^ Ej. 
I 
Let G = (K, £) be an undirected graph. A subset 7 ^ K is called partitive 
if for each xeV 
— Y either Y n Adj(jc) =^ 0 or Y ^ Adj(x). A partitive 
set Y is nontrivial if 1 < | Y | < | F |. On the one hand, any internal factor of a 
decomposition of G is partitive. On the other hand, a partitioning of the 
vertices V = {v^} -\- --• -{- {v^} -h Y where Y is partitive induces a proper 
decomposition of G. Therefore, we may conclude the following remark. 
Remark 5.9. 
G has a nontrivial partitive set if and only ifG is decomposable. 
Before continuing, we present two simple consequences of the Triangle 
lemma. 
Proposition 5.10. 
If Y is the set of vertices spanned by a color class A of 
an undirected graph G = (V, £), then Y is partitive. 
Proof 
If y = F, then the result is trivial. Otherwise, let a G K — 7, and 
suppose that bsYn 
Adj(a). Then, abe E — A and bee A for some CEY, 
which implies that aceE — A. Applying Lemma 5.3(i), we obtain that 
Y S Adj(a). 
I 
Proposition 5.11. An undirected graph G = (V,E) may have at most one 
color class which spans all of V. 
Proof 
Suppose that two distinct color classes A and B both span V. Then 
for every vertex b there exist edges abeB and be e A. Since A ^ B, the edge 
ac is in E. What color is it? Let C denote the color class containing ac. If 
C ^ A, then Lemma 5.3(iii) implies that no edge from A may touch vertex a, a 
contradiction. Hence C = A ^ B, and Lemma 5.3(iii) now implies that no 
edge from B may touch vertex c, another contradiction. Therefore, A and B 
cannot both span all of K. 
| 
A comparability graph G is called uniquely partially orderable (UFO) if it 
has exactly two transitive orientations, one being the reversal of the other. 
Clearly, a comparabihty graph is UFO if and only if it has exactly one color 
class (see Corollary 5.5). 

3. 
Number of Transitive Orientations 
113 
Theorem 5.12 (Shevrin and Filippov [1970]; Trotter, Moore, and 
Sumner [1976]). Let G be a connected comparability graph. The following 
conditions are equivalent. 
(i) G is UPO. 
(ii) 
Every nontrivial partitive set of G is a stable set. 
(iii) For every proper decomposition of G, each internal factor is a stable 
set (i.e., all edges are external). 
Proof. The following proof is due to Arditti [1976a]. By the comments 
preceding Remark 5.9, (ii) and (iii) are equivalent. If G is UPO, then G has 
exactly one color class, and this class spans V. Therefore, by Theorem 5.8 
any proper decomposition of G must make all edges external. Thus (i) implies 
(iii). Next, suppose G is not UPO; then by Proposition 5.11 G has a color 
class which only spans a proper subset Y of V. By Proposition 5.10, 7 is a 
nontrivial partitive set which is not a stable set. Thus (ii) implies (i). 
| 
Corollary 5.13. Let G be a comparability graph. If G is indecomposable, 
then G is UPO. 
Proof. If G is indecomposable, then G is connected and it satisfies condi-
tion (iii) of Theorem 5.12 vacuously. Hence G is UPO. 
| 
3. 
The Number of Transitive Orientations 
In this section we shall examine the interaction between implication 
classes. In the process we will obtain a formula for the number t(G) of transi-
tive orientations of a comparability graph G and a procedure for constructing 
them. Our treatment follows Golumbic [1977a], in which most of this theory 
was developed. An alternate method for calculating t{G) appears in Shevrin 
and Filippov [1970]. 
Example. A transitive orientation of any graph partially orders its 
vertices. Consider a transitive orientation F of the complete graph K^+i on 
r + 1 vertices. Since in F each pair of distinct vertices is comparable, the 
partial ordering is actually a linear ordering (total ordering). Conversely, any 
hnear ordering of the vertices of iC^+1 yields a transitive orientation by direct-
ing each edge from smaller to larger. Therefore, 
t(K^+i) = the number of linear orderings of r + 1 elements 
= 
{r+l)\ 

114 
5. 
Comparability Graphs 
Let G = (V, E)hQ an undirected graph. A complete subgraph (V^, S) on 
r -f 1 vertices is called a simplex of rank r if each undirected edge ah of S is 
contained in a different color class of G. For example, each undirected edge 
ah of E is itself a simplex of rank 1. A simplex is maximal if it is not properly 
contained in any larger simplex. 
The multiplex generated by a simplex S of rank r is defined to be the follow-
ing undirected (partial) subgraph: ( ^ , M), where 
M = {abeE\abT^ 
xy for some xy G 5}, 
or alternatively, 
where the union is over all color classes Ae J^{G) satisfying A nS ^ 
0. 
Thus, M is the union of the ^r(r + 1 ) color classes represented by the edges of 
the simplex S. (This number is due to S being a complete graph on r + 1 
vertices.) Anticipating Corollary 5.15 we say that the multiplex M also has 
rank r. A multiplex is maximal if it is not properly contained in any larger 
multiplex. We will soon see that M is a maximal multiplex if and only if S is a 
maximal simplex. 
Remark. 
If we actually assign a different color to each class of e/(G) and 
paint the edges of G accordingly, then a complete subgraph S whose edges 
are each painted a different color is a simplex. The collection of edges of E 
painted the same color as some edge of S is a multiplex. For example, if there 
is a red, white, and blue triangle in the graph, then the set of all red, white, and 
blue edges is a multiplex of rank 2. The graph in Figure 5.2 has two disjoint 
maximal multiplexes, one of rank 2 and one of rank 1. The expressions 
tricolored triangle and simplex of rank 2 are synonymous. Finally, notice that 
the edges and implication classes of a tricolored triangle satisfy the hypotheses of 
the Triangle Lemma 5.3. 
An isomorphism between two simplices (F^, S^) and (Vj, S2) of an undirected 
graph is a bijection/: F^ -> V2 such that ab F* f(a)f(b) 
for each distinct pair 
a, be V^. It is thus possible to lay S^ on top of S2 so that the colors of their 
edges match. 
Theorem 5.14 (Golumbic [1977a]). Let (K^, T) be a simplex generating 
the multiplex M, and let (P^, S) be a simplex contained in M. Then (P^, S) is 
isomorphic to a subsimplex of (FT-, T). 
Proof. Choose an edge be e S. Since T generates M, there exists an edge 
b'c' E T such that be F* b'c'. Define f(b) = b' and /(c) = c'. If rank S = 1, 
then the theorem is proved. 

3. 
Number of Transitive Orientations 
115 
Figure 5.7. From a tricolored triangle in S we find an isomorphic tricolored triangle in T. 
The vertices b' and b'' must be equal since Tis a simplex. 
Otherwise, consider any other vertex aeVs, and let A, B, and C denote the 
impHcation classes such that be eA.ace 
B, and ab e C. Since T generates M, 
there exists an edge a"b" eT r\C. Applying the Triangle Lemma 5.3(i) twice 
we obtain {\)ab' eC and ac' e B and (2) a"c' e B and b"c e A (Figure 5.7). But 
the simplex T cannot contain two different edges b'd and V'c' which are the 
same color; hence V = b". Define/(a) = a". In this manner/is defined for all 
vertices of V^. Choose distinct vertices a and d of K5, different from b and c. 
Since abV* f(a)f(b) 
and dbT''f{d)f{b\ 
then f (a) = f(d) would imply 
a = d, since S is a simplex. Thus/is injective. Moreover, the Triangle Lemma 
5.3(ii) implies that ad F* f(a)f{d). Therefore,/is an isomorphism from 5 to a 
subsimplex of T. 
| 
The following is an immediate result of the preceding theorem. 
Corollary 5.15. 
Simplices generating the same multiplex are isomorphic. 
The next lemma shows us how to construct simplices. 
Lemma 5.16. 
Let(Ps, S) be a simplex of an undirected graph G = (F, E) 
generating a multiplex M. If G contains a tricolored triangle on vertices a, b, c 
such that ab^M but be e M, then we may adjoin the vertex a to (V^, 5) to 
obtain the larger simplex {Vj, T) containing (I^, S), where 
Vr^VsKj 
{a}, 
T = 
Su{ad\dEVs}. 

116 
5. 
Comparability Graphs 
Proof. Let us assume that G contains a tricolored triangle on a, b, c satisfy-
ing ab$M and be e M. Since S generates M, there is some edge b'c' e S for 
which b'c' r* be. The Triangle Lemma 5.3(i) implies that ab' and ac' are in 
the same two distinct color classes of G, respectively, as are ab and ae. Thus, 
ab' ^ M. Next we shall show that ad ^ M as well. 
Suppose that ae' eM; then ae' F* xy for some xyeS (because ae' must be 
the same color as some edge in S). Again by the Triangle lemma, b'a T* b'x, 
however, b'a i M while b'x e S, a contradiction. Thus, ae' $ M. This argument 
actually proves the stronger claim: 
Faet I. 
If a tricolored triangle has one side in M and another side not in 
M, then the third side is also not in M. 
Next let d e Vs,d ^ b', c'. Certainly adeE since ab' and b'd are in different 
color classes. Whereas the edges b'e and e'd are in different color classes, the 
edge ad is in a different class than at least one of them. Therefore, at least one of 
the triangles G{a,b',d} ^^ ^{a,c',d} is tricolored and satisfies the hypothesis of 
Fact 1, implying that ad ^ M. Thus, the set {ad\de P^} shares no color classes 
with S. 
Since ab' and ae' are in different color classes, to conclude the proof that 
(VT, T) is a simplex it suffices to show the following claim: 
Fact 2. Either the undirected edges ad (for deVg) are all in different color 
classes, or all of the edges ad (for deVs) are F*-related. 
Suppose that ad, ad' EAE J(G). If A has no transitive orientation, then 
Theorem 5.4(i) implies that ad r*ad'. If A has a transitive orientation, then 
Theorem 5.4(ii) implies that ad F* ad' since dd' ^ A. Now let d" be any vertex 
of Vs other than d or d'. If ad" ^ A, then G^^^^a") and G^^^'^^'^j are both tri-
colored triangles sharing two common colors. So by the Triangle Lemma 
5.3(i), dd" F* d'd", which contradicts the definition of a simplex. Thus, 
ad" e A and, as before, ad F* ad". This proves Fact 2 and concludes the proof 
of the theorem. Obviously, rank 7 = 1 + rank S. 
| 
Lemma 5.3(ii) tells us that if an undirected graph contains a red, white, and 
blue triangle, then anywhere in the graph where we find a red edge ab and a 
white edge be, the edge ae will be blue. Suppose there is a multiplex M con-
taining a red, white, and blue triangle. The next theorem shows, in particular, 
that every red, white, and blue triangle is part of a simplex generating M. 
Theorem 5.17 (Golumbic [1977a]). Let 5 be a simplex contained in a 
multiplex M. There exists a simplex S^ generating M such that S ^ 
S^. 

3. 
Number of Transitive Orientations 
117 
Proof. If rank 5 = rank M, then S itself generates M. We proceed by 
reverse induction, assuming the theorem to be true for any simplex of rank 
greater than rank 5. 
Let V be any simplex generating M. Since rank U = rank M, only some 
of the edges of U have "cousins" in S of the same color. These are the ones 
contained in M^, defined here as the multiplex generated by S. Thus M^ c= M. 
Since U is connected it has a tricolored triangle on a, b, c with bceM^, 
ab^ M^. By Lemma 5.16, we can adjoin the vertex a to S creating a simplex 
T containing S with rank T = 1 -h rank 5. Thus, by induction, there is a 
simplex S]^ generating M such that 5 <= T c 5^. 
| 
Theorems 5.14 and 5.17 can be summarized as follows: 
Corollary 5.18. Let Mj, M2 be multiplexes with M^ ^ M2. 
(i) Every simplex generating M^ is contained in a simplex generating 
M2. 
(ii) Every simplex generating M2 contains a subsimplex which generates 
Theorem 5.19. Let M be the multiplex generated by a simplex S. Then, M 
is a maximal multiplex if and only if 5 is a maximal simplex. 
Proof. (=>) This implication follows directly from the definition of 
multiplex. 
(<=) Suppose S is maximal and M ^ M\ where M' is another multiplex. 
Since S ^ M ^ M\ Theorem 5.17 implies the existence of a simplex S' con-
taining S with 5' generating M\ But the maximality of S yields S = S\ so 
M = M\ 
I 
By virtue of the preceding theorem and corollary we can now locate a 
maximal multiplex by a local search of the edges. We pick an edge at random 
and build up successively large simplices each containing its predecessor until 
the simplex we have is maximal. It then generates a maximal multiplex. 
The next theorem implies that the maximal multiplexes partition the edges 
ofG. 
Theorem 5.20. If M^ and M2 are maximal multiplexes of an undirected 
graph G, then either M^ n M2 = 0 or M^ = M2. 
Proof. Let S^ and ^2 be simplices generating M^ and M2, respectively. By 
Theorem 5.19, S^ and ^2 are maximal. Suppose M^ n M2 # 0 and M^ 
7^ M2, then some edges of S2 are in M^ and some are not. Because ^2 is 
connected, it must contain a tricolored triangle G^^iy^c} with BCGM^ and 

118 
5. 
Comparability Graphs 
ab ^ M1. By Lemma 5.16, we can construct a large simplex T containing 5^, 
contradicting the maximality of S^. Thus, one of the alternatives of the 
theorem must hold. 
| 
Theorem 5.21. If A is an implication class of an undirected graph G = 
(V, E) such that A = A, then A itself is a maximal multiplex of rank 1. 
The proof of Theorem 5.21 follows directly from the Triangle lemma and 
the definition of multiplex. It is left as an exercise for the reader. 
| 
A simplex of rank r has (r + 1)! transitive orientations, as we have seen in 
the example at the beginning of this section. Moreover, in the proof of the 
next theorem we will show that a transitive orientation of the simplex extends 
uniquely to a transitive orientation of the multiplex generated by it, except 
when the multiplex is itself an implication class and hence not transitively 
orientable (by Theorem 5.4). Conversely, a transitive orientation of a multi-
plex restricts uniquely to a transitive orientation of any simplex contained 
in it. 
Theorem 5.22. 
Let M be a multiplex of rank r. If M is transitively orient-
able, then r(M) = (r + 1)!. 
Remark. 
Theorem 5.21 shows that the only case in which M might fail to 
be transitively orientable is when r = 1. 
Proof. Let 5 be a simplex of rank r generating M, and let F^ be a transitive 
orientation of S. Finally, let A^, ..., A^ Ik = jr(r + 1)] be the implication 
classes containing the edges of F^. The corresponding color classes ^, are 
distinct, and A^ + • • • + ^4^ = M. If r = 1, then A^isa, transitive orientation 
of M = .4i if and only if A^ / A^ if and only if t(M) = 2. If r > 1, then 
F = A^ -\- '" -\- Af^ is certainly an orientation of M by Theorems 5.4 and 
5.21. We must show that F is transitive. Let abeA^, bee Ay If i =7, then 
ac e Ai by the transitivity of Ai [Theorem 5.4(ii)]. If i ^ 7, then aceE since 
Ai n Aj = 0. Suppose ca G F, then the individual transitivity of Ai and Aj 
implies that ca e A^ for some f 7^ r # j . Theorem 5.14, however, impHes that 
there exist edges a'b\ b'c\ c'a' G 5 such that a'b' e Ai, b'c' e Aj, and c'a' G A^, 
contradicting the transitivity of F5. Therefore, acGF and F is transitive. Thus, 
for each transitive orientation of S we obtain a unique transitive orientation 
ofM,sor(M)> t(S) = (r-{- 1)!. 
Conversely, given a transitive orientation F2 of M, consider its restriction 
F2 nSto 
S. The three facts, ab, bcGFjn 
S, F2 being transitive and S being 
complete, collectively imply that acGF2 n S. So F2 n S is a transitive 
orientation of S. Therefore, t(S) > t(M) and Theorem 5.22 is proved. 
| 

3. 
Number of Transitive Orientations 
119 
The partition of an undirected graph G = (V, E) into its maximal multi-
plexes E = M^ + • • • + Mfc will be referred to as its M-decomposition. It is 
unique up to the order of the M^. Having just examined the transitive 
orientabihty of a multiplex, let us now investigate the transitive orientability 
of all of E. The next major theorem shows a one-to-one correspondence 
between the transitive orientations of the M^ and those of E. 
Theorem 5.23 (Golumbic [1977a]). Let G = (V, E) be an undirected 
graph, and iQt E = M^ + 
- + M^, where each M^ is a maximal multiplex 
ofE. 
(i) If F is a transitive orientation of G, then F n M, is a transitive orienta-
tion of M^. 
(ii) 
IfFj, . . . , F,t are transitive orientations of Ml, . . . , M,^, respectively, 
then Fi + • • • + Ffc is a transitive orientation of G. 
(iii) tiG) = 
t(M,)ti^^2)'^^t(M,). 
(iv) If G is a comparability graph and r^^rankM^, then t(G) = 
Ui=i(ri + m 
Proof. Statement (iii) follows from (i) and (ii), while (iv) is implied by (iii) 
and Theorem 5.22. 
(i) Assume F is a transitive orientation of G and let ab, he EF 
nM^. 
Suppose that ac $ M^; then G^^ ^ ^^ must not be a tricolored triangle. Therefore, 
ab, bee A for some A e J^(G). Thus ab, beeF n A, and F n A equals either 
A or y4"\ both of which are transitive by Theorems 5.1 and 5.4. Hence 
ac e A, which is a contradiction. 
(ii) Assume that F^, ..., F^ are transitive orientations of M^, ..., M^, 
respectively. We shall show that F^ + • • • + F^ is transitive. Let abeF^, 
be e Fj. If / = 7, then ac G F^ by transitivity of F^. If i ^ 7, then ab and be are 
in different color classes, so aceE. 
Since G|^j, ^^ cannot be a tricolored 
triangle and hence cannot be contained in a single multiplex, it follows that 
ace Mi -f Mj. But if caeFi + Fj, then transitivity gives a contradiction. 
Thus, aceFi + Fj. 
| 
Summarizing the results of this section, we have shown that the maximal 
multiplexes partition the edges and act independently with respect to transi-
tive orientation. They are generated by maximal simplices which can be 
built up from a single edge by a local search. Simplices generating the same 
multiplex are isomorphic. Finally, the number of transitive orientations of an 
undirected graph is a product of factorials depending on the ranks of its 
maximal multiplexes. Thus, every comparability graph behaves as if it were 
a disjoint collection of complete graphs. 

120 
5. 
Comparability Graphs 
4. 
Schemes and G-Decompositions—An Algorithm 
for Assigning Transitive Orientations 
In this section we describe an algorithm for calculating transitive orienta-
tions and for determining whether or not a graph is a comparability graph. 
This technique is a modification of one first presented by PnueH, Lempel, 
and Even [1971]. Our version uses the notions introduced in Section 5.1; the 
proof of its correctness relies on some of the results of Section 5.3. A discussion 
of its computational complexity will follow in Section 5.6. 
Let G = (V, E)hQ an undirected graph. A partition of the edge set E = 
JBI + ^2 H- • • • H- Bfc is called a G-decomposition of E if B^ is an implication 
class of Bi -{-•+ 
Bj, for all i == 1, 2, ..., /c. A sequence of edges [x^yi, 
X2y2, • • •, ^fc^fc] is called a decomposition scheme for G if there exists a G-
decomposition E = B^ + B2 + - • + Bj, satisfying Xjj^j^B, for all i = 
1,2,..., /c. In this chapter the term scheme will always mean a decomposition 
scheme. 
For a given G-decomposition there will be many corresponding schemes 
(any set of representatives from the Bi). However, for a given scheme there 
exists exactly one corresponding G-decomposition. A scheme and G-decom-
position can be constructed by the following procedure: 
Algorithm 5.1 (Decomposition Algorithm). 
Let G = {V, E)bQ an undirected graph. 
Initially, let i = 1 and E^ = E. 
Step (1): Arbitrarily pick an edge e, = Xj-y,- E JE,-. 
Step (2): Enumerate the implication class 5, of E^ containing x^y^. 
Step (3): Define £, + 1 = E^ - B^. 
Step (4): If £i+i = 0 , then let k = i and Stop; otherwise, increase / by 1 
and go back to Step (1). 
Clearly, the decomposition algorithm yields a scheme Ix^yi, ..., x^yj 
and corresponding G-decomposition 5i + ••• + B^ for any undirected graph 
G. Moreover, if y^Xf had been chosen instead of x^y^ for some i, then Bf^ 
would replace B^ in the G-decomposition. Applying the algorithm to the 
graph in Figure 5.2, the scheme [ac, be, dc'] gives the G-decomposition for 
which Bi = /I3, ^^2 = ^4 + ^ r ^ and B3 = ^2 ^ (see p. 106 and Figure 5.8*). 
In this example notice that although ba and be were not F-related in the 
original graph, once B^ is removed they become F-related in the remaining 
subgraph and their implication classes merge. In general, each implication 
* Another example is given in Exercise 8. 

4. 
Schemes and G-Decompositions 
121 
(V,E.) 
x.y. 
(V,B.) 
<
!
> 
e 
ac 
c .
-
1
^
< 
a 
a 
a 
a 
c % 
% d 
me 
dc 
c • 
• % d 
me 
O'-^-'-a^—: 
Figure 5.8. An illustration of the decomposition algorithm. 
class of iEi+1 will be the union oisome number of implication classes of £j. We 
now examine exactly how the old classes merge. 
Theorem 5.24 (Golumbic [1977a]). Let A be an implication class of an 
undirected graph G = (K, E\ and let D be an implication class of £ — .4. 
Either 
(i) D is an impHcation class of £, and A is an implication class of E — D, 
or 
(ii) D = B + C where B and C are implication classes of £, and A -\- B 
+ C is a multiplex of E of rank 2. 
Proof. Removing A from E may cause some implication classes of E to 
merge. Let D be the union of k implication classes of E. 
Assume fc > 2; then there exists a triangle on vertices a, b, c with bcG A 
and either aceB and absCox 
caeB and ba G C, where B and C are distinct 
implication classes of E contained in D. Without loss of generality we may 

122 
5. 
Comparability Graphs 
assume ac e B and abeC since the other case is identical for D"^ Suppose 
B = C'\ 
then ba, aceB. But bc^B, so by Theorem 5A B = B = B~\ 
implying B = C, a contradiction. Therefore B n C = 0 and G{a,b,c} is a 
tricolored triangle, making A -\- B -\- C a multiplex of rank 2. 
Furthermore, any F-chain inE — A containing edges from B and C could 
not contain edges from other implication classes since all triangles in E with 
one edge in A and a second edge in B (resp. C) must have its third side in C 
(resp. B) and would be isomorphic as a simplex to G^^^j,,.}- Thus k = 2 and 
D = B ^ C. 
Finally, we shall show that if fc = 1, then A is an implication class of 
E — D.By what we have already proved, if A is not an implication class of 
E — D, then D -\- A -\- A^isa. multiplex of rank 2 in £ for some third implica-
tion class AI of E. However, this implies that D alone is not an implication 
class of £ — ^, contradicting fc = 1. So indeed A is an implication class of 
E - b, 
I 
Corollary 5.25. 
Let A be an implication class of an undirected G = 
(K, E). liA = A, then all other imphcation classes ofE are again imphcation 
classes of £ — ^. 
Corollary 5.26. 
Let A be an implication class of an undirected graph 
G = (F, E). Then \J(E)\ = r + \J{E - i ) | , where r is the rank of the 
maximal multiplex of E containing A. 
The proof of the first corollary follows directly from Theorem 5.21, while 
the second corollary is a result of A being a part of exactly r — 1 different 
multiplexes of rank 2. 
| 
The next theorem is of major importance since it legitimizes the use of 
G-decompositions as a constructive tool for deciding whether an undirected 
graph is a comparabiHty graph, and if so, producing a transitive orientation. 
Condition (iv) is the traditional characterization due to Gilmore and Hoffman 
[1964] and Ghouila-Houri [1962]. 
Theorem 5.27 (TRO Theorem). 
Let G = (F, £) be an undirected graph 
with G-decomposition E = B^ + " -^ B^. The following statements are 
equivalent: 
(i) 
G = (F, £) is a comparability graph; 
(ii) ^ n ^ " ^ = 0 for all implication classes 
AofE; 
(iii) Bf n Br ^ = 0 for f = 1,..., /c; 
(iv) every "circuit" of edges V1V2, 1^2^3> • • •» ^q^i ^ ^ such that u^-iUi, 
VqV2, i^i- ifi+1 ^ E (for / = 2,..., ^ — 1) has even length. 

4. 
Schemes and G-Decompositions 
123 
Furthermore, when these conditions hold, B^ + • • • + 5^ is a transitive 
orientation of E. 
Proof, (i) => (ii) This is precisely Theorem 5.1. 
(ii) => (iii) We shall proceed by induction. Since B^ is an implication 
class of £, we have B^ n B^^ = 0.lf 
k = I, then we are done. Assume the 
implication is true for all G-decompositions of graphs of length less than k. 
Then, in particular, it is true for E — B^. 
Let D be an implication class of E — B^.By Theorem 5.24, either D is an 
implication class of £, in which case D n D~^ = 0,OT D = B + C, where B 
and C are implication classes of E such that B n C = 0, implying that 
DnD' 
={B -]- C)n(B-' 
+ 
C) 
= 
iBnB-')-\-(CnC-') 
= 0. 
Therefore, by induction, 5, n Bj^^ = 0 , for i = 2,..., k. 
(iii) => (i) Let E = B^ -\- - -\- B^ be a G-decomposition of E with 
Bi n B^^ = 0. By Theorem 5.4, B^ is transitive. If /c = 1, then the implica-
tion holds. Assume the implication is true for all G-decompositions of graphs 
of length less than k. By this assumption, F = B2 + " 
-\- B^is a. transitive 
orientation of £ — B^. We must show that B^ + F is transitive. 
Let ab,bceB^ 
+ F. If both these edges are in B^ or both in F, then by the 
individual transitivity of B^ and F, aceB^ + F. Assume, therefore, that 
ab E B^ and be e F, which implies that ab F* cb, so ac e E. What would happen 
if ac$B^ + F? Then caeB^ + F. However, 
caeBi,abeBi=^cbEB^, 
a contradiction, 
and 
caeF,bcGF 
=>bae F, 
a contradiction. 
Thus acsBi 
+ F. Similarly, abeF and bee B^ imply aesB^ H- F. So indeed 
5i H- • • • + Bfc is a transitive orientation of E. 
(iv)o(i) 
Suppose V1V2EA n .4"^ / 0 . By Lemma 5.2, there exists a 
F-chain 
viV2r v^v2r v^v^r - • -r VqVq^i rv^v^^^ = V2V^. 
By construction, q is odd, since all first coordinates have odd index. Further-
more, V1V2, V2V2,..., VqVi is such a circuit, a contradiction. 
Conversely, if E has such a circuit of odd length q, then 
t;ii;2 F t;3 ?;2 F i;31;4 F • • • F i; ?; 
1 F i;^i;i F i;2 v^ 

124 
5. 
Comparability Graphs 
is a r-chain in £, implying that A n A~^ ^ 0 for thQ implication class A 
containing i^ii;2» a contradiction. 
| 
By combining the TRO theorem with the decomposition algorithm, we 
obtain an algorithm for recognizing comparability graphs and assigning a 
transitive orientation. 
Algorithm 5.2 (TRO Algorithm). 
Input: An undirected graph G = (V, E). 
Output: A transitive orientation F of edges of G, or a message that G is not a 
comparability graph. 
Method: The entire algorithm is as follows: 
begin 
Initialize: i <- \; Ei <- E; F ^ 0 ; 
1. 
Arbitrarily pick an edge Xiyi e Ei\ 
2. 
Enumerate the implication class 5, of Ei containing jc,^',; 
if 5, n B-^ = 0 then 
add Bi to F; 
else 
print "G is not a comparability graph"; 
STOP; 
3. 
Define: £, + , ^ F. - B,; 
4. 
ifF, + i = 0then 
k <r~ i; output F; 
STOP; 
else 
/ ^ / 4- 1; 
go to 1; 
end 
The sequence of free choices made in line 1 of the algorithm determines 
which of the many transitive orientations of G is produced by the algorithm. 
A different scheme may give a different transitive orientation. But when you 
try out a few different schemes you will notice a remarkable phenomenon: 
No matter how the free choices for G are made, the number of iterations k 
will always be the same. A proof that this is actually true for any graph G and, 
more importantly, a characterization of the underlying mathematical struc-
ture which causes it are the subject of the next section. 
5. 
The r*-Matroid of a Graph 
The Decomposition Algorithm 5.1 emphasizes that the order in which the 
edges appear in a scheme is extremely important. The free choices made in 

5. 
r*-Matroid of a Graph 
125 
earlier iterations affect which edges remain to be chosen in latter iterations. 
If the algorithm once gave us a scheme [e^, ^2, ^3,.. •, e^], what will happen if 
we rerun the algorithm by choosing ^2 first and e^ second ? Is there any reason 
for believing that e^ will not have been removed and will therefore be available 
as the third free choice? The answer to the latter question is yes. 
All the results in this section are due to Golumbic [1977a]. 
Theorem 5.28. 
Let [^1, ^2,..., e^] be a scheme for an undirected graph G, 
and let TT be a permutation of the numbers {!,..., k}. Then [e^^), ^;j(2), • • •, 
^7r(k)] is also a scheme for G. 
Proof. If fe = 1, then there is nothing to prove. Assume therefore that 
k > 2. Letfii + B2 + • • + ^jt be the G-decomposition corresponding to the 
given scheme. Theorem 5.24 allows us to commute edges occurring next to 
each other in a scheme in the following manner. Fix i < k. Let 
^i — ^i + • • • + ^k» 
Cj = implication class of £,• containing e^+i, 
C,+1 = implication class of E^ — C, containing e^. 
By Theorem 5.24, either (i) B,.+ i = Q and B^ = Q+i, so that Bi + 5^+1 = 
Ci + Ci+1, or (ii) there exists an implication class A of Ef such that Bi+i = 
A + Ci and Q+i = A -\- Bi, also implying that B, + JB^+I = Q -h Q+i. 
Consequently, in either case, Bf + • • -h Q + Q+i + • • • + 5^ is a G-de-
composition of E with scheme [e^,..., ^j+1, ^f,..., ejj. 
However, every permutation can be expressed as a composition of such 
local commutations (often called transpositions), from which the theorem 
follows. 
I 
Theorem 5.29 (Golumbic [1977a]). 
Let G = (F, E) be an undirected 
graph. 
(i) Each scheme for G has the same length, 
(ii) Each G-decomposition of G has the same length, 
(iii) If [^1, ^2»• • •» ^fc] aiid [/i,/2,. •. ,/fc] are schemes for G, then for any 
ei there exists/) such that [^i,..., ^i_ 1,/), ^i+1,..., e j is also a scheme for G. 
Proof. If G has an implication class A such that E = A, then any scheme 
has length 1 and any edge can be chosen as a scheme. Therefore, assume that 
the theorem is true for all graphs having fewer implication classes than G, and 
let [^1, ^2»• • •»^k] and [/i,/2,... ,/^] be schemes for G with fc, m > 2. Choose 
^i and (using Theorem 5.28 if necessary) make sure that it is not in the first 
position. If £ ^ Ci + C2 + • • • + C^ is the G-decomposition corresponding 

126 
5. 
Comparability Graphs 
to U1J2, • • • Jml then e^ e Cp for some p. Thus [/i,... Jp. 1, ^1,/^+1,... , / J 
is also a scheme. Theorem 5.28 then impHes that [^i,/i, • • • ,/p- i,/p+1,. • • ,/m] 
is a scheme for G. 
Finally, both [^2, ..., e,, ..., e j and [/i, ...,/p_i,/p+j, . . . , / J are 
schemes for E — B, where B is the implication class of £ containing e^. Since 
E — B has fewer implication classes than £, by induction the lengths /c — 1 
and m — 1 are equal and there exists some/) which can replace ^^ in its scheme. 
In conclusion, since corresponding G-decompositions and schemes have the 
same length, all G-decompositions must have the same length. 
| 
Thus we have found a number associated with an undirected graph G 
which is invariant over all schemes and G-decompositions of the graph, 
namely the length of any scheme or G-decomposition of G. We shall denote 
this number by r(G). 
Theorem 5.30. Let G = (V, E) be an undirected graph, and let E = 
Ml + • • + M|t, where Mj is a maximal multiplex of E of rank r,. Then 
riG) = r, + --- + r,. 
Proof. Let AeJ{G) 
satisfy A^M^. 
Now M^ — ^ is a multiplex of 
rank r^ — 1, and E — A = (M^ — A^) + M2 + • • -h M^ is an M-decom-
position of G' = (F, £ - A). Since \J{G)\ > |J^(G')|, we may assume by 
induction that r{G') = (r^ - 1) + r2 -f • • • + r^. Therefore, r{G) = r^ + 
ri + '-' + r^' 
I 
Let G = (K, £) be a comparability graph with G-decomposition E = 
Bi + • • -f Bfc and corresponding scheme [^j, ..., e j . By Theorem 5.27, 
B^ -\- " + Bf^ will be a transitive orientation of G. Replacing e^ by e[^ ^ in the 
scheme will have the effect of replacing Bi by B^~ \ thus giving a new transitive 
orientation of G. In this manner we obtain 2'"^^^ transitive orientations of G, 
since k = r(G). There may, however, be others; the scheme [^^(D, ..., 6^,^^)] 
may even give a transitive orientation of G different from the T'^^^ above. In 
fact, the only time when these 2''^^^ represent all the transitive orientations of 
G is when each maximal multiplex is of rank one. (This follows from Theorems 
5.22 and 5.30 and the inequality 2" < {r + 1)! for r > L) For example, 
r(K^+^) = randt(X^+i) = (r + 1)! for the complete graph on r + 1 vertices. 
On the other hand, the graph G in Figure 5.9 has t(G) = 2''^^\ 
Story 
The owner of a large railroad decided to introduce his sons into the 
business. He asked his eldest to choose any two cities between which they 
provide train service, and the father would give him control of that run. The 

5. 
r*-Matrold of a Graph 
127 
Figure 5.9. The number of triangles is r{G) — 1. 
lad chose New York and Philadelphia. But the boy was clever and reasoned 
with his father saying, "Since you operate service between Harrisburg and 
Philadelphia and I operate the New York-Philadelphia trains, and since we 
don't offer any direct service between Harrisburg and New York, why not 
give me also the Harrisburg-Philadelphia run for the convenience of our 
passengers who would otherwise be burdened with their heavy luggage in 
changing trains!" 
The father was convinced by the son's argument and gave him the extra 
rail link. The son, encouraged by his success, continued this type of reasoning 
for triples of cities that fit the above pattern and accumulated more rail lines 
until finally no more triples of that form were left. His father handed him the 
corresponding deeds; they embraced and the son left to go out on his own. 
The father continued the same process with his other sons, giving one 
rail line and then also giving any other link A-B when the son already con-
trolled B-C provided they did not operate A-C between the two of them. 
Finally, the father had given away his entire rail system. 
Theorem 5.29 shows that no matter how each son chooses his initial free 
choice, exactly r(G) sons get portions of the railroad, where G is the graph 
whose vertices are the cities and edges the rail links. 
| 
We will now describe the underlying mathematical structure that causes 
the invariant r(G) to arise. 
A matroid <£, ^> consists of a nonempty (finite) set E of elements together 
with a nonempty collection ^ of subsets of E, called bases, satisfying the 
following axioms. 
(i) No base properly contains another base, 
(ii) If j?i, JS2 ^ ^ aiid xePi, then there exists an element yeP2 such that 
Theorem 5.31. Let G = (K, £) be an undirected graph. 
(i) 
<£, ^ > is a matroid, where {e^,..., e^} G J^ if and only if [^i,..., e^] 
is a scheme for G. 

128 
5. 
Comparability Graphs 
(ii) 
<^(G), ^(G)> is a matroid, where J^(G) is the set of color classes of G 
and {^1,..., ^fc}e^(G)if and only if {^j,..., e^} e J^ for eisAi. 
Proof. The order in which the edges appear in a scheme is important for 
the G-decomposition it will produce. Theorem 5.28, however, allows us to 
treat schemes as sets of chosen representative edges in which order is not 
relevant. By Theorem 5.29, these subsets satisfy the axioms of a matroid. This 
proves (i). Condition (ii) follows easily from (i). 
| 
The matroid <^J{G\ ^(G)> may be regarded as the quotient of the matroid 
<£, ^>. For those readers familiar with matroids, the invariant r{G) equals the 
rank (in the usual matroid sense) of <£, J^> and of 0{G\ 
^(G)}. 
These 
matroids are of a very special type. Let us see exactly what class of matroids 
is produced in this manner. 
By Theorem 5.24, the free choices taken from one maximal multiplex in no 
way influence choices taken from any other maximal multiplex. Therefore, it 
suffices to restrict our attention to applying the decomposition algorithm 
to a maximal simplex {Vg, S). Let r = rank S. Its free choices (r of them) 
constitute the edges of a spanning tree of (1^, S). Why is that? It is certainly 
true if r = 1 or r = 2. If it were false, then there would be a scheme j3 contain-
ing a simple cycle of edges V1V2, V2V^,.. .,ViVi oi minimal length / over all 
schemes. By Theorem 5.24, / ^^ 3. Again by Theorem 5.24, V2 v^ could be 
replaced by i;ii;3 in p, forming another scheme with a cycle of length less than 
/, contradicting minimality. Therefore, the r edges contain no simple cycles 
and must be a spanning tree of (P^, S), since there are r edges and r + 1 
vertices. Furthermore, any spanning tree of (P^, 5) is a scheme since it contains 
r edges, and for every other edge ab the tree provides a path ^i, ^2»• • • > ^g from 
a to b which, when used successively in the construction of a G-decom-
position, will also eliminate the edge ab. 
Two matroids <Ei, ^ i > and {£2, ^2} ^^e isomorphic if there exists a 
bijection/: E^ ^ E2 such that 
/(j8i)eJ^2 
for all 
P^G^^ 
and 
f~\P2)^^i 
for all 
P2^^2' 
Let Jf denote the family of matroids 
^ 
= {<i(G), .^(G)> |G is an undirected graph}. 
From the above discussion we may state the following characterization of 
the matroids in J^. 

6. 
Complexity of Comparability Graph Recognition 
129 
Theorem 5.32. A matroid is in the family Ji if and only if it is isomorphic 
to the matroid of spanning trees of a set of disjoint complete graphs. 
6. 
The Complexity of Comparability Graph Recognition 
A version of the decomposition algorithms of Section 5.4 is presented here 
in a pseudo-computer-language. It will suggest to us how we may actually 
enumerate the implication classes of a graph. We shall show that one can 
find a G-decomposition and test for transitive orientability of an undirected 
graph G = (F, E) in 0(5 • |£|) time and 0(| F | -h |£|) space, where b is the 
maximum degree of a vertex. 
Let G = (K, E) be an undirected graph with vertices 1;^, i;2,..., i^„. In the 
algorithm below we use the function 
CLASS(f,;) = 
0 
xiv^v-j^E, 
k 
if Vi Vj has been assigned to Bj,, 
— k 
if Vi Vj has been assigned to Bj^ ^ 
undefined 
if Vi Vj e E has not yet been assigned, 
and |CLASS(f,7)| denotes the absolute value of CLASS(i,7). As usual, the set 
E is always assumed to be a collection of ordered pairs and the degree di of 
vertex t?, is taken here to mean the number of edges with Vi as first coordinate 
(i.e., the out-degree). We freely use the identity 
|£|= td, 
in our analysis. 
Algorithm 5.3 (Decomposition Algorithm—Alternate Version). 
Input: An undirected graph G = (F, E) with vertices v^, V2, > •-, v„ whose 
adjacency sets obey 7 e Adj(0 if and only if ViVj e E. 
Output: A G decomposition of the graph given by the final values of CLASS 
and a variable FLAG which is 0 if the graph is a comparability graph and 1 
otherwise. If the algorithm terminates with FLAG equal to zero, then a transi-
tive orientation of G is obtained by combining all edges having positive 
CLASS. 
Method: The algorithm proceeds until all edges have been explored. In the 
feth iteration an unexplored edge is placed in B^. (Its CLASS is changed to 
k) Whenever an edge is placed into B^ it is explored using the recursive 
procedure of Figure 5.10 by adding to B^ those edges F-related to it in the 

130 
5. 
Comparability Graphs 
procedure EXPLORE(/, /): 
for each m e Adj(0 such that [m 4 Adj(/)or | CLASS (./, m)\<k] do 
begin 
if CLASS {i, m) is undefined then 
begin 
CLASS(/, m)^k\ 
CLASS(w, /) ^ 
-k\ 
EXPLOREO, m); 
end 
else 
ifCLASSO, m) = -^then 
begin 
C L A S S ( / , m ) ^ ) t ; F L A G ^ 1; 
EXPLORE(/,m); 
end 
end 
for each m e Adj(/) such that [m ^ Adj(/) or |CLASS(/, m)\ <k] do 
begin 
if CLASS(w,7) is undefined then 
begin 
CLASS(m,7) ^ k\ CLASS!./,w) ^ 
-k\ 
EXPLORE(m,y); 
end 
else 
ifCLASS(m,y) = -A: then 
begin 
CLASS(m,y) ^ k\ FLAG ^ 1; 
EXPLORE(w,7); 
end 
end 
return 
Figure 5.10. 
graph Ej,. (Notice that Vi Vj e E,^ if and only if either | CLASS(i,;) | equals k or is 
undefined throughout the feth iteration.) 
The variable FLAG is changed from 0 to 1 the first time a Bj, is found such 
that Bfc n Bk^ # 0 . At that point it is known that G is not a comparability 
graph (by Theorem 5.27). 
The algorithm is as follows: 
begin 
initiaUze: A: ^ 0; FLAG *- 0; 
for each edge VfVj in E do 
if CLASS (ij) is undefined then 
begin 
k^k 
-h \; 
CLASS (iJ) ^ k; CLASS (./,0 ^ 
-k; 
EXPLORE (/,y); 
end 
end 

6. 
Complexity of Comparability Graph Recognition 
131 
Complexity Analysis 
We begin by specifying an appropriate data structure. The adjacency sets 
are stored as linked lists sorted into increasing order. The element of the Hst 
Adj(0 which represents edge Vi Vj will have four fields containing;, CLASS(i,7), 
pointer to CLASSO, 0» and pointer to next element on Adj(0 (see Figure 
5.11). The storage requirement for this data structure is 0(| F | + |£|), and if 
sorting the lists is done using Algorithm 2.1, then the entire initialization of 
the data structure can be accompHshed in linear time. 
The crucial factor in the analysis of our algorithm is the time required to 
access or assign the CLASS function. Ordinarily finding CLASS(f, m) could 
take 0(di) steps by scanning Adj(0, but if a temporary pointer happened to 
be in the neighborhood, then a reference to CLASS(i, m) or CLASS(m, 0 
would take a fixed number of steps. Consider the first loop of EXPLORE(i,7). 
Two temporary pointers simultaneously scan Adj(0 and AdjO) looking for 
values of m which satisfy the condition in the for statement. Since the lists are 
sorted and thanks to these neighborly pointers, this loop can be executed in 
0(di + dj) steps. The second loop is done similarly; hence the time complexity 
of EXPLORE(f,7) is 0(J, + dj). 
2: r p T ^ 
3: hMl^H—HM-HrM 
4: MH|Tl"1 
HlliSZI 
Figure 5.11. An undirected graph, the transitive orientation generated by the scheme 
[(1, 2), (4, 3)] and its data structure after running the algorithm. 

132 
5. 
Comparability Graphs 
In the main program, a temporary pointer scans each adjacency hst 
successively in the for loop, implying a time complexity of 0( | £ |). Finally, the 
algorithm calls EXPLORE once for each edge or its reversal (both if their 
implication classes are not disjoint). Therefore, since 
Y (d, + dj) = 2J]df<2st 
di = 2d\E\, 
ViVjsE 
i=\ 
1 = 1 
it follows that the time complexity for the entire algorithm (including pre-
processing the input) is at most 0{d • | £ |). Thus we have proved the following: 
Theorem 5.33. Comparability graph recognition and finding a transitive 
orientation can be done in 0{d • |£|) time and 0{\V\ + \E\) space, where 6 
is the maximum degree of a vertex. 
The algorithm as presented in this section explores the edges in a depth-first 
search. Replacing each recursive call EXPLORE(x, y) by placing xy in a 
queue of edges to be explored would change the algorithm to breadth-first 
search. Some future application may lead us to prefer one over the other. 
7. 
Coloring and Other Problems on Comparability Graphs 
To any acyclic orientation F (not necessarily transitive) of an undirected 
graph G = (F, £) we may associate a strict partial ordering of the vertices, 
namely, x > y iff" there exists a nontrivial path in F from x io y. k height 
function h can then be placed on V as follows: h{v) = 0 if i; is a sink; otherwise, 
h(v) = 1 + m2ix{h(w)\vweF}. We have already seen, in Chapter 2, Exercise 
8, that the height function can be assigned in linear time using a recursive 
depth-first search. The function h is always a proper vertex coloring of G, 
but it is not necessarily a minimum coloring. The number of colors used will 
be equal to the number of vertices in the longest path of F. This is also equal 
to 1 + max{/i(z;) 11; e F} since we started at height (color) zero. A poor choice 
of F may result in an overly colorful coloring. However, the situation is 
guaranteed to be better if F happens also to be transitive. 
Suppose that G is a comparability graph, and let F be a transitive orienta-
tion of G. In such a case, every path in F corresponds to a chque of G because 
of transitivity. Thus, the height function will yield a coloring which uses 
exactly co(G) colors, which is the best possible. Moreover, since being a 
comparability graph is a hereditary property, we find that a;(G^) = %(G^) for 
all induced subgraphs G^ of G. This proves the following result. 

7. 
Coloring and Other Problems 
133 
Theorem 5.34. 
Every comparability graph is a perfect graph. 
Theorem 5.34 coupled with the Perfect Graph Theorem 3.3 implies that the 
stability number of a comparability graph is equal to the clique cover number 
of the graph. This proves the following classical result. 
Theorem 5.35 (Dilworth [1950]). Let (X, <) be a partially ordered set. 
The minimum number of linearly ordered subsets (usually called chains) 
needed to partition X is equal to the maximum cardinality of a subset of X 
having no two members comparable (usually called an antichain). 
Many proofs of Dilworth's theorem can be found in the literature. Among 
them, those of Fulkerson [1956] and Perles [1963] seem most elegant. The 
reader is referred also to Dilworth [1950], Pretzel [1979], Trotter [1975], and 
Tver berg [1967]. Greene and Kleitman [1976] have recently extended 
Dilworth's theorem to more general partitions of a poset into chains. Some 
related references include Greene [1974, 1976], Griggs [1979], and Hoffman 
and Schwartz [1977]. 
We direct our attention next to some algorithmic aspects of problems on 
comparabihty graphs. In Section 5.6 we showed that a transitive orientation 
F could be constructed for a comparability graph G in 0(de + n) steps, where 
3 is the maximum degree of a vertex, e is the number of edges, and n is the 
number of vertices. From the transitive orientation F we can assign a mini-
mum coloring of G using the height function in 0(n + e) additional steps. 
At the same time a maximum clique could also be calculated. We shall il-
lustrate this by solving a slightly more general problem. 
MAXIMUM 
WEIGHTED 
CLIQUE. 
Instance: An undirected graph G and an assignment of a weight w{v) to each 
vertex v. 
Question: Find a clique of G for which the sum of the weights of its vertices is 
largest possible. 
If all vertices have the same weight, then the problem is reduced to the 
usual problem of finding a clique of maximum cardinality. In general the 
MAXIMUM WEIGHTED CLIQUE problem is NP-complete, but when 
restricted to comparability graphs it becomes tractable. 
Algorithm 5.4. 
Maximum weighted clique of a comparability graph. 
Input: A transitive orientation F of a comparability graph G = (V, E) and 
a weight function w defined on V, 
Output: A clique K of G whose weight is maximum. 

134 
5. 
Comparability Graphs 
procedure EXPLORE(r): 
if Adj(y) = 0 then 
W{v) = w{v); 
POINTERW^A; 
return;; 
for all jc 6 Adj(i') do 
if JC is unexplored then 
EXPLORE(jc); 
end for all; 
select y e Adj(?;) such that W{y) = max{ Wix) \x e Adj{v)}; 
W(v)^ 
w{v) -\- W{y); 
FOmTER{v) 
^ y; 
return 
end 
Figure 5.12. 
Method: We use a modification of the height calculation technique employing 
the recursive depth-first search procedure EXPLORE in Figure 5.12. To 
each vertex v we associate its cumulative weight W(vX which equals the 
weight of the heaviest path from v to some sink. A pointer is assigned to v 
designating its successor on that heaviest path. Lines 4-10 calculate K once 
the cumulative weights are assigned. The algorithm is given as a procedure. 
procedure MAXWEIGHT CLIQUE(I/,F): 
1. for all y e K do 
2. 
if V is unexplored then 
3. 
EXPLORE (y); 
end for all; 
4. 
selecty eVsuch 
that W{y) = max{ W(v) \VE V}; 
5. 
K^{y}; 
6. 
V*-POINTER Cy); 
7. 
whiley ^ Ado 
8. 
K^Ku{y}; 
9. 
> ' ^ POINTER (y);; 
10. return K; 
end 
Proving the correctness of Algorithm 5.4 and displaying an implementation 
whose complexity is hnear in the size of the graph (assuming that F is provided 
to the algorithm in the proper data structure) are left as exercises for the 
reader. 
We conclude with an interesting polynomial-time method for finding 
a(G), the size of the largest stable set of a comparability graph G. We trans-
form a transitive orientation {V, F) of G into a transportation network by 
adding two new vertices s and t and edges sx and yt for each source x and 
sink y of F. Assigning a lower capacity of 1 to each vertex, we initialize a 

8. 
Dimension of Partial Orders 
135 
compatible integer-valued flow and then call a minimum-flow algorithm. 
The value of the minimum flow will equal the size of the smallest covering of 
the vertices by cliques, which in turn will equal the size of the largest inde-
pendent set since every comparability graph is perfect. Such a minimum-
flow algorithm can run in polynomial time. (See Figure 2.1 for the complex-
ities of various maximum-flow algorithms.) 
8. 
The Dimension of Partial Orders 
Szpilrajn [1930] first noted that any partial order {X, P) could always be 
extended to a linear ordering L of X. In Section 2.4 we called such a linear 
extension a topological sorting. Let J^(P) denote the collection of all linear 
extensions of P. Any subset if ^ '^(P) satisfying f]^^^^ L = P is called a 
realizer of P, and its size is | if |. The intersection is that of sets of ordered 
pairs, that is, 
abe f]L' >abEL 
for every Le Sf. 
Clearly, if (P) itself is a realizer of P. We define the dimension of P, dim P, 
to be the size of the smallest possible realizer for P. Such a realizer is called a 
minimum realizer for P. The notion of dimension of a partial order first 
appeared in Dushnik and Miller [1941]. 
Examples. The partial order P whose Hasse diagram is illustrated in 
Figure 5.13 has dimension 2. A minimum realizer for P is also shown. Notice 
c' 
d' 
e' 
b\ 
a' 
f 
e 
d 
c 
b 
X 
a 
Figure 5.13. A partial order P of dimension 2. We have P •• 
f 
c 
d 
e 
b 
a 
f'\ 
e' : 
d' : 
c' \ 
4 b'}-
* a' 

136 
5. 
Comparability Graphs 
c' 
b' 
a' 
VA 
a 
b 
c 
a 
9 0 
• c 
b' 
k c 
k a 
c 
k a 
k b 
c' 
k a' 
k b 
b 
k c 
k a 
a 
k b 
k c 
Figure 5.14. A partial order P of dimension 3. We have P •• 
two linear orders be insufficient to realize P'l 
Lj r\ L2 r\ L3. Why would 
that the subposet F which is circled also has dimension 2 and that it must 
appear above element a in one of the linear orders and below element a in 
the other. Figure 5.14 shows the Hasse diagram of a partial order whose 
dimension is 3 (see Exercise 16). 
Lemma 5.36. Let (X, P) be a poset. For each 7 ^ X, we have 
dim Py < dim P. 
Proof. Clearly, restricting the linear extensions in a realizer if of P to the 
elements of Y yields a realizer (not necessarily minimum) of Py. Choosing if 
to be minimum for P we obtain the result. 
| 
Theorem 5.37 (Hiraguchi [1951]). Let P = Po[Pi, P2, • • •, i'J be the 
composition of disjoint partial orders (X,, Pf) (0 < i < k). Then 
dim P = max{dim PJO < i < k}. 
Proof. For each i, let L^ 1, L, 2, • •, Li,m be a realizer for P,, where 
m = max{dim PJi = 0, 1,..., k}. Define 
A, 
^ 0 , j L ^ l , j» ^ 2 , j? 
• • 5 ^kjJ-
Then {A^ 1; = 1, 2,..., m} is a realizer of P, so dim P < m. 
Next, observe that P contains each of the Pf as a subposet. (To obtain PQ 
take a set of representatives from X^, ..., Xj,.) Hence, by Lemma 5.36, 
m < dim P. 
| 
As noted earher, the dimension of a partial order was introduced by Dush-
nik and Miller [1941]. They showed that there exist partial orders of dimen-
sion d for all positive integers d, and they gave the first characterization of the 
posets of dimension 2. We shall briefly mention some other known results on 
dimension theory. A special bibUography on the subject appears at the end of 
this chapter. In addition, W. T. Trotter is currently completing a book on the 
subject. 

8. 
Dimension of Partial Orders 
137 
Figure 5.15. The Hasse diagram of the crown Bj. 
Let S be a nonempty set and let ^(S) denote its power set ordered by inclu-
sion. Komm [1948] proved that dim ^(S) = \S\. Hiraguchi [1951] showed 
that dim P < | | X | for any partial order (X, P) and gave examples of posets 
for which equahty holds. Another proof of this result can be found in Bogart 
[1973]. 
Sedmak [1952-1954] investigated the poset P(n) consisting of the empty 
set and the points, lines, faces, etc., of a polyhedron n in U!". He proved the 
following implications. 
(1) If 71 is a polygon in U^, then dim P(n) = 3. 
(2) If TT is a polyhedron in IR^, then dim P{n) > 4, with equality holding 
for regular polyhedra, pyramids, prisms, and their duals in IR"^. 
(3) There exist polyhedra in U^ with arbitrarily high dimension. 
This problem was originally posed by Kurepa [1951]. 
Ducamp [1967] showed that finding a minimum realizer for a partial order 
is equivalent to a certain bipartite covering problem. However, for all but 
small posets the method is intractable. 
Let G be a connected undirected graph, and let P{G) denote the collection 
of connected induced subgraphs of G ordered by inclusion. Trotter and Moore 
[1976a] proved that dim P(G) equals the number of nonarticulation vertices 
of G. (A nonarticulation vertex is one whose removal from G leaves it con-
nected.) This result generalizes a result of Leclerc [1976], namely, the dimen-
sion of the collection of subtrees of a tree T ordered by inclusion equals the 
number of leaves of T. The special case of dim P(G) = 2 was done by Dushnik 
and Miller [1941]. 
Trotter [1974a] studied the class of partial orders called crowns, obtaining 
an exact formula for their dimension. Briefly, let B^ be a poset on 2m elements 
split into an incomparable set {XQ, Xj,..., x^_ J and another incomparable 
set {yo, ^ 1 , . . .^ym-i} with Xf j^-e Bl for) = / + 1, / -f 2,..., / + / (addition 
modulo m) (see Figure 5.15). Trotter proved that for 0 < / < m and m > 3 
dim Bl, = [2m/(m - / + 1)]. 

138 
5. 
Comparability Graphs 
Baker, Fishburn, and Roberts [1972] used the family {5^}^>3 to show that, 
for any n > 1, the collection of all posets of dimension <n is not axiomatiz-
able by a sentence in first-order logic and cannot be characterized by a finite 
collection of forbidden subconfigurations. 
Ore [1962] observed that the dimension of a partial order could be viewed 
in another, equivalent manner. The points in the Euclidean space U!" of 
dimension k can be partially ordered in a natural way: (x^, X2, ..., x j < 
(yi» yi^ • "^ yk) iff ^i ^ yi for ^^^h l Then the dimension of a poset P is the 
smallest nonnegative integer k for which P can be embedded in U^. In some 
sense this justifies the choice of the term dimension for partial orders. 
Rabinovitch [1973, 1978a] has shown that the dimension of a semiorder 
is at most three. Semiorders arise naturally in psychology* and are discussed 
in Chapter 8. Kelly [1977] and Trotter and Moore [1976b] have character-
ized all posets of dimension 3. 
Application. Let (X, P) be a partially ordered set, perhaps obtained as the 
transitive closure of an acyclic graph, and let \X\ = n. The dim P may be 
regarded as the minimum number k of attributes needed to distinguish be-
tween the comparability and incomparabihty of pairs from X. The technique 
is the following: To each item XEX V/Q associate a /c-tuple (xj, X2,..., x^) 
6 U!", where x^ is the relative position of x in L, and if = {LJ is a minimum 
realizer of P. In such a setup, (X, P) would be stored using 0(kn) storage 
locations, and a query of the form "Is xyePV" will require at most k com-
parisons. This technique is advantageous when n is large and k is very small 
provided that the preprocessing needed to obtain a minimum realizer is not 
too expensive. This is always the case when dim P < 2.1 
Theorem 5.38 (Dushnik and Miller [1941]). 
Let G be the comparabihty 
graph of a poset P. Then dim P < 2 if and only if the complementary graph 
G is transitively orientable. 
Proof. Let F be a transitive orientation of G. It is easy to show that 
j ^ = {P + F, p + F " ^} is a realizer of P. Conversely, if ^ = {L^, L2} is any 
realizer of P, then F = L^ — P = (L2 — P)~^ is a transitive orientation of 
G. For, suppose ab, bceF but ac ^ F. The transitivity of Lj implies that acG P; 
similarly, the transitivity of L2 impUes that ca G P, a contradiction. 
| 
* Some psychologists believe that preference is based on a single criterion with some degree 
of fuzziness; this viewpoint is modeled in Section 8.5. Other psychologists believe that the brain 
is actually comparing multiple criteria; this viewpoint is modeled by the realizers described in 
this section. 
t,To date the complexity of computing dim P for an arbitrary poset P is unknown. It may or 
may not be NP-complete. 

Exercises 
139 
From the preceding theorem it follows that two partial orders which have 
the same comparability graph either both have dimension < 2 or both have 
dimension > 2. A stronger result holds, which we shall now present. 
Theorem 5.39 
(Trotter, Moore, and Sumner [1976]). If two partial 
orders P and Q have the same comparability graph G, then dim P = dim Q. 
Proof. The theorem is certainly true for posets of one element. We 
proceed by induction. Let (AT, P) and (X, Q) be partial orders having the same 
comparability graph G, and let us assume that for all proper subsets Y of X, 
dim QY = dim Py There are two cases to consider. 
Case 1: G is indecomposable. In this case. Corollary 5.13 implies that G is 
UPO. Therefore, either P = Q or P = Q-\ 
both implying that dim P = 
dim Q. 
Case 2: G is decomposable. Let G = GRIGV,, 
. . . , GyJ be a proper de-
composition of G. By Corollary 5.7, P = PRIPV,, 
• • • , ^ K J and Q = 
QRLQVI^ • • • 5 QvJ' Applying Theorem 5.37 and the induction hypothesis, 
we can obtain 
dim P = max{dim P^, dim Py,,..., 
dim Pp.J 
= max{dim QR, dim Qy^, •.., dim QyJ 
= dim e 
I 
Theorem 5.39 also appears in Gysin [1977]. 
In a personal communication, Richard Stanley has repc^rted that two 
partial orders P and Q having the same comparabihty graph also have the 
same number of linear extensions, i.e., | J^(P) | = | ^(Q) \. His proof is based 
on the results of Section 5.3. 
EXERCISES 
1. 
(i) Prove that the forcing relation F* is an equivalence relation, 
(ii) 
Prove that the following properties hold: 
ab F a'b' obaT 
b'a' 
abr*a'b'obar*b'a' 
2. 
The complete graph K2 has two implication classes. Give a formula for 
|j^(XJ|forn> 2. 
3. 
Which of the graphs in Figure 5.16 are comparability graphs ? How many 
implication classes and color classes do they have? 

140 
5. 
Comparability Graphs 
SAHM 
Figure 5.16. 
4. 
Let G be a connected comparability graph whose complement G is con-
nected and contains no induced subgraph isomorphic to K^^. Prove that 
G is UPO. [Hint: Use Theorem 5.12 (Aigner and Prins [1971]).] 
5. 
Prove the following result for an undirected graph G. If F^ and F2 are 
transitive orientations of G and G, respectively, then F^ -I- F2 is a transitive 
tournament. 
6. 
Draw the graph G = HQIHI, H2, H^, / / J for the graphs in Figure 5.17. 
Verify that it has 16 color classes: 9 within the internal factors, 6 among the 
external edges connecting H^ with Hj, and 1 consisting of the remaining 
external edges. Prove that G has 1440 transitive orientations. 
Y" ^ i V V 
Figure 5.17. 
7. Show that if an undirected graph G has no induced subgraph isomorphic 
to the path P4, then both G and G are comparability graphs. 
8. 
Verify that the graph in Figure 5.18 has four color classes partitioned 
into two maximal multiplexes of rank 1 and 2, respectively. Use the decompo-
sition algorithm of Section 5.4 to obtain a G-decomposition of this graph. 
(One solution is given in Appendix D.) Is this graph a comparability graph? 
Figure 5.18. 
9. Calculate r(G) for the graphs in Exercises 3, 6, and 8. 
10. Let a(G) be the stability number of an undirected graph G = (V, E). 
Prove that r{G) <\V\- 
a(G) (Golumbic [1977a]). 

Exercises 
141 
11. 
A binary relation R is vacuously transitive if R^ = 0. (Vacuously 
transitive relations have been studied by Sharp [1973].) Prove that an un-
directed graph has a vacuously transitive orientation if and only if it is 
bipartite. 
12. Prove that every transitive orientation of a comparability graph G is 
obtainable from some G-decomposition of G. 
13. 
Let G = (K, £) be an undirected graph, and consider the equivalence 
relation ^, defined on V as follows: 
a ^ a 
iflf 
Adj(a) = Adj(a'). 
By irreflexivity, equivalent vertices are not adjacent. We form the quotient 
graph G = (K, £) by merging equivalent vertices. Formally, let V be the set 
of all equivalence classes under ^ , and let a denote the ^ -class containing 
the vertex a. For any subset of edges A ^ E^NQ define 
A = {ab\abe A}. 
(i) 
Prove that ab e E o ab e E. Give an example of a graph G and a 
subset of edges A such that cdeA but cd^A for some edge cd. 
(ii) 
Prove that the following conditions are equivalent: 
(1) ab = cd, 
(2) a ^ c and b ^ d, 
(3) a = c and b = d. 
(iii) 
Prove that (l)-(3) above imply that ab F* cd but not conversely 
(Golumbic [1977b]). 
14. Let G = (V, E) be an undirected graph and let G = (V, E) be its quotient 
graph as defined in Exercise 13. Prove the following. 
(i) IfAe Jf(GX then A e J(G\ 
(ii) If [^1, ^2 9 • • •»^k] is a scheme for G with corresponding G decomposi-
tion ^1 + ^2 + • • • + B;,, then [e^, |2^ • • •» ^J is a scheme for E with cor-
responding G-decomposition 5^ 4- S2 + 
• + 5^. 
(iii) If (F, F) is a transitive orientation of G, then (F, F) is a transitive 
orientation of G. 
(iv) 
Every implication class, scheme, G-decomposition, and transitive 
orientation of G is of the form indicated in (i)-(iii) (Golumbic [1977b]). 
15. Prove that Algorithm 5.4 correctly computes a maximum weighted 
clique of a comparability graph. Show that the algorithm can be implemented 
to run in linear time in the size of the graph. 
16. Prove that the partial order in Figure 5.14 has dimension 3. 
17. Let g be a subset of R'', and for 1 < / < /c let Q^ consist of those numbers 
which appear as the fth coordinate in some /c-tuple in g. Consider the natural 
partial order on Q as defined in Section 8. 

142 
5. 
Comparability Graphs 
(i) 
Show that if Q is the Cartesian product Q = Qi x Q2 x " x Q^and 
\Qi\ > 2 for each i, then dim Q =^ k. 
(ii) Prove Komm's theorem, namely, that dim ^(S) = /c for a set S. 
18. Complete the proof of Theorem 5.38. 
19. A partial order (X, P) is an interval inclusion order if X can be put into 
one-to-one correspondence with a family {Ix}xex of intervals on a linearly 
ordered set such that 
X < y iff I^ cz Iy 
(Vx, y e X). 
Prove the following: dim P < 2 if and only if P is an interval inclusion order 
(Dushnik and Miller [1941]). 
20. 
Let G = (F, £) be an undirected graph. Show the following statements 
are equivalent : 
(i) 
G has a transitive orientation whose Hasse diagram is a rooted tree; 
(ii) 
G is a comparabihty graph and the Hasse diagram of every transitive 
orientation of G is a rooted tree; 
(iii) if a, b, c, deV 
are distinct vertices satisfying ab, be, cdG£, then 
either aceE or bdeE; 
(iv) 
G contains no induced subgraph isomorphic to C4 or P4. 
Give an example of a comparability graph which is triangulated and whose 
complement is a comparability graph but which fails to satisfy the conditions 
above (Wolk [1962, 1965]). Arditti [1975b] has investigated comparability 
graphs whose Hasse diagram is a tree. 
21. 
Show that the leaves of a rooted tree can be hnearly ordered so that the 
set of decendent leaves of any vertex occur consecutively. Use this result to 
show that any graph G which is the comparability graph of a rooted tree is 
also an interval graph. 
22. If Bi + S2 + • • • + Sfc is a G-decomposition of an undirected graph 
G = (F, E), then S^ -h • • • -h Bj is called a partial G-decomposition for each 
7 = 0, 1, ..., k. Show that the subgraphs of G obtained as partial G-de-
compositions (including 0 and E) form a lattice. Show that this lattice is 
modular but not necessarily distributive. 
Bibliography 
General References 
Aigner, Martin 
[1969] Graphs and partial orderings, Monatsh. Math. 73, 385-396. MR41 #1561. 
Discusses minimal noncomparability graphs and when the line graph L{G) is a com-
parability graph. 

Bibliography 
143 
Aigner, Martin, and Prins, Geert 
[1971] 
Uniquely partially orderable graphs, /. London Math. Soc. 2 3, 260-266. 
MR43 #1866. 
A connected comparability graph whose complement is connected and does not 
contain an induced AT, 3 is UPO. 
Arditti, Jean-Claude 
[1973a] Hamiltonisme et pancychsme dans les graphes de comparabilite d'arbres orientes, 
Colloq. sur la Theorie des Graphes, Bruxelles, 1973, Cahiers Centre Etudes Rech. Oper. 
15,265-284. MR50 #9644. 
[1973b] Denombrement des arborescences dont le graphe de comparabilite est Hamiltonien, 
Discrete Math. 5, 189-200. MR47 #4848. 
Using the results of Arditti and Cori [1970] the author gives a method for calculating 
the number of arborescences with n points. Using Polya's method he obtains a 
generating function. 
[1975a] Cheminements dans le graphe de comparabilite d'un arbre partition des sommets en 
cycles, Cahiers Centre Etudes Rech. Oper. 17, 111-116. MR53 #5344. 
Extends results of Arditti and Cori [1970]. 
[1975b] Graphes de comparabilite d'arbres et d'arborescences. These d'Etat, Publ. Math. 
Orsay No. 127-7531. 
[1976a] Graphes de comparabilite et dimension des ordres. Note de recherches CRM 607, 
Centre Rech. Math. Univ. Montreal. 
[1976b] Partially ordered sets and their comparability graphs, their dimension and their 
adjacency, Proc. Colloq. Int. CNRS., Problemes Combinatoireset Theorie des Graphes, 
Orsay, France. 
Arditti, Jean-Claude, and Cori, Robert 
[1970] 
Hamiltonian circuits in the comparability graph of a tree, in "Combinatorial Theory 
and its Applications I," Proc. Colloq. BalatonfUred, 1969, pp. 41-53. North-Holland, 
Amsterdam. MR46 #3361. 
Arditti, Jean-Claude, and de Werra, D. 
[1976] A note on a paper by D. Seinsche, J. Combin. Theory B 21, 90. MR54 #2510. 
Bryant, V. W., and Harris, K. G. 
[1975] Transitive graphs, J. London Math. Soc. Ser. 2 11, 123-128. MR55 #5476. 
The authors rediscover many of the results of Gilmore and Hoffman [1964] and 
Ghouila-Hourifl962]. 
Dilworth, R. P. 
[1950] A decomposition theorem for partially ordered sets, Ann. Math. Ser. 2 51, 161-166. 
MRU, p. 309. 
Even, Shimon 
[1973] 
"Algorithmic Combinatorics," Macmillan, New York. MR49 #48. 
Even, Shimon, Pnueli, Amir, and Lempel, Abraham 
[1972] Permutation graphs and transitive graphs. J. Assoc. Comput. Mach. 19, 400-410. 
MR47 #1675. 
Filippov, N. D. 
[1968] (T-isomorphisms of partially ordered sets (Russian), Ural. Gos. Univ. Mat. Zap. 6, 
71-85. MR42 #4452. 
Fulkerson, D. R. 
[1956] Note on Dilworth's decomposition theorem for partially ordered sets, Proc. Amer. 
Math. Soc. 7, 701-702. MR17 #1176. 

144 
5. 
Comparability Graphs 
Gallai, Tibor 
[1967] Transitiv orientierbare graphen, Acta Math. Acad. Sci. Hungar. 18, 25-66. MR36 
#5026. 
Contains many results on the structure of comparability graphs. 
Ghouila-Houri, Alain 
[1962] Caracterisation des graphes non orientes dont on peut orienter les arretes de maniere 
a obtenir le graphe d'une relation d'ordre, C.R. Acad. Sci. Paris 254, 1370-1371. 
MR30 #2495. 
Gilmore, Paul C , and Hoffman, Alan J. 
[1964] A characterization of comparability graphs and of interval graphs, Canad. J. Math. 
16, 539-548; abstract in Int. Congr. Math. (Stockholm), 29 (A) (1962). MR31 #87. 
Golumbic, Martin Charles 
[1975] Comparability graphs and a new matroid, extended abstract, Proc. Conf. Algebraic 
Aspects oj Combinatorics, Univ. Toronto, January 1975, "Congressus Numeran-
tium," XIII, Utilitas Math., Winnipeg, pp. 213-217. MR53 # 10653. 
[1976] 
Recognizing comparability graphs in SETL, SETL Newsletter No. 163, Courant 
Institute, New York Univ. 
[1977a] Comparability graphs and a new matroid, /. Combin. Theory B 22, 68-90. 
MR55 #12575. 
[1977b] The complexity of comparability graph recognition and coloring. Computing 18, 
199-208. 
Green, C. D. 
[1975] The detection of mistakes in the comparability graph of a tree, Proc. British Combin. 
Conf., Univ. Aberdeen, 1975, "Congress Numerantium," No. XV, pp. 255-260. 
Utilitas Math., Winnipeg. MR54 #5023. 
Greene, Curtis 
[1974] Sperner families and partitions of a partially ordered set, in " Combinatorics, Part 2," 
Proc. Adv. Study Inst, on Combinatorics, Nijenrode Castle, Breukelen, The Nether-
lands, July 1974 (M. Hall and J. H. VanLint, eds.), pp. 91-106. Mathematisch 
Centrum, Amsterdam. MR50 #9606. 
[1976] Some partitions associated with a partially ordered set. J. Combin. Theory A 20, 
69-79. MR53 #2763. 
Greene, Curtis, and Kleitman, Daniel J. 
[1976] The structure of Sperner ^-families, /. Combin. Theory A 20,41-68. MR53 # 2695. 
Griggs, J. R. 
[1979] On chains and Sperner ^-families in ranked posets, J. Combin. Theory (to be pub-
lished). 
Hoffman, Alan J., and Schwartz, D. E. 
[1977] On partitions of a partially ordered set, J. Combin. Theory B 23, 3-13. 
Johnson, C. S., Jr., and McMorris, F. R. 
[1979] A note on two comparability graphs, Bowling Green State Univ. Res. Report. 
Jung, H. A. 
[1968] Zu einem Satz von E. S. Wolk iiber die Vergleichbarkeitsgraphen von ordnungs-
theoretischen Baumen, Fund. Math. 53, 217-219. MR38 #3167. 
[1978] On a class of posets and the corresponding comparability graphs, /. Combin. Theory 
5 24,125-133. 
Generahzes some notions of Wolk. See also Johnson and McMorris [1979]. 
Perles, M. A. 
[1963] On Dilworth's theorem in the infinite case, Israel J. Math. 1 108-109. MR29 # 5758. 

Bibliography 
145 
Pnueli, Amir, Lempel, Abraham, and Even, Shimon 
[1971] Transitive orientation of graphs and identification of permutation graphs, Canad. 
J. Math. 23, 160-175. MR45 # 1800. 
Pretzel, Oliver 
[1979] Another proof of Dilworth's decomposition theorem. Discrete Math. 25, 91-92. 
Sankoff, David, and Sellers, Peter H. 
[1973] Shortcuts, diversions and maximal chains in partially ordered sets. Discrete Math. 4, 
287-293. MR47 #1690. 
Contains some interesting applications of posets to molecular genetics, critical path 
scheduling, bipartite graph theory, and traffic routing. 
Seinsche, D. 
[1974] On a property of the class of w-colorable graphs, J. Combin. Theory B 16, 191-193. 
MR49 #2448. 
A graph which does not contain a chain of length 3 (i.e., P4) without chords is perfect. 
As pointed out by Arditti and deWerra [1976], this is immediate from Wolk [1962, 
1965]. 
Sharp, Henry, Jr. 
[1973] Enumeration ofvacuously transitive relations. Discrete Math. 4,185-196. MR47 #47. 
Shevrin, L. N., and FiHppov, N. D. 
[1970] Partially ordered sets and their comparability graphs, Siberian Math. /. 11, 497-509. 
MR42 #4451. 
Stanley, Richard P. 
[1973] A Brylawski decomposition for finite ordered sets, Discrete Math. 4, 77-82. MR46 
#8918. 
Trotter, WiUiam T., Jr. 
[1975] A note on Dilworth's embedding theorem, Proc. Amer. Math. Soc. 52, 33-39. 
MR51 #10188. 
Trotter, William T., Jr., Moore, John I., Jr., and Sumner, David P. 
[1976] The dimension of a comparabiHty graph, Proc. Amer. Math. Soc. 60, 35-38. 
MR54 #5062. 
Tverberg, Helge 
[1967] On Dilworth's decomposition theorem for partially ordered sets, J. Combin. Theory 
3,305-306. MR35 #5366. 
Wolk, E. S. 
[1962] The comparability graph of a tree, Proc. Amer. Math. Soc. 13,789-795. MR30 # 2493. 
[1965] A note on the comparabiHty graph of a tree, Proc. Amer. Math. Soc. 16, 17-20. 
MR30 #2494. 
The Dimension of Partial Orders 
Adnadevic, DuSan 
[1961] Dimenzije neikih razvrstanih skupova sa primenama. Bull. Soc. Math. Phys. Serbie 
13, 49-106, 225-262. R. Z. Mat 1963 #9A224, 1964 #2A392. 
[1964] On the dimension of the product of partially ordered sets (Serbo-Croatian, English 
summary), Mat. Vesnik 1 (16), 9-12. MR34 #7413. 
[1966] On the representations of finite partially ordered sets (Serbo-Croatian, Enghsh 
summary) Mat. Vesnik 3 (18), 17-21. MR35 #1510. 

146 
5. 
Comparability Graphs 
Arditti, Jean-Claude 
[1976a] Graphes de comparabilite et dimension des ordres, Note de recherches CRM 607, 
Centre de Recherche Mathematique de I'Universite de Montreal. 
[1976b] Partially ordered sets and their comparability graphs, their dimension and their 
adjacency, Proc. Colloq. Int. CNRS, Problemes Combinatoires et Theorie des Graphes, 
Orsay, France. 
Baker, K. A., Fishburn, P. C, and Roberts, F. S. 
[1970] A new characterization of partial orders of dimension two, Ann. N. Y. Acad. Sci. 175, 
23-24. MR42 #140. 
[1972] Partial orders of dimension 2, Networks 2, 11-28. MR46 # 104. 
Bogart, Kenneth P. 
[1973] 
Maximal dimensional partially ordered sets I. Hiraguchi's theorem, Discrete Math. 5, 
21-31. MR47 #6562. 
Bogart, Kenneth P., and Trotter, William T., Jr. 
[1973] 
Maximal dimensional partially ordered sets II. Characterization of 2«-element 
posets with dimension n. Discrete Math. 5, 33-43. MR47 #6563. 
Bogart, Kenneth P., Rabinovitch, I., and Trotter, William T., Jr. 
[1976] A bound on the dimension of interval orders, /. Combin. Theory A 21, 319-328. 
MR54 #5059. 
Ducamp, A. 
[1967] Sur la dimension d'un ordre partiel, in "Theory of Graphs," Proc. Symp. Rome 
(P. Rosenstiehl, ed.), pp. 103-112. Gordon & Breach, New York. MR36 #3684. 
Dushnik, Ben 
[1950] Concerning a certain set of arrangements, Proc. Amer. Math. Soc. 1, 788-796. 
MR12, p. 470. 
Dushnik, Ben, and Miller, E. W. 
[1941] Partially ordered sets, Amer. J. Math. 63, 600-610. MR3, p. 73. 
Ginsburg, S. 
[1954] On the /^-dimension and the ^-dimension of partially ordered sets, Amer. J. Math. 
76, 590-598. MR15, p. 943. 
Gysin, R. 
[1977] Dimension transitiv orientierbaren graphen, Acta Math. Acad. Sci. Hungar. 29, 
313-316. 
Harzheim, E. 
[1970] Ein Endlichkeitssatz iiber die Dimension teil weise geordneter Mengen, Math. 
Nachr. 46, 183-188. MR43 #113. 
Hiraguchi, Toshio 
[1951] On the dimension of partially ordered sets, Sci. Rep. Kanazawa Univ. 1, 77-94. 
MR17,p. 19. 
[1953] A note on Mr. Komm's theorems, Sci. Rep. Kanazawa Univ. 2, 1-3. MR 17, p. 937. 
[1955] On the dimension of orders, Sci. Rep. Kanazawa Univ. 4, 1-20. MR17, p. 1045. 
[1956] On the A-dimension of the product of orders, Sci. Rep. Kanazawa Univ. 5, 1-5. 
MR20 #1638. 
Kelly, David 
[1977] The 3-irreducible partially ordered sets, Canad. J. Math. 29, 367-383. MR55 # 205. 
Kelly, David, and Rival, Ivan 
[1975] Certain partially ordered sets of dimension three, /. Combin. Theory A 18, 239-242. 
MR50 #12828. 
Kimble, R. 
[1973] Extremal problems in dimension theory for partially ordered sets, Ph.D. thesis, 
MIT, Cambridge, Massachusetts. 

Bibliography 
147 
Komm, H. 
[1948] On the dimension of partially ordered sets, Amer. J. Math. 70, 507-520. MRIO, p. 22. 
Kurepa, Georges 
[1950] Ensembles partiellement ordonnes et ensembles partiellement bien ordonnes, 
Acad. Serbe Sci. Publ Inst. Math. 3, 119-125. MR12, p. 683. 
[1951] ^'Teorija skupova," p. 205, Problem 16.8.1. Skolska Knjiga, Zagreb. MR12, p. 683. 
A textbook on set theory. 
Leclerc, B. 
[1976] Arbres et dimension des ordres, Discrete Math. 14, 69-76. MR52 # 7979. 
Moore, J. I., Jr. 
[1977] Interval hypergraphs and Z)-interval hypergraphs, Discrete Math. 17, 173-179. 
MR55 #10333. 
Novak, V. 
[1962] A note on a problem of T. Hiraguchi, Spisy Pfirod. Fak. Univ. Brno, 147-149. 
MR29 #4710. 
[1963] On the pseudodimension of ordered sets, Czech. Math. J. 13, 587-597. MR31 #4742. 
Novak, V. and Novotny, M. 
[ 1974] Abstrakte Dimension von Strukturen, Z. Math. Logik Grundlagen Math. 20,207-220. 
MR53 #2765. 
Ore, O. 
[1962] "Theory of Graphs," Section 10.4. Amer. Math. Soc. Colloq. Puhl. 38, Providence, 
Rhode Island. MR27 #740. 
Perfect, Hazel 
[1974] Addendum to a theorem of O. Pretzel, /. Math. Anal. Appl. 46, 90-92. MR49 # 156. 
Pretzel, Oliver 
[1967] A representation theorem for partial orders, J. London Math. Soc. 42, 507-508. 
MR35 #6588. 
[1977] On the dimension of partially ordered sets./. Combin. Theory A 22, 146-152. 
MR55 #206. 
Rabinovitch, Issie B. 
[1973] The dimension theory of semiorders and interval orders, Ph.D. thesis, Dartmouth. 
[1978a] The dimension of semiorders, J. Combin. Theory A 25, 50-61. 
[1978b] An upper bound on the dimension of interval orders, J. Combin. Theory A 25, 68-71. 
Sedmak, Victor 
[1952] Dimension des ensembles partiellement ordonnes associes aux polygones et polyedres 
(Serbo-Croatian, French summary), Hrvatsko Prirod. Drustvo. Glasnik Mat.-Fiz. 
Astronom. Ser. HI, 169-182. MR14, p. 783. 
[1953] Quelques applications des ensembles partiellement ordonnes, C.R. Acad. Sci. Paris 
236, 2139-2140. MR15, p. 50. 
[1954] Quelques applications des ensembles ordonnes. Bull. Soc. Math. Phys. Serbie 6, 
12-39, 131-153. MR18, p. 186. 
[1959] Sur les reseaux de polyedres «-dimensionnels, C.R. Acad. Sci. Paris 248, 
350-352. MR23A #1559. 
Szpilrajn, E. 
[1930] Sur I'extension de I'ordre partiel. Fund. Math. 16, 386-389. 
Trotter, William T., Jr. 
[1974a] Dimension of the crown S^, Discrete Math. 8, 85-103. MR49 # 158. 
[1974b] Irreducible posets with large height exist, J. Combin. Theory A 17, 337-344. 
MR50 #6935. 
[1974c] Some famihes of irreducible partially ordered sets, Univ. of South Carolina Math, 
Tech. Rep. 06A10-2. 

148 
5. 
Comparability Graphs 
[1975a] Inequalities in dimension theory for posets, Proc. Amer. Math. Soc. 41, 311-316. 
MR51 #5427. 
[1975b] A note on Dilworth's embedding theorem, Proc. Amer. Math. Soc. 52, 33-39. 
MR51 #10188. 
[1975c] Embedding finite posets in cubes, Discrete Math. 12, 165-172. MR51 #5426. 
[1976a] A forbidden subposet characterization of an order-dimension inequality. Math. Syst. 
Theory 10, 91-96. MR55 #7856. 
[1976b] A generahzation of Hiraguchi's: Inequality for posets, J. Combin. Theory A 20, 
114-123. MR52 #10515. 
[1977] Some combinatorial problems for permutations, Proc. 8th Southeastern Conf., on 
Combinatorics, Graph Theory and Computing. 
Trotter, William T., Jr., and Bogart, Kenneth P. 
[1976a] On the complexity of posets. Discrete Math. 16, 71-82. MR54 #2553. 
[1976b] Maximal dimensional partially ordered sets III: A characterization of Hiraguchi's 
inequaHty for interval dimension. Discrete Math. 15, 389-400. MR54 #5061. 
Trotter, WiUiam T., Jr., and Moore, J. I., Jr. 
[1976a] Some theorems on graphs and posets. Discrete Math. 15, 79-84. MR54 #5060. 
[1976b] Characterization problems for graphs, partially ordered sets, lattices and families of 
sets. Discrete Math. 16, 361-381. MR56 #8437. 
[1977] The dimension of planar posets, J. Combin. Theory B 22, 54-67. MR55 #7857. 
Trotter, William T., Jr., Moore, John I., Jr. and Sumner, David P. 
[1976] The dimension of a comparability graph, Proc. Amer. Math. Soc. 60, 35-38. 
MR54 #5062. 
Wille, Rudolf 
[1974] On modular lattices of order dimension two, Proc. Amer. Math. Soc. 43, 287-292. 
MR48 #8327. 
[1975] A note on the order dimension of partially ordered sets. Algebra Universalis 5, 
443-444. MR52 #13536. 

CHAPTER 6 
Split Graphs 
1. 
An Introduction to Chapters 6-8: 
Interval, Permutation, and Split Graphs 
An undirected graph G may possess one or more of these famiUar proper-
ties: 
Property C: G is a comparabiUty graph. 
Property C: G is a comparabihty graph (i.e., G is a cocomparability graph). 
Property T: G is a triangulated graph. 
Property T: G is a triangulated graph (i.e., G is a cotriangulated graph). 
These four properties are independent of one another. Examples of all 
16 possible combinations are given in Appendix F. 
Chapters 6-8 deal with the classes of graphs which have been characterized 
in terms of these four properties. In particular, we shall show the following: 
interval graphs = T -\- C; 
permutation graphs = C + C; 
split graphs = T + T. 
We begin our study with split graphs, which are defined in the next section. 
Chapters 6-8 are independent of one another; they may be read in any order 
without loss of continuity. 
2. 
Characterizing Split Graphs 
An undirected graph G = (F, £) is defined to be split if there is a partition 
K = 5 -f X of its vertex set into a stable set S and a complete set K. There is 
149 

150 
6. 
Split Graphs 
Figure 6.1. A split graph with one of its four partitions indicated. The other partitions are 
{S - 
{A-,}) + (/^ U {A-,}) for / = 1,2,3. 
no restriction on edges between vertices of S and vertices of K. In general, 
the partition V = S + K of a split graph will not be unique; neither will S 
(resp. K) necessarily be a maximal stable set (resp. clique). For example, the 
graph G in Figure 6.1 has four partitions, one of which is indicated. Notice 
also that \S\ = a(G) = 4 whereas 4 = |X| < (D{G) = 5; 5 is the only maxi-
mum stable set of G, and K u {xj (for i = 1, 2, 3) are the only maximum 
cliques. 
Since a stable set of G is a complete set of the complement G and vice versa, 
we have an immediate result. 
Theorem 6.1. An undirected graph G is a split graph if and only if its 
complement G is a split graph. 
The next theorem follows from the work of Hammer and Simeone [1977]. 
Theorem 6.2. 
Let G be a split graph whose vertices have been partitioned 
into a stable set S and a complete set K. Exactly one of the following con-
ditions holds: 
|X|=.a;(G) 
(i) 
|S| = a(G) and 
pv, —uyv^y 
(in this case the partition 5 + K is unique), 
(ii) 
|5| = a(G) and 
\K\ = a)(G) - l 
(in this case there exists anxeS 
such that K + {x} is complete), 
(iii) 
|5| = a ( G ) - l 
and 
\K\ = co(G) 
(in this case there exists ayeK 
such that S + {y} is stable). 

2. 
Characterizing Split Graphs 
151 
Proof. Since a stable set and a complete set can have at most one common 
vertex, it follows that a split graph has the sum a(G) + co(G) equal to either 
| K | o r | F | H- 1. 
If a(G) + (D{G) = I F I, then we are in case (i). Suppose, in this case, there 
is another partition V = S' + K'. Let {x} = S n K' and {y} = S' nK. If x 
and y are adjacent in G, then {x} + K is a clique of size co(G) + 1, which is 
impossible. If x and y are not adjacent in G, then {y} + 5 is a stable set of 
size a(G) + 1, which is impossible. Hence, the partition V = S + K must be 
unique. 
If a(G) + co(G) = I K| + 1, then we are in either case (ii) or case (iii). We 
will prove the claim in case (ii) only, case (iii) being analogous. Let | S | = a(G), 
IXI = (o{G) - 1 and let K' be a clique of size co(G). Since S + X is a partition 
and K' is larger than K,S n K' must be nonempty and therefore of cardinality 
L Let {x} = S n K\ it follows that K' = K -h {x}, which is complete. 
jj 
Theorem6.3 (Foldes and Hammer [1977b]). Let G be an undirected 
graph. The following conditions are equivalent: 
(i) G is a split graph, 
(ii) G and G are triangulated graphs, 
(iii) G contains no induced subgraph isomorphic to 2X2, C4, or C5. 
Proof, (i) => (ii) Let G = (F, £) have vertex partition V= S + K with 
S stable and K complete. Suppose G contained a chordless cycle C of length 
>4. At least one and at most two (adjacent) vertices of C would be in K. 
Both cases would imply that S contains a pair of adjacent vertices, a contra-
diction. Therefore, G must be triangulated. By Theorem 6.1, G is split, so G is 
triangulated. 
(ii) => (iii) Immediate. 
(iii) => (i) Let X be a maximum clique of G chosen (among all maximum 
cliques) so that Gy^j^ has fewest possible edges. We must show that S = 
V - Kis stable. 
Suppose, on the contrary, that G5 has an edge xy. By the maximality of X, 
no vertex of S could be adjacent to every member of X. Moreover, if both 
X and y were adjacent to every vertex of X with the exception of the same 
single vertex z, then K - {z} + {x} + {y} would be a complete set larger 
than X. Thus, there must exist distinct vertices u,veK 
such that xu$E and 
yv^ E. 
Since G contains neither an induced copy of 2X2 nor C4, it follows that 
exactly one of the edges xv or yu is in G. Assume, without loss of generality, 
that XV ^E and yu e E. For any w e X — {M, U}, '\{ yw^E and xw ^ £, then 
G|^ y j^^i ^ 2X2, whereas if yw^£ and xwe£, then G^^ ^^ „^j ^ C4. Thus, 

152 
6. 
Split Graphs 
y is adjacent to every vertex of X — {i;}, and K' = K — {v} -\- {y} is a 
maximal clique. 
Since Gy-K' can have no fewer edges than Gy-K has, it follows from the 
fact that X is adjacent to y but not to v that there exists a vertex t ^ y in 
V — K which is adjacent to v but not to y. Now tx must be an edge of G, for 
otherwise {t,x,y,v} 
would induce a copy of 2K2. Similarly, tu^E, 
for 
otherwise {t,x,y,u} 
would induce a copy of C4. However, this implies that 
{t, X, y, u, v} induces a copy of C5, a contradiction. Therefore, S = V — Kis 
stable, and G is a split graph. 
| 
A characterization of when a split graph is also a comparability graph 
appears in Chapter 9 (Theorem 9.7). 
3. 
Degree Sequences and Split Graphs 
A sequence A = [dj, ^2^ • • • ? ^ J of integers, n — \ > d^ > d2 > • -- > d„ 
> 0, is called graphic if there exists an undirected graph having A as its degree 
sequence. For example, the sequence [2,2,2,2] corresponds to the chordless 
4-cycle C4, while the sequence [2,2,2,2,2,2] corresponds to both IK^ and 
Cg. It is easy to construct sequences which are not graphic, such as [1,1,1] 
and [4,4,2,1,1]. 
A simple necessary condition for a sequence to be graphic comes from 
Euler's theorem: The sum Yj^i ^^st be even. However, as the preceding 
example shows, an even sum is not sufficient to insure graphicness. Two 
classical theorems characterizing graphic sequences will now be stated. 
Theorem 6.4 (Havel [1955], Hakimi [1962]). A sequence A of integers 
n — 1 > di > d2 > " ' > d„>Ois graphic if and only if the modified sequence 
A' = [^2 - 1,^3 - 1, . . . , d d i + i - hdd, + 
2,'"^d„'] 
(sorted into decreasing order) is graphic. 
Theorem 6.5 (Erdos and Gallai [I960]). A sequence of integers n- 
l>d^ 
> d2 > " ' > d„ > 0 is graphic if and only if 
n 
(i) 
Y, ^i is even, 
and 
(ii) 
Z di < r(r - 1) + 
^ 
min{r, dj, 
i = l 
i = r+l 
for r = 1, 2 , . . . , n — 1. 

3. 
Degree Sequences and Split Graphs 
153 
The inequality (ii) will be called the rth Erdos-Gallai inequality (EGI). 
Shortly, we shall give a characterization of split graphs in terms of these 
inequalities. We shall not prove Theorem 6.4 or Theorem 6.5 here since a 
very readable treatment can be found in Harary [1969, Chapter 6]. Both of 
these theorems suggest algorithms for testing whether or not a given sequence 
is graphic (Exercise 6). 
A third classical theorem on graphic sequences depends partly on the 
following observation. Let x, y, z, and w be distinct vertices of G with xy and 
zw edges of G and xz and yw nonedges of G. If we replace the two edges by 
the two nonedges, the resulting graph G' will have the same degree sequence 
as G (see Figure 6.2). Such a replacement will be called an interchange. A 
stronger result holds, which we now state. 
Remark 6.6. 
Provided that we allow graphs to have multiple edges, if 
two graphs have the same degree sequence, then each can be obtained from 
the other by a finite sequence of interchanges. 
A proof of Remark 6.6 can be found in Ryser [1963, Chapter 6, Theorem 
3.1] by applying his technique to the edges-versus-vertices incidence matrix 
ofG. 
A general question arises: What graph theoretic properties can be deter-
mined solely from the degree sequence? In Section 2.5 we remarked that 
transitive tournaments could be recognized by the in-degrees of the vertices. 
Also, a characterization of trees in terms of degree sequences is known. We 
will now discuss this problem as applied to split graphs. 
Let A = [t/i, t/2,.. •, ^ J be an integer sequence with n — 1 > d^ > d2 > 
" • > d„ > 0, and let C = [0,1,2,..., n — 1]. Comparing the decreasing 
sequence A with the increasing sequence C, let us draw attention to the po-
sition just prior to C overtaking A. Let m be the largest index / such that 
di > i — I. Thus, either m = n and A is the degree sequence of K„, or d^ > 
m — 1 and d^+i < m. 
The next result characterizes split graphs as those for which equality holds 
in the mth Erdos-Gallai inequality, where m is defined as above. 
^ T 
1 
1 
1 
1 
1 1 
z m 
T ^ 
1 
1 1 
— i . 
^-
X i 
Z K 
Figure 6.2. A solid line denotes an edge of G; a broken line denotes a nonedge of G. An 
interchange replaces the two edges with the two nonedges. 

154 
6. 
Split Graphs 
Theorem 6.7 (Hammer and Simeone [1977]). Let G = (V, E) be an 
undirected graph with degree sequence d^ > d2 > • - • > d„, and let m = 
m3.x{i\di > i — 1}. Then, G is a spHt graph if and only if 
m 
n 
Y, di = m(m- 
\)-^ 
X ^i-
i=l 
i = m+l 
Furthermore, if this is the case, then a>(G) = m. 
Proof. The theorem is true if G is a complete graph, so we may assume 
that d^> m — \ and d^+^ < m. Since A is nonincreasing, min{m, d^} = di for 
i > m -\- 1. Therefore, the mth EGl simplifies to 
m 
n 
s= Y.di<m(m- 
l)+ 
Y. di. 
(1) 
i= 1 
i = m + 1 
Let K denote the first m vertices of largest degree. The left summand of (1) 
splits into two contributions s = s^ -\- S2, where 
si= 
Y. \{zeK\xzeE}\ 
< m(m - 1), 
(2) 
xeK 
s,= 
Y.\y^K\xyeE}\ 
xeK 
= Y.\{xeK\xyeE\< 
t 
d^. 
(3) 
y^K 
i = rn + 1 
Equality holds in (2) if and only if K is complete. Equality holds in (3) if 
and only if F — X is stable. Therefore, if equality holds in (1), then G is a 
split graph. 
Conversely, assume that G := (F, E) is a split graph. By Theorem 6.2 we 
can partition Kinto a stable set S and a complete set K such that | K | = co(G). 
Every vertex in K has degree at least | X | — 1, and, since K is maximum, every 
vertex in S has degree at most \K\ — \. Therefore, we may assume that the 
vertices are ordered so that K = {v^,..., v^j^^} and S = {I^|A:| + i,.. •, v„}, where 
degi;,- = di. Moreover, d^j^^ > 1^1 - 1 and rf|x| + i < 1^1 - 1 < |X|, so 
oj(G) = \K\ = m. Finally, since K is complete and S = V — K is stable, we 
conclude that equality holds in (2) and (3) and therefore also in (1). 
| 
Corollary 6.8. 
If G is a split graph, then every graph with the same degree 
sequence as G is also a split graph. 
Remark. 
Hammer and Simeone [1977] investigated a more general 
problem on graphs. They define the splittance of an arbitrary undirected 
graph to be the minimum number of edges to be added or erased in order to 

Exercises 
155 
produce a split graph. Of course, split graphs are just those graphs whose 
splittance is zero. Their main result shows that the splittance depends only 
on the degree sequence of the graph, and is given by the expression 
- m(m - 1) - X ^^ + 
I. d, 
^ L 
i^fn 
i>m+l 
2 
where m and the di are as in Theorem 6.7. 
Those who have further interest in the topic of graphs and their degree se-
quences are encouraged to read the survey paper by Hakimi and Schmeichel 
[1978]. 
EXERCISES 
1. Give necessary and sufficient conditions for a tree to be a split graph. 
Prove that your answer is correct. 
2. 
Prove that the Hamiltonian circuit problem is NP-complete for split 
graphs. (Hint. Use the fact that the Hamiltonian circuit problem is NP-
complete for bipartite graphs.) 
3. 
How many nonisomorphic graphs are there with the following degree 
sequences: (i) 
[3,3,2,2,1,1], (ii) 
[5,5,5,4,3,2], (iii) 
[5,5,4,3,3,3,2,1] ? 
4. Give an example of two nonisomorphic split graphs having the same 
degree sequence. 
5. What is the splittance of graphs C„, K^ „, mK„, and P„? 
6. Give an 0{n) time algorithm for determining whether or not a nonin-
creasing integer sequence n — 1 > d^ > d2 > • • • > d„ > Ois graphic. Prove 
that your algorithm is correct and that its complexity is linear. 
7. 
Let A = [(^1,^2^ --^^J t)G an integer sequence, and define A = \_d^, 
^ 2 , . . . , 3J by the formula 
di = n - \ - d„-,+ i 
0' = l,...,n). 
Show that A is graphic if and only if A is graphic. What can you say about the 
graphs corresponding to A and A? 
8. 
Let m = max{i|t/, > / — 1} where n — \ > d^ > " - > d„ > 0. Show 
that if the mth EGI holds, then the rth EGI automatically holds for r = 
m — \,. ..,n (Hammer, Ibaraki, and Simeone [1978]). 
9. 
Prove Corollary 6.8 directly from Theorem 6.6. 
Research problem. Characterize those graphs which are uniquely deter-
mined up to isomorphism by their degree sequence. R. H. Johnson has solved 
this problem for trees; the solution is the class obtained in Exercise L 

156 
6. 
Split Graphs 
Bibliography 
Burkard, R., and Hammer, Peter L. 
[1977] On the Hamiltonicity of split graphs, Univ. of Waterloo, Dept. of Combinatorics 
and Optimization, Res. Report CORR 77-40. 
Erdos, Paul, and Gallai, Tibor 
[1960] Graphen mit Punkten vorgeschriebenen Grades, Mat. Lapok 11, 264-272. 
Foldes, Stephane, and Hammer, Peter L. 
[1977a] Split graphs having Dilworth number two, Canad. J. Math. 29, 666-672. 
MR57 #3005. 
[1977b] Split graphs, Proc. 8th Southeastern Conf. on Combinatorics, Graph Theory and 
Computing (F. Hoffman et al., eds.), Louisiana State Univ., Baton Rouge, Louisiana, 
311-315. 
[1978] The Dilworth number of a graph, Ann. Discrete Math. 2, 211-219. 
Hakimi, S. L. 
[ 1962] On the realizability of a set of integers as degrees of the vertices of a graph, SI A M J. 
AppL Math. 10, 496-506. MR26 #5558. 
Hakimi, S. L., and Schmeichel, E. F. 
[1978] Graphs and their degree sequences: A survey, in "Theory and Applications of 
Graphs," Lecture Notes in Math. 642, pp. 225-235. Springer-Verlag, Berlin. 
Hammer, Peter L., Ibaraki, T., and Simeone, B. 
[1978] Degree sequence of threshold graphs, Univ. of Waterloo, Dept. of Combinatorics and 
Optimization Res. Report CORR 78-10. 
Hammer, Peter L., and Simeone, Bruno 
[ 1977] The splittance of a graph, Univ. of Waterloo, Dept. of Combinatorics and Optimiza-
tion, Res. Report CORR 77-39. 
Hanlon, Phil 
[1979] 
Enumeration of graphs by degree sequence, J. Graph Theory 3, 295-299. 
Harary, Frank 
[1969] ''Graph Theory," Addison-Wesley, Reading, Massachusetts. Chapter 6. 
Havel, Vaclav 
[1955] A remark on the existence of finite graphs (Czech), Casopis Pest Mat. 80, 477-480. 
Ryser, Herbert J. 
[1963] "Combinatorial Mathematics," Carus Monograph No. 14, Chapter 6, Theorem 3.1. 
Math. Assoc, of America, Washington, D.C. 

CHAPTER 7 
Permutation Graphs 
1. 
Introduction 
In this chapter we consider a class of perfect graphs which has a large 
number of applications. Suppose TT is a permutation of the numbers 1,2,..., n. 
Let us think of n as the sequence [TT^, 713,..., TCJ, SO, for example, the permu-
tation n = [4,3,6,1, 5, 2] has Ui = 4, 7^2 = 3, etc. Notice that in~^)i, de-
noted here as nf \ is the position in the sequence where the number i can be 
found; in our example n^^ = 1,713 ^ = 2 , etc. 
We can construct an undirected graph G[n] from n in the following 
manner: G[7r] has vertices numbered from 1 to n; two vertices are joined by 
an edge if the larger of their corresponding numbers is to the left of the 
smaller in n (that is, they occur out of their proper order reading left to right). 
In our example, both 4 and 3 are connected to 1 since they are each larger 
and to the left of 1, whereas neither 5 nor 2 is connected to 1 (see Figure 7.1). 
The graph G\_7i] is sometimes called the inversion graph of n. 
More formally, if TC is a permutation of the numbers 1, 2 , . . . , n, then the 
graph G[7c] = (V, E) is defined as follows: 
F = { l , 2 , . . . , n } 
and 
ijeEo(i-j){nr' 
-ni^)<0. 
An undirected graph G is called a permutation graph if there exists a permuta-
tion n such that G = G[7i]. 
157 

158 
6 
Figure 7.1. The graph G[4, 3, 6, 1, 5, 2]. 
2. 
Characterizing Permutation Graphs 
Permutation graphs have many interesting properties. Notice what 
happens when we reverse the sequence K. Each pair of numbers which 
occurred in the correct order in n is now in the wrong order, and vice versa. 
Thus, the permutation graph we obtain is the complement of G\_7i]. In other 
words, if n^ is the permutation obtained by reversing the sequence TT, then 
G[7r^] = G[7r]. 
This shows that the complement of a permutation graph is also a permutation 
graph. 
Another property of the graph G[7r] (which you may have already guessed) 
is that it is transitively orientable. If we orient each edge toward its larger 
endpoint, then we will obtain a transitive orientation F. For, suppose ij e F 
and jk e F, then i <j < k and n[ ^ > nj'^ > n^^, which implies that ik e F. 
This result is only half of the story; we actually have the following: 
Theorem 7.1 (PnueH, Lempel, and Even [1971]). An undirected graph G 
is a permutation graph if and only if G and G are comparability graphs. 
Proof. Suppose G ^ G[7r]; then G is a comparability graph since G[7c] 
has a transitive orientation. Likewise, G is a comparability graph since 
G ^ 
Gln^l 
Conversely, let (K, F^) and (F, F2) be transitive orientations of G = (K, £) 
and G = (K, E), respectively. We claim that (K, F^ + F2) is an acyclic 
orientation of the complete graph (K, F + F). For suppose F^ + F2 had a 
cycle IVQ, Vi,V2,. . . , Vi,Vo] of the smallest possible length /. If / > 3, then 
the cycle can be shortened either by VQV2 or V2V0, contradicting minimality. 
If / = 3, then at least two of the edges of the cycle are in the same Ff, implying 
that Ff is not transitive. Thus (V,F^ + F2) is acyclic. Similarly (K, F^ ^ + F2) 
is acyclic. 

2. 
Characterizing Permutation Graphs 
159 
We conclude the proof by constructing a permutation n such that G = 
G[7r]. An acycHc orientation of a complete graph is transitive, and it deter-
mines a unique linear ordering of the vertices. (See Section 2.5 on transitive 
tournaments.) Consider the following procedure. 
Step I. Label the vert ices according to the order determined by F^ + F2'', 
namely, the vertex x of in-degree i — 1 gets label L(x) = /. 
Step 11. Label the vertices according to the order determined by Fj"^ + 
F2; namely, the vertex x of in-degree i — 1 gets label L{x) = i. 
Notice that 
xyeEo 
[L(x) - L{yy][L'(x) - L{yy] < 0, 
(1) 
since it is the edges of E which have their orientations reversed between steps I 
and IL This is the key to our argument. 
Step III. Define n as follows: For each vertex x, if L(x) = i, then 7Cf~ ^ = 
L'(x). The relationship is depicted in the commuting diagram below. 
{ 1 , 2 , . . . ,«} 
>{1,2, . . . , « } 
Therefore, by (1), TT is the desired permutation and L is the desired iso-
morphism. 
I 
Remark. In terms of the nomenclature of Section 5.8, G is a permutation 
graph if and only if the transitive orientations of G, when regarded as partial 
orders have dimension at most 2. 
The construction technique presented above is illustrated in Figure 7.2. 
Theorem 7.1 suggests an algorithm for recognizing permutation graphs, 
namely, applying the transitive orientation algorithm to the graph and to its 
complement. If we succeed in finding transitive orientations, then the graph 
is a permutation graph. To find a suitable permutation we can follow the 
construction procedure in the proof of the theorem. The entire method 
requires O(n^) time and 0{n^) space for a graph with n vertices. 
We conclude this section with a remark which follows from transitive 
orientability. 
Remark. The decreasing subsequences of n and the cliques of G[%] are 
in one-to-one correspondence. The increasing subsequences of n and the 
stable sets of G[n] are in one-to-one correspondence. 

160 
7. 
Permutation Graphs 
L(aJ^(6 
Uf)^^ 
UeJ^b 
LfbJ = 2 
L'(fJ = b' 
L'(aJ = = 4 
>^/A y ^ ^ 
A X 
^^ 
UcJ = 3 
L'(eJ=\ 
V. 
X A 
L'fbJ = 6 
L'(c}^Z 
L'CdJ = 3 
Figure 7.2. Construction of the permutation TC = [5, 3, 1, 6,4, 2] from the transitive orienta-
tions Fi and Fj. Vertex a gives JCg ^ = 4 , vertex b gives TT J ^ = 6 , etc. 
3. 
Permutation Labelings 
A related, but simpler, problem is that of testing whether a given labeling 
of the vertices of a graph is a permutation labeling. Let G = (F, £) be an 
undirected graph, and let L: F-^ {1,2,... ,n} be a bijection labeling the 
vertices. We call L a permutation labeling if there exists a permutation n of 
{1, 2,..., n} such that 
xyeEo{L{x) 
- L(>;)][7i-H^^0) - n~\L{ym 
< 0. 
Clearly, G is a permutation graph if and only if it has at least one permutation 
labeling. 
Figure 7.3 shows two labelings of the same graph. The first is the permu-
tation labeling already constructed in Figure 7.2. The second is not a per-
mutation labeling for the following reason. Since Adj(l) = {5, 6}, both 5 
and 6 would be on the left of 1 while 2-4 would be on the right of 1 in any 
permutation n that might work. However, this implies that 3 and 4 would be 
to the right of 6—yet they are not connected to 6. Hence, no such permutation 
n exists for this labeling. 

3. 
Permutation Labelings 
161 
This labeling is 
a permutation labeling 
This labeling is not 
a permutation labeling 
Figure 7.3. 
Theorem 7.2 (Gill and Acharya [1977]). 
Let G = (K, E) be an undirected 
graph. A bijection L: F -> {1, 2,..., «} is a permutation labeling of G if and 
only if the mapping 
F: X -^ L(x) - d-(x) + d^(x) 
(x e V) 
is an injection, where 
d-(x) = 
\{yeAdj(x)\L(y)<L(x)}\ 
and 
t/^(x) = |{>;GAdj(x)|L(>;)>L(x)}|. 
Proof. (=>) Let TT be a permutation corresponding to the labeling L. 
Then d~(x) is the number of integers in n smaller than and to the right of 
L(x), and d^(x) is the number of integers in n larger than and to the left of 
L(x). By Exercise 4, /(x) = TT" ^(L(X)), and since n~ ^ and L are injective (in-
deed bijective), so too is /. 
(<=) Assuming that / is injective, we will construct the desired permu-
tation. Since d~(x) < L(x) - 1 and d'^(x) < n - L(x), it follows that 
1 <f(x)<n 
(xeV), 
(2) 
But / is injective and integer valued, so (2) implies that / is a bijection from 
K to {1, 2 , . . . , «}. Define n as follows: 
n(i) = 
L(f-\i)) 
(see Figure 7.4). 

162 
7. 
Permutation Graphs 
{ 1 , 2 , . . . , « } -
-^{1,2,...,«} 
Figure 7.4. 
Now, TT is a permutation, since L and / ~ ^ are bijective. Furthermore, 
n-\L(x))=f{x) 
(xeV), 
so we must verify that 
xyeEo 
[L(x) - L(>;)][/(x) - /(y)] < 0. 
This is left as an exercise for the reader. 
| 
4. 
Applications 
Permutation graphs can be regarded as a class of intersection graphs in the 
following manner. Write the numbers 1, 2, ..., n horizontally from left to 
right; underneath them write the numbers TT^, 7C2,..., 7r„ in sequence, again 
horizontally left to right; finally, draw n straight line segments joining the 
two I's, the two 2's, etc. We call this the matching diagram of 71 (see Figure 7.5). 
Notice that the iih segment intersects the jih segment if and only if / and j 
appear in reversed order in n; this is the same criterion for the vertices i and 7 
of G[7i] to be adjacent. Therefore, the intersection graphs of the segments of 
matching diagrams are exactly the permutation graphs. 
The reason for our introducing these matching diagrams is to assist us in 
studying some applications of permutation graphs. 
4 
3 
6 
1
5 
2 
Figure 7.5. The matching diagram of [4, 3, 6, 1, 5, 2]. 

4. 
Applications 
163 
Application 7.1. Suppose we have two collections of cities, the X cities 
and the y cities, lying, respectively, on two parallel lines. Suppose also, that 
there are airline routes connecting various X cities with various 7 cities, all 
scheduled to be utilized at the same time of the day. Our mission, should we 
decide to accept it, will be to assign altitudes to each flight path so that inter-
secting routes will be at different altitudes. We will thereby assure that no 
midair collisions will occur. Being clever graph theorists, we recognize this 
as a coloring problem. 
The data, as given, provides us with a bipartite graph embedded in the 
plane, as pictured in Figure 7.6. We number the flight paths by traversing the 
northern cities from west to east. From this we can extract a matching 
diagram, or go straight to the corresponding permutation graph G[7r]. 
Assigning altitudes to the flight paths so that intersecting paths receive 
different altitudes is equivalent to coloring the vertices of G[7r] so that 
adjacent vertices receive different colors. An efficient coloring algorithm for 
permutation graphs is given in the next section. 
C 
Omaha ^ 
(oes Moines^ 
C 
Chicago ) 
Qfori 
Woyne) 
Q Cleveiond J 
(^New York J 
^Kansas City J 
C St. Louis j 
(^Louisville J 
(^Charleston J 
T Richmond J 
(a) 
1 2 
3 
4 5 6 
7 
8 9 
10 11 
Figure 7.6. (a) A bipartite graph B representing flight paths between cities, (b) The matching 
diagram of a permutation n extracted from the bipartite graph B. (c) The graph G[n]. Color the 
vertices of G[n] and solve the altitude assignment problem for B. 

164 
7. 
Permutation Graphs 
Application 7.2 (Shifted Intervals). 
Let -> = {/,|i = 1, 2,..., n} be a 
collection of intervals on a line, where /^ = (x^, }^,) and |/f | = y^ — x^ denotes 
the length of /^. Assume that the intervals, which may overlap, have been 
ordered such that Xi < X2 < •- < x„. Let Wj represent the cost of shifting 
the interval /, (assumed to be independent of the distance shifted). Find the 
cheapest shifting of intervals so that (1) the order is preserved and (2) no 
overlap remains. (In Even, Pnueli, and Lempel [1972], the intervals cor-
respond to the memory requirements of n programs at a certain time in a 
multiprogramming computer.) 
A solution to this problem is as follows. Consider the oriented graph 
(J, F) where 
(I,JJ)EFO 
X \ik\< yj-x, 
{i<j). 
i<k<j 
Two intervals are thus related in F if and only if the intervals between them 
can be shifted in such a way that none of these j — / + 1 intervals (including 
the fixed /^ and Ij) will intersect. It is routine to show that F is a transitively 
oriented graph (see Exercise 5). The solution to our problem will be to find 
a chain of F having maximum weight (to remain, all others are shifted); in 
other words, find a maximum weighted chque of the graph E = F -\- F~^ 
which is not only a comparability graph but is even a permutation graph. 
5. 
Sorting a Permutation Using Queues in Parallel 
A queue is a linear storage device in which items are loaded at one end and 
unloaded at the other end in a first-in-first-out fashion (FIFO). Let us 
consider the problem of sorting a permutation n of the numbers 1, 2,.. ., n 
Figure 7.7. A network of k queues in parallel. 

5. 
Sorting a Permutation Using Queues in Parallel 
165 
using a network ofk queues arranged in parallel (see Figure 7.7). The permuta-
tion sits in the input queue initially. Each number, in turn, passes along to one 
of the k internal queues where it is stored temporarily until it is moved onto 
the output queue. We assume that each queue has unbounded capacity and 
that backing up along an edge, counter to its direction, is forbidden. One can 
easily imagine a station master directing railroad cars through such a switch-
yard in order to rearrange the cars of a freight train. Typically, the number 
of sidings (queues) will be limited, so we are led to the following problem. 
Given a network of/c queues in parallel, characterize the permutations which 
can be sorted on it. Or similarly, given a permutation TT, how many queues 
will we need? In addition, find an optimal sorting method. 
Example. 
Suppose n = [4, 3, 6, 1, 5, 2]. The 4 is placed in Q^. The 3 
cannot go in Q^ because it will be forever stuck behind the 4, so put it in ^2 • 
Next comes the 6, which can go either behind 4 on Q^ or behind 3 on g2-
Put 6 behind 4 on g^. How about 1 ? It must go on Q^. The 5 cannot go on 
gi because 6 is already there; put 5 on Q2 behind 3. Finally 2 cannot go on Q^ 
or Q2, but it can go on Q^. Now that everything is stored (Figure 7.8), we 
unload the numbers 1-6 from their respective storage places. 
We call your attention to a few obvious facts. The contents of each Qi must 
be in increasing order, for otherwise it would be impossible to successfully 
unload all the numbers in proper order. Furthermore, it is easy to show that 
it makes no difference whatsoever whether we (a) require loading all input 
numbers onto the queues before unloading any of them or (b) allow unloading 
anytime it is possible. 
What is it that forces two numbers to go into different queues? Answer: 
The numbers occur in reversed order in n. Thus, if / and j are adjacent in 
G[7r], then they must go through different queues. 
Proposition 7.3. 
Let TT == [TTJ, 7^2,..., TIJ be a permutation of the in-
tegers {1,2, . . . , n } . There is a one-to-one correspondence between the 
Figure 7.8. A network which is sorting n = [4, 3, 6,1, 5, 2]. 

166 
7. 
Permutation Graphs 
proper fc-colorings of G\_7i] and the successful sorting strategies for 71 in a 
network of k parallel queues. 
Proof. Assign painters to each Qi, each with a different color paint. Now 
sort n in the /c-network and have every number painted as it enters its 
corresponding queue. Since connected vertices i and 7 of G[7i] pass through 
different queues, they receive different colors. 
Conversely, given a proper coloring of G[n] using colors 1,2,...,Tc, assign 
a traffic director to the input queue. If the color of x is c, then the traffic 
director sends xtoQ^. Suppose this strategy is unsuccessful. There must be a 
bottleneck in some queue, say Q^; i.e., Q^ has a pair of numbers x and y 
stored in reversed order. However, x and y enter Q^ in the same order that 
they appear in TT, namely, reversed. Thus, x and y are adjacent in G[n], and 
yet they are both colored the same, a contradiction. Clearly, this correspon-
dence is a bijection. 
| 
Corollary 7.4. Let TT be a permutation. The following numbers are 
equal: 
(i) 
the chromatic number of G[7r], 
(ii) the minimum number of queues required to sort n, 
(iii) the length of a longest decreasing subsequence of n. 
Proof. The equivalence of (i) and (ii) follows immediately from Propo-
sition 7.3, and its proof suggests a method for transforming a solution of one 
problem into a solution of the other. Equality between (i) and (iii) holds since 
a longest subsequence of n corresponds to a maximum clique of G[7c], which 
will be of size %(G[7c]) since permutation graphs are perfect. 
| 
The canonical sorting strategy for n places each number in the first available 
queue. (Our example was done that way.) From this strategy, we obtain the 
canonical coloring of G[7c]. The following algorithm simulates the process. It 
yields a minimum coloring. 
Algorithm 7.1. Canonical coloring of a permutation. 
Input: A permutation n = [TT^, 7C2,. • •, TCJ of the numbers {1,2,..., n}. 
Output: A coloring of the vertices of G[n] and the chromatic number x of 
G[7r]. 
Method: During thejth iteration, Uj is transferred onto the queue Qi having 
smallest index i satisfying Uj > last entry of Qi (i.e., the first allowable Qi). 
We do not actually save the entire contents of Qi. Instead, an array LAST(0 
holds the last number in (2,. The counter k keeps track of the actual number of 
queues (colors) used. The entire algorithm is as follows: 

5. 
Sorting a Permutation Using Queues in Parallel 
167 
begin 
1. 
A : ^ 0 ; 
2. 
ioTj <- 1 to « do 
begin 
3. 
i <- FIRST allowable queue; 
4. 
COLOR(7r^) ^ /; 
5. 
LAST(0 ^ ny, 
6. 
k '^ max{/c, /}; 
end 
7. 
x^k; 
end 
In order to execute statement 3 efficiently, a type of binary insertion can be 
used. One such subroutine is given in Figure 7.9. The next result shows the 
correctness of Algorithm 7.1. 
Theorem 7.5. 
Let TT be a permutation of the numbers {1, 2,. . ., n}. The 
canonical coloring of G\_7t], as produced by Algorithm 7.1, is a minimum 
coloring. 
Proof. Clearly, Algorithm 7.1 produces a proper ^-coloring of G[n]. We 
must show that x = z(G[7r]). It is sufficient to show that n has a decreasing 
subsequence of length x- Consider the predecessor function p defined as 
follows: If COLORCTTJ) = i > 2, then Up^j^ equals the value of LAST(i - 1) 
during ihQ jth iteration. Clearly, 7Cp(j) > TIJ and p(j) < j since it was 7ip(j) sitting 
on Qi_ 1 which forced Uj to go down to Qj. Then 
where 
COLOR (TT^g = X 
and 
is the desired decreasing subsequence. 
| 
procedure FIRST allowable queue: 
begin 
/ ^ 1; r <- ^ + 1; 
until / = r do 
begin 
r-lO + 0/2J; 
if uj > LAST(r) 
then t <- r; 
else / <- r + 1; 
end 
return i; 
end 
Figure 7.9. 

168 
Permutation Graphs 
Remark. To find a minimum clique cover of G[7c], apply Algorithm 7.1 
to the reversal n^ of n. 
Algorithm 7.1 can be used to color any permutation graph G in time 
proportional to n log n provided we have the permutation n and the iso-
morphism G ^ G[7r]. Notice that this complexity is independent of the 
number of edges of G. If we do not have TT, then we would revert to the 
coloring algorithm for comparability graphs. 
Remark. 
If we apply the algorithm in Exercise 8 of Chapter 2 to the 
orientation F of G{n] where each edge is oriented toward its larger endpoint, 
then the coloring we obtain will be exactly the same as the canonical coloring, 
namely, 
COLOR(7r,) = /oHEIGHT(7r,) - i - 1. 
EXERCISES 
1. For what permutation n of the numbers 1,2,3,..., M is G[n] the following: 
(a) the complete graph on n vertices; 
(b) the graph of n isolated vertices; 
(c) 
two disjoint complete graphs on r and n — r vertices, respectively? 
2. 
Find a permutation n whose graph G{n] is isomorphic to G^. Do the 
same for G2 (see Figure 7.10). 
A 
Figure 7.10. 
3. 
Let TT" ^ be the inverse of the permutation n. Prove that G[n] = G[7r" ^]. 
4. 
Let n = [TTJ, 712,..., TCJ be a permutation of {1, 2,..., n}. Let p, denote 
the number of integers less than and to the right of i in n, and let ^^ denote the 
number of integers greater than and to the left of i in K. Prove that the 
following equality holds: 
n[^ -h Pi = i + Qi. 
5. 
Let F be defined as in Application 7.2 (the shifted interval problem), and 
letE = 
FuF'K 
(i) Show that F is a transitive orientation of E. 
(ii) 
Prove that £ is a permutation graph. 

Bibliography 
169 
6. Give an application similar to Application 7.2 which uses the fact proved 
in Exercise 5(ii), namely, that E is not only a comparability graph, but is 
even a permutation graph. 
7. A permutation graph G is uniquely representable if there is only one 
permutation n such that G[n] = G. Characterize the uniquely representable 
permutation graphs. 
8. Let G be a permutation graph with n vertices. Given transitive orienta-
tions Fi and F2 of G and G, respectively, write an algorithm which calculates 
a permutation n such that G[7r] = G. Show that your algorithm can run in 
O(n^) time. 
9. Using the canonical sorting strategy, give a minimum coloring of the 
graph G[7r] for n = [9, 8, 2, 5, 6, 1, 7, 4, 3]. 
10. In sorting, using a network of parallel queues, prove that it makes no 
difference whether we (a) require loading all input numbers onto the queues 
before unloading any of them or (b) allow unloading anytime it is possible. 
11. Prove the following: At any point during the executipn of Algorithm 7.1, 
LAST(l) > LAST(2) > • • • > LAST(/c). 
Why is this fact needed to justify the correctness of the subroutine in Figure 
7.9? Analyze the time complexity of Algorithm 7.1. 
12. Let G be a permutation graph with n vertices. Show that either G or G 
contains a clique of size f'^^^^l (Erdos and Szekeres [1935]). 
Bibliography 
Alter, Ronald, Curtz, Thaddeus B., and Wang, Chung C. 
[1974] Permutations with fixed index and number of inversions, Proc. Fifth Southeastern 
Conf. on Combinatorics, Graph Theory and Computing, Congressus Numerantium 
No. X, Utilitas Math, Winnipeg, 3-38. MR51 #2932. 
Baker, Kirby A., Fishburn, Peter C , and Roberts, Fred S. 
[1970] A new characterization of partial orders of dimension two, Ann. N. Y. Acad. Sci. 175, 
23-24. MR42 #140. 
[1972] Partial orders of dimension 2, Networks 2, 11-28. MR46 # 104. 
de Bruijn, N. G. 
[1974] Sorting by means of swappings, Discrete Math. 9, 333-339. MR49 #8869. 
Erdos, P:, and Szekeres, G. 
[1935] A combinatorial problem in geometry, Compositio Math. 2, 463-470. 
Even, Shimon 
[1973] "Algorithmic Combinatorics," Macmillan, New York. MR49 #48. 
Even, Shimon, and Itai, Alon 
[1971] Queues, stacks, and graphs, in "Theory of Machines and Computations," pp. 71-86. 
Academic Press, New York. 

170 
7. 
Permutation Graphs 
Even, Shimon, Pnueli, Amir, and Lempel, Abraham 
[1972] Permutation graphs and transitive graphs, /. Assoc. Comput. Mach. 19, 400-410. 
MR47 #1675. 
Gill, M. K., and Acharya, B. D. 
[1977] A new characterization of permutation graphs (unpublished). 
Pnueli, Amir, Lempel, Abraham, and Even, Shimon 
[1971] Transitive orientation of graphs and identification of permutation graphs, Canad. J. 
Math. 23, 160-175. MR45 #1800. 

CHAPTER 8 
Interval Graphs 
How It All Started 
In 1957 G. Hajos posed the following problem: 
Given a finite number of intervals on a straight line, a graph associated 
with this set of intervals can be constructed in the following manner: 
each interval corresponds to a vertex of the graph, and two vertices are 
connected by an edge if and only if the corresponding intervals overlap 
at least partially. The question is whether a given graph is isomorphic to 
one of the graphs just characterized (Hajos [1957, p. 65, translated by 
M.C.G.])-
Independently, the well-known molecular biologist, Seymour Benzer, 
during his investigations of the fine structure of the gene, asked a related 
question. 
From the classical researches of Morgan and his school, the chromosome 
is known as a linear arrangement of hereditary elements, the genes. 
These elements must have an internal structure of their own. At this 
finer level, within the gene the question arises again: . . . Are they [the 
subelements within the gene] linked together in a linear order analogous 
to the higher level of integration of the genes in the chromosome? 
A crucial examination of the question should be made from the point 
of view of topology, since it is a matter of how parts of the structure are 
connected to each other, rather than of the distances between them. 
Experiments to explore the topology should ask qualitative questions 
(e.g., do two parts of the structure touch each other or not?) rather than 
quantitative ones (how far apart are they?). (Benzer [1959].) 
171 

172 
8. 
Interval Graphs 
The solution to this question would be found by studying those graphs 
which represent intersecting intervals on a line, and then verifying whether 
or not the data that was gathered was consistent with the linear genetic 
hypothesis. 
Our treatment of interval graphs began in Chapter 1. Let us continue 
looking into the properties of this interesting and useful class of graphs. The 
reader may wish to review Section 1.3 at this point. 
2. 
Some Characterizations of Interval Graphs 
The following theorem and its corrollary will establish where the class of 
interval graphs belongs in the world of perfect graphs. 
Theorem 8.1 (Gilmore and Hoffman [1964]). Let G be an undirected 
graph. The following statements are equivalent. 
(i) 
G is an interval graph. 
(ii) 
G contains no chordless 4-cycle and its complement G is a com-
parability graph. 
(iii) The maximal cliques of G can be linearly ordered such that, for every 
vertex x of G, the maximal cliques containing x occur consecutively. 
Proof, (i) => (ii) This was proved in Chapter 1, Propositions 1.2 and 1.3. 
(ii) => (iii) Let us assume that G = (V,E) contains no chordless 4-cycle, 
and let F be a transitive orientation of the complement G. 
Lemma A. Let A^ and A 2 he maximal cliques of G. 
(a) These exists an edge in F with one endpoint in A^ and the other 
endpoint in y42. 
(b) 
All such edges of £ connecting A^ with A2 have the same orientation 
in F. 
Proof of Lemma A. 
(a) If no such edge exists in F, then A^ u ^2 is a 
clique of G, contradicting maximality. 
(b) 
Suppose abeF and dceF with a,ceA^ and b4 G A2. We must show 
a contradiction. If either a = c or b = d, then transitivity of F immediately 
gives a contradiction; otherwise, these four vertices are distinct (Figure 8.1), 
and ad or be is in F, since F may not have a chordless 4-cycle. Assume, 
without loss of generality, that adeE; which way is it oriented? Using the 

2. 
Some Characterizations of Interval Graphs 
173 
i:;] 
Figure 8.1. Solid edges are in E\ broken edges are in E. Arrows denote the orientation F. 
transitivity of F, adsF (resp. da e F) would imply acef 
(resp. db e F), which 
is impossible, and Lemma A is proved. 
Consider the following relation on the collection ^ of maximal cliques: 
Ai < A2 iff there is an edge of F connecting A^ with A2 which is oriented 
toward A2. By Lemma A, this defines a tournament (complete orientation) 
on ^. We claim that (^, <) is a transitive tournament, and hence linearly 
orders ^. For suppose A^ < A2 and A2 < A^] then there would be edges 
wxe F and yzeF with weA^,x,yEA2, 
and zeA^. If either xz 4 E or wy ^ F, 
then wzeF and A^ < A^. Therefore, assume that the edges wy, yx, and xz 
are all in F (see Figure 8.2). Since G contains no chordless 4-cycle, wz $ F, 
and the transitivity of F implies wzeF. Thus A^ < A^,, which proves the 
transitive tournament claim. 
Next, assume that ^ has been linearly ordered A^, A2,..., 
A„ according 
to the relation above (i.e., i <jiSAi 
< Aj). Suppose there exist cliques 
Ai < Aj < A,, with xeAi,x$Aj, 
and xeA^. 
Since x$Aj, 
there is a vertex 
y G Aj such that xy ^ F. But A^ < Aj implies xy e F, whereas Aj < A^ implies 
yx e F, contradiction. This proves (iii). 
(iii) => (i) For each vertex xeV, 
let I(x) denote the set of all maximal 
cliques of G which contain x. The sets /(x), for xeV, 
are intervals of the 
linearly ordered set (^, <). It remains to be shown that 
xyeEoI(x) 
n I(y) ^ 0 
(x,ye V). 
This obviously holds, since two vertices are connected if and only if they are 
both contained in some maximal clique. 
| 
Figure 8.2. 

174 
8. 
Interval Graphs 
Corollary 8.2. An undirected graph G is an interval graph if and only if 
G is a triangulated graph and its complement G is a comparability graph. 
Remark. The coloring, clique, stable set, and clique cover problems can 
be solved in polynomial time for interval graphs by using the algorithms of 
Chapters 4 and 5. A recognition algorithm can be obtained by combining 
Algorithms 4.1 and 5.2, although the recognition algorithm to be presented 
in Section 8.3 will be asymptotically more efficient. 
Statement (iii) of the Gilmore-Hoffman theorem has an interesting 
matrix formulation. A matrix whose entries are zeros and ones, is said to have 
the consecutive Vs property for columns if its rows can be permuted in such a 
way that the I's in each column occur consecutively. In Figure 8.3 the matrix 
Ml has the consecutive I's property for columns since its rows can be 
permuted to obtain M2. Matrix M3 does not possess the property. Consider 
the clique matrix M (maximal cliques-versus-vertices incidence matrix) of a 
graph G. The following corollary to Theorem 8.1 is immediate. 
Theorem 8.3 (Fulkerson and Gross [1965]). An undirected graph G is an 
interval graph if and only if its clique matrix M has the consecutive I's 
property for columns. 
Proof. An ordering of the maximal cliques of G corresponds to a permu-
tation of the rows of M. This theorem follows from Theorem 8.1. 
| 
The earliest characterization of interval graphs was obtained by Leker-
kerker and Boland. Their result embodies the notion that an interval graph 
cannot branch into more than two directions, nor can it circle back onto 
itself. 
Theorem 8.4 (Lekkerkerker and Boland [1962]). An undirected graph G 
is an interval graph if and only if the following two conditions are satisfied: 
(i) G is a triangulated graph, and 
(ii) any three vertices of G can be ordered in such a way that every path 
from the first vertex to the third vertex passes through a neighbor of the 
second vertex. 
Three vertices which fail to satisfy (ii) are called an astroidal triple. They 
would have to be pairwise nonadjacent, but any two of them would have to be 
connected by a path which avoids the neighborhood of the remaining vertex. 
Thus, G is an interval graph if and only if G is triangulated and contains no 
astroidal triple. Condition (ii) illustrates a well-known law of the business 
world: Every shipment from a supplier to the consumer must pass by the 
middle rtian. 

3. 
The Complexity of Consecutive 1 's Testing 
175 
© /I 0 0 1 
@/l 1 10 
® | 0 1 0 0 
@\l 0 1 
® \ l 10 0, 
M, 
Figure 8.3. 
Matrix Mj has the consecutive I's property for columns since it can be trans-
formed into M2. Matrix M3 does not have the consecutive I's property for columns since it 
cannot be suitably transformed. 
3. 
The Complexity of Consecutive 1 's Testing 
Interval graphs were characterized as those graphs whose chque matrices 
satisfy the consecutive I's property for columns (Theorem 8.3). We may 
apply this characterization to a recognition algorithm for interval graphs 
G = (V,E) in 3, two-step process. First, verify that G is triangulated and, if 
so, enumerate its maximal cliques. This can be executed in time propor-
tional to I F| + |£| (Corollary 4.6, Theorem 4.17) and will produce at most 
n = I K| maximal cliques (Proposition 4.16). Second, test whether or not the 
cliques can be ordered so that those which contain vertex v occur con-
secutively for every veV. Booth and Leuker [1976] have shown that this 
step can also be executed in linear time. We shall look at the main ideas 
behind their algorithm and its implementation. The interested reader should 
consult their very readable paper for additional details. Subject to Corollary 
8.8 and Exercise 3 we have the following. 
Theorem 8.5 (Booth and Leuker [1976]). Interval graphs can be recog-
nized in linear time. 
The general consecutive arrangement problem is the following: Given a 
finite set X and a collection J of subsets ofX, does there exist a permutation 
n of X in which the members of each subset I eJ 
appear as a consecutive 
subsequence of nl In the interval graph problem, X is the set of maximal 
cliques and J = {Iiv)}v^v^ where I(v) is the set of all maximal cliques con-
taining V. The consecutive arrangement and consecutive I's problems are 
equivalent: The rows of the matrix constitute X, and each column determines, 
or is determined by, a subset of X consisting of those rows containing a 1 in 
the specified column. Tucker [1972] has characterized the consecutive I's 
problem in terms of forbidden configurations. Another characterization, due 
to Nakano [1973a], is stated as Exercise 12. 

176 
8. 
Interval Graphs 
[£] 0 El [H 0 
Figure 8.4. A PQ-iree. 
Besides its use in recognizing interval graphs, the consecutive I's problem 
has a number of other applications. These include a linear-time algorithm 
for recognizing planar graphs (see Booth and Leuker [1976]), and a storage 
allocation problem to be discussed in the next section (Application 8.4). 
The data structure needed to solve the consecutive arrangement problem 
most efficiently is the PQ-tree. PQ-trees were invented by Leuker [1975] and 
Booth [1975] expressly for this purpose. They are used to represent all the 
permutations of X which are consistent with the constraints of consecutivity 
determined by ./. Most importantly, only a small amount of storage is 
required for this representation. 
A PQ-tree T is a rooted tree whose internal nodes are of two types: P and 
Q. The children of a type P-node occur in no particular order, while those of a 
Q-node appear in an order which must be locally preserved. This will be 
explained in the next paragraph. We designate a P-node by a circle and a 
Q-node by a wide rectangle. The leaves of T are labeled bijectively by the 
elements of the set X (see Figure 8.4). 
The frontier of a tree T is the permutation of X obtained by reading 
the labels of the leaves from left to right. In our example, the frontier is 
lABCDEFGHIJ^. 
Two PQ-trees T and T are equivalent, denoted 
T = T\ if one can be obtained from the other by applying a sequence of the 
following transformation rules. 
1. Arbitrarily permute the children of P-node. 
2. Reverse the children of a g-node. 
Figure 8.5 illustrates a PQ-tree which is equivalent to the tree in Figure 8.4. 
Its frontier '\s[F JI G H A B E D C]. Parenthetically, we obtain an equivalent 
tree by regarding 7 as a mobile and exposing it to a gentle summer breeze. 

3. 
The Complexity of Consecutive 1's Testing 
177 
L£J L ^ 
[U 0 El 
Figure 8.5. 
A PQ-irQc equivalent to the tree in Figure 8.4. 
Finally, any frontier obtainable from a tree equivalent with Tis said to be 
consistent with T, and we define 
CONSISTENT(T) = {FRONTIER(r)|r = T}. 
It can be shown that the classes of consistent permutations of PQ-trees form 
a lattice. The null tree To has no nodes and CONSISTENT(To) = 0 . The 
universal tree has one internal P-node, the root, and a leaf for every member of 
X (Figure 8.6). 
Let us now relate PQ-trees to the consecutive arrangement problem. Let J 
be a collection of subsets of a set X, and let Il(J^) denote the collection of all 
permutations n of X such that the members of each subset I eJ^ occur 
consecutively in n. For example if ^ = {{A,B, C}, {A,D}}, then n(o^) = 
{[D A B CUD AC P], ICE A D], IB C A D]}. We have the following im-
portant correspondence. 
Theorem 8.6 (Booth and Leuker [1976]). (i) For every collection of 
subsets J^ of X there exists a PQ-tree Tsuch that n(J) = CONSISTENT(r). 
(ii) For every Pg-tree T there exists a collection of subsets J^ such that 
n(Jf) = CONSISTENT(r). 
Figure 8.6. The universal tree T„ 
•, 
x„]. 
CONSISTENT {T„) includes all permutations of 

178 
8. 
Interval Graphs 
Note that the effect of g-nodes is to restrict the number of permutations by 
making some of the brother relationships rigid. We leave it to the reader to 
verify that the tree in Figure 8.4 corresponds to the collection 
J = {{A, B}, {C, D}, {D, £}, {B, C, D, £}, {/, J}, {G, H}, {G, H, /}}. 
The following procedure clearly calculates H{J^). 
procedure CONSECUTIVE(A', J): 
begin 
1. 
n <<- {TT ITT is a permutation of X}; 
2. 
for each I e J do 
3. 
n <- n n {TT I the members of/occur consecutively in 71};; 
4. 
return O; 
end 
Any naive implementation of this algorithm would be impractical because of 
the initially exponential size of 11. However, using PQ-trees we can represent 
n with only 0(\X\) 
space. The equivalent program using Pg-trees is as 
follows. 
procedure CONSECUTIVE(A', J): 
begin 
1. 
r <«- universal tree; 
2. 
for each / e ^ do 
3. 
r ^ REDUCE(r, 7);; 
4. 
return T; 
end 
This version makes use of a pattern matching routine REDUCE which 
attempts to apply a set of 11 templates. Each template consists of a pattern 
to be matched against the current PQ-tvQQ and a replacement to be substituted 
for the pattern. The templates are applied from the bottom to the top of the 
tree. The null tree may be returned when no template applies. Two examples 
are illustrated in Figure 8.7. For details of the algorithm, the reader is directed 
to Booth and Leuker [1976]. There you will find the templates, a detailed 
version of the algorithm, a proof of correctness, and a proof of the following 
complexity theorem. 
Theorem 8.7 (Booth and Leuker [1976]). The class of permutations Tl(J) 
can be computed in 0{\J\-\-\X\-\- 
SIZE|J^|) steps where SIZE(J^) = 
In the theorem the word computed means computed in its Pg-tree repre-
sentation T. In the consecutive arrangements problem it is not necessary to 
calculate all of n(^). Rather, it is enough to produce one member of n(o^) or 
to determine that n ( ^ ) is empty. This can be done very simply by calculating 

3. 
The Complexity of Consecutive I's Testing 
179 
^={{B.C}. 
{A ff}. {0, o]} 
J? = {{A D, F). {B. C, O}. {B. e}} 
A 
B 
C D 
All 24 permutations possible 
[B.C] 
Template PZ 
B 
C 
Exactly 12 permutations possible 
\ 
Templates Pl>\ P2 
C 
B A 
Exactly 4 permutations possible 
{B.0\ 
A 
B C 
D 
E F 
All 720 permutations possible 
| { A A ^ } 
t Template PZ 
B 
C E 
A D E 
Exactly 144 permutations possible 
{B, C,D] 
Templates Pl>\ P^ 
A 
F B 
C 
Exactly 16 permutations possible 
Templates ^3; Q2\ PA 
Null tree 
X^ 
I 
I 
I 
C 
B E 
U{J^)={A 
FOCBE, 
FADCBE 
EBCDFA, 
EBCDAF] 
Figure 8.7. Two illustrations of the procedure CONSECUTIVE (Pg-tree version). The 
reductions make use of the templates in Booth and Leuker [1976]. 
FRONTIER(T). In the next section we suggest an application in which the 
permutations of n(^) may have to be compared according to secondary 
criteria. 
Corollary 8.8. Let M be a (0, 1)-valued matrix with m rows, n columns, 
and/nonzero entries. Then, M can be tested for the consecutive I's property 
in 0{m + n + / ) steps. 
Remark. If M is sparse (/ <^ mn\ then M would not be stored as an array. 
Rather, either a list of the nonzero entries or row lists of M would be used 
(Chapter 2). 

180 
8. 
Interval Graphs 
M 0 0 1 1 1\ 
/I 0 1 0 0 1\ 
/O 1 0 1 0 1^ 
0 1 1 1 1 1 1 
/ l O O l l M / l l O O l O ' 
1 1 1 0 0 
l | | 0 1 0 1 1 1 l | l l 0 1 1 0 
l O l O O l l ^ ' l o i l l l l I 
I l l l l l O 
0 1 0 1 1 1 / 
\ o i i o i o / \ o o i i i o 
yo 1 1 0 1 0/ 
\ i 1 1 0 0 1/ 
\o 0 0 1 1 oy 
Ml 
M2 
M3 
Figure 8.8. 
Matrix M, has the circular Ts property for columns since its rows can be per-
muted to yield M2. Matrix M3 does not have this property. 
A (0, l)-valued matrix has the circular Vs property for columns if its 
rows can be permuted in such a way that the I's in each column occur in a 
circular consecutive order; regard the matrix as wrapped around a cylinder. 
In Figure 8.8 the matrix M^ has the circular I's property since its rows can 
be permuted to obtain M2. However, M3 does not have the circular I's 
property. 
Remark 1. M has circular I's if and only if it has circular O's. 
Remark!. 
The circular I's property is preserved under complementation 
of any column, i.e., interchanging ones and zeros. 
The circular I's property was introduced by Ryser [1969]. 
Clearly, consecutive I's imphes circular I's, but not conversely. Nonethe-
less, one can verify the latter property using a test for the former, as follows. 
Let M be a (0, l)-valued matrix, and let M' be obtained from M by com-
plementing those columns with a 1 in the kth row (k chosen arbitrarily). 
Theorem 8.9 (Tucker [1970, 1971]). Matrix M has the circular I's 
property if and only if M' has the consecutive I's property. 
Proof. By Remark 2, if M has the circular I's property, then so does M'. 
By cyclically permuting the rows of M' so that the feth row (containing only 
zeros) is moved to the top, we shall obtain a matrix with consecutive I's in 
each column. Conversely, if M' has the consecutive I's property, then M' 
also has the circular I's property. Hence, Remark 2 implies that M has the 
circular I's property. 
| 
The efficiency of testing for circular I's and consecutive I's depends partly 
upon the sparseness of M. Thus, if M is sparse we shall want to choose k so 
that M' is also sparse. This can always be done provided M is stored as a list 
of its nonzero entries or by row lists. 
Theorem 8.10 (Booth [1975]). An m x n (0, l)-valued matrix M with 
/ nonzero entries can be tested for the circular I's property in 0(m + n + / ) 
steps. 

4. 
Applications of Interval Graphs 
181 
Proof. Let M be given as a list L of its nonzero entries. Testing for circular 
I's can be accomplished as follows. 
Step I. 
Scan L once, setting up row lists for M and counting the number 
Ci of ones in each row i: 0(m + / ) . 
Step II. 
Choose a row k having minimum number of I's: 0(m). 
Step III. 
Form M' by complementing the appropriate columns. This 
may be carried out by scanning each row in parallel with row fe, or by using 
an auxiliary Boolean ^-vector, as illustrated in Appendix B: 0{Yji(<^i + <^k)) = 
0(m + / ) . 
Remark. 
M' has at most 2/ nonzeros since each row is at most doubled 
in its number of ones. 
Step IV. 
Test M'for consecutive I's:0(m + n + 2f) = 0(m + n + / ) . | 
We have seen that testing a given matrix M for the consecutive or circular 
I's properties can be executed efficiently. It is natural to ask, if M does not 
satisfy one or both of these properties, whether certain columns of M can be 
deleted in order that the remaining matrix satisfies the property. In general 
this problem is very difficult to answer. 
Theorem 8.11 (Booth [1975]). Let M be an r x c (0, l)-valued matrix, 
and let k be an integer {k < c). Deciding whether or not there exists an r x /c 
submatrix of M satisfying the consecutive I's property (or the circular I's 
property) is NP-complete. 
A proof follows from Exercise 15. 
Kou [1977] presents two other extensions of the consecutive I's property 
which are also NP-complete: 
(1) minimizing the number of consecutive blocks of I's appearing in the 
columns; 
(2) minimizing the number of times a row must be split into two pieces to 
obtain consecutive I's. 
4. 
Applications of Interval Graphs 
Interval graphs are among the most useful mathematical structures for 
modeling real world problems. The line on which the intervals rest may 
represent anything that is normally regarded as one dimensional. The 
linearity may be due to physical restriction, such as blemishes on a micro-
organism, speed traps on a highway, or files in sequential storage in a com-
puter. It may arise from time dependencies as in the case of the life span of 

182 
8. 
Interval Graphs 
persons or cars, or jobs on a fixed time schedule. A cost function may be the 
reason as with the approximate worth of some fine wines or the potential for 
growth of a portfoUo of securities. And so the list goes on. 
The task to be performed on an interval graph will vary from problem to 
problem. If what is required is to find a coloring or a maximum weighted 
stable set or a big clique, then fast algorithms are available. If a Hamiltonian 
circuit must be found, then there are no known efficient algorithms (unless 
the graph has more structure than just being an interval graph). Also, the 
speed with which such a problem can be solved will depend partially on 
whether we are given simply the interval graph G or, in addition, an interval 
representation of G. 
Let us direct our attention to a few interesting applications of interval 
graphs. 
Application 8.1. Suppose Cj, C2, ..., c„ are chemical compounds which 
must be refrigerated under closely monitored conditions. If compound Cj 
must be kept at a constant temperature between ti and rj degrees, how many 
refrigerators will be needed to store all the compounds? 
Let G be the interval graph with vertices c^, C2,..., c„ and connect two 
vertices whenever the temperature intervals of their corresponding com-
pounds intersect. By the Helly property (Section 4.5), if {c^^, c^^, • •., CiJ is a 
clique of G, then the intervals {[r,-^., tj^] I7 = 1, 2 , . . . , fe} will have a common 
point of intersection, say t. A refrigerator set at a temperature of t will be 
suitable for storing all of them. Thus, a solution to the minimization problem 
will be obtained by finding a minimum clique cover of G. 
Application 8.2. 
Benzer's problem, as stated in the introduction to this 
chapter, asks if the subelements inside the gene are linked together in a linear 
arrangement. To answer this question data were gathered on mutations of the 
gene. For certain microorganisms a mutant form may be assumed to arise 
from the standard form by alteration of some connected part of the internal 
structure. By experiment it can be determined whether or not the blemished 
part of two mutant genes intersect. (We would hope to show that the blem-
ished parts are linear.) 
From a large collection of mutants we obtain the pairwise intersection data 
of their blemishes and consider its intersection graph G. Are the intersection 
data compatible with the hypothesis of linearity of subelements in the gene? 
Equivalently, is G an interval graph? A positive answer does not confirm 
linearity! However, if the data are correct, a negative answer definitely 
refutes the hypothesis. Benzer experimented on the virus Phage T4; his 
findings were consistent wih linearity (see Benzer [1959, 1962] and Roberts 
[1976]). 

4. 
Applications of Interval Graphs 
183 
Cohen, Komlos, and Mueller [1979] have shown that the asymptotic 
probability F„^ that a random graph with n vertices and e edges is an interval 
graph satisfies 
Pn,e- 
exp(-A) 
for large n and e and not too large e^/n^ where A ^ 32e^/3n^, From this result 
and from some Monte Carlo estimates, they suggest, "it appears that the 
chance that Benzer observed an interval graph by chance alone is nearly 
zero." For related results see Cohen [1968,1978] and Hanlon [1979a, 1979b]. 
The phenomenon of overlap in biology has been brought to light again 
recently. Kolata [1977] surveys some of these developments. She writes, 
Since the early days of molecular biology, genes have been pictured as 
nonoverlapping sequences of DNA [within the chromosome]. Detailed 
studies of a few bacterial and viral genes confirmed this view, and most 
investigators did not question it. [Furthermore,] the hypothesis of 
non-overlapping genes is a keystone for many genetic theories. [How-
ever, recent evidence seems to suggest that] viral genes and possibly 
bacterial genes may overlap. None of the studies with bacteria provide 
incontrovertible evidence that genes overlap, but all suggest that this 
phenomenon occurs. [If overlapping genes do exist,] current views of 
gene organization and the control of gene expression, as well as views of 
the information content of DNA molecules and the effects of mutations 
in DNA, may have to be substantially revised. ^Science 176, 1187-1188 
(1977), copyright 1977 by the American Association for the Advance-
ment of Science.] 
Application 8.3. 
In archaeology seriation is the attempt to place a set of 
items in their proper chronological order. At the turn of the century. Flinders 
Petrie, a well-known archaeologist, formulated this problem, calling it 
"sequence dating," while studying 800 types of pottery found in 900 Egyptian 
graves. This problem has much in common with interval graphs and the 
consecutive I's property. Let yl be a set of artifacts (or aspects of artifacts) 
which have been discovered in various graves. To each artifact there ought to 
correspond a time interval (unknown to us) during which it was in use. To 
each grave there corresponds a point in time (also unknown) when its 
contents were interred. Our problem is to figure out these time relationships. 
(a) Consider the incidence matrix M whose rows represent the graves 
and whose columns represent the artifacts which either are or are not 
present in a given grave. Under the assumption that a grave contains every 

184 
8. 
Interval Graphs 
member of A in use at the time of burial, the matrix M will have the con-
secutive I's property for columns. Each permutation of the rows which gives 
consecutive I's corresponds to an acceptable seriation of the graves and 
defines a possible interval assignment for A. Since there may be many of 
these, other methods will also have to be used to further limit the possibilities, 
(b) Consider the graph G whose vertices represent the artifacts with two 
vertices being connected by an edge if their corresponding artifacts are found 
in some common grave. Under the assumption that every pair of artifacts 
whose usage intervals intersect are to be found together in some grave, we 
have the G is an interval graph and any interval assignment for G would be a 
candidate for the usage intervals of A. As before, additional techniques are 
required to choose the correct assignment. (See Kendall [1969a, 1969b], 
Hodson, Kendall, and Tautu [1971], and Roberts [1976].) One further 
drawback to practical application is that there may be incomplete data so 
that the assumptions are not satisfied. 
Application 8.4. 
Let X represent a set of distinct data items (records) and 
let J^ be a collection of subsets of X called inquiries. Can X be placed in 
linear sequential storage in such a way that the members of each / e J^ are 
stored in consecutive locations? When this storage layout is possible, the 
records pertinent to any inquiry can be accessed with two parameters, a 
starting pointer and a length. Ghosh [1972, 1973] calls this the consecutive 
retrieval property; it is clearly a restatement of the consecutive arrangement 
property. Thus, the question can be answered efficiently using PQ-trees 
(Section 8.3). For related results see Nakano [1973a, 1973b], Ghosh [1974, 
1975], Waksman and Green [1974], Patrinos and Hakimi [1976], L. T. 
Kou [1977], and Gupta [1979]. For an application of the circular I's 
property to cyclic staffing problems, see Bartholdi et al. [1977]. 
Commentary 
Application 8.5. At the Typical Institute of Mathematical Sciences 
(TIMS) each new faculty member visits the coffee lounge once during the 
first day of the semester and meets everyone who is there at the time. How 
can we assign the new faculty members to alcoves of the coffee lounge in 
such a way that no one ever meets a ne^w person during the entire remainder 
of the semester? This is clearly a coloring problem on an interval graph. No 
specific algorithm is needed, however, since it usually happens naturally. 
Additional applications of consecutive and circular I's to such areas as 
file organization and cyclic staffing appear in the bibhography at the end of 
the chapter. 

5. 
Preference and Indifference 
185 
5. 
Preference and Indifference 
Let F be a set. Let us assume that, for every pair of distinct members of V, 
a certain decision maker either clearly prefers one over the other or he feels 
indifferent about them. What is the nature of his preferences, and can they 
be quantified in an orderly manner? What does this imply about his decision 
processes? 
We construct two graphs H = (V,P) and G = (V,E) as follows. For 
distinct 
x,yeV, 
xyePox 
is preferred over y, 
xyeEoindifference 
is felt between x and y. 
By definition, H = (V,P)is an oriented graph, G = (F, £) is an undirected 
graph, and (F, P + P~ ^ -f £) is complete. 
What should we expect from the structure of//? If// has a cycle, then our 
decision maker is likely to be confused and is probably wasting time running 
around in circles. 
Therefore, it is reasonable to require H to be acyclic. In fact, we would 
want H to be transitive. After all, if x is preferred over y and y is preferred 
over z, it is unlikely that a discriminating person would feel indifferent about 
X and z. Thus, we require that P be a partial order.* 
Our example is not as whimsical as it may at first seem. The discussion 
above, and what will follow below, are important issues in decision theory 
and mathematical psychology. Analyzing how such preferences are made can 
enable us to understand and predict individual as well as group behavior. 
For example, how do we evaluate the decision making ability of a middle 
level corporate manager in order to determine if he is top management 
material? 
The discipline of utility theory provides the mechanism for quantifying 
preference. One reasonable measure, due to Luce [1956], is the notion of a 
semiorder. We assign a real number u{x) to each x G K so that for all x and y 
in F, X is preferred over y if and only if u(x) is sufficiently larger than u(y). 
Formally, letting (3 > 0, a real-valued function w.V^Uis 
called a semiorder 
utility function for a binary relation (F, P) if the following condition is 
satisfied: 
xyePou(x) 
> u(y) + d 
(x,yG F). 
(1) 
* Krantz, Luce, Suppes, and Tversky [1971, p. 17] present an argument against transitivity of 
preference. 

186 
8. 
Interval Graphs 
Clearly, a relation P satisfying (1) is a partial ordering of V. The quantity S 
represents the amount oifuzziness that must be filtered out. This enables us 
to be indifferent about events that differ by a minuscule amount. 
It is natural for us to ask the question, under what conditions does a 
preference relation (F, P) admit a semiorder utihty function? 
Theorem 8.12 (Scott and Suppes [1958]). There exists a semiorder 
utility function for a binary relation (F, P) if and only if the following con-
ditions hold: For all x, y,z,we 
V, 
(51) Pis irreflexive; 
(52) xye P and zwe P imply xw e P or zy e P. 
(53) xyeP and yzeP imply xw e P or wz £ P. 
Such a relation P is called a semiorder. The conditions (S1)-(S3) constitute 
a set of axioms for a semiorder.* Proof of the necessity of these three con-
ditions is straightforward and is given as Exercise 9. For the sufficiency half 
of the theorem, the reader is directed to the constructive proof of Rabinovitch 
[1977] or to the existence proofs of Scott [1964] and Suppes and Zinnes 
[1963]. 
Dean and Keller [1968] prove that the number of nonisomorphic semi-
orders on an n-set is (i")/(n + 1). In particular, they show that each iso-
morphism class has a unique representative, called a normal natural partial 
order (NNPO), and they then demonstrate a one-to-one correspondence 
between (a) the NNPOs, (b) the normal subgroups of the upper triangular 
group ofnxn 
matrices, and (c) the set of nondecreasing paths from (0,0) to 
(n, n) on a Cartesian grid which never rises above the line x = y. Rabinovitch 
[1978] shows that every semiorder may be expressed as the intersection of at 
most three linear orders. No similar result holds for orders satisfying only 
(SI) and (S2), i.e., interval orders. Jamison and Lau [1973] characterize the 
choice functions of semiorders. They also have a good table of references. 
For further investigation see the works of Fishburn [1970a-1970d, 1971, 
1973, 1975] and the excellent book by Roberts [1979c]. 
Our attention has thus far been focused on semiorders from the stand-
point of the preference relation (F, P). We now investigate the indifference 
relation G = (V,E) of our semiorder (F, P). A number of characterizations 
are known for these undirected graphs. First, G is a special type of interval 
graph (Exercise 7). Second, a necessary condition easily follows from a 
semiorder utility function, namely, the existence of a real-valued function 
u on V satisfying 
xye Eo\ u(x) — u(y) \ < d 
{x ^ y). 
* Unfortunately, the term semiorder was used in Ghouila-Houri [1962] and later in Berge 
[1973] in a different context. 

5. 
Preference and Indifference 
187 
We will see in the next theorem that this latter condition is also sufficient. 
The theorem provides a number of equivalent characterizations of indiffer-
ence graphs, which are, simply stated, the class of cocomparability graphs of 
semiorders. Additional characterizations appear as Exercises 10 and 11. 
Theorem 8.13 (Roberts [1969]). Let G = (V, E) be an undirected graph. 
The following conditions are equivalent. 
(i) There exists a real-valued function u\V-^U 
satisfying, for all 
distinct vertices x,y e V, 
xyEE<^\ 
u{x) — u(y) | < 1. 
(ii) There exists a semiorder (K, P) such that £ = P + P~ ^ 
(iii) 
G is a comparability graph and every transitive orientation of 
G = (V,E)is 3. semiorder. 
(iv) G is an interval graph containing no induced copy of X^ 3. 
(v) 
G is a proper interval graph, 
(vi) 
G is a unit interval graph. 
Proof, (i) => (vi) 
Let w be a real-valued function satisfying 
xyeEo\u(x) 
— u(y)| < 1 
(x ¥= y\ 
To each vertex x e Fwe associate the open interval I^ = (u(x) — ^, u(x) + |). 
Clearly, 
Ix^Iy"^ 
0o\u(x) 
- u(y)\ < 1 
(x / y). 
Therefore, the collection {Ix}xev is a unit interval representation for the 
graph G. 
(vi) => (v) Since no unit interval can properly contain another unit 
interval, a unit interval representation for G will be proper. 
(v) => (iv) 
Let {Ix}xev be a proper interval representation of G. Suppose 
G contains an induced subgraph G{y^^^2,z3} isomorphic to Xj 3 where 
{zi, Z2, Z3} is a stable set and y is adjacent to each z^ (i = 1,2, 3). If I^. is that 
interval among the intervals 7^^, I^^, I^^ which lies entirely between the other 
two, then ly must properly contain I^., a contradiction. Thus, G can have no 
induced copy of X^ 3. 
(iv) => (iii) (A. A. J. Marley [unpublished].) 
Since G is an interval graph, 
its complement G = (K, £) is a comparability graph. Let F be a transitive 
orientation of G. Using transitivity and Theorem 8.1 it is straightforward to 
show that F satisfies the axioms (SI) and (S2) of a semiorder (Exercise 7). 
We will show that (S3) also holds provided that G contains no induced copy 
of Xj 3. Suppose xyeF and yz e F, while xw^F and wz ^ F. By transitivity 

188 
8. 
Interval Graphs 
Figure 8.9. 
Solid edges are in the transitive orientation Fof G = (K, E). Broken edges are 
inG = (K, £). 
of F, wx^F 
and zw ^ F, and wy ^ F, yw^ F, but XZEF 
(see Figure 8.9). 
Therefore, G^^ ^ ^^^ is isomorphic to K^^, a contradiction. 
(iii) => (ii) 
Immediate. 
(ii) => (i) If (K, P) is a semiorder, then there exists a real-valued function 
u':V^ 
U and a number ^ > 0 such that 
xyePou'(x) 
— u\y) > 5. 
Define u{x) = u\x)/d. Since F + P~ ^ = F, clearly 
xyeEj^ 
\u(x) - u(y)\ < 1 
(x / y). 
| 
6. 
Circular-Arc Graphs 
The intersection graphs obtained from collections of arcs on a circle are 
called circular-arc graphs. A circular-arc representation of an undirected 
graph G which fails to cover some point p on the circle will be topologically 
the same as an interval representation of G. Specifically, we can cut the circle 
at p and straighten it out to a line, the arcs becoming intervals. It is easy to 
see, therefore, that every interval graph is a circular-arc graph. The converse, 
however, is false. In fact, circular-arc graphs are, in general, not perfect 
graphs. For example, the chordless cycles C5, C7, C9, ... are circular-arc 
graphs (see Figure 8.10). 
As with interval graphs, it is immaterial whether we choose open arcs or 
closed arcs. The same class of intersection graphs will arise in either case 
(Exercise 13). We shall adopt the convention of open arcs. We call G a proper 
circular-arc graph if there exists a circular-arc representation for G in which 
no arc properly contains another. 
In Section 1.2 we discussed an application of circular-arc graphs to the 
traffic light phasing problem due to St offers [1968]. The astute reader may 
well be able to adapt some of the applications of interval graphs given in 
Section 8.4 to the more general class of circular-arc graphs. Stahl [1967] 

189 
Figure 8.10. A circular-arc representation of the nonperfect graph C5. 
suggests such a problem in genetics. Other relevant papers on applications 
of circular-arc graphs include Luce [1971], Hubert [1974], Tucker [1978], 
and Trotter and Moore [1979]. 
A characterization of circular-arc graphs due to Tucker, originally formu-
lated in terms of the augmented adjacency matrix of a graph, is equivalent 
to the following. 
Theorem 8.14 (Tucker [1970b, 1971]). An undirected graph G = (F, E) 
is a circular-arc graph if and only if its vertices can be (circularly) indexed 
Vi,V2,'-.,v„ 
so that for all i and7 
v,v,eE=.l'^^'' 
...„...,.,eAdj(.,) 
[or 
Vj+,,,..,VieAd}{vj). 
(If i < ;, then Vj+1,..., 
y^ means Vj+1,..., i;„, i;i,..., v^.) 
Proof. Let G have a circular-arc representation (open arcs). We may 
assume, without loss of generality, that no pair of arcs share a common 
endpoint (Exercise 14). Moving clockwise once around the circle from an 
arbitrary starting point, index the vertices according to the order in which the 
counterclockwise endpoints of their corresponding arcs occur. Let Ai denote 
arc corresponding to i;^. Clearly, Vi is adjacent to Vj if and only if the counter-
clockwise endpoint of Aj lies within Ai or vice versa. In the former case, each 
of /Ij+i, ..., Aj intersects A^, and in the latter case each of ^^+1, . -., A^ 
intersects Aj. Thus (2) is satisfied. 
Conversely, let the vertices be indexed as required in (2). We will construct 
a circular-arc representation for G. Let p^ be the fcth hour marker on an n-hour 
clock. For each vertex i;i,*let v^. be the first vertex in the cyclic sequence 
1;^+!, t;i+2,..., ff which is not adjacent to Vi. Draw an open arc A^ clockwise 
from Pi to p^.. By construction, A^ intersects Aj (i / j) if and only if either 
Pj G Ai or Pi E Aj. But also 
Pj E Ai o Vi+ i,...,VjE 
Ad}(Vi). 
Therefore, by (2), ViVj G E if and only if Ai n Aj ^ 0. 
\ 

190 
8. 
Interval Graphs 
Theorem 8.14 gives us a method for recognizing circular-arc graphs and 
constructing a circular-arc representation. However, since the characteriza-
tion is quantified over all permutations of the vertices, this method will be 
impractical for all but very small graphs. Tucker [1978] approaches the 
problem of trying to find a more efficient recognition algorithm. Details of a 
polynomial time algorithm will appear in Tucker [1979]. 
In view of Theorem 8.3 it is tempting to guess that a circular-arc graph is 
characterized by the circular I's property of its clique matrix or some other 
matrix. Unfortunately, this is not the case. Three related theorems, however, 
are stated here without proof. 
We call G a Helly circular-arc graph if there exists a circular-arc represen-
tation for G which satisfies the Helly property. 
Theorem 8.15 (Gavril [1974]). An undirected graph G is a Helly circular-
arc graph if and only if its clique matrix has the circular I's property for 
columns. 
The augmented adjacency matrix of G is obtained from the adjacency matrix 
by adding I's along the main diagonal. 
Theorem 8.16 (Tucker [1970b, 1971]). An undirected graph G is a circu-
lar-arc graph if its augmented adjacency matrix has the circular I's property 
for columns. 
Figure 8.11. A collection of arcs of a circle with representing sequence of endpoints 
(T = [a, d, e, h, c, d, h, a, e, c]. 

6. 
Circular-Arc Graphs 
191 
Theorem 8.17 (Tucker [1970b, 1971]). An undirected graph G is a proper 
circular-arc graph if and only if its augmented adjacency matrix has the 
circular I's property for columns and, for every permutation of the rows and 
columns that is a cyclic shift or inversion of their circular I's order, the last 1 
in the first column does not occur after the last 1 of the second column, 
excluding columns which are either all zeros or all ones. 
It is useful to regard a collection of arcs as a sequence o of its endpoints 
listed clockwise. Without loss of generality, we shall assume that no two arcs 
share a common endpoint (Exercise 14). In G the symbol x denotes the 
counterclockwise endpoint of arc A^ and x denotes its clockwise endpoint. 
For example, o = [a, 3, e, B, c, d, b, a, e, c] represents the collection of arcs in 
Figure 8.11. Any cyclic permutation of a would be an equally valid represen-
tation. The manner in which two arcs A^ and Ay intersect is uniquely deter-
mined by the pattern of the subsequence of a involving {x,x,y,y}. 
Some 
examples are shown in Table 8.1. We shall utilize this model in proving the 
next theorem. 
Theorem 8.18. 
If G is a proper circular-arc graph, then G has a proper 
circular-arc representation in which no two arcs share a common endpoint 
and no two arcs together cover the entire circle (i.e., they do not intersect at 
both ends). 
Proof. The proof will be induction on the number of "circle covering" 
pairs of arcs. Let s/ = {AJ^^y be a proper circular-arc representation of 
G = (V,E). We may assume that no two arcs share a common endpoint. 
Suppose A^ and A^j cover the entire circle, that is, they intersect in two 
Table 8.1 
Coding a family of arcs as a sequence of letters* 
Pattern of subsequence 
Interpretation 
[x, X, y, y] 
A^ n Ay = 0 
[y, y, X, x] 
A^ a Ay 
[x, y, j^, >^] 
A^ and Ay overlap at one end 
[x, y, y, x] 
A^ and Ay overlap at both ends 
* Some examples of how the pattern of the subsequence 
of a involving {x, St, y, ^} determines the manner of inter-
section of arcs A^ and Ay. Any cyclic permutation of a 
pattern leaves the interpretation unchanged. 

192 
8. 
Interval Graphs 
disjoint subarcs. Let o be the sequence of endpoints of the arcs going clock-
wise from the counterclockwise endpoint of A^. Thus, \a, B, b, a] is the sub-
sequence of G involving these letters, and a may be expressed as the con-
catenation a = rp, where 
(J = [a,..., S,..., b , . . . , 4 . • •]• 
For any x G K, it is impossible for x and x to appear in T in the order [x, x] 
since such an appearance would imply A^ ^ A^, contradicting the supposi-
tion that s/ is proper. 
Consider the new sequence a' = I'p, where i' is obtained from T by listing 
those entries of T with hats followed by those without hats but preserving the 
relative order of each type. For any x.ysV, 
this unshufHing operation will 
leave unchanged the subsequence of a involving {x, x, y, y} unless either 
[x, y] or [y, x] is a subsequence oft. Since the cases are analogous, we assume 
that [x, j)] is in T. We allow the possibility that x equals a or that y equals b. 
Now X may either precede x or follow a in a, and y must fall between y and b, 
for otherwise j ^ would not be proper. This situation is depicted in Figure 8.12. 
Clearly, either [x, x, j), y] or [x, y, y, x] is a subsequence of a, indicating that 
A^ and Ay overlap at both ends. After the transformation from a or a' occurs, 
these become, respectively, [x, y, x, y] or [j), x, y, x], which correspond to 
arcs which properly overlap at only one end. 
Let ja/' be a set of arcs corresponding to a'. We have just shown that (i) 
some doubly intersecting arcs in s/ are transformed into singly intersecting 
arcs in -s^\ and (ii) all other pairs in .^, including nonintersecting, singly 
intersecting, the remaining doubly intersecting, and properly contained (of 
which there were none) arcs, were left unchanged. Thus, j ^ ' is a proper 
circular-arc representation of G with fewer circle covering pairs, and the 
theorem follows by induction. 
| 
This theorem was used in Section L2 to show that every proper circular-arc 
graph is also the graph of intersecting chords of a circle. (See also Chapter 1L) 
We conclude this section by presenting a polynomial-time algorithm which 
finds a maximum clique of a circular-arc graph. The algorithm appears in 
cr = [a, 
. . • , X, 
• • • , 
y, • • •, b, 
• • • , b, • • • , a, • • • J 
X 
y 
X 
Figure 8.12. 
A view of where in a the letters x and v could be hiding. 

Exercises 
193 
Gavril [1974] along with efficient solutions of the stable set problem and the 
clique cover problem for circular-arc graphs. The complexity of the coloring 
problem is unknown for these graphs. 
Let {AJx^v be a circular-arc representation of G = (V, E). Assume that 
no two arcs share an endpoint. Denote the counterclockwise and clockwise 
endpoints of A^ by x and x, respectively. For x e F, we define 
Y,= 
{veV\xeA,} 
+ {x}, 
Z^ = {VEV- 
y^lJce^}. 
Each of y^ and Z^ are complete sets, so the induced subgraph Gy^+z^ is the 
complement of a bipartite graph. Thus, finding a maximum clique of Gy^+z^ 
can be done in polynomial time. 
Let X be a maximum clique of G. Choose a vertex x e K such that A^ does 
not properly contain any arc A^ (w e K). Hence, for every w e K, x ^ w, 
either xe A^or x e A^. Therefore, X is a clique of Gy^+z^-
A maximum clique of G can be obtained as follows: For each x e V, con-
struct and find a maximum clique K(x) of Gy^+z^'^ then select the largest 
among the K(x). 
EXERCISES* 
1. Discuss how interval graphs and the consecutive I's property could be 
applied to the following problem. Several psychological traits are to be 
examined in children. Assign an age period to each trait representing the 
natural order in the development process during which the trait is present. 
What traits would be appropriate for such a study? 
2. 
Let M be a symmetric (0, 1)-valued matrix. Prove that either M has the 
consecutive I's property for columns and rows or M has neither property. 
Prove the same result for circular I's. 
3. 
Prove that the clique matrix of an interval graph G = {V, E) has at most 
0(\V\ -h \E\) nonzero entries. Is this equally true for triangulated graphs 
(Fulkerson and Gross [1965])? 
4. 
Let ^ be a family of intervals on a line, and let k be the maximum possible 
number of pairwise disjoint intervals in ,/. Prove that there exist k points on 
the line such that each interval contains at least one of these points (T. Gallai). 
5. 
Let A and B be (0, 1)-valued matrices having the same shape. Prove that 
if A^ A = B^B, then either both A and B have the consecutive I's property for 
columns or neither has it (Fulkerson and Gross [1965, Theorem 2.1]). A 
* Also review the exercises from Chapter 1. 

194 
8. 
Interval Graphs 
stronger version of this is the following: If A^A = B^B and A has no sub-
configuration of either of the forms below, then A = PB for some permutation 
matrix P 
1 
0 
0 
1 
0 
1 
0 
1\ 
A 
0 ' 
1/ 
r h 
1 
\ l 
0 
1 
0 
1 
0 
1 
1 
0 
(Ryser [1969, Theorem 4.1]). 
6. 
Let P be a binary relation on a set V. A real-valued function 
u:V-^Uis 
called an ordinal utility function for (F, P) if 
xy e P o u(x) > u(y). 
(a) 
Show that {V, P) admits an ordinal utility function if and only if P 
is irreflexive, antisymmetric, and satisfies the negative transitivity condition 
(transitive indifference), 
xy ^ P, yz ^ P => xz t P. 
A (preference) relation satisfying the conditions in (a) is called a weak order 
in decision theory and a preorder in some mathematics literature. An ordinal 
utility function is like scores on an exam; this makes a weak ordering almost 
a total ordering (ties being allowed). Armstrong [1950] first observed that 
transitive indifference has important empirical shortcomings in a preference 
model.* To resolve these shortcomings, Luce [1956] introduced semiorders. 
(b) 
What is the structure of the indifference graphs of weak orders? 
7. Let G = (F, £) be an undirected graph. Prove that the following con-
ditions are equivalent: 
(i) 
G is an interval graph. 
(ii) 
G has a transitive orientation P satisfying axioms (SI) and (S2) of a 
semiorder. 
(iii) Every transitive orientation P of G satisfies (SI) and (S2). 
8. Consider the lexicographic ordering of the plane: A point (x, y) is strictly 
less than a point (x\ y') if either x < x' or both x = x' and y < / . Clearly for 
every pair of distinct points, one of them is strictly less than the other. Prove 
that there cannot exist a real-valued function / defined on the points of the 
plane which preserves the lexicographic ordering (i.e., /(x, y) < f{x\ y') <=> 
(x, y) < (x\ / ) ) (Debreu [1954]). 
* He wrote, 
The nontransitiveness of indifference must be recognized and explained on [sic] any theory of 
choice, and the only explanation that seems to work is based on the imperfect powers of 
discrimination of the human mind whereby inequalities become recognizable only when of 
sufficient magnitude [1950, p. 122]. 

Exercises 
195 
9. Prove the necessity half of the Scott-Suppes theorem. 
10. Prove that G is a proper interval graph if and only if its augmented 
adjacency matrix satisfies the consecutive I's property for columns (Roberts 
[1968]). (The augmented adjacency matrix of G is obtained from the adjacency 
matrix by adding I's along the main diagonal.) 
11. 
We say that vertices a and b are equivalent, denoted a ^ b, if their 
neighborhoods N(a) and N(b) are equal. A vertex x is called extreme if N(x) 
is complete (i.e., x is a simplicial vertex) and [a, b e iV(x), a ^ x, b ^ x'] 
implies [3z e N(a) n N(b\ z i N(x)] (see Figure 8.13). Finally, let G* be the 
quotient graph obtained from G by coalescing the vertices of each ^ -equiva-
lence class and preserving the adjacencies between classes. 
N(a) 
N(x) 
Figure 8.13. The shaded area is empty. 
Prove that the following conditions are equivalent to those in Theorem 8.13 
for an indifference graph G = (K, E). 
(vii) For every connected, induced subgraph H of G, either //* has 
exactly one vertex (i.e., H is complete) or //* has exactly two (nonadjacent) 
extreme vertices (Roberts [1969]). 
(viii) 
G is triangulated and contains none of the graphs in Figure 8.14 as 
induced subgraph (Wegner [1967]). 
A A 
Figure 8.14. Forbidden subgraphs. 
12. Let M = [mf^] be an incidence matrix and define the row sets A^ and 
column sets B^ as follows: 
^i = {Jlrriij = 1}, 
Bj = {i\m,j = 1}. 
(a) 
Show that the following are equivalent, 
(i) Row intersection property: For every ij, /c, 
Ai n Aj ^ Af, or 
Aj n A^ ^ A^ or 
Aj, n A^ c A^. 

196 
8. Interval Graphs 
(ii) 
Column intersection property: For every 1,7, /c, 
Bi n Bj ^ Bk or Bj n Bj, ^ B^ or B^ n B^ c B^ 
(Nakano [1973b]). 
(b) The matrix M is closed if B^ n B^ / 0 implies 5^ u 5^ = B^ for some 
column set B^ of M. The closure cl(M) of M is defined by adding columns to 
M inductively: M^^^ = M; M^''^ has column sets B^r ^^ ^ Bf'^^ for all B\"- ^^ 
and Bf-^^ of M^"' ^> satisfying Bj"" '^ n Bf''^ # 0 . 
Prove that M has the consecutive I's property for columns if and only if 
cl(M) has the column intersection property (Nakano [1973a]). 
13. 
Let j / = {^x}xev be a finite collection of closed arcs of a circle. Show 
that there exists another collection s/' = {A'^}^^y of open arcs such that 
(i) A^ n Ay = 0 o A'^ c^ Ay = 0, 
(ii) 
A^^AyoA'^^A'y 
^""'^^ ^' 
14. Let j / = {A^}^^yhQ a finite collection of open arcs of a circle. Show that 
there exists another collection s^' = {^1^}^^^ of open arcs of a circle satisfying 
the following for all x, 3; G F : 
(i) A^nAy = 0oA'^r\Ay = 0; 
(ii) 
A^^AyoA'^^A'yi 
(iii) no two arcs of s/' have a common endpoint. 
15. 
Let A be the n x m incidence matrix (vertices-versus-edges) of an 
undirected graph G. 
(a) 
Prove that G has a Hamiltonian circuit if and only if A has ann x n 
submatrix satisfying the circular I's property. 
(b) 
Prove that G has a Hamiltonian path if and only if A has an n x 
(n — 1) submatrix satisfying the consecutive I's property (Booth [1975]). 
16. Give an example of a circular-arc graph whose augmented adjacency 
matrix does not have the circular I's property. 
17. A graph G is a unit circular-arc graph if there exists a circular-arc 
representation for G in which every arc is of unit length. (The diameter of 
the circle is variable.) Verify that the graph in Figure 8.15 is a proper circular-
arc graph but is not a unit circular-arc graph (Tucker [1974]). (Here we 
assume that all arcs are open or all arcs are closed.) 
Figure 8.15. 

Bibliography 
197 
18. Let G be a circular-arc graph. Show that i{G) < 2co{G) (Tucker [1974]). 
19. A matrix M is said to have the unimodular property if every square 
submatrix of M has determinant equal to 0, +1, or — 1. (Every entry of such a 
matrix is necessarily 0, + 1 , or —1.) Show that any (0, 1)-valued matrix 
satisfying the consecutive I's property is unimodular. 
Research Problem. Let J he a. collection of intervals whose intersection 
graph is G, and let IC(^) denote the number of different sized intervals in J. 
Define the interval count of G, denoted IC(G), to be min{IC(y)|o^ is an 
interval representation of G}. Clearly, IC(G) = 1 iff G is a unit interval 
graph. Also, IC(Xi 3) = 2. 
(i) For any fc > 2, characterize all graphs G with IC(G) = k. 
(ii) Find good upper and lower bounds for IC(G). 
Leibowitz [1978] has constructed graphs of interval count k for all integers k. 
She has also found three classes of graphs with interval count 2, namely, trees 
that are interval graphs, interval graphs with a vertex whose removal leaves 
a unit interval graph, and threshold graphs. 
Research Problem. Define the interval number of G = (V, £), denoted 
IN(G), to be the minimum number t for which there exists a collection of 
sets ^ = {U^}^^v^ where U^ is the union of t (not necessarily disjoint) 
intervals on the real line, such that G is the intersection graph of *, i.e., 
xyeEiffU^nUy^ 
0. Clearly, IN(G) = 1 iff G is an interval graph. Also, 
any circular-arc graph has interval number at most 2. 
(i) For any /c > 2, characterize the graphs G with IN(G) = 2. 
(ii) Calculate the interval numbers of some special classes of graphs. 
(iii) What are the best bounds for IN(G)? 
Trotter and Harary [1979] and Griggs and West [1979] have shown that 
the interval number of a tree is at most 2 and that 
IN(K,,„) = limn + l)/(m + n)l 
Griggs and West have also shown that IN(G) < [(d + l)/2], where d is the 
maximum degree of a vertex, with equality holding for triangle-free regular 
graphs. Griggs [1979] has proven that IN(G) < [(n + l)/4] for all n-vertex 
graphs. 
Bibliography 
Abbott, Harvey, and Katchalski, Meir 
[1979] A Turan type problem for interval graphs. Discrete Math. 25, 85-88. 
Armstrong, W. E. 
[1950] A note on the theory of consumer's behavior, Oxford Econ. Papers 2, 119-122. 

198 
8. 
Interval Graphs 
Bartholdi, John J., Ill, Orlin, James B., and Ratliff, H. Donald 
[1977] Circular ones and cyclic staffing, Tech. Report No. 21, Dept. of Oper. Res., Stanford 
Univ. 
Berge, Claude 
[1973] "Graphs 
and 
Hypergraphs," 
Chapter 
16. 
North-Holland, 
Amsterdam. 
MR50 #9640. 
Benzer, S. 
[1959] On the topology of the genetic fine structure, Proc. Nat. Acad. Sci. U.S.A. 45, 
1607-1620. 
[1962] The fine structure of the gene, Sci. Amer. 206, 70-84. 
Booth, Kellogg S. 
[1975] PQ-tree algorithms, Ph.D. thesis, Univ. of California. (Also available as UCRL-
51953, Lawrence Livermore Lab., Livermore, California, 1975.) 
Booth, Kellogg, S., and Leuker, George S. 
[1975] Linear algorithms to recognize interval graphs and test for the consecutive ones 
property, Proc. 7th ACM Symp. Theory of Computing, 255-265. 
[1976] Testing for the consecutive ones property, interval graphs, and graph planarity using 
PQ-tree algorithms, J. Comput. Syst. Sci. 13, 335-379. 
Cohen, Joel E. 
[ 1968] Interval graphs and food webs: a finding and a problem, RAND Document 17696-PR. 
[1978] "Food Webs and Niche Space." Princeton Univ. Press, Princeton, New Jersey. 
Cohen, Joel E., Komlos, Janos, and Mueller, Thomas 
[1979] The probability of an interval graph, and why it matters, "Proc. Symp. on Relations 
Between Conibinatorics and Other Parts of Mathematics" (D. K. Ray-Chaudhuri, 
ed.). Amer. Math. Soc, Providence, Rhode Island. 
Dean, Richard A., and Keller, Gordon 
[1968] Natural partial orders, Canad. J. Math. 20, 535-554. MR37 # 1279. 
Debreu, Gerard 
[1954] 
Representation of a preference ordering by a numerical function, in "Decision 
Processes" (R. M. Thrall, C. H. Coombs, and R. L. Davis, eds.), pp. 159-165. 
Wiley, New York. MR16, p. 606. 
Proves that there does not always exist a real-value order preserving function for an 
uncountable totally ordered set. 
Eswaran, Kapali P. 
[1975] Faithful representation of a family of sets by a set of intervals, SIAM J. Comput. 4, 
56-68. MR51 #14677. 
Representation is not the intersection model. It is another use of the consecutive I's 
property. 
Fishburn, Peter C. 
[1970a] An interval graph is not a comparability graph, /. Comhin. Theory 8, 442-443. 
MR42 #7541. 
[1970b] Intransitive indifference with equal indifference intervals, J. Math. Psych. 7, 144-149. 
MR40 #7155. 
[1970c] "Utility Theory for Decision Making." Wiley, New York. MR41 #9401. 
[1970d] Intransitive indifference in preference theory: A survey, Oper. Res. 18, 207-228. 
MR41 #8050. 
[1971] Betweenness, orders and interval graphs, J. Pure Appl. Algebra 1, 159-178. 
MR47#1689. 
[1973] Interval representations for interval orders and semi-orders, J. Math. Psych. 10, 
91-105. MR47 #4870. 
[1975] Semiorders and choice functions, Econometrica 43, 975-977. MR55 # 14082. 

Bibliography 
199 
Fulkerson, D. R., and Gross, O. A. 
[1964] Incidence matrices with the consecutive I's property, Bull. Amer. Math. Soc. 70, 
681-684. MR32 #7444. 
[1965] Incidence matrices and interval graphs, Pacific J. Math. 15, 835-855. MR32 # 3881. 
Gavril, Fanica 
[1974] Algorithms on circular-arc graphs. Networks 4, 357-369. MR51 # 12614. 
Ghosh, Sakti P. 
[1972] File organization: the consecutive retrieval property, Comm. Assoc. Comput. Mach. 
15, 802-808. Zbl246 #68004. 
[1973] On the theory of consecutive storage of relevant records, J. Inform. Sci. 6, 1-9. 
MR48 #1551. 
[1974] File organization: consecutive storage of relevant records on a drum-type storage, 
Inform. Control25, 145-165. MR49 #6706. 
[1975] Consecutive storage of relevant records with redundancy, Comm. Assoc. Comput. 
Mach. 18, 464-471. MR52 #4743. 
Ghouila- Houri, Alain 
[1962] Caracterisation des graphes non orientes dont on peut orienter les arretes de maniere 
a obtenir le graphe d'une relation d'ordre, C.R. Acad. Sci. Paris 254, 1370-1371. 
MR30#2495. 
Gilmore, Paul C , and Hoffman, Alan J. 
[1964] A characterization of comparability graphs and of interval graphs, Canad. J. Math. 
16, 539-548; abstract in Int. Congr. Math. (Stockholm) (1962), 29 (A) MR31 #87. 
Griggs, Jerrold R. 
[1979] 
Extremal values of the interval number of a graph, II, Discrete Math. 28, 37-47. 
Griggs, Jerrold R., and West, Douglas B. 
[1979] 
Extremal values of the interval number of a graph, SI AM J. Algebraic Discrete Meth., 
to be published. 
Gupta, U. 
[1979] 
Bounds on storage for consecutive retrieval, J. Assoc. Comput. Mach. 26, 28-36. 
Hadwiger, H., Debrunner, H., and Klee, V. 
[1964] ''Combinatorial Geometry in the Plane," p. 54. Holt, New York. M22 #11310; 
MR29#1577. 
The problem of characterizing circular-arc graphs was posed here. 
Hajos, G. 
[1957] Uber eine Art von Graphen, Intern. Math. Nachr. 11, Problem 65. 
First posed the problem of characterizing interval graphs. 
Hanlon, Phil 
[1979a] Counting interval graphs, submitted for publication. 
[1979b] The asymptotic number of unit interval graphs, submitted for publication. 
Hodson, F. R., Kendall, D. G., and Tautu, P., eds. 
[1971] " Mathematics in the Archaeological and Historical Sciences." Edinburgh Univ. Press, 
Edinburgh. 
Hubert, Lawrence 
[1974] Some applications of graph theory and related non-metric techniques to problems 
of approximate seriation: The case of symmetric proximity measures, British J. Math. 
Statist. Psych. 27, 133-153. 
Jamison, Dean T., and Lau, Lawrence J. 
[1973] Semiorders and the theory of choice, Econometrica 41, 901-912; corrections 43 
(1975), 979-980. MR55 #14081. 
See also Fishburn [1975]. 

200 
8. 
Interval Graphs 
Jean, Michel 
[1969] An interval graph is a comparability graph, J. Combin. Theory, 189-190. 
MR39 #4036. 
Result is false; see Fishburn [1970a]. 
Kendall, D. G. 
[1969a] Incidence matrices, interval graphs, and seriation in archaeology. Pacific J. Math. 28, 
565-570. MR39 #1344. 
[1969b] Some problems and methods in statistical archaeology, World Archaeol. 1, 68-76. 
The consecutive I's property is applied to sequence dating. 
Klee, Victor 
[1969] What are the intersection graphs of arcs in a QXVCXQI Amer. Math. Mo«//zfy 76,810-813. 
Kolata, Gina Bari 
[1977] Overlapping genes: more than anomahes? Science 176, 1187-1188. 
Kotzig, Anton 
[1963] Paare Hajossche Graphen, Casopis Pest. Mat. 88, 236-241. MR27 #2971. 
Studies bipartite interval graphs. 
Kou, L. T. 
[1977] Polynomial complete consecutive information retrieval problems, SI AM J. Comput. 
6,67-75. MR55 #7006. 
Krantz, D. H., Luce, R. D., Suppes, P., and Tversky, A. 
[1971] 
"Foundation of Measurement," Vol. I. Academic Press, New York. 
Leibowitz, Rochelle 
[1978] Interval counts and threshold graphs, Ph.D. thesis, Rutgers Univ. 
Lekkerkerker, C. G., and Boland, J. Ch. 
[1962] 
Representation of a finite graph by a set of intervals on the real line. Fund. Math. 51, 
45-64. MR25 #2596. 
Leuker, G. S. 
[1975] Interval graph algorithms, Ph.D. thesis, Princeton Univ. 
Lipski, W., Jr., and Nakano, T. 
[1976/1977] 
A note on the consecutive Ts property (infinite case). Comment. Math. Univ. 
St. Paul. 25, 149-152. MR55 #12531. 
Luce, R. Duncan 
[1956] Semiorders and a theory of utility discrimination, Econometrica 24, 178-191. 
MR17, p. 1222. 
[1971] Periodic extensive measurement, Compositio Math. 23, 189-198. 
Mirkin, B. G. 
[1972] 
Description of some relations on the set of real-hne intervals, J. Math. Psych. 9, 
243-252. MR47 #4893. 
Nakano, Takeo 
[1973a] A characterization of intervals; the consecutive (one's or retrieval) property. 
Comment. Math. Univ. St. Paul. 22, 49-59. MR48 #5871. 
[1973b] A remark on the consecutivity of incidence matrices. Comment. Math. Univ. St. Paul. 
22,61-62. MR49 #86. 
Orlin, James B. 
[1979a] Circular ones and cycHc capacity scheduling. Res. Report, Dept. of Operations 
Research, Stanford Univ. 
[1979b] Coloring periodic interval graphs. Res. Report, Dept. of Operations Research, 
Stanford Univ. 
Patrinos, A. N., and Hakimi, S. L. 
[1976] File organization with consecutive retrieval and related properties, in "Large Scale 
Dynamical Systems" (R. Sacks, ed.). Point Lobos, North Hollywood, CaHfornia. 

Bibliography 
201 
Propp, James 
[1978] A greedy solution for linear programs with circular ones, I.B.M. Res. Report 
RC7421. 
Rabinovitch, Issie 
[1977] The Scott-Suppes theorem on semiorders, J. Math. 
Psych. 
15, 209-212. 
MR55 # 10334. 
[1978] The dimension of semiorders, /. Combin. Theory A 25, 50-61. 
Renz, Peter L. 
[1970] Intersection representations of graphs by arcs, Pacific J. Math. 34, 501-510. 
MR42 #5839. 
Roberts, Fred S. 
[1968] 
Representations of indifference relations. Ph. D. thesis, Stanford Univ. 
[1969] Indifference graphs, in "Proof Techniques in Graph Theory" (F. Harary, ed.), 
pp. 139-146. Academic Press, New York. MR40 #5488. 
[1971] On the compatibility between a graph and a simple order. J. Combin. Theory 11, 
28-38. MR43 #7362. 
[1976] "Discrete Mathematical Models, with Applications to Social, Biological and 
Environmental Problems." Prentice-Hall, Englewood Cliffs, New Jersey. 
[1978] "Graph Theory and Its Applications to Problems of Society," NFS-CBMS Mono-
graph No. 29. SIAM Pubhcations, Philadelphia, Pennsylvania. 
[1979a] Indifference and sedation, Ann. N.Y. Acad. Sci. 328, 173-182. 
[1979b] On the mobile radio frequency assignment problem and the traffic light phasing 
problem, Ann. N. Y. Acad. Sci. 319, 466-483. 
[1979c] "Measurement Theory, with Applications to Decision-Making, UtiHty, and the 
Social Sciences." Addison-Wesley, Reading, Massachusetts. 
Ryser, H. J. 
[1969] Combinatorial configurations, SIAM J. Appl. Math. 17, 593-602. MR41 # 1559. 
Scott, Dana S. 
[1964] 
Measurement structures and Hnear inequalities, J. Math. Psych. 1, 233-247. 
Scott, Dana S., and Suppes, Patrick 
[1958] 
Foundation aspects of theories of measurement, J. Symbolic Logic 23, 113-128. 
MR22 #6716. 
Stahl, F. W. 
[1967] Circular genetic maps, J. Cell. Physiol. Suppl. 70, 1-12. 
Stoffers, K. E. 
[1968] Scheduling of traffic lights—a new approach, Transport. Res. 2, 199-234. 
Suppes, Patrick, and Zinnes, J. 
[1963] Basic measurement theory, in "Handbook of Mathematical Psychology," Vol. I 
(R. D. Luce, R. R. Bush, and E. Galanter, eds.), pp. 1-76. Wiley, New York. 
Trotter, William T., Jr., and Harary, Frank 
[1979] On double and multiple interval graphs, J. Graph Theory 3, 205-211. 
Trotter, William T., Jr. and Moore, John, I., Jr. 
[1979] Characterization problems for graph partially ordered sets, lattices and families of 
sets (to be published). 
Tucker, Alan C. 
[1970a] Characterizing the consecutive I's property, Proc. 2nd Chapel Hill Conf. on Com-
binatorial Mathematics and its Applications, Univ. North Carolina, Chapel Hill. 
472-477. MR42 #1681. 

202 
8. 
Interval Graphs 
[1970b] Characterizing circular-arc graphs. Bull. Amer. Math. Soc. 76, 1257-1260. MR43 
#1877. 
Superseded by Tucker [1971]. 
[1971] 
Matrix characterizations of circular-arc graphs. Pacific J. Math. 39, 535-545. MR46 
#8915. 
[1972] A structure theorem for the consecutive I's property, J. Combin. Theory 12, 153-162. 
MR45 #4999. 
[1974] Structure theorems for some circular-arc graphs. Discrete Math. 7, 167-195. 
MR52 #203. 
[1975] Coloring a family of circular-arc graphs, SIAM J. Appl. Math. 29,493-502. 
MR55 #10309. 
[1978] Circular arc graphs: new uses and a new algorithm, in ''Theory and Application of 
Graphs," Lecture Notes in Math., Vol. 642, pp. 580-589. Springer-Verlag, Berlin. 
[1979] An efficient test for circular arc graphs, SIAM J. Comput., to be published. 
Waksman, Abraham, and Green, Milton W. 
[1974] On the consecutive retrieval property in file organization, IEEE Trans. Comput. C-23, 
173-174. MR50 #11886. 
Wegner, G. 
[1967] Eigenschaften der Nerven Homologische-einfacher Familien in R", Ph.D. thesis, 
Gottingen. 

CHAPTER 
9 
Superperfect Graphs 
1. 
Coloring Weighted Graphs 
In this chapter we turn our attention to a notion of perfection in weighted 
graphs. In the process, a more general type of coloring the vertices of a graph 
will be introduced, suggesting many interesting applications. The concept 
of superperfection, introduced in Section 2, is due to Alan Hoffman and 
Ellis Johnson. They were motivated by the shipbuilding problem (Applica-
tion 9.1), and most of the early results are theirs. 
To each vertex x of a graph G = (F, £) we associate a non-negative number 
w(x), and we define the weight of a subset S ^ K to be the quantity 
w(S) = X w(x). 
XES 
(Without loss of generality we may assume throughout that all weights are 
integral.) The pair (G; w) is called a weighted graph. The subset S will often 
be the vertices of a simple cycle or a clique or a stable set. 
An interval coloring of a weighted graph (G; w) maps each vertex x onto 
an (open) interval I^ of the real line of width (or measure) w(x) such that 
adjacent vertices are mapped to disjoint intervals, that is, xyeE 
implies 
/ ^ n / y = 0 . Figure 9.1 shows two colorings of a weighted graph. The 
number of hues of a coloring (i.e., its total width) is defined to be lljx^xl-
The interval chromatic number x(G; w) is the least number of hues needed to 
color the vertices with intervals. For the graph in Figure 9.1, x(^; w) = 10. 
Example 1. If w(x) = 1 for every vertex xeV, 
then xi^'^^) = x(^)-
That is, the notion of interval coloring reduces to the usual definition of 
coloring when all weights are equal. 
203 

204 
9. 
Superperfect Graphs 
la 
h 
h 
( 
) ( 
\ 
) 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I 
0 
1 2
3
4
5
6
7
8
9 
10 11 12 
K 
) 
M 
( 
) 
(a) 
(b) 
.
^
H
^ 
I 
I 
I 
I 
I 
I 
I 
I 
I 
I I 
0 1 
2
3
4
5
6
7
8
9 
10 
( 
» 
X-) 
(0 
Figure 9.1. Two interval colorings of a weighted graph: (a) (G; H) ; (b) a coloring of {G; M^) 
using 12 hues; and (c) a coloring of (G; w) using 10 hues. 
Application 9.1 (The Shipbuilding Problem). 
In certain shipyards the 
sections of a ship are constructed on a dry dock, called the welding plane, 
according to a rigid time schedule. Each section s requires a certain width 
w(s) on the dock during construction. Can the sections be assigned space 
on a welding plane of total width k so that no spot is reserved for two sections 
at the same time? 
Let the sections be represented by the vertices of a graph G and connect 
two vertices if their corresponding sections have intersecting time intervals. 
Thus (G; w) is a weighted interval graph. An interval coloring of (G; w) will 
provide the assignment of the sections to spaces, of appropriate size, on the 
welding plane. This assignment will be consistent with the intersecting time 
restrictions. (The reader must be careful to distinguish between the time 
intervals which produced the edges of G and the coloring intervals which 
provide a solution to the assignment of space on the dock.) 
Remark 1. Larry Stockmeyer has shown that determining whether 
X(G; w) < /c is an NP-complete problem, even if w is restricted to the values 1 
and 2 and G is an interval graph. It follows that the shipbuilding problem is 
NP-complete. 
Application 9.2 (The Banquet Problem). The menu for a banquet in-
cludes a number of cooked dishes which must be prepared in advance. A dish 

1. 
Coloring Weighted Graphs 
205 
d must be baked for m(d) minutes at a temperature (not necessarily constant) 
between t^id) and t2(d). Unfortunately, there is only one oven. How can we 
schedule the dishes so that the total cooking time is minimized? 
Let G be the graph whose vertices represent dishes, with two vertices being 
connected if their corresponding dishes have disjoint temperature intervals 
(and therefore can never be in the oven at the same time). A x(G; m)-coloring* 
of (G; m) will provide a solution to the scheduhng problem by assigning an 
appropriate time interval to each dish during which it is to be in the oven. 
The Helly property for (the temperature) intervals insures that there is always 
a common acceptable temperature for all dishes being simultaneously 
baked. (Our solution does not take into account the size limitation of the 
oven.) 
Remark 2. The banquet problem can be solved in polynomial time. This 
is particularly interesting in the context of Remark 1. The reason for the 
tractability here is that the graph obtained in the banquet problem is the 
complement of an interval graph. We will show in the next section that 
x(G; w) can be calculated in polynomial time whenever G is a comparability 
graph. 
Application 9.3 (Computer Storage Optimization). 
Most compilers 
maintain a one-to-one mapping between the variables in a program and 
their locations in storage. Therefore, in a tight storage situation, the program-
mer may have to overlay storage by deliberately using the same variable for 
more than one purpose, much to the detriment of clarity and reliability of 
the program. Using the notion of interval coloring, Fabri [1979] has investi-
gated freeing the programmer from the task of overlaying by having the 
processor perform all storage allocation decisions. Thus, we want an auto-
matic construction of a many-to-one correspondence between the variables 
and storage which guarantees the integrity of the variables. It is assumed 
that the variables have differing size requirements (as with arrays). 
Let G be an undirected graph whose vertices correspond to the variables 
of a program. We connect two vertices v and u by an edge if and only if there 
is some node in the program flow graph at which v and u are simultaneously 
livet and thus enjoined from sharing storage. Associated with each vertex 
of G is a weight corresponding to the size of the variable. Since nonconflicting 
variables may overlay one another in storage, an interval coloring of G 
corresponds to a linear storage layout, and the interval chromatic number 
corresponds to the size of the optimum (i.e., smallest) such storage layout. 
* From this point on, we will use the term coloring to mean interval coloring whenever the 
context allows. 
tThis can be determined by global data flow analysis. 

206 
9. 
Superperfect Graphs 
We may regard an interval coloring in another manner. Associated with 
any such coloring of a weighted undirected graph G = (V, E) is an implicit 
acyclic orientation F of G. This orientation is obtained by directing an edge 
toward the vertex whose coloring interval is to the right of the other, on the 
real line, that is, 
xyeFol^ 
< ly 
(for all xy e E). 
This suggests the following alternative definition of %(G; w). 
Proposition 9.1. 
Let (G; w) be a weighted undirected graph. Then 
X(G; w) = mini max w(/z) j 
where F is an acyclic orientation of G and /i is a path in F. 
Proof. Given F we define a coloring /i of (G; w) in the same way that one 
usually constructs a height function in a partial order. For a sink x, let 
h{x) = (0, w(x)). Proceeding inductively, for a vertex y let t be the largest 
endpoint of the intervals corresponding to the sons of y, and define h{y) = 
(t, t + w(y)). Thus, /i is a coloring and its number of hues equals max^ w(ju). 
This proves that x(G; w) < minj,(max^ w'(^)). 
Conversely, a minimum coloring gives us an acyclic orientation F' as 
mentioned above, and clearly x(^l^) 
^ ^(A*) fc)r any path fi in F\ This 
proves the reverse inequality, and hence equality holds. 
| 
2. 
Superperfection 
The clique number of a weighted graph (G; w) is defined as 
(D{T; W) = max{w(X)|iC is a clique of G}. 
As one might expect, co(G; w) < %(G; w), which follows from Proposition 9.1. 
An undirected graph G is superperfect if for every non-negative weighting 
s 
Figure 9.2. A superperfect graph. 

2. 
Superperfection 
207 
a 
d 
i 
« 
\ 
A » 
> 
M—r^—• 
e 
f 
b e 
Figure 9.3. 
w of the vertices OJ{G\^N) = x(G;w). Equivalently, G is superperfect if for 
every weighting w there exists an acychc orientation FofG such that w(//) < 
w(K) for every path fiin F and some chque K of G. In particular, the weight 
of the "heaviest" chque in G will equal the weight of the "heaviest" path in F. 
Thus, we have two basic methods for demonstrating superperfection: pro-
viding a suitable coloring or giving a suitable acyclic orientation. We shall 
illustrate these techniques on a few examples. 
Example 2. The graph in Figure 9.2 is superperfect. The heaviest clique 
is either (i) one of the two triangles or (ii) one of the three edges not contained 
in a triangle. Suppose (ii) is the case for some weighting w, and assume, 
without loss of generality, that {a, d} is the heaviest. Then w(b) + w(c) < 
w(d) and w(e) + w(/) < w(a), so that the coloring in Figure 9.3 will do. 
Otherwise, suppose (ii) is not the case, and assume that {d, e, / } is the heaviest 
clique. Therefore, w(a) + w(b) + w(c) < w(d) + w(e) + w(/) and, since (ii) 
has been ruled out, 
w(a) < w(e) + w(/), 
w(b) < w{d) + w(/), 
w(c) < w(d) + w{e). 
By cyclically permuting the vertices of each triangle if necessary, we may also 
assume that w(b) < w(d). If w(a) > w(/), then the coloring in Figure 9.4a 
gives a solution; otherwise Figure 9.4b works. Therefore, in every case, we 
have exhibited a coloring whose number of hues equals the weight of the 
heaviest clique. We conclude that the graph is superperfect. 
Example 3. An undirected graph is perfect if and only if for every (0,1)-
valued weighting w of the vertices (D(G;W) = x(G;w). Thus every super-
perfect graph is a perfect graph. 
d 
e 
f 
f 
d 
e 
4 — H ( 
« 
• 
A 
1 
)( 
• 
4--44 
1 
• 
i 
«-—• 
f-
b 
c 
a 
a 
b 
(a) 
(b) 
Figure 9.4. 

208 
9. 
Superperfect Graphs 
Figure 9.5. G: not superperfect. 
Example 4. The graph G in Figure 9.5 is not superperfect since any 
acychc orientation with the weighting shown would have a path of weight > 6. 
Its complement G (Figure 9.6), however is superperfect. 
Example 5. 
By extending a weighting w of X ^ K to all of F, defining 
w(v) = 0 for all f G F — X, it follows that each induced subgraph of a super-
perfect graph is itself superperfect. 
Let F be a transitive orientation of a comparability graph G. By transi-
tivity, every path in F is contained in a clique of G. So, in particular, for any 
weighting of the vertices of G, the weight of heaviest path in F equals the 
weight of the heaviest clique in G. This argument proves the following 
theorem. 
Theorem 9.2. A comparability graph is superperfect. 
Theorem 9.2 was first noted by Alan Hoff'man, and he raised the question of 
the existence of superperfect graphs which are not comparability graphs. 
Such a graph was found by the author in 1974; it is the graph in Figure 9.2. 
We shall explore this question further in Sections 3 and 4. 
Theorem 9.2 has an algorithmic aspect as well. The interval chromatic 
number xi^l^) 
of a weighted comparabihty graph can be calculated in 
polynomial time. One must simply obtain a transitive orientation F, for 
which Algorithm 5.2 may be used, and then apply Algorithm 5.4 to find a 
Figure 9.6. G: superperfect. 

3. A Class of Superperfect Noncomparability Graphs 
209 
maximum weighted clique. In fact, the optimal coloring may be calculated 
efficiently by a depth-first search procedure utilizing the method described in 
the proof of Proposition 9.1. 
3. 
An Infinite Class of Superperfect 
Noncomparability Graphs 
Before describing our class of graphs, we will prove the following useful 
lemma. 
Lemma 9.3. Let ao,...,fl„-i and bo,...,bn-i 
be sequences of real 
numbers such that 
M - l 
n - 1 
i = 0 
i = 0 
There exists a cyclic permutation TT of {0, 1,...,«— 1} such that 
m 
m 
!«.. <Zf'., 
(m = 0,l,...,n-l). 
i = 0 
i = 0 
Proof. Let Cj = /?, — a^. If each of the partial sums YT=O Ci > 0 (m = 0, 
1,..., n — 1), then the result holds. Otherwise, let ^/=o ^t t>e the smallest of 
these partial sums (i.e, the most negative). 
Consider the permutation TTJ = i + j + 1 (mod n). For m = 7-h 1,..., 
n — 1 we have 
m 
j 
m 
i = 0 
i = 0 
i = j + l 
where, for m = 1,... ,7, 
n - l 
j 
n—1 
m 
n—1 
i = 0 
i = 0 
i = j+l 
i = 0 
i = 
j+l 
thus proving the lemma. 
| 
Let n and k be arbitrary positive integers, n > k. Consider the undirected 
graph G„k = (A -\- B, E\ where 
(i) A = {(3o, «!,..., a^-i) is a clique, 
(ii) B = {bo, ^1, • • •, ^M-1} is a clique, and 
(iii) a^ is adjacent to fei+j(n,odn) for) = 1, 2 , . . . , /c. 

210 
9. 
Superperfect Graphs 
Figure 9.7. 
G„k. 
Figure 9.7 illustrates these adjacencies. We remark here that G„ „_2 is the 
same graph as C2„, the complement of a chordless cycle of length 2n. The 
vertices of the cycle going around in order are [^Q, bo» ^i^ ^i» • • • ^ ^n-1? ^n- J-
Theorem 9.4 (Golumbic [1974]). For arbitrary integers n > /c > 0, the 
graph G„ fc is superperfect. 
Proof. Assume that n > k > OJor the other cases are trivial. Our method 
of showing superperfection has three steps. 
Step I. 
Assign an arbitrary weight to each vertex. 
Step II. 
Describe a particular acychc orientation F. 
Step III. 
Show that every maximal path in F is either (i) contained in some 
clique, or (ii) has weight less than or equal to a path (already shown to be) 
in class (i). 
We call F a superperfect orientation with respect to this weighting. 
Step I. 
We assign an arbitrary weight to each vertex. For simplicity, 
denote the weight of a^ and bi by Ui and 5^, respectively. We may assume that 
ao + ^1 + • • • -h a„_ 1 < 6o + ^1 + • • • + ^M-1 by interchanging the sets A 
and B, if necessary. Furthermore, applying Lemma 9.3, we may assume that 
the vertices have been indexed so that the partial sums satisfy 
ao + "• + a^<bo 
+ "' + b^ 
(m = 0, 1,..., n - 1). 
Step II. 
Let us assign the acyclic orientation F of G„^^ as follows: 
ajOy, bibjEF 
(0 < i <j < n — 1), 
Gibj eF 
(0 < i <j < min(n — 1, / + fc)), 
biQj eF 
(0<i<k-l,n-k-\-i<j<n-i) 
(see Figure 9.8). 

3. 
A Class of Superperfect Noncomparability Graphs 
211 
(fq) 
^^1 
^^2 
' 
^V^ 
^ 
\ 
\ 
\ 
©—**.—^*3—^*,—^ 
^i 
1 
' 
I 
V - 1 
' 
^ ^ 
r 
Figure 9.8. 
Maximal paths in F. 
Step III. 
Any maximal path in F will start in a source node ao or bo • 
(i) Consider a maximal path /i starting in bo- Either // = [bo, ^i, • • •»^n-1], 
in which case it is contained in a clique, or, for some indices i and p, 0 < i < 
/c - 1, 1 < p < /c - /, 
A* = [bo» • • • ? bf, a„_fc + ^,..., a„_p, b„_p+i,..., b„_ij. 
(Obviously if p = 1, then there are no b's at the end.) Now b^ajEE for 
t = 0,.. .,i and) = n — k + U...,n— 
I and a„_^b„_^+je£ foTq<k 
— i 
and j < ^ + 1. Thus, ju is contained in a clique. 
(ii) Consider a maximal path v starting in UQ . Now v is of the form v = 
[^0,..., a^, br+15 remainder] where b^+ j is the first bj in v. Since 
do -\- "' -\- a^ < BQ -\- '" + b^, 
the weight of v is no more than the weight of the path 
[bo,..., b„ b,+1, remainder], 
which is contained in a clique, concluding the proof of the theorem. 
| 
Corollary 9.5. 
The complement of an even-length cycle with no chords is 
superperfect. 
The next result shows that the graphs G„ j^ constitute a class of superperfect 
graphs distinct from the comparability graphs. 
Theorem 9.6. 
G„ j, is not a comparability graph, for 1 < k < n — 2. 
Proof. Recall that an undirected graph is a comparability graph if and 
only if every closed path with no triangular chords has even length (see 
Theorem 5.27). However, 
[ao, cii, bfc+i, bo, a^+i, CIQ, b^^ QQ, aj^, ^ o , . . . , ^o, b^, ao] 
is such a closed path in G„ j^ and has odd length. 
| 

212 
9. 
Superperfect Graphs 
4. 
When Does Superperfect Equal Comparability? 
Figure 9.9 illustrates part of the world of superperfect graphs. We have 
shown in Section 3 that the superperfect graphs properly contain the com-
parability graphs. This leads us to ask under what conditions these two classes 
coincide. In this section we shall give one answer to this question and we shall 
discuss some open problems. 
Foldes and Hammer [1977] have proved the following: 
Theorem 9.7. 
If G is a split graph, then G is a comparability graph if and 
only if G contains no induced subgraph isomorphic to H^, H2, or H^ of 
Figure 9.10. 
Proof. The forward implication is immediate since none of the graphs 
in Figure 9.10 is a comparability graph. We shall show the reverse implica-
tion. Let G be a split graph whose vertices are partitioned into a stable set 
X and a complete set Y. An edge of G is called pure if both its endpoints are 
in Y and called mixed otherwise. A vertex from X (resp. Y) is denoted by a 
subscripted lower-case x (resp. y). The key to the proof is the observation 
that a minimal F-chain (i.e., one that does not properly contain another 
F-chain) will alternate between mixed and pure edges and will involve only 
two vertices of X. Assume that G contains no induced copy of//j, i/2, or 7/3. 
Let 7 be a minimal F-chain. Since no two pure edges are F-related, how 
many mixed edges may separate consecutive pure edges e^ and e2VCiyl All 
such mixed edges will share a common vertex from 7, and hence they are 
Superperfect 
Interval 
AL^B' ^6' Q' Q' 
Q ' ^ 

4. 
When Does Superperfect Equal Comparability? 
213 
//. 
/% 
/v. 
Figure 9.10. 
F-related to one another. Thus, if there were more than two, the chain y 
could be shortened, contradicting minimaUty. Suppose there are exactly 
two; then we have the following segment of 7, 
which corresponds to the diagram in Figure 9.11. By minimality of y, y^ and 
y^ are adjacent, respectively, to X2 and Xj. If y^ e Adj(x3) or }^3 ^ Adj(xo), 
which includes the possibility of XQ and X3 coinciding, then G contains an 
induced copy of//2; otherwise, G contains a copy of H^. Therefore, y alternates 
between pure and mixed edges, as claimed. 
If G is not a comparability graph, then there exists a minimal F-chain y 
from some mixed edge XQ^I to its reversal, namely, 
^oyi ^ yiyi ^ yi^i ^ yiys^ ^lys^ y^y^^ y^^s ^--^ 
yn^n+i = yi^o-
Now XQ ^ Xi and y involves only these two vertices from X, since G has no 
induced copy of Hi. Thus, XQ = X2 = X4. = -- • and x^ = x^ = x^ = - •, and 
by the parity of the indices x„+i equals x^ and not XQ, a contradiction. This 
proves the theorem. 
| 
®-^ 
®—7—(3 
Figure 9.11. 

214 
9. 
Superperfect Graphs 
One can easily verify that / / j , //2, and H^ are not superperfect (Exercise 1). 
From this observation we obtain a new result. 
Corollary 9.8. For split graphs, G is a comparability graph if and only 
if G is superperfect. 
Proof. Suppose G is not a comparability graph; then G contains one of the 
forbidden induced subgraphs of Figure 9.10. Since superperfection is a 
hereditary property, we deduce that G is not superperfect. The opposite 
implication is true for all graphs. 
| 
The class of split graphs is very restrictive. We wonder how much it is 
possible to weaken the hypothesis of Corollary 9.8 and yet obtain the same 
conclusion. For example, all the superperfect noncomparability graphs of 
Section 3 were neither triangulated nor cotriangulated. Is it true or false that 
for triangulated (or cotriangulated) graphs G is a comparability graph if and 
only if G is superperfect? 
5. 
Composition of Superperfect Graphs 
Recall from Section 5.2 the definition of the composition of graphs. In this 
section we investigate how this operation affects superperfection. Let 
Go, Gi,..., G„ be undirected graphs, where GQ has n vertices f^, t;2,..., i;„. 
Theorem 9.9. If GQ , Gi,. . ., G„ are superperfect, then their composition 
G = Go[Gi,..., GJ is superperfect; i.e., superperfection is preserved under 
composition. 
Proof. Let G, = (Kj, £,) for i = 0,1,..., n be disjoint superperfect graphs, 
and let w be a weighting of F^ + K2 + • • • + F„. (The vertices in VQ are not 
weighted since they will be replaced.) Suppose further that F,- is a super-
perfect orientation of G,- with respect to w (restricted to G^) for each i = 0, 
1,..., «. We claim that F = FQIF^, ..., F J is a superperfect orientation of 
G with respect to w. 
Since each of the Fj (i = 0,1,..., n) are acyclic, so is F. Let Ki(i = 1,..., n) 
be a clique of Gj whose weight w{Ki) is greater than or equal to that of any 
path in F^. Define w\Vi) = w(X,) for all Vi e VQ, and let KQ be a clique of GQ 
whose weight W'(KQ) is greater than or equal to that of any path in FQ. NOW 
any path jj, in Fo[Fi,..., F J is of the form fi = [/i^^, jUj.,,..., /XjJ, where the 

6. 
A Representation Using tiie Consecutive 1's Property 
215 
1 i 
. ..L..... 
P*S! 
Figure 9.12. A chordless 5-cycle in (K4, Q). 
fii. are paths in distinct F^ , and the sequence of vertices [i;^^, i;^^,..., u^J is a 
path in FQ. Hence, we have the following inequalities: 
w(/i) = w(Hi^) + 
= vv'(i;,,) + • 
< w'(Ko). 
• + vv(X,) 
But the vertices of (J{X^ | f ^- e KQ} induce a clique K of Go[Gi,..., GJ whose 
weight w(X) equals W'(KQ). Thus, we have shown that G is superperfect. 
| 
Example 6. 
Let X^^ be the set of positions of a /c x fc chessboard, and let 
Q be the binary relation defined on Xf, as follows: xyeQ iff a queen can be 
moved from position x to position y im. single chess move. 
Consider, for the moment, the graph (X3, Q). Let x be the middle position 
and let X = X^ — x. Notice that (X3, Q) is the composition of the single 
vertex x and the induced subgraph (X, Qx) with external factor K2. How-
ever, (X, Qx) is the complement of a chordless 8-cycle and is therefore a 
superperfect graph. Hence, (X3, Q) is also a superperfect noncomparability 
graph. 
Clearly (X^, Q) is an induced subgraph of {X^^ 1, Q\ so {X^, Q) is a non-
comparability graph for all /c > 3. Moreover, Figure 9.12 shows that (X4, Q) 
is not perfect since it contains a chordless 5-cycle. Thus, (X^, g) is not perfect 
and hence not superperfect for /c > 4. 
A Representation Using the Consecutive Vs 
Property 
We now relate the concept of superperfection to some ideas of Hnear 
programming. The material presented here is due to Alan J. Hoffman and 
Ellis L. Johnson. 

216 
9. 
Superperfect Graphs 
Recall that a (0, 1)-valued matrix is said to have the consecutive fs property 
(for columns) if the rows can be permuted so that all the I's in each column 
occur consecutively. Let M denote the stable sets-versus-vertices incidence 
matrix of an undirected graph G. 
Theorem 9.10. 
G is superperfect if and only if for every row vector w > 0 
the linear programming problem 
yM > w, y > 0, 
(la) 
minimize ^y^, 
(lb) 
(2) 
has an optimum (row vector) solution y such that 
the submatrix of M consisting of those rows 5j with yi / 0 has 
the consecutive I's property. 
Assume that the vertex set Fis indexed Vi,V2,...,v„, 
and let us interpret 
what the theorem says. 
Interpretation. 
Each stable set Si is assigned a plot on the real line of 
width yi for use only by its members. (Recall that no two members of Sj will 
need this communal plot simultaneously.) 
Feasibility: By (la) the sum of the widths of the plots available to a given 
vertex Vj must be at least Wj. 
Minimality: By (lb) the combined width of the plots is smallest possible. 
Consecutive Vs: By (2) the nonempty plots can be arranged so that those for 
each vertex are contiguous. 
Proof. From the above interpretation, it is clear that any y satisfying 
both (la) and (2) gives a coloring of (G; w) of width ^y^. The following 
converse also holds: 
For every coloring c of (G; w) there exists a vector y (to be con-
structed below) satisfying (la) and (2) such that ^ yi equals the 
(3) 
width of c. 
Let c map V onto the interval from 0 to t. We may assume that c is left 
justified, that is, that no interval can be shifted to the left without disturbing 
the validity of c as an interval coloring. 
Divide each interval c(Vi) into subintervals labeled with exactly those 
vertices assigned to that subinterval (see Figure 9.12). Each of these labels is 
some stable set. Suppose there are two subintervals, /^ and 12, with the same 
label Si. If they are adjacent, then combine them into one larger subinterval. 

6. 
A Representation Using the Consecutive 1's Property 
217 
If they are nonadjacent, there is a vertex v such that c(v) is wholly contained 
between I^ and 12 and whose left endpoint coincides with the right endpoint 
of /i (assume /i is to the left of 12). However, shifting c(v) to the left by the 
width of 11 yields another coloring, contradicting left justification. Thus, we 
may assume that for each stable set S, there is at most one subinterval with 
label Si, and we define yi to equal the width of that subinterval if it exists and 
zero otherwise. Clearly, y satisfies (la) and (2) and Y, yi equals the width of the 
coloring c. This proves claim (3). 
Consider the linear programming problem 
Mx < 1, 
X > 0, 
maximize 2^ ^j^j-
j 
By the Duality theorem, the optimum solutions of (1) and (4) are equal. 
Furthermore, if x is the characteristic vector of a clique of G, then x is a 
feasible solution to (4). Conversely, any integral feasible solution to (4) is the 
characteristic vector of a clique. Thus, an optimum solution y to (1) satisfies 
XJ^,>CO(G;W). 
(5) 
We do not necessarily have equality in (5) since (4) may not have an optimum 
solution which is integral. (For example, consider the graph C5.) 
We are now ready to prove the theorem in one direction. Suppose that G is 
superperfect, and let w > 0 be given. Choose a coloring c of (G; w) of width 
co(G;w). By (3) we obtain a vector y satisfying (la) and (2) with ^y, = 
co(G; w); and by (5), y is optimum. 
To prove the converse of the theorem, we need the following lemmas. 
If A is a (0, 1)-valued matrix whose columns have the consecutive 
I's property, then A is totally unimodular (i.e., every subdetermi- 
(6) 
nant is 0, 1 or — 1). 
Hence, if w is integral, then every optimum solution to (1) which satisfies 
(2) is integral. (See Hoffman and Kruskal [1956].) 
If for every integral w* > 0 (1) has an optimum solution which 
is integral, then for every w > 0 (4) has an optimum solution 
which is integral.^ (See Hoffman [1974] for arialogous theorem.) 
(7) 
Suppose that for all.w > 0 (1) has an optimum solution y satisfying (2). 
Then /(G; w) = Yji yi- By (6) and (7), there is an optimum solution x to (4) 
which is integral. But this optimum solution x is the characteristic vector of a 
clique of G, so (JO(G, W) = ^,x,. Finally, by the duality of (1) and (4) we 
obtain /(G; w) = (o(G; w). 
| 

218 
9. 
Superperfect Graphs 
EXERCISES 
1. 
Using the technique of Example 5, prove that the graphs H^, H2, and 
i/3 of Figure 9.10 are not superperfect. 
2. 
Prove the following: If // is obtained from G by multiplication of vertices, 
then H is superperfect if and only if G is superperfect. 
3. 
Prove that the shipbuilding problem is NP-complete. 
4. 
Write a polynomial-time algorithm to solve the banquet problem. 
Analyze the complexity of your algorithm. 
5. 
Show that the bull's head graph (Figure 1.14) is an interval graph which 
is not superperfect. 
Bibliography 
Fabri, Janet 
[1979] Automatic storage optimization, Ph.D. thesis, Courant Computer Science Report 
No. 14, New York Univ. 
Foldes, Stephane, and Hammer, Peter L. 
[1977] Split graphs, Proc. 8th Southeastern Conf. on Combinatorics, Graph Theory and Com-
puting, "Congressus Numerantium XIX," pp. 311-315. Utilities Math., Winnipeg. 
Golumbic, Martin Charles 
[1974] An infinite class of superperfect noncomparability graphs, I.B.M. Res. Rep. RC 
5064. 
Hoffman, Alan J. 
[1974] A generalization of max flow - min cut, Math. Programming 6, 352-359. 
MR50 #15906. 
Hoffman, Alan J., and Kruskal, Joseph B. 
[1956] Integral boundary points of convex polyhedra. "Linear Inequalities and Related 
Systems" (H. W. Kuhn and A. W. Tucker, eds.). Annals of Mathematics Studies, 
No. 38, pp. 223-246. Princeton Univ. Press, Princeton, New Jersey. MR 18, p. 980. 

CHAPTER 
10 
Threshold Graphs 
In this chapter we discuss a particularly simple technique for distinguishing 
between stable and nonstable subsets of vertices in a special class of graphs. 
The graphs that admit this technique, which involves assigning certain 
weights to the vertices, are called threshold graphs. Threshold graphs were 
introduced by Chvatal and Hammer [1973]. Their results form the basis for 
much of the next two sections. We begin by introducing the more general 
notion of threshold dimension. 
1. 
The Threshold Dimension 
Let V = {vi,V2,. • .,v„} be the vertex set of an undirected graph G. Any 
subset X ^ V can be represented by its characteristic vector x = (xi,X2, 
..., x„), where for all i 
_ fl 
if 
ViEX, 
^'~\0 
if 
Vi^X. 
Thus, the subsets of vertices are in one-to-one correspondence with the 
corners of the unit hypercube in W according to the coordinates of their 
characteristic vectors. 
Let us consider the collection of all stable sets of G. We ask the following: 
Is there a hyperplane that cuts n-space in half in such a way that on one side 
all corners of the hypercube (characteristic vectors) correspond to stable sets 
of G and on the other side all corners correspond to nonstable sets? Equiva-
lently, can we distinguish which subsets of V are stable sets using a single 
219 

220 
10. 
Threshold Graphs 
Figure 10.1. 
linear inequality? If the answer is affirmative, then the graph under con-
sideration is a threshold graph. If not, we shall want to know how many 
inequalities are needed to distinguish between stable and nonstable sets. 
Example. Consider the graph in Figure 10.1. Its stable sets correspond 
to the solid corners of the unit 3-cube in Figure 10.2. The inequality Xj + 
2x2 + X3 < 2 is satisfied only by the characteristic vectors of the stable sets. 
Thus, a separating plane does exist, namely, x + 2y -\- z = 2. 
The threshold dimension 9{G) of the graph G = (V, E)is defined to be the 
minimum number k of linear inequalities 
^11X1 + ^12-^2 
' 
+ a. 
<t, 
(1) 
^ki^i -^ ^ki^i 
+ • • • + aknX„ < tk, 
such that X is a stable set if and only if its characteristic vector x = (x^, 
X2,..., x„) satisfies (1). Regarding each inequality of (1) as a hyperplane in 
n-space, X is stable iff'x lies on or within the "good" side of each of those k 
hyperplanes. Since G is finite, 6(G) is finite and well defined. 
Figure 10.2. The point/? = (1,1,0) corresponds to the set {v^, V2}, which is not stable. 

1. 
The Threshold Dimension 
221 
Remark. 
The only graphs G for which 0(G) = 0 are those having no 
edges. In this case, the empty set of constraints suffices. 
Let us first notice that without loss of generality, we may assume that all the 
numbers aij and t^ m (1) are non-negative integers. Suppose we are given a set 
of Unear inequahties (1). Since the zero vector represents a stable set, we 
must have each ti > 0. Furthermore, any negative coefficient a^j can be 
changed to zero because for sets X not containing Vj the sum COUNT,(X), 
defined by 
CGUNT,(X) = Y.^iP= 
t 
^iP^P^ 
. 
VpeX 
p = l 
would remain unchanged, whereas for sets X containing Vj this sum would be 
increased to COUNT^X - {Vj}) which is <ti if and only if X is stable. 
Finally, since the graph is finite and the Xj are integral, we can perturb the 
system by a small £ here and there to make all the numbers non-negative 
rationals. Then we multiply by the least common divisor in order to obtain 
integers. 
An undirected graph G = (V, E) whose threshold dimension 9(G) is < 1 
is a threshold graph. Equivalently, G = (V, E) is threshold if there exists a 
threshold assignment [a; t] consisting of a labeling a of the vertices by non-
negative integers and an integer threshold t such that 
X is stable o ^ ^(^) ^ ^ 
(^ ^ ^)- 
(2) 
xeX 
Examples. The star graph K^ „ is easily seen to be a threshold graph by 
assigning a(v) to be the degree of v and t = n, (Figure 10.3). Labeling by 
degree, however, does not always work. The labehng in Figure 10.4a fails to 
satisfy (2) for any value of t since there is a stable set of weight 7 and a non-
stable set of weight 6. It is not a threshold assignment. On the other hand, the 
1 
Figure 10.3. The graph A^i ^ and a threshold assignment with / = 6. 

222 
10. 
Threshold Graphs 
3 
3 
6 
(a) 
(b) 
Figure 10.4. (a) Degree labeling, (b) A threshold assignment for / = 10. 
labeling in Figure 10.4b of the same graph is a threshold assignment for 
t = 10. There are graphs which are not threshold graphs. For example, the 
chordless cycle C„ with n > 4 is not threshold and neither is the path P„ for 
n>4 
(Figure 10.5). 
It should also be noted that an induced subgraph of a threshold graph is a 
threshold graph. Therefore, any graph which contains an induced subgraph 
isomorphic to one of those in Figure 10.5 is not threshold. 
The threshold dimension 6(G) of an arbitrary graph G can be defined in an 
alternate but equivalent manner using threshold graphs. Take 6(G) to be the 
minimum number of threshold graphs needed to cover the edges ofG, i.e., partial 
subgraphs of G, which are themselves threshold, and include every edge at 
least once. For example, 6(C^) = 2 since C4 can be covered by two copies of 
K^ 2' The formalities of proving the definitions equivalent are left to the 
reader (Exercise 13). However, oii^ can easily see that each inequality of (1) 
corresponds to one threshold graph and vice versa, and taken together they 
determine the adjacencies of the graph. This idea of covering by threshold 
graphs can be used to prove the following theorem. Let a(G) denote the size 
of the largest stable set of G. 
Theorem 10.1 (Chvatal and Hammer [1973]). 
If G is an undirected graph 
with n vertices, then 6(G) < n — a(G). Moreover, equality holds if (but not 
only if) G contains no triangle. 
Proof. Let Z be a stable set of cardinality a(G). For each vertex ?; ^ X let 
5y be the star graph with v at the center and having edges vv' for each v' 
W 
X 
W 
X 
U 
I ! 
Figure 10.5. The graphs C4, 7^4, and IK2 are not threshold since any assignment would 
require the inequalities H ' + J F < ^H' + z > / , j c 4 - z < /, and x -\- y > t, which are incon-
sistent. 

2. 
Degree Partition of Threshold Graphs 
223 
adjacent to v in G. Thus, {S^,\v^X} forms an edge covering of cardinality 
n — a(G), proving the first assertion. 
Since C^ and P^ are not threshold for m > 4 and since being threshold is a 
property inherited by induced subgraphs, it follows that any minimum cover 
{Gi\i = 1,..., 6(G)} of a triangle-free graph G consists only of stars G^, 
whose center vertices we denote by w,. Moreover, any edge of G has at least 
one endpoint in U = {Ui\i = 1,..., 
9(G)}, implying that V — U is stable 
and a(G) > \V — U\ = n — 9(G). Combining this with the first assertion, 
we obtain a(G) = n - 9(G) for triangle-free graphs. 
| 
Corollary 10.2. For the following graphs we have 
(i) 
9(C„) = [n/2-] 
(n > 3), 
(ii) 
9(K^J 
= 
MlN{m,n}, 
(iii) 
9(P„) = ln/2j. 
Proof. Each of these graphs is triangle free, so the theorem provides the 
equalities. 
| 
As pointed out in Chvatal and Hammer [1977], the problem of computing 
9(G) is NP-complete in view of Poljak's proof (Theorem 2.1) that computing 
a(G) for triangle-free graphs is NP-complete. We shall see, however, that 
deciding whether or not 9(G) = 1 can be done in linear time. 
Unfortunately, since 9(K„) = 1, the bound of the theorem is sometimes 
useless. However, the next result shows that it is the best possible. 
Corollary 10.3 (Chvatal and Hammer [1973]). For every i: > 0 there 
exists a graph G with n vertices such that (1 — s)n < 9(G). 
Proof. Erdos [1961] has proved that for any positive integer N there is a 
triangle-free graph Gj^ with a(G^) < N and n > c(N/log N)^ vertices. (Here 
c is a positive constant independent of N.) Given t: > 0, choose N large 
enough so that 8cN > (log N)^ and consider the Erdos graph Gj^. Since 
c > N(log NflcN^ 
> N/n, it follows that (1 - i:)n < n - N < n - a(GJ = 
9(Gs). 
I 
2. 
Degree Partition of Threshold Graphs 
In this section we present a number of characterizations of threshold 
graphs. Let G = (V,E) be a threshold graph with threshold assignment 
[A; f]. The following properties are immediate: 
a(x)<t 
(XEVI 
(3) 
xyeEoa(x) 
-h a(y) > t 
(x,yeV,x^ 
y). 
(4) 

224 
10. 
Threshold Graphs 
A labeling satisfying (3) and (4) is not in general a threshold assignment since 
the sets being tested for stability are restricted to those of cardinality < 2. 
However, condition (4) does imply the existence of a different labeling and 
threshold satisfying (2), as we shall prove in Theorem 10.4. For example, the 
labeling given in Figure 10.4a does satisfy (3) and (4) with t = 5, but it is not a 
threshold assignment. On the other hand, the labeling in Figure 10.4b is a 
threshold assignment for t = 10, 
We begin by defining the degree partition of an undirected graph G = 
(K, E) in which we associate vertices having the same degree. Let 0 < 5^ < 
^2 < • • • < ^m < I ^1 be the degrees of the nonisolated vertices; the di are 
distinct and there may be many vertices of degree S^. Define ^o = ^ ^^^ 
^m+i — \^\ ~ ^' The degree partition of V is given by 
where Dj is the set of all vertices of degree Si. Only DQ is possibly empty. 
The following theorem is due to Chvatal and Hammer [1973]. The 
equivalence of (i) and (ii) was discovered independently by Henderson and 
Zalcstein [1977]. 
Theorem 10.4. Let G = (V, E) be an undirected graph with degree par-
tition K = Do + Di + • • + D^. The following statements are equivalent: 
(i) 
G is a threshold graph; 
(ii) there exists an integer labeling c of V and an integer (threshold) t 
such that for distinct vertices x and y, 
xyeEoc{x) 
+ c{y) > t; 
(iii) for all distinct vertices XEDI and 
y^Dj, 
xyeEoi 
H- j > m; 
(iv) the recursions below are satisfied: 
^^ + 1 - 
S, + | / ) , - , | 
(i = 0 , l , . . . , [ m / 2 J - l ) , 
di = Si^i -\D^_i\ 
(/= m, m, - 1, ...,[m/2J H-1). 
Before proving the theorem let us understand its significance. Statement 
(iii) says that the structure of the graph is entirely determined by the indices 
of the degree partition. The vertices contained in the first half of the partition 
cells form a stable set, while those contained in the later half of the partition 
cells from a complete set. Furthermore, the adjacencies possess a natural 
containment, as illustrated in Figure 10.6. Statement (iv) is most important 
computationally for it allows us to verify that we have a threshold graph by 
using purely arithmetic operations without making reference to edges or 

2. 
Degree Partition of Threshold Graphs 
225 
stable 
Clique 
Figure 10.6. The typical structure of a threshold graph. A line between cells Z), and Dj 
indicates that each vertex in Z), is adjacent to each vertex of Dj. Cell DQ contains all isolated 
vertices and may be empty. Cell D^„^|2^ ^^h exists if m is odd. 
adjacency sets—a very unusual situation in graph theory.* Since these 
recursive relations can be verified within 0(n) computational steps for a 
graph with n vertices, we obtain the following. 
Corollary 10.5. Given only the degrees of the vertices of an undirected 
graph G, there is an algorithm which decides whether or not G is a threshold 
graph and which runs in time proportional to the number of vertices of G. 
Proof of this corollary is given as Exercise 7. 
Proof of Theorem 10.4. (i) => (ii) This is just Property (4). 
(ii) => (iii) The proof is by induction on the length of the degree partition. 
We may assume that 0 < i <j < m. 
Let y be a vertex of largest label c(y). For any other vertex x, if x is adjacent 
to some vertex w (i.e., x ^ DQ), then t < c(x) + c(w) < c(x) -f c(yX implying 
that X is adjacent to y. Hence, yED^,5^ 
= \V\ - \DQ\ - 1 and each vertex 
* The reader will notice that the two sets of recursions actually use the same equation. They 
are stated separately to emphasize the method of calculation (^o and S^+i are known), and to 
indicate how they may be proved inductively. 

226 
10. Threshold Graphs 
in D^ is adjacent to all nonisolated vertices. This proves (iii) in the case 
j = m. 
Furthermore, the vertices of D^ are adjacent only to those in D^. For 
suppose ^1 > |D^|, then each vertex XGV — DQ would be adjacent to some 
vertex inV — D^; hence x would also be adjacent to z where z has the largest 
label in K — D^. This forces z to be in D^, a contradiction. Thus, 5^ = \D^\. 
Finally, let V = V — DQ — D^ and consider the induced subgraph 
Gy = (V\ Ey) which also satisfies (ii). Since its degree partition V = 
Di + • • • + D^_ 1 is shorter by 2 than our original, the induction hypothesis 
proves the claim for j < m. 
(iii) => (iv) After some reflection (iv) is seen simply as a restatement of 
(iii). 
(iv) => (i) We shall assign an integer label ai to each x e D^ such that the 
sum of the labels of the vertices in X c Kis less than or equal to a designated 
integer t if and only if Z is a stable set. Now DQ + • • + Dy^,2\ is stable, and if 
X is a stable set containing a vertex y e Dj with j > Im/l], then X — y ^ 
The reader may verify that the following labeling is a threshold assign-
ment. (He should do the arithmetic base | K|.) 
ai = \Vy 
(f = 0, l,...,Lm/2J), 
a. = t + l - IV^-J^ ' 
(j = lm/2] + 1,..., m). 
| 
Remark. 
Orlin [1977] has given a construction of the unique integral 
threshold assignment which minimizes the threshold t. 
Notice that almost the mirror image of Figure 10.6 will appear if we 
replace edges by nonedges in that illustration. This is not surprising in light 
of the following corollary. 
Corollary 10.6. The complement of a threshold graph is a threshold 
graph. 
Proof. Assume that a labeling satisfying condition (ii) is given. The 
labeling c{x) = t — c{x) (for all xeV) with the threshold t = t — I satisfies 
(ii) for the complement since 
xy4EoO<t 
— c(x) — c(y) 
<=> t < c(x) -\- c{y) 
o i < c{x) -h c(y). 
I 
From this corollary we conclude that a graph with n vertices is threshold 
if and only if there exists a hyperplane in IR" separating the characteristic 

3. 
A Characterization Using Permutations 
227 
vectors of the complete sets of vertices from the characteristic vectors of the 
noncomplete sets. An alternative proof of Corollary 10.6 follows from the 
next result. 
Theorem 10.7 (Chvatal and Hammer [1973]). A graph is threshold if 
and only if it has no induced subgraph isomorphic to 2X2, P4, or C4. 
Proof. The graphs 2^2, P4, and C4 are not threshold graphs (Figure 
10.4), hence no threshold graph can contain one of them. Conversely, 
suppose G = (V,E) is not threshold, then there exists a subset X c K with 
|X| > 4 such that 0 # Adj(x) n X ^ X - {x} for each xeX. 
(This is a 
straightforward consequence of Theorem 10.4; see Exercise 3.) Choose 
XiEXto 
have the smallest degree in Gx and pick X2, X3 6 Z so that X1X2 e £ 
but X2X3 ^ E. Since | Adj(xi) n X\ < | Adj(x3) '^ ^1 there exists an X4.eX 
such that X3X4 G £ but X1X4 ^ E. Thus, the set {xj, X2, x^, x^} induces one 
of the three forbidden graphs 2^2, P4, or C4, which proves the theorem. 
| 
Benzaken and Hammer [1978] have studied an analogous threshold prob-
lem for absorbent (or dominating) sets. A subset X of vertices is absorbent 
if every vertex not in X is adjacent to some member of X. The class of graphs 
obtained properly contains the threshold graphs. They give a number of 
characterizations of this class. 
3. 
A Characterization Using Permutations 
Where does a threshold graph G fit into the world of perfect graphs? First 
of all, G is a split graph since its vertices can be partitioned into a stable set 
and a complete set; the edges between these sets are structured in a manner 
that has already been described. Secondly, the edges of G can be transitively 
oriented; let the vertices of G be numbered according to ascending degree 
and orient each edge toward its larger numbered endpoint. By Corollary 
10.6, the complement G can also be transitively oriented, so G is a special 
kind of permutation graph. In the nomenclature of Section 6.1, every thresh-
old graph is a triangulated-cotriangulated-comparability-cocomparability 
graph, or symbolically, 
THRESHOLD 
czTnTnCnC. 
This inclusion is proper as demonstrated by the graph P4. 
Let us characterize threshold graphs in the context of permutation graphs. 
Let 71 be a permutation of the numbers {1, 2, ..., n}. In Chapter 7 we 
defined the graph of TT, denoted by G[7r], to have vertices numbered v^, 

228 
10. 
Threshold Graphs 
V2,...,v„, 
with Vi and Vj adjacent if and only if (i - ]){%; ^ - 717 ^) < 0. For 
example, writing n as the sequence 7ri7C2 • • • 7i„ we see that G[l, 2,..., n] has 
no edges whereas G[n, /i - 1,..., 1] is the complete graph. Recall that the 
graphs G[n] and G[7r^] are complementary, where n^ denotes n written in 
reversed sequential order. Finally, an undirected graph G is a permutation 
graph if it is isomorphic to G[7r] for some TT. 
Let o and T be two sequences over some alphabet. The shuffle product is 
defined as follows: 
OLUT = {G^X^" 
' Oi^Tk\a = o^-•' 
Oj, 
and 
T = T^ • • • T^}. 
Here the Oi and T, are subsequences, k ranges over all integers, and juxta-
position means concatenation. The notion of shuffle product appears in 
automata theory (see Eilenberg [1974]). 
Theorem 10.8 (Golumbic [1978a]). The threshold graphs are precisely 
those permutation graphs corresponding to sequences contained in 
[1, 2,..., p] Lu [n, /I - 1,..., p + 1], 
(5) 
where p and n are positive integers and m denotes shuffle product. 
Proof. Let G = (F, £) be a given threshold graph with degree partition 
K == Do + Di + • • • + D^. Let s^ = Xg=o \^q\ ^^^ rename the vertices 
v^,V2, • " ,Vn such that deg Vi < deg Vj implies i < j . We define a permutation 
TT as follows: 
__ J[l,...,Do] 
if 
|/)o|>0, 
empty sequence 
otherwise; 
[1 + s,_i, . . . , s j 
for 
1 < i < [m/2J, 
[[Sj,..., 1 + s,+1] 
for 
[m/2J < i < m\ 
Note that n is of the form (5), and that 
v^eD^oSk-i 
< z < Skozeyj,. 
(6) 
We will show that G = G[7r]. 
Choose vertices v^ e D^ and Vy e Dj\ we may assume that x < y and hence, 
by construction, i < j . By (6), v^ and Vy are adjacent in G[ji] if and only if y 
appears to the left of x in n. This will occur if and only if either (i) / < [m/2J 
and 7j is strictly to the left of y^ or (ii) [m/2J < i < j . But conditions (i) and 
(ii) together are equivalent with i -\- j > m. Hence, by Theorem 10.4(iii), v^ 
and Vy are adjacent in G[7r] if and only if v^Vy e E, proving that G = G[7r]. 
Conversely, any permutation of the form (5) yields a threshold graph. 
| 

4. 
Synchronizing Parallel Processes 
229 
Teng and Liu [1978] use the shuffle product for the integration of several 
logically independent and concurrently operating transmission grammars. 
Transition grammars describe the rules, or protocols, which regulate the 
interactions between the attached entities in a computer network to ensure 
that they proceed in an orderly fashion. 
4. 
An Application to Synchronizing Parallel 
Processes 
Threshold graphs were rediscovered and studied by others, including 
Henderson and Zalcstein [1977]; they are responsible for the application 
presented here. See also Vantilborgh and van Lamsweede [1972]. 
A hypergraph H = (S, S') consisting of a vertex set S and a hyperedge 
collection S' of subsets of S, is called a threshold hypergraph if there exists a 
non-negative integer labeling c of S and an integer threshold t such that for all 
X ^ S, 
X contains no hyperedge o 
^ c(x) < t. 
xeX 
As before, we call the pair [c; r] a threshold assignment for H. 
Unlike the special case when // is a graph for which many results are 
known, the problem of characterizing threshold hypergraphs is unsolved and 
appears to be quite difficult. Nevertheless, threshold graphs and hypergraphs 
can be useful in an application to computing which we will now present. 
Consider a set of computer programs ^ = {PJ to be run in parallel. 
(Some of the P, might actually be subroutines of larger programs.) Because of 
overall memory constraints or common memory location requirements some 
conflict may arise when a certain subset ^' of ^ is not able to run simul-
taneously. Let <f denote the collection of all such forbidden ^'. Hence, the 
programs in X ^ ^ can be run together without conflict if and .only if X 
contains no member of S'. 
When (^, ^) is a threshold hypergraph a particularly simple programming 
technique can be applied to let the computer prevent conflicts automatically 
and control the traffic of programs running and waiting. Let [c; t] be a 
threshold assignment for (^, S') and denote Cj = c(Pi). The technique is as 
follows. 
(1) Precede each program P^ with a call to procedure P{s, c^). 
(2) Follow each program P^ with a call to procedure V(s, c,). 
(3) Initialize a new global variable 5 with the value t. 

230 
10. 
Threshold Graphs 
procedure P{s, c): 
[f s > c then 
s ^ s — c 
enter f • 
else 
call again 
return 
procedure V{s, c) 
5 <- 5 + r 
return 
Figure 10.7. Subroutine P requests permission to begin and subroutine V informs the 
traffic controller that the program is finished. Variable s records how much "room" is currently 
available. 
(See Figure 10.7.) The variable s, called a semaphore, never allows the sum 
of the c, for those programs currently running to exceed t. The number Cj 
resembles the space required to do P^. Every time we wish to execute a 
routine F,, the procedure P checks whether or not there is sufficient space 
(i.e., is s > Cj). If so, we reduce s by c^ and begin; if not, then we wait (in a 
queue) until there is enough space. When we finish P^ the procedure V re-
leases c, units of space. 
Example 1. Given a set of programs {PJ such that at most 12 of them can 
be executed simultaneously, assign r = 12 and c(Pi) = 1 for each i. 
Example 2. Let ^ consist of three types of processes: the readers P j , . . . , 
R/, the writers V^i,..., VF^; and the mathematicians M i , . . . , M^. Assume 
that we may execute simultaneously either at most one mathematician plus 
an unlimited number of readers or at most one writer.* This problem has the 
threshold assignment 
c(Rd=\ 
( / = l , . . . , r ) , 
c(Mj) = r + 1 
(j = 
l...,ml 
c(W,) = 2r+l 
(k= 
l,...,w), 
r = 2r + 1. 
Although there is no accurate graph theoretic formulation for Example 1, 
Example 2 can be viewed as a graph G with edges connecting the readers with 
the writers, the mathematicians with each other and the writers, and the 
writers with everyone. In this case the stable sets of G correspond to the 
subsets which can be executed simultaneously. 
Example 3. 
If we add some bureaucrats B j , . . . , B^ to Example 2 who 
can work with writers but cannot work with mathematicians, then the system 
no longer has a threshold assignment. 
* If someone is writing on the system, no one else may have access since changes are being 
made. Otherwise, as many readers can work as want, but only one mathematician can work 
because there is only one calculator and he needs a calculator. 

Exercises 
231 
Finally, suppose we have a system with threshold dimension k. We can 
proceed similarly using P's and K's except that k semaphores will be needed. 
One semaphore handles each inequahty (or labeling), and a segment Pi can 
be entered if and only if there is sufficient resource according to each of the k 
semaphores. 
EXERCISES 
1. Prove that 9(0) <n + I - (jo{GX where 6(0) and (D(0) denote the 
threshold dimension of G and the size of the largest clique of G, respectively. 
2. Show that e(H) < 9(0) for any induced subgraph H of G. 
3. Prove the following: G = (F, E) is a threshold graph if and only if for 
each subset X ^ Vthere exists a vertex XGX such that Adj(x) n X = 0 or 
Adj(x) n X = X — {x} (i.e., x is adjacent to all the vertices of X — {x} or to 
none of them; Chvatal and Hammer [1973].) 
4. Show that the following procedure will recognize threshold graphs. 
What is its complexity? 
Boolean procedure THRESHOLD(G): 
begin 
while the edge set is nonempty do 
begin 
delete all isolated vertices; 
if there is a vertex x adjacent to all remaining vertices then delete x; 
else 
return false; 
end 
return true; 
end 
5. Prove the following: A graph O = (V, E) is threshold if and only if its 
vertices can be ordered and partitioned into a stable set A' = {xj, X2,..., x j 
and a complete set Y = {y^ . •., yt} such that 
XiyjSE=> 
Xi>yy eE 
(i' > /, / > j). 
6. Prove that a threshold graph G with degree partition K = DQ + I>i -f- • • • 
+ D^ has a Hamiltonian circuit if and only if the following relations are 
satisfied: 
1)/2J), 
|i>ol = 0, 
k 
m 
IlAl< 
Z 
l^^l 
i = l 
j=m+l-k 
m/2 
m 
lm< 
I \Dj\ 
i=i 
j = m/2+l 
(fc=l,2,... 
(if m is even). 
Aim 
Show how one may obtain the Hamiltonian circuit. 

232 
10. 
Threshold Graphs 
7. Let H have vertices 1,2,..., n and let DEG (i) equal the degree of vertex i. 
Write an algorithm which verifies the recurrence relations in Theorem 
10.4(iv). Prove that your algorithm runs in 0{n) time. 
8. Calculate the threshold dimension for the graphs in Figure 10.8 thus 
showing that 6(G) is not in general equal to 0(G) for nonthreshold graphs. 
Figure 10.8. 
9. 
Find necessary and sufficient conditions for a sequence [a^, ^ 2 , . . . , a„; t] 
to be a threshold assignment for some threshold graph. 
10. 
Prove that the number of mutually nonisomorphic n-vertex threshold 
graphs is 2"~^ 
11. 
Prove that G is a threshold graph if and only if equality holds in each 
of the Erdos-Gallai inequalities (see Section 6.3) (Hammer, Ibaraki, and 
Simeone [1978]). 
12. Verify that the labeling given at the end of the proof of Theorem 10.4 
is a threshold assignment. 
13. 
Let 6'(G) denote the smallest integer k for which there exist partial 
subgraphs (Kj, EJ, (V2, E2X ..., (F^, f j of G = (K, £) satisfying E = E^u 
E2U ' •' ^ E^, where each (F,, £,) is a threshold graph. Prove that O^G) 
equals the threshold dimension 0(G) of G. (Note: You may assume Vi = V 
for each /. Why?) 
14. 
Let G be a threshold graph whose vertices are numbered according to 
increasing degree. Prove that the orientation obtained by directing each 
edge of G toward its larger numbered endpoint is transitive. 
15. 
Let X be a set of propositions and let 7 be a set of subjects in a psycho-
logical experiment. A subject either agrees or disagrees with a proposition. 
A Guttman scale is a linear ordering of X u Y such that a subject agrees 
with all items following it and disagrees with all items preceding it. Let G 
be an undirected graph with vertex set X u Fconstructed as follows: X forms 
a stable set; Y forms a clique; subject y is adjacent to proposition x if and 
only if subject y agrees with proposition x. The following are from Leibowitz 
[1978]: 
(i) Prove that there exists a Guttman scale for X u 7 if and only if G 
is a threshold graph. 

Exercises 
233 
(ii) Give an algorithm to construct a Guttman scale. For a discussion 
of Guttman scales, see Coombs [1964]. 
16. Prove that every threshold graph has an interval representation using 
intervals of at most two different lengths (Leibowitz [1978]). 
17. Let m{G) denote the number of maximal cliques of an undirected graph 
G and let a(G) be the stability number. Clearly, 
a(G) < m(GX 
since there must be a(G) distinct cliques containing the members of a maxi-
mum stable set. 
An undirected graph G = (V, E) is said to be trivially perfect if for each 
A ^ V, the induced subgraph G^ of G satisfies a(G^) = rn(G^). This name was 
chosen since it is trivial to show that such a graph is perfect. Prove the 
following (Golumbic [1978b]): 
(i) A graph G = (K ^) is trivially perfect if and only if it contains no 
induced subgraph isomorphic to C4 or P4. 
(ii) A connected graph is trivially perfect if and only if it is a com-
parability graph whose Hasse diagram is a rooted tree. 
(iii) 
G and G are both trivially perfect iff G is a threshold graph. 
Research Problem. 
Characterize the graphs of threshold dimension 2. 
Research Problem. 
Let 5* be a finite set and let ^ be a collection of subsets 
of S each of size r. The pair H = (5, <f) is usually called an r-regular hyper-
graph. If r = 2, then H is just an undirected graph. Consider the following 
properties: 
(Ti) 
There exists a (positive integer) labeling c of 5 and an (integer) 
threshold t such that, for all subsets X ^ S, 
X contains no member of (f <=> ^ c(x) < t. 
xeX 
(T2) There exists a (positive integer) labeling c' of S and an (integer) 
threshold f such that for all subsets A ^ S of size r, 
AeSoY. 
^'(^) > ^'-
xeA 
(T3) 
For x,y GS define x^ 
y'\{x can replace y in any hyperedge (mem-
ber) of S. That is, X ^ y if [}; G A e ^ and X ^ X] imply A - {y} ^ [x] e i. 
Then, for all x,yeS, 
either x^ 
y ox y^ 
xov both. 
Clearly (Tj) => (T2) => (T3). Either prove or disprove the reverse implica-
tions. [We know they are both true when r = 2. Perhaps a proof for r = 3 
would generalize to arbitrary r.] 

234 
10. 
Threshold Graphs 
Bibliography 
Benzaken, Claude, and Hammer, Peter L. 
[1978] Linear separation of dominating sets in graphs, Ann. Discrete Math. 3, 1-10. 
Chvatal, Vaclav, and Hammer, Peter L. 
[1973] Set-packing and threshold graphs, Univ. Waterloo Res. Report, CORR 73-21. 
[1977] Aggregation of inequalities in integer programming, Ann. Discrete Math. 1, 145-162. 
Coombs, C. H. 
[1964] 
''A Theory of Data." Wiley, New York. 
Ecker, K., and Zaks, S. 
[1977] On a graph labeling problem, Gesellschaft fiir Mathematik und Datenverarbeitung 
mbH, Seminarbericht No. 99. 
Eilenberg, Samuel 
[1974] "Automata, Languages and Machines," Vol. A. Academic Press, New York. 
Erdos, Paul 
[1961] Graph theory and probabiUty, II, Canad. J. Math. 13, 346-352. MR22 # 10925. 
Erdos, Paul, and Gallai, Tibor 
[1960] Graphen mit Punkten vorgeschriebenen Grades, Mat. Lapok 11, 264-274. 
Golumbic, Martin Charles 
[1978a] Threshold graphs and synchronizing parallel processes, in "Combinatorics" (A. 
Hajnal and V. T. Sos, eds.), Colloq. Math. Soc. Janos Bolyai, Vol. 18, pp. 419-428. 
North-Holland, Budapest. 
[1978b] Trivially perfect graphs. Discrete Math. 24, 105-107. 
Hammer, Peter L., Ibaraki, T., and Simeone, B. 
[1978] 
Degree sequences of threshold graphs, Univ. of Waterloo, Dept. of Combinatorics 
and Optimization, Res. Report CORR 78-10. 
Henderson, Peter B., and Zalcstein, Y. 
[1977] A graph-theoretic characterization of the PV chunk class of synchronizing primatives, 
SI AM J. Comput. 6, 88-108. 
Leibowitz, Rochelle 
[1978] Interval counts and threshold graphs, Ph.D. thesis, Rutgers Univ. 
Orlin, J. 
[1977] The minimal integral separator of a threshold graph, Ann. Discrete Math. 1,415-419. 
Peled, Uri 
[1977] 
Matroidal graphs, Discrete Math. 20, 263-286. 
Poljak, S. 
[1974] A note on stable sets and coloring of graphs, Comm. Math. Univ. Carolinae 15, 
307-309. 
Teng, Albert Y., and Liu, Ming T. 
[1978] A formal approach to the design and implementation of network communication 
protocol, Proc. CO MPS AC 78, Chicago, Illinois, 722-727. 
Vantilborgh, H., and van Lamsweede, A. 
[1972] On an extension of Dijkstra's semaphore primitives,/«/brm. Process. Lett. 1,181-186. 

CHAPTER 11 
Not So Perfect Graphs 
1. 
Sorting a Permutation Using Stacks in Parallel 
Let TT be a permutation of the numbers {1, 2,..., n}, which we will regard 
as the sequence n = [TT^, 712,..., TTJ. We would like to sort n into natural 
order using a system of stacks arranged in parallel, illustrated in Figure 11.1. 
Initially, the permutation sits on the input queue. Two types of moves are 
allowed: (i) moving the number at the head of the input queue onto the top 
of one of the stacks or (ii) moving a number from the top of a stack to the tail 
of the output queue. A successful sorting is accomplished by transferring all 
numbers to the output queue in the order [1,2,..., n] by repeatedly applying 
(i) and/or (ii). 
Given a sufficient number of stacks, any permutation can be sorted in this 
manner. But when can a permutation n be sorted using a system of only m 
stacks in parallel? For example, the sequence n = [3, 5,4,1, 6,2] requires 
three stacks, since the numbers 3, 5, and 6 must be stored on different stacks 
until 2 has reached the output queue. The observation that 3, 5, and 6 occur 
in their natural order but are followed by the smaller number 2 is the key to 
converting this sorting problem into a graph coloring problem. 
Let //[TT] be the undirected graph having vertices {1,2,..., n} with 7 and 
k adjacent if there exists an / such that 
i <j < k 
and 
nj ^ < TT^" ^ < TT^" \ 
235 

236 
11. 
Not So Perfect Graphs 
Figure 11.1. A system of stacks in parallel. 
We can read nl~^ = (TT"^), as "the position of / in TT." An example of this 
construction is given in Figure 11.2. We call //[TC] the stack sorting graph 
of n. It is a straightforward exercise to show the following: 
n can be sorted in a system of m stacks in parallel if and only if the chro-
matic number of //[TI] is at most m. 
One possible application of this sorting technique is in rearranging the 
railroad cars of a train in a switching yard (see Knuth [1969, Section 2.2.1; 
1973, pp. 169-170], Even and Itai [1971], and Tarjan [1972]). 
Let M" be the collection of all graphs G such that G is isomorphic to H[^K] 
for some permutation n. Very little is known about the class Jf. There have 
been no efficient recognition or coloring algorithms produced for the graphs 
in Jif which are in general not perfect graphs. Neither is there a good graph 
theoretic characterization. Our reason for introducing the class Jf is to show 
an equivalence between Jif and another class of graphs which has frustrated 
mathematicians for some years, namely, the circle graphs. 
© 
® 
Figure 11.2. The graph //[3, 5, 4, 1, 6, 2]. 

2. 
Intersecting Chords of a Circle 
2. 
Intersecting Chords of a Circle 
237 
An undirected graph G is called a circle graph if it is isomorphic to the 
intersection graph of a finite collection of chords of a circle (see Figure 11.3). 
Without loss of generality, we may assume that no two chords share a 
common endpoint. 
Theorem 11.1 (Even and Itai [1971]). An undirected graph G is a graph 
of intersecting chords of a circle if and only 
G - {all isolated vertices} = H[7i] — {all isolated vertices} 
for some permutation n. 
This theorem will be proved constructively by demonstrating two tech-
niques, Algorithms 11.1 and 11.2, whose correctness will be shown in 
Propositions 11.2 and 11.3, respectively. The algorithms transform one 
representation into the other. 
Remark 1. The subtraction of isolated vertices in the theorem is required. 
Two intersecting chords would give the complete graph on two vertices, 
whereas any graph if [TT] which has an edge must have at least three vertices. 
Remark 2. From the point of view of coloring, covering by cliques, and 
finding a maximum stable set or maximum clique, isolated vertices neither 
add to nor subtract from the essential complexity of the problem. 
Remarks. 
A circle with intersecting chords enables us to generalize the 
notion of a matching diagram which we encountered in Section 7.4. Further-
more, sorting a permutation using stacks in parallel is very much like the 
problem of sorting a permutation using parallel queues discussed in Section 
t 
f 
Figure 11.3. A set of chords and its intersection graph. 

238 
11. 
Not So Perfect Graphs 
7.5. The remarkable feature of Theorem 11.1 is that the equivalence estab-
lished in Chapter 7 between permutation graphs and sorting in parallel 
queues extends to an equivalence between circle graphs and sorting in 
parallel stacks. 
Algorithm 11.1. Constructing a circle with chords from a permutation. 
Input: 
A permutation n of the numbers 1, 2,..., n. 
Output: 
A circle ^ with n chords. 
Method: 
The algorithm is as follows: 
1. 
DRAW A CIRCLE. Label nodes TTJ , TTJ , . . . , 7i„ in a clockwise manner. 
2. 
We go once around the circle clockwise starting just prior to TTJ . 
3. 
for / <- 1 to rt do 
4. 
if you have not passed by node / 
5. 
then SKIP clockwise to /; 
6. 
Draw another node / immediately clockwise (but before the next node); 
7. 
next /; 
8. 
DRAW chords matching the pairs of numbers. 
Example 11.1. We apply Algorithm 11.1 to the permutation n = 
[2, 9, 4, 6, 7, 1, 3, 8, 5]. The instructions executed by the algorithm are 
given in Figure 11.4 along with the stack sorting graph //[TT] and the initial 
and final configurations for the circle ^ of chords. 
Proposition 11.2. Given a permutation n. Algorithm 11.1 constructs a 
set of chords of a circle whose intersection graph is isomorphic to //[TC]. 
Proof. Suppose / and k are adjacent in //[TI] and assume ; < k. Then 
there is an / such that i <j < k and n]' ^ < n^^ < TC," \ which implies that 
after the ith iteration of Algorithm 11.1 7 and k have already been passed 
o 
Initial configuration 
H [ 2 , 9 , 4 , 6 , 7 J , 3.8. 5] 
Figure 11.4. 
Algorithm 11.1 applied to the permutation n = [2, 9, 4, 6, 7, 1, 3, 8, 5]. The 
instructions executed are as follows. 
Skip to 1; draw a 1. Draw a 2. Skip to 3; draw a 3. Draw a 4. Skip to 5; draw a 5. Draw 6-9. 

2. 
Intersecting Chords of a Circle 
239 
over. Hence we shall write the new j before the new k, and their chords will 
therefore intersect. 
Conversely, suppose two chords intersect and, reading clockwise around 
the circle from the starting point, their endpoints are labeled 7, kj, k* Thus 
j < k and n^^ < n^^. Since in the 7th iteration we had already passed the 
first k, there must be an /, / < 7, such that during the iih iteration we skipped 
over k to the first occurrence of i. Thus, Uj^ ^ < 7c~ \ so j and k are adjacent 
in //[TT]. 
' 
I 
Algorithm 11.2. Constructing a permutation from a circle with chords. 
Input: 
A circle ^ with chords. 
Output: 
A permutation n of the numbers 1, 2,..., n. 
Method: 
The algorithm is as follows: 
1. Pick a number n (a lucky choice will eliminate renumbering later); 
2. Initialize \i'<r-n; pick a starting point (not an endpoint of a chord); 
3. for once around the circle going counterclockwise do 
begin 
4. 
if next endpoint p is unlabeled 
then 
5. 
label it /; label its opposite endpoint i'; 
6. 
decrement: i <- i — 1; 
else 
7. 
create a dummy endpoint on the circle just preceding /?; 
8. 
label the dummy /'; 
9. 
decrement :/<(-/— 1; 
10. 
skip to just prior to the next unlabeled endpoint; 
end 
11. 
renumber everything so that the smallest label is 1 (by subtracting the final value of / from 
each); 
12. print the sequence of primed numbers running clockwise from the starting point and call 
them Til, 712, ... , respectively; 
Example 11.2. Applying Algorithm 11.2 to the circle ^ in Figure 11.5, 
we obtain the permutation n = [7, 4, 2, 10, 6, 1, 8, 3, 9, 5]. The instructions 
executed by the algorithm and the final (labeled) configuration for ^ are 
also given. 
Proposition 11.3. Given a set of chords of a circle ^, Algorithm 11.2 finds 
a permutation n such that the intersection graph of ^ is isomorphic to 
//[TC] — {some isolated vertices}. 
* The second occurrences of 7 and k were created from the index of the loop, which is in-
creasing. 

240 
11. 
Not So Perfect Graphs 
C\ 
Initial configuration 
Final configuration 
'€. The instructions executed are the 
Figure 11.5. Algorithm 11.2 applied to the circle 
following. 
We cheat and pick « = 10. Label chords 10, 9, 8, 7, and 6. Create dummy 5' and skip over 9'. 
Label chord 4. Create dummy 3' and skip over 8'. Label chord 2. Create dummy V and skip 
over 6', 10', 2', 4', and 7'. The permutation is TT = [7, 4, 2, 10, 6, 1, 8, 3, 9, 5]. 
Proof. Suppose 7 and /c are adjacent in //[TT] and assume 7 < fe. Then 
there is an i such that i < j < k and their primed versions appear in the 
clockwise order/, k\ i'. This impHes that/ and k' are not dummy endpoints.* 
Since unprimed numbers occur in decreasing order going counterclockwise, 
it follows that the jth and feth chords intersect. 
Conversely, if the 7th and /cth chords intersect with j. < /c, then k' was 
skipped over after labeling some dummy endpoint i\ where i < j . So 
I 
^ < TUfc ^ < 7c. ^ and; and k are adjacent in H[n], 
For small examples these algorithms are easy to do by hand. We would 
like to suggest a data structure suitable for performing the algorithms on a 
computer. A circle ^ with chords may be represented by either a list or an 
array consisting of the endpoints of the chords given in the counterclockwise 
order, beginning with a fixed but arbitrary starting point. There will be 
pointers providing direct access from one endpoint of a chord to the opposite 
endpoint. An example of this data structure is given in Figure 11.6. Notice 
that ARRAY(0 = ARRAY(OPPOSITE(0) for all i in the example. 
To implement Algorithm 11.2 we scan the data structure corresponding to 
^ once from left to right, labeling endpoints appropriately The property of 
an endpoint being primed can be coded into the label. On the other hand. 
Algorithm 11.1 would receive its input n as the reversed Hst [7r„,..., 712, TTJ 
into which the new nodes are inserted. As the list is scanned from right to 
left, we keep track of which numbers have been passed by using an auxiliary 
bit vector. Both of these implementations can be carried out in time and 
space proportional to the size of the input. 
* Because any dummy endpoint following /' counterclockwise would have smaller value. 

2. 
Intersecting Chords of a Circle 
241 
4 
5 
Array : 
Opposite : 
1 
3 
4 
2 
1 
12 
3 
7 
10 
4 
3 
1 
5 
6 
8 
6 
4 
13 
7 
5 
14 
8 
6 
5 
9 
2 
11 
10 
7 
3 
11 
2 
9 
12 13 14 
1 
2 
4 
6 
5 
7 
Figure 11.6. Data structures for a circle with chords. 
Mark Buckingham has suggested the following algorithm to construct the 
adjacency sets of the intersection graph obtained from a circle with chords. 
Algorithm 11.3. 
Input: 
The data structure DS, as described above, representing a collection 
of n chords of a circle. 
Output: 
The adjacency sets of the intersection graph. 
Method: 
The algorithm is given in Figure 11.7. We traverse DS (i.e., the 
circle counterclockwise) exactly once. Chords 7 and k intersect if and only if 
their endpoints occur in the order [/c,;, /c,)] or [j, kj, /c]. Each chord k is 
added to the end of a list called LIST when its first endpoint is encountered 
(line 4). It remains there until the second endpoint is reached at which time 
all chords j on the LIST following k are discovered to intersect chord k 
(lines 5-7). Then k is removed from the LIST (line 8). An array POINTER(fe), 

242 
11. 
Not So Perfect Graphs 
begin 
1 
initialize: LIST <- 0 ; for / ^ 1 to n do Adj(/) ^ 0 ; ; 
2 
for each entry k of DS do in order 
3 
if/: is not on LIST 
then 
4. 
append/: to the tail LIST; 
else 
5. 
for each7 to the right of k on LIST do 
6. 
addyto Adj(A:); 
7. 
addArto AdjO); 
next7; 
8. 
delete A: from LIST; 
next k; 
end 
Figure 11.7. Algorithm 11.3. 
initially undefined, may be used to execute efficiently the test in line 3 and the 
access to the starting point in line 5. A proof of correctness is left as Exercise 8. 
Remark. Touchard [1952], Riordan [ 1975], and Read [ 1979] investigate 
a generating function for the number of ways of drawing n chords of a circle 
so as to obtain k intersections. 
3. 
Overlap Graphs 
The circle graphs are equivalent to yet another popular class of graphs, 
namely, the overlap graphs. Given a collection of intervals on a line, each pair 
of intervals will satisfy exactly one of the following properties. 
Overlap. The two intervals intersect but neither properly contains the 
other. 
Containment. One of the two intervals properly contains the other. 
Disjointness. The two intervals have empty intersection. 
A graph G is called an overlap graph if its vertices may be put into one-to-one 
correspondence with a collection of intervals on a line such that two vertices 
are adjacent in G if and only if their corresponding intervals overlap (not 
just intersect). Without loss of generality we may assume that the intervals 
are either open or closed and that no two intervals have a common endpoint. 
Let J = {Ix}xev be a collection of intervals on a line, and assume that no 
two intervals have a common endpoint. The pairs of distinct indices are 

3. 
Overlap Graphs 
243 
if 
either /^ cz /^ or 
ly ci /^ 
partitioned into three mutually disjoint sets A, B, D as follows: For distinct 
x.yeV, 
xyeA 
if 0 ^ I^n ly ^ I^, ly 
(i.e., the intervals overlap); 
xyeB 
(i.e., one interval properly contains the other); 
xye D 
if I^n Iy = 0 
(i.e., the intervals are disjoint). 
Clearly, A, B, and D are symmetric relations partitioning all pairs. Thus we 
have that (V, A) is the overlap graph represented by ^, (V,A -\- B) is the 
interval graph represented by J, and (K, D) is a comparability graph since 
its complement is an interval graph. Furthermore, defining 
xy e C 
if 
/v CI L, 
and 
xy G F 
if I^ lies entirely to the left of 7^, 
it follows that (K, C) and (F, F) are transitive orientations of (V,B) and 
(K, D), respectively. An example of these graphs is illustrated in Figure 11.8. 
^ 
^ 
. 
^ 
V 
(a) 
£ 
/ 
^ 
^ 
Figure 11.8. (a) A collection./of intervals, (b) The overlap graph {V.A) of/, (c) The interval 
graph (K A -{- B) of J. (d) The transitive orientation (K C) representing proper containment, 
(e) The transitive orientation (V, F) representing disjointness. 

244 
11. 
Not So Perfect Graphs 
Figure 11.9. Intersecting chords of the circle correspond to overlapping intervals on the line. 
This projection method is suggested by Gavril [1973]. Relative to this choice of/?, we have 
4 and /fc overlapping, 4 and I, overlapping, /„ and I, disjoint, and 4 containing 4 . 
We have the following easy result. 
Proposition 11.4. An undirected graph G is a circle graph if and only if 
G is an overlap graph. 
Proof. Given a circle with chords, choose a point p on the circle which is 
not an endpoint of a chord. To each chord with endpoints c and c' we associate 
the arc along the circle from c to c' which does not contain p. If the circle is 
cut at point p, then we will obtain a line with a collection of intervals having 
the desired property. 
This process may be reversed by wrapping a collection of intervals of a 
line around a circle and then drawing a chord between the two endpoints of 
each interval. 
| 
An alternate way to visualize this equivalence is by placing the circle 
tangent to a line, with p as the north pole, and the point of tangency as the 
south pole. Projecting the chords down to the line, as in Figure 11.9, we 
obtain the correspondence. Our data structure for representing a circle with 
chords is simply a discrete version of this linearization. 
Fast Algorithms for Maximum Stable Set and 
Maximum Clique of These Not So Perfect Graphs 
In the preceding sections we demonstrated the equivalence of the stack 
sorting graphs, the circle graphs, and the overlap graphs. We are therefore 
free to choose whichever model suits us best in order to prove properties 
about the class. 
As we mentioned earlier, there are a number of open problems concerning 
this class of graphs. 

4. 
Fast Algorithms for These Not So Perfect Graphs 
245 
(i) Find an algorithm which recognizes circle graphs and constructs a 
representation for the graph as intersecting chords of a circle. 
(ii)* Are the coloring and clique-cover problems NP-complete for circle 
graphs? 
(iii) 
Is the strong perfect graph conjecture true for circle graphs? 
The stable set problem and the clique problem are tractable when restricted 
to our not so perfect graphs. In the context of open problem (i), it is essential 
that we be given, a priori, a representation of the graph as overlapping 
intervals, intersecting chords, or a permutation to be sorted. We choose to 
use the overlap graph model. We first present a solution to the stable set 
problem, due to Gavril [1973], which can be implemented to run in poly-
nomial time. 
Let \f = {Ix}xev ^^ a collection of intervals, let G = (F, A) be the overlap 
graph of ^ , and let C and F be the oriented containment and disjointness 
relations as defined in the preceding section. For all xe V, let 
U(x)= {ve 
V\vxeC} 
be the set of indices whose corresponding intervals are (properly) contained 
in /^. The algorithm is as follows. 
Algorithm 11.4. Maximum stable set of an overlap graph. 
Input: 
The (transitively) oriented containment relation (F, C) and the 
(transitively) oriented disjointness relation (K, F) of a collection J^ of inter-
vals whose overlap graph is G = (V, A). 
Output: 
A maximum stable set S of G. 
Method: 
We assign, to each vertex xeV, a. weight w(x) and a maximum 
stable set S(x) of G^^j ^ [/(^j, where w(x) = \ S(x) \. This is carried out recursively 
in such a way that vertices are assigned weights in a topologically sorted 
order with respect to C At the heart of the algorithm is the subroutine (from 
Chapter 5) MAXWEIGHT CLIQUE, which finds a set of pairwise disjoint 
intervals {I^JveT that generates, in line 6 of MAXSTABLE, the best possible 
stable set. The entire algorithm consists of the single call, 
begin 
S ^ MAXSTABLE(V); 
end 
and uses the recursive procedure in Figure ILIO. The assumption that F is 
transitive is crucial since it allows line 5 to be executed efficiently. 
* Garey, Johnson, Miller and Papadimitrious [1979] report that the coloring problem for 
circle graphs is NP-complete. 

246 
11. Not So Perfect Graphs 
procedure MAXSTABLE(J^): 
begin 
1. 
ifX = 0 then return 0 ; ; 
2. 
while there exists x e X with H'(JC) undefined do 
3. 
S{x) ^ {x] u MAXSTABLE((/(jc)); 
4. 
w{x)^\S{x)\--
5. 
T<- MAXWEIGHT CLIQUECA-, F^); 
6. 
return U^^T ^{^)\ 
end 
Figure 11.10 
Theorem 11.5 (Gavril [1973]). Algorithm 11.4 correctly finds a maxi-
mum stable set of an overlap graph. 
An example of Algorithm 11.4 applied to the intervals in Figure 11.8 
follows the proof of the theorem. 
Proof. We shall show that the procedure returns a maximum stable set 
of the subgraph Gx = {X, Ax) for any subset X ^ ^satisfying U{x) <= X for 
all xeX. The claim is certainly true if | AT | = 0. Assume that it is true for all 
subsets smaller than X. In particular, by induction, S{x) — [x] is a maximum 
stable set of Gu^^^, so S{x) is a maximum stable set of (J{X}U(;(X) f^^ Q2ich 
xeX. 
Let T be as defined in line 5. Since the intervals {/yj^gr ^^^ pairwise dis-
joint, and since 7^, c I^ for all x e S{v) — {v} and veT, it follows that 
J = [jveT^i^) is a stable set of Gx- Thus 
a(G;,)> Y.Hv) = \J\. 
(1) 
veT 
We must show that J is maximum. 
Let J' be a maximum stable set of G^, and let T be the set of sinks of 
iJ\ Cj,); i.e., 
T = {yeJ'\Iy^ 
I, implies z^ J'}. 
Note that the intervals represented by T are also pairwise disjoint, so, by the 
correctness of MAXWEIGHT CLIQUE, 
Iw(>;)< Y^^^^ivl 
(2) 
Now, clearly, if SXy) = {xeJ'\I^cz 
/^}, then |S'(y)\ = w(y) for all y e T\ for 
otherwise we could replace S'{y) with S{y) and obtain a larger stable set. 
Hence, 
<Gx) = \J'\^ Y.<y)' 
(3) 

4. 
Fast Algorithms for These Not So Perfect Graphs 
247 
Combining (l)-(3), we obtain 
which concludes the required proof. 
| 
Example 11.3. We apply Algorithm 11.4 to the intervals of Figure 11.8 
in order to find a maximum stable set of their overlap graph G = (K, A). The 
vertices can be assigned weights in any topologically sorted order with respect 
to C. We arbitrarily choose the order a,c,e,g,d,b,f. Clearly, w(a) = w(c) = 
w(e) = w{g) = 1 and S(a) = {a}, S(c) = {c}, S{e) = {el and S{g) = {g} 
since they are all sources of C. Next, S(d) = {d, e) and w(d) = 2 since MAX-
WEIGHT CLIQUE (C7(d),Fi;(^)) = U{d) = {e}. Now V{b) = {cj,e,g} 
and 
the heaviest clique in Fu^ij^ is {d, g}; thus S(b) = {b, d, g} and w(b) = 3. 
Similarly, S(f) = {f,g} and w(/) = 2. Finally, MAXWEIGHT CLIQUE 
(F, F) could be either {a, d, g} or {a, e,f}, both having weight 4. They give, 
respectively, the stable sets {a, d, e, g} and {a, e,f, g}. 
Next we provide an algorithm due to Gavril [1973] which solves the clique 
problem for circle graphs in polynomial time. The notions of matching 
diagram and permutation graph from Chapter 7 will be used. 
Let G = (K ^) be a circle graph with representing family {Cyj^gK of chords 
of a circle ^, and let N(v) = {v} + Adj(i;). 
Lemma 1. For every vertex veV, the induced subgraph G^^^^ is a permu-
tation graph. 
Proof. We may assume that no two chords have a common endpoint. 
Thus, the chord C^ cuts ^ into two pieces such that for x e Adj(i;) the chord 
C^ has one endpoint in each piece. Therefore, the subset D = {C^JxeAdHv) is 
a matching diagram whose permutation graph is GAdjdo- Since connecting a 
new vertex to every vertex of a permutation graph results in another permuta-
tion graph, it follows that G^^^^ is a permutation graph. 
| 
Lemma 2. If K is a clique of G, then X is a clique of G;v(t;) for each veK. 
Proof. Trivial. 
| 
Algorithm 11.5. Maximum clique of a circle graph. 
The algorithm is as follows: 
begin 
1. foTveVdoK,^ 
MAXCLIQUE(G^,„); 
2. return the largest ^y; 
end 

248 
11. 
Not So Perfect Graphs 
By Lemma 1, statement 1 can be executed efficiently. By Lemma 2, the 
algorithm is correct. Details are left to the reader as Exercise 11. 
5. 
A Graph Theoretic Characterization of Overlap 
Graphs 
Although we have shown the equivalence of circle graphs, stack sorting 
graphs, and overlap graphs, we have not really characterized them from a 
traditional graph theoretic point of view. In this section we shall present 
such a characterization. The solution, however, will fall short of providing 
us with an efficient recognition algorithm. 
Theorem 11.6 (Fournier [1978]). An undirected graph G = (V,E) is an 
overlap graph if and only if there exists an acyclic orientation P of G and two 
linear extensions Lj and L2 of P such that the relation F = (Lj n L2) — P 
satisfies 
xyeF, yzGL^ => xzeF 
(4) 
and 
xy E L2, yz e F =^ xz eF. 
(5) 
Remark. 
Such a relation F is transitive. 
Proof. (=>) Let J^ = {Ix}xev t>e a collection ofjclosed intervals on the 
real line, no two intervals sharing an endpoint, such that xx' is an edge of G if 
and only if /^ and I^^ overlap (i.e., they intersect but neither contains the 
other). We denote/^ = [a, b]and/^' = [a', fc']. Consider the binary relations 
defined on V as follows: 
xx'GP 
oa 
< a' < b < b\ 
xx' eL^oa 
< a\ 
xx'eLiob 
< b'. 
Clearly P is an acyclic orientation of G, and L^ and L2 are hnear extensions 
of P. The relation F = (L^ n Lj) — P satisfies 
xx' 
eFoa<b<a'<b' 
and represents /^ being entirely to the left of I^>. It is easy to see that (4) and 
(5) are satisfied. 
(<=) In the remainder of the proof, for any binary relation R we denote 
R{x)={y\xyGR}. 

5. 
A Graph Theoretic Characterization of Overlap Graphs 
249 
Let G = (K £) be an undirected graph on n vertices and let P, Lj, L2, and 
F satisfy the conditions of the theorem. To a vertex x of G we associate the 
interval /^ = [a, fc] as follows: 
b = 2n - \L2(x)\ - 
\P(x)\. 
We shall show that J = {Ix}xev is an overlap representation of G. 
Claim 1. \ < a < b <2n. 
We shall prove the inequality a < b, the others being trivial. By the 
definitions of a and fo, it is enough to prove the inequality 
\Li\x)\ 
+ \F-\x)\ 
+ | M x ) | + |F(x)| < 2(n - 1). 
(6) 
If x' eF~^(xX then x'^L2(x), because F c= L2 and L2 is antisymmetric; 
thus F~^{x) n L2(x) = 0. Similarly, F(x) n Li^(x) = 0. Thus, each mem-
ber x' of V is counted at most twice on the left side of (6) except for x itself, 
which is not counted at all. This proves Claim 1. 
For vertices x and x' (x / x'), where I^ = [a, fc] and I^' = [«', 6'] are 
defined as above, we shall show the following three implications: 
Claim 2. 
(i) xx' eL^ - (P u F)=> a < a' < b' < b, 
(ii) xx' E F =>b < a\ 
(iii) xx' e P => a < a' < b < b'. 
Notice that xx' eL^ — (P u F) if and only if xx' e Lj — L2, and since L2 is a 
total order, implication (i) would follow directly from 
(ii) 
xx' eL^ => a < a' 
and 
02) xx'GL2 => fc < b'. 
Let xx' eLi. 
Since L^ is a total order we have Lf ^(x) c: Li^(x'X 
and 
thus |L^^(x)| < |Lj"^(x')|. (The strict inequality is due to xeL^^(x') 
and 
x' ^ L i~ ^ (x).) Also, from property (i ^), we have F " ^ (x) c F " ^ (x'), so | F ~ ^ (x) | 
< |F"^(x')|. Combining these inequalities we obtain 
ILr'WI + \F-\x)\ < \L;\X')\ 
+ \F~\x')\, 
which yields a < a' and proves (ij. Implication (12) is proved in the same 
fashion. This proves (i). 
For implication (ii) we shall show that if xx' e F, then 
\L;\X')\ 
+ |F-Hx')| + |L2(x)| + |F(x)| > 2n. 
(7) 
Let x" e V. If x"^L^^{x') 
(i.e., x'x"$L^^\ 
then X'X"GLI since Lj is a 
total order; moreover, (4) implies that xx" sF (i.e., x" sF{x)\ 
and hence 
x"6L2(x). In an analogous manner, if x"^L2(x), then X " G F " ^ ( X ' ) and 

250 
11. 
Not So Perfect Graphs 
x" eL^^(x'). 
Thus, each vertex of V, including x and x\ is counted at least 
twice on the left side of (7). This proves (ii). 
For implication (iii), since (ii) and (i2) hold, it is sufficient to show that if 
xx' E P then a' < b, or equivalently, if xx' e P, then 
\L-,\x')\ 
+ \F-\x')\ 
+ \LAx)\ + \F{x)\ < 2{n - 1). 
(8) 
It is easy to verify that if x" eF~ ^{x') then x" $ L2{x) and x" $ F(x) (since F 
is a transitive relation). Similarly, if x" e F(xX then x" ^L^^(x') 
and x" ^ 
F~ ^{x'). Thus, each element of V is counted at most twice on the left side of 
(8), except for x and x\ which are counted exactly once each (x e L^^{x') 
and x' G L2(x)). This proves (iii) and concludes Claim 2. 
Finally, the three conditions of (i)-(iii) are mutually exclusive and cover 
all possibilities. Therefore, the opposite implications also hold in (i)-(iii). In 
particular, 
xx' eP oa < a! <b <b'. 
Since P is an orientation of G, we conclude that 
xx'eGoI^ 
and I^^ overlap, 
and J = {Ix}xev is the desired overlap model of G. 
| 
Remark. 
If the relation F in Theorem 11.6 is empty, then G is a permuta-
tion graph; conversely, for every permutation graph there exist relations 
P,Li, and L2 as in the theorem with P = Lj n L2 (as in the proof of Theorem 
7.1.) However, even when G is a permutation graph there may very well exist 
other relations P, Li, and L2 satisfying the conditions of the theorem for 
which P ^ L^ n L2. For example, letting G = K^ with P = 0, 
L^ = 
[x < y < z], and L2 = [_x < z < y~\, we obtain Lj n L2 ^ 0 . 
Historical Note 
We began this chapter by discussing a problem using stacks. We conclude 
with an historical note on one of the oldest written references to the notion of 
"last-in, first-out."* The reference occurs in a commentary by Rashi (Rabbi 
Solomon ben Isaac) on the Biblical verse 
Then his brother emerged, his hand seizing Esau's heel; so they named 
him Jacob.! Isaac was sixty years old when they were born [Genesis 
XXV, 26]. 
* We are indebted to Gideon Ehrlich for pointing out this reference in a communication with 
Edward M. Reingold, who then passed it on to the author. The translation of the Rashi quotation 
is due to E. M. Reingold. 
t In Hebrew, Ya'akov, play on the word 'aqev meaning "heel." 

Exercises 
251 
Rashi lived from 1040 to 1105 A.D., residing primarily in Troyes, France, 
his birthplace, where he founded one of the leading schools of the time. He is 
the most famous biblical and talmudic commentator in all of Jewish history. 
His commentary on this verse is as follows: 
I heard a Midrashic legend expounding on the meaning [of the phrase 
"Then his brother emerged . . . " ] . It was his [Jacob's] right, the grasping 
of his [Esau's] heel: Jacob was conceived from the first drop and Esau 
from the second. Consider a tube with narrow mouth. Put two stones 
into it, one after the other—the first to enter exits last and the last to 
enter exists first. It is [thus] found [that] Esau, conceived last, exited 
first, and Jacob, conceived first, exited last. [Thus] Jacob went to delay 
him [Esau] so that he [Jacob] would be first born G^st] as he was first 
produced and to be a first fruit of the womb and to take the birthright 
[as he deserved] according to the law. 
Rashi is clearly describing a stack mechanism. 
EXERCISES 
1. Find a permutation n whose graph //[TT] is a chordless pentagon plus 
some isolated vertices. 
2. 
Using the data structure suggested in the text, write computer programs 
to implement Algorithms 11.1 and 11.2 and test them on the examples given 
in this chapter. 
3. 
Does //[TC] always have some isolated vertices? Prove that if //[TT] has 
exactly one isolated vertex then //[TC] = G[7r] but not conversely (see 
Chapter 7). 
4. 
Show that if the output of Algorithm 11.2 is used as the input of Al-
gorithm 11.1, then the resulting composition may change the set of chords. 
Modify Algorithm 11.2 so that this does not happen. 
5. 
By an arbitrary convention we have discussed sorting a permutation n 
in a parallel system of stacks from right to left. The problem of sorting n 
from left to right* is equivalent to forming n from [1,2,..., n] from right to 
left. In this case one should study the coloring problem on the undirected 
graph //^[TC] having vertices {1, 2,..., n} with i and 7 adjacent if there is a fc 
such that i <j < k and n^^ < n^^ < nj^. 
In general the chromatic 
numbers of //[TT] and //^[TC] are different. 
* n would emerge first and 1 last. 

252 
11. 
Not So Perfect Graphs 
Let the function p: / h^ n + 1 — / act on the labeled vertices of a graph* 
and be composed with other permutations in the obvious way. Also let 
jfp={G\G^ 
H^M for some TT}. Prove the following: 
(i) poH^lTl] = //[poTTop], 
(ii) 
p o / / [ 7 r ] = / / ^ [ p o T T o p ] , 
(iii) 
je = je^. 
6. 
Let the graph //[TC] be properly colored using t colors. Show that the 
following algorithm correctly sorts n using a network of t stacks in parallel. 
Input: 
The permutation n with the numbers properly colored. 
Output: 
The permutation [1, 2,..., n] sorted. 
Method: 
The t stacks are in one-to-one correspondence with the colors. 
The algorithm is as follows: 
begin 
A: ^ 
1 ; 
while k < n do 
if k can be moved onto the output queue then 
move k onto the output queue; 
else 
move the next number of the input queue onto the stack of its color;; 
end 
7. 
Show that a permutation n can be sorted in a network of k stack in 
parallel under the restriction that all numbers must be loaded into the stacks 
before any unloading can begin if and only if its reversal n^ can be sorted in a 
network of k queues in parallel. Give some additional equivalent con-
ditions. 
8. Prove that Algorithm 11.3 correctly calculates the adjacency sets of the 
graph G = (V,E) of intersecting chords of a circle. Show that the algorithm 
can be implemented to run in 0(| K| + |£|). 
9. Let f(n) be the length of the shortest string of numbers from {1,2,..., n} 
which contains all n! permutations as subsequences. Prove that f(n) < n^ — 
2n + 4(n>3) 
(Koutas and Hu [1975]). 
10. 
Determine the computational complexity of Algorithm 11.4. 
n . 
Determine the computational complexity of Algorithm 11.5 taking into 
consideration that each subgraph G;v(t;) must be calculated. 
12. A circle ^ with chords admits an equator if an additional chord may be 
added to ^ which will intersect every other chord. 
(i) Prove that G is a permutation graph if and only if G is the intersection 
graph of a circle of chords which admits an equator. 
(ii) Give an example of a circle ^ which does not admit an equator but 
whose intersection graph is a permutation graph. 
13. The sequence of operations used in sorting the permutation [3,5,4,1,6,2] 
*denoted p • G. 

Bibliography 
253 
as in Section 11.1 can be abbreviated by the code 
where S^ stands for "move the next number from the input queue onto 
stack /" and X, stands for "move the number at the top of stack i to the 
output queue." Some sequences of S/s and X^'s specify meaningless opera-
tions; for example, the sequence SiS2SiX2X^S2X2XyS2X^ 
cannot be 
carried out. 
We call a sequence of S, 's and X^s admissible if it contains the same 
number of S/s and X,'s for each integer i, and if it specifies no operation that 
cannot be performed. Formulate a rule which distinguishes between ad-
missible and inadmissible sequences (Knuth [1969, Exercise 2.2.1, No. 3]). 
Bibliography 
Even, Shimon, and Itai, Alon 
[1971] Queues, stacks and graphs, in ''Theory of Machines and Computations," pp. 71-86. 
Academic Press, New York. 
Fournier, Jean-Claude 
[1978] 
Une caracterization des graphes de cordes, C.R. Acad. Sci. Paris 286A, 811-813. 
Garey, M. R., Johnson, D. S., Miller, G. L., and Papadimitrious, C. H. 
[ 1979] The complexity of coloring circular arcs and chords, submitted for publication. 
Gavril, Fanica 
[1973] Algorithms for a maximum clique and a minimum independent set of a circle graph, 
Networks 3, 261-273. MR49 #4862. 
Knuth, Donald E. 
[1969] "The Art of Computer Programming," Vol. 1. Addison-Wesley, Reading, Massa-
chusetts. 
[1973] ''The Art of Computer Programming," Vol. 3. Addison-Wesley, Reading, Massa-
chusetts. 
Koutas, P. J., and Hu, T. C. 
[1975] Shortest 
string containing all permutations, Discrete Math. 
11, 125-132. 
MR50 #12740. 
Read, Ronald C. 
[1979] The chord intersection problem. Ann. N. Y. Acad. Sci. 319, 444-454. 
Riordan, John 
[1975] The distribution of crossings of chords joining pairs of 2n points on a circle, Math. 
Comp. 29, 215-222. MR51 #2933. 
Tarjan, Robert Endre 
[1972] Sorting using networks of queues and stacks, /. Assoc. Comput. Mach. 19, 341-346. 
MR45#7852. 
-
Touchard, Jacques 
[1952] Sur un probleme de configurations et sur les fractions continues, Canad. J. Math. 4, 
2-25. MR13, p. 716. 
Zelinka, Bohdan 
[1965] The graph of the system of chords of a given circle, Mat.-Fyz. Casopis Sloven. Akad. 
Vied 15, 273-279. MR33 #2575. 

CHAPTER 
12 
Perfect Gaussian Elimination 
1. 
Perfect Elimination Matrices 
Let M be a nonsingular n x n matrix with entries m^j in some field (like 
the real numbers). We reduce M to the identity matrix I by repeatedly 
(a) choosing a nonzero entry rriij to act as pivot and 
(b) updating the matrix by using elementary row and column operations 
to change m^j to 1 and to make all other entries in the iih row andjth column 
equal to 0. 
This familiar technique is called Gaussian elimination* and can be found in 
most books on linear algebra. 
When performing Gaussian elimination on a sparse matrix, an arbitrary 
choice of pivots may result in the filling in of some zero positions with 
nonzeros. One may ask, when is there a sequence of pivots which induces no 
fill-in? A perfect elimination scheme for M is a sequence of pivots which 
reduces M to I without ever changing a zero entry (even temporarily) to a 
nonzero. Such a sequence does not exist for every matrix. When M has a 
perfect elimination scheme and M is also sparse, then the sparseness can be 
preserved throughout the reduction. This is important for the storage 
requirements of M since a sparse matrix is most efficiently represented in a 
computer by listing its nonzero entries. 
* In practice one usually "zeros out" just theyth column postponing calculations on the 
rth row until the end, at which time back substitution is used. For our purposes the methods are 
the same. 
254 

1. 
Perfect Elimination Matrices 
255 
/ ® 
1 1 
Bad 
1 1 1 0 
0 
Choice: 1 1 0 1 0 
1 0 
0 1 
U 
1 1 
Good 
/ 1 1 0 0 
Choice: | 1 0 
1 0 
1 0 
0 ® ^ 
2 
1 0 
0^ 
1 ® 
0 0 
0 0 
1 0 
0 0 0 
1) 
Figure 12.1. Two reductions of a matrix. 
Examples. 
Two reductions of the same matrix are given in Figure 12.1; 
the first introduces new nonzeros but the second does not. What causes the 
fill-in? It is easy to see that pivoting on a nonzero entry niij will introduce 
some fill-in if m^^ / 0 and rrin / 0 but m^, = 0 for some 5 and t (see Figure 
12.2). The matrix in Figure 12.3 is nonsingular but has no perfect elimination 
scheme. Any entry chosen as the first pivot will cause some fill-in. A tri-
diagonal matrix, as indicated in Figure 12.4, has a number of perfect elimina-
tion schemes, one being the positions on the main diagonal ordered from top 
to bottom. 
S. 
H 
H. 
/ 
Figure 12.2. Choosing position (/, j) as pivot results in filling in position {s, t). Thus the 
choice is unacceptable. The asterisks indicate nonzeros. 
Figure 12.3. A matrix with no perfect 
eHmination scheme. 
Figure 12.4. A tridiagonal matrix. The 
asterisks indicate the nonzero entities. 

256 
12. 
Perfect Gaussian Elimination 
Throughout this chapter we shall assume that M is nonsingular and that 
arithmetic coincidence does not cause new zeros to occur during the re-
ductions.* 
Let us look at the problem graph theoretically. 
The graph G(M) of M has vertices Vi,...,v„, 
with Vi Vj being an edge if and 
only if i ^ j and entry m^^ ^ 0. The bipartite graph B(M) of M has vertices 
Xj,..., x„ and J^i,..., y„, corresponding to the rows and columns, respec-
tively, where x, is adjacent to y^ if and only if m,-y 7^ 0. We call Xi and yi part-
ners; their correspondence with vertex i;, of G(M) is obvious. 
2. 
Symmetric Matrices 
If M is a symmetric matrix, then G(M) is an undirected graph. In this case 
a nonzero diagonal entry m,^ is acceptable as a pivot if and only if Vi is a 
simplicial vertex of G(M). (Why?) In fact, pivoting on ma is equivalent to 
making Ad}(Vi) into a complete subgraph by adding any missing edges and 
deleting i;^.. Therefore, the perfect elimination schemes for M under the 
restriction that 
(R) 
all pivots are chosen along the main diagonal whose entries are each 
nonzero 
correspond precisely to the perfect vertex elimination schemes of G(M). By 
Theorem 4.1 we obtain the equivalence of statements (ii) and (iii), first 
obtained by Rose [1970], in the following theorem. We present a generaliza-
tion due to Golumbic [1978]. 
Theorem 12.1. Let M be a symmetric matrix with nonzero diagonal 
entries. The following conditions are equivalent: 
(i) M has a perfect elimination scheme; 
(ii) M has a perfect elimination scheme under restriction (R); 
(iii) 
G(M) is a triangulated graph. 
Before proving the theorem, we must introduce a bipartite graph model 
of the elimination process. This model will be used here and throughout the 
chapter. 
An edge e = xy of a bipartite graph H = (17, E) is bisimplicial if Adj(x) + 
Adj(y) induces a complete bipartite subgraph of H. Take note that the 
* Actually it is sufficient to assume that no coincidental new zero will be found in a position 
which we want to choose as pivot (expecting it to be nonzero) at the time when we want to choose 
it. 

2. 
Symmetric Matrices 
257 
Figure 12.5. 
bisimpliciality of an edge is retained as a hereditary property in an induced 
subgraph. Let a = [^j, ^2^ • • • ^^fc] be a sequence of pairwise nonadjacent 
edges of H. Denote by S, the set of endpoints of the edges e^,..., ^„ and let 
So = 0' We say that cj is a perfect edge elimination scheme for H if each edge 
Ci is bisimplicial in the remaining induced subgraph Hu^Si^ 
^^^ ^u-Sn ^^^ 
no edge. Thus, we regard the elimination of an edge as the removal of all edges 
adjacent to e. For example, the graph in Figure 12.5 has the perfect edge 
elimination scheme [x^yi, X2y2^ ^^y^^ ^Ary^l' Notice that initially X2y2 is 
not bisimplicial. A subsequence G' = [e^, ^2,..., ^J of cr (fc < /t) is called a 
partial scheme. The notations H — G' and Hu^Sj, will be used to indicate the 
same subgraph. 
Consider the bipartite matrix B(M) of M. It is evident that bisimplicial 
edges of B(M) correspond precisely to acceptable pivots of M and that 
perfect edge elimination schemes for ^(M) correspond to perfect elimination 
schemes for M. (See Figure 12.2 again in conjunction with Figure 12.6.) 
Proof of Theorem 12.1. We have already remarked that (ii) and (iii) are 
equivalent, and since (ii) trivially implies (i), it suffices to prove that (i) 
implies (iii). Let us assume that M is symmetric with nonzero diagonal 
entries, and let G be a perfect edge elimination scheme for B{M). 
Suppose G(M) has a chordless cycle [t;^,^, v^^,..., v^^, v^J. This corresponds 
in B(M) to the configuration Be (Figure 12.7) induced by C = {x^^, 
y^^,..., 
^am^y<xrJ' Consider the first edge e of G involving a vertex of C. Clearly, e 
involves only one vertex of C since none of the edges of Be is bisimplicial. 
Assume without loss of generality that e = x^^y^ for some vertex y^ ^ C, and 
let Xj be the partner of j;^. 
Figure 12.6. The edge x,>'j is not simplicial. A broken line indicates a nonedge. 

258 
12. 
Perfect Gaussian Elimination 
Figure 12.7. The indicated subgraph Be of B{M). 
Since in Be, Adj(x,^) = {ya,,^^,,}^^^} and kA]{yJ n Adj(>;,^) n AdjCy.J 
== {x^J, the simpliciality of x^^y^ implies that C n AdjCyJ = {x^J, and by 
symmetry C n Adj(Xs) = {j^aj- Thus, we have that x^^y^:, and x^ys are edges 
but x^y^^ is ^^t ^^ edge, which contradicts the bisimpHciahty of x^^y^. 
Therefore, G(M) is triangulated. 
| 
Corollary 12.2. A symmetric matrix with nonzero diagonal entries can be 
tested for possession of a perfect elimination scheme in time proportional to 
the number of nonzero entries. 
Proof. Let m denote the number of nonzero entries of matrix M. If M is 
stored in 0{m) space, then the data structures needed for applying Algorithms 
4.1 and 4.2 to G(M) can be initialized in 0{m) time. The result follows from 
Corollary 4.6. 
| 
Theorem 12.1 characterized perfect elimination for symmetric matrices. 
Moreover, it says that it suffices to consider only the diagonal entries. 
Haskins and Rose [1973] treat the nonsymmetric case under (R), and 
Kleitman [1974] settles some questions left open by Haskins and Rose. The 
unrestricted case was finally solved by Golumbic and Goss [1978], who 
introduced perfect ehmination bipartite graphs. These graphs will be dis-
cussed in the next section. Additional background on these and other 
matrix elimination problems can be found in the following survey articles and 
their references :Tarjan [1976], George [1977], and Reid [1977]. A discussion 
of the complexity of algorithms which calculate minimal and minimum 
fill-in under (R) can be found in Ohtsuki [1976], Ohtsuki, Cheung, and 
Fujisawa [1976], Rose, Tarjan, and Lueker [1976], and Rose and Tarjan 
[1978]. 

3. 
Perfect Elimination Bipartite Graphs 
259 
3. 
Perfect Elimination Bipartite Graphs 
The general problem of deciding if a given (nonsymmetric) matrix M has 
a perfect elimination scheme can be answered using the bipartite graph model 
introduced in the preceding section. A perfect elimination bipartite graph is 
one for which there exists some perfect edge elimination scheme. But how do 
we construct such a scheme? Is it possible to choose any bisimplicial edge, 
eliminate it, and then continue from there to construct the remainder of a 
scheme? The next theorem answers this question in the affirmative. (Through-
out this section the term scheme will mean perfect edge elimination scheme.) 
Theorem 12.3 (Golumbic and Goss [ 1978]). If ^ = xj; is a bisimplicial edge 
of a perfect elimination bipartite graph H = (X, Y, E), then Hx-{x}+Y-{y} is 
also a perfect elimination bipartite graph. 
Proof. We wish to show that if H has a scheme [^i, ^2» • • • ? ^/i] then it 
also has a scheme beginning with e. Let ei = Xiyi with x^eAT and y/G 7 
(i = 1, 2 , . . . , n), and define iff to be the subgraph of H induced by X — 
{xi,...,x,._i} + y - {^i,...,};,._ i}. 
Case 1. X = Xi and y = y, for some /. Since bisimpliciality of an edge is 
preserved in induced subgraphs, it follows that [e, ^ j , . . . , ^,_ i, e,+1,..., e„] 
is a scheme. 
Case 2. x = x^ and y = yj for some i ^ j . We may assume that / < j by 
interchanging X and Y if necessary; hence [^, ^ i , . . . , ^i_i] is a partial 
scheme. 
Consider an edge x^y^ for some i < h < j . Suppose there exists anm > h 
such that x^yh and Xhyt are edges in H. We would then have the following 
implications: 
Xiyi bisimplicial in //,• implies x^^yj e E, 
x^yh bisimplicial in H^ implies x^yj^ E, 
Xiyj bisimplicial in H implies x^y, G E. 
This shows that (7 = [^, ^ i , . . . , ^j_ j , e,+1,.. •, Cj^ J is a partial scheme. 
Similarly, the following argument shows that e' = x^y, is in H and is 
simplicial in H — a. If Xjy^ and x^yt are in E for s, t > j , then 
Xiyj bisimplicial in H implies x^y^ e £, 
x^yi bisimplicial in Hi implies x^yj e E, 
Xjyj bisimplicial in Hj implies x^y, e E. 

260 
12. 
Perfect Gaussian Elimination 
Since (H — a) — \_e''] = Hj+^,we 
conclude that 
\_e, e^,..., 
^£_ J, 61+1,..., 
Cj^ I, e, Cj^ i,..., e„} 
is a scheme. 
Cas^ 3. One of x and y is not among the Xj- and yj. Assume that x = Xi 
and y # y^ for some i and for all;. By an argument similar to, but shorter 
than, Case 2, \_e, e^,.,., ^^ _ 1, ^^ +1,..., e„'] is a scheme. 
| 
Corollary 12.4. The greedy algorithm of repeatedly eliminating a 
bisimplicial edge of the remaining graph (thus also removing all edges 
adjacent to it) until no edge remains will succeed if and only if H is a perfect 
elimination bipartite graph. 
Proof. Assume the corollary is true for all subgraphs of H. If H is not 
perfect elimination, then the algorithm will surely fail (i.e., at some time 
before all edges are removed, there will be no bisimplicial edge). If H is per-
fect elimination, then ehminate some bisimplicial edge e. Since H — [e] is also 
perfect elimination, we have, by induction, that the algorithm will succeed. | 
A pair of edges ab and cdofH = (U, E) is separable if the subgraph induced 
by them is isomorphic to 2K2. The graph H is said to be separable if it 
contains a pair of separable edges; otherwise H is nonseparable. Clearly a 
nonseparable graph has at most one nontrivial connected component. 
Furthermore, any induced subgraph of a nonseparable graph is non-
separable. 
Theorem 12.5 (Golumbic and Goss [1978]). If H = (X, Y, E) is a non-
separable bipartite graph, then each nonisolated vertex z is the endpoint of 
some bisimplicial edge ofH. 
Suppose that z is a nonisolated vertex which is not the endpoint of any 
bisimplicial edge. We may assume that z e 7; let XQZ be any edge. We shall 
construct an infinite chain of subsets of X 
Z o C : X i C : . . . X , c = . . . 
which will contradict the finiteness of X. Assume we are given subsets 
and 
such that 
Y, = {z,y,,...,y,}^ 
Y 
Xf^f eEoi 
<j 
for all 0 < ij < k 

4. 
Chordal Bipartite Graphs 
261 
and 
XiZ G E 
for all 0 < f < fc. 
(The arbitrary edge XQZ will start the induction when k = 0.) 
Since x^z is not bisimplicial, there exist vertices x and y (¥" z) such that 
x^y, XZGE but xy $ E. Hence, y^Yi^. Moreover, for all 0 < / < /c the edges 
x^yi+i and x^y are not separable, implying that Xiy e E. But xy^E, 
so 
x4 Xk' Therefore, by renaming x = x^+i and y = yk+i and setting X^^^^ = 
X^u 
{x^+i} and Y^+i = Y^ u {3;^+1}, we are ready for the next iteration of 
our construction. This algorithm goes on indefinitely, but X and Fare finite, 
a contradiction. Thus H must have a bisimplicial edge with z as one of its 
endpoints. 
| 
Corollary 12.6. Every nonseparable bipartite graph Hiss, perfect eUmi-
nation bipartite graph. 
Proof. By Theorem 12.3, it suffices to show that //has a bisimplicial edge. 
The corollary follows from Theorem 12.5. 
| 
We have accomplished two things in regard to perfect elimination bi-
partite graphs: We have provided an algorithm for recognizing them, and 
we have proven a sufficient (but not necessary) condition for them. Being 
perfect elimination, however, cannot tell us much about the structure of a 
graph. Indeed, let H be any bipartite graph with vertices w^, 1/2,. • •, w„; add 
new vertices w^, W2,'..,w„ 
and connect w^ with w^ for each / = 1,..., n. 
This augmented graph is a perfect ehmination bipartite graph and completely 
masks the structure of H. It follows from this negative result that there 
cannot exist a characterization of perfect elimination bipartite graphs in 
terms of some forbidden configurations or subgraphs. 
4. 
Chordal Bipartite Graphs 
In the preceding section we have successfully generalized the perfect 
elimination aspect of triangulated graphs. This raises the following question: 
Is there an appropriate notion of chordality for bipartite graphs? A triangu-
lated graph may have 3-cycles, but any longer cycle must have a chord. In 
bipartite graphs the smallest allowable cycle has length 4, so we make the 
following definition. A bipartite graph is chordal if every cycle of length 
strictly greater than 4 has a chord. 
Remark. 
Every nonseparable bipartite graph is chordal bipartite. 

262 
12. 
Perfect Gaussian Elimination 
Separable edges can be equivalently defined as follows: A pair of edges ab 
and c^ of G = (K, £) is separable if there exists a set S of vertices whose 
removal from G causes ab and cd to lie in distinct connected components of 
the remaining subgraph Gy-s- The set S is called an edge separator for ab 
and cd; S is minimal if no proper subset of S is an edge separator for ab and 
cd. The next result is analogous to Theorem 4.1(iii). 
Theorem 12.7 (Golumbic and Goss [1978]). A bipartite graph H = 
{X, y, E) is chordal bipartite if and only if every minimal edge separator 
induces a complete bipartite subgraph. 
Proof. Let C = [^i, i;2,..., f^, ^i] be a cycle of H having even length 
k > 6. Consider the set S = Adj(r2) + Adj(i;3) — {v2, v^}. Clearly S separ-
ates V2V2 from v^v^, and S nC = {v^, V4}. Let S" ^ 5 be a minimal edge 
separator for V2 v^ and v^ v^. Thus v^ e S' and V4, e S\ If 5' is complete bipartite, 
then i;ii;4 is a chord of C due to the opposite parity of the subscripts. 
Conversely, let T be a minimal edge separator and let H^ and Hg be con-
nected components of the graph remaining after removing T. Let x and y be 
any pair of vertices of T of opposite parity. Since H^ and Hg are connected, 
there exist minimum length paths [x, a^, ^2? • • • > >^] ^^^ [y^ ^i, ^2* • • •» ^] 
with ai E A and bi e B. Because these paths are of odd length > 3, they join to 
give a cycle of length > 6. If this cycle has a chord, it must be the edge xy, 
since by construction no other pair may be adjacent. Hence, T will be a com-
plete bipartite set. 
| 
The next theorem generalizes Lemma 4.2 with separability in bipartite 
graphs corresponding to nonadjacency in undirected graphs. 
Theorem 12.8 (Golumbic [1979]). Let H be a chordal bipartite graph. 
If H is separable, then it has at least two separable bisimplicial edges. 
Proof. Assume that H = {X, 7, E) has separable edges a and j3 and that 
the theorem is true for all graphs with fewer vertices than H. Let S be a 
minimal edge separator for a and j5 with H^ and Hg being the connected com-
ponents of Hx + Y-s containing a and jS, respectively. We claim //^+s has a 
bisimplicial edge whose endpoints are both in A. 
Case 1. H^ + ,j is separable. By induction H^ + s has two separable bi-
simplicial edges Xi^i and X2}^2- Since S is complete, at most two of the four 
endpoints are in S, either those with the same parity or those with the same 
subscript. Suppose Xj, X2 eS and ^1,^2 ^ ^- Take a minimum length path 
ly^, «!,..., aj, ^2] in HA and a minimum length path [X2, b^,..., fc^, x j 
with the bi in H^- Gluing these together we obtain a cycle of length at least 6 
which must have a chord. But minimality permits only the chords Xi>^2 or 

4. 
Chordal Bipartite Graphs 
263 
X2yu contradicting the separability of x^y^ and X2y2' Similarly y^ and y2 
cannot both be in S. Therefore, H^+s has a bisimplicial edge whose endpoints 
are both in A. 
Case 2. H^+s is nonseparable. Let Xi);2 be any edge of H^. By Theorem 
12.5 there exist vertices y^ and X2 such that x^y^ and ^2^2 ^^e bisimplicial in 
H^+s- Suppose both y^ and X2 are in S, for otherwise the claim is true. Then 
X2 and yi are adjacent since S is complete. The bisimpliciality ofx^y^ implies 
that Adj(xi) ^ Adj^+5(x2), and the bisimpliciality of ^2^2 implies that 
Adj^ + s(^2) ^ Adj(xi). Hence, Adj(xi) + Adj(y2) = Adj^ + 5(x2) -h AdjCy.X 
which we know induces a complete bipartite subgraph. Thus, Xiy2 is also 
bisimplicial in //^+5, so the claim for this case is proven. 
Finally, a bisimplicial edge of //^+s whose endpoints lie in A is also bi-
simplicial in H since Adj(/1) ^ A -\- S. Therefore, by the claim, H has a 
bisimplicial edge a' whose endpoints lie in A and, similarly, a bisimplicial 
edge jS' whose endpoints lie in B, and a' and jS' are separable. 
| 
The proof of Theorem 12.8 actually gives a slightly stronger result. 
Corollary 12.9. Let H = (X, Y, E) be a chordal bipartite graph. If 5 is a 
minimal edge separator for some pair of edges, then H has a simplicial edge 
in each nontrivial connected component of Hx + y-s-
Theorem 12.10 (Golumbic and Goss [1978]). Every chordal bipartite 
graph is a perfect elimination bipartite graph. 
Proof. Since chordal bipartiteness is a hereditary property, it is sufficient 
to show that a chordal bipartite graph H has a bisimplicial edge. Applying 
Theorem 12.5 for H nonseparable or Theorem 12.8 for H separable, we 
obtain the desired result. 
| 
Unlike the case of triangulated graphs (Theorem 4.1), the converse of 
Theorem 12.10 is false. Each of the edges w^w, in Figure 12.8 is bisimplicial, 
and the elimination of any one of them breaks the 6-cycle. Nevertheless, we 
do have a necessary and sufficient condition for chordality in terms of perfect 
elimination by adding a hereditary condition. 
Corollary 12.11. A graph is chordal bipartite if and only if every induced 
subgraph is perfect elimination bipartite. 
Proof 
If H possesses a chordless cycle C of length strictly greater than 4, 
then C would be an induced subgraph which is not perfect elimination. Con-
versely, if H is chordal bipartite, then so is every induced subgraph H\ and 
by Theorem 12.10, H' is perfect elimination. 
| 

264 
12. 
Perfect Gaussian Elimination 
Figure 12.8. A perfect elimination bipartite graph which is not chordal. The cycle is broken 
when one of the edges M,H', is eliminated. 
Summary 
We have presented bipartite generalizations of triangulated graphs accord-
ing to two important properties: perfect elimination and chordality. Although 
these notions do not coincide in the general setting, both do extend certain 
aspects of triangulated graphs. Perfect elimination bipartite graphs correctly 
model the application to Gaussian elimination with no fill-in. Chordal 
bipartite graphs satisfy the separation theorems analogous to those of Dirac. 
Alan Hoffman and Michel Sakarovich have recently discovered that the 
chordal bipartite graphs give a characterization of the matrices in an im-
portant class of linear programming problems for which the greedy heuristic 
approach gives an optimum solution. 
EXERCISES 
1. Verify that the matrix below has a perfect elimination scheme but does 
not have one under restriction (R). 
1 1 0 
0 0^ 
2 
1 1 0 
0 
3 0 
1 1 0 
4 
1 0 
1 1 
5 1 1 0 
1 

Exercises 
265 
2. 
Let G = (K, £) be an undirected graph with vertices Vi,V2,...,v„. 
The 
bipartite graph B{G) of G has vertices Xi,X2,...,x„ and yi, ^2? • • •» ^n^ 
with x, adjacent to y, if and only if i = j or v^Vj e E. 
(i) Show that if B(G) is chordal bipartite, then G is a triangulated graph. 
(ii) For which of the triangulated graphs in Figure 12.9 is B{G) not chordal 
bipartite? Find a minimal edge separator which does not induce a bipartite 
clique. 
Figure 12.9. 
3. Consider the graph H constructed as follows: [ a j , . . . , a„, a j and 
[fci, ...,/}„,/?I] are vertex disjoint chordless cycles with n even, and aibj is an 
edge iffi + j = 1 (mod 2). Show that H is not a perfect elimination bipartite 
graph for n > 6. 
4. 
Let H = (X, y, E) be a perfect elimination bipartite graph with perfect 
scheme a. For xy G E define the deficiency of xy in G to be 
D{xy) = {ab^E\a,bE 
Adj(x) + Adj(y)}. 
Show that a is also a perfect scheme for the graph H' = (X, 7, E + 0(xy)). 
Suppose you made a stupid pivot choice and caused some fill-in on your 
perfect elimination bipartite graph; is all hope lost? No, you can still con-
tinue perfectly, as the next exercise shows. 
5. 
U H = (X, y, E) is a perfect elimination bipartite graph and xy is any 
edge, then the xy-elimination graph 
f/,, = {X- 
{x}, Y - {y}, E,_,^,^y_,^, + D{xy)) 
is also perfect elimination. (Hint: Use Theorem 12.3 or modify its proof.) If cr 
is the perfect scheme for H which was misplaced when xy was stupidly 
eliminated, how can a be cleverly modified to give a perfect scheme for H^yl 
6. 
Prove the claim in case 3 of Theorem 12.3. 
7. 
Let H = {X,Y, E) be a bipartite graph and let H' = (X, 7, F ) denote its 
bipartite complement; that is, for all x e X and y e Y, xy e E' iff xy $ E. 
Prove the following: The graphs H and H' are both chordal bipartite if and 
only if H contains no induced subgraph isomorphic to Cg, 3/^2, or Cg 
(Golumbic and Goss [1978]). 
8. Let G = (K, E) be an undirected graph and let B{G) be its bipartite 
graph (see Exercise 2). For 5 c= F, let B(S) = {x,|t;,-eS} u {y,|fjeS). Prove 

266 
12. 
Perfect Gaussian Elimination 
that 5 is a minimal vertex separator of G if and only if B(S) is a minimal edge 
separator of B(G) (Golumbic [1979]). 
9. The Venn diagram in Figure 12.10 has nine regions representing all 
possibilities for a bipartite graph to satisfy or not satisfy the following 
properties. 
P.E.B. The graph is a perfect elimination bipartite graph. 
C.B. The graph is chordal bipartite. 
(P.E.B.)' The bipartite complement of the graph is perfect elimination bi-
partite. 
(C.B.)' The bipartite complement of the graph is chordal bipartite. 
For each region give an example of a graph which lives in that region. (One 
solution is shown in Appendix E, but try to find your own examples without 
referring to it.) 
^^ 
^ ^ 
v
/ 
\ 
/ 
vS'- 
••. 
V 
1 
\ \ \ 
\ \ 
.. 
\ \ \ 
1 
Bipa 
• 
• 
• 
/ 
y 
• 
• 
^ 
C.B.—> 
P . E . B . — -
rtite Graph! > 
Figure 12.10. Bipartite graphs. 
10. Let H = (X, y, E) be a bipartite graph, and let G be the split graph 
obtained from H by connecting every pair of vertices in Y. Prove that H is 
nonseparable if and only if G is a threshold graph. For an application, see 
Chapter 10, Exercise 15. 
Bibliography 
George, J. Alan 
[ 1977] Solution of linear systems of equations: Direct methods for finite element problems, 
in "Sparse Matrix Techniques," Lecture notes in math.. Vol. 572, pp. 52-101. 
Springer-Verlag, BerUn. MR55 #13751. 

Bibliography 
267 
Golumbic, Martin Charles 
[1978] A note on perfect Gaussian elimination, J. Math. Anal. Appl. 64, 455-457. 
[1979] A generalization of Dirac's theorem on triangulated graphs, Ann. N.Y. Acad. Sci. 
319,242-246. 
The ''only if" portion of Theorem 4 is false. The correct version is given here in 
Exercise 2. 
Golumbic, Martin Charles, and Goss, Clinton F. 
[1978] Perfect elimination and chordal bipartite graphs, J. Graph Theory 2, 155-163. 
Haskins, Loren, and Rose, Donald J. 
[1973] Toward a characterization of perfect elimination digraphs, SI AM J. Comput. 2, 
217-224. MR49 #8895. 
Kleitman, D. J. 
[1974] A note on perfect ehmination digraphs, SIAMJ. Comput. 3, 280-282. MR56 # 5351. 
Ohtsuki, Tatsuo 
[1976] A fast algorithm for finding an optimal ordering for vertex ehmination on a graph, 
SIAMJ. Comput. 5, 133-145. MR52 #13515. 
Ohtsuki, Tatsuo, Cheung, L. K., and Fujisawa, T. 
[1976] 
Minimal triangulation of a graph and optimal pivoting order in a sparse matrix, 
J. Math. Anal. Appl. 54, 622-633. 
Parter, Seymour V. 
[1961] TheuseoflineargraphsinGaussianelimination,5/^M/?et\3,119-130.MR26 #908. 
This is the first paper to introduce the notion of perfect elimination for preserving 
sparseness during Gaussian ehmination. 
Perl, Yehoshua 
[1973] A counterexample to a conjecture of D. J. Rose on minimum triangulation, J. Math. 
Anal. Appl. 42, 594-595. MR53 #212. 
Reid, John K. 
[1977] Solution of linear systems of equations: Direct methods (general), in "Sparse Matrix 
Techniques," Lecture notes in math., Vol. 572, pp. 102-129. Springer-Verlag, Berlin. 
Rose, Donald J. 
[1970] Triangulated graphs and the elimination process, /. Math. Anal. Appl. 32, 597-609. 
MR42 #5840. 
[1972] A graph-theoretic study of the numerical solution of sparse positive definite systems 
of linear equations, in "Graph Theory and Computing" (Ronald C. Read, ed.), 
pp. 183-217. Academic Press, New York. MR49 #6579. 
Rose, Donald J., and Tarjan, Robert Endre 
[1975] Algorithmic aspects of vertex elimination, Proc. 7th Annual ACM Symp. on Theory 
of Computing, 245-254. 
[1978] Algorithmic aspects of vertex elimination of directed graphs, SI AM J. Appl. Math. 
34, 176-197. 
Rose, Donald J., Tarjan, Robert Endre, and Leuker, George S. 
[1976] Algorithmic aspects of vertex ehmination on graphs, SIAM J. Comput. 5, 266-283. 
MR53 #12077. 
Tarjan, Robert Endre 
[1976] Graph theory and Gaussian elimination, in "Sparse Matrix Computations" (J. R. 
Bunch and D. J. Rose, eds.), pp. 3-22. Academic Press, New York. 


Appendix 
A. 
A Small Collection of NP-Complete Problems 
GRAPH COLORING 
(decision version) 
Instance: 
An undirected graph G and an integer k > 0. 
Question: 
Does there exist a proper /c-coloring of G? Equivalently, is 
X(G) < kl 
GRAPH COLORING 
(optimization version) 
Instance: 
An undirected graph G. 
Question: 
What is ;^(G)? 
CLIQUE (decision version) 
Instance: 
An undirected graph G and an integer /c > 0. 
Question: 
Does there exist a complete subset of vertices of G of size /c? 
Equivalently, is co(G) > /c? 
CLIQUE (optimization version) 
Instance: 
An undirected graph G. 
Question: 
What is co(G)? 
STABLE SET (decision version) 
Instance: 
An undirected graph G and an integer /c > 0? 
Question: 
Does G have a stable set of size /c? Equivalently, is a(G) > /c? 
269 

270 
Appendix 
STABLE SET (optimization version) 
Instance: 
An undirected graph G. 
Question: 
What is a(G)? 
CLIQUE COVER (decision version) 
Instance: 
An undirected graph G and an integer k > 0. 
Question: 
Can the vertices of G be covered by k cHques of G? Equivalently, 
is/c(G)</c? 
CLIQUE COVER (optimization version) 
Instance: 
An undirected graph G. 
Question: 
What is/c(G)? 
HAMILTONIAN 
PATH 
Instance: 
An undirected graph G with vertices 
v^,V2,.'-,v„. 
Question: 
Can the vertices be ordered [i;^^, v^,^, ..., v^J so that i;^^ and 
v^.^^ are adjacent in G for / = 1, 2,..., n — 1 ? 
HAMILTONIAN 
CIRCUIT 
Instance: 
An undirected graph G with vertices ^i, i;2,..., !;„. 
Question: 
Can the vertices be ordered [i;^^, i;^^' •••' ^TTJ SO that y^. and 
i;^.^ J are adjacent in G for f = 1,2,..., n - 1 and v^^ and v^,^ are also adjacent 
in'G? 
STABLE SET ON TRIANGLE-FREE 
GRAPHS 
Instance: 
An undirected graph G having no 3-cycle. 
Question: 
What is a(G)? 
B. 
An Algorithm for Set Union, Intersection, Difference, and 
Symmetric Difference of Two Subsets 
Input: 
Two subsets S and T of a universal set U whose members are 
numbered 
^ 1 ' 
^ 2 9 * * * 9 
^ n * 
All subsets are represented as lists of numbers (the 
indices of its members). 
Output: 
The sets 5 u T, 5 n T, 5 - T, T - 5, and (S - T) u (T - S). 
Method: 
An auxilliary Boolean n-vector B = {bi,b2,... 
,b„}, initially 
containing only zeros, is used. As the list S is scanned, B is changed to the 
characteristic vector of S (line 3). In the loop 4-9, S n Tand T - S are formed, 
(5 - T) u (T - 5) is half formed, and B is changed to the characteristic 
vector of S - T. In the loop 10-15, S u T and (S - T) u (T - S) are com-
pleted and S — T is formed. Also B is restored to the zero vector. 

C. 
Topological Sorting 
271 
begin 
1. 
2. 
3. 
4. 
5. 
6. 
7. 
8. 
9. 
10. 
11. 
12. 
13. 
14. 
15. 
16. 
remark: B = <0, 0, 
initialize: S u T <--
for all / 6 5* do Z?, *-
for all j e T do 
if Bj = 1 
then 
A d d y t o ^ n 
bj ^ 
0; 
else 
Addyto T -
AddjioiS 
-
for all / 6 5" do 
if/),- = 1 
then 
Add / to 5 u 
Add ito S -
Add / to {S -
bi^O;; 
remark: B = <0, 0, 
end 
o> 
T,S n 
1;; 
T; 
S; 
- T) 
T: 
T\ 
- T) 
u 
o> 
r^ 
(r-
(r-
S - T 
-S);; 
5); 
5 ^ ( 5 - r ) u ( r - 5) ^ 0 ; 
Complexity. 
Assuming no charge for initializing B (line 1), the complexity 
is dominated by the three loops. Thus, the algorithm runs in 0{\S\ + \T\) 
steps. 
Topological Sorting: 
of Algorithm 2.4 
An Example 
Let us assume that the graph in Figure CI is stored as sorted adjacency 
lists. Initially, the DFSNUMBER and the TSNUMBER of each vertex is 
Figure CI 

272 
Appendix 
TOPSORT(l) 
TOPSORT(3) 
TOPSORT(7) 
fDFSNUMBER(l)<-l 
TOPSORT(2) 
T0PS0RT(5) 
lTSNUMBER(l)^4 
DFSNUMBER(3)^5 
TOPSORT(4) 
LTSNUMBER(3)^2 
(
DFSNUMBER(7)^7 
TSNUMBER(7)^1 
DFSNUMBER(2)^2 
TOPSORT(6) 
I TSNUMBER(2)^6 
f DFSNUMBER(5)^4 
[ TSNUMBER(5)<-5 
r DFSNUMBER(4)<-6 
[ T S N U M B E R ( 4 ) ^ 3 
rDFSNUMBER(6)<-3 
[ T S N U M B E R ( 6 ) ^ 7 
Figure C2 
set to 0,7 is set to 7, and i is set to 0. The search begins with vertex 1. TOP-
SORT(l) will call TOPSORT(2), which will call TOPSORT(6); when 
control is eventually returned to TOPSORT(l) it will resume its scan of 
Adj(l) and will call TOPSORT(5). When TOPSORT(l) is finished, the main 
routine will call TOPSORT(3), etc. These recursive calls are illustrated in 
Figure C2. The final values of the depth-first search numbering and the 
topological sorting numbering are as follows: 
Vertex 
1 
2 
3 
4 
5 
6 
7 
DFSNUMBER 
1 
2 
5 
6 
4 
3 
7 
TSNUMBER 
4 
6 
2 
3 
5 
7 
1 

E. 
The Properties P.E.B., C.B., (P.E.B.)', (C.B.)' Illustrated 
D. 
An Illustration of the Decomposition Algorithm 
273 
The decomposition algorithm in Section 5.4 as appUed to a noncompara-
bihty graph is illustrated in Figure Dl. 
(V. EJ 
yv 
tv 
(V. B^J 
Figure Dl 
E. 
The Properties P.E.B., C.B., (P.E.B.)'. (C.B.)' 
Illustrated 
Figure El gives examples of graphs satisfying or not satisfying the follow-
ing properties: 
P.E.B.: the graph is a perfect elimination bipartite graph; 
C.B.: the graph is chordal bipartite; 
(P.E.B.)': the bipartite complement of the graph is perfect ehmination 
bipartite; 
(C.B.)': the bipartite complement of the graph is chordal bipartite. 

274 
Appendix 
^ 
^ ^ 
^ 
^ 
^^ 
^ 
J'.y\ 
\ 
/ y = -\\ 1 
< 
^ ••• 
\ ••. 
\ \ 
\ 
/ 
2 
...- 5^^ 
1 
••* 
^ 
'••*>, 
/ 
.••• ^ / 
y 
/ 
7 
f 
8 
9 
^ 
P.E.B. 
' 
' 
Bipartite Graphs 
' 
MXX - O 
Oi 
//, 
/ / o 
^ 
o 
Figure El 
The regions in Figure El are illustrated by the given examples as follows: 
Region 
Example 
1 
2 
3 
4 
5 
6 
7 
8 
9 
//. 
//'2 
3/^2 
^ 2 
/ / 3 
H, 
Q 
H\ 
C„{n = 8, 10, 12, • • •) 

F. 
The Properties C, C, T, T Illustrated 
F. 
The Properties C C, 7", T Illustrated 
275 
Examples of graphs which are or whose complements are comparability 
graphs and/or triangulated graphs: 
Property 
C 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
+ 
-
-
-
-
-
-
-
-
c 
+ 
+ 
+ 
+ 
-
-
-
-
+ 
+ 
+ 
+ 
-
-
-
-
*See 
T 
+ 
+ 
-
-
4-
+ 
-
-
+ 
+ 
-
-
+ 
+ 
-
-
Figu 
T 
+ 
-
+ 
-
+ 
-
+ 
-
+ 
-
+ 
-
+ 
-
+ 
-
Examples* 
Any threshold graph 
C4 - 
2K, 
c. 
G, 
Gs 
G, 
G2 or G3 
Ce, C8,etc. 
Gs 
Gi or G3 
G4 
Cg, C8,etc. 
G7 or G7 
G, 
G, 
Cs,C^, etc. 
re Fl for the G,. 
vyv W 
A <A> ^^ A 
Figure Fl 
^7 


Epilogue 2004 
1. Introduction - Foundations and Applications 
In this Epilogue chapter, we will take a "short tour" of some of the new results 
in algorithmic graph theory and perfect graphs. So many new research directions 
have been the subject of investigation since this book was first published in 
1980, that it is impossible to survey them all. The algorithms and applications 
associated with structured families of graphs have grown to maturity in these 
24 years. The literature has increased tenfold, and the world of perfect graphs 
has grown to include over 200 special graph classes. Perfect graphs now have 
their own Mathematical Reviews Classification 05C17, as so do geometric and 
intersection representations 05C62. 
We present here a sample of the many results of the Second Generation of 
Algorithmic Graph Theory from the author's biased view. Necessarily, it must 
be only a small fraction of what would otherwise require a large sequel volume. 
Fortunately, the availability of several new books, listed earlier in the Prologue 
of this edition, can also aid the reader eager to pursue further exploration in this 
area. 
The sections of this Epilogue are numbered to correspond with the chapters 
of the book. Our intention is, as with the former chapters, to send the reader 
back to the literature, laboratory and library to continue research. 
Intersection Graphs 
We saw many of the early uses of the intersection graph model in the sneak 
preview Section 1.3, in the application sections on permutation graphs, interval 
graphs, and elsewhere in the book. But the volume and scope of research in this 
general area has expanded significantly both from the modeling and algorithmic 
points of view. Some of these applications include mobile frequency assignment 
(Osput and Roberts [1983]), pavement deterioration analysis (Gattass and 
277 

278 
Epilogue 2004 
Nemhauser [1981]), relational databases (see Golumbic [1988]), evolutionary 
trees (see Waterman [1995]), physical mapping of DNA (Goldberg, et al. [1995], 
Golumbic, Kaplan and Shamir [1994]), container ship stowage (Avriel, Penn and 
Shpirer [2000]), and VLSI circuit design (Dagan, Golumbic and Pinter [1988]). 
Intersection graphs have become a necessary and important tool for solving 
real-world problems. McKee and McMorris [1999] is devoted to the topic of 
intersection graph models and their application. We will present several other 
examples in this new Epilogue chapter. 
Temporal Reasoning 
One of the "traditional" applications of interval graphs is reasoning about time 
intervals, which started with the original question of Hajos (Section 8.1, page 
171). Temporal reasoning is an essential part of many applications in artificial 
intelligence. Given a set of explicit relationships between certain events, we 
would like to be able to infer additional relationships which are implicit in those 
given. For example, the transitivity of "before" and "contains" may allow us to 
derive information regarding the sequence of events. Seriation problems, like 
the example in Section 8.4, ask for a mapping of temporal events onto the time 
line such that all the given relations are satisfied, that is, a consistent scenario. 
Similarly, there are problems of scheduling, planning, and story understanding 
in which one is interested in constructing a time line where each particular event 
or phenomenon or task corresponds to an interval representing its duration. 
Allen [1983] introduced a model for temporal reasoning using the thirteen 
primitive interval relations obtained by considering all possible orderings of their 
four endpoints. Several authors working in AI have studied and adapted Allen's 
model further, and have incorporated such models into reasoning systems. The 
paper by Golumbic and Shamir [1993] has provided a bridge linking some of 
these temporal reasoning notions fi*om the AI community with those of the 
combinatorics community. Their approach has been to simplify Allen's model 
in order to study its complexity using graph theoretic techniques. We refer the 
reader to Golumbic [1999] which is a survey paper ^ on the topic, written in the 
same spirit as this book. It describes a number of directions of current work on 
reasoning about time, many of which employ graph algorithms. 
2. The Design of Efficient Algorithms 
Maxinnum Network Flow Problem 
Progress on lowering the computational complexity of the maximum network 
flow (MAXFLOW) problem was presented in Table 2.1 as one of several illustrations 
^ This survey paper also includes some of the author's newest illustrative stories, "Goldie and the 
Four Bears", "Will Allan get to Judy's in time?", and "Five Autonomous Golumbic Women". 

Epilogue 2004 
279 
of closing the gap between the best known algorithms and the lower complexity 
bound. Further improvement for MAXFLOW have been given by Goldberg and 
Tarjan [1988] 0(«e log(«Ve)), King, Rao and Tarjan [1994] 0{ne + w^+O and 
0(«elog,/(„i^g„)«), Philips and Westbrook [1993] 0(«^log,/„« 4- 
n\\ognf'^'). 
We refer the interested reader to Cook, Cunningham, Pulleyblank and Schrijver 
[1998], Corman, Leiserson Rivest, second edition [2001], Goldberg [1998] and 
Johnson and McGeoch [1993]. 
Although it is not a central topic in studying perfect graphs, maximum network 
flow algorithms do play an important role in certain optimization problems on 
perfect graphs. For example, we invoked its complementary relative MINFLOW 
at the end of Section 5.7 when sketching a polynomial method for finding the 
stability number a{G) of a cocomparability graph. This method has subsequently 
been used as part of the algorithm by Narasimhan and Manber [1992] for the 
stability number of tolerance graphs. 
Graph Sandwich Problems 
In this book, we placed a major focus on the minimum coloring, maximum 
clique, and recognition problems for special families of graphs. Another impor-
tant algorithmic direction has been the study of various completion problems. For 
example, the minimum completion problem requires adding a minimum number 
edges to an arbitrary graph G in order to obtain a new graph G' which satisfies 
the desired property 11, such as being an interval graph or a triangulated graph, 
see Garey and Johnson [1979], Yannakakis [1981]. One motivation for such 
completion problems is as a heuristic for coloring G, since xi^) ^ X(^0-
Another variation of the completion problem, called the graph sandwich 
problem, is defined by allowing only some of the nonedges to be eligible to 
be added to the original graph. Specifically, given a graph G = {V,E) and a 
subset EQ C E of (optional) nonedges, we ask whether there exists a completion 
G' = {V,E') which satisfies the desired property 11, such that E C E' C 
EUEQ. 
Sandwich problems arise in applications where only partial information about 
the graph is known. The interval graph sandwich problem was shown to be 
NP-complete by Golumbic and Shamir [1993]. It arises in molecular biology in 
problems of physical mapping of DNA and in problems of temporal reasoning, 
similar in spirit to the early work described in Applications 8.2 and 8.3 on 
pages 182-183. For example, see Atkins and Middendorf [1996] and Golumbic, 
Kaplan and Shamir [1994]. 
Golumbic, Kaplan and Shamir [1995] investigates graph sandwich problems 
for other special families of graphs. Specifically, the sandwich problem is 
polynomial for split graphs, cographs, and threshold graphs, but is NP-complete 
for chordal graphs, proper interval graphs, comparability graphs, permutation 
graphs, and others (see also Golumbic and Trenk [2004, Sections 4.7-4.8]). 

280 
Epilogue 2004 
There is also a body of literature on graph modification problems, where one 
may add edges and delete edges to transform a graph G into a modified graph G' 
satisfying a property IT. The problem is to minimize the total number of additions 
and deletions, thus changing the edge set as little as possible. For a good survey 
and introduction to this area, see Natanzon, Shamir and Sharan [2001]. 
3. Perfect Graphs 
The Strong Perfect Graph Conjecture/Theorem 
In May of 2002, the announcement was made that the Strong Perfect Graph 
Conjecture (SPGC) of Claude Berge had been proven by the team of researchers 
consisting of Maria Chudnovsky, Neil Robertson, Paul Seymour and Robin 
Thomas [2002]. This most important result, after 42 years, is currently submitted 
for publication. 
The term Berge graph has been defined as an undirected graph which contains 
neither an odd chordless cycle C2k+i (an odd hole) nor its complement C2k+i 
(for k > 2) (an odd antihole) as an induced subgraph. Thus, what should now 
be called the Strong Perfect Graph Theorem states that an undirected graph is 
perfect if and only if it is a Berge graph, the "only if" direction being immediate. 
During the decades preceding this solution, a large body of research developed 
involving the structure of minimally imperfect graphs, (see Brandstadt, Le and 
Spinrad [1999, Chapter 14]). The spin-off effect of these investigations has been 
the birth of many new children in the world of perfect graphs, both new problems 
and a generation of young researchers. The collections edited by Berge and 
Chvatal [1984] and Ramirez-Alfonsin and Reed [2001] provide a good cross-
section of the work in this area. 
Although proving the SPGC was a major mathematical challenge rather than 
an algorithmic one, it raised several related interesting algorithmic questions: Is 
there a polynomial time algorithm which recognizes whether or not an undirected 
graph G has an odd chordless cycle of length > 5? Is there a polynomial 
time algorithm which recognizes Berge graphs? The second problem has been 
solved, by Chudnovsky and Seymour [2002], Chudnovsky, Comuejols, Liu, 
Seymour and Vuskovic [2002], Comuejols, Liu and Vuskovic [2002], and awaits 
publication. Combining this algorithm with the Strong Perfect Graph Theorem 
shows that there is a polynomial time algorithm which recognizes whether or not 
a graph is perfect. A solution to the first question has so far not been found (as 
of spring 2003), but when/if a solution is found, it will give an alternate solution 
to the second question by applying it to the graph and its complement. 
Finally, Vashek Chvatal maintains a perfect website^ which contains a long list 
of references and historical notes. A useful technical report by Hougardy [1998] 
^ http://www.cs.rutgers.edu/~chvatal/perfect/problems.html 

Epilogue 2004 
281 
lists, for each ordered pair (Ci, C2) of 96 classes of perfect graphs, whether the 
class Ci is a subset of the class C2, and if this is not the case, provides and exam-
ple of a graph which is in C\ but not in C2. An on-line tool for checking the class 
containment for a larger set of more than 200 graph classes has been developed 
at Rostock University^. It also contains the known complexity results for recog-
nition of the classes, the maximum stable set and domination problems. Several 
unresolved containments and complexities remain as open problems. Figure 13.3, 
at the end of this Epilogue (p. 305), gives a complete hierarchy of some of the 
main classes of perfect graphs, ordered by inclusion (reprinted from Golumbic 
and Trenk [2004] where it appears together with separating examples). 
Stable Sets 
On the stable set problem for perfect graphs, there has also been progress. 
Grotschel, Lovasz and Schrijver [1981] have shown that the ellipsoid method of 
solving linear programming problems can be applied to obtain a polynomial al-
gorithm to find maximum stable sets and minimum colorings for perfect graphs. 
Also, since G is perfect if and only if its complement G is perfect, this same 
approach can be used to find maximum cliques and minimum clique covers. 
The major importance of this result is that it generalizes what had been known 
for many classes of perfect graphs. Although the complexity of the algorithm is 
polynomial, it may not be practical to implement. As the authors point out, it is 
not intended to compete with the special purpose algorithms designed to solve 
these problems for interval graphs, cocomparability graphs, triangulated graphs, 
and other classes of perfect graphs which so ofi;en arise in applications. For 
further reading on algorithms for the stable set problem and the clique problem, 
see Hertz [1995] and Johnson and Trick [1996]. 
4. Triangulated Graphs - Chordal Graphs 
Throughout this book, we have followed the French tradition by using the 
name triangulated graph for an undirected graph containing no chordless cycle 
Ck (k > 4). In this section, however, we will use its popular synonym chordal 
graph. Two important variations of chordal graphs will be briefly presented here, 
namely the strongly chordal and the weakly chordal graphs. As their names 
indicate, every strongly chordal graph is chordal, and every chordal graph is 
weakly chordal. Weakly chordal graphs are also perfect graphs. 
http://wwwteo.informatik.uni-rostock.de/isgci 

282 
Epilogue 2004 
Strongly Chordal Graphs 
Strongly chordal graphs, introduced by Farber [1985], specialize chordal 
graphs in several ways. They are characterized by several equivalent definitions 
using chords of a cycle, forbidden subgraphs and elimination orderings. We will 
also encounter these graphs later in Section 12 of this Epilogue in relation to 
chordal bipartite graphs. 
Let C = [wi, W2J • • • 5 U2k, wi] be a cycle of even length 2A: > 6. A chord UfUj e E 
is called an odd chord if one of / and y is even and the other is odd, that is, it 
divides C into two even length cycles. A graph G = {V,E) is defined to be 
strongly chordal if it is chordal and every cycle of even length greater than or 
equal to 6 has an odd chord. For example, referring to Figure Fl on page 275, 
the graphs G2, G3, G4 and G5 are strongly chordal, however, the others are not 
strongly chordal, as follows: Gi and Ge are not chordal so they are not strongly 
chordal; the graph G-j is chordal, but the 6-cycle going around the outside of the 
graph has no odd chord, so the graph is not strongly chordal. 
The graph G7 is often called the 3-sun and is one of a family of forbidden 
subgraphs characterizing strongly chordal graphs. The k-sun Sk (k > 3) consists 
of 2k vertices, a stable set X = {xi,X2,... ,Xk} and a clique Y = {y\,y2, - • • ,yk} 
and edges E\ U E2 where E\ = {xiyi,y 1X2,X2y2,yixs,... ,Xkyk,ykXi} forms the 
outer cycle and E2 = {ytyj \i ^ 7 } forms the inner clique. The suns are split 
graphs, so they are chordal by Theorem 6.3, but they are not strongly chordal 
since the outer cycle has no odd chord. 
A trampoline of order A: (A: > 3) is a graph obtained from a A:-cycle C by 
adding for each edge of C a new vertex adjacent only to the two endpoints of 
that edge, and then adding enough chords to C to make it chordal. A complete 
trampoline is one in which all the chords are added to the cycle C, making it 
a clique and identical to the A:-sun Sk. It is not difficult to show that a chordal 
graph which contains an induced trampoline also contains a (smaller) complete 
trampoline. 
A vertex x is called simple if for every pair of neighbors y and z of x, either 
N(y) C N{z) or N(z) C N(y). An ordering of the vertices [vi,V2,. ..,Vn] is 
called a simple elimination ordering for G if y, is a simple vertex in the induced 
subgraph Hj, for all /, where Hi = G{i;.^ ^y^} is the subgraph remaining after 
u\,... ,Ui-.i have been eliminated. Note that the 3-sun ^3 (G7 on page 275) has 
no simple vertex, so it does not have a simple elimination ordering. 
A strong elimination ordering is defined to be an ordering of the vertices 
[i;i,i;2j- • • jt;„] where, for all i <j < k < £, if UiVk,UiUi,VjUk G E then UjVi G E. 
It is an easy exercise to verify that simple elimination orderings and strong 
elimination orderings are special cases of perfect elimination orderings. 
The next Theorem, due to Farber [1983], provides the following characteriza-
tions of strongly chordal graphs: 

Epilogue 2004 
283 
Theorem 13.1. The following conditions are equivalent for an undirected 
graph G = (F,^): 
(i) G is strongly chordal. 
(ii) G has a simple elimination ordering, 
(iii) G has a strong elimination ordering, 
(iv) G is chordal and sun-free. 
(v) G is chordal and trampoline-free. 
Strongly chordal graphs are closely related to the class of chordal bipartite 
graphs (Section 12.4, page 261). We will present this connection below in 
Theorems 13.15 and 13.17. For frirther reading on strongly chordal graphs, and 
additional characterizations, see Brandstadt, Le and Spinrad [1999] and McKee 
and McMorris [1999]. 
Weakly Chordal Graphs 
Hayward [1985] introduced the class of weakly chordal graphs (also called 
weakly triangulated) as those having no induced subgraph isomorphic to C„ or 
to C„ for « > 5. The class of weakly chordal graphs contains the class of chordal 
graphs, since C5 = C5 and C„ contains induced copies of C4 for n> 6, Also, the 
weakly chordal graphs are perfect graphs. This result now follows immediately 
from the Strong Perfect Graph Theorem, however, the first proof was obtained by 
combining a result by Chvatal [1985], that neither a minimally imperfect graph 
G nor its complement G can contain a "star-cutset", with a result by Hayward 
[1985], that if G is a weakly chordal graph (with at least 3 vertices) then either 
G or G must contain a "star-cutset". 
We call vertices x and y a two-pair if every chordless path between jc and y 
has exactly two edges. The weakly chordal graphs have been characterized using 
two-pairs as follows. 
Theorem 13.2. The following are equivalent: 
(i) G is a weakly chordal graph. 
(ii) Every induced subgraph of G is either a clique or has a two-pair, 
(iii) If edges are repeatedly added between two-pairs in G, the result is eventually 
a clique. 
The implication (ii) =4> (i) follows from the observation that nonadjacent 
vertices in C„ or C„ {n > 5) are not a two-pair. The implication (i) =4> (ii) is 
due to Hayward, Hoang and Maffray [1990], and (i) <==^ (iii) is due to Spinrad 
and Sritharan [1995]. The latter equivalence also leads to an 0(n^) recognition 
algorithm for weakly chordal graphs. 

284 
Epilogue 2004 
LexBFS 
In Section 4.3, we presented lexicographic breadth first search (LexBFS), 
using it to obtain the linear time algorithm for recognizing chordal graphs. We 
also mentioned that maximum cardinality search (MCS) provides a conceptually 
and computationally simpler method for getting a perfect elimination scheme by 
changing the label of a vertex x from a "list" of the marked neighbors to a 
simple "counter" of those marked neighbors. Tarjan's proof that MCS orderings 
correctly recognize chordal graphs can be found in Golumbic [1984]. 
Fans and fiiends might have been temporarily disappointed when MCS seemed 
to make LexBFS obsolete, but not for long! LexBFS has become useful in other 
contexts, including recognizing proper interval graphs, recognizing asteroidal 
triple-free graphs and several other algorithms. There are also results for LexBFS 
on the powers of chordal graphs and on distance hereditary graphs which have 
no analogous result for MCS. See Brandstadt, Le and Spinrad [1999, Chapter 5] 
which also surveys characterizations of many perfect graph families in terms of 
special kinds of vertex orderings. 
Intersection Graphs on Trees 
Let r be a tree and let {T,} be a collection of subtrees (connected subgraphs) 
of T. We may think of the host tree T either (1) as a continuous model of a tree 
embedded in the plane, thus generalizing the real line fi*om the one-dimensional 
case, or (2) as a finite discrete model of a tree, namely, a connected graph of 
vertices and edges having no cycles, thus generalizing the path Pk from the one 
dimensional case. 
The distinction between these two models becomes important when measuring 
the size of the intersection of two subtrees. For example, in the continuous model 
(1), we might take the size of the intersection to be the Euclidean distance of a 
longest common path of the two subtrees. In the discrete model (2), we might 
count the number of common vertices or common edges. We use the expressions 
"nonempty intersection" and "vertex intersection" to mean sharing a vertex or 
point of r, and "nontrivial intersection" and "edge intersection" to mean sharing 
an edge or otherwise measurable segment of T. 
Using this terminology. Theorem 4.8 (page 92) stated the following. 
Theorem 4.8. A graph is the vertex intersection graph of a set of subtrees of 
a tree if and only if it is a chordal graph. 
In contrast to this, Golumbic and Jamison [1985a] observed that the family of 
edge intersection graphs of subtrees of a tree yield all possible graphs, proving 
the following: 
Theorem 13.3. Every graph can be represented as the edge intersection graph 
of substars of a star. 

Epilogue 2004 
285 
Table 1. Graph classes involving trees 
Type of Interaction 
vertex intersection 
vertex intersection 
edge intersection 
vertex intersection 
vertex intersection 
edge intersection 
containment 
containment 
containment 
Objects 
subtrees 
subtrees 
subtrees 
paths 
paths 
paths 
intervals 
paths 
subtrees 
Host 
tree 
star 
star 
path 
tree 
tree 
line 
tree 
star 
Graph Class 
chordal graphs 
split graphs 
all graphs 
interval graphs 
path graphs or VPT graphs 
EPT graphs 
permutation graphs 
? (open question) 
comparability graphs 
Proof. Let G = {V,E)hQ any graph, and let E = {^i,...,e^}. Consider 
the star T formed by a central node u and leaves ei,..., e^. Define the substar 
corresponding to vt to be the substar Tt of T induced by {w} U {e^ 11;^ G e^}. 
Clearly, vtVj e E if and only if Tt and 7} share an edge, namely edge uek of T 
where ek = VfVj. 
| 
We will see below, in Theorem 13.6, that a graph is the vertex intersection 
graph of substars of a star if and only if it is a split graph. 
Two different classes of intersection graphs also arise when considering simple 
paths (instead of subtrees) of an arbitrary host tree T. The path graphs, which 
we mentioned on page 94, are the subfamily of chordal graphs obtained as the 
"vertex intersection graphs of paths in a tree" and are also called VPT graphs. 
However, the graphs obtained as the "edge intersection graphs of paths in a tree", 
called EPT graphs, are not necessarily chordal. The class of EPT graphs are not 
perfect graphs, and the recognition problem for them is NP-complete, Golumbic 
and Jamison [1985a, 1985b]. See also Monma and Wei [1986] and Systo [1985]. 
Table 1 summarizes the subtree graph classes we have discussed here and in 
Sections 13.5 and 13.6 below. A full treatment can be found in Golumbic and 
Trenk[2004, Chapter 11]. 
5. Comparability Graphs and the Dimension of Ordered Sets 
Comparability Invariants 
A graph can have many different transitive orientations, so there may be 
different partial orders with the same comparability graph. A property of partially 

286 
Epilogue 2004 
Fig. 13.1. A function diagram and its intersection graph (which is isomorphic to Cg). 
ordered sets is called a comparability invariant if either all orders with a given 
comparability graph have that property, or none have that property. For example, 
we saw in Theorem 8.13 (page 187) and in Exercise 8.7 (page 194) that the 
properties of being a semiorder or an interval order are comparability invariants. 
The dimension of a partial order is also a comparability invariant, that is, dim 
P = dim Q whenever P and Q have the same comparability graph G; hence, we 
can denote this common value by dim G. The proof we gave for Theorem 5.39 
(page 139) is incomplete; a full correct proof can be found in Trotter [1992] or 
in Golumbic and Trenk [2004]. Those references may be consulted for further 
study on comparability invariant properties. 
Function Diagrams: tiie Intersection Model for Cocomparability Graphs 
Golumbic, Rotem and Urrutia [1983] have characterized the family of 
cocomparability graphs as the intersection graphs of function lines in a 
diagram which generalizes the matching diagrams (page 162) which represent 
permutation graphs. Their function diagrams are constructed as follows. 
Let Li and Z2 be two horizontal lines. A continuous curve / connecting a 
point on Li with a point on L2 is called SL function line if, whenever two points 
{x,y) and {x',y') o n / have the same horizontal value y = y', the points must 
be equal, i.e., x = x'. A function diagram consists of Li and L2 and a set of « 
function lines connecting points on L\ and L2. The function diagram in Figure 
13.1 has six function lines. We note that a matching diagram is the special case 
in which the function lines are straight lines. 
Consider the following special type of function diagram in which the curves 
are piecewise linear. Let Li,L2,... ,Lk+i be horizontal lines each labeled from 
left to right by a permutation of the numbers 1,2,...,«. For each / (1 
<i<n) 
the curve/ consists of the union of the k straight line segments which join / on 
Lt with / on Lt+i (I < t < k). When k = I, this is just a matching diagram; 
when A: > 2, it is called the concatenation of k matching diagrams. 
The following theorem is due to Golumbic, Rotem and Uruttia [1983], and a 
proof can also be found in Golumbic and Trenk [2004]. 
Theorem 13.4. The following are equivalent, 
(i) G is the intersection graph of a function diagram, 
(ii) G is a cocomparability. 
(iii) G is the intersection graph of a concatenation of matching diagrams. 

Epilogue 2004 
287 
Moreover, if ^ is the minimum value for which G is the intersection graph of 
a concatenation of i matching diagrams, then dim G = i-\-\. 
Containment Graphs 
The containment graph G = (V,E)of3, collection ^={*S'/} of distinct subsets 
of a set S has vertex set F = {1,...,«} and edge set E = {ij \ either Sf C Sj or 
Sj C Si}. A graph with such a representation is called a containment graph. The 
class of containment graphs is equivalent to the class of comparability graphs. 
Moreover, Golumbic and Scheinerman [1989] observed that every comparability 
graph can be represented as the containment graph of a collection of subtrees 
(substars) of a star. Dushnik and Miller [1941] characterized the containment 
graphs of intervals on the line as precisely those having partial order dimension 
2, and from Chapter 7, we recall that these are equivalent to the permutation 
graphs. Generalizing interval containment, Golumbic and Scheinerman [1989] 
also showed the following. 
Theorem 13.5. A graph G is the containment graph of rectilinear boxes'^ in 
^-space if and only if dim(G) < 2d. 
Yannakakis [1982] has shown that the complexity of determining whether an 
order P has dimension < k, for any fixed A: > 3 is NP-complete. This answers 
the open problem stated in the footnote on page 138. A proof can be found in 
Mahadav and Peled [1995, Chapter 7]. Therefore, as a corollary of Theorem 
13.5, we conclude that the recognition problem for the containment graphs of 
boxes in the plane is NP-complete. 
As early as the Banff Conference in 1984, we posed the problem, "Char-
acterize the containment orders of circles in the plane and their comparability 
graphs", see Rival [1985, page 583]. Progress on this question can be found in 
Fishburn [1988], Scheinerman and Wierman [1988], and Scheinerman [1992]. 
Sphere orders are the generalization to higher dimension, and are also found in 
the literature. Characterizing the containment graphs of paths in a tree is still an 
open problem. 
New Complexities for Comparability Graphs, Transitive Orientation and 
Permutation Graphs 
New algorithms have been found for recognizing comparability graphs and 
permutation graphs, based on fast modular decomposition of graphs. Modular 
decomposition is the recursive version of the method we saw in Section 5.2. The 
Boxes with sides parallel to the axes. 

288 
Epilogue 2004 
first of these new algorithms were due to Spinrad [1985]. McConnell and Spinrad 
[1999] show how to find an orientation F of an arbitrary graph G = (V,E) such 
that F is a transitive orientation (TRO) of G if and only if G is a comparability 
graph. This is very good if there is other information guaranteeing that G is 
a comparability graph. However, this alone does not recognize comparability 
graphs, since the algorithm simply produces an orientation which is not transitive 
when G is not a comparability graph. Hence, to complete it to a recognition 
algorithm, one must test F to determine if it is transitive. 
The complexity of their method uses 0(n + e) time to produce a linear ordering 
Li of the vertices which is then applied to E to produce an orientation Fi. It then 
uses 0(n^) time to test whether Fi is transitive, where 0(n^) is the complexity 
to perform transitive closure or n x n matrix multiplication (currently n^-^^^). In 
a similar fashion, they can produce another linear ordering L2 of the vertices 
which if applied to E will produce an orientation F2 which will be transitive 
if and only if G is a cocomparability graph. So the complexity of recognizing 
cocomparabilty graphs is currently also 0(n^). 
Interestingly, their method allows recognizing permutation graphs in 0{n + e) 
time, by first producing Li, L2 and Fi and calculating the in-degrees and out-
degrees of Fi and F2, but without actually producing F2, since otherwise the 
complexity will hit 0(n^). These enable us to follow the construction in the proof 
of our Theorem 7.1 (pages 158-159), yielding a permutation representation for 
G, if G is a permutation graph, or a contradiction among the degrees if G is not 
a permutation graph. 
6. Split Graphs 
Theorem 4.8 stated that a graph is the (vertex) intersection graph of a set 
of subtrees of a tree if and only if it is a triangulated graph. McMorris and 
Shier [1983] give an analogous version for split graphs, which we recall are 
characterized as being both triangulated and cotriangulated (Theorem 6.3, page 
151). If the host tree F is a star Ki^n, then each induced subtree consists of either 
a substar containing the central node or just a single leaf node. It is easy to see 
that the graphs obtained in this restriction are precisely the class of split graphs, 
as observed in McMorris and Shier [1983]. 
Theorem 13.6. A graph G is the vertex intersection graph of distinct induced 
subtrees of a star Ki^n if and only if G is a split graph. 
Proof. Recall that a graph G is a split graph if its vertices can be partitioned 
into a clique K = {xu...,Xk} 
and a stable set S = {yi,...,yi}. 
If G is 
a split graph, consider the star T formed by a central node u and leaves 
3ci,... ,jc^,Ji,... ,J^, where the subtree corresponding to yi G S is the single 

Epilogue 2004 
289 
leaf y^ in T and the subtree corresponding to jc/ G K consists of the substar 
of T induced by {w,X/} U {yj \yj G AdjXxi)}. Clearly, this is an intersection 
representation for G. Conversely, if we are given a representation for G as the 
intersection graph of distinct induced substars of a star, then those substars 
containing the central node correspond to a clique in G and the remaining 
subtrees (the single leaves) correspond to a stable set of G. 
| 
7. Permutation Graphs and Applications from Circuit Design 
Matching diagrams, like those we studied in Section 7.4, are used in circuit 
design for channel routing problems where a set of numbered pins on the upper 
side of the diagram must be connected (electrically) to a set of pins on the lower 
side. The area between the upper and lower horizontals is called the channel. 
When a pair of line segments connecting matched pins intersect, they must 
be placed on different silicon layers, similar to the altitudes for the aircraft in 
Application 7.1. Thus, the minimum number of layers needed to realize the 
diagram equals the clique number a){G) of its permutation graph G, the value of 
which can be calculated in 0(n log n) time. We will discuss briefly two similar 
graph problems originally motivated by circuit design. The books by Lengauer 
[1990] and Shrwani [1995] give a comprehensive treatment of other VLSI design 
and routing algorithms. 
Cell Flipping in Matching Diagrams 
Golumbic and Kaplan [1998] have considered the following generalization 
of the channel routing problem above, which is motivated by "standard cell" 
technology. The numbers on each side of the channel are partitioned into 
consecutive subsequences, or cells, each of which can be left unchanged or 
flipped (i.e., reversed). This takes place at a stage where the cell placement on 
horizontal rows has already been performed, and the only remaining degree of 
freedom is replacing some of the cells with their "mirror image" with respect to 
the vertical axis, i.e., cell flipping. The questions asked are: 
MINFLIP: For what choice of flippings will the resulting clique number be 
minimized? 
MAXFLIP: For what choice of flippings will the resulting clique number be 
maximized? 
For example, let the upper sequence be partitioned [3,4,7], [2,6], [1,5,8] and 
let the lower sequence be [6', 2', 5'], [4\ l\ 7', 8', 3'], where the brackets indicate 
cells. The clique number (JO(G) is 4 with no flipping but is reduced to 3 if we 
flip [2,6], or is increased to 5 if we flip [2,6] , [6', 2', 5'] and [4', V, T, 8', 3']. 

290 
Epilogue 2004 
The complexity of the MAXFLIP problem is 0{n^) using a dynamic program-
ming algorithm, whereas the MINFLIP problem is NP-complete (see Golumbic 
and Kaplan [1998]). When one side of the channel is fixed (no flipping on that 
side), the problem of finding a flipping for the other side which maximizes the 
clique number can be found in 0{n log n) time. Verbin [2002] has shown the 
complexity of the one side flipping problem for minimizing the clique number 
to be NP-complete. 
We note that the cell flipping problems could have been defined to minimize or 
maximize the stability number. It is clear, however, that these stability problems 
are computationally equivalent to our clique problems, since a{G) = (o(G) and 
G is a permutation graph if and only if G is a permutation graph. For example, 
the 4 different one side flipping problems can be restated as follows: Given a 
permutation of the numbers 1,2,...,« partitioned into cells, find flippings which 
minimize/maximize the longest increasing/decreasing subsequence. 
Trapezoid Graphs 
Dagan, Golumbic and Pinter [1988] extended the notion of a permutation 
diagram by replacing each matching segment f-/' by a trapezoid obtained firom 4 
points fl/, bf, Ci, di where interval // = [a/, bf] lies on the upper line of the diagram 
and interval // = [c,, df] lies on the lower line of the diagram. The intersection 
graphs of these trapezoid diagrams are called trapezoid graphs. Trapezoid graphs 
are a subclass of cocomparability graphs, and their associated (trapezoid) orders 
are precisely those having interval dimension 2 (see Trotter [1992]). 
Langley [1995] and Ma and Spinrad [1994] gave polynomial time algorithms 
for recognizing trapezoid graphs, and Felsner, Miiller and Wemisch [1997] have 
given optimal maxclique and maxstable set algorithms for the class. Further 
investigation of the class can be found in Cheah and Cornell [1996]. As we 
will mention below, trapezoid graphs are equivalent to the bounded bitolerance 
graphs. 
Cographs and Factoring Read-Once Functions 
An important subfamily of permutation graphs are the complement reducible 
graphs, or cographs, which were investigated by Cornell, Lerchs and Burlingham 
[1981] and Cornell, Perl and Stewart [1985]. Cographs can be defined recursively 
as follows: (1) a single vertex is a cograph; (2) the disjoint union of cographs is a 
cograph; (3) the complement of a cograph is a cograph. Alternately, they can be 
defined by a restricted type of decomposition, as in our Section 5.2 (page 111) 
where GR would be either a clique or a stable set. One can recognize whether a 
graph G is a cograph by repeatedly decomposing it in this way, and in linear time 

Epilogue 2004 
291 
obtain a representation called its cotree. The cotree is useful in many algorithms 
for the class. The next theorem gives several characterizations of cographs. 
Theorem 13.7. The following are equivalent for an undirected graph G. 
(i) G is a cograph. 
(ii) G is P4-free. 
(iii) For every subset X of vertices, either the induced subgraph Gx is 
disconnected or its complement Gx is disconnected. 
Recognizing cographs and building the associated cotree has been recently 
used in an application involving multi-level logic synthesis. Golumbic and Mintz 
[1999] presented a factoring algorithm for general Boolean functions which is 
based on graph partitioning, and at the lower levels of the recursion, read-once 
functions are handled in a special manner. Read-once functions are very closely 
related to cographs, as we shall see. 
A Boolean function F is called a read-once function if it has a factored 
form in which each variable appears exactly once. For example, the function 
F\ = aq + acp + ace is a read-once function since it can be factored into the 
formula F\ = a{q + c(p + e)). The function Fi "= ab •\-ac ^- be is not a read-once 
function. Read-once functions have interesting special properties and account 
for a large percentage of functions which arise at the lower level real circuit 
applications. They have also gained recent interest in the field of computational 
learning theory. 
Let F = ai + • • • + a^ be given in disjunctive normal form (sum-of-products), 
where each a^ is a product term, and let F = {fi,..., i;„} be its set of variables. 
We consider the graph Tf = {V,E) of F where ViVj G E whenever Vi and Vj 
appear together in some product term ak. The fimction F is called normal if 
every clique of If is contained in one of the product terms. Our example Fi 
above is not normal since Tf^ is a triangle, but all product terms are of size 
2. The dual F* of F is the function obtained from F by replacing products by 
sums and sums by products. By taking the disjunctive normal form of F* one 
can construct the graph If*. The next theorem is due to Gurvich [1991]: 
Theorem 13.8. The following are equivalent: 
(i) F is a read-once function, 
(ii) TF is F4-free (i.e., a cograph) and F is a normal function. 
(iii) rF = rF*. 
Golumbic, Mintz and Rotics [2001] present a very fast method for recognizing 
and factoring read-once functions based on algorithms for cograph recognition 
and on checking normality. 

292 
Epilogue 2004 
8. interval Graphs and Circular-arc Graphs 
AT-Free Graphs 
Three vertices vu 02,03 in a graph G = {V,E) form an asteroidal triple {AT) 
if, for all permutations ij,k 
of {1,2,3}, there is a path from Vi to Vj which 
avoids using any vertex in the neighborhood Nipk) = VkUAdjXuk). An easy way 
to verify this for Vk is to delete N(vk) and test whether Vi and vj remain in the 
same connected component of G - N(uk). It also follows from the definition that 
the three vertices of an asteroidal triple are pairwise nonadjacent. For example, 
the graph in Figure 8.15 (page 196) has 8 asteroidal triples^. 
A graph is called asteroidal triple free or AT-free if it contains no asteroidal 
triple. We saw in Theorem 8.4 (page 174) that interval graphs are characterized 
by being chordal and AT-free. Golumbic, Monma and Trotter [1984] proved the 
following result. 
Theorem 13.9. Every cocomparability graph is an AT-free graph. 
More recently, Comeil, Olariu and Stewart [1997, 1999] have given new 
algorithmic and structural results for AT-free graphs. Kohler [2000] also provides 
efficient recognition algorithms for the class. 
Tolerance Graphs 
Tolerance graphs were introduced by Golumbic and Monma [1982] to 
generalize some of the applications associated with interval graphs. Their 
motivation was the need to solve scheduling problems, more general than what 
we saw in Section 1.3, in which resources such as rooms, vehicles, support 
personnel, etc. may be needed on an exclusive basis, but where a measure of 
flexibility or tolerance would be allowed for sharing or relinquishing the resource 
when total exclusivity prevented a solution. The recent book by Golumbic and 
Trenk [2004] contains a thorough study of tolerance graphs and related topics. 
An undirected graph G = (Kj^") is a tolerance graph if there exists a collection 
I = {Iv}vev of closed intervals on the real line and an assignment of positive 
numbers t = {tujuev such that 
uw eE ^F^lIaD Q > mm{t^, t^}. 
Here |4| denotes the length of the interval 4 . The positive number t^ is called the 
tolerance of v, and the pair (I, /) is called an interval tolerance representation 
of G. A tolerance graph is said to be bounded if it has a tolerance representation 
^ In this book, we incorrectly spelled these "astroidar' rather than asteroidal. 

Epilogue 2004 
293 
in which t^ < \Iu\ for all v e V, Tolerance graphs generalize both interval graphs 
and permutation graphs, and in Golumbic and Monma [1982] it was shown that 
every bounded tolerance graph is a cocomparability graph. Golumbic, Monma 
and Trotter [1984] proved that tolerance graphs are perfect and are contained in 
the class of weakly chordal graphs. 
Coloring boimded tolerance graphs in polynomial time is an immediate 
consequence of their being cocomparability graphs. Narasimhan and Manber 
[1992] use this fact (as a subroutine) to find the chromatic number of any 
(unbounded) tolerance graph in polynomial time, but not the coloring itself 
Golumbic and Siani [2002] give an 0(qn + nlogn) algorithm for coloring 
a tolerance graph, given the tolerance representation with q vertices having 
unbounded tolerance (see Golumbic and Trenk [2004]). The complexity of 
recognizing tolerance graphs and bounded tolerance graphs remain open 
questions. 
A variety of "variations on the theme of tolerance" in graphs have been defined 
and studied over the past years. By substituting a different "host" set instead 
of the real line and with a specified type for the subsets of that host instead 
of intervals, we obtain classes such as neighborhood subtree tolerance (NeST) 
graphs, tolerance graphs of paths on a tree or tolerance competition graphs. By 
changing the fimction min for a different binary fimction (/) (for example, max, 
sum, product, etc.), we obtain a class that will be called (p-tolerance graphs. 
By replacing the measure of the length of an interval by some other measure 
jU of the intersection of the two subsets (for example, cardinality in the case 
of discrete sets, or number of branching nodes or maximum degree in the case 
of subtrees of trees), we could obtain yet other variations of tolerance graphs. 
When we restrict the tolerances to be 1 or CXD, we obtain the class of interval 
probe graphs. By allowing a separate leftside tolerance and rightside tolerance 
for each interval, various bitolerance graph models can be obtained. For example, 
Langley [1993] showed that the bounded bitolerance graphs are equivalent to the 
class of trapezoid graphs. Directed graph analogues to several of these models 
have also been defined and studied. For fiirther study of tolerance graphs and 
related topics, we refer the reader to Golumbic and Trenk [2004]. 
Circular-Arc Graphs 
In Section 8.6, we presented the early work on circular-arc graphs, the 
intersection graphs of arcs on a circle. The first polynomial time algorithm 
for recognizing circular-arc graphs was given by Tucker [1980] and had 
complexity 0{n^). Over the years, more efficient algorithms were designed for 
the recognition problem first by Hsu [1995] in 0{ne) and Eshen and Spinrad 
[1993] in 0(«2), and most recently by McConnell [2001,2003] in 0{n + e) which 
is optimal. The coloring problem for circular-arc graphs was shown to be NP-

294 
Epilogue 2004 
complete by Garey, Johnson, Miller and Papadimitriou [1980]. The maximum 
stable set and the maximum clique problems are polynomial, see Golumbic and 
Hammer [1988], Hsu and Spinrad [1995], Hsu [1985], Apostolico and Hambrus 
[1987]. 
9. Superperfect Graphs 
Superperfect Noncomparability Graphs 
Progress has been made on the question asked in Section 9.4, "When does 
superperfect equal comparability?" Gallai [1967] published a complete list of the 
minimal noncomparability graphs, that is, the noncomparability graphs with the 
property that removing any vertex makes the remaining subgraph a comparability 
graph, see also Berge and Chvatal [1984, p. 78]. Using this list, Andreae [1985] 
determined all of the minimal noncomparability graphs which are superperfect. 
One of these is the graph in our Figure 1.18 on p. 18 which we incorrectly 
placed in the position of non-superperfect in Figure 9.9 on p. 212. This graph 
is superperfect and a simple proof is also given in Kloks and Bodlander [1992, 
Theorem 3.2]. 
In Corollary 9.8, we saw that for split graphs, G is a comparability graph if 
and only if G is superperfect. This motivated our asking the question of whether 
or not this equivalence holds for triangulated graphs or for cotriangulated graphs. 
Using his forbidden subgraph characterization of superperfect noncomparability 
graphs, Andreae [1985] answered this question with "false" for triangulated 
graphs and "true" for cotriangulated graphs, showing the following. 
Theorem 13.10. 
(i) For cotriangulated graphs, G is a comparability graph if and only if G is 
superperfect. 
(ii) For triangulated graphs, G is a comparability graph if and only if G is 
superperfect and contains no induced subgraph isomorphic to Gi, G2 or G3 
of Figure 13.2. 
As Andreae [1985] points out, this list of the minimal superperfect non-
comparability graphs could also be used to answer our equivalence question 
for other hereditary classes of graphs. In a similar investigation for A:-trees, 
AAA 
.VA 
@ \ 
Fig. 13.2. The minimal triangulated, superperfect noncomparability graphs. 

Epilogue 2004 
295 
Kloks and Bodlander [1992] gave a complete characterization, by means of 
forbidden subgraphs, of the superperfect 2-trees. The graph G\ is a superperfect 
2-tree. They also give an algorithm for testing superperfection in A:-trees, whose 
complexity is linear for any fixed k, and can produce a complete forbidden 
subgraph characterization of superperfect A:-trees. 
10. Threshold Graphs 
The undisputed authority on threshold graphs and related topics is the book 
by Mahadev and Peled [1995]. It is a masterpiece of clarity, and it presents 
a comprehensive coverage of Ferrers digraphs, threshold dimension, measures, 
weights, orders, enumeration, and a variety of generalizations, variations and 
specializations of threshold graphs. Any intention of updating or expanding upon 
Chapter 10 must therefore defer to their book. 
New complexity results on the threshold dimension of a graph deserve 
mentioning. In Section 10.1, we defined the threshold dimension 9(G) of a graph 
G. Threshold graphs are those having threshold dimension at most 1, and they 
can be recognized in linear time. The complexity of determining d(G) is NP-
complete (page 223), and a stronger result is that determining whether d{G) < k, 
for any fixed A: > 3, is NP-complete (Golumbic [1981], Yannakakis [1982]). So 
the remaining question, open for the next dozen years, was whether recognizing 
threshold dimension 2 could be done in polynomial time. A positive answer to 
this question follows from the next interesting result. 
Two edges of G are said to conflict if their endpoints induce in G one of the 
forbidden subgraphs C4, P4 or 2K2 characterizing threshold graphs (see Theorem 
10.7, page 227). The conflict graph G* of G is defined by taking V(G*) = E(G) 
and by joining two vertices of G* by and edge in E{G*) if and only if their 
corresponding edges in G conflict. For example, the conflict graph of a threshold 
graph is a stable set, and the conflict graph of C4 is 2K2. We noted in Section 
10.1, that we can take 6(G) to be the minimum number of threshold graphs 
needed to cover the edges of G. Thus, Chvatal and Hammer [1977] observed that 
such an edge covering of G leads to a valid coloring of G*, that is, xi^*) ^ 6(G) 
where each color represents a threshold graph in the edge covering. From this 
inequality, one can see that whenever G has threshold dimension 2, its conflict 
graph G* must be a bipartite graph. The converse of this implication for 6(G) = 2 
was conjectured to hold by Ibaraki and Peled [1981], and it was finally proven 
by Raschle and Simon [1995], which we record as follows. 
Theorem 13.11. A graph G has threshold dimension 2 if and only if its conflict 
graph G* is a bipartite graph. 

296 
Epilogue 2004 
A proof of this theorem can be found in Mahadev and Peled [1995, Section 
8.5]. Since constructing the conflict graph and testing whether it is 2-colorable 
can be done in polynomial time, we immediately obtain the following corollary. 
Theorem 13.12. The problem of determining whether d(G) < 2 has poly-
nomial time complexity. 
Threshold Hypergraphs 
In Section 10.4, we presented the definition of threshold hypergraph and gave 
an application in which they might be usefiil for the allocation of resources. 
Threshold hypergraphs are closely related to the class of threshold Boolean 
functions. We also posed a Research Problem (on page 233) giving three 
properties of r-regular hypergraphs, each being a generalization of threshold 
graphs to hypergraphs. Reiterman, et al. [1985] have shown that these three 
properties are different, and they have given a characterization of the most 
general of them (T^) which are known as shift stable r-regular hypergraphs. 
Boros [1991] has generalized this further, giving a characterization of shift stable 
hypergraphs (not necessarily regular ones). 
11. Circle Graphs 
Circle graphs are the intersection graphs of chords of a circle. In Chapter 
11, we called these "not so perfect graphs" rather as a joke, needing an excuse 
to include them in the book even though they are not perfect graphs. Circle 
graphs are an important and natural extension of permutation graphs, and their 
equivalence with overlap graphs raises their status even further. The recognition 
problem for circle graphs, which had been open, was solved independently by 
Bouchet [1987] and Gabor, Supowit, and Hsu {1989] who gave polynomial 
algorithms with complexity of 0(w'*) and 0(n^), respectively. Subsequently, an 
0(n^) method was given by Spinrad [1994]. A further characterization of circle 
graphs appears in Bouchet [1994]. 
12. Chordal Bipartite Graphs 
We defined the class of chordal bipartite graphs in Section 12.4 as those 
bipartite graphs which, for all k> A, have no induced chordless cycle Q. Thus, 
a chordal bipartite graph is not necessarily a chordal graph since the 4-cycle C4 

Epilogue 2004 
297 
is chordal bipartite but not chordal^. Recalling the definition of weakly chordal 
graphs (Section 13.4 above), it is a simple exercise to show the following: 
Theorem 13.13. An undirected graph G is chordal bipartite if and only if G 
is bipartite and weakly chordal. 
Chordal bipartite graphs are also related to strongly chordal graphs and to 
totally balanced matrices. A 0/1 matrix is called totally balanced if it does 
not contain as a submatrix the (vertex-edge) incidence matrix of a cycle of 
length > 3. A 0/1 matrix is called T-free if it does not contain a submatrix of the 
form (}Q). Anstee and Farber [1984], Hoffman, Kolen and Sakarovitch [1985] 
and Lubiw [1987] proved the following: 
Theorem 13.14. A 0/1 matrix is totally balanced if and only if its rows and 
columns can be permuted so that the resulting matrix is T-free. 
Let G = (V,E) be an undirected graph with V = {vi,...,Un}. 
We define 
the clique-vertex incidence graph of G to be the bipartite graph H(G) with the 
vertices of G on one side and the maximal cliques of G on the other side, such 
that a vertex i; of G is adjacent to a clique ^ of G in H{G) if and only if i; is a 
member of K in G. In Section 8.2 (page 174), studying the characterizations of 
interval graphs, we defined a similar notion, the clique-vertex incidence matrix 
of G which we denote by M = M(G). 
Finally, we define B{G) = {X,Y,E') 
to be the bipartite graph where 
X = {xi,... ,x„}, 7 = {71,... ,yn} and E' = {xtyt \ Vf e V}U {xfyj \ vtVj e E}. 
The graph B(G) is, in fact, the same as the closed neighborhood-vertex incidence 
graph of G. 
The following theorem is due to Farber [1983]. 
Theorem 13.15. The following conditions are equivalent: 
(i) G is a strongly chordal graph, 
(ii) H(G) is a chordal bipartite graph, 
(iii) M(G) is a totally balanced matrix, 
(iv) B{G) is a chordal bipartite graph. 
We mention another interesting equivalence which follows essentially from our 
proof of Theorem 12.1, and was stated explicitly later in Brandstadt [1991]. 
^ When I introduced the term "chordal bipartite graph" in 1978, my thinking was that the word 
"chordal" in this context should be interpreted as an adjective permitting cycles of the smallest 
possible length (length 3 for graphs in general, or length 4 for bipartite graphs) but requiring 
that any larger cycle must have a chord. Thus, the meaning of "chordal" was context dependent, 
admittedly a somewhat confusing matter. Indeed, this criticism is voiced in Brandstadt, Le and 
Spinrad [1999, page 41]. Clearly, a graph G is both a chordal graph and bipartite if and only ifG 
is a forest of trees. 

298 
Epilogue 2004 
Theorem 13.16. An undirected graph G is a chordal graph if and only if B(G) 
is a perfect elimination bipartite graph. 
Our Corollary 12.11 (page 263) related chordal bipartite graphs to perfect 
elimination bipartite graphs by adding the hereditary property to the latter. We 
now present two additional characterizations of chordal bipartite graphs. 
Let H = (X, Y,E) be a bipartite graph, and let <7 = [ei,..., e^] be an ordering 
of the edges. Define Hf = (X, Y,Ei) where Ef = {ci,... ,6^}, that is, Hf is the 
graph obtained by erasing the edges ei,..., ^/_i, but not their endpoints. We call 
a diperfect "edge-without-vertex" erasing ordering if e/ is bisimplicial in Hf. 
Denote by Split^(ii/) the split graph obtained by completing Y into a clique. 
In the following theorem, the equivalence (i) <^^ (ii) is due to Dalhaus [1991], 
and several researchers, according to Brandstadt, Le and Spinrad [1999], have 
observed (i) ^^=^ (iii). 
Theorem 13.17. The following conditions are equivalent for a bipartite graph 
H: 
(i) // is a chordal bipartite graph. 
(ii) Split7(i/) is a strongly chordal graph, 
(iii) H has an edge-without-vertex erasing order. 
Further results on chordal bipartite graphs, relating them to vertex orderings, 
totally balanced matrices, matrices having a F-free ordering, and other classes, 
can be found throughout Brandstadt, Le and Spinrad [1999]. Minimum triangu-
lations of chordal bipartite graphs are studied in Kloks [1994]. 
A Final Note on Terminology 
Samuel Eilenberg, one of the leading mathematicians of the twentieth 
century, and my doctoral thesis advisor, objected strenuously against the use 
of mathematical terms such as "partial function". In his view, an adjective 
modifying a noun should specialize the mathematical concept represented by 
the noun and not generalize it. Since a partial function is not a function at all, 
but rather a mapping which is defined on only part of its domain, i.e., a partially 
defined function, he regarded such terms as an imprecise abuse of language. 
For him, semigroups were always monoids (with identity), and he would have 
disliked weakly chordal graphs. 
Thus, quite correctly, a subset is a set, a recursive function is a function, an 
alligator purse is a purse, and a strongly chordal graph is a chordal graph, which 
in turn is a graph. The "is-a" hierarchy is a partial order (whoops!) is a partially 
ordered set (whoops again!) is simply an order. 
The terminology we used in this book, and subsequently, has tried to follow 
this principle. For example, we prefer to use the terms interval tolerance graphs 

Epilogue 2004 
299 
and neighborhood subtree tolerance graphs when referring to these classes, but 
never tolerance interval graphs since the concept of an interval graph is so firmly 
established in the literature. Similarly, we insist on using the term interval probe 
graphs. The use of chordal bipartite graph is consistent with this approach, but 
has caused confusion. It is never possible to get it right every time, but we hope 
that there will be enough tolerance on both sides of the interval to keep the 
conflict graph very sparse. 
Bibliography 
Allen, James F. 
[1983] Maintaining knowledge about temporal intervals, Commun. ACM 26, 832-843. 
Alon, Noga, and Scheinerman, Edward R. 
[1988] Degrees of freedom versus dimension for containment orders, Order 5, 11-16. 
Andreae, T. 
[1985] On superperfect non-comparability graphs, J. Graph Theory 9, 523-532. 
Anstee, Richaed R, and Farber, Martin 
[1984] Characterizations of totally balanced matrices, J. of Algorithms 5, 215-230. 
Apostolico, A., and Hambrus, S.E. 
[1987] Finding maximum cliques on circular-arc graphs, Infor Process. Lett. 26, 209-215. 
Atkins, J.E. and Middendorf, M. 
[1996] On physical mapping and the consecutive ones property for sparce matrices, Discrete 
Applied Math. 71, 23-40. 
Avriel, M., Penn, M. and Shpirer, N. 
[2000] Container ship stowage problem: complexity and connection to the coloring of circle 
graphs, Discrete Applied Math. 103, 271-279. 
Berge, Claude, and Chvatal, V, eds. 
[1984] ^'Perfect Graphs", Annals of Discrete Math., vol. 21, North-Holland, Amsterdam. 
Berry, A., and Bordat, J. R 
[2001] Asteroidal triples of moplexes, Discrete Applied Math. Ill, 219-229. 
Bibelnieks, E., and Bearing, R M. 
[1993] Neighborhood subtree tolerance graphs. Discrete Applied Math. 43, 107-144. 
Boros, Endre 
[1991] On shift stable hypergraphs. Discrete Math. 87, 81-84. 
Bouchet, A. 
[1987] Reducing prime graphs and recognizing circle graphs, Combinatorica 7, 243-254. 
[1994] Circle graph obstructions, J. Combin. Theory B 60, 8-22. 
Brandstadt, A. 
[1991] Classes of bipartite graphs related to chordal graphs, Discrete Applied Math. 32, 51-60. 
[1997] LexBFS and powers of chordal graphs. Discrete Math. 171, 27-42. 
Brandstadt, A., Le, V B., and Spinrad, J. R 
[1999] ''Graph Classes: A Survey'\ SIAM, Philadelphia. 
Cheah, M., and Cornell, D. G. 
[1996] On the structure of trapeziod graphs, Discrete Applied Math. 66, 109-133. 
Chudnovsky, M., Comuejols, G., Liu, X., Seymour, P., and Vuskovic, K. 
[2002] Cleaning for Bergeness, submitted for publication. 

300 
Epilogue 2004 
Chudnovsky, M., Robertson, N., Seymour, P. and Thomas, R. 
[2002] The Strong Perfect Graph Theorem, submitted for publication. 
Chudnovsky, M., and Seymour, P. 
[2002] Recognizing Berge graphs, submitted for publication. 
Chvatal, V 
[1985] Star-cutsets and perfect graphs, J. Combin. Theory B 39, 189-199. 
Cook, W. J., Cunningham, W. H., Pulleyblank, W. R., and Schrijver, A. 
[1998] ''Combinatorial Optimization'', John Wiley & Sons, New York. 
Corman, T. H., Leiserson, C. E., Rivest, R. L., and Stein, C. 
[2001] ''Introduction to Algorithms", second edition, McGraw-Hill and MIT Press, Cambridge, 
Mass. 
Cornell, D. G., Kim, H., Natarajan, S., Olariu, S., and Sprague, A. 
[1995] Simple linear time recognition of unit interval graphs, Infor Process. Letters 55, 99-104. 
Cornell, D. G., Lerchs, H., and Burlingham, L. 
[1981] Complement reducible graphs. Discrete Applied Math. 3, 163-174. 
Cornell, D. G., Olariu, S., and Stewart, L. 
[1997] Asteroidal triple-free graphs, SIAM J. Discrete Math. 10, 399-430. 
[1999] A linear algorithms for dominating pairs in asteroidal triple-free graphs, SIAM J. 
Computing 28, 1284-1297. 
Cornell, D. G., Peri, Y., and Stewart, L. 
[1985] A linear recognition algorithm for cographs, SIAM J. Computing 14, 926-934. 
Comuejols, G., Liu, X., and Vuskovic, K. 
[2002] A polynomial algorithm for recognizing Berge graphs, submitted for publication. 
Dagan, Ido, Golumbic, Martin Charles, and Pinter, Ron.Y 
[1988] Trapezoid graphs and their coloring. Discrete Applied Math. 21, 35-46. 
Dahlhaus, E. 
[1991] Chordale Graphen im besonderen Hinblick auf parallele Algorithmen, Habilitation thesis, 
Univ. Bonn. 
Eschen, Elaine M., and Spinrad, J. P. 
[1993] An 0(n^) algorithm for circular-arc graph recognition, Proc. 4th ACM-SIAM Symp. on 
Discrete Algorithms, pp. 128-137. 
Farber, M. 
[1983] Characterizations of strongly chordal graphs. Discrete Math. 43, 173-189. 
Felsner, S., Miiller, R., and Wemisch, L. 
[1997] Trapezoid graphs and generalizations, geometry and algorithms, Discrete Applied Math. 
74, 13-32. 
Fishbum, Peter C. 
[1985] "Interval Orders and Interval Graphs: A Study of Partially Ordered Sets'", John Wiley & 
Sons, New York. 
[1988] Interval orders and circle orders. Order 5, TlS-liA. 
Gabor, C, Supowit, K., and Hsu, W. 
[1989] Recognizing circle graphs in polynomial time, J. Assoc, for Comput. Mach. 36, 435-473. 
Garey, M. R., Johnson, D. S., Miller, G. L., and Papadimitriou, C. H. 
[1980] The complexity of coloring circular arcs and chords, SIAM J. Alg. Discrete Meth. 1, 
216-227. 
Gattass, E. A. and Nemhauser, G. L. 
[1981] An application of vertex packing to data analysis in the evaluation of pavement 
deterioration. Operations Research Letters 1, 13-17. 

Epilogue 2004 
301 
Goldberg, A. V 
[1998] Recent developments in maximum flow algorithms, Technical Report 98-045, NEC 
Research Institute. 
Goldberg, A. V, and Tarjan, R. E. 
[1988] A new approach to the maximum flow problem, J. Assoc, for Comput. Mach. 35,921-940. 
Goldberg, P. W., Golumbic, M. C, Kaplan, H., and Shamir, R. 
[1995] Four strikes against physical mapping of DNA, J. Comput. Biology 3, 139-152. 
Golumbic, Martin Charles 
[1984] Algorithmic aspects of perfect graphs. Annals of Discrete Math. 21, 301-323. 
[1988] Algorithmic aspects of intersection graphs and representation hypergraphs, Graphs and 
Combinatorics 4, 307-321. 
[1998] Reasoning about time, in ''Mathematical Aspects of Artificial Intelligence'', E Hoffman, 
ed., American Mathematical Society, Proc. Symposia in Applied Math., vol 55, pp. 19-53. 
Golumbic, Martin Charles, and Hammer, Peter L. 
[1988] Stability in circular arc graphs, I of Algorithms 9, 314-320. 
Golumbic, Martin Charles, and Jamison, Robert E. 
[1985a] Edge and vertex intersection of paths in a tree. Discrete Math. 55, 151-159. 
[1985b] Edge intersection graphs of paths in a tree, J. Combin. Theory B 38, 8-22. 
Golumbic, Martin Charles, and Kaplan, Haim 
[1998] Cell flipping in permutation diagrams, Lecture Notes in Comput. Sci. 1373, Springer-
Verlag, 577-586. 
Golumbic, Martin Charles, Kaplan, Haim, and Shamir, Ron 
[1994] On the complexity of DNA physical mapping. Advances in Applied Math. 15, 251-261. 
[1995] Graph sandwich problems, J. of Algorithms 19, 449-473. 
Golumbic, Martin Charles, and Laskar, Renu 
[1993] Irredundancy in circular arc graphs. Discrete Applied Math. 44, 79-89. 
Golumbic, Martin Charles, and Mintz, Aviad 
[1999] Factoring logic fiinctions using graph partitioning, Proc. IEEE/ACM Int. Conf Computer 
Aided Design, pp. \95-\9S. 
Golumbic, Martin Charles, Mintz, Aviad, and Rotics, Udi 
[2001] Factoring and recognition of read-once functions using cographs and normality, Proc. 38th 
ACM Design Automation Conference, pp. 109-114. 
Golumbic, Martin Charles, and Monma, Clyde L. 
[1982] A generalization of interval graphs with tolerances, Proc. 13th Southeastern Conf on 
Combinatorics, Graph Theory and Computing, Congressus Numerantium 35, Utilitas 
Math., Winnipeg, Canada, pp. 321-331. 
Golumbic, Martin Charles, Monma, Clyde L., and Trotter, W. T. 
[1984] Tolerance gTa.phs, Discrete Applied Math. 9, 157-170. 
Golumbic, Martin Charles, Rotem, Doron, and Urrutia, Jorge 
[1983] Comparability graphs and intersection graphs. Discrete Math. 43, 37-46. 
Golumbic, Martin Charles, and Scheinerman, Edward R. 
[1989] Containment graphs, posets, and related classes of graphs, Ann. N.Y. Acad. Sci. 555, 
192-204. 
Golumbic, Martin Charles, and Shamir, Ron 
[1993] Complexity and algorithms for reasoning about time, J. Assoc, for Comput. Mach. 40, 
1108-1133. 

302 
Epilogue 2004 
Golumbic, Martin Charles, and Siani, Assaf 
[2002] Coloring algorithms for tolerance graphs: reasoning and scheduling with interval 
constraints, Lecture Notes in Comput. Sci. 2385, Springer-Verlag, pp. 196-207. 
Golumbic, Martin Charies, and Trenk, Ann N. 
[2004] ''Tolerance Graphs'", Cambridge University Press. 
Grotschel, M., Lovasz , L., and Schrijver, A. 
[1981] The ellipsoid method and its consequences in combinatorial optimization, Combinatorica 
1, 169-197. 
Hayward, Ryan B. 
[1985] Weakly triangulated graphs, J. Combin. Theory B 39, 200-209. 
Hayward, R. B., Hoang, C. T., and MafFray, F. 
[1990] Optimizing weakly triangulated graphs. Graphs and Combinatorics 6, 33-35. Erratum to 
ibid. 5, 339-349. 
Hertz, Alain 
[1995] Polynomially solvable cases for the maximum stable set problem, Discrete Applied Math. 
60, 195-210. 
Hoffman, A. J., Kolen, A. W. J., and Sakarovitch, M. 
[1985] Totally-balanced and greedy matrices, SIAM J. Alg. Discrete Meth. 6, 721-730. 
Hougardy, S. 
[1998] Inclusions between classes of perfect graphs. Technical Report, Humbolt Univer-
sity, Berlin. Available at website http://www.informatik.hu-berlin.derhougardy/paper/ 
classes.html (last checked April 2003). 
Hsu, W. L. 
[1985] Maximum weight clique algorithms for circular-arc graphs and circle graphs, SIAM J. 
Comput. 14, 224-231. 
[1995] 0(mn) algorithms for the recognition and isomorphism problems on circular-arc graphs, 
SIAM J. Comput. 24, 411-439. 
Hsu, W. L., and Spinrad, J. R 
[1995] Independent sets in circular-arc graphs, J. of Algorithms 19, 154—160. 
Johnson, D. S. and McGeoch, C. C, eds. 
[1993] ''Network Flows and Matching: First DIMACS Implementation Challenge'', American 
Mathematical Society, DIMACS Series on Discrete Mathematics and Theoretical Computer 
Science, vol. 12. 
Johnson, D. S. and Trick, M. A., eds. 
[1996] "Cliques, Coloring and Satisfiability: Second DIMACS Implementation Challenge'', 
American Mathematical Society, DIMACS Series on Discrete Mathematics and Theoretical 
Computer Science, vol. 26. 
King, V, Rao, S., and Tarjan, R. E. 
[1994] A faster deterministic maximum flow algorithm, J. of Algorithms 17, 447^74. 
Kloks, T 
[1994] "Treewidth. Computations and Approximations", Lecture Notes in Comput. Sci. 842, 
Springer-Verlag. 
Kloks, T., and Bodlaender, H. 
[1992] Testing superperfection of A:-trees, Lecture Notes in Comput. Sci. 621, Springer-Verlag, 
pp. 282-293. 
Kohler, E. 
[2000] Recognizing graphs without asteroidal triples. Lecture Notes in Comput. Sci. 1928, 
Springer-Verlag, pp. 255-266. 

Epilogue 2004 
303 
Langley, L. 
[1995] Recognition of orders of interval dimension 2, Discrete Applied Math. 60, 257-266. 
Lengauer, T. 
[1990] ^'Combinatorial Algorithms for Integrated Circuit Layouf\ John Wiley, New York. 
Lovasz, L. 
[1994] Stable sets and polynomials, Discrete Math. 124, 137-153. 
Lubiw, A. 
[1987] Doubly lexical orderings of matrices, SIAM J. Comput. 16, 854-879. 
Ma, T. H., and Spinrad, J. P. 
[1994] On the 2-chain subgraph cover and related problems, J. of Algorithms 17, 251-268. 
Mahadev, N. V R., and Peled, U. N. 
[1995] ^'Threshold Graphs and Related Topics'', North-Holland, Amsterdam. 
McConnell, Ross M. 
[2001] Linear time recognition of circular-arc graphs, Proc. 42nd IEEE Symp. on Foundations of 
Computer Science, pp. 386-394. 
[2003] Linear time recognition of circular-arc graphs, Algorithmica, to appear. 
McConnell, R. M., and Spinrad, J. R 
[1999] Modular decomposition and transitive orientation. Discrete Math. 201, 189-241. 
McKee, Terry A., and McMorris, Fred R. 
[1999] ''Topics in Intersection Graph Theory"", SIAM, Philadelphia. 
Monma, C. L., and Wei, V K. 
[1986] Intersection graphs of paths in a tree, J. Combin. Theory B 41, 141-181. 
Narasimhan, G., and Manber, R. 
[1992] Stability number and chromatic number of tolerance graphs, Discrete Applied Math. 36, 
47-56. 
Natanson, A., Shamir, R., and Sharan, R. 
[2001] Complexity classification of some edge modification problems. Discrete Applied Math. 
113, 109-128. 
Pevzner, P. 
[2000] "Computational Molecular Biology'\ MIT Press, Cambridge, Mass. 
Phillips, S., and Westbrook, J. 
[1993] On-line load balancing and network flows, Proc. 25th ACM Symp. on Theory of Computing, 
pp. 402-411. 
Prisner, E. 
[1999] A journey through intersection graph county. Available at website http://www.math. 
uni-hamburg.de/spag/gd/mitarbeiter/prisner/Pris/Rahmen.html (last checked April 2003). 
Ramirez-Alfonsin, J. L., and Reed, B., eds. 
[2001] "Perfect Graphs'', Wiley New York. 
Reiterman, J., Rodl, V, Sinajova, E., and Tuma, M. 
[1985] Threshold hypergraphs, Dwcre^e Mfl^/z. 54, 193-200. 
Rival, I., ed. 
[1985] "Graphs and Order: The Role of Graphs in the Theory of Ordered Sets and Its 
Applications", Proc. NATO Advanced Institute on Graphs and Orders (Banff, Canada, 
May 18-31, 1984), D. Reidel Publishing, Dordrecht, Holland. 
Scheinerman, E. R. 
[1992] The many faces of circle orders, Order 9, 343-348. 
Scheinerman, E.R., and Wierman, J. 
[1988] On circle containment orders. Order 4, 315-318. 

304 
Epilogue 2004 
Shrwani, N. 
[1995] ''Algorithms for VLSI Physical Design Automation", Kluwer Academic Publishers, 
Boston. 
Spinrad, J. P. 
[1985] On comparability and permutation graphs, SIAM J. Comput. 14, 658-670. 
[1994] Recognition of circle graphs, 1 of Algorithms 16, 264-282. 
Spinrad, J. P., Brandstadt, A., and Stewart, L. 
[1987] Bipartite permutation graphs, Discrete Applied Math. 18, 279-292. 
Spinrad, J. P., and Sritharan, R. 
[1995] Algorithms for weakly chordal graphs. Discrete Applied Math. 59, 181-191. 
Syslo, M. M. 
[1985] Triangulated edge intersection of paths in a tree. Discrete Math. 55, 217-220. 
Taijan, R. E., and Yannakakis, M. 
[1984] Simple linear-time algorithms to test chordality of graphs, test acyclicity of h)q3ergraphs 
and selectively reduce acyclic hypergraphs, SIAM J. Comput. 13, 566-579. 
Trotter, William T. 
[1992] ''Combinatorics and Partially Ordered Sets'\ Johns Hopkins, Baltimore. 
Verbin, E. 
[2002] personal communication. 
Waterman, Michael S. 
[1995] "Introduction to Computational Biology", Chapman Hall, London. 
Yannakakis, M. 
[1981] Computing the minimum fill-in is NP-complete, SIAM J. Alg. Discrete Methods 2, 77-79. 
[1982] The complexity of the partial order dimension problem, SIAM J. Alg. Discrete Methods 
3, 351-358. 

Epilogue 2004 
305 
perfect 
alternately 
orientable 
weakly 
chordal 
co-perfectly 
orderable 
tolerance 
cocoiiiparability 
trapezoid 
bounded tolerance 
parallelogram 
proper tolerance 
unit tolerance 
50% tolerance 
interval 
proper interval 
unit interval 
permutation 
threshold 
Fig. 13.3. A complete hierarchy of classes of perfect graphs ordered by inclusion. Reprinted from 
Golumbic and Trenk [2004]. 
* 

Index 
Abbott, H., 197 
Acharya, B. D., 161, 170 
Adjacency list, 34 
Adjacency matrix, 33 
Adjacency set, 3 
Adjacent edges, 4 
Adjacent vertices, 3 
Adnadevi6, D., 145 
Aho, A. v., 26, 37, 48 
Aigner, M., 140, 142, 143 
Algorithm, 23 
Almost perfect matrix, 65 
a-perfect, 17, 52 
Alter, R., 19, 20, 169 
Antiblocking polyhedra, 57, 66 
Antichain of a partial order, 133 
Antisymmetric relations, 2 
Applications, 10, 13, 138, 162, 181, 193, 204, 
205 
Arditti, J. C, 113,142, 143, 146 
Armstrong, W. E., 194, 197 
Array, 31 
Articulation vertex, 45 
Astroidal triple, 174 
Augmented adjacency matrix, 190, 195 
Augmented clique matrix, 65 
Auslander, L., 25, 48 
Balinski, M. L., 77 
Banquet problem, 204 
Bartholdi, J. J., 184, 198 
Baumgartner, J. E., 52, 77 
Benzaken, C, 227, 234 
Benzer's problem, 171, 182 
Benzer, S., 171, 182, 198 
Berge, C, 17, 20,51, 52, 53, 71, 76, 77, 
81,94,95,102, 198 
Biconnected graph, 45 
Biconncctivity, 45 
Bijection, 1 
Binary relation, 2 
Bipartite graph, 8 
Bipartite graph B (Af) of a matrix Af, 256 
Bisimplicial edge, 256 
Bland, R. G., 61, 78 
Bogart, K. P., 137, 146, 148 
Boland, J. C, 82, 103, 174, 200 
Bollobas, B., 78 
Booth, K. S., 25, 48, 175, 176, 177, 178, 180, 
181, 196, 198 
Breadth-first search, 39, 42 
Bryant, V. W., 143 
Buckingham, M., 58, 241 
Buneman, P., 11, 20, 92, 94, 103 
Burkard, R., 156 
B 
Back edge, 38 
Baker, K. A., 138, 146, 169 
Cactus, 101 
Canonical coloring of a permutation, 166 
Canonical F-chain, 108 
307 

308 
Index 
Cantalupi, G., 103 
Cardinality, 1 
Cartesian product of graphs, 47 
Cederbaum, I., 25, 49 
Chain, 7 
Chain of a partial order, 133 
Chapter dependencies, 17 
Cherkasky, B. V., 25, 48 
Cheung, L. K., 103, 258, 267 
X-perfect, 17, 52 
Chordal bipartite graph, 261, 266, 273 
Chordal graph, 81 
Chordless cycle, 8, 9 
Chordless path graph, 9 
Chords of a circle, 12, 18, 192,237 
Christofides, N., 48 
Chromatic number, 7, 51 
Chvatal, V., 47, 48, 63, 65, 72, 73, 74, 78, 
219, 222, 223, 224, 227, 231, 234 
Circle graph, 12, 18, 237 
Circular Ts property, 180, 190 
Circular-arc graph, 9,12, 18, 188 
Clique, 6 
Clique cover, 6 
Clique cover number, 6, 52 
Clique cover problem, 98,193. 270 
Clique matrix, 62, 174, 190, 193 
Clique number, 6, 51 
Clique number of a weighted graph, 206 
Clique problem, 27, 98, 133, 193, 247, 
269 
Cocomparability graph, 149 
Cohen, J. E., 183, 198 
Color class, 106 
Coloring, 7 
Coloring problem, 23, 29, 98, 132, 166, 193, 
269 
Column intersection property, 196 
Column-major ordering, 31 
Commoner, F. G., 78 
Comparability graph, 15, 105, 149, 158, 174, 
187, 208, 211, 212, 214, 227, 273, 
275 
Comparability graph of a rooted tree, 142, 
233 
Comparability graph recognition, 120, 129 
Complement of an undirected graph, 4 
Complete bipartite graph, 9 
Complete graph, 5, 9 
Complete set, 6 
Complexity of algorithms, 22 
Composition of graphs, 109, 214 
Computability, 22 
Computational complexity, 22 
Connected graph, 8 
Consecutive Ts property, 174, 180, 193, 216 
Consecutive I's testing, 175 
Consecutive arrangment problem, 175 
Consecutive retrieval property, 184 
Consistent permutation of a Pg-tree, 177 
Constructing a circle with chords from a 
permutation, 238 
Constructing a permutation from a circle 
with chords, 239 
Cook, S. A., 28, 30, 48 
Coombs, C. H., 233, 234 
Cori, R., 143 
Cotriangulated graph, 149 
Cover, 2 
Crowns, 137 
Curtz, T. B., 169 
Cycle, 8 
Cyclic staffing problem, 184 
Danzer, L., 12, 20 
Data structure, 31 
DeBruijn, N. G., 169 
DeWerra, D., 78, 143 
Dean, R. A., 186, 198 
Debreu, G., 194, 198 
Debrunner, H., 199 
Decision problem, 23 
Decomposable graph, 111 
Decomposition algorithm, 120, 129 
Decomposition of a graph, 111 
Decomposition scheme, 120 
Degree, 7 
Degree partition, 224 
Deo, N., 26, 37, 50 
Dependencies of chapters, 17 
Depth-first search, 37, 41, 44 
Derived graph of a matrix, 62 
Descartes, B., 80 
Deterministic algorithm, 26 
Digraph, 3 
Dilworth, R. P., 133, 143 
Dimension of a partial order, 135, 159 
Dinic, E. A., 25, 48 
Dirac, G. A., 82, 83, 103, 264 
Directed graph, 3 
Ducamp, A., 137, 146 
Dushnik, B., 135, 136, 138, 142, 146 

Index 
309 
Eckcr, K., 234 
Edge cover, 19 
Edge separator, 262 
Edmonds, J., 25, 48, 63, 78 
EhrUch, G., 250 
Eilenberg, S., 228, 234 
Endpoint, 3 
Equivalence relation, 2 
Equivalent Pg-tree, 176 
Erdos, P., 21, 152, 156, 169, 223, 232, 234 
Erdos-Gallai inequality, 153, 232 
Eswaran, K. P., 198 
Euler, 34 
Even, S., 25, 49, 120, 143, 145, 158, 164, 169, 
170, 236, 237, 253 
Fabri, J., 205, 218 
FiUppov, N. D., 113, 143, 145 
Fishburn, P. C, 138, 146, 169, 186, 198 
Foldes, S., 151, 156,212,218 
Ford, L. R., 25, 49 
Fournier, J. C, 248, 253 
Frank, A., 100, 103 
Frond, 38 
Frontier of a Pg-tree, 176 
Fujisawa, T., 103, 258, 267 
Fulkerson, D. R., 25, 49, 52, 54, 57, 66, 78, 
82, 83, 98, 103, 133, 143, 174, 193, 199 
Function, 1 
r-chain, 105, 106 
(/-decomposition, 120 
Galil, Z., 25, 49 
Gallai, T., 97, 102, 103, 144, 152, 156, 193, 
232, 234 
Garey, M. R., 26, 49, 245, 253 
Gaussian elimination, 254 
Gavril, F., 11, 21, 92, 94, 99, 101, 102, 103, 
190, 193, 199, 244, 245, 246, 247, 253 
George, J. A., 258, 266 
Ghosh, S. P., 184, 199 
Ghouila-Houri, A., 15, 21, 122, 144, 199 
Gill, M. K., 161, 170 
Gilmore, P. C, 16, 21, 122, 144, 172, 199 
Ginsburg, S., 146 
Goldstein, A. J., 25, 49 
Golumbic, M. C , 113, 114, 116, 119, 121, 
125, 140, 141, 144, 210, 218, 228, 233, 
234, 256, 258, 259, 260, 262, 263, 265, 
266, 267 
Goodman, A., 21 
Goodman, S. E., 37, 49 
Goss, C. F., 258, 259, 260, 262, 263, 265, 267 
Gotlieb, C. C, 37, 49 
Gotlieb, L. R., 37, 49 
Graham, R., 73,74,78 
Graph, 3 
Graph G{Af) of a matrix M, 256 
Graph parfait, 51 
Graphic sequence, 152 
Green, C. D., 144 
Green, M. W., 184, 202 
Greene, C, 133, 144 
GreenweU, D., 76, 78 
Griggs, J. R., 133, 144, 197, 199 
Grinstead, C. M., 75, 78 
Gross, O. A., 82, 83, 98, 103, 174, 193, 199 
Grunbaum, B., 12, 20 
Gupta, U., 184, 199 
Guttman scale, 232 
Gysin, R., 139, 146 
H 
Hadwiger, H., 199 
Hajnal, A., 52, 79, 81, 95, 103 
Hajos, G., 14, 21, 171, 199 
Hakimi, S. L., 152, 155, 156, 184, 200 
Hamacher, H., 49 
Hamiltonian circuit, 196, 231 
Hamiltonian circuit problem, 26, 30, 48, 155, 
270 
Hamiltonian path problem, 270 
Hammer, P. L., 150, 151, 154, 155, 156, 212, 
218, 219, 222, 223, 224, 227, 231, 232, 234 
Hanlon, P., 156 
Harary, F., 100, 103, 153, 156, 197, 201 
Harris, K. G., 143 
Harzheim, E., 146 
Haskins, L., 258, 267 
Havel, v., 152, 156 
Hedetniemi, S. T., 37, 49 
Height function, 46, 102, 132, 168, 206 
Helly circular-arc graph, 190 
Helly property, 92, 101, 182, 205 
Henderson, P. B., 224, 229, 234 
Hereditary property, 14 
Hiraguchi, T., 136, 137, 146 

310 
Index 
Hodson, F. R., 184, 199 
Hoffman, A. J., 16, 21, 77, 87, 122, 133, 144, 
172, 199, 203, 208, 215, 217, 218, 264 
Hopcroft, J. E., 25, 26, 37, 48, 49 
Horowitz, E., 37, 49 
Hu, T. C, 252, 253 
Huang, H. C , 61, 73, 78, 79 
Hubert, L., 189, 199 
Hues of a coloring, 203 
I 
Ibaraki, T., 155, 156, 232, 234 
Image, 1 
Implication class, 106 
In-degree, 7 
Incidence matrix, 196 
Indecomposable graph, 111 
Independent set, 6 
Indifference, 185 
Indifference graph, 187, 195 
Induced subgraph, 6 
Infinite perfect graph, 52 
Injective function, 1 
Inner factor of a graph composition, 110 
Instance of a problem, 23 
Intersection graph, 9 
Interval chromatic number, 203 
Interval coloring, 203 
Interval count of a graph, 197 
Interval graph, 9, 12, 13, 18, 19, 142, 149, 
187,212 
Interval graph recognition, 175 
Interval number of a graph, 197 
Interval order, 186 
Interval representation, 13 
Inversion graph, 157 
Irreflexive relation, 2 
Isolated vertex, 7 
Isomorphic graphs, 4 
Isomorphic matroids, 128 
Isomorphic simplices, 114 
Itai, A., 169, 236, 237, 253 
/-triangulated, f02 
Jamison, D. T., 186, 199 
Jean, M., 199 
Johnson, C. S., 144 
Johnson, D. S., 26, 49,245, 253 
Johnson, E., 203, 215 
Johnson, R. H., 155 
Jolivet, J. L., 79 
Jung, H. A., 144 
Karp, R. M., 25, 29, 48,49 
Karpetjan, I. A., 79 
Karzanov, A. V., 25, 49 
Katchalski, M., 197 
KeUer, G., 186, 198 
Kelly, D., 138, 146 
KeUy, J. B., 76, 79 
Kelly, L. M., 76, 79 
KendaU, D. G., 184, 199, 200 
Kimble, R., 146 
Klee, v., 199, 200 
Kleitman, D. J., 133, 144, 258, 267 
Knuth, D. E., 37, 49, 236, 253 
Kolata, G. B., 183, 200 
Komlos, J., 183, 198 
Komm, H., 137, 147 
Kotzig, A., 200 
Kou, L. T., 181, 184, 200 
Koutas, P. J., 252, 253 
Krantz, D. H., 185, 200 
Kruskal, J. B., 217, 218 
k-tree, 100 
Kumar, M. P., 50 
Kuratowski, C , 25, 49 
Kurepa, G., 137, 147 
Laderman, J. D., 25, 49 
Lau, L., 186, 199 
Leclerc, B., 137, 147 
Leibowitz, R., 197, 200, 232, 233, 234 
Lekkerkerker, C. G., 82, 103, 174, 200 
Lempel, A., 25, 49, 120, 143, 145, 158, 164, 
170 
Lueker, G. S., 25, 48, 84, 103, 104, 175, 176, 
177, 178, 198, 200, 258, 267 
Lewis, T. G., 37, 49 
Lexicographic breadth-first search, 84 
Line graph, 101 
Linear extension, 135, 248 
Linked list, 31 
Lipski, W., 200 
List, 31 
Liu, M. T., 229, 234 
Lovasz condition for p-critical graph, 72 
Lovasz, L., 17, 52, 54, 56, 65, 72, 79 
Luce, R. D., 185, 189, 194, 200 

Index 
311 
M 
Maheshwari, S. N., 50 
Malhotra, V. M., 50 
MaUtz, J., 52, 77 
Mapping, 1 
Marczewski, E., 9, 21 
Marley, A. A. J., 187 
Matching diagram, 162 
Matrix, 31 
Matroid, 127 
Maximal clique, 6 
Maximum cardinality search, 87, 102 
Maximum clique, 6 
Maximum weighted clique of a comparability 
graph, 133, 164 
McMorris, F. R., 144 
Melnikov, L. S., 76, 79 
Markosjan, S. E., 79 
Meyniel, H., 97, 103 
MiUer, E. W., 135, 136, 138, 142, 146 
MiUer, G. L., 245, 253 
Minimal vertex separator, 82, 101 
Minimally imperfect graph, 58 
Mirkin, B. G., 200 
Monma, C. L., 66, 79 
Monotone transitive graph, 81 
Moore, J. I., 113, 137, 138, 139, 145, 147, 
148, 189, 201 
Mueller, T., 183, 198 
Multiplex, 114 
Multiplication of vertices, 53, 75 
Multipliers, 31 
N 
NP, the class, 27, 28 
NP-complete, 26, 28, 138, 181, 204, 269 
NP-hard, 28 
Naamad, A., 25, 49 
Nakano, T., 175, 184, 196, 200 
Nash-Williams, C. S. J. A., 52, 79 
Neighborhood, 3 
Network How, 24, 25, 42, 134 
Nievergelt, J., 26, 37, 50 
Nondeterministic algorithm, 26 
Nondeterministic polynomial-time algorithm, 
27 
Normal product of graphs, 77 
Not so perfect graph, 235 
Novak, v., 147 
Novotny, M., 147 
Odd antihole, 71 
Odd hole, 71 
Ogden, W.F., 12,21 
Ohtsuki, T., 103, 258, 267 
Olani, E., 79, 97, 104 
One-to-one function, 1 
Onto function, 1 
Optimization problem, 23 
Ordinal utility function, 194 
Ore, O., 138, 147 
Orientation, 4 
Oriented graph, 4 
OrUn, J. B., 198, 200, 226, 234 
Out-degree, 7 
Outer factor of a graph composition, 110 
Overlap graph, 19, 242, 248 
P, the class, 26, 28 
Padberg conditions for p-critical graph, 72 
Padberg, M. W., 61, 65, 72, 79 
Palmer, E. M., 100, 103 
Pan, v., 26, 50 
Papadimitriou, C. H., 245, 253 
Parity in a bipartite graph, 8 
Parter, S. V., 25, 48, 267 
Parthasarathy, K. R., 75, 80 
Partial subgraph, 5 
Partially orderable graph, 105 
Partition, 2 
Partitionable graph, 58, 76 
Partitive set of vertices, 112 
Path, 7 
Path graph, 9, 94, 102 
Paths in a tree, 11, 18, 94, 101 
J»atrinos, A. N., 184, 200 
p-critical graph, 58, 71, 76 
Peled, U., 234 
Perfect elimination bipartite graph, 259, 266, 
273 
Perfect elimination graph, 81 
Perfect elimination matrices, 254 
Perfect elimination scheme, 254, 257 
Perfect graph, 51, 52, 62, 94, 133, 207 
Perfect graph theorem, 52, 56 
Perfect matrix, 65 
Perfect vertex elimination scheme, 82, 88 
Perfect, H., 147 
Perl, Y., 267 
Perlcs, M. A., 52, 80, 133, 144 

312 
Index 
Permutation, 1, 157, 164, 235 
Permutation graph, 11, 149, 157, 227 
Permutation labeling, 160 
Perold, A. F., 73, 74, 78 
Petrie, F., 183 
Planar graph, 24, 176 
Plantarity testing, 24, 25, 41 
Pnueli, A., 120, 143, 145, 158, 164, 170 
Poljak, S., 29, 50, 223, 234 
Polyhedron of a matrix, 62 
Polynomially transformable, 27 
Posa, L., 21 
Power set, 2 
Pg-tree, 176 
Preference, 185 
Preorder, 194 
Pretzel, O., 80, 133, 145, 147 
Prins, G., 140, 143 
Problem, 23 
Proper circular-arc graph, 10, 12, 188, 191, 
192 
Proper coloring, 7 
Proper decomposition of a graph, 111 
Proper interval graph, 9, 12, 187 
Propp, J., 200 
Protocols, 229 
Queue, 32 
Queues in paraUel, 164 
Rabinovitch, I., 138, 146, 147, 186, 201 
RAM, 30 
Random access machine, 30 
Rashi, 250, 251 
RatHff, H. D., 198 
Ravindra, G., 75, 80 
Read, R. C, 242, 253 
Realizer of a partial order, 135 
Reckhow, R. A., 30, 48 
Recursive procedure, 39 
Reflexive relation, 2 
Reid, J. K., 258, 267 
Reingold, E. M., 26, 37, 50, 250 
Reinhardt, W., 52, 77 
Renz, P. L., 11, 21, 94, 101, 104, 201 
Reversal of a set of edges, 4 
Rigid-circuit graph, 81 
Riordan, J., 242, 253 
Rival, I., 146 
Roberts, F. S., 9, 10, 12, 21, 138, 146, 169, 
182, 184, 186, 187, 195, 201 
Rose, D. J., 84, 100, 104, 256, 258, 267 
Row intersection property, 195 
Row-major ordering, 31 
Ryser, H. J., 153, 156, 180, 194, 201 
S 
Sachs, H., 76, 80, 97, 104 
Sahni, S., 37, 49 
Sakarovich, M., 87, 264 
Sankoff, D., 145 
Satisfiability problem, 28 
Schachtel, G. A., 26 
Scheduling 13 
Schmeichel, E. F., 155, 156 
Schwartz, D. E., 133, 144 
Scott, D. S., 186, 201 
Searching, 37 
Sedmak, V., 137, 147 
Seinsche, D., 145 
Self-complementary, 19 
Sellers, P. H., 145 
Semaphore, 230 
Semiorder, 186, 187 
Semiorder utility function, 185 
Separation into pieces, 94 
Separator, 82 
Separable edges, 260, 262 
Seriation, 183 
Sharp, H., 141, 145 
Shevrin, L. N., 113, 145 
Shifted intervals problem, 164 
Shipbuilding problem, 203, 204 
Shirey, R. W., 25, 50 
Shuffle product, 228 
Simeone, B., 150, 154, 155, 156, 232, 234 
Simpicial vertex, 81 
Simple chain, 8 
Simple cycle, 8 
Simple path, 8 
Simplex, 114 
Simplicial vertex, 256 
Sink, 7 
Smith, M. Z., 37, 49 
Solution, 23 
Sorted adjacency list, 36 
Sorting, 36, 164, 235 
Source, 7 
Spanned subgraph, 5 
Spanning forest, 38 
Sparse graph, 34 

Index 
313 
SpUt graph, 149, 212, 214, 266 
Splittance of a graph, 154 
Stability number, 6, 52 
Stable set, 6 
Stable set problem, 29, 30, 48, 98, 193, 245, 
269 
Stack, 32, 250 
Stack sorting graph, 236 
Stacks in parallel, 235 
Stahl, F. W., 188, 201 
Stanley, R. P., 139, 145 
Star graph, 9 
Star n-gon, 19 
Stockmeyer, L., 204 
Stoffers, K. E., 10, 21, 188, 201 
Storage optimization, 205 
Strassen, V., 25, 50 
Strict partial order, 2 
Strong perfect graph conjecture, 71 
Strongly connected graph, 8 
Subgraph, 5 
Subtrees of a tree, 91 
Sumner, D. P., 113, 139, 145, 148 
Superperfect graph, 203, 206 
Superperfect noncomparability graph, 209 
Superperfect orientation, 2io 
Suppes, P., 185, 186, 200, ioi 
Suranyi, J., 52, 79, 81, 95, ^03 
Suranyi, L., 97, 104 
I 
Suijective function, 1 
' 
Switchings, 95 
Sykora, O., 26 
Symmetric closure of a set of edges, 4 
Symmetric relation, 2 
Synchronizing parallel processes, 229 
Szekeres, G., 169 
Szpilrajn, E., 135, 147 
Transitive indifference, 194 
Transitive orientation, 15, 105, 113 
Transitive relation, 2 
Transitive tournaments, 42, 140 
Transitively orientable graph, 105 
Tree edge, 38 
Triangle graph, 9 
Triangle lemma, 108 
Triangle-free graph, 29, 30, 222, 223 
Triangulated graph, 12, 14, 81, 149, 151, 174, 
214, 227, 256, 264, 265, 275 
Triangulated graph recognition, 84, 87 
Trivally perfect graph, 233 
TRO algorithm, 124 
TRO theorem, 122 
Trotter, L. E., 61, 66, 78, 79, 80 
Trotter, W. T., 52, 80, 104, 113, 133, 136, 
137, 138, 139, 145, 146, 147, 148, 189, 
197, 201 
Tucker, A. C, 9, 74, 75, 80, 175, 180, 189, 
190, 191, 196, 197,201 
Turing machine, 30 
Tutte, W., 76, 80 
Tverberg, H., 133, 145 
Tversky, A., 185, 200 
U 
Ulhnan, J. D., 26, 37, 48 
Undirected graph, 4 
Unimodular graph, 76 
Unimodular matrix, 197 
Uniquely intersectable graph, 19 
Uniquely partially orderable graph, 112 
Uniquely representable permutation graph, 
169 
Unit circular-arc graph, 196 
Unit interval graph, 9, 12, 187 
Upper triangular matrix, 47 
Tamir, A., 80 
Tarjan, R. E., 25, 49, 50, 84, 87, 102, 104, 
236, 253, 258, 267 
Tautu, P., 184, 199 
Teng, A. Y., 229, 234 
Threshold assignment, 221 
Threshold dimension, 219, 220 
Threshold graph, 197, 219, 220, 221, 266 
Threshold hypergraph, 229 
Tomescu, I., 80 
Topological sorting, 43, 44, 102, 135, 271 
Touchard, J., 242, 253 
Traffic flow, 10 
Vacuously transitive relation, 141 
Van Lamsweede, A., 229, 234 
Vantilborgh, H., 229, 234 
Vector, 31 
Vertex separator, 82 
Vising, V. G., 76, 79 
W 
Wagon, S., 52, 80, 104 
Waksman, A., 184, 202 

314 
Index 
Walter, J. R., 11,21,92, 104 
Wang, C. C, 19, 20, 169 
Wang, D., 21 
Weak order, 194 
Wegner, G., 12, 21, 195, 202 
Wdde, B., 24, 50 
Weight of a subset of vertices, 203 
Weighted graph, 203 
West, D. B., 197, 199 
Whitesides, S. H., 73, 74, 78 
Wille, R., 148 
Wuth, N., 37, 50 
Wolk, E. S., 142, 145 
Zaks, S., 234 
Zalcstein, Y., 224, 229, 234 
Zelinka, B., 253 
Zinnes, J., 186, 201 
Zucchetti, B. R., 103 
Zykov, A. A., 76, 80 

