When is an abstract data type a functor?
Pablo Nogueira
School of Computer Science and Information Technology
University of Nottingham, UK
pni@cs.nott.ac.uk
Abstract
A parametric algebraic data type is a functor when we can apply a function to its data
components while satisfying certain equations. We investigate whether parametric
abstract data types can be functors. We provide a general deﬁnition for their map op-
eration that needs only satisfy one equation. The deﬁnability of this map depends on
properties of interfaces and is a sufﬁcient condition for functoriality. Instances of the
deﬁnition for particular abstract types can then be constructed using their axiomatic
semantics. The deﬁnition and the equation can be adapted to determine, necessarily
and sufﬁciently, whether an ADT is a functor for a given implementation.
1
INTRODUCTION
The application of a function to the data components of a data type has been
recognised as a fundamental operation at least since the maplist function of LISP
[McC78]. A data type that supports the operation while satisfying certain equa-
tions is said to be ‘mappable’ and its formal characterisation is provided by the
category-theoretic concept of functor. The functor concept is also important be-
cause it is preliminary to the concept of natural transformation [BW90] which pro-
vides a formal characterisation of parametrically polymorphic functions between
mappable data types and is central to the notion of parametricity [Wad89].
In functional languages, mappable algebraic data types are recognised as func-
tors. Such types are free algebras: there are no equations among their value con-
structors and therefore construction and observation (pattern matching) are inverse
operations. In contrast, abstract data types (ADTs) may not be free algebras and
therefore construction and observation may not be inverses. ADTs are deﬁned in
terms of ordinary functions and equations, in particular among constructors, that
specify the axiomatic semantics of the type [Mit96, Mar98].
We investigate the functoriality of unary parametric ADTs such as queues,
stacks, ordered sets, sets, bags, etc. More precisely, we provide a general deﬁni-
tion for their map operation that needs only satisfy one equation. The deﬁnability
of this operation depends on properties of interfaces and is a sufﬁcient condition
for functoriality. Instances of the deﬁnition for particular abstract types can then be
constructed using their axiomatic semantics. The deﬁnition and the equation can
be adapted to determine, necessarily and sufﬁciently, whether an ADT is a functor
for a given implementation.

2
CATEGORIES AND FUNCTORS
A category C is an algebraic structure consisting of a collection Obj(C) of objects
(entities with structure) and a collection Arr(C) of arrows (structure-preserving
maps between objects) such that there is a binary arrow-composition operator, writ-
ten ◦, that is closed (yields an arrow in Arr(C)), is associative, and has unique left
and right neutral element (the identity arrow) for every object. Every arrow has
only one source and one target object. We write f :: a →b to denote the arrow
f with source a and target b, and write ida :: a →a to denote the unique identity
arrow for a.
A functor F :: C →D maps all objects and arrows in category C respectively to
objects and arrows in category D while preserving the categorical structure.1 More
precisely, F consists of a pair of total maps F :: Obj(C) →Obj(D) (the object-level
map) and F :: Arr(C) →Arr(D) (the arrow-level map) such that source, target,
composition, and identities are preserved. Given an arrow f :: a →b we have
F f :: Fa →Fb and F distributes over composition and preserves identities:
F(g◦f)
=
Fg ◦F f
Fida
=
idFa
We refer to the equations as functorial laws. Notice that the symbol F is heavily
overloaded. A functor F :: C →C is called an endofunctor.
3
CATEGORIES AND TYPES
A connection between functional programming (e.g., Haskell) and category theory
is the category Type where, broadly, objects are monomorphic types and arrows are
functional programs involving those types. Arrow composition is function compo-
sition (which is closed and associative) and identity arrows are instances of the
polymorphic identity function for monomorphic types [BW90]. A polymorphic
function f :: a →b is a collection of arrows of Arr(Type), but we informally refer
to f as ‘an’ arrow.
A unary parametrically polymorphic algebraic data type F is an endofunc-
tor F :: Type →Type when at the object level F maps monomorphic types to
monomorphic types and at the arrow level mapF satisﬁes the functorial laws. The
categorical convention is to write F for mapF. For example, the list type is a typical
functor. At the object level, the type constructor [] maps monomorphic types (e.g.,
Bool) to monomorphic types (e.g., [Bool]). At the arrow level, the list function
map satisﬁes the functorial laws. The categorical convention is to write List for
map.
There are two important points. First, map respects the structure or shape of the
list, mapping only the data or payload—from now on we refer to the type-argument
1We use a double colon when writing the source and target categories because functors are also
arrows in functor categories [BW90].

of a data type as its payload. Second, map’s deﬁnition follows the structure of the
list type and the proof that it satisﬁes the functorial laws proceeds by structural
induction on lists [Mit96].
In this paper we are only concerned with unary ﬁrst-order data types. Map-
pable algebraic data types of arbitrary arity and order can be recognised as func-
tors with the help of other categorical devices such as product and functor cate-
gories [BW90].
We conclude the section with a non-functor example: Fix a = (a →a) →a is
the type of the ﬁxed-point combinator ﬁx f = f (ﬁx f). It is not possible to write a
map function for Fix that satisﬁes the functorial laws. Unfortunately, proving this
formally is beyond the scope of this paper [BW90].
3.1
Subcategories and type classes
In Haskell, algebraic data types can be constrained in their type-argument range by
type-class membership. For example:
data Ord a ⇒Tree a = Empty | Node a (Tree a) (Tree a)
This is the type of binary trees whose nodes contain values of types in class Ord.
Constrained data types are often used in the implementation of ADTs. For exam-
ple, Tree can be used in the implementation of binary search trees, ordered bags,
ordered sets, priority queues, etc [Oka98].
A subcategory S of a category C is such that Obj(S) ⊆Obj(C), Arr(S) contains
all the arrows in Arr(C) involving only S-objects, and composition and identities
in Arr(S) are those in Arr(C) involving only S-objects [BW90].
Mappable constrained data types are functors F :: S →Type, where S is a
subcategory of Type. For example, in Ord objects are types in Ord and arrows are
functions on those objects. An overloaded function f :: (Ord a,Ord b) ⇒a →b is
a collection of arrows of Arr(Ord), but we informally refer to f as ‘an’ arrow.
3.2
Algebras, Coalgebras, and Bialgebras
Free algebras are neatly characterised as the least ﬁxed point of the functor ex-
pression determined by their constructors [MFP91]. To illustrate this, we need to
introduce ▽, the case eliminator for sums, and △, the lifted pair constructor (we
occasionally deviate from Haskell notation and write a×b for the product type and
1 for the unit type):
▽:: (a →c) →(b →c) →a + b →c
( f ▽g) ( Inl x) = f x
( f ▽g) ( Inr y) = g x
△:: (c →a) →(c →b) →c →a × b
( f △g) x = ( f x , g x)
Take the list type, for example. Let us write the type signatures of list constructors
slightly differently as [ ] :: 1 →[a] and (:) :: a×[a] →[a]. The ‘nil’ constructor is

lifted to a function from the unit type and the ‘cons’ constructor is uncurried. The
list type [a] is characterised as the least ﬁxed point of the functor Fx = 1 + a × x
determined by the list constructors: ([ ]▽(:)) :: F[a] →[a].
In a category C, the pair consisting of an object X and an arrow α :: FX →X is
called an F-algebra. The pair consisting of an object Y and an arrow β :: Y →FY
is called an F-coalgebra. In Type, the pair consisting of the algebraic data type Pa
and the arrow α :: F(Pa) →Pa is an F-algebra. Because Pa is free, observation can
be characterised either by the inverse F-coalgebra α−1 :: Pa →F(Pa) which for-
malises pattern matching or, alternatively, by the G-coalgebra β :: Pa →G(Pa),
where α−1 = cond ◦β
and
β−1 = α ◦cond.
Function cond :: Gx →Fx for-
malises discriminated (guarded) selection [MFP91]. The pair (α,β) is called an
FG-bialgebra. For example, in the case of lists we have:
Gx
=
Bool×a×x
β
=
(null △head △tail)
cond
::
(Bool×a×x) →(1+a×x)
cond(p,t,e)
=
if p then Inl () else Inr (t,e)
The following equation follows from cond’s deﬁnition:
((f ▽g) ◦cond ◦(h △i △j)) x = if h x then f() else g(i x, j x)
4
ABSTRACT DATA TYPES
ADTs are typically speciﬁed in terms of function interfaces. In Haskell, the type-
class system is employed for this purpose. For example, below type class OrdSet
speciﬁes the interface of ordered sets and type class Queue the interface of FIFO
queues:2
class OrdSet s where
class Queue q where
emptyS
:: Ord a ⇒s a
emptyQ
:: q a
insert
:: Ord a ⇒a →s a →s a
enq
:: a →q a →q a
isEmptyS : : Ord a ⇒s a →Bool
isEmptyQ : : q a →Bool
min
:: Ord a ⇒s a →a
front
:: q a →a
remove
:: Ord a ⇒a →s a →s a
deq
:: q a →q a
member
:: Ord a ⇒a →s a →Bool
The nullary constructors emptyS and emptyQ return respectively an empty ordered
set and an empty queue. Constructor insert inserts an element into a given ordered
set whereas enq enqueues a value at the rear of a queue. Functions isEmptyS and
isEmptyQ discriminate respectively whether an ordered set or a queue is empty.
Function min returns the minimum element in an ordered set and front returns the
front element in a queue. Function deq dequeues the front element in a queue and
remove removes a speciﬁed element from an ordered set. Finally, member performs
a membership test.
2Strictly speaking, OrdSet and Queue are so-called constructor classes.

ADTs are not formally deﬁned by interfaces alone but also by a set of (condi-
tional) equations among their operators that specify the axiomatic semantics of the
type [Mit96, Mar98]. There may be equations among constructors, in which case
construction and observation are not inverses (e.g., queue values are inserted at the
rear of the queue but selected from the front). Equations are necessary to imple-
ment and reason about ADTs. The following is a sample of Queue’s and OrdSet’s
equations:
(isEmptyQ q) ⇒deq (enq x q) = q
¬ (isEmptyQ q) ⇒deq (enq x q) = enq x (deq q)
member x s ⇒insert x s = s
Programmers supply implementations by providing an implementation type and
deﬁnitions for the operators that satisfy the equations. For example, ordered sets
can be implemented using lists. Below, the standard functions sort and nub re-
spectively sort and remove duplicates from a list:
instance OrdSet [] where
emptyS
=
[]
min
= head
insert x
=
sort ◦nub ◦(x:)
...
An abstract type can be characterised by an FG-bialgebra (γ,ν) for some functors
F and G. In the case of queues, for example, we have γ = (emptyQ ▽enq) and
ν = (isEmptyQ △front △deq), where F and G are the same functors of the list
bialgebra of Section 3.2. For queues, however, the equations γ−1 = cond ◦ν and
ν−1 = γ◦cond do not hold.
4.1
Payload, clutter, representation invariant, and repair function
ADTs arise because programmers cannot express their imagined types as free al-
gebras. The values of an ADT Aa are represented (simulated) by a subset of the
values of an algebraic data type Ia. The subset is characterised formally by a rep-
resentation invariant [Hoa72], that is, a predicate rep :: Ia →Bool such that rep(i)
holds iff the value i of type Ia represents a value of Aa. Interface operators maintain
the equations of the ADT and maintain the representation invariant by implement-
ing a conceptual function φ :: Ia →Ia such that ∀i.rep(φ(i)). We call φ a repair
function because it re-establishes the representation invariant.
The type Ia contains payload data and may also contain clutter, i.e., extra
data used for efﬁciency or structuring purposes. Clutter data is either of a ﬁxed
monomorphic type or is parametric on the payload type (otherwise, Ia would have
to be parametric on the same types as the clutter). Examples of clutter are the
colour of nodes in Red-Black Trees (monomorphic), the height of a sub-tree in a
heap (monomorphic), the cached front list in a physicists’ implementation of FIFO
queues (payload-parametric), etc [Oka98]. Clutter is more the norm than the ex-
ception: data (space) will be used to improve operator speed (time).

5
ABSTRACT DATA TYPES AND FUNCTORS
In order to establish the connection between ADTs and functors we need to deﬁne
source and target categories and the object-level and arrow-level mappings that sat-
isfy the functorial laws. To identify the categories, we classify ADTs into sensitive
or insensitive depending on whether the internal arrangement of payload elements
is, respectively, dependent or independent of properties of the payload type. We
assume properties of the payload type are expressed via type-class constraints (e.g.,
the payload type has equality if it is an instance of Eq).
Examples of insensitive ADTs are FIFO queues, double-ended queues, arrays,
matrices, etc. The order of insertion is determined by the operators (e.g., enq en-
queues payload at the rear), and the ADTs can be characterised by the number and
logical position of payload elements in the abstract structure.
Examples of sensitive ADTs are sets, bags, ordered sets, ordered bags, binary
search trees, heaps, priority queues, hash tables, dictionaries, etc. In a set, payload
position is irrelevant and cannot be used in the characterisation of the type. Sets re-
quire payload types in Eq to deﬁne the membership operator. Ordered sets require
payload in Ord, etc.
We recognise mappable ADTs as functors F :: S →ADT. The source category
S is a subcategory of Type to account for constraints. There are ADTs for which
we cannot characterise S. We postpone this discussion until Section 6.2 and con-
centrate for the moment on ADTs where the characterisation is possible. We can-
not take Type as the target category for the reasons given in Section 4.1. Instead,
ADT is the category whose objects are monomorphic ADTs (e.g., Queue Char,
OrdSet Int) and arrows are functions on those ADTs. The category can be for-
malised in various ways which make use of representation invariants or equational
laws to pin down the type [BW90, Fok96].
The arrow-level part of the functor is the ADT’s map operation that satisﬁes
the functorial laws. To the programmer, the operation can be deﬁned internally for
the implementation type (map is part of the interface), or externally, in terms of
interface operators. In the internal approach, the operation must satisfy the func-
torial laws and preserve representation invariants. If this is the case, it can only
be claimed that A implemented as I is a functor. The external approach is inde-
pendent of implementations, but there are several obstacles. First, programmers
have to ﬁnd a deﬁnition that satisﬁes the functorial laws and the equations of the
ADT. Second, structural induction cannot be deployed in proofs. Take for example
OrdSet :: Ord →ADT.3 The following is a sensible deﬁnition for its map opera-
tion:
ordSet : : (Ord a, Ord b, OrdSet s) ⇒(a →b) →s a →s b
ordSet f s = if isEmptyS s then emptyS else
let (m,r) = (min s ,remove m s) in insert ( f m) (ordSet f r)
3Do not confuse OrdSet with a functor F :: Poset →Poset, where Poset is the category of
partially ordered sets [BW90].

Haskell functions must start with lowercase letters so we use ordSet instead of
OrdSet as the name for the map. Function ordSet must satisfy the functorial laws
and the equations of the ADT. For example, the following equation must hold:
member x s ⇒ordSet f (insert x s) = ordSet f s
Because of this equation, the map operation does not respect the shape of the or-
dered set. An expression such as ordSet (const 0) {1,2,3} must yield the value
{0}.
We should not be deceived into thinking that, for this reason, ordSet is
not a valid map operation. The functoriality condition is that ordSet satisﬁes the
functorial laws, and this may be the case regardless of whether it satisﬁes extra
equations. Unfortunately, we cannot deploy structural induction in proofs. For
example, given a non-empty ordered set insert x s, function ordSet is deﬁned in
terms of observers min and remove, with the recursive call involving m and r,
not x and s. To deploy induction we have to prove intermediate lemmas such as
¬(isEmptyS s)∧¬(member m r) ⇒insert m r = s.
6
FUNCTORIAL LAWS FOR ADTS
In this section we provide a general deﬁnition for the map operation of ADTs
whose interfaces satisfy certain properties made precise below.
The deﬁnition
needs only satisfy one equation that makes use of the notion of payload and re-
pair function. Instances of the deﬁnition for particular ADTs can be constructed
using their axiomatic semantics. The deﬁnability of the operation is a sufﬁcient
condition for functoriality (Section 6.2).
Let Aa be an abstract data type and Pa be an algebraic data type. Let us assume
that P is a functor and that it is possible to deﬁne an extraction function ε :: Aa →Pa
and an insertion function ι :: Pa →Aa such that ι◦ε = idAa. The intuition is that ε
ignores clutter and collects the payload in Pa maintaining the logical positioning,
whereas ι enforces the equations of the ADT for the given payload and sets up the
clutter. Because A satisﬁes equations, ε may not be surjective and ι may not be
injective. Consequently, ε ◦ι need not be the identity for Pa. (For example, we
may not get the same list when inserting the elements into an ordered set and then
extracting them back to a list.) Notice that ε ◦ι corresponds to φP :: Pa →Pa, the
behaviour of the repair function φ on the payload. (For example, the resulting list
will be ordered and without repetitions.)
Assuming the above premises, we can write a deﬁnition for the map operation,
namely, A f = ι◦P f ◦ε. It is easy to prove that it preserves identities:
A ida
=
{ def. of A }
ι ◦P ida ◦ε
=
{ P functor }
ι ◦idPa ◦ε
=
{ idPa ◦ε = ε }

ι ◦ε
=
{ ι◦ε = idAa }
idAa
We obtain a functorial law when attempting to prove that the map distributes over
composition:
A (g◦f) = Ag ◦A f
=
{ def. of A }
ι ◦P (g◦f) ◦ε = ι ◦Pg ◦ε ◦ι ◦P f ◦ε
=
{ P functor and ε◦ι = φP }
ι ◦Pg ◦P f ◦ε = ι ◦Pg ◦φP ◦P f ◦ε
We call the last equation a repair law. The key element is the presence of the
intermediate φP. Read from left to right, the law states that extracting payload,
then distributing P over the composition, and ﬁnally inserting back payload must
yield the same value as extracting payload, distributing P over the composition
with an intermediate repair, and ﬁnally inserting payload. Due to the presence of
φP, the equations A f ◦ι = ι◦P f and ε◦Ag = Pg◦ε do not hold (expand A f by its
deﬁnition).4
Let Aa be characterised by the FG-bialgebra (γ,ν) where γ :: F(Aa) →Aa and
ν :: Aa →G(Aa). Deﬁnitions for ι and ε can be constructed for a Pa characterised
by the FG-bialgebra (α,β), where α :: F(Pa) →Pa and β :: Pa →G(Pa), as indi-
cated by the following diagram:
F(Pa)
α
- Pa
β - G(Pa)
F(Aa)
Fι
?
Fε
6
γ
- Aa
ι
?
ε
6
ν
- G(Aa)
Gι
?
Gε
6
Because F and G are functors, we have:
ι ◦α
=
γ ◦Fι
β ◦ε
=
Gε ◦ν
From these equations we can obtain deﬁnitions for ι and ε using the fact that Pa is
a free algebra:
ι
=
γ ◦Fι ◦cond ◦β
ε
=
α ◦cond ◦Gε ◦ν
The deﬁnitions must also satisfy ι ◦ε = idAa. Unfortunately, this is not the case
when α−1 = cond ◦β and β−1 = α ◦cond because it leads to γ◦cond ◦ν = idAa
which does not hold in general (Section 4).
4In other words, ε and ι are not natural transformations.

Notice however that α does not occur in ι’s deﬁnition and β does not occur
in ε’s deﬁnition. Thus, for insensitive ADTs we can use for Pa an FG-bialgebra
(α,β′) for extraction and another (α′,β) for insertion where α and β′ are inverses
and so are α′ and β.
Formally, the pair (α′,β′) is to be obtained from (γ,ν) by an FG-bialgebra
homomorphism Σ(γ,ν) = (α′,β′). The intuition is that the operators in (α′,β′)
are those that make P behave like A or, in other words, P is viewed as an A. In
practice, the programmer is to ﬁnd (α′,β′) by searching for (or programming) Pa
operators that satisfy the same equations as those operators in (γ,ν). Then, α and
β are deﬁned as the inverses of β′ and α′, that is, α = cond ◦β′ and β = α′ ◦cond.
For example, let A be Queue. We have Fx = 1+a×x, Gx = Bool×a×x, and
(γ,ν) = (emptyQ ▽enq, isEmptyQ △front △deq). The obvious choice of P is the
list type. We have the following:
(α′,β′)
=
([ ] ▽snoc, null △head △tail)
(α,β)
=
([ ] ▽(:), null △last △init)
(α′,β′) views lists as queues. Function snoc :: a×[a] →[a] is the dual of ‘cons’. It
inserts an element at the rear of a list, e.g., snoc x xs = xs++[x].
Knowing β, we can obtain the deﬁnition of ι :: Queue q ⇒[a] →q a from the
equation ι = γ◦Fι◦cond ◦β:
ι x
=
{ def. of ι }
γ (Fι (cond (β x)))
=
{ def. of β }
γ (Fι (cond (null x, last x, init x)))
=
{ def. of cond }
γ (Fι (if null x then Inl () else Inr (last x, init x)))
=
{ F functor }
γ (if null x then Inl () else Inr (last x, ι (init x)))
=
{ def. of γ }
if null x then emptyQ () else enq (last x, ι (init x))
=
{ isomorphism emptyQ () ≃emptyQ and curry enq }
if null x then emptyQ else enq (last x) (ι (init x))
Knowing α, we can obtain the deﬁnition of ε :: Queue q ⇒q a →[a] from the
equation ε = α◦cond ◦Gε◦ν:
ε x
=
{ def. of ε }
α (cond (Gε (ν x)))
=
{ def. of ν }
α (cond (Gε (isEmptyQ x, front x, deq x)))
=
{ G functor }
α (cond (isEmptyQ x, front x, ε (deq x)))

=
{ def. of cond }
α (if isEmptyQ x then Inl () else Inr (front x, ε (deq x)))
=
{ def. of α }
if isEmptyQ x then [ ] () else (:) (front x, ε (deq x))
=
{ isomorphism [ ] () ≃[ ] and curry (:) }
if isEmptyQ x then [ ] else (front x) : ε (deq x)
Other list operators are to be used in the case of stacks. More precisely, (α′,β′) =
([ ]▽(:), null △head △tail) and (α,β) = ([ ]▽(:), null △head △tail):
ι
:: Stack s ⇒[a] →s a
ι x = if null x then emptyStack else push (head x) (ι ( tail x))
ε
:: Stack s ⇒s a →[a]
ε x = if isEmptyStack x then [] else (top x ) : ε (pop x)
For insensitive ADTs, we can use the same FG-bialgebra for Pa for insertion and
extraction because the observers in ν place payload in Pa at ﬁxed positions but the
constructors in γ place them according to the semantics of the type. For example,
payload from an ordered set is extracted into an ordered list, but an arbitrary list is
inserted into an ordered set. Thus, we can have:
(γ,ν)
=
(emptyS ▽insert, isEmptyS △min △(λs →remove (min s) s))
(α,β)
=
([ ] ▽(:), null △head △tail)
and the following deﬁnitions for ι and ε are obtained from their respective equa-
tions:
ι
:: (OrdSet s , Ord a) ⇒[a] →s a
ι x = if null x then emptyS else insert (head x) (ι ( tail x))
ε
:: (OrdSet s , Ord a) ⇒s a →[a]
ε x = if isEmptyS x then [] else (min x ) : ε (remove (min x) x)
Alternatively, we could have used the same (α,β) we used for queues and still
satisfy ι◦ε = idAa.
The reader can verify that the repair law is satisﬁed and FIFO queues, stacks,
and ordered sets are functors. In insensitive ADTs, φP does not reshufﬂe payload
(constructors place payload in ﬁxed positions). We conjecture that the repair law is
always satisﬁed and therefore insensitive ADTs are functors. Other characterisa-
tions of insensitive ADTs also recognise them as functors (Section 8). In sensitive
ADTs, φP may reshufﬂe payload, even remove some. The repair law need not hold.
We conjecture that the repair law is broken only in a particular case of payload re-
moval (Section 6.2).
6.1
Functorial laws for ADT implementations
The deﬁnition of A f can be adapted to deﬁne I f, the map operation for the imple-
mentation type, where now ε :: Ia →Pa and ι :: Pa →Ia. Let us deﬁne I f = φ◦σ f,

where φ = ι and σ f = P f ◦ε. The repair law is now written:
φ ◦σ (g◦f) = φ ◦σg ◦φ ◦σf
However, I f can be deﬁned directly without using interface operators; that is, we
need not be concerned with functors F and G, and we can deﬁne φ and σ directly
in terms of the implementation type, not in terms of ι and ε.
More precisely, we can deﬁne Pa as the type in Ia that holds the payload.
Function φ takes a value of Pa and creates a value of Ia by enforcing φP and creating
the clutter. Function σ :: (a →b) →Ia →Pb is a ‘selection’ function that ignores
clutter and maps over the payload.
Consider FIFO queues, for example. The so-called physicists’ representation
is a reasonably efﬁcient way of implementing queues [Oka98]:
data PhysicistQueue a = PQ [a] Int [a] Int [a]
The implementation type consists of three lists and two integers. The ﬁrst integer
is the length of the second list, which contains the front elements, and the second
integer is the length of the third list, which contains the rear elements in reverse
order. Elements are moved from the rear list to the front list when the length of the
former is less than the length of the latter. In a lazy language the move is computed
on demand so a preﬁx of the front list (10 elements, say) is cached for efﬁciency.
The ﬁrst list is such preﬁx.
The second and third lists make up the payload type. The cached front list and
the lengths are clutter. We have:
type P a = ([a] ,[a])
σ : : (a →b) →PhysicistQueue a →P b
σ f (PQ
fs
rs) = (map f fs , map f rs)
φ : : P a →PhysicistQueue a
φ ( fs , rs) = PQ ( init 10 fs ) ( length fs ) fs (length rs ) rs
queue : : (a →b) →PhysicistQueue a →PhysicistQueue a
queue f = φ ◦σ f
Notice that by fusing φ and σ we obtain the deﬁnition for queue that the program-
mer would have written. The repair law can be proved directly from the fact that
the list type is a functor:
φ (σg (φ (σ f (PQ cs lf fs lr rs))))
=
{ def. of σ }
φ (σg (φ (map f fs , map f rs)))
=
{ def. of φ where mf = map f fs and mr = map f rs }
φ (σg (PQ (init 10 mf) mf (length m f) mr (length mr)))
=
{ def. of σ }
φ (map g mf, map g mr)
=
{ def. of mf and mr, and list is functor }
φ (map (g◦f) fs, map (g◦f) rs)

=
{ def. of σ }
φ (σ (g◦f) (PQ cs lf fs lr rs))
Now consider ordered sets. Suppose they are implemented in terms of lists:
type SetList a = [a]
There is no clutter in this implementation and the payload type is Pa = [a]:
σ : : (Ord a, Ord b) ⇒(a →b) →SetList a →P b
σ = map
φ : : Ord a ⇒P a →SetList a
φ = sort ◦nub
set : : (Ord a, Ord b) ⇒(a →b) →SetList a →SetList b
set f = φ ◦σ f
Fusing φ and σ gives the deﬁnition the programmer would have written. The repair
law is:
sort ◦nub ◦map (g ◦f ) = sort ◦nub ◦map g ◦sort ◦nub ◦map f
which can be proved by induction on lists.
6.2
Non-functors
The deﬁnition of A f and its repair law are conditional on the deﬁnability of ι and ε
such that ι◦ε = idAa. The deﬁnability of A f that satisﬁes the repair law is therefore
a sufﬁcient condition for functoriality in our source and target categories.
There are examples of ADTs for which either ι or ε are not deﬁnable but
whose functoriality can be established internally for particular implementations
(Section 6.1). Examples are ordinary (unordered) sets and bags where member-
ship test, cardinality, and number of element occurrences in bags are the only
observers. The deﬁnability of ε is conditional upon the existence of operators
that enable the observation of everything that is constructed. In the case of sets,
γ = (emptyS ▽insert) where insert :: Set s ⇒a × s a →s a, but we cannot ﬁnd
ν = (isEmptyS △x △y) such that (x △y) :: Set s ⇒s a →a×s a. However, if sets
are implemented as lists then φ = nub, σ = map, and the repair law of Section 6.1
is satisﬁed.
In general, if an ADT is a functor for a given implementation type then it should
be a functor for alternative implementation types. Otherwise, the implementation
types would not implement the same ADT. More work is needed to formalise this
claim. For example, let k be a type of keys and v be a type of keyed values. Associ-
ation lists [(k,v)] and ﬁnite functions k →v can be used to implement dictionaries.
However, with ﬁnite functions we cannot deﬁne the empty dictionary, nor remove
a key-value pair from a dictionary, and remain total.
We have mentioned in Section 5 that it may not be possible to identify a map-
pable ADT with a functor F :: S →C where Obj(S) are monomorphic Haskell
types. For example, let OrdSetP be the type of ordered sets with positive numbers.

The equation x < 0 ⇒insert x s = s is part of its axiomatic semantics. Type class
Num contains types Int, Integer , Float, and Double, but we cannot deﬁne the
class of positive numbers as a subclass of Num. In particular, we cannot deﬁne the
type Nat of positive integers as a subtype of Int. At most we can deﬁne an alge-
braic data type for natural numbers, e.g., data Nat = Zero | Succ Nat, and provide
mappings in :: Int →Nat and out :: Nat →Int. This is the idea behind views for
ADTs [Wad87], a deprecated approach with serious drawbacks [PPN96]. (Notice
the similarity with Section 4.1, where instead of rep and types I and A we have
a property and type classes S and Num. We might deﬁne S as a subcategory of
ADT.)
Despite the limitation, we can use the repair law to disprove that OrdSetP is
a functor from Num to ADT. A counter-example is provided by g(x) = x2 and
f(x) = −x. Notice that g is not an arrow of Arr(S). The negative payload is re-
moved by φP in Pg ◦φP ◦P f whereas in Pg ◦P f, function g ‘corrects’ f and the
negative payload becomes positive. The resulting sets may have different cardinal-
ity. A particular way of determining whether the repair law is broken is to look
for counter-examples in which the two sides of the equation produce ADTs with
different sizes.
7
CONCLUSION
We have investigated the connection between ﬁrst-order parametric ADTs and
functors. At the object level, ADTs map objects in subcategories of the category
of types to objects in the category of monomorphic ADTs. At the arrow-level we
have presented a general deﬁnition for their map operation that needs only satisfy
a repair law which makes the connection between functorial laws and representa-
tion invariants explicit. The deﬁnability of such a map is a sufﬁcient condition for
functoriality. We have shown how instances of the operation for particular ADTs
can be constructed using the latter’s axiomatic semantics. We have shown that the
deﬁnition can be adapted to construct the map for an ADT with a particular imple-
mentation. Finally, we have discussed situations in which ADTs are not functors.
8
RELATED WORK
The C++ Standard Template Library [MS96] classiﬁes containers with iterators
into sequences and collections which are, respectively, insensitive and sensitive
ADTs. We prefer to use terminology that highlights the role of parametricity.
Functions ι and ε are structurally polymorphic (or polytypic [JJ96]) on the
structure of so-called F-views [Nog06] which are, roughly, a way of representing
the operators and the functors of FG-bialgebras. Polytypic functions on ADTs can
be programmed in terms of polytypic ι, polytypic ε, and polytypic functions on
algebraic data types. In particular, A f can be programmed polytypically where P f
is the polytypic map for algebraic data types.

Functors and F-algebras provide a variable-free characterisation of free alge-
bras. A variable-free characterisation of non-free algebras is presented in [Fok96]
where equations are expressed as pairs of transformers, i.e., mappings from dial-
gebras to dialgebras that satisfy certain properties. An FG-dialgebra is a mapping
ϕ :: Fx →Gx. However, homomorphisms in the category of such dialgebras cannot
map to dialgebras with less equations or would not be uniquely deﬁned.
Bialgebras are used in [Erw99] to deﬁne catamorphisms (folds) for ADTs as
‘metamorphisms’ where the F-algebra of the target ADT is composed with the
G-coalgebra of the source ADT. Functions ι and ε can be expressed as metamor-
phisms. There are notable differences with our approach. First, the notion of ADT
is artiﬁcial and not aimed at hiding representations. For example, a queue is an
FG-bialgebra (α,ν) where α is the list F-algebra and ν is the observer F-coalgebra
where dequeuing reverses the list, gets the tail, and returns the reverse of the tail.
Second, there is no discussion of maps or of the satisﬁability of functorial laws
apart from the mention of ‘invertible’ ADTs for which F = G and β ◦α = id.
Invertibility is a stronger requirement than our repair law. Finally, although meta-
morphisms are deﬁned as the least solutions of an equation, it is not shown how to
arrive at the solutions.
A container type is deﬁned in [HdM00] as a relator with membership. The
result is presented in the context of allegory theory. The discussion of Section 6.2
suggests f and g must preserve some sort of membership test in order for the repair
law to hold. More work is needed to understand a possible connection.
A container type is deﬁned in [AAG05] as a dependent pair type (s ∈S)×Ps
where S is a set of shapes and for every s ∈S, Ps is a set of positions. Containers
can characterise algebraic data types and insensitive ADTs. The semantics of a
container is a functor F :: C →C where C is the category giving meaning to shapes
(e.g., types) and where at the object level Fx = (s ∈S)×(Ps →x). In words, F
sends a type x to the dependent pair type where the ﬁrst component s is a type
and the second component is a function ‘labelling’ the positions over s with values
in x. The authors have extended the container deﬁnition with quotient containers
(containers with an equivalence relation on positions) which capture a few sensitive
ADTs such as bags [AAGM04]. This work is related to Joyal’s combinatorial
species [Joy86] where types are described combinatorially in terms of the power
series of the arrangements of payload and shapes in an implementation type.
Acknowledgements
The author is grateful to Roland Backhouse, Jeremy Gibbons, Henrik Nilsson,
Conor McBride, and the anonymous reviewers for their invaluable feedback and
bibliographic pointers.
This work has been partially funded by EPSRC grant
GR/S27078/01.

REFERENCES
[AAG05]
Michael Abott, Thorsten Altenkirch, and Neil Ghani. Containers - construct-
ing strictly positive types. Theoretical Computer Science, 342:3–27, Septem-
ber 2005.
[AAGM04] Michael Abott, Thorsten Altenkirch, Neil Ghani, and Conor McBride. Con-
structing polymorphic programs with quotient types. In International Con-
ference on Mathematics of Program Construction (MPC’04), 2004.
[BW90]
Michael Barr and Charles Wells. Category Theory for Computing Science.
Prentice-Hall, 1990.
[Erw99]
Martin Erwig.
Categorical programming with abstract data types.
In In-
ternational Conference on Algebraic Methodology and Software Technology
(AMAST’98), pages 406–421. Springer-Verlag, 1999.
[Fok96]
Maarten M. Fokkinga.
Datatype laws without signatures.
Mathematical
Structures in Computer Science, 6:1–32, 1996.
[HdM00]
Paul F. Hoogendijk and Oege de Moor. Container types categorically. Journal
of Functional Programming, 10(2):191–225, 2000.
[Hoa72]
C. A. R. Hoare. Proofs of correctness of data representations. Acta Informat-
ica, 1:271–281, 1972.
[JJ96]
Johan Jeuring and Patrik Jansson.
Polytypic programming.
In Advanced
Functional Programming, number 1129 in LNCS, pages 68–114. Springer-
Verlag, 1996.
[Joy86]
Andr´e Joyal. Foncteurs analytiques et esp`eces de structures. In G. Labelle and
P. Leroux, editors, Combinatoire ´enum´erative: Proc. of “Colloque de Combi-
natoire ´Enum´erative”, Univ. du Qu´ebec `a Montr´eal, 28 May–1 June 1985,
volume 1234 of Lecture Notes in Mathematics, pages 126–159. Springer-
Verlag, Berlin, 1986.
[Mar98]
Ricardo Pe˜na Mar´ı.
Dise˜no de Programas, Formalismo y Abstracci´on.
Prentice-Hall, 1998.
[McC78]
John McCarthy. History of LISP. SIGPLAN Notices, 13(8), August 1978.
[MFP91]
Erik Meijer, Maarten Fokkinga, and Ross Paterson.
Functional program-
ming with bananas, lenses, envelopes and barbed wire. In Functional Pro-
gramming Languages and Computer Architecture (FPCA’91), volume 523 of
LNCS. Springer-Verlag, 1991.
[Mit96]
John C. Mitchell. Foundations for Programming Languages. MIT Press,
1996.
[MS96]
David R. Musser and Atul Saini. STL Tutorial and Reference Guide. Addison-
Wesley, Reading, Mass., 1996.
[Nog06]
Pablo Nogueira. Polytypic Functional Programming and Data Abstraction.
PhD thesis, School of Computer Science and IT, University of Nottingham,
UK, 2006.
[Oka98]
Chris Okasaki. Purely Functional Data Structures. Cambridge University
Press, 1998.
[PPN96]
Pedro Palao Gostanza, Ricardo Pe˜na, and Manuel N´u˜nez. A new look at
pattern matching in abstract data types. In International Conference on Func-
tional Programming (ICFP’96), pages 110–121. ACM Press, 1996.

[Wad87]
Philip Wadler. Views: A way for pattern matching to cohabit with data ab-
straction. In Principles of Programming Languages (POPL’87), pages 307–
312. ACM Press, 1987.
[Wad89]
Philip Wadler. Theorems for free! In Functional Programming Languages
and Computer Architecture (FPCA’89), pages 347–359. ACM Press, 1989.

