©2019 MathByte Academy

Slots and Single Inheritance
So what happens if we create a base class with slots and extend it?
class Person:
__slots__ = 'name',
class Student(Person):
pass
we don't specify slots in subclass
s = Student()
s.name = 'Alex'
s.__dict__
à {}
in fact:
s.age = 18
à works just fine
so there is an instance dict
s.__dict__
à {'age': 18}©2019 MathByte Academy

Slots and Single Inheritance
So subclasses will use slots from the parents (if present), and will also use an instance dictionary
What if we want our subclass to also just use slots?
à specify __slots__ in the subclass
à but only specify the additional ones
à don't re-specify slots from up the inheritance chain
class Person:
__slots__ = 'name', 
class Student(Person):
__slots__ = 'age', 
à Students will now use slots for both name and age
©2019 MathByte Academy

Slots and Single Inheritance
What happens if we do re-specify some slots?
à works (kind of)
class Person:
__slots__ = 'name', 
class Student(Person):
__slots__ = 'name', 'age'
à memory usage has increased
à may actually break in the future
Python docs:
In the future, a check may be added to prevent this.
à hides the attribute defined in the parent class
©2019 MathByte Academy

à hides the attribute defined in the parent class
class Person:
def __init__(self, name):
self.name = name
@property
def name(self):
return self._name.upper()
@name.setter
def name(self, value):
self._name = value
p = Person('Alex')
p.name à ALEX
class Student(Person):
__slots__ = 'name', 'age'
def __init__(self, name, age):
self.name = name
self.age = age
s = Student('Alex', 18)
s.name à Alex
What happens if we redefine a slot attribute in a subclass?
©2019 MathByte Academy

What happens when a subclass defines slots but inherits from a parent that does not?
class Person:
pass
class Student(Person):
__slots__ = 'name', 'age'
Student will use slots for name and age
à but an instance dictionary will always be present too
©2019 MathByte Academy

How are slotted attributes different from properties?
à a slotted attribute is not stored in an instance dictionary
à properties are also not in an instance dictionary
class Useless:
@property
def useless(self):
return 'useless!'
@useless.setter
def useless(self, value):
pass
obj = Useless()
obj.useless à 'useless!'
obj.__dict__ à {}
they are not different – in fact they both use data descriptors
à we'll cover data descriptors later
à slots essentially create properties (getters, setters, deleters, and storage) for us
obj.useless = 'something else'
à in both cases, the attributes are present in the class dictionary
©2019 MathByte Academy

The best of both worlds
slots à faster attribute access, less memory
instance dictionary à can add attributes arbitrarily at run-time
à can we do both?
à yes!
à specify __dict__ as a slot
class Person:
__slots__ = 'name', '__dict__'
p.name = 'Alex'
p.age = 18
p.__dict__
à {'age': 18}
à uses slots for name, and an instance dict for age
©2019 MathByte Academy

Coding
©2019 MathByte Academy

