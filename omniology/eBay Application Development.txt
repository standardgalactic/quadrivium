
eBay Application 
Development 
RAY RISCHPATER 
APress Media, LLC 

eBay Application Development 
Copyright Â©2004 by Ray Rischpater 
Originally published by Apress in 2004 
Ali rights reserved. No part of this work may be reproduced or transmitted in any form or by any 
means, electronic or mechanical, including photocopying, recording, or by any information storage 
or retrieval system, without the prior written pennission of the copyright owner and the publisher. 
ISBN 978-1-59059-301-1 
ISBN 978-1-4302-0689-7 (eBook) 
DOI 10.1007/978-1-4302-0689-7 
'Ii'ademarked names may appear in this book. Rather than use a trademark symbol with every 
occurrence of a trademarked name, we use the names only in an editorial fashion and to the 
benefit of the trademark owner, with no intention of infringement of the trademark. 
Technical Reviewer: Lauren Darcey 
Editorial Board: Steve Anglin, Dan Appleman, Gary Cornell, James Cox, Tony Davis, John 
Franklin, Chris Mills, Steve Rycroft, Dominic Shakeshaft, Julian Skinner, Jim Sumser, Karen 
Watterson, Gavin Wray, John Zukowski 
Lead Editor: Jim Sumser 
Assistant Publisher: Grace Wong 
Project Manager: Kylie Johnston 
Copy Editor: Ami Knox 
Production Manager: Kari Brooks 
Production Editor: Noemi Hollander 
Proofreader: Thistle Hill Publishing Services, u.e 
Compositor: Kinetic Publishing Services, LLC 
Indexer: Kevin Broccoli 
Artist: Kinetic Publishing Services, LLC 
Cover Designer: Kurt Krames 
Manufacturing Manager: Tom Debolski 
The information in this book is distributed on an "as is" hasis, without warranty. Although every 
precaution bas been taken in the preparation of this work, neither the author(s) nor Apress shall 
have any liability to any person or entity with respect to any loss or damage caused or alleged to 
be caused directly or indirectly by the information contained in this work. 
The source code for this book is available to readers at http: //www. apress. com in the Downloads 
section. 

Contents at a Glance 
Foreword ........................................................... viii 
About the Author ................................................... ix 
About the Technical Reviewer ..................................... xi 
Acknowledgments ................................................... xiii 
Introduction ....................................................... xv 
Chapter 1 
Chapter 2 
Chapter 3 
Chapter 4 
Chapter 5 
Chapter 6 
Chapter 7 
Chapter 8 
Chapter 9 
Appendix 
Introducing the eBay Software Platform ........... 1 
Understanding the Fundamentals of 
eBay Development ................................... 13 
Introducing the eBay SDK .......................... 39 
Managing Users with the eBay SDK ................. 71 
Managing Items with the eBay SDK ................ 103 
Introducing the eBay Integration Library ....... 121 
Reviewing Internet Programming .................. 159 
Using the eBay API ................................ 175 
Using the eBay API Within a Web Site .......... . 193 
Examining the Container for the Sample 
Applications ....................................... 279 
Index .............................................................. 293 

Contents 
Foreword ........................................................... viii 
About the Author ................................................... ix 
About the Technical Reviewer ..................................... xi 
Acknowledgments ................................................... xiii 
Introduction ....................................................... xv 
Chapter 1 
Introducing the eBay 
Software Platform .. .. .. .. .. .. .. .. .. .. .. .. .. .. . 1 
Understanding the Market for eBay Applications ................. 1 
Selecting eBay for Your Application ............................. 5 
Integrating eBay in Your Application ............................ 6 
Developing Your Application with eBay ........................... 9 
Key Points ......................................................... 11 
Chapter 2 
Understanding the Fundamentals 
of eBay Development.. .. .. .. .. .. .. .. .. .. .. .. .. 13 
Understanding the eBay SDK ....................................... 13 
Using the eBay SDK COM Components in Applications ............ 18 
Your First Application Using the eBay SDK ..................... 23 
Key Points ......................................................... 37 
Chapter 3 
Introducing the eBay SDK ................... 39 
Examining the eBay SDK Data Model ............................... 39 
Examining the eBay SDK API Interfaces .......................... 49 
Debugging eBay Applications ...................................... 53 
Viewing eBay Categories: A Sample Application ................. 57 
Key Points ......................................................... 69 
Chapter 4 
Managing Users with the eBay SDK ........ 71 
Understanding the Relationship Between Users 
and Their Accounts ............................................. 71 
Looking Under the Hood at the eBay.SDK.Model.User 
Namespace ........................................................ 73 
v 

Contents 
Looking Under the Hood at the eBay.SDK.Model.Account 
Names pace ........................................................ 79 
Using eBay API Methods with User and Account Data 
Model Objects ................................................... 85 
Harnessing !User: The Userinfo Sample Application ............. 88 
Harnessing !Account: The AccountStatus Sample 
Application ...................................................... 93 
Key Points ........................................................ 101 
Chapter 5 
Managing Items with the eBay SDK ....... 103 
Looking Under the Hood at the eBay.SDK.Model.Item 
Namespace ....................................................... 103 
Examining the eBay SimpleList Sample Application ............. 112 
Representing Feedback with the Feedback Class and 
Its Collection, the FeedbackCollection Class ............... 118 
Key Points ........................................................ 119 
Chapter 6 
Introducing the eBay Integration 
Library ......................................... 121 
Choosing the Integration Library ............................... 121 
Understanding the eBay Integration Library Data Model ....... 124 
Using the eBay Integration Library ............................. 125 
Working with Synchronization .................................... 131 
Using the Integration Library with Items in C# ............... 135 
Using the Integration Library with Categories in Perl ....... 152 
Key Points ........................................................ 158 
Chapter 7 
Reviewing Internet Programming. . . . . . . . . . 159 
Looking Inside an Internet Application ........................ 159 
Moving Data with the HyperText Transfer Protocol ............ 162 
Representing Data with XML ...................................... 168 
Key Points ........................................................ 174 
Chapter 8 
Using the eBay API. . . . . . . . . . . . . . . . . . . . . . . . . . 175 
Choosing to Use the eBay API ................................... 175 
Making a Request with the eBay API ............................ 176 
Using the eBay API ............................................... 183 
Key Points ........................................................ 191 
vi 

Contents 
Chapter 9 
Using the eBay API Within 
a Web Site .. ................................... 193 
Understanding How the eBay Service Fits with 
Your Web Site .................................................. 193 
Understanding the Contents of the eBay API ................... 194 
Using the eBay API Within a Web Site .......................... 261 
Key Points ........................................................ 276 
Appendix 
Examining the Container for the 
Sample Applications ......................... 279 
Understanding the Purpose of the Container Application ...... 279 
Examining the Container Application in C# ..................... 281 
Examining the Container Application in Perl .................. 287 
Index ............................................................ . 293 
vii 

viii 
Foreword 
You HOLD IN YOUR HANDS one of the first books devoted solely to creating software 
applications that incorporate the eBay Marketplace. By applying the information 
in this book, you're joining a community of thousands of software developers who 
are taking the promise of distributed Web services and putting them into action to 
create and enhance real businesses today. 
In this book, Ray Rischpater describes the methods that any software devel-
oper can use to automatically list items for sale on eBay, perform searches of 
eBay product listings, and more. The fact that Ray chose both Perl and C# for 
code examples illustrates how any language or platform can be used to create 
eBay applications. Whatever language or tools you choose, whichever platform 
you prefer, our XML-based API makes it easy to create customized eBay func-
tionality today. 
At the end of 2003, the eBay Marketplace comprised more than 94 million 
registered users around the world. During the last holiday shopping season, one 
out of every three people who were on the Internet came to eBay. Nearly 40 per-
cent of items listed for sale on eBay.com are listed through the API. In 2004, the 
eBay API will service an estimated 10 billion calls from developers. Developers 
are using the eBay platform to build solutions that make trading easier for eBay 
buyers and sellers. The revolution ofWeb services is real, and eBay is proud to 
be part of that revolution. 
The opportunities to build a business or accelerate an existing business with 
the eBay Marketplace have never been greater. We at eBay love to help developers 
who come up with innovative ideas to help users and improve the marketplace, 
and there's no better way to do that than creating a new application using the 
eBay API. We're looking forward to seeing what you come up with! 
The eBay Developers Program Team 
http://developer.ebay.com 
February,2004 

About the Author 
Ray Rischpater is a software engineer and writer who 
has focused on mobile computing since 1995. During 
that time, he has developed countless applications for 
Fortune 500 companies using handheld computers 
and wireless interfaces for enterprise and commercial 
deployment. He is the author of 8 books and 48 arti-
cles on mobile and wireless computing. 
Ray Risch pater is a member of the American 
Radio Relay League as well as the Institute of Electrical 
and Electronics Engineers and is presently employed as a staff engineer at 
Rocket Mobile, Inc. When not writing books or software, Ray spends time with 
his family and provides emergency service using amateur radio in the San 
Lorenzo Valley in Northern California. 
ix 

About the Technical 
Reviewer 
Lauren E. Darcey is a software engineering professional specializing in large-
scale software architecture. For the past two years, Laurie has led a crackerjack 
enterprise software development group that is developing a custom business 
solution for a major player in the international finance industry. She spends her 
copious free time traveling the world, and is an avid nature photographer. Most 
recently, Laurie traveled to South Africa where she dove with 4-meter-long great 
white sharks and got stuck between a herd of rampaging hippopotami and an 
irritated bull elephant. Laurie lives in sunny Santa Cruz, California, with her 
fiance, Shane, and their six lagomorphic friends named Bit, Nibble, Heap, Qubit, 
Stack, and Null. Lauren recently started her own company, Mamlambo, Inc. 
xi 

Acknowledgments 
IT's TIME TO MAKE a little-known confession: Writing the acknowledgments for 
a book is the most fun of all. Not because it's the last thing I have to write (mean-
ing after this I can stop, take stock of the situation, and promise to just say no the 
next time I have an idea for a book!), but because it gives me a chance to recognize 
all of the people who made the book you now hold possible. 
First and foremost, I must thank Maurice Sharp, Debbie Brackeen, and Jeff 
McManus at eBay for supporting me in writing this book. The opportunity to 
work so closely with the eBay team has been an excellent one, and I am deeply 
indebted to them and their team for their efforts. Without them, at best this book 
could only have drawn on what was externally available, and may well not have 
been written at all. 
Next, I must thank Lauren Darcey for her timely and careful commentary as 
technical reviewer on every page of the manuscript. An accomplished developer 
in using both the latest in Microsoft technologies and other technologies includ-
ing Perl, she not only provided excellent review of the technical content, but also 
helped round out many pieces of otherwise wretched prose, and kept an able 
eye out for where my UNIX background got the better of me. (Any remaining 
transgressions, of course, are solely my responsibility, and not that of editors, 
technical or otherwise!) 
The staff at Apress remain my favorite people to work with, both in and out 
of the publishing world. Apress's founders, Gary Cornell and Dan Appleman, 
show an amazing degree of flexibility and grace in reviewing author proposals 
for books, and Gary seems always able to take a bit of time from his hectic 
schedule when an author like me comes calling with an idea or a question. This 
is my second book working with Jim Sumser at Apress, and I hope it won't be 
my last. Kylie Johnston proved to be an able pilot, navigating our ship ... er, 
book ... through the various shoals and storms of production, from the time 
the mostly complete manuscript was completed until the final layout was com-
plete. I'd also like to thank Ami Knox, my copy editor, for helping ensure that 
I avoided the gravest of sins throughout the manuscript; and Noemi Hollander 
for her work in producing the printer-ready version of the manuscript, a sight 
far kinder on the eyes than the Microsoft Word files everybody else had to look 
at through the book's production. 
I need to thank my coworkers at Rocket Mobile, Inc., who gave me moral 
support and encouragement throughout the process, and professed interest 
when I nattered on about various aspects of developing applications for eBay in 
front of the water cooler, at our lunch seminars, and virtually anywhere else that 
they had to put up with me. 
xiii 

Acknowledgments 
xiv 
My family once again earned immeasurable gratitude by supporting me 
throughout the project. My son, Jarod, has been a constant companion since 
I began writing books four years ago. He's now old enough to understand what it 
is that I do, and I am deeply grateful that he supports me with his encourage-
ment and smiles and curiosity about what it is that I do with a computer. My 
wife, Rachel, encouraged me to start the project immediately after finishing my 
last book, something about which I had grave doubts, and tolerated the count-
less times I answered her queries of"Let's go/do/be ... wouldn't it be fun?" with 
a growled, "I can't this weekend. I need to work on the book." Throughout the 
process, she has encouraged me with her infinite love and patience-to her 
I owe my world. 

Introduction 
How wouLD vou LIKE to have a piece of the action involving one of to day's largest 
online marketplaces? Perhaps you've got an idea for an innovative electronic 
storefront, but don't want to build the back end or try to build the marketing 
campaign you need to attract the millions of users that you know you'll please. 
Or maybe you're looking to integrate your enterprise with an existing e-tailer. Or 
perhaps you have another idea altogether, and just need the customers to sup-
port it. Look no further than eBay. With the eBay Software Developer's Kit (SDK) 
and lower-level Web-based Application Programming Interface (API), you can 
craft applications that tap eBay's vast product, server, and customer resources. 
Your application can be hosted on a Web server, your customers' desktop work-
stations, or on the latest mobile gadgets such as a Personal Digital Assistant or 
smart phone. 
This book shows you how to do just that. After reading this book, you'll 
understand what the eBay interfaces provide through both their SDK and their 
API; how you can partner with eBay to design, develop, certify, and deploy your 
application; and most important, the technical nuts-and-bolts behind actually 
writing applications that use both the SDK and API. 
Who Needs to Read This Book 
If you're a software developer interested in leveraging one of the world's largest 
online marketplaces, this book is unquestionably for you. As you read the book, 
you'll gain a crucial understanding of the technical aspects of interfacing your 
applications with eBay, as well as the business background you need to succeed 
in making the connection between your business and eBay's customers a reality. 
For software developers, the book has 11 fully written sample applications and 
dozens of code snippets to help explain the eBay SDK and API. To understand 
them, you need only have experience with developing applications in a high-level 
language-! explain the rest you need to know as I go along. Many of the applica-
tions are in C#, which lets you leverage the power of eBay with little need to worry 
about the complexities behind the scene. If you're not familiar with C#, you'll 
quickly learn it along the way, because it looks a lot like C++ or Java, and I don't 
rely on specific language features. Still others-including those that introduce the 
lower-level API-are written in Perl. You needn't worry about being a Perl guru to 
understand them, though, because I take care to explain the nuances of Perl syn-
tax I use, and keep sophisticated use of Perl at bay. In fact, if you flip through the 
book now, you may find it a little difficult to tell the Perl examples from the C# 
examples, because throughout the book I've been careful to keep my use of both 
XV 

Introduction 
xvi 
Perl and C# to the sorts oflogic and flow control you're likely to encounter in 
a simple C program! 
If you're a product or marketing manager looking to leverage eBay's tech-
nologies for your company, many parts of this book-especially the introductory 
material in the first three chapters and in Chapter 7-is crucial to understanding 
the relationship between your firm and eBay, and the corresponding relationship 
between your applications and eBay's servers. 
What You Will Find in This Book 
This book approaches the eBay tools from two perspectives: the high-level SDK, 
with which you can craft rich applications quickly, and the lower-level API, 
which is the engine under the hood of the SDK that lets you bring connectivity 
with eBay to platforms that don't support the SDK itself. 
In Chapter 1, "Introducing the eBay Software Platform:' I give you a first 
glimpse at both the SDK and the API. After reading this chapter, not only will you 
understand what you can do with these tools, but you will gain an important 
understanding of the business behind writing applications that integrate with 
eBay. Because your application must integrate with eBay's servers directly, I show 
you the ins and outs of the eBay developer program, including how to access 
their test servers-called the Sandbox-during development, as well as how to 
obtain eBay certification so you can ship your application with access to the pro-
duction servers at eBay. 
In Chapter 2, "Understanding the Fundamentals of eBay Development:' 
I present a thumbnail sketch of the concepts crucial to understanding how to 
use the SDK. This provides you with the background you need to understand 
how to use the SDK, including the fundamental mechanism-the Component 
Object Model (COM)-used by the SDK to represent eBay objects and interfaces. 
You'll see how to use COM and the SDK using both C# and Perl, paving the way 
to understanding the examples throughout the book. 
In Chapter 3, "Introducing the eBay SDK:' I present a technical survey of 
the SDK itself. You'll see the various interfaces and objects that the SDK presents, 
as well as how they fit together. 
In Chapter 4, "Managing Users with the eBay SDK:' I move from generalities 
to specifics. You'll learn about how to manage user information and transaction 
payment information via the !Account and !User interfaces. Of course, the chapter 
includes sample code that shows you how to use these interfaces as well as how 
to use the various classes that support them. 
In Chapter 5, "Managing Items with the eBay SDK:' I continue showing you 
individual interfaces, demonstrating how to manage individual items with the 
!Item interface, as well as exploring other interfaces. You'll learn how these inter-
faces connect to let you track an item from listing through its final sale, as well as 

how to perform common operations such as searching for items on eBay, listing 
items on eBay, completing a sale, and leaving feedback. 
In Chapter 6, "Introducing the eBay Integration library:â¢ you'll see how to 
improve your application's performance using the eBay-provided Integration 
library, which lets your application manipulate data from eBay servers offline, 
periodically synchronizing data with eBay for transactions. 
In Chapter 7, "Reviewing Internet Programming:' I return again to the fun-
damentals, this time discussing what you need to know to use the underlying 
eBay API. I give you a quick tour of sockets, HTTP, secure HTTP transactions, 
and XML, the tools you need to know if you're going to communicate directly 
with eBay through the API. 
In Chapter 8, "Using the eBay API," the focus shifts to the API, the low-level 
method of integrating your application with eBay. In this chapter, I present the 
programming model behind the API. I show you the fundamentals of making 
requests and receiving responses from eBay servers via the API. Using the infor-
mation you glean from this chapter, you'll be able to bring integration with eBay 
to a host of new platforms that don't presently support the SDK itself. 
In Chapter 9, "Using the eBay API Within a Web Site:â¢ I show you how to 
integrate eBay within your Web site. Focusing on the task of using the eBay API, 
I show you how to use the eBay API with Perl to add eBay interfaces to your Web 
site, giving your site seamless integration between your data and eBay's. Along 
the way, I explore the gamut of eBay API calls. 
A Word on Presentation 
AB with other technical books, it helps to make a distinction between what's 
meant for people to read and what's meant for computers to read. 
Any text in this book that looks like this is either a variable or class name. 
Whole listings of code are set in the same style, with line numbers, like this: 
1: 
Console.Write( "Enter API Developer Id: " ); 
2: 
deviD = Console.Readline(); 
3: 
Console.Write( "Enter API Application Id: " ); 
4: 
appiD = Console.Readline(); 
5: 
Console.Write( "Enter API Certificate: " ); 
6: 
crtiD = Console.Readline(); 
It is widely held that a picture is worth a thousand words. I've tried to use 
illustrations here for two purposes: to show you screen shots of the various 
sample applications I present throughout the book, or to describe relation-
ships between the interfaces provided by the eBay SDK and API. To do this, 
I frequently use the Unified Modeling Language. UML provides a powerful way 
to represent different aspects of systems in a compact notation that is clear 
and intuitive. 
Introduction 
xvii 

Introduction 
xviii 
Getting the Latest Resources 
The Internet is a fast -moving place, and eBay is ahead of the pack. To ensure you 
have the latest information, all of the examples in this book, along with late-breaking 
news and details, can be found at the Downloads section of the publisher's Web site, 
http://www.apress.com/. 
Of course, as you get started, you should go straight to the source for the lat-
est information and version of the eBay SDK. You can find that and more at eBay's 
developer Web site, http: I I developer. ebay. com/. 
Looking Ahead 
If you're looking to bring your software ideas, products, and services to a bevy of 
satisfied consumers, look no further than the eBay SDK. You have the skills and 
tools to bring your idea to market-add this book and you're ready to go. So sit 
down, pull out your laptop, and let's get started. 

CHAPTER 1 
Introducing the eBay 
Software Platform 
To THE AVERAGE CONSUMER, eBay is one of two things: either a member of that 
rare breed, the wildly successful dot-com corporation, or a buyer's and seller's 
mecca. In truth, these are so tightly interrelated as to be the same thing: eBay is 
phenomenally successful simply because it unites buyers and sellers from all 
places and all walks of life. Key to its success, however, is its focus-a company 
that trades in data, rather than physical merchandise. By offering the eBay SDK 
and API services, eBay extends to you not just that data, but also an opportunity 
to share in their success by tapping both buyers and sellers, bringing you a mar-
ket for your ideas, services, and products. 
In this chapter, I introduce the fundamentals behind the eBay platform: 
how people use eBay and how they can benefit from your skills, why you might 
choose eBay for a partner when developing a new application, how to integrate 
eBay in your application, and how you develop your application with eBay as 
a partner. Think of this chapter as your 30,000-foot introduction to the world of 
eBay application development; after this chapter, you'll be ready to disembark 
and begin meeting the various components of the eBay SDK and API as you go 
about your day. 
Understanding the Market for eBay Applications 
The notion of eBay as an online auction house is now a central concept in the 
minds of hobbyists, collectors, and bargain hunters around the world. Increasingly, 
however, eBay has added brands and categories, turning it into the equivalent 
of an online mall in which you can find virtually anything. Unlike a mall, though, 
eBay has two advantages: They are a broker, meaning that they don't need to 
manage inventory, and as a broker, they simply mediate the relationship between 
buyer and seller, letting you {as either a buyer or seller) have control over how 
much you spend or make on a transaction. In fact, eBay gives you complete 
control over the appearance and sale of your item: You can even list items as 
fixed-price sales, not auctions at all! With over 12 million listings a day in 18,000 
categories, eBay helps move tens of billions of dollars' worth of merchandise 
annually. 
1 

Chapter 1 
2 
As a result, most of us have the same image of eBay users, people like these: 
â¢ Beanie Baby-smitten collectors trading their surplus wares on eBay, hop-
ing to score the rare find of a limited-edition doll 
â¢ Fanatical otaku-Western slang for Japanese animation and comic collec-
tors-snapping up the latest in fan-subtitled releases and collectibles 
from Japan 
â¢ The neighbor down the street cleaning his attic and selling his old vinyl 
records to collectors on eBay 
â¢ Bargain-conscious techies looking to pick up a cell phone, PDA, or video 
game to try at a good price 
Unfortunately, these images are one-sided, and tend to forget millions of 
other users, such as these four: 
â¢ The comic book storeowner who expanded her sales to eBay, now selling 
more merchandise online than through her retail business 
â¢ The clothing retail chain using eBay to sell excess inventory, helping main-
tain their profitability while bringing bargains to consumers without 
devaluing sales in their brick-and-mortar stores 
â¢ The savvy housewife in a single-income family, buying up baby formula 
from stores about to close for pennies on the dollar and reselling it at 
a tidy profit to help make ends meet 
â¢ The slide-rule collector who has been able to move from collecting slide 
rules and drawing equipment as a hobby to a bona fide full-time business 
using eBay as his store to reach interested customers 
Understanding How People Use eBay 
To date, the overwhelming majority of users interact with eBay in the same way: 
via the ubiquitous online interface. Using this interface to sell an item, you must 
do the following: 
1. 
Obtain an eBay ID, giving you access to eBay to sell an item. When you 
do this, you also need to provide information about how you will pay 
eBay for listing your item, thereby becoming a seller on the eBay site. 

Introducing the eBay Software Platform 
2. 
Create a description of your item, including photographs if desired, the 
category in which it belongs on eBay, your desired starting price, an 
optional reserve price, and an optional "Buy It Now" price that users 
can use to bypass an auction and purchase your item immediately. 
3. 
Enter all of this data into eBay's servers using Web-based forms in HTML. 
4. 
During the auction, many buyers like to track the progress of their auc-
tion by monitoring the number of bids and pace of bidding, as well as 
how the auction compares to other auctions. At the conclusion of your 
auction, contact the buyer for payment and shipping using information 
from eBay's Web site. 
5. 
Package your item for shipment and send it to the buyer. 
6. 
Leave feedback for your buyer regarding how she handled the transac-
tion on the eBay Web site. 
7. 
Pay (via your seller's account) a final value fee, typically a percentage of 
the transaction, and your insertion fee for listing the item to eBay. 
8. 
Periodically remit payment for your seller's account fees, managing your 
seller's account using eBay's Web site. 
Much of the work in listing an item is involved in step 2, and much of the 
eBay SDK and API you will encounter in later chapters provide ways for you to 
automate this process on behalf of users. In fact, given the rather cumbersome 
nature of listing many items on eBay with their Web site, there is a healthy mar-
ket for applications that make listing items easier. 
The process for a buyer is similar: 
1. 
Obtain an eBay ID, giving you access to eBay to bid on an item. 
2. 
Find an item you'd like to purchase by searching eBay's Web site, brows-
ing categories, or a combination of these two. 
3. 
Place a maximum bid on an item using eBay's Web site, and periodically 
revisit the auction to see if your maximum bid has been exceeded. 
4. 
When the auction has closed, the seller contacts the buyer via eBay's 
Web site or e-mail to send payment and shipping information. 
5. If you won the auction, when you receive the item, leave feedback for 
the seller using eBay's Web site regarding your satisfaction with the pur-
chase process and item you've received. 
3 

Chapter 1 
4 
As you can see, a great deal of the activity centers on eBay's Web site. While 
easy to use, it quickly becomes an arduous chore for those seeking to make a liv-
ingon eBay. 
The eBay API, SDK, and related tools such as the eBay Integration Library 
let you eliminate the time-consuming process of entering each item into eBay's 
auction service, allowing you to track auctions, list items, post feedback, and 
review your eBay account activity programmatically. Instead, using these Web 
interface tools, companies can integrate their existing inventory, shipping, and 
accounts-payable applications, removing the need to manage eBay sales manu-
ally. In essence, these applications enable such companies to treat eBay as an 
additional storefront, much like their existing brick-and-mortar or Internet 
storefronts. 
It doesn't end there, however. Until recently, the Developers Program for 
eBay was prohibitively expensive for many to join. The latest options in the 
Developers Program, however, make it free to have access to the SDK, API, and 
the eBay Sandbox, a safe area with real data from past auctions where you can 
test your application. This enables everyone, from the visionary CTO looking to 
streamline his company's inventory management or find a new outlet for exist-
ing products and services, to the foundation of a startup-two folks in a garage 
with a novel way to help a segment of eBay users process their sales listings 
quickly and easily. 
How Your Applications Can Help eBay Users 
As you can see from the last section, even if you've never used eBay, there's a lot 
of room for automation in the work of many frequent eBay users, especially eBay 
sellers. Obviously, one segment is already undergoing change as developers craft 
eBay applications-inventory control for medium and large-scale retail firms. In 
many cases, these applications are one-off applications, parts of large-scale 
information technology overhauls for major corporations. While very profitable 
for IT and management consultants, it's admittedly a limited market, especially 
if you don't have the right connections. 
That's where eBay's strength from numbers comes in: With millions of buy-
ers and sellers, there are plenty of opportunities to come up with applications to 
help a sizable number of eBay users. Virtually every group of sellers can benefit 
from an application that helps them manage the list-sell-ship-rate-reimburse 
cycle, with features specific to the kinds of items sold, or the kinds of databases 
specific users use, and so on. Consider Sandy, the owner of the comic book store 
that I mentioned in a previous section. With her inventory in a standard database 
product, you can write an application that integrates with the database product, 
letting her mark specific items to be listed on eBay if they're in excess inventory 
for over six months. In tum, the application periodically queries her to be sure 
that the items suggested should be listed, lists items, generates reports for sold 

Introducing the eBay Software Platform 
items as buyers pay for them, and even generates shipping labels once items are 
paid for. 
Of course, not all eBay applications need to be desktop-centric like this. 
Because the eBay SDK and eBay API are Web-based and can run on many differ-
ent platforms, applications can reside on Web servers as well. Using the SDK, 
you could construct an application to query eBay on behalf of other Web users, 
such as members of an organization following antiques or other collectibles 
on eBay. The application might optimize searches in specific ways for users, or 
periodically aggregate the results of searches and send them via e-mail to users' 
desktops or mobile phones. 
Finally, there's a whole host of value-added applications that might not nec-
essarily contribute to your retirement fund, but may well address the needs of 
small groups of people. You should be careful when considering some of these, 
however, as the API license you must sign before having your application manip-
ulate live eBay data does place restrictions on some applications, such as mining 
eBay data for your own purposes. 
Selecting eBay for Your Application 
If you're considering writing an application or service, you may wonder why 
you want to integrate with eBay at all. Perhaps your application is designed 
to provide stand-alone auction management services for collectors, or you're 
writing a database application to track collections, or you're looking to 
enhance your corporation's inventory management system. What, you ask, 
does the eBay connection bring to the table for you? 
The obvious answer is simple: millions of potential customers (75 million 
registered users as of September 2003!). If you're involved in a part of the indus-
try where you're selling products or services, you can't beat that. Ready for your 
products and services, these customers are already proficient at buying and sell-
ing on eBay, so leveraging eBay's auctions and stores simply makes sense. If you're 
writing software to help these customers, integrating with eBay is a logical step. 
By taking one of the most time-consuming parts of using eBay and streamlining 
it in your application, you can save them time, making your application even 
more valuable to them. 
Maybe you've already decided to leverage eBay-there's a host of applications 
and services that do this using screen scraping, the process of programmatically 
parsing the HTML that makes up a page on eBay and then using the resulting 
data to drive your application. Why wouldn't you just use screen scraping, rather 
than coming up to speed on a new interface and taking the time to integrate it 
with your application? 
First, from a technical perspective, maintaining a screen-scraping applica-
tion is painful at best. As eBay-and their users in custom storefronts-change 
5 

Chapter 1 
6 
their HTML and server scripts, you must be prepared to make changes to your 
screen-scraping code. Inevitably, this becomes a continual process, as you track 
changes to eBay's site and respond accordingly. More importantly, it's openly dis-
couraged by eBay; the API and SDK are there precisely to ensure that you don't 
have to use screen scraping in the first place. Screen-scraping applications can 
place a heavy load on the servers at eBay, and don't give them the control they 
need over the dissemination of their data. Using eBay's development tool offer-
ings gives you the assurance that your application will be flexible to eBay's 
changes, reliable in the face of those changes, and not subject to technical or 
business restrictions that screen-scraping applications face. Finally, as you will 
learn throughout this book, using the tools and services eBay offers in your 
application is actually easier than parsing out HTML and making decisions 
based on its content. Instead, the SDK provides a .NET and Component Object 
Model (COM) and .NET interface to eBay data, while the companion API pro-
vides a flexible interface to eBay's data using the eXtensible Markup Language 
(XML) over a secure HyperText Transfer Protocol (HTTPS) connection. By using 
widely adopted technologies including .NET Framework, COM, XML, and HTTPS, 
writing applications for eBay is far easier with their tools than without. 
Integrating eBay in Your Application 
So what does it take to write an eBay-connected application? Surprisingly little, 
actually. You begin by signing up with eBay to get an application certificate iden-
tifying your application and obtaining the appropriate tools from eBay (which 
I discuss in the following section, "Developing Your Application with eBay"). Your 
application itself needs to be implemented on a platform with basic network 
services, including HTTPS, or you'll need to be prepared to implement HTTPS as 
part of your application (say, on simple Internet appliances or some wireless 
handsets). If you want to use the high-level SDK, which is implemented in .NET 
and exposed as COM and Java packages, the dependence on .NET essentially 
limits the use of the SDK to Microsoft Windows-based platforms. On the other 
hand, the underlying API requires only support for Web services-namely, HTTPS 
and XML-and the XML is simple enough that if necessary you can port or craft 
an XML parser to your target platform for your application. Finally, for this to be 
of any use to your application's users, they must have accounts with eBay to actu-
ally access eBay data with your application. 
Using the eBay development tools, you can perform common operations 
including 
â¢ Searching for items that are for auction 
â¢ Gathering information about items for auction 
â¢ Listing new items for auction or revising or ending existing items 

Introducing the eBay Software Platform 
â¢ Listing fixed-price items for sale 
â¢ Managing item shipping costs and accessing the eBay Shipping Calculator 
to determine shipping costs 
â¢ Obtaining information about eBay users 
â¢ Fetching lists of transactions you had in a specified period of time 
â¢ Fetching lists of change events to your items' status 
â¢ Fetching lists of bidders and sellers for items for sale 
â¢ Obtaining feedback about buyers and sellers 
â¢ Leaving feedback to users that you had transactions with 
â¢ Managing and searching eBay categories 
You should be aware, however, that there are some key things that you can't 
do with the eBay tools. In most cases, the reason for this is obvious: to ensure 
a level playing field between all buyers and sellers on eBay. Some of the things 
you can't do programmatically are 
â¢ Bid or buy an item for auction using either the SDK or the API. 
â¢ Create a new eBay user ID. 
â¢ Manage nonpayer bidder processing or fair-value fee refunds from eBay to 
seller accounts. 
NOTE 
eBay is continually improving the eBay API and SDK This list was 
current as this book was written, but you should check the latest SDK docu-
mentation to see what things have been added since then. 
Selecting the eBay SDK or the eBay API 
There's a key difference between the eBay SDK and API you must be aware of 
from the beginning if you're to make the right choices about whether to use one 
or the other. Figure 1-1 shows the relationship between the eBay SDK, API, and 
the underlying features of the eBay platform. 
7 

Chapter 1 
8 
eBay Users 
' ' ' ' ' ' ' ' ' ' ' ' 
HTML / 
/ 
/ 
/ 
eBay ISAPI 
â¢ 
~ 
Your Application 
"' 
~ 
,.,. 
: 
: 
: 
... , SO< 
eBay API 
eBay Platform 
Figure 1-1. The relationship between the eBay SDK, API, and eBay platform 
In a very real sense, the eBay SDK provides a high-level interface to the features 
of the eBay API, freeing the average application developer from needing to worry 
about Web-based transactions, XML, or the other complexities of Internet program-
ming (a topic I review in Chapter 7). eBay SDK is currently implemented only in 
Microsoft .NET. It provides COM-compliant .NET assemblies. Consequently, you're 
free to write your application in any language that supports linking to .NET assem-
blies or COM components, including Java, C++, VB .NET, Visual Basic, VBScript or 

Introducing the eBay Software Platform 
Perl. The SDK runs on Microsoft Wmdows platforms starting at Microsoft Wmdows 
2000 (Wmdows 98 support is under development) and going forward, making the 
SDK an excellent choice for applications that will reside on any modem Microsoft-
based system. An important segment of the eBay SDK is the eBay Sample Selling 
Tool (which I discuss in detail in Chapter 6)-an open source application that is built 
upon the eBay SDK Integration Library. Using the Sample Selling Tool, you can list 
items, and manage items, sales, and feedback that are cached and synchronized in 
your database. 
NOTE 
The Sample Selling Tool is just what its name implies: a sample. 
Under the eBay SDK is the eBay API. The eBay API isn't an API in the sense 
you may be used to. Instead, the eBay API is an XML application-a series of 
predefined XML tags and attributes. You use these XML tags to send queries to 
eBay via HTTPS, and responses returned by eBay are also encoded with these 
XML tags. In an abstract way, this is in fact an API, although if you're not careful, 
you can get mired in the details ofXML and HTTPS (a topic I discuss in Chapter 7 
as well). Because the API has fewer requirements on a host platform-needing 
only XML and HTTPS atop a reasonable operating system-the API is well-suited 
to developing eBay applications on a host of platforms, from high-end comput-
ers running Mac OS X or Linux to diminutive handheld computers running the 
Palm-powered operating system or cell phones with QUALCOMM BREW or 
J2ME. 
Conceptually, you can think of the eBay API as a segment of the API used by 
eBay internally, even if that's not necessarily so. Under the API-and alongside 
it-are the other various server-side scripts that access the eBay platform on 
servers at eBay directly, shuffling all of the details of user accounts, buyer and 
seller transactions, item listings, and the like, making the virtual market a real 
one for millions of people. 
Developing Your Application with eBay 
When you decide to integrate your application with eBay, you take on eBay as 
a partner. You'll be using not just their data, but also some of their intellectual 
property-the interfaces provided by the eBay SDK and API, as well as some of 
their physical property, the servers that process the API requests on your behalf 
whether you're using the eBay SDK or eBay API. Consequently, developing an 
application that interacts with eBay involves some additional steps from a tradi-
tional software development project. 
9 

Chapter 1 
10 
At the outset, your development process, in which you construct scenarios 
and use cases for your application, will be much the same. You'll be hammering 
out exactly what it is that your application will do, and what value the eBay con-
nection brings to your application. Even at this early stage, you should visit the 
eBay Developer Web site at http: I I developer. ebay. com/ to take a look at what the 
Developers Program offers and how its pricing will affect your application. 
While entry to the Developers Program is free, applications using the eBay 
interfaces aren't. There are good reasons for this, too, especially because the 
pricing is very reasonable. Applications that use eBay interfaces must limit their 
use of API calls to a set number every day or month to ensure that they don't 
swamp eBay's server resources with excessive requests. Consequently, eBay pro-
vides a tiered developer program in which you can choose to be an individual 
developer (with relatively few API calls per day permitted), or pay increasing 
amounts and obtain a greater number of API calls per day and other benefits 
(such as direct developer technical support). Weighing the options available to 
you early in your development process lets you select the kinds of use cases you 
can implement at set economic cost to you or your application users. 
Once you're ready to begin development, you must actually sign up with the 
eBay Developers Program to obtain access to the eBay API (although you can 
download the eBay SDK without signing up) and the eBay Sandbox. Signing up is 
essential, if only because you will use the eBay Sandbox throughout the develop-
ment life cycle. It's easy to do, too-you simply fill out a Web-based form, pay an 
annual membership fee if you choose to purchase support for your application 
development, and receive a login and password to access the eBay Developer 
Zone, a password-protected site that includes all of the eBay SDK and eBay API 
documentation, as well as access to the eBay Sandbox. 
The eBay Sandbox is an eBay-in-miniature, where you're able to test your 
application against real-world eBay servers chock full of past auction data. Using 
the eBay Sandbox, you can create test users, list items for sale, and set up real-world 
test cases for your application-all without running the risk of costly application 
failures with real people on eBay's production servers. It's a critical part of develop-
ing and testing your application, because the eBay Sandbox acts just as the real 
eBay servers do, letting your application get the workout it needs as you write, test, 
and debug. 
Once your application is ready to be delivered to customers, you submit it to 
eBay for certification, typically paying a flat fee to eBay to cover the cost of test-
ing. This certification ensures that your application plays well with eBay's servers 
and data, verifying that you comply with the API agreement that specifies how 
you may use the APis, and that you use them efficiently, avoiding practices that 
incur unnecessary processor and network loads on eBay servers. Because of this, 
certification is mandatory; but it provides additional benefits to you, because 
after certification your application can access the real data on eBay's production 

Introducing the eBay Software Platform 
servers, and you can advertise the application as having met eBay certification-
something not available to developers without certification or those using 
technologies other than those available from eBay. 
Certification is essentially black-box testing-that is, eBay testers run your 
application, examine the user interface, and explore how it interacts with the 
eBay service by looking at the network traffic it generates. They don't perform 
code reviews, code audits, or anything else of the sort, so you can rest assured 
that the details of any proprietary algorithms stay where they belong, safe inside 
your company's brain trust. 
Of course, once your application is complete, you'll probably find the need 
to make changes as you add features. Generally, you need only recertify your 
application when your license to use either the eBay API or eBay SDK expires, or 
when you make specific changes to your application that changes how it uses the 
eBay API or SDK. Other changes, such as user-interface changes, changes to the 
splash screen or help documentation, and the like, don't require recertification 
because they don't change how your application interacts with the eBay service. 
Key Points 
In this chapter, you learned that 
â¢ Not just individuals use eBay, but hundreds of smaller and larger corpora-
tions do to buy and sell inventory. Using the eBay developer tool offerings, 
you can create software valuable to both buyers and sellers who use eBay 
to conduct their business. 
â¢ Using eBay's development tool offerings is the only eBay-sanctioned way 
to programmatically access data from eBay's servers. 
â¢ The eBay SDK provides an interface to eBay data using .NET and the 
Component Object Model (COM), suitable for developing applications 
on the Microsoft Windows platform. 
â¢ The eBay API provides an interface to eBay data using XML over secure 
HTTP, suitable for developing applications on any platform with a mini-
mum of network services. 
â¢ You must be a member of eBay's Developers Program to develop applica-
tions that use eBay's data, the eBay SDK, and the eBay API. The Developers 
Program is a tiered program, with a free level so that even individual devel-
opers can afford to develop applications. 
11 

Chapter 1 
12 
â¢ A key element of the eBay Developers Program you will use in developing 
your application is the eBay Sandbox, a set of servers stocked with data 
from past auctions you can use with test users and your application to 
ensure that it functions correctly. 
â¢ Before you ship your application, you must have it certified by eBay, to 
ensure that it follows eBay's Terms of Service and doesn't interact mali-
ciously with eBay servers and data. 

CHAPTER 2 
Understanding the 
Fundamentals of eBay 
Development 
BEFORE YOU DIVE INTO the eBay SDK, it's worth taking some time to review the 
fundamentals of developing applications using the eBay SDK itself. Understanding 
how the eBay SDK relates to your application and how people use eBay will help 
you create robust applications quickly. 
In this chapter, I show you the fundamental concepts you need to know when 
using the eBay SDK I first show you the organization behind the eBay service and the 
eBay SDK, so that you understand how the different pieces of the SDK fit together 
and how to make an SDK API call. Next, I step back from the eBay SDK and talk in 
general terms about the .NET assemblies and the Component Object Model (COM) 
interfaces you use when writing applications with the SDK and how you use these 
with both C# and Perl, two of today's popular programming languages. Once you 
understand how to use COM to access the eBay SDK, I return to the topic of the 
eBay SDK itself, showing you your first application at the end of this chapter in 
both C# and Perl. 
Understanding the eBay SDK 
While the eBay SDK is not complex, it has an organization and a vocabulary all its 
own that is essential for you to understand when using the SDK. If you're new to 
eBay, it's imperative that you understand these concepts before moving forward; 
if you're a veteran user or developer, understanding these concepts and how 
they're used in the context of eBay development helps you use the SDK correctly. 
NOTE 
Before you even set out to use the SDK, you should understand what it 
is and isn't. The eBay SDK gives Microsoft Windows developers a high-level 
interface to the eBay service. It's not the same as the eBay API (which I dis-
cuss in Chapters 8 and 9), which lets any Web-enabled platform access the 
eBay service. 
13 

Chapter2 
14 
Installing the eBay SDK 
Before you can work with the eBay SDK, you must first install it on your devel-
opment workstation. This is easy: After signing up as an eBay developer (see 
"Developing Your Application with eBay" in Chapter 1), simply download the 
eBay SDK installer from http: I I developer. ebay. comiDevPrograml developer I 
sdk. asp and execute it on your workstation. It will create a folder (by default, 
c:\Program Files\eBay\SDK\) that contains all of the components of the eBay 
SDK, including the developer samples, necessary dynamic linked libraries 
(DLLs), resources, and documentation. 
Understanding the Life Cycle of an Auction on eBay 
An item's auction goes through a set of distinct phases on eBay. Understanding 
these phases is crucial, because your understanding not only affects how your 
application operates, but also helps you determine how your application adds 
to an eBay user's experience. In broad strokes, these stages include 
1. 
The initial item listing 
2. 
Viewing by potential buyers once the item is listed 
3. 
Bidding on the item by interested buyers 
4. 
The closing of the auction 
5. 
Settling the auction transaction 
6. 
After-auction activities 
An auction begins when you officially list the item for sale, either through 
a special page on eBay (the Sell Your Item page), or via the eBay SDK or eBay API. 
As you list the item for sale, you describe it, post pictures of the item, and so 
forth. You also specify the conditions under which the auction concludes, such 
as the minimum price you will accept, how long the auction should take place, 
how a buyer must pay for an item, and where you're willing to ship the item. 
Listing an item incurs fees that are calculated and shown to the user as part of 
the process. 
Once the item is listed, it goes up for auction. Each auction can be different, 
however. Some auctions allow a single user to purchase an item immediately, 
while other auctions meet the more traditional notion of an auction, complete 
with a competitive bidding process. Table 2-llists the kinds of auctions eBay 
presently supports. 

Understanding the Fundamentals of eBay Development 
Table 2-1. Auctions Supported by the eBay Platform 
Type of Auction 
Chinese auction 
Dutch auction 
Ad-Type auction 
Stores Fixed-Price auction 
Buy It Now auction 
Definition 
One item per auction. 
Ends only when the auction's time expires. 
Auction is won by competitive bidding, and only one 
winner is allowed. 
May be an eBay store item. 
Two or more items per auction. 
Ends only when the auction's time expires. 
May have one winning bidder for each item in the 
auction. 
May be an eBay store item. 
One real-estate item per auction. 
Auction is never won, being an advertisement for the 
real estate property. 
One or multiple items per auction. 
Ends when last item sold or duration expires. 
One winning bidder for each item. 
Item must be listed inside seller's eBay Stores storefront. 
One item only per auction. 
The first bidder has the option of exercising the Buy It 
Now option at the indicated price and winning the 
item. If she does not, auction continues as per Chinese 
auction and ends when auction expires. 
NOTE 
As you can see from Table 2-1, eBay has the notion of eBay Stores, 
a separate part of their Web site that allows sellers to cobrand their sales with 
eBay. Using an eBay store, sellers can present a unique look and feel, obtain 
a dedicated URL that takes buyers directly to their items on eBay, and obtain 
regular reports of sales performance. 
Table 2-1 shows that there are some broad differences between kinds of 
auctions: 
â¢ The number of physical items listed within an auction 
â¢ Whether the auction is listed as part of an eBay storefront for a user 
â¢ Whether the auction is fixed or variable price 
15 

Chapter2 
16 
Once the item has been listed, it's visible on the eBay Web site in a number 
of places, depending on the type of item and the type of auction. Most users will 
see the item first under a listing Web page that shows the results of a search by 
item or category. Selecting an item from the listing page shows the item itself, 
along with its current price, how many bids have been placed for the item, the 
start time and end time of the auction, payment and shipping terms, and a form 
for you to enter a bid to purchase the item. 
Once you have placed a bid on an item, it's added to your My Ebay page, 
a special page attached to your user account that you can view at any time to 
get a synopsis of the status of the items you've bought, sold, and are interested 
in buying. 
Once the auction is over-either because the auction's time has elapsed, 
or because the item has been purchased via Buy It Now during a Buy It Now 
auction-the auction is closed. If the item has sold, the buyer and seller must 
settle the terms of the auction; otherwise, the seller is free to relist the item as 
she chooses. 
To settle the auction, buyer and seller may contact each other, exchange 
payment and item, and optionally leave feedback for each other. The settlement 
can be done a variety of ways, from e-mail to using eBay's PayPal service. If buyer 
and seller use PayPal, eBay provides an automated Checkout service that lets 
buyers send payment automatically via their PayPal account; otherwise the process 
is more manual, typically through the use of a money order or personal check. In 
any case, once payment is received, the seller sends the item to the buyer. Finally, 
feedback (consisting of a brief textual comment and a numerical rating) is given 
by the buyer to the seller and by the seller to the buyer, indicating each party's 
degree of satisfaction with the transaction. Feedback is essentially peer-driven 
reputation building, and permits others to have a relative notion of the reliability 
of a specific buyer or seller. 
NOTE Leaving feedback is an optional yet crucial part of the process, because 
feedback is the means by which buyers and sellers maintain ratings and pro-
vide a peer-reviewed mechanism for ensuring trust berween eBay users. 
Understanding the Vocabulary of the eBay SDK 
The eBay SDK has a precise vocabulary describing the kinds of entities that the 
eBay SDK manipulates. Understanding these terms from the get-go will help you 
understand how the eBay SDK interfaces map to the real-world elements behind 
an online auction at eBay. 
Central to the notion of the eBay SDK interface is a user. This term encapsu-
lates the notion of a user of the eBay auction service, and possesses attributes 
including the user's e-mail address, an "about me" URL to a Web page with details 

Understanding the Fundamentals of eBay Development 
about the user, cumulative feedback score from previous transactions, whether 
or not the user owns a specific eBay store, and so forth. Each user has an account, 
which contains information about how that user pays eBay for carrying and com-
pleting auctions. Of course, you can't go accessing users' accounts willy-nilly, but 
you can access the account of users who're signing in with your application, so 
that your application can help users track the details of their eBay accounts, if 
they have more than one (which can happen if a user has more than one eBay 
store, for example). 
Something for auction on eBay is called an item. Sellers list items for sale, 
and buyers bid on those items. Your application can observe an item's main 
properties, including the number of bids pending on an item, the current bid-
ding price, the Buy It Now price at which the item can be bought and the auction 
closed, the currency associated with the price, the country from which the item 
is being sold, and so on. Most of an item's properties are fixed once the item is 
listed, or at least cannot be changed by SDK calls: It would make little sense for 
a user of the SDK to artificially change who is selling an item, for example! The 
notion of an item is a little slippery, as it may be more than one tangible thing 
(such as in a Dutch auction). To eBay, an item is simply something up for sale 
classed by a specific item ID. 
All items fall into at least one category (and possibly two), one of the thou-
sands of classifications that make objects easy to find. eBay employs hierarchical 
categories, with broad categories towards the top of the hierarchy and smaller, 
more specific categories below. For example, Music is a category contained by 
Entertainment, and Music itself contains other categories, including Cassettes, 
COs, Records, and even 8-Tracks (which technically falls into the Other Formats 
category of Music). 
Once an auction has concluded, the auction itself is known to the SDK as 
a sale. The sale contains information such as a reference to the item that has 
been sold, the amount the buyer as agreed to pay for the item, the user infor-
mation for the buyer, and the unique transaction ID that represents the sale. 
After completing a sale, both buyer and seller leave feedback regarding the 
other party. A unique item of feedback includes a textual comment describing 
the transaction, a numeric score, the ID of the user who left the feedback, their 
role in the transaction, and when the comment was recorded. Every user has an 
aggregate score showing their feedback standing, giving other users a notion of 
how trustworthy an individual user is. 
Understanding How the eBay SDK Is Organized 
The eBay SDK is a set of .NET assemblies that are also COM compliant. By being 
so, they ensure that the SDK components are available to a host of development 
platforms running on Microsoft Windows, including C, C++, C#, Perl, PHP, Visual 
Basic, and VB.NET. 
17 

Chapter2 
18 
Within the eBay SDK are two specific components: the API Library, which 
provides a wrapper around the underlying eBay API, and the Integration Library, 
which provides a number of added-value functions that lets you streamline 
access between your application and the eBay service. In the discussion that fol-
lows, I emphasize the eBay API Library because you will learn about the eBay 
Integration Library in Chapter 6. This division, and the other divisions within 
these components, are maintained via namespaces-hierarchical naming that 
begins with the prefix eBay. SDK. Each namespace is divided with periods. Here 
are a few valid eBay SDK component names: 
â¢ eBay. SDK.Model.Account: Represents an account 
â¢ eBay. SDK .API. APISession: Manages the underlying API calls that operate 
behind the eBay SDK 
â¢ eBay. SDK. Model. Item. Fees: Represents the fees a seller pays to list and 
sell items 
TIP Even if you never intend to use the eBay Integration Library, you should 
still peruse Chapter 6, because the eBay Integration Library provides a lot of 
support in its data model for interacting with eBay. Understanding the eBay 
Integration Library will help you understand patterns of use your application 
is likely to follow as well as create a robust application design. 
As you might imagine, the libraries behind the SDK contain two kinds of 
components: classes, which implement the various components of the SDK; and 
interfaces, which describe how you can access a class programmatically. 
The eBay API Library is divided up into two logical sections: the model and 
the api. The model section of the eBay API Library, contained in the namespace 
eBay. SDK. Model, consists of the classes and interfaces that represent components 
of the eBay data model, such as sales, items, users, accounts, and transactions. 
The api section of the eBay API Library, contained in the eBay.SDK.API name-
space, provides interfaces for each eBay API call. You use both in the course of 
building your application; the eBay. SDK. Model components will help you organize 
your application, while the eBay. SDK. API components perform the actual work of 
making eBay API calls. 
Using the eBay SDK COM Components in Applications 
Component-oriented programming is not new. The first discussions centering 
on the notion of creating pluggable components for assembling software like 

Understanding the Fundamentals of eBay Development 
electronics, with interchangeable components, dates back to a North Atlantic 
Treaty Organization (NATO) conference on the state of software engineering in 
1968. At the conference, Douglas Mcilroy presented a paper titled "Mass Produced 
Software Components," suggesting that a component -oriented approach to 
organizing code would facilitate large-scale software development. 
The Microsoft COM approach to software components dates back to the 
early 1990s in the form of Microsoft's Object Linking and Embedding (OLE) tech-
nology for supporting interapplication communication. With the rise of other 
component -oriented approaches such as the Common Object Request Broker 
Architecture (CORBA) to facilitate the construction of applications using pre-
defined, interchangeable chunks of code on a single computer or distributed 
across a network, Microsoft repeatedly enhanced and renamed OLE through the 
following five years, finally announcing COM, an all-encompassing component 
framework, in 1997. 
To most developers, COM is an umbrella over the underlying software com-
ponents. However, to platform vendors such as eBay, it's far more. COM includes 
the underlying protocols and code for platform vendors to add additional compo-
nents, enabling a developer to make virtually anything available as a component. 
To make access to eBay easier for developers like you and me, eBay's engineers 
created a set of COM components that encapsulates the underlying eBay API 
(see Figure 1-1 in Chapter 1) so that you can access eBay servers without need-
ing to use the underlying API. Consequently, in order to use the eBay SDK, you 
must first be comfortable using COM in building your applications. 
Using the eBay SDK in C# Applications 
Because the eBay SDK is a set of .NET assembly libraries, its integration with 
other .NET applications and languages is trivial. If you've struggled with inte-
grating other COM components into your .NET applications, don't panic: eBay 
has done the work for you. 
TIP 
Even when you go to write your own application from scratch, you may 
want to have a look at the C# container sample that accompanies the source 
code with this book. This sample shows how you add the eBay SDK assemblies 
to your project and include their declarations in your source code. 
To begin with, be sure you have installed the C# components ofVisual Studio 
.NET on your development workstation. Once you do that, accessing the eBay 
SDK from your C# application requires only that you perform the following steps: 
19 

Chapter2 
20 
1. 
Include the directory where you installed the eBay SDK (the default is 
C:\Program Files\eBay\SDK\) in the References Path field of your pro-
ject's Common Properties section in the project's Property Pages dialog 
box (see Figure 2-1). 
Sâ¢unpi.~P .... 
:::â¢ 
;;-a 
I 
3 
I Â·~~ 
3 
.. 
I 
-:j CDnvnon l'nlpo<UH 
r;J dl xl â¢I â¢ I 
GOMfill 
C:\,Pn>gnm F...,_OIIay\SOIC\ 
~llof 
... ls 
+ -on<MPath 
~ c.onllgurotlon Proponll 
<1 
-~' 
' 
References Path 
IJststMdir_ID .. O<ctlwllenlhoprojealtioododfor--
rwlortnetd bylhoprojÂ«::. Tl.,.set!lnoj loopÂ«iiffciDIMpro)OCI. "'""*"Â· 
oncl user for wllod> lis tot. A rei<IM poth spt<ltlcoaon >MI be QlrTYif\ed 
ID, end â¢orod u â¢ ~poOh. RaloiM polho oto -ID be 
r- to tho projea dlttclofy. 
<1 _.,..-'L 
) 
~~~~ 
Figure 2-1. Including the eBay SDK path in your C# .NET project 
2. 
Include the necessary eBay SDK DLLs (typically eBay.SDK.dll and 
eBay.SDK.Integration.dll) in your project's references by right-clicking 
References in the Solution Explorer, selecting Browse, and adding the 
eBay SDK DLLs (see Figure 2-2). 

Understanding the Fundamentals of eBay Development 
Add 
I.O.llOO.O 
7.0.lJQO.O 
1.0.3300.0 
trMitt 
7.0.)300.0 
ll<IOftlllbolily 
7.0.3300.0 
EEDcRemotâ¢ 
l .O.JlOO.O 
IEHollt 
I.O.JJOO.O 
IIEHost 
I.O.lJOO.O 
JSymwroppor 
I.O.l3oo.o 
Managed câ¢ eomp~e< 
7.o.JJoo.o 
Moa1IODft VlJuol 84* .NET Ru .â¢â¢ 7.0.)300.0 
MlaOOoft.J~ 
7.0.3300.0 
Flit 
C:\WINDO~Â­
C:\PI"Ogram f~H 
â¢.. 
C:\WlNDOWS\MiaVtOit.HET\. â¢â¢ 
C:\WINDOWS\Mocrwoft.HET\. .. 
C:\P!ogtom -~-~ 
v â¢.. 
C:\WlNDOWS\MiaOOOft.NET\. .â¢ 
C:\W1NDOWS\114icn>oolt.HET\. â¢â¢ 
C:\W1NDOWS\II4icn>oolt.HET\. â¢â¢ 
C:\WINDOWS\MiaOOOft.HET\. .â¢ 
C:\WlNDOWS\MI<TOsoll.tiET\. â¢. 
C\WINDOWS\Moaoooii.HET\. .â¢ 
C:\WlNDOWSI,Miaooolt.tiET\... Y 
ISOurco 
arowoo ... 
OK 
~ I 
~ 
Figure 2-2. Including references to the eBay SDK DLLs in your C# .NET 
project 
3. 
Include the various components in each file where they'll be accessed 
with the C# using directive, like you see in Listing 2-1, which includes 
the necessary support for the eBay. SDK.API, eBay. SDK.Model, and 
eBay. SDK. Model. Item components. 
Listing 2-1. Including eBay SDK Components with C#'s using Directive 
1: using eBay.SDK.API; 
2: using eBay.SDK.Model; 
3: using eBay.SDK.Model.Item; 
Once you do this, you can declare instances of eBay SDK interfaces just as 
you would any other component. 
Using the eBay SDK in Perl Applications 
One of the great beauties of working in Perl these days is that it seems that with only 
a little typing, all things are possible. This is certainly true when it comes to using 
COM components such as those provided by the eBay SDK. With Perl's Wm32::0LE 
library, available for the Microsoft Wmdows platform under ActiveState's ActivePerl 
(at http: I !VMN. acti vestate. com/), using eBay SDK components is almost as easy 
from Perl as it is from a native Microsoft language like C# or Visual Basic. 
21 

Chapter2 
22 
TIP If you're developing your application on a platform other than Microsoft 
Windows, you can't use the eBay SDK directly because it was developed for 
Microsoft Windows. Instead, you should skim the rest of this chapter and the 
next few chapters to get a feel for how the eBay SDK abstracts the eBay API, 
and then read Chapters 7, 8, and 9 in detail to see how you can access the 
eBay API directly using PerL 
To begin with, you must first have installed ActivePerl, including the 
Wm32::0LE library, via the installer available from http: I /www. acti vestate. com/ 
Products/ActivePerl/. Once you do this, you must include the Win32::0LE library 
using Perl's use keyword with your other includes, as you see in Listing 2-2. 
Listing 2-2. Including the Win32::0LE Library 
1: use Win32::0LE; 
After that, conjuring up an eBay SDK component is as easy as using the 
library's new method and naming the desired component, as you can see from 
Listing 2-3. This works because the components within the eBay SDK are regis-
tered with the operating system for general use, so that the Win32::0LE module 
can find the underlying libraries. 
Listing 2-3. Creating an eBay SDK Component Using Win32::0LE 
1: $apiSession = Win32::0LE->new("eBay.SDK.API.ApiSession"); 
The resulting variable is a Perl object that has fields mapping to the compo-
nent's properties. Thus, you can configure a data model object by assigning its 
fields the appropriate values, and make an SDK call using the object's methods. 
To see this in detail, see "Validating a Test User in Perl" in the next section. 
NOTE 
If you're not familiar with Perl, the notion of a Perl object might be 
a little intimidating, especially if after reading the last paragraph you put the 
book down and did a bit of searching with Google for articles about Perl 
objects. Rest assured that you needn't concern yourself with the language 
semantics. At a high level, practitioners of languages such as C, C++, C#, or 
Java can pretend that a Perl object is something like a C++ object: a structure 
with associated fields and member functions. an reality, it's actually quite 
a bit more powerful and sophisticated than that, but I won't be taking advan-
tage of the features of object-oriented Perl to any great degree here.) 

Understanding the Fundamentals of eBay Development 
Your First Application Using the eBay SDK 
It's time to write your first application that uses eBay. This first application is 
very simple, almost deceptively so; all it does is take a test user and validate the 
account that is required for the test user to sell items in the eBay Sandbox. You 
will find that this application is handy to use, both because you need to have 
a way to have validated sellers to test your own application, and because it lets 
you get a feel for what it takes to begin testing your application in the eBay 
Sandbox and using the eBay SDK. 
Starting with the eBay Sandbox 
Before you can run your application against the eBay Sandbox for testing, you 
must have your developer ID, application ID, and certification ID that eBay 
assigned to you when you joined the eBay Developers Program. These are char-
acter strings that are best kept both electronically in a file on your development 
workstation and as printed backup in case you lose or change the file, because 
eBay must reissue these certificates in the event that you lose them. Together, 
these three IDs provide the keys you need to access the eBay Sandbox, where all 
of your application testing will take place with eBay data. The eBay Sandbox 
looks just like the eBayWeb interface real users use (see Figure 2-3). 
Developers Program 
Q]J (ooMOd '""" I 
Figure 2-3. The eBay Sandbox Web site 
23 

Chapter2 
24 
The other thing you need when testing your application are test users. Test 
users are accounts in the eBay Sandbox that play the part of real-world users of 
the eBay service, listing items for sale, bidding, buying, and leaving feedback. 
To add test users (you'll need at least two, because you can't bid on your own 
items), simply click the Register Now button on the first page of the Sandbox. 
You'll be met with a form that is identical to the form that users fill out when 
joining the real eBay service. 
When filling out the form, you must specify valid data, including for the 
e-mail address. It's imperative when specifying an e-mail address that you use 
a valid e-mail address that's unique to this test user, because eBay uses the 
e-mail address to validate the user. (This is even true for test users.) This e-mail 
address should go to a valid ISP, and not a free e-mail hosting service such as 
Yahoo! or Microsoft Hotmail. Figure 2-4 shows the new user registration form. 
TIP 
When you're first setting out with your application development, make 
a table of the names and e-mail addresses of buyers and sellers, and ask your 
system administrator to create e-mail accounts for each. Doing so will help 
you stay organized and eliminate making regular requests of your system 
administrator for just one more e-mail address for testing. 
Once you create a test user, you need to check your test user's e-mail account 
for instructions on how to verify your test user. This e-mail, similar to the one you 
see in Figure 2-5, includes a URL to a Web page you must load to finish your reg-
istration. 
The users you create in this manner can bid on items in the eBay Sandbox, 
but can't actually list items for auction. To sell items, users must be validated. In 
the production eBay environment, this means that the user has given eBay a valid 
credit card number. In the eBay Sandbox, however, you need only make a call to 
the eBay API interface ValidateTestUserRegistrationCall, available through the 
SDK with the class eBay. SDK.API. ValidateTestUserRegistrationCall. 

Understanding the Fundamentals of eBay Development 
lmpottanl: To compltlt rtglllrlt.., """ 1- tmool -. 
.. thll you c111 chtck ..,..edollely 
Â£mel1addreN 
solly@lolllone~tcom 
Re ... nter email addreH 
n!ly@ollllooen.c:.c.n 
'''""'your o8oy u- 10 
â¢ .ayooo 
........ p~e, ,.,...,.4t (Ool'lt .... you>" .,.,.4 -~Â·Â· 
'rctvt Y'M' 10 lid~ ...... P\1 to ott'~., â¢ht t,~t!M'I 
Creata pusword 
f ~~., '"'" ~ 
.. rn 
~ 
e MM'OOOf'd t 
! 8 ... ., f~ fOV to ~~.,..W. tNt hâ¢...,: f01 otf'> .... to 9""â¢UÂ· ~ 
Re-40Wf putWOrd 
Secret ~on 
Seer.1 an:.wer 
Wllat_is yout sc~rs mtscOI? 
y 
â¢"'I 
______. 
You ... be a~ 
1- It>â¢ an.- ta ,- ~~ 
q .. eâ¢L~ â¢f yao.~ ~-yaw ,.n.IIIOI'd 
DalAl ol_blnh 
SepSember v 
12 
eo....,., 
.., 
Yeâ¢r 19n 
Figure 2-4. The eBay Sandbox new user registration form 
25 

Chapter2 
26 
MESSAGE DISPLAY 
Back toiNBOXIRoplyl R.py oiiFO<WM!Ilogout
=----~~~---------1 
0.. . 7112J200l 14 08 09 POT 
From: "''I'~ 
com 
To: oorldy@lolhlonan com 
S..blect Open""'" ~Â· 
oBay regm-
f tho 1011< .- doot 001 -. typo on "' <091 ond poslo this loll< inlo your Wei> browoO< 
http //pagot ol>'f COmi"''I'IIOf 
Molle turo you copy lhlt link oxocUy ond do not odd '""" tpa<Ot 
y..,......,_codod 21605 
1 you nood oddtlioNI holp cO<Ud oBoy't Cutlomtr s..ppcwt by "11""11 ., or e- ond pottng th1t ink ... your Wob btowtO 
htlp l/pogos â¢ .- ol>'fc~_.,lone/N>dolchlml 
Copyng111 199>2003 oBay Inc AI R9olt Rot-
Dn911todll0dtm0fks ond btondtllotho~althoo '-',.."""""' 
Figure 2-5. The eBay verify user e-mail message 
Understanding the ValidateUser Sample Application 
The flow of the Validate User application is quite simple, but illustrates the neces-
sary sequence of events when using the eBay SDK. To use the eBay SDK, your 
application must 
1. 
Create an eBay. SDK. API.ApiSession object. This session object encap-
sulates the HTTPS and XML code responsible for exchanging messages 
with eBay servers via the eBay API. 
2. 
Set the session object's Url property to the URL for the eBay server. 
When testing your application, you use the URL for the eBay Sandbox, 
https://api.sandbox.ebay.com/ws/api.dll. 
3. 
Set the session's Developer property to the developer key you received 
when joining the eBay developer program. 
4. 
Set the session's Application property to the application key you 
received when joining the eBay developer program. 

Understanding the Fundamentals of eBay Development 
5. 
Set the session's Certificate property to the certificate key you received 
when joining the eBay developer program. 
6. 
Create any necessary eBay SDK model components and set their prop-
erties or access their methods. 
7. 
Create any necessary eBay SDK API components. 
8. For each eBay API component you created, set its ApiCallSession prop-
erty to the session object you created in step 1. 
9. 
For each eBay API component you created, invoke its method and 
examine the results. 
The Validate User application follows this flow, first creating and ini-
tializing an eBay.SDK.API.ApiSession object, and then using it with an 
eBay. SDK.API. ValidateTestUserRegistrationCall call to validate the test 
user you specify. 
Figure 2-6 shows the application in action, using eBay keys fetched from 
a configuration file, ebayrc, in the same directory as the application. (If you don't 
place your eBay keys in the ebayrc file, the application will prompt you for each 
of the keys in turn.) 
Figure 2-6. The eBay Validate User application 
NOTE 
Unix aficionados will recognize the ebayrc file as a bastardized version 
of their favorite configuration mechanism, the dotfile (so called because it 
usually begins with a single period to hide it from normal directory listings). 
By using such a simple configuration mechanism, you avoid the need to 
retype keys for each user you must validate, while still keeping the sample 
application in both C# and Perl simple. You might want to store the keys as 
entries in the Microsoft Windows registry; by all means, go ahead! You can 
obtain the source code for this-and all other examples-at the Apress Web 
site at http: //W'IM. a press. com/, and change it to your heart's content. 
27 

Chapter2 
28 
Validating a Test User in C# 
The Validate User application has three broad sections in a single class, 
ValidateUser. The first section at the beginning sets up the necessary 
ApiSession object. The second section obtains the eBay keys and the desired 
test user name and password. The final section creates and uses an instance 
of eBay. SDK.API. ValidateTestUserRegistrationCall to validate the user you 
specify in the second step. Listing 2-4 shows ValidateUser.cs. 
Listing 2-4. The Validate User Application in C# 
1: II Dependencies 
2: using System; 
3: using System.IO; 
4: using eBay.SDK.API; 
5: 
6: 
7: 
8: 
9: 
10: 
11: 
12: 
13: 
14: 
15: 
16: 
17: 
18: 
19: 
20: 
21: 
22: 
23: 
24: 
25: 
26: 
27: 
28: 
29: 
30: 
31: 
32: 
namespace ValidateUser 
{ 
class ValidateUser 
{ 
private static string deviD; 
private static string appiD; 
private static string crtiD; 
static void Main(string[] args) 
{ 
IApiSession apiSession; 
ValidateTestUserRegistrationCall api; 
II Create ApiSession object. 
Console.Write( "Creating eBay.SDK.API.ApiSession " ); 
Console.Writeline( "object â¢â¢â¢ " ); 
apiSession = new ApiSession (); 
apiSession.LogCallXml = true; 
apiSession.Url = "https: //a pi. sandbox.ebay .comlwslapi.dll"; 
II Get the eBay keys. 
getKeys (); 
apiSession.Developer = deviD; 
apiSession.Application = appiD; 
apiSession.Certificate = crtiD; 

Understanding the Fundamentals of eBay Development 
33: 
// Find out which account we should validate. 
34: 
Console.Write( "Enter eBay User ID of " ); 
35: 
Console.Write( "the seller account: "); 
36: 
apiSession.RequestUserid = Console.ReadLine(); 
37: 
38: 
Console.Write( "Enter password to the " ); 
39: 
Console. Write ( "seller account: " ) ; 
40: 
apiSession.RequestPassword = Console.ReadLine(); 
41: 
42: 
// Create the API request. 
43: 
Console.Write( "Creating " ); 
44: 
Console.Write( "eBay.SDK.API." ); 
45: 
Console.Write( "ValidateTestUserRegistrationCall "); 
46: 
Console.WriteLine( "object ... " ); 
47: 
api = new ValidateTestUserRegistrationCall(); 
48: 
api.ErrorLevel = 
49: 
ErrorlevelEnum.BothShortAndlongErrorStrings; 
so: 
api.ApiCallSession = apiSession; 
51: 
52: 
// Issue the call. 
53: 
Console. Write( "Issuing ValidateTestUserRegistration() "); 
54: 
Console.Writeline( "call â¢â¢â¢ " ); 
55: 
try 
56: 
{ 
57: 
api.ValidateTestUserRegistration(); 
58: 
Console.Write( "Congratulations! " ); 
59: 
Console.Write( "The user has been validated " ); 
60: 
Console.Writeline( "successfully!" ); 
61: 
} 
62: 
catch( Exception e ) 
63: 
{ 
64: 
Console.Write( "**Error**: " ); 
65: 
Console.Write( e.Message ); 
66: 
} 
67: 
// Linger until the user dismisses the app. 
68: 
Console.Readline (); 
69: 
} 
70: 
71: 
// 
72: 
// Fetches the eBay developer keys from either 
73: 
// a dotfile or from the input line if the dotfile 
74: 
// isn't available. 
75: 
II 
29 

Chapter2 
30 
76: 
77: 
78: 
79: 
80: 
81: 
82: 
83: 
84: 
85: 
86: 
87: 
88: 
89: 
90: 
91: 
92: 
93: 
94: 
95: 
96: 
97: 
98: 
99: 
100: 
101: 
102: 
103: 
104: 
} 
105: } 
static void getKeys( 
{ 
} 
FileStream stream; 
StreamReader streamreader; 
String keystring; 
String [] keys; 
Char [] eol = {'\n'}; 
try 
{ 
} 
stream = 
new FileStream( "ebayrc", System.IO.FileMode.Open ); 
streamreader = new StreamReader( stream ); 
keystring = streamreader.ReadToEnd(); 
keys = keystring.Split( eol ); 
deviD = keys[o].Trim(); 
appiD = keys[1].Trim(); 
crtiD = keys[2].Trim(); 
catch 
{ 
} 
Console.Write( "Enter API Developer Id: " ); 
deviD = Console.Readline(); 
Console.Write( "Enter API Application Id: " ); 
appiD = Console.Readline(); 
Console.Write( "Enter API Certificate: " ); 
crtiD = Console.Readline(); 
Lines 1--4 indicate the namespaces used by the Validate User application. The 
application uses classes from .NET's System namespace (most significantly, the 
Console class for 1/0), the System. IO namespace (the File Stream and FileReader 
classes), and the eBay.SDK.API namespace, for access to eBay SDK components. 
On line 7, the entire application is encapsulated in its own namespace, the 
ValidateUser namespace. While this is overkill for such a simple example, it's 
good practice, and the Visual C# .NET application wizard provides the name-
space anyway. The application itself consists of a single class, ValidateUser, 
which has two methods: Main (lines 1~9), the entry point for the application, 
and getKeys (lines 76-103), which obtains your eBay keys from either the ebayrc 
file or from the console. 
On lines 17-18, the Main method declares two local variables: apiSession, 
which contains an instance of IApiSession the application uses to communicate 

Understanding the Fundamentals of eBay Development 
with the eBay service; and api, which contains the actual eBay SDK component 
that validates the user, a ValidateTestUserRegistrationCall instance. Line 23 cre-
ates the apiSession object, while the following two lines initialize its LogCallXml 
and Url properties. The LogCallXml property, as you will see in the next chapter, 
lets you perform some handy debugging by dumping the underlying XML behind 
a session transaction to a file so you can see what the eBay SDK is making of an 
application request. The Url property, on the other hand, must point to the URL 
of the eBay service the application will use. The URL you see here on line 25 is 
the URL for the Sandbox. 
Lines 28-31 use the class function getKeys to determine the keys necessary 
to access the Sandbox, and set the apiSession's Developer, Application, and 
Certificate properties appropriately. (I discuss the get Keys function later in this 
section.) 
The next chunk of code (lines 33-40) is the application's user interface: two 
humble console input lines, prompting you for the test user to activate. The 
apiSession needs both the test user's account name (line 36) and password (line 40) 
in order to issue a successful request. 
Line 47 creates an instance of the ValidateTestUserRegistrationCall, the 
eBay SDK class that encapsulates the eBay API logic to validate a test user, and 
stores it in the variable a pi. Line 48 sets its Error level property to report verbose 
errors; the enumeration ErrorLevelEnum has two values, OnlyShortErrorStrings 
and BothShortAndLongErrorStrings. The eBay SDK reports errors to you as C# 
exceptions, and you can use the Exception class's Message property to obtain the 
text of an error reported by the SDK. 
Lines 55-66 use the api object to actually make the eBay API call 
ValidateTestUserRegistration. You wrap the actual API invocation on line 57 with 
a C# try I catch block to differentiate between success and failure. On success, 
the eBay SDK executes the necessary HTTPS transaction to validate your test 
user on line 57 and then prints the success message on lines 58-60; if anything 
goes awry, the eBay SDK generates an exception, and the catch block on lines 
62-66 prints the contents of the exception's Message property so you know what 
went wrong. 
The utility method getKeys, spanning lines 76-103, attempts to read the 
three eBay keys from the file named ebayrc in the current directory. It does this 
by assuming that the file exists and opening it as a .NET System. IO. FileStream 
on lines 85-86. If this succeeds, the function uses the System. IO. StreamReader 
instance created on line 87 to read the entire file into a string, keystring, on 
line 88. The function expects the keys to appear in the file separated by line 
breaks, like so: 
1: developer-key 
2: application-key 
3: certificate-key 
31 

Chapter2 
32 
so the function splits the string keystring by end-of-line characters on line 89. 
Finally, lines 90-92 set the class variables deviD, appiD, and crtiD to the first three 
lines of the file, respectively, trimming any white space. 
In the event that any of this fails-typically because there's no ebayrc file 
in the first place-none of this will work. As a result, the file management logic 
is wrapped in an error-catching try block, and on any failure, the code on 
lines 96-101 gets executed instead, prompting you for the three eBay keys 
from the console. 
Validating a Test User in Perl 
like the C# version ofValidateUser, the Perl version ofValidateUser has three 
broad sections: a brief section at the beginning that creates the ApiSession 
object, the necessary file system or user input to obtain the eBay keys and the 
desired test user name and password, and the actual creation and use of the 
eBay. SDK.API. ValidateTestUserRegistrationCall object to validate the test user. 
Listing 2-5 shows the Validate User application listing in Perl. 
Listing 2-5. The ValidateUser Application in Perl 
1: use Win32::0LE; 
2: sub getKeys; 
3: 
4: # Create ApiSession Object. 
s: print "Creating eBay .SDK.API.ApiSession object ... \n"; 
6: $apiSession = Win32: :OLE->new{"eBay.SDK.API.ApiSession"); 
7: $apiSession->{'LogCallXml'} =True; 
8: $apiSession->{'Url'} = 
9: 
"https: //api.sandbox.ebay .com/ws/api.dll"; 
10: 
11: # Get the eBay keys. 
12: ( $apiSession->{'Developer'}, 
13: 
$apiSession->{'Application'}, 
14: 
$apiSession->{'Certificate'} ) = getKeys(); 
15: 
16: # Find out which account we should validate. 
17: print "Enter eBay User ID of the seller account: "; 
18: chomp{$input = <>); 
19: $apiSession->{'RequestUserid'} = $input; 
20: 
21: print "Enter password to the seller account: "; 
22: chomp{$input = <>); 
23: $apiSession->{'RequestPassword'} = $input; 
24: 

Understanding the Fundamentals of eBay Development 
25: # Create the API request. 
26: print "Creating "; 
27: print "eBay. SDK.API. ValidateTestUserRegistrationCall "; 
28: print "object ... \n"; 
29: $api = Win32::0LE->new( 
30: 
"eBay.SDK.API.ValidateTestUserRegistrationCall"); 
31: $api->{'ApiCall'}->{'ErrorLevel'} = 1; 
32: 
33: # Perl doesn't seem to know how to query multiple interfaces 
34: # so we have to use the ApiCal! property of the api. 
35: # $api->{'ApiCallSession'} = $apiSession; 
36: $api->{'ApiCall'}->{'ApiCallSession'} = $apiSession; 
37: 
38: # Issue the call. 
39: print "Issuing ValidateTestUserRegistration() call ... \n"; 
40: $api->ValidateTestUserRegistration(); 
41: $result= Win32::0LE->LastError(); 
42: 
43: # Show the results. 
44: if($result) 
45: { 
46: 
print "**Error**: $resultl\n"; 
47: } 
48: else 
49: { 
so: 
print "Congratulations! "; 
51: 
print "The user has been validated successfully !\n"; 
52: } 
53: print "\n"; 
54: 
55: # Fetches the eBay developer keys from either 
56: # a dotfile or from the input line if the dotfile 
57: # isn't availalble. 
58: sub getKeys 
59: { 
60: 
# Try to open the file. 
61: 
open( IDS, "ebayrc" ) or $ttyinput = 1; 
62: 
63: 
# If the open failed prompt the user for each key. 
64: 
if ( $ttyinput ) 
65: 
{ 
66: 
print "Enter API Developer Id: "; 
67: 
chomp($input = <>); 
68: 
$devid = $input; 
69: 
33 

Chapter2 
34 
70: 
print "Enter API Application Id: "; 
71: 
chomp($input = <>); 
72: 
$appid = $input; 
73: 
74: 
print "Enter API Certificate: "; 
75: 
chomp($input = <>); 
76: 
$crtid = $input; 
77: 
} 
78: 
else 
79: 
{ 
80: 
# Read them from the file. 
81: 
82: 
83: 
84: 
85: 
86: 
87: 
88: 
89: 
90: 
91: 
92: 
93: 
94: 
95: 
96: 
97: } 
} 
# The file should have the keys in the order 
# developer id 
# application id 
# certificate id 
$line = o; 
while ( <IDS> ) 
{ 
} 
chomp( $_ ); 
$devid = $_ if $line == o; 
$appid = $_ if $line == 1; 
$crtid = $_ if $line == 2; 
$line++; 
# return a list with the keys 
return ( $devid, $appid, $crtid ); 
lines l-2 are the bookkeeping the script needs to continue, first ensuring 
that the Wm32::0LE library will be loaded, and then providing a forward declara-
tion for the get Keys function, which simply loads the eBay keys from either the 
ebayrc file or the command line if the file doesn't exist in the current directory. 
lines 4-9 create the eBay. SDK.API.ApiSession object the application needs to 
communicate with the eBay service. On line 4, the variable $apiSession is given 
the new object created by the Win32: :OLE->new function. The application sets the 
resulting ApiSession object's LogCallXml and Url fields on lines 7-8. (Newcomers 
to Perl should note that the syntax you see on line 7-and elsewhere when you 
set an object's property-in which the object's property name is in bracketed 
single quotes is how you access an object's field.) The LogCallXml property, which 
I discuss in the next chapter, lets you create a log file for debugging that you can 
examine if you need to see the resulting XML exchanged between your applica-
tion and the eBay service. The Ur 1 field must contain the URL of the server at 
eBay your application should interact with. 

Understanding the Fundamentals of eBay Development 
CAUTION 
The code I show in this section does very little by way of either error 
handling or debugging, because I want to show you how to use the eBay SDK 
in its simplest terms. As you will see in the following chapter, you never want 
to begin using the results of creating new eBay SDK components willy-nilly 
without ensuring that they exist! If allocation of an eBay SDK component fails 
without error checking, your application will come to a screeching (and 
embarrassing) halt when it tries to use the component later on. 
Lines 10-14 use the getKeys() utility function (which is defined at the end of 
this program) to determine the developer, application, and certificate eBay keys 
from either the input line or the ebayrc file. If you're not used to Perl, the syntax 
of this statement may be a bit confusing. In Perl, you can perform multiple vari-
able assignments by placing the variable names in a list on the right-hand side 
of the expression, and the values in the left-hand side, like this: 
1: ( $e, $pi, $minus_one ) = ( 2.71828, 3.14159, -1.0 ); 
Because get Keys returns a list of the three keys, this statement simply assigns 
each key to the appropriate property of the $apiSession object. 
lines 16-23 comprise the user interface for the application. lines 17- 19 prompt 
for and accept your input of the seller account name, while lines 21-23 do the same 
for the seller account's password. Perl denotes a file handle as a variable (typically 
uppercase) between angle brackets; the expression 
1: $variable = <>; 
simply assigns the value of the line you enter to the variable $variable. The chomp 
function removes the trailing carriage return and linefeed from its argument and 
replaces its argument with the truncated string, so that on line 19 the RequestUserid 
property of $apiSession is set to the text you enter without the trailing carriage return 
and linefeed. Similarly, on line 23 the RequestPassword property of $apiSession is set 
to the password you enter. 
Lines 24-30 create another SDK object the application needs to actually vali-
date the test user, the eBay.SDK eBay. SDK. API. ValidateTestUserRegistrationCall 
object the application needs to actually validate the test user. line 31 sets the desired 
error reporting level for the API call to show both short and long error strings so 
that in the event of the eBay SDK reporting an error you have some idea what went 
wrong. (This value is the same as the eBay SDK .NET's notion of the ErrorLevelEnum.) 
Lines 33-36 are an outright hack; the Perl object hierarchy usingWin32::0LE 
doesn't like the notion of setting the ApiCallSession property directly, so instead 
you set it indirectly, using a documented trick provided by the eBay SDK. In 
a perfect world, you could perform the assignment shown in the comment on 
35 

Chapter2 
36 
line 35, but things being what they are, the code on line 36 does the trick. Regardless, 
the purpose of this assignment is to tell the newly created $api what session it 
should use when carrying out its eBay API request. 
Unes 38-40 make the eBay ValidateTestUserRegistration API call using the 
$api object over the $apiSession. This is the syntax for invoking any eBay API call: 
Create an appropriate eBay SDK API object, initialize it with the API's arguments 
and the previously allocated ApiCallSession to use, and then invoke the object's 
API method by the same name as the eBay SDK API method. 
NOTE 
To auoid confusion, all the names of the classes in the eBay. SDK.API 
names pace that correspond to eBay API calls end with the word Call. 
Unes 41-53 constitute the application's error handling; they simply test the 
result of calling Win32: :OLE->LastError() to determine the last error encountered by 
the Wm32::0LE library. If the library reports an error, the resulting string (usually 
generated by the eBay SDK) will contain information about the error. Otherwise, 
a simple message indicating success is printed on lines 49-53. 
The remainder of the listing on lines 55-97 are a friendly hunk of Perl that 
simply tries to load your eBay keys from the file ebayrc, or, if the file doesn't exist, 
prompts you to enter them on the keyboard instead. Given the rather cryptic 
nature of the keys, it doesn't make sense to make you enter them by hand each 
time you run the application, so instead you can place them in the text file. Line 
58 defines the function using the Perl keyword sub and the function name 
get Keys; the function block itself is on lines 59-97. 
This function takes no arguments, and returns a list of three arguments: the 
eBay developer key, the eBay application key, and the eBay certificate key. The 
function begins on line 61 by trying to open the file named ebayrc and assigning 
the open file descriptor to the Perl file descriptor IDS. If the attempt to open the 
file fails, the local variable $ttyinput is set to 1, indicating that the function should 
prompt the user for the keys. Line 64 tests this flag, either prompting the user for 
each key (lines 65-77) using the print-chomp <>-assignment logic you saw previ-
ously on lines 17-23, or read each line from the configuration file on lines 79-93. 
The logic on lines 79-93 is simple, even if the syntax is new to you. For each 
line in the file read from the descriptor IDS, Perl stores the line in the temporary 
variable $ _. After reading the line, the script strips off the termination character 
(line 88), and then based on which line it's currently reading (lines 89-91) inter-
prets the line as either the developer key, the application key, or the certificate 
key. Finally, the routine increments the line counter on line 92. The loop, which 
began on line 86, ends when the file contains no more lines to read. Consistent 
with the remainder of this example, there's little or no error checking. 
Once the function has collected the three keys from either the console input 
or the file, it returns them as a list on line 96. 

Understanding the Fundamentals of eBay Development 
Key Points 
In this chapter, you learned the following important points about the eBay SDK: 
â¢ The life cycle of an auction on eBay consists of the initial item listing, item 
viewing by potential buyers, bidding by potential buyers, the close of the 
auction, the settling of the auction transaction, and after-auction activities 
including the acceptance of payment, shipment of the item, and settling 
of auction fees with eBay. 
â¢ The eBay platform supports several kinds of auctions, including the tradi-
tional notion of an auction with a single item (the Chinese auction), an 
auction with multiple items won by multiple bidders (the Dutch auction), 
and Ad-Type and Stores Fixed-Price auctions. 
â¢ The eBay SDK consists of two discrete kinds of classes and interfaces: 
those pertaining to the eBay data model, in the eBay. SDK. Model name-
space; and those pertaining to the eBay API, in the eBay. SDK. API 
namespace. 
â¢ The eBay SDK provides a Microsoft .NET assembly for you to use when 
using Microsoft .NET languages including C# and VB .NET. 
â¢ The eBay SDK provides Microsoft COM components for you to use with 
other languages that support Microsoft COM, such as Perl or PHP. For 
example, when using Perl, you can create an object from the eBay SDK 
using the Win32::0LE library and its new function. 
â¢ Before you can test your application, you must obtain developer, applica-
tion, and certificate keys from the eBay developer Web site. 
â¢ Before you can test your application, you must create test users within the 
eBay Sandbox, a configuration of eBay servers that simulates real users 
and auctions. 
â¢ Each test user in the eBay Sandbox must have its own unique e-mail address. 
â¢ For a test user in the eBay Sandbox to be able to list items for auction, it must 
first be validated using the eBay API's ValidateTestUserRegistration function, 
also available via the eBay SDK eBay. SDK. API. ValidateTestUserRegistrationCall 
Â·class. 
37 

CHAPTER 3 
Introducing the 
eBay SDK 
IN THE LAST CHAPTER, I took you on a whirlwind tour of the eBay SDK. You saw 
how the eBay SDK was divided into two sections: the data model representing 
abstractions of key data types used in eBay's business logic, and the API section 
encapsulating eBay API calls. You saw how your application accesses the Sandbox, 
and even explored your first eBay application using the Sandbox. 
In this chapter, you build on that knowledge, getting the formal background 
on how the parts of the eBay SDK fit together, and which parts you need to use 
to craft specific bits of functionality for your application. I begin by giving you 
a detailed walkthrough of the eBay data model, building on the eBay-specific 
terminology you learned in the last chapter. You then see the API section of the 
eBay SDK in the same detail, and find out what happens under the hood when 
you use a member of the eBay SDK's API namespace. Finally, I conclude the 
chapter with another sample application that lets you explore eBay's tens of 
thousands of categories, a valuable tool you can use when crafting your own 
applications that lets users list items for sale on eBay. 
Examining the eBay SDK Data Model 
A key component of the eBay SDK is its data model-the interfaces and classes 
that encapsulate objects pertaining to everyday concepts in the world of eBay 
business. The data model includes fundamental objects representing accounts, 
feedback, items, sales, and users, along with a slew of other kinds of data your 
application can manipulate when working with the eBay service. 
These objects are first-class citizens in the API, with their own methods 
and properties, just like the elements of the eBay. SDK. API namespace such as 
the eBay. SDK.API. ValidateTestUserRegistrationCall object you encountered in 
Chapter 2. By using these objects, you can avoid creating data structures or 
classes that encapsulate the same data as these do when using the eBay SDK. 
All of these objects include useful utility methods that stem from the Object 
class in the .NET Framework, including the following: 
39 

Chapter3 
40 
â¢ The Equals method lets you test two objects for equivalency. 
â¢ The GetHashCode method lets you get a unique hash code for an object. 
â¢ The GetType method returns the item's type as a type object. 
â¢ The Finalize method performs necessary cleanup when the application is 
done using the object. 
â¢ The ToString method returns a String instance that describes the contents 
of the object. 
These .NET-specific methods are not accessible from SDK COM components 
and Java packages. 
Let's take a closer look at each of the namespaces that contain data model 
objects to see how they're organized. 
Inside the eBay.SDK.Model Namespace 
The eBay. SDK. Model namespace is a grab bag for data models that don't necessar-
ily fit into one of the other namespaces. This namespace contains classes that 
represent eBay bids, postal addresses, and so on. Members of this namespace 
include the following: 
â¢ The AccessR1:rle class, available via the IAccessRule interface, represents 
a single access rule to a specific API. 
â¢ The Address class, available via !Address, encapsulates contact details such 
as one associated with a user. 
â¢ The API Exception class, accessed via the !API Exception interface, which 
inherits from the .NET Exception class, represents a software exception. 
You will frequently use its Message property to get a text message describ-
ing the extension. 
â¢ The Bid class, accessed via the IBid interface, represents a buyer's bid to 
purchase an item. 
â¢ The BidCollection class, accessed via the IBidCollection interface, repre-
sents a collection of bids using Bid objects. To see how collections work, 
see the section "Managing Collections of Data Model Objects" later in 
this chapter. 

Introducing the eBay SDK 
â¢ The Category class represents a category on the eBay service, accessed via 
the !Category interface. You will encounter categories in detail in the section 
"Viewing eBay Categories: A Sample Application'' at the end of this chapter. 
â¢ The CategoryCollection class, manipulated using the ICategoryCollection 
interface, represents a set of categories. 
â¢ The CountryHelper class provides a set of helper methods you use when 
converting between country names and two-character country codes such 
as de (Germany). 
â¢ The CustomCategory class, accessed via the ICustomCategory interface, repre-
sents a user-defined category. 
â¢ The CustomCategoryCollection class, accessed via the ICustomCategoryCollection 
interface, represents a collection of Customeategory instances. 
â¢ The listingDesigner class, accessed via the IlistingDesigner interface, rep-
resents a custom listing format on the eBay service's Web site. 
â¢ The Logolnfo class, accessed via the Ilogolnfo interface, encapsulates the 
return value from the eBay.SDK.API.GetlogoURLCall.GetlogoURL method, 
which returns a String containing the URL to the eBay logo that you can 
display in your application. 
â¢ The SellerEvent class, accessed via the ISellerEvent interface, encapsu-
lates a record of the sales activities of an item up for auction. 
â¢ The StringCollection class, accessed via the IStringCollection interface, 
provides a collection of String instances. 
â¢ The Timeleft class, accessed via the ITimeleft interface, represents an 
arbitrary time interval in days, hours, minutes, and seconds, used for 
things like noting how long until an auction closes. 
â¢ The UUid class, accessed via the IUuid interface, represents a unique ID 
used by the eBay interfaces when performing item additions to avoid 
repeatedly adding the same item. 
You will encounter examples with these objects throughout this and the next 
three chapters. 
41 

Chapter3 
42 
Inside the eBay.SDK.Model.Account Namespace 
The eBay. SDK.Model.Account namespace contains classes that represent 
managing an eBay seller account. The core element of this namespace, the 
eBay. SDK.Model.Account.Account class, represents a seller account and provides 
a property, Activities, that contains a record of each account transaction that 
occurs for that account. The eBay. SDK. Model. Account namespace has the fol-
lowing additional classes: 
â¢ The AccountActivity class encapsulates a specific account transaction, 
representing it with properties including Balance, containing the balance 
as of a specific transaction; Credit and Debit, which indicate whether the 
transaction incurred a credit or a debit; and Id, which contains the unique 
ID of the specific AccountActivity within the eBay service. You use the 
AccountActivity class via the IAccountActivity interface. 
â¢ The AccountActivityCollection class lets you manage collections of 
AccountActivity objects. You use the AccountActivityCollection class via 
the IAccountActivityCollection class. 
â¢ The AccountinvoiceView class represents an account invoice with the prop-
erties EmailAddress, containing the e-mail to which invoices are sent; 
InvoiceBalance, the balance of the account when the invoice was gener-
ated; and InvoiceDate, the date at which the invoice was generated in 
Greenwich mean time (GMT). You use this class via the IAccountinvoiceView 
class. 
â¢ The AccountPaymentMethodimpl class represents how an account holder pays 
an account via its Type property; this property indicates the type of the 
payment using AccountPaymentEnum, which indicates how the account is 
paid. This class also includes properties such as CreditCard, which contain 
the actual account number of the payment method. You use this class via 
the IAccountPaymentMethod interface. 
â¢ The AccountPeriodView class represents a view into account activity over 
a specific billing period. Properties such as State (described by the 
AccountStateEnum),CurrentBalance, LastinvoiceAmount, PaymentMethod,and 
LastAmountPaid make this object resemble an account summary you'd 
receive from your favorite credit card company. You use this class via the 
IAccountPeriodView interface. 

Introducing the eBay SDK 
â¢ The Addi tionalAccount class contains the balance and ID of an account 
related to a principal Account instance for a user. You use this class via the 
IAdditionalAccount interface. The AdditionalAccount nodes represent histor-
ical data related to accounts that the user held with a country of residency 
other than the current one. eBay users can have one active account. 
â¢ The AdditionalAccountCollection represents a collection of AdditionalAccount 
objects. You use this class via the IAdditionalAccountCollection interface. 
â¢ The Credi tCardimpl class represents the properties of a credit card used for 
payment, including its account number and expiration date. You use this 
class via the ICreditCard class. 
â¢ The DateRangeimpl class implants a range between two dates (date and 
time), denoted by its BeginDate and EndDate properties. You use this class 
via the IDateRange class. 
â¢ The DirectDebitimpl class represents a direct deposit payment method. 
â¢ The EBayDirectPay class represents a payment made to eBay via a direct 
payment such as a check or money order. You use this class via the 
IEBayDirectPay interface. 
â¢ The InvoiceViewSettings class represents the settings that you can apply to 
an Account!nvoiceView class via its InvoiceMonth and Invoice Year properties. 
You use this class via the IInvoiceViewSettings interface. 
â¢ The PeriodViewSettings class represents the settings that you can apply to 
an AccountPeriodView class via its DateRange and ViewRecord properties. You 
use this class via the IPeriodViewSettings class and the helper enumera-
tion PeriodViewRangeEnum, which lets you define the range for a period 
view's settings. 
NOTE 
When working with dates provided by eBay, bear in mind that all 
dates returned by eBay are in Greenwich mean time. You'll need to convert 
those to the time zone where your application is running! 
You will see more about using these in Chapter 4. 
43 

Chapter3 
44 
CAUTION 
Don't confuse the eBay notion of an account with the notion 
of a user account. While eBay users have accounts in the Web sense, in the 
parlance of the eBay SDK, an account is the entity that tracks transactions, 
like your checking account, and you manipulate it using the classes in the 
eBay. SDK. Model. Account names pace. All of the stuff pertaining to a user 
is referred to by the name user, and you can find its functionality in the 
eBay. SDK. Model. User names pace. 
Inside the eBay.SDK.Model.Attributes.Motors and 
eBay.SDK.Model.Attributes Namespaces 
A relatively new addition to the eBay service is the eBay Motors service, where 
you can list and sell your car, motorcycle, or boat to interested buyers, or find 
the dream vehicle you've been looking for. Its use and cost structure is similar to 
that of eBay, but given the very nature of the merchandise, it's a separate service, 
and the SDK has additional support for it. 
The eBay. SDK. Model. Attributes. Motors namespace contains the bulk of this 
support, which has the following classes and interfaces: 
â¢ The Car class, accessed via the !Car interface, represents a car for sale, 
inheriting from eBay. SDK. Model. Attributes. Motors. Vehicle. 
â¢ The CarOptions class, accessed via the ICarOptions interface, represents the 
options a specific car may have, such as a cassette player, CD player, and 
whether or not the car is a convertible. 
â¢ The CarPowerOptions class, accessed via the ICarPowerOptions interface, 
describes the common powered control options a vehicle may have via its 
properties including AirConditioning, CruiseControl, and PowerSeats. 
â¢ The CarSafetyFeatures class, accessed via the ICarSafetyFeatures interface, 
describes safety features for a vehicle including whether or not it has 
antilock brakes, a driver-side airbag, or a passenger-side airbag, indicated 
by an enumeration. 
â¢ The Motorcycle class, accessed via the !Motorcycle interface, represents 
a motorcycle for sale. The Motorcycle class is a subclass of the Vehicle class. 
â¢ The Vehicle class, accessed via the !Vehicle interface, represents features 
to all vehicles, including cars, motorcycles, and boats. 

Introducing the eBay SDK 
The eBay. SDK. Model. Attributes namespace contains the Attributes class, 
responsible for maintaining a motor item and the notion of whether it's a car or 
a motorcycle. 
Inside the eBay.SDK.Model.Feedback Namespace 
The eBay. SDK. Model. Feedback namespace contains the classes and interfaces that 
represent the feedback that buyers and sellers leave for each other. The notion of 
feedback is an important one in the eBay service, because it provides all users 
with peer-based accountability and a measurement of buyer and seller reliabil-
ity. This namespace contains the following classes: 
â¢ The Feedback class and its !Feedback interface encapsulate a single feed-
back item for a user. 
â¢ The FeedbackCollection class and its IFeedbackCollection interface repre-
sent a collection of Feedback objects. 
You will see more about using these in Chapter 4. 
Inside the eBay.SDK.Model.Item Namespace 
The eBay. SDK. Model. Item namespace, like its siblings the eBay. SDK. Model. Account 
and eBay. SDK. Model. User namespaces, contain fundamental elements you'll use 
when interacting with the eBay SDK for listing and searching for items. This 
namespace contains the following classes: 
â¢ The Fees class and its I Fees interface represent the fees a user is charged 
when listing an item on eBay for sale, or the fees associated with a com-
pleted auction. 
â¢ The Gi ftSettings class and its IGi ftSettings interface represent the buyer's 
choices for how a purchase is presented to the recipient when purchasing 
an item through an eBay store. 
â¢ The Item class and its !Item interface are at the heart of eBay's representa-
tion of items that are traded in eBay auctions. These classes encapsulate 
the description, bid status, and other information about an item for auc-
tion through its properties. 
â¢ The ItemCollection class and its IItemCollection represent a collection of 
Item instances. 
45 

Chapter3 
46 
â¢ The ItemFound class and its IItemFound interface represent an item found by 
searching the eBay service for items. 
â¢ The ItemFoundCollection class and its IItemFoundCollection interface repre-
sent a collection of ItemFound objects. 
â¢ The ItemS tat us class and its IItemStatus interface provide specific infor-
mation about an item for auction, such as whether it's an adult -oriented 
item, whether the reserve is met, and so forth. 
â¢ The ListingFeatures class and its IListingFeatures interface provide 
details about the appearance of an item's listing, such as typesetting 
options on the item's Web page on the eBay service. You can serialize 
a ListingFeatures object using the ListingFeaturesSerializer class and 
its IListingFeaturesSerializer interface. 
â¢ The PaymentTerms class and its IPaymentTerms interface represent how 
a buyer may pay for an item listed for auction. You can serialize 
a Payment Terms object using the PaymentTermsSerializer class and its 
IPaymentTermsSerializerinterface. 
â¢ The ShippingRegions class and its IShippingRegions interface represent 
which regions (continents) a user will ship a specific item to. It's organized 
as a set of Boolean properties naming specific regions. You can serialize 
a ShippingRegions object using the ShippingRegionsSerializer and its 
IShippingRegionsSerializerinterface. 
â¢ The ShippingSettings class and its IShippingSettings interface represent 
how the seller will ship an item and to where the item can be shipped 
(using a ShippingRegions object), along with whether the buyer or the 
seller will pay shipping charges. 
You will see how many classes and interfaces in this namespace are used in 
ChapterS. 
Inside the eBay.SDK.Model.Sale Namespace 
The eBay.SDK.Model.Sale namespace contains the classes and interfaces that 
represent an actual item sale (and not the listing, which is managed through the 
classes in the eBay. SDK. Model. Item namespace). This namespace contains the 
following: 

Introducing the eBay SDK 
â¢ The CheckoutData class and its ICheckoutData interface provide a container 
for the details of the checkout session that occurs as buyer and seller settle 
an auction by items and sales. 
â¢ The CheckoutDetailsData class and its ICheckoutDetailsData interface pro-
vide a container for fine-grained details about a checkout transaction, 
such as additional shipping costs or the seller's return policy and special 
instructions. 
â¢ The CheckoutStatusData class and its ICheckoutStatusData interface provide 
a container for the current state of the checkout process. 
â¢ The Sale class and its !Sale interface provide the representation of an actual 
item sale on the eBay service. These classes contain properties that let you 
determine the nature of a sale, including the amount paid, current price, 
and number of items purchased. 
â¢ The SaleCollection class and its ISaleCollection interface provide a con-
tainer for collections of Sale objects. 
You will see how to use the members of this namespace in Chapter 5. 
Inside the eBay.SDK.Model.User Namespace 
The eBay. SDK. Model. User namespace contains everything needed to represent 
a user of the eBay service. Both buyers and sellers are users, although only those 
users that sell items have accounts (which track the money they owe eBay for the 
use of its auction services). Of course, the User class and its !User interface are at 
the heart of this names pace, but it also contains a few other classes: 
â¢ The Schedulinglimit class and its ISchedulinglimit interface represent the 
maximum number of Item listings a user may schedule, and how long in 
advance an item can be scheduled. 
â¢ The User class and its !User interface represent everything that makes up 
an eBay user, including her e-mail address, cumulative feedback score, 
registration time and date, unique ID, and so forth. Many of its properties 
are instances of other classes. 
â¢ The UserCollection class and its IUserCollection interface, as you can 
guess by now, lets you manage a collection of User objects. 
47 

Chapter3 
48 
Managing Collections of Data Model Objects 
The .NET Framework provides a type-safe mechanism by which to manage col-
lections of like-typed objects via classes in the System.Collections namespace and 
the mother of all collections, the !Collection interface, which defines enumera-
tors, size, and synchronization methods for all collections. The SDK architects at 
eBay wisely chose to use this model for managing collections of objects via 
classes such as UserCollection, SaleCollection, CategoryCollection, and so on. 
The interface to a collection is quite simple: Each collection can provide you 
with a count of the number of items in the collection and an enumerator, an object 
that you can use to fetch sequentially each item in the collection. On some com-
ponent models, the enumerator is known by the term cursor.) The collections in 
the eBay SDK share the following methods in their interfaces: 
â¢ The Add method lets you add an object to the collection. 
â¢ The AddRange method lets you add (concatenate) one collection to the end 
of the other. 
â¢ The Clear method lets you remove all items from the collection. 
â¢ The Contains method lets you determine if a collection contains a spe-
cific element. 
â¢ The Copy To method lets you copy the contents of the collection to an array. 
â¢ The Get Enumerator method lets you get an enumerator so that you can iter-
ate over all objects in the collection. 
â¢ The IndexOf method lets you obtain the index of a specific entry in the 
collection. 
â¢ The Insert method lets you insert (add) an item between two items in the 
collection. 
â¢ The ItemAt method lets you obtain an item at a specific index of the 
collection. 
â¢ The ItemCount method lets you determine the number of items in the col-
lection, just like the Count property. 
â¢ The Remove method lets you remove an item from the collection. 
â¢ The RemoveAt method lets you remove an item at a specified index position 
within the collection. 

Introducing the eBay SDK 
While you can certainly use the ItemCount method and a traditional for or 
while loop to iterate across all elements in a collection, it's often easier to do so 
using an enumerator, which lets you visit each item in the collection. In C#, you 
can access the items directly using a foreach loop through code such as that 
shown in Listing 3-1. 
Listing 3-1. Using an Enumerator in C# 
1: ICategoryCollection categories; 
2: 
3: foreach{ eBay.SDK.Model.ICategory category in categories ) 
4: { 
5: 
Console.Writeline( category.CategoryName ); 
6: } 
Here, the C# compiler uses the base class interface for collections to fetch 
each Category object within the categories collection in line 3, and the loop 
prints the name of that category using Console. Wri teline on line 5. Listing 3-2 
shows the corresponding Perl code. 
Listing 3-2. Using an Enumerator in Perl 
1: $categoryEnumerator = $categories->GetEnumerator(); 
2: 
3: while{ $categoryEnumerator->MoveNext () ) 
4: { 
5: 
$category = $categoryEnumerator->Current(); 
6: 
print $category->{ 'CategoryName' } , "\n"; 
7: } 
This code does exactly the same thing, but you need to use the while loop 
on line 3 and directly access the collection's enumerator via the method on line 1. 
On initialization, the enumerator's notion of which element to return when call-
ing its Current method is an imaginary element before the first element, so the 
first time you call MoveNext, the Current method will return the first element, and 
so on. The loop terminates when MoveNext returns false, indicating that it has vis-
ited every item in the collection. 
I show you how to use collections, specifically CategoryCollection, in the sam-
ple application in the section "Viewing eBay Categories: A Sample Application'' at 
the end of this chapter. 
Examining the eBay SDK API Interfaces 
While you can create some pretty nifty applications using just the classes and 
interfaces from the data models you saw in the last section, the real value of the 
49 

Chapter3 
50 
eBay SDK is in the eBay. SDK.API namespace, where there's an interface defined 
for each eBay API call. 
In turn, each interface has a corresponding API call class that imple-
ments the eBay API call. Typically, the implementation of this class contains 
code to create the appropriate XML class, and then other classes such as the 
eBay .API.ApiSession class and the eBay .API. APICal! class contain the logic 
necessary to make the network transaction to issue the request, receive the 
response, and parse the resulting XML. For each eBay API call, the class is 
named apiNameCall, such as eBay. SDK. API. ValidateTestUserRegistrationCall, 
with its interface eBay. SDK. API. ValidateTestUserRegistration. 
The superclass of all eBay. SDK.API classes, eBay .API .APICall, contains several 
properties that all classes of the eBay. API namespace inherit. To use any eBay API 
call, you must set these properties as follows: 
â¢ The Error level property must contain an integer indicating the level of 
verbosity for resulting error messages. These integers are defined by the 
ErrorlevelEnum enumeration. If no value is set, the default value specified 
by the API session in the IApiSession object is used. 
â¢ The Detail level property specifies which fields are returned by the eBay 
API call. It's not used by all functions, but lets you pick which properties 
should be returned by an API call. 
â¢ The Si teid property specifies the eBay site to which the API call pertains, such 
as sites in the United States or Germany, or another site. Like Errorlevel, the 
default value specified in the API session is used if you do not set this property. 
â¢ The Timeout property specifies how long the API request may go unanswered 
before it is cancelled and an exception generated. Like Error level, the default 
value specified in the API session is used if you do not set this property. 
â¢ The ApiCallSession property must contain a valid API Session instance that 
has been initialized with the URL of the eBay service and your developer, 
application, and certification keys. 
â¢ The Verb property specifies the verb (e.g., Additem, GetSellerlist) of the 
eBay API call that you are going to make. 
â¢ The Response property will be set after each successful API call for you to 
examine the original XML message returned from the eBay API server. 
â¢ OnPostRequestXrnl is the event that you can handle to get notified when the 
underlying constructed XML is posted to eBay. The OnRecei veResponseXml 
event is the one to notify you when an response XML is received from eBay. 

Introducing the eBay SDK 
Each of the API calls in the namespace has a method that's the same name 
as the API itself. This method-eBay calls it the master method-makes the 
actual API call to eBay and returns an appropriate object or object collection 
with the response, or raises an exception in the event of an error. For example, 
calling ValidateTestUserRegistration. ValidateTestUserRegistration issues the 
underlying eBay API call ValidateTestUserRegistration to the eBay service. 
To supply arguments to an eBay. SDK. API call, you set the arguments via the 
API call's properties. For example, AdditemCall, which adds a new item to eBay to 
create a new auction for an item, has the property ItemToAdd, which you must set 
to the item you wish to add to the eBay service. 
Unlike the various data models, there's no subdivision of the eBay. SDK. API 
namespace. There are 27 API calls in the SDK; Table 3-1 summarizes the ones 
you're likely to use most often. 
Table 3-1. The eBay.API.SDK Calls 
Call 
Interface 
Purpose 
AdditemCall 
IAdditem 
Adds an Item for auction to 
the eBay service 
AddToitemDescriptionCall 
IAddToitemDescription 
Adds information about 
a listed Item 
GetAccountCall 
IGetAccount 
Returns the account of an 
eBayuser 
GetAPIAccessRulesCall 
IGetAPIAccessRules 
Returns the rules by which 
your application can use the 
eBay API, including details 
such as the number of API 
requests you may make over 
a unit of time 
GetBidderlistCall 
IGetBidderlist 
Returns information about 
the bidders for an item in an 
auction 
GetCategoriesCall 
IGetCategories 
Returns a collection of 
categories given a parent 
category 
GetEbayOfficialTimeCall 
IGetEbayOfficialTime 
Returns the official time at 
eBay, which presides over all 
auctions 
GetFeedbackCall 
I Get Feedback 
Returns feedback regarding 
a user 
51 

Chapter3 
Table 3-1. The eBay.API.SDK Calls 
Call 
Interface 
Purpose 
GetHighBiddersCall 
IGetHighBidders 
Returns the list of all high 
bidders for a Dutch auction 
GetitemCall 
IGetitemCall 
Returns the specified item 
GetitemTransactionsCall 
!Get Item Transaction 
Returns the transactions for 
a specific item 
GetLogoURLCall 
IGetlogoURL 
Returns the URL of the eBay 
application logo 
GetSearchResultsCall 
IGetSearchResults 
Returns the results of 
searching for an item by 
various criteria 
GetSellerEventsCall 
IGetSellerEvents 
Returns price updates and 
sale information from eBay 
GetSellerListCall 
IGetSellerlist 
Returns the list of items for 
sale on eBay, bounded by the 
API's search criteria 
GetSellerTransactionsCall IGetSellerTransactions Returns the list of 
transactions for a seller 
GetStoreDetailsCall 
IGetStoreDetails 
Returns the details pertaining 
to a specific eBay store 
GetUserCall 
IGetUser 
Returns information about 
a specific eBay user 
GetWatchlistCall 
IGetWatchlist 
Returns the items on an eBay 
user's watch list 
LeaveFeedbackCall 
ILeaveFeedback 
Leaves feedback for an eBay 
user 
RelistitemCall 
IRelistitem 
Relists an existing item on eBay 
ReviseitemCall 
!Revise Item 
Revises information about an 
itemoneBay 
ValidateTestUser 
!Validate Test 
Validates a test user, just as if 
RegistrationCall 
UserRegistration 
the user were a real seller 
and had entered a credit 
card number 
VerifyAdditemCall 
IVerifyAdditem 
Verifies that an item was 
successfully added to the 
eBay service 
52 

Introducing the eBay SDK 
WARNING 
To prevent your application from overloading eBay's application 
servers, there are a number of restrictions on how you can use these APls, such 
as repeatedly using GetCategoriesCall to fetch individual categories, or using 
GetitemCall to get an item's highest bidder. To get a better understanding of 
these restrictions, consult Chapter 9 in this book, or see the documentation at 
the eBay Web site. 
Debugging eBay Applications 
With the advent of today's modern interactive programming environments, 
debugging isn't nearly the unadulterated pit of despair and misery it used to be. 
Languages like C, C++, C#, and Perl all have interactive debuggers; depending on 
your preferences and budget, they can be simple command-line affairs like the 
famous GNU GDB application, or the amazingly powerful Microsoft Visual 
Studio debugger. 
Debugging integration touch points-such as the ones between your applica-
tion and the eBay SDK-can often be a challenge, because you don't have access 
to what goes on under the hood of something like the eBay SDK. As a result, if 
you make an incorrect assumption about how the environment operates, you can 
introduce a defect, and spend valuable time working out just what caused the 
defect in the first place. To make your life easier, here are a couple of things you 
can do to monitor the behavior of your eBay application when things go wrong. 
Logging eBay SDK XML for the eBay API 
The eBay. SDK.API.ApiSession class has the ability to log the XML requests and 
responses generated when executing eBay API calls. While these logs are of the 
most use when you're trying to debug eBay API applications (such as those I dis-
cuss in Chapters 8 and 9) and want to see how the eBay SDK uses the same eBay 
API calls, it can also shed light on other failures, such as when your application 
simply doesn't get a response from the eBay server, or when you're getting a dras-
tically different response than you expect. 
Listing 3-3 has one such eBay SDK XML log, here intentionally pruned to 
save space in the book. 
Listing 3-3. An eBay SDK XML Log 
1: [7/22/2003 00:37:38 AM] 
2: [Request][https://api.sandbox.ebay.com/ws/api.dll] 
3: c?xml version="l.O" encoding="utf-8"?> 
4: <request> 
53 

Chapter3 
54 
5: 
<RequestUserid>******</RequestUserid> 
6: 
<RequestPassword>******</RequestPassword> 
7: 
<Detaillevel>1</Detaillevel> 
8: 
<Errorlevel>1</Errorlevel> 
9: 
<Siteid>O</Siteid> 
10: 
<Verb>GetCategories</Verb> 
11: 
<CategoryParent>O</CategoryParent> 
12: </request> 
13: 
14: [7/22/2003 00:37:39 AM] 
15: [Response] 
16: <?xml version="l.O" encoding="utf-8"?> 
17: <eBay> 
18: 
<EBayTime>2003-07-22 00:37:39</EBayTime> 
19: 
<Categories> 
20: 
<Category> 
21: 
<Categoryid>O</Categoryid> 
22: 
<Categorylevel>1</Categorylevel> 
23: 
<CategoryName><![CDATA[]]></CategoryName> 
24: 
<CategoryParentid>O</CategoryParentid> 
25: 
<IsExpired>O</IsExpired> 
26: 
<IsVirtual>O</IsVirtual> 
27: 
<LeafCategory>O</LeafCategory> 
28: 
</Category> 
29: 
<CategoryCount>1</CategoryCount> 
30: 
<UpdateGMTTime>2003-07-22 00:37:39</UpdateGMTTime> 
31: 
<Version>26</Version> 
32: 
</Categories> 
33: </eBay> 
As you can see, the log file simply keeps track of every request (marked by 
the keyword [Request] followed by the server URL) and response. For security, 
the log obscures the eBay user account name and password in the request (lines 
5-6). You can see how each eBay. SDK. API call property maps to a specific XML 
entity, so checking the log is a good way to find out if you're forgetting an obvi-
ous property. 
Getting the ApiSession object to generate a log file is easy: 
l. First, set its LogCallXml property to true. 
2. 
Next, set its Log property to a newly created eBay. SDK. Log File instance. 
3. 
Open the newly created log file using its Open method. If the specified 
file doesn't exist, it will be created. 

Introducing the eBay SDK 
listing 3-4 recaps these steps in a snippet of C#, while listing 3~5 does the 
same in Perl. 
Listing 3-4. Enabling the eBay SDK Log in C# 
1: IApiSession apiSession; 
2: 
3: apiSession = new ApiSession(); 
4: apiSession.LogCallXml = true; 
s: apiSession.Log = new eBay.SDK.LogFile( ); 
6: apiSession.Log.Open( "c:\\tmp\\ebaylog.txt" ); 
7: apiSession.Url = "https://api.sandbox.ebay.com/ws/api.dll"; 
Listing 3-5. Enabling the eBay SDK Log in Perl 
1: $apiSession = Win32: :OLE->new("eBay.SDK.API.ApiSession"); 
2: 
3: $apiSession->{ 1 LogCallXml 1 } 
= True; 
4: $apiSession->{ 1 Log'} = 
5: 
Win32: :OLE->new("eBay.SDK.LogFile"); 
6: $apiSession->{ I Log I} ->Open("c: \ \tmp\ \ebaylog. txt"); 
7: $apiSession->{ 1Url'} = 
8: 
"https: //api. sandbox.ebay .com/ws/api.dll"; 
Both of these snippets are pretty self-explanatory. After creating the 
ApiSession object (line 3 of listing 3-4, line 1 of listing 3-5), the code sets the 
LogCallXml property (line 4 of listing 3-4, line 3 of listing 3-5). Next, it sets the 
Log property to a newly created log file, and sets the name of the log file (lines 
5-6 of listing 3-4, lines 4-6 of listing 3-5). Finally, the code sets the session's 
URL to use the eBay Sandbox. 
Monitoring Network Activity 
Another tool you can use (admittedly crude by today's standards of single-stepping 
through source code, breakpoints, watchpoints, and viewing or changing variables 
on the fly) is monitoring your application's use of the network when executing your 
application. This is akin to the activities of our forefathers (or, alas, some of us-0 that 
used a computer's CPU load or the status of front -panel lights to get a feel for what 
our application was doing as it executed. 
The easiest tool to use is the Microsoft Windows Task Manager; the 
Networking tab shows a graph of network activity. For it to be very meaning-
ful, of course, you should shut down other applications that may use your 
computer's network adapters, including e-mail clients, Web browsers, and 
55 

Chapter3 
even instant messaging utilities. By single-stepping through your code, you can 
see if long pauses are actually due to eBay SDK network requests, and correlate 
the behavior with the network activity you see in the network activity graph. 
Using Network Use to Indicate Application Defects 
An anecdote here may well prove the point. When debugging the sample appli-
cation that appears in the next section, I mistakenly asked eBay to send me all 
categories, rather than just the categories that were subcategories of a specific 
parent. I was doing this on the weekend from home over a dial-up line. After 
watching it start and apparently never return a couple of times, I decided that 
our connection was just being flaky, and launched the application and went 
to town to buy groceries. To my chagrin, it was still downloading something 
(I couldn't tell what, this being the domain of the eBay SDK) when I returned. 
I wasn't even sure it was downloading, until I brought up the Microsoft 
Windows Task Manager and clicked the Networking tab, and was met with 
a graph frighteningly like the one you see in Figure 3-1. As soon as I saw the 
graph, I realized my mistake: I was downloading all categories! A minute's 
worth of code changes later, and my mistake was fixed, my application ran 
considerably more smoothly, and the Windows Task Manager was showing me 
the graph in Figure 3-2. 
Adopter r~a ... 
Pr..two<t uo... 
Ll"lt .â¢. 
s"'tâ¢ 
WPre~sslloL.. 
0 '!lo II MbP"' 
0poi1!110MI 
App!PcollOnl -
"-rformMce Nttwo<!Ong u..ors 
w,,. .... Nttwort Coono<bon 
,.--
Adopter ...... 
Nttwo<\ U~... 
l.Olt â¢â¢â¢ 
Stoto 
Wireless -
.â¢ 
0.22 ~ 11 Mbps 
Opo111tloruiP 
~'roCeSSeS: 57 
CPU usage: 3% 
commt Cllarge: 240n6K 
~'roCeSSeS: 59 
CPU usage: 11% 
Commt Cllarge: 2257401< 
Figure 3-1. Network activity vs. time with 
defective application 
56 
Figure 3-2. Network activity vs. time with 
corrected application 

Introducing the eBay SDK 
For more challenging bugs, or when you're using the eBay API directly, 
bypassing the eBay SDK, you may need to call out the heavy artillery: a net-
work monitor. Tools like UNIX's tcpdump and the Microsoft Windows-friendly 
WinDump (available from http: //windump.polito. it/} let you monitor the 
exact contents of a TCP /IP connection, and are invaluable tools when debug-
ging any networking application. 
Viewing eBay Categories: A Sample Application 
This chapter's sample application is Categories, an application that lets you 
browse eBay's categories using a hierarchical list. Figure 3-3 shows a screen shot 
of Categories in action. 
Books 
Business & Industrial 
!Â±l Clothing. Shoes & Accessories 
Coins 
s lfii!ii!il 
Advertising 
!Â±l Animals 
!Â±l Animation Art Characters 
Autographs 
lÂ±l Barware 
-Bottles & Insulators 
Breweriana. Beer 
Clocks 
lfl- Coin-Op. Banks & Casino 
Comics 
Figure 3-3. The Categories application 
Settings 
This application is easy to use; after launching, it downloads the top-level 
categories and lets you investigate subcategories by clicking the cross next to 
a given category. (Leaves are denoted as list items without a cross, just like in 
a standard hierarchical view.) Clicking the Settings button lets you enter your 
eBay developer, application, and certificate keys, along with a test user's account 
name and password. This data persists between sessions (and between the vari-
ous sample applications in this book). 
In doing so, the application demonstrates how to use the 
eBay. SDK .API. GetCategoriesCall, along with the eBay. SDK. Model. !Category and 
57 

Chapter3 
58 
eBay. SDK. ModeliCategoryCollection interfaces. In the discussion that follows, 
I present the C# implementation of Categories. Instead of a Perl implementation 
that performs these operations, in Chapter 6 you learn how to write the same 
application in Perl that uses the eBay Integration Library to minimize the load 
on eBay servers that your application creates. 
The application's functionality can be divided up into three broad sections: 
â¢ The sample application framework, responsible for establishing the 
ApiSession and establishing its keys, target URL, and debugging log. The 
sample application also contains a secondary dialog box for entering the 
application keys, test user account name, and test user password. For 
a walkthrough of the sample application framework, see the Appendix. 
â¢ The gathering of the root categories, performed in a separate thread 
once the application starts to populate the top level of the list cate-
gory. This is assisted by the function GetCategories, which uses the 
eBay. SDK. API. GetCategoriesCall method to obtain the a list of categories. 
â¢ The gathering of the categories below a specific list entry. 
WARNING 
In the interests of simplicity, this sample code is written to show 
you how to use these APis, but does not show you the best way to use them. 
Repeatedly invoking GetCategoriesCall. GetCategories in your application is 
expensive, and presents a load to the eBay service. If your application has an 
upper ceiling of eBay API calls it can make, you may find that in the field your 
application can reach this upper limit using an algorithm such as the one 
presented here. Production applications should cache the results of common 
operations such as GetCategoriesCall. GetCategories, and use the cached 
results instead of repeating the same call over and over again. A good way to 
do this is to harness the power of the eBay Integration Library, which I discuss 
in Chapter 6. 
Starting the Categories Application 
The Categories application is a single monolithic class, the CategorySample class 
within the com.lothlorien.ebaysdkbook namespace. Listing 3-6 shows the skele-
ton of the application, including its members and methods, but not the actual 
method implementations. 
Listing 3-6. The Skeleton of the Categories Application 
1: using System; 
2: using System.Threading; 
3: using System.IO; 

4: using System.Windows.Forms; 
5: using eBay.SDK; 
6: using eBay.SDK.API; 
7: using eBay.SDK.Model; 
8: 
9: namespace com.lothlorien.ebaysdkbook 
10: { 
11: 
public class CategorySample : System.Windows.Forms.Form 
12: 
{ 
13: 
II eBay Session 
14: 
IApiSession apiSession; 
15: 
II UI components 
16: 
private 5ystem.Windows.Forms.Button config; 
17: 
private System.Windows.Forms.Label status; 
18: 
private ConfigDialog configDialog; 
19: 
private System.ComponentModel.Container components = null; 
20: 
21: 
II This application's fields 
22: 
private System.Windows.Forms.TreeView tree; 
23: 
24: 
private delegate void 
25: 
DelegateAddRootNodes( CategoryCollection categories ); 
26: 
private DelegateAddRootNodes AddRootNodesFunc; 
27: 
28: 
public CategorySample() 
29: 
{ 
30: 
II !nits components. 
31: 
II Creates a new thread to load root nodes. 
32: 
II Start the new thread. 
33: 
} 
34: 
35: 
private void LoadRootNodes() 
36: 
{ 
37: 
II Entry point for the thread to load the 
38: 
II root nodes and invoke the main thread 
39: 
II to redraw. 
40: 
} 
41: 
42: 
private CategoryCollection RootNodes() 
43: 
{ 
44: 
II Load the root nodes from eBay. 
45: 
46: 
} 
47: 
Introducing the eBay SDK 
59 

Chapter3 
48: 
49: 
so: 
51: 
52: 
53: 
54: 
55: 
56: 
57: 
58: 
59: 
60: 
61: 
62: 
63: 
64: 
65: 
66: 
67: 
68: 
69: 
70: 
71: 
72: 
73: 
74: 
75: 
76: 
77: 
78: 
79: 
80: 
81: 
82: 
83: 
84: 
85: 
86: 
87: 
88: 
89: 
90: 
60 
private void AddRootNodes( CategoryCollection categories 
{ 
} 
II Add the root nodes _and_ their children 
II to the tree. 
private CategoryCollection GetCategories( int parent, 
int level ) 
{ 
II Issue the API call. 
} 
private void tree_BeforeExpand( object sender, 
TreeViewCancelEventArgs e) 
{ 
II Populate a branch when clicked. 
} 
private void InitializeEBayComponent( 
{ 
} 
II Create the API session. 
II Set its log file. 
II Set the API session's access credentials. 
protected override void Dispose( bool disposing ) 
{ 
II Dispose the components and close the logfile. 
} 
#region Windows Form Designer generated code 
private void InitializeComponent() 
{ 
II Support the IDE. 
} 
#endregion 
[STAThread] 
static void Main() 
{ 
II Call application's Run. 
} 

Introducing the eBay SDK 
91: 
private void config_Click(object sender, System.EventArgs e) 
92: 
{ 
93: 
II Show the configuration dialog box. 
94: 
} 
95: 
96: 
private void LoadKeys() 
97: 
{ 
98: 
II Load the configuration keys and test user. 
99: 
} 
100: 
} 
101: } 
The application begins with the usual using directives provided by the 
Microsoft Visual Studio .NET environment, along with those the application 
needs for the eBay SDK Oines 5-7). 
The application has a handful of member variables, including the apiSession 
the application uses Oine 14), the configuration button labeled "Settings" Oine 16), 
and a simple text-based status bar (line 17), as well as the configuration form on 
line 18 (which I discuss in detail in the Appendix, as it has only C#-relevant 
code). Visual Studio .NET uses the final UI variable, components, for its nefarious 
purposes Oine 19).This application uses a single TreeView, declared on line 22. 
Finally, the application declares a delegate to support invoking a TreeView UI 
method from the thread that initializes the root categories on lines 24-26. 
The TreeView, as you may recall, is a control that lets you store a list of TreeNode 
objects, which each in tum may contain additional node lists. As the user clicks 
nodes, the TreeView sends events that manage the opening and closing of each list 
item to reveal the sublists below the selected node. The Category application uses 
this feature to download subcategories of a given selected category. 
The constructor, CategorySample, initializes the Visual Studio .NET-generated 
code and then executes code that loads the various keys and test user informa-
tion from a configuration file. Next, it creates and starts a new thread responsible 
for downloading the root categories from eBay while the application UI starts 
up. This gives you the opportunity to immediately see the application, even 
though it must perform a network transaction with eBay before it can do any-
thing useful. 
This work to load the root nodes of the tree is performed by the thread in the 
LoadRootNodes method, which first queries eBay for the root nodes, and then adds 
them to the TreeView tree. This is helped along by the helper ftmction GetCategories, 
which actually performs the eBay SDK API request to obtain a collection of cate-
gories given a specific parent category. Once this occurs, the thread exits. 
With the tree initialized, you can click a specific category to view the sub-
categories in that category, which generates the .NET Framework Before Expand 
61 

Chapter3 
62 
event. The application registers to receive this event in its constructor, so that 
when you click an item, it is invoked. It uses the Get Categories helper to obtain 
the categories under the category you choose, and adds them to the tree. 
The remainder of the methods are application helper methods. The 
Ini tializeComponent method (lines 78-83) is created by the Visual Studio .NET 
application builder when you create the initial form. In a similar vein, the 
InitalizeEbayComponent (lines 66--71) initializes the apiSession after loading the 
user keys with LoadKeys (on lines 96--99) and starts logging eBay messages. The 
Dispose method (lines 73-76) closes the eBay log file and disposes the compo-
nents. The Main method is the application's entry point; it simply invokes the 
Application class's Run method to start the application. Finally, the config_ Click 
method simply invokes the configuration form, which you can see in detail in 
theAppendix. 
Obtaining Top-Level Tree Entries 
The application begins by initializing its components, the eBay components, 
and fetching the root-level categories for the tree view. listing 3-7 shows the rel-
evant methods of the application (here removed from the names pace and class 
declarations for brevity). 
Listing 3-7. Obtaining Top-Level Tree Entries at Application Start 
1: public CategorySample() 
2: { 
3: 
Thread loadRootNodesThread; 
4: 
s: 
// Init our components, including the eBay one. 
6: 
Ini tializeComponent (); 
7: 
InitializeEBayComponent(); 
8: 
// Set up the tree's event handlers. 
9: 
this.tree.BeforeExpand += 
10: 
new TreeViewCancelEventHandler( this.tree_BeforeExpand ); 
11: 
12: 
13: 
14: 
15: 
16: 
17: 
18: 
19: } 
20: 
AddRootNodesFunc = 
new DelegateAddRootNodes( AddRootNodes ); 
loadRootNodesThread = 
new Thread( new ThreadStart( LoadRootNodes ) ); 
loadRootNodesThread.Name = "eBay Categories Thread"; 
loadRootNodesThread.Start(); 

21: private void LoadRootNodes() 
22: { 
23: 
CategoryCollection categories; 
24: 
categories = RootNodes(); 
25: 
this.Invoke( AddRootNodesFunc, 
26: 
new object[] { categories } ) ; 
27: } 
28: 
29: private CategoryCollection RootNodes() 
30: { 
31: 
Cursor.Current = Cursors.WaitCursor; 
32: 
33: 
return GetCategories( o, 2 ); 
34: } 
35: 
36: private void AddRootNodes( CategoryCollection categories 
37: { 
38: 
TreeNode node; 
39: 
if ( categories != null 
40: 
{ 
41: 
tree.BeginUpdate(); 
42: 
foreach( Category category in categories 
43: 
{ 
44: 
if ( category. CategoryName 1 = 1111 && 
45: 
category.Categoryld == category.CategoryParentld 
46: 
{ 
47: 
II This is a top-level node. 
48: 
node = new TreeNode{ category.CategoryName ); 
49: 
node.Tag = category.Categoryld; 
so: 
tree.Nodes.Add( node ); 
51: 
foreach( Category subcategory in categories 
52: 
{ 
53: 
if ( subcategory.CategoryName != 
1111 && 
54: 
subcategory.Categoryld I= subcategory.CategoryParentid && 
55: 
subcategory.CategoryParentid == category.Categoryld ) 
56: 
{ 
57: 
II This node is a child of the current parent node. 
58: 
TreeNode child = 
59: 
new TreeNode( subcategory.CategoryName ); 
60: 
child.Tag = subcategory.Categoryld; 
61: 
node.Nodes.Add( child ); 
62: 
} 
63: 
} 
Introducing the eBay SDK 
63 

Chapter3 
64 
64: 
65: 
66: 
67: 
68: 
69: 
70: 
71: } 
} 
} 
} 
tree.EndUpdate(); 
status.Text = ""; 
status. Refresh(); 
Cursor.Current = Cursors.Defau1t; 
This work begins in the constructor, Category5amp1e (lines 1-19), where you 
declare the thread that will load the root nodes 1oadRootNodesThread on line 3. 
Next, on lines 5-7, the constructor initializes first the Windows GUI components 
and then the eBay components using the helper functions Ini tializeComponent 
and InitializeEBayComponent. After that, the application adds the event handler 
for the tree control's BeforeExpand method on lines 9-10, and creates a delegate 
for the AddRootNodes function that the 1oadRootNodesThread will use to invoke the 
AddRootNodes function and update the tree control on lines 12-13. Finally, the 
method creates the 1oadRootNodesThread (lines 14-15), specifying the entry point 
as the LoadRootNodes function, and then starts the thread on line 17 after setting 
the thread's name to something meaningful for the display of running tasks in 
the Microsoft Windows Task Manager. Once the thread starts, the constructor 
exits, and the system invokes the Main method, starting the application and its 
event handler. 
Meanwhile, while the application is accepting threads, the loadRootNodes 
function (lines 21-27) is running in its own thread. This function first calls the 
RootNodes function, which returns a CategoryCollection of the root categories, 
and then uses the Form method Invoke to signal to the application that it should 
execute the AddRootNodes function on the main application thread. 
NOTE 
You can only update controls from the main thread of an application. 
Consequently, if you look to multiple threads to maintain the interactivity of 
your application, you must create a delegate for any user interface update 
methods and use Invoke to ensure that they run on the main thread. If you 
forget to do this, your control update methods will generate an exception. 
The Root Nodes method, on lines 29-33, uses the Get Categories helper to obtain 
the categories one and two levels deep below the category o, the root category 
after first setting the cursor to Cursor. Wai tCursor to inform the user that a blocking 
operation is taking place. You need to get both the root-level categories and their 
children so that the tree view will know which nodes have children, correctly 

Introducing the eBay SDK 
differentiating parent nodes with a cross from leaf nodes, which have no cross and 
cannot be expanded. 
The AddRootNodes method Oines 36-71), called on the main thread, actually 
does the work of manipulating the child nodes of the tree and inserting each 
category. The code's a little tricky, so let's take it a line at a time to understand 
what it does. 
The code begins by declaring an empty TreeNode node to contain a newly cre-
ated node from a category name on line 38. Then, if the incoming category list, 
categories, is not empty, it locks tree using its BeginUpdate method on line 41, to 
ensure that it will not process user events while the update occurs. 
lines 42-65 are the meat of this function, examining in turn each of the cat-
egories the application received from eBay. Each entry in the categories 
collection is one of two kinds of entries: 
1. If the entry has a name and its unique ID in its Categoryid property is 
the same as the ID in its CategoryParentid, it's a root node and should be 
shown at the top of the list. If it's a root node, it should be inserted in the 
Nodes property of the tree. 
2. 
Otherwise, it's a child category of a root node, and should be inserted in 
a specific Nodes property of a node contained in the tree's Nodes property. 
The comparison on lines 44-45 determines whether or not the specific category 
category is a root node. If it is (that is, if it has a nonempty name and its ID is its 
parent's ID), a new TreeNode with its text set to the category's CategoryName property 
is created on line 48. Next, on line 49, the node's Tag property (a category reserved 
by the TreeNode class for use by the application) receives the Categoryid of the cate-
gory for that node, so that when you click the entry corresponding to that TreeNode, 
the application can fetch its subcategories. 
The inner loop, on lines 51-64, tests each category in the categories loop to 
determine which of the returned categories are children of the category just 
added to the tree. You need to do this here, because there's no other good way 
to denote which tree nodes have children in the user interface without actually 
loading those children into the appropriate tree node. It's easy to detect a sub-
category of a category-its CategoryParentid property is equal to its parent's 
Categoryid property. lines 53-55 test this for a category selected by the foreach 
loop on line 51, also including two additional tests. The first, on line 53, is simple 
defensive programming, ensuring that no category without a name appears on 
the user interface. The second, on line 54, ensures that no top-level category is 
accidentally treated as a subcategory. (Failing to include the test on line 54 would 
make each category a subcategory of itself.) If a subcategory passes these tests, 
a new TreeNode, child, is created, and the Tag property assigned appropriately on 
line 60 before adding the new child to the node. 
65 

Chapter3 
66 
The remainder of the function, lines 66-69, undid the user interface setup that 
took place earlier. line 66 unlocks the tree, so that it will again accept user input. 
lines 67-68 clear the status line, which originally read "Downloading ... " to give you 
some indication of what the application was doing. Finally, line 69 returns the cur-
sor to its default, resetting it from the hourglass first set on line 31 of RootNodes. 
Obtaining Categories 
Obtaining a category list is easy-far simpler than the gymnastics you performed 
with the tree control in the last section. listing 3-8 shows how the application 
gets categories using the GetCategories method. 
Listing 3-8. The GetCategories Method 
1: private CategoryCollection GetCategories( int parent, 
2 : 
int level ) 
3: { 
4: 
CategoryCollection categories = null; 
5: 
GetCategoriesCall getCategoriesCall; 
6: 
7: 
II Set up the API we'll use. 
8: 
getCategoriesCall = 
9: 
new GetCategoriesCall( apiSession ); 
10: 
getCategoriesCall.Errorlevel = 
11: 
ErrorlevelEnum.BothShortAndlongErrorStrings; 
12: 
getCategoriesCall.CategoryParent = parent; 
13: 
getCategoriesCall.Detaillevel = 1; 
14: 
getCategoriesCall.Levellimit = level; 
15: 
try 
16: 
{ 
17: 
categories = getCategoriesCall.GetCategories(); 
18: 
} 
19: 
catch{ Exception e ) 
20: 
{ 
21: 
MessageBox.Show( this, 
22: 
"Exception - GetCategories call failed: " + 
23: 
e.Message, "Error" ); 
24: 
} 
25: 
return categories; 
26: } 

Introducing the eBay SDK 
This method is straightforward; the only real logic in the routine is the error 
handling required to keep the application running in the event that making the 
GetCategories API call goes awry. The routine takes two arguments: parent, which 
determines the parent category of interest; and level, which specifies how deeply 
the eBay service should traverse the category hierarchy in generating the response. 
Lines 4-5 create first the return value categories and then the getCategoriesCall 
variable that will contain a freshly created eBay. SDK .API. GetCategoriesCall 
object, created on lines 8-9. 
The remainder of the initialization, on lines 10-14, sets the key properties 
for the API invocation: 
â¢ Lines 10-11 set the desired level of verbosity for error strings. When in 
doubt, I always choose the most verbose error strings, especially early in 
application development. 
â¢ Line 12 specifies the parent of the categories to be returned using the 
request's CategoryParent method. In return, the API will return the named 
category and its children, and its children's children, up to the level limit 
indicated by the request's Levellimi t parameter. 
â¢ Line 13 specifies the Detail level property, which defines the default level 
of detail, indicating that in the response all fields should be populated. 
â¢ Line 14 specifies the Levellimi t property, indicating how many levels below 
the given category should be retrieved and returned in the collection. 
The try I catch block on lines 15-24 first attempts to invoke the master method 
for the GetCategoriesCall, Get Categories. This can fail for a myriad of reasons: an 
incorrect key, user account login or password, network congestion, and so forth. 
Consequently, it's imperative that you wrap each call to an eBay API with try I catch 
(or test the results of the OLE last error if you're using a language like Perl) to ensure 
that the request was a success, and that you control your application's behavior in 
case of an error. 
WARNING 
Failing to correctly handle API failures may cause your application 
to fail eBay certification. 
This event handler is simple, but accomplishes the job. In the event of any 
error (indicated by an Exception or its subclass, eBay. SDK. SDKException), the appli-
cation displays a message box showing the text from the exception (lines 21-23). 
67 

Chapter3 
68 
Obtaining Tree Branch Entries 
The only other action the application must perform is managing the selec-
tion of a tree item, which may require that the item expand and download 
new categories. When a tree item is selected, if it can expand, the control 
issues a BeforeExpand event, which the application registered to receive dur-
ing its constructor. When the application receives this event, it invokes 
tree_BeforeExpand, shown in Listing 3-9. 
Listing 3-9. Expanding a Tree Item 
1: private void tree_BeforeExpand( object sender, 
2: 
TreeViewCancelEventArgs e) 
3: { 
4: 
CategoryCollection subcategories; 
5: 
int baselevel = -1; 
6: 
7: 
Cursor.Current = Cursors.WaitCursor; 
8: 
status.Text ="Downloading ... "; 
9: 
status.Refresh(); 
10: 
subcategories = GetCategories( (int)e.Node.Tag, 3 ); 
11: 
12: 
tree. BeginUpdate (); 
13: 
foreach( Category subcategory in subcategories 
14: 
{ 
15: 
II Find the appropriate node to contain this subcategory. 
16: 
if ( baselevel == -1 ) 
17: 
baselevel = subcategory.Categorylevel; 
18: 
if ( subcategory.Categorylevel == baselevel + 2 
19: 
{ 
20: 
foreach( TreeNode child in e.Node.Nodes ) 
21: 
{ 
22: 
if ( (int)child.Tag == subcategory.CategoryParentid 
23: 
{ 
24: 
TreeNode newChild = 
25: 
new TreeNode( subcategory.CategoryName ); 
26: 
newChild.Tag = subcategory.Categoryid; 
27: 
child.Nodes.Add( newChild ); 
28: 
} 
29: 
} 
30: 
} 
31: 
} 
32: 
tree. EndUpdate(); 

Introducing the eBay SDK 
33: 
status.Text = ""; 
34: 
status.Refresh(); 
35: 
Cursor.Current = Cursors.Defau1t; 
36: } 
This code is very similar to the AddRootNodes routine you just saw. It begins by 
declaring a CategoryCollection, subcategories on line 4, which will contain those 
categories that descend from the item you selected. Next, it creates an integer, 
baseleve1, used to determine which subcategories fall below the selected cate-
gory. This is necessary because although the tree provides a hierarchical data 
structure that mirrors the eBay category hierarchy, the eBay CategoryCollection 
model represents this information using a flat collection of Category items, each 
with a Categoryleve1. 
lines 7-9 prep the user interface for another network transaction, first selecting 
Cursor. Wai tCursor and then updating the text on the status line. line 10 requests 
the category selected, its children, grandchildren, and great-grandchildren. While 
the selected category and its children are already known (the selected category was 
fetched previously, and its children were fetched at the same time to determine 
whether this item was a leaf or a parent), there's no good way to use this informa-
tion without additional data structures, so the routine just requests it again anyway. 
Once the request completes, I lock the tree on line 12. line 13 iterates 
through the resulting subcategories. lines 1&-17 use a bit of skullduggery to 
avoid the category node that was selected, and lines 18-30 add the grand-
children to the appropriate node using the same logic you first saw in 
AddRootNodes, ensuring that each node is correctly treated as a parent node 
or a leaf node. 
Key Points 
In this chapter, you learned the following key points regarding the eBay SDK: 
â¢ The lion's share of the eBay SDK are elements of the data model, which let 
you easily interact with the software analogues of real-world concepts 
such as users, their accounts, and the items they buy and sell. 
â¢ The eBay. SDK. API namespace contains classes and interfaces for each of 
the eBay APis that the eBay SDK supports. 
â¢ The eBay SDK provides collections that inherit from the .NET collection 
interfaces to let you manage groups of identically typed components with-
out resorting to using arrays. Moreover, collections can be used as arrays 
when needed. 
69 

Chapter3 
70 
â¢ When using an eBay. SDK. API interface to execute an eBay API request, 
you must set its ApiSession property to an allocated and initialized 
eBay. API. ApiSession object, which contains the eBay developer, applica-
tion, and certification key for your application, along with a user account 
ID and password. 
â¢ When you use an eBay. SDK. API interface to execute an eBay API request, 
the arguments for the request are stored as properties set by the interface, 
and the API itself is invoked using the interface's master method. In tum, 
this method returns the results to you, typically as an object defined in 
one of the namespaces contained by the eBay. SDK. Model names pace. 
â¢ You can use the eBay SDK log of your application's use of eBay SDKAPis 
to debug your application by setting the ApiSession's LogCallXml property 
to true and setting its Log property to an initialized instance of 
eBay.SDK.LogFile. 
â¢ The eBay category system is hierarchical. You can traverse this hierarchy 
by using the GetCategoriesCall and supplying both the parent ID of the 
topmost -level category to get, along with a depth indicating how many 
levels of subcategories to return. 

CHAPTER 4 
Managing Users with 
the eBay SDK 
UsERS AND ITEMS ARE at the heart of the eBay service. Without users, there would 
be no one to buy or sell items; without items, there'd be little for users to do. In 
this chapter and the next, I explore the various aspects of these crucial members 
of the data model behind the eBay SDK, including the classes that represent 
them and the APis that use these classes. 
In this chapter, I plumb the depths of the eBay. SDK. Account and eBay. SDK. User 
namespaces. After reading this chapter, you will have a deep knowledge of the 
classes in these namespaces and how they relate. In addition, you will see how to 
use them in the context of two sample applications, User Info and AccountStatus, 
which demonstrate how to use members of the eBay. SDK .Account and eBay. SDK. User 
namespaces, respectively. 
Understanding the Relationship Between Users and 
Their Accounts 
As I noted in the previous chapter, it's important that you don't confuse the notion 
of an eBay user with an eBay account. Figure 4-1 shows a use case diagram that 
clarifies both of these concepts. 
71 

Chapter4 
72 
eBay Service 
<users> 8 
users 
Figure 4-1. A use case diagram indicating the relationship between users and their 
accounts 
In short, an eBay user has an account that tracks the costs of listing and selling 
items on eBay. JYpically, a user is a single physical entity (an individual or a corpo-
ration) that sells items. In tum, this user has at least one account that indicates his 
or her business dealings with eBay to cover the costs of item promotion, eBay 
Store promotion, and item listing and sales fees. 
One area where your applications can benefit eBay users is account manage-
ment: helping eBay users determine the costs they incur using eBay and their 
overall profit. Such applications can be simple, providing an analogue of printed 
transaction records for individuals listing items on eBay; or complex applica-
tions providing cost-benefit tracking for small businesses using eBay as a channel 
for their products, showing their revenue and margins over time. For those 
looking at the opportunity of integrating eBay with existing corporate infor-
mation systems, middleware or modules that integrate your firm's accounts 
payable software packages with eBay's account management can streamline 
the process of making payments for your company. 
There's less of an opportunity for applications that directly manipulate user 
information, however. Despite the central role of users within the eBay service, 
there simply aren't many interfaces that let you browse or modify user attributes; 
moreover, there's little business reason to do so. 

Managing Users with the eBay SDK 
Looking Under the Hood at the eBay.SDK.Model.User 
Names pace 
The members of the eBay. SDK. Model. User namespace provide you with an easy 
way to manage the notion of an eBay user. The chief class in the namespace is 
the User class, supported by the UserCollection and the Schedulinglimi t classes. 
This class has properties that represent attributes of eBay users, including their 
eBay login name, e-mail address, when they registered with eBay, and so forth. 
Most of the properties of the classes in this namespace are fundamental data 
types such as Boolean values, integers, or strings of characters. Some, however (and 
this is the case for many data model objects in the eBay SDK), use helper classes 
that encapsulate more complex data types, such as the Schedulinglimit class, an 
aggregate of a number and two times. You will find these conveniences throughout 
the SDK: As eBay engineers identify composite data types, they encapsulate them 
in classes with a specific interface, making it easy for you to manipulate complex 
data quickly within your application. These helper classes typically have only the 
most rudimentary of methods, including 
â¢ The Equals method, which you use to compare two instances of the class. 
â¢ The GetHashCode method, which you use to obtain a hash for a specific 
instance. 
â¢ The GetType method, which you use for introspection to determine the 
object's type. 
â¢ The ToString method, which you use to obtain a string representation of 
the object. 
Representing Users with the User Class and Its 
Collection, the UserCollection Class 
Many eBay SDK API methods require a user as an argument or return information 
about an eBay user as a result. To facilitate passing information about users, the 
eBay SDK provides the User and UserCollection classes to manage individual user 
data and a collection of users, respectively. The majority of your interaction with 
these classes is through their properties, so let's take a look at them first. Table 4-1 
shows the various properties of the User class. 
73 

Chapter4 
74 
Table 4-1. The Properties of the User Class 
PZ'ope:rty 
About Me 
AllowPaymentEdit 
AppData 
Checkout Enabled 
Purpose 
TRUE if the user has a page about himself or herself. 
TRUE if the user allows buyers to edit payment options. 
Your application can use this property to store any object 
relating to the User instance. This object is not sent to or 
received from the eBay application service. 
TRUE if the user has enabled checkout in his or her 
preferences. 
CIPBankAccountStored 
For the German service, TRUE if a user has stored bank 
account information with eBay to use the CIP in checkout 
function. 
Email 
The e-mail address of the user. 
FeedbackPrivate 
TRUE if user has elected to keep feedback private. 
FeedbackScore 
The cumulative feedback score for the user. If the user has 
chosen to keep his or her feedback private (Feedbac kPri vat e), 
and the call is not being made by a user who is requesting his 
or her own FeedbackScore, this value will be o. 
IdVeri fied 
TRUE if the user's identity has been verified through eBay's ID 
Verify program. 
Is LAAuthorized 
TRUE if the user is authorized to list Uve Auction items. 
PaymentAddress 
Container for seller payment address information. 
RegDate 
The date and time that the user registered with eBay. 
RegistrationAddress 
Container for seller registration address information. 
Schedulinglimit 
Container for scheduling limits for the user. 
Seller level 
The user's PowerSeller level. Valid levels indicating PowerSellers 
are 11, 22, or 33. Other values are valid but do not indicate 
PowerSellers. 
Siteid 
Star 
Status 
StoreOwner 
Userid 
UserldlastChanged 
The eBay site where the user is registered. 
The code for the star icon that is a visual indicator of the user's 
feedback score. 
The user's registration status. 
TRUE if the user is an owner of an eBay store. 
The unique identifier for the user. 
The last date and time that the user changed his or her Userld. 

Managing Users with the eBay SDK 
The User class implements the following methods: 
â¢ The Clone method, which you use to deeply clone a User object 
â¢ The Equals method, which you use to compare two instances of the class 
â¢ The GetHashCode method, which you use to obtain a hash for a specific 
instance 
â¢ The GetType method, which you use for introspection to determine the 
object's type 
â¢ The ToString method, which you use to obtain a string representation of 
the object 
In many cases, such as when getting a list of bidders for a specific item, 
you're interested in a list of User objects. The eBay SDK provides this list using 
a UserCollection object, which you can iterate over using a foreach operator inC#, 
or simply use its Count property and ItemAt method to obtain each item in a for 
loop. Traversing UserCollection collections is identical in process to traversing 
other collections such as CategoryCollection (see Chapter 3) or ItemCollection 
(see Chapter 5). 
NOTE 
When obtaining information in a User object, some fields may or may 
not be set depending on the Detail Level of the request you're making. For 
specific details regarding the effect of a particular Detaillevelvalue and the 
returned properties in a User object, consult the eBay SDK documentation. 
Managing Item Scheduling Privileges with the 
SchedulingLimit Class 
One User property, the Schedulinglimi t property, indicates how many items a user 
can schedule at once, along with the minimum and maximum number of minutes 
an item can be scheduled in advance. Rather than representing these values as an 
array, the SDK represents the values as properties of the Schedulinglimi t class. It 
has three properties, as you can see from Table 4-2. 
75 

Chapter4 
76 
Table 4-2. The Properties of the SchedulingLimit Class 
Property 
Pu:rpose 
MaxScheduled!tems 
The maximum number of items that the user can schedule 
MaxScheduleTime 
The maximum number of minutes that a listing may be 
scheduled in advance 
MinScheduleTime 
The minimum number of minutes that a listing may be 
scheduled in advance 
Specifying Values with eBay.SDK.Model.User 
Enumerations 
The eBay. SDK. Model. User names pace has two enumerations to aid in interpreting 
User properties: UserStarEnum and UserStatusEnum. The former provides a symbolic 
interpretation of the User class's Star property, while the latter provides the same 
for the User class's Status property. 
The UserStarEnum enumeration and its container, the User Star property, are 
best understood in the context of a user's feedback score, which I discuss in detail 
in the next chapter. Put simply, each transaction allows a buyer and seller to 
exchange feedback, a mandatory comment with an associated numeric score. 
Higher scores assigned in a feedback exchange indicate greater satisfaction with 
a transaction. The user's Star property is a sum of all feedback values, giving each 
user a relative peer-based ranking of their reliability. On the eBayWeb site, the 
property is displayed as a star, like the one you see in Figure 4-2. Different color 
stars, along with those adorned with other symbols such as lines indicating 
a shooting star, provide visual indication of a user's feedback score. The eBay 
application service provides images for each shooting star, as described in the 
eBay SDK documentation under the UserStarEnum documentation entry. Table 4-3 
shows the values for the UserStarEnum property. 

Managing Users with the eBay SDK 
-Â·-
v.-. sa. ( *) â¢ 10.., .. , pan, 
--(â¢ >â¢ 5010118-
--~Â·Â· Â· Â·001041111-
""'J'Jo Stor(*l â¢ 10010999-
Aoc!Qor( * >â¢ I.OOOI0â¢.999-
Gr-SIOtf*)â¢S.OOOIOt,999-
M! y-~-( â¢ 10,0001024,999-
T-~SIOICJrl â¢ ZS,OOOI0â¢9tttÂ­
-
5-.g -(#). 50.00010 lll.lllt-
Leevlng Feedback Links 
-~~~--fond .. -.g> ....... _ 
dJV' ID card 
90donf101 ___ 
â¢ 
SUIIWNty of Moet t'lec::Ml ....... 
(g) 
~ f-
POII7don Pool--~"" 
t RIVw 1!11 ft~Qpf!j ~ ......_. lbcM rMI 
t SH .. fttcl*t I I'IM 11111bcU ahrs 
0 
0 
0 
-
0 
-
~ 
0 
u 
.:. 
Figure 4-2. The user rating (Star property) for eBay user sandy2718 shown on the 
eBay Web site 
Table 4-3. The Meaning ofValues of the UserStarEnum Enumeration 
Enumeration Value 
Feedback Score Range 
None 
0-9 
YellowS tar 
10-99 
BlueS tar 
50-99 
TurquoiseS tar 
10{)-499 
PurpleS tar 
500-999 
RedStar 
1,00{)-4,999 
GreenS tar 
5,000-9,999 
YellowShootingStar 
10,000-24,999 
TurquoiseShootingStar 
25,00{)-49,999 
PurpleShootingStar 
50,000-99,999 
RedShootingStar 
100,000 and above 
More prosaic is the UserStatusEnum enumeration, which denotes a user's status 
within the eBay service. The enumeration values and their meanings are shown in 
Table 4-4. 
77 

Chapter4 
78 
Table 4-4. The Meaning ofValues of the UserStatusEnum Enumeration 
Enu.eration Value 
AccountOnHold 
Confirmed 
Deleted 
FromHalfPending 
CreditCardVerification 
FromHalfUnconfirmed 
Ghost 
InMaintenance 
Merged 
PendingCreditCard 
Verification 
PendingTermination 
RegistrationCodeSent 
Suspended 
Unconfirmed 
Unknown 
Meaning 
The user's account is on hold, such as for nonpayment of 
amounts due eBay. User cannot sell or buy items. 
The user has completed online registration and has properly 
responded to confirmation e-mail. Most users should fall in 
this category. 
Records for the specified user have been deleted. 
The user has completed the registration for Half.com and 
opted to automatically also be registered with eBay, but 
the verification of credit card information is still pending. 
The user has completed the registration for Half.com and 
opted to automatically also be registered with eBay, but 
the registration confirmation is still pending. 
The user is a registered user of Auction Web (pre-eBay) 
who never reregistered on eBay. 
The user's record is in the process of being changed by 
eBay. Query user information again to get new status. 
The user record has been merged with another account 
record for the same user. 
The user has completed registration and confirmation, 
but is pending a verification of credit card information. 
The user has been scheduled for account closure. A user 
in this state shouldn't be considered an active user. 
The user has completed online registration and has been 
sent the confirmation e-mail, but has not yet responded 
to the confirmation e-mail. 
The user has been suspended from selling and buying. 
The user's registration has not yet been confirmed. 
The user properties have never been set. This typically 
represents a problem with the user's account. 

Managing Users with the eBay SDK 
NOTE 
The various eBay SDK enumerations, including UserStarEnum and 
UserStatusEnum, are not defined for languages other than those that can 
directly import content from the .NET Framework, such as C# and Visual 
Basic .NET, because in C#, enumerations are actual types, not aliased to 
a primitive type like you'd expect if you were coming from a language like C. 
Unfortunately, those of us who prefer Perl or other languages without full 
.NET support and use the eBay SDK via its COM interface must either imple-
ment these enumerations for their applications or take the more perilous 
route of referring to the constants defined by these enumerations directly. 
Looking Under the Hood at the eBay.SDK.Model.Account 
Names pace 
The contents of the eBay. SDK. Model. Account namespace is critically important to 
many eBay applications, because it contains the classes, interfaces, and enumera-
tions that pertain to managing an eBay user's online account with eBay. Within 
this namespace are the Account class, which provides a snapshot of account activ-
ity at an instant in time, along with the AccountinvoiceView and AccountPeriodView 
classes, which provide a summary of account activities (each represented by 
AccountActivity objects) over time. 
Like the User class, all of the classes in this namespace implement the Clone, 
Equals, GetHashCode, GetType, and ToString methods defined by the interface to the 
Object parent class. As I discuss each of the classes in this namespace, I point out 
where a specific class deviates from this behavior. 
Examining Accounts with the Account Class and Its 
Collection, the AccountCollection Class 
The Account class is the chief class in the eBay. SDK. Model. Account namespace. 
This class provides a container for the various elements of an eBay user's 
account. Table 4-5 lists the various properties of the Account class. 
Table 4-5. The Properties of the Account Class 
Property 
Purpose 
Activities 
Indicates the container node for AccountActivityCollection with 
AccountActivity objects denoting each account transaction. 
Currency 
Defines the ID of the currency used by this account. 
Id 
Defines the ID of this account as a string. All accounts begin with the 
letter E and are followed by a string that uniquely identifies the account. 
79 

Chapter4 
80 
Table 4-5. The Properties of the Account Class (continued) 
Property 
Purpose 
InvoiceView 
Provides the account's transaction history as an AccountinvoiceView 
object. This property may be null. 
PeriodView 
Provides the account's transaction history over a specific period as an 
AccountinvoiceView object. This property may be null. 
The Account class is a frequent return value when working with eBay API meth-
ods, and depending on the API call, the InvoiceView and PeriodView properties may 
or may not be set 
The Currency property is interesting, if only because its return value isn't a coun-
try identifier (as a string or enumeration), but rather a number indicating a value in 
the eBay SDK enumeration eBay. SDK.Model.Account. CurrencyEnum. 
Examining Account Activity with the AccountActivity 
Class and Its Collection, the 
AccountActivityCollection Class 
At its core, the purpose of an Account object is to give you insight into the transac-
tions that affect the account's balance. The eBay SDK gives you this information via 
the Account class property Activities, which can contain anAccountActivity Collection. 
This collection, in tum, contains zero or more AccountActivity instances, each 
with the properties you see in Table 4-6. 
Table 4-6. The Properties of the AccountActivity Class 
Property 
Purpose 
Activity Indicates the type of activity, detailing the entry type. 
Balance 
Indicates the account balance as of this entry. Can be zero. 
Credit 
Date 
Debit 
Id 
Item!d 
Memo 
Indicates the amount this activity credits to the account. Can be zero. 
Specifies date the activity was posted to the account, in Greenwich mean 
time. 
Indicates the amount this activity debits from the account. Can be zero. 
Specifies the unique reference number of this activity in the account. 
If the transaction is associated with an eBay item, indicates the ID of the 
item. Zero if no item is associated with this entry. 
Indicates a string comment regarding the activity. May be an empty string. 

Managing Users with the eBay SDK 
Most AccountActivity objects directly correspond to either selling or buying 
an item on eBay, indicating the fees eBay charges to your account as a result of 
posting a listing or closing an auction. Consequently, to help reconcile accounts, 
the AccountActivity class has the Item!d field, so that you can match a specific 
AccountActivity record with the corresponding eBay Item (as opposed to a sale) 
that generated the credit or debit in question. 
Viewing Account Activity with the AccountinvoiceView 
and AccountPeriodView Classes 
Although a raw listing of account transactions in the form of an 
AccountActivity-Collection is all well and good, most of the time you want to see 
your account's activity in the form of a collection either as an invoice-what you 
need to pay at the end of an accounting period-or an account balance over 
a particular time period. The AccountinvoiceView and AccountPeriodView, usually 
accessed as the InvoiceView and PeriodView properties of an Account object, let 
you do just that. Table 4-7lists the properties of the AccountinvoiceView class. 
Table 4-7. The Properties of the AccountlnvoiceView Class 
Property 
EmailAddress 
InvoiceBalance 
InvoiceDate 
Purpose 
The e-mail address to which eBay invoices are sent 
The amount on the invoice 
The date the invoice was issued, in Greenwich mean time 
As you can see from Table 4-7, the AccountinvoiceView is remarkably brief. 
Think of it as the bottom line on your phone bill: All it says is what you need to 
pay, and by when you need to pay it. 
By comparison, the AccountPeriodView class provides a summary of account 
activity. If the AccountinvoiceView is the bottom line on your bill, the 
AccountPeriodView is all of the other lines that come before it, except for the actual 
list of transactions. Table 4-8 shows the properties of the AccountPeriodView class. 
81 

Chapter4 
82 
Table 4-8. The Properties of the AccountPeriodView Class 
Property 
Purpose 
Addi tionalAccounts 
Contains a collection of additional accounts associated with 
the account. 
AmountPastDue 
BillingCycle 
Current Balance 
Indicates the amount the account is past due, or zero if the 
account payments are up to date. 
Indicates the billing cycle in which eBay sends an invoice to the 
user. The value is a member of the BillingCycleEnurn enumeration, 
either OnlastDayOfTheMonth or OnlSthDayOfTheMonth. 
Specifies the user's current balance. A signed floating-point 
number. 
LastAmountPaid 
Specifies the amount of the last payment posted. 
LastinvoiceAmount 
Indicates the amount of the last invoice. 
LastinvoiceDate 
Specifies the date when eBay sent the last invoice to the user, 
in Greenwich mean time. Empty if this account has not been 
activated yet. 
LastPaymentDate 
Indicates the date when the user made the last payment to 
eBay in Greenwich mean time. Empty if the account has not 
been invoiced yet. 
PastDue 
PaymentMethod 
State 
If true, the account is past due. 
Defines how the user pays eBay. 
Specifies the state of the account. One of Active, Pending, or 
Inactive, as indicated by the AccountStateEnum. 
An AccountPeriodView object can encompass multiple accounts owned by the 
same user. These accounts, handled by AdditionalAccount objects, reflect separate 
accounts attached to a same user, in much the same way you can have multiple 
phone numbers on a single phone bill. In the case of eBay, these multiple accounts 
can reflect different storefronts, for example. I discuss the AdditionalAccount class 
and its collection class later in this chapter, in the section "Examining Ancillary 
Accounts with the AdditionalAccount Class and Its Collection, the 
Addi tionalAccountCollection Class." 
The PaymentMethod property of the AccountPeriodView specifies how you pay 
eBay for its services. This property contains an object representing the payment 
method, an instance of the class AccountPaymentMethodimpl. As you will see in the 
next section, this object contains additional information specifying how you pay 
eBay via properties that denote a credit card, direct debit from an account, or 
other payment methods. 

Managing Users with the eBay SDK 
As you work with invoice and period views, you need to be able to specify 
information about the period of time you wish to see the data. The eBay SDK 
lets you specify this using three helper classes: the InvoiceViewSettings class, the 
PeriodViewSettings class, and the DateRangeimpl class. The InvoiceViewSettings 
class is the simplest to use; it has two properties, InvoiceMonth and InvoiceYear, 
which let you specify the month and year for a desired invoice. Similarly, the 
PeriodViewSettings contains a DateRange property, which will contain a DateRangeimpl 
object; and a ViewPeriod property, which contains a value selected from the 
PeriodViewRangeEnum enumeration, with values such as Sincelastinvoice, 
ForThelastDay, and ForThelastWeek. The DateRangeimpl class, not surprisingly, has 
two properties: BeginDate and EndDate. These dates point to the beginning and 
ending date of a date range, specified in Greenwich mean time. 
Representing Payment Methods with the 
AccountPaymentMethodimpl Class 
As part of the AccountperiodView class, its PaymentMethod property indicates how 
you make your payments to eBay. Table 4-9 shows the properties of this class. 
Table 4-9. The Properties of the AccountPaymentMethodlmpl Class 
Property 
CreditCard 
DirectDebit 
Purpose 
Credit card information ifType property equals 
AccountPaymentEnum.CreditCard 
Information for direct debit from an account if Type property 
equals AccountpaymentEnum. DirectDebit 
DirectDebi t _Pending 
Information for direct debit from an account if the debit has 
SignatureMandate 
yet to be authorized and Type property equals 
AccountPaymentEnum.DirectDebit_PendingSignatureMandate 
eBayDirectPay 
Information for direct payments to eBay if Type field equals 
AccountPaymentEnum.eBayDirectPay 
Type 
The payment option the user selected when registering with 
eBay 
If you're used to programming inC# or Java where type reflection is the norm, 
the notion of testing the Type field to determine the appropriate field to examine 
for more information will seem positively antiquated. It has an advantage, though, 
in that it works well with languages like Perl where introspection of Component 
Object Model (COM) objects isn't easily done. Each of the other properties of an 
83 

Chapter4 
84 
AccountPeriodView object will be null, except the specific property indicated by 
the Type field. 
The eBay SDK provides classes to encapsulate information about each of 
the payment types: the CreditCardimpl class, the DirectDebitimpl class, and the 
EBayDirectPay class. Their properties are specific to the payment method, and 
include information about the payment method such as the account number. 
You can see the properties for these classes in the eBay SDK documentation 
under the section "eBay.SDK.Model.Account." 
Examining Ancillary Accounts with the 
AdditionalAccount Class and Its Collection} 
the AdditionalAccountCollection Class 
Some accounts, especially those for large businesses, may be umbrella accounts 
that encompass multiple accounts to track account activities by categories in dif-
ferent accounts, such as for individual eBay stores or business units within 
a specific company. To describe this within the eBay data model architecture, 
the eBay SDK provides the AdditionalAccount class and its collection, the 
AdditionalAccountCollection class. Table 4-10 shows the properties of the 
AdditionalAccount class. 
Table 4-10. The Properties of the AdditionalAccount Class 
Property 
Purpose 
Balance 
The balance for the additional account. 
Currency 
The currency in which the balance is reported. Indicated using the 
eBay. SDK. Model. Account. CurrencyEnum enumeration. 
Id 
The eBay ID for the account, as a string. The string contains a leading E 
followed by the account number and an indication of the account's 
currency. 
The AdditionalAccount object is analogous to an Account object, but contains 
only those properties that differentiate it from its containing account. 

Managing Users with the eBay SDK 
Using eBay API Methods with User and Account Data 
Model Objects 
All of these data model objects are nice, but without the corresponding eBay 
SDK API calls, they don't let you actually do much. Using a handful of methods 
in the eBay. SDK.API namespace, you can get information about a specific user or 
get information about a user's account. 
As you saw in the previous chapters when using an API method, you must 
always set the API object's ApiSession property to the ApiSession you create and 
initialize with your application keys and a valid eBay user login and password. 
The results of any of these API calls can be changed by the API's Detaillevel 
property. In general (although it's not always the case), successively higher values 
ofDetaillevel indicate that additional information should be returned. 
Obtaining a User,s Information with the GetUserCall 
The GetUserCall class lets you get a User object corresponding to a specific user. 
For obvious reasons, your application can't traverse the eBay database of users 
willy-nilly; privacy is paramount. Consequently, a user's e-mail address and street 
address is only returned under specific circumstances. 
Before invoking the GetUserCall.GetUser method, you must set its properties 
to indicate the arguments of the API call. There are three properties you must set: 
â¢ The Userld property contains the eBay user ID of the user to return. 
â¢ The Detaillevel property indicates the level of detail you desire in the result. 
â¢ The Itemld property can contain the item ID of an item whose action has 
closed. If the account making the request is the seller of the item and the 
appropriate detail level is set, eBay will return the e-mail and postal address 
of the user. 
The GetUser method returns a new !User object, with properties filled based 
on the value of Detail level. Table 4-11 shows which properties are returned for 
a specific value of Detail level. 
85 

Chapter4 
86 
Table 4-11. DetailLevel and the Resulting User Object 
Property 
0 
2 
4 
8 
AboutMe 
ttl 
ttl 
ttl 
ttl 
Checkout Enabled 
ttl 
ttl 
ttl 
ttl 
Email 
ttl 
ttl 
ttl 
ttl 
EOPChecklimit 
ttl 
ttl 
ttl 
ttl 
EOPCreditCardLimit 
ttl 
ttl 
ttl 
ttl 
FeedbackScore 
ttl 
ttl 
ttl 
ttl 
IDVerified 
ttl 
ttl 
ttl 
ttl 
IsGCAuthorized 
ttl 
ttl 
ttl 
ttl 
IsLAAuthorized 
ttl 
ttl 
ttl 
ttl 
RegDate 
ttl 
ttl 
ttl 
ttl 
RegistrationAddress 
ttl 
Schedulinglimi t 
ttl 
Sellerlevel 
ttl 
ttl 
ttl 
ttl 
Siteid 
ttl 
ttl 
ttl 
ttl 
Star 
ttl 
ttl 
ttl 
ttl 
Status 
ttl 
ttl 
ttl 
ttl 
StoreOwner 
ttl 
ttl 
ttl 
ttl 
Sunglasses 
ttl 
ttl 
ttl 
ttl 
Userid 
ttl 
ttl 
ttl 
ttl 
UseridLastChanged 
ttl 
ttl 
ttl 
ttl 
Obtaining a User's Account with GetAccountCall 
The GetAccountCall class is similar to GetUserCall, except that instead of return-
ing a User object, it returns an !Account object. Unlike the GetUserCall class, 
however, the GetAccountCall class's input arguments are far more complex. The 
GetAccountCall's GetAccount method is a veritable Swiss Army knife, returning 
a number of different kinds of information depending on the values of its input 
properties. There are five input properties you can set: 

Managing Users with the eBay SDK 
â¢ The Currency property specifies the currency in which to return the report. 
If this property is null, the account will be returned in the currency of the 
user's country. 
â¢ The InvoiceViewOption specifies the options for the AccountlnvoiceView if 
ViewType is AccountviewEnum. ViewBylnvoice and should contain an 
InvoiceViewSettings object. 
â¢ The PageNumber property specifies which page of account information should 
be returned. The eBay SDK divides account information into multiple 
pages to limit the use of network bandwidth. (The default is 1, which returns 
the first page of information.) 
â¢ The PeriodViewOption specifies the options for the AccountPeriodView 
ifViewType is AccountViewEnum. ViewByPeriod and should contain 
a PeriodViewSettings option. 
â¢ The ViewType property indicates whether an AccountPeriodView should 
be returned if ViewType is AccountviewEnum. ViewByPeriod or an 
AccountlnvoiceView ifViewType is AccountViewEnum. ViewBylnvoice. 
CAUTION 
The AccountViewEnum contains a third element, None. It's an error to 
set the ViewType field to AccountViewEnum. None; the eBay service will return 
an error. 
Note that the Detaillevel option is conspicuously absent: As of this writing, it has no 
impact on the return value from the GetAccountCall. GetAccount method. Moreover, 
note that you cannot get the account information for an arbitrary user. Instead, 
the account information is returned for the user whose eBay user name you set in 
the ApiSession object associated with the transaction. 
To use GetAccountCall. GetAccount, you select what kind of account information 
to obtain by setting the View Type to one of the values defined by AccountViewEnum, 
either ViewByPeriod or ViewBylnvoice. Depending on what value you select, you must 
also pass options in either InvoiceViewOption or PeriodViewOption. After you invoke 
the GetAccount method, the resulting information will be in the returned Account 
object's InvoiceView or PeriodView, respectively. 
In addition to obtaining the resulting Account object after invoking GetAccount, 
the GetAccountCall TotalPages property is set with the total number of pages avail-
able for the specific account. 
87 

Chapter4 
88 
Harnessing !User: The Userlnfo Sample Application 
The Userlnfo sample application uses the !User interface, the User class, and the 
GetUserCall class to obtain information about a registered user of the eBay service. 
Figure 4-3 shows a screen shot of the Userlnfo application. 
eBay User 10 lsandy2718 
slllldy2718 
sandy~ .com 
e&y.SOKModei.Address 
Feecback score: 0 
The user is velf"Jed. 
The user doesn\ have 311 ~Me 
page. 
Oetaillevel no 
1-< I 
Find 
Sellings 
Figure 4-3. The User Info application (C# version) 
To use the application, simply enter the desired eBay user ID in the text box 
on the left, and select the desired Detail level for the API request on the right from 
the list box. Once you do so, click the Find button. The application will create 
a GetUserCall object, issuing the GetUser request for the desired user ID with the 
indicated Detail level. The results of the request are displayed in the read-only 
text box at the bottom of the application. You can set your eBay developer keys 
and the test user and password by clicking Settings and filling out the Settings 
dialog box that appears. 
In experimenting with the application, two things will immediately become 
clear: Because the application does not set the Itemid property, you'll never see 
an account holder's address. Once you learn how to list items (in the next chapter), 
you can modify Userlnfo to set the Itemid property to a sold item and see a user's 
postal address. Similarly the only time you see a user's e-mail address is when 
the eBay user ID you enter is the same as the eBay user ID you enter for the API 
session in the Settings dialog box. This feature of the eBay SDK and the underlying 
API help preserve the user's privacy, and make it more difficult for casual users of 
the eBay interfaces to harvest e-mail and postal mail addresses for the purposes 
of sending unsolicited e-mail or postal mail. 

Managing Users with the eBay SDK 
Implementing Userinfo in C# 
The Userlnfo application uses the user interface framework for eBay sample appli-
cations I describe in the Appendix. The implementation itself consists of a Panel 
that contains two child Panel objects, one with controls to let you enter the eBay 
user ID, and the other a Listbox to let you select the API Detail level for the 
request to determine what information will be included in the results. 
The bulk of the application is trivial user interface code; you can see this in the 
sample code that accompanies this book. The eBay-specific work is done by 
the event handler for the Find button, aptly named find_ Click. You can see this 
method in Listing 4-1. 
Listing 4-1. The find_ Click Method of User Info 
1: private void find_Click(object sender, System.EventArgs e) 
2: { 
3: 
IGetUserCall api = new GetUserCall(); 
4: 
!User theUser = null; 
s: 
string resultString = null; 
6: 
7: 
// We're busy. 
8: 
this. Busy = true; 
9: 
this.StatusText = "Downloading ... "; 
10: 
11: 
// Set the API for this call. 
12: 
api.Errorlevel = 
13: 
ErrorlevelEnum.BothShortAndlongErrorStrings; 
14: 
api.ApiCallSession = this.ApiSession; 
15: 
16: 
api.Userld = this.userid.Text; 
17: 
api.Detaillevel = System.Convert.Tolnt32( 
18: 
this.detaillevel.Selectedltem ); 
19: 
20: 
try 
21: 
{ 
22: 
theUser = api.GetUser(); 
23: 
} 
24: 
catch( Exception ex ) 
25: 
{ 
26: 
resultString = "**Error**\n" + ex.Message; 
27: 
} 
28: 
89 

Chapter4 
90 
29: 
30: 
31: 
32: 
33: 
34: 
35: 
36: 
37: 
38: 
39: 
40: 
41: 
42: 
43: 
44: 
45: 
46: 
47: 
48: 
49: 
so: 
51: 
52: } 
if ( theUser != null ) 
{ 
} 
resultString = theUser.Userld + "\n" + 
theUser.Email + "\n" + 
theUser.PaymentAddress + "\n" + 
theUser.RegistrationAddress + "\n" + 
"Feedback score: " + theUser. FeedbackScore. ToString () + 
"\n\nThe user is " + 
( theUser. IdVerified ? "" : "not" ) + 
"verified.\n" + 
"The user " + 
( theUser.AboutMe ? "has" 
"doesn't have" ) + 
"an AboutMe page.\n"; 
this.result.Suspendlayout(); 
result.Text = resultString ; 
this.result.Enabled = true; 
this.result.Resumelayout(); 
II We're no longer busy. 
this.StatusText = ""; 
this.Busy = false; 
True to form, the bulk of this method is user interface code, too. It begins by 
using the user interface to tell the user that the application is busy accessing the 
eBay service on lines 8-9. Lines 12-14 do the usual preliminary setup of the newly 
created eBay SDK API instance, in this case an instance of the GetUserCall class. 
The first statement, spanning lines 12-13, chooses verbose error strings, because 
the application displays the eBay-delivered error strings in the event of an error. 
Line 14 initializes the api's ApiCallSession property to the ApiSession established 
by the framework when the application first launched. 
Lines 1&-18 initialize the GetUserCall specific properties, Userid and Detaillevel. 
The Userid property is set to the property you enter in the text box, while the 
Detail level property is set to the integer value of the string you select from the cor-
responding list box. 
The eBay SDK API call itself is wrapped in a try I catch block on lines 20-27. 
As you can see from line 22, the GetUser call returns a newly created User object, 
or null if the call fails. In the event of any error, the result string resul tString is 
set to the message generated by the exception. 
On success, the routine creates a human-readable string summarizing the 
contents of :the User object on lines 29-42. You have to do this, because the default 
User. ToString () method simply returns "eBay. SDK. Model. User", which isn'tterribly 
informative. 

Managing Users with the eBay SDK 
Once the result string is created, the routine uses it as the text of the result text 
box for you to see on lines 44-4 7. Finally, the routine restores the user interface to 
an active state on lines 49-51. 
Implementing Userinfo in Perl 
The Userlnfo application in Perl uses Perl/Tk to provide a GUI similar to the C# 
application you saw in the last section. You can see the Perl version of the User Info 
application in Figure 4-4. 
eBo.y User ID lso.ndy2718 
sandy2718 
sandy@lothlorien.com 
Deto.illevel 2 
4 
Payment address not pe~tted. 
Reqistration address not pe~tted. 
The user is veriried 
The user doesn't have an AboutMe paqe. 
Figure 4-4. The User Info application written in Perl 
Settings 
The application opens with the usual Perl/Tk component setup drudgery, 
which I'll skip for brevity here. All of the eBay interaction occurs when you click 
the Find button; it in turn calls the find_Click subroutine, which you can see in 
Listing 4-2. 
Listing 4-2. The Userlnfo find_ Click Subroutine in Perl 
1: sub find Click 
2: { 
3: 
$application->Busy( 1 ) ; 
4: 
s: 
my $api = Win32: :OLE->new( "eBay.SDK.API.GetUserCall" ); 
6: 
$api->{ApiCall}->{ApiCallSession} = 
7: 
$application->{APISESSION}; 
8: 
$api->{ApiCall}->{ErrorLevel} = 1; 
91 

Chapter4 
92 
9: 
10: 
11: 
12: 
13: 
14: 
15: 
16: 
17: 
18: 
19: 
20: 
21: 
22: 
23: 
24: 
25: 
26: 
27: 
28: 
29: 
30: 
31: 
32: 
33: 
34: 
35: 
36: 
37: 
38: 
39: 
40: 
41: 
42: } 
$api->{User!d} = $userid; 
my ( $detaillevelidx ) = $detaillevel->curselection(); 
$api->{Detaillevel} = $detaillevelidx * 2; 
my $theUser = $api->GetUser(); 
my $result= Win32::0LE->LastError(); 
# Show the results. 
if( $theUser ) 
{ 
} 
$result = $theUser->{Userid} â¢ "\n" â¢ 
$theUser->{Email} â¢ "\n"; 
$result .= $theUser->{PaymentAddress} â¢ "\n" 
if $theUser->{PaymentAddress}; 
$result .= "Payment address not permitted.\n" 
if !$theUser->{PaymentAddress}; 
$result .= $theUser->{RegistrationAddress} â¢ "\n" 
if $theUser->{RegistrationAddress}; 
$result .= "Registration address not permitted.\n" 
if !$theUser->{RegistrationAddress}; 
$result .= "The user is "; 
$result .= "not " if !$theUser->{IdVerified}; 
$result .= "verified\n"; 
$result .= "The user"; 
$result .= " has " if ( $theUser->{AboutMe} ); 
$result .= " doesn't have " if ( !$theUser->{AboutMe} ); 
$result .-
"an AboutMe page.\n"; 
$resultText->delete( "1.0", "end" ) ; 
$resultText->insert( "end", $result ); 
$application->Busy( 0 ); 
If you compare listing 4-2 with its predecessor, listing 4-l, you immediately 
see one of the beauties of the eBay SDK: You can accomplish the same tasks with 
the same eBay SDK components in different languages, and the only real difference 
you encounter is the syntax of the source language. 
The first line, line 3, sets the user interface framework to a busy state so that 
it will ignore user input. Next, on lines 5-12, the routine initializes the $api vari-
able with an eBay. SDK .API. GetUserCall COM object, which it will use to perform 
the Get User method. Most of the initialization is fairly straightforward, although 

Managing Users with the eBay SDK 
the shameless code on lines 11-12 to set $api->{Detailleve1} deserves explanation. 
Rather than getting the selected index of the $detailleve1list box and using it to 
get the associated value, and then converting the value to an integer, it short -circuits 
all of that and uses the knowledge that the value at a specific index is just twice 
the value of the index anyway. 
Lines 14-15 issue the GetUser call to the eBay service, capturing any error in 
the event that the call fails. Lines 17-37 convert the resulting User object, $theUser, 
to a human-readable string. Finally, lines 39-41 update the result text box with the 
data fetched from eBay and return the user interface to its normal state. 
Harnessing !Account: The AccountStatus Sample 
Application 
As you can see from Figure 4-5, the user interface to the AccountStatus sample 
application is very similar to that of the Userlnfo application. I've added controls 
to let you select whether you want to see a period or invoice view, and the page of 
the report to view, along with two more controls to let you enter date ranges 
when obtaining a period view. Once you enter these items, you click the Find 
button, and the results of the query are shown in the read-only text box below the 
input controls. 
J.i Conutner 
~-Â· ~ 
t- ALl]Ji' 
User jsandy2718 
VieN Pf!IIDd 
t~Â· 
Pll9e L1 __j;;:j I Find I 
I Sunday 
A.!gust 10. 2003 .:J 
I Sunday 
~ 
10. 2003 .:J 
Acc:oln: E401410001-USD 
;. 
Last Invoice D~e : 
111/000112:00:00 AM 
Last Invoice Amouri: 
0 
Last Paymert Date: 
111/00D1 12:00:00 AM 
Last Paymert Amotrtt: 
0 
6 
~Balance : 
-1.35 
PdNt:'/ listrxy 
8111/2003 
1225132 4500230236 
(~.3) 
8111/2003 
1225133 4500230236 
~"'!;05) 
[i] 
,_ , .... """"""" 
~~r"""~ 4rft~ft~~ 
Settings I 
Figure 4-5. The AccountStatus application (C# version) 
The application's interface reflects two important points regarding the 
GetAccountCall: You can only obtain the eBay account for the user logged in using 
93 

Chapter4 
94 
the current API session, and changing the Detail level of the GetAccountCall has 
no effect on the results from the GetAccount method invocation. 
Another thing you can see from Figure 4-5 is that for users who haven't had 
an invoice generated, the last invoice and payment dates will be invalid. This is 
an easy way to tell a newly created user from his or her account without needing 
to obtain a User object for the user. 
Implementing AccountStatus in C# 
Like Userlnfo, the eBay-specific operations in AccountStatus are contained 
within the Find button's event handler. Listing 4-3 shows the implementation 
of the find Click method. 
Listing 4-3. The find_Click Method of the AccountStatus Application 
1: 
2: 
3: 
4: 
5: 
6: 
7: 
8: 
9: 
10: 
11: 
12: 
13: 
14: 
15: 
16: 
17: 
18: 
19: 
20: 
21: 
22: 
23: 
24: 
25: 
26: 
27: 
private void find_Click(object sender, System.EventArgs e) 
{ 
IGetAccountCall api = new GetAccountCall(); 
!Account theAccount = null; 
string result5tring = null; 
II We're busy. 
this.Busy = true; 
this. Status Text = "Downloading â¢â¢â¢ "; 
II Set the API for this call. 
api.Errorlevel = 
ErrorlevelEnum.BothShortAndlongErrorStrings; 
api.ApiCallSession = this.ApiSession; 
api.PageNumber = System.Convert.To!nt32( 
this.pagenumber.Selected!tem ); 
a pi. View Type = 
(AccountViewEnum)this.viewtype.Selectedindex; 
switch( api.ViewType ) 
{ 
case AccountViewEnum.ViewByPeriod: 
api.PeriodViewOption = new PeriodViewSettings(); 
api.PeriodViewOption.DateRange = new DateRangeimpl(); 
api.PeriodViewOption.DateRange.BeginDate = 
this.startdate.Value; 
api.PeriodViewOption.DateRange.EndDate = 
this.enddate.Value; 
break; 

Managing Users with the eBay SDK 
28: 
29: 
case AccountViewEnum.ViewByinvoice: 
30: 
api.InvoiceViewOption = new InvoiceViewSettings(); 
31: 
api.InvoiceViewOption.InvoiceMonth = 
32: 
(InvoiceMonthEnum)this.Month; 
33: 
api.InvoiceViewOption.InvoiceYear = this.Year; 
34: 
break; 
35: 
} 
36: 
try 
37: 
{ 
38: 
theAccount = api.GetAccount(); 
39: 
} 
40: 
catch( Exception ex ) 
41: 
{ 
42: 
result String = "**Error**\n" + ex.Message; 
43: 
} 
44: 
// Create a nice string with the results. 
45: 
if ( theAccount != null ) 
46: 
{ 
47: 
resultString = "Account: " + theAccount.Id + "\n"; 
48: 
// Summary of invoice view 
49: 
if ( theAccount.InvoiceView != null ) 
so: 
{ 
51: 
resultString += "Amount Due:\t" + 
52: 
theAccount. InvoiceView. InvoiceBalance + "\n"; 
53: 
resultString += "Invoice Date:\t" + 
54: 
theAccount.InvoiceView.InvoiceDate.ToShortDateString() + 
55: 
"\n"; 
56: 
} 
57: 
// Summary of period view 
58: 
if ( theAccount.PeriodView != null ) 
59: 
{ 
60: 
resultString += "Last Invoice Date:\t\t" + 
61: 
theAccount. PeriodView. LastinvoiceDate. ToString() + "\n"; 
62: 
resultString += "Last Invoice Amount:\ t" + 
63: 
theAccount. PeriodView. LastinvoiceAmount. ToString() + "\n"; 
64: 
resultString += "Last Payment Date:\t\t" + 
65: 
theAccount. PeriodView. LastPaymentDate + "\n"; 
66: 
resultString += "Last Payment Amount:\t" + 
67: 
theAccount. PeriodView. LastAmountpaid + "\n"; 
68: 
resultString += "Current Balance:\t\t" + 
69: 
theAccount. PeriodView. Current Balance + "\n"; 
70: 
} 
95 

Chapter4 
96 
71: 
72: 
73: 
74: 
75: 
76: 
77: 
78: 
79: 
80: 
81: 
82: 
83: 
84: 
85: 
86: 
87: 
88: 
89: 
90: 
91: 
92: 
93: 
94: 
95: 
96: 
97: 
98: 
99: 
100: 
101: } 
} 
II Enumerate each of the account activities. 
resultString += "\nActivity History\n"; 
foreach ( AccountActivity activity in theAccount.Activities 
{ 
} 
resultString += activity .Date. ToShortDateString() + "\t"; 
resultString += activity.Id.ToString() + "\t" + 
activity. Item!d + " " + activity .Memo + "\t"; 
resultString += activity.Credit != 0 ? 
activity.Credit.ToString() : ""; 
resultString += activity.Debit != 0 ? "(" + 
activity.Debit.ToString() + ")" : ""; 
resultString += "\n"; 
II Update the pagenumber menu with the list pages. 
this.pagenumber.Items.Clear(); 
for ( inti= o; i <= api.TotalPages; i++ ) 
{ 
this.pagenumber.Items.Add( (i+1).ToString() ); 
} 
this.pagenumber.Selected!ndex = o; 
II Update the UI. 
this.result.Suspendlayout(); 
result.Text = resultString ; 
this.result.Enabled = true; 
this.result.Resumelayout(); 
II We're no longer busy. 
this.StatusText = ""; 
this.Busy = false; 
If you followed the implementation of Userlnfo in the previous section, this 
routine won't hold any surprises. It operates in exactly the same manner, and is 
longer only because an Account object has more to show you than a User object does. 
Lines 6-8 mark the user interface as busy, while lines 98-100 reverse the process, 
clearing the status text region and setting the cursor back to the standard pointer. 
Lines 9-12 set the GetAccountCall api. Errorlevel and api.APICallSession, and 
should be familiar to you by now. Lines 13-16 set the other two critical properties 
of the api object: PageNumber, to indicate the desired page number of the account 
information to fetch; and View Type, to indicate the type of account view you select 
with the corresponding Listbox. As you see on line 16, you can cheat when it comes 
to the View Type; by ordering the choices in the list box in the same order as the 

Managing Users with the eBay SDK 
enumeration values in AccountViewEnum, you make it easy to set the a pi. ViewType 
property from the index of the List box. 
The switch spanning lines 18-35 checks the View Type and creates the appro-
priate view options based on the ViewType. Because the eBay SDK uses the .NET 
Framework, it's easy to create an eBay DateRangeimpl and populate it with the values 
from the two date entry controls, all of which use the .NET Framework Date Time 
class to encapsulate a date and time value (lines 21-26). Obtaining the month 
and year for the invoice view settings is a little more problematic; as you can see 
from lines 30-33, in the end you could get around this by creating Month and Year 
properties for the application that get their values from the left-hand date control. 
It's admittedly a hack, but a reasonable one; the alternative would be to subclass 
the date control and give it the appropriate methods, or to put some rather ugly 
.NET-specific code on these lines. 
With the api properties in hand, line 38 executes its master method, the 
GetAccount method, returning an Account object or null. Of course, this operation 
is wrapped in a try I catch block, and if an error occurs, the exception's Message 
property will be shown to the user. If, on the other hand, all goes well and the 
code obtains a valid Account object (line 45), the results are converted to a string 
(lines 47-84). The manipulations to create the string representation hold few surprises, 
although the foreach loop on lines 73--83 is interesting because it demonstrates how 
to traverse an AccountActivity collection. 
Once the result string has been created, the routine updates the Listbox for 
selecting the page of an account report on lines 86--92. There're any number of 
ways you can do this, but this example shows the clearest, which is to iterate 
across all of the valid page numbers, adding an item in the Listbox for each page 
number, and then selecting the first item again. 
Finally, the routine updates the user interface with the result string (lines 93-97), 
and exits after setting the user interface to accept user events again. 
Implementing AccountStatus in Perl 
AccountStatus in Perl, like Userlnfo in Perl before it, harnesses the Perl/Tk 
framework to provide a user interface similar to that of AccountStatus written in 
C#. As you can see from Figure 4-6, the interface is a little rougher. In part, this is 
due to the nature of the Perl/Tk components, but to be fair to Perl/Tk, I wasn't 
trying to show you a perfect clone of the original AccountStatus application writ-
ten in C#, but something that was functionally equivalent and still usable. As an 
aside, the two-month user interfaces are provided by Slaven Rezic's Tk::Date mod-
ule, available from http: I /www. cpan. org and other fine purveyors of Perl modules 
everywhere. (I've included a copy of it with the source code that accompanies 
this book.) 
97 

Clulpter4 
7" AccountStatus 
eBey User 10 lsandy271 B 
98 
Find 
Account: E401410001-USD 
La~t Invoice Date: 
12/30/1899 
La~t Invoice Amount: 
0 
La~t Payment Date: 
12/30/1899 
La~t Payment Amount: 
0 
Current Balance: 
-1 . 35 
Settings 
Figure 4-6. The AccountStatus application written in Perl 
listing 4-4 shows the contents of the find_ Click subroutine of the AccountStatus 
application in Perl. As you read it, rest assured that I didn't just port the C# code with 
some secret C#-to-Perl converter; this is code I wrote by hand. It's really that easy to 
go between languages using the eBay SDK! 
Listing 4-4. The find_ Click Subroutine of the AccountStatus Application in Perl 
1: sub find Click 
2: { 
3: 
$application->Busy( 1 ) ; 
4: 
s: 
my $api = Win32::0LE->new( "eBay.SDK.API.GetAccountCall" ); 
6: 
$api->{ApiCall}->{ApiCall5ession} = 
7: 
$application->{APISESSION}; 
8: 
$api->{ApiCall}->{Errorlevel} = 1; 
9: 
10: 
{$api->{PageNumber}) = $pagenumber->curselection(); 
11: 
$api->{PageNumber} = 1 if !$api->{PageNumber}; 
12: 
{$api->{ViewType}) = $viewtype->curselection(); 
13: 
$api->{ViewType} = o if !$api->{ViewType}; 
14: 
15: 
if ( $api->{ViewType} == o ) 
16: 
{ 
17: 
my $popt = Win32: :OLE->new( 
18: 
"eBay. SDK. Model. Account. PeriodViewSettings" ) ; 
19: 
my $dr = Win32: :0LE->new( "eBay.SDK.API.DateRangelmpl" ); 
20: 
$dr->{BeginDate} = $startdate->get( "%Y-%m-%d" ); 
21: 
$dr->{EndDate} = $enddate->get( "%Y-%m-%d" ); 

Managing Users with the eBay SDK 
22: 
$popt->{DateRange} = $dr; 
23: 
$api->{PeriodViewOption} = $popt; 
24: 
} 
25: 
26: 
if ( $api->{ViewType} == 1 ) 
27: 
{ 
28: 
my $ivopt = 
Win32: :OLE->new( 
29: 
"eBay. SDK. Model. Account. InvoiceViewSettings" ) ; 
30: 
$ivopt->{InvoiceMonth} = $startdate- >get ( "%m" ) ; 
31: 
$ivopt->{InvoiceYear} = $startdate->get( "%y" ); 
32: 
$api->{InvoiceViewOption} = $ivopt; 
33: 
} 
34: 
35: 
my $theAccount = $api->GetAccount(); 
36: 
my $result = Win32: :OLE->LastError(); 
37: 
38: 
# Show the results. 
39: 
if( $theAccount ) 
40: 
{ 
41: 
$result = "Account: " â¢ $theAccount->{Id} . "\n"; 
42: 
if ( $theAccount->{InvoiceView} ) 
43: 
{ 
44: 
$result .= "Amount Due:\t" â¢ 
45: 
$theAccount->{InvoiceView}->{InvoiceBalance} . "\n"; 
46: 
$result .= "Invoice Date:\t" . 
47: 
$theAccount->{InvoiceView}->{InvoiceDate}->Date("MM/dd/yyyy")."\n"; 
48: 
} 
49: 
if ( $theAccount->{PeriodView} ) 
so: 
{ 
51: 
$result .= "Last Invoice Date:\t"; 
52: 
my $lid = $theAccount->{PeriodView}->{LastinvoiceDate}; 
53: 
$result .= $lid->Date("MM/dd/yyyy"); 
54: 
$result .= "\nLast Invoice Amount:\t" â¢ 
55: 
$theAccount->{PeriodView}->{LastlnvoiceAmount} . "\n"; 
56: 
$result â¢ = "Last Payment Date:\ t"; 
57: 
my $lpd = $theAccount->{PeriodView}->{LastPaymentDate}; 
58: 
$result .= $lpd->Date("MM/dd/yyyy"); 
59: 
$result .= "\nLast Payment Amount:\t" â¢ 
60: 
$theAccount->{PeriodView}->{LastAmountpaid} 
"\n"; 
61: 
$result .= "Current Balance:\t" â¢ 
62: 
$theAccount->{PeriodView}->{CurrentBalance} 
"\n"; 
63: 
} 
64: 
65: 
# Enumerate each of the account activities. 
99 

Chapter4 
100 
66: 
67: 
68: 
69: 
70: 
71: 
72: 
73: 
74: 
75: 
76: 
77: 
78: 
79: 
80: 
81: 
82: 
83: 
84: 
85: 
86: 
87: 
88: 
89: 
90: 
91: 
92: 
93: } 
} 
$result .= "\nActivity History\n"; 
my $i; 
for ( $i = o; 
{ 
} 
$i < $theAccount->{Activities}->ItemCount(); 
$i++ ) 
my $activity = $theAccount->{Activities}->ItemAt($i); 
$result .= $activity->{Date}->Date("MM/dd/yyyy") . "\t"; 
$result .= $activity->{Id} . "\t"; 
$result .= $activity->{Credit} . "\t" 
if $activity->{Credit}; 
$result .= "(" â¢ $activity->{Debit} 
")" . "\t" 
if $activity->{Debit}; 
$result .= "\n"; 
# Update the pagenumber menu with the list pages. 
$pagenumber->delete( o, "end" ); 
for ( $i = 1; $i <= $api->{TotalPages}; $i++ ) 
{ 
$pagenumber->insert( "end", "$i" ) ; 
} 
$resultText->delete( "1.0", "end" ) ; 
$resultText->insert( "end", $result ); 
$application->Busy( 0 ); 
This routine begins, like the routines before it, by blocking incoming user 
interface events and changing the cursor to a busy cursor by invoking the 
framework's Busy method on line 3. After that, it creates and initializes a new 
eBay. SDK.API .GetAccountCall COM object, setting its ApiCallSession and 
Errorlevel slots with appropriate values. 
Next, on lines 10-13, you set $api->{PageNumber} and $api->{ViewType} to the 
values indicated by the two list box controls. Lines 11 and 13 perform some sim-
ple error checking, providing some reasonable defaults in case you don't select 
items from each list box. Critics will point out that the AccountStatus sample in 
C# doesn't do this, and to be fair, it probably should. 
Lines 15-24 create and initialize a fresh PeriodViewSettings object. This is the 
sort of code that casts the .NET Framework in a positive light; it's just a little 
more tedious than it ought to be to do this kind of thing in Perl. Nonetheless, it's 
not difficult, as you can see. The code begins by creating the PeriodViewSettings 

Managing Users with the eBay SDK 
object and its DateRangeimp1 object on lines 17-19. You could store them in temporary 
variables to keep the code tidy and avoid horribly long lines of code that don't 
read well on paper as shown in this example, but you certainly don't have to. 
Once you create them, use the Tk::Date module's get method to obtain the values 
of each of the date entry controls. This method takes a single argument, the format 
of the date as a string using the same keywords as the POSIX function strftime. 
If you omit the argument, you get the entered time in seconds since the beginning 
of the Unix epoch, which isn't helpful when working with eBay. 
Lines 27-33 do the same thing for an InvoiceView object. As you can see from 
the if statements on lines 15 and 27, you need only a PeriodView or an InvoiceView, 
but not both. 
Lines 35-36 make the GetAccount call, obtaining an error message should an 
error occur. The resulting $theAccount variable is used to craft a result string for 
human consumption on lines 39-87. There are two things worth noting here. 
First, if you're not used to using the Win32::0LE module, you're probably not 
clear on the code on lines 47, 52, and 57. The Account OLE class, when wrapped 
by Perl, stores dates as Win32::0LE::Variant objects, which can encapsulate some 
mixed types. Thus, to get access to the date itself, you need to use its Date func-
tion and provide a format string. The full details of the format string are included 
in the Plain Old Documentation (POD) forWin32::0LE, but they're intuitive, as 
you can see from the examples here, which generate dates in mm!ddlyyyy format 
with leading zeros for single-digit dates. 
Second, the loop on lines 67-80 demonstrates how to iterate the elements 
of an eBay collection, in this case, an ActivityCollection. The code is simple, of 
course-find out how many items are in the collection by calling its ItemCount 
method, and then use its ItemAt method with an index to fetch a specific item. 
Once the $result string has been built up with pieces of $theAccount, it's 
copied into the $resu1tText object (a read-only text string of type Tk: :ROText), 
and the user interface is returned to its normal state. 
Key Points 
In this chapter, you learned the following key points about how to manage users 
with the eBay SDK: 
â¢ You can obtain a user's information with eBay .SDK.API.GetUserCa1l. The 
result you receive is a !User object with the desired results. 
â¢ You can obtain a user's account information with the 
eBay. SDK. API. GetAccountCall object. The result you receive is an 
!Account object with the desired results, along with updates to the 
eBay. SDK. API. GetAccountCall object. 
101 

Chapter4 
102 
â¢ The eBay. SDK. Model. User namespace contains the User class and helper 
enumerations to represent the notion of an eBay user. 
â¢ The eBay. SDK. Model.Account namespace contains the Account class and a host 
of helper classes and enumerations to describe how eBay users pay for their 
use of eBay services. 

CHAPTER 5 
Managing Items 
with the eBay SDK 
ALTHOUGH USERS ARE ONE cornerstone of the foundation of the eBay SDK data 
model, items are another. Just as the User class and its helper classes let you 
manipulate users with the eBay interface calls in the eBay SDK, the Item class 
and its helper classes let you represent items and their sales on eBay. 
In this chapter, you learn all about how to work with items using the eBay 
SDK. I open with an introduction to the components in the eBay. SDK. Model. Item 
namespace, followed by an in-depth look at eBay's SimpleList application. After 
that, I examine the eBay. SDK. Model. Feedback namespace and its contents. 
Looking Under the Hood at the eBay.SDK.Model.Item 
Namespace 
At the heart of the eBay. SDK. Model. Item names pace is the Item class, but it's not 
alone. This namespace contains a plethora of classes for describing items, most 
of which provide data encapsulation for specific attributes of items, such as what 
state an item is in with respect to an auction. 
The principal use of the components in this namespace is to enable your 
applications to list items using the methods in the ebay. SDK. API names pace. 
Table 5-l lists the API classes that use members of the eBay. SDK. Model. Item 
namespace. 
Table 5-1. eBay.SDK.API Classes Using eBay.SDKModel.Item Namespace 
Components 
API 
AdditemCall 
AddToitem 
DescriptionCall 
EnditemCall 
GetitemCall 
Purpose 
Lists a new item on eBay. Takes the item description from an 
Item object. 
Adds additional information to an existing item's description. 
Ends an auction before its duration has elapsed. 
Retrieves the description of a single item, returning an litem object. 
103 

ChapterS 
104 
Table 5-1. eBay.SDK.API Classes Using eBay.SDK.Model.Item Namespace 
Components (continued) 
API 
RelistitemCall 
ReviseltemCall 
VerifyAddltemCall 
Purpose 
Relists an existing item that didn't sell in a new auction. 
Modifies the definition of an existing item using data from an 
litem object. 
Validates without listing an item described by an litem object, 
returning an estimation of listing fees for the described item. 
Representing eBay Items with the Item and ItemFound 
Classes and Their Collections 
At first blush, the Item class is positively overwhelming-its list of properties is 
simply huge. To adequately describe an item and its relationship to other eBay 
components in its entirety takes a plethora of properties; Table 5-2 shows the 
properties of the Item class accessible through the litem interface. 
Table 5-2. Important Properties of the Item Class 
Property 
AppData 
ApplicationData 
Attributes 
BidCount 
Bid Increment 
BuyltNowPrice 
Category2Id 
Categoryld 
Checkout 
Purpose 
A generic Object field that can hold an application-specific 
object. Not shared with eBay. 
A 32-character string that the application may use to describe 
the item. This field is shared with and stored by eBay. 
Contains the attributes for the item. Originally used by eBay 
Motors, now a property of all items. 
The number of bids that have been placed on the item. 
The amount that each bid must be above the previous bid to 
qualify as a bid. 
The amount an eBay user must pay to purchase the item and 
end the auction immediately. 
The ID of the secondary category in which the item will be 
listed, if the user chooses to list the item in more than one 
category. 
The ID of the category in which the item has been listed. 
The item's checkout details and status. 

Managing Items with the eBay SDK 
Table 5-2. Important Properties of the Item Class (continued) 
Property 
Converted Price 
Counter 
Country 
Currency 
Currencyld 
Current Price 
Purpose 
The item's price after undergoing conversion to the 
Si teCurrency for the eBay API transaction. 
An element of the HitCounterEnum enumeration indicating 
how the seller wants to count page hits to the item's listing. 
The two-character country code of the country where the 
seller and his or her item are located. 
The country code of the currency used to list the item. 
The symbol for the currency used to list the item, such as 
$or â¬:. 
The current price (highest bid) for the item. If no bids have 
been placed, the current price is the minimum bid. 
Description 
The text of the description of the item. 
Duration 
The number of days the item will be up for auction. Used 
when listing an item, and values may be restricted based 
on the business rules for specific auctions. 
EndTime 
The eBay time at which the auction ends. 
Estimated Fees 
An estimation of the fees that eBaywill charge for the item. 
EstimatedFeesCurrency 
Currency ID for the site where the selling user registered. 
GalleryUr 1 
The URL for the gallery picture for the item. 
Gi ftOptions 
Gift options for the item. 
High Bidder 
The current high bidding user for the item. 
Itemld 
The unique eBay item ID for the item. 
ItemRevised 
If true, the item has been revised since its initial listing. 
LeadCount 
For advertisement items (such as real estate auctions), 
indicates how many leads to potential buyers are associated 
with this item. 
ListingDesigner 
eBay Listing Designer-specific information. 
ListingFeatures 
Listing features for the item, such as whether the title should 
be bold. 
Location 
The geographic location of the item. 
MinimumToBid 
The minimum acceptable bid for the item. 
Modi fiedProperties 
list of the properties that have been modified for the item. 
105 

ChapterS 
106 
Table 5-2. Important Properties of the Item Class (continued) 
Property 
PaymentTerms 
PhotoCount 
PhotoUrl 
PrivateAuction 
Quanitity 
QuantitySold 
Region 
Regionid 
Relistid 
ReservePrice 
Seller 
ShippingOptions 
Start Price 
StartTime 
Status 
StoreCategory 
Storefrontitem 
Store location 
Time left 
Title 
TitleBarimage 
Type 
Uuid 
Zip 
Purpose 
Container for a description of the payment terms accepted 
by the seller. 
The number of pictures associated with the item using eBay's 
picture services. 
A semicolon-delimited list of URLs to pictures of the item. 
If true, indicates that the item is listed in a private auction. 
The number of items being sold in the auction for this !Item. 
The number of items already sold in the auction for this !Item. 
The geographic region where this item is being sold. 
The numeric ID corresponding to the Region property. 
The numeric ID of the new listing when an item is being 
relisted. 
The reserve price for the auction if one has been set. 
The user selling the item as an eBay User. 
A container for options about how the item may be shipped. 
The starting price for the item. 
The date and time that the item was first made available for 
auction. 
The item status, available only when using GetitemCall. 
Custom categories for dividing items within an eBay store. 
If true, the item is in an eBay storefront. 
For an eBay stores item listing, the URL to the seller's 
eBay stores page. 
The time remaining for the auction. 
The title of the item. 
If true, an image appears with the title bar for the item in 
the listing page. 
The type oflisting used to sell the item on eBay. 
A globally unique identifier for the item. Assigned by eBay via 
an eBay SDK API call or via the creation of a new Uuid object. 
The zip code of the seller. 

Managing Items with the eBay SDK 
It's important to remember when reviewing these properties that an eBay item 
can be one or more things. It's best to think of an item as a blob that's listed for 
auction; this blob can contain more than one item, such as is the case for Dutch 
auctions (see Table 2-1 of Chapter 2). Thus, you might create an item for an auc-
tion of rare pencils, and have six pencils listed in the auction, each of which can 
go to a different high bidder. From the perspective of the eBay SDK, this is one 
item (with a quantity of six), not six individual items, because its sale is managed 
through one auction. 
Don't be confused by the ApplicationData and AppData properties either. 
The former is a container that is stored on the eBay service, which you can 
use as a persistent store to cross-reference the item with your application, for 
example, by using it to store an item's unique identifier in a non-eBay source 
database. The latter, however, is not shared with eBay, and persists for only as 
long as the Item object exists. You can use it to store an object such as a user 
interface control or another widget that pertains to your application's operation. 
Some properties, such as Attributes and LeadCount, are applicable to only 
certain kinds of auctions at certain sites of eBay. These properties may not be 
available when obtaining an Item for just any auction, so you should always test 
for their existence first, unless your application's business logic ensures that the 
items it manages are for those auctions. This reflects a key design philosophy of 
eBay's engineers: a simple, relatively flat hierarchy with few interfaces and classes, 
rather than a proliferation of special-case classes or adornments to interfaces. 
The helper classes GiftOptions, Status, PaymentTerms, ShippingOptions, and 
ShippingRegions encapsulate information about items. Tables 5-3 through 5-8 show 
the properties of the GiftSettings, ItemStatus, PaymentTerms, ShippingPayment, and 
ShippingOptions classes, respectively. 
Table 5-3. Properties of the GiftOptions Class 
Property 
GiftExpressShipping 
Gift Icon 
GiftShipToRecipient 
GiftWrap 
Purpose 
If true, the seller is offering to ship the item via an express 
shipping method (named in the item description). 
If true, a generic gift icon appears in the item's listing. 
If true, the seller is offering to ship to the gift recipient, not the 
buyer, when payment clears. 
If true, the seller is offering to gift wrap the item (and possibly 
include a card) as described in the item description. 
107 

ChapterS 
108 
Table 5-4. Properties of the Status Class 
Property 
Adult 
BindingAuction 
Bin lowered 
CheckoutEnabled 
Reserve lowered 
ReserveMet 
Purpose 
Indicates that the item is an adult -only item, only visible to 
those who agree to eBay's Mature Category agreement. 
When true, indicates that buyer and seller intend to follow 
through on the transaction. Used by real estate auctions. 
If true, indicates that the Buy It Now price has been 
lowered. Used by eBay Motors auctions. 
If true, checkout is enabled for this item. 
If true, the seller has lowered the reserve price for the item. 
Used by eBay Motors auctions. 
If true, the item's reserved price has been met. This is null 
for International Fixed Price items. 
Table 5-5. Properties of the PaymentTerms Class 
Property 
Am Ex 
CashOnPickupAccepted 
CCAccepted 
COD 
Discover 
Escrow 
MOCashiers 
ModifiedProperties 
MoneyXferAccepted 
MoneyXferAccepted 
InCheckout 
Other 
OtherPaymentsOnline 
Purpose 
When true, the seller accepts American Express. 
When true, the seller accepts payment on pickup of the item. 
When true, the seller accepts credit card payment. 
When true, the seller accepts cash-an-delivery payment. 
When true, the seller accepts the Discover card. 
Specifies escrow options, as described by the EscrowEnum 
enumeration. 
When true, money orders and cashier's checks are accepted. 
lists the names of modified properties. 
When true, the seller accepts a money transfer. 
When true, the seller accepts a money transfer at checkout 
time by users who have their bank account information on file 
witheBay. 
When true, the seller accepts other forms of payment as 
described in the item's description. 
When true, the seller accepts other non-eBay forms of online 
payment. 

Managing Items with the eBay SDK 
Table 5-5. Properties of the PaymentTerms Class (continued) 
Property 
PayPalAccepted 
PayPalEmailAddress 
PersonalCheck 
SeeDescription 
VisaMaster 
Purpose 
When true, the seller accepts PayPal payments. 
Contains the Pay Pal address of the seller, returned when 
calling Get Item. 
When true, the seller accepts personal checks. 
When true, the acceptable payments are listed in the item 
description. 
When true, the seller accepts Visa and Mastercard. 
Table 5-6. Properties of the ShippingPayment Class 
Property 
ModifiedProperties 
SeeDescription 
WhoPays 
Purpose 
Lists the names of modified properties 
Specifies shipping terms in item description 
Represents an element of the WhoPaysShipping enumeration to 
indicate who is responsible for paying shipping 
Table 5-7. Properties of the ShippingRegions Class 
Property 
Purpose 
Africa 
When true, the seller will ship the item to Mrica. 
Asia 
When true, the seller will ship the item to Asia. 
Caribbean 
When true, the seller will ship the item to the Caribbean. 
Europe 
When true, the seller will ship the item to Europe. 
LatinAmerica 
When true, the seller will ship the item to Latin America. 
MiddleEast 
When true, the seller will ship the item to the Middle East. 
Modi fiedProperties 
Lists the names of modified properties. 
NorthAmerica 
When true, the seller will ship the item to North America. 
Oceana 
When true, the seller will ship the item to Pacific islands other 
than those in Asia. 
SouthAmerica 
When true, the seller will ship the item to South America. 
109 

ChapterS 
110 
Table 5-B. Properties of the ShippingSettings Class 
Property 
ShippingPayment 
ShippingRange 
ShippingRegions 
Purpose 
Shipping options described by a Shipping Payment object. 
Where the seller will ship the item as described by 
a ShippingRangeEnumerator. 
When ShippingRange is ShippingRangeEnum. SiteAndRegions, 
this field contains a ShippingRegions object. 
Representing Fees for Listing Items with the 
eBay.SDK.Model.Item.Fees Class 
At the heart of eBay's business model is charging fees for carrying items for auction. 
eBay charges a variety of listing fees when you list an item for auction, depending 
on the marketing tools you choose to use to help promote your auction on the eBay 
site where you list an item when you list that item. To help your application present 
these fees to your customers, use the Fees class and its !Fees interface. Table 5-9 
shows the properties of the Fees class and its interface. 
Table 5-9. Properties of the Fees Class 
Property 
Auction length Fee 
Bold Fee 
BuyitNowFee 
CategoryFeaturedFee 
Currencyid 
Featured Fee 
FeaturedGalleryFee 
FixedPriceDurationFee 
GalleryFee 
Gift! con Fee 
Highlight Fee 
Purpose 
The fee for a ten-day auction. 
The fee for listing the auction's title in bold. 
The fee for adding a Buy It Now option to the item's listing. 
The fee for having the item featured in its category. 
The seller's currency ID. 
The fee for having the item featured at the top of item 
listings. 
The fee for having the item featured in its gallery. 
The fee for listing a fixed-price item for a specific duration. 
The fee for having the item included in the gallery. 
The fee for including a gift icon in the listing. 
The fee for having the item listing highlighted. 

Managing Items with the eBay SDK 
Table 5-9. Properties of the Fees Class (continued) 
Property 
Insertion Fee 
Listing Fee 
PhotoDisplayFee 
Photo Fee 
ReserveFee 
Scheduling Fee 
Purpose 
The fee for listing the item on the eBay service. 
The total fee for listing the item. Includes the basic fee, 
Insertion Fee, plus any specialty listing features. 
Fee for using the eBay Photo Hosting feature. 
Fee for associating 1-6 photos with the item. 
Fee for placing a reserve on an item. 
Fee for scheduling an item to be listed at a later time. 
The Fees class is a container for all of the fees that may be charged at item 
insertion time. The base fee, stored in the Insertion Fee property, shows the base 
fee for listing the item for auction. Other properties provide itemized fees for 
other listing options, while the ListingFee provides the total cost for listing an 
option so that your application doesn't need to calculate the sum of all fees. 
Serializing eBay.SDK.Model.Item Helper Classes 
Several of the classes in the eBay.SDK.Model.Item namespace have accompanying 
serializing helpers, which let you convert between a class object and its representa-
tion as a hash table (a System. Collections. Hashtable object). The eBay SDK provides 
serializing helpers for the ListingFeatures, PaymentTerms, ShippingPayment, and 
ShippingRegions classes with the ListingFeaturesSerializer, PaymentTermsSerializer, 
ShippingPaymentSerializer, and ShippingRegionsSerializer classes. Each of these 
have two methods: 
â¢ The FromHashtable method constructs an instance of the class the serializing 
helper assists from the hash table that you provide. 
â¢ The ToHashtable method constructs a hash table from an instance of the 
class the serializing helper assists that you provide. 
Tables 5-10 through 5-13list the properties of each of the helper classes. 
111 

ChapterS 
112 
Table 5-10. Properties of the ListingFeaturesSerializer Class 
Property 
Purpose 
ListingFeatures 
The ListingFeatures associated with this object 
Modi fiedOnl y 
If true, serializes only modified properties 
Table 5-11. Properties of the PaymentTermsSerializer Class 
Property 
PaymentTerms 
ModifiedOnly 
Purpose 
The PaymentTerms associated with this object 
If true, serializes only modified properties 
Table 5-12. Properties of the ShippingPaymentSerializer Class 
Property 
ShippingPayment 
ModifiedOnly 
Purpose 
The ShippingPayment associated with this object 
If true, serializes only modified properties 
Table 5-13. Properties of the ShippingRegionsSerializer Class 
Property 
ShippingRegions 
ModifiedOnly 
Purpose 
The ShippingRegions associated with this object 
If true, serializes only modified properties 
Examining the eBay Simplelist Sample Application 
When learning a new platform, it's always important to remember that there's more 
than one way to do something. In this spirit, let's take a look at the SimpleList 
example that accompanies the eBay SDK. Here, I'll examine the C# implementation, 
because the Perl implementation is straightforward: Prompt the user using console 
input/ output for the item characteristics and then use an AddltemCall object to add 
the item to the service. The C# version, on the other hand, uses the extensive sup-
port of the Microsoft Wmdows GUI found in the .NET Framework to provide a simple 
GUI for listing items on eBay. Figures 5-l and 5-2 show some of the GUI for the 
C# Simplelist application. 

Managing Items with the eBay SDK 
Tdie, 
fl'on~aga Pickel N800ES SliM Rulo 
StonPnc. 
BINpnce 
1100 
Doscripllan 
ontage. seldom usod N800ES sliM rulo in oxcollont 
eondilon. lnclud<os manual and""'"' Pic:koa case: 
Add 
I 
--dJ 
-----
r --IAPIC41l.OnPootR.ques00nl 
r Horde -IAPlCollOnRecerveAooponM)Cinl 
l..iol Mol (IAddltamCal) 
elley Usetld. 
Pllss-.-.1: 
Figure 5-l. Authenticating your account in 
SimpleList 
Figure 5-2. Listing your item in SimpleList 
Authenticating the User 
Figure 5-1 shows a more traditional user login screen than you've seen in the exam-
ples I provide elsewhere in this book. The SimpleList application prompts you for 
your eBay developer keys, as well as the seller's login and password. This is the exact 
opposite approach than taken in the examples you've seen, but is equally valid. 
This form is implemented in the Account Form class; the only eBay-specific code is in 
mBtnContinue_Click. Listing 5-1 shows this method. 
Listing 5-1. The mBtnContinue_Click Method oftheAccountForm Class 
1: private void mBtnContinue_Click( object sender, 
2: 
System.EventArgs e) 
3: { 
4: 
mApiSession = new ApiSession(); 
5: 
6: 
mApiSession.LogCallXml = true; 
mApiSession .Application = mTxtApplicationid.Text; 
mApiSession.Developer = mTxtDeveloperld.Text; 
mApiSession.Certificate = mTxtCertificate.Text; 
mApiSession.RequestUserld = this.mTxtUser.Text; 
mApiSession.RequestPassword = this.mTxtUserPass.Text; 
mApiSession.Url = mTxtUrl.Text; 
7: 
8: 
9: 
10: 
11: 
12 : 
13: } 
113 

ChapterS 
114 
Pretty anticlimactic, wouldn't you say? The Account Form class is essentially the 
same as the Config class for the sample applications in this book (which you can 
see in its entirety in the Appendix), prompting users for their account information 
and storing them in the eBay !API Session for the application. 
To implement a more modal-oriented login slip that actually authenticates the 
user, you can use the method that stores the session data to issue an eBay API call 
to verify the account and password. 1\vo good choices are GeteBayOfficial TimeCall 
and GetLogoUrlCall. The former call returns the official time of the eBay clock, and 
you can use the result to determine the clock offset between the application host 
and eBay-good for when you need to precisely time events with the eBay service. 
The other, GetLogoUr lCall, returns the URL of the eBay logo your application can 
show in co branding with eBay. This is an especially good choice if your application 
has an About box or similar information available from its main screen, because 
you can then update your application interface to meet any changes in content 
provided by eBay. 
Whether to authenticate a user at the time the application is launched or when 
the application first issues an eBay API regarding application data depends on the 
nature of your application and the sensitivity of the data it maintains. Many appli-
cations, especially consumer applications, would do well to prompt for your 
credentials on first launch via a configuration wizard or the like, and then 
defer credential verification until you actually try to perform something meaningful 
with the eBay service. This reflects the current thinking in application design, 
minimizing the amount of interaction your application requires. Vertical appli-
cations, however, especially those used by more than one person, may well want 
to require an initial credential check via an eBay SDK API invocation before access-
ing application data to ensure data security and integrity. 
Listing an Item 
The SimpleList application uses the FormSimplelist class to list an item on eBay. 
Like the AccountForm class, the FormSimplelist class collects all of your user input, 
letting you describing the item to list and only interacting with eBay when you 
actually submit the item for sale. This is good design practice; it postpones 
application latency for as long as possible, while still holding the number ofWeb 
transactions with eBay to a minimum. (In the next chapter, you will learn about 
how the eBay Integration Library can also help you control application latency 
by caching eBay Web transactions via an intermediary database.) The interaction 
with eBay occurs in two methods, FillitemFields and Btnlistitem_Click. Both are 
shown in Listing 5-2. 

Listing 5-2. The FillltemFields and BtnListltem_Click Methods 
1: private !Item FillitemFields() 
2: { 
3: 
!Item item = new Item(); 
4: 
5: 
II Generate a unique UUID. 
6: 
item.Uuid = new eBay.SDK.Model.Uuid(true); 
7: 
8: 
II If using other than o (US), make sure 
9: 
II LibraryManager.InternationUrl is defined and valid. 
10: 
item.Siteid = SiteidEnum.US; 
11: 
12: 
item.Title = mTitle.Text; 
13: 
item.Type = ItemTypes.Auction; 
14: 
item.Description = mDescription.Text; 
15: 
item.Currency = CurrencyEnum.USDollar; 
16: 
item.Location = "San Jose, CA"; 
17: 
item.Country = "us"; 
18: 
item.Categoryid = Int32.Parse(mCategory.Text); 
19: 
item.Quantity = Int32.Parse(mQuantity.Text); 
20: 
item.StartPrice = Decimal.Parse(mMinimunBid.Text); 
21: 
item.Duration = 3; 
22: 
item.BuyitNowPrice = Decimal.Parse(mBINPrice.Text); 
23: 
item.ReservePrice = o; 
24: 
item.ListingFeatures.BoldTitle = true; 
25: 
item.PaymentTerms.SeeDescription = true; 
26: 
item.ShippingOptions.ShippingRange = 
27: 
ShippingRangeEnum.SiteOnly; 
28: 
item.ShippingOptions.ShippingPayment.WhoPay = 
29: 
WhoPayShippingEnum.BuyerPaysActual; 
30: 
return item; 
31: } 
32: 
33: private void Btnlistitem_Click( object sender, 
34: 
System.EventArgs e) 
35: { 
36: 
II Now let's start listing the item. 
37: 
II Define your Item. 
38: 
!Item item = FillitemFields(); 
39: 
40: 
II Make AdditemCall from ebay SDK API. 
41: 
IAdditemCall api = new AdditemCall(mApiSession); 
42: 
api.ItemToAdd = item; 
Managing Items with the eBay SDK 
115 

ChapterS 
43: 
44: 
45: 
46: 
47: 
48: 
49: 
so: 
51: 
52: 
53: 
54: 
55: 
56: 
57: 
58: 
59: 
60: 
61: 
62: 
63: 
64: 
65: 
66: 
67: 
68: 
69: 
70: 
71: 
72: 
73: 
74: 
75: 
76: 
77: 
78: 
79: 
80: 
81: 
82: 
83: 
84: 
85: 
86: 
87: } 
116 
api.Errorlevel = ErrorlevelEnum.BothShortAndlongErrorStrings; 
II Install event handlers. 
if( this.chkbOnPostRequestXml.Checked ) 
api.OnPostRequestXml += 
new FilterXmlHandler(this.HandleOnPostRequestXml); 
if( this.chkbOnReceiveResponseXml.Checked ) 
api.OnReceiveResposeXml += 
new FilterXmlHandler(this.HandleOnReceiveResponseXml); 
II Add all pictures that we selected for this item. 
II These pictures will be uploaded and hosted in iPix. 
II 
II iPix support is a feature of AdditemCall class, 
II not Item class. 
II Setting AdditemCall.PictureFiles will cause Item.PhotoUrl 
II and Item.PhotoCount to be ignored by AdditemCall. 
foreach( string imgFile in ListBoxPictures.Items 
api.PictureFiles.Add(imgFile); 
II Always use Try/Catch to guard API calls. 
try 
{ 
} 
II !Fees is returned with details of fee information. 
!Fees ife = api.Additem(); 
II If there's an error an exception will be thrown. 
II So when we get to here everything is OK. 
MessageBox.Show( 
"Additem succeeded! The new item id is: " + item.Itemid); 
catch(APIException ex) 
{ 
MessageBox.Show( 
"APIException - Additem call failed: " + ex.Message); 
} 
catch(Exception ex) 
{ 
MessageBox.Show( 
"Exception - Additem call failed: " + ex.Message); 
} 

Managing Items with the eBay SDK 
The first method, FillitemFields, is straightforward, save line 6, which shows 
how to use the Uuid interface to create a new unique ID for an item to be added to 
eBay. After line 6, the remainder of the method simply copies data from the appro-
priate user interface objects and populates the newly created Item object (created 
on declaration on line 3). If you're new to C#, be sure to note the Parse method of 
classes such as Int32 and Decimal (lines 18, 19, and 20), which you can use to convert 
between a String object and an object of another class. 
The heavy lifting of the SimpleList sample application is done by 
BtnListitem_Click, which creates anAdditemCall to add the item, uses FillitemFields 
to create and populate a new Item based on your user input, and then uses the 
AdditemCall.Additem method to add the item to eBay. Starting on line 38, the method 
uses FillitemFields to create a unique ID for the item and gather its description and 
other characteristics from the application user interface. Next, on lines 41-43, the 
application creates and initializes api, the AdditemCall object. lines 46-52 create 
event handlers for the outgoing and incoming XML; I discuss this in detail in the next 
section, "Intercepting the eBay API XML." 
Lines 62-63 add the pictures of the item you select to the 
AdditemCall. PictureFiles property, instructing eBay to host the pictures on your 
behalf. By doing this, not only does the eBay server ignore the Item. PhotoUrl and 
Item. PhotoCount properties of the associated item, but it will upload the files 
named in the Picture Files collection, making it easy for an Item to simultane-
ously submit pictures of an item for listing. 
lines 66-75 issue the Add Item call, contained within the obligatory try block that 
protects your application from embarrassing runtime failures because the Internet 
path to eBay is down or something else goes awry on the network. The eBay-written 
catch expressions on lines 77-86 are a little more descriptive than what I've shown you; 
they differentiate between generic .NET Framework Exception objects and API-
generated exception objects, denoted by the API Exception type. 
Intercepting the eBay API XML 
The eBay. SDK.API interfaces include the OnPostRequestXml and OnReceiveResponseXML 
properties through their common superclass API Call, which can store event han-
dlers that the eBay SDK invokes when the underlying eBay API XML is composed 
or the eBay API XML response is received, respectively. These are fully qualified 
event handlers, and you may chain these event handlers as you would other 
.NET event handlers by simply adding new event handlers to the property using 
+= (lines 46-52). 
Using one of these event handlers, you can intercept the outgoing or incoming 
XML, delivered to your event handler in an Fil terXmlEventArgs object. This class 
has one public property, the Xml property, which contains the outgoing or incoming 
XML. You can mutate this XML by assigning new XML to this property, although 
the most common use for this property is to simply view it for debugging purposes. 
117 

ChapterS 
118 
When first studying the underlying eBay API (see Chapters 8 and 9), I found it 
handy to dump the contents of this property to the console to check the XML 
I was using to invoke eBay API methods directly over HTTPS. 
Representing Feedback with the Feedback Class and 
Its Collection, the FeedbackCollection Class 
The eBay. SDK.Model. Feedback namespace contains two classes: the Feedback class 
and the FeedbackCollection class. Together, they let your application collect indi-
vidual feedback items from specific transactions, or leave feedback for buyers of 
your products. Table 5-14 shows the properties of the Feedback class. 
Table 5-14. Properties of the Feedback Class 
Property 
AppData 
CommentingUserld 
CommentingUserScore 
Comment Text 
CommentType 
FeedbackRole 
Followup 
Itemld 
Response 
TimeOfComment 
Transactionld 
Purpose 
A generic object to store application data. Not shared with 
the eBay service. 
The user ID of the user who is leaving the feedback. 
The user feedback score of the user leaving the feedback. 
The comment text of the feedback entry. 
The type of feedback (an element of the Comment Types 
enumeration, either Positive, Negative, or Neutral). 
Indication of whether the user leaving feedback is leaving 
feedback ToBuyer or ToSeller. 
The text left by the commenting user in response to the 
Response. 
The item pertaining to the feedback. 
The text left by the feedback recipient in response to the 
CommentText. 
The time and date that the user left the comment entry. 
The transaction to which this feedback pertains. 
As you can see from Table 5-14, an exchange of feedback has at least two 
and at most four components: 

Managing Items with the eBay SDK 
â¢ The CommentingUserScore, indicating the user score the commenting user 
gives the receiving user, a numeric value. A feedback item must have 
this value. 
â¢ The CommentText, a short note regarding the transaction. A feedback item 
must have this value. 
â¢ The Response, an optional text message left by the receiving user regarding 
the transaction. 
â¢ The Followup, an optional text message left by the commenting user in 
response to the Response. 
The FeedbackCollection is simply a collection of Feedback objects, and you 
can treat it just as you would any other collection (see Chapter 3 for an example 
using the CategoryCollection, which shares the same base class and interface). 
The eBay SDK API provides two classes that manipulate Feedback objects. 
The first, GetFeedbackCall, lets you obtain the history of feedback left for a specific 
user. The feedback is returned by pages, so that a single query doesn't necessarily 
return every feedback item left for a specific user. By breaking the query response 
into pages, you can optimize network access between your application and the 
server. The example in the next section shows you how to use GetFeedbackCall. 
The other call, LeaveFeedbackCall, lets you leave feedback for a specific user 
with a specific Feedback object. In addition to filling its Comment field, you must 
specify the recipient of the feedback using the TargetUser field before invoking 
eBay.SDK.API.LeaveFeedbackCall.LeaveFeedback. 
Key Points 
In this chapter, you learned the following key points about how to manage items 
and user feedback with the eBay SDK. 
â¢ The eBay Item class and its !Item interface encapsulate the notion of an 
eBay item for sale. 
â¢ An eBay item is best thought of as an item for auction: Some auctions can 
have many discrete items, but still refer to only one Item object. 
â¢ The eBay. SDK. Model. Item namespace has a plethora of helper classes that 
encapsulate data for presentation via the Item object and its properties. 
119 

ChapterS 
120 
â¢ When creating Item objects for listing via eBay, be sure to set its Uuid property 
to a freshly allocated eBay. SDK. Model. Uuid object. 
â¢ You can leave new feedback for a buyer or seller using the Feedback class 
and its !Feedback interface and the LeaveFeedbackCall. 
â¢ You can view the feedback exchanged between buyer and seller using the 
Feedback class and its !Feedback interface and GetFeedbackCall. 

CHAPTER 6 
Introducing 
Integration 
the eBay 
Library 
IN THE LAST TWO CHAPTERS, you've learned how to directly access the eBay service 
via the eBay SDK. For many applications, the eBay SDK is ideal: It provides you 
with a data model and a slew of individual eBay SDK API calls to invoke specific 
operations on the eBay service on behalf of your application. For other applications, 
you may need to use the SDK in conjunction with an existing or new database to 
cache eBay content. Another tool atop the eBay SDK, the eBay Integration library, 
lets you integrate your application with either a new or legacy database. Through 
the eBay Integration library, your application downloads all pertinent informa-
tion about your application's sellers, separates the data into the appropriate eBay 
data model objects, and stores them in the database. In turn, your application uses 
the eBay SDK via the Integration library to fetch its data from the database, rather 
than making Internet requests to satisfy eBay API calls. In addition, the eBay 
Synchronization library manages regular synchronization operations between your 
application's local database and the eBay service, ensuring that your application 
has access to an accurate snapshot. 
In this chapter, I introduce the eBay Integration library, and help you under-
stand when you would want to design your application around it. You'll learn 
what you can do with the eBay Integration library, what it requires from your 
application, and how to use it in general terms. As the chapter closes, you'll see 
two samples using the Integration library: The first lets you manipulate categories 
stored in the Integration Database, and the other lets you peruse items associated 
with a specific eBay user. 
Choosing the Integration Library 
The Integration library sits between your application, the eBay SDK, and the eBay 
service. Figure 6-1 shows a deployment diagram that describes the relationship 
between these parts. 
121 

Chapter6 
122 
â¢ 
Your 
Application 
eBay SDK 
eBay Platform 
eBay 
Integration 
Library 
Local 
Integration 
Database 
Figure 6-1. The relationship between your application, the Integration Library, the 
eBay SDK, and the eBay service 
At a high level, you can think of the Integration Library as a cache that sits 
between your application and the eBay service. By using the Integration Library, 
you can batch your Web transactions to the eBay service, limiting the amount of 
latency your application users encounter when using eBay. Because the Integration 
Library stores all of the data pertaining to each of your application's selling users, 
the majority of data that they need is available locally. Moreover, your application 
uses the Integration library to synchronize data between the local database and 
eBay, ensuring timely updates of the information. 
This synchronization is a key aspect of the Integration library. Many applica-
tion developers new to Web services make an erroneous assumption: that because 
they can get the latest information from the application service, it's crucial that 
their application does so. Unfortunately, with few exceptions (such as stock or 
commodity transactions), this is seldom the case. Consider scenarios like these: 
â¢ Listing items for a hundred individual auctions 
â¢ Collecting the eBay categories for your application's user interface 

Introducing the eBay Integration Library 
â¢ Leaving feedback for the buyers of your items 
â¢ Collecting the sales history of the items you've listed 
â¢ Collecting your eBay account activity and invoice so that you can reim-
burse eBay for their services 
WARNING 
Even though you're using the eBay Integration Library, you should 
be aware that the API calls it issues on your application's behalf still count 
against the allotment of API calls for your class of application. 
In all of these scenarios, although you require up-to-date and accurate 
information, you don't need to have information from eBay updated at the time 
you request the information, because it's highly unlikely that the data will change 
substantially between the time you synchronize the Integration library database 
with eBay and the time you need the information. Moreover, if it does, odds are 
that the exact value at a specific instant in time (say, a high bid before an auction 
has closed) probably isn't relevant to your users, because what they need are 
rough estimates of true values. To balance up-to-date data with user expectations, 
you can tune your application's use of synchronization to ensure that the database 
has a relatively timely snapshot of the information you need. 
TIP In almost every application you write that uses eBay, you'll need some 
kind of cache to store intermediate results that don't change often. Sometimes, 
this cache need only persist while the application is running; when this is the 
case, in-memory structures are often adequate. Other applications require 
a cache that persists between application invocations. Why not consider using 
the Integration Library to provide that cache? 
There's a second reason you may choose to use the Integration library. If 
you're developing an application that integrates the eBay service with a legacy 
database within your (or your customer's) organization, you can leverage the 
Integration library to provide an interface from your application to that database. 
Unlike when you use the Integration Library with the database that's provided by 
eBay (see "Configuring a Database for the Integration library" later in the chapter), 
you'll need to implement the glue that binds your database to the Integration 
library (see "Integrating the eBay Integration library with Your Legacy Database" 
later in the chapter). Although this sounds like a lot of work, it's not, and doing 
123 

Chapter6 
124 
this gives you the advantage of being able to use eBay's robust data model 
framework, rather than needing to reinvent the wheel and come up with your own 
encapsulations for common eBay concepts such as users, items, categories, and 
accounts. The eBay SDK graciously provides a mind-bogglingly large amount of 
code that's already been carefully implemented and tested. 
With the Integration library, you can perform essentially the same transactions 
you would using the eBay data model objects I showed you in the last two chapters. 
Because in your application you use interfaces to eBay data model objects, rather 
than their underlying class implementation, it's often a simple thing to migrate an 
existing eBay application to use the Integration library (or go the other way, making 
parts of your application bypass the Integration library and interact with eBay directly). 
It's quite likely that your application should leverage the Integration library 
for much of its functionality, especially if you're deploying it to large-scale cus-
tomers such as companies with an existing inventory database, or those customers 
who regularly move hundreds of items through eBay's auctions. 
Understanding the eBay Integration library Data Model 
The eBay Integration library uses a set of interfaces separate from the eBay 
SDK. To help keep these concepts separate, the engineers at eBay created a new 
namespace, eBay.SDK.Integration. This namespace contains the interfaces and 
classes specific to the Integration Library, so when using the library, you need to 
either reference the library objects you use within the namespace or include the 
namespace in your program with the using directive, depending on the language 
you use. 
The namespace contains a host of interfaces, the most important of which 
are the following: 
â¢ IDataStore, which represents the database within the Integration library 
and manages the database configuration. 
â¢ !Environment, which encapsulates your user's and application's credentials 
for accessing eBay. It's similar to the IApiSession the eBay SDK itself uses, 
but more robust, and is where you set your eBay developer keys, the URL 
for the eBay server to use, and so on. 
â¢ IAppUser, which represents a seller using the application and Integration 
Library to communicate with eBay. 
â¢ IEBaySession, which provides the working session to eBay that lets you 
manage items, sales, feedback, and such. The IEBaySession provides 
methods that let you synchronize items between the database and eBay. 

Introducing the eBay Integration Library 
Using the eBay Integration Library 
As you've doubtlessly learned by now, there's no such thing as a free lunch. Although 
eBay doesn't charge for the Integration Library (the terms of use are the same as they 
are for the eBay SDK), using the Integration Library does require you to make some 
changes to your application and provide a database the Integration Library can 
use. 'This isn't hard, and the investment you make up front can pay great dividends 
in your application, especially if you need to integrate with an existing database 
anyway. 
Configuring a Database for the Integration Library 
The easiest way to use the Integration Library is with the presupplied Microsoft 
Access or Microsoft SQL Server, databases provided by the SDK, which you can 
find in the eBay SDK's Database directory. (If you're using Microsoft SQL Server, 
you need to import the eBay database schema into your database server by follow-
ing the instructions in the Database directory in the file SQL Server/Readme.txt.) 
If you're using a legacy database, you can skip the following information and read 
the next section. 
NOTE 
You may be tempted to use the Integration Library with another data-
base that's compliant with OLEDB, ODBC, or ADO. If you do, bear in mind 
that you will need to initialize the database with the same tables you find in 
the sample databases provided by eBay in the SDK 
Once you've installed the database where it belongs, you must configure it using 
the eBay Database Configuration Wizard. This is an easy process; simply launch 
the wizard, select whether you want to configure a Microsoft Access or a Microsoft 
SQL Server database, enter your database's login credentials, and the wizard 
does the rest. Once it's done, it presents a screen that indicates the successful 
configuration of the eBay SDK and creates a file called eBaySales.exe.config, 
which contains the configuration information the Integration Library needs to 
access the database. The key entity in this file you'll need is the DBConnection 
field, which looks something like this: 
1: <add key="DbConnection" 
2: 
value="Provider=Microsoft.Jet.OLEDB.4.0; 
3: 
Data Source=C:\Program Files\eBay\SDK\Database\eBaySdk.mdb; 
4: 
Persist Security Info=False; 
5: 
Jet OLEDB:Database Password=SecretKey; 
6: 
Jet OLEDB: Encrypt Database= True" I> 
125 

Chapter6 
126 
WARNING 
I've broken up the value string in this listing at semicolons to 
help make it more readable for you. When you access this file, don't add car-
riage returns! 
This string defines the connection to the database the eBay Integration library 
will use. The wizard creates this string on your behalf when you specify the kind of 
database to use (Microsoft Access or Microsoft SQL Server), the security information, 
and whether or not the database should be kept encrypted. 
In all but the most special cases, you probably won't need a detailed view 
into the schema of the eBay Integration Library database. The organization is 
actually quite simple. There's an intuitive pairing between data model items and 
database tables as described here: 
â¢ AppData (which isn't shared with the eBay service), which contains the 
AppData fields of each item stored in the database. Unlike when you use the 
eBay SDK alone, this field contains additional Integration library information, 
so you shouldn't overwrite it. 
â¢ AppUsers, which contains the application's users (each an eBay seller with 
an associated !User object). 
â¢ Categories, which contains the !Category interfaces. 
â¢ Feedbacks, which contains the various feedback messages left for eBay users. 
â¢ Items, which contains information about each of the items managed by 
the users. This table relies on the Itemimages table, which contains item 
images, and the ItemPropertiesMapping table, which maps records in the 
Properties table with individual records in the Items table. 
â¢ The Sales table, which contains information about the sales of items on eBay. 
â¢ The Users table, which contains information about eBay users, both the 
application users referenced in the AppUsers table and other users the appli-
cation users interact with in the course of an auction. 
Moreover, the data model for Integration library is as follows: 
â¢ All !Item objects are standard among objects that belong to certain users. 
â¢ Each !Item object may have one or multiple I Sale objects associated with it. 

Introducing the eBay Integration Library 
â¢ Each !Sale object is associated with one item and one buyer. 
â¢ Optionally, each !Sale object can have up to two !Feedback objects associ-
ated with it: one for the buyer and one for the seller. 
One thing to consider when using the Integration library is that there's no 
reason why your application can't add additional tables to the database for its 
own purposes. For example, one of the eBay samples adds a Resources table to the 
database to store application-specific resources. Something else worth thinking 
about as you develop your application is that while the Integration Database is 
local, it doesn't have to reside on the same machine as your application. For 
example, if your application is to help medium-sized businesses sell their products 
on eBay, you can choose to use a single database for the entire company, and 
have your application interact with eBay via that central server. In other words, 
the word local really pertains to the fact that the Integration library's database 
resides outside of eBay, not necessarily meaning that it's on the same computer 
as that which executes your eBay application. This fact gives you as the developer 
a great deal of latitude when designing the deployment environment for your 
application. 
Integrating the eBay Integration Library with Your 
Legacy Database 
Using the Integration library with a legacy database is a bit more difficult because 
the Integration Library has no knowledge of your database or its schema. 
Consequently, it's up to you to provide the connections between data model objects 
and your database. Typically, this is an exercise in serialization, the process of 
converting a memory-resident object to a format appropriate for storage in your 
database. In doing so, you'll replace methods such as IEBaySession. Saveitem, which 
saves an !Item to the database, with code that saves an !Item to your database in 
whatever format you require. 
In addition, you're responsible for providing the code that synchronizes 
your database with the eBay service. This functionality, provided by the 
IEBaySynchronizer, is required because without it, your application can commu-
nicate to your database and to eBay via the SDK, but once your application 
places objects in your database, you still need to synchronize them with eBay. 
Moreover, the synchronization interface can speed your application's performance, 
precaching information during synchronization that your application will use 
later as it executes. 
127 

Chapter6 
128 
Using the eBay Integration Library in Your 
Application 
Once you've resolved the choice of using an eBay-provided database or your 
own, the next thing is to add the eBay Integration Library to your application. 
The process is actually quite simple. 
1. 
Include the eBay.Model.Integration namespace in your application with 
a using directive. 
2. 
On application initialization, create an IDataStore instance. 
3. 
Using the freshly created IDataStore, call its Connect method to establish 
a connection to the database with a valid connection string. 
4. 
Obtain your application's environment variable to connect to the database 
using the IDataStore. LoadEnvironment method. You'll want to verify that 
its fields are correctly populated; if not, prompt the user for corrections 
and save the results using IDataStore. SaveEnvironment. 
5. 
Use the resulting !Environment. UserManager to fetch an IAppUser instance. 
6. 
Call IDataStore.GetEBaySession to obtain an IEBaySession instance. 
7. 
If you've just created a new user, you should synchronize its representation 
from eBay by calling IEBaySession. EBaySynchronizer.SynchronizeCategories. 
You should also call ImportltemsFromEBay and GetFeedbacksFromEBay to 
bring the Iltems and Feedback that pertain to the new user into the local 
database. 
These steps are shown in pseudocode modeled in C# syntax in Listing 6-1; 
I'll show you the Perl syntax a little later in this section. 
Listing 6-1. Initializing the Integration Library in Your Application (C#) 
1: private void startup 
2: { 
3: 
4: 
s: 
6: 
eBay.SDK.Integration.DataStore dataStore; 
eBay.SDK.Integration. Environment environment; 
try 
{ 
7: 
int myEnv = (int)eBay.SDK.Integration.EnvironmentEnum.SANDBOX; 
8: 
dataStore = new eBay.SDK.Integration.DataStore (); 

Introducing the eBay Integration Library 
9: 
10: 
11: 
12: 
13: 
14: 
15: 
16: 
17: 
18: 
19: 
20: 
21: 
22: } 
} 
dataStore.Connect( this.DBConfiguration); 
environment = dataStore.LoadEnvironment( myEnv ); 
this.UserManager = environment.UserManager; 
this.User = this.UserManager.LoadUser( 
this.CurrentUserAppid ); 
this.EBaySession = dataStore.GetEBaySession( this.User ); 
catch{ Exception e } 
{ 
} 
II Do something useful. 
Close (); II Close the application if needed. 
dataStore.Disconnect(); 
This pseudocode assumes that the application has already gotten its connec-
tion preferences (which you generate using the eBay Database Configuration 
WIZard) from the registry or a configuration file, and placed the database's con-
nection info in the DBConfiguration property, and the current user's application 
ID (see "Moving Data Between Your Application and the Database: The 
IEBaySession Interface" later in this chapter) in the property CurrentUserAppid. 
As is always the case, the eBay code is wrapped in a try I catch block (lines 
5-15), so that if the eBay SDK fails to establish a connection to your database, it 
doesn't crash your entire application. The code begins by connecting to the data-
base (line 9).1fthis is successful, the application gets a reference to the data store's 
!Environment on line 10 so that it can use its UserManager (lines 11-13) to load the 
local representation of the current eBay user and store it in the User property 
(lines 12-13). Finally, the code uses the freshly obtained user to get a reference to 
the EBaySession for the application. 
Now here's listing 6-2, which shows the Perl syntax for adding the Integration 
library to your application. 
Listing 6-2. Initializing the Integration Library in Your Application (Perl) 
1: sub InitintegrationLibrary 
2: { 
3: 
my $appuserid = shift; 
4: 
5: 
$datastore = Win32::0LE->new( 
6: 
"eBay.SDK.Integration.DataStore" ); 
7: 
$datastore->Connect( $dbConfiguration ); 
8: 
my $result= Win32::0LE->LastError(); 
129 

Chapter6 
130 
9: 
10: 
11: 
12: 
13: 
14: 
15: 
16: 
17: 
18: 
19: 
20: 
21: 
22: } 
die $result if $result; 
$environment = $datastore->LoadEnvironment( 
EnvironmentEnum_SANDBOX ); 
$appuser = $environment->{UserManager}->LoadUser( 
$appuserid ); 
$result= Win32::0LE->LastError(); 
die $result if $result; 
$session = $datastore->GetEBaySession( $appuser ); 
my $result= Win32::0LE->LastError(); 
die $result if $result; 
This code is essentially the same as the C# version, of course. The function 
begins by setting aside the incoming application user ID {needed to obtain the 
eBay session for the user) on line 3. After that, it establishes a connection to the 
database using a new eBay. SDK. Integration. Data Store object on lines 3-9. Next, 
on lines 11-12, you specify the environment you want to use {in this case, the 
eBay Sandbox), which you use on lines 14-17 to load the specified user. Finally, 
on lines 19-21, you get the eBay session. 
Whether you use C# or Perl, the EBaySession object is your primary entry point 
to access eBay data using the Integration library. It provides several key pieces of 
functionality to synchronize access rules and categories, import a seller's item list, 
list new items, and perform end of auction processing: 
â¢ You can load an item or details about an item, or save an item or items to 
the database. 
â¢ You can obtain information about the sale of an item on eBay. 
â¢ You can get information about the buyer of an item in an auction on eBay. 
â¢ You can review user feedback or leave feedback for buyers given a specific 
sale ID for an item. 
â¢ You can list or relist items on eBay by creating the item in the database 
and synchronizing the item with eBay. 
With each of these functions, the results are data model objects, letting you 
focus on the data model for your application, relying on the work done by eBay 
engineers in designing the data model for eBay. 

Introducing the eBay Integration Library 
Working with Synchronization 
When using the Integration Library, it's crucial to remember that the changes you 
make to objects are stored in the local database, not the eBay service. To make 
changes to objects that persist on the eBay service, you must synchronize your 
application database with the eBay service. You do this using two interfaces: the 
IEBaySession interface and the IEBaySynchronizer interface. The former provides 
an interface between your application and the Integration Library's database; it's 
analogous to the IAPICall interfaces you encountered in previous chapters. You 
use the latter interface to synchronize between the Integration Library's database 
and the eBay service. 
Synchronization is a two-way process, although the methods let you select 
whether you're moving application data from your local application or database 
to its remote destination on the eBay service, or the reverse. The key to selecting 
which method to use is the inclusion of the words Load, Save, FromEBay, or 
ToEBay in the method name. Generally, Load indicates that the method takes 
a datum from the database and passes it to your application, while Save does the 
reverse. Similarly, From indicates that the datum comes from eBay, while To 
packages your datum from your database and sends it to eBay. 
Moving Data Between Your Application and the 
Database: The IEBaySession Interface 
The IEBaySession interface lets you move data between your application and the 
local Integration Database. Table 6-1 shows the methods of the IEBaySession 
database. 
Table 6-1. A Summary of Methods of the IEBaySession Interface 
Method 
CalculateListingFees 
Clone Item 
DeleteFeedbackToBuyer 
Find Feedback 
FindSale 
GetAppitemiDList 
Purpose 
Determines the listing fees for an item. Uses 
eBay.SDK.API.VerifyAdditem. 
Makes a copy of an existing Item in the database. 
Deletes an unsynchronized feedback to a buyer. 
Searches the Feedbacks table of the database for feedback 
by user, role, and item. 
Finds the sale record for a given user and item. 
Returns the IDs of all items in the database that match 
the given status. 
131 

Chapter6 
132 
Table 6-1. A Summary of Methods of the IBBaySession Interface (continued) 
Method 
GetBuyeridlist 
GetltemsCount 
GetPendingitemsCount 
GetSaleidlist 
LeaveFeedbackToBuyer 
LoadBothFeedbacks 
Load Buyer 
Load Buyers 
Load Feedback 
Load Item 
LoaditemDetails 
Loaditems 
LoaditemSales 
LoaditemSalesByEBayid 
LoaditemSet 
Load Sale 
Load Sales 
RelistUnsolditem 
SaveBuyer 
Save Feedback 
Save Item 
Save Items 
SaveSale 
SetltemStatus 
Purpose 
Returns the eBay user ID of all buyers in the database. 
Returns the number of items in the database with the 
specified status. 
Returns a count of the unsynchronized items in the 
database. 
Gets a list of the IDs of all sales in the database. 
Leaves feedback to the buyer of an item in a sale. 
Loads feedback from seller to buyer and the reverse from 
the database. 
Loads a specified buyer from the database. 
Loads a collection of buyers from the database. 
Loads feedback from buyer or seller from the database. 
Loads an item from the database. 
Selectively loads !Item properties from the database. 
Loads items matching the specified criteria. 
Loads all sales of an item by application ID specific to the 
database. 
Loads all sales of an item given the item's eBay ID. 
Loads items with specified application IDs. 
Loads a sale. 
Loads sales belonging to an application user. 
Relists an unsold item. 
Saves an eBay user as a buyer. 
Saves feedback to the database. 
Saves an item to the database. 
Saves a list of items to the database. 
Saves a sale to the database. 
Sets the AppStatus field in a list of application item IDs to 
the specified value. 

Introducing the eBay Integration Library 
Even a quick glance at Table 6-1 shows a proliferation of IDs: sales, users, 
buyers. Items all have their own IDs, as you might imagine, just as they do on the 
eBay service. But what about the new kid on the block, the application ID? This is 
simply the ID of an item in the database assigned before the item is synchronized 
with the eBay service. It's the primary key for an item-you use it when referring 
to items created locally. While it's admittedly a bit of a headache to juggle two IDs 
for the same conceptual thing, it's not as bad as it sounds, and it's a very reasonable 
way to solve the problem of assigning new items unique IDs without actually 
interacting with the eBay service. 
TIP If you need to find the unique ID of a data model object such as an 
II tern you're working with that originated with the application library, you 
can get it by casting its AppData property to the appropriate AppData object 
(such as ItemAppData) and accessing its ID field (such as Appitemid). 
Although the library provides collections for most objects, some of the meth-
ods use the .NET Framework DataSet class to represent in memory a snapshot of 
a search result, such as a collection of buyers. The DataSet class, a keystone in the 
ADO.NET architecture, contains a collection of objects that represent each of the 
tables in a relational database. Using a DataSet object, you can obtain XML repre-
sentations of the object's schema and data as well as slice and dice the data much 
as you would if it were in an SQL database, only more conveniently in your imple-
mentation. 
In all but a few cases, instead of needing to deal with a DataSet object, Integration 
library collections use the same !Collection interface you encountered in the 
last three chapters. This includes the IAppUserCollection, IItemimageCollection, 
IPropertyCollection, and IIntCollection collections, among others. The last collec-
tion, IIntCollection, is used to provide collections of integer IDs for application 
database objects; it's the same as other collections, save that it provides a type-safe 
mechanism for collecting integers. 
TIP 
Because the IEBaySession interface is responsible for communications 
between your application and the local database, you don't need to use it if 
you're working with an existing database. You can, however. model your 
application's legacy database interface after the IEBaySession interface, which 
eases your design burden by modeling after a well-documented and func-
tional interface to the local database. In fact, ifyou implement the interface 
exactly, you can switch between an eBay-provided database and the legacy 
database during testing, making quality assurance and upgrades easier too! 
133 

Chapter6 
134 
Moving Data Between Your Database and the eBay 
Service: The IEBaySynchronizer Interface 
The IEBaySession interface does little for your application without the ability to 
move data to and from the eBay service. This functionality is provided by the 
IEBaySynchronizer interface, which, as its name suggests, synchronizes records 
in the local database with the eBay service. Table 6-2 shows the methods of this 
interface. 
NOTE 
You must remember that while the Integration Library synchronizes data 
between your local database and the eBay seroice via the IEBaySynchronizer 
interface, it does so only at your application's behest! It's imperative that you 
include the triggers for database synchronization in your application's design; 
otherwise, as you implement your application, you're left with a local data-
base that doesn't communicate with eBay, and you would have to shoehorn in 
the necessary synchronization sessions. 
Table 6-2. Methods of the IEBaySynchronizer Interface 
Method 
GetFeedbacksFromEbay 
ImportitemsFromEBay 
LeaveFeedbacksToEBay 
listitemsToEBay 
RelistitemsToEBay 
SynchronizeCategories 
SynchronizeClock 
UpdatePricesFromEBay 
UpdateSalesFromEBay 
UpdateUserDetailsFromEBay 
Purpose 
Retrieves the feedback from eBay associated with an 
eBayuser. 
Retrieves the items associated with a specific user 
fromeBay. 
Sends feedback in the database to eBay. 
Lists items in the database not previously listed with 
eBay on eBay. 
Relists items in the database not previously relisted 
with eBay on eBay. 
Updates the categories in the database with those on 
eBay. 
Determines the clock offset between eBay and the 
system clock, and uses the offset in subsequent local 
database interactions. 
Updates prices for sold items, but does no end 
auction processing. 
Updates the sales information for items in the database. 
Updates user information from eBay. 

Introducing the eBay Integration Library 
The question of when to synchronize is actually far more difficult than how to 
synchronize, because to a large extent it depends on the nature of your application. 
Some applications, like those that run continually, interacting with a database as if 
they were running on a mainframe system, would do well to simply synchronize 
periodically or when they detect a certain number of local changes to objects. This 
is also likely to be the case with server-oriented applications, such as those that 
provide a Web front end to a seller's database of items and transactions. Smaller 
applications may choose to schedule synchronizations, waking a synchronization 
component at times when the user's system is otherwise idle, to reduce the latency 
of network interaction. Perhaps the simplest mechanism for your application is the 
most effective: user-initiated synchronization, once the user has finished interact-
ing with the objects in the local database. The path you choose depends entirely on 
your user interface. 
Using the Integration Library with Items in C# 
Arguably the best sample that accompanies the eBay SDK is the MiniEBay 
application, which you can find in the folder SDK/Samples/VB.NET/ 
IntegrationLibraryDemo. It's in Visual Basic .NET, not C#, however. 
To help you see how to use the Integration Library, I present the 
IntegrationDemo, which offers the basic functionality necessary to log in as a user 
of the eBay Integration Library, list items pending for sale, at auction, or sold on 
eBay, and add new items to list on eBay. The application has three user interface 
elements, shown in Figures 6-2, 6-3, and 6-4, as well as a host of ancillary error 
dialog box messages presented by exception handlers. 
Figure 6-2 shows the login form of the application. The first time you launch 
the application, you can enter an existing eBay account name, e-mail address, and 
password to log in. Once you do, the form memorizes-saves for future use-the 
user information and adds the eBay account to the list on the left-hand side, so 
that in subsequent sessions, you can log in by picking an eBay account name and 
clicking the Login button. 
email: lsandy@otNonen.com 
paMword: I 
Login 
Figure 6-2. Logging in to the IntegrationDemo sample application 
135 

Chapter6 
136 
Figure 6-3 shows the main form of the application, which is dominated by the 
large list View control in the center, enumerating each of the items you listed. Along 
the bottom are buttons to let you create a new item to list, update the categories in 
the eBay Integration library database, configure the application keys, and log out 
(returning to the form shown in Figure 6-2). 
lem# 
4500290294 
4500290295 
4500290832 
4500290843 
New ... 
T& 
The First lem AUction 
The Second tern AUc:ti .. . 
Mn Picket N1010ES .. . 
Cie NXÂ·70wihaccess .. . 
Mn Pickett Jbrrun .. . 
Categories I 
Sel!mgs ... 
LogOff 
Figure 6-3. A listing of objects in the IntegrationDemo sample application 
Figure 6-4 shows the new item form, which lets you enter the bare informa-
tion necessary to add an item first to the eBay Integration library database and 
from there to eBay to list a new item. 
New Item 
Title 
Opening Price 
Description 
ust 
Cancel I 
Figure 6-4. Creating a new item in the IntegrationDemo sample application 

Introducing the eBay Integration Library 
As you use the application, it interacts with both the eBay Integration Library 
database and the eBay service at critical points: 
â¢ When you first log in, if you are logging in as a user who hasn't used the 
application before, it loads all items associated with your eBay account 
into the database. Otherwise, it simply updates the synchronization 
library with any changes. 
â¢ When you click the button named Categories, the application synchro-
nizes the eBay Integration Library categories with the eBay service. 
â¢ When you create a new item, the application saves it in the database. 
â¢ When you log off, the application sends new items to the eBay service to 
be listed as new items for auction. 
Initializing the eBay Integration Library 
The responsibility of initializing the eBay Integration Library belongs to the main 
form, SampleApp. This form has two properties to facilitate initializing the eBay 
Integration Library and accessing the library from the application's other forms: 
â¢ The Environment property returns the eBay I Environment. 
â¢ The AppUser property returns the eBay IAppUser for the user currently used 
by the eBay session. 
The Environment property is initialized by Load Environment, which the SampleApp 
constructor invokes. Listing 6-3 shows the Load Environment method. 
Listing 6-3. The LoadEnvironment Method 
1: private void LoadEnvironment() 
2: { 
3: 
II Create the integration datastore. 
4: 
dataStore = new eBay.SDK.Integration.DataStore (); 
5: 
II Connect it to the default database. 
6: 
try 
7: 
{ 
8: 
dataStore.Connect( dbConfig ); 
9: 
II Load the database's environment. 
10: 
environment = dataStore.LoadEnvironment( 
11: 
(int)eBay.SDK.Integration.EnvironmentEnum.SANDBOX ); 
12: 
} 
137 

Chapter6 
138 
13: 
catch 
14: 
{ 
15: 
16: 
17: 
18: 
19: 
20: 
} 
21: } 
MessageBox.5how( this, 
"Could not connect to the Integration Database.", 
"Error" 
) ; 
this.Close (); 
data5tore.Disconnect(); 
The method first attempts to connect to the database using the SampleApp 
field dbConfig; the load Keys method initializes from an element of the ebayrc file. 
(See the Appendix for a detailed description of the sample application framework, 
including how it manages the ebayrc file.) Both the attempt to connect to the 
database (line 8) and the subsequent initialization of the environment variable on 
lines 10--11 (which other classes access via the Environment property) are wrapped 
in the obligatory try I catch block to ensure that in the event of an error, the 
application notifies the user with a meaningful error message before aborting 
the application (lines 15-18). 
With the !Environment in hand, the application needs to create an 
IEBaySession in order to access the eBay Integration library. In order to obtain 
this, you must first provide a valid user of the eBay service. Obtaining this infor-
mation is the responsibility of the Login Form class, which prompts you to enter 
a user; when you click the Login button, it creates an IAppUser instance with the 
entered user credentials and uses the application's AppUser property to finish the 
startup process. listing 6-4 shows login_ Click, which does the work of creating 
an IAppUser object. 
Listing 6-4. The login_ Click Method of the LoginForm Class 
1: private void login_Click(object sender, System.EventArgs e) 
2: { 
3: 
int i; 
4: 
IAppUser appUser; 
5: 
bool found = false; 
6: 
7: 
if ( username.Text == null I I username.Text.length == 0 I I 
8: 
email. Text == null II email. Text .length == 0 II 
g: 
password. Text == null I I password.Text.length == 0 ) 
10: 
return; 
11: 
12: 
// First, if the user's not in the user array, add it. 
13: 
for ( i = o; i < useriD.Count; i++ ) 
14: 
{ 
15: 
if ( useriD[i].ToString() == username.Text ) 

Introducing the eBay Integration Library 
16: 
{ 
17: 
found = true; 
18: 
break; 
19: 
} 
20: 
} 
21: 
22: 
if ( found ) 
23: 
{ 
24: 
appUser = App.LoadUser(userAppid[ i ] ); 
25: 
} 
26: 
else 
27: 
{ 
28: 
appUser = App.NewUser( username.Text, 
29: 
password.Text, 
30: 
email.Text); 
31: 
useriD.Add( username.Text ); 
32: 
userPassword.Add( password.Text ); 
33: 
userEmail.Add( email.Text ); 
34: 
userAppld.Add( appUser.AppUserld.ToString() ); 
35: 
} 
36: 
37: 
38: 
II Next, set the application's user ID field. 
39: 
App.AppUser = appUser; 
40: 
41: 
II Finally, close the login form. 
42: 
this.Close(); 
43: 
II And tell the user interface to log in to eBay. 
44: 
App. Login ( true ) ; 
45: } 
After declaring the necessary locals, the method performs some simple sanity 
checking on lines 7-10, ensuring that you didn't enter only part of the necessary 
eBay access information. The form itself keeps the list of user account information 
in a trio of arrays, backed by a file on disk accessed by the methods LoadUsers and 
SaveUsers (which I omit here for brevity). Lines 13--20 search the arrays to determine 
whether the user credentials you entered are for a previously accessed user; if 
they are, the eBay application user ID will be available, or if not, the application 
must create a new IAppUser for the information you entered. 
If the application recognizes the user credentials you entered Gines 22-26), it 
creates the application user object by using the UserManager .LoadUser method of 
the application's EBayEnvironment. Because this method takes an application user 
ID, it's imperative that your application store it somewhere. In this application, 
you choose to store it in a flat text file; by comparison, the eBay MiniEBay sample 
139 

Chapter6 
140 
application uses a separate table in the eBay database, and accesses the informa-
tion using a database query. If, on the other hand, you entered information for 
a new user, the application must create a new IAppUser object (lines 28-37). After 
creating the user using the application's NewUser helper method, it updates the 
form's arrays with the new user account name, e-mail address, and password, 
and updates the file with the new user information. Regardless, the method then 
sets the application's AppUser with the newly created IAppUser object. 
Loading an existing user is trivial; in fact, the Login Form could do it on its own 
with the interfaces offered by SampleApp, as you can see in listing 6-5. 
Listing 6-5. The Load User Method of the SampleApp Class 
1: public IAppUser LoadUser( string id 
2: { 
3: 
IAppUser result = null; 
4: 
s: 
6: 
7: 
8: 
9: 
10: 
11: 
12: 
13: 
14: 
15: } 
try 
{ 
} 
result = environment.UserManager.LoadUser( 
int.Parse( id ) ); 
catch 
{ 
result = null; 
} 
return result; 
No surprises here: The LoadUser method just returns the AppUser it obtains 
from the !Environment's UserManager, or null in the event of any errors. 
Creating the new user isn't hard, either; the application does it in a few lines 
with the NewUser method, which you can see here in listing 6-6. 
Listing 6-6. The NewUser Method 
1: public IAppUser NewUser( string id, 
2: 
3: 
4: { 
string password, 
string email ) 
s: 
IAppUser ebayUser = new AppUser( EBayEnvironment ); 
6: 
ebayUser.EBayUserid = id; 
7: 
ebayUser.Password = password; 
8: 
ebayUser.Email = email; 
9: 

Introducing the eBay Integration Library 
10: 
11: 
12: 
13: 
14: 
15: 
16: 
17: 
18: 
19: 
20: } 
try 
{ 
} 
EBayEnvironment.UserManager.SaveUser( ebayUser ); 
bNewUser = true; 
return ebayUser; 
catch 
{ 
return null; 
} 
This method just calls SaveUser on the application's environment (line 12), after 
creating the new AppUser instance on entry (line 5) and initializing it with its incom-
ing arguments. I originally debated placing SaveUser in the Login Form class, except 
that when you create a new AppUser instance, after initializing the IEBaySession with 
the new AppUser instance, you need to use the session to obtain a one-time image of 
the user's existing items. After you log in, the application checks the bUser flag when 
updating the eBay Integration library. 
Fetching Data from eBay 
The last thing that happens when you log in, on line 52 of listing 6-3, is that the 
LoginForm class instance invokes the application's Login method, responsible for 
obtaining the latest items for you from eBay and placing the results in the eBay 
Integration library Database. listing 6-7 shows the Login method. 
Listing 6-7. Logging In to eBay Using the Login Method of the SampleApp Class 
1: public void Login( bool bSyncEBay ) 
2: { 
3: 
II Update the contents from eBay. 
4: 
if ( bSyncEBay ) 
s: 
{ 
6: 
DownloadUser(); 
7: 
Download!tems(); 
8: 
9: 
II Now update the user interface. 
10: 
UpdateitemView(); 
11: 
} 
12: 
13: 
itemView.Show(); 
141 

Chapter6 
142 
14: 
newitemButton.Show(); 
15: 
updateCategoriesButton.Show(); 
16: 
login Button. Text = "Log Off"; 
17: } 
Login takes a single argument, a flag named bSyncEBay, indicating whether 
the application should synchronize or not when you first log in. If this flag is true, 
the application first updates the user information by calling the application's 
DownloadUser method on line 6 and then updates individual item data by call-
ing the application's Downloaditems on line 7. Once it does this, it updates the 
user interface by placing each of the items in the database associated with the 
user using UpdateitemView on line 10, and then updates the status of each of the 
buttons and changes the label of the login button on lines 13-16. 
DownloadUser is straightforward; it only downloads information about new 
users, as you can see from Listing 6-8. 
Listing 6-8. Updating a New User's Data in Download User 
1: public void DownloadUser() 
2: { 
3: 
// Set the cursor to busy. 
4: 
Cursor.Current = Cursors.WaitCursor; 
5: 
6: 
// Update the status line. 
7: 
try 
8: 
{ 
9: 
// Update the user info. 
10: 
session.EBaySynchronizer.UpdateUserDetailsFromEBay(); 
11: 
user = session.LoadBuyer(appUser.EBayUserid); 
12: 
13: 
if ( bNewUser) 
14: 
{ 
15: 
session.EBay5ynchronizer.ImportitemsFromEBay( ); 
16: 
session.EBaySynchronizer.GetFeedbacksFromEBay( 
17: 
eBay.5DK.Mode1.SiteidEnum.US ); 
18: 
} 
19: 
} 
20: 
catch 
21: 
{ 
22: 
Logoff( false ); 
23: 
MessageBox.Show( this, 
24: 
"Could not connect to eBay. ", 
25: 
"Error" ) ; 

Introducing the eBay Integration Ubrary 
26: 
} 
27: 
bNewUser = false; 
28: 
29: 
// Set the cursor to normal. 
30: 
Cursor.Current = Cursors.Default; 
31: } 
The routine begins by setting the cursor to WaitCursor on line 4, to indi-
cate that the application is busy, even though in most cases it doesn't take very 
long. Next, it updates the local database with your user information by calling 
UpdateUserDetailsFromEBay, a method of the synchronizer (recall that all methods 
that communicate between the service and the database are methods of the 
IEBaySynchronizer interface). Next, it calls LoadBuyer, to update the application's 
notion of the current user with the latest information from the database, replac-
ing the IAppUser instance created during the login process with the resulting 
IAppUser object. 
If you logged in with a new eBay account, the application must download the 
items and feedback relating to you (lines 17-19). It's imperative that you only do 
this for a new user, because this is an expensive operation, and can significantly 
slow your application if a user has a large number of objects or feedbacks. (In 
fact, unnecessarily invoking either ImportitemsFromEBay or GetFeedbacksFromEBay 
can cause your application to fail eBay logo certification, because of the load 
these methods can incur on eBay servers.) 
If anything goes wrong, the application ends the user session by calling its 
Logoff method (which I discuss later in the section "Sending Data to eBay") and 
displaying a simple error message to the user on lines 20-26). 
You can see Downloaditems, the application method that is the item analogue 
ofDownloadUser, in listing 6-9. 
Listing 6-9. The Download/terns Method 
1: public void Downloaditems() 
2: { 
3: 
// Set the cursor to busy. 
4: 
Cursor.Current = Cursors.WaitCursor; 
5: 
6: 
II Do the sync. 
7: 
try 
8: 
{ 
9: 
session.EBaySynchronizer.UpdatePricesFromEBay(); 
10: 
session.EBaySynchronizer.UpdateSalesFromEBay(); 
11: 
} 
12: 
catch 
13: 
{ 
143 

Chapter6 
144 
14: 
15: 
16: 
17: 
18: 
19: 
20: 
21: 
22: } 
} 
Logoff( false ) ; 
MessageBox.Show( this, 
"Could not connect to eBay. ", 
"Error" ); 
II Set the cursor to normal. 
Cursor.Current = Cursors.Default; 
This method is a little simpler. After setting the cursor to indicate that the 
application is busy (line 4), it updates the prices for items at auction on eBay 
(line 9), and updates the data for any items that have sold since the last update 
(line 10). As with DownloadUser, these calls are wrapped in a try/catch block, and 
the application forces the end of the user session if either fail. Finally, the method 
restores the cursor on line 21 before returning control to the user. 
Once Login completes, you can peruse the ListView of items at your leisure, 
or click the button labeled New to create a new item and save it in the Integration 
Database. 
Enumerating Items Cached by the eBay Integration 
Library 
To fill the ListView, the application obtains IItemCollections from the eBay 
Integration Library for active (items at auction), sold, pending, and saved 
items, and adds each item in each collection to the ListView. Listing 6-10 
shows UpdateitemView, which does this. 
Listing 6-10. Updating the List View with Items 
1: public void UpdateitemView() 
2: { 
3: 
IItemCollection activeitems = null; 
4: 
IItemCollection solditems = null; 
s: 
IItemCollection pendingitems = null; 
6: 
IItemCollection saveditems = null; 
7: 
8: 
itemView.Items.Clear(); 
9: 
10: 
II First, snag the data from eBay Integration Library. 
11: 
try 
12: 
{ 

Introducing the eBay Integration Library 
13: 
activeltems = session.Loadltems( AppStatusEnum.Active ); 
14: 
soldltems = session.Loadltems( AppStatusEnum.Sold ); 
15: 
pendingltems = session.Loadltems( AppStatusEnum.PendingAdd ); 
16: 
savedltems = session.Loadltems( AppStatusEnum.Saved ); 
17: 
} 
18: 
catch 
19: 
{ 
20: 
MessageBox.Show( this, 
21: 
"Could not connect to the Integration Database.", "Error"); 
22: 
} 
23: 
try 
24: 
{ 
25: 
// Now, populate the ListView. 
26: 
foreach( !Item item in pendingltems 
27: 
{ 
28: 
ListViewltem viewltem = 
29: 
new ListViewltem( item.Itemid.ToString(), o); 
30: 
viewltem.Subltems.Add( item.Title ); 
31: 
viewltem.Sub!tems.Add( "Pending" ); 
32: 
viewltem.Subltems.Add( item.CurrentPrice.ToString() ); 
33: 
itemView.Items.Add( viewltem ); 
34: 
} 
35: 
36: 
foreach( !Item item in activeltems 
37: 
{ 
38: 
ListViewltem viewltem = 
39: 
new ListViewltem( item.Itemid.ToString(), 0 ); 
40: 
viewltem.Subltems.Add( item.Title ); 
41: 
viewltem.Subltems.Add( "Active" ); 
42: 
viewltem.Subltems.Add( item.CurrentPrice.ToString() ); 
43: 
itemView.ltems.Add( viewltem ); 
44: 
} 
45: 
46: 
foreach( litem item in soldltems 
47: 
{ 
48: 
ListViewltem viewltem = 
49: 
new ListViewltem( item.Item!d.ToString(), o ); 
so: 
viewltem.Subltems.Add( item.Title ); 
51: 
viewltem.Subltems.Add( "Sold" ); 
52: 
viewltem.Subltems.Add( item.CurrentPrice.ToString() ); 
53: 
itemView.Items.Add( viewltem ); 
54: 
} 
55: 
56: 
foreach( litem item in savedltems ) 
145 

Chapter6 
146 
57: 
{ 
58: 
Listviewltem viewltem = 
59: 
new ListViewltem( item.Itemld.ToString(), o ); 
60: 
view!tem.Subltems.Add( item.Title ); 
61: 
viewltem.Subltems.Add( "Saved" ); 
62: 
viewltem.Subltems.Add( item.CurrentPrice.ToString() ); 
63: 
itemView.Items.Add( viewltem ); 
64: 
} 
65: 
} 
66: } 
67: catch 
68: { 
69: 
MessageBox.Show( this, 
70: 
"Could not enumerate items.", "Error" ) ; 
71: } 
The routine begins by clearing the ListView i temView on line 8, after declar-
ing the IItemCollections that store the results from the local database. On lines 
11-22, the code simply loads each item in the Active, Sold, PendingAdd, and Saved 
categories. Load Items returns an IItemCollection of all the items associated with 
the current user that match the specific state. 
NOTE If you want to load a single item, use Loadltem. Unlike Loaditems, how-
ever, you must first initialize an Item and pass it to Load Item. In turn, 
Loaditem populates the fields of the Item you provided with the fields from the 
database for the item you seek. 
The loops on lines 27-35, 37-45, 47-55, and 57-65 add each item in each of 
the states to the itemView by creating a new ListViewitem and setting its fields to 
the item's Title, the state of the item (a compile-time string based on the result 
of the query), and the CurrentPrice and adding the newly created ListViewltem to 
the itemView's Items collection. 
The try I catch blocks around these loops provide error handling in case the 
ListViewitem creation fails, or if the returned item can't be converted to a string. 

Introducing the eBay Integration Library 
eBay Pagination with the Integration Library 
Just as this book went to press, eBay added pagination to the Integration library 
interfaces, letting you obtain a subset of items. If an application is being used by 
a large seller that deals with large numbers of items, it may not be a good idea to 
load all items, buyers, or sales into memory at one time, since doing so may 
consume too much memory. To solve this issue, IEBaySession includes methods 
to handle a large volume of items, buyers, or sales by paginating the data. 
1. GetAppitemidlist returns a list of only the IDs of all items that have 
a specified status. Call Load Item or LoaditemDetails respectively for each 
Appitemid. Another method, LoaditemSet, lets you specify an array of item 
IDs that you want to load and return the loaded item instances for you. 
2. GetSaleidlist and LoadSale help handle the pagination of sales data. 
3. GetBuyeridlist and LoadBuyer help handle pagination of buyer data. 
I discuss the general notion behind pagination in more detail in Chapter 9. 
Creating New Items 
When you click the button titled New, the application opens a new NewitemForm 
instance as shown here: 
1: private void newitemButton_Click( object sender, 
2: 
System.EventArgs e) 
3: { 
4: 
NewitemForm newitemForm = new NewitemForm(); 
s: 
6: 
newitemForm.App = this; 
7: 
newitemForm.ShowDialog( ); 
8: } 
The newitemForm does all of the work of creating a new item in the aptly 
named New Item method, which you can see here in Listing 6-11. 
Listing 6-11. Creating a New Item with the Integration Database 
1: private void Newitem() 
2: { 
3: 
Item item = new Item(); 
147 

Chapter6 
148 
4: 
5: 
6: 
7: 
8: 
9: 
10: 
11: 
12: 
13: 
14: 
15: 
16: 
17: 
18: 
19: 
20: 
21: 
22: 
23: 
24: 
25: 
26: 
27: 
28: 
29: 
30: 
31: 
32: 
33: 
34: 
35: 
36: 
37: 
38: 
39: 
40: 
41: 
42: 
43: 
44: } 
ItemAppData appData = new ItemAppData(); 
appData.AppUserid = App.AppUser.AppUserid; 
item.AppData = appData; 
II Always, always set the status to PendingAdd or Save! 
appData.App5tatus = AppStatusEnum.PendingAdd; 
II Now populate its fields. 
item.Siteid = SiteidEnum.US; 
item.Type = ItemTypes.Auction; 
item.Title = title.Text; 
item.Description = description.Text; 
item.Currency = CurrencyEnum.USDollar; 
item.Location = "Santa Cruz, CA"; 
item.Country = "us"; 
II two-character country code 
item.Categoryid = int.Parse( category.Text); 
item.Quantity = 1; 
item.Duration = 5; 
item.MinimumToBid = decimal.Parse( openingPrice.Text); 
item.ReservePrice = o; 
item.PaymentTerms.SeeDescription = true; 
item.ShippingOptions.ShippingRange = 
ShippingRangeEnum.SiteOnly; 
item.ShippingOptions.ShippingPayment.SeeDescription = true; 
item.Uuid = new Uuid{true); 
try 
{ 
App.Session.Saveitem( item ); 
} 
catch 
{ 
} 
MessageBox.Show( this, 
"Could not connect to the Integration Database.", 
"Error" ); 
App.UpdateitemView( ); 
It's easy to create a new item, but if you don't include all of the necessary 
fields, the eBay Integration library won't let you send the item to eBay, so it's 

Introducing the eBay Integration Library 
important you take care to do it right. When creating a new item, you must 
include at least the following fields: 
â¢ AppData, an Iltem.AppData instance. 
â¢ The Item.AppData AppStatus property, which indicates the item's state in the 
eBay database. If you set it to AppStatusEnum. Save, it is saved in the database 
and not sent to eBay during synchronizations; if you set it to PendingAdd, 
the item will be added to a new auction after the next synchronization. 
â¢ Si teid, indicating on which site the item should be listed. 
â¢ Type, indicating the type of item auction for which the item should be listed. 
â¢ Title, indicating the title of the auction. 
â¢ Description, describing the item. 
â¢ Currency, indicating the currency of the item's price information while 
at auction. 
â¢ Location, indicating the location of the seller. 
â¢ Country, indicating the country of the seller. 
â¢ Categoryid, indicating the item's category. 
â¢ Quantity, indicating how many physical items are for auction for this 
item's auction. 
â¢ Duration, indicating the number of days the item's auction should last. 
â¢ PaymentTerms for the item. 
â¢ ShippingOptions for the item, indicating to where you'll ship the item and 
how the seller should pay for shipping. 
â¢ Uuid, the item's unique item ID. 
The Newitem method fills these properties on lines 6-31, using a combination 
of data from the form's input elements and reasonable defaults. In a real application, 
defaults such as the location (lines 18-19) should come from application preferences, 
not source code, of course. 
149 

Chapter6 
150 
Line 35 saves the item to the database. The application will synchronized the 
new item with eBay later, when you log out. 
Sending Data to eBay 
Updating the eBay service with the changed contents of the eBay Integration 
Library's database is the same in principle as what happens when you log in, 
except that instead of fetching items, the application sends items. All of this is 
triggered when you log off, in the application's Logoff method, shown here in 
Listing 6-12. 
Listing 6-12. The Logoff Method 
1: public void Logoff{ bool bSyncEBay) 
2: { 
3: 
if ( bSyncEBay ) 
4: 
{ 
s: 
// Update items to eBay. 
6: 
Upload!tems(); 
7: 
} 
8: 
itemView.Hide{); 
9: 
new! temButton. Hide(); 
10: 
updateCategoriesButton.Hide{); 
11: 
loginButton.Text = "Log In"; 
12: 
loginForm.ShowDialog(); 
13: 
dataStore.Disconnect(); 
14: } 
If the method is invoked with the value true, the method will send any changes 
to the database to eBay using the Uploaditems method (lines 3-7). After that, it 
simply updates the state of itemView, new!temButton, and updateCategoriesButton, 
respectively. Listing 6-13 shows the Upload!tems method, which looks a lot like 
Downloaditems. 
Listing 6-13. Sending Item Updates to the eBay Service 
1: public void Upload!tems() 
2: { 
3: 
// Set the cursor to busy. 
4: 
Cursor.Current = Cursors.WaitCursor; 
5: 
6: 
try 
7: 
{ 

Introducing the eBay Integration Library 
8: 
9: 
10: 
11: 
12: 
13: 
14: 
15: 
16: 
17: 
18: } 
session.EBaySynchronizer.ListltemsToEBay(); 
} 
catch 
{ 
MessageBox.Show( this, 
"Could not connect to eBay.", "Error" ); 
} 
II Set the cursor to normal. 
Cursor.Current = Cursors.Default; 
The method first sets the cursor to WaitCursor, customary for network 
actions, and then uses the EBaySynchronizer's ListltemsToEBay method. When it's 
done, you see the obligatory error message presented on lines 12-13 if an error 
occurs; otherwise, the application restores the cursor. 
Getting Status from the eBay Synchronization Library 
The IntegrationDemo application doesn't have much by way of status notifica-
tion-in fact, except for switching the cursor from Default to Wai tCursor and back 
during network operations, there's no status notification at all unless an error 
occurs. This is a limitation of this application, not the eBay Integration library. 
The eBay Integration Library can provide status to your application through 
a function it periodically invokes; you must simply register a function (inC#, a del-
egate; in other languages, it's a function pointer or a reference to a function) for 
the Integration library to invoke. The application does this when setting the AppUser 
property, as you can see in listing 6-14. 
Listing 6-14. Creating and Registering a StatusListener to Obtain eBay Integration 
Library Status 
1: public IAppUser AppUser 
2: { 
3: 
set 
4: 
{ 
s: 
this.appUser = value; 
6: 
try 
7: 
{ 
8: 
session = dataStore.GetEBaySession( appUser ); 
g: 
151 

Chapter6 
152 
10: 
11: 
12: 
13: 
14: 
15: 
16: 
17: 
18: 
19: 
20: 
21: 
22: } 
} 
} 
II Create a new status listener. 
IStatuslistener l = new Statuslistener(); 
l.RegisterStatusUpdate( 
new Statuslistener.StatusUpdateDelegate(UpdateStatus) ); 
session.StatusPublisher.Addlistener( l ); 
catch 
{ 
session = null; 
} 
II Get follows, ommitted for brevity. 
After saving aside the incoming value, the method begins on line 8 by ini-
tializing the class's session to a session with the given appUser. It then creates 
a new Status listener instance, setting the notification function to the applica-
tion's UpdateStatus method on lines 11-13. Finally, it adds the listener function 
to the session's list of functions to receive notification. 
The eBay Integration Library invokes the notification function you register 
with a string and a percentage complete. The UpdateStatus method simply prints 
the status message to the console (Listing 6-15). 
Listing 6-15. Showing eBay Integration Library Status 
1: void UpdateStatus( string message, int percent) 
2: { 
3: 
System.Console.Writeline( message ); 
4: } 
Even if your application doesn't include more detailed status reporting, just 
as this one doesn't, logging status messages to the console or a file gives you 
a way to look under the hood and debug what the eBay Integration Library is 
doing on your behalf. If you'd like to provide more status reporting, you can use 
the percent argument to plot a progress bar or provide other feedback to the user. 
Using the Integration Library with Categories in Perl 
In Chapter 3, I promised you an opportunity to see how to access eBay cate-
gories in Perl using a Tk::TreeView control. The categories.pl sample, shown in 
Figure 6-5, does just that. 

Introducing the eBay Integration Library 
'?, Categories 
~ l.:: Jtr:! 113 
!:,tegoriesJ 
Ill live Auctionâ¢ 
~ 
8 
Mu~ICAI lnaln.wnenb 
I m-ann 
I 
1!1- EJec-.lc 
I 
1!1-Equ~ 
I Ill- Guitar 
I f!l- H.lrmoniCA 
I Ill- Keyboard, Pbno 
~ ocr- lnstn.wnents 
1!1- Percussion 
I 
1-
f!l- Pre Audio 
I 1!1- ShH4 Music, Song Books 
I IB- Siring 
~-Â·â¢'-lob 
8-Woodwincl 
t:'"..:Oboe 
Â· I 
~ I 
1
.!.. 
Settings 
Figure 6-5. The categories.pl sample application 
The application itself is simple: The Categories button at the top of the inter-
face synchronizes the Integration Library's table of categories with the eBay 
categories, and you can navigate the hierarchy of eBay categories using the tree 
view control that occupies the bulk of the interface. As always, the Settings but-
ton at the bottom of the application lets you enter your eBay SDK keys, required 
by eBay Integration Library applications just as any other eBay SDK application. 
Initializing the eBay Integration Library 
As you can see from Listing 6-16, initializing the eBay Integration Library in Perl 
is essentially the same as initializing it inC#. 
Listing 6-16. Initializing the eBay Integration Library 
1: sub Initlntegrationlibrary 
2: { 
3: 
my $self = shift; 
4: 
$self->Busy( 1 ); 
s: 
153 

Chapter6 
154 
6: 
# Create the data store. 
7: 
$app->{DATASTORE} = Win32::0LE->new( 
8: 
"eBay.SDK.Integration.DataStore" ); 
9: 
$app->{DATASTORE}->Connect( $app->{DATABASEINFO} ); 
10: 
my $result= Win32::0LE->LastError(); 
11: 
if{$result) 
12: 
{ 
13: 
print $result; 
14: 
return; 
15: 
} 
16: 
17: 
$app->{ENVIRONMENT} = $app->{DATASTORE}->LoadEnvironment( 
18: 
EnvironmentEnum_SANDBOX ); 
19: 
20: 
$self->Busy( 0 ); 
21: } 
This method, part of the Perl application framework I describe in Appendix A, 
uses two application properties, DATASTORE and ENVIRONMENT, to store the resulting 
IDataStore and !Environment objects. The code begins by displaying a busy cursor 
Oine 4) and creating a new Data Store object on line 7. This DataStore instance is 
connected to the database via the configuration string $app->{DATABASEINFO}, loaded 
from the application's ebayrc file (lines 8-9). If an error occurs, the user is noti-
fied on the console and the routine exits (lines 10-15), or else the application 
obtains an Environment instance that can communicate with the eBay Sandbox 
on lines 17-18. 
The categories.pl application invokes this method and sets the user during 
its initialization. Even though the application doesn't do anything specific with 
application users, the eBay Integration library must still have a valid application 
user to obtain an EBaySynchronizer. The application framework handles setting 
the current application user in its AppUser method, shown here in listing 6-17. 
Listing 6-17. Obtaining the IEBaySession by Setting the AppUser in Perl 
1: sub AppUserid 
2: { 
3: 
my $self = shift; 
4: 
$self->{APPUSERID} = shift if ( @_ ); 
s: 
6: 
if ( $self->{APPUSERID} 
7: 
{ 
8: 
$app->{APPUSER} = 
9: 
$app->{ENVIRONMENT}->{UserManager}->LoadUser( 1 ) ; 
10: 
my $result= Win32::0LE->LastError(); 
11: 
if{$result) 

Introducing the eBay Integration Library 
12: 
{ 
13: 
print $result; 
14: 
return; 
15: 
} 
16: 
17: 
$app->{SESSION} = 
18: 
$app->{DATASTORE}->GetEBaySession( $app->{APPUSER} ); 
19: 
my $result= Win32::0LE->LastError(); 
20: 
if($result) 
21: 
{ 
22: 
print $result; 
23: 
return; 
24: 
} 
25: 
} 
26: 
return $self->{APPUSERID}; 
27: } 
This method saves aside the incoming user ID for the current application 
user Oine 4), loads the user from the eBay Integration Database Oines 6--15), and 
gets the session for the current application user Oines 17-25). 
Synchronizing the eBay Integration Library Categories 
In order for the eBay Integration Library to possess the eBay service categories, 
the application must synchronize them from eBay. Doing this in Perl is the same 
as inC#, as you see in Listing 6-18. 
Listing 6-18. Synchronizing eBay Categories in Perl 
1: sub Categories_Click 
2: { 
3: 
$application->Busy( 1 ); 
4: 
s: 
$application->{SESSION}->{EBaySynchronizer}-> 
6: 
SynchronizeCategories( $application->SiteiDEnum_US, 0 ); 
1: 
my $result= Win32::0LE->lastError(); 
8: 
if($result) 
9: 
{ 
10: 
print $result; 
11: 
return; 
12: 
} 
13: } 
155 

Chapter6 
156 
This method invokes the EBaySynchronizer's SynchronizeCategories method. 
The first argument specifies the site to which the database should synchronize, 
while the second argument, if true (nonzero), indicates that all data, not just 
updates to the categories, should be synchronized. 
WARNING 
Synchronizing all categories is a lengthy process, as you doubtless 
noticed the first time you invoked SynchronizeCategories on an empty data-
base. Needlessly invoking SynchronizeCategories with the second argument 
true not only wastes your application users' time, but can result in your fail-
ing eBay certification because of the number and size of requests your 
application makes of the eBay service. 
Obtaining the eBay Integration Library Categories 
Before you can browse the categories using the tree view, the application must 
load the categories from the eBay Integration Library Database. This is done dur-
ing application startup in categories.pl. Listing 6-19 shows the code that obtains 
the list from the database and initializes the top level of the Scroll Tree control. 
Listing 6-19. Obtaining a List of eBay Categories from the eBay Integration 
Database in Perl 
1: $categories = $application->{ENVIRONMENT}-> 
2: 
LoadAllCategories( $application->SiteiDEnum_US ); 
3: 
4: my $result= Win32::0LE->LastError(); 
s: if{$result) 
6: { 
7: 
print $result; 
8: 
return; 
9: } 
10: 
11: for ( $i = o; $i < $categories->ltemCount(); $i ++ ) 
12: { 
13: 
if ( $categories->ItemAt($i)->{CategoryName} && 
14: 
$categories->ItemAt($i)->{Categoryid} == 
15: 
$categories->ItemAt($i)->{CategoryParentid} ) 
16: 
{ 
17: 
$tree->add{ $categories->ItemAt{$i)->{Categoryid}, 
18: 
-text => $categories->ItemAt($i)->{CategoryName} ); 
19: 
$tree->setmode( $categories->ItemAt($i)->{Categoryid}, 
20: 
-d $categories->ItemAt{$i)->{Categoryleaf} ? 

Introducing the eBay Integration Library 
21: 
"none" 
"open" ) ; 
22: 
} 
23: } 
Fetching the categories is easy, as you can see from lines 1-9. The applica-
tion calls LoadAllCategories, which returns a CategoryCollection of all of the 
categories in the database. The application then enumerates this collection 
with the loop beginning on line 11. As you recall from Chapter 3, a category is 
a top-level category if its ID is the same as its parent's ID; the comparison on 
lines 13-15 tests this, and if the condition is true, adds the item to the $tree's 
list of items on lines 17-18. (Note that to facilitate finding subitems, the appli-
cation uses the tree's text property to store the item's human-readable name, 
and the path of items consists of 'I' -delimited category IDs.) Next, the code 
sets the new item's mode to indicate if the category is a collection of subcate-
gories or a leaf on lines 19-21. 
When you click a category item in the tree view, Perl/Tk invokes the openCmd 
of $tree, which executes the routine shown in listing 6-20. 
Listing 6-20. Opening a Category of the Tree 
1: sub opencmd 
2: { 
3: 
my( $tree, $path ) = @_; 
4: 
my $current!d = (split( "!", $path ))[ -1]; 
5: 
6: 
$application->Busy( 1 ); 
7: 
# For each category, if it has a name and 
8: 
# its parent is the current ID and it's not its parent 
9: 
# add it to the current node as a subitem. 
10: 
for ( $i = o; $i < $categories->ItemCount(); $i ++ ) 
11: 
{ 
12: 
if ( $categories->ItemAt($i)->{CategoryName} && 
13: 
$categories->ItemAt($i)->{CategoryParentid} == $currentid && 
14: 
$categories->ItemAt($i)->{Categoryid} != 
15: 
$categories->ItemAt($i)->{CategoryParentid} ) 
16: 
{ 
17: 
18: 
19: 
20: 
21: 
22: 
23: 
24: 
25: } 
} 
} 
my $id = $categories->ItemAt($i)->{Categoryid}; 
my $name = $categories->ItemAt($i)->{CategoryName}; 
my $leaf = $categories->ItemAt($i)->{LeafCategory}; 
$tree->add("$path/$id", -text => $name ); 
$tree->setmode( "$path/$id", !$leaf ? "open" : "none" ); 
$application->Busy( 0 ); 
157 

Chapter6 
158 
The routine begins on line 4 by obtaining the ID of the currently selected 
item, which is the last item of the 'I' -delimited category ID path. Next, the 
application indicates that it will be busy for a bit on line 6, because enumerating 
the category list takes time. Enumerating the category list is the work of the loop 
on lines 10-23, which tests each item to see if its parent is the currently selected 
item (line 13), and if the item itself is not a top-level category (lines 14-15). If it 
isn't, it obtains the category's ID, name, and whether or not it's a leaf node (with 
no subcategories), and uses the Tk function additem to actually add the item to 
the tree as a new item under the current path. 
NOTE 
Of course, you could initialize the entire $tree with all of thecate-
gories and subcategories at application launch time. The only reason I didn't 
show you this in this sample is because it could have detracted from your 
understanding of how the categories and subcategories are organized, and 
how you access them in PerL That concern aside, preinitializing the entire 
category list would certainly make expanding list items faster. 
Key Points 
In this chapter, you learned the following things about the eBay Synchronization 
library: 
â¢ The Integration Library gives you a collection of interfaces and data model 
objects to work with eBay users, items, feedback, and sales locally, only 
periodically exchanging data with the eBay service. 
â¢ The Integration library requires a local database in which to store items 
that have not been exchanged with eBay, as well as those items retrieved 
from eBay. 
â¢ eBay provides template databases for the Integration library in both 
Microsoft Access and Microsoft SQL Server formats that you can use in 
your application. 
â¢ The Integration library provides the IEBaySession interface for your appli-
cation to interact with the local database and the eBay site your 
application uses. 
â¢ You can use the Integration library with your existing database by provid-
ing serialization methods akin to those implemented by the IEBaySession 
interface. 
â¢ The Integration library provides the IEBaySynchronizer interface for your 
application to move data between the local database and the eBay service. 

CHAPTER 7 
Reviewing Internet 
Programming 
IN nm LAST SIX CHAPTERS, you've learned how to use the eBay service via the eBay 
SDK, a framework that provides a traditional object -oriented metaphor for working 
with eBay concepts such as items, users, and their transactions. One of the eBay 
SDK's great strengths is that it hides the notion of Internet programming; letting 
you concentrate on building your application and not on the minutia of making 
Internet requests of eBay servers and parsing the results. At times, however, it's 
necessary to set aside the abstractions and see how things work. Perhaps you're 
just curious about what goes on behind the curtain of the eBay SDK, or you're look-
ing to bring your eBay application to platforms such as linux where the eBay SDK 
isn't available. Regardless, you should understand the fundamentals of Internet 
programming, upon which the eBay API-the underpinning of the eBay SDK-is 
based. 
In this chapter, I review the basic fundamentals you need to understand how 
to craft Internet applications. I review the difference between a traditional appli-
cation and a networked application, how modem network applications use the 
HyperText 'D:ansfer Protocol (HTTP) to carry data between hosts, and how applica-
tions use the eXtensible Markup language (XML) as the lingua franca for exchanging 
data. After reading this chapter, you'll have the knowledge you need to better under-
stand how the eBay SDK works or to create an eBay application that uses the eBay 
API directly. 
Looking Inside an Internet Application 
When you write a traditional computing application, you divide application func-
tionality up in terms of objects and the methods they can perform (or perhaps just 
methods, if you tend to think in terms of procedural programming). In an Internet 
application, such as one that uses the eBay service, you do the same-except that 
some of the code runs on other hosts. Instead of passing the data that represents 
your objects around in memory, an Internet application may well pass some data 
over the Internet. Figure 7-1 shows a deployment diagram for an Internet applica-
tion that lists items on eBay. This deployment diagram is typical of many Internet 
applications. 
159 

Chapter? 
160 
eBay Users 
' ' ' ' ' ' ' ' ' ' 
/ 
HTML / 
/ 
eBay ISAPI 
Your Application 
: : : ... , '"' 
eBay API 
eBay Platform 
eBay DataBases 
Figure 7-1. A typical Internet application deployment diagram 
Although Internet applications share common elements with traditional appli-
cations in that they both use persistent storage to store between-instance data and 
memory to store images of data during program execution, there are two key differ-
ences. First, the application actually runs on two different hosts: the client, which 
originates the request to list a new item on eBay; and the server, which handles this 
request Second, the application uses a network (the Internet) to perform this request 
and receive the response. 

Reviewing Internet Programming 
Most network applications follow this basic topology, with the client initiating 
requests and the server responding. Some applications may include multiple 
tiers of client and server, such as Internet applications in which you use a Web 
browser to access your eBay application, which in turn accesses the eBay service 
directly. Figure 7-2 shows a deployment diagram that clarifies the roles of each 
component of an application such as this . 
â¢ 
eBay API 
eBay Platform 
Your Web 
Application 
eBay DataBases 
<<appears to user>> 
----- ---, 
Your Web 
Application 
Server 
eBay API 
Figure 7-2. An Internet application with multiple clients and servers 
In Figure 7-2, the Web browser is a client of the Web application server. The 
Web application server is a server with respect to the Web browser, but a client 
with respect to the eBay service. 
161 

Chapter7 
162 
In this diagram, both the Web client you use to access the application and the 
application itself are clients of eBay; it's common to refer to the application itself 
as a server with respect to your Web browser and as a client with respect to eBay. As 
with many other things, the notion of client and server is a relative one. 
Moving Data with the HyperText Transfer Protocol 
HTTP is an application-level protocol that has fast become the workhorse of the 
Internet, moving data not just for Web browsers but also for countless applications. 
Originally developed at CERN by Tim Bemers-Lee and others in the early nineties, 
it was created to carry text and images between workstations for scientific collab-
oration. From there, the protocol blossomed first into a vehicle for exchanging files 
of all kinds across the World Wide Web. Now it serves many other purposes, includ-
ing transferring files for file sharing (as the WebDAV protocol), news (by carrying 
Real Simple Syndication, or RSS, feeds between Web sites and RSS readers), and 
application-specific data for applications via services such as those offered eBay 
and other companies. 
At its heart, the HTTP protocol is strikingly simple. As with all client-server 
protocols, a client computer initiates a request on the network, which is received 
by a server, which then transmits a response. These requests and responses are 
human-readable messages, consisting of either a request body or a response body, 
and an object body. The request (or response body) begins with an opening line 
that specifies the request (or response status), followed by headers that describe 
the request. listing 7-1 shows a typical HTTP request for a Web document. 
Listing 7-1. A Typical HTTP Request 
1: GET /index.html HTTP/1.1 
2: Host: www.lothlorien.com 
3: Accept: text/html 
4: Accept-Language: en 
5: Accept-Charset: IS0-8859-1 
6: User-Agent: Mozilla/4.0 {compatible; MSIE-5.01; Windows NT 5.0) 
7: Connection: Close 
8: 
The first line is the request itself. In listing 7-1, the client is requesting the 
document named index.html, located at the server's root. The remaining lines 
(lines 2-7) are the request's headers, and they describe various attributes of the 
request, including the name of the server the client is trying to contact (line 2, 
www .lothlorien. com), what formats of data the client will accept (line 3, HyperText 
Markup Language), what natural language the client prefers (line 4, en for English), 
the character set the server should use to encode the response (line 5, IS0-8859-1, 

Reviewing Internet Programming 
which is ASCII), the kind of client (line 6), and that the server should close the con-
nection at the end of the request (line 7). The end ofthe request is indicated by 
a blank line. In response to the request, the server will send a message such as what 
you see in Listing 7-2. 
Listing 7-2. A Typical HTTP Response 
1: HTTP/1.1 200 OK 
2: Date: Wed, 20 Sep 2003 03:18:25 GMT 
3: Server: Apache/1.3.12 (Unix) PHP/4.0.1pl2 
4: Last-Modified: Wed, 16 Oct 2003 03:15:22 GMT 
5: Connection: close 
6: Content-Type: text/html 
7: 
8: <html> 
9: <body> 
10: <p> 
11: 
Hello world! 
12: <lp> 
13: </body> 
14: </html> 
The first line of the response is the response code. It has three parts: the version 
of the protocol (version l.l, in this case), the response code, a three-digit integer, 
and finally a human-readable response. The code 200 indicates success, as does 
the terse string OK. Lines 2--6 comprise the response headers, which describe the 
response contents. The first, line 2, indicates the date at which the response object 
was served to the client. Line 3 indicates the kind of server that answered the request 
(in this case, the Apache server with the optional PHP scripting language). Line 4 
indicates the last time the desired object was changed, whereas line 5 indicates 
that the server will close the request after delivering the desired object. Finally, 
line 6 indicates the format of the data. 
After the response headers comes a blank line, and then the response itself. 
In this case, it's a simple HTML document. However-and this is the beauty of 
HTTP-the objects exchanged by HTTP for the request and response can be any-
thing. In fact, for most Web applications, the request uses the HTTP POST instruction 
to send a bit ofXML (which I discuss toward the end of this chapter in the section 
"Representing Data with XML") to the server, describing what the application wants 
the server to do (such as perform a search or list an item). The server accepts the 
XML in the HTTP message, parses it, performs the desired operation, and then 
sends the response as another XML document. In tum, the client application then 
parses the XML to obtain the results. 
163 

Chapter7 
164 
HTTP provides a number of kinds of requests, but the two you'll see most 
often are GET and POST. You use the GET request to obtain an object from the remote 
server, whereas you use the POST request to send an object to the remote server. 
That said, in the early days of HTTP, there was no POST request. Instead, to send 
data to the server, you'd append it to the URI.. you pass to the server after a question 
mark {?) symbol The World Wide Web Consortium quickly found this to be ineffi-
cient for a number of reasons, and introduced the more useful POST request. 
If all of this sounds a little complex, don't worry: In almost every case you're 
likely to want to use HTTP, the platform you're developing on has already imple-
mented an HTTP interface for you. In most cases, all you need to do is create the 
request's object body, set options indicating any desired HTTP header values, 
and then make the request. The underlying library handles the implementation 
of the HTTP protocol for you, and returns the resulting HTTP response, either 
synchronously or asynchronously, with an interface that lets you determine the 
value of the response headers. 
Although simple, the HTTP protocol has an obvious drawback: It's not secure. 
When you make an HTTP request, anybody on the network between your com-
puter and the remote server can monitor the packets on the network and determine 
the contents of the HTTP request. Moreover, there's no way to be sure that the 
server you contact is really who it claims to be, or that {from the server's perspec-
tive) the client is who it claims to be. While acceptable in many cases {nobody really 
worries about whether or not some body's snooping when they casually read 
BBC or Slashdot, and spoofing a Web server takes a reasonable amount of work), 
for most cases that relate to business applications, a more secure alternative 
is necessary. 
Enter HTTPS: the secure flavor of HTTP, which uses HTTP over the Secure 
Sockets Layer {SSL), sometimes referred to as Transport Layer Security (TLS). 
HTTPS uses a bag of public-key cryptographic tricks to ensure that the client and 
server are who they say they are before permitting an interaction to take place, 
and then encrypts the transaction to keep the contents of the request and response 
hidden from prying eyes. If you've ever bought a book on Amazon. com, made 
a bid on eBay, made a payment on PayPal, or performed any one of millions of other 
financial transactions on the Web, it's likely that it was protected by HTTPS. As with 
HTTP, many platforms now include support for HTTPS, so making an HTTPS 
request isn't any harder than making an HTTP request. 
Because of the sensitive nature of eBay's transactions, they must be secure. 
Your users must be sure that they're actually interacting with the eBay service, and 
not an impostor. Moreover, information such as their transaction account balance, 
item listings, and the like, must also be protected from prying eyes. Consequently, 
all interactions with eBay interfaces such as the eBay API use HTTPS to protect 
the contents of the messages being exchanged. 
If you're looking to bring your eBay application to a platform other than 
Microsoft Windows, you need to use the eBay API, which requires that you use 
HTTPS. To get a feel for how to do this, in the next two chapters I show you how 

Reviewing Internet Programming 
to use the eBay API in both C# and Perl. In the following sections here, I show 
you both C# and Perl's support for HTTP (including HTTPS). 
Using HTTP in C# 
In the next two chapters, you'll learn how to use the eBay API to perform the same 
sorts of tasks you've already performed using the eBay SDK. To do this, you'll 
need to have access to an HTTP implementation. Fortunately, .NET includes the 
HTTPWebRequest and HTTPWebResponse classes in the System. Net namespace, which 
let you make HTTP requests, including those secured using SSL. 
NOTE 
Of course, if you're developing your eBay application using C# and 
.NET, you'll probably just want to use the eBay SDK instead of the eBay API. 
I1tat's exactly what you should do. The reason I'm using C# and .NET with 
the eBay API here is to show you how to use the API in an environment famil-
iar to you. 
Using these classes is easy, as you can see from Listing 7-3. 
Listing 7-3. Pseudocode Demonstrating How to Use an HTTPWebRequest Object in C# 
1: using System; 
2: using System.Net; 
3: using System.IO; 
4: 
s: namespace com.lothlorien.ebaysdkbook 
6: { 
7: 
8: 
9: 
10: 
11: 
12: 
13: 
14: 
15: 
16: 
17: 
18: 
19: 
class SampleHttpRequest 
{ 
static void Main() 
{ 
HttpWebRequest request; 
HttpWebResponse response; 
Uri 
StreamReader 
string 
string 
requestUri; 
bodyreader; 
bodytext = "" ; 
line; 
Stream 
responsestream; 
requestUri = new Uri("http://www.apress.com/"); 
request = (HttpWebRequest) 
165 

Chapter7 
166 
20: 
21: 
22: 
23: 
24: 
25: 
26: 
27: 
28: 
29: 
30: 
31: 
32: 
33: 
34: 
35: 
36: 
37: 
38: 
39: 
40: 
41: 
} 
42: 
} 
43: } 
WebRequest.Create(requestUri); 
II You can fill in the properties of the request 
II here if you want. All properties are optional. 
II Now get the response. 
response = (HttpWebResponse)request.GetResponse(); 
II Get a stream to read the requested document. 
responsestream = response.GetResponseStream(); 
if (responsestream != null) 
{ 
} 
bodyreader = new StreamReader(responsestream); 
while((line=bodyreader.Readline())!=null) 
{ 
bodytext+=line+"\r\n"; 
} 
bodyreader.Close(); 
response.Close(); 
Console.Writeline( bodytext ); 
First, the routine creates a unique Uniform Resource Indicator (URI), stored 
in a new Uri object on line 18. The application uses the WebRequest class factory 
method Create to create a new HttpWebRequest subclass on lines 19-20. If you like, 
you can initialize the various properties of the new HttpWebRequest, as the comment 
on lines 22-23 indicates, but for the purposes of this example, don't bother; instead, 
choose to use the defaults, which include settings that indicate making a conven-
tional HTTP GET request. Une 26 makes the request using the GetResponse method. 
The result is represented as a stream, which the routine obtains on line 29, and 
then reads the data from the stream into a string on lines 3~37. Once the response 
has been read, the routine closes the stream and the HttpWebResponse (which closes 
and frees the underlying network interfaces) on lines 37-39. Finally, the code prints 
the object body returned by the server to the console on line 40. 
Using HTTP in Perl 
Making an HTTP request in Perl is easy, too, with the help of the Ubrary for 
WWW access for Perl (LWP). The LWP module provides classes that encapsulate 
HTTP requests and responses, in much the same way as the HttpWebRequest and 
HttpWebResponse classes do in the Microsoft .NET Framework. In addition, there's 

Reviewing Internet Programming 
a related class, the user agent class, which is responsible for using the request 
object to actually make the HTTP request. listing 7-4 presents pseudocode in Perl 
demonstrating how to use these classes. 
Listing 7-4. Pseudocode Demonstrating How to Use an HTTPWebRequest 
Object in Perl 
1: use LWP; 
2: use LWP::UserAgent; 
3: 
4: # The user agent actually makes the request. 
s: $ua =new LWP::UserAgent; 
6: 
7: # Create a request. 
8: my $request= new HTTP::Request( 
9: 
GET => 'http://www.apress.com' 
10: 
) ; 
11: 
12: # Configure the request here if you want. 
13: 
14: my $result = $ua->request($request); 
15: 
16: # Check the outcome of the response. 
17: if ($result->is_success) 
18: { 
19: 
print $result->content; 
20: } 
The routine begins by requiring the presence of the LWP and LWP:: UserAgent 
modules (typically part of a default Perl installation). The routine first creates 
a User Agent object on line 5, which is responsible for actually fulfilling the 
HTTP request on behalf of the example. Next, on lines 8-9, the routine creates 
a new HTTP: :Request object, initialized to perform an HTTP GET to the URL 
http:/ /www.apress.com/. line 14 uses the UserAgent object's request method to make 
the request, storing the result in $resu1 t. This result is an object, with properties 
including is_success, which indicates whether the transaction succeeded or failed. 
lines 17-20 print the content that the server returned if the transaction succeeded. 
TIP In order to make HTTPS requests, you must have installed the 
Crypt:SSLeay module for Perl, which adds SSL support to Perl for use with the 
LWP module. If you want to try the examples in the next two chapters, be sure 
to install Crypt:SSLeay first. If you're using ActiveState Perl, take a peek at 
http: I /aspn. actives tate. com/ ASPN/Mail/Message/ppm/1817334 for the not-
so-gory details. Otherwise, head on over to http: I lwww. cpan. org/ and search 
for Crypt:SSLeay. 
167 

Chapter7 
168 
Representing Data with XML1 
XML has become the de facto standard for representing data between applications 
over the Internet. 
As with other markup languages, XML uses tags (which are formally known as 
elements) interspersed with your content to denote meaning. You write XML tags 
as text between angle brackets< and> (the greater than and less than symbols). 
Opening tags are written like <this>, while closing tags are written like </this>. Tags 
without content-so-called empty tags-are written using a trailing solidus, like 
this: <empty/>. Tag names must begin with a letter or an underscore (_),and may 
contain letters, digits, underscores, hyphens, and periods. XML tags are case sensi-
tive, so <request> is not the same as <REQUEST> (or <Request> for that matter!). 
It's important to realize that XML describes the syntax by which you create 
tags, but doesn't define tags per se. Instead, the responsibility for creating tags 
falls upon the application developer who creates tags that have special meaning 
for the application at hand. For example, as you'll see in the next chapter, the 
eBay API defines tags including <RequestUserld> and <RequestPassword>. Most of 
what you do when you use the eBay API is to format the arguments for eBay API 
calls inside of XML tags like these. Once you do that, all you need to do is send 
the resulting XML to eBay, and when the response comes back, interpret the XML 
in the response. 
XML has a few special tags, too, which you've already seen. The < ?xml ?> tag 
identifies an XML document, whereas the <! DOCTYPE> tag identifies the kind of 
XML document, such as XHTML. 
Any tag may have one or more attributes. An attribute is a name/value pair that 
provides additional information about a tag. The name follows the same rules as 
a tag name: Begin with an alphabetic character or an underscore, and follow with 
letters, numbers, hyphens, underscores, and periods. Attribute values are always 
strings contained between double quotes. For example, in the XML line 
1: <?xml version="l.O"?> 
the word version is an attribute of the xml tag, with the value 1. o. 
XML defines four entities to represent special characters that XML reserves 
for its own use. Table 7-1 shows these entities. 
1. This section was adapted from another of my books, Wireless Web Development with PHP and 
WAP (Berkeley, CA: Apress, 2001). 

Reviewing Internet Programming 
Table 7-LXMLEntities 
Entity 
&amp; 
&lt; 
&gt; 
&quot; 
Character 
& 
< 
> 
Note 
Ampersand 
Less than symbol 
Greater than symbol 
Double quote 
You can include comments in your XML, too, by enclosing the comments 
within the < ! -- and --> characters. You can't put comments before the <?xml ?> 
declaration, however, or within a tag itself. You can also use white space wher-
ever you like, except between characters of a tag or attribute. 
XML provides the notion of the well-formed XML document, which XML 
parsers must be able to interpret. Well-formed XML documents have the follow-
ing properties: 
â¢ The < ?xml ?> declaration must be the first thing in the document. 
â¢ The document should contain exactly one tag that encloses all other tags. 
â¢ Tags may be nested but may not overlap other tags. 
â¢ Tags that contain content must have matching start and end tags. 
â¢ Tags that don't contain content must end in/>. 
â¢ Attribute values must be quoted using 1111 â¢ 
By following these rules, any XML document can be represented as a tree. 
A tree is a data structure that has connected nodes, beginning with a single node 
called the root. In turn, the root connects to one or more nodes, called children, 
which themselves may have children. 
In the examples in the next two chapters, I show you how to use the eBay 
API in both C# and Perl. To do this, I'll use the XML facilities present in these two 
languages. If you're not familiar with these facilities already, read on to see how 
they can help you manage XML. 
169 

Chapter? 
170 
Creating XML in C# and Perl 
Through framework classes (modules in Perl, .NET Framework classes in C#), 
both C# and Perl support XML creation. Although these framework classes can 
be very useful when crafting applications with complex XML requirements, it's 
often far easier to simply use templates of the desired XML, and fill them in on-
the-fly using bits of string replacement code. Doing this has two advantages: It's 
simple to update the XML if the eBay API changes and you need to update the XML 
(because you can keep the XML in an external resource), and it's more likely to 
be closer to how you'd have to do it on other platforms, such as in C on a mobile 
device, where typically you don't have the luxury of robust application frameworks. 
NOTE 
While simple, the template approach can break down rather quickly if 
you're constructing complex XML. In practice, I find that it works well with 
things like creating eBay API requests, but not for things like representing 
a complex in-memory object on disk. 
For example, Listing 7-5 has a snippet ofXML for a typical eBay SDK request 
to get a list of categories. In the format you see in the listing, things the application 
will want to change are enclosed in caret(") characters. (Don't worry about the 
actual XML tags in the listing; you'll learn all about them in the next chapter.) 
Listing 7-5. A Template for Fetching Categories Using the eBay API 
1: <?xml version="l.O" encoding="utf-8"?> 
2: <request> 
3: 
<RequestUserid>"userid"</RequestUserid> 
4: 
<RequestPassword>"password"</RequestPassword> 
5: 
<Detaillevel>1</Detaillevel> 
6: 
<Errorlevel>1</Errorlevel> 
7: 
<Siteid>O</Siteid> 
8: 
<Verb>GetCategories</Verb> 
9: 
<CategoryParent>"parent"</CategoryParent> 
10: 
<Levellimit>"limit"</Levellimit> 
11: </request> 
If you load this into a string, you can easily use string replacement commands 
to create the desired XML for a specific category request. For example, Listing 7-6 
shows a snippet of C# that will do this. 

Reviewing Internet Programming 
Listing 7-6. Using the Template in Listing 7-5 to Create a GetCategories API Call in C# 
1: // Template has the actual XML template 
2: template = template.Replace( ""userid"", "sandy2718" ); 
3: template = template.Replace( ""password"", "magic" ); 
4: template = template.Replace( ""parent"", "2" ); 
s: template = template.Replace( ""limit"", "1" ); 
Pretty simple stuff. listing 7-7 shows the same trick in Perl. 
Listing 7-7. Using the Template in Listing 7-5 to Create a GetCategories API Call in 
Perl 
1: # $xml contains the desired XML. 
2: $xml =- s/\"userid\"/sandy2718/g; 
3: $xml =- s/\"password\"/magic/g; 
4: $xml =- s/\"parent\"/2/g; 
s: $xml =- s/\"limit\"/1/g; 
Using templates with string replacement like this also has the advantage of 
being self-documenting. 
Parsing XML in C# 
One of the key advantages of the .NET Framework is its support classes for parsing 
XML The .NET Framework has a bevy ofXML parsers, the simplest of which merely 
reports the type and contents of each XML item (tag, entity, character data-what 
have you), and more complex ones that generate an entire well-formed tree from 
an XML document. 
These XML parsers all take a stream that you can obtain from a file or a string. 
Let's see how to parse XML using the XML created from listing 7-5 and listing 7-6. 
Listing 7-8 shows a simple application that does the trick using the .NET Framework 
XmlTextReader class. 
Listing 7-8. Parsing XML in C# 
1: using System; 
2: using System.IO; 
3: using System.Xml; 
4: 
5: namespace com.lothlorien.ebaysdkbook 
6: { 
171 

Chapter7 
172 
7: 
Ill <summary> 
8: 
/// Summary description for Class1. 
9: 
Ill </summary> 
10: 
class XMLExample 
11: 
{ 
12: 
[STAThread] 
13: 
static void Main(string[] args) 
14: 
{ 
15: 
string xml = II The XML template from Listing 7-5. 
16: 
5tringReader reader; 
17: 
XrnlTextReader parser; 
18: 
string result; 
19: 
20: 
xml = xml.Replace( ""userid"", "sandy2718" ); 
21: 
xml = xml.Replace( ""password"", "magic" ); 
22: 
xml = xml.Replace( ""parent"", "2" ); 
23: 
xml = xml.Replace( ""limit"", "1" ); 
24: 
25: 
System.Console.Writeline( xml ); 
26: 
27: 
reader = new StringReader( xml ) ; 
28: 
parser = new XrnlTextReader( reader ); 
29: 
30: 
31: 
32: 
33: 
34: 
35: 
36: 
37: 
38: 
39: 
40: 
41: 
42: 
} 
43: 
} 
44: } 
while( parser.Read() ) 
{ 
if ( parser.NodeType == XrnlNodeType.Element 
{ 
} 
result = parser. Name + ": "; 
parser.Read(); 
result += parser.Value; 
System.Console.Writeline( result ); 
} 
System.Console.Readline(); 
parser. Close(); 
The code begins by creating the XML document string, using the template you 
saw in listing 7-5 (omitted for brevity on line 15 of listing 7 -8) on lines 20-23. For 
posterity, the code prints the resulting XML to the console on line 25. 
Next, it creates a StringReader class instance using the contents of the string xml, 
which the Xml Text Reader will use to parse the XML on line 27. The new Xml Text Reader 
reads one token at a time from the XML stream in the loop on lines 30-39, stopping 

Reviewing Internet Programming 
if the token is an XML tag on line 32. If it is, the next token will be the contents 
of the tag, and it prints both the name of the tag and the contents of the tag to 
the console, delimited by a colon and line break. 
Once the loop finishes, the application pauses to show the output (handy if 
you're running the code in the debugger) and then cleans up the parser and exits. 
Parsing XML in Perl 
Like C#, Perl has a bevy of XML parsers. My personal favorite is XML::Simple 
(included with most Perl distributions), which interprets an XML document and 
makes it a hash, with each XML tag a key and each attribute's contents the value 
of that key in the hash. Consider Listing 7-9, which uses the template XMLyou 
first saw in Listing 7-5, creates an XML document, and then interprets it using 
XML::Simple. 
Listing 7-9. Parsing XML in Perl 
1: use XML::Simple; 
2: use Data::Dumper; 
3: 
4: my $xml = <<TEMPLATE; 
5: <?xml version="1.0"?> 
6: <request> 
7: 
<RequestUserld>AuseridA</RequestUserld> 
8: 
<RequestPassword>ApasswordA</RequestPassword> 
9: 
<DetailLevel>1</Detaillevel> 
10: 
<ErrorLevel>1</ErrorLevel> 
11: 
<Siteld>O</Siteld> 
12: 
<Verb>GetCategories</Verb> 
13: 
<CategoryParent>AparentA</CategoryParent> 
14: 
<LevelLimit>AlimitA</LevelLimit> 
15: </request> 
16: TEMPLATE 
17: 
18: # $xml contains the desired XML. 
19: $xml =- s/\Auserid\A/sandy2718/g; 
20: $xml =- s/\Apassword\A/magic/g; 
21: $xml =- s/\Aparent\A/2/g; 
22: $xml =- s/\Alimit\A/1/g; 
23: 
24: my $result = XMLin( $xml ); 
25: 
26: print Dumper( $result ); 
173 

Chapter7 
174 
The routine begins by storing the template in the variable $xml using the 
here-notation with TEMPLATE on lines 4-16.lines 18--22 use Perl's regular expression 
substitution to insert the correct values for the eBay user ID, eBay password, 
category parent, and level limit, respectively. line 24 uses the XML::Simple method 
XMLin to parse the XML, returning a reference to a hash stored in $result. Finally, 
the code prints the contents of the hash on line 26. You can see the resulting output 
in Listing 7-10. 
Listing 7-10. The Hash Created by the Code in Listing 7-9 
1: 
2: 
3: 
4: 
s: 
6: 
7: 
8: 
9: 
10: 
{ 
}; 
'RequestPassword' => 'magic', 
'Errorleve1' => '1', 
'CategoryParent' => '2', 
'Siteid' => 'o', 
'Verb' => 'GetCategories', 
'RequestUserid' => 'sandy2718', 
'Detai1Leve1' => '1', 
'Leve1Limit' => '1' 
Key Points 
In this chapter, you reviewed the following important points about programming 
over the Internet: 
â¢ Programs that involve the Internet divide their functionality across multi-
ple machines, using the Internet to carry data between one computer and 
another. The computer originating a request is called the client, whereas 
the computer responding to the request is called the server. 
â¢ Many of today's Internet applications use HTTP to carry their data 
between a client application and a server application. 
â¢ For secure applications such as accessing eBay with the eBay API, you 
must use HTTPS (HTTP with SSL) to protect your data. 
â¢ Many applications, including the eBay SDK, use XML to encapsulate 
application data. 
â¢ You can use a template and string substitutions to create XML in your 
application. 

CHAPTER 8 
Using the eBay API 
IN CHAPTERS 3, 4, 5, AND 6 of this book, you learned how to access the eBay service 
using the high-level eBay SDK, which provides an abstraction that lets you treat 
the remotely hosted resources of the eBay service as local to your machine through 
a robust environment of data model objects and API classes available via the 
Component Object Model (COM) and the .NET Framework. Although the eBay 
SDK is the logical method of choice for many of your applications to access the 
eBay service, as a developer you have another choice: the eBay API itself. Unlike 
the eBay SDK, the eBay API doesn't provide an abstraction layer residing on the 
application host. Instead, the eBay API consists of the raw eXtensible Markup 
Language (XML) requests and responses your application exchanges with the eBay 
service via HTIPS. The lack of an abstraction layer is an asset in some applications, 
because using the eBay API you can write applications that interact with the eBay 
service on any platform that has access to HTTPS. 
In this chapter, I show you how to apply the fundamentals ofWeb programming 
I reviewed in the previous chapter to using the eBay API in your applications. First, 
I explain the benefits and costs of using the eBay API, comparing it with the eBay 
SDK. Next, I take you step-by-step through the process of making a request and 
handling a response with the eBay API. Finally, I show you how to use the eBay API 
by re-creating the Validate User example you first saw in Chapter 2 using the eBay 
API in both C# and Perl. 
Choosing to Use the eBay API 
The eBay API predates the eBay SDK: It's the lowest-level interface that third-
party developers such as you and I have to the eBay service. Using XML and 
HTIPS, it provides a down-to-the-metal network applications development 
environment for integrating your applications with eBay. As such, it offers some 
concrete benefits over the eBay SDK, but these benefits come with a cost. 
Because the eBay API uses XML and HTTPS to talk directly to the eBay ser-
vice, there are virtually no platform requirements for applications that use the 
eBay API-unlike the eBay SDK, which takes advantage of powerful technologies 
present on today's Microsoft Wmdows platform, including COM and the under-
lying framework Microsoft provides when building COM objects. Thus, the eBay 
SDK requires that your application execute on a system that provides support for 
COM running on the Intel processor platform: a version of Microsoft Windows 
175 

ChapterB 
176 
such as Microsoft NT 4.0 or MicrosoftWmdows XP. Although this is appropriate 
for a large number of consumer and business applications, and even many Web-
based applications, other developers may want to target non-Microsoft platforms, 
such as the Palm Powered Platform, Linux, or another UNIX-style operating sys-
tem like Mac OS X, or even a smart phone platform such as QUALCOMM BREW or 
Nokia's Series 60. You simply can't do this with the eBay SDK, but you can with the 
eBay API, which only requires you have a network stack that includes support for 
HTIPS and XML creation and parsing. You can easily provide the last two items 
yourself in any high-levellanguage, as I showed you in the previous chapter, 
So one obvious reason to choose the eBay API over the eBay SDK is you may 
have no other choice. In rare cases-and this is increasingly rare as eBay enhances 
both the eBay API and SDK simultaneously-you may find an eBay API you need 
to use that has no corresponding component in the eBay SDK. If this is the case, 
you can use the eBay API for the missing interface you need in conjunction with the 
eBay SDK, or you can write your entire application using the eBay API. 
One good reason why you don't want to choose the eBay API over the eBay 
SDK is performance. Although the eBay API resides below the eBay SDK, selecting 
the eBay API in the hopes of obtaining better runtime or memory performance 
for your application is a bad decision, because the eBay SDK adds little overhead 
above the API. (In fact, the bulk of any network application's execution, be it eBay 
or any other, is often spent waiting for the underlying network to bear requests 
and responses between your application and the remote service.) Moreover, 
the added benefits of the eBay SDK are its robust data model, the ability to use 
a debugged network layer that sits atop the eBay API, and the fact that the eBay 
SDK implementation is written by eBay engineers in ways that optimize the use of 
eBay resources. These benefits make it an excellent choice for most applications. 
Making a Request with the eBay API 
At the heart of using the eBay API is the client-server (request-response model) 
popularized in distributed computing in the late eighties and early nineties that 
continues today in the implementation of the HTIP protocol that powers the World 
Wide Web. Using an eBay API is different from making a traditional API request 
(calling a function). Instead, it's the same as making a Web request to receive the 
contents of a resource from a remote host on the network. 
1. 
First, you must construct the eBay API request: an XML document that 
specifies who you are, your credentials that permit you to access eBay, 
and the nature of the eBay API request that you wish eBay to carry out. 
2. 
Next, you must use HTTPS to send this XML document to eBay for pro-
cessing in the form of an HTIPS POST request. 

Using the eBay API 
3. 
Once the eBay service has received this request, it validates your creden-
tials and the request document. If you are allowed to request the action 
you specified, the eBay service carries out your request. 
4. 
Once the eBay service has carried out your request (or has determined 
that your request is in error), it encodes the response as an XML docu-
ment and returns it to you as the object body of the response of your 
HTTPS POST request. 
5. 
Your application interprets the XML document that the eBay service 
returns to you and acts on the contents. 
The eBay service requires that you use HTTPS, and not the less secure HTTP, 
because doing so ensures that your application is communicating with the eBay 
service and not a third party impersonating eBay, and the encryption provided by 
HTTPS ensures that third parties can't eavesdrop on the transactions your appli-
cation shares with eBay. 
Understanding the Contents of the eBay API Request 
and Response 
The request and response messages you exchange with eBay are encoded in XML, 
which I reviewed in the previous chapter. The eBay API defines a small set of com-
mon nodes required by all eBay API request and response messages, along with 
a slew of other nodes specific to individual eBay API transactions. 
All eBay API requests must be contained in an XML document with an XML 
root node <request>. Within this request are the nodes that define the request, 
as you can see from Listing 8-1. The XML should be encoded as either UTF-8 or 
iso-8859-1, and the encoding scheme you use indicated in the < ?xml ?> preamble; 
if you omit the encoding scheme, the default is iso-8859-1. 
ListingB-l.An eBayAPI Request 
1: <?xml version="l.O" encoding="iso-8859-1"?> 
2: <request> 
3: 
<RequestUserld>sandy2718</RequestUserld> 
4: 
<RequestPassword>secret</RequestPassword> 
5: 
<Errorlevel>1</Errorlevel> 
6: 
<Detai1Level>O</Detailleve1> 
7: 
<Siteld>O</Siteld> 
8: 
<Verb>GetlogoURL</Verb> 
9: </request> 
177 

ChapterS 
178 
All eBay API requests must include at least the following nodes: 
â¢ The RequestUserid node (line 3) contains the eBay user ID of the user making 
the request. 
â¢ The RequestPassword node (line 4) contains the password of the eBay user 
making the request. 
â¢ The Errorlevel node (line 5) contains an integer indicating how detailed 
errors from the response should be reported. (Higher numbers indicate 
greater levels of detail.) 
â¢ The Detaillevel node (line 6) contains an integer indicating the desired 
level of detail for the response. (Higher numbers indicate greater levels of 
detail, and not all requests support varying levels of detail.) 
â¢ The Si teid node (line 7) contains an integer identifying the site to which 
the request pertains. Table 8-1 shows some eBay sites and their corre-
sponding Siteid value. 
â¢ The Verb node (line 8) contains the name of the eBay API the eBay service 
is to execute. 
NOTE 
The eBay API also defines a RequestToken node, which can take the 
place of the RequestUserid and RequestPassword items in the XML. This node 
contains a token provided by eBay that identifies a user lD and a password 
for a session. In the examples that follow, for simplicity I stick to using the 
RequestUserid and RequestPassword nodes. 
Table 8-1. eBay Site Identifiers 
eBay Site 
Siteid Value 
United States 
0 
Canada 
2 
United Kingdom 
3 
Australia 
15 
Austria 
16 
Belgium (French) 
23 
France 
71 

Using the eBay API 
Table 8-1. eBay Site Identifiers (continued) 
eBay Site 
Siteld Value 
Germany 
77 
Italy 
101 
Belgium (Dutch) 
123 
Netherlands 
146 
Spain 
186 
Switzerland 
193 
Taiwan 
196 
eBayMotors 
100 
As you'll see in the section "Understanding the Contents of the eBay API," 
many eBay API requests have additional arguments, such as an item or category 
ID. These are represented as additional per-requestXML elements. 
The structure of a response from the eBay service is similar, as you see in 
Listing 8-2, which shows the response to the call shown in Listing 8-1. 
Listing 8-2. An eBay API Response 
1: <?xm1 version="Lo" encoding="iso-8859-1"?> 
2: <eBay> 
3: 
<EBayTime>2003-11-27 22:25:27</EBayTime> 
4: 
<Logo> 
s: 
<Height>60</Height> 
6: 
<URL> 
7: 
https://scgi.sandbox.ebay.com/saw/pics/api/ebay_market_144x6o.gif 
8: 
</URL> 
9: 
<Width>144</Width> 
10: 
</Logo> 
11: </eBay> 
The eBay service returns its response in an XML document whose root node 
is named eBay. Inside this node the eBay service always includes the EBayTime 
node, which contains the eBay canonical time at which the request was serviced. 
NOTE 
It's important that you be aware of the time returned by EBayTime, 
because it's the official clock at eBay by which all eBay actions, such as auc-
tions, are measured. 
179 

ChapterS 
180 
As you can see in Listing 8-3, errors are reported using the Errors node. 
Listing 8-3 shows a typical error response when the Errorlevel is set to 1. 
Listing 8-3. The eBay API Response Indicating an Error 
1: <?xml version="l.O" encoding="iso-8859-1"?> 
2: <eBay> 
3: 
<EBayTime>2003-11-28 02:13:26</EBayTime> 
4: 
<Errors> 
5: 
<Error> 
6: 
<Code>35</Code> 
7: 
<ErrorClass>RequestError</ErrorClass> 
8: 
<SeverityCode>1</SeverityCode> 
9: 
<Severity>SeriousError</Severity> 
10: 
<Line>O</Line> 
11: 
<Column>O</Column> 
12: 
<ShortMessage> 
13: 
<![CDATA[Invalid user name or password.]]> 
14: 
</ShortMessage> 
15: 
<LongMessage> 
16: 
<! [CDATA[Invalid user name or password. 
17: 
The username/password pair specified 
18: 
for the user is not valid. You may 
19: 
not use an email address as a username 
20: 
if the member has a User ID.]]> 
21: 
</LongMessage> 
22: 
</Error> 
23: 
</Errors> 
24: </eBay> 
The Errors node contains one or more Error nodes, each with the details of 
a specific error, such as incorrect eBay user ID, bad eBay certificate information, or 
information about a malformed eBay API request. Note that you can get an Errors 
node with valid responses, too. In that case, the text you receive in each Error node 
is a warning regarding how you're using the API. 
TIP 
The errors reported by the eBay API, especially those in the LongMessage 
node, have enough detail that they're appropriate for you to show to your 
users in the event of an error. I find it helpful as a developer to leave the 
ErrorLevel set to 1 and print error messages to the console or log file while 
debugging, and then to turn off the logging when I ship my application, and 
use the error messages in my user interface. 

Using the eBay API 
Populating the HTTP Headers in a Request 
In addition to supplying request information in the body of your HTIPS POST, you 
must also provide some information to the eBay service in the HTTPS headers for 
your request. The HTTP headers you must provide are the following: 
â¢ X-EBAY-API-COMPATIBILITY-LEVEL, which specifies the version of the eBay 
API that your application is using. 
â¢ X-EBAY-API-SESSION-CERTIFICATE, which contains your eBay application's 
developer key, application key, and certificate, each separated by semi-
colon(;) characters. This is case and space sensitive; don't add spaces or 
change the case of the keys, or your request will be denied. 
â¢ X-EBAY-API-DEV-NAME, which contains the developer key that eBay issued to 
you. This is case and space sensitive; don't add spaces or change the case 
of the keys, or your request will be denied. 
â¢ X-EBAY-API-APP-NAME, which contains the application key that eBay issued 
to you. This is case and space sensitive; don't add spaces or change the case 
of the keys, or your request will be denied. 
â¢ X-EBAY-API-CERT -NAME, which contains the certificate that eBay issued to 
you. This is case and space sensitive; don't add spaces or change the case 
of the keys, or your request will be denied. 
â¢ X-EBAY-API-CALL-NAME, which contains the name of the eBay API your 
request invokes. This must match the contents of the Verb you pass to 
eBay in your request. 
â¢ X-EBAY-API-SITEID, which contains the site ID of the site your request 
accesses. This must match the contents of the Si teid tag in your request. 
â¢ X-EBAY-API-DETAIL-LEVEL, which contains the detail level your request 
requires. This must match the contents of the Detaillevel node in your 
request. 
â¢ Content-Type, which should contain text/xml indicating that the object 
body of your request is an XML document. 
You should also include the optional but encouraged Content-length header, 
which contains the size of the object body of your request in bytes. 
181 

Chapter8 
182 
WARNING 
Neglecting to set one of these headers (except the Content-Length 
header, which is encouraged but not required) will cause your API request to 
fail. A common mistake developers new to the API make is to forget the 
X-EBAY-API-CALL-NAME header, which must contain the same API as your 
request invokes. Failure to include this header can result in somewhat cryptic 
error messages, so if you find that the eBay service is returning errors from 
a request that you think is correct, stop and check the headers: You may have 
forgotten to specify the X-EBAY-API-CALL-NAME header, or mistakenly set its 
contents to an incorrect value. When all else fails, be sure to carefully check 
the case and spacing of each of the header values you send, and compare 
those values with the values in your request. 
The X-EBAY-API-COMPATIBILITY-LEVEL header deserves additional explanation. 
At times, eBay makes changes to the eBay API. To ensure that applications can 
continue to use the eBay API without needing constant changes, eBay assigns 
a compatibility level to a specific package of APis that the eBay service supports 
at any given time (as of this writing, that compatibility level is 327). When you 
write your application, you must take note of the API version you're using, and 
include that version information in this header. As the eBay service accepts your 
request, it has the option to deny requests that predate a specific API version, 
allowing them to deprecate eBay APis over time. (In a similar vein, using a com-
patibility level greater than the current eBay compatibility level is an error.) 
You may find it odd that some of the information in your eBay API request is 
duplicated in your request's HTTPS headers, such as the X-EBAY-API-CALL-NAME 
header, which must be the same as the <Verb> node in your request. By including 
this information in the header, the server can make initial decisions about how 
to handle your request (possibly offloading it to another server or directing it to 
a specific cache) without taking the overhead of actually interpreting the XML in 
your request. 
Making the Request 
Once you create the request XML and a request object with the appropriate head-
ers, you simply send the XML document to the eBay service at the URL for the 
Sandbox or production service using an HTTPS POST request. Of course, how you 
actually make this request will differ depending on which language your application 
is written in, and the interface that language provides to an HTTPS implementation. 
Chapter 7 gives examples for both C# and Perl; other languages such as Java and 
PHP are quite similar. 

Using the eBay API 
Using the eBay API 
Although using the eBay API is admittedly more work than using the eBay SDK, 
it isn't hard, especially if you've had previous experience developing Web-based 
applications. In this section, I re-create the Validate User example you first saw in 
Chapter 2, using the eBay API instead of the eBay SDK. 
Validating a User in C# 
There's little point in using C# to implement an eBay API-based application such 
as ValidateUser, because there's the easier-to-use eBay SDK class ValidUserCall 
instead. That said, presenting the Validate User application using the eBay API lets 
you see how to use the API in a high-levellanguage with C-like syntax, something 
you don't get when you look at the example in Perl in the next section. Listing 8-4 
shows the Validate User example in C#. 
Listing 8-4. The Validate User application in C# Using the eBay API 
1: // Dependencies 
2: using System; 
3: using System.IO; 
4: using System.Net; 
s: using System.Text; 
6: using System.Xml; 
7: 
8: namespace com.lothlorien.ebaysdkbook 
9: { 
10: 
class ValidateUser 
11: 
{ 
12: 
private static string deviD; 
13: 
private static string appiD; 
14: 
private static string crtiD; 
15: 
16: 
static void Main(string[] args) 
17: 
{ 
18: 
canst string ebayAPIUrl = 
19: 
"https: //api. sandbox.ebay .com/ws/api.dll"; 
20: 
canst string detaillevel = "o"; 
21: 
canst string siteid = "o"; 
22: 
canst string verb = "ValidateTestUserRegistration"; 
23: 
canst string compatlevel = "327"; 
183 

ChapterB 
24: 
Uri requestUri. new Uri( ebayAPIUrl ); 
25: 
HttpWebRequest request; 
26: 
HttpWebResponse response = null; 
27: 
string userid, password; 
28: 
string xmlRequest; 
29: 
StreamWri ter writer; 
30: 
XmlTextReader parser; 
31: 
string result; 
32: 
33: 
34: 
xmlRequest = "<?xml version=\"1.0\"?><request>" + 
35: 
"<RequestUserid>"userid"</RequestUserid>" + 
36: 
"<RequestPassword>"password"</RequestPassword>" + 
37: 
"<Errorlevel>l</Errorlevel>" + 
38: 
"<Detaillevel>"detaillevel"</Detaillevel>" + 
39: 
"<Verb>"verb"<!Verb>" + 
40: 
"<Siteid>"siteid"</Siteid>" + 
41: 
"</request>"; 
42: 
43: 
// Create the Web client object. 
44: 
request = (HttpWebRequest) WebRequest.Create( requestUri ); 
45: 
// CAUTION: This is case sensitive! 
46: 
request. Method = "POST"; 
47: 
48: 
II Get the eBay keys. 
49: 
getKeys(); 
so: 
51: 
// Find out which account we should validate. 
52: 
Console.Write( "Enter eBay User ID of " ); 
53: 
Console.Write( "the seller account: "); 
54: 
userid = Console.Readline(); 
55: 
56: 
Console.Write( "Enter password to the " ); 
57: 
Console.Write( "seller account: " ); 
58: 
password = Console.Readline(); 
59: 
60: 
// Create the request XML. 
61: 
xmlRequest = xmlRequest.Replace( ""userid"", userid ); 
62: 
xmlRequest = xmlRequest.Replace( ""password"", password ); 
63: 
xmlRequest = xmlRequest.Replace( ""detaillevel"", 
64: 
detaillevel ); 
65: 
xmlRequest = xmlRequest.Replace( ""verb"", verb ); 
66: 
xmlRequest = xmlRequest.Replace( ""siteid"", site!d ); 
67: 
184 

Using the eBay API 
68: 
// Create the API Request HTTP Headers. 
69: 
request. ContentType = "text/xml"; 
70: 
request.Contentlength = xmlRequest.Length; 
71: 
request.Headers.Set( "X-EBAY-API-COMPATIBILITY-LEVEL", 
72: 
compatlevel ); 
73: 
request.Headers.Set( "X-EBAY-API-SESSION-CERTIFICATE", 
74: 
deviD + ";" + appiD + ";" + crtiD ); 
75: 
request.Headers.Set( "X-EBAY-API-DEV-NAME" , deviD ); 
76: 
request.Headers.Set( "X-EBAY-API-APP-NAME", appiD ); 
77: 
request.Headers.Set( "X-EBAY-API-CERT-NAME" , crtiD ); 
78: 
request.Headers.Set( "X-EBAY-API-CALL-NAME" , verb ); 
79: 
request.Headers.Set( "X-EBAY-API-SITEID", siteid ); 
80: 
request.Headers.Set( "X-EBAY-API-DETAIL-LEVEL", 
81: 
detaillevel ); 
82: 
83: 
// Create the request. 
84: 
writer = new StreamWriter( request.GetRequestStream() ); 
85: 
writer.Write( xmlRequest ); 
86: 
writer.Close(); 
87: 
88: 
// Issue the call. 
89: 
Console.Write( "Issuing ValidateTestUserRegistration "); 
90: 
Console.Writeline( "API call ... " ); 
91: 
try 
92: 
{ 
93: 
response = (HttpWebResponse)request.GetResponse( ); 
94: 
95: 
// Parse XML. 
96: 
parser = new XmlTextReader( 
97: 
response.GetResponseStream() ); 
98: 
99: 
result = "Congratulations! " + 
100: 
"The user has been validated successfully!"; 
101: 
102: 
while( parser.Read() ) 
103: 
{ 
104: 
if ( parser.NodeType == XmlNodeType.Element 
105: 
{ 
106: 
if ( parser.Name == "LongMessage" ) 
107: 
{ 
108: 
parser.Read(); 
109: 
result = parser.Value; 
110: 
} 
185 

Chapter a 
186 
111: 
112: 
113: 
114: 
115: 
116: 
117: 
118: 
119: 
120: 
121: 
122: 
123: 
124: 
125: 
126: 
127: 
128: 
129: 
130: 
131: 
132: 
133: 
134: 
135: 
} 
136: } 
} 
} 
} 
} 
parser. Close(); 
Console.Writeline( result ); 
catch( Exception e ) 
{ 
} 
Console.Write( "**Error**: " ); 
Console.Write( e.Message ); 
II Show the results. 
Console.Readline(); 
I* 
* Fetches the eBay developer keys from either 
* a dotfile or from the input line if the dotfile 
* isn't available. 
*I 
static void getKeys( 
{ 
II Omitted; see the implementation in Appendix A. 
} 
This example is purposely monolithic, encapsulating both its console-based 
user interface and the interaction with eBay in a single function, the application's 
entry point After declaring a bevy of variables (lines 18-31), you initialize a template 
the actual parameters of the request Lines 43-46 create a .NET Framework WebRequest 
object to the eBay service URL https: I Ia pi. sandbox. ebay. com/wslapi. dll, indicat-
ing that the request should use the POST method (line 46) when sending data to 
theURL. 
Line 49 reads your application keys from a configuration file using the same 
get Keys implementation you first saw in Chapter 3 and discussed in Appendix A. 
Lines 51-58 comprise the application's feeble user interface; the code prompts 
the user for the eBay user to validate, getting first the user's ID (lines 51-54), and 
then the user's password (lines 56-58). (I break each of the prompt lines across two 
lines of code in this example to better format the listing for this book; of course you 
wouldn't need to do that) 
Lines 60-66 create the eBay API request, using the template initialized on lines 
33-41 and the trick I showed you in Chapter 7 in the section "Creating XML in C# 
and Perl." Using a succession of Replace method invocations on the XML template, 
the code replaces each of the special tokens in the template (such as ""userid"") 

Using the eBay API 
with values the application obtains from you or from the constants declared on 
lines 20-23. 
Lines 68-81 set each of the request's HTTPS headers using the request's Set 
method of the request's Headers property. As with the XML, the values for the head-
ers are largely programmatically defined, coming from the contents placed in the 
request on lines 60--66, or the various keys previously obtained using the get Keys 
function on line 49. 
The C# HTTP implementation uses the StreamWriter interface to pass data 
from your application to the HTTPS connection; lines 83-86 pass the contents of 
the eBay API request in xm1Request to the request via a StreamWriter instance. 
Lines 89-124 issue the request and parse the resulting XML. The bulk of this 
code is wrapped in an expansive try I catch block to handle errors that might arise 
either from the Web request or from parsing the resulting XML. The line that actu-
ally makes the request is line 93, which blocks until the HTTP request completes 
and data is available on the underlying socket for the application to read. 
Lines 96--97 begin reading this data using an Xm1 TextReader instance, reading 
each node in the loop that spans lines 102-112. This example cheats--on line 99--100 
it sets the result assuming that the request completed successfully-and looks for 
a node indicating that an error occurred. If one occurred, the comparison on line 
106 will be true, and lines 108-109 get the value of the error returned by the eBay ser-
vice. Regardless of success or failure, line 114 shows the value ofresu1t, giving you 
feedback as to the success or failure of the request. The exception handler on lines 
116--120 simply print the message associated with the exception in the event of an 
error. 
Finally, line 123 simply pauses the display until you press the Enter key, giving 
you the opportunity to read the output if you execute the application from the 
Microsoft Windows Explorer. 
Validating a User in Perl 
If you prefer to develop applications on a platform other than Microsoft Wmdows, 
you've either read the previous seven chapters with amazing patience, or skipped 
it all to read the code that follows. This example, Validate User written in Perl with 
the eBay API, runs on any platform that has Perl, including Linux and Mac OS X. 
As such, it delivers on the promise of platform agnosticism made by the eBay API. 
Listing 8-5 shows Validate User in Perl 
Listing 8-5. The Validate User Application in Perl Using the eBay API 
1: # Dependencies 
2: use LWP::UserAgent; 
3: use HTTP::Request; 
187 

ChapterS 
188 
4: use HTTP::Headers; 
5: use XML::Simple; 
6: use Data::Dumper; 
7: 
8: sub getKeys; 
9: 
10: # Constants 
11: use constant True => 1; 
12: use constant False => o; 
13: use constant COMPATIBILITY_LEVEL => 335 
14: use constant EBAY_API_URL => 
15: 
'https://api.sandbox.ebay.com/ws/api.dll'; 
16: use constant DEBUG => o; 
17: use constant 5ITE_ID => 'o'; 
18: use constant DETAIL LEVEL=> 'o'; 
19: use constant VERB=> 'ValidateTestUserRegistration'; 
20: 
21: # Variables 
22: my $input; 
23: my $siteid = SITE_ID; 
24: my $detaillevel = DETAIL_LEVEL; 
25: my $verb = VERB; 
26: my $xml = <<TEMPLATE; 
27: <?xml version="LO"h 
28: <request> 
29: 
<RequestUserid>AuseridA<fRequestUserid> 
30: 
<RequestPassword>ApasswordA</RequestPassword> 
31: 
<Errorlevel>1</Errorlevel> 
32: 
<DetailLevel>AdetaillevelA<fDetaillevel> 
33: 
<Verb>AverbA</Verb> 
34: 
<Siteid>AsiteidA<fSiteid> 
35: </request> 
36: TEMPLATE 
37: 
38: 
39: # Create the user agent object. 
40: print "Creating user agent object â¢â¢â¢ \n"; 
41: my $useragent = LWP::UserAgent->new; 
42: 
43: # Get the eBay keys. 
44: my ( $devKey, $appKey, $crtKey ) = getKeys(); 
45: 
46: # Find out which account we should validate. 
47: print "Enter eBay User ID of the seller account: "; 

48: chomp($input = <>); 
49: my $userid = $input; 
so: 
51: print "Enter password to the seller account: 
52: chomp($input = <>); 
53: my $password = $input; 
54: 
ss: # Create the request XML. 
56: $xml =- s/\Auserid\A/$userid/g; 
57: $xml =- s/\Apassword\A/$password/g; 
58: $xml =- s/\Adetaillevel\Ai$detaillevel/g; 
59: $xml =- s/\Averb\A/$verb/g; 
60: $xml =- s/\Asiteid\A/$siteid/g; 
61: 
62: 
63: # Create the API Request HTTP Headers. 
64: my $header= HTTP::Headers->new; 
"Â· , 
65: $header->push_header( 'X-EBAY-API-COMPATIBILITY-LEVEL' => 
66: 
COMPATIBILITY_LEVEL ); 
67: $header->push_header( 'X-EBAY-API-SESSION-CERTIFICATE' => 
68: 
"$devKey;$appKey;$crtKey"); 
69: $header->push_header( 'X-EBAY-API-DEV-NAME' => $devKey ); 
70: $header->push_header( 'X-EBAY-API-APP-NAME' => $appKey ); 
71: $header->push_header( 'X-EBAY-API-CERT-NAME' => $crtKey ); 
72: $header->push_header( 'X-EBAY-API-CALL-NAME' => VERB ); 
73: $header->push_header( 'X-EBAY-API-SITEID' => 
SITE_ID ) ; 
74: $header->push_header( 'X-EBAY-API-DETAIL-LEVEL' => SITE_ID ); 
75: $header->push_header( 'Content-Type' => 'text/xml' ); 
76: $header->push_header( 'Content-Length' => length( $xml ) ); 
77: 
78: print $xml, "\n" if DEBUG; 
79: 
80: # Create the request. 
81: my $request= HTIP::Request->new( "POST", EBAY_API_URL, 
82: 
83: 
84: # Issue the call. 
$header, $xml); 
85: my $response = $useragent->request($request); 
86: 
87: # Handle transport errors first. 
88: die "Network error contacting eBay." if $response->is_error; 
89: 
90: print $response->content(), "\n" if DEBUG; 
Using the eBay API 
189 

ChapterS 
190 
91: # Parse the result. 
92: my $result = XMLin( $response->content() ); 
93: print Dumper( $result ) , "\n" if DEBUG; 
94: 
95: # Show the result. 
96: if( $result->{Errors} 
97: { 
98: 
print "**Error**:", 
99: 
$result->{ Errors}->{Error}->{ LongMessage}, "\n"; 
100: } 
101: else 
102: { 
103: 
104: 
105: } 
print "Congratulations! "; 
print "The user has been validated successfully !\n"; 
106: print "\n"; 
107: <> j 
108: 
109: # Fetches the eBay developer keys from either 
110: # a dotfile or from the input line if the dotfile 
111: # isn't available. 
112: sub getKeys 
113: { 
114: 
# omitted for brevity; see the implementation in Appendix A. 
115: } 
The example begins by importing the various modules on which it depends, 
including LWP for Web access, HTTP for Web access and HTTP Header manage-
ment, XML::Simple for XML parsing, and Data::Dumper for debugging. Lines 
11-19 define a plethora of constants the script uses later, such as the URL of the 
eBay service (lines 14-15), whether or not to run the script with debugging (line 16), 
and attributes of the eBay request itself (lines 17-19). Lines 22-36 initialize several 
local variables, including the XML template for the eBay API request. 
Line 41 creates the $useragent that provides the HTTPS protocol, whereas line 
44 obtains the application's eBay credentials using the get Keys method developed 
for the purpose and shown in Appendix A 
Lines 46-53 prompt you for the eBay user ID and password of the user to 
validate. 
Lines 55-60 populate the XML template with the request data using Perl's 
regular expression search-and-replace operators/ I lg and-=, which replaces the 
first argument with the second throughout the string. Lines 63-76 complete creating 
the request by creating the headers required by eBay. 
Lines 81-82 create the request, indicating by the arguments to the new operator 
that the request is a POST request to the eBay service URL with the headers initialized 
in lines 63-76, and with the object body in $xml. Line 85 uses the resulting $request 

Using the eBay API 
to send the eBay API request to the eBay service, storing the result in the $response 
structure. This is a synchronous call; the IWP module performs the request and reads 
the entire response, returning it as the result value $response, a hash that contains 
both the result data and a success or failure notification. Line 88 ends the script with 
an error if the request failed, checking the $response's is_ error field. 
Line 92 parses the XML using the XM:L::Simple module, converting the returned 
XML from a string ofXM:L nodes to a Perl hash. Lines 96-100 look for any indication 
of error, whereas lines 103-104 print a success message if the eBay service didn't 
return an error. 
Key Points 
In this chapter, you learned the following key points about the eBay API: 
â¢ The eBay API provides a low-level interface between applications and the 
eBay service using XM:L and HTTPS. All applications that use eBay use 
the eBay API, including those you build with the eBay SDK. 
â¢ To use the eBay API, your target platform need only have a network 
implementation capable of supporting HTTPS. 
â¢ You can write applications using the eBay API on platforms that don't support 
the eBay SDK, letting you develop for platforms such as Linux, flavors of 
UNIX such as Mac OS X, or even handheld and telephony platforms such 
as the Palm Powered Platform or Nokia's Series 60. 
â¢ You must use HTTPS to exchange requests and responses with the eBay 
service to ensure the security of your application. The eBay service doesn't 
support the less secure HTTP protocol. 
â¢ When making an eBay API request, you must encode the request in XM:L 
and include your eBay keys and other information in the request's 
HTTPS headers. 
â¢ The eBay service responds to your request with an XM:L document that 
contains the results of your request or an <Errors> node that enumerates 
the errors that your request may have encountered. 
191 

CHAPTER 9 
Using the eBay API 
Within a Web Site 
IN THE LAST TWO CHAPTERS, you learned that under the eBay SDK resides the eBay 
API, a Web service interface to the eBay service. In the last chapter you learned 
how to access this interface in both C# and Perl, demonstrating the basics of 
using the eBay API in your application. 
In this chapter, I build on that knowledge to show you how you can use the 
eBay API when crafting your Web site, and include a sample Web application in 
Perl that lets you search the eBay Sandbox for items currently up for auction. 
First, I discuss how the eBay service can enhance your Web presence. Next, I take 
you through the most commonly used eBay API interfaces, one at a time, so that 
you'll understand what facilities are available to you within the eBay API 
(whether you intend to use it in a Web application or as part of a stand-alone 
application). Finally, I close the chapter with the aforementioned sample appli-
cation, demonstrating how to search the eBay service from a Web site powered 
by Perl using the eBay API. 
Understanding How the eBay Service Fits with Your 
Web Site 
There are myriad reasons why you might want to integrate the eBay service with 
a Web site. Perhaps it's to provide a Web-based interface on a local intranet that 
unifies your product inventory with your eBay store, or maybe you'd like to offer 
a turnkey package to small businesses that lets them list and sell items on their 
Web site via eBay. Regardless, the eBay service works as well with Web-hosted 
services as it does for stand-alone applications. 
Although I can't hope to cover the entire gamut of writing a Web application 
from scratch here, it's important to note that using the eBay API or SDK within 
your Web application is really no different than using it from a stand-alone 
application. In either case, you define your business logic, decide where the eBay 
service fits, and then use either API or SDK calls to interact with eBay. The chal-
lenges inherent in writing a Web application, such as providing security and 
193 

Chapter9 
194 
session management (or ensuring that your relationship with your clients is ses-
sionless, something that's getting harder and harder to do every day as users 
expect more from Web applications), aren't affected by the eBay interfaces. The 
converse is true, too: The eBay interfaces don't do much to help you in those sit-
uations, because that's beyond their purview. 
One thing you'll need to consider when integrating eBay in your application 
is how the application running on the server should cache data from eBay, such 
as category data, item query results, and so forth. If you're using the eBay SDK 
and the eBay Integration Ubrary, you're all set: You can use these with a back-
end database such as Microsoft Access or Microsoft SQL Server. If you're using 
the eBay SDK alone, however, or simply the eBay API, you'll have more work to 
do because you'll need to use a database (or mimic your own with files) to store 
the data your Web application must cache. Regardless, this is a consideration 
you should tackle up front so that your design can include the interaction with 
the local cache of eBay data. 
This brings up an important point that I've not stated directly: Just because 
this chapter talks about both the eBay API and Web sites, that certainly doesn't 
mean that you can only integrate your Web site with the eBay service using the 
eBay API. If you're developing a Web site using the .NET Framework, you should 
definitely be using the eBay SDK and the eBay Integration Ubrary! If, on the 
other hand, you're targeting a deployment on Unux or a UNIX variant, you'll 
need to use the eBay API. 
TIP If you're new to building and deploying Web sites and services, you 
should step back and learn what you need to do. In today's high-bandwidth 
world, it's often not quite as simple as hanging a Linux box off the end of 
a DSL line, or writing a few Web pages and posting them on your local Web 
hosting provider. Check out a book such as PHP MySQL Website Programming: 
Problem-Design-solution by Mike Buzzard, Chris Lea, Dilip Thomas, and 
Jessey White-Cinis (Berkeley, CA: Apress, 2003) for traditional Web-based 
development or Wireless Web Development with PHP and WAP by your 
humble author (Berkeley, CA: Apress, 2001). 
Understanding the Contents of the eBay API 
This section describes the most common eBay API interfaces you're likely to 
encounter when developing your application. To help you learn these APis, I've 
broken them up into a few broad categories. For a detailed list of all of the eBay 
APis sorted by alphabetical order, check the documentation available at eBay's 
developer Web site, http: I I developer. ebay. com. 
In the discussion of each eBay API, I show only those argument entity tags 
that are appropriate for a specific eBay API call. When crafting your eBay API 
XML, don't forget the required tags you learned in the section "Understanding 
the Contents of the eBay API Request and Response" in the previous chapter. In 

Using the eBay API Within a Web Site 
addition, the Verb attribute you pass is the same name as the call itself; for exam-
ple, if you are invoking the GetAPIAccessRules API, the Verb in your request 
should be GetAPIAccessRules. 
Understanding General eBay API Calls 
The interfaces in this section pertain to general operating aspects when using 
the eBay interfaces, such as enumerating categories, determining shipping rates, 
and so forth. 
The GetAPIAccessRules Interface 
The GetAPIAccessRules interface provides your application with a way to deter-
mine the access rules and usage statistics for each API call. Through this API, your 
application can measure how it uses the eBay service, and your application users 
can meter application use. The GetAPIAccessRules method has no arguments. 
Your application likely won't reveal the access rules to its users, but you can 
use this API to track how much of your quota for API access your application has 
used, and inform users when they're running low on specific API calls over 
a time interval through the use of warning messages. 
The return value for the GetAPIAccessRules interface is contained within the 
APIAccessRules tag, with a single APIAccessRule tag for each eBay API that has an 
access rule. Within the APIAccessRule tag are the access rules for a specific API; 
Table 9-1 shows the tags you'll find within the APIAccessRule tag. 
Table 9-1. Tags Returned by GetAPIAccessRules 
Tag 
Call Name 
CountMode 
DailyHardlimit 
DailySoftlimit 
DailyUsage 
EnforceURL 
HourlyHardlimit 
Purpose 
Name of the API call. 
Indicator of whether the rule is counted toward the application 
aggregate limit. Returns a value of true (1) if the rule is counted. 
Number of calls per day that your application may make before 
a call is refused. 
Number of calls per day that your application may make before 
you receive a warning. 
Number of calls that your application has already made today. 
Indicator of whether URL pooling for this call is currently being 
enforced. Returns a value of true (1) if pooling is being enforced. 
Number of calls per hour that your application may make 
before a call is refused. 
195 

Chapter9 
196 
Table 9-1. Tags Returned by GetAPIAccessRules (continued) 
Tag 
HourlySoftLimit 
HourlyUsage 
ModTime 
Purpose 
Number of calls per hour that your application may make 
before you receive a warning. 
Number of calls that your application has already made this hour. 
Last time that values for RuleCurrentStatus, RuleStatus, URL, or 
EnforceURL changed. 
RuleCurrentStatus Your application's current status with regards to the access rule. 
RuleS tat us 
URLModTime 
Possible values are 
o: Not set 
1: Your application has exceeded its hourly limit 
2: Your application has exceeded its daily limit 
3: Other 
Status of the access rule. Possible values are 
-1: The rule is turned off. No rule validation was performed. 
o: The application cannot make requests for the specified CallName. 
1: The rule is enabled. Rule validation was performed. 
Last time that values for URL or EnforceURL changed. 
The GetCategories Interface 
The GetCategories interface lets you enumerate over eBay's categories, providing 
a way to determine the name of a category for a specific ID, as well as determine 
the relationship between a parent category and its children. Table 9-2 shows the 
argument tags to the Get Categories interface, whereas Table 9-3 shows the tags 
returned by the eBay service. 
Table 9-2. Tags Passed to GetCategories 
Tag 
Category Parent 
CategorySiteid 
Purpose 
Specifies the ID of the parent category for the child categories 
that you want to return. Not specifying a CategoryParent 
defaults to the root category. 
Indicates the eBay site from which you are requesting 
categories. Should be the same as the mandatory Siteid 
argument. 

Using the eBay API Within a Web Site 
Table 9-2. Tags Passed to GetCategories (continued) 
Tag 
Levellimit 
ViewAllNodes 
Purpose 
Specifies which levels of categories to return. By specifying 
a value in Levellimi t, you'll retrieve all category nodes with 
a Categorylevelless than or equal to the Levellimit value. Use 
Levellimit with Detaillevel set to 1. 
Specifies whether to return only leaf categories (0 is false) or 
leaf and container categories (1 is true). Default is 1. 
Table 9-3. Tags Returned by GetCategories 
Tag 
Category!d 
Categorylevel 
CategoryName 
CategoryParent 
Is Expired 
IsVirtual 
LeafCategory 
CategoryCount 
UpdateGMTTime 
Update Time 
Version 
Purpose 
Distinct numeric ID for each returned category. 
Level where each returned category fits into the category 
hierarchy. 
Textual name for each category returned. Retrieved as 
character data. 
Distinct numeric ID for the parent category of each returned 
category. Should always be the same as the category ID 
specified in the CategoryParent input argument. 
Indicator of whether a category is no longer available. Applications 
shouldn't allow users to list items in expired categories. 
Indicator of whether a category is virtual. Applications 
shouldn't allow users to list items in virtual categories. (Used by 
eBay Motors listings.) 
Indicator of whether a category is a leaf (1) or a container (0) 
category with subcategories. 
Total number of category nodes returned. 
Date and time the category set was last updated, in GMT. (Same 
as Update Time, but in GMT.) Use the Update Time with Detail level 
set to 0 to determine if a full GetCategories call is necessary. 
Date and time the category set was last updated, in Pacific 
standard time. Use Update Time with Detail level set too to 
determine if a full GetCategories call is necessary. 
Version number assigned to the current rendition of the 
category hierarchy and category group divisions. 
197 

Chapter9 
198 
As you may recall from Chapter 3, eBay categories are kept in a hierarchical 
tree, with some categories being parents of other categories. The CategoryParent 
tag, used by both the request and the response, indicates the parent of a specific 
category. 
Downloading the entire category tree using GetCategories is an expensive 
operation resulting in the transfer of over a megabyte of data between eBay and 
your application. For that reason, you should cache the result of the 
GetCategories interface, and only obtain updates when the Version tag shows 
that your category cache is out of sync with eBay. You can do this by determining 
the current category set's version by invoking GetCategories with a value of 0 for 
both the Detail level and ViewAllNodes tags; the return value will provide the cur-
rent version without sending a new image of the category data. If the category 
version isn't equal to the version you cached (eBay reserves the right to both 
increment and decrement the category version!}, you should download a new 
category tree using GetCategories, and again cache both the version and all of 
the category information. Although category data seldom changes more than 
once a month, eBay suggests that you perform this check and resynchronize at 
least once a day. 
WARNING 
You must cache the results from calling GetCategories, rather than 
calling it repeatedly to determine the same category information. Moreover, 
you should only call GetCategories to update your application's cache of 
categories once a day per eBay's recommendation. Failure to follow these 
guidelines-invoking GetCategories more often than necessary-will result 
in your application failing to receive eBay certification. 
The GeteBayOfficialTime Interface 
The GeteBayOfficial Time interface returns the current time used by eBay with 
respect to all auctions. It takes no arguments, and returns the current eBay time 
in the EBayTime tag. The returned date and time is passed as a string in the format 
YY-MM-DD HH:MM:SS in Greenwich mean time. 
The GetLogoURL Interface 
The GetlogoURL interface returns the URL where your application can obtain the 
eBay logo that your application must show in conjunction with other application 
credits. The method takes one argument, the Size argument, for which you may 
include one of the following values: 

Using the eBay API Within a Web Site 
â¢ Specify a value of Small for an image that is no larger than 44 pixels high 
and 108 pixels across. 
â¢ Specify a value of Medium for an image that is no larger than 60 pixels high 
and 144 pixels across. 
â¢ Specify a value of Large for an image that is no larger than 79 pixels high 
and 182 pixels across. 
The response contains the URL you use to obtain the logo image, along with 
two additional parameters: Height, which specifies the height of the image in 
pixels; and Width, which specifies the width of the image in pixels. 
WARNING 
Your application must cache and show the eBay logo provided by 
this interface somewhere within its user interface if your application displays 
data from eBay. Your application should cache the returned image, periodi-
cally refresh it, and show it in a place such as your application's About box. 
The GetShippingRates Interface 
The GetShippingRates interface lets your application directly access the eBay 
shipping calculator. Your application can use it anytime to provide you with esti-
mated shipping costs, such as when first listing an item. Table 9-4 shows the 
argument tags you may pass to the GetShippingRates interface, whereas Table 9-5 
summarizes the response tags you can expect. 
Table 9-4. Tags Passed to GetShippingRates 
Tag 
PriceSold 
Purpose 
Value of the item. Used to calculate value returned in 
InsuranceFee field. 
Quanti tySold 
Number of objects sold in the auction to a single buyer that 
would be shipped together. Default is 1. 
ShipFromZipCode 
Zip code from which the seller is shipping the item. 
Shipping!rregular 
An item that can't go through the stamping machine at the 
shipping service office (a value of 1) and requires special or 
fragile handling. 
199 

Chapter9 
200 
Table 9-4. Tags Passed to GetShippingRates (continued) 
Tag 
ShippingPackage 
ShippingService 
ShipToZipCode 
WeightMajor 
WeightMinor 
WeightUnit 
Purpose 
Size of the package to be shipped. Valid values are 
0: None 
1: Letter 
2: Large envelope 
3: USPS flat-rate envelope 
4: Package/thick envelope 
s: USPS large package/oversize 1 
6: Very large package/ oversize 2 
7: UPS letter 
Shipping carrier for the item. Valid values are 
3: UPS Ground 
4: UPS 3rd Day 
5: UPS 2nd Day 
6: UPS Next Day 
7: USPS Priority 
8: USPS Parcel 
9: USPS Media 
10: USPS First Class 
11: USPS Express Mail 
Zip code that the seller is shipping to. 
Weight of the item(s): Number of units for shipping weight unit 
of measure specified by WeightUni t. 
Weight of the item(s): Fractional number of units for shipping 
weight unit of measure, either pounds or fractions of 
a kilogram, depending on WeightUnit. 
Unit of measure for shipping weight. Default value is 1. Valid 
values are 
1: WeightMajor specifies pounds, WeightMinor specifies ounces 
2: WeightMajor specifies kilograms, WeightMinor specifies 
fractions of a kilogram 

Using the eBay API Within a Web Site 
Table 9-5. Tags Returned by GetShippingRates 
Tag 
Shipp ingRates 
Shipp ingRate 
Insurance Fee 
ShippingFee 
ShippingRateErrorMessage 
ShippingService 
ShippingType 
Purpose 
Container node for the one or more shipping rates 
returned. 
Each Shipp ingRate contains the detail data for one 
shipping rate. If no shipping service was specified in 
the ShippingService input argument, result includes 
shipping rate data for all available shipping services. 
Insurance fees associated with shipping the item(s). 
Calculated from the value in the PriceSold 
argument. If no PriceSold is specified, InsuranceFee 
returns zero. 
Shipping costs for the item. (Doesn't include any 
seller packaging or handling fees.) 
Container of any error message associated with the 
attempt to calculate shipping rates. If there was no 
error, returns No Error. 
Carrier and service for shipping the item. Possible 
values are 
3: UPS Ground 
4: UPS 3rd Day 
5: UPS 2nd Day 
6: UPS Next Day 
7: USPS Priority 
8: USPS Parcel 
9: USPS Media 
10: USPS First Class 
11: USPS Express Mail 
Indicator of whether shipping costs are flat rates or 
calculated rates. Possible values are 
1: Flat shipping rate 
2: Calculated shipping rate 
201 

Chapter9 
202 
The GetStoreDetails Interface 
The GetStoreDetails interface lets you obtain the custom categories-which 
eBay calls departments-for the stores maintained by the specified eBay user. To 
use GetStoreDetails, pass the eBay ID of the owner of the eBay store auction in 
question. (Users can only own one store at a time, so there's no possible issue 
with store details being returned for multiple stores.). Table 9-6 summarizes the 
response tags you can expect. 
Table 9-6. Tags Returned by GetStoreDetails 
Tag 
CustomCategories 
Category 
CategoryNumber 
Name 
Count 
StoreName 
Purpose 
Contains Category tags and the Count tags. This provides a list 
of the custom categories defined by the store. 
Container for CategoryNumber and Name tags. 
Number of the returned category within the Category tag. 
Name of the category returned as character data within the 
Category tag. 
Number of Category tags returned within the 
CustomCategory tag. 
Name associated with the seller's eBay store. 
Although this interface doesn't offer the same versioning as GetCategories, 
you can query the interface once and cache the results during your application's 
execution. 
Understanding eBay API Calls for Users 
The interfaces in this section give your application access to information about 
eBay users, such as their account, feedback, specific user interface choices when 
using the Web services, and the transactions a seller must manage. 
The GetAccount Interface 
The GetAccount interface returns the account information for the currently logged-in 
user, enumerating transactions either by time period or as an invoice for recent 
activity. Note that the GetAccount tag can only return account information for the 
user indicated by the RequestUserld tag in the request. Table 9-7 shows the argu-
ment tags you may pass to the GetAccount interface, whereas Table 9-8 summarizes 

Using the eBay API Within a Web Site 
the response tags you can expect within the Account tag (which contains both an 
account summary in the Su11111ary tag as well as information about each account in 
one or more Entry tags) returned by the eBay service. 
Table 9-7. Tags Passed to GetAccount 
Tag 
PageNumber 
AccountPageType 
Period 
BeginOate 
EndOate 
InvoiceMonth 
Purpose 
For paginated result sets, specifies the subset ("page") of items 
to return. Default is 1 to return the first page. 
Specifies the report type, period, or invoice. Allowed values are 
0: View by period or date/range (default) 
1: View by invoice 
Specifies the time period for a period report. This argument 
only required if AccountPageType is o. Possible values are 
o: Since last invoice (the default value) 
1: For the last day 
2: For activity between dates (BeginOate and EndOate) 
3: Ever since the user joined eBay 
7: For the last week 
14: For the last two weeks 
30:Forthelastmonth 
60: For the last two months 
Start date for a period report. Use with EndOate to define a date 
range. This argument is only required if Period is 2. Date format 
is YYYY-MM-00. 
End date for a period report. Use with BeginDate to define 
a date range. This argument is only required if Period is 2. Date 
format is YYYY -MM-DD. 
Month of the eBay invoice to return as a report. Use with 
Invoice Year to uniquely identify the invoice. This argument is 
only required if AccountPageType is 1. Allowed values are 
0: Since last invoice (the default value) 
1: January 
2: February 
3: March 
4:April 
s:May 
6: June 
7: July 
8:August 
9: September 
10: October 
11: November 
12: December 
203 

Chapter9 
204 
Table 9-7. Tags Passed to GetAccount (continued) 
Tag 
InvoiceYear 
Currency 
Summary 
Purpose 
Year of the eBay invoice to return as a report. Use with 
InvoiceMonth to uniquely identify the invoice. Specify year 
in four-digit format, YYYY. This argument is only required if 
AccountPageType is 1. If InvoiceMonth is o, don't specify 
a value for InvoiceYear. 
ID for the currency for the account report. The currency for the 
user's associated eBay site is used as default. 
Indicator of whether to include account sununary information 
in the returned report. 
Table 9-8. Tags Returned by GetAccount 
Tag 
PageNumber 
TotalPages 
Currency 
Summary 
Accountld 
AccountState 
BillingCycleDate 
Payment Type 
CCinfo 
Purpose 
Number of the page returned. 
Total number of pages in the account. 
ID of currency in which monetary values are returned. 
Container node for account sununary leaf nodes if requested. 
ID for the account if requested. 
State of the account returned in the Summary tag. Possible 
values are 
Active: The account is active. 
Pending: The account is awaiting confirmation. 
Inactive: The account has been terminated. 
Indicates the billing cycle in which eBay sends a billing invoice 
to the specified user returned in the Summary tag. Possible 
values are 
o: On the last day of the month 
15: On the 15th day of the month 
Indicates the method the specified user selected for paying 
eBay returned in the Summary tag. The values for PaymentType 
vary for each site ID. 
Last four digits of the user's credit card selected as payment type 
returned in the Summary tag. Empty string if no credit is on file. 

Using the eBay API Within a Web Site 
Table 9-8. Tags Returned by GetAccount (continued) 
Tag 
CCExp 
CCModifyDate 
BankAccountinfo 
BankModifyDate 
PastDue 
AmountPastDue 
LastPaymentDate 
LastAmountPaid 
CurrentBalance 
LastinvoiceDate 
Purpose 
Expiration date for the credit card selected as payment 
method, in GMT returned in the Summary tag. Empty string if 
no credit card is on file or if account is inactive (even if there is 
a credit card on file). 
Last date credit card or credit card expiration date was 
modified, in GMT, returned in the Summary tag. Empty string if 
no credit card is on file. 
First four digits of the debit card for the account returned in 
the Summary tag. Empty string if no debit card is on file. 
Last date BankAccountinfo or BankRoutinglnfo was modified, 
in GMT. Empty string if no debit card is on file. Returned in the 
Summary tag. 
Indicator of whether the account has past due amounts out-
standing. Returned in the Summary entity. Possible values are 
1: Account is past due 
o: Account is current 
Amount past due. Returned in the Summary tag. 
Date of last payment by specified user to eBay, in GMT. Empty 
string if no payments posted. Returned in the Summary tag. 
Amount of last payment posted. Returned in the Summary tag. 
User's current balance, returned in the Summary tag. Can be 
0.00, positive, or negative. 
Date oflast invoice sent by eBay to the user, in GMT. Empty 
string if this account hasn't been invoiced yet. Returned in the 
Summary tag. 
LastlnvoiceAmount 
Amount of last invoice. o. 00 if account not yet invoiced. 
Returned in the Summary tag. 
EmailAddress 
E-mail address to which eBay invoices are sent. Returned as 
character data. 
InvoiceDate 
Invoice date, in GMT. 
InvoiceBalance 
Invoice amount. 
Addi tionalAccounts 
Number of additional accounts (Addi tionalAccounts nodes 
Count 
returned) the specified user has oro if no additional accounts. 
Returned in the Summary tag. 
205 

Chapter9 
206 
Table 9-8. Tags Returned by GetAccount (continued) 
Tag 
AdditionalAccount 
Additionalid 
Purpose 
Container of leaf nodes with information about each 
additional account. Returned in the Summary tag. 
ID for an additional account. Returned in each 
Addi tiona lAc count tag. 
Addi tionalCurrency 
ID for the currency in which additional account monetary 
amounts are returned. Returned in each Addi tionalAccount entry. 
AdditionalBalance 
Balance for an additional account. Returned in each 
AdditionalAccount tag. 
Entry 
Container node for leaf nodes containing data about each 
account entry. 
EntryCount 
ItemNumber 
Number 
Date 
Type 
Memo 
Number of detail nodes in the response within the Entry tag. 
Item number for the transaction. Returned in each Entry tag. 
eBay reference number for an account entry. Returned in each 
Entry tag. 
Date entry was posted, in GMT. Returned in each Entry tag. 
Integer code for account details entry type. See the eBay API 
documentation for details. Returned in each Entry tag. 
Memo line for an account entry, can be empty string. 
Returned as character data. Returned in each Entry tag. 
The GetAccount interface provides a paged metaphor to the returned data: The 
interface returns a subset of the data available based on a page number you spec-
ify. Each request may return up to 500 records for either the period or invoice view 
of the account data. When making a request, specify the page number of the data 
to fetch using the PageNumber tag; the return value also contains the same attribute 
noting the page number of the returned data. 
To get an invoice report itemizing each transaction that occurs during an 
interval in time, pass 1 in the Account Page Type tag, and pass the month and year 
in question in the InvoiceMonth and InvoiceYear arguments. The return Account 
tag will contain Entry tags for each transaction that affected the user account. 
To get a period report, pass o in the AccountPageType tag, and pass the period of 
interest in the Period tag. Set other tags, such as BeginDate and EndDate as described 
in Table 9-7, and the response's Summary tag will contain the account balance over 
the specified period. 

Using the eBay API Within a Web Site 
The GetFeedback Interface 
The Get Feedback interface lets your application obtain detailed feedback information 
for a user. Uk.e GetAccount, the Get Feedback call provides a paged metaphor within 
its requests and responses. When issuing a GetFeedback call, you must also provide 
the StartingPage tag, which tells eBay on which page to start, and the ItemsPerPage 
tag, which indicates how many feedback items to place on a page. The returned 
XML contains the FeedbackDetailitemTotal tag to let you know how many items 
are available, letting you create multiple requests to iterate across all entries. 
The Detail level tag lets you select whether you want only a summary of the 
user's feedback within a FeedbackScoreSurrmary tag (set Detaillevel to O) or individual 
feedback items enumerated within a FeedbackDetail tag (set Detaillevel to 1). 
Table 9-9 summarizes the response tags you can expect. 
Table 9-9. Tags Returned by GetFeedback 
Tag 
FeedbackDetail 
FeedbackDetailitem 
Comment Text 
Comment Type 
CommentingUser 
CommentingUserScore 
FeedbackRole 
Purpose 
Parent node for all FeedbackDetailitem nodes. Only 
returned with a Detaillevel of 1. 
Parent node for all attribute leaf nodes describing one 
feedback. There may be multiple FeedbackDetailitem nodes 
in a result set page. Returned within a FeedbackDetail tag 
when Detail level is 1. 
Text message left by user specified in CommentingUser. Used 
to provide a more in -depth description of the user's opinion 
of their transaction with the user about whom they left 
feedback. Returned as character data in the language that 
the comment was originally left in. Returned within the 
FeedbackDetailitem tag. 
'I)1pe of feedback. Can be Praise, Complaint, or Neutral. 
Returned within the FeedbackDetailitem tag. 
eBay user ID for the user who left the feedback. Returned 
within the FeedbackDetailitem tag. 
Feedback score of the user indicated in CommentingUser. 
Returned within the FeedbackDetailitem tag. 
Indicator of whether the user who the feedback is being 
retrieved for was a buyer or a seller for that transaction. 
Returned within the FeedbackDetailitem tag. (A value of B 
represents a buyer, whereas a value of S represents a seller.) 
207 

Chapter9 
208 
Table 9-9. Tags Returned by GetFeedback (continued) 
Tag 
Followup 
ItemNumber 
Response 
TimeOfComment 
Transaction!d 
FeedbackDetail 
ItemTotal 
FeedbackScoreSummary 
BidRetractionCountiNTl 
BidRetractionCountiNT2 
BidRettractionCountiNT3 
NegativeFeedbackCount 
NegativeFeedbackCountiNTl 
NegativeFeedbackCountiNT2 
NegativeFeedbackCountiNT3 
NeutralCommentCount 
Purpose 
Explanation a user can give to a response. Returned 
within the FeedbackDetailitem tag. 
Item number for the item sold in the auction on 
which the feedback is based. Returned within the 
FeedbackDetailitem tag. 
Textual comment that the user targeted by feedback 
may leave in response or rebuttal to the feedback. 
Returned within the FeedbackDetailitem tag. 
Date and time (in GMT) that the feedback was 
submitted to eBay. Returned within the 
FeedbackDetailitem tag. 
Unique identifier of the feedback transaction. This is 
not the same as the Transaction!d of the 
corresponding purchase that led to this feedback 
record. Returned within the FeedbackDetailitem tag. 
Total number of feedback entries. 
Parent node for all feedback summary information 
leaf nodes. 
Count of bid retractions for the preceding seven 
days. Returned within the FeedbackScoreSummary tag. 
Count of bid retractions for the preceding month. 
Returned within the FeedbackScoreSummary tag. 
Count of bid retractions for the preceding six months. 
Returned within the FeedbackScoreSummary tag. 
Total count of negative feedback entries. 
Count of negative feedback entries for interval!. 
Returned within the FeedbackScoreSummary tag. 
Count of negative feedback entries for interval2. 
Returned within the FeedbackScoreSummary tag. 
Count of negative feedback entries for interval3. 
Returned within the FeedbackScoreSummary tag. 
Total count of neutral feedback entries. Returned 
within the FeedbackScoreSummary tag. 

Using the eBay API Within a Web Site 
Table 9-9. Tags Returned by GetFeedback (continued) 
Tag 
NeutralCommentCountFrom 
SuspendedUsers 
NeutralFeedbackCountiNTl 
NeutralFeedbackCountiNT2 
NeutralFeedbackCountiNT3 
PositiveFeedbackCount 
PositiveFeedbackCountiNTl 
PositiveFeedbackCountiNT2 
PositiveFeedbackCountiNT3 
TotalFeedbackCountiNTl 
TotalFeedbackCountiNT2 
TotalFeedbackCountiNT3 
UniqueNegativeFeedback 
Count 
UniquePositiveFeedback 
Count 
Score 
Purpose 
Total count of neutral feedback entries from 
suspended users. Returned within the 
FeedbackScoreSummary tag. 
Count of neutral feedback entries for interval!. 
Returned within the FeedbackScoreSummary tag. 
Count of neutral feedback entries for interval 2. 
Returned within the FeedbackScoreSummary tag. 
Count of neutral feedback entries for interval 3. 
Returned within the FeedbackScoreSummary tag. 
Total count of positive feedback entries. Returned 
within the FeedbackScoreSummary tag. 
Count of positive feedback entries for interval I. 
Returned within the FeedbackScoreSummary tag. 
Count of positive feedback entries for interval 2. 
Returned within the FeedbackScoreSummary tag. 
Count of positive feedback entries for interval3. 
Returned within the FeedbackScoreSummary tag. 
Total feedback score for interval!. Returned within 
the FeedbackScoreSummary tag. 
Total feedback score for interval2. Returned within 
the FeedbackScoreSummary tag. 
Total feedback score for interval 3. Returned within 
the FeedbackScoreSummary tag. 
Total count of negative feedback entries from unique 
(distinct) users. Returned within the 
FeedbackScoreSummary tag. 
Total count of positive feedback entries from unique 
(distinct) users. Returned within the 
FeedbackScoreSummary tag. 
Total feedback score for target user. 
209 

Chapter9 
210 
The GetSellerEvents Interface 
The GetSellerEvents interface returns the price changes, item revisions, descrip-
tion revisions, and any other changes that a specific seller has made during the 
last 48 hours. When calling GetSellerEvents, you specify the starting time and 
ending for the inquiry. You can filter the results using one of three ways: 
â¢ By when items auctions ended using EndTimeFrom and EndTimeTo 
â¢ By when items were modified using ModTimeFrom and ModTimeTo 
â¢ By when items went up for auction using StartTimeFrom and StartTimeTo 
These filters are exclusive. 
In addition to these arguments, the NewitemFil ter tag indicates whether you 
want to return items that include new listings (by default, the API's notion of 
"modified" is literally that of a changed listing; new listings are not considered 
modified). If you specify false (o), the results include newly listed items. 
The returned items are contained in individual nodes ofXML (encapsulated 
by the I tag) indicating the reason for their inclusion in the response. Table 9-10 
summarizes the tags returned by GetSellerEvents. Note that GetSellerEvents can 
only return a maximum of 3,000 items if you set Detail level tag too, and 2,000 
items if you set Detaillevel to 1. If the returned value Count attribute is greater 
than or equal to one of these maximums, eBay can provide more information if 
you repeat the request with a smaller time window. 
Table 9-10. Tags Returned by GetSellerEvents 
Tag 
Purpose 
Count 
Number of item changes that fit the criteria that you specified in your 
GetSellerEvents request. 
I 
Container node for item information. 
BC 
Number of bids that the item has received. Returns zero for fixed-
price items. Returned within the I tag. 
BIN 
CP 
ET 
Buy It Now price for the item. Only returned for items with a Buy It 
Now price. Returned within the I tag. 
Current price for the item. Returned within the I tag. 
Time that the listing is scheduled to end. Returned within the I tag. 

Using the eBay API Within a Web Site 
Table 9-10. Tags Returned by GetSellerEvents (continued) 
Tag 
HB 
HBE 
HBF 
Id 
Q 
QS 
SI 
Ti 
Ty 
Purpose 
User ID for the current high bidder for an item that has received 
bids. Returned only when a high bidder for the item exists. Not 
returned for fixed-price items. For eBay stores, Fixed-Price, and 
Dutch auction listings, have your application call 
GetSellerTransactions or GetHighBidders for additional item 
information. Returned within the I tag. 
E-mail address for the current high bidder. Returned only if the item 
has received bids. Not returned for fixed-price items. Returned within 
the I tag. 
Overall feedback score for the current high bidder. Returned only if 
the item has received bids. Returned within the I tag. 
Item !D. 
For non-Chinese auction items, the quantity of items initially offered 
for sale. For stores fixed-price (US only) or Buy It Now Only items, the 
remaining quantity (I. Q) equals the original quantity minus the 
quantity sold (I. QS). Not returned for Chinese format listings. 
Number of items sold. 
eBay site on which the specified item is listed. 
Item title, returned as character data. 
Listing type for the item. Possible values are 
O: Unknown auction type 
1: Chinese auction 
2: Dutch auction 
s: Live Auctions-type auction 
6: Ad-JYpe auction 
7: eBay stores inventory (stores fixed-price) listing (US only) 
8: Personal offer 
9: Basic fixed-price item 
Time To 
If you specify a value in the EndTimeTo, ModTimeTo, or StartTimeTo 
filter, Time To returns that value. If you don't specify a value for one of 
these entities, Time To returns the current time in GMT. 
WARNING 
You can't call GetSellerEvents more than once every 30 minutes. If 
you do, your application may not pass eBay certification. 
211 

Chapter9 
212 
The GetSellerTransactions Interface 
The GetSellerTransactions interface returns a list of the fixed-price and auction 
transactions for the seller you specify. (An auction is treated as a transaction only 
if it has ended, has had at least one bid, and the buyer has begun the checkout 
process for the auction by choosing a payment process, requested the details of 
the transaction, or paid the seller; or the seller has specified the details of the 
transaction.) Like GetAccount and other API calls that can return a large number 
of items, this method provides a paged response; use PageNumber and 
TransactionsPerPage to indicate the page number and how many items per page 
should be returned. Table 9-11 shows the argument tags you may pass to the 
GetSellerTransactions interface. 
TIP 
To get the transactions for a specific item, use GetitemTransactions 
instead. 
The returned XML contains a series of Transaction nodes, each containing 
the specific details of a single transaction. Table 9-12 summarizes the response 
tags you can expect. 
Table 9-11. Tags Passed to GetSellerTransactions 
Tag 
LastModifiedFrom 
LastModifiedTo 
TransactionsPerPage 
PageNumber 
Purpose 
Use the LastModifiedFrom and LastModifiedTo filter to 
return transactions that were last modified between the 
specified date and time. Use GMT time in the format YYYY-
MM-DD HH:MM:SS. You can use this filter for fixed-price items 
that haven't gone through checkout. The date range can't be 
greater than 30 days. 
Use the LastModifiedFrom and LastModifiedTo filter to 
return transactions that were last modified between the 
specified date and time. Use GMT time in the format YYYY-
MM-DD HH:MM: SS. You can use this filter for fixed-price items 
that haven't gone through checkout. The date range can't be 
greater than 30 days. 
Number of transactions to return in a single call. Default is 
100, maximum is 200. 
Specifies which virtual page of data to return in the current 
call. Default is 1. 

Using the eBay API Within a Web Site 
Table 9-12. Tags Returned by GetSellerTransactions 
Tag 
Purpose 
HasMoreTransactions 
Indicator of whether there are more transactions to be 
retrieved beyond those returned in the last function call. 
PageNumber 
ReturnedTransaction 
CountActual 
User 
Transactions 
Number for the virtual page of data returned by the last 
function call. 
Number of Transaction nodes actually returned by the last 
function call. 
Data about the buyer or seller. User node fields are described 
in the section "The Get User API," later in this chapter. 
Data on multiple transactions and one or more Transaction 
nodes. 
Count 
Total number of transactions that meet the input argument 
criteria and could be returned through one or more calls to 
GetSellerTransactions. Contained within the Transactions tag. 
TotalNumberOfPages 
Total number of pages that can be returned. 
Transaction 
Container node for each transaction. Contained within the 
Transactions tag. 
AllowEditPayment 
Amount Paid 
ApplicationData 
Buyer 
CountryCode 
If 1, indicates if seller allowed buyers to edit payment 
information at the time that the transaction occurred. 
Returns o otherwise. Contained within the Transaction tag. 
Amount the buyer paid for the item or agreed to pay, 
depending on how far into the checkout process the item is. 
Custom, application-specific data associated with the item. 
The data in this field is stored with the item in the items table 
at eBay, but isn't used in any way by eBay. Use 
ApplicationData to store such special information as a part or 
SKU number. Returned as character data with a maximum of 
32 characters in length. 
Container node for data about each transaction's buyer. 
Except for shipping address fields (explained later in this 
table). Its User node fields are described in the section "The 
GetUser API," later in this chapter. Contained within the 
Transaction tag. 
1\vo-letter abbreviation for the buyer's country. Contained 
within the User tag of a Transaction tag. 
213 

Chapter9 
214 
Table 9-12. Tags Returned by GetSellerTransactions (continued) 
Tag 
ShippingAddress 
City 
Country 
Name 
Phone 
StateOrProvince 
Streetl 
Street2 
Zip 
BuyerProtection 
BuyitNowPrice 
Pu:rpose 
Container node for the buyer's shipping address. Contained 
within the User tag of a Transaction tag. 
City portion of buyer's shipping address. Contained within 
the ShippingAddress tag of a User tag of a Transaction tag. 
Country portion of buyer's shipping address. Contained within 
the ShippingAddress tag of a User tag of a Transaction tag. 
Name portion of buyer's shipping address. Contained within 
the ShippingAddress tag of a User tag of a Transaction tag. 
Phone number portion of buyer's shipping address. 
Contained within the ShippingAddress tag of a User tag of 
a Transaction tag. 
State (or region) portion of buyer's shipping address. 
Contained within the ShippingAddress tag of a User tag of 
a Transaction tag. 
First line of street address portion of buyer's shipping 
address. Contained within the ShippingAddress tag of a User 
tag of a Transaction tag. 
Second line of street address portion of buyer's shipping 
address. Contained within the ShippingAddress tag of a User 
tag of a Transaction tag. 
Zip or postal code portion of buyer's shipping address. 
Contained within the ShippingAddress tag of a User tag of 
a Transaction tag. 
Indicates the status of the item's eligibility for the Buyer 
Protection Program. Contained within the Transaction tag. 
Possible values are 
o: Item is ineligible (e.g., category not applicable) 
1: Item is eligible per standard criteria 
2: Item marked ineligible per special criteria (e.g., seller's 
account closed) 
3: Item marked eligible per other criteria 
Applicable for items listed to the US site and for the Parts & 
Accessories category (6028) or Everything Else category 
(10368) (or their subcategories) on the eBay Motors site. 
Amount a buyer would need to bid to take advantage of the 
Buy It Now feature. Not applicable to fixed-price items or ad 
format listings. For fixed-price items, see Start Price instead. 
Contained within the Transaction tag. 

Using the eBay API Within a Web Site 
Table 9-12. Tags Returned by GetSellerTransactions (continued) 
Tag 
Category 
Categoryld 
Category2 
Category2Id 
Charity listing 
Checkout 
Details 
Purpose 
Container for data on the primary category of listing. 
Contained within the Transaction tag. 
ID for the category in which the item is listed. Contained 
within the Category tag of a Transaction tag. 
Container for data on the secondary category of listing. 
Contained within the Transaction tag. 
ID for the optional second category (if specified) in which the 
item is listed. Contained within the Category2 tag of 
a Transaction tag. 
If true (1), indicates that the seller has chosen to use eBay 
Giving Works to donate a percentage of the item purchase 
price to a selected nonprofit organization. Contained within 
the Transaction tag. 
Container node for post-sale data for the transaction. 
Contained within the Transaction tag. 
Container node for payment details data for the transaction. 
Contained within the Transaction tag's Checkout tag. 
AdditionalShipping 
Any additional shipping costs beyond those indicated in 
Costs 
ShippingHandlingCosts. Contained within the Transaction 
tag's Details tag, found within the Checkout tag. 
AdjustmentAmount 
Adjustment amount entered by the buyer. A positive amount 
indicates the amount is an extra charge being paid to the 
seller by the buyer. A negative value indicates this amount is 
a credit given to the buyer by the seller. Contained within the 
Transaction tag's Details tag, found within the Checkout tag. 
CheckoutDetails 
Specified 
Checkout 
Instructions 
Converted 
AdjustmentAmount 
ConvertedAmountPaid 
Indicator of whether seller has specified payment details. 
Contained within the Transaction tag's Details tag, found 
within the Checkout tag. 
Seller's return policy and instructions. Contained within the 
Transaction tag's Details tag, found within the Checkout tag. 
Value returned in the AdjustmentAmount field, converted to 
the currency indicated by SiteCurrency. Contained within the 
Transaction tag's Details tag, found within the Checkout tag. 
Value returned in the Amountpaid field, converted to the 
currency indicated by Si teCurrency. Contained within the 
Transaction tag's Details tag, found within the Checkout tag. 
215 

Chapter9 
216 
Table 9-12. Tags Returned by GetSellerTransactions (continued) 
Tag 
Converted 
Transaction Price 
InsuranceFee 
InsuranceOption 
Insurance Total 
InsuranceWanted 
PaymentEdit 
SalesTaxAmount 
SalesTaxPercent 
SalesTaxState 
ShippingHandling 
Costs 
ShippinglnTax 
Purpose 
Value returned in the TransactionPrice field, converted to the 
currency indicated by Si teCurrency. Contained within the 
Transaction tag's Details tag, found within the Checkout tag. 
Amount of insurance. Contained within the Transaction tag's 
Details tag, found within the Checkout tag. 
Indicator of whether insurance fee is required. Contained 
within the Transaction tag's Details tag, found within the 
Checkout tag. Possible values are 
o: Insurance not offered 
1: Insurance optional 
2:Insurancerequired 
3: Insurance included in shipping and handling costs 
Total cost of insurance for the transaction. Contained within the 
Transaction tag's Details tag, found within the Checkout tag. 
Indicator of whether buyer selected to have insurance. 
Contained within the Transaction tag's Details tag, found 
within the Checkout tag. 
Indicator of whether the buyer edited the payment amount. 
Contained within the Transaction tag's Details tag, found 
within the Checkout tag. 
Amount of the sales tax to be collected for the transaction. 
Contained within the Transaction tag's Details tag, found 
within the Checkout tag (US only). 
Sales tax for the transaction, expressed as a percentage. 
Contained within the Transaction tag's Details tag, found 
within the Checkout tag (US only). 
State of collection for the sales tax for the transaction. Contained 
within the Transaction tag's Details tag, found within the 
Checkout tag (US only). 
Amount charged for shipping and handling. Contained 
within the Transaction tag's Details tag, found within the 
Checkout tag. 
Indicator of whether shipping is included in the tax. Contained 
within the Transaction tag's Details tag, found within the 
Checkout tag (US only). 

Using the eBay API Within a Web Site 
Table 9-12. Tags Returned by GetSellerTransactions (continued) 
Tag 
Status 
eBayPaymentStatus 
IncompleteState 
LastTimeModified 
PaymentMethodUsed 
Status Is 
Checkout Enabled 
Purpose 
Container node for checkout status data for the transaction. 
Contained within the Transaction tag's Checkout tag. 
Indicator of the success or failure of an eBay Online Payment 
for the transaction. If the payment failed, the value returned 
indicates the reason for the failure. Contained within the 
Transaction tag's Checkout tag, inside the Status tag. Possible 
values are 
o: No payment failure 
3: Buyer's eCheck bounced 
4: Buyer's credit card failed 
s: Buyer failed payment as reported by seller 
7: Payment from buyer to seller is in PayPal process, but 
hasn't yet been completed 
Current state of the checkout process for the transaction. 
Contained within the Transaction tag's Checkout tag. Possible 
values are 
0: Checkout complete. 
1: Checkout incomplete. No details specified. 
2: Buyer requests total. 
3: Seller responded to buyer's request. 
Last date and time checkout status or incomplete state was 
updated (in GMT). Contained within the Transaction tag's 
Checkout tag. 
Payment method used by the buyer. Contained within the 
Transaction tag's Checkout tag. Possible values are 
0: No payment method specified 
3: Money order/cashier's check 
4: Personal check 
s:COD 
6: Visa or MasterCard 
7: Other (or see item description) 
12: PayPal 
Indicates whether checkout process is complete. Contained 
within the Transaction tag's Checkout tag. Possible values are 
1: Incomplete 
2: Complete 
Indicator of whether the seller had Checkout enabled at the 
time that the transaction completed. Returns o otherwise. 
Contained within the Transaction tag. 
217 

Chapter9 
218 
Table 9-12. Tags Returned by GetSellerTransactions (continued) 
Tag 
CreatedTime 
Currency 
Current Price 
DepositType 
EndTime 
Item!d 
Payment Terms 
Amex 
CCAccepted 
COD 
Discover 
Purpose 
For fixed-price, stores inventory, and Buy It Now items, 
indicates when the purchase occurred. Contained within the 
Transaction tag. 
Numeric ID for the currency used for the transaction. 
Contained within the Transaction tag. 
For auction-format listings, highest bid (closing price) for the 
item. This field doesn't reflect the closing price of the item if 
it's a fixed-price item and the price has been revised. 
Contained within the Transaction tag. 
Deposit type for eBay Motors items. If item isn't a Motors 
item, then returns None. Contained within the Transaction 
tag. Possible values are 
O:None 
1: Other method 
2: Fast deposit 
Time stamp for the end of the listing. Contained within the 
Transaction tag. 
Unique item ID for the auction associated with the 
transaction. Contained within the Transaction tag. 
Container node for data pertaining to each transaction's 
payment terms. Not applicable for real estate listings. 
Contained within the Transaction tag. 
American Express is accepted by seller as payment method in 
the transaction. For Motors, this payment method is available 
for the deposit. Contained within the Transaction tag's 
PaymentTerms tag. 
Credit card is accepted by seller as payment method in the 
transaction. Contained within the Transaction tag's 
PaymentTerms tag. 
Cash on delivery (COD) is accepted by seller as payment 
method in the transaction. For Motors, this payment method 
is available for the deposit. Contained within the Transaction 
tag's PaymentTerms tag. 
Discover Card is accepted by seller as payment method in the 
transaction. Contained within the Transaction tag's 
PaymentTermstag. 

Using the eBay API Within a Web Site 
Table 9-12. Tags Returned by GetSellerTransactions (continued) 
Tag 
MOCashiers 
MoneyXferAccepted 
MoneyXferAcceptedin 
Checkout 
Other 
Purpose 
Money order (or cashier check) is accepted by seller as 
payment method in the transaction. For Motors, this 
payment method is available for the deposit. Contained 
within the Transaction tag's PaymentTerms tag. 
Money transfer is accepted by seller as payment method in 
the transaction. Contained within the Transaction tag's 
PaymentTerms tag. 
Direct transfer of money is an acceptable payment method in 
Checkout. Contained within the Transaction tag's PaymentTerms tag. 
Some custom method is accepted by seller as payment method 
in the transaction. For Motors, this payment method is available 
for the deposit. Contained within the Transaction tag's 
PaymentTerms tag. 
OtherPaymentsOnline 
Non-eBay online payment is an acceptable payment method. 
PayPalAccepted 
PersonalCheck 
SeeDescription 
VisaMaster 
Price 
Not applicable for real estate listings. Contained within the 
Transaction tag's PaymentTerms tag. 
If true (1), indicates that the seller accepts PayPal as a form of 
payment for this item. Not applicable for real estate listings. 
Contained within the Transaction tag's PaymentTerms tag. 
Personal check is accepted by seller as payment method in 
the transaction. For Motors, this payment method is available 
for the deposit. Contained within the Transaction tag's 
PaymentTerms tag. 
Payment method accepted by seller is cited in the item's 
description. For Motors, this payment method is available for 
the deposit. Contained within the Transaction tag's 
PaymentTerms tag. 
Visa or MasterCard are accepted by seller as payment 
method in the transaction. For Motors, this payment method 
is available for the deposit. Contained within the Transaction 
tag's PaymentTerms tag. 
Current price of the item. This may be different for stores 
inventory items because the price of the item can be revised 
even after a transaction occurs. For Motors items, this is the 
current price of the vehicle. Contained within the 
Transaction tag. 
219 

Chapter9 
220 
Table 9-12. Tags Returned by GetSellerTransactions (continued) 
Tag 
Quantity 
QuantityPurchased 
QuantitySold 
RelistiD 
ShippingOption 
ShippingRegions 
ShippingTerms 
SellerPays 
SiteCurrency 
Site!d 
Start Price 
Start Time 
Title 
Purpose 
Total number of items originally available in the listing. Use 
Quantity minus QuantitySold to calculate the remaining 
quantity available. Contained within the Transaction tag. 
Number of individual items the buyer purchased in the 
transaction. Contained within the Transaction tag. 
Total number of items in the listing that have sold so far. Use 
Quantity minus QuantitySold to calculate the remaining 
quantity available. Contained within the Transaction tag. 
New item ID for a relisted item. Contained within the 
Transaction tag. 
Basic shipping options. May contain either SiteOnly, 
WorldWide, or SiteAndRegions. A value of SiteAndRegions 
indicates the seller will ship within the country associated 
with the item's site plus any region represented with a true 
value in the tags within ShippingRegions: NorthAmerica, 
Europe,Oceania,Asia,SouthAmerica,Africa, LatinAmerica, 
MiddleEast, and Caribbean. Contained within the 
Transaction tag. 
Container node for regions that seller will ship to. Contained 
within the Transaction tag. 
Container node for shipping term information. Contained 
within the Transaction tag. 
Seller pays all shipping. Contained within the Transaction 
tag's ShippingTerms tag. 
Numeric code corresponding to the currency of the site 
specified in Site!d. Contained within the Transaction tag. 
ID for the eBay site on which the item was listed. Contained 
within the Transaction tag. 
Starting price for the item. For fixed-price items, if the item 
price (MinimumBid) was revised, this field returns the new 
price. Contained within the Transaction tag. 
Time stamp for the start of the listing. Contained within the 
Transaction tag 
Name of the item as listed in its auction. Contained within 
the Transaction tag. 

Using the eBay API Within a Web Site 
Table 9-12. Tags Returned by GetSellerT'ransactions (continued) 
Tag 
Transactionld 
TransactionPrice 
Type 
Purpose 
Identifier for each transaction returned. Returns 0 when the 
auction is a Chinese auction. Use Itemld with Transactionld 
to uniquely identify a transaction. Contained within the 
Transaction tag. 
Price of the item, before shipping and sales tax. For Motors, 
this isn't the price of the vehicle (which is returned in 
Price), but the Deposit amount. Contained within the 
Transaction tag. 
Type of auction associated with the transaction. Contained 
within the Transaction tag. Possible values are 
0: Unknown auction type 
1: Chinese auction 
2: Dutch auction 
s: Uve Auctions-type auction 
7: Fixed-Price auction 
8: Personal offer 
TransactionsPerPage 
Number ofTransaction nodes per function call. 
WARNING Although this (and other) eBay APis can return PayPal-relevant 
data even when you use the Sandbox, the Pay Pal information is not part of the 
Sandbox! Put simply, the eBay Sandbox doesn't extend to PayPal transactions. 
The GetUser Interface 
The GetUser interface lets your application access the information about another 
eBay user. The interface takes at least a single parameter, Userld, which must 
contain the eBay user ID of the user whose information you want to obtain. Table 
9-13 shows the returned parameters when invoking GetUser. (Note that the set-
ting you specify for your request's Detailleve1 has a huge impact on the data you 
receive from eBay; for details, see the text that follows this table and Table 9-14.) 
221 

Chapter9 
222 
Table 9-13. Tags Returned by GetUser 
Tag 
AboutMe 
AllowPaymentEdit 
Checkout Enabled 
CIPBankAccountStored 
eBayGoodStanding 
Email 
Feedback 
Score 
IDVerified 
IsLAAuthorized 
MerchandisingPref 
NewUser 
Private 
Purpose 
Indicates whether the user has an About Me page. 
If 1, indicates whether a seller is allowing buyers to edit the 
total cost of an item. 
Returns 1 if the user is a seller and has enabled Checkout. 
Returns o if the user isn't a seller or hasn't enabled 
Checkout. 
If 1, specifies that a user has stored bank account 
information with eBay in order to use the CIP in checkout 
function. Applicable to German site only. 
If 1, indicates that the user is in good standing with eBay. 
Specifies the e-mail address for the user. As an antispam 
measure, e-mail addresses are only returned when the 
User!d in the request matches the RequestUserid. When an 
e-mail address can't be returned, the string "Invalid 
Request" is returned in the Email node instead. 
Indicates node to contain the user's feedback information. 
Specifies aggregate feedback score for the specified user, 
contained within the Feedback tag. Score is only returned if 
the user specified in User!d hasn't chosen to make his or 
her feedback private. If private is selected for the user, 
then Score is only returned if the RequestUserid input 
argument matches the User!d input argument. 
Indicates whether the user has been verified. 
If 1, indicates that a user is authorized to list Live 
Auction items. 
Indicates whether the user has elected to participate as 
a seller in the Merchandising Manager feature of eBay. Will 
be one of these values: 
o: User as seller opted out of merchandising 
1: User as seller opted in to merchandising, including 
display on the View Item page 
Identifies a new user. If 1, indicates that the user has been 
a registered eBay user for 30 days or less. Always o after the 
user has been registered for more than 30 days. 
Indicates whether the user selected to have feedback 
information private. 

Using the eBay API Within a Web Site 
Table 9-13. Tags Returned by GetUser (continued) 
Tag 
RegDate 
RegistrationAddress 
Purpose 
Indicates the date the specified user originally registered 
witheBay. 
Contains user registration address data. As an antispam 
measure, e-mail addresses are only returned when the 
User!d in the request matches the RequestUserid. Contains 
tags for the address's City, Country, Name, Phone, 
StateOrProvince, Street, and Zip. 
Schedulinginformation 
Specifies the container for scheduling limits for the user. 
Will contain the tags MaxScheduledTime, 
MaxScheduleditems, and MinScheduleTime. 
Seller level 
Indicates the user's eBay PowerSeller tier. Possible values 
are 
SellerPaymentAddress 
Site!d 
Star 
Status 
Store location 
StoreOwner 
User!d 
UseridChanged 
UseridlastChanged 
11: Bronze 
22: Silver 
33: Gold 
66: Platinum 
77: Titanium 
Other values are valid, but indicate that the user is a not 
a PowerSeller. 
Contains seller payment address data. As an antispam 
measure, e-mail addresses are only returned when the 
User!d in the request matches the RequestUserid. Contains 
tags for the address's City, Country, InternationalName, 
Name, Phone,StateAndCity,StateOrProvince, 
InternationalStreet, Streetl, Street2, and Zip. 
Defines eBay site the user is registered with. 
Provides a visual indicator of user's feedback score. 
Indicates the user's registration/user status. 
Specifies URL pointing to the seller's eBay stores page. 
Indicates whether the user is an eBay stores storefront owner. 
Defines a unique identifier for the user. 
Identifies a user whose ID has changed. If 1, indicates that 
the user's ID has changed within the last 30 days. 
Specifies time stamp the user's data was last changed. 
223 

Chapter9 
224 
Table 9-13. Tags Returned by GetUser (continued) 
Tag 
VATBusinessAvailable 
VATStatus 
Purpose 
Indicates that the seller is living in a country for which 
business features are available (currently Germany, 
Austria, or Switzerland). 
If present, indicates whether or not the user is subject to 
VAT. Users who have registered with eBay as VAT exempt 
are not subject to VAT. Not returned for users whose 
country of residence is outside the EU. Possible values for 
the user's status are 
2: Residence in an EU country but user registered as VAT exempt 
3: Residence in an EU country and user not registered as 
VAT exempt 
Because of the potentially large number of returned tags, the Get User inter-
face uses the Detail level parameter to determine which fields to return in its 
response. Table 9-14 shows the relationship between Detaillevel values and tags 
returned by the eBay service. 
Table 9-14. Tags Returned by GetUser Depending on the DetailLevel 
Tag 
DetailLevel o 
DetailLevel 2 
DetailLevel 4 
DetailLevel 8 
AboutMe 
., 
., 
., 
., 
Checkout 
Enabled 
., 
., 
eBayGood 
Standing 
., 
., 
., 
., 
Email 
., 
., 
., 
., 
Feedback 1 
., 
., 
., 
., 
Feedback 2 
., 
., 
., 
., 
IdVerified 
., 
., 
., 
., 
IsLAAuthorized ., 
., 
., 
., 
NewUser 
., 
., 
., 
., 
Private 
., 
., 
., 
., 
RegDate 
., 
., 
., 
., 

Using the eBay API Within a Web Site 
Table 9-14. Tags Returned by GetUser Depending on the DetailLevel (continued) 
Tag 
DetailLevel o 
DetailLevel 2 
DetailLevel 4 
DetailLevel 8 
Registration 
Address 
1/ 
Scheduling 
Information 
Seller level 
SellerPayment 
Address 
The GetWatchList Interface 
The GetWatch List interface returns a list of items being watched by the specified 
user. It takes a single argument, the WatchSort argument, which indicates how the 
results should be sorted as follows: 
â¢ A value of 1 indicates that the results should be sorted by item ID. 
â¢ A value of 3 indicates that the results should be sorted by the amount of 
time remaining in the auction. This is the default. 
â¢ A value of 4 indicates that the results should be sorted by current price. 
â¢ A value of 5 indicates that the results should be sorted alphabetically by 
item title. 
â¢ A value of 15 indicates that the results should be sorted by the bid count. 
The returned XML contains a set of Item tags, each with information about 
a specific item on the user's watch list. The list of Item tags is contained within an 
Items tag, which is also accompanied by a Count tag that indicates how many items 
were returned. Table 9-15 summarizes the tags you'll find within each Item tag. 
225 

Chapter9 
226 
Table 9-15. Tags Returned by GetWatchList Within the Item Tag 
Tag 
BidCount 
BuyitNowPrice 
Current Price 
GalleryURL 
Id 
Site!d 
Time left 
Title 
Type 
Purpose 
Number of bids placed up to this point. 
Minimum acceptable bid for a Buy It Now auction for the item. 
Only returned for auctions with Buy It Now option. 
For auction-format listings, current minimum asking price or the 
current highest bid for the item if bids have been placed. Shows 
minimum bid if no bids have been placed against the item. 
Not currently used. 
Unique identifier for each item. 
eBay site on which the item is listed. 
Time remaining in the item's auction, in days, hours, and minutes. 
Textual title of the item, as is displayed in browse lists and search 
results on the eBay site. 
Auction type for the item(s) specified in the Id input argument. 
Will be one of these values: 
O: Unknown auction type 
1: Chinese auction 
2: Dutch auction 
5: live Auctions-type auction 
6: Ad-Type auction 
7: Stores inventory (stores fixed-price) item (US only) 
8: Personal offer 
9: Basic fixed-price item (Buy It Now only) 
The Leavefeedback Interface 
The LeaveFeedback interface lets your application leave feedback for a user as 
a result of buying or selling an item. To leave feedback, simply fill in the tags 
described in Table 9-16. The return XML will have a single tag, the Status tag, 
which will contain the value Success on success, or Failed on failure. 

Using the eBay API Within a Web Site 
Table 9-16. Tags Passed to LeaveFeedback 
Tag 
Item!d 
Transaction!d 
TargetUser 
Comment Type 
Comment 
Purpose 
Unique identifier of an item for which an auction has just been 
completed. 
Unique identifier for a purchase from an eBay stores inventory 
(stores fixed-price) listing. Only required for feedback resulting 
from these type of listings. 
Unique identifier (eBay user ID) for the user about whom 
feedback is being submitted. 
Type offeedback being left. Valid values for Comment Type are 
positive,negative,orneutral. 
Textual feedback and explanation or justification of good, bad, or 
neutral feedback. Maximum length is 80 characters for all sites 
except Taiwan, where the length is 125. 
The SetSellerPaymentAddress Interface 
The SetSellerPaymentAddress interface overwrites a user's shipment and payment 
address with new data To update a user's payment address, specify the new address 
in the XM:L, and test the returned value's Status tag for the value Success. When 
specifying new values, all fields are overwritten-you must specify a value for 
each tag, because omitting a tag will clear that tag's value in eBay's database. 
Table 9-17 shows the tags you pass to SetSellerPaymentAddress. 
Table 9-17. Tags Passed to SetSellerPaymentAddress 
Tag 
Name 
Streetl 
Street2 
City 
StateOrProvince 
Purpose 
Name for seller's shipping address. Maximum is 64 characters. 
First line of street address for seller's shipping address. 
Maximum is 64 characters. 
Second line of street address for seller's shipping address. 
Maximum is 64 characters. 
City for seller's shipping address. Maximum is 64 characters. 
State or province for seller's shipping address. Pass as CDATA 
Maximum is 64 characters. 
227 

Chapter9 
228 
Table 9-17. Tags Passed to SetSellerPaymentAddress (continued) 
Tag 
Country 
Purpose 
Country for seller's shipping address. 
Zip 
Zip or postal code for seller's shipping address. Maximum is 12 
characters. 
Phone 
Phone number for seller's shipping address. Maximum is 32 
characters. 
The ValidateTestUserRegistration Interface 
The ValidateTestUserRegistration interface lets you validate a test user in the 
eBay Sandbox. To use ValidateTestUserRegistration, simply pass the user name 
and password in the RequestUserid and RequestPassword tags, and check the 
results for the ValidateTestUserRegistrationStatus tag, which will contain the 
result of the request. 
Understanding eBay API Calls for Items 
This section describes interfaces that pertain to eBay items, including the inter-
faces to add and search for items, as well as relist items and determine who has 
bid on a specific item. 
Listing Items and Revising Listings with the Additem, 
Verifyitem, and Reviseitem Interfaces 
The Add Item interface lets your application put up an item for auction. Using 
Add Item is simple: Just fill in the XML tags that describe the item to add (shown in 
Table 9-18), and make the Addltem request. However, some caveats are in order: 
â¢ At least one payment method (MOCashiers, PersonalCheck, VisaMaster, AmEx, 
Discover, PaymentOther, COD, etc.) must be set to 1 to indicate a valid pay-
ment method. 
â¢ Payment methods are not appropriate for real estate listings. 
â¢ Payment methods indicate the means of payment of a deposit, not the 
entire sale price, of eBay Motor listings. 

Using the eBay API Within a Web Site 
â¢ The Quantity field can't be greater than 1 for eBay Motor or real estate 
auctions. 
â¢ Finally, when specifying regions where the seller will ship an item, the var-
ious Ship To â¢â¢. tags are only applicable when a value of SitePlusRegions is 
passed in the ShippingOption argument. 
Table 9-18. Tags Passed to Addltem 
Tag 
AdditionalShipping 
Costs 
Am Ex 
ApplicationData 
Purpose 
Any additional shipping costs for the item. Default is 0. 00. 
American Express is an acceptable payment method. 
Tag used to pass custom, application-specific data to be 
associated with the new item. The data in this argument is 
stored with the item in the items table at eBay, but isn't used 
in any way by eBay. This argument can be used to pass 
information as a part or SKU number. Maximum size is 32 
characters. 
ApplyShippingDiscount 
Indicator of whether a shipping discount is applied for the 
item when its transaction is combined into a buyer-created 
combined payment order. 
AutoPay 
BoldTitle 
Business Seller 
Indicator of whether the seller requires immediate payment. 
Default is o (false). 
Indicator of whether the title for the item's listing will be in 
boldface type. 
If 1 (true), the seller is a business user and intends to use 
listing features that are offered to business users only. This 
declaration is up to the seller and isn't validated by eBay. 
Applicable for business sellers residing in Germany, Austria, 
or Switzerland, and listing in a B2B VAT-enabled category on 
the eBay Germany (DE), Austria (AT), or Switzerland (CH) 
sites only. Required and must be set to 1 (true) if 
RestrictedToBusiness is set to 1 (true). No effect if 
RestrictedToBusiness is set to (0) false. 
BuyitNowPrice 
Buy It Now price for the item. 
CashOnPickupAccepted 
Payment on delivery is an acceptable payment term. 
229 

Chapter9 
230 
Table 9-18. Tags Passed toAddltem (continued) 
Tag 
Category 
Category2 
CategoryMapping 
Allowed 
CCAccepted 
Checkoutinstructions 
COD 
Counter 
Country 
Currency 
Description 
Discover 
Duration 
Escrow 
EscrowBySeller 
Pu:rpose 
Category ID of the category in which the item is listed on 
eBay. Maximum length is 10. 
Optional second category in which the item is listed on eBay. 
If 1, eBay will look up new categories for obsolete categories 
on your behalf and substitute them in the listing. If o, if you 
submit an invalid category ID, the request fails with an error. 
Credit card an acceptable payment term (but not for all sites). 
Seller's instructions to the buyer and return policy. Default is 
null. Maximum length is 500. 
Cash on Delivery is an acceptable payment method. 
Optional hit counter for the item's listing page. 
Country for location. Use the two-letter abbreviation. 
Currency for the eBay site on which the item is being listed. 
Brief description of the item. 
Discover Card is an acceptable payment method. 
Number of days the auction will be active. Only certain 
values are allowed, and the choice of values depends on the 
listing type. 
Online escrow paid for by buyer. If used, can't be used with 
EscrowBySeller. 
Online escrow paid for by seller. If used, can't be used 
with Escrow. 
Featured 
Item appears at the top of item listings for a category. 
Gallery 
Indicator of whether to include this item in the gallery. 
Galleryfeatured 
Indicator of whether this item is featured in the gallery. 
GalleryURL 
URL for a picture for the gallery. 
Gi ftExpressShipping 
If 1, the seller is offering to ship the item via an express 
shipping method as described in the item description. 
Gi fticon 
Code for a small, attention-getting image denoting 
seasonal sales times. If specified, the gift icon displays in 
the listing's title. 
Gi ftShipToRecipient 
If 1, the seller is offering to ship to the gift recipient, not the 
buyer, when payment clears. 

Using the eBay API Within a Web Site 
Table 9-18. Tags Passed to Addltem (continued) 
Tag 
GiftWrap 
Highlight 
InsuranceFee 
InsuranceOption 
I sAd Format 
Layoutid 
Location 
MinimumBid 
MOCashiers 
MoneyXferAccepted 
MoneyXferAcceptedin 
Checkout 
PackagingHandling 
Costs 
PaymentOther 
PaymentOtherOnline 
PaymentSee 
Description 
PayPalAccepted 
Purpose 
If 1, the seller is offering to wrap the item (and optionally 
include a card) as described in the item description. 
If 1, item's listing appears highlighted. 
Amount of insurance, if InsuranceOption is optional or 
required. Value specified should be the total cost of insuring 
the item. 
Indicator of whether insurance fee is required. Don't specify 
a value in this field unless CheckoutDetailsSpecified is 1. 
Default is o. Valid values are 
O: Insurance not offered 
1: Insurance optional 
2: Insurance required 
3: Insurance included in shipping and handling costs 
If true, a real estate item is listed as an ad. 
ID for the template to use when displaying the new item's 
description. 
Geographical location of the item. Maximum length is 45. 
For auction listings, MinimumBid is the minimum acceptable 
bid for the item. For fixed-price listings, MinimumBid is the 
fixed price at which the seller is selling the item. 
Money orders and cashier's checks are acceptable 
payment methods. 
Direct transfer of money is an acceptable payment method. 
Direct transfer of money is an acceptable payment method 
in Checkout. Must be set if MoneyXferAccepted is 1. 
Optional fees a seller might assess for the shipping of the 
item. 
Another payment modes (not defined by eBay) is an 
acceptable payment method. 
Non-eBay online payment is an acceptable payment method. 
Acceptable payment method is in description. 
If true, indicates that the seller accepts Pay Pal as a form of 
payment. Payment methods are not applicable for real 
estate listings. 
231 

Chapter9 
232 
Table 9-1 B. Tags Passed to Addltem (continued) 
Tag 
PayPalEmailAddress 
PersonalCheck 
PhotoCount 
PhotoDisplayType 
PictureURL 
Private 
QuantityÂ· 
Region 
Reserve Price 
RestrictedToBusiness 
SalesTaxPercent 
SalesTaxState 
Schedule Time 
SellerPays 
ShipFromZipCode 
Purpose 
Seller's e-mail address on file with PayPal that is associated 
with the item. 
Personal check is an acceptable payment method. 
Number of photos used for PhotoHosting slide show. 
Type of display for photos used for PhotoHosting slide show. 
o: No special Picture Services features 
1: Slideshow of multiple pictures 
2: Large format picture 
3: Picture Pack 
URL for one or more pictures for the item's listing. 
Maximum length is 1,024. 
Private auction. Not applicable to fixed-price items. 
Number of items being sold in the listing. Must be greater 
thanO. 
Numeric code for a region, used to list an item regionally. 
Minimum price that the seller is willing to sell the item. 
If 1, the seller elects to offer the item exclusively to business 
users. If o, the seller elects to offer the item to all users. 
Applicable for business sellers residing in Germany, Austria, 
or Switzerland and listing in a B2B VAT-enabled category on 
the eBay Germany (DE), Austria (AT), or Switzerland (CH) 
sites only. 
Sales tax for the item. If you specify a SalesTaxPercent, you 
must also specify a SalesTaxState. Don't specify a value in 
this field unless CheckoutDetailsSpecified is 1. 
State that is associated with the SalesTaxPercent. Pass 
a two-letter abbreviation for the state. 
Tag that allows a user to schedule a listing to start at the 
specified time in the future. Specifies the time at which the 
item is scheduled to be listed on eBay. 
Seller pays all shipping. 
Zip code from which the seller is shipping the item. Only 
specify this tag if ShippingType is 2. 
ShippingHandlingCosts 
Primary shipping and handling costs for the item. Don't 
specify a value in this field unless 
CheckoutDetailsSpecified is 1. 

Using the eBay API Within a Web Site 
Table 9-18. Tags Passed to Addltem (continued) 
Tag 
ShippinginTax 
Shippingirregular 
ShippingOption 
ShippingPackage 
ShippingService 
ShippingType 
ShipToAfrica 
ShipToAsia 
ShipToCaribbean 
Purpose 
Indicator of whether shipping costs are included in the tax 
amount. Don't specify a value in this field unless 
CheckoutDetailsSpecified is 1. 
An item that can't go through the stamping machine at the 
shipping service office when 1 and requires special or fragile 
handling. Only specify this tag if ShippingType is 2. 
Specifies where the seller is willing to ship the item. Valid 
values are 
SiteOnly (the default) 
WorldWide 
SitePlusRegions 
WillNotShip 
Size of the package to be shipped. Valid values are 
o:None 
1: Letter 
2: Large envelope 
3: USPS flat-rate envelope 
4: Package/thick envelope 
s: USPS large package/oversize 1 
6: Very large package/ oversize 2 
7: UPS letter 
Shipping carrier for the item. Valid values are 
3: UPS Ground 
4: UPS 3rd Day 
5: UPS 2nd Day 
6: UPS Next Day 
7: USPS Priority 
8: USPS Parcel 
9: USPS Media 
10: USPS First Class 
11: USPS Express Mail 
Indicator of whether shipping costs are flat rates or 
calculated rates. Default value is 1. Valid values are 
1: Flat shipping rate 
2: Calculated shipping rate 
Seller will ship to Africa. 
Seller will ship to Asia. 
Seller will ship to Caribbean. 
233 

Chapter9 
234 
Table 9-18. Tags Passed to Addltem (continued) 
Tag 
ShipToEurope 
ShipTolatinAmerica 
ShipToMiddleEast 
ShipToNorthAmerica 
ShipToOceania 
ShipToSouthAmerica 
Subtitle Text 
Superfeatured 
Themeid 
Title 
Type 
UUID 
VATPercent 
Version 
VisaMaster 
WeightMajor 
Purpose 
Seller will ship to Europe. 
Seller will ship to Latin America. 
Seller will ship to Middle East. 
Seller will ship to North America. 
Seller will ship to Oceania (Pacific region other than Asia). 
Seller will ship to South America. 
Subtitle to use in addition to the title. Provides more 
keywords when buyers search in titles and descriptions. 
Item is shown on the eBay home page and appears at the 
top of the category listings. 
ID for the template to use when displaying the new item's 
description. 
Title of the item being placed up for auction. 
Auction type. Possible values are 
o: Unknown auction type 
1: Chinese auction 
2: Dutch auction 
6: Ad-'!YPe auction 
7: eBay stores inventory (stores fixed-price) listings (US 
only) 
9: Fixed-price item (BIN only) 
Universally unique constraint tag. Use UUID as a precaution 
if you are listing many items at once. 
VAT rate for the item, if the item price includes the VAT rate. 
Specify VATPercent if you want include the net price in 
addition to the gross price in the listing (i.e., on the View 
Item page). 
Used to specify which set of shipping/handling and tax 
tags to use. 
Visa and MasterCard are acceptable payment methods. 
Number of units for shipping weight unit of measure. 

Using the eBay API Within a Web Site 
Table 9-18. Tags Passed toAddltem (continued) 
Tag 
WeightMinor 
WeightUnit 
Purpose 
Fractional number of units for shipping weight unit of measure. 
Unit of measure for shipping weight. Default value is 1. Valid 
values are 
1: WeightMajor specifies pounds, WeightMinor specifies 
ounces 
2: WeightMajor specifies kilograms, WeightMinor specifies 
decimal number of fractions of a kilogram 
NOTE 
The semantics of the Add Item call are slightly different depending on 
whether you're listing a conventional item, an item in an eBay store, an eBay 
real estate listing, or an eBay Motors listing. Be sure to check the latest version 
of the eBay documentation for details. 
Although you may be tempted to code your application using only the 
Add Item call, it's best if you use Veri fyAdditem first to determine if a request to add 
an item is correct. It takes the same arguments as Additem and validates all of the 
arguments as if to add the item, without actually adding the item. The key differ-
ence in result parameters is that the result Id field will always contain o, because 
the item isn't added to eBay, and isn't assigned a unique ID. You can also use 
VerifyAdditem to have eBay calculate the insertion fees for an item without actu-
ally putting the item up for auction. 
WARNING 
When adding multiple items, always use Add Item, and don't use 
VerifyAdditemfor each item in the batch to add (it's intended to provide user 
validation and an estimation of fees for the user). Veri fyAdditem is designed 
for interactive use by your application's users; calling it instead of Add Item or 
calling it on items that have already been added may result in your applica-
tion failing certification. 
When adding an item, the resulting XM:L contains a description of the inser-
tion fees for the item added along with the item ID of the newly created item. 
Table 9-19 summarizes the tags in the response XM:L. 
235 

Chapter9 
236 
Table 9-19. Tags Returned by Addltem 
Tag 
Category 
Category2 
Duplicateitemid 
EndTime 
Fees 
Length Fee 
Bold Fee 
BuyitNowFee 
Category 
Featured Fee 
Currency!d 
Featured Fee 
Featured 
GalleryFee 
Fixed Price 
Duration Fee 
GalleryFee 
GifticonFee 
Highlight Fee 
Insertion Fee 
listing 
DesignerFee 
ListingFee 
Purpose 
Category ID of primary category for listing. 
Category ID of secondary category for item listing. 
Tag returned with error 488 when a duplicate UUID is specified. 
Unique identifier for the existing auction item. 
Date and time the item's listing ends, in GMT. 
Container node for fee information. EU residents who sell items 
on EU sites may be subject to VPJ. 
Fee for 10-day auctions. Contained within the Fees tag. 
Fee to boldface the title for the item's listing. Contained within the 
Fees tag. 
Fee to add the Buy It Now option to the item. 
Fee to have the item featured in its category. Contained within the 
Fees tag. 
Billing currency of the seller. Contained within the Fees tag. 
Fee to have the item appear at the top of item listings. Contained 
within the Fees tag. 
Fee to have the item featured in its gallery. Contained within the 
Fees tag. 
Fee for listing a fixed-price item for a certain duration. Contained 
within the Fees tag. 
Fee to have the item included in the gallery. Contained within the 
Fees tag. 
Fee for displaying a gift icon next to the listing. Contained within 
the Fees tag. 
Fee to have the item's listing appear highlighted. Contained 
within the Fees tag. 
Basic fee for listing the item. EU residents who sell items on EU 
sites may be subject to VAT. Contained within the Fees tag. 
Fee charged for the optional use of a Listing Designer layout or 
theme template. Contained within the Fees tag. 
Total fee for listing the item. Includes basic fee (Insertion Fee) 
plus any specialty listing features. EU residents who sell items on 
EU sites may be subject to VAT. Contained within the Fees tag. 

Using the eBay API Within a Web Site 
Table 9-19. Tags Returned by Addltem (continued) 
Tag 
PhotoDisplayFee 
PhotoFee 
Reserve Fee 
SchedulingFee 
Subtitle Fee 
Id 
ListedBy 
RequestAppid 
StartTime 
Purpose 
Fee for use of Photo Hosting feature, a slideshow of multiple 
images. Contained within the Fees tag. 
Fee for associating 1-6 photos with an item's listing. Contained 
within the Fees tag. 
Fee for specifying a reserve price for the item's auction. Contained 
within the Fees tag. 
Fee for scheduling the item to be listed at a later date. Contained 
within the Fees tag. 
Fee to add a subtitle to the item. Contained within the Fees tag. 
Unique identifier for the new auction item. 
Tag returned with error 488 when a duplicate UUID is specified. 
A value of 1 in ListedByRequestAppid indicates the item 
represented by the value in Duplicateitemid was listed by the 
calling application. A value of 0 in ListedByRequestAppid indicates 
the item represented by the value in Duplicateitemid was not 
listed by the calling application. 
Date and time the item's listing starts, in GMT. 
WARNING 
If Add Item doesn't return a result, attempt to add the same item 
again with the same UUID as the original item. If the first Add Item succeeded, 
the second will fail because you can't add a duplicate item with the same 
UUID. Also, you shouldn't perform end-to-end testing in the Sandbox with 
PayPal payments, because these payments aren't part of the eBay Sandbox, 
and actual funds may be transferred between the test buyer and seller! 
Once you have added an item to eBay, you can change many ofits fields 
using the Revise!tem interface. By passing an item ID in its Item!d parameter and 
item attributes describing the revision from Table 9-18, you can change the vari-
ous fields of an item. In response, eBay sends a document that contains the item 
ID of the revised item and the fees associated with that item as described in 
Table 9-19. Of course, you can't revise just any field of an item once it's been 
listed on eBay; there are some restrictions you should be aware of. For an auc-
tion less than 12 hours old with no bids, you can edit any field that doesn't 
change the format of the auction. On the other hand, once the auction is more 
than 12 hours old or a user has bid on the item, you can't change any field that 
237 

Chapter9 
238 
changes the core description. You can, however, change the second category, add 
optional features of the listing such as a bold title, add new shipping details and 
payment details, and add counters to your listing. 
Adding Items to a Second Chance Auction Using the 
AddSecondChanceitem and VerifyAddSecondChanceitem Interfaces 
You can call AddSecondChanceitem to create a Second Chance auction for an item 
that didn't complete a sale after its previous action. The arguments to 
AddSecondChanceAuction and its verify-only counterpart VerifyAddSecondChanceitem 
are similar to Add Item and Veri fyAdditem. Table 9-20 shows the argument tags you 
may pass to these interfaces. These interfaces return the fees applicable for the 
auction along with the item ID for the newly created item, described in Table 9-19. 
Table 9-20. Tags Passed to AddSecondChanceitem and VerifyAddSecondChanceitem 
Tag 
BuyitNowPrice 
CopyEmailToSeller 
Purpose 
Price the offer recipient would need to pay to purchase 
the item through the second chance offer. 
Indicator of whether seller receives copy of notification 
e-mail sent to the recipient bidder. If 1, then seller 
receives a copy of the notification e-mail. Default is 0. 
Duration 
Number of days the second chance offer is good for. 
May be 1, 3, 5, or 7. 
Originalitemid 
Valid item ID for an item that qualifies for a second 
chance offer. 
RecipientBidderUserld 
Valid eBay user ID for the user to whom the seller is 
extending the second chance offer. 
WARNING 
If Addltem doesn't return a result, attempt to add the same item 
again with the same UUID as the original item. If the first Additem succeeded, 
the second will fail because you can't add a duplicate item with the same 
UUID. Also, you shouldn't perform end-to-end testing in the Sandbox with 
PayPal payments, because these payments aren't part of the eBay Sandbox, 
and actual funds may be transferred between the test buyer and seller! 

Using the eBay API Within a Web Site 
The AddToitemDescription Interface 
The AddToltemDescription interface lets you add additional information to an 
item's description. It takes two arguments: the Itemid of the item to update, and 
a Description tag that contains the text to append to the item's description. The 
response contains a Status tag that specifies the value Success on success, or 
Failure on failure of the request, and a Message tag contained within an eBay 
node that provides an optional message. 
WARNING 
Only use AddToitemDescription when a seller needs to change 
item information after listing the item. Your application shouldn't use 
AddToitemDescription as part of the standard listing process. 
The Enditem Interface 
The Enditem interface lets your application instantly end any active eBay auction. 
The item for auction must be listed by the eBay user specified in the RequestUserid 
argument. When invoking Enditem, you must also pass the Itemid of the item 
whose auction should end, and a EndCode with one of the following values: 
â¢ A value of 1 indicates that the item was lost or broken. 
â¢ A value of 2 indicates that the item is no longer available for sale. 
â¢ A value of 3 indicates that the minimum or reserved price is inaccurate. 
â¢ A value of 4 indicates that the listing (other than the minimum or reserved 
price) is in error. 
The XML eBay returns contains an EndTime indicating when the auction 
actually ended, along with the Itemid of the item whose auction was terminated. 
You can't end just any auction. For your End Item call to succeed, you must 
satisfy the following conditions: 
â¢ The value specified in the RequestUserid input argument must be a valid 
eBay user ID. 
â¢ The user specified in RequestUserid must not be currently blocked by eBay. 
â¢ The user specified in RequestUserid must be the seller of the item specified 
in the Itemid argument. 
239 

Chapter9 
240 
â¢ The item specified in Itemid must have been listed on the site specified in 
the Siteid argument. 
â¢ The item specified in Itemid must still be an active auction (can't have 
already ended as a successful or unsuccessful auction). 
â¢ In a call to Enditem, the value passed in the RequestUserid argument (or 
RequestToken) identifies the seller of the item being ended. 
The GetAllBidders Interface 
The GetAllBidders interface returns a list of all bidders for the item you specify in 
the Itemid parameter. This call is most often used in conjunction with second-
chance auctions, in which case you should also pass the value 1 in the 
SecondChanceEnabledOnly parameter. To view all bidders in the indicated auction, 
also pass 1 in the ViewAllBidders parameter. 
The return value will contain a Bids tag, inside of which will be a Bid tag 
describing each bid. A crucial element of the Bid tag is the User tag, which 
describes the user who made the specific bid. Table 9-21 shows the tags within 
the Bid returned by GetAllBidders. In addition, the Count attribute indicates the 
total number of Bid nodes in the Bids node, whereas the HighBidderUserid tag 
contains the user ID of the highest bidder and the Highest Bid indicates the 
amount that that bidder has bid. 
Table 9-21. Tags Within the Bid Tag Returned by GetAllBidders 
Tag 
Cause 
Converted Price 
Currency 
Currencyid 
Purpose 
Type of bid. Will be one of these values: 
o:Unknown 
1: Bid 
2: Not used 
3: Retraction 
4: Auto-retraction 
5: Cancelled 
6: Auto-cancel 
7:Absentee 
8: BuyltNow 
9:Purchase 
Converted value of the CurrentPrice in the currency 
indicated by SiteCurrency. 
Numeric ID for the currency for the auction. 
Currency symbol for the auction. 

Using the eBay API Within a Web Site 
Table 9-21. Tags Within the Bid Tag Returned by GetAllBidders (continued) 
Tag 
Max Bid 
Quantity 
Purpose 
Amount each bidder has extended as a bid. May not be the 
same amount as the user actually pays when the auction is 
finalized, per the way Dutch auctions work. 
Number of items for which each bidder extended a bid. 
Always returns a value of 1. 
SecondChanceEnabled 
User's preference to accept second chance offers. 
SiteCurrency 
Numeric code corresponding to the currency of the site that 
is requesting the item. 
Time Bid 
User 
Date and time each bid was placed. 
Parent node for each high bidder. See Table 9-13 for the tags 
in this node. 
The GetBidderList Interface 
The GetBidderList interface returns a list of all items on which the indicated user 
has bid. Pass the user's eBay ID in the User!d attribute. Use the Active argument 
to restrict the list of returned items to only active auctions, or use the EndTimeFrom 
and EndTimeTo argument to restrict the results to a particular interval in time. 
The return value consists of a Count tag, which indicates the number of Item 
nodes returned. Each Item node contains the tags described in the section "The 
Getltem Interface" later in this chapter. The returned data also depends on the 
Detaillevel you specify, just as the Getitem call does. 
WARNING 
Item details don't change very often. If you are going to retrieve 
information for a bidder more than once, don't retrieve the item details in 
subsequent calls. If the bidder has bid on items whose details weren't retrieved 
in the initial call, your application should use Get Item to retrieve item 
details. Failure to do this may result in your application not receiving eBay 
certification. 
The GetCategoryListings Interface 
The GetCategorylistings interface returns a list of all items for auction within 
a specific category on the eBay site you specify with the Si teid argument. This 
interface is a paged interface; in addition to passing the Category!d of interest, 
you must also pass the ItemsPerPage and PageNumber attributes to specify how 
241 

Chapter9 
242 
many items should be returned on a page, and the page to return. You can filter 
the results using the ItemTypeFilter tag, which can contain 1 to return all items, 2 
to return auction items, or 3 to return fixed-price items. You can also filter items 
by Siteid with SiteidFilterType, restricting results to those items listed in the 
currency implied by that site, located in the country implied by that site, avail-
able from the country implied by that site, or regardless of currency and 
location, by passing integer 1, 2, 3, or 4, respectively; you can also limit the search 
to a specific region using the Regionid argument. Finally, you can specify 
whether to return all items or only those listed in the last 24 hours using the 
OrderBy attribute; if you specify 1, only new items in the last 24 hours are 
returned. 
The XML eBay returns contains Category and CategoryTitle tags that indicate 
the ID and name of the category you requested. The Count tag indicates the num-
ber of items returned, whereas the GrandTotal tag indicates the total number of 
items matching the search criteria you specified in your request. The PageNumber 
attribute indicates the page number of the returned data, whereas the 
TotalNumberOfPages lets you determine the total number of pages available. The 
items themselves are returned as individual Item entities within an Items con-
tainer node; each Item node contains the tags described in the section "The 
Getltem Interface" later in this chapter. 
WARNING 
Don't call GetCategorylistings more than once per category per 30 
minutes. If you do, your application may not receive eBay certification. 
The GetHighBidders Interface 
The GetHighBidders interface returns a list of all high bidders for a Dutch auction. 
It returns one Bid node for each high bid in the auction. To determine the high 
bidders for an item, pass the item's ID in the Itemid attribute. Table 9-22 summa-
rizes the returned tags in the result's Bid nodes. The result will also contain 
a Count node, indicating the number of returned Bid nodes. 

Using the eBay API Within a Web Site 
Table 9-22. Tags Within the Bid Tag Returned by GetHighBidders 
Tag 
Cause 
Converted Price 
Currency 
Currency!d 
MaxBid 
Quantity 
Purpose 
'IYPe of bid. Will be one of these values: 
o:Unknown 
1: Bid 
2: Not used 
3: Retraction 
4: Auto-retraction 
5: Cancelled 
6: Auto-cancel 
7:Absentee 
8: BuyltNow 
9: Purchase 
Converted value of the CurrentPrice in the currency 
indicated by SiteCurrency. 
Numeric ID for the currency for the auction. 
Currency symbol for the auction. 
Amount each bidder has extended as a bid. May not be the 
same amount as the user actually pays when the auction is 
finalized, per the way Dutch auctions work. 
Number of items for which each bidder extended a bid. 
Always returns a value of 1. 
SecondChanceEnabled 
Indicates the user's preference to accept second chance offers. 
SiteCurrency 
Numeric code corresponding to the currency of the site that 
is requesting the item. 
TimeBid 
Date and time each bid was placed. 
User 
Parent node for each high bidder. See Table 9-13 for the tags 
in this node. 
WARNING 
When retrieving high bidders, the application should only retrieve 
new data. Older data records should be cached. Failure to do this may result 
in your application not receiving eBay certification. 
The Getitem Interface 
The Getltem interface returns a description of the item you specify by its item ID. To 
use Get Item, pass the item ID in the Id attribute. You can also specify an optional 
243 

Chapter9 
244 
DescForrnat attribute, which when set to 1 (the default) returns the description with 
the various templates supported by eBay applied. 
This call is highly dependent on the detail level you specify via the Detail level 
tag; for specific details, consult the eBay API documentation. 
The returned XM:L contains the tags shown in Table 9-23. 
Table 9-23. Tags Returned by Getltem 
Tag 
ApplicationData 
AutoPay 
BidCount 
Bid Increment 
BuyerProtection 
BuyitNowPrice 
BuyitNowPrice 
Category 
Purpose 
Tag returns custom, application-specific data associated 
with the item. The data in this field is stored with the item in 
the items table at eBay, but isn't used in any way by eBay. Use 
ApplicationData to store such special information as a part 
or SKU number. Maximum is 32 characters in length. 
If 1, the seller requested immediate payment for the item. 
Number of bids placed so far against the item. Returned as 
null for international fixed-price items. 
Smallest amount a bid must be above the current high bid. 
Indicator of the status of the item's eligibility for the Buyer 
Protection Program. Contained within the Transaction tag. 
Possible values are 
0: Item is ineligible (e.g., category not applicable) 
1: Item is eligible per standard criteria 
2: Item marked ineligible per special criteria (e.g., seller's 
account closed) 
3: Item marked eligible per other criteria 
Applicable for items listed to the US site and for the Parts & 
Accessories category (6028) or Everything Else category 
(10368) (or their subcategories) on the eBay Motors site. 
Amount a buyer would need to bid to take advantage of the 
Buy It Now feature. Not applicable to fixed-price or ad-type 
items (ItemProperties. Type returns a 6, 7, or 9). For fixed-
price items, see StartPrice instead. See 
http://pages.ebay.com/services/buyandsell/buyitnow.html 
to learn more about Buy It Now. 
Amount a buyer would need to bid to take advantage of the 
Buy It Now feature. Not applicable to fixed-price items or ad 
format listings. For fixed-price items, see StartPrice instead. 
Contained within the Transaction tag. 
Container for data on the primary category of listing. 
Contained within the Transaction tag. 

Using the eBay API Within a Web Site 
Table 9-23. Tags Returned by Getltem (continued) 
Tag 
Category!d 
Category2 
Category2Id 
Charitylisting 
Charitylistinginfo 
CharityName 
CharityNumber 
Donation Percent 
Checkout 
Details 
Additional 
ShippingCosts 
AllowPaymentEdit 
Purpose 
ID for the category in which the item is listed. Contained 
within the Category tag of a Transaction tag. 
Container for data on the secondary category of listing. 
Contained within the Transaction tag. 
ID for the optional second category (if specified) in which 
the item is listed. Contained within the Category2 tag of 
a Transaction tag. 
If true (1), the seller has chosen to use eBay Giving Works to 
donate a percentage of the item purchase price to 
a selected nonprofit organization. Contained within the 
Transaction tag. 
Container node with information about the Giving Works 
item and beneficiary. 
Name of the benefiting nonprofit organization the seller 
selected. Contained within the Charitylistinginfo node. 
Number assigned to the nonprofit organization by the 
provider of the Giving Assistant for eBay Giving Works. 
Maximum length is 10 digits. Contained within the 
Charitylistinginfo node. 
Percentage of the purchase price that the seller chose to 
donate to the selected nonprofit organization. Possible values: 
1 to 100. Contained within the Charitylistinginfo node. 
Container node with post-sale information. 
Container node with payment details information. Returned 
within the Checkout node. 
Any additional shipping costs for the item beyond those 
indicated in ShippingHandlingCosts. Returned within the 
Details node. 
If 1, at the time that the item was listed the seller's user 
preferences allowed buyers to edit payments. Returned 
within the Details node. 
Checkoutinstructions Seller's instructions to the buyer and return policy. Returned 
within the Details node. 
Insurance Fee 
Amount of insurance. Returned within the Details node. 
245 

Chapter9 
246 
Table 9-23. Tags Returned by Getltem (continued) 
Tag 
InsuranceOption 
Packaging 
HandlingCosts 
SalesTaxPercent 
SalesTaxState 
Purpose 
Indicator of whether insurance fee is required. Returned 
within the Details node. Possible values are 
o: Insurance not offered (default) 
1: Insurance optional 
2: Insurance required 
3: Insurance included in shipping and handling costs 
Any additional packaging and handling fees assessed by the 
item's seller. Returned within the Details node. 
Sales tax for the item, expressed as a percentage. Returned 
within the Details node. 
Indicator of whether state sales tax is charged. Returned 
within the Details node. 
ShippingHandlingCosts Primary shipping and handling costs for the item. Returned 
within the Details node. 
ShippinginTax 
ShipFromZipCode 
Shipping!rregular 
ShippingPackage 
Specifies whether shipping costs are included in the tax 
amount. Returned within the Details node. 
Zip code from which the seller is shipping the item. 
Returned within the Details node. 
When 1, the item can't go through the stamping machine at 
the shipping service office and requires special or fragile 
handling. 
Size of the package to be shipped. Returned within the 
Details node. Possible values are 
o: None 
1: Letter 
2: Large envelope 
3: USPS flat-rate envelope 
4: Package/thick envelope 
s: USPS large package/oversize 1 
6: Very large package/ oversize 2 
7: UPS letter 

Using the eBay API Within a Web Site 
Table 9-23. Tags Returned by Get/tern (continued) 
Tag 
ShippingService 
WeightMajor 
WeightMinor 
WeightUnit 
Purpose 
Shipping carrier for the item. Returned within the Details 
node. Possible values are 
3: UPS Ground 
4: UPS 3rd Day 
5: UPS 2nd Day 
6: UPS Next Day 
7: USPS Priority 
8: USPS Parcel 
9: USPS Media 
10: USPS First Class 
11: USPS Express Mail 
Number of units for shipping weight unit of measure. 
Returned within the Details node. 
Fractional number of units for shipping weight unit of 
measure. Returned within the Details node. 
Unit of measure for shipping weight. Default value is 1. 
Returned within the Details node. Valid values are 
1: WeightMajor specifies pounds, WeightMinor specifies 
ounces 
2: WeightMajor specifies kilograms, WeightMinor specifies 
fractions of a kilogram 
ConvertedBuy 
Converted value of the BuyitNowPrice in the currency 
ItNowPrice 
indicated by SiteCurrency. 
ConvertedPrice 
Converted value of the CurrentPrice field in the currency 
indicated by SiteCurrency. 
ConvertedStartPrice 
Converted value of the StartPrice field in the currency 
indicated by SiteCurrency. 
Counter 
Optional hit counter for the item's listing page. Possible 
values: o, 1, 2, or 3 (0, 1, or 2 for non-US items). For more 
information on counters, see 
http://pages.ebay.com/help/sellerguide/counters.html. 
Country 
Currency 
Currencyid 
Country field is a two-letter abbreviation for the country. 
Numeric code for the currency used to list the item. 
Character symbol for the currency used to list the item 
symbol for the auction. 
247 

Chapter9 
248 
Table 9-23. Tags Returned by Getltem (continued) 
Tag 
Current Price 
Description 
Description len 
EndTime 
GalleryURL 
Gifticon 
GiftServices 
GoodTillCanceled 
High Bidder 
Id 
ItemProperties 
Adult 
BindingAuction 
BuyitNowAdded 
BuyitNowlowered 
Purpose 
For auction-type listings, this tag returns the start price (if 
no bids have been placed yet) or current high bid (if at 
least one bid has been placed). For all fixed-price type and 
ad-type listings, returns the price specified when the item 
was originally listed or relisted or the new price after the 
item was revised. 
Description of item. 
Length (in characters) of the text in Description. 
Time stamp for the end of the listing. 
URL for the gallery for the item. 
If true, a generic gift icon displays in the listing's title. 
Values for the various Gift Services offered by sellers. Contains 
thetagsGiftExpressShipping,GiftShipToRecipient,and 
GiftWrap, each of which may be 1 oro. 
If 1, the store owner listed the item as good until cancelled. If 
the item doesn't sell within the specified listing period, the 
item is automatically relisted at the end of the specified 
period. Applicable for eBay stores inventory items only. 
Contains one User node representing the current high 
bidder. See Table 9-13 for the entries in this node. 
Unique identifier for the item. 
Container node for item property information. 
Indicator of whether item is adult oriented. Users can't 
retrieve information for items listed in Mature categories 
unless they have accepted the Mature Category agreement 
on the eBay site. Contained within the ItemProperties tag. 
For real estate auctions, indicates whether buyers and sellers 
are expected to follow through on the transaction. Contained 
within the ItemProperties tag. 
If 1, a Buy It Now price was added for the item. Only 
returned for Motors items. Contained within the 
ItemProperties tag. 
If 1, indicates that the Buy It Now price was lowered for the 
item. Only returned for Motors items. Contained within the 
ItemProperties tag. 

Using the eBay API Within a Web Site 
Table 9-23. Tags Returned by Getltem (continued) 
Tag 
BoldTitle 
CheckoutEnabled 
Featured 
Gallery 
GalleryFeatured 
Highlight 
Purpose 
Indicator of whether the holding option was used. Contained 
within the ItemProperties tag. 
Indicator of whether Checkout is enabled for this item. 
Contained within the ItemProperties tag. 
Indicator of whether the item is a featured item. Contained 
within the ItemProperties tag. 
Indicator of whether to include this item in the gallery. 
Contained within the ItemProperties tag. 
Indicator of whether this item is featured in the gallery. 
Contained within the ItemProperties tag. 
If true, item's listing is highlighted. Contained within the 
ItemProperties tag. 
Private 
Private auction. Limits participation in auction. Contained 
within the ItemProperties tag. 
Reserve 
If true, indicates that the item has a reserve price. Contained 
within the ItemProperties tag. 
Reservelowered 
If true, indicates that the reserve price was lowered for the 
item. Only returned for Motors items. Contained within the 
ItemProperties tag. 
ReserveMet 
Returns 1 if the reserve price was met or no reserve price was 
specified. Contained within the ItemProperties tag. 
ReserveRemoved 
If 1, indicates that the reserve price was removed from the 
item. Only returned for eBay Motors items. Contained within 
the ItemProperties tag. 
RestrictedToBusiness If 1, the seller elects to offer the item exclusively to business 
users. Applicable for business sellers residing in Germany, 
Austria, or Switzerland and listing in a B2B VAT-enabled 
category on the eBay Germany (DE), Austria (AT), or 
Switzerland (CH) sites only. Contained within the 
ItemProperties tag. 
VATPercent 
VAT rate that the business seller entered for the item, if any. 
The Start Price is assumed to include the VAT rate. 
Applicable when the seller is a business seller residing in 
Germany, Austria, or Switzerland and the item is listed in 
a B2B VAT-enabled category on the eBay Germany (DE), 
Austria (AT), or Switzerland (CH) sites only. Contained 
within the ItemProperties tag. 
249 

Chapter9 
250 
Table 9-23. Tags Returned by Getltem (continued) 
Tag 
SuperFeatured 
Type 
ItemRevised 
LeadCount 
ListingDesigner 
Location 
MinimumToBid 
Originalitemid 
Payment Terms 
PhotoCount 
PhotoDisplayType 
Purpose 
Indicator of whether item is a super featured item. 
Contained within the ItemProperties tag. 
Auction format. Possible values are 
o: Unknown auction type 
1: Chinese auction 
2: Dutch auction 
5: live Auctions-type auction 
6: Ad-Type auction 
7: eBay stores inventory (stores fixed-price) listing (US only) 
8: Personal offer 
9: Basic fixed-price item 
Indicator of whether the item was revised since the 
auction started. 
Tag that is applicable to ad-format items only. Indicates how 
many leads to potential buyers are associated with this item. 
For item types other than ad-format items, returns a value of o. 
Container tag in which are returned data elements with 
listing Designer information. Contains the Layoutid and 
Theme!d tags. 
Where the item is at time of auction. 
Smallest amount the next bid on the item may be. Only 
applicable to auction-type listings; returns zero for all fixed-
price and ad-type listings. 
Item ID for the original item a seller offers through a second 
chance offer listing. 
Container node for payment information. Not applicable for 
real estate listings. Contains the AmEx, CashOnPickupAccepted, 
CCAccepted,COD,Discover,Escrow,EscrowBySeller,MOCashiers, 
MoneyXferAccepted,MoneyXferAcceptedinCheckout,other, 
OtherPaymentsOnline,PayPalAccepted,PayPalEmailAddress, 
PersonalCheck, SeeDescription, and VisaMaster tags, each of 
which may be 1 oro. See Tables 9-13 and 9-18 for use. 
Number of photos used for Photo Hosting slide show. 
Type of display for photos used for Photo Hosting slide show. 
O: No special Picture Services features 
1: Slideshow of multiple pictures 
2: Large format picture 
3: Picture Pack 

Using the eBay API Within a Web Site 
Table 9-23. Tags Returned by Getltem (continued) 
Tag 
PictureURL 
Private 
Quantity 
Region 
QuantitySold 
Region 
RelistiD 
Reserve Price 
SecondChance 
Eligible 
Seller 
ShippingOption 
ShippingRegions 
Africa 
Asia 
Caribbean 
Europe 
LatinAmerica 
Purpose 
URL for one or more pictures for the item's listing. Maximum 
length is 1,024. 
Private auction. Not applicable to fixed-price items. 
Number of items being sold in the listing. Must be greater 
thano. 
Numeric code for a region, used to list an item regionally. 
Number of items purchased so far. (Subtract from the value 
returned in the Quantity field to calculate the number of 
items remaining.) 
Region where the item is listed. 
Tag returns the new item ID for a relisted item. 
Reserve price for a reserve auction. 
If 1, item is eligible to be offered as a second chance offer 
listing. 
Container node for information about the seller. Contains 
User-pertinent tags described in Table 9-13. 
Where the seller is willing to ship the item. Valid values are 
SiteOnly (the default) 
WorldWide 
SitePlusRegions 
WillNotShip 
Where the seller is willing to ship the item if ShippingOption 
is Si tePlusRegions. Tags within this tag will have a value of 1 
if the seller will ship to the specified location. 
Seller will ship to Africa. Contained within the 
ShippingRegions tag. 
Seller will ship to Asia. Contained within the 
ShippingRegions tag. 
Seller will ship to Caribbean. Contained within the 
ShippingRegionstag. 
Seller will ship to Europe. Contained within the 
ShippingRegions tag. 
Seller will ship to Latin America. Contained within the 
ShippingRegions tag. 
251 

Chapter9 
252 
Table 9-23. Tags Returned by Getltem (continued) 
Tag 
MiddleEast 
NorthAmerica 
Oceania 
SouthAmerica 
ShippingTerms 
SiteCurrency 
Site!d 
Start Price 
Start Time 
Storefrontinfo 
Storefront! tern 
Subtitle Text 
Time left 
Days 
Hours 
Minutes 
Seconds 
Title 
Purpose 
Seller will ship to Middle East. Contained within the 
ShippingRegions tag. 
Seller will ship to North America. Contained within the 
ShippingRegionstag. 
Seller will ship to Oceania (Pacific region other than Asia). 
Contained within the ShippingRegions tag. 
Seller will ship to South America. Contained within the 
ShippingRegions tag. 
Container node for shipping term information, containing 
the SellerPays tag, which when 1, indicates that the seller 
will pay all shipping. 
Numeric code corresponding to the currency of the site that 
is requesting the item. 
eBay site on which the requested item is listed. 
Tag returns the price the seller specified when originally 
listing or relisting the item. 
Time stamp for the start of the listing. 
Tag contains the eBay stores-specific item attributes 
DepartmentNumber and Storelocation. 
If 1, the item is an eBay stores item. 
Subtitle used in addition to the title. 
Container node for the amount of time left in an active auction. 
Time left for active auction period, days portion. Contained 
within the Time left tag. 
Time left for active auction period, hours portion. Contained 
within the Time left tag. 
Time left for active auction period, minutes portion. 
Contained within the Time left tag. 
Time left for active auction period, seconds portion. 
Contained within the Time left tag. 
Name of the item as it appears for auctions. Returned as CDATA. 

Using the eBay API Within a Web Site 
Table 9-23. Tags Returned by Getltem (continued) 
Tag 
TitleBarlmage 
UUID 
Zip 
Purpose 
Indicator of whether an image for the item appears in the 
title bar of the item's listing page (View Item page) on the 
eBaysite. 
Universally unique constraint tag. The UUID is unique to 
a category. The UUID can only contain digits from 0 to 9 and 
letters from A to E The UUID must be 32 characters long. 
Zip code for the seller. 
The GetitemShipping Interface 
You use the GetltemShipping interface to determine the shipping costs for an 
item. When using GetltemShipping, pass the arguments in Table 9-24. 
Table 9-24. Tags Passed to GetltemShipping 
Tag 
Itemld 
QuantitySold 
ShipToZipCode 
Purpose 
Item for which shipping should be calculated. 
Number of objects sold in the auction to a single buyer that would 
be shipped together. Default is 1. 
Zip code to which the seller is shipping the item. 
The GetltemShipping interface returns a summary of shipping costs with the 
tags you see in Table 9-25. 
Table 9-25. Tags Returned by GetltemShipping 
Tag 
Insurance Fee 
PackagingHandlingCosts 
ShipFromZipCode 
ShippingFee 
Purpose 
Insurance fees associated with shipping the item(s). 
Calculated from the value in the Price Sold argument. If 
no PriceSold is specified, InsuranceFee returns zero. 
Seller packaging or handling fees. 
Zip code from which the seller is shipping the item. 
Shipping costs for the item. (Doesn't include any seller 
packaging or handling fees.) 
253 

Chapter9 
254 
Table 9-25. Tags Returned by GetltemShipping (continued) 
Tag 
Shippingirregular 
ShippingPackage 
ShippingRate 
ErrorMessage 
ShippingService 
ShippingType 
WeightMajor 
WeightMinor 
Purpose 
When 1, item can't go through the stamping machine at 
a post office. 
The size of the package to be shipped. Possible values are 
o:None 
1: Letter 
2: Large envelope 
3: USPS flat-rate envelope 
4: Package/thick envelope 
5: USPS large package/oversize 1 
6: Very large package/ oversize 2 
7: UPS letter 
Tag contain any error message associated with the 
attempt to calculate shipping rates. If there was no error, 
returns No Error. 
Shipping carrier for the item. Valid values are 
3: UPS Ground 
4: UPS 3rd Day 
5: UPS 2nd Day 
6: UPS Next Day 
7: USPS Priority 
8: USPS Parcel 
9: USPS Media 
10: USPS First Class 
11: USPS Express Mail 
Indicator of whether shipping costs are flat rates or 
calculated rates. Possible values are 
1: Flat shipping rate 
2: Calculated shipping rate 
Weight of the item(s): Number of units for shipping 
weight unit of measure specified by WeightUni t. 
Weight of the item(s): Fractional number of units for 
shipping weight unit of measure, either pounds or 
fractions of a kilogram, depending on WeightUnit. 

Using the eBay API Within a Web Site 
Table 9-25. Tags Returned by GetltemShipping (continued) 
Tag 
WeightUnit 
Purpose 
Unit of measure for shipping weight. Default value is 1. 
Valid values are 
1: WeightMajor specifies pounds, WeightMinor specifies 
ounces 
2: WeightMajor specifies kilograms, WeightMinor specifies 
fractions of a kilogram 
The GetitemTransactions Interface 
The GetitemTransactions interface returns information about an item that has 
been purchased. A transaction isn't an auction; rather, it's a summary of the 
money that changes hands once an auction is complete. The interface is paged; 
in addition to specifying the item ID or the time interval for which transactions 
are of interest, you must also specify the page number and number of transac-
tions per page that should be returned. Table 9-26 summarizes the arguments to 
GetitemTransactions. 
Table 9-26. Arguments to the Get/tern Transactions API 
Tag 
Itemid 
LastModifiedFrom 
lastModifiedTo 
TransactionsPerPage 
Purpose 
Unique ID of item that you are retrieving transactions for. 
Use the LastModifiedFrom and LastModifiedTo filters to 
return transactions that were last modified between the 
specified date and time. The date range can't be greater 
than 30 days. 
Use the LastModifiedFrom and LastModifiedTo filters to 
return transactions that were last modified between the 
specified date and time. The date range can't be greater 
than 30 days. 
Maximum number of transactions to return per call to 
GetitemTransactions. Default is 100, maximum is 200. 
Pagination for GetitemTransactions is the same as for 
GetSellerTransactions. 
255 

Chapter9 
256 
Table 9-26. Arguments to the GetltemTransactions API (continued) 
Tag 
PageNumber 
Transactionid 
Purpose 
Number of the virtual page to return in using the current 
call to GetitemTransactions. Pagination for 
GetitemTransactions is the same as for 
GetSellerTransactions. 
Unique ID for a transaction. Use to return data for a single 
transaction. If you specify the Transactionid argument to 
retrieve only a single transaction, then you don't need to 
use pagination. 
The return tags in the XML generated by eBay are the same as the tags 
returned by the GetSellerTransactions interface. See Table 9-12 for a summary of 
these tags. 
The GetSearchResults Interface 
GetSearchResults provides a paged interface to search for items matching arbi-
trary criteria on eBay. The interface provides a Boolean AND search mechanism 
across the arguments you specify in your query, letting you refine your query by 
keywords in item descriptions, category, low and high prices, region, and sellers. 
Table 9-27 describes the arguments you may pass to GetSearchResul ts. 
Table 9-27. Tags Passed to GetSearchResults 
Tag 
Active 
Category 
Charitylisting 
Currency 
Exclude Sellers 
HighestPrice 
Purpose 
If 1, limits the result set to active listings. If o, limits the result 
set to listings that have ended. 
Numeric ID of the category to be searched. Defaults to all 
categories if 0 is specified or the tag isn't present. 
If 1, limits the results to Giving Works listings and no other 
listings. If o, has no effect on the search results. 
Numeric ID for a currency type. 
Tag excludes the specified sellers from the search. Use either 
a seller's user ID or e-mail address. Separate multiple sellers 
with a comma. A maximum of 100 sellers can be listed. 
Highest price in the Current Price field that any item returned 
by the search results should have. 

Using the eBay API Within a Web Site 
Table 9-27. Tags Passed to GetSearchResults (continued) 
Tag 
IncludeSellers 
ItemTypeFilter 
Purpose 
Tag restricts search to the sellers specified. Use either a seller's 
user ID or e-mail address. Separate multiple sellers with 
a comma. A maximum of 100 sellers can be listed. Can't be 
used with ExcludeSellers and PayPal arguments. StoreSearch 
overrides IncludeSellers. 
Tag filters items returned by the type of listing. Valid values are 
1: Auction items only 
2: Fixed-price items (both fixed-price and Buy It Now) 
3: All items 
LowestPrice 
Lowest price in the Current Price field that any item returned 
by the Search results should have. 
MaxResul ts 
Maximum number of items matching search criteria to return. 
Maximum value is 100; default value is 100. Use Skip to specify 
the number of items to skip when building the result set. Use 
MaxResul ts and Skip together to paginate your results set. 
Modifier 
Tag used with Modi fierCode argument. Restricts items returned 
based on country availability. 
Modi fierCode 
Country code to specify which country you want to limit the 
results to. 
Order 
Specifies the sort order of the returned list of items. 
PayPal 
When 1 (true), items returned are restricted to only those for 
which PayPal is accepted as a buyer payment option. Default is 
o (false). 
Query 
Search string, which consists of one or more keywords to 
search for in the listing title and/ or description. Embed the 
search string in a CDATA construct. 
Region 
Numeric ID for a region. Limits the search to items listed in 
a specified region. 
SearchinDescription If true (1), item titles, subtitles, and descriptions are searched 
for the string specified in Query. Defaults to false (O) to search 
the title only. 
Search Type 
Tag restricts items returned to, selectively, only gallery items or 
gallery and nongallery items. Valid values are 
o: Search for gallery and nongallery items 
1: Search for gallery items only and display a preview 
(thumbnail) image of gallery picture 
2: Sameaso 
257 

Chapter9 
258 
Table 9-27. Tags Passed to GetSearchResults (continued) 
Tag 
SiteidFilterType 
Skip 
StoreiD 
StoreName 
StoreSearch 
Purpose 
Tag that allows a user to filter the category listings by SiteiD. 
Limits items returned to 
1: Items listed in the currency implied by Si teiD 
2: Items located in the country implied by Si teiD 
3: Items available to the country implied by SiteiD 
4: Items listed on the site implied by Si teiD, regardless of 
listing currency 
s: (Belgium site only) Items located in Belgium or listed on one 
of the two Belgian sites 
Number of items to skip over (counting from the first) in 
paginating results. 
Tag restricts the search to the specified store. Used only in the 
test environment. 
Tag restricts the search to the specified Store. Used only in the 
production environment. You must specify a value in 
StoreName in the production environment if StoreSearch = o, 1, 
or 2. Pass the value using the CDATA modifier. The StoreName 
argument is case sensitive. 
Tag restricts the search to items that are listed in eBay stores: 
o: Within a single store for all items (use with StoreName) 
1: Within a single store for auction items (use with StoreName) 
2: Within a single store for Buy It Now items (use with 
StoreName) 
3: Across all stores for Buy It Now items 
The XML eBay returns contains an Items node, which contains an Item node 
for each returned item. (The tags in the Item node are described previously in 
this chapter in Table 9-23.) In addition, the returned XML contains the 
HasMoreitems tag, which indicates if more items are available, and the Count and 
GrandTotal entities, which return the number of items in the response and the 
total number of items matching the request, respectively. 

Using the eBay API Within a Web Site 
WARNING 
When collecting new listings that match the search criteria, the 
application should limit request frequency to once every 30 minutes. By speci-
fying a value ofMetaNewSort for the Order argument, the listings are sorted by 
listing date in descending order of time, and the application should make 
only as many requests as needed to return newly listed items. A newly listed 
item, in this case, is an item that was listed after the time of the previous calL 
Also, don't use GetSearchResul ts to track current bid prices. Most users are 
interested in only tracking a small subset of the items that are returned by 
a search query. Instead, use Getitem to track price changes for the items that 
a user selects to track. Failure to follow these guidelines may result in your 
application not receiving eBay certification. 
The GetSellerList Interface 
The GetSellerList interface returns a list of the items listed by a specific eBay 
user. Like other interfaces that can return a large number of items, GetSellerlist 
paginates its results; be prepared to determine the total number of items and 
request the data in pages from eBay. Using the interface, you can filter by the 
start time or end time of auctions. The arguments to the call are similar to those 
for GetSellerEvents: 
â¢ Specify the Userid field to indicate for which user to list items. 
â¢ Specify PageNumber to indicate what page of the results should be 
returned, and ItemsPerPage to indicate how many items should be 
returned on a page. 
â¢ Select whether to search based on auction start or end time by setting the 
StartTimeFrom and StartTimeTo arguments to the desired auction start time 
to search, or the EndTimeFrom and EndTimeTo arguments to the desired auc-
tion end time. 
The return values are the same as for GetSearchResul ts; see Table 9-23 for 
a summary of the tags returned by eBay in the Item nodes of the result. Note that 
in some cases, you may not be able to get all of the data you need; should this hap-
pen, consider lowering the detail level of your request to return fewer item fields. 
WARNING 
Only use the GetSellerList call if you can't use the 
GetSellerEvents call. An example of an exception to this would be when you 
import a seller's items to your local application for the first time. Failure to do 
this may result in your application not receiving eBay certification. 
259 

Chapter9 
260 
The Relistitem Interface 
Relistitem lets you relist an item that didn't sell at a previous auction. To relist an 
item, you must pass its original item ID in the Itemid argument, and any other 
arguments for listing the item as you would when you call Add Item. (Refer to 
Table 9-18 for a summary of the arguments you can pass to Additem.) 
Relisting an item returns the newly created item's ID and the fees applicable 
for listing the item. The returned XML follows the same scheme as for Add Item; 
see Table 9-19 for a summary of returned tags. 
WARNING 
The same guidelines for Add Item also hold true for Relist Item; 
don't call Veri fyAdditem to relist items in bulk, and use the UUID field to deter-
mine ifRelistitem succeeds if you receive no response. 
The ReviseCheckoutStatus Interface 
The ReviseCheckoutStatus interface lets you change the status of an item after its 
buyer has finished the checkout process. Your application may invoke this inter-
face to note that the buyer didn't remit payment correctly. The arguments you 
pass must include the item's ID and the transaction ID for the item. Table 9-28 
shows the other arguments you may pass to ReviseCheckoutStatus. 
Table 9-28. Tags Passed to ReviseCheckoutStatus 
Tag 
Itemid 
Transactionid 
Orderid 
Amount Paid 
Statusis 
Purpose 
Unique ID for the item associated with the checkout. 
Unique ID for the transaction associated with the checkout. 
For Chinese auctions, the value passed in the Transactionid 
argument must be 0, or the call will fail with an error. For all 
other auction types, the Transactionid argument accepts the 
actual, nonzero transaction ID. 
Unique ID for a multi-item order. If specified, Itemid and 
Transactionid are ignored in the same call. Changes to the 
checkout status are applied to the specified order as a whole. 
Amount the buyer paid for the item specified in Itemid. 
Indicator of whether the checkout process has been 
completed. Valid values are 
1: Incomplete 
2: Complete 

Using the eBay API Within a Web Site 
Table 9-28. Tags Passed to ReviseCheckoutStatus (continued) 
Tag 
PaymentMethodUsed 
SendEmailToBuyer 
MessageToBuyer 
Purpose 
Payment method used by the buyer. Default is o. Valid values 
are 
o: No payment method specified 
3: Money order/cashier's check 
4: Personal check 
S:COD 
6: Visa or MasterCard 
7: Other (or see item description) 
9: Cash on pickup 
Indicator of whether seller is sending an e-mail containing 
a personalized message about the transaction to the buyer. If 
SendEmailToBuyer is 1, the seller must specify a message to 
the buyer in the MessageToBuyer tag. 
Message seller is sending to the buyer. 
The XML eBay returns includes a Status tag, which contains either Success 
or Failure to indicate whether the request succeeded or failed. 
Using the eBay API Within a Web Site 
This chapter's example demonstrates how to use the eBay API within a simple 
Web site that lets you search eBay for items at auction by keywords in the item 
title and description. Although simplistic (there's little business reason why such 
a simple site would likely garner enough users to be profitable from a business 
perspective), it demonstrates several key points about the eBay API and Web 
integration of the API with your site, including 
â¢ Displaying and caching the URL for the eBay Marketplace Logo that your 
application must show 
â¢ Paging an interface such as GetSearchResul ts 
â¢ Managing error handling within your Web-based application 
The interface is very simple. In the entry page, you simply enter your eBay 
account name and password, along with the keywords for the item search to 
perform. Then you click the button labeled Submit Query, and the server per-
forms as many GetSearchResul ts requests as are required to obtain the full list of 
items for auction matching your search, and presents the results. 
261 

Chapter9 
262 
The sample code is written in Perl using the Perl module CGI.pm, which 
provides a flexible interface to the Common Gateway Interface (CGI) used 
between Web servers and the scripts they execute. The underlying implementa-
tion has a few additional requirements that keep the code simple too. 
â¢ When debugging the scripts, you can use the Data::Dumper Perl module 
to dump the contents of arrays and hashes using print. 
â¢ The underlying code that executes eBay API calls uses the 
LWP::UserAgent, HTTP::Headers, and HTTP::Request modules to perform 
the Web requests of eBay, just as the example in the last chapter does. 
â¢ The relatively complex XML returned by eBay when invoking 
GetSearchResul ts requires some heavy lifting; I chose to use XML::Smart to 
parse the resulting XML because it has nice facilities for obtaining multi-
ple nodes with the same name (see the section "Obtaining a Ust of Items 
Matching the Search Criteria'' later in the chapter for details.) 
The resulting code is very portable; I've successfully run it on both Microsoft 
Windows platforms and UNIX with no difficulty. If you need to obtain one of the 
modules I name here, the easiest way to do so is with ppm, the Perl Package 
Manager, or by visiting http: I !WNW. cpan. org, the Comprehensive Perl Archive 
Network site. 
TIP 
In a production environment, it makes more sense to use the Apache 
mod_perl module to execute code like this, because with mod_perl, you don't 
have the overhead of bringing up the Perl interpreter for every request. 
However, the relative complexity of having you install mod_perl if you don't 
already have it just to run one sample application makes little sense. Instead, 
for simplicity, these scripts use the CGI interface and will work with any Web 
server that supports CGL such as the Apache Web Server or Microsoft Internet 
Information Services. 
Obtaining the Search Parameters 
The first page of the Web site is a simple HTML form, which you see in 
Usting9-l. 
Listing 9-1. The Search Parameter Form 
1: <html> 
2: <head> 
3: <t itle>eBay Search</title> 

4: </head> 
5: <body> 
6: <h1><img src="logo.pl">eBay 5earch</h1> 
7: <p> 
8: This page uses the eBay API with Perl to search 
9: the eBay service for items currently up for auction 
10: with key words you specify in the item's title 
11: or description. 
12: <lp> 
13: <p> 
14: <form method="POST" action="getsearchresult.pl"> 
15: <table> 
16: 
<tr> 
17: 
<td> 
18: 
Your eBay User Id: 
19: 
<ltd> 
20: 
<td> 
21: 
<input type="TEXT" name="userid"> 
22: 
<ltd> 
23: 
</tr> 
24: 
<tr> 
25: 
<td> 
26: 
Your eBay Password: 
27: 
<ltd> 
28: 
<td> 
29: 
<input type="PASSWORD" name="password"> 
30: 
<ltd> 
31: 
</tr> 
32: 
<tr> 
33: 
<td> 
34: 
Find items with the following words in their 
35: 
title or description. 
36: 
<ltd> 
37: 
<td> 
38: 
<textarea name="querydata">shoes</textarea> 
39: 
<ltd> 
40: 
</tr> 
41: </table> 
42: 
43: <input type="submit"> 
44: <!form> 
45: <lp> 
46: 
47: <hrl> 
Using the eBay API Within a Web Site 
263 

Chapter9 
264 
48: <p> 
49: This web page is part of the book 
so: <i>Developing Applications with eBay</i> 
51: written by Ray Rischpater and available 
52: from <a href="http://www.apress.com">Apress, L.P.</a> 
53: <lp> 
54: </body> 
55: </html> 
The HTML for this form is very simple, consisting of a header (line 6), a form 
you fill out (lines 13-45), and an obligatory credit message on lines 48-55. 
The form on lines 13-45 are at the heart of the application. This form has 
three fields and a Submit button. The fields for eBay authentication (your eBay 
account name and password, on lines 21 and 29, respectively) are simple input 
elements, the first a text input, and the second a password input (to obscure the 
password that you enter). The third element, a textarea, accepts the space-
delimited keywords for your search. Named userid, password, and querydata 
respectively, the Web browser gathers the values you enter and submits them 
via a HTTP POST request when you press the Submit Query button (defined on 
line 43). 
The image at the top of the query page deserves special note: It's the eBay 
logo provided by the eBay API GetlogoUrl. This URL is captured using a simple 
script, updatelogo. pl, which I show you later in this chapter in the section 
"Looking Behind the Scenes: Periodic Maintenance Tasks." For now, it's enough 
to know that this script creates the file logo. pl, which contains the lines you see 
in Listing 9-2. 
Listing 9-2. The logo.pl Script 
1: use CGI; 
2: $query = new CGI; 
3: print $query->redirect("https: I /scgi.sandbox.ebay .com/saw/pies/ 
api/ebay_market_108x44.gif"); #wrapped from previous line 
This script simply sends a redirection Location HTTP header when it's exe-
cuted, telling the Web browser to load the content from the indicated URL 
instead of from logo.pl directly. 
Obtaining a List of Items Matching the Search Criteria 
Obtaining the items that match your search request is the responsibility of the 
getsearchresults.pl script, aided by the module CallEBayAPI.pm, which I wrote 

Using the eBay API Within a Web Site 
for this example and which you can modify and use in your own Perl applica-
tions.listing 9-3 shows getsearchresults.pl. 
Listing 9-3. Getting Search Results with getsearchresults.pl 
1: use CallEBayAPI; 
2: use Data::Dumper; 
3: use CGI qw(:standard); 
4: use strict; 
5: 
6: 
7: # Get the arguments for the search. 
8: my $query = new CGI; 
9: my $userid = param( "userid" ); 
10: my $password = param( "password" ); 
11: my $querydata = param( "querydata" ) ; 
12: 
13: 
14: #my $userid = "sandy2718"; 
15: #my $password ="ebaytest"; 
16: #my $querydata = "phone"; 
17: 
18: 
19: # Create the eBay interface. 
20: my $eBayinterface = CallEBayAPI->new; 
21: 
22: # Output the header first 
23: print header(); 
24: print start_ html ( "eBay Search Results"); 
25: print h1( "<img src=\"logo.pl\">eBay Search Results"); 
26: 
27: # Now perform the request. 
28: my $skip = o; 
29: my $done = o; 
30: my $request; 
31: my $response; 
32: 
33: 
34: while( !$done ) 
35: { 
36: 
$request = $eBayinterface->newRequest( { 
37: 
Verb=> 'GetSearchResults', 
38: 
Detaillevel => 'o', 
39: 
RequestUserid => $userid, 
265 

Chapter9 
40: 
41: 
42: 
43: 
44: 
45: 
46: 
47: 
48: 
49: 
so: 
51: 
52: 
53: 
54: 
ss: 
56: 
57: 
58: 
59: 
60: 
61: 
62: 
63: 
64: 
65: 
66: 
67: 
68: 
69: 
70: 
71: 
72: 
73: 
74: 
75: 
76: 
77: 
78: 
79: 
80: 
81: 
82: 
266 
RequestPassword => $password, 
Active => '1', 
SearchinDescription => '1', 
ItemTypeFilter => '3', 
Order=> 'MetaEndSort', 
Query => $querydata, 
MaxResults => '3', 
SiteidFilterType => '2', 
Skip => $skip } ); 
$response = $eBayinterface->request( $request ); 
if ( $response->{eBay}->{Errors}->{Error}->{LongMessage} ) 
{ 
} 
if ( $skip > o ) 
{ 
} 
# End the table first. 
print "</table>\n"; 
my $error = $response->{eBay}->{Errors}->{Error}; 
print p("An error occurred. The eBay service returned: " 
i( blockquote( $error->{LongMessage} ) ) ); 
last; 
# If we are just starting, print the total number of items. 
if ( $skip == o && 
$response->{eBay}->{Search}->{GrandTotal} == o 
{ 
print p( "No items matched your query." ); 
} 
if ( $skip == o && 
$response->{eBay}->{Search}->{GrandTotal} != o ) 
{ 
print p( "There were " â¢ 
"$response->{eBay}->{Search}->{GrandTotal} " 
"items matching your query."), "\n"; 
print "<table>\n"; 
print "<tr>"; 
print td( "Item #" ); 
print td( "Title" ); 
print td( "Number of Bids" ); 
print td( "Current Price" ); 

Using the eBay API Within a Web Site 
83: 
84: 
85: 
86: 
87: 
88: 
89: 
90: 
91: 
92: 
93: 
94: 
95: 
96: 
97: 
98: 
99: 
100: 
101: 
102: 
103: 
104: 
105: 
106: 
107: 
108: 
109: 
110: 
111: 
112: 
113: 
114: } 
115: 
116: 
} 
print td( "Start Time" ); 
print td( "End Time" ); 
print "</tr>\n"; 
# Print the table row for each item returned. 
my @items = @{$response->{eBay}->{Search}->{Items}->{Item}}; 
foreach my $item (@items) 
{ 
} 
if ( $item->{Id} ) 
{ 
} 
print "<tr>"; 
print td( "<a href=\"$item->{Link}\" target=\"_new\">" â¢ 
$item->{Id} . "<Ia>" ); 
print td( $item->{Title} ); 
print td( $item->{BidCount} ); 
print td( "\$" . $item->{CurrentPrice} ); 
print td( $item->{StartTime} ); 
print td( $item->{EndTime} ); 
print "</tr>\n"; 
$i++; 
$skip += $response->{eBay}->{Search}->{Count}; 
# and if we're done, exit the loop 
$done = !$response->{eBay}->{Search}->{HasMoreltems}; 
if ( $done ) 
{ 
print "</table>"; 
} 
117: # Output a note about the app. 
118: print hr(); 
119: print p( "This web page is part of the book " 
120: 
121: 
122: 
123: 
i("Developing Applications with eBay"), 
"written by Ray Rischpater and available " 
"from ", 
"<a href=\"http://www.apress.com\">Apress, L.P.</a>" ); 
124: # Close the HTML tags and end the document. 
125: print end_html(); 
267 

Chapter9 
268 
After importing the CallEBayAPI.pm, Data::Dumper, and CGI.pm modules 
on lines 1-3, the script next gets the values of the form elements userid, 
password, and querydata using the CGI.pm module's param function, which col-
lects their values from the data you sent when you submitted the form. (lines 
14-16, ifuncommented, provide defaults you can use for stand-alone testing.) 
line 20 creates an instance of the CallEBayAPI.pm module, which encapsu-
lates making eBay API calls and managing application keys. 
Lines 23-25 send the first bits of HTML to the device: the initial title, page 
heading, and eBay logo. As you can see, the code makes extensive use of the 
CGI. pm module's support for generating well-formed HTML. 
The while loop on lines 24-114 perform the bulk of the work in this script. This 
loop is responsible for querying eBay for search results as many times as neces-
sary, satisfying the paged interface provided by GetSearchResu1 ts, and formatting 
the results as items in an HTML table. In addition, the loop also has provisions for 
printing error messages in the event that no items are found, or in case the eBay 
queries fail. This loop executes as long as no error occurs and the current search 
can return more eBay items. Let's take the loop a segment at a time. 
Line 36 creates a new request object using the eBay interface returned by the 
new method of the CallEBayAPI.pm module. This request is actually just the XML 
document describing the request, created using the hash you pass to newRequest. 
The fields defined on lines 37-49 are those required for the GetSearchResults 
function, as described here: 
â¢ The Verb field indicates the name of the eBay API call to execute, 
GetSearchResu1ts. 
â¢ The Detailleve1 field indicates the detail level for this request, which is o. 
The GetSearchResu1 ts call only takes a detail level of o. 
â¢ The RequestUserld field indicates the eBay user account to use with the 
request. 
â¢ The Request Password field indicates the password for the named eBay 
account. 
â¢ The Active field indicates that the eBay service should only return items 
currently at auction. 
â¢ The SearchlnDescription field indicates that the eBay service should search 
both item titles and item descriptions. 
â¢ The ItemTypeFil ter field indicates that the eBay service should return all 
items including both those at auction and with fixed prices. 

Using the eBay API Within a Web Site 
â¢ The Order field indicates that the eBay service should sort the results by 
the auction end time. 
â¢ The Query field contains the text you entered in the search form. 
â¢ The MaxResul ts field indicates how many results should be returned per 
request page. For this example, I set this value artificially low to ensure 
that the script's management of eBay's result pages works correctly; 
a more realistic value might be so or even 100 (the default). 
â¢ The SiteidFilterType field indicates that results should be returned only 
for the Site!d indicated in the request (the United States). 
â¢ The Skip field indicates how many results should be skipped when gener-
ating the result document; this lets the script obtain successive pages of 
the result set. 
line 50 makes the API call, sending the XML the script just created to eBay 
and collecting the response and parsing its XML into a hash. 
lines 52-63 handle any errors returned by the eBay service or the 
CallEBayAPI.pm module by first ending the table if it's already opened (lines 
54-58), printing the error string in a paragraph (lines 59-61), and then exiting 
the while loop with Perl's last statement on line 62. (The last statement is analo-
gous to C#'s break statement.) The $skip counter does double duty here: If it's o, 
this is the first time through the loop, and it shows that you haven't started the 
HTML table yet. Later in the loop the code increments the counter by the num-
ber of items returned, and it gets passed back to the eBay service to indicate the 
number of items that should be skipped in subsequent requests. 
lines 65-86 print the table head if it's the first pass through the loop: first 
printing the number of items found (lines 66-76), a table head (line 77), and 
then a first row labeling each column of the table (lines 78-85). 
lines 90-106 iterate across each of the returned items, printing a single 
item's information on each row of the table. Line 90 itself shows a slick feature: 
XML::Smart: nodes in the parsed XML tree are available as both hashes and 
arrays; evaluating the node $response->{eBay}->{Search}->{Items}->{Item} 
(which corresponds to the <Item> tags contained within the <Items> node of the 
<Search> node of the <eBay> result) in array context returns an array of all <Item> 
tags as Perl hashes. With this array, fetching each item is as easy as using foreach 
and building the HTML by hand, enclosing the whole thing in a table row <tr> 
tag (line 95, line 103), and generating table columns for the item ID (which links 
to the eBay page describing the item on lines 96-97), item title (line 98), bid 
count (line 99), current price (line 100), auction start time (line 101), and the 
auction end time (line 102). 
269 

Chapter9 
270 
Line 107 increments the variable $skip by the number of items just 
processed, so that when making another request, the script doesn't fetch the 
same items. Line 109 determines whether or not to continue making requests of 
eBay by using the return parameter HasMoreitems of the GetSearchResul ts API, 
which is 1 when more items are available, and o when no more items can be 
returned. 
After the loop finishes, lines 118-123 print the closing message on the page, 
attributing the content to the book you're reading. Finally, line 125 closes the 
HTML with the help of the CGI.pm module. 
The implementation you see in Listing 9-3 is all well and good, but relies on 
the CallEBayAPI.pm module to do its dirty work. Listing 9-4 shows you the 
CallEBayAPI.pm module. 
Listing 9-4. The CallEBayAPI.pm Module 
1: package CallEBayAPI; 
2: 
3: # Dependencies 
4: use LWP::UserAgent; 
5: use HTTP::Request; 
6: use HTTP::Headers; 
7: use XML: :Smart; 
8: use Data::Dumper; 
9: 
10: use strict; 
11: 
12: # Constants 
13: use constant True => 1; 
14: use constant False => o; 
15: use constant COMPATIBILITY_LEVEL => 335 
16: use constant EBAY_API_URL => 
17: 
'https://api.sandbox.ebay.com/ws/api.dll'; 
18: use constant DEBUG => o; 
19: use constant SITE_ID => 'o'; 
20: 
21: # Module variables 
22: my $_xmlRequest = '<?xml version="l.O"?><requesb' 
23: 
'<Errorlevel>1</ErrorLevel><Siteid>O</Siteid>'; 
24: my $_xmlError = 
'<?xml version="1.0""?>' 
25: 
'<eBay><Errors><Error><Code>O</Code>' â¢ 
26: 
'<ErrorClass>NetworkError</ErrorClass>' 
27: 
'<5everityCode>1</SeverityCode>' â¢ 
28: 
'<Severity>SeriousError</Severity>' 
29: 
'<ShortMessage>' â¢ 

30: 
'Could not connect to eBay. ' â¢ 
31: 
'</ShortMessage><LongMessage>' â¢ 
32: 
'Could not connect to eBay. ' â¢ 
33: 
'There was a problem with the client or the ' 
34: 
'network.' . 
35: 
'</LongMessage></Error></Errors></eBay>'; 
36: 
37: sub new 
38: { 
39: 
my ($class) = @_; 
40: 
41: 
42: 
43: 
44: 
45: 
46: 
47: 
48: 
49: } 
so: 
my $self = bless 
{ 
useragent => LWP::UserAgent->new, 
} , $class; 
$self->getKeys; 
return $self; 
51: sub newRequest 
52: { 
53: 
my $self = shift; 
54: 
my $ref = shift; 
55: 
my $result = $_xmlRequest; 
56: 
57: 
foreach my $key (keys(%$ref)) 
58: 
{ 
59: 
$result .= "" â¢ $ref->{$key} â¢ "</$key>"; 
60: 
} 
61: 
$result .= "</request>"; 
62: 
63: 
return $result; 
64: } 
65: 
66: sub request 
67: { 
68: 
my $self = shift; 
69: 
my $requestXML = shift; 
70: 
my $header= HTTP::Headers->new; 
71: 
my $requestHash = XML::Smart->new( $requestXML ); 
72: 
73: 
print "CallEBayAPI request\n" if DEBUG; 
Using the eBay API Within a Web Site 
271 

Chapter9 
272 
74: 
print $requestXML, "\n" if DEBUG; 
75: 
76: 
$header->push_header( 'X-EBAY-API-COMPATIBILITY-LEVEL' => 
77: 
COMPATIBILITY_LEVEL ); 
78: 
$header->push_header( 'X-EBAY-API-SESSION-CERTIFICATE' => 
79: 
"$self->{devkey};$self->{appkey};$self->{crtkey}"); 
80: 
$header->push_header( 'X-EBAY-API-DEV-NAME' => 
81: 
$self->{devkey} ); 
82: 
$header->push_header( 'X-EBAY-API-APP-NAME' => 
83: 
$self->{appkey} ); 
84: 
$header->push_header( 'X-EBAY-API-CERT-NAME' => 
85: 
$self->{crtkey} ); 
86: 
$header->push_header( 'X-EBAY-API-CALL-NAME' => 
87: 
"$requestHash->{request}{Verb}" ); 
88: 
$header->push_header( 'X-EBAY-API-SITEID' => 
89: 
SITE_ID ); 
90: 
$header->push_header( 'X-EBAY-API-DETAIL-LEVEL' => 
91: 
"$requestHash->{request}{Detaillevel}" ) ; 
92: 
$header->push_header( 'Content-Type' => 
93: 
'text/xml' ); 
94: 
$header->push_header( 'Content-Length' => 
95: 
length( $requestXML ) ); 
96: 
97: 
# Make the request. 
98: 
my $request= HTTP::Request->new( "POST", 
99: 
EBAY_API_URL, 
100: 
$header, 
101: 
$requestXML ); 
102: 
my $response = $self->{useragent}->request( $request ); 
103: 
104: 
print "NETWORK ERROR\n" if DEBUG && $response->is_error; 
105: 
return ( XML::Smart->new( $_xmlError) ) 
106: 
if $response->is_error; 
107: 
108: 
print $response->content() if DEBUG; 
109: 
return XML::Smart->new( $response->content() ); 
110: } 
111: 
112: 
113: sub testWithGetlogoUrl 
114: { 
115: 
my $self = shift; 
116: 
my $user = shift; 
117: 
my $password = shift; 

Using the eBay API Within a Web Site 
118: 
119: 
return $self->getlogoUrl( $user, $password ); 
120: } 
121: 
122: sub getlogoUrl 
123: { 
124: 
my $self = shift; 
125: 
my $user = shift; 
126: 
my $password = shift; 
127: 
my $eBayRequest = $self->newRequest( 
128: 
{ 
129: 
Verb=> 'GetlogoUrl', 
130: 
Size => 'Small' , 
131: 
RequestUserid => $user, 
132: 
RequestPassword => $password } ); 
133: 
# Issue the request. 
134: 
my $eBayResponse = $self->request( $eBayRequest ); 
135: 
136: 
my $url = $eBayResponse->{eBay}{Logo}{URL}; 
137: 
138: 
return $url; 
139: } 
140: 
141: sub getKeys 
142: { 
143: 
my $self = shift; 
144: 
my $ttyinput; 
145: 
my $input; 
146: 
my $devid; 
147: 
my $appid; 
148: 
my $crtid; 
149: 
150: 
# Try to open the file. 
151: 
open( IDS, "c:\\Documents and Settings\\All Users\\ebayrc" 
152: 
or die "No keys available."; 
153: 
154: 
# Read them from the file. 
155: 
# The file should have the keys in the order 
156: 
# developer ID 
157: 
# application ID 
158: 
# certificate ID. 
159: 
my $line = o; 
160: 
while ( <IDS> ) 
161: 
{ 
273 

Chapter9 
274 
162: 
chomp( $_ ); 
163: 
$devid = $_ if $line == o; 
164: 
$appid = $_ if $line == 1; 
165: 
$crtid = $_ if $line == 2; 
166: 
$line++; 
167: 
} 
168: 
169: 
# Return a list with the keys. 
170: 
$self->{devkey} = $devid; 
171: 
$self->{appkey} = $appid; 
172: 
$self->{crtkey} = $crtid; 
173: 
174: 
return ( $devid, $appid, $crtid ); 
175: } 
176: 
177: 1; 
As you see when skimming this listing, it's really just a glorified abstraction of 
the ValidateTestUser example you encountered in the previous chapter. Lines 4-8 
outline the dependencies this module has on other Perl modules: LWP::UserAgent, 
HTTP::Request, and HTTP::Headers for making queries of the eBay service, 
XML::Smart for XML parsing, and Data::Dumper for debugging. Lines 13-19 
define a number of constants used by the module, or that you can use in your 
application. Lines 22-35 define XML templates for the beginning of a valid 
request and a canned error message in the event of a network failure; these are 
broken into multiple lines in the listing here to fit the printed page. 
The module's constructor, new, spans lines 37-49, and does two things. First, 
on lines 41-44, it creates a new Perl object by blessing the hash containing a new 
LWP::UserAgent module instance. Next, on line 46, it loads your eBay keys from 
disk using its get Keys function, which is defined later in the module. Finally, it 
returns the new class instance on line 48. 
The newRequest method on lines 51-61 is a rather simpleminded hash-to-
XML converter; I chose to show you one I wrote from scratch after experimenting 
with the output from XML::Simple and XML::Smart, preferring the hand-rolled 
XML over what these modules automatically generate. The code's simple: On line 
55 the result is seeded first with the XML preamble 
1: <?xml version="l. o" ?><request> 
and then the loop on lines 57-60 builds up the XML tag by tag from the incom-
ing hash, terminating the XML on line 61 with a closing </request> tag. The 
resulting XML is returned on line 63 to the caller as a new request item. 
Actually making the request is the purview of the request method, on lines 
66-110: This was copied nearly verbatim from the Va1idateUser example in the 
last chapter, so I'll only point out the differences. Most important, this code 

Using the eBay API Within a Web Site 
must determine both the X-EBAY-API-CALL-NAME and the X-EBAY-API-DETAIL-LEVEL 
headers from the request; the code does this by parsing the XML in the request 
and using the resulting hash to obtain the necessary values. Lines 98-102 make 
the request, first by creating a new POST request and then actually issuing the 
request. In the event of a network error between this host and eBay, lines 
105-106 return a hash based on the error XML defined on lines 24-35, making it 
easy for clients to handle both network errors and errors from the eBay service. 
The testWithGetlogoURL method on lines 113-120 is a rather simpleminded 
unit test that you use in a separate Perl script to make sure that the basic flow of 
the CallEBayAPI.pm module is working correctly. It uses the getlogoUrl method 
on lines 122-139, which makes one eBay API call all applications have to make, 
returning the eBay logo URL. 
The GetKeys method on lines 141-175loads the keys from a default configu-
ration file; this code is lifted directly from the eBaySampleApplication Perl 
module I discuss in the Appendix. 
Looking Behind the Scenes: Periodic Maintenance Tasks 
Besides the usual requirements of running a Web server-network maintenance, 
periodic backups, and such-running a site that uses the eBay service has addi-
tional demands. All sites should cache the logo URL or the eBay Marketplace as 
provided by the eBay API, and more complex applications will need to cache and 
regularly update data such as category data. 
The example in this chapter needs the small eBay logo to display on both 
the search and results pages. To get this logo, the script updatelogo.pl, shown in 
Listing 9-5, must be called periodically (once per day is ideal) to update the file 
logo.pl, which you saw in the section "Obtaining the Search Parameters" previ-
ously in this chapter. 
Listing 9-5. The updatelogo.pl Script 
1: use CallEBayAPI; 
2: use strict; 
3: 
4: my $filename = "logo.pl"; 
5: 
6: my $eBayinterface = CallEBayAPI->new; 
7: # login, password variables in the following call 
8: my $url = $eBayinterface->getLogoUrl( $user, $pass ); 
9: exit if !$url; 
10: open FILE, ">$filename"; 
11: print FILE "use CGI;\n"; 
12: print FILE "\$query = new CGI;\n"; 
13: print FILE "print \$query->redirect(\"$url\");\n"; 
14: close FILE; 
275 

Chapter9 
276 
The script simply creates a new CallEBayAPI.pm module instance (line 6) 
and uses it to fetch the logo URL using a developer's account and password (here 
represented using the $user and $pass variables). Once it's obtained the URL, it 
writes the result to the file logo.pl on lines 10-14 if the returned value $url con-
tained any data. 
This script is sufficient for use with a cron job, or you can invoke it from 
getsearchresults. pl by first checking the last modified time of the file logo. pl 
when getsearchresult. pl first starts. 
TIP A production application would probably be better off obtaining the 
image at the GetlogoUrllccation and caching the image, rather than just 
redirecting the client's Web browser to the URL returned by GetlogoUrl. 
Key Points 
In this chapter, you learned the following key points: 
â¢ Writing a Web application that uses the eBay API is essentially the same as 
writing any other Web application. 
â¢ You must cache category data when using the GetCategories function 
because of the large amount of data it can return. (If you don't, your appli-
cation won't pass certification.) 
â¢ You must cache and show the eBay logo somewhere within your applica-
tion's user interface, such as its About box. This holds true for both Web 
and stand-alone applications. 
â¢ You can't call GetSellerEvents, and most of the other calls that get informa-
tion, more than once every half hour. 
â¢ Use Veri fyAdditem to verify the attributes of an item without actually 
adding the item before using Add Item. 
â¢ The Add Item call may not return a result. If it doesn't, attempt to add the same 
item with the same UUID. If that fails, the original Add Item call succeeded. 
â¢ Don't do end-to-end testing with PayPal in the eBay Sandbox! These pay-
ments aren't part of the actual eBay Sandbox, and will cost you real money. 
(If you do need to test the Pay Pal relationship, make sure the buyer and 
seller are both PayPal accounts of yours!) 

Using the eBay API Within a Web Site 
â¢ Only use AddltemToDescription when a seller needs to change information 
after listing an item. This call shouldn't be part of the standard use case for 
adding items. 
â¢ Item details don't change very often. Cache the results of Getitem, or at 
least don't fetch all of the item details by supplying an appropriate 
Detail level. 
â¢ Don't call GetCategorylistings more than once every half hour. Instead, 
cache the results for later inquiries. 
â¢ When calling GetHighBidders, cache the previous results and use it only to 
retrieve new data. 
â¢ When using GetSearchResul ts to fetch listings, limit request frequency to 
once every half hour for the same inquiry. Moreover, don't use it just to get 
an item's price; instead, use Getitem on the item in question. 
â¢ Only call GetSellerlist if you can't use GetSellerEvents instead, such as 
when you're importing a list of seller's items into your application for the 
first time. 
277 

APPENDIX 
Examining the 
Container for the 
Sample Applications 
THROUGHOUT THIS BOOK, I've shown you sample applications based on a con-
tainer application that encapsulates the details of application startup, initializing 
eBay interfaces, and collecting configuration information such as your eBay 
access keys, user account, and password. 
This code isn't difficult to understand, but deserves some explanation. However, 
scattering the explanation across the various chapters isn't fair to you, because in 
those chapters you're intent on learning an interface such as GetUserCall. Hence this 
appendix: It shows you the container application the samples use, unfettered by the 
actual eBay calls you've learned. In this appendix, you'll learn why I chose the user 
interface behind the container application, what's in it, and what it does. When 
you're done reading this chapter, you can use the container application inC# and 
Perl to quickly write small stand-alone applications that let you examine the behav-
ior of specific eBay interfaces or test small parts of a larger application that you want 
to build. 
Understanding the Purpose of the Container 
Application 
When writing the container application I use throughout this book, I had the fol-
lowing goals: 
â¢ Provide an easy division in code between the eBay interfaces and logic 
I want to show you and the housekeeping necessary to support those eBay 
interfaces. 
â¢ Provide a simple and effective container with a minimum of user interface 
complexity, letting me focus on showing you what you want to see when 
you buy this book: how to use eBay-not how to use C#, classes in the 
Microsoft .NET Framework, or Perl/Tk. (There are lots of good books on 
these topics already!) 
279 

Appendix 
280 
â¢ Provide an application that lets you enter your eBay access keys and a test 
user account without needing to hand-edit text files or the registry. 
â¢ Provide an isomorphic implementation between C# and Perl wherever 
possible so that you can see how to interact with eBay in these languages, 
letting you gain insight as to which language is best for your application. 
Thus, the container application concept: a container window responsible for 
presenting a sample-specific form demonstrating an aspect of eBay, and an 
associated configuration form that lets you enter your access information. 
Behind the scenes, to ensure that you could enter your information in one place 
and make it available to all applications, is a simple flat-text file that stores your 
eBay access information. 
In addition to providing application startup, configuration management, 
and a container for the sample code, the container application offers two addi-
tional services. Each of these map to the appropriate Gill (.NET Framework for 
C#, Perl/Tk for Perl) calls when set with a new value. 
The StatusBarText property reflects the status bar text on the lower-left side 
of the main window. Updating this text property updates the contents of this text 
box. In a similar vein, the Busy property, when true (1 in Perl), causes the cursor 
to change to the wait cursor (the hourglass). When false (o in Perl), the default, 
the cursor returns to the default cursor. 
Figure A -1 shows a sample application in its simplest form, the container 
application itself. 
eBay Developer 10 
I 
eSay/lill>f-10 
Cancel I 
Figure A -1. A sample application using the book's container code 
The application makes some notable deviations from how a production 
eBay application should behave, including the following: 

Examining the Container for the Sample Applications 
â¢ Production applications should have far more error handling, including 
try I catch blocks around the allocation of objects and interfaces, error 
handling for file management, and so on. With few exceptions, the only 
error handling you see in the sample applications is directly applicable to 
using an eBay interface. 
â¢ Most (but not all) application users have only a single eBay account. 
Entering account information should be the responsibility of a simple 
preferences screen seldom accessed by the user. 
â¢ eBay keys should be stored as an application resource or in the registry in 
an encrypted form, not as a plain-text entry in a text file for everyone to see. 
â¢ eBay user account passwords shouldn't be stored in a manner in which 
they can be easily read. 
â¢ The eBay Marketplace Logo (available by calling GetlogoUrlCall) should be 
shown in the application's splash screen. (The container application doesn't 
even have a splash screen!) 
In the context of learning about the interfaces to manipulate eBay users, 
items, accounts, and such, these are small cosmetic issues. Moreover, how you 
address them in your application is largely a function of how your application 
performs. The user interface and data storage requirements for a back-office 
application that integrates eBay with your inventory system are going to be very 
different from the requirements for an eBay application to help the owner of the 
local comic book shop unload her unsold inventory on eBay with little effort. 
Examining the Container Application in C# 
The container application in C# has two classes: eBaySampleApplication and 
ConfigDialog, both of which inherit from System.Windows. Forms. Form. The 
eBaySampleApplication form is the base class of all sample applications and 
the container per se, holding the form specific to a single sample applica-
tion. A button on this form, the Settings button, creates and shows an 
instance of the ConfigDialog class, letting you enter your eBay access infor-
mation. eBaySampleApplication manages ApiSession, which you use to access 
eBay, as well as loading keys from the configuration file. In a similar vein, 
ConfigDialog is responsible for updating the configuration file in the event 
of changes to your eBay access information. 
To use the container application, you must provide a third class that con-
tains a Main entry point and inherits from the eBaySampleApplication class. It 
must create an eBaySampleApplication subclass instance, configure it by setting 
281 

Appendix 
282 
the Gui property to a control or container with controls for the main layout, and 
then relinquish control to the runtime. 
Starting the Application 
Application bootstrap is the responsibility of the sample application class itself. 
Listing A-1 shows the simplest of sample applications using the container, 
a Hello World application. 
Listing A-1. The Hello World Sample Application 
1: using System; 
2: using System.IO; 
3: using System.Drawing; 
4: using System.Collections; 
s: using System.ComponentModel; 
6: using System.Windows.Forms; 
7: using System.Data; 
8: using eBay.SDK.API; 
9: 
10: namespace com.lothlorien.ebaysdkbook 
11: { 
12: 
13: 
14: 
15: 
16: 
17: 
18: 
19: 
20: 
21: 
22: 
23: 
24: 
25: 
26: 
27: 
28: 
29: 
30: 
31: 
32: 
Ill <summary> 
Ill HelloWorld provides a container application for the sample. 
Ill </summary> 
public class HelloWorld : 
com.lothlorien.ebaysdkbook.eBaySampleApplication 
{ 
public HelloWorld() 
{ 
System.Windows.Forms.Label label = 
new System.Windows.Forms.Label(); 
System.Windows.Forms.Control container = 
new System.Windows.Forms.Control(); 
label.Location = new System.Drawing.Point(10, 10); 
label. Name = "Example"; 
label.Size = new System.Drawing.Size(180, 24); 
label. Text = "Hello World"; 
container.Suspendlayout(); 
container.Controls.AddRange( 
new System.Windows.Forms.Control[] {label} ); 
container.Resumelayout(false); 

Examining the Container for the Sample Applications 
33: 
34: 
35: 
36: 
37: 
38: 
39: 
40: 
41: 
42: 
43: 
44: 
} 
45: } 
this.Gui = container; 
this.StatusText = "Nothing"; 
} 
[STAThread] 
static void Main() 
{ 
Application.Run(new HelloWorld()); 
} 
AB you can see from Listing A-1, the eBaySampleApplication parent class 
makes writing a sample application very easy. The constructor need only create 
whatever components are necessary and start the application (and then, of 
course, manage the events from those controls). This sample uses a container 
with a single label-created constructor on lines 20-24 to display the text "Hello 
World". Once initialized (lines 22-27), the constructor adds the control to the 
form's layout on lines 29-32, and then points the application at the container 
using its Gui property. This property, defined in the eBaySampleApplication class, 
simply adds the container with its elements to the application's form. This prop-
erty resizes the incoming container to a size that fits within the bounds of the 
root form and adds it to the control list for the root form. 
The remainder of the startup is done within the eBaySampleApplication class. 
To keep things simple, I mimic the convention set by the Microsoft Wmdows 
Designer interface, and use a method named InitializeEBayComponent, called 
after the Ini tializeComponent method in the class's constructor. listing A-2 shows 
InitializeEBayComponent. 
Listing A-2. The InitializeEBayComponent Method 
1: private void InitializeEBayComponent( 
2: { 
3: 
II Create the API session. 
4: 
apiSession = new ApiSession(); 
5: 
6: 
apiSession.Url = "https://api.sandbox.ebay.comlwslapi.dll"; 
7: 
II Set the API session's access credentials. 
8: 
II Load our access info. 
9: 
loadKeys (); 
10: } 
283 

Appendix 
284 
The InitializeEBayComponent method creates a new APISession object, sets 
the Ur 1 property of the session to the URL for the eBay sandbox, and then loads 
the keys using the Load Keys method. 
If I were writing only an application using the .NET Framework, I might well 
choose to use a Microsoft -centric mechanism for storing the eBay keys and 
access information, such as the Wmdows registry or an XML configuration file. 
However, to make it easy for you to run the samples, I wanted to share the con-
tents of the configuration file between applications that use the .NET Framework 
and those written in Perl. Although it's true that with the additional modules 
provided by ActiveState, ActiveState Perl applications can read registries and 
parse the XML the .NET Framework uses when creating configuration files, that 
seemed more complexity in a sample application than necessary. Consequently, 
I decided that access keys and other configuration information should be kept in 
a flat text file. Although admittedly primitive by today's standards, it has the ben-
efit of being easy to parse in any language, and equally easy for people like you 
and me to open with a text editor and examine the contents. (This last feature, 
however, although an asset in a sample application, is emphatically a detriment 
when storing something as important as access keys in a commercial application!) 
Another, equally valid, choice would be to store this information in a simple XML 
file. Listing A-3 shows the Load Keys function. 
Listing A-3. The LoadKeys Function 
1: private void LoadKeys() 
2: { 
3: 
FileStream stream; 
4: 
StreamReader streamreader; 
5: 
String keystring; 
6: 
String [] keys; 
1: 
Char [] eol = {'\n'}; 
8: 
9: 
apiSession.Developer = "unknown"; 
10: 
apiSession.Application = "unknown"; 
11: 
apiSession .Certificate = "unknown"; 
12: 
apiSession. RequestUserid = "unknown"; 
13: 
apiSession. RequestPassword = "unknown"; 
14: 
15: 
try 
16: 
{ 
17: 
stream = 
18: 
new FileStream( 
19: 
"c:\\Documents and Settings\\All Users\\ebayrc", 
20: 
System.IO.FileMode.Open ); 
21: 
streamreader = new StreamReader( stream ); 
22: 
keystring = streamreader.ReadToEnd(); 

Examining the Container for the Sample Applications 
23: 
24: 
25: 
26: 
27: 
28: 
29: 
30: 
31: 
32: 
33: 
34: 
35: 
36: 
37: 
38: 
39: } 
} 
streamreader.Close(); 
stream.Close(); 
keys = keystring.Split( eol ); 
apiSession.Developer = keys[o].Trim(); 
apiSession.Application = keys[1].Trim(); 
apiSession.Certificate = keys[2].Trim(); 
apiSession.RequestUserid = keys[3].Trim(); 
apiSession.RequestPassword = keys[4].Trim(); 
catch 
{ 
} 
II Abbreviated for brevity. 
MessageBox.Show( this, 
"Please set your .â¢â¢ ", 
"Error" ); 
Load Keys is one of those longish, boring functions that doesn't do anything 
exciting. It begins by trying to open the file named ebayrc, and if it succeeds, 
splits the contents of the file into strings, one string for each line of the file (lines 
21-25). Next, lines 26-30 trim the white space from each line and assign succes-
sive lines to the apiSession object's properties, such as the Developer, Application, 
and Certificate properties Uines 26-28) that contain your eBay application keys, 
or the RequestUserid and RequestPassword properties Uines 29-30). In the event of 
an error, the try I catch block prints an error message (truncated in the sample 
code for brevity). 
Once the application has finished starting up, the APISession object is avail-
able via the property APISession. 
Configuring the Application 
All of the application configuration is done within the ConfigDialog class. An 
object of this type is created and used as a model dialog box when you press the 
Settings button, as you can see from Listing A-4. 
Listing A-4. Invoking a ConfigDialog 
1: private void setting_Click(object sender, System.EventArgs e) 
2: { 
3: 
4: 
5: 
if ( configDialog == null ) 
configDialog = new ConfigDialog(); 
configDialog.ShowDialog( this ); 
6: 
II Blocking; this happens when the dialog box closes. 
285 

Appendix 
286 
7: 
loadKeys(); 
8: } 
I chose to use a modal dialog box (line 5), because it makes little sense (and 
could potentially wreak havoc on the application) to let the user change configu-
rations while an eBay transaction is in process, which would happen if the dialog 
box was a regular window and you changed the configuration while accessing 
eBay. 
The configuration dialog box itself is a typical Wmdows form; the only thing 
of note is that when closing, if you choose to accept the changes you made, it 
writes the new settings to the configuration file so that the application can reload 
the keys (line 7 of listing A-4). listing A-5 shows how these keys get written to 
the configuration file when the configuration dialog box closes. 
Listing A-5. Saving Configuration Information in ConfigDialog 
1: private void ok_Click(object sender, System.EventArgs e) 
2: { 
3: 
this.DialogResult = DialogResult.OK; 
4: 
II Save settings. 
5: 
try 
6: 
{ 
7: 
FileStream stream = File.OpenWrite( 
8: 
"c:\\Documents and Settings\\All Users\\ebayrc" ); 
9: 
StreamWriter streamWriter = new StreamWriter( stream ); 
10: 
streamWriter.Write( devid.Text ); 
11: 
streamWriter .Write( "\n" ) ; 
12: 
streamWriter.Write( appid.Text ); 
13: 
14: 
15: 
16: 
17: 
streamWriter.Write( 
streamWriter.Write( 
streamWriter.Write( 
streamWriter.Write( 
streamWriter.Write( 
.. ,n .. ); 
crtid. Text ); 
''\n .. ) ; 
user.Text ); 
.. ,n .. ) ; 
18: 
streamWriter.Write( password.Text ); 
19: 
streamWriter.Write( "\n" ); 
20: 
streamWriter.Flush(); 
21: 
streamWriter.Close(); 
22: 
stream.Close(); 
23: 
} 
24: 
catch 
25: 
{ 
26: 
MessageBox.Show( this, "Could not save settings.", "Error"); 
27: 
} 
28: } 

Examining the Container for the Sample Applications 
This is the reverse of Load Keys; the code opens the file for writing on lines 
7-9, and then writes each of the entered keys on lines 9-20 before flushing and 
closing the file on lines 20-22. In the event of a file system error, line 26 informs 
you that the changes weren't saved. 
Examining the Container Application in Perl 
Although the container application in Perl has the same user interface and con-
figuration file implementation, it differs significantly from the C# version. On 
the surface, an obvious difference is that it uses the Perl/Tk library. Because of 
this and the nature of Perl, I constructed the Container application as a Perl 
module, which exports a Gui property and a Main function that starts the sample 
application. Thus, unlike the C# version, sample applications don't subclass the 
eBaySampleApplication module, but instead include it and use its functionality. 
NOTE 
Of course, it's actually fairly easy to create Perl classes that can 
inherit from other classes. However, given the nature of the example appli-
cations, this implementation is even easier than using a parent class-child 
class relationship. 
Starting the Application 
Application startup using the eBaySampleApplication module is simple, in some 
ways even simpler than the C# version. Just include the module, create the Tk 
components for your interface, and then call the module's Main function. Listing 
A-6 demonstrates this. 
Listing A-6. Starting an eBay Application Wriuen with the 
eBaySampleApplication Module 
1: require eBaySampleApplication; 
2: my $application = eBaySampleApplication->new; 
3: my $ui = $application->{MAINWINDOW}->label{ 
4: 
-text => 'Hello World' ); 
5: $application->Gui( $ui ); 
6: 
7: $application->Main; 
The crucial line is the second, invoking the new method of 
eBaySampleApplication. You can see it in Listing A-7. 
287 

Appendix 
288 
Listing A-7. The new Function of eBaySampleApplication.pm 
1: sub new 
2: { 
3: 
my $class = shift; 
4: 
s: 
return if $app; 
6: 
7: 
$app = bless {}, $class; 
8: 
9: 
$app->{MAINWINDOW} = MainWindow->new; 
10: 
$app->{APISESSION} = Win32::0LE->new( 
11: 
"eBay. SDK.API.ApiSession" ) ; 
12: 
$app->{APISESSION}->{Url} = 
13: 
"https: I /a pi. sandbox.ebay .com/ws/api.dll"; 
14: 
15: 
# Load your settings and keys. 
16: 
$app->_loadKeys; 
17: 
18: 
return $app; 
19: } 
Unsurprisingly, this looks an awful lot like the constructor for the 
eBaySampleApplication class in C#. The code begins by creating an empty object 
on line 7, and then fills out three key slots in its hash: 
â¢ The Tk MainWindow Oine 9) to contain the application's interface 
â¢ The ApiSession to use when connecting with eBay (lines 10-ll) 
â¢ The URL to use when contacting the eBay sandbox 
Next, the routine loads the keys Oine 16) it will use to access eBay using 
_loadKeys. This function uses a bit of Perl to do what Perl does best: parse strings. 
ListingA-8 shows _loadKeys. 
Listing A-8. Loading eBay Keys in Perl 
1: sub _loadKeys 
2: { 
3: 
# Try to open the file. 
4: 
$devid = "developerid"; 
s: 
$appid = "applicationid"; 
6: 
$crtid = "certificateid"; 
7: 
$user = "user"; 

Examining the Container for the Sample Applications 
8: 
9: 
10: 
11: 
12: 
13: 
14: 
15: 
16: 
17: 
18: 
19: 
20: 
21: 
22: 
23: 
24: 
25: 
26: 
27: 
28: 
29: 
30: 
31: 
32: } 
$password = "password"; 
if ( !open( IDS, 
{ 
} 
"c:\\Documents and Settings\\All Users\\ebayrc" ) ) 
# Read them from the file. 
$line = o; 
while ( <IDS> ) 
{ 
chomp( $_ ) ; 
$app->{APISESSION}->{Developer} = $_ 
if $line == o; 
$app->{APISESSION}->{Application} = 
if $line == 1; 
$app->{APISESSION}->{Certificate} = $_ 
if $line == 2; 
$app->{APISESSION}->{RequestUserld} = $_ 
if $line == 3; 
$app->{APISESSION}->{RequestPassword} = $_ 
if $line == 4; 
$line++; 
close IDS; 
} 
Without the benefit of exception handling, this code is a little less clear than 
its analog in C#, but it does basically the same thing. First, it sets default values 
in the event of an error (lines 4-8), and then attempts to open the configuration 
file (lines 10-11). If this succeeds, the routine reads one line at a time (line 15), 
trims the trailing end-of-line characters (line 17), and then assigns the resulting 
string to a named slot in the object. 
Configuring the Application 
The configuration dialog box appears when you press the Configuration button; 
its declaration includes a cormnand attribute that contains a reference to 
configDialog_ShowDialog, shown here in listing A-9. 
Listing A-9. Showing the Configuration Dialog Box 
1: sub _configDialog_ShowDialog 
2: { 
3: 
my $configDialog = $app->{MAINWINDOW}->DialogBox( 
289 

Appendix 
290 
4: 
5: 
6: 
7: 
8: 
9: 
10: 
11: 
12: 
13: 
14: 
15: 
16: 
17: 
18: 
19: 
20: 
21: 
22: 
23: 
24: 
25: 
26: 
27: 
28: 
29: 
30: 
31: 
32: } 
-title => "Settings", 
-buttons => [ "OK", "Cancel" ] ); 
$configDialog->add( 'Label', 
( -text => "eBay Developer ID:" ) )->pack(); 
$configDialog->add( 'Entry', ( 
-textvariable =>\$app->{APISESSION}->{Developer} ) )->pack(); 
$configDialog->add( 'Label', ( 
-text => "eBay Application ID:" ) )->pack(); 
$configDialog->add( 'Entry', ( 
-textvariable => \$app->{APISESSION}->{Application} ) )->pack(); 
$configDialog->add( 'Label', ( 
-text => "eBay Certificate ID:" ) )->pack(); 
$configDialog->add( 'Entry', ( 
-textvariable => \$app->{APISESSION}->{Certificate} ) )->pack(); 
$configDialog->add( 'Label', (-text=> "User:") )->pack(); 
$configDialog->add( 'Entry', ( 
-textvariable => \$app->{APISESSION}->{RequestUserid} ) )->pack(); 
$configDialog->add( 'Label', ( 
-text => "Password:" ) )->pack(); 
$configDialog->add( 'Entry', ( 
-textvariable =>\$app->{APISESSION}->{RequestPassword} ) )->pack(); 
my $result = $configDialog->Show(); 
if ( $result == "OK" ) 
{ 
$app->_saveKeys; 
} 
This routine simply contains a lot of unglamorous Perl/Tk code to construct 
a new configuration dialog box and show it each time one is required. Lines 3-5 
create the base dialog box. The add invocations, on lines 7-26, add each of the 
interface elements Oabels or their corresponding input lines) to the dialog box. 
Line 27 shows the dialog box, whereas lines 28-30 save the results of an update 
once you press the confirmation button. 
The _saveKeys method is the inverse of _load Keys (shown here in listing A-10). 
ListingA-10. Saving Application Configuration 
1: sub _saveKeys 
2: { 
3: 
if ( !open( IDS, 
4: 
">c:\\Documents and Settings\\All Users\\ebayrc" ) ) 
5: 
{ 

Examining the Container for the Sample Applications 
6: 
7: 
8: 
9: 
10: 
11: 
12: 
13: 
14: 
15: 
16: 
17: 
18: 
19: } 
} 
print IDS $app->{APISESSION}->{Developer}, "\n"; 
print IDS $app->{APISESSION}->{Application}, "\n"; 
print IDS $app->{APISESSION}->{Certificate}, "\n"; 
print IDS $app->{APISESSION}->{RequestUserid}, "\n"; 
print IDS $app->{APISESSION}->{RequestPassword}, "\n"; 
close IDS; 
else 
{ 
} 
$app->{MAINWINDOW}->messageBox( -title => "Error", 
-message => "Could not save settings." 
-icon => "error" ); 
This routine is simple, too. It begins by opening the configuration file for 
writing Oines 3-4), and if it succeeds, writes each of the configuration items to 
the file Oines 6-11). If the open fails, lines 15-17 show an error message. 
291 

Index 
Symbols 
$resultText object, 101 
$theAccount variable, 101 
$the User object, 93 
$ttylnput variable, 36 
$variable variable, 35 
_loadKeys function, 288-89 
_saveKeysmethod,290-91 
A 
AboutMe property, 7 4, 86 
AboutMe tag, 222, 224 
Access database, using Integration 
Library with, 125-27 
AccessRule class, 40 
Account class, 79-80 
account management 72 
Account object, 96, 97 
Account OLE class, 101 
Account tag, 206 
AccountActivity class, 42, 80-81 
AccountActivity collection, 97 
AccountActivity objects, 42, 81 
AccountActivityCollection class, 42, 
80-81 
AccountCollection class, 79-80 
AccountForm class, 113, 113-14 
Accountld tag, 204 
AccountlnvoiceView, 81-83,87 
AccountlnvoiceView class, 42, 43, 79, 81 
AccountOnHold value, 78 
Accoun1PageJY.petag,203,206 
AccouniPayr.nentEnur.n, 42 
AccountPayr.nentMethodlr.npl class, 42, 
82,83-84 
AccouniPeriodView class, 42, 43, 79, 
81-83 
AccouniPeriodView object, 82, 84 
accounts 
defined,l7 
vs. user accounts, 44 
vs. users, 71-72 
AccountState tag, 204 
AccountStatus 
implementing in C#, 94-97 
implementing in Perl, 97-101 
AccountViewEnur.n, 87 
Active field, 268 
Active tag, 256 
ActivePerl,21,22 
Activities property, 79, 80 
Activity property, 80 
ActivityCollection, 101 
Add method, 48 
additem function, 158 
Addltem interface, 228-38 
AddltemCall, 51, 103, 112, 117 
AdditionalAccount class, 43, 84 
AdditionalAccount object, 82, 84 
AdditionalAccount tag, 206 
AdditionalAccountCollection, 43, 84 
AdditionalAccounts property, 82 
AdditionalAccountsCount tag, 205 
AdditionalBalance tag, 206 
AdditionalCurrency tag, 206 
Additionalld tag, 206 
AdditionalShippingCosts tag, 215, 229, 
245 
AddRange method, 48 
Address class, 40 
AddRootNodes method, 64, 65 
AddToltemDescription interface, 239 
AddToltemDescriptionCall, 51, 103 
Adjustr.nentAr.nount tag, 215 
Ad-JY.pe auction, 15 
Adult property, 108 
Adult tag, 248 
Africa property, 109 
Africa tag, 251 
AirConditioning property, 44 
AllowEditPayr.nent tag, 213 
AllowPayr.nentEdit property, 7 4 
AllowPayr.nentEdittag,222,245 
Ar.nEx property, 108 
Ar.nEx tag, 218, 229 
Ar.nountPaid tag, 213, 260 
Ar.nountPastDue property, 82 
Ar.nouniPastDue tag, 205 
API, eBay. See eBay API 
api object, 31 
api variable, 31 
APIAccessRulestag, 195 
ApiCallSession property, 27, 35, 36, 50, 
90 
APIException class, 40 
ApiSession object, 31, 32, 54-55, 285 
ApiSession property, 85 
apiSession variable, 30-31 
AppData property, 74, 104, 118, 133 
appiD variable, 32 
293 

Index 
294 
Application class, 62 
application ID, 23 
Application property, 26, 31, 285 
ApplicationData property, 104 
ApplicationData tag, 213, 229, 244 
ApplyShippingDiscount tag, 229 
AppUser method, 154-55 
AppUser property, 137, 138, 151 
Apress Web site, 27 
Asia property, 109 
Asia tag, 251 
Attributes class, 45 
Attributes property, 104, 107 
attributes, XML, 168 
Auction tag, 236 
AuctionLengthFee property, 110 
AutoPaytag,229,244 
B 
Balance property, 42, 80, 84 
BankAccountlnfotag,205 
BankModifyDate tag, 205 
BC tag, 210 
BeforeExpand event, 61-62,67 
BeginDate property, 83 
BeginDate tag, 203 
Begin Update method, 65 
Bemers-Lee, Tim, 162 
Bid class, 40 
Bid objects, 40 
Bid tag, 240 
BidCollection class, 40 
BidCount property, 104 
BidCount tag, 226, 244 
Bidlncrement property, 104 
Bidlncrementtag,244 
BidRetractionCountiNT1 tag, 208 
BidRetractionCountiNT2 tag, 208 
BidRettractionCountiNT3 tag, 208 
Bids tag, 240 
BillingCycle property, 82 
BillingCycleDate tag, 204 
BIN tag, 210 
BindingAuction property, 108 
BindingAuctiontag,248 
BinLowered property, 108 
BlueStar value, 77 
BoldFee property, 110 
BoldTitle tag, 229, 249 
BtnListltem_Click method, 114, 115-16, 
117 
BusinessSeller tag, 229 
Busy property, 280 
Buy It Now auction, 15, 16 
Buyer tag, 213 
BuyerProtection tag, 214, 244 
BuyltNowAdded tag, 248 
BuyltNowFee property, 110 
BuyltNowFee tag, 236 
BuyltNowLowered tag, 248 
BuyltNowPrice property, 104 
BuyltNowPrice tag, 214, 226, 229, 238, 244 
c 
C# programming language 
creating XML in, 170-71 
eBay SDK in applications, 19-21 
examining container application in, 
281-87 
configuring application, 285-87 
starting application, 282-85 
implementing AccountStatus in, 
94-97 
implementing Userlnfo in, 89-91 
moving data with HTIP in, 165-66 
parsing XML in, 171-73 
using Integration Library with items 
in,135-52 
creating new items, 147-50 
enumerating items cached by 
Library, 144-47 
fetching data from eBay, 141-44 
getting status from Library, 151-52 
initializing Library, 137-41 
sending data to eBay, 150-51 
validating user in, 28-32, 183-87 
CalculateListingFees method, 131 
CallEBayAPI.pm module, 268,269-74 
CallName tag, 195 
Car class, 44 
Caribbean property, 109 
Caribbean tag, 251 
CarOptions class, 44 
CarPowerOptions class, 44 
CarSafetyFeatures class, 44 
CashOnPickupAccepted property, 108 
CashOnPickupAccepted tag, 229 
categories 
defined, 17 
viewing, 57-69 
obtaining categories, 66-67 
obtaining top-level tree entries, 
62-66 
starting Categories application, 
58-62 
categories collection, 49, 65 
Category class, 41 
Category object, 49 
Category tag, 202, 215, 230, 236, 242, 
244,256 
Category2tag,215,230,236,245 
Category21d property, 104 
Category2Id tag, 215, 245 
CategoryCollection,41,64,119,157 

CategoryCount tag, 197 
CategoryFeaturedFee property, 110 
CategoryFeaturedFee tag, 236 
Categoryld property, 65, 104 
Categoryld tag, 197, 215, 245 
CategoryLevel tag, 197 
CategoryMappingAllowed tag, 230 
CategoryName property, 65 
CategoryName tag, 197 
CategoryNumber tag, 202 
CategoryParent method, 67 
CategoryParenttag,196, 197,198 
CategoryParentld property, 65 
CategorySample class, 58 
CategorySiteld tag, 196 
CategoryTitle tag, 242 
Causetag,240,243 
CCAccepted property, 108 
CCAccepted tag, 218,230 
CCExp tag, 205 
CCinfo tag, 204 
CCModifyDate tag, 205 
Certificate property, 27, 31, 285 
certification, 1Q-11 
certification ID, 23 
CharityListing tag, 215, 245, 256 
CharityListinglnfo tag, 245 
CharityName tag, 245 
CharityNumber tag, 245 
Checkout property, 104 
Checkouttag,215,245 
CheckoutData class, 47 
CheckoutDetailsData class, 47 
CheckoutDetailsSpecified tag, 215 
CheckoutEnabled property, 74, 86, 108 
CheckoutEnabledtag,217,222,224,249 
Checkoutlnstructionstag,215,230,245 
CheckoutStatusData class, 47 
children, in XML, 169 
Chinese auction, 15 
chomp function, 35 
CIPBankAccountStored property, 7 4 
CIPBankAccountStored tag, 222 
City tag, 214, 227 
Clear method, 48 
Clone method, 75, 79 
Cloneltem method, 131 
COD property, 108 
COD tag, 218, 230 
com.lothlorien.ebaysdkbook 
namespace, 58 
command attribute, 289 
Commenttag,227 
CommentingUser tag, 207 
CommentingUserld property, 118 
CommentingUserScore property, 118, 
119 
CommentingUserScore tag, 207 
comments, in XML, 169 
CommentText property, 118, 119 
CommentText tag, 207 
CommentType property, 118 
CommentType tag, 207, 227 
Common Object Request Broker 
Architecture (CORBA), 19 
Component Object Model (COM), 19 
components variable, 61 
confi~Click method, 62 
ConfigDialog class, 281, 285-86 
Confirmed value, 78 
Connect method, 128 
Console class, 30 
container application, 279-92 
examining inC#, 281-87 
configuring application, 285-87 
starting application, 282-85 
examining in Perl, 287-92 
configuring application, 289-92 
starting application, 287-89 
overview, 279 
purpose of, 279-81 
Contains method, 48 
Content-Length header, 181, 182 
ConvertedAdjustmentAmount tag, 215 
ConvertedAmountPaid tag, 215 
ConvertedBuytag,247 
ConvertedPrice property, 105 
ConvertedPrice tag, 240, 243, 24 7 
ConvertedStartPrice tag, 247 
ConvertedTransactionPrice tag, 216 
CopyEmailToSellertag,238 
CopyTo method, 48 
CORBA (Common Object Request 
Broker Architecture), 19 
Count property, 75 
Counttag,202,210,213,225,242 
Counter property, 105 
Counter tag, 230, 247 
CountModetag,195 
Country property, 105 
Countrytag,214,228,230,247 
CountryCode tag, 213 
CountryHelper class, 41 
CPtag, 210 
Create method, 166 
CreatedTime tag, 218 
Credit property, 42, 80 
CreditCard property, 42, 83 
CreditCardlmpl class, 43, 84 
CreditCardVerification value, 78 
crtiD variable, 32 
CruiseControl property, 44 
Crypt:SSLeay module for Perl, 167 
Currency property, 79, 80, 84, 87, 105 
Index 
295 

Index 
296 
Currencytag,204,218,230,240,243, 
247,256 
Currencyld property, 105, 110 
Currencyldtag,236,240,243,247 
Currentmetllod,49 
CurrentBalance property, 42, 82 
CurrentBalance tag, 205 
CurrentPrice property, 105 
CurrentPricetag,218,226,248 
cursor, defined, 48 
CustomCategories tag, 202 
CustomCategory class, 41 
CustomCategoryCollection class, 41 
D 
DailyHardlir.nit tag, 195 
DailySoftlir.nit tag, 195 
DailyUsage tag, 195 
data model, eBay SDK, 39-49 
eBay.SDK.Model nar.nespace, 40-41 
eBay.SDK.Model.Account 
nar.nespace,42-44 
eBay.SDK.Model.Attributes.Motors 
nar.nespace,44-45 
eBay.SDK.Model.Feedback 
nar.nespace, 45 
eBay.SDK.Model.Item nar.nespace, 
45-46 
eBay.SDK.Model.Sale nar.nespace, 
46-47 
eBay.SDK.Model.User nar.nespace, 47 
managing collections of data model 
objects, 48-49 
Data::Dur.nper Perl module, 262 
DataSet class, 133 
DataSet object, 133 
DATASTORE property, 154 
Date function, 101 
Date property, 80 
Date tag, 206 
DateRange property, 43, 83 
DateRangelr.npl class, 43, 83, 97 
DateRangelr.npl object, 83, 101 
DateTir.ne class, 97 
Days tag, 252 
DBConfiguration property, 129 
DBConnection field, 125 
Debit property, 42, 80 
debugging eBay applications, 53-57 
logging eBay SDK XML for eBay API, 
53-55 
monitoring network activity, 55-57 
Deleted value, 78 
DeleteFeedbackToBuyer metllod, 131 
DepositType tag, 218 
DescFormat attribute, 244 
Description property, 105 
Description tag, 230, 239, 248 
DescriptionLeh tag, 248 
DetailLevel field, 268 
DetailLevel property, 50, 67, 85, 90, 94 
Detai1Leveltag,198,207,210 
Details tag, 215, 245 
developer ID, 23 
Developer property, 26, 31, 285 
Developers Program, 4, 10 
deviD variable, 32 
DirectDebit property, 83 
DirectDebit_Pending SignatureMandate 
property, 83 
DirectDebitlr.npl class, 43, 84 
Discover property, 108 
Discover tag, 218, 230 
Dispose metllod, 62 
DonationPercent tag, 245 
dotfile, 27 
Downloadlter.ns metllod, 143-44 
DownloadUser metllod, 142-43 
Duplicatelter.nld tag, 236 
Duration property, 105 
Duration tag, 230, 238 
Dutch auction, 15 
E 
eBay API, 175-92 
calls for items, 228-61 
Addltem interface, 228-38 
AddSecondChanceltem interface, 
238 
AddTolter.nDescription interface, 
239 
Endltem interface, 239-40 
GetAllBidders interface, 240-41 
GetCategoryUstings interface, 
241-42 
GetHighBidders interface, 242-43 
Getltem interface, 243-53 
Getlter.nShipping interface, 
253-55 
Getltem'fiansactions interface, 
255-56 
GetSearchResults interface, 
256-59 
GetSellerUst interface, 259 
Relistltem interface, 260 
ReviseCheckoutStatus interface, 
26Q-61 
Reviseltem interface, 228-38 
VerifyAddSecondChanceltem 
interface, 238 
Verifyltem interface, 228-38 
calls for users, 202-28 
GetAccount interface, 202-6 
GetFeedback interface, 207-9 

GetSellerEvents interface, 210-11 
GetSeller'Ii"ansactions interface, 
212-21 
GetUser interface, 221-25 
GetWatchlist interface, 225-26 
LeaveFeedback interface, 226-27 
SetSellerPaymentAddress 
interface, 227-28 
ValidateTestUserRegistration 
interface, 228 
choosing to use, 175-76 
general calls, 195-202 
GetAPIAccessRules interface, 
195-96 
GetCategories interface, 196-98 
GeteBayOfficialTime interface, 
198 
GetLogoURL interface, 198-99 
GetShippingRates interface, 
199-201 
GetStoreDetails interface, 202 
Dlakingrequest~th,176-82 
contents of request and response, 
177-80 
populating HITP headers in 
request, 181-82 
process of, 182 
overview, 175 
using ~thin Web sites, 193-94, 
261-76 
obtaining list of iteDls Dlatching 
search criteria, 264-75 
obtaining search paran1eters, 
262-64 
periodic Dlaintenance tasks, 
275-76 
validating user 
in C#, 183-87 
in Perl, 187-91 
eBay Developers Progran1, 4, 10 
eBay Developer Zone Web site, 9, 10, 
194 
eBayiD,2 
eBay Integration library, 4 
eBay Sandbox, 4, 10, 23-26 
eBaySDK 
inC# applications, 19-21 
data Dlodel, 39-49 
eBay.SDK.Model nan1espace, 
40-41 
eBay.SDK.Model.Account 
naDnespace,42-44 
eBay.SDK.Model.Attributes 
naDlespace,44-45 
eBay.SDK.Model.Attributes.Motor 
s nan1espace, 44-45 
eBay.SDK.Model.Feedback 
nan1espace, 45 
eBay.SDK.Model.IteDl nan1espace, 
45-46 
eBay.SDK.Model.Sale nan1espace, 
46-47 
eBay.SDK.Model.User nan1espace, 
47 
Dlanaging collections of data 
n1odel objects, 48-49 
debugging applications, 53-57 
logging eBay SDK XML for eBay 
API, 53-55 
Dlonitoring network activity, 
55-57 
eBay Sandbox, 23-26 
interfaces,49-53 
and life cycle of auction, 14-16 
Dlanaging iten1s ~th, 103-20. See 
also eBay.SDK.Model.IteDl 
nan1espace; SiDlpleUst san1ple 
application 
overview, 103 
representing feedback, 118-19 
Dlanaging users ~th. See also 
eBay.SDK.Model. User nan1espace; 
!Account; IUser 
overview, 71 
relationship between users and 
accounts, 71-72 
user and account data Dlodel 
objects, 85-87 
organization of, 17-18 
overview, 39 
in Perl applications, 21-22 
Validate User san1ple application, 
26-27 
validating test user, 28-36 
inC#, 28-32 
in Perl, 32-36 
viewing categories, 57-69 
obtaining categories, 66-67 
obtaining Top-Level Tree Entries, 
62-66 
obtaining tree branch entries, 
68-69 
starting Categories application, 
58-62 
vocabulary of, 16-17 
eBay SDK installer, 14 
eBay SDK XML log, 53-55 
eBay software platforDl, 1-12 
developing application ~th eBay, 
9-11 
integrating eBay in application, 6-9 
Dlarket for eBay applications, 1-5 
overview, 1 
selecting eBay for application, 5-6 
eBay stores, 15 
eBay.API nan1espace, 50 
Index 
297 

Index 
298 
eBay.API.APICall class, 50 
eBay.APIApiSession class, 50 
EBayDirectPay class, 43, 84 
eBayDirectPay property, 83 
eBayGoodStanding tag, 222, 224 
eBay.Model.Integration namespace, 128 
eBayPaymentStatus tag, 217 
ebayrc file, 27 
eBaySales.exe.config file, 125 
eBaySampleApplication class, 281,283 
eBaySampleApplication form, 281 
eBay.SDK.API namespace, 30, 50, 85 
eBay.SDK.APIApiSession class, 53 
eBay.SDK.API.ApiSession object, 26, 27,34 
eBay.SDK.API.GetAccountCall COM 
object, 100 
eBay.SDK.API.GetCategoriesCall, 57-58, 
67 
eBay.SDK.API.GetCategoriesCall 
method, 58 
eBay.SDK.API.GetLogoURLCall.GetLogo 
URL method, 41 
eBay.SDK.API.GetUserCall COM object, 
92 
eBay.SDK.API.ValidateTestUserRegistrati 
onCall, 27,28 
eBay.SDK.API.ValidateTestUserRegistrati 
onCall class, 24 
eBay.SDK.API.ValidateTestUserRegistrati 
onCall object, 32, 35 
eBay.SDK.Integration namespace, 124 
eBay.SDK.Integration.DataStore object, 
130 
eBay.SDK.Model namespace, 40-41 
eBay.SDK.ModelAccount namespace, 
42-44 
eBay.SDK.ModelAccountAccount class, 
42 
eBay.SDK.ModelAttributes.Motors 
namespace,44-45 
eBay.SDK.Model.Feedback namespace, 
45, 118 
eBay.SDK.Model.ICategory interface, 57 
eBay.SDK.ModeliCategoryCollection 
interface, 57 
eBay.SDK.Model.Item Helper classes, 
111-12 
eBay.SDK.Model.Item namespace, 
45-46, 103-12 
representing eBay items, 104-10 
representing fees for listing items, 
110-11 
serializing eBay.SDK.Model.Item 
helper classes, 111-12 
eBay.SDK.Model.Item.Fees class, 110-11 
eBay.SDK.Model.Sale namespace, 46-47 
eBay.SDK.Model.User enumerations, 
76-79 
eBay.SDK.Model. User namespace, 44, 
47 
examining account activity, 80-81 
examining accounts, 79-80 
examining ancillary accounts, 84 
managing item scheduling privileges, 
75-76 
representing payment methods, 
83-84 
representing users, 73-75 
specifying values, 76-79 
viewing account activity, 81--83 
EBaySession object, 130 
EBayTime tag, 198 
elements, XML, 168 
email addresses, oftest users, 24 
Email property, 7 4, 86 
Emailtag,222,224 
EmailAddress property, 42, 81 
EmailAddress tag, 205 
EndDate property, 83 
EndDate tag, 203 
Endltem interface, 239-40 
EndltemCall, 103 
EndTime property, 105 
EndTime tag, 218, 236, 248 
EnforceURL tag, 195 
Entry tag, 206 
EntryCounttag,206 
enumerators, 48, 49 
Environment property, 137, 154 
environment variable, 138 
EOPChecllimit property, 86 
EOPCreditCardLimit property, 86 
Equals method, 40, 73, 75, 79 
ErrorLevel node, 178, 180 
ErrorLevel property, 31, 50 
ErrorLevelEnum, 31, 50 
Errors node, 180 
Escrow property, 108 
Escrow tag, 230 
EscrowBySellertag,230 
EstimatedFees property, 105 
EstimatedFeesCurrency property, 105 
ETtag, 210 
Europe property, 109 
Europe tag, 251 
Exception class, 31, 40 
ExcludeSellers tag, 256 
F 
Featured tag, 230, 249 
FeaturedFee property, 110 
FeaturedFee tag, 236 
FeaturedGalleryFee property, 110 
FeaturedGalleryFee tag, 236 
feedback, 16,17,76 

Feedback class, 45, 118 
Feedback objects, 45, 119 
Feedbacktag,222,224 
FeedbackCollection class, 45, 118, 119 
FeedbackDetail tag, 207 
FeedbackDetailltem tag, 207 
FeedbackDetailltemTotal tag, 207,208 
FeedbackPrivate property, 7 4 
FeedbackRole property, 118 
FeedbackRole tag, 207 
FeedbackScore property, 7 4, 86 
FeedbackScoreSurnrnarytag,207,208 
Fees class, 45, 110-11 
Feestag,236 
FileReader class, 30 
FileStream class, 30 
FillltemFields method, 114, 115-17 
FilterXmlEventArgs object, 117 
final value fee, 3 
Finalize method, 40 
find_ Click method 
of the AccountStatus application 
inC#, 94-96 
in Perl, 98-100 
ofUserlnfo 
inC#, 89-90 
in Perl, 91-92 
FindFeedback method, 131 
FindSale method, 131 
FixedPriceDurationFee property, 110 
FixedPriceDurationFee tag, 236 
Followup property, 119 
Followup tag, 208 
FollowupResponse property, 118 
FormSimplelist class, 113-14 
FromHalfPending value, 78 
FromHalfUnconfirmed value, 78 
FromHashtable method, 111 
G 
Gallerytag,230,249 
GalleryFeaturedtag,230,249 
GalleryFee property, 110 
GalleryFeetag,236 
GalleryUrl property, 105 
GallerylnRLtag,226,230,248 
get method, 101 
GET request (HTTP), 164 
GetAccount interface, 202-6 
GetAccountmethod,86-87,94,97,101 
GetAccount tag, 202 
GetAccountCall, 51,86-87,93-94 
GetAccountCall.GetAccount method, 87 
GetAllBidders interface, 240-41 
GetAPIAccessRules interface, 195-96 
GetAPIAccessRules method, 195 
GetAPIAccessRulesCall, 51 
GetAppltemiDList method, 131, 147 
GetBidderListCall, 51 
GetBuyerldList method, 132, 147 
GetCategories function, 58, 61, 62, 64 
GetCategories interface, 196-98 
GetCategories method, 66-67 
GetCategoriesCall, 51, 53 
GetCategoriesCall.GetCategories 
method, 58 
GetCategoryListings interface, 241-42 
GeteBayOfficialTime interface, 198 
GeteBayOfficialTimeCall, 51, 113-14 
GetEnumerator method, 48 
GetFeedback interface, 207-9 
GetFeedbackCall, 51, 119 
GetFeedbacksFromEbay method, 134 
GetHashCode method, 40, 73, 75, 79 
GetHighBidders interface, 242-43 
GetHighBiddersCall, 52 
Getltem interface, 243-53 
GetltemCall, 52, 53, 103 
GetltemsCount method, 132 
GetltemShipping interface, 253-55 
GetltemTransactions interface, 255-56 
GetltemTransactionsCall, 52 
getl<eysmethod,30,31,35, 190,274,275 
GetLogoURL interface, 198-99 
GetLogoURLCall, 52 
GetLogoUrlCall, 113-14 
GetPendingltemsCount method, 132 
GetResponse method, 166 
GetSaleldList method, 132, 147 
GetSearchResults interface, 256-59 
GetSearchResultsCall, 52 
getsearchresults.pl script, 265-67 
GetSellerEvents interface, 210-11 
GetSellerEventsCall, 52 
GetSellerList call, 259 
GetSellerList interface, 259 
GetSellerListCall, 52 
GetSellerTransactions interface, 212-21 
GetSellerTransactionsCall, 52 
GetShippingRates interface, 199-201 
GetStoreDetails interface, 202 
GetStoreDetailsCall, 52 
Gef!Ype method, 40, 73, 75, 79 
GetUser interface, 221-25 
Get User method, 85, 93 
GetUserCall,52,85-86,88,90 
GetUserCall.GetUser method, 85 
GetWatchList interface, 225-26 
GetWatchListCall, 52 
Ghost value, 78 
GiftExpressShipping property, 107 
GiftExpressShipping tag, 230 
Giftlcon property, 107 
Giftlcon tag, 230, 248 
GiftlconFee property, 110 
Index 
299 

Index 
300 
GiftlconFee tag, 236 
GiftOptions class, 107 
GiftOptions property, 105 
GiftSenncestag,248 
GiftSettings class, 45 
GiftShipToRecipient property, 107 
GiftShipToRecipient tag, 230 
GiftWrap property, 107 
GiftWrap tag, 231 
GoodTillCanceled tag, 248 
GrandTotal tag, 242 
GreenStar value, 77 
Gui property, 283 
H 
HasMoreltems tag, 258 
HasMoreTransactions tag, 213 
HBtag,211 
HBEtag, 211 
HBFtag, 211 
Headers property, 187 
helper classes, 73 
HighBidder property, 105 
HighBiddertag,248 
HighestPrice tag, 256 
Highlighttag,231,249 
HighiightFee property, 110 
HighiightFeetag,236 
HourlyHardiimit tag, 195 
HourlySoftLimit tag, 196 
HourlyUsage tag, 196 
Hours tag, 252 
HTTP headers, 181-82 
HTTP, moving data with, 162-67 
inC#, 165-66 
in Perl, 166-67 
HTTP::Headers module, 262, 274 
HTTP::Request module, 262, 274 
HTTPS,6 
H'ITPWebRequest class, 165, 166 
HTTPWebRequest object, 165-66, 167 
HTTPWebResponse class, 165 
I 
ltag,210 
!Account, 93-101 
implementing AccountStatus in C#, 
94-97 
implementing AccountStatus in Perl, 
97-101 
IAccountActivity interface, 42 
IAccountActivityCollection class, 42 
IAccountlnvoiceView class, 42 
IAccountPaymentMethod interface, 42 
IAccountPeriodView interface, 42 
IAddltem interface, 51 
IAdditionalAccount interface, 43 
IAdditionalAccountCollection interface, 
43 
IAddToltemDescription interface, 51 
IAPIException interface, 40 
lApp User interface, 124 
lApp User object, 140, 143 
IBidCollection interface, 40 
ICarOptions interface, 44 
ICarSafetyFeatures interface, 44 
I Category interface, 41 
ICheckoutData interface, 47 
ICheckoutDetailsData interface, 47 
ICheckoutStatusData interface, 47 
I Collection interface, 48, 133 
ICreditCard class, 43 
ICustomCategoryCollection interface, 
41 
ID for eBay, 2 
Id property, 79, 80, 84 
Idtag,211,226,237,248 
IDataStore interface, 124, 128 
IDataStore object, 154 
IDateRange class, 43 
identification for eBay, 2 
1Ds,23, 133 
IDS Perl file descriptor, 36 
IDVerified property, 74, 86 
IDVerified tag, 222, 224 
IEBayDirectPay interface, 43 
IEBaySession interface, 124, 131-33, 147 
IEBaySynchronizer interface, 131, 
134-35 
!Environment object, 154 
!Feedback interface, 45 
!Feedback objects, 127 
IFeedbackCollection interface, 45 
1Feesinterface,45, 110 
IGetAccount interface, 51 
IGetAPIAccessRules interface, 51 
IGetBidderiist interface, 51 
IGetCategories interface, 51 
IGetEbayOfficialTime interface, 51 
IGetFeedback interface, 51 
IGetHighBidders interface, 52 
IGetltemCall interface, 52 
IGetltemTransaction interface, 52 
IGetLogoURL interface, 52 
IGetSearchResults interface, 52 
IGetSellerEvents interface, 52 
IGetSelleriist interface, 52 
IGetSellerTransactions interface, 52 
IGetStoreDetails interface, 52 
I Get User interface, 52 
IGetWatchiist interface, 52 
IGiftSettings interface, 45 
IlntCollection, 133 
llnvoiceViewSettings interface, 43 

litem interface, 45 
litem objects, 126 
IItemCollections, 144 
IItemFound interface, 46 
IItemFoundCollection interface, 46 
IItemStatus interface, 46 
ILeaveFeedback interface, 52 
IListingFeatures interface, 46 
IListingFeaturesSerializer interface, 46 
ILogolnfo interface, 41 
!Motorcycle interface, 44 
ImportltemsFromEBay method, 134 
InCheckout property, 108 
IncludeSellers tag, 257 
lncompleteState tag, 217 
IndexOf method, 48 
InitalizeEbayComponent, 62 
InitializeComponent method, 62, 64 
InitializeEBayComponent method, 
283-84 
InMaintenance value, 78 
Insert method, 48 
insertion fee, 3 
InsertionFee property, 111 
InsertionFee tag, 236 
InsuranceFeetag,201,216,231,245, 
253 
InsuranceOption tag, 216, 231, 246 
lnsuranceTotal tag, 216 
InsuranceVVantedtag,216 
Integration Library, 121-58 
choosing, 121-24 
data model, 124 
overview, 18, 121 
pagination, 147 
using, 125-30 
in applications, 128-30 
configuring database for Library, 
125-27 
integrating Library with legacy 
database, 127 
using with categories in Perl, 153 
initializing Library, 153-55 
obtaining Library categories, 
156-58 
synchronizing Library categories, 
155-56 
using with items in C#, 135-52 
creating new items, 147-50 
enumerating items cached by 
Library, 144-47 
fetching data from eBay, 141-44 
getting status from Library, 151-52 
initializing Library, 137-41 
sending data to eBay, 150--51 
working with synchronization, 
131-35 
interfaces, overview of, 18 
Internet programming, 159-74 
inside Internet applications, 159-62 
moving data with HTTP, 162-67 
inC#, 165-66 
in Perl, 166-67 
overview, 159 
representing data with XML, 168-74 
creating XML in C# and Perl, 
170-71 
parsingXMLin C#, 171-73 
parsing XML in Perl, 173-7 4 
InvoiceBalance property, 42, 81 
InvoiceBalance tag, 205 
InvoiceDate property, 42, 81 
InvoiceDate tag, 205 
InvoiceMonth property, 43 
InvoiceMonth property, 83 
InvoiceMonth tag, 203 
Invoice View object, 101 
Invoice View property, 80, 81 
InvoiceViewOption, 87 
InvoiceViewSettings class, 43, 83 
lnvoiceViewSettings object, 87 
Invoice Year property, 43, 83 
InvoiceYeartag,204 
Invoke,64 
IPaymentTerms interface, 46 
IPaymentTermsSerializer interface, 46 
IPeriodViewSettings class, 43 
IRelistltem interface, 52 
IReviseltem interface, 52 
is_success property, 167 
I~dFormattag,231 
ISale interface, 47 
ISale object, 127 
ISaleCollection interface, 47 
ISchedulingLimit interface, 47 
IsExpired tag, 197 
IsGCAuthorized property, 86 
IShippingRegions interface, 46 
IShippingRegionsSerializer interface, 46 
IShippingSettings interface, 46 
IsLAAuthorized property, 74, 86 
IsLAAuthorized tag, 222, 224 
IsVirtual tag, 197 
Item class, 45, 103 
properties of, 104-6 
representing ebay items with, 104-10 
Item tag, 225 
ltem.AppData AppStatus property, 149 
ItemAt method, 48, 75, 101 
ItemCollection class, 45 
ItemCount method, 48, 49, 101 
ltemFound class, 46, 104-10 
ltemFoundCollection class, 46 
ltemld attribute, 242 
ltemld field, 81 
Itemld property, 80, 85, 88, 105, ll8 
Index 
301 

Index 
302 
Itemld tag, 218, 227, 253, 255, 260 
ItemNumber tag, 206, 208 
Item.PhotoCount property, 117 
ltem.PhotoUrl property, 117 
ItemProperties tag, 248 
ItemRevised property, 105 
ItemRevised tag, 250 
items, defined, 17, 107 
ItemsPerPage tag, 207 
ItemStatus class, 46 
ItemTypeFilter field, 268 
ltemTypeFilter tag, 242, 257 
ITimeLeft interface, 41 
ItNowPrice tag, 247 
IUser, 88-93 
implementing Userlnfo inC#, 89-91 
implementing Userlnfo in Perl, 91-93 
IUser interface, 47, 88 
IUser object, 85 
IUserCollection interface, 47 
IUuid interface, 41 
IValidateTest interface, 52 
!Vehicle interface, 44 
IVerifyAddltem interface, 52 
L 
LastAmountPaid property, 42, 82 
LastAmountPaid tag, 205 
LastlnvoiceAmount property, 42, 82 
LastinvoiceAmount tag, 205 
LastlnvoiceDate property, 82 
LastlnvoiceDate tag, 205 
LastModifiedFrom tag, 212, 255 
LastModifiedTo tag, 212, 255 
LastPaymentDate property, 82 
LastPaymentDate tag, 205 
LastTimeModifiedtag,217 
LatinAmerica property, 109 
LatinAmerica tag, 251 
Layoutld tag, 231 
LeadCount property, 105, 107 
LeadCount tag, 250 
Leaft:ategorytag,l97 
LeaveFeedback interface, 226-27 
LeaveFeedbackCall,52,119 
LeaveFeedbacksToEBay method, 134 
LeaveFeedbackToBuyermethod,l32 
LengthFeetag,236 
LevelLimit parameter, 67 
LevelLimittag, 197 
Library for WWW access for Perl (LWP), 
166,167 
life cycle of eBay auction, 14-16 
ListedByRequestAppld tag, 237 
ListingDesigner class, 41 
ListingDesigner property, 105 
ListingDesigner tag, 250 
ListingDesignerFee tag, 236 
ListingFeatures class, 46, 111 
ListingFeatures object, 46 
ListingFeatures property, 105, 112 
ListingFeaturesSerializer class, 46, 111, 
112 
ListingFee property, 111 
ListingFee tag, 236 
ListltemsToEBay method, 134, 151 
ListViewltem, 146 
LoadAllCategories method, 157 
LoadBothFeedbacks method, 132 
LoadBuyermethod,l32,143,147 
LoadBuyers method, 132 
LoadEnvironmentmethod,l28,137-38 
LoadFeedback method, 132 
Loadltem method, 132, 146, 147 
LoadltemDetails method, 132, 147 
Loadltems method, 132 
LoadltemSales method, 132 
LoadltemSalesByEBayld method, 132 
LoadltemSet method, 132, 147 
LoadKeys function, 284-85 
LoadKeys method, 138, 283-84 
LoadRootNodesmethod,61,64 
loadRootNodesThread method, 64 
LoadSale method, 132, 147 
LoadSales method, 132 
LoadUser method, 140 
LoadUsers method, 139 
Location property, 105 
Location tag, 231, 250 
Log property, 54 
LogCallXml property, 31, 34, 54, 55 
Login method, 141-42 
login_ Click method, 138-39 
LoginForm class, 138-39, 141 
Logoff method, 150 
Logolnfo class, 41 
logo.pl script, 264 
LowestPrice tag, 257 
LWP (Library for WWW access for Perl), 
166, 167 
LWP::UserAgent module, 262, 274 
M 
Main method, 30, 62 
market for eBay applications, 1-5 
master method, 51 
MaxBid tag, 241,243 
MaxResults field, 269 
MaxResults tag, 257 
MaxScheduledltems property, 76 
mBtnContinue_Click method, 113 
Mcilroy, Douglas, 19 

Memo property, 80 
Memo tag, 206 
MerchandisingPref tag, 222 
Merged value, 78 
Message property, 31, 40, 97 
MessageToBuyer tag, 261 
Microsoft Access database, using 
Integration library with, 125-27 
Microsoft COM. See Component Object 
Model (COM) 
Microsoft SQL Server database, using 
Integration library with, 125-27 
MiddleEast property, 109 
MiddleEast tag, 252 
MiniEBay application, 135, 139-40 
MinimumBid tag, 231 
MinimumToBid property, 105 
MinimumToBid tag, 250 
Minutes tag, 252 
MOCashiers property, 108 
MOCashiers tag, 219, 231 
model section, of API library, 18 
ModifiedOnly property, 112 
ModifiedProperties property, 105, 108, 
109 
Modifiertag,257 
ModifierCode tag, 257 
ModTime tag, 196 
MoneyXferAccepted property, 108 
MoneyXferAccepted tag, 219,231 
MoneyXferAcceptedinCheckout tag, 
219,231 
Motorcycle class, 44 
MoveNext method, 49 
My Ebay page, 16 
N 
Nametag,202,214,227 
namespaces, overview, 18 
NegativeFeedbackCounttag,208 
NegativeFeedbackCountiNT1 tag, 208 
NegativeFeedbackCountiNT2 tag, 208 
NegativeFeedbackCountiNT3 tag, 208 
NeutralCommentCount tag, 208 
NeutralCommentCountFromSuspended 
Users tag, 209 
Neutra1FeedbackCountiNT1 tag, 209 
Neutra1FeedbackCountiNT2 tag, 209 
NeutralFeedbackCountiNT3 tag, 209 
new method, 287-88 
Newltem method, 147-48, 149 
NewltemFilter tag, 210 
NewltemForm, 147 
new Request method, 27 4 
NewUser method, 140-41 
NewUser tag, 222, 224 
Nodes property, 65 
None value, 77 
NorthAmerica property, 109 
NorthAmerica tag, 252 
Number tag, 206 
0 
Object class, 39-40 
Object linking and Embedding (OLE), 
19 
Oceana property, 109 
Oceania tag, 252 
OLE (Object linking and Embedding), 
19 
OnPostRequestXml event, 50 
OnPostRequestXml property, 117 
OnReceiveResponseXml event, 50 
OnReceiveResponseXML property, 117 
Open method, 54 
Order field, 269 
Ordertag,257 
Orderld tag, 260 
Originalltemld tag, 238, 250 
Other property, 108 
Other tag, 219 
OtherPaymentsOnline property, 108 
OtherPaymentsOnline tag, 219 
p 
PackagingHandlingCosts tag, 231,246, 
253 
PageNumber property, 87, 96 
Page~ur.nbertag,203,204,206,212,213, 
256 
pagination, 147 
Panel objects, 89 
Parse method, 117 
password element, 268 
PastDue property, 82 
PastDue tag, 205 
PaymentAddress property, 7 4 
PaymentEdittag,216 
PaymentMethod property, 42, 82 
PaymentMethodUsed tag, 217, 261 
Payment0thertag,231 
Payment0ther0nlinetag,231 
PaymentSeeDescription tag, 231 
PaymentTerms class, 46, 107, 109, ll1 
PaymentTerms object, 46 
PaymentTerms property, 106, 112 
PaymentTerms tag, 218, 250 
PaymentTermsSerializer class, 46, 111, 
112 
Paymenfrypetag,204 
PayPal service, 16 
Index 
303 

Index 
304 
PayPal tag, 257 
PayPalAccepted property, 109 
PayPalAcceptedtag,219,231 
PayPalEmailAddress property, 109 
PayPalEmaiL\ddresstag,232 
PendingCreditCard Verification value, 78 
PendingTermination value, 78 
Period tag, 203, 206 
PeriodView property, 80, 81 
PeriodViewOption, 87 
PeriodViewRangeEnum, 43, 83 
PeriodViewSettings class, 43, 83 
PeriodViewSettings object, 100-101 
PeriodViewSettings option, 87 
Perl programming language 
creating XML in, 170-71 
eBay SDK in applications, 21-22 
examining container application in, 
287-92 
configuring application, 289-92 
starting application, 287-89 
implementing AccountStatus in, 
97-101 
implementing Userlnfo in, 91-93 
moving data with HTIP in, 166-67 
parsing XML in, 173-7 4 
using Integration Library with 
categories in 
initializing Library, 153-55 
obtaining Library categories, 
156-58 
synchronizing Library categories, 
155-56 
validating user in, 32-36, 187-91 
PersonalCheck property, 109 
PersonalCheck tag, 219, 232 
Phonetag,214,228 
PhotoCount property, 106 
PhotoCount tag, 232, 250 
PhotoDisplayFee property, 111 
PhotoDisplayFee tag, 237 
PhotoDisplayType tag, 232, 250 
PhotoFee property, 111 
PhotoFee tag, 237 
PhotoUrl property, 106 
PictureFiles property, 117 
PictureURL tag, 232,251 
platform. See eBay software platform 
PositiveFeedbackCount tag, 209 
PositiveFeedbackCountiNT1 tag, 209 
PositiveFeedbackCountiNT2 tag, 209 
PositiveFeedbackCountiNT3 tag, 209 
POST request (HTIP), 164, 182 
PowerSeats property, 44 
Price tag, 219 
Privatetag,222,224,232,249,251 
PrivateAuction property, 106 
Property Pages dialog box, 20 
PurpleShootingStar value, 77 
PurpleStar value, 77 
Q 
Q tag, 211 
QS tag, 211 
Quanitity property, 106 
Quantitytag,220,241,243,251 
QuantityPurchased tag, 220 
QuantitySold property, 106 
QuantitySold tag, 199, 220, 253 
Quantitythan 0 tag, 232 
Query field, 269 
Query tag, 257 
querydata element, 268 
R 
RecipientBidderUserld tag, 238 
RedShootingStar value, 77 
RedStar value, 77 
RegDate property, 74, 86 
RegDate tag, 223, 224 
Region property, 106 
Region tag, 232, 251, 257 
Regionld property, 106 
RegistrationAddress property, 7 4, 86 
RegistrationAddress tag, 223, 225 
RegistrationCall, 52 
RegistrationCodeSentvalue,78 
Relistld property, 106 
RelistiD tag, 220,251 
Relistltem interface, 260 
RelistltemCall, 52, 104 
RelistlternsToEBay method, 134 
RelistUnsoldltem method, 132 
Remove method, 48 
RemoveAt method, 48 
Replace method, 186-87 
request method, 167,274 
RequestPassword field, 268 
RequestPassword node, 178 
RequestPassword property, 35, 285 
RequestPassword tag, 228 
RequestUserld node, 178 
RequestUserld property, 35, 285 
RequestUserld tag, 202, 228 
Reserve tag, 249 
ReserveFee property, 111 
ReserveFee tag, 237 
ReserveLowered property, 108 
ReserveLowered tag, 249 
ReserveMet property, 108 
ReserveMettag,249 
ReservePrice property, 106 

ReservePricetag,232,251 
ReserveReD1ovedtag,249 
Response property, 50, 118, 119 
Response tag, 208 
RestrictedToBusiness tag, 232, 249 
ReturnedTransactionCountActualfuncti 
on call tag, 213 
ReviseCheckoutStatus interface, 260-61 
Reviselten1 interface, 228-38 
Reviselten1Call, 52, 104 
Rezic, Slaven, 97 
root, inXML, 169 
Roo~odesD1etllod,64 
RuleCurrentStatustag, 196 
RuleStatustag, 196 
Run n1etllod, 62 
s 
Sale class, 47 
sale, defined, 17 
SaleCollection class, 47 
SalesTaxArn.ount tag, 216 
SalesTaxPercent tag, 216, 232, 246 
SalesTaxState tag, 216, 232, 246 
San1pleApp class, 141-42 
SaveBuyer n1etllod, 132 
SaveFeedback n1etllod, 132 
Savelten1 n1etllod, 132 
Savelten1s n1etllod, 132 
SaveSale n1etllod, 132 
Save User n1etllod, 141 
Save Users n1etllod, 139 
ScheduleTinle tag, 232 
SchedulingFee property, 111 
SchedulingFeetag,237 
Schedulinglnforn1ation tag, 223, 225 
SchedulingLinlit class, 47, 73, 75-76 
SchedulingLinlit property, 74, 75, 86 
Scoretag,209,222 
screen scraping, 5-6 
ScrollTree control, 156 
SDK, eBay. See eBay SDK 
SDK XMLlog, 53-55 
SearchlnDescription field, 268 
SearchlnDescription tag, 257 
SearchJYpetag,257 
SecondChanceEligible tag, 251 
SecondChanceEnabled tag, 241,243 
Seconds tag, 252 
Secure Sockets Layer (SSL), 164 
SeeDescription property, 109 
SeeDescription tag, 219 
Seller property, 106 
Sellertag,251 
SellerEvent class, 41 
Seller Level property, 7 4, 86 
SellerLeveltag,223,225 
SellerPafn1entAddresstag,223,225 
SellerPaystag,220,232 
SendEn1ailToBuyer tag, 261 
serialization, 127 
Setlten1Status n1etllod, 132 
SetSellerPafn1entAddress interface, 
227-28 
ShipFrmnZipCode tag, 199, 232, 246, 
253 
ShippingAddress tag, 214 
ShippingFeetag,201 
ShippingHandlingCosts tag, 216, 232, 
246 
Shippingln18xtag,216,233,246 
Shippinglrregulartag, 199,233,246,254 
ShippingOption tag, 220, 233, 251 
ShippingOptions class, 107 
ShippingOptions property, 106 
ShippingPackagetag,200,233,246,254 
ShippingPafn1ent class, 109, 111 
ShippingPafn1ent property, llO, ll2 
ShippingPafn1entSerializer class, lll, 
ll2 
ShippingRange property, llO 
ShippingRateErrorMessage tag, 201, 254 
ShippingRates tag, 201 
ShippingRegions class, 46, 107, 109, Ill 
ShippingRegions object, 46 
ShippingRegions property, llO, ll2 
ShippingRegions tag, 220,251 
ShippingRegionsSerializer class, 46, lll, 
ll2 
ShippingService tag, 200, 201, 233, 247, 
254 
ShippingSettings class, 46, llO 
ShippingTerD1stag,220,252 
ShippingTYPe tag, 201, 233, 254 
ShipToAfrica tag, 233 
ShipToAsia tag, 233 
ShipToCaribbean tag, 233 
ShipToEurope tag, 234 
ShipToLatinAJ.nericatag,234 
ShipToMiddleEast tag, 234 
ShipToNorthArn.erica tag, 234 
ShipToOceania tag, 234 
ShipToSouthAinerica tag, 234 
ShipToZipCodetag,200,253 
Sltag,2ll 
Sinlplelist san1ple application, ll2-18 
autllenticating users, ll3-14 
intercepting eBay API XML, ll7-18 
listing iten1s, ll4-17 
SiteCurrency tag, 220, 241, 243, 252 
Siteld node, 178 
Siteld property, 50, 7 4, 86 
Siteld tag, 220, 223, 226, 252 
Index 
305 

Index 
306 
SiteldFilterType field, 269 
SiteldFilterType tag, 258 
Skip field, 269 
Skip tag, 258 
Slaven Rezic's Tk::Date module, 97, 101 
software platform. See eBay software 
platform 
SouthAmerica property, 109 
SouthAmerica tag, 252 
SQL Server database, 125-27 
SSL (Secure Sockets Layer), 164 
Star property, 74, 76, 86 
Star tag, 223 
StartingPagetag,207 
StartPrice property, 106 
StartPricetag,220,252 
StartTime property, 106 
StanJ1metag,220,237,252 
State property, 42, 82 
StateOrProvince tag, 214, 227 
Status class, 107, 108--9 
Status property, 74, 86, 106 
Statustag,217,223,227,239,261 
StatusBarText property, 280 
Statusls tag, 217, 260 
StatusListener, 151-52 
StoreCategory property, 106 
Storefrontlnfo tag, 252 
Storefrontltem property, 106 
Storefrontltem tag, 252 
StoreiD tag, 258 
StoreLocation property, 106 
StoreLocation tag, 223 
StoreName tag, 202, 258 
StoreOwner property, 74, 86 
Store0wnertag,223 
Stores Fixed-Price auction, 15 
StoreSearch tag, 258 
Street! tag, 214, 227 
Street2 tag, 214, 227 
StringCollection class, 41 
StringReader class, 172 
SubtitleFeetag,237 
SubtitleText tag, 234, 252 
Summarytag,203,204,206 
Sunglasses property, 86 
SuperFeatured tag, 199, 234, 250 
Suspended value, 78 
synchronization,131-35 
moving data between application 
and database, 131-33 
moving data between database and 
eBayservice,134-35 
SynchronizeCategories method, 134, 
156 
SynchronizeClock method, 134 
System namespace, 30 
System. Collections namespace, 48 
System.IO namespace, 30 
System.Net namespace, 165 
T 
Tag property, 65 
tags, XML, 168 
TargetUser field, 119 
TargetUsertag,227 
test users 
defined, 24 
validating 
inC#, 28--32 
in Perl, 32-36 
testing, 11 
testWithGetLogoURL method, 275 
Themeld tag, 234 
Ti tag, 211 
TimeBid tag, 241,243 
TimeLeft class, 41 
TimeLeft property, 106 
TimeLefttag,226,252 
TimeOfComment property, 118 
TimeOfComment tag, 208 
TimeTo tag, 211 
Title property, 106 
Titletag,220,226,234,252 
TitleBarlmage property, 106 
TitleBarlmagetag,253 
Tk::Date module, 97, 101 
Tk::'Ii'eeView control, 152-53 
TLS ('fiansport Layer Security), 164 
ToHashtable method, 111 
ToString method, 40, 73, 75, 79 
TotalFeedbackCountlNTl tag, 209 
TotalFeedbackCountlNT2 tag, 209 
TotalFeedbackCountlNT3 tag, 209 
TotalNumberOiPages tag, 213 
TotalPages property, 87 
TotalPages tag, 204 
'fiansactiontag,213 
'fiansactionld property, 118 
'fiansactionld tag, 208,221,227, 256, 
260 
'fiansactionPricetag,221 
'fiansactions tag, 213 
'fiansactionsPerPagetag,212,221,255 
'fiansport Layer Security (TLS), 164 
TreeNode class, 65 
trees, in XML, 169 
Thee View method, 61 
ThrquoiseShootingStar value, 77 
ThrquoiseStar value, 77 
'JYtag,211 
'JYpe property, 83, 106 
'JYpetag,206,221,226,234,250 

u 
Unconfirmed value, 78 
UniqueNegativeFeedbackCount tag 209 
UniquePositiveFeedbackCount tag, Z09 
Unknown value, 78 
UpdateGMTTime tag, 197 
Updateltem View, 144-46 
updatelogo.pl script, 275 
UpdatePricesFrornEBay method, 134 
UpdateSalesFrornEBay method, 134 
UpdateStatus method, 152 
UpdateTime tag, 197 
UpdateUserDetailsFrornEBay method, 
134,143 
Uploadltems method, 150 
Url property, 26, 31, 34 
URLModTime tag, 196 
user accounts, 44 
user agent class, 167 
User class, 47, 73, 88 
methods of, 75 
properties of, 7 4 
representing users with, 73-75 
Star property, 76 
User object, 90, 96 
User property, 129 
Usertag,213,241,243 
UserCollection, 75 
UserCollection class, 47, 73, 73-75 
UserCollection object, 75 
userid element, 268 
Userld property, 74, 85, 86, 90 
Userld tag, 223 
UserldChanged tag, 223 
UserldLastChanged property, 74, 86 
UserldLastChanged tag, 223 
User Info 
implementing inC#, 89-91 
implementing in Perl, 91-93 
User Registration interface, 52 
users 
vs. accounts, 71-72 
defined, 16-17 
test users, 24 
UserStarEnum, 76, 77, 79 
UserStatusEnum, 76, 78, 79 
User.ToString() method, 90 
using directive, 21 
UUid class, 41 
Uuid property, 106 
UUID tag, 234, 253 
v 
ValidateTestUser, 52 
ValidateTestUserRegistration interface 
228 
, 
ValidateTestUserRegistration method 
31,36 
, 
ValidateTestUserRegistrationCall 31 
ValidateTestUserRegistrationcall' 
interface, 24 
ValidateUser application, 26-36 187-90 
overview, 26-27 
' 
validating test user in C#, 28-32 
validating test user in Perl 32-36 
Validate User class, 28 
' 
V~dateUser namespace, 30 
Validate User sample application 26-27 
validating users 
' 
in C#, 28-32, 183-87 
in Perl, 32-36, 187-91 
ValidUserCall class, 183 
VATBusinessAvailable tag, 224 
VATPercenttag,234,249 
VATStatus tag, 224 
Vehicle class, 44 
Verb attribute, 195 
Verb field, 268 
Verb node, 178 
Verb property, 50 
VerifyAddltemCall, 52, 104 
Verifyltem interface, 228-38 
Version tag, 197,234 
V1ewAllNodestag, 197,198 
ViewPeriod property, 83 
ViewRecord property, 43 
ViewType property, 87, 96-97 
VisaMaster property, 109 
VisaMaster tag, 219, 234 
w 
Web sites, using eBay API within, 261-76 
obtaining list of items matching 
search criteria, 264-75 
obtaining search parameters, 262-64 
periodic maintenance tasks, 275-76 
WebRequest class, 166 
WeightMajor tag, 200, 234, 247, 254 
WeightMinor tag, 200, 235, 247, 254 
WeightUnit tag, 200,235,247,255 
WhoPays property, 109 
Win32::0LE library, 21, 22, 34 
Wm32::0LE->LastError() method, 36 
Win32::0LE->new function, 34 
Windows registry, 27 
WinDump tool, 57 
X 
X-EBAY-API-APP-NAME header, 181 
X-EBAY-API-CALL-NAME header, 181, 
182 
Index 
307 

Index 
308 
X-EBAY-API-CERT-NAME header, 181 
X-EBAY-API-COMPATIBIUTY-LEVEL 
header, 181, 182 
X-EBAY-API-DETAIL-LEVEL header, 181 
X-EBAY-API-DEV-NAME header, 181 
X-EBAY-API-SESSION-CERTIFICATE 
header, 181 
X-EBAY-API-SITEID header, 181 
XML,6,9, 168-74 
creating XML in C# and Perl, 170-71 
parsing XML in C#, 171-73 
parsing XML in Perl, 173-7 4 
Xml property, 117 
XML::Simple module, 274 
XML::Smart module, 274 
XmlTextReader, 172 
XmlTextReader class, 171-72 
y 
YellowShootingStar value, 77 
YellowStar value, 77 
z 
Zip property, 106 
Zip tag, 214, 228, 253 

JOIN THE APAESS FORUMS AND BE PART OF OUR COMMUNITY. You'll find discussions that cover topics 
of interest to IT professionals, programmers. and enthusiasts just like you. If you post a query to one of our 
forums, you can expect that some of the best minds in the business-especialty Apress authors, who all write 
with The Expert's VoiceTM_will chime in to help you.IN'rry not aim to become one of our most valuable partic-
ipants (MVPs) and win cool stuff? Here's a sampling of what you'll find: 
DATABASES 
Data drives everything. 
Share informatioo, exchange ideas. and discuss any database 
programming or administration issues. 
INTERNET TECHNOLOGIES AND NETWORKING 
Try living without plumbing (and eventually 1Pv6). 
Talk about networking topics including protocols. design, 
administration, wireless, wired, storage. backup, certifications. 
trends, and new technologies. 
JAVA 
We've come a long way from the old Oak tree. 
Hang out and discuss Java in wflatever flavor you choose: 
J2SE, J2EE, J2ME, Jakarta, and so on. 
MAC OSX 
All about the Zen of OS X. 
OS X is both the present and the Mure for Mac apps. Make 
suggestions. offer UP ideas, or boast about your new hardware. 
OPEN SOURCE 
Source code Is good; understanding (open) source is better. 
Discuss open source technologies and related topics such as 
PHP. MySQL. Unux, Pe~ . Apache, Python, and more. 
HOW TO PARTICIPATE: 
PROGRAMMING/BUSINESS 
Unfortunately, it Is. 
Talk about the Apress line of books that cover software 
methodology, best practices, and txlw programmers lnlelact with 
the .suits.. 
WEB DEVELOPMENT/DESIGN 
Ugly doesn't cut it anymore, and CGIIs absurd. 
Help is in sight for your site. And design solutions for your 
projects and get ideas for building an interactive Web site. 
SECURITY 
Lots of bad guys out there-the good guys need help. 
Discuss computer and network security issues here. Just don't let 
anyone else know the answers! 
TECHNOLOGY IN ACTION 
Cool things. Fun things. 
Its after hours. It's time to play. Whether you're Into LEGQQD 
MJNOSTORMSâ¢ or turning an old PC Into a DVR, this is where 
technology turns into fun. 
WINDOWS 
No defenestration here. 
Ask ques Â·ons about ali aspects of WindOws programming, get 
help on Microsoft technologies covered in Apress books. or 
provide feedback on any Apress WindOws book. 
Go to the Apress Forums site at http://forums.apress.com/. 
Click the New User link. 

