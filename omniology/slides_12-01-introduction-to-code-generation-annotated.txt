Alex Aiken 
Compilers 
Introduction to Code 
Generation 

Alex Aiken 
Code Generation 
• We focus on generating code for a stack machine 
with accumulator 
 
• We want to run the resulting code on a real machine 
– e.g., the MIPS processor (or simulator) 
 
• We simulate stack machine instructions using MIPS 
instructions and registers 

Alex Aiken 
Code Generation 
• The accumulator is kept in MIPS register $a0 
 
• The stack is kept in memory 
– The stack grows towards lower addresses 
– Standard convention on MIPS 
 
• The address of the next location on the stack  is kept in 
MIPS register $sp 
– The top of the stack is at address $sp + 4 
 

Alex Aiken 
Code Generation 
MIPS architecture 
– Prototypical Reduced Instruction Set Computer (RISC) 
 
– Most  operations use registers for operands & results 
 
– Use load & store instructions to use values  in memory 
 
– 32 general purpose registers (32 bits each) 
• We use $sp, $a0 and $t1 (a temporary register) 
 
• Read the SPIM documentation for details  

Alex Aiken 
Code Generation 
– lw reg1 offset(reg2) 
• Load 32-bit word from address reg2 + offset into reg1 
– add reg1 reg2 reg3 
• reg1  reg2 + reg3 
– sw reg1 offset(reg2) 
• Store 32-bit word in reg1 at address reg2 + offset 
– addiu reg1 reg2 imm 
• reg1  reg2 + imm 
• “u” means overflow is not checked 
– li reg imm 
• reg  imm 

Alex Aiken 
Code Generation 
The stack-machine code for 7 + 5 in MIPS: 
acc  7 
push acc 
 
acc  5 
acc  acc + top_of_stack 
 
pop 
 
li $a0 7 
sw $a0 0($sp) 
addiu $sp $sp -4 
li $a0 5 
lw $t1 4($sp) 
add $a0 $a0 $t1 
addiu $sp $sp 4   

